
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010d70 <.init>:
   10d70:	push	{r3, lr}
   10d74:	bl	11024 <__assert_fail@plt+0x48>
   10d78:	pop	{r3, pc}

Disassembly of section .plt:

00010d7c <calloc@plt-0x14>:
   10d7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d80:	ldr	lr, [pc, #4]	; 10d8c <calloc@plt-0x4>
   10d84:	add	lr, pc, lr
   10d88:	ldr	pc, [lr, #8]!
   10d8c:	andeq	r7, r1, r4, ror r2

00010d90 <calloc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #628]!	; 0x274

00010d9c <fputs_unlocked@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #620]!	; 0x26c

00010da8 <raise@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #612]!	; 0x264

00010db4 <strcmp@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #604]!	; 0x25c

00010dc0 <fflush@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #596]!	; 0x254

00010dcc <free@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #588]!	; 0x24c

00010dd8 <_exit@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #580]!	; 0x244

00010de4 <memcpy@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #572]!	; 0x23c

00010df0 <mbsinit@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #564]!	; 0x234

00010dfc <ftruncate64@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #556]!	; 0x22c

00010e08 <dcgettext@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #548]!	; 0x224

00010e14 <realloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #540]!	; 0x21c

00010e20 <textdomain@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #532]!	; 0x214

00010e2c <iswprint@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #524]!	; 0x20c

00010e38 <__fxstat64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #516]!	; 0x204

00010e44 <fwrite@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e50 <lseek64@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #500]!	; 0x1f4

00010e5c <__ctype_get_mb_cur_max@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #492]!	; 0x1ec

00010e68 <__fpending@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #484]!	; 0x1e4

00010e74 <mbrtowc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #476]!	; 0x1dc

00010e80 <error@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #468]!	; 0x1d4

00010e8c <open64@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #460]!	; 0x1cc

00010e98 <malloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea4 <__libc_start_main@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #444]!	; 0x1bc

00010eb0 <__freading@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #436]!	; 0x1b4

00010ebc <__gmon_start__@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec8 <getopt_long@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed4 <__ctype_b_loc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #412]!	; 0x19c

00010ee0 <exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #404]!	; 0x194

00010eec <bcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #396]!	; 0x18c

00010ef8 <strlen@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #388]!	; 0x184

00010f04 <strchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #380]!	; 0x17c

00010f10 <__errno_location@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #372]!	; 0x174

00010f1c <__cxa_atexit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #364]!	; 0x16c

00010f28 <memset@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #356]!	; 0x164

00010f34 <__printf_chk@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #348]!	; 0x15c

00010f40 <fileno@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #340]!	; 0x154

00010f4c <__fprintf_chk@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #332]!	; 0x14c

00010f58 <fclose@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #324]!	; 0x144

00010f64 <fseeko64@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #316]!	; 0x13c

00010f70 <setlocale@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #308]!	; 0x134

00010f7c <strrchr@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #300]!	; 0x12c

00010f88 <nl_langinfo@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #292]!	; 0x124

00010f94 <__strtoll_internal@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #284]!	; 0x11c

00010fa0 <bindtextdomain@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #276]!	; 0x114

00010fac <__xstat64@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #268]!	; 0x10c

00010fb8 <strncmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #260]!	; 0x104

00010fc4 <abort@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #252]!	; 0xfc

00010fd0 <close@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #244]!	; 0xf4

00010fdc <__assert_fail@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #236]!	; 0xec

Disassembly of section .text:

00010fe8 <.text>:
   10fe8:	mov	fp, #0
   10fec:	mov	lr, #0
   10ff0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ff4:	mov	r2, sp
   10ff8:	push	{r2}		; (str r2, [sp, #-4]!)
   10ffc:	push	{r0}		; (str r0, [sp, #-4]!)
   11000:	ldr	ip, [pc, #16]	; 11018 <__assert_fail@plt+0x3c>
   11004:	push	{ip}		; (str ip, [sp, #-4]!)
   11008:	ldr	r0, [pc, #12]	; 1101c <__assert_fail@plt+0x40>
   1100c:	ldr	r3, [pc, #12]	; 11020 <__assert_fail@plt+0x44>
   11010:	bl	10ea4 <__libc_start_main@plt>
   11014:	bl	10fc4 <abort@plt>
   11018:	andeq	r6, r1, r8, asr pc
   1101c:	andeq	r1, r1, r4, asr #7
   11020:	strdeq	r6, [r1], -r8
   11024:	ldr	r3, [pc, #20]	; 11040 <__assert_fail@plt+0x64>
   11028:	ldr	r2, [pc, #20]	; 11044 <__assert_fail@plt+0x68>
   1102c:	add	r3, pc, r3
   11030:	ldr	r2, [r3, r2]
   11034:	cmp	r2, #0
   11038:	bxeq	lr
   1103c:	b	10ebc <__gmon_start__@plt>
   11040:	andeq	r6, r1, ip, asr #31
   11044:	ldrdeq	r0, [r0], -r4
   11048:	ldr	r0, [pc, #24]	; 11068 <__assert_fail@plt+0x8c>
   1104c:	ldr	r3, [pc, #24]	; 1106c <__assert_fail@plt+0x90>
   11050:	cmp	r3, r0
   11054:	bxeq	lr
   11058:	ldr	r3, [pc, #16]	; 11070 <__assert_fail@plt+0x94>
   1105c:	cmp	r3, #0
   11060:	bxeq	lr
   11064:	bx	r3
   11068:	andeq	r8, r2, r8, lsr #2
   1106c:	andeq	r8, r2, r8, lsr #2
   11070:	andeq	r0, r0, r0
   11074:	ldr	r0, [pc, #36]	; 110a0 <__assert_fail@plt+0xc4>
   11078:	ldr	r1, [pc, #36]	; 110a4 <__assert_fail@plt+0xc8>
   1107c:	sub	r1, r1, r0
   11080:	asr	r1, r1, #2
   11084:	add	r1, r1, r1, lsr #31
   11088:	asrs	r1, r1, #1
   1108c:	bxeq	lr
   11090:	ldr	r3, [pc, #16]	; 110a8 <__assert_fail@plt+0xcc>
   11094:	cmp	r3, #0
   11098:	bxeq	lr
   1109c:	bx	r3
   110a0:	andeq	r8, r2, r8, lsr #2
   110a4:	andeq	r8, r2, r8, lsr #2
   110a8:	andeq	r0, r0, r0
   110ac:	push	{r4, lr}
   110b0:	ldr	r4, [pc, #24]	; 110d0 <__assert_fail@plt+0xf4>
   110b4:	ldrb	r3, [r4]
   110b8:	cmp	r3, #0
   110bc:	popne	{r4, pc}
   110c0:	bl	11048 <__assert_fail@plt+0x6c>
   110c4:	mov	r3, #1
   110c8:	strb	r3, [r4]
   110cc:	pop	{r4, pc}
   110d0:	andeq	r8, r2, r4, asr #2
   110d4:	b	11074 <__assert_fail@plt+0x98>
   110d8:	push	{fp, lr}
   110dc:	mov	fp, sp
   110e0:	sub	sp, sp, #56	; 0x38
   110e4:	mov	r4, r0
   110e8:	cmp	r0, #0
   110ec:	bne	11380 <__assert_fail@plt+0x3a4>
   110f0:	movw	r1, #28587	; 0x6fab
   110f4:	mov	r0, #0
   110f8:	mov	r2, #5
   110fc:	movt	r1, #1
   11100:	bl	10e08 <dcgettext@plt>
   11104:	mov	r1, r0
   11108:	movw	r0, #33112	; 0x8158
   1110c:	movt	r0, #2
   11110:	ldr	r2, [r0]
   11114:	mov	r0, #1
   11118:	bl	10f34 <__printf_chk@plt>
   1111c:	movw	r1, #28616	; 0x6fc8
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10e08 <dcgettext@plt>
   11130:	movw	r7, #33084	; 0x813c
   11134:	movt	r7, #2
   11138:	ldr	r1, [r7]
   1113c:	bl	10d9c <fputs_unlocked@plt>
   11140:	movw	r1, #29815	; 0x7477
   11144:	mov	r0, #0
   11148:	mov	r2, #5
   1114c:	movt	r1, #1
   11150:	bl	10e08 <dcgettext@plt>
   11154:	ldr	r1, [r7]
   11158:	bl	10d9c <fputs_unlocked@plt>
   1115c:	movw	r1, #28891	; 0x70db
   11160:	mov	r0, #0
   11164:	mov	r2, #5
   11168:	movt	r1, #1
   1116c:	bl	10e08 <dcgettext@plt>
   11170:	ldr	r1, [r7]
   11174:	bl	10d9c <fputs_unlocked@plt>
   11178:	movw	r1, #28941	; 0x710d
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	movt	r1, #1
   11188:	bl	10e08 <dcgettext@plt>
   1118c:	ldr	r1, [r7]
   11190:	bl	10d9c <fputs_unlocked@plt>
   11194:	movw	r1, #29018	; 0x715a
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e08 <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10d9c <fputs_unlocked@plt>
   111b0:	movw	r1, #29130	; 0x71ca
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e08 <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10d9c <fputs_unlocked@plt>
   111cc:	movw	r1, #29175	; 0x71f7
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10e08 <dcgettext@plt>
   111e0:	ldr	r1, [r7]
   111e4:	bl	10d9c <fputs_unlocked@plt>
   111e8:	movw	r1, #29890	; 0x74c2
   111ec:	mov	r0, #0
   111f0:	mov	r2, #5
   111f4:	movt	r1, #1
   111f8:	bl	10e08 <dcgettext@plt>
   111fc:	ldr	r1, [r7]
   11200:	bl	10d9c <fputs_unlocked@plt>
   11204:	movw	r1, #29229	; 0x722d
   11208:	mov	r0, #0
   1120c:	mov	r2, #5
   11210:	movt	r1, #1
   11214:	bl	10e08 <dcgettext@plt>
   11218:	ldr	r1, [r7]
   1121c:	bl	10d9c <fputs_unlocked@plt>
   11220:	movw	r0, #30728	; 0x7808
   11224:	mov	r2, #48	; 0x30
   11228:	mov	r6, sp
   1122c:	movw	r5, #29420	; 0x72ec
   11230:	movt	r0, #1
   11234:	movt	r5, #1
   11238:	add	r1, r0, #32
   1123c:	add	r3, r0, #16
   11240:	vld1.64	{d18-d19}, [r0], r2
   11244:	vld1.64	{d16-d17}, [r1]
   11248:	vld1.64	{d20-d21}, [r3]
   1124c:	vldr	d22, [r0]
   11250:	add	r1, r6, #32
   11254:	add	r0, r6, #16
   11258:	vst1.64	{d16-d17}, [r1]
   1125c:	movw	r1, #30102	; 0x7596
   11260:	vst1.64	{d20-d21}, [r0]
   11264:	mov	r0, r6
   11268:	movt	r1, #1
   1126c:	vst1.64	{d18-d19}, [r0], r2
   11270:	vstr	d22, [r0]
   11274:	mov	r0, r5
   11278:	bl	10db4 <strcmp@plt>
   1127c:	cmp	r0, #0
   11280:	ldrne	r1, [r6, #8]!
   11284:	cmpne	r1, #0
   11288:	bne	11274 <__assert_fail@plt+0x298>
   1128c:	movw	r1, #30197	; 0x75f5
   11290:	ldr	r6, [r6, #4]
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	movt	r1, #1
   112a0:	bl	10e08 <dcgettext@plt>
   112a4:	movw	r2, #29544	; 0x7368
   112a8:	movw	r3, #30220	; 0x760c
   112ac:	mov	r1, r0
   112b0:	mov	r0, #1
   112b4:	movt	r2, #1
   112b8:	movt	r3, #1
   112bc:	bl	10f34 <__printf_chk@plt>
   112c0:	cmp	r6, #0
   112c4:	mov	r0, #5
   112c8:	mov	r1, #0
   112cc:	moveq	r6, r5
   112d0:	bl	10f70 <setlocale@plt>
   112d4:	cmp	r0, #0
   112d8:	beq	11310 <__assert_fail@plt+0x334>
   112dc:	movw	r1, #30260	; 0x7634
   112e0:	mov	r2, #3
   112e4:	movt	r1, #1
   112e8:	bl	10fb8 <strncmp@plt>
   112ec:	cmp	r0, #0
   112f0:	beq	11310 <__assert_fail@plt+0x334>
   112f4:	movw	r1, #30264	; 0x7638
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10e08 <dcgettext@plt>
   11308:	ldr	r1, [r7]
   1130c:	bl	10d9c <fputs_unlocked@plt>
   11310:	movw	r1, #30335	; 0x767f
   11314:	mov	r0, #0
   11318:	mov	r2, #5
   1131c:	movt	r1, #1
   11320:	bl	10e08 <dcgettext@plt>
   11324:	movw	r2, #30220	; 0x760c
   11328:	mov	r1, r0
   1132c:	mov	r0, #1
   11330:	mov	r3, r5
   11334:	movt	r2, #1
   11338:	bl	10f34 <__printf_chk@plt>
   1133c:	movw	r1, #30362	; 0x769a
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10e08 <dcgettext@plt>
   11350:	mov	r1, r0
   11354:	movw	r0, #30130	; 0x75b2
   11358:	movw	r3, #30412	; 0x76cc
   1135c:	cmp	r6, r5
   11360:	mov	r2, r6
   11364:	movt	r0, #1
   11368:	movt	r3, #1
   1136c:	moveq	r3, r0
   11370:	mov	r0, #1
   11374:	bl	10f34 <__printf_chk@plt>
   11378:	mov	r0, r4
   1137c:	bl	10ee0 <exit@plt>
   11380:	movw	r0, #33080	; 0x8138
   11384:	movw	r1, #28548	; 0x6f84
   11388:	mov	r2, #5
   1138c:	movt	r0, #2
   11390:	movt	r1, #1
   11394:	ldr	r5, [r0]
   11398:	mov	r0, #0
   1139c:	bl	10e08 <dcgettext@plt>
   113a0:	mov	r2, r0
   113a4:	movw	r0, #33112	; 0x8158
   113a8:	mov	r1, #1
   113ac:	movt	r0, #2
   113b0:	ldr	r3, [r0]
   113b4:	mov	r0, r5
   113b8:	bl	10f4c <__fprintf_chk@plt>
   113bc:	mov	r0, r4
   113c0:	bl	10ee0 <exit@plt>
   113c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c8:	add	fp, sp, #28
   113cc:	sub	sp, sp, #172	; 0xac
   113d0:	mov	r5, r0
   113d4:	ldr	r0, [r1]
   113d8:	mov	sl, r1
   113dc:	bl	1211c <__assert_fail@plt+0x1140>
   113e0:	movw	r1, #30412	; 0x76cc
   113e4:	mov	r0, #6
   113e8:	movt	r1, #1
   113ec:	bl	10f70 <setlocale@plt>
   113f0:	movw	r4, #29548	; 0x736c
   113f4:	movw	r1, #29429	; 0x72f5
   113f8:	movt	r4, #1
   113fc:	movt	r1, #1
   11400:	mov	r0, r4
   11404:	bl	10fa0 <bindtextdomain@plt>
   11408:	mov	r0, r4
   1140c:	bl	10e20 <textdomain@plt>
   11410:	movw	r0, #8240	; 0x2030
   11414:	movt	r0, #1
   11418:	bl	16f5c <__assert_fail@plt+0x5f80>
   1141c:	movw	r7, #30616	; 0x7798
   11420:	movw	r9, #33088	; 0x8140
   11424:	mov	r0, #0
   11428:	mov	r4, #0
   1142c:	mov	r6, #0
   11430:	movt	r7, #1
   11434:	movt	r9, #2
   11438:	str	r0, [sp, #48]	; 0x30
   1143c:	movw	r8, #33096	; 0x8148
   11440:	movt	r8, #2
   11444:	movw	r2, #29453	; 0x730d
   11448:	mov	r0, r5
   1144c:	mov	r1, sl
   11450:	mov	r3, r7
   11454:	str	r4, [sp]
   11458:	movt	r2, #1
   1145c:	bl	10ec8 <getopt_long@plt>
   11460:	cmp	r0, #98	; 0x62
   11464:	ble	116c4 <__assert_fail@plt+0x6e8>
   11468:	sub	r0, r0, #99	; 0x63
   1146c:	cmp	r0, #16
   11470:	bhi	11ecc <__assert_fail@plt+0xef0>
   11474:	add	r1, pc, #0
   11478:	ldr	pc, [r1, r0, lsl #2]
   1147c:	andeq	r1, r1, r0, asr #9
   11480:	andeq	r1, r1, ip, asr #29
   11484:	andeq	r1, r1, ip, asr #29
   11488:	andeq	r1, r1, ip, asr #29
   1148c:	andeq	r1, r1, ip, asr #29
   11490:	andeq	r1, r1, ip, asr #29
   11494:	andeq	r1, r1, ip, asr #29
   11498:	andeq	r1, r1, ip, asr #29
   1149c:	andeq	r1, r1, ip, asr #29
   114a0:	andeq	r1, r1, ip, asr #29
   114a4:	andeq	r1, r1, ip, asr #29
   114a8:	andeq	r1, r1, ip, asr #29
   114ac:	andeq	r1, r1, ip, asr #9
   114b0:	andeq	r1, r1, ip, asr #29
   114b4:	andeq	r1, r1, ip, asr #29
   114b8:	ldrdeq	r1, [r1], -r8
   114bc:	andeq	r1, r1, r4, ror #9
   114c0:	mov	r0, #1
   114c4:	strb	r0, [r8]
   114c8:	b	11444 <__assert_fail@plt+0x468>
   114cc:	mov	r0, #1
   114d0:	strb	r0, [r8, #1]
   114d4:	b	11444 <__assert_fail@plt+0x468>
   114d8:	ldr	r0, [r9]
   114dc:	str	r0, [r8, #4]
   114e0:	b	11444 <__assert_fail@plt+0x468>
   114e4:	bl	10ed4 <__ctype_b_loc@plt>
   114e8:	ldr	r6, [r9]
   114ec:	ldr	r2, [r0]
   114f0:	ldrb	r1, [r6]
   114f4:	add	r2, r2, r1, lsl #1
   114f8:	ldrb	r2, [r2, #1]
   114fc:	tst	r2, #32
   11500:	beq	11528 <__assert_fail@plt+0x54c>
   11504:	add	r2, r6, #1
   11508:	str	r2, [r9]
   1150c:	ldrb	r1, [r2], #1
   11510:	ldr	r3, [r0]
   11514:	add	r3, r3, r1, lsl #1
   11518:	ldrb	r3, [r3, #1]
   1151c:	tst	r3, #32
   11520:	bne	11508 <__assert_fail@plt+0x52c>
   11524:	sub	r6, r2, #1
   11528:	sub	r2, r1, #37	; 0x25
   1152c:	cmp	r2, #25
   11530:	bhi	115c8 <__assert_fail@plt+0x5ec>
   11534:	add	r3, pc, #4
   11538:	mov	r1, #3
   1153c:	ldr	pc, [r3, r2, lsl #2]
   11540:	andeq	r1, r1, r8, lsr #11
   11544:	andeq	r1, r1, r8, asr #11
   11548:	andeq	r1, r1, r8, asr #11
   1154c:	andeq	r1, r1, r8, asr #11
   11550:	andeq	r1, r1, r8, asr #11
   11554:	andeq	r1, r1, r8, asr #11
   11558:	andeq	r1, r1, r8, asr #11
   1155c:	andeq	r1, r1, r8, asr #11
   11560:	andeq	r1, r1, r8, asr #11
   11564:	andeq	r1, r1, r8, asr #11
   11568:			; <UNDEFINED> instruction: 0x000115b0
   1156c:	andeq	r1, r1, r8, asr #11
   11570:	andeq	r1, r1, r8, asr #11
   11574:	andeq	r1, r1, r8, asr #11
   11578:	andeq	r1, r1, r8, asr #11
   1157c:	andeq	r1, r1, r8, asr #11
   11580:	andeq	r1, r1, r8, asr #11
   11584:	andeq	r1, r1, r8, asr #11
   11588:	andeq	r1, r1, r8, asr #11
   1158c:	andeq	r1, r1, r8, asr #11
   11590:	andeq	r1, r1, r8, asr #11
   11594:	andeq	r1, r1, r8, asr #11
   11598:	andeq	r1, r1, r8, asr #11
   1159c:			; <UNDEFINED> instruction: 0x000115bc
   115a0:	andeq	r1, r1, r8, asr #11
   115a4:			; <UNDEFINED> instruction: 0x000115b8
   115a8:	mov	r1, #5
   115ac:	b	115bc <__assert_fail@plt+0x5e0>
   115b0:	mov	r1, #4
   115b4:	b	115bc <__assert_fail@plt+0x5e0>
   115b8:	mov	r1, #2
   115bc:	add	r6, r6, #1
   115c0:	str	r1, [sp, #48]	; 0x30
   115c4:	str	r6, [r9]
   115c8:	ldrb	r1, [r6]
   115cc:	ldr	r2, [r0]
   115d0:	add	r2, r2, r1, lsl #1
   115d4:	ldrb	r2, [r2, #1]
   115d8:	tst	r2, #32
   115dc:	beq	11604 <__assert_fail@plt+0x628>
   115e0:	add	r2, r6, #1
   115e4:	str	r2, [r9]
   115e8:	ldrb	r1, [r2], #1
   115ec:	ldr	r3, [r0]
   115f0:	add	r3, r3, r1, lsl #1
   115f4:	ldrb	r3, [r3, #1]
   115f8:	tst	r3, #32
   115fc:	bne	115e4 <__assert_fail@plt+0x608>
   11600:	sub	r6, r2, #1
   11604:	cmp	r1, #45	; 0x2d
   11608:	cmpne	r1, #43	; 0x2b
   1160c:	bne	11624 <__assert_fail@plt+0x648>
   11610:	ldr	r0, [sp, #48]	; 0x30
   11614:	mov	r8, #1
   11618:	cmp	r0, #0
   1161c:	beq	11628 <__assert_fail@plt+0x64c>
   11620:	b	11ed4 <__assert_fail@plt+0xef8>
   11624:	ldr	r8, [sp, #48]	; 0x30
   11628:	movw	r1, #29512	; 0x7348
   1162c:	mov	r0, #0
   11630:	mov	r2, #5
   11634:	movt	r1, #1
   11638:	bl	10e08 <dcgettext@plt>
   1163c:	mvn	r1, #0
   11640:	str	r0, [sp, #12]
   11644:	mov	r0, r6
   11648:	mov	r2, #0
   1164c:	mov	r3, #-2147483648	; 0x80000000
   11650:	str	r4, [sp, #16]
   11654:	str	r1, [sp]
   11658:	mvn	r1, #-2147483648	; 0x80000000
   1165c:	str	r1, [sp, #4]
   11660:	movw	r1, #29498	; 0x733a
   11664:	movt	r1, #1
   11668:	str	r1, [sp, #8]
   1166c:	bl	14e40 <__assert_fail@plt+0x3e64>
   11670:	str	r0, [sp, #52]	; 0x34
   11674:	orr	r0, r8, #1
   11678:	mov	r6, #1
   1167c:	str	r1, [sp, #40]	; 0x28
   11680:	str	r8, [sp, #48]	; 0x30
   11684:	cmp	r0, #5
   11688:	bne	1143c <__assert_fail@plt+0x460>
   1168c:	ldr	r0, [sp, #52]	; 0x34
   11690:	ldr	r1, [sp, #40]	; 0x28
   11694:	str	r8, [sp, #48]	; 0x30
   11698:	orrs	r0, r0, r1
   1169c:	bne	1143c <__assert_fail@plt+0x460>
   116a0:	movw	r1, #29527	; 0x7357
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	movt	r1, #1
   116b0:	bl	10e08 <dcgettext@plt>
   116b4:	mov	r2, r0
   116b8:	mov	r0, #1
   116bc:	mov	r1, #0
   116c0:	bl	10e80 <error@plt>
   116c4:	cmn	r0, #1
   116c8:	bne	11e6c <__assert_fail@plt+0xe90>
   116cc:	ldr	r1, [r8, #4]
   116d0:	cmp	r1, #0
   116d4:	mov	r0, r1
   116d8:	movwne	r0, #1
   116dc:	orr	r0, r6, r0
   116e0:	tst	r0, #1
   116e4:	beq	11ee0 <__assert_fail@plt+0xf04>
   116e8:	movw	r0, #33072	; 0x8130
   116ec:	cmp	r1, #0
   116f0:	movt	r0, #2
   116f4:	ldr	r7, [r0]
   116f8:	beq	11710 <__assert_fail@plt+0x734>
   116fc:	ldr	r0, [sp, #48]	; 0x30
   11700:	cmp	r0, #0
   11704:	eoreq	r0, r6, #1
   11708:	tsteq	r0, #1
   1170c:	beq	11f50 <__assert_fail@plt+0xf74>
   11710:	ldrb	r0, [r8, #1]
   11714:	mvn	r0, r0
   11718:	orr	r0, r6, r0
   1171c:	tst	r0, #1
   11720:	beq	11eec <__assert_fail@plt+0xf10>
   11724:	cmp	r7, r5
   11728:	bge	11f24 <__assert_fail@plt+0xf48>
   1172c:	cmp	r1, #0
   11730:	beq	11774 <__assert_fail@plt+0x798>
   11734:	add	r2, sp, #64	; 0x40
   11738:	mov	r0, #3
   1173c:	bl	10fac <__xstat64@plt>
   11740:	cmp	r0, #0
   11744:	bne	11fac <__assert_fail@plt+0xfd0>
   11748:	ldr	r0, [sp, #80]	; 0x50
   1174c:	and	r0, r0, #53248	; 0xd000
   11750:	orr	r0, r0, #8192	; 0x2000
   11754:	cmp	r0, #40960	; 0xa000
   11758:	bne	11788 <__assert_fail@plt+0x7ac>
   1175c:	ldr	r0, [sp, #116]	; 0x74
   11760:	cmn	r0, #1
   11764:	ble	11fd0 <__assert_fail@plt+0xff4>
   11768:	ldr	r4, [sp, #112]	; 0x70
   1176c:	mov	r2, r0
   11770:	b	117f8 <__assert_fail@plt+0x81c>
   11774:	ldr	r6, [sp, #40]	; 0x28
   11778:	mvn	r0, #0
   1177c:	mvn	r4, #0
   11780:	str	r0, [sp, #32]
   11784:	b	11820 <__assert_fail@plt+0x844>
   11788:	ldr	r0, [r8, #4]
   1178c:	mov	r1, #0
   11790:	bl	10e8c <open64@plt>
   11794:	cmp	r0, #0
   11798:	bmi	11fd0 <__assert_fail@plt+0xff4>
   1179c:	mov	r4, r0
   117a0:	mov	r0, #2
   117a4:	mov	r2, #0
   117a8:	mov	r3, #0
   117ac:	str	r0, [sp]
   117b0:	mov	r0, r4
   117b4:	bl	10e50 <lseek64@plt>
   117b8:	mov	r8, r0
   117bc:	mov	r5, r1
   117c0:	bl	10f10 <__errno_location@plt>
   117c4:	mov	r9, r0
   117c8:	ldr	r0, [r0]
   117cc:	str	r0, [sp, #60]	; 0x3c
   117d0:	mov	r0, r4
   117d4:	mov	r4, r8
   117d8:	bl	10fd0 <close@plt>
   117dc:	mvn	r1, #0
   117e0:	subs	r0, r1, r8
   117e4:	sbcs	r0, r1, r5
   117e8:	bge	11fc0 <__assert_fail@plt+0xfe4>
   117ec:	movw	r8, #33096	; 0x8148
   117f0:	mov	r2, r5
   117f4:	movt	r8, #2
   117f8:	ands	r0, r6, #1
   117fc:	ldr	r0, [sp, #52]	; 0x34
   11800:	ldr	r6, [sp, #40]	; 0x28
   11804:	moveq	r0, r4
   11808:	moveq	r6, r2
   1180c:	str	r0, [sp, #52]	; 0x34
   11810:	mvn	r0, #0
   11814:	moveq	r2, r0
   11818:	moveq	r4, r0
   1181c:	str	r2, [sp, #32]
   11820:	ldrb	r0, [r8]
   11824:	ldr	r9, [sl, r7, lsl #2]
   11828:	movw	r1, #2113	; 0x841
   1182c:	cmp	r0, #0
   11830:	movwne	r1, #2049	; 0x801
   11834:	cmp	r9, #0
   11838:	str	r1, [sp, #56]	; 0x38
   1183c:	beq	11e5c <__assert_fail@plt+0xe80>
   11840:	ldr	r0, [sp, #32]
   11844:	ldr	r1, [sp, #48]	; 0x30
   11848:	mov	r5, #0
   1184c:	str	r4, [sp, #28]
   11850:	str	r6, [sp, #40]	; 0x28
   11854:	cmp	r0, #0
   11858:	mov	r0, #0
   1185c:	movwmi	r0, #1
   11860:	cmp	r1, #0
   11864:	movwne	r1, #1
   11868:	and	r0, r1, r0
   1186c:	str	r0, [sp, #36]	; 0x24
   11870:	add	r0, sl, r7, lsl #2
   11874:	add	sl, r0, #4
   11878:	add	r0, sp, #64	; 0x40
   1187c:	add	r0, r0, #48	; 0x30
   11880:	str	r0, [sp, #24]
   11884:	b	118d4 <__assert_fail@plt+0x8f8>
   11888:	movw	r1, #29769	; 0x7449
   1188c:	ldr	r4, [r0]
   11890:	mov	r0, #0
   11894:	mov	r2, #5
   11898:	movt	r1, #1
   1189c:	bl	10e08 <dcgettext@plt>
   118a0:	mov	r5, r0
   118a4:	mov	r0, #4
   118a8:	mov	r1, r9
   118ac:	bl	13bb8 <__assert_fail@plt+0x2bdc>
   118b0:	mov	r3, r0
   118b4:	mov	r0, #0
   118b8:	mov	r1, r4
   118bc:	mov	r2, r5
   118c0:	bl	10e80 <error@plt>
   118c4:	mov	r5, #1
   118c8:	ldr	r9, [sl], #4
   118cc:	cmp	r9, #0
   118d0:	beq	11e60 <__assert_fail@plt+0xe84>
   118d4:	ldr	r1, [sp, #56]	; 0x38
   118d8:	mov	r0, r9
   118dc:	movw	r2, #438	; 0x1b6
   118e0:	bl	10e8c <open64@plt>
   118e4:	cmn	r0, #1
   118e8:	ble	1196c <__assert_fail@plt+0x990>
   118ec:	mov	r3, r0
   118f0:	ldrb	r0, [r8, #1]
   118f4:	ldr	r1, [sp, #36]	; 0x24
   118f8:	ldr	r4, [sp, #52]	; 0x34
   118fc:	str	r5, [sp, #44]	; 0x2c
   11900:	mov	r5, r6
   11904:	str	r3, [sp, #60]	; 0x3c
   11908:	orr	r0, r0, r1
   1190c:	tst	r0, #1
   11910:	beq	11a74 <__assert_fail@plt+0xa98>
   11914:	mov	r0, #3
   11918:	mov	r1, r3
   1191c:	add	r2, sp, #64	; 0x40
   11920:	bl	10e38 <__fxstat64@plt>
   11924:	cmp	r0, #0
   11928:	beq	1198c <__assert_fail@plt+0x9b0>
   1192c:	bl	10f10 <__errno_location@plt>
   11930:	movw	r1, #30436	; 0x76e4
   11934:	ldr	r4, [r0]
   11938:	mov	r0, #0
   1193c:	mov	r2, #5
   11940:	movt	r1, #1
   11944:	bl	10e08 <dcgettext@plt>
   11948:	mov	r5, r0
   1194c:	mov	r0, #4
   11950:	mov	r1, r9
   11954:	bl	13bb8 <__assert_fail@plt+0x2bdc>
   11958:	mov	r3, r0
   1195c:	mov	r0, #0
   11960:	mov	r1, r4
   11964:	mov	r2, r5
   11968:	b	11c8c <__assert_fail@plt+0xcb0>
   1196c:	ldrb	r4, [r8]
   11970:	bl	10f10 <__errno_location@plt>
   11974:	cmp	r4, #1
   11978:	bne	11888 <__assert_fail@plt+0x8ac>
   1197c:	ldr	r1, [r0]
   11980:	cmp	r1, #2
   11984:	bne	11888 <__assert_fail@plt+0x8ac>
   11988:	b	118c8 <__assert_fail@plt+0x8ec>
   1198c:	ldrb	r0, [r8, #1]
   11990:	ldr	r4, [sp, #52]	; 0x34
   11994:	ldr	r3, [sp, #60]	; 0x3c
   11998:	mov	r5, r6
   1199c:	cmp	r0, #1
   119a0:	bne	11a74 <__assert_fail@plt+0xa98>
   119a4:	ldr	r0, [sp, #120]	; 0x78
   119a8:	mov	r5, #512	; 0x200
   119ac:	cmp	r0, #536870913	; 0x20000001
   119b0:	movcc	r5, r0
   119b4:	cmp	r0, #0
   119b8:	mov	r0, #512	; 0x200
   119bc:	movle	r5, r0
   119c0:	cmn	r5, #1
   119c4:	ble	119e8 <__assert_fail@plt+0xa0c>
   119c8:	cmp	r5, #0
   119cc:	beq	11a60 <__assert_fail@plt+0xa84>
   119d0:	cmn	r6, #1
   119d4:	ble	11a24 <__assert_fail@plt+0xa48>
   119d8:	asr	r3, r5, #31
   119dc:	mvn	r0, #0
   119e0:	mvn	r1, #-2147483648	; 0x80000000
   119e4:	b	11a04 <__assert_fail@plt+0xa28>
   119e8:	cmn	r6, #1
   119ec:	ble	11dec <__assert_fail@plt+0xe10>
   119f0:	cmn	r5, #1
   119f4:	beq	11a60 <__assert_fail@plt+0xa84>
   119f8:	asr	r3, r5, #31
   119fc:	mov	r0, #0
   11a00:	mov	r1, #-2147483648	; 0x80000000
   11a04:	mov	r2, r5
   11a08:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   11a0c:	ldr	r2, [sp, #52]	; 0x34
   11a10:	ldr	r3, [sp, #60]	; 0x3c
   11a14:	subs	r0, r0, r2
   11a18:	sbcs	r0, r1, r6
   11a1c:	bge	11a60 <__assert_fail@plt+0xa84>
   11a20:	b	11e14 <__assert_fail@plt+0xe38>
   11a24:	ldr	r0, [sp, #52]	; 0x34
   11a28:	mvn	r1, #0
   11a2c:	eor	r0, r0, r1
   11a30:	eor	r1, r6, r1
   11a34:	orrs	r0, r0, r1
   11a38:	beq	11a60 <__assert_fail@plt+0xa84>
   11a3c:	ldr	r2, [sp, #52]	; 0x34
   11a40:	mov	r0, #0
   11a44:	mov	r1, #-2147483648	; 0x80000000
   11a48:	mov	r3, r6
   11a4c:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   11a50:	ldr	r3, [sp, #60]	; 0x3c
   11a54:	subs	r0, r0, r5
   11a58:	sbcs	r0, r1, r5, asr #31
   11a5c:	blt	11e14 <__assert_fail@plt+0xe38>
   11a60:	ldr	r2, [sp, #52]	; 0x34
   11a64:	asr	r1, r5, #31
   11a68:	umull	r4, r0, r2, r5
   11a6c:	mla	r0, r2, r1, r0
   11a70:	mla	r5, r6, r5, r0
   11a74:	ldr	r0, [sp, #48]	; 0x30
   11a78:	cmp	r0, #0
   11a7c:	beq	11c14 <__assert_fail@plt+0xc38>
   11a80:	ldr	r8, [sp, #28]
   11a84:	ldr	r6, [sp, #32]
   11a88:	mvn	r1, #0
   11a8c:	subs	r0, r1, r8
   11a90:	sbcs	r0, r1, r6
   11a94:	bge	11acc <__assert_fail@plt+0xaf0>
   11a98:	ldr	r0, [sp, #48]	; 0x30
   11a9c:	sub	r0, r0, #2
   11aa0:	cmp	r0, #3
   11aa4:	bhi	11b04 <__assert_fail@plt+0xb28>
   11aa8:	add	r1, pc, #0
   11aac:	ldr	pc, [r1, r0, lsl #2]
   11ab0:	andeq	r1, r1, r0, asr #21
   11ab4:	strdeq	r1, [r1], -r0
   11ab8:	andeq	r1, r1, ip, lsl #22
   11abc:	andeq	r1, r1, r4, lsr fp
   11ac0:	subs	r0, r4, r8
   11ac4:	sbcs	r0, r5, r6
   11ac8:	b	11bf8 <__assert_fail@plt+0xc1c>
   11acc:	ldr	r0, [sp, #80]	; 0x50
   11ad0:	and	r0, r0, #53248	; 0xd000
   11ad4:	orr	r0, r0, #8192	; 0x2000
   11ad8:	cmp	r0, #40960	; 0xa000
   11adc:	bne	11cfc <__assert_fail@plt+0xd20>
   11ae0:	ldr	r0, [sp, #24]
   11ae4:	ldr	r6, [r0, #4]
   11ae8:	cmn	r6, #1
   11aec:	ble	11d3c <__assert_fail@plt+0xd60>
   11af0:	ldr	r8, [r0]
   11af4:	ldr	r0, [sp, #48]	; 0x30
   11af8:	sub	r0, r0, #2
   11afc:	cmp	r0, #3
   11b00:	bls	11aa8 <__assert_fail@plt+0xacc>
   11b04:	mov	r0, r5
   11b08:	b	11b64 <__assert_fail@plt+0xb88>
   11b0c:	mov	r7, r3
   11b10:	mov	r0, r8
   11b14:	mov	r1, r6
   11b18:	mov	r2, r4
   11b1c:	mov	r3, r5
   11b20:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   11b24:	subs	r4, r8, r2
   11b28:	sbc	r5, r6, r3
   11b2c:	mov	r3, r7
   11b30:	b	11c0c <__assert_fail@plt+0xc30>
   11b34:	mov	r7, r3
   11b38:	mov	r0, r8
   11b3c:	mov	r1, r6
   11b40:	mov	r2, r4
   11b44:	mov	r3, r5
   11b48:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   11b4c:	subs	r4, r4, r2
   11b50:	sbc	r0, r5, r3
   11b54:	orrs	r1, r2, r3
   11b58:	mov	r3, r7
   11b5c:	moveq	r4, r1
   11b60:	moveq	r0, r1
   11b64:	cmn	r6, #1
   11b68:	mov	r1, #0
   11b6c:	mov	r2, #0
   11b70:	movwgt	r1, #1
   11b74:	adds	r4, r8, r4
   11b78:	movw	r8, #33096	; 0x8148
   11b7c:	adc	r5, r6, r0
   11b80:	movt	r8, #2
   11b84:	cmn	r5, #1
   11b88:	movwgt	r2, #1
   11b8c:	subs	r2, r1, r2
   11b90:	movwne	r2, #1
   11b94:	cmn	r0, #1
   11b98:	mov	r0, #0
   11b9c:	movwgt	r0, #1
   11ba0:	sub	r0, r1, r0
   11ba4:	clz	r0, r0
   11ba8:	lsr	r0, r0, #5
   11bac:	and	r0, r0, r2
   11bb0:	cmp	r0, #1
   11bb4:	bne	11c14 <__assert_fail@plt+0xc38>
   11bb8:	movw	r1, #30540	; 0x774c
   11bbc:	mov	r0, #0
   11bc0:	mov	r2, #5
   11bc4:	movt	r1, #1
   11bc8:	bl	10e08 <dcgettext@plt>
   11bcc:	mov	r4, r0
   11bd0:	mov	r0, #4
   11bd4:	mov	r1, r9
   11bd8:	bl	13bb8 <__assert_fail@plt+0x2bdc>
   11bdc:	mov	r3, r0
   11be0:	mov	r0, #0
   11be4:	mov	r1, #0
   11be8:	mov	r2, r4
   11bec:	b	11c8c <__assert_fail@plt+0xcb0>
   11bf0:	subs	r0, r8, r4
   11bf4:	sbcs	r0, r6, r5
   11bf8:	mov	r0, #0
   11bfc:	movwlt	r0, #1
   11c00:	cmp	r0, #0
   11c04:	movne	r5, r6
   11c08:	movne	r4, r8
   11c0c:	movw	r8, #33096	; 0x8148
   11c10:	movt	r8, #2
   11c14:	rsbs	r0, r4, #0
   11c18:	mov	r6, #0
   11c1c:	mov	r7, #0
   11c20:	rscs	r0, r5, #0
   11c24:	mov	r0, r3
   11c28:	movwlt	r6, #1
   11c2c:	cmp	r6, #0
   11c30:	moveq	r4, r6
   11c34:	movne	r6, r5
   11c38:	mov	r2, r4
   11c3c:	mov	r3, r6
   11c40:	bl	10dfc <ftruncate64@plt>
   11c44:	cmp	r0, #0
   11c48:	beq	11c94 <__assert_fail@plt+0xcb8>
   11c4c:	bl	10f10 <__errno_location@plt>
   11c50:	movw	r1, #30575	; 0x776f
   11c54:	ldr	r5, [r0]
   11c58:	mov	r0, #0
   11c5c:	mov	r2, #5
   11c60:	movt	r1, #1
   11c64:	bl	10e08 <dcgettext@plt>
   11c68:	mov	r7, r0
   11c6c:	mov	r0, #4
   11c70:	mov	r1, r9
   11c74:	bl	13bb8 <__assert_fail@plt+0x2bdc>
   11c78:	mov	r3, r0
   11c7c:	mov	r0, #0
   11c80:	mov	r1, r5
   11c84:	mov	r2, r7
   11c88:	stm	sp, {r4, r6}
   11c8c:	bl	10e80 <error@plt>
   11c90:	mov	r7, #1
   11c94:	ldr	r0, [sp, #60]	; 0x3c
   11c98:	bl	10fd0 <close@plt>
   11c9c:	cmp	r0, #0
   11ca0:	beq	11dd0 <__assert_fail@plt+0xdf4>
   11ca4:	bl	10f10 <__errno_location@plt>
   11ca8:	movw	r1, #29796	; 0x7464
   11cac:	ldr	r4, [r0]
   11cb0:	mov	r0, #0
   11cb4:	mov	r2, #5
   11cb8:	movt	r1, #1
   11cbc:	bl	10e08 <dcgettext@plt>
   11cc0:	mov	r5, r0
   11cc4:	mov	r0, #4
   11cc8:	mov	r1, r9
   11ccc:	bl	13bb8 <__assert_fail@plt+0x2bdc>
   11cd0:	mov	r3, r0
   11cd4:	mov	r0, #0
   11cd8:	mov	r1, r4
   11cdc:	mov	r2, r5
   11ce0:	bl	10e80 <error@plt>
   11ce4:	mov	r5, #1
   11ce8:	ldr	r6, [sp, #40]	; 0x28
   11cec:	ldr	r9, [sl], #4
   11cf0:	cmp	r9, #0
   11cf4:	bne	118d4 <__assert_fail@plt+0x8f8>
   11cf8:	b	11e60 <__assert_fail@plt+0xe84>
   11cfc:	mov	r0, #2
   11d00:	mov	r2, #0
   11d04:	str	r0, [sp]
   11d08:	mov	r0, r3
   11d0c:	mov	r3, #0
   11d10:	bl	10e50 <lseek64@plt>
   11d14:	cmn	r1, #1
   11d18:	ble	11d74 <__assert_fail@plt+0xd98>
   11d1c:	ldr	r3, [sp, #60]	; 0x3c
   11d20:	mov	r8, r0
   11d24:	mov	r6, r1
   11d28:	ldr	r0, [sp, #48]	; 0x30
   11d2c:	sub	r0, r0, #2
   11d30:	cmp	r0, #3
   11d34:	bls	11aa8 <__assert_fail@plt+0xacc>
   11d38:	b	11b04 <__assert_fail@plt+0xb28>
   11d3c:	movw	r1, #30498	; 0x7722
   11d40:	mov	r0, #0
   11d44:	mov	r2, #5
   11d48:	movt	r1, #1
   11d4c:	bl	10e08 <dcgettext@plt>
   11d50:	mov	r4, r0
   11d54:	mov	r0, #4
   11d58:	mov	r1, r9
   11d5c:	bl	13bb8 <__assert_fail@plt+0x2bdc>
   11d60:	mov	r3, r0
   11d64:	mov	r0, #0
   11d68:	mov	r1, #0
   11d6c:	mov	r2, r4
   11d70:	b	11db0 <__assert_fail@plt+0xdd4>
   11d74:	bl	10f10 <__errno_location@plt>
   11d78:	movw	r1, #29743	; 0x742f
   11d7c:	ldr	r4, [r0]
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	movt	r1, #1
   11d8c:	bl	10e08 <dcgettext@plt>
   11d90:	mov	r5, r0
   11d94:	mov	r0, #4
   11d98:	mov	r1, r9
   11d9c:	bl	13bb8 <__assert_fail@plt+0x2bdc>
   11da0:	mov	r3, r0
   11da4:	mov	r0, #0
   11da8:	mov	r1, r4
   11dac:	mov	r2, r5
   11db0:	bl	10e80 <error@plt>
   11db4:	movw	r8, #33096	; 0x8148
   11db8:	mov	r7, #1
   11dbc:	movt	r8, #2
   11dc0:	ldr	r0, [sp, #60]	; 0x3c
   11dc4:	bl	10fd0 <close@plt>
   11dc8:	cmp	r0, #0
   11dcc:	bne	11ca4 <__assert_fail@plt+0xcc8>
   11dd0:	ldr	r5, [sp, #44]	; 0x2c
   11dd4:	orr	r5, r5, r7
   11dd8:	ldr	r6, [sp, #40]	; 0x28
   11ddc:	ldr	r9, [sl], #4
   11de0:	cmp	r9, #0
   11de4:	bne	118d4 <__assert_fail@plt+0x8f8>
   11de8:	b	11e60 <__assert_fail@plt+0xe84>
   11dec:	asr	r3, r5, #31
   11df0:	mvn	r0, #0
   11df4:	mvn	r1, #-2147483648	; 0x80000000
   11df8:	mov	r2, r5
   11dfc:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   11e00:	ldr	r2, [sp, #52]	; 0x34
   11e04:	ldr	r3, [sp, #60]	; 0x3c
   11e08:	subs	r0, r2, r0
   11e0c:	sbcs	r0, r6, r1
   11e10:	bge	11a60 <__assert_fail@plt+0xa84>
   11e14:	movw	r1, #30452	; 0x76f4
   11e18:	mov	r0, #0
   11e1c:	mov	r2, #5
   11e20:	movt	r1, #1
   11e24:	bl	10e08 <dcgettext@plt>
   11e28:	mov	r4, r0
   11e2c:	mov	r0, #4
   11e30:	mov	r1, r9
   11e34:	bl	13bb8 <__assert_fail@plt+0x2bdc>
   11e38:	ldr	r1, [sp, #52]	; 0x34
   11e3c:	mov	r2, r4
   11e40:	stm	sp, {r1, r6}
   11e44:	str	r0, [sp, #12]
   11e48:	mov	r0, #0
   11e4c:	mov	r1, #0
   11e50:	str	r5, [sp, #8]
   11e54:	bl	10e80 <error@plt>
   11e58:	b	11c90 <__assert_fail@plt+0xcb4>
   11e5c:	mov	r5, #0
   11e60:	and	r0, r5, #1
   11e64:	sub	sp, fp, #28
   11e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e6c:	cmn	r0, #3
   11e70:	bne	11ebc <__assert_fail@plt+0xee0>
   11e74:	movw	r0, #32992	; 0x80e0
   11e78:	movw	r2, #29558	; 0x7376
   11e7c:	mov	r1, #0
   11e80:	movt	r0, #2
   11e84:	movt	r2, #1
   11e88:	str	r1, [sp, #4]
   11e8c:	movw	r1, #29420	; 0x72ec
   11e90:	movt	r1, #1
   11e94:	ldr	r3, [r0]
   11e98:	movw	r0, #33084	; 0x813c
   11e9c:	str	r2, [sp]
   11ea0:	movw	r2, #29544	; 0x7368
   11ea4:	movt	r0, #2
   11ea8:	movt	r2, #1
   11eac:	ldr	r0, [r0]
   11eb0:	bl	14584 <__assert_fail@plt+0x35a8>
   11eb4:	mov	r0, #0
   11eb8:	bl	10ee0 <exit@plt>
   11ebc:	cmn	r0, #2
   11ec0:	bne	11ecc <__assert_fail@plt+0xef0>
   11ec4:	mov	r0, #0
   11ec8:	bl	110d8 <__assert_fail@plt+0xfc>
   11ecc:	mov	r0, #1
   11ed0:	bl	110d8 <__assert_fail@plt+0xfc>
   11ed4:	movw	r1, #29460	; 0x7314
   11ed8:	movt	r1, #1
   11edc:	b	11f2c <__assert_fail@plt+0xf50>
   11ee0:	movw	r1, #29572	; 0x7384
   11ee4:	movt	r1, #1
   11ee8:	b	11f58 <__assert_fail@plt+0xf7c>
   11eec:	movw	r1, #29663	; 0x73df
   11ef0:	mov	r0, #0
   11ef4:	mov	r2, #5
   11ef8:	movt	r1, #1
   11efc:	bl	10e08 <dcgettext@plt>
   11f00:	movw	r1, #29695	; 0x73ff
   11f04:	mov	r4, r0
   11f08:	mov	r0, #0
   11f0c:	movt	r1, #1
   11f10:	bl	140d0 <__assert_fail@plt+0x30f4>
   11f14:	movw	r1, #29605	; 0x73a5
   11f18:	mov	r5, r0
   11f1c:	movt	r1, #1
   11f20:	b	11f84 <__assert_fail@plt+0xfa8>
   11f24:	movw	r1, #29707	; 0x740b
   11f28:	movt	r1, #1
   11f2c:	mov	r0, #0
   11f30:	mov	r2, #5
   11f34:	bl	10e08 <dcgettext@plt>
   11f38:	mov	r2, r0
   11f3c:	mov	r0, #0
   11f40:	mov	r1, #0
   11f44:	bl	10e80 <error@plt>
   11f48:	mov	r0, #1
   11f4c:	bl	110d8 <__assert_fail@plt+0xfc>
   11f50:	movw	r1, #29624	; 0x73b8
   11f54:	movt	r1, #1
   11f58:	mov	r0, #0
   11f5c:	mov	r2, #5
   11f60:	bl	10e08 <dcgettext@plt>
   11f64:	movw	r1, #29605	; 0x73a5
   11f68:	mov	r4, r0
   11f6c:	mov	r0, #0
   11f70:	movt	r1, #1
   11f74:	bl	140d0 <__assert_fail@plt+0x30f4>
   11f78:	movw	r1, #29612	; 0x73ac
   11f7c:	mov	r5, r0
   11f80:	movt	r1, #1
   11f84:	mov	r0, #1
   11f88:	bl	140d0 <__assert_fail@plt+0x30f4>
   11f8c:	str	r0, [sp]
   11f90:	mov	r0, #0
   11f94:	mov	r1, #0
   11f98:	mov	r2, r4
   11f9c:	mov	r3, r5
   11fa0:	bl	10e80 <error@plt>
   11fa4:	mov	r0, #1
   11fa8:	bl	110d8 <__assert_fail@plt+0xfc>
   11fac:	bl	10f10 <__errno_location@plt>
   11fb0:	ldr	r4, [r0]
   11fb4:	movw	r1, #29728	; 0x7420
   11fb8:	movt	r1, #1
   11fbc:	b	11fe0 <__assert_fail@plt+0x1004>
   11fc0:	ldr	r0, [sp, #60]	; 0x3c
   11fc4:	movw	r8, #33096	; 0x8148
   11fc8:	movt	r8, #2
   11fcc:	str	r0, [r9]
   11fd0:	bl	10f10 <__errno_location@plt>
   11fd4:	ldr	r4, [r0]
   11fd8:	movw	r1, #29743	; 0x742f
   11fdc:	movt	r1, #1
   11fe0:	mov	r0, #0
   11fe4:	mov	r2, #5
   11fe8:	bl	10e08 <dcgettext@plt>
   11fec:	ldr	r1, [r8, #4]
   11ff0:	mov	r5, r0
   11ff4:	mov	r0, #4
   11ff8:	bl	13bb8 <__assert_fail@plt+0x2bdc>
   11ffc:	mov	r3, r0
   12000:	mov	r0, #1
   12004:	mov	r1, r4
   12008:	mov	r2, r5
   1200c:	bl	10e80 <error@plt>
   12010:	movw	r1, #33104	; 0x8150
   12014:	movt	r1, #2
   12018:	str	r0, [r1, #4]
   1201c:	bx	lr
   12020:	movw	r1, #33104	; 0x8150
   12024:	movt	r1, #2
   12028:	strb	r0, [r1]
   1202c:	bx	lr
   12030:	push	{r4, r5, r6, sl, fp, lr}
   12034:	add	fp, sp, #16
   12038:	sub	sp, sp, #8
   1203c:	movw	r0, #33084	; 0x813c
   12040:	movt	r0, #2
   12044:	ldr	r0, [r0]
   12048:	bl	16880 <__assert_fail@plt+0x58a4>
   1204c:	cmp	r0, #0
   12050:	beq	12078 <__assert_fail@plt+0x109c>
   12054:	movw	r5, #33104	; 0x8150
   12058:	movt	r5, #2
   1205c:	ldrb	r0, [r5]
   12060:	cmp	r0, #0
   12064:	beq	120a4 <__assert_fail@plt+0x10c8>
   12068:	bl	10f10 <__errno_location@plt>
   1206c:	ldr	r0, [r0]
   12070:	cmp	r0, #32
   12074:	bne	120a4 <__assert_fail@plt+0x10c8>
   12078:	movw	r0, #33080	; 0x8138
   1207c:	movt	r0, #2
   12080:	ldr	r0, [r0]
   12084:	bl	16880 <__assert_fail@plt+0x58a4>
   12088:	cmp	r0, #0
   1208c:	subeq	sp, fp, #16
   12090:	popeq	{r4, r5, r6, sl, fp, pc}
   12094:	movw	r0, #32996	; 0x80e4
   12098:	movt	r0, #2
   1209c:	ldr	r0, [r0]
   120a0:	bl	10dd8 <_exit@plt>
   120a4:	movw	r1, #30799	; 0x784f
   120a8:	mov	r0, #0
   120ac:	mov	r2, #5
   120b0:	movt	r1, #1
   120b4:	bl	10e08 <dcgettext@plt>
   120b8:	ldr	r6, [r5, #4]
   120bc:	mov	r4, r0
   120c0:	bl	10f10 <__errno_location@plt>
   120c4:	ldr	r5, [r0]
   120c8:	cmp	r6, #0
   120cc:	bne	120e8 <__assert_fail@plt+0x110c>
   120d0:	movw	r2, #30815	; 0x785f
   120d4:	mov	r0, #0
   120d8:	mov	r1, r5
   120dc:	mov	r3, r4
   120e0:	movt	r2, #1
   120e4:	b	12108 <__assert_fail@plt+0x112c>
   120e8:	mov	r0, r6
   120ec:	bl	13d58 <__assert_fail@plt+0x2d7c>
   120f0:	movw	r2, #30811	; 0x785b
   120f4:	mov	r3, r0
   120f8:	str	r4, [sp]
   120fc:	mov	r0, #0
   12100:	mov	r1, r5
   12104:	movt	r2, #1
   12108:	bl	10e80 <error@plt>
   1210c:	movw	r0, #32996	; 0x80e4
   12110:	movt	r0, #2
   12114:	ldr	r0, [r0]
   12118:	bl	10dd8 <_exit@plt>
   1211c:	push	{r4, r5, fp, lr}
   12120:	add	fp, sp, #8
   12124:	cmp	r0, #0
   12128:	beq	121bc <__assert_fail@plt+0x11e0>
   1212c:	mov	r1, #47	; 0x2f
   12130:	mov	r4, r0
   12134:	bl	10f7c <strrchr@plt>
   12138:	cmp	r0, #0
   1213c:	mov	r5, r4
   12140:	addne	r5, r0, #1
   12144:	sub	r0, r5, r4
   12148:	cmp	r0, #7
   1214c:	blt	121a0 <__assert_fail@plt+0x11c4>
   12150:	movw	r1, #30874	; 0x789a
   12154:	sub	r0, r5, #7
   12158:	mov	r2, #7
   1215c:	movt	r1, #1
   12160:	bl	10fb8 <strncmp@plt>
   12164:	cmp	r0, #0
   12168:	bne	121a0 <__assert_fail@plt+0x11c4>
   1216c:	movw	r1, #30882	; 0x78a2
   12170:	mov	r0, r5
   12174:	mov	r2, #3
   12178:	movt	r1, #1
   1217c:	bl	10fb8 <strncmp@plt>
   12180:	cmp	r0, #0
   12184:	beq	12190 <__assert_fail@plt+0x11b4>
   12188:	mov	r4, r5
   1218c:	b	121a0 <__assert_fail@plt+0x11c4>
   12190:	movw	r0, #33064	; 0x8128
   12194:	add	r4, r5, #3
   12198:	movt	r0, #2
   1219c:	str	r4, [r0]
   121a0:	movw	r0, #33068	; 0x812c
   121a4:	movt	r0, #2
   121a8:	str	r4, [r0]
   121ac:	movw	r0, #33112	; 0x8158
   121b0:	movt	r0, #2
   121b4:	str	r4, [r0]
   121b8:	pop	{r4, r5, fp, pc}
   121bc:	movw	r0, #33080	; 0x8138
   121c0:	mov	r1, #55	; 0x37
   121c4:	mov	r2, #1
   121c8:	movt	r0, #2
   121cc:	ldr	r3, [r0]
   121d0:	movw	r0, #30818	; 0x7862
   121d4:	movt	r0, #1
   121d8:	bl	10e44 <fwrite@plt>
   121dc:	bl	10fc4 <abort@plt>
   121e0:	push	{r4, r5, r6, sl, fp, lr}
   121e4:	add	fp, sp, #16
   121e8:	mov	r4, r0
   121ec:	movw	r0, #33120	; 0x8160
   121f0:	movt	r0, #2
   121f4:	cmp	r4, #0
   121f8:	moveq	r4, r0
   121fc:	bl	10f10 <__errno_location@plt>
   12200:	ldr	r6, [r0]
   12204:	mov	r5, r0
   12208:	mov	r0, r4
   1220c:	mov	r1, #48	; 0x30
   12210:	bl	14c18 <__assert_fail@plt+0x3c3c>
   12214:	str	r6, [r5]
   12218:	pop	{r4, r5, r6, sl, fp, pc}
   1221c:	movw	r1, #33120	; 0x8160
   12220:	cmp	r0, #0
   12224:	movt	r1, #2
   12228:	movne	r1, r0
   1222c:	ldr	r0, [r1]
   12230:	bx	lr
   12234:	movw	r2, #33120	; 0x8160
   12238:	cmp	r0, #0
   1223c:	movt	r2, #2
   12240:	movne	r2, r0
   12244:	str	r1, [r2]
   12248:	bx	lr
   1224c:	movw	r3, #33120	; 0x8160
   12250:	cmp	r0, #0
   12254:	and	r2, r2, #1
   12258:	movt	r3, #2
   1225c:	movne	r3, r0
   12260:	ubfx	r0, r1, #5, #3
   12264:	and	r1, r1, #31
   12268:	add	ip, r3, r0, lsl #2
   1226c:	mov	r0, #1
   12270:	ldr	r3, [ip, #8]
   12274:	and	r0, r0, r3, lsr r1
   12278:	eor	r2, r0, r2
   1227c:	eor	r1, r3, r2, lsl r1
   12280:	str	r1, [ip, #8]
   12284:	bx	lr
   12288:	movw	r2, #33120	; 0x8160
   1228c:	cmp	r0, #0
   12290:	movt	r2, #2
   12294:	movne	r2, r0
   12298:	ldr	r0, [r2, #4]
   1229c:	str	r1, [r2, #4]
   122a0:	bx	lr
   122a4:	push	{fp, lr}
   122a8:	mov	fp, sp
   122ac:	movw	r3, #33120	; 0x8160
   122b0:	cmp	r0, #0
   122b4:	movt	r3, #2
   122b8:	movne	r3, r0
   122bc:	cmp	r1, #0
   122c0:	mov	r0, #10
   122c4:	cmpne	r2, #0
   122c8:	str	r0, [r3]
   122cc:	bne	122d4 <__assert_fail@plt+0x12f8>
   122d0:	bl	10fc4 <abort@plt>
   122d4:	str	r1, [r3, #40]	; 0x28
   122d8:	str	r2, [r3, #44]	; 0x2c
   122dc:	pop	{fp, pc}
   122e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122e4:	add	fp, sp, #28
   122e8:	sub	sp, sp, #20
   122ec:	mov	r7, r0
   122f0:	ldr	r0, [fp, #8]
   122f4:	movw	r5, #33120	; 0x8160
   122f8:	mov	r8, r3
   122fc:	mov	r9, r2
   12300:	mov	sl, r1
   12304:	movt	r5, #2
   12308:	cmp	r0, #0
   1230c:	movne	r5, r0
   12310:	bl	10f10 <__errno_location@plt>
   12314:	ldr	r2, [r5, #40]	; 0x28
   12318:	ldr	r3, [r5, #44]	; 0x2c
   1231c:	mov	r4, r0
   12320:	ldm	r5, {r0, r1}
   12324:	add	r5, r5, #8
   12328:	ldr	r6, [r4]
   1232c:	stm	sp, {r0, r1, r5}
   12330:	mov	r0, r7
   12334:	mov	r1, sl
   12338:	str	r2, [sp, #12]
   1233c:	str	r3, [sp, #16]
   12340:	mov	r2, r9
   12344:	mov	r3, r8
   12348:	bl	12358 <__assert_fail@plt+0x137c>
   1234c:	str	r6, [r4]
   12350:	sub	sp, fp, #28
   12354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1235c:	add	fp, sp, #28
   12360:	sub	sp, sp, #156	; 0x9c
   12364:	str	r0, [fp, #-84]	; 0xffffffac
   12368:	add	r0, r2, #1
   1236c:	mov	r6, r1
   12370:	mov	r7, r3
   12374:	str	r2, [fp, #-80]	; 0xffffffb0
   12378:	str	r0, [sp, #80]	; 0x50
   1237c:	ldr	r0, [fp, #12]
   12380:	and	r1, r0, #1
   12384:	str	r1, [sp, #36]	; 0x24
   12388:	and	r1, r0, #4
   1238c:	str	r1, [sp, #32]
   12390:	ubfx	r8, r0, #1, #1
   12394:	bl	10e5c <__ctype_get_mb_cur_max@plt>
   12398:	str	r0, [sp, #40]	; 0x28
   1239c:	ldr	r0, [fp, #24]
   123a0:	ldr	r4, [fp, #8]
   123a4:	mov	r1, #0
   123a8:	str	r1, [fp, #-52]	; 0xffffffcc
   123ac:	mov	r1, #0
   123b0:	str	r1, [sp, #60]	; 0x3c
   123b4:	mov	r1, #1
   123b8:	str	r1, [sp, #84]	; 0x54
   123bc:	str	r0, [sp, #76]	; 0x4c
   123c0:	ldr	r0, [fp, #20]
   123c4:	str	r0, [sp, #72]	; 0x48
   123c8:	mov	r0, #0
   123cc:	str	r0, [sp, #56]	; 0x38
   123d0:	mov	r0, #0
   123d4:	str	r0, [fp, #-88]	; 0xffffffa8
   123d8:	mov	r0, #0
   123dc:	str	r0, [fp, #-72]	; 0xffffffb8
   123e0:	mov	r0, #0
   123e4:	cmp	r4, #10
   123e8:	bhi	13704 <__assert_fail@plt+0x2728>
   123ec:	add	r1, pc, #24
   123f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   123f4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   123f8:	mov	r5, r6
   123fc:	mov	r9, #0
   12400:	mov	r2, #1
   12404:	mov	r3, #0
   12408:	ldr	pc, [r1, r4, lsl #2]
   1240c:	ldrdeq	r2, [r1], -r4
   12410:	andeq	r2, r1, r0, lsl r5
   12414:	andeq	r2, r1, r4, ror #9
   12418:	andeq	r2, r1, ip, asr #9
   1241c:	andeq	r2, r1, r4, lsl #10
   12420:	andeq	r2, r1, r8, ror #10
   12424:	strdeq	r2, [r1], -r4
   12428:	andeq	r2, r1, r0, ror #15
   1242c:	andeq	r2, r1, r8, lsr r4
   12430:	andeq	r2, r1, r8, lsr r4
   12434:	andeq	r2, r1, r0, ror r6
   12438:	movw	r6, #30964	; 0x78f4
   1243c:	mov	r0, #0
   12440:	mov	r2, #5
   12444:	movt	r6, #1
   12448:	mov	r1, r6
   1244c:	bl	10e08 <dcgettext@plt>
   12450:	cmp	r0, r6
   12454:	str	r0, [sp, #72]	; 0x48
   12458:	bne	12648 <__assert_fail@plt+0x166c>
   1245c:	bl	16acc <__assert_fail@plt+0x5af0>
   12460:	ldrb	r1, [r0]
   12464:	and	r1, r1, #223	; 0xdf
   12468:	cmp	r1, #71	; 0x47
   1246c:	beq	125c8 <__assert_fail@plt+0x15ec>
   12470:	cmp	r1, #85	; 0x55
   12474:	bne	1262c <__assert_fail@plt+0x1650>
   12478:	ldrb	r1, [r0, #1]
   1247c:	and	r1, r1, #223	; 0xdf
   12480:	cmp	r1, #84	; 0x54
   12484:	bne	1262c <__assert_fail@plt+0x1650>
   12488:	ldrb	r1, [r0, #2]
   1248c:	and	r1, r1, #223	; 0xdf
   12490:	cmp	r1, #70	; 0x46
   12494:	bne	1262c <__assert_fail@plt+0x1650>
   12498:	ldrb	r1, [r0, #3]
   1249c:	cmp	r1, #45	; 0x2d
   124a0:	bne	1262c <__assert_fail@plt+0x1650>
   124a4:	ldrb	r1, [r0, #4]
   124a8:	cmp	r1, #56	; 0x38
   124ac:	bne	1262c <__assert_fail@plt+0x1650>
   124b0:	ldrb	r0, [r0, #5]
   124b4:	cmp	r0, #0
   124b8:	movw	r0, #30968	; 0x78f8
   124bc:	movt	r0, #1
   124c0:	str	r0, [sp, #72]	; 0x48
   124c4:	bne	1262c <__assert_fail@plt+0x1650>
   124c8:	b	12648 <__assert_fail@plt+0x166c>
   124cc:	mov	r0, #1
   124d0:	b	12510 <__assert_fail@plt+0x1534>
   124d4:	mov	r4, #0
   124d8:	mov	r9, #0
   124dc:	mov	r2, r0
   124e0:	b	12560 <__assert_fail@plt+0x1584>
   124e4:	tst	r8, #1
   124e8:	bne	12510 <__assert_fail@plt+0x1534>
   124ec:	mov	r2, r0
   124f0:	b	12538 <__assert_fail@plt+0x155c>
   124f4:	mov	r0, #1
   124f8:	mov	r9, #0
   124fc:	mov	r4, #5
   12500:	b	1257c <__assert_fail@plt+0x15a0>
   12504:	mov	r2, #1
   12508:	tst	r8, #1
   1250c:	beq	12538 <__assert_fail@plt+0x155c>
   12510:	mov	r1, #1
   12514:	mov	r9, #0
   12518:	mov	r4, #2
   1251c:	mov	r2, r0
   12520:	mov	r3, #1
   12524:	str	r1, [fp, #-72]	; 0xffffffb8
   12528:	movw	r1, #30966	; 0x78f6
   1252c:	movt	r1, #1
   12530:	str	r1, [fp, #-88]	; 0xffffffa8
   12534:	b	127e0 <__assert_fail@plt+0x1804>
   12538:	cmp	r5, #0
   1253c:	mov	r9, #1
   12540:	mov	r4, #2
   12544:	movne	r0, #39	; 0x27
   12548:	strbne	r0, [ip]
   1254c:	movw	r0, #30966	; 0x78f6
   12550:	movt	r0, #1
   12554:	str	r0, [fp, #-88]	; 0xffffffa8
   12558:	mov	r0, #1
   1255c:	str	r0, [fp, #-72]	; 0xffffffb8
   12560:	mov	r3, #0
   12564:	b	127e0 <__assert_fail@plt+0x1804>
   12568:	mov	r4, #5
   1256c:	tst	r8, #1
   12570:	beq	12598 <__assert_fail@plt+0x15bc>
   12574:	mov	r0, #1
   12578:	mov	r9, #0
   1257c:	str	r0, [fp, #-72]	; 0xffffffb8
   12580:	movw	r0, #30962	; 0x78f2
   12584:	mov	r2, #1
   12588:	mov	r3, #1
   1258c:	movt	r0, #1
   12590:	str	r0, [fp, #-88]	; 0xffffffa8
   12594:	b	127e0 <__assert_fail@plt+0x1804>
   12598:	cmp	r5, #0
   1259c:	mov	r3, #0
   125a0:	mov	r9, #1
   125a4:	mov	r2, #1
   125a8:	movne	r0, #34	; 0x22
   125ac:	strbne	r0, [ip]
   125b0:	movw	r0, #30962	; 0x78f2
   125b4:	movt	r0, #1
   125b8:	str	r0, [fp, #-88]	; 0xffffffa8
   125bc:	mov	r0, #1
   125c0:	str	r0, [fp, #-72]	; 0xffffffb8
   125c4:	b	127e0 <__assert_fail@plt+0x1804>
   125c8:	ldrb	r1, [r0, #1]
   125cc:	and	r1, r1, #223	; 0xdf
   125d0:	cmp	r1, #66	; 0x42
   125d4:	bne	1262c <__assert_fail@plt+0x1650>
   125d8:	ldrb	r1, [r0, #2]
   125dc:	cmp	r1, #49	; 0x31
   125e0:	bne	1262c <__assert_fail@plt+0x1650>
   125e4:	ldrb	r1, [r0, #3]
   125e8:	cmp	r1, #56	; 0x38
   125ec:	bne	1262c <__assert_fail@plt+0x1650>
   125f0:	ldrb	r1, [r0, #4]
   125f4:	cmp	r1, #48	; 0x30
   125f8:	bne	1262c <__assert_fail@plt+0x1650>
   125fc:	ldrb	r1, [r0, #5]
   12600:	cmp	r1, #51	; 0x33
   12604:	bne	1262c <__assert_fail@plt+0x1650>
   12608:	ldrb	r1, [r0, #6]
   1260c:	cmp	r1, #48	; 0x30
   12610:	bne	1262c <__assert_fail@plt+0x1650>
   12614:	ldrb	r0, [r0, #7]
   12618:	cmp	r0, #0
   1261c:	movw	r0, #30976	; 0x7900
   12620:	movt	r0, #1
   12624:	str	r0, [sp, #72]	; 0x48
   12628:	beq	12648 <__assert_fail@plt+0x166c>
   1262c:	movw	r1, #30962	; 0x78f2
   12630:	movw	r0, #30966	; 0x78f6
   12634:	cmp	r4, #9
   12638:	movt	r1, #1
   1263c:	movt	r0, #1
   12640:	moveq	r0, r1
   12644:	str	r0, [sp, #72]	; 0x48
   12648:	movw	r6, #30966	; 0x78f6
   1264c:	mov	r0, #0
   12650:	mov	r2, #5
   12654:	movt	r6, #1
   12658:	mov	r1, r6
   1265c:	bl	10e08 <dcgettext@plt>
   12660:	cmp	r0, r6
   12664:	str	r0, [sp, #76]	; 0x4c
   12668:	beq	126b4 <__assert_fail@plt+0x16d8>
   1266c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12670:	mov	r9, #0
   12674:	tst	r8, #1
   12678:	bne	127bc <__assert_fail@plt+0x17e0>
   1267c:	ldr	r0, [sp, #72]	; 0x48
   12680:	ldrb	r0, [r0]
   12684:	cmp	r0, #0
   12688:	beq	127bc <__assert_fail@plt+0x17e0>
   1268c:	ldr	r1, [sp, #72]	; 0x48
   12690:	mov	r9, #0
   12694:	add	r1, r1, #1
   12698:	cmp	r9, r5
   1269c:	strbcc	r0, [ip, r9]
   126a0:	ldrb	r0, [r1, r9]
   126a4:	add	r9, r9, #1
   126a8:	cmp	r0, #0
   126ac:	bne	12698 <__assert_fail@plt+0x16bc>
   126b0:	b	127bc <__assert_fail@plt+0x17e0>
   126b4:	bl	16acc <__assert_fail@plt+0x5af0>
   126b8:	ldrb	r1, [r0]
   126bc:	and	r1, r1, #223	; 0xdf
   126c0:	cmp	r1, #71	; 0x47
   126c4:	beq	12734 <__assert_fail@plt+0x1758>
   126c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   126cc:	cmp	r1, #85	; 0x55
   126d0:	bne	12790 <__assert_fail@plt+0x17b4>
   126d4:	ldrb	r1, [r0, #1]
   126d8:	and	r1, r1, #223	; 0xdf
   126dc:	cmp	r1, #84	; 0x54
   126e0:	bne	12790 <__assert_fail@plt+0x17b4>
   126e4:	ldrb	r1, [r0, #2]
   126e8:	and	r1, r1, #223	; 0xdf
   126ec:	cmp	r1, #70	; 0x46
   126f0:	bne	12790 <__assert_fail@plt+0x17b4>
   126f4:	ldrb	r1, [r0, #3]
   126f8:	cmp	r1, #45	; 0x2d
   126fc:	bne	12790 <__assert_fail@plt+0x17b4>
   12700:	ldrb	r1, [r0, #4]
   12704:	cmp	r1, #56	; 0x38
   12708:	bne	12790 <__assert_fail@plt+0x17b4>
   1270c:	ldrb	r0, [r0, #5]
   12710:	cmp	r0, #0
   12714:	bne	12790 <__assert_fail@plt+0x17b4>
   12718:	movw	r0, #30972	; 0x78fc
   1271c:	movt	r0, #1
   12720:	str	r0, [sp, #76]	; 0x4c
   12724:	mov	r9, #0
   12728:	tst	r8, #1
   1272c:	beq	1267c <__assert_fail@plt+0x16a0>
   12730:	b	127bc <__assert_fail@plt+0x17e0>
   12734:	ldrb	r1, [r0, #1]
   12738:	ldr	ip, [fp, #-84]	; 0xffffffac
   1273c:	and	r1, r1, #223	; 0xdf
   12740:	cmp	r1, #66	; 0x42
   12744:	bne	12790 <__assert_fail@plt+0x17b4>
   12748:	ldrb	r1, [r0, #2]
   1274c:	cmp	r1, #49	; 0x31
   12750:	bne	12790 <__assert_fail@plt+0x17b4>
   12754:	ldrb	r1, [r0, #3]
   12758:	cmp	r1, #56	; 0x38
   1275c:	bne	12790 <__assert_fail@plt+0x17b4>
   12760:	ldrb	r1, [r0, #4]
   12764:	cmp	r1, #48	; 0x30
   12768:	bne	12790 <__assert_fail@plt+0x17b4>
   1276c:	ldrb	r1, [r0, #5]
   12770:	cmp	r1, #51	; 0x33
   12774:	bne	12790 <__assert_fail@plt+0x17b4>
   12778:	ldrb	r1, [r0, #6]
   1277c:	cmp	r1, #48	; 0x30
   12780:	bne	12790 <__assert_fail@plt+0x17b4>
   12784:	ldrb	r0, [r0, #7]
   12788:	cmp	r0, #0
   1278c:	beq	135a4 <__assert_fail@plt+0x25c8>
   12790:	movw	r0, #30966	; 0x78f6
   12794:	cmp	r4, #9
   12798:	movt	r0, #1
   1279c:	mov	r1, r0
   127a0:	movw	r0, #30962	; 0x78f2
   127a4:	movt	r0, #1
   127a8:	moveq	r1, r0
   127ac:	str	r1, [sp, #76]	; 0x4c
   127b0:	mov	r9, #0
   127b4:	tst	r8, #1
   127b8:	beq	1267c <__assert_fail@plt+0x16a0>
   127bc:	ldr	r6, [sp, #76]	; 0x4c
   127c0:	mov	r0, r6
   127c4:	bl	10ef8 <strlen@plt>
   127c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   127cc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   127d0:	str	r0, [fp, #-72]	; 0xffffffb8
   127d4:	str	r6, [fp, #-88]	; 0xffffffa8
   127d8:	mov	r2, #1
   127dc:	mov	r3, r8
   127e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127e4:	str	r4, [fp, #-64]	; 0xffffffc0
   127e8:	mov	sl, #0
   127ec:	str	r3, [fp, #-76]	; 0xffffffb4
   127f0:	str	r2, [sp, #88]	; 0x58
   127f4:	cmp	r0, #0
   127f8:	movwne	r0, #1
   127fc:	and	r1, r0, r3
   12800:	and	r1, r2, r1
   12804:	str	r1, [sp, #48]	; 0x30
   12808:	sub	r1, r4, #2
   1280c:	clz	r1, r1
   12810:	lsr	r1, r1, #5
   12814:	and	r1, r1, r3
   12818:	str	r1, [sp, #44]	; 0x2c
   1281c:	subs	r1, r4, #2
   12820:	eor	r4, r3, #1
   12824:	movwne	r1, #1
   12828:	str	r4, [sp, #92]	; 0x5c
   1282c:	orr	r4, r1, r4
   12830:	and	r1, r1, r2
   12834:	and	r0, r0, r1
   12838:	str	r4, [sp, #64]	; 0x40
   1283c:	ldr	r4, [sp, #84]	; 0x54
   12840:	str	r0, [fp, #-60]	; 0xffffffc4
   12844:	orr	r0, r1, r3
   12848:	ldr	r1, [fp, #16]
   1284c:	eor	r0, r0, #1
   12850:	clz	r1, r1
   12854:	lsr	r1, r1, #5
   12858:	orr	r0, r1, r0
   1285c:	str	r0, [fp, #-68]	; 0xffffffbc
   12860:	eor	r0, r2, #1
   12864:	str	r0, [sp, #52]	; 0x34
   12868:	cmn	r7, #1
   1286c:	beq	1287c <__assert_fail@plt+0x18a0>
   12870:	cmp	sl, r7
   12874:	bne	12888 <__assert_fail@plt+0x18ac>
   12878:	b	1351c <__assert_fail@plt+0x2540>
   1287c:	ldrb	r0, [lr, sl]
   12880:	cmp	r0, #0
   12884:	beq	13524 <__assert_fail@plt+0x2548>
   12888:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1288c:	cmp	r0, #0
   12890:	beq	128f0 <__assert_fail@plt+0x1914>
   12894:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12898:	mov	r6, r5
   1289c:	add	r5, sl, r0
   128a0:	cmp	r0, #2
   128a4:	bcc	12910 <__assert_fail@plt+0x1934>
   128a8:	mov	r0, #0
   128ac:	cmn	r7, #1
   128b0:	str	r0, [fp, #-56]	; 0xffffffc8
   128b4:	bne	128cc <__assert_fail@plt+0x18f0>
   128b8:	mov	r0, lr
   128bc:	bl	10ef8 <strlen@plt>
   128c0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   128c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   128c8:	mov	r7, r0
   128cc:	cmp	r5, r7
   128d0:	bls	12920 <__assert_fail@plt+0x1944>
   128d4:	mov	r0, #0
   128d8:	mov	r5, r6
   128dc:	str	r0, [fp, #-48]	; 0xffffffd0
   128e0:	ldrb	r6, [lr, sl]
   128e4:	cmp	r6, #126	; 0x7e
   128e8:	bls	12970 <__assert_fail@plt+0x1994>
   128ec:	b	12ecc <__assert_fail@plt+0x1ef0>
   128f0:	mov	r0, #0
   128f4:	str	r0, [fp, #-56]	; 0xffffffc8
   128f8:	mov	r0, #0
   128fc:	str	r0, [fp, #-48]	; 0xffffffd0
   12900:	ldrb	r6, [lr, sl]
   12904:	cmp	r6, #126	; 0x7e
   12908:	bls	12970 <__assert_fail@plt+0x1994>
   1290c:	b	12ecc <__assert_fail@plt+0x1ef0>
   12910:	mov	r0, #0
   12914:	str	r0, [fp, #-56]	; 0xffffffc8
   12918:	cmp	r5, r7
   1291c:	bhi	128d4 <__assert_fail@plt+0x18f8>
   12920:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12924:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12928:	add	r0, lr, sl
   1292c:	bl	10eec <bcmp@plt>
   12930:	ldr	r2, [sp, #92]	; 0x5c
   12934:	cmp	r0, #0
   12938:	mov	r1, r0
   1293c:	mov	r5, r6
   12940:	movwne	r1, #1
   12944:	orr	r1, r1, r2
   12948:	tst	r1, #1
   1294c:	beq	135e4 <__assert_fail@plt+0x2608>
   12950:	ldr	ip, [fp, #-84]	; 0xffffffac
   12954:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12958:	clz	r0, r0
   1295c:	lsr	r0, r0, #5
   12960:	str	r0, [fp, #-48]	; 0xffffffd0
   12964:	ldrb	r6, [lr, sl]
   12968:	cmp	r6, #126	; 0x7e
   1296c:	bhi	12ecc <__assert_fail@plt+0x1ef0>
   12970:	add	r3, pc, #16
   12974:	mov	r8, #1
   12978:	mov	r2, #110	; 0x6e
   1297c:	mov	r0, #97	; 0x61
   12980:	mov	r1, #0
   12984:	ldr	pc, [r3, r6, lsl #2]
   12988:	andeq	r2, r1, r4, lsl #25
   1298c:	andeq	r2, r1, ip, asr #29
   12990:	andeq	r2, r1, ip, asr #29
   12994:	andeq	r2, r1, ip, asr #29
   12998:	andeq	r2, r1, ip, asr #29
   1299c:	andeq	r2, r1, ip, asr #29
   129a0:	andeq	r2, r1, ip, asr #29
   129a4:	andeq	r2, r1, r0, lsl #31
   129a8:	andeq	r2, r1, r4, ror #24
   129ac:	andeq	r2, r1, ip, asr ip
   129b0:	andeq	r2, r1, r0, ror ip
   129b4:	andeq	r2, r1, r0, lsr #27
   129b8:	andeq	r2, r1, r4, asr ip
   129bc:	andeq	r2, r1, ip, ror #24
   129c0:	andeq	r2, r1, ip, asr #29
   129c4:	andeq	r2, r1, ip, asr #29
   129c8:	andeq	r2, r1, ip, asr #29
   129cc:	andeq	r2, r1, ip, asr #29
   129d0:	andeq	r2, r1, ip, asr #29
   129d4:	andeq	r2, r1, ip, asr #29
   129d8:	andeq	r2, r1, ip, asr #29
   129dc:	andeq	r2, r1, ip, asr #29
   129e0:	andeq	r2, r1, ip, asr #29
   129e4:	andeq	r2, r1, ip, asr #29
   129e8:	andeq	r2, r1, ip, asr #29
   129ec:	andeq	r2, r1, ip, asr #29
   129f0:	andeq	r2, r1, ip, asr #29
   129f4:	andeq	r2, r1, ip, asr #29
   129f8:	andeq	r2, r1, ip, asr #29
   129fc:	andeq	r2, r1, ip, asr #29
   12a00:	andeq	r2, r1, ip, asr #29
   12a04:	andeq	r2, r1, ip, asr #29
   12a08:	strdeq	r2, [r1], -r8
   12a0c:	strdeq	r2, [r1], -ip
   12a10:	strdeq	r2, [r1], -ip
   12a14:	andeq	r2, r1, ip, ror #23
   12a18:	strdeq	r2, [r1], -ip
   12a1c:	andeq	r2, r1, r4, lsl #23
   12a20:	strdeq	r2, [r1], -ip
   12a24:	andeq	r2, r1, r8, lsr #27
   12a28:	strdeq	r2, [r1], -ip
   12a2c:	strdeq	r2, [r1], -ip
   12a30:	strdeq	r2, [r1], -ip
   12a34:	andeq	r2, r1, r4, lsl #23
   12a38:	andeq	r2, r1, r4, lsl #23
   12a3c:	andeq	r2, r1, r4, lsl #23
   12a40:	andeq	r2, r1, r4, lsl #23
   12a44:	andeq	r2, r1, r4, lsl #23
   12a48:	andeq	r2, r1, r4, lsl #23
   12a4c:	andeq	r2, r1, r4, lsl #23
   12a50:	andeq	r2, r1, r4, lsl #23
   12a54:	andeq	r2, r1, r4, lsl #23
   12a58:	andeq	r2, r1, r4, lsl #23
   12a5c:	andeq	r2, r1, r4, lsl #23
   12a60:	andeq	r2, r1, r4, lsl #23
   12a64:	andeq	r2, r1, r4, lsl #23
   12a68:	andeq	r2, r1, r4, lsl #23
   12a6c:	andeq	r2, r1, r4, lsl #23
   12a70:	andeq	r2, r1, r4, lsl #23
   12a74:	strdeq	r2, [r1], -ip
   12a78:	strdeq	r2, [r1], -ip
   12a7c:	strdeq	r2, [r1], -ip
   12a80:	strdeq	r2, [r1], -ip
   12a84:	andeq	r2, r1, ip, ror #26
   12a88:	andeq	r2, r1, ip, asr #29
   12a8c:	andeq	r2, r1, r4, lsl #23
   12a90:	andeq	r2, r1, r4, lsl #23
   12a94:	andeq	r2, r1, r4, lsl #23
   12a98:	andeq	r2, r1, r4, lsl #23
   12a9c:	andeq	r2, r1, r4, lsl #23
   12aa0:	andeq	r2, r1, r4, lsl #23
   12aa4:	andeq	r2, r1, r4, lsl #23
   12aa8:	andeq	r2, r1, r4, lsl #23
   12aac:	andeq	r2, r1, r4, lsl #23
   12ab0:	andeq	r2, r1, r4, lsl #23
   12ab4:	andeq	r2, r1, r4, lsl #23
   12ab8:	andeq	r2, r1, r4, lsl #23
   12abc:	andeq	r2, r1, r4, lsl #23
   12ac0:	andeq	r2, r1, r4, lsl #23
   12ac4:	andeq	r2, r1, r4, lsl #23
   12ac8:	andeq	r2, r1, r4, lsl #23
   12acc:	andeq	r2, r1, r4, lsl #23
   12ad0:	andeq	r2, r1, r4, lsl #23
   12ad4:	andeq	r2, r1, r4, lsl #23
   12ad8:	andeq	r2, r1, r4, lsl #23
   12adc:	andeq	r2, r1, r4, lsl #23
   12ae0:	andeq	r2, r1, r4, lsl #23
   12ae4:	andeq	r2, r1, r4, lsl #23
   12ae8:	andeq	r2, r1, r4, lsl #23
   12aec:	andeq	r2, r1, r4, lsl #23
   12af0:	andeq	r2, r1, r4, lsl #23
   12af4:	strdeq	r2, [r1], -ip
   12af8:	andeq	r2, r1, r0, lsr ip
   12afc:	andeq	r2, r1, r4, lsl #23
   12b00:	strdeq	r2, [r1], -ip
   12b04:	andeq	r2, r1, r4, lsl #23
   12b08:	strdeq	r2, [r1], -ip
   12b0c:	andeq	r2, r1, r4, lsl #23
   12b10:	andeq	r2, r1, r4, lsl #23
   12b14:	andeq	r2, r1, r4, lsl #23
   12b18:	andeq	r2, r1, r4, lsl #23
   12b1c:	andeq	r2, r1, r4, lsl #23
   12b20:	andeq	r2, r1, r4, lsl #23
   12b24:	andeq	r2, r1, r4, lsl #23
   12b28:	andeq	r2, r1, r4, lsl #23
   12b2c:	andeq	r2, r1, r4, lsl #23
   12b30:	andeq	r2, r1, r4, lsl #23
   12b34:	andeq	r2, r1, r4, lsl #23
   12b38:	andeq	r2, r1, r4, lsl #23
   12b3c:	andeq	r2, r1, r4, lsl #23
   12b40:	andeq	r2, r1, r4, lsl #23
   12b44:	andeq	r2, r1, r4, lsl #23
   12b48:	andeq	r2, r1, r4, lsl #23
   12b4c:	andeq	r2, r1, r4, lsl #23
   12b50:	andeq	r2, r1, r4, lsl #23
   12b54:	andeq	r2, r1, r4, lsl #23
   12b58:	andeq	r2, r1, r4, lsl #23
   12b5c:	andeq	r2, r1, r4, lsl #23
   12b60:	andeq	r2, r1, r4, lsl #23
   12b64:	andeq	r2, r1, r4, lsl #23
   12b68:	andeq	r2, r1, r4, lsl #23
   12b6c:	andeq	r2, r1, r4, lsl #23
   12b70:	andeq	r2, r1, r4, lsl #23
   12b74:	andeq	r2, r1, r4, asr #23
   12b78:	strdeq	r2, [r1], -ip
   12b7c:	andeq	r2, r1, r4, asr #23
   12b80:	andeq	r2, r1, ip, ror #23
   12b84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b88:	tst	r0, #1
   12b8c:	bne	12e44 <__assert_fail@plt+0x1e68>
   12b90:	ldr	r1, [fp, #16]
   12b94:	ubfx	r0, r6, #5, #3
   12b98:	mov	r2, #1
   12b9c:	ldr	r0, [r1, r0, lsl #2]
   12ba0:	and	r1, r6, #31
   12ba4:	tst	r0, r2, lsl r1
   12ba8:	beq	12e44 <__assert_fail@plt+0x1e68>
   12bac:	mov	r0, r6
   12bb0:	mov	r1, r8
   12bb4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12bb8:	tst	r2, #1
   12bbc:	beq	12e64 <__assert_fail@plt+0x1e88>
   12bc0:	b	135c0 <__assert_fail@plt+0x25e4>
   12bc4:	cmp	r7, #1
   12bc8:	beq	12bec <__assert_fail@plt+0x1c10>
   12bcc:	mov	r8, #0
   12bd0:	cmn	r7, #1
   12bd4:	bne	12e30 <__assert_fail@plt+0x1e54>
   12bd8:	ldrb	r0, [lr, #1]
   12bdc:	cmp	r0, #0
   12be0:	beq	12bec <__assert_fail@plt+0x1c10>
   12be4:	mvn	r7, #0
   12be8:	b	12e30 <__assert_fail@plt+0x1e54>
   12bec:	mov	r8, #0
   12bf0:	cmp	sl, #0
   12bf4:	bne	12e30 <__assert_fail@plt+0x1e54>
   12bf8:	mov	r1, #1
   12bfc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c00:	cmp	r0, #2
   12c04:	bne	12c1c <__assert_fail@plt+0x1c40>
   12c08:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c0c:	mov	r8, r1
   12c10:	tst	r0, #1
   12c14:	beq	12b84 <__assert_fail@plt+0x1ba8>
   12c18:	b	135c0 <__assert_fail@plt+0x25e4>
   12c1c:	mov	r8, r1
   12c20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c24:	tst	r0, #1
   12c28:	beq	12b90 <__assert_fail@plt+0x1bb4>
   12c2c:	b	12e44 <__assert_fail@plt+0x1e68>
   12c30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c34:	cmp	r0, #2
   12c38:	bne	12ef8 <__assert_fail@plt+0x1f1c>
   12c3c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c40:	tst	r0, #1
   12c44:	bne	135c0 <__assert_fail@plt+0x25e4>
   12c48:	mov	r0, #0
   12c4c:	str	r0, [fp, #-56]	; 0xffffffc8
   12c50:	b	12f10 <__assert_fail@plt+0x1f34>
   12c54:	mov	r0, #102	; 0x66
   12c58:	b	12f80 <__assert_fail@plt+0x1fa4>
   12c5c:	mov	r2, #116	; 0x74
   12c60:	b	12c70 <__assert_fail@plt+0x1c94>
   12c64:	mov	r0, #98	; 0x62
   12c68:	b	12f80 <__assert_fail@plt+0x1fa4>
   12c6c:	mov	r2, #114	; 0x72
   12c70:	ldr	r0, [sp, #64]	; 0x40
   12c74:	tst	r0, #1
   12c78:	mov	r0, r2
   12c7c:	bne	12f80 <__assert_fail@plt+0x1fa4>
   12c80:	b	135c0 <__assert_fail@plt+0x25e4>
   12c84:	ldr	r0, [sp, #88]	; 0x58
   12c88:	tst	r0, #1
   12c8c:	beq	12fa0 <__assert_fail@plt+0x1fc4>
   12c90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c94:	tst	r0, #1
   12c98:	bne	136fc <__assert_fail@plt+0x2720>
   12c9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ca0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12ca4:	subs	r0, r0, #2
   12ca8:	movwne	r0, #1
   12cac:	orr	r0, r0, r1
   12cb0:	tst	r0, #1
   12cb4:	bne	12cf0 <__assert_fail@plt+0x1d14>
   12cb8:	cmp	r9, r5
   12cbc:	movcc	r0, #39	; 0x27
   12cc0:	strbcc	r0, [ip, r9]
   12cc4:	add	r0, r9, #1
   12cc8:	cmp	r0, r5
   12ccc:	movcc	r1, #36	; 0x24
   12cd0:	strbcc	r1, [ip, r0]
   12cd4:	add	r0, r9, #2
   12cd8:	add	r9, r9, #3
   12cdc:	cmp	r0, r5
   12ce0:	movcc	r1, #39	; 0x27
   12ce4:	strbcc	r1, [ip, r0]
   12ce8:	mov	r0, #1
   12cec:	str	r0, [fp, #-52]	; 0xffffffcc
   12cf0:	mov	r1, #1
   12cf4:	cmp	r9, r5
   12cf8:	mov	r8, #0
   12cfc:	mov	r6, #48	; 0x30
   12d00:	str	r1, [fp, #-56]	; 0xffffffc8
   12d04:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12d08:	movcc	r0, #92	; 0x5c
   12d0c:	strbcc	r0, [ip, r9]
   12d10:	add	r0, r9, #1
   12d14:	cmp	r1, #2
   12d18:	beq	1316c <__assert_fail@plt+0x2190>
   12d1c:	add	r1, sl, #1
   12d20:	cmp	r1, r7
   12d24:	bcs	1316c <__assert_fail@plt+0x2190>
   12d28:	ldrb	r1, [lr, r1]
   12d2c:	sub	r1, r1, #48	; 0x30
   12d30:	uxtb	r1, r1
   12d34:	cmp	r1, #9
   12d38:	bhi	1316c <__assert_fail@plt+0x2190>
   12d3c:	cmp	r0, r5
   12d40:	movcc	r1, #48	; 0x30
   12d44:	strbcc	r1, [ip, r0]
   12d48:	add	r0, r9, #2
   12d4c:	add	r9, r9, #3
   12d50:	cmp	r0, r5
   12d54:	movcc	r1, #48	; 0x30
   12d58:	strbcc	r1, [ip, r0]
   12d5c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d60:	tst	r0, #1
   12d64:	beq	12b90 <__assert_fail@plt+0x1bb4>
   12d68:	b	12e44 <__assert_fail@plt+0x1e68>
   12d6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d70:	mov	r6, #63	; 0x3f
   12d74:	cmp	r0, #5
   12d78:	beq	13180 <__assert_fail@plt+0x21a4>
   12d7c:	mov	r1, #0
   12d80:	cmp	r0, #2
   12d84:	str	r1, [fp, #-56]	; 0xffffffc8
   12d88:	bne	13248 <__assert_fail@plt+0x226c>
   12d8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d90:	mov	r8, #0
   12d94:	tst	r0, #1
   12d98:	beq	12b84 <__assert_fail@plt+0x1ba8>
   12d9c:	b	135c0 <__assert_fail@plt+0x25e4>
   12da0:	mov	r0, #118	; 0x76
   12da4:	b	12f80 <__assert_fail@plt+0x1fa4>
   12da8:	mov	r0, #1
   12dac:	mov	r6, #39	; 0x27
   12db0:	str	r0, [sp, #60]	; 0x3c
   12db4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12db8:	cmp	r0, #2
   12dbc:	bne	12fc0 <__assert_fail@plt+0x1fe4>
   12dc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12dc4:	tst	r0, #1
   12dc8:	bne	135c0 <__assert_fail@plt+0x25e4>
   12dcc:	ldr	r2, [sp, #56]	; 0x38
   12dd0:	clz	r1, r5
   12dd4:	mov	r8, #1
   12dd8:	lsr	r1, r1, #5
   12ddc:	cmp	r2, #0
   12de0:	mov	r0, r2
   12de4:	movwne	r0, #1
   12de8:	orrs	r0, r0, r1
   12dec:	moveq	r2, r5
   12df0:	moveq	r5, r0
   12df4:	cmp	r9, r5
   12df8:	str	r2, [sp, #56]	; 0x38
   12dfc:	movcc	r0, #39	; 0x27
   12e00:	strbcc	r0, [ip, r9]
   12e04:	add	r0, r9, #1
   12e08:	cmp	r0, r5
   12e0c:	movcc	r1, #92	; 0x5c
   12e10:	strbcc	r1, [ip, r0]
   12e14:	add	r0, r9, #2
   12e18:	add	r9, r9, #3
   12e1c:	cmp	r0, r5
   12e20:	movcc	r1, #39	; 0x27
   12e24:	strbcc	r1, [ip, r0]
   12e28:	mov	r0, #0
   12e2c:	str	r0, [fp, #-52]	; 0xffffffcc
   12e30:	mov	r0, #0
   12e34:	str	r0, [fp, #-56]	; 0xffffffc8
   12e38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e3c:	tst	r0, #1
   12e40:	beq	12b90 <__assert_fail@plt+0x1bb4>
   12e44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12e48:	mov	r1, r8
   12e4c:	cmp	r0, #0
   12e50:	mov	r0, r6
   12e54:	beq	12f18 <__assert_fail@plt+0x1f3c>
   12e58:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12e5c:	tst	r2, #1
   12e60:	bne	135c0 <__assert_fail@plt+0x25e4>
   12e64:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12e68:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12e6c:	subs	r2, r2, #2
   12e70:	movwne	r2, #1
   12e74:	orr	r2, r2, r3
   12e78:	tst	r2, #1
   12e7c:	bne	12eb8 <__assert_fail@plt+0x1edc>
   12e80:	cmp	r9, r5
   12e84:	movcc	r2, #39	; 0x27
   12e88:	strbcc	r2, [ip, r9]
   12e8c:	add	r2, r9, #1
   12e90:	cmp	r2, r5
   12e94:	movcc	r3, #36	; 0x24
   12e98:	strbcc	r3, [ip, r2]
   12e9c:	add	r2, r9, #2
   12ea0:	add	r9, r9, #3
   12ea4:	cmp	r2, r5
   12ea8:	movcc	r3, #39	; 0x27
   12eac:	strbcc	r3, [ip, r2]
   12eb0:	mov	r2, #1
   12eb4:	str	r2, [fp, #-52]	; 0xffffffcc
   12eb8:	cmp	r9, r5
   12ebc:	movcc	r2, #92	; 0x5c
   12ec0:	strbcc	r2, [ip, r9]
   12ec4:	add	r9, r9, #1
   12ec8:	b	12f60 <__assert_fail@plt+0x1f84>
   12ecc:	ldr	r0, [sp, #40]	; 0x28
   12ed0:	cmp	r0, #1
   12ed4:	bne	12fd4 <__assert_fail@plt+0x1ff8>
   12ed8:	bl	10ed4 <__ctype_b_loc@plt>
   12edc:	ldr	r0, [r0]
   12ee0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12ee4:	mov	r1, #1
   12ee8:	add	r0, r0, r6, lsl #1
   12eec:	ldrb	r0, [r0, #1]
   12ef0:	ubfx	r8, r0, #6, #1
   12ef4:	b	1332c <__assert_fail@plt+0x2350>
   12ef8:	ldr	r1, [sp, #48]	; 0x30
   12efc:	mov	r0, #0
   12f00:	str	r0, [fp, #-56]	; 0xffffffc8
   12f04:	mov	r0, #92	; 0x5c
   12f08:	cmp	r1, #0
   12f0c:	beq	12f80 <__assert_fail@plt+0x1fa4>
   12f10:	mov	r6, #92	; 0x5c
   12f14:	mov	r8, #0
   12f18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12f1c:	cmp	r0, #0
   12f20:	bne	12f58 <__assert_fail@plt+0x1f7c>
   12f24:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12f28:	tst	r0, #1
   12f2c:	beq	12f58 <__assert_fail@plt+0x1f7c>
   12f30:	cmp	r9, r5
   12f34:	movcc	r0, #39	; 0x27
   12f38:	strbcc	r0, [ip, r9]
   12f3c:	add	r0, r9, #1
   12f40:	add	r9, r9, #2
   12f44:	cmp	r0, r5
   12f48:	movcc	r1, #39	; 0x27
   12f4c:	strbcc	r1, [ip, r0]
   12f50:	mov	r0, #0
   12f54:	str	r0, [fp, #-52]	; 0xffffffcc
   12f58:	mov	r1, r8
   12f5c:	mov	r0, r6
   12f60:	cmp	r9, r5
   12f64:	and	r4, r4, r1
   12f68:	strbcc	r0, [ip, r9]
   12f6c:	add	r9, r9, #1
   12f70:	add	sl, sl, #1
   12f74:	cmn	r7, #1
   12f78:	bne	12870 <__assert_fail@plt+0x1894>
   12f7c:	b	1287c <__assert_fail@plt+0x18a0>
   12f80:	mov	r1, #0
   12f84:	mov	r8, #0
   12f88:	str	r1, [fp, #-56]	; 0xffffffc8
   12f8c:	ldr	r1, [sp, #88]	; 0x58
   12f90:	tst	r1, #1
   12f94:	mov	r1, #0
   12f98:	beq	12b84 <__assert_fail@plt+0x1ba8>
   12f9c:	b	12e58 <__assert_fail@plt+0x1e7c>
   12fa0:	ldr	r0, [sp, #36]	; 0x24
   12fa4:	mov	r6, #0
   12fa8:	mov	r8, #0
   12fac:	cmp	r0, #0
   12fb0:	mov	r0, #0
   12fb4:	str	r0, [fp, #-56]	; 0xffffffc8
   12fb8:	bne	12f70 <__assert_fail@plt+0x1f94>
   12fbc:	b	12b84 <__assert_fail@plt+0x1ba8>
   12fc0:	mov	r8, #1
   12fc4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12fc8:	tst	r0, #1
   12fcc:	beq	12b90 <__assert_fail@plt+0x1bb4>
   12fd0:	b	12e44 <__assert_fail@plt+0x1e68>
   12fd4:	mov	r0, #0
   12fd8:	cmn	r7, #1
   12fdc:	str	r0, [fp, #-36]	; 0xffffffdc
   12fe0:	str	r0, [fp, #-40]	; 0xffffffd8
   12fe4:	bne	12ff8 <__assert_fail@plt+0x201c>
   12fe8:	mov	r0, lr
   12fec:	bl	10ef8 <strlen@plt>
   12ff0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12ff4:	mov	r7, r0
   12ff8:	ldr	r0, [sp, #44]	; 0x2c
   12ffc:	str	r4, [sp, #84]	; 0x54
   13000:	str	r5, [sp, #28]
   13004:	cmp	r0, #0
   13008:	beq	1325c <__assert_fail@plt+0x2280>
   1300c:	ldr	r0, [sp, #80]	; 0x50
   13010:	mov	r8, #1
   13014:	mov	r5, #0
   13018:	add	r0, r0, sl
   1301c:	str	r0, [sp, #24]
   13020:	sub	r0, fp, #40	; 0x28
   13024:	mov	r3, r0
   13028:	b	13064 <__assert_fail@plt+0x2088>
   1302c:	ldr	r5, [sp, #68]	; 0x44
   13030:	add	r5, r0, r5
   13034:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13038:	bl	10e2c <iswprint@plt>
   1303c:	cmp	r0, #0
   13040:	sub	r4, fp, #40	; 0x28
   13044:	movwne	r0, #1
   13048:	and	r8, r8, r0
   1304c:	mov	r0, r4
   13050:	bl	10df0 <mbsinit@plt>
   13054:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13058:	mov	r3, r4
   1305c:	cmp	r0, #0
   13060:	bne	13320 <__assert_fail@plt+0x2344>
   13064:	str	r5, [sp, #68]	; 0x44
   13068:	add	r5, r5, sl
   1306c:	sub	r0, fp, #44	; 0x2c
   13070:	add	r1, lr, r5
   13074:	sub	r2, r7, r5
   13078:	bl	16b04 <__assert_fail@plt+0x5b28>
   1307c:	cmn	r0, #2
   13080:	beq	132e0 <__assert_fail@plt+0x2304>
   13084:	ldr	ip, [fp, #-84]	; 0xffffffac
   13088:	cmn	r0, #1
   1308c:	beq	132d4 <__assert_fail@plt+0x22f8>
   13090:	cmp	r0, #0
   13094:	beq	132d8 <__assert_fail@plt+0x22fc>
   13098:	cmp	r0, #2
   1309c:	bcc	1302c <__assert_fail@plt+0x2050>
   130a0:	ldr	r1, [sp, #68]	; 0x44
   130a4:	ldr	r2, [sp, #24]
   130a8:	add	r1, r2, r1
   130ac:	sub	r2, r0, #1
   130b0:	ldrb	r3, [r1]
   130b4:	sub	r3, r3, #91	; 0x5b
   130b8:	cmp	r3, #33	; 0x21
   130bc:	bls	130dc <__assert_fail@plt+0x2100>
   130c0:	add	r1, r1, #1
   130c4:	subs	r2, r2, #1
   130c8:	beq	1302c <__assert_fail@plt+0x2050>
   130cc:	ldrb	r3, [r1]
   130d0:	sub	r3, r3, #91	; 0x5b
   130d4:	cmp	r3, #33	; 0x21
   130d8:	bhi	130c0 <__assert_fail@plt+0x20e4>
   130dc:	add	r5, pc, #0
   130e0:	ldr	pc, [r5, r3, lsl #2]
   130e4:	strdeq	r3, [r1], -r8
   130e8:	strdeq	r3, [r1], -r8
   130ec:	andeq	r3, r1, r0, asr #1
   130f0:	strdeq	r3, [r1], -r8
   130f4:	andeq	r3, r1, r0, asr #1
   130f8:	strdeq	r3, [r1], -r8
   130fc:	andeq	r3, r1, r0, asr #1
   13100:	andeq	r3, r1, r0, asr #1
   13104:	andeq	r3, r1, r0, asr #1
   13108:	andeq	r3, r1, r0, asr #1
   1310c:	andeq	r3, r1, r0, asr #1
   13110:	andeq	r3, r1, r0, asr #1
   13114:	andeq	r3, r1, r0, asr #1
   13118:	andeq	r3, r1, r0, asr #1
   1311c:	andeq	r3, r1, r0, asr #1
   13120:	andeq	r3, r1, r0, asr #1
   13124:	andeq	r3, r1, r0, asr #1
   13128:	andeq	r3, r1, r0, asr #1
   1312c:	andeq	r3, r1, r0, asr #1
   13130:	andeq	r3, r1, r0, asr #1
   13134:	andeq	r3, r1, r0, asr #1
   13138:	andeq	r3, r1, r0, asr #1
   1313c:	andeq	r3, r1, r0, asr #1
   13140:	andeq	r3, r1, r0, asr #1
   13144:	andeq	r3, r1, r0, asr #1
   13148:	andeq	r3, r1, r0, asr #1
   1314c:	andeq	r3, r1, r0, asr #1
   13150:	andeq	r3, r1, r0, asr #1
   13154:	andeq	r3, r1, r0, asr #1
   13158:	andeq	r3, r1, r0, asr #1
   1315c:	andeq	r3, r1, r0, asr #1
   13160:	andeq	r3, r1, r0, asr #1
   13164:	andeq	r3, r1, r0, asr #1
   13168:	strdeq	r3, [r1], -r8
   1316c:	mov	r9, r0
   13170:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13174:	tst	r0, #1
   13178:	beq	12b90 <__assert_fail@plt+0x1bb4>
   1317c:	b	12e44 <__assert_fail@plt+0x1e68>
   13180:	mov	r0, #0
   13184:	str	r0, [fp, #-56]	; 0xffffffc8
   13188:	ldr	r0, [sp, #32]
   1318c:	cmp	r0, #0
   13190:	beq	13248 <__assert_fail@plt+0x226c>
   13194:	add	r0, sl, #2
   13198:	mov	r1, r7
   1319c:	cmp	r0, r7
   131a0:	bcs	13248 <__assert_fail@plt+0x226c>
   131a4:	add	r1, sl, lr
   131a8:	ldrb	r1, [r1, #1]
   131ac:	cmp	r1, #63	; 0x3f
   131b0:	bne	13248 <__assert_fail@plt+0x226c>
   131b4:	ldrb	r8, [lr, r0]
   131b8:	sub	r2, r8, #33	; 0x21
   131bc:	cmp	r2, #29
   131c0:	bhi	13248 <__assert_fail@plt+0x226c>
   131c4:	mov	r1, r4
   131c8:	movw	r4, #20929	; 0x51c1
   131cc:	mov	r3, #1
   131d0:	movt	r4, #14336	; 0x3800
   131d4:	tst	r4, r3, lsl r2
   131d8:	beq	13504 <__assert_fail@plt+0x2528>
   131dc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   131e0:	tst	r2, #1
   131e4:	bne	135c0 <__assert_fail@plt+0x25e4>
   131e8:	cmp	r9, r5
   131ec:	mov	r6, r8
   131f0:	mov	r4, r1
   131f4:	mov	sl, r0
   131f8:	mov	r8, #0
   131fc:	movcc	r2, #63	; 0x3f
   13200:	strbcc	r2, [ip, r9]
   13204:	add	r2, r9, #1
   13208:	cmp	r2, r5
   1320c:	movcc	r3, #34	; 0x22
   13210:	strbcc	r3, [ip, r2]
   13214:	add	r2, r9, #2
   13218:	cmp	r2, r5
   1321c:	movcc	r3, #34	; 0x22
   13220:	strbcc	r3, [ip, r2]
   13224:	add	r2, r9, #3
   13228:	add	r9, r9, #4
   1322c:	cmp	r2, r5
   13230:	movcc	r3, #63	; 0x3f
   13234:	strbcc	r3, [ip, r2]
   13238:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1323c:	tst	r0, #1
   13240:	beq	12b90 <__assert_fail@plt+0x1bb4>
   13244:	b	12e44 <__assert_fail@plt+0x1e68>
   13248:	mov	r8, #0
   1324c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13250:	tst	r0, #1
   13254:	beq	12b90 <__assert_fail@plt+0x1bb4>
   13258:	b	12e44 <__assert_fail@plt+0x1e68>
   1325c:	mov	r8, #1
   13260:	mov	r5, #0
   13264:	sub	r4, fp, #40	; 0x28
   13268:	str	r5, [sp, #68]	; 0x44
   1326c:	add	r5, r5, sl
   13270:	sub	r0, fp, #44	; 0x2c
   13274:	mov	r3, r4
   13278:	add	r1, lr, r5
   1327c:	sub	r2, r7, r5
   13280:	bl	16b04 <__assert_fail@plt+0x5b28>
   13284:	cmn	r0, #2
   13288:	beq	132e0 <__assert_fail@plt+0x2304>
   1328c:	cmn	r0, #1
   13290:	beq	132d4 <__assert_fail@plt+0x22f8>
   13294:	ldr	r5, [sp, #68]	; 0x44
   13298:	cmp	r0, #0
   1329c:	beq	1331c <__assert_fail@plt+0x2340>
   132a0:	add	r5, r0, r5
   132a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   132a8:	bl	10e2c <iswprint@plt>
   132ac:	cmp	r0, #0
   132b0:	sub	r4, fp, #40	; 0x28
   132b4:	movwne	r0, #1
   132b8:	and	r8, r8, r0
   132bc:	mov	r0, r4
   132c0:	bl	10df0 <mbsinit@plt>
   132c4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   132c8:	cmp	r0, #0
   132cc:	beq	13268 <__assert_fail@plt+0x228c>
   132d0:	b	13320 <__assert_fail@plt+0x2344>
   132d4:	mov	r8, #0
   132d8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   132dc:	b	13314 <__assert_fail@plt+0x2338>
   132e0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   132e4:	mov	r8, #0
   132e8:	cmp	r5, r7
   132ec:	bcs	13314 <__assert_fail@plt+0x2338>
   132f0:	ldrb	r0, [lr, r5]
   132f4:	cmp	r0, #0
   132f8:	beq	13314 <__assert_fail@plt+0x2338>
   132fc:	ldr	r0, [sp, #68]	; 0x44
   13300:	add	r0, r0, #1
   13304:	add	r5, r0, sl
   13308:	str	r0, [sp, #68]	; 0x44
   1330c:	cmp	r5, r7
   13310:	bcc	132f0 <__assert_fail@plt+0x2314>
   13314:	ldr	r5, [sp, #68]	; 0x44
   13318:	b	13320 <__assert_fail@plt+0x2344>
   1331c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13320:	mov	r1, r5
   13324:	ldr	r5, [sp, #28]
   13328:	ldr	r4, [sp, #84]	; 0x54
   1332c:	ldr	r0, [sp, #52]	; 0x34
   13330:	ldr	ip, [fp, #-84]	; 0xffffffac
   13334:	cmp	r1, #1
   13338:	orr	r2, r8, r0
   1333c:	mov	r0, r1
   13340:	bhi	1334c <__assert_fail@plt+0x2370>
   13344:	tst	r2, #1
   13348:	bne	12b84 <__assert_fail@plt+0x1ba8>
   1334c:	add	r0, r0, sl
   13350:	str	r2, [sp, #84]	; 0x54
   13354:	str	r0, [fp, #-56]	; 0xffffffc8
   13358:	mov	r0, #0
   1335c:	tst	r2, #1
   13360:	bne	13440 <__assert_fail@plt+0x2464>
   13364:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13368:	tst	r1, #1
   1336c:	bne	135c0 <__assert_fail@plt+0x25e4>
   13370:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13374:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13378:	subs	r2, r1, #2
   1337c:	movwne	r2, #1
   13380:	orr	r2, r2, r0
   13384:	tst	r2, #1
   13388:	bne	133c4 <__assert_fail@plt+0x23e8>
   1338c:	cmp	r9, r5
   13390:	add	r2, r9, #1
   13394:	mov	r0, #1
   13398:	movcc	r1, #39	; 0x27
   1339c:	str	r0, [fp, #-52]	; 0xffffffcc
   133a0:	strbcc	r1, [ip, r9]
   133a4:	cmp	r2, r5
   133a8:	movcc	r1, #36	; 0x24
   133ac:	strbcc	r1, [ip, r2]
   133b0:	add	r2, r9, #2
   133b4:	add	r9, r9, #3
   133b8:	cmp	r2, r5
   133bc:	movcc	r1, #39	; 0x27
   133c0:	strbcc	r1, [ip, r2]
   133c4:	cmp	r9, r5
   133c8:	add	r2, r9, #1
   133cc:	movcc	r1, #92	; 0x5c
   133d0:	strbcc	r1, [ip, r9]
   133d4:	cmp	r2, r5
   133d8:	bcs	133ec <__assert_fail@plt+0x2410>
   133dc:	uxtb	r3, r6
   133e0:	mov	r1, #48	; 0x30
   133e4:	orr	r3, r1, r3, lsr #6
   133e8:	strb	r3, [ip, r2]
   133ec:	add	r2, r9, #2
   133f0:	add	r9, r9, #3
   133f4:	cmp	r2, r5
   133f8:	lsrcc	r3, r6, #3
   133fc:	movcc	r1, #6
   13400:	bficc	r3, r1, #3, #29
   13404:	mov	r1, #6
   13408:	bfi	r6, r1, #3, #29
   1340c:	strbcc	r3, [ip, r2]
   13410:	mov	r2, #1
   13414:	b	13474 <__assert_fail@plt+0x2498>
   13418:	ldr	r1, [sp, #80]	; 0x50
   1341c:	cmp	r9, r2
   13420:	mov	r5, r2
   13424:	ldr	r2, [sp, #84]	; 0x54
   13428:	strbcc	r6, [ip, r9]
   1342c:	add	r9, r9, #1
   13430:	ldrb	r6, [r1, sl]
   13434:	mov	sl, r3
   13438:	tst	r2, #1
   1343c:	beq	13364 <__assert_fail@plt+0x2388>
   13440:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13444:	tst	r1, #1
   13448:	beq	13468 <__assert_fail@plt+0x248c>
   1344c:	cmp	r9, r5
   13450:	mov	r2, r0
   13454:	movcc	r1, #92	; 0x5c
   13458:	strbcc	r1, [ip, r9]
   1345c:	add	r9, r9, #1
   13460:	mov	r1, #0
   13464:	b	13470 <__assert_fail@plt+0x2494>
   13468:	mov	r1, #0
   1346c:	mov	r2, r0
   13470:	str	r1, [fp, #-48]	; 0xffffffd0
   13474:	mov	r0, r2
   13478:	and	r1, r2, #1
   1347c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13480:	add	r3, sl, #1
   13484:	cmp	r2, r3
   13488:	bls	134e8 <__assert_fail@plt+0x250c>
   1348c:	mov	r2, r5
   13490:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13494:	cmp	r1, #0
   13498:	movwne	r1, #1
   1349c:	mvn	r5, r5
   134a0:	orr	r5, r5, r1
   134a4:	tst	r5, #1
   134a8:	bne	13418 <__assert_fail@plt+0x243c>
   134ac:	cmp	r9, r2
   134b0:	movcc	r5, r4
   134b4:	movcc	r4, #39	; 0x27
   134b8:	strbcc	r4, [ip, r9]
   134bc:	movcc	r4, r5
   134c0:	add	r5, r9, #1
   134c4:	add	r9, r9, #2
   134c8:	cmp	r5, r2
   134cc:	movcc	r1, r4
   134d0:	movcc	r4, #39	; 0x27
   134d4:	strbcc	r4, [ip, r5]
   134d8:	movcc	r4, r1
   134dc:	mov	r1, #0
   134e0:	str	r1, [fp, #-52]	; 0xffffffcc
   134e4:	b	13418 <__assert_fail@plt+0x243c>
   134e8:	cmp	r1, #0
   134ec:	movwne	r1, #1
   134f0:	str	r1, [fp, #-56]	; 0xffffffc8
   134f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   134f8:	cmp	r0, #0
   134fc:	beq	12f24 <__assert_fail@plt+0x1f48>
   13500:	b	12f58 <__assert_fail@plt+0x1f7c>
   13504:	mov	r8, #0
   13508:	mov	r4, r1
   1350c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13510:	tst	r0, #1
   13514:	beq	12b90 <__assert_fail@plt+0x1bb4>
   13518:	b	12e44 <__assert_fail@plt+0x1e68>
   1351c:	mov	r7, sl
   13520:	b	13528 <__assert_fail@plt+0x254c>
   13524:	mvn	r7, #0
   13528:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1352c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13530:	ldr	r2, [sp, #88]	; 0x58
   13534:	eor	r0, r1, #2
   13538:	orr	r0, r0, r9
   1353c:	clz	r0, r0
   13540:	lsr	r0, r0, #5
   13544:	tst	r3, r0
   13548:	bne	135c0 <__assert_fail@plt+0x25e4>
   1354c:	subs	r0, r1, #2
   13550:	movwne	r0, #1
   13554:	orr	r0, r3, r0
   13558:	tst	r0, #1
   1355c:	ldreq	r0, [sp, #60]	; 0x3c
   13560:	eoreq	r0, r0, #1
   13564:	tsteq	r0, #1
   13568:	bne	1369c <__assert_fail@plt+0x26c0>
   1356c:	tst	r4, #1
   13570:	bne	13660 <__assert_fail@plt+0x2684>
   13574:	ldr	r6, [sp, #56]	; 0x38
   13578:	mov	r8, #0
   1357c:	cmp	r6, #0
   13580:	beq	13698 <__assert_fail@plt+0x26bc>
   13584:	mov	r1, #0
   13588:	mov	r4, #2
   1358c:	cmp	r5, #0
   13590:	mov	r0, r2
   13594:	mov	r3, #0
   13598:	str	r1, [sp, #84]	; 0x54
   1359c:	beq	123e4 <__assert_fail@plt+0x1408>
   135a0:	b	1369c <__assert_fail@plt+0x26c0>
   135a4:	movw	r0, #30980	; 0x7904
   135a8:	movt	r0, #1
   135ac:	str	r0, [sp, #76]	; 0x4c
   135b0:	mov	r9, #0
   135b4:	tst	r8, #1
   135b8:	beq	1267c <__assert_fail@plt+0x16a0>
   135bc:	b	127bc <__assert_fail@plt+0x17e0>
   135c0:	ldr	r1, [sp, #88]	; 0x58
   135c4:	mov	r0, #2
   135c8:	tst	r1, #1
   135cc:	movwne	r0, #4
   135d0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   135d4:	ldr	r1, [fp, #12]
   135d8:	cmp	r2, #2
   135dc:	moveq	r2, r0
   135e0:	b	13618 <__assert_fail@plt+0x263c>
   135e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   135e8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   135ec:	ldr	r1, [fp, #12]
   135f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   135f4:	b	13618 <__assert_fail@plt+0x263c>
   135f8:	ldr	r1, [sp, #88]	; 0x58
   135fc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13600:	ldr	r5, [sp, #28]
   13604:	mov	r0, #2
   13608:	tst	r1, #1
   1360c:	ldr	r1, [fp, #12]
   13610:	movwne	r0, #4
   13614:	mov	r2, r0
   13618:	mov	r0, #0
   1361c:	bic	r1, r1, #2
   13620:	str	r2, [sp]
   13624:	mov	r2, lr
   13628:	str	r0, [sp, #8]
   1362c:	ldr	r0, [sp, #72]	; 0x48
   13630:	str	r1, [sp, #4]
   13634:	mov	r1, r5
   13638:	str	r0, [sp, #12]
   1363c:	ldr	r0, [sp, #76]	; 0x4c
   13640:	str	r0, [sp, #16]
   13644:	mov	r0, ip
   13648:	mov	r3, r7
   1364c:	bl	12358 <__assert_fail@plt+0x137c>
   13650:	mov	r9, r0
   13654:	mov	r0, r9
   13658:	sub	sp, fp, #28
   1365c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13660:	mov	r0, #5
   13664:	ldr	r1, [sp, #56]	; 0x38
   13668:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1366c:	str	r0, [sp]
   13670:	ldr	r0, [fp, #12]
   13674:	str	r0, [sp, #4]
   13678:	ldr	r0, [fp, #16]
   1367c:	str	r0, [sp, #8]
   13680:	ldr	r0, [sp, #72]	; 0x48
   13684:	str	r0, [sp, #12]
   13688:	ldr	r0, [sp, #76]	; 0x4c
   1368c:	str	r0, [sp, #16]
   13690:	ldr	r0, [fp, #-84]	; 0xffffffac
   13694:	b	13648 <__assert_fail@plt+0x266c>
   13698:	mov	r3, #0
   1369c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   136a0:	cmp	r1, #0
   136a4:	beq	136e0 <__assert_fail@plt+0x2704>
   136a8:	ldr	r2, [fp, #-84]	; 0xffffffac
   136ac:	tst	r3, #1
   136b0:	bne	136e4 <__assert_fail@plt+0x2708>
   136b4:	ldrb	r0, [r1]
   136b8:	cmp	r0, #0
   136bc:	beq	136e4 <__assert_fail@plt+0x2708>
   136c0:	add	r1, r1, #1
   136c4:	cmp	r9, r5
   136c8:	strbcc	r0, [r2, r9]
   136cc:	add	r9, r9, #1
   136d0:	ldrb	r0, [r1], #1
   136d4:	cmp	r0, #0
   136d8:	bne	136c4 <__assert_fail@plt+0x26e8>
   136dc:	b	136e4 <__assert_fail@plt+0x2708>
   136e0:	ldr	r2, [fp, #-84]	; 0xffffffac
   136e4:	cmp	r9, r5
   136e8:	movcc	r0, #0
   136ec:	strbcc	r0, [r2, r9]
   136f0:	mov	r0, r9
   136f4:	sub	sp, fp, #28
   136f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136fc:	mov	r0, #4
   13700:	b	135d0 <__assert_fail@plt+0x25f4>
   13704:	bl	10fc4 <abort@plt>
   13708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1370c:	add	fp, sp, #28
   13710:	sub	sp, sp, #28
   13714:	movw	r5, #33120	; 0x8160
   13718:	cmp	r2, #0
   1371c:	mov	r4, r1
   13720:	mov	r7, r0
   13724:	str	r0, [sp, #20]
   13728:	movt	r5, #2
   1372c:	movne	r5, r2
   13730:	bl	10f10 <__errno_location@plt>
   13734:	mov	sl, r0
   13738:	ldr	r2, [r5, #40]	; 0x28
   1373c:	ldr	r3, [r5, #44]	; 0x2c
   13740:	ldm	r5, {r0, r1}
   13744:	orr	r8, r1, #1
   13748:	add	r9, r5, #8
   1374c:	mov	r1, #0
   13750:	ldr	r6, [sl]
   13754:	stm	sp, {r0, r8, r9}
   13758:	mov	r0, #0
   1375c:	str	r2, [sp, #12]
   13760:	str	r3, [sp, #16]
   13764:	mov	r2, r7
   13768:	mov	r3, r4
   1376c:	str	r6, [sp, #24]
   13770:	mov	r6, r4
   13774:	bl	12358 <__assert_fail@plt+0x137c>
   13778:	add	r7, r0, #1
   1377c:	mov	r0, r7
   13780:	bl	147e8 <__assert_fail@plt+0x380c>
   13784:	mov	r4, r0
   13788:	ldr	r0, [r5]
   1378c:	ldr	r2, [r5, #44]	; 0x2c
   13790:	ldr	r1, [r5, #40]	; 0x28
   13794:	mov	r3, r6
   13798:	stm	sp, {r0, r8, r9}
   1379c:	str	r2, [sp, #16]
   137a0:	ldr	r2, [sp, #20]
   137a4:	str	r1, [sp, #12]
   137a8:	mov	r0, r4
   137ac:	mov	r1, r7
   137b0:	bl	12358 <__assert_fail@plt+0x137c>
   137b4:	ldr	r0, [sp, #24]
   137b8:	str	r0, [sl]
   137bc:	mov	r0, r4
   137c0:	sub	sp, fp, #28
   137c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137cc:	add	fp, sp, #28
   137d0:	sub	sp, sp, #36	; 0x24
   137d4:	movw	r8, #33120	; 0x8160
   137d8:	cmp	r3, #0
   137dc:	mov	r4, r2
   137e0:	str	r2, [sp, #24]
   137e4:	mov	r5, r1
   137e8:	mov	r6, r0
   137ec:	str	r0, [sp, #20]
   137f0:	movt	r8, #2
   137f4:	movne	r8, r3
   137f8:	bl	10f10 <__errno_location@plt>
   137fc:	str	r0, [sp, #28]
   13800:	ldr	r1, [r8, #40]	; 0x28
   13804:	ldr	r2, [r8, #44]	; 0x2c
   13808:	ldr	r7, [r0]
   1380c:	cmp	r4, #0
   13810:	add	sl, r8, #8
   13814:	mov	r0, #0
   13818:	ldm	r8, {r3, r9}
   1381c:	orreq	r9, r9, #1
   13820:	stm	sp, {r3, r9, sl}
   13824:	str	r1, [sp, #12]
   13828:	str	r2, [sp, #16]
   1382c:	mov	r1, #0
   13830:	mov	r2, r6
   13834:	mov	r3, r5
   13838:	str	r7, [sp, #32]
   1383c:	mov	r7, r5
   13840:	bl	12358 <__assert_fail@plt+0x137c>
   13844:	add	r4, r0, #1
   13848:	mov	r5, r0
   1384c:	mov	r0, r4
   13850:	bl	147e8 <__assert_fail@plt+0x380c>
   13854:	mov	r6, r0
   13858:	ldr	r0, [r8]
   1385c:	ldr	r2, [r8, #44]	; 0x2c
   13860:	ldr	r1, [r8, #40]	; 0x28
   13864:	mov	r3, r7
   13868:	stm	sp, {r0, r9, sl}
   1386c:	str	r2, [sp, #16]
   13870:	ldr	r2, [sp, #20]
   13874:	str	r1, [sp, #12]
   13878:	mov	r0, r6
   1387c:	mov	r1, r4
   13880:	bl	12358 <__assert_fail@plt+0x137c>
   13884:	ldr	r0, [sp, #24]
   13888:	ldr	r1, [sp, #32]
   1388c:	ldr	r2, [sp, #28]
   13890:	cmp	r0, #0
   13894:	str	r1, [r2]
   13898:	strne	r5, [r0]
   1389c:	mov	r0, r6
   138a0:	sub	sp, fp, #28
   138a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a8:	push	{r4, r5, r6, r7, fp, lr}
   138ac:	add	fp, sp, #16
   138b0:	movw	r4, #33048	; 0x8118
   138b4:	movt	r4, #2
   138b8:	ldrd	r6, [r4]
   138bc:	cmp	r7, #2
   138c0:	blt	138ec <__assert_fail@plt+0x2910>
   138c4:	add	r5, r6, #12
   138c8:	mov	r7, #0
   138cc:	ldr	r0, [r5, r7, lsl #3]
   138d0:	bl	169fc <__assert_fail@plt+0x5a20>
   138d4:	ldr	r1, [r4, #4]
   138d8:	add	r2, r7, #2
   138dc:	add	r0, r7, #1
   138e0:	mov	r7, r0
   138e4:	cmp	r2, r1
   138e8:	blt	138cc <__assert_fail@plt+0x28f0>
   138ec:	ldr	r0, [r6, #4]
   138f0:	movw	r5, #33168	; 0x8190
   138f4:	movt	r5, #2
   138f8:	cmp	r0, r5
   138fc:	beq	13910 <__assert_fail@plt+0x2934>
   13900:	bl	169fc <__assert_fail@plt+0x5a20>
   13904:	mov	r0, #256	; 0x100
   13908:	str	r0, [r4, #8]
   1390c:	str	r5, [r4, #12]
   13910:	add	r5, r4, #8
   13914:	cmp	r6, r5
   13918:	beq	13928 <__assert_fail@plt+0x294c>
   1391c:	mov	r0, r6
   13920:	bl	169fc <__assert_fail@plt+0x5a20>
   13924:	str	r5, [r4]
   13928:	mov	r0, #1
   1392c:	str	r0, [r4, #4]
   13930:	pop	{r4, r5, r6, r7, fp, pc}
   13934:	movw	r3, #33120	; 0x8160
   13938:	mvn	r2, #0
   1393c:	movt	r3, #2
   13940:	b	13944 <__assert_fail@plt+0x2968>
   13944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13948:	add	fp, sp, #28
   1394c:	sub	sp, sp, #44	; 0x2c
   13950:	mov	r7, r3
   13954:	str	r2, [sp, #36]	; 0x24
   13958:	str	r1, [sp, #32]
   1395c:	mov	r5, r0
   13960:	bl	10f10 <__errno_location@plt>
   13964:	cmp	r5, #0
   13968:	bmi	13ad0 <__assert_fail@plt+0x2af4>
   1396c:	cmn	r5, #-2147483647	; 0x80000001
   13970:	beq	13ad0 <__assert_fail@plt+0x2af4>
   13974:	movw	r8, #33048	; 0x8118
   13978:	mov	r4, r0
   1397c:	ldr	r0, [r0]
   13980:	movt	r8, #2
   13984:	str	r4, [sp, #28]
   13988:	ldr	r1, [r8, #4]
   1398c:	ldr	r6, [r8]
   13990:	str	r0, [sp, #24]
   13994:	cmp	r1, r5
   13998:	ble	139a4 <__assert_fail@plt+0x29c8>
   1399c:	mov	sl, r6
   139a0:	b	13a0c <__assert_fail@plt+0x2a30>
   139a4:	mov	r0, #8
   139a8:	add	r9, r8, #8
   139ac:	str	r1, [fp, #-32]	; 0xffffffe0
   139b0:	sub	r1, r5, r1
   139b4:	mvn	r3, #-2147483648	; 0x80000000
   139b8:	str	r0, [sp]
   139bc:	subs	r0, r6, r9
   139c0:	add	r2, r1, #1
   139c4:	sub	r1, fp, #32
   139c8:	movne	r0, r6
   139cc:	bl	149e8 <__assert_fail@plt+0x3a0c>
   139d0:	mov	sl, r0
   139d4:	cmp	r6, r9
   139d8:	str	r0, [r8]
   139dc:	bne	139e8 <__assert_fail@plt+0x2a0c>
   139e0:	ldrd	r0, [r8, #8]
   139e4:	stm	sl, {r0, r1}
   139e8:	ldr	r1, [r8, #4]
   139ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   139f0:	add	r0, sl, r1, lsl #3
   139f4:	sub	r1, r2, r1
   139f8:	lsl	r2, r1, #3
   139fc:	mov	r1, #0
   13a00:	bl	10f28 <memset@plt>
   13a04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13a08:	str	r0, [r8, #4]
   13a0c:	mov	r9, sl
   13a10:	ldm	r7, {r0, r1}
   13a14:	orr	r8, r1, #1
   13a18:	add	r1, r7, #8
   13a1c:	ldr	r2, [r7, #40]	; 0x28
   13a20:	ldr	r3, [r7, #44]	; 0x2c
   13a24:	ldr	r6, [r9, r5, lsl #3]!
   13a28:	str	r1, [sp, #20]
   13a2c:	ldr	r4, [r9, #4]!
   13a30:	stm	sp, {r0, r8}
   13a34:	add	r0, sp, #8
   13a38:	stm	r0, {r1, r2, r3}
   13a3c:	ldr	r2, [sp, #32]
   13a40:	ldr	r3, [sp, #36]	; 0x24
   13a44:	mov	r1, r6
   13a48:	mov	r0, r4
   13a4c:	bl	12358 <__assert_fail@plt+0x137c>
   13a50:	cmp	r6, r0
   13a54:	bhi	13ab8 <__assert_fail@plt+0x2adc>
   13a58:	add	r6, r0, #1
   13a5c:	movw	r0, #33168	; 0x8190
   13a60:	movt	r0, #2
   13a64:	str	r6, [sl, r5, lsl #3]
   13a68:	cmp	r4, r0
   13a6c:	beq	13a78 <__assert_fail@plt+0x2a9c>
   13a70:	mov	r0, r4
   13a74:	bl	169fc <__assert_fail@plt+0x5a20>
   13a78:	mov	r0, r6
   13a7c:	bl	147e8 <__assert_fail@plt+0x380c>
   13a80:	str	r0, [r9]
   13a84:	mov	r4, r0
   13a88:	add	r3, sp, #8
   13a8c:	ldr	r0, [r7]
   13a90:	ldr	r1, [r7, #40]	; 0x28
   13a94:	ldr	r2, [r7, #44]	; 0x2c
   13a98:	stm	sp, {r0, r8}
   13a9c:	ldr	r0, [sp, #20]
   13aa0:	stm	r3, {r0, r1, r2}
   13aa4:	ldr	r2, [sp, #32]
   13aa8:	ldr	r3, [sp, #36]	; 0x24
   13aac:	mov	r0, r4
   13ab0:	mov	r1, r6
   13ab4:	bl	12358 <__assert_fail@plt+0x137c>
   13ab8:	ldr	r1, [sp, #24]
   13abc:	ldr	r0, [sp, #28]
   13ac0:	str	r1, [r0]
   13ac4:	mov	r0, r4
   13ac8:	sub	sp, fp, #28
   13acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad0:	bl	10fc4 <abort@plt>
   13ad4:	movw	r3, #33120	; 0x8160
   13ad8:	movt	r3, #2
   13adc:	b	13944 <__assert_fail@plt+0x2968>
   13ae0:	movw	r3, #33120	; 0x8160
   13ae4:	mov	r1, r0
   13ae8:	mov	r0, #0
   13aec:	mvn	r2, #0
   13af0:	movt	r3, #2
   13af4:	b	13944 <__assert_fail@plt+0x2968>
   13af8:	movw	r3, #33120	; 0x8160
   13afc:	mov	r2, r1
   13b00:	mov	r1, r0
   13b04:	mov	r0, #0
   13b08:	movt	r3, #2
   13b0c:	b	13944 <__assert_fail@plt+0x2968>
   13b10:	push	{fp, lr}
   13b14:	mov	fp, sp
   13b18:	sub	sp, sp, #48	; 0x30
   13b1c:	vmov.i32	q8, #0	; 0x00000000
   13b20:	mov	ip, #32
   13b24:	mov	r3, sp
   13b28:	mov	lr, r2
   13b2c:	cmp	r1, #10
   13b30:	add	r2, r3, #16
   13b34:	vst1.64	{d16-d17}, [r3], ip
   13b38:	vst1.64	{d16-d17}, [r2]
   13b3c:	vst1.64	{d16-d17}, [r3]
   13b40:	beq	13b60 <__assert_fail@plt+0x2b84>
   13b44:	str	r1, [sp]
   13b48:	mov	r3, sp
   13b4c:	mov	r1, lr
   13b50:	mvn	r2, #0
   13b54:	bl	13944 <__assert_fail@plt+0x2968>
   13b58:	mov	sp, fp
   13b5c:	pop	{fp, pc}
   13b60:	bl	10fc4 <abort@plt>
   13b64:	push	{r4, sl, fp, lr}
   13b68:	add	fp, sp, #8
   13b6c:	sub	sp, sp, #48	; 0x30
   13b70:	vmov.i32	q8, #0	; 0x00000000
   13b74:	mov	ip, r3
   13b78:	mov	r3, sp
   13b7c:	mov	lr, #32
   13b80:	cmp	r1, #10
   13b84:	add	r4, r3, #16
   13b88:	vst1.64	{d16-d17}, [r3], lr
   13b8c:	vst1.64	{d16-d17}, [r4]
   13b90:	vst1.64	{d16-d17}, [r3]
   13b94:	beq	13bb4 <__assert_fail@plt+0x2bd8>
   13b98:	str	r1, [sp]
   13b9c:	mov	r1, r2
   13ba0:	mov	r3, sp
   13ba4:	mov	r2, ip
   13ba8:	bl	13944 <__assert_fail@plt+0x2968>
   13bac:	sub	sp, fp, #8
   13bb0:	pop	{r4, sl, fp, pc}
   13bb4:	bl	10fc4 <abort@plt>
   13bb8:	push	{fp, lr}
   13bbc:	mov	fp, sp
   13bc0:	sub	sp, sp, #48	; 0x30
   13bc4:	vmov.i32	q8, #0	; 0x00000000
   13bc8:	mov	r3, sp
   13bcc:	mov	ip, #32
   13bd0:	cmp	r0, #10
   13bd4:	add	r2, r3, #16
   13bd8:	vst1.64	{d16-d17}, [r3], ip
   13bdc:	vst1.64	{d16-d17}, [r2]
   13be0:	vst1.64	{d16-d17}, [r3]
   13be4:	beq	13c04 <__assert_fail@plt+0x2c28>
   13be8:	str	r0, [sp]
   13bec:	mov	r3, sp
   13bf0:	mov	r0, #0
   13bf4:	mvn	r2, #0
   13bf8:	bl	13944 <__assert_fail@plt+0x2968>
   13bfc:	mov	sp, fp
   13c00:	pop	{fp, pc}
   13c04:	bl	10fc4 <abort@plt>
   13c08:	push	{fp, lr}
   13c0c:	mov	fp, sp
   13c10:	sub	sp, sp, #48	; 0x30
   13c14:	vmov.i32	q8, #0	; 0x00000000
   13c18:	mov	r3, sp
   13c1c:	mov	ip, #32
   13c20:	cmp	r0, #10
   13c24:	add	lr, r3, #16
   13c28:	vst1.64	{d16-d17}, [r3], ip
   13c2c:	vst1.64	{d16-d17}, [lr]
   13c30:	vst1.64	{d16-d17}, [r3]
   13c34:	beq	13c50 <__assert_fail@plt+0x2c74>
   13c38:	str	r0, [sp]
   13c3c:	mov	r3, sp
   13c40:	mov	r0, #0
   13c44:	bl	13944 <__assert_fail@plt+0x2968>
   13c48:	mov	sp, fp
   13c4c:	pop	{fp, pc}
   13c50:	bl	10fc4 <abort@plt>
   13c54:	push	{r4, sl, fp, lr}
   13c58:	add	fp, sp, #8
   13c5c:	sub	sp, sp, #48	; 0x30
   13c60:	mov	lr, r0
   13c64:	movw	r0, #33120	; 0x8160
   13c68:	mov	ip, r1
   13c6c:	mov	r1, #32
   13c70:	mov	r4, #1
   13c74:	movt	r0, #2
   13c78:	add	r3, r0, #16
   13c7c:	vld1.64	{d16-d17}, [r0], r1
   13c80:	vld1.64	{d20-d21}, [r0]
   13c84:	vld1.64	{d18-d19}, [r3]
   13c88:	mov	r3, sp
   13c8c:	add	r0, r3, #32
   13c90:	add	r1, r3, #16
   13c94:	vst1.64	{d20-d21}, [r0]
   13c98:	mov	r0, #28
   13c9c:	vst1.64	{d18-d19}, [r1]
   13ca0:	mov	r1, r3
   13ca4:	and	r0, r0, r2, lsr #3
   13ca8:	and	r2, r2, #31
   13cac:	vst1.64	{d16-d17}, [r1], r0
   13cb0:	ldr	r0, [r1, #8]
   13cb4:	bic	r4, r4, r0, lsr r2
   13cb8:	eor	r0, r0, r4, lsl r2
   13cbc:	mov	r2, ip
   13cc0:	str	r0, [r1, #8]
   13cc4:	mov	r0, #0
   13cc8:	mov	r1, lr
   13ccc:	bl	13944 <__assert_fail@plt+0x2968>
   13cd0:	sub	sp, fp, #8
   13cd4:	pop	{r4, sl, fp, pc}
   13cd8:	push	{fp, lr}
   13cdc:	mov	fp, sp
   13ce0:	sub	sp, sp, #48	; 0x30
   13ce4:	mov	ip, r0
   13ce8:	movw	r0, #33120	; 0x8160
   13cec:	mov	r2, #32
   13cf0:	movt	r0, #2
   13cf4:	add	r3, r0, #16
   13cf8:	vld1.64	{d16-d17}, [r0], r2
   13cfc:	vld1.64	{d20-d21}, [r0]
   13d00:	vld1.64	{d18-d19}, [r3]
   13d04:	mov	r3, sp
   13d08:	add	r0, r3, #32
   13d0c:	add	r2, r3, #16
   13d10:	vst1.64	{d20-d21}, [r0]
   13d14:	mov	r0, #28
   13d18:	vst1.64	{d18-d19}, [r2]
   13d1c:	mov	r2, r3
   13d20:	and	r0, r0, r1, lsr #3
   13d24:	and	r1, r1, #31
   13d28:	vst1.64	{d16-d17}, [r2], r0
   13d2c:	mov	r0, #1
   13d30:	ldr	lr, [r2, #8]
   13d34:	bic	r0, r0, lr, lsr r1
   13d38:	eor	r0, lr, r0, lsl r1
   13d3c:	mov	r1, ip
   13d40:	str	r0, [r2, #8]
   13d44:	mov	r0, #0
   13d48:	mvn	r2, #0
   13d4c:	bl	13944 <__assert_fail@plt+0x2968>
   13d50:	mov	sp, fp
   13d54:	pop	{fp, pc}
   13d58:	push	{fp, lr}
   13d5c:	mov	fp, sp
   13d60:	sub	sp, sp, #48	; 0x30
   13d64:	mov	r1, r0
   13d68:	movw	r0, #33120	; 0x8160
   13d6c:	mov	r3, #32
   13d70:	movt	r0, #2
   13d74:	add	r2, r0, #16
   13d78:	vld1.64	{d16-d17}, [r0], r3
   13d7c:	mov	r3, sp
   13d80:	vld1.64	{d18-d19}, [r2]
   13d84:	vld1.64	{d20-d21}, [r0]
   13d88:	add	r2, r3, #16
   13d8c:	add	r0, r3, #32
   13d90:	vst1.64	{d18-d19}, [r2]
   13d94:	vst1.64	{d20-d21}, [r0]
   13d98:	mov	r0, #12
   13d9c:	mov	r2, r3
   13da0:	vst1.64	{d16-d17}, [r2], r0
   13da4:	ldr	r0, [r2]
   13da8:	orr	r0, r0, #67108864	; 0x4000000
   13dac:	str	r0, [r2]
   13db0:	mov	r0, #0
   13db4:	mvn	r2, #0
   13db8:	bl	13944 <__assert_fail@plt+0x2968>
   13dbc:	mov	sp, fp
   13dc0:	pop	{fp, pc}
   13dc4:	push	{fp, lr}
   13dc8:	mov	fp, sp
   13dcc:	sub	sp, sp, #48	; 0x30
   13dd0:	mov	ip, r1
   13dd4:	mov	r1, r0
   13dd8:	movw	r0, #33120	; 0x8160
   13ddc:	mov	r2, #32
   13de0:	movt	r0, #2
   13de4:	add	r3, r0, #16
   13de8:	vld1.64	{d16-d17}, [r0], r2
   13dec:	vld1.64	{d18-d19}, [r3]
   13df0:	vld1.64	{d20-d21}, [r0]
   13df4:	mov	r3, sp
   13df8:	add	r2, r3, #16
   13dfc:	add	r0, r3, #32
   13e00:	vst1.64	{d18-d19}, [r2]
   13e04:	vst1.64	{d20-d21}, [r0]
   13e08:	mov	r0, #12
   13e0c:	mov	r2, r3
   13e10:	vst1.64	{d16-d17}, [r2], r0
   13e14:	ldr	r0, [r2]
   13e18:	orr	r0, r0, #67108864	; 0x4000000
   13e1c:	str	r0, [r2]
   13e20:	mov	r0, #0
   13e24:	mov	r2, ip
   13e28:	bl	13944 <__assert_fail@plt+0x2968>
   13e2c:	mov	sp, fp
   13e30:	pop	{fp, pc}
   13e34:	push	{r4, sl, fp, lr}
   13e38:	add	fp, sp, #8
   13e3c:	sub	sp, sp, #96	; 0x60
   13e40:	vmov.i32	q8, #0	; 0x00000000
   13e44:	mov	ip, r2
   13e48:	mov	r2, sp
   13e4c:	mov	r4, #28
   13e50:	cmp	r1, #10
   13e54:	mov	r3, r2
   13e58:	add	lr, r2, #16
   13e5c:	vst1.64	{d16-d17}, [r3], r4
   13e60:	vst1.64	{d16-d17}, [lr]
   13e64:	vst1.32	{d16-d17}, [r3]
   13e68:	beq	13eb8 <__assert_fail@plt+0x2edc>
   13e6c:	vld1.64	{d16-d17}, [r2], r4
   13e70:	vld1.64	{d18-d19}, [lr]
   13e74:	add	r3, sp, #48	; 0x30
   13e78:	vld1.32	{d20-d21}, [r2]
   13e7c:	add	r2, r3, #20
   13e80:	add	r4, r3, #4
   13e84:	vst1.32	{d18-d19}, [r2]
   13e88:	add	r2, r3, #32
   13e8c:	vst1.32	{d16-d17}, [r4]
   13e90:	vst1.32	{d20-d21}, [r2]
   13e94:	str	r1, [sp, #48]	; 0x30
   13e98:	mvn	r2, #0
   13e9c:	ldr	r1, [sp, #60]	; 0x3c
   13ea0:	orr	r1, r1, #67108864	; 0x4000000
   13ea4:	str	r1, [sp, #60]	; 0x3c
   13ea8:	mov	r1, ip
   13eac:	bl	13944 <__assert_fail@plt+0x2968>
   13eb0:	sub	sp, fp, #8
   13eb4:	pop	{r4, sl, fp, pc}
   13eb8:	bl	10fc4 <abort@plt>
   13ebc:	push	{r4, r5, r6, sl, fp, lr}
   13ec0:	add	fp, sp, #16
   13ec4:	sub	sp, sp, #48	; 0x30
   13ec8:	mov	ip, r3
   13ecc:	movw	r3, #33120	; 0x8160
   13ed0:	mov	r6, #32
   13ed4:	cmp	r1, #0
   13ed8:	mov	r4, sp
   13edc:	movt	r3, #2
   13ee0:	cmpne	r2, #0
   13ee4:	add	r5, r4, #16
   13ee8:	add	lr, r3, #16
   13eec:	vld1.64	{d16-d17}, [r3], r6
   13ef0:	vld1.64	{d18-d19}, [lr]
   13ef4:	vld1.64	{d20-d21}, [r3]
   13ef8:	mov	r3, #10
   13efc:	vst1.64	{d16-d17}, [r4], r6
   13f00:	vst1.64	{d18-d19}, [r5]
   13f04:	vst1.64	{d20-d21}, [r4]
   13f08:	str	r3, [sp]
   13f0c:	bne	13f14 <__assert_fail@plt+0x2f38>
   13f10:	bl	10fc4 <abort@plt>
   13f14:	str	r2, [sp, #44]	; 0x2c
   13f18:	str	r1, [sp, #40]	; 0x28
   13f1c:	mov	r3, sp
   13f20:	mov	r1, ip
   13f24:	mvn	r2, #0
   13f28:	bl	13944 <__assert_fail@plt+0x2968>
   13f2c:	sub	sp, fp, #16
   13f30:	pop	{r4, r5, r6, sl, fp, pc}
   13f34:	push	{r4, r5, r6, sl, fp, lr}
   13f38:	add	fp, sp, #16
   13f3c:	sub	sp, sp, #48	; 0x30
   13f40:	mov	lr, r3
   13f44:	movw	r3, #33120	; 0x8160
   13f48:	mov	r6, #32
   13f4c:	cmp	r1, #0
   13f50:	mov	r4, sp
   13f54:	movt	r3, #2
   13f58:	cmpne	r2, #0
   13f5c:	add	r5, r4, #16
   13f60:	add	ip, r3, #16
   13f64:	vld1.64	{d16-d17}, [r3], r6
   13f68:	vld1.64	{d18-d19}, [ip]
   13f6c:	vld1.64	{d20-d21}, [r3]
   13f70:	mov	r3, #10
   13f74:	vst1.64	{d16-d17}, [r4], r6
   13f78:	vst1.64	{d18-d19}, [r5]
   13f7c:	vst1.64	{d20-d21}, [r4]
   13f80:	str	r3, [sp]
   13f84:	bne	13f8c <__assert_fail@plt+0x2fb0>
   13f88:	bl	10fc4 <abort@plt>
   13f8c:	ldr	ip, [fp, #8]
   13f90:	str	r2, [sp, #44]	; 0x2c
   13f94:	str	r1, [sp, #40]	; 0x28
   13f98:	mov	r3, sp
   13f9c:	mov	r1, lr
   13fa0:	mov	r2, ip
   13fa4:	bl	13944 <__assert_fail@plt+0x2968>
   13fa8:	sub	sp, fp, #16
   13fac:	pop	{r4, r5, r6, sl, fp, pc}
   13fb0:	push	{r4, sl, fp, lr}
   13fb4:	add	fp, sp, #8
   13fb8:	sub	sp, sp, #48	; 0x30
   13fbc:	movw	r3, #33120	; 0x8160
   13fc0:	mov	lr, #32
   13fc4:	mov	ip, r2
   13fc8:	cmp	r0, #0
   13fcc:	movt	r3, #2
   13fd0:	cmpne	r1, #0
   13fd4:	add	r2, r3, #16
   13fd8:	vld1.64	{d16-d17}, [r3], lr
   13fdc:	vld1.64	{d20-d21}, [r3]
   13fe0:	vld1.64	{d18-d19}, [r2]
   13fe4:	mov	r2, sp
   13fe8:	add	r4, r2, #16
   13fec:	vst1.64	{d16-d17}, [r2], lr
   13ff0:	vst1.64	{d20-d21}, [r2]
   13ff4:	mov	r2, #10
   13ff8:	vst1.64	{d18-d19}, [r4]
   13ffc:	str	r2, [sp]
   14000:	bne	14008 <__assert_fail@plt+0x302c>
   14004:	bl	10fc4 <abort@plt>
   14008:	str	r1, [sp, #44]	; 0x2c
   1400c:	str	r0, [sp, #40]	; 0x28
   14010:	mov	r3, sp
   14014:	mov	r0, #0
   14018:	mov	r1, ip
   1401c:	mvn	r2, #0
   14020:	bl	13944 <__assert_fail@plt+0x2968>
   14024:	sub	sp, fp, #8
   14028:	pop	{r4, sl, fp, pc}
   1402c:	push	{r4, r5, fp, lr}
   14030:	add	fp, sp, #8
   14034:	sub	sp, sp, #48	; 0x30
   14038:	mov	ip, r3
   1403c:	movw	r3, #33120	; 0x8160
   14040:	mov	r4, #32
   14044:	mov	lr, r2
   14048:	cmp	r0, #0
   1404c:	movt	r3, #2
   14050:	cmpne	r1, #0
   14054:	add	r2, r3, #16
   14058:	vld1.64	{d16-d17}, [r3], r4
   1405c:	vld1.64	{d20-d21}, [r3]
   14060:	vld1.64	{d18-d19}, [r2]
   14064:	mov	r2, sp
   14068:	add	r5, r2, #16
   1406c:	vst1.64	{d16-d17}, [r2], r4
   14070:	vst1.64	{d20-d21}, [r2]
   14074:	mov	r2, #10
   14078:	vst1.64	{d18-d19}, [r5]
   1407c:	str	r2, [sp]
   14080:	bne	14088 <__assert_fail@plt+0x30ac>
   14084:	bl	10fc4 <abort@plt>
   14088:	str	r1, [sp, #44]	; 0x2c
   1408c:	str	r0, [sp, #40]	; 0x28
   14090:	mov	r3, sp
   14094:	mov	r0, #0
   14098:	mov	r1, lr
   1409c:	mov	r2, ip
   140a0:	bl	13944 <__assert_fail@plt+0x2968>
   140a4:	sub	sp, fp, #8
   140a8:	pop	{r4, r5, fp, pc}
   140ac:	movw	r3, #33000	; 0x80e8
   140b0:	movt	r3, #2
   140b4:	b	13944 <__assert_fail@plt+0x2968>
   140b8:	movw	r3, #33000	; 0x80e8
   140bc:	mov	r2, r1
   140c0:	mov	r1, r0
   140c4:	mov	r0, #0
   140c8:	movt	r3, #2
   140cc:	b	13944 <__assert_fail@plt+0x2968>
   140d0:	movw	r3, #33000	; 0x80e8
   140d4:	mvn	r2, #0
   140d8:	movt	r3, #2
   140dc:	b	13944 <__assert_fail@plt+0x2968>
   140e0:	movw	r3, #33000	; 0x80e8
   140e4:	mov	r1, r0
   140e8:	mov	r0, #0
   140ec:	mvn	r2, #0
   140f0:	movt	r3, #2
   140f4:	b	13944 <__assert_fail@plt+0x2968>
   140f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140fc:	add	fp, sp, #24
   14100:	sub	sp, sp, #32
   14104:	ldr	r6, [fp, #12]
   14108:	ldr	r7, [fp, #8]
   1410c:	mov	r4, r2
   14110:	mov	r8, r0
   14114:	cmp	r1, #0
   14118:	beq	14140 <__assert_fail@plt+0x3164>
   1411c:	movw	r2, #31068	; 0x795c
   14120:	mov	r5, r1
   14124:	str	r3, [sp, #4]
   14128:	str	r4, [sp]
   1412c:	mov	r0, r8
   14130:	mov	r1, #1
   14134:	movt	r2, #1
   14138:	mov	r3, r5
   1413c:	b	14158 <__assert_fail@plt+0x317c>
   14140:	movw	r2, #31080	; 0x7968
   14144:	str	r3, [sp]
   14148:	mov	r0, r8
   1414c:	mov	r1, #1
   14150:	mov	r3, r4
   14154:	movt	r2, #1
   14158:	bl	10f4c <__fprintf_chk@plt>
   1415c:	movw	r1, #31087	; 0x796f
   14160:	mov	r0, #0
   14164:	mov	r2, #5
   14168:	movt	r1, #1
   1416c:	bl	10e08 <dcgettext@plt>
   14170:	movw	r2, #31805	; 0x7c3d
   14174:	mov	r3, r0
   14178:	movw	r0, #2022	; 0x7e6
   1417c:	mov	r1, #1
   14180:	movt	r2, #1
   14184:	str	r0, [sp]
   14188:	mov	r0, r8
   1418c:	bl	10f4c <__fprintf_chk@plt>
   14190:	movw	r4, #30411	; 0x76cb
   14194:	mov	r1, r8
   14198:	movt	r4, #1
   1419c:	mov	r0, r4
   141a0:	bl	10d9c <fputs_unlocked@plt>
   141a4:	movw	r1, #31091	; 0x7973
   141a8:	mov	r0, #0
   141ac:	mov	r2, #5
   141b0:	movt	r1, #1
   141b4:	bl	10e08 <dcgettext@plt>
   141b8:	movw	r3, #31262	; 0x7a1e
   141bc:	mov	r2, r0
   141c0:	mov	r0, r8
   141c4:	mov	r1, #1
   141c8:	movt	r3, #1
   141cc:	bl	10f4c <__fprintf_chk@plt>
   141d0:	mov	r0, r4
   141d4:	mov	r1, r8
   141d8:	bl	10d9c <fputs_unlocked@plt>
   141dc:	cmp	r6, #9
   141e0:	bhi	1421c <__assert_fail@plt+0x3240>
   141e4:	add	r0, pc, #0
   141e8:	ldr	pc, [r0, r6, lsl #2]
   141ec:	andeq	r4, r1, r4, lsl r2
   141f0:	andeq	r4, r1, r8, lsr #4
   141f4:	andeq	r4, r1, r8, asr r2
   141f8:	andeq	r4, r1, r0, lsl #5
   141fc:	andeq	r4, r1, r8, lsr #5
   14200:	ldrdeq	r4, [r1], -r0
   14204:	strdeq	r4, [r1], -r8
   14208:	andeq	r4, r1, r0, lsr r3
   1420c:	ldrdeq	r4, [r1], -r8
   14210:	andeq	r4, r1, r0, lsl #7
   14214:	sub	sp, fp, #24
   14218:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1421c:	movw	r1, #31615	; 0x7b7f
   14220:	movt	r1, #1
   14224:	b	14388 <__assert_fail@plt+0x33ac>
   14228:	movw	r1, #31296	; 0x7a40
   1422c:	mov	r0, #0
   14230:	mov	r2, #5
   14234:	movt	r1, #1
   14238:	bl	10e08 <dcgettext@plt>
   1423c:	ldr	r3, [r7]
   14240:	mov	r2, r0
   14244:	mov	r0, r8
   14248:	mov	r1, #1
   1424c:	sub	sp, fp, #24
   14250:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14254:	b	10f4c <__fprintf_chk@plt>
   14258:	movw	r1, #31312	; 0x7a50
   1425c:	mov	r0, #0
   14260:	mov	r2, #5
   14264:	movt	r1, #1
   14268:	bl	10e08 <dcgettext@plt>
   1426c:	mov	r2, r0
   14270:	ldr	r3, [r7]
   14274:	ldr	r0, [r7, #4]
   14278:	str	r0, [sp]
   1427c:	b	1436c <__assert_fail@plt+0x3390>
   14280:	movw	r1, #31335	; 0x7a67
   14284:	mov	r0, #0
   14288:	mov	r2, #5
   1428c:	movt	r1, #1
   14290:	bl	10e08 <dcgettext@plt>
   14294:	mov	r2, r0
   14298:	ldr	r3, [r7]
   1429c:	ldmib	r7, {r0, r1}
   142a0:	stm	sp, {r0, r1}
   142a4:	b	1436c <__assert_fail@plt+0x3390>
   142a8:	movw	r1, #31363	; 0x7a83
   142ac:	mov	r0, #0
   142b0:	mov	r2, #5
   142b4:	movt	r1, #1
   142b8:	bl	10e08 <dcgettext@plt>
   142bc:	ldr	r3, [r7]
   142c0:	mov	r2, r0
   142c4:	ldmib	r7, {r0, r1, r7}
   142c8:	stm	sp, {r0, r1, r7}
   142cc:	b	1436c <__assert_fail@plt+0x3390>
   142d0:	movw	r1, #31395	; 0x7aa3
   142d4:	mov	r0, #0
   142d8:	mov	r2, #5
   142dc:	movt	r1, #1
   142e0:	bl	10e08 <dcgettext@plt>
   142e4:	ldr	r3, [r7]
   142e8:	mov	r2, r0
   142ec:	ldmib	r7, {r0, r1, r6, r7}
   142f0:	stm	sp, {r0, r1, r6, r7}
   142f4:	b	1436c <__assert_fail@plt+0x3390>
   142f8:	movw	r1, #31431	; 0x7ac7
   142fc:	mov	r0, #0
   14300:	mov	r2, #5
   14304:	movt	r1, #1
   14308:	bl	10e08 <dcgettext@plt>
   1430c:	mov	r2, r0
   14310:	ldr	r3, [r7]
   14314:	ldmib	r7, {r0, r1, r6}
   14318:	ldr	r5, [r7, #16]
   1431c:	ldr	r7, [r7, #20]
   14320:	stm	sp, {r0, r1, r6}
   14324:	str	r5, [sp, #12]
   14328:	str	r7, [sp, #16]
   1432c:	b	1436c <__assert_fail@plt+0x3390>
   14330:	movw	r1, #31471	; 0x7aef
   14334:	mov	r0, #0
   14338:	mov	r2, #5
   1433c:	movt	r1, #1
   14340:	bl	10e08 <dcgettext@plt>
   14344:	mov	r2, r0
   14348:	ldr	r3, [r7]
   1434c:	ldmib	r7, {r0, r1, r6}
   14350:	ldr	r5, [r7, #16]
   14354:	ldr	r4, [r7, #20]
   14358:	ldr	r7, [r7, #24]
   1435c:	stm	sp, {r0, r1, r6}
   14360:	str	r5, [sp, #12]
   14364:	str	r4, [sp, #16]
   14368:	str	r7, [sp, #20]
   1436c:	mov	r0, r8
   14370:	mov	r1, #1
   14374:	bl	10f4c <__fprintf_chk@plt>
   14378:	sub	sp, fp, #24
   1437c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14380:	movw	r1, #31563	; 0x7b4b
   14384:	movt	r1, #1
   14388:	mov	r0, #0
   1438c:	mov	r2, #5
   14390:	bl	10e08 <dcgettext@plt>
   14394:	mov	ip, r0
   14398:	ldr	r3, [r7]
   1439c:	ldr	r0, [r7, #4]
   143a0:	ldr	r1, [r7, #8]
   143a4:	ldr	r6, [r7, #12]
   143a8:	ldr	r5, [r7, #16]
   143ac:	ldr	r4, [r7, #20]
   143b0:	ldr	r2, [r7, #24]
   143b4:	ldr	lr, [r7, #28]
   143b8:	ldr	r7, [r7, #32]
   143bc:	stm	sp, {r0, r1, r6}
   143c0:	str	r5, [sp, #12]
   143c4:	str	r4, [sp, #16]
   143c8:	str	r2, [sp, #20]
   143cc:	str	lr, [sp, #24]
   143d0:	str	r7, [sp, #28]
   143d4:	b	1441c <__assert_fail@plt+0x3440>
   143d8:	movw	r1, #31515	; 0x7b1b
   143dc:	mov	r0, #0
   143e0:	mov	r2, #5
   143e4:	movt	r1, #1
   143e8:	bl	10e08 <dcgettext@plt>
   143ec:	mov	ip, r0
   143f0:	ldr	r3, [r7]
   143f4:	ldmib	r7, {r0, r1, r6}
   143f8:	ldr	r5, [r7, #16]
   143fc:	ldr	r4, [r7, #20]
   14400:	ldr	r2, [r7, #24]
   14404:	ldr	r7, [r7, #28]
   14408:	stm	sp, {r0, r1, r6}
   1440c:	str	r5, [sp, #12]
   14410:	str	r4, [sp, #16]
   14414:	str	r2, [sp, #20]
   14418:	str	r7, [sp, #24]
   1441c:	mov	r0, r8
   14420:	mov	r1, #1
   14424:	mov	r2, ip
   14428:	bl	10f4c <__fprintf_chk@plt>
   1442c:	sub	sp, fp, #24
   14430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14434:	push	{r4, sl, fp, lr}
   14438:	add	fp, sp, #8
   1443c:	sub	sp, sp, #8
   14440:	ldr	ip, [fp, #8]
   14444:	mov	lr, #0
   14448:	ldr	r4, [ip, lr, lsl #2]
   1444c:	add	lr, lr, #1
   14450:	cmp	r4, #0
   14454:	bne	14448 <__assert_fail@plt+0x346c>
   14458:	sub	r4, lr, #1
   1445c:	str	ip, [sp]
   14460:	str	r4, [sp, #4]
   14464:	bl	140f8 <__assert_fail@plt+0x311c>
   14468:	sub	sp, fp, #8
   1446c:	pop	{r4, sl, fp, pc}
   14470:	push	{fp, lr}
   14474:	mov	fp, sp
   14478:	sub	sp, sp, #48	; 0x30
   1447c:	ldr	ip, [fp, #8]
   14480:	ldr	lr, [ip]
   14484:	cmp	lr, #0
   14488:	str	lr, [sp, #8]
   1448c:	beq	14528 <__assert_fail@plt+0x354c>
   14490:	ldr	lr, [ip, #4]
   14494:	cmp	lr, #0
   14498:	str	lr, [sp, #12]
   1449c:	beq	14530 <__assert_fail@plt+0x3554>
   144a0:	ldr	lr, [ip, #8]
   144a4:	cmp	lr, #0
   144a8:	str	lr, [sp, #16]
   144ac:	beq	14538 <__assert_fail@plt+0x355c>
   144b0:	ldr	lr, [ip, #12]
   144b4:	cmp	lr, #0
   144b8:	str	lr, [sp, #20]
   144bc:	beq	14540 <__assert_fail@plt+0x3564>
   144c0:	ldr	lr, [ip, #16]
   144c4:	cmp	lr, #0
   144c8:	str	lr, [sp, #24]
   144cc:	beq	14548 <__assert_fail@plt+0x356c>
   144d0:	ldr	lr, [ip, #20]
   144d4:	cmp	lr, #0
   144d8:	str	lr, [sp, #28]
   144dc:	beq	14550 <__assert_fail@plt+0x3574>
   144e0:	ldr	lr, [ip, #24]
   144e4:	cmp	lr, #0
   144e8:	str	lr, [sp, #32]
   144ec:	beq	14558 <__assert_fail@plt+0x357c>
   144f0:	ldr	lr, [ip, #28]
   144f4:	cmp	lr, #0
   144f8:	str	lr, [sp, #36]	; 0x24
   144fc:	beq	14560 <__assert_fail@plt+0x3584>
   14500:	ldr	lr, [ip, #32]
   14504:	cmp	lr, #0
   14508:	str	lr, [sp, #40]	; 0x28
   1450c:	beq	14568 <__assert_fail@plt+0x358c>
   14510:	ldr	lr, [ip, #36]	; 0x24
   14514:	mov	ip, #10
   14518:	cmp	lr, #0
   1451c:	str	lr, [sp, #44]	; 0x2c
   14520:	movweq	ip, #9
   14524:	b	1456c <__assert_fail@plt+0x3590>
   14528:	mov	ip, #0
   1452c:	b	1456c <__assert_fail@plt+0x3590>
   14530:	mov	ip, #1
   14534:	b	1456c <__assert_fail@plt+0x3590>
   14538:	mov	ip, #2
   1453c:	b	1456c <__assert_fail@plt+0x3590>
   14540:	mov	ip, #3
   14544:	b	1456c <__assert_fail@plt+0x3590>
   14548:	mov	ip, #4
   1454c:	b	1456c <__assert_fail@plt+0x3590>
   14550:	mov	ip, #5
   14554:	b	1456c <__assert_fail@plt+0x3590>
   14558:	mov	ip, #6
   1455c:	b	1456c <__assert_fail@plt+0x3590>
   14560:	mov	ip, #7
   14564:	b	1456c <__assert_fail@plt+0x3590>
   14568:	mov	ip, #8
   1456c:	add	lr, sp, #8
   14570:	str	ip, [sp, #4]
   14574:	str	lr, [sp]
   14578:	bl	140f8 <__assert_fail@plt+0x311c>
   1457c:	mov	sp, fp
   14580:	pop	{fp, pc}
   14584:	push	{fp, lr}
   14588:	mov	fp, sp
   1458c:	sub	sp, sp, #56	; 0x38
   14590:	add	ip, fp, #8
   14594:	str	ip, [sp, #12]
   14598:	ldr	lr, [fp, #8]
   1459c:	cmp	lr, #0
   145a0:	str	lr, [sp, #16]
   145a4:	beq	14640 <__assert_fail@plt+0x3664>
   145a8:	ldr	lr, [ip, #4]
   145ac:	cmp	lr, #0
   145b0:	str	lr, [sp, #20]
   145b4:	beq	14648 <__assert_fail@plt+0x366c>
   145b8:	ldr	lr, [ip, #8]
   145bc:	cmp	lr, #0
   145c0:	str	lr, [sp, #24]
   145c4:	beq	14650 <__assert_fail@plt+0x3674>
   145c8:	ldr	lr, [ip, #12]
   145cc:	cmp	lr, #0
   145d0:	str	lr, [sp, #28]
   145d4:	beq	14658 <__assert_fail@plt+0x367c>
   145d8:	ldr	lr, [ip, #16]
   145dc:	cmp	lr, #0
   145e0:	str	lr, [sp, #32]
   145e4:	beq	14660 <__assert_fail@plt+0x3684>
   145e8:	ldr	lr, [ip, #20]
   145ec:	cmp	lr, #0
   145f0:	str	lr, [sp, #36]	; 0x24
   145f4:	beq	14668 <__assert_fail@plt+0x368c>
   145f8:	ldr	lr, [ip, #24]
   145fc:	cmp	lr, #0
   14600:	str	lr, [sp, #40]	; 0x28
   14604:	beq	14670 <__assert_fail@plt+0x3694>
   14608:	ldr	lr, [ip, #28]
   1460c:	cmp	lr, #0
   14610:	str	lr, [sp, #44]	; 0x2c
   14614:	beq	14678 <__assert_fail@plt+0x369c>
   14618:	ldr	lr, [ip, #32]
   1461c:	cmp	lr, #0
   14620:	str	lr, [sp, #48]	; 0x30
   14624:	beq	14680 <__assert_fail@plt+0x36a4>
   14628:	ldr	lr, [ip, #36]	; 0x24
   1462c:	mov	ip, #10
   14630:	cmp	lr, #0
   14634:	str	lr, [sp, #52]	; 0x34
   14638:	movweq	ip, #9
   1463c:	b	14684 <__assert_fail@plt+0x36a8>
   14640:	mov	ip, #0
   14644:	b	14684 <__assert_fail@plt+0x36a8>
   14648:	mov	ip, #1
   1464c:	b	14684 <__assert_fail@plt+0x36a8>
   14650:	mov	ip, #2
   14654:	b	14684 <__assert_fail@plt+0x36a8>
   14658:	mov	ip, #3
   1465c:	b	14684 <__assert_fail@plt+0x36a8>
   14660:	mov	ip, #4
   14664:	b	14684 <__assert_fail@plt+0x36a8>
   14668:	mov	ip, #5
   1466c:	b	14684 <__assert_fail@plt+0x36a8>
   14670:	mov	ip, #6
   14674:	b	14684 <__assert_fail@plt+0x36a8>
   14678:	mov	ip, #7
   1467c:	b	14684 <__assert_fail@plt+0x36a8>
   14680:	mov	ip, #8
   14684:	add	lr, sp, #16
   14688:	str	ip, [sp, #4]
   1468c:	str	lr, [sp]
   14690:	bl	140f8 <__assert_fail@plt+0x311c>
   14694:	mov	sp, fp
   14698:	pop	{fp, pc}
   1469c:	push	{fp, lr}
   146a0:	mov	fp, sp
   146a4:	movw	r0, #33084	; 0x813c
   146a8:	movt	r0, #2
   146ac:	ldr	r1, [r0]
   146b0:	movw	r0, #30411	; 0x76cb
   146b4:	movt	r0, #1
   146b8:	bl	10d9c <fputs_unlocked@plt>
   146bc:	movw	r1, #31675	; 0x7bbb
   146c0:	mov	r0, #0
   146c4:	mov	r2, #5
   146c8:	movt	r1, #1
   146cc:	bl	10e08 <dcgettext@plt>
   146d0:	movw	r2, #31695	; 0x7bcf
   146d4:	mov	r1, r0
   146d8:	mov	r0, #1
   146dc:	movt	r2, #1
   146e0:	bl	10f34 <__printf_chk@plt>
   146e4:	movw	r1, #31717	; 0x7be5
   146e8:	mov	r0, #0
   146ec:	mov	r2, #5
   146f0:	movt	r1, #1
   146f4:	bl	10e08 <dcgettext@plt>
   146f8:	movw	r2, #29544	; 0x7368
   146fc:	movw	r3, #30220	; 0x760c
   14700:	mov	r1, r0
   14704:	mov	r0, #1
   14708:	movt	r2, #1
   1470c:	movt	r3, #1
   14710:	bl	10f34 <__printf_chk@plt>
   14714:	movw	r1, #31737	; 0x7bf9
   14718:	mov	r0, #0
   1471c:	mov	r2, #5
   14720:	movt	r1, #1
   14724:	bl	10e08 <dcgettext@plt>
   14728:	movw	r2, #31776	; 0x7c20
   1472c:	mov	r1, r0
   14730:	mov	r0, #1
   14734:	movt	r2, #1
   14738:	pop	{fp, lr}
   1473c:	b	10f34 <__printf_chk@plt>
   14740:	push	{r4, r5, r6, sl, fp, lr}
   14744:	add	fp, sp, #16
   14748:	mov	r4, r2
   1474c:	mov	r5, r1
   14750:	mov	r6, r0
   14754:	bl	16b68 <__assert_fail@plt+0x5b8c>
   14758:	cmp	r0, #0
   1475c:	popne	{r4, r5, r6, sl, fp, pc}
   14760:	cmp	r6, #0
   14764:	beq	14778 <__assert_fail@plt+0x379c>
   14768:	cmp	r5, #0
   1476c:	cmpne	r4, #0
   14770:	bne	14778 <__assert_fail@plt+0x379c>
   14774:	pop	{r4, r5, r6, sl, fp, pc}
   14778:	bl	14cf4 <__assert_fail@plt+0x3d18>
   1477c:	push	{r4, r5, r6, sl, fp, lr}
   14780:	add	fp, sp, #16
   14784:	mov	r4, r2
   14788:	mov	r5, r1
   1478c:	mov	r6, r0
   14790:	bl	16b68 <__assert_fail@plt+0x5b8c>
   14794:	cmp	r0, #0
   14798:	popne	{r4, r5, r6, sl, fp, pc}
   1479c:	cmp	r6, #0
   147a0:	beq	147b4 <__assert_fail@plt+0x37d8>
   147a4:	cmp	r5, #0
   147a8:	cmpne	r4, #0
   147ac:	bne	147b4 <__assert_fail@plt+0x37d8>
   147b0:	pop	{r4, r5, r6, sl, fp, pc}
   147b4:	bl	14cf4 <__assert_fail@plt+0x3d18>
   147b8:	push	{fp, lr}
   147bc:	mov	fp, sp
   147c0:	bl	167fc <__assert_fail@plt+0x5820>
   147c4:	cmp	r0, #0
   147c8:	popne	{fp, pc}
   147cc:	bl	14cf4 <__assert_fail@plt+0x3d18>
   147d0:	push	{fp, lr}
   147d4:	mov	fp, sp
   147d8:	bl	167fc <__assert_fail@plt+0x5820>
   147dc:	cmp	r0, #0
   147e0:	popne	{fp, pc}
   147e4:	bl	14cf4 <__assert_fail@plt+0x3d18>
   147e8:	push	{fp, lr}
   147ec:	mov	fp, sp
   147f0:	bl	167fc <__assert_fail@plt+0x5820>
   147f4:	cmp	r0, #0
   147f8:	popne	{fp, pc}
   147fc:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14800:	push	{r4, r5, fp, lr}
   14804:	add	fp, sp, #8
   14808:	mov	r4, r1
   1480c:	mov	r5, r0
   14810:	bl	1682c <__assert_fail@plt+0x5850>
   14814:	cmp	r0, #0
   14818:	popne	{r4, r5, fp, pc}
   1481c:	cmp	r5, #0
   14820:	beq	14830 <__assert_fail@plt+0x3854>
   14824:	cmp	r4, #0
   14828:	bne	14830 <__assert_fail@plt+0x3854>
   1482c:	pop	{r4, r5, fp, pc}
   14830:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14834:	push	{fp, lr}
   14838:	mov	fp, sp
   1483c:	cmp	r1, #0
   14840:	orreq	r1, r1, #1
   14844:	bl	1682c <__assert_fail@plt+0x5850>
   14848:	cmp	r0, #0
   1484c:	popne	{fp, pc}
   14850:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14854:	push	{fp, lr}
   14858:	mov	fp, sp
   1485c:	clz	r3, r2
   14860:	lsr	ip, r3, #5
   14864:	clz	r3, r1
   14868:	lsr	r3, r3, #5
   1486c:	orrs	r3, r3, ip
   14870:	movwne	r1, #1
   14874:	movwne	r2, #1
   14878:	bl	16b68 <__assert_fail@plt+0x5b8c>
   1487c:	cmp	r0, #0
   14880:	popne	{fp, pc}
   14884:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14888:	push	{fp, lr}
   1488c:	mov	fp, sp
   14890:	mov	r2, r1
   14894:	mov	r1, r0
   14898:	mov	r0, #0
   1489c:	bl	16b68 <__assert_fail@plt+0x5b8c>
   148a0:	cmp	r0, #0
   148a4:	popne	{fp, pc}
   148a8:	bl	14cf4 <__assert_fail@plt+0x3d18>
   148ac:	push	{fp, lr}
   148b0:	mov	fp, sp
   148b4:	mov	r2, r1
   148b8:	mov	r1, r0
   148bc:	clz	r0, r2
   148c0:	clz	r3, r1
   148c4:	lsr	r0, r0, #5
   148c8:	lsr	r3, r3, #5
   148cc:	orrs	r0, r3, r0
   148d0:	mov	r0, #0
   148d4:	movwne	r1, #1
   148d8:	movwne	r2, #1
   148dc:	bl	16b68 <__assert_fail@plt+0x5b8c>
   148e0:	cmp	r0, #0
   148e4:	popne	{fp, pc}
   148e8:	bl	14cf4 <__assert_fail@plt+0x3d18>
   148ec:	push	{r4, r5, r6, sl, fp, lr}
   148f0:	add	fp, sp, #16
   148f4:	ldr	r5, [r1]
   148f8:	mov	r4, r1
   148fc:	mov	r6, r0
   14900:	cmp	r0, #0
   14904:	beq	1491c <__assert_fail@plt+0x3940>
   14908:	mov	r0, #1
   1490c:	add	r0, r0, r5, lsr #1
   14910:	adds	r5, r5, r0
   14914:	bcc	14924 <__assert_fail@plt+0x3948>
   14918:	b	14960 <__assert_fail@plt+0x3984>
   1491c:	cmp	r5, #0
   14920:	movweq	r5, #64	; 0x40
   14924:	mov	r0, r6
   14928:	mov	r1, r5
   1492c:	mov	r2, #1
   14930:	bl	16b68 <__assert_fail@plt+0x5b8c>
   14934:	cmp	r5, #0
   14938:	mov	r1, r5
   1493c:	movwne	r1, #1
   14940:	cmp	r0, #0
   14944:	bne	14958 <__assert_fail@plt+0x397c>
   14948:	clz	r2, r6
   1494c:	lsr	r2, r2, #5
   14950:	orrs	r1, r2, r1
   14954:	bne	14960 <__assert_fail@plt+0x3984>
   14958:	str	r5, [r4]
   1495c:	pop	{r4, r5, r6, sl, fp, pc}
   14960:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14964:	push	{r4, r5, r6, r7, fp, lr}
   14968:	add	fp, sp, #16
   1496c:	ldr	r5, [r1]
   14970:	mov	r6, r2
   14974:	mov	r4, r1
   14978:	mov	r7, r0
   1497c:	cmp	r0, #0
   14980:	beq	14998 <__assert_fail@plt+0x39bc>
   14984:	mov	r0, #1
   14988:	add	r0, r0, r5, lsr #1
   1498c:	adds	r5, r5, r0
   14990:	bcc	149b0 <__assert_fail@plt+0x39d4>
   14994:	b	149e4 <__assert_fail@plt+0x3a08>
   14998:	cmp	r5, #0
   1499c:	bne	149b0 <__assert_fail@plt+0x39d4>
   149a0:	mov	r0, #64	; 0x40
   149a4:	cmp	r6, #64	; 0x40
   149a8:	udiv	r5, r0, r6
   149ac:	addhi	r5, r5, #1
   149b0:	mov	r0, r7
   149b4:	mov	r1, r5
   149b8:	mov	r2, r6
   149bc:	bl	16b68 <__assert_fail@plt+0x5b8c>
   149c0:	cmp	r0, #0
   149c4:	bne	149dc <__assert_fail@plt+0x3a00>
   149c8:	cmp	r7, #0
   149cc:	beq	149e4 <__assert_fail@plt+0x3a08>
   149d0:	cmp	r6, #0
   149d4:	cmpne	r5, #0
   149d8:	bne	149e4 <__assert_fail@plt+0x3a08>
   149dc:	str	r5, [r4]
   149e0:	pop	{r4, r5, r6, r7, fp, pc}
   149e4:	bl	14cf4 <__assert_fail@plt+0x3d18>
   149e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149ec:	add	fp, sp, #24
   149f0:	mov	r8, r1
   149f4:	ldr	r1, [r1]
   149f8:	mov	r5, r0
   149fc:	add	r0, r1, r1, asr #1
   14a00:	cmp	r0, r1
   14a04:	mvnvs	r0, #-2147483648	; 0x80000000
   14a08:	cmp	r0, r3
   14a0c:	mov	r7, r0
   14a10:	movgt	r7, r3
   14a14:	cmn	r3, #1
   14a18:	movle	r7, r0
   14a1c:	ldr	r0, [fp, #8]
   14a20:	cmn	r0, #1
   14a24:	ble	14a4c <__assert_fail@plt+0x3a70>
   14a28:	cmp	r0, #0
   14a2c:	beq	14aa0 <__assert_fail@plt+0x3ac4>
   14a30:	cmn	r7, #1
   14a34:	ble	14a74 <__assert_fail@plt+0x3a98>
   14a38:	mvn	r4, #-2147483648	; 0x80000000
   14a3c:	udiv	r6, r4, r0
   14a40:	cmp	r6, r7
   14a44:	bge	14aa0 <__assert_fail@plt+0x3ac4>
   14a48:	b	14ab0 <__assert_fail@plt+0x3ad4>
   14a4c:	cmn	r7, #1
   14a50:	ble	14a90 <__assert_fail@plt+0x3ab4>
   14a54:	cmn	r0, #1
   14a58:	beq	14aa0 <__assert_fail@plt+0x3ac4>
   14a5c:	mov	r6, #-2147483648	; 0x80000000
   14a60:	mvn	r4, #-2147483648	; 0x80000000
   14a64:	sdiv	r6, r6, r0
   14a68:	cmp	r6, r7
   14a6c:	bge	14aa0 <__assert_fail@plt+0x3ac4>
   14a70:	b	14ab0 <__assert_fail@plt+0x3ad4>
   14a74:	beq	14aa0 <__assert_fail@plt+0x3ac4>
   14a78:	mov	r6, #-2147483648	; 0x80000000
   14a7c:	mvn	r4, #-2147483648	; 0x80000000
   14a80:	sdiv	r6, r6, r7
   14a84:	cmp	r6, r0
   14a88:	bge	14aa0 <__assert_fail@plt+0x3ac4>
   14a8c:	b	14ab0 <__assert_fail@plt+0x3ad4>
   14a90:	mvn	r4, #-2147483648	; 0x80000000
   14a94:	sdiv	r6, r4, r0
   14a98:	cmp	r7, r6
   14a9c:	blt	14ab0 <__assert_fail@plt+0x3ad4>
   14aa0:	mul	r6, r7, r0
   14aa4:	mov	r4, #64	; 0x40
   14aa8:	cmp	r6, #63	; 0x3f
   14aac:	bgt	14ab8 <__assert_fail@plt+0x3adc>
   14ab0:	sdiv	r7, r4, r0
   14ab4:	mul	r6, r7, r0
   14ab8:	cmp	r5, #0
   14abc:	moveq	r4, #0
   14ac0:	streq	r4, [r8]
   14ac4:	sub	r4, r7, r1
   14ac8:	cmp	r4, r2
   14acc:	bge	14b78 <__assert_fail@plt+0x3b9c>
   14ad0:	add	r7, r1, r2
   14ad4:	mov	r6, #0
   14ad8:	mov	r2, #0
   14adc:	cmp	r7, r3
   14ae0:	movwgt	r6, #1
   14ae4:	cmn	r3, #1
   14ae8:	movwgt	r2, #1
   14aec:	cmp	r7, r1
   14af0:	bvs	14bac <__assert_fail@plt+0x3bd0>
   14af4:	ands	r1, r2, r6
   14af8:	bne	14bac <__assert_fail@plt+0x3bd0>
   14afc:	cmn	r0, #1
   14b00:	ble	14b28 <__assert_fail@plt+0x3b4c>
   14b04:	cmp	r0, #0
   14b08:	beq	14b74 <__assert_fail@plt+0x3b98>
   14b0c:	cmn	r7, #1
   14b10:	ble	14b4c <__assert_fail@plt+0x3b70>
   14b14:	mvn	r1, #-2147483648	; 0x80000000
   14b18:	udiv	r1, r1, r0
   14b1c:	cmp	r1, r7
   14b20:	bge	14b74 <__assert_fail@plt+0x3b98>
   14b24:	b	14bac <__assert_fail@plt+0x3bd0>
   14b28:	cmn	r7, #1
   14b2c:	ble	14b64 <__assert_fail@plt+0x3b88>
   14b30:	cmn	r0, #1
   14b34:	beq	14b74 <__assert_fail@plt+0x3b98>
   14b38:	mov	r1, #-2147483648	; 0x80000000
   14b3c:	sdiv	r1, r1, r0
   14b40:	cmp	r1, r7
   14b44:	bge	14b74 <__assert_fail@plt+0x3b98>
   14b48:	b	14bac <__assert_fail@plt+0x3bd0>
   14b4c:	beq	14b74 <__assert_fail@plt+0x3b98>
   14b50:	mov	r1, #-2147483648	; 0x80000000
   14b54:	sdiv	r1, r1, r7
   14b58:	cmp	r1, r0
   14b5c:	bge	14b74 <__assert_fail@plt+0x3b98>
   14b60:	b	14bac <__assert_fail@plt+0x3bd0>
   14b64:	mvn	r1, #-2147483648	; 0x80000000
   14b68:	sdiv	r1, r1, r0
   14b6c:	cmp	r7, r1
   14b70:	blt	14bac <__assert_fail@plt+0x3bd0>
   14b74:	mul	r6, r7, r0
   14b78:	mov	r0, r5
   14b7c:	mov	r1, r6
   14b80:	bl	1682c <__assert_fail@plt+0x5850>
   14b84:	cmp	r6, #0
   14b88:	movwne	r6, #1
   14b8c:	cmp	r0, #0
   14b90:	bne	14ba4 <__assert_fail@plt+0x3bc8>
   14b94:	clz	r1, r5
   14b98:	lsr	r1, r1, #5
   14b9c:	orrs	r1, r1, r6
   14ba0:	bne	14bac <__assert_fail@plt+0x3bd0>
   14ba4:	str	r7, [r8]
   14ba8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bac:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14bb0:	push	{fp, lr}
   14bb4:	mov	fp, sp
   14bb8:	mov	r1, #1
   14bbc:	bl	167a8 <__assert_fail@plt+0x57cc>
   14bc0:	cmp	r0, #0
   14bc4:	popne	{fp, pc}
   14bc8:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14bcc:	push	{fp, lr}
   14bd0:	mov	fp, sp
   14bd4:	bl	167a8 <__assert_fail@plt+0x57cc>
   14bd8:	cmp	r0, #0
   14bdc:	popne	{fp, pc}
   14be0:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14be4:	push	{fp, lr}
   14be8:	mov	fp, sp
   14bec:	mov	r1, #1
   14bf0:	bl	167a8 <__assert_fail@plt+0x57cc>
   14bf4:	cmp	r0, #0
   14bf8:	popne	{fp, pc}
   14bfc:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14c00:	push	{fp, lr}
   14c04:	mov	fp, sp
   14c08:	bl	167a8 <__assert_fail@plt+0x57cc>
   14c0c:	cmp	r0, #0
   14c10:	popne	{fp, pc}
   14c14:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14c18:	push	{r4, r5, fp, lr}
   14c1c:	add	fp, sp, #8
   14c20:	mov	r5, r0
   14c24:	mov	r0, r1
   14c28:	mov	r4, r1
   14c2c:	bl	167fc <__assert_fail@plt+0x5820>
   14c30:	cmp	r0, #0
   14c34:	beq	14c48 <__assert_fail@plt+0x3c6c>
   14c38:	mov	r1, r5
   14c3c:	mov	r2, r4
   14c40:	pop	{r4, r5, fp, lr}
   14c44:	b	10de4 <memcpy@plt>
   14c48:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14c4c:	push	{r4, r5, fp, lr}
   14c50:	add	fp, sp, #8
   14c54:	mov	r5, r0
   14c58:	mov	r0, r1
   14c5c:	mov	r4, r1
   14c60:	bl	167fc <__assert_fail@plt+0x5820>
   14c64:	cmp	r0, #0
   14c68:	beq	14c7c <__assert_fail@plt+0x3ca0>
   14c6c:	mov	r1, r5
   14c70:	mov	r2, r4
   14c74:	pop	{r4, r5, fp, lr}
   14c78:	b	10de4 <memcpy@plt>
   14c7c:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14c80:	push	{r4, r5, fp, lr}
   14c84:	add	fp, sp, #8
   14c88:	mov	r5, r0
   14c8c:	add	r0, r1, #1
   14c90:	mov	r4, r1
   14c94:	bl	167fc <__assert_fail@plt+0x5820>
   14c98:	cmp	r0, #0
   14c9c:	beq	14cb8 <__assert_fail@plt+0x3cdc>
   14ca0:	mov	r1, #0
   14ca4:	mov	r2, r4
   14ca8:	strb	r1, [r0, r4]
   14cac:	mov	r1, r5
   14cb0:	pop	{r4, r5, fp, lr}
   14cb4:	b	10de4 <memcpy@plt>
   14cb8:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14cbc:	push	{r4, r5, fp, lr}
   14cc0:	add	fp, sp, #8
   14cc4:	mov	r4, r0
   14cc8:	bl	10ef8 <strlen@plt>
   14ccc:	add	r5, r0, #1
   14cd0:	mov	r0, r5
   14cd4:	bl	167fc <__assert_fail@plt+0x5820>
   14cd8:	cmp	r0, #0
   14cdc:	beq	14cf0 <__assert_fail@plt+0x3d14>
   14ce0:	mov	r1, r4
   14ce4:	mov	r2, r5
   14ce8:	pop	{r4, r5, fp, lr}
   14cec:	b	10de4 <memcpy@plt>
   14cf0:	bl	14cf4 <__assert_fail@plt+0x3d18>
   14cf4:	push	{fp, lr}
   14cf8:	mov	fp, sp
   14cfc:	movw	r0, #32996	; 0x80e4
   14d00:	movw	r1, #31852	; 0x7c6c
   14d04:	mov	r2, #5
   14d08:	movt	r0, #2
   14d0c:	movt	r1, #1
   14d10:	ldr	r4, [r0]
   14d14:	mov	r0, #0
   14d18:	bl	10e08 <dcgettext@plt>
   14d1c:	movw	r2, #30815	; 0x785f
   14d20:	mov	r3, r0
   14d24:	mov	r0, r4
   14d28:	mov	r1, #0
   14d2c:	movt	r2, #1
   14d30:	bl	10e80 <error@plt>
   14d34:	bl	10fc4 <abort@plt>
   14d38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d3c:	add	fp, sp, #24
   14d40:	sub	sp, sp, #16
   14d44:	mov	r8, r0
   14d48:	ldr	r0, [fp, #16]
   14d4c:	mov	r7, r3
   14d50:	mov	r4, r2
   14d54:	mov	r2, r1
   14d58:	add	r3, sp, #8
   14d5c:	mov	r1, #0
   14d60:	str	r0, [sp]
   14d64:	mov	r0, r8
   14d68:	bl	14e48 <__assert_fail@plt+0x3e6c>
   14d6c:	cmp	r0, #0
   14d70:	bne	14e1c <__assert_fail@plt+0x3e40>
   14d74:	ldr	r6, [sp, #8]
   14d78:	ldr	r5, [sp, #12]
   14d7c:	subs	r0, r6, r4
   14d80:	sbcs	r0, r5, r7
   14d84:	blt	14da8 <__assert_fail@plt+0x3dcc>
   14d88:	ldr	r1, [fp, #8]
   14d8c:	ldr	r0, [fp, #12]
   14d90:	subs	r1, r1, r6
   14d94:	sbcs	r0, r0, r5
   14d98:	movge	r0, r6
   14d9c:	movge	r1, r5
   14da0:	subge	sp, fp, #24
   14da4:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   14da8:	subs	r0, r6, #1073741824	; 0x40000000
   14dac:	sbcs	r0, r5, #0
   14db0:	blt	14dc0 <__assert_fail@plt+0x3de4>
   14db4:	bl	10f10 <__errno_location@plt>
   14db8:	mov	r1, #75	; 0x4b
   14dbc:	b	14ddc <__assert_fail@plt+0x3e00>
   14dc0:	bl	10f10 <__errno_location@plt>
   14dc4:	mvn	r2, #1073741824	; 0x40000000
   14dc8:	mvn	r1, #0
   14dcc:	subs	r2, r2, r6
   14dd0:	sbcs	r1, r1, r5
   14dd4:	movlt	r1, #34	; 0x22
   14dd8:	movge	r1, #75	; 0x4b
   14ddc:	str	r1, [r0]
   14de0:	ldr	r6, [r0]
   14de4:	ldr	r4, [fp, #24]
   14de8:	ldr	r5, [fp, #20]
   14dec:	mov	r0, r8
   14df0:	bl	140e0 <__assert_fail@plt+0x3104>
   14df4:	subs	r1, r6, #22
   14df8:	movw	r2, #30811	; 0x785b
   14dfc:	str	r0, [sp]
   14e00:	mov	r3, r5
   14e04:	movne	r1, r6
   14e08:	cmp	r4, #0
   14e0c:	movt	r2, #1
   14e10:	movweq	r4, #1
   14e14:	mov	r0, r4
   14e18:	bl	10e80 <error@plt>
   14e1c:	cmp	r0, #1
   14e20:	beq	14db4 <__assert_fail@plt+0x3dd8>
   14e24:	cmp	r0, #3
   14e28:	bne	14e38 <__assert_fail@plt+0x3e5c>
   14e2c:	bl	10f10 <__errno_location@plt>
   14e30:	mov	r1, #0
   14e34:	b	14ddc <__assert_fail@plt+0x3e00>
   14e38:	bl	10f10 <__errno_location@plt>
   14e3c:	b	14de0 <__assert_fail@plt+0x3e04>
   14e40:	mov	r1, #10
   14e44:	b	14d38 <__assert_fail@plt+0x3d5c>
   14e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e4c:	add	fp, sp, #28
   14e50:	sub	sp, sp, #36	; 0x24
   14e54:	cmp	r2, #37	; 0x25
   14e58:	bcs	16788 <__assert_fail@plt+0x57ac>
   14e5c:	ldr	r8, [fp, #8]
   14e60:	mov	r9, r3
   14e64:	mov	r6, r2
   14e68:	mov	r7, r1
   14e6c:	mov	r4, r0
   14e70:	bl	10f10 <__errno_location@plt>
   14e74:	cmp	r7, #0
   14e78:	add	sl, sp, #32
   14e7c:	mov	r5, r0
   14e80:	mov	r0, #0
   14e84:	mov	r2, r6
   14e88:	mov	r3, #0
   14e8c:	movne	sl, r7
   14e90:	str	r0, [r5]
   14e94:	mov	r0, r4
   14e98:	mov	r1, sl
   14e9c:	bl	10f94 <__strtoll_internal@plt>
   14ea0:	mov	r7, r1
   14ea4:	ldr	r1, [sl]
   14ea8:	cmp	r1, r4
   14eac:	beq	14ee8 <__assert_fail@plt+0x3f0c>
   14eb0:	mov	r6, r0
   14eb4:	ldr	r0, [r5]
   14eb8:	cmp	r0, #0
   14ebc:	beq	15074 <__assert_fail@plt+0x4098>
   14ec0:	mov	r5, #4
   14ec4:	cmp	r0, #34	; 0x22
   14ec8:	bne	152cc <__assert_fail@plt+0x42f0>
   14ecc:	mov	r5, #1
   14ed0:	cmp	r8, #0
   14ed4:	beq	15080 <__assert_fail@plt+0x40a4>
   14ed8:	ldrb	r4, [r1]
   14edc:	cmp	r4, #0
   14ee0:	bne	14f30 <__assert_fail@plt+0x3f54>
   14ee4:	b	15080 <__assert_fail@plt+0x40a4>
   14ee8:	mov	r5, #4
   14eec:	cmp	r8, #0
   14ef0:	beq	152cc <__assert_fail@plt+0x42f0>
   14ef4:	mov	r6, r1
   14ef8:	ldrb	r1, [r4]
   14efc:	cmp	r1, #0
   14f00:	beq	152cc <__assert_fail@plt+0x42f0>
   14f04:	mov	r0, r8
   14f08:	bl	10f04 <strchr@plt>
   14f0c:	cmp	r0, #0
   14f10:	beq	152cc <__assert_fail@plt+0x42f0>
   14f14:	mov	r1, r6
   14f18:	mov	r5, #0
   14f1c:	mov	r6, #1
   14f20:	mov	r7, #0
   14f24:	ldrb	r4, [r1]
   14f28:	cmp	r4, #0
   14f2c:	beq	15080 <__assert_fail@plt+0x40a4>
   14f30:	str	r1, [sp, #20]
   14f34:	mov	r0, r8
   14f38:	mov	r1, r4
   14f3c:	bl	10f04 <strchr@plt>
   14f40:	cmp	r0, #0
   14f44:	beq	152c4 <__assert_fail@plt+0x42e8>
   14f48:	sub	r0, r4, #69	; 0x45
   14f4c:	mov	r1, #1
   14f50:	mov	r3, #0
   14f54:	mov	r2, #1024	; 0x400
   14f58:	cmp	r0, #47	; 0x2f
   14f5c:	str	r1, [sp, #16]
   14f60:	bhi	15098 <__assert_fail@plt+0x40bc>
   14f64:	add	r1, pc, #0
   14f68:	ldr	pc, [r1, r0, lsl #2]
   14f6c:	andeq	r5, r1, ip, lsr #32
   14f70:	muleq	r1, r8, r0
   14f74:	andeq	r5, r1, ip, lsr #32
   14f78:	muleq	r1, r8, r0
   14f7c:	muleq	r1, r8, r0
   14f80:	muleq	r1, r8, r0
   14f84:	andeq	r5, r1, ip, lsr #32
   14f88:	muleq	r1, r8, r0
   14f8c:	andeq	r5, r1, ip, lsr #32
   14f90:	muleq	r1, r8, r0
   14f94:	muleq	r1, r8, r0
   14f98:	andeq	r5, r1, ip, lsr #32
   14f9c:	muleq	r1, r8, r0
   14fa0:	muleq	r1, r8, r0
   14fa4:	muleq	r1, r8, r0
   14fa8:	andeq	r5, r1, ip, lsr #32
   14fac:	muleq	r1, r8, r0
   14fb0:	muleq	r1, r8, r0
   14fb4:	muleq	r1, r8, r0
   14fb8:	muleq	r1, r8, r0
   14fbc:	andeq	r5, r1, ip, lsr #32
   14fc0:	andeq	r5, r1, ip, lsr #32
   14fc4:	muleq	r1, r8, r0
   14fc8:	muleq	r1, r8, r0
   14fcc:	muleq	r1, r8, r0
   14fd0:	muleq	r1, r8, r0
   14fd4:	muleq	r1, r8, r0
   14fd8:	muleq	r1, r8, r0
   14fdc:	muleq	r1, r8, r0
   14fe0:	muleq	r1, r8, r0
   14fe4:	muleq	r1, r8, r0
   14fe8:	muleq	r1, r8, r0
   14fec:	muleq	r1, r8, r0
   14ff0:	muleq	r1, r8, r0
   14ff4:	andeq	r5, r1, ip, lsr #32
   14ff8:	muleq	r1, r8, r0
   14ffc:	muleq	r1, r8, r0
   15000:	muleq	r1, r8, r0
   15004:	andeq	r5, r1, ip, lsr #32
   15008:	muleq	r1, r8, r0
   1500c:	andeq	r5, r1, ip, lsr #32
   15010:	muleq	r1, r8, r0
   15014:	muleq	r1, r8, r0
   15018:	muleq	r1, r8, r0
   1501c:	muleq	r1, r8, r0
   15020:	muleq	r1, r8, r0
   15024:	muleq	r1, r8, r0
   15028:	andeq	r5, r1, ip, lsr #32
   1502c:	mov	r0, r8
   15030:	mov	r1, #48	; 0x30
   15034:	bl	10f04 <strchr@plt>
   15038:	cmp	r0, #0
   1503c:	beq	15090 <__assert_fail@plt+0x40b4>
   15040:	ldr	r1, [sp, #20]
   15044:	ldrb	r0, [r1, #1]
   15048:	cmp	r0, #66	; 0x42
   1504c:	cmpne	r0, #68	; 0x44
   15050:	bne	151cc <__assert_fail@plt+0x41f0>
   15054:	mov	r0, #2
   15058:	mov	r2, #1000	; 0x3e8
   1505c:	mov	r3, #0
   15060:	str	r0, [sp, #16]
   15064:	sub	r0, r4, #66	; 0x42
   15068:	cmp	r0, #53	; 0x35
   1506c:	bls	150a4 <__assert_fail@plt+0x40c8>
   15070:	b	152c4 <__assert_fail@plt+0x42e8>
   15074:	mov	r5, r0
   15078:	cmp	r8, #0
   1507c:	bne	14ed8 <__assert_fail@plt+0x3efc>
   15080:	strd	r6, [r9]
   15084:	mov	r0, r5
   15088:	sub	sp, fp, #28
   1508c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15090:	mov	r3, #0
   15094:	mov	r2, #1024	; 0x400
   15098:	sub	r0, r4, #66	; 0x42
   1509c:	cmp	r0, #53	; 0x35
   150a0:	bhi	152c4 <__assert_fail@plt+0x42e8>
   150a4:	add	r1, pc, #8
   150a8:	str	r3, [sp, #28]
   150ac:	str	r2, [sp, #24]
   150b0:	ldr	pc, [r1, r0, lsl #2]
   150b4:	andeq	r5, r1, ip, lsl r3
   150b8:	andeq	r5, r1, r4, asr #5
   150bc:	andeq	r5, r1, r4, asr #5
   150c0:	andeq	r5, r1, r0, lsr r3
   150c4:	andeq	r5, r1, r4, asr #5
   150c8:	andeq	r5, r1, ip, lsl #3
   150cc:	andeq	r5, r1, r4, asr #5
   150d0:	andeq	r5, r1, r4, asr #5
   150d4:	andeq	r5, r1, r4, asr #5
   150d8:	andeq	r5, r1, r0, lsl #4
   150dc:	andeq	r5, r1, r4, asr #5
   150e0:	andeq	r5, r1, r0, lsr r2
   150e4:	andeq	r5, r1, r4, asr #5
   150e8:	andeq	r5, r1, r4, asr #5
   150ec:	andeq	r5, r1, r4, ror r3
   150f0:	andeq	r5, r1, r4, asr #5
   150f4:	andeq	r5, r1, r4, asr #5
   150f8:	andeq	r5, r1, r4, asr #5
   150fc:	andeq	r5, r1, r0, ror r2
   15100:	andeq	r5, r1, r4, asr #5
   15104:	andeq	r5, r1, r4, asr #5
   15108:	andeq	r5, r1, r4, asr #5
   1510c:	andeq	r5, r1, r4, asr #5
   15110:			; <UNDEFINED> instruction: 0x000153b8
   15114:	ldrdeq	r5, [r1], -r8
   15118:	andeq	r5, r1, r4, asr #5
   1511c:	andeq	r5, r1, r4, asr #5
   15120:	andeq	r5, r1, r4, asr #5
   15124:	andeq	r5, r1, r4, asr #5
   15128:	andeq	r5, r1, r4, asr #5
   1512c:	andeq	r5, r1, r4, asr #5
   15130:	andeq	r5, r1, r4, asr #5
   15134:	strdeq	r5, [r1], -ip
   15138:	andeq	r6, r1, r4, ror r3
   1513c:	andeq	r5, r1, r4, asr #5
   15140:	andeq	r5, r1, r4, asr #5
   15144:	andeq	r5, r1, r4, asr #5
   15148:	andeq	r5, r1, ip, lsl #3
   1514c:	andeq	r5, r1, r4, asr #5
   15150:	andeq	r5, r1, r4, asr #5
   15154:	andeq	r5, r1, r4, asr #5
   15158:	andeq	r5, r1, r0, lsl #4
   1515c:	andeq	r5, r1, r4, asr #5
   15160:	andeq	r5, r1, r0, lsr r2
   15164:	andeq	r5, r1, r4, asr #5
   15168:	andeq	r5, r1, r4, asr #5
   1516c:	andeq	r5, r1, r4, asr #5
   15170:	andeq	r5, r1, r4, asr #5
   15174:	andeq	r5, r1, r4, asr #5
   15178:	andeq	r5, r1, r4, asr #5
   1517c:	andeq	r5, r1, r0, ror r2
   15180:	andeq	r5, r1, r4, asr #5
   15184:	andeq	r5, r1, r4, asr #5
   15188:	andeq	r5, r1, r0, lsl r4
   1518c:	cmn	r7, #1
   15190:	str	r9, [sp, #12]
   15194:	ble	15424 <__assert_fail@plt+0x4448>
   15198:	ldr	r3, [sp, #28]
   1519c:	mvn	r0, #0
   151a0:	mvn	r1, #-2147483648	; 0x80000000
   151a4:	mvn	r8, #0
   151a8:	mvn	r9, #-2147483648	; 0x80000000
   151ac:	bl	16d84 <__assert_fail@plt+0x5da8>
   151b0:	ldr	r2, [sp, #24]
   151b4:	ldr	r3, [sp, #28]
   151b8:	subs	r0, r0, r6
   151bc:	mov	r4, #1
   151c0:	sbcs	r0, r1, r7
   151c4:	bge	15464 <__assert_fail@plt+0x4488>
   151c8:	b	1547c <__assert_fail@plt+0x44a0>
   151cc:	cmp	r0, #105	; 0x69
   151d0:	mov	r3, #0
   151d4:	bne	152b4 <__assert_fail@plt+0x42d8>
   151d8:	ldrb	r0, [r1, #2]
   151dc:	mov	r1, #1
   151e0:	mov	r2, #1024	; 0x400
   151e4:	cmp	r0, #66	; 0x42
   151e8:	movweq	r1, #3
   151ec:	str	r1, [sp, #16]
   151f0:	sub	r0, r4, #66	; 0x42
   151f4:	cmp	r0, #53	; 0x35
   151f8:	bls	150a4 <__assert_fail@plt+0x40c8>
   151fc:	b	152c4 <__assert_fail@plt+0x42e8>
   15200:	cmn	r7, #1
   15204:	ble	154b8 <__assert_fail@plt+0x44dc>
   15208:	ldr	r3, [sp, #28]
   1520c:	mvn	r0, #0
   15210:	mvn	r1, #-2147483648	; 0x80000000
   15214:	bl	16d84 <__assert_fail@plt+0x5da8>
   15218:	ldr	r2, [sp, #24]
   1521c:	ldr	r3, [sp, #28]
   15220:	subs	r0, r0, r6
   15224:	sbcs	r0, r1, r7
   15228:	bge	154ec <__assert_fail@plt+0x4510>
   1522c:	b	15bfc <__assert_fail@plt+0x4c20>
   15230:	cmn	r7, #1
   15234:	str	r9, [sp, #12]
   15238:	ble	15500 <__assert_fail@plt+0x4524>
   1523c:	ldr	r3, [sp, #28]
   15240:	mvn	r0, #0
   15244:	mvn	r1, #-2147483648	; 0x80000000
   15248:	mvn	r8, #0
   1524c:	mvn	r9, #-2147483648	; 0x80000000
   15250:	bl	16d84 <__assert_fail@plt+0x5da8>
   15254:	ldr	r2, [sp, #24]
   15258:	ldr	r3, [sp, #28]
   1525c:	subs	r0, r0, r6
   15260:	mov	r4, #1
   15264:	sbcs	r0, r1, r7
   15268:	bge	15540 <__assert_fail@plt+0x4564>
   1526c:	b	15558 <__assert_fail@plt+0x457c>
   15270:	cmn	r7, #1
   15274:	str	r9, [sp, #12]
   15278:	ble	15590 <__assert_fail@plt+0x45b4>
   1527c:	ldr	r3, [sp, #28]
   15280:	mvn	r0, #0
   15284:	mvn	r1, #-2147483648	; 0x80000000
   15288:	mvn	r9, #-2147483648	; 0x80000000
   1528c:	str	r0, [sp, #8]
   15290:	mvn	r0, #0
   15294:	bl	16d84 <__assert_fail@plt+0x5da8>
   15298:	ldr	r2, [sp, #24]
   1529c:	ldr	r3, [sp, #28]
   152a0:	subs	r0, r0, r6
   152a4:	mov	r4, #1
   152a8:	sbcs	r0, r1, r7
   152ac:	bge	155d4 <__assert_fail@plt+0x45f8>
   152b0:	b	155f0 <__assert_fail@plt+0x4614>
   152b4:	mov	r2, #1024	; 0x400
   152b8:	sub	r0, r4, #66	; 0x42
   152bc:	cmp	r0, #53	; 0x35
   152c0:	bls	150a4 <__assert_fail@plt+0x40c8>
   152c4:	orr	r5, r5, #2
   152c8:	strd	r6, [r9]
   152cc:	mov	r0, r5
   152d0:	sub	sp, fp, #28
   152d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152d8:	cmp	r7, #0
   152dc:	str	r9, [sp, #12]
   152e0:	bmi	158d8 <__assert_fail@plt+0x48fc>
   152e4:	ldr	r3, [sp, #28]
   152e8:	mvn	r0, #0
   152ec:	mvn	r1, #-2147483648	; 0x80000000
   152f0:	mvn	r9, #-2147483648	; 0x80000000
   152f4:	str	r0, [sp, #8]
   152f8:	mvn	r0, #0
   152fc:	bl	16d84 <__assert_fail@plt+0x5da8>
   15300:	ldr	r2, [sp, #24]
   15304:	ldr	r3, [sp, #28]
   15308:	subs	r0, r0, r6
   1530c:	mov	r4, #1
   15310:	sbcs	r0, r1, r7
   15314:	bge	1591c <__assert_fail@plt+0x4940>
   15318:	b	15938 <__assert_fail@plt+0x495c>
   1531c:	cmn	r7, #1
   15320:	ble	15974 <__assert_fail@plt+0x4998>
   15324:	cmp	r7, #2097152	; 0x200000
   15328:	blt	159a4 <__assert_fail@plt+0x49c8>
   1532c:	b	15bfc <__assert_fail@plt+0x4c20>
   15330:	cmp	r7, #0
   15334:	str	r9, [sp, #12]
   15338:	bmi	159b4 <__assert_fail@plt+0x49d8>
   1533c:	ldr	r3, [sp, #28]
   15340:	mvn	r0, #0
   15344:	mvn	r1, #-2147483648	; 0x80000000
   15348:	mvn	r9, #-2147483648	; 0x80000000
   1534c:	str	r0, [sp, #8]
   15350:	mvn	r0, #0
   15354:	bl	16d84 <__assert_fail@plt+0x5da8>
   15358:	ldr	r2, [sp, #24]
   1535c:	ldr	r3, [sp, #28]
   15360:	subs	r0, r0, r6
   15364:	mov	r4, #1
   15368:	sbcs	r0, r1, r7
   1536c:	bge	159f8 <__assert_fail@plt+0x4a1c>
   15370:	b	15a14 <__assert_fail@plt+0x4a38>
   15374:	cmp	r7, #0
   15378:	str	r9, [sp, #12]
   1537c:	bmi	15a50 <__assert_fail@plt+0x4a74>
   15380:	ldr	r3, [sp, #28]
   15384:	mvn	r0, #0
   15388:	mvn	r1, #-2147483648	; 0x80000000
   1538c:	mvn	r8, #-2147483648	; 0x80000000
   15390:	str	r0, [sp, #8]
   15394:	mvn	r0, #0
   15398:	bl	16d84 <__assert_fail@plt+0x5da8>
   1539c:	ldr	r2, [sp, #24]
   153a0:	ldr	r3, [sp, #28]
   153a4:	subs	r0, r0, r6
   153a8:	mov	r4, #1
   153ac:	sbcs	r0, r1, r7
   153b0:	bge	15a94 <__assert_fail@plt+0x4ab8>
   153b4:	b	15ab0 <__assert_fail@plt+0x4ad4>
   153b8:	cmp	r7, #0
   153bc:	str	r9, [sp, #12]
   153c0:	bmi	15aec <__assert_fail@plt+0x4b10>
   153c4:	ldr	r3, [sp, #28]
   153c8:	mvn	r0, #0
   153cc:	mvn	r1, #-2147483648	; 0x80000000
   153d0:	mvn	r9, #-2147483648	; 0x80000000
   153d4:	str	r0, [sp, #8]
   153d8:	mvn	r0, #0
   153dc:	bl	16d84 <__assert_fail@plt+0x5da8>
   153e0:	ldr	r2, [sp, #24]
   153e4:	ldr	r3, [sp, #28]
   153e8:	subs	r0, r0, r6
   153ec:	mov	r4, #1
   153f0:	sbcs	r0, r1, r7
   153f4:	bge	15b30 <__assert_fail@plt+0x4b54>
   153f8:	b	15b4c <__assert_fail@plt+0x4b70>
   153fc:	cmn	r7, #1
   15400:	ble	15b8c <__assert_fail@plt+0x4bb0>
   15404:	cmp	r7, #4194304	; 0x400000
   15408:	blt	15bbc <__assert_fail@plt+0x4be0>
   1540c:	b	15bfc <__assert_fail@plt+0x4c20>
   15410:	cmn	r7, #1
   15414:	ble	15bcc <__assert_fail@plt+0x4bf0>
   15418:	cmp	r7, #1073741824	; 0x40000000
   1541c:	bge	15bfc <__assert_fail@plt+0x4c20>
   15420:	b	15c1c <__assert_fail@plt+0x4c40>
   15424:	and	r0, r6, r7
   15428:	cmn	r0, #1
   1542c:	beq	15464 <__assert_fail@plt+0x4488>
   15430:	mov	r0, #0
   15434:	mov	r1, #-2147483648	; 0x80000000
   15438:	mov	r2, r6
   1543c:	mov	r3, r7
   15440:	mov	r8, #0
   15444:	mov	r9, #-2147483648	; 0x80000000
   15448:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   1544c:	ldr	r2, [sp, #24]
   15450:	ldr	r3, [sp, #28]
   15454:	mov	r4, #1
   15458:	subs	r0, r0, r2
   1545c:	sbcs	r0, r1, r3
   15460:	blt	1562c <__assert_fail@plt+0x4650>
   15464:	umull	r8, r0, r6, r2
   15468:	mov	r4, #0
   1546c:	mla	r0, r6, r3, r0
   15470:	mla	r9, r7, r2, r0
   15474:	cmp	r9, #0
   15478:	bmi	1562c <__assert_fail@plt+0x4650>
   1547c:	ldr	r3, [sp, #28]
   15480:	mvn	r0, #-2147483648	; 0x80000000
   15484:	mvn	r1, #-2147483648	; 0x80000000
   15488:	mov	r6, r4
   1548c:	mvn	r4, #0
   15490:	str	r0, [sp, #8]
   15494:	mvn	r0, #0
   15498:	bl	16d84 <__assert_fail@plt+0x5da8>
   1549c:	ldr	r2, [sp, #24]
   154a0:	ldr	r3, [sp, #28]
   154a4:	subs	r0, r0, r8
   154a8:	mov	r7, #1
   154ac:	sbcs	r0, r1, r9
   154b0:	bge	15668 <__assert_fail@plt+0x468c>
   154b4:	b	15684 <__assert_fail@plt+0x46a8>
   154b8:	and	r0, r6, r7
   154bc:	cmn	r0, #1
   154c0:	beq	154ec <__assert_fail@plt+0x4510>
   154c4:	mov	r0, #0
   154c8:	mov	r1, #-2147483648	; 0x80000000
   154cc:	mov	r2, r6
   154d0:	mov	r3, r7
   154d4:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   154d8:	ldr	r2, [sp, #24]
   154dc:	ldr	r3, [sp, #28]
   154e0:	subs	r0, r0, r2
   154e4:	sbcs	r0, r1, r3
   154e8:	blt	15bfc <__assert_fail@plt+0x4c20>
   154ec:	umull	r0, r1, r6, r2
   154f0:	mla	r1, r6, r3, r1
   154f4:	mla	r7, r7, r2, r1
   154f8:	mov	r6, r0
   154fc:	b	16374 <__assert_fail@plt+0x5398>
   15500:	and	r0, r6, r7
   15504:	cmn	r0, #1
   15508:	beq	15540 <__assert_fail@plt+0x4564>
   1550c:	mov	r0, #0
   15510:	mov	r1, #-2147483648	; 0x80000000
   15514:	mov	r2, r6
   15518:	mov	r3, r7
   1551c:	mov	r8, #0
   15520:	mov	r9, #-2147483648	; 0x80000000
   15524:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15528:	ldr	r2, [sp, #24]
   1552c:	ldr	r3, [sp, #28]
   15530:	mov	r4, #1
   15534:	subs	r0, r0, r2
   15538:	sbcs	r0, r1, r3
   1553c:	blt	15718 <__assert_fail@plt+0x473c>
   15540:	umull	r8, r0, r6, r2
   15544:	mov	r4, #0
   15548:	mla	r0, r6, r3, r0
   1554c:	mla	r9, r7, r2, r0
   15550:	cmp	r9, #0
   15554:	bmi	15718 <__assert_fail@plt+0x473c>
   15558:	ldr	r3, [sp, #28]
   1555c:	mvn	r0, #0
   15560:	mvn	r1, #-2147483648	; 0x80000000
   15564:	str	r4, [sp, #8]
   15568:	mvn	r6, #0
   1556c:	mvn	r7, #-2147483648	; 0x80000000
   15570:	bl	16d84 <__assert_fail@plt+0x5da8>
   15574:	ldr	r4, [sp, #24]
   15578:	ldr	r3, [sp, #28]
   1557c:	subs	r0, r0, r8
   15580:	mov	r2, #1
   15584:	sbcs	r0, r1, r9
   15588:	bge	15750 <__assert_fail@plt+0x4774>
   1558c:	b	15888 <__assert_fail@plt+0x48ac>
   15590:	and	r0, r6, r7
   15594:	cmn	r0, #1
   15598:	beq	155d4 <__assert_fail@plt+0x45f8>
   1559c:	mov	r0, #0
   155a0:	mov	r1, #-2147483648	; 0x80000000
   155a4:	mov	r2, r6
   155a8:	mov	r3, r7
   155ac:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   155b0:	ldr	r2, [sp, #24]
   155b4:	ldr	r3, [sp, #28]
   155b8:	mov	r4, #1
   155bc:	mov	r9, #-2147483648	; 0x80000000
   155c0:	subs	r0, r0, r2
   155c4:	sbcs	r0, r1, r3
   155c8:	mov	r0, #0
   155cc:	str	r0, [sp, #8]
   155d0:	blt	15764 <__assert_fail@plt+0x4788>
   155d4:	umull	r1, r0, r6, r2
   155d8:	mov	r4, #0
   155dc:	mla	r0, r6, r3, r0
   155e0:	mla	r9, r7, r2, r0
   155e4:	str	r1, [sp, #8]
   155e8:	cmp	r9, #0
   155ec:	bmi	15764 <__assert_fail@plt+0x4788>
   155f0:	ldr	r3, [sp, #28]
   155f4:	mvn	r0, #0
   155f8:	mvn	r1, #-2147483648	; 0x80000000
   155fc:	str	r4, [sp, #4]
   15600:	mvn	r6, #0
   15604:	mvn	r8, #-2147483648	; 0x80000000
   15608:	bl	16d84 <__assert_fail@plt+0x5da8>
   1560c:	ldr	r4, [sp, #8]
   15610:	ldr	r2, [sp, #24]
   15614:	ldr	r3, [sp, #28]
   15618:	mov	r7, #1
   1561c:	subs	r0, r0, r4
   15620:	sbcs	r0, r1, r9
   15624:	bge	157a0 <__assert_fail@plt+0x47c4>
   15628:	b	157b8 <__assert_fail@plt+0x47dc>
   1562c:	mov	r0, #-2147483648	; 0x80000000
   15630:	mov	r1, #-2147483648	; 0x80000000
   15634:	mov	r2, r8
   15638:	mov	r3, r9
   1563c:	mov	r6, r4
   15640:	mov	r4, #0
   15644:	str	r0, [sp, #8]
   15648:	mov	r0, #0
   1564c:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15650:	ldr	r2, [sp, #24]
   15654:	ldr	r3, [sp, #28]
   15658:	mov	r7, #1
   1565c:	subs	r0, r0, r2
   15660:	sbcs	r0, r1, r3
   15664:	blt	156d8 <__assert_fail@plt+0x46fc>
   15668:	umull	r4, r0, r8, r2
   1566c:	mov	r7, r6
   15670:	mla	r0, r8, r3, r0
   15674:	mla	r0, r9, r2, r0
   15678:	cmp	r0, #0
   1567c:	str	r0, [sp, #8]
   15680:	bmi	156d8 <__assert_fail@plt+0x46fc>
   15684:	ldr	r3, [sp, #28]
   15688:	mvn	r0, #0
   1568c:	mvn	r1, #-2147483648	; 0x80000000
   15690:	mov	r9, r7
   15694:	mvn	r6, #0
   15698:	mvn	r7, #-2147483648	; 0x80000000
   1569c:	bl	16d84 <__assert_fail@plt+0x5da8>
   156a0:	ldr	r8, [sp, #8]
   156a4:	ldr	r3, [sp, #24]
   156a8:	ldr	ip, [sp, #28]
   156ac:	subs	r0, r0, r4
   156b0:	mov	r2, #1
   156b4:	sbcs	r0, r1, r8
   156b8:	blt	156cc <__assert_fail@plt+0x46f0>
   156bc:	umull	r6, r0, r4, r3
   156c0:	mov	r2, #0
   156c4:	mla	r0, r4, ip, r0
   156c8:	mla	r7, r8, r3, r0
   156cc:	orr	r3, r2, r9
   156d0:	ldr	r9, [sp, #12]
   156d4:	b	16374 <__assert_fail@plt+0x5398>
   156d8:	ldr	r8, [sp, #8]
   156dc:	mov	r0, #0
   156e0:	mov	r1, #-2147483648	; 0x80000000
   156e4:	mov	r2, r4
   156e8:	mov	r9, r7
   156ec:	mov	r6, #0
   156f0:	mov	r7, #-2147483648	; 0x80000000
   156f4:	mov	r3, r8
   156f8:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   156fc:	ldr	r3, [sp, #24]
   15700:	ldr	ip, [sp, #28]
   15704:	mov	r2, #1
   15708:	subs	r0, r0, r3
   1570c:	sbcs	r0, r1, ip
   15710:	bge	156bc <__assert_fail@plt+0x46e0>
   15714:	b	156cc <__assert_fail@plt+0x46f0>
   15718:	mov	r0, #0
   1571c:	mov	r1, #-2147483648	; 0x80000000
   15720:	mov	r2, r8
   15724:	mov	r3, r9
   15728:	str	r4, [sp, #8]
   1572c:	mov	r6, #0
   15730:	mov	r7, #-2147483648	; 0x80000000
   15734:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15738:	ldr	r4, [sp, #24]
   1573c:	ldr	r3, [sp, #28]
   15740:	mov	r2, #1
   15744:	subs	r0, r0, r4
   15748:	sbcs	r0, r1, r3
   1574c:	blt	15888 <__assert_fail@plt+0x48ac>
   15750:	umull	r6, r0, r8, r4
   15754:	mov	r2, #0
   15758:	mla	r0, r8, r3, r0
   1575c:	mla	r7, r9, r4, r0
   15760:	b	15888 <__assert_fail@plt+0x48ac>
   15764:	str	r4, [sp, #4]
   15768:	ldr	r4, [sp, #8]
   1576c:	mov	r0, #0
   15770:	mov	r1, #-2147483648	; 0x80000000
   15774:	mov	r3, r9
   15778:	mov	r2, r4
   1577c:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15780:	ldr	r2, [sp, #24]
   15784:	ldr	r3, [sp, #28]
   15788:	mov	r7, #1
   1578c:	mov	r6, #0
   15790:	mov	r8, #-2147483648	; 0x80000000
   15794:	subs	r0, r0, r2
   15798:	sbcs	r0, r1, r3
   1579c:	blt	157f0 <__assert_fail@plt+0x4814>
   157a0:	umull	r6, r0, r4, r2
   157a4:	ldr	r7, [sp, #4]
   157a8:	mla	r0, r4, r3, r0
   157ac:	mla	r8, r9, r2, r0
   157b0:	cmp	r8, #0
   157b4:	bmi	157f0 <__assert_fail@plt+0x4814>
   157b8:	ldr	r3, [sp, #28]
   157bc:	mvn	r0, #0
   157c0:	mvn	r1, #-2147483648	; 0x80000000
   157c4:	str	r7, [sp, #8]
   157c8:	mvn	r4, #0
   157cc:	mvn	r9, #-2147483648	; 0x80000000
   157d0:	bl	16d84 <__assert_fail@plt+0x5da8>
   157d4:	ldr	r2, [sp, #24]
   157d8:	ldr	r3, [sp, #28]
   157dc:	subs	r0, r0, r6
   157e0:	mov	r7, #1
   157e4:	sbcs	r0, r1, r8
   157e8:	bge	15828 <__assert_fail@plt+0x484c>
   157ec:	b	15840 <__assert_fail@plt+0x4864>
   157f0:	mov	r0, #0
   157f4:	mov	r1, #-2147483648	; 0x80000000
   157f8:	mov	r2, r6
   157fc:	mov	r3, r8
   15800:	str	r7, [sp, #8]
   15804:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15808:	ldr	r2, [sp, #24]
   1580c:	ldr	r3, [sp, #28]
   15810:	mov	r7, #1
   15814:	mov	r4, #0
   15818:	mov	r9, #-2147483648	; 0x80000000
   1581c:	subs	r0, r0, r2
   15820:	sbcs	r0, r1, r3
   15824:	blt	15898 <__assert_fail@plt+0x48bc>
   15828:	umull	r4, r0, r6, r2
   1582c:	ldr	r7, [sp, #8]
   15830:	mla	r0, r6, r3, r0
   15834:	mla	r9, r8, r2, r0
   15838:	cmp	r9, #0
   1583c:	bmi	15898 <__assert_fail@plt+0x48bc>
   15840:	ldr	r3, [sp, #28]
   15844:	mvn	r0, #0
   15848:	mvn	r1, #-2147483648	; 0x80000000
   1584c:	str	r7, [sp, #8]
   15850:	mvn	r6, #0
   15854:	mvn	r7, #-2147483648	; 0x80000000
   15858:	bl	16d84 <__assert_fail@plt+0x5da8>
   1585c:	ldr	r3, [sp, #24]
   15860:	ldr	ip, [sp, #28]
   15864:	subs	r0, r0, r4
   15868:	mov	r2, #1
   1586c:	mov	r8, r4
   15870:	sbcs	r0, r1, r9
   15874:	blt	15888 <__assert_fail@plt+0x48ac>
   15878:	umull	r6, r0, r8, r3
   1587c:	mov	r2, #0
   15880:	mla	r0, r8, ip, r0
   15884:	mla	r7, r9, r3, r0
   15888:	ldr	r0, [sp, #8]
   1588c:	ldr	r9, [sp, #12]
   15890:	orr	r3, r2, r0
   15894:	b	16374 <__assert_fail@plt+0x5398>
   15898:	mov	r0, #0
   1589c:	mov	r1, #-2147483648	; 0x80000000
   158a0:	mov	r2, r4
   158a4:	mov	r3, r9
   158a8:	str	r7, [sp, #8]
   158ac:	mov	r8, r4
   158b0:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   158b4:	ldr	r3, [sp, #24]
   158b8:	ldr	ip, [sp, #28]
   158bc:	mov	r2, #1
   158c0:	mov	r6, #0
   158c4:	mov	r7, #-2147483648	; 0x80000000
   158c8:	subs	r0, r0, r3
   158cc:	sbcs	r0, r1, ip
   158d0:	bge	15878 <__assert_fail@plt+0x489c>
   158d4:	b	15888 <__assert_fail@plt+0x48ac>
   158d8:	and	r0, r6, r7
   158dc:	cmn	r0, #1
   158e0:	beq	1591c <__assert_fail@plt+0x4940>
   158e4:	mov	r0, #0
   158e8:	mov	r1, #-2147483648	; 0x80000000
   158ec:	mov	r2, r6
   158f0:	mov	r3, r7
   158f4:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   158f8:	ldr	r2, [sp, #24]
   158fc:	ldr	r3, [sp, #28]
   15900:	mov	r4, #1
   15904:	mov	r9, #-2147483648	; 0x80000000
   15908:	subs	r0, r0, r2
   1590c:	sbcs	r0, r1, r3
   15910:	mov	r0, #0
   15914:	str	r0, [sp, #8]
   15918:	blt	15c2c <__assert_fail@plt+0x4c50>
   1591c:	umull	r1, r0, r6, r2
   15920:	mov	r4, #0
   15924:	mla	r0, r6, r3, r0
   15928:	mla	r9, r7, r2, r0
   1592c:	str	r1, [sp, #8]
   15930:	cmp	r9, #0
   15934:	bmi	15c2c <__assert_fail@plt+0x4c50>
   15938:	ldr	r3, [sp, #28]
   1593c:	mvn	r0, #0
   15940:	mvn	r1, #-2147483648	; 0x80000000
   15944:	str	r4, [sp, #4]
   15948:	mvn	r8, #0
   1594c:	mvn	r4, #-2147483648	; 0x80000000
   15950:	bl	16d84 <__assert_fail@plt+0x5da8>
   15954:	ldr	r6, [sp, #8]
   15958:	ldr	r2, [sp, #24]
   1595c:	ldr	r3, [sp, #28]
   15960:	mov	r7, #1
   15964:	subs	r0, r0, r6
   15968:	sbcs	r0, r1, r9
   1596c:	bge	15c68 <__assert_fail@plt+0x4c8c>
   15970:	b	15c80 <__assert_fail@plt+0x4ca4>
   15974:	and	r0, r6, r7
   15978:	cmn	r0, #1
   1597c:	beq	159a4 <__assert_fail@plt+0x49c8>
   15980:	mov	r0, #0
   15984:	mov	r1, #-2147483648	; 0x80000000
   15988:	mov	r2, r6
   1598c:	mov	r3, r7
   15990:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15994:	ldr	r3, [sp, #28]
   15998:	subs	r0, r0, #1024	; 0x400
   1599c:	sbcs	r0, r1, #0
   159a0:	blt	15bfc <__assert_fail@plt+0x4c20>
   159a4:	lsl	r0, r7, #10
   159a8:	orr	r7, r0, r6, lsr #22
   159ac:	lsl	r6, r6, #10
   159b0:	b	16374 <__assert_fail@plt+0x5398>
   159b4:	and	r0, r6, r7
   159b8:	cmn	r0, #1
   159bc:	beq	159f8 <__assert_fail@plt+0x4a1c>
   159c0:	mov	r0, #0
   159c4:	mov	r1, #-2147483648	; 0x80000000
   159c8:	mov	r2, r6
   159cc:	mov	r3, r7
   159d0:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   159d4:	ldr	r2, [sp, #24]
   159d8:	ldr	r3, [sp, #28]
   159dc:	mov	r4, #1
   159e0:	mov	r9, #-2147483648	; 0x80000000
   159e4:	subs	r0, r0, r2
   159e8:	sbcs	r0, r1, r3
   159ec:	mov	r0, #0
   159f0:	str	r0, [sp, #8]
   159f4:	blt	15f44 <__assert_fail@plt+0x4f68>
   159f8:	umull	r1, r0, r6, r2
   159fc:	mov	r4, #0
   15a00:	mla	r0, r6, r3, r0
   15a04:	mla	r9, r7, r2, r0
   15a08:	str	r1, [sp, #8]
   15a0c:	cmp	r9, #0
   15a10:	bmi	15f44 <__assert_fail@plt+0x4f68>
   15a14:	ldr	r3, [sp, #28]
   15a18:	mvn	r0, #0
   15a1c:	mvn	r1, #-2147483648	; 0x80000000
   15a20:	str	r4, [sp, #4]
   15a24:	mvn	r8, #0
   15a28:	mvn	r4, #-2147483648	; 0x80000000
   15a2c:	bl	16d84 <__assert_fail@plt+0x5da8>
   15a30:	ldr	r6, [sp, #8]
   15a34:	ldr	r2, [sp, #24]
   15a38:	ldr	r3, [sp, #28]
   15a3c:	mov	r7, #1
   15a40:	subs	r0, r0, r6
   15a44:	sbcs	r0, r1, r9
   15a48:	bge	15f80 <__assert_fail@plt+0x4fa4>
   15a4c:	b	15f98 <__assert_fail@plt+0x4fbc>
   15a50:	and	r0, r6, r7
   15a54:	cmn	r0, #1
   15a58:	beq	15a94 <__assert_fail@plt+0x4ab8>
   15a5c:	mov	r0, #0
   15a60:	mov	r1, #-2147483648	; 0x80000000
   15a64:	mov	r2, r6
   15a68:	mov	r3, r7
   15a6c:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15a70:	ldr	r2, [sp, #24]
   15a74:	ldr	r3, [sp, #28]
   15a78:	mov	r4, #1
   15a7c:	mov	r8, #-2147483648	; 0x80000000
   15a80:	subs	r0, r0, r2
   15a84:	sbcs	r0, r1, r3
   15a88:	mov	r0, #0
   15a8c:	str	r0, [sp, #8]
   15a90:	blt	161c0 <__assert_fail@plt+0x51e4>
   15a94:	umull	r1, r0, r6, r2
   15a98:	mov	r4, #0
   15a9c:	mla	r0, r6, r3, r0
   15aa0:	mla	r8, r7, r2, r0
   15aa4:	str	r1, [sp, #8]
   15aa8:	cmp	r8, #0
   15aac:	bmi	161c0 <__assert_fail@plt+0x51e4>
   15ab0:	ldr	r3, [sp, #28]
   15ab4:	mvn	r0, #0
   15ab8:	mvn	r1, #-2147483648	; 0x80000000
   15abc:	str	r4, [sp, #4]
   15ac0:	mvn	r9, #0
   15ac4:	mvn	r4, #-2147483648	; 0x80000000
   15ac8:	bl	16d84 <__assert_fail@plt+0x5da8>
   15acc:	ldr	r6, [sp, #8]
   15ad0:	ldr	r2, [sp, #24]
   15ad4:	ldr	r3, [sp, #28]
   15ad8:	mov	r7, #1
   15adc:	subs	r0, r0, r6
   15ae0:	sbcs	r0, r1, r8
   15ae4:	bge	161fc <__assert_fail@plt+0x5220>
   15ae8:	b	16214 <__assert_fail@plt+0x5238>
   15aec:	and	r0, r6, r7
   15af0:	cmn	r0, #1
   15af4:	beq	15b30 <__assert_fail@plt+0x4b54>
   15af8:	mov	r0, #0
   15afc:	mov	r1, #-2147483648	; 0x80000000
   15b00:	mov	r2, r6
   15b04:	mov	r3, r7
   15b08:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15b0c:	ldr	r2, [sp, #24]
   15b10:	ldr	r3, [sp, #28]
   15b14:	mov	r4, #1
   15b18:	mov	r9, #-2147483648	; 0x80000000
   15b1c:	subs	r0, r0, r2
   15b20:	sbcs	r0, r1, r3
   15b24:	mov	r0, #0
   15b28:	str	r0, [sp, #8]
   15b2c:	blt	163dc <__assert_fail@plt+0x5400>
   15b30:	umull	r1, r0, r6, r2
   15b34:	mov	r4, #0
   15b38:	mla	r0, r6, r3, r0
   15b3c:	mla	r9, r7, r2, r0
   15b40:	str	r1, [sp, #8]
   15b44:	cmp	r9, #0
   15b48:	bmi	163dc <__assert_fail@plt+0x5400>
   15b4c:	ldr	r3, [sp, #28]
   15b50:	mvn	r0, #0
   15b54:	mvn	r1, #-2147483648	; 0x80000000
   15b58:	str	r4, [sp]
   15b5c:	mvn	r8, #-2147483648	; 0x80000000
   15b60:	str	r0, [sp, #4]
   15b64:	mvn	r0, #0
   15b68:	bl	16d84 <__assert_fail@plt+0x5da8>
   15b6c:	ldr	r6, [sp, #8]
   15b70:	ldr	r2, [sp, #24]
   15b74:	ldr	r3, [sp, #28]
   15b78:	mov	r7, #1
   15b7c:	subs	r0, r0, r6
   15b80:	sbcs	r0, r1, r9
   15b84:	bge	1641c <__assert_fail@plt+0x5440>
   15b88:	b	16438 <__assert_fail@plt+0x545c>
   15b8c:	and	r0, r6, r7
   15b90:	cmn	r0, #1
   15b94:	beq	15bbc <__assert_fail@plt+0x4be0>
   15b98:	mov	r0, #0
   15b9c:	mov	r1, #-2147483648	; 0x80000000
   15ba0:	mov	r2, r6
   15ba4:	mov	r3, r7
   15ba8:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15bac:	ldr	r3, [sp, #28]
   15bb0:	subs	r0, r0, #512	; 0x200
   15bb4:	sbcs	r0, r1, #0
   15bb8:	blt	15bfc <__assert_fail@plt+0x4c20>
   15bbc:	lsl	r0, r7, #9
   15bc0:	orr	r7, r0, r6, lsr #23
   15bc4:	lsl	r6, r6, #9
   15bc8:	b	16374 <__assert_fail@plt+0x5398>
   15bcc:	and	r0, r6, r7
   15bd0:	cmn	r0, #1
   15bd4:	beq	15c1c <__assert_fail@plt+0x4c40>
   15bd8:	mov	r0, #0
   15bdc:	mov	r1, #-2147483648	; 0x80000000
   15be0:	mov	r2, r6
   15be4:	mov	r3, r7
   15be8:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15bec:	ldr	r3, [sp, #28]
   15bf0:	subs	r0, r0, #2
   15bf4:	sbcs	r0, r1, #0
   15bf8:	bge	15c1c <__assert_fail@plt+0x4c40>
   15bfc:	cmp	r7, #0
   15c00:	mvn	r0, #-2147483648	; 0x80000000
   15c04:	mvn	r6, #0
   15c08:	mov	r3, #1
   15c0c:	movmi	r0, #-2147483648	; 0x80000000
   15c10:	movwmi	r6, #0
   15c14:	mov	r7, r0
   15c18:	b	16374 <__assert_fail@plt+0x5398>
   15c1c:	lsl	r0, r7, #1
   15c20:	orr	r7, r0, r6, lsr #31
   15c24:	lsl	r6, r6, #1
   15c28:	b	16374 <__assert_fail@plt+0x5398>
   15c2c:	ldr	r6, [sp, #8]
   15c30:	mov	r0, #0
   15c34:	mov	r1, #-2147483648	; 0x80000000
   15c38:	mov	r3, r9
   15c3c:	str	r4, [sp, #4]
   15c40:	mov	r2, r6
   15c44:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15c48:	ldr	r2, [sp, #24]
   15c4c:	ldr	r3, [sp, #28]
   15c50:	mov	r7, #1
   15c54:	mov	r8, #0
   15c58:	mov	r4, #-2147483648	; 0x80000000
   15c5c:	subs	r0, r0, r2
   15c60:	sbcs	r0, r1, r3
   15c64:	blt	15cb8 <__assert_fail@plt+0x4cdc>
   15c68:	umull	r8, r0, r6, r2
   15c6c:	ldr	r7, [sp, #4]
   15c70:	mla	r0, r6, r3, r0
   15c74:	mla	r4, r9, r2, r0
   15c78:	cmp	r4, #0
   15c7c:	bmi	15cb8 <__assert_fail@plt+0x4cdc>
   15c80:	ldr	r3, [sp, #28]
   15c84:	mvn	r0, #0
   15c88:	mvn	r1, #-2147483648	; 0x80000000
   15c8c:	str	r7, [sp, #8]
   15c90:	mvn	r7, #0
   15c94:	mvn	r9, #-2147483648	; 0x80000000
   15c98:	bl	16d84 <__assert_fail@plt+0x5da8>
   15c9c:	ldr	r2, [sp, #24]
   15ca0:	ldr	r3, [sp, #28]
   15ca4:	subs	r0, r0, r8
   15ca8:	mov	r6, #1
   15cac:	sbcs	r0, r1, r4
   15cb0:	bge	15cf0 <__assert_fail@plt+0x4d14>
   15cb4:	b	15d08 <__assert_fail@plt+0x4d2c>
   15cb8:	mov	r0, #0
   15cbc:	mov	r1, #-2147483648	; 0x80000000
   15cc0:	mov	r2, r8
   15cc4:	mov	r3, r4
   15cc8:	str	r7, [sp, #8]
   15ccc:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15cd0:	ldr	r2, [sp, #24]
   15cd4:	ldr	r3, [sp, #28]
   15cd8:	mov	r6, #1
   15cdc:	mov	r7, #0
   15ce0:	mov	r9, #-2147483648	; 0x80000000
   15ce4:	subs	r0, r0, r2
   15ce8:	sbcs	r0, r1, r3
   15cec:	blt	15d48 <__assert_fail@plt+0x4d6c>
   15cf0:	umull	r7, r0, r8, r2
   15cf4:	ldr	r6, [sp, #8]
   15cf8:	mla	r0, r8, r3, r0
   15cfc:	mla	r9, r4, r2, r0
   15d00:	cmp	r9, #0
   15d04:	bmi	15d48 <__assert_fail@plt+0x4d6c>
   15d08:	ldr	r3, [sp, #28]
   15d0c:	mvn	r0, #0
   15d10:	mvn	r1, #-2147483648	; 0x80000000
   15d14:	str	r6, [sp, #8]
   15d18:	mvn	r8, #0
   15d1c:	mvn	r4, #-2147483648	; 0x80000000
   15d20:	bl	16d84 <__assert_fail@plt+0x5da8>
   15d24:	ldr	r2, [sp, #24]
   15d28:	ldr	r3, [sp, #28]
   15d2c:	subs	r0, r0, r7
   15d30:	sbcs	r0, r1, r9
   15d34:	bge	15d8c <__assert_fail@plt+0x4db0>
   15d38:	mov	r0, #1
   15d3c:	mov	r6, #0
   15d40:	str	r0, [sp, #8]
   15d44:	b	15da4 <__assert_fail@plt+0x4dc8>
   15d48:	mov	r0, #0
   15d4c:	mov	r1, #-2147483648	; 0x80000000
   15d50:	mov	r2, r7
   15d54:	mov	r3, r9
   15d58:	str	r6, [sp, #8]
   15d5c:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15d60:	ldr	r2, [sp, #24]
   15d64:	ldr	r3, [sp, #28]
   15d68:	subs	r0, r0, r2
   15d6c:	sbcs	r0, r1, r3
   15d70:	bge	15d8c <__assert_fail@plt+0x4db0>
   15d74:	mov	r0, #1
   15d78:	mov	r8, #0
   15d7c:	mov	r4, #-2147483648	; 0x80000000
   15d80:	mov	r6, #0
   15d84:	str	r0, [sp, #8]
   15d88:	b	15ddc <__assert_fail@plt+0x4e00>
   15d8c:	umull	r8, r0, r7, r2
   15d90:	mov	r6, #0
   15d94:	mla	r0, r7, r3, r0
   15d98:	mla	r4, r9, r2, r0
   15d9c:	cmp	r4, #0
   15da0:	bmi	15ddc <__assert_fail@plt+0x4e00>
   15da4:	ldr	r3, [sp, #28]
   15da8:	mvn	r0, #0
   15dac:	mvn	r1, #-2147483648	; 0x80000000
   15db0:	mvn	r9, #0
   15db4:	mvn	r7, #-2147483648	; 0x80000000
   15db8:	bl	16d84 <__assert_fail@plt+0x5da8>
   15dbc:	ldr	r2, [sp, #24]
   15dc0:	ldr	r3, [sp, #28]
   15dc4:	subs	r0, r0, r8
   15dc8:	sbcs	r0, r1, r4
   15dcc:	bge	15e18 <__assert_fail@plt+0x4e3c>
   15dd0:	mov	r0, #1
   15dd4:	str	r0, [sp, #8]
   15dd8:	b	15e2c <__assert_fail@plt+0x4e50>
   15ddc:	mov	r0, #0
   15de0:	mov	r1, #-2147483648	; 0x80000000
   15de4:	mov	r2, r8
   15de8:	mov	r3, r4
   15dec:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15df0:	ldr	r2, [sp, #24]
   15df4:	ldr	r3, [sp, #28]
   15df8:	subs	r0, r0, r2
   15dfc:	sbcs	r0, r1, r3
   15e00:	bge	15e18 <__assert_fail@plt+0x4e3c>
   15e04:	mov	r0, #1
   15e08:	mov	r9, #0
   15e0c:	mov	r7, #-2147483648	; 0x80000000
   15e10:	str	r0, [sp, #8]
   15e14:	b	15e68 <__assert_fail@plt+0x4e8c>
   15e18:	umull	r9, r0, r8, r2
   15e1c:	mla	r0, r8, r3, r0
   15e20:	mla	r7, r4, r2, r0
   15e24:	cmp	r7, #0
   15e28:	bmi	15e68 <__assert_fail@plt+0x4e8c>
   15e2c:	ldr	r3, [sp, #28]
   15e30:	mvn	r0, #0
   15e34:	mvn	r1, #-2147483648	; 0x80000000
   15e38:	mvn	r8, #0
   15e3c:	mvn	r4, #-2147483648	; 0x80000000
   15e40:	bl	16d84 <__assert_fail@plt+0x5da8>
   15e44:	ldr	r2, [sp, #24]
   15e48:	ldr	r3, [sp, #28]
   15e4c:	subs	r0, r0, r9
   15e50:	sbcs	r0, r1, r7
   15e54:	bge	15ea8 <__assert_fail@plt+0x4ecc>
   15e58:	ldr	r9, [sp, #12]
   15e5c:	mov	r0, #1
   15e60:	str	r0, [sp, #8]
   15e64:	b	15ec0 <__assert_fail@plt+0x4ee4>
   15e68:	mov	r0, #0
   15e6c:	mov	r1, #-2147483648	; 0x80000000
   15e70:	mov	r2, r9
   15e74:	mov	r3, r7
   15e78:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15e7c:	ldr	r2, [sp, #24]
   15e80:	ldr	r3, [sp, #28]
   15e84:	subs	r0, r0, r2
   15e88:	sbcs	r0, r1, r3
   15e8c:	bge	15ea8 <__assert_fail@plt+0x4ecc>
   15e90:	ldr	r9, [sp, #12]
   15e94:	mov	r0, #1
   15e98:	mov	r8, #0
   15e9c:	mov	r4, #-2147483648	; 0x80000000
   15ea0:	str	r0, [sp, #8]
   15ea4:	b	15f10 <__assert_fail@plt+0x4f34>
   15ea8:	umull	r8, r0, r9, r2
   15eac:	mla	r0, r9, r3, r0
   15eb0:	ldr	r9, [sp, #12]
   15eb4:	mla	r4, r7, r2, r0
   15eb8:	cmp	r4, #0
   15ebc:	bmi	15f10 <__assert_fail@plt+0x4f34>
   15ec0:	ldr	r3, [sp, #28]
   15ec4:	mvn	r0, #0
   15ec8:	mvn	r1, #-2147483648	; 0x80000000
   15ecc:	mvn	r6, #0
   15ed0:	bl	16d84 <__assert_fail@plt+0x5da8>
   15ed4:	ldr	r7, [sp, #24]
   15ed8:	ldr	r3, [sp, #28]
   15edc:	subs	r0, r0, r8
   15ee0:	mov	r2, #1
   15ee4:	sbcs	r0, r1, r4
   15ee8:	mvn	r0, #-2147483648	; 0x80000000
   15eec:	blt	15f00 <__assert_fail@plt+0x4f24>
   15ef0:	umull	r6, r0, r8, r7
   15ef4:	mov	r2, #0
   15ef8:	mla	r0, r8, r3, r0
   15efc:	mla	r0, r4, r7, r0
   15f00:	ldr	r1, [sp, #8]
   15f04:	mov	r7, r0
   15f08:	orr	r3, r2, r1
   15f0c:	b	16374 <__assert_fail@plt+0x5398>
   15f10:	mov	r0, #0
   15f14:	mov	r1, #-2147483648	; 0x80000000
   15f18:	mov	r2, r8
   15f1c:	mov	r3, r4
   15f20:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15f24:	ldr	r7, [sp, #24]
   15f28:	ldr	r3, [sp, #28]
   15f2c:	mov	r2, #1
   15f30:	subs	r0, r0, r7
   15f34:	sbcs	r0, r1, r3
   15f38:	mov	r0, #-2147483648	; 0x80000000
   15f3c:	bge	15ef0 <__assert_fail@plt+0x4f14>
   15f40:	b	15f00 <__assert_fail@plt+0x4f24>
   15f44:	ldr	r6, [sp, #8]
   15f48:	mov	r0, #0
   15f4c:	mov	r1, #-2147483648	; 0x80000000
   15f50:	mov	r3, r9
   15f54:	str	r4, [sp, #4]
   15f58:	mov	r2, r6
   15f5c:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15f60:	ldr	r2, [sp, #24]
   15f64:	ldr	r3, [sp, #28]
   15f68:	mov	r7, #1
   15f6c:	mov	r8, #0
   15f70:	mov	r4, #-2147483648	; 0x80000000
   15f74:	subs	r0, r0, r2
   15f78:	sbcs	r0, r1, r3
   15f7c:	blt	15fd4 <__assert_fail@plt+0x4ff8>
   15f80:	umull	r8, r0, r6, r2
   15f84:	ldr	r7, [sp, #4]
   15f88:	mla	r0, r6, r3, r0
   15f8c:	mla	r4, r9, r2, r0
   15f90:	cmp	r4, #0
   15f94:	bmi	15fd4 <__assert_fail@plt+0x4ff8>
   15f98:	ldr	r3, [sp, #28]
   15f9c:	mvn	r0, #0
   15fa0:	mvn	r1, #-2147483648	; 0x80000000
   15fa4:	str	r7, [sp, #4]
   15fa8:	mvn	r7, #0
   15fac:	mvn	r9, #-2147483648	; 0x80000000
   15fb0:	bl	16d84 <__assert_fail@plt+0x5da8>
   15fb4:	ldr	r2, [sp, #24]
   15fb8:	ldr	r3, [sp, #28]
   15fbc:	subs	r0, r0, r8
   15fc0:	mov	r6, #1
   15fc4:	sbcs	r0, r1, r4
   15fc8:	str	r6, [sp, #8]
   15fcc:	bge	16010 <__assert_fail@plt+0x5034>
   15fd0:	b	1602c <__assert_fail@plt+0x5050>
   15fd4:	mov	r0, #0
   15fd8:	mov	r1, #-2147483648	; 0x80000000
   15fdc:	mov	r2, r8
   15fe0:	mov	r3, r4
   15fe4:	str	r7, [sp, #4]
   15fe8:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   15fec:	ldr	r2, [sp, #24]
   15ff0:	ldr	r3, [sp, #28]
   15ff4:	mov	r7, #1
   15ff8:	mov	r9, #-2147483648	; 0x80000000
   15ffc:	str	r7, [sp, #8]
   16000:	mov	r7, #0
   16004:	subs	r0, r0, r2
   16008:	sbcs	r0, r1, r3
   1600c:	blt	16064 <__assert_fail@plt+0x5088>
   16010:	umull	r7, r0, r8, r2
   16014:	mla	r0, r8, r3, r0
   16018:	mla	r9, r4, r2, r0
   1601c:	ldr	r0, [sp, #4]
   16020:	cmp	r9, #0
   16024:	str	r0, [sp, #8]
   16028:	bmi	16064 <__assert_fail@plt+0x5088>
   1602c:	ldr	r3, [sp, #28]
   16030:	mvn	r0, #0
   16034:	mvn	r1, #-2147483648	; 0x80000000
   16038:	mvn	r4, #0
   1603c:	mvn	r8, #-2147483648	; 0x80000000
   16040:	bl	16d84 <__assert_fail@plt+0x5da8>
   16044:	ldr	r2, [sp, #24]
   16048:	ldr	r3, [sp, #28]
   1604c:	subs	r0, r0, r7
   16050:	sbcs	r0, r1, r9
   16054:	bge	160a0 <__assert_fail@plt+0x50c4>
   16058:	mov	r0, #1
   1605c:	str	r0, [sp, #8]
   16060:	b	160b4 <__assert_fail@plt+0x50d8>
   16064:	mov	r0, #0
   16068:	mov	r1, #-2147483648	; 0x80000000
   1606c:	mov	r2, r7
   16070:	mov	r3, r9
   16074:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   16078:	ldr	r2, [sp, #24]
   1607c:	ldr	r3, [sp, #28]
   16080:	subs	r0, r0, r2
   16084:	sbcs	r0, r1, r3
   16088:	bge	160a0 <__assert_fail@plt+0x50c4>
   1608c:	mov	r0, #1
   16090:	mov	r4, #0
   16094:	mov	r8, #-2147483648	; 0x80000000
   16098:	str	r0, [sp, #8]
   1609c:	b	160e8 <__assert_fail@plt+0x510c>
   160a0:	umull	r4, r0, r7, r2
   160a4:	mla	r0, r7, r3, r0
   160a8:	mla	r8, r9, r2, r0
   160ac:	cmp	r8, #0
   160b0:	bmi	160e8 <__assert_fail@plt+0x510c>
   160b4:	ldr	r3, [sp, #28]
   160b8:	mvn	r0, #0
   160bc:	mvn	r1, #-2147483648	; 0x80000000
   160c0:	mvn	r6, #0
   160c4:	mvn	r9, #-2147483648	; 0x80000000
   160c8:	bl	16d84 <__assert_fail@plt+0x5da8>
   160cc:	ldr	r2, [sp, #24]
   160d0:	ldr	r3, [sp, #28]
   160d4:	subs	r0, r0, r4
   160d8:	sbcs	r0, r1, r8
   160dc:	bge	16120 <__assert_fail@plt+0x5144>
   160e0:	mov	r8, #1
   160e4:	b	16138 <__assert_fail@plt+0x515c>
   160e8:	mov	r0, #0
   160ec:	mov	r1, #-2147483648	; 0x80000000
   160f0:	mov	r2, r4
   160f4:	mov	r3, r8
   160f8:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   160fc:	ldr	r2, [sp, #24]
   16100:	ldr	r3, [sp, #28]
   16104:	subs	r0, r0, r2
   16108:	sbcs	r0, r1, r3
   1610c:	bge	16120 <__assert_fail@plt+0x5144>
   16110:	mov	r8, #1
   16114:	mov	r6, #0
   16118:	mov	r9, #-2147483648	; 0x80000000
   1611c:	b	16188 <__assert_fail@plt+0x51ac>
   16120:	umull	r6, r0, r4, r2
   16124:	mla	r0, r4, r3, r0
   16128:	mla	r9, r8, r2, r0
   1612c:	ldr	r8, [sp, #8]
   16130:	cmp	r9, #0
   16134:	bmi	16188 <__assert_fail@plt+0x51ac>
   16138:	ldr	r3, [sp, #28]
   1613c:	mvn	r0, #0
   16140:	mvn	r1, #-2147483648	; 0x80000000
   16144:	mvn	r4, #0
   16148:	mvn	r7, #-2147483648	; 0x80000000
   1614c:	bl	16d84 <__assert_fail@plt+0x5da8>
   16150:	ldr	r3, [sp, #24]
   16154:	ldr	ip, [sp, #28]
   16158:	subs	r0, r0, r6
   1615c:	mov	r2, #1
   16160:	sbcs	r0, r1, r9
   16164:	blt	16178 <__assert_fail@plt+0x519c>
   16168:	umull	r4, r0, r6, r3
   1616c:	mov	r2, #0
   16170:	mla	r0, r6, ip, r0
   16174:	mla	r7, r9, r3, r0
   16178:	ldr	r9, [sp, #12]
   1617c:	orr	r3, r2, r8
   16180:	mov	r6, r4
   16184:	b	16374 <__assert_fail@plt+0x5398>
   16188:	mov	r0, #0
   1618c:	mov	r1, #-2147483648	; 0x80000000
   16190:	mov	r2, r6
   16194:	mov	r3, r9
   16198:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   1619c:	ldr	r3, [sp, #24]
   161a0:	ldr	ip, [sp, #28]
   161a4:	mov	r2, #1
   161a8:	mov	r4, #0
   161ac:	mov	r7, #-2147483648	; 0x80000000
   161b0:	subs	r0, r0, r3
   161b4:	sbcs	r0, r1, ip
   161b8:	bge	16168 <__assert_fail@plt+0x518c>
   161bc:	b	16178 <__assert_fail@plt+0x519c>
   161c0:	ldr	r6, [sp, #8]
   161c4:	mov	r0, #0
   161c8:	mov	r1, #-2147483648	; 0x80000000
   161cc:	mov	r3, r8
   161d0:	str	r4, [sp, #4]
   161d4:	mov	r2, r6
   161d8:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   161dc:	ldr	r2, [sp, #24]
   161e0:	ldr	r3, [sp, #28]
   161e4:	mov	r7, #1
   161e8:	mov	r9, #0
   161ec:	mov	r4, #-2147483648	; 0x80000000
   161f0:	subs	r0, r0, r2
   161f4:	sbcs	r0, r1, r3
   161f8:	blt	16250 <__assert_fail@plt+0x5274>
   161fc:	umull	r9, r0, r6, r2
   16200:	ldr	r7, [sp, #4]
   16204:	mla	r0, r6, r3, r0
   16208:	mla	r4, r8, r2, r0
   1620c:	cmp	r4, #0
   16210:	bmi	16250 <__assert_fail@plt+0x5274>
   16214:	ldr	r3, [sp, #28]
   16218:	mvn	r0, #0
   1621c:	mvn	r1, #-2147483648	; 0x80000000
   16220:	str	r7, [sp, #4]
   16224:	mvn	r8, #0
   16228:	mvn	r7, #-2147483648	; 0x80000000
   1622c:	bl	16d84 <__assert_fail@plt+0x5da8>
   16230:	ldr	r2, [sp, #24]
   16234:	ldr	r3, [sp, #28]
   16238:	subs	r0, r0, r9
   1623c:	mov	r6, #1
   16240:	sbcs	r0, r1, r4
   16244:	str	r6, [sp, #8]
   16248:	bge	1628c <__assert_fail@plt+0x52b0>
   1624c:	b	162a8 <__assert_fail@plt+0x52cc>
   16250:	mov	r0, #0
   16254:	mov	r1, #-2147483648	; 0x80000000
   16258:	mov	r2, r9
   1625c:	mov	r3, r4
   16260:	str	r7, [sp, #4]
   16264:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   16268:	ldr	r2, [sp, #24]
   1626c:	ldr	r3, [sp, #28]
   16270:	mov	r7, #1
   16274:	mov	r8, #0
   16278:	str	r7, [sp, #8]
   1627c:	mov	r7, #-2147483648	; 0x80000000
   16280:	subs	r0, r0, r2
   16284:	sbcs	r0, r1, r3
   16288:	blt	162dc <__assert_fail@plt+0x5300>
   1628c:	umull	r8, r0, r9, r2
   16290:	mla	r0, r9, r3, r0
   16294:	mla	r7, r4, r2, r0
   16298:	ldr	r0, [sp, #4]
   1629c:	cmp	r7, #0
   162a0:	str	r0, [sp, #8]
   162a4:	bmi	162dc <__assert_fail@plt+0x5300>
   162a8:	ldr	r3, [sp, #28]
   162ac:	mvn	r0, #0
   162b0:	mvn	r1, #-2147483648	; 0x80000000
   162b4:	mvn	r4, #0
   162b8:	mvn	r9, #-2147483648	; 0x80000000
   162bc:	bl	16d84 <__assert_fail@plt+0x5da8>
   162c0:	ldr	r2, [sp, #24]
   162c4:	ldr	r3, [sp, #28]
   162c8:	subs	r0, r0, r8
   162cc:	sbcs	r0, r1, r7
   162d0:	bge	16314 <__assert_fail@plt+0x5338>
   162d4:	mov	r8, #1
   162d8:	b	1632c <__assert_fail@plt+0x5350>
   162dc:	mov	r0, #0
   162e0:	mov	r1, #-2147483648	; 0x80000000
   162e4:	mov	r2, r8
   162e8:	mov	r3, r7
   162ec:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   162f0:	ldr	r2, [sp, #24]
   162f4:	ldr	r3, [sp, #28]
   162f8:	subs	r0, r0, r2
   162fc:	sbcs	r0, r1, r3
   16300:	bge	16314 <__assert_fail@plt+0x5338>
   16304:	mov	r8, #1
   16308:	mov	r4, #0
   1630c:	mov	r9, #-2147483648	; 0x80000000
   16310:	b	163a4 <__assert_fail@plt+0x53c8>
   16314:	umull	r4, r0, r8, r2
   16318:	mla	r0, r8, r3, r0
   1631c:	ldr	r8, [sp, #8]
   16320:	mla	r9, r7, r2, r0
   16324:	cmp	r9, #0
   16328:	bmi	163a4 <__assert_fail@plt+0x53c8>
   1632c:	ldr	r3, [sp, #28]
   16330:	mvn	r0, #0
   16334:	mvn	r1, #-2147483648	; 0x80000000
   16338:	mvn	r6, #0
   1633c:	mvn	r7, #-2147483648	; 0x80000000
   16340:	bl	16d84 <__assert_fail@plt+0x5da8>
   16344:	ldr	r3, [sp, #24]
   16348:	ldr	ip, [sp, #28]
   1634c:	subs	r0, r0, r4
   16350:	mov	r2, #1
   16354:	sbcs	r0, r1, r9
   16358:	blt	1636c <__assert_fail@plt+0x5390>
   1635c:	umull	r6, r0, r4, r3
   16360:	mov	r2, #0
   16364:	mla	r0, r4, ip, r0
   16368:	mla	r7, r9, r3, r0
   1636c:	ldr	r9, [sp, #12]
   16370:	orr	r3, r2, r8
   16374:	ldr	r1, [sp, #20]
   16378:	ldr	r2, [sp, #16]
   1637c:	orr	r5, r3, r5
   16380:	add	r0, r1, r2
   16384:	str	r0, [sl]
   16388:	ldrb	r0, [r1, r2]
   1638c:	cmp	r0, #0
   16390:	orrne	r5, r5, #2
   16394:	strd	r6, [r9]
   16398:	mov	r0, r5
   1639c:	sub	sp, fp, #28
   163a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a4:	mov	r0, #0
   163a8:	mov	r1, #-2147483648	; 0x80000000
   163ac:	mov	r2, r4
   163b0:	mov	r3, r9
   163b4:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   163b8:	ldr	r3, [sp, #24]
   163bc:	ldr	ip, [sp, #28]
   163c0:	mov	r2, #1
   163c4:	mov	r6, #0
   163c8:	mov	r7, #-2147483648	; 0x80000000
   163cc:	subs	r0, r0, r3
   163d0:	sbcs	r0, r1, ip
   163d4:	bge	1635c <__assert_fail@plt+0x5380>
   163d8:	b	1636c <__assert_fail@plt+0x5390>
   163dc:	ldr	r6, [sp, #8]
   163e0:	mov	r0, #0
   163e4:	mov	r1, #-2147483648	; 0x80000000
   163e8:	mov	r3, r9
   163ec:	str	r4, [sp]
   163f0:	mov	r2, r6
   163f4:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   163f8:	ldr	r2, [sp, #24]
   163fc:	ldr	r3, [sp, #28]
   16400:	mov	r7, #1
   16404:	mov	r8, #-2147483648	; 0x80000000
   16408:	subs	r0, r0, r2
   1640c:	sbcs	r0, r1, r3
   16410:	mov	r0, #0
   16414:	str	r0, [sp, #4]
   16418:	blt	16478 <__assert_fail@plt+0x549c>
   1641c:	umull	r1, r0, r6, r2
   16420:	ldr	r7, [sp]
   16424:	mla	r0, r6, r3, r0
   16428:	mla	r8, r9, r2, r0
   1642c:	str	r1, [sp, #4]
   16430:	cmp	r8, #0
   16434:	bmi	16478 <__assert_fail@plt+0x549c>
   16438:	ldr	r3, [sp, #28]
   1643c:	mvn	r0, #0
   16440:	mvn	r1, #-2147483648	; 0x80000000
   16444:	str	r7, [sp]
   16448:	mvn	r7, #0
   1644c:	mvn	r4, #-2147483648	; 0x80000000
   16450:	bl	16d84 <__assert_fail@plt+0x5da8>
   16454:	mov	r6, #1
   16458:	ldr	r2, [sp, #24]
   1645c:	ldr	r3, [sp, #28]
   16460:	str	r6, [sp, #8]
   16464:	ldr	r6, [sp, #4]
   16468:	subs	r0, r0, r6
   1646c:	sbcs	r0, r1, r8
   16470:	bge	164b8 <__assert_fail@plt+0x54dc>
   16474:	b	164d4 <__assert_fail@plt+0x54f8>
   16478:	ldr	r6, [sp, #4]
   1647c:	mov	r0, #0
   16480:	mov	r1, #-2147483648	; 0x80000000
   16484:	mov	r3, r8
   16488:	str	r7, [sp]
   1648c:	mov	r2, r6
   16490:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   16494:	ldr	r2, [sp, #24]
   16498:	ldr	r3, [sp, #28]
   1649c:	mov	r7, #1
   164a0:	mov	r4, #-2147483648	; 0x80000000
   164a4:	str	r7, [sp, #8]
   164a8:	mov	r7, #0
   164ac:	subs	r0, r0, r2
   164b0:	sbcs	r0, r1, r3
   164b4:	blt	1650c <__assert_fail@plt+0x5530>
   164b8:	umull	r7, r0, r6, r2
   164bc:	mla	r0, r6, r3, r0
   164c0:	mla	r4, r8, r2, r0
   164c4:	ldr	r0, [sp]
   164c8:	cmp	r4, #0
   164cc:	str	r0, [sp, #8]
   164d0:	bmi	1650c <__assert_fail@plt+0x5530>
   164d4:	ldr	r3, [sp, #28]
   164d8:	mvn	r0, #0
   164dc:	mvn	r1, #-2147483648	; 0x80000000
   164e0:	mvn	r9, #0
   164e4:	mvn	r8, #-2147483648	; 0x80000000
   164e8:	bl	16d84 <__assert_fail@plt+0x5da8>
   164ec:	ldr	r2, [sp, #24]
   164f0:	ldr	r3, [sp, #28]
   164f4:	subs	r0, r0, r7
   164f8:	sbcs	r0, r1, r4
   164fc:	bge	16548 <__assert_fail@plt+0x556c>
   16500:	mov	r0, #1
   16504:	str	r0, [sp, #8]
   16508:	b	1655c <__assert_fail@plt+0x5580>
   1650c:	mov	r0, #0
   16510:	mov	r1, #-2147483648	; 0x80000000
   16514:	mov	r2, r7
   16518:	mov	r3, r4
   1651c:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   16520:	ldr	r2, [sp, #24]
   16524:	ldr	r3, [sp, #28]
   16528:	subs	r0, r0, r2
   1652c:	sbcs	r0, r1, r3
   16530:	bge	16548 <__assert_fail@plt+0x556c>
   16534:	mov	r0, #1
   16538:	mov	r9, #0
   1653c:	mov	r8, #-2147483648	; 0x80000000
   16540:	str	r0, [sp, #8]
   16544:	b	16594 <__assert_fail@plt+0x55b8>
   16548:	umull	r9, r0, r7, r2
   1654c:	mla	r0, r7, r3, r0
   16550:	mla	r8, r4, r2, r0
   16554:	cmp	r8, #0
   16558:	bmi	16594 <__assert_fail@plt+0x55b8>
   1655c:	ldr	r3, [sp, #28]
   16560:	mvn	r0, #0
   16564:	mvn	r1, #-2147483648	; 0x80000000
   16568:	mvn	r4, #0
   1656c:	mvn	r7, #-2147483648	; 0x80000000
   16570:	bl	16d84 <__assert_fail@plt+0x5da8>
   16574:	ldr	r2, [sp, #24]
   16578:	ldr	r3, [sp, #28]
   1657c:	subs	r0, r0, r9
   16580:	sbcs	r0, r1, r8
   16584:	bge	165d0 <__assert_fail@plt+0x55f4>
   16588:	mov	r0, #1
   1658c:	str	r0, [sp, #8]
   16590:	b	165e4 <__assert_fail@plt+0x5608>
   16594:	mov	r0, #0
   16598:	mov	r1, #-2147483648	; 0x80000000
   1659c:	mov	r2, r9
   165a0:	mov	r3, r8
   165a4:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   165a8:	ldr	r2, [sp, #24]
   165ac:	ldr	r3, [sp, #28]
   165b0:	subs	r0, r0, r2
   165b4:	sbcs	r0, r1, r3
   165b8:	bge	165d0 <__assert_fail@plt+0x55f4>
   165bc:	mov	r0, #1
   165c0:	mov	r4, #0
   165c4:	mov	r7, #-2147483648	; 0x80000000
   165c8:	str	r0, [sp, #8]
   165cc:	b	1661c <__assert_fail@plt+0x5640>
   165d0:	umull	r4, r0, r9, r2
   165d4:	mla	r0, r9, r3, r0
   165d8:	mla	r7, r8, r2, r0
   165dc:	cmp	r7, #0
   165e0:	bmi	1661c <__assert_fail@plt+0x5640>
   165e4:	ldr	r3, [sp, #28]
   165e8:	mvn	r0, #0
   165ec:	mvn	r1, #-2147483648	; 0x80000000
   165f0:	mvn	r8, #0
   165f4:	mvn	r9, #-2147483648	; 0x80000000
   165f8:	bl	16d84 <__assert_fail@plt+0x5da8>
   165fc:	ldr	r2, [sp, #24]
   16600:	ldr	r3, [sp, #28]
   16604:	subs	r0, r0, r4
   16608:	sbcs	r0, r1, r7
   1660c:	bge	16658 <__assert_fail@plt+0x567c>
   16610:	mov	r0, #1
   16614:	str	r0, [sp, #8]
   16618:	b	1666c <__assert_fail@plt+0x5690>
   1661c:	mov	r0, #0
   16620:	mov	r1, #-2147483648	; 0x80000000
   16624:	mov	r2, r4
   16628:	mov	r3, r7
   1662c:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   16630:	ldr	r2, [sp, #24]
   16634:	ldr	r3, [sp, #28]
   16638:	subs	r0, r0, r2
   1663c:	sbcs	r0, r1, r3
   16640:	bge	16658 <__assert_fail@plt+0x567c>
   16644:	mov	r0, #1
   16648:	mov	r8, #0
   1664c:	mov	r9, #-2147483648	; 0x80000000
   16650:	str	r0, [sp, #8]
   16654:	b	166a8 <__assert_fail@plt+0x56cc>
   16658:	umull	r8, r0, r4, r2
   1665c:	mla	r0, r4, r3, r0
   16660:	mla	r9, r7, r2, r0
   16664:	cmp	r9, #0
   16668:	bmi	166a8 <__assert_fail@plt+0x56cc>
   1666c:	ldr	r3, [sp, #28]
   16670:	mvn	r0, #0
   16674:	mvn	r1, #-2147483648	; 0x80000000
   16678:	mvn	r4, #0
   1667c:	mvn	r6, #-2147483648	; 0x80000000
   16680:	bl	16d84 <__assert_fail@plt+0x5da8>
   16684:	ldr	r2, [sp, #24]
   16688:	ldr	r3, [sp, #28]
   1668c:	subs	r0, r0, r8
   16690:	sbcs	r0, r1, r9
   16694:	bge	166e8 <__assert_fail@plt+0x570c>
   16698:	ldr	r9, [sp, #12]
   1669c:	mov	r0, #1
   166a0:	str	r0, [sp, #8]
   166a4:	b	16700 <__assert_fail@plt+0x5724>
   166a8:	mov	r0, #0
   166ac:	mov	r1, #-2147483648	; 0x80000000
   166b0:	mov	r2, r8
   166b4:	mov	r3, r9
   166b8:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   166bc:	ldr	r2, [sp, #24]
   166c0:	ldr	r3, [sp, #28]
   166c4:	subs	r0, r0, r2
   166c8:	sbcs	r0, r1, r3
   166cc:	bge	166e8 <__assert_fail@plt+0x570c>
   166d0:	ldr	r9, [sp, #12]
   166d4:	mov	r0, #1
   166d8:	mov	r4, #0
   166dc:	mov	r6, #-2147483648	; 0x80000000
   166e0:	str	r0, [sp, #8]
   166e4:	b	1674c <__assert_fail@plt+0x5770>
   166e8:	umull	r4, r0, r8, r2
   166ec:	mla	r0, r8, r3, r0
   166f0:	mla	r6, r9, r2, r0
   166f4:	ldr	r9, [sp, #12]
   166f8:	cmp	r6, #0
   166fc:	bmi	1674c <__assert_fail@plt+0x5770>
   16700:	ldr	r3, [sp, #28]
   16704:	mvn	r0, #0
   16708:	mvn	r1, #-2147483648	; 0x80000000
   1670c:	mov	r8, r6
   16710:	mvn	r6, #0
   16714:	mvn	r7, #-2147483648	; 0x80000000
   16718:	bl	16d84 <__assert_fail@plt+0x5da8>
   1671c:	ldr	r3, [sp, #24]
   16720:	ldr	ip, [sp, #28]
   16724:	subs	r0, r0, r4
   16728:	mov	r2, #1
   1672c:	sbcs	r0, r1, r8
   16730:	blt	16744 <__assert_fail@plt+0x5768>
   16734:	umull	r6, r0, r4, r3
   16738:	mov	r2, #0
   1673c:	mla	r0, r4, ip, r0
   16740:	mla	r7, r8, r3, r0
   16744:	ldr	r0, [sp, #8]
   16748:	b	15890 <__assert_fail@plt+0x48b4>
   1674c:	mov	r0, #0
   16750:	mov	r1, #-2147483648	; 0x80000000
   16754:	mov	r2, r4
   16758:	mov	r3, r6
   1675c:	bl	16cb0 <__assert_fail@plt+0x5cd4>
   16760:	ldr	r3, [sp, #24]
   16764:	ldr	ip, [sp, #28]
   16768:	mov	r8, r6
   1676c:	mov	r2, #1
   16770:	mov	r6, #0
   16774:	mov	r7, #-2147483648	; 0x80000000
   16778:	subs	r0, r0, r3
   1677c:	sbcs	r0, r1, ip
   16780:	bge	16734 <__assert_fail@plt+0x5758>
   16784:	b	16744 <__assert_fail@plt+0x5768>
   16788:	movw	r0, #31869	; 0x7c7d
   1678c:	movw	r1, #31907	; 0x7ca3
   16790:	movw	r3, #31923	; 0x7cb3
   16794:	mov	r2, #85	; 0x55
   16798:	movt	r0, #1
   1679c:	movt	r1, #1
   167a0:	movt	r3, #1
   167a4:	bl	10fdc <__assert_fail@plt>
   167a8:	clz	r2, r1
   167ac:	clz	r3, r0
   167b0:	lsr	r2, r2, #5
   167b4:	lsr	r3, r3, #5
   167b8:	orrs	r2, r3, r2
   167bc:	movwne	r1, #1
   167c0:	movwne	r0, #1
   167c4:	cmp	r1, #0
   167c8:	beq	167f8 <__assert_fail@plt+0x581c>
   167cc:	mvn	r2, #-2147483648	; 0x80000000
   167d0:	udiv	r2, r2, r1
   167d4:	cmp	r2, r0
   167d8:	bcs	167f8 <__assert_fail@plt+0x581c>
   167dc:	push	{fp, lr}
   167e0:	mov	fp, sp
   167e4:	bl	10f10 <__errno_location@plt>
   167e8:	mov	r1, #12
   167ec:	str	r1, [r0]
   167f0:	mov	r0, #0
   167f4:	pop	{fp, pc}
   167f8:	b	10d90 <calloc@plt>
   167fc:	cmp	r0, #0
   16800:	movweq	r0, #1
   16804:	cmn	r0, #1
   16808:	ble	16810 <__assert_fail@plt+0x5834>
   1680c:	b	10e98 <malloc@plt>
   16810:	push	{fp, lr}
   16814:	mov	fp, sp
   16818:	bl	10f10 <__errno_location@plt>
   1681c:	mov	r1, #12
   16820:	str	r1, [r0]
   16824:	mov	r0, #0
   16828:	pop	{fp, pc}
   1682c:	push	{fp, lr}
   16830:	mov	fp, sp
   16834:	cmp	r0, #0
   16838:	beq	16854 <__assert_fail@plt+0x5878>
   1683c:	cmp	r1, #0
   16840:	beq	16860 <__assert_fail@plt+0x5884>
   16844:	cmn	r1, #1
   16848:	ble	1686c <__assert_fail@plt+0x5890>
   1684c:	pop	{fp, lr}
   16850:	b	10e14 <realloc@plt>
   16854:	mov	r0, r1
   16858:	pop	{fp, lr}
   1685c:	b	167fc <__assert_fail@plt+0x5820>
   16860:	bl	169fc <__assert_fail@plt+0x5a20>
   16864:	mov	r0, #0
   16868:	pop	{fp, pc}
   1686c:	bl	10f10 <__errno_location@plt>
   16870:	mov	r1, #12
   16874:	str	r1, [r0]
   16878:	mov	r0, #0
   1687c:	pop	{fp, pc}
   16880:	push	{r4, r5, r6, sl, fp, lr}
   16884:	add	fp, sp, #16
   16888:	mov	r4, r0
   1688c:	bl	10e68 <__fpending@plt>
   16890:	ldr	r6, [r4]
   16894:	mov	r5, r0
   16898:	mov	r0, r4
   1689c:	bl	16904 <__assert_fail@plt+0x5928>
   168a0:	tst	r6, #32
   168a4:	bne	168dc <__assert_fail@plt+0x5900>
   168a8:	cmp	r0, #0
   168ac:	mov	r4, r0
   168b0:	mvnne	r4, #0
   168b4:	cmp	r5, #0
   168b8:	bne	168e8 <__assert_fail@plt+0x590c>
   168bc:	cmp	r0, #0
   168c0:	beq	168e8 <__assert_fail@plt+0x590c>
   168c4:	bl	10f10 <__errno_location@plt>
   168c8:	ldr	r0, [r0]
   168cc:	subs	r4, r0, #9
   168d0:	mvnne	r4, #0
   168d4:	mov	r0, r4
   168d8:	pop	{r4, r5, r6, sl, fp, pc}
   168dc:	mvn	r4, #0
   168e0:	cmp	r0, #0
   168e4:	beq	168f0 <__assert_fail@plt+0x5914>
   168e8:	mov	r0, r4
   168ec:	pop	{r4, r5, r6, sl, fp, pc}
   168f0:	bl	10f10 <__errno_location@plt>
   168f4:	mov	r1, #0
   168f8:	str	r1, [r0]
   168fc:	mov	r0, r4
   16900:	pop	{r4, r5, r6, sl, fp, pc}
   16904:	push	{r4, r5, r6, sl, fp, lr}
   16908:	add	fp, sp, #16
   1690c:	sub	sp, sp, #8
   16910:	mov	r4, r0
   16914:	bl	10f40 <fileno@plt>
   16918:	cmn	r0, #1
   1691c:	ble	16990 <__assert_fail@plt+0x59b4>
   16920:	mov	r0, r4
   16924:	bl	10eb0 <__freading@plt>
   16928:	cmp	r0, #0
   1692c:	beq	16958 <__assert_fail@plt+0x597c>
   16930:	mov	r0, r4
   16934:	bl	10f40 <fileno@plt>
   16938:	mov	r1, #1
   1693c:	mov	r2, #0
   16940:	mov	r3, #0
   16944:	str	r1, [sp]
   16948:	bl	10e50 <lseek64@plt>
   1694c:	and	r0, r0, r1
   16950:	cmn	r0, #1
   16954:	beq	16990 <__assert_fail@plt+0x59b4>
   16958:	mov	r0, r4
   1695c:	bl	169a0 <__assert_fail@plt+0x59c4>
   16960:	cmp	r0, #0
   16964:	beq	16990 <__assert_fail@plt+0x59b4>
   16968:	bl	10f10 <__errno_location@plt>
   1696c:	ldr	r6, [r0]
   16970:	mov	r5, r0
   16974:	mov	r0, r4
   16978:	bl	10f58 <fclose@plt>
   1697c:	cmp	r6, #0
   16980:	strne	r6, [r5]
   16984:	mvnne	r0, #0
   16988:	sub	sp, fp, #16
   1698c:	pop	{r4, r5, r6, sl, fp, pc}
   16990:	mov	r0, r4
   16994:	sub	sp, fp, #16
   16998:	pop	{r4, r5, r6, sl, fp, lr}
   1699c:	b	10f58 <fclose@plt>
   169a0:	push	{r4, sl, fp, lr}
   169a4:	add	fp, sp, #8
   169a8:	sub	sp, sp, #8
   169ac:	mov	r4, r0
   169b0:	cmp	r0, #0
   169b4:	beq	169ec <__assert_fail@plt+0x5a10>
   169b8:	mov	r0, r4
   169bc:	bl	10eb0 <__freading@plt>
   169c0:	cmp	r0, #0
   169c4:	beq	169ec <__assert_fail@plt+0x5a10>
   169c8:	ldrb	r0, [r4, #1]
   169cc:	tst	r0, #1
   169d0:	beq	169ec <__assert_fail@plt+0x5a10>
   169d4:	mov	r0, #1
   169d8:	mov	r2, #0
   169dc:	mov	r3, #0
   169e0:	str	r0, [sp]
   169e4:	mov	r0, r4
   169e8:	bl	16a24 <__assert_fail@plt+0x5a48>
   169ec:	mov	r0, r4
   169f0:	sub	sp, fp, #8
   169f4:	pop	{r4, sl, fp, lr}
   169f8:	b	10dc0 <fflush@plt>
   169fc:	push	{r4, r5, r6, sl, fp, lr}
   16a00:	add	fp, sp, #16
   16a04:	mov	r4, r0
   16a08:	bl	10f10 <__errno_location@plt>
   16a0c:	ldr	r6, [r0]
   16a10:	mov	r5, r0
   16a14:	mov	r0, r4
   16a18:	bl	10dcc <free@plt>
   16a1c:	str	r6, [r5]
   16a20:	pop	{r4, r5, r6, sl, fp, pc}
   16a24:	push	{r4, r5, r6, r7, fp, lr}
   16a28:	add	fp, sp, #16
   16a2c:	sub	sp, sp, #8
   16a30:	mov	r4, r0
   16a34:	ldr	r0, [r0, #4]
   16a38:	mov	r5, r3
   16a3c:	mov	r6, r2
   16a40:	ldr	r1, [r4, #8]
   16a44:	cmp	r1, r0
   16a48:	bne	16a64 <__assert_fail@plt+0x5a88>
   16a4c:	ldrd	r0, [r4, #16]
   16a50:	cmp	r1, r0
   16a54:	bne	16a64 <__assert_fail@plt+0x5a88>
   16a58:	ldr	r0, [r4, #36]	; 0x24
   16a5c:	cmp	r0, #0
   16a60:	beq	16a7c <__assert_fail@plt+0x5aa0>
   16a64:	mov	r0, r4
   16a68:	mov	r2, r6
   16a6c:	mov	r3, r5
   16a70:	sub	sp, fp, #16
   16a74:	pop	{r4, r5, r6, r7, fp, lr}
   16a78:	b	10f64 <fseeko64@plt>
   16a7c:	ldr	r7, [fp, #8]
   16a80:	mov	r0, r4
   16a84:	bl	10f40 <fileno@plt>
   16a88:	mov	r2, r6
   16a8c:	mov	r3, r5
   16a90:	str	r7, [sp]
   16a94:	bl	10e50 <lseek64@plt>
   16a98:	and	r2, r0, r1
   16a9c:	cmn	r2, #1
   16aa0:	beq	16ac0 <__assert_fail@plt+0x5ae4>
   16aa4:	strd	r0, [r4, #80]	; 0x50
   16aa8:	ldr	r0, [r4]
   16aac:	bic	r0, r0, #16
   16ab0:	str	r0, [r4]
   16ab4:	mov	r0, #0
   16ab8:	sub	sp, fp, #16
   16abc:	pop	{r4, r5, r6, r7, fp, pc}
   16ac0:	mvn	r0, #0
   16ac4:	sub	sp, fp, #16
   16ac8:	pop	{r4, r5, r6, r7, fp, pc}
   16acc:	push	{fp, lr}
   16ad0:	mov	fp, sp
   16ad4:	mov	r0, #14
   16ad8:	bl	10f88 <nl_langinfo@plt>
   16adc:	movw	r1, #30412	; 0x76cc
   16ae0:	cmp	r0, #0
   16ae4:	movt	r1, #1
   16ae8:	movne	r1, r0
   16aec:	movw	r0, #32001	; 0x7d01
   16af0:	ldrb	r2, [r1]
   16af4:	movt	r0, #1
   16af8:	cmp	r2, #0
   16afc:	movne	r0, r1
   16b00:	pop	{fp, pc}
   16b04:	push	{r4, r5, r6, r7, fp, lr}
   16b08:	add	fp, sp, #16
   16b0c:	sub	sp, sp, #8
   16b10:	cmp	r0, #0
   16b14:	add	r5, sp, #4
   16b18:	mov	r7, r2
   16b1c:	mov	r4, r1
   16b20:	movne	r5, r0
   16b24:	mov	r0, r5
   16b28:	bl	10e74 <mbrtowc@plt>
   16b2c:	mov	r6, r0
   16b30:	cmp	r7, #0
   16b34:	beq	16b5c <__assert_fail@plt+0x5b80>
   16b38:	cmn	r6, #2
   16b3c:	bcc	16b5c <__assert_fail@plt+0x5b80>
   16b40:	mov	r0, #0
   16b44:	bl	16ba4 <__assert_fail@plt+0x5bc8>
   16b48:	cmp	r0, #0
   16b4c:	bne	16b5c <__assert_fail@plt+0x5b80>
   16b50:	ldrb	r0, [r4]
   16b54:	mov	r6, #1
   16b58:	str	r0, [r5]
   16b5c:	mov	r0, r6
   16b60:	sub	sp, fp, #16
   16b64:	pop	{r4, r5, r6, r7, fp, pc}
   16b68:	cmp	r2, #0
   16b6c:	beq	16b9c <__assert_fail@plt+0x5bc0>
   16b70:	mvn	r3, #0
   16b74:	udiv	r3, r3, r2
   16b78:	cmp	r3, r1
   16b7c:	bcs	16b9c <__assert_fail@plt+0x5bc0>
   16b80:	push	{fp, lr}
   16b84:	mov	fp, sp
   16b88:	bl	10f10 <__errno_location@plt>
   16b8c:	mov	r1, #12
   16b90:	str	r1, [r0]
   16b94:	mov	r0, #0
   16b98:	pop	{fp, pc}
   16b9c:	mul	r1, r2, r1
   16ba0:	b	1682c <__assert_fail@plt+0x5850>
   16ba4:	push	{r4, sl, fp, lr}
   16ba8:	add	fp, sp, #8
   16bac:	sub	sp, sp, #264	; 0x108
   16bb0:	add	r1, sp, #7
   16bb4:	movw	r2, #257	; 0x101
   16bb8:	bl	16c10 <__assert_fail@plt+0x5c34>
   16bbc:	mov	r4, #0
   16bc0:	cmp	r0, #0
   16bc4:	bne	16c04 <__assert_fail@plt+0x5c28>
   16bc8:	movw	r1, #32007	; 0x7d07
   16bcc:	add	r0, sp, #7
   16bd0:	mov	r2, #2
   16bd4:	movt	r1, #1
   16bd8:	bl	10eec <bcmp@plt>
   16bdc:	cmp	r0, #0
   16be0:	beq	16c04 <__assert_fail@plt+0x5c28>
   16be4:	movw	r1, #32009	; 0x7d09
   16be8:	add	r0, sp, #7
   16bec:	mov	r2, #6
   16bf0:	movt	r1, #1
   16bf4:	bl	10eec <bcmp@plt>
   16bf8:	cmp	r0, #0
   16bfc:	mov	r4, r0
   16c00:	movwne	r4, #1
   16c04:	mov	r0, r4
   16c08:	sub	sp, fp, #8
   16c0c:	pop	{r4, sl, fp, pc}
   16c10:	push	{r4, r5, r6, r7, fp, lr}
   16c14:	add	fp, sp, #16
   16c18:	mov	r4, r1
   16c1c:	mov	r1, #0
   16c20:	mov	r6, r2
   16c24:	bl	10f70 <setlocale@plt>
   16c28:	cmp	r0, #0
   16c2c:	beq	16c5c <__assert_fail@plt+0x5c80>
   16c30:	mov	r7, r0
   16c34:	bl	10ef8 <strlen@plt>
   16c38:	cmp	r0, r6
   16c3c:	bcs	16c78 <__assert_fail@plt+0x5c9c>
   16c40:	add	r2, r0, #1
   16c44:	mov	r0, r4
   16c48:	mov	r1, r7
   16c4c:	bl	10de4 <memcpy@plt>
   16c50:	mov	r5, #0
   16c54:	mov	r0, r5
   16c58:	pop	{r4, r5, r6, r7, fp, pc}
   16c5c:	mov	r5, #22
   16c60:	cmp	r6, #0
   16c64:	beq	16ca0 <__assert_fail@plt+0x5cc4>
   16c68:	mov	r0, #0
   16c6c:	strb	r0, [r4]
   16c70:	mov	r0, r5
   16c74:	pop	{r4, r5, r6, r7, fp, pc}
   16c78:	mov	r5, #34	; 0x22
   16c7c:	cmp	r6, #0
   16c80:	beq	16ca0 <__assert_fail@plt+0x5cc4>
   16c84:	sub	r6, r6, #1
   16c88:	mov	r0, r4
   16c8c:	mov	r1, r7
   16c90:	mov	r2, r6
   16c94:	bl	10de4 <memcpy@plt>
   16c98:	mov	r0, #0
   16c9c:	strb	r0, [r4, r6]
   16ca0:	mov	r0, r5
   16ca4:	pop	{r4, r5, r6, r7, fp, pc}
   16ca8:	mov	r1, #0
   16cac:	b	10f70 <setlocale@plt>
   16cb0:	cmp	r3, #0
   16cb4:	cmpeq	r2, #0
   16cb8:	bne	16cdc <__assert_fail@plt+0x5d00>
   16cbc:	cmp	r1, #0
   16cc0:	movlt	r1, #-2147483648	; 0x80000000
   16cc4:	movlt	r0, #0
   16cc8:	blt	16cd8 <__assert_fail@plt+0x5cfc>
   16ccc:	cmpeq	r0, #0
   16cd0:	mvnne	r1, #-2147483648	; 0x80000000
   16cd4:	mvnne	r0, #0
   16cd8:	b	16dc0 <__assert_fail@plt+0x5de4>
   16cdc:	sub	sp, sp, #8
   16ce0:	push	{sp, lr}
   16ce4:	cmp	r1, #0
   16ce8:	blt	16d08 <__assert_fail@plt+0x5d2c>
   16cec:	cmp	r3, #0
   16cf0:	blt	16d3c <__assert_fail@plt+0x5d60>
   16cf4:	bl	16dd0 <__assert_fail@plt+0x5df4>
   16cf8:	ldr	lr, [sp, #4]
   16cfc:	add	sp, sp, #8
   16d00:	pop	{r2, r3}
   16d04:	bx	lr
   16d08:	rsbs	r0, r0, #0
   16d0c:	sbc	r1, r1, r1, lsl #1
   16d10:	cmp	r3, #0
   16d14:	blt	16d60 <__assert_fail@plt+0x5d84>
   16d18:	bl	16dd0 <__assert_fail@plt+0x5df4>
   16d1c:	ldr	lr, [sp, #4]
   16d20:	add	sp, sp, #8
   16d24:	pop	{r2, r3}
   16d28:	rsbs	r0, r0, #0
   16d2c:	sbc	r1, r1, r1, lsl #1
   16d30:	rsbs	r2, r2, #0
   16d34:	sbc	r3, r3, r3, lsl #1
   16d38:	bx	lr
   16d3c:	rsbs	r2, r2, #0
   16d40:	sbc	r3, r3, r3, lsl #1
   16d44:	bl	16dd0 <__assert_fail@plt+0x5df4>
   16d48:	ldr	lr, [sp, #4]
   16d4c:	add	sp, sp, #8
   16d50:	pop	{r2, r3}
   16d54:	rsbs	r0, r0, #0
   16d58:	sbc	r1, r1, r1, lsl #1
   16d5c:	bx	lr
   16d60:	rsbs	r2, r2, #0
   16d64:	sbc	r3, r3, r3, lsl #1
   16d68:	bl	16dd0 <__assert_fail@plt+0x5df4>
   16d6c:	ldr	lr, [sp, #4]
   16d70:	add	sp, sp, #8
   16d74:	pop	{r2, r3}
   16d78:	rsbs	r2, r2, #0
   16d7c:	sbc	r3, r3, r3, lsl #1
   16d80:	bx	lr
   16d84:	cmp	r3, #0
   16d88:	cmpeq	r2, #0
   16d8c:	bne	16da4 <__assert_fail@plt+0x5dc8>
   16d90:	cmp	r1, #0
   16d94:	cmpeq	r0, #0
   16d98:	mvnne	r1, #0
   16d9c:	mvnne	r0, #0
   16da0:	b	16dc0 <__assert_fail@plt+0x5de4>
   16da4:	sub	sp, sp, #8
   16da8:	push	{sp, lr}
   16dac:	bl	16dd0 <__assert_fail@plt+0x5df4>
   16db0:	ldr	lr, [sp, #4]
   16db4:	add	sp, sp, #8
   16db8:	pop	{r2, r3}
   16dbc:	bx	lr
   16dc0:	push	{r1, lr}
   16dc4:	mov	r0, #8
   16dc8:	bl	10da8 <raise@plt>
   16dcc:	pop	{r1, pc}
   16dd0:	cmp	r1, r3
   16dd4:	cmpeq	r0, r2
   16dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ddc:	mov	r4, r0
   16de0:	movcc	r0, #0
   16de4:	mov	r5, r1
   16de8:	ldr	lr, [sp, #36]	; 0x24
   16dec:	movcc	r1, r0
   16df0:	bcc	16eec <__assert_fail@plt+0x5f10>
   16df4:	cmp	r3, #0
   16df8:	clzeq	ip, r2
   16dfc:	clzne	ip, r3
   16e00:	addeq	ip, ip, #32
   16e04:	cmp	r5, #0
   16e08:	clzeq	r1, r4
   16e0c:	addeq	r1, r1, #32
   16e10:	clzne	r1, r5
   16e14:	sub	ip, ip, r1
   16e18:	sub	sl, ip, #32
   16e1c:	lsl	r9, r3, ip
   16e20:	rsb	fp, ip, #32
   16e24:	orr	r9, r9, r2, lsl sl
   16e28:	orr	r9, r9, r2, lsr fp
   16e2c:	lsl	r8, r2, ip
   16e30:	cmp	r5, r9
   16e34:	cmpeq	r4, r8
   16e38:	movcc	r0, #0
   16e3c:	movcc	r1, r0
   16e40:	bcc	16e5c <__assert_fail@plt+0x5e80>
   16e44:	mov	r0, #1
   16e48:	subs	r4, r4, r8
   16e4c:	lsl	r1, r0, sl
   16e50:	orr	r1, r1, r0, lsr fp
   16e54:	lsl	r0, r0, ip
   16e58:	sbc	r5, r5, r9
   16e5c:	cmp	ip, #0
   16e60:	beq	16eec <__assert_fail@plt+0x5f10>
   16e64:	lsr	r6, r8, #1
   16e68:	orr	r6, r6, r9, lsl #31
   16e6c:	lsr	r7, r9, #1
   16e70:	mov	r2, ip
   16e74:	b	16e98 <__assert_fail@plt+0x5ebc>
   16e78:	subs	r3, r4, r6
   16e7c:	sbc	r8, r5, r7
   16e80:	adds	r3, r3, r3
   16e84:	adc	r8, r8, r8
   16e88:	adds	r4, r3, #1
   16e8c:	adc	r5, r8, #0
   16e90:	subs	r2, r2, #1
   16e94:	beq	16eb4 <__assert_fail@plt+0x5ed8>
   16e98:	cmp	r5, r7
   16e9c:	cmpeq	r4, r6
   16ea0:	bcs	16e78 <__assert_fail@plt+0x5e9c>
   16ea4:	adds	r4, r4, r4
   16ea8:	adc	r5, r5, r5
   16eac:	subs	r2, r2, #1
   16eb0:	bne	16e98 <__assert_fail@plt+0x5ebc>
   16eb4:	lsr	r3, r4, ip
   16eb8:	orr	r3, r3, r5, lsl fp
   16ebc:	lsr	r2, r5, ip
   16ec0:	orr	r3, r3, r5, lsr sl
   16ec4:	adds	r0, r0, r4
   16ec8:	mov	r4, r3
   16ecc:	lsl	r3, r2, ip
   16ed0:	orr	r3, r3, r4, lsl sl
   16ed4:	lsl	ip, r4, ip
   16ed8:	orr	r3, r3, r4, lsr fp
   16edc:	adc	r1, r1, r5
   16ee0:	subs	r0, r0, ip
   16ee4:	mov	r5, r2
   16ee8:	sbc	r1, r1, r3
   16eec:	cmp	lr, #0
   16ef0:	strdne	r4, [lr]
   16ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ef8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16efc:	mov	r7, r0
   16f00:	ldr	r6, [pc, #72]	; 16f50 <__assert_fail@plt+0x5f74>
   16f04:	ldr	r5, [pc, #72]	; 16f54 <__assert_fail@plt+0x5f78>
   16f08:	add	r6, pc, r6
   16f0c:	add	r5, pc, r5
   16f10:	sub	r6, r6, r5
   16f14:	mov	r8, r1
   16f18:	mov	r9, r2
   16f1c:	bl	10d70 <calloc@plt-0x20>
   16f20:	asrs	r6, r6, #2
   16f24:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f28:	mov	r4, #0
   16f2c:	add	r4, r4, #1
   16f30:	ldr	r3, [r5], #4
   16f34:	mov	r2, r9
   16f38:	mov	r1, r8
   16f3c:	mov	r0, r7
   16f40:	blx	r3
   16f44:	cmp	r6, r4
   16f48:	bne	16f2c <__assert_fail@plt+0x5f50>
   16f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f50:	strdeq	r0, [r1], -ip
   16f54:	strdeq	r0, [r1], -r4
   16f58:	bx	lr
   16f5c:	ldr	r3, [pc, #12]	; 16f70 <__assert_fail@plt+0x5f94>
   16f60:	mov	r1, #0
   16f64:	add	r3, pc, r3
   16f68:	ldr	r2, [r3]
   16f6c:	b	10f1c <__cxa_atexit@plt>
   16f70:	andeq	r1, r1, r0, ror r1

Disassembly of section .fini:

00016f74 <.fini>:
   16f74:	push	{r3, lr}
   16f78:	pop	{r3, pc}
