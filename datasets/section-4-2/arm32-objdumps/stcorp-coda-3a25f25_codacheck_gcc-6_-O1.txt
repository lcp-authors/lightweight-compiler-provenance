
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010bb4 <.init>:
   10bb4:	push	{r3, lr}
   10bb8:	bl	10d84 <_start@@Base+0x3c>
   10bbc:	pop	{r3, pc}

Disassembly of section .plt:

00010bc0 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10bc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10bc4:	ldr	lr, [pc, #4]	; 10bd0 <coda_set_option_perform_boundary_checks@plt-0x4>
   10bc8:	add	lr, pc, lr
   10bcc:	ldr	pc, [lr, #8]!
   10bd0:	andeq	r1, r1, r0, lsr r4

00010bd4 <coda_set_option_perform_boundary_checks@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #69632	; 0x11000
   10bdc:	ldr	pc, [ip, #1072]!	; 0x430

00010be0 <strcmp@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #69632	; 0x11000
   10be8:	ldr	pc, [ip, #1064]!	; 0x428

00010bec <printf@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #69632	; 0x11000
   10bf4:	ldr	pc, [ip, #1056]!	; 0x420

00010bf8 <coda_set_error@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #69632	; 0x11000
   10c00:	ldr	pc, [ip, #1048]!	; 0x418

00010c04 <coda_open@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #69632	; 0x11000
   10c0c:	ldr	pc, [ip, #1040]!	; 0x410

00010c10 <fflush@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #69632	; 0x11000
   10c18:	ldr	pc, [ip, #1032]!	; 0x408

00010c1c <coda_set_option_use_mmap@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #69632	; 0x11000
   10c24:	ldr	pc, [ip, #1024]!	; 0x400

00010c28 <coda_cursor_print_path@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #69632	; 0x11000
   10c30:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c34 <coda_set_definition_path_conditional@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #69632	; 0x11000
   10c3c:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c40 <coda_set_definition_path@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #69632	; 0x11000
   10c48:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c4c <coda_recognize_file@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #69632	; 0x11000
   10c54:	ldr	pc, [ip, #992]!	; 0x3e0

00010c58 <fwrite@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #69632	; 0x11000
   10c60:	ldr	pc, [ip, #984]!	; 0x3d8

00010c64 <coda_type_get_format_name@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #69632	; 0x11000
   10c6c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c70 <coda_done@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #69632	; 0x11000
   10c78:	ldr	pc, [ip, #968]!	; 0x3c8

00010c7c <puts@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #69632	; 0x11000
   10c84:	ldr	pc, [ip, #960]!	; 0x3c0

00010c88 <coda_product_check@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #69632	; 0x11000
   10c90:	ldr	pc, [ip, #952]!	; 0x3b8

00010c94 <__libc_start_main@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #69632	; 0x11000
   10c9c:	ldr	pc, [ip, #944]!	; 0x3b0

00010ca0 <__gmon_start__@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #69632	; 0x11000
   10ca8:	ldr	pc, [ip, #936]!	; 0x3a8

00010cac <exit@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #69632	; 0x11000
   10cb4:	ldr	pc, [ip, #928]!	; 0x3a0

00010cb8 <fprintf@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #69632	; 0x11000
   10cc0:	ldr	pc, [ip, #920]!	; 0x398

00010cc4 <coda_init@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #69632	; 0x11000
   10ccc:	ldr	pc, [ip, #912]!	; 0x390

00010cd0 <ungetc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #69632	; 0x11000
   10cd8:	ldr	pc, [ip, #904]!	; 0x388

00010cdc <coda_set_option_perform_conversions@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #69632	; 0x11000
   10ce4:	ldr	pc, [ip, #896]!	; 0x380

00010ce8 <putchar@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #69632	; 0x11000
   10cf0:	ldr	pc, [ip, #888]!	; 0x378

00010cf4 <coda_close@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #69632	; 0x11000
   10cfc:	ldr	pc, [ip, #880]!	; 0x370

00010d00 <coda_errno_to_string@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #69632	; 0x11000
   10d08:	ldr	pc, [ip, #872]!	; 0x368

00010d0c <coda_get_libcoda_version@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #69632	; 0x11000
   10d14:	ldr	pc, [ip, #864]!	; 0x360

00010d18 <coda_get_errno@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #69632	; 0x11000
   10d20:	ldr	pc, [ip, #856]!	; 0x358

00010d24 <abort@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #69632	; 0x11000
   10d2c:	ldr	pc, [ip, #848]!	; 0x350

00010d30 <getc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #69632	; 0x11000
   10d38:	ldr	pc, [ip, #840]!	; 0x348

00010d3c <__assert_fail@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #69632	; 0x11000
   10d44:	ldr	pc, [ip, #832]!	; 0x340

Disassembly of section .text:

00010d48 <_start@@Base>:
   10d48:	mov	fp, #0
   10d4c:	mov	lr, #0
   10d50:	pop	{r1}		; (ldr r1, [sp], #4)
   10d54:	mov	r2, sp
   10d58:	push	{r2}		; (str r2, [sp, #-4]!)
   10d5c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d60:	ldr	ip, [pc, #16]	; 10d78 <_start@@Base+0x30>
   10d64:	push	{ip}		; (str ip, [sp, #-4]!)
   10d68:	ldr	r0, [pc, #12]	; 10d7c <_start@@Base+0x34>
   10d6c:	ldr	r3, [pc, #12]	; 10d80 <_start@@Base+0x38>
   10d70:	bl	10c94 <__libc_start_main@plt>
   10d74:	bl	10d24 <abort@plt>
   10d78:	andeq	r1, r1, ip, asr #14
   10d7c:	andeq	r1, r1, r8, lsl #5
   10d80:	andeq	r1, r1, ip, ror #13
   10d84:	ldr	r3, [pc, #20]	; 10da0 <_start@@Base+0x58>
   10d88:	ldr	r2, [pc, #20]	; 10da4 <_start@@Base+0x5c>
   10d8c:	add	r3, pc, r3
   10d90:	ldr	r2, [r3, r2]
   10d94:	cmp	r2, #0
   10d98:	bxeq	lr
   10d9c:	b	10ca0 <__gmon_start__@plt>
   10da0:	andeq	r1, r1, ip, ror #4
   10da4:	andeq	r0, r0, r8, lsl #1
   10da8:	ldr	r3, [pc, #28]	; 10dcc <_start@@Base+0x84>
   10dac:	ldr	r0, [pc, #28]	; 10dd0 <_start@@Base+0x88>
   10db0:	sub	r3, r3, r0
   10db4:	cmp	r3, #6
   10db8:	bxls	lr
   10dbc:	ldr	r3, [pc, #16]	; 10dd4 <_start@@Base+0x8c>
   10dc0:	cmp	r3, #0
   10dc4:	bxeq	lr
   10dc8:	bx	r3
   10dcc:	muleq	r2, r7, r0
   10dd0:	muleq	r2, r4, r0
   10dd4:	andeq	r0, r0, r0
   10dd8:	ldr	r1, [pc, #36]	; 10e04 <_start@@Base+0xbc>
   10ddc:	ldr	r0, [pc, #36]	; 10e08 <_start@@Base+0xc0>
   10de0:	sub	r1, r1, r0
   10de4:	asr	r1, r1, #2
   10de8:	add	r1, r1, r1, lsr #31
   10dec:	asrs	r1, r1, #1
   10df0:	bxeq	lr
   10df4:	ldr	r3, [pc, #16]	; 10e0c <_start@@Base+0xc4>
   10df8:	cmp	r3, #0
   10dfc:	bxeq	lr
   10e00:	bx	r3
   10e04:	muleq	r2, r4, r0
   10e08:	muleq	r2, r4, r0
   10e0c:	andeq	r0, r0, r0
   10e10:	push	{r4, lr}
   10e14:	ldr	r4, [pc, #24]	; 10e34 <_start@@Base+0xec>
   10e18:	ldrb	r3, [r4]
   10e1c:	cmp	r3, #0
   10e20:	popne	{r4, pc}
   10e24:	bl	10da8 <_start@@Base+0x60>
   10e28:	mov	r3, #1
   10e2c:	strb	r3, [r4]
   10e30:	pop	{r4, pc}
   10e34:	andeq	r2, r2, r4, lsr #1
   10e38:	ldr	r0, [pc, #40]	; 10e68 <_start@@Base+0x120>
   10e3c:	ldr	r3, [r0]
   10e40:	cmp	r3, #0
   10e44:	bne	10e4c <_start@@Base+0x104>
   10e48:	b	10dd8 <_start@@Base+0x90>
   10e4c:	ldr	r3, [pc, #24]	; 10e6c <_start@@Base+0x124>
   10e50:	cmp	r3, #0
   10e54:	beq	10e48 <_start@@Base+0x100>
   10e58:	push	{r4, lr}
   10e5c:	blx	r3
   10e60:	pop	{r4, lr}
   10e64:	b	10dd8 <_start@@Base+0x90>
   10e68:	strdeq	r1, [r2], -ip
   10e6c:	andeq	r0, r0, r0
   10e70:	push	{r4, lr}
   10e74:	ldr	r0, [pc, #260]	; 10f80 <_start@@Base+0x238>
   10e78:	bl	10c7c <puts@plt>
   10e7c:	ldr	r0, [pc, #256]	; 10f84 <_start@@Base+0x23c>
   10e80:	bl	10c7c <puts@plt>
   10e84:	ldr	r0, [pc, #252]	; 10f88 <_start@@Base+0x240>
   10e88:	bl	10c7c <puts@plt>
   10e8c:	ldr	r0, [pc, #248]	; 10f8c <_start@@Base+0x244>
   10e90:	bl	10c7c <puts@plt>
   10e94:	ldr	r0, [pc, #244]	; 10f90 <_start@@Base+0x248>
   10e98:	bl	10c7c <puts@plt>
   10e9c:	ldr	r0, [pc, #240]	; 10f94 <_start@@Base+0x24c>
   10ea0:	bl	10c7c <puts@plt>
   10ea4:	ldr	r0, [pc, #236]	; 10f98 <_start@@Base+0x250>
   10ea8:	bl	10c7c <puts@plt>
   10eac:	ldr	r0, [pc, #232]	; 10f9c <_start@@Base+0x254>
   10eb0:	bl	10c7c <puts@plt>
   10eb4:	ldr	r0, [pc, #228]	; 10fa0 <_start@@Base+0x258>
   10eb8:	bl	10c7c <puts@plt>
   10ebc:	ldr	r0, [pc, #224]	; 10fa4 <_start@@Base+0x25c>
   10ec0:	bl	10c7c <puts@plt>
   10ec4:	ldr	r0, [pc, #220]	; 10fa8 <_start@@Base+0x260>
   10ec8:	bl	10c7c <puts@plt>
   10ecc:	ldr	r0, [pc, #216]	; 10fac <_start@@Base+0x264>
   10ed0:	bl	10c7c <puts@plt>
   10ed4:	ldr	r0, [pc, #212]	; 10fb0 <_start@@Base+0x268>
   10ed8:	bl	10c7c <puts@plt>
   10edc:	ldr	r0, [pc, #208]	; 10fb4 <_start@@Base+0x26c>
   10ee0:	bl	10c7c <puts@plt>
   10ee4:	ldr	r0, [pc, #204]	; 10fb8 <_start@@Base+0x270>
   10ee8:	bl	10c7c <puts@plt>
   10eec:	mov	r0, #10
   10ef0:	bl	10ce8 <putchar@plt>
   10ef4:	ldr	r0, [pc, #192]	; 10fbc <_start@@Base+0x274>
   10ef8:	bl	10c7c <puts@plt>
   10efc:	ldr	r0, [pc, #188]	; 10fc0 <_start@@Base+0x278>
   10f00:	bl	10c7c <puts@plt>
   10f04:	mov	r0, #10
   10f08:	bl	10ce8 <putchar@plt>
   10f0c:	ldr	r0, [pc, #176]	; 10fc4 <_start@@Base+0x27c>
   10f10:	bl	10c7c <puts@plt>
   10f14:	ldr	r0, [pc, #172]	; 10fc8 <_start@@Base+0x280>
   10f18:	bl	10c7c <puts@plt>
   10f1c:	mov	r0, #10
   10f20:	bl	10ce8 <putchar@plt>
   10f24:	ldr	r0, [pc, #160]	; 10fcc <_start@@Base+0x284>
   10f28:	bl	10c7c <puts@plt>
   10f2c:	ldr	r0, [pc, #156]	; 10fd0 <_start@@Base+0x288>
   10f30:	bl	10c7c <puts@plt>
   10f34:	mov	r0, #10
   10f38:	bl	10ce8 <putchar@plt>
   10f3c:	ldr	r0, [pc, #144]	; 10fd4 <_start@@Base+0x28c>
   10f40:	bl	10c7c <puts@plt>
   10f44:	ldr	r0, [pc, #140]	; 10fd8 <_start@@Base+0x290>
   10f48:	bl	10c7c <puts@plt>
   10f4c:	ldr	r0, [pc, #136]	; 10fdc <_start@@Base+0x294>
   10f50:	bl	10c7c <puts@plt>
   10f54:	ldr	r0, [pc, #132]	; 10fe0 <_start@@Base+0x298>
   10f58:	bl	10c7c <puts@plt>
   10f5c:	ldr	r0, [pc, #128]	; 10fe4 <_start@@Base+0x29c>
   10f60:	bl	10c7c <puts@plt>
   10f64:	ldr	r0, [pc, #124]	; 10fe8 <_start@@Base+0x2a0>
   10f68:	bl	10c7c <puts@plt>
   10f6c:	ldr	r0, [pc, #120]	; 10fec <_start@@Base+0x2a4>
   10f70:	bl	10c7c <puts@plt>
   10f74:	mov	r0, #10
   10f78:	bl	10ce8 <putchar@plt>
   10f7c:	pop	{r4, pc}
   10f80:	andeq	r1, r1, r4, ror #14
   10f84:	andeq	r1, r1, ip, ror #14
   10f88:	andeq	r1, r1, r4, lsr #15
   10f8c:	andeq	r1, r1, ip, ror #15
   10f90:	andeq	r1, r1, r0, lsl #16
   10f94:	andeq	r1, r1, r0, lsr #16
   10f98:	andeq	r1, r1, r0, ror r8
   10f9c:			; <UNDEFINED> instruction: 0x000118b8
   10fa0:	andeq	r1, r1, r4, lsl #18
   10fa4:	andeq	r1, r1, ip, lsl r9
   10fa8:	andeq	r1, r1, ip, asr r9
   10fac:	muleq	r1, r4, r9
   10fb0:			; <UNDEFINED> instruction: 0x000119b0
   10fb4:	strdeq	r1, [r1], -r8
   10fb8:	andeq	r1, r1, r0, lsl sl
   10fbc:	andeq	r1, r1, r0, asr sl
   10fc0:	andeq	r1, r1, r0, lsr #21
   10fc4:			; <UNDEFINED> instruction: 0x00011abc
   10fc8:	ldrdeq	r1, [r1], -r8
   10fcc:	strdeq	r1, [r1], -r8
   10fd0:	andeq	r1, r1, r4, lsl fp
   10fd4:	andeq	r1, r1, r8, asr #22
   10fd8:	muleq	r1, r8, fp
   10fdc:	andeq	r1, r1, r4, ror #23
   10fe0:	andeq	r1, r1, r0, lsl ip
   10fe4:	andeq	r1, r1, ip, asr ip
   10fe8:	andeq	r1, r1, r4, lsr #25
   10fec:	andeq	r1, r1, r4, ror #25
   10ff0:	push	{r4, lr}
   10ff4:	sub	sp, sp, #40	; 0x28
   10ff8:	mov	r4, r0
   10ffc:	bl	10c7c <puts@plt>
   11000:	add	r3, sp, #12
   11004:	str	r3, [sp, #4]
   11008:	add	r3, sp, #16
   1100c:	str	r3, [sp]
   11010:	add	r3, sp, #20
   11014:	add	r2, sp, #32
   11018:	add	r1, sp, #24
   1101c:	mov	r0, r4
   11020:	bl	10c4c <coda_recognize_file@plt>
   11024:	cmp	r0, #0
   11028:	bne	110d0 <_start@@Base+0x388>
   1102c:	ldr	r3, [pc, #472]	; 1120c <_start@@Base+0x4c4>
   11030:	ldr	r3, [r3]
   11034:	cmp	r3, #0
   11038:	beq	11054 <_start@@Base+0x30c>
   1103c:	ldr	r3, [sp, #20]
   11040:	cmp	r3, #0
   11044:	beq	11104 <_start@@Base+0x3bc>
   11048:	ldr	r3, [sp, #16]
   1104c:	cmp	r3, #0
   11050:	beq	11104 <_start@@Base+0x3bc>
   11054:	ldr	r3, [pc, #436]	; 11210 <_start@@Base+0x4c8>
   11058:	ldr	r3, [r3]
   1105c:	cmp	r3, #0
   11060:	bne	1111c <_start@@Base+0x3d4>
   11064:	add	r1, sp, #36	; 0x24
   11068:	mov	r0, r4
   1106c:	bl	10c04 <coda_open@plt>
   11070:	cmp	r0, #0
   11074:	bne	11160 <_start@@Base+0x418>
   11078:	ldr	r3, [pc, #404]	; 11214 <_start@@Base+0x4cc>
   1107c:	ldr	r1, [r3]
   11080:	mov	r3, #0
   11084:	ldr	r2, [pc, #396]	; 11218 <_start@@Base+0x4d0>
   11088:	clz	r1, r1
   1108c:	lsr	r1, r1, #5
   11090:	ldr	r0, [sp, #36]	; 0x24
   11094:	bl	10c88 <coda_product_check@plt>
   11098:	cmp	r0, #0
   1109c:	beq	111c8 <_start@@Base+0x480>
   110a0:	bl	10d18 <coda_get_errno@plt>
   110a4:	ldr	r0, [r0]
   110a8:	bl	10d00 <coda_errno_to_string@plt>
   110ac:	mov	r1, r0
   110b0:	ldr	r0, [pc, #356]	; 1121c <_start@@Base+0x4d4>
   110b4:	bl	10bec <printf@plt>
   110b8:	mov	r2, #1
   110bc:	ldr	r3, [pc, #348]	; 11220 <_start@@Base+0x4d8>
   110c0:	str	r2, [r3]
   110c4:	ldr	r0, [sp, #36]	; 0x24
   110c8:	bl	10cf4 <coda_close@plt>
   110cc:	b	11194 <_start@@Base+0x44c>
   110d0:	bl	10d18 <coda_get_errno@plt>
   110d4:	ldr	r0, [r0]
   110d8:	bl	10d00 <coda_errno_to_string@plt>
   110dc:	mov	r1, r0
   110e0:	ldr	r0, [pc, #308]	; 1121c <_start@@Base+0x4d4>
   110e4:	bl	10bec <printf@plt>
   110e8:	mov	r1, #0
   110ec:	mov	r0, r1
   110f0:	bl	10bf8 <coda_set_error@plt>
   110f4:	mov	r2, #1
   110f8:	ldr	r3, [pc, #288]	; 11220 <_start@@Base+0x4d8>
   110fc:	str	r2, [r3]
   11100:	b	11194 <_start@@Base+0x44c>
   11104:	ldr	r0, [pc, #280]	; 11224 <_start@@Base+0x4dc>
   11108:	bl	10c7c <puts@plt>
   1110c:	mov	r2, #1
   11110:	ldr	r3, [pc, #264]	; 11220 <_start@@Base+0x4d8>
   11114:	str	r2, [r3]
   11118:	b	11194 <_start@@Base+0x44c>
   1111c:	ldr	r0, [sp, #32]
   11120:	bl	10c64 <coda_type_get_format_name@plt>
   11124:	mov	r1, r0
   11128:	ldr	r0, [pc, #248]	; 11228 <_start@@Base+0x4e0>
   1112c:	bl	10bec <printf@plt>
   11130:	ldr	r1, [sp, #20]
   11134:	cmp	r1, #0
   11138:	beq	11154 <_start@@Base+0x40c>
   1113c:	ldr	r2, [sp, #16]
   11140:	cmp	r2, #0
   11144:	beq	11154 <_start@@Base+0x40c>
   11148:	ldr	r3, [sp, #12]
   1114c:	ldr	r0, [pc, #216]	; 1122c <_start@@Base+0x4e4>
   11150:	bl	10bec <printf@plt>
   11154:	mov	r0, #10
   11158:	bl	10ce8 <putchar@plt>
   1115c:	b	11064 <_start@@Base+0x31c>
   11160:	bl	10d18 <coda_get_errno@plt>
   11164:	ldr	r3, [r0]
   11168:	cmn	r3, #21
   1116c:	beq	1119c <_start@@Base+0x454>
   11170:	bl	10d18 <coda_get_errno@plt>
   11174:	ldr	r0, [r0]
   11178:	bl	10d00 <coda_errno_to_string@plt>
   1117c:	mov	r1, r0
   11180:	ldr	r0, [pc, #148]	; 1121c <_start@@Base+0x4d4>
   11184:	bl	10bec <printf@plt>
   11188:	mov	r2, #1
   1118c:	ldr	r3, [pc, #140]	; 11220 <_start@@Base+0x4d8>
   11190:	str	r2, [r3]
   11194:	add	sp, sp, #40	; 0x28
   11198:	pop	{r4, pc}
   1119c:	mov	r0, #0
   111a0:	bl	10c1c <coda_set_option_use_mmap@plt>
   111a4:	add	r1, sp, #36	; 0x24
   111a8:	mov	r0, r4
   111ac:	bl	10c04 <coda_open@plt>
   111b0:	mov	r4, r0
   111b4:	mov	r0, #1
   111b8:	bl	10c1c <coda_set_option_use_mmap@plt>
   111bc:	cmp	r4, #0
   111c0:	bne	11170 <_start@@Base+0x428>
   111c4:	b	11078 <_start@@Base+0x330>
   111c8:	ldr	r0, [sp, #36]	; 0x24
   111cc:	bl	10cf4 <coda_close@plt>
   111d0:	cmp	r0, #0
   111d4:	beq	11200 <_start@@Base+0x4b8>
   111d8:	bl	10d18 <coda_get_errno@plt>
   111dc:	ldr	r0, [r0]
   111e0:	bl	10d00 <coda_errno_to_string@plt>
   111e4:	mov	r1, r0
   111e8:	ldr	r0, [pc, #64]	; 11230 <_start@@Base+0x4e8>
   111ec:	bl	10bec <printf@plt>
   111f0:	mov	r2, #1
   111f4:	ldr	r3, [pc, #36]	; 11220 <_start@@Base+0x4d8>
   111f8:	str	r2, [r3]
   111fc:	b	11194 <_start@@Base+0x44c>
   11200:	mov	r0, #10
   11204:	bl	10ce8 <putchar@plt>
   11208:	b	11194 <_start@@Base+0x44c>
   1120c:	andeq	r2, r2, r8, lsr #1
   11210:	strheq	r2, [r2], -r0
   11214:	strheq	r2, [r2], -r4
   11218:	andeq	r1, r1, r4, lsr r2
   1121c:	andeq	r1, r1, r4, lsr #26
   11220:	andeq	r2, r2, ip, lsr #1
   11224:	andeq	r1, r1, r4, lsr sp
   11228:	andeq	r1, r1, r0, ror #26
   1122c:	andeq	r1, r1, r8, ror sp
   11230:	andeq	r1, r1, r4, lsl #27
   11234:	push	{r4, lr}
   11238:	mov	r4, r0
   1123c:	ldr	r0, [pc, #52]	; 11278 <_start@@Base+0x530>
   11240:	bl	10bec <printf@plt>
   11244:	cmp	r4, #0
   11248:	beq	11260 <_start@@Base+0x518>
   1124c:	ldr	r0, [pc, #40]	; 1127c <_start@@Base+0x534>
   11250:	bl	10bec <printf@plt>
   11254:	ldr	r1, [pc, #36]	; 11280 <_start@@Base+0x538>
   11258:	mov	r0, r4
   1125c:	bl	10c28 <coda_cursor_print_path@plt>
   11260:	mov	r0, #10
   11264:	bl	10ce8 <putchar@plt>
   11268:	mov	r2, #1
   1126c:	ldr	r3, [pc, #16]	; 11284 <_start@@Base+0x53c>
   11270:	str	r2, [r3]
   11274:	pop	{r4, pc}
   11278:	muleq	r1, r4, sp
   1127c:	andeq	r1, r1, r0, lsr #27
   11280:	andeq	r0, r1, ip, ror #23
   11284:	andeq	r2, r2, ip, lsr #1

00011288 <main@@Base>:
   11288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1128c:	sub	sp, sp, #1012	; 0x3f4
   11290:	mov	r3, #0
   11294:	ldr	r2, [pc, #996]	; 11680 <main@@Base+0x3f8>
   11298:	str	r3, [r2]
   1129c:	ldr	r2, [pc, #992]	; 11684 <main@@Base+0x3fc>
   112a0:	str	r3, [r2]
   112a4:	ldr	r2, [pc, #988]	; 11688 <main@@Base+0x400>
   112a8:	str	r3, [r2]
   112ac:	cmp	r0, #1
   112b0:	beq	11374 <main@@Base+0xec>
   112b4:	mov	r7, r0
   112b8:	mov	r8, r1
   112bc:	ldr	r4, [r1, #4]
   112c0:	ldr	r1, [pc, #964]	; 1168c <main@@Base+0x404>
   112c4:	mov	r0, r4
   112c8:	bl	10be0 <strcmp@plt>
   112cc:	cmp	r0, #0
   112d0:	beq	11374 <main@@Base+0xec>
   112d4:	ldr	r1, [pc, #948]	; 11690 <main@@Base+0x408>
   112d8:	mov	r0, r4
   112dc:	bl	10be0 <strcmp@plt>
   112e0:	cmp	r0, #0
   112e4:	beq	11374 <main@@Base+0xec>
   112e8:	ldr	r1, [pc, #932]	; 11694 <main@@Base+0x40c>
   112ec:	mov	r0, r4
   112f0:	bl	10be0 <strcmp@plt>
   112f4:	cmp	r0, #0
   112f8:	beq	11380 <main@@Base+0xf8>
   112fc:	ldr	r1, [pc, #916]	; 11698 <main@@Base+0x410>
   11300:	mov	r0, r4
   11304:	bl	10be0 <strcmp@plt>
   11308:	cmp	r0, #0
   1130c:	beq	11380 <main@@Base+0xf8>
   11310:	cmp	r7, #2
   11314:	ble	1132c <main@@Base+0xa4>
   11318:	ldr	r1, [pc, #892]	; 1169c <main@@Base+0x414>
   1131c:	mov	r0, r4
   11320:	bl	10be0 <strcmp@plt>
   11324:	cmp	r0, #0
   11328:	beq	113a8 <main@@Base+0x120>
   1132c:	ldr	r2, [pc, #876]	; 116a0 <main@@Base+0x418>
   11330:	mov	r1, #0
   11334:	ldr	r0, [r8]
   11338:	bl	10c34 <coda_set_definition_path_conditional@plt>
   1133c:	cmp	r0, #0
   11340:	moveq	r4, #1
   11344:	bne	113b8 <main@@Base+0x130>
   11348:	cmp	r7, r4
   1134c:	movle	r3, #1
   11350:	strle	r3, [sp, #4]
   11354:	ble	11648 <main@@Base+0x3c0>
   11358:	add	r6, r8, r4, lsl #2
   1135c:	mov	r3, #1
   11360:	str	r3, [sp, #4]
   11364:	ldr	sl, [pc, #788]	; 11680 <main@@Base+0x3f8>
   11368:	mov	r9, r3
   1136c:	ldr	fp, [pc, #784]	; 11684 <main@@Base+0x3fc>
   11370:	b	113f4 <main@@Base+0x16c>
   11374:	bl	10e70 <_start@@Base+0x128>
   11378:	mov	r0, #0
   1137c:	bl	10cac <exit@plt>
   11380:	bl	10d0c <coda_get_libcoda_version@plt>
   11384:	mov	r1, r0
   11388:	ldr	r0, [pc, #788]	; 116a4 <main@@Base+0x41c>
   1138c:	bl	10bec <printf@plt>
   11390:	ldr	r0, [pc, #784]	; 116a8 <main@@Base+0x420>
   11394:	bl	10c7c <puts@plt>
   11398:	mov	r0, #10
   1139c:	bl	10ce8 <putchar@plt>
   113a0:	mov	r0, #0
   113a4:	bl	10cac <exit@plt>
   113a8:	ldr	r0, [r8, #8]
   113ac:	bl	10c40 <coda_set_definition_path@plt>
   113b0:	mov	r4, #3
   113b4:	b	11348 <main@@Base+0xc0>
   113b8:	ldr	r3, [pc, #748]	; 116ac <main@@Base+0x424>
   113bc:	ldr	r4, [r3]
   113c0:	bl	10d18 <coda_get_errno@plt>
   113c4:	ldr	r0, [r0]
   113c8:	bl	10d00 <coda_errno_to_string@plt>
   113cc:	mov	r2, r0
   113d0:	ldr	r1, [pc, #728]	; 116b0 <main@@Base+0x428>
   113d4:	mov	r0, r4
   113d8:	bl	10cb8 <fprintf@plt>
   113dc:	mov	r0, #1
   113e0:	bl	10cac <exit@plt>
   113e4:	str	r9, [sl]
   113e8:	add	r4, r4, #1
   113ec:	cmp	r7, r4
   113f0:	beq	11648 <main@@Base+0x3c0>
   113f4:	ldr	r5, [r6], #4
   113f8:	ldr	r1, [pc, #692]	; 116b4 <main@@Base+0x42c>
   113fc:	mov	r0, r5
   11400:	bl	10be0 <strcmp@plt>
   11404:	cmp	r0, #0
   11408:	beq	113e4 <main@@Base+0x15c>
   1140c:	ldr	r1, [pc, #676]	; 116b8 <main@@Base+0x430>
   11410:	mov	r0, r5
   11414:	bl	10be0 <strcmp@plt>
   11418:	cmp	r0, #0
   1141c:	beq	113e4 <main@@Base+0x15c>
   11420:	ldr	r1, [pc, #660]	; 116bc <main@@Base+0x434>
   11424:	mov	r0, r5
   11428:	bl	10be0 <strcmp@plt>
   1142c:	cmp	r0, #0
   11430:	beq	11448 <main@@Base+0x1c0>
   11434:	ldr	r1, [pc, #644]	; 116c0 <main@@Base+0x438>
   11438:	mov	r0, r5
   1143c:	bl	10be0 <strcmp@plt>
   11440:	cmp	r0, #0
   11444:	bne	11450 <main@@Base+0x1c8>
   11448:	str	r9, [fp]
   1144c:	b	113e8 <main@@Base+0x160>
   11450:	ldr	r1, [pc, #620]	; 116c4 <main@@Base+0x43c>
   11454:	mov	r0, r5
   11458:	bl	10be0 <strcmp@plt>
   1145c:	cmp	r0, #0
   11460:	beq	11478 <main@@Base+0x1f0>
   11464:	ldr	r1, [pc, #604]	; 116c8 <main@@Base+0x440>
   11468:	mov	r0, r5
   1146c:	bl	10be0 <strcmp@plt>
   11470:	cmp	r0, #0
   11474:	bne	11484 <main@@Base+0x1fc>
   11478:	ldr	r3, [pc, #520]	; 11688 <main@@Base+0x400>
   1147c:	str	r9, [r3]
   11480:	b	113e8 <main@@Base+0x160>
   11484:	ldr	r1, [pc, #576]	; 116cc <main@@Base+0x444>
   11488:	mov	r0, r5
   1148c:	bl	10be0 <strcmp@plt>
   11490:	cmp	r0, #0
   11494:	streq	r0, [sp, #4]
   11498:	beq	113e8 <main@@Base+0x160>
   1149c:	ldr	r1, [pc, #556]	; 116d0 <main@@Base+0x448>
   114a0:	mov	r0, r5
   114a4:	bl	10be0 <strcmp@plt>
   114a8:	cmp	r0, #0
   114ac:	bne	114bc <main@@Base+0x234>
   114b0:	sub	r3, r7, #1
   114b4:	cmp	r3, r4
   114b8:	beq	115fc <main@@Base+0x374>
   114bc:	ldrb	r3, [r5]
   114c0:	cmp	r3, #45	; 0x2d
   114c4:	beq	11538 <main@@Base+0x2b0>
   114c8:	bl	10cc4 <coda_init@plt>
   114cc:	cmp	r0, #0
   114d0:	bne	11654 <main@@Base+0x3cc>
   114d4:	mov	r0, #0
   114d8:	bl	10bd4 <coda_set_option_perform_boundary_checks@plt>
   114dc:	mov	r0, #0
   114e0:	bl	10cdc <coda_set_option_perform_conversions@plt>
   114e4:	ldr	r0, [sp, #4]
   114e8:	bl	10c1c <coda_set_option_use_mmap@plt>
   114ec:	cmp	r7, r4
   114f0:	ble	11518 <main@@Base+0x290>
   114f4:	add	r8, r8, r4, lsl #2
   114f8:	mov	r5, #0
   114fc:	ldr	r0, [r8], #4
   11500:	bl	10ff0 <_start@@Base+0x2a8>
   11504:	mov	r0, r5
   11508:	bl	10c10 <fflush@plt>
   1150c:	add	r4, r4, #1
   11510:	cmp	r7, r4
   11514:	bne	114fc <main@@Base+0x274>
   11518:	bl	10c70 <coda_done@plt>
   1151c:	ldr	r3, [pc, #432]	; 116d4 <main@@Base+0x44c>
   11520:	ldr	r3, [r3]
   11524:	cmp	r3, #0
   11528:	bne	115f4 <main@@Base+0x36c>
   1152c:	mov	r0, #0
   11530:	add	sp, sp, #1012	; 0x3f4
   11534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11538:	ldr	r3, [pc, #364]	; 116ac <main@@Base+0x424>
   1153c:	ldr	r3, [r3]
   11540:	mov	r2, #25
   11544:	mov	r1, #1
   11548:	ldr	r0, [pc, #392]	; 116d8 <main@@Base+0x450>
   1154c:	bl	10c58 <fwrite@plt>
   11550:	bl	10e70 <_start@@Base+0x128>
   11554:	mov	r0, #1
   11558:	bl	10cac <exit@plt>
   1155c:	cmp	r0, #10
   11560:	beq	115ac <main@@Base+0x324>
   11564:	add	r3, sp, #8
   11568:	strb	r0, [r3, r4]
   1156c:	add	r4, r4, #1
   11570:	cmp	r4, #1000	; 0x3e8
   11574:	beq	115cc <main@@Base+0x344>
   11578:	ldr	r0, [r5]
   1157c:	bl	10d30 <getc@plt>
   11580:	uxtb	r0, r0
   11584:	cmp	r0, #13
   11588:	bne	1155c <main@@Base+0x2d4>
   1158c:	ldr	r0, [r5]
   11590:	bl	10d30 <getc@plt>
   11594:	uxtb	r3, r0
   11598:	cmp	r3, #10
   1159c:	beq	115ac <main@@Base+0x324>
   115a0:	ldr	r1, [r5]
   115a4:	mov	r0, r3
   115a8:	bl	10cd0 <ungetc@plt>
   115ac:	add	r3, sp, #1008	; 0x3f0
   115b0:	add	r3, r3, r4
   115b4:	mov	r2, #0
   115b8:	strb	r2, [r3, #-1000]	; 0xfffffc18
   115bc:	cmp	r4, r2
   115c0:	bgt	115e0 <main@@Base+0x358>
   115c4:	mov	r4, r6
   115c8:	b	11578 <main@@Base+0x2f0>
   115cc:	ldr	r3, [pc, #264]	; 116dc <main@@Base+0x454>
   115d0:	mov	r2, #316	; 0x13c
   115d4:	ldr	r1, [pc, #260]	; 116e0 <main@@Base+0x458>
   115d8:	ldr	r0, [pc, #260]	; 116e4 <main@@Base+0x45c>
   115dc:	bl	10d3c <__assert_fail@plt>
   115e0:	mov	r0, r7
   115e4:	bl	10ff0 <_start@@Base+0x2a8>
   115e8:	mov	r0, #0
   115ec:	bl	10c10 <fflush@plt>
   115f0:	b	115c4 <main@@Base+0x33c>
   115f4:	mov	r0, #1
   115f8:	bl	10cac <exit@plt>
   115fc:	bl	10cc4 <coda_init@plt>
   11600:	subs	r6, r0, #0
   11604:	bne	11654 <main@@Base+0x3cc>
   11608:	mov	r0, #0
   1160c:	bl	10bd4 <coda_set_option_perform_boundary_checks@plt>
   11610:	mov	r0, #0
   11614:	bl	10cdc <coda_set_option_perform_conversions@plt>
   11618:	ldr	r0, [sp, #4]
   1161c:	bl	10c1c <coda_set_option_use_mmap@plt>
   11620:	ldr	r5, [pc, #192]	; 116e8 <main@@Base+0x460>
   11624:	add	r7, sp, #8
   11628:	b	115c4 <main@@Base+0x33c>
   1162c:	mov	r0, #0
   11630:	bl	10bd4 <coda_set_option_perform_boundary_checks@plt>
   11634:	mov	r0, #0
   11638:	bl	10cdc <coda_set_option_perform_conversions@plt>
   1163c:	ldr	r0, [sp, #4]
   11640:	bl	10c1c <coda_set_option_use_mmap@plt>
   11644:	b	11518 <main@@Base+0x290>
   11648:	bl	10cc4 <coda_init@plt>
   1164c:	cmp	r0, #0
   11650:	beq	1162c <main@@Base+0x3a4>
   11654:	ldr	r3, [pc, #80]	; 116ac <main@@Base+0x424>
   11658:	ldr	r4, [r3]
   1165c:	bl	10d18 <coda_get_errno@plt>
   11660:	ldr	r0, [r0]
   11664:	bl	10d00 <coda_errno_to_string@plt>
   11668:	mov	r2, r0
   1166c:	ldr	r1, [pc, #60]	; 116b0 <main@@Base+0x428>
   11670:	mov	r0, r4
   11674:	bl	10cb8 <fprintf@plt>
   11678:	mov	r0, #1
   1167c:	bl	10cac <exit@plt>
   11680:	strheq	r2, [r2], -r0
   11684:	strheq	r2, [r2], -r4
   11688:	andeq	r2, r2, r8, lsr #1
   1168c:	andeq	r1, r1, r8, lsr #27
   11690:	andeq	r1, r1, ip, lsr #27
   11694:			; <UNDEFINED> instruction: 0x00011db4
   11698:			; <UNDEFINED> instruction: 0x00011db8
   1169c:	andeq	r1, r1, ip, lsl #28
   116a0:	andeq	r1, r1, r0, lsl lr
   116a4:	andeq	r1, r1, r4, asr #27
   116a8:	ldrdeq	r1, [r1], -ip
   116ac:	muleq	r2, r8, r0
   116b0:	andeq	r1, r1, ip, lsr #28
   116b4:	andeq	r1, r1, r8, lsr lr
   116b8:	andeq	r1, r1, r4, lsr #19
   116bc:	andeq	r1, r1, ip, lsr lr
   116c0:	andeq	r1, r1, r4, lsl r9
   116c4:	andeq	r1, r1, r0, asr #28
   116c8:	andeq	r1, r1, r0, lsl r8
   116cc:	andeq	r1, r1, r4, lsl #20
   116d0:	andeq	r1, r1, r4, asr #28
   116d4:	andeq	r2, r2, ip, lsr #1
   116d8:	andeq	r1, r1, r8, asr #28
   116dc:	andeq	r1, r1, ip, asr r7
   116e0:	andeq	r1, r1, r4, ror #28
   116e4:	andeq	r1, r1, ip, lsr #29
   116e8:	andeq	r2, r2, r0, lsr #1

000116ec <__libc_csu_init@@Base>:
   116ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   116f0:	mov	r7, r0
   116f4:	ldr	r6, [pc, #72]	; 11744 <__libc_csu_init@@Base+0x58>
   116f8:	ldr	r5, [pc, #72]	; 11748 <__libc_csu_init@@Base+0x5c>
   116fc:	add	r6, pc, r6
   11700:	add	r5, pc, r5
   11704:	sub	r6, r6, r5
   11708:	mov	r8, r1
   1170c:	mov	r9, r2
   11710:	bl	10bb4 <coda_set_option_perform_boundary_checks@plt-0x20>
   11714:	asrs	r6, r6, #2
   11718:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1171c:	mov	r4, #0
   11720:	add	r4, r4, #1
   11724:	ldr	r3, [r5], #4
   11728:	mov	r2, r9
   1172c:	mov	r1, r8
   11730:	mov	r0, r7
   11734:	blx	r3
   11738:	cmp	r6, r4
   1173c:	bne	11720 <__libc_csu_init@@Base+0x34>
   11740:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11744:	strdeq	r0, [r1], -r4
   11748:	andeq	r0, r1, ip, ror #15

0001174c <__libc_csu_fini@@Base>:
   1174c:	bx	lr

Disassembly of section .fini:

00011750 <.fini>:
   11750:	push	{r3, lr}
   11754:	pop	{r3, pc}
