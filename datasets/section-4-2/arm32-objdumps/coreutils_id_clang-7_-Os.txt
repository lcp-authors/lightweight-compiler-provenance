
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

000110bc <.init>:
   110bc:	push	{r3, lr}
   110c0:	bl	11400 <__assert_fail@plt+0x48>
   110c4:	pop	{r3, pc}

Disassembly of section .plt:

000110c8 <calloc@plt-0x14>:
   110c8:	push	{lr}		; (str lr, [sp, #-4]!)
   110cc:	ldr	lr, [pc, #4]	; 110d8 <calloc@plt-0x4>
   110d0:	add	lr, pc, lr
   110d4:	ldr	pc, [lr, #8]!
   110d8:	andeq	r5, r1, r8, lsr #30

000110dc <calloc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #3880]!	; 0xf28

000110e8 <endgrent@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #3872]!	; 0xf20

000110f4 <fputs_unlocked@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #3864]!	; 0xf18

00011100 <raise@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #3856]!	; 0xf10

0001110c <getpwnam@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #86016	; 0x15000
   11114:	ldr	pc, [ip, #3848]!	; 0xf08

00011118 <is_selinux_enabled@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #86016	; 0x15000
   11120:	ldr	pc, [ip, #3840]!	; 0xf00

00011124 <strcmp@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #86016	; 0x15000
   1112c:	ldr	pc, [ip, #3832]!	; 0xef8

00011130 <getpwuid@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #86016	; 0x15000
   11138:	ldr	pc, [ip, #3824]!	; 0xef0

0001113c <fflush@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #86016	; 0x15000
   11144:	ldr	pc, [ip, #3816]!	; 0xee8

00011148 <getuid@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #86016	; 0x15000
   11150:	ldr	pc, [ip, #3808]!	; 0xee0

00011154 <free@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #86016	; 0x15000
   1115c:	ldr	pc, [ip, #3800]!	; 0xed8

00011160 <_exit@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #86016	; 0x15000
   11168:	ldr	pc, [ip, #3792]!	; 0xed0

0001116c <memcpy@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #86016	; 0x15000
   11174:	ldr	pc, [ip, #3784]!	; 0xec8

00011178 <mbsinit@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #86016	; 0x15000
   11180:	ldr	pc, [ip, #3776]!	; 0xec0

00011184 <memcmp@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #86016	; 0x15000
   1118c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011190 <dcgettext@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #86016	; 0x15000
   11198:	ldr	pc, [ip, #3760]!	; 0xeb0

0001119c <realloc@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #86016	; 0x15000
   111a4:	ldr	pc, [ip, #3752]!	; 0xea8

000111a8 <textdomain@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #86016	; 0x15000
   111b0:	ldr	pc, [ip, #3744]!	; 0xea0

000111b4 <geteuid@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #86016	; 0x15000
   111bc:	ldr	pc, [ip, #3736]!	; 0xe98

000111c0 <iswprint@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #86016	; 0x15000
   111c8:	ldr	pc, [ip, #3728]!	; 0xe90

000111cc <getegid@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #86016	; 0x15000
   111d4:	ldr	pc, [ip, #3720]!	; 0xe88

000111d8 <lseek64@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #86016	; 0x15000
   111e0:	ldr	pc, [ip, #3712]!	; 0xe80

000111e4 <__ctype_get_mb_cur_max@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #86016	; 0x15000
   111ec:	ldr	pc, [ip, #3704]!	; 0xe78

000111f0 <getcon@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #86016	; 0x15000
   111f8:	ldr	pc, [ip, #3696]!	; 0xe70

000111fc <__fpending@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #86016	; 0x15000
   11204:	ldr	pc, [ip, #3688]!	; 0xe68

00011208 <ferror_unlocked@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #86016	; 0x15000
   11210:	ldr	pc, [ip, #3680]!	; 0xe60

00011214 <mbrtowc@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #86016	; 0x15000
   1121c:	ldr	pc, [ip, #3672]!	; 0xe58

00011220 <error@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #86016	; 0x15000
   11228:	ldr	pc, [ip, #3664]!	; 0xe50

0001122c <getenv@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #86016	; 0x15000
   11234:	ldr	pc, [ip, #3656]!	; 0xe48

00011238 <malloc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #86016	; 0x15000
   11240:	ldr	pc, [ip, #3648]!	; 0xe40

00011244 <__libc_start_main@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #86016	; 0x15000
   1124c:	ldr	pc, [ip, #3640]!	; 0xe38

00011250 <__freading@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #86016	; 0x15000
   11258:	ldr	pc, [ip, #3632]!	; 0xe30

0001125c <__gmon_start__@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #86016	; 0x15000
   11264:	ldr	pc, [ip, #3624]!	; 0xe28

00011268 <getopt_long@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #86016	; 0x15000
   11270:	ldr	pc, [ip, #3616]!	; 0xe20

00011274 <__ctype_b_loc@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #86016	; 0x15000
   1127c:	ldr	pc, [ip, #3608]!	; 0xe18

00011280 <exit@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #86016	; 0x15000
   11288:	ldr	pc, [ip, #3600]!	; 0xe10

0001128c <strtoul@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #86016	; 0x15000
   11294:	ldr	pc, [ip, #3592]!	; 0xe08

00011298 <strlen@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #86016	; 0x15000
   112a0:	ldr	pc, [ip, #3584]!	; 0xe00

000112a4 <strchr@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #86016	; 0x15000
   112ac:	ldr	pc, [ip, #3576]!	; 0xdf8

000112b0 <__errno_location@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #86016	; 0x15000
   112b8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112bc <__cxa_atexit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #86016	; 0x15000
   112c4:	ldr	pc, [ip, #3560]!	; 0xde8

000112c8 <getgid@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #86016	; 0x15000
   112d0:	ldr	pc, [ip, #3552]!	; 0xde0

000112d4 <getgrouplist@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #86016	; 0x15000
   112dc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112e0 <memset@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #86016	; 0x15000
   112e8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112ec <__printf_chk@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #86016	; 0x15000
   112f4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112f8 <fileno@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #86016	; 0x15000
   11300:	ldr	pc, [ip, #3520]!	; 0xdc0

00011304 <__fprintf_chk@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #86016	; 0x15000
   1130c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011310 <fclose@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #86016	; 0x15000
   11318:	ldr	pc, [ip, #3504]!	; 0xdb0

0001131c <fseeko64@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #86016	; 0x15000
   11324:	ldr	pc, [ip, #3496]!	; 0xda8

00011328 <setlocale@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #86016	; 0x15000
   11330:	ldr	pc, [ip, #3488]!	; 0xda0

00011334 <endpwent@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #86016	; 0x15000
   1133c:	ldr	pc, [ip, #3480]!	; 0xd98

00011340 <strrchr@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #86016	; 0x15000
   11348:	ldr	pc, [ip, #3472]!	; 0xd90

0001134c <nl_langinfo@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #86016	; 0x15000
   11354:	ldr	pc, [ip, #3464]!	; 0xd88

00011358 <getgroups@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #86016	; 0x15000
   11360:	ldr	pc, [ip, #3456]!	; 0xd80

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #86016	; 0x15000
   1136c:	ldr	pc, [ip, #3448]!	; 0xd78

00011370 <fputs@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #86016	; 0x15000
   11378:	ldr	pc, [ip, #3440]!	; 0xd70

0001137c <strncmp@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #86016	; 0x15000
   11384:	ldr	pc, [ip, #3432]!	; 0xd68

00011388 <abort@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #86016	; 0x15000
   11390:	ldr	pc, [ip, #3424]!	; 0xd60

00011394 <getgrgid@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #86016	; 0x15000
   1139c:	ldr	pc, [ip, #3416]!	; 0xd58

000113a0 <getgrnam@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #86016	; 0x15000
   113a8:	ldr	pc, [ip, #3408]!	; 0xd50

000113ac <putchar_unlocked@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #86016	; 0x15000
   113b4:	ldr	pc, [ip, #3400]!	; 0xd48

000113b8 <__assert_fail@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #86016	; 0x15000
   113c0:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113c4 <.text>:
   113c4:	mov	fp, #0
   113c8:	mov	lr, #0
   113cc:	pop	{r1}		; (ldr r1, [sp], #4)
   113d0:	mov	r2, sp
   113d4:	push	{r2}		; (str r2, [sp, #-4]!)
   113d8:	push	{r0}		; (str r0, [sp, #-4]!)
   113dc:	ldr	ip, [pc, #16]	; 113f4 <__assert_fail@plt+0x3c>
   113e0:	push	{ip}		; (str ip, [sp, #-4]!)
   113e4:	ldr	r0, [pc, #12]	; 113f8 <__assert_fail@plt+0x40>
   113e8:	ldr	r3, [pc, #12]	; 113fc <__assert_fail@plt+0x44>
   113ec:	bl	11244 <__libc_start_main@plt>
   113f0:	bl	11388 <abort@plt>
   113f4:	andeq	r5, r1, r8, lsr ip
   113f8:	andeq	r1, r1, r0, lsl r7
   113fc:	ldrdeq	r5, [r1], -r8
   11400:	ldr	r3, [pc, #20]	; 1141c <__assert_fail@plt+0x64>
   11404:	ldr	r2, [pc, #20]	; 11420 <__assert_fail@plt+0x68>
   11408:	add	r3, pc, r3
   1140c:	ldr	r2, [r3, r2]
   11410:	cmp	r2, #0
   11414:	bxeq	lr
   11418:	b	1125c <__gmon_start__@plt>
   1141c:	strdeq	r5, [r1], -r0
   11420:	andeq	r0, r0, r4, lsl #2
   11424:	ldr	r0, [pc, #24]	; 11444 <__assert_fail@plt+0x8c>
   11428:	ldr	r3, [pc, #24]	; 11448 <__assert_fail@plt+0x90>
   1142c:	cmp	r3, r0
   11430:	bxeq	lr
   11434:	ldr	r3, [pc, #16]	; 1144c <__assert_fail@plt+0x94>
   11438:	cmp	r3, #0
   1143c:	bxeq	lr
   11440:	bx	r3
   11444:	andeq	r7, r2, r0, ror #2
   11448:	andeq	r7, r2, r0, ror #2
   1144c:	andeq	r0, r0, r0
   11450:	ldr	r0, [pc, #36]	; 1147c <__assert_fail@plt+0xc4>
   11454:	ldr	r1, [pc, #36]	; 11480 <__assert_fail@plt+0xc8>
   11458:	sub	r1, r1, r0
   1145c:	asr	r1, r1, #2
   11460:	add	r1, r1, r1, lsr #31
   11464:	asrs	r1, r1, #1
   11468:	bxeq	lr
   1146c:	ldr	r3, [pc, #16]	; 11484 <__assert_fail@plt+0xcc>
   11470:	cmp	r3, #0
   11474:	bxeq	lr
   11478:	bx	r3
   1147c:	andeq	r7, r2, r0, ror #2
   11480:	andeq	r7, r2, r0, ror #2
   11484:	andeq	r0, r0, r0
   11488:	push	{r4, lr}
   1148c:	ldr	r4, [pc, #24]	; 114ac <__assert_fail@plt+0xf4>
   11490:	ldrb	r3, [r4]
   11494:	cmp	r3, #0
   11498:	popne	{r4, pc}
   1149c:	bl	11424 <__assert_fail@plt+0x6c>
   114a0:	mov	r3, #1
   114a4:	strb	r3, [r4]
   114a8:	pop	{r4, pc}
   114ac:	andeq	r7, r2, r8, ror r1
   114b0:	b	11450 <__assert_fail@plt+0x98>
   114b4:	push	{fp, lr}
   114b8:	mov	fp, sp
   114bc:	sub	sp, sp, #56	; 0x38
   114c0:	mov	r8, r0
   114c4:	cmp	r0, #0
   114c8:	bne	116d0 <__assert_fail@plt+0x318>
   114cc:	movw	r1, #23691	; 0x5c8b
   114d0:	mov	r0, #0
   114d4:	mov	r2, #5
   114d8:	movt	r1, #1
   114dc:	bl	11190 <dcgettext@plt>
   114e0:	mov	r1, r0
   114e4:	movw	r0, #29156	; 0x71e4
   114e8:	movt	r0, #2
   114ec:	ldr	r2, [r0]
   114f0:	mov	r0, #1
   114f4:	bl	112ec <__printf_chk@plt>
   114f8:	movw	r1, #23724	; 0x5cac
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	11190 <dcgettext@plt>
   1150c:	movw	r9, #29044	; 0x7174
   11510:	movt	r9, #2
   11514:	ldr	r1, [r9]
   11518:	bl	110f4 <fputs_unlocked@plt>
   1151c:	movw	r1, #23832	; 0x5d18
   11520:	mov	r0, #0
   11524:	mov	r2, #5
   11528:	movt	r1, #1
   1152c:	bl	11190 <dcgettext@plt>
   11530:	ldr	r1, [r9]
   11534:	bl	110f4 <fputs_unlocked@plt>
   11538:	movw	r1, #24353	; 0x5f21
   1153c:	mov	r0, #0
   11540:	mov	r2, #5
   11544:	movt	r1, #1
   11548:	bl	11190 <dcgettext@plt>
   1154c:	ldr	r1, [r9]
   11550:	bl	110f4 <fputs_unlocked@plt>
   11554:	movw	r1, #24398	; 0x5f4e
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	movt	r1, #1
   11564:	bl	11190 <dcgettext@plt>
   11568:	ldr	r1, [r9]
   1156c:	bl	110f4 <fputs_unlocked@plt>
   11570:	movw	r1, #24452	; 0x5f84
   11574:	mov	r0, #0
   11578:	mov	r2, #5
   1157c:	movt	r1, #1
   11580:	bl	11190 <dcgettext@plt>
   11584:	ldr	r1, [r9]
   11588:	bl	110f4 <fputs_unlocked@plt>
   1158c:	movw	r0, #25672	; 0x6448
   11590:	mov	r6, sp
   11594:	movt	r0, #1
   11598:	mov	r1, r6
   1159c:	ldm	r0!, {r2, r3, r4, r5}
   115a0:	stmia	r1!, {r2, r3, r4, r5}
   115a4:	ldm	r0!, {r2, r3, r4, r5, r7}
   115a8:	stmia	r1!, {r2, r3, r4, r5, r7}
   115ac:	ldm	r0, {r2, r3, r4, r5, r7}
   115b0:	stm	r1, {r2, r3, r4, r5, r7}
   115b4:	movw	r1, #25002	; 0x61aa
   115b8:	movw	r5, #24523	; 0x5fcb
   115bc:	movt	r1, #1
   115c0:	movt	r5, #1
   115c4:	mov	r0, r5
   115c8:	bl	11124 <strcmp@plt>
   115cc:	cmp	r0, #0
   115d0:	ldrne	r1, [r6, #8]!
   115d4:	cmpne	r1, #0
   115d8:	bne	115c4 <__assert_fail@plt+0x20c>
   115dc:	ldr	r6, [r6, #4]
   115e0:	movw	r1, #25097	; 0x6209
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	movt	r1, #1
   115f0:	bl	11190 <dcgettext@plt>
   115f4:	movw	r2, #24614	; 0x6026
   115f8:	movw	r3, #25120	; 0x6220
   115fc:	mov	r1, r0
   11600:	mov	r0, #1
   11604:	movt	r2, #1
   11608:	movt	r3, #1
   1160c:	bl	112ec <__printf_chk@plt>
   11610:	cmp	r6, #0
   11614:	mov	r0, #5
   11618:	mov	r1, #0
   1161c:	moveq	r6, r5
   11620:	bl	11328 <setlocale@plt>
   11624:	cmp	r0, #0
   11628:	beq	11660 <__assert_fail@plt+0x2a8>
   1162c:	movw	r1, #25160	; 0x6248
   11630:	mov	r2, #3
   11634:	movt	r1, #1
   11638:	bl	1137c <strncmp@plt>
   1163c:	cmp	r0, #0
   11640:	beq	11660 <__assert_fail@plt+0x2a8>
   11644:	movw	r1, #25164	; 0x624c
   11648:	mov	r0, #0
   1164c:	mov	r2, #5
   11650:	movt	r1, #1
   11654:	bl	11190 <dcgettext@plt>
   11658:	ldr	r1, [r9]
   1165c:	bl	110f4 <fputs_unlocked@plt>
   11660:	movw	r1, #25235	; 0x6293
   11664:	mov	r0, #0
   11668:	mov	r2, #5
   1166c:	movt	r1, #1
   11670:	bl	11190 <dcgettext@plt>
   11674:	movw	r2, #25120	; 0x6220
   11678:	mov	r1, r0
   1167c:	mov	r0, #1
   11680:	mov	r3, r5
   11684:	movt	r2, #1
   11688:	bl	112ec <__printf_chk@plt>
   1168c:	movw	r1, #25262	; 0x62ae
   11690:	mov	r0, #0
   11694:	mov	r2, #5
   11698:	movt	r1, #1
   1169c:	bl	11190 <dcgettext@plt>
   116a0:	movw	r3, #23831	; 0x5d17
   116a4:	mov	r1, r0
   116a8:	movw	r0, #25030	; 0x61c6
   116ac:	cmp	r6, r5
   116b0:	mov	r2, r6
   116b4:	movt	r0, #1
   116b8:	movt	r3, #1
   116bc:	moveq	r3, r0
   116c0:	mov	r0, #1
   116c4:	bl	112ec <__printf_chk@plt>
   116c8:	mov	r0, r8
   116cc:	bl	11280 <exit@plt>
   116d0:	movw	r0, #29040	; 0x7170
   116d4:	movw	r1, #23652	; 0x5c64
   116d8:	mov	r2, #5
   116dc:	movt	r0, #2
   116e0:	movt	r1, #1
   116e4:	ldr	r5, [r0]
   116e8:	mov	r0, #0
   116ec:	bl	11190 <dcgettext@plt>
   116f0:	mov	r2, r0
   116f4:	movw	r0, #29156	; 0x71e4
   116f8:	mov	r1, #1
   116fc:	movt	r0, #2
   11700:	ldr	r3, [r0]
   11704:	mov	r0, r5
   11708:	bl	11304 <__fprintf_chk@plt>
   1170c:	b	116c8 <__assert_fail@plt+0x310>
   11710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11714:	add	fp, sp, #28
   11718:	sub	sp, sp, #20
   1171c:	mov	r4, r1
   11720:	mov	r5, r0
   11724:	bl	11118 <is_selinux_enabled@plt>
   11728:	str	r0, [sp, #16]
   1172c:	ldr	r0, [r4]
   11730:	bl	126d4 <__assert_fail@plt+0x131c>
   11734:	movw	r1, #23831	; 0x5d17
   11738:	mov	r0, #6
   1173c:	movt	r1, #1
   11740:	bl	11328 <setlocale@plt>
   11744:	movw	r6, #24618	; 0x602a
   11748:	movw	r1, #24526	; 0x5fce
   1174c:	movt	r6, #1
   11750:	movt	r1, #1
   11754:	mov	r0, r6
   11758:	bl	11364 <bindtextdomain@plt>
   1175c:	mov	r0, r6
   11760:	bl	111a8 <textdomain@plt>
   11764:	movw	r0, #9576	; 0x2568
   11768:	movt	r0, #1
   1176c:	bl	15c3c <__assert_fail@plt+0x4884>
   11770:	movw	r7, #24550	; 0x5fe6
   11774:	movw	r6, #25512	; 0x63a8
   11778:	movw	sl, #29053	; 0x717d
   1177c:	mov	r9, #0
   11780:	mov	r8, #1
   11784:	movt	r7, #1
   11788:	movt	r6, #1
   1178c:	movt	sl, #2
   11790:	mov	r0, r5
   11794:	mov	r1, r4
   11798:	mov	r2, r7
   1179c:	mov	r3, r6
   117a0:	str	r9, [sp]
   117a4:	bl	11268 <getopt_long@plt>
   117a8:	cmp	r0, #102	; 0x66
   117ac:	ble	117d4 <__assert_fail@plt+0x41c>
   117b0:	cmp	r0, #113	; 0x71
   117b4:	ble	11804 <__assert_fail@plt+0x44c>
   117b8:	cmp	r0, #114	; 0x72
   117bc:	beq	11824 <__assert_fail@plt+0x46c>
   117c0:	cmp	r0, #117	; 0x75
   117c4:	bne	11830 <__assert_fail@plt+0x478>
   117c8:	movw	r1, #29056	; 0x7180
   117cc:	movt	r1, #2
   117d0:	b	1184c <__assert_fail@plt+0x494>
   117d4:	cmp	r0, #70	; 0x46
   117d8:	ble	11860 <__assert_fail@plt+0x4a8>
   117dc:	cmp	r0, #71	; 0x47
   117e0:	beq	11844 <__assert_fail@plt+0x48c>
   117e4:	cmp	r0, #90	; 0x5a
   117e8:	bne	11854 <__assert_fail@plt+0x49c>
   117ec:	ldr	r0, [sp, #16]
   117f0:	movw	r1, #29052	; 0x717c
   117f4:	movt	r1, #2
   117f8:	cmp	r0, #0
   117fc:	bgt	1184c <__assert_fail@plt+0x494>
   11800:	b	11cd8 <__assert_fail@plt+0x920>
   11804:	cmp	r0, #103	; 0x67
   11808:	mov	r1, sl
   1180c:	beq	1184c <__assert_fail@plt+0x494>
   11810:	cmp	r0, #110	; 0x6e
   11814:	bne	11d08 <__assert_fail@plt+0x950>
   11818:	movw	r1, #29054	; 0x717e
   1181c:	movt	r1, #2
   11820:	b	1184c <__assert_fail@plt+0x494>
   11824:	movw	r1, #29055	; 0x717f
   11828:	movt	r1, #2
   1182c:	b	1184c <__assert_fail@plt+0x494>
   11830:	cmp	r0, #122	; 0x7a
   11834:	bne	11d08 <__assert_fail@plt+0x950>
   11838:	movw	r1, #29057	; 0x7181
   1183c:	movt	r1, #2
   11840:	b	1184c <__assert_fail@plt+0x494>
   11844:	movw	r1, #29058	; 0x7182
   11848:	movt	r1, #2
   1184c:	strb	r8, [r1]
   11850:	b	11790 <__assert_fail@plt+0x3d8>
   11854:	cmp	r0, #97	; 0x61
   11858:	beq	11790 <__assert_fail@plt+0x3d8>
   1185c:	b	11d08 <__assert_fail@plt+0x950>
   11860:	cmn	r0, #1
   11864:	bne	11c6c <__assert_fail@plt+0x8b4>
   11868:	movw	sl, #29032	; 0x7168
   1186c:	movw	lr, #29052	; 0x717c
   11870:	movt	sl, #2
   11874:	movt	lr, #2
   11878:	ldr	r0, [sl]
   1187c:	ldrb	r2, [lr]
   11880:	subs	ip, r5, r0
   11884:	cmpne	r2, #0
   11888:	bne	11ce4 <__assert_fail@plt+0x92c>
   1188c:	clz	r3, ip
   11890:	movw	r9, #29056	; 0x7180
   11894:	movw	r8, #29053	; 0x717d
   11898:	movw	r7, #29058	; 0x7182
   1189c:	lsr	r3, r3, #5
   118a0:	movt	r8, #2
   118a4:	movt	r9, #2
   118a8:	movt	r7, #2
   118ac:	and	r2, r3, r2
   118b0:	ldrb	r3, [r9]
   118b4:	ldrb	r6, [r8]
   118b8:	ldrb	r7, [r7]
   118bc:	add	r1, r6, r3
   118c0:	add	r1, r1, r7
   118c4:	add	r1, r1, r2
   118c8:	cmp	r1, #2
   118cc:	bcs	11cf0 <__assert_fail@plt+0x938>
   118d0:	orr	r1, r7, r2
   118d4:	orr	r3, r3, r6
   118d8:	orrs	r3, r3, r1
   118dc:	bne	1191c <__assert_fail@plt+0x564>
   118e0:	movw	r1, #29055	; 0x717f
   118e4:	movt	r1, #2
   118e8:	ldrb	r1, [r1]
   118ec:	cmp	r1, #0
   118f0:	bne	11cfc <__assert_fail@plt+0x944>
   118f4:	movw	r1, #29054	; 0x717e
   118f8:	movt	r1, #2
   118fc:	ldrb	r1, [r1]
   11900:	cmp	r1, #1
   11904:	beq	11cfc <__assert_fail@plt+0x944>
   11908:	movw	r1, #29057	; 0x7181
   1190c:	movt	r1, #2
   11910:	ldrb	r1, [r1]
   11914:	cmp	r1, #1
   11918:	beq	11d10 <__assert_fail@plt+0x958>
   1191c:	cmp	ip, #0
   11920:	beq	11a44 <__assert_fail@plt+0x68c>
   11924:	subs	r1, ip, #1
   11928:	movw	r2, #29064	; 0x7188
   1192c:	movwne	r1, #1
   11930:	movt	r2, #2
   11934:	cmp	r0, r5
   11938:	strb	r1, [r2]
   1193c:	bcs	11c54 <__assert_fail@plt+0x89c>
   11940:	movw	r9, #29068	; 0x718c
   11944:	mov	r8, #0
   11948:	movt	r9, #2
   1194c:	b	119b4 <__assert_fail@plt+0x5fc>
   11950:	ldr	r0, [r9]
   11954:	bl	11130 <getpwuid@plt>
   11958:	cmp	r0, #0
   1195c:	beq	119e0 <__assert_fail@plt+0x628>
   11960:	mov	r6, r0
   11964:	ldr	r0, [r0]
   11968:	bl	14e78 <__assert_fail@plt+0x3ac0>
   1196c:	mov	r7, r0
   11970:	ldr	r0, [r6, #8]
   11974:	movw	r2, #29072	; 0x7190
   11978:	ldr	r1, [r6, #12]
   1197c:	movt	r2, #2
   11980:	str	r0, [r2]
   11984:	str	r0, [r9]
   11988:	movw	r0, #29080	; 0x7198
   1198c:	movt	r0, #2
   11990:	str	r1, [r0]
   11994:	movw	r0, #29076	; 0x7194
   11998:	movt	r0, #2
   1199c:	str	r1, [r0]
   119a0:	mov	r0, r7
   119a4:	bl	11d94 <__assert_fail@plt+0x9dc>
   119a8:	mov	r0, r7
   119ac:	bl	12650 <__assert_fail@plt+0x1298>
   119b0:	b	11a2c <__assert_fail@plt+0x674>
   119b4:	ldr	r0, [r4, r0, lsl #2]
   119b8:	ldrb	r1, [r0]
   119bc:	cmp	r1, #0
   119c0:	beq	119e0 <__assert_fail@plt+0x628>
   119c4:	mov	r1, r9
   119c8:	mov	r2, #0
   119cc:	mov	r3, #0
   119d0:	str	r8, [sp]
   119d4:	bl	14210 <__assert_fail@plt+0x2e58>
   119d8:	cmp	r0, #0
   119dc:	beq	11950 <__assert_fail@plt+0x598>
   119e0:	bl	112b0 <__errno_location@plt>
   119e4:	ldr	r6, [r0]
   119e8:	movw	r1, #24895	; 0x613f
   119ec:	mov	r0, #0
   119f0:	mov	r2, #5
   119f4:	movt	r1, #1
   119f8:	bl	11190 <dcgettext@plt>
   119fc:	mov	r7, r0
   11a00:	ldr	r0, [sl]
   11a04:	ldr	r0, [r4, r0, lsl #2]
   11a08:	bl	140d8 <__assert_fail@plt+0x2d20>
   11a0c:	mov	r3, r0
   11a10:	mov	r0, #0
   11a14:	mov	r1, r6
   11a18:	mov	r2, r7
   11a1c:	bl	11220 <error@plt>
   11a20:	movw	r0, #28944	; 0x7110
   11a24:	movt	r0, #2
   11a28:	strb	r8, [r0]
   11a2c:	ldr	r0, [sl]
   11a30:	add	r0, r0, #1
   11a34:	cmp	r0, r5
   11a38:	str	r0, [sl]
   11a3c:	bcc	119b4 <__assert_fail@plt+0x5fc>
   11a40:	b	11c54 <__assert_fail@plt+0x89c>
   11a44:	cmp	r2, #0
   11a48:	mov	r5, lr
   11a4c:	bne	11a70 <__assert_fail@plt+0x6b8>
   11a50:	cmp	r3, #0
   11a54:	bne	11aa0 <__assert_fail@plt+0x6e8>
   11a58:	movw	r0, #24853	; 0x6115
   11a5c:	movt	r0, #1
   11a60:	bl	1122c <getenv@plt>
   11a64:	mov	lr, r5
   11a68:	cmp	r0, #0
   11a6c:	bne	11aa0 <__assert_fail@plt+0x6e8>
   11a70:	ldr	r0, [sp, #16]
   11a74:	cmp	r0, #1
   11a78:	blt	11aa0 <__assert_fail@plt+0x6e8>
   11a7c:	movw	r0, #29060	; 0x7184
   11a80:	movt	r0, #2
   11a84:	bl	111f0 <getcon@plt>
   11a88:	mov	lr, r5
   11a8c:	cmp	r0, #0
   11a90:	beq	11aa0 <__assert_fail@plt+0x6e8>
   11a94:	ldrb	r0, [lr]
   11a98:	cmp	r0, #1
   11a9c:	beq	11d34 <__assert_fail@plt+0x97c>
   11aa0:	ldrb	r0, [r9]
   11aa4:	cmp	r0, #1
   11aa8:	bne	11b04 <__assert_fail@plt+0x74c>
   11aac:	movw	r0, #29055	; 0x717f
   11ab0:	movt	r0, #2
   11ab4:	ldrb	r0, [r0]
   11ab8:	cmp	r0, #0
   11abc:	bne	11b80 <__assert_fail@plt+0x7c8>
   11ac0:	bl	112b0 <__errno_location@plt>
   11ac4:	mov	r4, r0
   11ac8:	mov	r0, #0
   11acc:	str	r0, [r4]
   11ad0:	bl	111b4 <geteuid@plt>
   11ad4:	movw	r1, #29068	; 0x718c
   11ad8:	mov	lr, r5
   11adc:	cmn	r0, #1
   11ae0:	movt	r1, #2
   11ae4:	str	r0, [r1]
   11ae8:	bne	11b30 <__assert_fail@plt+0x778>
   11aec:	ldr	r4, [r4]
   11af0:	cmp	r4, #0
   11af4:	beq	11b30 <__assert_fail@plt+0x778>
   11af8:	movw	r1, #24912	; 0x6150
   11afc:	movt	r1, #1
   11b00:	b	11d78 <__assert_fail@plt+0x9c0>
   11b04:	ldrb	r0, [r8]
   11b08:	cmp	r0, #0
   11b0c:	bne	11bf0 <__assert_fail@plt+0x838>
   11b10:	movw	r0, #29058	; 0x7182
   11b14:	movt	r0, #2
   11b18:	ldrb	r0, [r0]
   11b1c:	cmp	r0, #0
   11b20:	bne	11b80 <__assert_fail@plt+0x7c8>
   11b24:	ldrb	r0, [lr]
   11b28:	cmp	r0, #0
   11b2c:	beq	11ac0 <__assert_fail@plt+0x708>
   11b30:	ldrb	r0, [r9]
   11b34:	cmp	r0, #1
   11b38:	bne	11b54 <__assert_fail@plt+0x79c>
   11b3c:	movw	r0, #29055	; 0x717f
   11b40:	movt	r0, #2
   11b44:	ldrb	r0, [r0]
   11b48:	cmp	r0, #0
   11b4c:	bne	11b80 <__assert_fail@plt+0x7c8>
   11b50:	b	11c4c <__assert_fail@plt+0x894>
   11b54:	ldrb	r0, [r8]
   11b58:	cmp	r0, #0
   11b5c:	bne	11bf0 <__assert_fail@plt+0x838>
   11b60:	movw	r0, #29058	; 0x7182
   11b64:	movt	r0, #2
   11b68:	ldrb	r0, [r0]
   11b6c:	cmp	r0, #0
   11b70:	bne	11b80 <__assert_fail@plt+0x7c8>
   11b74:	ldrb	r0, [lr]
   11b78:	cmp	r0, #0
   11b7c:	bne	11bb8 <__assert_fail@plt+0x800>
   11b80:	bl	112b0 <__errno_location@plt>
   11b84:	mov	r4, r0
   11b88:	mov	r0, #0
   11b8c:	str	r0, [r4]
   11b90:	bl	11148 <getuid@plt>
   11b94:	movw	r1, #29072	; 0x7190
   11b98:	mov	lr, r5
   11b9c:	cmn	r0, #1
   11ba0:	movt	r1, #2
   11ba4:	str	r0, [r1]
   11ba8:	bne	11bb8 <__assert_fail@plt+0x800>
   11bac:	ldr	r4, [r4]
   11bb0:	cmp	r4, #0
   11bb4:	bne	11d70 <__assert_fail@plt+0x9b8>
   11bb8:	ldrb	r0, [r9]
   11bbc:	cmp	r0, #0
   11bc0:	bne	11c4c <__assert_fail@plt+0x894>
   11bc4:	ldrb	r0, [r8]
   11bc8:	cmp	r0, #0
   11bcc:	bne	11bf0 <__assert_fail@plt+0x838>
   11bd0:	movw	r0, #29058	; 0x7182
   11bd4:	movt	r0, #2
   11bd8:	ldrb	r0, [r0]
   11bdc:	cmp	r0, #0
   11be0:	bne	11bf0 <__assert_fail@plt+0x838>
   11be4:	ldrb	r0, [lr]
   11be8:	cmp	r0, #0
   11bec:	bne	11c4c <__assert_fail@plt+0x894>
   11bf0:	bl	112b0 <__errno_location@plt>
   11bf4:	mov	r6, #0
   11bf8:	mov	r4, r0
   11bfc:	str	r6, [r0]
   11c00:	bl	111cc <getegid@plt>
   11c04:	movw	r1, #29076	; 0x7194
   11c08:	cmn	r0, #1
   11c0c:	movt	r1, #2
   11c10:	str	r0, [r1]
   11c14:	bne	11c24 <__assert_fail@plt+0x86c>
   11c18:	ldr	r5, [r4]
   11c1c:	cmp	r5, #0
   11c20:	bne	11d40 <__assert_fail@plt+0x988>
   11c24:	str	r6, [r4]
   11c28:	bl	112c8 <getgid@plt>
   11c2c:	movw	r1, #29080	; 0x7198
   11c30:	cmn	r0, #1
   11c34:	movt	r1, #2
   11c38:	str	r0, [r1]
   11c3c:	bne	11c4c <__assert_fail@plt+0x894>
   11c40:	ldr	r4, [r4]
   11c44:	cmp	r4, #0
   11c48:	bne	11d64 <__assert_fail@plt+0x9ac>
   11c4c:	mov	r0, #0
   11c50:	bl	11d94 <__assert_fail@plt+0x9dc>
   11c54:	movw	r0, #28944	; 0x7110
   11c58:	movt	r0, #2
   11c5c:	ldrb	r0, [r0]
   11c60:	eor	r0, r0, #1
   11c64:	sub	sp, fp, #28
   11c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c6c:	cmn	r0, #3
   11c70:	bne	11cc8 <__assert_fail@plt+0x910>
   11c74:	movw	r0, #28948	; 0x7114
   11c78:	movw	r2, #24643	; 0x6043
   11c7c:	mov	r1, #0
   11c80:	movw	r7, #24628	; 0x6034
   11c84:	movt	r0, #2
   11c88:	movt	r2, #1
   11c8c:	str	r1, [sp, #8]
   11c90:	movw	r1, #24523	; 0x5fcb
   11c94:	movt	r7, #1
   11c98:	ldr	r3, [r0]
   11c9c:	movw	r0, #29044	; 0x7174
   11ca0:	str	r2, [sp, #4]
   11ca4:	movw	r2, #24614	; 0x6026
   11ca8:	movt	r1, #1
   11cac:	str	r7, [sp]
   11cb0:	movt	r0, #2
   11cb4:	movt	r2, #1
   11cb8:	ldr	r0, [r0]
   11cbc:	bl	14960 <__assert_fail@plt+0x35a8>
   11cc0:	mov	r0, #0
   11cc4:	bl	11280 <exit@plt>
   11cc8:	cmn	r0, #2
   11ccc:	bne	11d08 <__assert_fail@plt+0x950>
   11cd0:	mov	r0, #0
   11cd4:	bl	114b4 <__assert_fail@plt+0xfc>
   11cd8:	movw	r1, #24559	; 0x5fef
   11cdc:	movt	r1, #1
   11ce0:	b	11d18 <__assert_fail@plt+0x960>
   11ce4:	movw	r1, #24659	; 0x6053
   11ce8:	movt	r1, #1
   11cec:	b	11d18 <__assert_fail@plt+0x960>
   11cf0:	movw	r1, #24709	; 0x6085
   11cf4:	movt	r1, #1
   11cf8:	b	11d18 <__assert_fail@plt+0x960>
   11cfc:	movw	r1, #24753	; 0x60b1
   11d00:	movt	r1, #1
   11d04:	b	11d18 <__assert_fail@plt+0x960>
   11d08:	mov	r0, #1
   11d0c:	bl	114b4 <__assert_fail@plt+0xfc>
   11d10:	movw	r1, #24807	; 0x60e7
   11d14:	movt	r1, #1
   11d18:	mov	r0, #0
   11d1c:	mov	r2, #5
   11d20:	bl	11190 <dcgettext@plt>
   11d24:	mov	r2, r0
   11d28:	mov	r0, #1
   11d2c:	mov	r1, #0
   11d30:	bl	11220 <error@plt>
   11d34:	movw	r1, #24869	; 0x6125
   11d38:	movt	r1, #1
   11d3c:	b	11d18 <__assert_fail@plt+0x960>
   11d40:	movw	r1, #24957	; 0x617d
   11d44:	mov	r0, #0
   11d48:	mov	r2, #5
   11d4c:	movt	r1, #1
   11d50:	bl	11190 <dcgettext@plt>
   11d54:	mov	r2, r0
   11d58:	mov	r0, #1
   11d5c:	mov	r1, r5
   11d60:	bl	11220 <error@plt>
   11d64:	movw	r1, #24982	; 0x6196
   11d68:	movt	r1, #1
   11d6c:	b	11d78 <__assert_fail@plt+0x9c0>
   11d70:	movw	r1, #24937	; 0x6169
   11d74:	movt	r1, #1
   11d78:	mov	r0, #0
   11d7c:	mov	r2, #5
   11d80:	bl	11190 <dcgettext@plt>
   11d84:	mov	r2, r0
   11d88:	mov	r0, #1
   11d8c:	mov	r1, r4
   11d90:	bl	11220 <error@plt>
   11d94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11d98:	add	fp, sp, #24
   11d9c:	sub	sp, sp, #16
   11da0:	mov	r4, r0
   11da4:	movw	r0, #29056	; 0x7180
   11da8:	movt	r0, #2
   11dac:	ldrb	r0, [r0]
   11db0:	cmp	r0, #1
   11db4:	bne	11e0c <__assert_fail@plt+0xa54>
   11db8:	movw	r0, #29055	; 0x717f
   11dbc:	movw	r1, #29072	; 0x7190
   11dc0:	movw	r2, #29068	; 0x718c
   11dc4:	movt	r0, #2
   11dc8:	movt	r1, #2
   11dcc:	movt	r2, #2
   11dd0:	ldrb	r0, [r0]
   11dd4:	cmp	r0, #0
   11dd8:	movw	r0, #29054	; 0x717e
   11ddc:	movt	r0, #2
   11de0:	movne	r2, r1
   11de4:	ldrb	r0, [r0]
   11de8:	ldr	r4, [r2]
   11dec:	cmp	r0, #0
   11df0:	beq	11e5c <__assert_fail@plt+0xaa4>
   11df4:	mov	r0, r4
   11df8:	bl	11130 <getpwuid@plt>
   11dfc:	cmp	r0, #0
   11e00:	beq	11f18 <__assert_fail@plt+0xb60>
   11e04:	ldr	r0, [r0]
   11e08:	b	11f7c <__assert_fail@plt+0xbc4>
   11e0c:	movw	r0, #29053	; 0x717d
   11e10:	movt	r0, #2
   11e14:	ldrb	r0, [r0]
   11e18:	cmp	r0, #1
   11e1c:	bne	11e64 <__assert_fail@plt+0xaac>
   11e20:	movw	r0, #29055	; 0x717f
   11e24:	movw	r1, #29080	; 0x7198
   11e28:	movw	r2, #29076	; 0x7194
   11e2c:	movt	r0, #2
   11e30:	movt	r1, #2
   11e34:	movt	r2, #2
   11e38:	ldrb	r0, [r0]
   11e3c:	cmp	r0, #0
   11e40:	movne	r2, r1
   11e44:	movw	r1, #29054	; 0x717e
   11e48:	movt	r1, #2
   11e4c:	ldr	r0, [r2]
   11e50:	ldrb	r1, [r1]
   11e54:	bl	124bc <__assert_fail@plt+0x1104>
   11e58:	b	11ed0 <__assert_fail@plt+0xb18>
   11e5c:	mov	r5, #0
   11e60:	b	11f68 <__assert_fail@plt+0xbb0>
   11e64:	movw	r0, #29058	; 0x7182
   11e68:	movt	r0, #2
   11e6c:	ldrb	r0, [r0]
   11e70:	cmp	r0, #1
   11e74:	bne	11ee8 <__assert_fail@plt+0xb30>
   11e78:	movw	r0, #29076	; 0x7194
   11e7c:	movw	r7, #29054	; 0x717e
   11e80:	mov	r6, #32
   11e84:	movt	r0, #2
   11e88:	movt	r7, #2
   11e8c:	ldr	r3, [r0]
   11e90:	movw	r0, #29080	; 0x7198
   11e94:	ldrb	r7, [r7]
   11e98:	movt	r0, #2
   11e9c:	ldr	r2, [r0]
   11ea0:	movw	r0, #29072	; 0x7190
   11ea4:	movt	r0, #2
   11ea8:	ldr	r1, [r0]
   11eac:	movw	r0, #29057	; 0x7181
   11eb0:	str	r7, [sp]
   11eb4:	movt	r0, #2
   11eb8:	ldrb	r0, [r0]
   11ebc:	cmp	r0, #0
   11ec0:	mov	r0, r4
   11ec4:	movwne	r6, #0
   11ec8:	str	r6, [sp, #4]
   11ecc:	bl	12350 <__assert_fail@plt+0xf98>
   11ed0:	movw	r1, #28944	; 0x7110
   11ed4:	movt	r1, #2
   11ed8:	ldrb	r2, [r1]
   11edc:	and	r0, r2, r0
   11ee0:	strb	r0, [r1]
   11ee4:	b	11f8c <__assert_fail@plt+0xbd4>
   11ee8:	movw	r0, #29052	; 0x717c
   11eec:	movt	r0, #2
   11ef0:	ldrb	r0, [r0]
   11ef4:	cmp	r0, #1
   11ef8:	bne	11fec <__assert_fail@plt+0xc34>
   11efc:	movw	r0, #29044	; 0x7174
   11f00:	movt	r0, #2
   11f04:	ldr	r1, [r0]
   11f08:	movw	r0, #29060	; 0x7184
   11f0c:	movt	r0, #2
   11f10:	ldr	r0, [r0]
   11f14:	b	11f88 <__assert_fail@plt+0xbd0>
   11f18:	movw	r1, #25348	; 0x6304
   11f1c:	mov	r0, #0
   11f20:	mov	r2, #5
   11f24:	mov	r5, #0
   11f28:	movt	r1, #1
   11f2c:	bl	11190 <dcgettext@plt>
   11f30:	movw	r2, #29084	; 0x719c
   11f34:	mov	r6, r0
   11f38:	mov	r0, r4
   11f3c:	mov	r1, #0
   11f40:	movt	r2, #2
   11f44:	bl	12678 <__assert_fail@plt+0x12c0>
   11f48:	mov	r3, r0
   11f4c:	mov	r0, #0
   11f50:	mov	r1, #0
   11f54:	mov	r2, r6
   11f58:	bl	11220 <error@plt>
   11f5c:	movw	r0, #28944	; 0x7110
   11f60:	movt	r0, #2
   11f64:	strb	r5, [r0]
   11f68:	movw	r2, #29084	; 0x719c
   11f6c:	mov	r0, r4
   11f70:	mov	r1, r5
   11f74:	movt	r2, #2
   11f78:	bl	12678 <__assert_fail@plt+0x12c0>
   11f7c:	movw	r1, #29044	; 0x7174
   11f80:	movt	r1, #2
   11f84:	ldr	r1, [r1]
   11f88:	bl	110f4 <fputs_unlocked@plt>
   11f8c:	movw	r0, #29057	; 0x7181
   11f90:	movt	r0, #2
   11f94:	ldrb	r1, [r0]
   11f98:	cmp	r1, #1
   11f9c:	bne	11fc4 <__assert_fail@plt+0xc0c>
   11fa0:	movw	r0, #29064	; 0x7188
   11fa4:	movt	r0, #2
   11fa8:	ldrb	r0, [r0]
   11fac:	cmp	r0, #0
   11fb0:	movwne	r0, #29058	; 0x7182
   11fb4:	movtne	r0, #2
   11fb8:	ldrbne	r0, [r0]
   11fbc:	cmpne	r0, #0
   11fc0:	bne	11fdc <__assert_fail@plt+0xc24>
   11fc4:	mov	r0, #10
   11fc8:	cmp	r1, #0
   11fcc:	movwne	r0, #0
   11fd0:	bl	113ac <putchar_unlocked@plt>
   11fd4:	sub	sp, fp, #24
   11fd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11fdc:	mov	r0, #0
   11fe0:	bl	113ac <putchar_unlocked@plt>
   11fe4:	mov	r0, #0
   11fe8:	b	11fd0 <__assert_fail@plt+0xc18>
   11fec:	movw	r1, #25395	; 0x6333
   11ff0:	mov	r0, #0
   11ff4:	mov	r2, #5
   11ff8:	movt	r1, #1
   11ffc:	bl	11190 <dcgettext@plt>
   12000:	movw	r7, #29072	; 0x7190
   12004:	mov	r5, r0
   12008:	movw	r2, #29084	; 0x719c
   1200c:	mov	r1, #0
   12010:	movt	r7, #2
   12014:	movt	r2, #2
   12018:	ldr	r0, [r7]
   1201c:	bl	12678 <__assert_fail@plt+0x12c0>
   12020:	mov	r2, r0
   12024:	mov	r0, #1
   12028:	mov	r1, r5
   1202c:	bl	112ec <__printf_chk@plt>
   12030:	ldr	r0, [r7]
   12034:	bl	11130 <getpwuid@plt>
   12038:	mov	r5, r0
   1203c:	cmp	r0, #0
   12040:	beq	12058 <__assert_fail@plt+0xca0>
   12044:	ldr	r2, [r5]
   12048:	movw	r1, #25380	; 0x6324
   1204c:	mov	r0, #1
   12050:	movt	r1, #1
   12054:	bl	112ec <__printf_chk@plt>
   12058:	movw	r1, #25385	; 0x6329
   1205c:	mov	r0, #0
   12060:	mov	r2, #5
   12064:	movt	r1, #1
   12068:	bl	11190 <dcgettext@plt>
   1206c:	movw	r8, #29080	; 0x7198
   12070:	mov	r6, r0
   12074:	movw	r2, #29105	; 0x71b1
   12078:	mov	r1, #0
   1207c:	movt	r8, #2
   12080:	movt	r2, #2
   12084:	ldr	r0, [r8]
   12088:	bl	12678 <__assert_fail@plt+0x12c0>
   1208c:	mov	r2, r0
   12090:	mov	r0, #1
   12094:	mov	r1, r6
   12098:	bl	112ec <__printf_chk@plt>
   1209c:	ldr	r0, [r8]
   120a0:	bl	11394 <getgrgid@plt>
   120a4:	cmp	r0, #0
   120a8:	beq	120c0 <__assert_fail@plt+0xd08>
   120ac:	ldr	r2, [r0]
   120b0:	movw	r1, #25380	; 0x6324
   120b4:	mov	r0, #1
   120b8:	movt	r1, #1
   120bc:	bl	112ec <__printf_chk@plt>
   120c0:	ldr	r0, [r7]
   120c4:	movw	r7, #29068	; 0x718c
   120c8:	movt	r7, #2
   120cc:	ldr	r1, [r7]
   120d0:	cmp	r1, r0
   120d4:	beq	12144 <__assert_fail@plt+0xd8c>
   120d8:	movw	r1, #25393	; 0x6331
   120dc:	mov	r0, #0
   120e0:	mov	r2, #5
   120e4:	mov	r5, #0
   120e8:	movt	r1, #1
   120ec:	bl	11190 <dcgettext@plt>
   120f0:	mov	r6, r0
   120f4:	ldr	r0, [r7]
   120f8:	movw	r2, #29084	; 0x719c
   120fc:	mov	r1, #0
   12100:	movt	r2, #2
   12104:	bl	12678 <__assert_fail@plt+0x12c0>
   12108:	mov	r2, r0
   1210c:	mov	r0, #1
   12110:	mov	r1, r6
   12114:	bl	112ec <__printf_chk@plt>
   12118:	ldr	r0, [r7]
   1211c:	bl	11130 <getpwuid@plt>
   12120:	cmp	r0, #0
   12124:	beq	12144 <__assert_fail@plt+0xd8c>
   12128:	ldr	r2, [r0]
   1212c:	movw	r1, #25380	; 0x6324
   12130:	mov	r6, r0
   12134:	mov	r0, #1
   12138:	movt	r1, #1
   1213c:	bl	112ec <__printf_chk@plt>
   12140:	mov	r5, r6
   12144:	movw	r7, #29076	; 0x7194
   12148:	ldr	r0, [r8]
   1214c:	movt	r7, #2
   12150:	ldr	r1, [r7]
   12154:	cmp	r1, r0
   12158:	beq	121bc <__assert_fail@plt+0xe04>
   1215c:	movw	r1, #25402	; 0x633a
   12160:	mov	r0, #0
   12164:	mov	r2, #5
   12168:	movt	r1, #1
   1216c:	bl	11190 <dcgettext@plt>
   12170:	mov	r6, r0
   12174:	ldr	r0, [r7]
   12178:	movw	r2, #29105	; 0x71b1
   1217c:	mov	r1, #0
   12180:	movt	r2, #2
   12184:	bl	12678 <__assert_fail@plt+0x12c0>
   12188:	mov	r2, r0
   1218c:	mov	r0, #1
   12190:	mov	r1, r6
   12194:	bl	112ec <__printf_chk@plt>
   12198:	ldr	r0, [r7]
   1219c:	bl	11394 <getgrgid@plt>
   121a0:	cmp	r0, #0
   121a4:	beq	121bc <__assert_fail@plt+0xe04>
   121a8:	ldr	r2, [r0]
   121ac:	movw	r1, #25380	; 0x6324
   121b0:	mov	r0, #1
   121b4:	movt	r1, #1
   121b8:	bl	112ec <__printf_chk@plt>
   121bc:	cmp	r4, #0
   121c0:	beq	121d4 <__assert_fail@plt+0xe1c>
   121c4:	cmp	r5, #0
   121c8:	ldrne	r1, [r5, #12]
   121cc:	mvneq	r1, #0
   121d0:	b	121d8 <__assert_fail@plt+0xe20>
   121d4:	ldr	r1, [r7]
   121d8:	add	r2, sp, #12
   121dc:	mov	r0, r4
   121e0:	bl	14efc <__assert_fail@plt+0x3b44>
   121e4:	cmn	r0, #1
   121e8:	ble	122d0 <__assert_fail@plt+0xf18>
   121ec:	mov	r5, r0
   121f0:	cmp	r0, #0
   121f4:	beq	1228c <__assert_fail@plt+0xed4>
   121f8:	movw	r1, #25489	; 0x6391
   121fc:	mov	r0, #0
   12200:	mov	r2, #5
   12204:	mov	r7, #0
   12208:	movt	r1, #1
   1220c:	bl	11190 <dcgettext@plt>
   12210:	movw	r6, #29044	; 0x7174
   12214:	movt	r6, #2
   12218:	ldr	r1, [r6]
   1221c:	bl	110f4 <fputs_unlocked@plt>
   12220:	movw	r4, #29105	; 0x71b1
   12224:	movw	r8, #25380	; 0x6324
   12228:	movt	r4, #2
   1222c:	movt	r8, #1
   12230:	cmp	r7, #0
   12234:	beq	12240 <__assert_fail@plt+0xe88>
   12238:	mov	r0, #44	; 0x2c
   1223c:	bl	113ac <putchar_unlocked@plt>
   12240:	ldr	r0, [sp, #12]
   12244:	mov	r1, #0
   12248:	mov	r2, r4
   1224c:	ldr	r0, [r0, r7, lsl #2]
   12250:	bl	12678 <__assert_fail@plt+0x12c0>
   12254:	ldr	r1, [r6]
   12258:	bl	110f4 <fputs_unlocked@plt>
   1225c:	ldr	r0, [sp, #12]
   12260:	ldr	r0, [r0, r7, lsl #2]
   12264:	bl	11394 <getgrgid@plt>
   12268:	cmp	r0, #0
   1226c:	beq	12280 <__assert_fail@plt+0xec8>
   12270:	ldr	r2, [r0]
   12274:	mov	r0, #1
   12278:	mov	r1, r8
   1227c:	bl	112ec <__printf_chk@plt>
   12280:	add	r7, r7, #1
   12284:	cmp	r5, r7
   12288:	bne	12230 <__assert_fail@plt+0xe78>
   1228c:	ldr	r0, [sp, #12]
   12290:	bl	12650 <__assert_fail@plt+0x1298>
   12294:	movw	r4, #29060	; 0x7184
   12298:	movt	r4, #2
   1229c:	ldr	r0, [r4]
   122a0:	cmp	r0, #0
   122a4:	beq	11f8c <__assert_fail@plt+0xbd4>
   122a8:	movw	r1, #25498	; 0x639a
   122ac:	mov	r0, #0
   122b0:	mov	r2, #5
   122b4:	movt	r1, #1
   122b8:	bl	11190 <dcgettext@plt>
   122bc:	ldr	r2, [r4]
   122c0:	mov	r1, r0
   122c4:	mov	r0, #1
   122c8:	bl	112ec <__printf_chk@plt>
   122cc:	b	11f8c <__assert_fail@plt+0xbd4>
   122d0:	bl	112b0 <__errno_location@plt>
   122d4:	ldr	r5, [r0]
   122d8:	cmp	r4, #0
   122dc:	beq	12318 <__assert_fail@plt+0xf60>
   122e0:	movw	r1, #25411	; 0x6343
   122e4:	mov	r0, #0
   122e8:	mov	r2, #5
   122ec:	movt	r1, #1
   122f0:	bl	11190 <dcgettext@plt>
   122f4:	mov	r6, r0
   122f8:	mov	r0, r4
   122fc:	bl	140d8 <__assert_fail@plt+0x2d20>
   12300:	mov	r3, r0
   12304:	mov	r0, #0
   12308:	mov	r1, r5
   1230c:	mov	r2, r6
   12310:	bl	11220 <error@plt>
   12314:	b	1233c <__assert_fail@plt+0xf84>
   12318:	movw	r1, #25444	; 0x6364
   1231c:	mov	r0, #0
   12320:	mov	r2, #5
   12324:	movt	r1, #1
   12328:	bl	11190 <dcgettext@plt>
   1232c:	mov	r2, r0
   12330:	mov	r0, #0
   12334:	mov	r1, r5
   12338:	bl	11220 <error@plt>
   1233c:	movw	r0, #28944	; 0x7110
   12340:	mov	r1, #0
   12344:	movt	r0, #2
   12348:	strb	r1, [r0]
   1234c:	b	11f8c <__assert_fail@plt+0xbd4>
   12350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12354:	add	fp, sp, #28
   12358:	sub	sp, sp, #4
   1235c:	ldr	r9, [fp, #8]
   12360:	mov	r8, r3
   12364:	mov	r5, r2
   12368:	mov	r4, r0
   1236c:	cmp	r0, #0
   12370:	beq	12390 <__assert_fail@plt+0xfd8>
   12374:	mov	r0, r1
   12378:	bl	11130 <getpwuid@plt>
   1237c:	cmp	r0, #0
   12380:	mov	r7, r0
   12384:	mov	r6, r0
   12388:	movwne	r7, #1
   1238c:	b	12398 <__assert_fail@plt+0xfe0>
   12390:	mov	r6, #0
   12394:	mov	r7, #1
   12398:	ldr	sl, [fp, #12]
   1239c:	mov	r0, r5
   123a0:	mov	r1, r9
   123a4:	bl	124bc <__assert_fail@plt+0x1104>
   123a8:	and	r7, r7, r0
   123ac:	cmp	r8, r5
   123b0:	beq	123cc <__assert_fail@plt+0x1014>
   123b4:	mov	r0, sl
   123b8:	bl	113ac <putchar_unlocked@plt>
   123bc:	mov	r0, r8
   123c0:	mov	r1, r9
   123c4:	bl	124bc <__assert_fail@plt+0x1104>
   123c8:	and	r7, r7, r0
   123cc:	cmp	r6, #0
   123d0:	mov	r1, r8
   123d4:	mov	r2, sp
   123d8:	mov	r0, r4
   123dc:	ldrne	r1, [r6, #12]
   123e0:	bl	14efc <__assert_fail@plt+0x3b44>
   123e4:	cmp	r0, #0
   123e8:	blt	12440 <__assert_fail@plt+0x1088>
   123ec:	beq	12434 <__assert_fail@plt+0x107c>
   123f0:	mov	r6, r0
   123f4:	mov	r4, #0
   123f8:	ldr	r0, [sp]
   123fc:	ldr	r0, [r0, r4, lsl #2]
   12400:	cmp	r0, r5
   12404:	cmpne	r0, r8
   12408:	beq	12428 <__assert_fail@plt+0x1070>
   1240c:	mov	r0, sl
   12410:	bl	113ac <putchar_unlocked@plt>
   12414:	ldr	r0, [sp]
   12418:	mov	r1, r9
   1241c:	ldr	r0, [r0, r4, lsl #2]
   12420:	bl	124bc <__assert_fail@plt+0x1104>
   12424:	and	r7, r7, r0
   12428:	add	r4, r4, #1
   1242c:	cmp	r6, r4
   12430:	bne	123f8 <__assert_fail@plt+0x1040>
   12434:	ldr	r0, [sp]
   12438:	bl	12650 <__assert_fail@plt+0x1298>
   1243c:	b	124b0 <__assert_fail@plt+0x10f8>
   12440:	bl	112b0 <__errno_location@plt>
   12444:	ldr	r6, [r0]
   12448:	cmp	r4, #0
   1244c:	beq	12488 <__assert_fail@plt+0x10d0>
   12450:	movw	r1, #25411	; 0x6343
   12454:	mov	r0, #0
   12458:	mov	r2, #5
   1245c:	movt	r1, #1
   12460:	bl	11190 <dcgettext@plt>
   12464:	mov	r5, r0
   12468:	mov	r0, r4
   1246c:	bl	140d8 <__assert_fail@plt+0x2d20>
   12470:	mov	r3, r0
   12474:	mov	r0, #0
   12478:	mov	r1, r6
   1247c:	mov	r2, r5
   12480:	bl	11220 <error@plt>
   12484:	b	124ac <__assert_fail@plt+0x10f4>
   12488:	movw	r1, #25444	; 0x6364
   1248c:	mov	r0, #0
   12490:	mov	r2, #5
   12494:	movt	r1, #1
   12498:	bl	11190 <dcgettext@plt>
   1249c:	mov	r2, r0
   124a0:	mov	r0, #0
   124a4:	mov	r1, r6
   124a8:	bl	11220 <error@plt>
   124ac:	mov	r7, #0
   124b0:	and	r0, r7, #1
   124b4:	sub	sp, fp, #28
   124b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124bc:	push	{r4, r5, fp, lr}
   124c0:	add	fp, sp, #8
   124c4:	mov	r5, r0
   124c8:	mov	r4, #1
   124cc:	cmp	r1, #0
   124d0:	beq	1251c <__assert_fail@plt+0x1164>
   124d4:	mov	r0, r5
   124d8:	bl	11394 <getgrgid@plt>
   124dc:	cmp	r0, #0
   124e0:	beq	124f0 <__assert_fail@plt+0x1138>
   124e4:	ldr	r0, [r0]
   124e8:	mov	r4, #1
   124ec:	b	12530 <__assert_fail@plt+0x1178>
   124f0:	movw	r1, #25728	; 0x6480
   124f4:	mov	r0, #0
   124f8:	mov	r2, #5
   124fc:	mov	r4, #0
   12500:	movt	r1, #1
   12504:	bl	11190 <dcgettext@plt>
   12508:	mov	r2, r0
   1250c:	mov	r0, #0
   12510:	mov	r1, #0
   12514:	mov	r3, r5
   12518:	bl	11220 <error@plt>
   1251c:	movw	r2, #29126	; 0x71c6
   12520:	mov	r0, r5
   12524:	mov	r1, #0
   12528:	movt	r2, #2
   1252c:	bl	12678 <__assert_fail@plt+0x12c0>
   12530:	movw	r1, #29044	; 0x7174
   12534:	movt	r1, #2
   12538:	ldr	r1, [r1]
   1253c:	bl	110f4 <fputs_unlocked@plt>
   12540:	mov	r0, r4
   12544:	pop	{r4, r5, fp, pc}
   12548:	movw	r1, #29148	; 0x71dc
   1254c:	movt	r1, #2
   12550:	str	r0, [r1]
   12554:	bx	lr
   12558:	movw	r1, #29152	; 0x71e0
   1255c:	movt	r1, #2
   12560:	strb	r0, [r1]
   12564:	bx	lr
   12568:	push	{r4, r5, r6, sl, fp, lr}
   1256c:	add	fp, sp, #16
   12570:	sub	sp, sp, #8
   12574:	movw	r0, #29044	; 0x7174
   12578:	movt	r0, #2
   1257c:	ldr	r0, [r0]
   12580:	bl	1546c <__assert_fail@plt+0x40b4>
   12584:	cmp	r0, #0
   12588:	beq	125b0 <__assert_fail@plt+0x11f8>
   1258c:	movw	r0, #29152	; 0x71e0
   12590:	movt	r0, #2
   12594:	ldrb	r0, [r0]
   12598:	cmp	r0, #0
   1259c:	beq	125d0 <__assert_fail@plt+0x1218>
   125a0:	bl	112b0 <__errno_location@plt>
   125a4:	ldr	r0, [r0]
   125a8:	cmp	r0, #32
   125ac:	bne	125d0 <__assert_fail@plt+0x1218>
   125b0:	movw	r0, #29040	; 0x7170
   125b4:	movt	r0, #2
   125b8:	ldr	r0, [r0]
   125bc:	bl	1546c <__assert_fail@plt+0x40b4>
   125c0:	cmp	r0, #0
   125c4:	subeq	sp, fp, #16
   125c8:	popeq	{r4, r5, r6, sl, fp, pc}
   125cc:	b	12640 <__assert_fail@plt+0x1288>
   125d0:	movw	r1, #25777	; 0x64b1
   125d4:	mov	r0, #0
   125d8:	mov	r2, #5
   125dc:	movt	r1, #1
   125e0:	bl	11190 <dcgettext@plt>
   125e4:	mov	r4, r0
   125e8:	movw	r0, #29148	; 0x71dc
   125ec:	movt	r0, #2
   125f0:	ldr	r6, [r0]
   125f4:	bl	112b0 <__errno_location@plt>
   125f8:	ldr	r5, [r0]
   125fc:	cmp	r6, #0
   12600:	bne	1261c <__assert_fail@plt+0x1264>
   12604:	movw	r2, #25793	; 0x64c1
   12608:	mov	r0, #0
   1260c:	mov	r1, r5
   12610:	mov	r3, r4
   12614:	movt	r2, #1
   12618:	b	1263c <__assert_fail@plt+0x1284>
   1261c:	mov	r0, r6
   12620:	bl	13e98 <__assert_fail@plt+0x2ae0>
   12624:	movw	r2, #25789	; 0x64bd
   12628:	mov	r3, r0
   1262c:	str	r4, [sp]
   12630:	mov	r0, #0
   12634:	mov	r1, r5
   12638:	movt	r2, #1
   1263c:	bl	11220 <error@plt>
   12640:	movw	r0, #28952	; 0x7118
   12644:	movt	r0, #2
   12648:	ldr	r0, [r0]
   1264c:	bl	11160 <_exit@plt>
   12650:	push	{r4, r5, r6, sl, fp, lr}
   12654:	add	fp, sp, #16
   12658:	mov	r4, r0
   1265c:	bl	112b0 <__errno_location@plt>
   12660:	ldr	r6, [r0]
   12664:	mov	r5, r0
   12668:	mov	r0, r4
   1266c:	bl	11154 <free@plt>
   12670:	str	r6, [r5]
   12674:	pop	{r4, r5, r6, sl, fp, pc}
   12678:	push	{r4, r5, r6, sl, fp, lr}
   1267c:	add	fp, sp, #16
   12680:	mov	r5, r0
   12684:	mov	r0, #0
   12688:	mov	r4, r1
   1268c:	add	r6, r2, #19
   12690:	strb	r0, [r2, #20]
   12694:	mov	r0, r5
   12698:	mov	r1, r4
   1269c:	mov	r2, #10
   126a0:	mov	r3, #0
   126a4:	bl	15a64 <__assert_fail@plt+0x46ac>
   126a8:	add	r2, r0, r0, lsl #2
   126ac:	sub	r2, r5, r2, lsl #1
   126b0:	orr	r2, r2, #48	; 0x30
   126b4:	strb	r2, [r6], #-1
   126b8:	rsbs	r2, r5, #9
   126bc:	mov	r5, r0
   126c0:	rscs	r2, r4, #0
   126c4:	mov	r4, r1
   126c8:	bcc	12694 <__assert_fail@plt+0x12dc>
   126cc:	add	r0, r6, #1
   126d0:	pop	{r4, r5, r6, sl, fp, pc}
   126d4:	push	{r4, r5, fp, lr}
   126d8:	add	fp, sp, #8
   126dc:	cmp	r0, #0
   126e0:	beq	12774 <__assert_fail@plt+0x13bc>
   126e4:	mov	r1, #47	; 0x2f
   126e8:	mov	r4, r0
   126ec:	bl	11340 <strrchr@plt>
   126f0:	cmp	r0, #0
   126f4:	mov	r5, r4
   126f8:	addne	r5, r0, #1
   126fc:	sub	r0, r5, r4
   12700:	cmp	r0, #7
   12704:	blt	12758 <__assert_fail@plt+0x13a0>
   12708:	movw	r1, #25852	; 0x64fc
   1270c:	sub	r0, r5, #7
   12710:	mov	r2, #7
   12714:	movt	r1, #1
   12718:	bl	1137c <strncmp@plt>
   1271c:	cmp	r0, #0
   12720:	bne	12758 <__assert_fail@plt+0x13a0>
   12724:	movw	r1, #25860	; 0x6504
   12728:	mov	r0, r5
   1272c:	mov	r2, #3
   12730:	movt	r1, #1
   12734:	bl	1137c <strncmp@plt>
   12738:	cmp	r0, #0
   1273c:	beq	12748 <__assert_fail@plt+0x1390>
   12740:	mov	r4, r5
   12744:	b	12758 <__assert_fail@plt+0x13a0>
   12748:	movw	r0, #29024	; 0x7160
   1274c:	add	r4, r5, #3
   12750:	movt	r0, #2
   12754:	str	r4, [r0]
   12758:	movw	r0, #29028	; 0x7164
   1275c:	movt	r0, #2
   12760:	str	r4, [r0]
   12764:	movw	r0, #29156	; 0x71e4
   12768:	movt	r0, #2
   1276c:	str	r4, [r0]
   12770:	pop	{r4, r5, fp, pc}
   12774:	movw	r0, #29040	; 0x7170
   12778:	movt	r0, #2
   1277c:	ldr	r1, [r0]
   12780:	movw	r0, #25796	; 0x64c4
   12784:	movt	r0, #1
   12788:	bl	11370 <fputs@plt>
   1278c:	bl	11388 <abort@plt>
   12790:	push	{r4, r5, r6, sl, fp, lr}
   12794:	add	fp, sp, #16
   12798:	mov	r4, r0
   1279c:	movw	r0, #29160	; 0x71e8
   127a0:	movt	r0, #2
   127a4:	cmp	r4, #0
   127a8:	moveq	r4, r0
   127ac:	bl	112b0 <__errno_location@plt>
   127b0:	ldr	r6, [r0]
   127b4:	mov	r5, r0
   127b8:	mov	r0, r4
   127bc:	mov	r1, #48	; 0x30
   127c0:	bl	14db8 <__assert_fail@plt+0x3a00>
   127c4:	str	r6, [r5]
   127c8:	pop	{r4, r5, r6, sl, fp, pc}
   127cc:	movw	r1, #29160	; 0x71e8
   127d0:	cmp	r0, #0
   127d4:	movt	r1, #2
   127d8:	movne	r1, r0
   127dc:	ldr	r0, [r1]
   127e0:	bx	lr
   127e4:	movw	r2, #29160	; 0x71e8
   127e8:	cmp	r0, #0
   127ec:	movt	r2, #2
   127f0:	movne	r2, r0
   127f4:	str	r1, [r2]
   127f8:	bx	lr
   127fc:	movw	r3, #29160	; 0x71e8
   12800:	cmp	r0, #0
   12804:	movt	r3, #2
   12808:	movne	r3, r0
   1280c:	ubfx	r0, r1, #5, #3
   12810:	and	r1, r1, #31
   12814:	add	r0, r3, r0, lsl #2
   12818:	ldr	r3, [r0, #8]
   1281c:	eor	r2, r2, r3, lsr r1
   12820:	and	r2, r2, #1
   12824:	eor	r2, r3, r2, lsl r1
   12828:	str	r2, [r0, #8]
   1282c:	mov	r0, #1
   12830:	and	r0, r0, r3, lsr r1
   12834:	bx	lr
   12838:	movw	r2, #29160	; 0x71e8
   1283c:	cmp	r0, #0
   12840:	movt	r2, #2
   12844:	movne	r2, r0
   12848:	ldr	r0, [r2, #4]
   1284c:	str	r1, [r2, #4]
   12850:	bx	lr
   12854:	movw	r3, #29160	; 0x71e8
   12858:	cmp	r0, #0
   1285c:	movt	r3, #2
   12860:	movne	r3, r0
   12864:	cmp	r1, #0
   12868:	mov	r0, #10
   1286c:	cmpne	r2, #0
   12870:	str	r0, [r3]
   12874:	bne	12884 <__assert_fail@plt+0x14cc>
   12878:	push	{fp, lr}
   1287c:	mov	fp, sp
   12880:	bl	11388 <abort@plt>
   12884:	str	r1, [r3, #40]	; 0x28
   12888:	str	r2, [r3, #44]	; 0x2c
   1288c:	bx	lr
   12890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12894:	add	fp, sp, #28
   12898:	sub	sp, sp, #20
   1289c:	mov	r7, r0
   128a0:	ldr	r0, [fp, #8]
   128a4:	movw	r5, #29160	; 0x71e8
   128a8:	mov	r8, r3
   128ac:	mov	r9, r2
   128b0:	mov	sl, r1
   128b4:	movt	r5, #2
   128b8:	cmp	r0, #0
   128bc:	movne	r5, r0
   128c0:	bl	112b0 <__errno_location@plt>
   128c4:	mov	r4, r0
   128c8:	ldm	r5, {r0, r1}
   128cc:	ldr	r2, [r5, #40]	; 0x28
   128d0:	ldr	r3, [r5, #44]	; 0x2c
   128d4:	add	r5, r5, #8
   128d8:	ldr	r6, [r4]
   128dc:	stm	sp, {r0, r1, r5}
   128e0:	str	r2, [sp, #12]
   128e4:	str	r3, [sp, #16]
   128e8:	mov	r0, r7
   128ec:	mov	r1, sl
   128f0:	mov	r2, r9
   128f4:	mov	r3, r8
   128f8:	bl	12908 <__assert_fail@plt+0x1550>
   128fc:	str	r6, [r4]
   12900:	sub	sp, fp, #28
   12904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1290c:	add	fp, sp, #28
   12910:	sub	sp, sp, #156	; 0x9c
   12914:	str	r0, [fp, #-56]	; 0xffffffc8
   12918:	ldr	r0, [fp, #12]
   1291c:	mov	r4, r1
   12920:	str	r3, [sp, #80]	; 0x50
   12924:	str	r2, [fp, #-84]	; 0xffffffac
   12928:	and	r1, r0, #4
   1292c:	str	r1, [sp, #24]
   12930:	and	r1, r0, #1
   12934:	str	r1, [sp, #28]
   12938:	ubfx	r7, r0, #1, #1
   1293c:	bl	111e4 <__ctype_get_mb_cur_max@plt>
   12940:	str	r0, [sp, #32]
   12944:	ldr	r0, [fp, #24]
   12948:	ldr	r9, [fp, #8]
   1294c:	mov	r2, #0
   12950:	mov	r1, #0
   12954:	mov	r5, #0
   12958:	str	r2, [sp, #52]	; 0x34
   1295c:	mov	r2, #1
   12960:	str	r0, [sp, #72]	; 0x48
   12964:	ldr	r0, [fp, #20]
   12968:	str	r0, [sp, #64]	; 0x40
   1296c:	mov	r0, #0
   12970:	str	r0, [sp, #92]	; 0x5c
   12974:	mov	r0, #0
   12978:	str	r0, [fp, #-76]	; 0xffffffb4
   1297c:	mov	r0, #0
   12980:	cmp	r9, #10
   12984:	str	r1, [sp, #68]	; 0x44
   12988:	bhi	13988 <__assert_fail@plt+0x25d0>
   1298c:	add	r1, pc, #28
   12990:	ldr	ip, [fp, #-84]	; 0xffffffac
   12994:	ldr	lr, [sp, #80]	; 0x50
   12998:	mov	r6, r4
   1299c:	mov	r8, #0
   129a0:	mov	r3, #1
   129a4:	mov	sl, #0
   129a8:	mov	r4, r2
   129ac:	ldr	pc, [r1, r9, lsl #2]
   129b0:	andeq	r2, r1, r0, lsl #21
   129b4:			; <UNDEFINED> instruction: 0x00012abc
   129b8:	muleq	r1, r0, sl
   129bc:	andeq	r2, r1, r8, ror sl
   129c0:			; <UNDEFINED> instruction: 0x00012ab0
   129c4:	andeq	r2, r1, r8, lsl #22
   129c8:	andeq	r2, r1, r0, lsr #21
   129cc:	andeq	r2, r1, r8, ror #22
   129d0:	ldrdeq	r2, [r1], -ip
   129d4:	ldrdeq	r2, [r1], -ip
   129d8:	andeq	r2, r1, r4, lsl #20
   129dc:	movw	r0, #25942	; 0x6556
   129e0:	mov	r1, r9
   129e4:	movt	r0, #1
   129e8:	bl	140f0 <__assert_fail@plt+0x2d38>
   129ec:	str	r0, [sp, #64]	; 0x40
   129f0:	movw	r0, #25944	; 0x6558
   129f4:	mov	r1, r9
   129f8:	movt	r0, #1
   129fc:	bl	140f0 <__assert_fail@plt+0x2d38>
   12a00:	str	r0, [sp, #72]	; 0x48
   12a04:	mov	r8, #0
   12a08:	mov	sl, r7
   12a0c:	tst	r7, #1
   12a10:	str	r5, [fp, #-48]	; 0xffffffd0
   12a14:	bne	12a50 <__assert_fail@plt+0x1698>
   12a18:	ldr	r0, [sp, #64]	; 0x40
   12a1c:	ldrb	r0, [r0]
   12a20:	cmp	r0, #0
   12a24:	beq	12a50 <__assert_fail@plt+0x1698>
   12a28:	ldr	r1, [sp, #64]	; 0x40
   12a2c:	mov	r8, #0
   12a30:	add	r1, r1, #1
   12a34:	cmp	r8, r6
   12a38:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12a3c:	strbcc	r0, [r2, r8]
   12a40:	ldrb	r0, [r1, r8]
   12a44:	add	r8, r8, #1
   12a48:	cmp	r0, #0
   12a4c:	bne	12a34 <__assert_fail@plt+0x167c>
   12a50:	ldr	r7, [sp, #72]	; 0x48
   12a54:	mov	r0, r7
   12a58:	bl	11298 <strlen@plt>
   12a5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a60:	ldr	lr, [sp, #80]	; 0x50
   12a64:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12a68:	str	r0, [fp, #-76]	; 0xffffffb4
   12a6c:	str	r7, [sp, #92]	; 0x5c
   12a70:	mov	r3, #1
   12a74:	b	12b68 <__assert_fail@plt+0x17b0>
   12a78:	mov	r0, #1
   12a7c:	b	12abc <__assert_fail@plt+0x1704>
   12a80:	mov	r9, #0
   12a84:	mov	r8, #0
   12a88:	mov	r3, r0
   12a8c:	b	12b64 <__assert_fail@plt+0x17ac>
   12a90:	tst	r7, #1
   12a94:	bne	12abc <__assert_fail@plt+0x1704>
   12a98:	mov	r3, r0
   12a9c:	b	12ae4 <__assert_fail@plt+0x172c>
   12aa0:	mov	r0, #1
   12aa4:	mov	r8, #0
   12aa8:	mov	r9, #5
   12aac:	b	12b1c <__assert_fail@plt+0x1764>
   12ab0:	mov	r3, #1
   12ab4:	tst	r7, #1
   12ab8:	beq	12ae4 <__assert_fail@plt+0x172c>
   12abc:	mov	r1, #1
   12ac0:	mov	r8, #0
   12ac4:	mov	r9, #2
   12ac8:	mov	r3, r0
   12acc:	mov	sl, #1
   12ad0:	str	r1, [fp, #-76]	; 0xffffffb4
   12ad4:	movw	r1, #25944	; 0x6558
   12ad8:	movt	r1, #1
   12adc:	str	r1, [sp, #92]	; 0x5c
   12ae0:	b	12b68 <__assert_fail@plt+0x17b0>
   12ae4:	cmp	r6, #0
   12ae8:	mov	r8, #1
   12aec:	mov	r9, #2
   12af0:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12af4:	movne	r0, #39	; 0x27
   12af8:	strbne	r0, [r1]
   12afc:	movw	r0, #25944	; 0x6558
   12b00:	movt	r0, #1
   12b04:	b	12b58 <__assert_fail@plt+0x17a0>
   12b08:	mov	r9, #5
   12b0c:	tst	r7, #1
   12b10:	beq	12b38 <__assert_fail@plt+0x1780>
   12b14:	mov	r0, #1
   12b18:	mov	r8, #0
   12b1c:	str	r0, [fp, #-76]	; 0xffffffb4
   12b20:	movw	r0, #25940	; 0x6554
   12b24:	mov	r3, #1
   12b28:	mov	sl, #1
   12b2c:	movt	r0, #1
   12b30:	str	r0, [sp, #92]	; 0x5c
   12b34:	b	12b68 <__assert_fail@plt+0x17b0>
   12b38:	cmp	r6, #0
   12b3c:	mov	r8, #1
   12b40:	mov	r3, #1
   12b44:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12b48:	movne	r0, #34	; 0x22
   12b4c:	strbne	r0, [r1]
   12b50:	movw	r0, #25940	; 0x6554
   12b54:	movt	r0, #1
   12b58:	str	r0, [sp, #92]	; 0x5c
   12b5c:	mov	r0, #1
   12b60:	str	r0, [fp, #-76]	; 0xffffffb4
   12b64:	mov	sl, #0
   12b68:	ldr	r0, [fp, #16]
   12b6c:	mov	r7, #0
   12b70:	str	r9, [fp, #-64]	; 0xffffffc0
   12b74:	str	sl, [fp, #-72]	; 0xffffffb8
   12b78:	str	r3, [sp, #84]	; 0x54
   12b7c:	cmp	r0, #0
   12b80:	movwne	r0, #1
   12b84:	and	r0, r0, sl
   12b88:	str	r0, [fp, #-88]	; 0xffffffa8
   12b8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b90:	cmp	r0, #0
   12b94:	movwne	r0, #1
   12b98:	subs	r2, r9, #2
   12b9c:	and	r1, r0, sl
   12ba0:	str	r2, [fp, #-80]	; 0xffffffb0
   12ba4:	and	r1, r3, r1
   12ba8:	str	r1, [sp, #44]	; 0x2c
   12bac:	clz	r1, r2
   12bb0:	lsr	r1, r1, #5
   12bb4:	and	r1, r1, sl
   12bb8:	str	r1, [sp, #56]	; 0x38
   12bbc:	mov	r1, r2
   12bc0:	eor	r2, sl, #1
   12bc4:	movwne	r1, #1
   12bc8:	str	r2, [sp, #88]	; 0x58
   12bcc:	orr	r2, r1, r2
   12bd0:	and	r1, r1, r3
   12bd4:	and	r0, r0, r1
   12bd8:	str	r2, [sp, #60]	; 0x3c
   12bdc:	str	r1, [fp, #-68]	; 0xffffffbc
   12be0:	str	r0, [fp, #-60]	; 0xffffffc4
   12be4:	eor	r0, r3, #1
   12be8:	str	r0, [sp, #48]	; 0x30
   12bec:	cmn	lr, #1
   12bf0:	beq	12c00 <__assert_fail@plt+0x1848>
   12bf4:	cmp	r7, lr
   12bf8:	bne	12c0c <__assert_fail@plt+0x1854>
   12bfc:	b	137b8 <__assert_fail@plt+0x2400>
   12c00:	ldrb	r0, [ip, r7]
   12c04:	cmp	r0, #0
   12c08:	beq	137c0 <__assert_fail@plt+0x2408>
   12c0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12c10:	mov	r9, #0
   12c14:	str	r5, [fp, #-48]	; 0xffffffd0
   12c18:	str	r6, [fp, #-52]	; 0xffffffcc
   12c1c:	cmp	r0, #0
   12c20:	beq	12c60 <__assert_fail@plt+0x18a8>
   12c24:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c28:	mov	r5, r4
   12c2c:	add	r4, r7, r0
   12c30:	cmp	r0, #2
   12c34:	bcc	12c50 <__assert_fail@plt+0x1898>
   12c38:	cmn	lr, #1
   12c3c:	bne	12c50 <__assert_fail@plt+0x1898>
   12c40:	mov	r0, ip
   12c44:	bl	11298 <strlen@plt>
   12c48:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c4c:	mov	lr, r0
   12c50:	cmp	r4, lr
   12c54:	bls	12c68 <__assert_fail@plt+0x18b0>
   12c58:	mov	r6, #0
   12c5c:	b	12ca8 <__assert_fail@plt+0x18f0>
   12c60:	mov	r6, #0
   12c64:	b	12cac <__assert_fail@plt+0x18f4>
   12c68:	ldr	r1, [sp, #92]	; 0x5c
   12c6c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c70:	add	r0, ip, r7
   12c74:	mov	r4, lr
   12c78:	bl	11184 <memcmp@plt>
   12c7c:	ldr	r2, [sp, #88]	; 0x58
   12c80:	cmp	r0, #0
   12c84:	mov	r1, r0
   12c88:	movwne	r1, #1
   12c8c:	orr	r1, r1, r2
   12c90:	tst	r1, #1
   12c94:	beq	13854 <__assert_fail@plt+0x249c>
   12c98:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c9c:	clz	r0, r0
   12ca0:	mov	lr, r4
   12ca4:	lsr	r6, r0, #5
   12ca8:	mov	r4, r5
   12cac:	ldrb	r5, [ip, r7]
   12cb0:	cmp	r5, #126	; 0x7e
   12cb4:	bhi	1307c <__assert_fail@plt+0x1cc4>
   12cb8:	add	r3, pc, #16
   12cbc:	mov	sl, #1
   12cc0:	mov	r2, #110	; 0x6e
   12cc4:	mov	r0, #97	; 0x61
   12cc8:	mov	r1, #0
   12ccc:	ldr	pc, [r3, r5, lsl #2]
   12cd0:	andeq	r2, r1, r0, ror #30
   12cd4:	andeq	r3, r1, ip, ror r0
   12cd8:	andeq	r3, r1, ip, ror r0
   12cdc:	andeq	r3, r1, ip, ror r0
   12ce0:	andeq	r3, r1, ip, ror r0
   12ce4:	andeq	r3, r1, ip, ror r0
   12ce8:	andeq	r3, r1, ip, ror r0
   12cec:	andeq	r3, r1, r0, lsr #2
   12cf0:	andeq	r2, r1, r0, asr #30
   12cf4:	andeq	r2, r1, r8, lsr pc
   12cf8:	andeq	r2, r1, ip, asr #30
   12cfc:	ldrdeq	r2, [r1], -r0
   12d00:	andeq	r2, r1, r0, lsr pc
   12d04:	andeq	r2, r1, r8, asr #30
   12d08:	andeq	r3, r1, ip, ror r0
   12d0c:	andeq	r3, r1, ip, ror r0
   12d10:	andeq	r3, r1, ip, ror r0
   12d14:	andeq	r3, r1, ip, ror r0
   12d18:	andeq	r3, r1, ip, ror r0
   12d1c:	andeq	r3, r1, ip, ror r0
   12d20:	andeq	r3, r1, ip, ror r0
   12d24:	andeq	r3, r1, ip, ror r0
   12d28:	andeq	r3, r1, ip, ror r0
   12d2c:	andeq	r3, r1, ip, ror r0
   12d30:	andeq	r3, r1, ip, ror r0
   12d34:	andeq	r3, r1, ip, ror r0
   12d38:	andeq	r3, r1, ip, ror r0
   12d3c:	andeq	r3, r1, ip, ror r0
   12d40:	andeq	r3, r1, ip, ror r0
   12d44:	andeq	r3, r1, ip, ror r0
   12d48:	andeq	r3, r1, ip, ror r0
   12d4c:	andeq	r3, r1, ip, ror r0
   12d50:	andeq	r3, r1, r0, ror #1
   12d54:	andeq	r3, r1, r4, ror #1
   12d58:	andeq	r3, r1, r4, ror #1
   12d5c:	andeq	r2, r1, r0, ror #29
   12d60:	andeq	r3, r1, r4, ror #1
   12d64:	andeq	r2, r1, ip, asr #29
   12d68:	andeq	r3, r1, r4, ror #1
   12d6c:	ldrdeq	r2, [r1], -r8
   12d70:	andeq	r3, r1, r4, ror #1
   12d74:	andeq	r3, r1, r4, ror #1
   12d78:	andeq	r3, r1, r4, ror #1
   12d7c:	andeq	r2, r1, ip, asr #29
   12d80:	andeq	r2, r1, ip, asr #29
   12d84:	andeq	r2, r1, ip, asr #29
   12d88:	andeq	r2, r1, ip, asr #29
   12d8c:	andeq	r2, r1, ip, asr #29
   12d90:	andeq	r2, r1, ip, asr #29
   12d94:	andeq	r2, r1, ip, asr #29
   12d98:	andeq	r2, r1, ip, asr #29
   12d9c:	andeq	r2, r1, ip, asr #29
   12da0:	andeq	r2, r1, ip, asr #29
   12da4:	andeq	r2, r1, ip, asr #29
   12da8:	andeq	r2, r1, ip, asr #29
   12dac:	andeq	r2, r1, ip, asr #29
   12db0:	andeq	r2, r1, ip, asr #29
   12db4:	andeq	r2, r1, ip, asr #29
   12db8:	andeq	r2, r1, ip, asr #29
   12dbc:	andeq	r3, r1, r4, ror #1
   12dc0:	andeq	r3, r1, r4, ror #1
   12dc4:	andeq	r3, r1, r4, ror #1
   12dc8:	andeq	r3, r1, r4, ror #1
   12dcc:	andeq	r2, r1, r4, lsr #31
   12dd0:	andeq	r3, r1, ip, ror r0
   12dd4:	andeq	r2, r1, ip, asr #29
   12dd8:	andeq	r2, r1, ip, asr #29
   12ddc:	andeq	r2, r1, ip, asr #29
   12de0:	andeq	r2, r1, ip, asr #29
   12de4:	andeq	r2, r1, ip, asr #29
   12de8:	andeq	r2, r1, ip, asr #29
   12dec:	andeq	r2, r1, ip, asr #29
   12df0:	andeq	r2, r1, ip, asr #29
   12df4:	andeq	r2, r1, ip, asr #29
   12df8:	andeq	r2, r1, ip, asr #29
   12dfc:	andeq	r2, r1, ip, asr #29
   12e00:	andeq	r2, r1, ip, asr #29
   12e04:	andeq	r2, r1, ip, asr #29
   12e08:	andeq	r2, r1, ip, asr #29
   12e0c:	andeq	r2, r1, ip, asr #29
   12e10:	andeq	r2, r1, ip, asr #29
   12e14:	andeq	r2, r1, ip, asr #29
   12e18:	andeq	r2, r1, ip, asr #29
   12e1c:	andeq	r2, r1, ip, asr #29
   12e20:	andeq	r2, r1, ip, asr #29
   12e24:	andeq	r2, r1, ip, asr #29
   12e28:	andeq	r2, r1, ip, asr #29
   12e2c:	andeq	r2, r1, ip, asr #29
   12e30:	andeq	r2, r1, ip, asr #29
   12e34:	andeq	r2, r1, ip, asr #29
   12e38:	andeq	r2, r1, ip, asr #29
   12e3c:	andeq	r3, r1, r4, ror #1
   12e40:	andeq	r2, r1, ip, lsl #30
   12e44:	andeq	r2, r1, ip, asr #29
   12e48:	andeq	r3, r1, r4, ror #1
   12e4c:	andeq	r2, r1, ip, asr #29
   12e50:	andeq	r3, r1, r4, ror #1
   12e54:	andeq	r2, r1, ip, asr #29
   12e58:	andeq	r2, r1, ip, asr #29
   12e5c:	andeq	r2, r1, ip, asr #29
   12e60:	andeq	r2, r1, ip, asr #29
   12e64:	andeq	r2, r1, ip, asr #29
   12e68:	andeq	r2, r1, ip, asr #29
   12e6c:	andeq	r2, r1, ip, asr #29
   12e70:	andeq	r2, r1, ip, asr #29
   12e74:	andeq	r2, r1, ip, asr #29
   12e78:	andeq	r2, r1, ip, asr #29
   12e7c:	andeq	r2, r1, ip, asr #29
   12e80:	andeq	r2, r1, ip, asr #29
   12e84:	andeq	r2, r1, ip, asr #29
   12e88:	andeq	r2, r1, ip, asr #29
   12e8c:	andeq	r2, r1, ip, asr #29
   12e90:	andeq	r2, r1, ip, asr #29
   12e94:	andeq	r2, r1, ip, asr #29
   12e98:	andeq	r2, r1, ip, asr #29
   12e9c:	andeq	r2, r1, ip, asr #29
   12ea0:	andeq	r2, r1, ip, asr #29
   12ea4:	andeq	r2, r1, ip, asr #29
   12ea8:	andeq	r2, r1, ip, asr #29
   12eac:	andeq	r2, r1, ip, asr #29
   12eb0:	andeq	r2, r1, ip, asr #29
   12eb4:	andeq	r2, r1, ip, asr #29
   12eb8:	andeq	r2, r1, ip, asr #29
   12ebc:	strdeq	r2, [r1], -r0
   12ec0:	andeq	r3, r1, r4, ror #1
   12ec4:	strdeq	r2, [r1], -r0
   12ec8:	andeq	r2, r1, r0, ror #29
   12ecc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ed0:	cmp	r0, #0
   12ed4:	beq	13134 <__assert_fail@plt+0x1d7c>
   12ed8:	ldr	r0, [fp, #16]
   12edc:	b	13138 <__assert_fail@plt+0x1d80>
   12ee0:	mov	sl, #0
   12ee4:	cmp	r7, #0
   12ee8:	bne	13350 <__assert_fail@plt+0x1f98>
   12eec:	b	130e0 <__assert_fail@plt+0x1d28>
   12ef0:	mov	sl, #0
   12ef4:	cmn	lr, #1
   12ef8:	beq	130cc <__assert_fail@plt+0x1d14>
   12efc:	cmp	r7, #0
   12f00:	cmpeq	lr, #1
   12f04:	bne	13350 <__assert_fail@plt+0x1f98>
   12f08:	b	130e0 <__assert_fail@plt+0x1d28>
   12f0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f10:	cmp	r0, #2
   12f14:	bne	13104 <__assert_fail@plt+0x1d4c>
   12f18:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f1c:	tst	r0, #1
   12f20:	bne	13870 <__assert_fail@plt+0x24b8>
   12f24:	mov	r9, #0
   12f28:	mov	r0, #92	; 0x5c
   12f2c:	b	13118 <__assert_fail@plt+0x1d60>
   12f30:	mov	r0, #102	; 0x66
   12f34:	b	13120 <__assert_fail@plt+0x1d68>
   12f38:	mov	r2, #116	; 0x74
   12f3c:	b	12f4c <__assert_fail@plt+0x1b94>
   12f40:	mov	r0, #98	; 0x62
   12f44:	b	13120 <__assert_fail@plt+0x1d68>
   12f48:	mov	r2, #114	; 0x72
   12f4c:	ldr	r0, [sp, #60]	; 0x3c
   12f50:	tst	r0, #1
   12f54:	mov	r0, r2
   12f58:	bne	13120 <__assert_fail@plt+0x1d68>
   12f5c:	b	13870 <__assert_fail@plt+0x24b8>
   12f60:	ldr	r0, [sp, #84]	; 0x54
   12f64:	tst	r0, #1
   12f68:	beq	1320c <__assert_fail@plt+0x1e54>
   12f6c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f70:	tst	r0, #1
   12f74:	bne	13978 <__assert_fail@plt+0x25c0>
   12f78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12f80:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12f84:	cmp	r0, #2
   12f88:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12f8c:	movwne	r0, #1
   12f90:	orr	r0, r0, r3
   12f94:	tst	r0, #1
   12f98:	beq	1368c <__assert_fail@plt+0x22d4>
   12f9c:	mov	r0, r8
   12fa0:	b	136cc <__assert_fail@plt+0x2314>
   12fa4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fa8:	mov	r9, #0
   12fac:	mov	r5, #63	; 0x3f
   12fb0:	cmp	r0, #5
   12fb4:	beq	13358 <__assert_fail@plt+0x1fa0>
   12fb8:	cmp	r0, #2
   12fbc:	bne	13418 <__assert_fail@plt+0x2060>
   12fc0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fc4:	tst	r0, #1
   12fc8:	beq	1341c <__assert_fail@plt+0x2064>
   12fcc:	b	13870 <__assert_fail@plt+0x24b8>
   12fd0:	mov	r0, #118	; 0x76
   12fd4:	b	13120 <__assert_fail@plt+0x1d68>
   12fd8:	mov	r0, #1
   12fdc:	mov	r5, #39	; 0x27
   12fe0:	str	r0, [sp, #52]	; 0x34
   12fe4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fe8:	cmp	r0, #2
   12fec:	bne	13074 <__assert_fail@plt+0x1cbc>
   12ff0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ff4:	tst	r0, #1
   12ff8:	bne	13870 <__assert_fail@plt+0x24b8>
   12ffc:	ldr	r3, [sp, #68]	; 0x44
   13000:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13004:	mov	r9, #0
   13008:	clz	r1, r2
   1300c:	cmp	r3, #0
   13010:	mov	r0, r3
   13014:	movwne	r0, #1
   13018:	lsr	r1, r1, #5
   1301c:	orrs	r0, r0, r1
   13020:	moveq	r3, r2
   13024:	moveq	r2, r0
   13028:	cmp	r8, r2
   1302c:	str	r3, [sp, #68]	; 0x44
   13030:	str	r2, [fp, #-52]	; 0xffffffcc
   13034:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   13038:	movcc	r0, #39	; 0x27
   1303c:	strbcc	r0, [r1, r8]
   13040:	add	r0, r8, #1
   13044:	cmp	r0, r2
   13048:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1304c:	movcc	r1, #92	; 0x5c
   13050:	strbcc	r1, [r3, r0]
   13054:	add	r0, r8, #2
   13058:	add	r8, r8, #3
   1305c:	cmp	r0, r2
   13060:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13064:	movcc	r1, #39	; 0x27
   13068:	strbcc	r1, [r2, r0]
   1306c:	mov	r0, #0
   13070:	str	r0, [fp, #-48]	; 0xffffffd0
   13074:	mov	sl, #1
   13078:	b	12ecc <__assert_fail@plt+0x1b14>
   1307c:	ldr	r0, [sp, #32]
   13080:	cmp	r0, #1
   13084:	bne	13230 <__assert_fail@plt+0x1e78>
   13088:	str	lr, [sp, #80]	; 0x50
   1308c:	bl	11274 <__ctype_b_loc@plt>
   13090:	ldr	r0, [r0]
   13094:	ldr	ip, [fp, #-84]	; 0xffffffac
   13098:	mov	r1, #1
   1309c:	add	r0, r0, r5, lsl #1
   130a0:	ldrb	r0, [r0, #1]
   130a4:	ubfx	sl, r0, #6, #1
   130a8:	ldr	r0, [sp, #48]	; 0x30
   130ac:	mov	r2, r1
   130b0:	cmp	r1, #1
   130b4:	orr	r0, sl, r0
   130b8:	bhi	13424 <__assert_fail@plt+0x206c>
   130bc:	tst	r0, #1
   130c0:	beq	13424 <__assert_fail@plt+0x206c>
   130c4:	ldr	lr, [sp, #80]	; 0x50
   130c8:	b	12ecc <__assert_fail@plt+0x1b14>
   130cc:	cmp	r7, #0
   130d0:	bne	1334c <__assert_fail@plt+0x1f94>
   130d4:	ldrb	r0, [ip, #1]
   130d8:	cmp	r0, #0
   130dc:	bne	1334c <__assert_fail@plt+0x1f94>
   130e0:	mov	r1, #1
   130e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130e8:	cmp	r0, #2
   130ec:	bne	130fc <__assert_fail@plt+0x1d44>
   130f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   130f4:	tst	r0, #1
   130f8:	bne	13870 <__assert_fail@plt+0x24b8>
   130fc:	mov	sl, r1
   13100:	b	12ecc <__assert_fail@plt+0x1b14>
   13104:	ldr	r1, [sp, #44]	; 0x2c
   13108:	mov	r9, #0
   1310c:	mov	r0, #92	; 0x5c
   13110:	cmp	r1, #0
   13114:	beq	13120 <__assert_fail@plt+0x1d68>
   13118:	mov	sl, #0
   1311c:	b	13638 <__assert_fail@plt+0x2280>
   13120:	ldr	r1, [sp, #84]	; 0x54
   13124:	mov	sl, #0
   13128:	mov	r9, #0
   1312c:	tst	r1, #1
   13130:	bne	1316c <__assert_fail@plt+0x1db4>
   13134:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13138:	cmp	r0, #0
   1313c:	mov	r0, r5
   13140:	beq	13164 <__assert_fail@plt+0x1dac>
   13144:	ldr	r1, [fp, #16]
   13148:	ubfx	r0, r5, #5, #3
   1314c:	mov	r2, #1
   13150:	ldr	r0, [r1, r0, lsl #2]
   13154:	and	r1, r5, #31
   13158:	tst	r0, r2, lsl r1
   1315c:	mov	r0, r5
   13160:	bne	1316c <__assert_fail@plt+0x1db4>
   13164:	cmp	r6, #0
   13168:	beq	13638 <__assert_fail@plt+0x2280>
   1316c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13170:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13174:	tst	r1, #1
   13178:	bne	1384c <__assert_fail@plt+0x2494>
   1317c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13180:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13184:	cmp	r1, #2
   13188:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1318c:	movwne	r1, #1
   13190:	orr	r1, r1, r5
   13194:	tst	r1, #1
   13198:	bne	131dc <__assert_fail@plt+0x1e24>
   1319c:	cmp	r8, r6
   131a0:	mov	r5, #1
   131a4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   131a8:	movcc	r1, #39	; 0x27
   131ac:	strbcc	r1, [r2, r8]
   131b0:	add	r1, r8, #1
   131b4:	cmp	r1, r6
   131b8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   131bc:	movcc	r2, #36	; 0x24
   131c0:	strbcc	r2, [r3, r1]
   131c4:	add	r1, r8, #2
   131c8:	add	r8, r8, #3
   131cc:	cmp	r1, r6
   131d0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   131d4:	movcc	r2, #39	; 0x27
   131d8:	strbcc	r2, [r3, r1]
   131dc:	cmp	r8, r6
   131e0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   131e4:	movcc	r1, #92	; 0x5c
   131e8:	strbcc	r1, [r2, r8]
   131ec:	add	r8, r8, #1
   131f0:	cmp	r8, r6
   131f4:	and	r4, r4, sl
   131f8:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   131fc:	strbcc	r0, [r1, r8]
   13200:	add	r8, r8, #1
   13204:	add	r7, r7, #1
   13208:	b	12bec <__assert_fail@plt+0x1834>
   1320c:	ldr	r0, [sp, #28]
   13210:	mov	sl, #0
   13214:	mov	r9, #0
   13218:	mov	r5, #0
   1321c:	cmp	r0, #0
   13220:	beq	13134 <__assert_fail@plt+0x1d7c>
   13224:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13228:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1322c:	b	13204 <__assert_fail@plt+0x1e4c>
   13230:	mov	r0, #0
   13234:	cmn	lr, #1
   13238:	str	r6, [sp, #76]	; 0x4c
   1323c:	str	r4, [sp, #20]
   13240:	str	r0, [fp, #-36]	; 0xffffffdc
   13244:	str	r0, [fp, #-40]	; 0xffffffd8
   13248:	bne	1325c <__assert_fail@plt+0x1ea4>
   1324c:	mov	r0, ip
   13250:	bl	11298 <strlen@plt>
   13254:	ldr	ip, [fp, #-84]	; 0xffffffac
   13258:	mov	lr, r0
   1325c:	add	r0, ip, r7
   13260:	mov	sl, #1
   13264:	mov	r6, #0
   13268:	sub	r4, fp, #40	; 0x28
   1326c:	str	lr, [sp, #80]	; 0x50
   13270:	str	r0, [sp, #36]	; 0x24
   13274:	str	r6, [sp, #40]	; 0x28
   13278:	add	r6, r6, r7
   1327c:	sub	r0, fp, #44	; 0x2c
   13280:	mov	r3, r4
   13284:	add	r1, ip, r6
   13288:	sub	r2, lr, r6
   1328c:	bl	156c0 <__assert_fail@plt+0x4308>
   13290:	cmp	r0, #0
   13294:	beq	137a0 <__assert_fail@plt+0x23e8>
   13298:	cmn	r0, #1
   1329c:	beq	13760 <__assert_fail@plt+0x23a8>
   132a0:	ldr	lr, [sp, #80]	; 0x50
   132a4:	cmn	r0, #2
   132a8:	beq	13768 <__assert_fail@plt+0x23b0>
   132ac:	ldr	r2, [sp, #56]	; 0x38
   132b0:	cmp	r0, #2
   132b4:	mov	r1, #0
   132b8:	movwcc	r1, #1
   132bc:	eor	r2, r2, #1
   132c0:	orrs	r1, r2, r1
   132c4:	bne	13310 <__assert_fail@plt+0x1f58>
   132c8:	ldr	r1, [sp, #40]	; 0x28
   132cc:	ldr	r2, [sp, #36]	; 0x24
   132d0:	add	ip, r2, r1
   132d4:	mov	r2, #1
   132d8:	ldrb	r3, [ip, r2]
   132dc:	sub	r6, r3, #94	; 0x5e
   132e0:	cmp	r6, #30
   132e4:	bhi	132f8 <__assert_fail@plt+0x1f40>
   132e8:	mov	r4, #1
   132ec:	mov	r1, #1073741829	; 0x40000005
   132f0:	tst	r1, r4, lsl r6
   132f4:	bne	1386c <__assert_fail@plt+0x24b4>
   132f8:	sub	r3, r3, #91	; 0x5b
   132fc:	cmp	r3, #2
   13300:	bcc	1386c <__assert_fail@plt+0x24b4>
   13304:	add	r2, r2, #1
   13308:	cmp	r2, r0
   1330c:	bcc	132d8 <__assert_fail@plt+0x1f20>
   13310:	ldr	r6, [sp, #40]	; 0x28
   13314:	add	r6, r0, r6
   13318:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1331c:	bl	111c0 <iswprint@plt>
   13320:	cmp	r0, #0
   13324:	sub	r4, fp, #40	; 0x28
   13328:	movwne	r0, #1
   1332c:	and	sl, sl, r0
   13330:	mov	r0, r4
   13334:	bl	11178 <mbsinit@plt>
   13338:	ldr	lr, [sp, #80]	; 0x50
   1333c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13340:	cmp	r0, #0
   13344:	beq	13274 <__assert_fail@plt+0x1ebc>
   13348:	b	137a8 <__assert_fail@plt+0x23f0>
   1334c:	mvn	lr, #0
   13350:	mov	r9, #0
   13354:	b	12ecc <__assert_fail@plt+0x1b14>
   13358:	ldr	r0, [sp, #24]
   1335c:	cmp	r0, #0
   13360:	beq	13418 <__assert_fail@plt+0x2060>
   13364:	add	r0, r7, #2
   13368:	cmp	r0, lr
   1336c:	bcs	13418 <__assert_fail@plt+0x2060>
   13370:	add	r1, ip, r7
   13374:	ldrb	r1, [r1, #1]
   13378:	cmp	r1, #63	; 0x3f
   1337c:	bne	13418 <__assert_fail@plt+0x2060>
   13380:	ldrb	r5, [ip, r0]
   13384:	sub	r1, r5, #33	; 0x21
   13388:	cmp	r1, #29
   1338c:	bhi	13418 <__assert_fail@plt+0x2060>
   13390:	movw	r3, #20929	; 0x51c1
   13394:	mov	r2, #1
   13398:	movt	r3, #14336	; 0x3800
   1339c:	tst	r3, r2, lsl r1
   133a0:	beq	13418 <__assert_fail@plt+0x2060>
   133a4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   133a8:	tst	r1, #1
   133ac:	bne	13980 <__assert_fail@plt+0x25c8>
   133b0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   133b4:	mov	r7, r0
   133b8:	cmp	r8, r1
   133bc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   133c0:	movcc	r1, #63	; 0x3f
   133c4:	strbcc	r1, [r2, r8]
   133c8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   133cc:	add	r1, r8, #1
   133d0:	cmp	r1, r2
   133d4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   133d8:	movcc	r2, #34	; 0x22
   133dc:	strbcc	r2, [r3, r1]
   133e0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   133e4:	add	r1, r8, #2
   133e8:	cmp	r1, r2
   133ec:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   133f0:	movcc	r2, #34	; 0x22
   133f4:	strbcc	r2, [r3, r1]
   133f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   133fc:	add	r1, r8, #3
   13400:	add	r8, r8, #4
   13404:	cmp	r1, r2
   13408:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1340c:	movcc	r2, #63	; 0x3f
   13410:	strbcc	r2, [r3, r1]
   13414:	b	1341c <__assert_fail@plt+0x2064>
   13418:	mov	r5, #63	; 0x3f
   1341c:	mov	sl, #0
   13420:	b	12ecc <__assert_fail@plt+0x1b14>
   13424:	str	r0, [sp, #40]	; 0x28
   13428:	add	r0, r2, r7
   1342c:	str	r6, [sp, #76]	; 0x4c
   13430:	add	r1, r7, #1
   13434:	ldr	lr, [sp, #80]	; 0x50
   13438:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1343c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13440:	mov	r3, #0
   13444:	str	r0, [sp, #36]	; 0x24
   13448:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1344c:	b	134e0 <__assert_fail@plt+0x2128>
   13450:	str	r0, [sp, #76]	; 0x4c
   13454:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13458:	cmp	r9, #0
   1345c:	movwne	r9, #1
   13460:	mvn	r7, r0
   13464:	orr	r7, r7, r9
   13468:	tst	r7, #1
   1346c:	bne	134bc <__assert_fail@plt+0x2104>
   13470:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13474:	cmp	r8, r6
   13478:	bcs	13490 <__assert_fail@plt+0x20d8>
   1347c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13480:	mov	r2, r4
   13484:	mov	r4, #39	; 0x27
   13488:	strb	r4, [r7, r8]
   1348c:	mov	r4, r2
   13490:	add	r7, r8, #1
   13494:	cmp	r7, r6
   13498:	bcs	134b0 <__assert_fail@plt+0x20f8>
   1349c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   134a0:	mov	r2, r4
   134a4:	mov	r4, #39	; 0x27
   134a8:	strb	r4, [r0, r7]
   134ac:	mov	r4, r2
   134b0:	add	r8, r8, #2
   134b4:	mov	r0, #0
   134b8:	b	134c4 <__assert_fail@plt+0x210c>
   134bc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   134c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   134c4:	cmp	r8, r6
   134c8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   134cc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   134d0:	strbcc	r5, [r2, r8]
   134d4:	add	r8, r8, #1
   134d8:	ldrb	r5, [ip, r1]
   134dc:	add	r1, r1, #1
   134e0:	ldr	r2, [sp, #40]	; 0x28
   134e4:	tst	r2, #1
   134e8:	beq	13524 <__assert_fail@plt+0x216c>
   134ec:	ldr	r2, [sp, #76]	; 0x4c
   134f0:	str	r0, [fp, #-48]	; 0xffffffd0
   134f4:	tst	r2, #1
   134f8:	beq	1351c <__assert_fail@plt+0x2164>
   134fc:	cmp	r8, r6
   13500:	bcs	13518 <__assert_fail@plt+0x2160>
   13504:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13508:	mov	r2, r4
   1350c:	mov	r4, #92	; 0x5c
   13510:	strb	r4, [r6, r8]
   13514:	mov	r4, r2
   13518:	add	r8, r8, #1
   1351c:	mov	r0, #0
   13520:	b	13618 <__assert_fail@plt+0x2260>
   13524:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13528:	tst	r2, #1
   1352c:	bne	13878 <__assert_fail@plt+0x24c0>
   13530:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13534:	cmp	r7, #2
   13538:	movwne	r3, #1
   1353c:	orr	r3, r3, r0
   13540:	tst	r3, #1
   13544:	bne	135a0 <__assert_fail@plt+0x21e8>
   13548:	cmp	r8, r6
   1354c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13550:	movcc	r3, #39	; 0x27
   13554:	strbcc	r3, [r2, r8]
   13558:	add	r3, r8, #1
   1355c:	cmp	r3, r6
   13560:	bcs	13578 <__assert_fail@plt+0x21c0>
   13564:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13568:	mov	r7, r4
   1356c:	mov	r4, #36	; 0x24
   13570:	strb	r4, [r2, r3]
   13574:	mov	r4, r7
   13578:	add	r3, r8, #2
   1357c:	cmp	r3, r6
   13580:	bcs	13598 <__assert_fail@plt+0x21e0>
   13584:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13588:	mov	r7, r4
   1358c:	mov	r4, #39	; 0x27
   13590:	strb	r4, [r2, r3]
   13594:	mov	r4, r7
   13598:	add	r8, r8, #3
   1359c:	mov	r0, #1
   135a0:	cmp	r8, r6
   135a4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   135a8:	movcc	r3, #92	; 0x5c
   135ac:	strbcc	r3, [r2, r8]
   135b0:	add	r3, r8, #1
   135b4:	cmp	r3, r6
   135b8:	bcs	135d8 <__assert_fail@plt+0x2220>
   135bc:	mov	r2, r4
   135c0:	and	r7, r5, #192	; 0xc0
   135c4:	mov	r4, #48	; 0x30
   135c8:	orr	r7, r4, r7, lsr #6
   135cc:	mov	r4, r2
   135d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   135d4:	strb	r7, [r2, r3]
   135d8:	add	r3, r8, #2
   135dc:	cmp	r3, r6
   135e0:	bcs	13600 <__assert_fail@plt+0x2248>
   135e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   135e8:	mov	r6, r4
   135ec:	lsr	r7, r5, #3
   135f0:	mov	r4, #6
   135f4:	bfi	r7, r4, #3, #29
   135f8:	mov	r4, r6
   135fc:	strb	r7, [r2, r3]
   13600:	str	r0, [fp, #-48]	; 0xffffffd0
   13604:	ldr	r0, [sp, #76]	; 0x4c
   13608:	mov	r3, #6
   1360c:	add	r8, r8, #3
   13610:	bfi	r5, r3, #3, #29
   13614:	mov	r3, #1
   13618:	ldr	r2, [sp, #36]	; 0x24
   1361c:	and	r9, r3, #1
   13620:	cmp	r2, r1
   13624:	bhi	13450 <__assert_fail@plt+0x2098>
   13628:	cmp	r9, #0
   1362c:	sub	r7, r1, #1
   13630:	mov	r0, r5
   13634:	movwne	r9, #1
   13638:	cmp	r9, #0
   1363c:	bne	13680 <__assert_fail@plt+0x22c8>
   13640:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13644:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13648:	tst	r5, #1
   1364c:	beq	131f0 <__assert_fail@plt+0x1e38>
   13650:	cmp	r8, r6
   13654:	mov	r5, #0
   13658:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1365c:	movcc	r1, #39	; 0x27
   13660:	strbcc	r1, [r2, r8]
   13664:	add	r1, r8, #1
   13668:	add	r8, r8, #2
   1366c:	cmp	r1, r6
   13670:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13674:	movcc	r2, #39	; 0x27
   13678:	strbcc	r2, [r3, r1]
   1367c:	b	131f0 <__assert_fail@plt+0x1e38>
   13680:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13684:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13688:	b	131f0 <__assert_fail@plt+0x1e38>
   1368c:	cmp	r8, r1
   13690:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13694:	movcc	r0, #39	; 0x27
   13698:	strbcc	r0, [r2, r8]
   1369c:	add	r0, r8, #1
   136a0:	cmp	r0, r1
   136a4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   136a8:	movcc	r2, #36	; 0x24
   136ac:	strbcc	r2, [r3, r0]
   136b0:	add	r0, r8, #2
   136b4:	cmp	r0, r1
   136b8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   136bc:	movcc	r2, #39	; 0x27
   136c0:	strbcc	r2, [r3, r0]
   136c4:	add	r0, r8, #3
   136c8:	mov	r3, #1
   136cc:	cmp	r0, r1
   136d0:	add	r8, r0, #1
   136d4:	str	r3, [fp, #-48]	; 0xffffffd0
   136d8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   136dc:	movcc	r1, #92	; 0x5c
   136e0:	strbcc	r1, [r2, r0]
   136e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   136e8:	cmp	r1, #2
   136ec:	beq	13750 <__assert_fail@plt+0x2398>
   136f0:	add	r1, r7, #1
   136f4:	mov	sl, #0
   136f8:	mov	r9, #1
   136fc:	mov	r5, #48	; 0x30
   13700:	cmp	r1, lr
   13704:	bcs	12ecc <__assert_fail@plt+0x1b14>
   13708:	ldrb	r1, [ip, r1]
   1370c:	sub	r1, r1, #48	; 0x30
   13710:	uxtb	r1, r1
   13714:	cmp	r1, #9
   13718:	bhi	12ecc <__assert_fail@plt+0x1b14>
   1371c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13720:	cmp	r8, r1
   13724:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13728:	movcc	r1, #48	; 0x30
   1372c:	strbcc	r1, [r2, r8]
   13730:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13734:	add	r1, r0, #2
   13738:	add	r8, r0, #3
   1373c:	cmp	r1, r2
   13740:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13744:	movcc	r2, #48	; 0x30
   13748:	strbcc	r2, [r3, r1]
   1374c:	b	12ecc <__assert_fail@plt+0x1b14>
   13750:	mov	r0, #48	; 0x30
   13754:	mov	r9, #1
   13758:	mov	sl, #0
   1375c:	b	13164 <__assert_fail@plt+0x1dac>
   13760:	mov	sl, #0
   13764:	b	137a0 <__assert_fail@plt+0x23e8>
   13768:	mov	sl, #0
   1376c:	cmp	lr, r6
   13770:	bls	137a0 <__assert_fail@plt+0x23e8>
   13774:	ldr	ip, [fp, #-84]	; 0xffffffac
   13778:	ldr	r6, [sp, #40]	; 0x28
   1377c:	ldr	r0, [sp, #36]	; 0x24
   13780:	ldrb	r0, [r0, r6]
   13784:	cmp	r0, #0
   13788:	beq	137a8 <__assert_fail@plt+0x23f0>
   1378c:	add	r6, r6, #1
   13790:	add	r0, r7, r6
   13794:	cmp	r0, lr
   13798:	bcc	1377c <__assert_fail@plt+0x23c4>
   1379c:	b	137a8 <__assert_fail@plt+0x23f0>
   137a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   137a4:	ldr	r6, [sp, #40]	; 0x28
   137a8:	mov	r1, r6
   137ac:	ldr	r4, [sp, #20]
   137b0:	ldr	r6, [sp, #76]	; 0x4c
   137b4:	b	130a8 <__assert_fail@plt+0x1cf0>
   137b8:	mov	lr, r7
   137bc:	b	137c4 <__assert_fail@plt+0x240c>
   137c0:	mvn	lr, #0
   137c4:	ldr	r9, [fp, #-64]	; 0xffffffc0
   137c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   137cc:	eor	r0, r9, #2
   137d0:	orr	r0, r0, r8
   137d4:	clz	r0, r0
   137d8:	lsr	r0, r0, #5
   137dc:	tst	r1, r0
   137e0:	bne	138dc <__assert_fail@plt+0x2524>
   137e4:	mov	r0, r1
   137e8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   137ec:	cmp	r9, #2
   137f0:	movwne	r1, #1
   137f4:	orr	r0, r0, r1
   137f8:	tst	r0, #1
   137fc:	bne	1391c <__assert_fail@plt+0x2564>
   13800:	ldr	r0, [sp, #52]	; 0x34
   13804:	ldr	r1, [sp, #68]	; 0x44
   13808:	str	lr, [sp, #80]	; 0x50
   1380c:	eor	r0, r0, #1
   13810:	tst	r0, #1
   13814:	bne	1391c <__assert_fail@plt+0x2564>
   13818:	tst	r4, #1
   1381c:	bne	138e4 <__assert_fail@plt+0x252c>
   13820:	mov	r7, #0
   13824:	cmp	r1, #0
   13828:	beq	13914 <__assert_fail@plt+0x255c>
   1382c:	ldr	r0, [sp, #84]	; 0x54
   13830:	mov	r3, #0
   13834:	cmp	r6, #0
   13838:	mov	r2, #0
   1383c:	mov	r4, r1
   13840:	str	r3, [fp, #-72]	; 0xffffffb8
   13844:	beq	12980 <__assert_fail@plt+0x15c8>
   13848:	b	1391c <__assert_fail@plt+0x2564>
   1384c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13850:	b	13878 <__assert_fail@plt+0x24c0>
   13854:	ldr	ip, [fp, #-84]	; 0xffffffac
   13858:	mov	r2, #1
   1385c:	mov	lr, r4
   13860:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13864:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13868:	b	1387c <__assert_fail@plt+0x24c4>
   1386c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13870:	mov	r7, #2
   13874:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13878:	ldr	r2, [sp, #84]	; 0x54
   1387c:	mov	r0, #0
   13880:	ldr	r1, [fp, #12]
   13884:	tst	r2, #1
   13888:	mov	r2, r7
   1388c:	mov	r3, lr
   13890:	str	r0, [sp, #8]
   13894:	ldr	r0, [sp, #64]	; 0x40
   13898:	movwne	r2, #4
   1389c:	cmp	r7, #2
   138a0:	movne	r2, r7
   138a4:	str	r2, [sp]
   138a8:	mov	r2, ip
   138ac:	bic	r1, r1, #2
   138b0:	str	r0, [sp, #12]
   138b4:	ldr	r0, [sp, #72]	; 0x48
   138b8:	str	r1, [sp, #4]
   138bc:	mov	r1, r6
   138c0:	str	r0, [sp, #16]
   138c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   138c8:	bl	12908 <__assert_fail@plt+0x1550>
   138cc:	mov	r8, r0
   138d0:	mov	r0, r8
   138d4:	sub	sp, fp, #28
   138d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138dc:	mov	r7, #2
   138e0:	b	13878 <__assert_fail@plt+0x24c0>
   138e4:	mov	r0, #5
   138e8:	ldr	r2, [fp, #-84]	; 0xffffffac
   138ec:	ldr	r3, [sp, #80]	; 0x50
   138f0:	str	r0, [sp]
   138f4:	ldr	r0, [fp, #12]
   138f8:	str	r0, [sp, #4]
   138fc:	ldr	r0, [fp, #16]
   13900:	str	r0, [sp, #8]
   13904:	ldr	r0, [sp, #64]	; 0x40
   13908:	str	r0, [sp, #12]
   1390c:	ldr	r0, [sp, #72]	; 0x48
   13910:	b	138c0 <__assert_fail@plt+0x2508>
   13914:	mov	r0, #0
   13918:	str	r0, [fp, #-72]	; 0xffffffb8
   1391c:	ldr	r1, [sp, #92]	; 0x5c
   13920:	cmp	r1, #0
   13924:	beq	13964 <__assert_fail@plt+0x25ac>
   13928:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1392c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13930:	tst	r0, #1
   13934:	bne	13968 <__assert_fail@plt+0x25b0>
   13938:	ldrb	r0, [r1]
   1393c:	cmp	r0, #0
   13940:	beq	13968 <__assert_fail@plt+0x25b0>
   13944:	add	r1, r1, #1
   13948:	cmp	r8, r6
   1394c:	strbcc	r0, [r2, r8]
   13950:	add	r8, r8, #1
   13954:	ldrb	r0, [r1], #1
   13958:	cmp	r0, #0
   1395c:	bne	13948 <__assert_fail@plt+0x2590>
   13960:	b	13968 <__assert_fail@plt+0x25b0>
   13964:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13968:	cmp	r8, r6
   1396c:	movcc	r0, #0
   13970:	strbcc	r0, [r2, r8]
   13974:	b	138d0 <__assert_fail@plt+0x2518>
   13978:	mov	r2, #1
   1397c:	b	13860 <__assert_fail@plt+0x24a8>
   13980:	mov	r7, #5
   13984:	b	13874 <__assert_fail@plt+0x24bc>
   13988:	bl	11388 <abort@plt>
   1398c:	mov	r3, r2
   13990:	mov	r2, #0
   13994:	b	13998 <__assert_fail@plt+0x25e0>
   13998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1399c:	add	fp, sp, #28
   139a0:	sub	sp, sp, #36	; 0x24
   139a4:	movw	r8, #29160	; 0x71e8
   139a8:	cmp	r3, #0
   139ac:	mov	r4, r2
   139b0:	str	r2, [sp, #24]
   139b4:	mov	r5, r1
   139b8:	mov	r6, r0
   139bc:	str	r0, [sp, #20]
   139c0:	movt	r8, #2
   139c4:	movne	r8, r3
   139c8:	bl	112b0 <__errno_location@plt>
   139cc:	str	r0, [sp, #28]
   139d0:	cmp	r4, #0
   139d4:	add	sl, r8, #8
   139d8:	ldm	r8, {r3, r9}
   139dc:	ldr	r7, [r0]
   139e0:	ldr	r1, [r8, #40]	; 0x28
   139e4:	ldr	r2, [r8, #44]	; 0x2c
   139e8:	mov	r0, #0
   139ec:	orreq	r9, r9, #1
   139f0:	str	r7, [sp, #32]
   139f4:	mov	r7, r5
   139f8:	stm	sp, {r3, r9, sl}
   139fc:	str	r1, [sp, #12]
   13a00:	str	r2, [sp, #16]
   13a04:	mov	r1, #0
   13a08:	mov	r2, r6
   13a0c:	mov	r3, r5
   13a10:	bl	12908 <__assert_fail@plt+0x1550>
   13a14:	add	r4, r0, #1
   13a18:	mov	r5, r0
   13a1c:	mov	r0, r4
   13a20:	bl	14a98 <__assert_fail@plt+0x36e0>
   13a24:	mov	r6, r0
   13a28:	ldr	r0, [r8]
   13a2c:	ldr	r2, [r8, #44]	; 0x2c
   13a30:	ldr	r1, [r8, #40]	; 0x28
   13a34:	mov	r3, r7
   13a38:	stm	sp, {r0, r9, sl}
   13a3c:	str	r2, [sp, #16]
   13a40:	str	r1, [sp, #12]
   13a44:	mov	r0, r6
   13a48:	mov	r1, r4
   13a4c:	ldr	r2, [sp, #20]
   13a50:	bl	12908 <__assert_fail@plt+0x1550>
   13a54:	ldr	r0, [sp, #24]
   13a58:	ldr	r1, [sp, #32]
   13a5c:	ldr	r2, [sp, #28]
   13a60:	cmp	r0, #0
   13a64:	str	r1, [r2]
   13a68:	strne	r5, [r0]
   13a6c:	mov	r0, r6
   13a70:	sub	sp, fp, #28
   13a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a7c:	add	fp, sp, #24
   13a80:	movw	r5, #28964	; 0x7124
   13a84:	movw	r8, #28960	; 0x7120
   13a88:	movt	r5, #2
   13a8c:	movt	r8, #2
   13a90:	ldr	r0, [r5]
   13a94:	ldr	r4, [r8]
   13a98:	cmp	r0, #2
   13a9c:	blt	13ac8 <__assert_fail@plt+0x2710>
   13aa0:	add	r7, r4, #12
   13aa4:	mov	r6, #0
   13aa8:	ldr	r0, [r7, r6, lsl #3]
   13aac:	bl	12650 <__assert_fail@plt+0x1298>
   13ab0:	ldr	r1, [r5]
   13ab4:	add	r2, r6, #2
   13ab8:	add	r0, r6, #1
   13abc:	mov	r6, r0
   13ac0:	cmp	r2, r1
   13ac4:	blt	13aa8 <__assert_fail@plt+0x26f0>
   13ac8:	ldr	r0, [r4, #4]
   13acc:	movw	r7, #29208	; 0x7218
   13ad0:	movt	r7, #2
   13ad4:	cmp	r0, r7
   13ad8:	beq	13af0 <__assert_fail@plt+0x2738>
   13adc:	bl	12650 <__assert_fail@plt+0x1298>
   13ae0:	movw	r0, #28968	; 0x7128
   13ae4:	mov	r6, #256	; 0x100
   13ae8:	movt	r0, #2
   13aec:	strd	r6, [r0]
   13af0:	movw	r6, #28968	; 0x7128
   13af4:	movt	r6, #2
   13af8:	cmp	r4, r6
   13afc:	beq	13b0c <__assert_fail@plt+0x2754>
   13b00:	mov	r0, r4
   13b04:	bl	12650 <__assert_fail@plt+0x1298>
   13b08:	str	r6, [r8]
   13b0c:	mov	r0, #1
   13b10:	str	r0, [r5]
   13b14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b18:	movw	r3, #29160	; 0x71e8
   13b1c:	mvn	r2, #0
   13b20:	movt	r3, #2
   13b24:	b	13b28 <__assert_fail@plt+0x2770>
   13b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b2c:	add	fp, sp, #28
   13b30:	sub	sp, sp, #44	; 0x2c
   13b34:	mov	r7, r3
   13b38:	str	r2, [sp, #36]	; 0x24
   13b3c:	str	r1, [sp, #32]
   13b40:	mov	r5, r0
   13b44:	bl	112b0 <__errno_location@plt>
   13b48:	cmp	r5, #0
   13b4c:	blt	13cb8 <__assert_fail@plt+0x2900>
   13b50:	cmn	r5, #-2147483647	; 0x80000001
   13b54:	beq	13cb8 <__assert_fail@plt+0x2900>
   13b58:	movw	r8, #28964	; 0x7124
   13b5c:	movw	r4, #28960	; 0x7120
   13b60:	str	r0, [sp, #28]
   13b64:	ldr	r0, [r0]
   13b68:	movt	r8, #2
   13b6c:	movt	r4, #2
   13b70:	ldr	r1, [r8]
   13b74:	ldr	r6, [r4]
   13b78:	str	r0, [sp, #24]
   13b7c:	cmp	r1, r5
   13b80:	ble	13b8c <__assert_fail@plt+0x27d4>
   13b84:	mov	sl, r6
   13b88:	b	13bf4 <__assert_fail@plt+0x283c>
   13b8c:	movw	r9, #28968	; 0x7128
   13b90:	mov	r0, #8
   13b94:	add	r2, r5, #1
   13b98:	str	r1, [fp, #-32]	; 0xffffffe0
   13b9c:	mvn	r3, #-2147483648	; 0x80000000
   13ba0:	movt	r9, #2
   13ba4:	str	r0, [sp]
   13ba8:	sub	r2, r2, r1
   13bac:	sub	r1, fp, #32
   13bb0:	subs	r0, r6, r9
   13bb4:	movne	r0, r6
   13bb8:	bl	14bc8 <__assert_fail@plt+0x3810>
   13bbc:	cmp	r6, r9
   13bc0:	mov	sl, r0
   13bc4:	str	r0, [r4]
   13bc8:	ldrdeq	r0, [r9]
   13bcc:	stmeq	sl, {r0, r1}
   13bd0:	ldr	r1, [r8]
   13bd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13bd8:	add	r0, sl, r1, lsl #3
   13bdc:	sub	r1, r2, r1
   13be0:	lsl	r2, r1, #3
   13be4:	mov	r1, #0
   13be8:	bl	112e0 <memset@plt>
   13bec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13bf0:	str	r0, [r8]
   13bf4:	mov	r9, sl
   13bf8:	ldr	r6, [r9, r5, lsl #3]!
   13bfc:	ldr	r4, [r9, #4]!
   13c00:	ldm	r7, {r0, r1}
   13c04:	ldr	r2, [r7, #40]	; 0x28
   13c08:	ldr	r3, [r7, #44]	; 0x2c
   13c0c:	orr	r8, r1, #1
   13c10:	add	r1, r7, #8
   13c14:	stm	sp, {r0, r8}
   13c18:	add	r0, sp, #8
   13c1c:	str	r1, [sp, #20]
   13c20:	stm	r0, {r1, r2, r3}
   13c24:	mov	r0, r4
   13c28:	mov	r1, r6
   13c2c:	ldr	r2, [sp, #32]
   13c30:	ldr	r3, [sp, #36]	; 0x24
   13c34:	bl	12908 <__assert_fail@plt+0x1550>
   13c38:	cmp	r6, r0
   13c3c:	bhi	13ca0 <__assert_fail@plt+0x28e8>
   13c40:	add	r6, r0, #1
   13c44:	movw	r0, #29208	; 0x7218
   13c48:	movt	r0, #2
   13c4c:	str	r6, [sl, r5, lsl #3]
   13c50:	cmp	r4, r0
   13c54:	beq	13c60 <__assert_fail@plt+0x28a8>
   13c58:	mov	r0, r4
   13c5c:	bl	12650 <__assert_fail@plt+0x1298>
   13c60:	mov	r0, r6
   13c64:	bl	14a98 <__assert_fail@plt+0x36e0>
   13c68:	str	r0, [r9]
   13c6c:	mov	r4, r0
   13c70:	add	r3, sp, #8
   13c74:	ldr	r0, [r7]
   13c78:	ldr	r1, [r7, #40]	; 0x28
   13c7c:	ldr	r2, [r7, #44]	; 0x2c
   13c80:	stm	sp, {r0, r8}
   13c84:	ldr	r0, [sp, #20]
   13c88:	stm	r3, {r0, r1, r2}
   13c8c:	mov	r0, r4
   13c90:	mov	r1, r6
   13c94:	ldr	r2, [sp, #32]
   13c98:	ldr	r3, [sp, #36]	; 0x24
   13c9c:	bl	12908 <__assert_fail@plt+0x1550>
   13ca0:	ldr	r0, [sp, #28]
   13ca4:	ldr	r1, [sp, #24]
   13ca8:	str	r1, [r0]
   13cac:	mov	r0, r4
   13cb0:	sub	sp, fp, #28
   13cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb8:	bl	11388 <abort@plt>
   13cbc:	movw	r3, #29160	; 0x71e8
   13cc0:	movt	r3, #2
   13cc4:	b	13b28 <__assert_fail@plt+0x2770>
   13cc8:	movw	r3, #29160	; 0x71e8
   13ccc:	mov	r1, r0
   13cd0:	mov	r0, #0
   13cd4:	mvn	r2, #0
   13cd8:	movt	r3, #2
   13cdc:	b	13b28 <__assert_fail@plt+0x2770>
   13ce0:	movw	r3, #29160	; 0x71e8
   13ce4:	mov	r2, r1
   13ce8:	mov	r1, r0
   13cec:	mov	r0, #0
   13cf0:	movt	r3, #2
   13cf4:	b	13b28 <__assert_fail@plt+0x2770>
   13cf8:	push	{fp, lr}
   13cfc:	mov	fp, sp
   13d00:	sub	sp, sp, #48	; 0x30
   13d04:	vmov.i32	q8, #0	; 0x00000000
   13d08:	mov	ip, #32
   13d0c:	mov	r3, sp
   13d10:	mov	lr, r2
   13d14:	cmp	r1, #10
   13d18:	add	r2, r3, #16
   13d1c:	vst1.64	{d16-d17}, [r3], ip
   13d20:	vst1.64	{d16-d17}, [r3]
   13d24:	vst1.64	{d16-d17}, [r2]
   13d28:	beq	13d48 <__assert_fail@plt+0x2990>
   13d2c:	str	r1, [sp]
   13d30:	mov	r3, sp
   13d34:	mov	r1, lr
   13d38:	mvn	r2, #0
   13d3c:	bl	13b28 <__assert_fail@plt+0x2770>
   13d40:	mov	sp, fp
   13d44:	pop	{fp, pc}
   13d48:	bl	11388 <abort@plt>
   13d4c:	push	{r4, sl, fp, lr}
   13d50:	add	fp, sp, #8
   13d54:	sub	sp, sp, #48	; 0x30
   13d58:	mov	ip, r3
   13d5c:	mov	r3, sp
   13d60:	vmov.i32	q8, #0	; 0x00000000
   13d64:	mov	lr, #32
   13d68:	cmp	r1, #10
   13d6c:	add	r4, r3, #16
   13d70:	vst1.64	{d16-d17}, [r3], lr
   13d74:	vst1.64	{d16-d17}, [r3]
   13d78:	vst1.64	{d16-d17}, [r4]
   13d7c:	beq	13d9c <__assert_fail@plt+0x29e4>
   13d80:	str	r1, [sp]
   13d84:	mov	r1, r2
   13d88:	mov	r3, sp
   13d8c:	mov	r2, ip
   13d90:	bl	13b28 <__assert_fail@plt+0x2770>
   13d94:	sub	sp, fp, #8
   13d98:	pop	{r4, sl, fp, pc}
   13d9c:	bl	11388 <abort@plt>
   13da0:	mov	r2, r1
   13da4:	mov	r1, r0
   13da8:	mov	r0, #0
   13dac:	b	13cf8 <__assert_fail@plt+0x2940>
   13db0:	mov	r3, r2
   13db4:	mov	r2, r1
   13db8:	mov	r1, r0
   13dbc:	mov	r0, #0
   13dc0:	b	13d4c <__assert_fail@plt+0x2994>
   13dc4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13dc8:	add	fp, sp, #24
   13dcc:	sub	sp, sp, #48	; 0x30
   13dd0:	movw	r8, #29160	; 0x71e8
   13dd4:	mov	lr, r0
   13dd8:	mov	r3, sp
   13ddc:	mov	ip, r1
   13de0:	movt	r8, #2
   13de4:	mov	r1, r3
   13de8:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13dec:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13df0:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13df4:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13df8:	ubfx	r0, r2, #5, #3
   13dfc:	and	r2, r2, #31
   13e00:	mov	r4, #1
   13e04:	add	r0, r3, r0, lsl #2
   13e08:	ldr	r1, [r0, #8]
   13e0c:	bic	r4, r4, r1, lsr r2
   13e10:	eor	r1, r1, r4, lsl r2
   13e14:	mov	r2, ip
   13e18:	str	r1, [r0, #8]
   13e1c:	mov	r0, #0
   13e20:	mov	r1, lr
   13e24:	bl	13b28 <__assert_fail@plt+0x2770>
   13e28:	sub	sp, fp, #24
   13e2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e34:	add	fp, sp, #24
   13e38:	sub	sp, sp, #48	; 0x30
   13e3c:	movw	lr, #29160	; 0x71e8
   13e40:	mov	ip, r0
   13e44:	mov	r3, sp
   13e48:	movt	lr, #2
   13e4c:	mov	r2, r3
   13e50:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13e54:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13e58:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13e5c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13e60:	ubfx	r0, r1, #5, #3
   13e64:	and	r1, r1, #31
   13e68:	mov	r7, #1
   13e6c:	add	r0, r3, r0, lsl #2
   13e70:	ldr	r2, [r0, #8]
   13e74:	bic	r7, r7, r2, lsr r1
   13e78:	eor	r1, r2, r7, lsl r1
   13e7c:	mvn	r2, #0
   13e80:	str	r1, [r0, #8]
   13e84:	mov	r0, #0
   13e88:	mov	r1, ip
   13e8c:	bl	13b28 <__assert_fail@plt+0x2770>
   13e90:	sub	sp, fp, #24
   13e94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e98:	push	{r4, r5, r6, r7, fp, lr}
   13e9c:	add	fp, sp, #16
   13ea0:	sub	sp, sp, #48	; 0x30
   13ea4:	movw	lr, #29160	; 0x71e8
   13ea8:	mov	ip, r0
   13eac:	mov	r3, sp
   13eb0:	movt	lr, #2
   13eb4:	mov	r2, r3
   13eb8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13ebc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13ec0:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13ec4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13ec8:	mov	r1, ip
   13ecc:	mvn	r2, #0
   13ed0:	ldr	r0, [sp, #12]
   13ed4:	orr	r0, r0, #67108864	; 0x4000000
   13ed8:	str	r0, [sp, #12]
   13edc:	mov	r0, #0
   13ee0:	bl	13b28 <__assert_fail@plt+0x2770>
   13ee4:	sub	sp, fp, #16
   13ee8:	pop	{r4, r5, r6, r7, fp, pc}
   13eec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ef0:	add	fp, sp, #24
   13ef4:	sub	sp, sp, #48	; 0x30
   13ef8:	movw	r8, #29160	; 0x71e8
   13efc:	mov	ip, r1
   13f00:	mov	lr, r0
   13f04:	mov	r3, sp
   13f08:	movt	r8, #2
   13f0c:	mov	r2, r3
   13f10:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13f14:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13f18:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13f1c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13f20:	mov	r1, lr
   13f24:	mov	r2, ip
   13f28:	ldr	r0, [sp, #12]
   13f2c:	orr	r0, r0, #67108864	; 0x4000000
   13f30:	str	r0, [sp, #12]
   13f34:	mov	r0, #0
   13f38:	bl	13b28 <__assert_fail@plt+0x2770>
   13f3c:	sub	sp, fp, #24
   13f40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f48:	add	fp, sp, #24
   13f4c:	sub	sp, sp, #96	; 0x60
   13f50:	mov	lr, sp
   13f54:	vmov.i32	q8, #0	; 0x00000000
   13f58:	mov	ip, r2
   13f5c:	cmp	r1, #10
   13f60:	add	r3, lr, #16
   13f64:	mov	r2, lr
   13f68:	vst1.64	{d16-d17}, [r3]
   13f6c:	mov	r3, #28
   13f70:	vst1.64	{d16-d17}, [r2], r3
   13f74:	vst1.32	{d16-d17}, [r2]
   13f78:	beq	13fb8 <__assert_fail@plt+0x2c00>
   13f7c:	str	r1, [sp, #48]	; 0x30
   13f80:	add	r3, sp, #48	; 0x30
   13f84:	ldm	lr!, {r2, r4, r5, r6, r7}
   13f88:	add	r1, r3, #4
   13f8c:	stmia	r1!, {r2, r4, r5, r6, r7}
   13f90:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13f94:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13f98:	mvn	r2, #0
   13f9c:	ldr	r1, [sp, #60]	; 0x3c
   13fa0:	orr	r1, r1, #67108864	; 0x4000000
   13fa4:	str	r1, [sp, #60]	; 0x3c
   13fa8:	mov	r1, ip
   13fac:	bl	13b28 <__assert_fail@plt+0x2770>
   13fb0:	sub	sp, fp, #24
   13fb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fb8:	bl	11388 <abort@plt>
   13fbc:	push	{fp, lr}
   13fc0:	mov	fp, sp
   13fc4:	sub	sp, sp, #8
   13fc8:	mvn	ip, #0
   13fcc:	str	ip, [sp]
   13fd0:	bl	13fdc <__assert_fail@plt+0x2c24>
   13fd4:	mov	sp, fp
   13fd8:	pop	{fp, pc}
   13fdc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13fe0:	add	fp, sp, #24
   13fe4:	sub	sp, sp, #48	; 0x30
   13fe8:	movw	ip, #29160	; 0x71e8
   13fec:	mov	lr, r3
   13ff0:	mov	r3, sp
   13ff4:	cmp	r1, #0
   13ff8:	movt	ip, #2
   13ffc:	cmpne	r2, #0
   14000:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14004:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   14008:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1400c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14010:	mov	r3, #10
   14014:	str	r3, [sp]
   14018:	bne	14020 <__assert_fail@plt+0x2c68>
   1401c:	bl	11388 <abort@plt>
   14020:	ldr	ip, [fp, #8]
   14024:	str	r2, [sp, #44]	; 0x2c
   14028:	str	r1, [sp, #40]	; 0x28
   1402c:	mov	r3, sp
   14030:	mov	r1, lr
   14034:	mov	r2, ip
   14038:	bl	13b28 <__assert_fail@plt+0x2770>
   1403c:	sub	sp, fp, #24
   14040:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14044:	push	{fp, lr}
   14048:	mov	fp, sp
   1404c:	sub	sp, sp, #8
   14050:	mov	r3, r2
   14054:	mov	r2, r1
   14058:	mov	r1, r0
   1405c:	mvn	r0, #0
   14060:	str	r0, [sp]
   14064:	mov	r0, #0
   14068:	bl	13fdc <__assert_fail@plt+0x2c24>
   1406c:	mov	sp, fp
   14070:	pop	{fp, pc}
   14074:	push	{fp, lr}
   14078:	mov	fp, sp
   1407c:	sub	sp, sp, #8
   14080:	mov	ip, r2
   14084:	mov	r2, r1
   14088:	mov	r1, r0
   1408c:	str	r3, [sp]
   14090:	mov	r0, #0
   14094:	mov	r3, ip
   14098:	bl	13fdc <__assert_fail@plt+0x2c24>
   1409c:	mov	sp, fp
   140a0:	pop	{fp, pc}
   140a4:	movw	r3, #28976	; 0x7130
   140a8:	movt	r3, #2
   140ac:	b	13b28 <__assert_fail@plt+0x2770>
   140b0:	movw	r3, #28976	; 0x7130
   140b4:	mov	r2, r1
   140b8:	mov	r1, r0
   140bc:	mov	r0, #0
   140c0:	movt	r3, #2
   140c4:	b	13b28 <__assert_fail@plt+0x2770>
   140c8:	movw	r3, #28976	; 0x7130
   140cc:	mvn	r2, #0
   140d0:	movt	r3, #2
   140d4:	b	13b28 <__assert_fail@plt+0x2770>
   140d8:	movw	r3, #28976	; 0x7130
   140dc:	mov	r1, r0
   140e0:	mov	r0, #0
   140e4:	mvn	r2, #0
   140e8:	movt	r3, #2
   140ec:	b	13b28 <__assert_fail@plt+0x2770>
   140f0:	push	{r4, r5, fp, lr}
   140f4:	add	fp, sp, #8
   140f8:	mov	r5, r0
   140fc:	mov	r4, r1
   14100:	mov	r0, #0
   14104:	mov	r2, #5
   14108:	mov	r1, r5
   1410c:	bl	11190 <dcgettext@plt>
   14110:	cmp	r0, r5
   14114:	popne	{r4, r5, fp, pc}
   14118:	bl	15688 <__assert_fail@plt+0x42d0>
   1411c:	ldrb	r1, [r0]
   14120:	and	r1, r1, #223	; 0xdf
   14124:	cmp	r1, #71	; 0x47
   14128:	beq	14190 <__assert_fail@plt+0x2dd8>
   1412c:	cmp	r1, #85	; 0x55
   14130:	bne	141b4 <__assert_fail@plt+0x2dfc>
   14134:	ldrb	r1, [r0, #1]
   14138:	and	r1, r1, #223	; 0xdf
   1413c:	cmp	r1, #84	; 0x54
   14140:	bne	141b4 <__assert_fail@plt+0x2dfc>
   14144:	ldrb	r1, [r0, #2]
   14148:	and	r1, r1, #223	; 0xdf
   1414c:	cmp	r1, #70	; 0x46
   14150:	ldrbeq	r1, [r0, #3]
   14154:	cmpeq	r1, #45	; 0x2d
   14158:	bne	141b4 <__assert_fail@plt+0x2dfc>
   1415c:	ldrb	r1, [r0, #4]
   14160:	cmp	r1, #56	; 0x38
   14164:	ldrbeq	r0, [r0, #5]
   14168:	cmpeq	r0, #0
   1416c:	bne	141b4 <__assert_fail@plt+0x2dfc>
   14170:	ldrb	r1, [r5]
   14174:	movw	r2, #25946	; 0x655a
   14178:	movw	r0, #25950	; 0x655e
   1417c:	movt	r2, #1
   14180:	movt	r0, #1
   14184:	cmp	r1, #96	; 0x60
   14188:	moveq	r0, r2
   1418c:	pop	{r4, r5, fp, pc}
   14190:	ldrb	r1, [r0, #1]
   14194:	and	r1, r1, #223	; 0xdf
   14198:	cmp	r1, #66	; 0x42
   1419c:	bne	141b4 <__assert_fail@plt+0x2dfc>
   141a0:	ldrb	r1, [r0, #2]
   141a4:	cmp	r1, #49	; 0x31
   141a8:	ldrbeq	r1, [r0, #3]
   141ac:	cmpeq	r1, #56	; 0x38
   141b0:	beq	141d0 <__assert_fail@plt+0x2e18>
   141b4:	movw	r1, #25940	; 0x6554
   141b8:	movw	r0, #25944	; 0x6558
   141bc:	cmp	r4, #9
   141c0:	movt	r1, #1
   141c4:	movt	r0, #1
   141c8:	moveq	r0, r1
   141cc:	pop	{r4, r5, fp, pc}
   141d0:	ldrb	r1, [r0, #4]
   141d4:	cmp	r1, #48	; 0x30
   141d8:	ldrbeq	r1, [r0, #5]
   141dc:	cmpeq	r1, #51	; 0x33
   141e0:	bne	141b4 <__assert_fail@plt+0x2dfc>
   141e4:	ldrb	r1, [r0, #6]
   141e8:	cmp	r1, #48	; 0x30
   141ec:	ldrbeq	r0, [r0, #7]
   141f0:	cmpeq	r0, #0
   141f4:	bne	141b4 <__assert_fail@plt+0x2dfc>
   141f8:	ldrb	r1, [r5]
   141fc:	movw	r2, #25954	; 0x6562
   14200:	movw	r0, #25958	; 0x6566
   14204:	movt	r2, #1
   14208:	movt	r0, #1
   1420c:	b	14184 <__assert_fail@plt+0x2dcc>
   14210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14214:	add	fp, sp, #28
   14218:	sub	sp, sp, #12
   1421c:	ldr	sl, [fp, #8]
   14220:	mov	r9, r3
   14224:	mov	r4, r2
   14228:	mov	r8, r1
   1422c:	mov	r7, r0
   14230:	cmp	r2, #0
   14234:	beq	1424c <__assert_fail@plt+0x2e94>
   14238:	mov	r0, r7
   1423c:	mov	r1, #58	; 0x3a
   14240:	bl	112a4 <strchr@plt>
   14244:	mov	r6, r0
   14248:	b	14250 <__assert_fail@plt+0x2e98>
   1424c:	mov	r6, #0
   14250:	mov	r0, r7
   14254:	mov	r1, r6
   14258:	mov	r2, r8
   1425c:	mov	r3, r4
   14260:	stm	sp, {r9, sl}
   14264:	bl	142cc <__assert_fail@plt+0x2f14>
   14268:	mov	r5, r0
   1426c:	cmp	r4, #0
   14270:	beq	142c0 <__assert_fail@plt+0x2f08>
   14274:	cmp	r6, #0
   14278:	bne	142c0 <__assert_fail@plt+0x2f08>
   1427c:	cmp	r5, #0
   14280:	beq	142c0 <__assert_fail@plt+0x2f08>
   14284:	mov	r0, r7
   14288:	mov	r1, #46	; 0x2e
   1428c:	bl	112a4 <strchr@plt>
   14290:	cmp	r0, #0
   14294:	beq	142c0 <__assert_fail@plt+0x2f08>
   14298:	mov	r1, r0
   1429c:	mov	r0, r7
   142a0:	mov	r2, r8
   142a4:	mov	r3, r4
   142a8:	stm	sp, {r9, sl}
   142ac:	bl	142cc <__assert_fail@plt+0x2f14>
   142b0:	cmp	r0, #0
   142b4:	movne	r0, r5
   142b8:	sub	sp, fp, #28
   142bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142c0:	mov	r0, r5
   142c4:	sub	sp, fp, #28
   142c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142d0:	add	fp, sp, #28
   142d4:	sub	sp, sp, #36	; 0x24
   142d8:	mov	sl, r3
   142dc:	ldr	r3, [r2]
   142e0:	mov	r9, r2
   142e4:	mov	r4, r1
   142e8:	ldr	r2, [fp, #8]
   142ec:	ldr	r8, [fp, #12]
   142f0:	cmp	sl, #0
   142f4:	ldrne	r1, [sl]
   142f8:	str	r3, [sp, #4]
   142fc:	mvneq	r1, #0
   14300:	cmp	r2, #0
   14304:	str	r1, [sp, #8]
   14308:	movne	r1, #0
   1430c:	strne	r1, [r2]
   14310:	cmp	r8, #0
   14314:	movne	r1, #0
   14318:	strne	r1, [r8]
   1431c:	cmp	r4, #0
   14320:	beq	14354 <__assert_fail@plt+0x2f9c>
   14324:	subs	r5, r4, r0
   14328:	beq	143e4 <__assert_fail@plt+0x302c>
   1432c:	add	r1, r5, #1
   14330:	bl	14df4 <__assert_fail@plt+0x3a3c>
   14334:	mov	r7, r0
   14338:	mov	r0, #0
   1433c:	mov	r6, r4
   14340:	strb	r0, [r7, r5]
   14344:	ldrb	r0, [r6, #1]!
   14348:	cmp	r0, #0
   1434c:	moveq	r6, r0
   14350:	b	1436c <__assert_fail@plt+0x2fb4>
   14354:	ldrb	r1, [r0]
   14358:	cmp	r1, #0
   1435c:	beq	14460 <__assert_fail@plt+0x30a8>
   14360:	bl	14e78 <__assert_fail@plt+0x3ac0>
   14364:	mov	r7, r0
   14368:	mov	r6, #0
   1436c:	ldrb	r0, [r7]
   14370:	cmp	r0, #43	; 0x2b
   14374:	beq	143c4 <__assert_fail@plt+0x300c>
   14378:	mov	r0, r7
   1437c:	bl	1110c <getpwnam@plt>
   14380:	cmp	r0, #0
   14384:	beq	143c4 <__assert_fail@plt+0x300c>
   14388:	ldr	r1, [r0, #8]
   1438c:	mov	r5, #0
   14390:	cmp	r4, #0
   14394:	str	r1, [sp, #4]
   14398:	beq	143dc <__assert_fail@plt+0x3024>
   1439c:	cmp	r6, #0
   143a0:	bne	143dc <__assert_fail@plt+0x3024>
   143a4:	ldr	r4, [r0, #12]
   143a8:	mov	r0, r4
   143ac:	bl	11394 <getgrgid@plt>
   143b0:	cmp	r0, #0
   143b4:	str	r4, [sp, #8]
   143b8:	beq	1446c <__assert_fail@plt+0x30b4>
   143bc:	ldr	r0, [r0]
   143c0:	b	1447c <__assert_fail@plt+0x30c4>
   143c4:	cmp	r4, #0
   143c8:	beq	14404 <__assert_fail@plt+0x304c>
   143cc:	cmp	r6, #0
   143d0:	bne	14404 <__assert_fail@plt+0x304c>
   143d4:	movw	r5, #26075	; 0x65db
   143d8:	movt	r5, #1
   143dc:	mov	r4, #0
   143e0:	b	14488 <__assert_fail@plt+0x30d0>
   143e4:	ldrb	r0, [r4, #1]!
   143e8:	mov	r7, #0
   143ec:	mov	r5, #0
   143f0:	cmp	r0, #0
   143f4:	moveq	r4, r0
   143f8:	mov	r6, r4
   143fc:	mov	r4, #0
   14400:	b	1448c <__assert_fail@plt+0x30d4>
   14404:	movw	r0, #23831	; 0x5d17
   14408:	add	r3, sp, #12
   1440c:	mov	r1, #0
   14410:	mov	r2, #10
   14414:	mov	r4, #0
   14418:	movt	r0, #1
   1441c:	str	r0, [sp]
   14420:	mov	r0, r7
   14424:	bl	14f30 <__assert_fail@plt+0x3b78>
   14428:	ldr	r1, [sp, #12]
   1442c:	clz	r0, r0
   14430:	movw	r5, #26048	; 0x65c0
   14434:	lsr	r0, r0, #5
   14438:	movt	r5, #1
   1443c:	add	r2, r1, #1
   14440:	cmn	r1, #1
   14444:	movwne	r2, #1
   14448:	ands	r0, r0, r2
   1444c:	ldr	r0, [sp, #4]
   14450:	movwne	r5, #0
   14454:	movne	r0, r1
   14458:	str	r0, [sp, #4]
   1445c:	b	14488 <__assert_fail@plt+0x30d0>
   14460:	mov	r4, #0
   14464:	mov	r7, #0
   14468:	b	14534 <__assert_fail@plt+0x317c>
   1446c:	add	r2, sp, #12
   14470:	mov	r0, r4
   14474:	mov	r1, #0
   14478:	bl	12678 <__assert_fail@plt+0x12c0>
   1447c:	bl	14e78 <__assert_fail@plt+0x3ac0>
   14480:	mov	r4, r0
   14484:	bl	110e8 <endgrent@plt>
   14488:	bl	11334 <endpwent@plt>
   1448c:	cmp	r6, #0
   14490:	beq	14528 <__assert_fail@plt+0x3170>
   14494:	cmp	r5, #0
   14498:	bne	14528 <__assert_fail@plt+0x3170>
   1449c:	ldrb	r0, [r6]
   144a0:	cmp	r0, #43	; 0x2b
   144a4:	beq	144c4 <__assert_fail@plt+0x310c>
   144a8:	mov	r0, r6
   144ac:	bl	113a0 <getgrnam@plt>
   144b0:	cmp	r0, #0
   144b4:	beq	144c4 <__assert_fail@plt+0x310c>
   144b8:	ldr	r0, [r0, #8]
   144bc:	mov	r5, #0
   144c0:	b	14514 <__assert_fail@plt+0x315c>
   144c4:	movw	r0, #23831	; 0x5d17
   144c8:	add	r3, sp, #12
   144cc:	mov	r1, #0
   144d0:	mov	r2, #10
   144d4:	movt	r0, #1
   144d8:	str	r0, [sp]
   144dc:	mov	r0, r6
   144e0:	bl	14f30 <__assert_fail@plt+0x3b78>
   144e4:	ldr	r1, [sp, #12]
   144e8:	clz	r0, r0
   144ec:	movw	r5, #26061	; 0x65cd
   144f0:	lsr	r0, r0, #5
   144f4:	movt	r5, #1
   144f8:	add	r2, r1, #1
   144fc:	cmn	r1, #1
   14500:	movwne	r2, #1
   14504:	ands	r0, r0, r2
   14508:	ldr	r0, [sp, #8]
   1450c:	movwne	r5, #0
   14510:	movne	r0, r1
   14514:	str	r0, [sp, #8]
   14518:	bl	110e8 <endgrent@plt>
   1451c:	mov	r0, r6
   14520:	bl	14e78 <__assert_fail@plt+0x3ac0>
   14524:	mov	r4, r0
   14528:	mov	r6, #0
   1452c:	cmp	r5, #0
   14530:	bne	14578 <__assert_fail@plt+0x31c0>
   14534:	ldr	r0, [sp, #4]
   14538:	cmp	sl, #0
   1453c:	mov	r6, #1
   14540:	str	r0, [r9]
   14544:	ldrne	r0, [sp, #8]
   14548:	strne	r0, [sl]
   1454c:	ldr	r0, [fp, #8]
   14550:	cmp	r0, #0
   14554:	strne	r7, [r0]
   14558:	movne	r7, #0
   1455c:	cmp	r8, #0
   14560:	beq	14574 <__assert_fail@plt+0x31bc>
   14564:	str	r4, [r8]
   14568:	mov	r5, #0
   1456c:	mov	r4, #0
   14570:	b	14578 <__assert_fail@plt+0x31c0>
   14574:	mov	r5, #0
   14578:	mov	r0, r7
   1457c:	bl	12650 <__assert_fail@plt+0x1298>
   14580:	mov	r0, r4
   14584:	bl	12650 <__assert_fail@plt+0x1298>
   14588:	mov	r0, #0
   1458c:	cmp	r6, #0
   14590:	bne	145a4 <__assert_fail@plt+0x31ec>
   14594:	mov	r0, #0
   14598:	mov	r1, r5
   1459c:	mov	r2, #5
   145a0:	bl	11190 <dcgettext@plt>
   145a4:	sub	sp, fp, #28
   145a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145b0:	add	fp, sp, #24
   145b4:	sub	sp, sp, #32
   145b8:	ldr	r6, [fp, #12]
   145bc:	ldr	r7, [fp, #8]
   145c0:	mov	r4, r2
   145c4:	mov	r8, r0
   145c8:	cmp	r1, #0
   145cc:	beq	145f4 <__assert_fail@plt+0x323c>
   145d0:	movw	r2, #26088	; 0x65e8
   145d4:	mov	r5, r1
   145d8:	str	r3, [sp, #4]
   145dc:	str	r4, [sp]
   145e0:	mov	r0, r8
   145e4:	mov	r1, #1
   145e8:	movt	r2, #1
   145ec:	mov	r3, r5
   145f0:	b	1460c <__assert_fail@plt+0x3254>
   145f4:	movw	r2, #26100	; 0x65f4
   145f8:	str	r3, [sp]
   145fc:	mov	r0, r8
   14600:	mov	r1, #1
   14604:	mov	r3, r4
   14608:	movt	r2, #1
   1460c:	bl	11304 <__fprintf_chk@plt>
   14610:	movw	r1, #26107	; 0x65fb
   14614:	mov	r0, #0
   14618:	mov	r2, #5
   1461c:	movt	r1, #1
   14620:	bl	11190 <dcgettext@plt>
   14624:	movw	r2, #26825	; 0x68c9
   14628:	mov	r3, r0
   1462c:	movw	r0, #2022	; 0x7e6
   14630:	mov	r1, #1
   14634:	str	r0, [sp]
   14638:	movt	r2, #1
   1463c:	mov	r0, r8
   14640:	bl	11304 <__fprintf_chk@plt>
   14644:	movw	r4, #23830	; 0x5d16
   14648:	mov	r1, r8
   1464c:	movt	r4, #1
   14650:	mov	r0, r4
   14654:	bl	110f4 <fputs_unlocked@plt>
   14658:	movw	r1, #26111	; 0x65ff
   1465c:	mov	r0, #0
   14660:	mov	r2, #5
   14664:	movt	r1, #1
   14668:	bl	11190 <dcgettext@plt>
   1466c:	movw	r3, #26282	; 0x66aa
   14670:	mov	r2, r0
   14674:	mov	r0, r8
   14678:	mov	r1, #1
   1467c:	movt	r3, #1
   14680:	bl	11304 <__fprintf_chk@plt>
   14684:	mov	r0, r4
   14688:	mov	r1, r8
   1468c:	bl	110f4 <fputs_unlocked@plt>
   14690:	cmp	r6, #9
   14694:	bhi	146f8 <__assert_fail@plt+0x3340>
   14698:	add	r0, pc, #0
   1469c:	ldr	pc, [r0, r6, lsl #2]
   146a0:	ldrdeq	r4, [r1], -r0
   146a4:	andeq	r4, r1, r8, asr #13
   146a8:	andeq	r4, r1, r4, lsl #14
   146ac:	andeq	r4, r1, ip, lsr #14
   146b0:	andeq	r4, r1, r4, asr r7
   146b4:	andeq	r4, r1, ip, ror r7
   146b8:	andeq	r4, r1, r4, lsr #15
   146bc:	ldrdeq	r4, [r1], -ip
   146c0:	andeq	r4, r1, ip, ror r8
   146c4:	andeq	r4, r1, r4, lsr #16
   146c8:	movw	r1, #26316	; 0x66cc
   146cc:	mov	r0, #0
   146d0:	mov	r2, #5
   146d4:	movt	r1, #1
   146d8:	bl	11190 <dcgettext@plt>
   146dc:	ldr	r3, [r7]
   146e0:	mov	r2, r0
   146e4:	mov	r0, r8
   146e8:	mov	r1, #1
   146ec:	sub	sp, fp, #24
   146f0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   146f4:	b	11304 <__fprintf_chk@plt>
   146f8:	movw	r1, #26635	; 0x680b
   146fc:	movt	r1, #1
   14700:	b	1482c <__assert_fail@plt+0x3474>
   14704:	movw	r1, #26332	; 0x66dc
   14708:	mov	r0, #0
   1470c:	mov	r2, #5
   14710:	movt	r1, #1
   14714:	bl	11190 <dcgettext@plt>
   14718:	mov	r2, r0
   1471c:	ldr	r3, [r7]
   14720:	ldr	r0, [r7, #4]
   14724:	str	r0, [sp]
   14728:	b	14818 <__assert_fail@plt+0x3460>
   1472c:	movw	r1, #26355	; 0x66f3
   14730:	mov	r0, #0
   14734:	mov	r2, #5
   14738:	movt	r1, #1
   1473c:	bl	11190 <dcgettext@plt>
   14740:	ldr	r3, [r7]
   14744:	mov	r2, r0
   14748:	ldmib	r7, {r0, r1}
   1474c:	stm	sp, {r0, r1}
   14750:	b	14818 <__assert_fail@plt+0x3460>
   14754:	movw	r1, #26383	; 0x670f
   14758:	mov	r0, #0
   1475c:	mov	r2, #5
   14760:	movt	r1, #1
   14764:	bl	11190 <dcgettext@plt>
   14768:	ldr	r3, [r7]
   1476c:	mov	r2, r0
   14770:	ldmib	r7, {r0, r1, r7}
   14774:	stm	sp, {r0, r1, r7}
   14778:	b	14818 <__assert_fail@plt+0x3460>
   1477c:	movw	r1, #26415	; 0x672f
   14780:	mov	r0, #0
   14784:	mov	r2, #5
   14788:	movt	r1, #1
   1478c:	bl	11190 <dcgettext@plt>
   14790:	ldr	r3, [r7]
   14794:	mov	r2, r0
   14798:	ldmib	r7, {r0, r1, r6, r7}
   1479c:	stm	sp, {r0, r1, r6, r7}
   147a0:	b	14818 <__assert_fail@plt+0x3460>
   147a4:	movw	r1, #26451	; 0x6753
   147a8:	mov	r0, #0
   147ac:	mov	r2, #5
   147b0:	movt	r1, #1
   147b4:	bl	11190 <dcgettext@plt>
   147b8:	ldr	r3, [r7]
   147bc:	mov	r2, r0
   147c0:	ldmib	r7, {r0, r1, r6}
   147c4:	ldr	r5, [r7, #16]
   147c8:	ldr	r7, [r7, #20]
   147cc:	stm	sp, {r0, r1, r6}
   147d0:	str	r5, [sp, #12]
   147d4:	str	r7, [sp, #16]
   147d8:	b	14818 <__assert_fail@plt+0x3460>
   147dc:	movw	r1, #26491	; 0x677b
   147e0:	mov	r0, #0
   147e4:	mov	r2, #5
   147e8:	movt	r1, #1
   147ec:	bl	11190 <dcgettext@plt>
   147f0:	ldr	r3, [r7]
   147f4:	mov	r2, r0
   147f8:	ldmib	r7, {r0, r1, r6}
   147fc:	ldr	r5, [r7, #16]
   14800:	ldr	r4, [r7, #20]
   14804:	ldr	r7, [r7, #24]
   14808:	stm	sp, {r0, r1, r6}
   1480c:	str	r5, [sp, #12]
   14810:	str	r4, [sp, #16]
   14814:	str	r7, [sp, #20]
   14818:	mov	r0, r8
   1481c:	mov	r1, #1
   14820:	b	148cc <__assert_fail@plt+0x3514>
   14824:	movw	r1, #26583	; 0x67d7
   14828:	movt	r1, #1
   1482c:	mov	r0, #0
   14830:	mov	r2, #5
   14834:	bl	11190 <dcgettext@plt>
   14838:	mov	ip, r0
   1483c:	ldr	r3, [r7]
   14840:	ldr	r0, [r7, #4]
   14844:	ldr	r1, [r7, #8]
   14848:	ldr	r6, [r7, #12]
   1484c:	ldr	r5, [r7, #16]
   14850:	ldr	r4, [r7, #20]
   14854:	ldr	r2, [r7, #24]
   14858:	ldr	lr, [r7, #28]
   1485c:	ldr	r7, [r7, #32]
   14860:	stm	sp, {r0, r1, r6}
   14864:	str	r5, [sp, #12]
   14868:	str	r4, [sp, #16]
   1486c:	str	r2, [sp, #20]
   14870:	str	lr, [sp, #24]
   14874:	str	r7, [sp, #28]
   14878:	b	148c0 <__assert_fail@plt+0x3508>
   1487c:	movw	r1, #26535	; 0x67a7
   14880:	mov	r0, #0
   14884:	mov	r2, #5
   14888:	movt	r1, #1
   1488c:	bl	11190 <dcgettext@plt>
   14890:	mov	ip, r0
   14894:	ldr	r3, [r7]
   14898:	ldmib	r7, {r0, r1, r6}
   1489c:	ldr	r5, [r7, #16]
   148a0:	ldr	r4, [r7, #20]
   148a4:	ldr	r2, [r7, #24]
   148a8:	ldr	r7, [r7, #28]
   148ac:	stm	sp, {r0, r1, r6}
   148b0:	str	r5, [sp, #12]
   148b4:	str	r4, [sp, #16]
   148b8:	str	r2, [sp, #20]
   148bc:	str	r7, [sp, #24]
   148c0:	mov	r0, r8
   148c4:	mov	r1, #1
   148c8:	mov	r2, ip
   148cc:	bl	11304 <__fprintf_chk@plt>
   148d0:	sub	sp, fp, #24
   148d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148d8:	push	{r4, sl, fp, lr}
   148dc:	add	fp, sp, #8
   148e0:	sub	sp, sp, #8
   148e4:	ldr	ip, [fp, #8]
   148e8:	mov	lr, #0
   148ec:	ldr	r4, [ip, lr, lsl #2]
   148f0:	add	lr, lr, #1
   148f4:	cmp	r4, #0
   148f8:	bne	148ec <__assert_fail@plt+0x3534>
   148fc:	sub	r4, lr, #1
   14900:	str	ip, [sp]
   14904:	str	r4, [sp, #4]
   14908:	bl	145ac <__assert_fail@plt+0x31f4>
   1490c:	sub	sp, fp, #8
   14910:	pop	{r4, sl, fp, pc}
   14914:	push	{r4, r5, fp, lr}
   14918:	add	fp, sp, #8
   1491c:	sub	sp, sp, #48	; 0x30
   14920:	ldr	r4, [fp, #8]
   14924:	mov	ip, #0
   14928:	add	lr, sp, #8
   1492c:	ldr	r5, [r4]
   14930:	cmp	r5, #0
   14934:	str	r5, [lr, ip, lsl #2]
   14938:	beq	1494c <__assert_fail@plt+0x3594>
   1493c:	add	ip, ip, #1
   14940:	add	r4, r4, #4
   14944:	cmp	ip, #10
   14948:	bcc	1492c <__assert_fail@plt+0x3574>
   1494c:	str	lr, [sp]
   14950:	str	ip, [sp, #4]
   14954:	bl	145ac <__assert_fail@plt+0x31f4>
   14958:	sub	sp, fp, #8
   1495c:	pop	{r4, r5, fp, pc}
   14960:	push	{fp, lr}
   14964:	mov	fp, sp
   14968:	sub	sp, sp, #8
   1496c:	add	ip, fp, #8
   14970:	str	ip, [sp, #4]
   14974:	str	ip, [sp]
   14978:	bl	14914 <__assert_fail@plt+0x355c>
   1497c:	mov	sp, fp
   14980:	pop	{fp, pc}
   14984:	push	{fp, lr}
   14988:	mov	fp, sp
   1498c:	movw	r0, #29044	; 0x7174
   14990:	movt	r0, #2
   14994:	ldr	r1, [r0]
   14998:	movw	r0, #23830	; 0x5d16
   1499c:	movt	r0, #1
   149a0:	bl	110f4 <fputs_unlocked@plt>
   149a4:	movw	r1, #26695	; 0x6847
   149a8:	mov	r0, #0
   149ac:	mov	r2, #5
   149b0:	movt	r1, #1
   149b4:	bl	11190 <dcgettext@plt>
   149b8:	movw	r2, #26715	; 0x685b
   149bc:	mov	r1, r0
   149c0:	mov	r0, #1
   149c4:	movt	r2, #1
   149c8:	bl	112ec <__printf_chk@plt>
   149cc:	movw	r1, #26737	; 0x6871
   149d0:	mov	r0, #0
   149d4:	mov	r2, #5
   149d8:	movt	r1, #1
   149dc:	bl	11190 <dcgettext@plt>
   149e0:	movw	r2, #24614	; 0x6026
   149e4:	movw	r3, #25120	; 0x6220
   149e8:	mov	r1, r0
   149ec:	mov	r0, #1
   149f0:	movt	r2, #1
   149f4:	movt	r3, #1
   149f8:	bl	112ec <__printf_chk@plt>
   149fc:	movw	r1, #26757	; 0x6885
   14a00:	mov	r0, #0
   14a04:	mov	r2, #5
   14a08:	movt	r1, #1
   14a0c:	bl	11190 <dcgettext@plt>
   14a10:	movw	r2, #26796	; 0x68ac
   14a14:	mov	r1, r0
   14a18:	mov	r0, #1
   14a1c:	movt	r2, #1
   14a20:	pop	{fp, lr}
   14a24:	b	112ec <__printf_chk@plt>
   14a28:	b	14a2c <__assert_fail@plt+0x3674>
   14a2c:	push	{r4, r5, r6, sl, fp, lr}
   14a30:	add	fp, sp, #16
   14a34:	mov	r4, r2
   14a38:	mov	r5, r1
   14a3c:	mov	r6, r0
   14a40:	bl	15930 <__assert_fail@plt+0x4578>
   14a44:	cmp	r0, #0
   14a48:	popne	{r4, r5, r6, sl, fp, pc}
   14a4c:	cmp	r6, #0
   14a50:	beq	14a64 <__assert_fail@plt+0x36ac>
   14a54:	cmp	r5, #0
   14a58:	cmpne	r4, #0
   14a5c:	bne	14a64 <__assert_fail@plt+0x36ac>
   14a60:	pop	{r4, r5, r6, sl, fp, pc}
   14a64:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14a68:	push	{fp, lr}
   14a6c:	mov	fp, sp
   14a70:	bl	153ec <__assert_fail@plt+0x4034>
   14a74:	cmp	r0, #0
   14a78:	popne	{fp, pc}
   14a7c:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14a80:	push	{fp, lr}
   14a84:	mov	fp, sp
   14a88:	bl	153ec <__assert_fail@plt+0x4034>
   14a8c:	cmp	r0, #0
   14a90:	popne	{fp, pc}
   14a94:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14a98:	push	{fp, lr}
   14a9c:	mov	fp, sp
   14aa0:	bl	153ec <__assert_fail@plt+0x4034>
   14aa4:	cmp	r0, #0
   14aa8:	popne	{fp, pc}
   14aac:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14ab0:	push	{r4, r5, fp, lr}
   14ab4:	add	fp, sp, #8
   14ab8:	mov	r4, r1
   14abc:	mov	r5, r0
   14ac0:	bl	1541c <__assert_fail@plt+0x4064>
   14ac4:	cmp	r0, #0
   14ac8:	popne	{r4, r5, fp, pc}
   14acc:	cmp	r5, #0
   14ad0:	beq	14ae0 <__assert_fail@plt+0x3728>
   14ad4:	cmp	r4, #0
   14ad8:	bne	14ae0 <__assert_fail@plt+0x3728>
   14adc:	pop	{r4, r5, fp, pc}
   14ae0:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14ae4:	push	{fp, lr}
   14ae8:	mov	fp, sp
   14aec:	cmp	r1, #0
   14af0:	orreq	r1, r1, #1
   14af4:	bl	1541c <__assert_fail@plt+0x4064>
   14af8:	cmp	r0, #0
   14afc:	popne	{fp, pc}
   14b00:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14b04:	push	{fp, lr}
   14b08:	mov	fp, sp
   14b0c:	clz	r3, r2
   14b10:	lsr	ip, r3, #5
   14b14:	clz	r3, r1
   14b18:	lsr	r3, r3, #5
   14b1c:	orrs	r3, r3, ip
   14b20:	movwne	r1, #1
   14b24:	movwne	r2, #1
   14b28:	bl	15930 <__assert_fail@plt+0x4578>
   14b2c:	cmp	r0, #0
   14b30:	popne	{fp, pc}
   14b34:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14b38:	push	{fp, lr}
   14b3c:	mov	fp, sp
   14b40:	mov	r2, r1
   14b44:	mov	r1, r0
   14b48:	mov	r0, #0
   14b4c:	bl	15930 <__assert_fail@plt+0x4578>
   14b50:	cmp	r0, #0
   14b54:	popne	{fp, pc}
   14b58:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14b5c:	mov	r2, r1
   14b60:	mov	r1, r0
   14b64:	mov	r0, #0
   14b68:	b	14b04 <__assert_fail@plt+0x374c>
   14b6c:	mov	r2, #1
   14b70:	b	14b74 <__assert_fail@plt+0x37bc>
   14b74:	push	{r4, r5, fp, lr}
   14b78:	add	fp, sp, #8
   14b7c:	ldr	r5, [r1]
   14b80:	mov	r4, r1
   14b84:	cmp	r0, #0
   14b88:	beq	14ba0 <__assert_fail@plt+0x37e8>
   14b8c:	mov	r1, #1
   14b90:	add	r1, r1, r5, lsr #1
   14b94:	adds	r5, r5, r1
   14b98:	bcc	14bb8 <__assert_fail@plt+0x3800>
   14b9c:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14ba0:	cmp	r5, #0
   14ba4:	bne	14bb8 <__assert_fail@plt+0x3800>
   14ba8:	mov	r1, #64	; 0x40
   14bac:	cmp	r2, #64	; 0x40
   14bb0:	udiv	r5, r1, r2
   14bb4:	addhi	r5, r5, #1
   14bb8:	mov	r1, r5
   14bbc:	bl	14a2c <__assert_fail@plt+0x3674>
   14bc0:	str	r5, [r4]
   14bc4:	pop	{r4, r5, fp, pc}
   14bc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14bcc:	add	fp, sp, #24
   14bd0:	ldr	r6, [r1]
   14bd4:	mov	r8, r1
   14bd8:	ldr	r4, [fp, #8]
   14bdc:	add	r1, r6, r6, asr #1
   14be0:	cmp	r1, r6
   14be4:	mvnvs	r1, #-2147483648	; 0x80000000
   14be8:	cmp	r1, r3
   14bec:	mov	r5, r1
   14bf0:	movgt	r5, r3
   14bf4:	cmn	r3, #1
   14bf8:	movle	r5, r1
   14bfc:	cmn	r4, #1
   14c00:	ble	14c20 <__assert_fail@plt+0x3868>
   14c04:	cmp	r4, #0
   14c08:	beq	14c74 <__assert_fail@plt+0x38bc>
   14c0c:	cmn	r5, #1
   14c10:	ble	14c48 <__assert_fail@plt+0x3890>
   14c14:	mvn	r7, #-2147483648	; 0x80000000
   14c18:	udiv	r1, r7, r4
   14c1c:	b	14c3c <__assert_fail@plt+0x3884>
   14c20:	cmn	r5, #1
   14c24:	ble	14c64 <__assert_fail@plt+0x38ac>
   14c28:	cmn	r4, #1
   14c2c:	beq	14c74 <__assert_fail@plt+0x38bc>
   14c30:	mov	r1, #-2147483648	; 0x80000000
   14c34:	mvn	r7, #-2147483648	; 0x80000000
   14c38:	sdiv	r1, r1, r4
   14c3c:	cmp	r1, r5
   14c40:	bge	14c74 <__assert_fail@plt+0x38bc>
   14c44:	b	14c84 <__assert_fail@plt+0x38cc>
   14c48:	beq	14c74 <__assert_fail@plt+0x38bc>
   14c4c:	mov	r1, #-2147483648	; 0x80000000
   14c50:	mvn	r7, #-2147483648	; 0x80000000
   14c54:	sdiv	r1, r1, r5
   14c58:	cmp	r1, r4
   14c5c:	bge	14c74 <__assert_fail@plt+0x38bc>
   14c60:	b	14c84 <__assert_fail@plt+0x38cc>
   14c64:	mvn	r7, #-2147483648	; 0x80000000
   14c68:	sdiv	r1, r7, r4
   14c6c:	cmp	r5, r1
   14c70:	blt	14c84 <__assert_fail@plt+0x38cc>
   14c74:	mul	r1, r5, r4
   14c78:	mov	r7, #64	; 0x40
   14c7c:	cmp	r1, #63	; 0x3f
   14c80:	bgt	14c8c <__assert_fail@plt+0x38d4>
   14c84:	sdiv	r5, r7, r4
   14c88:	mul	r1, r5, r4
   14c8c:	cmp	r0, #0
   14c90:	moveq	r7, #0
   14c94:	streq	r7, [r8]
   14c98:	sub	r7, r5, r6
   14c9c:	cmp	r7, r2
   14ca0:	bge	14d44 <__assert_fail@plt+0x398c>
   14ca4:	add	r5, r6, r2
   14ca8:	mov	r2, #0
   14cac:	mov	r1, #0
   14cb0:	cmp	r5, r3
   14cb4:	movwgt	r2, #1
   14cb8:	cmn	r3, #1
   14cbc:	movwgt	r1, #1
   14cc0:	cmp	r5, r6
   14cc4:	bvs	14d2c <__assert_fail@plt+0x3974>
   14cc8:	ands	r1, r1, r2
   14ccc:	bne	14d2c <__assert_fail@plt+0x3974>
   14cd0:	cmn	r4, #1
   14cd4:	ble	14cf4 <__assert_fail@plt+0x393c>
   14cd8:	cmp	r4, #0
   14cdc:	beq	14d40 <__assert_fail@plt+0x3988>
   14ce0:	cmn	r5, #1
   14ce4:	ble	14d18 <__assert_fail@plt+0x3960>
   14ce8:	mvn	r1, #-2147483648	; 0x80000000
   14cec:	udiv	r1, r1, r4
   14cf0:	b	14d0c <__assert_fail@plt+0x3954>
   14cf4:	cmn	r5, #1
   14cf8:	ble	14d30 <__assert_fail@plt+0x3978>
   14cfc:	cmn	r4, #1
   14d00:	beq	14d40 <__assert_fail@plt+0x3988>
   14d04:	mov	r1, #-2147483648	; 0x80000000
   14d08:	sdiv	r1, r1, r4
   14d0c:	cmp	r1, r5
   14d10:	bge	14d40 <__assert_fail@plt+0x3988>
   14d14:	b	14d2c <__assert_fail@plt+0x3974>
   14d18:	beq	14d40 <__assert_fail@plt+0x3988>
   14d1c:	mov	r1, #-2147483648	; 0x80000000
   14d20:	sdiv	r1, r1, r5
   14d24:	cmp	r1, r4
   14d28:	bge	14d40 <__assert_fail@plt+0x3988>
   14d2c:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14d30:	mvn	r1, #-2147483648	; 0x80000000
   14d34:	sdiv	r1, r1, r4
   14d38:	cmp	r5, r1
   14d3c:	blt	14d2c <__assert_fail@plt+0x3974>
   14d40:	mul	r1, r5, r4
   14d44:	bl	14ab0 <__assert_fail@plt+0x36f8>
   14d48:	str	r5, [r8]
   14d4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d50:	push	{fp, lr}
   14d54:	mov	fp, sp
   14d58:	mov	r1, #1
   14d5c:	bl	15398 <__assert_fail@plt+0x3fe0>
   14d60:	cmp	r0, #0
   14d64:	popne	{fp, pc}
   14d68:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14d6c:	push	{fp, lr}
   14d70:	mov	fp, sp
   14d74:	bl	15398 <__assert_fail@plt+0x3fe0>
   14d78:	cmp	r0, #0
   14d7c:	popne	{fp, pc}
   14d80:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14d84:	push	{fp, lr}
   14d88:	mov	fp, sp
   14d8c:	mov	r1, #1
   14d90:	bl	15398 <__assert_fail@plt+0x3fe0>
   14d94:	cmp	r0, #0
   14d98:	popne	{fp, pc}
   14d9c:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14da0:	push	{fp, lr}
   14da4:	mov	fp, sp
   14da8:	bl	15398 <__assert_fail@plt+0x3fe0>
   14dac:	cmp	r0, #0
   14db0:	popne	{fp, pc}
   14db4:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14db8:	push	{r4, r5, r6, sl, fp, lr}
   14dbc:	add	fp, sp, #16
   14dc0:	mov	r5, r0
   14dc4:	mov	r0, r1
   14dc8:	mov	r4, r1
   14dcc:	bl	153ec <__assert_fail@plt+0x4034>
   14dd0:	cmp	r0, #0
   14dd4:	beq	14df0 <__assert_fail@plt+0x3a38>
   14dd8:	mov	r1, r5
   14ddc:	mov	r2, r4
   14de0:	mov	r6, r0
   14de4:	bl	1116c <memcpy@plt>
   14de8:	mov	r0, r6
   14dec:	pop	{r4, r5, r6, sl, fp, pc}
   14df0:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14df4:	push	{r4, r5, r6, sl, fp, lr}
   14df8:	add	fp, sp, #16
   14dfc:	mov	r5, r0
   14e00:	mov	r0, r1
   14e04:	mov	r4, r1
   14e08:	bl	153ec <__assert_fail@plt+0x4034>
   14e0c:	cmp	r0, #0
   14e10:	beq	14e2c <__assert_fail@plt+0x3a74>
   14e14:	mov	r1, r5
   14e18:	mov	r2, r4
   14e1c:	mov	r6, r0
   14e20:	bl	1116c <memcpy@plt>
   14e24:	mov	r0, r6
   14e28:	pop	{r4, r5, r6, sl, fp, pc}
   14e2c:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14e30:	push	{r4, r5, r6, sl, fp, lr}
   14e34:	add	fp, sp, #16
   14e38:	mov	r5, r0
   14e3c:	add	r0, r1, #1
   14e40:	mov	r4, r1
   14e44:	bl	153ec <__assert_fail@plt+0x4034>
   14e48:	cmp	r0, #0
   14e4c:	beq	14e74 <__assert_fail@plt+0x3abc>
   14e50:	mov	r6, r0
   14e54:	mov	r0, #0
   14e58:	mov	r1, r5
   14e5c:	mov	r2, r4
   14e60:	strb	r0, [r6, r4]
   14e64:	mov	r0, r6
   14e68:	bl	1116c <memcpy@plt>
   14e6c:	mov	r0, r6
   14e70:	pop	{r4, r5, r6, sl, fp, pc}
   14e74:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14e78:	push	{r4, r5, r6, sl, fp, lr}
   14e7c:	add	fp, sp, #16
   14e80:	mov	r4, r0
   14e84:	bl	11298 <strlen@plt>
   14e88:	add	r5, r0, #1
   14e8c:	mov	r0, r5
   14e90:	bl	153ec <__assert_fail@plt+0x4034>
   14e94:	cmp	r0, #0
   14e98:	beq	14eb4 <__assert_fail@plt+0x3afc>
   14e9c:	mov	r1, r4
   14ea0:	mov	r2, r5
   14ea4:	mov	r6, r0
   14ea8:	bl	1116c <memcpy@plt>
   14eac:	mov	r0, r6
   14eb0:	pop	{r4, r5, r6, sl, fp, pc}
   14eb4:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14eb8:	push	{fp, lr}
   14ebc:	mov	fp, sp
   14ec0:	movw	r0, #28952	; 0x7118
   14ec4:	movw	r1, #26872	; 0x68f8
   14ec8:	mov	r2, #5
   14ecc:	movt	r0, #2
   14ed0:	movt	r1, #1
   14ed4:	ldr	r4, [r0]
   14ed8:	mov	r0, #0
   14edc:	bl	11190 <dcgettext@plt>
   14ee0:	movw	r2, #25793	; 0x64c1
   14ee4:	mov	r3, r0
   14ee8:	mov	r0, r4
   14eec:	mov	r1, #0
   14ef0:	movt	r2, #1
   14ef4:	bl	11220 <error@plt>
   14ef8:	bl	11388 <abort@plt>
   14efc:	push	{r4, sl, fp, lr}
   14f00:	add	fp, sp, #8
   14f04:	bl	15720 <__assert_fail@plt+0x4368>
   14f08:	mov	r4, r0
   14f0c:	cmn	r0, #1
   14f10:	bne	14f24 <__assert_fail@plt+0x3b6c>
   14f14:	bl	112b0 <__errno_location@plt>
   14f18:	ldr	r0, [r0]
   14f1c:	cmp	r0, #12
   14f20:	beq	14f2c <__assert_fail@plt+0x3b74>
   14f24:	mov	r0, r4
   14f28:	pop	{r4, sl, fp, pc}
   14f2c:	bl	14eb8 <__assert_fail@plt+0x3b00>
   14f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f34:	add	fp, sp, #28
   14f38:	sub	sp, sp, #12
   14f3c:	cmp	r2, #37	; 0x25
   14f40:	bcs	15378 <__assert_fail@plt+0x3fc0>
   14f44:	ldr	r9, [fp, #8]
   14f48:	mov	r7, r2
   14f4c:	mov	r6, r1
   14f50:	mov	r4, r0
   14f54:	str	r3, [sp, #4]
   14f58:	bl	112b0 <__errno_location@plt>
   14f5c:	mov	r5, r0
   14f60:	mov	r0, #0
   14f64:	str	r0, [r5]
   14f68:	bl	11274 <__ctype_b_loc@plt>
   14f6c:	ldr	r1, [r0]
   14f70:	mov	r2, r4
   14f74:	ldrb	r0, [r2], #1
   14f78:	add	r3, r1, r0, lsl #1
   14f7c:	ldrb	r3, [r3, #1]
   14f80:	tst	r3, #32
   14f84:	bne	14f74 <__assert_fail@plt+0x3bbc>
   14f88:	add	r8, sp, #8
   14f8c:	cmp	r6, #0
   14f90:	mov	sl, #4
   14f94:	movne	r8, r6
   14f98:	cmp	r0, #45	; 0x2d
   14f9c:	beq	1536c <__assert_fail@plt+0x3fb4>
   14fa0:	mov	r0, r4
   14fa4:	mov	r1, r8
   14fa8:	mov	r2, r7
   14fac:	bl	1128c <strtoul@plt>
   14fb0:	ldr	r6, [r8]
   14fb4:	cmp	r6, r4
   14fb8:	beq	14fdc <__assert_fail@plt+0x3c24>
   14fbc:	mov	r7, r0
   14fc0:	ldr	r0, [r5]
   14fc4:	cmp	r0, #0
   14fc8:	beq	15008 <__assert_fail@plt+0x3c50>
   14fcc:	cmp	r0, #34	; 0x22
   14fd0:	bne	1536c <__assert_fail@plt+0x3fb4>
   14fd4:	mov	sl, #1
   14fd8:	b	1500c <__assert_fail@plt+0x3c54>
   14fdc:	cmp	r9, #0
   14fe0:	ldrbne	r1, [r4]
   14fe4:	cmpne	r1, #0
   14fe8:	beq	1536c <__assert_fail@plt+0x3fb4>
   14fec:	mov	r0, r9
   14ff0:	bl	112a4 <strchr@plt>
   14ff4:	cmp	r0, #0
   14ff8:	beq	1536c <__assert_fail@plt+0x3fb4>
   14ffc:	mov	r7, #1
   15000:	mov	sl, #0
   15004:	b	15014 <__assert_fail@plt+0x3c5c>
   15008:	mov	sl, r0
   1500c:	cmp	r9, #0
   15010:	beq	15364 <__assert_fail@plt+0x3fac>
   15014:	ldrb	r4, [r6]
   15018:	cmp	r4, #0
   1501c:	beq	15364 <__assert_fail@plt+0x3fac>
   15020:	mov	r0, r9
   15024:	mov	r1, r4
   15028:	bl	112a4 <strchr@plt>
   1502c:	cmp	r0, #0
   15030:	beq	152ec <__assert_fail@plt+0x3f34>
   15034:	sub	r0, r4, #69	; 0x45
   15038:	mov	r3, #1
   1503c:	mov	r5, #1024	; 0x400
   15040:	cmp	r0, #21
   15044:	bhi	1505c <__assert_fail@plt+0x3ca4>
   15048:	movw	r2, #35141	; 0x8945
   1504c:	mov	r1, #1
   15050:	movt	r2, #48	; 0x30
   15054:	tst	r2, r1, lsl r0
   15058:	bne	15078 <__assert_fail@plt+0x3cc0>
   1505c:	sub	r0, r4, #103	; 0x67
   15060:	cmp	r0, #13
   15064:	bhi	150c8 <__assert_fail@plt+0x3d10>
   15068:	mov	r1, #1
   1506c:	movw	r2, #8273	; 0x2051
   15070:	tst	r2, r1, lsl r0
   15074:	beq	150c8 <__assert_fail@plt+0x3d10>
   15078:	mov	r0, r9
   1507c:	mov	r1, #48	; 0x30
   15080:	bl	112a4 <strchr@plt>
   15084:	cmp	r0, #0
   15088:	beq	150c4 <__assert_fail@plt+0x3d0c>
   1508c:	ldrb	r0, [r6, #1]
   15090:	cmp	r0, #66	; 0x42
   15094:	cmpne	r0, #68	; 0x44
   15098:	bne	150a8 <__assert_fail@plt+0x3cf0>
   1509c:	mov	r3, #2
   150a0:	mov	r5, #1000	; 0x3e8
   150a4:	b	150c8 <__assert_fail@plt+0x3d10>
   150a8:	cmp	r0, #105	; 0x69
   150ac:	bne	150c4 <__assert_fail@plt+0x3d0c>
   150b0:	ldrb	r0, [r6, #2]
   150b4:	mov	r3, #1
   150b8:	cmp	r0, #66	; 0x42
   150bc:	movweq	r3, #3
   150c0:	b	150c8 <__assert_fail@plt+0x3d10>
   150c4:	mov	r3, #1
   150c8:	cmp	r4, #89	; 0x59
   150cc:	bgt	1513c <__assert_fail@plt+0x3d84>
   150d0:	sub	r0, r4, #66	; 0x42
   150d4:	cmp	r0, #14
   150d8:	bhi	151b0 <__assert_fail@plt+0x3df8>
   150dc:	add	r1, pc, #0
   150e0:	ldr	pc, [r1, r0, lsl #2]
   150e4:	andeq	r5, r1, r0, lsr #2
   150e8:	andeq	r5, r1, ip, ror #5
   150ec:	andeq	r5, r1, ip, ror #5
   150f0:	strdeq	r5, [r1], -r8
   150f4:	andeq	r5, r1, ip, ror #5
   150f8:	andeq	r5, r1, r0, lsl r2
   150fc:	andeq	r5, r1, ip, ror #5
   15100:	andeq	r5, r1, ip, ror #5
   15104:	andeq	r5, r1, ip, ror #5
   15108:	andeq	r5, r1, ip, lsr r2
   1510c:	andeq	r5, r1, ip, ror #5
   15110:	andeq	r5, r1, r0, ror #4
   15114:	andeq	r5, r1, ip, ror #5
   15118:	andeq	r5, r1, ip, ror #5
   1511c:	andeq	r5, r1, r4, lsr #6
   15120:	mov	r1, #0
   15124:	lsr	r0, r7, #22
   15128:	cmp	r1, r7, lsr #22
   1512c:	lsl	r7, r7, #10
   15130:	movwne	r0, #1
   15134:	mvnne	r7, #0
   15138:	b	1534c <__assert_fail@plt+0x3f94>
   1513c:	cmp	r4, #115	; 0x73
   15140:	bgt	151ec <__assert_fail@plt+0x3e34>
   15144:	sub	r1, r4, #98	; 0x62
   15148:	cmp	r1, #11
   1514c:	bhi	152b8 <__assert_fail@plt+0x3f00>
   15150:	add	r2, pc, #4
   15154:	mov	r0, #0
   15158:	ldr	pc, [r2, r1, lsl #2]
   1515c:	andeq	r5, r1, ip, lsl #3
   15160:	andeq	r5, r1, ip, asr #6
   15164:	andeq	r5, r1, ip, ror #5
   15168:	andeq	r5, r1, ip, ror #5
   1516c:	andeq	r5, r1, ip, ror #5
   15170:	andeq	r5, r1, r0, lsl r2
   15174:	andeq	r5, r1, ip, ror #5
   15178:	andeq	r5, r1, ip, ror #5
   1517c:	andeq	r5, r1, ip, ror #5
   15180:	andeq	r5, r1, ip, lsr r2
   15184:	andeq	r5, r1, ip, ror #5
   15188:	andeq	r5, r1, r0, ror #4
   1518c:	movw	r0, #65535	; 0xffff
   15190:	movt	r0, #63	; 0x3f
   15194:	add	r1, r0, #4194304	; 0x400000
   15198:	mov	r0, #0
   1519c:	cmp	r7, r1
   151a0:	lsl	r7, r7, #9
   151a4:	movwhi	r0, #1
   151a8:	mvnhi	r7, #0
   151ac:	b	1534c <__assert_fail@plt+0x3f94>
   151b0:	cmp	r4, #84	; 0x54
   151b4:	beq	1528c <__assert_fail@plt+0x3ed4>
   151b8:	cmp	r4, #89	; 0x59
   151bc:	bne	152ec <__assert_fail@plt+0x3f34>
   151c0:	mvn	r0, #0
   151c4:	mvn	r2, #7
   151c8:	udiv	r1, r0, r5
   151cc:	mov	r0, #0
   151d0:	cmp	r1, r7
   151d4:	mul	r7, r7, r5
   151d8:	orrcc	r0, r0, #1
   151dc:	mvncc	r7, #0
   151e0:	adds	r2, r2, #1
   151e4:	bne	151d0 <__assert_fail@plt+0x3e18>
   151e8:	b	1534c <__assert_fail@plt+0x3f94>
   151ec:	cmp	r4, #116	; 0x74
   151f0:	beq	1528c <__assert_fail@plt+0x3ed4>
   151f4:	cmp	r4, #119	; 0x77
   151f8:	bne	152ec <__assert_fail@plt+0x3f34>
   151fc:	lsl	r1, r7, #1
   15200:	cmp	r7, #0
   15204:	lsr	r0, r7, #31
   15208:	mvnlt	r1, #0
   1520c:	b	15258 <__assert_fail@plt+0x3ea0>
   15210:	mvn	r0, #0
   15214:	mvn	r2, #2
   15218:	udiv	r1, r0, r5
   1521c:	mov	r0, #0
   15220:	cmp	r1, r7
   15224:	mul	r7, r7, r5
   15228:	orrcc	r0, r0, #1
   1522c:	mvncc	r7, #0
   15230:	adds	r2, r2, #1
   15234:	bne	15220 <__assert_fail@plt+0x3e68>
   15238:	b	1534c <__assert_fail@plt+0x3f94>
   1523c:	mvn	r0, #0
   15240:	mul	r1, r7, r5
   15244:	udiv	r0, r0, r5
   15248:	cmp	r0, r7
   1524c:	mov	r0, #0
   15250:	mvncc	r1, #0
   15254:	movwcc	r0, #1
   15258:	mov	r7, r1
   1525c:	b	1534c <__assert_fail@plt+0x3f94>
   15260:	mvn	r0, #0
   15264:	mvn	r2, #1
   15268:	udiv	r1, r0, r5
   1526c:	mov	r0, #0
   15270:	cmp	r1, r7
   15274:	mul	r7, r7, r5
   15278:	orrcc	r0, r0, #1
   1527c:	mvncc	r7, #0
   15280:	adds	r2, r2, #1
   15284:	bne	15270 <__assert_fail@plt+0x3eb8>
   15288:	b	1534c <__assert_fail@plt+0x3f94>
   1528c:	mvn	r0, #0
   15290:	mvn	r2, #3
   15294:	udiv	r1, r0, r5
   15298:	mov	r0, #0
   1529c:	cmp	r1, r7
   152a0:	mul	r7, r7, r5
   152a4:	orrcc	r0, r0, #1
   152a8:	mvncc	r7, #0
   152ac:	adds	r2, r2, #1
   152b0:	bne	1529c <__assert_fail@plt+0x3ee4>
   152b4:	b	1534c <__assert_fail@plt+0x3f94>
   152b8:	cmp	r4, #90	; 0x5a
   152bc:	bne	152ec <__assert_fail@plt+0x3f34>
   152c0:	mvn	r0, #0
   152c4:	mvn	r2, #6
   152c8:	udiv	r1, r0, r5
   152cc:	mov	r0, #0
   152d0:	cmp	r1, r7
   152d4:	mul	r7, r7, r5
   152d8:	orrcc	r0, r0, #1
   152dc:	mvncc	r7, #0
   152e0:	adds	r2, r2, #1
   152e4:	bne	152d0 <__assert_fail@plt+0x3f18>
   152e8:	b	1534c <__assert_fail@plt+0x3f94>
   152ec:	ldr	r0, [sp, #4]
   152f0:	orr	sl, sl, #2
   152f4:	b	15368 <__assert_fail@plt+0x3fb0>
   152f8:	mvn	r0, #0
   152fc:	mvn	r2, #5
   15300:	udiv	r1, r0, r5
   15304:	mov	r0, #0
   15308:	cmp	r1, r7
   1530c:	mul	r7, r7, r5
   15310:	orrcc	r0, r0, #1
   15314:	mvncc	r7, #0
   15318:	adds	r2, r2, #1
   1531c:	bne	15308 <__assert_fail@plt+0x3f50>
   15320:	b	1534c <__assert_fail@plt+0x3f94>
   15324:	mvn	r0, #0
   15328:	mvn	r2, #4
   1532c:	udiv	r1, r0, r5
   15330:	mov	r0, #0
   15334:	cmp	r1, r7
   15338:	mul	r7, r7, r5
   1533c:	orrcc	r0, r0, #1
   15340:	mvncc	r7, #0
   15344:	adds	r2, r2, #1
   15348:	bne	15334 <__assert_fail@plt+0x3f7c>
   1534c:	add	r1, r6, r3
   15350:	orr	sl, r0, sl
   15354:	str	r1, [r8]
   15358:	ldrb	r1, [r6, r3]
   1535c:	cmp	r1, #0
   15360:	orrne	sl, sl, #2
   15364:	ldr	r0, [sp, #4]
   15368:	str	r7, [r0]
   1536c:	mov	r0, sl
   15370:	sub	sp, fp, #28
   15374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15378:	movw	r0, #26889	; 0x6909
   1537c:	movw	r1, #26927	; 0x692f
   15380:	movw	r3, #26943	; 0x693f
   15384:	mov	r2, #85	; 0x55
   15388:	movt	r0, #1
   1538c:	movt	r1, #1
   15390:	movt	r3, #1
   15394:	bl	113b8 <__assert_fail@plt>
   15398:	clz	r2, r1
   1539c:	clz	r3, r0
   153a0:	lsr	r2, r2, #5
   153a4:	lsr	r3, r3, #5
   153a8:	orrs	r2, r3, r2
   153ac:	movwne	r1, #1
   153b0:	movwne	r0, #1
   153b4:	cmp	r1, #0
   153b8:	beq	153e8 <__assert_fail@plt+0x4030>
   153bc:	mvn	r2, #-2147483648	; 0x80000000
   153c0:	udiv	r2, r2, r1
   153c4:	cmp	r2, r0
   153c8:	bcs	153e8 <__assert_fail@plt+0x4030>
   153cc:	push	{fp, lr}
   153d0:	mov	fp, sp
   153d4:	bl	112b0 <__errno_location@plt>
   153d8:	mov	r1, #12
   153dc:	str	r1, [r0]
   153e0:	mov	r0, #0
   153e4:	pop	{fp, pc}
   153e8:	b	110dc <calloc@plt>
   153ec:	cmp	r0, #0
   153f0:	movweq	r0, #1
   153f4:	cmn	r0, #1
   153f8:	ble	15400 <__assert_fail@plt+0x4048>
   153fc:	b	11238 <malloc@plt>
   15400:	push	{fp, lr}
   15404:	mov	fp, sp
   15408:	bl	112b0 <__errno_location@plt>
   1540c:	mov	r1, #12
   15410:	str	r1, [r0]
   15414:	mov	r0, #0
   15418:	pop	{fp, pc}
   1541c:	push	{fp, lr}
   15420:	mov	fp, sp
   15424:	cmp	r0, #0
   15428:	beq	15444 <__assert_fail@plt+0x408c>
   1542c:	cmp	r1, #0
   15430:	beq	15450 <__assert_fail@plt+0x4098>
   15434:	cmn	r1, #1
   15438:	ble	15458 <__assert_fail@plt+0x40a0>
   1543c:	pop	{fp, lr}
   15440:	b	1119c <realloc@plt>
   15444:	mov	r0, r1
   15448:	pop	{fp, lr}
   1544c:	b	153ec <__assert_fail@plt+0x4034>
   15450:	bl	12650 <__assert_fail@plt+0x1298>
   15454:	b	15464 <__assert_fail@plt+0x40ac>
   15458:	bl	112b0 <__errno_location@plt>
   1545c:	mov	r1, #12
   15460:	str	r1, [r0]
   15464:	mov	r0, #0
   15468:	pop	{fp, pc}
   1546c:	push	{r4, r5, r6, sl, fp, lr}
   15470:	add	fp, sp, #16
   15474:	mov	r4, r0
   15478:	bl	111fc <__fpending@plt>
   1547c:	mov	r5, r0
   15480:	mov	r0, r4
   15484:	bl	11208 <ferror_unlocked@plt>
   15488:	mov	r6, r0
   1548c:	mov	r0, r4
   15490:	bl	154ec <__assert_fail@plt+0x4134>
   15494:	cmp	r6, #0
   15498:	beq	154b8 <__assert_fail@plt+0x4100>
   1549c:	mvn	r4, #0
   154a0:	cmp	r0, #0
   154a4:	bne	154e4 <__assert_fail@plt+0x412c>
   154a8:	bl	112b0 <__errno_location@plt>
   154ac:	mov	r1, #0
   154b0:	str	r1, [r0]
   154b4:	b	154e4 <__assert_fail@plt+0x412c>
   154b8:	cmp	r0, #0
   154bc:	mov	r4, r0
   154c0:	mvnne	r4, #0
   154c4:	cmp	r5, #0
   154c8:	bne	154e4 <__assert_fail@plt+0x412c>
   154cc:	cmp	r0, #0
   154d0:	beq	154e4 <__assert_fail@plt+0x412c>
   154d4:	bl	112b0 <__errno_location@plt>
   154d8:	ldr	r0, [r0]
   154dc:	subs	r4, r0, #9
   154e0:	mvnne	r4, #0
   154e4:	mov	r0, r4
   154e8:	pop	{r4, r5, r6, sl, fp, pc}
   154ec:	push	{r4, r5, r6, sl, fp, lr}
   154f0:	add	fp, sp, #16
   154f4:	sub	sp, sp, #8
   154f8:	mov	r4, r0
   154fc:	bl	112f8 <fileno@plt>
   15500:	cmn	r0, #1
   15504:	ble	15578 <__assert_fail@plt+0x41c0>
   15508:	mov	r0, r4
   1550c:	bl	11250 <__freading@plt>
   15510:	cmp	r0, #0
   15514:	beq	15540 <__assert_fail@plt+0x4188>
   15518:	mov	r0, r4
   1551c:	bl	112f8 <fileno@plt>
   15520:	mov	r1, #1
   15524:	mov	r2, #0
   15528:	mov	r3, #0
   1552c:	str	r1, [sp]
   15530:	bl	111d8 <lseek64@plt>
   15534:	and	r0, r0, r1
   15538:	cmn	r0, #1
   1553c:	beq	15578 <__assert_fail@plt+0x41c0>
   15540:	mov	r0, r4
   15544:	bl	15588 <__assert_fail@plt+0x41d0>
   15548:	cmp	r0, #0
   1554c:	beq	15578 <__assert_fail@plt+0x41c0>
   15550:	bl	112b0 <__errno_location@plt>
   15554:	ldr	r6, [r0]
   15558:	mov	r5, r0
   1555c:	mov	r0, r4
   15560:	bl	11310 <fclose@plt>
   15564:	cmp	r6, #0
   15568:	strne	r6, [r5]
   1556c:	mvnne	r0, #0
   15570:	sub	sp, fp, #16
   15574:	pop	{r4, r5, r6, sl, fp, pc}
   15578:	mov	r0, r4
   1557c:	sub	sp, fp, #16
   15580:	pop	{r4, r5, r6, sl, fp, lr}
   15584:	b	11310 <fclose@plt>
   15588:	push	{r4, sl, fp, lr}
   1558c:	add	fp, sp, #8
   15590:	sub	sp, sp, #8
   15594:	mov	r4, r0
   15598:	cmp	r0, #0
   1559c:	beq	155b8 <__assert_fail@plt+0x4200>
   155a0:	mov	r0, r4
   155a4:	bl	11250 <__freading@plt>
   155a8:	cmp	r0, #0
   155ac:	ldrbne	r0, [r4, #1]
   155b0:	tstne	r0, #1
   155b4:	bne	155c8 <__assert_fail@plt+0x4210>
   155b8:	mov	r0, r4
   155bc:	sub	sp, fp, #8
   155c0:	pop	{r4, sl, fp, lr}
   155c4:	b	1113c <fflush@plt>
   155c8:	mov	r0, #1
   155cc:	mov	r2, #0
   155d0:	mov	r3, #0
   155d4:	str	r0, [sp]
   155d8:	mov	r0, r4
   155dc:	bl	155e4 <__assert_fail@plt+0x422c>
   155e0:	b	155b8 <__assert_fail@plt+0x4200>
   155e4:	push	{r4, r5, r6, r7, fp, lr}
   155e8:	add	fp, sp, #16
   155ec:	sub	sp, sp, #8
   155f0:	mov	r4, r0
   155f4:	ldr	r0, [r0, #4]
   155f8:	mov	r5, r3
   155fc:	mov	r6, r2
   15600:	ldr	r1, [r4, #8]
   15604:	cmp	r1, r0
   15608:	bne	15624 <__assert_fail@plt+0x426c>
   1560c:	ldrd	r0, [r4, #16]
   15610:	cmp	r1, r0
   15614:	bne	15624 <__assert_fail@plt+0x426c>
   15618:	ldr	r0, [r4, #36]	; 0x24
   1561c:	cmp	r0, #0
   15620:	beq	1563c <__assert_fail@plt+0x4284>
   15624:	mov	r0, r4
   15628:	mov	r2, r6
   1562c:	mov	r3, r5
   15630:	sub	sp, fp, #16
   15634:	pop	{r4, r5, r6, r7, fp, lr}
   15638:	b	1131c <fseeko64@plt>
   1563c:	ldr	r7, [fp, #8]
   15640:	mov	r0, r4
   15644:	bl	112f8 <fileno@plt>
   15648:	mov	r2, r6
   1564c:	mov	r3, r5
   15650:	str	r7, [sp]
   15654:	bl	111d8 <lseek64@plt>
   15658:	and	r2, r0, r1
   1565c:	cmn	r2, #1
   15660:	beq	1567c <__assert_fail@plt+0x42c4>
   15664:	strd	r0, [r4, #80]	; 0x50
   15668:	ldr	r0, [r4]
   1566c:	bic	r0, r0, #16
   15670:	str	r0, [r4]
   15674:	mov	r0, #0
   15678:	b	15680 <__assert_fail@plt+0x42c8>
   1567c:	mvn	r0, #0
   15680:	sub	sp, fp, #16
   15684:	pop	{r4, r5, r6, r7, fp, pc}
   15688:	push	{fp, lr}
   1568c:	mov	fp, sp
   15690:	mov	r0, #14
   15694:	bl	1134c <nl_langinfo@plt>
   15698:	movw	r1, #23831	; 0x5d17
   1569c:	cmp	r0, #0
   156a0:	movt	r1, #1
   156a4:	movne	r1, r0
   156a8:	movw	r0, #27024	; 0x6990
   156ac:	ldrb	r2, [r1]
   156b0:	movt	r0, #1
   156b4:	cmp	r2, #0
   156b8:	movne	r0, r1
   156bc:	pop	{fp, pc}
   156c0:	push	{r4, r5, r6, r7, fp, lr}
   156c4:	add	fp, sp, #16
   156c8:	sub	sp, sp, #8
   156cc:	add	r5, sp, #4
   156d0:	cmp	r0, #0
   156d4:	mov	r7, r2
   156d8:	mov	r4, r1
   156dc:	movne	r5, r0
   156e0:	mov	r0, r5
   156e4:	bl	11214 <mbrtowc@plt>
   156e8:	mov	r6, r0
   156ec:	cmp	r7, #0
   156f0:	beq	15714 <__assert_fail@plt+0x435c>
   156f4:	cmn	r6, #2
   156f8:	bcc	15714 <__assert_fail@plt+0x435c>
   156fc:	mov	r0, #0
   15700:	bl	1596c <__assert_fail@plt+0x45b4>
   15704:	cmp	r0, #0
   15708:	ldrbeq	r0, [r4]
   1570c:	moveq	r6, #1
   15710:	streq	r0, [r5]
   15714:	mov	r0, r6
   15718:	sub	sp, fp, #16
   1571c:	pop	{r4, r5, r6, r7, fp, pc}
   15720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15724:	add	fp, sp, #28
   15728:	sub	sp, sp, #12
   1572c:	mov	r6, r2
   15730:	mov	sl, r1
   15734:	cmp	r0, #0
   15738:	beq	157c8 <__assert_fail@plt+0x4410>
   1573c:	mov	r7, r0
   15740:	mov	r8, #10
   15744:	mov	r0, #0
   15748:	mov	r1, #40	; 0x28
   1574c:	str	r8, [sp, #8]
   15750:	bl	1541c <__assert_fail@plt+0x4064>
   15754:	mvn	r9, #0
   15758:	cmp	r0, #0
   1575c:	beq	158ec <__assert_fail@plt+0x4534>
   15760:	mov	r5, r0
   15764:	add	r4, sp, #8
   15768:	str	r6, [sp, #4]
   1576c:	b	15780 <__assert_fail@plt+0x43c8>
   15770:	cmn	r6, #1
   15774:	bgt	15894 <__assert_fail@plt+0x44dc>
   15778:	ldr	r8, [sp, #8]
   1577c:	mov	r5, r0
   15780:	mov	r0, r7
   15784:	mov	r1, sl
   15788:	mov	r2, r5
   1578c:	mov	r3, r4
   15790:	bl	112d4 <getgrouplist@plt>
   15794:	ldr	r1, [sp, #8]
   15798:	mov	r6, r0
   1579c:	cmn	r0, #1
   157a0:	bgt	157b0 <__assert_fail@plt+0x43f8>
   157a4:	cmp	r8, r1
   157a8:	lsleq	r1, r8, #1
   157ac:	streq	r1, [sp, #8]
   157b0:	mov	r0, r5
   157b4:	bl	15900 <__assert_fail@plt+0x4548>
   157b8:	cmp	r0, #0
   157bc:	bne	15770 <__assert_fail@plt+0x43b8>
   157c0:	mov	r0, r5
   157c4:	b	158e8 <__assert_fail@plt+0x4530>
   157c8:	mov	r0, #0
   157cc:	mov	r1, #0
   157d0:	bl	11358 <getgroups@plt>
   157d4:	cmn	r0, #1
   157d8:	str	r0, [sp, #8]
   157dc:	ble	158a4 <__assert_fail@plt+0x44ec>
   157e0:	mov	r4, r0
   157e4:	cmn	sl, #1
   157e8:	bne	157f4 <__assert_fail@plt+0x443c>
   157ec:	cmp	r4, #0
   157f0:	bne	157fc <__assert_fail@plt+0x4444>
   157f4:	add	r4, r4, #1
   157f8:	str	r4, [sp, #8]
   157fc:	mov	r0, #0
   15800:	mov	r1, r4
   15804:	bl	15900 <__assert_fail@plt+0x4548>
   15808:	mvn	r9, #0
   1580c:	cmp	r0, #0
   15810:	beq	158ec <__assert_fail@plt+0x4534>
   15814:	add	r1, sl, #1
   15818:	cmn	sl, #1
   1581c:	mov	r7, r0
   15820:	movwne	r1, #1
   15824:	sub	r0, r4, r1
   15828:	add	r1, r7, r1, lsl #2
   1582c:	bl	11358 <getgroups@plt>
   15830:	cmn	r0, #1
   15834:	ble	158e4 <__assert_fail@plt+0x452c>
   15838:	cmn	sl, #1
   1583c:	addne	r0, r0, #1
   15840:	strne	sl, [r7]
   15844:	str	r7, [r6]
   15848:	cmp	r0, #2
   1584c:	blt	158f8 <__assert_fail@plt+0x4540>
   15850:	mov	r2, r7
   15854:	add	r1, r7, r0, lsl #2
   15858:	mov	r9, r0
   1585c:	ldr	r6, [r2], #4
   15860:	mov	r3, r6
   15864:	ldr	r0, [r2]
   15868:	cmp	r0, r6
   1586c:	cmpne	r0, r3
   15870:	bne	1587c <__assert_fail@plt+0x44c4>
   15874:	sub	r9, r9, #1
   15878:	b	15884 <__assert_fail@plt+0x44cc>
   1587c:	str	r0, [r7, #4]!
   15880:	mov	r3, r0
   15884:	add	r2, r2, #4
   15888:	cmp	r2, r1
   1588c:	bcc	15864 <__assert_fail@plt+0x44ac>
   15890:	b	158ec <__assert_fail@plt+0x4534>
   15894:	ldr	r1, [sp, #4]
   15898:	str	r0, [r1]
   1589c:	ldr	r9, [sp, #8]
   158a0:	b	158ec <__assert_fail@plt+0x4534>
   158a4:	bl	112b0 <__errno_location@plt>
   158a8:	ldr	r0, [r0]
   158ac:	mvn	r9, #0
   158b0:	cmp	r0, #38	; 0x26
   158b4:	bne	158ec <__assert_fail@plt+0x4534>
   158b8:	mov	r0, #0
   158bc:	mov	r1, #4
   158c0:	bl	1541c <__assert_fail@plt+0x4064>
   158c4:	cmp	r0, #0
   158c8:	beq	158ec <__assert_fail@plt+0x4534>
   158cc:	add	r9, sl, #1
   158d0:	cmn	sl, #1
   158d4:	str	r0, [r6]
   158d8:	str	sl, [r0]
   158dc:	movwne	r9, #1
   158e0:	b	158ec <__assert_fail@plt+0x4534>
   158e4:	mov	r0, r7
   158e8:	bl	12650 <__assert_fail@plt+0x1298>
   158ec:	mov	r0, r9
   158f0:	sub	sp, fp, #28
   158f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f8:	mov	r9, r0
   158fc:	b	158ec <__assert_fail@plt+0x4534>
   15900:	push	{fp, lr}
   15904:	mov	fp, sp
   15908:	cmp	r1, #536870912	; 0x20000000
   1590c:	bcc	15924 <__assert_fail@plt+0x456c>
   15910:	bl	112b0 <__errno_location@plt>
   15914:	mov	r1, #12
   15918:	str	r1, [r0]
   1591c:	mov	r0, #0
   15920:	pop	{fp, pc}
   15924:	lsl	r1, r1, #2
   15928:	bl	1541c <__assert_fail@plt+0x4064>
   1592c:	pop	{fp, pc}
   15930:	cmp	r2, #0
   15934:	beq	15964 <__assert_fail@plt+0x45ac>
   15938:	mvn	r3, #0
   1593c:	udiv	r3, r3, r2
   15940:	cmp	r3, r1
   15944:	bcs	15964 <__assert_fail@plt+0x45ac>
   15948:	push	{fp, lr}
   1594c:	mov	fp, sp
   15950:	bl	112b0 <__errno_location@plt>
   15954:	mov	r1, #12
   15958:	str	r1, [r0]
   1595c:	mov	r0, #0
   15960:	pop	{fp, pc}
   15964:	mul	r1, r2, r1
   15968:	b	1541c <__assert_fail@plt+0x4064>
   1596c:	push	{r4, sl, fp, lr}
   15970:	add	fp, sp, #8
   15974:	sub	sp, sp, #264	; 0x108
   15978:	add	r1, sp, #7
   1597c:	movw	r2, #257	; 0x101
   15980:	bl	159d0 <__assert_fail@plt+0x4618>
   15984:	mov	r4, #0
   15988:	cmp	r0, #0
   1598c:	bne	159c4 <__assert_fail@plt+0x460c>
   15990:	movw	r1, #27030	; 0x6996
   15994:	add	r0, sp, #7
   15998:	movt	r1, #1
   1599c:	bl	11124 <strcmp@plt>
   159a0:	cmp	r0, #0
   159a4:	beq	159c4 <__assert_fail@plt+0x460c>
   159a8:	movw	r1, #27032	; 0x6998
   159ac:	add	r0, sp, #7
   159b0:	movt	r1, #1
   159b4:	bl	11124 <strcmp@plt>
   159b8:	mov	r4, r0
   159bc:	cmp	r0, #0
   159c0:	movwne	r4, #1
   159c4:	mov	r0, r4
   159c8:	sub	sp, fp, #8
   159cc:	pop	{r4, sl, fp, pc}
   159d0:	push	{r4, r5, r6, r7, fp, lr}
   159d4:	add	fp, sp, #16
   159d8:	mov	r4, r1
   159dc:	mov	r1, #0
   159e0:	mov	r6, r2
   159e4:	bl	11328 <setlocale@plt>
   159e8:	cmp	r0, #0
   159ec:	beq	15a18 <__assert_fail@plt+0x4660>
   159f0:	mov	r7, r0
   159f4:	bl	11298 <strlen@plt>
   159f8:	cmp	r0, r6
   159fc:	bcs	15a2c <__assert_fail@plt+0x4674>
   15a00:	add	r2, r0, #1
   15a04:	mov	r0, r4
   15a08:	mov	r1, r7
   15a0c:	bl	1116c <memcpy@plt>
   15a10:	mov	r5, #0
   15a14:	b	15a54 <__assert_fail@plt+0x469c>
   15a18:	cmp	r6, #0
   15a1c:	mov	r5, #22
   15a20:	movne	r0, #0
   15a24:	strbne	r0, [r4]
   15a28:	b	15a54 <__assert_fail@plt+0x469c>
   15a2c:	mov	r5, #34	; 0x22
   15a30:	cmp	r6, #0
   15a34:	beq	15a54 <__assert_fail@plt+0x469c>
   15a38:	sub	r6, r6, #1
   15a3c:	mov	r0, r4
   15a40:	mov	r1, r7
   15a44:	mov	r2, r6
   15a48:	bl	1116c <memcpy@plt>
   15a4c:	mov	r0, #0
   15a50:	strb	r0, [r4, r6]
   15a54:	mov	r0, r5
   15a58:	pop	{r4, r5, r6, r7, fp, pc}
   15a5c:	mov	r1, #0
   15a60:	b	11328 <setlocale@plt>
   15a64:	cmp	r3, #0
   15a68:	cmpeq	r2, #0
   15a6c:	bne	15a84 <__assert_fail@plt+0x46cc>
   15a70:	cmp	r1, #0
   15a74:	cmpeq	r0, #0
   15a78:	mvnne	r1, #0
   15a7c:	mvnne	r0, #0
   15a80:	b	15aa0 <__assert_fail@plt+0x46e8>
   15a84:	sub	sp, sp, #8
   15a88:	push	{sp, lr}
   15a8c:	bl	15ab0 <__assert_fail@plt+0x46f8>
   15a90:	ldr	lr, [sp, #4]
   15a94:	add	sp, sp, #8
   15a98:	pop	{r2, r3}
   15a9c:	bx	lr
   15aa0:	push	{r1, lr}
   15aa4:	mov	r0, #8
   15aa8:	bl	11100 <raise@plt>
   15aac:	pop	{r1, pc}
   15ab0:	cmp	r1, r3
   15ab4:	cmpeq	r0, r2
   15ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15abc:	mov	r4, r0
   15ac0:	movcc	r0, #0
   15ac4:	mov	r5, r1
   15ac8:	ldr	lr, [sp, #36]	; 0x24
   15acc:	movcc	r1, r0
   15ad0:	bcc	15bcc <__assert_fail@plt+0x4814>
   15ad4:	cmp	r3, #0
   15ad8:	clzeq	ip, r2
   15adc:	clzne	ip, r3
   15ae0:	addeq	ip, ip, #32
   15ae4:	cmp	r5, #0
   15ae8:	clzeq	r1, r4
   15aec:	addeq	r1, r1, #32
   15af0:	clzne	r1, r5
   15af4:	sub	ip, ip, r1
   15af8:	sub	sl, ip, #32
   15afc:	lsl	r9, r3, ip
   15b00:	rsb	fp, ip, #32
   15b04:	orr	r9, r9, r2, lsl sl
   15b08:	orr	r9, r9, r2, lsr fp
   15b0c:	lsl	r8, r2, ip
   15b10:	cmp	r5, r9
   15b14:	cmpeq	r4, r8
   15b18:	movcc	r0, #0
   15b1c:	movcc	r1, r0
   15b20:	bcc	15b3c <__assert_fail@plt+0x4784>
   15b24:	mov	r0, #1
   15b28:	subs	r4, r4, r8
   15b2c:	lsl	r1, r0, sl
   15b30:	orr	r1, r1, r0, lsr fp
   15b34:	lsl	r0, r0, ip
   15b38:	sbc	r5, r5, r9
   15b3c:	cmp	ip, #0
   15b40:	beq	15bcc <__assert_fail@plt+0x4814>
   15b44:	lsr	r6, r8, #1
   15b48:	orr	r6, r6, r9, lsl #31
   15b4c:	lsr	r7, r9, #1
   15b50:	mov	r2, ip
   15b54:	b	15b78 <__assert_fail@plt+0x47c0>
   15b58:	subs	r3, r4, r6
   15b5c:	sbc	r8, r5, r7
   15b60:	adds	r3, r3, r3
   15b64:	adc	r8, r8, r8
   15b68:	adds	r4, r3, #1
   15b6c:	adc	r5, r8, #0
   15b70:	subs	r2, r2, #1
   15b74:	beq	15b94 <__assert_fail@plt+0x47dc>
   15b78:	cmp	r5, r7
   15b7c:	cmpeq	r4, r6
   15b80:	bcs	15b58 <__assert_fail@plt+0x47a0>
   15b84:	adds	r4, r4, r4
   15b88:	adc	r5, r5, r5
   15b8c:	subs	r2, r2, #1
   15b90:	bne	15b78 <__assert_fail@plt+0x47c0>
   15b94:	lsr	r3, r4, ip
   15b98:	orr	r3, r3, r5, lsl fp
   15b9c:	lsr	r2, r5, ip
   15ba0:	orr	r3, r3, r5, lsr sl
   15ba4:	adds	r0, r0, r4
   15ba8:	mov	r4, r3
   15bac:	lsl	r3, r2, ip
   15bb0:	orr	r3, r3, r4, lsl sl
   15bb4:	lsl	ip, r4, ip
   15bb8:	orr	r3, r3, r4, lsr fp
   15bbc:	adc	r1, r1, r5
   15bc0:	subs	r0, r0, ip
   15bc4:	mov	r5, r2
   15bc8:	sbc	r1, r1, r3
   15bcc:	cmp	lr, #0
   15bd0:	strdne	r4, [lr]
   15bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15bdc:	mov	r7, r0
   15be0:	ldr	r6, [pc, #72]	; 15c30 <__assert_fail@plt+0x4878>
   15be4:	ldr	r5, [pc, #72]	; 15c34 <__assert_fail@plt+0x487c>
   15be8:	add	r6, pc, r6
   15bec:	add	r5, pc, r5
   15bf0:	sub	r6, r6, r5
   15bf4:	mov	r8, r1
   15bf8:	mov	r9, r2
   15bfc:	bl	110bc <calloc@plt-0x20>
   15c00:	asrs	r6, r6, #2
   15c04:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c08:	mov	r4, #0
   15c0c:	add	r4, r4, #1
   15c10:	ldr	r3, [r5], #4
   15c14:	mov	r2, r9
   15c18:	mov	r1, r8
   15c1c:	mov	r0, r7
   15c20:	blx	r3
   15c24:	cmp	r6, r4
   15c28:	bne	15c0c <__assert_fail@plt+0x4854>
   15c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c30:	andeq	r1, r1, r4, lsl r3
   15c34:	andeq	r1, r1, ip, lsl #6
   15c38:	bx	lr
   15c3c:	ldr	r3, [pc, #12]	; 15c50 <__assert_fail@plt+0x4898>
   15c40:	mov	r1, #0
   15c44:	add	r3, pc, r3
   15c48:	ldr	r2, [r3]
   15c4c:	b	112bc <__cxa_atexit@plt>
   15c50:	andeq	r1, r1, r0, asr #9

Disassembly of section .fini:

00015c54 <.fini>:
   15c54:	push	{r3, lr}
   15c58:	pop	{r3, pc}
