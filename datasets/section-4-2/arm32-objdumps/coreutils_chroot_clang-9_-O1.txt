
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

000110c0 <.init>:
   110c0:	push	{r3, lr}
   110c4:	bl	1141c <__assert_fail@plt+0x48>
   110c8:	pop	{r3, pc}

Disassembly of section .plt:

000110cc <calloc@plt-0x14>:
   110cc:	push	{lr}		; (str lr, [sp, #-4]!)
   110d0:	ldr	lr, [pc, #4]	; 110dc <calloc@plt-0x4>
   110d4:	add	lr, pc, lr
   110d8:	ldr	pc, [lr, #8]!
   110dc:	andeq	r5, r1, r4, lsr #30

000110e0 <calloc@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #3876]!	; 0xf24

000110ec <endgrent@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #3868]!	; 0xf1c

000110f8 <fputs_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #3860]!	; 0xf14

00011104 <raise@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011110 <getpwnam@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #3844]!	; 0xf04

0001111c <strcmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #3836]!	; 0xefc

00011128 <getpwuid@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #86016	; 0x15000
   11130:	ldr	pc, [ip, #3828]!	; 0xef4

00011134 <fflush@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #86016	; 0x15000
   1113c:	ldr	pc, [ip, #3820]!	; 0xeec

00011140 <free@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #86016	; 0x15000
   11148:	ldr	pc, [ip, #3812]!	; 0xee4

0001114c <_exit@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #86016	; 0x15000
   11154:	ldr	pc, [ip, #3804]!	; 0xedc

00011158 <memcpy@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #86016	; 0x15000
   11160:	ldr	pc, [ip, #3796]!	; 0xed4

00011164 <execvp@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #86016	; 0x15000
   1116c:	ldr	pc, [ip, #3788]!	; 0xecc

00011170 <mbsinit@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #86016	; 0x15000
   11178:	ldr	pc, [ip, #3780]!	; 0xec4

0001117c <dcgettext@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #86016	; 0x15000
   11184:	ldr	pc, [ip, #3772]!	; 0xebc

00011188 <realloc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #86016	; 0x15000
   11190:	ldr	pc, [ip, #3764]!	; 0xeb4

00011194 <textdomain@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #86016	; 0x15000
   1119c:	ldr	pc, [ip, #3756]!	; 0xeac

000111a0 <chdir@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #86016	; 0x15000
   111a8:	ldr	pc, [ip, #3748]!	; 0xea4

000111ac <iswprint@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #86016	; 0x15000
   111b4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111b8 <setgroups@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #86016	; 0x15000
   111c0:	ldr	pc, [ip, #3732]!	; 0xe94

000111c4 <fwrite@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #86016	; 0x15000
   111cc:	ldr	pc, [ip, #3724]!	; 0xe8c

000111d0 <lseek64@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #86016	; 0x15000
   111d8:	ldr	pc, [ip, #3716]!	; 0xe84

000111dc <__ctype_get_mb_cur_max@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #86016	; 0x15000
   111e4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111e8 <chroot@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #86016	; 0x15000
   111f0:	ldr	pc, [ip, #3700]!	; 0xe74

000111f4 <__fpending@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #86016	; 0x15000
   111fc:	ldr	pc, [ip, #3692]!	; 0xe6c

00011200 <ferror_unlocked@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #86016	; 0x15000
   11208:	ldr	pc, [ip, #3684]!	; 0xe64

0001120c <mbrtowc@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #86016	; 0x15000
   11214:	ldr	pc, [ip, #3676]!	; 0xe5c

00011218 <error@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #86016	; 0x15000
   11220:	ldr	pc, [ip, #3668]!	; 0xe54

00011224 <getenv@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #86016	; 0x15000
   1122c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011230 <setgid@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #86016	; 0x15000
   11238:	ldr	pc, [ip, #3652]!	; 0xe44

0001123c <malloc@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #86016	; 0x15000
   11244:	ldr	pc, [ip, #3644]!	; 0xe3c

00011248 <__libc_start_main@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #86016	; 0x15000
   11250:	ldr	pc, [ip, #3636]!	; 0xe34

00011254 <__freading@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #86016	; 0x15000
   1125c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011260 <__gmon_start__@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #86016	; 0x15000
   11268:	ldr	pc, [ip, #3620]!	; 0xe24

0001126c <getopt_long@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #86016	; 0x15000
   11274:	ldr	pc, [ip, #3612]!	; 0xe1c

00011278 <__ctype_b_loc@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #86016	; 0x15000
   11280:	ldr	pc, [ip, #3604]!	; 0xe14

00011284 <exit@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #86016	; 0x15000
   1128c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011290 <bcmp@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #86016	; 0x15000
   11298:	ldr	pc, [ip, #3588]!	; 0xe04

0001129c <strtoul@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #86016	; 0x15000
   112a4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112a8 <strlen@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #86016	; 0x15000
   112b0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112b4 <strchr@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #86016	; 0x15000
   112bc:	ldr	pc, [ip, #3564]!	; 0xdec

000112c0 <__errno_location@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #86016	; 0x15000
   112c8:	ldr	pc, [ip, #3556]!	; 0xde4

000112cc <__cxa_atexit@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #86016	; 0x15000
   112d4:	ldr	pc, [ip, #3548]!	; 0xddc

000112d8 <getgrouplist@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #86016	; 0x15000
   112e0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112e4 <memset@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #86016	; 0x15000
   112ec:	ldr	pc, [ip, #3532]!	; 0xdcc

000112f0 <__printf_chk@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #86016	; 0x15000
   112f8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112fc <fileno@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #86016	; 0x15000
   11304:	ldr	pc, [ip, #3516]!	; 0xdbc

00011308 <strtoumax@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #86016	; 0x15000
   11310:	ldr	pc, [ip, #3508]!	; 0xdb4

00011314 <__fprintf_chk@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #86016	; 0x15000
   1131c:	ldr	pc, [ip, #3500]!	; 0xdac

00011320 <fclose@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #86016	; 0x15000
   11328:	ldr	pc, [ip, #3492]!	; 0xda4

0001132c <fseeko64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #86016	; 0x15000
   11334:	ldr	pc, [ip, #3484]!	; 0xd9c

00011338 <strtok@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #86016	; 0x15000
   11340:	ldr	pc, [ip, #3476]!	; 0xd94

00011344 <setlocale@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #86016	; 0x15000
   1134c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011350 <endpwent@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #86016	; 0x15000
   11358:	ldr	pc, [ip, #3460]!	; 0xd84

0001135c <strrchr@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #86016	; 0x15000
   11364:	ldr	pc, [ip, #3452]!	; 0xd7c

00011368 <nl_langinfo@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #86016	; 0x15000
   11370:	ldr	pc, [ip, #3444]!	; 0xd74

00011374 <setuid@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #86016	; 0x15000
   1137c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011380 <getgroups@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #86016	; 0x15000
   11388:	ldr	pc, [ip, #3428]!	; 0xd64

0001138c <canonicalize_file_name@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #86016	; 0x15000
   11394:	ldr	pc, [ip, #3420]!	; 0xd5c

00011398 <bindtextdomain@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #86016	; 0x15000
   113a0:	ldr	pc, [ip, #3412]!	; 0xd54

000113a4 <strncmp@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #86016	; 0x15000
   113ac:	ldr	pc, [ip, #3404]!	; 0xd4c

000113b0 <abort@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #86016	; 0x15000
   113b8:	ldr	pc, [ip, #3396]!	; 0xd44

000113bc <getgrgid@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #86016	; 0x15000
   113c4:	ldr	pc, [ip, #3388]!	; 0xd3c

000113c8 <getgrnam@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #86016	; 0x15000
   113d0:	ldr	pc, [ip, #3380]!	; 0xd34

000113d4 <__assert_fail@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #86016	; 0x15000
   113dc:	ldr	pc, [ip, #3372]!	; 0xd2c

Disassembly of section .text:

000113e0 <.text>:
   113e0:	mov	fp, #0
   113e4:	mov	lr, #0
   113e8:	pop	{r1}		; (ldr r1, [sp], #4)
   113ec:	mov	r2, sp
   113f0:	push	{r2}		; (str r2, [sp, #-4]!)
   113f4:	push	{r0}		; (str r0, [sp, #-4]!)
   113f8:	ldr	ip, [pc, #16]	; 11410 <__assert_fail@plt+0x3c>
   113fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11400:	ldr	r0, [pc, #12]	; 11414 <__assert_fail@plt+0x40>
   11404:	ldr	r3, [pc, #12]	; 11418 <__assert_fail@plt+0x44>
   11408:	bl	11248 <__libc_start_main@plt>
   1140c:	bl	113b0 <abort@plt>
   11410:	andeq	r6, r1, ip, asr #4
   11414:	ldrdeq	r1, [r1], -r4
   11418:	andeq	r6, r1, ip, ror #3
   1141c:	ldr	r3, [pc, #20]	; 11438 <__assert_fail@plt+0x64>
   11420:	ldr	r2, [pc, #20]	; 1143c <__assert_fail@plt+0x68>
   11424:	add	r3, pc, r3
   11428:	ldr	r2, [r3, r2]
   1142c:	cmp	r2, #0
   11430:	bxeq	lr
   11434:	b	11260 <__gmon_start__@plt>
   11438:	ldrdeq	r5, [r1], -r4
   1143c:	andeq	r0, r0, ip, lsl #2
   11440:	ldr	r0, [pc, #24]	; 11460 <__assert_fail@plt+0x8c>
   11444:	ldr	r3, [pc, #24]	; 11464 <__assert_fail@plt+0x90>
   11448:	cmp	r3, r0
   1144c:	bxeq	lr
   11450:	ldr	r3, [pc, #16]	; 11468 <__assert_fail@plt+0x94>
   11454:	cmp	r3, #0
   11458:	bxeq	lr
   1145c:	bx	r3
   11460:	andeq	r7, r2, r0, ror #2
   11464:	andeq	r7, r2, r0, ror #2
   11468:	andeq	r0, r0, r0
   1146c:	ldr	r0, [pc, #36]	; 11498 <__assert_fail@plt+0xc4>
   11470:	ldr	r1, [pc, #36]	; 1149c <__assert_fail@plt+0xc8>
   11474:	sub	r1, r1, r0
   11478:	asr	r1, r1, #2
   1147c:	add	r1, r1, r1, lsr #31
   11480:	asrs	r1, r1, #1
   11484:	bxeq	lr
   11488:	ldr	r3, [pc, #16]	; 114a0 <__assert_fail@plt+0xcc>
   1148c:	cmp	r3, #0
   11490:	bxeq	lr
   11494:	bx	r3
   11498:	andeq	r7, r2, r0, ror #2
   1149c:	andeq	r7, r2, r0, ror #2
   114a0:	andeq	r0, r0, r0
   114a4:	push	{r4, lr}
   114a8:	ldr	r4, [pc, #24]	; 114c8 <__assert_fail@plt+0xf4>
   114ac:	ldrb	r3, [r4]
   114b0:	cmp	r3, #0
   114b4:	popne	{r4, pc}
   114b8:	bl	11440 <__assert_fail@plt+0x6c>
   114bc:	mov	r3, #1
   114c0:	strb	r3, [r4]
   114c4:	pop	{r4, pc}
   114c8:	andeq	r7, r2, ip, ror r1
   114cc:	b	1146c <__assert_fail@plt+0x98>
   114d0:	push	{fp, lr}
   114d4:	mov	fp, sp
   114d8:	mov	r4, r0
   114dc:	cmp	r0, #0
   114e0:	bne	11608 <__assert_fail@plt+0x234>
   114e4:	movw	r1, #25243	; 0x629b
   114e8:	movt	r1, #1
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	bl	1117c <dcgettext@plt>
   114f8:	mov	r1, r0
   114fc:	movw	r0, #29064	; 0x7188
   11500:	movt	r0, #2
   11504:	ldr	r2, [r0]
   11508:	mov	r0, #1
   1150c:	mov	r3, r2
   11510:	bl	112f0 <__printf_chk@plt>
   11514:	movw	r1, #25307	; 0x62db
   11518:	movt	r1, #1
   1151c:	mov	r0, #0
   11520:	mov	r2, #5
   11524:	bl	1117c <dcgettext@plt>
   11528:	movw	r6, #29044	; 0x7174
   1152c:	movt	r6, #2
   11530:	ldr	r1, [r6]
   11534:	bl	110f8 <fputs_unlocked@plt>
   11538:	movw	r1, #25357	; 0x630d
   1153c:	movt	r1, #1
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	bl	1117c <dcgettext@plt>
   1154c:	ldr	r1, [r6]
   11550:	bl	110f8 <fputs_unlocked@plt>
   11554:	movw	r1, #25431	; 0x6357
   11558:	movt	r1, #1
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	bl	1117c <dcgettext@plt>
   11568:	ldr	r1, [r6]
   1156c:	bl	110f8 <fputs_unlocked@plt>
   11570:	movw	r1, #25504	; 0x63a0
   11574:	movt	r1, #1
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	bl	1117c <dcgettext@plt>
   11584:	mov	r5, r0
   11588:	movw	r1, #27731	; 0x6c53
   1158c:	movt	r1, #1
   11590:	mov	r0, #4
   11594:	bl	138dc <__assert_fail@plt+0x2508>
   11598:	mov	r2, r0
   1159c:	mov	r0, #1
   115a0:	mov	r1, r5
   115a4:	bl	112f0 <__printf_chk@plt>
   115a8:	movw	r1, #25572	; 0x63e4
   115ac:	movt	r1, #1
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	bl	1117c <dcgettext@plt>
   115bc:	ldr	r1, [r6]
   115c0:	bl	110f8 <fputs_unlocked@plt>
   115c4:	movw	r1, #25617	; 0x6411
   115c8:	movt	r1, #1
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	bl	1117c <dcgettext@plt>
   115d8:	ldr	r1, [r6]
   115dc:	bl	110f8 <fputs_unlocked@plt>
   115e0:	movw	r1, #25671	; 0x6447
   115e4:	movt	r1, #1
   115e8:	mov	r0, #0
   115ec:	mov	r2, #5
   115f0:	bl	1117c <dcgettext@plt>
   115f4:	ldr	r1, [r6]
   115f8:	bl	110f8 <fputs_unlocked@plt>
   115fc:	bl	1164c <__assert_fail@plt+0x278>
   11600:	mov	r0, r4
   11604:	bl	11284 <exit@plt>
   11608:	movw	r0, #29040	; 0x7170
   1160c:	movt	r0, #2
   11610:	ldr	r5, [r0]
   11614:	movw	r1, #25204	; 0x6274
   11618:	movt	r1, #1
   1161c:	mov	r0, #0
   11620:	mov	r2, #5
   11624:	bl	1117c <dcgettext@plt>
   11628:	mov	r2, r0
   1162c:	movw	r0, #29064	; 0x7188
   11630:	movt	r0, #2
   11634:	ldr	r3, [r0]
   11638:	mov	r0, r5
   1163c:	mov	r1, #1
   11640:	bl	11314 <__fprintf_chk@plt>
   11644:	mov	r0, r4
   11648:	bl	11284 <exit@plt>
   1164c:	push	{r4, r5, r6, sl, fp, lr}
   11650:	add	fp, sp, #16
   11654:	sub	sp, sp, #56	; 0x38
   11658:	movw	r0, #26616	; 0x67f8
   1165c:	movt	r0, #1
   11660:	add	r1, r0, #32
   11664:	mov	r2, #48	; 0x30
   11668:	vld1.64	{d16-d17}, [r1]
   1166c:	mov	r6, sp
   11670:	add	r1, r6, #32
   11674:	add	r3, r0, #16
   11678:	vld1.64	{d18-d19}, [r0], r2
   1167c:	vld1.64	{d20-d21}, [r3]
   11680:	vldr	d22, [r0]
   11684:	vst1.64	{d16-d17}, [r1]
   11688:	add	r0, r6, #16
   1168c:	vst1.64	{d20-d21}, [r0]
   11690:	mov	r0, r6
   11694:	vst1.64	{d18-d19}, [r0], r2
   11698:	vstr	d22, [r0]
   1169c:	ldr	r1, [sp]
   116a0:	cmp	r1, #0
   116a4:	movw	r4, #25740	; 0x648c
   116a8:	movt	r4, #1
   116ac:	beq	116d4 <__assert_fail@plt+0x300>
   116b0:	mov	r6, sp
   116b4:	movw	r5, #25740	; 0x648c
   116b8:	movt	r5, #1
   116bc:	mov	r0, r5
   116c0:	bl	1111c <strcmp@plt>
   116c4:	cmp	r0, #0
   116c8:	ldrne	r1, [r6, #8]!
   116cc:	cmpne	r1, #0
   116d0:	bne	116bc <__assert_fail@plt+0x2e8>
   116d4:	ldr	r5, [r6, #4]
   116d8:	movw	r1, #26229	; 0x6675
   116dc:	movt	r1, #1
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	bl	1117c <dcgettext@plt>
   116ec:	mov	r1, r0
   116f0:	movw	r2, #25773	; 0x64ad
   116f4:	movt	r2, #1
   116f8:	movw	r3, #26252	; 0x668c
   116fc:	movt	r3, #1
   11700:	mov	r0, #1
   11704:	bl	112f0 <__printf_chk@plt>
   11708:	cmp	r5, #0
   1170c:	moveq	r5, r4
   11710:	mov	r0, #5
   11714:	mov	r1, #0
   11718:	bl	11344 <setlocale@plt>
   1171c:	cmp	r0, #0
   11720:	beq	11760 <__assert_fail@plt+0x38c>
   11724:	movw	r1, #26292	; 0x66b4
   11728:	movt	r1, #1
   1172c:	mov	r2, #3
   11730:	bl	113a4 <strncmp@plt>
   11734:	cmp	r0, #0
   11738:	beq	11760 <__assert_fail@plt+0x38c>
   1173c:	movw	r1, #26296	; 0x66b8
   11740:	movt	r1, #1
   11744:	mov	r0, #0
   11748:	mov	r2, #5
   1174c:	bl	1117c <dcgettext@plt>
   11750:	movw	r1, #29044	; 0x7174
   11754:	movt	r1, #2
   11758:	ldr	r1, [r1]
   1175c:	bl	110f8 <fputs_unlocked@plt>
   11760:	movw	r1, #26367	; 0x66ff
   11764:	movt	r1, #1
   11768:	mov	r0, #0
   1176c:	mov	r2, #5
   11770:	bl	1117c <dcgettext@plt>
   11774:	mov	r1, r0
   11778:	movw	r2, #26252	; 0x668c
   1177c:	movt	r2, #1
   11780:	mov	r0, #1
   11784:	mov	r3, r4
   11788:	bl	112f0 <__printf_chk@plt>
   1178c:	movw	r0, #26162	; 0x6632
   11790:	movt	r0, #1
   11794:	movw	r6, #25356	; 0x630c
   11798:	movt	r6, #1
   1179c:	cmp	r5, r4
   117a0:	moveq	r6, r0
   117a4:	movw	r1, #26394	; 0x671a
   117a8:	movt	r1, #1
   117ac:	mov	r0, #0
   117b0:	mov	r2, #5
   117b4:	bl	1117c <dcgettext@plt>
   117b8:	mov	r1, r0
   117bc:	mov	r0, #1
   117c0:	mov	r2, r5
   117c4:	mov	r3, r6
   117c8:	sub	sp, fp, #16
   117cc:	pop	{r4, r5, r6, sl, fp, lr}
   117d0:	b	112f0 <__printf_chk@plt>
   117d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117d8:	add	fp, sp, #28
   117dc:	sub	sp, sp, #44	; 0x2c
   117e0:	mov	r9, r1
   117e4:	mov	sl, r0
   117e8:	mvn	r0, #0
   117ec:	str	r0, [fp, #-32]	; 0xffffffe0
   117f0:	str	r0, [sp, #36]	; 0x24
   117f4:	mov	r7, #0
   117f8:	str	r7, [sp, #32]
   117fc:	str	r7, [sp, #28]
   11800:	ldr	r0, [r1]
   11804:	bl	122dc <__assert_fail@plt+0xf08>
   11808:	movw	r1, #25356	; 0x630c
   1180c:	movt	r1, #1
   11810:	mov	r0, #6
   11814:	bl	11344 <setlocale@plt>
   11818:	movw	r5, #25777	; 0x64b1
   1181c:	movt	r5, #1
   11820:	movw	r1, #25747	; 0x6493
   11824:	movt	r1, #1
   11828:	mov	r0, r5
   1182c:	bl	11398 <bindtextdomain@plt>
   11830:	mov	r0, r5
   11834:	bl	11194 <textdomain@plt>
   11838:	bl	11f0c <__assert_fail@plt+0xb38>
   1183c:	movw	r0, #8652	; 0x21cc
   11840:	movt	r0, #1
   11844:	bl	16250 <__assert_fail@plt+0x4e7c>
   11848:	movw	r8, #25771	; 0x64ab
   1184c:	movt	r8, #1
   11850:	movw	r4, #26520	; 0x6798
   11854:	movt	r4, #1
   11858:	mov	r0, #0
   1185c:	str	r0, [sp, #20]
   11860:	mov	r6, #0
   11864:	mov	r5, #0
   11868:	str	r7, [sp]
   1186c:	mov	r0, sl
   11870:	mov	r1, r9
   11874:	mov	r2, r8
   11878:	mov	r3, r4
   1187c:	bl	1126c <getopt_long@plt>
   11880:	cmp	r0, #255	; 0xff
   11884:	ble	118f4 <__assert_fail@plt+0x520>
   11888:	cmp	r0, #256	; 0x100
   1188c:	beq	118a8 <__assert_fail@plt+0x4d4>
   11890:	movw	r1, #258	; 0x102
   11894:	cmp	r0, r1
   11898:	bne	118b8 <__assert_fail@plt+0x4e4>
   1189c:	mov	r0, #1
   118a0:	str	r0, [sp, #20]
   118a4:	b	11868 <__assert_fail@plt+0x494>
   118a8:	movw	r0, #29048	; 0x7178
   118ac:	movt	r0, #2
   118b0:	ldr	r6, [r0]
   118b4:	b	11868 <__assert_fail@plt+0x494>
   118b8:	movw	r1, #257	; 0x101
   118bc:	cmp	r0, r1
   118c0:	bne	11da0 <__assert_fail@plt+0x9cc>
   118c4:	movw	r0, #29048	; 0x7178
   118c8:	movt	r0, #2
   118cc:	ldr	r5, [r0]
   118d0:	mov	r0, r5
   118d4:	bl	112a8 <strlen@plt>
   118d8:	cmp	r0, #0
   118dc:	beq	11868 <__assert_fail@plt+0x494>
   118e0:	sub	r0, r0, #1
   118e4:	ldrb	r1, [r5, r0]
   118e8:	cmp	r1, #58	; 0x3a
   118ec:	strbeq	r7, [r5, r0]
   118f0:	b	11868 <__assert_fail@plt+0x494>
   118f4:	cmn	r0, #1
   118f8:	bne	11d40 <__assert_fail@plt+0x96c>
   118fc:	movw	r7, #29032	; 0x7168
   11900:	movt	r7, #2
   11904:	ldr	r0, [r7]
   11908:	cmp	r0, sl
   1190c:	bge	11da8 <__assert_fail@plt+0x9d4>
   11910:	ldr	r4, [r9, r0, lsl #2]
   11914:	mov	r0, r4
   11918:	bl	11f20 <__assert_fail@plt+0xb4c>
   1191c:	cmp	r0, #0
   11920:	bne	11934 <__assert_fail@plt+0x560>
   11924:	ldr	r1, [sp, #20]
   11928:	eor	r1, r1, #1
   1192c:	tst	r1, #1
   11930:	beq	11dd4 <__assert_fail@plt+0xa00>
   11934:	mov	r8, #0
   11938:	cmp	r0, #0
   1193c:	bne	11a58 <__assert_fail@plt+0x684>
   11940:	cmp	r5, #0
   11944:	beq	11964 <__assert_fail@plt+0x590>
   11948:	mov	r0, #0
   1194c:	str	r0, [sp]
   11950:	sub	r1, fp, #32
   11954:	add	r2, sp, #36	; 0x24
   11958:	mov	r0, r5
   1195c:	mov	r3, #0
   11960:	bl	13ee8 <__assert_fail@plt+0x2b14>
   11964:	str	r5, [sp, #12]
   11968:	ldr	r8, [fp, #-32]	; 0xffffffe0
   1196c:	mov	r0, r8
   11970:	bl	11f68 <__assert_fail@plt+0xb94>
   11974:	mov	r5, #0
   11978:	cmp	r0, #0
   1197c:	str	r4, [sp, #16]
   11980:	bne	119d8 <__assert_fail@plt+0x604>
   11984:	mov	r4, r7
   11988:	cmp	r6, #0
   1198c:	beq	119a4 <__assert_fail@plt+0x5d0>
   11990:	ldr	r0, [sp, #36]	; 0x24
   11994:	bl	11f78 <__assert_fail@plt+0xba4>
   11998:	mov	r7, #0
   1199c:	cmp	r0, #0
   119a0:	beq	119e8 <__assert_fail@plt+0x614>
   119a4:	mov	r0, r8
   119a8:	bl	11128 <getpwuid@plt>
   119ac:	cmp	r0, #0
   119b0:	mov	r7, r4
   119b4:	ldr	r4, [sp, #16]
   119b8:	beq	119d8 <__assert_fail@plt+0x604>
   119bc:	mov	r8, r0
   119c0:	ldr	r0, [sp, #36]	; 0x24
   119c4:	bl	11f78 <__assert_fail@plt+0xba4>
   119c8:	cmp	r0, #0
   119cc:	ldrne	r0, [r8, #12]
   119d0:	strne	r0, [sp, #36]	; 0x24
   119d4:	ldr	r5, [r8]
   119d8:	cmp	r6, #0
   119dc:	beq	11a1c <__assert_fail@plt+0x648>
   119e0:	mov	r4, r7
   119e4:	mov	r7, r5
   119e8:	ldrb	r0, [r6]
   119ec:	cmp	r0, #0
   119f0:	beq	11a08 <__assert_fail@plt+0x634>
   119f4:	add	r1, sp, #32
   119f8:	add	r2, sp, #28
   119fc:	mov	r0, r6
   11a00:	mov	r3, #0
   11a04:	bl	11f88 <__assert_fail@plt+0xbb4>
   11a08:	mov	r8, r7
   11a0c:	ldr	r5, [sp, #12]
   11a10:	mov	r7, r4
   11a14:	ldr	r4, [sp, #16]
   11a18:	b	11a58 <__assert_fail@plt+0x684>
   11a1c:	ldr	r8, [sp, #36]	; 0x24
   11a20:	mov	r0, r8
   11a24:	bl	11f78 <__assert_fail@plt+0xba4>
   11a28:	cmp	r5, #0
   11a2c:	beq	11a50 <__assert_fail@plt+0x67c>
   11a30:	cmp	r0, #0
   11a34:	bne	11a50 <__assert_fail@plt+0x67c>
   11a38:	add	r2, sp, #32
   11a3c:	mov	r0, r5
   11a40:	mov	r1, r8
   11a44:	bl	14b2c <__assert_fail@plt+0x3758>
   11a48:	cmp	r0, #1
   11a4c:	strge	r0, [sp, #28]
   11a50:	mov	r8, r5
   11a54:	ldr	r5, [sp, #12]
   11a58:	mov	r0, r4
   11a5c:	bl	111e8 <chroot@plt>
   11a60:	cmp	r0, #0
   11a64:	bne	11e18 <__assert_fail@plt+0xa44>
   11a68:	ldr	r0, [sp, #20]
   11a6c:	tst	r0, #1
   11a70:	bne	11a88 <__assert_fail@plt+0x6b4>
   11a74:	movw	r0, #27731	; 0x6c53
   11a78:	movt	r0, #1
   11a7c:	bl	111a0 <chdir@plt>
   11a80:	cmp	r0, #0
   11a84:	bne	11e58 <__assert_fail@plt+0xa84>
   11a88:	ldr	r0, [r7]
   11a8c:	add	r0, r0, #1
   11a90:	cmp	r0, sl
   11a94:	bne	11adc <__assert_fail@plt+0x708>
   11a98:	movw	r0, #25940	; 0x6554
   11a9c:	movt	r0, #1
   11aa0:	bl	11224 <getenv@plt>
   11aa4:	cmp	r0, #0
   11aa8:	bne	11ab8 <__assert_fail@plt+0x6e4>
   11aac:	movw	r0, #25946	; 0x655a
   11ab0:	movt	r0, #1
   11ab4:	bl	121a4 <__assert_fail@plt+0xdd0>
   11ab8:	str	r0, [r9]
   11abc:	movw	r0, #25954	; 0x6562
   11ac0:	movt	r0, #1
   11ac4:	bl	121a4 <__assert_fail@plt+0xdd0>
   11ac8:	mov	r1, #0
   11acc:	stmib	r9, {r0, r1}
   11ad0:	cmp	r5, #0
   11ad4:	bne	11ae8 <__assert_fail@plt+0x714>
   11ad8:	b	11b30 <__assert_fail@plt+0x75c>
   11adc:	add	r9, r9, r0, lsl #2
   11ae0:	cmp	r5, #0
   11ae4:	beq	11b30 <__assert_fail@plt+0x75c>
   11ae8:	mov	r0, #0
   11aec:	str	r0, [sp]
   11af0:	sub	r1, fp, #32
   11af4:	add	r2, sp, #36	; 0x24
   11af8:	mov	r0, r5
   11afc:	mov	r3, #0
   11b00:	bl	13ee8 <__assert_fail@plt+0x2b14>
   11b04:	cmp	r0, #0
   11b08:	beq	11b30 <__assert_fail@plt+0x75c>
   11b0c:	mov	r5, r0
   11b10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11b14:	bl	11f68 <__assert_fail@plt+0xb94>
   11b18:	cmp	r0, #0
   11b1c:	beq	11b30 <__assert_fail@plt+0x75c>
   11b20:	ldr	r0, [sp, #36]	; 0x24
   11b24:	bl	11f78 <__assert_fail@plt+0xba4>
   11b28:	cmp	r0, #0
   11b2c:	bne	11ec0 <__assert_fail@plt+0xaec>
   11b30:	ldr	r5, [fp, #-32]	; 0xffffffe0
   11b34:	mov	r0, r5
   11b38:	bl	11f68 <__assert_fail@plt+0xb94>
   11b3c:	cmp	r0, #0
   11b40:	bne	11ba4 <__assert_fail@plt+0x7d0>
   11b44:	cmp	r6, #0
   11b48:	beq	11b5c <__assert_fail@plt+0x788>
   11b4c:	ldr	r0, [sp, #36]	; 0x24
   11b50:	bl	11f78 <__assert_fail@plt+0xba4>
   11b54:	cmp	r0, #0
   11b58:	beq	11b8c <__assert_fail@plt+0x7b8>
   11b5c:	mov	r0, r5
   11b60:	bl	11128 <getpwuid@plt>
   11b64:	mov	r5, r0
   11b68:	ldr	r0, [sp, #36]	; 0x24
   11b6c:	bl	11f78 <__assert_fail@plt+0xba4>
   11b70:	cmp	r5, #0
   11b74:	beq	11b9c <__assert_fail@plt+0x7c8>
   11b78:	cmp	r0, #0
   11b7c:	ldrne	r0, [r5, #12]
   11b80:	strne	r0, [sp, #36]	; 0x24
   11b84:	ldr	r8, [r5]
   11b88:	b	11ba4 <__assert_fail@plt+0x7d0>
   11b8c:	ldr	r5, [sp, #32]
   11b90:	mov	r0, #0
   11b94:	str	r0, [sp, #24]
   11b98:	b	11bb8 <__assert_fail@plt+0x7e4>
   11b9c:	cmp	r0, #0
   11ba0:	bne	11edc <__assert_fail@plt+0xb08>
   11ba4:	ldr	r5, [sp, #32]
   11ba8:	mov	r7, #0
   11bac:	str	r7, [sp, #24]
   11bb0:	cmp	r6, #0
   11bb4:	beq	11c04 <__assert_fail@plt+0x830>
   11bb8:	ldrb	r0, [r6]
   11bbc:	mov	r7, #1
   11bc0:	cmp	r0, #0
   11bc4:	beq	11c40 <__assert_fail@plt+0x86c>
   11bc8:	ldr	r0, [sp, #28]
   11bcc:	clz	r0, r0
   11bd0:	lsr	r3, r0, #5
   11bd4:	add	r1, sp, #24
   11bd8:	add	r2, sp, #28
   11bdc:	mov	r0, r6
   11be0:	bl	11f88 <__assert_fail@plt+0xbb4>
   11be4:	cmp	r0, #0
   11be8:	beq	11c3c <__assert_fail@plt+0x868>
   11bec:	ldr	r0, [sp, #28]
   11bf0:	cmp	r0, #0
   11bf4:	bne	11c40 <__assert_fail@plt+0x86c>
   11bf8:	mov	r0, #125	; 0x7d
   11bfc:	sub	sp, fp, #28
   11c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c04:	ldr	r6, [sp, #36]	; 0x24
   11c08:	mov	r0, r6
   11c0c:	bl	11f78 <__assert_fail@plt+0xba4>
   11c10:	cmp	r8, #0
   11c14:	beq	11c40 <__assert_fail@plt+0x86c>
   11c18:	cmp	r0, #0
   11c1c:	bne	11c40 <__assert_fail@plt+0x86c>
   11c20:	add	r2, sp, #24
   11c24:	mov	r0, r8
   11c28:	mov	r1, r6
   11c2c:	bl	14b2c <__assert_fail@plt+0x3758>
   11c30:	cmp	r0, #0
   11c34:	ble	11d20 <__assert_fail@plt+0x94c>
   11c38:	str	r0, [sp, #28]
   11c3c:	ldr	r5, [sp, #24]
   11c40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11c44:	bl	11f68 <__assert_fail@plt+0xb94>
   11c48:	cmp	r7, #0
   11c4c:	bne	11c58 <__assert_fail@plt+0x884>
   11c50:	cmp	r0, #0
   11c54:	bne	11c6c <__assert_fail@plt+0x898>
   11c58:	ldr	r0, [sp, #28]
   11c5c:	mov	r1, r5
   11c60:	bl	111b8 <setgroups@plt>
   11c64:	cmp	r0, #0
   11c68:	bne	11e6c <__assert_fail@plt+0xa98>
   11c6c:	ldr	r0, [sp, #24]
   11c70:	bl	122b4 <__assert_fail@plt+0xee0>
   11c74:	ldr	r0, [sp, #32]
   11c78:	bl	122b4 <__assert_fail@plt+0xee0>
   11c7c:	ldr	r5, [sp, #36]	; 0x24
   11c80:	mov	r0, r5
   11c84:	bl	11f78 <__assert_fail@plt+0xba4>
   11c88:	cmp	r0, #0
   11c8c:	bne	11ca0 <__assert_fail@plt+0x8cc>
   11c90:	mov	r0, r5
   11c94:	bl	11230 <setgid@plt>
   11c98:	cmp	r0, #0
   11c9c:	bne	11e80 <__assert_fail@plt+0xaac>
   11ca0:	ldr	r5, [fp, #-32]	; 0xffffffe0
   11ca4:	mov	r0, r5
   11ca8:	bl	11f68 <__assert_fail@plt+0xb94>
   11cac:	cmp	r0, #0
   11cb0:	bne	11cc4 <__assert_fail@plt+0x8f0>
   11cb4:	mov	r0, r5
   11cb8:	bl	11374 <setuid@plt>
   11cbc:	cmp	r0, #0
   11cc0:	bne	11e94 <__assert_fail@plt+0xac0>
   11cc4:	ldr	r0, [r9]
   11cc8:	mov	r1, r9
   11ccc:	bl	11164 <execvp@plt>
   11cd0:	bl	112c0 <__errno_location@plt>
   11cd4:	ldr	r5, [r0]
   11cd8:	movw	r1, #26109	; 0x65fd
   11cdc:	movt	r1, #1
   11ce0:	mov	r0, #0
   11ce4:	mov	r2, #5
   11ce8:	bl	1117c <dcgettext@plt>
   11cec:	mov	r6, r0
   11cf0:	ldr	r0, [r9]
   11cf4:	bl	13ad0 <__assert_fail@plt+0x26fc>
   11cf8:	mov	r3, r0
   11cfc:	mov	r0, #0
   11d00:	mov	r1, r5
   11d04:	mov	r2, r6
   11d08:	bl	11218 <error@plt>
   11d0c:	mov	r0, #126	; 0x7e
   11d10:	cmp	r5, #2
   11d14:	movweq	r0, #127	; 0x7f
   11d18:	sub	sp, fp, #28
   11d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d20:	ldr	r0, [sp, #28]
   11d24:	cmp	r0, #0
   11d28:	bne	11c40 <__assert_fail@plt+0x86c>
   11d2c:	bl	112c0 <__errno_location@plt>
   11d30:	ldr	r4, [r0]
   11d34:	movw	r1, #25996	; 0x658c
   11d38:	movt	r1, #1
   11d3c:	b	11ea4 <__assert_fail@plt+0xad0>
   11d40:	cmn	r0, #3
   11d44:	bne	11d90 <__assert_fail@plt+0x9bc>
   11d48:	movw	r0, #28952	; 0x7118
   11d4c:	movt	r0, #2
   11d50:	ldr	r3, [r0]
   11d54:	movw	r0, #29044	; 0x7174
   11d58:	movt	r0, #2
   11d5c:	ldr	r0, [r0]
   11d60:	mov	r1, #0
   11d64:	movw	r2, #25787	; 0x64bb
   11d68:	movt	r2, #1
   11d6c:	str	r2, [sp]
   11d70:	str	r1, [sp, #4]
   11d74:	movw	r1, #25740	; 0x648c
   11d78:	movt	r1, #1
   11d7c:	movw	r2, #25773	; 0x64ad
   11d80:	movt	r2, #1
   11d84:	bl	14658 <__assert_fail@plt+0x3284>
   11d88:	mov	r0, #0
   11d8c:	bl	11284 <exit@plt>
   11d90:	cmn	r0, #2
   11d94:	bne	11da0 <__assert_fail@plt+0x9cc>
   11d98:	mov	r0, #0
   11d9c:	bl	114d0 <__assert_fail@plt+0xfc>
   11da0:	mov	r0, #125	; 0x7d
   11da4:	bl	114d0 <__assert_fail@plt+0xfc>
   11da8:	movw	r1, #25802	; 0x64ca
   11dac:	movt	r1, #1
   11db0:	mov	r0, #0
   11db4:	mov	r2, #5
   11db8:	bl	1117c <dcgettext@plt>
   11dbc:	mov	r2, r0
   11dc0:	mov	r0, #0
   11dc4:	mov	r1, #0
   11dc8:	bl	11218 <error@plt>
   11dcc:	mov	r0, #125	; 0x7d
   11dd0:	bl	114d0 <__assert_fail@plt+0xfc>
   11dd4:	movw	r1, #25818	; 0x64da
   11dd8:	movt	r1, #1
   11ddc:	mov	r0, #0
   11de0:	mov	r2, #5
   11de4:	bl	1117c <dcgettext@plt>
   11de8:	mov	r4, r0
   11dec:	movw	r1, #27731	; 0x6c53
   11df0:	movt	r1, #1
   11df4:	mov	r0, #4
   11df8:	bl	138dc <__assert_fail@plt+0x2508>
   11dfc:	mov	r3, r0
   11e00:	mov	r0, #0
   11e04:	mov	r1, #0
   11e08:	mov	r2, r4
   11e0c:	bl	11218 <error@plt>
   11e10:	mov	r0, #125	; 0x7d
   11e14:	bl	114d0 <__assert_fail@plt+0xfc>
   11e18:	bl	112c0 <__errno_location@plt>
   11e1c:	ldr	r5, [r0]
   11e20:	movw	r1, #25874	; 0x6512
   11e24:	movt	r1, #1
   11e28:	mov	r0, #0
   11e2c:	mov	r2, #5
   11e30:	bl	1117c <dcgettext@plt>
   11e34:	mov	r6, r0
   11e38:	mov	r0, #4
   11e3c:	mov	r1, r4
   11e40:	bl	138dc <__assert_fail@plt+0x2508>
   11e44:	mov	r3, r0
   11e48:	mov	r0, #125	; 0x7d
   11e4c:	mov	r1, r5
   11e50:	mov	r2, r6
   11e54:	bl	11218 <error@plt>
   11e58:	bl	112c0 <__errno_location@plt>
   11e5c:	ldr	r4, [r0]
   11e60:	movw	r1, #25909	; 0x6535
   11e64:	movt	r1, #1
   11e68:	b	11ea4 <__assert_fail@plt+0xad0>
   11e6c:	bl	112c0 <__errno_location@plt>
   11e70:	ldr	r4, [r0]
   11e74:	movw	r1, #26030	; 0x65ae
   11e78:	movt	r1, #1
   11e7c:	b	11ea4 <__assert_fail@plt+0xad0>
   11e80:	bl	112c0 <__errno_location@plt>
   11e84:	ldr	r4, [r0]
   11e88:	movw	r1, #26064	; 0x65d0
   11e8c:	movt	r1, #1
   11e90:	b	11ea4 <__assert_fail@plt+0xad0>
   11e94:	bl	112c0 <__errno_location@plt>
   11e98:	ldr	r4, [r0]
   11e9c:	movw	r1, #26087	; 0x65e7
   11ea0:	movt	r1, #1
   11ea4:	mov	r0, #0
   11ea8:	mov	r2, #5
   11eac:	bl	1117c <dcgettext@plt>
   11eb0:	mov	r2, r0
   11eb4:	mov	r0, #125	; 0x7d
   11eb8:	mov	r1, r4
   11ebc:	bl	11218 <error@plt>
   11ec0:	bl	112c0 <__errno_location@plt>
   11ec4:	ldr	r1, [r0]
   11ec8:	movw	r2, #26703	; 0x684f
   11ecc:	movt	r2, #1
   11ed0:	mov	r0, #125	; 0x7d
   11ed4:	mov	r3, r5
   11ed8:	bl	11218 <error@plt>
   11edc:	bl	112c0 <__errno_location@plt>
   11ee0:	ldr	r4, [r0]
   11ee4:	movw	r1, #25957	; 0x6565
   11ee8:	movt	r1, #1
   11eec:	mov	r0, #0
   11ef0:	mov	r2, #5
   11ef4:	bl	1117c <dcgettext@plt>
   11ef8:	mov	r2, r0
   11efc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f00:	mov	r0, #125	; 0x7d
   11f04:	mov	r1, r4
   11f08:	bl	11218 <error@plt>
   11f0c:	movw	r0, #28956	; 0x711c
   11f10:	movt	r0, #2
   11f14:	mov	r1, #125	; 0x7d
   11f18:	str	r1, [r0]
   11f1c:	bx	lr
   11f20:	push	{r4, r5, fp, lr}
   11f24:	add	fp, sp, #8
   11f28:	bl	1138c <canonicalize_file_name@plt>
   11f2c:	mov	r4, r0
   11f30:	cmp	r0, #0
   11f34:	beq	11f54 <__assert_fail@plt+0xb80>
   11f38:	movw	r0, #27731	; 0x6c53
   11f3c:	movt	r0, #1
   11f40:	mov	r1, r4
   11f44:	bl	1111c <strcmp@plt>
   11f48:	clz	r0, r0
   11f4c:	lsr	r5, r0, #5
   11f50:	b	11f58 <__assert_fail@plt+0xb84>
   11f54:	mov	r5, #0
   11f58:	mov	r0, r4
   11f5c:	bl	122b4 <__assert_fail@plt+0xee0>
   11f60:	mov	r0, r5
   11f64:	pop	{r4, r5, fp, pc}
   11f68:	add	r0, r0, #1
   11f6c:	clz	r0, r0
   11f70:	lsr	r0, r0, #5
   11f74:	bx	lr
   11f78:	add	r0, r0, #1
   11f7c:	clz	r0, r0
   11f80:	lsr	r0, r0, #5
   11f84:	bx	lr
   11f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f8c:	add	fp, sp, #28
   11f90:	sub	sp, sp, #36	; 0x24
   11f94:	str	r3, [sp, #20]
   11f98:	str	r2, [sp, #4]
   11f9c:	str	r1, [sp, #12]
   11fa0:	mov	r8, #0
   11fa4:	str	r8, [sp, #32]
   11fa8:	str	r0, [sp, #8]
   11fac:	bl	14ac8 <__assert_fail@plt+0x36f4>
   11fb0:	movw	r1, #26478	; 0x676e
   11fb4:	movt	r1, #1
   11fb8:	str	r0, [sp, #16]
   11fbc:	bl	11338 <strtok@plt>
   11fc0:	cmp	r0, #0
   11fc4:	beq	12110 <__assert_fail@plt+0xd3c>
   11fc8:	mov	r4, r0
   11fcc:	mov	r7, #0
   11fd0:	movw	r9, #26478	; 0x676e
   11fd4:	movt	r9, #1
   11fd8:	mov	sl, #0
   11fdc:	mov	r5, #0
   11fe0:	mov	r8, #0
   11fe4:	b	1200c <__assert_fail@plt+0xc38>
   11fe8:	ldr	r0, [sp, #24]
   11fec:	str	r0, [r5, r8, lsl #2]
   11ff0:	add	r8, r8, #1
   11ff4:	mov	r0, #0
   11ff8:	mov	r1, r9
   11ffc:	bl	11338 <strtok@plt>
   12000:	mov	r4, r0
   12004:	cmp	r0, #0
   12008:	beq	12118 <__assert_fail@plt+0xd44>
   1200c:	movw	r0, #25356	; 0x630c
   12010:	movt	r0, #1
   12014:	str	r0, [sp]
   12018:	mov	r0, r4
   1201c:	mov	r1, #0
   12020:	mov	r2, #10
   12024:	add	r3, sp, #24
   12028:	bl	15064 <__assert_fail@plt+0x3c90>
   1202c:	cmp	r0, #0
   12030:	ldreq	r0, [sp, #28]
   12034:	cmpeq	r0, #0
   12038:	beq	1205c <__assert_fail@plt+0xc88>
   1203c:	mov	r0, r4
   12040:	bl	113c8 <getgrnam@plt>
   12044:	cmp	r0, #0
   12048:	beq	120bc <__assert_fail@plt+0xce8>
   1204c:	ldr	r0, [r0, #8]
   12050:	str	r7, [sp, #28]
   12054:	str	r0, [sp, #24]
   12058:	b	12098 <__assert_fail@plt+0xcc4>
   1205c:	sub	r4, r4, #1
   12060:	bl	11278 <__ctype_b_loc@plt>
   12064:	ldr	r6, [r0]
   12068:	ldrb	r0, [r4, #1]!
   1206c:	bl	121a8 <__assert_fail@plt+0xdd4>
   12070:	add	r1, r6, r0, lsl #1
   12074:	ldrb	r1, [r1, #1]
   12078:	tst	r1, #32
   1207c:	bne	12068 <__assert_fail@plt+0xc94>
   12080:	cmp	r0, #43	; 0x2b
   12084:	beq	12098 <__assert_fail@plt+0xcc4>
   12088:	mov	r0, r4
   1208c:	bl	113c8 <getgrnam@plt>
   12090:	cmp	r0, #0
   12094:	bne	1204c <__assert_fail@plt+0xc78>
   12098:	ldr	r0, [sp, #32]
   1209c:	cmp	r8, r0
   120a0:	bne	11fe8 <__assert_fail@plt+0xc14>
   120a4:	mov	r0, r5
   120a8:	add	r1, sp, #32
   120ac:	mov	r2, #4
   120b0:	bl	14824 <__assert_fail@plt+0x3450>
   120b4:	mov	r5, r0
   120b8:	b	11fe8 <__assert_fail@plt+0xc14>
   120bc:	ldr	r0, [sp, #20]
   120c0:	cmp	r0, #0
   120c4:	beq	12164 <__assert_fail@plt+0xd90>
   120c8:	bl	112c0 <__errno_location@plt>
   120cc:	ldr	r7, [r0]
   120d0:	mov	r0, #0
   120d4:	movw	r1, #26480	; 0x6770
   120d8:	movt	r1, #1
   120dc:	mov	r2, #5
   120e0:	bl	1117c <dcgettext@plt>
   120e4:	mov	r6, r0
   120e8:	mov	r0, r4
   120ec:	bl	13ad0 <__assert_fail@plt+0x26fc>
   120f0:	mov	r3, r0
   120f4:	mov	r0, #0
   120f8:	mov	r1, r7
   120fc:	mov	r7, #0
   12100:	mov	r2, r6
   12104:	bl	11218 <error@plt>
   12108:	mvn	sl, #0
   1210c:	b	11ff4 <__assert_fail@plt+0xc20>
   12110:	mov	r5, #0
   12114:	mov	sl, #0
   12118:	orrs	r0, sl, r8
   1211c:	mvneq	sl, #0
   12120:	bne	12174 <__assert_fail@plt+0xda0>
   12124:	ldr	r0, [sp, #20]
   12128:	cmp	r0, #0
   1212c:	beq	12174 <__assert_fail@plt+0xda0>
   12130:	movw	r1, #26497	; 0x6781
   12134:	movt	r1, #1
   12138:	mov	r0, #0
   1213c:	mov	r2, #5
   12140:	bl	1117c <dcgettext@plt>
   12144:	mov	r4, r0
   12148:	ldr	r0, [sp, #8]
   1214c:	bl	13ad0 <__assert_fail@plt+0x26fc>
   12150:	mov	r3, r0
   12154:	mov	r0, #0
   12158:	mov	r1, #0
   1215c:	mov	r2, r4
   12160:	bl	11218 <error@plt>
   12164:	ldr	r0, [sp, #12]
   12168:	str	r5, [r0]
   1216c:	mvn	sl, #0
   12170:	b	12190 <__assert_fail@plt+0xdbc>
   12174:	ldr	r0, [sp, #12]
   12178:	str	r5, [r0]
   1217c:	cmp	sl, #0
   12180:	bne	12190 <__assert_fail@plt+0xdbc>
   12184:	ldr	r0, [sp, #4]
   12188:	str	r8, [r0]
   1218c:	mov	sl, #0
   12190:	ldr	r0, [sp, #16]
   12194:	bl	122b4 <__assert_fail@plt+0xee0>
   12198:	mov	r0, sl
   1219c:	sub	sp, fp, #28
   121a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121a4:	bx	lr
   121a8:	bx	lr
   121ac:	movw	r1, #29056	; 0x7180
   121b0:	movt	r1, #2
   121b4:	str	r0, [r1]
   121b8:	bx	lr
   121bc:	movw	r1, #29060	; 0x7184
   121c0:	movt	r1, #2
   121c4:	strb	r0, [r1]
   121c8:	bx	lr
   121cc:	push	{r4, r5, r6, sl, fp, lr}
   121d0:	add	fp, sp, #16
   121d4:	sub	sp, sp, #8
   121d8:	movw	r0, #29044	; 0x7174
   121dc:	movt	r0, #2
   121e0:	ldr	r0, [r0]
   121e4:	bl	1599c <__assert_fail@plt+0x45c8>
   121e8:	cmp	r0, #0
   121ec:	beq	12214 <__assert_fail@plt+0xe40>
   121f0:	movw	r0, #29060	; 0x7184
   121f4:	movt	r0, #2
   121f8:	ldrb	r0, [r0]
   121fc:	cmp	r0, #0
   12200:	beq	12234 <__assert_fail@plt+0xe60>
   12204:	bl	112c0 <__errno_location@plt>
   12208:	ldr	r0, [r0]
   1220c:	cmp	r0, #32
   12210:	bne	12234 <__assert_fail@plt+0xe60>
   12214:	movw	r0, #29040	; 0x7170
   12218:	movt	r0, #2
   1221c:	ldr	r0, [r0]
   12220:	bl	1599c <__assert_fail@plt+0x45c8>
   12224:	cmp	r0, #0
   12228:	subeq	sp, fp, #16
   1222c:	popeq	{r4, r5, r6, sl, fp, pc}
   12230:	b	122a4 <__assert_fail@plt+0xed0>
   12234:	movw	r1, #26687	; 0x683f
   12238:	movt	r1, #1
   1223c:	mov	r0, #0
   12240:	mov	r2, #5
   12244:	bl	1117c <dcgettext@plt>
   12248:	mov	r4, r0
   1224c:	movw	r0, #29056	; 0x7180
   12250:	movt	r0, #2
   12254:	ldr	r6, [r0]
   12258:	bl	112c0 <__errno_location@plt>
   1225c:	ldr	r5, [r0]
   12260:	cmp	r6, #0
   12264:	bne	12280 <__assert_fail@plt+0xeac>
   12268:	movw	r2, #26703	; 0x684f
   1226c:	movt	r2, #1
   12270:	mov	r0, #0
   12274:	mov	r1, r5
   12278:	mov	r3, r4
   1227c:	b	122a0 <__assert_fail@plt+0xecc>
   12280:	mov	r0, r6
   12284:	bl	13980 <__assert_fail@plt+0x25ac>
   12288:	mov	r3, r0
   1228c:	str	r4, [sp]
   12290:	movw	r2, #26699	; 0x684b
   12294:	movt	r2, #1
   12298:	mov	r0, #0
   1229c:	mov	r1, r5
   122a0:	bl	11218 <error@plt>
   122a4:	movw	r0, #28956	; 0x711c
   122a8:	movt	r0, #2
   122ac:	ldr	r0, [r0]
   122b0:	bl	1114c <_exit@plt>
   122b4:	push	{r4, r5, r6, sl, fp, lr}
   122b8:	add	fp, sp, #16
   122bc:	mov	r4, r0
   122c0:	bl	112c0 <__errno_location@plt>
   122c4:	mov	r5, r0
   122c8:	ldr	r6, [r0]
   122cc:	mov	r0, r4
   122d0:	bl	11140 <free@plt>
   122d4:	str	r6, [r5]
   122d8:	pop	{r4, r5, r6, sl, fp, pc}
   122dc:	push	{r4, r5, fp, lr}
   122e0:	add	fp, sp, #8
   122e4:	cmp	r0, #0
   122e8:	beq	1237c <__assert_fail@plt+0xfa8>
   122ec:	mov	r4, r0
   122f0:	mov	r1, #47	; 0x2f
   122f4:	bl	1135c <strrchr@plt>
   122f8:	cmp	r0, #0
   122fc:	mov	r5, r4
   12300:	addne	r5, r0, #1
   12304:	sub	r0, r5, r4
   12308:	cmp	r0, #7
   1230c:	blt	12360 <__assert_fail@plt+0xf8c>
   12310:	sub	r0, r5, #7
   12314:	movw	r1, #26762	; 0x688a
   12318:	movt	r1, #1
   1231c:	mov	r2, #7
   12320:	bl	113a4 <strncmp@plt>
   12324:	cmp	r0, #0
   12328:	bne	12360 <__assert_fail@plt+0xf8c>
   1232c:	movw	r1, #26770	; 0x6892
   12330:	movt	r1, #1
   12334:	mov	r0, r5
   12338:	mov	r2, #3
   1233c:	bl	113a4 <strncmp@plt>
   12340:	cmp	r0, #0
   12344:	beq	12350 <__assert_fail@plt+0xf7c>
   12348:	mov	r4, r5
   1234c:	b	12360 <__assert_fail@plt+0xf8c>
   12350:	add	r4, r5, #3
   12354:	movw	r0, #29024	; 0x7160
   12358:	movt	r0, #2
   1235c:	str	r4, [r0]
   12360:	movw	r0, #29028	; 0x7164
   12364:	movt	r0, #2
   12368:	str	r4, [r0]
   1236c:	movw	r0, #29064	; 0x7188
   12370:	movt	r0, #2
   12374:	str	r4, [r0]
   12378:	pop	{r4, r5, fp, pc}
   1237c:	movw	r0, #29040	; 0x7170
   12380:	movt	r0, #2
   12384:	ldr	r3, [r0]
   12388:	movw	r0, #26706	; 0x6852
   1238c:	movt	r0, #1
   12390:	mov	r1, #55	; 0x37
   12394:	mov	r2, #1
   12398:	bl	111c4 <fwrite@plt>
   1239c:	bl	113b0 <abort@plt>
   123a0:	push	{r4, r5, r6, sl, fp, lr}
   123a4:	add	fp, sp, #16
   123a8:	mov	r4, r0
   123ac:	movw	r0, #29072	; 0x7190
   123b0:	movt	r0, #2
   123b4:	cmp	r4, #0
   123b8:	moveq	r4, r0
   123bc:	bl	112c0 <__errno_location@plt>
   123c0:	mov	r5, r0
   123c4:	ldr	r6, [r0]
   123c8:	mov	r0, r4
   123cc:	mov	r1, #48	; 0x30
   123d0:	bl	14a48 <__assert_fail@plt+0x3674>
   123d4:	str	r6, [r5]
   123d8:	pop	{r4, r5, r6, sl, fp, pc}
   123dc:	movw	r1, #29072	; 0x7190
   123e0:	movt	r1, #2
   123e4:	cmp	r0, #0
   123e8:	movne	r1, r0
   123ec:	ldr	r0, [r1]
   123f0:	bx	lr
   123f4:	movw	r2, #29072	; 0x7190
   123f8:	movt	r2, #2
   123fc:	cmp	r0, #0
   12400:	movne	r2, r0
   12404:	str	r1, [r2]
   12408:	bx	lr
   1240c:	movw	r3, #29072	; 0x7190
   12410:	movt	r3, #2
   12414:	cmp	r0, #0
   12418:	movne	r3, r0
   1241c:	ubfx	r0, r1, #5, #3
   12420:	add	ip, r3, r0, lsl #2
   12424:	ldr	r3, [ip, #8]
   12428:	and	r1, r1, #31
   1242c:	mov	r0, #1
   12430:	and	r0, r0, r3, lsr r1
   12434:	and	r2, r2, #1
   12438:	eor	r2, r0, r2
   1243c:	eor	r1, r3, r2, lsl r1
   12440:	str	r1, [ip, #8]
   12444:	bx	lr
   12448:	movw	r2, #29072	; 0x7190
   1244c:	movt	r2, #2
   12450:	cmp	r0, #0
   12454:	movne	r2, r0
   12458:	ldr	r0, [r2, #4]
   1245c:	str	r1, [r2, #4]
   12460:	bx	lr
   12464:	push	{fp, lr}
   12468:	mov	fp, sp
   1246c:	movw	r3, #29072	; 0x7190
   12470:	movt	r3, #2
   12474:	cmp	r0, #0
   12478:	movne	r3, r0
   1247c:	mov	r0, #10
   12480:	str	r0, [r3]
   12484:	cmp	r1, #0
   12488:	cmpne	r2, #0
   1248c:	bne	12494 <__assert_fail@plt+0x10c0>
   12490:	bl	113b0 <abort@plt>
   12494:	str	r1, [r3, #40]	; 0x28
   12498:	str	r2, [r3, #44]	; 0x2c
   1249c:	pop	{fp, pc}
   124a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124a4:	add	fp, sp, #28
   124a8:	sub	sp, sp, #20
   124ac:	mov	r8, r3
   124b0:	mov	r9, r2
   124b4:	mov	sl, r1
   124b8:	mov	r7, r0
   124bc:	ldr	r0, [fp, #8]
   124c0:	movw	r5, #29072	; 0x7190
   124c4:	movt	r5, #2
   124c8:	cmp	r0, #0
   124cc:	movne	r5, r0
   124d0:	bl	112c0 <__errno_location@plt>
   124d4:	mov	r4, r0
   124d8:	ldm	r5, {r0, r1}
   124dc:	ldr	r2, [r5, #40]	; 0x28
   124e0:	ldr	r3, [r5, #44]	; 0x2c
   124e4:	ldr	r6, [r4]
   124e8:	add	r5, r5, #8
   124ec:	stm	sp, {r0, r1, r5}
   124f0:	str	r2, [sp, #12]
   124f4:	str	r3, [sp, #16]
   124f8:	mov	r0, r7
   124fc:	mov	r1, sl
   12500:	mov	r2, r9
   12504:	mov	r3, r8
   12508:	bl	12518 <__assert_fail@plt+0x1144>
   1250c:	str	r6, [r4]
   12510:	sub	sp, fp, #28
   12514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1251c:	add	fp, sp, #28
   12520:	sub	sp, sp, #156	; 0x9c
   12524:	mov	r9, r3
   12528:	mov	r7, r1
   1252c:	mov	r6, r0
   12530:	str	r2, [fp, #-80]	; 0xffffffb0
   12534:	add	r0, r2, #1
   12538:	str	r0, [sp, #76]	; 0x4c
   1253c:	ldr	r0, [fp, #12]
   12540:	and	r1, r0, #1
   12544:	str	r1, [sp, #40]	; 0x28
   12548:	and	r1, r0, #4
   1254c:	str	r1, [sp, #36]	; 0x24
   12550:	ubfx	r4, r0, #1, #1
   12554:	bl	111dc <__ctype_get_mb_cur_max@plt>
   12558:	str	r0, [sp, #44]	; 0x2c
   1255c:	ldr	r0, [fp, #24]
   12560:	str	r0, [sp, #88]	; 0x58
   12564:	ldr	r0, [fp, #20]
   12568:	str	r0, [sp, #80]	; 0x50
   1256c:	ldr	r1, [fp, #8]
   12570:	mov	r0, #0
   12574:	str	r0, [sp, #84]	; 0x54
   12578:	mov	r0, #0
   1257c:	str	r0, [fp, #-84]	; 0xffffffac
   12580:	mov	r0, #0
   12584:	str	r0, [fp, #-72]	; 0xffffffb8
   12588:	mov	r0, #0
   1258c:	mov	r2, #0
   12590:	str	r2, [fp, #-56]	; 0xffffffc8
   12594:	mov	r2, #0
   12598:	str	r2, [sp, #64]	; 0x40
   1259c:	mov	r2, #1
   125a0:	str	r2, [fp, #-48]	; 0xffffffd0
   125a4:	cmp	r1, #10
   125a8:	bhi	134d4 <__assert_fail@plt+0x2100>
   125ac:	mov	sl, r7
   125b0:	mov	r7, r1
   125b4:	add	r1, pc, #24
   125b8:	mov	r8, #0
   125bc:	mov	r2, #1
   125c0:	mov	r3, #0
   125c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   125c8:	mov	lr, r9
   125cc:	mov	r5, r6
   125d0:	ldr	pc, [r1, r7, lsl #2]
   125d4:	andeq	r2, r1, r8, lsr #13
   125d8:	andeq	r2, r1, r8, ror #13
   125dc:			; <UNDEFINED> instruction: 0x000126b8
   125e0:	andeq	r2, r1, r0, lsr #13
   125e4:	ldrdeq	r2, [r1], -ip
   125e8:	andeq	r2, r1, ip, lsr r7
   125ec:	andeq	r2, r1, r8, asr #13
   125f0:	muleq	r1, r8, r7
   125f4:	andeq	r2, r1, r0, lsl #12
   125f8:	andeq	r2, r1, r0, lsl #12
   125fc:	andeq	r2, r1, ip, lsr #12
   12600:	movw	r0, #26852	; 0x68e4
   12604:	movt	r0, #1
   12608:	mov	r1, r7
   1260c:	bl	13adc <__assert_fail@plt+0x2708>
   12610:	str	r0, [sp, #80]	; 0x50
   12614:	movw	r0, #26854	; 0x68e6
   12618:	movt	r0, #1
   1261c:	mov	r1, r7
   12620:	bl	13adc <__assert_fail@plt+0x2708>
   12624:	mov	r5, r6
   12628:	str	r0, [sp, #88]	; 0x58
   1262c:	mov	r8, #0
   12630:	tst	r4, #1
   12634:	str	r7, [fp, #-64]	; 0xffffffc0
   12638:	bne	12670 <__assert_fail@plt+0x129c>
   1263c:	ldr	r0, [sp, #80]	; 0x50
   12640:	ldrb	r0, [r0]
   12644:	cmp	r0, #0
   12648:	beq	12670 <__assert_fail@plt+0x129c>
   1264c:	ldr	r1, [sp, #80]	; 0x50
   12650:	add	r1, r1, #1
   12654:	mov	r8, #0
   12658:	cmp	r8, sl
   1265c:	strbcc	r0, [r5, r8]
   12660:	ldrb	r0, [r1, r8]
   12664:	add	r8, r8, #1
   12668:	cmp	r0, #0
   1266c:	bne	12658 <__assert_fail@plt+0x1284>
   12670:	ldr	r7, [sp, #88]	; 0x58
   12674:	mov	r0, r7
   12678:	bl	112a8 <strlen@plt>
   1267c:	mov	r5, r6
   12680:	str	r0, [fp, #-72]	; 0xffffffb8
   12684:	str	r7, [fp, #-84]	; 0xffffffac
   12688:	mov	r2, #1
   1268c:	mov	r3, r4
   12690:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12694:	mov	lr, r9
   12698:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1269c:	b	12798 <__assert_fail@plt+0x13c4>
   126a0:	mov	r0, #1
   126a4:	b	126e8 <__assert_fail@plt+0x1314>
   126a8:	mov	r7, #0
   126ac:	mov	r8, #0
   126b0:	mov	r2, r0
   126b4:	b	12794 <__assert_fail@plt+0x13c0>
   126b8:	tst	r4, #1
   126bc:	bne	126e8 <__assert_fail@plt+0x1314>
   126c0:	mov	r2, r0
   126c4:	b	12710 <__assert_fail@plt+0x133c>
   126c8:	mov	r0, #1
   126cc:	str	r0, [fp, #-72]	; 0xffffffb8
   126d0:	mov	r8, #0
   126d4:	mov	r7, #5
   126d8:	b	12754 <__assert_fail@plt+0x1380>
   126dc:	mov	r2, #1
   126e0:	tst	r4, #1
   126e4:	beq	12710 <__assert_fail@plt+0x133c>
   126e8:	mov	r1, #1
   126ec:	str	r1, [fp, #-72]	; 0xffffffb8
   126f0:	mov	r8, #0
   126f4:	mov	r7, #2
   126f8:	movw	r1, #26854	; 0x68e6
   126fc:	movt	r1, #1
   12700:	str	r1, [fp, #-84]	; 0xffffffac
   12704:	mov	r2, r0
   12708:	mov	r3, #1
   1270c:	b	12798 <__assert_fail@plt+0x13c4>
   12710:	mov	r8, #1
   12714:	mov	r7, #2
   12718:	cmp	sl, #0
   1271c:	movne	r0, #39	; 0x27
   12720:	strbne	r0, [r5]
   12724:	movw	r0, #26854	; 0x68e6
   12728:	movt	r0, #1
   1272c:	str	r0, [fp, #-84]	; 0xffffffac
   12730:	mov	r0, #1
   12734:	str	r0, [fp, #-72]	; 0xffffffb8
   12738:	b	12794 <__assert_fail@plt+0x13c0>
   1273c:	mov	r7, #5
   12740:	tst	r4, #1
   12744:	beq	1276c <__assert_fail@plt+0x1398>
   12748:	mov	r0, #1
   1274c:	str	r0, [fp, #-72]	; 0xffffffb8
   12750:	mov	r8, #0
   12754:	movw	r0, #26850	; 0x68e2
   12758:	movt	r0, #1
   1275c:	str	r0, [fp, #-84]	; 0xffffffac
   12760:	mov	r2, #1
   12764:	mov	r3, #1
   12768:	b	12798 <__assert_fail@plt+0x13c4>
   1276c:	cmp	sl, #0
   12770:	movne	r0, #34	; 0x22
   12774:	strbne	r0, [r5]
   12778:	mov	r8, #1
   1277c:	movw	r0, #26850	; 0x68e2
   12780:	movt	r0, #1
   12784:	str	r0, [fp, #-84]	; 0xffffffac
   12788:	mov	r0, #1
   1278c:	str	r0, [fp, #-72]	; 0xffffffb8
   12790:	mov	r2, #1
   12794:	mov	r3, #0
   12798:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1279c:	cmp	r0, #0
   127a0:	movwne	r0, #1
   127a4:	and	r1, r0, r3
   127a8:	and	r1, r2, r1
   127ac:	str	r1, [sp, #56]	; 0x38
   127b0:	sub	r1, r7, #2
   127b4:	clz	r1, r1
   127b8:	lsr	r1, r1, #5
   127bc:	and	r1, r1, r3
   127c0:	str	r1, [sp, #68]	; 0x44
   127c4:	str	r7, [fp, #-64]	; 0xffffffc0
   127c8:	subs	r1, r7, #2
   127cc:	movwne	r1, #1
   127d0:	eor	r4, r3, #1
   127d4:	str	r4, [fp, #-88]	; 0xffffffa8
   127d8:	orr	r4, r1, r4
   127dc:	str	r4, [sp, #72]	; 0x48
   127e0:	and	r1, r1, r2
   127e4:	and	r0, r0, r1
   127e8:	str	r0, [fp, #-60]	; 0xffffffc4
   127ec:	str	r3, [fp, #-76]	; 0xffffffb4
   127f0:	orr	r0, r1, r3
   127f4:	eor	r0, r0, #1
   127f8:	ldr	r1, [fp, #16]
   127fc:	clz	r1, r1
   12800:	lsr	r1, r1, #5
   12804:	orr	r0, r1, r0
   12808:	str	r0, [fp, #-68]	; 0xffffffbc
   1280c:	str	r2, [sp, #92]	; 0x5c
   12810:	eor	r0, r2, #1
   12814:	str	r0, [sp, #60]	; 0x3c
   12818:	mov	r7, #0
   1281c:	cmn	lr, #1
   12820:	beq	12830 <__assert_fail@plt+0x145c>
   12824:	cmp	r7, lr
   12828:	bne	1283c <__assert_fail@plt+0x1468>
   1282c:	b	13348 <__assert_fail@plt+0x1f74>
   12830:	ldrb	r0, [ip, r7]
   12834:	cmp	r0, #0
   12838:	beq	13348 <__assert_fail@plt+0x1f74>
   1283c:	mov	r9, #0
   12840:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12844:	cmp	r0, #0
   12848:	beq	1287c <__assert_fail@plt+0x14a8>
   1284c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12850:	add	r4, r7, r0
   12854:	cmp	r0, #2
   12858:	bcc	12874 <__assert_fail@plt+0x14a0>
   1285c:	cmn	lr, #1
   12860:	bne	12874 <__assert_fail@plt+0x14a0>
   12864:	mov	r0, ip
   12868:	bl	112a8 <strlen@plt>
   1286c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12870:	mov	lr, r0
   12874:	cmp	r4, lr
   12878:	bls	12888 <__assert_fail@plt+0x14b4>
   1287c:	mov	r0, #0
   12880:	str	r0, [fp, #-52]	; 0xffffffcc
   12884:	b	128cc <__assert_fail@plt+0x14f8>
   12888:	mov	r4, lr
   1288c:	add	r0, ip, r7
   12890:	ldr	r1, [fp, #-84]	; 0xffffffac
   12894:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12898:	bl	11290 <bcmp@plt>
   1289c:	cmp	r0, #0
   128a0:	mov	r1, r0
   128a4:	movwne	r1, #1
   128a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   128ac:	orr	r1, r1, r2
   128b0:	tst	r1, #1
   128b4:	beq	1341c <__assert_fail@plt+0x2048>
   128b8:	clz	r0, r0
   128bc:	lsr	r0, r0, #5
   128c0:	str	r0, [fp, #-52]	; 0xffffffcc
   128c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   128c8:	mov	lr, r4
   128cc:	ldrb	r4, [ip, r7]
   128d0:	cmp	r4, #126	; 0x7e
   128d4:	bhi	12e04 <__assert_fail@plt+0x1a30>
   128d8:	mov	r6, #1
   128dc:	mov	r2, #110	; 0x6e
   128e0:	mov	r0, #97	; 0x61
   128e4:	add	r3, pc, #4
   128e8:	mov	r1, #0
   128ec:	ldr	pc, [r3, r4, lsl #2]
   128f0:	andeq	r2, r1, r4, ror #24
   128f4:	andeq	r2, r1, r4, lsl #28
   128f8:	andeq	r2, r1, r4, lsl #28
   128fc:	andeq	r2, r1, r4, lsl #28
   12900:	andeq	r2, r1, r4, lsl #28
   12904:	andeq	r2, r1, r4, lsl #28
   12908:	andeq	r2, r1, r4, lsl #28
   1290c:	ldrdeq	r2, [r1], -r8
   12910:	andeq	r2, r1, r4, asr #24
   12914:	andeq	r2, r1, ip, lsr ip
   12918:	andeq	r2, r1, r0, asr ip
   1291c:	andeq	r2, r1, ip, ror #26
   12920:	andeq	r2, r1, r4, lsr ip
   12924:	andeq	r2, r1, ip, asr #24
   12928:	andeq	r2, r1, r4, lsl #28
   1292c:	andeq	r2, r1, r4, lsl #28
   12930:	andeq	r2, r1, r4, lsl #28
   12934:	andeq	r2, r1, r4, lsl #28
   12938:	andeq	r2, r1, r4, lsl #28
   1293c:	andeq	r2, r1, r4, lsl #28
   12940:	andeq	r2, r1, r4, lsl #28
   12944:	andeq	r2, r1, r4, lsl #28
   12948:	andeq	r2, r1, r4, lsl #28
   1294c:	andeq	r2, r1, r4, lsl #28
   12950:	andeq	r2, r1, r4, lsl #28
   12954:	andeq	r2, r1, r4, lsl #28
   12958:	andeq	r2, r1, r4, lsl #28
   1295c:	andeq	r2, r1, r4, lsl #28
   12960:	andeq	r2, r1, r4, lsl #28
   12964:	andeq	r2, r1, r4, lsl #28
   12968:	andeq	r2, r1, r4, lsl #28
   1296c:	andeq	r2, r1, r4, lsl #28
   12970:	andeq	r2, r1, r8, ror #23
   12974:	andeq	r2, r1, ip, ror #23
   12978:	andeq	r2, r1, ip, ror #23
   1297c:	ldrdeq	r2, [r1], -r4
   12980:	andeq	r2, r1, ip, ror #23
   12984:	andeq	r2, r1, ip, ror #21
   12988:	andeq	r2, r1, ip, ror #23
   1298c:	andeq	r2, r1, r4, ror sp
   12990:	andeq	r2, r1, ip, ror #23
   12994:	andeq	r2, r1, ip, ror #23
   12998:	andeq	r2, r1, ip, ror #23
   1299c:	andeq	r2, r1, ip, ror #21
   129a0:	andeq	r2, r1, ip, ror #21
   129a4:	andeq	r2, r1, ip, ror #21
   129a8:	andeq	r2, r1, ip, ror #21
   129ac:	andeq	r2, r1, ip, ror #21
   129b0:	andeq	r2, r1, ip, ror #21
   129b4:	andeq	r2, r1, ip, ror #21
   129b8:	andeq	r2, r1, ip, ror #21
   129bc:	andeq	r2, r1, ip, ror #21
   129c0:	andeq	r2, r1, ip, ror #21
   129c4:	andeq	r2, r1, ip, ror #21
   129c8:	andeq	r2, r1, ip, ror #21
   129cc:	andeq	r2, r1, ip, ror #21
   129d0:	andeq	r2, r1, ip, ror #21
   129d4:	andeq	r2, r1, ip, ror #21
   129d8:	andeq	r2, r1, ip, ror #21
   129dc:	andeq	r2, r1, ip, ror #23
   129e0:	andeq	r2, r1, ip, ror #23
   129e4:	andeq	r2, r1, ip, ror #23
   129e8:	andeq	r2, r1, ip, ror #23
   129ec:	andeq	r2, r1, ip, lsr sp
   129f0:	andeq	r2, r1, r4, lsl #28
   129f4:	andeq	r2, r1, ip, ror #21
   129f8:	andeq	r2, r1, ip, ror #21
   129fc:	andeq	r2, r1, ip, ror #21
   12a00:	andeq	r2, r1, ip, ror #21
   12a04:	andeq	r2, r1, ip, ror #21
   12a08:	andeq	r2, r1, ip, ror #21
   12a0c:	andeq	r2, r1, ip, ror #21
   12a10:	andeq	r2, r1, ip, ror #21
   12a14:	andeq	r2, r1, ip, ror #21
   12a18:	andeq	r2, r1, ip, ror #21
   12a1c:	andeq	r2, r1, ip, ror #21
   12a20:	andeq	r2, r1, ip, ror #21
   12a24:	andeq	r2, r1, ip, ror #21
   12a28:	andeq	r2, r1, ip, ror #21
   12a2c:	andeq	r2, r1, ip, ror #21
   12a30:	andeq	r2, r1, ip, ror #21
   12a34:	andeq	r2, r1, ip, ror #21
   12a38:	andeq	r2, r1, ip, ror #21
   12a3c:	andeq	r2, r1, ip, ror #21
   12a40:	andeq	r2, r1, ip, ror #21
   12a44:	andeq	r2, r1, ip, ror #21
   12a48:	andeq	r2, r1, ip, ror #21
   12a4c:	andeq	r2, r1, ip, ror #21
   12a50:	andeq	r2, r1, ip, ror #21
   12a54:	andeq	r2, r1, ip, ror #21
   12a58:	andeq	r2, r1, ip, ror #21
   12a5c:	andeq	r2, r1, ip, ror #23
   12a60:	andeq	r2, r1, r4, lsl ip
   12a64:	andeq	r2, r1, ip, ror #21
   12a68:	andeq	r2, r1, ip, ror #23
   12a6c:	andeq	r2, r1, ip, ror #21
   12a70:	andeq	r2, r1, ip, ror #23
   12a74:	andeq	r2, r1, ip, ror #21
   12a78:	andeq	r2, r1, ip, ror #21
   12a7c:	andeq	r2, r1, ip, ror #21
   12a80:	andeq	r2, r1, ip, ror #21
   12a84:	andeq	r2, r1, ip, ror #21
   12a88:	andeq	r2, r1, ip, ror #21
   12a8c:	andeq	r2, r1, ip, ror #21
   12a90:	andeq	r2, r1, ip, ror #21
   12a94:	andeq	r2, r1, ip, ror #21
   12a98:	andeq	r2, r1, ip, ror #21
   12a9c:	andeq	r2, r1, ip, ror #21
   12aa0:	andeq	r2, r1, ip, ror #21
   12aa4:	andeq	r2, r1, ip, ror #21
   12aa8:	andeq	r2, r1, ip, ror #21
   12aac:	andeq	r2, r1, ip, ror #21
   12ab0:	andeq	r2, r1, ip, ror #21
   12ab4:	andeq	r2, r1, ip, ror #21
   12ab8:	andeq	r2, r1, ip, ror #21
   12abc:	andeq	r2, r1, ip, ror #21
   12ac0:	andeq	r2, r1, ip, ror #21
   12ac4:	andeq	r2, r1, ip, ror #21
   12ac8:	andeq	r2, r1, ip, ror #21
   12acc:	andeq	r2, r1, ip, ror #21
   12ad0:	andeq	r2, r1, ip, ror #21
   12ad4:	andeq	r2, r1, ip, ror #21
   12ad8:	andeq	r2, r1, ip, ror #21
   12adc:	andeq	r2, r1, r8, lsr #23
   12ae0:	andeq	r2, r1, ip, ror #23
   12ae4:	andeq	r2, r1, r8, lsr #23
   12ae8:	ldrdeq	r2, [r1], -r4
   12aec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12af0:	tst	r0, #1
   12af4:	bne	12b20 <__assert_fail@plt+0x174c>
   12af8:	ubfx	r0, r4, #5, #3
   12afc:	ldr	r1, [fp, #16]
   12b00:	ldr	r0, [r1, r0, lsl #2]
   12b04:	and	r1, r4, #31
   12b08:	mov	r2, #1
   12b0c:	tst	r0, r2, lsl r1
   12b10:	beq	12b20 <__assert_fail@plt+0x174c>
   12b14:	mov	r0, r4
   12b18:	mov	r1, r6
   12b1c:	b	12b34 <__assert_fail@plt+0x1760>
   12b20:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12b24:	cmp	r0, #0
   12b28:	mov	r0, r4
   12b2c:	mov	r1, r6
   12b30:	beq	12e6c <__assert_fail@plt+0x1a98>
   12b34:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12b38:	tst	r2, #1
   12b3c:	bne	13430 <__assert_fail@plt+0x205c>
   12b40:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12b44:	subs	r2, r2, #2
   12b48:	movwne	r2, #1
   12b4c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12b50:	orr	r2, r2, r3
   12b54:	tst	r2, #1
   12b58:	bne	12b94 <__assert_fail@plt+0x17c0>
   12b5c:	cmp	r8, sl
   12b60:	movcc	r2, #39	; 0x27
   12b64:	strbcc	r2, [r5, r8]
   12b68:	add	r2, r8, #1
   12b6c:	cmp	r2, sl
   12b70:	movcc	r3, #36	; 0x24
   12b74:	strbcc	r3, [r5, r2]
   12b78:	add	r2, r8, #2
   12b7c:	cmp	r2, sl
   12b80:	movcc	r3, #39	; 0x27
   12b84:	strbcc	r3, [r5, r2]
   12b88:	add	r8, r8, #3
   12b8c:	mov	r2, #1
   12b90:	str	r2, [fp, #-56]	; 0xffffffc8
   12b94:	cmp	r8, sl
   12b98:	movcc	r2, #92	; 0x5c
   12b9c:	strbcc	r2, [r5, r8]
   12ba0:	add	r8, r8, #1
   12ba4:	b	12eb0 <__assert_fail@plt+0x1adc>
   12ba8:	cmp	lr, #1
   12bac:	beq	12bd4 <__assert_fail@plt+0x1800>
   12bb0:	mov	r6, #0
   12bb4:	cmn	lr, #1
   12bb8:	bne	12be0 <__assert_fail@plt+0x180c>
   12bbc:	ldrb	r0, [ip, #1]
   12bc0:	cmp	r0, #0
   12bc4:	beq	12bd4 <__assert_fail@plt+0x1800>
   12bc8:	mvn	lr, #0
   12bcc:	mov	r9, #0
   12bd0:	b	12aec <__assert_fail@plt+0x1718>
   12bd4:	mov	r6, #0
   12bd8:	cmp	r7, #0
   12bdc:	beq	12be8 <__assert_fail@plt+0x1814>
   12be0:	mov	r9, #0
   12be4:	b	12aec <__assert_fail@plt+0x1718>
   12be8:	mov	r1, #1
   12bec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bf0:	cmp	r0, #2
   12bf4:	bne	12c0c <__assert_fail@plt+0x1838>
   12bf8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bfc:	tst	r0, #1
   12c00:	mov	r6, r1
   12c04:	beq	12aec <__assert_fail@plt+0x1718>
   12c08:	b	13430 <__assert_fail@plt+0x205c>
   12c0c:	mov	r6, r1
   12c10:	b	12aec <__assert_fail@plt+0x1718>
   12c14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c18:	cmp	r0, #2
   12c1c:	bne	12e50 <__assert_fail@plt+0x1a7c>
   12c20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c24:	tst	r0, #1
   12c28:	bne	13430 <__assert_fail@plt+0x205c>
   12c2c:	mov	r9, #0
   12c30:	b	12e64 <__assert_fail@plt+0x1a90>
   12c34:	mov	r0, #102	; 0x66
   12c38:	b	12ed8 <__assert_fail@plt+0x1b04>
   12c3c:	mov	r2, #116	; 0x74
   12c40:	b	12c50 <__assert_fail@plt+0x187c>
   12c44:	mov	r0, #98	; 0x62
   12c48:	b	12ed8 <__assert_fail@plt+0x1b04>
   12c4c:	mov	r2, #114	; 0x72
   12c50:	ldr	r0, [sp, #72]	; 0x48
   12c54:	tst	r0, #1
   12c58:	mov	r0, r2
   12c5c:	bne	12ed8 <__assert_fail@plt+0x1b04>
   12c60:	b	13430 <__assert_fail@plt+0x205c>
   12c64:	ldr	r0, [sp, #92]	; 0x5c
   12c68:	tst	r0, #1
   12c6c:	beq	12ef4 <__assert_fail@plt+0x1b20>
   12c70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c74:	tst	r0, #1
   12c78:	bne	13430 <__assert_fail@plt+0x205c>
   12c7c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c80:	subs	r0, r0, #2
   12c84:	movwne	r0, #1
   12c88:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12c8c:	orr	r0, r0, r1
   12c90:	tst	r0, #1
   12c94:	bne	12cd0 <__assert_fail@plt+0x18fc>
   12c98:	cmp	r8, sl
   12c9c:	movcc	r0, #39	; 0x27
   12ca0:	strbcc	r0, [r5, r8]
   12ca4:	add	r0, r8, #1
   12ca8:	cmp	r0, sl
   12cac:	movcc	r1, #36	; 0x24
   12cb0:	strbcc	r1, [r5, r0]
   12cb4:	add	r0, r8, #2
   12cb8:	cmp	r0, sl
   12cbc:	movcc	r1, #39	; 0x27
   12cc0:	strbcc	r1, [r5, r0]
   12cc4:	add	r8, r8, #3
   12cc8:	mov	r0, #1
   12ccc:	str	r0, [fp, #-56]	; 0xffffffc8
   12cd0:	cmp	r8, sl
   12cd4:	movcc	r0, #92	; 0x5c
   12cd8:	strbcc	r0, [r5, r8]
   12cdc:	add	r0, r8, #1
   12ce0:	mov	r6, #0
   12ce4:	mov	r9, #1
   12ce8:	mov	r4, #48	; 0x30
   12cec:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12cf0:	cmp	r1, #2
   12cf4:	beq	130b8 <__assert_fail@plt+0x1ce4>
   12cf8:	add	r1, r7, #1
   12cfc:	cmp	r1, lr
   12d00:	bcs	130b8 <__assert_fail@plt+0x1ce4>
   12d04:	ldrb	r1, [ip, r1]
   12d08:	sub	r1, r1, #48	; 0x30
   12d0c:	uxtb	r1, r1
   12d10:	cmp	r1, #9
   12d14:	bhi	130b8 <__assert_fail@plt+0x1ce4>
   12d18:	cmp	r0, sl
   12d1c:	movcc	r1, #48	; 0x30
   12d20:	strbcc	r1, [r5, r0]
   12d24:	add	r0, r8, #2
   12d28:	cmp	r0, sl
   12d2c:	movcc	r1, #48	; 0x30
   12d30:	strbcc	r1, [r5, r0]
   12d34:	add	r8, r8, #3
   12d38:	b	12aec <__assert_fail@plt+0x1718>
   12d3c:	mov	r9, #0
   12d40:	mov	r4, #63	; 0x3f
   12d44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d48:	cmp	r0, #5
   12d4c:	beq	130c0 <__assert_fail@plt+0x1cec>
   12d50:	cmp	r0, #2
   12d54:	bne	13168 <__assert_fail@plt+0x1d94>
   12d58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d5c:	tst	r0, #1
   12d60:	mov	r6, #0
   12d64:	beq	12aec <__assert_fail@plt+0x1718>
   12d68:	b	13430 <__assert_fail@plt+0x205c>
   12d6c:	mov	r0, #118	; 0x76
   12d70:	b	12ed8 <__assert_fail@plt+0x1b04>
   12d74:	mov	r4, #39	; 0x27
   12d78:	mov	r0, #1
   12d7c:	str	r0, [sp, #64]	; 0x40
   12d80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d84:	cmp	r0, #2
   12d88:	bne	12f10 <__assert_fail@plt+0x1b3c>
   12d8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d90:	tst	r0, #1
   12d94:	bne	13430 <__assert_fail@plt+0x205c>
   12d98:	ldr	r2, [sp, #84]	; 0x54
   12d9c:	cmp	r2, #0
   12da0:	mov	r0, r2
   12da4:	movwne	r0, #1
   12da8:	clz	r1, sl
   12dac:	lsr	r1, r1, #5
   12db0:	orrs	r0, r0, r1
   12db4:	moveq	r2, sl
   12db8:	str	r2, [sp, #84]	; 0x54
   12dbc:	moveq	sl, r0
   12dc0:	cmp	r8, sl
   12dc4:	movcc	r0, #39	; 0x27
   12dc8:	strbcc	r0, [r5, r8]
   12dcc:	add	r0, r8, #1
   12dd0:	cmp	r0, sl
   12dd4:	movcc	r1, #92	; 0x5c
   12dd8:	strbcc	r1, [r5, r0]
   12ddc:	add	r0, r8, #2
   12de0:	cmp	r0, sl
   12de4:	movcc	r1, #39	; 0x27
   12de8:	strbcc	r1, [r5, r0]
   12dec:	add	r8, r8, #3
   12df0:	mov	r0, #0
   12df4:	str	r0, [fp, #-56]	; 0xffffffc8
   12df8:	mov	r9, #0
   12dfc:	mov	r6, #1
   12e00:	b	12aec <__assert_fail@plt+0x1718>
   12e04:	ldr	r0, [sp, #44]	; 0x2c
   12e08:	cmp	r0, #1
   12e0c:	bne	12f18 <__assert_fail@plt+0x1b44>
   12e10:	str	lr, [sp, #32]
   12e14:	bl	11278 <__ctype_b_loc@plt>
   12e18:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e1c:	ldr	r0, [r0]
   12e20:	add	r0, r0, r4, lsl #1
   12e24:	ldrb	r0, [r0, #1]
   12e28:	ubfx	r6, r0, #6, #1
   12e2c:	mov	r2, #1
   12e30:	ldr	r0, [sp, #60]	; 0x3c
   12e34:	orr	r1, r6, r0
   12e38:	cmp	r2, #1
   12e3c:	bhi	13170 <__assert_fail@plt+0x1d9c>
   12e40:	tst	r1, #1
   12e44:	beq	13170 <__assert_fail@plt+0x1d9c>
   12e48:	ldr	lr, [sp, #32]
   12e4c:	b	12aec <__assert_fail@plt+0x1718>
   12e50:	mov	r9, #0
   12e54:	mov	r0, #92	; 0x5c
   12e58:	ldr	r1, [sp, #56]	; 0x38
   12e5c:	cmp	r1, #0
   12e60:	beq	12ed8 <__assert_fail@plt+0x1b04>
   12e64:	mov	r4, #92	; 0x5c
   12e68:	mov	r6, #0
   12e6c:	cmp	r9, #0
   12e70:	bne	12ea8 <__assert_fail@plt+0x1ad4>
   12e74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e78:	tst	r0, #1
   12e7c:	beq	12ea8 <__assert_fail@plt+0x1ad4>
   12e80:	cmp	r8, sl
   12e84:	movcc	r0, #39	; 0x27
   12e88:	strbcc	r0, [r5, r8]
   12e8c:	add	r0, r8, #1
   12e90:	cmp	r0, sl
   12e94:	movcc	r1, #39	; 0x27
   12e98:	strbcc	r1, [r5, r0]
   12e9c:	add	r8, r8, #2
   12ea0:	mov	r0, #0
   12ea4:	str	r0, [fp, #-56]	; 0xffffffc8
   12ea8:	mov	r1, r6
   12eac:	mov	r0, r4
   12eb0:	cmp	r8, sl
   12eb4:	strbcc	r0, [r5, r8]
   12eb8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12ebc:	and	r0, r0, r1
   12ec0:	str	r0, [fp, #-48]	; 0xffffffd0
   12ec4:	add	r8, r8, #1
   12ec8:	add	r7, r7, #1
   12ecc:	cmn	lr, #1
   12ed0:	bne	12824 <__assert_fail@plt+0x1450>
   12ed4:	b	12830 <__assert_fail@plt+0x145c>
   12ed8:	mov	r9, #0
   12edc:	ldr	r1, [sp, #92]	; 0x5c
   12ee0:	tst	r1, #1
   12ee4:	mov	r6, #0
   12ee8:	mov	r1, #0
   12eec:	beq	12aec <__assert_fail@plt+0x1718>
   12ef0:	b	12b34 <__assert_fail@plt+0x1760>
   12ef4:	mov	r4, #0
   12ef8:	ldr	r0, [sp, #40]	; 0x28
   12efc:	cmp	r0, #0
   12f00:	mov	r9, #0
   12f04:	mov	r6, #0
   12f08:	beq	12aec <__assert_fail@plt+0x1718>
   12f0c:	b	12ec8 <__assert_fail@plt+0x1af4>
   12f10:	mov	r6, #1
   12f14:	b	12aec <__assert_fail@plt+0x1718>
   12f18:	mov	r0, #0
   12f1c:	str	r0, [fp, #-36]	; 0xffffffdc
   12f20:	str	r0, [fp, #-40]	; 0xffffffd8
   12f24:	cmn	lr, #1
   12f28:	bne	12f3c <__assert_fail@plt+0x1b68>
   12f2c:	mov	r0, ip
   12f30:	bl	112a8 <strlen@plt>
   12f34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f38:	mov	lr, r0
   12f3c:	ldr	r0, [sp, #76]	; 0x4c
   12f40:	add	r0, r0, r7
   12f44:	str	r0, [sp, #24]
   12f48:	mov	r6, #1
   12f4c:	mov	r2, #0
   12f50:	sub	r0, fp, #40	; 0x28
   12f54:	mov	r3, r0
   12f58:	str	r5, [sp, #28]
   12f5c:	str	lr, [sp, #32]
   12f60:	b	12fa4 <__assert_fail@plt+0x1bd0>
   12f64:	ldr	r5, [sp, #52]	; 0x34
   12f68:	add	r5, r0, r5
   12f6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12f70:	bl	111ac <iswprint@plt>
   12f74:	cmp	r0, #0
   12f78:	movwne	r0, #1
   12f7c:	and	r6, r6, r0
   12f80:	sub	r0, fp, #40	; 0x28
   12f84:	bl	11170 <mbsinit@plt>
   12f88:	sub	r3, fp, #40	; 0x28
   12f8c:	mov	r2, r5
   12f90:	ldr	lr, [sp, #32]
   12f94:	cmp	r0, #0
   12f98:	ldr	r5, [sp, #28]
   12f9c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12fa0:	bne	12e30 <__assert_fail@plt+0x1a5c>
   12fa4:	str	r2, [sp, #52]	; 0x34
   12fa8:	add	r0, r2, r7
   12fac:	add	r1, ip, r0
   12fb0:	str	r0, [sp, #48]	; 0x30
   12fb4:	sub	r2, lr, r0
   12fb8:	sub	r0, fp, #44	; 0x2c
   12fbc:	bl	15cb4 <__assert_fail@plt+0x48e0>
   12fc0:	cmp	r0, #0
   12fc4:	beq	1333c <__assert_fail@plt+0x1f68>
   12fc8:	cmn	r0, #1
   12fcc:	beq	132f8 <__assert_fail@plt+0x1f24>
   12fd0:	cmn	r0, #2
   12fd4:	ldr	lr, [sp, #32]
   12fd8:	beq	13300 <__assert_fail@plt+0x1f2c>
   12fdc:	cmp	r0, #2
   12fe0:	mov	r1, #0
   12fe4:	movwcc	r1, #1
   12fe8:	ldr	r2, [sp, #68]	; 0x44
   12fec:	eor	r2, r2, #1
   12ff0:	orrs	r1, r2, r1
   12ff4:	bne	12f64 <__assert_fail@plt+0x1b90>
   12ff8:	ldr	r1, [sp, #52]	; 0x34
   12ffc:	ldr	r2, [sp, #24]
   13000:	add	r1, r2, r1
   13004:	sub	r2, r0, #1
   13008:	b	13018 <__assert_fail@plt+0x1c44>
   1300c:	add	r1, r1, #1
   13010:	subs	r2, r2, #1
   13014:	beq	12f64 <__assert_fail@plt+0x1b90>
   13018:	ldrb	r3, [r1]
   1301c:	sub	r3, r3, #91	; 0x5b
   13020:	cmp	r3, #33	; 0x21
   13024:	bhi	1300c <__assert_fail@plt+0x1c38>
   13028:	add	r5, pc, #0
   1302c:	ldr	pc, [r5, r3, lsl #2]
   13030:	andeq	r3, r1, r8, lsr #8
   13034:	andeq	r3, r1, r8, lsr #8
   13038:	andeq	r3, r1, ip
   1303c:	andeq	r3, r1, r8, lsr #8
   13040:	andeq	r3, r1, ip
   13044:	andeq	r3, r1, r8, lsr #8
   13048:	andeq	r3, r1, ip
   1304c:	andeq	r3, r1, ip
   13050:	andeq	r3, r1, ip
   13054:	andeq	r3, r1, ip
   13058:	andeq	r3, r1, ip
   1305c:	andeq	r3, r1, ip
   13060:	andeq	r3, r1, ip
   13064:	andeq	r3, r1, ip
   13068:	andeq	r3, r1, ip
   1306c:	andeq	r3, r1, ip
   13070:	andeq	r3, r1, ip
   13074:	andeq	r3, r1, ip
   13078:	andeq	r3, r1, ip
   1307c:	andeq	r3, r1, ip
   13080:	andeq	r3, r1, ip
   13084:	andeq	r3, r1, ip
   13088:	andeq	r3, r1, ip
   1308c:	andeq	r3, r1, ip
   13090:	andeq	r3, r1, ip
   13094:	andeq	r3, r1, ip
   13098:	andeq	r3, r1, ip
   1309c:	andeq	r3, r1, ip
   130a0:	andeq	r3, r1, ip
   130a4:	andeq	r3, r1, ip
   130a8:	andeq	r3, r1, ip
   130ac:	andeq	r3, r1, ip
   130b0:	andeq	r3, r1, ip
   130b4:	andeq	r3, r1, r8, lsr #8
   130b8:	mov	r8, r0
   130bc:	b	12aec <__assert_fail@plt+0x1718>
   130c0:	ldr	r0, [sp, #36]	; 0x24
   130c4:	cmp	r0, #0
   130c8:	beq	13168 <__assert_fail@plt+0x1d94>
   130cc:	add	r0, r7, #2
   130d0:	cmp	r0, lr
   130d4:	bcs	13168 <__assert_fail@plt+0x1d94>
   130d8:	add	r1, r7, ip
   130dc:	ldrb	r1, [r1, #1]
   130e0:	cmp	r1, #63	; 0x3f
   130e4:	bne	13168 <__assert_fail@plt+0x1d94>
   130e8:	ldrb	r1, [ip, r0]
   130ec:	sub	r2, r1, #33	; 0x21
   130f0:	cmp	r2, #29
   130f4:	bhi	13168 <__assert_fail@plt+0x1d94>
   130f8:	mov	r3, #1
   130fc:	movw	r6, #20929	; 0x51c1
   13100:	movt	r6, #14336	; 0x3800
   13104:	tst	r6, r3, lsl r2
   13108:	beq	13168 <__assert_fail@plt+0x1d94>
   1310c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13110:	tst	r2, #1
   13114:	bne	13430 <__assert_fail@plt+0x205c>
   13118:	cmp	r8, sl
   1311c:	movcc	r2, #63	; 0x3f
   13120:	strbcc	r2, [r5, r8]
   13124:	add	r2, r8, #1
   13128:	cmp	r2, sl
   1312c:	movcc	r3, #34	; 0x22
   13130:	strbcc	r3, [r5, r2]
   13134:	add	r2, r8, #2
   13138:	cmp	r2, sl
   1313c:	movcc	r3, #34	; 0x22
   13140:	strbcc	r3, [r5, r2]
   13144:	add	r2, r8, #3
   13148:	cmp	r2, sl
   1314c:	movcc	r3, #63	; 0x3f
   13150:	strbcc	r3, [r5, r2]
   13154:	add	r8, r8, #4
   13158:	mov	r7, r0
   1315c:	mov	r4, r1
   13160:	mov	r6, #0
   13164:	b	12aec <__assert_fail@plt+0x1718>
   13168:	mov	r6, #0
   1316c:	b	12aec <__assert_fail@plt+0x1718>
   13170:	add	r0, r2, r7
   13174:	str	r0, [sp, #52]	; 0x34
   13178:	mov	r2, #0
   1317c:	ldr	lr, [sp, #32]
   13180:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13184:	str	r1, [sp, #48]	; 0x30
   13188:	tst	r1, #1
   1318c:	bne	13268 <__assert_fail@plt+0x1e94>
   13190:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13194:	tst	r1, #1
   13198:	bne	13430 <__assert_fail@plt+0x205c>
   1319c:	mov	r3, r0
   131a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131a4:	subs	r1, r0, #2
   131a8:	movwne	r1, #1
   131ac:	orr	r1, r1, r3
   131b0:	tst	r1, #1
   131b4:	bne	131ec <__assert_fail@plt+0x1e18>
   131b8:	cmp	r8, sl
   131bc:	movcc	r0, #39	; 0x27
   131c0:	strbcc	r0, [r5, r8]
   131c4:	add	r2, r8, #1
   131c8:	cmp	r2, sl
   131cc:	movcc	r0, #36	; 0x24
   131d0:	strbcc	r0, [r5, r2]
   131d4:	add	r2, r8, #2
   131d8:	cmp	r2, sl
   131dc:	movcc	r0, #39	; 0x27
   131e0:	strbcc	r0, [r5, r2]
   131e4:	add	r8, r8, #3
   131e8:	mov	r3, #1
   131ec:	cmp	r8, sl
   131f0:	movcc	r1, #92	; 0x5c
   131f4:	strbcc	r1, [r5, r8]
   131f8:	add	r2, r8, #1
   131fc:	cmp	r2, sl
   13200:	bcs	13214 <__assert_fail@plt+0x1e40>
   13204:	uxtb	r1, r4
   13208:	mov	r0, #48	; 0x30
   1320c:	orr	r1, r0, r1, lsr #6
   13210:	strb	r1, [r5, r2]
   13214:	add	r2, r8, #2
   13218:	cmp	r2, sl
   1321c:	lsrcc	r1, r4, #3
   13220:	movcc	r0, #6
   13224:	bficc	r1, r0, #3, #29
   13228:	strbcc	r1, [r5, r2]
   1322c:	mov	r0, #6
   13230:	bfi	r4, r0, #3, #29
   13234:	add	r8, r8, #3
   13238:	mov	r2, #1
   1323c:	mov	r0, r3
   13240:	b	1328c <__assert_fail@plt+0x1eb8>
   13244:	cmp	r8, sl
   13248:	strbcc	r4, [r5, r8]
   1324c:	ldr	r1, [sp, #76]	; 0x4c
   13250:	ldrb	r4, [r1, r7]
   13254:	add	r8, r8, #1
   13258:	mov	r7, r3
   1325c:	ldr	r1, [sp, #48]	; 0x30
   13260:	tst	r1, #1
   13264:	beq	13190 <__assert_fail@plt+0x1dbc>
   13268:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1326c:	tst	r1, #1
   13270:	beq	13284 <__assert_fail@plt+0x1eb0>
   13274:	cmp	r8, sl
   13278:	movcc	r1, #92	; 0x5c
   1327c:	strbcc	r1, [r5, r8]
   13280:	add	r8, r8, #1
   13284:	mov	r1, #0
   13288:	str	r1, [fp, #-52]	; 0xffffffcc
   1328c:	and	r9, r2, #1
   13290:	add	r3, r7, #1
   13294:	ldr	r1, [sp, #52]	; 0x34
   13298:	cmp	r1, r3
   1329c:	bls	132e0 <__assert_fail@plt+0x1f0c>
   132a0:	cmp	r9, #0
   132a4:	movwne	r9, #1
   132a8:	mvn	r1, r0
   132ac:	orr	r1, r1, r9
   132b0:	tst	r1, #1
   132b4:	bne	13244 <__assert_fail@plt+0x1e70>
   132b8:	cmp	r8, sl
   132bc:	movcc	r1, #39	; 0x27
   132c0:	strbcc	r1, [r5, r8]
   132c4:	add	r1, r8, #1
   132c8:	cmp	r1, sl
   132cc:	movcc	r0, #39	; 0x27
   132d0:	strbcc	r0, [r5, r1]
   132d4:	add	r8, r8, #2
   132d8:	mov	r0, #0
   132dc:	b	13244 <__assert_fail@plt+0x1e70>
   132e0:	str	r0, [fp, #-56]	; 0xffffffc8
   132e4:	cmp	r9, #0
   132e8:	movwne	r9, #1
   132ec:	cmp	r9, #0
   132f0:	beq	12e74 <__assert_fail@plt+0x1aa0>
   132f4:	b	12ea8 <__assert_fail@plt+0x1ad4>
   132f8:	mov	r6, #0
   132fc:	b	1333c <__assert_fail@plt+0x1f68>
   13300:	mov	r6, #0
   13304:	ldr	r0, [sp, #48]	; 0x30
   13308:	cmp	r0, lr
   1330c:	bcs	1333c <__assert_fail@plt+0x1f68>
   13310:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13314:	add	r0, ip, r7
   13318:	ldr	r2, [sp, #52]	; 0x34
   1331c:	ldrb	r1, [r0, r2]
   13320:	cmp	r1, #0
   13324:	beq	12e30 <__assert_fail@plt+0x1a5c>
   13328:	add	r2, r2, #1
   1332c:	add	r1, r7, r2
   13330:	cmp	r1, lr
   13334:	bcc	1331c <__assert_fail@plt+0x1f48>
   13338:	b	12e30 <__assert_fail@plt+0x1a5c>
   1333c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13340:	ldr	r2, [sp, #52]	; 0x34
   13344:	b	12e30 <__assert_fail@plt+0x1a5c>
   13348:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1334c:	eor	r0, r1, #2
   13350:	orr	r0, r0, r8
   13354:	clz	r0, r0
   13358:	lsr	r0, r0, #5
   1335c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13360:	tst	r3, r0
   13364:	bne	13430 <__assert_fail@plt+0x205c>
   13368:	mov	r6, r5
   1336c:	subs	r0, r1, #2
   13370:	movwne	r0, #1
   13374:	orr	r0, r3, r0
   13378:	tst	r0, #1
   1337c:	ldr	r2, [sp, #92]	; 0x5c
   13380:	ldreq	r0, [sp, #64]	; 0x40
   13384:	eoreq	r0, r0, #1
   13388:	tsteq	r0, #1
   1338c:	bne	133cc <__assert_fail@plt+0x1ff8>
   13390:	mov	r9, lr
   13394:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13398:	tst	r0, #1
   1339c:	bne	13498 <__assert_fail@plt+0x20c4>
   133a0:	ldr	r0, [sp, #84]	; 0x54
   133a4:	cmp	r0, #0
   133a8:	beq	133cc <__assert_fail@plt+0x1ff8>
   133ac:	mov	r0, #0
   133b0:	str	r0, [fp, #-48]	; 0xffffffd0
   133b4:	mov	r1, #2
   133b8:	cmp	sl, #0
   133bc:	mov	r0, r2
   133c0:	mov	r4, r3
   133c4:	ldr	r7, [sp, #84]	; 0x54
   133c8:	beq	125a4 <__assert_fail@plt+0x11d0>
   133cc:	ldr	r1, [fp, #-84]	; 0xffffffac
   133d0:	clz	r0, r1
   133d4:	lsr	r0, r0, #5
   133d8:	orr	r0, r0, r3
   133dc:	tst	r0, #1
   133e0:	bne	1340c <__assert_fail@plt+0x2038>
   133e4:	ldrb	r0, [r1]
   133e8:	cmp	r0, #0
   133ec:	beq	1340c <__assert_fail@plt+0x2038>
   133f0:	add	r1, r1, #1
   133f4:	cmp	r8, sl
   133f8:	strbcc	r0, [r6, r8]
   133fc:	add	r8, r8, #1
   13400:	ldrb	r0, [r1], #1
   13404:	cmp	r0, #0
   13408:	bne	133f4 <__assert_fail@plt+0x2020>
   1340c:	cmp	r8, sl
   13410:	movcc	r0, #0
   13414:	strbcc	r0, [r6, r8]
   13418:	b	1348c <__assert_fail@plt+0x20b8>
   1341c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13420:	mov	lr, r4
   13424:	b	13430 <__assert_fail@plt+0x205c>
   13428:	ldr	r5, [sp, #28]
   1342c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13430:	mov	r0, #0
   13434:	ldr	r1, [fp, #12]
   13438:	bic	r1, r1, #2
   1343c:	mov	r2, #2
   13440:	ldr	r3, [sp, #92]	; 0x5c
   13444:	tst	r3, #1
   13448:	movwne	r2, #4
   1344c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13450:	cmp	r3, #2
   13454:	movne	r2, r3
   13458:	str	r2, [sp]
   1345c:	str	r1, [sp, #4]
   13460:	str	r0, [sp, #8]
   13464:	ldr	r0, [sp, #80]	; 0x50
   13468:	str	r0, [sp, #12]
   1346c:	ldr	r0, [sp, #88]	; 0x58
   13470:	str	r0, [sp, #16]
   13474:	mov	r0, r5
   13478:	mov	r1, sl
   1347c:	mov	r2, ip
   13480:	mov	r3, lr
   13484:	bl	12518 <__assert_fail@plt+0x1144>
   13488:	mov	r8, r0
   1348c:	mov	r0, r8
   13490:	sub	sp, fp, #28
   13494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13498:	mov	r0, #5
   1349c:	str	r0, [sp]
   134a0:	ldr	r0, [fp, #12]
   134a4:	str	r0, [sp, #4]
   134a8:	ldr	r0, [fp, #16]
   134ac:	str	r0, [sp, #8]
   134b0:	ldr	r0, [sp, #80]	; 0x50
   134b4:	str	r0, [sp, #12]
   134b8:	ldr	r0, [sp, #88]	; 0x58
   134bc:	str	r0, [sp, #16]
   134c0:	mov	r0, r6
   134c4:	ldr	r1, [sp, #84]	; 0x54
   134c8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   134cc:	mov	r3, r9
   134d0:	b	13484 <__assert_fail@plt+0x20b0>
   134d4:	bl	113b0 <abort@plt>
   134d8:	mov	r3, r2
   134dc:	mov	r2, #0
   134e0:	b	134e4 <__assert_fail@plt+0x2110>
   134e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134e8:	add	fp, sp, #28
   134ec:	sub	sp, sp, #36	; 0x24
   134f0:	mov	r4, r2
   134f4:	str	r2, [sp, #24]
   134f8:	mov	r5, r1
   134fc:	mov	r6, r0
   13500:	str	r0, [sp, #20]
   13504:	movw	r8, #29072	; 0x7190
   13508:	movt	r8, #2
   1350c:	cmp	r3, #0
   13510:	movne	r8, r3
   13514:	bl	112c0 <__errno_location@plt>
   13518:	str	r0, [sp, #28]
   1351c:	ldm	r8, {r3, r9}
   13520:	ldr	r1, [r8, #40]	; 0x28
   13524:	ldr	r2, [r8, #44]	; 0x2c
   13528:	ldr	r7, [r0]
   1352c:	str	r7, [sp, #32]
   13530:	add	sl, r8, #8
   13534:	cmp	r4, #0
   13538:	orreq	r9, r9, #1
   1353c:	stm	sp, {r3, r9, sl}
   13540:	str	r1, [sp, #12]
   13544:	str	r2, [sp, #16]
   13548:	mov	r0, #0
   1354c:	mov	r1, #0
   13550:	mov	r2, r6
   13554:	mov	r3, r5
   13558:	mov	r7, r5
   1355c:	bl	12518 <__assert_fail@plt+0x1144>
   13560:	mov	r5, r0
   13564:	add	r4, r0, #1
   13568:	mov	r0, r4
   1356c:	bl	1479c <__assert_fail@plt+0x33c8>
   13570:	mov	r6, r0
   13574:	ldr	r0, [r8]
   13578:	ldr	r1, [r8, #40]	; 0x28
   1357c:	ldr	r2, [r8, #44]	; 0x2c
   13580:	stm	sp, {r0, r9, sl}
   13584:	str	r1, [sp, #12]
   13588:	str	r2, [sp, #16]
   1358c:	mov	r0, r6
   13590:	mov	r1, r4
   13594:	ldr	r2, [sp, #20]
   13598:	mov	r3, r7
   1359c:	bl	12518 <__assert_fail@plt+0x1144>
   135a0:	ldr	r0, [sp, #24]
   135a4:	ldr	r1, [sp, #32]
   135a8:	ldr	r2, [sp, #28]
   135ac:	str	r1, [r2]
   135b0:	cmp	r0, #0
   135b4:	strne	r5, [r0]
   135b8:	mov	r0, r6
   135bc:	sub	sp, fp, #28
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   135c8:	add	fp, sp, #24
   135cc:	movw	r8, #28960	; 0x7120
   135d0:	movt	r8, #2
   135d4:	ldr	r4, [r8]
   135d8:	movw	r5, #28964	; 0x7124
   135dc:	movt	r5, #2
   135e0:	ldr	r0, [r5]
   135e4:	cmp	r0, #2
   135e8:	blt	13614 <__assert_fail@plt+0x2240>
   135ec:	add	r7, r4, #12
   135f0:	mov	r6, #0
   135f4:	ldr	r0, [r7, r6, lsl #3]
   135f8:	bl	122b4 <__assert_fail@plt+0xee0>
   135fc:	add	r0, r6, #1
   13600:	ldr	r1, [r5]
   13604:	add	r2, r6, #2
   13608:	cmp	r2, r1
   1360c:	mov	r6, r0
   13610:	blt	135f4 <__assert_fail@plt+0x2220>
   13614:	ldr	r0, [r4, #4]
   13618:	movw	r9, #29120	; 0x71c0
   1361c:	movt	r9, #2
   13620:	cmp	r0, r9
   13624:	movw	r7, #28968	; 0x7128
   13628:	movt	r7, #2
   1362c:	beq	1363c <__assert_fail@plt+0x2268>
   13630:	bl	122b4 <__assert_fail@plt+0xee0>
   13634:	mov	r0, #256	; 0x100
   13638:	stm	r7, {r0, r9}
   1363c:	cmp	r4, r7
   13640:	beq	13650 <__assert_fail@plt+0x227c>
   13644:	mov	r0, r4
   13648:	bl	122b4 <__assert_fail@plt+0xee0>
   1364c:	str	r7, [r8]
   13650:	mov	r0, #1
   13654:	str	r0, [r5]
   13658:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1365c:	movw	r3, #29072	; 0x7190
   13660:	movt	r3, #2
   13664:	mvn	r2, #0
   13668:	b	1366c <__assert_fail@plt+0x2298>
   1366c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13670:	add	fp, sp, #28
   13674:	sub	sp, sp, #44	; 0x2c
   13678:	mov	r7, r3
   1367c:	str	r2, [sp, #36]	; 0x24
   13680:	str	r1, [sp, #32]
   13684:	mov	r5, r0
   13688:	bl	112c0 <__errno_location@plt>
   1368c:	cmp	r5, #0
   13690:	bmi	13800 <__assert_fail@plt+0x242c>
   13694:	cmn	r5, #-2147483647	; 0x80000001
   13698:	beq	13800 <__assert_fail@plt+0x242c>
   1369c:	movw	r4, #28960	; 0x7120
   136a0:	movt	r4, #2
   136a4:	ldr	r6, [r4]
   136a8:	str	r0, [sp, #28]
   136ac:	ldr	r0, [r0]
   136b0:	str	r0, [sp, #24]
   136b4:	movw	r8, #28964	; 0x7124
   136b8:	movt	r8, #2
   136bc:	ldr	r1, [r8]
   136c0:	cmp	r1, r5
   136c4:	ble	136d0 <__assert_fail@plt+0x22fc>
   136c8:	mov	sl, r6
   136cc:	b	1373c <__assert_fail@plt+0x2368>
   136d0:	str	r1, [fp, #-32]	; 0xffffffe0
   136d4:	mov	r0, #8
   136d8:	str	r0, [sp]
   136dc:	movw	r9, #28968	; 0x7128
   136e0:	movt	r9, #2
   136e4:	subs	r0, r6, r9
   136e8:	movne	r0, r6
   136ec:	sub	r1, r5, r1
   136f0:	add	r2, r1, #1
   136f4:	sub	r1, fp, #32
   136f8:	mvn	r3, #-2147483648	; 0x80000000
   136fc:	bl	14878 <__assert_fail@plt+0x34a4>
   13700:	mov	sl, r0
   13704:	str	r0, [r4]
   13708:	cmp	r6, r9
   1370c:	bne	13718 <__assert_fail@plt+0x2344>
   13710:	ldrd	r0, [r9]
   13714:	stm	sl, {r0, r1}
   13718:	ldr	r1, [r8]
   1371c:	add	r0, sl, r1, lsl #3
   13720:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13724:	sub	r1, r2, r1
   13728:	lsl	r2, r1, #3
   1372c:	mov	r1, #0
   13730:	bl	112e4 <memset@plt>
   13734:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13738:	str	r0, [r8]
   1373c:	mov	r9, sl
   13740:	ldr	r6, [r9, r5, lsl #3]!
   13744:	ldr	r4, [r9, #4]!
   13748:	ldm	r7, {r0, r1}
   1374c:	ldr	r2, [r7, #40]	; 0x28
   13750:	ldr	r3, [r7, #44]	; 0x2c
   13754:	orr	r8, r1, #1
   13758:	add	r1, r7, #8
   1375c:	stm	sp, {r0, r8}
   13760:	str	r1, [sp, #20]
   13764:	add	r0, sp, #8
   13768:	stm	r0, {r1, r2, r3}
   1376c:	mov	r0, r4
   13770:	mov	r1, r6
   13774:	ldr	r2, [sp, #32]
   13778:	ldr	r3, [sp, #36]	; 0x24
   1377c:	bl	12518 <__assert_fail@plt+0x1144>
   13780:	cmp	r6, r0
   13784:	bhi	137e8 <__assert_fail@plt+0x2414>
   13788:	add	r6, r0, #1
   1378c:	str	r6, [sl, r5, lsl #3]
   13790:	movw	r0, #29120	; 0x71c0
   13794:	movt	r0, #2
   13798:	cmp	r4, r0
   1379c:	beq	137a8 <__assert_fail@plt+0x23d4>
   137a0:	mov	r0, r4
   137a4:	bl	122b4 <__assert_fail@plt+0xee0>
   137a8:	mov	r0, r6
   137ac:	bl	1479c <__assert_fail@plt+0x33c8>
   137b0:	mov	r4, r0
   137b4:	str	r0, [r9]
   137b8:	ldr	r0, [r7]
   137bc:	ldr	r1, [r7, #40]	; 0x28
   137c0:	ldr	r2, [r7, #44]	; 0x2c
   137c4:	stm	sp, {r0, r8}
   137c8:	ldr	r0, [sp, #20]
   137cc:	add	r3, sp, #8
   137d0:	stm	r3, {r0, r1, r2}
   137d4:	mov	r0, r4
   137d8:	mov	r1, r6
   137dc:	ldr	r2, [sp, #32]
   137e0:	ldr	r3, [sp, #36]	; 0x24
   137e4:	bl	12518 <__assert_fail@plt+0x1144>
   137e8:	ldr	r0, [sp, #28]
   137ec:	ldr	r1, [sp, #24]
   137f0:	str	r1, [r0]
   137f4:	mov	r0, r4
   137f8:	sub	sp, fp, #28
   137fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13800:	bl	113b0 <abort@plt>
   13804:	movw	r3, #29072	; 0x7190
   13808:	movt	r3, #2
   1380c:	b	1366c <__assert_fail@plt+0x2298>
   13810:	mov	r1, r0
   13814:	mov	r0, #0
   13818:	b	1365c <__assert_fail@plt+0x2288>
   1381c:	mov	r2, r1
   13820:	mov	r1, r0
   13824:	mov	r0, #0
   13828:	b	13804 <__assert_fail@plt+0x2430>
   1382c:	push	{r4, r5, r6, sl, fp, lr}
   13830:	add	fp, sp, #16
   13834:	sub	sp, sp, #48	; 0x30
   13838:	mov	r4, r2
   1383c:	mov	r5, r0
   13840:	mov	r6, sp
   13844:	mov	r0, r6
   13848:	bl	13868 <__assert_fail@plt+0x2494>
   1384c:	mov	r0, r5
   13850:	mov	r1, r4
   13854:	mvn	r2, #0
   13858:	mov	r3, r6
   1385c:	bl	1366c <__assert_fail@plt+0x2298>
   13860:	sub	sp, fp, #16
   13864:	pop	{r4, r5, r6, sl, fp, pc}
   13868:	push	{fp, lr}
   1386c:	mov	fp, sp
   13870:	vmov.i32	q8, #0	; 0x00000000
   13874:	mov	r2, #32
   13878:	mov	r3, r0
   1387c:	vst1.32	{d16-d17}, [r3], r2
   13880:	vst1.32	{d16-d17}, [r3]
   13884:	add	r2, r0, #16
   13888:	vst1.32	{d16-d17}, [r2]
   1388c:	cmp	r1, #10
   13890:	strne	r1, [r0]
   13894:	popne	{fp, pc}
   13898:	bl	113b0 <abort@plt>
   1389c:	push	{r4, r5, r6, r7, fp, lr}
   138a0:	add	fp, sp, #16
   138a4:	sub	sp, sp, #48	; 0x30
   138a8:	mov	r4, r3
   138ac:	mov	r5, r2
   138b0:	mov	r6, r0
   138b4:	mov	r7, sp
   138b8:	mov	r0, r7
   138bc:	bl	13868 <__assert_fail@plt+0x2494>
   138c0:	mov	r0, r6
   138c4:	mov	r1, r5
   138c8:	mov	r2, r4
   138cc:	mov	r3, r7
   138d0:	bl	1366c <__assert_fail@plt+0x2298>
   138d4:	sub	sp, fp, #16
   138d8:	pop	{r4, r5, r6, r7, fp, pc}
   138dc:	mov	r2, r1
   138e0:	mov	r1, r0
   138e4:	mov	r0, #0
   138e8:	b	1382c <__assert_fail@plt+0x2458>
   138ec:	mov	r3, r2
   138f0:	mov	r2, r1
   138f4:	mov	r1, r0
   138f8:	mov	r0, #0
   138fc:	b	1389c <__assert_fail@plt+0x24c8>
   13900:	push	{r4, r5, r6, sl, fp, lr}
   13904:	add	fp, sp, #16
   13908:	sub	sp, sp, #48	; 0x30
   1390c:	mov	r4, r1
   13910:	mov	r5, r0
   13914:	movw	r0, #29072	; 0x7190
   13918:	movt	r0, #2
   1391c:	add	r1, r0, #16
   13920:	mov	r3, #32
   13924:	vld1.64	{d16-d17}, [r0], r3
   13928:	vld1.64	{d18-d19}, [r1]
   1392c:	mov	r6, sp
   13930:	add	r1, r6, #16
   13934:	vld1.64	{d20-d21}, [r0]
   13938:	vst1.64	{d18-d19}, [r1]
   1393c:	mov	r0, r6
   13940:	vst1.64	{d16-d17}, [r0], r3
   13944:	vst1.64	{d20-d21}, [r0]
   13948:	mov	r0, r6
   1394c:	mov	r1, r2
   13950:	mov	r2, #1
   13954:	bl	1240c <__assert_fail@plt+0x1038>
   13958:	mov	r0, #0
   1395c:	mov	r1, r5
   13960:	mov	r2, r4
   13964:	mov	r3, r6
   13968:	bl	1366c <__assert_fail@plt+0x2298>
   1396c:	sub	sp, fp, #16
   13970:	pop	{r4, r5, r6, sl, fp, pc}
   13974:	mov	r2, r1
   13978:	mvn	r1, #0
   1397c:	b	13900 <__assert_fail@plt+0x252c>
   13980:	mov	r1, #58	; 0x3a
   13984:	b	13974 <__assert_fail@plt+0x25a0>
   13988:	mov	r2, #58	; 0x3a
   1398c:	b	13900 <__assert_fail@plt+0x252c>
   13990:	push	{r4, r5, r6, sl, fp, lr}
   13994:	add	fp, sp, #16
   13998:	sub	sp, sp, #48	; 0x30
   1399c:	mov	r4, r2
   139a0:	mov	r5, r0
   139a4:	mov	r6, sp
   139a8:	mov	r0, r6
   139ac:	bl	13868 <__assert_fail@plt+0x2494>
   139b0:	mov	r0, r6
   139b4:	mov	r1, #58	; 0x3a
   139b8:	mov	r2, #1
   139bc:	bl	1240c <__assert_fail@plt+0x1038>
   139c0:	mov	r0, r5
   139c4:	mov	r1, r4
   139c8:	mvn	r2, #0
   139cc:	mov	r3, r6
   139d0:	bl	1366c <__assert_fail@plt+0x2298>
   139d4:	sub	sp, fp, #16
   139d8:	pop	{r4, r5, r6, sl, fp, pc}
   139dc:	push	{fp, lr}
   139e0:	mov	fp, sp
   139e4:	sub	sp, sp, #8
   139e8:	mvn	ip, #0
   139ec:	str	ip, [sp]
   139f0:	bl	139fc <__assert_fail@plt+0x2628>
   139f4:	mov	sp, fp
   139f8:	pop	{fp, pc}
   139fc:	push	{r4, r5, r6, r7, fp, lr}
   13a00:	add	fp, sp, #16
   13a04:	sub	sp, sp, #48	; 0x30
   13a08:	mov	r7, r3
   13a0c:	mov	r5, r0
   13a10:	movw	r0, #29072	; 0x7190
   13a14:	movt	r0, #2
   13a18:	add	r3, r0, #16
   13a1c:	mov	r4, #32
   13a20:	vld1.64	{d16-d17}, [r0], r4
   13a24:	vld1.64	{d18-d19}, [r3]
   13a28:	mov	r6, sp
   13a2c:	add	r3, r6, #16
   13a30:	vld1.64	{d20-d21}, [r0]
   13a34:	vst1.64	{d18-d19}, [r3]
   13a38:	mov	r0, r6
   13a3c:	vst1.64	{d16-d17}, [r0], r4
   13a40:	vst1.64	{d20-d21}, [r0]
   13a44:	mov	r0, r6
   13a48:	bl	12464 <__assert_fail@plt+0x1090>
   13a4c:	ldr	r2, [fp, #8]
   13a50:	mov	r0, r5
   13a54:	mov	r1, r7
   13a58:	mov	r3, r6
   13a5c:	bl	1366c <__assert_fail@plt+0x2298>
   13a60:	sub	sp, fp, #16
   13a64:	pop	{r4, r5, r6, r7, fp, pc}
   13a68:	mov	r3, r2
   13a6c:	mov	r2, r1
   13a70:	mov	r1, r0
   13a74:	mov	r0, #0
   13a78:	b	139dc <__assert_fail@plt+0x2608>
   13a7c:	push	{fp, lr}
   13a80:	mov	fp, sp
   13a84:	sub	sp, sp, #8
   13a88:	mov	ip, r2
   13a8c:	mov	r2, r1
   13a90:	mov	r1, r0
   13a94:	str	r3, [sp]
   13a98:	mov	r0, #0
   13a9c:	mov	r3, ip
   13aa0:	bl	139fc <__assert_fail@plt+0x2628>
   13aa4:	mov	sp, fp
   13aa8:	pop	{fp, pc}
   13aac:	movw	r3, #28976	; 0x7130
   13ab0:	movt	r3, #2
   13ab4:	b	1366c <__assert_fail@plt+0x2298>
   13ab8:	mov	r2, r1
   13abc:	mov	r1, r0
   13ac0:	mov	r0, #0
   13ac4:	b	13aac <__assert_fail@plt+0x26d8>
   13ac8:	mvn	r2, #0
   13acc:	b	13aac <__assert_fail@plt+0x26d8>
   13ad0:	mov	r1, r0
   13ad4:	mov	r0, #0
   13ad8:	b	13ac8 <__assert_fail@plt+0x26f4>
   13adc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ae0:	add	fp, sp, #24
   13ae4:	sub	sp, sp, #16
   13ae8:	mov	r4, r1
   13aec:	mov	r5, r0
   13af0:	mov	r7, #0
   13af4:	mov	r0, #0
   13af8:	mov	r1, r5
   13afc:	mov	r2, #5
   13b00:	bl	1117c <dcgettext@plt>
   13b04:	cmp	r0, r5
   13b08:	beq	13b14 <__assert_fail@plt+0x2740>
   13b0c:	sub	sp, fp, #24
   13b10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b14:	bl	15c7c <__assert_fail@plt+0x48a8>
   13b18:	mov	r6, r0
   13b1c:	mov	r8, #56	; 0x38
   13b20:	mov	r0, #45	; 0x2d
   13b24:	stm	sp, {r0, r8}
   13b28:	str	r7, [sp, #8]
   13b2c:	str	r7, [sp, #12]
   13b30:	mov	r0, r6
   13b34:	mov	r1, #85	; 0x55
   13b38:	mov	r2, #84	; 0x54
   13b3c:	mov	r3, #70	; 0x46
   13b40:	bl	13bd8 <__assert_fail@plt+0x2804>
   13b44:	cmp	r0, #0
   13b48:	beq	13b64 <__assert_fail@plt+0x2790>
   13b4c:	ldrb	r1, [r5]
   13b50:	movw	r2, #26856	; 0x68e8
   13b54:	movt	r2, #1
   13b58:	movw	r0, #26860	; 0x68ec
   13b5c:	movt	r0, #1
   13b60:	b	13ba8 <__assert_fail@plt+0x27d4>
   13b64:	mov	r0, #48	; 0x30
   13b68:	mov	r1, #51	; 0x33
   13b6c:	str	r8, [sp]
   13b70:	stmib	sp, {r0, r1}
   13b74:	str	r0, [sp, #12]
   13b78:	mov	r0, r6
   13b7c:	mov	r1, #71	; 0x47
   13b80:	mov	r2, #66	; 0x42
   13b84:	mov	r3, #49	; 0x31
   13b88:	bl	13bd8 <__assert_fail@plt+0x2804>
   13b8c:	cmp	r0, #0
   13b90:	beq	13bb8 <__assert_fail@plt+0x27e4>
   13b94:	ldrb	r1, [r5]
   13b98:	movw	r2, #26864	; 0x68f0
   13b9c:	movt	r2, #1
   13ba0:	movw	r0, #26868	; 0x68f4
   13ba4:	movt	r0, #1
   13ba8:	cmp	r1, #96	; 0x60
   13bac:	moveq	r0, r2
   13bb0:	sub	sp, fp, #24
   13bb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bb8:	movw	r1, #26850	; 0x68e2
   13bbc:	movt	r1, #1
   13bc0:	movw	r0, #26854	; 0x68e6
   13bc4:	movt	r0, #1
   13bc8:	cmp	r4, #9
   13bcc:	moveq	r0, r1
   13bd0:	sub	sp, fp, #24
   13bd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bd8:	push	{r4, r5, r6, r7, fp, lr}
   13bdc:	add	fp, sp, #16
   13be0:	sub	sp, sp, #16
   13be4:	mov	r4, r3
   13be8:	mov	r5, r2
   13bec:	mov	r7, r1
   13bf0:	mov	r6, r0
   13bf4:	mov	r0, r1
   13bf8:	bl	1592c <__assert_fail@plt+0x4558>
   13bfc:	ldrb	r1, [r6]
   13c00:	cmp	r0, #0
   13c04:	andne	r1, r1, #223	; 0xdf
   13c08:	mov	r0, #0
   13c0c:	cmp	r1, r7
   13c10:	bne	13c48 <__assert_fail@plt+0x2874>
   13c14:	cmp	r7, #0
   13c18:	beq	13c50 <__assert_fail@plt+0x287c>
   13c1c:	ldr	r0, [fp, #20]
   13c20:	ldr	r1, [fp, #16]
   13c24:	ldr	r2, [fp, #12]
   13c28:	ldr	r3, [fp, #8]
   13c2c:	str	r2, [sp]
   13c30:	str	r1, [sp, #4]
   13c34:	str	r0, [sp, #8]
   13c38:	mov	r0, r6
   13c3c:	mov	r1, r5
   13c40:	mov	r2, r4
   13c44:	bl	13c5c <__assert_fail@plt+0x2888>
   13c48:	sub	sp, fp, #16
   13c4c:	pop	{r4, r5, r6, r7, fp, pc}
   13c50:	mov	r0, #1
   13c54:	sub	sp, fp, #16
   13c58:	pop	{r4, r5, r6, r7, fp, pc}
   13c5c:	push	{r4, r5, r6, r7, fp, lr}
   13c60:	add	fp, sp, #16
   13c64:	sub	sp, sp, #8
   13c68:	mov	r4, r3
   13c6c:	mov	r5, r2
   13c70:	mov	r7, r1
   13c74:	mov	r6, r0
   13c78:	mov	r0, r1
   13c7c:	bl	1592c <__assert_fail@plt+0x4558>
   13c80:	ldrb	r1, [r6, #1]
   13c84:	cmp	r0, #0
   13c88:	andne	r1, r1, #223	; 0xdf
   13c8c:	mov	r0, #0
   13c90:	cmp	r1, r7
   13c94:	bne	13cc4 <__assert_fail@plt+0x28f0>
   13c98:	cmp	r7, #0
   13c9c:	beq	13ccc <__assert_fail@plt+0x28f8>
   13ca0:	ldr	r0, [fp, #16]
   13ca4:	ldr	r1, [fp, #12]
   13ca8:	ldr	r3, [fp, #8]
   13cac:	str	r1, [sp]
   13cb0:	str	r0, [sp, #4]
   13cb4:	mov	r0, r6
   13cb8:	mov	r1, r5
   13cbc:	mov	r2, r4
   13cc0:	bl	13cd8 <__assert_fail@plt+0x2904>
   13cc4:	sub	sp, fp, #16
   13cc8:	pop	{r4, r5, r6, r7, fp, pc}
   13ccc:	mov	r0, #1
   13cd0:	sub	sp, fp, #16
   13cd4:	pop	{r4, r5, r6, r7, fp, pc}
   13cd8:	push	{r4, r5, r6, r7, fp, lr}
   13cdc:	add	fp, sp, #16
   13ce0:	sub	sp, sp, #8
   13ce4:	mov	r4, r3
   13ce8:	mov	r5, r2
   13cec:	mov	r7, r1
   13cf0:	mov	r6, r0
   13cf4:	mov	r0, r1
   13cf8:	bl	1592c <__assert_fail@plt+0x4558>
   13cfc:	ldrb	r1, [r6, #2]
   13d00:	cmp	r0, #0
   13d04:	andne	r1, r1, #223	; 0xdf
   13d08:	mov	r0, #0
   13d0c:	cmp	r1, r7
   13d10:	bne	13d38 <__assert_fail@plt+0x2964>
   13d14:	cmp	r7, #0
   13d18:	beq	13d40 <__assert_fail@plt+0x296c>
   13d1c:	ldr	r0, [fp, #12]
   13d20:	ldr	r3, [fp, #8]
   13d24:	str	r0, [sp]
   13d28:	mov	r0, r6
   13d2c:	mov	r1, r5
   13d30:	mov	r2, r4
   13d34:	bl	13d4c <__assert_fail@plt+0x2978>
   13d38:	sub	sp, fp, #16
   13d3c:	pop	{r4, r5, r6, r7, fp, pc}
   13d40:	mov	r0, #1
   13d44:	sub	sp, fp, #16
   13d48:	pop	{r4, r5, r6, r7, fp, pc}
   13d4c:	push	{r4, r5, r6, r7, fp, lr}
   13d50:	add	fp, sp, #16
   13d54:	mov	r4, r3
   13d58:	mov	r5, r2
   13d5c:	mov	r7, r1
   13d60:	mov	r6, r0
   13d64:	mov	r0, r1
   13d68:	bl	1592c <__assert_fail@plt+0x4558>
   13d6c:	ldrb	r1, [r6, #3]
   13d70:	ldr	r3, [fp, #8]
   13d74:	cmp	r0, #0
   13d78:	andne	r1, r1, #223	; 0xdf
   13d7c:	mov	r0, #0
   13d80:	cmp	r1, r7
   13d84:	bne	13da8 <__assert_fail@plt+0x29d4>
   13d88:	cmp	r7, #0
   13d8c:	beq	13da4 <__assert_fail@plt+0x29d0>
   13d90:	mov	r0, r6
   13d94:	mov	r1, r5
   13d98:	mov	r2, r4
   13d9c:	pop	{r4, r5, r6, r7, fp, lr}
   13da0:	b	13dac <__assert_fail@plt+0x29d8>
   13da4:	mov	r0, #1
   13da8:	pop	{r4, r5, r6, r7, fp, pc}
   13dac:	push	{r4, r5, r6, r7, fp, lr}
   13db0:	add	fp, sp, #16
   13db4:	mov	r4, r3
   13db8:	mov	r5, r2
   13dbc:	mov	r7, r1
   13dc0:	mov	r6, r0
   13dc4:	mov	r0, r1
   13dc8:	bl	1592c <__assert_fail@plt+0x4558>
   13dcc:	ldrb	r1, [r6, #4]
   13dd0:	cmp	r0, #0
   13dd4:	andne	r1, r1, #223	; 0xdf
   13dd8:	mov	r0, #0
   13ddc:	cmp	r1, r7
   13de0:	bne	13e04 <__assert_fail@plt+0x2a30>
   13de4:	cmp	r7, #0
   13de8:	beq	13e00 <__assert_fail@plt+0x2a2c>
   13dec:	mov	r0, r6
   13df0:	mov	r1, r5
   13df4:	mov	r2, r4
   13df8:	pop	{r4, r5, r6, r7, fp, lr}
   13dfc:	b	13e08 <__assert_fail@plt+0x2a34>
   13e00:	mov	r0, #1
   13e04:	pop	{r4, r5, r6, r7, fp, pc}
   13e08:	push	{r4, r5, r6, sl, fp, lr}
   13e0c:	add	fp, sp, #16
   13e10:	mov	r4, r2
   13e14:	mov	r6, r1
   13e18:	mov	r5, r0
   13e1c:	mov	r0, r1
   13e20:	bl	1592c <__assert_fail@plt+0x4558>
   13e24:	ldrb	r1, [r5, #5]
   13e28:	cmp	r0, #0
   13e2c:	andne	r1, r1, #223	; 0xdf
   13e30:	mov	r0, #0
   13e34:	cmp	r1, r6
   13e38:	bne	13e58 <__assert_fail@plt+0x2a84>
   13e3c:	cmp	r6, #0
   13e40:	beq	13e54 <__assert_fail@plt+0x2a80>
   13e44:	mov	r0, r5
   13e48:	mov	r1, r4
   13e4c:	pop	{r4, r5, r6, sl, fp, lr}
   13e50:	b	13e5c <__assert_fail@plt+0x2a88>
   13e54:	mov	r0, #1
   13e58:	pop	{r4, r5, r6, sl, fp, pc}
   13e5c:	push	{r4, r5, fp, lr}
   13e60:	add	fp, sp, #8
   13e64:	mov	r5, r1
   13e68:	mov	r4, r0
   13e6c:	mov	r0, r1
   13e70:	bl	1592c <__assert_fail@plt+0x4558>
   13e74:	ldrb	r1, [r4, #6]
   13e78:	cmp	r0, #0
   13e7c:	andne	r1, r1, #223	; 0xdf
   13e80:	mov	r0, #0
   13e84:	cmp	r1, r5
   13e88:	popne	{r4, r5, fp, pc}
   13e8c:	cmp	r5, #0
   13e90:	beq	13ea0 <__assert_fail@plt+0x2acc>
   13e94:	mov	r0, r4
   13e98:	pop	{r4, r5, fp, lr}
   13e9c:	b	13ea8 <__assert_fail@plt+0x2ad4>
   13ea0:	mov	r0, #1
   13ea4:	pop	{r4, r5, fp, pc}
   13ea8:	push	{r4, sl, fp, lr}
   13eac:	add	fp, sp, #8
   13eb0:	mov	r4, r0
   13eb4:	mov	r0, #0
   13eb8:	bl	1592c <__assert_fail@plt+0x4558>
   13ebc:	ldrb	r1, [r4, #7]
   13ec0:	cmp	r0, #0
   13ec4:	beq	13ed8 <__assert_fail@plt+0x2b04>
   13ec8:	tst	r1, #223	; 0xdf
   13ecc:	bne	13ee0 <__assert_fail@plt+0x2b0c>
   13ed0:	mov	r0, #1
   13ed4:	pop	{r4, sl, fp, pc}
   13ed8:	cmp	r1, #0
   13edc:	beq	13ed0 <__assert_fail@plt+0x2afc>
   13ee0:	mov	r0, #0
   13ee4:	pop	{r4, sl, fp, pc}
   13ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eec:	add	fp, sp, #28
   13ef0:	sub	sp, sp, #12
   13ef4:	mov	r9, r3
   13ef8:	mov	r4, r2
   13efc:	mov	r8, r1
   13f00:	mov	r7, r0
   13f04:	ldr	sl, [fp, #8]
   13f08:	cmp	r2, #0
   13f0c:	beq	13f24 <__assert_fail@plt+0x2b50>
   13f10:	mov	r0, r7
   13f14:	mov	r1, #58	; 0x3a
   13f18:	bl	112b4 <strchr@plt>
   13f1c:	mov	r6, r0
   13f20:	b	13f28 <__assert_fail@plt+0x2b54>
   13f24:	mov	r6, #0
   13f28:	stm	sp, {r9, sl}
   13f2c:	mov	r0, r7
   13f30:	mov	r1, r6
   13f34:	mov	r2, r8
   13f38:	mov	r3, r4
   13f3c:	bl	13fa4 <__assert_fail@plt+0x2bd0>
   13f40:	mov	r5, r0
   13f44:	cmp	r4, #0
   13f48:	beq	13f98 <__assert_fail@plt+0x2bc4>
   13f4c:	cmp	r6, #0
   13f50:	bne	13f98 <__assert_fail@plt+0x2bc4>
   13f54:	cmp	r5, #0
   13f58:	beq	13f98 <__assert_fail@plt+0x2bc4>
   13f5c:	mov	r0, r7
   13f60:	mov	r1, #46	; 0x2e
   13f64:	bl	112b4 <strchr@plt>
   13f68:	cmp	r0, #0
   13f6c:	beq	13f98 <__assert_fail@plt+0x2bc4>
   13f70:	mov	r1, r0
   13f74:	stm	sp, {r9, sl}
   13f78:	mov	r0, r7
   13f7c:	mov	r2, r8
   13f80:	mov	r3, r4
   13f84:	bl	13fa4 <__assert_fail@plt+0x2bd0>
   13f88:	cmp	r0, #0
   13f8c:	movne	r0, r5
   13f90:	sub	sp, fp, #28
   13f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f98:	mov	r0, r5
   13f9c:	sub	sp, fp, #28
   13fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fa8:	add	fp, sp, #28
   13fac:	sub	sp, sp, #36	; 0x24
   13fb0:	mov	sl, r3
   13fb4:	mov	r9, r2
   13fb8:	mov	r4, r1
   13fbc:	ldr	r3, [r2]
   13fc0:	ldr	r2, [fp, #8]
   13fc4:	cmp	sl, #0
   13fc8:	beq	13fd4 <__assert_fail@plt+0x2c00>
   13fcc:	ldr	r1, [sl]
   13fd0:	b	13fd8 <__assert_fail@plt+0x2c04>
   13fd4:	mvn	r1, #0
   13fd8:	str	r1, [sp, #8]
   13fdc:	ldr	r8, [fp, #12]
   13fe0:	cmp	r2, #0
   13fe4:	movne	r1, #0
   13fe8:	strne	r1, [r2]
   13fec:	cmp	r8, #0
   13ff0:	movne	r1, #0
   13ff4:	strne	r1, [r8]
   13ff8:	cmp	r4, #0
   13ffc:	str	r3, [sp, #4]
   14000:	beq	14034 <__assert_fail@plt+0x2c60>
   14004:	subs	r5, r4, r0
   14008:	beq	140c4 <__assert_fail@plt+0x2cf0>
   1400c:	add	r1, r5, #1
   14010:	bl	14a70 <__assert_fail@plt+0x369c>
   14014:	mov	r7, r0
   14018:	mov	r0, #0
   1401c:	strb	r0, [r7, r5]
   14020:	mov	r6, r4
   14024:	ldrb	r0, [r6, #1]!
   14028:	cmp	r0, #0
   1402c:	moveq	r6, r0
   14030:	b	1404c <__assert_fail@plt+0x2c78>
   14034:	ldrb	r1, [r0]
   14038:	cmp	r1, #0
   1403c:	beq	141e0 <__assert_fail@plt+0x2e0c>
   14040:	bl	14ac8 <__assert_fail@plt+0x36f4>
   14044:	mov	r7, r0
   14048:	mov	r6, #0
   1404c:	ldrb	r0, [r7]
   14050:	cmp	r0, #43	; 0x2b
   14054:	beq	140a4 <__assert_fail@plt+0x2cd0>
   14058:	mov	r0, r7
   1405c:	bl	11110 <getpwnam@plt>
   14060:	cmp	r0, #0
   14064:	beq	140a4 <__assert_fail@plt+0x2cd0>
   14068:	ldr	r1, [r0, #8]
   1406c:	str	r1, [sp, #4]
   14070:	mov	r5, #0
   14074:	cmp	r4, #0
   14078:	beq	141ec <__assert_fail@plt+0x2e18>
   1407c:	cmp	r6, #0
   14080:	bne	141ec <__assert_fail@plt+0x2e18>
   14084:	ldr	r4, [r0, #12]
   14088:	mov	r0, r4
   1408c:	bl	113bc <getgrgid@plt>
   14090:	cmp	r0, #0
   14094:	str	r4, [sp, #8]
   14098:	beq	141f4 <__assert_fail@plt+0x2e20>
   1409c:	ldr	r0, [r0]
   140a0:	b	14204 <__assert_fail@plt+0x2e30>
   140a4:	cmp	r4, #0
   140a8:	beq	14184 <__assert_fail@plt+0x2db0>
   140ac:	cmp	r6, #0
   140b0:	bne	14184 <__assert_fail@plt+0x2db0>
   140b4:	movw	r5, #26983	; 0x6967
   140b8:	movt	r5, #1
   140bc:	mov	r4, #0
   140c0:	b	14210 <__assert_fail@plt+0x2e3c>
   140c4:	ldrb	r0, [r4, #1]!
   140c8:	cmp	r0, #0
   140cc:	moveq	r4, r0
   140d0:	mov	r7, #0
   140d4:	mov	r6, r4
   140d8:	mov	r4, #0
   140dc:	mov	r5, #0
   140e0:	cmp	r6, #0
   140e4:	beq	1421c <__assert_fail@plt+0x2e48>
   140e8:	cmp	r5, #0
   140ec:	bne	1421c <__assert_fail@plt+0x2e48>
   140f0:	ldrb	r0, [r6]
   140f4:	cmp	r0, #43	; 0x2b
   140f8:	beq	1411c <__assert_fail@plt+0x2d48>
   140fc:	mov	r0, r6
   14100:	bl	113c8 <getgrnam@plt>
   14104:	cmp	r0, #0
   14108:	beq	1411c <__assert_fail@plt+0x2d48>
   1410c:	ldr	r0, [r0, #8]
   14110:	str	r0, [sp, #8]
   14114:	mov	r5, #0
   14118:	b	14170 <__assert_fail@plt+0x2d9c>
   1411c:	movw	r0, #25356	; 0x630c
   14120:	movt	r0, #1
   14124:	str	r0, [sp]
   14128:	add	r3, sp, #12
   1412c:	mov	r0, r6
   14130:	mov	r1, #0
   14134:	mov	r2, #10
   14138:	bl	14b60 <__assert_fail@plt+0x378c>
   1413c:	clz	r0, r0
   14140:	lsr	r0, r0, #5
   14144:	ldr	r1, [sp, #12]
   14148:	mvn	r2, #0
   1414c:	subs	r2, r1, r2
   14150:	movwne	r2, #1
   14154:	ands	r0, r0, r2
   14158:	ldr	r0, [sp, #8]
   1415c:	movne	r0, r1
   14160:	str	r0, [sp, #8]
   14164:	movw	r5, #26969	; 0x6959
   14168:	movt	r5, #1
   1416c:	movwne	r5, #0
   14170:	bl	110ec <endgrent@plt>
   14174:	mov	r0, r6
   14178:	bl	14ac8 <__assert_fail@plt+0x36f4>
   1417c:	mov	r4, r0
   14180:	b	1421c <__assert_fail@plt+0x2e48>
   14184:	movw	r0, #25356	; 0x630c
   14188:	movt	r0, #1
   1418c:	str	r0, [sp]
   14190:	mov	r4, #0
   14194:	add	r3, sp, #12
   14198:	mov	r0, r7
   1419c:	mov	r1, #0
   141a0:	mov	r2, #10
   141a4:	bl	14b60 <__assert_fail@plt+0x378c>
   141a8:	clz	r0, r0
   141ac:	lsr	r0, r0, #5
   141b0:	ldr	r1, [sp, #12]
   141b4:	mvn	r2, #0
   141b8:	subs	r2, r1, r2
   141bc:	movwne	r2, #1
   141c0:	ands	r0, r0, r2
   141c4:	ldr	r0, [sp, #4]
   141c8:	movne	r0, r1
   141cc:	str	r0, [sp, #4]
   141d0:	movw	r5, #26956	; 0x694c
   141d4:	movt	r5, #1
   141d8:	movwne	r5, #0
   141dc:	b	14210 <__assert_fail@plt+0x2e3c>
   141e0:	mov	r4, #0
   141e4:	mov	r7, #0
   141e8:	b	14228 <__assert_fail@plt+0x2e54>
   141ec:	mov	r4, #0
   141f0:	b	14210 <__assert_fail@plt+0x2e3c>
   141f4:	add	r2, sp, #12
   141f8:	mov	r0, r4
   141fc:	mov	r1, #0
   14200:	bl	15c20 <__assert_fail@plt+0x484c>
   14204:	bl	14ac8 <__assert_fail@plt+0x36f4>
   14208:	mov	r4, r0
   1420c:	bl	110ec <endgrent@plt>
   14210:	bl	11350 <endpwent@plt>
   14214:	cmp	r6, #0
   14218:	bne	140e8 <__assert_fail@plt+0x2d14>
   1421c:	mov	r6, #0
   14220:	cmp	r5, #0
   14224:	bne	14264 <__assert_fail@plt+0x2e90>
   14228:	ldr	r0, [sp, #4]
   1422c:	str	r0, [r9]
   14230:	cmp	sl, #0
   14234:	ldrne	r0, [sp, #8]
   14238:	strne	r0, [sl]
   1423c:	ldr	r0, [fp, #8]
   14240:	cmp	r0, #0
   14244:	strne	r7, [r0]
   14248:	movne	r7, #0
   1424c:	mov	r6, #1
   14250:	cmp	r8, #0
   14254:	moveq	r5, #0
   14258:	strne	r4, [r8]
   1425c:	movne	r5, #0
   14260:	movne	r4, #0
   14264:	mov	r0, r7
   14268:	bl	122b4 <__assert_fail@plt+0xee0>
   1426c:	mov	r0, r4
   14270:	bl	122b4 <__assert_fail@plt+0xee0>
   14274:	mov	r0, #0
   14278:	cmp	r6, #0
   1427c:	bne	14290 <__assert_fail@plt+0x2ebc>
   14280:	mov	r0, #0
   14284:	mov	r1, r5
   14288:	mov	r2, #5
   1428c:	bl	1117c <dcgettext@plt>
   14290:	sub	sp, fp, #28
   14294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14298:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1429c:	add	fp, sp, #24
   142a0:	sub	sp, sp, #32
   142a4:	mov	r4, r2
   142a8:	mov	r8, r0
   142ac:	ldr	r6, [fp, #12]
   142b0:	ldr	r7, [fp, #8]
   142b4:	cmp	r1, #0
   142b8:	beq	142e0 <__assert_fail@plt+0x2f0c>
   142bc:	mov	r5, r1
   142c0:	str	r4, [sp]
   142c4:	str	r3, [sp, #4]
   142c8:	movw	r2, #26996	; 0x6974
   142cc:	movt	r2, #1
   142d0:	mov	r0, r8
   142d4:	mov	r1, #1
   142d8:	mov	r3, r5
   142dc:	b	142f8 <__assert_fail@plt+0x2f24>
   142e0:	str	r3, [sp]
   142e4:	movw	r2, #27008	; 0x6980
   142e8:	movt	r2, #1
   142ec:	mov	r0, r8
   142f0:	mov	r1, #1
   142f4:	mov	r3, r4
   142f8:	bl	11314 <__fprintf_chk@plt>
   142fc:	movw	r1, #27015	; 0x6987
   14300:	movt	r1, #1
   14304:	mov	r0, #0
   14308:	mov	r2, #5
   1430c:	bl	1117c <dcgettext@plt>
   14310:	mov	r3, r0
   14314:	movw	r0, #2022	; 0x7e6
   14318:	str	r0, [sp]
   1431c:	movw	r2, #27733	; 0x6c55
   14320:	movt	r2, #1
   14324:	mov	r0, r8
   14328:	mov	r1, #1
   1432c:	bl	11314 <__fprintf_chk@plt>
   14330:	movw	r4, #25355	; 0x630b
   14334:	movt	r4, #1
   14338:	mov	r0, r4
   1433c:	mov	r1, r8
   14340:	bl	110f8 <fputs_unlocked@plt>
   14344:	movw	r1, #27019	; 0x698b
   14348:	movt	r1, #1
   1434c:	mov	r0, #0
   14350:	mov	r2, #5
   14354:	bl	1117c <dcgettext@plt>
   14358:	mov	r2, r0
   1435c:	movw	r3, #27190	; 0x6a36
   14360:	movt	r3, #1
   14364:	mov	r0, r8
   14368:	mov	r1, #1
   1436c:	bl	11314 <__fprintf_chk@plt>
   14370:	mov	r0, r4
   14374:	mov	r1, r8
   14378:	bl	110f8 <fputs_unlocked@plt>
   1437c:	cmp	r6, #9
   14380:	bhi	143bc <__assert_fail@plt+0x2fe8>
   14384:	add	r0, pc, #0
   14388:	ldr	pc, [r0, r6, lsl #2]
   1438c:			; <UNDEFINED> instruction: 0x000143b4
   14390:	andeq	r4, r1, r8, asr #7
   14394:	strdeq	r4, [r1], -r8
   14398:	andeq	r4, r1, r0, lsr #8
   1439c:	andeq	r4, r1, r8, asr #8
   143a0:	andeq	r4, r1, r0, ror r4
   143a4:	muleq	r1, r8, r4
   143a8:	ldrdeq	r4, [r1], -r0
   143ac:	andeq	r4, r1, r0, ror r5
   143b0:	andeq	r4, r1, r8, lsl r5
   143b4:	sub	sp, fp, #24
   143b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143bc:	movw	r1, #27543	; 0x6b97
   143c0:	movt	r1, #1
   143c4:	b	14520 <__assert_fail@plt+0x314c>
   143c8:	movw	r1, #27224	; 0x6a58
   143cc:	movt	r1, #1
   143d0:	mov	r0, #0
   143d4:	mov	r2, #5
   143d8:	bl	1117c <dcgettext@plt>
   143dc:	mov	r2, r0
   143e0:	ldr	r3, [r7]
   143e4:	mov	r0, r8
   143e8:	mov	r1, #1
   143ec:	sub	sp, fp, #24
   143f0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   143f4:	b	11314 <__fprintf_chk@plt>
   143f8:	movw	r1, #27240	; 0x6a68
   143fc:	movt	r1, #1
   14400:	mov	r0, #0
   14404:	mov	r2, #5
   14408:	bl	1117c <dcgettext@plt>
   1440c:	mov	r2, r0
   14410:	ldr	r3, [r7]
   14414:	ldr	r0, [r7, #4]
   14418:	str	r0, [sp]
   1441c:	b	1450c <__assert_fail@plt+0x3138>
   14420:	movw	r1, #27263	; 0x6a7f
   14424:	movt	r1, #1
   14428:	mov	r0, #0
   1442c:	mov	r2, #5
   14430:	bl	1117c <dcgettext@plt>
   14434:	mov	r2, r0
   14438:	ldr	r3, [r7]
   1443c:	ldmib	r7, {r0, r1}
   14440:	stm	sp, {r0, r1}
   14444:	b	1450c <__assert_fail@plt+0x3138>
   14448:	movw	r1, #27291	; 0x6a9b
   1444c:	movt	r1, #1
   14450:	mov	r0, #0
   14454:	mov	r2, #5
   14458:	bl	1117c <dcgettext@plt>
   1445c:	mov	r2, r0
   14460:	ldr	r3, [r7]
   14464:	ldmib	r7, {r0, r1, r7}
   14468:	stm	sp, {r0, r1, r7}
   1446c:	b	1450c <__assert_fail@plt+0x3138>
   14470:	movw	r1, #27323	; 0x6abb
   14474:	movt	r1, #1
   14478:	mov	r0, #0
   1447c:	mov	r2, #5
   14480:	bl	1117c <dcgettext@plt>
   14484:	mov	r2, r0
   14488:	ldr	r3, [r7]
   1448c:	ldmib	r7, {r0, r1, r6, r7}
   14490:	stm	sp, {r0, r1, r6, r7}
   14494:	b	1450c <__assert_fail@plt+0x3138>
   14498:	movw	r1, #27359	; 0x6adf
   1449c:	movt	r1, #1
   144a0:	mov	r0, #0
   144a4:	mov	r2, #5
   144a8:	bl	1117c <dcgettext@plt>
   144ac:	mov	r2, r0
   144b0:	ldr	r3, [r7]
   144b4:	ldmib	r7, {r0, r1, r6}
   144b8:	ldr	r5, [r7, #16]
   144bc:	ldr	r7, [r7, #20]
   144c0:	stm	sp, {r0, r1, r6}
   144c4:	str	r5, [sp, #12]
   144c8:	str	r7, [sp, #16]
   144cc:	b	1450c <__assert_fail@plt+0x3138>
   144d0:	movw	r1, #27399	; 0x6b07
   144d4:	movt	r1, #1
   144d8:	mov	r0, #0
   144dc:	mov	r2, #5
   144e0:	bl	1117c <dcgettext@plt>
   144e4:	mov	r2, r0
   144e8:	ldr	r3, [r7]
   144ec:	ldmib	r7, {r0, r1, r6}
   144f0:	ldr	r5, [r7, #16]
   144f4:	ldr	r4, [r7, #20]
   144f8:	ldr	r7, [r7, #24]
   144fc:	stm	sp, {r0, r1, r6}
   14500:	str	r5, [sp, #12]
   14504:	str	r4, [sp, #16]
   14508:	str	r7, [sp, #20]
   1450c:	mov	r0, r8
   14510:	mov	r1, #1
   14514:	b	145c0 <__assert_fail@plt+0x31ec>
   14518:	movw	r1, #27491	; 0x6b63
   1451c:	movt	r1, #1
   14520:	mov	r0, #0
   14524:	mov	r2, #5
   14528:	bl	1117c <dcgettext@plt>
   1452c:	mov	ip, r0
   14530:	ldr	r3, [r7]
   14534:	ldr	r0, [r7, #4]
   14538:	ldr	r1, [r7, #8]
   1453c:	ldr	r6, [r7, #12]
   14540:	ldr	r5, [r7, #16]
   14544:	ldr	r4, [r7, #20]
   14548:	ldr	r2, [r7, #24]
   1454c:	ldr	lr, [r7, #28]
   14550:	ldr	r7, [r7, #32]
   14554:	stm	sp, {r0, r1, r6}
   14558:	str	r5, [sp, #12]
   1455c:	str	r4, [sp, #16]
   14560:	str	r2, [sp, #20]
   14564:	str	lr, [sp, #24]
   14568:	str	r7, [sp, #28]
   1456c:	b	145b4 <__assert_fail@plt+0x31e0>
   14570:	movw	r1, #27443	; 0x6b33
   14574:	movt	r1, #1
   14578:	mov	r0, #0
   1457c:	mov	r2, #5
   14580:	bl	1117c <dcgettext@plt>
   14584:	mov	ip, r0
   14588:	ldr	r3, [r7]
   1458c:	ldmib	r7, {r0, r1, r6}
   14590:	ldr	r5, [r7, #16]
   14594:	ldr	r4, [r7, #20]
   14598:	ldr	r2, [r7, #24]
   1459c:	ldr	r7, [r7, #28]
   145a0:	stm	sp, {r0, r1, r6}
   145a4:	str	r5, [sp, #12]
   145a8:	str	r4, [sp, #16]
   145ac:	str	r2, [sp, #20]
   145b0:	str	r7, [sp, #24]
   145b4:	mov	r0, r8
   145b8:	mov	r1, #1
   145bc:	mov	r2, ip
   145c0:	bl	11314 <__fprintf_chk@plt>
   145c4:	sub	sp, fp, #24
   145c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145cc:	push	{r4, sl, fp, lr}
   145d0:	add	fp, sp, #8
   145d4:	sub	sp, sp, #8
   145d8:	mov	lr, #0
   145dc:	ldr	ip, [fp, #8]
   145e0:	ldr	r4, [ip, lr, lsl #2]
   145e4:	add	lr, lr, #1
   145e8:	cmp	r4, #0
   145ec:	bne	145e0 <__assert_fail@plt+0x320c>
   145f0:	sub	r4, lr, #1
   145f4:	str	ip, [sp]
   145f8:	str	r4, [sp, #4]
   145fc:	bl	14298 <__assert_fail@plt+0x2ec4>
   14600:	sub	sp, fp, #8
   14604:	pop	{r4, sl, fp, pc}
   14608:	push	{r4, r5, fp, lr}
   1460c:	add	fp, sp, #8
   14610:	sub	sp, sp, #48	; 0x30
   14614:	mov	ip, #0
   14618:	ldr	r4, [fp, #8]
   1461c:	add	lr, sp, #8
   14620:	ldr	r5, [r4]
   14624:	str	r5, [lr, ip, lsl #2]
   14628:	cmp	r5, #0
   1462c:	beq	14644 <__assert_fail@plt+0x3270>
   14630:	add	ip, ip, #1
   14634:	add	r4, r4, #4
   14638:	cmp	ip, #10
   1463c:	bne	14620 <__assert_fail@plt+0x324c>
   14640:	mov	ip, #10
   14644:	str	lr, [sp]
   14648:	str	ip, [sp, #4]
   1464c:	bl	14298 <__assert_fail@plt+0x2ec4>
   14650:	sub	sp, fp, #8
   14654:	pop	{r4, r5, fp, pc}
   14658:	push	{fp, lr}
   1465c:	mov	fp, sp
   14660:	sub	sp, sp, #8
   14664:	add	ip, fp, #8
   14668:	str	ip, [sp, #4]
   1466c:	str	ip, [sp]
   14670:	bl	14608 <__assert_fail@plt+0x3234>
   14674:	mov	sp, fp
   14678:	pop	{fp, pc}
   1467c:	push	{fp, lr}
   14680:	mov	fp, sp
   14684:	movw	r0, #29044	; 0x7174
   14688:	movt	r0, #2
   1468c:	ldr	r1, [r0]
   14690:	movw	r0, #25355	; 0x630b
   14694:	movt	r0, #1
   14698:	bl	110f8 <fputs_unlocked@plt>
   1469c:	movw	r1, #27603	; 0x6bd3
   146a0:	movt	r1, #1
   146a4:	mov	r0, #0
   146a8:	mov	r2, #5
   146ac:	bl	1117c <dcgettext@plt>
   146b0:	mov	r1, r0
   146b4:	movw	r2, #27623	; 0x6be7
   146b8:	movt	r2, #1
   146bc:	mov	r0, #1
   146c0:	bl	112f0 <__printf_chk@plt>
   146c4:	movw	r1, #27645	; 0x6bfd
   146c8:	movt	r1, #1
   146cc:	mov	r0, #0
   146d0:	mov	r2, #5
   146d4:	bl	1117c <dcgettext@plt>
   146d8:	mov	r1, r0
   146dc:	movw	r2, #25773	; 0x64ad
   146e0:	movt	r2, #1
   146e4:	movw	r3, #26252	; 0x668c
   146e8:	movt	r3, #1
   146ec:	mov	r0, #1
   146f0:	bl	112f0 <__printf_chk@plt>
   146f4:	movw	r1, #27665	; 0x6c11
   146f8:	movt	r1, #1
   146fc:	mov	r0, #0
   14700:	mov	r2, #5
   14704:	bl	1117c <dcgettext@plt>
   14708:	mov	r1, r0
   1470c:	movw	r2, #27704	; 0x6c38
   14710:	movt	r2, #1
   14714:	mov	r0, #1
   14718:	pop	{fp, lr}
   1471c:	b	112f0 <__printf_chk@plt>
   14720:	b	14724 <__assert_fail@plt+0x3350>
   14724:	push	{r4, r5, r6, sl, fp, lr}
   14728:	add	fp, sp, #16
   1472c:	mov	r4, r2
   14730:	mov	r5, r1
   14734:	mov	r6, r0
   14738:	bl	15f2c <__assert_fail@plt+0x4b58>
   1473c:	cmp	r0, #0
   14740:	popne	{r4, r5, r6, sl, fp, pc}
   14744:	cmp	r6, #0
   14748:	beq	1475c <__assert_fail@plt+0x3388>
   1474c:	cmp	r5, #0
   14750:	cmpne	r4, #0
   14754:	bne	1475c <__assert_fail@plt+0x3388>
   14758:	pop	{r4, r5, r6, sl, fp, pc}
   1475c:	bl	14ae8 <__assert_fail@plt+0x3714>
   14760:	push	{fp, lr}
   14764:	mov	fp, sp
   14768:	bl	155f4 <__assert_fail@plt+0x4220>
   1476c:	pop	{fp, lr}
   14770:	b	14774 <__assert_fail@plt+0x33a0>
   14774:	cmp	r0, #0
   14778:	bxne	lr
   1477c:	push	{fp, lr}
   14780:	mov	fp, sp
   14784:	bl	14ae8 <__assert_fail@plt+0x3714>
   14788:	push	{fp, lr}
   1478c:	mov	fp, sp
   14790:	bl	15bec <__assert_fail@plt+0x4818>
   14794:	pop	{fp, lr}
   14798:	b	14774 <__assert_fail@plt+0x33a0>
   1479c:	b	14760 <__assert_fail@plt+0x338c>
   147a0:	push	{r4, r5, fp, lr}
   147a4:	add	fp, sp, #8
   147a8:	mov	r4, r1
   147ac:	mov	r5, r0
   147b0:	bl	15624 <__assert_fail@plt+0x4250>
   147b4:	cmp	r0, #0
   147b8:	popne	{r4, r5, fp, pc}
   147bc:	cmp	r5, #0
   147c0:	beq	147d0 <__assert_fail@plt+0x33fc>
   147c4:	cmp	r4, #0
   147c8:	bne	147d0 <__assert_fail@plt+0x33fc>
   147cc:	pop	{r4, r5, fp, pc}
   147d0:	bl	14ae8 <__assert_fail@plt+0x3714>
   147d4:	push	{fp, lr}
   147d8:	mov	fp, sp
   147dc:	bl	15bf0 <__assert_fail@plt+0x481c>
   147e0:	pop	{fp, lr}
   147e4:	b	14774 <__assert_fail@plt+0x33a0>
   147e8:	push	{fp, lr}
   147ec:	mov	fp, sp
   147f0:	bl	15c00 <__assert_fail@plt+0x482c>
   147f4:	pop	{fp, lr}
   147f8:	b	14774 <__assert_fail@plt+0x33a0>
   147fc:	mov	r2, r1
   14800:	mov	r1, r0
   14804:	mov	r0, #0
   14808:	b	14724 <__assert_fail@plt+0x3350>
   1480c:	mov	r2, r1
   14810:	mov	r1, r0
   14814:	mov	r0, #0
   14818:	b	147e8 <__assert_fail@plt+0x3414>
   1481c:	mov	r2, #1
   14820:	b	14824 <__assert_fail@plt+0x3450>
   14824:	push	{r4, r5, fp, lr}
   14828:	add	fp, sp, #8
   1482c:	mov	r4, r1
   14830:	ldr	r5, [r1]
   14834:	cmp	r0, #0
   14838:	beq	14850 <__assert_fail@plt+0x347c>
   1483c:	mov	r1, #1
   14840:	add	r1, r1, r5, lsr #1
   14844:	adds	r5, r5, r1
   14848:	bcc	14868 <__assert_fail@plt+0x3494>
   1484c:	bl	14ae8 <__assert_fail@plt+0x3714>
   14850:	cmp	r5, #0
   14854:	bne	14868 <__assert_fail@plt+0x3494>
   14858:	mov	r1, #64	; 0x40
   1485c:	udiv	r5, r1, r2
   14860:	cmp	r2, #64	; 0x40
   14864:	addhi	r5, r5, #1
   14868:	mov	r1, r5
   1486c:	bl	14724 <__assert_fail@plt+0x3350>
   14870:	str	r5, [r4]
   14874:	pop	{r4, r5, fp, pc}
   14878:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1487c:	add	fp, sp, #24
   14880:	mov	r8, r1
   14884:	ldr	r6, [r1]
   14888:	add	r1, r6, r6, asr #1
   1488c:	cmp	r1, r6
   14890:	mvnvs	r1, #-2147483648	; 0x80000000
   14894:	cmp	r1, r3
   14898:	mov	r5, r1
   1489c:	movgt	r5, r3
   148a0:	cmn	r3, #1
   148a4:	movle	r5, r1
   148a8:	ldr	r4, [fp, #8]
   148ac:	cmn	r4, #1
   148b0:	ble	148d8 <__assert_fail@plt+0x3504>
   148b4:	cmp	r4, #0
   148b8:	beq	1492c <__assert_fail@plt+0x3558>
   148bc:	cmn	r5, #1
   148c0:	ble	14900 <__assert_fail@plt+0x352c>
   148c4:	mvn	r7, #-2147483648	; 0x80000000
   148c8:	udiv	r1, r7, r4
   148cc:	cmp	r1, r5
   148d0:	bge	1492c <__assert_fail@plt+0x3558>
   148d4:	b	1493c <__assert_fail@plt+0x3568>
   148d8:	cmn	r5, #1
   148dc:	ble	1491c <__assert_fail@plt+0x3548>
   148e0:	cmn	r4, #1
   148e4:	beq	1492c <__assert_fail@plt+0x3558>
   148e8:	mov	r1, #-2147483648	; 0x80000000
   148ec:	sdiv	r1, r1, r4
   148f0:	mvn	r7, #-2147483648	; 0x80000000
   148f4:	cmp	r1, r5
   148f8:	bge	1492c <__assert_fail@plt+0x3558>
   148fc:	b	1493c <__assert_fail@plt+0x3568>
   14900:	beq	1492c <__assert_fail@plt+0x3558>
   14904:	mov	r1, #-2147483648	; 0x80000000
   14908:	sdiv	r1, r1, r5
   1490c:	mvn	r7, #-2147483648	; 0x80000000
   14910:	cmp	r1, r4
   14914:	bge	1492c <__assert_fail@plt+0x3558>
   14918:	b	1493c <__assert_fail@plt+0x3568>
   1491c:	mvn	r7, #-2147483648	; 0x80000000
   14920:	sdiv	r1, r7, r4
   14924:	cmp	r5, r1
   14928:	blt	1493c <__assert_fail@plt+0x3568>
   1492c:	mul	r1, r5, r4
   14930:	mov	r7, #64	; 0x40
   14934:	cmp	r1, #63	; 0x3f
   14938:	bgt	14944 <__assert_fail@plt+0x3570>
   1493c:	sdiv	r5, r7, r4
   14940:	mul	r1, r5, r4
   14944:	cmp	r0, #0
   14948:	moveq	r7, #0
   1494c:	streq	r7, [r8]
   14950:	sub	r7, r5, r6
   14954:	cmp	r7, r2
   14958:	bge	14a04 <__assert_fail@plt+0x3630>
   1495c:	add	r5, r6, r2
   14960:	mov	r1, #0
   14964:	cmp	r5, r3
   14968:	mov	r2, #0
   1496c:	movwgt	r2, #1
   14970:	cmn	r3, #1
   14974:	movwgt	r1, #1
   14978:	cmp	r5, r6
   1497c:	bvs	149ec <__assert_fail@plt+0x3618>
   14980:	ands	r1, r1, r2
   14984:	bne	149ec <__assert_fail@plt+0x3618>
   14988:	cmn	r4, #1
   1498c:	ble	149b4 <__assert_fail@plt+0x35e0>
   14990:	cmp	r4, #0
   14994:	beq	14a00 <__assert_fail@plt+0x362c>
   14998:	cmn	r5, #1
   1499c:	ble	149d8 <__assert_fail@plt+0x3604>
   149a0:	mvn	r1, #-2147483648	; 0x80000000
   149a4:	udiv	r1, r1, r4
   149a8:	cmp	r1, r5
   149ac:	bge	14a00 <__assert_fail@plt+0x362c>
   149b0:	b	149ec <__assert_fail@plt+0x3618>
   149b4:	cmn	r5, #1
   149b8:	ble	149f0 <__assert_fail@plt+0x361c>
   149bc:	cmn	r4, #1
   149c0:	beq	14a00 <__assert_fail@plt+0x362c>
   149c4:	mov	r1, #-2147483648	; 0x80000000
   149c8:	sdiv	r1, r1, r4
   149cc:	cmp	r1, r5
   149d0:	bge	14a00 <__assert_fail@plt+0x362c>
   149d4:	b	149ec <__assert_fail@plt+0x3618>
   149d8:	beq	14a00 <__assert_fail@plt+0x362c>
   149dc:	mov	r1, #-2147483648	; 0x80000000
   149e0:	sdiv	r1, r1, r5
   149e4:	cmp	r1, r4
   149e8:	bge	14a00 <__assert_fail@plt+0x362c>
   149ec:	bl	14ae8 <__assert_fail@plt+0x3714>
   149f0:	mvn	r1, #-2147483648	; 0x80000000
   149f4:	sdiv	r1, r1, r4
   149f8:	cmp	r5, r1
   149fc:	blt	149ec <__assert_fail@plt+0x3618>
   14a00:	mul	r1, r5, r4
   14a04:	bl	147a0 <__assert_fail@plt+0x33cc>
   14a08:	str	r5, [r8]
   14a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a10:	mov	r1, #1
   14a14:	b	14a18 <__assert_fail@plt+0x3644>
   14a18:	push	{fp, lr}
   14a1c:	mov	fp, sp
   14a20:	bl	155a0 <__assert_fail@plt+0x41cc>
   14a24:	pop	{fp, lr}
   14a28:	b	14774 <__assert_fail@plt+0x33a0>
   14a2c:	mov	r1, #1
   14a30:	b	14a34 <__assert_fail@plt+0x3660>
   14a34:	push	{fp, lr}
   14a38:	mov	fp, sp
   14a3c:	bl	15bfc <__assert_fail@plt+0x4828>
   14a40:	pop	{fp, lr}
   14a44:	b	14774 <__assert_fail@plt+0x33a0>
   14a48:	push	{r4, r5, fp, lr}
   14a4c:	add	fp, sp, #8
   14a50:	mov	r4, r1
   14a54:	mov	r5, r0
   14a58:	mov	r0, r1
   14a5c:	bl	14760 <__assert_fail@plt+0x338c>
   14a60:	mov	r1, r5
   14a64:	mov	r2, r4
   14a68:	pop	{r4, r5, fp, lr}
   14a6c:	b	11158 <memcpy@plt>
   14a70:	push	{r4, r5, fp, lr}
   14a74:	add	fp, sp, #8
   14a78:	mov	r4, r1
   14a7c:	mov	r5, r0
   14a80:	mov	r0, r1
   14a84:	bl	14788 <__assert_fail@plt+0x33b4>
   14a88:	mov	r1, r5
   14a8c:	mov	r2, r4
   14a90:	pop	{r4, r5, fp, lr}
   14a94:	b	11158 <memcpy@plt>
   14a98:	push	{r4, r5, fp, lr}
   14a9c:	add	fp, sp, #8
   14aa0:	mov	r4, r1
   14aa4:	mov	r5, r0
   14aa8:	add	r0, r1, #1
   14aac:	bl	14788 <__assert_fail@plt+0x33b4>
   14ab0:	mov	r1, #0
   14ab4:	strb	r1, [r0, r4]
   14ab8:	mov	r1, r5
   14abc:	mov	r2, r4
   14ac0:	pop	{r4, r5, fp, lr}
   14ac4:	b	11158 <memcpy@plt>
   14ac8:	push	{r4, sl, fp, lr}
   14acc:	add	fp, sp, #8
   14ad0:	mov	r4, r0
   14ad4:	bl	112a8 <strlen@plt>
   14ad8:	add	r1, r0, #1
   14adc:	mov	r0, r4
   14ae0:	pop	{r4, sl, fp, lr}
   14ae4:	b	14a48 <__assert_fail@plt+0x3674>
   14ae8:	push	{fp, lr}
   14aec:	mov	fp, sp
   14af0:	movw	r0, #28956	; 0x711c
   14af4:	movt	r0, #2
   14af8:	ldr	r4, [r0]
   14afc:	movw	r1, #27780	; 0x6c84
   14b00:	movt	r1, #1
   14b04:	mov	r0, #0
   14b08:	mov	r2, #5
   14b0c:	bl	1117c <dcgettext@plt>
   14b10:	mov	r3, r0
   14b14:	movw	r2, #26703	; 0x684f
   14b18:	movt	r2, #1
   14b1c:	mov	r0, r4
   14b20:	mov	r1, #0
   14b24:	bl	11218 <error@plt>
   14b28:	bl	113b0 <abort@plt>
   14b2c:	push	{r4, sl, fp, lr}
   14b30:	add	fp, sp, #8
   14b34:	bl	15d18 <__assert_fail@plt+0x4944>
   14b38:	mov	r4, r0
   14b3c:	cmn	r0, #1
   14b40:	bne	14b54 <__assert_fail@plt+0x3780>
   14b44:	bl	112c0 <__errno_location@plt>
   14b48:	ldr	r0, [r0]
   14b4c:	cmp	r0, #12
   14b50:	beq	14b5c <__assert_fail@plt+0x3788>
   14b54:	mov	r0, r4
   14b58:	pop	{r4, sl, fp, pc}
   14b5c:	bl	14ae8 <__assert_fail@plt+0x3714>
   14b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b64:	add	fp, sp, #28
   14b68:	sub	sp, sp, #12
   14b6c:	cmp	r2, #37	; 0x25
   14b70:	bcs	14f94 <__assert_fail@plt+0x3bc0>
   14b74:	mov	r7, r2
   14b78:	mov	r6, r1
   14b7c:	mov	r4, r0
   14b80:	str	r3, [sp]
   14b84:	ldr	sl, [fp, #8]
   14b88:	bl	112c0 <__errno_location@plt>
   14b8c:	mov	r5, r0
   14b90:	mov	r0, #0
   14b94:	str	r0, [r5]
   14b98:	bl	11278 <__ctype_b_loc@plt>
   14b9c:	ldr	r1, [r0]
   14ba0:	mov	r2, r4
   14ba4:	ldrb	r0, [r2], #1
   14ba8:	add	r3, r1, r0, lsl #1
   14bac:	ldrb	r3, [r3, #1]
   14bb0:	tst	r3, #32
   14bb4:	bne	14ba4 <__assert_fail@plt+0x37d0>
   14bb8:	add	r9, sp, #8
   14bbc:	cmp	r6, #0
   14bc0:	movne	r9, r6
   14bc4:	mov	r8, #4
   14bc8:	cmp	r0, #45	; 0x2d
   14bcc:	beq	14f88 <__assert_fail@plt+0x3bb4>
   14bd0:	mov	r0, r4
   14bd4:	mov	r1, r9
   14bd8:	mov	r2, r7
   14bdc:	bl	1129c <strtoul@plt>
   14be0:	str	r0, [sp, #4]
   14be4:	ldr	r7, [r9]
   14be8:	cmp	r7, r4
   14bec:	beq	14c14 <__assert_fail@plt+0x3840>
   14bf0:	ldr	r0, [r5]
   14bf4:	cmp	r0, #0
   14bf8:	beq	14c48 <__assert_fail@plt+0x3874>
   14bfc:	cmp	r0, #34	; 0x22
   14c00:	bne	14f88 <__assert_fail@plt+0x3bb4>
   14c04:	mov	r8, #1
   14c08:	cmp	sl, #0
   14c0c:	bne	14c54 <__assert_fail@plt+0x3880>
   14c10:	b	14f7c <__assert_fail@plt+0x3ba8>
   14c14:	cmp	sl, #0
   14c18:	beq	14f88 <__assert_fail@plt+0x3bb4>
   14c1c:	ldrb	r1, [r7]
   14c20:	cmp	r1, #0
   14c24:	beq	14f88 <__assert_fail@plt+0x3bb4>
   14c28:	mov	r0, sl
   14c2c:	bl	112b4 <strchr@plt>
   14c30:	cmp	r0, #0
   14c34:	beq	14f88 <__assert_fail@plt+0x3bb4>
   14c38:	mov	r0, #1
   14c3c:	str	r0, [sp, #4]
   14c40:	mov	r8, #0
   14c44:	b	14c54 <__assert_fail@plt+0x3880>
   14c48:	mov	r8, r0
   14c4c:	cmp	sl, #0
   14c50:	beq	14f7c <__assert_fail@plt+0x3ba8>
   14c54:	ldrb	r4, [r7]
   14c58:	cmp	r4, #0
   14c5c:	beq	14f7c <__assert_fail@plt+0x3ba8>
   14c60:	mov	r0, sl
   14c64:	mov	r1, r4
   14c68:	bl	112b4 <strchr@plt>
   14c6c:	cmp	r0, #0
   14c70:	beq	14e9c <__assert_fail@plt+0x3ac8>
   14c74:	sub	r0, r4, #69	; 0x45
   14c78:	mov	r6, #1
   14c7c:	mov	r5, #1024	; 0x400
   14c80:	cmp	r0, #47	; 0x2f
   14c84:	bhi	14d98 <__assert_fail@plt+0x39c4>
   14c88:	add	r1, pc, #0
   14c8c:	ldr	pc, [r1, r0, lsl #2]
   14c90:	andeq	r4, r1, r0, asr sp
   14c94:	muleq	r1, r8, sp
   14c98:	andeq	r4, r1, r0, asr sp
   14c9c:	muleq	r1, r8, sp
   14ca0:	muleq	r1, r8, sp
   14ca4:	muleq	r1, r8, sp
   14ca8:	andeq	r4, r1, r0, asr sp
   14cac:	muleq	r1, r8, sp
   14cb0:	andeq	r4, r1, r0, asr sp
   14cb4:	muleq	r1, r8, sp
   14cb8:	muleq	r1, r8, sp
   14cbc:	andeq	r4, r1, r0, asr sp
   14cc0:	muleq	r1, r8, sp
   14cc4:	muleq	r1, r8, sp
   14cc8:	muleq	r1, r8, sp
   14ccc:	andeq	r4, r1, r0, asr sp
   14cd0:	muleq	r1, r8, sp
   14cd4:	muleq	r1, r8, sp
   14cd8:	muleq	r1, r8, sp
   14cdc:	muleq	r1, r8, sp
   14ce0:	andeq	r4, r1, r0, asr sp
   14ce4:	andeq	r4, r1, r0, asr sp
   14ce8:	muleq	r1, r8, sp
   14cec:	muleq	r1, r8, sp
   14cf0:	muleq	r1, r8, sp
   14cf4:	muleq	r1, r8, sp
   14cf8:	muleq	r1, r8, sp
   14cfc:	muleq	r1, r8, sp
   14d00:	muleq	r1, r8, sp
   14d04:	muleq	r1, r8, sp
   14d08:	muleq	r1, r8, sp
   14d0c:	muleq	r1, r8, sp
   14d10:	muleq	r1, r8, sp
   14d14:	muleq	r1, r8, sp
   14d18:	andeq	r4, r1, r0, asr sp
   14d1c:	muleq	r1, r8, sp
   14d20:	muleq	r1, r8, sp
   14d24:	muleq	r1, r8, sp
   14d28:	andeq	r4, r1, r0, asr sp
   14d2c:	muleq	r1, r8, sp
   14d30:	andeq	r4, r1, r0, asr sp
   14d34:	muleq	r1, r8, sp
   14d38:	muleq	r1, r8, sp
   14d3c:	muleq	r1, r8, sp
   14d40:	muleq	r1, r8, sp
   14d44:	muleq	r1, r8, sp
   14d48:	muleq	r1, r8, sp
   14d4c:	andeq	r4, r1, r0, asr sp
   14d50:	mov	r0, sl
   14d54:	mov	r1, #48	; 0x30
   14d58:	bl	112b4 <strchr@plt>
   14d5c:	cmp	r0, #0
   14d60:	beq	14d98 <__assert_fail@plt+0x39c4>
   14d64:	ldrb	r0, [r7, #1]
   14d68:	cmp	r0, #66	; 0x42
   14d6c:	cmpne	r0, #68	; 0x44
   14d70:	bne	14d80 <__assert_fail@plt+0x39ac>
   14d74:	mov	r6, #2
   14d78:	mov	r5, #1000	; 0x3e8
   14d7c:	b	14d98 <__assert_fail@plt+0x39c4>
   14d80:	cmp	r0, #105	; 0x69
   14d84:	bne	14d98 <__assert_fail@plt+0x39c4>
   14d88:	ldrb	r0, [r7, #2]
   14d8c:	mov	r6, #1
   14d90:	cmp	r0, #66	; 0x42
   14d94:	movweq	r6, #3
   14d98:	sub	r1, r4, #66	; 0x42
   14d9c:	cmp	r1, #53	; 0x35
   14da0:	bhi	14e9c <__assert_fail@plt+0x3ac8>
   14da4:	mov	r0, #0
   14da8:	add	r2, pc, #0
   14dac:	ldr	pc, [r2, r1, lsl #2]
   14db0:	andeq	r4, r1, r0, lsl #30
   14db4:	muleq	r1, ip, lr
   14db8:	muleq	r1, ip, lr
   14dbc:	andeq	r4, r1, ip, lsl #30
   14dc0:	muleq	r1, ip, lr
   14dc4:	andeq	r4, r1, r8, lsl #29
   14dc8:	muleq	r1, ip, lr
   14dcc:	muleq	r1, ip, lr
   14dd0:	muleq	r1, ip, lr
   14dd4:			; <UNDEFINED> instruction: 0x00014eb0
   14dd8:	muleq	r1, ip, lr
   14ddc:	andeq	r4, r1, r4, asr #29
   14de0:	muleq	r1, ip, lr
   14de4:	muleq	r1, ip, lr
   14de8:	andeq	r4, r1, r0, lsr #30
   14dec:	muleq	r1, ip, lr
   14df0:	muleq	r1, ip, lr
   14df4:	muleq	r1, ip, lr
   14df8:	ldrdeq	r4, [r1], -r8
   14dfc:	muleq	r1, ip, lr
   14e00:	muleq	r1, ip, lr
   14e04:	muleq	r1, ip, lr
   14e08:	muleq	r1, ip, lr
   14e0c:	andeq	r4, r1, r4, lsr pc
   14e10:	andeq	r4, r1, ip, ror #29
   14e14:	muleq	r1, ip, lr
   14e18:	muleq	r1, ip, lr
   14e1c:	muleq	r1, ip, lr
   14e20:	muleq	r1, ip, lr
   14e24:	muleq	r1, ip, lr
   14e28:	muleq	r1, ip, lr
   14e2c:	muleq	r1, ip, lr
   14e30:	andeq	r4, r1, r8, asr #30
   14e34:	andeq	r4, r1, r0, ror #30
   14e38:	muleq	r1, ip, lr
   14e3c:	muleq	r1, ip, lr
   14e40:	muleq	r1, ip, lr
   14e44:	andeq	r4, r1, r8, lsl #29
   14e48:	muleq	r1, ip, lr
   14e4c:	muleq	r1, ip, lr
   14e50:	muleq	r1, ip, lr
   14e54:			; <UNDEFINED> instruction: 0x00014eb0
   14e58:	muleq	r1, ip, lr
   14e5c:	andeq	r4, r1, r4, asr #29
   14e60:	muleq	r1, ip, lr
   14e64:	muleq	r1, ip, lr
   14e68:	muleq	r1, ip, lr
   14e6c:	muleq	r1, ip, lr
   14e70:	muleq	r1, ip, lr
   14e74:	muleq	r1, ip, lr
   14e78:	ldrdeq	r4, [r1], -r8
   14e7c:	muleq	r1, ip, lr
   14e80:	muleq	r1, ip, lr
   14e84:	andeq	r4, r1, r4, asr pc
   14e88:	add	r0, sp, #4
   14e8c:	mov	r1, r5
   14e90:	mov	r2, #3
   14e94:	bl	15018 <__assert_fail@plt+0x3c44>
   14e98:	b	14f60 <__assert_fail@plt+0x3b8c>
   14e9c:	ldr	r0, [sp, #4]
   14ea0:	ldr	r1, [sp]
   14ea4:	str	r0, [r1]
   14ea8:	orr	r8, r8, #2
   14eac:	b	14f88 <__assert_fail@plt+0x3bb4>
   14eb0:	add	r0, sp, #4
   14eb4:	mov	r1, r5
   14eb8:	mov	r2, #1
   14ebc:	bl	15018 <__assert_fail@plt+0x3c44>
   14ec0:	b	14f60 <__assert_fail@plt+0x3b8c>
   14ec4:	add	r0, sp, #4
   14ec8:	mov	r1, r5
   14ecc:	mov	r2, #2
   14ed0:	bl	15018 <__assert_fail@plt+0x3c44>
   14ed4:	b	14f60 <__assert_fail@plt+0x3b8c>
   14ed8:	add	r0, sp, #4
   14edc:	mov	r1, r5
   14ee0:	mov	r2, #4
   14ee4:	bl	15018 <__assert_fail@plt+0x3c44>
   14ee8:	b	14f60 <__assert_fail@plt+0x3b8c>
   14eec:	add	r0, sp, #4
   14ef0:	mov	r1, r5
   14ef4:	mov	r2, #7
   14ef8:	bl	15018 <__assert_fail@plt+0x3c44>
   14efc:	b	14f60 <__assert_fail@plt+0x3b8c>
   14f00:	add	r0, sp, #4
   14f04:	mov	r1, #1024	; 0x400
   14f08:	b	14f5c <__assert_fail@plt+0x3b88>
   14f0c:	add	r0, sp, #4
   14f10:	mov	r1, r5
   14f14:	mov	r2, #6
   14f18:	bl	15018 <__assert_fail@plt+0x3c44>
   14f1c:	b	14f60 <__assert_fail@plt+0x3b8c>
   14f20:	add	r0, sp, #4
   14f24:	mov	r1, r5
   14f28:	mov	r2, #5
   14f2c:	bl	15018 <__assert_fail@plt+0x3c44>
   14f30:	b	14f60 <__assert_fail@plt+0x3b8c>
   14f34:	add	r0, sp, #4
   14f38:	mov	r1, r5
   14f3c:	mov	r2, #8
   14f40:	bl	15018 <__assert_fail@plt+0x3c44>
   14f44:	b	14f60 <__assert_fail@plt+0x3b8c>
   14f48:	add	r0, sp, #4
   14f4c:	mov	r1, #512	; 0x200
   14f50:	b	14f5c <__assert_fail@plt+0x3b88>
   14f54:	add	r0, sp, #4
   14f58:	mov	r1, #2
   14f5c:	bl	14fb4 <__assert_fail@plt+0x3be0>
   14f60:	ldr	r1, [r9]
   14f64:	add	r2, r1, r6
   14f68:	str	r2, [r9]
   14f6c:	ldrb	r1, [r1, r6]
   14f70:	orr	r8, r0, r8
   14f74:	cmp	r1, #0
   14f78:	orrne	r8, r8, #2
   14f7c:	ldr	r0, [sp, #4]
   14f80:	ldr	r1, [sp]
   14f84:	str	r0, [r1]
   14f88:	mov	r0, r8
   14f8c:	sub	sp, fp, #28
   14f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f94:	movw	r0, #27797	; 0x6c95
   14f98:	movt	r0, #1
   14f9c:	movw	r1, #27835	; 0x6cbb
   14fa0:	movt	r1, #1
   14fa4:	movw	r3, #27851	; 0x6ccb
   14fa8:	movt	r3, #1
   14fac:	mov	r2, #85	; 0x55
   14fb0:	bl	113d4 <__assert_fail@plt>
   14fb4:	push	{fp, lr}
   14fb8:	mov	fp, sp
   14fbc:	cmn	r1, #1
   14fc0:	ble	14fe8 <__assert_fail@plt+0x3c14>
   14fc4:	cmp	r1, #0
   14fc8:	beq	15000 <__assert_fail@plt+0x3c2c>
   14fcc:	mvn	r3, #0
   14fd0:	udiv	ip, r3, r1
   14fd4:	ldr	lr, [r0]
   14fd8:	mov	r2, #1
   14fdc:	cmp	ip, lr
   14fe0:	bcs	15000 <__assert_fail@plt+0x3c2c>
   14fe4:	b	1500c <__assert_fail@plt+0x3c38>
   14fe8:	ldr	r2, [r0]
   14fec:	cmp	r2, #0
   14ff0:	beq	15000 <__assert_fail@plt+0x3c2c>
   14ff4:	mov	r2, #1
   14ff8:	mvn	r3, #0
   14ffc:	b	1500c <__assert_fail@plt+0x3c38>
   15000:	ldr	r2, [r0]
   15004:	mul	r3, r2, r1
   15008:	mov	r2, #0
   1500c:	str	r3, [r0]
   15010:	mov	r0, r2
   15014:	pop	{fp, pc}
   15018:	push	{r4, r5, r6, r7, fp, lr}
   1501c:	add	fp, sp, #16
   15020:	cmp	r2, #0
   15024:	beq	15058 <__assert_fail@plt+0x3c84>
   15028:	mov	r4, r2
   1502c:	mov	r5, r1
   15030:	mov	r7, r0
   15034:	mov	r6, #0
   15038:	mov	r0, r7
   1503c:	mov	r1, r5
   15040:	bl	14fb4 <__assert_fail@plt+0x3be0>
   15044:	orr	r6, r0, r6
   15048:	subs	r4, r4, #1
   1504c:	bne	15038 <__assert_fail@plt+0x3c64>
   15050:	mov	r0, r6
   15054:	pop	{r4, r5, r6, r7, fp, pc}
   15058:	mov	r6, #0
   1505c:	mov	r0, r6
   15060:	pop	{r4, r5, r6, r7, fp, pc}
   15064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15068:	add	fp, sp, #28
   1506c:	sub	sp, sp, #20
   15070:	cmp	r2, #37	; 0x25
   15074:	bcs	154a8 <__assert_fail@plt+0x40d4>
   15078:	mov	r5, r2
   1507c:	mov	r6, r1
   15080:	mov	r4, r0
   15084:	str	r3, [sp, #4]
   15088:	ldr	sl, [fp, #8]
   1508c:	bl	112c0 <__errno_location@plt>
   15090:	mov	r7, r0
   15094:	mov	r0, #0
   15098:	str	r0, [r7]
   1509c:	bl	11278 <__ctype_b_loc@plt>
   150a0:	ldr	r1, [r0]
   150a4:	mov	r2, r4
   150a8:	ldrb	r0, [r2], #1
   150ac:	add	r3, r1, r0, lsl #1
   150b0:	ldrb	r3, [r3, #1]
   150b4:	tst	r3, #32
   150b8:	bne	150a8 <__assert_fail@plt+0x3cd4>
   150bc:	add	r9, sp, #16
   150c0:	cmp	r6, #0
   150c4:	movne	r9, r6
   150c8:	mov	r8, #4
   150cc:	cmp	r0, #45	; 0x2d
   150d0:	beq	1549c <__assert_fail@plt+0x40c8>
   150d4:	mov	r0, r4
   150d8:	mov	r1, r9
   150dc:	mov	r2, r5
   150e0:	bl	11308 <strtoumax@plt>
   150e4:	str	r1, [sp, #12]
   150e8:	str	r0, [sp, #8]
   150ec:	ldr	r6, [r9]
   150f0:	cmp	r6, r4
   150f4:	beq	1511c <__assert_fail@plt+0x3d48>
   150f8:	ldr	r0, [r7]
   150fc:	cmp	r0, #0
   15100:	beq	15154 <__assert_fail@plt+0x3d80>
   15104:	cmp	r0, #34	; 0x22
   15108:	bne	1549c <__assert_fail@plt+0x40c8>
   1510c:	mov	r8, #1
   15110:	cmp	sl, #0
   15114:	bne	15160 <__assert_fail@plt+0x3d8c>
   15118:	b	1548c <__assert_fail@plt+0x40b8>
   1511c:	cmp	sl, #0
   15120:	beq	1549c <__assert_fail@plt+0x40c8>
   15124:	ldrb	r1, [r6]
   15128:	cmp	r1, #0
   1512c:	beq	1549c <__assert_fail@plt+0x40c8>
   15130:	mov	r0, sl
   15134:	bl	112b4 <strchr@plt>
   15138:	cmp	r0, #0
   1513c:	beq	1549c <__assert_fail@plt+0x40c8>
   15140:	mov	r8, #0
   15144:	str	r8, [sp, #12]
   15148:	mov	r0, #1
   1514c:	str	r0, [sp, #8]
   15150:	b	15160 <__assert_fail@plt+0x3d8c>
   15154:	mov	r8, r0
   15158:	cmp	sl, #0
   1515c:	beq	1548c <__assert_fail@plt+0x40b8>
   15160:	ldrb	r4, [r6]
   15164:	cmp	r4, #0
   15168:	beq	1548c <__assert_fail@plt+0x40b8>
   1516c:	mov	r0, sl
   15170:	mov	r1, r4
   15174:	bl	112b4 <strchr@plt>
   15178:	cmp	r0, #0
   1517c:	beq	153a8 <__assert_fail@plt+0x3fd4>
   15180:	sub	r0, r4, #69	; 0x45
   15184:	mov	r7, #1
   15188:	mov	r5, #1024	; 0x400
   1518c:	cmp	r0, #47	; 0x2f
   15190:	bhi	152a4 <__assert_fail@plt+0x3ed0>
   15194:	add	r1, pc, #0
   15198:	ldr	pc, [r1, r0, lsl #2]
   1519c:	andeq	r5, r1, ip, asr r2
   151a0:	andeq	r5, r1, r4, lsr #5
   151a4:	andeq	r5, r1, ip, asr r2
   151a8:	andeq	r5, r1, r4, lsr #5
   151ac:	andeq	r5, r1, r4, lsr #5
   151b0:	andeq	r5, r1, r4, lsr #5
   151b4:	andeq	r5, r1, ip, asr r2
   151b8:	andeq	r5, r1, r4, lsr #5
   151bc:	andeq	r5, r1, ip, asr r2
   151c0:	andeq	r5, r1, r4, lsr #5
   151c4:	andeq	r5, r1, r4, lsr #5
   151c8:	andeq	r5, r1, ip, asr r2
   151cc:	andeq	r5, r1, r4, lsr #5
   151d0:	andeq	r5, r1, r4, lsr #5
   151d4:	andeq	r5, r1, r4, lsr #5
   151d8:	andeq	r5, r1, ip, asr r2
   151dc:	andeq	r5, r1, r4, lsr #5
   151e0:	andeq	r5, r1, r4, lsr #5
   151e4:	andeq	r5, r1, r4, lsr #5
   151e8:	andeq	r5, r1, r4, lsr #5
   151ec:	andeq	r5, r1, ip, asr r2
   151f0:	andeq	r5, r1, ip, asr r2
   151f4:	andeq	r5, r1, r4, lsr #5
   151f8:	andeq	r5, r1, r4, lsr #5
   151fc:	andeq	r5, r1, r4, lsr #5
   15200:	andeq	r5, r1, r4, lsr #5
   15204:	andeq	r5, r1, r4, lsr #5
   15208:	andeq	r5, r1, r4, lsr #5
   1520c:	andeq	r5, r1, r4, lsr #5
   15210:	andeq	r5, r1, r4, lsr #5
   15214:	andeq	r5, r1, r4, lsr #5
   15218:	andeq	r5, r1, r4, lsr #5
   1521c:	andeq	r5, r1, r4, lsr #5
   15220:	andeq	r5, r1, r4, lsr #5
   15224:	andeq	r5, r1, ip, asr r2
   15228:	andeq	r5, r1, r4, lsr #5
   1522c:	andeq	r5, r1, r4, lsr #5
   15230:	andeq	r5, r1, r4, lsr #5
   15234:	andeq	r5, r1, ip, asr r2
   15238:	andeq	r5, r1, r4, lsr #5
   1523c:	andeq	r5, r1, ip, asr r2
   15240:	andeq	r5, r1, r4, lsr #5
   15244:	andeq	r5, r1, r4, lsr #5
   15248:	andeq	r5, r1, r4, lsr #5
   1524c:	andeq	r5, r1, r4, lsr #5
   15250:	andeq	r5, r1, r4, lsr #5
   15254:	andeq	r5, r1, r4, lsr #5
   15258:	andeq	r5, r1, ip, asr r2
   1525c:	mov	r0, sl
   15260:	mov	r1, #48	; 0x30
   15264:	bl	112b4 <strchr@plt>
   15268:	cmp	r0, #0
   1526c:	beq	152a4 <__assert_fail@plt+0x3ed0>
   15270:	ldrb	r0, [r6, #1]
   15274:	cmp	r0, #66	; 0x42
   15278:	cmpne	r0, #68	; 0x44
   1527c:	bne	1528c <__assert_fail@plt+0x3eb8>
   15280:	mov	r7, #2
   15284:	mov	r5, #1000	; 0x3e8
   15288:	b	152a4 <__assert_fail@plt+0x3ed0>
   1528c:	cmp	r0, #105	; 0x69
   15290:	bne	152a4 <__assert_fail@plt+0x3ed0>
   15294:	ldrb	r0, [r6, #2]
   15298:	mov	r7, #1
   1529c:	cmp	r0, #66	; 0x42
   152a0:	movweq	r7, #3
   152a4:	sub	r1, r4, #66	; 0x42
   152a8:	cmp	r1, #53	; 0x35
   152ac:	bhi	153a8 <__assert_fail@plt+0x3fd4>
   152b0:	mov	r0, #0
   152b4:	add	r2, pc, #0
   152b8:	ldr	pc, [r2, r1, lsl #2]
   152bc:	andeq	r5, r1, r0, lsl r4
   152c0:	andeq	r5, r1, r8, lsr #7
   152c4:	andeq	r5, r1, r8, lsr #7
   152c8:	andeq	r5, r1, ip, lsl r4
   152cc:	andeq	r5, r1, r8, lsr #7
   152d0:	muleq	r1, r4, r3
   152d4:	andeq	r5, r1, r8, lsr #7
   152d8:	andeq	r5, r1, r8, lsr #7
   152dc:	andeq	r5, r1, r8, lsr #7
   152e0:	andeq	r5, r1, r0, asr #7
   152e4:	andeq	r5, r1, r8, lsr #7
   152e8:	ldrdeq	r5, [r1], -r4
   152ec:	andeq	r5, r1, r8, lsr #7
   152f0:	andeq	r5, r1, r8, lsr #7
   152f4:	andeq	r5, r1, r0, lsr r4
   152f8:	andeq	r5, r1, r8, lsr #7
   152fc:	andeq	r5, r1, r8, lsr #7
   15300:	andeq	r5, r1, r8, lsr #7
   15304:	andeq	r5, r1, r8, ror #7
   15308:	andeq	r5, r1, r8, lsr #7
   1530c:	andeq	r5, r1, r8, lsr #7
   15310:	andeq	r5, r1, r8, lsr #7
   15314:	andeq	r5, r1, r8, lsr #7
   15318:	andeq	r5, r1, r4, asr #8
   1531c:	strdeq	r5, [r1], -ip
   15320:	andeq	r5, r1, r8, lsr #7
   15324:	andeq	r5, r1, r8, lsr #7
   15328:	andeq	r5, r1, r8, lsr #7
   1532c:	andeq	r5, r1, r8, lsr #7
   15330:	andeq	r5, r1, r8, lsr #7
   15334:	andeq	r5, r1, r8, lsr #7
   15338:	andeq	r5, r1, r8, lsr #7
   1533c:	andeq	r5, r1, r8, asr r4
   15340:	andeq	r5, r1, r0, ror r4
   15344:	andeq	r5, r1, r8, lsr #7
   15348:	andeq	r5, r1, r8, lsr #7
   1534c:	andeq	r5, r1, r8, lsr #7
   15350:	muleq	r1, r4, r3
   15354:	andeq	r5, r1, r8, lsr #7
   15358:	andeq	r5, r1, r8, lsr #7
   1535c:	andeq	r5, r1, r8, lsr #7
   15360:	andeq	r5, r1, r0, asr #7
   15364:	andeq	r5, r1, r8, lsr #7
   15368:	ldrdeq	r5, [r1], -r4
   1536c:	andeq	r5, r1, r8, lsr #7
   15370:	andeq	r5, r1, r8, lsr #7
   15374:	andeq	r5, r1, r8, lsr #7
   15378:	andeq	r5, r1, r8, lsr #7
   1537c:	andeq	r5, r1, r8, lsr #7
   15380:	andeq	r5, r1, r8, lsr #7
   15384:	andeq	r5, r1, r8, ror #7
   15388:	andeq	r5, r1, r8, lsr #7
   1538c:	andeq	r5, r1, r8, lsr #7
   15390:	andeq	r5, r1, r4, ror #8
   15394:	add	r0, sp, #8
   15398:	mov	r1, r5
   1539c:	mov	r2, #3
   153a0:	bl	15554 <__assert_fail@plt+0x4180>
   153a4:	b	15470 <__assert_fail@plt+0x409c>
   153a8:	ldr	r0, [sp, #8]
   153ac:	ldr	r1, [sp, #12]
   153b0:	ldr	r2, [sp, #4]
   153b4:	strd	r0, [r2]
   153b8:	orr	r8, r8, #2
   153bc:	b	1549c <__assert_fail@plt+0x40c8>
   153c0:	add	r0, sp, #8
   153c4:	mov	r1, r5
   153c8:	mov	r2, #1
   153cc:	bl	15554 <__assert_fail@plt+0x4180>
   153d0:	b	15470 <__assert_fail@plt+0x409c>
   153d4:	add	r0, sp, #8
   153d8:	mov	r1, r5
   153dc:	mov	r2, #2
   153e0:	bl	15554 <__assert_fail@plt+0x4180>
   153e4:	b	15470 <__assert_fail@plt+0x409c>
   153e8:	add	r0, sp, #8
   153ec:	mov	r1, r5
   153f0:	mov	r2, #4
   153f4:	bl	15554 <__assert_fail@plt+0x4180>
   153f8:	b	15470 <__assert_fail@plt+0x409c>
   153fc:	add	r0, sp, #8
   15400:	mov	r1, r5
   15404:	mov	r2, #7
   15408:	bl	15554 <__assert_fail@plt+0x4180>
   1540c:	b	15470 <__assert_fail@plt+0x409c>
   15410:	add	r0, sp, #8
   15414:	mov	r1, #1024	; 0x400
   15418:	b	1546c <__assert_fail@plt+0x4098>
   1541c:	add	r0, sp, #8
   15420:	mov	r1, r5
   15424:	mov	r2, #6
   15428:	bl	15554 <__assert_fail@plt+0x4180>
   1542c:	b	15470 <__assert_fail@plt+0x409c>
   15430:	add	r0, sp, #8
   15434:	mov	r1, r5
   15438:	mov	r2, #5
   1543c:	bl	15554 <__assert_fail@plt+0x4180>
   15440:	b	15470 <__assert_fail@plt+0x409c>
   15444:	add	r0, sp, #8
   15448:	mov	r1, r5
   1544c:	mov	r2, #8
   15450:	bl	15554 <__assert_fail@plt+0x4180>
   15454:	b	15470 <__assert_fail@plt+0x409c>
   15458:	add	r0, sp, #8
   1545c:	mov	r1, #512	; 0x200
   15460:	b	1546c <__assert_fail@plt+0x4098>
   15464:	add	r0, sp, #8
   15468:	mov	r1, #2
   1546c:	bl	154c8 <__assert_fail@plt+0x40f4>
   15470:	ldr	r1, [r9]
   15474:	add	r2, r1, r7
   15478:	str	r2, [r9]
   1547c:	ldrb	r1, [r1, r7]
   15480:	orr	r8, r0, r8
   15484:	cmp	r1, #0
   15488:	orrne	r8, r8, #2
   1548c:	ldr	r0, [sp, #8]
   15490:	ldr	r1, [sp, #12]
   15494:	ldr	r2, [sp, #4]
   15498:	strd	r0, [r2]
   1549c:	mov	r0, r8
   154a0:	sub	sp, fp, #28
   154a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154a8:	movw	r0, #27797	; 0x6c95
   154ac:	movt	r0, #1
   154b0:	movw	r1, #27835	; 0x6cbb
   154b4:	movt	r1, #1
   154b8:	movw	r3, #27932	; 0x6d1c
   154bc:	movt	r3, #1
   154c0:	mov	r2, #85	; 0x55
   154c4:	bl	113d4 <__assert_fail@plt>
   154c8:	push	{r4, r5, r6, r7, fp, lr}
   154cc:	add	fp, sp, #16
   154d0:	mov	r5, r1
   154d4:	mov	r4, r0
   154d8:	cmn	r1, #1
   154dc:	ble	15514 <__assert_fail@plt+0x4140>
   154e0:	cmp	r5, #0
   154e4:	beq	15534 <__assert_fail@plt+0x4160>
   154e8:	asr	r3, r5, #31
   154ec:	mvn	r6, #0
   154f0:	mvn	r0, #0
   154f4:	mvn	r1, #0
   154f8:	mov	r2, r5
   154fc:	bl	16078 <__assert_fail@plt+0x4ca4>
   15500:	ldrd	r2, [r4]
   15504:	subs	r0, r0, r2
   15508:	sbcs	r0, r1, r3
   1550c:	bcc	15524 <__assert_fail@plt+0x4150>
   15510:	b	15534 <__assert_fail@plt+0x4160>
   15514:	ldrd	r0, [r4]
   15518:	orrs	r0, r0, r1
   1551c:	beq	15534 <__assert_fail@plt+0x4160>
   15520:	mvn	r6, #0
   15524:	mov	r0, #1
   15528:	mvn	r7, #0
   1552c:	strd	r6, [r4]
   15530:	pop	{r4, r5, r6, r7, fp, pc}
   15534:	ldrd	r0, [r4]
   15538:	umull	r6, r2, r0, r5
   1553c:	asr	r3, r5, #31
   15540:	mla	r0, r0, r3, r2
   15544:	mla	r7, r1, r5, r0
   15548:	mov	r0, #0
   1554c:	strd	r6, [r4]
   15550:	pop	{r4, r5, r6, r7, fp, pc}
   15554:	push	{r4, r5, r6, r7, fp, lr}
   15558:	add	fp, sp, #16
   1555c:	cmp	r2, #0
   15560:	beq	15594 <__assert_fail@plt+0x41c0>
   15564:	mov	r4, r2
   15568:	mov	r5, r1
   1556c:	mov	r7, r0
   15570:	mov	r6, #0
   15574:	mov	r0, r7
   15578:	mov	r1, r5
   1557c:	bl	154c8 <__assert_fail@plt+0x40f4>
   15580:	orr	r6, r0, r6
   15584:	subs	r4, r4, #1
   15588:	bne	15574 <__assert_fail@plt+0x41a0>
   1558c:	mov	r0, r6
   15590:	pop	{r4, r5, r6, r7, fp, pc}
   15594:	mov	r6, #0
   15598:	mov	r0, r6
   1559c:	pop	{r4, r5, r6, r7, fp, pc}
   155a0:	clz	r2, r1
   155a4:	lsr	r2, r2, #5
   155a8:	clz	r3, r0
   155ac:	lsr	r3, r3, #5
   155b0:	orrs	r2, r3, r2
   155b4:	movwne	r1, #1
   155b8:	movwne	r0, #1
   155bc:	cmp	r1, #0
   155c0:	beq	155f0 <__assert_fail@plt+0x421c>
   155c4:	mvn	r2, #-2147483648	; 0x80000000
   155c8:	udiv	r2, r2, r1
   155cc:	cmp	r2, r0
   155d0:	bcs	155f0 <__assert_fail@plt+0x421c>
   155d4:	push	{fp, lr}
   155d8:	mov	fp, sp
   155dc:	bl	112c0 <__errno_location@plt>
   155e0:	mov	r1, #12
   155e4:	str	r1, [r0]
   155e8:	mov	r0, #0
   155ec:	pop	{fp, pc}
   155f0:	b	110e0 <calloc@plt>
   155f4:	cmp	r0, #0
   155f8:	movweq	r0, #1
   155fc:	cmn	r0, #1
   15600:	ble	15608 <__assert_fail@plt+0x4234>
   15604:	b	1123c <malloc@plt>
   15608:	push	{fp, lr}
   1560c:	mov	fp, sp
   15610:	bl	112c0 <__errno_location@plt>
   15614:	mov	r1, #12
   15618:	str	r1, [r0]
   1561c:	mov	r0, #0
   15620:	pop	{fp, pc}
   15624:	push	{fp, lr}
   15628:	mov	fp, sp
   1562c:	cmp	r0, #0
   15630:	beq	1564c <__assert_fail@plt+0x4278>
   15634:	cmp	r1, #0
   15638:	beq	15658 <__assert_fail@plt+0x4284>
   1563c:	cmn	r1, #1
   15640:	ble	15664 <__assert_fail@plt+0x4290>
   15644:	pop	{fp, lr}
   15648:	b	11188 <realloc@plt>
   1564c:	mov	r0, r1
   15650:	pop	{fp, lr}
   15654:	b	155f4 <__assert_fail@plt+0x4220>
   15658:	bl	122b4 <__assert_fail@plt+0xee0>
   1565c:	mov	r0, #0
   15660:	pop	{fp, pc}
   15664:	bl	112c0 <__errno_location@plt>
   15668:	mov	r1, #12
   1566c:	str	r1, [r0]
   15670:	mov	r0, #0
   15674:	pop	{fp, pc}
   15678:	mov	r1, r0
   1567c:	sub	r2, r0, #65	; 0x41
   15680:	mov	r0, #1
   15684:	cmp	r2, #26
   15688:	subcs	r2, r1, #97	; 0x61
   1568c:	cmpcs	r2, #26
   15690:	bcs	15698 <__assert_fail@plt+0x42c4>
   15694:	bx	lr
   15698:	sub	r1, r1, #48	; 0x30
   1569c:	cmp	r1, #10
   156a0:	movcs	r0, #0
   156a4:	bx	lr
   156a8:	mov	r1, r0
   156ac:	sub	r2, r0, #65	; 0x41
   156b0:	mov	r0, #1
   156b4:	cmp	r2, #26
   156b8:	subcs	r1, r1, #97	; 0x61
   156bc:	cmpcs	r1, #26
   156c0:	movcs	r0, #0
   156c4:	bx	lr
   156c8:	mov	r1, #0
   156cc:	cmp	r0, #128	; 0x80
   156d0:	movwcc	r1, #1
   156d4:	mov	r0, r1
   156d8:	bx	lr
   156dc:	sub	r1, r0, #9
   156e0:	clz	r1, r1
   156e4:	lsr	r1, r1, #5
   156e8:	sub	r0, r0, #32
   156ec:	clz	r0, r0
   156f0:	lsr	r0, r0, #5
   156f4:	orr	r0, r0, r1
   156f8:	bx	lr
   156fc:	mov	r1, r0
   15700:	mov	r0, #1
   15704:	cmp	r1, #32
   15708:	bxcc	lr
   1570c:	cmp	r1, #127	; 0x7f
   15710:	movne	r0, #0
   15714:	bx	lr
   15718:	sub	r1, r0, #48	; 0x30
   1571c:	mov	r0, #0
   15720:	cmp	r1, #10
   15724:	movwcc	r0, #1
   15728:	bx	lr
   1572c:	sub	r1, r0, #33	; 0x21
   15730:	mov	r0, #0
   15734:	cmp	r1, #94	; 0x5e
   15738:	movwcc	r0, #1
   1573c:	bx	lr
   15740:	sub	r1, r0, #97	; 0x61
   15744:	mov	r0, #0
   15748:	cmp	r1, #26
   1574c:	movwcc	r0, #1
   15750:	bx	lr
   15754:	sub	r1, r0, #32
   15758:	mov	r0, #0
   1575c:	cmp	r1, #95	; 0x5f
   15760:	movwcc	r0, #1
   15764:	bx	lr
   15768:	sub	r1, r0, #33	; 0x21
   1576c:	cmp	r1, #93	; 0x5d
   15770:	bhi	158fc <__assert_fail@plt+0x4528>
   15774:	mov	r0, #1
   15778:	add	r2, pc, #0
   1577c:	ldr	pc, [r2, r1, lsl #2]
   15780:	strdeq	r5, [r1], -r8
   15784:	strdeq	r5, [r1], -r8
   15788:	strdeq	r5, [r1], -r8
   1578c:	strdeq	r5, [r1], -r8
   15790:	strdeq	r5, [r1], -r8
   15794:	strdeq	r5, [r1], -r8
   15798:	strdeq	r5, [r1], -r8
   1579c:	strdeq	r5, [r1], -r8
   157a0:	strdeq	r5, [r1], -r8
   157a4:	strdeq	r5, [r1], -r8
   157a8:	strdeq	r5, [r1], -r8
   157ac:	strdeq	r5, [r1], -r8
   157b0:	strdeq	r5, [r1], -r8
   157b4:	strdeq	r5, [r1], -r8
   157b8:	strdeq	r5, [r1], -r8
   157bc:	strdeq	r5, [r1], -ip
   157c0:	strdeq	r5, [r1], -ip
   157c4:	strdeq	r5, [r1], -ip
   157c8:	strdeq	r5, [r1], -ip
   157cc:	strdeq	r5, [r1], -ip
   157d0:	strdeq	r5, [r1], -ip
   157d4:	strdeq	r5, [r1], -ip
   157d8:	strdeq	r5, [r1], -ip
   157dc:	strdeq	r5, [r1], -ip
   157e0:	strdeq	r5, [r1], -ip
   157e4:	strdeq	r5, [r1], -r8
   157e8:	strdeq	r5, [r1], -r8
   157ec:	strdeq	r5, [r1], -r8
   157f0:	strdeq	r5, [r1], -r8
   157f4:	strdeq	r5, [r1], -r8
   157f8:	strdeq	r5, [r1], -r8
   157fc:	strdeq	r5, [r1], -r8
   15800:	strdeq	r5, [r1], -ip
   15804:	strdeq	r5, [r1], -ip
   15808:	strdeq	r5, [r1], -ip
   1580c:	strdeq	r5, [r1], -ip
   15810:	strdeq	r5, [r1], -ip
   15814:	strdeq	r5, [r1], -ip
   15818:	strdeq	r5, [r1], -ip
   1581c:	strdeq	r5, [r1], -ip
   15820:	strdeq	r5, [r1], -ip
   15824:	strdeq	r5, [r1], -ip
   15828:	strdeq	r5, [r1], -ip
   1582c:	strdeq	r5, [r1], -ip
   15830:	strdeq	r5, [r1], -ip
   15834:	strdeq	r5, [r1], -ip
   15838:	strdeq	r5, [r1], -ip
   1583c:	strdeq	r5, [r1], -ip
   15840:	strdeq	r5, [r1], -ip
   15844:	strdeq	r5, [r1], -ip
   15848:	strdeq	r5, [r1], -ip
   1584c:	strdeq	r5, [r1], -ip
   15850:	strdeq	r5, [r1], -ip
   15854:	strdeq	r5, [r1], -ip
   15858:	strdeq	r5, [r1], -ip
   1585c:	strdeq	r5, [r1], -ip
   15860:	strdeq	r5, [r1], -ip
   15864:	strdeq	r5, [r1], -ip
   15868:	strdeq	r5, [r1], -r8
   1586c:	strdeq	r5, [r1], -r8
   15870:	strdeq	r5, [r1], -r8
   15874:	strdeq	r5, [r1], -r8
   15878:	strdeq	r5, [r1], -r8
   1587c:	strdeq	r5, [r1], -r8
   15880:	strdeq	r5, [r1], -ip
   15884:	strdeq	r5, [r1], -ip
   15888:	strdeq	r5, [r1], -ip
   1588c:	strdeq	r5, [r1], -ip
   15890:	strdeq	r5, [r1], -ip
   15894:	strdeq	r5, [r1], -ip
   15898:	strdeq	r5, [r1], -ip
   1589c:	strdeq	r5, [r1], -ip
   158a0:	strdeq	r5, [r1], -ip
   158a4:	strdeq	r5, [r1], -ip
   158a8:	strdeq	r5, [r1], -ip
   158ac:	strdeq	r5, [r1], -ip
   158b0:	strdeq	r5, [r1], -ip
   158b4:	strdeq	r5, [r1], -ip
   158b8:	strdeq	r5, [r1], -ip
   158bc:	strdeq	r5, [r1], -ip
   158c0:	strdeq	r5, [r1], -ip
   158c4:	strdeq	r5, [r1], -ip
   158c8:	strdeq	r5, [r1], -ip
   158cc:	strdeq	r5, [r1], -ip
   158d0:	strdeq	r5, [r1], -ip
   158d4:	strdeq	r5, [r1], -ip
   158d8:	strdeq	r5, [r1], -ip
   158dc:	strdeq	r5, [r1], -ip
   158e0:	strdeq	r5, [r1], -ip
   158e4:	strdeq	r5, [r1], -ip
   158e8:	strdeq	r5, [r1], -r8
   158ec:	strdeq	r5, [r1], -r8
   158f0:	strdeq	r5, [r1], -r8
   158f4:	strdeq	r5, [r1], -r8
   158f8:	bx	lr
   158fc:	mov	r0, #0
   15900:	bx	lr
   15904:	sub	r0, r0, #9
   15908:	cmp	r0, #23
   1590c:	movhi	r0, #0
   15910:	bxhi	lr
   15914:	bic	r0, r0, #-16777216	; 0xff000000
   15918:	movw	r1, #31
   1591c:	movt	r1, #128	; 0x80
   15920:	mov	r2, #1
   15924:	and	r0, r2, r1, lsr r0
   15928:	bx	lr
   1592c:	sub	r1, r0, #65	; 0x41
   15930:	mov	r0, #0
   15934:	cmp	r1, #26
   15938:	movwcc	r0, #1
   1593c:	bx	lr
   15940:	mov	r1, r0
   15944:	sub	r2, r0, #48	; 0x30
   15948:	mov	r0, #1
   1594c:	cmp	r2, #22
   15950:	bhi	15968 <__assert_fail@plt+0x4594>
   15954:	mov	ip, #1
   15958:	movw	r3, #1023	; 0x3ff
   1595c:	movt	r3, #126	; 0x7e
   15960:	tst	r3, ip, lsl r2
   15964:	bxne	lr
   15968:	sub	r1, r1, #97	; 0x61
   1596c:	cmp	r1, #6
   15970:	movcs	r0, #0
   15974:	bxcs	lr
   15978:	bx	lr
   1597c:	sub	r1, r0, #65	; 0x41
   15980:	cmp	r1, #26
   15984:	addcc	r0, r0, #32
   15988:	bx	lr
   1598c:	sub	r1, r0, #97	; 0x61
   15990:	cmp	r1, #26
   15994:	subcc	r0, r0, #32
   15998:	bx	lr
   1599c:	push	{r4, r5, r6, sl, fp, lr}
   159a0:	add	fp, sp, #16
   159a4:	mov	r4, r0
   159a8:	bl	111f4 <__fpending@plt>
   159ac:	mov	r5, r0
   159b0:	mov	r0, r4
   159b4:	bl	11200 <ferror_unlocked@plt>
   159b8:	mov	r6, r0
   159bc:	mov	r0, r4
   159c0:	bl	15a20 <__assert_fail@plt+0x464c>
   159c4:	cmp	r6, #0
   159c8:	beq	159ec <__assert_fail@plt+0x4618>
   159cc:	mvn	r4, #0
   159d0:	cmp	r0, #0
   159d4:	bne	15a18 <__assert_fail@plt+0x4644>
   159d8:	bl	112c0 <__errno_location@plt>
   159dc:	mov	r1, #0
   159e0:	str	r1, [r0]
   159e4:	mov	r0, r4
   159e8:	pop	{r4, r5, r6, sl, fp, pc}
   159ec:	cmp	r0, #0
   159f0:	mov	r4, r0
   159f4:	mvnne	r4, #0
   159f8:	cmp	r5, #0
   159fc:	bne	15a18 <__assert_fail@plt+0x4644>
   15a00:	cmp	r0, #0
   15a04:	beq	15a18 <__assert_fail@plt+0x4644>
   15a08:	bl	112c0 <__errno_location@plt>
   15a0c:	ldr	r0, [r0]
   15a10:	subs	r4, r0, #9
   15a14:	mvnne	r4, #0
   15a18:	mov	r0, r4
   15a1c:	pop	{r4, r5, r6, sl, fp, pc}
   15a20:	push	{r4, r5, fp, lr}
   15a24:	add	fp, sp, #8
   15a28:	sub	sp, sp, #8
   15a2c:	mov	r4, r0
   15a30:	bl	112fc <fileno@plt>
   15a34:	cmn	r0, #1
   15a38:	ble	15ab0 <__assert_fail@plt+0x46dc>
   15a3c:	mov	r0, r4
   15a40:	bl	11254 <__freading@plt>
   15a44:	cmp	r0, #0
   15a48:	beq	15a74 <__assert_fail@plt+0x46a0>
   15a4c:	mov	r0, r4
   15a50:	bl	112fc <fileno@plt>
   15a54:	mov	r1, #1
   15a58:	str	r1, [sp]
   15a5c:	mov	r2, #0
   15a60:	mov	r3, #0
   15a64:	bl	111d0 <lseek64@plt>
   15a68:	and	r0, r0, r1
   15a6c:	cmn	r0, #1
   15a70:	beq	15ab0 <__assert_fail@plt+0x46dc>
   15a74:	mov	r0, r4
   15a78:	bl	15ac0 <__assert_fail@plt+0x46ec>
   15a7c:	cmp	r0, #0
   15a80:	beq	15ab0 <__assert_fail@plt+0x46dc>
   15a84:	bl	112c0 <__errno_location@plt>
   15a88:	ldr	r5, [r0]
   15a8c:	mov	r0, r4
   15a90:	bl	11320 <fclose@plt>
   15a94:	cmp	r5, #0
   15a98:	beq	15aa8 <__assert_fail@plt+0x46d4>
   15a9c:	bl	112c0 <__errno_location@plt>
   15aa0:	str	r5, [r0]
   15aa4:	mvn	r0, #0
   15aa8:	sub	sp, fp, #8
   15aac:	pop	{r4, r5, fp, pc}
   15ab0:	mov	r0, r4
   15ab4:	sub	sp, fp, #8
   15ab8:	pop	{r4, r5, fp, lr}
   15abc:	b	11320 <fclose@plt>
   15ac0:	push	{r4, sl, fp, lr}
   15ac4:	add	fp, sp, #8
   15ac8:	mov	r4, r0
   15acc:	cmp	r0, #0
   15ad0:	beq	15ae8 <__assert_fail@plt+0x4714>
   15ad4:	mov	r0, r4
   15ad8:	bl	11254 <__freading@plt>
   15adc:	cmp	r0, #0
   15ae0:	movne	r0, r4
   15ae4:	blne	15af4 <__assert_fail@plt+0x4720>
   15ae8:	mov	r0, r4
   15aec:	pop	{r4, sl, fp, lr}
   15af0:	b	11134 <fflush@plt>
   15af4:	push	{fp, lr}
   15af8:	mov	fp, sp
   15afc:	sub	sp, sp, #8
   15b00:	ldrb	r1, [r0, #1]
   15b04:	tst	r1, #1
   15b08:	beq	15b20 <__assert_fail@plt+0x474c>
   15b0c:	mov	r1, #1
   15b10:	str	r1, [sp]
   15b14:	mov	r2, #0
   15b18:	mov	r3, #0
   15b1c:	bl	15b28 <__assert_fail@plt+0x4754>
   15b20:	mov	sp, fp
   15b24:	pop	{fp, pc}
   15b28:	push	{r4, r5, r6, r7, fp, lr}
   15b2c:	add	fp, sp, #16
   15b30:	sub	sp, sp, #8
   15b34:	mov	r5, r3
   15b38:	mov	r6, r2
   15b3c:	mov	r4, r0
   15b40:	ldr	r0, [r0, #4]
   15b44:	ldr	r1, [r4, #8]
   15b48:	cmp	r1, r0
   15b4c:	bne	15b68 <__assert_fail@plt+0x4794>
   15b50:	ldrd	r0, [r4, #16]
   15b54:	cmp	r1, r0
   15b58:	bne	15b68 <__assert_fail@plt+0x4794>
   15b5c:	ldr	r0, [r4, #36]	; 0x24
   15b60:	cmp	r0, #0
   15b64:	beq	15b80 <__assert_fail@plt+0x47ac>
   15b68:	mov	r0, r4
   15b6c:	mov	r2, r6
   15b70:	mov	r3, r5
   15b74:	sub	sp, fp, #16
   15b78:	pop	{r4, r5, r6, r7, fp, lr}
   15b7c:	b	1132c <fseeko64@plt>
   15b80:	ldr	r7, [fp, #8]
   15b84:	mov	r0, r4
   15b88:	bl	112fc <fileno@plt>
   15b8c:	str	r7, [sp]
   15b90:	mov	r2, r6
   15b94:	mov	r3, r5
   15b98:	bl	111d0 <lseek64@plt>
   15b9c:	and	r2, r0, r1
   15ba0:	cmn	r2, #1
   15ba4:	beq	15bc4 <__assert_fail@plt+0x47f0>
   15ba8:	strd	r0, [r4, #80]	; 0x50
   15bac:	ldr	r0, [r4]
   15bb0:	bic	r0, r0, #16
   15bb4:	str	r0, [r4]
   15bb8:	mov	r0, #0
   15bbc:	sub	sp, fp, #16
   15bc0:	pop	{r4, r5, r6, r7, fp, pc}
   15bc4:	mvn	r0, #0
   15bc8:	sub	sp, fp, #16
   15bcc:	pop	{r4, r5, r6, r7, fp, pc}
   15bd0:	push	{fp, lr}
   15bd4:	mov	fp, sp
   15bd8:	bl	112c0 <__errno_location@plt>
   15bdc:	mov	r1, #12
   15be0:	str	r1, [r0]
   15be4:	mov	r0, #0
   15be8:	pop	{fp, pc}
   15bec:	b	155f4 <__assert_fail@plt+0x4220>
   15bf0:	cmp	r1, #0
   15bf4:	orreq	r1, r1, #1
   15bf8:	b	15624 <__assert_fail@plt+0x4250>
   15bfc:	b	155a0 <__assert_fail@plt+0x41cc>
   15c00:	clz	r3, r2
   15c04:	lsr	ip, r3, #5
   15c08:	clz	r3, r1
   15c0c:	lsr	r3, r3, #5
   15c10:	orrs	r3, r3, ip
   15c14:	movwne	r1, #1
   15c18:	movwne	r2, #1
   15c1c:	b	15f2c <__assert_fail@plt+0x4b58>
   15c20:	push	{r4, r5, r6, sl, fp, lr}
   15c24:	add	fp, sp, #16
   15c28:	mov	r4, r1
   15c2c:	mov	r5, r0
   15c30:	mov	r0, #0
   15c34:	strb	r0, [r2, #20]
   15c38:	add	r6, r2, #19
   15c3c:	mov	r0, r5
   15c40:	mov	r1, r4
   15c44:	mov	r2, #10
   15c48:	mov	r3, #0
   15c4c:	bl	16078 <__assert_fail@plt+0x4ca4>
   15c50:	add	r2, r0, r0, lsl #2
   15c54:	sub	r2, r5, r2, lsl #1
   15c58:	orr	r2, r2, #48	; 0x30
   15c5c:	strb	r2, [r6], #-1
   15c60:	rsbs	r2, r5, #9
   15c64:	rscs	r2, r4, #0
   15c68:	mov	r5, r0
   15c6c:	mov	r4, r1
   15c70:	bcc	15c3c <__assert_fail@plt+0x4868>
   15c74:	add	r0, r6, #1
   15c78:	pop	{r4, r5, r6, sl, fp, pc}
   15c7c:	push	{fp, lr}
   15c80:	mov	fp, sp
   15c84:	mov	r0, #14
   15c88:	bl	11368 <nl_langinfo@plt>
   15c8c:	movw	r1, #25356	; 0x630c
   15c90:	movt	r1, #1
   15c94:	cmp	r0, #0
   15c98:	movne	r1, r0
   15c9c:	ldrb	r2, [r1]
   15ca0:	movw	r0, #28011	; 0x6d6b
   15ca4:	movt	r0, #1
   15ca8:	cmp	r2, #0
   15cac:	movne	r0, r1
   15cb0:	pop	{fp, pc}
   15cb4:	push	{r4, r5, r6, r7, fp, lr}
   15cb8:	add	fp, sp, #16
   15cbc:	sub	sp, sp, #8
   15cc0:	mov	r7, r2
   15cc4:	mov	r4, r1
   15cc8:	add	r5, sp, #4
   15ccc:	cmp	r0, #0
   15cd0:	movne	r5, r0
   15cd4:	mov	r0, r5
   15cd8:	bl	1120c <mbrtowc@plt>
   15cdc:	mov	r6, r0
   15ce0:	cmp	r7, #0
   15ce4:	beq	15d0c <__assert_fail@plt+0x4938>
   15ce8:	cmn	r6, #2
   15cec:	bcc	15d0c <__assert_fail@plt+0x4938>
   15cf0:	mov	r0, #0
   15cf4:	bl	15f68 <__assert_fail@plt+0x4b94>
   15cf8:	cmp	r0, #0
   15cfc:	bne	15d0c <__assert_fail@plt+0x4938>
   15d00:	ldrb	r0, [r4]
   15d04:	str	r0, [r5]
   15d08:	mov	r6, #1
   15d0c:	mov	r0, r6
   15d10:	sub	sp, fp, #16
   15d14:	pop	{r4, r5, r6, r7, fp, pc}
   15d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d1c:	add	fp, sp, #28
   15d20:	sub	sp, sp, #12
   15d24:	mov	r5, r2
   15d28:	mov	sl, r1
   15d2c:	cmp	r0, #0
   15d30:	beq	15dc8 <__assert_fail@plt+0x49f4>
   15d34:	mov	r7, r0
   15d38:	mov	r0, #10
   15d3c:	str	r0, [sp, #8]
   15d40:	mov	r0, #0
   15d44:	mov	r1, #10
   15d48:	bl	15f00 <__assert_fail@plt+0x4b2c>
   15d4c:	mvn	r9, #0
   15d50:	cmp	r0, #0
   15d54:	beq	15ef4 <__assert_fail@plt+0x4b20>
   15d58:	mov	r4, r0
   15d5c:	str	r5, [sp, #4]
   15d60:	add	r5, sp, #8
   15d64:	ldr	r8, [sp, #8]
   15d68:	mov	r0, r7
   15d6c:	mov	r1, sl
   15d70:	mov	r2, r4
   15d74:	mov	r3, r5
   15d78:	bl	112d8 <getgrouplist@plt>
   15d7c:	mov	r6, r0
   15d80:	cmn	r0, #1
   15d84:	bgt	15d98 <__assert_fail@plt+0x49c4>
   15d88:	ldr	r0, [sp, #8]
   15d8c:	cmp	r8, r0
   15d90:	lsleq	r0, r0, #1
   15d94:	streq	r0, [sp, #8]
   15d98:	ldr	r1, [sp, #8]
   15d9c:	mov	r0, r4
   15da0:	bl	15f00 <__assert_fail@plt+0x4b2c>
   15da4:	cmp	r0, #0
   15da8:	beq	15e90 <__assert_fail@plt+0x4abc>
   15dac:	cmp	r6, #0
   15db0:	mov	r4, r0
   15db4:	bmi	15d64 <__assert_fail@plt+0x4990>
   15db8:	ldr	r1, [sp, #4]
   15dbc:	str	r0, [r1]
   15dc0:	ldr	r9, [sp, #8]
   15dc4:	b	15ef4 <__assert_fail@plt+0x4b20>
   15dc8:	mov	r0, #0
   15dcc:	mov	r1, #0
   15dd0:	bl	11380 <getgroups@plt>
   15dd4:	str	r0, [sp, #8]
   15dd8:	cmn	r0, #1
   15ddc:	ble	15e9c <__assert_fail@plt+0x4ac8>
   15de0:	cmn	sl, #1
   15de4:	bne	15df0 <__assert_fail@plt+0x4a1c>
   15de8:	cmp	r0, #0
   15dec:	bne	15df8 <__assert_fail@plt+0x4a24>
   15df0:	add	r0, r0, #1
   15df4:	str	r0, [sp, #8]
   15df8:	ldr	r1, [sp, #8]
   15dfc:	mov	r0, #0
   15e00:	bl	15f00 <__assert_fail@plt+0x4b2c>
   15e04:	cmp	r0, #0
   15e08:	beq	15edc <__assert_fail@plt+0x4b08>
   15e0c:	mov	r7, r0
   15e10:	mvn	r9, #0
   15e14:	subs	r1, sl, r9
   15e18:	movwne	r1, #1
   15e1c:	ldr	r0, [sp, #8]
   15e20:	sub	r0, r0, r1
   15e24:	add	r1, r7, r1, lsl #2
   15e28:	bl	11380 <getgroups@plt>
   15e2c:	cmn	r0, #1
   15e30:	ble	15ee4 <__assert_fail@plt+0x4b10>
   15e34:	cmn	sl, #1
   15e38:	strne	sl, [r7]
   15e3c:	addne	r0, r0, #1
   15e40:	str	r7, [r5]
   15e44:	cmp	r0, #2
   15e48:	blt	15ef0 <__assert_fail@plt+0x4b1c>
   15e4c:	add	r1, r7, r0, lsl #2
   15e50:	mov	r2, r7
   15e54:	ldr	r3, [r2], #4
   15e58:	mov	r9, r0
   15e5c:	b	15e70 <__assert_fail@plt+0x4a9c>
   15e60:	sub	r9, r9, #1
   15e64:	add	r2, r2, #4
   15e68:	cmp	r2, r1
   15e6c:	bcs	15ef4 <__assert_fail@plt+0x4b20>
   15e70:	ldr	r0, [r2]
   15e74:	cmp	r0, r3
   15e78:	beq	15e60 <__assert_fail@plt+0x4a8c>
   15e7c:	ldr	r6, [r7]
   15e80:	cmp	r0, r6
   15e84:	beq	15e60 <__assert_fail@plt+0x4a8c>
   15e88:	str	r0, [r7, #4]!
   15e8c:	b	15e64 <__assert_fail@plt+0x4a90>
   15e90:	mov	r0, r4
   15e94:	bl	122b4 <__assert_fail@plt+0xee0>
   15e98:	b	15ef4 <__assert_fail@plt+0x4b20>
   15e9c:	bl	112c0 <__errno_location@plt>
   15ea0:	ldr	r0, [r0]
   15ea4:	mvn	r9, #0
   15ea8:	cmp	r0, #38	; 0x26
   15eac:	bne	15ef4 <__assert_fail@plt+0x4b20>
   15eb0:	mov	r0, #0
   15eb4:	mov	r1, #1
   15eb8:	bl	15f00 <__assert_fail@plt+0x4b2c>
   15ebc:	cmp	r0, #0
   15ec0:	beq	15ef4 <__assert_fail@plt+0x4b20>
   15ec4:	str	r0, [r5]
   15ec8:	str	sl, [r0]
   15ecc:	mvn	r0, #0
   15ed0:	subs	r9, sl, r0
   15ed4:	movwne	r9, #1
   15ed8:	b	15ef4 <__assert_fail@plt+0x4b20>
   15edc:	mvn	r9, #0
   15ee0:	b	15ef4 <__assert_fail@plt+0x4b20>
   15ee4:	mov	r0, r7
   15ee8:	bl	122b4 <__assert_fail@plt+0xee0>
   15eec:	b	15ef4 <__assert_fail@plt+0x4b20>
   15ef0:	mov	r9, r0
   15ef4:	mov	r0, r9
   15ef8:	sub	sp, fp, #28
   15efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f00:	cmp	r1, #536870912	; 0x20000000
   15f04:	bcc	15f24 <__assert_fail@plt+0x4b50>
   15f08:	push	{fp, lr}
   15f0c:	mov	fp, sp
   15f10:	bl	112c0 <__errno_location@plt>
   15f14:	mov	r1, #12
   15f18:	str	r1, [r0]
   15f1c:	mov	r0, #0
   15f20:	pop	{fp, pc}
   15f24:	lsl	r1, r1, #2
   15f28:	b	15624 <__assert_fail@plt+0x4250>
   15f2c:	cmp	r2, #0
   15f30:	beq	15f60 <__assert_fail@plt+0x4b8c>
   15f34:	mvn	r3, #0
   15f38:	udiv	r3, r3, r2
   15f3c:	cmp	r3, r1
   15f40:	bcs	15f60 <__assert_fail@plt+0x4b8c>
   15f44:	push	{fp, lr}
   15f48:	mov	fp, sp
   15f4c:	bl	112c0 <__errno_location@plt>
   15f50:	mov	r1, #12
   15f54:	str	r1, [r0]
   15f58:	mov	r0, #0
   15f5c:	pop	{fp, pc}
   15f60:	mul	r1, r2, r1
   15f64:	b	15624 <__assert_fail@plt+0x4250>
   15f68:	push	{r4, sl, fp, lr}
   15f6c:	add	fp, sp, #8
   15f70:	sub	sp, sp, #264	; 0x108
   15f74:	add	r1, sp, #7
   15f78:	movw	r2, #257	; 0x101
   15f7c:	bl	15fd4 <__assert_fail@plt+0x4c00>
   15f80:	mov	r4, #0
   15f84:	cmp	r0, #0
   15f88:	bne	15fc8 <__assert_fail@plt+0x4bf4>
   15f8c:	add	r0, sp, #7
   15f90:	movw	r1, #28017	; 0x6d71
   15f94:	movt	r1, #1
   15f98:	mov	r2, #2
   15f9c:	bl	11290 <bcmp@plt>
   15fa0:	cmp	r0, #0
   15fa4:	beq	15fc8 <__assert_fail@plt+0x4bf4>
   15fa8:	add	r0, sp, #7
   15fac:	movw	r1, #28019	; 0x6d73
   15fb0:	movt	r1, #1
   15fb4:	mov	r2, #6
   15fb8:	bl	11290 <bcmp@plt>
   15fbc:	mov	r4, r0
   15fc0:	cmp	r0, #0
   15fc4:	movwne	r4, #1
   15fc8:	mov	r0, r4
   15fcc:	sub	sp, fp, #8
   15fd0:	pop	{r4, sl, fp, pc}
   15fd4:	b	15fd8 <__assert_fail@plt+0x4c04>
   15fd8:	push	{r4, r5, r6, r7, fp, lr}
   15fdc:	add	fp, sp, #16
   15fe0:	mov	r6, r2
   15fe4:	mov	r4, r1
   15fe8:	bl	16070 <__assert_fail@plt+0x4c9c>
   15fec:	cmp	r0, #0
   15ff0:	beq	16020 <__assert_fail@plt+0x4c4c>
   15ff4:	mov	r7, r0
   15ff8:	bl	112a8 <strlen@plt>
   15ffc:	cmp	r0, r6
   16000:	bcs	1603c <__assert_fail@plt+0x4c68>
   16004:	add	r2, r0, #1
   16008:	mov	r0, r4
   1600c:	mov	r1, r7
   16010:	bl	11158 <memcpy@plt>
   16014:	mov	r5, #0
   16018:	mov	r0, r5
   1601c:	pop	{r4, r5, r6, r7, fp, pc}
   16020:	mov	r5, #22
   16024:	cmp	r6, #0
   16028:	beq	16064 <__assert_fail@plt+0x4c90>
   1602c:	mov	r0, #0
   16030:	strb	r0, [r4]
   16034:	mov	r0, r5
   16038:	pop	{r4, r5, r6, r7, fp, pc}
   1603c:	mov	r5, #34	; 0x22
   16040:	cmp	r6, #0
   16044:	beq	16064 <__assert_fail@plt+0x4c90>
   16048:	sub	r6, r6, #1
   1604c:	mov	r0, r4
   16050:	mov	r1, r7
   16054:	mov	r2, r6
   16058:	bl	11158 <memcpy@plt>
   1605c:	mov	r0, #0
   16060:	strb	r0, [r4, r6]
   16064:	mov	r0, r5
   16068:	pop	{r4, r5, r6, r7, fp, pc}
   1606c:	b	16070 <__assert_fail@plt+0x4c9c>
   16070:	mov	r1, #0
   16074:	b	11344 <setlocale@plt>
   16078:	cmp	r3, #0
   1607c:	cmpeq	r2, #0
   16080:	bne	16098 <__assert_fail@plt+0x4cc4>
   16084:	cmp	r1, #0
   16088:	cmpeq	r0, #0
   1608c:	mvnne	r1, #0
   16090:	mvnne	r0, #0
   16094:	b	160b4 <__assert_fail@plt+0x4ce0>
   16098:	sub	sp, sp, #8
   1609c:	push	{sp, lr}
   160a0:	bl	160c4 <__assert_fail@plt+0x4cf0>
   160a4:	ldr	lr, [sp, #4]
   160a8:	add	sp, sp, #8
   160ac:	pop	{r2, r3}
   160b0:	bx	lr
   160b4:	push	{r1, lr}
   160b8:	mov	r0, #8
   160bc:	bl	11104 <raise@plt>
   160c0:	pop	{r1, pc}
   160c4:	cmp	r1, r3
   160c8:	cmpeq	r0, r2
   160cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160d0:	mov	r4, r0
   160d4:	movcc	r0, #0
   160d8:	mov	r5, r1
   160dc:	ldr	lr, [sp, #36]	; 0x24
   160e0:	movcc	r1, r0
   160e4:	bcc	161e0 <__assert_fail@plt+0x4e0c>
   160e8:	cmp	r3, #0
   160ec:	clzeq	ip, r2
   160f0:	clzne	ip, r3
   160f4:	addeq	ip, ip, #32
   160f8:	cmp	r5, #0
   160fc:	clzeq	r1, r4
   16100:	addeq	r1, r1, #32
   16104:	clzne	r1, r5
   16108:	sub	ip, ip, r1
   1610c:	sub	sl, ip, #32
   16110:	lsl	r9, r3, ip
   16114:	rsb	fp, ip, #32
   16118:	orr	r9, r9, r2, lsl sl
   1611c:	orr	r9, r9, r2, lsr fp
   16120:	lsl	r8, r2, ip
   16124:	cmp	r5, r9
   16128:	cmpeq	r4, r8
   1612c:	movcc	r0, #0
   16130:	movcc	r1, r0
   16134:	bcc	16150 <__assert_fail@plt+0x4d7c>
   16138:	mov	r0, #1
   1613c:	subs	r4, r4, r8
   16140:	lsl	r1, r0, sl
   16144:	orr	r1, r1, r0, lsr fp
   16148:	lsl	r0, r0, ip
   1614c:	sbc	r5, r5, r9
   16150:	cmp	ip, #0
   16154:	beq	161e0 <__assert_fail@plt+0x4e0c>
   16158:	lsr	r6, r8, #1
   1615c:	orr	r6, r6, r9, lsl #31
   16160:	lsr	r7, r9, #1
   16164:	mov	r2, ip
   16168:	b	1618c <__assert_fail@plt+0x4db8>
   1616c:	subs	r3, r4, r6
   16170:	sbc	r8, r5, r7
   16174:	adds	r3, r3, r3
   16178:	adc	r8, r8, r8
   1617c:	adds	r4, r3, #1
   16180:	adc	r5, r8, #0
   16184:	subs	r2, r2, #1
   16188:	beq	161a8 <__assert_fail@plt+0x4dd4>
   1618c:	cmp	r5, r7
   16190:	cmpeq	r4, r6
   16194:	bcs	1616c <__assert_fail@plt+0x4d98>
   16198:	adds	r4, r4, r4
   1619c:	adc	r5, r5, r5
   161a0:	subs	r2, r2, #1
   161a4:	bne	1618c <__assert_fail@plt+0x4db8>
   161a8:	lsr	r3, r4, ip
   161ac:	orr	r3, r3, r5, lsl fp
   161b0:	lsr	r2, r5, ip
   161b4:	orr	r3, r3, r5, lsr sl
   161b8:	adds	r0, r0, r4
   161bc:	mov	r4, r3
   161c0:	lsl	r3, r2, ip
   161c4:	orr	r3, r3, r4, lsl sl
   161c8:	lsl	ip, r4, ip
   161cc:	orr	r3, r3, r4, lsr fp
   161d0:	adc	r1, r1, r5
   161d4:	subs	r0, r0, ip
   161d8:	mov	r5, r2
   161dc:	sbc	r1, r1, r3
   161e0:	cmp	lr, #0
   161e4:	strdne	r4, [lr]
   161e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161f0:	mov	r7, r0
   161f4:	ldr	r6, [pc, #72]	; 16244 <__assert_fail@plt+0x4e70>
   161f8:	ldr	r5, [pc, #72]	; 16248 <__assert_fail@plt+0x4e74>
   161fc:	add	r6, pc, r6
   16200:	add	r5, pc, r5
   16204:	sub	r6, r6, r5
   16208:	mov	r8, r1
   1620c:	mov	r9, r2
   16210:	bl	110c0 <calloc@plt-0x20>
   16214:	asrs	r6, r6, #2
   16218:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1621c:	mov	r4, #0
   16220:	add	r4, r4, #1
   16224:	ldr	r3, [r5], #4
   16228:	mov	r2, r9
   1622c:	mov	r1, r8
   16230:	mov	r0, r7
   16234:	blx	r3
   16238:	cmp	r6, r4
   1623c:	bne	16220 <__assert_fail@plt+0x4e4c>
   16240:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16244:	andeq	r0, r1, r8, lsl #26
   16248:	andeq	r0, r1, r0, lsl #26
   1624c:	bx	lr
   16250:	ldr	r3, [pc, #12]	; 16264 <__assert_fail@plt+0x4e90>
   16254:	mov	r1, #0
   16258:	add	r3, pc, r3
   1625c:	ldr	r2, [r3]
   16260:	b	112cc <__cxa_atexit@plt>
   16264:			; <UNDEFINED> instruction: 0x00010eb4

Disassembly of section .fini:

00016268 <.fini>:
   16268:	push	{r3, lr}
   1626c:	pop	{r3, pc}
