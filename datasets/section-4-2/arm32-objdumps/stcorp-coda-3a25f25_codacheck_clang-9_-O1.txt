
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010d08 <.init>:
   10d08:	push	{r3, lr}
   10d0c:	bl	10ed8 <_start@@Base+0x3c>
   10d10:	pop	{r3, pc}

Disassembly of section .plt:

00010d14 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10d14:	push	{lr}		; (str lr, [sp, #-4]!)
   10d18:	ldr	lr, [pc, #4]	; 10d24 <coda_set_option_perform_boundary_checks@plt-0x4>
   10d1c:	add	lr, pc, lr
   10d20:	ldr	pc, [lr, #8]!
   10d24:	ldrdeq	r2, [r1], -ip

00010d28 <coda_set_option_perform_boundary_checks@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #73728	; 0x12000
   10d30:	ldr	pc, [ip, #732]!	; 0x2dc

00010d34 <strcmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #73728	; 0x12000
   10d3c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d40 <printf@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #73728	; 0x12000
   10d48:	ldr	pc, [ip, #716]!	; 0x2cc

00010d4c <coda_set_error@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #73728	; 0x12000
   10d54:	ldr	pc, [ip, #708]!	; 0x2c4

00010d58 <coda_open@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #73728	; 0x12000
   10d60:	ldr	pc, [ip, #700]!	; 0x2bc

00010d64 <fflush@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #73728	; 0x12000
   10d6c:	ldr	pc, [ip, #692]!	; 0x2b4

00010d70 <coda_set_option_use_mmap@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #73728	; 0x12000
   10d78:	ldr	pc, [ip, #684]!	; 0x2ac

00010d7c <coda_cursor_print_path@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #73728	; 0x12000
   10d84:	ldr	pc, [ip, #676]!	; 0x2a4

00010d88 <coda_set_definition_path_conditional@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #73728	; 0x12000
   10d90:	ldr	pc, [ip, #668]!	; 0x29c

00010d94 <getchar@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #73728	; 0x12000
   10d9c:	ldr	pc, [ip, #660]!	; 0x294

00010da0 <coda_set_definition_path@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #73728	; 0x12000
   10da8:	ldr	pc, [ip, #652]!	; 0x28c

00010dac <coda_recognize_file@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #73728	; 0x12000
   10db4:	ldr	pc, [ip, #644]!	; 0x284

00010db8 <fwrite@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #73728	; 0x12000
   10dc0:	ldr	pc, [ip, #636]!	; 0x27c

00010dc4 <coda_type_get_format_name@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #73728	; 0x12000
   10dcc:	ldr	pc, [ip, #628]!	; 0x274

00010dd0 <coda_done@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #73728	; 0x12000
   10dd8:	ldr	pc, [ip, #620]!	; 0x26c

00010ddc <puts@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #73728	; 0x12000
   10de4:	ldr	pc, [ip, #612]!	; 0x264

00010de8 <coda_product_check@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #73728	; 0x12000
   10df0:	ldr	pc, [ip, #604]!	; 0x25c

00010df4 <__libc_start_main@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #73728	; 0x12000
   10dfc:	ldr	pc, [ip, #596]!	; 0x254

00010e00 <__gmon_start__@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #73728	; 0x12000
   10e08:	ldr	pc, [ip, #588]!	; 0x24c

00010e0c <exit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #73728	; 0x12000
   10e14:	ldr	pc, [ip, #580]!	; 0x244

00010e18 <fprintf@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #73728	; 0x12000
   10e20:	ldr	pc, [ip, #572]!	; 0x23c

00010e24 <coda_init@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #73728	; 0x12000
   10e2c:	ldr	pc, [ip, #564]!	; 0x234

00010e30 <ungetc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #73728	; 0x12000
   10e38:	ldr	pc, [ip, #556]!	; 0x22c

00010e3c <coda_set_option_perform_conversions@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #73728	; 0x12000
   10e44:	ldr	pc, [ip, #548]!	; 0x224

00010e48 <putchar@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #73728	; 0x12000
   10e50:	ldr	pc, [ip, #540]!	; 0x21c

00010e54 <coda_close@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #73728	; 0x12000
   10e5c:	ldr	pc, [ip, #532]!	; 0x214

00010e60 <coda_errno_to_string@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #73728	; 0x12000
   10e68:	ldr	pc, [ip, #524]!	; 0x20c

00010e6c <coda_get_libcoda_version@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #73728	; 0x12000
   10e74:	ldr	pc, [ip, #516]!	; 0x204

00010e78 <coda_get_errno@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #73728	; 0x12000
   10e80:	ldr	pc, [ip, #508]!	; 0x1fc

00010e84 <abort@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #73728	; 0x12000
   10e8c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e90 <__assert_fail@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #73728	; 0x12000
   10e98:	ldr	pc, [ip, #492]!	; 0x1ec

Disassembly of section .text:

00010e9c <_start@@Base>:
   10e9c:	mov	fp, #0
   10ea0:	mov	lr, #0
   10ea4:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea8:	mov	r2, sp
   10eac:	push	{r2}		; (str r2, [sp, #-4]!)
   10eb0:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb4:	ldr	ip, [pc, #16]	; 10ecc <_start@@Base+0x30>
   10eb8:	push	{ip}		; (str ip, [sp, #-4]!)
   10ebc:	ldr	r0, [pc, #12]	; 10ed0 <_start@@Base+0x34>
   10ec0:	ldr	r3, [pc, #12]	; 10ed4 <_start@@Base+0x38>
   10ec4:	bl	10df4 <__libc_start_main@plt>
   10ec8:	bl	10e84 <abort@plt>
   10ecc:	andeq	r1, r1, r8, lsl #16
   10ed0:	andeq	r0, r1, ip, lsl #31
   10ed4:	andeq	r1, r1, r8, lsr #15
   10ed8:	ldr	r3, [pc, #20]	; 10ef4 <_start@@Base+0x58>
   10edc:	ldr	r2, [pc, #20]	; 10ef8 <_start@@Base+0x5c>
   10ee0:	add	r3, pc, r3
   10ee4:	ldr	r2, [r3, r2]
   10ee8:	cmp	r2, #0
   10eec:	bxeq	lr
   10ef0:	b	10e00 <__gmon_start__@plt>
   10ef4:	andeq	r2, r1, r8, lsl r1
   10ef8:	andeq	r0, r0, r8, lsl #1
   10efc:	ldr	r0, [pc, #24]	; 10f1c <_start@@Base+0x80>
   10f00:	ldr	r3, [pc, #24]	; 10f20 <_start@@Base+0x84>
   10f04:	cmp	r3, r0
   10f08:	bxeq	lr
   10f0c:	ldr	r3, [pc, #16]	; 10f24 <_start@@Base+0x88>
   10f10:	cmp	r3, #0
   10f14:	bxeq	lr
   10f18:	bx	r3
   10f1c:	muleq	r2, r4, r0
   10f20:	muleq	r2, r4, r0
   10f24:	andeq	r0, r0, r0
   10f28:	ldr	r0, [pc, #36]	; 10f54 <_start@@Base+0xb8>
   10f2c:	ldr	r1, [pc, #36]	; 10f58 <_start@@Base+0xbc>
   10f30:	sub	r1, r1, r0
   10f34:	asr	r1, r1, #2
   10f38:	add	r1, r1, r1, lsr #31
   10f3c:	asrs	r1, r1, #1
   10f40:	bxeq	lr
   10f44:	ldr	r3, [pc, #16]	; 10f5c <_start@@Base+0xc0>
   10f48:	cmp	r3, #0
   10f4c:	bxeq	lr
   10f50:	bx	r3
   10f54:	muleq	r2, r4, r0
   10f58:	muleq	r2, r4, r0
   10f5c:	andeq	r0, r0, r0
   10f60:	push	{r4, lr}
   10f64:	ldr	r4, [pc, #24]	; 10f84 <_start@@Base+0xe8>
   10f68:	ldrb	r3, [r4]
   10f6c:	cmp	r3, #0
   10f70:	popne	{r4, pc}
   10f74:	bl	10efc <_start@@Base+0x60>
   10f78:	mov	r3, #1
   10f7c:	strb	r3, [r4]
   10f80:	pop	{r4, pc}
   10f84:	andeq	r3, r2, r4, lsr #1
   10f88:	b	10f28 <_start@@Base+0x8c>

00010f8c <main@@Base>:
   10f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f90:	add	fp, sp, #28
   10f94:	sub	sp, sp, #1004	; 0x3ec
   10f98:	mov	r5, r1
   10f9c:	mov	r4, r0
   10fa0:	movw	r1, #12468	; 0x30b4
   10fa4:	movt	r1, #2
   10fa8:	mov	r0, #0
   10fac:	str	r0, [r1]
   10fb0:	movw	r9, #12464	; 0x30b0
   10fb4:	movt	r9, #2
   10fb8:	str	r0, [r9]
   10fbc:	movw	r1, #12456	; 0x30a8
   10fc0:	movt	r1, #2
   10fc4:	str	r0, [r1]
   10fc8:	cmp	r4, #1
   10fcc:	beq	11328 <main@@Base+0x39c>
   10fd0:	ldr	r6, [r5, #4]
   10fd4:	movw	r1, #6168	; 0x1818
   10fd8:	movt	r1, #1
   10fdc:	mov	r0, r6
   10fe0:	bl	10d34 <strcmp@plt>
   10fe4:	cmp	r0, #0
   10fe8:	beq	11328 <main@@Base+0x39c>
   10fec:	movw	r1, #7330	; 0x1ca2
   10ff0:	movt	r1, #1
   10ff4:	mov	r0, r6
   10ff8:	bl	10d34 <strcmp@plt>
   10ffc:	cmp	r0, #0
   11000:	beq	11328 <main@@Base+0x39c>
   11004:	movw	r1, #6171	; 0x181b
   11008:	movt	r1, #1
   1100c:	mov	r0, r6
   11010:	bl	10d34 <strcmp@plt>
   11014:	cmp	r0, #0
   11018:	beq	11334 <main@@Base+0x3a8>
   1101c:	movw	r1, #7385	; 0x1cd9
   11020:	movt	r1, #1
   11024:	mov	r0, r6
   11028:	bl	10d34 <strcmp@plt>
   1102c:	cmp	r0, #0
   11030:	beq	11334 <main@@Base+0x3a8>
   11034:	cmp	r4, #3
   11038:	blt	11054 <main@@Base+0xc8>
   1103c:	movw	r1, #6174	; 0x181e
   11040:	movt	r1, #1
   11044:	mov	r0, r6
   11048:	bl	10d34 <strcmp@plt>
   1104c:	cmp	r0, #0
   11050:	beq	112b0 <main@@Base+0x324>
   11054:	ldr	r0, [r5]
   11058:	movw	r2, #6177	; 0x1821
   1105c:	movt	r2, #1
   11060:	mov	r1, #0
   11064:	bl	10d88 <coda_set_definition_path_conditional@plt>
   11068:	mov	r8, #1
   1106c:	cmp	r0, #0
   11070:	bne	11340 <main@@Base+0x3b4>
   11074:	mov	sl, #0
   11078:	mov	r6, #1
   1107c:	cmp	r8, r4
   11080:	bge	11194 <main@@Base+0x208>
   11084:	rsb	r8, r8, #0
   11088:	movw	r7, #6203	; 0x183b
   1108c:	movt	r7, #1
   11090:	mov	r6, #1
   11094:	ldr	sl, [r5, -r8, lsl #2]
   11098:	mov	r0, sl
   1109c:	mov	r1, r7
   110a0:	bl	10d34 <strcmp@plt>
   110a4:	cmp	r0, #0
   110a8:	mov	r0, r9
   110ac:	beq	1116c <main@@Base+0x1e0>
   110b0:	mov	r0, sl
   110b4:	movw	r1, #7042	; 0x1b82
   110b8:	movt	r1, #1
   110bc:	bl	10d34 <strcmp@plt>
   110c0:	cmp	r0, #0
   110c4:	mov	r0, r9
   110c8:	beq	1116c <main@@Base+0x1e0>
   110cc:	mov	r0, sl
   110d0:	movw	r1, #6206	; 0x183e
   110d4:	movt	r1, #1
   110d8:	bl	10d34 <strcmp@plt>
   110dc:	cmp	r0, #0
   110e0:	movw	r0, #12468	; 0x30b4
   110e4:	movt	r0, #2
   110e8:	beq	1116c <main@@Base+0x1e0>
   110ec:	mov	r0, sl
   110f0:	movw	r1, #6901	; 0x1af5
   110f4:	movt	r1, #1
   110f8:	bl	10d34 <strcmp@plt>
   110fc:	cmp	r0, #0
   11100:	movw	r0, #12468	; 0x30b4
   11104:	movt	r0, #2
   11108:	beq	1116c <main@@Base+0x1e0>
   1110c:	mov	r0, sl
   11110:	movw	r1, #6209	; 0x1841
   11114:	movt	r1, #1
   11118:	bl	10d34 <strcmp@plt>
   1111c:	cmp	r0, #0
   11120:	movw	r0, #12456	; 0x30a8
   11124:	movt	r0, #2
   11128:	beq	1116c <main@@Base+0x1e0>
   1112c:	mov	r0, sl
   11130:	movw	r1, #6650	; 0x19fa
   11134:	movt	r1, #1
   11138:	bl	10d34 <strcmp@plt>
   1113c:	cmp	r0, #0
   11140:	movw	r0, #12456	; 0x30a8
   11144:	movt	r0, #2
   11148:	beq	1116c <main@@Base+0x1e0>
   1114c:	mov	r0, sl
   11150:	movw	r1, #7133	; 0x1bdd
   11154:	movt	r1, #1
   11158:	bl	10d34 <strcmp@plt>
   1115c:	mov	r1, #0
   11160:	cmp	r0, #0
   11164:	beq	11178 <main@@Base+0x1ec>
   11168:	b	112c0 <main@@Base+0x334>
   1116c:	mov	r1, #1
   11170:	str	r1, [r0]
   11174:	mov	r1, r6
   11178:	sub	r8, r8, #1
   1117c:	adds	r0, r4, r8
   11180:	mov	r6, r1
   11184:	bne	11094 <main@@Base+0x108>
   11188:	rsb	r8, r8, #0
   1118c:	mov	r6, r1
   11190:	mov	sl, #0
   11194:	bl	10e24 <coda_init@plt>
   11198:	cmp	r0, #0
   1119c:	bne	11340 <main@@Base+0x3b4>
   111a0:	mov	r7, #0
   111a4:	mov	r0, #0
   111a8:	bl	10d28 <coda_set_option_perform_boundary_checks@plt>
   111ac:	mov	r0, #0
   111b0:	bl	10e3c <coda_set_option_perform_conversions@plt>
   111b4:	mov	r0, r6
   111b8:	bl	10d70 <coda_set_option_use_mmap@plt>
   111bc:	cmp	sl, #0
   111c0:	beq	11260 <main@@Base+0x2d4>
   111c4:	mov	r4, sp
   111c8:	movw	r5, #12448	; 0x30a0
   111cc:	movt	r5, #2
   111d0:	b	111e4 <main@@Base+0x258>
   111d4:	strb	r0, [r4, r7]
   111d8:	add	r7, r7, #1
   111dc:	cmp	r7, #1000	; 0x3e8
   111e0:	beq	11240 <main@@Base+0x2b4>
   111e4:	bl	10d94 <getchar@plt>
   111e8:	uxtb	r1, r0
   111ec:	cmp	r1, #10
   111f0:	beq	11214 <main@@Base+0x288>
   111f4:	cmp	r1, #13
   111f8:	bne	111d4 <main@@Base+0x248>
   111fc:	bl	10d94 <getchar@plt>
   11200:	uxtb	r0, r0
   11204:	cmp	r0, #10
   11208:	beq	11214 <main@@Base+0x288>
   1120c:	ldr	r1, [r5]
   11210:	bl	10e30 <ungetc@plt>
   11214:	mov	r0, #0
   11218:	strb	r0, [r4, r7]
   1121c:	cmp	r7, #0
   11220:	mov	r7, #0
   11224:	beq	111e4 <main@@Base+0x258>
   11228:	mov	r0, r4
   1122c:	bl	11374 <main@@Base+0x3e8>
   11230:	mov	r7, #0
   11234:	mov	r0, #0
   11238:	bl	10d64 <fflush@plt>
   1123c:	b	111e4 <main@@Base+0x258>
   11240:	movw	r0, #6240	; 0x1860
   11244:	movt	r0, #1
   11248:	movw	r1, #6249	; 0x1869
   1124c:	movt	r1, #1
   11250:	movw	r3, #6320	; 0x18b0
   11254:	movt	r3, #1
   11258:	mov	r2, #316	; 0x13c
   1125c:	bl	10e90 <__assert_fail@plt>
   11260:	cmp	r8, r4
   11264:	bge	11288 <main@@Base+0x2fc>
   11268:	add	r5, r5, r8, lsl #2
   1126c:	sub	r4, r4, r8
   11270:	ldr	r0, [r5], #4
   11274:	bl	11374 <main@@Base+0x3e8>
   11278:	mov	r0, #0
   1127c:	bl	10d64 <fflush@plt>
   11280:	subs	r4, r4, #1
   11284:	bne	11270 <main@@Base+0x2e4>
   11288:	bl	10dd0 <coda_done@plt>
   1128c:	movw	r0, #12460	; 0x30ac
   11290:	movt	r0, #2
   11294:	ldr	r0, [r0]
   11298:	cmp	r0, #0
   1129c:	moveq	r0, #0
   112a0:	subeq	sp, fp, #28
   112a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112a8:	mov	r0, #1
   112ac:	bl	10e0c <exit@plt>
   112b0:	ldr	r0, [r5, #8]
   112b4:	bl	10da0 <coda_set_definition_path@plt>
   112b8:	mov	r8, #3
   112bc:	b	11074 <main@@Base+0xe8>
   112c0:	movw	r1, #6212	; 0x1844
   112c4:	movt	r1, #1
   112c8:	mov	r0, sl
   112cc:	bl	10d34 <strcmp@plt>
   112d0:	add	r1, r4, r8
   112d4:	rsb	r8, r8, #0
   112d8:	cmp	r1, #1
   112dc:	cmpeq	r0, #0
   112e0:	beq	11320 <main@@Base+0x394>
   112e4:	ldrb	r0, [sl]
   112e8:	mov	sl, #0
   112ec:	cmp	r0, #45	; 0x2d
   112f0:	bne	11194 <main@@Base+0x208>
   112f4:	movw	r0, #12440	; 0x3098
   112f8:	movt	r0, #2
   112fc:	ldr	r3, [r0]
   11300:	movw	r0, #6214	; 0x1846
   11304:	movt	r0, #1
   11308:	mov	r1, #25
   1130c:	mov	r2, #1
   11310:	bl	10db8 <fwrite@plt>
   11314:	bl	11598 <main@@Base+0x60c>
   11318:	mov	r0, #1
   1131c:	bl	10e0c <exit@plt>
   11320:	mov	sl, #1
   11324:	b	11194 <main@@Base+0x208>
   11328:	bl	11598 <main@@Base+0x60c>
   1132c:	mov	r0, #0
   11330:	bl	10e0c <exit@plt>
   11334:	bl	1171c <main@@Base+0x790>
   11338:	mov	r0, #0
   1133c:	bl	10e0c <exit@plt>
   11340:	movw	r0, #12440	; 0x3098
   11344:	movt	r0, #2
   11348:	ldr	r4, [r0]
   1134c:	bl	10e78 <coda_get_errno@plt>
   11350:	ldr	r0, [r0]
   11354:	bl	10e60 <coda_errno_to_string@plt>
   11358:	mov	r2, r0
   1135c:	movw	r1, #6413	; 0x190d
   11360:	movt	r1, #1
   11364:	mov	r0, r4
   11368:	bl	10e18 <fprintf@plt>
   1136c:	mov	r0, #1
   11370:	bl	10e0c <exit@plt>
   11374:	push	{r4, sl, fp, lr}
   11378:	add	fp, sp, #8
   1137c:	sub	sp, sp, #40	; 0x28
   11380:	mov	r4, r0
   11384:	bl	10ddc <puts@plt>
   11388:	add	r0, sp, #12
   1138c:	add	r1, sp, #16
   11390:	str	r1, [sp]
   11394:	str	r0, [sp, #4]
   11398:	add	r1, sp, #24
   1139c:	sub	r2, fp, #16
   113a0:	add	r3, sp, #20
   113a4:	mov	r0, r4
   113a8:	bl	10dac <coda_recognize_file@plt>
   113ac:	cmp	r0, #0
   113b0:	beq	113e0 <main@@Base+0x454>
   113b4:	bl	10e78 <coda_get_errno@plt>
   113b8:	ldr	r0, [r0]
   113bc:	bl	10e60 <coda_errno_to_string@plt>
   113c0:	mov	r1, r0
   113c4:	movw	r0, #6365	; 0x18dd
   113c8:	movt	r0, #1
   113cc:	bl	10d40 <printf@plt>
   113d0:	mov	r0, #0
   113d4:	mov	r1, #0
   113d8:	bl	10d4c <coda_set_error@plt>
   113dc:	b	114d8 <main@@Base+0x54c>
   113e0:	movw	r0, #12456	; 0x30a8
   113e4:	movt	r0, #2
   113e8:	ldr	r0, [r0]
   113ec:	cmp	r0, #0
   113f0:	beq	11418 <main@@Base+0x48c>
   113f4:	ldr	r0, [sp, #20]
   113f8:	cmp	r0, #0
   113fc:	ldrne	r0, [sp, #16]
   11400:	cmpne	r0, #0
   11404:	bne	11418 <main@@Base+0x48c>
   11408:	movw	r0, #6441	; 0x1929
   1140c:	movt	r0, #1
   11410:	bl	10ddc <puts@plt>
   11414:	b	114d8 <main@@Base+0x54c>
   11418:	movw	r0, #12464	; 0x30b0
   1141c:	movt	r0, #2
   11420:	ldr	r0, [r0]
   11424:	cmp	r0, #0
   11428:	beq	11470 <main@@Base+0x4e4>
   1142c:	ldr	r0, [fp, #-16]
   11430:	bl	10dc4 <coda_type_get_format_name@plt>
   11434:	mov	r1, r0
   11438:	movw	r0, #6379	; 0x18eb
   1143c:	movt	r0, #1
   11440:	bl	10d40 <printf@plt>
   11444:	ldr	r1, [sp, #20]
   11448:	cmp	r1, #0
   1144c:	ldrne	r2, [sp, #16]
   11450:	cmpne	r2, #0
   11454:	beq	11468 <main@@Base+0x4dc>
   11458:	ldr	r3, [sp, #12]
   1145c:	movw	r0, #6400	; 0x1900
   11460:	movt	r0, #1
   11464:	bl	10d40 <printf@plt>
   11468:	mov	r0, #10
   1146c:	bl	10e48 <putchar@plt>
   11470:	sub	r1, fp, #12
   11474:	mov	r0, r4
   11478:	bl	10d58 <coda_open@plt>
   1147c:	cmp	r0, #0
   11480:	beq	114f0 <main@@Base+0x564>
   11484:	bl	10e78 <coda_get_errno@plt>
   11488:	ldr	r0, [r0]
   1148c:	cmn	r0, #21
   11490:	bne	114bc <main@@Base+0x530>
   11494:	mov	r0, #0
   11498:	bl	10d70 <coda_set_option_use_mmap@plt>
   1149c:	sub	r1, fp, #12
   114a0:	mov	r0, r4
   114a4:	bl	10d58 <coda_open@plt>
   114a8:	mov	r4, r0
   114ac:	mov	r0, #1
   114b0:	bl	10d70 <coda_set_option_use_mmap@plt>
   114b4:	cmp	r4, #0
   114b8:	beq	114f0 <main@@Base+0x564>
   114bc:	bl	10e78 <coda_get_errno@plt>
   114c0:	ldr	r0, [r0]
   114c4:	bl	10e60 <coda_errno_to_string@plt>
   114c8:	mov	r1, r0
   114cc:	movw	r0, #6365	; 0x18dd
   114d0:	movt	r0, #1
   114d4:	bl	10d40 <printf@plt>
   114d8:	movw	r0, #12460	; 0x30ac
   114dc:	movt	r0, #2
   114e0:	mov	r1, #1
   114e4:	str	r1, [r0]
   114e8:	sub	sp, fp, #8
   114ec:	pop	{r4, sl, fp, pc}
   114f0:	movw	r0, #12468	; 0x30b4
   114f4:	movt	r0, #2
   114f8:	ldr	r1, [r0]
   114fc:	ldr	r0, [fp, #-12]
   11500:	clz	r1, r1
   11504:	lsr	r1, r1, #5
   11508:	movw	r2, #5968	; 0x1750
   1150c:	movt	r2, #1
   11510:	mov	r3, #0
   11514:	bl	10de8 <coda_product_check@plt>
   11518:	cmp	r0, #0
   1151c:	beq	1155c <main@@Base+0x5d0>
   11520:	bl	10e78 <coda_get_errno@plt>
   11524:	ldr	r0, [r0]
   11528:	bl	10e60 <coda_errno_to_string@plt>
   1152c:	mov	r1, r0
   11530:	movw	r0, #6365	; 0x18dd
   11534:	movt	r0, #1
   11538:	bl	10d40 <printf@plt>
   1153c:	movw	r0, #12460	; 0x30ac
   11540:	movt	r0, #2
   11544:	mov	r1, #1
   11548:	str	r1, [r0]
   1154c:	ldr	r0, [fp, #-12]
   11550:	bl	10e54 <coda_close@plt>
   11554:	sub	sp, fp, #8
   11558:	pop	{r4, sl, fp, pc}
   1155c:	ldr	r0, [fp, #-12]
   11560:	bl	10e54 <coda_close@plt>
   11564:	cmp	r0, #0
   11568:	beq	11588 <main@@Base+0x5fc>
   1156c:	bl	10e78 <coda_get_errno@plt>
   11570:	ldr	r0, [r0]
   11574:	bl	10e60 <coda_errno_to_string@plt>
   11578:	mov	r1, r0
   1157c:	movw	r0, #6411	; 0x190b
   11580:	movt	r0, #1
   11584:	b	114d4 <main@@Base+0x548>
   11588:	mov	r0, #10
   1158c:	bl	10e48 <putchar@plt>
   11590:	sub	sp, fp, #8
   11594:	pop	{r4, sl, fp, pc}
   11598:	push	{fp, lr}
   1159c:	mov	fp, sp
   115a0:	movw	r0, #6484	; 0x1954
   115a4:	movt	r0, #1
   115a8:	bl	10ddc <puts@plt>
   115ac:	movw	r0, #6491	; 0x195b
   115b0:	movt	r0, #1
   115b4:	bl	10ddc <puts@plt>
   115b8:	movw	r0, #6545	; 0x1991
   115bc:	movt	r0, #1
   115c0:	bl	10ddc <puts@plt>
   115c4:	movw	r0, #6617	; 0x19d9
   115c8:	movt	r0, #1
   115cc:	bl	10ddc <puts@plt>
   115d0:	movw	r0, #6634	; 0x19ea
   115d4:	movt	r0, #1
   115d8:	bl	10ddc <puts@plt>
   115dc:	movw	r0, #6663	; 0x1a07
   115e0:	movt	r0, #1
   115e4:	bl	10ddc <puts@plt>
   115e8:	movw	r0, #6740	; 0x1a54
   115ec:	movt	r0, #1
   115f0:	bl	10ddc <puts@plt>
   115f4:	movw	r0, #6809	; 0x1a99
   115f8:	movt	r0, #1
   115fc:	bl	10ddc <puts@plt>
   11600:	movw	r0, #6885	; 0x1ae5
   11604:	movt	r0, #1
   11608:	bl	10ddc <puts@plt>
   1160c:	movw	r0, #6909	; 0x1afd
   11610:	movt	r0, #1
   11614:	bl	10ddc <puts@plt>
   11618:	movw	r0, #6971	; 0x1b3b
   1161c:	movt	r0, #1
   11620:	bl	10ddc <puts@plt>
   11624:	movw	r0, #7026	; 0x1b72
   11628:	movt	r0, #1
   1162c:	bl	10ddc <puts@plt>
   11630:	movw	r0, #7052	; 0x1b8c
   11634:	movt	r0, #1
   11638:	bl	10ddc <puts@plt>
   1163c:	movw	r0, #7121	; 0x1bd1
   11640:	movt	r0, #1
   11644:	bl	10ddc <puts@plt>
   11648:	movw	r0, #7143	; 0x1be7
   1164c:	movt	r0, #1
   11650:	bl	10ddc <puts@plt>
   11654:	mov	r0, #10
   11658:	bl	10e48 <putchar@plt>
   1165c:	movw	r0, #7206	; 0x1c26
   11660:	movt	r0, #1
   11664:	bl	10ddc <puts@plt>
   11668:	movw	r0, #7284	; 0x1c74
   1166c:	movt	r0, #1
   11670:	bl	10ddc <puts@plt>
   11674:	mov	r0, #10
   11678:	bl	10e48 <putchar@plt>
   1167c:	movw	r0, #7312	; 0x1c90
   11680:	movt	r0, #1
   11684:	bl	10ddc <puts@plt>
   11688:	movw	r0, #7337	; 0x1ca9
   1168c:	movt	r0, #1
   11690:	bl	10ddc <puts@plt>
   11694:	mov	r0, #10
   11698:	bl	10e48 <putchar@plt>
   1169c:	movw	r0, #7367	; 0x1cc7
   116a0:	movt	r0, #1
   116a4:	bl	10ddc <puts@plt>
   116a8:	movw	r0, #7395	; 0x1ce3
   116ac:	movt	r0, #1
   116b0:	bl	10ddc <puts@plt>
   116b4:	mov	r0, #10
   116b8:	bl	10e48 <putchar@plt>
   116bc:	movw	r0, #7445	; 0x1d15
   116c0:	movt	r0, #1
   116c4:	bl	10ddc <puts@plt>
   116c8:	movw	r0, #7523	; 0x1d63
   116cc:	movt	r0, #1
   116d0:	bl	10ddc <puts@plt>
   116d4:	movw	r0, #7596	; 0x1dac
   116d8:	movt	r0, #1
   116dc:	bl	10ddc <puts@plt>
   116e0:	movw	r0, #7639	; 0x1dd7
   116e4:	movt	r0, #1
   116e8:	bl	10ddc <puts@plt>
   116ec:	movw	r0, #7715	; 0x1e23
   116f0:	movt	r0, #1
   116f4:	bl	10ddc <puts@plt>
   116f8:	movw	r0, #7785	; 0x1e69
   116fc:	movt	r0, #1
   11700:	bl	10ddc <puts@plt>
   11704:	movw	r0, #7848	; 0x1ea8
   11708:	movt	r0, #1
   1170c:	bl	10ddc <puts@plt>
   11710:	mov	r0, #10
   11714:	pop	{fp, lr}
   11718:	b	10e48 <putchar@plt>
   1171c:	push	{fp, lr}
   11720:	mov	fp, sp
   11724:	bl	10e6c <coda_get_libcoda_version@plt>
   11728:	mov	r1, r0
   1172c:	movw	r0, #6343	; 0x18c7
   11730:	movt	r0, #1
   11734:	bl	10d40 <printf@plt>
   11738:	movw	r0, #7912	; 0x1ee8
   1173c:	movt	r0, #1
   11740:	bl	10ddc <puts@plt>
   11744:	mov	r0, #10
   11748:	pop	{fp, lr}
   1174c:	b	10e48 <putchar@plt>
   11750:	push	{r4, sl, fp, lr}
   11754:	add	fp, sp, #8
   11758:	mov	r4, r0
   1175c:	movw	r0, #6424	; 0x1918
   11760:	movt	r0, #1
   11764:	bl	10d40 <printf@plt>
   11768:	cmp	r4, #0
   1176c:	beq	1178c <main@@Base+0x800>
   11770:	movw	r0, #6436	; 0x1924
   11774:	movt	r0, #1
   11778:	bl	10d40 <printf@plt>
   1177c:	movw	r1, #3392	; 0xd40
   11780:	movt	r1, #1
   11784:	mov	r0, r4
   11788:	bl	10d7c <coda_cursor_print_path@plt>
   1178c:	mov	r0, #10
   11790:	bl	10e48 <putchar@plt>
   11794:	movw	r0, #12460	; 0x30ac
   11798:	movt	r0, #2
   1179c:	mov	r1, #1
   117a0:	str	r1, [r0]
   117a4:	pop	{r4, sl, fp, pc}

000117a8 <__libc_csu_init@@Base>:
   117a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117ac:	mov	r7, r0
   117b0:	ldr	r6, [pc, #72]	; 11800 <__libc_csu_init@@Base+0x58>
   117b4:	ldr	r5, [pc, #72]	; 11804 <__libc_csu_init@@Base+0x5c>
   117b8:	add	r6, pc, r6
   117bc:	add	r5, pc, r5
   117c0:	sub	r6, r6, r5
   117c4:	mov	r8, r1
   117c8:	mov	r9, r2
   117cc:	bl	10d08 <coda_set_option_perform_boundary_checks@plt-0x20>
   117d0:	asrs	r6, r6, #2
   117d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   117d8:	mov	r4, #0
   117dc:	add	r4, r4, #1
   117e0:	ldr	r3, [r5], #4
   117e4:	mov	r2, r9
   117e8:	mov	r1, r8
   117ec:	mov	r0, r7
   117f0:	blx	r3
   117f4:	cmp	r6, r4
   117f8:	bne	117dc <__libc_csu_init@@Base+0x34>
   117fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11800:	andeq	r1, r1, r4, lsr r7
   11804:	andeq	r1, r1, ip, lsr #14

00011808 <__libc_csu_fini@@Base>:
   11808:	bx	lr

Disassembly of section .fini:

0001180c <.fini>:
   1180c:	push	{r3, lr}
   11810:	pop	{r3, pc}
