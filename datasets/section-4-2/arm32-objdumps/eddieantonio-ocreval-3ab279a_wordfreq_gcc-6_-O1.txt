
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109ec <.init>:
   109ec:	push	{r3, lr}
   109f0:	bl	10c14 <__assert_fail@plt+0x4c>
   109f4:	pop	{r3, pc}

Disassembly of section .plt:

000109f8 <calloc@plt-0x14>:
   109f8:	push	{lr}		; (str lr, [sp, #-4]!)
   109fc:	ldr	lr, [pc, #4]	; 10a08 <calloc@plt-0x4>
   10a00:	add	lr, pc, lr
   10a04:	ldr	pc, [lr, #8]!
   10a08:	strdeq	r6, [r1], -r8

00010a0c <calloc@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #90112	; 0x16000
   10a14:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a18 <strcmp@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #90112	; 0x16000
   10a20:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a24 <strtol@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #90112	; 0x16000
   10a2c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a30 <printf@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #90112	; 0x16000
   10a38:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a3c <fopen@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #90112	; 0x16000
   10a44:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a48 <free@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #90112	; 0x16000
   10a50:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a54 <utf8proc_get_property@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #90112	; 0x16000
   10a5c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a60 <fgets@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #90112	; 0x16000
   10a68:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a6c <utf8proc_encode_char@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #90112	; 0x16000
   10a74:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a78 <strdup@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #90112	; 0x16000
   10a80:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a84 <rewind@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #90112	; 0x16000
   10a8c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a90 <unlink@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #90112	; 0x16000
   10a98:	ldr	pc, [ip, #1440]!	; 0x5a0

00010a9c <utf8proc_tolower@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #90112	; 0x16000
   10aa4:	ldr	pc, [ip, #1432]!	; 0x598

00010aa8 <__xstat@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #90112	; 0x16000
   10ab0:	ldr	pc, [ip, #1424]!	; 0x590

00010ab4 <fwrite@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #90112	; 0x16000
   10abc:	ldr	pc, [ip, #1416]!	; 0x588

00010ac0 <fread@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #90112	; 0x16000
   10ac8:	ldr	pc, [ip, #1408]!	; 0x580

00010acc <utf8proc_iterate@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #90112	; 0x16000
   10ad4:	ldr	pc, [ip, #1400]!	; 0x578

00010ad8 <puts@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #90112	; 0x16000
   10ae0:	ldr	pc, [ip, #1392]!	; 0x570

00010ae4 <malloc@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #90112	; 0x16000
   10aec:	ldr	pc, [ip, #1384]!	; 0x568

00010af0 <__libc_start_main@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #90112	; 0x16000
   10af8:	ldr	pc, [ip, #1376]!	; 0x560

00010afc <__sysv_signal@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #90112	; 0x16000
   10b04:	ldr	pc, [ip, #1368]!	; 0x558

00010b08 <__gmon_start__@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #90112	; 0x16000
   10b10:	ldr	pc, [ip, #1360]!	; 0x550

00010b14 <getpid@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #90112	; 0x16000
   10b1c:	ldr	pc, [ip, #1352]!	; 0x548

00010b20 <exit@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #90112	; 0x16000
   10b28:	ldr	pc, [ip, #1344]!	; 0x540

00010b2c <utf8proc_category@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #90112	; 0x16000
   10b34:	ldr	pc, [ip, #1336]!	; 0x538

00010b38 <strlen@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #90112	; 0x16000
   10b40:	ldr	pc, [ip, #1328]!	; 0x530

00010b44 <fprintf@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #90112	; 0x16000
   10b4c:	ldr	pc, [ip, #1320]!	; 0x528

00010b50 <__isoc99_sscanf@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #90112	; 0x16000
   10b58:	ldr	pc, [ip, #1312]!	; 0x520

00010b5c <fclose@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #90112	; 0x16000
   10b64:	ldr	pc, [ip, #1304]!	; 0x518

00010b68 <utf8proc_NFC@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #90112	; 0x16000
   10b70:	ldr	pc, [ip, #1296]!	; 0x510

00010b74 <fputc@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #90112	; 0x16000
   10b7c:	ldr	pc, [ip, #1288]!	; 0x508

00010b80 <sprintf@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #90112	; 0x16000
   10b88:	ldr	pc, [ip, #1280]!	; 0x500

00010b8c <utf8proc_errmsg@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #90112	; 0x16000
   10b94:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b98 <fputs@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #90112	; 0x16000
   10ba0:	ldr	pc, [ip, #1264]!	; 0x4f0

00010ba4 <strncmp@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #90112	; 0x16000
   10bac:	ldr	pc, [ip, #1256]!	; 0x4e8

00010bb0 <abort@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #90112	; 0x16000
   10bb8:	ldr	pc, [ip, #1248]!	; 0x4e0

00010bbc <getc@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #90112	; 0x16000
   10bc4:	ldr	pc, [ip, #1240]!	; 0x4d8

00010bc8 <__assert_fail@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #90112	; 0x16000
   10bd0:	ldr	pc, [ip, #1232]!	; 0x4d0

Disassembly of section .text:

00010bd8 <error@@Base-0x18d4>:
   10bd8:	mov	fp, #0
   10bdc:	mov	lr, #0
   10be0:	pop	{r1}		; (ldr r1, [sp], #4)
   10be4:	mov	r2, sp
   10be8:	push	{r2}		; (str r2, [sp, #-4]!)
   10bec:	push	{r0}		; (str r0, [sp, #-4]!)
   10bf0:	ldr	ip, [pc, #16]	; 10c08 <__assert_fail@plt+0x40>
   10bf4:	push	{ip}		; (str ip, [sp, #-4]!)
   10bf8:	ldr	r0, [pc, #12]	; 10c0c <__assert_fail@plt+0x44>
   10bfc:	ldr	r3, [pc, #12]	; 10c10 <__assert_fail@plt+0x48>
   10c00:	bl	10af0 <__libc_start_main@plt>
   10c04:	bl	10bb0 <abort@plt>
   10c08:	ldrdeq	r2, [r1], -r8
   10c0c:			; <UNDEFINED> instruction: 0x00010eb0
   10c10:	andeq	r2, r1, r8, ror lr
   10c14:	ldr	r3, [pc, #20]	; 10c30 <__assert_fail@plt+0x68>
   10c18:	ldr	r2, [pc, #20]	; 10c34 <__assert_fail@plt+0x6c>
   10c1c:	add	r3, pc, r3
   10c20:	ldr	r2, [r3, r2]
   10c24:	cmp	r2, #0
   10c28:	bxeq	lr
   10c2c:	b	10b08 <__gmon_start__@plt>
   10c30:	ldrdeq	r6, [r1], -ip
   10c34:	andeq	r0, r0, r4, lsr #1
   10c38:	ldr	r3, [pc, #28]	; 10c5c <__assert_fail@plt+0x94>
   10c3c:	ldr	r0, [pc, #28]	; 10c60 <__assert_fail@plt+0x98>
   10c40:	sub	r3, r3, r0
   10c44:	cmp	r3, #6
   10c48:	bxls	lr
   10c4c:	ldr	r3, [pc, #16]	; 10c64 <__assert_fail@plt+0x9c>
   10c50:	cmp	r3, #0
   10c54:	bxeq	lr
   10c58:	bx	r3
   10c5c:	andeq	r7, r2, r7, asr #1
   10c60:	andeq	r7, r2, r4, asr #1
   10c64:	andeq	r0, r0, r0
   10c68:	ldr	r1, [pc, #36]	; 10c94 <__assert_fail@plt+0xcc>
   10c6c:	ldr	r0, [pc, #36]	; 10c98 <__assert_fail@plt+0xd0>
   10c70:	sub	r1, r1, r0
   10c74:	asr	r1, r1, #2
   10c78:	add	r1, r1, r1, lsr #31
   10c7c:	asrs	r1, r1, #1
   10c80:	bxeq	lr
   10c84:	ldr	r3, [pc, #16]	; 10c9c <__assert_fail@plt+0xd4>
   10c88:	cmp	r3, #0
   10c8c:	bxeq	lr
   10c90:	bx	r3
   10c94:	andeq	r7, r2, r4, asr #1
   10c98:	andeq	r7, r2, r4, asr #1
   10c9c:	andeq	r0, r0, r0
   10ca0:	push	{r4, lr}
   10ca4:	ldr	r4, [pc, #24]	; 10cc4 <__assert_fail@plt+0xfc>
   10ca8:	ldrb	r3, [r4]
   10cac:	cmp	r3, #0
   10cb0:	popne	{r4, pc}
   10cb4:	bl	10c38 <__assert_fail@plt+0x70>
   10cb8:	mov	r3, #1
   10cbc:	strb	r3, [r4]
   10cc0:	pop	{r4, pc}
   10cc4:	ldrdeq	r7, [r2], -r8
   10cc8:	ldr	r0, [pc, #40]	; 10cf8 <__assert_fail@plt+0x130>
   10ccc:	ldr	r3, [r0]
   10cd0:	cmp	r3, #0
   10cd4:	bne	10cdc <__assert_fail@plt+0x114>
   10cd8:	b	10c68 <__assert_fail@plt+0xa0>
   10cdc:	ldr	r3, [pc, #24]	; 10cfc <__assert_fail@plt+0x134>
   10ce0:	cmp	r3, #0
   10ce4:	beq	10cd8 <__assert_fail@plt+0x110>
   10ce8:	push	{r4, lr}
   10cec:	blx	r3
   10cf0:	pop	{r4, lr}
   10cf4:	b	10c68 <__assert_fail@plt+0xa0>
   10cf8:	andeq	r6, r2, r4, lsl #28
   10cfc:	andeq	r0, r0, r0
   10d00:	push	{r4, lr}
   10d04:	ldr	r1, [r1, #8]
   10d08:	ldr	r0, [r0, #8]
   10d0c:	bl	122fc <__assert_fail@plt+0x1734>
   10d10:	pop	{r4, pc}
   10d14:	ldr	r2, [r0, #12]
   10d18:	ldr	r3, [r1, #12]
   10d1c:	cmp	r2, r3
   10d20:	beq	10d2c <__assert_fail@plt+0x164>
   10d24:	sub	r0, r3, r2
   10d28:	bx	lr
   10d2c:	push	{r4, lr}
   10d30:	bl	10d00 <__assert_fail@plt+0x138>
   10d34:	pop	{r4, pc}
   10d38:	push	{r4, r5, r6, r7, r8, lr}
   10d3c:	ldr	r5, [pc, #112]	; 10db4 <__assert_fail@plt+0x1ec>
   10d40:	ldr	r2, [pc, #112]	; 10db8 <__assert_fail@plt+0x1f0>
   10d44:	mov	r1, r0
   10d48:	mov	r0, r5
   10d4c:	bl	12878 <error@@Base+0x3cc>
   10d50:	ldr	r4, [pc, #100]	; 10dbc <__assert_fail@plt+0x1f4>
   10d54:	mov	r1, r5
   10d58:	mov	r0, r4
   10d5c:	bl	11dcc <__assert_fail@plt+0x1204>
   10d60:	ldr	r4, [r4]
   10d64:	cmp	r4, #0
   10d68:	beq	10d98 <__assert_fail@plt+0x1d0>
   10d6c:	ldr	r7, [pc, #76]	; 10dc0 <__assert_fail@plt+0x1f8>
   10d70:	mov	r6, #0
   10d74:	mov	r5, #1
   10d78:	mov	r3, r6
   10d7c:	mov	r2, r5
   10d80:	ldr	r1, [r4, #8]
   10d84:	mov	r0, r7
   10d88:	bl	11694 <__assert_fail@plt+0xacc>
   10d8c:	ldr	r4, [r4, #4]
   10d90:	cmp	r4, #0
   10d94:	bne	10d78 <__assert_fail@plt+0x1b0>
   10d98:	ldr	r1, [pc, #36]	; 10dc4 <__assert_fail@plt+0x1fc>
   10d9c:	ldr	r0, [pc, #16]	; 10db4 <__assert_fail@plt+0x1ec>
   10da0:	bl	110a8 <__assert_fail@plt+0x4e0>
   10da4:	ldr	r1, [pc, #28]	; 10dc8 <__assert_fail@plt+0x200>
   10da8:	ldr	r0, [pc, #12]	; 10dbc <__assert_fail@plt+0x1f4>
   10dac:	bl	110a8 <__assert_fail@plt+0x4e0>
   10db0:	pop	{r4, r5, r6, r7, r8, pc}
   10db4:	andeq	r7, r2, ip, asr #2
   10db8:	strheq	r7, [r2], -r0
   10dbc:	andeq	r7, r2, ip, asr r1
   10dc0:	andeq	r7, r2, ip, ror #2
   10dc4:	andeq	r0, r1, r8, asr #20
   10dc8:	andeq	r2, r1, r8, lsr #4
   10dcc:	push	{r4, r5, r6, r7, r8, lr}
   10dd0:	ldr	r0, [pc, #112]	; 10e48 <__assert_fail@plt+0x280>
   10dd4:	bl	10ad8 <puts@plt>
   10dd8:	ldr	r3, [pc, #108]	; 10e4c <__assert_fail@plt+0x284>
   10ddc:	ldr	r3, [r3, #3956]	; 0xf74
   10de0:	cmp	r3, #0
   10de4:	ble	10e40 <__assert_fail@plt+0x278>
   10de8:	mov	r6, #0
   10dec:	mov	r4, r6
   10df0:	ldr	r5, [pc, #84]	; 10e4c <__assert_fail@plt+0x284>
   10df4:	ldr	r7, [pc, #84]	; 10e50 <__assert_fail@plt+0x288>
   10df8:	ldr	r3, [r5, #3952]	; 0xf70
   10dfc:	ldr	r3, [r3, r4, lsl #2]
   10e00:	ldr	r2, [r3, #8]
   10e04:	ldr	r1, [r3, #12]
   10e08:	mov	r0, r7
   10e0c:	bl	10a30 <printf@plt>
   10e10:	ldr	r3, [r5, #3952]	; 0xf70
   10e14:	ldr	r3, [r3, r4, lsl #2]
   10e18:	ldr	r3, [r3, #12]
   10e1c:	add	r6, r6, r3
   10e20:	add	r4, r4, #1
   10e24:	ldr	r3, [r5, #3956]	; 0xf74
   10e28:	cmp	r3, r4
   10e2c:	bgt	10df8 <__assert_fail@plt+0x230>
   10e30:	mov	r1, r6
   10e34:	ldr	r0, [pc, #24]	; 10e54 <__assert_fail@plt+0x28c>
   10e38:	bl	10a30 <printf@plt>
   10e3c:	pop	{r4, r5, r6, r7, r8, pc}
   10e40:	mov	r6, #0
   10e44:	b	10e30 <__assert_fail@plt+0x268>
   10e48:	andeq	r2, r1, r8, ror #29
   10e4c:	andeq	r8, r2, ip, ror #2
   10e50:	strdeq	r2, [r1], -r4
   10e54:	andeq	r2, r1, r0, lsl #30
   10e58:	push	{r4, lr}
   10e5c:	ldr	r4, [pc, #60]	; 10ea0 <__assert_fail@plt+0x2d8>
   10e60:	mov	r0, r4
   10e64:	bl	11c00 <__assert_fail@plt+0x1038>
   10e68:	add	r4, r4, #4096	; 0x1000
   10e6c:	ldr	r2, [pc, #48]	; 10ea4 <__assert_fail@plt+0x2dc>
   10e70:	ldr	r1, [r4, #3952]	; 0xf70
   10e74:	ldr	r0, [r4, #3956]	; 0xf74
   10e78:	bl	11228 <__assert_fail@plt+0x660>
   10e7c:	bl	10dcc <__assert_fail@plt+0x204>
   10e80:	ldr	r0, [pc, #32]	; 10ea8 <__assert_fail@plt+0x2e0>
   10e84:	bl	10ad8 <puts@plt>
   10e88:	ldr	r2, [pc, #28]	; 10eac <__assert_fail@plt+0x2e4>
   10e8c:	ldr	r1, [r4, #3952]	; 0xf70
   10e90:	ldr	r0, [r4, #3956]	; 0xf74
   10e94:	bl	11228 <__assert_fail@plt+0x660>
   10e98:	bl	10dcc <__assert_fail@plt+0x204>
   10e9c:	pop	{r4, pc}
   10ea0:	andeq	r7, r2, ip, ror #2
   10ea4:	andeq	r0, r1, r0, lsl #26
   10ea8:	andeq	r3, r1, ip, asr #32
   10eac:	andeq	r0, r1, r4, lsl sp
   10eb0:	push	{r4, r5, lr}
   10eb4:	sub	sp, sp, #12
   10eb8:	add	ip, sp, #8
   10ebc:	str	r0, [ip, #-4]!
   10ec0:	mov	r5, r1
   10ec4:	mov	r3, #0
   10ec8:	ldr	r2, [pc, #68]	; 10f14 <__assert_fail@plt+0x34c>
   10ecc:	mov	r0, ip
   10ed0:	bl	125ec <error@@Base+0x140>
   10ed4:	ldr	r3, [sp, #4]
   10ed8:	cmp	r3, #0
   10edc:	beq	10f0c <__assert_fail@plt+0x344>
   10ee0:	subgt	r5, r5, #4
   10ee4:	movgt	r4, #0
   10ee8:	ble	10f04 <__assert_fail@plt+0x33c>
   10eec:	ldr	r0, [r5, #4]!
   10ef0:	bl	10d38 <__assert_fail@plt+0x170>
   10ef4:	add	r4, r4, #1
   10ef8:	ldr	r3, [sp, #4]
   10efc:	cmp	r3, r4
   10f00:	bgt	10eec <__assert_fail@plt+0x324>
   10f04:	bl	10e58 <__assert_fail@plt+0x290>
   10f08:	bl	12454 <__assert_fail@plt+0x188c>
   10f0c:	ldr	r0, [pc, #4]	; 10f18 <__assert_fail@plt+0x350>
   10f10:	bl	124ac <error@@Base>
   10f14:	andeq	r2, r1, r0, lsl pc
   10f18:	andeq	r2, r1, r4, lsr pc
   10f1c:	push	{r4, lr}
   10f20:	mov	r4, r0
   10f24:	str	r1, [r2]
   10f28:	str	r3, [r2, #4]
   10f2c:	cmp	r1, #0
   10f30:	strne	r2, [r1, #4]
   10f34:	streq	r2, [r0]
   10f38:	cmp	r3, #0
   10f3c:	strne	r2, [r3]
   10f40:	streq	r2, [r0, #4]
   10f44:	ldr	r0, [r0, #8]
   10f48:	cmp	r0, #0
   10f4c:	beq	10f5c <__assert_fail@plt+0x394>
   10f50:	bl	10a48 <free@plt>
   10f54:	mov	r3, #0
   10f58:	str	r3, [r4, #8]
   10f5c:	ldr	r3, [r4, #12]
   10f60:	add	r3, r3, #1
   10f64:	str	r3, [r4, #12]
   10f68:	pop	{r4, pc}
   10f6c:	mov	r3, #0
   10f70:	str	r3, [r0, #4]
   10f74:	str	r3, [r0]
   10f78:	str	r3, [r0, #8]
   10f7c:	str	r3, [r0, #12]
   10f80:	bx	lr
   10f84:	push	{r4, lr}
   10f88:	ldr	r3, [r0]
   10f8c:	mov	r2, r1
   10f90:	mov	r1, #0
   10f94:	bl	10f1c <__assert_fail@plt+0x354>
   10f98:	pop	{r4, pc}
   10f9c:	push	{r4, lr}
   10fa0:	mov	r3, #0
   10fa4:	mov	r2, r1
   10fa8:	ldr	r1, [r0, #4]
   10fac:	bl	10f1c <__assert_fail@plt+0x354>
   10fb0:	pop	{r4, pc}
   10fb4:	push	{r4, lr}
   10fb8:	mov	ip, r2
   10fbc:	mov	r3, r2
   10fc0:	mov	r2, r1
   10fc4:	ldr	r1, [ip]
   10fc8:	bl	10f1c <__assert_fail@plt+0x354>
   10fcc:	pop	{r4, pc}
   10fd0:	push	{r4, lr}
   10fd4:	ldr	r3, [r1, #4]
   10fd8:	bl	10f1c <__assert_fail@plt+0x354>
   10fdc:	pop	{r4, pc}
   10fe0:	push	{r4, lr}
   10fe4:	mov	r4, r0
   10fe8:	ldr	r3, [r1]
   10fec:	cmp	r3, #0
   10ff0:	ldrne	r2, [r1, #4]
   10ff4:	strne	r2, [r3, #4]
   10ff8:	ldreq	r3, [r1, #4]
   10ffc:	streq	r3, [r0]
   11000:	ldr	r3, [r1, #4]
   11004:	cmp	r3, #0
   11008:	ldrne	r2, [r1]
   1100c:	strne	r2, [r3]
   11010:	ldreq	r3, [r1]
   11014:	streq	r3, [r0, #4]
   11018:	mov	r3, #0
   1101c:	str	r3, [r1, #4]
   11020:	str	r3, [r1]
   11024:	ldr	r0, [r0, #8]
   11028:	cmp	r0, r3
   1102c:	beq	1103c <__assert_fail@plt+0x474>
   11030:	bl	10a48 <free@plt>
   11034:	mov	r3, #0
   11038:	str	r3, [r4, #8]
   1103c:	ldr	r3, [r4, #12]
   11040:	sub	r3, r3, #1
   11044:	str	r3, [r4, #12]
   11048:	pop	{r4, pc}
   1104c:	ldr	r3, [r0, #8]
   11050:	cmp	r3, #0
   11054:	bxne	lr
   11058:	ldr	r3, [r0, #12]
   1105c:	cmp	r3, #0
   11060:	bxeq	lr
   11064:	push	{r4, lr}
   11068:	mov	r4, r0
   1106c:	mov	r1, #4
   11070:	mov	r0, r3
   11074:	bl	124e8 <error@@Base+0x3c>
   11078:	str	r0, [r4, #8]
   1107c:	ldr	r3, [r4]
   11080:	cmp	r3, #0
   11084:	popeq	{r4, pc}
   11088:	mov	r2, #0
   1108c:	ldr	r1, [r4, #8]
   11090:	str	r3, [r1, r2]
   11094:	ldr	r3, [r3, #4]
   11098:	add	r2, r2, #4
   1109c:	cmp	r3, #0
   110a0:	bne	1108c <__assert_fail@plt+0x4c4>
   110a4:	pop	{r4, pc}
   110a8:	push	{r4, r5, r6, lr}
   110ac:	mov	r5, r0
   110b0:	mov	r6, r1
   110b4:	ldr	r4, [r0]
   110b8:	cmp	r4, #0
   110bc:	popeq	{r4, r5, r6, pc}
   110c0:	mov	r1, r4
   110c4:	mov	r0, r5
   110c8:	bl	10fe0 <__assert_fail@plt+0x418>
   110cc:	mov	r0, r4
   110d0:	blx	r6
   110d4:	ldr	r4, [r5]
   110d8:	cmp	r4, #0
   110dc:	bne	110c0 <__assert_fail@plt+0x4f8>
   110e0:	pop	{r4, r5, r6, pc}
   110e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   110e8:	mov	sl, r0
   110ec:	mov	r9, r1
   110f0:	ldr	r3, [pc, #300]	; 11224 <__assert_fail@plt+0x65c>
   110f4:	ldr	r3, [r3]
   110f8:	ldr	r8, [r3, r0, lsl #2]
   110fc:	cmp	r0, r1
   11100:	movge	r3, r1
   11104:	movge	r4, r0
   11108:	bge	111e8 <__assert_fail@plt+0x620>
   1110c:	mov	r4, r0
   11110:	mov	r3, r1
   11114:	ldr	r6, [pc, #264]	; 11224 <__assert_fail@plt+0x65c>
   11118:	b	1119c <__assert_fail@plt+0x5d4>
   1111c:	mov	r5, r3
   11120:	cmp	r4, r5
   11124:	beq	111e0 <__assert_fail@plt+0x618>
   11128:	ldr	r2, [r6]
   1112c:	add	r3, r4, #1
   11130:	lsl	r7, r4, #2
   11134:	ldr	r1, [r2, r5, lsl #2]
   11138:	str	r1, [r2, r4, lsl #2]
   1113c:	cmp	r3, r5
   11140:	movge	r4, r3
   11144:	bge	1117c <__assert_fail@plt+0x5b4>
   11148:	add	r7, r7, #4
   1114c:	mov	r4, r3
   11150:	ldr	r2, [r6]
   11154:	ldr	r3, [r6, #4]
   11158:	ldr	r1, [r2, r7]
   1115c:	mov	r0, r8
   11160:	blx	r3
   11164:	cmp	r0, #0
   11168:	ble	1117c <__assert_fail@plt+0x5b4>
   1116c:	add	r4, r4, #1
   11170:	add	r7, r7, #4
   11174:	cmp	r4, r5
   11178:	blt	11150 <__assert_fail@plt+0x588>
   1117c:	cmp	r4, r5
   11180:	beq	111e4 <__assert_fail@plt+0x61c>
   11184:	ldr	r2, [r6]
   11188:	sub	r3, r5, #1
   1118c:	ldr	r1, [r2, r4, lsl #2]
   11190:	str	r1, [r2, r5, lsl #2]
   11194:	cmp	r3, r4
   11198:	ble	111e8 <__assert_fail@plt+0x620>
   1119c:	cmp	r3, r4
   111a0:	ble	1111c <__assert_fail@plt+0x554>
   111a4:	lsl	r7, r3, #2
   111a8:	mov	r5, r3
   111ac:	ldr	r2, [r6]
   111b0:	ldr	r3, [r6, #4]
   111b4:	ldr	r1, [r2, r7]
   111b8:	mov	r0, r8
   111bc:	blx	r3
   111c0:	cmp	r0, #0
   111c4:	bge	11120 <__assert_fail@plt+0x558>
   111c8:	sub	r5, r5, #1
   111cc:	sub	r7, r7, #4
   111d0:	cmp	r5, r4
   111d4:	bne	111ac <__assert_fail@plt+0x5e4>
   111d8:	mov	r4, r5
   111dc:	b	1117c <__assert_fail@plt+0x5b4>
   111e0:	mov	r4, r5
   111e4:	mov	r3, r4
   111e8:	ldr	r2, [pc, #52]	; 11224 <__assert_fail@plt+0x65c>
   111ec:	ldr	r2, [r2]
   111f0:	str	r8, [r2, r3, lsl #2]
   111f4:	sub	r1, r3, #1
   111f8:	cmp	sl, r1
   111fc:	blt	11218 <__assert_fail@plt+0x650>
   11200:	add	r0, r4, #1
   11204:	cmp	r9, r0
   11208:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   1120c:	mov	r1, r9
   11210:	bl	110e4 <__assert_fail@plt+0x51c>
   11214:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11218:	mov	r0, sl
   1121c:	bl	110e4 <__assert_fail@plt+0x51c>
   11220:	b	11200 <__assert_fail@plt+0x638>
   11224:	ldrdeq	r7, [r2], -ip
   11228:	cmp	r0, #1
   1122c:	bxle	lr
   11230:	push	{r4, lr}
   11234:	ldr	r3, [pc, #20]	; 11250 <__assert_fail@plt+0x688>
   11238:	str	r1, [r3]
   1123c:	str	r2, [r3, #4]
   11240:	sub	r1, r0, #1
   11244:	mov	r0, #0
   11248:	bl	110e4 <__assert_fail@plt+0x51c>
   1124c:	pop	{r4, pc}
   11250:	ldrdeq	r7, [r2], -ip
   11254:	andeq	r0, r0, r0
   11258:	push	{r4, lr}
   1125c:	mov	r2, r0
   11260:	mov	r1, #99	; 0x63
   11264:	ldr	r0, [pc, #12]	; 11278 <__assert_fail@plt+0x6b0>
   11268:	bl	10a60 <fgets@plt>
   1126c:	adds	r0, r0, #0
   11270:	movne	r0, #1
   11274:	pop	{r4, pc}
   11278:	andeq	r7, r2, r4, ror #1
   1127c:	push	{r4, lr}
   11280:	mov	r4, r1
   11284:	bl	11258 <__assert_fail@plt+0x690>
   11288:	cmp	r0, #0
   1128c:	bne	11298 <__assert_fail@plt+0x6d0>
   11290:	mov	r0, #0
   11294:	pop	{r4, pc}
   11298:	mov	r2, r4
   1129c:	ldr	r1, [pc, #20]	; 112b8 <__assert_fail@plt+0x6f0>
   112a0:	ldr	r0, [pc, #20]	; 112bc <__assert_fail@plt+0x6f4>
   112a4:	bl	10b50 <__isoc99_sscanf@plt>
   112a8:	cmp	r0, #1
   112ac:	movne	r0, #0
   112b0:	moveq	r0, #1
   112b4:	pop	{r4, pc}
   112b8:	andeq	r2, r1, r8, asr #31
   112bc:	andeq	r7, r2, r4, ror #1
   112c0:	push	{r4, lr}
   112c4:	ldr	r2, [r1]
   112c8:	cmp	r2, #0
   112cc:	beq	11304 <__assert_fail@plt+0x73c>
   112d0:	ldr	r3, [r1, #4]
   112d4:	sub	r3, r2, r3
   112d8:	vmov	s14, r3
   112dc:	vcvt.f64.s32	d7, s14
   112e0:	vldr	d6, [pc, #56]	; 11320 <__assert_fail@plt+0x758>
   112e4:	vmul.f64	d7, d7, d6
   112e8:	vmov	s13, r2
   112ec:	vcvt.f64.s32	d6, s13
   112f0:	vdiv.f64	d5, d7, d6
   112f4:	vmov	r2, r3, d5
   112f8:	ldr	r1, [pc, #40]	; 11328 <__assert_fail@plt+0x760>
   112fc:	bl	10b44 <fprintf@plt>
   11300:	pop	{r4, pc}
   11304:	mov	r3, r0
   11308:	mov	r2, #8
   1130c:	mov	r1, #1
   11310:	ldr	r0, [pc, #20]	; 1132c <__assert_fail@plt+0x764>
   11314:	bl	10ab4 <fwrite@plt>
   11318:	pop	{r4, pc}
   1131c:	nop			; (mov r0, r0)
   11320:	andeq	r0, r0, r0
   11324:	subsmi	r0, r9, r0
   11328:	andeq	r2, r1, r8, asr pc
   1132c:	andeq	r2, r1, ip, asr #30
   11330:	push	{r4, r5, r6, lr}
   11334:	mov	r4, r0
   11338:	subs	r5, r1, #0
   1133c:	beq	11374 <__assert_fail@plt+0x7ac>
   11340:	ldr	r3, [r5, #4]
   11344:	ldr	r2, [r5]
   11348:	ldr	r1, [pc, #60]	; 1138c <__assert_fail@plt+0x7c4>
   1134c:	bl	10b44 <fprintf@plt>
   11350:	mov	r1, r5
   11354:	mov	r0, r4
   11358:	bl	112c0 <__assert_fail@plt+0x6f8>
   1135c:	mov	r3, r4
   11360:	mov	r2, #3
   11364:	mov	r1, #1
   11368:	ldr	r0, [pc, #32]	; 11390 <__assert_fail@plt+0x7c8>
   1136c:	bl	10ab4 <fwrite@plt>
   11370:	pop	{r4, r5, r6, pc}
   11374:	mov	r3, r0
   11378:	mov	r2, #26
   1137c:	mov	r1, #1
   11380:	ldr	r0, [pc, #12]	; 11394 <__assert_fail@plt+0x7cc>
   11384:	bl	10ab4 <fwrite@plt>
   11388:	b	1135c <__assert_fail@plt+0x794>
   1138c:	andeq	r2, r1, r0, ror #30
   11390:	andeq	r2, r1, r8, lsl #31
   11394:	andeq	r2, r1, ip, ror #30
   11398:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1139c:	mov	r6, r0
   113a0:	mov	r5, r1
   113a4:	mov	r7, r2
   113a8:	ldrb	r9, [sp, #32]
   113ac:	ldrb	sl, [sp, #36]	; 0x24
   113b0:	mov	r2, r3
   113b4:	ldr	r1, [pc, #240]	; 114ac <__assert_fail@plt+0x8e4>
   113b8:	bl	10b44 <fprintf@plt>
   113bc:	mov	r1, #0
   113c0:	mov	r0, r6
   113c4:	bl	11330 <__assert_fail@plt+0x768>
   113c8:	cmp	r9, #0
   113cc:	bne	11488 <__assert_fail@plt+0x8c0>
   113d0:	ldr	r2, [pc, #216]	; 114b0 <__assert_fail@plt+0x8e8>
   113d4:	ldr	r1, [pc, #216]	; 114b4 <__assert_fail@plt+0x8ec>
   113d8:	mov	r0, r6
   113dc:	bl	10b44 <fprintf@plt>
   113e0:	cmp	r7, #0
   113e4:	bgt	114a0 <__assert_fail@plt+0x8d8>
   113e8:	b	1145c <__assert_fail@plt+0x894>
   113ec:	add	r4, r4, #1
   113f0:	sxth	r4, r4
   113f4:	cmp	r7, r4
   113f8:	blt	11428 <__assert_fail@plt+0x860>
   113fc:	add	r1, r5, r4, lsl #3
   11400:	ldr	r3, [r5, r4, lsl #3]
   11404:	cmp	r3, #0
   11408:	ble	113ec <__assert_fail@plt+0x824>
   1140c:	mov	r0, r6
   11410:	bl	11330 <__assert_fail@plt+0x768>
   11414:	mov	r2, r4
   11418:	mov	r1, r8
   1141c:	mov	r0, r6
   11420:	bl	10b44 <fprintf@plt>
   11424:	b	113ec <__assert_fail@plt+0x824>
   11428:	cmp	r9, #0
   1142c:	beq	1145c <__assert_fail@plt+0x894>
   11430:	add	r3, r7, #1
   11434:	add	r1, r5, r3, lsl #3
   11438:	ldr	r3, [r5, r3, lsl #3]
   1143c:	cmp	r3, #0
   11440:	ble	1145c <__assert_fail@plt+0x894>
   11444:	mov	r0, r6
   11448:	bl	11330 <__assert_fail@plt+0x768>
   1144c:	mov	r2, r7
   11450:	ldr	r1, [pc, #96]	; 114b8 <__assert_fail@plt+0x8f0>
   11454:	mov	r0, r6
   11458:	bl	10b44 <fprintf@plt>
   1145c:	cmp	sl, #0
   11460:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11464:	mov	r1, r5
   11468:	mov	r0, r6
   1146c:	bl	11330 <__assert_fail@plt+0x768>
   11470:	mov	r3, r6
   11474:	mov	r2, #7
   11478:	mov	r1, #1
   1147c:	ldr	r0, [pc, #56]	; 114bc <__assert_fail@plt+0x8f4>
   11480:	bl	10ab4 <fwrite@plt>
   11484:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11488:	ldr	r2, [pc, #48]	; 114c0 <__assert_fail@plt+0x8f8>
   1148c:	ldr	r1, [pc, #32]	; 114b4 <__assert_fail@plt+0x8ec>
   11490:	mov	r0, r6
   11494:	bl	10b44 <fprintf@plt>
   11498:	cmp	r7, #0
   1149c:	ble	11430 <__assert_fail@plt+0x868>
   114a0:	mov	r4, #1
   114a4:	ldr	r8, [pc, #24]	; 114c4 <__assert_fail@plt+0x8fc>
   114a8:	b	113fc <__assert_fail@plt+0x834>
   114ac:	andeq	r2, r1, ip, lsl #31
   114b0:			; <UNDEFINED> instruction: 0x00012fbc
   114b4:	andeq	r6, r1, r0, asr r4
   114b8:	andeq	r2, r1, r0, lsr #31
   114bc:	andeq	r2, r1, ip, lsr #31
   114c0:			; <UNDEFINED> instruction: 0x00012fb4
   114c4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   114c8:	push	{r4, r5, r6, r7, r8, lr}
   114cc:	mov	r6, r0
   114d0:	mov	r5, r1
   114d4:	mov	r7, r2
   114d8:	mov	r0, r1
   114dc:	bl	11c00 <__assert_fail@plt+0x1038>
   114e0:	add	r4, r5, #4096	; 0x1000
   114e4:	ldr	r2, [pc, #136]	; 11574 <__assert_fail@plt+0x9ac>
   114e8:	ldr	r1, [r4, #3952]	; 0xf70
   114ec:	ldr	r0, [r4, #3956]	; 0xf74
   114f0:	bl	11228 <__assert_fail@plt+0x660>
   114f4:	mov	r2, r7
   114f8:	ldr	r1, [pc, #120]	; 11578 <__assert_fail@plt+0x9b0>
   114fc:	mov	r0, r6
   11500:	bl	10b44 <fprintf@plt>
   11504:	mov	r1, #0
   11508:	mov	r0, r6
   1150c:	bl	11330 <__assert_fail@plt+0x768>
   11510:	mov	r1, r6
   11514:	mov	r0, #10
   11518:	bl	10b74 <fputc@plt>
   1151c:	ldr	r3, [r4, #3956]	; 0xf74
   11520:	cmp	r3, #0
   11524:	pople	{r4, r5, r6, r7, r8, pc}
   11528:	mov	r4, #0
   1152c:	add	r5, r5, #4096	; 0x1000
   11530:	ldr	r7, [pc, #68]	; 1157c <__assert_fail@plt+0x9b4>
   11534:	ldr	r3, [r5, #3952]	; 0xf70
   11538:	ldr	r1, [r3, r4, lsl #2]
   1153c:	add	r1, r1, #12
   11540:	mov	r0, r6
   11544:	bl	11330 <__assert_fail@plt+0x768>
   11548:	ldr	r3, [r5, #3952]	; 0xf70
   1154c:	ldr	r3, [r3, r4, lsl #2]
   11550:	ldr	r2, [r3, #8]
   11554:	mov	r1, r7
   11558:	mov	r0, r6
   1155c:	bl	10b44 <fprintf@plt>
   11560:	add	r4, r4, #1
   11564:	ldr	r3, [r5, #3956]	; 0xf74
   11568:	cmp	r3, r4
   1156c:	bgt	11534 <__assert_fail@plt+0x96c>
   11570:	pop	{r4, r5, r6, r7, r8, pc}
   11574:	andeq	r1, r1, r0, lsl #11
   11578:	andeq	r2, r1, ip, lsl #31
   1157c:	andeq	r6, r1, r0, asr r4
   11580:	push	{r4, lr}
   11584:	ldr	r1, [r1, #8]
   11588:	ldr	r0, [r0, #8]
   1158c:	bl	122fc <__assert_fail@plt+0x1734>
   11590:	pop	{r4, pc}
   11594:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11598:	sub	sp, sp, #8
   1159c:	mov	r5, r0
   115a0:	mov	r4, r1
   115a4:	bl	11258 <__assert_fail@plt+0x690>
   115a8:	cmp	r0, #0
   115ac:	moveq	r7, #0
   115b0:	beq	11660 <__assert_fail@plt+0xa98>
   115b4:	mov	r0, r5
   115b8:	bl	11258 <__assert_fail@plt+0x690>
   115bc:	cmp	r0, #0
   115c0:	moveq	r7, #0
   115c4:	beq	11660 <__assert_fail@plt+0xa98>
   115c8:	mov	r7, #0
   115cc:	ldr	sl, [pc, #152]	; 1166c <__assert_fail@plt+0xaa4>
   115d0:	ldr	r8, [pc, #152]	; 11670 <__assert_fail@plt+0xaa8>
   115d4:	add	r6, r8, #29
   115d8:	ldr	r9, [pc, #148]	; 11674 <__assert_fail@plt+0xaac>
   115dc:	b	11650 <__assert_fail@plt+0xa88>
   115e0:	mov	r3, sp
   115e4:	add	r2, sp, #4
   115e8:	mov	r1, sl
   115ec:	mov	r0, r8
   115f0:	bl	10b50 <__isoc99_sscanf@plt>
   115f4:	cmp	r0, #2
   115f8:	bne	11660 <__assert_fail@plt+0xa98>
   115fc:	mov	r2, #10
   11600:	mov	r1, #0
   11604:	mov	r0, r6
   11608:	bl	10a24 <strtol@plt>
   1160c:	cmp	r0, #0
   11610:	bne	1162c <__assert_fail@plt+0xa64>
   11614:	mov	r1, r9
   11618:	mov	r0, r6
   1161c:	bl	10a18 <strcmp@plt>
   11620:	cmp	r0, #0
   11624:	ldreq	r7, [sp, #4]
   11628:	movne	r0, #11
   1162c:	add	r2, r4, r0, lsl #3
   11630:	ldr	r3, [r4, r0, lsl #3]
   11634:	ldr	r1, [sp, #4]
   11638:	add	r3, r3, r1
   1163c:	str	r3, [r4, r0, lsl #3]
   11640:	ldr	r3, [r2, #4]
   11644:	ldr	r1, [sp]
   11648:	add	r3, r3, r1
   1164c:	str	r3, [r2, #4]
   11650:	mov	r0, r5
   11654:	bl	11258 <__assert_fail@plt+0x690>
   11658:	cmp	r0, #0
   1165c:	bne	115e0 <__assert_fail@plt+0xa18>
   11660:	mov	r0, r7
   11664:	add	sp, sp, #8
   11668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1166c:	andeq	r2, r1, r4, asr #31
   11670:	andeq	r7, r2, r4, ror #1
   11674:	andeq	r2, r1, ip, lsr #31
   11678:	ldr	r3, [r0]
   1167c:	add	r1, r3, r1
   11680:	str	r1, [r0]
   11684:	ldr	r3, [r0, #4]
   11688:	add	r2, r3, r2
   1168c:	str	r2, [r0, #4]
   11690:	bx	lr
   11694:	push	{r4, r5, r6, r7, r8, lr}
   11698:	mov	r7, r0
   1169c:	mov	r8, r1
   116a0:	mov	r6, r2
   116a4:	mov	r5, r3
   116a8:	bl	11b10 <__assert_fail@plt+0xf48>
   116ac:	subs	r4, r0, #0
   116b0:	beq	116d0 <__assert_fail@plt+0xb08>
   116b4:	ldr	r2, [r4, #12]
   116b8:	add	r2, r2, r6
   116bc:	str	r2, [r4, #12]
   116c0:	ldr	r3, [r4, #16]
   116c4:	add	r3, r3, r5
   116c8:	str	r3, [r4, #16]
   116cc:	pop	{r4, r5, r6, r7, r8, pc}
   116d0:	mov	r1, #20
   116d4:	mov	r0, #1
   116d8:	bl	124e8 <error@@Base+0x3c>
   116dc:	mov	r4, r0
   116e0:	mov	r0, r8
   116e4:	bl	10a78 <strdup@plt>
   116e8:	str	r0, [r4, #8]
   116ec:	mov	r1, r4
   116f0:	mov	r0, r7
   116f4:	bl	11b58 <__assert_fail@plt+0xf90>
   116f8:	b	116b4 <__assert_fail@plt+0xaec>
   116fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   11700:	sub	sp, sp, #12
   11704:	mov	r5, r0
   11708:	mov	r6, r1
   1170c:	bl	11258 <__assert_fail@plt+0x690>
   11710:	cmp	r0, #0
   11714:	beq	1178c <__assert_fail@plt+0xbc4>
   11718:	mov	r0, r5
   1171c:	bl	11258 <__assert_fail@plt+0x690>
   11720:	cmp	r0, #0
   11724:	beq	1178c <__assert_fail@plt+0xbc4>
   11728:	ldr	r9, [pc, #100]	; 11794 <__assert_fail@plt+0xbcc>
   1172c:	ldr	r4, [pc, #100]	; 11798 <__assert_fail@plt+0xbd0>
   11730:	mov	r8, #0
   11734:	add	r7, r4, #29
   11738:	b	1177c <__assert_fail@plt+0xbb4>
   1173c:	mov	r3, sp
   11740:	add	r2, sp, #4
   11744:	mov	r1, r9
   11748:	mov	r0, r4
   1174c:	bl	10b50 <__isoc99_sscanf@plt>
   11750:	cmp	r0, #2
   11754:	bne	1178c <__assert_fail@plt+0xbc4>
   11758:	mov	r0, r4
   1175c:	bl	10b38 <strlen@plt>
   11760:	add	r0, r4, r0
   11764:	strb	r8, [r0, #-1]
   11768:	ldr	r3, [sp]
   1176c:	ldr	r2, [sp, #4]
   11770:	mov	r1, r7
   11774:	mov	r0, r6
   11778:	bl	11694 <__assert_fail@plt+0xacc>
   1177c:	mov	r0, r5
   11780:	bl	11258 <__assert_fail@plt+0x690>
   11784:	cmp	r0, #0
   11788:	bne	1173c <__assert_fail@plt+0xb74>
   1178c:	add	sp, sp, #12
   11790:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11794:	andeq	r2, r1, r4, asr #31
   11798:	andeq	r7, r2, r4, ror #1
   1179c:	push	{r4, r5, r6, r7, lr}
   117a0:	sub	sp, sp, #12
   117a4:	mov	r5, r0
   117a8:	mov	r6, r1
   117ac:	ldr	r1, [pc, #332]	; 11900 <__assert_fail@plt+0xd38>
   117b0:	mov	r0, r6
   117b4:	bl	12580 <error@@Base+0xd4>
   117b8:	mov	r4, r0
   117bc:	bl	11258 <__assert_fail@plt+0x690>
   117c0:	cmp	r0, #0
   117c4:	beq	118ec <__assert_fail@plt+0xd24>
   117c8:	mov	r2, #45	; 0x2d
   117cc:	ldr	r1, [pc, #304]	; 11904 <__assert_fail@plt+0xd3c>
   117d0:	ldr	r0, [pc, #304]	; 11908 <__assert_fail@plt+0xd40>
   117d4:	bl	10ba4 <strncmp@plt>
   117d8:	cmp	r0, #0
   117dc:	bne	118ec <__assert_fail@plt+0xd24>
   117e0:	mov	r0, r4
   117e4:	bl	11258 <__assert_fail@plt+0x690>
   117e8:	cmp	r0, #0
   117ec:	beq	118ec <__assert_fail@plt+0xd24>
   117f0:	ldr	r1, [pc, #276]	; 1190c <__assert_fail@plt+0xd44>
   117f4:	ldr	r0, [pc, #268]	; 11908 <__assert_fail@plt+0xd40>
   117f8:	bl	10a18 <strcmp@plt>
   117fc:	cmp	r0, #0
   11800:	bne	118ec <__assert_fail@plt+0xd24>
   11804:	add	r1, sp, #4
   11808:	mov	r0, r4
   1180c:	bl	1127c <__assert_fail@plt+0x6b4>
   11810:	cmp	r0, #0
   11814:	beq	118ec <__assert_fail@plt+0xd24>
   11818:	mov	r1, sp
   1181c:	mov	r0, r4
   11820:	bl	1127c <__assert_fail@plt+0x6b4>
   11824:	cmp	r0, #0
   11828:	beq	118ec <__assert_fail@plt+0xd24>
   1182c:	mov	r0, r4
   11830:	bl	11258 <__assert_fail@plt+0x690>
   11834:	cmp	r0, #0
   11838:	beq	118ec <__assert_fail@plt+0xd24>
   1183c:	mov	r0, r4
   11840:	bl	11258 <__assert_fail@plt+0x690>
   11844:	cmp	r0, #0
   11848:	beq	118ec <__assert_fail@plt+0xd24>
   1184c:	ldr	r3, [r5]
   11850:	ldr	r2, [sp, #4]
   11854:	add	r3, r3, r2
   11858:	str	r3, [r5]
   1185c:	ldr	r3, [r5, #4]
   11860:	ldr	r2, [sp]
   11864:	add	r3, r3, r2
   11868:	str	r3, [r5, #4]
   1186c:	add	r1, r5, #8
   11870:	mov	r0, r4
   11874:	bl	11594 <__assert_fail@plt+0x9cc>
   11878:	mov	r7, r0
   1187c:	add	r1, r5, #416	; 0x1a0
   11880:	mov	r0, r4
   11884:	bl	11594 <__assert_fail@plt+0x9cc>
   11888:	mov	r6, r0
   1188c:	add	r1, r5, #824	; 0x338
   11890:	mov	r0, r4
   11894:	bl	11594 <__assert_fail@plt+0x9cc>
   11898:	ldr	r3, [sp, #4]
   1189c:	cmp	r3, #0
   118a0:	ble	118dc <__assert_fail@plt+0xd14>
   118a4:	add	r1, r5, #920	; 0x398
   118a8:	mov	r0, r4
   118ac:	bl	11594 <__assert_fail@plt+0x9cc>
   118b0:	cmp	r7, #0
   118b4:	ble	118c4 <__assert_fail@plt+0xcfc>
   118b8:	add	r1, r5, #992	; 0x3e0
   118bc:	mov	r0, r4
   118c0:	bl	116fc <__assert_fail@plt+0xb34>
   118c4:	cmp	r6, #0
   118c8:	ble	118dc <__assert_fail@plt+0xd14>
   118cc:	add	r1, r5, #9024	; 0x2340
   118d0:	add	r1, r1, #24
   118d4:	mov	r0, r4
   118d8:	bl	116fc <__assert_fail@plt+0xb34>
   118dc:	mov	r0, r4
   118e0:	bl	12378 <__assert_fail@plt+0x17b0>
   118e4:	add	sp, sp, #12
   118e8:	pop	{r4, r5, r6, r7, pc}
   118ec:	ldr	r1, [pc, #28]	; 11910 <__assert_fail@plt+0xd48>
   118f0:	cmp	r6, #0
   118f4:	movne	r1, r6
   118f8:	ldr	r0, [pc, #20]	; 11914 <__assert_fail@plt+0xd4c>
   118fc:	bl	12538 <error@@Base+0x8c>
   11900:	ldrdeq	r2, [r1], -r4
   11904:	ldrdeq	r2, [r1], -r8
   11908:	andeq	r7, r2, r4, ror #1
   1190c:	andeq	r6, r1, r4, asr #10
   11910:	andeq	r2, r1, ip, asr #31
   11914:	andeq	r3, r1, r8
   11918:	push	{r4, r5, r6, r7, lr}
   1191c:	sub	sp, sp, #12
   11920:	mov	r4, r0
   11924:	mov	r0, r1
   11928:	ldr	r1, [pc, #292]	; 11a54 <__assert_fail@plt+0xe8c>
   1192c:	bl	12580 <error@@Base+0xd4>
   11930:	mov	r5, r0
   11934:	ldr	r3, [pc, #284]	; 11a58 <__assert_fail@plt+0xe90>
   11938:	ldr	r2, [pc, #284]	; 11a5c <__assert_fail@plt+0xe94>
   1193c:	ldr	r1, [pc, #284]	; 11a60 <__assert_fail@plt+0xe98>
   11940:	bl	10b44 <fprintf@plt>
   11944:	ldr	r2, [r4]
   11948:	ldr	r1, [pc, #276]	; 11a64 <__assert_fail@plt+0xe9c>
   1194c:	mov	r0, r5
   11950:	bl	10b44 <fprintf@plt>
   11954:	ldr	r2, [r4, #4]
   11958:	ldr	r1, [pc, #264]	; 11a68 <__assert_fail@plt+0xea0>
   1195c:	mov	r0, r5
   11960:	bl	10b44 <fprintf@plt>
   11964:	mov	r1, r4
   11968:	mov	r0, r5
   1196c:	bl	112c0 <__assert_fail@plt+0x6f8>
   11970:	mov	r3, r5
   11974:	mov	r2, #12
   11978:	mov	r1, #1
   1197c:	ldr	r0, [pc, #232]	; 11a6c <__assert_fail@plt+0xea4>
   11980:	bl	10ab4 <fwrite@plt>
   11984:	mov	r6, #1
   11988:	str	r6, [sp, #4]
   1198c:	mov	r7, #0
   11990:	str	r7, [sp]
   11994:	ldr	r3, [pc, #212]	; 11a70 <__assert_fail@plt+0xea8>
   11998:	mov	r2, #50	; 0x32
   1199c:	add	r1, r4, #8
   119a0:	mov	r0, r5
   119a4:	bl	11398 <__assert_fail@plt+0x7d0>
   119a8:	str	r6, [sp, #4]
   119ac:	str	r7, [sp]
   119b0:	ldr	r3, [pc, #188]	; 11a74 <__assert_fail@plt+0xeac>
   119b4:	mov	r2, #50	; 0x32
   119b8:	add	r1, r4, #416	; 0x1a0
   119bc:	mov	r0, r5
   119c0:	bl	11398 <__assert_fail@plt+0x7d0>
   119c4:	str	r6, [sp, #4]
   119c8:	str	r6, [sp]
   119cc:	ldr	r3, [pc, #164]	; 11a78 <__assert_fail@plt+0xeb0>
   119d0:	mov	r2, #10
   119d4:	add	r1, r4, #824	; 0x338
   119d8:	mov	r0, r5
   119dc:	bl	11398 <__assert_fail@plt+0x7d0>
   119e0:	ldr	r3, [r4]
   119e4:	cmp	r3, r7
   119e8:	ble	11a44 <__assert_fail@plt+0xe7c>
   119ec:	str	r7, [sp, #4]
   119f0:	str	r7, [sp]
   119f4:	ldr	r3, [pc, #128]	; 11a7c <__assert_fail@plt+0xeb4>
   119f8:	mov	r2, #8
   119fc:	add	r1, r4, #920	; 0x398
   11a00:	mov	r0, r5
   11a04:	bl	11398 <__assert_fail@plt+0x7d0>
   11a08:	ldr	r3, [r4, #8]
   11a0c:	cmp	r3, r7
   11a10:	ble	11a24 <__assert_fail@plt+0xe5c>
   11a14:	ldr	r2, [pc, #84]	; 11a70 <__assert_fail@plt+0xea8>
   11a18:	add	r1, r4, #992	; 0x3e0
   11a1c:	mov	r0, r5
   11a20:	bl	114c8 <__assert_fail@plt+0x900>
   11a24:	ldr	r3, [r4, #416]	; 0x1a0
   11a28:	cmp	r3, #0
   11a2c:	ble	11a44 <__assert_fail@plt+0xe7c>
   11a30:	add	r1, r4, #9024	; 0x2340
   11a34:	ldr	r2, [pc, #56]	; 11a74 <__assert_fail@plt+0xeac>
   11a38:	add	r1, r1, #24
   11a3c:	mov	r0, r5
   11a40:	bl	114c8 <__assert_fail@plt+0x900>
   11a44:	mov	r0, r5
   11a48:	bl	12378 <__assert_fail@plt+0x17b0>
   11a4c:	add	sp, sp, #12
   11a50:	pop	{r4, r5, r6, r7, pc}
   11a54:	andeq	r3, r1, ip, lsl r0
   11a58:	andeq	r6, r1, r4, asr #10
   11a5c:	ldrdeq	r2, [r1], -r8
   11a60:	andeq	r3, r1, r0, lsr #32
   11a64:	andeq	r3, r1, r8, lsr #32
   11a68:	andeq	r3, r1, r8, lsr r0
   11a6c:	andeq	r3, r1, r0, asr r0
   11a70:	andeq	r3, r1, r0, rrx
   11a74:	andeq	r3, r1, ip, rrx
   11a78:	andeq	r3, r1, ip, ror r0
   11a7c:	muleq	r1, r4, r0
   11a80:	ldrb	r3, [r0]
   11a84:	cmp	r3, #0
   11a88:	beq	11ac8 <__assert_fail@plt+0xf00>
   11a8c:	mov	r2, #0
   11a90:	add	r2, r2, r3
   11a94:	ldrb	r3, [r0, #1]!
   11a98:	cmp	r3, #0
   11a9c:	bne	11a90 <__assert_fail@plt+0xec8>
   11aa0:	ldr	r0, [pc, #40]	; 11ad0 <__assert_fail@plt+0xf08>
   11aa4:	smull	r3, r0, r0, r2
   11aa8:	add	r3, r0, r2
   11aac:	asr	r0, r2, #31
   11ab0:	rsb	r0, r0, r3, asr #8
   11ab4:	rsb	r3, r0, r0, lsl #6
   11ab8:	rsb	r0, r0, r3, lsl #3
   11abc:	sub	r0, r2, r0
   11ac0:	sxth	r0, r0
   11ac4:	bx	lr
   11ac8:	mov	r2, #0
   11acc:	b	11aa0 <__assert_fail@plt+0xed8>
   11ad0:	subhi	r4, sl, #1552	; 0x610
   11ad4:	push	{r4, r5, r6, lr}
   11ad8:	mov	r6, r0
   11adc:	mov	r4, r0
   11ae0:	add	r5, r0, #8000	; 0x1f40
   11ae4:	add	r5, r5, #48	; 0x30
   11ae8:	mov	r0, r4
   11aec:	bl	10f6c <__assert_fail@plt+0x3a4>
   11af0:	add	r4, r4, #16
   11af4:	cmp	r4, r5
   11af8:	bne	11ae8 <__assert_fail@plt+0xf20>
   11afc:	add	r6, r6, #4096	; 0x1000
   11b00:	mov	r3, #0
   11b04:	str	r3, [r6, #3952]	; 0xf70
   11b08:	str	r3, [r6, #3956]	; 0xf74
   11b0c:	pop	{r4, r5, r6, pc}
   11b10:	push	{r4, r5, r6, lr}
   11b14:	mov	r4, r0
   11b18:	mov	r5, r1
   11b1c:	mov	r0, r1
   11b20:	bl	11a80 <__assert_fail@plt+0xeb8>
   11b24:	ldr	r4, [r4, r0, lsl #4]
   11b28:	cmp	r4, #0
   11b2c:	beq	11b50 <__assert_fail@plt+0xf88>
   11b30:	ldr	r1, [r4, #8]
   11b34:	mov	r0, r5
   11b38:	bl	10a18 <strcmp@plt>
   11b3c:	cmp	r0, #0
   11b40:	beq	11b50 <__assert_fail@plt+0xf88>
   11b44:	ldr	r4, [r4, #4]
   11b48:	cmp	r4, #0
   11b4c:	bne	11b30 <__assert_fail@plt+0xf68>
   11b50:	mov	r0, r4
   11b54:	pop	{r4, r5, r6, pc}
   11b58:	push	{r4, r5, r6, lr}
   11b5c:	mov	r4, r0
   11b60:	mov	r5, r1
   11b64:	ldr	r0, [r1, #8]
   11b68:	bl	11a80 <__assert_fail@plt+0xeb8>
   11b6c:	mov	r1, r5
   11b70:	add	r0, r4, r0, lsl #4
   11b74:	bl	10f84 <__assert_fail@plt+0x3bc>
   11b78:	add	r3, r4, #4096	; 0x1000
   11b7c:	ldr	r0, [r3, #3952]	; 0xf70
   11b80:	cmp	r0, #0
   11b84:	beq	11b98 <__assert_fail@plt+0xfd0>
   11b88:	bl	10a48 <free@plt>
   11b8c:	add	r3, r4, #4096	; 0x1000
   11b90:	mov	r2, #0
   11b94:	str	r2, [r3, #3952]	; 0xf70
   11b98:	add	r4, r4, #4096	; 0x1000
   11b9c:	ldr	r3, [r4, #3956]	; 0xf74
   11ba0:	add	r3, r3, #1
   11ba4:	str	r3, [r4, #3956]	; 0xf74
   11ba8:	pop	{r4, r5, r6, pc}
   11bac:	push	{r4, r5, r6, lr}
   11bb0:	mov	r4, r0
   11bb4:	mov	r5, r1
   11bb8:	ldr	r0, [r1, #8]
   11bbc:	bl	11a80 <__assert_fail@plt+0xeb8>
   11bc0:	mov	r1, r5
   11bc4:	add	r0, r4, r0, lsl #4
   11bc8:	bl	10fe0 <__assert_fail@plt+0x418>
   11bcc:	add	r3, r4, #4096	; 0x1000
   11bd0:	ldr	r0, [r3, #3952]	; 0xf70
   11bd4:	cmp	r0, #0
   11bd8:	beq	11bec <__assert_fail@plt+0x1024>
   11bdc:	bl	10a48 <free@plt>
   11be0:	add	r3, r4, #4096	; 0x1000
   11be4:	mov	r2, #0
   11be8:	str	r2, [r3, #3952]	; 0xf70
   11bec:	add	r4, r4, #4096	; 0x1000
   11bf0:	ldr	r3, [r4, #3956]	; 0xf74
   11bf4:	sub	r3, r3, #1
   11bf8:	str	r3, [r4, #3956]	; 0xf74
   11bfc:	pop	{r4, r5, r6, pc}
   11c00:	add	r3, r0, #4096	; 0x1000
   11c04:	ldr	r3, [r3, #3952]	; 0xf70
   11c08:	cmp	r3, #0
   11c0c:	bxne	lr
   11c10:	add	r3, r0, #4096	; 0x1000
   11c14:	ldr	r3, [r3, #3956]	; 0xf74
   11c18:	cmp	r3, #0
   11c1c:	bxeq	lr
   11c20:	push	{r4, r5, r6, lr}
   11c24:	mov	r4, r0
   11c28:	mov	r1, #4
   11c2c:	mov	r0, r3
   11c30:	bl	124e8 <error@@Base+0x3c>
   11c34:	add	r3, r4, #4096	; 0x1000
   11c38:	str	r0, [r3, #3952]	; 0xf70
   11c3c:	mov	r1, #0
   11c40:	mov	lr, r1
   11c44:	mov	ip, r3
   11c48:	ldr	r5, [pc, #64]	; 11c90 <__assert_fail@plt+0x10c8>
   11c4c:	b	11c5c <__assert_fail@plt+0x1094>
   11c50:	add	lr, lr, #1
   11c54:	cmp	lr, r5
   11c58:	beq	11c8c <__assert_fail@plt+0x10c4>
   11c5c:	ldr	r3, [r4, lr, lsl #4]
   11c60:	cmp	r3, #0
   11c64:	beq	11c50 <__assert_fail@plt+0x1088>
   11c68:	lsl	r2, r1, #2
   11c6c:	add	r1, r1, #1
   11c70:	ldr	r0, [ip, #3952]	; 0xf70
   11c74:	str	r3, [r0, r2]
   11c78:	ldr	r3, [r3, #4]
   11c7c:	add	r2, r2, #4
   11c80:	cmp	r3, #0
   11c84:	bne	11c6c <__assert_fail@plt+0x10a4>
   11c88:	b	11c50 <__assert_fail@plt+0x1088>
   11c8c:	pop	{r4, r5, r6, pc}
   11c90:	strdeq	r0, [r0], -r7
   11c94:	push	{r4, r5, r6, r7, r8, lr}
   11c98:	mov	r7, r0
   11c9c:	mov	r6, r1
   11ca0:	mov	r4, r0
   11ca4:	add	r5, r0, #8000	; 0x1f40
   11ca8:	add	r5, r5, #48	; 0x30
   11cac:	mov	r1, r6
   11cb0:	mov	r0, r4
   11cb4:	bl	110a8 <__assert_fail@plt+0x4e0>
   11cb8:	add	r4, r4, #16
   11cbc:	cmp	r4, r5
   11cc0:	bne	11cac <__assert_fail@plt+0x10e4>
   11cc4:	add	r3, r7, #4096	; 0x1000
   11cc8:	ldr	r0, [r3, #3952]	; 0xf70
   11ccc:	cmp	r0, #0
   11cd0:	beq	11ce4 <__assert_fail@plt+0x111c>
   11cd4:	bl	10a48 <free@plt>
   11cd8:	add	r3, r7, #4096	; 0x1000
   11cdc:	mov	r2, #0
   11ce0:	str	r2, [r3, #3952]	; 0xf70
   11ce4:	add	r7, r7, #4096	; 0x1000
   11ce8:	mov	r3, #0
   11cec:	str	r3, [r7, #3956]	; 0xf74
   11cf0:	pop	{r4, r5, r6, r7, r8, pc}
   11cf4:	cmp	r2, r1
   11cf8:	bcc	11d60 <__assert_fail@plt+0x1198>
   11cfc:	push	{r4, lr}
   11d00:	sub	r3, r2, r1
   11d04:	add	r3, r1, r3, lsr #1
   11d08:	add	lr, r3, r3, lsl #1
   11d0c:	ldr	ip, [pc, #84]	; 11d68 <__assert_fail@plt+0x11a0>
   11d10:	ldr	ip, [ip, lr, lsl #2]
   11d14:	cmp	ip, r0
   11d18:	bhi	11d48 <__assert_fail@plt+0x1180>
   11d1c:	add	r1, r3, r3, lsl #1
   11d20:	ldr	ip, [pc, #64]	; 11d68 <__assert_fail@plt+0x11a0>
   11d24:	add	r1, ip, r1, lsl #2
   11d28:	ldr	r1, [r1, #4]
   11d2c:	cmp	r0, r1
   11d30:	bhi	11d54 <__assert_fail@plt+0x118c>
   11d34:	add	r3, r3, r3, lsl #1
   11d38:	ldr	r1, [pc, #40]	; 11d68 <__assert_fail@plt+0x11a0>
   11d3c:	add	r3, r1, r3, lsl #2
   11d40:	ldr	r0, [r3, #8]
   11d44:	pop	{r4, pc}
   11d48:	sub	r2, r3, #1
   11d4c:	bl	11cf4 <__assert_fail@plt+0x112c>
   11d50:	pop	{r4, pc}
   11d54:	add	r1, r3, #1
   11d58:	bl	11cf4 <__assert_fail@plt+0x112c>
   11d5c:	pop	{r4, pc}
   11d60:	mov	r0, #0
   11d64:	bx	lr
   11d68:	muleq	r1, ip, r0
   11d6c:	cmp	r0, #0
   11d70:	beq	11d8c <__assert_fail@plt+0x11c4>
   11d74:	push	{r4, lr}
   11d78:	ldr	r2, [pc, #20]	; 11d94 <__assert_fail@plt+0x11cc>
   11d7c:	mov	r1, #0
   11d80:	ldr	r0, [r0, #12]
   11d84:	bl	11cf4 <__assert_fail@plt+0x112c>
   11d88:	pop	{r4, pc}
   11d8c:	mov	r0, #18
   11d90:	bx	lr
   11d94:	andeq	r0, r0, r4, asr #8
   11d98:	push	{r4, lr}
   11d9c:	subs	r4, r0, #0
   11da0:	beq	11dc4 <__assert_fail@plt+0x11fc>
   11da4:	ldr	r4, [r4, #4]
   11da8:	cmp	r4, #0
   11dac:	beq	11dc4 <__assert_fail@plt+0x11fc>
   11db0:	mov	r0, r4
   11db4:	bl	11d6c <__assert_fail@plt+0x11a4>
   11db8:	bic	r0, r0, #2
   11dbc:	cmp	r0, #4
   11dc0:	beq	11da4 <__assert_fail@plt+0x11dc>
   11dc4:	mov	r0, r4
   11dc8:	pop	{r4, pc}
   11dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dd0:	sub	sp, sp, #28
   11dd4:	str	r0, [sp, #4]
   11dd8:	ldr	r7, [r1]
   11ddc:	mov	sl, #17
   11de0:	mov	fp, #0
   11de4:	b	120e8 <__assert_fail@plt+0x1520>
   11de8:	ldr	r8, [r4, #4]
   11dec:	cmp	r7, r8
   11df0:	movne	r5, r7
   11df4:	movne	r6, #0
   11df8:	beq	12148 <__assert_fail@plt+0x1580>
   11dfc:	add	r1, sp, #8
   11e00:	ldr	r0, [r5, #12]
   11e04:	bl	10a6c <utf8proc_encode_char@plt>
   11e08:	cmp	r0, #0
   11e0c:	beq	11e3c <__assert_fail@plt+0x1274>
   11e10:	add	r6, r6, r0
   11e14:	ldr	r5, [r5, #4]
   11e18:	cmp	r8, r5
   11e1c:	beq	12100 <__assert_fail@plt+0x1538>
   11e20:	cmp	r5, #0
   11e24:	bne	11dfc <__assert_fail@plt+0x1234>
   11e28:	ldr	r3, [pc, #992]	; 12210 <__assert_fail@plt+0x1648>
   11e2c:	mov	r2, #249	; 0xf9
   11e30:	ldr	r1, [pc, #988]	; 12214 <__assert_fail@plt+0x164c>
   11e34:	ldr	r0, [pc, #988]	; 12218 <__assert_fail@plt+0x1650>
   11e38:	bl	10bc8 <__assert_fail@plt>
   11e3c:	ldr	r3, [pc, #972]	; 12210 <__assert_fail@plt+0x1648>
   11e40:	mov	r2, #253	; 0xfd
   11e44:	ldr	r1, [pc, #968]	; 12214 <__assert_fail@plt+0x164c>
   11e48:	ldr	r0, [pc, #972]	; 1221c <__assert_fail@plt+0x1654>
   11e4c:	bl	10bc8 <__assert_fail@plt>
   11e50:	sub	r1, r6, #8
   11e54:	cmp	r1, #1
   11e58:	bls	11ed0 <__assert_fail@plt+0x1308>
   11e5c:	sub	r1, r6, #12
   11e60:	cmp	r6, #10
   11e64:	cmpne	r1, #1
   11e68:	bhi	11f58 <__assert_fail@plt+0x1390>
   11e6c:	sub	r1, r0, #8
   11e70:	cmp	r1, #1
   11e74:	bhi	11f58 <__assert_fail@plt+0x1390>
   11e78:	b	11ed0 <__assert_fail@plt+0x1308>
   11e7c:	cmp	r5, #13
   11e80:	beq	12190 <__assert_fail@plt+0x15c8>
   11e84:	sub	r1, r5, #10
   11e88:	bics	r1, r1, #2
   11e8c:	bne	11f64 <__assert_fail@plt+0x139c>
   11e90:	sub	r1, r6, #8
   11e94:	cmp	r1, #1
   11e98:	bhi	11f64 <__assert_fail@plt+0x139c>
   11e9c:	b	11ed0 <__assert_fail@plt+0x1308>
   11ea0:	cmp	r5, #15
   11ea4:	beq	11ff8 <__assert_fail@plt+0x1430>
   11ea8:	cmp	r8, #15
   11eac:	beq	12044 <__assert_fail@plt+0x147c>
   11eb0:	cmp	r5, #7
   11eb4:	movne	r2, #0
   11eb8:	moveq	r2, #1
   11ebc:	cmp	r6, #7
   11ec0:	movne	r0, #0
   11ec4:	moveq	r0, #1
   11ec8:	tst	r2, r0
   11ecc:	beq	121cc <__assert_fail@plt+0x1604>
   11ed0:	ldr	r3, [r4, #4]
   11ed4:	cmp	r3, #0
   11ed8:	beq	12200 <__assert_fail@plt+0x1638>
   11edc:	mov	r8, r5
   11ee0:	mov	r0, r4
   11ee4:	bl	11d98 <__assert_fail@plt+0x11d0>
   11ee8:	mov	r4, r0
   11eec:	bl	11d6c <__assert_fail@plt+0x11a4>
   11ef0:	mov	r5, r0
   11ef4:	mov	r0, r4
   11ef8:	bl	11d98 <__assert_fail@plt+0x11d0>
   11efc:	mov	r9, r0
   11f00:	bl	11d6c <__assert_fail@plt+0x11a4>
   11f04:	mov	r6, r0
   11f08:	mov	r0, r9
   11f0c:	bl	11d98 <__assert_fail@plt+0x11d0>
   11f10:	bl	11d6c <__assert_fail@plt+0x11a4>
   11f14:	sub	r2, r5, #1
   11f18:	cmp	r6, #2
   11f1c:	movne	r3, #0
   11f20:	moveq	r3, #1
   11f24:	cmp	r5, #1
   11f28:	cmpeq	r6, #2
   11f2c:	beq	11ed0 <__assert_fail@plt+0x1308>
   11f30:	cmp	r2, #2
   11f34:	bls	12200 <__assert_fail@plt+0x1638>
   11f38:	bic	r2, r6, #2
   11f3c:	cmp	r2, #1
   11f40:	orreq	r3, r3, #1
   11f44:	cmp	r3, #0
   11f48:	bne	12200 <__assert_fail@plt+0x1638>
   11f4c:	sub	r3, r5, #8
   11f50:	cmp	r3, #1
   11f54:	bls	11e50 <__assert_fail@plt+0x1288>
   11f58:	sub	r1, r8, #8
   11f5c:	cmp	r1, #1
   11f60:	bls	11e7c <__assert_fail@plt+0x12b4>
   11f64:	cmp	r5, #8
   11f68:	movne	r1, #0
   11f6c:	moveq	r1, #1
   11f70:	cmp	r6, #10
   11f74:	movne	ip, #0
   11f78:	moveq	ip, #1
   11f7c:	tst	r1, ip
   11f80:	bne	11ed0 <__assert_fail@plt+0x1308>
   11f84:	cmp	r0, #8
   11f88:	cmpeq	r6, #11
   11f8c:	moveq	lr, #1
   11f90:	movne	lr, #0
   11f94:	tst	r1, lr
   11f98:	bne	11ed0 <__assert_fail@plt+0x1308>
   11f9c:	cmp	r8, #8
   11fa0:	cmpeq	r5, #11
   11fa4:	moveq	r1, #1
   11fa8:	movne	r1, #0
   11fac:	cmp	r6, #8
   11fb0:	movne	r1, #0
   11fb4:	andeq	r1, r1, #1
   11fb8:	cmp	r1, #0
   11fbc:	bne	11ed0 <__assert_fail@plt+0x1308>
   11fc0:	cmp	r5, #15
   11fc4:	movne	lr, #0
   11fc8:	moveq	lr, #1
   11fcc:	cmp	r6, #15
   11fd0:	movne	r1, #0
   11fd4:	moveq	r1, #1
   11fd8:	tst	lr, r1
   11fdc:	bne	11ed0 <__assert_fail@plt+0x1308>
   11fe0:	cmp	r3, #1
   11fe4:	movhi	r3, #0
   11fe8:	movls	r3, #1
   11fec:	tst	r1, r3
   11ff0:	beq	11ea0 <__assert_fail@plt+0x12d8>
   11ff4:	b	11ed0 <__assert_fail@plt+0x1308>
   11ff8:	sub	r9, r6, #8
   11ffc:	cmp	r9, #1
   12000:	bls	11ed0 <__assert_fail@plt+0x1308>
   12004:	cmp	r8, #15
   12008:	beq	12044 <__assert_fail@plt+0x147c>
   1200c:	cmp	r2, #12
   12010:	movne	r2, ip
   12014:	orreq	r2, ip, #1
   12018:	cmp	r2, #0
   1201c:	beq	12028 <__assert_fail@plt+0x1460>
   12020:	cmp	r0, #15
   12024:	beq	11ed0 <__assert_fail@plt+0x1308>
   12028:	cmp	r6, #7
   1202c:	movne	r0, #0
   12030:	moveq	r0, #1
   12034:	cmp	r5, #7
   12038:	cmpeq	r6, #7
   1203c:	beq	11ed0 <__assert_fail@plt+0x1308>
   12040:	b	121e4 <__assert_fail@plt+0x161c>
   12044:	cmp	r5, #14
   12048:	beq	121ac <__assert_fail@plt+0x15e4>
   1204c:	sub	r8, r5, #10
   12050:	bics	r8, r8, #2
   12054:	bne	12060 <__assert_fail@plt+0x1498>
   12058:	cmp	r6, #15
   1205c:	beq	11ed0 <__assert_fail@plt+0x1308>
   12060:	cmp	r5, #15
   12064:	bne	11eb0 <__assert_fail@plt+0x12e8>
   12068:	b	1200c <__assert_fail@plt+0x1444>
   1206c:	sub	r3, r6, #8
   12070:	cmp	r3, #1
   12074:	orrls	r1, r1, #1
   12078:	cmp	r1, #0
   1207c:	bne	11ed0 <__assert_fail@plt+0x1308>
   12080:	cmp	r6, #16
   12084:	orreq	r0, r0, #1
   12088:	cmp	r0, #0
   1208c:	bne	11ed0 <__assert_fail@plt+0x1308>
   12090:	b	12200 <__assert_fail@plt+0x1638>
   12094:	mov	r4, r5
   12098:	ldr	r5, [r4, #4]
   1209c:	cmp	r5, #0
   120a0:	beq	120b8 <__assert_fail@plt+0x14f0>
   120a4:	mov	r0, r5
   120a8:	bl	11d6c <__assert_fail@plt+0x11a4>
   120ac:	bic	r0, r0, #2
   120b0:	cmp	r0, #4
   120b4:	beq	12094 <__assert_fail@plt+0x14cc>
   120b8:	cmp	r4, #0
   120bc:	beq	12208 <__assert_fail@plt+0x1640>
   120c0:	ldr	r0, [r7, #12]
   120c4:	bl	10a54 <utf8proc_get_property@plt>
   120c8:	ldrsh	r3, [r0]
   120cc:	cmp	r3, #1
   120d0:	blt	120e4 <__assert_fail@plt+0x151c>
   120d4:	cmp	r3, #12
   120d8:	ble	11de8 <__assert_fail@plt+0x1220>
   120dc:	cmp	r3, #29
   120e0:	beq	11de8 <__assert_fail@plt+0x1220>
   120e4:	ldr	r7, [r4, #4]
   120e8:	str	r7, [sp, #12]
   120ec:	cmp	r7, #0
   120f0:	beq	12208 <__assert_fail@plt+0x1640>
   120f4:	mov	r8, sl
   120f8:	add	r4, sp, #8
   120fc:	b	11ee0 <__assert_fail@plt+0x1318>
   12100:	add	r0, r6, #1
   12104:	bl	10ae4 <malloc@plt>
   12108:	mov	r8, r0
   1210c:	mov	r6, #0
   12110:	add	r1, r8, r6
   12114:	ldr	r0, [r7, #12]
   12118:	bl	10a6c <utf8proc_encode_char@plt>
   1211c:	add	r6, r6, r0
   12120:	ldr	r7, [r7, #4]
   12124:	cmp	r7, r5
   12128:	beq	12158 <__assert_fail@plt+0x1590>
   1212c:	cmp	r7, #0
   12130:	bne	12110 <__assert_fail@plt+0x1548>
   12134:	ldr	r3, [pc, #228]	; 12220 <__assert_fail@plt+0x1658>
   12138:	ldr	r2, [pc, #228]	; 12224 <__assert_fail@plt+0x165c>
   1213c:	ldr	r1, [pc, #208]	; 12214 <__assert_fail@plt+0x164c>
   12140:	ldr	r0, [pc, #208]	; 12218 <__assert_fail@plt+0x1650>
   12144:	bl	10bc8 <__assert_fail@plt>
   12148:	mov	r0, #1
   1214c:	bl	10ae4 <malloc@plt>
   12150:	mov	r8, r0
   12154:	mov	r6, #0
   12158:	strb	fp, [r8, r6]
   1215c:	mov	r1, #12
   12160:	mov	r0, #1
   12164:	bl	124e8 <error@@Base+0x3c>
   12168:	mov	r5, r0
   1216c:	mov	r0, r8
   12170:	bl	10b68 <utf8proc_NFC@plt>
   12174:	str	r0, [r5, #8]
   12178:	mov	r1, r5
   1217c:	ldr	r0, [sp, #4]
   12180:	bl	10f9c <__assert_fail@plt+0x3d4>
   12184:	mov	r0, r8
   12188:	bl	10a48 <free@plt>
   1218c:	b	120e4 <__assert_fail@plt+0x151c>
   12190:	sub	r1, r6, #8
   12194:	cmp	r1, #1
   12198:	bls	11ed0 <__assert_fail@plt+0x1308>
   1219c:	cmp	r6, #10
   121a0:	movne	ip, #0
   121a4:	moveq	ip, #1
   121a8:	b	11f9c <__assert_fail@plt+0x13d4>
   121ac:	cmp	r6, #15
   121b0:	beq	11ed0 <__assert_fail@plt+0x1308>
   121b4:	cmp	r5, #7
   121b8:	movne	r2, #0
   121bc:	moveq	r2, #1
   121c0:	cmp	r6, #7
   121c4:	movne	r0, #0
   121c8:	moveq	r0, #1
   121cc:	orrs	r3, lr, r3
   121d0:	bne	121e4 <__assert_fail@plt+0x161c>
   121d4:	cmp	r5, #16
   121d8:	orreq	r2, r2, #1
   121dc:	cmp	r2, #0
   121e0:	beq	121ec <__assert_fail@plt+0x1624>
   121e4:	cmp	r6, #16
   121e8:	beq	11ed0 <__assert_fail@plt+0x1308>
   121ec:	cmp	r5, #16
   121f0:	beq	1206c <__assert_fail@plt+0x14a4>
   121f4:	cmp	r5, #5
   121f8:	cmpeq	r6, #5
   121fc:	beq	11ed0 <__assert_fail@plt+0x1308>
   12200:	cmp	r4, #0
   12204:	bne	12098 <__assert_fail@plt+0x14d0>
   12208:	add	sp, sp, #28
   1220c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12210:	ldrdeq	r6, [r1], -r8
   12214:	andeq	r6, r1, r0, lsl #8
   12218:	andeq	r6, r1, r8, lsl #8
   1221c:	andeq	r6, r1, r8, lsl r4
   12220:	andeq	r6, r1, ip, ror #7
   12224:	andeq	r0, r0, sp, lsl #2
   12228:	push	{r4, lr}
   1222c:	mov	r4, r0
   12230:	ldr	r0, [r0, #8]
   12234:	bl	10a48 <free@plt>
   12238:	mov	r0, r4
   1223c:	bl	10a48 <free@plt>
   12240:	pop	{r4, pc}
   12244:	push	{r4, r5, lr}
   12248:	sub	sp, sp, #116	; 0x74
   1224c:	mov	r5, r0
   12250:	ldr	r3, [pc, #44]	; 12284 <__assert_fail@plt+0x16bc>
   12254:	ldr	r4, [r3]
   12258:	bl	10b14 <getpid@plt>
   1225c:	str	r5, [sp]
   12260:	mov	r3, r0
   12264:	mov	r2, r4
   12268:	ldr	r1, [pc, #24]	; 12288 <__assert_fail@plt+0x16c0>
   1226c:	add	r0, sp, #12
   12270:	bl	10b80 <sprintf@plt>
   12274:	add	r0, sp, #12
   12278:	bl	10a78 <strdup@plt>
   1227c:	add	sp, sp, #116	; 0x74
   12280:	pop	{r4, r5, pc}
   12284:	andeq	r9, r2, r8, ror #1
   12288:	andeq	r6, r1, ip, lsr #8
   1228c:	push	{r7, lr}
   12290:	mov	r7, r0
   12294:	ldr	r3, [pc, #88]	; 122f4 <__assert_fail@plt+0x172c>
   12298:	ldr	r3, [r3]
   1229c:	cmp	r3, #0
   122a0:	beq	122a8 <__assert_fail@plt+0x16e0>
   122a4:	blx	r3
   122a8:	ldr	r3, [pc, #72]	; 122f8 <__assert_fail@plt+0x1730>
   122ac:	ldrsh	r3, [r3]
   122b0:	cmp	r3, #0
   122b4:	ble	122ec <__assert_fail@plt+0x1724>
   122b8:	mov	r4, #1
   122bc:	ldr	r6, [pc, #52]	; 122f8 <__assert_fail@plt+0x1730>
   122c0:	mov	r0, r4
   122c4:	bl	12244 <__assert_fail@plt+0x167c>
   122c8:	mov	r5, r0
   122cc:	bl	10a90 <unlink@plt>
   122d0:	mov	r0, r5
   122d4:	bl	10a48 <free@plt>
   122d8:	add	r4, r4, #1
   122dc:	sxth	r4, r4
   122e0:	ldrsh	r3, [r6]
   122e4:	cmp	r3, r4
   122e8:	bge	122c0 <__assert_fail@plt+0x16f8>
   122ec:	mov	r0, r7
   122f0:	bl	10b20 <exit@plt>
   122f4:	andeq	r9, r2, ip, ror #1
   122f8:	andeq	r7, r2, r8, asr #2
   122fc:	push	{r4, lr}
   12300:	ldrb	r3, [r0]
   12304:	cmp	r3, #0
   12308:	beq	12354 <__assert_fail@plt+0x178c>
   1230c:	ldrb	r2, [r1]
   12310:	cmp	r2, r3
   12314:	bne	12370 <__assert_fail@plt+0x17a8>
   12318:	mov	ip, r1
   1231c:	mov	r2, #0
   12320:	add	r2, r2, #1
   12324:	mov	r4, r2
   12328:	ldrb	r3, [r0, #1]!
   1232c:	cmp	r3, #0
   12330:	beq	12358 <__assert_fail@plt+0x1790>
   12334:	ldrb	lr, [ip, #1]!
   12338:	cmp	lr, r3
   1233c:	beq	12320 <__assert_fail@plt+0x1758>
   12340:	ldrb	r2, [r1, r4]
   12344:	cmp	r2, r3
   12348:	mvnhi	r0, #0
   1234c:	movls	r0, #1
   12350:	pop	{r4, pc}
   12354:	mov	r4, #0
   12358:	ldrb	r3, [r1, r4]
   1235c:	cmp	r3, #0
   12360:	movne	r3, #0
   12364:	bne	12340 <__assert_fail@plt+0x1778>
   12368:	mov	r0, #0
   1236c:	pop	{r4, pc}
   12370:	mov	r4, #0
   12374:	b	12340 <__assert_fail@plt+0x1778>
   12378:	ldr	r3, [pc, #36]	; 123a4 <__assert_fail@plt+0x17dc>
   1237c:	ldr	r3, [r3]
   12380:	cmp	r3, r0
   12384:	bxeq	lr
   12388:	ldr	r3, [pc, #24]	; 123a8 <__assert_fail@plt+0x17e0>
   1238c:	ldr	r3, [r3]
   12390:	cmp	r0, r3
   12394:	bxeq	lr
   12398:	push	{r4, lr}
   1239c:	bl	10b5c <fclose@plt>
   123a0:	pop	{r4, pc}
   123a4:	ldrdeq	r7, [r2], -r0
   123a8:	ldrdeq	r7, [r2], -r4
   123ac:	push	{lr}		; (str lr, [sp, #-4]!)
   123b0:	sub	sp, sp, #92	; 0x5c
   123b4:	mov	r2, sp
   123b8:	mov	r1, r0
   123bc:	mov	r0, #3
   123c0:	bl	10aa8 <__xstat@plt>
   123c4:	clz	r0, r0
   123c8:	lsr	r0, r0, #5
   123cc:	add	sp, sp, #92	; 0x5c
   123d0:	pop	{pc}		; (ldr pc, [sp], #4)
   123d4:	push	{r4, lr}
   123d8:	ldr	r3, [pc, #32]	; 12400 <__assert_fail@plt+0x1838>
   123dc:	ldrh	r0, [r3]
   123e0:	add	r0, r0, #1
   123e4:	sxth	r0, r0
   123e8:	strh	r0, [r3]
   123ec:	bl	12244 <__assert_fail@plt+0x167c>
   123f0:	mov	r4, r0
   123f4:	bl	10a90 <unlink@plt>
   123f8:	mov	r0, r4
   123fc:	pop	{r4, pc}
   12400:	andeq	r7, r2, r8, asr #2
   12404:	push	{r4, lr}
   12408:	mov	r4, r0
   1240c:	bl	10b38 <strlen@plt>
   12410:	sub	r0, r0, #1
   12414:	sxth	r0, r0
   12418:	cmp	r0, #0
   1241c:	blt	12448 <__assert_fail@plt+0x1880>
   12420:	ldrb	r3, [r4, r0]
   12424:	cmp	r3, #47	; 0x2f
   12428:	beq	12448 <__assert_fail@plt+0x1880>
   1242c:	sub	r0, r0, #1
   12430:	sxth	r0, r0
   12434:	cmp	r0, #0
   12438:	blt	12448 <__assert_fail@plt+0x1880>
   1243c:	ldrb	r3, [r4, r0]
   12440:	cmp	r3, #47	; 0x2f
   12444:	bne	1242c <__assert_fail@plt+0x1864>
   12448:	add	r0, r0, #1
   1244c:	add	r0, r4, r0
   12450:	pop	{r4, pc}
   12454:	push	{r4, lr}
   12458:	mov	r0, #0
   1245c:	bl	1228c <__assert_fail@plt+0x16c4>
   12460:	push	{r4, lr}
   12464:	ldr	r2, [pc, #48]	; 1249c <__assert_fail@plt+0x18d4>
   12468:	ldr	r2, [r2]
   1246c:	cmp	r2, #0
   12470:	beq	1247c <__assert_fail@plt+0x18b4>
   12474:	blx	r2
   12478:	bl	12454 <__assert_fail@plt+0x188c>
   1247c:	mov	r3, r0
   12480:	ldr	r2, [pc, #24]	; 124a0 <__assert_fail@plt+0x18d8>
   12484:	ldr	r2, [r2]
   12488:	ldr	r1, [pc, #20]	; 124a4 <__assert_fail@plt+0x18dc>
   1248c:	ldr	r0, [pc, #20]	; 124a8 <__assert_fail@plt+0x18e0>
   12490:	ldr	r0, [r0]
   12494:	bl	10b44 <fprintf@plt>
   12498:	b	12478 <__assert_fail@plt+0x18b0>
   1249c:	andeq	r9, r2, r4, ror #1
   124a0:	andeq	r9, r2, r8, ror #1
   124a4:	andeq	r6, r1, ip, lsr r4
   124a8:	andeq	r7, r2, r8, asr #1

000124ac <error@@Base>:
   124ac:	push	{r4, lr}
   124b0:	mov	r3, r0
   124b4:	ldr	r2, [pc, #28]	; 124d8 <error@@Base+0x2c>
   124b8:	ldr	r2, [r2]
   124bc:	ldr	r1, [pc, #24]	; 124dc <error@@Base+0x30>
   124c0:	ldr	r0, [pc, #24]	; 124e0 <error@@Base+0x34>
   124c4:	ldr	r0, [r0]
   124c8:	bl	10b44 <fprintf@plt>
   124cc:	ldr	r3, [pc, #16]	; 124e4 <error@@Base+0x38>
   124d0:	ldr	r0, [r3]
   124d4:	bl	1228c <__assert_fail@plt+0x16c4>
   124d8:	andeq	r9, r2, r8, ror #1
   124dc:	andeq	r6, r1, ip, asr #8
   124e0:	andeq	r7, r2, r8, asr #1
   124e4:	strheq	r7, [r2], -ip
   124e8:	push	{r4, lr}
   124ec:	bl	10a0c <calloc@plt>
   124f0:	cmp	r0, #0
   124f4:	popne	{r4, pc}
   124f8:	ldr	r0, [pc]	; 12500 <error@@Base+0x54>
   124fc:	bl	124ac <error@@Base>
   12500:	andeq	r6, r1, r4, asr r4
   12504:	ldr	r3, [pc, #36]	; 12530 <error@@Base+0x84>
   12508:	ldrb	r3, [r3, #2]
   1250c:	cmp	r3, #0
   12510:	beq	12518 <error@@Base+0x6c>
   12514:	bx	lr
   12518:	push	{r4, lr}
   1251c:	mov	r2, #1
   12520:	ldr	r3, [pc, #8]	; 12530 <error@@Base+0x84>
   12524:	strb	r2, [r3, #2]
   12528:	ldr	r0, [pc, #4]	; 12534 <error@@Base+0x88>
   1252c:	bl	124ac <error@@Base>
   12530:	andeq	r7, r2, r8, asr #2
   12534:	andeq	r6, r1, r0, ror r4
   12538:	push	{lr}		; (str lr, [sp, #-4]!)
   1253c:	sub	sp, sp, #12
   12540:	ldr	r3, [pc, #40]	; 12570 <error@@Base+0xc4>
   12544:	ldr	r2, [r3]
   12548:	ldr	r3, [pc, #36]	; 12574 <error@@Base+0xc8>
   1254c:	ldr	ip, [r3]
   12550:	str	r1, [sp]
   12554:	mov	r3, r0
   12558:	ldr	r1, [pc, #24]	; 12578 <error@@Base+0xcc>
   1255c:	mov	r0, ip
   12560:	bl	10b44 <fprintf@plt>
   12564:	ldr	r3, [pc, #16]	; 1257c <error@@Base+0xd0>
   12568:	ldr	r0, [r3]
   1256c:	bl	1228c <__assert_fail@plt+0x16c4>
   12570:	andeq	r9, r2, r8, ror #1
   12574:	andeq	r7, r2, r8, asr #1
   12578:	andeq	r6, r1, r0, lsl #9
   1257c:	strheq	r7, [r2], -ip
   12580:	push	{r4, r5, r6, lr}
   12584:	subs	r5, r0, #0
   12588:	beq	125b8 <error@@Base+0x10c>
   1258c:	mov	r4, r1
   12590:	mov	r0, r5
   12594:	bl	10a3c <fopen@plt>
   12598:	cmp	r0, #0
   1259c:	popne	{r4, r5, r6, pc}
   125a0:	ldrb	r3, [r4]
   125a4:	cmp	r3, #119	; 0x77
   125a8:	beq	125d0 <error@@Base+0x124>
   125ac:	mov	r1, r5
   125b0:	ldr	r0, [pc, #36]	; 125dc <error@@Base+0x130>
   125b4:	bl	12538 <error@@Base+0x8c>
   125b8:	ldrb	r3, [r1]
   125bc:	cmp	r3, #114	; 0x72
   125c0:	ldreq	r3, [pc, #24]	; 125e0 <error@@Base+0x134>
   125c4:	ldrne	r3, [pc, #24]	; 125e4 <error@@Base+0x138>
   125c8:	ldr	r0, [r3]
   125cc:	pop	{r4, r5, r6, pc}
   125d0:	mov	r1, r5
   125d4:	ldr	r0, [pc, #12]	; 125e8 <error@@Base+0x13c>
   125d8:	bl	12538 <error@@Base+0x8c>
   125dc:	andeq	r6, r1, r8, lsr #9
   125e0:	ldrdeq	r7, [r2], -r0
   125e4:	ldrdeq	r7, [r2], -r4
   125e8:	muleq	r1, r0, r4
   125ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125f0:	sub	sp, sp, #20
   125f4:	mov	r5, r0
   125f8:	str	r0, [sp, #8]
   125fc:	mov	sl, r1
   12600:	str	r2, [sp, #12]
   12604:	mov	r6, r3
   12608:	ldr	r0, [r1]
   1260c:	bl	12404 <__assert_fail@plt+0x183c>
   12610:	ldr	r3, [pc, #468]	; 127ec <error@@Base+0x340>
   12614:	str	r0, [r3]
   12618:	ldr	r4, [pc, #464]	; 127f0 <error@@Base+0x344>
   1261c:	mov	r1, r4
   12620:	mov	r0, #2
   12624:	bl	10afc <__sysv_signal@plt>
   12628:	mov	r1, r4
   1262c:	mov	r0, #15
   12630:	bl	10afc <__sysv_signal@plt>
   12634:	ldr	r8, [r5]
   12638:	cmp	r8, #1
   1263c:	beq	1265c <error@@Base+0x1b0>
   12640:	movle	r7, #0
   12644:	ble	12670 <error@@Base+0x1c4>
   12648:	mov	r7, #0
   1264c:	mov	r3, #1
   12650:	str	r3, [sp, #4]
   12654:	mov	r4, r3
   12658:	b	12708 <error@@Base+0x25c>
   1265c:	ldr	r3, [pc, #400]	; 127f4 <error@@Base+0x348>
   12660:	ldrb	r3, [r3, #4]
   12664:	cmp	r3, #0
   12668:	moveq	r7, #0
   1266c:	bne	12680 <error@@Base+0x1d4>
   12670:	ldr	r3, [sp, #8]
   12674:	str	r7, [r3]
   12678:	add	sp, sp, #20
   1267c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12680:	ldr	r0, [sp, #12]
   12684:	bl	12460 <__assert_fail@plt+0x1898>
   12688:	ldr	r0, [sp, #12]
   1268c:	bl	12460 <__assert_fail@plt+0x1898>
   12690:	mov	r1, r6
   12694:	b	1279c <error@@Base+0x2f0>
   12698:	ldr	r3, [r1, #8]
   1269c:	cmp	r3, #0
   126a0:	beq	126c8 <error@@Base+0x21c>
   126a4:	ldrb	r2, [r5, #2]
   126a8:	cmp	r2, #0
   126ac:	bne	126c8 <error@@Base+0x21c>
   126b0:	ldrb	r2, [r3]
   126b4:	cmp	r2, #0
   126b8:	bne	126d4 <error@@Base+0x228>
   126bc:	mov	r2, #1
   126c0:	strb	r2, [r3]
   126c4:	b	126ec <error@@Base+0x240>
   126c8:	mov	r1, r5
   126cc:	ldr	r0, [pc, #292]	; 127f8 <error@@Base+0x34c>
   126d0:	bl	12538 <error@@Base+0x8c>
   126d4:	mov	r1, r5
   126d8:	ldr	r0, [pc, #284]	; 127fc <error@@Base+0x350>
   126dc:	bl	12538 <error@@Base+0x8c>
   126e0:	add	r3, r7, #1
   126e4:	str	r5, [sl, r7, lsl #2]
   126e8:	sxth	r7, r3
   126ec:	add	r4, r4, #1
   126f0:	sxth	r4, r4
   126f4:	str	r4, [sp, #4]
   126f8:	ldr	r3, [sp, #8]
   126fc:	ldr	r8, [r3]
   12700:	cmp	r4, r8
   12704:	bge	12670 <error@@Base+0x1c4>
   12708:	lsl	fp, r4, #2
   1270c:	ldr	r5, [sl, r4, lsl #2]
   12710:	ldrb	r3, [r5]
   12714:	cmp	r3, #45	; 0x2d
   12718:	bne	126e0 <error@@Base+0x234>
   1271c:	ldrb	r9, [r5, #1]
   12720:	cmp	r9, #0
   12724:	beq	126e0 <error@@Base+0x234>
   12728:	mov	r0, r5
   1272c:	bl	10b38 <strlen@plt>
   12730:	mov	r2, r0
   12734:	mov	r1, r5
   12738:	ldr	r0, [pc, #192]	; 12800 <error@@Base+0x354>
   1273c:	bl	10ba4 <strncmp@plt>
   12740:	cmp	r0, #0
   12744:	beq	12688 <error@@Base+0x1dc>
   12748:	ldr	r3, [sp, #4]
   1274c:	add	r3, r3, #1
   12750:	cmp	r3, r8
   12754:	addlt	r3, sl, fp
   12758:	ldrlt	r0, [r3, #4]
   1275c:	movge	r0, #0
   12760:	cmp	r6, #0
   12764:	beq	126c8 <error@@Base+0x21c>
   12768:	ldrb	r2, [r6]
   1276c:	cmp	r9, r2
   12770:	cmpne	r2, #0
   12774:	beq	12690 <error@@Base+0x1e4>
   12778:	mov	r3, #0
   1277c:	add	r3, r3, #1
   12780:	sxth	r3, r3
   12784:	add	r2, r3, r3, lsl #1
   12788:	add	r1, r6, r2, lsl #2
   1278c:	ldrb	r2, [r6, r2, lsl #2]
   12790:	cmp	r9, r2
   12794:	cmpne	r2, #0
   12798:	bne	1277c <error@@Base+0x2d0>
   1279c:	cmp	r2, #0
   127a0:	beq	126c8 <error@@Base+0x21c>
   127a4:	ldr	r3, [r1, #4]
   127a8:	cmp	r3, #0
   127ac:	beq	12698 <error@@Base+0x1ec>
   127b0:	ldrb	r2, [r5, #2]
   127b4:	cmp	r2, #0
   127b8:	cmpeq	r0, #0
   127bc:	beq	12698 <error@@Base+0x1ec>
   127c0:	ldr	r1, [r3]
   127c4:	cmp	r1, #0
   127c8:	bne	126d4 <error@@Base+0x228>
   127cc:	cmp	r2, #0
   127d0:	addne	r0, r5, #2
   127d4:	str	r0, [r3]
   127d8:	ldrb	r3, [r5, #2]
   127dc:	cmp	r3, #0
   127e0:	addeq	r4, r4, #1
   127e4:	sxtheq	r4, r4
   127e8:	b	126ec <error@@Base+0x240>
   127ec:	andeq	r9, r2, r8, ror #1
   127f0:	andeq	r2, r1, r4, lsl #10
   127f4:	strheq	r7, [r2], -ip
   127f8:	andeq	r6, r1, r4, asr #9
   127fc:	ldrdeq	r6, [r1], -r4
   12800:			; <UNDEFINED> instruction: 0x000164bc
   12804:	push	{lr}		; (str lr, [sp, #-4]!)
   12808:	sub	sp, sp, #12
   1280c:	ldr	r3, [pc, #36]	; 12838 <error@@Base+0x38c>
   12810:	ldr	r2, [r3]
   12814:	ldr	r3, [pc, #32]	; 1283c <error@@Base+0x390>
   12818:	ldr	ip, [r3]
   1281c:	str	r1, [sp]
   12820:	mov	r3, r0
   12824:	ldr	r1, [pc, #20]	; 12840 <error@@Base+0x394>
   12828:	mov	r0, ip
   1282c:	bl	10b44 <fprintf@plt>
   12830:	add	sp, sp, #12
   12834:	pop	{pc}		; (ldr pc, [sp], #4)
   12838:	andeq	r9, r2, r8, ror #1
   1283c:	andeq	r7, r2, r8, asr #1
   12840:	andeq	r6, r1, r0, lsl #9
   12844:	push	{r4, r5, r6, lr}
   12848:	mov	r4, r0
   1284c:	mov	r5, r2
   12850:	uxtb	r6, r1
   12854:	mov	r1, #16
   12858:	mov	r0, #1
   1285c:	bl	124e8 <error@@Base+0x3c>
   12860:	mov	r1, r0
   12864:	strb	r6, [r0, #8]
   12868:	str	r5, [r0, #12]
   1286c:	mov	r0, r4
   12870:	bl	10f9c <__assert_fail@plt+0x3d4>
   12874:	pop	{r4, r5, r6, pc}
   12878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1287c:	sub	sp, sp, #116	; 0x74
   12880:	str	r0, [sp]
   12884:	mov	sl, r2
   12888:	ldrb	r3, [r2]
   1288c:	mov	r0, r1
   12890:	adds	r2, r3, #0
   12894:	movne	r2, #1
   12898:	cmp	r1, #0
   1289c:	movne	r2, #0
   128a0:	cmp	r2, #0
   128a4:	bne	12908 <error@@Base+0x45c>
   128a8:	ldr	r3, [sp]
   128ac:	ldr	r3, [r3, #4]
   128b0:	str	r3, [sp, #4]
   128b4:	ldr	r1, [pc, #820]	; 12bf0 <error@@Base+0x744>
   128b8:	bl	12580 <error@@Base+0xd4>
   128bc:	mov	r6, r0
   128c0:	ldrb	r3, [sl]
   128c4:	cmp	r3, #0
   128c8:	bne	12914 <error@@Base+0x468>
   128cc:	ldrb	r8, [sl, #1]
   128d0:	ldr	fp, [sl, #4]
   128d4:	cmp	fp, #0
   128d8:	moveq	fp, #94	; 0x5e
   128dc:	mov	r0, r6
   128e0:	bl	10bbc <getc@plt>
   128e4:	cmn	r0, #1
   128e8:	beq	12a54 <error@@Base+0x5a8>
   128ec:	ldr	r3, [pc, #768]	; 12bf4 <error@@Base+0x748>
   128f0:	ldrsb	r4, [r3, r0]
   128f4:	cmp	r4, #0
   128f8:	ble	129ac <error@@Base+0x500>
   128fc:	mov	r7, #0
   12900:	mov	r9, r3
   12904:	b	129f4 <error@@Base+0x548>
   12908:	ldr	r1, [pc, #744]	; 12bf8 <error@@Base+0x74c>
   1290c:	ldr	r0, [pc, #744]	; 12bfc <error@@Base+0x750>
   12910:	bl	12538 <error@@Base+0x8c>
   12914:	mov	r2, r0
   12918:	mov	r1, #99	; 0x63
   1291c:	add	r0, sp, #12
   12920:	bl	10a60 <fgets@plt>
   12924:	cmp	r0, #0
   12928:	beq	12944 <error@@Base+0x498>
   1292c:	mov	r2, #51	; 0x33
   12930:	ldr	r1, [pc, #712]	; 12c00 <error@@Base+0x754>
   12934:	add	r0, sp, #12
   12938:	bl	10ba4 <strncmp@plt>
   1293c:	cmp	r0, #0
   12940:	beq	12958 <error@@Base+0x4ac>
   12944:	mov	r0, r6
   12948:	bl	10a84 <rewind@plt>
   1294c:	mov	r3, #0
   12950:	strb	r3, [sl, #11]
   12954:	b	128cc <error@@Base+0x420>
   12958:	mov	r4, #0
   1295c:	mov	r5, #99	; 0x63
   12960:	ldr	r7, [pc, #668]	; 12c04 <error@@Base+0x758>
   12964:	mov	r2, r6
   12968:	mov	r1, r5
   1296c:	add	r0, sp, #12
   12970:	bl	10a60 <fgets@plt>
   12974:	cmp	r0, #0
   12978:	beq	129a4 <error@@Base+0x4f8>
   1297c:	mov	r1, r7
   12980:	add	r0, sp, #12
   12984:	bl	10a18 <strcmp@plt>
   12988:	cmp	r0, #0
   1298c:	addeq	r4, r4, #1
   12990:	sxtheq	r4, r4
   12994:	cmp	r4, #1
   12998:	ble	12964 <error@@Base+0x4b8>
   1299c:	mov	r3, #1
   129a0:	b	12950 <error@@Base+0x4a4>
   129a4:	mov	r3, #1
   129a8:	b	12950 <error@@Base+0x4a4>
   129ac:	ldr	r0, [pc, #596]	; 12c08 <error@@Base+0x75c>
   129b0:	bl	124ac <error@@Base>
   129b4:	ldr	r0, [pc, #592]	; 12c0c <error@@Base+0x760>
   129b8:	bl	124ac <error@@Base>
   129bc:	bl	10b8c <utf8proc_errmsg@plt>
   129c0:	bl	124ac <error@@Base>
   129c4:	ldr	r2, [sp, #12]
   129c8:	mov	r1, r7
   129cc:	ldr	r0, [sp]
   129d0:	bl	12844 <error@@Base+0x398>
   129d4:	mov	r7, #0
   129d8:	mov	r0, r6
   129dc:	bl	10bbc <getc@plt>
   129e0:	cmn	r0, #1
   129e4:	beq	12a54 <error@@Base+0x5a8>
   129e8:	ldrsb	r4, [r9, r0]
   129ec:	cmp	r4, #0
   129f0:	ble	129ac <error@@Base+0x500>
   129f4:	strb	r0, [sp, #8]
   129f8:	cmp	r4, #1
   129fc:	ble	12a20 <error@@Base+0x574>
   12a00:	sub	r5, r4, #1
   12a04:	mov	r3, r6
   12a08:	mov	r2, r5
   12a0c:	mov	r1, #1
   12a10:	add	r0, sp, #9
   12a14:	bl	10ac0 <fread@plt>
   12a18:	cmp	r5, r0
   12a1c:	bne	129b4 <error@@Base+0x508>
   12a20:	add	r2, sp, #12
   12a24:	mov	r1, #4
   12a28:	add	r0, sp, #8
   12a2c:	bl	10acc <utf8proc_iterate@plt>
   12a30:	cmp	r0, r4
   12a34:	bne	129bc <error@@Base+0x510>
   12a38:	cmp	r8, #0
   12a3c:	beq	129c4 <error@@Base+0x518>
   12a40:	ldr	r3, [sp, #12]
   12a44:	cmp	fp, r3
   12a48:	moveq	r7, #1
   12a4c:	bne	129c4 <error@@Base+0x518>
   12a50:	b	129d8 <error@@Base+0x52c>
   12a54:	mov	r0, r6
   12a58:	bl	12378 <__assert_fail@plt+0x17b0>
   12a5c:	ldrb	r3, [sl, #9]
   12a60:	cmp	r3, #0
   12a64:	beq	12ba8 <error@@Base+0x6fc>
   12a68:	ldr	r3, [sp, #4]
   12a6c:	cmp	r3, #0
   12a70:	ldrne	r6, [r3, #4]
   12a74:	ldreq	r3, [sp]
   12a78:	ldreq	r6, [r3]
   12a7c:	cmp	r6, #0
   12a80:	beq	12ba8 <error@@Base+0x6fc>
   12a84:	mov	r5, r6
   12a88:	mov	r7, #32
   12a8c:	mov	r9, #1
   12a90:	mov	r8, #0
   12a94:	b	12ac8 <error@@Base+0x61c>
   12a98:	cmp	r4, #160	; 0xa0
   12a9c:	beq	12ab8 <error@@Base+0x60c>
   12aa0:	ldrsh	r3, [r0]
   12aa4:	sub	r3, r3, #23
   12aa8:	cmp	r3, #2
   12aac:	bhi	12abc <error@@Base+0x610>
   12ab0:	mov	r3, r9
   12ab4:	b	12af8 <error@@Base+0x64c>
   12ab8:	str	r7, [r5, #12]
   12abc:	ldr	r5, [r5, #4]
   12ac0:	cmp	r5, #0
   12ac4:	beq	12b3c <error@@Base+0x690>
   12ac8:	ldr	r4, [r5, #12]
   12acc:	mov	r0, r4
   12ad0:	bl	10a54 <utf8proc_get_property@plt>
   12ad4:	cmp	r4, #13
   12ad8:	bhi	12a98 <error@@Base+0x5ec>
   12adc:	cmp	r4, #11
   12ae0:	bcs	12ab8 <error@@Base+0x60c>
   12ae4:	cmp	r4, #9
   12ae8:	beq	12ab8 <error@@Base+0x60c>
   12aec:	cmp	r4, #10
   12af0:	moveq	r3, r8
   12af4:	bne	12aa0 <error@@Base+0x5f4>
   12af8:	cmp	r3, #0
   12afc:	beq	12abc <error@@Base+0x610>
   12b00:	b	12ab8 <error@@Base+0x60c>
   12b04:	eor	r2, r5, #1
   12b08:	cmp	r4, #0
   12b0c:	orreq	r2, r2, #1
   12b10:	cmp	r2, #0
   12b14:	bne	12b64 <error@@Base+0x6b8>
   12b18:	ldr	r2, [r4, #12]
   12b1c:	cmp	r2, #32
   12b20:	cmpne	r2, #10
   12b24:	beq	12b64 <error@@Base+0x6b8>
   12b28:	subs	r5, r3, #10
   12b2c:	movne	r5, #1
   12b30:	mov	r6, r4
   12b34:	cmp	r4, #0
   12b38:	beq	12ba8 <error@@Base+0x6fc>
   12b3c:	ldr	r4, [r6, #4]
   12b40:	ldr	r3, [r6, #12]
   12b44:	cmp	r3, #32
   12b48:	beq	12b04 <error@@Base+0x658>
   12b4c:	eor	r2, r5, #1
   12b50:	cmp	r3, #10
   12b54:	movne	r2, #0
   12b58:	andeq	r2, r2, #1
   12b5c:	cmp	r2, #0
   12b60:	beq	12b28 <error@@Base+0x67c>
   12b64:	cmp	r4, #0
   12b68:	moveq	r3, #0
   12b6c:	andne	r3, r5, #1
   12b70:	cmp	r3, #0
   12b74:	beq	12b90 <error@@Base+0x6e4>
   12b78:	ldr	r3, [r4, #12]
   12b7c:	cmp	r3, #32
   12b80:	ldrbeq	r3, [r4, #8]
   12b84:	ldrbeq	r2, [r6, #8]
   12b88:	orreq	r3, r3, r2
   12b8c:	strbeq	r3, [r4, #8]
   12b90:	mov	r1, r6
   12b94:	ldr	r0, [sp]
   12b98:	bl	10fe0 <__assert_fail@plt+0x418>
   12b9c:	mov	r0, r6
   12ba0:	bl	10a48 <free@plt>
   12ba4:	b	12b30 <error@@Base+0x684>
   12ba8:	ldrb	r3, [sl, #10]
   12bac:	cmp	r3, #0
   12bb0:	beq	12be8 <error@@Base+0x73c>
   12bb4:	ldr	r3, [sp, #4]
   12bb8:	cmp	r3, #0
   12bbc:	ldrne	r4, [r3, #4]
   12bc0:	ldreq	r3, [sp]
   12bc4:	ldreq	r4, [r3]
   12bc8:	cmp	r4, #0
   12bcc:	beq	12be8 <error@@Base+0x73c>
   12bd0:	ldr	r0, [r4, #12]
   12bd4:	bl	10a9c <utf8proc_tolower@plt>
   12bd8:	str	r0, [r4, #12]
   12bdc:	ldr	r4, [r4, #4]
   12be0:	cmp	r4, #0
   12be4:	bne	12bd0 <error@@Base+0x724>
   12be8:	add	sp, sp, #116	; 0x74
   12bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bf0:	ldrdeq	r2, [r1], -r4
   12bf4:	andeq	r6, r2, r8, lsl #28
   12bf8:	andeq	r6, r1, r8, ror #9
   12bfc:	strdeq	r6, [r1], -r4
   12c00:	andeq	r6, r1, r4, lsl #10
   12c04:	andeq	r6, r1, ip, lsr r5
   12c08:	andeq	r6, r1, r4, ror r5
   12c0c:	andeq	r6, r1, ip, lsl #11
   12c10:	push	{r4, lr}
   12c14:	bl	10a6c <utf8proc_encode_char@plt>
   12c18:	cmp	r0, #0
   12c1c:	ble	12c28 <error@@Base+0x77c>
   12c20:	sxtb	r0, r0
   12c24:	pop	{r4, pc}
   12c28:	ldr	r0, [pc]	; 12c30 <error@@Base+0x784>
   12c2c:	bl	124ac <error@@Base>
   12c30:	andeq	r6, r1, r4, lsr #11
   12c34:	push	{r4, r5, r6, r7, r8, lr}
   12c38:	mov	r4, r1
   12c3c:	mov	r6, r2
   12c40:	uxtb	r0, r0
   12c44:	uxtb	r7, r3
   12c48:	cmp	r0, #0
   12c4c:	moveq	r5, #0
   12c50:	bne	12ca4 <error@@Base+0x7f8>
   12c54:	cmp	r4, #10
   12c58:	beq	12cb8 <error@@Base+0x80c>
   12c5c:	mov	r0, r4
   12c60:	bl	10a54 <utf8proc_get_property@plt>
   12c64:	cmp	r4, #32
   12c68:	beq	12cd4 <error@@Base+0x828>
   12c6c:	ldrsh	r3, [r0]
   12c70:	cmp	r3, #1
   12c74:	blt	12c88 <error@@Base+0x7dc>
   12c78:	cmp	r3, #22
   12c7c:	ble	12cd4 <error@@Base+0x828>
   12c80:	cmp	r3, #29
   12c84:	beq	12cd4 <error@@Base+0x828>
   12c88:	cmp	r4, #255	; 0xff
   12c8c:	mov	r2, r4
   12c90:	ldrls	r1, [pc, #136]	; 12d20 <error@@Base+0x874>
   12c94:	ldrhi	r1, [pc, #136]	; 12d24 <error@@Base+0x878>
   12c98:	add	r0, r6, r5
   12c9c:	bl	10b80 <sprintf@plt>
   12ca0:	pop	{r4, r5, r6, r7, r8, pc}
   12ca4:	mov	r1, r2
   12ca8:	mov	r0, #94	; 0x5e
   12cac:	bl	12c10 <error@@Base+0x764>
   12cb0:	sxth	r5, r0
   12cb4:	b	12c54 <error@@Base+0x7a8>
   12cb8:	ldr	r3, [pc, #104]	; 12d28 <error@@Base+0x87c>
   12cbc:	ldr	r1, [pc, #104]	; 12d2c <error@@Base+0x880>
   12cc0:	cmp	r7, #0
   12cc4:	moveq	r1, r3
   12cc8:	add	r0, r6, r5
   12ccc:	bl	10b80 <sprintf@plt>
   12cd0:	pop	{r4, r5, r6, r7, r8, pc}
   12cd4:	mov	r0, r4
   12cd8:	bl	10b2c <utf8proc_category@plt>
   12cdc:	sub	r0, r0, #6
   12ce0:	cmp	r0, #2
   12ce4:	bls	12d08 <error@@Base+0x85c>
   12ce8:	add	r1, r6, r5
   12cec:	mov	r0, r4
   12cf0:	bl	12c10 <error@@Base+0x764>
   12cf4:	add	r0, r0, r5
   12cf8:	sxth	r0, r0
   12cfc:	mov	r3, #0
   12d00:	strb	r3, [r6, r0]
   12d04:	pop	{r4, r5, r6, r7, r8, pc}
   12d08:	add	r1, r6, r5
   12d0c:	ldr	r0, [pc, #28]	; 12d30 <error@@Base+0x884>
   12d10:	bl	12c10 <error@@Base+0x764>
   12d14:	add	r5, r0, r5
   12d18:	sxth	r5, r5
   12d1c:	b	12ce8 <error@@Base+0x83c>
   12d20:	andeq	r6, r1, r4, asr #11
   12d24:	andeq	r6, r1, ip, asr #11
   12d28:	andeq	r3, r1, ip, asr #32
   12d2c:			; <UNDEFINED> instruction: 0x000165bc
   12d30:	andeq	r2, r0, ip, asr #11
   12d34:	push	{r4, r5, r6, r7, lr}
   12d38:	sub	sp, sp, #20
   12d3c:	mov	r7, r0
   12d40:	mov	r0, r1
   12d44:	mov	r4, r2
   12d48:	ldr	r1, [pc, #160]	; 12df0 <error@@Base+0x944>
   12d4c:	bl	12580 <error@@Base+0xd4>
   12d50:	mov	r5, r0
   12d54:	cmp	r4, #0
   12d58:	beq	12da4 <error@@Base+0x8f8>
   12d5c:	mov	r3, r0
   12d60:	mov	r2, #55	; 0x37
   12d64:	mov	r1, #1
   12d68:	ldr	r0, [pc, #132]	; 12df4 <error@@Base+0x948>
   12d6c:	bl	10ab4 <fwrite@plt>
   12d70:	ldr	r6, [pc, #128]	; 12df8 <error@@Base+0x94c>
   12d74:	mov	r3, r5
   12d78:	mov	r2, #55	; 0x37
   12d7c:	mov	r1, #1
   12d80:	mov	r0, r6
   12d84:	bl	10ab4 <fwrite@plt>
   12d88:	mov	r0, r5
   12d8c:	blx	r4
   12d90:	mov	r3, r5
   12d94:	mov	r2, #55	; 0x37
   12d98:	mov	r1, #1
   12d9c:	mov	r0, r6
   12da0:	bl	10ab4 <fwrite@plt>
   12da4:	ldr	r4, [r7]
   12da8:	cmp	r4, #0
   12dac:	beq	12de0 <error@@Base+0x934>
   12db0:	mov	r6, #0
   12db4:	mov	r3, r6
   12db8:	add	r2, sp, #4
   12dbc:	ldr	r1, [r4, #12]
   12dc0:	ldrb	r0, [r4, #8]
   12dc4:	bl	12c34 <error@@Base+0x788>
   12dc8:	mov	r1, r5
   12dcc:	add	r0, sp, #4
   12dd0:	bl	10b98 <fputs@plt>
   12dd4:	ldr	r4, [r4, #4]
   12dd8:	cmp	r4, #0
   12ddc:	bne	12db4 <error@@Base+0x908>
   12de0:	mov	r0, r5
   12de4:	bl	12378 <__assert_fail@plt+0x17b0>
   12de8:	add	sp, sp, #20
   12dec:	pop	{r4, r5, r6, r7, pc}
   12df0:	andeq	r3, r1, ip, lsl r0
   12df4:	andeq	r6, r1, r4, lsl #10
   12df8:	andeq	r6, r1, ip, lsr r5
   12dfc:	push	{r4, r5, r6, r7, r8, lr}
   12e00:	sub	sp, sp, #8
   12e04:	mov	r3, #0
   12e08:	str	r3, [sp, #4]
   12e0c:	ldrb	r3, [r1]
   12e10:	cmp	r3, #0
   12e14:	beq	12e64 <error@@Base+0x9b8>
   12e18:	mov	r6, r0
   12e1c:	mov	r4, r1
   12e20:	mvn	r5, #0
   12e24:	mov	r7, #0
   12e28:	add	r2, sp, #4
   12e2c:	mov	r1, r5
   12e30:	mov	r0, r4
   12e34:	bl	10acc <utf8proc_iterate@plt>
   12e38:	subs	r8, r0, #0
   12e3c:	ble	12e6c <error@@Base+0x9c0>
   12e40:	ldr	r2, [sp, #4]
   12e44:	mov	r1, r7
   12e48:	mov	r0, r6
   12e4c:	bl	12844 <error@@Base+0x398>
   12e50:	ldrb	r3, [r4, r8]!
   12e54:	cmp	r3, #0
   12e58:	bne	12e28 <error@@Base+0x97c>
   12e5c:	mov	r0, #1
   12e60:	b	12e70 <error@@Base+0x9c4>
   12e64:	mov	r0, #1
   12e68:	b	12e70 <error@@Base+0x9c4>
   12e6c:	mov	r0, #0
   12e70:	add	sp, sp, #8
   12e74:	pop	{r4, r5, r6, r7, r8, pc}
   12e78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e7c:	mov	r7, r0
   12e80:	ldr	r6, [pc, #72]	; 12ed0 <error@@Base+0xa24>
   12e84:	ldr	r5, [pc, #72]	; 12ed4 <error@@Base+0xa28>
   12e88:	add	r6, pc, r6
   12e8c:	add	r5, pc, r5
   12e90:	sub	r6, r6, r5
   12e94:	mov	r8, r1
   12e98:	mov	r9, r2
   12e9c:	bl	109ec <calloc@plt-0x20>
   12ea0:	asrs	r6, r6, #2
   12ea4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ea8:	mov	r4, #0
   12eac:	add	r4, r4, #1
   12eb0:	ldr	r3, [r5], #4
   12eb4:	mov	r2, r9
   12eb8:	mov	r1, r8
   12ebc:	mov	r0, r7
   12ec0:	blx	r3
   12ec4:	cmp	r6, r4
   12ec8:	bne	12eac <error@@Base+0xa00>
   12ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ed0:	andeq	r3, r1, r0, ror pc
   12ed4:	andeq	r3, r1, r8, ror #30
   12ed8:	bx	lr

Disassembly of section .fini:

00012edc <.fini>:
   12edc:	push	{r3, lr}
   12ee0:	pop	{r3, pc}
