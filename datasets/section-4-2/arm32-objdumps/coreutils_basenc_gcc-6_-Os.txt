
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010cc4 <.init>:
   10cc4:	push	{r3, lr}
   10cc8:	bl	1187c <__assert_fail@plt+0x91c>
   10ccc:	pop	{r3, pc}

Disassembly of section .plt:

00010cd0 <calloc@plt-0x14>:
   10cd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd4:	ldr	lr, [pc, #4]	; 10ce0 <calloc@plt-0x4>
   10cd8:	add	lr, pc, lr
   10cdc:	ldr	pc, [lr, #8]!
   10ce0:	andeq	r7, r1, r0, lsr #6

00010ce4 <calloc@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #800]!	; 0x320

00010cf0 <fputs_unlocked@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #792]!	; 0x318

00010cfc <raise@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #784]!	; 0x310

00010d08 <strcmp@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #776]!	; 0x308

00010d14 <posix_fadvise64@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #768]!	; 0x300

00010d20 <fflush@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #760]!	; 0x2f8

00010d2c <memmove@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #752]!	; 0x2f0

00010d38 <free@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #744]!	; 0x2e8

00010d44 <_exit@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d50 <memcpy@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #728]!	; 0x2d8

00010d5c <mbsinit@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #720]!	; 0x2d0

00010d68 <fwrite_unlocked@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #712]!	; 0x2c8

00010d74 <memcmp@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d80 <fputc_unlocked@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #696]!	; 0x2b8

00010d8c <dcgettext@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #688]!	; 0x2b0

00010d98 <realloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #680]!	; 0x2a8

00010da4 <textdomain@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #672]!	; 0x2a0

00010db0 <iswprint@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #664]!	; 0x298

00010dbc <lseek64@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #656]!	; 0x290

00010dc8 <__ctype_get_mb_cur_max@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #648]!	; 0x288

00010dd4 <__fpending@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #640]!	; 0x280

00010de0 <ferror_unlocked@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #632]!	; 0x278

00010dec <mbrtowc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #624]!	; 0x270

00010df8 <error@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #616]!	; 0x268

00010e04 <malloc@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #608]!	; 0x260

00010e10 <__libc_start_main@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #600]!	; 0x258

00010e1c <__freading@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #592]!	; 0x250

00010e28 <__gmon_start__@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #584]!	; 0x248

00010e34 <getopt_long@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #576]!	; 0x240

00010e40 <__ctype_b_loc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #568]!	; 0x238

00010e4c <exit@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #560]!	; 0x230

00010e58 <strlen@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #552]!	; 0x228

00010e64 <strchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #544]!	; 0x220

00010e70 <__errno_location@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #536]!	; 0x218

00010e7c <__cxa_atexit@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #528]!	; 0x210

00010e88 <memset@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #520]!	; 0x208

00010e94 <__printf_chk@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #512]!	; 0x200

00010ea0 <fileno@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #504]!	; 0x1f8

00010eac <__fprintf_chk@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #496]!	; 0x1f0

00010eb8 <memchr@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ec4 <strtoimax@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #480]!	; 0x1e0

00010ed0 <fclose@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #472]!	; 0x1d8

00010edc <fseeko64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ee8 <setlocale@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #456]!	; 0x1c8

00010ef4 <strrchr@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #448]!	; 0x1c0

00010f00 <nl_langinfo@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #440]!	; 0x1b8

00010f0c <fopen64@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #432]!	; 0x1b0

00010f18 <bindtextdomain@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #424]!	; 0x1a8

00010f24 <fread_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #416]!	; 0x1a0

00010f30 <fputs@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #408]!	; 0x198

00010f3c <strncmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #400]!	; 0x190

00010f48 <abort@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #392]!	; 0x188

00010f54 <feof_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #384]!	; 0x180

00010f60 <__assert_fail@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #376]!	; 0x178

Disassembly of section .text:

00010f6c <.text>:
   10f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f70:	mov	r9, r0
   10f74:	sub	sp, sp, #76	; 0x4c
   10f78:	ldr	r0, [r1]
   10f7c:	mov	r7, r1
   10f80:	bl	137a0 <__assert_fail@plt+0x2840>
   10f84:	ldr	r1, [pc, #1976]	; 11744 <__assert_fail@plt+0x7e4>
   10f88:	mov	r0, #6
   10f8c:	bl	10ee8 <setlocale@plt>
   10f90:	mov	r4, #0
   10f94:	ldr	r1, [pc, #1964]	; 11748 <__assert_fail@plt+0x7e8>
   10f98:	ldr	r0, [pc, #1964]	; 1174c <__assert_fail@plt+0x7ec>
   10f9c:	ldr	sl, [pc, #1964]	; 11750 <__assert_fail@plt+0x7f0>
   10fa0:	bl	10f18 <bindtextdomain@plt>
   10fa4:	mov	r6, #76	; 0x4c
   10fa8:	ldr	r0, [pc, #1948]	; 1174c <__assert_fail@plt+0x7ec>
   10fac:	mov	r8, r4
   10fb0:	bl	10da4 <textdomain@plt>
   10fb4:	ldr	r0, [pc, #1944]	; 11754 <__assert_fail@plt+0x7f4>
   10fb8:	bl	165e0 <__assert_fail@plt+0x5680>
   10fbc:	str	r4, [sp, #20]
   10fc0:	mov	r5, #0
   10fc4:	str	r5, [sp]
   10fc8:	ldr	r3, [pc, #1928]	; 11758 <__assert_fail@plt+0x7f8>
   10fcc:	ldr	r2, [pc, #1928]	; 1175c <__assert_fail@plt+0x7fc>
   10fd0:	mov	r1, r7
   10fd4:	mov	r0, r9
   10fd8:	bl	10e34 <getopt_long@plt>
   10fdc:	cmn	r0, #1
   10fe0:	bne	11018 <__assert_fail@plt+0xb8>
   10fe4:	sub	r4, r4, #256	; 0x100
   10fe8:	ldr	r5, [pc, #1904]	; 11760 <__assert_fail@plt+0x800>
   10fec:	cmp	r4, #7
   10ff0:	ldrls	pc, [pc, r4, lsl #2]
   10ff4:	b	112d4 <__assert_fail@plt+0x374>
   10ff8:	andeq	r1, r1, r4, asr #2
   10ffc:			; <UNDEFINED> instruction: 0x000111bc
   11000:	andeq	r1, r1, r4, ror #3
   11004:	andeq	r1, r1, ip, lsl #4
   11008:	andeq	r1, r1, r4, lsr r2
   1100c:	andeq	r1, r1, ip, asr r2
   11010:	andeq	r1, r1, r4, lsl #5
   11014:	andeq	r1, r1, ip, lsr #5
   11018:	cmp	r0, #105	; 0x69
   1101c:	beq	11094 <__assert_fail@plt+0x134>
   11020:	bgt	11074 <__assert_fail@plt+0x114>
   11024:	cmn	r0, #2
   11028:	beq	1112c <__assert_fail@plt+0x1cc>
   1102c:	cmp	r0, #100	; 0x64
   11030:	beq	11134 <__assert_fail@plt+0x1d4>
   11034:	cmn	r0, #3
   11038:	bne	1108c <__assert_fail@plt+0x12c>
   1103c:	ldr	r3, [pc, #1824]	; 11764 <__assert_fail@plt+0x804>
   11040:	ldr	r0, [pc, #1824]	; 11768 <__assert_fail@plt+0x808>
   11044:	str	r3, [sp, #4]
   11048:	ldr	r3, [pc, #1820]	; 1176c <__assert_fail@plt+0x80c>
   1104c:	str	r5, [sp, #8]
   11050:	str	r3, [sp]
   11054:	ldr	r3, [pc, #1812]	; 11770 <__assert_fail@plt+0x810>
   11058:	ldr	r0, [r0]
   1105c:	ldr	r2, [pc, #1808]	; 11774 <__assert_fail@plt+0x814>
   11060:	ldr	r3, [r3]
   11064:	ldr	r1, [pc, #1804]	; 11778 <__assert_fail@plt+0x818>
   11068:	bl	15220 <__assert_fail@plt+0x42c0>
   1106c:	mov	r0, r5
   11070:	bl	10e4c <exit@plt>
   11074:	cmp	r0, #119	; 0x77
   11078:	beq	110a0 <__assert_fail@plt+0x140>
   1107c:	blt	1108c <__assert_fail@plt+0x12c>
   11080:	sub	r3, r0, #256	; 0x100
   11084:	cmp	r3, #7
   11088:	bls	1113c <__assert_fail@plt+0x1dc>
   1108c:	mov	r0, #1
   11090:	b	11130 <__assert_fail@plt+0x1d0>
   11094:	mov	r3, #1
   11098:	str	r3, [sp, #20]
   1109c:	b	10fc0 <__assert_fail@plt+0x60>
   110a0:	ldr	r3, [pc, #1692]	; 11744 <__assert_fail@plt+0x7e4>
   110a4:	mov	r2, #10
   110a8:	str	r3, [sp]
   110ac:	mov	r1, r5
   110b0:	add	r3, sp, #48	; 0x30
   110b4:	ldr	r0, [sl]
   110b8:	bl	15928 <__assert_fail@plt+0x49c8>
   110bc:	cmp	r0, #1
   110c0:	bhi	110d4 <__assert_fail@plt+0x174>
   110c4:	ldrd	r2, [sp, #48]	; 0x30
   110c8:	cmp	r2, #0
   110cc:	sbcs	r1, r3, #0
   110d0:	bge	11108 <__assert_fail@plt+0x1a8>
   110d4:	mov	r2, #5
   110d8:	ldr	r1, [pc, #1692]	; 1177c <__assert_fail@plt+0x81c>
   110dc:	mov	r0, #0
   110e0:	bl	10d8c <dcgettext@plt>
   110e4:	mov	r4, r0
   110e8:	ldr	r0, [sl]
   110ec:	bl	14dd0 <__assert_fail@plt+0x3e70>
   110f0:	mov	r3, r4
   110f4:	ldr	r2, [pc, #1668]	; 11780 <__assert_fail@plt+0x820>
   110f8:	mov	r1, #0
   110fc:	str	r0, [sp]
   11100:	mov	r0, #1
   11104:	bl	10df8 <error@plt>
   11108:	cmp	r2, #-2147483648	; 0x80000000
   1110c:	sbcs	r1, r3, #0
   11110:	eor	r0, r0, #1
   11114:	andlt	r0, r0, #1
   11118:	movge	r0, #0
   1111c:	cmp	r0, #0
   11120:	moveq	r2, #0
   11124:	mov	r6, r2
   11128:	b	10fc0 <__assert_fail@plt+0x60>
   1112c:	mov	r0, r5
   11130:	bl	123bc <__assert_fail@plt+0x145c>
   11134:	mov	r8, #1
   11138:	b	10fc0 <__assert_fail@plt+0x60>
   1113c:	mov	r4, r0
   11140:	b	10fc0 <__assert_fail@plt+0x60>
   11144:	ldr	r3, [pc, #1592]	; 11784 <__assert_fail@plt+0x824>
   11148:	str	r3, [r5]
   1114c:	ldr	r3, [pc, #1588]	; 11788 <__assert_fail@plt+0x828>
   11150:	str	r3, [r5, #4]
   11154:	ldr	r3, [pc, #1584]	; 1178c <__assert_fail@plt+0x82c>
   11158:	str	r3, [r5, #8]
   1115c:	ldr	r3, [pc, #1580]	; 11790 <__assert_fail@plt+0x830>
   11160:	str	r3, [r5, #12]
   11164:	ldr	r3, [pc, #1576]	; 11794 <__assert_fail@plt+0x834>
   11168:	ldr	r4, [pc, #1576]	; 11798 <__assert_fail@plt+0x838>
   1116c:	str	r3, [r5, #16]
   11170:	ldr	r3, [r4]
   11174:	sub	r2, r9, r3
   11178:	cmp	r2, #1
   1117c:	ble	112f8 <__assert_fail@plt+0x398>
   11180:	mov	r2, #5
   11184:	ldr	r1, [pc, #1552]	; 1179c <__assert_fail@plt+0x83c>
   11188:	mov	r0, #0
   1118c:	bl	10d8c <dcgettext@plt>
   11190:	ldr	r3, [r4]
   11194:	add	r3, r3, #1
   11198:	mov	r5, r0
   1119c:	ldr	r0, [r7, r3, lsl #2]
   111a0:	bl	14dd0 <__assert_fail@plt+0x3e70>
   111a4:	mov	r1, #0
   111a8:	mov	r2, r5
   111ac:	mov	r3, r0
   111b0:	mov	r0, r1
   111b4:	bl	10df8 <error@plt>
   111b8:	b	1108c <__assert_fail@plt+0x12c>
   111bc:	ldr	r3, [pc, #1472]	; 11784 <__assert_fail@plt+0x824>
   111c0:	str	r3, [r5]
   111c4:	ldr	r3, [pc, #1492]	; 117a0 <__assert_fail@plt+0x840>
   111c8:	str	r3, [r5, #4]
   111cc:	ldr	r3, [pc, #1488]	; 117a4 <__assert_fail@plt+0x844>
   111d0:	str	r3, [r5, #8]
   111d4:	ldr	r3, [pc, #1484]	; 117a8 <__assert_fail@plt+0x848>
   111d8:	str	r3, [r5, #12]
   111dc:	ldr	r3, [pc, #1480]	; 117ac <__assert_fail@plt+0x84c>
   111e0:	b	11168 <__assert_fail@plt+0x208>
   111e4:	ldr	r3, [pc, #1476]	; 117b0 <__assert_fail@plt+0x850>
   111e8:	str	r3, [r5]
   111ec:	ldr	r3, [pc, #1472]	; 117b4 <__assert_fail@plt+0x854>
   111f0:	str	r3, [r5, #4]
   111f4:	ldr	r3, [pc, #1468]	; 117b8 <__assert_fail@plt+0x858>
   111f8:	str	r3, [r5, #8]
   111fc:	ldr	r3, [pc, #1464]	; 117bc <__assert_fail@plt+0x85c>
   11200:	str	r3, [r5, #12]
   11204:	ldr	r3, [pc, #1460]	; 117c0 <__assert_fail@plt+0x860>
   11208:	b	11168 <__assert_fail@plt+0x208>
   1120c:	ldr	r3, [pc, #1436]	; 117b0 <__assert_fail@plt+0x850>
   11210:	str	r3, [r5]
   11214:	ldr	r3, [pc, #1448]	; 117c4 <__assert_fail@plt+0x864>
   11218:	str	r3, [r5, #4]
   1121c:	ldr	r3, [pc, #1444]	; 117c8 <__assert_fail@plt+0x868>
   11220:	str	r3, [r5, #8]
   11224:	ldr	r3, [pc, #1440]	; 117cc <__assert_fail@plt+0x86c>
   11228:	str	r3, [r5, #12]
   1122c:	ldr	r3, [pc, #1436]	; 117d0 <__assert_fail@plt+0x870>
   11230:	b	11168 <__assert_fail@plt+0x208>
   11234:	ldr	r3, [pc, #1432]	; 117d4 <__assert_fail@plt+0x874>
   11238:	str	r3, [r5]
   1123c:	ldr	r3, [pc, #1428]	; 117d8 <__assert_fail@plt+0x878>
   11240:	str	r3, [r5, #4]
   11244:	ldr	r3, [pc, #1424]	; 117dc <__assert_fail@plt+0x87c>
   11248:	str	r3, [r5, #8]
   1124c:	ldr	r3, [pc, #1420]	; 117e0 <__assert_fail@plt+0x880>
   11250:	str	r3, [r5, #12]
   11254:	ldr	r3, [pc, #1416]	; 117e4 <__assert_fail@plt+0x884>
   11258:	b	11168 <__assert_fail@plt+0x208>
   1125c:	ldr	r3, [pc, #1412]	; 117e8 <__assert_fail@plt+0x888>
   11260:	str	r3, [r5]
   11264:	ldr	r3, [pc, #1408]	; 117ec <__assert_fail@plt+0x88c>
   11268:	str	r3, [r5, #4]
   1126c:	ldr	r3, [pc, #1404]	; 117f0 <__assert_fail@plt+0x890>
   11270:	str	r3, [r5, #8]
   11274:	ldr	r3, [pc, #1400]	; 117f4 <__assert_fail@plt+0x894>
   11278:	str	r3, [r5, #12]
   1127c:	ldr	r3, [pc, #1396]	; 117f8 <__assert_fail@plt+0x898>
   11280:	b	11168 <__assert_fail@plt+0x208>
   11284:	ldr	r3, [pc, #1372]	; 117e8 <__assert_fail@plt+0x888>
   11288:	str	r3, [r5]
   1128c:	ldr	r3, [pc, #1368]	; 117ec <__assert_fail@plt+0x88c>
   11290:	str	r3, [r5, #4]
   11294:	ldr	r3, [pc, #1376]	; 117fc <__assert_fail@plt+0x89c>
   11298:	str	r3, [r5, #8]
   1129c:	ldr	r3, [pc, #1360]	; 117f4 <__assert_fail@plt+0x894>
   112a0:	str	r3, [r5, #12]
   112a4:	ldr	r3, [pc, #1364]	; 11800 <__assert_fail@plt+0x8a0>
   112a8:	b	11168 <__assert_fail@plt+0x208>
   112ac:	ldr	r3, [pc, #1360]	; 11804 <__assert_fail@plt+0x8a4>
   112b0:	str	r3, [r5]
   112b4:	ldr	r3, [pc, #1356]	; 11808 <__assert_fail@plt+0x8a8>
   112b8:	str	r3, [r5, #4]
   112bc:	ldr	r3, [pc, #1352]	; 1180c <__assert_fail@plt+0x8ac>
   112c0:	str	r3, [r5, #8]
   112c4:	ldr	r3, [pc, #1348]	; 11810 <__assert_fail@plt+0x8b0>
   112c8:	str	r3, [r5, #12]
   112cc:	ldr	r3, [pc, #1344]	; 11814 <__assert_fail@plt+0x8b4>
   112d0:	b	11168 <__assert_fail@plt+0x208>
   112d4:	mov	r2, #5
   112d8:	ldr	r1, [pc, #1336]	; 11818 <__assert_fail@plt+0x8b8>
   112dc:	mov	r0, #0
   112e0:	bl	10d8c <dcgettext@plt>
   112e4:	mov	r1, #0
   112e8:	mov	r2, r0
   112ec:	mov	r0, r1
   112f0:	bl	10df8 <error@plt>
   112f4:	b	1108c <__assert_fail@plt+0x12c>
   112f8:	cmp	r9, r3
   112fc:	ldr	r1, [pc, #1304]	; 1181c <__assert_fail@plt+0x8bc>
   11300:	ldrgt	fp, [r7, r3, lsl #2]
   11304:	ldrle	fp, [pc, #1296]	; 1181c <__assert_fail@plt+0x8bc>
   11308:	mov	r0, fp
   1130c:	bl	10d08 <strcmp@plt>
   11310:	cmp	r0, #0
   11314:	ldreq	r3, [pc, #1284]	; 11820 <__assert_fail@plt+0x8c0>
   11318:	ldreq	r4, [r3]
   1131c:	beq	11360 <__assert_fail@plt+0x400>
   11320:	ldr	r1, [pc, #1276]	; 11824 <__assert_fail@plt+0x8c4>
   11324:	mov	r0, fp
   11328:	bl	10f0c <fopen64@plt>
   1132c:	subs	r4, r0, #0
   11330:	bne	11360 <__assert_fail@plt+0x400>
   11334:	bl	10e70 <__errno_location@plt>
   11338:	mov	r2, fp
   1133c:	mov	r1, #3
   11340:	ldr	r5, [r0]
   11344:	mov	r0, r4
   11348:	bl	14c90 <__assert_fail@plt+0x3d30>
   1134c:	ldr	r2, [pc, #1236]	; 11828 <__assert_fail@plt+0x8c8>
   11350:	mov	r1, r5
   11354:	mov	r3, r0
   11358:	mov	r0, #1
   1135c:	bl	10df8 <error@plt>
   11360:	ldr	r7, [pc, #1024]	; 11768 <__assert_fail@plt+0x808>
   11364:	mov	r1, #2
   11368:	mov	r0, r4
   1136c:	bl	13590 <__assert_fail@plt+0x2630>
   11370:	cmp	r8, #0
   11374:	ldr	r3, [r7]
   11378:	beq	11594 <__assert_fail@plt+0x634>
   1137c:	str	r3, [sp, #28]
   11380:	ldr	r0, [pc, #1188]	; 1182c <__assert_fail@plt+0x8cc>
   11384:	ldr	r3, [r5]
   11388:	blx	r3
   1138c:	bl	152e8 <__assert_fail@plt+0x4388>
   11390:	ldr	r9, [pc, #968]	; 11760 <__assert_fail@plt+0x800>
   11394:	mov	r8, r0
   11398:	ldr	r0, [pc, #1164]	; 1182c <__assert_fail@plt+0x8cc>
   1139c:	bl	152e8 <__assert_fail@plt+0x4388>
   113a0:	mov	r3, #0
   113a4:	str	r3, [sp, #64]	; 0x40
   113a8:	ldr	r3, [r5, #12]
   113ac:	str	r0, [sp, #24]
   113b0:	add	r0, sp, #48	; 0x30
   113b4:	blx	r3
   113b8:	mov	r7, #0
   113bc:	ldr	r3, [r5]
   113c0:	ldr	r0, [pc, #1124]	; 1182c <__assert_fail@plt+0x8cc>
   113c4:	blx	r3
   113c8:	add	r6, r8, r7
   113cc:	mov	r3, r4
   113d0:	mov	r1, #1
   113d4:	sub	r2, r0, r7
   113d8:	mov	r0, r6
   113dc:	bl	10f24 <fread_unlocked@plt>
   113e0:	ldr	r3, [sp, #20]
   113e4:	cmp	r3, #0
   113e8:	movne	sl, #0
   113ec:	mov	r6, r0
   113f0:	bne	11454 <__assert_fail@plt+0x4f4>
   113f4:	mov	r0, r4
   113f8:	bl	10de0 <ferror_unlocked@plt>
   113fc:	add	r7, r7, r6
   11400:	subs	r6, r0, #0
   11404:	beq	1147c <__assert_fail@plt+0x51c>
   11408:	bl	10e70 <__errno_location@plt>
   1140c:	mov	r2, #5
   11410:	ldr	r1, [pc, #1048]	; 11830 <__assert_fail@plt+0x8d0>
   11414:	ldr	r4, [r0]
   11418:	b	11550 <__assert_fail@plt+0x5f0>
   1141c:	add	r1, r7, sl
   11420:	add	r3, r8, r1
   11424:	str	r3, [sp, #32]
   11428:	ldrb	r0, [r8, r1]
   1142c:	ldr	r3, [r9, #4]
   11430:	str	r1, [sp, #36]	; 0x24
   11434:	blx	r3
   11438:	cmp	r0, #0
   1143c:	bne	11450 <__assert_fail@plt+0x4f0>
   11440:	ldr	r1, [sp, #36]	; 0x24
   11444:	ldrb	r3, [r8, r1]
   11448:	cmp	r3, #61	; 0x3d
   1144c:	bne	11460 <__assert_fail@plt+0x500>
   11450:	add	sl, sl, #1
   11454:	cmp	sl, r6
   11458:	blt	1141c <__assert_fail@plt+0x4bc>
   1145c:	b	113f4 <__assert_fail@plt+0x494>
   11460:	sub	r6, r6, #1
   11464:	add	r1, r1, #1
   11468:	sub	r2, r6, sl
   1146c:	add	r1, r8, r1
   11470:	ldr	r0, [sp, #32]
   11474:	bl	10d2c <memmove@plt>
   11478:	b	11454 <__assert_fail@plt+0x4f4>
   1147c:	ldr	r3, [r9]
   11480:	ldr	r0, [pc, #932]	; 1182c <__assert_fail@plt+0x8cc>
   11484:	blx	r3
   11488:	cmp	r7, r0
   1148c:	bge	114a0 <__assert_fail@plt+0x540>
   11490:	mov	r0, r4
   11494:	bl	10f54 <feof_unlocked@plt>
   11498:	cmp	r0, #0
   1149c:	beq	113bc <__assert_fail@plt+0x45c>
   114a0:	mov	r0, r4
   114a4:	bl	10f54 <feof_unlocked@plt>
   114a8:	cmp	r0, #0
   114ac:	movne	r0, #2
   114b0:	moveq	r0, #1
   114b4:	cmp	r6, r0
   114b8:	blt	114d8 <__assert_fail@plt+0x578>
   114bc:	mov	r0, r4
   114c0:	bl	10f54 <feof_unlocked@plt>
   114c4:	cmp	r0, #0
   114c8:	beq	113b8 <__assert_fail@plt+0x458>
   114cc:	mov	r1, fp
   114d0:	mov	r0, r4
   114d4:	bl	11cdc <__assert_fail@plt+0xd7c>
   114d8:	cmp	r6, #1
   114dc:	bne	114ec <__assert_fail@plt+0x58c>
   114e0:	ldr	r3, [sp, #48]	; 0x30
   114e4:	cmp	r3, #0
   114e8:	beq	114bc <__assert_fail@plt+0x55c>
   114ec:	ldr	r2, [pc, #824]	; 1182c <__assert_fail@plt+0x8cc>
   114f0:	add	r3, sp, #72	; 0x48
   114f4:	cmp	r6, #0
   114f8:	str	r2, [r3, #-28]!	; 0xffffffe4
   114fc:	ldr	sl, [r9, #16]
   11500:	moveq	r2, r7
   11504:	movne	r2, #0
   11508:	str	r3, [sp]
   1150c:	mov	r1, r8
   11510:	ldr	r3, [sp, #24]
   11514:	add	r0, sp, #48	; 0x30
   11518:	blx	sl
   1151c:	ldr	r3, [sp, #28]
   11520:	ldr	r2, [sp, #44]	; 0x2c
   11524:	mov	r1, #1
   11528:	mov	sl, r0
   1152c:	ldr	r0, [sp, #24]
   11530:	bl	10d68 <fwrite_unlocked@plt>
   11534:	ldr	r3, [sp, #44]	; 0x2c
   11538:	cmp	r0, r3
   1153c:	bcs	11564 <__assert_fail@plt+0x604>
   11540:	bl	10e70 <__errno_location@plt>
   11544:	ldr	r1, [pc, #744]	; 11834 <__assert_fail@plt+0x8d4>
   11548:	mov	r2, #5
   1154c:	ldr	r4, [r0]
   11550:	mov	r0, #0
   11554:	bl	10d8c <dcgettext@plt>
   11558:	mov	r1, r4
   1155c:	mov	r2, r0
   11560:	b	11584 <__assert_fail@plt+0x624>
   11564:	cmp	sl, #0
   11568:	bne	1158c <__assert_fail@plt+0x62c>
   1156c:	mov	r2, #5
   11570:	ldr	r1, [pc, #704]	; 11838 <__assert_fail@plt+0x8d8>
   11574:	mov	r0, sl
   11578:	bl	10d8c <dcgettext@plt>
   1157c:	mov	r1, sl
   11580:	mov	r2, r0
   11584:	mov	r0, #1
   11588:	bl	10df8 <error@plt>
   1158c:	add	r6, r6, #1
   11590:	b	114a0 <__assert_fail@plt+0x540>
   11594:	mov	r0, #30720	; 0x7800
   11598:	str	r3, [sp, #24]
   1159c:	bl	152e8 <__assert_fail@plt+0x4388>
   115a0:	ldr	r3, [r5]
   115a4:	str	r0, [sp, #28]
   115a8:	mov	r0, #30720	; 0x7800
   115ac:	blx	r3
   115b0:	bl	152e8 <__assert_fail@plt+0x4388>
   115b4:	str	r7, [sp, #32]
   115b8:	str	r0, [sp, #20]
   115bc:	mov	r7, #0
   115c0:	mov	r5, #1
   115c4:	ldr	r0, [sp, #28]
   115c8:	rsb	r2, r7, #30720	; 0x7800
   115cc:	mov	r3, r4
   115d0:	mov	r1, r5
   115d4:	add	r0, r0, r7
   115d8:	bl	10f24 <fread_unlocked@plt>
   115dc:	add	r7, r7, r0
   115e0:	mov	r0, r4
   115e4:	bl	10f54 <feof_unlocked@plt>
   115e8:	cmp	r0, #0
   115ec:	bne	11674 <__assert_fail@plt+0x714>
   115f0:	mov	r0, r4
   115f4:	bl	10de0 <ferror_unlocked@plt>
   115f8:	cmp	r0, #0
   115fc:	bne	11674 <__assert_fail@plt+0x714>
   11600:	ldr	r3, [pc, #564]	; 1183c <__assert_fail@plt+0x8dc>
   11604:	cmp	r7, r3
   11608:	ble	115c4 <__assert_fail@plt+0x664>
   1160c:	ldr	r5, [pc, #332]	; 11760 <__assert_fail@plt+0x800>
   11610:	mov	r0, r7
   11614:	ldr	r3, [r5]
   11618:	ldr	r9, [r5, #8]
   1161c:	blx	r3
   11620:	ldr	r2, [sp, #20]
   11624:	mov	r1, r7
   11628:	mov	r3, r0
   1162c:	ldr	r0, [sp, #28]
   11630:	blx	r9
   11634:	ldr	r3, [r5]
   11638:	mov	r0, r7
   1163c:	blx	r3
   11640:	cmp	r6, #0
   11644:	movne	r9, #0
   11648:	mov	sl, r0
   1164c:	bne	116d8 <__assert_fail@plt+0x778>
   11650:	ldr	r3, [sp, #32]
   11654:	mov	r2, r0
   11658:	mov	r1, #1
   1165c:	ldr	r3, [r3]
   11660:	ldr	r0, [sp, #20]
   11664:	bl	10d68 <fwrite_unlocked@plt>
   11668:	cmp	sl, r0
   1166c:	bls	1167c <__assert_fail@plt+0x71c>
   11670:	b	11540 <__assert_fail@plt+0x5e0>
   11674:	cmp	r7, #0
   11678:	bgt	1160c <__assert_fail@plt+0x6ac>
   1167c:	mov	r0, r4
   11680:	bl	10f54 <feof_unlocked@plt>
   11684:	cmp	r0, #0
   11688:	beq	11714 <__assert_fail@plt+0x7b4>
   1168c:	cmp	r6, #0
   11690:	cmpne	r8, #0
   11694:	bgt	1172c <__assert_fail@plt+0x7cc>
   11698:	mov	r0, r4
   1169c:	bl	10de0 <ferror_unlocked@plt>
   116a0:	cmp	r0, #0
   116a4:	beq	114cc <__assert_fail@plt+0x56c>
   116a8:	b	11408 <__assert_fail@plt+0x4a8>
   116ac:	ldr	r3, [sp, #32]
   116b0:	ldr	r0, [sp, #20]
   116b4:	mov	r2, r5
   116b8:	ldr	r3, [r3]
   116bc:	mov	r1, #1
   116c0:	add	r0, r0, r9
   116c4:	bl	10d68 <fwrite_unlocked@plt>
   116c8:	cmp	r5, r0
   116cc:	bhi	11540 <__assert_fail@plt+0x5e0>
   116d0:	add	r8, r8, r5
   116d4:	add	r9, r9, r5
   116d8:	cmp	sl, r9
   116dc:	ble	1167c <__assert_fail@plt+0x71c>
   116e0:	sub	r5, sl, r9
   116e4:	sub	r3, r6, r8
   116e8:	cmp	r5, r3
   116ec:	movge	r5, r3
   116f0:	cmp	r5, #0
   116f4:	bne	116ac <__assert_fail@plt+0x74c>
   116f8:	ldr	r1, [sp, #24]
   116fc:	mov	r0, #10
   11700:	bl	10d80 <fputc_unlocked@plt>
   11704:	cmn	r0, #1
   11708:	beq	11540 <__assert_fail@plt+0x5e0>
   1170c:	mov	r8, r5
   11710:	b	116d8 <__assert_fail@plt+0x778>
   11714:	mov	r0, r4
   11718:	bl	10de0 <ferror_unlocked@plt>
   1171c:	cmp	r7, #30720	; 0x7800
   11720:	cmpeq	r0, #0
   11724:	beq	115bc <__assert_fail@plt+0x65c>
   11728:	b	1168c <__assert_fail@plt+0x72c>
   1172c:	ldr	r1, [sp, #24]
   11730:	mov	r0, #10
   11734:	bl	10d80 <fputc_unlocked@plt>
   11738:	cmn	r0, #1
   1173c:	bne	11698 <__assert_fail@plt+0x738>
   11740:	b	11540 <__assert_fail@plt+0x5e0>
   11744:			; <UNDEFINED> instruction: 0x00016fb0
   11748:			; <UNDEFINED> instruction: 0x00016fb1
   1174c:	andeq	r6, r1, lr, lsl #30
   11750:	andeq	r8, r2, r8, asr r1
   11754:	andeq	r3, r1, r0, lsr #9
   11758:	andeq	r6, r1, r4, ror #14
   1175c:	strdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   11760:	andeq	r8, r2, r0, ror #2
   11764:	andeq	r6, r1, r2, ror #31
   11768:	andeq	r8, r2, r4, asr r1
   1176c:	andeq	r6, r1, pc, ror #31
   11770:	strdeq	r8, [r2], -r0
   11774:	andeq	r6, r1, sl, lsl #30
   11778:	ldrdeq	r6, [r1], -r1
   1177c:	andeq	r6, r1, r9, asr #31
   11780:	ldrdeq	r6, [r1], -fp
   11784:	andeq	r1, r1, r8, ror #18
   11788:	andeq	r3, r1, r8, asr #3
   1178c:	andeq	r2, r1, r8, ror pc
   11790:	ldrdeq	r1, [r1], -r4
   11794:	muleq	r1, r0, ip
   11798:	andeq	r8, r2, r0, asr #2
   1179c:	andeq	r7, r1, sl, lsl r0
   117a0:	strdeq	r1, [r1], -r0
   117a4:	andeq	r1, r1, r4, lsr fp
   117a8:			; <UNDEFINED> instruction: 0x00011cb8
   117ac:	andeq	r2, r1, r4, asr r2
   117b0:	andeq	r1, r1, r0, lsl #19
   117b4:	muleq	r1, r8, fp
   117b8:	andeq	r2, r1, r0, lsl r9
   117bc:	andeq	r1, r1, r8, lsl #25
   117c0:	andeq	r1, r1, r4, asr #24
   117c4:	muleq	r1, r8, r9
   117c8:	andeq	r2, r1, r8, ror #3
   117cc:	andeq	r1, r1, ip, ror #24
   117d0:	andeq	r2, r1, r4, lsl r3
   117d4:	ldrdeq	r1, [r1], -r0
   117d8:			; <UNDEFINED> instruction: 0x000119b4
   117dc:	ldrdeq	r1, [r1], -r8
   117e0:	ldrdeq	r1, [r1], -r4
   117e4:	andeq	r1, r1, r8, ror #26
   117e8:	andeq	r1, r1, ip, asr #20
   117ec:	andeq	r1, r1, r8, lsr sl
   117f0:	andeq	r1, r1, r4, asr sl
   117f4:			; <UNDEFINED> instruction: 0x00011bb8
   117f8:	andeq	r1, r1, ip, ror #31
   117fc:	andeq	r1, r1, r4, lsr #21
   11800:	andeq	r1, r1, r4, asr #30
   11804:	andeq	r1, r1, r0, lsr #20
   11808:	strdeq	r1, [r1], -r4
   1180c:	andeq	r2, r1, r4, lsr #1
   11810:	muleq	r1, ip, fp
   11814:	andeq	r1, r1, r4, lsl #28
   11818:	andeq	r7, r1, r4
   1181c:	andeq	r7, r1, ip, asr #7
   11820:	andeq	r8, r2, r0, asr r1
   11824:	andeq	r7, r1, fp, lsr #32
   11828:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   1182c:	andeq	r1, r0, r8, rrx
   11830:	andeq	r7, r1, lr, lsr #32
   11834:	andeq	r7, r1, r9, lsr r0
   11838:	andeq	r7, r1, r5, asr #32
   1183c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   11840:	mov	fp, #0
   11844:	mov	lr, #0
   11848:	pop	{r1}		; (ldr r1, [sp], #4)
   1184c:	mov	r2, sp
   11850:	push	{r2}		; (str r2, [sp, #-4]!)
   11854:	push	{r0}		; (str r0, [sp, #-4]!)
   11858:	ldr	ip, [pc, #16]	; 11870 <__assert_fail@plt+0x910>
   1185c:	push	{ip}		; (str ip, [sp, #-4]!)
   11860:	ldr	r0, [pc, #12]	; 11874 <__assert_fail@plt+0x914>
   11864:	ldr	r3, [pc, #12]	; 11878 <__assert_fail@plt+0x918>
   11868:	bl	10e10 <__libc_start_main@plt>
   1186c:	bl	10f48 <abort@plt>
   11870:	ldrdeq	r6, [r1], -ip
   11874:	andeq	r0, r1, ip, ror #30
   11878:	andeq	r6, r1, ip, ror r5
   1187c:	ldr	r3, [pc, #20]	; 11898 <__assert_fail@plt+0x938>
   11880:	ldr	r2, [pc, #20]	; 1189c <__assert_fail@plt+0x93c>
   11884:	add	r3, pc, r3
   11888:	ldr	r2, [r3, r2]
   1188c:	cmp	r2, #0
   11890:	bxeq	lr
   11894:	b	10e28 <__gmon_start__@plt>
   11898:	andeq	r6, r1, r4, ror r7
   1189c:	andeq	r0, r0, r4, ror #1
   118a0:	ldr	r3, [pc, #28]	; 118c4 <__assert_fail@plt+0x964>
   118a4:	ldr	r0, [pc, #28]	; 118c8 <__assert_fail@plt+0x968>
   118a8:	sub	r3, r3, r0
   118ac:	cmp	r3, #6
   118b0:	bxls	lr
   118b4:	ldr	r3, [pc, #16]	; 118cc <__assert_fail@plt+0x96c>
   118b8:	cmp	r3, #0
   118bc:	bxeq	lr
   118c0:	bx	r3
   118c4:	andeq	r8, r2, fp, lsr r1
   118c8:	andeq	r8, r2, r8, lsr r1
   118cc:	andeq	r0, r0, r0
   118d0:	ldr	r1, [pc, #36]	; 118fc <__assert_fail@plt+0x99c>
   118d4:	ldr	r0, [pc, #36]	; 11900 <__assert_fail@plt+0x9a0>
   118d8:	sub	r1, r1, r0
   118dc:	asr	r1, r1, #2
   118e0:	add	r1, r1, r1, lsr #31
   118e4:	asrs	r1, r1, #1
   118e8:	bxeq	lr
   118ec:	ldr	r3, [pc, #16]	; 11904 <__assert_fail@plt+0x9a4>
   118f0:	cmp	r3, #0
   118f4:	bxeq	lr
   118f8:	bx	r3
   118fc:	andeq	r8, r2, r8, lsr r1
   11900:	andeq	r8, r2, r8, lsr r1
   11904:	andeq	r0, r0, r0
   11908:	push	{r4, lr}
   1190c:	ldr	r4, [pc, #24]	; 1192c <__assert_fail@plt+0x9cc>
   11910:	ldrb	r3, [r4]
   11914:	cmp	r3, #0
   11918:	popne	{r4, pc}
   1191c:	bl	118a0 <__assert_fail@plt+0x940>
   11920:	mov	r3, #1
   11924:	strb	r3, [r4]
   11928:	pop	{r4, pc}
   1192c:	andeq	r8, r2, ip, asr r1
   11930:	ldr	r0, [pc, #40]	; 11960 <__assert_fail@plt+0xa00>
   11934:	ldr	r3, [r0]
   11938:	cmp	r3, #0
   1193c:	bne	11944 <__assert_fail@plt+0x9e4>
   11940:	b	118d0 <__assert_fail@plt+0x970>
   11944:	ldr	r3, [pc, #24]	; 11964 <__assert_fail@plt+0xa04>
   11948:	cmp	r3, #0
   1194c:	beq	11940 <__assert_fail@plt+0x9e0>
   11950:	push	{r4, lr}
   11954:	blx	r3
   11958:	pop	{r4, lr}
   1195c:	b	118d0 <__assert_fail@plt+0x970>
   11960:	andeq	r7, r2, r4, lsl pc
   11964:	andeq	r0, r0, r0
   11968:	push	{r4, lr}
   1196c:	mov	r1, #3
   11970:	add	r0, r0, #2
   11974:	bl	16130 <__assert_fail@plt+0x51d0>
   11978:	lsl	r0, r0, #2
   1197c:	pop	{r4, pc}
   11980:	push	{r4, lr}
   11984:	mov	r1, #5
   11988:	add	r0, r0, #4
   1198c:	bl	16130 <__assert_fail@plt+0x51d0>
   11990:	lsl	r0, r0, #3
   11994:	pop	{r4, pc}
   11998:	sub	r3, r0, #48	; 0x30
   1199c:	sub	r0, r0, #65	; 0x41
   119a0:	cmp	r0, #21
   119a4:	cmphi	r3, #9
   119a8:	movls	r0, #1
   119ac:	movhi	r0, #0
   119b0:	bx	lr
   119b4:	sub	r3, r0, #48	; 0x30
   119b8:	sub	r0, r0, #65	; 0x41
   119bc:	cmp	r0, #5
   119c0:	cmphi	r3, #9
   119c4:	movls	r0, #1
   119c8:	movhi	r0, #0
   119cc:	bx	lr
   119d0:	lsl	r0, r0, #1
   119d4:	bx	lr
   119d8:	add	r1, r0, r1
   119dc:	cmp	r0, r1
   119e0:	ldr	ip, [pc, #52]	; 11a1c <__assert_fail@plt+0xabc>
   119e4:	add	r2, r2, #2
   119e8:	bne	119f0 <__assert_fail@plt+0xa90>
   119ec:	bx	lr
   119f0:	push	{lr}		; (str lr, [sp, #-4]!)
   119f4:	add	r2, r2, #2
   119f8:	ldrb	r3, [r0], #1
   119fc:	cmp	r0, r1
   11a00:	ldrb	lr, [ip, r3, lsr #4]
   11a04:	and	r3, r3, #15
   11a08:	ldrb	r3, [ip, r3]
   11a0c:	strb	lr, [r2, #-4]
   11a10:	strb	r3, [r2, #-3]
   11a14:	bne	119f4 <__assert_fail@plt+0xa94>
   11a18:	pop	{pc}		; (ldr pc, [sp], #4)
   11a1c:	andeq	r6, r1, r4, lsl #12
   11a20:	add	r0, r0, r0, lsl #2
   11a24:	add	r3, r0, #3
   11a28:	cmp	r0, #0
   11a2c:	movlt	r0, r3
   11a30:	asr	r0, r0, #2
   11a34:	bx	lr
   11a38:	sub	r0, r0, #48	; 0x30
   11a3c:	cmp	r0, #1
   11a40:	movhi	r0, #0
   11a44:	movls	r0, #1
   11a48:	bx	lr
   11a4c:	lsl	r0, r0, #3
   11a50:	bx	lr
   11a54:	add	r1, r0, r1
   11a58:	cmp	r0, r1
   11a5c:	add	r2, r2, #7
   11a60:	bne	11a68 <__assert_fail@plt+0xb08>
   11a64:	bx	lr
   11a68:	push	{lr}		; (str lr, [sp, #-4]!)
   11a6c:	sub	ip, r2, #8
   11a70:	ldrb	r3, [r0], #1
   11a74:	tst	r3, #128	; 0x80
   11a78:	movne	lr, #49	; 0x31
   11a7c:	moveq	lr, #48	; 0x30
   11a80:	lsl	r3, r3, #1
   11a84:	strb	lr, [ip, #1]!
   11a88:	cmp	r2, ip
   11a8c:	uxtb	r3, r3
   11a90:	bne	11a74 <__assert_fail@plt+0xb14>
   11a94:	cmp	r0, r1
   11a98:	add	r2, r2, #8
   11a9c:	bne	11a6c <__assert_fail@plt+0xb0c>
   11aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   11aa4:	add	r1, r0, r1
   11aa8:	cmp	r0, r1
   11aac:	add	r2, r2, #7
   11ab0:	bne	11ab8 <__assert_fail@plt+0xb58>
   11ab4:	bx	lr
   11ab8:	push	{lr}		; (str lr, [sp, #-4]!)
   11abc:	sub	r3, r2, #8
   11ac0:	ldrb	ip, [r0], #1
   11ac4:	tst	ip, #1
   11ac8:	movne	lr, #49	; 0x31
   11acc:	moveq	lr, #48	; 0x30
   11ad0:	strb	lr, [r3, #1]!
   11ad4:	cmp	r2, r3
   11ad8:	lsr	ip, ip, #1
   11adc:	bne	11ac4 <__assert_fail@plt+0xb64>
   11ae0:	cmp	r0, r1
   11ae4:	add	r2, r2, #8
   11ae8:	bne	11abc <__assert_fail@plt+0xb5c>
   11aec:	pop	{pc}		; (ldr pc, [sp], #4)
   11af0:	cmp	r0, #95	; 0x5f
   11af4:	cmpne	r0, #45	; 0x2d
   11af8:	moveq	r2, #1
   11afc:	movne	r2, #0
   11b00:	beq	11b20 <__assert_fail@plt+0xbc0>
   11b04:	and	r3, r0, #251	; 0xfb
   11b08:	cmp	r3, #43	; 0x2b
   11b0c:	beq	11b2c <__assert_fail@plt+0xbcc>
   11b10:	push	{r4, lr}
   11b14:	bl	131c8 <__assert_fail@plt+0x2268>
   11b18:	and	r0, r0, #1
   11b1c:	pop	{r4, pc}
   11b20:	mov	r0, #1
   11b24:	and	r0, r0, #1
   11b28:	bx	lr
   11b2c:	mov	r0, r2
   11b30:	b	11b24 <__assert_fail@plt+0xbc4>
   11b34:	push	{r4, r5, r6, lr}
   11b38:	mov	r4, r2
   11b3c:	mov	r5, r3
   11b40:	add	r5, r4, r5
   11b44:	bl	12f78 <__assert_fail@plt+0x2018>
   11b48:	mov	r2, r4
   11b4c:	mov	r1, #95	; 0x5f
   11b50:	mov	r0, #45	; 0x2d
   11b54:	cmp	r2, r5
   11b58:	bne	11b60 <__assert_fail@plt+0xc00>
   11b5c:	pop	{r4, r5, r6, pc}
   11b60:	ldrb	r3, [r2], #1
   11b64:	cmp	r3, #43	; 0x2b
   11b68:	strbeq	r0, [r2, #-1]
   11b6c:	beq	11b54 <__assert_fail@plt+0xbf4>
   11b70:	cmp	r3, #47	; 0x2f
   11b74:	strbeq	r1, [r2, #-1]
   11b78:	b	11b54 <__assert_fail@plt+0xbf4>
   11b7c:	push	{r4, lr}
   11b80:	mov	r4, r0
   11b84:	ldr	r0, [pc, #12]	; 11b98 <__assert_fail@plt+0xc38>
   11b88:	str	r0, [r4, #20]
   11b8c:	bl	15310 <__assert_fail@plt+0x43b0>
   11b90:	str	r0, [r4, #16]
   11b94:	pop	{r4, pc}
   11b98:	andeq	r1, r0, r8, rrx
   11b9c:	push	{r4, lr}
   11ba0:	mov	r4, r0
   11ba4:	bl	11b7c <__assert_fail@plt+0xc1c>
   11ba8:	mov	r2, #1
   11bac:	mov	r3, #0
   11bb0:	stm	r4, {r2, r3}
   11bb4:	pop	{r4, pc}
   11bb8:	push	{r4, lr}
   11bbc:	mov	r4, r0
   11bc0:	bl	11b7c <__assert_fail@plt+0xc1c>
   11bc4:	mov	r3, #0
   11bc8:	strb	r3, [r4, #4]
   11bcc:	str	r3, [r4]
   11bd0:	pop	{r4, pc}
   11bd4:	push	{r4, lr}
   11bd8:	mov	r4, r0
   11bdc:	bl	11b7c <__assert_fail@plt+0xc1c>
   11be0:	mov	r3, #0
   11be4:	strb	r3, [r4, #5]
   11be8:	mov	r3, #1
   11bec:	str	r3, [r4]
   11bf0:	pop	{r4, pc}
   11bf4:	cmp	r0, #90	; 0x5a
   11bf8:	bhi	11c18 <__assert_fail@plt+0xcb8>
   11bfc:	cmp	r0, #65	; 0x41
   11c00:	bcs	11c10 <__assert_fail@plt+0xcb0>
   11c04:	sub	r3, r0, #48	; 0x30
   11c08:	cmp	r3, #9
   11c0c:	bhi	11c24 <__assert_fail@plt+0xcc4>
   11c10:	mov	r0, #1
   11c14:	bx	lr
   11c18:	sub	r3, r0, #97	; 0x61
   11c1c:	cmp	r3, #25
   11c20:	b	11c0c <__assert_fail@plt+0xcac>
   11c24:	mov	r1, r0
   11c28:	push	{r4, lr}
   11c2c:	ldr	r0, [pc, #12]	; 11c40 <__assert_fail@plt+0xce0>
   11c30:	bl	10e64 <strchr@plt>
   11c34:	adds	r0, r0, #0
   11c38:	movne	r0, #1
   11c3c:	pop	{r4, pc}
   11c40:	andeq	r6, r1, r4, asr #16
   11c44:	push	{r0, r1, r4, lr}
   11c48:	mov	r4, r0
   11c4c:	ldr	r0, [sp, #16]
   11c50:	str	r0, [sp]
   11c54:	add	r0, r4, #4
   11c58:	bl	12bbc <__assert_fail@plt+0x1c5c>
   11c5c:	ldr	r3, [r4, #4]
   11c60:	str	r3, [r4]
   11c64:	add	sp, sp, #8
   11c68:	pop	{r4, pc}
   11c6c:	push	{r4, lr}
   11c70:	mov	r4, r0
   11c74:	add	r0, r0, #4
   11c78:	bl	12bb0 <__assert_fail@plt+0x1c50>
   11c7c:	mov	r0, r4
   11c80:	pop	{r4, lr}
   11c84:	b	11b7c <__assert_fail@plt+0xc1c>
   11c88:	add	r0, r0, #4
   11c8c:	b	12bb0 <__assert_fail@plt+0x1c50>
   11c90:	push	{r0, r1, r4, lr}
   11c94:	mov	r4, r0
   11c98:	ldr	r0, [sp, #16]
   11c9c:	str	r0, [sp]
   11ca0:	add	r0, r4, #4
   11ca4:	bl	131ec <__assert_fail@plt+0x228c>
   11ca8:	ldr	r3, [r4, #4]
   11cac:	str	r3, [r4]
   11cb0:	add	sp, sp, #8
   11cb4:	pop	{r4, pc}
   11cb8:	push	{r4, lr}
   11cbc:	mov	r4, r0
   11cc0:	add	r0, r0, #4
   11cc4:	bl	131e0 <__assert_fail@plt+0x2280>
   11cc8:	mov	r0, r4
   11ccc:	pop	{r4, lr}
   11cd0:	b	11b7c <__assert_fail@plt+0xc1c>
   11cd4:	add	r0, r0, #4
   11cd8:	b	131e0 <__assert_fail@plt+0x2280>
   11cdc:	push	{r4, lr}
   11ce0:	mov	r4, r1
   11ce4:	bl	135c0 <__assert_fail@plt+0x2660>
   11ce8:	cmp	r0, #0
   11cec:	beq	11d58 <__assert_fail@plt+0xdf8>
   11cf0:	ldr	r1, [pc, #100]	; 11d5c <__assert_fail@plt+0xdfc>
   11cf4:	mov	r0, r4
   11cf8:	bl	10d08 <strcmp@plt>
   11cfc:	subs	r5, r0, #0
   11d00:	bne	11d2c <__assert_fail@plt+0xdcc>
   11d04:	bl	10e70 <__errno_location@plt>
   11d08:	mov	r2, #5
   11d0c:	ldr	r1, [pc, #76]	; 11d60 <__assert_fail@plt+0xe00>
   11d10:	ldr	r4, [r0]
   11d14:	mov	r0, r5
   11d18:	bl	10d8c <dcgettext@plt>
   11d1c:	mov	r1, r4
   11d20:	mov	r2, r0
   11d24:	mov	r0, #1
   11d28:	bl	10df8 <error@plt>
   11d2c:	bl	10e70 <__errno_location@plt>
   11d30:	mov	r2, r4
   11d34:	mov	r1, #3
   11d38:	ldr	r5, [r0]
   11d3c:	mov	r0, #0
   11d40:	bl	14c90 <__assert_fail@plt+0x3d30>
   11d44:	ldr	r2, [pc, #24]	; 11d64 <__assert_fail@plt+0xe04>
   11d48:	mov	r1, r5
   11d4c:	mov	r3, r0
   11d50:	mov	r0, #1
   11d54:	bl	10df8 <error@plt>
   11d58:	bl	10e4c <exit@plt>
   11d5c:	andeq	r7, r1, ip, asr #7
   11d60:	andeq	r6, r1, ip, asr r8
   11d64:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   11d68:	push	{r4, lr}
   11d6c:	mov	ip, #0
   11d70:	ldr	r4, [sp, #8]
   11d74:	cmp	r2, #0
   11d78:	addne	r2, r1, r2
   11d7c:	str	ip, [r4]
   11d80:	bne	11dec <__assert_fail@plt+0xe8c>
   11d84:	ldrb	r0, [r0, #5]
   11d88:	eor	r0, r0, #1
   11d8c:	pop	{r4, pc}
   11d90:	ldrb	lr, [r1], #1
   11d94:	cmp	lr, #10
   11d98:	beq	11dec <__assert_fail@plt+0xe8c>
   11d9c:	sub	ip, lr, #48	; 0x30
   11da0:	cmp	ip, #9
   11da4:	bls	11db8 <__assert_fail@plt+0xe58>
   11da8:	sub	ip, lr, #65	; 0x41
   11dac:	cmp	ip, #5
   11db0:	bhi	11dfc <__assert_fail@plt+0xe9c>
   11db4:	sub	ip, lr, #55	; 0x37
   11db8:	ldrb	lr, [r0, #5]
   11dbc:	cmp	lr, #0
   11dc0:	strbeq	ip, [r0, #4]
   11dc4:	ldrbne	lr, [r0, #4]
   11dc8:	addne	ip, ip, lr, lsl #4
   11dcc:	strbne	ip, [r3]
   11dd0:	ldrne	ip, [r4]
   11dd4:	addne	r3, r3, #1
   11dd8:	addne	ip, ip, #1
   11ddc:	strne	ip, [r4]
   11de0:	ldrb	ip, [r0, #5]
   11de4:	eor	ip, ip, #1
   11de8:	strb	ip, [r0, #5]
   11dec:	cmp	r2, r1
   11df0:	bne	11d90 <__assert_fail@plt+0xe30>
   11df4:	mov	r0, #1
   11df8:	pop	{r4, pc}
   11dfc:	mov	r0, #0
   11e00:	pop	{r4, pc}
   11e04:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e08:	mov	lr, #0
   11e0c:	ldr	r6, [sp, #48]	; 0x30
   11e10:	cmp	r2, #0
   11e14:	str	lr, [r6]
   11e18:	beq	11f20 <__assert_fail@plt+0xfc0>
   11e1c:	ldr	fp, [pc, #272]	; 11f34 <__assert_fail@plt+0xfd4>
   11e20:	ldr	sl, [pc, #272]	; 11f38 <__assert_fail@plt+0xfd8>
   11e24:	ldr	r7, [pc, #272]	; 11f3c <__assert_fail@plt+0xfdc>
   11e28:	mov	ip, r3
   11e2c:	add	r3, r1, r2
   11e30:	str	r3, [sp, #4]
   11e34:	ldr	r3, [sp, #4]
   11e38:	cmp	r1, r3
   11e3c:	ldreq	r3, [r0, #4]
   11e40:	streq	r3, [r0]
   11e44:	moveq	r0, #1
   11e48:	beq	11e68 <__assert_fail@plt+0xf08>
   11e4c:	ldrb	r3, [r1], #1
   11e50:	cmp	r3, #10
   11e54:	beq	11e34 <__assert_fail@plt+0xed4>
   11e58:	sub	r2, r3, #33	; 0x21
   11e5c:	cmp	r2, #92	; 0x5c
   11e60:	bls	11e70 <__assert_fail@plt+0xf10>
   11e64:	mov	r0, #0
   11e68:	add	sp, sp, #12
   11e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e70:	add	r3, fp, r3
   11e74:	ldrsb	r4, [r3, #-17]	; 0xffffffef
   11e78:	cmp	r4, #0
   11e7c:	blt	11e64 <__assert_fail@plt+0xf04>
   11e80:	ldr	r3, [r0, #4]
   11e84:	add	r2, r3, #1
   11e88:	add	r3, r0, r3
   11e8c:	cmp	r2, #5
   11e90:	str	r2, [r0, #4]
   11e94:	strb	r4, [r3, #8]
   11e98:	bne	11e34 <__assert_fail@plt+0xed4>
   11e9c:	ldrb	r4, [r0, #10]
   11ea0:	ldr	r5, [pc, #152]	; 11f40 <__assert_fail@plt+0xfe0>
   11ea4:	ldrb	r2, [r0, #9]
   11ea8:	ldrb	r3, [r0, #11]
   11eac:	mul	r4, r5, r4
   11eb0:	mla	r4, sl, r2, r4
   11eb4:	mov	r2, #85	; 0x55
   11eb8:	smlabb	r4, r2, r3, r4
   11ebc:	ldrb	r2, [r0, #8]
   11ec0:	ldrb	r3, [r0, #12]
   11ec4:	add	r4, r4, r3
   11ec8:	umull	r2, r3, r2, r7
   11ecc:	adds	r2, r2, r4
   11ed0:	adc	r3, r3, r4, asr #31
   11ed4:	lsr	r8, r2, #24
   11ed8:	orr	r8, r8, r3, lsl #8
   11edc:	asr	r9, r3, #24
   11ee0:	bic	r4, r8, #255	; 0xff
   11ee4:	mov	r5, r9
   11ee8:	orrs	r4, r4, r5
   11eec:	bne	11e64 <__assert_fail@plt+0xf04>
   11ef0:	lsr	r3, r2, #16
   11ef4:	strb	r3, [ip, #1]
   11ef8:	lsr	r3, r2, #8
   11efc:	strb	r3, [ip, #2]
   11f00:	ldr	r3, [r6]
   11f04:	strb	r8, [ip]
   11f08:	add	r3, r3, #4
   11f0c:	strb	r2, [ip, #3]
   11f10:	str	r3, [r6]
   11f14:	add	ip, ip, #4
   11f18:	str	lr, [r0, #4]
   11f1c:	b	11e34 <__assert_fail@plt+0xed4>
   11f20:	ldr	r0, [r0, #4]
   11f24:	cmp	r0, #0
   11f28:	movgt	r0, #0
   11f2c:	movle	r0, #1
   11f30:	b	11e68 <__assert_fail@plt+0xf08>
   11f34:	andeq	r6, r1, r4, lsl #12
   11f38:	andeq	r5, r9, sp, ror #29
   11f3c:	tsteq	ip, #-1325400064	; 0xb1000000
   11f40:	andeq	r1, r0, r9, lsr ip
   11f44:	push	{r4, r5, r6, lr}
   11f48:	cmp	r2, #0
   11f4c:	ldr	r6, [sp, #16]
   11f50:	mov	lr, #0
   11f54:	addne	r2, r1, r2
   11f58:	str	lr, [r6]
   11f5c:	bne	11fd4 <__assert_fail@plt+0x1074>
   11f60:	ldr	r0, [r0]
   11f64:	clz	r0, r0
   11f68:	lsr	r0, r0, #5
   11f6c:	pop	{r4, r5, r6, pc}
   11f70:	ldrb	ip, [r1], #1
   11f74:	cmp	ip, #10
   11f78:	beq	11fd4 <__assert_fail@plt+0x1074>
   11f7c:	sub	r4, ip, #48	; 0x30
   11f80:	cmp	r4, #1
   11f84:	bhi	11fe4 <__assert_fail@plt+0x1084>
   11f88:	ldr	r4, [r0]
   11f8c:	sub	r5, ip, #49	; 0x31
   11f90:	ldrb	ip, [r0, #4]
   11f94:	clz	r5, r5
   11f98:	lsr	r5, r5, #5
   11f9c:	orr	ip, ip, r5, lsl r4
   11fa0:	add	r4, r4, #1
   11fa4:	uxtb	ip, ip
   11fa8:	cmp	r4, #8
   11fac:	strb	ip, [r0, #4]
   11fb0:	str	r4, [r0]
   11fb4:	bne	11fd4 <__assert_fail@plt+0x1074>
   11fb8:	strb	ip, [r3]
   11fbc:	strb	lr, [r0, #4]
   11fc0:	ldr	ip, [r6]
   11fc4:	add	r3, r3, #1
   11fc8:	add	ip, ip, #1
   11fcc:	str	ip, [r6]
   11fd0:	str	lr, [r0]
   11fd4:	cmp	r1, r2
   11fd8:	bne	11f70 <__assert_fail@plt+0x1010>
   11fdc:	mov	r0, #1
   11fe0:	pop	{r4, r5, r6, pc}
   11fe4:	mov	r0, #0
   11fe8:	pop	{r4, r5, r6, pc}
   11fec:	push	{r4, r5, r6, lr}
   11ff0:	cmp	r2, #0
   11ff4:	ldr	r5, [sp, #16]
   11ff8:	mov	ip, #0
   11ffc:	addne	r2, r1, r2
   12000:	str	ip, [r5]
   12004:	movne	r6, #8
   12008:	bne	1208c <__assert_fail@plt+0x112c>
   1200c:	ldr	r0, [r0]
   12010:	clz	r0, r0
   12014:	lsr	r0, r0, #5
   12018:	pop	{r4, r5, r6, pc}
   1201c:	ldrb	lr, [r1], #1
   12020:	cmp	lr, #10
   12024:	beq	1208c <__assert_fail@plt+0x112c>
   12028:	sub	ip, lr, #48	; 0x30
   1202c:	cmp	ip, #1
   12030:	bhi	1209c <__assert_fail@plt+0x113c>
   12034:	ldr	ip, [r0]
   12038:	sub	r4, lr, #49	; 0x31
   1203c:	cmp	ip, #0
   12040:	streq	r6, [r0]
   12044:	ldr	ip, [r0]
   12048:	ldrb	lr, [r0, #4]
   1204c:	sub	ip, ip, #1
   12050:	clz	r4, r4
   12054:	lsr	r4, r4, #5
   12058:	cmp	ip, #0
   1205c:	orr	lr, lr, r4, lsl ip
   12060:	str	ip, [r0]
   12064:	uxtb	lr, lr
   12068:	strb	lr, [r0, #4]
   1206c:	bne	1208c <__assert_fail@plt+0x112c>
   12070:	strb	lr, [r3]
   12074:	strb	ip, [r0, #4]
   12078:	ldr	lr, [r5]
   1207c:	add	r3, r3, #1
   12080:	add	lr, lr, #1
   12084:	str	lr, [r5]
   12088:	str	ip, [r0]
   1208c:	cmp	r2, r1
   12090:	bne	1201c <__assert_fail@plt+0x10bc>
   12094:	mov	r0, #1
   12098:	pop	{r4, r5, r6, pc}
   1209c:	mov	r0, #0
   120a0:	pop	{r4, r5, r6, pc}
   120a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120a8:	sub	sp, sp, #28
   120ac:	mov	r5, #0
   120b0:	str	r3, [sp, #12]
   120b4:	add	r3, r0, r1
   120b8:	str	r3, [sp, #8]
   120bc:	mov	r8, r0
   120c0:	mov	r9, r2
   120c4:	mov	r3, r5
   120c8:	ldr	r2, [sp, #8]
   120cc:	cmp	r8, r2
   120d0:	bne	120fc <__assert_fail@plt+0x119c>
   120d4:	cmp	r3, #0
   120d8:	beq	121d8 <__assert_fail@plt+0x1278>
   120dc:	mov	r2, #5
   120e0:	ldr	r1, [pc, #248]	; 121e0 <__assert_fail@plt+0x1280>
   120e4:	mov	r0, #0
   120e8:	bl	10d8c <dcgettext@plt>
   120ec:	mov	r1, #0
   120f0:	mov	r2, r0
   120f4:	mov	r0, #1
   120f8:	bl	10df8 <error@plt>
   120fc:	add	r2, sp, #24
   12100:	add	r4, r3, #1
   12104:	add	r3, r2, r3
   12108:	ldrb	r2, [r8], #1
   1210c:	cmp	r4, #4
   12110:	strb	r2, [r3, #-4]
   12114:	bne	121d0 <__assert_fail@plt+0x1270>
   12118:	ldrb	r2, [sp, #20]
   1211c:	mov	r1, #0
   12120:	str	r1, [sp, #4]
   12124:	lsl	r3, r2, #24
   12128:	str	r3, [sp]
   1212c:	ldrb	r3, [sp, #21]
   12130:	ldrd	r6, [sp]
   12134:	ldrb	r2, [sp, #23]
   12138:	lsl	r3, r3, #16
   1213c:	adds	r6, r6, r3
   12140:	adc	r7, r7, r3, asr #31
   12144:	ldrb	r3, [sp, #22]
   12148:	lsl	r3, r3, #8
   1214c:	adds	r6, r6, r3
   12150:	adc	r7, r7, r3, asr #31
   12154:	mov	r3, #0
   12158:	adds	r6, r6, r2
   1215c:	adc	r7, r7, r3
   12160:	mov	r2, #85	; 0x55
   12164:	mov	r3, #0
   12168:	mov	r0, r6
   1216c:	mov	r1, r7
   12170:	bl	16370 <__assert_fail@plt+0x5410>
   12174:	ldr	r2, [sp, #12]
   12178:	add	r3, r5, r4
   1217c:	cmp	r2, r3
   12180:	mov	fp, r0
   12184:	mov	sl, r1
   12188:	ble	121b0 <__assert_fail@plt+0x1250>
   1218c:	mov	r2, #85	; 0x55
   12190:	mov	r3, #0
   12194:	mov	r0, r6
   12198:	mov	r1, r7
   1219c:	bl	16370 <__assert_fail@plt+0x5410>
   121a0:	ldr	r3, [pc, #60]	; 121e4 <__assert_fail@plt+0x1284>
   121a4:	add	r2, r3, r2
   121a8:	ldrb	r3, [r2, #109]	; 0x6d
   121ac:	strb	r3, [r9, r4]
   121b0:	sub	r4, r4, #1
   121b4:	cmn	r4, #1
   121b8:	mov	r6, fp
   121bc:	mov	r7, sl
   121c0:	bne	12160 <__assert_fail@plt+0x1200>
   121c4:	add	r9, r9, #5
   121c8:	add	r5, r5, #5
   121cc:	mov	r4, #0
   121d0:	mov	r3, r4
   121d4:	b	120c8 <__assert_fail@plt+0x1168>
   121d8:	add	sp, sp, #28
   121dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e0:	andeq	r6, r1, r3, ror r8
   121e4:	andeq	r6, r1, r4, lsl #12
   121e8:	push	{r4, r5, r6, lr}
   121ec:	mov	r4, r2
   121f0:	mov	r5, r3
   121f4:	bl	12910 <__assert_fail@plt+0x19b0>
   121f8:	ldr	r3, [pc, #68]	; 12244 <__assert_fail@plt+0x12e4>
   121fc:	mov	r2, r4
   12200:	add	r5, r4, r5
   12204:	cmp	r2, r5
   12208:	bne	12210 <__assert_fail@plt+0x12b0>
   1220c:	pop	{r4, r5, r6, pc}
   12210:	ldrb	r1, [r2], #1
   12214:	sub	r0, r1, #50	; 0x32
   12218:	cmp	r0, #40	; 0x28
   1221c:	bls	12234 <__assert_fail@plt+0x12d4>
   12220:	ldr	r3, [pc, #32]	; 12248 <__assert_fail@plt+0x12e8>
   12224:	mov	r2, #452	; 0x1c4
   12228:	ldr	r1, [pc, #28]	; 1224c <__assert_fail@plt+0x12ec>
   1222c:	ldr	r0, [pc, #28]	; 12250 <__assert_fail@plt+0x12f0>
   12230:	bl	10f60 <__assert_fail@plt>
   12234:	add	r1, r3, r1
   12238:	ldrb	r1, [r1, #161]	; 0xa1
   1223c:	strb	r1, [r2, #-1]
   12240:	b	12204 <__assert_fail@plt+0x12a4>
   12244:	andeq	r6, r1, r4, lsl #12
   12248:	andeq	r6, r1, r6, asr #13
   1224c:	andeq	r6, r1, fp, lsr #17
   12250:			; <UNDEFINED> instruction: 0x000168b8
   12254:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12258:	mov	r7, r3
   1225c:	ldr	r3, [r0, #20]
   12260:	mov	r4, r0
   12264:	cmp	r2, r3
   12268:	mov	r8, r1
   1226c:	mov	r5, r2
   12270:	ldr	r6, [sp, #32]
   12274:	ble	12290 <__assert_fail@plt+0x1330>
   12278:	lsl	r1, r2, #1
   1227c:	str	r1, [r0, #20]
   12280:	mov	r2, #1
   12284:	ldr	r0, [r0, #16]
   12288:	bl	15364 <__assert_fail@plt+0x4404>
   1228c:	str	r0, [r4, #16]
   12290:	mov	r1, r8
   12294:	mov	r2, r5
   12298:	ldr	r0, [r4, #16]
   1229c:	bl	10d50 <memcpy@plt>
   122a0:	ldr	r3, [r4, #16]
   122a4:	mov	r0, #47	; 0x2f
   122a8:	add	r1, r3, r5
   122ac:	mov	ip, #43	; 0x2b
   122b0:	cmp	r3, r1
   122b4:	bne	122dc <__assert_fail@plt+0x137c>
   122b8:	mov	r3, r7
   122bc:	str	r6, [sp]
   122c0:	mov	r2, r5
   122c4:	ldr	r1, [r4, #16]
   122c8:	add	r0, r4, #4
   122cc:	bl	131ec <__assert_fail@plt+0x228c>
   122d0:	ldr	r3, [r4, #4]
   122d4:	str	r3, [r4]
   122d8:	b	122f4 <__assert_fail@plt+0x1394>
   122dc:	ldrb	r2, [r3], #1
   122e0:	and	lr, r2, #251	; 0xfb
   122e4:	cmp	lr, #43	; 0x2b
   122e8:	bne	122fc <__assert_fail@plt+0x139c>
   122ec:	mov	r0, #0
   122f0:	str	r0, [r6]
   122f4:	add	sp, sp, #8
   122f8:	pop	{r4, r5, r6, r7, r8, pc}
   122fc:	cmp	r2, #45	; 0x2d
   12300:	strbeq	ip, [r3, #-1]
   12304:	beq	122b0 <__assert_fail@plt+0x1350>
   12308:	cmp	r2, #95	; 0x5f
   1230c:	strbeq	r0, [r3, #-1]
   12310:	b	122b0 <__assert_fail@plt+0x1350>
   12314:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12318:	mov	r7, r3
   1231c:	ldr	r3, [r0, #20]
   12320:	mov	r4, r0
   12324:	cmp	r2, r3
   12328:	mov	r5, r1
   1232c:	mov	r6, r2
   12330:	ble	1234c <__assert_fail@plt+0x13ec>
   12334:	lsl	r1, r2, #1
   12338:	str	r1, [r0, #20]
   1233c:	mov	r2, #1
   12340:	ldr	r0, [r0, #16]
   12344:	bl	15364 <__assert_fail@plt+0x4404>
   12348:	str	r0, [r4, #16]
   1234c:	ldr	r2, [r4, #16]
   12350:	ldr	r9, [pc, #96]	; 123b8 <__assert_fail@plt+0x1458>
   12354:	sub	r1, r5, #1
   12358:	add	r8, r2, r6
   1235c:	cmp	r2, r8
   12360:	bne	12390 <__assert_fail@plt+0x1430>
   12364:	ldr	r3, [sp, #40]	; 0x28
   12368:	mov	r2, r6
   1236c:	str	r3, [sp]
   12370:	ldr	r1, [r4, #16]
   12374:	mov	r3, r7
   12378:	add	r0, r4, #4
   1237c:	bl	12bbc <__assert_fail@plt+0x1c5c>
   12380:	ldr	r3, [r4, #4]
   12384:	str	r3, [r4]
   12388:	add	sp, sp, #12
   1238c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12390:	ldrb	r5, [r1, #1]!
   12394:	mov	r0, r5
   12398:	bl	11998 <__assert_fail@plt+0xa38>
   1239c:	cmp	r0, #0
   123a0:	addne	r5, r9, r5
   123a4:	strbeq	r5, [r2]
   123a8:	ldrbne	r3, [r5, #204]	; 0xcc
   123ac:	add	r2, r2, #1
   123b0:	strbne	r3, [r2, #-1]
   123b4:	b	1235c <__assert_fail@plt+0x13fc>
   123b8:	andeq	r6, r1, r4, lsl #12
   123bc:	subs	r5, r0, #0
   123c0:	push	{r7, lr}
   123c4:	sub	sp, sp, #56	; 0x38
   123c8:	ldr	r4, [pc, #740]	; 126b4 <__assert_fail@plt+0x1754>
   123cc:	beq	12404 <__assert_fail@plt+0x14a4>
   123d0:	ldr	r3, [pc, #736]	; 126b8 <__assert_fail@plt+0x1758>
   123d4:	mov	r2, #5
   123d8:	ldr	r1, [pc, #732]	; 126bc <__assert_fail@plt+0x175c>
   123dc:	mov	r0, #0
   123e0:	ldr	r6, [r3]
   123e4:	bl	10d8c <dcgettext@plt>
   123e8:	ldr	r3, [r4]
   123ec:	mov	r1, #1
   123f0:	mov	r2, r0
   123f4:	mov	r0, r6
   123f8:	bl	10eac <__fprintf_chk@plt>
   123fc:	mov	r0, r5
   12400:	bl	10e4c <exit@plt>
   12404:	mov	r2, #5
   12408:	ldr	r1, [pc, #688]	; 126c0 <__assert_fail@plt+0x1760>
   1240c:	bl	10d8c <dcgettext@plt>
   12410:	ldr	r2, [r4]
   12414:	ldr	r4, [pc, #680]	; 126c4 <__assert_fail@plt+0x1764>
   12418:	ldr	r8, [pc, #680]	; 126c8 <__assert_fail@plt+0x1768>
   1241c:	mov	r6, r5
   12420:	mov	r1, r0
   12424:	mov	r0, #1
   12428:	bl	10e94 <__printf_chk@plt>
   1242c:	mov	r2, #5
   12430:	ldr	r1, [pc, #660]	; 126cc <__assert_fail@plt+0x176c>
   12434:	mov	r0, r5
   12438:	bl	10d8c <dcgettext@plt>
   1243c:	ldr	r1, [r4]
   12440:	bl	10cf0 <fputs_unlocked@plt>
   12444:	mov	r2, #5
   12448:	ldr	r1, [pc, #640]	; 126d0 <__assert_fail@plt+0x1770>
   1244c:	mov	r0, r5
   12450:	bl	10d8c <dcgettext@plt>
   12454:	ldr	r1, [r4]
   12458:	bl	10cf0 <fputs_unlocked@plt>
   1245c:	mov	r2, #5
   12460:	ldr	r1, [pc, #620]	; 126d4 <__assert_fail@plt+0x1774>
   12464:	mov	r0, r5
   12468:	bl	10d8c <dcgettext@plt>
   1246c:	ldr	r1, [r4]
   12470:	bl	10cf0 <fputs_unlocked@plt>
   12474:	mov	r2, #5
   12478:	ldr	r1, [pc, #600]	; 126d8 <__assert_fail@plt+0x1778>
   1247c:	mov	r0, r5
   12480:	bl	10d8c <dcgettext@plt>
   12484:	ldr	r1, [r4]
   12488:	bl	10cf0 <fputs_unlocked@plt>
   1248c:	mov	r2, #5
   12490:	ldr	r1, [pc, #580]	; 126dc <__assert_fail@plt+0x177c>
   12494:	mov	r0, r5
   12498:	bl	10d8c <dcgettext@plt>
   1249c:	ldr	r1, [r4]
   124a0:	bl	10cf0 <fputs_unlocked@plt>
   124a4:	mov	r2, #5
   124a8:	ldr	r1, [pc, #560]	; 126e0 <__assert_fail@plt+0x1780>
   124ac:	mov	r0, r5
   124b0:	bl	10d8c <dcgettext@plt>
   124b4:	ldr	r1, [r4]
   124b8:	bl	10cf0 <fputs_unlocked@plt>
   124bc:	mov	r2, #5
   124c0:	ldr	r1, [pc, #540]	; 126e4 <__assert_fail@plt+0x1784>
   124c4:	mov	r0, r5
   124c8:	bl	10d8c <dcgettext@plt>
   124cc:	ldr	r1, [r4]
   124d0:	bl	10cf0 <fputs_unlocked@plt>
   124d4:	mov	r2, #5
   124d8:	ldr	r1, [pc, #520]	; 126e8 <__assert_fail@plt+0x1788>
   124dc:	mov	r0, r5
   124e0:	bl	10d8c <dcgettext@plt>
   124e4:	ldr	r1, [r4]
   124e8:	bl	10cf0 <fputs_unlocked@plt>
   124ec:	mov	r2, #5
   124f0:	ldr	r1, [pc, #500]	; 126ec <__assert_fail@plt+0x178c>
   124f4:	mov	r0, r5
   124f8:	bl	10d8c <dcgettext@plt>
   124fc:	ldr	r1, [r4]
   12500:	bl	10cf0 <fputs_unlocked@plt>
   12504:	mov	r2, #5
   12508:	ldr	r1, [pc, #480]	; 126f0 <__assert_fail@plt+0x1790>
   1250c:	mov	r0, r5
   12510:	bl	10d8c <dcgettext@plt>
   12514:	ldr	r1, [r4]
   12518:	bl	10cf0 <fputs_unlocked@plt>
   1251c:	mov	r2, #5
   12520:	ldr	r1, [pc, #460]	; 126f4 <__assert_fail@plt+0x1794>
   12524:	mov	r0, r5
   12528:	bl	10d8c <dcgettext@plt>
   1252c:	ldr	r1, [r4]
   12530:	bl	10cf0 <fputs_unlocked@plt>
   12534:	mov	r2, #5
   12538:	ldr	r1, [pc, #440]	; 126f8 <__assert_fail@plt+0x1798>
   1253c:	mov	r0, r5
   12540:	bl	10d8c <dcgettext@plt>
   12544:	ldr	r1, [r4]
   12548:	bl	10cf0 <fputs_unlocked@plt>
   1254c:	mov	r2, #5
   12550:	ldr	r1, [pc, #420]	; 126fc <__assert_fail@plt+0x179c>
   12554:	mov	r0, r5
   12558:	bl	10d8c <dcgettext@plt>
   1255c:	ldr	r1, [r4]
   12560:	bl	10cf0 <fputs_unlocked@plt>
   12564:	mov	r2, #5
   12568:	ldr	r1, [pc, #400]	; 12700 <__assert_fail@plt+0x17a0>
   1256c:	mov	r0, r5
   12570:	bl	10d8c <dcgettext@plt>
   12574:	ldr	r1, [r4]
   12578:	bl	10cf0 <fputs_unlocked@plt>
   1257c:	mov	r2, #5
   12580:	ldr	r1, [pc, #380]	; 12704 <__assert_fail@plt+0x17a4>
   12584:	mov	r0, r5
   12588:	bl	10d8c <dcgettext@plt>
   1258c:	ldr	r1, [r4]
   12590:	bl	10cf0 <fputs_unlocked@plt>
   12594:	ldr	lr, [pc, #364]	; 12708 <__assert_fail@plt+0x17a8>
   12598:	mov	ip, sp
   1259c:	ldm	lr!, {r0, r1, r2, r3}
   125a0:	stmia	ip!, {r0, r1, r2, r3}
   125a4:	ldm	lr!, {r0, r1, r2, r3}
   125a8:	stmia	ip!, {r0, r1, r2, r3}
   125ac:	ldm	lr!, {r0, r1, r2, r3}
   125b0:	stmia	ip!, {r0, r1, r2, r3}
   125b4:	ldm	lr, {r0, r1}
   125b8:	stm	ip, {r0, r1}
   125bc:	ldr	r1, [sp, r6]
   125c0:	add	r7, sp, r6
   125c4:	cmp	r1, #0
   125c8:	bne	1266c <__assert_fail@plt+0x170c>
   125cc:	ldr	r6, [r7, #4]
   125d0:	ldr	r7, [pc, #240]	; 126c8 <__assert_fail@plt+0x1768>
   125d4:	cmp	r6, #0
   125d8:	mov	r2, #5
   125dc:	ldr	r1, [pc, #296]	; 1270c <__assert_fail@plt+0x17ac>
   125e0:	mov	r0, #0
   125e4:	moveq	r6, r7
   125e8:	bl	10d8c <dcgettext@plt>
   125ec:	ldr	r3, [pc, #284]	; 12710 <__assert_fail@plt+0x17b0>
   125f0:	ldr	r2, [pc, #284]	; 12714 <__assert_fail@plt+0x17b4>
   125f4:	mov	r1, r0
   125f8:	mov	r0, #1
   125fc:	bl	10e94 <__printf_chk@plt>
   12600:	mov	r1, #0
   12604:	mov	r0, #5
   12608:	bl	10ee8 <setlocale@plt>
   1260c:	cmp	r0, #0
   12610:	bne	12684 <__assert_fail@plt+0x1724>
   12614:	mov	r2, #5
   12618:	ldr	r1, [pc, #248]	; 12718 <__assert_fail@plt+0x17b8>
   1261c:	mov	r0, #0
   12620:	bl	10d8c <dcgettext@plt>
   12624:	ldr	r3, [pc, #156]	; 126c8 <__assert_fail@plt+0x1768>
   12628:	ldr	r2, [pc, #224]	; 12710 <__assert_fail@plt+0x17b0>
   1262c:	mov	r1, r0
   12630:	mov	r0, #1
   12634:	bl	10e94 <__printf_chk@plt>
   12638:	mov	r2, #5
   1263c:	ldr	r1, [pc, #216]	; 1271c <__assert_fail@plt+0x17bc>
   12640:	mov	r0, #0
   12644:	bl	10d8c <dcgettext@plt>
   12648:	ldr	r2, [pc, #208]	; 12720 <__assert_fail@plt+0x17c0>
   1264c:	cmp	r6, r7
   12650:	ldr	r3, [pc, #204]	; 12724 <__assert_fail@plt+0x17c4>
   12654:	moveq	r3, r2
   12658:	mov	r2, r6
   1265c:	mov	r1, r0
   12660:	mov	r0, #1
   12664:	bl	10e94 <__printf_chk@plt>
   12668:	b	123fc <__assert_fail@plt+0x149c>
   1266c:	mov	r0, r8
   12670:	bl	10d08 <strcmp@plt>
   12674:	add	r6, r6, #8
   12678:	cmp	r0, #0
   1267c:	bne	125bc <__assert_fail@plt+0x165c>
   12680:	b	125cc <__assert_fail@plt+0x166c>
   12684:	mov	r2, #3
   12688:	ldr	r1, [pc, #152]	; 12728 <__assert_fail@plt+0x17c8>
   1268c:	bl	10f3c <strncmp@plt>
   12690:	cmp	r0, #0
   12694:	beq	12614 <__assert_fail@plt+0x16b4>
   12698:	mov	r2, #5
   1269c:	ldr	r1, [pc, #136]	; 1272c <__assert_fail@plt+0x17cc>
   126a0:	mov	r0, #0
   126a4:	bl	10d8c <dcgettext@plt>
   126a8:	ldr	r1, [r4]
   126ac:	bl	10cf0 <fputs_unlocked@plt>
   126b0:	b	12614 <__assert_fail@plt+0x16b4>
   126b4:	andeq	r8, r2, ip, ror r1
   126b8:	andeq	r8, r2, r8, asr #2
   126bc:	ldrdeq	r6, [r1], -r8
   126c0:	strdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   126c4:	andeq	r8, r2, r4, asr r1
   126c8:	ldrdeq	r6, [r1], -r1
   126cc:	andeq	r6, r1, sp, lsl r9
   126d0:	andeq	r6, r1, r3, ror #18
   126d4:	muleq	r1, fp, r9
   126d8:	andeq	r6, r1, r6, ror #19
   126dc:	andeq	r6, r1, ip, lsr #20
   126e0:	andeq	r6, r1, r3, ror sl
   126e4:			; <UNDEFINED> instruction: 0x00016ab9
   126e8:	andeq	r6, r1, r3, lsl #22
   126ec:	andeq	r6, r1, sp, lsr fp
   126f0:	andeq	r6, r1, r7, lsl #23
   126f4:	ldrdeq	r6, [r1], -r2
   126f8:	andeq	r6, r1, r4, asr #25
   126fc:	andeq	r6, r1, r2, lsr #27
   12700:	andeq	r6, r1, pc, asr #27
   12704:	andeq	r6, r1, r5, lsl #28
   12708:	andeq	r6, r1, ip, lsr #14
   1270c:	andeq	r6, r1, fp, asr #29
   12710:	andeq	r6, r1, r2, ror #29
   12714:	andeq	r6, r1, sl, lsl #30
   12718:	andeq	r6, r1, r3, ror #30
   1271c:	andeq	r6, r1, lr, ror pc
   12720:	andeq	r7, r1, pc, rrx
   12724:			; <UNDEFINED> instruction: 0x00016fb0
   12728:	andeq	r6, r1, r8, lsl pc
   1272c:	andeq	r6, r1, ip, lsl pc
   12730:	cmp	r1, #7
   12734:	ble	12904 <__assert_fail@plt+0x19a4>
   12738:	push	{r4, r5, r6, lr}
   1273c:	ldrb	r1, [r0]
   12740:	ldr	ip, [pc, #452]	; 1290c <__assert_fail@plt+0x19ac>
   12744:	ldrsb	r4, [ip, r1]
   12748:	cmp	r4, #0
   1274c:	blt	12800 <__assert_fail@plt+0x18a0>
   12750:	ldrb	r1, [r0, #1]
   12754:	ldrsb	r5, [ip, r1]
   12758:	cmp	r5, #0
   1275c:	blt	12800 <__assert_fail@plt+0x18a0>
   12760:	ldr	lr, [r3]
   12764:	ldr	r1, [r2]
   12768:	cmp	lr, #0
   1276c:	beq	1278c <__assert_fail@plt+0x182c>
   12770:	asr	lr, r5, #2
   12774:	orr	lr, lr, r4, lsl #3
   12778:	strb	lr, [r1]
   1277c:	ldr	lr, [r3]
   12780:	add	r1, r1, #1
   12784:	sub	lr, lr, #1
   12788:	str	lr, [r3]
   1278c:	ldrb	lr, [r0, #2]
   12790:	cmp	lr, #61	; 0x3d
   12794:	bne	127e0 <__assert_fail@plt+0x1880>
   12798:	ldrb	r3, [r0, #3]
   1279c:	cmp	r3, #61	; 0x3d
   127a0:	bne	127fc <__assert_fail@plt+0x189c>
   127a4:	ldrb	r3, [r0, #4]
   127a8:	cmp	r3, #61	; 0x3d
   127ac:	bne	127fc <__assert_fail@plt+0x189c>
   127b0:	ldrb	r3, [r0, #5]
   127b4:	cmp	r3, #61	; 0x3d
   127b8:	bne	127fc <__assert_fail@plt+0x189c>
   127bc:	ldrb	r3, [r0, #6]
   127c0:	cmp	r3, #61	; 0x3d
   127c4:	bne	127fc <__assert_fail@plt+0x189c>
   127c8:	ldrb	r3, [r0, #7]
   127cc:	cmp	r3, #61	; 0x3d
   127d0:	bne	127fc <__assert_fail@plt+0x189c>
   127d4:	str	r1, [r2]
   127d8:	mov	r0, #1
   127dc:	pop	{r4, r5, r6, pc}
   127e0:	ldrsb	lr, [ip, lr]
   127e4:	cmp	lr, #0
   127e8:	blt	127fc <__assert_fail@plt+0x189c>
   127ec:	ldrb	r4, [r0, #3]
   127f0:	ldrsb	r4, [ip, r4]
   127f4:	cmp	r4, #0
   127f8:	bge	12808 <__assert_fail@plt+0x18a8>
   127fc:	str	r1, [r2]
   12800:	mov	r0, #0
   12804:	pop	{r4, r5, r6, pc}
   12808:	ldr	r6, [r3]
   1280c:	cmp	r6, #0
   12810:	beq	12834 <__assert_fail@plt+0x18d4>
   12814:	lsl	lr, lr, #1
   12818:	orr	lr, lr, r5, lsl #6
   1281c:	orr	lr, lr, r4, asr #4
   12820:	strb	lr, [r1]
   12824:	ldr	lr, [r3]
   12828:	add	r1, r1, #1
   1282c:	sub	lr, lr, #1
   12830:	str	lr, [r3]
   12834:	ldrb	lr, [r0, #4]
   12838:	cmp	lr, #61	; 0x3d
   1283c:	beq	127b0 <__assert_fail@plt+0x1850>
   12840:	ldrsb	r5, [ip, lr]
   12844:	cmp	r5, #0
   12848:	blt	127fc <__assert_fail@plt+0x189c>
   1284c:	ldr	lr, [r3]
   12850:	cmp	lr, #0
   12854:	beq	12874 <__assert_fail@plt+0x1914>
   12858:	asr	lr, r5, #1
   1285c:	orr	lr, lr, r4, lsl #4
   12860:	strb	lr, [r1]
   12864:	ldr	lr, [r3]
   12868:	add	r1, r1, #1
   1286c:	sub	lr, lr, #1
   12870:	str	lr, [r3]
   12874:	ldrb	lr, [r0, #5]
   12878:	cmp	lr, #61	; 0x3d
   1287c:	beq	127bc <__assert_fail@plt+0x185c>
   12880:	ldrsb	lr, [ip, lr]
   12884:	cmp	lr, #0
   12888:	blt	127fc <__assert_fail@plt+0x189c>
   1288c:	ldrb	r4, [r0, #6]
   12890:	ldrsb	r4, [ip, r4]
   12894:	cmp	r4, #0
   12898:	blt	127fc <__assert_fail@plt+0x189c>
   1289c:	ldr	r6, [r3]
   128a0:	cmp	r6, #0
   128a4:	beq	128c8 <__assert_fail@plt+0x1968>
   128a8:	lsl	lr, lr, #2
   128ac:	orr	lr, lr, r5, lsl #7
   128b0:	orr	lr, lr, r4, asr #3
   128b4:	strb	lr, [r1]
   128b8:	ldr	lr, [r3]
   128bc:	add	r1, r1, #1
   128c0:	sub	lr, lr, #1
   128c4:	str	lr, [r3]
   128c8:	ldrb	r0, [r0, #7]
   128cc:	cmp	r0, #61	; 0x3d
   128d0:	beq	127d4 <__assert_fail@plt+0x1874>
   128d4:	ldrsb	r0, [ip, r0]
   128d8:	cmp	r0, #0
   128dc:	blt	127fc <__assert_fail@plt+0x189c>
   128e0:	ldr	ip, [r3]
   128e4:	cmp	ip, #0
   128e8:	orrne	r0, r0, r4, lsl #5
   128ec:	strbne	r0, [r1]
   128f0:	ldrne	r0, [r3]
   128f4:	addne	r1, r1, #1
   128f8:	subne	r0, r0, #1
   128fc:	strne	r0, [r3]
   12900:	b	127d4 <__assert_fail@plt+0x1874>
   12904:	mov	r0, #0
   12908:	bx	lr
   1290c:	andeq	r7, r1, sl, lsr #2
   12910:	push	{r4, r5, r6, r7, lr}
   12914:	mov	r6, #0
   12918:	ldr	r4, [pc, #432]	; 12ad0 <__assert_fail@plt+0x1b70>
   1291c:	mov	r5, #61	; 0x3d
   12920:	cmp	r1, #0
   12924:	cmpne	r3, #0
   12928:	movne	ip, #1
   1292c:	moveq	ip, #0
   12930:	bne	12940 <__assert_fail@plt+0x19e0>
   12934:	cmp	r3, #0
   12938:	strbne	ip, [r2]
   1293c:	pop	{r4, r5, r6, r7, pc}
   12940:	ldrb	lr, [r0]
   12944:	cmp	r3, #1
   12948:	add	ip, r4, lr, lsr #3
   1294c:	ldrb	ip, [ip, #256]	; 0x100
   12950:	strb	ip, [r2]
   12954:	popeq	{r4, r5, r6, r7, pc}
   12958:	subs	ip, r1, #1
   1295c:	lsl	r7, lr, #2
   12960:	ldrbne	lr, [r0, #1]
   12964:	moveq	lr, r6
   12968:	lsrne	lr, lr, #6
   1296c:	add	lr, lr, r7
   12970:	and	lr, lr, #31
   12974:	add	lr, r4, lr
   12978:	cmp	r3, #2
   1297c:	ldrb	lr, [lr, #256]	; 0x100
   12980:	strb	lr, [r2, #1]
   12984:	popeq	{r4, r5, r6, r7, pc}
   12988:	cmp	ip, #0
   1298c:	moveq	lr, r5
   12990:	ldrbne	lr, [r0, #1]
   12994:	lslne	lr, lr, #26
   12998:	addne	lr, r4, lr, lsr #27
   1299c:	ldrbne	lr, [lr, #256]	; 0x100
   129a0:	cmp	r3, #3
   129a4:	strb	lr, [r2, #2]
   129a8:	popeq	{r4, r5, r6, r7, pc}
   129ac:	cmp	ip, #0
   129b0:	moveq	r1, r5
   129b4:	beq	129e0 <__assert_fail@plt+0x1a80>
   129b8:	subs	ip, r1, #2
   129bc:	ldrb	r7, [r0, #1]
   129c0:	ldrbne	lr, [r0, #2]
   129c4:	moveq	r1, r6
   129c8:	lsl	r7, r7, #4
   129cc:	lsrne	r1, lr, #4
   129d0:	add	r1, r1, r7
   129d4:	and	r1, r1, #31
   129d8:	add	r1, r4, r1
   129dc:	ldrb	r1, [r1, #256]	; 0x100
   129e0:	cmp	r3, #4
   129e4:	strb	r1, [r2, #3]
   129e8:	popeq	{r4, r5, r6, r7, pc}
   129ec:	cmp	ip, #0
   129f0:	moveq	r1, r5
   129f4:	beq	12a20 <__assert_fail@plt+0x1ac0>
   129f8:	subs	ip, ip, #1
   129fc:	ldrb	r1, [r0, #2]
   12a00:	ldrbne	lr, [r0, #3]
   12a04:	lsl	r7, r1, #1
   12a08:	lsrne	r1, lr, #7
   12a0c:	moveq	r1, r6
   12a10:	add	r1, r1, r7
   12a14:	and	r1, r1, #31
   12a18:	add	r1, r4, r1
   12a1c:	ldrb	r1, [r1, #256]	; 0x100
   12a20:	cmp	r3, #5
   12a24:	strb	r1, [r2, #4]
   12a28:	popeq	{r4, r5, r6, r7, pc}
   12a2c:	cmp	ip, #0
   12a30:	moveq	r1, r5
   12a34:	ldrbne	r1, [r0, #3]
   12a38:	lslne	r1, r1, #25
   12a3c:	addne	r1, r4, r1, lsr #27
   12a40:	ldrbne	r1, [r1, #256]	; 0x100
   12a44:	cmp	r3, #6
   12a48:	strb	r1, [r2, #5]
   12a4c:	popeq	{r4, r5, r6, r7, pc}
   12a50:	cmp	ip, #0
   12a54:	moveq	r1, r5
   12a58:	beq	12a84 <__assert_fail@plt+0x1b24>
   12a5c:	subs	ip, ip, #1
   12a60:	ldrb	r1, [r0, #3]
   12a64:	ldrbne	lr, [r0, #4]
   12a68:	lsl	r7, r1, #3
   12a6c:	lsrne	r1, lr, #5
   12a70:	moveq	r1, r6
   12a74:	add	r1, r1, r7
   12a78:	and	r1, r1, #31
   12a7c:	add	r1, r4, r1
   12a80:	ldrb	r1, [r1, #256]	; 0x100
   12a84:	cmp	r3, #7
   12a88:	strb	r1, [r2, #6]
   12a8c:	popeq	{r4, r5, r6, r7, pc}
   12a90:	cmp	ip, #0
   12a94:	moveq	r1, r5
   12a98:	ldrbne	r1, [r0, #4]
   12a9c:	add	r2, r2, #8
   12aa0:	andne	r1, r1, #31
   12aa4:	addne	r1, r4, r1
   12aa8:	ldrbne	r1, [r1, #256]	; 0x100
   12aac:	subs	r3, r3, #8
   12ab0:	strb	r1, [r2, #-1]
   12ab4:	popeq	{r4, r5, r6, r7, pc}
   12ab8:	cmp	ip, #0
   12abc:	beq	12ac8 <__assert_fail@plt+0x1b68>
   12ac0:	subs	ip, ip, #1
   12ac4:	addne	r0, r0, #5
   12ac8:	mov	r1, ip
   12acc:	b	12920 <__assert_fail@plt+0x19c0>
   12ad0:	andeq	r7, r1, sl, lsr #2
   12ad4:	push	{r4, r5, r6, r7, r8, lr}
   12ad8:	mov	r6, r1
   12adc:	mov	r8, r0
   12ae0:	mov	r1, #5
   12ae4:	mov	r0, r6
   12ae8:	mov	r7, r2
   12aec:	bl	16350 <__assert_fail@plt+0x53f0>
   12af0:	mov	r0, r6
   12af4:	adds	r4, r1, #0
   12af8:	mov	r1, #5
   12afc:	movne	r4, #1
   12b00:	bl	16130 <__assert_fail@plt+0x51d0>
   12b04:	adds	r4, r4, r0
   12b08:	bpl	12b50 <__assert_fail@plt+0x1bf0>
   12b0c:	cmn	r4, #1
   12b10:	moveq	r0, #0
   12b14:	beq	12b30 <__assert_fail@plt+0x1bd0>
   12b18:	mov	r1, r4
   12b1c:	mov	r0, #-2147483648	; 0x80000000
   12b20:	bl	16130 <__assert_fail@plt+0x51d0>
   12b24:	cmp	r0, #7
   12b28:	movgt	r0, #0
   12b2c:	movle	r0, #1
   12b30:	cmp	r0, #0
   12b34:	bne	12b40 <__assert_fail@plt+0x1be0>
   12b38:	cmp	r6, #0
   12b3c:	bge	12b60 <__assert_fail@plt+0x1c00>
   12b40:	mov	r5, #0
   12b44:	str	r5, [r7]
   12b48:	mov	r0, r5
   12b4c:	pop	{r4, r5, r6, r7, r8, pc}
   12b50:	cmn	r4, #-268435455	; 0xf0000001
   12b54:	movle	r0, #0
   12b58:	movgt	r0, #1
   12b5c:	b	12b30 <__assert_fail@plt+0x1bd0>
   12b60:	lsl	r4, r4, #3
   12b64:	add	r5, r4, #1
   12b68:	mov	r0, r5
   12b6c:	bl	15c68 <__assert_fail@plt+0x4d08>
   12b70:	cmp	r0, #0
   12b74:	mov	r2, r0
   12b78:	str	r0, [r7]
   12b7c:	beq	12b48 <__assert_fail@plt+0x1be8>
   12b80:	mov	r3, r5
   12b84:	mov	r1, r6
   12b88:	mov	r0, r8
   12b8c:	bl	12910 <__assert_fail@plt+0x19b0>
   12b90:	mov	r5, r4
   12b94:	b	12b48 <__assert_fail@plt+0x1be8>
   12b98:	ldr	r3, [pc, #12]	; 12bac <__assert_fail@plt+0x1c4c>
   12b9c:	ldrb	r0, [r3, r0]
   12ba0:	eor	r0, r0, #128	; 0x80
   12ba4:	lsr	r0, r0, #7
   12ba8:	bx	lr
   12bac:	andeq	r7, r1, sl, lsr #2
   12bb0:	mov	r3, #0
   12bb4:	str	r3, [r0]
   12bb8:	bx	lr
   12bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bc0:	sub	sp, sp, #28
   12bc4:	subs	r6, r0, #0
   12bc8:	ldr	sl, [sp, #64]	; 0x40
   12bcc:	str	r3, [sp, #12]
   12bd0:	clzne	r8, r2
   12bd4:	ldr	r3, [sl]
   12bd8:	lsrne	r8, r8, #5
   12bdc:	str	r3, [sp, #20]
   12be0:	movne	r3, #1
   12be4:	moveq	r3, #0
   12be8:	str	r3, [sp]
   12bec:	ldrne	r3, [r6]
   12bf0:	moveq	r8, r6
   12bf4:	strne	r3, [sp, #4]
   12bf8:	ldr	r3, [sp]
   12bfc:	eor	r8, r8, #1
   12c00:	mov	r9, r1
   12c04:	mov	r7, r2
   12c08:	and	r3, r3, r8
   12c0c:	streq	r6, [sp, #4]
   12c10:	str	r3, [sp, #8]
   12c14:	ldr	r3, [sp, #4]
   12c18:	cmp	r3, #0
   12c1c:	movne	r3, #0
   12c20:	andeq	r3, r8, #1
   12c24:	cmp	r3, #0
   12c28:	moveq	r5, r7
   12c2c:	ldreq	fp, [sp, #20]
   12c30:	moveq	r4, r9
   12c34:	beq	12c68 <__assert_fail@plt+0x1d08>
   12c38:	mov	r4, r9
   12c3c:	sub	r5, r7, r4
   12c40:	add	r5, r9, r5
   12c44:	add	r3, sp, #20
   12c48:	add	r2, sp, #12
   12c4c:	mov	r1, r5
   12c50:	mov	r0, r4
   12c54:	ldr	fp, [sp, #20]
   12c58:	bl	12730 <__assert_fail@plt+0x17d0>
   12c5c:	cmp	r0, #0
   12c60:	addne	r4, r4, #8
   12c64:	bne	12c3c <__assert_fail@plt+0x1cdc>
   12c68:	cmp	r5, #0
   12c6c:	movne	r3, #0
   12c70:	andeq	r3, r8, #1
   12c74:	cmp	r3, #0
   12c78:	bne	12d9c <__assert_fail@plt+0x1e3c>
   12c7c:	cmp	r5, #0
   12c80:	beq	12ca8 <__assert_fail@plt+0x1d48>
   12c84:	ldrb	r3, [r4]
   12c88:	ldr	r2, [sp]
   12c8c:	cmp	r3, #10
   12c90:	movne	r2, #0
   12c94:	andeq	r2, r2, #1
   12c98:	cmp	r2, #0
   12c9c:	subne	r7, r5, #1
   12ca0:	addne	r4, r4, #1
   12ca4:	bne	12d8c <__assert_fail@plt+0x1e2c>
   12ca8:	ldr	r3, [sp, #20]
   12cac:	cmp	r6, #0
   12cb0:	sub	r2, fp, r3
   12cb4:	ldr	r3, [sp, #12]
   12cb8:	str	fp, [sp, #20]
   12cbc:	sub	r3, r3, r2
   12cc0:	str	r3, [sp, #12]
   12cc4:	add	r7, r4, r5
   12cc8:	beq	12d94 <__assert_fail@plt+0x1e34>
   12ccc:	ldr	r3, [r6]
   12cd0:	cmp	r3, #8
   12cd4:	moveq	r3, #0
   12cd8:	streq	r3, [r6]
   12cdc:	cmp	r5, #7
   12ce0:	ldr	r3, [r6]
   12ce4:	clz	r3, r3
   12ce8:	lsr	r3, r3, #5
   12cec:	movle	r3, #0
   12cf0:	cmp	r3, #0
   12cf4:	beq	12d1c <__assert_fail@plt+0x1dbc>
   12cf8:	mov	r0, r4
   12cfc:	mov	r2, #8
   12d00:	mov	r1, #10
   12d04:	bl	10eb8 <memchr@plt>
   12d08:	cmp	r0, #0
   12d0c:	moveq	r0, r4
   12d10:	moveq	r5, #8
   12d14:	addeq	r4, r4, #8
   12d18:	beq	12d70 <__assert_fail@plt+0x1e10>
   12d1c:	cmp	r7, r4
   12d20:	bls	12d4c <__assert_fail@plt+0x1dec>
   12d24:	ldrb	r1, [r4], #1
   12d28:	cmp	r1, #10
   12d2c:	beq	12d1c <__assert_fail@plt+0x1dbc>
   12d30:	ldr	r0, [r6]
   12d34:	mov	r3, r6
   12d38:	add	r2, r0, #1
   12d3c:	cmp	r2, #8
   12d40:	str	r2, [r3], r0
   12d44:	strb	r1, [r3, #4]
   12d48:	bne	12d1c <__assert_fail@plt+0x1dbc>
   12d4c:	mov	r0, r6
   12d50:	ldr	r5, [r0], #4
   12d54:	cmp	r5, #0
   12d58:	beq	12d9c <__assert_fail@plt+0x1e3c>
   12d5c:	cmp	r5, #7
   12d60:	bgt	12d70 <__assert_fail@plt+0x1e10>
   12d64:	ldr	r3, [sp, #8]
   12d68:	cmp	r3, #0
   12d6c:	bne	12d9c <__assert_fail@plt+0x1e3c>
   12d70:	add	r3, sp, #20
   12d74:	add	r2, sp, #12
   12d78:	mov	r1, r5
   12d7c:	bl	12730 <__assert_fail@plt+0x17d0>
   12d80:	cmp	r0, #0
   12d84:	beq	12da0 <__assert_fail@plt+0x1e40>
   12d88:	sub	r7, r7, r4
   12d8c:	mov	r9, r4
   12d90:	b	12c14 <__assert_fail@plt+0x1cb4>
   12d94:	mov	r0, r4
   12d98:	b	12d54 <__assert_fail@plt+0x1df4>
   12d9c:	mov	r5, #0
   12da0:	ldr	r3, [sl]
   12da4:	ldr	r2, [sp, #20]
   12da8:	clz	r0, r5
   12dac:	sub	r3, r3, r2
   12db0:	lsr	r0, r0, #5
   12db4:	str	r3, [sl]
   12db8:	add	sp, sp, #28
   12dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dc0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12dc4:	mov	r7, r0
   12dc8:	asr	r0, r2, #3
   12dcc:	add	r0, r0, #1
   12dd0:	mov	r5, r3
   12dd4:	add	r0, r0, r0, lsl #2
   12dd8:	mov	r8, r1
   12ddc:	mov	r4, r2
   12de0:	ldr	r6, [sp, #40]	; 0x28
   12de4:	str	r0, [sp, #12]
   12de8:	bl	15c68 <__assert_fail@plt+0x4d08>
   12dec:	cmp	r0, #0
   12df0:	str	r0, [r5]
   12df4:	bne	12e08 <__assert_fail@plt+0x1ea8>
   12df8:	mov	r4, #1
   12dfc:	mov	r0, r4
   12e00:	add	sp, sp, #16
   12e04:	pop	{r4, r5, r6, r7, r8, pc}
   12e08:	add	r2, sp, #12
   12e0c:	mov	r3, r0
   12e10:	str	r2, [sp]
   12e14:	mov	r1, r8
   12e18:	mov	r2, r4
   12e1c:	mov	r0, r7
   12e20:	bl	12bbc <__assert_fail@plt+0x1c5c>
   12e24:	subs	r4, r0, #0
   12e28:	bne	12e3c <__assert_fail@plt+0x1edc>
   12e2c:	ldr	r0, [r5]
   12e30:	bl	136b8 <__assert_fail@plt+0x2758>
   12e34:	str	r4, [r5]
   12e38:	b	12dfc <__assert_fail@plt+0x1e9c>
   12e3c:	cmp	r6, #0
   12e40:	beq	12df8 <__assert_fail@plt+0x1e98>
   12e44:	ldr	r3, [sp, #12]
   12e48:	str	r3, [r6]
   12e4c:	b	12dfc <__assert_fail@plt+0x1e9c>
   12e50:	cmp	r1, #1
   12e54:	ble	12f6c <__assert_fail@plt+0x200c>
   12e58:	push	{r4, r5, r6, lr}
   12e5c:	ldrb	ip, [r0]
   12e60:	ldr	lr, [pc, #268]	; 12f74 <__assert_fail@plt+0x2014>
   12e64:	ldrsb	r5, [lr, ip]
   12e68:	cmp	r5, #0
   12e6c:	blt	12eb8 <__assert_fail@plt+0x1f58>
   12e70:	ldrb	ip, [r0, #1]
   12e74:	ldrsb	r6, [lr, ip]
   12e78:	cmp	r6, #0
   12e7c:	blt	12eb8 <__assert_fail@plt+0x1f58>
   12e80:	ldr	r4, [r3]
   12e84:	ldr	ip, [r2]
   12e88:	cmp	r4, #0
   12e8c:	beq	12eac <__assert_fail@plt+0x1f4c>
   12e90:	asr	r4, r6, #4
   12e94:	orr	r4, r4, r5, lsl #2
   12e98:	strb	r4, [ip]
   12e9c:	ldr	r4, [r3]
   12ea0:	add	ip, ip, #1
   12ea4:	sub	r4, r4, #1
   12ea8:	str	r4, [r3]
   12eac:	cmp	r1, #2
   12eb0:	bne	12ec0 <__assert_fail@plt+0x1f60>
   12eb4:	str	ip, [r2]
   12eb8:	mov	r0, #0
   12ebc:	pop	{r4, r5, r6, pc}
   12ec0:	ldrb	r4, [r0, #2]
   12ec4:	cmp	r4, #61	; 0x3d
   12ec8:	bne	12eec <__assert_fail@plt+0x1f8c>
   12ecc:	cmp	r1, #4
   12ed0:	bne	12eb4 <__assert_fail@plt+0x1f54>
   12ed4:	ldrb	r3, [r0, #3]
   12ed8:	cmp	r3, #61	; 0x3d
   12edc:	bne	12eb4 <__assert_fail@plt+0x1f54>
   12ee0:	str	ip, [r2]
   12ee4:	mov	r0, #1
   12ee8:	pop	{r4, r5, r6, pc}
   12eec:	ldrsb	r4, [lr, r4]
   12ef0:	cmp	r4, #0
   12ef4:	blt	12eb4 <__assert_fail@plt+0x1f54>
   12ef8:	ldr	r5, [r3]
   12efc:	cmp	r5, #0
   12f00:	beq	12f20 <__assert_fail@plt+0x1fc0>
   12f04:	asr	r5, r4, #2
   12f08:	orr	r5, r5, r6, lsl #4
   12f0c:	strb	r5, [ip]
   12f10:	ldr	r5, [r3]
   12f14:	add	ip, ip, #1
   12f18:	sub	r5, r5, #1
   12f1c:	str	r5, [r3]
   12f20:	cmp	r1, #3
   12f24:	beq	12eb4 <__assert_fail@plt+0x1f54>
   12f28:	ldrb	r0, [r0, #3]
   12f2c:	cmp	r0, #61	; 0x3d
   12f30:	bne	12f3c <__assert_fail@plt+0x1fdc>
   12f34:	cmp	r1, #4
   12f38:	b	12edc <__assert_fail@plt+0x1f7c>
   12f3c:	ldrsb	r1, [lr, r0]
   12f40:	cmp	r1, #0
   12f44:	blt	12eb4 <__assert_fail@plt+0x1f54>
   12f48:	ldr	r0, [r3]
   12f4c:	cmp	r0, #0
   12f50:	orrne	r1, r1, r4, lsl #6
   12f54:	strbne	r1, [ip]
   12f58:	ldrne	r1, [r3]
   12f5c:	addne	ip, ip, #1
   12f60:	subne	r1, r1, #1
   12f64:	strne	r1, [r3]
   12f68:	b	12ee0 <__assert_fail@plt+0x1f80>
   12f6c:	mov	r0, #0
   12f70:	bx	lr
   12f74:	andeq	r7, r1, sl, asr #4
   12f78:	tst	r3, #3
   12f7c:	push	{r4, r5, r6, r7, lr}
   12f80:	bne	12f94 <__assert_fail@plt+0x2034>
   12f84:	asr	ip, r3, #2
   12f88:	add	ip, ip, ip, lsl #1
   12f8c:	cmp	r1, ip
   12f90:	beq	12fc0 <__assert_fail@plt+0x2060>
   12f94:	ldr	r4, [pc, #356]	; 13100 <__assert_fail@plt+0x21a0>
   12f98:	mov	r5, #0
   12f9c:	mov	r6, #61	; 0x3d
   12fa0:	cmp	r1, #0
   12fa4:	cmpne	r3, #0
   12fa8:	movne	ip, #1
   12fac:	moveq	ip, #0
   12fb0:	bne	13038 <__assert_fail@plt+0x20d8>
   12fb4:	cmp	r3, #0
   12fb8:	strbne	ip, [r2]
   12fbc:	pop	{r4, r5, r6, r7, pc}
   12fc0:	ldr	lr, [pc, #312]	; 13100 <__assert_fail@plt+0x21a0>
   12fc4:	add	r1, r0, r1
   12fc8:	cmp	r1, r0
   12fcc:	add	r2, r2, #4
   12fd0:	bne	12fd8 <__assert_fail@plt+0x2078>
   12fd4:	pop	{r4, r5, r6, r7, pc}
   12fd8:	ldrb	r3, [r0]
   12fdc:	ldrb	r4, [r0, #1]
   12fe0:	add	r0, r0, #3
   12fe4:	add	ip, lr, r3, lsr #2
   12fe8:	ldrb	ip, [ip, #256]	; 0x100
   12fec:	strb	ip, [r2, #-4]
   12ff0:	lsr	ip, r4, #4
   12ff4:	add	ip, ip, r3, lsl #4
   12ff8:	and	ip, ip, #63	; 0x3f
   12ffc:	add	ip, lr, ip
   13000:	ldrb	r3, [ip, #256]	; 0x100
   13004:	ldrb	ip, [r0, #-1]
   13008:	strb	r3, [r2, #-3]
   1300c:	lsr	r3, ip, #6
   13010:	add	r3, r3, r4, lsl #2
   13014:	and	r3, r3, #63	; 0x3f
   13018:	add	r3, lr, r3
   1301c:	and	ip, ip, #63	; 0x3f
   13020:	ldrb	r3, [r3, #256]	; 0x100
   13024:	add	ip, lr, ip
   13028:	strb	r3, [r2, #-2]
   1302c:	ldrb	r3, [ip, #256]	; 0x100
   13030:	strb	r3, [r2, #-1]
   13034:	b	12fc8 <__assert_fail@plt+0x2068>
   13038:	ldrb	ip, [r0]
   1303c:	cmp	r3, #1
   13040:	add	lr, r4, ip, lsr #2
   13044:	ldrb	lr, [lr, #256]	; 0x100
   13048:	strb	lr, [r2]
   1304c:	popeq	{r4, r5, r6, r7, pc}
   13050:	subs	lr, r1, #1
   13054:	lsl	r7, ip, #4
   13058:	ldrbne	ip, [r0, #1]
   1305c:	moveq	ip, r5
   13060:	lsrne	ip, ip, #4
   13064:	add	ip, ip, r7
   13068:	and	ip, ip, #63	; 0x3f
   1306c:	add	ip, r4, ip
   13070:	cmp	r3, #2
   13074:	ldrb	ip, [ip, #256]	; 0x100
   13078:	strb	ip, [r2, #1]
   1307c:	popeq	{r4, r5, r6, r7, pc}
   13080:	cmp	lr, #0
   13084:	moveq	r1, r6
   13088:	beq	130b4 <__assert_fail@plt+0x2154>
   1308c:	subs	lr, r1, #2
   13090:	ldrb	r7, [r0, #1]
   13094:	ldrbne	ip, [r0, #2]
   13098:	moveq	r1, r5
   1309c:	lsl	r7, r7, #2
   130a0:	lsrne	r1, ip, #6
   130a4:	add	r1, r1, r7
   130a8:	and	r1, r1, #63	; 0x3f
   130ac:	add	r1, r4, r1
   130b0:	ldrb	r1, [r1, #256]	; 0x100
   130b4:	cmp	r3, #3
   130b8:	strb	r1, [r2, #2]
   130bc:	popeq	{r4, r5, r6, r7, pc}
   130c0:	cmp	lr, #0
   130c4:	moveq	r1, r6
   130c8:	ldrbne	r1, [r0, #2]
   130cc:	add	r2, r2, #4
   130d0:	andne	r1, r1, #63	; 0x3f
   130d4:	addne	r1, r4, r1
   130d8:	ldrbne	r1, [r1, #256]	; 0x100
   130dc:	subs	r3, r3, #4
   130e0:	strb	r1, [r2, #-1]
   130e4:	popeq	{r4, r5, r6, r7, pc}
   130e8:	cmp	lr, #0
   130ec:	beq	130f8 <__assert_fail@plt+0x2198>
   130f0:	subs	lr, lr, #1
   130f4:	addne	r0, r0, #3
   130f8:	mov	r1, lr
   130fc:	b	12fa0 <__assert_fail@plt+0x2040>
   13100:	andeq	r7, r1, sl, asr #4
   13104:	push	{r4, r5, r6, r7, r8, lr}
   13108:	mov	r6, r1
   1310c:	mov	r8, r0
   13110:	mov	r1, #3
   13114:	mov	r0, r6
   13118:	mov	r7, r2
   1311c:	bl	16350 <__assert_fail@plt+0x53f0>
   13120:	mov	r0, r6
   13124:	adds	r4, r1, #0
   13128:	mov	r1, #3
   1312c:	movne	r4, #1
   13130:	bl	16130 <__assert_fail@plt+0x51d0>
   13134:	adds	r4, r4, r0
   13138:	bpl	13180 <__assert_fail@plt+0x2220>
   1313c:	cmn	r4, #1
   13140:	moveq	r0, #0
   13144:	beq	13160 <__assert_fail@plt+0x2200>
   13148:	mov	r1, r4
   1314c:	mov	r0, #-2147483648	; 0x80000000
   13150:	bl	16130 <__assert_fail@plt+0x51d0>
   13154:	sub	r0, r0, #3
   13158:	clz	r0, r0
   1315c:	lsr	r0, r0, #5
   13160:	cmp	r0, #0
   13164:	bne	13170 <__assert_fail@plt+0x2210>
   13168:	cmp	r6, #0
   1316c:	bge	13190 <__assert_fail@plt+0x2230>
   13170:	mov	r5, #0
   13174:	str	r5, [r7]
   13178:	mov	r0, r5
   1317c:	pop	{r4, r5, r6, r7, r8, pc}
   13180:	cmn	r4, #-536870911	; 0xe0000001
   13184:	movle	r0, #0
   13188:	movgt	r0, #1
   1318c:	b	13160 <__assert_fail@plt+0x2200>
   13190:	lsl	r4, r4, #2
   13194:	add	r5, r4, #1
   13198:	mov	r0, r5
   1319c:	bl	15c68 <__assert_fail@plt+0x4d08>
   131a0:	cmp	r0, #0
   131a4:	mov	r2, r0
   131a8:	str	r0, [r7]
   131ac:	beq	13178 <__assert_fail@plt+0x2218>
   131b0:	mov	r3, r5
   131b4:	mov	r1, r6
   131b8:	mov	r0, r8
   131bc:	bl	12f78 <__assert_fail@plt+0x2018>
   131c0:	mov	r5, r4
   131c4:	b	13178 <__assert_fail@plt+0x2218>
   131c8:	ldr	r3, [pc, #12]	; 131dc <__assert_fail@plt+0x227c>
   131cc:	ldrb	r0, [r3, r0]
   131d0:	eor	r0, r0, #128	; 0x80
   131d4:	lsr	r0, r0, #7
   131d8:	bx	lr
   131dc:	andeq	r7, r1, sl, asr #4
   131e0:	mov	r3, #0
   131e4:	str	r3, [r0]
   131e8:	bx	lr
   131ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131f0:	sub	sp, sp, #28
   131f4:	subs	r6, r0, #0
   131f8:	ldr	sl, [sp, #64]	; 0x40
   131fc:	str	r3, [sp, #12]
   13200:	clzne	r8, r2
   13204:	ldr	r3, [sl]
   13208:	lsrne	r8, r8, #5
   1320c:	str	r3, [sp, #20]
   13210:	movne	r3, #1
   13214:	moveq	r3, #0
   13218:	str	r3, [sp]
   1321c:	ldrne	r3, [r6]
   13220:	moveq	r8, r6
   13224:	strne	r3, [sp, #4]
   13228:	ldr	r3, [sp]
   1322c:	eor	r8, r8, #1
   13230:	mov	r9, r1
   13234:	mov	r7, r2
   13238:	and	r3, r3, r8
   1323c:	streq	r6, [sp, #4]
   13240:	str	r3, [sp, #8]
   13244:	ldr	r3, [sp, #4]
   13248:	cmp	r3, #0
   1324c:	movne	r3, #0
   13250:	andeq	r3, r8, #1
   13254:	cmp	r3, #0
   13258:	moveq	r5, r7
   1325c:	ldreq	fp, [sp, #20]
   13260:	moveq	r4, r9
   13264:	beq	13298 <__assert_fail@plt+0x2338>
   13268:	mov	r4, r9
   1326c:	sub	r5, r7, r4
   13270:	add	r5, r9, r5
   13274:	add	r3, sp, #20
   13278:	add	r2, sp, #12
   1327c:	mov	r1, r5
   13280:	mov	r0, r4
   13284:	ldr	fp, [sp, #20]
   13288:	bl	12e50 <__assert_fail@plt+0x1ef0>
   1328c:	cmp	r0, #0
   13290:	addne	r4, r4, #4
   13294:	bne	1326c <__assert_fail@plt+0x230c>
   13298:	cmp	r5, #0
   1329c:	movne	r3, #0
   132a0:	andeq	r3, r8, #1
   132a4:	cmp	r3, #0
   132a8:	bne	133cc <__assert_fail@plt+0x246c>
   132ac:	cmp	r5, #0
   132b0:	beq	132d8 <__assert_fail@plt+0x2378>
   132b4:	ldrb	r3, [r4]
   132b8:	ldr	r2, [sp]
   132bc:	cmp	r3, #10
   132c0:	movne	r2, #0
   132c4:	andeq	r2, r2, #1
   132c8:	cmp	r2, #0
   132cc:	subne	r7, r5, #1
   132d0:	addne	r4, r4, #1
   132d4:	bne	133bc <__assert_fail@plt+0x245c>
   132d8:	ldr	r3, [sp, #20]
   132dc:	cmp	r6, #0
   132e0:	sub	r2, fp, r3
   132e4:	ldr	r3, [sp, #12]
   132e8:	str	fp, [sp, #20]
   132ec:	sub	r3, r3, r2
   132f0:	str	r3, [sp, #12]
   132f4:	add	r7, r4, r5
   132f8:	beq	133c4 <__assert_fail@plt+0x2464>
   132fc:	ldr	r3, [r6]
   13300:	cmp	r3, #4
   13304:	moveq	r3, #0
   13308:	streq	r3, [r6]
   1330c:	cmp	r5, #3
   13310:	ldr	r3, [r6]
   13314:	clz	r3, r3
   13318:	lsr	r3, r3, #5
   1331c:	movle	r3, #0
   13320:	cmp	r3, #0
   13324:	beq	1334c <__assert_fail@plt+0x23ec>
   13328:	mov	r0, r4
   1332c:	mov	r2, #4
   13330:	mov	r1, #10
   13334:	bl	10eb8 <memchr@plt>
   13338:	cmp	r0, #0
   1333c:	moveq	r0, r4
   13340:	moveq	r5, #4
   13344:	addeq	r4, r4, #4
   13348:	beq	133a0 <__assert_fail@plt+0x2440>
   1334c:	cmp	r7, r4
   13350:	bls	1337c <__assert_fail@plt+0x241c>
   13354:	ldrb	r1, [r4], #1
   13358:	cmp	r1, #10
   1335c:	beq	1334c <__assert_fail@plt+0x23ec>
   13360:	ldr	r0, [r6]
   13364:	mov	r3, r6
   13368:	add	r2, r0, #1
   1336c:	cmp	r2, #4
   13370:	str	r2, [r3], r0
   13374:	strb	r1, [r3, #4]
   13378:	bne	1334c <__assert_fail@plt+0x23ec>
   1337c:	mov	r0, r6
   13380:	ldr	r5, [r0], #4
   13384:	cmp	r5, #0
   13388:	beq	133cc <__assert_fail@plt+0x246c>
   1338c:	cmp	r5, #3
   13390:	bgt	133a0 <__assert_fail@plt+0x2440>
   13394:	ldr	r3, [sp, #8]
   13398:	cmp	r3, #0
   1339c:	bne	133cc <__assert_fail@plt+0x246c>
   133a0:	add	r3, sp, #20
   133a4:	add	r2, sp, #12
   133a8:	mov	r1, r5
   133ac:	bl	12e50 <__assert_fail@plt+0x1ef0>
   133b0:	cmp	r0, #0
   133b4:	beq	133d0 <__assert_fail@plt+0x2470>
   133b8:	sub	r7, r7, r4
   133bc:	mov	r9, r4
   133c0:	b	13244 <__assert_fail@plt+0x22e4>
   133c4:	mov	r0, r4
   133c8:	b	13384 <__assert_fail@plt+0x2424>
   133cc:	mov	r5, #0
   133d0:	ldr	r3, [sl]
   133d4:	ldr	r2, [sp, #20]
   133d8:	clz	r0, r5
   133dc:	sub	r3, r3, r2
   133e0:	lsr	r0, r0, #5
   133e4:	str	r3, [sl]
   133e8:	add	sp, sp, #28
   133ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133f0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   133f4:	mov	r7, r0
   133f8:	asr	r0, r2, #2
   133fc:	add	r0, r0, #1
   13400:	mov	r5, r3
   13404:	add	r0, r0, r0, lsl #1
   13408:	mov	r8, r1
   1340c:	mov	r4, r2
   13410:	ldr	r6, [sp, #40]	; 0x28
   13414:	str	r0, [sp, #12]
   13418:	bl	15c68 <__assert_fail@plt+0x4d08>
   1341c:	cmp	r0, #0
   13420:	str	r0, [r5]
   13424:	bne	13438 <__assert_fail@plt+0x24d8>
   13428:	mov	r4, #1
   1342c:	mov	r0, r4
   13430:	add	sp, sp, #16
   13434:	pop	{r4, r5, r6, r7, r8, pc}
   13438:	add	r2, sp, #12
   1343c:	mov	r3, r0
   13440:	str	r2, [sp]
   13444:	mov	r1, r8
   13448:	mov	r2, r4
   1344c:	mov	r0, r7
   13450:	bl	131ec <__assert_fail@plt+0x228c>
   13454:	subs	r4, r0, #0
   13458:	bne	1346c <__assert_fail@plt+0x250c>
   1345c:	ldr	r0, [r5]
   13460:	bl	136b8 <__assert_fail@plt+0x2758>
   13464:	str	r4, [r5]
   13468:	b	1342c <__assert_fail@plt+0x24cc>
   1346c:	cmp	r6, #0
   13470:	beq	13428 <__assert_fail@plt+0x24c8>
   13474:	ldr	r3, [sp, #12]
   13478:	str	r3, [r6]
   1347c:	b	1342c <__assert_fail@plt+0x24cc>
   13480:	ldr	r3, [pc, #4]	; 1348c <__assert_fail@plt+0x252c>
   13484:	str	r0, [r3]
   13488:	bx	lr
   1348c:	andeq	r8, r2, r4, ror r1
   13490:	ldr	r3, [pc, #4]	; 1349c <__assert_fail@plt+0x253c>
   13494:	strb	r0, [r3, #4]
   13498:	bx	lr
   1349c:	andeq	r8, r2, r4, ror r1
   134a0:	ldr	r3, [pc, #192]	; 13568 <__assert_fail@plt+0x2608>
   134a4:	push	{r0, r1, r4, r5, r6, lr}
   134a8:	ldr	r0, [r3]
   134ac:	bl	15d04 <__assert_fail@plt+0x4da4>
   134b0:	cmp	r0, #0
   134b4:	beq	1354c <__assert_fail@plt+0x25ec>
   134b8:	ldr	r3, [pc, #172]	; 1356c <__assert_fail@plt+0x260c>
   134bc:	mov	r4, r3
   134c0:	ldrb	r2, [r3, #4]
   134c4:	cmp	r2, #0
   134c8:	beq	134dc <__assert_fail@plt+0x257c>
   134cc:	bl	10e70 <__errno_location@plt>
   134d0:	ldr	r3, [r0]
   134d4:	cmp	r3, #32
   134d8:	beq	1354c <__assert_fail@plt+0x25ec>
   134dc:	mov	r2, #5
   134e0:	ldr	r1, [pc, #136]	; 13570 <__assert_fail@plt+0x2610>
   134e4:	mov	r0, #0
   134e8:	bl	10d8c <dcgettext@plt>
   134ec:	ldr	r4, [r4]
   134f0:	cmp	r4, #0
   134f4:	mov	r5, r0
   134f8:	beq	13530 <__assert_fail@plt+0x25d0>
   134fc:	bl	10e70 <__errno_location@plt>
   13500:	ldr	r6, [r0]
   13504:	mov	r0, r4
   13508:	bl	14c80 <__assert_fail@plt+0x3d20>
   1350c:	str	r5, [sp]
   13510:	ldr	r2, [pc, #92]	; 13574 <__assert_fail@plt+0x2614>
   13514:	mov	r1, r6
   13518:	mov	r3, r0
   1351c:	mov	r0, #0
   13520:	bl	10df8 <error@plt>
   13524:	ldr	r3, [pc, #76]	; 13578 <__assert_fail@plt+0x2618>
   13528:	ldr	r0, [r3]
   1352c:	bl	10d44 <_exit@plt>
   13530:	bl	10e70 <__errno_location@plt>
   13534:	mov	r3, r5
   13538:	ldr	r2, [pc, #60]	; 1357c <__assert_fail@plt+0x261c>
   1353c:	ldr	r1, [r0]
   13540:	mov	r0, r4
   13544:	bl	10df8 <error@plt>
   13548:	b	13524 <__assert_fail@plt+0x25c4>
   1354c:	ldr	r3, [pc, #44]	; 13580 <__assert_fail@plt+0x2620>
   13550:	ldr	r0, [r3]
   13554:	bl	15d04 <__assert_fail@plt+0x4da4>
   13558:	cmp	r0, #0
   1355c:	bne	13524 <__assert_fail@plt+0x25c4>
   13560:	add	sp, sp, #8
   13564:	pop	{r4, r5, r6, pc}
   13568:	andeq	r8, r2, r4, asr r1
   1356c:	andeq	r8, r2, r4, ror r1
   13570:	andeq	r7, r1, r9, lsr r0
   13574:	ldrdeq	r6, [r1], -fp
   13578:	strdeq	r8, [r2], -r4
   1357c:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   13580:	andeq	r8, r2, r8, asr #2
   13584:	push	{r4, r5}
   13588:	pop	{r4, r5}
   1358c:	b	10d14 <posix_fadvise64@plt>
   13590:	cmp	r0, #0
   13594:	bxeq	lr
   13598:	push	{r0, r1, r2, r3, r4, lr}
   1359c:	mov	r4, r1
   135a0:	bl	10ea0 <fileno@plt>
   135a4:	mov	r2, #0
   135a8:	mov	r3, #0
   135ac:	str	r4, [sp, #8]
   135b0:	strd	r2, [sp]
   135b4:	bl	10d14 <posix_fadvise64@plt>
   135b8:	add	sp, sp, #16
   135bc:	pop	{r4, pc}
   135c0:	push	{r0, r1, r2, r4, r5, lr}
   135c4:	mov	r4, r0
   135c8:	bl	10ea0 <fileno@plt>
   135cc:	cmp	r0, #0
   135d0:	mov	r0, r4
   135d4:	bge	135e4 <__assert_fail@plt+0x2684>
   135d8:	add	sp, sp, #12
   135dc:	pop	{r4, r5, lr}
   135e0:	b	10ed0 <fclose@plt>
   135e4:	bl	10e1c <__freading@plt>
   135e8:	cmp	r0, #0
   135ec:	bne	13628 <__assert_fail@plt+0x26c8>
   135f0:	mov	r0, r4
   135f4:	bl	13668 <__assert_fail@plt+0x2708>
   135f8:	cmp	r0, #0
   135fc:	bne	1365c <__assert_fail@plt+0x26fc>
   13600:	mov	r5, #0
   13604:	mov	r0, r4
   13608:	bl	10ed0 <fclose@plt>
   1360c:	cmp	r5, #0
   13610:	beq	13620 <__assert_fail@plt+0x26c0>
   13614:	bl	10e70 <__errno_location@plt>
   13618:	str	r5, [r0]
   1361c:	mvn	r0, #0
   13620:	add	sp, sp, #12
   13624:	pop	{r4, r5, pc}
   13628:	mov	r0, r4
   1362c:	bl	10ea0 <fileno@plt>
   13630:	mov	r3, #1
   13634:	str	r3, [sp]
   13638:	mov	r2, #0
   1363c:	mov	r3, #0
   13640:	bl	10dbc <lseek64@plt>
   13644:	mvn	r3, #0
   13648:	mvn	r2, #0
   1364c:	cmp	r1, r3
   13650:	cmpeq	r0, r2
   13654:	bne	135f0 <__assert_fail@plt+0x2690>
   13658:	b	13600 <__assert_fail@plt+0x26a0>
   1365c:	bl	10e70 <__errno_location@plt>
   13660:	ldr	r5, [r0]
   13664:	b	13604 <__assert_fail@plt+0x26a4>
   13668:	push	{r0, r1, r4, lr}
   1366c:	subs	r4, r0, #0
   13670:	bne	13684 <__assert_fail@plt+0x2724>
   13674:	mov	r0, r4
   13678:	add	sp, sp, #8
   1367c:	pop	{r4, lr}
   13680:	b	10d20 <fflush@plt>
   13684:	bl	10e1c <__freading@plt>
   13688:	cmp	r0, #0
   1368c:	beq	13674 <__assert_fail@plt+0x2714>
   13690:	ldr	r3, [r4]
   13694:	tst	r3, #256	; 0x100
   13698:	beq	13674 <__assert_fail@plt+0x2714>
   1369c:	mov	r3, #1
   136a0:	str	r3, [sp]
   136a4:	mov	r2, #0
   136a8:	mov	r3, #0
   136ac:	mov	r0, r4
   136b0:	bl	1370c <__assert_fail@plt+0x27ac>
   136b4:	b	13674 <__assert_fail@plt+0x2714>
   136b8:	push	{r0, r1, r2, r4, r5, lr}
   136bc:	mov	r5, r0
   136c0:	bl	10e70 <__errno_location@plt>
   136c4:	ldr	r3, [r0]
   136c8:	mov	r4, r0
   136cc:	str	r3, [sp]
   136d0:	str	r3, [sp, #4]
   136d4:	mov	r3, #0
   136d8:	str	r3, [r0]
   136dc:	mov	r0, r5
   136e0:	bl	10d38 <free@plt>
   136e4:	ldr	r3, [r4]
   136e8:	add	r2, sp, #8
   136ec:	cmp	r3, #0
   136f0:	moveq	r3, #4
   136f4:	movne	r3, #0
   136f8:	add	r3, r2, r3
   136fc:	ldr	r3, [r3, #-8]
   13700:	str	r3, [r4]
   13704:	add	sp, sp, #12
   13708:	pop	{r4, r5, pc}
   1370c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13710:	mov	r4, r0
   13714:	ldmib	r0, {ip, lr}
   13718:	ldr	r8, [sp, #32]
   1371c:	cmp	lr, ip
   13720:	bne	1378c <__assert_fail@plt+0x282c>
   13724:	ldr	lr, [r0, #20]
   13728:	ldr	ip, [r0, #16]
   1372c:	cmp	lr, ip
   13730:	bne	1378c <__assert_fail@plt+0x282c>
   13734:	ldr	r5, [r0, #36]	; 0x24
   13738:	cmp	r5, #0
   1373c:	bne	1378c <__assert_fail@plt+0x282c>
   13740:	mov	r6, r2
   13744:	mov	r7, r3
   13748:	bl	10ea0 <fileno@plt>
   1374c:	mov	r2, r6
   13750:	mov	r3, r7
   13754:	str	r8, [sp]
   13758:	bl	10dbc <lseek64@plt>
   1375c:	mvn	r3, #0
   13760:	mvn	r2, #0
   13764:	cmp	r1, r3
   13768:	cmpeq	r0, r2
   1376c:	mvneq	r0, #0
   13770:	ldrne	r3, [r4]
   13774:	strdne	r0, [r4, #80]	; 0x50
   13778:	movne	r0, r5
   1377c:	bicne	r3, r3, #16
   13780:	strne	r3, [r4]
   13784:	add	sp, sp, #8
   13788:	pop	{r4, r5, r6, r7, r8, pc}
   1378c:	str	r8, [sp, #32]
   13790:	mov	r0, r4
   13794:	add	sp, sp, #8
   13798:	pop	{r4, r5, r6, r7, r8, lr}
   1379c:	b	10edc <fseeko64@plt>
   137a0:	push	{r4, r5, r6, lr}
   137a4:	subs	r5, r0, #0
   137a8:	bne	137c0 <__assert_fail@plt+0x2860>
   137ac:	ldr	r3, [pc, #124]	; 13830 <__assert_fail@plt+0x28d0>
   137b0:	ldr	r0, [pc, #124]	; 13834 <__assert_fail@plt+0x28d4>
   137b4:	ldr	r1, [r3]
   137b8:	bl	10f30 <fputs@plt>
   137bc:	bl	10f48 <abort@plt>
   137c0:	mov	r1, #47	; 0x2f
   137c4:	bl	10ef4 <strrchr@plt>
   137c8:	cmp	r0, #0
   137cc:	addne	r4, r0, #1
   137d0:	moveq	r4, r5
   137d4:	sub	r3, r4, r5
   137d8:	cmp	r3, #6
   137dc:	ble	1381c <__assert_fail@plt+0x28bc>
   137e0:	mov	r2, #7
   137e4:	ldr	r1, [pc, #76]	; 13838 <__assert_fail@plt+0x28d8>
   137e8:	sub	r0, r4, #7
   137ec:	bl	10f3c <strncmp@plt>
   137f0:	cmp	r0, #0
   137f4:	bne	1381c <__assert_fail@plt+0x28bc>
   137f8:	mov	r2, #3
   137fc:	ldr	r1, [pc, #56]	; 1383c <__assert_fail@plt+0x28dc>
   13800:	mov	r0, r4
   13804:	bl	10f3c <strncmp@plt>
   13808:	cmp	r0, #0
   1380c:	movne	r5, r4
   13810:	ldreq	r3, [pc, #40]	; 13840 <__assert_fail@plt+0x28e0>
   13814:	addeq	r5, r4, #3
   13818:	streq	r5, [r3]
   1381c:	ldr	r3, [pc, #32]	; 13844 <__assert_fail@plt+0x28e4>
   13820:	str	r5, [r3]
   13824:	ldr	r3, [pc, #28]	; 13848 <__assert_fail@plt+0x28e8>
   13828:	str	r5, [r3]
   1382c:	pop	{r4, r5, r6, pc}
   13830:	andeq	r8, r2, r8, asr #2
   13834:	andeq	r7, r1, sl, lsl #7
   13838:	andeq	r7, r1, r2, asr #7
   1383c:	andeq	r7, r1, sl, asr #7
   13840:	andeq	r8, r2, r8, lsr r1
   13844:	andeq	r8, r2, ip, ror r1
   13848:	andeq	r8, r2, ip, lsr r1
   1384c:	push	{r4, r5, r6, lr}
   13850:	mov	r2, #48	; 0x30
   13854:	mov	r5, r1
   13858:	mov	r1, #0
   1385c:	mov	r4, r0
   13860:	bl	10e88 <memset@plt>
   13864:	cmp	r5, #10
   13868:	bne	13870 <__assert_fail@plt+0x2910>
   1386c:	bl	10f48 <abort@plt>
   13870:	str	r5, [r4]
   13874:	mov	r0, r4
   13878:	pop	{r4, r5, r6, pc}
   1387c:	push	{r4, r5, r6, lr}
   13880:	mov	r4, r0
   13884:	mov	r5, r1
   13888:	bl	15d74 <__assert_fail@plt+0x4e14>
   1388c:	ldrb	r3, [r0]
   13890:	bic	r3, r3, #32
   13894:	cmp	r3, #85	; 0x55
   13898:	bne	13908 <__assert_fail@plt+0x29a8>
   1389c:	ldrb	r3, [r0, #1]
   138a0:	bic	r3, r3, #32
   138a4:	cmp	r3, #84	; 0x54
   138a8:	bne	138e0 <__assert_fail@plt+0x2980>
   138ac:	ldrb	r3, [r0, #2]
   138b0:	bic	r3, r3, #32
   138b4:	cmp	r3, #70	; 0x46
   138b8:	bne	138e0 <__assert_fail@plt+0x2980>
   138bc:	ldrb	r3, [r0, #3]
   138c0:	cmp	r3, #45	; 0x2d
   138c4:	bne	138e0 <__assert_fail@plt+0x2980>
   138c8:	ldrb	r3, [r0, #4]
   138cc:	cmp	r3, #56	; 0x38
   138d0:	bne	138e0 <__assert_fail@plt+0x2980>
   138d4:	ldrb	r3, [r0, #5]
   138d8:	cmp	r3, #0
   138dc:	beq	138f4 <__assert_fail@plt+0x2994>
   138e0:	ldr	r1, [pc, #144]	; 13978 <__assert_fail@plt+0x2a18>
   138e4:	ldr	r0, [pc, #144]	; 1397c <__assert_fail@plt+0x2a1c>
   138e8:	cmp	r5, #9
   138ec:	movne	r0, r1
   138f0:	pop	{r4, r5, r6, pc}
   138f4:	ldrb	r3, [r4]
   138f8:	ldr	r1, [pc, #128]	; 13980 <__assert_fail@plt+0x2a20>
   138fc:	ldr	r0, [pc, #128]	; 13984 <__assert_fail@plt+0x2a24>
   13900:	cmp	r3, #96	; 0x60
   13904:	b	138ec <__assert_fail@plt+0x298c>
   13908:	cmp	r3, #71	; 0x47
   1390c:	bne	138e0 <__assert_fail@plt+0x2980>
   13910:	ldrb	r3, [r0, #1]
   13914:	bic	r3, r3, #32
   13918:	cmp	r3, #66	; 0x42
   1391c:	bne	138e0 <__assert_fail@plt+0x2980>
   13920:	ldrb	r3, [r0, #2]
   13924:	cmp	r3, #49	; 0x31
   13928:	bne	138e0 <__assert_fail@plt+0x2980>
   1392c:	ldrb	r3, [r0, #3]
   13930:	cmp	r3, #56	; 0x38
   13934:	bne	138e0 <__assert_fail@plt+0x2980>
   13938:	ldrb	r3, [r0, #4]
   1393c:	cmp	r3, #48	; 0x30
   13940:	bne	138e0 <__assert_fail@plt+0x2980>
   13944:	ldrb	r3, [r0, #5]
   13948:	cmp	r3, #51	; 0x33
   1394c:	bne	138e0 <__assert_fail@plt+0x2980>
   13950:	ldrb	r3, [r0, #6]
   13954:	cmp	r3, #48	; 0x30
   13958:	bne	138e0 <__assert_fail@plt+0x2980>
   1395c:	ldrb	r3, [r0, #7]
   13960:	cmp	r3, #0
   13964:	bne	138e0 <__assert_fail@plt+0x2980>
   13968:	ldrb	r3, [r4]
   1396c:	ldr	r1, [pc, #20]	; 13988 <__assert_fail@plt+0x2a28>
   13970:	ldr	r0, [pc, #20]	; 1398c <__assert_fail@plt+0x2a2c>
   13974:	b	13900 <__assert_fail@plt+0x29a0>
   13978:	andeq	r7, r1, r5, lsr r4
   1397c:	andeq	r7, r1, r3, lsr r4
   13980:	andeq	r7, r1, r8, lsr #8
   13984:	andeq	r7, r1, r4, lsr #8
   13988:	andeq	r7, r1, r0, lsr r4
   1398c:	andeq	r7, r1, ip, lsr #8
   13990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13994:	sub	sp, sp, #108	; 0x6c
   13998:	mov	r8, r0
   1399c:	str	r3, [sp, #36]	; 0x24
   139a0:	mov	r5, r1
   139a4:	str	r2, [sp, #44]	; 0x2c
   139a8:	ldr	sl, [sp, #144]	; 0x90
   139ac:	bl	10dc8 <__ctype_get_mb_cur_max@plt>
   139b0:	ldr	r3, [sp, #148]	; 0x94
   139b4:	mov	r7, #0
   139b8:	str	r7, [sp, #48]	; 0x30
   139bc:	lsr	r6, r3, #1
   139c0:	and	r6, r6, #1
   139c4:	mov	r3, #1
   139c8:	str	r3, [sp, #72]	; 0x48
   139cc:	str	r7, [sp, #24]
   139d0:	str	r7, [sp, #32]
   139d4:	str	r7, [sp, #40]	; 0x28
   139d8:	str	r7, [sp, #60]	; 0x3c
   139dc:	str	r0, [sp, #76]	; 0x4c
   139e0:	cmp	sl, #10
   139e4:	ldrls	pc, [pc, sl, lsl #2]
   139e8:	b	13c24 <__assert_fail@plt+0x2cc4>
   139ec:	andeq	r3, r1, r8, lsl sl
   139f0:	andeq	r4, r1, ip, lsr #13
   139f4:	strdeq	r3, [r1], -r0
   139f8:	andeq	r3, r1, ip, lsr ip
   139fc:	andeq	r3, r1, ip, asr #23
   13a00:	andeq	r3, r1, r4, lsr #20
   13a04:	andeq	r4, r1, ip, lsl #13
   13a08:	andeq	r3, r1, r8, lsr #24
   13a0c:	andeq	r3, r1, ip, lsl fp
   13a10:	andeq	r3, r1, ip, lsl fp
   13a14:	andeq	r3, r1, ip, lsl fp
   13a18:	mov	r6, #0
   13a1c:	mov	r4, #0
   13a20:	b	13a50 <__assert_fail@plt+0x2af0>
   13a24:	cmp	r6, #0
   13a28:	bne	13c4c <__assert_fail@plt+0x2cec>
   13a2c:	cmp	r5, #0
   13a30:	movne	r3, #34	; 0x22
   13a34:	strbne	r3, [r8]
   13a38:	mov	r3, #1
   13a3c:	str	r3, [sp, #24]
   13a40:	str	r3, [sp, #32]
   13a44:	mov	r4, #1
   13a48:	ldr	r3, [pc, #3172]	; 146b4 <__assert_fail@plt+0x3754>
   13a4c:	str	r3, [sp, #40]	; 0x28
   13a50:	mov	r9, r5
   13a54:	mov	r3, #0
   13a58:	str	r7, [sp, #68]	; 0x44
   13a5c:	str	r3, [sp, #28]
   13a60:	ldr	r3, [sp, #36]	; 0x24
   13a64:	cmn	r3, #1
   13a68:	bne	145f8 <__assert_fail@plt+0x3698>
   13a6c:	ldr	r3, [sp, #44]	; 0x2c
   13a70:	ldr	r2, [sp, #28]
   13a74:	ldrb	r3, [r3, r2]
   13a78:	adds	r3, r3, #0
   13a7c:	movne	r3, #1
   13a80:	str	r3, [sp, #52]	; 0x34
   13a84:	ldr	r3, [sp, #52]	; 0x34
   13a88:	cmp	r3, #0
   13a8c:	bne	13c74 <__assert_fail@plt+0x2d14>
   13a90:	sub	r2, sl, #2
   13a94:	clz	r2, r2
   13a98:	lsr	r2, r2, #5
   13a9c:	and	r3, r6, r2
   13aa0:	cmp	r4, #0
   13aa4:	movne	r3, #0
   13aa8:	andeq	r3, r3, #1
   13aac:	cmp	r3, #0
   13ab0:	bne	13e3c <__assert_fail@plt+0x2edc>
   13ab4:	eor	r3, r6, #1
   13ab8:	ands	r2, r2, r3
   13abc:	beq	14630 <__assert_fail@plt+0x36d0>
   13ac0:	ldr	r3, [sp, #68]	; 0x44
   13ac4:	cmp	r3, #0
   13ac8:	beq	14668 <__assert_fail@plt+0x3708>
   13acc:	ldr	r3, [sp, #72]	; 0x48
   13ad0:	cmp	r3, #0
   13ad4:	beq	1460c <__assert_fail@plt+0x36ac>
   13ad8:	ldr	r3, [sp, #160]	; 0xa0
   13adc:	ldr	r2, [sp, #44]	; 0x2c
   13ae0:	str	r3, [sp, #16]
   13ae4:	ldr	r3, [sp, #156]	; 0x9c
   13ae8:	ldr	r1, [sp, #60]	; 0x3c
   13aec:	str	r3, [sp, #12]
   13af0:	ldr	r3, [sp, #152]	; 0x98
   13af4:	str	r3, [sp, #8]
   13af8:	ldr	r3, [sp, #148]	; 0x94
   13afc:	str	r3, [sp, #4]
   13b00:	mov	r3, #5
   13b04:	str	r3, [sp]
   13b08:	ldr	r3, [sp, #36]	; 0x24
   13b0c:	mov	r0, r8
   13b10:	bl	13990 <__assert_fail@plt+0x2a30>
   13b14:	mov	r4, r0
   13b18:	b	1465c <__assert_fail@plt+0x36fc>
   13b1c:	cmp	sl, #10
   13b20:	beq	13b7c <__assert_fail@plt+0x2c1c>
   13b24:	ldr	r4, [pc, #2956]	; 146b8 <__assert_fail@plt+0x3758>
   13b28:	mov	r2, #5
   13b2c:	mov	r1, r4
   13b30:	mov	r0, #0
   13b34:	bl	10d8c <dcgettext@plt>
   13b38:	cmp	r0, r4
   13b3c:	str	r0, [sp, #156]	; 0x9c
   13b40:	bne	13b50 <__assert_fail@plt+0x2bf0>
   13b44:	mov	r1, sl
   13b48:	bl	1387c <__assert_fail@plt+0x291c>
   13b4c:	str	r0, [sp, #156]	; 0x9c
   13b50:	ldr	r4, [pc, #2916]	; 146bc <__assert_fail@plt+0x375c>
   13b54:	mov	r2, #5
   13b58:	mov	r1, r4
   13b5c:	mov	r0, #0
   13b60:	bl	10d8c <dcgettext@plt>
   13b64:	cmp	r0, r4
   13b68:	str	r0, [sp, #160]	; 0xa0
   13b6c:	bne	13b7c <__assert_fail@plt+0x2c1c>
   13b70:	mov	r1, sl
   13b74:	bl	1387c <__assert_fail@plt+0x291c>
   13b78:	str	r0, [sp, #160]	; 0xa0
   13b7c:	cmp	r6, #0
   13b80:	moveq	r4, r6
   13b84:	beq	13b9c <__assert_fail@plt+0x2c3c>
   13b88:	mov	r4, #0
   13b8c:	b	13bac <__assert_fail@plt+0x2c4c>
   13b90:	cmp	r5, r4
   13b94:	strbhi	r3, [r8, r4]
   13b98:	add	r4, r4, #1
   13b9c:	ldr	r3, [sp, #156]	; 0x9c
   13ba0:	ldrb	r3, [r3, r4]
   13ba4:	cmp	r3, #0
   13ba8:	bne	13b90 <__assert_fail@plt+0x2c30>
   13bac:	ldr	r0, [sp, #160]	; 0xa0
   13bb0:	bl	10e58 <strlen@plt>
   13bb4:	ldr	r3, [sp, #160]	; 0xa0
   13bb8:	str	r3, [sp, #40]	; 0x28
   13bbc:	mov	r3, #1
   13bc0:	str	r3, [sp, #24]
   13bc4:	str	r0, [sp, #32]
   13bc8:	b	13a50 <__assert_fail@plt+0x2af0>
   13bcc:	mov	r3, #1
   13bd0:	cmp	r6, #0
   13bd4:	streq	r3, [sp, #24]
   13bd8:	beq	13bf8 <__assert_fail@plt+0x2c98>
   13bdc:	str	r3, [sp, #32]
   13be0:	ldr	r3, [pc, #2772]	; 146bc <__assert_fail@plt+0x375c>
   13be4:	mov	r4, #0
   13be8:	str	r3, [sp, #40]	; 0x28
   13bec:	b	13c1c <__assert_fail@plt+0x2cbc>
   13bf0:	cmp	r6, #0
   13bf4:	bne	13c64 <__assert_fail@plt+0x2d04>
   13bf8:	cmp	r5, #0
   13bfc:	movne	r3, #39	; 0x27
   13c00:	strbne	r3, [r8]
   13c04:	mov	r3, #1
   13c08:	str	r3, [sp, #32]
   13c0c:	mov	r6, #0
   13c10:	ldr	r3, [pc, #2724]	; 146bc <__assert_fail@plt+0x375c>
   13c14:	mov	r4, #1
   13c18:	str	r3, [sp, #40]	; 0x28
   13c1c:	mov	sl, #2
   13c20:	b	13a50 <__assert_fail@plt+0x2af0>
   13c24:	bl	10f48 <abort@plt>
   13c28:	mov	r6, #0
   13c2c:	mov	r3, #1
   13c30:	str	r3, [sp, #24]
   13c34:	mov	r4, r6
   13c38:	b	13a50 <__assert_fail@plt+0x2af0>
   13c3c:	mov	r6, #1
   13c40:	str	r6, [sp, #24]
   13c44:	str	r6, [sp, #32]
   13c48:	b	13be0 <__assert_fail@plt+0x2c80>
   13c4c:	mov	r3, #1
   13c50:	str	r3, [sp, #32]
   13c54:	ldr	r3, [pc, #2648]	; 146b4 <__assert_fail@plt+0x3754>
   13c58:	str	r6, [sp, #24]
   13c5c:	str	r3, [sp, #40]	; 0x28
   13c60:	b	13a1c <__assert_fail@plt+0x2abc>
   13c64:	mov	r3, #1
   13c68:	str	r3, [sp, #32]
   13c6c:	ldr	r3, [pc, #2632]	; 146bc <__assert_fail@plt+0x375c>
   13c70:	b	13c5c <__assert_fail@plt+0x2cfc>
   13c74:	ldr	r3, [sp, #32]
   13c78:	ldr	fp, [sp, #24]
   13c7c:	cmp	sl, #2
   13c80:	moveq	fp, #0
   13c84:	andne	fp, fp, #1
   13c88:	adds	r5, r3, #0
   13c8c:	movne	r5, #1
   13c90:	ands	r3, r5, fp
   13c94:	str	r3, [sp, #64]	; 0x40
   13c98:	beq	13d68 <__assert_fail@plt+0x2e08>
   13c9c:	ldr	r2, [sp, #32]
   13ca0:	ldr	r3, [sp, #28]
   13ca4:	add	r7, r3, r2
   13ca8:	mov	r3, r2
   13cac:	ldr	r2, [sp, #36]	; 0x24
   13cb0:	cmp	r3, #1
   13cb4:	movls	r3, #0
   13cb8:	movhi	r3, #1
   13cbc:	cmn	r2, #1
   13cc0:	movne	r3, #0
   13cc4:	cmp	r3, #0
   13cc8:	beq	13cd8 <__assert_fail@plt+0x2d78>
   13ccc:	ldr	r0, [sp, #44]	; 0x2c
   13cd0:	bl	10e58 <strlen@plt>
   13cd4:	str	r0, [sp, #36]	; 0x24
   13cd8:	ldr	r3, [sp, #36]	; 0x24
   13cdc:	cmp	r3, r7
   13ce0:	bcc	13d60 <__assert_fail@plt+0x2e00>
   13ce4:	ldr	r3, [sp, #44]	; 0x2c
   13ce8:	ldr	r0, [sp, #28]
   13cec:	ldr	r2, [sp, #32]
   13cf0:	ldr	r1, [sp, #40]	; 0x28
   13cf4:	add	r0, r3, r0
   13cf8:	bl	10d74 <memcmp@plt>
   13cfc:	cmp	r0, #0
   13d00:	bne	13d60 <__assert_fail@plt+0x2e00>
   13d04:	cmp	r6, #0
   13d08:	beq	13d68 <__assert_fail@plt+0x2e08>
   13d0c:	str	r6, [sp, #24]
   13d10:	ldr	r3, [sp, #24]
   13d14:	ldr	r2, [sp, #44]	; 0x2c
   13d18:	cmp	sl, #2
   13d1c:	movne	r3, #0
   13d20:	andeq	r3, r3, #1
   13d24:	cmp	r3, #0
   13d28:	ldr	r3, [sp, #160]	; 0xa0
   13d2c:	movne	sl, #4
   13d30:	str	r3, [sp, #16]
   13d34:	ldr	r3, [sp, #156]	; 0x9c
   13d38:	str	sl, [sp]
   13d3c:	str	r3, [sp, #12]
   13d40:	mov	r3, #0
   13d44:	str	r3, [sp, #8]
   13d48:	ldr	r3, [sp, #148]	; 0x94
   13d4c:	mov	r1, r9
   13d50:	bic	r3, r3, #2
   13d54:	str	r3, [sp, #4]
   13d58:	ldr	r3, [sp, #36]	; 0x24
   13d5c:	b	13b0c <__assert_fail@plt+0x2bac>
   13d60:	mov	r3, #0
   13d64:	str	r3, [sp, #64]	; 0x40
   13d68:	ldr	r2, [sp, #28]
   13d6c:	ldr	r3, [sp, #44]	; 0x2c
   13d70:	add	r3, r3, r2
   13d74:	str	r3, [sp, #80]	; 0x50
   13d78:	ldr	r3, [sp, #44]	; 0x2c
   13d7c:	ldrb	r7, [r3, r2]
   13d80:	cmp	r7, #58	; 0x3a
   13d84:	bhi	13eec <__assert_fail@plt+0x2f8c>
   13d88:	cmp	r7, #43	; 0x2b
   13d8c:	bcs	13f40 <__assert_fail@plt+0x2fe0>
   13d90:	cmp	r7, #32
   13d94:	beq	13f98 <__assert_fail@plt+0x3038>
   13d98:	bhi	13e44 <__assert_fail@plt+0x2ee4>
   13d9c:	cmp	r7, #9
   13da0:	beq	1424c <__assert_fail@plt+0x32ec>
   13da4:	bhi	13e08 <__assert_fail@plt+0x2ea8>
   13da8:	cmp	r7, #7
   13dac:	beq	142f8 <__assert_fail@plt+0x3398>
   13db0:	bhi	13fb4 <__assert_fail@plt+0x3054>
   13db4:	cmp	r7, #0
   13db8:	beq	13fd0 <__assert_fail@plt+0x3070>
   13dbc:	ldr	r3, [sp, #76]	; 0x4c
   13dc0:	cmp	r3, #1
   13dc4:	bne	1433c <__assert_fail@plt+0x33dc>
   13dc8:	bl	10e40 <__ctype_b_loc@plt>
   13dcc:	sxth	r3, r7
   13dd0:	lsl	r3, r3, #1
   13dd4:	ldr	r2, [r0]
   13dd8:	ldrh	r5, [r2, r3]
   13ddc:	ldr	r3, [sp, #76]	; 0x4c
   13de0:	str	r3, [sp, #56]	; 0x38
   13de4:	lsr	r5, r5, #14
   13de8:	and	r5, r5, #1
   13dec:	ldr	r3, [sp, #24]
   13df0:	eor	fp, r5, #1
   13df4:	and	fp, fp, r3
   13df8:	ands	fp, fp, #255	; 0xff
   13dfc:	beq	14184 <__assert_fail@plt+0x3224>
   13e00:	mov	r5, #0
   13e04:	b	143e8 <__assert_fail@plt+0x3488>
   13e08:	cmp	r7, #11
   13e0c:	beq	14254 <__assert_fail@plt+0x32f4>
   13e10:	bcc	142f0 <__assert_fail@plt+0x3390>
   13e14:	cmp	r7, #12
   13e18:	beq	14300 <__assert_fail@plt+0x33a0>
   13e1c:	cmp	r7, #13
   13e20:	moveq	r3, #114	; 0x72
   13e24:	bne	13dbc <__assert_fail@plt+0x2e5c>
   13e28:	cmp	sl, #2
   13e2c:	movne	r2, #0
   13e30:	andeq	r2, r6, #1
   13e34:	cmp	r2, #0
   13e38:	beq	13fb8 <__assert_fail@plt+0x3058>
   13e3c:	mov	sl, #2
   13e40:	b	13d10 <__assert_fail@plt+0x2db0>
   13e44:	cmp	r7, #37	; 0x25
   13e48:	beq	13f40 <__assert_fail@plt+0x2fe0>
   13e4c:	bhi	13e60 <__assert_fail@plt+0x2f00>
   13e50:	cmp	r7, #35	; 0x23
   13e54:	beq	13f8c <__assert_fail@plt+0x302c>
   13e58:	mov	r5, #0
   13e5c:	b	13f9c <__assert_fail@plt+0x303c>
   13e60:	cmp	r7, #39	; 0x27
   13e64:	bne	13e58 <__assert_fail@plt+0x2ef8>
   13e68:	cmp	sl, #2
   13e6c:	ldrne	r5, [sp, #52]	; 0x34
   13e70:	movne	r3, r5
   13e74:	strne	r3, [sp, #68]	; 0x44
   13e78:	bne	13f44 <__assert_fail@plt+0x2fe4>
   13e7c:	cmp	r6, #0
   13e80:	bne	13d10 <__assert_fail@plt+0x2db0>
   13e84:	ldr	r2, [sp, #60]	; 0x3c
   13e88:	adds	r3, r9, #0
   13e8c:	movne	r3, #1
   13e90:	cmp	r2, #0
   13e94:	movne	r3, #0
   13e98:	cmp	r3, #0
   13e9c:	strne	r9, [sp, #60]	; 0x3c
   13ea0:	movne	r9, #0
   13ea4:	bne	13eb4 <__assert_fail@plt+0x2f54>
   13ea8:	cmp	r9, r4
   13eac:	movhi	r3, #39	; 0x27
   13eb0:	strbhi	r3, [r8, r4]
   13eb4:	add	r3, r4, #1
   13eb8:	cmp	r3, r9
   13ebc:	movcc	r2, #92	; 0x5c
   13ec0:	strbcc	r2, [r8, r3]
   13ec4:	add	r3, r4, #2
   13ec8:	cmp	r3, r9
   13ecc:	ldr	r5, [sp, #52]	; 0x34
   13ed0:	movcc	r2, #39	; 0x27
   13ed4:	strbcc	r2, [r8, r3]
   13ed8:	add	r4, r4, #3
   13edc:	mov	fp, r6
   13ee0:	str	r5, [sp, #68]	; 0x44
   13ee4:	str	r6, [sp, #48]	; 0x30
   13ee8:	b	14184 <__assert_fail@plt+0x3224>
   13eec:	cmp	r7, #94	; 0x5e
   13ef0:	beq	13e58 <__assert_fail@plt+0x2ef8>
   13ef4:	bhi	13f4c <__assert_fail@plt+0x2fec>
   13ef8:	cmp	r7, #90	; 0x5a
   13efc:	bhi	13f34 <__assert_fail@plt+0x2fd4>
   13f00:	cmp	r7, #65	; 0x41
   13f04:	bcs	13f40 <__assert_fail@plt+0x2fe0>
   13f08:	cmp	r7, #62	; 0x3e
   13f0c:	bls	13e58 <__assert_fail@plt+0x2ef8>
   13f10:	cmp	r7, #63	; 0x3f
   13f14:	bne	13dbc <__assert_fail@plt+0x2e5c>
   13f18:	cmp	sl, #2
   13f1c:	beq	140c0 <__assert_fail@plt+0x3160>
   13f20:	cmp	sl, #5
   13f24:	beq	140d0 <__assert_fail@plt+0x3170>
   13f28:	mov	fp, #0
   13f2c:	mov	r5, fp
   13f30:	b	14184 <__assert_fail@plt+0x3224>
   13f34:	cmp	r7, #92	; 0x5c
   13f38:	beq	1425c <__assert_fail@plt+0x32fc>
   13f3c:	bls	13e58 <__assert_fail@plt+0x2ef8>
   13f40:	ldr	r5, [sp, #52]	; 0x34
   13f44:	mov	fp, #0
   13f48:	b	14184 <__assert_fail@plt+0x3224>
   13f4c:	cmp	r7, #122	; 0x7a
   13f50:	bhi	13f70 <__assert_fail@plt+0x3010>
   13f54:	cmp	r7, #97	; 0x61
   13f58:	bcs	13f40 <__assert_fail@plt+0x2fe0>
   13f5c:	cmp	r7, #95	; 0x5f
   13f60:	beq	13f40 <__assert_fail@plt+0x2fe0>
   13f64:	cmp	r7, #96	; 0x60
   13f68:	bne	13dbc <__assert_fail@plt+0x2e5c>
   13f6c:	b	13e58 <__assert_fail@plt+0x2ef8>
   13f70:	cmp	r7, #124	; 0x7c
   13f74:	beq	13e58 <__assert_fail@plt+0x2ef8>
   13f78:	bcc	14308 <__assert_fail@plt+0x33a8>
   13f7c:	cmp	r7, #125	; 0x7d
   13f80:	beq	14308 <__assert_fail@plt+0x33a8>
   13f84:	cmp	r7, #126	; 0x7e
   13f88:	bne	13dbc <__assert_fail@plt+0x2e5c>
   13f8c:	ldr	r3, [sp, #28]
   13f90:	cmp	r3, #0
   13f94:	bne	140c8 <__assert_fail@plt+0x3168>
   13f98:	ldr	r5, [sp, #52]	; 0x34
   13f9c:	cmp	sl, #2
   13fa0:	movne	fp, #0
   13fa4:	andeq	fp, r6, #1
   13fa8:	cmp	fp, #0
   13fac:	beq	14184 <__assert_fail@plt+0x3224>
   13fb0:	b	13e3c <__assert_fail@plt+0x2edc>
   13fb4:	mov	r3, #98	; 0x62
   13fb8:	ldr	r2, [sp, #24]
   13fbc:	cmp	r2, #0
   13fc0:	beq	140c8 <__assert_fail@plt+0x3168>
   13fc4:	mov	r7, r3
   13fc8:	mov	r5, #0
   13fcc:	b	141dc <__assert_fail@plt+0x327c>
   13fd0:	ldr	r3, [sp, #24]
   13fd4:	cmp	r3, #0
   13fd8:	beq	140a4 <__assert_fail@plt+0x3144>
   13fdc:	cmp	r6, #0
   13fe0:	bne	13d0c <__assert_fail@plt+0x2dac>
   13fe4:	ldr	r3, [sp, #48]	; 0x30
   13fe8:	eor	r2, r3, #1
   13fec:	cmp	sl, #2
   13ff0:	movne	r2, #0
   13ff4:	andeq	r2, r2, #1
   13ff8:	cmp	r2, #0
   13ffc:	moveq	r3, r4
   14000:	beq	14038 <__assert_fail@plt+0x30d8>
   14004:	cmp	r9, r4
   14008:	movhi	r3, #39	; 0x27
   1400c:	strbhi	r3, [r8, r4]
   14010:	add	r3, r4, #1
   14014:	cmp	r9, r3
   14018:	movhi	r1, #36	; 0x24
   1401c:	strbhi	r1, [r8, r3]
   14020:	add	r3, r4, #2
   14024:	cmp	r9, r3
   14028:	movhi	r1, #39	; 0x27
   1402c:	strbhi	r1, [r8, r3]
   14030:	add	r3, r4, #3
   14034:	str	r2, [sp, #48]	; 0x30
   14038:	cmp	r9, r3
   1403c:	movhi	r2, #92	; 0x5c
   14040:	strbhi	r2, [r8, r3]
   14044:	cmp	fp, #0
   14048:	add	r4, r3, #1
   1404c:	beq	145dc <__assert_fail@plt+0x367c>
   14050:	ldr	r2, [sp, #28]
   14054:	ldr	r1, [sp, #36]	; 0x24
   14058:	add	r2, r2, #1
   1405c:	cmp	r1, r2
   14060:	bls	1409c <__assert_fail@plt+0x313c>
   14064:	ldr	r1, [sp, #44]	; 0x2c
   14068:	mov	r7, #48	; 0x30
   1406c:	ldrb	r2, [r1, r2]
   14070:	sub	r2, r2, #48	; 0x30
   14074:	cmp	r2, #9
   14078:	movhi	r5, r6
   1407c:	bhi	14184 <__assert_fail@plt+0x3224>
   14080:	cmp	r9, r4
   14084:	add	r2, r3, #2
   14088:	strbhi	r7, [r8, r4]
   1408c:	cmp	r9, r2
   14090:	add	r4, r3, #3
   14094:	movhi	r1, #48	; 0x30
   14098:	strbhi	r1, [r8, r2]
   1409c:	mov	r5, r6
   140a0:	b	145e4 <__assert_fail@plt+0x3684>
   140a4:	ldr	r3, [sp, #148]	; 0x94
   140a8:	tst	r3, #1
   140ac:	ldreq	r5, [sp, #24]
   140b0:	beq	145f0 <__assert_fail@plt+0x3690>
   140b4:	ldr	r3, [sp, #28]
   140b8:	add	r3, r3, #1
   140bc:	b	13a5c <__assert_fail@plt+0x2afc>
   140c0:	cmp	r6, #0
   140c4:	bne	13d10 <__assert_fail@plt+0x2db0>
   140c8:	mov	r5, #0
   140cc:	b	13f44 <__assert_fail@plt+0x2fe4>
   140d0:	ldr	r3, [sp, #148]	; 0x94
   140d4:	tst	r3, #4
   140d8:	beq	140c8 <__assert_fail@plt+0x3168>
   140dc:	ldr	r3, [sp, #28]
   140e0:	add	r2, r3, #2
   140e4:	ldr	r3, [sp, #36]	; 0x24
   140e8:	cmp	r3, r2
   140ec:	bls	140c8 <__assert_fail@plt+0x3168>
   140f0:	ldr	r3, [sp, #44]	; 0x2c
   140f4:	ldr	r1, [sp, #28]
   140f8:	add	r3, r3, r1
   140fc:	ldrb	r0, [r3, #1]
   14100:	cmp	r0, #63	; 0x3f
   14104:	bne	140c8 <__assert_fail@plt+0x3168>
   14108:	ldr	r3, [sp, #44]	; 0x2c
   1410c:	ldrb	r1, [r3, r2]
   14110:	sub	r3, r1, #33	; 0x21
   14114:	uxtb	r3, r3
   14118:	cmp	r3, #29
   1411c:	bhi	145ec <__assert_fail@plt+0x368c>
   14120:	mov	ip, #1
   14124:	ldr	r5, [pc, #1428]	; 146c0 <__assert_fail@plt+0x3760>
   14128:	ands	r5, r5, ip, lsl r3
   1412c:	beq	13f44 <__assert_fail@plt+0x2fe4>
   14130:	cmp	r6, #0
   14134:	bne	13d10 <__assert_fail@plt+0x2db0>
   14138:	add	r3, r4, #1
   1413c:	cmp	r9, r4
   14140:	strbhi	r0, [r8, r4]
   14144:	cmp	r9, r3
   14148:	movhi	r0, #34	; 0x22
   1414c:	strbhi	r0, [r8, r3]
   14150:	add	r3, r4, #2
   14154:	cmp	r9, r3
   14158:	movhi	r0, #34	; 0x22
   1415c:	strbhi	r0, [r8, r3]
   14160:	add	r3, r4, #3
   14164:	cmp	r9, r3
   14168:	add	r4, r4, #4
   1416c:	mov	r5, r6
   14170:	mov	fp, r6
   14174:	mov	r7, r1
   14178:	movhi	r0, #63	; 0x3f
   1417c:	strbhi	r0, [r8, r3]
   14180:	str	r2, [sp, #28]
   14184:	ldr	r3, [sp, #24]
   14188:	eor	r3, r3, #1
   1418c:	cmp	sl, #2
   14190:	orreq	r3, r3, #1
   14194:	eor	r3, r3, #1
   14198:	orr	r3, r6, r3
   1419c:	tst	r3, #255	; 0xff
   141a0:	beq	141d0 <__assert_fail@plt+0x3270>
   141a4:	ldr	r3, [sp, #152]	; 0x98
   141a8:	cmp	r3, #0
   141ac:	beq	141d0 <__assert_fail@plt+0x3270>
   141b0:	lsr	r2, r7, #5
   141b4:	ldr	r1, [sp, #152]	; 0x98
   141b8:	uxtb	r2, r2
   141bc:	and	r3, r7, #31
   141c0:	ldr	r2, [r1, r2, lsl #2]
   141c4:	lsr	r3, r2, r3
   141c8:	tst	r3, #1
   141cc:	bne	141dc <__assert_fail@plt+0x327c>
   141d0:	ldr	r3, [sp, #64]	; 0x40
   141d4:	cmp	r3, #0
   141d8:	beq	14274 <__assert_fail@plt+0x3314>
   141dc:	cmp	r6, #0
   141e0:	bne	13d10 <__assert_fail@plt+0x2db0>
   141e4:	ldr	r3, [sp, #48]	; 0x30
   141e8:	eor	r3, r3, #1
   141ec:	cmp	sl, #2
   141f0:	movne	r3, #0
   141f4:	andeq	r3, r3, #1
   141f8:	cmp	r3, #0
   141fc:	beq	14234 <__assert_fail@plt+0x32d4>
   14200:	cmp	r9, r4
   14204:	movhi	r2, #39	; 0x27
   14208:	strbhi	r2, [r8, r4]
   1420c:	add	r2, r4, #1
   14210:	cmp	r9, r2
   14214:	movhi	r1, #36	; 0x24
   14218:	strbhi	r1, [r8, r2]
   1421c:	add	r2, r4, #2
   14220:	cmp	r9, r2
   14224:	add	r4, r4, #3
   14228:	movhi	r1, #39	; 0x27
   1422c:	strbhi	r1, [r8, r2]
   14230:	str	r3, [sp, #48]	; 0x30
   14234:	cmp	r9, r4
   14238:	movhi	r3, #92	; 0x5c
   1423c:	strbhi	r3, [r8, r4]
   14240:	ldr	fp, [sp, #52]	; 0x34
   14244:	add	r4, r4, #1
   14248:	b	14274 <__assert_fail@plt+0x3314>
   1424c:	mov	r3, #116	; 0x74
   14250:	b	13e28 <__assert_fail@plt+0x2ec8>
   14254:	mov	r3, #118	; 0x76
   14258:	b	13fb8 <__assert_fail@plt+0x3058>
   1425c:	cmp	sl, #2
   14260:	bne	142d0 <__assert_fail@plt+0x3370>
   14264:	cmp	r6, #0
   14268:	bne	13d10 <__assert_fail@plt+0x2db0>
   1426c:	mov	r5, r6
   14270:	mov	fp, r6
   14274:	ldr	r3, [sp, #48]	; 0x30
   14278:	eor	fp, fp, #1
   1427c:	and	fp, fp, r3
   14280:	tst	fp, #255	; 0xff
   14284:	beq	142b0 <__assert_fail@plt+0x3350>
   14288:	cmp	r9, r4
   1428c:	movhi	r3, #39	; 0x27
   14290:	strbhi	r3, [r8, r4]
   14294:	add	r3, r4, #1
   14298:	cmp	r9, r3
   1429c:	movhi	r2, #39	; 0x27
   142a0:	add	r4, r4, #2
   142a4:	strbhi	r2, [r8, r3]
   142a8:	mov	r3, #0
   142ac:	str	r3, [sp, #48]	; 0x30
   142b0:	cmp	r9, r4
   142b4:	strbhi	r7, [r8, r4]
   142b8:	ldr	r3, [sp, #72]	; 0x48
   142bc:	cmp	r5, #0
   142c0:	moveq	r3, #0
   142c4:	add	r4, r4, #1
   142c8:	str	r3, [sp, #72]	; 0x48
   142cc:	b	140b4 <__assert_fail@plt+0x3154>
   142d0:	ldr	r3, [sp, #24]
   142d4:	and	r3, r3, r6
   142d8:	tst	r5, r3
   142dc:	moveq	r3, r7
   142e0:	beq	13e28 <__assert_fail@plt+0x2ec8>
   142e4:	mov	fp, #0
   142e8:	mov	r5, fp
   142ec:	b	14274 <__assert_fail@plt+0x3314>
   142f0:	mov	r3, #110	; 0x6e
   142f4:	b	13e28 <__assert_fail@plt+0x2ec8>
   142f8:	mov	r3, #97	; 0x61
   142fc:	b	13fb8 <__assert_fail@plt+0x3058>
   14300:	mov	r3, #102	; 0x66
   14304:	b	13fb8 <__assert_fail@plt+0x3058>
   14308:	ldr	r3, [sp, #36]	; 0x24
   1430c:	cmn	r3, #1
   14310:	bne	14330 <__assert_fail@plt+0x33d0>
   14314:	ldr	r3, [sp, #44]	; 0x2c
   14318:	ldrb	r3, [r3, #1]
   1431c:	adds	r3, r3, #0
   14320:	movne	r3, #1
   14324:	cmp	r3, #0
   14328:	bne	140c8 <__assert_fail@plt+0x3168>
   1432c:	b	13f8c <__assert_fail@plt+0x302c>
   14330:	ldr	r3, [sp, #36]	; 0x24
   14334:	subs	r3, r3, #1
   14338:	b	14320 <__assert_fail@plt+0x33c0>
   1433c:	mov	r3, #0
   14340:	str	r3, [sp, #96]	; 0x60
   14344:	str	r3, [sp, #100]	; 0x64
   14348:	ldr	r3, [sp, #36]	; 0x24
   1434c:	cmn	r3, #1
   14350:	bne	14360 <__assert_fail@plt+0x3400>
   14354:	ldr	r0, [sp, #44]	; 0x2c
   14358:	bl	10e58 <strlen@plt>
   1435c:	str	r0, [sp, #36]	; 0x24
   14360:	ldr	r5, [sp, #52]	; 0x34
   14364:	mov	r3, #0
   14368:	str	r3, [sp, #56]	; 0x38
   1436c:	ldr	r3, [sp, #28]
   14370:	ldr	r2, [sp, #56]	; 0x38
   14374:	ldr	r1, [sp, #36]	; 0x24
   14378:	add	r2, r3, r2
   1437c:	ldr	r3, [sp, #44]	; 0x2c
   14380:	add	r0, sp, #92	; 0x5c
   14384:	add	fp, r3, r2
   14388:	sub	r2, r1, r2
   1438c:	add	r3, sp, #96	; 0x60
   14390:	mov	r1, fp
   14394:	bl	15da8 <__assert_fail@plt+0x4e48>
   14398:	subs	r2, r0, #0
   1439c:	beq	143dc <__assert_fail@plt+0x347c>
   143a0:	cmn	r2, #1
   143a4:	beq	145b4 <__assert_fail@plt+0x3654>
   143a8:	cmn	r2, #2
   143ac:	bne	14524 <__assert_fail@plt+0x35c4>
   143b0:	ldr	r2, [sp, #56]	; 0x38
   143b4:	ldr	r3, [sp, #28]
   143b8:	add	r3, r3, r2
   143bc:	ldr	r2, [sp, #36]	; 0x24
   143c0:	cmp	r2, r3
   143c4:	bls	145b4 <__assert_fail@plt+0x3654>
   143c8:	ldr	r3, [sp, #80]	; 0x50
   143cc:	ldr	r2, [sp, #56]	; 0x38
   143d0:	ldrb	r5, [r3, r2]
   143d4:	cmp	r5, #0
   143d8:	bne	14514 <__assert_fail@plt+0x35b4>
   143dc:	ldr	r3, [sp, #56]	; 0x38
   143e0:	cmp	r3, #1
   143e4:	bls	13dec <__assert_fail@plt+0x2e8c>
   143e8:	ldr	r2, [sp, #56]	; 0x38
   143ec:	ldr	r3, [sp, #28]
   143f0:	mov	fp, #0
   143f4:	add	r3, r3, r2
   143f8:	ldr	r2, [sp, #24]
   143fc:	str	r3, [sp, #52]	; 0x34
   14400:	eor	r3, r5, #1
   14404:	and	r3, r3, r2
   14408:	mov	ip, #92	; 0x5c
   1440c:	uxtb	r3, r3
   14410:	mov	r2, #39	; 0x27
   14414:	cmp	r3, #0
   14418:	beq	145bc <__assert_fail@plt+0x365c>
   1441c:	cmp	r6, #0
   14420:	bne	13d0c <__assert_fail@plt+0x2dac>
   14424:	ldr	r1, [sp, #48]	; 0x30
   14428:	eor	r1, r1, #1
   1442c:	cmp	sl, #2
   14430:	movne	r1, #0
   14434:	andeq	r1, r1, #1
   14438:	cmp	r1, #0
   1443c:	beq	1446c <__assert_fail@plt+0x350c>
   14440:	add	r0, r4, #1
   14444:	cmp	r9, r4
   14448:	strbhi	r2, [r8, r4]
   1444c:	cmp	r9, r0
   14450:	movhi	lr, #36	; 0x24
   14454:	strbhi	lr, [r8, r0]
   14458:	add	r0, r4, #2
   1445c:	add	r4, r4, #3
   14460:	cmp	r9, r0
   14464:	strbhi	r2, [r8, r0]
   14468:	str	r1, [sp, #48]	; 0x30
   1446c:	add	r0, r4, #1
   14470:	cmp	r9, r4
   14474:	strbhi	ip, [r8, r4]
   14478:	cmp	r9, r0
   1447c:	lsrhi	r1, r7, #6
   14480:	addhi	r1, r1, #48	; 0x30
   14484:	strbhi	r1, [r8, r0]
   14488:	add	r0, r4, #2
   1448c:	cmp	r9, r0
   14490:	lsrhi	r1, r7, #3
   14494:	and	r7, r7, #7
   14498:	andhi	r1, r1, #7
   1449c:	add	r4, r4, #3
   144a0:	add	r7, r7, #48	; 0x30
   144a4:	mov	fp, r3
   144a8:	addhi	r1, r1, #48	; 0x30
   144ac:	strbhi	r1, [r8, r0]
   144b0:	ldr	r1, [sp, #28]
   144b4:	ldr	r0, [sp, #52]	; 0x34
   144b8:	add	r1, r1, #1
   144bc:	cmp	r0, r1
   144c0:	bls	14274 <__assert_fail@plt+0x3314>
   144c4:	ldr	lr, [sp, #48]	; 0x30
   144c8:	eor	r0, fp, #1
   144cc:	and	r0, r0, lr
   144d0:	tst	r0, #255	; 0xff
   144d4:	beq	144f8 <__assert_fail@plt+0x3598>
   144d8:	add	r0, r4, #1
   144dc:	cmp	r9, r4
   144e0:	strbhi	r2, [r8, r4]
   144e4:	cmp	r9, r0
   144e8:	add	r4, r4, #2
   144ec:	strbhi	r2, [r8, r0]
   144f0:	mov	r0, #0
   144f4:	str	r0, [sp, #48]	; 0x30
   144f8:	ldr	r0, [sp, #44]	; 0x2c
   144fc:	cmp	r9, r4
   14500:	strbhi	r7, [r8, r4]
   14504:	str	r1, [sp, #28]
   14508:	add	r4, r4, #1
   1450c:	ldrb	r7, [r0, r1]
   14510:	b	14414 <__assert_fail@plt+0x34b4>
   14514:	ldr	r3, [sp, #56]	; 0x38
   14518:	add	r3, r3, #1
   1451c:	str	r3, [sp, #56]	; 0x38
   14520:	b	143b0 <__assert_fail@plt+0x3450>
   14524:	cmp	sl, #2
   14528:	movne	r3, #0
   1452c:	andeq	r3, r6, #1
   14530:	cmp	r3, #0
   14534:	movne	r1, #1
   14538:	bne	14594 <__assert_fail@plt+0x3634>
   1453c:	ldr	r0, [sp, #92]	; 0x5c
   14540:	str	r2, [sp, #84]	; 0x54
   14544:	bl	10db0 <iswprint@plt>
   14548:	ldr	r3, [sp, #56]	; 0x38
   1454c:	ldr	r2, [sp, #84]	; 0x54
   14550:	add	r3, r3, r2
   14554:	str	r3, [sp, #56]	; 0x38
   14558:	cmp	r0, #0
   1455c:	add	r0, sp, #96	; 0x60
   14560:	moveq	r5, #0
   14564:	bl	10d5c <mbsinit@plt>
   14568:	cmp	r0, #0
   1456c:	beq	1436c <__assert_fail@plt+0x340c>
   14570:	b	143dc <__assert_fail@plt+0x347c>
   14574:	ldrb	r3, [fp, r1]
   14578:	cmp	r3, #94	; 0x5e
   1457c:	beq	13e3c <__assert_fail@plt+0x2edc>
   14580:	bhi	145a0 <__assert_fail@plt+0x3640>
   14584:	sub	r3, r3, #91	; 0x5b
   14588:	cmp	r3, #1
   1458c:	bls	13e3c <__assert_fail@plt+0x2edc>
   14590:	add	r1, r1, #1
   14594:	cmp	r1, r2
   14598:	bne	14574 <__assert_fail@plt+0x3614>
   1459c:	b	1453c <__assert_fail@plt+0x35dc>
   145a0:	cmp	r3, #96	; 0x60
   145a4:	beq	13e3c <__assert_fail@plt+0x2edc>
   145a8:	cmp	r3, #124	; 0x7c
   145ac:	bne	14590 <__assert_fail@plt+0x3630>
   145b0:	b	13e3c <__assert_fail@plt+0x2edc>
   145b4:	mov	r5, #0
   145b8:	b	143dc <__assert_fail@plt+0x347c>
   145bc:	ldr	r1, [sp, #64]	; 0x40
   145c0:	cmp	r1, #0
   145c4:	beq	144b0 <__assert_fail@plt+0x3550>
   145c8:	cmp	r9, r4
   145cc:	strbhi	ip, [r8, r4]
   145d0:	str	r3, [sp, #64]	; 0x40
   145d4:	add	r4, r4, #1
   145d8:	b	144b0 <__assert_fail@plt+0x3550>
   145dc:	mov	r5, fp
   145e0:	ldr	fp, [sp, #24]
   145e4:	mov	r7, #48	; 0x30
   145e8:	b	14184 <__assert_fail@plt+0x3224>
   145ec:	mov	r5, #0
   145f0:	mov	fp, r5
   145f4:	b	14184 <__assert_fail@plt+0x3224>
   145f8:	ldr	r3, [sp, #36]	; 0x24
   145fc:	ldr	r2, [sp, #28]
   14600:	subs	r3, r3, r2
   14604:	movne	r3, #1
   14608:	b	13a80 <__assert_fail@plt+0x2b20>
   1460c:	ldr	r3, [sp, #60]	; 0x3c
   14610:	clz	r7, r9
   14614:	cmp	r3, #0
   14618:	lsr	r7, r7, #5
   1461c:	moveq	r7, #0
   14620:	cmp	r7, #0
   14624:	mov	r5, r3
   14628:	bne	139e0 <__assert_fail@plt+0x2a80>
   1462c:	ldr	r3, [sp, #68]	; 0x44
   14630:	ldr	r2, [sp, #40]	; 0x28
   14634:	cmp	r2, #0
   14638:	moveq	r3, #0
   1463c:	andne	r3, r3, #1
   14640:	cmp	r3, #0
   14644:	movne	r3, r2
   14648:	subne	r2, r3, #1
   1464c:	bne	1467c <__assert_fail@plt+0x371c>
   14650:	cmp	r9, r4
   14654:	movhi	r3, #0
   14658:	strbhi	r3, [r8, r4]
   1465c:	mov	r0, r4
   14660:	add	sp, sp, #108	; 0x6c
   14664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14668:	mov	r3, r2
   1466c:	b	14630 <__assert_fail@plt+0x36d0>
   14670:	cmp	r9, r4
   14674:	strbhi	r3, [r8, r4]
   14678:	add	r4, r4, #1
   1467c:	ldrb	r3, [r2, #1]!
   14680:	cmp	r3, #0
   14684:	bne	14670 <__assert_fail@plt+0x3710>
   14688:	b	14650 <__assert_fail@plt+0x36f0>
   1468c:	ldr	r3, [pc, #32]	; 146b4 <__assert_fail@plt+0x3754>
   14690:	mov	r6, #1
   14694:	str	r6, [sp, #24]
   14698:	str	r6, [sp, #32]
   1469c:	str	r3, [sp, #40]	; 0x28
   146a0:	mov	r4, #0
   146a4:	mov	sl, #5
   146a8:	b	13a50 <__assert_fail@plt+0x2af0>
   146ac:	mov	r6, #1
   146b0:	b	13c44 <__assert_fail@plt+0x2ce4>
   146b4:	andeq	r7, r1, r3, lsr r4
   146b8:	andeq	r7, r1, r7, lsr r4
   146bc:	andeq	r7, r1, r5, lsr r4
   146c0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   146c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c8:	sub	sp, sp, #52	; 0x34
   146cc:	mov	r6, r0
   146d0:	mov	r5, r3
   146d4:	mov	r8, r1
   146d8:	mov	r9, r2
   146dc:	bl	10e70 <__errno_location@plt>
   146e0:	ldr	r7, [pc, #380]	; 14864 <__assert_fail@plt+0x3904>
   146e4:	cmn	r6, #-2147483647	; 0x80000001
   146e8:	ldr	r4, [r7]
   146ec:	ldr	r3, [r0]
   146f0:	str	r0, [sp, #24]
   146f4:	str	r3, [sp, #32]
   146f8:	movne	r3, #0
   146fc:	moveq	r3, #1
   14700:	orrs	r3, r3, r6, lsr #31
   14704:	beq	1470c <__assert_fail@plt+0x37ac>
   14708:	bl	10f48 <abort@plt>
   1470c:	ldr	r2, [r7, #4]
   14710:	cmp	r6, r2
   14714:	blt	14784 <__assert_fail@plt+0x3824>
   14718:	add	r1, sp, #48	; 0x30
   1471c:	add	sl, r7, #8
   14720:	str	r2, [r1, #-4]!
   14724:	cmp	r4, sl
   14728:	mov	r3, #8
   1472c:	sub	r2, r6, r2
   14730:	movne	r0, r4
   14734:	str	r3, [sp]
   14738:	add	r2, r2, #1
   1473c:	mvn	r3, #-2147483648	; 0x80000000
   14740:	moveq	r0, #0
   14744:	bl	15458 <__assert_fail@plt+0x44f8>
   14748:	cmp	r4, sl
   1474c:	ldr	r2, [sp, #44]	; 0x2c
   14750:	mov	fp, r0
   14754:	str	r0, [r7]
   14758:	ldmeq	r4, {r0, r1}
   1475c:	mov	r4, fp
   14760:	stmeq	fp, {r0, r1}
   14764:	ldr	r0, [r7, #4]
   14768:	mov	r1, #0
   1476c:	sub	r2, r2, r0
   14770:	add	r0, fp, r0, lsl #3
   14774:	lsl	r2, r2, #3
   14778:	bl	10e88 <memset@plt>
   1477c:	ldr	r3, [sp, #44]	; 0x2c
   14780:	str	r3, [r7, #4]
   14784:	ldr	r3, [r5, #4]
   14788:	add	sl, r4, r6, lsl #3
   1478c:	orr	r3, r3, #1
   14790:	str	r3, [sp, #28]
   14794:	add	r3, r5, #8
   14798:	str	r3, [sp, #36]	; 0x24
   1479c:	ldr	r3, [r5, #44]	; 0x2c
   147a0:	ldr	fp, [r4, r6, lsl #3]
   147a4:	ldr	r7, [sl, #4]
   147a8:	str	r3, [sp, #16]
   147ac:	ldr	r3, [r5, #40]	; 0x28
   147b0:	mov	r2, r8
   147b4:	str	r3, [sp, #12]
   147b8:	add	r3, r5, #8
   147bc:	str	r3, [sp, #8]
   147c0:	ldr	r3, [sp, #28]
   147c4:	mov	r1, fp
   147c8:	str	r3, [sp, #4]
   147cc:	ldr	r3, [r5]
   147d0:	mov	r0, r7
   147d4:	str	r3, [sp]
   147d8:	mov	r3, r9
   147dc:	bl	13990 <__assert_fail@plt+0x2a30>
   147e0:	cmp	fp, r0
   147e4:	bhi	1484c <__assert_fail@plt+0x38ec>
   147e8:	ldr	r3, [pc, #120]	; 14868 <__assert_fail@plt+0x3908>
   147ec:	add	fp, r0, #1
   147f0:	cmp	r7, r3
   147f4:	str	fp, [r4, r6, lsl #3]
   147f8:	beq	14804 <__assert_fail@plt+0x38a4>
   147fc:	mov	r0, r7
   14800:	bl	136b8 <__assert_fail@plt+0x2758>
   14804:	mov	r0, fp
   14808:	bl	15310 <__assert_fail@plt+0x43b0>
   1480c:	ldr	r3, [r5, #44]	; 0x2c
   14810:	mov	r2, r8
   14814:	mov	r1, fp
   14818:	str	r0, [sl, #4]
   1481c:	str	r3, [sp, #16]
   14820:	ldr	r3, [r5, #40]	; 0x28
   14824:	mov	r7, r0
   14828:	str	r3, [sp, #12]
   1482c:	add	r3, r5, #8
   14830:	str	r3, [sp, #8]
   14834:	ldr	r3, [sp, #28]
   14838:	str	r3, [sp, #4]
   1483c:	ldr	r3, [r5]
   14840:	str	r3, [sp]
   14844:	mov	r3, r9
   14848:	bl	13990 <__assert_fail@plt+0x2a30>
   1484c:	ldr	r3, [sp, #24]
   14850:	ldr	r2, [sp, #32]
   14854:	mov	r0, r7
   14858:	str	r2, [r3]
   1485c:	add	sp, sp, #52	; 0x34
   14860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14864:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14868:	andeq	r8, r2, r0, lsl #3
   1486c:	push	{r4, r5, r6, lr}
   14870:	mov	r5, r0
   14874:	bl	10e70 <__errno_location@plt>
   14878:	cmp	r5, #0
   1487c:	mov	r1, #48	; 0x30
   14880:	ldr	r6, [r0]
   14884:	mov	r4, r0
   14888:	ldr	r0, [pc, #12]	; 1489c <__assert_fail@plt+0x393c>
   1488c:	movne	r0, r5
   14890:	bl	156ec <__assert_fail@plt+0x478c>
   14894:	str	r6, [r4]
   14898:	pop	{r4, r5, r6, pc}
   1489c:	andeq	r8, r2, r0, lsl #5
   148a0:	ldr	r3, [pc, #12]	; 148b4 <__assert_fail@plt+0x3954>
   148a4:	cmp	r0, #0
   148a8:	moveq	r0, r3
   148ac:	ldr	r0, [r0]
   148b0:	bx	lr
   148b4:	andeq	r8, r2, r0, lsl #5
   148b8:	ldr	r3, [pc, #12]	; 148cc <__assert_fail@plt+0x396c>
   148bc:	cmp	r0, #0
   148c0:	moveq	r0, r3
   148c4:	str	r1, [r0]
   148c8:	bx	lr
   148cc:	andeq	r8, r2, r0, lsl #5
   148d0:	ldr	r3, [pc, #52]	; 1490c <__assert_fail@plt+0x39ac>
   148d4:	cmp	r0, #0
   148d8:	moveq	r0, r3
   148dc:	add	r3, r0, #8
   148e0:	push	{lr}		; (str lr, [sp, #-4]!)
   148e4:	lsr	lr, r1, #5
   148e8:	and	r1, r1, #31
   148ec:	ldr	ip, [r3, lr, lsl #2]
   148f0:	lsr	r0, ip, r1
   148f4:	eor	r2, r2, r0
   148f8:	and	r2, r2, #1
   148fc:	and	r0, r0, #1
   14900:	eor	r1, ip, r2, lsl r1
   14904:	str	r1, [r3, lr, lsl #2]
   14908:	pop	{pc}		; (ldr pc, [sp], #4)
   1490c:	andeq	r8, r2, r0, lsl #5
   14910:	ldr	r3, [pc, #16]	; 14928 <__assert_fail@plt+0x39c8>
   14914:	cmp	r0, #0
   14918:	movne	r3, r0
   1491c:	ldr	r0, [r3, #4]
   14920:	str	r1, [r3, #4]
   14924:	bx	lr
   14928:	andeq	r8, r2, r0, lsl #5
   1492c:	ldr	r3, [pc, #44]	; 14960 <__assert_fail@plt+0x3a00>
   14930:	cmp	r0, #0
   14934:	moveq	r0, r3
   14938:	mov	r3, #10
   1493c:	cmp	r2, #0
   14940:	cmpne	r1, #0
   14944:	str	r3, [r0]
   14948:	bne	14954 <__assert_fail@plt+0x39f4>
   1494c:	push	{r4, lr}
   14950:	bl	10f48 <abort@plt>
   14954:	str	r1, [r0, #40]	; 0x28
   14958:	str	r2, [r0, #44]	; 0x2c
   1495c:	bx	lr
   14960:	andeq	r8, r2, r0, lsl #5
   14964:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14968:	sub	sp, sp, #24
   1496c:	mov	sl, r3
   14970:	ldr	r4, [sp, #56]	; 0x38
   14974:	ldr	r3, [pc, #100]	; 149e0 <__assert_fail@plt+0x3a80>
   14978:	cmp	r4, #0
   1497c:	moveq	r4, r3
   14980:	mov	r7, r0
   14984:	mov	r8, r1
   14988:	mov	r9, r2
   1498c:	bl	10e70 <__errno_location@plt>
   14990:	ldr	r3, [r4, #44]	; 0x2c
   14994:	mov	r2, r9
   14998:	mov	r1, r8
   1499c:	ldr	r6, [r0]
   149a0:	str	r3, [sp, #16]
   149a4:	ldr	r3, [r4, #40]	; 0x28
   149a8:	mov	r5, r0
   149ac:	str	r3, [sp, #12]
   149b0:	add	r3, r4, #8
   149b4:	str	r3, [sp, #8]
   149b8:	ldr	r3, [r4, #4]
   149bc:	mov	r0, r7
   149c0:	str	r3, [sp, #4]
   149c4:	ldr	r3, [r4]
   149c8:	str	r3, [sp]
   149cc:	mov	r3, sl
   149d0:	bl	13990 <__assert_fail@plt+0x2a30>
   149d4:	str	r6, [r5]
   149d8:	add	sp, sp, #24
   149dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149e0:	andeq	r8, r2, r0, lsl #5
   149e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149e8:	cmp	r3, #0
   149ec:	sub	sp, sp, #44	; 0x2c
   149f0:	ldr	r4, [pc, #188]	; 14ab4 <__assert_fail@plt+0x3b54>
   149f4:	mov	r6, r2
   149f8:	movne	r4, r3
   149fc:	mov	sl, r1
   14a00:	mov	r9, r0
   14a04:	bl	10e70 <__errno_location@plt>
   14a08:	ldr	r5, [r4, #4]
   14a0c:	add	fp, r4, #8
   14a10:	cmp	r6, #0
   14a14:	orreq	r5, r5, #1
   14a18:	mov	r1, #0
   14a1c:	mov	r2, r9
   14a20:	ldr	r3, [r0]
   14a24:	mov	r8, r0
   14a28:	str	r3, [sp, #28]
   14a2c:	ldr	r3, [r4, #44]	; 0x2c
   14a30:	mov	r0, r1
   14a34:	str	r3, [sp, #16]
   14a38:	ldr	r3, [r4, #40]	; 0x28
   14a3c:	stmib	sp, {r5, fp}
   14a40:	str	r3, [sp, #12]
   14a44:	ldr	r3, [r4]
   14a48:	str	r3, [sp]
   14a4c:	mov	r3, sl
   14a50:	bl	13990 <__assert_fail@plt+0x2a30>
   14a54:	add	r1, r0, #1
   14a58:	mov	r7, r0
   14a5c:	mov	r0, r1
   14a60:	str	r1, [sp, #36]	; 0x24
   14a64:	bl	15310 <__assert_fail@plt+0x43b0>
   14a68:	ldr	r3, [r4, #44]	; 0x2c
   14a6c:	mov	r2, r9
   14a70:	str	r3, [sp, #16]
   14a74:	ldr	r3, [r4, #40]	; 0x28
   14a78:	stmib	sp, {r5, fp}
   14a7c:	str	r3, [sp, #12]
   14a80:	ldr	r3, [r4]
   14a84:	ldr	r1, [sp, #36]	; 0x24
   14a88:	str	r3, [sp]
   14a8c:	mov	r3, sl
   14a90:	str	r0, [sp, #32]
   14a94:	bl	13990 <__assert_fail@plt+0x2a30>
   14a98:	ldr	r3, [sp, #28]
   14a9c:	cmp	r6, #0
   14aa0:	str	r3, [r8]
   14aa4:	ldr	r0, [sp, #32]
   14aa8:	strne	r7, [r6]
   14aac:	add	sp, sp, #44	; 0x2c
   14ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ab4:	andeq	r8, r2, r0, lsl #5
   14ab8:	mov	r3, r2
   14abc:	mov	r2, #0
   14ac0:	b	149e4 <__assert_fail@plt+0x3a84>
   14ac4:	push	{r4, r5, r6, r7, r8, lr}
   14ac8:	mov	r6, #1
   14acc:	ldr	r4, [pc, #104]	; 14b3c <__assert_fail@plt+0x3bdc>
   14ad0:	ldr	r5, [r4]
   14ad4:	add	r7, r5, #12
   14ad8:	ldr	r3, [r4, #4]
   14adc:	add	r7, r7, #8
   14ae0:	cmp	r6, r3
   14ae4:	blt	14b2c <__assert_fail@plt+0x3bcc>
   14ae8:	ldr	r0, [r5, #4]
   14aec:	ldr	r6, [pc, #76]	; 14b40 <__assert_fail@plt+0x3be0>
   14af0:	cmp	r0, r6
   14af4:	beq	14b08 <__assert_fail@plt+0x3ba8>
   14af8:	bl	136b8 <__assert_fail@plt+0x2758>
   14afc:	mov	r3, #256	; 0x100
   14b00:	str	r3, [r4, #8]
   14b04:	str	r6, [r4, #12]
   14b08:	ldr	r6, [pc, #52]	; 14b44 <__assert_fail@plt+0x3be4>
   14b0c:	cmp	r5, r6
   14b10:	beq	14b20 <__assert_fail@plt+0x3bc0>
   14b14:	mov	r0, r5
   14b18:	bl	136b8 <__assert_fail@plt+0x2758>
   14b1c:	str	r6, [r4]
   14b20:	mov	r3, #1
   14b24:	str	r3, [r4, #4]
   14b28:	pop	{r4, r5, r6, r7, r8, pc}
   14b2c:	ldr	r0, [r7, #-8]
   14b30:	bl	136b8 <__assert_fail@plt+0x2758>
   14b34:	add	r6, r6, #1
   14b38:	b	14ad8 <__assert_fail@plt+0x3b78>
   14b3c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14b40:	andeq	r8, r2, r0, lsl #3
   14b44:	andeq	r8, r2, r0, lsl #2
   14b48:	ldr	r3, [pc, #4]	; 14b54 <__assert_fail@plt+0x3bf4>
   14b4c:	mvn	r2, #0
   14b50:	b	146c4 <__assert_fail@plt+0x3764>
   14b54:	andeq	r8, r2, r0, lsl #5
   14b58:	ldr	r3, [pc]	; 14b60 <__assert_fail@plt+0x3c00>
   14b5c:	b	146c4 <__assert_fail@plt+0x3764>
   14b60:	andeq	r8, r2, r0, lsl #5
   14b64:	mov	r1, r0
   14b68:	mov	r0, #0
   14b6c:	b	14b48 <__assert_fail@plt+0x3be8>
   14b70:	mov	r2, r1
   14b74:	mov	r1, r0
   14b78:	mov	r0, #0
   14b7c:	b	14b58 <__assert_fail@plt+0x3bf8>
   14b80:	push	{r4, r5, lr}
   14b84:	sub	sp, sp, #52	; 0x34
   14b88:	mov	r5, r2
   14b8c:	mov	r4, r0
   14b90:	mov	r0, sp
   14b94:	bl	1384c <__assert_fail@plt+0x28ec>
   14b98:	mov	r3, sp
   14b9c:	mvn	r2, #0
   14ba0:	mov	r1, r5
   14ba4:	mov	r0, r4
   14ba8:	bl	146c4 <__assert_fail@plt+0x3764>
   14bac:	add	sp, sp, #52	; 0x34
   14bb0:	pop	{r4, r5, pc}
   14bb4:	push	{r4, r5, r6, lr}
   14bb8:	sub	sp, sp, #48	; 0x30
   14bbc:	mov	r5, r2
   14bc0:	mov	r6, r3
   14bc4:	mov	r4, r0
   14bc8:	mov	r0, sp
   14bcc:	bl	1384c <__assert_fail@plt+0x28ec>
   14bd0:	mov	r3, sp
   14bd4:	mov	r2, r6
   14bd8:	mov	r1, r5
   14bdc:	mov	r0, r4
   14be0:	bl	146c4 <__assert_fail@plt+0x3764>
   14be4:	add	sp, sp, #48	; 0x30
   14be8:	pop	{r4, r5, r6, pc}
   14bec:	mov	r2, r1
   14bf0:	mov	r1, r0
   14bf4:	mov	r0, #0
   14bf8:	b	14b80 <__assert_fail@plt+0x3c20>
   14bfc:	mov	r3, r2
   14c00:	mov	r2, r1
   14c04:	mov	r1, r0
   14c08:	mov	r0, #0
   14c0c:	b	14bb4 <__assert_fail@plt+0x3c54>
   14c10:	push	{r4, r5, r6, lr}
   14c14:	mov	r4, r0
   14c18:	ldr	lr, [pc, #80]	; 14c70 <__assert_fail@plt+0x3d10>
   14c1c:	mov	r5, r1
   14c20:	mov	r6, r2
   14c24:	ldm	lr!, {r0, r1, r2, r3}
   14c28:	sub	sp, sp, #48	; 0x30
   14c2c:	mov	ip, sp
   14c30:	stmia	ip!, {r0, r1, r2, r3}
   14c34:	ldm	lr!, {r0, r1, r2, r3}
   14c38:	stmia	ip!, {r0, r1, r2, r3}
   14c3c:	ldm	lr, {r0, r1, r2, r3}
   14c40:	stm	ip, {r0, r1, r2, r3}
   14c44:	mov	r1, r6
   14c48:	mov	r2, #1
   14c4c:	mov	r0, sp
   14c50:	bl	148d0 <__assert_fail@plt+0x3970>
   14c54:	mov	r3, sp
   14c58:	mov	r2, r5
   14c5c:	mov	r1, r4
   14c60:	mov	r0, #0
   14c64:	bl	146c4 <__assert_fail@plt+0x3764>
   14c68:	add	sp, sp, #48	; 0x30
   14c6c:	pop	{r4, r5, r6, pc}
   14c70:	andeq	r8, r2, r0, lsl #5
   14c74:	mov	r2, r1
   14c78:	mvn	r1, #0
   14c7c:	b	14c10 <__assert_fail@plt+0x3cb0>
   14c80:	mov	r1, #58	; 0x3a
   14c84:	b	14c74 <__assert_fail@plt+0x3d14>
   14c88:	mov	r2, #58	; 0x3a
   14c8c:	b	14c10 <__assert_fail@plt+0x3cb0>
   14c90:	push	{r4, r5, lr}
   14c94:	sub	sp, sp, #100	; 0x64
   14c98:	mov	r4, r0
   14c9c:	mov	r0, sp
   14ca0:	mov	r5, r2
   14ca4:	bl	1384c <__assert_fail@plt+0x28ec>
   14ca8:	mov	ip, sp
   14cac:	add	lr, sp, #48	; 0x30
   14cb0:	ldm	ip!, {r0, r1, r2, r3}
   14cb4:	stmia	lr!, {r0, r1, r2, r3}
   14cb8:	ldm	ip!, {r0, r1, r2, r3}
   14cbc:	stmia	lr!, {r0, r1, r2, r3}
   14cc0:	ldm	ip, {r0, r1, r2, r3}
   14cc4:	stm	lr, {r0, r1, r2, r3}
   14cc8:	mov	r2, #1
   14ccc:	mov	r1, #58	; 0x3a
   14cd0:	add	r0, sp, #48	; 0x30
   14cd4:	bl	148d0 <__assert_fail@plt+0x3970>
   14cd8:	add	r3, sp, #48	; 0x30
   14cdc:	mvn	r2, #0
   14ce0:	mov	r1, r5
   14ce4:	mov	r0, r4
   14ce8:	bl	146c4 <__assert_fail@plt+0x3764>
   14cec:	add	sp, sp, #100	; 0x64
   14cf0:	pop	{r4, r5, pc}
   14cf4:	push	{r4, r5, r6, r7, lr}
   14cf8:	mov	r4, r0
   14cfc:	ldr	lr, [pc, #84]	; 14d58 <__assert_fail@plt+0x3df8>
   14d00:	mov	r6, r1
   14d04:	mov	r7, r2
   14d08:	mov	r5, r3
   14d0c:	ldm	lr!, {r0, r1, r2, r3}
   14d10:	sub	sp, sp, #52	; 0x34
   14d14:	mov	ip, sp
   14d18:	stmia	ip!, {r0, r1, r2, r3}
   14d1c:	ldm	lr!, {r0, r1, r2, r3}
   14d20:	stmia	ip!, {r0, r1, r2, r3}
   14d24:	ldm	lr, {r0, r1, r2, r3}
   14d28:	stm	ip, {r0, r1, r2, r3}
   14d2c:	mov	r2, r7
   14d30:	mov	r1, r6
   14d34:	mov	r0, sp
   14d38:	bl	1492c <__assert_fail@plt+0x39cc>
   14d3c:	mov	r3, sp
   14d40:	ldr	r2, [sp, #72]	; 0x48
   14d44:	mov	r1, r5
   14d48:	mov	r0, r4
   14d4c:	bl	146c4 <__assert_fail@plt+0x3764>
   14d50:	add	sp, sp, #52	; 0x34
   14d54:	pop	{r4, r5, r6, r7, pc}
   14d58:	andeq	r8, r2, r0, lsl #5
   14d5c:	mvn	ip, #0
   14d60:	push	{r0, r1, r2, lr}
   14d64:	str	ip, [sp]
   14d68:	bl	14cf4 <__assert_fail@plt+0x3d94>
   14d6c:	add	sp, sp, #12
   14d70:	pop	{pc}		; (ldr pc, [sp], #4)
   14d74:	mov	r3, r2
   14d78:	mov	r2, r1
   14d7c:	mov	r1, r0
   14d80:	mov	r0, #0
   14d84:	b	14d5c <__assert_fail@plt+0x3dfc>
   14d88:	push	{r0, r1, r2, lr}
   14d8c:	str	r3, [sp]
   14d90:	mov	r3, r2
   14d94:	mov	r2, r1
   14d98:	mov	r1, r0
   14d9c:	mov	r0, #0
   14da0:	bl	14cf4 <__assert_fail@plt+0x3d94>
   14da4:	add	sp, sp, #12
   14da8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dac:	ldr	r3, [pc]	; 14db4 <__assert_fail@plt+0x3e54>
   14db0:	b	146c4 <__assert_fail@plt+0x3764>
   14db4:	andeq	r8, r2, r8, lsl #2
   14db8:	mov	r2, r1
   14dbc:	mov	r1, r0
   14dc0:	mov	r0, #0
   14dc4:	b	14dac <__assert_fail@plt+0x3e4c>
   14dc8:	mvn	r2, #0
   14dcc:	b	14dac <__assert_fail@plt+0x3e4c>
   14dd0:	mov	r1, r0
   14dd4:	mov	r0, #0
   14dd8:	b	14dc8 <__assert_fail@plt+0x3e68>
   14ddc:	push	{r4, r5, r6, lr}
   14de0:	sub	sp, sp, #32
   14de4:	cmp	r1, #0
   14de8:	mov	r5, r0
   14dec:	ldr	r4, [sp, #48]	; 0x30
   14df0:	ldr	r6, [sp, #52]	; 0x34
   14df4:	beq	14ea8 <__assert_fail@plt+0x3f48>
   14df8:	stm	sp, {r2, r3}
   14dfc:	mov	r3, r1
   14e00:	ldr	r2, [pc, #860]	; 15164 <__assert_fail@plt+0x4204>
   14e04:	mov	r1, #1
   14e08:	bl	10eac <__fprintf_chk@plt>
   14e0c:	mov	r2, #5
   14e10:	ldr	r1, [pc, #848]	; 15168 <__assert_fail@plt+0x4208>
   14e14:	mov	r0, #0
   14e18:	bl	10d8c <dcgettext@plt>
   14e1c:	ldr	r3, [pc, #840]	; 1516c <__assert_fail@plt+0x420c>
   14e20:	ldr	r2, [pc, #840]	; 15170 <__assert_fail@plt+0x4210>
   14e24:	str	r3, [sp]
   14e28:	mov	r1, #1
   14e2c:	mov	r3, r0
   14e30:	mov	r0, r5
   14e34:	bl	10eac <__fprintf_chk@plt>
   14e38:	mov	r1, r5
   14e3c:	mov	r0, #10
   14e40:	bl	10d80 <fputc_unlocked@plt>
   14e44:	mov	r2, #5
   14e48:	ldr	r1, [pc, #804]	; 15174 <__assert_fail@plt+0x4214>
   14e4c:	mov	r0, #0
   14e50:	bl	10d8c <dcgettext@plt>
   14e54:	mov	r1, #1
   14e58:	ldr	r3, [pc, #792]	; 15178 <__assert_fail@plt+0x4218>
   14e5c:	mov	r2, r0
   14e60:	mov	r0, r5
   14e64:	bl	10eac <__fprintf_chk@plt>
   14e68:	mov	r1, r5
   14e6c:	mov	r0, #10
   14e70:	bl	10d80 <fputc_unlocked@plt>
   14e74:	cmp	r6, #9
   14e78:	ldrls	pc, [pc, r6, lsl #2]
   14e7c:	b	15158 <__assert_fail@plt+0x41f8>
   14e80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14e84:	andeq	r4, r1, r0, asr #29
   14e88:	andeq	r4, r1, ip, ror #29
   14e8c:	andeq	r4, r1, r0, lsr #30
   14e90:	andeq	r4, r1, ip, asr pc
   14e94:	andeq	r4, r1, r0, lsr #31
   14e98:	andeq	r4, r1, r8, ror #31
   14e9c:	andeq	r5, r1, r8, lsr r0
   14ea0:	muleq	r1, r0, r0
   14ea4:	strdeq	r5, [r1], -r0
   14ea8:	str	r3, [sp]
   14eac:	mov	r1, #1
   14eb0:	mov	r3, r2
   14eb4:	ldr	r2, [pc, #704]	; 1517c <__assert_fail@plt+0x421c>
   14eb8:	bl	10eac <__fprintf_chk@plt>
   14ebc:	b	14e0c <__assert_fail@plt+0x3eac>
   14ec0:	mov	r2, #5
   14ec4:	ldr	r1, [pc, #692]	; 15180 <__assert_fail@plt+0x4220>
   14ec8:	mov	r0, #0
   14ecc:	bl	10d8c <dcgettext@plt>
   14ed0:	ldr	r3, [r4]
   14ed4:	mov	r1, #1
   14ed8:	mov	r2, r0
   14edc:	mov	r0, r5
   14ee0:	add	sp, sp, #32
   14ee4:	pop	{r4, r5, r6, lr}
   14ee8:	b	10eac <__fprintf_chk@plt>
   14eec:	mov	r2, #5
   14ef0:	ldr	r1, [pc, #652]	; 15184 <__assert_fail@plt+0x4224>
   14ef4:	mov	r0, #0
   14ef8:	bl	10d8c <dcgettext@plt>
   14efc:	ldr	r3, [r4, #4]
   14f00:	mov	r1, #1
   14f04:	str	r3, [sp, #48]	; 0x30
   14f08:	ldr	r3, [r4]
   14f0c:	mov	r2, r0
   14f10:	mov	r0, r5
   14f14:	add	sp, sp, #32
   14f18:	pop	{r4, r5, r6, lr}
   14f1c:	b	10eac <__fprintf_chk@plt>
   14f20:	mov	r2, #5
   14f24:	ldr	r1, [pc, #604]	; 15188 <__assert_fail@plt+0x4228>
   14f28:	mov	r0, #0
   14f2c:	bl	10d8c <dcgettext@plt>
   14f30:	ldr	r3, [r4, #8]
   14f34:	mov	r1, #1
   14f38:	str	r3, [sp, #52]	; 0x34
   14f3c:	ldr	r3, [r4, #4]
   14f40:	str	r3, [sp, #48]	; 0x30
   14f44:	ldr	r3, [r4]
   14f48:	mov	r2, r0
   14f4c:	mov	r0, r5
   14f50:	add	sp, sp, #32
   14f54:	pop	{r4, r5, r6, lr}
   14f58:	b	10eac <__fprintf_chk@plt>
   14f5c:	mov	r2, #5
   14f60:	ldr	r1, [pc, #548]	; 1518c <__assert_fail@plt+0x422c>
   14f64:	mov	r0, #0
   14f68:	bl	10d8c <dcgettext@plt>
   14f6c:	ldr	r3, [r4, #12]
   14f70:	mov	r1, #1
   14f74:	str	r3, [sp, #8]
   14f78:	ldr	r3, [r4, #8]
   14f7c:	str	r3, [sp, #4]
   14f80:	ldr	r3, [r4, #4]
   14f84:	str	r3, [sp]
   14f88:	ldr	r3, [r4]
   14f8c:	mov	r2, r0
   14f90:	mov	r0, r5
   14f94:	bl	10eac <__fprintf_chk@plt>
   14f98:	add	sp, sp, #32
   14f9c:	pop	{r4, r5, r6, pc}
   14fa0:	mov	r2, #5
   14fa4:	ldr	r1, [pc, #484]	; 15190 <__assert_fail@plt+0x4230>
   14fa8:	mov	r0, #0
   14fac:	bl	10d8c <dcgettext@plt>
   14fb0:	ldr	r3, [r4, #16]
   14fb4:	mov	r1, #1
   14fb8:	str	r3, [sp, #12]
   14fbc:	ldr	r3, [r4, #12]
   14fc0:	str	r3, [sp, #8]
   14fc4:	ldr	r3, [r4, #8]
   14fc8:	str	r3, [sp, #4]
   14fcc:	ldr	r3, [r4, #4]
   14fd0:	str	r3, [sp]
   14fd4:	ldr	r3, [r4]
   14fd8:	mov	r2, r0
   14fdc:	mov	r0, r5
   14fe0:	bl	10eac <__fprintf_chk@plt>
   14fe4:	b	14f98 <__assert_fail@plt+0x4038>
   14fe8:	mov	r2, #5
   14fec:	ldr	r1, [pc, #416]	; 15194 <__assert_fail@plt+0x4234>
   14ff0:	mov	r0, #0
   14ff4:	bl	10d8c <dcgettext@plt>
   14ff8:	ldr	r3, [r4, #20]
   14ffc:	mov	r1, #1
   15000:	str	r3, [sp, #16]
   15004:	ldr	r3, [r4, #16]
   15008:	str	r3, [sp, #12]
   1500c:	ldr	r3, [r4, #12]
   15010:	str	r3, [sp, #8]
   15014:	ldr	r3, [r4, #8]
   15018:	str	r3, [sp, #4]
   1501c:	ldr	r3, [r4, #4]
   15020:	str	r3, [sp]
   15024:	ldr	r3, [r4]
   15028:	mov	r2, r0
   1502c:	mov	r0, r5
   15030:	bl	10eac <__fprintf_chk@plt>
   15034:	b	14f98 <__assert_fail@plt+0x4038>
   15038:	mov	r2, #5
   1503c:	ldr	r1, [pc, #340]	; 15198 <__assert_fail@plt+0x4238>
   15040:	mov	r0, #0
   15044:	bl	10d8c <dcgettext@plt>
   15048:	ldr	r3, [r4, #24]
   1504c:	mov	r1, #1
   15050:	str	r3, [sp, #20]
   15054:	ldr	r3, [r4, #20]
   15058:	str	r3, [sp, #16]
   1505c:	ldr	r3, [r4, #16]
   15060:	str	r3, [sp, #12]
   15064:	ldr	r3, [r4, #12]
   15068:	str	r3, [sp, #8]
   1506c:	ldr	r3, [r4, #8]
   15070:	str	r3, [sp, #4]
   15074:	ldr	r3, [r4, #4]
   15078:	str	r3, [sp]
   1507c:	ldr	r3, [r4]
   15080:	mov	r2, r0
   15084:	mov	r0, r5
   15088:	bl	10eac <__fprintf_chk@plt>
   1508c:	b	14f98 <__assert_fail@plt+0x4038>
   15090:	mov	r2, #5
   15094:	ldr	r1, [pc, #256]	; 1519c <__assert_fail@plt+0x423c>
   15098:	mov	r0, #0
   1509c:	bl	10d8c <dcgettext@plt>
   150a0:	ldr	r3, [r4, #28]
   150a4:	mov	r1, #1
   150a8:	str	r3, [sp, #24]
   150ac:	ldr	r3, [r4, #24]
   150b0:	str	r3, [sp, #20]
   150b4:	ldr	r3, [r4, #20]
   150b8:	str	r3, [sp, #16]
   150bc:	ldr	r3, [r4, #16]
   150c0:	str	r3, [sp, #12]
   150c4:	ldr	r3, [r4, #12]
   150c8:	str	r3, [sp, #8]
   150cc:	ldr	r3, [r4, #8]
   150d0:	str	r3, [sp, #4]
   150d4:	ldr	r3, [r4, #4]
   150d8:	str	r3, [sp]
   150dc:	ldr	r3, [r4]
   150e0:	mov	r2, r0
   150e4:	mov	r0, r5
   150e8:	bl	10eac <__fprintf_chk@plt>
   150ec:	b	14f98 <__assert_fail@plt+0x4038>
   150f0:	ldr	r1, [pc, #168]	; 151a0 <__assert_fail@plt+0x4240>
   150f4:	mov	r2, #5
   150f8:	mov	r0, #0
   150fc:	bl	10d8c <dcgettext@plt>
   15100:	ldr	r3, [r4, #32]
   15104:	mov	r1, #1
   15108:	str	r3, [sp, #28]
   1510c:	ldr	r3, [r4, #28]
   15110:	str	r3, [sp, #24]
   15114:	ldr	r3, [r4, #24]
   15118:	str	r3, [sp, #20]
   1511c:	ldr	r3, [r4, #20]
   15120:	str	r3, [sp, #16]
   15124:	ldr	r3, [r4, #16]
   15128:	str	r3, [sp, #12]
   1512c:	ldr	r3, [r4, #12]
   15130:	str	r3, [sp, #8]
   15134:	ldr	r3, [r4, #8]
   15138:	str	r3, [sp, #4]
   1513c:	ldr	r3, [r4, #4]
   15140:	str	r3, [sp]
   15144:	ldr	r3, [r4]
   15148:	mov	r2, r0
   1514c:	mov	r0, r5
   15150:	bl	10eac <__fprintf_chk@plt>
   15154:	b	14f98 <__assert_fail@plt+0x4038>
   15158:	mov	r2, #5
   1515c:	ldr	r1, [pc, #64]	; 151a4 <__assert_fail@plt+0x4244>
   15160:	b	150f8 <__assert_fail@plt+0x4198>
   15164:	andeq	r7, r1, r5, lsl #9
   15168:	muleq	r1, r8, r4
   1516c:	andeq	r0, r0, r6, ror #15
   15170:	andeq	r7, r1, r6, ror #14
   15174:	muleq	r1, ip, r4
   15178:	andeq	r7, r1, r7, asr #10
   1517c:	muleq	r1, r1, r4
   15180:	andeq	r7, r1, r9, ror #10
   15184:	andeq	r7, r1, r9, ror r5
   15188:	muleq	r1, r0, r5
   1518c:	andeq	r7, r1, ip, lsr #11
   15190:	andeq	r7, r1, ip, asr #11
   15194:	strdeq	r7, [r1], -r0
   15198:	andeq	r7, r1, r8, lsl r6
   1519c:	andeq	r7, r1, r4, asr #12
   151a0:	andeq	r7, r1, r4, ror r6
   151a4:	andeq	r7, r1, r8, lsr #13
   151a8:	push	{r0, r1, r4, lr}
   151ac:	mov	ip, #0
   151b0:	ldr	lr, [sp, #16]
   151b4:	ldr	r4, [lr, ip, lsl #2]
   151b8:	cmp	r4, #0
   151bc:	bne	151d4 <__assert_fail@plt+0x4274>
   151c0:	str	ip, [sp, #4]
   151c4:	str	lr, [sp]
   151c8:	bl	14ddc <__assert_fail@plt+0x3e7c>
   151cc:	add	sp, sp, #8
   151d0:	pop	{r4, pc}
   151d4:	add	ip, ip, #1
   151d8:	b	151b4 <__assert_fail@plt+0x4254>
   151dc:	push	{r4, r5, lr}
   151e0:	sub	sp, sp, #52	; 0x34
   151e4:	mov	ip, #0
   151e8:	ldr	r5, [sp, #64]	; 0x40
   151ec:	add	lr, sp, #8
   151f0:	ldr	r4, [r5, ip, lsl #2]
   151f4:	cmp	r4, #0
   151f8:	str	r4, [lr, ip, lsl #2]
   151fc:	beq	1520c <__assert_fail@plt+0x42ac>
   15200:	add	ip, ip, #1
   15204:	cmp	ip, #10
   15208:	bne	151f0 <__assert_fail@plt+0x4290>
   1520c:	str	ip, [sp, #4]
   15210:	str	lr, [sp]
   15214:	bl	14ddc <__assert_fail@plt+0x3e7c>
   15218:	add	sp, sp, #52	; 0x34
   1521c:	pop	{r4, r5, pc}
   15220:	push	{r3}		; (str r3, [sp, #-4]!)
   15224:	push	{r0, r1, r2, r3, lr}
   15228:	add	r3, sp, #24
   1522c:	str	r3, [sp, #12]
   15230:	str	r3, [sp]
   15234:	ldr	r3, [sp, #20]
   15238:	bl	151dc <__assert_fail@plt+0x427c>
   1523c:	add	sp, sp, #16
   15240:	pop	{lr}		; (ldr lr, [sp], #4)
   15244:	add	sp, sp, #4
   15248:	bx	lr
   1524c:	ldr	r3, [pc, #116]	; 152c8 <__assert_fail@plt+0x4368>
   15250:	push	{r4, lr}
   15254:	mov	r0, #10
   15258:	ldr	r1, [r3]
   1525c:	bl	10d80 <fputc_unlocked@plt>
   15260:	mov	r2, #5
   15264:	ldr	r1, [pc, #96]	; 152cc <__assert_fail@plt+0x436c>
   15268:	mov	r0, #0
   1526c:	bl	10d8c <dcgettext@plt>
   15270:	ldr	r2, [pc, #88]	; 152d0 <__assert_fail@plt+0x4370>
   15274:	mov	r1, r0
   15278:	mov	r0, #1
   1527c:	bl	10e94 <__printf_chk@plt>
   15280:	mov	r2, #5
   15284:	ldr	r1, [pc, #72]	; 152d4 <__assert_fail@plt+0x4374>
   15288:	mov	r0, #0
   1528c:	bl	10d8c <dcgettext@plt>
   15290:	ldr	r3, [pc, #64]	; 152d8 <__assert_fail@plt+0x4378>
   15294:	ldr	r2, [pc, #64]	; 152dc <__assert_fail@plt+0x437c>
   15298:	mov	r1, r0
   1529c:	mov	r0, #1
   152a0:	bl	10e94 <__printf_chk@plt>
   152a4:	mov	r2, #5
   152a8:	ldr	r1, [pc, #48]	; 152e0 <__assert_fail@plt+0x4380>
   152ac:	mov	r0, #0
   152b0:	bl	10d8c <dcgettext@plt>
   152b4:	ldr	r2, [pc, #40]	; 152e4 <__assert_fail@plt+0x4384>
   152b8:	pop	{r4, lr}
   152bc:	mov	r1, r0
   152c0:	mov	r0, #1
   152c4:	b	10e94 <__printf_chk@plt>
   152c8:	andeq	r8, r2, r4, asr r1
   152cc:	andeq	r7, r1, r4, ror #13
   152d0:	strdeq	r7, [r1], -r8
   152d4:	andeq	r7, r1, lr, lsl #14
   152d8:	andeq	r6, r1, r2, ror #29
   152dc:	andeq	r6, r1, sl, lsl #30
   152e0:	andeq	r7, r1, r2, lsr #14
   152e4:	andeq	r7, r1, r9, asr #14
   152e8:	push	{r4, lr}
   152ec:	bl	15c68 <__assert_fail@plt+0x4d08>
   152f0:	cmp	r0, #0
   152f4:	popne	{r4, pc}
   152f8:	bl	1577c <__assert_fail@plt+0x481c>
   152fc:	push	{r4, lr}
   15300:	bl	15c68 <__assert_fail@plt+0x4d08>
   15304:	cmp	r0, #0
   15308:	popne	{r4, pc}
   1530c:	bl	1577c <__assert_fail@plt+0x481c>
   15310:	b	152e8 <__assert_fail@plt+0x4388>
   15314:	push	{r4, r5, r6, lr}
   15318:	mov	r5, r0
   1531c:	mov	r4, r1
   15320:	bl	15ca8 <__assert_fail@plt+0x4d48>
   15324:	cmp	r0, #0
   15328:	popne	{r4, r5, r6, pc}
   1532c:	adds	r4, r4, #0
   15330:	movne	r4, #1
   15334:	cmp	r5, #0
   15338:	orreq	r4, r4, #1
   1533c:	cmp	r4, #0
   15340:	popeq	{r4, r5, r6, pc}
   15344:	bl	1577c <__assert_fail@plt+0x481c>
   15348:	push	{r4, lr}
   1534c:	cmp	r1, #0
   15350:	orreq	r1, r1, #1
   15354:	bl	15ca8 <__assert_fail@plt+0x4d48>
   15358:	cmp	r0, #0
   1535c:	popne	{r4, pc}
   15360:	bl	1577c <__assert_fail@plt+0x481c>
   15364:	push	{r4, r5, r6, lr}
   15368:	mov	r6, r0
   1536c:	mov	r5, r1
   15370:	mov	r4, r2
   15374:	bl	15df8 <__assert_fail@plt+0x4e98>
   15378:	cmp	r0, #0
   1537c:	popne	{r4, r5, r6, pc}
   15380:	cmp	r6, #0
   15384:	beq	15394 <__assert_fail@plt+0x4434>
   15388:	cmp	r5, #0
   1538c:	cmpne	r4, #0
   15390:	popeq	{r4, r5, r6, pc}
   15394:	bl	1577c <__assert_fail@plt+0x481c>
   15398:	b	15364 <__assert_fail@plt+0x4404>
   1539c:	cmp	r2, #0
   153a0:	cmpne	r1, #0
   153a4:	moveq	r2, #1
   153a8:	moveq	r1, r2
   153ac:	push	{r4, lr}
   153b0:	bl	15df8 <__assert_fail@plt+0x4e98>
   153b4:	cmp	r0, #0
   153b8:	popne	{r4, pc}
   153bc:	bl	1577c <__assert_fail@plt+0x481c>
   153c0:	mov	r2, r1
   153c4:	mov	r1, r0
   153c8:	mov	r0, #0
   153cc:	b	15364 <__assert_fail@plt+0x4404>
   153d0:	mov	r2, r1
   153d4:	mov	r1, r0
   153d8:	mov	r0, #0
   153dc:	b	1539c <__assert_fail@plt+0x443c>
   153e0:	push	{r4, r5, r6, r7, r8, lr}
   153e4:	subs	r7, r0, #0
   153e8:	mov	r5, r1
   153ec:	mov	r6, r2
   153f0:	ldr	r4, [r1]
   153f4:	bne	15430 <__assert_fail@plt+0x44d0>
   153f8:	cmp	r4, #0
   153fc:	bne	15418 <__assert_fail@plt+0x44b8>
   15400:	mov	r1, r2
   15404:	mov	r0, #64	; 0x40
   15408:	bl	15f24 <__assert_fail@plt+0x4fc4>
   1540c:	cmp	r0, #0
   15410:	movne	r4, r0
   15414:	addeq	r4, r0, #1
   15418:	mov	r2, r6
   1541c:	mov	r1, r4
   15420:	mov	r0, r7
   15424:	bl	15364 <__assert_fail@plt+0x4404>
   15428:	str	r4, [r5]
   1542c:	pop	{r4, r5, r6, r7, r8, pc}
   15430:	lsr	r2, r4, #1
   15434:	add	r3, r2, #1
   15438:	mvn	r3, r3
   1543c:	cmp	r4, r3
   15440:	addls	r4, r4, #1
   15444:	addls	r4, r4, r2
   15448:	bls	15418 <__assert_fail@plt+0x44b8>
   1544c:	bl	1577c <__assert_fail@plt+0x481c>
   15450:	mov	r2, #1
   15454:	b	153e0 <__assert_fail@plt+0x4480>
   15458:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1545c:	mov	sl, r0
   15460:	ldr	r8, [r1]
   15464:	mov	fp, r1
   15468:	mov	r5, r2
   1546c:	asrs	r4, r8, #1
   15470:	mov	r9, r3
   15474:	ldr	r7, [sp, #48]	; 0x30
   15478:	bpl	15514 <__assert_fail@plt+0x45b4>
   1547c:	rsb	r2, r4, #-2147483648	; 0x80000000
   15480:	cmp	r8, r2
   15484:	movge	r2, #0
   15488:	movlt	r2, #1
   1548c:	mvn	r3, r9
   15490:	cmp	r2, #0
   15494:	lsr	r3, r3, #31
   15498:	addeq	r4, r4, r8
   1549c:	mvnne	r4, #-2147483648	; 0x80000000
   154a0:	mov	r0, r3
   154a4:	cmp	r9, r4
   154a8:	movge	r0, #0
   154ac:	andlt	r0, r0, #1
   154b0:	cmp	r0, #0
   154b4:	str	r3, [sp, #4]
   154b8:	bne	15688 <__assert_fail@plt+0x4728>
   154bc:	cmp	r7, #0
   154c0:	bge	155d4 <__assert_fail@plt+0x4674>
   154c4:	cmp	r4, #0
   154c8:	bge	1552c <__assert_fail@plt+0x45cc>
   154cc:	mov	r1, r7
   154d0:	mvn	r0, #-2147483648	; 0x80000000
   154d4:	bl	16130 <__assert_fail@plt+0x51d0>
   154d8:	cmp	r0, r4
   154dc:	movle	r0, #0
   154e0:	movgt	r0, #1
   154e4:	cmp	r0, #0
   154e8:	mvnne	r6, #-2147483648	; 0x80000000
   154ec:	beq	1553c <__assert_fail@plt+0x45dc>
   154f0:	mov	r1, r7
   154f4:	mov	r0, r6
   154f8:	bl	16130 <__assert_fail@plt+0x51d0>
   154fc:	mov	r1, r7
   15500:	mov	r4, r0
   15504:	mov	r0, r6
   15508:	bl	16350 <__assert_fail@plt+0x53f0>
   1550c:	sub	r1, r6, r1
   15510:	b	1554c <__assert_fail@plt+0x45ec>
   15514:	mvn	r2, #-2147483648	; 0x80000000
   15518:	sub	r2, r2, r4
   1551c:	cmp	r8, r2
   15520:	movle	r2, #0
   15524:	movgt	r2, #1
   15528:	b	1548c <__assert_fail@plt+0x452c>
   1552c:	cmn	r7, #1
   15530:	movne	r1, r7
   15534:	movne	r0, #-2147483648	; 0x80000000
   15538:	bne	156a0 <__assert_fail@plt+0x4740>
   1553c:	mul	r1, r7, r4
   15540:	cmp	r1, #63	; 0x3f
   15544:	movle	r6, #64	; 0x40
   15548:	ble	154f0 <__assert_fail@plt+0x4590>
   1554c:	cmp	sl, #0
   15550:	sub	r2, r4, r8
   15554:	streq	sl, [fp]
   15558:	cmp	r2, r5
   1555c:	bge	15630 <__assert_fail@plt+0x46d0>
   15560:	cmp	r5, #0
   15564:	bge	155fc <__assert_fail@plt+0x469c>
   15568:	rsb	r2, r5, #-2147483648	; 0x80000000
   1556c:	cmp	r8, r2
   15570:	movge	r2, #0
   15574:	movlt	r2, #1
   15578:	cmp	r2, #0
   1557c:	bne	155d0 <__assert_fail@plt+0x4670>
   15580:	ldr	r0, [sp, #4]
   15584:	add	r5, r8, r5
   15588:	cmp	r9, r5
   1558c:	movge	r0, #0
   15590:	andlt	r0, r0, #1
   15594:	cmp	r0, #0
   15598:	mov	r4, r5
   1559c:	bne	155d0 <__assert_fail@plt+0x4670>
   155a0:	cmp	r7, #0
   155a4:	bge	15644 <__assert_fail@plt+0x46e4>
   155a8:	cmp	r5, #0
   155ac:	bge	1561c <__assert_fail@plt+0x46bc>
   155b0:	mov	r1, r7
   155b4:	mvn	r0, #-2147483648	; 0x80000000
   155b8:	bl	16130 <__assert_fail@plt+0x51d0>
   155bc:	cmp	r5, r0
   155c0:	movge	r0, #0
   155c4:	movlt	r0, #1
   155c8:	cmp	r0, #0
   155cc:	beq	1562c <__assert_fail@plt+0x46cc>
   155d0:	bl	1577c <__assert_fail@plt+0x481c>
   155d4:	beq	1553c <__assert_fail@plt+0x45dc>
   155d8:	cmp	r4, #0
   155dc:	bge	15698 <__assert_fail@plt+0x4738>
   155e0:	cmn	r4, #1
   155e4:	beq	1553c <__assert_fail@plt+0x45dc>
   155e8:	mov	r1, r4
   155ec:	mov	r0, #-2147483648	; 0x80000000
   155f0:	bl	16130 <__assert_fail@plt+0x51d0>
   155f4:	cmp	r7, r0
   155f8:	b	154dc <__assert_fail@plt+0x457c>
   155fc:	cmp	r8, #0
   15600:	blt	15580 <__assert_fail@plt+0x4620>
   15604:	mvn	r2, #-2147483648	; 0x80000000
   15608:	sub	r2, r2, r5
   1560c:	cmp	r8, r2
   15610:	movle	r2, #0
   15614:	movgt	r2, #1
   15618:	b	15578 <__assert_fail@plt+0x4618>
   1561c:	cmn	r7, #1
   15620:	movne	r1, r7
   15624:	movne	r0, #-2147483648	; 0x80000000
   15628:	bne	1567c <__assert_fail@plt+0x471c>
   1562c:	mul	r1, r5, r7
   15630:	mov	r0, sl
   15634:	bl	15314 <__assert_fail@plt+0x43b4>
   15638:	str	r4, [fp]
   1563c:	add	sp, sp, #12
   15640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15644:	beq	1562c <__assert_fail@plt+0x46cc>
   15648:	cmp	r5, #0
   1564c:	movge	r1, r7
   15650:	mvnge	r0, #-2147483648	; 0x80000000
   15654:	bge	1567c <__assert_fail@plt+0x471c>
   15658:	cmn	r5, #1
   1565c:	beq	1562c <__assert_fail@plt+0x46cc>
   15660:	mov	r1, r5
   15664:	mov	r0, #-2147483648	; 0x80000000
   15668:	bl	16130 <__assert_fail@plt+0x51d0>
   1566c:	cmp	r7, r0
   15670:	movle	r0, #0
   15674:	movgt	r0, #1
   15678:	b	155c8 <__assert_fail@plt+0x4668>
   1567c:	bl	16130 <__assert_fail@plt+0x51d0>
   15680:	cmp	r5, r0
   15684:	b	15670 <__assert_fail@plt+0x4710>
   15688:	cmp	r7, #0
   1568c:	mov	r4, r9
   15690:	blt	1552c <__assert_fail@plt+0x45cc>
   15694:	beq	1553c <__assert_fail@plt+0x45dc>
   15698:	mov	r1, r7
   1569c:	mvn	r0, #-2147483648	; 0x80000000
   156a0:	bl	16130 <__assert_fail@plt+0x51d0>
   156a4:	cmp	r0, r4
   156a8:	movge	r0, #0
   156ac:	movlt	r0, #1
   156b0:	b	154e4 <__assert_fail@plt+0x4584>
   156b4:	push	{r4, lr}
   156b8:	bl	15c20 <__assert_fail@plt+0x4cc0>
   156bc:	cmp	r0, #0
   156c0:	popne	{r4, pc}
   156c4:	bl	1577c <__assert_fail@plt+0x481c>
   156c8:	mov	r1, #1
   156cc:	b	156b4 <__assert_fail@plt+0x4754>
   156d0:	push	{r4, lr}
   156d4:	bl	15c20 <__assert_fail@plt+0x4cc0>
   156d8:	cmp	r0, #0
   156dc:	popne	{r4, pc}
   156e0:	bl	1577c <__assert_fail@plt+0x481c>
   156e4:	mov	r1, #1
   156e8:	b	156d0 <__assert_fail@plt+0x4770>
   156ec:	push	{r4, r5, r6, lr}
   156f0:	mov	r4, r1
   156f4:	mov	r5, r0
   156f8:	mov	r0, r1
   156fc:	bl	152e8 <__assert_fail@plt+0x4388>
   15700:	mov	r2, r4
   15704:	mov	r1, r5
   15708:	pop	{r4, r5, r6, lr}
   1570c:	b	10d50 <memcpy@plt>
   15710:	push	{r4, r5, r6, lr}
   15714:	mov	r4, r1
   15718:	mov	r5, r0
   1571c:	mov	r0, r1
   15720:	bl	152fc <__assert_fail@plt+0x439c>
   15724:	mov	r2, r4
   15728:	mov	r1, r5
   1572c:	pop	{r4, r5, r6, lr}
   15730:	b	10d50 <memcpy@plt>
   15734:	push	{r4, r5, r6, lr}
   15738:	mov	r5, r0
   1573c:	add	r0, r1, #1
   15740:	mov	r4, r1
   15744:	bl	152fc <__assert_fail@plt+0x439c>
   15748:	mov	r2, #0
   1574c:	mov	r1, r5
   15750:	strb	r2, [r0, r4]
   15754:	mov	r2, r4
   15758:	pop	{r4, r5, r6, lr}
   1575c:	b	10d50 <memcpy@plt>
   15760:	push	{r4, lr}
   15764:	mov	r4, r0
   15768:	bl	10e58 <strlen@plt>
   1576c:	add	r1, r0, #1
   15770:	mov	r0, r4
   15774:	pop	{r4, lr}
   15778:	b	156ec <__assert_fail@plt+0x478c>
   1577c:	ldr	r3, [pc, #44]	; 157b0 <__assert_fail@plt+0x4850>
   15780:	push	{r4, lr}
   15784:	mov	r2, #5
   15788:	ldr	r1, [pc, #36]	; 157b4 <__assert_fail@plt+0x4854>
   1578c:	mov	r0, #0
   15790:	ldr	r4, [r3]
   15794:	bl	10d8c <dcgettext@plt>
   15798:	ldr	r2, [pc, #24]	; 157b8 <__assert_fail@plt+0x4858>
   1579c:	mov	r1, #0
   157a0:	mov	r3, r0
   157a4:	mov	r0, r4
   157a8:	bl	10df8 <error@plt>
   157ac:	bl	10f48 <abort@plt>
   157b0:	strdeq	r8, [r2], -r4
   157b4:	muleq	r1, r5, r7
   157b8:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   157bc:	push	{r4, r5, r6, r7, r8, lr}
   157c0:	subs	r4, r1, #0
   157c4:	mov	r5, r0
   157c8:	bge	15884 <__assert_fail@plt+0x4924>
   157cc:	ldrd	r6, [r0]
   157d0:	cmp	r6, #0
   157d4:	sbcs	r3, r7, #0
   157d8:	bge	15838 <__assert_fail@plt+0x48d8>
   157dc:	asr	r3, r4, #31
   157e0:	mov	r2, r4
   157e4:	mvn	r0, #0
   157e8:	mvn	r1, #-2147483648	; 0x80000000
   157ec:	bl	16370 <__assert_fail@plt+0x5410>
   157f0:	cmp	r6, r0
   157f4:	sbcs	r3, r7, r1
   157f8:	movlt	r3, #1
   157fc:	movge	r3, #0
   15800:	cmp	r3, #0
   15804:	movne	r2, #0
   15808:	movne	r3, #-2147483648	; 0x80000000
   1580c:	bne	15878 <__assert_fail@plt+0x4918>
   15810:	ldr	r2, [r5]
   15814:	asr	r3, r4, #31
   15818:	ldr	r1, [r5, #4]
   1581c:	mul	r3, r3, r2
   15820:	mov	r0, #0
   15824:	mla	r1, r4, r1, r3
   15828:	umull	r2, r3, r2, r4
   1582c:	add	r3, r1, r3
   15830:	strd	r2, [r5]
   15834:	pop	{r4, r5, r6, r7, r8, pc}
   15838:	cmn	r4, #1
   1583c:	moveq	r3, #0
   15840:	beq	15868 <__assert_fail@plt+0x4908>
   15844:	mov	r2, r4
   15848:	asr	r3, r4, #31
   1584c:	mov	r0, #0
   15850:	mov	r1, #-2147483648	; 0x80000000
   15854:	bl	16370 <__assert_fail@plt+0x5410>
   15858:	cmp	r0, r6
   1585c:	sbcs	r3, r1, r7
   15860:	movlt	r3, #1
   15864:	movge	r3, #0
   15868:	cmp	r3, #0
   1586c:	mvnne	r2, #0
   15870:	mvnne	r3, #-2147483648	; 0x80000000
   15874:	beq	15810 <__assert_fail@plt+0x48b0>
   15878:	strd	r2, [r5]
   1587c:	mov	r0, #1
   15880:	pop	{r4, r5, r6, r7, r8, pc}
   15884:	beq	15810 <__assert_fail@plt+0x48b0>
   15888:	ldrd	r6, [r0]
   1588c:	cmp	r6, #0
   15890:	sbcs	r3, r7, #0
   15894:	bge	158d8 <__assert_fail@plt+0x4978>
   15898:	mvn	r3, #0
   1589c:	cmp	r7, r3
   158a0:	mvn	r2, #0
   158a4:	cmpeq	r6, r2
   158a8:	moveq	r3, #0
   158ac:	beq	15800 <__assert_fail@plt+0x48a0>
   158b0:	mov	r2, r6
   158b4:	mov	r3, r7
   158b8:	mov	r0, #0
   158bc:	mov	r1, #-2147483648	; 0x80000000
   158c0:	bl	16370 <__assert_fail@plt+0x5410>
   158c4:	asr	r3, r4, #31
   158c8:	mov	r2, r4
   158cc:	cmp	r0, r4
   158d0:	sbcs	r3, r1, r3
   158d4:	b	157f8 <__assert_fail@plt+0x4898>
   158d8:	mov	r2, r4
   158dc:	asr	r3, r4, #31
   158e0:	mvn	r0, #0
   158e4:	mvn	r1, #-2147483648	; 0x80000000
   158e8:	b	15854 <__assert_fail@plt+0x48f4>
   158ec:	push	{r4, r5, r6, r7, r8, lr}
   158f0:	mov	r6, r0
   158f4:	mov	r7, r1
   158f8:	mov	r5, r2
   158fc:	mov	r4, #0
   15900:	cmp	r5, #0
   15904:	bne	15910 <__assert_fail@plt+0x49b0>
   15908:	mov	r0, r4
   1590c:	pop	{r4, r5, r6, r7, r8, pc}
   15910:	mov	r1, r7
   15914:	mov	r0, r6
   15918:	bl	157bc <__assert_fail@plt+0x485c>
   1591c:	sub	r5, r5, #1
   15920:	orr	r4, r4, r0
   15924:	b	15900 <__assert_fail@plt+0x49a0>
   15928:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1592c:	cmp	r2, #36	; 0x24
   15930:	ldr	r9, [sp, #48]	; 0x30
   15934:	bls	1594c <__assert_fail@plt+0x49ec>
   15938:	ldr	r3, [pc, #724]	; 15c14 <__assert_fail@plt+0x4cb4>
   1593c:	mov	r2, #85	; 0x55
   15940:	ldr	r1, [pc, #720]	; 15c18 <__assert_fail@plt+0x4cb8>
   15944:	ldr	r0, [pc, #720]	; 15c1c <__assert_fail@plt+0x4cbc>
   15948:	bl	10f60 <__assert_fail@plt>
   1594c:	cmp	r1, #0
   15950:	mov	r7, r1
   15954:	mov	r4, r0
   15958:	addeq	r7, sp, #4
   1595c:	mov	r6, r2
   15960:	mov	r8, r3
   15964:	bl	10e70 <__errno_location@plt>
   15968:	mov	r5, #0
   1596c:	mov	r2, r6
   15970:	mov	r1, r7
   15974:	str	r5, [r0]
   15978:	mov	sl, r0
   1597c:	mov	r0, r4
   15980:	bl	10ec4 <strtoimax@plt>
   15984:	ldr	r6, [r7]
   15988:	cmp	r4, r6
   1598c:	strd	r0, [sp, #8]
   15990:	bne	159f4 <__assert_fail@plt+0x4a94>
   15994:	cmp	r9, r5
   15998:	beq	15c0c <__assert_fail@plt+0x4cac>
   1599c:	ldrb	r1, [r6]
   159a0:	cmp	r1, r5
   159a4:	beq	15c0c <__assert_fail@plt+0x4cac>
   159a8:	mov	r0, r9
   159ac:	bl	10e64 <strchr@plt>
   159b0:	cmp	r0, r5
   159b4:	beq	15c0c <__assert_fail@plt+0x4cac>
   159b8:	mov	r2, #1
   159bc:	mov	r3, #0
   159c0:	strd	r2, [sp, #8]
   159c4:	ldrb	r4, [r6]
   159c8:	cmp	r4, #0
   159cc:	beq	15b0c <__assert_fail@plt+0x4bac>
   159d0:	mov	r1, r4
   159d4:	mov	r0, r9
   159d8:	bl	10e64 <strchr@plt>
   159dc:	cmp	r0, #0
   159e0:	bne	15a24 <__assert_fail@plt+0x4ac4>
   159e4:	ldrd	r2, [sp, #8]
   159e8:	orr	r5, r5, #2
   159ec:	strd	r2, [r8]
   159f0:	b	15a18 <__assert_fail@plt+0x4ab8>
   159f4:	ldr	r5, [sl]
   159f8:	cmp	r5, #0
   159fc:	beq	15a0c <__assert_fail@plt+0x4aac>
   15a00:	cmp	r5, #34	; 0x22
   15a04:	bne	15c0c <__assert_fail@plt+0x4cac>
   15a08:	mov	r5, #1
   15a0c:	cmp	r9, #0
   15a10:	bne	159c4 <__assert_fail@plt+0x4a64>
   15a14:	strd	r0, [r8]
   15a18:	mov	r0, r5
   15a1c:	add	sp, sp, #16
   15a20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a24:	cmp	r4, #84	; 0x54
   15a28:	beq	15a7c <__assert_fail@plt+0x4b1c>
   15a2c:	bhi	15a64 <__assert_fail@plt+0x4b04>
   15a30:	cmp	r4, #75	; 0x4b
   15a34:	beq	15a7c <__assert_fail@plt+0x4b1c>
   15a38:	bhi	15a54 <__assert_fail@plt+0x4af4>
   15a3c:	cmp	r4, #69	; 0x45
   15a40:	beq	15a7c <__assert_fail@plt+0x4b1c>
   15a44:	cmp	r4, #71	; 0x47
   15a48:	beq	15a7c <__assert_fail@plt+0x4b1c>
   15a4c:	mov	r6, #1
   15a50:	b	15b40 <__assert_fail@plt+0x4be0>
   15a54:	cmp	r4, #77	; 0x4d
   15a58:	beq	15a7c <__assert_fail@plt+0x4b1c>
   15a5c:	cmp	r4, #80	; 0x50
   15a60:	b	15a48 <__assert_fail@plt+0x4ae8>
   15a64:	cmp	r4, #103	; 0x67
   15a68:	beq	15a7c <__assert_fail@plt+0x4b1c>
   15a6c:	bhi	15b18 <__assert_fail@plt+0x4bb8>
   15a70:	sub	r3, r4, #89	; 0x59
   15a74:	cmp	r3, #1
   15a78:	bhi	15a4c <__assert_fail@plt+0x4aec>
   15a7c:	mov	r1, #48	; 0x30
   15a80:	mov	r0, r9
   15a84:	bl	10e64 <strchr@plt>
   15a88:	cmp	r0, #0
   15a8c:	beq	15a4c <__assert_fail@plt+0x4aec>
   15a90:	ldrb	r3, [r6, #1]
   15a94:	cmp	r3, #68	; 0x44
   15a98:	beq	15aac <__assert_fail@plt+0x4b4c>
   15a9c:	cmp	r3, #105	; 0x69
   15aa0:	beq	15b30 <__assert_fail@plt+0x4bd0>
   15aa4:	cmp	r3, #66	; 0x42
   15aa8:	bne	15a4c <__assert_fail@plt+0x4aec>
   15aac:	mov	r6, #2
   15ab0:	mov	r1, #1000	; 0x3e8
   15ab4:	cmp	r4, #89	; 0x59
   15ab8:	beq	15bf4 <__assert_fail@plt+0x4c94>
   15abc:	bhi	15b68 <__assert_fail@plt+0x4c08>
   15ac0:	cmp	r4, #75	; 0x4b
   15ac4:	beq	15ba8 <__assert_fail@plt+0x4c48>
   15ac8:	bhi	15b48 <__assert_fail@plt+0x4be8>
   15acc:	cmp	r4, #69	; 0x45
   15ad0:	beq	15bd0 <__assert_fail@plt+0x4c70>
   15ad4:	cmp	r4, #71	; 0x47
   15ad8:	beq	15bdc <__assert_fail@plt+0x4c7c>
   15adc:	cmp	r4, #66	; 0x42
   15ae0:	moveq	r1, #1024	; 0x400
   15ae4:	bne	159e4 <__assert_fail@plt+0x4a84>
   15ae8:	add	r0, sp, #8
   15aec:	bl	157bc <__assert_fail@plt+0x485c>
   15af0:	ldr	r3, [r7]
   15af4:	orr	r5, r5, r0
   15af8:	add	r2, r3, r6
   15afc:	str	r2, [r7]
   15b00:	ldrb	r3, [r3, r6]
   15b04:	cmp	r3, #0
   15b08:	orrne	r5, r5, #2
   15b0c:	ldrd	r2, [sp, #8]
   15b10:	strd	r2, [r8]
   15b14:	b	15a18 <__assert_fail@plt+0x4ab8>
   15b18:	cmp	r4, #109	; 0x6d
   15b1c:	beq	15a7c <__assert_fail@plt+0x4b1c>
   15b20:	cmp	r4, #116	; 0x74
   15b24:	beq	15a7c <__assert_fail@plt+0x4b1c>
   15b28:	cmp	r4, #107	; 0x6b
   15b2c:	b	15a48 <__assert_fail@plt+0x4ae8>
   15b30:	ldrb	r6, [r6, #2]
   15b34:	cmp	r6, #66	; 0x42
   15b38:	movne	r6, #1
   15b3c:	moveq	r6, #3
   15b40:	mov	r1, #1024	; 0x400
   15b44:	b	15ab4 <__assert_fail@plt+0x4b54>
   15b48:	cmp	r4, #80	; 0x50
   15b4c:	beq	15be4 <__assert_fail@plt+0x4c84>
   15b50:	cmp	r4, #84	; 0x54
   15b54:	beq	15bec <__assert_fail@plt+0x4c8c>
   15b58:	cmp	r4, #77	; 0x4d
   15b5c:	bne	159e4 <__assert_fail@plt+0x4a84>
   15b60:	mov	r2, #2
   15b64:	b	15bd4 <__assert_fail@plt+0x4c74>
   15b68:	cmp	r4, #103	; 0x67
   15b6c:	beq	15bdc <__assert_fail@plt+0x4c7c>
   15b70:	bhi	15b94 <__assert_fail@plt+0x4c34>
   15b74:	cmp	r4, #98	; 0x62
   15b78:	beq	15bc8 <__assert_fail@plt+0x4c68>
   15b7c:	cmp	r4, #99	; 0x63
   15b80:	beq	15c04 <__assert_fail@plt+0x4ca4>
   15b84:	cmp	r4, #90	; 0x5a
   15b88:	bne	159e4 <__assert_fail@plt+0x4a84>
   15b8c:	mov	r2, #7
   15b90:	b	15bd4 <__assert_fail@plt+0x4c74>
   15b94:	cmp	r4, #109	; 0x6d
   15b98:	beq	15b60 <__assert_fail@plt+0x4c00>
   15b9c:	bhi	15bb0 <__assert_fail@plt+0x4c50>
   15ba0:	cmp	r4, #107	; 0x6b
   15ba4:	bne	159e4 <__assert_fail@plt+0x4a84>
   15ba8:	mov	r2, #1
   15bac:	b	15bd4 <__assert_fail@plt+0x4c74>
   15bb0:	cmp	r4, #116	; 0x74
   15bb4:	beq	15bec <__assert_fail@plt+0x4c8c>
   15bb8:	cmp	r4, #119	; 0x77
   15bbc:	moveq	r1, #2
   15bc0:	beq	15ae8 <__assert_fail@plt+0x4b88>
   15bc4:	b	159e4 <__assert_fail@plt+0x4a84>
   15bc8:	mov	r1, #512	; 0x200
   15bcc:	b	15ae8 <__assert_fail@plt+0x4b88>
   15bd0:	mov	r2, #6
   15bd4:	add	r0, sp, #8
   15bd8:	b	15bfc <__assert_fail@plt+0x4c9c>
   15bdc:	mov	r2, #3
   15be0:	b	15bd4 <__assert_fail@plt+0x4c74>
   15be4:	mov	r2, #5
   15be8:	b	15bd4 <__assert_fail@plt+0x4c74>
   15bec:	mov	r2, #4
   15bf0:	b	15bd4 <__assert_fail@plt+0x4c74>
   15bf4:	mov	r2, #8
   15bf8:	add	r0, sp, r2
   15bfc:	bl	158ec <__assert_fail@plt+0x498c>
   15c00:	b	15af0 <__assert_fail@plt+0x4b90>
   15c04:	mov	r0, #0
   15c08:	b	15af0 <__assert_fail@plt+0x4b90>
   15c0c:	mov	r5, #4
   15c10:	b	15a18 <__assert_fail@plt+0x4ab8>
   15c14:	andeq	r7, r1, r6, lsr #15
   15c18:			; <UNDEFINED> instruction: 0x000177b1
   15c1c:			; <UNDEFINED> instruction: 0x000177bf
   15c20:	cmp	r1, #0
   15c24:	cmpne	r0, #0
   15c28:	moveq	r1, #1
   15c2c:	moveq	r0, r1
   15c30:	umull	r2, r3, r0, r1
   15c34:	adds	r3, r3, #0
   15c38:	movne	r3, #1
   15c3c:	cmp	r2, #0
   15c40:	blt	15c50 <__assert_fail@plt+0x4cf0>
   15c44:	cmp	r3, #0
   15c48:	bne	15c50 <__assert_fail@plt+0x4cf0>
   15c4c:	b	10ce4 <calloc@plt>
   15c50:	push	{r4, lr}
   15c54:	bl	10e70 <__errno_location@plt>
   15c58:	mov	r3, #12
   15c5c:	str	r3, [r0]
   15c60:	mov	r0, #0
   15c64:	pop	{r4, pc}
   15c68:	cmp	r0, #0
   15c6c:	mov	r3, #0
   15c70:	moveq	r0, #1
   15c74:	adds	r3, r3, #0
   15c78:	movne	r3, #1
   15c7c:	cmp	r0, #0
   15c80:	blt	15c90 <__assert_fail@plt+0x4d30>
   15c84:	cmp	r3, #0
   15c88:	bne	15c90 <__assert_fail@plt+0x4d30>
   15c8c:	b	10e04 <malloc@plt>
   15c90:	push	{r4, lr}
   15c94:	bl	10e70 <__errno_location@plt>
   15c98:	mov	r3, #12
   15c9c:	str	r3, [r0]
   15ca0:	mov	r0, #0
   15ca4:	pop	{r4, pc}
   15ca8:	cmp	r0, #0
   15cac:	push	{r4, lr}
   15cb0:	mov	r4, r1
   15cb4:	bne	15cc4 <__assert_fail@plt+0x4d64>
   15cb8:	mov	r0, r1
   15cbc:	pop	{r4, lr}
   15cc0:	b	15c68 <__assert_fail@plt+0x4d08>
   15cc4:	cmp	r1, #0
   15cc8:	bne	15cd8 <__assert_fail@plt+0x4d78>
   15ccc:	bl	136b8 <__assert_fail@plt+0x2758>
   15cd0:	mov	r0, #0
   15cd4:	pop	{r4, pc}
   15cd8:	cmp	r1, #0
   15cdc:	blt	15cec <__assert_fail@plt+0x4d8c>
   15ce0:	mov	r3, #0
   15ce4:	cmp	r3, r3
   15ce8:	beq	15cfc <__assert_fail@plt+0x4d9c>
   15cec:	bl	10e70 <__errno_location@plt>
   15cf0:	mov	r3, #12
   15cf4:	str	r3, [r0]
   15cf8:	b	15cd0 <__assert_fail@plt+0x4d70>
   15cfc:	pop	{r4, lr}
   15d00:	b	10d98 <realloc@plt>
   15d04:	push	{r4, r5, r6, lr}
   15d08:	mov	r4, r0
   15d0c:	bl	10dd4 <__fpending@plt>
   15d10:	mov	r5, r0
   15d14:	mov	r0, r4
   15d18:	bl	10de0 <ferror_unlocked@plt>
   15d1c:	mov	r6, r0
   15d20:	mov	r0, r4
   15d24:	bl	135c0 <__assert_fail@plt+0x2660>
   15d28:	cmp	r6, #0
   15d2c:	mov	r4, r0
   15d30:	bne	15d5c <__assert_fail@plt+0x4dfc>
   15d34:	cmp	r0, #0
   15d38:	beq	15d54 <__assert_fail@plt+0x4df4>
   15d3c:	cmp	r5, #0
   15d40:	bne	15d6c <__assert_fail@plt+0x4e0c>
   15d44:	bl	10e70 <__errno_location@plt>
   15d48:	ldr	r4, [r0]
   15d4c:	subs	r4, r4, #9
   15d50:	mvnne	r4, #0
   15d54:	mov	r0, r4
   15d58:	pop	{r4, r5, r6, pc}
   15d5c:	cmp	r0, #0
   15d60:	bne	15d6c <__assert_fail@plt+0x4e0c>
   15d64:	bl	10e70 <__errno_location@plt>
   15d68:	str	r4, [r0]
   15d6c:	mvn	r4, #0
   15d70:	b	15d54 <__assert_fail@plt+0x4df4>
   15d74:	push	{r4, lr}
   15d78:	mov	r0, #14
   15d7c:	bl	10f00 <nl_langinfo@plt>
   15d80:	ldr	r3, [pc, #24]	; 15da0 <__assert_fail@plt+0x4e40>
   15d84:	cmp	r0, #0
   15d88:	moveq	r0, r3
   15d8c:	ldr	r3, [pc, #16]	; 15da4 <__assert_fail@plt+0x4e44>
   15d90:	ldrb	r2, [r0]
   15d94:	cmp	r2, #0
   15d98:	moveq	r0, r3
   15d9c:	pop	{r4, pc}
   15da0:			; <UNDEFINED> instruction: 0x00016fb0
   15da4:	andeq	r7, r1, r5, ror #15
   15da8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15dac:	subs	r5, r0, #0
   15db0:	addeq	r5, sp, #4
   15db4:	mov	r0, r5
   15db8:	mov	r7, r2
   15dbc:	mov	r6, r1
   15dc0:	bl	10dec <mbrtowc@plt>
   15dc4:	cmp	r7, #0
   15dc8:	cmnne	r0, #3
   15dcc:	mov	r4, r0
   15dd0:	bls	15dec <__assert_fail@plt+0x4e8c>
   15dd4:	mov	r0, #0
   15dd8:	bl	15e44 <__assert_fail@plt+0x4ee4>
   15ddc:	cmp	r0, #0
   15de0:	moveq	r4, #1
   15de4:	ldrbeq	r3, [r6]
   15de8:	streq	r3, [r5]
   15dec:	mov	r0, r4
   15df0:	add	sp, sp, #12
   15df4:	pop	{r4, r5, r6, r7, pc}
   15df8:	push	{r4, r5, r6, lr}
   15dfc:	subs	r4, r2, #0
   15e00:	mov	r6, r0
   15e04:	mov	r5, r1
   15e08:	beq	15e20 <__assert_fail@plt+0x4ec0>
   15e0c:	mov	r1, r4
   15e10:	mvn	r0, #0
   15e14:	bl	15f24 <__assert_fail@plt+0x4fc4>
   15e18:	cmp	r0, r5
   15e1c:	bcc	15e30 <__assert_fail@plt+0x4ed0>
   15e20:	mul	r1, r5, r4
   15e24:	mov	r0, r6
   15e28:	pop	{r4, r5, r6, lr}
   15e2c:	b	15ca8 <__assert_fail@plt+0x4d48>
   15e30:	bl	10e70 <__errno_location@plt>
   15e34:	mov	r3, #12
   15e38:	str	r3, [r0]
   15e3c:	mov	r0, #0
   15e40:	pop	{r4, r5, r6, pc}
   15e44:	push	{lr}		; (str lr, [sp, #-4]!)
   15e48:	sub	sp, sp, #268	; 0x10c
   15e4c:	ldr	r2, [pc, #64]	; 15e94 <__assert_fail@plt+0x4f34>
   15e50:	add	r1, sp, #4
   15e54:	bl	15ea0 <__assert_fail@plt+0x4f40>
   15e58:	cmp	r0, #0
   15e5c:	movne	r0, #0
   15e60:	bne	15e8c <__assert_fail@plt+0x4f2c>
   15e64:	ldr	r1, [pc, #44]	; 15e98 <__assert_fail@plt+0x4f38>
   15e68:	add	r0, sp, #4
   15e6c:	bl	10d08 <strcmp@plt>
   15e70:	cmp	r0, #0
   15e74:	beq	15e8c <__assert_fail@plt+0x4f2c>
   15e78:	ldr	r1, [pc, #28]	; 15e9c <__assert_fail@plt+0x4f3c>
   15e7c:	add	r0, sp, #4
   15e80:	bl	10d08 <strcmp@plt>
   15e84:	adds	r0, r0, #0
   15e88:	movne	r0, #1
   15e8c:	add	sp, sp, #268	; 0x10c
   15e90:	pop	{pc}		; (ldr pc, [sp], #4)
   15e94:	andeq	r0, r0, r1, lsl #2
   15e98:	andeq	r7, r1, fp, ror #15
   15e9c:	andeq	r7, r1, sp, ror #15
   15ea0:	push	{r4, r5, r6, lr}
   15ea4:	mov	r5, r1
   15ea8:	mov	r1, #0
   15eac:	mov	r4, r2
   15eb0:	bl	10ee8 <setlocale@plt>
   15eb4:	subs	r6, r0, #0
   15eb8:	bne	15ecc <__assert_fail@plt+0x4f6c>
   15ebc:	cmp	r4, #0
   15ec0:	strbne	r6, [r5]
   15ec4:	mov	r0, #22
   15ec8:	pop	{r4, r5, r6, pc}
   15ecc:	bl	10e58 <strlen@plt>
   15ed0:	cmp	r4, r0
   15ed4:	bls	15ef0 <__assert_fail@plt+0x4f90>
   15ed8:	add	r2, r0, #1
   15edc:	mov	r1, r6
   15ee0:	mov	r0, r5
   15ee4:	bl	10d50 <memcpy@plt>
   15ee8:	mov	r0, #0
   15eec:	pop	{r4, r5, r6, pc}
   15ef0:	cmp	r4, #0
   15ef4:	beq	15f14 <__assert_fail@plt+0x4fb4>
   15ef8:	sub	r4, r4, #1
   15efc:	mov	r2, r4
   15f00:	mov	r1, r6
   15f04:	mov	r0, r5
   15f08:	bl	10d50 <memcpy@plt>
   15f0c:	mov	r3, #0
   15f10:	strb	r3, [r5, r4]
   15f14:	mov	r0, #34	; 0x22
   15f18:	pop	{r4, r5, r6, pc}
   15f1c:	mov	r1, #0
   15f20:	b	10ee8 <setlocale@plt>
   15f24:	subs	r2, r1, #1
   15f28:	bxeq	lr
   15f2c:	bcc	16104 <__assert_fail@plt+0x51a4>
   15f30:	cmp	r0, r1
   15f34:	bls	160e8 <__assert_fail@plt+0x5188>
   15f38:	tst	r1, r2
   15f3c:	beq	160f4 <__assert_fail@plt+0x5194>
   15f40:	clz	r3, r0
   15f44:	clz	r2, r1
   15f48:	sub	r3, r2, r3
   15f4c:	rsbs	r3, r3, #31
   15f50:	addne	r3, r3, r3, lsl #1
   15f54:	mov	r2, #0
   15f58:	addne	pc, pc, r3, lsl #2
   15f5c:	nop			; (mov r0, r0)
   15f60:	cmp	r0, r1, lsl #31
   15f64:	adc	r2, r2, r2
   15f68:	subcs	r0, r0, r1, lsl #31
   15f6c:	cmp	r0, r1, lsl #30
   15f70:	adc	r2, r2, r2
   15f74:	subcs	r0, r0, r1, lsl #30
   15f78:	cmp	r0, r1, lsl #29
   15f7c:	adc	r2, r2, r2
   15f80:	subcs	r0, r0, r1, lsl #29
   15f84:	cmp	r0, r1, lsl #28
   15f88:	adc	r2, r2, r2
   15f8c:	subcs	r0, r0, r1, lsl #28
   15f90:	cmp	r0, r1, lsl #27
   15f94:	adc	r2, r2, r2
   15f98:	subcs	r0, r0, r1, lsl #27
   15f9c:	cmp	r0, r1, lsl #26
   15fa0:	adc	r2, r2, r2
   15fa4:	subcs	r0, r0, r1, lsl #26
   15fa8:	cmp	r0, r1, lsl #25
   15fac:	adc	r2, r2, r2
   15fb0:	subcs	r0, r0, r1, lsl #25
   15fb4:	cmp	r0, r1, lsl #24
   15fb8:	adc	r2, r2, r2
   15fbc:	subcs	r0, r0, r1, lsl #24
   15fc0:	cmp	r0, r1, lsl #23
   15fc4:	adc	r2, r2, r2
   15fc8:	subcs	r0, r0, r1, lsl #23
   15fcc:	cmp	r0, r1, lsl #22
   15fd0:	adc	r2, r2, r2
   15fd4:	subcs	r0, r0, r1, lsl #22
   15fd8:	cmp	r0, r1, lsl #21
   15fdc:	adc	r2, r2, r2
   15fe0:	subcs	r0, r0, r1, lsl #21
   15fe4:	cmp	r0, r1, lsl #20
   15fe8:	adc	r2, r2, r2
   15fec:	subcs	r0, r0, r1, lsl #20
   15ff0:	cmp	r0, r1, lsl #19
   15ff4:	adc	r2, r2, r2
   15ff8:	subcs	r0, r0, r1, lsl #19
   15ffc:	cmp	r0, r1, lsl #18
   16000:	adc	r2, r2, r2
   16004:	subcs	r0, r0, r1, lsl #18
   16008:	cmp	r0, r1, lsl #17
   1600c:	adc	r2, r2, r2
   16010:	subcs	r0, r0, r1, lsl #17
   16014:	cmp	r0, r1, lsl #16
   16018:	adc	r2, r2, r2
   1601c:	subcs	r0, r0, r1, lsl #16
   16020:	cmp	r0, r1, lsl #15
   16024:	adc	r2, r2, r2
   16028:	subcs	r0, r0, r1, lsl #15
   1602c:	cmp	r0, r1, lsl #14
   16030:	adc	r2, r2, r2
   16034:	subcs	r0, r0, r1, lsl #14
   16038:	cmp	r0, r1, lsl #13
   1603c:	adc	r2, r2, r2
   16040:	subcs	r0, r0, r1, lsl #13
   16044:	cmp	r0, r1, lsl #12
   16048:	adc	r2, r2, r2
   1604c:	subcs	r0, r0, r1, lsl #12
   16050:	cmp	r0, r1, lsl #11
   16054:	adc	r2, r2, r2
   16058:	subcs	r0, r0, r1, lsl #11
   1605c:	cmp	r0, r1, lsl #10
   16060:	adc	r2, r2, r2
   16064:	subcs	r0, r0, r1, lsl #10
   16068:	cmp	r0, r1, lsl #9
   1606c:	adc	r2, r2, r2
   16070:	subcs	r0, r0, r1, lsl #9
   16074:	cmp	r0, r1, lsl #8
   16078:	adc	r2, r2, r2
   1607c:	subcs	r0, r0, r1, lsl #8
   16080:	cmp	r0, r1, lsl #7
   16084:	adc	r2, r2, r2
   16088:	subcs	r0, r0, r1, lsl #7
   1608c:	cmp	r0, r1, lsl #6
   16090:	adc	r2, r2, r2
   16094:	subcs	r0, r0, r1, lsl #6
   16098:	cmp	r0, r1, lsl #5
   1609c:	adc	r2, r2, r2
   160a0:	subcs	r0, r0, r1, lsl #5
   160a4:	cmp	r0, r1, lsl #4
   160a8:	adc	r2, r2, r2
   160ac:	subcs	r0, r0, r1, lsl #4
   160b0:	cmp	r0, r1, lsl #3
   160b4:	adc	r2, r2, r2
   160b8:	subcs	r0, r0, r1, lsl #3
   160bc:	cmp	r0, r1, lsl #2
   160c0:	adc	r2, r2, r2
   160c4:	subcs	r0, r0, r1, lsl #2
   160c8:	cmp	r0, r1, lsl #1
   160cc:	adc	r2, r2, r2
   160d0:	subcs	r0, r0, r1, lsl #1
   160d4:	cmp	r0, r1
   160d8:	adc	r2, r2, r2
   160dc:	subcs	r0, r0, r1
   160e0:	mov	r0, r2
   160e4:	bx	lr
   160e8:	moveq	r0, #1
   160ec:	movne	r0, #0
   160f0:	bx	lr
   160f4:	clz	r2, r1
   160f8:	rsb	r2, r2, #31
   160fc:	lsr	r0, r0, r2
   16100:	bx	lr
   16104:	cmp	r0, #0
   16108:	mvnne	r0, #0
   1610c:	b	16444 <__assert_fail@plt+0x54e4>
   16110:	cmp	r1, #0
   16114:	beq	16104 <__assert_fail@plt+0x51a4>
   16118:	push	{r0, r1, lr}
   1611c:	bl	15f24 <__assert_fail@plt+0x4fc4>
   16120:	pop	{r1, r2, lr}
   16124:	mul	r3, r2, r0
   16128:	sub	r1, r1, r3
   1612c:	bx	lr
   16130:	cmp	r1, #0
   16134:	beq	16340 <__assert_fail@plt+0x53e0>
   16138:	eor	ip, r0, r1
   1613c:	rsbmi	r1, r1, #0
   16140:	subs	r2, r1, #1
   16144:	beq	1630c <__assert_fail@plt+0x53ac>
   16148:	movs	r3, r0
   1614c:	rsbmi	r3, r0, #0
   16150:	cmp	r3, r1
   16154:	bls	16318 <__assert_fail@plt+0x53b8>
   16158:	tst	r1, r2
   1615c:	beq	16328 <__assert_fail@plt+0x53c8>
   16160:	clz	r2, r3
   16164:	clz	r0, r1
   16168:	sub	r2, r0, r2
   1616c:	rsbs	r2, r2, #31
   16170:	addne	r2, r2, r2, lsl #1
   16174:	mov	r0, #0
   16178:	addne	pc, pc, r2, lsl #2
   1617c:	nop			; (mov r0, r0)
   16180:	cmp	r3, r1, lsl #31
   16184:	adc	r0, r0, r0
   16188:	subcs	r3, r3, r1, lsl #31
   1618c:	cmp	r3, r1, lsl #30
   16190:	adc	r0, r0, r0
   16194:	subcs	r3, r3, r1, lsl #30
   16198:	cmp	r3, r1, lsl #29
   1619c:	adc	r0, r0, r0
   161a0:	subcs	r3, r3, r1, lsl #29
   161a4:	cmp	r3, r1, lsl #28
   161a8:	adc	r0, r0, r0
   161ac:	subcs	r3, r3, r1, lsl #28
   161b0:	cmp	r3, r1, lsl #27
   161b4:	adc	r0, r0, r0
   161b8:	subcs	r3, r3, r1, lsl #27
   161bc:	cmp	r3, r1, lsl #26
   161c0:	adc	r0, r0, r0
   161c4:	subcs	r3, r3, r1, lsl #26
   161c8:	cmp	r3, r1, lsl #25
   161cc:	adc	r0, r0, r0
   161d0:	subcs	r3, r3, r1, lsl #25
   161d4:	cmp	r3, r1, lsl #24
   161d8:	adc	r0, r0, r0
   161dc:	subcs	r3, r3, r1, lsl #24
   161e0:	cmp	r3, r1, lsl #23
   161e4:	adc	r0, r0, r0
   161e8:	subcs	r3, r3, r1, lsl #23
   161ec:	cmp	r3, r1, lsl #22
   161f0:	adc	r0, r0, r0
   161f4:	subcs	r3, r3, r1, lsl #22
   161f8:	cmp	r3, r1, lsl #21
   161fc:	adc	r0, r0, r0
   16200:	subcs	r3, r3, r1, lsl #21
   16204:	cmp	r3, r1, lsl #20
   16208:	adc	r0, r0, r0
   1620c:	subcs	r3, r3, r1, lsl #20
   16210:	cmp	r3, r1, lsl #19
   16214:	adc	r0, r0, r0
   16218:	subcs	r3, r3, r1, lsl #19
   1621c:	cmp	r3, r1, lsl #18
   16220:	adc	r0, r0, r0
   16224:	subcs	r3, r3, r1, lsl #18
   16228:	cmp	r3, r1, lsl #17
   1622c:	adc	r0, r0, r0
   16230:	subcs	r3, r3, r1, lsl #17
   16234:	cmp	r3, r1, lsl #16
   16238:	adc	r0, r0, r0
   1623c:	subcs	r3, r3, r1, lsl #16
   16240:	cmp	r3, r1, lsl #15
   16244:	adc	r0, r0, r0
   16248:	subcs	r3, r3, r1, lsl #15
   1624c:	cmp	r3, r1, lsl #14
   16250:	adc	r0, r0, r0
   16254:	subcs	r3, r3, r1, lsl #14
   16258:	cmp	r3, r1, lsl #13
   1625c:	adc	r0, r0, r0
   16260:	subcs	r3, r3, r1, lsl #13
   16264:	cmp	r3, r1, lsl #12
   16268:	adc	r0, r0, r0
   1626c:	subcs	r3, r3, r1, lsl #12
   16270:	cmp	r3, r1, lsl #11
   16274:	adc	r0, r0, r0
   16278:	subcs	r3, r3, r1, lsl #11
   1627c:	cmp	r3, r1, lsl #10
   16280:	adc	r0, r0, r0
   16284:	subcs	r3, r3, r1, lsl #10
   16288:	cmp	r3, r1, lsl #9
   1628c:	adc	r0, r0, r0
   16290:	subcs	r3, r3, r1, lsl #9
   16294:	cmp	r3, r1, lsl #8
   16298:	adc	r0, r0, r0
   1629c:	subcs	r3, r3, r1, lsl #8
   162a0:	cmp	r3, r1, lsl #7
   162a4:	adc	r0, r0, r0
   162a8:	subcs	r3, r3, r1, lsl #7
   162ac:	cmp	r3, r1, lsl #6
   162b0:	adc	r0, r0, r0
   162b4:	subcs	r3, r3, r1, lsl #6
   162b8:	cmp	r3, r1, lsl #5
   162bc:	adc	r0, r0, r0
   162c0:	subcs	r3, r3, r1, lsl #5
   162c4:	cmp	r3, r1, lsl #4
   162c8:	adc	r0, r0, r0
   162cc:	subcs	r3, r3, r1, lsl #4
   162d0:	cmp	r3, r1, lsl #3
   162d4:	adc	r0, r0, r0
   162d8:	subcs	r3, r3, r1, lsl #3
   162dc:	cmp	r3, r1, lsl #2
   162e0:	adc	r0, r0, r0
   162e4:	subcs	r3, r3, r1, lsl #2
   162e8:	cmp	r3, r1, lsl #1
   162ec:	adc	r0, r0, r0
   162f0:	subcs	r3, r3, r1, lsl #1
   162f4:	cmp	r3, r1
   162f8:	adc	r0, r0, r0
   162fc:	subcs	r3, r3, r1
   16300:	cmp	ip, #0
   16304:	rsbmi	r0, r0, #0
   16308:	bx	lr
   1630c:	teq	ip, r0
   16310:	rsbmi	r0, r0, #0
   16314:	bx	lr
   16318:	movcc	r0, #0
   1631c:	asreq	r0, ip, #31
   16320:	orreq	r0, r0, #1
   16324:	bx	lr
   16328:	clz	r2, r1
   1632c:	rsb	r2, r2, #31
   16330:	cmp	ip, #0
   16334:	lsr	r0, r3, r2
   16338:	rsbmi	r0, r0, #0
   1633c:	bx	lr
   16340:	cmp	r0, #0
   16344:	mvngt	r0, #-2147483648	; 0x80000000
   16348:	movlt	r0, #-2147483648	; 0x80000000
   1634c:	b	16444 <__assert_fail@plt+0x54e4>
   16350:	cmp	r1, #0
   16354:	beq	16340 <__assert_fail@plt+0x53e0>
   16358:	push	{r0, r1, lr}
   1635c:	bl	16138 <__assert_fail@plt+0x51d8>
   16360:	pop	{r1, r2, lr}
   16364:	mul	r3, r2, r0
   16368:	sub	r1, r1, r3
   1636c:	bx	lr
   16370:	cmp	r3, #0
   16374:	cmpeq	r2, #0
   16378:	bne	1639c <__assert_fail@plt+0x543c>
   1637c:	cmp	r1, #0
   16380:	movlt	r1, #-2147483648	; 0x80000000
   16384:	movlt	r0, #0
   16388:	blt	16398 <__assert_fail@plt+0x5438>
   1638c:	cmpeq	r0, #0
   16390:	mvnne	r1, #-2147483648	; 0x80000000
   16394:	mvnne	r0, #0
   16398:	b	16444 <__assert_fail@plt+0x54e4>
   1639c:	sub	sp, sp, #8
   163a0:	push	{sp, lr}
   163a4:	cmp	r1, #0
   163a8:	blt	163c8 <__assert_fail@plt+0x5468>
   163ac:	cmp	r3, #0
   163b0:	blt	163fc <__assert_fail@plt+0x549c>
   163b4:	bl	16454 <__assert_fail@plt+0x54f4>
   163b8:	ldr	lr, [sp, #4]
   163bc:	add	sp, sp, #8
   163c0:	pop	{r2, r3}
   163c4:	bx	lr
   163c8:	rsbs	r0, r0, #0
   163cc:	sbc	r1, r1, r1, lsl #1
   163d0:	cmp	r3, #0
   163d4:	blt	16420 <__assert_fail@plt+0x54c0>
   163d8:	bl	16454 <__assert_fail@plt+0x54f4>
   163dc:	ldr	lr, [sp, #4]
   163e0:	add	sp, sp, #8
   163e4:	pop	{r2, r3}
   163e8:	rsbs	r0, r0, #0
   163ec:	sbc	r1, r1, r1, lsl #1
   163f0:	rsbs	r2, r2, #0
   163f4:	sbc	r3, r3, r3, lsl #1
   163f8:	bx	lr
   163fc:	rsbs	r2, r2, #0
   16400:	sbc	r3, r3, r3, lsl #1
   16404:	bl	16454 <__assert_fail@plt+0x54f4>
   16408:	ldr	lr, [sp, #4]
   1640c:	add	sp, sp, #8
   16410:	pop	{r2, r3}
   16414:	rsbs	r0, r0, #0
   16418:	sbc	r1, r1, r1, lsl #1
   1641c:	bx	lr
   16420:	rsbs	r2, r2, #0
   16424:	sbc	r3, r3, r3, lsl #1
   16428:	bl	16454 <__assert_fail@plt+0x54f4>
   1642c:	ldr	lr, [sp, #4]
   16430:	add	sp, sp, #8
   16434:	pop	{r2, r3}
   16438:	rsbs	r2, r2, #0
   1643c:	sbc	r3, r3, r3, lsl #1
   16440:	bx	lr
   16444:	push	{r1, lr}
   16448:	mov	r0, #8
   1644c:	bl	10cfc <raise@plt>
   16450:	pop	{r1, pc}
   16454:	cmp	r1, r3
   16458:	push	{r4, r5, r6, r7, r8, r9, lr}
   1645c:	cmpeq	r0, r2
   16460:	mov	r4, r0
   16464:	mov	r5, r1
   16468:	ldr	r9, [sp, #28]
   1646c:	movcc	r0, #0
   16470:	movcc	r1, #0
   16474:	bcc	1656c <__assert_fail@plt+0x560c>
   16478:	cmp	r3, #0
   1647c:	clzeq	ip, r2
   16480:	clzne	ip, r3
   16484:	addeq	ip, ip, #32
   16488:	cmp	r5, #0
   1648c:	clzeq	r1, r4
   16490:	addeq	r1, r1, #32
   16494:	clzne	r1, r5
   16498:	sub	ip, ip, r1
   1649c:	sub	lr, ip, #32
   164a0:	lsl	r7, r3, ip
   164a4:	rsb	r8, ip, #32
   164a8:	orr	r7, r7, r2, lsl lr
   164ac:	orr	r7, r7, r2, lsr r8
   164b0:	lsl	r6, r2, ip
   164b4:	cmp	r5, r7
   164b8:	cmpeq	r4, r6
   164bc:	movcc	r0, #0
   164c0:	movcc	r1, #0
   164c4:	bcc	164e0 <__assert_fail@plt+0x5580>
   164c8:	mov	r3, #1
   164cc:	subs	r4, r4, r6
   164d0:	lsl	r1, r3, lr
   164d4:	lsl	r0, r3, ip
   164d8:	orr	r1, r1, r3, lsr r8
   164dc:	sbc	r5, r5, r7
   164e0:	cmp	ip, #0
   164e4:	beq	1656c <__assert_fail@plt+0x560c>
   164e8:	lsrs	r3, r7, #1
   164ec:	rrx	r2, r6
   164f0:	mov	r6, ip
   164f4:	b	16518 <__assert_fail@plt+0x55b8>
   164f8:	subs	r4, r4, r2
   164fc:	sbc	r5, r5, r3
   16500:	adds	r4, r4, r4
   16504:	adc	r5, r5, r5
   16508:	adds	r4, r4, #1
   1650c:	adc	r5, r5, #0
   16510:	subs	r6, r6, #1
   16514:	beq	16534 <__assert_fail@plt+0x55d4>
   16518:	cmp	r5, r3
   1651c:	cmpeq	r4, r2
   16520:	bcs	164f8 <__assert_fail@plt+0x5598>
   16524:	adds	r4, r4, r4
   16528:	adc	r5, r5, r5
   1652c:	subs	r6, r6, #1
   16530:	bne	16518 <__assert_fail@plt+0x55b8>
   16534:	lsr	r6, r4, ip
   16538:	lsr	r7, r5, ip
   1653c:	orr	r6, r6, r5, lsl r8
   16540:	adds	r2, r0, r4
   16544:	orr	r6, r6, r5, lsr lr
   16548:	adc	r3, r1, r5
   1654c:	lsl	r1, r7, ip
   16550:	orr	r1, r1, r6, lsl lr
   16554:	lsl	r0, r6, ip
   16558:	orr	r1, r1, r6, lsr r8
   1655c:	subs	r0, r2, r0
   16560:	mov	r4, r6
   16564:	mov	r5, r7
   16568:	sbc	r1, r3, r1
   1656c:	cmp	r9, #0
   16570:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16574:	strd	r4, [r9]
   16578:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1657c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16580:	mov	r7, r0
   16584:	ldr	r6, [pc, #72]	; 165d4 <__assert_fail@plt+0x5674>
   16588:	ldr	r5, [pc, #72]	; 165d8 <__assert_fail@plt+0x5678>
   1658c:	add	r6, pc, r6
   16590:	add	r5, pc, r5
   16594:	sub	r6, r6, r5
   16598:	mov	r8, r1
   1659c:	mov	r9, r2
   165a0:	bl	10cc4 <calloc@plt-0x20>
   165a4:	asrs	r6, r6, #2
   165a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   165ac:	mov	r4, #0
   165b0:	add	r4, r4, #1
   165b4:	ldr	r3, [r5], #4
   165b8:	mov	r2, r9
   165bc:	mov	r1, r8
   165c0:	mov	r0, r7
   165c4:	blx	r3
   165c8:	cmp	r6, r4
   165cc:	bne	165b0 <__assert_fail@plt+0x5650>
   165d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   165d4:	andeq	r1, r1, ip, ror r9
   165d8:	andeq	r1, r1, r4, ror r9
   165dc:	bx	lr
   165e0:	ldr	r3, [pc, #12]	; 165f4 <__assert_fail@plt+0x5694>
   165e4:	mov	r1, #0
   165e8:	add	r3, pc, r3
   165ec:	ldr	r2, [r3]
   165f0:	b	10e7c <__cxa_atexit@plt>
   165f4:	strdeq	r1, [r1], -ip

Disassembly of section .fini:

000165f8 <.fini>:
   165f8:	push	{r3, lr}
   165fc:	pop	{r3, pc}
