
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c70 <.init>:
   10c70:	push	{r3, lr}
   10c74:	bl	10f3c <__assert_fail@plt+0x48>
   10c78:	pop	{r3, pc}

Disassembly of section .plt:

00010c7c <calloc@plt-0x14>:
   10c7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c80:	ldr	lr, [pc, #4]	; 10c8c <calloc@plt-0x4>
   10c84:	add	lr, pc, lr
   10c88:	ldr	pc, [lr, #8]!
   10c8c:	andeq	r8, r1, r4, ror r3

00010c90 <calloc@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #24, 20	; 0x18000
   10c98:	ldr	pc, [ip, #884]!	; 0x374

00010c9c <fputs_unlocked@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #24, 20	; 0x18000
   10ca4:	ldr	pc, [ip, #876]!	; 0x36c

00010ca8 <raise@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #24, 20	; 0x18000
   10cb0:	ldr	pc, [ip, #868]!	; 0x364

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #24, 20	; 0x18000
   10cbc:	ldr	pc, [ip, #860]!	; 0x35c

00010cc0 <posix_fadvise64@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #852]!	; 0x354

00010ccc <printf@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #24, 20	; 0x18000
   10cd4:	ldr	pc, [ip, #844]!	; 0x34c

00010cd8 <fflush@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #24, 20	; 0x18000
   10ce0:	ldr	pc, [ip, #836]!	; 0x344

00010ce4 <free@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #24, 20	; 0x18000
   10cec:	ldr	pc, [ip, #828]!	; 0x33c

00010cf0 <_exit@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #24, 20	; 0x18000
   10cf8:	ldr	pc, [ip, #820]!	; 0x334

00010cfc <memcpy@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #812]!	; 0x32c

00010d08 <mbsinit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #804]!	; 0x324

00010d14 <fwrite_unlocked@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #796]!	; 0x31c

00010d20 <memcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #788]!	; 0x314

00010d2c <fputc_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #780]!	; 0x30c

00010d38 <getc_unlocked@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #772]!	; 0x304

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d50 <textdomain@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #756]!	; 0x2f4

00010d5c <iswprint@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #748]!	; 0x2ec

00010d68 <fwrite@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #740]!	; 0x2e4

00010d74 <lseek64@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d80 <__ctype_get_mb_cur_max@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #724]!	; 0x2d4

00010d8c <__fpending@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #716]!	; 0x2cc

00010d98 <ferror_unlocked@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #708]!	; 0x2c4

00010da4 <mbrtowc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #700]!	; 0x2bc

00010db0 <error@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #692]!	; 0x2b4

00010dbc <malloc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #684]!	; 0x2ac

00010dc8 <__libc_start_main@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #676]!	; 0x2a4

00010dd4 <__freading@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #668]!	; 0x29c

00010de0 <__gmon_start__@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #660]!	; 0x294

00010dec <getopt_long@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #652]!	; 0x28c

00010df8 <__ctype_b_loc@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #644]!	; 0x284

00010e04 <exit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #636]!	; 0x27c

00010e10 <gettext@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #628]!	; 0x274

00010e1c <strlen@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #620]!	; 0x26c

00010e28 <fprintf@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #612]!	; 0x264

00010e34 <__errno_location@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #604]!	; 0x25c

00010e40 <__cxa_atexit@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #596]!	; 0x254

00010e4c <memset@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #588]!	; 0x24c

00010e58 <fileno@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #580]!	; 0x244

00010e64 <fclose@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #572]!	; 0x23c

00010e70 <fseeko64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #564]!	; 0x234

00010e7c <setlocale@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #556]!	; 0x22c

00010e88 <strrchr@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #548]!	; 0x224

00010e94 <nl_langinfo@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #540]!	; 0x21c

00010ea0 <clearerr_unlocked@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #532]!	; 0x214

00010eac <fopen64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #524]!	; 0x20c

00010eb8 <bindtextdomain@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #516]!	; 0x204

00010ec4 <strncmp@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #508]!	; 0x1fc

00010ed0 <abort@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #500]!	; 0x1f4

00010edc <putchar_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ee8 <strspn@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ef4 <__assert_fail@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #476]!	; 0x1dc

Disassembly of section .text:

00010f00 <.text>:
   10f00:	mov	fp, #0
   10f04:	mov	lr, #0
   10f08:	pop	{r1}		; (ldr r1, [sp], #4)
   10f0c:	mov	r2, sp
   10f10:	push	{r2}		; (str r2, [sp, #-4]!)
   10f14:	push	{r0}		; (str r0, [sp, #-4]!)
   10f18:	ldr	ip, [pc, #16]	; 10f30 <__assert_fail@plt+0x3c>
   10f1c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f20:	ldr	r0, [pc, #12]	; 10f34 <__assert_fail@plt+0x40>
   10f24:	ldr	r3, [pc, #12]	; 10f38 <__assert_fail@plt+0x44>
   10f28:	bl	10dc8 <__libc_start_main@plt>
   10f2c:	bl	10ed0 <abort@plt>
   10f30:	andeq	r7, r1, r8, lsl #26
   10f34:	muleq	r1, r4, r7
   10f38:	andeq	r7, r1, r8, lsr #25
   10f3c:	ldr	r3, [pc, #20]	; 10f58 <__assert_fail@plt+0x64>
   10f40:	ldr	r2, [pc, #20]	; 10f5c <__assert_fail@plt+0x68>
   10f44:	add	r3, pc, r3
   10f48:	ldr	r2, [r3, r2]
   10f4c:	cmp	r2, #0
   10f50:	bxeq	lr
   10f54:	b	10de0 <__gmon_start__@plt>
   10f58:	strheq	r8, [r1], -r4
   10f5c:	ldrdeq	r0, [r0], -ip
   10f60:	ldr	r3, [pc, #28]	; 10f84 <__assert_fail@plt+0x90>
   10f64:	ldr	r0, [pc, #28]	; 10f88 <__assert_fail@plt+0x94>
   10f68:	sub	r3, r3, r0
   10f6c:	cmp	r3, #6
   10f70:	bxls	lr
   10f74:	ldr	r3, [pc, #16]	; 10f8c <__assert_fail@plt+0x98>
   10f78:	cmp	r3, #0
   10f7c:	bxeq	lr
   10f80:	bx	r3
   10f84:	andeq	r9, r2, fp, lsr r1
   10f88:	andeq	r9, r2, r8, lsr r1
   10f8c:	andeq	r0, r0, r0
   10f90:	ldr	r1, [pc, #36]	; 10fbc <__assert_fail@plt+0xc8>
   10f94:	ldr	r0, [pc, #36]	; 10fc0 <__assert_fail@plt+0xcc>
   10f98:	sub	r1, r1, r0
   10f9c:	asr	r1, r1, #2
   10fa0:	add	r1, r1, r1, lsr #31
   10fa4:	asrs	r1, r1, #1
   10fa8:	bxeq	lr
   10fac:	ldr	r3, [pc, #16]	; 10fc4 <__assert_fail@plt+0xd0>
   10fb0:	cmp	r3, #0
   10fb4:	bxeq	lr
   10fb8:	bx	r3
   10fbc:	andeq	r9, r2, r8, lsr r1
   10fc0:	andeq	r9, r2, r8, lsr r1
   10fc4:	andeq	r0, r0, r0
   10fc8:	push	{r4, lr}
   10fcc:	ldr	r4, [pc, #24]	; 10fec <__assert_fail@plt+0xf8>
   10fd0:	ldrb	r3, [r4]
   10fd4:	cmp	r3, #0
   10fd8:	popne	{r4, pc}
   10fdc:	bl	10f60 <__assert_fail@plt+0x6c>
   10fe0:	mov	r3, #1
   10fe4:	strb	r3, [r4]
   10fe8:	pop	{r4, pc}
   10fec:	andeq	r9, r2, ip, asr r1
   10ff0:	ldr	r0, [pc, #40]	; 11020 <__assert_fail@plt+0x12c>
   10ff4:	ldr	r3, [r0]
   10ff8:	cmp	r3, #0
   10ffc:	bne	11004 <__assert_fail@plt+0x110>
   11000:	b	10f90 <__assert_fail@plt+0x9c>
   11004:	ldr	r3, [pc, #24]	; 11024 <__assert_fail@plt+0x130>
   11008:	cmp	r3, #0
   1100c:	beq	11000 <__assert_fail@plt+0x10c>
   11010:	push	{r4, lr}
   11014:	blx	r3
   11018:	pop	{r4, lr}
   1101c:	b	10f90 <__assert_fail@plt+0x9c>
   11020:	andeq	r8, r2, r4, lsl pc
   11024:	andeq	r0, r0, r0
   11028:	push	{fp, lr}
   1102c:	add	fp, sp, #4
   11030:	ldr	r0, [pc, #32]	; 11058 <__assert_fail@plt+0x164>
   11034:	bl	10e10 <gettext@plt>
   11038:	mov	r2, r0
   1103c:	ldr	r3, [pc, #24]	; 1105c <__assert_fail@plt+0x168>
   11040:	ldr	r3, [r3]
   11044:	mov	r1, r3
   11048:	mov	r0, r2
   1104c:	bl	10c9c <fputs_unlocked@plt>
   11050:	nop			; (mov r0, r0)
   11054:	pop	{fp, pc}
   11058:	andeq	r7, r1, r0, lsr sp
   1105c:	andeq	r9, r2, r4, asr r1
   11060:	push	{fp, lr}
   11064:	add	fp, sp, #4
   11068:	ldr	r0, [pc, #32]	; 11090 <__assert_fail@plt+0x19c>
   1106c:	bl	10e10 <gettext@plt>
   11070:	mov	r2, r0
   11074:	ldr	r3, [pc, #24]	; 11094 <__assert_fail@plt+0x1a0>
   11078:	ldr	r3, [r3]
   1107c:	mov	r1, r3
   11080:	mov	r0, r2
   11084:	bl	10c9c <fputs_unlocked@plt>
   11088:	nop			; (mov r0, r0)
   1108c:	pop	{fp, pc}
   11090:	andeq	r7, r1, r8, ror #26
   11094:	andeq	r9, r2, r4, asr r1
   11098:	push	{fp, lr}
   1109c:	add	fp, sp, #4
   110a0:	sub	sp, sp, #80	; 0x50
   110a4:	str	r0, [fp, #-80]	; 0xffffffb0
   110a8:	ldr	r3, [pc, #348]	; 1120c <__assert_fail@plt+0x318>
   110ac:	sub	ip, fp, #72	; 0x48
   110b0:	mov	lr, r3
   110b4:	ldm	lr!, {r0, r1, r2, r3}
   110b8:	stmia	ip!, {r0, r1, r2, r3}
   110bc:	ldm	lr!, {r0, r1, r2, r3}
   110c0:	stmia	ip!, {r0, r1, r2, r3}
   110c4:	ldm	lr!, {r0, r1, r2, r3}
   110c8:	stmia	ip!, {r0, r1, r2, r3}
   110cc:	ldm	lr, {r0, r1}
   110d0:	stm	ip, {r0, r1}
   110d4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   110d8:	str	r3, [fp, #-8]
   110dc:	sub	r3, fp, #72	; 0x48
   110e0:	str	r3, [fp, #-12]
   110e4:	b	110f4 <__assert_fail@plt+0x200>
   110e8:	ldr	r3, [fp, #-12]
   110ec:	add	r3, r3, #8
   110f0:	str	r3, [fp, #-12]
   110f4:	ldr	r3, [fp, #-12]
   110f8:	ldr	r3, [r3]
   110fc:	cmp	r3, #0
   11100:	beq	11124 <__assert_fail@plt+0x230>
   11104:	ldr	r3, [fp, #-12]
   11108:	ldr	r3, [r3]
   1110c:	mov	r1, r3
   11110:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11114:	bl	10cb4 <strcmp@plt>
   11118:	mov	r3, r0
   1111c:	cmp	r3, #0
   11120:	bne	110e8 <__assert_fail@plt+0x1f4>
   11124:	ldr	r3, [fp, #-12]
   11128:	ldr	r3, [r3, #4]
   1112c:	cmp	r3, #0
   11130:	beq	11140 <__assert_fail@plt+0x24c>
   11134:	ldr	r3, [fp, #-12]
   11138:	ldr	r3, [r3, #4]
   1113c:	str	r3, [fp, #-8]
   11140:	ldr	r0, [pc, #200]	; 11210 <__assert_fail@plt+0x31c>
   11144:	bl	10e10 <gettext@plt>
   11148:	mov	r3, r0
   1114c:	ldr	r2, [pc, #192]	; 11214 <__assert_fail@plt+0x320>
   11150:	ldr	r1, [pc, #192]	; 11218 <__assert_fail@plt+0x324>
   11154:	mov	r0, r3
   11158:	bl	10ccc <printf@plt>
   1115c:	mov	r1, #0
   11160:	mov	r0, #5
   11164:	bl	10e7c <setlocale@plt>
   11168:	str	r0, [fp, #-16]
   1116c:	ldr	r3, [fp, #-16]
   11170:	cmp	r3, #0
   11174:	beq	111b4 <__assert_fail@plt+0x2c0>
   11178:	mov	r2, #3
   1117c:	ldr	r1, [pc, #152]	; 1121c <__assert_fail@plt+0x328>
   11180:	ldr	r0, [fp, #-16]
   11184:	bl	10ec4 <strncmp@plt>
   11188:	mov	r3, r0
   1118c:	cmp	r3, #0
   11190:	beq	111b4 <__assert_fail@plt+0x2c0>
   11194:	ldr	r0, [pc, #132]	; 11220 <__assert_fail@plt+0x32c>
   11198:	bl	10e10 <gettext@plt>
   1119c:	mov	r2, r0
   111a0:	ldr	r3, [pc, #124]	; 11224 <__assert_fail@plt+0x330>
   111a4:	ldr	r3, [r3]
   111a8:	mov	r1, r3
   111ac:	mov	r0, r2
   111b0:	bl	10c9c <fputs_unlocked@plt>
   111b4:	ldr	r0, [pc, #108]	; 11228 <__assert_fail@plt+0x334>
   111b8:	bl	10e10 <gettext@plt>
   111bc:	mov	r3, r0
   111c0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   111c4:	ldr	r1, [pc, #72]	; 11214 <__assert_fail@plt+0x320>
   111c8:	mov	r0, r3
   111cc:	bl	10ccc <printf@plt>
   111d0:	ldr	r0, [pc, #84]	; 1122c <__assert_fail@plt+0x338>
   111d4:	bl	10e10 <gettext@plt>
   111d8:	ldr	r2, [fp, #-8]
   111dc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   111e0:	cmp	r2, r3
   111e4:	bne	111f0 <__assert_fail@plt+0x2fc>
   111e8:	ldr	r3, [pc, #64]	; 11230 <__assert_fail@plt+0x33c>
   111ec:	b	111f4 <__assert_fail@plt+0x300>
   111f0:	ldr	r3, [pc, #60]	; 11234 <__assert_fail@plt+0x340>
   111f4:	mov	r2, r3
   111f8:	ldr	r1, [fp, #-8]
   111fc:	bl	10ccc <printf@plt>
   11200:	nop			; (mov r0, r0)
   11204:	sub	sp, fp, #4
   11208:	pop	{fp, pc}
   1120c:	andeq	r7, r1, r8, lsr #30
   11210:			; <UNDEFINED> instruction: 0x00017db4
   11214:	andeq	r7, r1, ip, asr #27
   11218:	strdeq	r7, [r1], -r4
   1121c:	andeq	r7, r1, r4, lsl #28
   11220:	andeq	r7, r1, r8, lsl #28
   11224:	andeq	r9, r2, r4, asr r1
   11228:	andeq	r7, r1, r0, asr lr
   1122c:	andeq	r7, r1, ip, ror #28
   11230:	andeq	r7, r1, r0, lsr #29
   11234:	andeq	r7, r1, ip, lsr #29
   11238:	push	{r4, fp, lr}
   1123c:	add	fp, sp, #8
   11240:	sub	sp, sp, #12
   11244:	str	r0, [fp, #-16]
   11248:	ldr	r3, [fp, #-16]
   1124c:	cmp	r3, #0
   11250:	beq	11280 <__assert_fail@plt+0x38c>
   11254:	ldr	r3, [pc, #224]	; 1133c <__assert_fail@plt+0x448>
   11258:	ldr	r4, [r3]
   1125c:	ldr	r0, [pc, #220]	; 11340 <__assert_fail@plt+0x44c>
   11260:	bl	10e10 <gettext@plt>
   11264:	mov	r1, r0
   11268:	ldr	r3, [pc, #212]	; 11344 <__assert_fail@plt+0x450>
   1126c:	ldr	r3, [r3]
   11270:	mov	r2, r3
   11274:	mov	r0, r4
   11278:	bl	10e28 <fprintf@plt>
   1127c:	b	11334 <__assert_fail@plt+0x440>
   11280:	ldr	r0, [pc, #192]	; 11348 <__assert_fail@plt+0x454>
   11284:	bl	10e10 <gettext@plt>
   11288:	mov	r2, r0
   1128c:	ldr	r3, [pc, #176]	; 11344 <__assert_fail@plt+0x450>
   11290:	ldr	r3, [r3]
   11294:	mov	r1, r3
   11298:	mov	r0, r2
   1129c:	bl	10ccc <printf@plt>
   112a0:	ldr	r0, [pc, #164]	; 1134c <__assert_fail@plt+0x458>
   112a4:	bl	10e10 <gettext@plt>
   112a8:	mov	r2, r0
   112ac:	ldr	r3, [pc, #156]	; 11350 <__assert_fail@plt+0x45c>
   112b0:	ldr	r3, [r3]
   112b4:	mov	r1, r3
   112b8:	mov	r0, r2
   112bc:	bl	10c9c <fputs_unlocked@plt>
   112c0:	bl	11028 <__assert_fail@plt+0x134>
   112c4:	bl	11060 <__assert_fail@plt+0x16c>
   112c8:	ldr	r0, [pc, #132]	; 11354 <__assert_fail@plt+0x460>
   112cc:	bl	10e10 <gettext@plt>
   112d0:	mov	r2, r0
   112d4:	ldr	r3, [pc, #116]	; 11350 <__assert_fail@plt+0x45c>
   112d8:	ldr	r3, [r3]
   112dc:	mov	r1, r3
   112e0:	mov	r0, r2
   112e4:	bl	10c9c <fputs_unlocked@plt>
   112e8:	bl	12910 <__assert_fail@plt+0x1a1c>
   112ec:	ldr	r0, [pc, #100]	; 11358 <__assert_fail@plt+0x464>
   112f0:	bl	10e10 <gettext@plt>
   112f4:	mov	r2, r0
   112f8:	ldr	r3, [pc, #80]	; 11350 <__assert_fail@plt+0x45c>
   112fc:	ldr	r3, [r3]
   11300:	mov	r1, r3
   11304:	mov	r0, r2
   11308:	bl	10c9c <fputs_unlocked@plt>
   1130c:	ldr	r0, [pc, #72]	; 1135c <__assert_fail@plt+0x468>
   11310:	bl	10e10 <gettext@plt>
   11314:	mov	r2, r0
   11318:	ldr	r3, [pc, #48]	; 11350 <__assert_fail@plt+0x45c>
   1131c:	ldr	r3, [r3]
   11320:	mov	r1, r3
   11324:	mov	r0, r2
   11328:	bl	10c9c <fputs_unlocked@plt>
   1132c:	ldr	r0, [pc, #44]	; 11360 <__assert_fail@plt+0x46c>
   11330:	bl	11098 <__assert_fail@plt+0x1a4>
   11334:	ldr	r0, [fp, #-16]
   11338:	bl	10e04 <exit@plt>
   1133c:	andeq	r9, r2, r8, asr #2
   11340:	andeq	r7, r1, r8, ror #31
   11344:	andeq	r9, r2, r8, lsr #3
   11348:	andeq	r8, r1, r0, lsl r0
   1134c:	andeq	r8, r1, r4, lsr r0
   11350:	andeq	r9, r2, r4, asr r1
   11354:	andeq	r8, r1, r8, ror r0
   11358:	andeq	r8, r1, r8, asr r1
   1135c:	andeq	r8, r1, r8, lsl #3
   11360:	andeq	r8, r1, r0, asr #3
   11364:	push	{r4, fp, lr}
   11368:	add	fp, sp, #8
   1136c:	sub	sp, sp, #68	; 0x44
   11370:	mov	r0, #0
   11374:	bl	12698 <__assert_fail@plt+0x17a4>
   11378:	str	r0, [fp, #-16]
   1137c:	ldr	r3, [fp, #-16]
   11380:	cmp	r3, #0
   11384:	beq	11774 <__assert_fail@plt+0x880>
   11388:	ldr	r3, [pc, #1008]	; 11780 <__assert_fail@plt+0x88c>
   1138c:	ldr	r3, [r3]
   11390:	mov	r0, r3
   11394:	bl	15df8 <__assert_fail@plt+0x4f04>
   11398:	mov	r3, r0
   1139c:	str	r3, [fp, #-48]	; 0xffffffd0
   113a0:	mov	r3, #1
   113a4:	strb	r3, [fp, #-21]	; 0xffffffeb
   113a8:	mov	r2, #0
   113ac:	mov	r3, #0
   113b0:	strd	r2, [fp, #-36]	; 0xffffffdc
   113b4:	mov	r2, #0
   113b8:	mov	r3, #0
   113bc:	strd	r2, [fp, #-60]	; 0xffffffc4
   113c0:	mov	r3, #0
   113c4:	str	r3, [fp, #-68]	; 0xffffffbc
   113c8:	mov	r3, #0
   113cc:	strb	r3, [fp, #-37]	; 0xffffffdb
   113d0:	mov	r3, #1
   113d4:	strb	r3, [fp, #-38]	; 0xffffffda
   113d8:	mov	r3, #0
   113dc:	str	r3, [fp, #-44]	; 0xffffffd4
   113e0:	b	113e8 <__assert_fail@plt+0x4f4>
   113e4:	nop			; (mov r0, r0)
   113e8:	ldr	r0, [fp, #-16]
   113ec:	bl	10d38 <getc_unlocked@plt>
   113f0:	str	r0, [fp, #-20]	; 0xffffffec
   113f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   113f8:	cmp	r3, #0
   113fc:	bge	11418 <__assert_fail@plt+0x524>
   11400:	ldr	r0, [fp, #-16]
   11404:	bl	12698 <__assert_fail@plt+0x17a4>
   11408:	str	r0, [fp, #-16]
   1140c:	ldr	r3, [fp, #-16]
   11410:	cmp	r3, #0
   11414:	bne	113e4 <__assert_fail@plt+0x4f0>
   11418:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1141c:	cmp	r3, #0
   11420:	beq	11710 <__assert_fail@plt+0x81c>
   11424:	bl	10df8 <__ctype_b_loc@plt>
   11428:	mov	r3, r0
   1142c:	ldr	r2, [r3]
   11430:	ldr	r3, [fp, #-20]	; 0xffffffec
   11434:	lsl	r3, r3, #1
   11438:	add	r3, r2, r3
   1143c:	ldrh	r3, [r3]
   11440:	and	r3, r3, #1
   11444:	cmp	r3, #0
   11448:	movne	r3, #1
   1144c:	moveq	r3, #0
   11450:	strb	r3, [fp, #-61]	; 0xffffffc3
   11454:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   11458:	cmp	r3, #0
   1145c:	beq	11594 <__assert_fail@plt+0x6a0>
   11460:	sub	r3, fp, #69	; 0x45
   11464:	sub	r2, fp, #68	; 0x44
   11468:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   1146c:	bl	1246c <__assert_fail@plt+0x1578>
   11470:	strd	r0, [fp, #-60]	; 0xffffffc4
   11474:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   11478:	cmp	r3, #0
   1147c:	beq	11488 <__assert_fail@plt+0x594>
   11480:	mov	r3, #0
   11484:	strb	r3, [fp, #-21]	; 0xffffffeb
   11488:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1148c:	cmp	r3, #0
   11490:	beq	11638 <__assert_fail@plt+0x744>
   11494:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   11498:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1149c:	cmp	r1, r3
   114a0:	cmpeq	r0, r2
   114a4:	bcs	114c4 <__assert_fail@plt+0x5d0>
   114a8:	ldr	r0, [pc, #724]	; 11784 <__assert_fail@plt+0x890>
   114ac:	bl	10e10 <gettext@plt>
   114b0:	mov	r3, r0
   114b4:	mov	r2, r3
   114b8:	mov	r1, #0
   114bc:	mov	r0, #1
   114c0:	bl	10db0 <error@plt>
   114c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   114c8:	cmp	r3, #9
   114cc:	bne	114f4 <__assert_fail@plt+0x600>
   114d0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   114d4:	strd	r2, [fp, #-36]	; 0xffffffdc
   114d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   114dc:	cmp	r3, #0
   114e0:	beq	11588 <__assert_fail@plt+0x694>
   114e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   114e8:	mov	r2, #9
   114ec:	strb	r2, [r3]
   114f0:	b	11588 <__assert_fail@plt+0x694>
   114f4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   114f8:	adds	r2, r2, #1
   114fc:	adc	r3, r3, #0
   11500:	strd	r2, [fp, #-36]	; 0xffffffdc
   11504:	ldrb	r3, [fp, #-38]	; 0xffffffda
   11508:	eor	r3, r3, #1
   1150c:	uxtb	r3, r3
   11510:	cmp	r3, #0
   11514:	bne	1152c <__assert_fail@plt+0x638>
   11518:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   1151c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11520:	cmp	r1, r3
   11524:	cmpeq	r0, r2
   11528:	beq	11574 <__assert_fail@plt+0x680>
   1152c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11530:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11534:	cmp	r1, r3
   11538:	cmpeq	r0, r2
   1153c:	bne	11548 <__assert_fail@plt+0x654>
   11540:	mov	r3, #1
   11544:	strb	r3, [fp, #-37]	; 0xffffffdb
   11548:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1154c:	add	r2, r3, #1
   11550:	str	r2, [fp, #-44]	; 0xffffffd4
   11554:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11558:	add	r3, r2, r3
   1155c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11560:	uxtb	r2, r2
   11564:	strb	r2, [r3]
   11568:	mov	r3, #1
   1156c:	strb	r3, [fp, #-38]	; 0xffffffda
   11570:	b	11764 <__assert_fail@plt+0x870>
   11574:	mov	r3, #9
   11578:	str	r3, [fp, #-20]	; 0xffffffec
   1157c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11580:	mov	r2, #9
   11584:	strb	r2, [r3]
   11588:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1158c:	str	r3, [fp, #-44]	; 0xffffffd4
   11590:	b	11638 <__assert_fail@plt+0x744>
   11594:	ldr	r3, [fp, #-20]	; 0xffffffec
   11598:	cmp	r3, #8
   1159c:	bne	11600 <__assert_fail@plt+0x70c>
   115a0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   115a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115a8:	orr	r3, r2, r3
   115ac:	cmp	r3, #0
   115b0:	movne	r3, #1
   115b4:	moveq	r3, #0
   115b8:	uxtb	r3, r3
   115bc:	uxtb	r2, r3
   115c0:	mov	r3, #0
   115c4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   115c8:	subs	r2, r0, r2
   115cc:	sbc	r3, r1, r3
   115d0:	strd	r2, [fp, #-36]	; 0xffffffdc
   115d4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   115d8:	strd	r2, [fp, #-60]	; 0xffffffc4
   115dc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   115e0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   115e4:	cmp	r2, #0
   115e8:	movne	r2, #1
   115ec:	moveq	r2, #0
   115f0:	uxtb	r2, r2
   115f4:	sub	r3, r3, r2
   115f8:	str	r3, [fp, #-68]	; 0xffffffbc
   115fc:	b	11638 <__assert_fail@plt+0x744>
   11600:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11604:	adds	r2, r2, #1
   11608:	adc	r3, r3, #0
   1160c:	strd	r2, [fp, #-36]	; 0xffffffdc
   11610:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11614:	orrs	r3, r2, r3
   11618:	bne	11638 <__assert_fail@plt+0x744>
   1161c:	ldr	r0, [pc, #352]	; 11784 <__assert_fail@plt+0x890>
   11620:	bl	10e10 <gettext@plt>
   11624:	mov	r3, r0
   11628:	mov	r2, r3
   1162c:	mov	r1, #0
   11630:	mov	r0, #1
   11634:	bl	10db0 <error@plt>
   11638:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1163c:	cmp	r3, #0
   11640:	beq	116c8 <__assert_fail@plt+0x7d4>
   11644:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11648:	cmp	r3, #1
   1164c:	bls	11668 <__assert_fail@plt+0x774>
   11650:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11654:	cmp	r3, #0
   11658:	beq	11668 <__assert_fail@plt+0x774>
   1165c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11660:	mov	r2, #9
   11664:	strb	r2, [r3]
   11668:	ldr	r3, [pc, #280]	; 11788 <__assert_fail@plt+0x894>
   1166c:	ldr	r3, [r3]
   11670:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11674:	mov	r1, #1
   11678:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1167c:	bl	10d14 <fwrite_unlocked@plt>
   11680:	mov	r2, r0
   11684:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11688:	cmp	r2, r3
   1168c:	beq	116b8 <__assert_fail@plt+0x7c4>
   11690:	bl	10e34 <__errno_location@plt>
   11694:	mov	r3, r0
   11698:	ldr	r4, [r3]
   1169c:	ldr	r0, [pc, #232]	; 1178c <__assert_fail@plt+0x898>
   116a0:	bl	10e10 <gettext@plt>
   116a4:	mov	r3, r0
   116a8:	mov	r2, r3
   116ac:	mov	r1, r4
   116b0:	mov	r0, #1
   116b4:	bl	10db0 <error@plt>
   116b8:	mov	r3, #0
   116bc:	str	r3, [fp, #-44]	; 0xffffffd4
   116c0:	mov	r3, #0
   116c4:	strb	r3, [fp, #-37]	; 0xffffffdb
   116c8:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   116cc:	strb	r3, [fp, #-38]	; 0xffffffda
   116d0:	ldrb	r2, [fp, #-21]	; 0xffffffeb
   116d4:	ldr	r3, [pc, #180]	; 11790 <__assert_fail@plt+0x89c>
   116d8:	ldrb	r3, [r3]
   116dc:	cmp	r3, #0
   116e0:	bne	116f0 <__assert_fail@plt+0x7fc>
   116e4:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   116e8:	cmp	r3, #0
   116ec:	beq	116f8 <__assert_fail@plt+0x804>
   116f0:	mov	r3, #1
   116f4:	b	116fc <__assert_fail@plt+0x808>
   116f8:	mov	r3, #0
   116fc:	and	r3, r3, r2
   11700:	cmp	r3, #0
   11704:	movne	r3, #1
   11708:	moveq	r3, #0
   1170c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11710:	ldr	r3, [fp, #-20]	; 0xffffffec
   11714:	cmp	r3, #0
   11718:	bge	11728 <__assert_fail@plt+0x834>
   1171c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11720:	bl	12d40 <__assert_fail@plt+0x1e4c>
   11724:	b	11778 <__assert_fail@plt+0x884>
   11728:	ldr	r0, [fp, #-20]	; 0xffffffec
   1172c:	bl	10edc <putchar_unlocked@plt>
   11730:	mov	r3, r0
   11734:	cmp	r3, #0
   11738:	bge	11764 <__assert_fail@plt+0x870>
   1173c:	bl	10e34 <__errno_location@plt>
   11740:	mov	r3, r0
   11744:	ldr	r4, [r3]
   11748:	ldr	r0, [pc, #60]	; 1178c <__assert_fail@plt+0x898>
   1174c:	bl	10e10 <gettext@plt>
   11750:	mov	r3, r0
   11754:	mov	r2, r3
   11758:	mov	r1, r4
   1175c:	mov	r0, #1
   11760:	bl	10db0 <error@plt>
   11764:	ldr	r3, [fp, #-20]	; 0xffffffec
   11768:	cmp	r3, #10
   1176c:	bne	113e8 <__assert_fail@plt+0x4f4>
   11770:	b	113a0 <__assert_fail@plt+0x4ac>
   11774:	nop			; (mov r0, r0)
   11778:	sub	sp, fp, #8
   1177c:	pop	{r4, fp, pc}
   11780:	andeq	r9, r2, r4, ror #2
   11784:	andeq	r8, r1, ip, asr #3
   11788:	andeq	r9, r2, r4, asr r1
   1178c:	andeq	r8, r1, r4, ror #3
   11790:	andeq	r9, r2, r0, ror #2
   11794:	push	{fp, lr}
   11798:	add	fp, sp, #4
   1179c:	sub	sp, sp, #32
   117a0:	str	r0, [fp, #-24]	; 0xffffffe8
   117a4:	str	r1, [fp, #-28]	; 0xffffffe4
   117a8:	mov	r3, #0
   117ac:	strb	r3, [fp, #-5]
   117b0:	mov	r2, #0
   117b4:	mov	r3, #0
   117b8:	strd	r2, [fp, #-20]	; 0xffffffec
   117bc:	mov	r3, #0
   117c0:	strb	r3, [fp, #-6]
   117c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117c8:	ldr	r3, [r3]
   117cc:	mov	r0, r3
   117d0:	bl	12eb0 <__assert_fail@plt+0x1fbc>
   117d4:	ldr	r1, [pc, #740]	; 11ac0 <__assert_fail@plt+0xbcc>
   117d8:	mov	r0, #6
   117dc:	bl	10e7c <setlocale@plt>
   117e0:	ldr	r1, [pc, #732]	; 11ac4 <__assert_fail@plt+0xbd0>
   117e4:	ldr	r0, [pc, #732]	; 11ac8 <__assert_fail@plt+0xbd4>
   117e8:	bl	10eb8 <bindtextdomain@plt>
   117ec:	ldr	r0, [pc, #724]	; 11ac8 <__assert_fail@plt+0xbd4>
   117f0:	bl	10d50 <textdomain@plt>
   117f4:	ldr	r0, [pc, #720]	; 11acc <__assert_fail@plt+0xbd8>
   117f8:	bl	17d0c <__assert_fail@plt+0x6e18>
   117fc:	b	11a00 <__assert_fail@plt+0xb0c>
   11800:	ldr	r3, [fp, #-12]
   11804:	cmp	r3, #63	; 0x3f
   11808:	beq	1184c <__assert_fail@plt+0x958>
   1180c:	cmp	r3, #63	; 0x3f
   11810:	bgt	11830 <__assert_fail@plt+0x93c>
   11814:	cmn	r3, #2
   11818:	beq	118b8 <__assert_fail@plt+0x9c4>
   1181c:	cmp	r3, #44	; 0x2c
   11820:	beq	11890 <__assert_fail@plt+0x99c>
   11824:	cmn	r3, #3
   11828:	beq	118c0 <__assert_fail@plt+0x9cc>
   1182c:	b	118f8 <__assert_fail@plt+0xa04>
   11830:	cmp	r3, #116	; 0x74
   11834:	beq	11864 <__assert_fail@plt+0x970>
   11838:	cmp	r3, #256	; 0x100
   1183c:	beq	11884 <__assert_fail@plt+0x990>
   11840:	cmp	r3, #97	; 0x61
   11844:	beq	11854 <__assert_fail@plt+0x960>
   11848:	b	118f8 <__assert_fail@plt+0xa04>
   1184c:	mov	r0, #1
   11850:	bl	11238 <__assert_fail@plt+0x344>
   11854:	ldr	r3, [pc, #628]	; 11ad0 <__assert_fail@plt+0xbdc>
   11858:	mov	r2, #1
   1185c:	strb	r2, [r3]
   11860:	b	11a00 <__assert_fail@plt+0xb0c>
   11864:	ldr	r3, [pc, #612]	; 11ad0 <__assert_fail@plt+0xbdc>
   11868:	mov	r2, #1
   1186c:	strb	r2, [r3]
   11870:	ldr	r3, [pc, #604]	; 11ad4 <__assert_fail@plt+0xbe0>
   11874:	ldr	r3, [r3]
   11878:	mov	r0, r3
   1187c:	bl	11d74 <__assert_fail@plt+0xe80>
   11880:	b	11a00 <__assert_fail@plt+0xb0c>
   11884:	mov	r3, #1
   11888:	strb	r3, [fp, #-6]
   1188c:	b	11a00 <__assert_fail@plt+0xb0c>
   11890:	ldrb	r3, [fp, #-5]
   11894:	cmp	r3, #0
   11898:	beq	118ac <__assert_fail@plt+0x9b8>
   1189c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   118a0:	mov	r0, r2
   118a4:	mov	r1, r3
   118a8:	bl	11b28 <__assert_fail@plt+0xc34>
   118ac:	mov	r3, #0
   118b0:	strb	r3, [fp, #-5]
   118b4:	b	11a00 <__assert_fail@plt+0xb0c>
   118b8:	mov	r0, #0
   118bc:	bl	11238 <__assert_fail@plt+0x344>
   118c0:	ldr	r3, [pc, #528]	; 11ad8 <__assert_fail@plt+0xbe4>
   118c4:	ldr	r0, [r3]
   118c8:	ldr	r3, [pc, #524]	; 11adc <__assert_fail@plt+0xbe8>
   118cc:	ldr	r2, [r3]
   118d0:	mov	r3, #0
   118d4:	str	r3, [sp, #4]
   118d8:	ldr	r3, [pc, #512]	; 11ae0 <__assert_fail@plt+0xbec>
   118dc:	str	r3, [sp]
   118e0:	mov	r3, r2
   118e4:	ldr	r2, [pc, #504]	; 11ae4 <__assert_fail@plt+0xbf0>
   118e8:	ldr	r1, [pc, #504]	; 11ae8 <__assert_fail@plt+0xbf4>
   118ec:	bl	15cac <__assert_fail@plt+0x4db8>
   118f0:	mov	r0, #0
   118f4:	bl	10e04 <exit@plt>
   118f8:	ldrb	r3, [fp, #-5]
   118fc:	eor	r3, r3, #1
   11900:	uxtb	r3, r3
   11904:	cmp	r3, #0
   11908:	beq	11920 <__assert_fail@plt+0xa2c>
   1190c:	mov	r2, #0
   11910:	mov	r3, #0
   11914:	strd	r2, [fp, #-20]	; 0xffffffec
   11918:	mov	r3, #1
   1191c:	strb	r3, [fp, #-5]
   11920:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11924:	add	r1, pc, #396	; 0x18c
   11928:	ldrd	r0, [r1]
   1192c:	cmp	r3, r1
   11930:	cmpeq	r2, r0
   11934:	bhi	119d4 <__assert_fail@plt+0xae0>
   11938:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1193c:	mov	r1, #10
   11940:	mul	r0, r1, r3
   11944:	mov	r1, #0
   11948:	mul	r1, r1, r2
   1194c:	add	r1, r0, r1
   11950:	mov	r0, #10
   11954:	umull	r2, r3, r2, r0
   11958:	add	r1, r1, r3
   1195c:	mov	r3, r1
   11960:	ldr	r1, [fp, #-12]
   11964:	sub	r1, r1, #48	; 0x30
   11968:	mov	r0, r1
   1196c:	asr	r1, r0, #31
   11970:	adds	r0, r0, r2
   11974:	adc	r1, r1, r3
   11978:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1197c:	cmp	r1, r3
   11980:	cmpeq	r0, r2
   11984:	bcc	119d4 <__assert_fail@plt+0xae0>
   11988:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1198c:	mov	r1, #10
   11990:	mul	r0, r1, r3
   11994:	mov	r1, #0
   11998:	mul	r1, r1, r2
   1199c:	add	r1, r0, r1
   119a0:	mov	r0, #10
   119a4:	umull	r2, r3, r2, r0
   119a8:	add	r1, r1, r3
   119ac:	mov	r3, r1
   119b0:	ldr	r1, [fp, #-12]
   119b4:	sub	r1, r1, #48	; 0x30
   119b8:	mov	r0, r1
   119bc:	asr	r1, r0, #31
   119c0:	adds	r2, r2, r0
   119c4:	adc	r3, r3, r1
   119c8:	strd	r2, [fp, #-20]	; 0xffffffec
   119cc:	mov	r3, #0
   119d0:	b	119d8 <__assert_fail@plt+0xae4>
   119d4:	mov	r3, #1
   119d8:	cmp	r3, #0
   119dc:	beq	119fc <__assert_fail@plt+0xb08>
   119e0:	ldr	r0, [pc, #260]	; 11aec <__assert_fail@plt+0xbf8>
   119e4:	bl	10e10 <gettext@plt>
   119e8:	mov	r3, r0
   119ec:	mov	r2, r3
   119f0:	mov	r1, #0
   119f4:	mov	r0, #1
   119f8:	bl	10db0 <error@plt>
   119fc:	nop			; (mov r0, r0)
   11a00:	mov	r3, #0
   11a04:	str	r3, [sp]
   11a08:	ldr	r3, [pc, #224]	; 11af0 <__assert_fail@plt+0xbfc>
   11a0c:	ldr	r2, [pc, #224]	; 11af4 <__assert_fail@plt+0xc00>
   11a10:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11a14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a18:	bl	10dec <getopt_long@plt>
   11a1c:	str	r0, [fp, #-12]
   11a20:	ldr	r3, [fp, #-12]
   11a24:	cmn	r3, #1
   11a28:	bne	11800 <__assert_fail@plt+0x90c>
   11a2c:	ldrb	r3, [fp, #-6]
   11a30:	cmp	r3, #0
   11a34:	beq	11a44 <__assert_fail@plt+0xb50>
   11a38:	ldr	r3, [pc, #144]	; 11ad0 <__assert_fail@plt+0xbdc>
   11a3c:	mov	r2, #0
   11a40:	strb	r2, [r3]
   11a44:	ldrb	r3, [fp, #-5]
   11a48:	cmp	r3, #0
   11a4c:	beq	11a60 <__assert_fail@plt+0xb6c>
   11a50:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11a54:	mov	r0, r2
   11a58:	mov	r1, r3
   11a5c:	bl	11b28 <__assert_fail@plt+0xc34>
   11a60:	bl	12358 <__assert_fail@plt+0x1464>
   11a64:	ldr	r3, [pc, #140]	; 11af8 <__assert_fail@plt+0xc04>
   11a68:	ldr	r2, [r3]
   11a6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a70:	cmp	r2, r3
   11a74:	bge	11a90 <__assert_fail@plt+0xb9c>
   11a78:	ldr	r3, [pc, #120]	; 11af8 <__assert_fail@plt+0xc04>
   11a7c:	ldr	r3, [r3]
   11a80:	lsl	r3, r3, #2
   11a84:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11a88:	add	r3, r2, r3
   11a8c:	b	11a94 <__assert_fail@plt+0xba0>
   11a90:	mov	r3, #0
   11a94:	mov	r0, r3
   11a98:	bl	12638 <__assert_fail@plt+0x1744>
   11a9c:	bl	11364 <__assert_fail@plt+0x470>
   11aa0:	bl	128ac <__assert_fail@plt+0x19b8>
   11aa4:	ldr	r3, [pc, #80]	; 11afc <__assert_fail@plt+0xc08>
   11aa8:	ldr	r3, [r3]
   11aac:	mov	r0, r3
   11ab0:	sub	sp, fp, #4
   11ab4:	pop	{fp, pc}
   11ab8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11abc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11ac0:	andeq	r7, r1, ip, lsr #29
   11ac4:	strdeq	r8, [r1], -r0
   11ac8:	andeq	r7, r1, r4, asr #29
   11acc:	ldrdeq	r2, [r1], -r0
   11ad0:	andeq	r9, r2, r0, ror #2
   11ad4:	andeq	r9, r2, r8, asr r1
   11ad8:	andeq	r9, r2, r4, asr r1
   11adc:	strdeq	r9, [r2], -r0
   11ae0:	andeq	r8, r1, r8, lsl #4
   11ae4:	strdeq	r7, [r1], -r4
   11ae8:	andeq	r8, r1, r0, asr #3
   11aec:	andeq	r8, r1, r8, lsl r2
   11af0:	andeq	r7, r1, r8, lsl #31
   11af4:	andeq	r8, r1, r4, lsr r2
   11af8:	andeq	r9, r2, r0, asr #2
   11afc:	andeq	r9, r2, r8, ror #2
   11b00:	push	{fp}		; (str fp, [sp, #-4]!)
   11b04:	add	fp, sp, #0
   11b08:	sub	sp, sp, #12
   11b0c:	mov	r3, r0
   11b10:	strb	r3, [fp, #-5]
   11b14:	ldrb	r3, [fp, #-5]
   11b18:	mov	r0, r3
   11b1c:	add	sp, fp, #0
   11b20:	pop	{fp}		; (ldr fp, [sp], #4)
   11b24:	bx	lr
   11b28:	push	{fp, lr}
   11b2c:	add	fp, sp, #4
   11b30:	sub	sp, sp, #24
   11b34:	strd	r0, [fp, #-28]	; 0xffffffe4
   11b38:	ldr	r3, [pc, #320]	; 11c80 <__assert_fail@plt+0xd8c>
   11b3c:	ldr	r3, [r3]
   11b40:	cmp	r3, #0
   11b44:	beq	11b6c <__assert_fail@plt+0xc78>
   11b48:	ldr	r3, [pc, #308]	; 11c84 <__assert_fail@plt+0xd90>
   11b4c:	ldr	r2, [r3]
   11b50:	ldr	r3, [pc, #296]	; 11c80 <__assert_fail@plt+0xd8c>
   11b54:	ldr	r3, [r3]
   11b58:	sub	r3, r3, #-536870911	; 0xe0000001
   11b5c:	lsl	r3, r3, #3
   11b60:	add	r3, r2, r3
   11b64:	ldrd	r2, [r3]
   11b68:	b	11b74 <__assert_fail@plt+0xc80>
   11b6c:	mov	r2, #0
   11b70:	mov	r3, #0
   11b74:	strd	r2, [fp, #-12]
   11b78:	ldrd	r0, [fp, #-12]
   11b7c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11b80:	cmp	r1, r3
   11b84:	cmpeq	r0, r2
   11b88:	bhi	11ba0 <__assert_fail@plt+0xcac>
   11b8c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   11b90:	ldrd	r2, [fp, #-12]
   11b94:	subs	r2, r0, r2
   11b98:	sbc	r3, r1, r3
   11b9c:	b	11ba8 <__assert_fail@plt+0xcb4>
   11ba0:	mov	r2, #0
   11ba4:	mov	r3, #0
   11ba8:	strd	r2, [fp, #-20]	; 0xffffffec
   11bac:	ldr	r3, [pc, #204]	; 11c80 <__assert_fail@plt+0xd8c>
   11bb0:	ldr	r2, [r3]
   11bb4:	ldr	r3, [pc, #204]	; 11c88 <__assert_fail@plt+0xd94>
   11bb8:	ldr	r3, [r3]
   11bbc:	cmp	r2, r3
   11bc0:	bne	11be8 <__assert_fail@plt+0xcf4>
   11bc4:	ldr	r3, [pc, #184]	; 11c84 <__assert_fail@plt+0xd90>
   11bc8:	ldr	r3, [r3]
   11bcc:	mov	r2, #8
   11bd0:	ldr	r1, [pc, #176]	; 11c88 <__assert_fail@plt+0xd94>
   11bd4:	mov	r0, r3
   11bd8:	bl	16070 <__assert_fail@plt+0x517c>
   11bdc:	mov	r2, r0
   11be0:	ldr	r3, [pc, #156]	; 11c84 <__assert_fail@plt+0xd90>
   11be4:	str	r2, [r3]
   11be8:	ldr	r3, [pc, #148]	; 11c84 <__assert_fail@plt+0xd90>
   11bec:	ldr	r2, [r3]
   11bf0:	ldr	r3, [pc, #136]	; 11c80 <__assert_fail@plt+0xd8c>
   11bf4:	ldr	r3, [r3]
   11bf8:	add	r1, r3, #1
   11bfc:	ldr	r0, [pc, #124]	; 11c80 <__assert_fail@plt+0xd8c>
   11c00:	str	r1, [r0]
   11c04:	lsl	r3, r3, #3
   11c08:	add	r1, r2, r3
   11c0c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11c10:	strd	r2, [r1]
   11c14:	ldr	r3, [pc, #112]	; 11c8c <__assert_fail@plt+0xd98>
   11c18:	ldr	r3, [r3]
   11c1c:	mov	r0, r3
   11c20:	mov	r1, #0
   11c24:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11c28:	cmp	r1, r3
   11c2c:	cmpeq	r0, r2
   11c30:	bcs	11c74 <__assert_fail@plt+0xd80>
   11c34:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11c38:	mvn	r0, #0
   11c3c:	mov	r1, #0
   11c40:	cmp	r3, r1
   11c44:	cmpeq	r2, r0
   11c48:	bls	11c68 <__assert_fail@plt+0xd74>
   11c4c:	ldr	r0, [pc, #60]	; 11c90 <__assert_fail@plt+0xd9c>
   11c50:	bl	10e10 <gettext@plt>
   11c54:	mov	r3, r0
   11c58:	mov	r2, r3
   11c5c:	mov	r1, #0
   11c60:	mov	r0, #1
   11c64:	bl	10db0 <error@plt>
   11c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   11c6c:	ldr	r2, [pc, #24]	; 11c8c <__assert_fail@plt+0xd98>
   11c70:	str	r3, [r2]
   11c74:	nop			; (mov r0, r0)
   11c78:	sub	sp, fp, #4
   11c7c:	pop	{fp, pc}
   11c80:	muleq	r2, r0, r1
   11c84:	andeq	r9, r2, r8, lsl #3
   11c88:	andeq	r9, r2, ip, lsl #3
   11c8c:	andeq	r9, r2, r4, ror #2
   11c90:	andeq	r8, r1, r8, asr #4
   11c94:	push	{fp, lr}
   11c98:	add	fp, sp, #4
   11c9c:	sub	sp, sp, #16
   11ca0:	strd	r0, [fp, #-20]	; 0xffffffec
   11ca4:	mov	r3, #1
   11ca8:	strb	r3, [fp, #-5]
   11cac:	ldr	r3, [pc, #72]	; 11cfc <__assert_fail@plt+0xe08>
   11cb0:	ldrd	r2, [r3]
   11cb4:	orrs	r3, r2, r3
   11cb8:	beq	11ce0 <__assert_fail@plt+0xdec>
   11cbc:	ldr	r0, [pc, #60]	; 11d00 <__assert_fail@plt+0xe0c>
   11cc0:	bl	10e10 <gettext@plt>
   11cc4:	mov	r3, r0
   11cc8:	mov	r2, r3
   11ccc:	mov	r1, #0
   11cd0:	mov	r0, #0
   11cd4:	bl	10db0 <error@plt>
   11cd8:	mov	r3, #0
   11cdc:	strb	r3, [fp, #-5]
   11ce0:	ldr	r1, [pc, #20]	; 11cfc <__assert_fail@plt+0xe08>
   11ce4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11ce8:	strd	r2, [r1]
   11cec:	ldrb	r3, [fp, #-5]
   11cf0:	mov	r0, r3
   11cf4:	sub	sp, fp, #4
   11cf8:	pop	{fp, pc}
   11cfc:	andeq	r9, r2, r8, ror r1
   11d00:	andeq	r8, r1, r0, ror #4
   11d04:	push	{fp, lr}
   11d08:	add	fp, sp, #4
   11d0c:	sub	sp, sp, #16
   11d10:	strd	r0, [fp, #-20]	; 0xffffffec
   11d14:	mov	r3, #1
   11d18:	strb	r3, [fp, #-5]
   11d1c:	ldr	r3, [pc, #72]	; 11d6c <__assert_fail@plt+0xe78>
   11d20:	ldrd	r2, [r3]
   11d24:	orrs	r3, r2, r3
   11d28:	beq	11d50 <__assert_fail@plt+0xe5c>
   11d2c:	ldr	r0, [pc, #60]	; 11d70 <__assert_fail@plt+0xe7c>
   11d30:	bl	10e10 <gettext@plt>
   11d34:	mov	r3, r0
   11d38:	mov	r2, r3
   11d3c:	mov	r1, #0
   11d40:	mov	r0, #0
   11d44:	bl	10db0 <error@plt>
   11d48:	mov	r3, #0
   11d4c:	strb	r3, [fp, #-5]
   11d50:	ldr	r1, [pc, #20]	; 11d6c <__assert_fail@plt+0xe78>
   11d54:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11d58:	strd	r2, [r1]
   11d5c:	ldrb	r3, [fp, #-5]
   11d60:	mov	r0, r3
   11d64:	sub	sp, fp, #4
   11d68:	pop	{fp, pc}
   11d6c:	andeq	r9, r2, r0, lsl #3
   11d70:	muleq	r1, r0, r2
   11d74:	push	{r4, fp, lr}
   11d78:	add	fp, sp, #8
   11d7c:	sub	sp, sp, #44	; 0x2c
   11d80:	str	r0, [fp, #-48]	; 0xffffffd0
   11d84:	mov	r3, #0
   11d88:	strb	r3, [fp, #-13]
   11d8c:	mov	r2, #0
   11d90:	mov	r3, #0
   11d94:	strd	r2, [fp, #-44]	; 0xffffffd4
   11d98:	mov	r3, #0
   11d9c:	strb	r3, [fp, #-14]
   11da0:	mov	r3, #0
   11da4:	strb	r3, [fp, #-15]
   11da8:	mov	r3, #0
   11dac:	str	r3, [fp, #-20]	; 0xffffffec
   11db0:	mov	r3, #1
   11db4:	strb	r3, [fp, #-21]	; 0xffffffeb
   11db8:	b	12128 <__assert_fail@plt+0x1234>
   11dbc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11dc0:	ldrb	r3, [r3]
   11dc4:	cmp	r3, #44	; 0x2c
   11dc8:	beq	11e04 <__assert_fail@plt+0xf10>
   11dcc:	bl	10df8 <__ctype_b_loc@plt>
   11dd0:	mov	r3, r0
   11dd4:	ldr	r4, [r3]
   11dd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ddc:	ldrb	r3, [r3]
   11de0:	mov	r0, r3
   11de4:	bl	11b00 <__assert_fail@plt+0xc0c>
   11de8:	mov	r3, r0
   11dec:	lsl	r3, r3, #1
   11df0:	add	r3, r4, r3
   11df4:	ldrh	r3, [r3]
   11df8:	and	r3, r3, #1
   11dfc:	cmp	r3, #0
   11e00:	beq	11ea4 <__assert_fail@plt+0xfb0>
   11e04:	ldrb	r3, [fp, #-13]
   11e08:	cmp	r3, #0
   11e0c:	beq	11e98 <__assert_fail@plt+0xfa4>
   11e10:	ldrb	r3, [fp, #-14]
   11e14:	cmp	r3, #0
   11e18:	beq	11e4c <__assert_fail@plt+0xf58>
   11e1c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11e20:	mov	r0, r2
   11e24:	mov	r1, r3
   11e28:	bl	11c94 <__assert_fail@plt+0xda0>
   11e2c:	mov	r3, r0
   11e30:	eor	r3, r3, #1
   11e34:	uxtb	r3, r3
   11e38:	cmp	r3, #0
   11e3c:	beq	11e98 <__assert_fail@plt+0xfa4>
   11e40:	mov	r3, #0
   11e44:	strb	r3, [fp, #-21]	; 0xffffffeb
   11e48:	b	12138 <__assert_fail@plt+0x1244>
   11e4c:	ldrb	r3, [fp, #-15]
   11e50:	cmp	r3, #0
   11e54:	beq	11e88 <__assert_fail@plt+0xf94>
   11e58:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11e5c:	mov	r0, r2
   11e60:	mov	r1, r3
   11e64:	bl	11d04 <__assert_fail@plt+0xe10>
   11e68:	mov	r3, r0
   11e6c:	eor	r3, r3, #1
   11e70:	uxtb	r3, r3
   11e74:	cmp	r3, #0
   11e78:	beq	11e98 <__assert_fail@plt+0xfa4>
   11e7c:	mov	r3, #0
   11e80:	strb	r3, [fp, #-21]	; 0xffffffeb
   11e84:	b	12138 <__assert_fail@plt+0x1244>
   11e88:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11e8c:	mov	r0, r2
   11e90:	mov	r1, r3
   11e94:	bl	11b28 <__assert_fail@plt+0xc34>
   11e98:	mov	r3, #0
   11e9c:	strb	r3, [fp, #-13]
   11ea0:	b	1211c <__assert_fail@plt+0x1228>
   11ea4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ea8:	ldrb	r3, [r3]
   11eac:	cmp	r3, #47	; 0x2f
   11eb0:	bne	11f04 <__assert_fail@plt+0x1010>
   11eb4:	ldrb	r3, [fp, #-13]
   11eb8:	cmp	r3, #0
   11ebc:	beq	11ef0 <__assert_fail@plt+0xffc>
   11ec0:	ldr	r0, [pc, #840]	; 12210 <__assert_fail@plt+0x131c>
   11ec4:	bl	10e10 <gettext@plt>
   11ec8:	mov	r4, r0
   11ecc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11ed0:	bl	155e0 <__assert_fail@plt+0x46ec>
   11ed4:	mov	r3, r0
   11ed8:	mov	r2, r4
   11edc:	mov	r1, #0
   11ee0:	mov	r0, #0
   11ee4:	bl	10db0 <error@plt>
   11ee8:	mov	r3, #0
   11eec:	strb	r3, [fp, #-21]	; 0xffffffeb
   11ef0:	mov	r3, #1
   11ef4:	strb	r3, [fp, #-14]
   11ef8:	mov	r3, #0
   11efc:	strb	r3, [fp, #-15]
   11f00:	b	1211c <__assert_fail@plt+0x1228>
   11f04:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11f08:	ldrb	r3, [r3]
   11f0c:	cmp	r3, #43	; 0x2b
   11f10:	bne	11f64 <__assert_fail@plt+0x1070>
   11f14:	ldrb	r3, [fp, #-13]
   11f18:	cmp	r3, #0
   11f1c:	beq	11f50 <__assert_fail@plt+0x105c>
   11f20:	ldr	r0, [pc, #748]	; 12214 <__assert_fail@plt+0x1320>
   11f24:	bl	10e10 <gettext@plt>
   11f28:	mov	r4, r0
   11f2c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11f30:	bl	155e0 <__assert_fail@plt+0x46ec>
   11f34:	mov	r3, r0
   11f38:	mov	r2, r4
   11f3c:	mov	r1, #0
   11f40:	mov	r0, #0
   11f44:	bl	10db0 <error@plt>
   11f48:	mov	r3, #0
   11f4c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11f50:	mov	r3, #1
   11f54:	strb	r3, [fp, #-15]
   11f58:	mov	r3, #0
   11f5c:	strb	r3, [fp, #-14]
   11f60:	b	1211c <__assert_fail@plt+0x1228>
   11f64:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11f68:	ldrb	r3, [r3]
   11f6c:	sub	r3, r3, #48	; 0x30
   11f70:	cmp	r3, #9
   11f74:	bhi	120e8 <__assert_fail@plt+0x11f4>
   11f78:	ldrb	r3, [fp, #-13]
   11f7c:	eor	r3, r3, #1
   11f80:	uxtb	r3, r3
   11f84:	cmp	r3, #0
   11f88:	beq	11fa8 <__assert_fail@plt+0x10b4>
   11f8c:	mov	r2, #0
   11f90:	mov	r3, #0
   11f94:	strd	r2, [fp, #-44]	; 0xffffffd4
   11f98:	mov	r3, #1
   11f9c:	strb	r3, [fp, #-13]
   11fa0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11fa4:	str	r3, [fp, #-20]	; 0xffffffec
   11fa8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11fac:	add	r1, pc, #596	; 0x254
   11fb0:	ldrd	r0, [r1]
   11fb4:	cmp	r3, r1
   11fb8:	cmpeq	r2, r0
   11fbc:	bhi	12064 <__assert_fail@plt+0x1170>
   11fc0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11fc4:	mov	r1, #10
   11fc8:	mul	r0, r1, r3
   11fcc:	mov	r1, #0
   11fd0:	mul	r1, r1, r2
   11fd4:	add	r1, r0, r1
   11fd8:	mov	r0, #10
   11fdc:	umull	r2, r3, r2, r0
   11fe0:	add	r1, r1, r3
   11fe4:	mov	r3, r1
   11fe8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11fec:	ldrb	r1, [r1]
   11ff0:	sub	r1, r1, #48	; 0x30
   11ff4:	mov	r0, r1
   11ff8:	asr	r1, r0, #31
   11ffc:	adds	r0, r0, r2
   12000:	adc	r1, r1, r3
   12004:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12008:	cmp	r1, r3
   1200c:	cmpeq	r0, r2
   12010:	bcc	12064 <__assert_fail@plt+0x1170>
   12014:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12018:	mov	r1, #10
   1201c:	mul	r0, r1, r3
   12020:	mov	r1, #0
   12024:	mul	r1, r1, r2
   12028:	add	r1, r0, r1
   1202c:	mov	r0, #10
   12030:	umull	r2, r3, r2, r0
   12034:	add	r1, r1, r3
   12038:	mov	r3, r1
   1203c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12040:	ldrb	r1, [r1]
   12044:	sub	r1, r1, #48	; 0x30
   12048:	mov	r0, r1
   1204c:	asr	r1, r0, #31
   12050:	adds	r2, r2, r0
   12054:	adc	r3, r3, r1
   12058:	strd	r2, [fp, #-44]	; 0xffffffd4
   1205c:	mov	r3, #0
   12060:	b	12068 <__assert_fail@plt+0x1174>
   12064:	mov	r3, #1
   12068:	cmp	r3, #0
   1206c:	beq	1211c <__assert_fail@plt+0x1228>
   12070:	ldr	r1, [pc, #416]	; 12218 <__assert_fail@plt+0x1324>
   12074:	ldr	r0, [fp, #-20]	; 0xffffffec
   12078:	bl	10ee8 <strspn@plt>
   1207c:	str	r0, [fp, #-28]	; 0xffffffe4
   12080:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12084:	mov	r1, r3
   12088:	ldr	r0, [fp, #-20]	; 0xffffffec
   1208c:	bl	16874 <__assert_fail@plt+0x5980>
   12090:	mov	r3, r0
   12094:	str	r3, [fp, #-32]	; 0xffffffe0
   12098:	ldr	r0, [pc, #380]	; 1221c <__assert_fail@plt+0x1328>
   1209c:	bl	10e10 <gettext@plt>
   120a0:	mov	r4, r0
   120a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   120a8:	bl	155e0 <__assert_fail@plt+0x46ec>
   120ac:	mov	r3, r0
   120b0:	mov	r2, r4
   120b4:	mov	r1, #0
   120b8:	mov	r0, #0
   120bc:	bl	10db0 <error@plt>
   120c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   120c4:	bl	12d40 <__assert_fail@plt+0x1e4c>
   120c8:	mov	r3, #0
   120cc:	strb	r3, [fp, #-21]	; 0xffffffeb
   120d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120d4:	sub	r3, r3, #1
   120d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   120dc:	add	r3, r2, r3
   120e0:	str	r3, [fp, #-48]	; 0xffffffd0
   120e4:	b	1211c <__assert_fail@plt+0x1228>
   120e8:	ldr	r0, [pc, #304]	; 12220 <__assert_fail@plt+0x132c>
   120ec:	bl	10e10 <gettext@plt>
   120f0:	mov	r4, r0
   120f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   120f8:	bl	155e0 <__assert_fail@plt+0x46ec>
   120fc:	mov	r3, r0
   12100:	mov	r2, r4
   12104:	mov	r1, #0
   12108:	mov	r0, #0
   1210c:	bl	10db0 <error@plt>
   12110:	mov	r3, #0
   12114:	strb	r3, [fp, #-21]	; 0xffffffeb
   12118:	b	12138 <__assert_fail@plt+0x1244>
   1211c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12120:	add	r3, r3, #1
   12124:	str	r3, [fp, #-48]	; 0xffffffd0
   12128:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1212c:	ldrb	r3, [r3]
   12130:	cmp	r3, #0
   12134:	bne	11dbc <__assert_fail@plt+0xec8>
   12138:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1213c:	cmp	r3, #0
   12140:	beq	121e0 <__assert_fail@plt+0x12ec>
   12144:	ldrb	r3, [fp, #-13]
   12148:	cmp	r3, #0
   1214c:	beq	121e0 <__assert_fail@plt+0x12ec>
   12150:	ldrb	r3, [fp, #-14]
   12154:	cmp	r3, #0
   12158:	beq	12190 <__assert_fail@plt+0x129c>
   1215c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12160:	mov	r0, r2
   12164:	mov	r1, r3
   12168:	bl	11c94 <__assert_fail@plt+0xda0>
   1216c:	mov	r3, r0
   12170:	mov	r2, r3
   12174:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12178:	and	r3, r3, r2
   1217c:	cmp	r3, #0
   12180:	movne	r3, #1
   12184:	moveq	r3, #0
   12188:	strb	r3, [fp, #-21]	; 0xffffffeb
   1218c:	b	121e0 <__assert_fail@plt+0x12ec>
   12190:	ldrb	r3, [fp, #-15]
   12194:	cmp	r3, #0
   12198:	beq	121d0 <__assert_fail@plt+0x12dc>
   1219c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   121a0:	mov	r0, r2
   121a4:	mov	r1, r3
   121a8:	bl	11d04 <__assert_fail@plt+0xe10>
   121ac:	mov	r3, r0
   121b0:	mov	r2, r3
   121b4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   121b8:	and	r3, r3, r2
   121bc:	cmp	r3, #0
   121c0:	movne	r3, #1
   121c4:	moveq	r3, #0
   121c8:	strb	r3, [fp, #-21]	; 0xffffffeb
   121cc:	b	121e0 <__assert_fail@plt+0x12ec>
   121d0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   121d4:	mov	r0, r2
   121d8:	mov	r1, r3
   121dc:	bl	11b28 <__assert_fail@plt+0xc34>
   121e0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   121e4:	eor	r3, r3, #1
   121e8:	uxtb	r3, r3
   121ec:	cmp	r3, #0
   121f0:	beq	121fc <__assert_fail@plt+0x1308>
   121f4:	mov	r0, #1
   121f8:	bl	10e04 <exit@plt>
   121fc:	nop			; (mov r0, r0)
   12200:	sub	sp, fp, #8
   12204:	pop	{r4, fp, pc}
   12208:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1220c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12210:	andeq	r8, r1, r0, asr #5
   12214:	andeq	r8, r1, ip, ror #5
   12218:	andeq	r8, r1, r8, lsl r3
   1221c:	andeq	r8, r1, r4, lsr #6
   12220:	andeq	r8, r1, r0, asr #6
   12224:	push	{fp, lr}
   12228:	add	fp, sp, #4
   1222c:	sub	sp, sp, #24
   12230:	str	r0, [fp, #-24]	; 0xffffffe8
   12234:	str	r1, [fp, #-28]	; 0xffffffe4
   12238:	mov	r2, #0
   1223c:	mov	r3, #0
   12240:	strd	r2, [fp, #-12]
   12244:	mov	r3, #0
   12248:	str	r3, [fp, #-16]
   1224c:	b	122ec <__assert_fail@plt+0x13f8>
   12250:	ldr	r3, [fp, #-16]
   12254:	lsl	r3, r3, #3
   12258:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1225c:	add	r3, r2, r3
   12260:	ldrd	r2, [r3]
   12264:	orrs	r3, r2, r3
   12268:	bne	12288 <__assert_fail@plt+0x1394>
   1226c:	ldr	r0, [pc, #208]	; 12344 <__assert_fail@plt+0x1450>
   12270:	bl	10e10 <gettext@plt>
   12274:	mov	r3, r0
   12278:	mov	r2, r3
   1227c:	mov	r1, #0
   12280:	mov	r0, #1
   12284:	bl	10db0 <error@plt>
   12288:	ldr	r3, [fp, #-16]
   1228c:	lsl	r3, r3, #3
   12290:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12294:	add	r3, r2, r3
   12298:	ldrd	r0, [r3]
   1229c:	ldrd	r2, [fp, #-12]
   122a0:	cmp	r1, r3
   122a4:	cmpeq	r0, r2
   122a8:	bhi	122c8 <__assert_fail@plt+0x13d4>
   122ac:	ldr	r0, [pc, #148]	; 12348 <__assert_fail@plt+0x1454>
   122b0:	bl	10e10 <gettext@plt>
   122b4:	mov	r3, r0
   122b8:	mov	r2, r3
   122bc:	mov	r1, #0
   122c0:	mov	r0, #1
   122c4:	bl	10db0 <error@plt>
   122c8:	ldr	r3, [fp, #-16]
   122cc:	lsl	r3, r3, #3
   122d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   122d4:	add	r3, r2, r3
   122d8:	ldrd	r2, [r3]
   122dc:	strd	r2, [fp, #-12]
   122e0:	ldr	r3, [fp, #-16]
   122e4:	add	r3, r3, #1
   122e8:	str	r3, [fp, #-16]
   122ec:	ldr	r2, [fp, #-16]
   122f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122f4:	cmp	r2, r3
   122f8:	bcc	12250 <__assert_fail@plt+0x135c>
   122fc:	ldr	r3, [pc, #72]	; 1234c <__assert_fail@plt+0x1458>
   12300:	ldrd	r2, [r3]
   12304:	orrs	r3, r2, r3
   12308:	beq	12338 <__assert_fail@plt+0x1444>
   1230c:	ldr	r3, [pc, #60]	; 12350 <__assert_fail@plt+0x145c>
   12310:	ldrd	r2, [r3]
   12314:	orrs	r3, r2, r3
   12318:	beq	12338 <__assert_fail@plt+0x1444>
   1231c:	ldr	r0, [pc, #48]	; 12354 <__assert_fail@plt+0x1460>
   12320:	bl	10e10 <gettext@plt>
   12324:	mov	r3, r0
   12328:	mov	r2, r3
   1232c:	mov	r1, #0
   12330:	mov	r0, #1
   12334:	bl	10db0 <error@plt>
   12338:	nop			; (mov r0, r0)
   1233c:	sub	sp, fp, #4
   12340:	pop	{fp, pc}
   12344:	andeq	r8, r1, ip, ror #6
   12348:	andeq	r8, r1, r4, lsl #7
   1234c:	andeq	r9, r2, r0, lsl #3
   12350:	andeq	r9, r2, r8, ror r1
   12354:	andeq	r8, r1, r0, lsr #7
   12358:	push	{fp, lr}
   1235c:	add	fp, sp, #4
   12360:	ldr	r3, [pc, #236]	; 12454 <__assert_fail@plt+0x1560>
   12364:	ldr	r2, [r3]
   12368:	ldr	r3, [pc, #232]	; 12458 <__assert_fail@plt+0x1564>
   1236c:	ldr	r3, [r3]
   12370:	mov	r1, r3
   12374:	mov	r0, r2
   12378:	bl	12224 <__assert_fail@plt+0x1330>
   1237c:	ldr	r3, [pc, #212]	; 12458 <__assert_fail@plt+0x1564>
   12380:	ldr	r3, [r3]
   12384:	cmp	r3, #0
   12388:	bne	123f4 <__assert_fail@plt+0x1500>
   1238c:	ldr	r3, [pc, #200]	; 1245c <__assert_fail@plt+0x1568>
   12390:	ldrd	r2, [r3]
   12394:	orrs	r3, r2, r3
   12398:	bne	123c4 <__assert_fail@plt+0x14d0>
   1239c:	ldr	r3, [pc, #188]	; 12460 <__assert_fail@plt+0x156c>
   123a0:	ldrd	r2, [r3]
   123a4:	orrs	r3, r2, r3
   123a8:	beq	123bc <__assert_fail@plt+0x14c8>
   123ac:	ldr	r3, [pc, #172]	; 12460 <__assert_fail@plt+0x156c>
   123b0:	ldrd	r2, [r3]
   123b4:	mov	r3, r2
   123b8:	b	123d0 <__assert_fail@plt+0x14dc>
   123bc:	mov	r3, #8
   123c0:	b	123d0 <__assert_fail@plt+0x14dc>
   123c4:	ldr	r3, [pc, #144]	; 1245c <__assert_fail@plt+0x1568>
   123c8:	ldrd	r2, [r3]
   123cc:	mov	r3, r2
   123d0:	ldr	r2, [pc, #140]	; 12464 <__assert_fail@plt+0x1570>
   123d4:	str	r3, [r2]
   123d8:	ldr	r3, [pc, #132]	; 12464 <__assert_fail@plt+0x1570>
   123dc:	ldr	r3, [r3]
   123e0:	mov	r2, r3
   123e4:	mov	r3, #0
   123e8:	ldr	r1, [pc, #120]	; 12468 <__assert_fail@plt+0x1574>
   123ec:	strd	r2, [r1]
   123f0:	b	1244c <__assert_fail@plt+0x1558>
   123f4:	ldr	r3, [pc, #92]	; 12458 <__assert_fail@plt+0x1564>
   123f8:	ldr	r3, [r3]
   123fc:	cmp	r3, #1
   12400:	bne	1243c <__assert_fail@plt+0x1548>
   12404:	ldr	r3, [pc, #80]	; 1245c <__assert_fail@plt+0x1568>
   12408:	ldrd	r2, [r3]
   1240c:	orrs	r3, r2, r3
   12410:	bne	1243c <__assert_fail@plt+0x1548>
   12414:	ldr	r3, [pc, #68]	; 12460 <__assert_fail@plt+0x156c>
   12418:	ldrd	r2, [r3]
   1241c:	orrs	r3, r2, r3
   12420:	bne	1243c <__assert_fail@plt+0x1548>
   12424:	ldr	r3, [pc, #40]	; 12454 <__assert_fail@plt+0x1560>
   12428:	ldr	r3, [r3]
   1242c:	ldrd	r2, [r3]
   12430:	ldr	r1, [pc, #48]	; 12468 <__assert_fail@plt+0x1574>
   12434:	strd	r2, [r1]
   12438:	b	1244c <__assert_fail@plt+0x1558>
   1243c:	ldr	r1, [pc, #36]	; 12468 <__assert_fail@plt+0x1574>
   12440:	mov	r2, #0
   12444:	mov	r3, #0
   12448:	strd	r2, [r1]
   1244c:	nop			; (mov r0, r0)
   12450:	pop	{fp, pc}
   12454:	andeq	r9, r2, r8, lsl #3
   12458:	muleq	r2, r0, r1
   1245c:	andeq	r9, r2, r8, ror r1
   12460:	andeq	r9, r2, r0, lsl #3
   12464:	andeq	r9, r2, r4, ror #2
   12468:	andeq	r9, r2, r0, ror r1
   1246c:	push	{r4, r5, fp, lr}
   12470:	add	fp, sp, #12
   12474:	sub	sp, sp, #32
   12478:	strd	r0, [fp, #-36]	; 0xffffffdc
   1247c:	str	r2, [fp, #-40]	; 0xffffffd8
   12480:	str	r3, [fp, #-44]	; 0xffffffd4
   12484:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12488:	mov	r2, #0
   1248c:	strb	r2, [r3]
   12490:	ldr	r3, [pc, #396]	; 12624 <__assert_fail@plt+0x1730>
   12494:	ldrd	r2, [r3]
   12498:	orrs	r3, r2, r3
   1249c:	beq	12528 <__assert_fail@plt+0x1634>
   124a0:	ldr	r3, [pc, #380]	; 12624 <__assert_fail@plt+0x1730>
   124a4:	ldrd	r4, [r3]
   124a8:	ldr	r3, [pc, #372]	; 12624 <__assert_fail@plt+0x1730>
   124ac:	ldrd	r2, [r3]
   124b0:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   124b4:	bl	17b34 <__assert_fail@plt+0x6c40>
   124b8:	mov	r0, r4
   124bc:	mov	r1, r5
   124c0:	subs	r0, r0, r2
   124c4:	sbc	r1, r1, r3
   124c8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   124cc:	adds	r2, r2, r0
   124d0:	adc	r3, r3, r1
   124d4:	b	12614 <__assert_fail@plt+0x1720>
   124d8:	ldr	r3, [pc, #328]	; 12628 <__assert_fail@plt+0x1734>
   124dc:	ldr	r2, [r3]
   124e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   124e4:	ldr	r3, [r3]
   124e8:	lsl	r3, r3, #3
   124ec:	add	r3, r2, r3
   124f0:	ldrd	r2, [r3]
   124f4:	strd	r2, [fp, #-20]	; 0xffffffec
   124f8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   124fc:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12500:	cmp	r1, r3
   12504:	cmpeq	r0, r2
   12508:	bcs	12514 <__assert_fail@plt+0x1620>
   1250c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12510:	b	12614 <__assert_fail@plt+0x1720>
   12514:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12518:	ldr	r3, [r3]
   1251c:	add	r2, r3, #1
   12520:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12524:	str	r2, [r3]
   12528:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1252c:	ldr	r2, [r3]
   12530:	ldr	r3, [pc, #244]	; 1262c <__assert_fail@plt+0x1738>
   12534:	ldr	r3, [r3]
   12538:	cmp	r2, r3
   1253c:	bcc	124d8 <__assert_fail@plt+0x15e4>
   12540:	ldr	r3, [pc, #232]	; 12630 <__assert_fail@plt+0x173c>
   12544:	ldrd	r2, [r3]
   12548:	orrs	r3, r2, r3
   1254c:	beq	12588 <__assert_fail@plt+0x1694>
   12550:	ldr	r3, [pc, #216]	; 12630 <__assert_fail@plt+0x173c>
   12554:	ldrd	r4, [r3]
   12558:	ldr	r3, [pc, #208]	; 12630 <__assert_fail@plt+0x173c>
   1255c:	ldrd	r2, [r3]
   12560:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   12564:	bl	17b34 <__assert_fail@plt+0x6c40>
   12568:	mov	r0, r4
   1256c:	mov	r1, r5
   12570:	subs	r0, r0, r2
   12574:	sbc	r1, r1, r3
   12578:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1257c:	adds	r2, r2, r0
   12580:	adc	r3, r3, r1
   12584:	b	12614 <__assert_fail@plt+0x1720>
   12588:	ldr	r3, [pc, #164]	; 12634 <__assert_fail@plt+0x1740>
   1258c:	ldrd	r2, [r3]
   12590:	orrs	r3, r2, r3
   12594:	beq	12600 <__assert_fail@plt+0x170c>
   12598:	ldr	r3, [pc, #136]	; 12628 <__assert_fail@plt+0x1734>
   1259c:	ldr	r2, [r3]
   125a0:	ldr	r3, [pc, #132]	; 1262c <__assert_fail@plt+0x1738>
   125a4:	ldr	r3, [r3]
   125a8:	sub	r3, r3, #-536870911	; 0xe0000001
   125ac:	lsl	r3, r3, #3
   125b0:	add	r3, r2, r3
   125b4:	ldrd	r2, [r3]
   125b8:	strd	r2, [fp, #-28]	; 0xffffffe4
   125bc:	ldr	r3, [pc, #112]	; 12634 <__assert_fail@plt+0x1740>
   125c0:	ldrd	r4, [r3]
   125c4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   125c8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   125cc:	subs	r0, r0, r2
   125d0:	sbc	r1, r1, r3
   125d4:	ldr	r3, [pc, #88]	; 12634 <__assert_fail@plt+0x1740>
   125d8:	ldrd	r2, [r3]
   125dc:	bl	17b34 <__assert_fail@plt+0x6c40>
   125e0:	mov	r0, r4
   125e4:	mov	r1, r5
   125e8:	subs	r0, r0, r2
   125ec:	sbc	r1, r1, r3
   125f0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   125f4:	adds	r2, r2, r0
   125f8:	adc	r3, r3, r1
   125fc:	b	12614 <__assert_fail@plt+0x1720>
   12600:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12604:	mov	r2, #1
   12608:	strb	r2, [r3]
   1260c:	mov	r2, #0
   12610:	mov	r3, #0
   12614:	mov	r0, r2
   12618:	mov	r1, r3
   1261c:	sub	sp, fp, #12
   12620:	pop	{r4, r5, fp, pc}
   12624:	andeq	r9, r2, r0, ror r1
   12628:	andeq	r9, r2, r8, lsl #3
   1262c:	muleq	r2, r0, r1
   12630:	andeq	r9, r2, r8, ror r1
   12634:	andeq	r9, r2, r0, lsl #3
   12638:	push	{fp}		; (str fp, [sp, #-4]!)
   1263c:	add	fp, sp, #0
   12640:	sub	sp, sp, #12
   12644:	str	r0, [fp, #-8]
   12648:	ldr	r3, [pc, #60]	; 1268c <__assert_fail@plt+0x1798>
   1264c:	mov	r2, #0
   12650:	strb	r2, [r3]
   12654:	ldr	r3, [fp, #-8]
   12658:	cmp	r3, #0
   1265c:	bne	12670 <__assert_fail@plt+0x177c>
   12660:	ldr	r3, [pc, #40]	; 12690 <__assert_fail@plt+0x179c>
   12664:	ldr	r2, [pc, #40]	; 12694 <__assert_fail@plt+0x17a0>
   12668:	str	r2, [r3]
   1266c:	b	1267c <__assert_fail@plt+0x1788>
   12670:	ldr	r2, [pc, #24]	; 12690 <__assert_fail@plt+0x179c>
   12674:	ldr	r3, [fp, #-8]
   12678:	str	r3, [r2]
   1267c:	nop			; (mov r0, r0)
   12680:	add	sp, fp, #0
   12684:	pop	{fp}		; (ldr fp, [sp], #4)
   12688:	bx	lr
   1268c:	muleq	r2, r8, r1
   12690:	muleq	r2, r4, r1
   12694:	andeq	r9, r2, r8, ror #1
   12698:	push	{r4, fp, lr}
   1269c:	add	fp, sp, #8
   126a0:	sub	sp, sp, #20
   126a4:	str	r0, [fp, #-24]	; 0xffffffe8
   126a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126ac:	cmp	r3, #0
   126b0:	beq	12848 <__assert_fail@plt+0x1954>
   126b4:	ldr	r3, [pc, #452]	; 12880 <__assert_fail@plt+0x198c>
   126b8:	ldr	r3, [r3]
   126bc:	cmp	r3, #0
   126c0:	bne	126d8 <__assert_fail@plt+0x17e4>
   126c4:	ldr	r3, [pc, #440]	; 12884 <__assert_fail@plt+0x1990>
   126c8:	mov	r2, #340	; 0x154
   126cc:	ldr	r1, [pc, #436]	; 12888 <__assert_fail@plt+0x1994>
   126d0:	ldr	r0, [pc, #436]	; 1288c <__assert_fail@plt+0x1998>
   126d4:	bl	10ef4 <__assert_fail@plt>
   126d8:	bl	10e34 <__errno_location@plt>
   126dc:	mov	r3, r0
   126e0:	ldr	r3, [r3]
   126e4:	str	r3, [fp, #-16]
   126e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   126ec:	bl	10d98 <ferror_unlocked@plt>
   126f0:	mov	r3, r0
   126f4:	cmp	r3, #0
   126f8:	bne	12704 <__assert_fail@plt+0x1810>
   126fc:	mov	r3, #0
   12700:	str	r3, [fp, #-16]
   12704:	ldr	r3, [pc, #372]	; 12880 <__assert_fail@plt+0x198c>
   12708:	ldr	r3, [r3]
   1270c:	ldr	r1, [pc, #380]	; 12890 <__assert_fail@plt+0x199c>
   12710:	mov	r0, r3
   12714:	bl	10cb4 <strcmp@plt>
   12718:	mov	r3, r0
   1271c:	cmp	r3, #0
   12720:	bne	12730 <__assert_fail@plt+0x183c>
   12724:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12728:	bl	10ea0 <clearerr_unlocked@plt>
   1272c:	b	12754 <__assert_fail@plt+0x1860>
   12730:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12734:	bl	12ba0 <__assert_fail@plt+0x1cac>
   12738:	mov	r3, r0
   1273c:	cmp	r3, #0
   12740:	beq	12754 <__assert_fail@plt+0x1860>
   12744:	bl	10e34 <__errno_location@plt>
   12748:	mov	r3, r0
   1274c:	ldr	r3, [r3]
   12750:	str	r3, [fp, #-16]
   12754:	ldr	r3, [fp, #-16]
   12758:	cmp	r3, #0
   1275c:	beq	12848 <__assert_fail@plt+0x1954>
   12760:	ldr	r3, [pc, #280]	; 12880 <__assert_fail@plt+0x198c>
   12764:	ldr	r3, [r3]
   12768:	mov	r2, r3
   1276c:	mov	r1, #3
   12770:	mov	r0, #0
   12774:	bl	15370 <__assert_fail@plt+0x447c>
   12778:	mov	r3, r0
   1277c:	ldr	r2, [pc, #272]	; 12894 <__assert_fail@plt+0x19a0>
   12780:	ldr	r1, [fp, #-16]
   12784:	mov	r0, #0
   12788:	bl	10db0 <error@plt>
   1278c:	ldr	r3, [pc, #260]	; 12898 <__assert_fail@plt+0x19a4>
   12790:	mov	r2, #1
   12794:	str	r2, [r3]
   12798:	b	12848 <__assert_fail@plt+0x1954>
   1279c:	ldr	r1, [pc, #236]	; 12890 <__assert_fail@plt+0x199c>
   127a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   127a4:	bl	10cb4 <strcmp@plt>
   127a8:	mov	r3, r0
   127ac:	cmp	r3, #0
   127b0:	bne	127d0 <__assert_fail@plt+0x18dc>
   127b4:	ldr	r3, [pc, #224]	; 1289c <__assert_fail@plt+0x19a8>
   127b8:	mov	r2, #1
   127bc:	strb	r2, [r3]
   127c0:	ldr	r3, [pc, #216]	; 128a0 <__assert_fail@plt+0x19ac>
   127c4:	ldr	r3, [r3]
   127c8:	str	r3, [fp, #-24]	; 0xffffffe8
   127cc:	b	127e0 <__assert_fail@plt+0x18ec>
   127d0:	ldr	r1, [pc, #204]	; 128a4 <__assert_fail@plt+0x19b0>
   127d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   127d8:	bl	10eac <fopen64@plt>
   127dc:	str	r0, [fp, #-24]	; 0xffffffe8
   127e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127e4:	cmp	r3, #0
   127e8:	beq	1280c <__assert_fail@plt+0x1918>
   127ec:	ldr	r2, [pc, #140]	; 12880 <__assert_fail@plt+0x198c>
   127f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   127f4:	str	r3, [r2]
   127f8:	mov	r1, #2
   127fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12800:	bl	12b44 <__assert_fail@plt+0x1c50>
   12804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12808:	b	12874 <__assert_fail@plt+0x1980>
   1280c:	bl	10e34 <__errno_location@plt>
   12810:	mov	r3, r0
   12814:	ldr	r4, [r3]
   12818:	ldr	r2, [fp, #-20]	; 0xffffffec
   1281c:	mov	r1, #3
   12820:	mov	r0, #0
   12824:	bl	15370 <__assert_fail@plt+0x447c>
   12828:	mov	r3, r0
   1282c:	ldr	r2, [pc, #96]	; 12894 <__assert_fail@plt+0x19a0>
   12830:	mov	r1, r4
   12834:	mov	r0, #0
   12838:	bl	10db0 <error@plt>
   1283c:	ldr	r3, [pc, #84]	; 12898 <__assert_fail@plt+0x19a4>
   12840:	mov	r2, #1
   12844:	str	r2, [r3]
   12848:	ldr	r3, [pc, #88]	; 128a8 <__assert_fail@plt+0x19b4>
   1284c:	ldr	r3, [r3]
   12850:	add	r2, r3, #4
   12854:	ldr	r1, [pc, #76]	; 128a8 <__assert_fail@plt+0x19b4>
   12858:	str	r2, [r1]
   1285c:	ldr	r3, [r3]
   12860:	str	r3, [fp, #-20]	; 0xffffffec
   12864:	ldr	r3, [fp, #-20]	; 0xffffffec
   12868:	cmp	r3, #0
   1286c:	bne	1279c <__assert_fail@plt+0x18a8>
   12870:	mov	r3, #0
   12874:	mov	r0, r3
   12878:	sub	sp, fp, #8
   1287c:	pop	{r4, fp, pc}
   12880:	muleq	r2, ip, r1
   12884:	andeq	r8, r1, r8, lsr #11
   12888:	ldrdeq	r8, [r1], -r0
   1288c:	andeq	r8, r1, r4, ror #7
   12890:	andeq	r8, r1, r4, asr #4
   12894:	strdeq	r8, [r1], -r0
   12898:	andeq	r9, r2, r8, ror #2
   1289c:	muleq	r2, r8, r1
   128a0:	andeq	r9, r2, r0, asr r1
   128a4:	strdeq	r8, [r1], -r4
   128a8:	muleq	r2, r4, r1
   128ac:	push	{fp, lr}
   128b0:	add	fp, sp, #4
   128b4:	ldr	r3, [pc, #72]	; 12904 <__assert_fail@plt+0x1a10>
   128b8:	ldrb	r3, [r3]
   128bc:	cmp	r3, #0
   128c0:	beq	128fc <__assert_fail@plt+0x1a08>
   128c4:	ldr	r3, [pc, #60]	; 12908 <__assert_fail@plt+0x1a14>
   128c8:	ldr	r3, [r3]
   128cc:	mov	r0, r3
   128d0:	bl	12ba0 <__assert_fail@plt+0x1cac>
   128d4:	mov	r3, r0
   128d8:	cmp	r3, #0
   128dc:	beq	128fc <__assert_fail@plt+0x1a08>
   128e0:	bl	10e34 <__errno_location@plt>
   128e4:	mov	r3, r0
   128e8:	ldr	r3, [r3]
   128ec:	ldr	r2, [pc, #24]	; 1290c <__assert_fail@plt+0x1a18>
   128f0:	mov	r1, r3
   128f4:	mov	r0, #1
   128f8:	bl	10db0 <error@plt>
   128fc:	nop			; (mov r0, r0)
   12900:	pop	{fp, pc}
   12904:	muleq	r2, r8, r1
   12908:	andeq	r9, r2, r0, asr r1
   1290c:	andeq	r8, r1, r4, asr #4
   12910:	push	{fp, lr}
   12914:	add	fp, sp, #4
   12918:	ldr	r0, [pc, #64]	; 12960 <__assert_fail@plt+0x1a6c>
   1291c:	bl	10e10 <gettext@plt>
   12920:	mov	r2, r0
   12924:	ldr	r3, [pc, #56]	; 12964 <__assert_fail@plt+0x1a70>
   12928:	ldr	r3, [r3]
   1292c:	mov	r1, r3
   12930:	mov	r0, r2
   12934:	bl	10c9c <fputs_unlocked@plt>
   12938:	ldr	r0, [pc, #40]	; 12968 <__assert_fail@plt+0x1a74>
   1293c:	bl	10e10 <gettext@plt>
   12940:	mov	r2, r0
   12944:	ldr	r3, [pc, #24]	; 12964 <__assert_fail@plt+0x1a70>
   12948:	ldr	r3, [r3]
   1294c:	mov	r1, r3
   12950:	mov	r0, r2
   12954:	bl	10c9c <fputs_unlocked@plt>
   12958:	nop			; (mov r0, r0)
   1295c:	pop	{fp, pc}
   12960:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12964:	andeq	r9, r2, r4, asr r1
   12968:	andeq	r8, r1, r8, lsr r4
   1296c:	push	{fp}		; (str fp, [sp, #-4]!)
   12970:	add	fp, sp, #0
   12974:	sub	sp, sp, #12
   12978:	str	r0, [fp, #-8]
   1297c:	ldr	r2, [pc, #20]	; 12998 <__assert_fail@plt+0x1aa4>
   12980:	ldr	r3, [fp, #-8]
   12984:	str	r3, [r2]
   12988:	nop			; (mov r0, r0)
   1298c:	add	sp, fp, #0
   12990:	pop	{fp}		; (ldr fp, [sp], #4)
   12994:	bx	lr
   12998:	andeq	r9, r2, r0, lsr #3
   1299c:	push	{fp}		; (str fp, [sp, #-4]!)
   129a0:	add	fp, sp, #0
   129a4:	sub	sp, sp, #12
   129a8:	mov	r3, r0
   129ac:	strb	r3, [fp, #-5]
   129b0:	ldr	r2, [pc, #20]	; 129cc <__assert_fail@plt+0x1ad8>
   129b4:	ldrb	r3, [fp, #-5]
   129b8:	strb	r3, [r2]
   129bc:	nop			; (mov r0, r0)
   129c0:	add	sp, fp, #0
   129c4:	pop	{fp}		; (ldr fp, [sp], #4)
   129c8:	bx	lr
   129cc:	andeq	r9, r2, r4, lsr #3
   129d0:	push	{r4, fp, lr}
   129d4:	add	fp, sp, #8
   129d8:	sub	sp, sp, #20
   129dc:	ldr	r3, [pc, #256]	; 12ae4 <__assert_fail@plt+0x1bf0>
   129e0:	ldr	r3, [r3]
   129e4:	mov	r0, r3
   129e8:	bl	16c24 <__assert_fail@plt+0x5d30>
   129ec:	mov	r3, r0
   129f0:	cmp	r3, #0
   129f4:	beq	12aac <__assert_fail@plt+0x1bb8>
   129f8:	ldr	r3, [pc, #232]	; 12ae8 <__assert_fail@plt+0x1bf4>
   129fc:	ldrb	r3, [r3]
   12a00:	eor	r3, r3, #1
   12a04:	uxtb	r3, r3
   12a08:	cmp	r3, #0
   12a0c:	bne	12a24 <__assert_fail@plt+0x1b30>
   12a10:	bl	10e34 <__errno_location@plt>
   12a14:	mov	r3, r0
   12a18:	ldr	r3, [r3]
   12a1c:	cmp	r3, #32
   12a20:	beq	12aac <__assert_fail@plt+0x1bb8>
   12a24:	ldr	r0, [pc, #192]	; 12aec <__assert_fail@plt+0x1bf8>
   12a28:	bl	10e10 <gettext@plt>
   12a2c:	str	r0, [fp, #-16]
   12a30:	ldr	r3, [pc, #184]	; 12af0 <__assert_fail@plt+0x1bfc>
   12a34:	ldr	r3, [r3]
   12a38:	cmp	r3, #0
   12a3c:	beq	12a80 <__assert_fail@plt+0x1b8c>
   12a40:	bl	10e34 <__errno_location@plt>
   12a44:	mov	r3, r0
   12a48:	ldr	r4, [r3]
   12a4c:	ldr	r3, [pc, #156]	; 12af0 <__assert_fail@plt+0x1bfc>
   12a50:	ldr	r3, [r3]
   12a54:	mov	r0, r3
   12a58:	bl	15310 <__assert_fail@plt+0x441c>
   12a5c:	mov	r2, r0
   12a60:	ldr	r3, [fp, #-16]
   12a64:	str	r3, [sp]
   12a68:	mov	r3, r2
   12a6c:	ldr	r2, [pc, #128]	; 12af4 <__assert_fail@plt+0x1c00>
   12a70:	mov	r1, r4
   12a74:	mov	r0, #0
   12a78:	bl	10db0 <error@plt>
   12a7c:	b	12a9c <__assert_fail@plt+0x1ba8>
   12a80:	bl	10e34 <__errno_location@plt>
   12a84:	mov	r3, r0
   12a88:	ldr	r1, [r3]
   12a8c:	ldr	r3, [fp, #-16]
   12a90:	ldr	r2, [pc, #96]	; 12af8 <__assert_fail@plt+0x1c04>
   12a94:	mov	r0, #0
   12a98:	bl	10db0 <error@plt>
   12a9c:	ldr	r3, [pc, #88]	; 12afc <__assert_fail@plt+0x1c08>
   12aa0:	ldr	r3, [r3]
   12aa4:	mov	r0, r3
   12aa8:	bl	10cf0 <_exit@plt>
   12aac:	ldr	r3, [pc, #76]	; 12b00 <__assert_fail@plt+0x1c0c>
   12ab0:	ldr	r3, [r3]
   12ab4:	mov	r0, r3
   12ab8:	bl	16c24 <__assert_fail@plt+0x5d30>
   12abc:	mov	r3, r0
   12ac0:	cmp	r3, #0
   12ac4:	beq	12ad8 <__assert_fail@plt+0x1be4>
   12ac8:	ldr	r3, [pc, #44]	; 12afc <__assert_fail@plt+0x1c08>
   12acc:	ldr	r3, [r3]
   12ad0:	mov	r0, r3
   12ad4:	bl	10cf0 <_exit@plt>
   12ad8:	nop			; (mov r0, r0)
   12adc:	sub	sp, fp, #8
   12ae0:	pop	{r4, fp, pc}
   12ae4:	andeq	r9, r2, r4, asr r1
   12ae8:	andeq	r9, r2, r4, lsr #3
   12aec:	andeq	r8, r1, r4, asr #11
   12af0:	andeq	r9, r2, r0, lsr #3
   12af4:	ldrdeq	r8, [r1], -r0
   12af8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12afc:	strdeq	r9, [r2], -r4
   12b00:	andeq	r9, r2, r8, asr #2
   12b04:	push	{fp, lr}
   12b08:	add	fp, sp, #4
   12b0c:	sub	sp, sp, #40	; 0x28
   12b10:	str	r0, [fp, #-16]
   12b14:	strd	r2, [fp, #-28]	; 0xffffffe4
   12b18:	ldr	r3, [fp, #12]
   12b1c:	str	r3, [sp, #8]
   12b20:	ldrd	r2, [fp, #4]
   12b24:	strd	r2, [sp]
   12b28:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12b2c:	ldr	r0, [fp, #-16]
   12b30:	bl	10cc0 <posix_fadvise64@plt>
   12b34:	str	r0, [fp, #-8]
   12b38:	nop			; (mov r0, r0)
   12b3c:	sub	sp, fp, #4
   12b40:	pop	{fp, pc}
   12b44:	push	{fp, lr}
   12b48:	add	fp, sp, #4
   12b4c:	sub	sp, sp, #24
   12b50:	str	r0, [fp, #-8]
   12b54:	str	r1, [fp, #-12]
   12b58:	ldr	r3, [fp, #-8]
   12b5c:	cmp	r3, #0
   12b60:	beq	12b94 <__assert_fail@plt+0x1ca0>
   12b64:	ldr	r0, [fp, #-8]
   12b68:	bl	10e58 <fileno@plt>
   12b6c:	mov	r1, r0
   12b70:	ldr	r3, [fp, #-12]
   12b74:	str	r3, [sp, #8]
   12b78:	mov	r2, #0
   12b7c:	mov	r3, #0
   12b80:	strd	r2, [sp]
   12b84:	mov	r2, #0
   12b88:	mov	r3, #0
   12b8c:	mov	r0, r1
   12b90:	bl	12b04 <__assert_fail@plt+0x1c10>
   12b94:	nop			; (mov r0, r0)
   12b98:	sub	sp, fp, #4
   12b9c:	pop	{fp, pc}
   12ba0:	push	{fp, lr}
   12ba4:	add	fp, sp, #4
   12ba8:	sub	sp, sp, #32
   12bac:	str	r0, [fp, #-24]	; 0xffffffe8
   12bb0:	mov	r3, #0
   12bb4:	str	r3, [fp, #-8]
   12bb8:	mov	r3, #0
   12bbc:	str	r3, [fp, #-12]
   12bc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12bc4:	bl	10e58 <fileno@plt>
   12bc8:	str	r0, [fp, #-16]
   12bcc:	ldr	r3, [fp, #-16]
   12bd0:	cmp	r3, #0
   12bd4:	bge	12be8 <__assert_fail@plt+0x1cf4>
   12bd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12bdc:	bl	10e64 <fclose@plt>
   12be0:	mov	r3, r0
   12be4:	b	12c8c <__assert_fail@plt+0x1d98>
   12be8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12bec:	bl	10dd4 <__freading@plt>
   12bf0:	mov	r3, r0
   12bf4:	cmp	r3, #0
   12bf8:	beq	12c34 <__assert_fail@plt+0x1d40>
   12bfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c00:	bl	10e58 <fileno@plt>
   12c04:	mov	r1, r0
   12c08:	mov	r3, #1
   12c0c:	str	r3, [sp]
   12c10:	mov	r2, #0
   12c14:	mov	r3, #0
   12c18:	mov	r0, r1
   12c1c:	bl	10d74 <lseek64@plt>
   12c20:	mvn	r2, #0
   12c24:	mvn	r3, #0
   12c28:	cmp	r1, r3
   12c2c:	cmpeq	r0, r2
   12c30:	beq	12c58 <__assert_fail@plt+0x1d64>
   12c34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c38:	bl	12ce0 <__assert_fail@plt+0x1dec>
   12c3c:	mov	r3, r0
   12c40:	cmp	r3, #0
   12c44:	beq	12c58 <__assert_fail@plt+0x1d64>
   12c48:	bl	10e34 <__errno_location@plt>
   12c4c:	mov	r3, r0
   12c50:	ldr	r3, [r3]
   12c54:	str	r3, [fp, #-8]
   12c58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c5c:	bl	10e64 <fclose@plt>
   12c60:	str	r0, [fp, #-12]
   12c64:	ldr	r3, [fp, #-8]
   12c68:	cmp	r3, #0
   12c6c:	beq	12c88 <__assert_fail@plt+0x1d94>
   12c70:	bl	10e34 <__errno_location@plt>
   12c74:	mov	r2, r0
   12c78:	ldr	r3, [fp, #-8]
   12c7c:	str	r3, [r2]
   12c80:	mvn	r3, #0
   12c84:	str	r3, [fp, #-12]
   12c88:	ldr	r3, [fp, #-12]
   12c8c:	mov	r0, r3
   12c90:	sub	sp, fp, #4
   12c94:	pop	{fp, pc}
   12c98:	push	{fp, lr}
   12c9c:	add	fp, sp, #4
   12ca0:	sub	sp, sp, #16
   12ca4:	str	r0, [fp, #-8]
   12ca8:	ldr	r3, [fp, #-8]
   12cac:	ldr	r3, [r3]
   12cb0:	and	r3, r3, #256	; 0x100
   12cb4:	cmp	r3, #0
   12cb8:	beq	12cd4 <__assert_fail@plt+0x1de0>
   12cbc:	mov	r3, #1
   12cc0:	str	r3, [sp]
   12cc4:	mov	r2, #0
   12cc8:	mov	r3, #0
   12ccc:	ldr	r0, [fp, #-8]
   12cd0:	bl	12dcc <__assert_fail@plt+0x1ed8>
   12cd4:	nop			; (mov r0, r0)
   12cd8:	sub	sp, fp, #4
   12cdc:	pop	{fp, pc}
   12ce0:	push	{fp, lr}
   12ce4:	add	fp, sp, #4
   12ce8:	sub	sp, sp, #8
   12cec:	str	r0, [fp, #-8]
   12cf0:	ldr	r3, [fp, #-8]
   12cf4:	cmp	r3, #0
   12cf8:	beq	12d10 <__assert_fail@plt+0x1e1c>
   12cfc:	ldr	r0, [fp, #-8]
   12d00:	bl	10dd4 <__freading@plt>
   12d04:	mov	r3, r0
   12d08:	cmp	r3, #0
   12d0c:	bne	12d20 <__assert_fail@plt+0x1e2c>
   12d10:	ldr	r0, [fp, #-8]
   12d14:	bl	10cd8 <fflush@plt>
   12d18:	mov	r3, r0
   12d1c:	b	12d34 <__assert_fail@plt+0x1e40>
   12d20:	ldr	r0, [fp, #-8]
   12d24:	bl	12c98 <__assert_fail@plt+0x1da4>
   12d28:	ldr	r0, [fp, #-8]
   12d2c:	bl	10cd8 <fflush@plt>
   12d30:	mov	r3, r0
   12d34:	mov	r0, r3
   12d38:	sub	sp, fp, #4
   12d3c:	pop	{fp, pc}
   12d40:	push	{r4, fp, lr}
   12d44:	add	fp, sp, #8
   12d48:	sub	sp, sp, #20
   12d4c:	str	r0, [fp, #-24]	; 0xffffffe8
   12d50:	bl	10e34 <__errno_location@plt>
   12d54:	mov	r3, r0
   12d58:	ldr	r3, [r3]
   12d5c:	str	r3, [fp, #-20]	; 0xffffffec
   12d60:	bl	10e34 <__errno_location@plt>
   12d64:	mov	r3, r0
   12d68:	ldr	r3, [r3]
   12d6c:	str	r3, [fp, #-16]
   12d70:	bl	10e34 <__errno_location@plt>
   12d74:	mov	r2, r0
   12d78:	mov	r3, #0
   12d7c:	str	r3, [r2]
   12d80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12d84:	bl	10ce4 <free@plt>
   12d88:	bl	10e34 <__errno_location@plt>
   12d8c:	mov	r4, r0
   12d90:	bl	10e34 <__errno_location@plt>
   12d94:	mov	r3, r0
   12d98:	ldr	r3, [r3]
   12d9c:	cmp	r3, #0
   12da0:	moveq	r3, #1
   12da4:	movne	r3, #0
   12da8:	uxtb	r3, r3
   12dac:	lsl	r3, r3, #2
   12db0:	sub	r2, fp, #12
   12db4:	add	r3, r2, r3
   12db8:	ldr	r3, [r3, #-8]
   12dbc:	str	r3, [r4]
   12dc0:	nop			; (mov r0, r0)
   12dc4:	sub	sp, fp, #8
   12dc8:	pop	{r4, fp, pc}
   12dcc:	push	{fp, lr}
   12dd0:	add	fp, sp, #4
   12dd4:	sub	sp, sp, #32
   12dd8:	str	r0, [fp, #-16]
   12ddc:	strd	r2, [fp, #-28]	; 0xffffffe4
   12de0:	ldr	r3, [fp, #-16]
   12de4:	ldr	r2, [r3, #8]
   12de8:	ldr	r3, [fp, #-16]
   12dec:	ldr	r3, [r3, #4]
   12df0:	cmp	r2, r3
   12df4:	bne	12e8c <__assert_fail@plt+0x1f98>
   12df8:	ldr	r3, [fp, #-16]
   12dfc:	ldr	r2, [r3, #20]
   12e00:	ldr	r3, [fp, #-16]
   12e04:	ldr	r3, [r3, #16]
   12e08:	cmp	r2, r3
   12e0c:	bne	12e8c <__assert_fail@plt+0x1f98>
   12e10:	ldr	r3, [fp, #-16]
   12e14:	ldr	r3, [r3, #36]	; 0x24
   12e18:	cmp	r3, #0
   12e1c:	bne	12e8c <__assert_fail@plt+0x1f98>
   12e20:	ldr	r0, [fp, #-16]
   12e24:	bl	10e58 <fileno@plt>
   12e28:	mov	r1, r0
   12e2c:	ldr	r3, [fp, #4]
   12e30:	str	r3, [sp]
   12e34:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12e38:	mov	r0, r1
   12e3c:	bl	10d74 <lseek64@plt>
   12e40:	strd	r0, [fp, #-12]
   12e44:	ldrd	r2, [fp, #-12]
   12e48:	mvn	r0, #0
   12e4c:	mvn	r1, #0
   12e50:	cmp	r3, r1
   12e54:	cmpeq	r2, r0
   12e58:	bne	12e64 <__assert_fail@plt+0x1f70>
   12e5c:	mvn	r3, #0
   12e60:	b	12ea4 <__assert_fail@plt+0x1fb0>
   12e64:	ldr	r3, [fp, #-16]
   12e68:	ldr	r3, [r3]
   12e6c:	bic	r2, r3, #16
   12e70:	ldr	r3, [fp, #-16]
   12e74:	str	r2, [r3]
   12e78:	ldr	r1, [fp, #-16]
   12e7c:	ldrd	r2, [fp, #-12]
   12e80:	strd	r2, [r1, #80]	; 0x50
   12e84:	mov	r3, #0
   12e88:	b	12ea4 <__assert_fail@plt+0x1fb0>
   12e8c:	ldr	r3, [fp, #4]
   12e90:	str	r3, [sp]
   12e94:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12e98:	ldr	r0, [fp, #-16]
   12e9c:	bl	10e70 <fseeko64@plt>
   12ea0:	mov	r3, r0
   12ea4:	mov	r0, r3
   12ea8:	sub	sp, fp, #4
   12eac:	pop	{fp, pc}
   12eb0:	push	{fp, lr}
   12eb4:	add	fp, sp, #4
   12eb8:	sub	sp, sp, #16
   12ebc:	str	r0, [fp, #-16]
   12ec0:	ldr	r3, [fp, #-16]
   12ec4:	cmp	r3, #0
   12ec8:	bne	12ee8 <__assert_fail@plt+0x1ff4>
   12ecc:	ldr	r3, [pc, #220]	; 12fb0 <__assert_fail@plt+0x20bc>
   12ed0:	ldr	r3, [r3]
   12ed4:	mov	r2, #55	; 0x37
   12ed8:	mov	r1, #1
   12edc:	ldr	r0, [pc, #208]	; 12fb4 <__assert_fail@plt+0x20c0>
   12ee0:	bl	10d68 <fwrite@plt>
   12ee4:	bl	10ed0 <abort@plt>
   12ee8:	mov	r1, #47	; 0x2f
   12eec:	ldr	r0, [fp, #-16]
   12ef0:	bl	10e88 <strrchr@plt>
   12ef4:	str	r0, [fp, #-8]
   12ef8:	ldr	r3, [fp, #-8]
   12efc:	cmp	r3, #0
   12f00:	beq	12f10 <__assert_fail@plt+0x201c>
   12f04:	ldr	r3, [fp, #-8]
   12f08:	add	r3, r3, #1
   12f0c:	b	12f14 <__assert_fail@plt+0x2020>
   12f10:	ldr	r3, [fp, #-16]
   12f14:	str	r3, [fp, #-12]
   12f18:	ldr	r2, [fp, #-12]
   12f1c:	ldr	r3, [fp, #-16]
   12f20:	sub	r3, r2, r3
   12f24:	cmp	r3, #6
   12f28:	ble	12f8c <__assert_fail@plt+0x2098>
   12f2c:	ldr	r3, [fp, #-12]
   12f30:	sub	r3, r3, #7
   12f34:	mov	r2, #7
   12f38:	ldr	r1, [pc, #120]	; 12fb8 <__assert_fail@plt+0x20c4>
   12f3c:	mov	r0, r3
   12f40:	bl	10ec4 <strncmp@plt>
   12f44:	mov	r3, r0
   12f48:	cmp	r3, #0
   12f4c:	bne	12f8c <__assert_fail@plt+0x2098>
   12f50:	ldr	r3, [fp, #-12]
   12f54:	str	r3, [fp, #-16]
   12f58:	mov	r2, #3
   12f5c:	ldr	r1, [pc, #88]	; 12fbc <__assert_fail@plt+0x20c8>
   12f60:	ldr	r0, [fp, #-12]
   12f64:	bl	10ec4 <strncmp@plt>
   12f68:	mov	r3, r0
   12f6c:	cmp	r3, #0
   12f70:	bne	12f8c <__assert_fail@plt+0x2098>
   12f74:	ldr	r3, [fp, #-12]
   12f78:	add	r3, r3, #3
   12f7c:	str	r3, [fp, #-16]
   12f80:	ldr	r2, [pc, #56]	; 12fc0 <__assert_fail@plt+0x20cc>
   12f84:	ldr	r3, [fp, #-16]
   12f88:	str	r3, [r2]
   12f8c:	ldr	r2, [pc, #48]	; 12fc4 <__assert_fail@plt+0x20d0>
   12f90:	ldr	r3, [fp, #-16]
   12f94:	str	r3, [r2]
   12f98:	ldr	r2, [pc, #40]	; 12fc8 <__assert_fail@plt+0x20d4>
   12f9c:	ldr	r3, [fp, #-16]
   12fa0:	str	r3, [r2]
   12fa4:	nop			; (mov r0, r0)
   12fa8:	sub	sp, fp, #4
   12fac:	pop	{fp, pc}
   12fb0:	andeq	r9, r2, r8, asr #2
   12fb4:	ldrdeq	r8, [r1], -ip
   12fb8:	andeq	r8, r1, r4, lsl r6
   12fbc:	andeq	r8, r1, ip, lsl r6
   12fc0:	andeq	r9, r2, r8, lsr r1
   12fc4:	andeq	r9, r2, r8, lsr #3
   12fc8:	andeq	r9, r2, ip, lsr r1
   12fcc:	push	{fp, lr}
   12fd0:	add	fp, sp, #4
   12fd4:	sub	sp, sp, #16
   12fd8:	str	r0, [fp, #-16]
   12fdc:	bl	10e34 <__errno_location@plt>
   12fe0:	mov	r3, r0
   12fe4:	ldr	r3, [r3]
   12fe8:	str	r3, [fp, #-8]
   12fec:	ldr	r3, [fp, #-16]
   12ff0:	cmp	r3, #0
   12ff4:	beq	13000 <__assert_fail@plt+0x210c>
   12ff8:	ldr	r3, [fp, #-16]
   12ffc:	b	13004 <__assert_fail@plt+0x2110>
   13000:	ldr	r3, [pc, #48]	; 13038 <__assert_fail@plt+0x2144>
   13004:	mov	r1, #48	; 0x30
   13008:	mov	r0, r3
   1300c:	bl	167f0 <__assert_fail@plt+0x58fc>
   13010:	mov	r3, r0
   13014:	str	r3, [fp, #-12]
   13018:	bl	10e34 <__errno_location@plt>
   1301c:	mov	r2, r0
   13020:	ldr	r3, [fp, #-8]
   13024:	str	r3, [r2]
   13028:	ldr	r3, [fp, #-12]
   1302c:	mov	r0, r3
   13030:	sub	sp, fp, #4
   13034:	pop	{fp, pc}
   13038:	andeq	r9, r2, ip, lsr #3
   1303c:	push	{fp}		; (str fp, [sp, #-4]!)
   13040:	add	fp, sp, #0
   13044:	sub	sp, sp, #12
   13048:	str	r0, [fp, #-8]
   1304c:	ldr	r3, [fp, #-8]
   13050:	cmp	r3, #0
   13054:	beq	13060 <__assert_fail@plt+0x216c>
   13058:	ldr	r3, [fp, #-8]
   1305c:	b	13064 <__assert_fail@plt+0x2170>
   13060:	ldr	r3, [pc, #16]	; 13078 <__assert_fail@plt+0x2184>
   13064:	ldr	r3, [r3]
   13068:	mov	r0, r3
   1306c:	add	sp, fp, #0
   13070:	pop	{fp}		; (ldr fp, [sp], #4)
   13074:	bx	lr
   13078:	andeq	r9, r2, ip, lsr #3
   1307c:	push	{fp}		; (str fp, [sp, #-4]!)
   13080:	add	fp, sp, #0
   13084:	sub	sp, sp, #12
   13088:	str	r0, [fp, #-8]
   1308c:	str	r1, [fp, #-12]
   13090:	ldr	r3, [fp, #-8]
   13094:	cmp	r3, #0
   13098:	beq	130a4 <__assert_fail@plt+0x21b0>
   1309c:	ldr	r3, [fp, #-8]
   130a0:	b	130a8 <__assert_fail@plt+0x21b4>
   130a4:	ldr	r3, [pc, #20]	; 130c0 <__assert_fail@plt+0x21cc>
   130a8:	ldr	r2, [fp, #-12]
   130ac:	str	r2, [r3]
   130b0:	nop			; (mov r0, r0)
   130b4:	add	sp, fp, #0
   130b8:	pop	{fp}		; (ldr fp, [sp], #4)
   130bc:	bx	lr
   130c0:	andeq	r9, r2, ip, lsr #3
   130c4:	push	{fp}		; (str fp, [sp, #-4]!)
   130c8:	add	fp, sp, #0
   130cc:	sub	sp, sp, #36	; 0x24
   130d0:	str	r0, [fp, #-24]	; 0xffffffe8
   130d4:	mov	r3, r1
   130d8:	str	r2, [fp, #-32]	; 0xffffffe0
   130dc:	strb	r3, [fp, #-25]	; 0xffffffe7
   130e0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   130e4:	strb	r3, [fp, #-5]
   130e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130ec:	cmp	r3, #0
   130f0:	beq	130fc <__assert_fail@plt+0x2208>
   130f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130f8:	b	13100 <__assert_fail@plt+0x220c>
   130fc:	ldr	r3, [pc, #124]	; 13180 <__assert_fail@plt+0x228c>
   13100:	add	r2, r3, #8
   13104:	ldrb	r3, [fp, #-5]
   13108:	lsr	r3, r3, #5
   1310c:	uxtb	r3, r3
   13110:	lsl	r3, r3, #2
   13114:	add	r3, r2, r3
   13118:	str	r3, [fp, #-12]
   1311c:	ldrb	r3, [fp, #-5]
   13120:	and	r3, r3, #31
   13124:	str	r3, [fp, #-16]
   13128:	ldr	r3, [fp, #-12]
   1312c:	ldr	r2, [r3]
   13130:	ldr	r3, [fp, #-16]
   13134:	lsr	r3, r2, r3
   13138:	and	r3, r3, #1
   1313c:	str	r3, [fp, #-20]	; 0xffffffec
   13140:	ldr	r3, [fp, #-12]
   13144:	ldr	r3, [r3]
   13148:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1314c:	and	r1, r2, #1
   13150:	ldr	r2, [fp, #-20]	; 0xffffffec
   13154:	eor	r1, r1, r2
   13158:	ldr	r2, [fp, #-16]
   1315c:	lsl	r2, r1, r2
   13160:	eor	r2, r2, r3
   13164:	ldr	r3, [fp, #-12]
   13168:	str	r2, [r3]
   1316c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13170:	mov	r0, r3
   13174:	add	sp, fp, #0
   13178:	pop	{fp}		; (ldr fp, [sp], #4)
   1317c:	bx	lr
   13180:	andeq	r9, r2, ip, lsr #3
   13184:	push	{fp}		; (str fp, [sp, #-4]!)
   13188:	add	fp, sp, #0
   1318c:	sub	sp, sp, #20
   13190:	str	r0, [fp, #-16]
   13194:	str	r1, [fp, #-20]	; 0xffffffec
   13198:	ldr	r3, [fp, #-16]
   1319c:	cmp	r3, #0
   131a0:	bne	131ac <__assert_fail@plt+0x22b8>
   131a4:	ldr	r3, [pc, #44]	; 131d8 <__assert_fail@plt+0x22e4>
   131a8:	str	r3, [fp, #-16]
   131ac:	ldr	r3, [fp, #-16]
   131b0:	ldr	r3, [r3, #4]
   131b4:	str	r3, [fp, #-8]
   131b8:	ldr	r3, [fp, #-16]
   131bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   131c0:	str	r2, [r3, #4]
   131c4:	ldr	r3, [fp, #-8]
   131c8:	mov	r0, r3
   131cc:	add	sp, fp, #0
   131d0:	pop	{fp}		; (ldr fp, [sp], #4)
   131d4:	bx	lr
   131d8:	andeq	r9, r2, ip, lsr #3
   131dc:	push	{fp, lr}
   131e0:	add	fp, sp, #4
   131e4:	sub	sp, sp, #16
   131e8:	str	r0, [fp, #-8]
   131ec:	str	r1, [fp, #-12]
   131f0:	str	r2, [fp, #-16]
   131f4:	ldr	r3, [fp, #-8]
   131f8:	cmp	r3, #0
   131fc:	bne	13208 <__assert_fail@plt+0x2314>
   13200:	ldr	r3, [pc, #76]	; 13254 <__assert_fail@plt+0x2360>
   13204:	str	r3, [fp, #-8]
   13208:	ldr	r3, [fp, #-8]
   1320c:	mov	r2, #10
   13210:	str	r2, [r3]
   13214:	ldr	r3, [fp, #-12]
   13218:	cmp	r3, #0
   1321c:	beq	1322c <__assert_fail@plt+0x2338>
   13220:	ldr	r3, [fp, #-16]
   13224:	cmp	r3, #0
   13228:	bne	13230 <__assert_fail@plt+0x233c>
   1322c:	bl	10ed0 <abort@plt>
   13230:	ldr	r3, [fp, #-8]
   13234:	ldr	r2, [fp, #-12]
   13238:	str	r2, [r3, #40]	; 0x28
   1323c:	ldr	r3, [fp, #-8]
   13240:	ldr	r2, [fp, #-16]
   13244:	str	r2, [r3, #44]	; 0x2c
   13248:	nop			; (mov r0, r0)
   1324c:	sub	sp, fp, #4
   13250:	pop	{fp, pc}
   13254:	andeq	r9, r2, ip, lsr #3
   13258:	push	{fp, lr}
   1325c:	add	fp, sp, #4
   13260:	sub	sp, sp, #56	; 0x38
   13264:	str	r0, [fp, #-56]	; 0xffffffc8
   13268:	str	r1, [fp, #-60]	; 0xffffffc4
   1326c:	sub	r3, fp, #52	; 0x34
   13270:	mov	r2, #48	; 0x30
   13274:	mov	r1, #0
   13278:	mov	r0, r3
   1327c:	bl	10e4c <memset@plt>
   13280:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13284:	cmp	r3, #10
   13288:	bne	13290 <__assert_fail@plt+0x239c>
   1328c:	bl	10ed0 <abort@plt>
   13290:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13294:	str	r3, [fp, #-52]	; 0xffffffcc
   13298:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1329c:	mov	lr, r3
   132a0:	sub	ip, fp, #52	; 0x34
   132a4:	ldm	ip!, {r0, r1, r2, r3}
   132a8:	stmia	lr!, {r0, r1, r2, r3}
   132ac:	ldm	ip!, {r0, r1, r2, r3}
   132b0:	stmia	lr!, {r0, r1, r2, r3}
   132b4:	ldm	ip, {r0, r1, r2, r3}
   132b8:	stm	lr, {r0, r1, r2, r3}
   132bc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   132c0:	sub	sp, fp, #4
   132c4:	pop	{fp, pc}
   132c8:	push	{fp, lr}
   132cc:	add	fp, sp, #4
   132d0:	sub	sp, sp, #16
   132d4:	str	r0, [fp, #-16]
   132d8:	str	r1, [fp, #-20]	; 0xffffffec
   132dc:	ldr	r0, [fp, #-16]
   132e0:	bl	10e10 <gettext@plt>
   132e4:	str	r0, [fp, #-8]
   132e8:	ldr	r2, [fp, #-8]
   132ec:	ldr	r3, [fp, #-16]
   132f0:	cmp	r2, r3
   132f4:	beq	13300 <__assert_fail@plt+0x240c>
   132f8:	ldr	r3, [fp, #-8]
   132fc:	b	13390 <__assert_fail@plt+0x249c>
   13300:	bl	16e38 <__assert_fail@plt+0x5f44>
   13304:	str	r0, [fp, #-12]
   13308:	ldr	r1, [pc, #140]	; 1339c <__assert_fail@plt+0x24a8>
   1330c:	ldr	r0, [fp, #-12]
   13310:	bl	16b8c <__assert_fail@plt+0x5c98>
   13314:	mov	r3, r0
   13318:	cmp	r3, #0
   1331c:	bne	13340 <__assert_fail@plt+0x244c>
   13320:	ldr	r3, [fp, #-16]
   13324:	ldrb	r3, [r3]
   13328:	cmp	r3, #96	; 0x60
   1332c:	bne	13338 <__assert_fail@plt+0x2444>
   13330:	ldr	r3, [pc, #104]	; 133a0 <__assert_fail@plt+0x24ac>
   13334:	b	13390 <__assert_fail@plt+0x249c>
   13338:	ldr	r3, [pc, #100]	; 133a4 <__assert_fail@plt+0x24b0>
   1333c:	b	13390 <__assert_fail@plt+0x249c>
   13340:	ldr	r1, [pc, #96]	; 133a8 <__assert_fail@plt+0x24b4>
   13344:	ldr	r0, [fp, #-12]
   13348:	bl	16b8c <__assert_fail@plt+0x5c98>
   1334c:	mov	r3, r0
   13350:	cmp	r3, #0
   13354:	bne	13378 <__assert_fail@plt+0x2484>
   13358:	ldr	r3, [fp, #-16]
   1335c:	ldrb	r3, [r3]
   13360:	cmp	r3, #96	; 0x60
   13364:	bne	13370 <__assert_fail@plt+0x247c>
   13368:	ldr	r3, [pc, #60]	; 133ac <__assert_fail@plt+0x24b8>
   1336c:	b	13390 <__assert_fail@plt+0x249c>
   13370:	ldr	r3, [pc, #56]	; 133b0 <__assert_fail@plt+0x24bc>
   13374:	b	13390 <__assert_fail@plt+0x249c>
   13378:	ldr	r3, [fp, #-20]	; 0xffffffec
   1337c:	cmp	r3, #9
   13380:	bne	1338c <__assert_fail@plt+0x2498>
   13384:	ldr	r3, [pc, #40]	; 133b4 <__assert_fail@plt+0x24c0>
   13388:	b	13390 <__assert_fail@plt+0x249c>
   1338c:	ldr	r3, [pc, #36]	; 133b8 <__assert_fail@plt+0x24c4>
   13390:	mov	r0, r3
   13394:	sub	sp, fp, #4
   13398:	pop	{fp, pc}
   1339c:	ldrdeq	r8, [r1], -ip
   133a0:	andeq	r8, r1, r4, ror #13
   133a4:	andeq	r8, r1, r8, ror #13
   133a8:	andeq	r8, r1, ip, ror #13
   133ac:	strdeq	r8, [r1], -r4
   133b0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   133b4:	strdeq	r8, [r1], -ip
   133b8:	andeq	r8, r1, r0, lsl #14
   133bc:	push	{r4, fp, lr}
   133c0:	add	fp, sp, #8
   133c4:	sub	sp, sp, #116	; 0x74
   133c8:	str	r0, [fp, #-88]	; 0xffffffa8
   133cc:	str	r1, [fp, #-92]	; 0xffffffa4
   133d0:	str	r2, [fp, #-96]	; 0xffffffa0
   133d4:	str	r3, [fp, #-100]	; 0xffffff9c
   133d8:	mov	r3, #0
   133dc:	str	r3, [fp, #-20]	; 0xffffffec
   133e0:	mov	r3, #0
   133e4:	str	r3, [fp, #-24]	; 0xffffffe8
   133e8:	mov	r3, #0
   133ec:	str	r3, [fp, #-28]	; 0xffffffe4
   133f0:	mov	r3, #0
   133f4:	str	r3, [fp, #-32]	; 0xffffffe0
   133f8:	mov	r3, #0
   133fc:	strb	r3, [fp, #-33]	; 0xffffffdf
   13400:	bl	10d80 <__ctype_get_mb_cur_max@plt>
   13404:	mov	r3, r0
   13408:	cmp	r3, #1
   1340c:	moveq	r3, #1
   13410:	movne	r3, #0
   13414:	strb	r3, [fp, #-57]	; 0xffffffc7
   13418:	ldr	r3, [fp, #8]
   1341c:	and	r3, r3, #2
   13420:	cmp	r3, #0
   13424:	movne	r3, #1
   13428:	moveq	r3, #0
   1342c:	strb	r3, [fp, #-34]	; 0xffffffde
   13430:	mov	r3, #0
   13434:	strb	r3, [fp, #-35]	; 0xffffffdd
   13438:	mov	r3, #0
   1343c:	strb	r3, [fp, #-36]	; 0xffffffdc
   13440:	mov	r3, #1
   13444:	strb	r3, [fp, #-37]	; 0xffffffdb
   13448:	ldr	r3, [fp, #4]
   1344c:	cmp	r3, #10
   13450:	ldrls	pc, [pc, r3, lsl #2]
   13454:	b	1365c <__assert_fail@plt+0x2768>
   13458:	andeq	r3, r1, r0, asr r6
   1345c:	andeq	r3, r1, ip, asr #11
   13460:	strdeq	r3, [r1], -r0
   13464:	andeq	r3, r1, r4, asr #11
   13468:	ldrdeq	r3, [r1], -r4
   1346c:	muleq	r1, r4, r4
   13470:	andeq	r3, r1, r4, lsl #9
   13474:	strdeq	r3, [r1], -r4
   13478:	andeq	r3, r1, r8, lsl #10
   1347c:	andeq	r3, r1, r8, lsl #10
   13480:	andeq	r3, r1, r8, lsl #10
   13484:	mov	r3, #5
   13488:	str	r3, [fp, #4]
   1348c:	mov	r3, #1
   13490:	strb	r3, [fp, #-34]	; 0xffffffde
   13494:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13498:	eor	r3, r3, #1
   1349c:	uxtb	r3, r3
   134a0:	cmp	r3, #0
   134a4:	beq	134d8 <__assert_fail@plt+0x25e4>
   134a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   134ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134b0:	cmp	r2, r3
   134b4:	bcs	134cc <__assert_fail@plt+0x25d8>
   134b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   134c0:	add	r3, r2, r3
   134c4:	mov	r2, #34	; 0x22
   134c8:	strb	r2, [r3]
   134cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   134d0:	add	r3, r3, #1
   134d4:	str	r3, [fp, #-20]	; 0xffffffec
   134d8:	mov	r3, #1
   134dc:	strb	r3, [fp, #-33]	; 0xffffffdf
   134e0:	ldr	r3, [pc, #3872]	; 14408 <__assert_fail@plt+0x3514>
   134e4:	str	r3, [fp, #-28]	; 0xffffffe4
   134e8:	mov	r3, #1
   134ec:	str	r3, [fp, #-32]	; 0xffffffe0
   134f0:	b	13660 <__assert_fail@plt+0x276c>
   134f4:	mov	r3, #1
   134f8:	strb	r3, [fp, #-33]	; 0xffffffdf
   134fc:	mov	r3, #0
   13500:	strb	r3, [fp, #-34]	; 0xffffffde
   13504:	b	13660 <__assert_fail@plt+0x276c>
   13508:	ldr	r3, [fp, #4]
   1350c:	cmp	r3, #10
   13510:	beq	13534 <__assert_fail@plt+0x2640>
   13514:	ldr	r1, [fp, #4]
   13518:	ldr	r0, [pc, #3820]	; 1440c <__assert_fail@plt+0x3518>
   1351c:	bl	132c8 <__assert_fail@plt+0x23d4>
   13520:	str	r0, [fp, #16]
   13524:	ldr	r1, [fp, #4]
   13528:	ldr	r0, [pc, #3808]	; 14410 <__assert_fail@plt+0x351c>
   1352c:	bl	132c8 <__assert_fail@plt+0x23d4>
   13530:	str	r0, [fp, #20]
   13534:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13538:	eor	r3, r3, #1
   1353c:	uxtb	r3, r3
   13540:	cmp	r3, #0
   13544:	beq	135a4 <__assert_fail@plt+0x26b0>
   13548:	ldr	r3, [fp, #16]
   1354c:	str	r3, [fp, #-28]	; 0xffffffe4
   13550:	b	13594 <__assert_fail@plt+0x26a0>
   13554:	ldr	r2, [fp, #-20]	; 0xffffffec
   13558:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1355c:	cmp	r2, r3
   13560:	bcs	1357c <__assert_fail@plt+0x2688>
   13564:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13568:	ldr	r3, [fp, #-20]	; 0xffffffec
   1356c:	add	r3, r2, r3
   13570:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13574:	ldrb	r2, [r2]
   13578:	strb	r2, [r3]
   1357c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13580:	add	r3, r3, #1
   13584:	str	r3, [fp, #-20]	; 0xffffffec
   13588:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1358c:	add	r3, r3, #1
   13590:	str	r3, [fp, #-28]	; 0xffffffe4
   13594:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13598:	ldrb	r3, [r3]
   1359c:	cmp	r3, #0
   135a0:	bne	13554 <__assert_fail@plt+0x2660>
   135a4:	mov	r3, #1
   135a8:	strb	r3, [fp, #-33]	; 0xffffffdf
   135ac:	ldr	r3, [fp, #20]
   135b0:	str	r3, [fp, #-28]	; 0xffffffe4
   135b4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   135b8:	bl	10e1c <strlen@plt>
   135bc:	str	r0, [fp, #-32]	; 0xffffffe0
   135c0:	b	13660 <__assert_fail@plt+0x276c>
   135c4:	mov	r3, #1
   135c8:	strb	r3, [fp, #-33]	; 0xffffffdf
   135cc:	mov	r3, #1
   135d0:	strb	r3, [fp, #-34]	; 0xffffffde
   135d4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135d8:	eor	r3, r3, #1
   135dc:	uxtb	r3, r3
   135e0:	cmp	r3, #0
   135e4:	beq	135f0 <__assert_fail@plt+0x26fc>
   135e8:	mov	r3, #1
   135ec:	strb	r3, [fp, #-33]	; 0xffffffdf
   135f0:	mov	r3, #2
   135f4:	str	r3, [fp, #4]
   135f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135fc:	eor	r3, r3, #1
   13600:	uxtb	r3, r3
   13604:	cmp	r3, #0
   13608:	beq	1363c <__assert_fail@plt+0x2748>
   1360c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13610:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13614:	cmp	r2, r3
   13618:	bcs	13630 <__assert_fail@plt+0x273c>
   1361c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13620:	ldr	r3, [fp, #-20]	; 0xffffffec
   13624:	add	r3, r2, r3
   13628:	mov	r2, #39	; 0x27
   1362c:	strb	r2, [r3]
   13630:	ldr	r3, [fp, #-20]	; 0xffffffec
   13634:	add	r3, r3, #1
   13638:	str	r3, [fp, #-20]	; 0xffffffec
   1363c:	ldr	r3, [pc, #3532]	; 14410 <__assert_fail@plt+0x351c>
   13640:	str	r3, [fp, #-28]	; 0xffffffe4
   13644:	mov	r3, #1
   13648:	str	r3, [fp, #-32]	; 0xffffffe0
   1364c:	b	13660 <__assert_fail@plt+0x276c>
   13650:	mov	r3, #0
   13654:	strb	r3, [fp, #-34]	; 0xffffffde
   13658:	b	13660 <__assert_fail@plt+0x276c>
   1365c:	bl	10ed0 <abort@plt>
   13660:	mov	r3, #0
   13664:	str	r3, [fp, #-16]
   13668:	b	147f8 <__assert_fail@plt+0x3904>
   1366c:	mov	r3, #0
   13670:	strb	r3, [fp, #-40]	; 0xffffffd8
   13674:	mov	r3, #0
   13678:	strb	r3, [fp, #-41]	; 0xffffffd7
   1367c:	mov	r3, #0
   13680:	strb	r3, [fp, #-42]	; 0xffffffd6
   13684:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13688:	cmp	r3, #0
   1368c:	beq	13728 <__assert_fail@plt+0x2834>
   13690:	ldr	r3, [fp, #4]
   13694:	cmp	r3, #2
   13698:	beq	13728 <__assert_fail@plt+0x2834>
   1369c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   136a0:	cmp	r3, #0
   136a4:	beq	13728 <__assert_fail@plt+0x2834>
   136a8:	ldr	r2, [fp, #-16]
   136ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   136b0:	add	r4, r2, r3
   136b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   136b8:	cmn	r3, #1
   136bc:	bne	136e0 <__assert_fail@plt+0x27ec>
   136c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   136c4:	cmp	r3, #1
   136c8:	bls	136e0 <__assert_fail@plt+0x27ec>
   136cc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   136d0:	bl	10e1c <strlen@plt>
   136d4:	str	r0, [fp, #-100]	; 0xffffff9c
   136d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   136dc:	b	136e4 <__assert_fail@plt+0x27f0>
   136e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   136e4:	cmp	r4, r3
   136e8:	bhi	13728 <__assert_fail@plt+0x2834>
   136ec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   136f0:	ldr	r3, [fp, #-16]
   136f4:	add	r3, r2, r3
   136f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   136fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13700:	mov	r0, r3
   13704:	bl	10d20 <memcmp@plt>
   13708:	mov	r3, r0
   1370c:	cmp	r3, #0
   13710:	bne	13728 <__assert_fail@plt+0x2834>
   13714:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13718:	cmp	r3, #0
   1371c:	bne	149b4 <__assert_fail@plt+0x3ac0>
   13720:	mov	r3, #1
   13724:	strb	r3, [fp, #-40]	; 0xffffffd8
   13728:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1372c:	ldr	r3, [fp, #-16]
   13730:	add	r3, r2, r3
   13734:	ldrb	r3, [r3]
   13738:	strb	r3, [fp, #-38]	; 0xffffffda
   1373c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13740:	cmp	r3, #126	; 0x7e
   13744:	ldrls	pc, [pc, r3, lsl #2]
   13748:	b	13f74 <__assert_fail@plt+0x3080>
   1374c:	andeq	r3, r1, r8, asr #18
   13750:	andeq	r3, r1, r4, ror pc
   13754:	andeq	r3, r1, r4, ror pc
   13758:	andeq	r3, r1, r4, ror pc
   1375c:	andeq	r3, r1, r4, ror pc
   13760:	andeq	r3, r1, r4, ror pc
   13764:	andeq	r3, r1, r4, ror pc
   13768:	andeq	r3, r1, r8, lsr sp
   1376c:	andeq	r3, r1, r4, asr #26
   13770:	andeq	r3, r1, r4, ror sp
   13774:	andeq	r3, r1, ip, asr sp
   13778:	andeq	r3, r1, r0, lsl #27
   1377c:	andeq	r3, r1, r0, asr sp
   13780:	andeq	r3, r1, r8, ror #26
   13784:	andeq	r3, r1, r4, ror pc
   13788:	andeq	r3, r1, r4, ror pc
   1378c:	andeq	r3, r1, r4, ror pc
   13790:	andeq	r3, r1, r4, ror pc
   13794:	andeq	r3, r1, r4, ror pc
   13798:	andeq	r3, r1, r4, ror pc
   1379c:	andeq	r3, r1, r4, ror pc
   137a0:	andeq	r3, r1, r4, ror pc
   137a4:	andeq	r3, r1, r4, ror pc
   137a8:	andeq	r3, r1, r4, ror pc
   137ac:	andeq	r3, r1, r4, ror pc
   137b0:	andeq	r3, r1, r4, ror pc
   137b4:	andeq	r3, r1, r4, ror pc
   137b8:	andeq	r3, r1, r4, ror pc
   137bc:	andeq	r3, r1, r4, ror pc
   137c0:	andeq	r3, r1, r4, ror pc
   137c4:	andeq	r3, r1, r4, ror pc
   137c8:	andeq	r3, r1, r4, ror pc
   137cc:	andeq	r3, r1, r8, asr lr
   137d0:	andeq	r3, r1, r0, ror #28
   137d4:	andeq	r3, r1, r0, ror #28
   137d8:	andeq	r3, r1, ip, asr #28
   137dc:	andeq	r3, r1, r0, ror #28
   137e0:	andeq	r3, r1, r8, ror #30
   137e4:	andeq	r3, r1, r0, ror #28
   137e8:	andeq	r3, r1, ip, ror lr
   137ec:	andeq	r3, r1, r0, ror #28
   137f0:	andeq	r3, r1, r0, ror #28
   137f4:	andeq	r3, r1, r0, ror #28
   137f8:	andeq	r3, r1, r8, ror #30
   137fc:	andeq	r3, r1, r8, ror #30
   13800:	andeq	r3, r1, r8, ror #30
   13804:	andeq	r3, r1, r8, ror #30
   13808:	andeq	r3, r1, r8, ror #30
   1380c:	andeq	r3, r1, r8, ror #30
   13810:	andeq	r3, r1, r8, ror #30
   13814:	andeq	r3, r1, r8, ror #30
   13818:	andeq	r3, r1, r8, ror #30
   1381c:	andeq	r3, r1, r8, ror #30
   13820:	andeq	r3, r1, r8, ror #30
   13824:	andeq	r3, r1, r8, ror #30
   13828:	andeq	r3, r1, r8, ror #30
   1382c:	andeq	r3, r1, r8, ror #30
   13830:	andeq	r3, r1, r8, ror #30
   13834:	andeq	r3, r1, r8, ror #30
   13838:	andeq	r3, r1, r0, ror #28
   1383c:	andeq	r3, r1, r0, ror #28
   13840:	andeq	r3, r1, r0, ror #28
   13844:	andeq	r3, r1, r0, ror #28
   13848:	andeq	r3, r1, r8, lsr #22
   1384c:	andeq	r3, r1, r4, ror pc
   13850:	andeq	r3, r1, r8, ror #30
   13854:	andeq	r3, r1, r8, ror #30
   13858:	andeq	r3, r1, r8, ror #30
   1385c:	andeq	r3, r1, r8, ror #30
   13860:	andeq	r3, r1, r8, ror #30
   13864:	andeq	r3, r1, r8, ror #30
   13868:	andeq	r3, r1, r8, ror #30
   1386c:	andeq	r3, r1, r8, ror #30
   13870:	andeq	r3, r1, r8, ror #30
   13874:	andeq	r3, r1, r8, ror #30
   13878:	andeq	r3, r1, r8, ror #30
   1387c:	andeq	r3, r1, r8, ror #30
   13880:	andeq	r3, r1, r8, ror #30
   13884:	andeq	r3, r1, r8, ror #30
   13888:	andeq	r3, r1, r8, ror #30
   1388c:	andeq	r3, r1, r8, ror #30
   13890:	andeq	r3, r1, r8, ror #30
   13894:	andeq	r3, r1, r8, ror #30
   13898:	andeq	r3, r1, r8, ror #30
   1389c:	andeq	r3, r1, r8, ror #30
   138a0:	andeq	r3, r1, r8, ror #30
   138a4:	andeq	r3, r1, r8, ror #30
   138a8:	andeq	r3, r1, r8, ror #30
   138ac:	andeq	r3, r1, r8, ror #30
   138b0:	andeq	r3, r1, r8, ror #30
   138b4:	andeq	r3, r1, r8, ror #30
   138b8:	andeq	r3, r1, r0, ror #28
   138bc:	andeq	r3, r1, ip, lsl #27
   138c0:	andeq	r3, r1, r8, ror #30
   138c4:	andeq	r3, r1, r0, ror #28
   138c8:	andeq	r3, r1, r8, ror #30
   138cc:	andeq	r3, r1, r0, ror #28
   138d0:	andeq	r3, r1, r8, ror #30
   138d4:	andeq	r3, r1, r8, ror #30
   138d8:	andeq	r3, r1, r8, ror #30
   138dc:	andeq	r3, r1, r8, ror #30
   138e0:	andeq	r3, r1, r8, ror #30
   138e4:	andeq	r3, r1, r8, ror #30
   138e8:	andeq	r3, r1, r8, ror #30
   138ec:	andeq	r3, r1, r8, ror #30
   138f0:	andeq	r3, r1, r8, ror #30
   138f4:	andeq	r3, r1, r8, ror #30
   138f8:	andeq	r3, r1, r8, ror #30
   138fc:	andeq	r3, r1, r8, ror #30
   13900:	andeq	r3, r1, r8, ror #30
   13904:	andeq	r3, r1, r8, ror #30
   13908:	andeq	r3, r1, r8, ror #30
   1390c:	andeq	r3, r1, r8, ror #30
   13910:	andeq	r3, r1, r8, ror #30
   13914:	andeq	r3, r1, r8, ror #30
   13918:	andeq	r3, r1, r8, ror #30
   1391c:	andeq	r3, r1, r8, ror #30
   13920:	andeq	r3, r1, r8, ror #30
   13924:	andeq	r3, r1, r8, ror #30
   13928:	andeq	r3, r1, r8, ror #30
   1392c:	andeq	r3, r1, r8, ror #30
   13930:	andeq	r3, r1, r8, ror #30
   13934:	andeq	r3, r1, r8, ror #30
   13938:	andeq	r3, r1, r4, lsl #28
   1393c:	andeq	r3, r1, r0, ror #28
   13940:	andeq	r3, r1, r4, lsl #28
   13944:	andeq	r3, r1, ip, asr #28
   13948:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1394c:	cmp	r3, #0
   13950:	beq	13b14 <__assert_fail@plt+0x2c20>
   13954:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13958:	cmp	r3, #0
   1395c:	bne	149bc <__assert_fail@plt+0x3ac8>
   13960:	mov	r3, #1
   13964:	strb	r3, [fp, #-41]	; 0xffffffd7
   13968:	ldr	r3, [fp, #4]
   1396c:	cmp	r3, #2
   13970:	bne	13a20 <__assert_fail@plt+0x2b2c>
   13974:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13978:	eor	r3, r3, #1
   1397c:	uxtb	r3, r3
   13980:	cmp	r3, #0
   13984:	beq	13a20 <__assert_fail@plt+0x2b2c>
   13988:	ldr	r2, [fp, #-20]	; 0xffffffec
   1398c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13990:	cmp	r2, r3
   13994:	bcs	139ac <__assert_fail@plt+0x2ab8>
   13998:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1399c:	ldr	r3, [fp, #-20]	; 0xffffffec
   139a0:	add	r3, r2, r3
   139a4:	mov	r2, #39	; 0x27
   139a8:	strb	r2, [r3]
   139ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   139b0:	add	r3, r3, #1
   139b4:	str	r3, [fp, #-20]	; 0xffffffec
   139b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   139bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139c0:	cmp	r2, r3
   139c4:	bcs	139dc <__assert_fail@plt+0x2ae8>
   139c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   139d0:	add	r3, r2, r3
   139d4:	mov	r2, #36	; 0x24
   139d8:	strb	r2, [r3]
   139dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   139e0:	add	r3, r3, #1
   139e4:	str	r3, [fp, #-20]	; 0xffffffec
   139e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   139ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139f0:	cmp	r2, r3
   139f4:	bcs	13a0c <__assert_fail@plt+0x2b18>
   139f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a00:	add	r3, r2, r3
   13a04:	mov	r2, #39	; 0x27
   13a08:	strb	r2, [r3]
   13a0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a10:	add	r3, r3, #1
   13a14:	str	r3, [fp, #-20]	; 0xffffffec
   13a18:	mov	r3, #1
   13a1c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13a20:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a28:	cmp	r2, r3
   13a2c:	bcs	13a44 <__assert_fail@plt+0x2b50>
   13a30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a38:	add	r3, r2, r3
   13a3c:	mov	r2, #92	; 0x5c
   13a40:	strb	r2, [r3]
   13a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a48:	add	r3, r3, #1
   13a4c:	str	r3, [fp, #-20]	; 0xffffffec
   13a50:	ldr	r3, [fp, #4]
   13a54:	cmp	r3, #2
   13a58:	beq	13b08 <__assert_fail@plt+0x2c14>
   13a5c:	ldr	r3, [fp, #-16]
   13a60:	add	r2, r3, #1
   13a64:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13a68:	cmp	r2, r3
   13a6c:	bcs	13b08 <__assert_fail@plt+0x2c14>
   13a70:	ldr	r3, [fp, #-16]
   13a74:	add	r3, r3, #1
   13a78:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13a7c:	add	r3, r2, r3
   13a80:	ldrb	r3, [r3]
   13a84:	cmp	r3, #47	; 0x2f
   13a88:	bls	13b08 <__assert_fail@plt+0x2c14>
   13a8c:	ldr	r3, [fp, #-16]
   13a90:	add	r3, r3, #1
   13a94:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13a98:	add	r3, r2, r3
   13a9c:	ldrb	r3, [r3]
   13aa0:	cmp	r3, #57	; 0x39
   13aa4:	bhi	13b08 <__assert_fail@plt+0x2c14>
   13aa8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13aac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ab0:	cmp	r2, r3
   13ab4:	bcs	13acc <__assert_fail@plt+0x2bd8>
   13ab8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13abc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ac0:	add	r3, r2, r3
   13ac4:	mov	r2, #48	; 0x30
   13ac8:	strb	r2, [r3]
   13acc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ad0:	add	r3, r3, #1
   13ad4:	str	r3, [fp, #-20]	; 0xffffffec
   13ad8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13adc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ae0:	cmp	r2, r3
   13ae4:	bcs	13afc <__assert_fail@plt+0x2c08>
   13ae8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13aec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13af0:	add	r3, r2, r3
   13af4:	mov	r2, #48	; 0x30
   13af8:	strb	r2, [r3]
   13afc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b00:	add	r3, r3, #1
   13b04:	str	r3, [fp, #-20]	; 0xffffffec
   13b08:	mov	r3, #48	; 0x30
   13b0c:	strb	r3, [fp, #-38]	; 0xffffffda
   13b10:	b	14550 <__assert_fail@plt+0x365c>
   13b14:	ldr	r3, [fp, #8]
   13b18:	and	r3, r3, #1
   13b1c:	cmp	r3, #0
   13b20:	beq	14550 <__assert_fail@plt+0x365c>
   13b24:	b	147ec <__assert_fail@plt+0x38f8>
   13b28:	ldr	r3, [fp, #4]
   13b2c:	cmp	r3, #2
   13b30:	beq	13b40 <__assert_fail@plt+0x2c4c>
   13b34:	cmp	r3, #5
   13b38:	beq	13b50 <__assert_fail@plt+0x2c5c>
   13b3c:	b	13d34 <__assert_fail@plt+0x2e40>
   13b40:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b44:	cmp	r3, #0
   13b48:	beq	13d28 <__assert_fail@plt+0x2e34>
   13b4c:	b	149f8 <__assert_fail@plt+0x3b04>
   13b50:	ldr	r3, [fp, #8]
   13b54:	and	r3, r3, #4
   13b58:	cmp	r3, #0
   13b5c:	beq	13d30 <__assert_fail@plt+0x2e3c>
   13b60:	ldr	r3, [fp, #-16]
   13b64:	add	r2, r3, #2
   13b68:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13b6c:	cmp	r2, r3
   13b70:	bcs	13d30 <__assert_fail@plt+0x2e3c>
   13b74:	ldr	r3, [fp, #-16]
   13b78:	add	r3, r3, #1
   13b7c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13b80:	add	r3, r2, r3
   13b84:	ldrb	r3, [r3]
   13b88:	cmp	r3, #63	; 0x3f
   13b8c:	bne	13d30 <__assert_fail@plt+0x2e3c>
   13b90:	ldr	r3, [fp, #-16]
   13b94:	add	r3, r3, #2
   13b98:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13b9c:	add	r3, r2, r3
   13ba0:	ldrb	r3, [r3]
   13ba4:	sub	r3, r3, #33	; 0x21
   13ba8:	cmp	r3, #29
   13bac:	ldrls	pc, [pc, r3, lsl #2]
   13bb0:	b	13d20 <__assert_fail@plt+0x2e2c>
   13bb4:	andeq	r3, r1, ip, lsr #24
   13bb8:	andeq	r3, r1, r0, lsr #26
   13bbc:	andeq	r3, r1, r0, lsr #26
   13bc0:	andeq	r3, r1, r0, lsr #26
   13bc4:	andeq	r3, r1, r0, lsr #26
   13bc8:	andeq	r3, r1, r0, lsr #26
   13bcc:	andeq	r3, r1, ip, lsr #24
   13bd0:	andeq	r3, r1, ip, lsr #24
   13bd4:	andeq	r3, r1, ip, lsr #24
   13bd8:	andeq	r3, r1, r0, lsr #26
   13bdc:	andeq	r3, r1, r0, lsr #26
   13be0:	andeq	r3, r1, r0, lsr #26
   13be4:	andeq	r3, r1, ip, lsr #24
   13be8:	andeq	r3, r1, r0, lsr #26
   13bec:	andeq	r3, r1, ip, lsr #24
   13bf0:	andeq	r3, r1, r0, lsr #26
   13bf4:	andeq	r3, r1, r0, lsr #26
   13bf8:	andeq	r3, r1, r0, lsr #26
   13bfc:	andeq	r3, r1, r0, lsr #26
   13c00:	andeq	r3, r1, r0, lsr #26
   13c04:	andeq	r3, r1, r0, lsr #26
   13c08:	andeq	r3, r1, r0, lsr #26
   13c0c:	andeq	r3, r1, r0, lsr #26
   13c10:	andeq	r3, r1, r0, lsr #26
   13c14:	andeq	r3, r1, r0, lsr #26
   13c18:	andeq	r3, r1, r0, lsr #26
   13c1c:	andeq	r3, r1, r0, lsr #26
   13c20:	andeq	r3, r1, ip, lsr #24
   13c24:	andeq	r3, r1, ip, lsr #24
   13c28:	andeq	r3, r1, ip, lsr #24
   13c2c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13c30:	cmp	r3, #0
   13c34:	bne	149c4 <__assert_fail@plt+0x3ad0>
   13c38:	ldr	r3, [fp, #-16]
   13c3c:	add	r3, r3, #2
   13c40:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13c44:	add	r3, r2, r3
   13c48:	ldrb	r3, [r3]
   13c4c:	strb	r3, [fp, #-38]	; 0xffffffda
   13c50:	ldr	r3, [fp, #-16]
   13c54:	add	r3, r3, #2
   13c58:	str	r3, [fp, #-16]
   13c5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c64:	cmp	r2, r3
   13c68:	bcs	13c80 <__assert_fail@plt+0x2d8c>
   13c6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c70:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c74:	add	r3, r2, r3
   13c78:	mov	r2, #63	; 0x3f
   13c7c:	strb	r2, [r3]
   13c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c84:	add	r3, r3, #1
   13c88:	str	r3, [fp, #-20]	; 0xffffffec
   13c8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c94:	cmp	r2, r3
   13c98:	bcs	13cb0 <__assert_fail@plt+0x2dbc>
   13c9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ca0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ca4:	add	r3, r2, r3
   13ca8:	mov	r2, #34	; 0x22
   13cac:	strb	r2, [r3]
   13cb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cb4:	add	r3, r3, #1
   13cb8:	str	r3, [fp, #-20]	; 0xffffffec
   13cbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cc0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13cc4:	cmp	r2, r3
   13cc8:	bcs	13ce0 <__assert_fail@plt+0x2dec>
   13ccc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cd4:	add	r3, r2, r3
   13cd8:	mov	r2, #34	; 0x22
   13cdc:	strb	r2, [r3]
   13ce0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ce4:	add	r3, r3, #1
   13ce8:	str	r3, [fp, #-20]	; 0xffffffec
   13cec:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cf0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13cf4:	cmp	r2, r3
   13cf8:	bcs	13d10 <__assert_fail@plt+0x2e1c>
   13cfc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d00:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d04:	add	r3, r2, r3
   13d08:	mov	r2, #63	; 0x3f
   13d0c:	strb	r2, [r3]
   13d10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d14:	add	r3, r3, #1
   13d18:	str	r3, [fp, #-20]	; 0xffffffec
   13d1c:	b	13d24 <__assert_fail@plt+0x2e30>
   13d20:	nop			; (mov r0, r0)
   13d24:	b	13d30 <__assert_fail@plt+0x2e3c>
   13d28:	nop			; (mov r0, r0)
   13d2c:	b	1457c <__assert_fail@plt+0x3688>
   13d30:	nop			; (mov r0, r0)
   13d34:	b	1457c <__assert_fail@plt+0x3688>
   13d38:	mov	r3, #97	; 0x61
   13d3c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d40:	b	13dec <__assert_fail@plt+0x2ef8>
   13d44:	mov	r3, #98	; 0x62
   13d48:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d4c:	b	13dec <__assert_fail@plt+0x2ef8>
   13d50:	mov	r3, #102	; 0x66
   13d54:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d58:	b	13dec <__assert_fail@plt+0x2ef8>
   13d5c:	mov	r3, #110	; 0x6e
   13d60:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d64:	b	13dd4 <__assert_fail@plt+0x2ee0>
   13d68:	mov	r3, #114	; 0x72
   13d6c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d70:	b	13dd4 <__assert_fail@plt+0x2ee0>
   13d74:	mov	r3, #116	; 0x74
   13d78:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d7c:	b	13dd4 <__assert_fail@plt+0x2ee0>
   13d80:	mov	r3, #118	; 0x76
   13d84:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d88:	b	13dec <__assert_fail@plt+0x2ef8>
   13d8c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13d90:	strb	r3, [fp, #-39]	; 0xffffffd9
   13d94:	ldr	r3, [fp, #4]
   13d98:	cmp	r3, #2
   13d9c:	bne	13db0 <__assert_fail@plt+0x2ebc>
   13da0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13da4:	cmp	r3, #0
   13da8:	beq	14704 <__assert_fail@plt+0x3810>
   13dac:	b	149f8 <__assert_fail@plt+0x3b04>
   13db0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13db4:	cmp	r3, #0
   13db8:	beq	13dd4 <__assert_fail@plt+0x2ee0>
   13dbc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13dc0:	cmp	r3, #0
   13dc4:	beq	13dd4 <__assert_fail@plt+0x2ee0>
   13dc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13dcc:	cmp	r3, #0
   13dd0:	bne	1470c <__assert_fail@plt+0x3818>
   13dd4:	ldr	r3, [fp, #4]
   13dd8:	cmp	r3, #2
   13ddc:	bne	13dec <__assert_fail@plt+0x2ef8>
   13de0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13de4:	cmp	r3, #0
   13de8:	bne	149cc <__assert_fail@plt+0x3ad8>
   13dec:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13df0:	cmp	r3, #0
   13df4:	beq	14558 <__assert_fail@plt+0x3664>
   13df8:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   13dfc:	strb	r3, [fp, #-38]	; 0xffffffda
   13e00:	b	14604 <__assert_fail@plt+0x3710>
   13e04:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13e08:	cmn	r3, #1
   13e0c:	bne	13e30 <__assert_fail@plt+0x2f3c>
   13e10:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13e14:	add	r3, r3, #1
   13e18:	ldrb	r3, [r3]
   13e1c:	cmp	r3, #0
   13e20:	movne	r3, #1
   13e24:	moveq	r3, #0
   13e28:	uxtb	r3, r3
   13e2c:	b	13e44 <__assert_fail@plt+0x2f50>
   13e30:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13e34:	cmp	r3, #1
   13e38:	movne	r3, #1
   13e3c:	moveq	r3, #0
   13e40:	uxtb	r3, r3
   13e44:	cmp	r3, #0
   13e48:	bne	14560 <__assert_fail@plt+0x366c>
   13e4c:	ldr	r3, [fp, #-16]
   13e50:	cmp	r3, #0
   13e54:	bne	14568 <__assert_fail@plt+0x3674>
   13e58:	mov	r3, #1
   13e5c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13e60:	ldr	r3, [fp, #4]
   13e64:	cmp	r3, #2
   13e68:	bne	14570 <__assert_fail@plt+0x367c>
   13e6c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e70:	cmp	r3, #0
   13e74:	beq	14570 <__assert_fail@plt+0x367c>
   13e78:	b	149f8 <__assert_fail@plt+0x3b04>
   13e7c:	mov	r3, #1
   13e80:	strb	r3, [fp, #-36]	; 0xffffffdc
   13e84:	mov	r3, #1
   13e88:	strb	r3, [fp, #-42]	; 0xffffffd6
   13e8c:	ldr	r3, [fp, #4]
   13e90:	cmp	r3, #2
   13e94:	bne	14578 <__assert_fail@plt+0x3684>
   13e98:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e9c:	cmp	r3, #0
   13ea0:	bne	149d4 <__assert_fail@plt+0x3ae0>
   13ea4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ea8:	cmp	r3, #0
   13eac:	beq	13ecc <__assert_fail@plt+0x2fd8>
   13eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13eb4:	cmp	r3, #0
   13eb8:	bne	13ecc <__assert_fail@plt+0x2fd8>
   13ebc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ec0:	str	r3, [fp, #-24]	; 0xffffffe8
   13ec4:	mov	r3, #0
   13ec8:	str	r3, [fp, #-92]	; 0xffffffa4
   13ecc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ed0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ed4:	cmp	r2, r3
   13ed8:	bcs	13ef0 <__assert_fail@plt+0x2ffc>
   13edc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ee4:	add	r3, r2, r3
   13ee8:	mov	r2, #39	; 0x27
   13eec:	strb	r2, [r3]
   13ef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ef4:	add	r3, r3, #1
   13ef8:	str	r3, [fp, #-20]	; 0xffffffec
   13efc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f04:	cmp	r2, r3
   13f08:	bcs	13f20 <__assert_fail@plt+0x302c>
   13f0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f14:	add	r3, r2, r3
   13f18:	mov	r2, #92	; 0x5c
   13f1c:	strb	r2, [r3]
   13f20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f24:	add	r3, r3, #1
   13f28:	str	r3, [fp, #-20]	; 0xffffffec
   13f2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f34:	cmp	r2, r3
   13f38:	bcs	13f50 <__assert_fail@plt+0x305c>
   13f3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f40:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f44:	add	r3, r2, r3
   13f48:	mov	r2, #39	; 0x27
   13f4c:	strb	r2, [r3]
   13f50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f54:	add	r3, r3, #1
   13f58:	str	r3, [fp, #-20]	; 0xffffffec
   13f5c:	mov	r3, #0
   13f60:	strb	r3, [fp, #-35]	; 0xffffffdd
   13f64:	b	14578 <__assert_fail@plt+0x3684>
   13f68:	mov	r3, #1
   13f6c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13f70:	b	1457c <__assert_fail@plt+0x3688>
   13f74:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13f78:	cmp	r3, #0
   13f7c:	beq	13fbc <__assert_fail@plt+0x30c8>
   13f80:	mov	r3, #1
   13f84:	str	r3, [fp, #-48]	; 0xffffffd0
   13f88:	bl	10df8 <__ctype_b_loc@plt>
   13f8c:	mov	r3, r0
   13f90:	ldr	r2, [r3]
   13f94:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13f98:	lsl	r3, r3, #1
   13f9c:	add	r3, r2, r3
   13fa0:	ldrh	r3, [r3]
   13fa4:	and	r3, r3, #16384	; 0x4000
   13fa8:	cmp	r3, #0
   13fac:	movne	r3, #1
   13fb0:	moveq	r3, #0
   13fb4:	strb	r3, [fp, #-49]	; 0xffffffcf
   13fb8:	b	14208 <__assert_fail@plt+0x3314>
   13fbc:	sub	r3, fp, #76	; 0x4c
   13fc0:	mov	r2, #8
   13fc4:	mov	r1, #0
   13fc8:	mov	r0, r3
   13fcc:	bl	10e4c <memset@plt>
   13fd0:	mov	r3, #0
   13fd4:	str	r3, [fp, #-48]	; 0xffffffd0
   13fd8:	mov	r3, #1
   13fdc:	strb	r3, [fp, #-49]	; 0xffffffcf
   13fe0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13fe4:	cmn	r3, #1
   13fe8:	bne	13ff8 <__assert_fail@plt+0x3104>
   13fec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13ff0:	bl	10e1c <strlen@plt>
   13ff4:	str	r0, [fp, #-100]	; 0xffffff9c
   13ff8:	ldr	r2, [fp, #-16]
   13ffc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14000:	add	r3, r2, r3
   14004:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14008:	add	r1, r2, r3
   1400c:	ldr	r2, [fp, #-16]
   14010:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14014:	add	r3, r2, r3
   14018:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1401c:	sub	r2, r2, r3
   14020:	sub	r3, fp, #76	; 0x4c
   14024:	sub	r0, fp, #80	; 0x50
   14028:	bl	16e94 <__assert_fail@plt+0x5fa0>
   1402c:	str	r0, [fp, #-64]	; 0xffffffc0
   14030:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14034:	cmp	r3, #0
   14038:	beq	141fc <__assert_fail@plt+0x3308>
   1403c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14040:	cmn	r3, #1
   14044:	bne	14054 <__assert_fail@plt+0x3160>
   14048:	mov	r3, #0
   1404c:	strb	r3, [fp, #-49]	; 0xffffffcf
   14050:	b	14208 <__assert_fail@plt+0x3314>
   14054:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14058:	cmn	r3, #2
   1405c:	bne	140b4 <__assert_fail@plt+0x31c0>
   14060:	mov	r3, #0
   14064:	strb	r3, [fp, #-49]	; 0xffffffcf
   14068:	b	14078 <__assert_fail@plt+0x3184>
   1406c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14070:	add	r3, r3, #1
   14074:	str	r3, [fp, #-48]	; 0xffffffd0
   14078:	ldr	r2, [fp, #-16]
   1407c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14080:	add	r2, r2, r3
   14084:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14088:	cmp	r2, r3
   1408c:	bcs	14204 <__assert_fail@plt+0x3310>
   14090:	ldr	r2, [fp, #-16]
   14094:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14098:	add	r3, r2, r3
   1409c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   140a0:	add	r3, r2, r3
   140a4:	ldrb	r3, [r3]
   140a8:	cmp	r3, #0
   140ac:	bne	1406c <__assert_fail@plt+0x3178>
   140b0:	b	14204 <__assert_fail@plt+0x3310>
   140b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   140b8:	cmp	r3, #0
   140bc:	beq	141b0 <__assert_fail@plt+0x32bc>
   140c0:	ldr	r3, [fp, #4]
   140c4:	cmp	r3, #2
   140c8:	bne	141b0 <__assert_fail@plt+0x32bc>
   140cc:	mov	r3, #1
   140d0:	str	r3, [fp, #-56]	; 0xffffffc8
   140d4:	b	141a0 <__assert_fail@plt+0x32ac>
   140d8:	ldr	r2, [fp, #-16]
   140dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   140e0:	add	r2, r2, r3
   140e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   140e8:	add	r3, r2, r3
   140ec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   140f0:	add	r3, r2, r3
   140f4:	ldrb	r3, [r3]
   140f8:	sub	r3, r3, #91	; 0x5b
   140fc:	cmp	r3, #33	; 0x21
   14100:	ldrls	pc, [pc, r3, lsl #2]
   14104:	b	14190 <__assert_fail@plt+0x329c>
   14108:	ldrdeq	r4, [r1], -ip
   1410c:	ldrdeq	r4, [r1], -ip
   14110:	muleq	r1, r0, r1
   14114:	ldrdeq	r4, [r1], -ip
   14118:	muleq	r1, r0, r1
   1411c:	ldrdeq	r4, [r1], -ip
   14120:	muleq	r1, r0, r1
   14124:	muleq	r1, r0, r1
   14128:	muleq	r1, r0, r1
   1412c:	muleq	r1, r0, r1
   14130:	muleq	r1, r0, r1
   14134:	muleq	r1, r0, r1
   14138:	muleq	r1, r0, r1
   1413c:	muleq	r1, r0, r1
   14140:	muleq	r1, r0, r1
   14144:	muleq	r1, r0, r1
   14148:	muleq	r1, r0, r1
   1414c:	muleq	r1, r0, r1
   14150:	muleq	r1, r0, r1
   14154:	muleq	r1, r0, r1
   14158:	muleq	r1, r0, r1
   1415c:	muleq	r1, r0, r1
   14160:	muleq	r1, r0, r1
   14164:	muleq	r1, r0, r1
   14168:	muleq	r1, r0, r1
   1416c:	muleq	r1, r0, r1
   14170:	muleq	r1, r0, r1
   14174:	muleq	r1, r0, r1
   14178:	muleq	r1, r0, r1
   1417c:	muleq	r1, r0, r1
   14180:	muleq	r1, r0, r1
   14184:	muleq	r1, r0, r1
   14188:	muleq	r1, r0, r1
   1418c:	ldrdeq	r4, [r1], -ip
   14190:	nop			; (mov r0, r0)
   14194:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14198:	add	r3, r3, #1
   1419c:	str	r3, [fp, #-56]	; 0xffffffc8
   141a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   141a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   141a8:	cmp	r2, r3
   141ac:	bcc	140d8 <__assert_fail@plt+0x31e4>
   141b0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   141b4:	mov	r0, r3
   141b8:	bl	10d5c <iswprint@plt>
   141bc:	mov	r3, r0
   141c0:	cmp	r3, #0
   141c4:	bne	141d0 <__assert_fail@plt+0x32dc>
   141c8:	mov	r3, #0
   141cc:	strb	r3, [fp, #-49]	; 0xffffffcf
   141d0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   141d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   141d8:	add	r3, r2, r3
   141dc:	str	r3, [fp, #-48]	; 0xffffffd0
   141e0:	sub	r3, fp, #76	; 0x4c
   141e4:	mov	r0, r3
   141e8:	bl	10d08 <mbsinit@plt>
   141ec:	mov	r3, r0
   141f0:	cmp	r3, #0
   141f4:	beq	13ff8 <__assert_fail@plt+0x3104>
   141f8:	b	14208 <__assert_fail@plt+0x3314>
   141fc:	nop			; (mov r0, r0)
   14200:	b	14208 <__assert_fail@plt+0x3314>
   14204:	nop			; (mov r0, r0)
   14208:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1420c:	strb	r3, [fp, #-42]	; 0xffffffd6
   14210:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14214:	cmp	r3, #1
   14218:	bhi	1423c <__assert_fail@plt+0x3348>
   1421c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14220:	cmp	r3, #0
   14224:	beq	1457c <__assert_fail@plt+0x3688>
   14228:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1422c:	eor	r3, r3, #1
   14230:	uxtb	r3, r3
   14234:	cmp	r3, #0
   14238:	beq	1457c <__assert_fail@plt+0x3688>
   1423c:	ldr	r2, [fp, #-16]
   14240:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14244:	add	r3, r2, r3
   14248:	str	r3, [fp, #-68]	; 0xffffffbc
   1424c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14250:	cmp	r3, #0
   14254:	beq	14414 <__assert_fail@plt+0x3520>
   14258:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1425c:	eor	r3, r3, #1
   14260:	uxtb	r3, r3
   14264:	cmp	r3, #0
   14268:	beq	14414 <__assert_fail@plt+0x3520>
   1426c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14270:	cmp	r3, #0
   14274:	bne	149e4 <__assert_fail@plt+0x3af0>
   14278:	mov	r3, #1
   1427c:	strb	r3, [fp, #-41]	; 0xffffffd7
   14280:	ldr	r3, [fp, #4]
   14284:	cmp	r3, #2
   14288:	bne	14338 <__assert_fail@plt+0x3444>
   1428c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14290:	eor	r3, r3, #1
   14294:	uxtb	r3, r3
   14298:	cmp	r3, #0
   1429c:	beq	14338 <__assert_fail@plt+0x3444>
   142a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   142a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142a8:	cmp	r2, r3
   142ac:	bcs	142c4 <__assert_fail@plt+0x33d0>
   142b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142b8:	add	r3, r2, r3
   142bc:	mov	r2, #39	; 0x27
   142c0:	strb	r2, [r3]
   142c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142c8:	add	r3, r3, #1
   142cc:	str	r3, [fp, #-20]	; 0xffffffec
   142d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   142d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142d8:	cmp	r2, r3
   142dc:	bcs	142f4 <__assert_fail@plt+0x3400>
   142e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142e8:	add	r3, r2, r3
   142ec:	mov	r2, #36	; 0x24
   142f0:	strb	r2, [r3]
   142f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142f8:	add	r3, r3, #1
   142fc:	str	r3, [fp, #-20]	; 0xffffffec
   14300:	ldr	r2, [fp, #-20]	; 0xffffffec
   14304:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14308:	cmp	r2, r3
   1430c:	bcs	14324 <__assert_fail@plt+0x3430>
   14310:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14314:	ldr	r3, [fp, #-20]	; 0xffffffec
   14318:	add	r3, r2, r3
   1431c:	mov	r2, #39	; 0x27
   14320:	strb	r2, [r3]
   14324:	ldr	r3, [fp, #-20]	; 0xffffffec
   14328:	add	r3, r3, #1
   1432c:	str	r3, [fp, #-20]	; 0xffffffec
   14330:	mov	r3, #1
   14334:	strb	r3, [fp, #-35]	; 0xffffffdd
   14338:	ldr	r2, [fp, #-20]	; 0xffffffec
   1433c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14340:	cmp	r2, r3
   14344:	bcs	1435c <__assert_fail@plt+0x3468>
   14348:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1434c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14350:	add	r3, r2, r3
   14354:	mov	r2, #92	; 0x5c
   14358:	strb	r2, [r3]
   1435c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14360:	add	r3, r3, #1
   14364:	str	r3, [fp, #-20]	; 0xffffffec
   14368:	ldr	r2, [fp, #-20]	; 0xffffffec
   1436c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14370:	cmp	r2, r3
   14374:	bcs	1439c <__assert_fail@plt+0x34a8>
   14378:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1437c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14380:	add	r3, r2, r3
   14384:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14388:	lsr	r2, r2, #6
   1438c:	uxtb	r2, r2
   14390:	add	r2, r2, #48	; 0x30
   14394:	uxtb	r2, r2
   14398:	strb	r2, [r3]
   1439c:	ldr	r3, [fp, #-20]	; 0xffffffec
   143a0:	add	r3, r3, #1
   143a4:	str	r3, [fp, #-20]	; 0xffffffec
   143a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   143ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143b0:	cmp	r2, r3
   143b4:	bcs	143e4 <__assert_fail@plt+0x34f0>
   143b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   143c0:	add	r3, r2, r3
   143c4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   143c8:	lsr	r2, r2, #3
   143cc:	uxtb	r2, r2
   143d0:	and	r2, r2, #7
   143d4:	uxtb	r2, r2
   143d8:	add	r2, r2, #48	; 0x30
   143dc:	uxtb	r2, r2
   143e0:	strb	r2, [r3]
   143e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143e8:	add	r3, r3, #1
   143ec:	str	r3, [fp, #-20]	; 0xffffffec
   143f0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   143f4:	and	r3, r3, #7
   143f8:	uxtb	r3, r3
   143fc:	add	r3, r3, #48	; 0x30
   14400:	strb	r3, [fp, #-38]	; 0xffffffda
   14404:	b	14458 <__assert_fail@plt+0x3564>
   14408:	strdeq	r8, [r1], -ip
   1440c:	andeq	r8, r1, r4, lsl #14
   14410:	andeq	r8, r1, r0, lsl #14
   14414:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14418:	cmp	r3, #0
   1441c:	beq	14458 <__assert_fail@plt+0x3564>
   14420:	ldr	r2, [fp, #-20]	; 0xffffffec
   14424:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14428:	cmp	r2, r3
   1442c:	bcs	14444 <__assert_fail@plt+0x3550>
   14430:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14434:	ldr	r3, [fp, #-20]	; 0xffffffec
   14438:	add	r3, r2, r3
   1443c:	mov	r2, #92	; 0x5c
   14440:	strb	r2, [r3]
   14444:	ldr	r3, [fp, #-20]	; 0xffffffec
   14448:	add	r3, r3, #1
   1444c:	str	r3, [fp, #-20]	; 0xffffffec
   14450:	mov	r3, #0
   14454:	strb	r3, [fp, #-40]	; 0xffffffd8
   14458:	ldr	r3, [fp, #-16]
   1445c:	add	r2, r3, #1
   14460:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14464:	cmp	r2, r3
   14468:	bcs	14548 <__assert_fail@plt+0x3654>
   1446c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14470:	cmp	r3, #0
   14474:	beq	144f4 <__assert_fail@plt+0x3600>
   14478:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1447c:	eor	r3, r3, #1
   14480:	uxtb	r3, r3
   14484:	cmp	r3, #0
   14488:	beq	144f4 <__assert_fail@plt+0x3600>
   1448c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14490:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14494:	cmp	r2, r3
   14498:	bcs	144b0 <__assert_fail@plt+0x35bc>
   1449c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144a4:	add	r3, r2, r3
   144a8:	mov	r2, #39	; 0x27
   144ac:	strb	r2, [r3]
   144b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144b4:	add	r3, r3, #1
   144b8:	str	r3, [fp, #-20]	; 0xffffffec
   144bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   144c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144c4:	cmp	r2, r3
   144c8:	bcs	144e0 <__assert_fail@plt+0x35ec>
   144cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d4:	add	r3, r2, r3
   144d8:	mov	r2, #39	; 0x27
   144dc:	strb	r2, [r3]
   144e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144e4:	add	r3, r3, #1
   144e8:	str	r3, [fp, #-20]	; 0xffffffec
   144ec:	mov	r3, #0
   144f0:	strb	r3, [fp, #-35]	; 0xffffffdd
   144f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   144f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144fc:	cmp	r2, r3
   14500:	bcs	14518 <__assert_fail@plt+0x3624>
   14504:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1450c:	add	r3, r2, r3
   14510:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14514:	strb	r2, [r3]
   14518:	ldr	r3, [fp, #-20]	; 0xffffffec
   1451c:	add	r3, r3, #1
   14520:	str	r3, [fp, #-20]	; 0xffffffec
   14524:	ldr	r3, [fp, #-16]
   14528:	add	r3, r3, #1
   1452c:	str	r3, [fp, #-16]
   14530:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14534:	ldr	r3, [fp, #-16]
   14538:	add	r3, r2, r3
   1453c:	ldrb	r3, [r3]
   14540:	strb	r3, [fp, #-38]	; 0xffffffda
   14544:	b	1424c <__assert_fail@plt+0x3358>
   14548:	nop			; (mov r0, r0)
   1454c:	b	14718 <__assert_fail@plt+0x3824>
   14550:	nop			; (mov r0, r0)
   14554:	b	1457c <__assert_fail@plt+0x3688>
   14558:	nop			; (mov r0, r0)
   1455c:	b	1457c <__assert_fail@plt+0x3688>
   14560:	nop			; (mov r0, r0)
   14564:	b	1457c <__assert_fail@plt+0x3688>
   14568:	nop			; (mov r0, r0)
   1456c:	b	1457c <__assert_fail@plt+0x3688>
   14570:	nop			; (mov r0, r0)
   14574:	b	1457c <__assert_fail@plt+0x3688>
   14578:	nop			; (mov r0, r0)
   1457c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14580:	eor	r3, r3, #1
   14584:	uxtb	r3, r3
   14588:	cmp	r3, #0
   1458c:	bne	1459c <__assert_fail@plt+0x36a8>
   14590:	ldr	r3, [fp, #4]
   14594:	cmp	r3, #2
   14598:	bne	145b0 <__assert_fail@plt+0x36bc>
   1459c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   145a0:	eor	r3, r3, #1
   145a4:	uxtb	r3, r3
   145a8:	cmp	r3, #0
   145ac:	bne	145f0 <__assert_fail@plt+0x36fc>
   145b0:	ldr	r3, [fp, #12]
   145b4:	cmp	r3, #0
   145b8:	beq	145f0 <__assert_fail@plt+0x36fc>
   145bc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   145c0:	lsr	r3, r3, #5
   145c4:	uxtb	r3, r3
   145c8:	lsl	r3, r3, #2
   145cc:	ldr	r2, [fp, #12]
   145d0:	add	r3, r2, r3
   145d4:	ldr	r2, [r3]
   145d8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   145dc:	and	r3, r3, #31
   145e0:	lsr	r3, r2, r3
   145e4:	and	r3, r3, #1
   145e8:	cmp	r3, #0
   145ec:	bne	14604 <__assert_fail@plt+0x3710>
   145f0:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   145f4:	eor	r3, r3, #1
   145f8:	uxtb	r3, r3
   145fc:	cmp	r3, #0
   14600:	bne	14714 <__assert_fail@plt+0x3820>
   14604:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14608:	cmp	r3, #0
   1460c:	bne	149ec <__assert_fail@plt+0x3af8>
   14610:	mov	r3, #1
   14614:	strb	r3, [fp, #-41]	; 0xffffffd7
   14618:	ldr	r3, [fp, #4]
   1461c:	cmp	r3, #2
   14620:	bne	146d0 <__assert_fail@plt+0x37dc>
   14624:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14628:	eor	r3, r3, #1
   1462c:	uxtb	r3, r3
   14630:	cmp	r3, #0
   14634:	beq	146d0 <__assert_fail@plt+0x37dc>
   14638:	ldr	r2, [fp, #-20]	; 0xffffffec
   1463c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14640:	cmp	r2, r3
   14644:	bcs	1465c <__assert_fail@plt+0x3768>
   14648:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1464c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14650:	add	r3, r2, r3
   14654:	mov	r2, #39	; 0x27
   14658:	strb	r2, [r3]
   1465c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14660:	add	r3, r3, #1
   14664:	str	r3, [fp, #-20]	; 0xffffffec
   14668:	ldr	r2, [fp, #-20]	; 0xffffffec
   1466c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14670:	cmp	r2, r3
   14674:	bcs	1468c <__assert_fail@plt+0x3798>
   14678:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1467c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14680:	add	r3, r2, r3
   14684:	mov	r2, #36	; 0x24
   14688:	strb	r2, [r3]
   1468c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14690:	add	r3, r3, #1
   14694:	str	r3, [fp, #-20]	; 0xffffffec
   14698:	ldr	r2, [fp, #-20]	; 0xffffffec
   1469c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146a0:	cmp	r2, r3
   146a4:	bcs	146bc <__assert_fail@plt+0x37c8>
   146a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   146b0:	add	r3, r2, r3
   146b4:	mov	r2, #39	; 0x27
   146b8:	strb	r2, [r3]
   146bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   146c0:	add	r3, r3, #1
   146c4:	str	r3, [fp, #-20]	; 0xffffffec
   146c8:	mov	r3, #1
   146cc:	strb	r3, [fp, #-35]	; 0xffffffdd
   146d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   146d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146d8:	cmp	r2, r3
   146dc:	bcs	146f4 <__assert_fail@plt+0x3800>
   146e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   146e8:	add	r3, r2, r3
   146ec:	mov	r2, #92	; 0x5c
   146f0:	strb	r2, [r3]
   146f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   146f8:	add	r3, r3, #1
   146fc:	str	r3, [fp, #-20]	; 0xffffffec
   14700:	b	14718 <__assert_fail@plt+0x3824>
   14704:	nop			; (mov r0, r0)
   14708:	b	14718 <__assert_fail@plt+0x3824>
   1470c:	nop			; (mov r0, r0)
   14710:	b	14718 <__assert_fail@plt+0x3824>
   14714:	nop			; (mov r0, r0)
   14718:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1471c:	cmp	r3, #0
   14720:	beq	147a0 <__assert_fail@plt+0x38ac>
   14724:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14728:	eor	r3, r3, #1
   1472c:	uxtb	r3, r3
   14730:	cmp	r3, #0
   14734:	beq	147a0 <__assert_fail@plt+0x38ac>
   14738:	ldr	r2, [fp, #-20]	; 0xffffffec
   1473c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14740:	cmp	r2, r3
   14744:	bcs	1475c <__assert_fail@plt+0x3868>
   14748:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1474c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14750:	add	r3, r2, r3
   14754:	mov	r2, #39	; 0x27
   14758:	strb	r2, [r3]
   1475c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14760:	add	r3, r3, #1
   14764:	str	r3, [fp, #-20]	; 0xffffffec
   14768:	ldr	r2, [fp, #-20]	; 0xffffffec
   1476c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14770:	cmp	r2, r3
   14774:	bcs	1478c <__assert_fail@plt+0x3898>
   14778:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1477c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14780:	add	r3, r2, r3
   14784:	mov	r2, #39	; 0x27
   14788:	strb	r2, [r3]
   1478c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14790:	add	r3, r3, #1
   14794:	str	r3, [fp, #-20]	; 0xffffffec
   14798:	mov	r3, #0
   1479c:	strb	r3, [fp, #-35]	; 0xffffffdd
   147a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   147a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   147a8:	cmp	r2, r3
   147ac:	bcs	147c4 <__assert_fail@plt+0x38d0>
   147b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   147b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   147b8:	add	r3, r2, r3
   147bc:	ldrb	r2, [fp, #-38]	; 0xffffffda
   147c0:	strb	r2, [r3]
   147c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   147c8:	add	r3, r3, #1
   147cc:	str	r3, [fp, #-20]	; 0xffffffec
   147d0:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   147d4:	eor	r3, r3, #1
   147d8:	uxtb	r3, r3
   147dc:	cmp	r3, #0
   147e0:	beq	147ec <__assert_fail@plt+0x38f8>
   147e4:	mov	r3, #0
   147e8:	strb	r3, [fp, #-37]	; 0xffffffdb
   147ec:	ldr	r3, [fp, #-16]
   147f0:	add	r3, r3, #1
   147f4:	str	r3, [fp, #-16]
   147f8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   147fc:	cmn	r3, #1
   14800:	bne	14828 <__assert_fail@plt+0x3934>
   14804:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14808:	ldr	r3, [fp, #-16]
   1480c:	add	r3, r2, r3
   14810:	ldrb	r3, [r3]
   14814:	cmp	r3, #0
   14818:	movne	r3, #1
   1481c:	moveq	r3, #0
   14820:	uxtb	r3, r3
   14824:	b	14840 <__assert_fail@plt+0x394c>
   14828:	ldr	r2, [fp, #-16]
   1482c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14830:	cmp	r2, r3
   14834:	movne	r3, #1
   14838:	moveq	r3, #0
   1483c:	uxtb	r3, r3
   14840:	cmp	r3, #0
   14844:	bne	1366c <__assert_fail@plt+0x2778>
   14848:	ldr	r3, [fp, #-20]	; 0xffffffec
   1484c:	cmp	r3, #0
   14850:	bne	1486c <__assert_fail@plt+0x3978>
   14854:	ldr	r3, [fp, #4]
   14858:	cmp	r3, #2
   1485c:	bne	1486c <__assert_fail@plt+0x3978>
   14860:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14864:	cmp	r3, #0
   14868:	bne	149f4 <__assert_fail@plt+0x3b00>
   1486c:	ldr	r3, [fp, #4]
   14870:	cmp	r3, #2
   14874:	bne	14914 <__assert_fail@plt+0x3a20>
   14878:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1487c:	eor	r3, r3, #1
   14880:	uxtb	r3, r3
   14884:	cmp	r3, #0
   14888:	beq	14914 <__assert_fail@plt+0x3a20>
   1488c:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   14890:	cmp	r3, #0
   14894:	beq	14914 <__assert_fail@plt+0x3a20>
   14898:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1489c:	cmp	r3, #0
   148a0:	beq	148e8 <__assert_fail@plt+0x39f4>
   148a4:	ldr	r3, [fp, #20]
   148a8:	str	r3, [sp, #16]
   148ac:	ldr	r3, [fp, #16]
   148b0:	str	r3, [sp, #12]
   148b4:	ldr	r3, [fp, #12]
   148b8:	str	r3, [sp, #8]
   148bc:	ldr	r3, [fp, #8]
   148c0:	str	r3, [sp, #4]
   148c4:	mov	r3, #5
   148c8:	str	r3, [sp]
   148cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   148d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   148d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   148d8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   148dc:	bl	133bc <__assert_fail@plt+0x24c8>
   148e0:	mov	r3, r0
   148e4:	b	14a5c <__assert_fail@plt+0x3b68>
   148e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   148ec:	cmp	r3, #0
   148f0:	bne	14914 <__assert_fail@plt+0x3a20>
   148f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   148f8:	cmp	r3, #0
   148fc:	beq	14914 <__assert_fail@plt+0x3a20>
   14900:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14904:	str	r3, [fp, #-92]	; 0xffffffa4
   14908:	mov	r3, #0
   1490c:	str	r3, [fp, #-20]	; 0xffffffec
   14910:	b	13448 <__assert_fail@plt+0x2554>
   14914:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14918:	cmp	r3, #0
   1491c:	beq	14988 <__assert_fail@plt+0x3a94>
   14920:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14924:	eor	r3, r3, #1
   14928:	uxtb	r3, r3
   1492c:	cmp	r3, #0
   14930:	beq	14988 <__assert_fail@plt+0x3a94>
   14934:	b	14978 <__assert_fail@plt+0x3a84>
   14938:	ldr	r2, [fp, #-20]	; 0xffffffec
   1493c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14940:	cmp	r2, r3
   14944:	bcs	14960 <__assert_fail@plt+0x3a6c>
   14948:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1494c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14950:	add	r3, r2, r3
   14954:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14958:	ldrb	r2, [r2]
   1495c:	strb	r2, [r3]
   14960:	ldr	r3, [fp, #-20]	; 0xffffffec
   14964:	add	r3, r3, #1
   14968:	str	r3, [fp, #-20]	; 0xffffffec
   1496c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14970:	add	r3, r3, #1
   14974:	str	r3, [fp, #-28]	; 0xffffffe4
   14978:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1497c:	ldrb	r3, [r3]
   14980:	cmp	r3, #0
   14984:	bne	14938 <__assert_fail@plt+0x3a44>
   14988:	ldr	r2, [fp, #-20]	; 0xffffffec
   1498c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14990:	cmp	r2, r3
   14994:	bcs	149ac <__assert_fail@plt+0x3ab8>
   14998:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1499c:	ldr	r3, [fp, #-20]	; 0xffffffec
   149a0:	add	r3, r2, r3
   149a4:	mov	r2, #0
   149a8:	strb	r2, [r3]
   149ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   149b0:	b	14a5c <__assert_fail@plt+0x3b68>
   149b4:	nop			; (mov r0, r0)
   149b8:	b	149f8 <__assert_fail@plt+0x3b04>
   149bc:	nop			; (mov r0, r0)
   149c0:	b	149f8 <__assert_fail@plt+0x3b04>
   149c4:	nop			; (mov r0, r0)
   149c8:	b	149f8 <__assert_fail@plt+0x3b04>
   149cc:	nop			; (mov r0, r0)
   149d0:	b	149f8 <__assert_fail@plt+0x3b04>
   149d4:	nop			; (mov r0, r0)
   149d8:	b	149f8 <__assert_fail@plt+0x3b04>
   149dc:	nop			; (mov r0, r0)
   149e0:	b	149f8 <__assert_fail@plt+0x3b04>
   149e4:	nop			; (mov r0, r0)
   149e8:	b	149f8 <__assert_fail@plt+0x3b04>
   149ec:	nop			; (mov r0, r0)
   149f0:	b	149f8 <__assert_fail@plt+0x3b04>
   149f4:	nop			; (mov r0, r0)
   149f8:	ldr	r3, [fp, #4]
   149fc:	cmp	r3, #2
   14a00:	bne	14a18 <__assert_fail@plt+0x3b24>
   14a04:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14a08:	cmp	r3, #0
   14a0c:	beq	14a18 <__assert_fail@plt+0x3b24>
   14a10:	mov	r3, #4
   14a14:	str	r3, [fp, #4]
   14a18:	ldr	r3, [fp, #8]
   14a1c:	bic	r3, r3, #2
   14a20:	ldr	r2, [fp, #20]
   14a24:	str	r2, [sp, #16]
   14a28:	ldr	r2, [fp, #16]
   14a2c:	str	r2, [sp, #12]
   14a30:	mov	r2, #0
   14a34:	str	r2, [sp, #8]
   14a38:	str	r3, [sp, #4]
   14a3c:	ldr	r3, [fp, #4]
   14a40:	str	r3, [sp]
   14a44:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14a48:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14a4c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14a50:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14a54:	bl	133bc <__assert_fail@plt+0x24c8>
   14a58:	mov	r3, r0
   14a5c:	mov	r0, r3
   14a60:	sub	sp, fp, #8
   14a64:	pop	{r4, fp, pc}
   14a68:	push	{fp, lr}
   14a6c:	add	fp, sp, #4
   14a70:	sub	sp, sp, #56	; 0x38
   14a74:	str	r0, [fp, #-24]	; 0xffffffe8
   14a78:	str	r1, [fp, #-28]	; 0xffffffe4
   14a7c:	str	r2, [fp, #-32]	; 0xffffffe0
   14a80:	str	r3, [fp, #-36]	; 0xffffffdc
   14a84:	ldr	r3, [fp, #4]
   14a88:	cmp	r3, #0
   14a8c:	beq	14a98 <__assert_fail@plt+0x3ba4>
   14a90:	ldr	r3, [fp, #4]
   14a94:	b	14a9c <__assert_fail@plt+0x3ba8>
   14a98:	ldr	r3, [pc, #132]	; 14b24 <__assert_fail@plt+0x3c30>
   14a9c:	str	r3, [fp, #-8]
   14aa0:	bl	10e34 <__errno_location@plt>
   14aa4:	mov	r3, r0
   14aa8:	ldr	r3, [r3]
   14aac:	str	r3, [fp, #-12]
   14ab0:	ldr	r3, [fp, #-8]
   14ab4:	ldr	r3, [r3]
   14ab8:	ldr	r2, [fp, #-8]
   14abc:	ldr	r2, [r2, #4]
   14ac0:	ldr	r1, [fp, #-8]
   14ac4:	add	r1, r1, #8
   14ac8:	ldr	r0, [fp, #-8]
   14acc:	ldr	r0, [r0, #40]	; 0x28
   14ad0:	ldr	ip, [fp, #-8]
   14ad4:	ldr	ip, [ip, #44]	; 0x2c
   14ad8:	str	ip, [sp, #16]
   14adc:	str	r0, [sp, #12]
   14ae0:	str	r1, [sp, #8]
   14ae4:	str	r2, [sp, #4]
   14ae8:	str	r3, [sp]
   14aec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14af0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14af4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14af8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14afc:	bl	133bc <__assert_fail@plt+0x24c8>
   14b00:	str	r0, [fp, #-16]
   14b04:	bl	10e34 <__errno_location@plt>
   14b08:	mov	r2, r0
   14b0c:	ldr	r3, [fp, #-12]
   14b10:	str	r3, [r2]
   14b14:	ldr	r3, [fp, #-16]
   14b18:	mov	r0, r3
   14b1c:	sub	sp, fp, #4
   14b20:	pop	{fp, pc}
   14b24:	andeq	r9, r2, ip, lsr #3
   14b28:	push	{fp, lr}
   14b2c:	add	fp, sp, #4
   14b30:	sub	sp, sp, #16
   14b34:	str	r0, [fp, #-8]
   14b38:	str	r1, [fp, #-12]
   14b3c:	str	r2, [fp, #-16]
   14b40:	ldr	r3, [fp, #-16]
   14b44:	mov	r2, #0
   14b48:	ldr	r1, [fp, #-12]
   14b4c:	ldr	r0, [fp, #-8]
   14b50:	bl	14b64 <__assert_fail@plt+0x3c70>
   14b54:	mov	r3, r0
   14b58:	mov	r0, r3
   14b5c:	sub	sp, fp, #4
   14b60:	pop	{fp, pc}
   14b64:	push	{fp, lr}
   14b68:	add	fp, sp, #4
   14b6c:	sub	sp, sp, #64	; 0x40
   14b70:	str	r0, [fp, #-32]	; 0xffffffe0
   14b74:	str	r1, [fp, #-36]	; 0xffffffdc
   14b78:	str	r2, [fp, #-40]	; 0xffffffd8
   14b7c:	str	r3, [fp, #-44]	; 0xffffffd4
   14b80:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14b84:	cmp	r3, #0
   14b88:	beq	14b94 <__assert_fail@plt+0x3ca0>
   14b8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14b90:	b	14b98 <__assert_fail@plt+0x3ca4>
   14b94:	ldr	r3, [pc, #292]	; 14cc0 <__assert_fail@plt+0x3dcc>
   14b98:	str	r3, [fp, #-8]
   14b9c:	bl	10e34 <__errno_location@plt>
   14ba0:	mov	r3, r0
   14ba4:	ldr	r3, [r3]
   14ba8:	str	r3, [fp, #-12]
   14bac:	ldr	r3, [fp, #-8]
   14bb0:	ldr	r3, [r3, #4]
   14bb4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14bb8:	cmp	r2, #0
   14bbc:	moveq	r2, #1
   14bc0:	movne	r2, #0
   14bc4:	uxtb	r2, r2
   14bc8:	orr	r3, r3, r2
   14bcc:	str	r3, [fp, #-16]
   14bd0:	ldr	r3, [fp, #-8]
   14bd4:	ldr	r3, [r3]
   14bd8:	ldr	r2, [fp, #-8]
   14bdc:	add	r2, r2, #8
   14be0:	ldr	r1, [fp, #-8]
   14be4:	ldr	r1, [r1, #40]	; 0x28
   14be8:	ldr	r0, [fp, #-8]
   14bec:	ldr	r0, [r0, #44]	; 0x2c
   14bf0:	str	r0, [sp, #16]
   14bf4:	str	r1, [sp, #12]
   14bf8:	str	r2, [sp, #8]
   14bfc:	ldr	r2, [fp, #-16]
   14c00:	str	r2, [sp, #4]
   14c04:	str	r3, [sp]
   14c08:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14c0c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14c10:	mov	r1, #0
   14c14:	mov	r0, #0
   14c18:	bl	133bc <__assert_fail@plt+0x24c8>
   14c1c:	mov	r3, r0
   14c20:	add	r3, r3, #1
   14c24:	str	r3, [fp, #-20]	; 0xffffffec
   14c28:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c2c:	bl	15e60 <__assert_fail@plt+0x4f6c>
   14c30:	mov	r3, r0
   14c34:	str	r3, [fp, #-24]	; 0xffffffe8
   14c38:	ldr	r3, [fp, #-8]
   14c3c:	ldr	r3, [r3]
   14c40:	ldr	r2, [fp, #-8]
   14c44:	add	r2, r2, #8
   14c48:	ldr	r1, [fp, #-8]
   14c4c:	ldr	r1, [r1, #40]	; 0x28
   14c50:	ldr	r0, [fp, #-8]
   14c54:	ldr	r0, [r0, #44]	; 0x2c
   14c58:	str	r0, [sp, #16]
   14c5c:	str	r1, [sp, #12]
   14c60:	str	r2, [sp, #8]
   14c64:	ldr	r2, [fp, #-16]
   14c68:	str	r2, [sp, #4]
   14c6c:	str	r3, [sp]
   14c70:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14c74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14c78:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14c80:	bl	133bc <__assert_fail@plt+0x24c8>
   14c84:	bl	10e34 <__errno_location@plt>
   14c88:	mov	r2, r0
   14c8c:	ldr	r3, [fp, #-12]
   14c90:	str	r3, [r2]
   14c94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14c98:	cmp	r3, #0
   14c9c:	beq	14cb0 <__assert_fail@plt+0x3dbc>
   14ca0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ca4:	sub	r2, r3, #1
   14ca8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14cac:	str	r2, [r3]
   14cb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cb4:	mov	r0, r3
   14cb8:	sub	sp, fp, #4
   14cbc:	pop	{fp, pc}
   14cc0:	andeq	r9, r2, ip, lsr #3
   14cc4:	push	{fp, lr}
   14cc8:	add	fp, sp, #4
   14ccc:	sub	sp, sp, #8
   14cd0:	ldr	r3, [pc, #196]	; 14d9c <__assert_fail@plt+0x3ea8>
   14cd4:	ldr	r3, [r3]
   14cd8:	str	r3, [fp, #-12]
   14cdc:	mov	r3, #1
   14ce0:	str	r3, [fp, #-8]
   14ce4:	b	14d10 <__assert_fail@plt+0x3e1c>
   14ce8:	ldr	r3, [fp, #-8]
   14cec:	lsl	r3, r3, #3
   14cf0:	ldr	r2, [fp, #-12]
   14cf4:	add	r3, r2, r3
   14cf8:	ldr	r3, [r3, #4]
   14cfc:	mov	r0, r3
   14d00:	bl	12d40 <__assert_fail@plt+0x1e4c>
   14d04:	ldr	r3, [fp, #-8]
   14d08:	add	r3, r3, #1
   14d0c:	str	r3, [fp, #-8]
   14d10:	ldr	r3, [pc, #136]	; 14da0 <__assert_fail@plt+0x3eac>
   14d14:	ldr	r3, [r3]
   14d18:	ldr	r2, [fp, #-8]
   14d1c:	cmp	r2, r3
   14d20:	blt	14ce8 <__assert_fail@plt+0x3df4>
   14d24:	ldr	r3, [fp, #-12]
   14d28:	ldr	r3, [r3, #4]
   14d2c:	ldr	r2, [pc, #112]	; 14da4 <__assert_fail@plt+0x3eb0>
   14d30:	cmp	r3, r2
   14d34:	beq	14d60 <__assert_fail@plt+0x3e6c>
   14d38:	ldr	r3, [fp, #-12]
   14d3c:	ldr	r3, [r3, #4]
   14d40:	mov	r0, r3
   14d44:	bl	12d40 <__assert_fail@plt+0x1e4c>
   14d48:	ldr	r3, [pc, #88]	; 14da8 <__assert_fail@plt+0x3eb4>
   14d4c:	mov	r2, #256	; 0x100
   14d50:	str	r2, [r3]
   14d54:	ldr	r3, [pc, #76]	; 14da8 <__assert_fail@plt+0x3eb4>
   14d58:	ldr	r2, [pc, #68]	; 14da4 <__assert_fail@plt+0x3eb0>
   14d5c:	str	r2, [r3, #4]
   14d60:	ldr	r3, [fp, #-12]
   14d64:	ldr	r2, [pc, #60]	; 14da8 <__assert_fail@plt+0x3eb4>
   14d68:	cmp	r3, r2
   14d6c:	beq	14d84 <__assert_fail@plt+0x3e90>
   14d70:	ldr	r0, [fp, #-12]
   14d74:	bl	12d40 <__assert_fail@plt+0x1e4c>
   14d78:	ldr	r3, [pc, #28]	; 14d9c <__assert_fail@plt+0x3ea8>
   14d7c:	ldr	r2, [pc, #36]	; 14da8 <__assert_fail@plt+0x3eb4>
   14d80:	str	r2, [r3]
   14d84:	ldr	r3, [pc, #20]	; 14da0 <__assert_fail@plt+0x3eac>
   14d88:	mov	r2, #1
   14d8c:	str	r2, [r3]
   14d90:	nop			; (mov r0, r0)
   14d94:	sub	sp, fp, #4
   14d98:	pop	{fp, pc}
   14d9c:	andeq	r9, r2, r4, lsl #2
   14da0:	strdeq	r9, [r2], -r8
   14da4:	ldrdeq	r9, [r2], -ip
   14da8:	strdeq	r9, [r2], -ip
   14dac:	push	{r4, fp, lr}
   14db0:	add	fp, sp, #8
   14db4:	sub	sp, sp, #84	; 0x54
   14db8:	str	r0, [fp, #-56]	; 0xffffffc8
   14dbc:	str	r1, [fp, #-60]	; 0xffffffc4
   14dc0:	str	r2, [fp, #-64]	; 0xffffffc0
   14dc4:	str	r3, [fp, #-68]	; 0xffffffbc
   14dc8:	bl	10e34 <__errno_location@plt>
   14dcc:	mov	r3, r0
   14dd0:	ldr	r3, [r3]
   14dd4:	str	r3, [fp, #-24]	; 0xffffffe8
   14dd8:	ldr	r3, [pc, #640]	; 15060 <__assert_fail@plt+0x416c>
   14ddc:	ldr	r3, [r3]
   14de0:	str	r3, [fp, #-16]
   14de4:	mvn	r3, #-2147483648	; 0x80000000
   14de8:	str	r3, [fp, #-28]	; 0xffffffe4
   14dec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14df0:	cmp	r3, #0
   14df4:	blt	14e08 <__assert_fail@plt+0x3f14>
   14df8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14dfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e00:	cmp	r2, r3
   14e04:	blt	14e0c <__assert_fail@plt+0x3f18>
   14e08:	bl	10ed0 <abort@plt>
   14e0c:	ldr	r3, [pc, #592]	; 15064 <__assert_fail@plt+0x4170>
   14e10:	ldr	r2, [r3]
   14e14:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14e18:	cmp	r2, r3
   14e1c:	bgt	14ef0 <__assert_fail@plt+0x3ffc>
   14e20:	ldr	r3, [fp, #-16]
   14e24:	ldr	r2, [pc, #572]	; 15068 <__assert_fail@plt+0x4174>
   14e28:	cmp	r3, r2
   14e2c:	moveq	r3, #1
   14e30:	movne	r3, #0
   14e34:	strb	r3, [fp, #-29]	; 0xffffffe3
   14e38:	ldr	r3, [pc, #548]	; 15064 <__assert_fail@plt+0x4170>
   14e3c:	ldr	r3, [r3]
   14e40:	str	r3, [fp, #-48]	; 0xffffffd0
   14e44:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14e48:	cmp	r3, #0
   14e4c:	beq	14e58 <__assert_fail@plt+0x3f64>
   14e50:	mov	r0, #0
   14e54:	b	14e5c <__assert_fail@plt+0x3f68>
   14e58:	ldr	r0, [fp, #-16]
   14e5c:	ldr	r3, [pc, #512]	; 15064 <__assert_fail@plt+0x4170>
   14e60:	ldr	r3, [r3]
   14e64:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14e68:	sub	r3, r2, r3
   14e6c:	add	r2, r3, #1
   14e70:	sub	r1, fp, #48	; 0x30
   14e74:	mov	r3, #8
   14e78:	str	r3, [sp]
   14e7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e80:	bl	16180 <__assert_fail@plt+0x528c>
   14e84:	str	r0, [fp, #-16]
   14e88:	ldr	r2, [pc, #464]	; 15060 <__assert_fail@plt+0x416c>
   14e8c:	ldr	r3, [fp, #-16]
   14e90:	str	r3, [r2]
   14e94:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14e98:	cmp	r3, #0
   14e9c:	beq	14eb0 <__assert_fail@plt+0x3fbc>
   14ea0:	ldr	r3, [fp, #-16]
   14ea4:	ldr	r2, [pc, #444]	; 15068 <__assert_fail@plt+0x4174>
   14ea8:	ldm	r2, {r0, r1}
   14eac:	stm	r3, {r0, r1}
   14eb0:	ldr	r3, [pc, #428]	; 15064 <__assert_fail@plt+0x4170>
   14eb4:	ldr	r3, [r3]
   14eb8:	lsl	r3, r3, #3
   14ebc:	ldr	r2, [fp, #-16]
   14ec0:	add	r0, r2, r3
   14ec4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14ec8:	ldr	r3, [pc, #404]	; 15064 <__assert_fail@plt+0x4170>
   14ecc:	ldr	r3, [r3]
   14ed0:	sub	r3, r2, r3
   14ed4:	lsl	r3, r3, #3
   14ed8:	mov	r2, r3
   14edc:	mov	r1, #0
   14ee0:	bl	10e4c <memset@plt>
   14ee4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14ee8:	ldr	r2, [pc, #372]	; 15064 <__assert_fail@plt+0x4170>
   14eec:	str	r3, [r2]
   14ef0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14ef4:	lsl	r3, r3, #3
   14ef8:	ldr	r2, [fp, #-16]
   14efc:	add	r3, r2, r3
   14f00:	ldr	r3, [r3]
   14f04:	str	r3, [fp, #-36]	; 0xffffffdc
   14f08:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14f0c:	lsl	r3, r3, #3
   14f10:	ldr	r2, [fp, #-16]
   14f14:	add	r3, r2, r3
   14f18:	ldr	r3, [r3, #4]
   14f1c:	str	r3, [fp, #-20]	; 0xffffffec
   14f20:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14f24:	ldr	r3, [r3, #4]
   14f28:	orr	r3, r3, #1
   14f2c:	str	r3, [fp, #-40]	; 0xffffffd8
   14f30:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14f34:	ldr	r3, [r3]
   14f38:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14f3c:	add	r2, r2, #8
   14f40:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14f44:	ldr	r1, [r1, #40]	; 0x28
   14f48:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f4c:	ldr	r0, [r0, #44]	; 0x2c
   14f50:	str	r0, [sp, #16]
   14f54:	str	r1, [sp, #12]
   14f58:	str	r2, [sp, #8]
   14f5c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14f60:	str	r2, [sp, #4]
   14f64:	str	r3, [sp]
   14f68:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14f6c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14f70:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14f74:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f78:	bl	133bc <__assert_fail@plt+0x24c8>
   14f7c:	str	r0, [fp, #-44]	; 0xffffffd4
   14f80:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14f84:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f88:	cmp	r2, r3
   14f8c:	bhi	15040 <__assert_fail@plt+0x414c>
   14f90:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14f94:	lsl	r3, r3, #3
   14f98:	ldr	r2, [fp, #-16]
   14f9c:	add	r3, r2, r3
   14fa0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14fa4:	add	r2, r2, #1
   14fa8:	str	r2, [fp, #-36]	; 0xffffffdc
   14fac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14fb0:	str	r2, [r3]
   14fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fb8:	ldr	r2, [pc, #172]	; 1506c <__assert_fail@plt+0x4178>
   14fbc:	cmp	r3, r2
   14fc0:	beq	14fcc <__assert_fail@plt+0x40d8>
   14fc4:	ldr	r0, [fp, #-20]	; 0xffffffec
   14fc8:	bl	12d40 <__assert_fail@plt+0x1e4c>
   14fcc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14fd0:	lsl	r3, r3, #3
   14fd4:	ldr	r2, [fp, #-16]
   14fd8:	add	r4, r2, r3
   14fdc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14fe0:	bl	15e60 <__assert_fail@plt+0x4f6c>
   14fe4:	mov	r3, r0
   14fe8:	str	r3, [fp, #-20]	; 0xffffffec
   14fec:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ff0:	str	r3, [r4, #4]
   14ff4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14ff8:	ldr	r3, [r3]
   14ffc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15000:	add	r2, r2, #8
   15004:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15008:	ldr	r1, [r1, #40]	; 0x28
   1500c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15010:	ldr	r0, [r0, #44]	; 0x2c
   15014:	str	r0, [sp, #16]
   15018:	str	r1, [sp, #12]
   1501c:	str	r2, [sp, #8]
   15020:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15024:	str	r2, [sp, #4]
   15028:	str	r3, [sp]
   1502c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15030:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15034:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15038:	ldr	r0, [fp, #-20]	; 0xffffffec
   1503c:	bl	133bc <__assert_fail@plt+0x24c8>
   15040:	bl	10e34 <__errno_location@plt>
   15044:	mov	r2, r0
   15048:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1504c:	str	r3, [r2]
   15050:	ldr	r3, [fp, #-20]	; 0xffffffec
   15054:	mov	r0, r3
   15058:	sub	sp, fp, #8
   1505c:	pop	{r4, fp, pc}
   15060:	andeq	r9, r2, r4, lsl #2
   15064:	strdeq	r9, [r2], -r8
   15068:	strdeq	r9, [r2], -ip
   1506c:	ldrdeq	r9, [r2], -ip
   15070:	push	{fp, lr}
   15074:	add	fp, sp, #4
   15078:	sub	sp, sp, #8
   1507c:	str	r0, [fp, #-8]
   15080:	str	r1, [fp, #-12]
   15084:	ldr	r3, [pc, #28]	; 150a8 <__assert_fail@plt+0x41b4>
   15088:	mvn	r2, #0
   1508c:	ldr	r1, [fp, #-12]
   15090:	ldr	r0, [fp, #-8]
   15094:	bl	14dac <__assert_fail@plt+0x3eb8>
   15098:	mov	r3, r0
   1509c:	mov	r0, r3
   150a0:	sub	sp, fp, #4
   150a4:	pop	{fp, pc}
   150a8:	andeq	r9, r2, ip, lsr #3
   150ac:	push	{fp, lr}
   150b0:	add	fp, sp, #4
   150b4:	sub	sp, sp, #16
   150b8:	str	r0, [fp, #-8]
   150bc:	str	r1, [fp, #-12]
   150c0:	str	r2, [fp, #-16]
   150c4:	ldr	r3, [pc, #28]	; 150e8 <__assert_fail@plt+0x41f4>
   150c8:	ldr	r2, [fp, #-16]
   150cc:	ldr	r1, [fp, #-12]
   150d0:	ldr	r0, [fp, #-8]
   150d4:	bl	14dac <__assert_fail@plt+0x3eb8>
   150d8:	mov	r3, r0
   150dc:	mov	r0, r3
   150e0:	sub	sp, fp, #4
   150e4:	pop	{fp, pc}
   150e8:	andeq	r9, r2, ip, lsr #3
   150ec:	push	{fp, lr}
   150f0:	add	fp, sp, #4
   150f4:	sub	sp, sp, #8
   150f8:	str	r0, [fp, #-8]
   150fc:	ldr	r1, [fp, #-8]
   15100:	mov	r0, #0
   15104:	bl	15070 <__assert_fail@plt+0x417c>
   15108:	mov	r3, r0
   1510c:	mov	r0, r3
   15110:	sub	sp, fp, #4
   15114:	pop	{fp, pc}
   15118:	push	{fp, lr}
   1511c:	add	fp, sp, #4
   15120:	sub	sp, sp, #8
   15124:	str	r0, [fp, #-8]
   15128:	str	r1, [fp, #-12]
   1512c:	ldr	r2, [fp, #-12]
   15130:	ldr	r1, [fp, #-8]
   15134:	mov	r0, #0
   15138:	bl	150ac <__assert_fail@plt+0x41b8>
   1513c:	mov	r3, r0
   15140:	mov	r0, r3
   15144:	sub	sp, fp, #4
   15148:	pop	{fp, pc}
   1514c:	push	{fp, lr}
   15150:	add	fp, sp, #4
   15154:	sub	sp, sp, #64	; 0x40
   15158:	str	r0, [fp, #-56]	; 0xffffffc8
   1515c:	str	r1, [fp, #-60]	; 0xffffffc4
   15160:	str	r2, [fp, #-64]	; 0xffffffc0
   15164:	sub	r3, fp, #52	; 0x34
   15168:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1516c:	mov	r0, r3
   15170:	bl	13258 <__assert_fail@plt+0x2364>
   15174:	sub	r3, fp, #52	; 0x34
   15178:	mvn	r2, #0
   1517c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15180:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15184:	bl	14dac <__assert_fail@plt+0x3eb8>
   15188:	mov	r3, r0
   1518c:	mov	r0, r3
   15190:	sub	sp, fp, #4
   15194:	pop	{fp, pc}
   15198:	push	{fp, lr}
   1519c:	add	fp, sp, #4
   151a0:	sub	sp, sp, #64	; 0x40
   151a4:	str	r0, [fp, #-56]	; 0xffffffc8
   151a8:	str	r1, [fp, #-60]	; 0xffffffc4
   151ac:	str	r2, [fp, #-64]	; 0xffffffc0
   151b0:	str	r3, [fp, #-68]	; 0xffffffbc
   151b4:	sub	r3, fp, #52	; 0x34
   151b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   151bc:	mov	r0, r3
   151c0:	bl	13258 <__assert_fail@plt+0x2364>
   151c4:	sub	r3, fp, #52	; 0x34
   151c8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   151cc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   151d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   151d4:	bl	14dac <__assert_fail@plt+0x3eb8>
   151d8:	mov	r3, r0
   151dc:	mov	r0, r3
   151e0:	sub	sp, fp, #4
   151e4:	pop	{fp, pc}
   151e8:	push	{fp, lr}
   151ec:	add	fp, sp, #4
   151f0:	sub	sp, sp, #8
   151f4:	str	r0, [fp, #-8]
   151f8:	str	r1, [fp, #-12]
   151fc:	ldr	r2, [fp, #-12]
   15200:	ldr	r1, [fp, #-8]
   15204:	mov	r0, #0
   15208:	bl	1514c <__assert_fail@plt+0x4258>
   1520c:	mov	r3, r0
   15210:	mov	r0, r3
   15214:	sub	sp, fp, #4
   15218:	pop	{fp, pc}
   1521c:	push	{fp, lr}
   15220:	add	fp, sp, #4
   15224:	sub	sp, sp, #16
   15228:	str	r0, [fp, #-8]
   1522c:	str	r1, [fp, #-12]
   15230:	str	r2, [fp, #-16]
   15234:	ldr	r3, [fp, #-16]
   15238:	ldr	r2, [fp, #-12]
   1523c:	ldr	r1, [fp, #-8]
   15240:	mov	r0, #0
   15244:	bl	15198 <__assert_fail@plt+0x42a4>
   15248:	mov	r3, r0
   1524c:	mov	r0, r3
   15250:	sub	sp, fp, #4
   15254:	pop	{fp, pc}
   15258:	push	{fp, lr}
   1525c:	add	fp, sp, #4
   15260:	sub	sp, sp, #64	; 0x40
   15264:	str	r0, [fp, #-56]	; 0xffffffc8
   15268:	str	r1, [fp, #-60]	; 0xffffffc4
   1526c:	mov	r3, r2
   15270:	strb	r3, [fp, #-61]	; 0xffffffc3
   15274:	ldr	r3, [pc, #84]	; 152d0 <__assert_fail@plt+0x43dc>
   15278:	sub	ip, fp, #52	; 0x34
   1527c:	mov	lr, r3
   15280:	ldm	lr!, {r0, r1, r2, r3}
   15284:	stmia	ip!, {r0, r1, r2, r3}
   15288:	ldm	lr!, {r0, r1, r2, r3}
   1528c:	stmia	ip!, {r0, r1, r2, r3}
   15290:	ldm	lr, {r0, r1, r2, r3}
   15294:	stm	ip, {r0, r1, r2, r3}
   15298:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1529c:	sub	r3, fp, #52	; 0x34
   152a0:	mov	r2, #1
   152a4:	mov	r0, r3
   152a8:	bl	130c4 <__assert_fail@plt+0x21d0>
   152ac:	sub	r3, fp, #52	; 0x34
   152b0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   152b4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   152b8:	mov	r0, #0
   152bc:	bl	14dac <__assert_fail@plt+0x3eb8>
   152c0:	mov	r3, r0
   152c4:	mov	r0, r3
   152c8:	sub	sp, fp, #4
   152cc:	pop	{fp, pc}
   152d0:	andeq	r9, r2, ip, lsr #3
   152d4:	push	{fp, lr}
   152d8:	add	fp, sp, #4
   152dc:	sub	sp, sp, #8
   152e0:	str	r0, [fp, #-8]
   152e4:	mov	r3, r1
   152e8:	strb	r3, [fp, #-9]
   152ec:	ldrb	r3, [fp, #-9]
   152f0:	mov	r2, r3
   152f4:	mvn	r1, #0
   152f8:	ldr	r0, [fp, #-8]
   152fc:	bl	15258 <__assert_fail@plt+0x4364>
   15300:	mov	r3, r0
   15304:	mov	r0, r3
   15308:	sub	sp, fp, #4
   1530c:	pop	{fp, pc}
   15310:	push	{fp, lr}
   15314:	add	fp, sp, #4
   15318:	sub	sp, sp, #8
   1531c:	str	r0, [fp, #-8]
   15320:	mov	r1, #58	; 0x3a
   15324:	ldr	r0, [fp, #-8]
   15328:	bl	152d4 <__assert_fail@plt+0x43e0>
   1532c:	mov	r3, r0
   15330:	mov	r0, r3
   15334:	sub	sp, fp, #4
   15338:	pop	{fp, pc}
   1533c:	push	{fp, lr}
   15340:	add	fp, sp, #4
   15344:	sub	sp, sp, #8
   15348:	str	r0, [fp, #-8]
   1534c:	str	r1, [fp, #-12]
   15350:	mov	r2, #58	; 0x3a
   15354:	ldr	r1, [fp, #-12]
   15358:	ldr	r0, [fp, #-8]
   1535c:	bl	15258 <__assert_fail@plt+0x4364>
   15360:	mov	r3, r0
   15364:	mov	r0, r3
   15368:	sub	sp, fp, #4
   1536c:	pop	{fp, pc}
   15370:	push	{fp, lr}
   15374:	add	fp, sp, #4
   15378:	sub	sp, sp, #112	; 0x70
   1537c:	str	r0, [fp, #-56]	; 0xffffffc8
   15380:	str	r1, [fp, #-60]	; 0xffffffc4
   15384:	str	r2, [fp, #-64]	; 0xffffffc0
   15388:	sub	r3, fp, #116	; 0x74
   1538c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15390:	mov	r0, r3
   15394:	bl	13258 <__assert_fail@plt+0x2364>
   15398:	sub	ip, fp, #52	; 0x34
   1539c:	sub	lr, fp, #116	; 0x74
   153a0:	ldm	lr!, {r0, r1, r2, r3}
   153a4:	stmia	ip!, {r0, r1, r2, r3}
   153a8:	ldm	lr!, {r0, r1, r2, r3}
   153ac:	stmia	ip!, {r0, r1, r2, r3}
   153b0:	ldm	lr, {r0, r1, r2, r3}
   153b4:	stm	ip, {r0, r1, r2, r3}
   153b8:	sub	r3, fp, #52	; 0x34
   153bc:	mov	r2, #1
   153c0:	mov	r1, #58	; 0x3a
   153c4:	mov	r0, r3
   153c8:	bl	130c4 <__assert_fail@plt+0x21d0>
   153cc:	sub	r3, fp, #52	; 0x34
   153d0:	mvn	r2, #0
   153d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   153d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   153dc:	bl	14dac <__assert_fail@plt+0x3eb8>
   153e0:	mov	r3, r0
   153e4:	mov	r0, r3
   153e8:	sub	sp, fp, #4
   153ec:	pop	{fp, pc}
   153f0:	push	{fp, lr}
   153f4:	add	fp, sp, #4
   153f8:	sub	sp, sp, #24
   153fc:	str	r0, [fp, #-8]
   15400:	str	r1, [fp, #-12]
   15404:	str	r2, [fp, #-16]
   15408:	str	r3, [fp, #-20]	; 0xffffffec
   1540c:	mvn	r3, #0
   15410:	str	r3, [sp]
   15414:	ldr	r3, [fp, #-20]	; 0xffffffec
   15418:	ldr	r2, [fp, #-16]
   1541c:	ldr	r1, [fp, #-12]
   15420:	ldr	r0, [fp, #-8]
   15424:	bl	15438 <__assert_fail@plt+0x4544>
   15428:	mov	r3, r0
   1542c:	mov	r0, r3
   15430:	sub	sp, fp, #4
   15434:	pop	{fp, pc}
   15438:	push	{fp, lr}
   1543c:	add	fp, sp, #4
   15440:	sub	sp, sp, #64	; 0x40
   15444:	str	r0, [fp, #-56]	; 0xffffffc8
   15448:	str	r1, [fp, #-60]	; 0xffffffc4
   1544c:	str	r2, [fp, #-64]	; 0xffffffc0
   15450:	str	r3, [fp, #-68]	; 0xffffffbc
   15454:	ldr	r3, [pc, #84]	; 154b0 <__assert_fail@plt+0x45bc>
   15458:	sub	ip, fp, #52	; 0x34
   1545c:	mov	lr, r3
   15460:	ldm	lr!, {r0, r1, r2, r3}
   15464:	stmia	ip!, {r0, r1, r2, r3}
   15468:	ldm	lr!, {r0, r1, r2, r3}
   1546c:	stmia	ip!, {r0, r1, r2, r3}
   15470:	ldm	lr, {r0, r1, r2, r3}
   15474:	stm	ip, {r0, r1, r2, r3}
   15478:	sub	r3, fp, #52	; 0x34
   1547c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15480:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15484:	mov	r0, r3
   15488:	bl	131dc <__assert_fail@plt+0x22e8>
   1548c:	sub	r3, fp, #52	; 0x34
   15490:	ldr	r2, [fp, #4]
   15494:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15498:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1549c:	bl	14dac <__assert_fail@plt+0x3eb8>
   154a0:	mov	r3, r0
   154a4:	mov	r0, r3
   154a8:	sub	sp, fp, #4
   154ac:	pop	{fp, pc}
   154b0:	andeq	r9, r2, ip, lsr #3
   154b4:	push	{fp, lr}
   154b8:	add	fp, sp, #4
   154bc:	sub	sp, sp, #16
   154c0:	str	r0, [fp, #-8]
   154c4:	str	r1, [fp, #-12]
   154c8:	str	r2, [fp, #-16]
   154cc:	ldr	r3, [fp, #-16]
   154d0:	ldr	r2, [fp, #-12]
   154d4:	ldr	r1, [fp, #-8]
   154d8:	mov	r0, #0
   154dc:	bl	153f0 <__assert_fail@plt+0x44fc>
   154e0:	mov	r3, r0
   154e4:	mov	r0, r3
   154e8:	sub	sp, fp, #4
   154ec:	pop	{fp, pc}
   154f0:	push	{fp, lr}
   154f4:	add	fp, sp, #4
   154f8:	sub	sp, sp, #24
   154fc:	str	r0, [fp, #-8]
   15500:	str	r1, [fp, #-12]
   15504:	str	r2, [fp, #-16]
   15508:	str	r3, [fp, #-20]	; 0xffffffec
   1550c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15510:	str	r3, [sp]
   15514:	ldr	r3, [fp, #-16]
   15518:	ldr	r2, [fp, #-12]
   1551c:	ldr	r1, [fp, #-8]
   15520:	mov	r0, #0
   15524:	bl	15438 <__assert_fail@plt+0x4544>
   15528:	mov	r3, r0
   1552c:	mov	r0, r3
   15530:	sub	sp, fp, #4
   15534:	pop	{fp, pc}
   15538:	push	{fp, lr}
   1553c:	add	fp, sp, #4
   15540:	sub	sp, sp, #16
   15544:	str	r0, [fp, #-8]
   15548:	str	r1, [fp, #-12]
   1554c:	str	r2, [fp, #-16]
   15550:	ldr	r3, [pc, #28]	; 15574 <__assert_fail@plt+0x4680>
   15554:	ldr	r2, [fp, #-16]
   15558:	ldr	r1, [fp, #-12]
   1555c:	ldr	r0, [fp, #-8]
   15560:	bl	14dac <__assert_fail@plt+0x3eb8>
   15564:	mov	r3, r0
   15568:	mov	r0, r3
   1556c:	sub	sp, fp, #4
   15570:	pop	{fp, pc}
   15574:	andeq	r9, r2, r8, lsl #2
   15578:	push	{fp, lr}
   1557c:	add	fp, sp, #4
   15580:	sub	sp, sp, #8
   15584:	str	r0, [fp, #-8]
   15588:	str	r1, [fp, #-12]
   1558c:	ldr	r2, [fp, #-12]
   15590:	ldr	r1, [fp, #-8]
   15594:	mov	r0, #0
   15598:	bl	15538 <__assert_fail@plt+0x4644>
   1559c:	mov	r3, r0
   155a0:	mov	r0, r3
   155a4:	sub	sp, fp, #4
   155a8:	pop	{fp, pc}
   155ac:	push	{fp, lr}
   155b0:	add	fp, sp, #4
   155b4:	sub	sp, sp, #8
   155b8:	str	r0, [fp, #-8]
   155bc:	str	r1, [fp, #-12]
   155c0:	mvn	r2, #0
   155c4:	ldr	r1, [fp, #-12]
   155c8:	ldr	r0, [fp, #-8]
   155cc:	bl	15538 <__assert_fail@plt+0x4644>
   155d0:	mov	r3, r0
   155d4:	mov	r0, r3
   155d8:	sub	sp, fp, #4
   155dc:	pop	{fp, pc}
   155e0:	push	{fp, lr}
   155e4:	add	fp, sp, #4
   155e8:	sub	sp, sp, #8
   155ec:	str	r0, [fp, #-8]
   155f0:	ldr	r1, [fp, #-8]
   155f4:	mov	r0, #0
   155f8:	bl	155ac <__assert_fail@plt+0x46b8>
   155fc:	mov	r3, r0
   15600:	mov	r0, r3
   15604:	sub	sp, fp, #4
   15608:	pop	{fp, pc}
   1560c:	push	{r4, r5, r6, r7, fp, lr}
   15610:	add	fp, sp, #20
   15614:	sub	sp, sp, #48	; 0x30
   15618:	str	r0, [fp, #-24]	; 0xffffffe8
   1561c:	str	r1, [fp, #-28]	; 0xffffffe4
   15620:	str	r2, [fp, #-32]	; 0xffffffe0
   15624:	str	r3, [fp, #-36]	; 0xffffffdc
   15628:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1562c:	cmp	r3, #0
   15630:	beq	15654 <__assert_fail@plt+0x4760>
   15634:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15638:	str	r3, [sp]
   1563c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15640:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15644:	ldr	r1, [pc, #1260]	; 15b38 <__assert_fail@plt+0x4c44>
   15648:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1564c:	bl	10e28 <fprintf@plt>
   15650:	b	15668 <__assert_fail@plt+0x4774>
   15654:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15658:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1565c:	ldr	r1, [pc, #1240]	; 15b3c <__assert_fail@plt+0x4c48>
   15660:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15664:	bl	10e28 <fprintf@plt>
   15668:	ldr	r0, [pc, #1232]	; 15b40 <__assert_fail@plt+0x4c4c>
   1566c:	bl	10e10 <gettext@plt>
   15670:	mov	r2, r0
   15674:	ldr	r3, [pc, #1224]	; 15b44 <__assert_fail@plt+0x4c50>
   15678:	ldr	r1, [pc, #1224]	; 15b48 <__assert_fail@plt+0x4c54>
   1567c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15680:	bl	10e28 <fprintf@plt>
   15684:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15688:	mov	r0, #10
   1568c:	bl	10d2c <fputc_unlocked@plt>
   15690:	ldr	r0, [pc, #1204]	; 15b4c <__assert_fail@plt+0x4c58>
   15694:	bl	10e10 <gettext@plt>
   15698:	mov	r3, r0
   1569c:	ldr	r2, [pc, #1196]	; 15b50 <__assert_fail@plt+0x4c5c>
   156a0:	mov	r1, r3
   156a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   156a8:	bl	10e28 <fprintf@plt>
   156ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   156b0:	mov	r0, #10
   156b4:	bl	10d2c <fputc_unlocked@plt>
   156b8:	ldr	r3, [fp, #8]
   156bc:	cmp	r3, #9
   156c0:	ldrls	pc, [pc, r3, lsl #2]
   156c4:	b	15a80 <__assert_fail@plt+0x4b8c>
   156c8:	andeq	r5, r1, r8, lsr #22
   156cc:	strdeq	r5, [r1], -r0
   156d0:	andeq	r5, r1, r4, lsl r7
   156d4:	andeq	r5, r1, r0, asr #14
   156d8:	andeq	r5, r1, r0, lsl #15
   156dc:	ldrdeq	r5, [r1], -r8
   156e0:	andeq	r5, r1, r0, asr #16
   156e4:			; <UNDEFINED> instruction: 0x000158b8
   156e8:	andeq	r5, r1, r0, asr #18
   156ec:	ldrdeq	r5, [r1], -r8
   156f0:	ldr	r0, [pc, #1116]	; 15b54 <__assert_fail@plt+0x4c60>
   156f4:	bl	10e10 <gettext@plt>
   156f8:	mov	r1, r0
   156fc:	ldr	r3, [fp, #4]
   15700:	ldr	r3, [r3]
   15704:	mov	r2, r3
   15708:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1570c:	bl	10e28 <fprintf@plt>
   15710:	b	15b2c <__assert_fail@plt+0x4c38>
   15714:	ldr	r0, [pc, #1084]	; 15b58 <__assert_fail@plt+0x4c64>
   15718:	bl	10e10 <gettext@plt>
   1571c:	mov	r1, r0
   15720:	ldr	r3, [fp, #4]
   15724:	ldr	r2, [r3]
   15728:	ldr	r3, [fp, #4]
   1572c:	add	r3, r3, #4
   15730:	ldr	r3, [r3]
   15734:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15738:	bl	10e28 <fprintf@plt>
   1573c:	b	15b2c <__assert_fail@plt+0x4c38>
   15740:	ldr	r0, [pc, #1044]	; 15b5c <__assert_fail@plt+0x4c68>
   15744:	bl	10e10 <gettext@plt>
   15748:	ldr	r3, [fp, #4]
   1574c:	ldr	r2, [r3]
   15750:	ldr	r3, [fp, #4]
   15754:	add	r3, r3, #4
   15758:	ldr	r1, [r3]
   1575c:	ldr	r3, [fp, #4]
   15760:	add	r3, r3, #8
   15764:	ldr	r3, [r3]
   15768:	str	r3, [sp]
   1576c:	mov	r3, r1
   15770:	mov	r1, r0
   15774:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15778:	bl	10e28 <fprintf@plt>
   1577c:	b	15b2c <__assert_fail@plt+0x4c38>
   15780:	ldr	r0, [pc, #984]	; 15b60 <__assert_fail@plt+0x4c6c>
   15784:	bl	10e10 <gettext@plt>
   15788:	mov	ip, r0
   1578c:	ldr	r3, [fp, #4]
   15790:	ldr	r1, [r3]
   15794:	ldr	r3, [fp, #4]
   15798:	add	r3, r3, #4
   1579c:	ldr	r0, [r3]
   157a0:	ldr	r3, [fp, #4]
   157a4:	add	r3, r3, #8
   157a8:	ldr	r3, [r3]
   157ac:	ldr	r2, [fp, #4]
   157b0:	add	r2, r2, #12
   157b4:	ldr	r2, [r2]
   157b8:	str	r2, [sp, #4]
   157bc:	str	r3, [sp]
   157c0:	mov	r3, r0
   157c4:	mov	r2, r1
   157c8:	mov	r1, ip
   157cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157d0:	bl	10e28 <fprintf@plt>
   157d4:	b	15b2c <__assert_fail@plt+0x4c38>
   157d8:	ldr	r0, [pc, #900]	; 15b64 <__assert_fail@plt+0x4c70>
   157dc:	bl	10e10 <gettext@plt>
   157e0:	mov	lr, r0
   157e4:	ldr	r3, [fp, #4]
   157e8:	ldr	r0, [r3]
   157ec:	ldr	r3, [fp, #4]
   157f0:	add	r3, r3, #4
   157f4:	ldr	ip, [r3]
   157f8:	ldr	r3, [fp, #4]
   157fc:	add	r3, r3, #8
   15800:	ldr	r3, [r3]
   15804:	ldr	r2, [fp, #4]
   15808:	add	r2, r2, #12
   1580c:	ldr	r2, [r2]
   15810:	ldr	r1, [fp, #4]
   15814:	add	r1, r1, #16
   15818:	ldr	r1, [r1]
   1581c:	str	r1, [sp, #8]
   15820:	str	r2, [sp, #4]
   15824:	str	r3, [sp]
   15828:	mov	r3, ip
   1582c:	mov	r2, r0
   15830:	mov	r1, lr
   15834:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15838:	bl	10e28 <fprintf@plt>
   1583c:	b	15b2c <__assert_fail@plt+0x4c38>
   15840:	ldr	r0, [pc, #800]	; 15b68 <__assert_fail@plt+0x4c74>
   15844:	bl	10e10 <gettext@plt>
   15848:	mov	r4, r0
   1584c:	ldr	r3, [fp, #4]
   15850:	ldr	ip, [r3]
   15854:	ldr	r3, [fp, #4]
   15858:	add	r3, r3, #4
   1585c:	ldr	lr, [r3]
   15860:	ldr	r3, [fp, #4]
   15864:	add	r3, r3, #8
   15868:	ldr	r3, [r3]
   1586c:	ldr	r2, [fp, #4]
   15870:	add	r2, r2, #12
   15874:	ldr	r2, [r2]
   15878:	ldr	r1, [fp, #4]
   1587c:	add	r1, r1, #16
   15880:	ldr	r1, [r1]
   15884:	ldr	r0, [fp, #4]
   15888:	add	r0, r0, #20
   1588c:	ldr	r0, [r0]
   15890:	str	r0, [sp, #12]
   15894:	str	r1, [sp, #8]
   15898:	str	r2, [sp, #4]
   1589c:	str	r3, [sp]
   158a0:	mov	r3, lr
   158a4:	mov	r2, ip
   158a8:	mov	r1, r4
   158ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   158b0:	bl	10e28 <fprintf@plt>
   158b4:	b	15b2c <__assert_fail@plt+0x4c38>
   158b8:	ldr	r0, [pc, #684]	; 15b6c <__assert_fail@plt+0x4c78>
   158bc:	bl	10e10 <gettext@plt>
   158c0:	mov	r5, r0
   158c4:	ldr	r3, [fp, #4]
   158c8:	ldr	lr, [r3]
   158cc:	ldr	r3, [fp, #4]
   158d0:	add	r3, r3, #4
   158d4:	ldr	r4, [r3]
   158d8:	ldr	r3, [fp, #4]
   158dc:	add	r3, r3, #8
   158e0:	ldr	r3, [r3]
   158e4:	ldr	r2, [fp, #4]
   158e8:	add	r2, r2, #12
   158ec:	ldr	r2, [r2]
   158f0:	ldr	r1, [fp, #4]
   158f4:	add	r1, r1, #16
   158f8:	ldr	r1, [r1]
   158fc:	ldr	r0, [fp, #4]
   15900:	add	r0, r0, #20
   15904:	ldr	r0, [r0]
   15908:	ldr	ip, [fp, #4]
   1590c:	add	ip, ip, #24
   15910:	ldr	ip, [ip]
   15914:	str	ip, [sp, #16]
   15918:	str	r0, [sp, #12]
   1591c:	str	r1, [sp, #8]
   15920:	str	r2, [sp, #4]
   15924:	str	r3, [sp]
   15928:	mov	r3, r4
   1592c:	mov	r2, lr
   15930:	mov	r1, r5
   15934:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15938:	bl	10e28 <fprintf@plt>
   1593c:	b	15b2c <__assert_fail@plt+0x4c38>
   15940:	ldr	r0, [pc, #552]	; 15b70 <__assert_fail@plt+0x4c7c>
   15944:	bl	10e10 <gettext@plt>
   15948:	mov	r6, r0
   1594c:	ldr	r3, [fp, #4]
   15950:	ldr	r4, [r3]
   15954:	ldr	r3, [fp, #4]
   15958:	add	r3, r3, #4
   1595c:	ldr	r5, [r3]
   15960:	ldr	r3, [fp, #4]
   15964:	add	r3, r3, #8
   15968:	ldr	r3, [r3]
   1596c:	ldr	r2, [fp, #4]
   15970:	add	r2, r2, #12
   15974:	ldr	r2, [r2]
   15978:	ldr	r1, [fp, #4]
   1597c:	add	r1, r1, #16
   15980:	ldr	r1, [r1]
   15984:	ldr	r0, [fp, #4]
   15988:	add	r0, r0, #20
   1598c:	ldr	r0, [r0]
   15990:	ldr	ip, [fp, #4]
   15994:	add	ip, ip, #24
   15998:	ldr	ip, [ip]
   1599c:	ldr	lr, [fp, #4]
   159a0:	add	lr, lr, #28
   159a4:	ldr	lr, [lr]
   159a8:	str	lr, [sp, #20]
   159ac:	str	ip, [sp, #16]
   159b0:	str	r0, [sp, #12]
   159b4:	str	r1, [sp, #8]
   159b8:	str	r2, [sp, #4]
   159bc:	str	r3, [sp]
   159c0:	mov	r3, r5
   159c4:	mov	r2, r4
   159c8:	mov	r1, r6
   159cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159d0:	bl	10e28 <fprintf@plt>
   159d4:	b	15b2c <__assert_fail@plt+0x4c38>
   159d8:	ldr	r0, [pc, #404]	; 15b74 <__assert_fail@plt+0x4c80>
   159dc:	bl	10e10 <gettext@plt>
   159e0:	mov	r7, r0
   159e4:	ldr	r3, [fp, #4]
   159e8:	ldr	r5, [r3]
   159ec:	ldr	r3, [fp, #4]
   159f0:	add	r3, r3, #4
   159f4:	ldr	r6, [r3]
   159f8:	ldr	r3, [fp, #4]
   159fc:	add	r3, r3, #8
   15a00:	ldr	r3, [r3]
   15a04:	ldr	r2, [fp, #4]
   15a08:	add	r2, r2, #12
   15a0c:	ldr	r2, [r2]
   15a10:	ldr	r1, [fp, #4]
   15a14:	add	r1, r1, #16
   15a18:	ldr	r1, [r1]
   15a1c:	ldr	r0, [fp, #4]
   15a20:	add	r0, r0, #20
   15a24:	ldr	r0, [r0]
   15a28:	ldr	ip, [fp, #4]
   15a2c:	add	ip, ip, #24
   15a30:	ldr	ip, [ip]
   15a34:	ldr	lr, [fp, #4]
   15a38:	add	lr, lr, #28
   15a3c:	ldr	lr, [lr]
   15a40:	ldr	r4, [fp, #4]
   15a44:	add	r4, r4, #32
   15a48:	ldr	r4, [r4]
   15a4c:	str	r4, [sp, #24]
   15a50:	str	lr, [sp, #20]
   15a54:	str	ip, [sp, #16]
   15a58:	str	r0, [sp, #12]
   15a5c:	str	r1, [sp, #8]
   15a60:	str	r2, [sp, #4]
   15a64:	str	r3, [sp]
   15a68:	mov	r3, r6
   15a6c:	mov	r2, r5
   15a70:	mov	r1, r7
   15a74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a78:	bl	10e28 <fprintf@plt>
   15a7c:	b	15b2c <__assert_fail@plt+0x4c38>
   15a80:	ldr	r0, [pc, #240]	; 15b78 <__assert_fail@plt+0x4c84>
   15a84:	bl	10e10 <gettext@plt>
   15a88:	mov	r7, r0
   15a8c:	ldr	r3, [fp, #4]
   15a90:	ldr	r5, [r3]
   15a94:	ldr	r3, [fp, #4]
   15a98:	add	r3, r3, #4
   15a9c:	ldr	r6, [r3]
   15aa0:	ldr	r3, [fp, #4]
   15aa4:	add	r3, r3, #8
   15aa8:	ldr	r3, [r3]
   15aac:	ldr	r2, [fp, #4]
   15ab0:	add	r2, r2, #12
   15ab4:	ldr	r2, [r2]
   15ab8:	ldr	r1, [fp, #4]
   15abc:	add	r1, r1, #16
   15ac0:	ldr	r1, [r1]
   15ac4:	ldr	r0, [fp, #4]
   15ac8:	add	r0, r0, #20
   15acc:	ldr	r0, [r0]
   15ad0:	ldr	ip, [fp, #4]
   15ad4:	add	ip, ip, #24
   15ad8:	ldr	ip, [ip]
   15adc:	ldr	lr, [fp, #4]
   15ae0:	add	lr, lr, #28
   15ae4:	ldr	lr, [lr]
   15ae8:	ldr	r4, [fp, #4]
   15aec:	add	r4, r4, #32
   15af0:	ldr	r4, [r4]
   15af4:	str	r4, [sp, #24]
   15af8:	str	lr, [sp, #20]
   15afc:	str	ip, [sp, #16]
   15b00:	str	r0, [sp, #12]
   15b04:	str	r1, [sp, #8]
   15b08:	str	r2, [sp, #4]
   15b0c:	str	r3, [sp]
   15b10:	mov	r3, r6
   15b14:	mov	r2, r5
   15b18:	mov	r1, r7
   15b1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b20:	bl	10e28 <fprintf@plt>
   15b24:	b	15b2c <__assert_fail@plt+0x4c38>
   15b28:	nop			; (mov r0, r0)
   15b2c:	nop			; (mov r0, r0)
   15b30:	sub	sp, fp, #20
   15b34:	pop	{r4, r5, r6, r7, fp, pc}
   15b38:	andeq	r8, r1, r8, lsl #14
   15b3c:	andeq	r8, r1, r4, lsl r7
   15b40:	andeq	r8, r1, ip, lsl r7
   15b44:	andeq	r0, r0, r6, ror #15
   15b48:	andeq	r8, r1, ip, lsr #20
   15b4c:	andeq	r8, r1, r0, lsr #14
   15b50:	andeq	r8, r1, ip, asr #15
   15b54:	strdeq	r8, [r1], -r0
   15b58:	andeq	r8, r1, r0, lsl #16
   15b5c:	andeq	r8, r1, r8, lsl r8
   15b60:	andeq	r8, r1, r4, lsr r8
   15b64:	andeq	r8, r1, r4, asr r8
   15b68:	andeq	r8, r1, r8, ror r8
   15b6c:	andeq	r8, r1, r0, lsr #17
   15b70:	andeq	r8, r1, ip, asr #17
   15b74:	strdeq	r8, [r1], -ip
   15b78:	andeq	r8, r1, r0, lsr r9
   15b7c:	push	{fp, lr}
   15b80:	add	fp, sp, #4
   15b84:	sub	sp, sp, #32
   15b88:	str	r0, [fp, #-16]
   15b8c:	str	r1, [fp, #-20]	; 0xffffffec
   15b90:	str	r2, [fp, #-24]	; 0xffffffe8
   15b94:	str	r3, [fp, #-28]	; 0xffffffe4
   15b98:	mov	r3, #0
   15b9c:	str	r3, [fp, #-8]
   15ba0:	b	15bb0 <__assert_fail@plt+0x4cbc>
   15ba4:	ldr	r3, [fp, #-8]
   15ba8:	add	r3, r3, #1
   15bac:	str	r3, [fp, #-8]
   15bb0:	ldr	r3, [fp, #-8]
   15bb4:	lsl	r3, r3, #2
   15bb8:	ldr	r2, [fp, #4]
   15bbc:	add	r3, r2, r3
   15bc0:	ldr	r3, [r3]
   15bc4:	cmp	r3, #0
   15bc8:	bne	15ba4 <__assert_fail@plt+0x4cb0>
   15bcc:	ldr	r3, [fp, #-8]
   15bd0:	str	r3, [sp, #4]
   15bd4:	ldr	r3, [fp, #4]
   15bd8:	str	r3, [sp]
   15bdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15be0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15be4:	ldr	r1, [fp, #-20]	; 0xffffffec
   15be8:	ldr	r0, [fp, #-16]
   15bec:	bl	1560c <__assert_fail@plt+0x4718>
   15bf0:	nop			; (mov r0, r0)
   15bf4:	sub	sp, fp, #4
   15bf8:	pop	{fp, pc}
   15bfc:	push	{fp, lr}
   15c00:	add	fp, sp, #4
   15c04:	sub	sp, sp, #72	; 0x48
   15c08:	str	r0, [fp, #-56]	; 0xffffffc8
   15c0c:	str	r1, [fp, #-60]	; 0xffffffc4
   15c10:	str	r2, [fp, #-64]	; 0xffffffc0
   15c14:	str	r3, [fp, #-68]	; 0xffffffbc
   15c18:	mov	r3, #0
   15c1c:	str	r3, [fp, #-8]
   15c20:	b	15c30 <__assert_fail@plt+0x4d3c>
   15c24:	ldr	r3, [fp, #-8]
   15c28:	add	r3, r3, #1
   15c2c:	str	r3, [fp, #-8]
   15c30:	ldr	r3, [fp, #-8]
   15c34:	cmp	r3, #9
   15c38:	bhi	15c7c <__assert_fail@plt+0x4d88>
   15c3c:	ldr	r3, [fp, #4]
   15c40:	add	r2, r3, #4
   15c44:	str	r2, [fp, #4]
   15c48:	ldr	r2, [r3]
   15c4c:	ldr	r3, [fp, #-8]
   15c50:	lsl	r3, r3, #2
   15c54:	sub	r1, fp, #4
   15c58:	add	r3, r1, r3
   15c5c:	str	r2, [r3, #-44]	; 0xffffffd4
   15c60:	ldr	r3, [fp, #-8]
   15c64:	lsl	r3, r3, #2
   15c68:	sub	r2, fp, #4
   15c6c:	add	r3, r2, r3
   15c70:	ldr	r3, [r3, #-44]	; 0xffffffd4
   15c74:	cmp	r3, #0
   15c78:	bne	15c24 <__assert_fail@plt+0x4d30>
   15c7c:	ldr	r3, [fp, #-8]
   15c80:	str	r3, [sp, #4]
   15c84:	sub	r3, fp, #48	; 0x30
   15c88:	str	r3, [sp]
   15c8c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15c90:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15c94:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15c98:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15c9c:	bl	1560c <__assert_fail@plt+0x4718>
   15ca0:	nop			; (mov r0, r0)
   15ca4:	sub	sp, fp, #4
   15ca8:	pop	{fp, pc}
   15cac:	push	{r3}		; (str r3, [sp, #-4]!)
   15cb0:	push	{fp, lr}
   15cb4:	add	fp, sp, #4
   15cb8:	sub	sp, sp, #36	; 0x24
   15cbc:	str	r0, [fp, #-20]	; 0xffffffec
   15cc0:	str	r1, [fp, #-24]	; 0xffffffe8
   15cc4:	str	r2, [fp, #-28]	; 0xffffffe4
   15cc8:	add	r3, fp, #8
   15ccc:	str	r3, [fp, #-12]
   15cd0:	ldr	r3, [fp, #-12]
   15cd4:	str	r3, [sp]
   15cd8:	ldr	r3, [fp, #4]
   15cdc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15ce0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15ce4:	ldr	r0, [fp, #-20]	; 0xffffffec
   15ce8:	bl	15bfc <__assert_fail@plt+0x4d08>
   15cec:	nop			; (mov r0, r0)
   15cf0:	sub	sp, fp, #4
   15cf4:	pop	{fp, lr}
   15cf8:	add	sp, sp, #4
   15cfc:	bx	lr
   15d00:	push	{fp, lr}
   15d04:	add	fp, sp, #4
   15d08:	ldr	r3, [pc, #96]	; 15d70 <__assert_fail@plt+0x4e7c>
   15d0c:	ldr	r3, [r3]
   15d10:	mov	r1, r3
   15d14:	mov	r0, #10
   15d18:	bl	10d2c <fputc_unlocked@plt>
   15d1c:	ldr	r0, [pc, #80]	; 15d74 <__assert_fail@plt+0x4e80>
   15d20:	bl	10e10 <gettext@plt>
   15d24:	mov	r3, r0
   15d28:	ldr	r1, [pc, #72]	; 15d78 <__assert_fail@plt+0x4e84>
   15d2c:	mov	r0, r3
   15d30:	bl	10ccc <printf@plt>
   15d34:	ldr	r0, [pc, #64]	; 15d7c <__assert_fail@plt+0x4e88>
   15d38:	bl	10e10 <gettext@plt>
   15d3c:	mov	r3, r0
   15d40:	ldr	r2, [pc, #56]	; 15d80 <__assert_fail@plt+0x4e8c>
   15d44:	ldr	r1, [pc, #56]	; 15d84 <__assert_fail@plt+0x4e90>
   15d48:	mov	r0, r3
   15d4c:	bl	10ccc <printf@plt>
   15d50:	ldr	r0, [pc, #48]	; 15d88 <__assert_fail@plt+0x4e94>
   15d54:	bl	10e10 <gettext@plt>
   15d58:	mov	r3, r0
   15d5c:	ldr	r1, [pc, #40]	; 15d8c <__assert_fail@plt+0x4e98>
   15d60:	mov	r0, r3
   15d64:	bl	10ccc <printf@plt>
   15d68:	nop			; (mov r0, r0)
   15d6c:	pop	{fp, pc}
   15d70:	andeq	r9, r2, r4, asr r1
   15d74:	andeq	r8, r1, ip, ror #18
   15d78:	andeq	r8, r1, r0, lsl #19
   15d7c:	muleq	r1, r8, r9
   15d80:	andeq	r8, r1, ip, lsr #19
   15d84:	ldrdeq	r8, [r1], -r4
   15d88:	andeq	r8, r1, r4, ror #19
   15d8c:	andeq	r8, r1, ip, lsl #20
   15d90:	push	{fp, lr}
   15d94:	add	fp, sp, #4
   15d98:	sub	sp, sp, #16
   15d9c:	str	r0, [fp, #-8]
   15da0:	str	r1, [fp, #-12]
   15da4:	str	r2, [fp, #-16]
   15da8:	ldr	r2, [fp, #-16]
   15dac:	ldr	r1, [fp, #-12]
   15db0:	ldr	r0, [fp, #-8]
   15db4:	bl	15f20 <__assert_fail@plt+0x502c>
   15db8:	mov	r3, r0
   15dbc:	mov	r0, r3
   15dc0:	sub	sp, fp, #4
   15dc4:	pop	{fp, pc}
   15dc8:	push	{fp, lr}
   15dcc:	add	fp, sp, #4
   15dd0:	sub	sp, sp, #8
   15dd4:	str	r0, [fp, #-8]
   15dd8:	ldr	r3, [fp, #-8]
   15ddc:	cmp	r3, #0
   15de0:	bne	15de8 <__assert_fail@plt+0x4ef4>
   15de4:	bl	16914 <__assert_fail@plt+0x5a20>
   15de8:	ldr	r3, [fp, #-8]
   15dec:	mov	r0, r3
   15df0:	sub	sp, fp, #4
   15df4:	pop	{fp, pc}
   15df8:	push	{fp, lr}
   15dfc:	add	fp, sp, #4
   15e00:	sub	sp, sp, #8
   15e04:	str	r0, [fp, #-8]
   15e08:	ldr	r0, [fp, #-8]
   15e0c:	bl	16a14 <__assert_fail@plt+0x5b20>
   15e10:	mov	r3, r0
   15e14:	mov	r0, r3
   15e18:	bl	15dc8 <__assert_fail@plt+0x4ed4>
   15e1c:	mov	r3, r0
   15e20:	mov	r0, r3
   15e24:	sub	sp, fp, #4
   15e28:	pop	{fp, pc}
   15e2c:	push	{fp, lr}
   15e30:	add	fp, sp, #4
   15e34:	sub	sp, sp, #8
   15e38:	str	r0, [fp, #-8]
   15e3c:	ldr	r0, [fp, #-8]
   15e40:	bl	16d20 <__assert_fail@plt+0x5e2c>
   15e44:	mov	r3, r0
   15e48:	mov	r0, r3
   15e4c:	bl	15dc8 <__assert_fail@plt+0x4ed4>
   15e50:	mov	r3, r0
   15e54:	mov	r0, r3
   15e58:	sub	sp, fp, #4
   15e5c:	pop	{fp, pc}
   15e60:	push	{fp, lr}
   15e64:	add	fp, sp, #4
   15e68:	sub	sp, sp, #8
   15e6c:	str	r0, [fp, #-8]
   15e70:	ldr	r0, [fp, #-8]
   15e74:	bl	15df8 <__assert_fail@plt+0x4f04>
   15e78:	mov	r3, r0
   15e7c:	mov	r0, r3
   15e80:	sub	sp, fp, #4
   15e84:	pop	{fp, pc}
   15e88:	push	{fp, lr}
   15e8c:	add	fp, sp, #4
   15e90:	sub	sp, sp, #16
   15e94:	str	r0, [fp, #-16]
   15e98:	str	r1, [fp, #-20]	; 0xffffffec
   15e9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15ea0:	ldr	r0, [fp, #-16]
   15ea4:	bl	16abc <__assert_fail@plt+0x5bc8>
   15ea8:	str	r0, [fp, #-8]
   15eac:	ldr	r3, [fp, #-8]
   15eb0:	cmp	r3, #0
   15eb4:	bne	15ed4 <__assert_fail@plt+0x4fe0>
   15eb8:	ldr	r3, [fp, #-16]
   15ebc:	cmp	r3, #0
   15ec0:	beq	15ed0 <__assert_fail@plt+0x4fdc>
   15ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ec8:	cmp	r3, #0
   15ecc:	beq	15ed4 <__assert_fail@plt+0x4fe0>
   15ed0:	bl	16914 <__assert_fail@plt+0x5a20>
   15ed4:	ldr	r3, [fp, #-8]
   15ed8:	mov	r0, r3
   15edc:	sub	sp, fp, #4
   15ee0:	pop	{fp, pc}
   15ee4:	push	{fp, lr}
   15ee8:	add	fp, sp, #4
   15eec:	sub	sp, sp, #8
   15ef0:	str	r0, [fp, #-8]
   15ef4:	str	r1, [fp, #-12]
   15ef8:	ldr	r1, [fp, #-12]
   15efc:	ldr	r0, [fp, #-8]
   15f00:	bl	16d4c <__assert_fail@plt+0x5e58>
   15f04:	mov	r3, r0
   15f08:	mov	r0, r3
   15f0c:	bl	15dc8 <__assert_fail@plt+0x4ed4>
   15f10:	mov	r3, r0
   15f14:	mov	r0, r3
   15f18:	sub	sp, fp, #4
   15f1c:	pop	{fp, pc}
   15f20:	push	{fp, lr}
   15f24:	add	fp, sp, #4
   15f28:	sub	sp, sp, #24
   15f2c:	str	r0, [fp, #-16]
   15f30:	str	r1, [fp, #-20]	; 0xffffffec
   15f34:	str	r2, [fp, #-24]	; 0xffffffe8
   15f38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15f3c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15f40:	ldr	r0, [fp, #-16]
   15f44:	bl	16f40 <__assert_fail@plt+0x604c>
   15f48:	str	r0, [fp, #-8]
   15f4c:	ldr	r3, [fp, #-8]
   15f50:	cmp	r3, #0
   15f54:	bne	15f80 <__assert_fail@plt+0x508c>
   15f58:	ldr	r3, [fp, #-16]
   15f5c:	cmp	r3, #0
   15f60:	beq	15f7c <__assert_fail@plt+0x5088>
   15f64:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f68:	cmp	r3, #0
   15f6c:	beq	15f80 <__assert_fail@plt+0x508c>
   15f70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f74:	cmp	r3, #0
   15f78:	beq	15f80 <__assert_fail@plt+0x508c>
   15f7c:	bl	16914 <__assert_fail@plt+0x5a20>
   15f80:	ldr	r3, [fp, #-8]
   15f84:	mov	r0, r3
   15f88:	sub	sp, fp, #4
   15f8c:	pop	{fp, pc}
   15f90:	push	{fp, lr}
   15f94:	add	fp, sp, #4
   15f98:	sub	sp, sp, #16
   15f9c:	str	r0, [fp, #-8]
   15fa0:	str	r1, [fp, #-12]
   15fa4:	str	r2, [fp, #-16]
   15fa8:	ldr	r2, [fp, #-16]
   15fac:	ldr	r1, [fp, #-12]
   15fb0:	ldr	r0, [fp, #-8]
   15fb4:	bl	16dd4 <__assert_fail@plt+0x5ee0>
   15fb8:	mov	r3, r0
   15fbc:	mov	r0, r3
   15fc0:	bl	15dc8 <__assert_fail@plt+0x4ed4>
   15fc4:	mov	r3, r0
   15fc8:	mov	r0, r3
   15fcc:	sub	sp, fp, #4
   15fd0:	pop	{fp, pc}
   15fd4:	push	{fp, lr}
   15fd8:	add	fp, sp, #4
   15fdc:	sub	sp, sp, #8
   15fe0:	str	r0, [fp, #-8]
   15fe4:	str	r1, [fp, #-12]
   15fe8:	ldr	r2, [fp, #-12]
   15fec:	ldr	r1, [fp, #-8]
   15ff0:	mov	r0, #0
   15ff4:	bl	15f20 <__assert_fail@plt+0x502c>
   15ff8:	mov	r3, r0
   15ffc:	mov	r0, r3
   16000:	sub	sp, fp, #4
   16004:	pop	{fp, pc}
   16008:	push	{fp, lr}
   1600c:	add	fp, sp, #4
   16010:	sub	sp, sp, #8
   16014:	str	r0, [fp, #-8]
   16018:	str	r1, [fp, #-12]
   1601c:	ldr	r2, [fp, #-12]
   16020:	ldr	r1, [fp, #-8]
   16024:	mov	r0, #0
   16028:	bl	15f90 <__assert_fail@plt+0x509c>
   1602c:	mov	r3, r0
   16030:	mov	r0, r3
   16034:	sub	sp, fp, #4
   16038:	pop	{fp, pc}
   1603c:	push	{fp, lr}
   16040:	add	fp, sp, #4
   16044:	sub	sp, sp, #8
   16048:	str	r0, [fp, #-8]
   1604c:	str	r1, [fp, #-12]
   16050:	mov	r2, #1
   16054:	ldr	r1, [fp, #-12]
   16058:	ldr	r0, [fp, #-8]
   1605c:	bl	16070 <__assert_fail@plt+0x517c>
   16060:	mov	r3, r0
   16064:	mov	r0, r3
   16068:	sub	sp, fp, #4
   1606c:	pop	{fp, pc}
   16070:	push	{fp, lr}
   16074:	add	fp, sp, #4
   16078:	sub	sp, sp, #24
   1607c:	str	r0, [fp, #-16]
   16080:	str	r1, [fp, #-20]	; 0xffffffec
   16084:	str	r2, [fp, #-24]	; 0xffffffe8
   16088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1608c:	ldr	r3, [r3]
   16090:	str	r3, [fp, #-8]
   16094:	ldr	r3, [fp, #-16]
   16098:	cmp	r3, #0
   1609c:	bne	160e8 <__assert_fail@plt+0x51f4>
   160a0:	ldr	r3, [fp, #-8]
   160a4:	cmp	r3, #0
   160a8:	bne	1614c <__assert_fail@plt+0x5258>
   160ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   160b0:	mov	r0, #64	; 0x40
   160b4:	bl	176e8 <__assert_fail@plt+0x67f4>
   160b8:	mov	r3, r0
   160bc:	str	r3, [fp, #-8]
   160c0:	ldr	r3, [fp, #-8]
   160c4:	cmp	r3, #0
   160c8:	moveq	r3, #1
   160cc:	movne	r3, #0
   160d0:	uxtb	r3, r3
   160d4:	mov	r2, r3
   160d8:	ldr	r3, [fp, #-8]
   160dc:	add	r3, r2, r3
   160e0:	str	r3, [fp, #-8]
   160e4:	b	1614c <__assert_fail@plt+0x5258>
   160e8:	ldr	r3, [fp, #-8]
   160ec:	lsr	r3, r3, #1
   160f0:	add	r3, r3, #1
   160f4:	mvn	r2, r3
   160f8:	ldr	r3, [fp, #-8]
   160fc:	cmp	r2, r3
   16100:	bcs	16124 <__assert_fail@plt+0x5230>
   16104:	ldr	r3, [fp, #-8]
   16108:	lsr	r2, r3, #1
   1610c:	ldr	r3, [fp, #-8]
   16110:	add	r3, r2, r3
   16114:	add	r3, r3, #1
   16118:	str	r3, [fp, #-8]
   1611c:	mov	r3, #1
   16120:	b	16140 <__assert_fail@plt+0x524c>
   16124:	ldr	r3, [fp, #-8]
   16128:	lsr	r2, r3, #1
   1612c:	ldr	r3, [fp, #-8]
   16130:	add	r3, r2, r3
   16134:	add	r3, r3, #1
   16138:	str	r3, [fp, #-8]
   1613c:	mov	r3, #0
   16140:	cmp	r3, #0
   16144:	beq	1614c <__assert_fail@plt+0x5258>
   16148:	bl	16914 <__assert_fail@plt+0x5a20>
   1614c:	ldr	r3, [fp, #-8]
   16150:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16154:	mov	r1, r3
   16158:	ldr	r0, [fp, #-16]
   1615c:	bl	15f20 <__assert_fail@plt+0x502c>
   16160:	str	r0, [fp, #-16]
   16164:	ldr	r2, [fp, #-8]
   16168:	ldr	r3, [fp, #-20]	; 0xffffffec
   1616c:	str	r2, [r3]
   16170:	ldr	r3, [fp, #-16]
   16174:	mov	r0, r3
   16178:	sub	sp, fp, #4
   1617c:	pop	{fp, pc}
   16180:	push	{fp, lr}
   16184:	add	fp, sp, #4
   16188:	sub	sp, sp, #32
   1618c:	str	r0, [fp, #-24]	; 0xffffffe8
   16190:	str	r1, [fp, #-28]	; 0xffffffe4
   16194:	str	r2, [fp, #-32]	; 0xffffffe0
   16198:	str	r3, [fp, #-36]	; 0xffffffdc
   1619c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   161a0:	ldr	r3, [r3]
   161a4:	str	r3, [fp, #-8]
   161a8:	ldr	r3, [fp, #-8]
   161ac:	asr	r3, r3, #1
   161b0:	cmp	r3, #0
   161b4:	bge	161dc <__assert_fail@plt+0x52e8>
   161b8:	ldr	r3, [fp, #-8]
   161bc:	asr	r3, r3, #1
   161c0:	rsb	r2, r3, #-2147483648	; 0x80000000
   161c4:	ldr	r3, [fp, #-8]
   161c8:	cmp	r2, r3
   161cc:	movgt	r3, #1
   161d0:	movle	r3, #0
   161d4:	uxtb	r3, r3
   161d8:	b	16230 <__assert_fail@plt+0x533c>
   161dc:	ldr	r3, [fp, #-8]
   161e0:	cmp	r3, #0
   161e4:	bge	1620c <__assert_fail@plt+0x5318>
   161e8:	ldr	r3, [fp, #-8]
   161ec:	asr	r2, r3, #1
   161f0:	ldr	r3, [fp, #-8]
   161f4:	rsb	r3, r3, #-2147483648	; 0x80000000
   161f8:	cmp	r2, r3
   161fc:	movlt	r3, #1
   16200:	movge	r3, #0
   16204:	uxtb	r3, r3
   16208:	b	16230 <__assert_fail@plt+0x533c>
   1620c:	ldr	r3, [fp, #-8]
   16210:	asr	r2, r3, #1
   16214:	mvn	r3, #-2147483648	; 0x80000000
   16218:	sub	r3, r3, r2
   1621c:	ldr	r2, [fp, #-8]
   16220:	cmp	r3, r2
   16224:	movlt	r3, #1
   16228:	movge	r3, #0
   1622c:	uxtb	r3, r3
   16230:	cmp	r3, #0
   16234:	beq	16258 <__assert_fail@plt+0x5364>
   16238:	ldr	r3, [fp, #-8]
   1623c:	asr	r3, r3, #1
   16240:	mov	r2, r3
   16244:	ldr	r3, [fp, #-8]
   16248:	add	r3, r2, r3
   1624c:	str	r3, [fp, #-16]
   16250:	mov	r3, #1
   16254:	b	16274 <__assert_fail@plt+0x5380>
   16258:	ldr	r3, [fp, #-8]
   1625c:	asr	r3, r3, #1
   16260:	mov	r2, r3
   16264:	ldr	r3, [fp, #-8]
   16268:	add	r3, r2, r3
   1626c:	str	r3, [fp, #-16]
   16270:	mov	r3, #0
   16274:	cmp	r3, #0
   16278:	beq	16284 <__assert_fail@plt+0x5390>
   1627c:	mvn	r3, #-2147483648	; 0x80000000
   16280:	str	r3, [fp, #-16]
   16284:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16288:	cmp	r3, #0
   1628c:	blt	162a8 <__assert_fail@plt+0x53b4>
   16290:	ldr	r3, [fp, #-16]
   16294:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16298:	cmp	r2, r3
   1629c:	bge	162a8 <__assert_fail@plt+0x53b4>
   162a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   162a4:	str	r3, [fp, #-16]
   162a8:	ldr	r3, [fp, #4]
   162ac:	cmp	r3, #0
   162b0:	bge	16340 <__assert_fail@plt+0x544c>
   162b4:	ldr	r3, [fp, #-16]
   162b8:	cmp	r3, #0
   162bc:	bge	162ec <__assert_fail@plt+0x53f8>
   162c0:	ldr	r1, [fp, #4]
   162c4:	mvn	r0, #-2147483648	; 0x80000000
   162c8:	bl	178f4 <__assert_fail@plt+0x6a00>
   162cc:	mov	r3, r0
   162d0:	mov	r2, r3
   162d4:	ldr	r3, [fp, #-16]
   162d8:	cmp	r2, r3
   162dc:	movgt	r3, #1
   162e0:	movle	r3, #0
   162e4:	uxtb	r3, r3
   162e8:	b	163e0 <__assert_fail@plt+0x54ec>
   162ec:	ldr	r3, [fp, #4]
   162f0:	cmn	r3, #1
   162f4:	bne	16314 <__assert_fail@plt+0x5420>
   162f8:	ldr	r3, [fp, #-16]
   162fc:	add	r3, r3, #-2147483648	; 0x80000000
   16300:	cmp	r3, #0
   16304:	movgt	r3, #1
   16308:	movle	r3, #0
   1630c:	uxtb	r3, r3
   16310:	b	163e0 <__assert_fail@plt+0x54ec>
   16314:	ldr	r1, [fp, #4]
   16318:	mov	r0, #-2147483648	; 0x80000000
   1631c:	bl	178f4 <__assert_fail@plt+0x6a00>
   16320:	mov	r3, r0
   16324:	mov	r2, r3
   16328:	ldr	r3, [fp, #-16]
   1632c:	cmp	r2, r3
   16330:	movlt	r3, #1
   16334:	movge	r3, #0
   16338:	uxtb	r3, r3
   1633c:	b	163e0 <__assert_fail@plt+0x54ec>
   16340:	ldr	r3, [fp, #4]
   16344:	cmp	r3, #0
   16348:	beq	163dc <__assert_fail@plt+0x54e8>
   1634c:	ldr	r3, [fp, #-16]
   16350:	cmp	r3, #0
   16354:	bge	163b0 <__assert_fail@plt+0x54bc>
   16358:	ldr	r3, [fp, #-16]
   1635c:	cmn	r3, #1
   16360:	bne	16380 <__assert_fail@plt+0x548c>
   16364:	ldr	r3, [fp, #4]
   16368:	add	r3, r3, #-2147483648	; 0x80000000
   1636c:	cmp	r3, #0
   16370:	movgt	r3, #1
   16374:	movle	r3, #0
   16378:	uxtb	r3, r3
   1637c:	b	163e0 <__assert_fail@plt+0x54ec>
   16380:	ldr	r3, [fp, #-16]
   16384:	mov	r1, r3
   16388:	mov	r0, #-2147483648	; 0x80000000
   1638c:	bl	178f4 <__assert_fail@plt+0x6a00>
   16390:	mov	r3, r0
   16394:	mov	r2, r3
   16398:	ldr	r3, [fp, #4]
   1639c:	cmp	r2, r3
   163a0:	movlt	r3, #1
   163a4:	movge	r3, #0
   163a8:	uxtb	r3, r3
   163ac:	b	163e0 <__assert_fail@plt+0x54ec>
   163b0:	ldr	r1, [fp, #4]
   163b4:	mvn	r0, #-2147483648	; 0x80000000
   163b8:	bl	178f4 <__assert_fail@plt+0x6a00>
   163bc:	mov	r3, r0
   163c0:	mov	r2, r3
   163c4:	ldr	r3, [fp, #-16]
   163c8:	cmp	r2, r3
   163cc:	movlt	r3, #1
   163d0:	movge	r3, #0
   163d4:	uxtb	r3, r3
   163d8:	b	163e0 <__assert_fail@plt+0x54ec>
   163dc:	mov	r3, #0
   163e0:	cmp	r3, #0
   163e4:	beq	16404 <__assert_fail@plt+0x5510>
   163e8:	ldr	r3, [fp, #-16]
   163ec:	mov	r2, r3
   163f0:	ldr	r3, [fp, #4]
   163f4:	mul	r3, r3, r2
   163f8:	str	r3, [fp, #-20]	; 0xffffffec
   163fc:	mov	r3, #1
   16400:	b	1641c <__assert_fail@plt+0x5528>
   16404:	ldr	r3, [fp, #-16]
   16408:	mov	r2, r3
   1640c:	ldr	r3, [fp, #4]
   16410:	mul	r3, r3, r2
   16414:	str	r3, [fp, #-20]	; 0xffffffec
   16418:	mov	r3, #0
   1641c:	cmp	r3, #0
   16420:	beq	1642c <__assert_fail@plt+0x5538>
   16424:	mvn	r3, #-2147483648	; 0x80000000
   16428:	b	16444 <__assert_fail@plt+0x5550>
   1642c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16430:	cmp	r3, #63	; 0x3f
   16434:	bgt	16440 <__assert_fail@plt+0x554c>
   16438:	mov	r3, #64	; 0x40
   1643c:	b	16444 <__assert_fail@plt+0x5550>
   16440:	mov	r3, #0
   16444:	str	r3, [fp, #-12]
   16448:	ldr	r3, [fp, #-12]
   1644c:	cmp	r3, #0
   16450:	beq	1648c <__assert_fail@plt+0x5598>
   16454:	ldr	r1, [fp, #4]
   16458:	ldr	r0, [fp, #-12]
   1645c:	bl	178f4 <__assert_fail@plt+0x6a00>
   16460:	mov	r3, r0
   16464:	str	r3, [fp, #-16]
   16468:	ldr	r3, [fp, #-12]
   1646c:	ldr	r1, [fp, #4]
   16470:	mov	r0, r3
   16474:	bl	17b14 <__assert_fail@plt+0x6c20>
   16478:	mov	r3, r1
   1647c:	mov	r2, r3
   16480:	ldr	r3, [fp, #-12]
   16484:	sub	r3, r3, r2
   16488:	str	r3, [fp, #-20]	; 0xffffffec
   1648c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16490:	cmp	r3, #0
   16494:	bne	164a4 <__assert_fail@plt+0x55b0>
   16498:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1649c:	mov	r2, #0
   164a0:	str	r2, [r3]
   164a4:	ldr	r2, [fp, #-16]
   164a8:	ldr	r3, [fp, #-8]
   164ac:	sub	r2, r2, r3
   164b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164b4:	cmp	r2, r3
   164b8:	bge	166f0 <__assert_fail@plt+0x57fc>
   164bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164c0:	cmp	r3, #0
   164c4:	bge	164e8 <__assert_fail@plt+0x55f4>
   164c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164cc:	rsb	r2, r3, #-2147483648	; 0x80000000
   164d0:	ldr	r3, [fp, #-8]
   164d4:	cmp	r2, r3
   164d8:	movgt	r3, #1
   164dc:	movle	r3, #0
   164e0:	uxtb	r3, r3
   164e4:	b	16534 <__assert_fail@plt+0x5640>
   164e8:	ldr	r3, [fp, #-8]
   164ec:	cmp	r3, #0
   164f0:	bge	16514 <__assert_fail@plt+0x5620>
   164f4:	ldr	r3, [fp, #-8]
   164f8:	rsb	r2, r3, #-2147483648	; 0x80000000
   164fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16500:	cmp	r2, r3
   16504:	movgt	r3, #1
   16508:	movle	r3, #0
   1650c:	uxtb	r3, r3
   16510:	b	16534 <__assert_fail@plt+0x5640>
   16514:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16518:	mvn	r3, #-2147483648	; 0x80000000
   1651c:	sub	r3, r3, r2
   16520:	ldr	r2, [fp, #-8]
   16524:	cmp	r3, r2
   16528:	movlt	r3, #1
   1652c:	movge	r3, #0
   16530:	uxtb	r3, r3
   16534:	cmp	r3, #0
   16538:	beq	16550 <__assert_fail@plt+0x565c>
   1653c:	ldr	r2, [fp, #-8]
   16540:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16544:	add	r3, r2, r3
   16548:	str	r3, [fp, #-16]
   1654c:	b	166ec <__assert_fail@plt+0x57f8>
   16550:	ldr	r2, [fp, #-8]
   16554:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16558:	add	r3, r2, r3
   1655c:	str	r3, [fp, #-16]
   16560:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16564:	cmp	r3, #0
   16568:	blt	1657c <__assert_fail@plt+0x5688>
   1656c:	ldr	r3, [fp, #-16]
   16570:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16574:	cmp	r2, r3
   16578:	blt	166ec <__assert_fail@plt+0x57f8>
   1657c:	ldr	r3, [fp, #4]
   16580:	cmp	r3, #0
   16584:	bge	16614 <__assert_fail@plt+0x5720>
   16588:	ldr	r3, [fp, #-16]
   1658c:	cmp	r3, #0
   16590:	bge	165c0 <__assert_fail@plt+0x56cc>
   16594:	ldr	r1, [fp, #4]
   16598:	mvn	r0, #-2147483648	; 0x80000000
   1659c:	bl	178f4 <__assert_fail@plt+0x6a00>
   165a0:	mov	r3, r0
   165a4:	mov	r2, r3
   165a8:	ldr	r3, [fp, #-16]
   165ac:	cmp	r2, r3
   165b0:	movgt	r3, #1
   165b4:	movle	r3, #0
   165b8:	uxtb	r3, r3
   165bc:	b	166b4 <__assert_fail@plt+0x57c0>
   165c0:	ldr	r3, [fp, #4]
   165c4:	cmn	r3, #1
   165c8:	bne	165e8 <__assert_fail@plt+0x56f4>
   165cc:	ldr	r3, [fp, #-16]
   165d0:	add	r3, r3, #-2147483648	; 0x80000000
   165d4:	cmp	r3, #0
   165d8:	movgt	r3, #1
   165dc:	movle	r3, #0
   165e0:	uxtb	r3, r3
   165e4:	b	166b4 <__assert_fail@plt+0x57c0>
   165e8:	ldr	r1, [fp, #4]
   165ec:	mov	r0, #-2147483648	; 0x80000000
   165f0:	bl	178f4 <__assert_fail@plt+0x6a00>
   165f4:	mov	r3, r0
   165f8:	mov	r2, r3
   165fc:	ldr	r3, [fp, #-16]
   16600:	cmp	r2, r3
   16604:	movlt	r3, #1
   16608:	movge	r3, #0
   1660c:	uxtb	r3, r3
   16610:	b	166b4 <__assert_fail@plt+0x57c0>
   16614:	ldr	r3, [fp, #4]
   16618:	cmp	r3, #0
   1661c:	beq	166b0 <__assert_fail@plt+0x57bc>
   16620:	ldr	r3, [fp, #-16]
   16624:	cmp	r3, #0
   16628:	bge	16684 <__assert_fail@plt+0x5790>
   1662c:	ldr	r3, [fp, #-16]
   16630:	cmn	r3, #1
   16634:	bne	16654 <__assert_fail@plt+0x5760>
   16638:	ldr	r3, [fp, #4]
   1663c:	add	r3, r3, #-2147483648	; 0x80000000
   16640:	cmp	r3, #0
   16644:	movgt	r3, #1
   16648:	movle	r3, #0
   1664c:	uxtb	r3, r3
   16650:	b	166b4 <__assert_fail@plt+0x57c0>
   16654:	ldr	r3, [fp, #-16]
   16658:	mov	r1, r3
   1665c:	mov	r0, #-2147483648	; 0x80000000
   16660:	bl	178f4 <__assert_fail@plt+0x6a00>
   16664:	mov	r3, r0
   16668:	mov	r2, r3
   1666c:	ldr	r3, [fp, #4]
   16670:	cmp	r2, r3
   16674:	movlt	r3, #1
   16678:	movge	r3, #0
   1667c:	uxtb	r3, r3
   16680:	b	166b4 <__assert_fail@plt+0x57c0>
   16684:	ldr	r1, [fp, #4]
   16688:	mvn	r0, #-2147483648	; 0x80000000
   1668c:	bl	178f4 <__assert_fail@plt+0x6a00>
   16690:	mov	r3, r0
   16694:	mov	r2, r3
   16698:	ldr	r3, [fp, #-16]
   1669c:	cmp	r2, r3
   166a0:	movlt	r3, #1
   166a4:	movge	r3, #0
   166a8:	uxtb	r3, r3
   166ac:	b	166b4 <__assert_fail@plt+0x57c0>
   166b0:	mov	r3, #0
   166b4:	cmp	r3, #0
   166b8:	beq	166d4 <__assert_fail@plt+0x57e0>
   166bc:	ldr	r3, [fp, #-16]
   166c0:	mov	r2, r3
   166c4:	ldr	r3, [fp, #4]
   166c8:	mul	r3, r3, r2
   166cc:	str	r3, [fp, #-20]	; 0xffffffec
   166d0:	b	166ec <__assert_fail@plt+0x57f8>
   166d4:	ldr	r3, [fp, #-16]
   166d8:	mov	r2, r3
   166dc:	ldr	r3, [fp, #4]
   166e0:	mul	r3, r3, r2
   166e4:	str	r3, [fp, #-20]	; 0xffffffec
   166e8:	b	166f0 <__assert_fail@plt+0x57fc>
   166ec:	bl	16914 <__assert_fail@plt+0x5a20>
   166f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   166f4:	mov	r1, r3
   166f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166fc:	bl	15e88 <__assert_fail@plt+0x4f94>
   16700:	str	r0, [fp, #-24]	; 0xffffffe8
   16704:	ldr	r2, [fp, #-16]
   16708:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1670c:	str	r2, [r3]
   16710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16714:	mov	r0, r3
   16718:	sub	sp, fp, #4
   1671c:	pop	{fp, pc}
   16720:	push	{fp, lr}
   16724:	add	fp, sp, #4
   16728:	sub	sp, sp, #8
   1672c:	str	r0, [fp, #-8]
   16730:	mov	r1, #1
   16734:	ldr	r0, [fp, #-8]
   16738:	bl	16778 <__assert_fail@plt+0x5884>
   1673c:	mov	r3, r0
   16740:	mov	r0, r3
   16744:	sub	sp, fp, #4
   16748:	pop	{fp, pc}
   1674c:	push	{fp, lr}
   16750:	add	fp, sp, #4
   16754:	sub	sp, sp, #8
   16758:	str	r0, [fp, #-8]
   1675c:	mov	r1, #1
   16760:	ldr	r0, [fp, #-8]
   16764:	bl	167b4 <__assert_fail@plt+0x58c0>
   16768:	mov	r3, r0
   1676c:	mov	r0, r3
   16770:	sub	sp, fp, #4
   16774:	pop	{fp, pc}
   16778:	push	{fp, lr}
   1677c:	add	fp, sp, #4
   16780:	sub	sp, sp, #8
   16784:	str	r0, [fp, #-8]
   16788:	str	r1, [fp, #-12]
   1678c:	ldr	r1, [fp, #-12]
   16790:	ldr	r0, [fp, #-8]
   16794:	bl	16950 <__assert_fail@plt+0x5a5c>
   16798:	mov	r3, r0
   1679c:	mov	r0, r3
   167a0:	bl	15dc8 <__assert_fail@plt+0x4ed4>
   167a4:	mov	r3, r0
   167a8:	mov	r0, r3
   167ac:	sub	sp, fp, #4
   167b0:	pop	{fp, pc}
   167b4:	push	{fp, lr}
   167b8:	add	fp, sp, #4
   167bc:	sub	sp, sp, #8
   167c0:	str	r0, [fp, #-8]
   167c4:	str	r1, [fp, #-12]
   167c8:	ldr	r1, [fp, #-12]
   167cc:	ldr	r0, [fp, #-8]
   167d0:	bl	16d9c <__assert_fail@plt+0x5ea8>
   167d4:	mov	r3, r0
   167d8:	mov	r0, r3
   167dc:	bl	15dc8 <__assert_fail@plt+0x4ed4>
   167e0:	mov	r3, r0
   167e4:	mov	r0, r3
   167e8:	sub	sp, fp, #4
   167ec:	pop	{fp, pc}
   167f0:	push	{fp, lr}
   167f4:	add	fp, sp, #4
   167f8:	sub	sp, sp, #8
   167fc:	str	r0, [fp, #-8]
   16800:	str	r1, [fp, #-12]
   16804:	ldr	r0, [fp, #-12]
   16808:	bl	15df8 <__assert_fail@plt+0x4f04>
   1680c:	mov	r3, r0
   16810:	ldr	r2, [fp, #-12]
   16814:	ldr	r1, [fp, #-8]
   16818:	mov	r0, r3
   1681c:	bl	10cfc <memcpy@plt>
   16820:	mov	r3, r0
   16824:	mov	r0, r3
   16828:	sub	sp, fp, #4
   1682c:	pop	{fp, pc}
   16830:	push	{fp, lr}
   16834:	add	fp, sp, #4
   16838:	sub	sp, sp, #8
   1683c:	str	r0, [fp, #-8]
   16840:	str	r1, [fp, #-12]
   16844:	ldr	r0, [fp, #-12]
   16848:	bl	15e2c <__assert_fail@plt+0x4f38>
   1684c:	mov	r3, r0
   16850:	mov	r0, r3
   16854:	ldr	r3, [fp, #-12]
   16858:	mov	r2, r3
   1685c:	ldr	r1, [fp, #-8]
   16860:	bl	10cfc <memcpy@plt>
   16864:	mov	r3, r0
   16868:	mov	r0, r3
   1686c:	sub	sp, fp, #4
   16870:	pop	{fp, pc}
   16874:	push	{fp, lr}
   16878:	add	fp, sp, #4
   1687c:	sub	sp, sp, #16
   16880:	str	r0, [fp, #-16]
   16884:	str	r1, [fp, #-20]	; 0xffffffec
   16888:	ldr	r3, [fp, #-20]	; 0xffffffec
   1688c:	add	r3, r3, #1
   16890:	mov	r0, r3
   16894:	bl	15e2c <__assert_fail@plt+0x4f38>
   16898:	mov	r3, r0
   1689c:	str	r3, [fp, #-8]
   168a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   168a4:	ldr	r2, [fp, #-8]
   168a8:	add	r3, r2, r3
   168ac:	mov	r2, #0
   168b0:	strb	r2, [r3]
   168b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   168b8:	mov	r2, r3
   168bc:	ldr	r1, [fp, #-16]
   168c0:	ldr	r0, [fp, #-8]
   168c4:	bl	10cfc <memcpy@plt>
   168c8:	mov	r3, r0
   168cc:	mov	r0, r3
   168d0:	sub	sp, fp, #4
   168d4:	pop	{fp, pc}
   168d8:	push	{fp, lr}
   168dc:	add	fp, sp, #4
   168e0:	sub	sp, sp, #8
   168e4:	str	r0, [fp, #-8]
   168e8:	ldr	r0, [fp, #-8]
   168ec:	bl	10e1c <strlen@plt>
   168f0:	mov	r3, r0
   168f4:	add	r3, r3, #1
   168f8:	mov	r1, r3
   168fc:	ldr	r0, [fp, #-8]
   16900:	bl	167f0 <__assert_fail@plt+0x58fc>
   16904:	mov	r3, r0
   16908:	mov	r0, r3
   1690c:	sub	sp, fp, #4
   16910:	pop	{fp, pc}
   16914:	push	{r4, r5, fp, lr}
   16918:	add	fp, sp, #12
   1691c:	ldr	r3, [pc, #32]	; 16944 <__assert_fail@plt+0x5a50>
   16920:	ldr	r4, [r3]
   16924:	ldr	r0, [pc, #28]	; 16948 <__assert_fail@plt+0x5a54>
   16928:	bl	10e10 <gettext@plt>
   1692c:	mov	r3, r0
   16930:	ldr	r2, [pc, #20]	; 1694c <__assert_fail@plt+0x5a58>
   16934:	mov	r1, #0
   16938:	mov	r0, r4
   1693c:	bl	10db0 <error@plt>
   16940:	bl	10ed0 <abort@plt>
   16944:	strdeq	r9, [r2], -r4
   16948:	andeq	r8, r1, ip, asr sl
   1694c:	andeq	r8, r1, r0, ror sl
   16950:	push	{r4, r5, fp, lr}
   16954:	add	fp, sp, #12
   16958:	sub	sp, sp, #16
   1695c:	str	r0, [fp, #-24]	; 0xffffffe8
   16960:	str	r1, [fp, #-28]	; 0xffffffe4
   16964:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16968:	cmp	r3, #0
   1696c:	beq	1697c <__assert_fail@plt+0x5a88>
   16970:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16974:	cmp	r3, #0
   16978:	bne	1698c <__assert_fail@plt+0x5a98>
   1697c:	mov	r3, #1
   16980:	str	r3, [fp, #-28]	; 0xffffffe4
   16984:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16988:	str	r3, [fp, #-24]	; 0xffffffe8
   1698c:	mov	r1, #0
   16990:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16994:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16998:	umull	r2, r3, r2, r3
   1699c:	mov	r4, r3
   169a0:	mov	r5, #0
   169a4:	cmp	r4, #0
   169a8:	beq	169b0 <__assert_fail@plt+0x5abc>
   169ac:	mov	r1, #1
   169b0:	cmp	r2, #0
   169b4:	bge	169bc <__assert_fail@plt+0x5ac8>
   169b8:	mov	r1, #1
   169bc:	mov	r3, r2
   169c0:	str	r3, [fp, #-20]	; 0xffffffec
   169c4:	mov	r3, r1
   169c8:	and	r3, r3, #1
   169cc:	uxtb	r3, r3
   169d0:	cmp	r3, #0
   169d4:	beq	169f0 <__assert_fail@plt+0x5afc>
   169d8:	bl	10e34 <__errno_location@plt>
   169dc:	mov	r2, r0
   169e0:	mov	r3, #12
   169e4:	str	r3, [r2]
   169e8:	mov	r3, #0
   169ec:	b	16a08 <__assert_fail@plt+0x5b14>
   169f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   169f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   169f8:	bl	10c90 <calloc@plt>
   169fc:	mov	r3, r0
   16a00:	str	r3, [fp, #-16]
   16a04:	ldr	r3, [fp, #-16]
   16a08:	mov	r0, r3
   16a0c:	sub	sp, fp, #12
   16a10:	pop	{r4, r5, fp, pc}
   16a14:	push	{r4, r5, fp, lr}
   16a18:	add	fp, sp, #12
   16a1c:	sub	sp, sp, #16
   16a20:	str	r0, [fp, #-24]	; 0xffffffe8
   16a24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a28:	cmp	r3, #0
   16a2c:	bne	16a38 <__assert_fail@plt+0x5b44>
   16a30:	mov	r3, #1
   16a34:	str	r3, [fp, #-24]	; 0xffffffe8
   16a38:	mov	r1, #0
   16a3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a40:	mov	r2, r3
   16a44:	mov	r3, #0
   16a48:	mov	r4, r3
   16a4c:	mov	r5, #0
   16a50:	cmp	r4, #0
   16a54:	beq	16a5c <__assert_fail@plt+0x5b68>
   16a58:	mov	r1, #1
   16a5c:	cmp	r2, #0
   16a60:	bge	16a68 <__assert_fail@plt+0x5b74>
   16a64:	mov	r1, #1
   16a68:	mov	r3, r2
   16a6c:	str	r3, [fp, #-20]	; 0xffffffec
   16a70:	mov	r3, r1
   16a74:	and	r3, r3, #1
   16a78:	uxtb	r3, r3
   16a7c:	cmp	r3, #0
   16a80:	beq	16a9c <__assert_fail@plt+0x5ba8>
   16a84:	bl	10e34 <__errno_location@plt>
   16a88:	mov	r2, r0
   16a8c:	mov	r3, #12
   16a90:	str	r3, [r2]
   16a94:	mov	r3, #0
   16a98:	b	16ab0 <__assert_fail@plt+0x5bbc>
   16a9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16aa0:	bl	10dbc <malloc@plt>
   16aa4:	mov	r3, r0
   16aa8:	str	r3, [fp, #-16]
   16aac:	ldr	r3, [fp, #-16]
   16ab0:	mov	r0, r3
   16ab4:	sub	sp, fp, #12
   16ab8:	pop	{r4, r5, fp, pc}
   16abc:	push	{r4, r5, fp, lr}
   16ac0:	add	fp, sp, #12
   16ac4:	sub	sp, sp, #16
   16ac8:	str	r0, [fp, #-24]	; 0xffffffe8
   16acc:	str	r1, [fp, #-28]	; 0xffffffe4
   16ad0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ad4:	cmp	r3, #0
   16ad8:	bne	16aec <__assert_fail@plt+0x5bf8>
   16adc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16ae0:	bl	16a14 <__assert_fail@plt+0x5b20>
   16ae4:	mov	r3, r0
   16ae8:	b	16b80 <__assert_fail@plt+0x5c8c>
   16aec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16af0:	cmp	r3, #0
   16af4:	bne	16b08 <__assert_fail@plt+0x5c14>
   16af8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16afc:	bl	12d40 <__assert_fail@plt+0x1e4c>
   16b00:	mov	r3, #0
   16b04:	b	16b80 <__assert_fail@plt+0x5c8c>
   16b08:	mov	r1, #0
   16b0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b10:	mov	r2, r3
   16b14:	mov	r3, #0
   16b18:	mov	r4, r3
   16b1c:	mov	r5, #0
   16b20:	cmp	r4, #0
   16b24:	beq	16b2c <__assert_fail@plt+0x5c38>
   16b28:	mov	r1, #1
   16b2c:	cmp	r2, #0
   16b30:	bge	16b38 <__assert_fail@plt+0x5c44>
   16b34:	mov	r1, #1
   16b38:	mov	r3, r2
   16b3c:	str	r3, [fp, #-20]	; 0xffffffec
   16b40:	mov	r3, r1
   16b44:	and	r3, r3, #1
   16b48:	uxtb	r3, r3
   16b4c:	cmp	r3, #0
   16b50:	beq	16b6c <__assert_fail@plt+0x5c78>
   16b54:	bl	10e34 <__errno_location@plt>
   16b58:	mov	r2, r0
   16b5c:	mov	r3, #12
   16b60:	str	r3, [r2]
   16b64:	mov	r3, #0
   16b68:	b	16b80 <__assert_fail@plt+0x5c8c>
   16b6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16b70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16b74:	bl	10d44 <realloc@plt>
   16b78:	str	r0, [fp, #-16]
   16b7c:	ldr	r3, [fp, #-16]
   16b80:	mov	r0, r3
   16b84:	sub	sp, fp, #12
   16b88:	pop	{r4, r5, fp, pc}
   16b8c:	push	{r4, r5, fp, lr}
   16b90:	add	fp, sp, #12
   16b94:	sub	sp, sp, #16
   16b98:	str	r0, [fp, #-24]	; 0xffffffe8
   16b9c:	str	r1, [fp, #-28]	; 0xffffffe4
   16ba0:	ldr	r5, [fp, #-24]	; 0xffffffe8
   16ba4:	ldr	r4, [fp, #-28]	; 0xffffffe4
   16ba8:	cmp	r5, r4
   16bac:	bne	16bb8 <__assert_fail@plt+0x5cc4>
   16bb0:	mov	r3, #0
   16bb4:	b	16c18 <__assert_fail@plt+0x5d24>
   16bb8:	ldrb	r3, [r5]
   16bbc:	mov	r0, r3
   16bc0:	bl	17464 <__assert_fail@plt+0x6570>
   16bc4:	mov	r3, r0
   16bc8:	strb	r3, [fp, #-13]
   16bcc:	ldrb	r3, [r4]
   16bd0:	mov	r0, r3
   16bd4:	bl	17464 <__assert_fail@plt+0x6570>
   16bd8:	mov	r3, r0
   16bdc:	strb	r3, [fp, #-14]
   16be0:	ldrb	r3, [fp, #-13]
   16be4:	cmp	r3, #0
   16be8:	beq	16c08 <__assert_fail@plt+0x5d14>
   16bec:	add	r5, r5, #1
   16bf0:	add	r4, r4, #1
   16bf4:	ldrb	r2, [fp, #-13]
   16bf8:	ldrb	r3, [fp, #-14]
   16bfc:	cmp	r2, r3
   16c00:	beq	16bb8 <__assert_fail@plt+0x5cc4>
   16c04:	b	16c0c <__assert_fail@plt+0x5d18>
   16c08:	nop			; (mov r0, r0)
   16c0c:	ldrb	r2, [fp, #-13]
   16c10:	ldrb	r3, [fp, #-14]
   16c14:	sub	r3, r2, r3
   16c18:	mov	r0, r3
   16c1c:	sub	sp, fp, #12
   16c20:	pop	{r4, r5, fp, pc}
   16c24:	push	{fp, lr}
   16c28:	add	fp, sp, #4
   16c2c:	sub	sp, sp, #16
   16c30:	str	r0, [fp, #-16]
   16c34:	ldr	r0, [fp, #-16]
   16c38:	bl	10d8c <__fpending@plt>
   16c3c:	mov	r3, r0
   16c40:	cmp	r3, #0
   16c44:	movne	r3, #1
   16c48:	moveq	r3, #0
   16c4c:	strb	r3, [fp, #-5]
   16c50:	ldr	r0, [fp, #-16]
   16c54:	bl	10d98 <ferror_unlocked@plt>
   16c58:	mov	r3, r0
   16c5c:	cmp	r3, #0
   16c60:	movne	r3, #1
   16c64:	moveq	r3, #0
   16c68:	strb	r3, [fp, #-6]
   16c6c:	ldr	r0, [fp, #-16]
   16c70:	bl	12ba0 <__assert_fail@plt+0x1cac>
   16c74:	mov	r3, r0
   16c78:	cmp	r3, #0
   16c7c:	movne	r3, #1
   16c80:	moveq	r3, #0
   16c84:	strb	r3, [fp, #-7]
   16c88:	ldrb	r3, [fp, #-6]
   16c8c:	cmp	r3, #0
   16c90:	bne	16cc0 <__assert_fail@plt+0x5dcc>
   16c94:	ldrb	r3, [fp, #-7]
   16c98:	cmp	r3, #0
   16c9c:	beq	16cec <__assert_fail@plt+0x5df8>
   16ca0:	ldrb	r3, [fp, #-5]
   16ca4:	cmp	r3, #0
   16ca8:	bne	16cc0 <__assert_fail@plt+0x5dcc>
   16cac:	bl	10e34 <__errno_location@plt>
   16cb0:	mov	r3, r0
   16cb4:	ldr	r3, [r3]
   16cb8:	cmp	r3, #9
   16cbc:	beq	16cec <__assert_fail@plt+0x5df8>
   16cc0:	ldrb	r3, [fp, #-7]
   16cc4:	eor	r3, r3, #1
   16cc8:	uxtb	r3, r3
   16ccc:	cmp	r3, #0
   16cd0:	beq	16ce4 <__assert_fail@plt+0x5df0>
   16cd4:	bl	10e34 <__errno_location@plt>
   16cd8:	mov	r2, r0
   16cdc:	mov	r3, #0
   16ce0:	str	r3, [r2]
   16ce4:	mvn	r3, #0
   16ce8:	b	16cf0 <__assert_fail@plt+0x5dfc>
   16cec:	mov	r3, #0
   16cf0:	mov	r0, r3
   16cf4:	sub	sp, fp, #4
   16cf8:	pop	{fp, pc}
   16cfc:	push	{fp, lr}
   16d00:	add	fp, sp, #4
   16d04:	bl	10e34 <__errno_location@plt>
   16d08:	mov	r2, r0
   16d0c:	mov	r3, #12
   16d10:	str	r3, [r2]
   16d14:	mov	r3, #0
   16d18:	mov	r0, r3
   16d1c:	pop	{fp, pc}
   16d20:	push	{fp, lr}
   16d24:	add	fp, sp, #4
   16d28:	sub	sp, sp, #8
   16d2c:	str	r0, [fp, #-8]
   16d30:	ldr	r3, [fp, #-8]
   16d34:	mov	r0, r3
   16d38:	bl	16a14 <__assert_fail@plt+0x5b20>
   16d3c:	mov	r3, r0
   16d40:	mov	r0, r3
   16d44:	sub	sp, fp, #4
   16d48:	pop	{fp, pc}
   16d4c:	push	{fp, lr}
   16d50:	add	fp, sp, #4
   16d54:	sub	sp, sp, #8
   16d58:	str	r0, [fp, #-8]
   16d5c:	str	r1, [fp, #-12]
   16d60:	ldr	r3, [fp, #-12]
   16d64:	cmp	r3, #0
   16d68:	moveq	r3, #1
   16d6c:	movne	r3, #0
   16d70:	uxtb	r3, r3
   16d74:	mov	r2, r3
   16d78:	ldr	r3, [fp, #-12]
   16d7c:	orr	r3, r2, r3
   16d80:	mov	r1, r3
   16d84:	ldr	r0, [fp, #-8]
   16d88:	bl	16abc <__assert_fail@plt+0x5bc8>
   16d8c:	mov	r3, r0
   16d90:	mov	r0, r3
   16d94:	sub	sp, fp, #4
   16d98:	pop	{fp, pc}
   16d9c:	push	{fp, lr}
   16da0:	add	fp, sp, #4
   16da4:	sub	sp, sp, #8
   16da8:	str	r0, [fp, #-8]
   16dac:	str	r1, [fp, #-12]
   16db0:	ldr	r3, [fp, #-8]
   16db4:	ldr	r2, [fp, #-12]
   16db8:	mov	r1, r2
   16dbc:	mov	r0, r3
   16dc0:	bl	16950 <__assert_fail@plt+0x5a5c>
   16dc4:	mov	r3, r0
   16dc8:	mov	r0, r3
   16dcc:	sub	sp, fp, #4
   16dd0:	pop	{fp, pc}
   16dd4:	push	{fp, lr}
   16dd8:	add	fp, sp, #4
   16ddc:	sub	sp, sp, #16
   16de0:	str	r0, [fp, #-8]
   16de4:	str	r1, [fp, #-12]
   16de8:	str	r2, [fp, #-16]
   16dec:	ldr	r3, [fp, #-12]
   16df0:	cmp	r3, #0
   16df4:	beq	16e04 <__assert_fail@plt+0x5f10>
   16df8:	ldr	r3, [fp, #-16]
   16dfc:	cmp	r3, #0
   16e00:	bne	16e14 <__assert_fail@plt+0x5f20>
   16e04:	mov	r3, #1
   16e08:	str	r3, [fp, #-16]
   16e0c:	ldr	r3, [fp, #-16]
   16e10:	str	r3, [fp, #-12]
   16e14:	ldr	r3, [fp, #-12]
   16e18:	ldr	r2, [fp, #-16]
   16e1c:	mov	r1, r3
   16e20:	ldr	r0, [fp, #-8]
   16e24:	bl	16f40 <__assert_fail@plt+0x604c>
   16e28:	mov	r3, r0
   16e2c:	mov	r0, r3
   16e30:	sub	sp, fp, #4
   16e34:	pop	{fp, pc}
   16e38:	push	{fp, lr}
   16e3c:	add	fp, sp, #4
   16e40:	sub	sp, sp, #8
   16e44:	mov	r0, #14
   16e48:	bl	10e94 <nl_langinfo@plt>
   16e4c:	str	r0, [fp, #-8]
   16e50:	ldr	r3, [fp, #-8]
   16e54:	cmp	r3, #0
   16e58:	bne	16e64 <__assert_fail@plt+0x5f70>
   16e5c:	ldr	r3, [pc, #40]	; 16e8c <__assert_fail@plt+0x5f98>
   16e60:	str	r3, [fp, #-8]
   16e64:	ldr	r3, [fp, #-8]
   16e68:	ldrb	r3, [r3]
   16e6c:	cmp	r3, #0
   16e70:	bne	16e7c <__assert_fail@plt+0x5f88>
   16e74:	ldr	r3, [pc, #20]	; 16e90 <__assert_fail@plt+0x5f9c>
   16e78:	str	r3, [fp, #-8]
   16e7c:	ldr	r3, [fp, #-8]
   16e80:	mov	r0, r3
   16e84:	sub	sp, fp, #4
   16e88:	pop	{fp, pc}
   16e8c:	andeq	r8, r1, r4, ror sl
   16e90:	andeq	r8, r1, r8, ror sl
   16e94:	push	{fp, lr}
   16e98:	add	fp, sp, #4
   16e9c:	sub	sp, sp, #32
   16ea0:	str	r0, [fp, #-24]	; 0xffffffe8
   16ea4:	str	r1, [fp, #-28]	; 0xffffffe4
   16ea8:	str	r2, [fp, #-32]	; 0xffffffe0
   16eac:	str	r3, [fp, #-36]	; 0xffffffdc
   16eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16eb4:	cmp	r3, #0
   16eb8:	bne	16ec4 <__assert_fail@plt+0x5fd0>
   16ebc:	sub	r3, fp, #16
   16ec0:	str	r3, [fp, #-24]	; 0xffffffe8
   16ec4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16ec8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16ecc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16ed0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ed4:	bl	10da4 <mbrtowc@plt>
   16ed8:	str	r0, [fp, #-8]
   16edc:	ldr	r3, [fp, #-8]
   16ee0:	cmn	r3, #3
   16ee4:	bls	16f30 <__assert_fail@plt+0x603c>
   16ee8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16eec:	cmp	r3, #0
   16ef0:	beq	16f30 <__assert_fail@plt+0x603c>
   16ef4:	mov	r0, #0
   16ef8:	bl	174e4 <__assert_fail@plt+0x65f0>
   16efc:	mov	r3, r0
   16f00:	eor	r3, r3, #1
   16f04:	uxtb	r3, r3
   16f08:	cmp	r3, #0
   16f0c:	beq	16f30 <__assert_fail@plt+0x603c>
   16f10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f14:	ldrb	r3, [r3]
   16f18:	strb	r3, [fp, #-9]
   16f1c:	ldrb	r2, [fp, #-9]
   16f20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f24:	str	r2, [r3]
   16f28:	mov	r3, #1
   16f2c:	b	16f34 <__assert_fail@plt+0x6040>
   16f30:	ldr	r3, [fp, #-8]
   16f34:	mov	r0, r3
   16f38:	sub	sp, fp, #4
   16f3c:	pop	{fp, pc}
   16f40:	push	{fp, lr}
   16f44:	add	fp, sp, #4
   16f48:	sub	sp, sp, #24
   16f4c:	str	r0, [fp, #-16]
   16f50:	str	r1, [fp, #-20]	; 0xffffffec
   16f54:	str	r2, [fp, #-24]	; 0xffffffe8
   16f58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f5c:	cmp	r3, #0
   16f60:	beq	16f9c <__assert_fail@plt+0x60a8>
   16f64:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16f68:	mvn	r0, #0
   16f6c:	bl	176e8 <__assert_fail@plt+0x67f4>
   16f70:	mov	r3, r0
   16f74:	mov	r2, r3
   16f78:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f7c:	cmp	r2, r3
   16f80:	bcs	16f9c <__assert_fail@plt+0x60a8>
   16f84:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16f8c:	mul	r3, r2, r3
   16f90:	str	r3, [fp, #-8]
   16f94:	mov	r3, #1
   16f98:	b	16fb0 <__assert_fail@plt+0x60bc>
   16f9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16fa0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16fa4:	mul	r3, r2, r3
   16fa8:	str	r3, [fp, #-8]
   16fac:	mov	r3, #0
   16fb0:	cmp	r3, #0
   16fb4:	beq	16fd0 <__assert_fail@plt+0x60dc>
   16fb8:	bl	10e34 <__errno_location@plt>
   16fbc:	mov	r2, r0
   16fc0:	mov	r3, #12
   16fc4:	str	r3, [r2]
   16fc8:	mov	r3, #0
   16fcc:	b	16fe4 <__assert_fail@plt+0x60f0>
   16fd0:	ldr	r3, [fp, #-8]
   16fd4:	mov	r1, r3
   16fd8:	ldr	r0, [fp, #-16]
   16fdc:	bl	16abc <__assert_fail@plt+0x5bc8>
   16fe0:	mov	r3, r0
   16fe4:	mov	r0, r3
   16fe8:	sub	sp, fp, #4
   16fec:	pop	{fp, pc}
   16ff0:	push	{fp}		; (str fp, [sp, #-4]!)
   16ff4:	add	fp, sp, #0
   16ff8:	sub	sp, sp, #12
   16ffc:	str	r0, [fp, #-8]
   17000:	ldr	r3, [fp, #-8]
   17004:	cmp	r3, #90	; 0x5a
   17008:	bgt	17024 <__assert_fail@plt+0x6130>
   1700c:	cmp	r3, #65	; 0x41
   17010:	bge	17030 <__assert_fail@plt+0x613c>
   17014:	sub	r3, r3, #48	; 0x30
   17018:	cmp	r3, #9
   1701c:	bhi	17038 <__assert_fail@plt+0x6144>
   17020:	b	17030 <__assert_fail@plt+0x613c>
   17024:	sub	r3, r3, #97	; 0x61
   17028:	cmp	r3, #25
   1702c:	bhi	17038 <__assert_fail@plt+0x6144>
   17030:	mov	r3, #1
   17034:	b	1703c <__assert_fail@plt+0x6148>
   17038:	mov	r3, #0
   1703c:	mov	r0, r3
   17040:	add	sp, fp, #0
   17044:	pop	{fp}		; (ldr fp, [sp], #4)
   17048:	bx	lr
   1704c:	push	{fp}		; (str fp, [sp, #-4]!)
   17050:	add	fp, sp, #0
   17054:	sub	sp, sp, #12
   17058:	str	r0, [fp, #-8]
   1705c:	ldr	r3, [fp, #-8]
   17060:	cmp	r3, #65	; 0x41
   17064:	blt	17084 <__assert_fail@plt+0x6190>
   17068:	cmp	r3, #90	; 0x5a
   1706c:	ble	1707c <__assert_fail@plt+0x6188>
   17070:	sub	r3, r3, #97	; 0x61
   17074:	cmp	r3, #25
   17078:	bhi	17084 <__assert_fail@plt+0x6190>
   1707c:	mov	r3, #1
   17080:	b	17088 <__assert_fail@plt+0x6194>
   17084:	mov	r3, #0
   17088:	mov	r0, r3
   1708c:	add	sp, fp, #0
   17090:	pop	{fp}		; (ldr fp, [sp], #4)
   17094:	bx	lr
   17098:	push	{fp}		; (str fp, [sp, #-4]!)
   1709c:	add	fp, sp, #0
   170a0:	sub	sp, sp, #12
   170a4:	str	r0, [fp, #-8]
   170a8:	ldr	r3, [fp, #-8]
   170ac:	add	r3, r3, #0
   170b0:	cmp	r3, #127	; 0x7f
   170b4:	bhi	170c0 <__assert_fail@plt+0x61cc>
   170b8:	mov	r3, #1
   170bc:	b	170c4 <__assert_fail@plt+0x61d0>
   170c0:	mov	r3, #0
   170c4:	mov	r0, r3
   170c8:	add	sp, fp, #0
   170cc:	pop	{fp}		; (ldr fp, [sp], #4)
   170d0:	bx	lr
   170d4:	push	{fp}		; (str fp, [sp, #-4]!)
   170d8:	add	fp, sp, #0
   170dc:	sub	sp, sp, #12
   170e0:	str	r0, [fp, #-8]
   170e4:	ldr	r3, [fp, #-8]
   170e8:	cmp	r3, #32
   170ec:	beq	170fc <__assert_fail@plt+0x6208>
   170f0:	ldr	r3, [fp, #-8]
   170f4:	cmp	r3, #9
   170f8:	bne	17104 <__assert_fail@plt+0x6210>
   170fc:	mov	r3, #1
   17100:	b	17108 <__assert_fail@plt+0x6214>
   17104:	mov	r3, #0
   17108:	and	r3, r3, #1
   1710c:	uxtb	r3, r3
   17110:	mov	r0, r3
   17114:	add	sp, fp, #0
   17118:	pop	{fp}		; (ldr fp, [sp], #4)
   1711c:	bx	lr
   17120:	push	{fp}		; (str fp, [sp, #-4]!)
   17124:	add	fp, sp, #0
   17128:	sub	sp, sp, #12
   1712c:	str	r0, [fp, #-8]
   17130:	ldr	r3, [fp, #-8]
   17134:	cmp	r3, #0
   17138:	blt	17154 <__assert_fail@plt+0x6260>
   1713c:	cmp	r3, #31
   17140:	ble	1714c <__assert_fail@plt+0x6258>
   17144:	cmp	r3, #127	; 0x7f
   17148:	bne	17154 <__assert_fail@plt+0x6260>
   1714c:	mov	r3, #1
   17150:	b	17158 <__assert_fail@plt+0x6264>
   17154:	mov	r3, #0
   17158:	mov	r0, r3
   1715c:	add	sp, fp, #0
   17160:	pop	{fp}		; (ldr fp, [sp], #4)
   17164:	bx	lr
   17168:	push	{fp}		; (str fp, [sp, #-4]!)
   1716c:	add	fp, sp, #0
   17170:	sub	sp, sp, #12
   17174:	str	r0, [fp, #-8]
   17178:	ldr	r3, [fp, #-8]
   1717c:	sub	r3, r3, #48	; 0x30
   17180:	cmp	r3, #9
   17184:	bhi	17190 <__assert_fail@plt+0x629c>
   17188:	mov	r3, #1
   1718c:	b	17194 <__assert_fail@plt+0x62a0>
   17190:	mov	r3, #0
   17194:	mov	r0, r3
   17198:	add	sp, fp, #0
   1719c:	pop	{fp}		; (ldr fp, [sp], #4)
   171a0:	bx	lr
   171a4:	push	{fp}		; (str fp, [sp, #-4]!)
   171a8:	add	fp, sp, #0
   171ac:	sub	sp, sp, #12
   171b0:	str	r0, [fp, #-8]
   171b4:	ldr	r3, [fp, #-8]
   171b8:	sub	r3, r3, #33	; 0x21
   171bc:	cmp	r3, #93	; 0x5d
   171c0:	bhi	171cc <__assert_fail@plt+0x62d8>
   171c4:	mov	r3, #1
   171c8:	b	171d0 <__assert_fail@plt+0x62dc>
   171cc:	mov	r3, #0
   171d0:	mov	r0, r3
   171d4:	add	sp, fp, #0
   171d8:	pop	{fp}		; (ldr fp, [sp], #4)
   171dc:	bx	lr
   171e0:	push	{fp}		; (str fp, [sp, #-4]!)
   171e4:	add	fp, sp, #0
   171e8:	sub	sp, sp, #12
   171ec:	str	r0, [fp, #-8]
   171f0:	ldr	r3, [fp, #-8]
   171f4:	sub	r3, r3, #97	; 0x61
   171f8:	cmp	r3, #25
   171fc:	bhi	17208 <__assert_fail@plt+0x6314>
   17200:	mov	r3, #1
   17204:	b	1720c <__assert_fail@plt+0x6318>
   17208:	mov	r3, #0
   1720c:	mov	r0, r3
   17210:	add	sp, fp, #0
   17214:	pop	{fp}		; (ldr fp, [sp], #4)
   17218:	bx	lr
   1721c:	push	{fp}		; (str fp, [sp, #-4]!)
   17220:	add	fp, sp, #0
   17224:	sub	sp, sp, #12
   17228:	str	r0, [fp, #-8]
   1722c:	ldr	r3, [fp, #-8]
   17230:	sub	r3, r3, #32
   17234:	cmp	r3, #94	; 0x5e
   17238:	bhi	17244 <__assert_fail@plt+0x6350>
   1723c:	mov	r3, #1
   17240:	b	17248 <__assert_fail@plt+0x6354>
   17244:	mov	r3, #0
   17248:	mov	r0, r3
   1724c:	add	sp, fp, #0
   17250:	pop	{fp}		; (ldr fp, [sp], #4)
   17254:	bx	lr
   17258:	push	{fp}		; (str fp, [sp, #-4]!)
   1725c:	add	fp, sp, #0
   17260:	sub	sp, sp, #12
   17264:	str	r0, [fp, #-8]
   17268:	ldr	r3, [fp, #-8]
   1726c:	cmp	r3, #64	; 0x40
   17270:	bgt	1728c <__assert_fail@plt+0x6398>
   17274:	cmp	r3, #58	; 0x3a
   17278:	bge	172a8 <__assert_fail@plt+0x63b4>
   1727c:	sub	r3, r3, #33	; 0x21
   17280:	cmp	r3, #14
   17284:	bhi	172b0 <__assert_fail@plt+0x63bc>
   17288:	b	172a8 <__assert_fail@plt+0x63b4>
   1728c:	cmp	r3, #91	; 0x5b
   17290:	blt	172b0 <__assert_fail@plt+0x63bc>
   17294:	cmp	r3, #96	; 0x60
   17298:	ble	172a8 <__assert_fail@plt+0x63b4>
   1729c:	sub	r3, r3, #123	; 0x7b
   172a0:	cmp	r3, #3
   172a4:	bhi	172b0 <__assert_fail@plt+0x63bc>
   172a8:	mov	r3, #1
   172ac:	b	172b4 <__assert_fail@plt+0x63c0>
   172b0:	mov	r3, #0
   172b4:	mov	r0, r3
   172b8:	add	sp, fp, #0
   172bc:	pop	{fp}		; (ldr fp, [sp], #4)
   172c0:	bx	lr
   172c4:	push	{fp}		; (str fp, [sp, #-4]!)
   172c8:	add	fp, sp, #0
   172cc:	sub	sp, sp, #12
   172d0:	str	r0, [fp, #-8]
   172d4:	ldr	r3, [fp, #-8]
   172d8:	cmp	r3, #9
   172dc:	blt	172f8 <__assert_fail@plt+0x6404>
   172e0:	cmp	r3, #13
   172e4:	ble	172f0 <__assert_fail@plt+0x63fc>
   172e8:	cmp	r3, #32
   172ec:	bne	172f8 <__assert_fail@plt+0x6404>
   172f0:	mov	r3, #1
   172f4:	b	172fc <__assert_fail@plt+0x6408>
   172f8:	mov	r3, #0
   172fc:	mov	r0, r3
   17300:	add	sp, fp, #0
   17304:	pop	{fp}		; (ldr fp, [sp], #4)
   17308:	bx	lr
   1730c:	push	{fp}		; (str fp, [sp, #-4]!)
   17310:	add	fp, sp, #0
   17314:	sub	sp, sp, #12
   17318:	str	r0, [fp, #-8]
   1731c:	ldr	r3, [fp, #-8]
   17320:	sub	r3, r3, #65	; 0x41
   17324:	cmp	r3, #25
   17328:	bhi	17334 <__assert_fail@plt+0x6440>
   1732c:	mov	r3, #1
   17330:	b	17338 <__assert_fail@plt+0x6444>
   17334:	mov	r3, #0
   17338:	mov	r0, r3
   1733c:	add	sp, fp, #0
   17340:	pop	{fp}		; (ldr fp, [sp], #4)
   17344:	bx	lr
   17348:	push	{fp}		; (str fp, [sp, #-4]!)
   1734c:	add	fp, sp, #0
   17350:	sub	sp, sp, #12
   17354:	str	r0, [fp, #-8]
   17358:	ldr	r3, [fp, #-8]
   1735c:	sub	r3, r3, #48	; 0x30
   17360:	cmp	r3, #54	; 0x36
   17364:	addls	pc, pc, r3, lsl #2
   17368:	b	17450 <__assert_fail@plt+0x655c>
   1736c:	b	17448 <__assert_fail@plt+0x6554>
   17370:	b	17448 <__assert_fail@plt+0x6554>
   17374:	b	17448 <__assert_fail@plt+0x6554>
   17378:	b	17448 <__assert_fail@plt+0x6554>
   1737c:	b	17448 <__assert_fail@plt+0x6554>
   17380:	b	17448 <__assert_fail@plt+0x6554>
   17384:	b	17448 <__assert_fail@plt+0x6554>
   17388:	b	17448 <__assert_fail@plt+0x6554>
   1738c:	b	17448 <__assert_fail@plt+0x6554>
   17390:	b	17448 <__assert_fail@plt+0x6554>
   17394:	b	17450 <__assert_fail@plt+0x655c>
   17398:	b	17450 <__assert_fail@plt+0x655c>
   1739c:	b	17450 <__assert_fail@plt+0x655c>
   173a0:	b	17450 <__assert_fail@plt+0x655c>
   173a4:	b	17450 <__assert_fail@plt+0x655c>
   173a8:	b	17450 <__assert_fail@plt+0x655c>
   173ac:	b	17450 <__assert_fail@plt+0x655c>
   173b0:	b	17448 <__assert_fail@plt+0x6554>
   173b4:	b	17448 <__assert_fail@plt+0x6554>
   173b8:	b	17448 <__assert_fail@plt+0x6554>
   173bc:	b	17448 <__assert_fail@plt+0x6554>
   173c0:	b	17448 <__assert_fail@plt+0x6554>
   173c4:	b	17448 <__assert_fail@plt+0x6554>
   173c8:	b	17450 <__assert_fail@plt+0x655c>
   173cc:	b	17450 <__assert_fail@plt+0x655c>
   173d0:	b	17450 <__assert_fail@plt+0x655c>
   173d4:	b	17450 <__assert_fail@plt+0x655c>
   173d8:	b	17450 <__assert_fail@plt+0x655c>
   173dc:	b	17450 <__assert_fail@plt+0x655c>
   173e0:	b	17450 <__assert_fail@plt+0x655c>
   173e4:	b	17450 <__assert_fail@plt+0x655c>
   173e8:	b	17450 <__assert_fail@plt+0x655c>
   173ec:	b	17450 <__assert_fail@plt+0x655c>
   173f0:	b	17450 <__assert_fail@plt+0x655c>
   173f4:	b	17450 <__assert_fail@plt+0x655c>
   173f8:	b	17450 <__assert_fail@plt+0x655c>
   173fc:	b	17450 <__assert_fail@plt+0x655c>
   17400:	b	17450 <__assert_fail@plt+0x655c>
   17404:	b	17450 <__assert_fail@plt+0x655c>
   17408:	b	17450 <__assert_fail@plt+0x655c>
   1740c:	b	17450 <__assert_fail@plt+0x655c>
   17410:	b	17450 <__assert_fail@plt+0x655c>
   17414:	b	17450 <__assert_fail@plt+0x655c>
   17418:	b	17450 <__assert_fail@plt+0x655c>
   1741c:	b	17450 <__assert_fail@plt+0x655c>
   17420:	b	17450 <__assert_fail@plt+0x655c>
   17424:	b	17450 <__assert_fail@plt+0x655c>
   17428:	b	17450 <__assert_fail@plt+0x655c>
   1742c:	b	17450 <__assert_fail@plt+0x655c>
   17430:	b	17448 <__assert_fail@plt+0x6554>
   17434:	b	17448 <__assert_fail@plt+0x6554>
   17438:	b	17448 <__assert_fail@plt+0x6554>
   1743c:	b	17448 <__assert_fail@plt+0x6554>
   17440:	b	17448 <__assert_fail@plt+0x6554>
   17444:	b	17448 <__assert_fail@plt+0x6554>
   17448:	mov	r3, #1
   1744c:	b	17454 <__assert_fail@plt+0x6560>
   17450:	mov	r3, #0
   17454:	mov	r0, r3
   17458:	add	sp, fp, #0
   1745c:	pop	{fp}		; (ldr fp, [sp], #4)
   17460:	bx	lr
   17464:	push	{fp}		; (str fp, [sp, #-4]!)
   17468:	add	fp, sp, #0
   1746c:	sub	sp, sp, #12
   17470:	str	r0, [fp, #-8]
   17474:	ldr	r3, [fp, #-8]
   17478:	sub	r3, r3, #65	; 0x41
   1747c:	cmp	r3, #25
   17480:	bhi	17490 <__assert_fail@plt+0x659c>
   17484:	ldr	r3, [fp, #-8]
   17488:	add	r3, r3, #32
   1748c:	b	17494 <__assert_fail@plt+0x65a0>
   17490:	ldr	r3, [fp, #-8]
   17494:	mov	r0, r3
   17498:	add	sp, fp, #0
   1749c:	pop	{fp}		; (ldr fp, [sp], #4)
   174a0:	bx	lr
   174a4:	push	{fp}		; (str fp, [sp, #-4]!)
   174a8:	add	fp, sp, #0
   174ac:	sub	sp, sp, #12
   174b0:	str	r0, [fp, #-8]
   174b4:	ldr	r3, [fp, #-8]
   174b8:	sub	r3, r3, #97	; 0x61
   174bc:	cmp	r3, #25
   174c0:	bhi	174d0 <__assert_fail@plt+0x65dc>
   174c4:	ldr	r3, [fp, #-8]
   174c8:	sub	r3, r3, #32
   174cc:	b	174d4 <__assert_fail@plt+0x65e0>
   174d0:	ldr	r3, [fp, #-8]
   174d4:	mov	r0, r3
   174d8:	add	sp, fp, #0
   174dc:	pop	{fp}		; (ldr fp, [sp], #4)
   174e0:	bx	lr
   174e4:	push	{fp, lr}
   174e8:	add	fp, sp, #4
   174ec:	sub	sp, sp, #272	; 0x110
   174f0:	str	r0, [fp, #-272]	; 0xfffffef0
   174f4:	sub	r3, fp, #264	; 0x108
   174f8:	ldr	r2, [pc, #116]	; 17574 <__assert_fail@plt+0x6680>
   174fc:	mov	r1, r3
   17500:	ldr	r0, [fp, #-272]	; 0xfffffef0
   17504:	bl	17688 <__assert_fail@plt+0x6794>
   17508:	mov	r3, r0
   1750c:	cmp	r3, #0
   17510:	beq	1751c <__assert_fail@plt+0x6628>
   17514:	mov	r3, #0
   17518:	b	17568 <__assert_fail@plt+0x6674>
   1751c:	sub	r3, fp, #264	; 0x108
   17520:	ldr	r1, [pc, #80]	; 17578 <__assert_fail@plt+0x6684>
   17524:	mov	r0, r3
   17528:	bl	10cb4 <strcmp@plt>
   1752c:	mov	r3, r0
   17530:	cmp	r3, #0
   17534:	beq	1755c <__assert_fail@plt+0x6668>
   17538:	sub	r3, fp, #264	; 0x108
   1753c:	ldr	r1, [pc, #56]	; 1757c <__assert_fail@plt+0x6688>
   17540:	mov	r0, r3
   17544:	bl	10cb4 <strcmp@plt>
   17548:	mov	r3, r0
   1754c:	cmp	r3, #0
   17550:	beq	1755c <__assert_fail@plt+0x6668>
   17554:	mov	r3, #1
   17558:	b	17560 <__assert_fail@plt+0x666c>
   1755c:	mov	r3, #0
   17560:	and	r3, r3, #1
   17564:	uxtb	r3, r3
   17568:	mov	r0, r3
   1756c:	sub	sp, fp, #4
   17570:	pop	{fp, pc}
   17574:	andeq	r0, r0, r1, lsl #2
   17578:	andeq	r8, r1, r0, lsl #21
   1757c:	andeq	r8, r1, r4, lsl #21
   17580:	push	{fp, lr}
   17584:	add	fp, sp, #4
   17588:	sub	sp, sp, #16
   1758c:	str	r0, [fp, #-16]
   17590:	mov	r1, #0
   17594:	ldr	r0, [fp, #-16]
   17598:	bl	10e7c <setlocale@plt>
   1759c:	str	r0, [fp, #-8]
   175a0:	ldr	r3, [fp, #-8]
   175a4:	mov	r0, r3
   175a8:	sub	sp, fp, #4
   175ac:	pop	{fp, pc}
   175b0:	push	{fp, lr}
   175b4:	add	fp, sp, #4
   175b8:	sub	sp, sp, #24
   175bc:	str	r0, [fp, #-16]
   175c0:	str	r1, [fp, #-20]	; 0xffffffec
   175c4:	str	r2, [fp, #-24]	; 0xffffffe8
   175c8:	ldr	r0, [fp, #-16]
   175cc:	bl	17580 <__assert_fail@plt+0x668c>
   175d0:	str	r0, [fp, #-8]
   175d4:	ldr	r3, [fp, #-8]
   175d8:	cmp	r3, #0
   175dc:	bne	17600 <__assert_fail@plt+0x670c>
   175e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175e4:	cmp	r3, #0
   175e8:	beq	175f8 <__assert_fail@plt+0x6704>
   175ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   175f0:	mov	r2, #0
   175f4:	strb	r2, [r3]
   175f8:	mov	r3, #22
   175fc:	b	1767c <__assert_fail@plt+0x6788>
   17600:	ldr	r0, [fp, #-8]
   17604:	bl	10e1c <strlen@plt>
   17608:	str	r0, [fp, #-12]
   1760c:	ldr	r2, [fp, #-12]
   17610:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17614:	cmp	r2, r3
   17618:	bcs	1763c <__assert_fail@plt+0x6748>
   1761c:	ldr	r3, [fp, #-12]
   17620:	add	r3, r3, #1
   17624:	mov	r2, r3
   17628:	ldr	r1, [fp, #-8]
   1762c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17630:	bl	10cfc <memcpy@plt>
   17634:	mov	r3, #0
   17638:	b	1767c <__assert_fail@plt+0x6788>
   1763c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17640:	cmp	r3, #0
   17644:	beq	17678 <__assert_fail@plt+0x6784>
   17648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1764c:	sub	r3, r3, #1
   17650:	mov	r2, r3
   17654:	ldr	r1, [fp, #-8]
   17658:	ldr	r0, [fp, #-20]	; 0xffffffec
   1765c:	bl	10cfc <memcpy@plt>
   17660:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17664:	sub	r3, r3, #1
   17668:	ldr	r2, [fp, #-20]	; 0xffffffec
   1766c:	add	r3, r2, r3
   17670:	mov	r2, #0
   17674:	strb	r2, [r3]
   17678:	mov	r3, #34	; 0x22
   1767c:	mov	r0, r3
   17680:	sub	sp, fp, #4
   17684:	pop	{fp, pc}
   17688:	push	{fp, lr}
   1768c:	add	fp, sp, #4
   17690:	sub	sp, sp, #16
   17694:	str	r0, [fp, #-8]
   17698:	str	r1, [fp, #-12]
   1769c:	str	r2, [fp, #-16]
   176a0:	ldr	r2, [fp, #-16]
   176a4:	ldr	r1, [fp, #-12]
   176a8:	ldr	r0, [fp, #-8]
   176ac:	bl	175b0 <__assert_fail@plt+0x66bc>
   176b0:	mov	r3, r0
   176b4:	mov	r0, r3
   176b8:	sub	sp, fp, #4
   176bc:	pop	{fp, pc}
   176c0:	push	{fp, lr}
   176c4:	add	fp, sp, #4
   176c8:	sub	sp, sp, #8
   176cc:	str	r0, [fp, #-8]
   176d0:	ldr	r0, [fp, #-8]
   176d4:	bl	17580 <__assert_fail@plt+0x668c>
   176d8:	mov	r3, r0
   176dc:	mov	r0, r3
   176e0:	sub	sp, fp, #4
   176e4:	pop	{fp, pc}
   176e8:	subs	r2, r1, #1
   176ec:	bxeq	lr
   176f0:	bcc	178c8 <__assert_fail@plt+0x69d4>
   176f4:	cmp	r0, r1
   176f8:	bls	178ac <__assert_fail@plt+0x69b8>
   176fc:	tst	r1, r2
   17700:	beq	178b8 <__assert_fail@plt+0x69c4>
   17704:	clz	r3, r0
   17708:	clz	r2, r1
   1770c:	sub	r3, r2, r3
   17710:	rsbs	r3, r3, #31
   17714:	addne	r3, r3, r3, lsl #1
   17718:	mov	r2, #0
   1771c:	addne	pc, pc, r3, lsl #2
   17720:	nop			; (mov r0, r0)
   17724:	cmp	r0, r1, lsl #31
   17728:	adc	r2, r2, r2
   1772c:	subcs	r0, r0, r1, lsl #31
   17730:	cmp	r0, r1, lsl #30
   17734:	adc	r2, r2, r2
   17738:	subcs	r0, r0, r1, lsl #30
   1773c:	cmp	r0, r1, lsl #29
   17740:	adc	r2, r2, r2
   17744:	subcs	r0, r0, r1, lsl #29
   17748:	cmp	r0, r1, lsl #28
   1774c:	adc	r2, r2, r2
   17750:	subcs	r0, r0, r1, lsl #28
   17754:	cmp	r0, r1, lsl #27
   17758:	adc	r2, r2, r2
   1775c:	subcs	r0, r0, r1, lsl #27
   17760:	cmp	r0, r1, lsl #26
   17764:	adc	r2, r2, r2
   17768:	subcs	r0, r0, r1, lsl #26
   1776c:	cmp	r0, r1, lsl #25
   17770:	adc	r2, r2, r2
   17774:	subcs	r0, r0, r1, lsl #25
   17778:	cmp	r0, r1, lsl #24
   1777c:	adc	r2, r2, r2
   17780:	subcs	r0, r0, r1, lsl #24
   17784:	cmp	r0, r1, lsl #23
   17788:	adc	r2, r2, r2
   1778c:	subcs	r0, r0, r1, lsl #23
   17790:	cmp	r0, r1, lsl #22
   17794:	adc	r2, r2, r2
   17798:	subcs	r0, r0, r1, lsl #22
   1779c:	cmp	r0, r1, lsl #21
   177a0:	adc	r2, r2, r2
   177a4:	subcs	r0, r0, r1, lsl #21
   177a8:	cmp	r0, r1, lsl #20
   177ac:	adc	r2, r2, r2
   177b0:	subcs	r0, r0, r1, lsl #20
   177b4:	cmp	r0, r1, lsl #19
   177b8:	adc	r2, r2, r2
   177bc:	subcs	r0, r0, r1, lsl #19
   177c0:	cmp	r0, r1, lsl #18
   177c4:	adc	r2, r2, r2
   177c8:	subcs	r0, r0, r1, lsl #18
   177cc:	cmp	r0, r1, lsl #17
   177d0:	adc	r2, r2, r2
   177d4:	subcs	r0, r0, r1, lsl #17
   177d8:	cmp	r0, r1, lsl #16
   177dc:	adc	r2, r2, r2
   177e0:	subcs	r0, r0, r1, lsl #16
   177e4:	cmp	r0, r1, lsl #15
   177e8:	adc	r2, r2, r2
   177ec:	subcs	r0, r0, r1, lsl #15
   177f0:	cmp	r0, r1, lsl #14
   177f4:	adc	r2, r2, r2
   177f8:	subcs	r0, r0, r1, lsl #14
   177fc:	cmp	r0, r1, lsl #13
   17800:	adc	r2, r2, r2
   17804:	subcs	r0, r0, r1, lsl #13
   17808:	cmp	r0, r1, lsl #12
   1780c:	adc	r2, r2, r2
   17810:	subcs	r0, r0, r1, lsl #12
   17814:	cmp	r0, r1, lsl #11
   17818:	adc	r2, r2, r2
   1781c:	subcs	r0, r0, r1, lsl #11
   17820:	cmp	r0, r1, lsl #10
   17824:	adc	r2, r2, r2
   17828:	subcs	r0, r0, r1, lsl #10
   1782c:	cmp	r0, r1, lsl #9
   17830:	adc	r2, r2, r2
   17834:	subcs	r0, r0, r1, lsl #9
   17838:	cmp	r0, r1, lsl #8
   1783c:	adc	r2, r2, r2
   17840:	subcs	r0, r0, r1, lsl #8
   17844:	cmp	r0, r1, lsl #7
   17848:	adc	r2, r2, r2
   1784c:	subcs	r0, r0, r1, lsl #7
   17850:	cmp	r0, r1, lsl #6
   17854:	adc	r2, r2, r2
   17858:	subcs	r0, r0, r1, lsl #6
   1785c:	cmp	r0, r1, lsl #5
   17860:	adc	r2, r2, r2
   17864:	subcs	r0, r0, r1, lsl #5
   17868:	cmp	r0, r1, lsl #4
   1786c:	adc	r2, r2, r2
   17870:	subcs	r0, r0, r1, lsl #4
   17874:	cmp	r0, r1, lsl #3
   17878:	adc	r2, r2, r2
   1787c:	subcs	r0, r0, r1, lsl #3
   17880:	cmp	r0, r1, lsl #2
   17884:	adc	r2, r2, r2
   17888:	subcs	r0, r0, r1, lsl #2
   1788c:	cmp	r0, r1, lsl #1
   17890:	adc	r2, r2, r2
   17894:	subcs	r0, r0, r1, lsl #1
   17898:	cmp	r0, r1
   1789c:	adc	r2, r2, r2
   178a0:	subcs	r0, r0, r1
   178a4:	mov	r0, r2
   178a8:	bx	lr
   178ac:	moveq	r0, #1
   178b0:	movne	r0, #0
   178b4:	bx	lr
   178b8:	clz	r2, r1
   178bc:	rsb	r2, r2, #31
   178c0:	lsr	r0, r0, r2
   178c4:	bx	lr
   178c8:	cmp	r0, #0
   178cc:	mvnne	r0, #0
   178d0:	b	17b70 <__assert_fail@plt+0x6c7c>
   178d4:	cmp	r1, #0
   178d8:	beq	178c8 <__assert_fail@plt+0x69d4>
   178dc:	push	{r0, r1, lr}
   178e0:	bl	176e8 <__assert_fail@plt+0x67f4>
   178e4:	pop	{r1, r2, lr}
   178e8:	mul	r3, r2, r0
   178ec:	sub	r1, r1, r3
   178f0:	bx	lr
   178f4:	cmp	r1, #0
   178f8:	beq	17b04 <__assert_fail@plt+0x6c10>
   178fc:	eor	ip, r0, r1
   17900:	rsbmi	r1, r1, #0
   17904:	subs	r2, r1, #1
   17908:	beq	17ad0 <__assert_fail@plt+0x6bdc>
   1790c:	movs	r3, r0
   17910:	rsbmi	r3, r0, #0
   17914:	cmp	r3, r1
   17918:	bls	17adc <__assert_fail@plt+0x6be8>
   1791c:	tst	r1, r2
   17920:	beq	17aec <__assert_fail@plt+0x6bf8>
   17924:	clz	r2, r3
   17928:	clz	r0, r1
   1792c:	sub	r2, r0, r2
   17930:	rsbs	r2, r2, #31
   17934:	addne	r2, r2, r2, lsl #1
   17938:	mov	r0, #0
   1793c:	addne	pc, pc, r2, lsl #2
   17940:	nop			; (mov r0, r0)
   17944:	cmp	r3, r1, lsl #31
   17948:	adc	r0, r0, r0
   1794c:	subcs	r3, r3, r1, lsl #31
   17950:	cmp	r3, r1, lsl #30
   17954:	adc	r0, r0, r0
   17958:	subcs	r3, r3, r1, lsl #30
   1795c:	cmp	r3, r1, lsl #29
   17960:	adc	r0, r0, r0
   17964:	subcs	r3, r3, r1, lsl #29
   17968:	cmp	r3, r1, lsl #28
   1796c:	adc	r0, r0, r0
   17970:	subcs	r3, r3, r1, lsl #28
   17974:	cmp	r3, r1, lsl #27
   17978:	adc	r0, r0, r0
   1797c:	subcs	r3, r3, r1, lsl #27
   17980:	cmp	r3, r1, lsl #26
   17984:	adc	r0, r0, r0
   17988:	subcs	r3, r3, r1, lsl #26
   1798c:	cmp	r3, r1, lsl #25
   17990:	adc	r0, r0, r0
   17994:	subcs	r3, r3, r1, lsl #25
   17998:	cmp	r3, r1, lsl #24
   1799c:	adc	r0, r0, r0
   179a0:	subcs	r3, r3, r1, lsl #24
   179a4:	cmp	r3, r1, lsl #23
   179a8:	adc	r0, r0, r0
   179ac:	subcs	r3, r3, r1, lsl #23
   179b0:	cmp	r3, r1, lsl #22
   179b4:	adc	r0, r0, r0
   179b8:	subcs	r3, r3, r1, lsl #22
   179bc:	cmp	r3, r1, lsl #21
   179c0:	adc	r0, r0, r0
   179c4:	subcs	r3, r3, r1, lsl #21
   179c8:	cmp	r3, r1, lsl #20
   179cc:	adc	r0, r0, r0
   179d0:	subcs	r3, r3, r1, lsl #20
   179d4:	cmp	r3, r1, lsl #19
   179d8:	adc	r0, r0, r0
   179dc:	subcs	r3, r3, r1, lsl #19
   179e0:	cmp	r3, r1, lsl #18
   179e4:	adc	r0, r0, r0
   179e8:	subcs	r3, r3, r1, lsl #18
   179ec:	cmp	r3, r1, lsl #17
   179f0:	adc	r0, r0, r0
   179f4:	subcs	r3, r3, r1, lsl #17
   179f8:	cmp	r3, r1, lsl #16
   179fc:	adc	r0, r0, r0
   17a00:	subcs	r3, r3, r1, lsl #16
   17a04:	cmp	r3, r1, lsl #15
   17a08:	adc	r0, r0, r0
   17a0c:	subcs	r3, r3, r1, lsl #15
   17a10:	cmp	r3, r1, lsl #14
   17a14:	adc	r0, r0, r0
   17a18:	subcs	r3, r3, r1, lsl #14
   17a1c:	cmp	r3, r1, lsl #13
   17a20:	adc	r0, r0, r0
   17a24:	subcs	r3, r3, r1, lsl #13
   17a28:	cmp	r3, r1, lsl #12
   17a2c:	adc	r0, r0, r0
   17a30:	subcs	r3, r3, r1, lsl #12
   17a34:	cmp	r3, r1, lsl #11
   17a38:	adc	r0, r0, r0
   17a3c:	subcs	r3, r3, r1, lsl #11
   17a40:	cmp	r3, r1, lsl #10
   17a44:	adc	r0, r0, r0
   17a48:	subcs	r3, r3, r1, lsl #10
   17a4c:	cmp	r3, r1, lsl #9
   17a50:	adc	r0, r0, r0
   17a54:	subcs	r3, r3, r1, lsl #9
   17a58:	cmp	r3, r1, lsl #8
   17a5c:	adc	r0, r0, r0
   17a60:	subcs	r3, r3, r1, lsl #8
   17a64:	cmp	r3, r1, lsl #7
   17a68:	adc	r0, r0, r0
   17a6c:	subcs	r3, r3, r1, lsl #7
   17a70:	cmp	r3, r1, lsl #6
   17a74:	adc	r0, r0, r0
   17a78:	subcs	r3, r3, r1, lsl #6
   17a7c:	cmp	r3, r1, lsl #5
   17a80:	adc	r0, r0, r0
   17a84:	subcs	r3, r3, r1, lsl #5
   17a88:	cmp	r3, r1, lsl #4
   17a8c:	adc	r0, r0, r0
   17a90:	subcs	r3, r3, r1, lsl #4
   17a94:	cmp	r3, r1, lsl #3
   17a98:	adc	r0, r0, r0
   17a9c:	subcs	r3, r3, r1, lsl #3
   17aa0:	cmp	r3, r1, lsl #2
   17aa4:	adc	r0, r0, r0
   17aa8:	subcs	r3, r3, r1, lsl #2
   17aac:	cmp	r3, r1, lsl #1
   17ab0:	adc	r0, r0, r0
   17ab4:	subcs	r3, r3, r1, lsl #1
   17ab8:	cmp	r3, r1
   17abc:	adc	r0, r0, r0
   17ac0:	subcs	r3, r3, r1
   17ac4:	cmp	ip, #0
   17ac8:	rsbmi	r0, r0, #0
   17acc:	bx	lr
   17ad0:	teq	ip, r0
   17ad4:	rsbmi	r0, r0, #0
   17ad8:	bx	lr
   17adc:	movcc	r0, #0
   17ae0:	asreq	r0, ip, #31
   17ae4:	orreq	r0, r0, #1
   17ae8:	bx	lr
   17aec:	clz	r2, r1
   17af0:	rsb	r2, r2, #31
   17af4:	cmp	ip, #0
   17af8:	lsr	r0, r3, r2
   17afc:	rsbmi	r0, r0, #0
   17b00:	bx	lr
   17b04:	cmp	r0, #0
   17b08:	mvngt	r0, #-2147483648	; 0x80000000
   17b0c:	movlt	r0, #-2147483648	; 0x80000000
   17b10:	b	17b70 <__assert_fail@plt+0x6c7c>
   17b14:	cmp	r1, #0
   17b18:	beq	17b04 <__assert_fail@plt+0x6c10>
   17b1c:	push	{r0, r1, lr}
   17b20:	bl	178fc <__assert_fail@plt+0x6a08>
   17b24:	pop	{r1, r2, lr}
   17b28:	mul	r3, r2, r0
   17b2c:	sub	r1, r1, r3
   17b30:	bx	lr
   17b34:	cmp	r3, #0
   17b38:	cmpeq	r2, #0
   17b3c:	bne	17b54 <__assert_fail@plt+0x6c60>
   17b40:	cmp	r1, #0
   17b44:	cmpeq	r0, #0
   17b48:	mvnne	r1, #0
   17b4c:	mvnne	r0, #0
   17b50:	b	17b70 <__assert_fail@plt+0x6c7c>
   17b54:	sub	sp, sp, #8
   17b58:	push	{sp, lr}
   17b5c:	bl	17b80 <__assert_fail@plt+0x6c8c>
   17b60:	ldr	lr, [sp, #4]
   17b64:	add	sp, sp, #8
   17b68:	pop	{r2, r3}
   17b6c:	bx	lr
   17b70:	push	{r1, lr}
   17b74:	mov	r0, #8
   17b78:	bl	10ca8 <raise@plt>
   17b7c:	pop	{r1, pc}
   17b80:	cmp	r1, r3
   17b84:	push	{r4, r5, r6, r7, r8, r9, lr}
   17b88:	cmpeq	r0, r2
   17b8c:	mov	r4, r0
   17b90:	mov	r5, r1
   17b94:	ldr	r9, [sp, #28]
   17b98:	movcc	r0, #0
   17b9c:	movcc	r1, #0
   17ba0:	bcc	17c98 <__assert_fail@plt+0x6da4>
   17ba4:	cmp	r3, #0
   17ba8:	clzeq	ip, r2
   17bac:	clzne	ip, r3
   17bb0:	addeq	ip, ip, #32
   17bb4:	cmp	r5, #0
   17bb8:	clzeq	r1, r4
   17bbc:	addeq	r1, r1, #32
   17bc0:	clzne	r1, r5
   17bc4:	sub	ip, ip, r1
   17bc8:	sub	lr, ip, #32
   17bcc:	lsl	r7, r3, ip
   17bd0:	rsb	r8, ip, #32
   17bd4:	orr	r7, r7, r2, lsl lr
   17bd8:	orr	r7, r7, r2, lsr r8
   17bdc:	lsl	r6, r2, ip
   17be0:	cmp	r5, r7
   17be4:	cmpeq	r4, r6
   17be8:	movcc	r0, #0
   17bec:	movcc	r1, #0
   17bf0:	bcc	17c0c <__assert_fail@plt+0x6d18>
   17bf4:	mov	r3, #1
   17bf8:	subs	r4, r4, r6
   17bfc:	lsl	r1, r3, lr
   17c00:	lsl	r0, r3, ip
   17c04:	orr	r1, r1, r3, lsr r8
   17c08:	sbc	r5, r5, r7
   17c0c:	cmp	ip, #0
   17c10:	beq	17c98 <__assert_fail@plt+0x6da4>
   17c14:	lsrs	r3, r7, #1
   17c18:	rrx	r2, r6
   17c1c:	mov	r6, ip
   17c20:	b	17c44 <__assert_fail@plt+0x6d50>
   17c24:	subs	r4, r4, r2
   17c28:	sbc	r5, r5, r3
   17c2c:	adds	r4, r4, r4
   17c30:	adc	r5, r5, r5
   17c34:	adds	r4, r4, #1
   17c38:	adc	r5, r5, #0
   17c3c:	subs	r6, r6, #1
   17c40:	beq	17c60 <__assert_fail@plt+0x6d6c>
   17c44:	cmp	r5, r3
   17c48:	cmpeq	r4, r2
   17c4c:	bcs	17c24 <__assert_fail@plt+0x6d30>
   17c50:	adds	r4, r4, r4
   17c54:	adc	r5, r5, r5
   17c58:	subs	r6, r6, #1
   17c5c:	bne	17c44 <__assert_fail@plt+0x6d50>
   17c60:	lsr	r6, r4, ip
   17c64:	lsr	r7, r5, ip
   17c68:	orr	r6, r6, r5, lsl r8
   17c6c:	adds	r2, r0, r4
   17c70:	orr	r6, r6, r5, lsr lr
   17c74:	adc	r3, r1, r5
   17c78:	lsl	r1, r7, ip
   17c7c:	orr	r1, r1, r6, lsl lr
   17c80:	lsl	r0, r6, ip
   17c84:	orr	r1, r1, r6, lsr r8
   17c88:	subs	r0, r2, r0
   17c8c:	mov	r4, r6
   17c90:	mov	r5, r7
   17c94:	sbc	r1, r3, r1
   17c98:	cmp	r9, #0
   17c9c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17ca0:	strd	r4, [r9]
   17ca4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17ca8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17cac:	mov	r7, r0
   17cb0:	ldr	r6, [pc, #72]	; 17d00 <__assert_fail@plt+0x6e0c>
   17cb4:	ldr	r5, [pc, #72]	; 17d04 <__assert_fail@plt+0x6e10>
   17cb8:	add	r6, pc, r6
   17cbc:	add	r5, pc, r5
   17cc0:	sub	r6, r6, r5
   17cc4:	mov	r8, r1
   17cc8:	mov	r9, r2
   17ccc:	bl	10c70 <calloc@plt-0x20>
   17cd0:	asrs	r6, r6, #2
   17cd4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17cd8:	mov	r4, #0
   17cdc:	add	r4, r4, #1
   17ce0:	ldr	r3, [r5], #4
   17ce4:	mov	r2, r9
   17ce8:	mov	r1, r8
   17cec:	mov	r0, r7
   17cf0:	blx	r3
   17cf4:	cmp	r6, r4
   17cf8:	bne	17cdc <__assert_fail@plt+0x6de8>
   17cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d00:	andeq	r1, r1, r0, asr r2
   17d04:	andeq	r1, r1, r8, asr #4
   17d08:	bx	lr
   17d0c:	ldr	r3, [pc, #12]	; 17d20 <__assert_fail@plt+0x6e2c>
   17d10:	mov	r1, #0
   17d14:	add	r3, pc, r3
   17d18:	ldr	r2, [r3]
   17d1c:	b	10e40 <__cxa_atexit@plt>
   17d20:	andeq	r1, r1, r8, asr #7

Disassembly of section .fini:

00017d24 <.fini>:
   17d24:	push	{r3, lr}
   17d28:	pop	{r3, pc}
