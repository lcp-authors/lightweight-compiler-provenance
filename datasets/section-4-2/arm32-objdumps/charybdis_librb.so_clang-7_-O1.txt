
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004c90 <_init>:
    4c90:	push	{r3, lr}
    4c94:	bl	564c <call_weak_fn>
    4c98:	pop	{r3, pc}

Disassembly of section .plt:

00004c9c <.plt>:
    4c9c:	push	{lr}		; (str lr, [sp, #-4]!)
    4ca0:	ldr	lr, [pc, #4]	; 4cac <.plt+0x10>
    4ca4:	add	lr, pc, lr
    4ca8:	ldr	pc, [lr, #8]!
    4cac:	.word	0x00023354

00004cb0 <rb_helper_run@plt>:
    4cb0:	add	ip, pc, #0, 12
    4cb4:	add	ip, ip, #143360	; 0x23000
    4cb8:	ldr	pc, [ip, #852]!	; 0x354

00004cbc <TLS_method@plt>:
    4cbc:	add	ip, pc, #0, 12
    4cc0:	add	ip, ip, #143360	; 0x23000
    4cc4:	ldr	pc, [ip, #844]!	; 0x34c

00004cc8 <open@plt>:
    4cc8:	add	ip, pc, #0, 12
    4ccc:	add	ip, ip, #143360	; 0x23000
    4cd0:	ldr	pc, [ip, #836]!	; 0x344

00004cd4 <rb_init_netio@plt>:
    4cd4:	add	ip, pc, #0, 12
    4cd8:	add	ip, ip, #143360	; 0x23000
    4cdc:	ldr	pc, [ip, #828]!	; 0x33c

00004ce0 <sigemptyset@plt>:
    4ce0:	add	ip, pc, #0, 12
    4ce4:	add	ip, ip, #143360	; 0x23000
    4ce8:	ldr	pc, [ip, #820]!	; 0x334

00004cec <strerror@plt>:
    4cec:	add	ip, pc, #0, 12
    4cf0:	add	ip, ip, #143360	; 0x23000
    4cf4:	ldr	pc, [ip, #812]!	; 0x32c

00004cf8 <rb_radixtree_elem_delete@plt>:
    4cf8:	add	ip, pc, #0, 12
    4cfc:	add	ip, ip, #143360	; 0x23000
    4d00:	ldr	pc, [ip, #804]!	; 0x324

00004d04 <getdtablesize@plt>:
    4d04:	add	ip, pc, #0, 12
    4d08:	add	ip, ip, #143360	; 0x23000
    4d0c:	ldr	pc, [ip, #796]!	; 0x31c

00004d10 <abort@plt>:
    4d10:	add	ip, pc, #0, 12
    4d14:	add	ip, ip, #143360	; 0x23000
    4d18:	ldr	pc, [ip, #788]!	; 0x314

00004d1c <connect@plt>:
    4d1c:	add	ip, pc, #0, 12
    4d20:	add	ip, ip, #143360	; 0x23000
    4d24:	ldr	pc, [ip, #780]!	; 0x30c

00004d28 <rb_ignore_errno@plt>:
    4d28:	add	ip, pc, #0, 12
    4d2c:	add	ip, ip, #143360	; 0x23000
    4d30:	ldr	pc, [ip, #772]!	; 0x304

00004d34 <rb_settimeout@plt>:
    4d34:	add	ip, pc, #0, 12
    4d38:	add	ip, ip, #143360	; 0x23000
    4d3c:	ldr	pc, [ip, #764]!	; 0x2fc

00004d40 <SSL_CTX_set_cipher_list@plt>:
    4d40:	add	ip, pc, #0, 12
    4d44:	add	ip, ip, #143360	; 0x23000
    4d48:	ldr	pc, [ip, #756]!	; 0x2f4

00004d4c <ERR_get_error@plt>:
    4d4c:	add	ip, pc, #0, 12
    4d50:	add	ip, ip, #143360	; 0x23000
    4d54:	ldr	pc, [ip, #748]!	; 0x2ec

00004d58 <rb_radixtree_foreach_start@plt>:
    4d58:	add	ip, pc, #0, 12
    4d5c:	add	ip, ip, #143360	; 0x23000
    4d60:	ldr	pc, [ip, #740]!	; 0x2e4

00004d64 <strcasestr@plt>:
    4d64:	add	ip, pc, #0, 12
    4d68:	add	ip, ip, #143360	; 0x23000
    4d6c:	ldr	pc, [ip, #732]!	; 0x2dc

00004d70 <rb_connect_tcp@plt>:
    4d70:	add	ip, pc, #0, 12
    4d74:	add	ip, ip, #143360	; 0x23000
    4d78:	ldr	pc, [ip, #724]!	; 0x2d4

00004d7c <RAND_load_file@plt>:
    4d7c:	add	ip, pc, #0, 12
    4d80:	add	ip, ip, #143360	; 0x23000
    4d84:	ldr	pc, [ip, #716]!	; 0x2cc

00004d88 <signalfd@plt>:
    4d88:	add	ip, pc, #0, 12
    4d8c:	add	ip, ip, #143360	; 0x23000
    4d90:	ldr	pc, [ip, #708]!	; 0x2c4

00004d94 <rb_radixtree_foreach_next@plt>:
    4d94:	add	ip, pc, #0, 12
    4d98:	add	ip, ip, #143360	; 0x23000
    4d9c:	ldr	pc, [ip, #700]!	; 0x2bc

00004da0 <memcmp@plt>:
    4da0:	add	ip, pc, #0, 12
    4da4:	add	ip, ip, #143360	; 0x23000
    4da8:	ldr	pc, [ip, #692]!	; 0x2b4

00004dac <SSL_CTX_free@plt>:
    4dac:	add	ip, pc, #0, 12
    4db0:	add	ip, ip, #143360	; 0x23000
    4db4:	ldr	pc, [ip, #684]!	; 0x2ac

00004db8 <rb_getmaxconnect@plt>:
    4db8:	add	ip, pc, #0, 12
    4dbc:	add	ip, ip, #143360	; 0x23000
    4dc0:	ldr	pc, [ip, #676]!	; 0x2a4

00004dc4 <sigwaitinfo@plt>:
    4dc4:	add	ip, pc, #0, 12
    4dc8:	add	ip, ip, #143360	; 0x23000
    4dcc:	ldr	pc, [ip, #668]!	; 0x29c

00004dd0 <__libc_current_sigrtmin@plt>:
    4dd0:	add	ip, pc, #0, 12
    4dd4:	add	ip, ip, #143360	; 0x23000
    4dd8:	ldr	pc, [ip, #660]!	; 0x294

00004ddc <__xstat@plt>:
    4ddc:	add	ip, pc, #0, 12
    4de0:	add	ip, ip, #143360	; 0x23000
    4de4:	ldr	pc, [ip, #652]!	; 0x28c

00004de8 <rb_event_delete@plt>:
    4de8:	add	ip, pc, #0, 12
    4dec:	add	ip, ip, #143360	; 0x23000
    4df0:	ldr	pc, [ip, #644]!	; 0x284

00004df4 <rb_setselect@plt>:
    4df4:	add	ip, pc, #0, 12
    4df8:	add	ip, ip, #143360	; 0x23000
    4dfc:	ldr	pc, [ip, #636]!	; 0x27c

00004e00 <rb_fd_ssl@plt>:
    4e00:	add	ip, pc, #0, 12
    4e04:	add	ip, ip, #143360	; 0x23000
    4e08:	ldr	pc, [ip, #628]!	; 0x274

00004e0c <sigtimedwait@plt>:
    4e0c:	add	ip, pc, #0, 12
    4e10:	add	ip, ip, #143360	; 0x23000
    4e14:	ldr	pc, [ip, #620]!	; 0x26c

00004e18 <rb_setenv@plt>:
    4e18:	add	ip, pc, #0, 12
    4e1c:	add	ip, ip, #143360	; 0x23000
    4e20:	ldr	pc, [ip, #612]!	; 0x264

00004e24 <signal@plt>:
    4e24:	add	ip, pc, #0, 12
    4e28:	add	ip, ip, #143360	; 0x23000
    4e2c:	ldr	pc, [ip, #604]!	; 0x25c

00004e30 <rb_get_fd@plt>:
    4e30:	add	ip, pc, #0, 12
    4e34:	add	ip, ip, #143360	; 0x23000
    4e38:	ldr	pc, [ip, #596]!	; 0x254

00004e3c <epoll_create@plt>:
    4e3c:	add	ip, pc, #0, 12
    4e40:	add	ip, ip, #143360	; 0x23000
    4e44:	ldr	pc, [ip, #588]!	; 0x24c

00004e48 <rb_clear_patricia@plt>:
    4e48:	add	ip, pc, #0, 12
    4e4c:	add	ip, ip, #143360	; 0x23000
    4e50:	ldr	pc, [ip, #580]!	; 0x244

00004e54 <__gmon_start__@plt>:
    4e54:	add	ip, pc, #0, 12
    4e58:	add	ip, ip, #143360	; 0x23000
    4e5c:	ldr	pc, [ip, #572]!	; 0x23c

00004e60 <SSL_CTX_clear_options@plt>:
    4e60:	add	ip, pc, #0, 12
    4e64:	add	ip, ip, #143360	; 0x23000
    4e68:	ldr	pc, [ip, #564]!	; 0x234

00004e6c <SSL_get_current_cipher@plt>:
    4e6c:	add	ip, pc, #0, 12
    4e70:	add	ip, ip, #143360	; 0x23000
    4e74:	ldr	pc, [ip, #556]!	; 0x22c

00004e78 <timer_create@plt>:
    4e78:	add	ip, pc, #0, 12
    4e7c:	add	ip, ip, #143360	; 0x23000
    4e80:	ldr	pc, [ip, #548]!	; 0x224

00004e84 <X509_get_X509_PUBKEY@plt>:
    4e84:	add	ip, pc, #0, 12
    4e88:	add	ip, ip, #143360	; 0x23000
    4e8c:	ldr	pc, [ip, #540]!	; 0x21c

00004e90 <rb_select@plt>:
    4e90:	add	ip, pc, #0, 12
    4e94:	add	ip, ip, #143360	; 0x23000
    4e98:	ldr	pc, [ip, #532]!	; 0x214

00004e9c <rb_patricia_search_best@plt>:
    4e9c:	add	ip, pc, #0, 12
    4ea0:	add	ip, ip, #143360	; 0x23000
    4ea4:	ldr	pc, [ip, #524]!	; 0x20c

00004ea8 <vsnprintf@plt>:
    4ea8:	add	ip, pc, #0, 12
    4eac:	add	ip, ip, #143360	; 0x23000
    4eb0:	ldr	pc, [ip, #516]!	; 0x204

00004eb4 <socketpair@plt>:
    4eb4:	add	ip, pc, #0, 12
    4eb8:	add	ip, ip, #143360	; 0x23000
    4ebc:	ldr	pc, [ip, #508]!	; 0x1fc

00004ec0 <strncpy@plt>:
    4ec0:	add	ip, pc, #0, 12
    4ec4:	add	ip, ip, #143360	; 0x23000
    4ec8:	ldr	pc, [ip, #500]!	; 0x1f4

00004ecc <fclose@plt>:
    4ecc:	add	ip, pc, #0, 12
    4ed0:	add	ip, ip, #143360	; 0x23000
    4ed4:	ldr	pc, [ip, #492]!	; 0x1ec

00004ed8 <recv@plt>:
    4ed8:	add	ip, pc, #0, 12
    4edc:	add	ip, ip, #143360	; 0x23000
    4ee0:	ldr	pc, [ip, #484]!	; 0x1e4

00004ee4 <getenv@plt>:
    4ee4:	add	ip, pc, #0, 12
    4ee8:	add	ip, ip, #143360	; 0x23000
    4eec:	ldr	pc, [ip, #476]!	; 0x1dc

00004ef0 <ERR_error_string_n@plt>:
    4ef0:	add	ip, pc, #0, 12
    4ef4:	add	ip, ip, #143360	; 0x23000
    4ef8:	ldr	pc, [ip, #468]!	; 0x1d4

00004efc <strchr@plt>:
    4efc:	add	ip, pc, #0, 12
    4f00:	add	ip, ip, #143360	; 0x23000
    4f04:	ldr	pc, [ip, #460]!	; 0x1cc

00004f08 <rb_gettimeofday@plt>:
    4f08:	add	ip, pc, #0, 12
    4f0c:	add	ip, ip, #143360	; 0x23000
    4f10:	ldr	pc, [ip, #452]!	; 0x1c4

00004f14 <strcasecmp@plt>:
    4f14:	add	ip, pc, #0, 12
    4f18:	add	ip, ip, #143360	; 0x23000
    4f1c:	ldr	pc, [ip, #444]!	; 0x1bc

00004f20 <listen@plt>:
    4f20:	add	ip, pc, #0, 12
    4f24:	add	ip, ip, #143360	; 0x23000
    4f28:	ldr	pc, [ip, #436]!	; 0x1b4

00004f2c <calloc@plt>:
    4f2c:	add	ip, pc, #0, 12
    4f30:	add	ip, ip, #143360	; 0x23000
    4f34:	ldr	pc, [ip, #428]!	; 0x1ac

00004f38 <SSL_write@plt>:
    4f38:	add	ip, pc, #0, 12
    4f3c:	add	ip, ip, #143360	; 0x23000
    4f40:	ldr	pc, [ip, #420]!	; 0x1a4

00004f44 <rb_event_init@plt>:
    4f44:	add	ip, pc, #0, 12
    4f48:	add	ip, ip, #143360	; 0x23000
    4f4c:	ldr	pc, [ip, #412]!	; 0x19c

00004f50 <fopen@plt>:
    4f50:	add	ip, pc, #0, 12
    4f54:	add	ip, ip, #143360	; 0x23000
    4f58:	ldr	pc, [ip, #404]!	; 0x194

00004f5c <rb_set_nb@plt>:
    4f5c:	add	ip, pc, #0, 12
    4f60:	add	ip, ip, #143360	; 0x23000
    4f64:	ldr	pc, [ip, #396]!	; 0x18c

00004f68 <memset@plt>:
    4f68:	add	ip, pc, #0, 12
    4f6c:	add	ip, ip, #143360	; 0x23000
    4f70:	ldr	pc, [ip, #388]!	; 0x184

00004f74 <rb_inet_pton@plt>:
    4f74:	add	ip, pc, #0, 12
    4f78:	add	ip, ip, #143360	; 0x23000
    4f7c:	ldr	pc, [ip, #380]!	; 0x17c

00004f80 <rb_radixtree_stats@plt>:
    4f80:	add	ip, pc, #0, 12
    4f84:	add	ip, ip, #143360	; 0x23000
    4f88:	ldr	pc, [ip, #372]!	; 0x174

00004f8c <strrchr@plt>:
    4f8c:	add	ip, pc, #0, 12
    4f90:	add	ip, ip, #143360	; 0x23000
    4f94:	ldr	pc, [ip, #364]!	; 0x16c

00004f98 <rb_write@plt>:
    4f98:	add	ip, pc, #0, 12
    4f9c:	add	ip, ip, #143360	; 0x23000
    4fa0:	ldr	pc, [ip, #356]!	; 0x164

00004fa4 <SSL_set_fd@plt>:
    4fa4:	add	ip, pc, #0, 12
    4fa8:	add	ip, ip, #143360	; 0x23000
    4fac:	ldr	pc, [ip, #348]!	; 0x15c

00004fb0 <SSL_CTX_ctrl@plt>:
    4fb0:	add	ip, pc, #0, 12
    4fb4:	add	ip, ip, #143360	; 0x23000
    4fb8:	ldr	pc, [ip, #340]!	; 0x154

00004fbc <rb_linebuf_parse@plt>:
    4fbc:	add	ip, pc, #0, 12
    4fc0:	add	ip, ip, #143360	; 0x23000
    4fc4:	ldr	pc, [ip, #332]!	; 0x14c

00004fc8 <writev@plt>:
    4fc8:	add	ip, pc, #0, 12
    4fcc:	add	ip, ip, #143360	; 0x23000
    4fd0:	ldr	pc, [ip, #324]!	; 0x144

00004fd4 <rb_fsnprint@plt>:
    4fd4:	add	ip, pc, #0, 12
    4fd8:	add	ip, ip, #143360	; 0x23000
    4fdc:	ldr	pc, [ip, #316]!	; 0x13c

00004fe0 <rb_strlcpy@plt>:
    4fe0:	add	ip, pc, #0, 12
    4fe4:	add	ip, ip, #143360	; 0x23000
    4fe8:	ldr	pc, [ip, #308]!	; 0x134

00004fec <SSL_CIPHER_get_name@plt>:
    4fec:	add	ip, pc, #0, 12
    4ff0:	add	ip, ip, #143360	; 0x23000
    4ff4:	ldr	pc, [ip, #300]!	; 0x12c

00004ff8 <posix_spawnattr_init@plt>:
    4ff8:	add	ip, pc, #0, 12
    4ffc:	add	ip, ip, #143360	; 0x23000
    5000:	ldr	pc, [ip, #292]!	; 0x124

00005004 <OpenSSL_version_num@plt>:
    5004:	add	ip, pc, #0, 12
    5008:	add	ip, ip, #143360	; 0x23000
    500c:	ldr	pc, [ip, #284]!	; 0x11c

00005010 <rb_kill@plt>:
    5010:	add	ip, pc, #0, 12
    5014:	add	ip, ip, #143360	; 0x23000
    5018:	ldr	pc, [ip, #276]!	; 0x114

0000501c <free@plt>:
    501c:	add	ip, pc, #0, 12
    5020:	add	ip, ip, #143360	; 0x23000
    5024:	ldr	pc, [ip, #268]!	; 0x10c

00005028 <sendmsg@plt>:
    5028:	add	ip, pc, #0, 12
    502c:	add	ip, ip, #143360	; 0x23000
    5030:	ldr	pc, [ip, #260]!	; 0x104

00005034 <read@plt>:
    5034:	add	ip, pc, #0, 12
    5038:	add	ip, ip, #143360	; 0x23000
    503c:	ldr	pc, [ip, #252]!	; 0xfc

00005040 <rb_radixtree_elem_add@plt>:
    5040:	add	ip, pc, #0, 12
    5044:	add	ip, ip, #143360	; 0x23000
    5048:	ldr	pc, [ip, #244]!	; 0xf4

0000504c <write@plt>:
    504c:	add	ip, pc, #0, 12
    5050:	add	ip, ip, #143360	; 0x23000
    5054:	ldr	pc, [ip, #236]!	; 0xec

00005058 <SSL_new@plt>:
    5058:	add	ip, pc, #0, 12
    505c:	add	ip, ip, #143360	; 0x23000
    5060:	ldr	pc, [ip, #228]!	; 0xe4

00005064 <access@plt>:
    5064:	add	ip, pc, #0, 12
    5068:	add	ip, ip, #143360	; 0x23000
    506c:	ldr	pc, [ip, #220]!	; 0xdc

00005070 <rb_lib_loop@plt>:
    5070:	add	ip, pc, #0, 12
    5074:	add	ip, ip, #143360	; 0x23000
    5078:	ldr	pc, [ip, #212]!	; 0xd4

0000507c <timer_settime@plt>:
    507c:	add	ip, pc, #0, 12
    5080:	add	ip, ip, #143360	; 0x23000
    5084:	ldr	pc, [ip, #204]!	; 0xcc

00005088 <gettimeofday@plt>:
    5088:	add	ip, pc, #0, 12
    508c:	add	ip, ip, #143360	; 0x23000
    5090:	ldr	pc, [ip, #196]!	; 0xc4

00005094 <accept@plt>:
    5094:	add	ip, pc, #0, 12
    5098:	add	ip, ip, #143360	; 0x23000
    509c:	ldr	pc, [ip, #188]!	; 0xbc

000050a0 <SSL_read@plt>:
    50a0:	add	ip, pc, #0, 12
    50a4:	add	ip, ip, #143360	; 0x23000
    50a8:	ldr	pc, [ip, #180]!	; 0xb4

000050ac <rb_read@plt>:
    50ac:	add	ip, pc, #0, 12
    50b0:	add	ip, ip, #143360	; 0x23000
    50b4:	ldr	pc, [ip, #172]!	; 0xac

000050b8 <socket@plt>:
    50b8:	add	ip, pc, #0, 12
    50bc:	add	ip, ip, #143360	; 0x23000
    50c0:	ldr	pc, [ip, #164]!	; 0xa4

000050c4 <rb_linebuf_get@plt>:
    50c4:	add	ip, pc, #0, 12
    50c8:	add	ip, ip, #143360	; 0x23000
    50cc:	ldr	pc, [ip, #156]!	; 0x9c

000050d0 <rb_radixtree_foreach_cur@plt>:
    50d0:	add	ip, pc, #0, 12
    50d4:	add	ip, ip, #143360	; 0x23000
    50d8:	ldr	pc, [ip, #148]!	; 0x94

000050dc <epoll_wait@plt>:
    50dc:	add	ip, pc, #0, 12
    50e0:	add	ip, ip, #143360	; 0x23000
    50e4:	ldr	pc, [ip, #140]!	; 0x8c

000050e8 <SSL_do_handshake@plt>:
    50e8:	add	ip, pc, #0, 12
    50ec:	add	ip, ip, #143360	; 0x23000
    50f0:	ldr	pc, [ip, #132]!	; 0x84

000050f4 <rb_linebuf_flush@plt>:
    50f4:	add	ip, pc, #0, 12
    50f8:	add	ip, ip, #143360	; 0x23000
    50fc:	ldr	pc, [ip, #124]!	; 0x7c

00005100 <posix_spawn@plt>:
    5100:	add	ip, pc, #0, 12
    5104:	add	ip, ip, #143360	; 0x23000
    5108:	ldr	pc, [ip, #116]!	; 0x74

0000510c <strlen@plt>:
    510c:	add	ip, pc, #0, 12
    5110:	add	ip, ip, #143360	; 0x23000
    5114:	ldr	pc, [ip, #108]!	; 0x6c

00005118 <rb_current_time@plt>:
    5118:	add	ip, pc, #0, 12
    511c:	add	ip, ip, #143360	; 0x23000
    5120:	ldr	pc, [ip, #100]!	; 0x64

00005124 <strtoul@plt>:
    5124:	add	ip, pc, #0, 12
    5128:	add	ip, ip, #143360	; 0x23000
    512c:	ldr	pc, [ip, #92]!	; 0x5c

00005130 <memcpy@plt>:
    5130:	add	ip, pc, #0, 12
    5134:	add	ip, ip, #143360	; 0x23000
    5138:	ldr	pc, [ip, #84]!	; 0x54

0000513c <PEM_read_X509@plt>:
    513c:	add	ip, pc, #0, 12
    5140:	add	ip, ip, #143360	; 0x23000
    5144:	ldr	pc, [ip, #76]!	; 0x4c

00005148 <posix_spawnattr_setflags@plt>:
    5148:	add	ip, pc, #0, 12
    514c:	add	ip, ip, #143360	; 0x23000
    5150:	ldr	pc, [ip, #68]!	; 0x44

00005154 <__ctype_tolower_loc@plt>:
    5154:	add	ip, pc, #0, 12
    5158:	add	ip, ip, #143360	; 0x23000
    515c:	ldr	pc, [ip, #60]!	; 0x3c

00005160 <SSL_CTX_use_certificate_chain_file@plt>:
    5160:	add	ip, pc, #0, 12
    5164:	add	ip, ip, #143360	; 0x23000
    5168:	ldr	pc, [ip, #52]!	; 0x34

0000516c <rb_free_rb_dlink_node@plt>:
    516c:	add	ip, pc, #0, 12
    5170:	add	ip, ip, #143360	; 0x23000
    5174:	ldr	pc, [ip, #44]!	; 0x2c

00005178 <SSL_CTX_set_options@plt>:
    5178:	add	ip, pc, #0, 12
    517c:	add	ip, ip, #143360	; 0x23000
    5180:	ldr	pc, [ip, #36]!	; 0x24

00005184 <posix_spawnattr_destroy@plt>:
    5184:	add	ip, pc, #0, 12
    5188:	add	ip, ip, #143360	; 0x23000
    518c:	ldr	pc, [ip, #28]!

00005190 <rb_close@plt>:
    5190:	add	ip, pc, #0, 12
    5194:	add	ip, ip, #143360	; 0x23000
    5198:	ldr	pc, [ip, #20]!

0000519c <strtol@plt>:
    519c:	add	ip, pc, #0, 12
    51a0:	add	ip, ip, #143360	; 0x23000
    51a4:	ldr	pc, [ip, #12]!

000051a8 <sigaddset@plt>:
    51a8:	add	ip, pc, #0, 12
    51ac:	add	ip, ip, #143360	; 0x23000
    51b0:	ldr	pc, [ip, #4]!

000051b4 <strcpy@plt>:
    51b4:	add	ip, pc, #0, 12
    51b8:	add	ip, ip, #139264	; 0x22000
    51bc:	ldr	pc, [ip, #4092]!	; 0xffc

000051c0 <waitpid@plt>:
    51c0:	add	ip, pc, #0, 12
    51c4:	add	ip, ip, #139264	; 0x22000
    51c8:	ldr	pc, [ip, #4084]!	; 0xff4

000051cc <rb_run_one_event@plt>:
    51cc:	add	ip, pc, #0, 12
    51d0:	add	ip, ip, #139264	; 0x22000
    51d4:	ldr	pc, [ip, #4076]!	; 0xfec

000051d8 <rb_patricia_search_exact@plt>:
    51d8:	add	ip, pc, #0, 12
    51dc:	add	ip, ip, #139264	; 0x22000
    51e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000051e4 <strncat@plt>:
    51e4:	add	ip, pc, #0, 12
    51e8:	add	ip, ip, #139264	; 0x22000
    51ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000051f0 <atol@plt>:
    51f0:	add	ip, pc, #0, 12
    51f4:	add	ip, ip, #139264	; 0x22000
    51f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000051fc <rb_bh_free@plt>:
    51fc:	add	ip, pc, #0, 12
    5200:	add	ip, ip, #139264	; 0x22000
    5204:	ldr	pc, [ip, #4044]!	; 0xfcc

00005208 <rb_init_rb_dlink_nodes@plt>:
    5208:	add	ip, pc, #0, 12
    520c:	add	ip, ip, #139264	; 0x22000
    5210:	ldr	pc, [ip, #4036]!	; 0xfc4

00005214 <EVP_sha1@plt>:
    5214:	add	ip, pc, #0, 12
    5218:	add	ip, ip, #139264	; 0x22000
    521c:	ldr	pc, [ip, #4028]!	; 0xfbc

00005220 <rb_patricia_lookup@plt>:
    5220:	add	ip, pc, #0, 12
    5224:	add	ip, ip, #139264	; 0x22000
    5228:	ldr	pc, [ip, #4020]!	; 0xfb4

0000522c <shutdown@plt>:
    522c:	add	ip, pc, #0, 12
    5230:	add	ip, ip, #139264	; 0x22000
    5234:	ldr	pc, [ip, #4012]!	; 0xfac

00005238 <bind@plt>:
    5238:	add	ip, pc, #0, 12
    523c:	add	ip, ip, #139264	; 0x22000
    5240:	ldr	pc, [ip, #4004]!	; 0xfa4

00005244 <rb_lib_log@plt>:
    5244:	add	ip, pc, #0, 12
    5248:	add	ip, ip, #139264	; 0x22000
    524c:	ldr	pc, [ip, #3996]!	; 0xf9c

00005250 <SSL_CTX_use_PrivateKey_file@plt>:
    5250:	add	ip, pc, #0, 12
    5254:	add	ip, ip, #139264	; 0x22000
    5258:	ldr	pc, [ip, #3988]!	; 0xf94

0000525c <select@plt>:
    525c:	add	ip, pc, #0, 12
    5260:	add	ip, ip, #139264	; 0x22000
    5264:	ldr	pc, [ip, #3980]!	; 0xf8c

00005268 <close@plt>:
    5268:	add	ip, pc, #0, 12
    526c:	add	ip, ip, #139264	; 0x22000
    5270:	ldr	pc, [ip, #3972]!	; 0xf84

00005274 <rb_bh_alloc@plt>:
    5274:	add	ip, pc, #0, 12
    5278:	add	ip, ip, #139264	; 0x22000
    527c:	ldr	pc, [ip, #3964]!	; 0xf7c

00005280 <SSL_free@plt>:
    5280:	add	ip, pc, #0, 12
    5284:	add	ip, ip, #139264	; 0x22000
    5288:	ldr	pc, [ip, #3956]!	; 0xf74

0000528c <rb_pipe@plt>:
    528c:	add	ip, pc, #0, 12
    5290:	add	ip, ip, #139264	; 0x22000
    5294:	ldr	pc, [ip, #3948]!	; 0xf6c

00005298 <strncasecmp@plt>:
    5298:	add	ip, pc, #0, 12
    529c:	add	ip, ip, #139264	; 0x22000
    52a0:	ldr	pc, [ip, #3940]!	; 0xf64

000052a4 <rb_outofmemory@plt>:
    52a4:	add	ip, pc, #0, 12
    52a8:	add	ip, ip, #139264	; 0x22000
    52ac:	ldr	pc, [ip, #3932]!	; 0xf5c

000052b0 <rb_set_time@plt>:
    52b0:	add	ip, pc, #0, 12
    52b4:	add	ip, ip, #139264	; 0x22000
    52b8:	ldr	pc, [ip, #3924]!	; 0xf54

000052bc <rb_dictionary_stats@plt>:
    52bc:	add	ip, pc, #0, 12
    52c0:	add	ip, ip, #139264	; 0x22000
    52c4:	ldr	pc, [ip, #3916]!	; 0xf4c

000052c8 <malloc@plt>:
    52c8:	add	ip, pc, #0, 12
    52cc:	add	ip, ip, #139264	; 0x22000
    52d0:	ldr	pc, [ip, #3908]!	; 0xf44

000052d4 <sigprocmask@plt>:
    52d4:	add	ip, pc, #0, 12
    52d8:	add	ip, ip, #139264	; 0x22000
    52dc:	ldr	pc, [ip, #3900]!	; 0xf3c

000052e0 <rb_event_run@plt>:
    52e0:	add	ip, pc, #0, 12
    52e4:	add	ip, ip, #139264	; 0x22000
    52e8:	ldr	pc, [ip, #3892]!	; 0xf34

000052ec <SSL_set_accept_state@plt>:
    52ec:	add	ip, pc, #0, 12
    52f0:	add	ip, ip, #139264	; 0x22000
    52f4:	ldr	pc, [ip, #3884]!	; 0xf2c

000052f8 <rb_init_bh@plt>:
    52f8:	add	ip, pc, #0, 12
    52fc:	add	ip, ip, #139264	; 0x22000
    5300:	ldr	pc, [ip, #3876]!	; 0xf24

00005304 <PEM_read_DHparams@plt>:
    5304:	add	ip, pc, #0, 12
    5308:	add	ip, ip, #139264	; 0x22000
    530c:	ldr	pc, [ip, #3868]!	; 0xf1c

00005310 <gmtime_r@plt>:
    5310:	add	ip, pc, #0, 12
    5314:	add	ip, ip, #139264	; 0x22000
    5318:	ldr	pc, [ip, #3860]!	; 0xf14

0000531c <poll@plt>:
    531c:	add	ip, pc, #0, 12
    5320:	add	ip, ip, #139264	; 0x22000
    5324:	ldr	pc, [ip, #3852]!	; 0xf0c

00005328 <ASN1_item_digest@plt>:
    5328:	add	ip, pc, #0, 12
    532c:	add	ip, ip, #139264	; 0x22000
    5330:	ldr	pc, [ip, #3844]!	; 0xf04

00005334 <strnlen@plt>:
    5334:	add	ip, pc, #0, 12
    5338:	add	ip, ip, #139264	; 0x22000
    533c:	ldr	pc, [ip, #3836]!	; 0xefc

00005340 <SSL_get_peer_certificate@plt>:
    5340:	add	ip, pc, #0, 12
    5344:	add	ip, ip, #139264	; 0x22000
    5348:	ldr	pc, [ip, #3828]!	; 0xef4

0000534c <rb_dictionary_find@plt>:
    534c:	add	ip, pc, #0, 12
    5350:	add	ip, ip, #139264	; 0x22000
    5354:	ldr	pc, [ip, #3820]!	; 0xeec

00005358 <rb_lib_init@plt>:
    5358:	add	ip, pc, #0, 12
    535c:	add	ip, ip, #139264	; 0x22000
    5360:	ldr	pc, [ip, #3812]!	; 0xee4

00005364 <SSL_get_verify_result@plt>:
    5364:	add	ip, pc, #0, 12
    5368:	add	ip, ip, #139264	; 0x22000
    536c:	ldr	pc, [ip, #3804]!	; 0xedc

00005370 <strtok_r@plt>:
    5370:	add	ip, pc, #0, 12
    5374:	add	ip, ip, #139264	; 0x22000
    5378:	ldr	pc, [ip, #3796]!	; 0xed4

0000537c <rb_lib_restart@plt>:
    537c:	add	ip, pc, #0, 12
    5380:	add	ip, ip, #139264	; 0x22000
    5384:	ldr	pc, [ip, #3788]!	; 0xecc

00005388 <DH_free@plt>:
    5388:	add	ip, pc, #0, 12
    538c:	add	ip, ip, #139264	; 0x22000
    5390:	ldr	pc, [ip, #3780]!	; 0xec4

00005394 <timer_delete@plt>:
    5394:	add	ip, pc, #0, 12
    5398:	add	ip, ip, #139264	; 0x22000
    539c:	ldr	pc, [ip, #3772]!	; 0xebc

000053a0 <rb_open@plt>:
    53a0:	add	ip, pc, #0, 12
    53a4:	add	ip, ip, #139264	; 0x22000
    53a8:	ldr	pc, [ip, #3764]!	; 0xeb4

000053ac <rb_get_sockerr@plt>:
    53ac:	add	ip, pc, #0, 12
    53b0:	add	ip, ip, #139264	; 0x22000
    53b4:	ldr	pc, [ip, #3756]!	; 0xeac

000053b8 <send@plt>:
    53b8:	add	ip, pc, #0, 12
    53bc:	add	ip, ip, #139264	; 0x22000
    53c0:	ldr	pc, [ip, #3748]!	; 0xea4

000053c4 <SSL_shutdown@plt>:
    53c4:	add	ip, pc, #0, 12
    53c8:	add	ip, ip, #139264	; 0x22000
    53cc:	ldr	pc, [ip, #3740]!	; 0xe9c

000053d0 <rb_bh_create@plt>:
    53d0:	add	ip, pc, #0, 12
    53d4:	add	ip, ip, #139264	; 0x22000
    53d8:	ldr	pc, [ip, #3732]!	; 0xe94

000053dc <dup2@plt>:
    53dc:	add	ip, pc, #0, 12
    53e0:	add	ip, ip, #139264	; 0x22000
    53e4:	ldr	pc, [ip, #3724]!	; 0xe8c

000053e8 <getpid@plt>:
    53e8:	add	ip, pc, #0, 12
    53ec:	add	ip, ip, #139264	; 0x22000
    53f0:	ldr	pc, [ip, #3716]!	; 0xe84

000053f4 <rb_writev@plt>:
    53f4:	add	ip, pc, #0, 12
    53f8:	add	ip, ip, #139264	; 0x22000
    53fc:	ldr	pc, [ip, #3708]!	; 0xe7c

00005400 <RAND_bytes@plt>:
    5400:	add	ip, pc, #0, 12
    5404:	add	ip, ip, #139264	; 0x22000
    5408:	ldr	pc, [ip, #3700]!	; 0xe74

0000540c <rb_linebuf_newbuf@plt>:
    540c:	add	ip, pc, #0, 12
    5410:	add	ip, ip, #139264	; 0x22000
    5414:	ldr	pc, [ip, #3692]!	; 0xe6c

00005418 <rb_fdlist_init@plt>:
    5418:	add	ip, pc, #0, 12
    541c:	add	ip, ip, #139264	; 0x22000
    5420:	ldr	pc, [ip, #3684]!	; 0xe64

00005424 <rb_event_add@plt>:
    5424:	add	ip, pc, #0, 12
    5428:	add	ip, ip, #139264	; 0x22000
    542c:	ldr	pc, [ip, #3676]!	; 0xe5c

00005430 <readlink@plt>:
    5430:	add	ip, pc, #0, 12
    5434:	add	ip, ip, #139264	; 0x22000
    5438:	ldr	pc, [ip, #3668]!	; 0xe54

0000543c <SSL_CTX_new@plt>:
    543c:	add	ip, pc, #0, 12
    5440:	add	ip, ip, #139264	; 0x22000
    5444:	ldr	pc, [ip, #3660]!	; 0xe4c

00005448 <rb_setup_fd@plt>:
    5448:	add	ip, pc, #0, 12
    544c:	add	ip, ip, #139264	; 0x22000
    5450:	ldr	pc, [ip, #3652]!	; 0xe44

00005454 <recvmsg@plt>:
    5454:	add	ip, pc, #0, 12
    5458:	add	ip, ip, #139264	; 0x22000
    545c:	ldr	pc, [ip, #3644]!	; 0xe3c

00005460 <rand@plt>:
    5460:	add	ip, pc, #0, 12
    5464:	add	ip, ip, #139264	; 0x22000
    5468:	ldr	pc, [ip, #3636]!	; 0xe34

0000546c <rb_linebuf_init@plt>:
    546c:	add	ip, pc, #0, 12
    5470:	add	ip, ip, #139264	; 0x22000
    5474:	ldr	pc, [ip, #3628]!	; 0xe2c

00005478 <__fxstat@plt>:
    5478:	add	ip, pc, #0, 12
    547c:	add	ip, ip, #139264	; 0x22000
    5480:	ldr	pc, [ip, #3620]!	; 0xe24

00005484 <SSL_set_connect_state@plt>:
    5484:	add	ip, pc, #0, 12
    5488:	add	ip, ip, #139264	; 0x22000
    548c:	ldr	pc, [ip, #3612]!	; 0xe1c

00005490 <rb_radixtree_elem_find@plt>:
    5490:	add	ip, pc, #0, 12
    5494:	add	ip, ip, #139264	; 0x22000
    5498:	ldr	pc, [ip, #3604]!	; 0xe14

0000549c <rb_make_rb_dlink_node@plt>:
    549c:	add	ip, pc, #0, 12
    54a0:	add	ip, ip, #139264	; 0x22000
    54a4:	ldr	pc, [ip, #3596]!	; 0xe0c

000054a8 <rb_strlcat@plt>:
    54a8:	add	ip, pc, #0, 12
    54ac:	add	ip, ip, #139264	; 0x22000
    54b0:	ldr	pc, [ip, #3588]!	; 0xe04

000054b4 <rb_spawn_process@plt>:
    54b4:	add	ip, pc, #0, 12
    54b8:	add	ip, ip, #139264	; 0x22000
    54bc:	ldr	pc, [ip, #3580]!	; 0xdfc

000054c0 <EVP_sha512@plt>:
    54c0:	add	ip, pc, #0, 12
    54c4:	add	ip, ip, #139264	; 0x22000
    54c8:	ldr	pc, [ip, #3572]!	; 0xdf4

000054cc <snprintf@plt>:
    54cc:	add	ip, pc, #0, 12
    54d0:	add	ip, ip, #139264	; 0x22000
    54d4:	ldr	pc, [ip, #3564]!	; 0xdec

000054d8 <RAND_status@plt>:
    54d8:	add	ip, pc, #0, 12
    54dc:	add	ip, ip, #139264	; 0x22000
    54e0:	ldr	pc, [ip, #3556]!	; 0xde4

000054e4 <timerfd_create@plt>:
    54e4:	add	ip, pc, #0, 12
    54e8:	add	ip, ip, #139264	; 0x22000
    54ec:	ldr	pc, [ip, #3548]!	; 0xddc

000054f0 <EVP_sha256@plt>:
    54f0:	add	ip, pc, #0, 12
    54f4:	add	ip, ip, #139264	; 0x22000
    54f8:	ldr	pc, [ip, #3540]!	; 0xdd4

000054fc <strcspn@plt>:
    54fc:	add	ip, pc, #0, 12
    5500:	add	ip, ip, #139264	; 0x22000
    5504:	ldr	pc, [ip, #3532]!	; 0xdcc

00005508 <rb_linebuf_put@plt>:
    5508:	add	ip, pc, #0, 12
    550c:	add	ip, ip, #139264	; 0x22000
    5510:	ldr	pc, [ip, #3524]!	; 0xdc4

00005514 <rb_listen@plt>:
    5514:	add	ip, pc, #0, 12
    5518:	add	ip, ip, #139264	; 0x22000
    551c:	ldr	pc, [ip, #3516]!	; 0xdbc

00005520 <fcntl@plt>:
    5520:	add	ip, pc, #0, 12
    5524:	add	ip, ip, #139264	; 0x22000
    5528:	ldr	pc, [ip, #3508]!	; 0xdb4

0000552c <strncmp@plt>:
    552c:	add	ip, pc, #0, 12
    5530:	add	ip, ip, #139264	; 0x22000
    5534:	ldr	pc, [ip, #3500]!	; 0xdac

00005538 <kill@plt>:
    5538:	add	ip, pc, #0, 12
    553c:	add	ip, ip, #139264	; 0x22000
    5540:	ldr	pc, [ip, #3492]!	; 0xda4

00005544 <nanosleep@plt>:
    5544:	add	ip, pc, #0, 12
    5548:	add	ip, ip, #139264	; 0x22000
    554c:	ldr	pc, [ip, #3484]!	; 0xd9c

00005550 <rb_event_next@plt>:
    5550:	add	ip, pc, #0, 12
    5554:	add	ip, ip, #139264	; 0x22000
    5558:	ldr	pc, [ip, #3476]!	; 0xd94

0000555c <realloc@plt>:
    555c:	add	ip, pc, #0, 12
    5560:	add	ip, ip, #139264	; 0x22000
    5564:	ldr	pc, [ip, #3468]!	; 0xd8c

00005568 <timerfd_settime@plt>:
    5568:	add	ip, pc, #0, 12
    556c:	add	ip, ip, #139264	; 0x22000
    5570:	ldr	pc, [ip, #3460]!	; 0xd84

00005574 <epoll_ctl@plt>:
    5574:	add	ip, pc, #0, 12
    5578:	add	ip, ip, #139264	; 0x22000
    557c:	ldr	pc, [ip, #3452]!	; 0xd7c

00005580 <X509_free@plt>:
    5580:	add	ip, pc, #0, 12
    5584:	add	ip, ip, #139264	; 0x22000
    5588:	ldr	pc, [ip, #3444]!	; 0xd74

0000558c <readv@plt>:
    558c:	add	ip, pc, #0, 12
    5590:	add	ip, ip, #139264	; 0x22000
    5594:	ldr	pc, [ip, #3436]!	; 0xd6c

00005598 <getsockopt@plt>:
    5598:	add	ip, pc, #0, 12
    559c:	add	ip, ip, #139264	; 0x22000
    55a0:	ldr	pc, [ip, #3428]!	; 0xd64

000055a4 <pipe@plt>:
    55a4:	add	ip, pc, #0, 12
    55a8:	add	ip, ip, #139264	; 0x22000
    55ac:	ldr	pc, [ip, #3420]!	; 0xd5c

000055b0 <OpenSSL_version@plt>:
    55b0:	add	ip, pc, #0, 12
    55b4:	add	ip, ip, #139264	; 0x22000
    55b8:	ldr	pc, [ip, #3412]!	; 0xd54

000055bc <setsockopt@plt>:
    55bc:	add	ip, pc, #0, 12
    55c0:	add	ip, ip, #139264	; 0x22000
    55c4:	ldr	pc, [ip, #3404]!	; 0xd4c

000055c8 <SSL_get_error@plt>:
    55c8:	add	ip, pc, #0, 12
    55cc:	add	ip, ip, #139264	; 0x22000
    55d0:	ldr	pc, [ip, #3396]!	; 0xd44

000055d4 <SSL_get_version@plt>:
    55d4:	add	ip, pc, #0, 12
    55d8:	add	ip, ip, #139264	; 0x22000
    55dc:	ldr	pc, [ip, #3388]!	; 0xd3c

000055e0 <rb_radixtree_delete@plt>:
    55e0:	add	ip, pc, #0, 12
    55e4:	add	ip, ip, #139264	; 0x22000
    55e8:	ldr	pc, [ip, #3380]!	; 0xd34

000055ec <memchr@plt>:
    55ec:	add	ip, pc, #0, 12
    55f0:	add	ip, ip, #139264	; 0x22000
    55f4:	ldr	pc, [ip, #3372]!	; 0xd2c

000055f8 <setenv@plt>:
    55f8:	add	ip, pc, #0, 12
    55fc:	add	ip, ip, #139264	; 0x22000
    5600:	ldr	pc, [ip, #3364]!	; 0xd24

00005604 <strcmp@plt>:
    5604:	add	ip, pc, #0, 12
    5608:	add	ip, ip, #139264	; 0x22000
    560c:	ldr	pc, [ip, #3356]!	; 0xd1c

00005610 <__errno_location@plt>:
    5610:	add	ip, pc, #0, 12
    5614:	add	ip, ip, #139264	; 0x22000
    5618:	ldr	pc, [ip, #3348]!	; 0xd14

0000561c <__cxa_finalize@plt>:
    561c:	add	ip, pc, #0, 12
    5620:	add	ip, ip, #139264	; 0x22000
    5624:	ldr	pc, [ip, #3340]!	; 0xd0c

00005628 <sprintf@plt>:
    5628:	add	ip, pc, #0, 12
    562c:	add	ip, ip, #139264	; 0x22000
    5630:	ldr	pc, [ip, #3332]!	; 0xd04

00005634 <rb_bh_usage@plt>:
    5634:	add	ip, pc, #0, 12
    5638:	add	ip, ip, #139264	; 0x22000
    563c:	ldr	pc, [ip, #3324]!	; 0xcfc

00005640 <SSL_CTX_set_verify@plt>:
    5640:	add	ip, pc, #0, 12
    5644:	add	ip, ip, #139264	; 0x22000
    5648:	ldr	pc, [ip, #3316]!	; 0xcf4

Disassembly of section .text:

0000564c <call_weak_fn>:
    564c:	ldr	r3, [pc, #20]	; 5668 <call_weak_fn+0x1c>
    5650:	ldr	r2, [pc, #20]	; 566c <call_weak_fn+0x20>
    5654:	add	r3, pc, r3
    5658:	ldr	r2, [r3, r2]
    565c:	cmp	r2, #0
    5660:	bxeq	lr
    5664:	b	4e54 <__gmon_start__@plt>
    5668:	.word	0x000229a4
    566c:	.word	0x00000350

00005670 <deregister_tm_clones>:
    5670:	ldr	r0, [pc, #44]	; 56a4 <deregister_tm_clones+0x34>
    5674:	ldr	r3, [pc, #44]	; 56a8 <deregister_tm_clones+0x38>
    5678:	add	r0, pc, r0
    567c:	add	r3, pc, r3
    5680:	cmp	r3, r0
    5684:	ldr	r3, [pc, #32]	; 56ac <deregister_tm_clones+0x3c>
    5688:	add	r3, pc, r3
    568c:	bxeq	lr
    5690:	ldr	r2, [pc, #24]	; 56b0 <deregister_tm_clones+0x40>
    5694:	ldr	r3, [r3, r2]
    5698:	cmp	r3, #0
    569c:	bxeq	lr
    56a0:	bx	r3
    56a4:	.word	0x00022e40
    56a8:	.word	0x00022e3c
    56ac:	.word	0x00022970
    56b0:	.word	0x0000036c

000056b4 <register_tm_clones>:
    56b4:	ldr	r0, [pc, #56]	; 56f4 <register_tm_clones+0x40>
    56b8:	ldr	r3, [pc, #56]	; 56f8 <register_tm_clones+0x44>
    56bc:	add	r0, pc, r0
    56c0:	add	r3, pc, r3
    56c4:	sub	r1, r3, r0
    56c8:	ldr	r3, [pc, #44]	; 56fc <register_tm_clones+0x48>
    56cc:	asr	r1, r1, #2
    56d0:	add	r3, pc, r3
    56d4:	add	r1, r1, r1, lsr #31
    56d8:	asrs	r1, r1, #1
    56dc:	bxeq	lr
    56e0:	ldr	r2, [pc, #24]	; 5700 <register_tm_clones+0x4c>
    56e4:	ldr	r3, [r3, r2]
    56e8:	cmp	r3, #0
    56ec:	bxeq	lr
    56f0:	bx	r3
    56f4:	.word	0x00022dfc
    56f8:	.word	0x00022df8
    56fc:	.word	0x00022928
    5700:	.word	0x0000037c

00005704 <__do_global_dtors_aux>:
    5704:	ldr	r3, [pc, #76]	; 5758 <__do_global_dtors_aux+0x54>
    5708:	ldr	r2, [pc, #76]	; 575c <__do_global_dtors_aux+0x58>
    570c:	add	r3, pc, r3
    5710:	add	r2, pc, r2
    5714:	ldrb	r3, [r3]
    5718:	cmp	r3, #0
    571c:	bxne	lr
    5720:	ldr	r3, [pc, #56]	; 5760 <__do_global_dtors_aux+0x5c>
    5724:	push	{r4, lr}
    5728:	ldr	r3, [r2, r3]
    572c:	cmp	r3, #0
    5730:	beq	5740 <__do_global_dtors_aux+0x3c>
    5734:	ldr	r3, [pc, #40]	; 5764 <__do_global_dtors_aux+0x60>
    5738:	ldr	r0, [pc, r3]
    573c:	bl	561c <__cxa_finalize@plt>
    5740:	bl	5670 <deregister_tm_clones>
    5744:	ldr	r3, [pc, #28]	; 5768 <__do_global_dtors_aux+0x64>
    5748:	mov	r2, #1
    574c:	add	r3, pc, r3
    5750:	strb	r2, [r3]
    5754:	pop	{r4, pc}
    5758:	.word	0x00022dac
    575c:	.word	0x000228e8
    5760:	.word	0x0000040c
    5764:	.word	0x00022cd4
    5768:	.word	0x00022d6c

0000576c <frame_dummy>:
    576c:	b	56b4 <register_tm_clones>

00005770 <rb_spawn_process>:
    5770:	push	{r4, r5, r6, sl, fp, lr}
    5774:	add	fp, sp, #16
    5778:	sub	sp, sp, #352	; 0x160
    577c:	mov	r4, r1
    5780:	mov	r5, r0
    5784:	add	r6, sp, #12
    5788:	mov	r0, r6
    578c:	bl	4ff8 <posix_spawnattr_init@plt>
    5790:	mov	r0, r6
    5794:	mov	r1, #64	; 0x40
    5798:	bl	5148 <posix_spawnattr_setflags@plt>
    579c:	ldr	r0, [pc, #80]	; 57f4 <rb_spawn_process+0x84>
    57a0:	ldr	r0, [pc, r0]
    57a4:	ldr	r0, [r0]
    57a8:	str	r4, [sp]
    57ac:	str	r0, [sp, #4]
    57b0:	sub	r0, fp, #20
    57b4:	mov	r1, r5
    57b8:	mov	r2, #0
    57bc:	mov	r3, r6
    57c0:	bl	5100 <posix_spawn@plt>
    57c4:	mov	r4, r0
    57c8:	mov	r0, r6
    57cc:	bl	5184 <posix_spawnattr_destroy@plt>
    57d0:	cmp	r4, #0
    57d4:	beq	57e8 <rb_spawn_process+0x78>
    57d8:	bl	5610 <__errno_location@plt>
    57dc:	str	r4, [r0]
    57e0:	mvn	r0, #0
    57e4:	str	r0, [fp, #-20]	; 0xffffffec
    57e8:	ldr	r0, [fp, #-20]	; 0xffffffec
    57ec:	sub	sp, fp, #16
    57f0:	pop	{r4, r5, r6, sl, fp, pc}
    57f4:	.word	0x00022bec

000057f8 <rb_gettimeofday>:
    57f8:	b	5088 <gettimeofday@plt>

000057fc <rb_sleep>:
    57fc:	push	{fp, lr}
    5800:	mov	fp, sp
    5804:	sub	sp, sp, #8
    5808:	str	r0, [sp]
    580c:	mov	r0, #1000	; 0x3e8
    5810:	mul	r0, r1, r0
    5814:	str	r0, [sp, #4]
    5818:	mov	r0, sp
    581c:	mov	r1, #0
    5820:	bl	5544 <nanosleep@plt>
    5824:	mov	sp, fp
    5828:	pop	{fp, pc}

0000582c <rb_strerror>:
    582c:	b	4cec <strerror@plt>

00005830 <rb_kill>:
    5830:	b	5538 <kill@plt>

00005834 <rb_setenv>:
    5834:	b	55f8 <setenv@plt>

00005838 <rb_waitpid>:
    5838:	b	51c0 <waitpid@plt>

0000583c <rb_getpid>:
    583c:	b	53e8 <getpid@plt>

00005840 <rb_path_to_self>:
    5840:	push	{r4, sl, fp, lr}
    5844:	add	fp, sp, #8
    5848:	ldr	r0, [pc, #36]	; 5874 <rb_path_to_self+0x34>
    584c:	add	r0, pc, r0
    5850:	ldr	r4, [pc, #32]	; 5878 <rb_path_to_self+0x38>
    5854:	add	r4, pc, r4
    5858:	mov	r1, r4
    585c:	mov	r2, #4096	; 0x1000
    5860:	bl	5430 <readlink@plt>
    5864:	cmn	r0, #1
    5868:	addeq	r4, r0, #1
    586c:	mov	r0, r4
    5870:	pop	{r4, sl, fp, pc}
    5874:	.word	0x0000f5dc
    5878:	.word	0x00022c65

0000587c <rb_init_netio_win32>:
    587c:	push	{fp, lr}
    5880:	mov	fp, sp
    5884:	bl	5610 <__errno_location@plt>
    5888:	mov	r1, #38	; 0x26
    588c:	str	r1, [r0]
    5890:	mvn	r0, #0
    5894:	pop	{fp, pc}

00005898 <rb_setselect_win32>:
    5898:	push	{fp, lr}
    589c:	mov	fp, sp
    58a0:	bl	5610 <__errno_location@plt>
    58a4:	mov	r1, #38	; 0x26
    58a8:	str	r1, [r0]
    58ac:	pop	{fp, pc}

000058b0 <rb_select_win32>:
    58b0:	push	{fp, lr}
    58b4:	mov	fp, sp
    58b8:	bl	5610 <__errno_location@plt>
    58bc:	mov	r1, #38	; 0x26
    58c0:	str	r1, [r0]
    58c4:	mvn	r0, #0
    58c8:	pop	{fp, pc}

000058cc <rb_setup_fd_win32>:
    58cc:	push	{fp, lr}
    58d0:	mov	fp, sp
    58d4:	bl	5610 <__errno_location@plt>
    58d8:	mov	r1, #38	; 0x26
    58dc:	str	r1, [r0]
    58e0:	mvn	r0, #0
    58e4:	pop	{fp, pc}

000058e8 <rb_crypt>:
    58e8:	push	{fp, lr}
    58ec:	mov	fp, sp
    58f0:	ldrb	r2, [r1]
    58f4:	cmp	r2, #36	; 0x24
    58f8:	bne	5944 <rb_crypt+0x5c>
    58fc:	ldrb	r2, [r1, #2]
    5900:	cmp	r2, #36	; 0x24
    5904:	ldrbne	r2, [r1, #3]
    5908:	cmpne	r2, #36	; 0x24
    590c:	bne	5944 <rb_crypt+0x5c>
    5910:	ldrb	r3, [r1, #1]
    5914:	cmp	r3, #54	; 0x36
    5918:	beq	5958 <rb_crypt+0x70>
    591c:	cmp	r3, #53	; 0x35
    5920:	beq	5960 <rb_crypt+0x78>
    5924:	mov	r2, #0
    5928:	cmp	r3, #49	; 0x31
    592c:	bne	5950 <rb_crypt+0x68>
    5930:	bl	5970 <rb_md5_crypt>
    5934:	ldr	r2, [pc, #44]	; 5968 <rb_crypt+0x80>
    5938:	add	r2, pc, r2
    593c:	mov	r0, r2
    5940:	pop	{fp, pc}
    5944:	bl	5f10 <rb_des_crypt>
    5948:	ldr	r2, [pc, #28]	; 596c <rb_crypt+0x84>
    594c:	add	r2, pc, r2
    5950:	mov	r0, r2
    5954:	pop	{fp, pc}
    5958:	pop	{fp, lr}
    595c:	b	5e78 <rb_sha512_crypt>
    5960:	pop	{fp, lr}
    5964:	b	5e20 <rb_sha256_crypt>
    5968:	.word	0x00034f58
    596c:	.word	0x00023b74

00005970 <rb_md5_crypt>:
    5970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5974:	add	fp, sp, #28
    5978:	sub	sp, sp, #204	; 0xcc
    597c:	mov	r5, r1
    5980:	mov	r4, r0
    5984:	ldr	r6, [pc, #1084]	; 5dc8 <rb_md5_crypt+0x458>
    5988:	add	r6, pc, r6
    598c:	str	r1, [r6]
    5990:	ldr	r1, [pc, #1076]	; 5dcc <rb_md5_crypt+0x45c>
    5994:	add	r1, pc, r1
    5998:	mov	r0, r5
    599c:	mov	r2, #3
    59a0:	bl	552c <strncmp@plt>
    59a4:	cmp	r0, #0
    59a8:	addeq	r0, r5, #3
    59ac:	streq	r0, [r6]
    59b0:	ldr	r6, [pc, #1048]	; 5dd0 <rb_md5_crypt+0x460>
    59b4:	ldr	r6, [pc, r6]
    59b8:	ldr	r0, [pc, #1044]	; 5dd4 <rb_md5_crypt+0x464>
    59bc:	add	r0, pc, r0
    59c0:	str	r6, [r0]
    59c4:	add	r1, r6, #8
    59c8:	b	59d4 <rb_md5_crypt+0x64>
    59cc:	add	r2, r2, #1
    59d0:	str	r2, [r0]
    59d4:	ldr	r2, [pc, #1020]	; 5dd8 <rb_md5_crypt+0x468>
    59d8:	ldr	r2, [pc, r2]
    59dc:	ldrb	r3, [r2]
    59e0:	cmp	r3, #0
    59e4:	cmpne	r3, #36	; 0x24
    59e8:	beq	59f4 <rb_md5_crypt+0x84>
    59ec:	cmp	r2, r1
    59f0:	bcc	59cc <rb_md5_crypt+0x5c>
    59f4:	ldr	r7, [pc, #992]	; 5ddc <rb_md5_crypt+0x46c>
    59f8:	ldr	r7, [pc, r7]
    59fc:	add	r5, sp, #116	; 0x74
    5a00:	mov	r0, r5
    5a04:	bl	6c18 <MD5Init>
    5a08:	mov	r0, r4
    5a0c:	bl	510c <strlen@plt>
    5a10:	mov	r2, r0
    5a14:	mov	r0, r5
    5a18:	mov	r1, r4
    5a1c:	bl	6c54 <MD5Update>
    5a20:	ldr	r1, [pc, #952]	; 5de0 <rb_md5_crypt+0x470>
    5a24:	add	r1, pc, r1
    5a28:	mov	r0, r5
    5a2c:	mov	r2, #3
    5a30:	bl	6c54 <MD5Update>
    5a34:	sub	r7, r7, r6
    5a38:	ldr	r1, [pc, #932]	; 5de4 <rb_md5_crypt+0x474>
    5a3c:	ldr	r1, [pc, r1]
    5a40:	mov	r0, r5
    5a44:	mov	r2, r7
    5a48:	bl	6c54 <MD5Update>
    5a4c:	add	r6, sp, #28
    5a50:	mov	r0, r6
    5a54:	bl	6c18 <MD5Init>
    5a58:	mov	r0, r4
    5a5c:	bl	510c <strlen@plt>
    5a60:	mov	r2, r0
    5a64:	mov	r0, r6
    5a68:	mov	r1, r4
    5a6c:	bl	6c54 <MD5Update>
    5a70:	ldr	r1, [pc, #880]	; 5de8 <rb_md5_crypt+0x478>
    5a74:	ldr	r1, [pc, r1]
    5a78:	mov	r0, r6
    5a7c:	str	r7, [sp, #4]
    5a80:	mov	r2, r7
    5a84:	bl	6c54 <MD5Update>
    5a88:	mov	r0, r4
    5a8c:	bl	510c <strlen@plt>
    5a90:	mov	r2, r0
    5a94:	mov	r0, r6
    5a98:	mov	r1, r4
    5a9c:	bl	6c54 <MD5Update>
    5aa0:	add	r8, sp, #8
    5aa4:	mov	r0, r8
    5aa8:	mov	r1, r6
    5aac:	bl	6d14 <MD5Final>
    5ab0:	mov	r0, r4
    5ab4:	bl	510c <strlen@plt>
    5ab8:	cmp	r0, #1
    5abc:	blt	5aec <rb_md5_crypt+0x17c>
    5ac0:	mov	r5, r0
    5ac4:	add	r6, sp, #116	; 0x74
    5ac8:	add	r7, sp, #8
    5acc:	cmp	r5, #16
    5ad0:	mov	r2, r5
    5ad4:	movge	r2, #16
    5ad8:	mov	r0, r6
    5adc:	mov	r1, r7
    5ae0:	bl	6c54 <MD5Update>
    5ae4:	subs	r5, r5, #16
    5ae8:	bgt	5acc <rb_md5_crypt+0x15c>
    5aec:	vmov.i32	q8, #0	; 0x00000000
    5af0:	vst1.64	{d16-d17}, [r8]
    5af4:	mov	r0, r4
    5af8:	bl	510c <strlen@plt>
    5afc:	cmp	r0, #0
    5b00:	beq	5b3c <rb_md5_crypt+0x1cc>
    5b04:	mov	r6, r0
    5b08:	add	r7, sp, #116	; 0x74
    5b0c:	mov	r5, #0
    5b10:	add	r8, sp, #8
    5b14:	mov	r0, r7
    5b18:	tst	r6, #1
    5b1c:	moveq	r1, r4
    5b20:	movne	r1, r8
    5b24:	mov	r2, #1
    5b28:	bl	6c54 <MD5Update>
    5b2c:	lsr	r0, r6, #1
    5b30:	cmp	r5, r6, lsr #1
    5b34:	mov	r6, r0
    5b38:	bne	5b14 <rb_md5_crypt+0x1a4>
    5b3c:	ldr	r5, [pc, #680]	; 5dec <rb_md5_crypt+0x47c>
    5b40:	add	r5, pc, r5
    5b44:	ldr	r1, [pc, #676]	; 5df0 <rb_md5_crypt+0x480>
    5b48:	add	r1, pc, r1
    5b4c:	mov	r0, r5
    5b50:	mov	r2, #120	; 0x78
    5b54:	bl	4fe0 <rb_strlcpy@plt>
    5b58:	ldr	r1, [pc, #660]	; 5df4 <rb_md5_crypt+0x484>
    5b5c:	ldr	r1, [pc, r1]
    5b60:	mov	r0, r5
    5b64:	ldr	r2, [sp, #4]
    5b68:	bl	51e4 <strncat@plt>
    5b6c:	ldr	r1, [pc, #644]	; 5df8 <rb_md5_crypt+0x488>
    5b70:	add	r1, pc, r1
    5b74:	mov	r0, r5
    5b78:	mov	r2, #120	; 0x78
    5b7c:	bl	54a8 <rb_strlcat@plt>
    5b80:	add	r7, sp, #8
    5b84:	add	r1, sp, #116	; 0x74
    5b88:	mov	r0, r7
    5b8c:	bl	6d14 <MD5Final>
    5b90:	mov	r5, #0
    5b94:	add	r6, sp, #28
    5b98:	movw	r8, #18725	; 0x4925
    5b9c:	movt	r8, #9362	; 0x2492
    5ba0:	mov	r0, r6
    5ba4:	bl	6c18 <MD5Init>
    5ba8:	ands	r9, r5, #1
    5bac:	beq	5bc8 <rb_md5_crypt+0x258>
    5bb0:	mov	r0, r4
    5bb4:	bl	510c <strlen@plt>
    5bb8:	mov	r2, r0
    5bbc:	mov	r0, r6
    5bc0:	mov	r1, r4
    5bc4:	b	5bd4 <rb_md5_crypt+0x264>
    5bc8:	mov	r0, r6
    5bcc:	mov	r1, r7
    5bd0:	mov	r2, #16
    5bd4:	bl	6c54 <MD5Update>
    5bd8:	uxth	sl, r5
    5bdc:	movw	r0, #43691	; 0xaaab
    5be0:	movt	r0, #43690	; 0xaaaa
    5be4:	umull	r0, r1, sl, r0
    5be8:	lsr	r0, r1, #1
    5bec:	add	r0, r0, r0, lsl #1
    5bf0:	subs	r0, sl, r0
    5bf4:	beq	5c0c <rb_md5_crypt+0x29c>
    5bf8:	ldr	r1, [pc, #508]	; 5dfc <rb_md5_crypt+0x48c>
    5bfc:	ldr	r1, [pc, r1]
    5c00:	mov	r0, r6
    5c04:	ldr	r2, [sp, #4]
    5c08:	bl	6c54 <MD5Update>
    5c0c:	umull	r0, r1, sl, r8
    5c10:	sub	r0, sl, r1
    5c14:	add	r0, r1, r0, lsr #1
    5c18:	lsr	r0, r0, #2
    5c1c:	sub	r0, r0, r0, lsl #3
    5c20:	uxtah	r0, r0, r5
    5c24:	cmp	r0, #0
    5c28:	beq	5c44 <rb_md5_crypt+0x2d4>
    5c2c:	mov	r0, r4
    5c30:	bl	510c <strlen@plt>
    5c34:	mov	r2, r0
    5c38:	mov	r0, r6
    5c3c:	mov	r1, r4
    5c40:	bl	6c54 <MD5Update>
    5c44:	cmp	r9, #0
    5c48:	beq	5c5c <rb_md5_crypt+0x2ec>
    5c4c:	mov	r0, r6
    5c50:	mov	r1, r7
    5c54:	mov	r2, #16
    5c58:	b	5c70 <rb_md5_crypt+0x300>
    5c5c:	mov	r0, r4
    5c60:	bl	510c <strlen@plt>
    5c64:	mov	r2, r0
    5c68:	mov	r0, r6
    5c6c:	mov	r1, r4
    5c70:	bl	6c54 <MD5Update>
    5c74:	mov	r0, r7
    5c78:	mov	r1, r6
    5c7c:	bl	6d14 <MD5Final>
    5c80:	add	r5, r5, #1
    5c84:	cmp	r5, #1000	; 0x3e8
    5c88:	bne	5ba0 <rb_md5_crypt+0x230>
    5c8c:	ldr	r4, [pc, #364]	; 5e00 <rb_md5_crypt+0x490>
    5c90:	add	r4, pc, r4
    5c94:	mov	r0, r4
    5c98:	bl	510c <strlen@plt>
    5c9c:	add	r0, r4, r0
    5ca0:	ldr	r4, [pc, #348]	; 5e04 <rb_md5_crypt+0x494>
    5ca4:	add	r4, pc, r4
    5ca8:	str	r0, [r4]
    5cac:	ldrb	r1, [sp, #8]
    5cb0:	ldrb	r2, [sp, #14]
    5cb4:	ldrb	r3, [sp, #20]
    5cb8:	lsl	r2, r2, #8
    5cbc:	orr	r1, r2, r1, lsl #16
    5cc0:	orr	r1, r1, r3
    5cc4:	mov	r2, #4
    5cc8:	bl	6d78 <_crypt_to64>
    5ccc:	ldr	r0, [pc, #308]	; 5e08 <rb_md5_crypt+0x498>
    5cd0:	ldr	r0, [pc, r0]
    5cd4:	add	r0, r0, #4
    5cd8:	str	r0, [r4]
    5cdc:	ldrb	r1, [sp, #9]
    5ce0:	ldrb	r2, [sp, #15]
    5ce4:	ldrb	r3, [sp, #21]
    5ce8:	lsl	r2, r2, #8
    5cec:	orr	r1, r2, r1, lsl #16
    5cf0:	orr	r1, r1, r3
    5cf4:	mov	r2, #4
    5cf8:	bl	6d78 <_crypt_to64>
    5cfc:	ldr	r0, [pc, #264]	; 5e0c <rb_md5_crypt+0x49c>
    5d00:	ldr	r0, [pc, r0]
    5d04:	add	r0, r0, #4
    5d08:	str	r0, [r4]
    5d0c:	ldrb	r1, [sp, #10]
    5d10:	ldrb	r2, [sp, #16]
    5d14:	ldrb	r3, [sp, #22]
    5d18:	lsl	r2, r2, #8
    5d1c:	orr	r1, r2, r1, lsl #16
    5d20:	orr	r1, r1, r3
    5d24:	mov	r2, #4
    5d28:	bl	6d78 <_crypt_to64>
    5d2c:	ldr	r0, [pc, #220]	; 5e10 <rb_md5_crypt+0x4a0>
    5d30:	ldr	r0, [pc, r0]
    5d34:	add	r0, r0, #4
    5d38:	str	r0, [r4]
    5d3c:	ldrb	r1, [sp, #11]
    5d40:	ldrb	r2, [sp, #17]
    5d44:	ldrb	r3, [sp, #23]
    5d48:	lsl	r2, r2, #8
    5d4c:	orr	r1, r2, r1, lsl #16
    5d50:	orr	r1, r1, r3
    5d54:	mov	r2, #4
    5d58:	bl	6d78 <_crypt_to64>
    5d5c:	ldr	r0, [pc, #176]	; 5e14 <rb_md5_crypt+0x4a4>
    5d60:	ldr	r0, [pc, r0]
    5d64:	add	r0, r0, #4
    5d68:	str	r0, [r4]
    5d6c:	ldrb	r1, [sp, #12]
    5d70:	ldrb	r2, [sp, #13]
    5d74:	ldrb	r3, [sp, #18]
    5d78:	lsl	r3, r3, #8
    5d7c:	orr	r1, r3, r1, lsl #16
    5d80:	orr	r1, r1, r2
    5d84:	mov	r2, #4
    5d88:	bl	6d78 <_crypt_to64>
    5d8c:	ldr	r0, [pc, #132]	; 5e18 <rb_md5_crypt+0x4a8>
    5d90:	ldr	r0, [pc, r0]
    5d94:	add	r0, r0, #4
    5d98:	str	r0, [r4]
    5d9c:	ldrb	r1, [sp, #19]
    5da0:	mov	r2, #2
    5da4:	bl	6d78 <_crypt_to64>
    5da8:	ldr	r0, [pc, #108]	; 5e1c <rb_md5_crypt+0x4ac>
    5dac:	ldr	r0, [pc, r0]
    5db0:	add	r1, r0, #2
    5db4:	str	r1, [r4]
    5db8:	mov	r1, #0
    5dbc:	strb	r1, [r0, #2]
    5dc0:	sub	sp, fp, #28
    5dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5dc8:	.word	0x00034f00
    5dcc:	.word	0x0000f4e4
    5dd0:	.word	0x00034ed4
    5dd4:	.word	0x00034ed0
    5dd8:	.word	0x00034eb4
    5ddc:	.word	0x00034e94
    5de0:	.word	0x0000f454
    5de4:	.word	0x00034e4c
    5de8:	.word	0x00034e14
    5dec:	.word	0x00034d50
    5df0:	.word	0x0000f330
    5df4:	.word	0x00034d2c
    5df8:	.word	0x0000f30a
    5dfc:	.word	0x00034c8c
    5e00:	.word	0x00034c00
    5e04:	.word	0x00034c64
    5e08:	.word	0x00034c38
    5e0c:	.word	0x00034c08
    5e10:	.word	0x00034bd8
    5e14:	.word	0x00034ba8
    5e18:	.word	0x00034b78
    5e1c:	.word	0x00034b5c

00005e20 <rb_sha256_crypt>:
    5e20:	push	{r4, r5, r6, sl, fp, lr}
    5e24:	add	fp, sp, #16
    5e28:	mov	r4, r1
    5e2c:	mov	r5, r0
    5e30:	mov	r0, r1
    5e34:	bl	510c <strlen@plt>
    5e38:	add	r6, r0, #66	; 0x42
    5e3c:	mov	r0, r6
    5e40:	bl	52c8 <malloc@plt>
    5e44:	cmp	r0, #0
    5e48:	moveq	r0, #0
    5e4c:	popeq	{r4, r5, r6, sl, fp, pc}
    5e50:	mov	r2, r0
    5e54:	ldr	r0, [pc, #24]	; 5e74 <rb_sha256_crypt+0x54>
    5e58:	add	r0, pc, r0
    5e5c:	str	r2, [r0]
    5e60:	mov	r0, r5
    5e64:	mov	r1, r4
    5e68:	mov	r3, r6
    5e6c:	pop	{r4, r5, r6, sl, fp, lr}
    5e70:	b	7838 <rb_sha256_crypt_r>
    5e74:	.word	0x00034ab4

00005e78 <rb_sha512_crypt>:
    5e78:	push	{r4, r5, r6, sl, fp, lr}
    5e7c:	add	fp, sp, #16
    5e80:	mov	r4, r1
    5e84:	mov	r5, r0
    5e88:	mov	r0, r1
    5e8c:	bl	510c <strlen@plt>
    5e90:	add	r6, r0, #109	; 0x6d
    5e94:	ldr	r0, [pc, #92]	; 5ef8 <rb_sha512_crypt+0x80>
    5e98:	ldr	r0, [pc, r0]
    5e9c:	cmp	r0, r6
    5ea0:	bge	5ed8 <rb_sha512_crypt+0x60>
    5ea4:	ldr	r0, [pc, #80]	; 5efc <rb_sha512_crypt+0x84>
    5ea8:	ldr	r0, [pc, r0]
    5eac:	mov	r1, r6
    5eb0:	bl	555c <realloc@plt>
    5eb4:	cmp	r0, #0
    5eb8:	moveq	r0, #0
    5ebc:	popeq	{r4, r5, r6, sl, fp, pc}
    5ec0:	ldr	r1, [pc, #56]	; 5f00 <rb_sha512_crypt+0x88>
    5ec4:	add	r1, pc, r1
    5ec8:	str	r6, [r1]
    5ecc:	ldr	r1, [pc, #48]	; 5f04 <rb_sha512_crypt+0x8c>
    5ed0:	add	r1, pc, r1
    5ed4:	str	r0, [r1]
    5ed8:	ldr	r3, [pc, #40]	; 5f08 <rb_sha512_crypt+0x90>
    5edc:	ldr	r3, [pc, r3]
    5ee0:	ldr	r2, [pc, #36]	; 5f0c <rb_sha512_crypt+0x94>
    5ee4:	ldr	r2, [pc, r2]
    5ee8:	mov	r0, r5
    5eec:	mov	r1, r4
    5ef0:	pop	{r4, r5, r6, sl, fp, lr}
    5ef4:	b	8888 <rb_sha512_crypt_r>
    5ef8:	.word	0x00034a7c
    5efc:	.word	0x00034a68
    5f00:	.word	0x00034a50
    5f04:	.word	0x00034a40
    5f08:	.word	0x00034a38
    5f0c:	.word	0x00034a2c

00005f10 <rb_des_crypt>:
    5f10:	push	{r4, r5, r6, r7, fp, lr}
    5f14:	add	fp, sp, #16
    5f18:	sub	sp, sp, #16
    5f1c:	mov	r4, r1
    5f20:	mov	r5, r0
    5f24:	bl	605c <rb_des_init>
    5f28:	mov	r0, sp
    5f2c:	orr	r1, r0, #1
    5f30:	mov	r2, #254	; 0xfe
    5f34:	mov	r3, r5
    5f38:	ldrb	r7, [r3], #1
    5f3c:	lsl	r6, r7, #1
    5f40:	strb	r6, [r1, #-1]
    5f44:	tst	r2, r7, lsl #1
    5f48:	movne	r5, r3
    5f4c:	sub	r3, r1, r0
    5f50:	add	r1, r1, #1
    5f54:	cmp	r3, #8
    5f58:	bne	5f34 <rb_des_crypt+0x24>
    5f5c:	mov	r0, sp
    5f60:	bl	6570 <rb_des_setkey>
    5f64:	ldrb	r5, [r4, #1]
    5f68:	mov	r0, r5
    5f6c:	bl	6834 <rb_ascii_to_bin>
    5f70:	mov	r6, r0
    5f74:	ldrb	r4, [r4]
    5f78:	mov	r0, r4
    5f7c:	bl	6834 <rb_ascii_to_bin>
    5f80:	ldr	r7, [pc, #204]	; 6054 <rb_des_crypt+0x144>
    5f84:	add	r7, pc, r7
    5f88:	strb	r4, [r7]
    5f8c:	cmp	r5, #0
    5f90:	moveq	r5, r4
    5f94:	strb	r5, [r7, #1]
    5f98:	orr	r0, r0, r6, lsl #6
    5f9c:	bl	6878 <rb_setup_salt>
    5fa0:	add	r0, sp, #12
    5fa4:	add	r1, sp, #8
    5fa8:	bl	68f0 <rb_do_des>
    5fac:	mov	r0, #0
    5fb0:	strb	r0, [r7, #13]
    5fb4:	ldr	r1, [sp, #12]
    5fb8:	ldr	r0, [pc, #152]	; 6058 <rb_des_crypt+0x148>
    5fbc:	add	r0, pc, r0
    5fc0:	ldrb	r2, [r0, r1, lsr #26]
    5fc4:	strb	r2, [r7, #2]
    5fc8:	ubfx	r2, r1, #20, #6
    5fcc:	ldrb	r2, [r0, r2]
    5fd0:	strb	r2, [r7, #3]
    5fd4:	ubfx	r2, r1, #14, #6
    5fd8:	ldrb	r2, [r0, r2]
    5fdc:	strb	r2, [r7, #4]
    5fe0:	ubfx	r2, r1, #8, #6
    5fe4:	ldrb	r2, [r0, r2]
    5fe8:	strb	r2, [r7, #5]
    5fec:	ubfx	r2, r1, #2, #6
    5ff0:	ldrb	r2, [r0, r2]
    5ff4:	strb	r2, [r7, #6]
    5ff8:	ldr	r2, [sp, #8]
    5ffc:	ubfx	r3, r2, #22, #6
    6000:	ldrb	r3, [r0, r3]
    6004:	strb	r3, [r7, #8]
    6008:	ubfx	r3, r2, #16, #6
    600c:	ldrb	r3, [r0, r3]
    6010:	strb	r3, [r7, #9]
    6014:	ubfx	r3, r2, #10, #6
    6018:	ldrb	r3, [r0, r3]
    601c:	strb	r3, [r7, #10]
    6020:	ubfx	r3, r2, #4, #6
    6024:	ldrb	r3, [r0, r3]
    6028:	strb	r3, [r7, #11]
    602c:	and	r3, r2, #15
    6030:	ldrb	r3, [r0, r3, lsl #2]
    6034:	strb	r3, [r7, #12]
    6038:	lsr	r2, r2, #16
    603c:	orr	r1, r2, r1, lsl #16
    6040:	ubfx	r1, r1, #12, #6
    6044:	ldrb	r0, [r0, r1]
    6048:	strb	r0, [r7, #7]
    604c:	sub	sp, fp, #16
    6050:	pop	{r4, r5, r6, r7, fp, pc}
    6054:	.word	0x0002353c
    6058:	.word	0x0000ee7b

0000605c <rb_des_init>:
    605c:	ldr	r0, [pc, #1172]	; 64f8 <rb_des_init+0x49c>
    6060:	add	r0, pc, r0
    6064:	ldrb	r0, [r0]
    6068:	cmp	r0, #0
    606c:	bxne	lr
    6070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6074:	add	fp, sp, #28
    6078:	sub	sp, sp, #12
    607c:	ldr	r1, [pc, #1144]	; 64fc <rb_des_init+0x4a0>
    6080:	add	r1, pc, r1
    6084:	mov	r0, #0
    6088:	str	r0, [r1]
    608c:	ldr	r1, [pc, #1132]	; 6500 <rb_des_init+0x4a4>
    6090:	add	r1, pc, r1
    6094:	str	r0, [r1]
    6098:	ldr	r1, [pc, #1124]	; 6504 <rb_des_init+0x4a8>
    609c:	add	r1, pc, r1
    60a0:	str	r0, [r1]
    60a4:	ldr	r1, [pc, #1116]	; 6508 <rb_des_init+0x4ac>
    60a8:	add	r1, pc, r1
    60ac:	str	r0, [r1]
    60b0:	ldr	r1, [pc, #1108]	; 650c <rb_des_init+0x4b0>
    60b4:	add	r1, pc, r1
    60b8:	ldr	r2, [pc, #1104]	; 6510 <rb_des_init+0x4b4>
    60bc:	add	r2, pc, r2
    60c0:	mov	r3, #0
    60c4:	mov	r7, #0
    60c8:	add	r6, r2, r0, lsl #6
    60cc:	and	r5, r7, #32
    60d0:	and	r4, r3, #16
    60d4:	orr	r5, r4, r5
    60d8:	ubfx	r4, r7, #1, #4
    60dc:	orr	r5, r5, r4
    60e0:	ldrb	r6, [r6, r5]
    60e4:	strb	r6, [r1, r7]
    60e8:	add	r3, r3, #16
    60ec:	add	r7, r7, #1
    60f0:	cmp	r7, #64	; 0x40
    60f4:	bne	60c8 <rb_des_init+0x6c>
    60f8:	add	r1, r1, #64	; 0x40
    60fc:	add	r0, r0, #1
    6100:	cmp	r0, #8
    6104:	bne	60c0 <rb_des_init+0x64>
    6108:	ldr	ip, [pc, #1028]	; 6514 <rb_des_init+0x4b8>
    610c:	add	ip, pc, ip
    6110:	add	r1, ip, #64	; 0x40
    6114:	mov	r2, #0
    6118:	ldr	r9, [pc, #1016]	; 6518 <rb_des_init+0x4bc>
    611c:	add	r9, pc, r9
    6120:	lsl	lr, r2, #1
    6124:	mov	r8, #0
    6128:	add	r0, ip, lr, lsl #6
    612c:	ldrb	r0, [r0, r8]
    6130:	lsl	r5, r0, #4
    6134:	lsl	r4, r8, #6
    6138:	mov	r0, #0
    613c:	orr	r7, r0, r4
    6140:	add	r6, r9, r2, lsl #12
    6144:	ldrb	r3, [r1, r0]
    6148:	orr	r3, r5, r3
    614c:	strb	r3, [r6, r7]
    6150:	add	r0, r0, #1
    6154:	cmp	r0, #64	; 0x40
    6158:	bne	613c <rb_des_init+0xe0>
    615c:	add	r8, r8, #1
    6160:	cmp	r8, #64	; 0x40
    6164:	bne	6128 <rb_des_init+0xcc>
    6168:	add	r1, r1, #128	; 0x80
    616c:	add	r2, r2, #1
    6170:	cmp	r2, #4
    6174:	bne	6120 <rb_des_init+0xc4>
    6178:	ldr	r7, [pc, #924]	; 651c <rb_des_init+0x4c0>
    617c:	add	r7, pc, r7
    6180:	mov	r0, r7
    6184:	mov	r1, #255	; 0xff
    6188:	mov	r2, #64	; 0x40
    618c:	bl	4f68 <memset@plt>
    6190:	mov	r0, #0
    6194:	ldr	r1, [pc, #900]	; 6520 <rb_des_init+0x4c4>
    6198:	add	r1, pc, r1
    619c:	ldr	r5, [pc, #896]	; 6524 <rb_des_init+0x4c8>
    61a0:	add	r5, pc, r5
    61a4:	ldr	r8, [pc, #892]	; 6528 <rb_des_init+0x4cc>
    61a8:	add	r8, pc, r8
    61ac:	ldrb	r2, [r1, r0]
    61b0:	sub	r2, r2, #1
    61b4:	strb	r2, [r5, r0]
    61b8:	uxtb	r2, r2
    61bc:	strb	r0, [r8, r2]
    61c0:	add	r0, r0, #1
    61c4:	cmp	r0, #64	; 0x40
    61c8:	bne	61ac <rb_des_init+0x150>
    61cc:	ldr	r9, [pc, #856]	; 652c <rb_des_init+0x4d0>
    61d0:	add	r9, pc, r9
    61d4:	mov	r0, r9
    61d8:	mov	r1, #255	; 0xff
    61dc:	mov	r2, #56	; 0x38
    61e0:	bl	4f68 <memset@plt>
    61e4:	mov	r0, #0
    61e8:	ldr	r1, [pc, #832]	; 6530 <rb_des_init+0x4d4>
    61ec:	add	r1, pc, r1
    61f0:	ldrb	r2, [r1, r0]
    61f4:	add	r2, r7, r2
    61f8:	strb	r0, [r2, #-1]
    61fc:	add	r0, r0, #1
    6200:	cmp	r0, #56	; 0x38
    6204:	bne	61f0 <rb_des_init+0x194>
    6208:	mov	r0, #0
    620c:	ldr	r1, [pc, #800]	; 6534 <rb_des_init+0x4d8>
    6210:	add	r1, pc, r1
    6214:	ldrb	r2, [r1, r0]
    6218:	add	r2, r9, r2
    621c:	strb	r0, [r2, #-1]
    6220:	add	r0, r0, #1
    6224:	cmp	r0, #48	; 0x30
    6228:	bne	6214 <rb_des_init+0x1b8>
    622c:	mov	r0, #0
    6230:	str	r0, [sp, #4]
    6234:	ldr	ip, [pc, #764]	; 6538 <rb_des_init+0x4dc>
    6238:	add	ip, pc, ip
    623c:	ldr	lr, [pc, #760]	; 653c <rb_des_init+0x4e0>
    6240:	add	lr, pc, lr
    6244:	str	r5, [sp, #8]
    6248:	str	r7, [sp]
    624c:	mov	r3, #0
    6250:	ldr	r0, [sp, #4]
    6254:	ldr	r1, [pc, #740]	; 6540 <rb_des_init+0x4e4>
    6258:	add	r1, pc, r1
    625c:	add	sl, r1, r0, lsl #10
    6260:	mov	r4, #0
    6264:	str	r4, [sl, r3, lsl #2]!
    6268:	ldr	r1, [pc, #724]	; 6544 <rb_des_init+0x4e8>
    626c:	add	r1, pc, r1
    6270:	add	r7, r1, r0, lsl #10
    6274:	str	r4, [r7, r3, lsl #2]!
    6278:	ldr	r1, [pc, #712]	; 6548 <rb_des_init+0x4ec>
    627c:	add	r1, pc, r1
    6280:	add	r6, r1, r0, lsl #10
    6284:	str	r4, [r6, r3, lsl #2]!
    6288:	ldr	r1, [pc, #700]	; 654c <rb_des_init+0x4f0>
    628c:	add	r1, pc, r1
    6290:	add	r5, r1, r0, lsl #10
    6294:	str	r4, [r5, r3, lsl #2]!
    6298:	ldrb	r1, [ip, r4]
    629c:	tst	r3, r1
    62a0:	beq	62f0 <rb_des_init+0x294>
    62a4:	ldrb	r1, [r8, r4]
    62a8:	subs	r0, r1, #32
    62ac:	movcc	r0, r1
    62b0:	ldr	r0, [lr, r0, lsl #2]
    62b4:	mov	r1, r7
    62b8:	movcc	r1, sl
    62bc:	ldr	r2, [r1]
    62c0:	orr	r0, r2, r0
    62c4:	str	r0, [r1]
    62c8:	ldr	r0, [sp, #8]
    62cc:	ldrb	r0, [r0, r4]
    62d0:	subs	r1, r0, #32
    62d4:	movcc	r1, r0
    62d8:	ldr	r0, [lr, r1, lsl #2]
    62dc:	mov	r1, r5
    62e0:	movcc	r1, r6
    62e4:	ldr	r2, [r1]
    62e8:	orr	r0, r2, r0
    62ec:	str	r0, [r1]
    62f0:	add	r4, r4, #1
    62f4:	cmp	r4, #8
    62f8:	bne	6298 <rb_des_init+0x23c>
    62fc:	add	r3, r3, #1
    6300:	cmp	r3, #256	; 0x100
    6304:	bne	6250 <rb_des_init+0x1f4>
    6308:	mov	r2, #0
    630c:	mov	sl, #0
    6310:	ldr	r7, [sp]
    6314:	ldr	r0, [sp, #4]
    6318:	ldr	r1, [pc, #560]	; 6550 <rb_des_init+0x4f4>
    631c:	add	r1, pc, r1
    6320:	add	r3, r1, r0, lsl #9
    6324:	str	r2, [r3, sl, lsl #2]!
    6328:	ldr	r1, [pc, #548]	; 6554 <rb_des_init+0x4f8>
    632c:	add	r1, pc, r1
    6330:	add	r4, r1, r0, lsl #9
    6334:	str	r2, [r4, sl, lsl #2]!
    6338:	mov	r5, #0
    633c:	b	6374 <rb_des_init+0x318>
    6340:	add	r0, lr, r6, lsl #2
    6344:	cmp	r6, #27
    6348:	bhi	6360 <rb_des_init+0x304>
    634c:	ldr	r0, [r0, #16]
    6350:	ldr	r1, [r3]
    6354:	orr	r0, r1, r0
    6358:	str	r0, [r3]
    635c:	b	638c <rb_des_init+0x330>
    6360:	ldr	r0, [r0, #-96]	; 0xffffffa0
    6364:	ldr	r1, [r4]
    6368:	orr	r0, r1, r0
    636c:	str	r0, [r4]
    6370:	b	638c <rb_des_init+0x330>
    6374:	sub	r0, ip, r5
    6378:	ldrb	r0, [r0, #1]
    637c:	tst	sl, r0
    6380:	ldrbne	r6, [r7, -r5]
    6384:	cmpne	r6, #255	; 0xff
    6388:	bne	6340 <rb_des_init+0x2e4>
    638c:	sub	r5, r5, #1
    6390:	cmn	r5, #7
    6394:	bne	6374 <rb_des_init+0x318>
    6398:	ldr	r0, [sp, #4]
    639c:	ldr	r1, [pc, #436]	; 6558 <rb_des_init+0x4fc>
    63a0:	add	r1, pc, r1
    63a4:	add	r3, r1, r0, lsl #9
    63a8:	mov	r4, #0
    63ac:	str	r4, [r3, sl, lsl #2]!
    63b0:	ldr	r1, [pc, #420]	; 655c <rb_des_init+0x500>
    63b4:	add	r1, pc, r1
    63b8:	add	r6, r1, r0, lsl #9
    63bc:	str	r4, [r6, sl, lsl #2]!
    63c0:	b	63f8 <rb_des_init+0x39c>
    63c4:	add	r0, lr, r5, lsl #2
    63c8:	cmp	r5, #23
    63cc:	bhi	63e4 <rb_des_init+0x388>
    63d0:	ldr	r0, [r0, #32]
    63d4:	ldr	r1, [r3]
    63d8:	orr	r0, r1, r0
    63dc:	str	r0, [r3]
    63e0:	b	6410 <rb_des_init+0x3b4>
    63e4:	ldr	r0, [r0, #-64]	; 0xffffffc0
    63e8:	ldr	r1, [r6]
    63ec:	orr	r0, r1, r0
    63f0:	str	r0, [r6]
    63f4:	b	6410 <rb_des_init+0x3b4>
    63f8:	sub	r0, ip, r4
    63fc:	ldrb	r0, [r0, #1]
    6400:	tst	sl, r0
    6404:	ldrbne	r5, [r9, -r4]
    6408:	cmpne	r5, #255	; 0xff
    640c:	bne	63c4 <rb_des_init+0x368>
    6410:	sub	r4, r4, #1
    6414:	cmn	r4, #7
    6418:	bne	63f8 <rb_des_init+0x39c>
    641c:	add	sl, sl, #1
    6420:	cmp	sl, #128	; 0x80
    6424:	bne	6314 <rb_des_init+0x2b8>
    6428:	add	r9, r9, #7
    642c:	add	r7, r7, #8
    6430:	add	r8, r8, #8
    6434:	ldr	r5, [sp, #8]
    6438:	add	r5, r5, #8
    643c:	ldr	r0, [sp, #4]
    6440:	add	r0, r0, #1
    6444:	str	r0, [sp, #4]
    6448:	cmp	r0, #8
    644c:	bne	6244 <rb_des_init+0x1e8>
    6450:	mov	r3, #0
    6454:	ldr	r7, [pc, #260]	; 6560 <rb_des_init+0x504>
    6458:	add	r7, pc, r7
    645c:	ldr	r2, [pc, #256]	; 6564 <rb_des_init+0x508>
    6460:	add	r2, pc, r2
    6464:	ldrb	r0, [r7, r3]
    6468:	add	r0, r2, r0
    646c:	strb	r3, [r0, #-1]
    6470:	add	r3, r3, #1
    6474:	cmp	r3, #32
    6478:	bne	6464 <rb_des_init+0x408>
    647c:	mov	r3, #0
    6480:	ldr	r7, [pc, #224]	; 6568 <rb_des_init+0x50c>
    6484:	add	r7, pc, r7
    6488:	mov	r6, #0
    648c:	add	r5, r7, r3, lsl #10
    6490:	mov	r4, #0
    6494:	str	r4, [r5, r6, lsl #2]!
    6498:	ldrb	r0, [ip, r4]
    649c:	tst	r6, r0
    64a0:	ldrbne	r0, [r2, r4]
    64a4:	ldrne	r0, [lr, r0, lsl #2]
    64a8:	ldrne	r1, [r5]
    64ac:	orrne	r0, r1, r0
    64b0:	strne	r0, [r5]
    64b4:	add	r4, r4, #1
    64b8:	cmp	r4, #8
    64bc:	bne	6498 <rb_des_init+0x43c>
    64c0:	add	r6, r6, #1
    64c4:	cmp	r6, #256	; 0x100
    64c8:	bne	648c <rb_des_init+0x430>
    64cc:	add	r2, r2, #8
    64d0:	add	r3, r3, #1
    64d4:	cmp	r3, #4
    64d8:	bne	6488 <rb_des_init+0x42c>
    64dc:	mov	r0, #1
    64e0:	ldr	r1, [pc, #132]	; 656c <rb_des_init+0x510>
    64e4:	add	r1, pc, r1
    64e8:	strb	r0, [r1]
    64ec:	sub	sp, fp, #28
    64f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64f4:	bx	lr
    64f8:	.word	0x00023478
    64fc:	.word	0x00023460
    6500:	.word	0x0002344c
    6504:	.word	0x00023448
    6508:	.word	0x00023440
    650c:	.word	0x00023438
    6510:	.word	0x0000ee4c
    6514:	.word	0x000233e0
    6518:	.word	0x000235d0
    651c:	.word	0x000275f4
    6520:	.word	0x0000ef70
    6524:	.word	0x0002758c
    6528:	.word	0x00027544
    652c:	.word	0x000275e0
    6530:	.word	0x0000ef5c
    6534:	.word	0x0000ef70
    6538:	.word	0x0000f3d8
    653c:	.word	0x0000ec48
    6540:	.word	0x00027590
    6544:	.word	0x0002957c
    6548:	.word	0x0002b56c
    654c:	.word	0x0002d55c
    6550:	.word	0x0002f4cc
    6554:	.word	0x000304bc
    6558:	.word	0x00031448
    655c:	.word	0x00032434
    6560:	.word	0x0000f1c0
    6564:	.word	0x00033388
    6568:	.word	0x00033384
    656c:	.word	0x00022ff4

00006570 <rb_des_setkey>:
    6570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6574:	add	fp, sp, #28
    6578:	sub	sp, sp, #12
    657c:	mov	r5, r0
    6580:	bl	605c <rb_des_init>
    6584:	ldr	r0, [r5]
    6588:	bl	6c10 <__bswap_32>
    658c:	mov	r4, r0
    6590:	ldr	r0, [r5, #4]
    6594:	bl	6c10 <__bswap_32>
    6598:	orrs	r1, r0, r4
    659c:	beq	65bc <rb_des_setkey+0x4c>
    65a0:	ldr	r1, [pc, #608]	; 6808 <rb_des_setkey+0x298>
    65a4:	ldr	r1, [pc, r1]
    65a8:	cmp	r4, r1
    65ac:	ldreq	r1, [pc, #600]	; 680c <rb_des_setkey+0x29c>
    65b0:	ldreq	r1, [pc, r1]
    65b4:	cmpeq	r0, r1
    65b8:	beq	6800 <rb_des_setkey+0x290>
    65bc:	ldr	r1, [pc, #588]	; 6810 <rb_des_setkey+0x2a0>
    65c0:	add	r1, pc, r1
    65c4:	str	r0, [r1]
    65c8:	ldr	r1, [pc, #580]	; 6814 <rb_des_setkey+0x2a4>
    65cc:	add	r1, pc, r1
    65d0:	str	r4, [r1]
    65d4:	lsr	ip, r4, #25
    65d8:	ldr	r2, [pc, #568]	; 6818 <rb_des_setkey+0x2a8>
    65dc:	add	r2, pc, r2
    65e0:	ldr	r3, [r2, ip, lsl #2]
    65e4:	ubfx	lr, r4, #17, #7
    65e8:	add	r6, r2, lr, lsl #2
    65ec:	ldr	r6, [r6, #512]	; 0x200
    65f0:	orr	r3, r6, r3
    65f4:	ubfx	r8, r4, #9, #7
    65f8:	add	r5, r2, r8, lsl #2
    65fc:	ldr	r5, [r5, #1024]	; 0x400
    6600:	orr	r3, r3, r5
    6604:	and	r9, r4, #254	; 0xfe
    6608:	add	r4, r2, r9, lsl #1
    660c:	ldr	r4, [r4, #1536]	; 0x600
    6610:	orr	r3, r3, r4
    6614:	lsr	r4, r0, #25
    6618:	add	r1, r2, r4, lsl #2
    661c:	ldr	r1, [r1, #2048]	; 0x800
    6620:	orr	r1, r3, r1
    6624:	ubfx	r3, r0, #17, #7
    6628:	add	r7, r2, r3, lsl #2
    662c:	ldr	r7, [r7, #2560]	; 0xa00
    6630:	orr	r1, r1, r7
    6634:	ubfx	r7, r0, #9, #7
    6638:	add	r6, r2, r7, lsl #2
    663c:	ldr	r6, [r6, #3072]	; 0xc00
    6640:	orr	r1, r1, r6
    6644:	and	r6, r0, #254	; 0xfe
    6648:	add	r0, r2, r6, lsl #1
    664c:	ldr	r0, [r0, #3584]	; 0xe00
    6650:	orr	r0, r1, r0
    6654:	str	r0, [sp, #4]
    6658:	ldr	r1, [pc, #444]	; 681c <rb_des_setkey+0x2ac>
    665c:	add	r1, pc, r1
    6660:	ldr	r2, [r1, ip, lsl #2]
    6664:	add	r5, r1, lr, lsl #2
    6668:	ldr	r5, [r5, #512]	; 0x200
    666c:	orr	r2, r5, r2
    6670:	add	r5, r1, r8, lsl #2
    6674:	ldr	r5, [r5, #1024]	; 0x400
    6678:	orr	r2, r2, r5
    667c:	add	r5, r1, r9, lsl #1
    6680:	ldr	r5, [r5, #1536]	; 0x600
    6684:	orr	r2, r2, r5
    6688:	add	r5, r1, r4, lsl #2
    668c:	ldr	r5, [r5, #2048]	; 0x800
    6690:	orr	r2, r2, r5
    6694:	add	r3, r1, r3, lsl #2
    6698:	ldr	r3, [r3, #2560]	; 0xa00
    669c:	orr	r2, r2, r3
    66a0:	add	r3, r1, r7, lsl #2
    66a4:	ldr	r3, [r3, #3072]	; 0xc00
    66a8:	orr	r2, r2, r3
    66ac:	add	r1, r1, r6, lsl #1
    66b0:	ldr	r1, [r1, #3584]	; 0xe00
    66b4:	orr	r0, r2, r1
    66b8:	str	r0, [sp]
    66bc:	mov	r2, #0
    66c0:	mov	r6, #0
    66c4:	ldr	ip, [pc, #340]	; 6820 <rb_des_setkey+0x2b0>
    66c8:	add	ip, pc, ip
    66cc:	ldr	r0, [pc, #336]	; 6824 <rb_des_setkey+0x2b4>
    66d0:	add	r0, pc, r0
    66d4:	ldrb	r4, [r0, r6]
    66d8:	add	r2, r2, r4
    66dc:	rsb	r0, r2, #28
    66e0:	ldr	r1, [sp]
    66e4:	lsr	r4, r1, r0
    66e8:	orr	r1, r4, r1, lsl r2
    66ec:	ubfx	r7, r1, #14, #7
    66f0:	str	r7, [sp, #8]
    66f4:	add	r4, ip, r7, lsl #2
    66f8:	ldr	r4, [r4, #512]	; 0x200
    66fc:	ubfx	r9, r1, #21, #7
    6700:	ldr	lr, [ip, r9, lsl #2]
    6704:	orr	r5, r4, lr
    6708:	ubfx	lr, r1, #7, #7
    670c:	add	r3, ip, lr, lsl #2
    6710:	ldr	r3, [r3, #1024]	; 0x400
    6714:	orr	r3, r5, r3
    6718:	and	sl, r1, #127	; 0x7f
    671c:	add	r5, ip, sl, lsl #2
    6720:	ldr	r5, [r5, #1536]	; 0x600
    6724:	orr	r3, r3, r5
    6728:	ldr	r1, [sp, #4]
    672c:	lsr	r0, r1, r0
    6730:	orr	r0, r0, r1, lsl r2
    6734:	ubfx	r5, r0, #21, #7
    6738:	add	r7, ip, r5, lsl #2
    673c:	ldr	r7, [r7, #2048]	; 0x800
    6740:	orr	r3, r3, r7
    6744:	ubfx	r7, r0, #14, #7
    6748:	add	r4, ip, r7, lsl #2
    674c:	ldr	r4, [r4, #2560]	; 0xa00
    6750:	orr	r3, r3, r4
    6754:	ubfx	r4, r0, #7, #7
    6758:	add	r8, ip, r4, lsl #2
    675c:	ldr	r1, [r8, #3072]	; 0xc00
    6760:	orr	r1, r3, r1
    6764:	and	r8, r0, #127	; 0x7f
    6768:	add	r3, ip, r8, lsl #2
    676c:	ldr	r3, [r3, #3584]	; 0xe00
    6770:	orr	r1, r1, r3
    6774:	ldr	r3, [pc, #172]	; 6828 <rb_des_setkey+0x2b8>
    6778:	add	r3, pc, r3
    677c:	str	r1, [r3, r6, lsl #2]
    6780:	ldr	r1, [pc, #164]	; 682c <rb_des_setkey+0x2bc>
    6784:	add	r1, pc, r1
    6788:	mov	r0, r1
    678c:	ldr	r1, [r1, r9, lsl #2]
    6790:	ldr	r3, [sp, #8]
    6794:	add	r3, r0, r3, lsl #2
    6798:	ldr	r3, [r3, #512]	; 0x200
    679c:	orr	r1, r3, r1
    67a0:	add	r3, r0, lr, lsl #2
    67a4:	ldr	r3, [r3, #1024]	; 0x400
    67a8:	orr	r1, r1, r3
    67ac:	add	r3, r0, sl, lsl #2
    67b0:	ldr	r3, [r3, #1536]	; 0x600
    67b4:	orr	r1, r1, r3
    67b8:	add	r3, r0, r5, lsl #2
    67bc:	ldr	r3, [r3, #2048]	; 0x800
    67c0:	orr	r1, r1, r3
    67c4:	add	r3, r0, r7, lsl #2
    67c8:	ldr	r3, [r3, #2560]	; 0xa00
    67cc:	orr	r1, r1, r3
    67d0:	add	r3, r0, r4, lsl #2
    67d4:	ldr	r3, [r3, #3072]	; 0xc00
    67d8:	orr	r1, r1, r3
    67dc:	add	r0, r0, r8, lsl #2
    67e0:	ldr	r0, [r0, #3584]	; 0xe00
    67e4:	orr	r0, r1, r0
    67e8:	ldr	r1, [pc, #64]	; 6830 <rb_des_setkey+0x2c0>
    67ec:	add	r1, pc, r1
    67f0:	str	r0, [r1, r6, lsl #2]
    67f4:	add	r6, r6, #1
    67f8:	cmp	r6, #16
    67fc:	bne	66cc <rb_des_setkey+0x15c>
    6800:	sub	sp, fp, #28
    6804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6808:	.word	0x00022f3c
    680c:	.word	0x00022f2c
    6810:	.word	0x00022f1c
    6814:	.word	0x00022f14
    6818:	.word	0x0003020c
    681c:	.word	0x0002f18c
    6820:	.word	0x00031120
    6824:	.word	0x0000ef68
    6828:	.word	0x00034090
    682c:	.word	0x00032064
    6830:	.word	0x0003405c

00006834 <rb_ascii_to_bin>:
    6834:	mov	r1, r0
    6838:	mov	r0, #0
    683c:	cmp	r1, #122	; 0x7a
    6840:	bhi	6874 <rb_ascii_to_bin+0x40>
    6844:	cmp	r1, #97	; 0x61
    6848:	subcs	r0, r1, #59	; 0x3b
    684c:	bxcs	lr
    6850:	cmp	r1, #90	; 0x5a
    6854:	bxhi	lr
    6858:	cmp	r1, #65	; 0x41
    685c:	subcs	r0, r1, #53	; 0x35
    6860:	bxcs	lr
    6864:	sub	r0, r1, #46	; 0x2e
    6868:	uxtb	r1, r0
    686c:	cmp	r1, #12
    6870:	movcs	r0, #0
    6874:	bx	lr

00006878 <rb_setup_salt>:
    6878:	push	{fp, lr}
    687c:	mov	fp, sp
    6880:	ldr	r1, [pc, #88]	; 68e0 <rb_setup_salt+0x68>
    6884:	ldr	r1, [pc, r1]
    6888:	cmp	r1, r0
    688c:	popeq	{fp, pc}
    6890:	ldr	ip, [pc, #76]	; 68e4 <rb_setup_salt+0x6c>
    6894:	add	ip, pc, ip
    6898:	mov	r1, #0
    689c:	str	r1, [ip]
    68a0:	ldr	r1, [pc, #64]	; 68e8 <rb_setup_salt+0x70>
    68a4:	add	r1, pc, r1
    68a8:	str	r0, [r1]
    68ac:	mov	r2, #8388608	; 0x800000
    68b0:	mov	r3, #1
    68b4:	mov	lr, #24
    68b8:	tst	r3, r0
    68bc:	ldrne	r1, [pc, #40]	; 68ec <rb_setup_salt+0x74>
    68c0:	ldrne	r1, [pc, r1]
    68c4:	orrne	r1, r1, r2
    68c8:	strne	r1, [ip]
    68cc:	subs	lr, lr, #1
    68d0:	lsr	r2, r2, #1
    68d4:	lsl	r3, r3, #1
    68d8:	bne	68b8 <rb_setup_salt+0x40>
    68dc:	pop	{fp, pc}
    68e0:	.word	0x00022c64
    68e4:	.word	0x00022c50
    68e8:	.word	0x00022c44
    68ec:	.word	0x00022c24

000068f0 <rb_do_des>:
    68f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68f4:	add	fp, sp, #28
    68f8:	sub	sp, sp, #12
    68fc:	stm	sp, {r0, r1}
    6900:	mov	r5, #4096	; 0x1000
    6904:	ldr	r0, [pc, #728]	; 6be4 <rb_do_des+0x2f4>
    6908:	add	r0, pc, r0
    690c:	ldr	r1, [r0, r5]
    6910:	ldr	r2, [r0, #1024]	; 0x400
    6914:	ldr	r3, [pc, #716]	; 6be8 <rb_do_des+0x2f8>
    6918:	ldr	r3, [pc, r3]
    691c:	orr	r2, r2, r3
    6920:	ldr	r3, [r0, #2048]	; 0x800
    6924:	orr	r2, r2, r3
    6928:	ldr	r3, [r0, #3072]	; 0xc00
    692c:	orr	r2, r2, r3
    6930:	orr	r1, r2, r1
    6934:	mov	r3, #5120	; 0x1400
    6938:	ldr	r2, [r0, r3]
    693c:	orr	r1, r1, r2
    6940:	mov	r7, #6144	; 0x1800
    6944:	ldr	r2, [r0, r7]
    6948:	orr	r1, r1, r2
    694c:	mov	r6, #7168	; 0x1c00
    6950:	ldr	r0, [r0, r6]
    6954:	orr	r2, r1, r0
    6958:	ldr	r0, [pc, #652]	; 6bec <rb_do_des+0x2fc>
    695c:	add	r0, pc, r0
    6960:	ldr	r1, [r0, r5]
    6964:	ldr	r5, [r0, #1024]	; 0x400
    6968:	ldr	r4, [pc, #640]	; 6bf0 <rb_do_des+0x300>
    696c:	ldr	r4, [pc, r4]
    6970:	orr	r5, r5, r4
    6974:	ldr	r4, [r0, #2048]	; 0x800
    6978:	orr	r5, r5, r4
    697c:	ldr	r4, [r0, #3072]	; 0xc00
    6980:	orr	r5, r5, r4
    6984:	orr	r1, r5, r1
    6988:	ldr	r3, [r0, r3]
    698c:	orr	r1, r1, r3
    6990:	ldr	r3, [r0, r7]
    6994:	orr	r1, r1, r3
    6998:	ldr	r0, [r0, r6]
    699c:	orr	r1, r1, r0
    69a0:	mov	r8, #24
    69a4:	ldr	r9, [pc, #584]	; 6bf4 <rb_do_des+0x304>
    69a8:	ldr	r9, [pc, r9]
    69ac:	mov	r3, #258048	; 0x3f000
    69b0:	mov	r5, #16515072	; 0xfc0000
    69b4:	mov	r6, #4032	; 0xfc0
    69b8:	ldr	r4, [pc, #568]	; 6bf8 <rb_do_des+0x308>
    69bc:	add	r4, pc, r4
    69c0:	ldr	sl, [pc, #564]	; 6bfc <rb_do_des+0x30c>
    69c4:	add	sl, pc, sl
    69c8:	ldr	ip, [pc, #560]	; 6c00 <rb_do_des+0x310>
    69cc:	add	ip, pc, ip
    69d0:	ldr	r7, [pc, #556]	; 6c04 <rb_do_des+0x314>
    69d4:	add	r7, pc, r7
    69d8:	mov	lr, r1
    69dc:	str	r8, [sp, #8]
    69e0:	mov	r0, #0
    69e4:	mov	r1, r2
    69e8:	mov	r2, r1
    69ec:	and	r1, r3, r1, lsr #11
    69f0:	and	r8, r5, r2, ror #9
    69f4:	orr	r1, r8, r1
    69f8:	mov	r8, #4096	; 0x1000
    69fc:	and	r5, r6, r2, lsr #13
    6a00:	orr	r1, r1, r5
    6a04:	ubfx	r5, r2, #15, #6
    6a08:	orr	r1, r1, r5
    6a0c:	ldr	r5, [r4, r0, lsl #2]
    6a10:	eor	r5, r5, r1
    6a14:	and	r6, r2, #8064	; 0x1f80
    6a18:	lsl	r6, r6, #5
    6a1c:	orr	r6, r6, r2, lsr #31
    6a20:	and	r3, r2, #129024	; 0x1f800
    6a24:	orr	r3, r6, r3, lsl #7
    6a28:	and	r6, r2, #504	; 0x1f8
    6a2c:	orr	r3, r3, r6, lsl #3
    6a30:	and	r6, r2, #31
    6a34:	orr	r3, r3, r6, lsl #1
    6a38:	eor	r1, r1, r3
    6a3c:	and	r1, r9, r1
    6a40:	eor	r5, r5, r1
    6a44:	ldrb	r6, [sl, r5, lsr #12]
    6a48:	ldr	r6, [ip, r6, lsl #2]
    6a4c:	bfc	r5, #12, #20
    6a50:	add	r5, sl, r5
    6a54:	ldrb	r5, [r5, r8]
    6a58:	mov	r8, #8192	; 0x2000
    6a5c:	add	r5, ip, r5, lsl #2
    6a60:	ldr	r5, [r5, #1024]	; 0x400
    6a64:	orr	r5, r5, r6
    6a68:	mov	r6, #4032	; 0xfc0
    6a6c:	eor	r1, r1, r3
    6a70:	ldr	r3, [r7, r0, lsl #2]
    6a74:	eor	r1, r1, r3
    6a78:	add	r3, sl, r1, lsr #12
    6a7c:	ldrb	r3, [r3, r8]
    6a80:	mov	r8, #12288	; 0x3000
    6a84:	add	r3, ip, r3, lsl #2
    6a88:	ldr	r3, [r3, #2048]	; 0x800
    6a8c:	orr	r3, r5, r3
    6a90:	mov	r5, #16515072	; 0xfc0000
    6a94:	bfc	r1, #12, #20
    6a98:	add	r1, sl, r1
    6a9c:	ldrb	r1, [r1, r8]
    6aa0:	add	r1, ip, r1, lsl #2
    6aa4:	ldr	r1, [r1, #3072]	; 0xc00
    6aa8:	orr	r1, r3, r1
    6aac:	mov	r3, #258048	; 0x3f000
    6ab0:	eor	r1, r1, lr
    6ab4:	add	r0, r0, #1
    6ab8:	cmp	r0, #16
    6abc:	mov	lr, r2
    6ac0:	bne	69e8 <rb_do_des+0xf8>
    6ac4:	ldr	r0, [sp, #8]
    6ac8:	sub	r8, r0, #1
    6acc:	cmp	r0, #0
    6ad0:	bne	69d8 <rb_do_des+0xe8>
    6ad4:	lsr	lr, r1, #24
    6ad8:	ldr	r5, [pc, #296]	; 6c08 <rb_do_des+0x318>
    6adc:	add	r5, pc, r5
    6ae0:	ldr	r7, [r5, lr, lsl #2]
    6ae4:	ubfx	r8, r1, #16, #8
    6ae8:	add	r6, r5, r8, lsl #2
    6aec:	ldr	r6, [r6, #1024]	; 0x400
    6af0:	orr	r6, r6, r7
    6af4:	ubfx	sl, r1, #8, #8
    6af8:	add	r4, r5, sl, lsl #2
    6afc:	ldr	r4, [r4, #2048]	; 0x800
    6b00:	orr	r6, r6, r4
    6b04:	uxtb	r1, r1
    6b08:	add	r4, r5, r1, lsl #2
    6b0c:	ldr	r4, [r4, #3072]	; 0xc00
    6b10:	orr	r4, r6, r4
    6b14:	lsr	r6, r2, #24
    6b18:	add	r0, r5, r6, lsl #2
    6b1c:	mov	r3, #4096	; 0x1000
    6b20:	ldr	r0, [r0, r3]
    6b24:	orr	r0, r4, r0
    6b28:	ubfx	r4, r2, #16, #8
    6b2c:	add	r3, r5, r4, lsl #2
    6b30:	mov	r7, #5120	; 0x1400
    6b34:	ldr	r3, [r3, r7]
    6b38:	orr	r0, r0, r3
    6b3c:	ubfx	r3, r2, #8, #8
    6b40:	add	r7, r5, r3, lsl #2
    6b44:	mov	r9, #6144	; 0x1800
    6b48:	ldr	r7, [r7, r9]
    6b4c:	orr	r0, r0, r7
    6b50:	uxtb	r2, r2
    6b54:	add	r5, r5, r2, lsl #2
    6b58:	mov	ip, #7168	; 0x1c00
    6b5c:	ldr	r5, [r5, ip]
    6b60:	orr	r0, r0, r5
    6b64:	ldr	r5, [sp]
    6b68:	str	r0, [r5]
    6b6c:	ldr	r0, [pc, #152]	; 6c0c <rb_do_des+0x31c>
    6b70:	add	r0, pc, r0
    6b74:	ldr	r5, [r0, lr, lsl #2]
    6b78:	add	r7, r0, r8, lsl #2
    6b7c:	ldr	r7, [r7, #1024]	; 0x400
    6b80:	orr	r7, r7, r5
    6b84:	add	r5, r0, sl, lsl #2
    6b88:	ldr	r5, [r5, #2048]	; 0x800
    6b8c:	orr	r7, r7, r5
    6b90:	add	r1, r0, r1, lsl #2
    6b94:	ldr	r1, [r1, #3072]	; 0xc00
    6b98:	orr	r1, r7, r1
    6b9c:	add	r7, r0, r6, lsl #2
    6ba0:	mov	r6, #4096	; 0x1000
    6ba4:	ldr	r7, [r7, r6]
    6ba8:	orr	r1, r1, r7
    6bac:	add	r7, r0, r4, lsl #2
    6bb0:	mov	r6, #5120	; 0x1400
    6bb4:	ldr	r7, [r7, r6]
    6bb8:	orr	r1, r1, r7
    6bbc:	add	r3, r0, r3, lsl #2
    6bc0:	ldr	r3, [r3, r9]
    6bc4:	orr	r1, r1, r3
    6bc8:	add	r0, r0, r2, lsl #2
    6bcc:	ldr	r0, [r0, ip]
    6bd0:	orr	r0, r1, r0
    6bd4:	ldr	r1, [sp, #4]
    6bd8:	str	r0, [r1]
    6bdc:	sub	sp, fp, #28
    6be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6be4:	.word	0x00028ee0
    6be8:	.word	0x00028ed0
    6bec:	.word	0x00026e8c
    6bf0:	.word	0x00026e7c
    6bf4:	.word	0x00022b3c
    6bf8:	.word	0x00033e4c
    6bfc:	.word	0x00022d28
    6c00:	.word	0x00032e3c
    6c04:	.word	0x00033e74
    6c08:	.word	0x0002ad0c
    6c0c:	.word	0x0002cc78

00006c10 <__bswap_32>:
    6c10:	rev	r0, r0
    6c14:	bx	lr

00006c18 <MD5Init>:
    6c18:	push	{fp, lr}
    6c1c:	mov	fp, sp
    6c20:	mov	r1, #0
    6c24:	movw	r2, #8961	; 0x2301
    6c28:	movt	r2, #26437	; 0x6745
    6c2c:	movw	r3, #43913	; 0xab89
    6c30:	movt	r3, #61389	; 0xefcd
    6c34:	movw	ip, #56574	; 0xdcfe
    6c38:	movt	ip, #39098	; 0x98ba
    6c3c:	movw	lr, #21622	; 0x5476
    6c40:	movt	lr, #4146	; 0x1032
    6c44:	stm	r0, {r2, r3, ip, lr}
    6c48:	str	r1, [r0, #16]
    6c4c:	str	r1, [r0, #20]
    6c50:	pop	{fp, pc}

00006c54 <MD5Update>:
    6c54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    6c58:	add	fp, sp, #24
    6c5c:	mov	r4, r2
    6c60:	mov	r6, r1
    6c64:	mov	r5, r0
    6c68:	ldr	r0, [r0, #16]
    6c6c:	add	r1, r0, r2, lsl #3
    6c70:	str	r1, [r5, #16]
    6c74:	ubfx	r9, r0, #3, #6
    6c78:	cmp	r1, r0
    6c7c:	ldrcc	r0, [r5, #20]
    6c80:	addcc	r0, r0, #1
    6c84:	strcc	r0, [r5, #20]
    6c88:	ldr	r0, [r5, #20]
    6c8c:	add	r0, r0, r4, lsr #29
    6c90:	str	r0, [r5, #20]
    6c94:	rsb	r7, r9, #64	; 0x40
    6c98:	cmp	r7, r4
    6c9c:	bls	6ca8 <MD5Update+0x54>
    6ca0:	mov	r7, #0
    6ca4:	b	6cfc <MD5Update+0xa8>
    6ca8:	add	r8, r5, #24
    6cac:	add	r0, r8, r9
    6cb0:	mov	r1, r6
    6cb4:	mov	r2, r7
    6cb8:	bl	5130 <memcpy@plt>
    6cbc:	mov	r0, r5
    6cc0:	mov	r1, r8
    6cc4:	bl	6db0 <MD5Transform>
    6cc8:	add	r0, r7, #63	; 0x3f
    6ccc:	mov	r9, #0
    6cd0:	cmp	r0, r4
    6cd4:	bcs	6cfc <MD5Update+0xa8>
    6cd8:	add	r1, r6, r7
    6cdc:	mov	r0, r5
    6ce0:	bl	6db0 <MD5Transform>
    6ce4:	add	r0, r7, #64	; 0x40
    6ce8:	add	r1, r7, #127	; 0x7f
    6cec:	cmp	r1, r4
    6cf0:	mov	r7, r0
    6cf4:	bcc	6cd8 <MD5Update+0x84>
    6cf8:	mov	r7, r0
    6cfc:	add	r1, r6, r7
    6d00:	sub	r2, r4, r7
    6d04:	add	r0, r5, r9
    6d08:	add	r0, r0, #24
    6d0c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    6d10:	b	5130 <memcpy@plt>

00006d14 <MD5Final>:
    6d14:	push	{r4, r5, fp, lr}
    6d18:	add	fp, sp, #8
    6d1c:	mov	r4, r1
    6d20:	mov	r5, r0
    6d24:	mov	r0, r1
    6d28:	bl	77d8 <MD5Pad>
    6d2c:	mov	r0, #80	; 0x50
    6d30:	mov	r1, r4
    6d34:	vld1.8	{d16-d17}, [r1], r0
    6d38:	vmov.i32	q9, #0	; 0x00000000
    6d3c:	vst1.8	{d16-d17}, [r5]
    6d40:	add	r0, r4, #64	; 0x40
    6d44:	vst1.8	{d18-d19}, [r0]
    6d48:	add	r0, r4, #48	; 0x30
    6d4c:	vst1.8	{d18-d19}, [r0]
    6d50:	add	r0, r4, #32
    6d54:	vst1.8	{d18-d19}, [r0]
    6d58:	add	r0, r4, #16
    6d5c:	vst1.8	{d18-d19}, [r0]
    6d60:	mov	r0, #0
    6d64:	str	r0, [r1]
    6d68:	mov	r1, #84	; 0x54
    6d6c:	vst1.8	{d18-d19}, [r4], r1
    6d70:	str	r0, [r4]
    6d74:	pop	{r4, r5, fp, pc}

00006d78 <_crypt_to64>:
    6d78:	cmp	r2, #1
    6d7c:	bxlt	lr
    6d80:	add	r2, r2, #1
    6d84:	ldr	ip, [pc, #32]	; 6dac <_crypt_to64+0x34>
    6d88:	add	ip, pc, ip
    6d8c:	and	r3, r1, #63	; 0x3f
    6d90:	ldrb	r3, [ip, r3]
    6d94:	strb	r3, [r0], #1
    6d98:	sub	r2, r2, #1
    6d9c:	lsr	r1, r1, #6
    6da0:	cmp	r2, #1
    6da4:	bgt	6d8c <_crypt_to64+0x14>
    6da8:	bx	lr
    6dac:	.word	0x0000e0af

00006db0 <MD5Transform>:
    6db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6db4:	add	fp, sp, #28
    6db8:	sub	sp, sp, #84	; 0x54
    6dbc:	mov	ip, r1
    6dc0:	str	r0, [sp, #16]
    6dc4:	ldr	r5, [r0]
    6dc8:	str	r5, [sp, #24]
    6dcc:	ldr	r4, [r0, #4]
    6dd0:	ldr	r1, [r0, #8]
    6dd4:	ldr	r2, [r0, #12]
    6dd8:	and	r0, r1, r4
    6ddc:	str	r1, [sp, #32]
    6de0:	bic	r3, r2, r4
    6de4:	str	r2, [sp, #28]
    6de8:	orr	r0, r3, r0
    6dec:	ldr	r3, [ip]
    6df0:	str	r3, [fp, #-36]	; 0xffffffdc
    6df4:	ldr	r9, [ip, #4]
    6df8:	ldr	lr, [ip, #8]
    6dfc:	str	lr, [fp, #-52]	; 0xffffffcc
    6e00:	ldr	r8, [ip, #12]
    6e04:	str	r8, [fp, #-44]	; 0xffffffd4
    6e08:	add	r3, r5, r3
    6e0c:	add	r0, r3, r0
    6e10:	movw	r3, #42104	; 0xa478
    6e14:	movt	r3, #55146	; 0xd76a
    6e18:	add	r0, r0, r3
    6e1c:	add	r0, r4, r0, ror #25
    6e20:	bic	r3, r1, r0
    6e24:	and	r7, r0, r4
    6e28:	orr	r3, r7, r3
    6e2c:	add	r7, r2, r9
    6e30:	str	r9, [fp, #-48]	; 0xffffffd0
    6e34:	add	r3, r7, r3
    6e38:	movw	r7, #46934	; 0xb756
    6e3c:	movt	r7, #59591	; 0xe8c7
    6e40:	add	r3, r3, r7
    6e44:	add	r3, r0, r3, ror #20
    6e48:	bic	r7, r4, r3
    6e4c:	str	r4, [sp, #20]
    6e50:	and	r6, r3, r0
    6e54:	orr	r7, r6, r7
    6e58:	add	r6, r1, lr
    6e5c:	add	r7, r6, r7
    6e60:	movw	r6, #28891	; 0x70db
    6e64:	movt	r6, #9248	; 0x2420
    6e68:	add	r7, r7, r6
    6e6c:	add	r7, r3, r7, ror #15
    6e70:	bic	r6, r0, r7
    6e74:	and	r5, r7, r3
    6e78:	orr	r6, r5, r6
    6e7c:	add	r5, r4, r8
    6e80:	add	r6, r5, r6
    6e84:	movw	r5, #52974	; 0xceee
    6e88:	movt	r5, #49597	; 0xc1bd
    6e8c:	add	r6, r6, r5
    6e90:	add	r4, r7, r6, ror #10
    6e94:	bic	r6, r3, r4
    6e98:	and	r5, r4, r7
    6e9c:	orr	r6, r5, r6
    6ea0:	ldr	r1, [ip, #16]
    6ea4:	str	r1, [sp, #48]	; 0x30
    6ea8:	add	r0, r1, r0
    6eac:	add	r0, r0, r6
    6eb0:	movw	r6, #4015	; 0xfaf
    6eb4:	movt	r6, #62844	; 0xf57c
    6eb8:	add	r0, r0, r6
    6ebc:	add	r0, r4, r0, ror #25
    6ec0:	bic	r6, r7, r0
    6ec4:	and	r5, r0, r4
    6ec8:	orr	r5, r5, r6
    6ecc:	ldr	r1, [ip, #20]
    6ed0:	str	r1, [sp, #36]	; 0x24
    6ed4:	add	r3, r1, r3
    6ed8:	add	r3, r3, r5
    6edc:	movw	r5, #50730	; 0xc62a
    6ee0:	movt	r5, #18311	; 0x4787
    6ee4:	add	r3, r3, r5
    6ee8:	add	r3, r0, r3, ror #20
    6eec:	bic	r5, r4, r3
    6ef0:	and	r6, r3, r0
    6ef4:	orr	r5, r6, r5
    6ef8:	ldr	r8, [ip, #24]
    6efc:	add	r7, r8, r7
    6f00:	str	r8, [sp, #12]
    6f04:	add	r7, r7, r5
    6f08:	movw	r5, #17939	; 0x4613
    6f0c:	movt	r5, #43056	; 0xa830
    6f10:	add	r7, r7, r5
    6f14:	add	r5, r3, r7, ror #15
    6f18:	bic	r7, r0, r5
    6f1c:	and	r6, r5, r3
    6f20:	orr	r6, r6, r7
    6f24:	ldr	r1, [ip, #28]
    6f28:	str	r1, [sp, #52]	; 0x34
    6f2c:	add	r4, r1, r4
    6f30:	add	r4, r4, r6
    6f34:	movw	r6, #38145	; 0x9501
    6f38:	movt	r6, #64838	; 0xfd46
    6f3c:	add	r4, r4, r6
    6f40:	add	r6, r5, r4, ror #10
    6f44:	bic	r4, r3, r6
    6f48:	and	r7, r6, r5
    6f4c:	orr	r4, r7, r4
    6f50:	ldr	r1, [ip, #32]
    6f54:	str	r1, [sp, #44]	; 0x2c
    6f58:	add	r0, r1, r0
    6f5c:	add	r0, r0, r4
    6f60:	movw	r4, #39128	; 0x98d8
    6f64:	movt	r4, #27008	; 0x6980
    6f68:	add	r0, r0, r4
    6f6c:	add	r0, r6, r0, ror #25
    6f70:	bic	r4, r5, r0
    6f74:	and	r7, r0, r6
    6f78:	orr	r4, r7, r4
    6f7c:	ldr	r1, [ip, #36]	; 0x24
    6f80:	str	r1, [fp, #-32]	; 0xffffffe0
    6f84:	add	r3, r1, r3
    6f88:	add	r3, r3, r4
    6f8c:	movw	r4, #63407	; 0xf7af
    6f90:	movt	r4, #35652	; 0x8b44
    6f94:	add	r3, r3, r4
    6f98:	add	r3, r0, r3, ror #20
    6f9c:	bic	r4, r6, r3
    6fa0:	and	r7, r3, r0
    6fa4:	orr	r7, r7, r4
    6fa8:	ldr	r1, [ip, #40]	; 0x28
    6fac:	str	r1, [sp, #56]	; 0x38
    6fb0:	add	r5, r1, r5
    6fb4:	add	r5, r5, r7
    6fb8:	movw	r7, #42063	; 0xa44f
    6fbc:	sub	r5, r5, r7
    6fc0:	add	r1, r3, r5, ror #15
    6fc4:	bic	r5, r0, r1
    6fc8:	and	r7, r1, r3
    6fcc:	orr	r5, r7, r5
    6fd0:	ldr	lr, [ip, #44]	; 0x2c
    6fd4:	add	r6, lr, r6
    6fd8:	str	lr, [fp, #-40]	; 0xffffffd8
    6fdc:	add	r5, r6, r5
    6fe0:	movw	r6, #55230	; 0xd7be
    6fe4:	movt	r6, #35164	; 0x895c
    6fe8:	add	r5, r5, r6
    6fec:	add	r2, r1, r5, ror #10
    6ff0:	bic	r5, r3, r2
    6ff4:	and	r6, r2, r1
    6ff8:	orr	r5, r6, r5
    6ffc:	ldr	r4, [ip, #48]	; 0x30
    7000:	str	r4, [sp, #4]
    7004:	add	r0, r4, r0
    7008:	add	r0, r0, r5
    700c:	movw	r5, #4386	; 0x1122
    7010:	movt	r5, #27536	; 0x6b90
    7014:	add	r0, r0, r5
    7018:	add	r0, r2, r0, ror #25
    701c:	bic	r5, r1, r0
    7020:	and	r7, r0, r2
    7024:	orr	r7, r7, r5
    7028:	ldr	r4, [ip, #52]	; 0x34
    702c:	str	r4, [sp, #40]	; 0x28
    7030:	add	r3, r4, r3
    7034:	add	r3, r3, r7
    7038:	movw	r7, #29075	; 0x7193
    703c:	movt	r7, #64920	; 0xfd98
    7040:	add	r3, r3, r7
    7044:	add	r7, r0, r3, ror #20
    7048:	bic	r3, r2, r7
    704c:	and	sl, r7, r0
    7050:	orr	r3, sl, r3
    7054:	ldr	r4, [ip, #56]	; 0x38
    7058:	add	r1, r4, r1
    705c:	mov	sl, r4
    7060:	add	r1, r1, r3
    7064:	movw	r3, #17294	; 0x438e
    7068:	movt	r3, #42617	; 0xa679
    706c:	add	r1, r1, r3
    7070:	add	r3, r7, r1, ror #15
    7074:	bic	r1, r0, r3
    7078:	and	r5, r3, r7
    707c:	orr	r5, r5, r1
    7080:	ldr	r1, [ip, #60]	; 0x3c
    7084:	add	r2, r1, r2
    7088:	mov	r6, r1
    708c:	str	r1, [sp, #8]
    7090:	add	r2, r2, r5
    7094:	movw	r5, #2081	; 0x821
    7098:	movt	r5, #18868	; 0x49b4
    709c:	add	r2, r2, r5
    70a0:	add	r2, r3, r2, ror #10
    70a4:	and	r5, r2, r7
    70a8:	bic	r4, r3, r7
    70ac:	orr	r5, r5, r4
    70b0:	add	r0, r9, r0
    70b4:	add	r0, r0, r5
    70b8:	movw	r5, #9570	; 0x2562
    70bc:	movt	r5, #63006	; 0xf61e
    70c0:	add	r0, r0, r5
    70c4:	add	r0, r2, r0, ror #27
    70c8:	and	r5, r0, r3
    70cc:	bic	r4, r2, r3
    70d0:	orr	r5, r5, r4
    70d4:	add	r7, r8, r7
    70d8:	add	r7, r7, r5
    70dc:	movw	r5, #45888	; 0xb340
    70e0:	movt	r5, #49216	; 0xc040
    70e4:	add	r7, r7, r5
    70e8:	add	r7, r0, r7, ror #23
    70ec:	and	r5, r7, r2
    70f0:	bic	r4, r0, r2
    70f4:	orr	r5, r5, r4
    70f8:	add	r3, lr, r3
    70fc:	add	r3, r3, r5
    7100:	movw	r5, #23121	; 0x5a51
    7104:	movt	r5, #9822	; 0x265e
    7108:	add	r3, r3, r5
    710c:	add	r3, r7, r3, ror #18
    7110:	and	r5, r3, r0
    7114:	bic	r4, r7, r0
    7118:	orr	r5, r5, r4
    711c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    7120:	add	r2, r1, r2
    7124:	add	r2, r2, r5
    7128:	movw	r5, #51114	; 0xc7aa
    712c:	movt	r5, #59830	; 0xe9b6
    7130:	add	r2, r2, r5
    7134:	add	r2, r3, r2, ror #12
    7138:	and	r5, r2, r7
    713c:	bic	r4, r3, r7
    7140:	orr	r5, r5, r4
    7144:	ldr	r9, [sp, #36]	; 0x24
    7148:	add	r0, r9, r0
    714c:	add	r0, r0, r5
    7150:	movw	r5, #4189	; 0x105d
    7154:	movt	r5, #54831	; 0xd62f
    7158:	add	r0, r0, r5
    715c:	add	r0, r2, r0, ror #27
    7160:	and	r5, r0, r3
    7164:	bic	r4, r2, r3
    7168:	orr	r5, r5, r4
    716c:	ldr	r1, [sp, #56]	; 0x38
    7170:	add	r7, r1, r7
    7174:	add	r7, r7, r5
    7178:	movw	r5, #5203	; 0x1453
    717c:	movt	r5, #580	; 0x244
    7180:	add	r7, r7, r5
    7184:	add	r7, r0, r7, ror #23
    7188:	and	r5, r7, r2
    718c:	bic	r4, r0, r2
    7190:	orr	r5, r5, r4
    7194:	add	r3, r6, r3
    7198:	add	r3, r3, r5
    719c:	movw	r5, #59009	; 0xe681
    71a0:	movt	r5, #55457	; 0xd8a1
    71a4:	add	r3, r3, r5
    71a8:	add	r3, r7, r3, ror #18
    71ac:	and	r5, r3, r0
    71b0:	bic	r4, r7, r0
    71b4:	orr	r5, r5, r4
    71b8:	ldr	ip, [sp, #48]	; 0x30
    71bc:	add	r2, ip, r2
    71c0:	add	r2, r2, r5
    71c4:	movw	r5, #64456	; 0xfbc8
    71c8:	movt	r5, #59347	; 0xe7d3
    71cc:	add	r2, r2, r5
    71d0:	add	r2, r3, r2, ror #12
    71d4:	and	r5, r2, r7
    71d8:	bic	r4, r3, r7
    71dc:	orr	r5, r5, r4
    71e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    71e4:	add	r0, r1, r0
    71e8:	add	r0, r0, r5
    71ec:	movw	r5, #52710	; 0xcde6
    71f0:	movt	r5, #8673	; 0x21e1
    71f4:	add	r0, r0, r5
    71f8:	add	r0, r2, r0, ror #27
    71fc:	and	r5, r0, r3
    7200:	bic	r4, r2, r3
    7204:	orr	r5, r5, r4
    7208:	add	r7, sl, r7
    720c:	mov	lr, sl
    7210:	str	sl, [sp]
    7214:	add	r7, r7, r5
    7218:	movw	r5, #2006	; 0x7d6
    721c:	movt	r5, #49975	; 0xc337
    7220:	add	r7, r7, r5
    7224:	add	r7, r0, r7, ror #23
    7228:	and	r5, r7, r2
    722c:	bic	r4, r0, r2
    7230:	orr	r5, r5, r4
    7234:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7238:	add	r3, r1, r3
    723c:	add	r3, r3, r5
    7240:	movw	r5, #3463	; 0xd87
    7244:	movt	r5, #62677	; 0xf4d5
    7248:	add	r3, r3, r5
    724c:	add	r3, r7, r3, ror #18
    7250:	and	r5, r3, r0
    7254:	bic	r4, r7, r0
    7258:	orr	r5, r5, r4
    725c:	ldr	r8, [sp, #44]	; 0x2c
    7260:	add	r2, r8, r2
    7264:	add	r2, r2, r5
    7268:	movw	r5, #5357	; 0x14ed
    726c:	movt	r5, #17754	; 0x455a
    7270:	add	r2, r2, r5
    7274:	add	r2, r3, r2, ror #12
    7278:	and	r5, r2, r7
    727c:	bic	r4, r3, r7
    7280:	orr	r5, r5, r4
    7284:	ldr	sl, [sp, #40]	; 0x28
    7288:	add	r0, sl, r0
    728c:	add	r0, r0, r5
    7290:	movw	r5, #59653	; 0xe905
    7294:	movt	r5, #43491	; 0xa9e3
    7298:	add	r0, r0, r5
    729c:	add	r0, r2, r0, ror #27
    72a0:	and	r5, r0, r3
    72a4:	bic	r4, r2, r3
    72a8:	orr	r5, r5, r4
    72ac:	ldr	r1, [fp, #-52]	; 0xffffffcc
    72b0:	add	r7, r1, r7
    72b4:	add	r7, r7, r5
    72b8:	movw	r5, #41976	; 0xa3f8
    72bc:	movt	r5, #64751	; 0xfcef
    72c0:	add	r7, r7, r5
    72c4:	add	r7, r0, r7, ror #23
    72c8:	and	r5, r7, r2
    72cc:	bic	r4, r0, r2
    72d0:	orr	r5, r5, r4
    72d4:	ldr	r1, [sp, #52]	; 0x34
    72d8:	add	r3, r1, r3
    72dc:	add	r3, r3, r5
    72e0:	movw	r5, #729	; 0x2d9
    72e4:	movt	r5, #26479	; 0x676f
    72e8:	add	r3, r3, r5
    72ec:	add	r3, r7, r3, ror #18
    72f0:	and	r5, r3, r0
    72f4:	bic	r4, r7, r0
    72f8:	orr	r5, r5, r4
    72fc:	ldr	r6, [sp, #4]
    7300:	add	r2, r6, r2
    7304:	add	r2, r2, r5
    7308:	movw	r5, #19594	; 0x4c8a
    730c:	movt	r5, #36138	; 0x8d2a
    7310:	add	r2, r2, r5
    7314:	add	r2, r3, r2, ror #12
    7318:	add	r0, r9, r0
    731c:	eor	r5, r2, r3
    7320:	eor	r4, r5, r7
    7324:	add	r0, r0, r4
    7328:	movw	r4, #14658	; 0x3942
    732c:	movt	r4, #65530	; 0xfffa
    7330:	add	r0, r0, r4
    7334:	add	r0, r2, r0, ror #28
    7338:	eor	r5, r5, r0
    733c:	add	r7, r8, r7
    7340:	add	r7, r7, r5
    7344:	movw	r5, #63105	; 0xf681
    7348:	movt	r5, #34673	; 0x8771
    734c:	add	r7, r7, r5
    7350:	add	r7, r0, r7, ror #21
    7354:	eor	r5, r0, r2
    7358:	eor	r5, r5, r7
    735c:	ldr	r4, [fp, #-40]	; 0xffffffd8
    7360:	add	r3, r4, r3
    7364:	add	r3, r3, r5
    7368:	movw	r5, #24866	; 0x6122
    736c:	movt	r5, #28061	; 0x6d9d
    7370:	add	r3, r3, r5
    7374:	add	r3, r7, r3, ror #16
    7378:	eor	r5, r7, r0
    737c:	eor	r5, r5, r3
    7380:	add	r2, lr, r2
    7384:	add	r2, r2, r5
    7388:	movw	r5, #14348	; 0x380c
    738c:	movt	r5, #64997	; 0xfde5
    7390:	add	r2, r2, r5
    7394:	add	r2, r3, r2, ror #9
    7398:	eor	r5, r3, r7
    739c:	eor	r5, r5, r2
    73a0:	ldr	r4, [fp, #-48]	; 0xffffffd0
    73a4:	add	r0, r4, r0
    73a8:	add	r0, r0, r5
    73ac:	movw	r5, #59972	; 0xea44
    73b0:	movt	r5, #42174	; 0xa4be
    73b4:	add	r0, r0, r5
    73b8:	add	r0, r2, r0, ror #28
    73bc:	eor	r5, r2, r3
    73c0:	eor	r5, r5, r0
    73c4:	add	r7, ip, r7
    73c8:	add	r7, r7, r5
    73cc:	movw	r5, #53161	; 0xcfa9
    73d0:	movt	r5, #19422	; 0x4bde
    73d4:	add	r7, r7, r5
    73d8:	add	r7, r0, r7, ror #21
    73dc:	eor	r5, r0, r2
    73e0:	eor	r5, r5, r7
    73e4:	add	r3, r1, r3
    73e8:	add	r3, r3, r5
    73ec:	movw	r5, #19296	; 0x4b60
    73f0:	movt	r5, #63163	; 0xf6bb
    73f4:	add	r3, r3, r5
    73f8:	add	r3, r7, r3, ror #16
    73fc:	eor	r5, r7, r0
    7400:	eor	r5, r5, r3
    7404:	ldr	r8, [sp, #56]	; 0x38
    7408:	add	r2, r8, r2
    740c:	add	r2, r2, r5
    7410:	movw	r5, #48240	; 0xbc70
    7414:	movt	r5, #48831	; 0xbebf
    7418:	add	r2, r2, r5
    741c:	add	r2, r3, r2, ror #9
    7420:	eor	r5, r3, r7
    7424:	eor	r5, r5, r2
    7428:	add	r0, sl, r0
    742c:	add	r0, r0, r5
    7430:	movw	r5, #32454	; 0x7ec6
    7434:	movt	r5, #10395	; 0x289b
    7438:	add	r0, r0, r5
    743c:	add	r0, r2, r0, ror #28
    7440:	eor	r5, r2, r3
    7444:	eor	r5, r5, r0
    7448:	ldr	r4, [fp, #-36]	; 0xffffffdc
    744c:	add	r7, r4, r7
    7450:	add	r7, r7, r5
    7454:	movw	r5, #10234	; 0x27fa
    7458:	movt	r5, #60065	; 0xeaa1
    745c:	add	r7, r7, r5
    7460:	add	r7, r0, r7, ror #21
    7464:	eor	r5, r0, r2
    7468:	eor	r5, r5, r7
    746c:	ldr	ip, [fp, #-44]	; 0xffffffd4
    7470:	add	r3, ip, r3
    7474:	add	r3, r3, r5
    7478:	movw	r5, #12421	; 0x3085
    747c:	movt	r5, #54511	; 0xd4ef
    7480:	add	r3, r3, r5
    7484:	add	r3, r7, r3, ror #16
    7488:	eor	r5, r7, r0
    748c:	eor	r5, r5, r3
    7490:	ldr	r9, [sp, #12]
    7494:	add	r2, r9, r2
    7498:	add	r2, r2, r5
    749c:	movw	r5, #7429	; 0x1d05
    74a0:	movt	r5, #1160	; 0x488
    74a4:	add	r2, r2, r5
    74a8:	add	r2, r3, r2, ror #9
    74ac:	eor	r5, r3, r7
    74b0:	eor	r5, r5, r2
    74b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    74b8:	add	r0, r1, r0
    74bc:	add	r0, r0, r5
    74c0:	movw	r5, #53305	; 0xd039
    74c4:	movt	r5, #55764	; 0xd9d4
    74c8:	add	r0, r0, r5
    74cc:	add	r0, r2, r0, ror #28
    74d0:	eor	r5, r2, r3
    74d4:	eor	r5, r5, r0
    74d8:	add	r7, r6, r7
    74dc:	add	r7, r7, r5
    74e0:	movw	r5, #39397	; 0x99e5
    74e4:	movt	r5, #59099	; 0xe6db
    74e8:	add	r7, r7, r5
    74ec:	add	r7, r0, r7, ror #21
    74f0:	eor	r5, r0, r2
    74f4:	eor	r5, r5, r7
    74f8:	ldr	lr, [sp, #8]
    74fc:	add	r3, lr, r3
    7500:	add	r3, r3, r5
    7504:	movw	r5, #31992	; 0x7cf8
    7508:	movt	r5, #8098	; 0x1fa2
    750c:	add	r3, r3, r5
    7510:	add	r3, r7, r3, ror #16
    7514:	eor	r5, r7, r0
    7518:	eor	r5, r5, r3
    751c:	ldr	sl, [fp, #-52]	; 0xffffffcc
    7520:	add	r2, sl, r2
    7524:	add	r2, r2, r5
    7528:	movw	r5, #22117	; 0x5665
    752c:	movt	r5, #50348	; 0xc4ac
    7530:	add	r2, r2, r5
    7534:	add	r2, r3, r2, ror #9
    7538:	mvn	r5, r7
    753c:	orr	r5, r2, r5
    7540:	eor	r5, r5, r3
    7544:	add	r0, r4, r0
    7548:	add	r0, r0, r5
    754c:	movw	r5, #8772	; 0x2244
    7550:	movt	r5, #62505	; 0xf429
    7554:	add	r0, r0, r5
    7558:	add	r0, r2, r0, ror #26
    755c:	mvn	r5, r3
    7560:	orr	r5, r0, r5
    7564:	eor	r5, r5, r2
    7568:	ldr	r1, [sp, #52]	; 0x34
    756c:	add	r7, r1, r7
    7570:	add	r7, r7, r5
    7574:	movw	r5, #65431	; 0xff97
    7578:	movt	r5, #17194	; 0x432a
    757c:	add	r7, r7, r5
    7580:	add	r7, r0, r7, ror #22
    7584:	mvn	r5, r2
    7588:	orr	r5, r7, r5
    758c:	eor	r5, r5, r0
    7590:	ldr	r1, [sp]
    7594:	add	r3, r1, r3
    7598:	add	r3, r3, r5
    759c:	movw	r5, #9127	; 0x23a7
    75a0:	movt	r5, #43924	; 0xab94
    75a4:	add	r3, r3, r5
    75a8:	add	r3, r7, r3, ror #17
    75ac:	mvn	r5, r0
    75b0:	orr	r5, r3, r5
    75b4:	eor	r5, r5, r7
    75b8:	ldr	r1, [sp, #36]	; 0x24
    75bc:	add	r2, r1, r2
    75c0:	add	r2, r2, r5
    75c4:	movw	r5, #41017	; 0xa039
    75c8:	movt	r5, #64659	; 0xfc93
    75cc:	add	r2, r2, r5
    75d0:	add	r2, r3, r2, ror #11
    75d4:	mvn	r5, r7
    75d8:	orr	r5, r2, r5
    75dc:	eor	r5, r5, r3
    75e0:	add	r0, r6, r0
    75e4:	add	r0, r0, r5
    75e8:	movw	r6, #22979	; 0x59c3
    75ec:	movt	r6, #25947	; 0x655b
    75f0:	add	r0, r0, r6
    75f4:	add	r0, r2, r0, ror #26
    75f8:	mvn	r6, r3
    75fc:	orr	r6, r0, r6
    7600:	eor	r6, r6, r2
    7604:	add	r7, ip, r7
    7608:	add	r7, r7, r6
    760c:	movw	r6, #52370	; 0xcc92
    7610:	movt	r6, #36620	; 0x8f0c
    7614:	add	r7, r7, r6
    7618:	add	r7, r0, r7, ror #22
    761c:	mvn	r6, r2
    7620:	orr	r6, r7, r6
    7624:	eor	r6, r6, r0
    7628:	add	r3, r8, r3
    762c:	add	r3, r3, r6
    7630:	movw	r6, #62589	; 0xf47d
    7634:	movt	r6, #65519	; 0xffef
    7638:	add	r3, r3, r6
    763c:	add	r3, r7, r3, ror #17
    7640:	mvn	r6, r0
    7644:	orr	r6, r3, r6
    7648:	eor	r6, r6, r7
    764c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7650:	add	r2, r1, r2
    7654:	add	r2, r2, r6
    7658:	movw	r6, #24017	; 0x5dd1
    765c:	movt	r6, #34180	; 0x8584
    7660:	add	r2, r2, r6
    7664:	add	r2, r3, r2, ror #11
    7668:	mvn	r6, r7
    766c:	orr	r6, r2, r6
    7670:	eor	r6, r6, r3
    7674:	ldr	r1, [sp, #44]	; 0x2c
    7678:	add	r0, r1, r0
    767c:	add	r0, r0, r6
    7680:	movw	r6, #32335	; 0x7e4f
    7684:	movt	r6, #28584	; 0x6fa8
    7688:	add	r0, r0, r6
    768c:	add	r6, r2, r0, ror #26
    7690:	mvn	r0, r3
    7694:	orr	r0, r6, r0
    7698:	eor	r0, r0, r2
    769c:	add	r1, lr, r7
    76a0:	add	r0, r1, r0
    76a4:	movw	r1, #59104	; 0xe6e0
    76a8:	movt	r1, #65068	; 0xfe2c
    76ac:	add	r0, r0, r1
    76b0:	add	r1, r6, r0, ror #22
    76b4:	mvn	r0, r2
    76b8:	orr	r0, r1, r0
    76bc:	eor	r0, r0, r6
    76c0:	add	r3, r9, r3
    76c4:	add	r0, r3, r0
    76c8:	movw	r3, #17172	; 0x4314
    76cc:	movt	r3, #41729	; 0xa301
    76d0:	add	r0, r0, r3
    76d4:	add	r3, r1, r0, ror #17
    76d8:	mvn	r0, r6
    76dc:	orr	r0, r3, r0
    76e0:	eor	r0, r0, r1
    76e4:	ldr	r7, [sp, #40]	; 0x28
    76e8:	add	r2, r7, r2
    76ec:	add	r0, r2, r0
    76f0:	movw	r2, #4513	; 0x11a1
    76f4:	movt	r2, #19976	; 0x4e08
    76f8:	add	r0, r0, r2
    76fc:	add	r0, r3, r0, ror #11
    7700:	mvn	r2, r1
    7704:	orr	r2, r0, r2
    7708:	eor	r2, r2, r3
    770c:	ldr	r7, [sp, #48]	; 0x30
    7710:	add	r7, r7, r6
    7714:	add	r2, r7, r2
    7718:	movw	r7, #32386	; 0x7e82
    771c:	movt	r7, #63315	; 0xf753
    7720:	add	r2, r2, r7
    7724:	add	r2, r0, r2, ror #26
    7728:	ldr	r7, [sp, #24]
    772c:	add	r7, r2, r7
    7730:	ldr	r6, [sp, #16]
    7734:	str	r7, [r6]
    7738:	mvn	r7, r3
    773c:	orr	r7, r2, r7
    7740:	eor	r7, r7, r0
    7744:	ldr	r5, [fp, #-40]	; 0xffffffd8
    7748:	add	r1, r5, r1
    774c:	add	r1, r1, r7
    7750:	movw	r7, #62005	; 0xf235
    7754:	movt	r7, #48442	; 0xbd3a
    7758:	add	r1, r1, r7
    775c:	add	r1, r2, r1, ror #22
    7760:	ldr	r7, [sp, #28]
    7764:	add	r7, r1, r7
    7768:	str	r7, [r6, #12]
    776c:	mvn	r7, r0
    7770:	orr	r7, r1, r7
    7774:	eor	r7, r7, r2
    7778:	add	r3, sl, r3
    777c:	add	r3, r3, r7
    7780:	movw	r7, #53947	; 0xd2bb
    7784:	movt	r7, #10967	; 0x2ad7
    7788:	add	r3, r3, r7
    778c:	add	r3, r1, r3, ror #17
    7790:	ldr	r7, [sp, #32]
    7794:	add	r7, r3, r7
    7798:	str	r7, [r6, #8]
    779c:	ldr	r7, [sp, #20]
    77a0:	add	r7, r3, r7
    77a4:	mvn	r2, r2
    77a8:	orr	r2, r3, r2
    77ac:	eor	r1, r2, r1
    77b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    77b4:	add	r0, r2, r0
    77b8:	add	r0, r0, r1
    77bc:	movw	r1, #54161	; 0xd391
    77c0:	movt	r1, #60294	; 0xeb86
    77c4:	add	r0, r0, r1
    77c8:	add	r0, r7, r0, ror #11
    77cc:	str	r0, [r6, #4]
    77d0:	sub	sp, fp, #28
    77d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000077d8 <MD5Pad>:
    77d8:	push	{r4, sl, fp, lr}
    77dc:	add	fp, sp, #8
    77e0:	sub	sp, sp, #8
    77e4:	mov	r4, r0
    77e8:	ldr	r0, [r0, #16]
    77ec:	ldr	r1, [r4, #20]
    77f0:	stm	sp, {r0, r1}
    77f4:	ldr	r0, [r4, #16]
    77f8:	ubfx	r0, r0, #3, #6
    77fc:	mov	r1, #120	; 0x78
    7800:	cmp	r0, #56	; 0x38
    7804:	movwcc	r1, #56	; 0x38
    7808:	sub	r2, r1, r0
    780c:	ldr	r1, [pc, #32]	; 7834 <MD5Pad+0x5c>
    7810:	add	r1, pc, r1
    7814:	mov	r0, r4
    7818:	bl	6c54 <MD5Update>
    781c:	mov	r1, sp
    7820:	mov	r0, r4
    7824:	mov	r2, #8
    7828:	bl	6c54 <MD5Update>
    782c:	sub	sp, fp, #8
    7830:	pop	{r4, sl, fp, pc}
    7834:	.word	0x00020c00

00007838 <rb_sha256_crypt_r>:
    7838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    783c:	add	fp, sp, #28
    7840:	sub	sp, sp, #468	; 0x1d4
    7844:	str	r3, [fp, #-488]	; 0xfffffe18
    7848:	mov	r9, r2
    784c:	mov	r7, r1
    7850:	mov	r4, r0
    7854:	ldr	r0, [pc, #2724]	; 8300 <rb_sha256_crypt_r+0xac8>
    7858:	add	r0, pc, r0
    785c:	mov	r2, #3
    7860:	bl	552c <strncmp@plt>
    7864:	cmp	r0, #0
    7868:	addeq	r7, r7, #3
    786c:	ldr	r1, [pc, #2704]	; 8304 <rb_sha256_crypt_r+0xacc>
    7870:	add	r1, pc, r1
    7874:	mov	r0, r7
    7878:	mov	r2, #7
    787c:	bl	552c <strncmp@plt>
    7880:	mov	r5, #0
    7884:	movw	r1, #5000	; 0x1388
    7888:	str	r1, [fp, #-460]	; 0xfffffe34
    788c:	cmp	r0, #0
    7890:	beq	789c <rb_sha256_crypt_r+0x64>
    7894:	mov	r0, #0
    7898:	b	78e0 <rb_sha256_crypt_r+0xa8>
    789c:	add	r0, r7, #7
    78a0:	sub	r1, fp, #272	; 0x110
    78a4:	mov	r2, #10
    78a8:	bl	5124 <strtoul@plt>
    78ac:	ldr	r1, [fp, #-272]	; 0xfffffef0
    78b0:	ldrb	r2, [r1]
    78b4:	cmp	r2, #36	; 0x24
    78b8:	bne	82e0 <rb_sha256_crypt_r+0xaa8>
    78bc:	movw	r2, #51711	; 0xc9ff
    78c0:	movt	r2, #15258	; 0x3b9a
    78c4:	cmp	r0, r2
    78c8:	movcc	r2, r0
    78cc:	cmp	r2, #1000	; 0x3e8
    78d0:	movls	r2, #1000	; 0x3e8
    78d4:	str	r2, [fp, #-460]	; 0xfffffe34
    78d8:	add	r7, r1, #1
    78dc:	mov	r0, #1
    78e0:	str	r0, [fp, #-492]	; 0xfffffe14
    78e4:	ldr	r1, [pc, #2588]	; 8308 <rb_sha256_crypt_r+0xad0>
    78e8:	add	r1, pc, r1
    78ec:	mov	r0, r7
    78f0:	bl	54fc <strcspn@plt>
    78f4:	mov	sl, r0
    78f8:	cmp	r0, #16
    78fc:	str	r0, [fp, #-496]	; 0xfffffe10
    7900:	movcs	sl, #16
    7904:	mov	r0, r4
    7908:	bl	510c <strlen@plt>
    790c:	mov	r6, r0
    7910:	tst	r4, #3
    7914:	beq	7940 <rb_sha256_crypt_r+0x108>
    7918:	add	r0, r6, #11
    791c:	bic	r0, r0, #7
    7920:	sub	r0, sp, r0
    7924:	add	r5, r0, #4
    7928:	mov	sp, r0
    792c:	mov	r0, r5
    7930:	mov	r1, r4
    7934:	mov	r2, r6
    7938:	bl	5130 <memcpy@plt>
    793c:	mov	r4, r5
    7940:	tst	r7, #3
    7944:	str	r5, [fp, #-480]	; 0xfffffe20
    7948:	beq	797c <rb_sha256_crypt_r+0x144>
    794c:	add	r0, sl, #11
    7950:	bic	r0, r0, #7
    7954:	sub	r0, sp, r0
    7958:	add	r5, r0, #4
    795c:	mov	sp, r0
    7960:	mov	r0, r5
    7964:	mov	r1, r7
    7968:	mov	r2, sl
    796c:	bl	5130 <memcpy@plt>
    7970:	str	r5, [fp, #-484]	; 0xfffffe1c
    7974:	mov	r7, r5
    7978:	b	7984 <rb_sha256_crypt_r+0x14c>
    797c:	mov	r0, #0
    7980:	str	r0, [fp, #-484]	; 0xfffffe1c
    7984:	sub	r5, fp, #272	; 0x110
    7988:	mov	r0, r5
    798c:	bl	831c <rb_sha256_init_ctx>
    7990:	mov	r0, r4
    7994:	mov	r1, r6
    7998:	mov	r2, r5
    799c:	bl	8390 <rb_sha256_process_bytes>
    79a0:	mov	r0, r7
    79a4:	mov	r1, sl
    79a8:	mov	r2, r5
    79ac:	bl	8390 <rb_sha256_process_bytes>
    79b0:	sub	r5, fp, #448	; 0x1c0
    79b4:	mov	r0, r5
    79b8:	bl	831c <rb_sha256_init_ctx>
    79bc:	mov	r0, r4
    79c0:	mov	r1, r6
    79c4:	mov	r2, r5
    79c8:	bl	8390 <rb_sha256_process_bytes>
    79cc:	str	r7, [fp, #-472]	; 0xfffffe28
    79d0:	mov	r0, r7
    79d4:	mov	r1, sl
    79d8:	mov	r2, r5
    79dc:	bl	8390 <rb_sha256_process_bytes>
    79e0:	mov	r0, r4
    79e4:	mov	r1, r6
    79e8:	mov	r2, r5
    79ec:	bl	8390 <rb_sha256_process_bytes>
    79f0:	sub	r1, fp, #64	; 0x40
    79f4:	mov	r0, r5
    79f8:	bl	856c <rb_sha256_finish_ctx>
    79fc:	cmp	r6, #33	; 0x21
    7a00:	mov	r1, r6
    7a04:	str	r6, [fp, #-452]	; 0xfffffe3c
    7a08:	bcc	7a48 <rb_sha256_crypt_r+0x210>
    7a0c:	sub	r0, r6, #33	; 0x21
    7a10:	mov	r7, r6
    7a14:	bic	r8, r0, #31
    7a18:	sub	r5, fp, #64	; 0x40
    7a1c:	sub	r6, fp, #272	; 0x110
    7a20:	mov	r0, r5
    7a24:	mov	r1, #32
    7a28:	mov	r2, r6
    7a2c:	bl	8390 <rb_sha256_process_bytes>
    7a30:	sub	r7, r7, #32
    7a34:	cmp	r7, #32
    7a38:	bhi	7a20 <rb_sha256_crypt_r+0x1e8>
    7a3c:	ldr	r6, [fp, #-452]	; 0xfffffe3c
    7a40:	sub	r0, r6, #32
    7a44:	sub	r1, r0, r8
    7a48:	sub	r0, fp, #64	; 0x40
    7a4c:	sub	r2, fp, #272	; 0x110
    7a50:	bl	8390 <rb_sha256_process_bytes>
    7a54:	cmp	r6, #0
    7a58:	beq	7aa0 <rb_sha256_crypt_r+0x268>
    7a5c:	sub	r5, fp, #272	; 0x110
    7a60:	mov	r7, #0
    7a64:	sub	r8, fp, #64	; 0x40
    7a68:	ldr	r6, [fp, #-452]	; 0xfffffe3c
    7a6c:	tst	r6, #1
    7a70:	bne	7a80 <rb_sha256_crypt_r+0x248>
    7a74:	mov	r0, r4
    7a78:	ldr	r1, [fp, #-452]	; 0xfffffe3c
    7a7c:	b	7a88 <rb_sha256_crypt_r+0x250>
    7a80:	mov	r0, r8
    7a84:	mov	r1, #32
    7a88:	mov	r2, r5
    7a8c:	bl	8390 <rb_sha256_process_bytes>
    7a90:	lsr	r0, r6, #1
    7a94:	cmp	r7, r6, lsr #1
    7a98:	mov	r6, r0
    7a9c:	bne	7a6c <rb_sha256_crypt_r+0x234>
    7aa0:	sub	r0, fp, #272	; 0x110
    7aa4:	sub	r1, fp, #64	; 0x40
    7aa8:	bl	856c <rb_sha256_finish_ctx>
    7aac:	sub	r0, fp, #448	; 0x1c0
    7ab0:	bl	831c <rb_sha256_init_ctx>
    7ab4:	ldr	r5, [fp, #-452]	; 0xfffffe3c
    7ab8:	cmp	r5, #0
    7abc:	beq	7b54 <rb_sha256_crypt_r+0x31c>
    7ac0:	sub	r7, fp, #448	; 0x1c0
    7ac4:	mov	r6, r5
    7ac8:	mov	r0, r4
    7acc:	mov	r1, r5
    7ad0:	mov	r2, r7
    7ad4:	bl	8390 <rb_sha256_process_bytes>
    7ad8:	subs	r6, r6, #1
    7adc:	bne	7ac8 <rb_sha256_crypt_r+0x290>
    7ae0:	sub	r0, fp, #448	; 0x1c0
    7ae4:	sub	r8, fp, #96	; 0x60
    7ae8:	mov	r1, r8
    7aec:	bl	856c <rb_sha256_finish_ctx>
    7af0:	add	r0, r5, #7
    7af4:	bic	r0, r0, #7
    7af8:	sub	r1, sp, r0
    7afc:	mov	sp, r1
    7b00:	cmp	r5, #32
    7b04:	ldr	r6, [fp, #-472]	; 0xfffffe28
    7b08:	str	r1, [fp, #-456]	; 0xfffffe38
    7b0c:	bcc	7b80 <rb_sha256_crypt_r+0x348>
    7b10:	sub	ip, r5, #32
    7b14:	bic	r2, ip, #31
    7b18:	add	r0, r1, r2
    7b1c:	add	r0, r0, #32
    7b20:	mov	r3, #0
    7b24:	mov	r4, r8
    7b28:	vld1.64	{d16-d17}, [r4]!
    7b2c:	vld1.64	{d18-d19}, [r4]
    7b30:	sub	r7, r1, r3
    7b34:	vst1.64	{d16-d17}, [r7]!
    7b38:	vst1.64	{d18-d19}, [r7]
    7b3c:	sub	r3, r3, #32
    7b40:	add	r7, r5, r3
    7b44:	cmp	r7, #31
    7b48:	bhi	7b24 <rb_sha256_crypt_r+0x2ec>
    7b4c:	sub	r2, ip, r2
    7b50:	b	7b88 <rb_sha256_crypt_r+0x350>
    7b54:	sub	r0, fp, #448	; 0x1c0
    7b58:	sub	r1, fp, #96	; 0x60
    7b5c:	bl	856c <rb_sha256_finish_ctx>
    7b60:	add	r0, r5, #7
    7b64:	bic	r0, r0, #7
    7b68:	sub	r0, sp, r0
    7b6c:	mov	sp, r0
    7b70:	mov	r2, #0
    7b74:	str	r0, [fp, #-456]	; 0xfffffe38
    7b78:	ldr	r6, [fp, #-472]	; 0xfffffe28
    7b7c:	b	7b88 <rb_sha256_crypt_r+0x350>
    7b80:	mov	r0, r1
    7b84:	mov	r2, r5
    7b88:	str	r9, [fp, #-476]	; 0xfffffe24
    7b8c:	sub	r1, fp, #96	; 0x60
    7b90:	bl	5130 <memcpy@plt>
    7b94:	sub	r4, fp, #448	; 0x1c0
    7b98:	mov	r0, r4
    7b9c:	bl	831c <rb_sha256_init_ctx>
    7ba0:	mov	r5, #0
    7ba4:	mov	r0, r6
    7ba8:	mov	r1, sl
    7bac:	mov	r2, r4
    7bb0:	bl	8390 <rb_sha256_process_bytes>
    7bb4:	add	r5, r5, #1
    7bb8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
    7bbc:	add	r0, r0, #16
    7bc0:	cmp	r5, r0
    7bc4:	bcc	7ba4 <rb_sha256_crypt_r+0x36c>
    7bc8:	sub	r0, fp, #448	; 0x1c0
    7bcc:	sub	r5, fp, #96	; 0x60
    7bd0:	mov	r1, r5
    7bd4:	bl	856c <rb_sha256_finish_ctx>
    7bd8:	add	r0, sl, #7
    7bdc:	bic	r0, r0, #7
    7be0:	sub	r0, sp, r0
    7be4:	mov	sp, r0
    7be8:	cmp	sl, #32
    7bec:	mov	r2, sl
    7bf0:	bcc	7c40 <rb_sha256_crypt_r+0x408>
    7bf4:	ldr	r3, [fp, #-496]	; 0xfffffe10
    7bf8:	mvn	r2, r3
    7bfc:	cmn	r2, #17
    7c00:	mvnls	r2, #16
    7c04:	mvn	r1, #32
    7c08:	sub	r6, r1, r2
    7c0c:	mov	r1, #32
    7c10:	mov	r2, r3
    7c14:	mov	r3, r0
    7c18:	mov	r4, r5
    7c1c:	vld1.8	{d16-d17}, [r4]!
    7c20:	vld1.64	{d18-d19}, [r4]
    7c24:	add	r7, r3, #16
    7c28:	vst1.8	{d18-d19}, [r7]
    7c2c:	vst1.8	{d16-d17}, [r3], r1
    7c30:	sub	r2, r2, #32
    7c34:	cmp	r2, #31
    7c38:	bhi	7c18 <rb_sha256_crypt_r+0x3e0>
    7c3c:	add	r2, r6, #32
    7c40:	str	sl, [fp, #-464]	; 0xfffffe30
    7c44:	sub	r1, fp, #96	; 0x60
    7c48:	str	r0, [fp, #-468]	; 0xfffffe2c
    7c4c:	bl	5130 <memcpy@plt>
    7c50:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7c54:	cmp	r0, #0
    7c58:	beq	7d48 <rb_sha256_crypt_r+0x510>
    7c5c:	mov	r4, #0
    7c60:	sub	r8, fp, #272	; 0x110
    7c64:	sub	sl, fp, #64	; 0x40
    7c68:	mov	r0, r8
    7c6c:	bl	831c <rb_sha256_init_ctx>
    7c70:	movw	r0, #18725	; 0x4925
    7c74:	movt	r0, #9362	; 0x2492
    7c78:	umull	r0, r1, r4, r0
    7c7c:	sub	r0, r4, r1
    7c80:	add	r7, r1, r0, lsr #1
    7c84:	lsr	r0, r7, #2
    7c88:	lsl	r6, r0, #3
    7c8c:	movw	r0, #43691	; 0xaaab
    7c90:	movt	r0, #43690	; 0xaaaa
    7c94:	umull	r0, r1, r4, r0
    7c98:	lsr	r0, r1, #1
    7c9c:	add	r5, r0, r0, lsl #1
    7ca0:	ands	r9, r4, #1
    7ca4:	beq	7cb4 <rb_sha256_crypt_r+0x47c>
    7ca8:	ldr	r0, [fp, #-456]	; 0xfffffe38
    7cac:	ldr	r1, [fp, #-452]	; 0xfffffe3c
    7cb0:	b	7cbc <rb_sha256_crypt_r+0x484>
    7cb4:	mov	r0, sl
    7cb8:	mov	r1, #32
    7cbc:	mov	r2, r8
    7cc0:	bl	8390 <rb_sha256_process_bytes>
    7cc4:	sub	r6, r6, r7, lsr #2
    7cc8:	cmp	r5, r4
    7ccc:	bne	7cec <rb_sha256_crypt_r+0x4b4>
    7cd0:	cmp	r6, r4
    7cd4:	bne	7d04 <rb_sha256_crypt_r+0x4cc>
    7cd8:	cmp	r9, #0
    7cdc:	beq	7d1c <rb_sha256_crypt_r+0x4e4>
    7ce0:	mov	r0, sl
    7ce4:	mov	r1, #32
    7ce8:	b	7d24 <rb_sha256_crypt_r+0x4ec>
    7cec:	ldr	r0, [fp, #-468]	; 0xfffffe2c
    7cf0:	ldr	r1, [fp, #-464]	; 0xfffffe30
    7cf4:	mov	r2, r8
    7cf8:	bl	8390 <rb_sha256_process_bytes>
    7cfc:	cmp	r6, r4
    7d00:	beq	7cd8 <rb_sha256_crypt_r+0x4a0>
    7d04:	ldr	r0, [fp, #-456]	; 0xfffffe38
    7d08:	ldr	r1, [fp, #-452]	; 0xfffffe3c
    7d0c:	mov	r2, r8
    7d10:	bl	8390 <rb_sha256_process_bytes>
    7d14:	cmp	r9, #0
    7d18:	bne	7ce0 <rb_sha256_crypt_r+0x4a8>
    7d1c:	ldr	r0, [fp, #-456]	; 0xfffffe38
    7d20:	ldr	r1, [fp, #-452]	; 0xfffffe3c
    7d24:	mov	r2, r8
    7d28:	bl	8390 <rb_sha256_process_bytes>
    7d2c:	mov	r0, r8
    7d30:	mov	r1, sl
    7d34:	bl	856c <rb_sha256_finish_ctx>
    7d38:	add	r4, r4, #1
    7d3c:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7d40:	cmp	r0, r4
    7d44:	bne	7c68 <rb_sha256_crypt_r+0x430>
    7d48:	ldr	r5, [fp, #-488]	; 0xfffffe18
    7d4c:	bic	r6, r5, r5, asr #31
    7d50:	mov	r9, #0
    7d54:	ldr	sl, [fp, #-476]	; 0xfffffe24
    7d58:	mov	r0, sl
    7d5c:	mov	r1, #0
    7d60:	mov	r2, r6
    7d64:	bl	4f68 <memset@plt>
    7d68:	ldr	r1, [pc, #1436]	; 830c <rb_sha256_crypt_r+0xad4>
    7d6c:	add	r1, pc, r1
    7d70:	mov	r0, sl
    7d74:	mov	r2, r6
    7d78:	bl	4ec0 <strncpy@plt>
    7d7c:	mov	r0, sl
    7d80:	bl	510c <strlen@plt>
    7d84:	adds	r4, sl, r0
    7d88:	addeq	r4, sl, r6
    7d8c:	sub	r8, r5, #3
    7d90:	ldr	r0, [fp, #-492]	; 0xfffffe14
    7d94:	cmp	r0, #0
    7d98:	beq	7dd0 <rb_sha256_crypt_r+0x598>
    7d9c:	sub	sp, sp, #8
    7da0:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7da4:	str	r0, [sp]
    7da8:	bic	r1, r8, r8, asr #31
    7dac:	ldr	r2, [pc, #1372]	; 8310 <rb_sha256_crypt_r+0xad8>
    7db0:	add	r2, pc, r2
    7db4:	ldr	r3, [pc, #1368]	; 8314 <rb_sha256_crypt_r+0xadc>
    7db8:	add	r3, pc, r3
    7dbc:	mov	r0, r4
    7dc0:	bl	54cc <snprintf@plt>
    7dc4:	add	sp, sp, #8
    7dc8:	sub	r8, r8, r0
    7dcc:	add	r4, r4, r0
    7dd0:	mov	r0, r4
    7dd4:	mov	r1, #0
    7dd8:	ldr	r7, [fp, #-464]	; 0xfffffe30
    7ddc:	mov	r2, r7
    7de0:	bl	4f68 <memset@plt>
    7de4:	bic	r5, r8, r8, asr #31
    7de8:	cmp	r5, r7
    7dec:	mov	r6, r7
    7df0:	movcc	r6, r5
    7df4:	mov	r0, r4
    7df8:	ldr	r1, [fp, #-472]	; 0xfffffe28
    7dfc:	mov	r2, r6
    7e00:	bl	4ec0 <strncpy@plt>
    7e04:	mov	r0, sl
    7e08:	bl	510c <strlen@plt>
    7e0c:	adds	r0, sl, r0
    7e10:	mov	r4, r0
    7e14:	addeq	r4, r4, r7
    7e18:	moveq	r9, r7
    7e1c:	sub	r1, r8, r6
    7e20:	cmp	r1, #1
    7e24:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    7e28:	mov	r1, #36	; 0x24
    7e2c:	strb	r1, [r0, r9]
    7e30:	beq	8228 <rb_sha256_crypt_r+0x9f0>
    7e34:	mvn	ip, r5
    7e38:	ldr	r0, [fp, #-496]	; 0xfffffe10
    7e3c:	mvn	r9, r0
    7e40:	cmp	ip, r9
    7e44:	mov	r0, r9
    7e48:	movhi	r0, ip
    7e4c:	cmn	r0, #17
    7e50:	mvnls	r0, #16
    7e54:	add	r5, r8, r0
    7e58:	ldrb	r0, [fp, #-64]	; 0xffffffc0
    7e5c:	ldrb	r2, [fp, #-54]	; 0xffffffca
    7e60:	ldrb	r3, [fp, #-44]	; 0xffffffd4
    7e64:	lsl	r2, r2, #8
    7e68:	orr	r0, r2, r0, lsl #16
    7e6c:	orr	r2, r0, r3
    7e70:	add	r3, r4, #1
    7e74:	mov	r6, #0
    7e78:	ldr	lr, [pc, #1176]	; 8318 <rb_sha256_crypt_r+0xae0>
    7e7c:	add	lr, pc, lr
    7e80:	and	r0, r2, #63	; 0x3f
    7e84:	ldrb	r0, [lr, r0]
    7e88:	strb	r0, [r3, -r6]
    7e8c:	add	r7, r5, r6
    7e90:	sub	r0, r6, #1
    7e94:	cmp	r7, #2
    7e98:	blt	7eb0 <rb_sha256_crypt_r+0x678>
    7e9c:	add	r6, r6, #4
    7ea0:	lsr	r2, r2, #6
    7ea4:	cmp	r6, #1
    7ea8:	mov	r6, r0
    7eac:	bhi	7e80 <rb_sha256_crypt_r+0x648>
    7eb0:	cmp	ip, r9
    7eb4:	mov	r5, r9
    7eb8:	movhi	r5, ip
    7ebc:	mvn	r2, #16
    7ec0:	cmn	r5, #17
    7ec4:	movls	r5, r2
    7ec8:	add	r5, r8, r5
    7ecc:	add	r5, r5, r0
    7ed0:	add	r5, r5, #1
    7ed4:	cmp	r5, #2
    7ed8:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    7edc:	cmp	ip, r9
    7ee0:	mov	r5, r9
    7ee4:	movhi	r5, ip
    7ee8:	cmn	r5, #17
    7eec:	movhi	r2, r5
    7ef0:	add	r5, r8, r2
    7ef4:	ldrb	r2, [fp, #-63]	; 0xffffffc1
    7ef8:	ldrb	r6, [fp, #-53]	; 0xffffffcb
    7efc:	ldrb	r7, [fp, #-43]	; 0xffffffd5
    7f00:	lsl	r2, r2, #8
    7f04:	orr	r2, r2, r7, lsl #16
    7f08:	orr	r7, r2, r6
    7f0c:	mvn	r2, #0
    7f10:	and	r6, r7, #63	; 0x3f
    7f14:	ldrb	r6, [lr, r6]
    7f18:	sub	r1, r4, r0
    7f1c:	strb	r6, [r1, #1]
    7f20:	add	r1, r5, r0
    7f24:	sub	r0, r0, #1
    7f28:	cmp	r1, #2
    7f2c:	blt	7f44 <rb_sha256_crypt_r+0x70c>
    7f30:	add	r1, r2, #5
    7f34:	sub	r2, r2, #1
    7f38:	lsr	r7, r7, #6
    7f3c:	cmp	r1, #1
    7f40:	bhi	7f10 <rb_sha256_crypt_r+0x6d8>
    7f44:	cmp	ip, r9
    7f48:	mov	r1, r9
    7f4c:	movhi	r1, ip
    7f50:	mvn	r2, #16
    7f54:	cmn	r1, #17
    7f58:	movls	r1, r2
    7f5c:	add	r1, r8, r1
    7f60:	add	r1, r1, r0
    7f64:	add	r1, r1, #1
    7f68:	cmp	r1, #2
    7f6c:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    7f70:	cmp	ip, r9
    7f74:	mov	r1, r9
    7f78:	movhi	r1, ip
    7f7c:	cmn	r1, #17
    7f80:	movhi	r2, r1
    7f84:	add	r5, r8, r2
    7f88:	ldrb	r1, [fp, #-62]	; 0xffffffc2
    7f8c:	ldrb	r2, [fp, #-52]	; 0xffffffcc
    7f90:	ldrb	r4, [fp, #-42]	; 0xffffffd6
    7f94:	lsl	r4, r4, #8
    7f98:	orr	r2, r4, r2, lsl #16
    7f9c:	orr	r2, r2, r1
    7fa0:	mov	r7, #4
    7fa4:	and	r1, r2, #63	; 0x3f
    7fa8:	ldrb	r1, [lr, r1]
    7fac:	strb	r1, [r3, -r0]
    7fb0:	add	r1, r5, r0
    7fb4:	sub	r0, r0, #1
    7fb8:	cmp	r1, #2
    7fbc:	blt	7fcc <rb_sha256_crypt_r+0x794>
    7fc0:	lsr	r2, r2, #6
    7fc4:	subs	r7, r7, #1
    7fc8:	bhi	7fa4 <rb_sha256_crypt_r+0x76c>
    7fcc:	cmp	ip, r9
    7fd0:	movhi	r9, ip
    7fd4:	cmn	r9, #17
    7fd8:	mvnls	r9, #16
    7fdc:	add	r1, r8, r9
    7fe0:	add	r1, r1, r0
    7fe4:	add	r1, r1, #1
    7fe8:	cmp	r1, #2
    7fec:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    7ff0:	sub	r2, r3, r0
    7ff4:	ldrb	r0, [fp, #-61]	; 0xffffffc3
    7ff8:	ldrb	r3, [fp, #-51]	; 0xffffffcd
    7ffc:	ldrb	r7, [fp, #-41]	; 0xffffffd7
    8000:	lsl	r3, r3, #8
    8004:	orr	r0, r3, r0, lsl #16
    8008:	orr	r3, r0, r7
    800c:	mov	r7, #4
    8010:	and	r0, r3, #63	; 0x3f
    8014:	ldrb	r0, [lr, r0]
    8018:	strb	r0, [r2], #1
    801c:	sub	r1, r1, #1
    8020:	cmp	r1, #2
    8024:	blt	8034 <rb_sha256_crypt_r+0x7fc>
    8028:	lsr	r3, r3, #6
    802c:	subs	r7, r7, #1
    8030:	bhi	8010 <rb_sha256_crypt_r+0x7d8>
    8034:	cmp	r1, #2
    8038:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    803c:	ldrb	r0, [fp, #-60]	; 0xffffffc4
    8040:	ldrb	r3, [fp, #-50]	; 0xffffffce
    8044:	ldrb	r7, [fp, #-40]	; 0xffffffd8
    8048:	lsl	r0, r0, #8
    804c:	orr	r0, r0, r7, lsl #16
    8050:	orr	r3, r0, r3
    8054:	mov	r7, #4
    8058:	and	r0, r3, #63	; 0x3f
    805c:	ldrb	r0, [lr, r0]
    8060:	strb	r0, [r2], #1
    8064:	sub	r1, r1, #1
    8068:	cmp	r1, #2
    806c:	blt	807c <rb_sha256_crypt_r+0x844>
    8070:	lsr	r3, r3, #6
    8074:	subs	r7, r7, #1
    8078:	bhi	8058 <rb_sha256_crypt_r+0x820>
    807c:	cmp	r1, #2
    8080:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    8084:	ldrb	r0, [fp, #-59]	; 0xffffffc5
    8088:	ldrb	r3, [fp, #-49]	; 0xffffffcf
    808c:	ldrb	r7, [fp, #-39]	; 0xffffffd9
    8090:	lsl	r7, r7, #8
    8094:	orr	r3, r7, r3, lsl #16
    8098:	orr	r3, r3, r0
    809c:	mov	r7, #4
    80a0:	and	r0, r3, #63	; 0x3f
    80a4:	ldrb	r0, [lr, r0]
    80a8:	strb	r0, [r2], #1
    80ac:	sub	r1, r1, #1
    80b0:	cmp	r1, #2
    80b4:	blt	80c4 <rb_sha256_crypt_r+0x88c>
    80b8:	lsr	r3, r3, #6
    80bc:	subs	r7, r7, #1
    80c0:	bhi	80a0 <rb_sha256_crypt_r+0x868>
    80c4:	cmp	r1, #2
    80c8:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    80cc:	ldrb	r0, [fp, #-58]	; 0xffffffc6
    80d0:	ldrb	r3, [fp, #-48]	; 0xffffffd0
    80d4:	ldrb	r7, [fp, #-38]	; 0xffffffda
    80d8:	lsl	r3, r3, #8
    80dc:	orr	r0, r3, r0, lsl #16
    80e0:	orr	r3, r0, r7
    80e4:	mov	r7, #4
    80e8:	and	r0, r3, #63	; 0x3f
    80ec:	ldrb	r0, [lr, r0]
    80f0:	strb	r0, [r2], #1
    80f4:	sub	r1, r1, #1
    80f8:	cmp	r1, #2
    80fc:	blt	810c <rb_sha256_crypt_r+0x8d4>
    8100:	lsr	r3, r3, #6
    8104:	subs	r7, r7, #1
    8108:	bhi	80e8 <rb_sha256_crypt_r+0x8b0>
    810c:	cmp	r1, #2
    8110:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    8114:	ldrb	r0, [fp, #-57]	; 0xffffffc7
    8118:	ldrb	r3, [fp, #-47]	; 0xffffffd1
    811c:	ldrb	r7, [fp, #-37]	; 0xffffffdb
    8120:	lsl	r0, r0, #8
    8124:	orr	r0, r0, r7, lsl #16
    8128:	orr	r3, r0, r3
    812c:	mov	r7, #4
    8130:	and	r0, r3, #63	; 0x3f
    8134:	ldrb	r0, [lr, r0]
    8138:	strb	r0, [r2], #1
    813c:	sub	r1, r1, #1
    8140:	cmp	r1, #2
    8144:	blt	8154 <rb_sha256_crypt_r+0x91c>
    8148:	lsr	r3, r3, #6
    814c:	subs	r7, r7, #1
    8150:	bhi	8130 <rb_sha256_crypt_r+0x8f8>
    8154:	cmp	r1, #2
    8158:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    815c:	ldrb	r0, [fp, #-56]	; 0xffffffc8
    8160:	ldrb	r3, [fp, #-46]	; 0xffffffd2
    8164:	ldrb	r7, [fp, #-36]	; 0xffffffdc
    8168:	lsl	r7, r7, #8
    816c:	orr	r3, r7, r3, lsl #16
    8170:	orr	r3, r3, r0
    8174:	mov	r7, #4
    8178:	and	r0, r3, #63	; 0x3f
    817c:	ldrb	r0, [lr, r0]
    8180:	strb	r0, [r2], #1
    8184:	sub	r1, r1, #1
    8188:	cmp	r1, #2
    818c:	blt	819c <rb_sha256_crypt_r+0x964>
    8190:	lsr	r3, r3, #6
    8194:	subs	r7, r7, #1
    8198:	bhi	8178 <rb_sha256_crypt_r+0x940>
    819c:	cmp	r1, #2
    81a0:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    81a4:	ldrb	r0, [fp, #-55]	; 0xffffffc9
    81a8:	ldrb	r3, [fp, #-45]	; 0xffffffd3
    81ac:	ldrb	r7, [fp, #-35]	; 0xffffffdd
    81b0:	lsl	r3, r3, #8
    81b4:	orr	r0, r3, r0, lsl #16
    81b8:	orr	r3, r0, r7
    81bc:	mov	r7, #4
    81c0:	and	r0, r3, #63	; 0x3f
    81c4:	ldrb	r0, [lr, r0]
    81c8:	strb	r0, [r2], #1
    81cc:	sub	r1, r1, #1
    81d0:	cmp	r1, #2
    81d4:	blt	81e4 <rb_sha256_crypt_r+0x9ac>
    81d8:	lsr	r3, r3, #6
    81dc:	subs	r7, r7, #1
    81e0:	bhi	81c0 <rb_sha256_crypt_r+0x988>
    81e4:	cmp	r1, #2
    81e8:	blt	8228 <rb_sha256_crypt_r+0x9f0>
    81ec:	ldrb	r0, [fp, #-34]	; 0xffffffde
    81f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
    81f4:	orr	r3, r0, r3, lsl #8
    81f8:	mov	r7, #3
    81fc:	and	r0, r3, #63	; 0x3f
    8200:	ldrb	r0, [lr, r0]
    8204:	strb	r0, [r2], #1
    8208:	sub	r1, r1, #1
    820c:	cmp	r1, #2
    8210:	blt	8220 <rb_sha256_crypt_r+0x9e8>
    8214:	lsr	r3, r3, #6
    8218:	subs	r7, r7, #1
    821c:	bhi	81fc <rb_sha256_crypt_r+0x9c4>
    8220:	cmp	r1, #1
    8224:	bgt	82f4 <rb_sha256_crypt_r+0xabc>
    8228:	bl	5610 <__errno_location@plt>
    822c:	mov	r1, #34	; 0x22
    8230:	str	r1, [r0]
    8234:	mov	sl, #0
    8238:	sub	r4, fp, #272	; 0x110
    823c:	mov	r0, r4
    8240:	bl	831c <rb_sha256_init_ctx>
    8244:	sub	r1, fp, #64	; 0x40
    8248:	mov	r0, r4
    824c:	bl	856c <rb_sha256_finish_ctx>
    8250:	vmov.i32	q8, #0	; 0x00000000
    8254:	sub	r0, fp, #96	; 0x60
    8258:	vst1.64	{d16-d17}, [r0]!
    825c:	vst1.64	{d16-d17}, [r0]
    8260:	ldr	r0, [fp, #-456]	; 0xfffffe38
    8264:	mov	r1, #0
    8268:	ldr	r5, [fp, #-452]	; 0xfffffe3c
    826c:	mov	r2, r5
    8270:	bl	4f68 <memset@plt>
    8274:	ldr	r0, [fp, #-468]	; 0xfffffe2c
    8278:	mov	r1, #0
    827c:	ldr	r2, [fp, #-464]	; 0xfffffe30
    8280:	bl	4f68 <memset@plt>
    8284:	mov	r0, r4
    8288:	mov	r1, #0
    828c:	mov	r2, #172	; 0xac
    8290:	bl	4f68 <memset@plt>
    8294:	sub	r0, fp, #448	; 0x1c0
    8298:	mov	r1, #0
    829c:	mov	r2, #172	; 0xac
    82a0:	bl	4f68 <memset@plt>
    82a4:	ldr	r0, [fp, #-480]	; 0xfffffe20
    82a8:	cmp	r0, #0
    82ac:	beq	82bc <rb_sha256_crypt_r+0xa84>
    82b0:	mov	r1, #0
    82b4:	mov	r2, r5
    82b8:	bl	4f68 <memset@plt>
    82bc:	ldr	r0, [fp, #-484]	; 0xfffffe1c
    82c0:	cmp	r0, #0
    82c4:	beq	82d4 <rb_sha256_crypt_r+0xa9c>
    82c8:	mov	r1, #0
    82cc:	ldr	r2, [fp, #-464]	; 0xfffffe30
    82d0:	bl	4f68 <memset@plt>
    82d4:	mov	r0, sl
    82d8:	sub	sp, fp, #28
    82dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82e0:	mov	r0, #0
    82e4:	str	r0, [fp, #-492]	; 0xfffffe14
    82e8:	movw	r0, #5000	; 0x1388
    82ec:	str	r0, [fp, #-460]	; 0xfffffe34
    82f0:	b	78e4 <rb_sha256_crypt_r+0xac>
    82f4:	mov	r0, #0
    82f8:	strb	r0, [r2]
    82fc:	b	8238 <rb_sha256_crypt_r+0xa00>
    8300:	.word	0x0000d958
    8304:	.word	0x0000d944
    8308:	.word	0x0000d592
    830c:	.word	0x0000d444
    8310:	.word	0x0000d0cc
    8314:	.word	0x0000d3fc
    8318:	.word	0x0000cfbb

0000831c <rb_sha256_init_ctx>:
    831c:	push	{r4, r5, r6, sl, fp, lr}
    8320:	add	fp, sp, #16
    8324:	movw	ip, #44677	; 0xae85
    8328:	movt	ip, #47975	; 0xbb67
    832c:	movw	r2, #58983	; 0xe667
    8330:	movt	r2, #27145	; 0x6a09
    8334:	movw	r3, #62322	; 0xf372
    8338:	movt	r3, #15470	; 0x3c6e
    833c:	movw	r1, #62778	; 0xf53a
    8340:	movt	r1, #42319	; 0xa54f
    8344:	movw	lr, #21119	; 0x527f
    8348:	movt	lr, #20750	; 0x510e
    834c:	movw	r4, #26764	; 0x688c
    8350:	movt	r4, #39685	; 0x9b05
    8354:	movw	r5, #55723	; 0xd9ab
    8358:	movt	r5, #8067	; 0x1f83
    835c:	movw	r6, #52505	; 0xcd19
    8360:	movt	r6, #23520	; 0x5be0
    8364:	stm	r0, {r2, ip}
    8368:	str	r3, [r0, #8]
    836c:	str	r1, [r0, #12]
    8370:	str	lr, [r0, #16]
    8374:	add	r1, r0, #20
    8378:	stm	r1, {r4, r5, r6}
    837c:	mov	r1, #0
    8380:	str	r1, [r0, #32]
    8384:	str	r1, [r0, #36]	; 0x24
    8388:	str	r1, [r0, #40]	; 0x28
    838c:	pop	{r4, r5, r6, sl, fp, pc}

00008390 <rb_sha256_process_bytes>:
    8390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8394:	add	fp, sp, #28
    8398:	sub	sp, sp, #20
    839c:	mov	r4, r2
    83a0:	mov	r5, r1
    83a4:	mov	r8, r0
    83a8:	ldr	r6, [r2, #40]	; 0x28
    83ac:	cmp	r6, #0
    83b0:	beq	8424 <rb_sha256_process_bytes+0x94>
    83b4:	rsb	r7, r6, #128	; 0x80
    83b8:	cmp	r7, r5
    83bc:	movhi	r7, r5
    83c0:	add	r0, r4, r6
    83c4:	add	r0, r0, #44	; 0x2c
    83c8:	mov	r1, r8
    83cc:	mov	r2, r7
    83d0:	bl	5130 <memcpy@plt>
    83d4:	ldr	r0, [r4, #40]	; 0x28
    83d8:	add	r0, r0, r7
    83dc:	str	r0, [r4, #40]	; 0x28
    83e0:	cmp	r0, #65	; 0x41
    83e4:	bcc	841c <rb_sha256_process_bytes+0x8c>
    83e8:	add	r9, r4, #44	; 0x2c
    83ec:	bic	r1, r0, #63	; 0x3f
    83f0:	mov	r0, r9
    83f4:	mov	r2, r4
    83f8:	bl	8648 <rb_sha256_process_block>
    83fc:	ldr	r0, [r4, #40]	; 0x28
    8400:	and	r2, r0, #63	; 0x3f
    8404:	str	r2, [r4, #40]	; 0x28
    8408:	add	r0, r7, r6
    840c:	bic	r0, r0, #63	; 0x3f
    8410:	add	r1, r9, r0
    8414:	mov	r0, r9
    8418:	bl	5130 <memcpy@plt>
    841c:	sub	r5, r5, r7
    8420:	add	r8, r8, r7
    8424:	cmp	r5, #64	; 0x40
    8428:	bcc	8500 <rb_sha256_process_bytes+0x170>
    842c:	tst	r8, #3
    8430:	beq	84e4 <rb_sha256_process_bytes+0x154>
    8434:	cmp	r5, #65	; 0x41
    8438:	bcc	8510 <rb_sha256_process_bytes+0x180>
    843c:	sub	r0, r5, #64	; 0x40
    8440:	str	r0, [sp, #12]
    8444:	add	r7, r4, #44	; 0x2c
    8448:	sub	r0, r5, #65	; 0x41
    844c:	bic	r0, r0, #63	; 0x3f
    8450:	str	r0, [sp, #8]
    8454:	add	r0, r0, #64	; 0x40
    8458:	str	r0, [sp, #4]
    845c:	mov	sl, #48	; 0x30
    8460:	add	r6, r7, #32
    8464:	mov	r0, r8
    8468:	add	r8, r7, #16
    846c:	str	r0, [sp, #16]
    8470:	mov	r9, r0
    8474:	mov	r1, #64	; 0x40
    8478:	vld1.8	{d16-d17}, [r9], r1
    847c:	add	r1, r0, #32
    8480:	add	r2, r0, #48	; 0x30
    8484:	vld1.8	{d18-d19}, [r2]
    8488:	vld1.8	{d20-d21}, [r1]
    848c:	mov	r1, r7
    8490:	vst1.8	{d16-d17}, [r1], sl
    8494:	add	r0, r0, #16
    8498:	vld1.8	{d16-d17}, [r0]
    849c:	vst1.8	{d18-d19}, [r1]
    84a0:	vst1.8	{d20-d21}, [r6]
    84a4:	vst1.8	{d16-d17}, [r8]
    84a8:	mov	r0, r7
    84ac:	mov	r1, #64	; 0x40
    84b0:	mov	r2, r4
    84b4:	bl	8648 <rb_sha256_process_block>
    84b8:	sub	r5, r5, #64	; 0x40
    84bc:	cmp	r5, #64	; 0x40
    84c0:	mov	r0, r9
    84c4:	bhi	8474 <rb_sha256_process_bytes+0xe4>
    84c8:	ldr	r0, [sp, #12]
    84cc:	ldr	r1, [sp, #8]
    84d0:	sub	r5, r0, r1
    84d4:	ldr	r8, [sp, #16]
    84d8:	ldr	r0, [sp, #4]
    84dc:	add	r8, r8, r0
    84e0:	b	8514 <rb_sha256_process_bytes+0x184>
    84e4:	bic	r6, r5, #63	; 0x3f
    84e8:	mov	r0, r8
    84ec:	mov	r1, r6
    84f0:	mov	r2, r4
    84f4:	bl	8648 <rb_sha256_process_block>
    84f8:	add	r8, r8, r6
    84fc:	and	r5, r5, #63	; 0x3f
    8500:	cmp	r5, #0
    8504:	bne	8514 <rb_sha256_process_bytes+0x184>
    8508:	sub	sp, fp, #28
    850c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8510:	mov	r5, #64	; 0x40
    8514:	ldr	r6, [r4, #40]	; 0x28
    8518:	add	r0, r4, r6
    851c:	add	r0, r0, #44	; 0x2c
    8520:	mov	r1, r8
    8524:	mov	r2, r5
    8528:	bl	5130 <memcpy@plt>
    852c:	add	r5, r6, r5
    8530:	cmp	r5, #64	; 0x40
    8534:	bcc	8560 <rb_sha256_process_bytes+0x1d0>
    8538:	add	r6, r4, #44	; 0x2c
    853c:	mov	r0, r6
    8540:	mov	r1, #64	; 0x40
    8544:	mov	r2, r4
    8548:	bl	8648 <rb_sha256_process_block>
    854c:	add	r1, r4, #108	; 0x6c
    8550:	sub	r5, r5, #64	; 0x40
    8554:	mov	r0, r6
    8558:	mov	r2, r5
    855c:	bl	5130 <memcpy@plt>
    8560:	str	r5, [r4, #40]	; 0x28
    8564:	sub	sp, fp, #28
    8568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000856c <rb_sha256_finish_ctx>:
    856c:	push	{r4, r5, r6, r7, fp, lr}
    8570:	add	fp, sp, #16
    8574:	mov	r4, r1
    8578:	mov	r5, r0
    857c:	ldr	r0, [r0, #32]
    8580:	ldr	r1, [r5, #40]	; 0x28
    8584:	adds	r0, r0, r1
    8588:	str	r0, [r5, #32]
    858c:	ldrcs	r0, [r5, #36]	; 0x24
    8590:	addcs	r0, r0, #1
    8594:	strcs	r0, [r5, #36]	; 0x24
    8598:	add	r6, r5, #44	; 0x2c
    859c:	add	r0, r6, r1
    85a0:	mov	r7, #56	; 0x38
    85a4:	cmp	r1, #55	; 0x37
    85a8:	movwhi	r7, #120	; 0x78
    85ac:	sub	r2, r7, r1
    85b0:	ldr	r1, [pc, #140]	; 8644 <rb_sha256_finish_ctx+0xd8>
    85b4:	add	r1, pc, r1
    85b8:	bl	5130 <memcpy@plt>
    85bc:	ldr	r0, [r5, #32]
    85c0:	mov	r1, #65280	; 0xff00
    85c4:	and	r2, r1, r0, lsr #5
    85c8:	lsl	r3, r0, #11
    85cc:	uxtb16	r3, r3
    85d0:	orr	r3, r3, r0, lsl #27
    85d4:	orr	r2, r3, r2
    85d8:	ubfx	r3, r0, #21, #8
    85dc:	orr	r2, r2, r3
    85e0:	orr	r3, r7, #4
    85e4:	str	r2, [r6, r3]
    85e8:	ldr	r2, [r5, #36]	; 0x24
    85ec:	movw	r3, #8160	; 0x1fe0
    85f0:	and	r3, r2, r3
    85f4:	and	r1, r1, r2, lsr #5
    85f8:	orr	r1, r1, r3, lsl #11
    85fc:	ubfx	r3, r2, #21, #8
    8600:	orr	r1, r1, r3
    8604:	lsl	r2, r2, #3
    8608:	orr	r0, r2, r0, lsr #29
    860c:	orr	r0, r1, r0, lsl #24
    8610:	str	r0, [r6, r7]
    8614:	add	r1, r7, #8
    8618:	mov	r0, r6
    861c:	mov	r2, r5
    8620:	bl	8648 <rb_sha256_process_block>
    8624:	mov	r0, #0
    8628:	ldr	r1, [r5, r0, lsl #2]
    862c:	rev	r1, r1
    8630:	str	r1, [r4, r0, lsl #2]
    8634:	add	r0, r0, #1
    8638:	cmp	r0, #8
    863c:	bne	8628 <rb_sha256_finish_ctx+0xbc>
    8640:	pop	{r4, r5, r6, r7, fp, pc}
    8644:	.word	0x0000cd0c

00008648 <rb_sha256_process_block>:
    8648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    864c:	add	fp, sp, #28
    8650:	sub	sp, sp, #304	; 0x130
    8654:	mov	r4, r0
    8658:	ldr	r0, [r2, #32]
    865c:	adds	r0, r0, r1
    8660:	str	r0, [r2, #32]
    8664:	lsr	r5, r1, #2
    8668:	ldr	r8, [r2]
    866c:	ldr	r0, [r2, #4]
    8670:	str	r0, [sp, #40]	; 0x28
    8674:	ldr	lr, [r2, #8]
    8678:	add	ip, r2, #12
    867c:	ldm	ip, {r0, r9, ip}
    8680:	ldr	r1, [r2, #24]
    8684:	ldr	sl, [r2, #28]
    8688:	bcc	86a8 <rb_sha256_process_block+0x60>
    868c:	mov	r3, r0
    8690:	mov	r0, r1
    8694:	ldr	r1, [r2, #36]	; 0x24
    8698:	add	r1, r1, #1
    869c:	str	r1, [r2, #36]	; 0x24
    86a0:	mov	r1, r0
    86a4:	mov	r0, r3
    86a8:	str	r2, [sp]
    86ac:	cmp	r5, #0
    86b0:	beq	8858 <rb_sha256_process_block+0x210>
    86b4:	add	r6, sp, #44	; 0x2c
    86b8:	str	r5, [sp, #4]
    86bc:	mov	r2, #0
    86c0:	ldr	r3, [r4, r2, lsl #2]
    86c4:	rev	r3, r3
    86c8:	str	r3, [r6, r2, lsl #2]
    86cc:	add	r2, r2, #1
    86d0:	cmp	r2, #16
    86d4:	bne	86c0 <rb_sha256_process_block+0x78>
    86d8:	str	r4, [sp, #8]
    86dc:	mov	r2, #0
    86e0:	add	r3, sp, #44	; 0x2c
    86e4:	mov	r4, r3
    86e8:	ldr	r3, [r3, r2]
    86ec:	add	r7, r4, r2
    86f0:	ldr	r6, [r7, #4]
    86f4:	ldr	r5, [r7, #36]	; 0x24
    86f8:	ldr	r4, [r7, #56]	; 0x38
    86fc:	add	r3, r3, r5
    8700:	ror	r5, r4, #19
    8704:	eor	r5, r5, r4, lsr #10
    8708:	eor	r5, r5, r4, ror #17
    870c:	add	r3, r3, r5
    8710:	ror	r5, r6, #18
    8714:	eor	r5, r5, r6, lsr #3
    8718:	eor	r6, r5, r6, ror #7
    871c:	add	r3, r3, r6
    8720:	str	r3, [r7, #64]	; 0x40
    8724:	add	r2, r2, #4
    8728:	cmp	r2, #192	; 0xc0
    872c:	bne	86e0 <rb_sha256_process_block+0x98>
    8730:	mov	r2, #0
    8734:	str	r8, [sp, #12]
    8738:	ldr	r6, [sp, #40]	; 0x28
    873c:	str	lr, [sp, #16]
    8740:	str	r0, [sp, #20]
    8744:	mov	r7, r0
    8748:	str	r9, [sp, #24]
    874c:	str	ip, [sp, #28]
    8750:	str	r1, [sp, #32]
    8754:	mov	r3, r1
    8758:	str	sl, [sp, #36]	; 0x24
    875c:	mov	r4, r3
    8760:	mov	r3, ip
    8764:	mov	ip, r9
    8768:	mov	r5, lr
    876c:	mov	lr, r6
    8770:	mov	r6, r8
    8774:	and	r1, lr, r5
    8778:	eor	r0, lr, r5
    877c:	and	r0, r8, r0
    8780:	eor	r0, r0, r1
    8784:	ror	r1, r8, #2
    8788:	eor	r1, r1, r8, ror #13
    878c:	eor	r1, r1, r8, ror #22
    8790:	add	r8, r1, r0
    8794:	bic	r1, r4, r9
    8798:	and	r0, r9, r3
    879c:	orr	r0, r0, r1
    87a0:	add	r0, r0, sl
    87a4:	ror	r1, r9, #6
    87a8:	eor	r1, r1, r9, ror #11
    87ac:	eor	r1, r1, r9, ror #25
    87b0:	add	r0, r0, r1
    87b4:	ldr	r1, [pc, #200]	; 8884 <rb_sha256_process_block+0x23c>
    87b8:	add	r1, pc, r1
    87bc:	ldr	r1, [r1, r2, lsl #2]
    87c0:	add	r0, r0, r1
    87c4:	add	r1, sp, #44	; 0x2c
    87c8:	ldr	r1, [r1, r2, lsl #2]
    87cc:	add	r0, r0, r1
    87d0:	add	r8, r8, r0
    87d4:	add	r9, r0, r7
    87d8:	add	r2, r2, #1
    87dc:	cmp	r2, #64	; 0x40
    87e0:	mov	r7, r5
    87e4:	mov	sl, r4
    87e8:	bne	875c <rb_sha256_process_block+0x114>
    87ec:	ldr	sl, [sp, #36]	; 0x24
    87f0:	add	sl, r4, sl
    87f4:	ldr	r1, [sp, #32]
    87f8:	add	r1, r3, r1
    87fc:	ldr	r0, [sp, #28]
    8800:	add	r0, ip, r0
    8804:	mov	ip, r0
    8808:	ldr	r0, [sp, #24]
    880c:	add	r0, r9, r0
    8810:	mov	r9, r0
    8814:	ldr	r0, [sp, #20]
    8818:	add	r0, r5, r0
    881c:	ldr	r2, [sp, #16]
    8820:	add	r2, lr, r2
    8824:	mov	lr, r2
    8828:	ldr	r2, [sp, #40]	; 0x28
    882c:	add	r2, r6, r2
    8830:	str	r2, [sp, #40]	; 0x28
    8834:	ldr	r2, [sp, #12]
    8838:	add	r2, r8, r2
    883c:	mov	r8, r2
    8840:	ldr	r5, [sp, #4]
    8844:	subs	r5, r5, #16
    8848:	ldr	r4, [sp, #8]
    884c:	add	r4, r4, #64	; 0x40
    8850:	add	r6, sp, #44	; 0x2c
    8854:	bne	86b8 <rb_sha256_process_block+0x70>
    8858:	mov	r2, r0
    885c:	ldr	r0, [sp]
    8860:	str	r8, [r0]
    8864:	ldr	r3, [sp, #40]	; 0x28
    8868:	stmib	r0, {r3, lr}
    886c:	add	r3, r0, #12
    8870:	stm	r3, {r2, r9, ip}
    8874:	str	r1, [r0, #24]
    8878:	str	sl, [r0, #28]
    887c:	sub	sp, fp, #28
    8880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8884:	.word	0x0000ca04

00008888 <rb_sha512_crypt_r>:
    8888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    888c:	add	fp, sp, #28
    8890:	sub	sp, sp, #868	; 0x364
    8894:	str	r3, [fp, #-888]	; 0xfffffc88
    8898:	mov	r9, r2
    889c:	mov	r6, r1
    88a0:	mov	r4, r0
    88a4:	ldr	r0, [pc, #3640]	; 96e4 <rb_sha512_crypt_r+0xe5c>
    88a8:	add	r0, pc, r0
    88ac:	mov	r2, #3
    88b0:	bl	552c <strncmp@plt>
    88b4:	cmp	r0, #0
    88b8:	addeq	r6, r6, #3
    88bc:	ldr	r1, [pc, #3620]	; 96e8 <rb_sha512_crypt_r+0xe60>
    88c0:	add	r1, pc, r1
    88c4:	mov	r0, r6
    88c8:	mov	r2, #7
    88cc:	bl	552c <strncmp@plt>
    88d0:	mov	r5, #0
    88d4:	movw	r1, #5000	; 0x1388
    88d8:	str	r1, [fp, #-860]	; 0xfffffca4
    88dc:	cmp	r0, #0
    88e0:	beq	88ec <rb_sha512_crypt_r+0x64>
    88e4:	mov	r0, #0
    88e8:	b	8930 <rb_sha512_crypt_r+0xa8>
    88ec:	add	r0, r6, #7
    88f0:	sub	r1, fp, #504	; 0x1f8
    88f4:	mov	r2, #10
    88f8:	bl	5124 <strtoul@plt>
    88fc:	ldr	r1, [fp, #-504]	; 0xfffffe08
    8900:	ldrb	r2, [r1]
    8904:	cmp	r2, #36	; 0x24
    8908:	bne	96c0 <rb_sha512_crypt_r+0xe38>
    890c:	movw	r2, #51711	; 0xc9ff
    8910:	movt	r2, #15258	; 0x3b9a
    8914:	cmp	r0, r2
    8918:	movcc	r2, r0
    891c:	cmp	r2, #1000	; 0x3e8
    8920:	movls	r2, #1000	; 0x3e8
    8924:	str	r2, [fp, #-860]	; 0xfffffca4
    8928:	add	r6, r1, #1
    892c:	mov	r0, #1
    8930:	str	r0, [fp, #-892]	; 0xfffffc84
    8934:	ldr	r1, [pc, #3504]	; 96ec <rb_sha512_crypt_r+0xe64>
    8938:	add	r1, pc, r1
    893c:	mov	r0, r6
    8940:	bl	54fc <strcspn@plt>
    8944:	mov	sl, r0
    8948:	cmp	r0, #16
    894c:	str	r0, [fp, #-896]	; 0xfffffc80
    8950:	movcs	sl, #16
    8954:	mov	r0, r4
    8958:	bl	510c <strlen@plt>
    895c:	mov	r7, r0
    8960:	tst	r4, #7
    8964:	beq	8990 <rb_sha512_crypt_r+0x108>
    8968:	add	r0, r7, #15
    896c:	bic	r0, r0, #7
    8970:	sub	r0, sp, r0
    8974:	add	r5, r0, #8
    8978:	mov	sp, r0
    897c:	mov	r0, r5
    8980:	mov	r1, r4
    8984:	mov	r2, r7
    8988:	bl	5130 <memcpy@plt>
    898c:	mov	r4, r5
    8990:	tst	r6, #7
    8994:	str	r5, [fp, #-880]	; 0xfffffc90
    8998:	beq	89cc <rb_sha512_crypt_r+0x144>
    899c:	add	r0, sl, #15
    89a0:	bic	r0, r0, #7
    89a4:	sub	r0, sp, r0
    89a8:	add	r5, r0, #8
    89ac:	mov	sp, r0
    89b0:	mov	r0, r5
    89b4:	mov	r1, r6
    89b8:	mov	r2, sl
    89bc:	bl	5130 <memcpy@plt>
    89c0:	str	r5, [fp, #-884]	; 0xfffffc8c
    89c4:	mov	r6, r5
    89c8:	b	89d4 <rb_sha512_crypt_r+0x14c>
    89cc:	mov	r0, #0
    89d0:	str	r0, [fp, #-884]	; 0xfffffc8c
    89d4:	sub	r5, fp, #504	; 0x1f8
    89d8:	mov	r0, r5
    89dc:	bl	9700 <rb_sha512_init_ctx>
    89e0:	mov	r0, r4
    89e4:	mov	r1, r7
    89e8:	mov	r2, r5
    89ec:	bl	97dc <rb_sha512_process_bytes>
    89f0:	mov	r0, r6
    89f4:	mov	r1, sl
    89f8:	mov	r2, r5
    89fc:	bl	97dc <rb_sha512_process_bytes>
    8a00:	sub	r5, fp, #848	; 0x350
    8a04:	mov	r0, r5
    8a08:	bl	9700 <rb_sha512_init_ctx>
    8a0c:	mov	r0, r4
    8a10:	mov	r1, r7
    8a14:	mov	r2, r5
    8a18:	bl	97dc <rb_sha512_process_bytes>
    8a1c:	str	r6, [fp, #-872]	; 0xfffffc98
    8a20:	mov	r0, r6
    8a24:	mov	r1, sl
    8a28:	mov	r2, r5
    8a2c:	bl	97dc <rb_sha512_process_bytes>
    8a30:	mov	r0, r4
    8a34:	mov	r1, r7
    8a38:	mov	r2, r5
    8a3c:	bl	97dc <rb_sha512_process_bytes>
    8a40:	sub	r1, fp, #96	; 0x60
    8a44:	mov	r0, r5
    8a48:	bl	9990 <rb_sha512_finish_ctx>
    8a4c:	cmp	r7, #65	; 0x41
    8a50:	mov	r1, r7
    8a54:	str	r7, [fp, #-852]	; 0xfffffcac
    8a58:	bcc	8a94 <rb_sha512_crypt_r+0x20c>
    8a5c:	sub	r0, r7, #65	; 0x41
    8a60:	bic	r8, r0, #63	; 0x3f
    8a64:	sub	r5, fp, #96	; 0x60
    8a68:	sub	r6, fp, #504	; 0x1f8
    8a6c:	mov	r0, r5
    8a70:	mov	r1, #64	; 0x40
    8a74:	mov	r2, r6
    8a78:	bl	97dc <rb_sha512_process_bytes>
    8a7c:	sub	r7, r7, #64	; 0x40
    8a80:	cmp	r7, #64	; 0x40
    8a84:	bhi	8a6c <rb_sha512_crypt_r+0x1e4>
    8a88:	ldr	r7, [fp, #-852]	; 0xfffffcac
    8a8c:	sub	r0, r7, #64	; 0x40
    8a90:	sub	r1, r0, r8
    8a94:	sub	r0, fp, #96	; 0x60
    8a98:	sub	r2, fp, #504	; 0x1f8
    8a9c:	bl	97dc <rb_sha512_process_bytes>
    8aa0:	cmp	r7, #0
    8aa4:	beq	8aec <rb_sha512_crypt_r+0x264>
    8aa8:	sub	r5, fp, #504	; 0x1f8
    8aac:	mov	r7, #0
    8ab0:	sub	r8, fp, #96	; 0x60
    8ab4:	ldr	r6, [fp, #-852]	; 0xfffffcac
    8ab8:	tst	r6, #1
    8abc:	bne	8acc <rb_sha512_crypt_r+0x244>
    8ac0:	mov	r0, r4
    8ac4:	ldr	r1, [fp, #-852]	; 0xfffffcac
    8ac8:	b	8ad4 <rb_sha512_crypt_r+0x24c>
    8acc:	mov	r0, r8
    8ad0:	mov	r1, #64	; 0x40
    8ad4:	mov	r2, r5
    8ad8:	bl	97dc <rb_sha512_process_bytes>
    8adc:	lsr	r0, r6, #1
    8ae0:	cmp	r7, r6, lsr #1
    8ae4:	mov	r6, r0
    8ae8:	bne	8ab8 <rb_sha512_crypt_r+0x230>
    8aec:	sub	r0, fp, #504	; 0x1f8
    8af0:	sub	r1, fp, #96	; 0x60
    8af4:	bl	9990 <rb_sha512_finish_ctx>
    8af8:	sub	r0, fp, #848	; 0x350
    8afc:	bl	9700 <rb_sha512_init_ctx>
    8b00:	ldr	r7, [fp, #-852]	; 0xfffffcac
    8b04:	cmp	r7, #0
    8b08:	str	r9, [fp, #-876]	; 0xfffffc94
    8b0c:	beq	8bd0 <rb_sha512_crypt_r+0x348>
    8b10:	sub	r5, fp, #848	; 0x350
    8b14:	mov	r6, r7
    8b18:	mov	r0, r4
    8b1c:	mov	r1, r7
    8b20:	mov	r2, r5
    8b24:	bl	97dc <rb_sha512_process_bytes>
    8b28:	subs	r6, r6, #1
    8b2c:	bne	8b18 <rb_sha512_crypt_r+0x290>
    8b30:	sub	r0, fp, #848	; 0x350
    8b34:	sub	r8, fp, #160	; 0xa0
    8b38:	mov	r1, r8
    8b3c:	bl	9990 <rb_sha512_finish_ctx>
    8b40:	add	r0, r7, #7
    8b44:	bic	r0, r0, #7
    8b48:	sub	ip, sp, r0
    8b4c:	mov	sp, ip
    8b50:	cmp	r7, #64	; 0x40
    8b54:	str	ip, [fp, #-856]	; 0xfffffca8
    8b58:	bcc	8bf8 <rb_sha512_crypt_r+0x370>
    8b5c:	sub	r0, r7, #64	; 0x40
    8b60:	str	r0, [fp, #-864]	; 0xfffffca0
    8b64:	bic	lr, r0, #63	; 0x3f
    8b68:	add	r0, ip, lr
    8b6c:	add	r0, r0, #64	; 0x40
    8b70:	mov	r3, #0
    8b74:	mov	r9, r7
    8b78:	add	r7, r8, #32
    8b7c:	mov	r6, #48	; 0x30
    8b80:	add	r4, r8, #16
    8b84:	sub	r1, ip, r3
    8b88:	mov	r5, r8
    8b8c:	vld1.64	{d16-d17}, [r5], r6
    8b90:	vld1.64	{d18-d19}, [r7]
    8b94:	add	r2, r1, #32
    8b98:	vld1.64	{d20-d21}, [r4]
    8b9c:	vld1.64	{d22-d23}, [r5]
    8ba0:	vst1.64	{d18-d19}, [r2]
    8ba4:	add	r2, r1, #16
    8ba8:	vst1.64	{d20-d21}, [r2]
    8bac:	vst1.64	{d16-d17}, [r1], r6
    8bb0:	vst1.64	{d22-d23}, [r1]
    8bb4:	sub	r3, r3, #64	; 0x40
    8bb8:	add	r1, r9, r3
    8bbc:	cmp	r1, #63	; 0x3f
    8bc0:	bhi	8b84 <rb_sha512_crypt_r+0x2fc>
    8bc4:	ldr	r1, [fp, #-864]	; 0xfffffca0
    8bc8:	sub	r2, r1, lr
    8bcc:	b	8c00 <rb_sha512_crypt_r+0x378>
    8bd0:	sub	r0, fp, #848	; 0x350
    8bd4:	sub	r1, fp, #160	; 0xa0
    8bd8:	bl	9990 <rb_sha512_finish_ctx>
    8bdc:	add	r0, r7, #7
    8be0:	bic	r0, r0, #7
    8be4:	sub	r0, sp, r0
    8be8:	mov	sp, r0
    8bec:	mov	r2, #0
    8bf0:	str	r0, [fp, #-856]	; 0xfffffca8
    8bf4:	b	8c00 <rb_sha512_crypt_r+0x378>
    8bf8:	mov	r0, ip
    8bfc:	mov	r2, r7
    8c00:	sub	r1, fp, #160	; 0xa0
    8c04:	bl	5130 <memcpy@plt>
    8c08:	sub	r5, fp, #848	; 0x350
    8c0c:	mov	r0, r5
    8c10:	bl	9700 <rb_sha512_init_ctx>
    8c14:	mov	r4, #0
    8c18:	ldr	r6, [fp, #-872]	; 0xfffffc98
    8c1c:	mov	r0, r6
    8c20:	mov	r1, sl
    8c24:	mov	r2, r5
    8c28:	bl	97dc <rb_sha512_process_bytes>
    8c2c:	add	r4, r4, #1
    8c30:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    8c34:	add	r0, r0, #16
    8c38:	cmp	r4, r0
    8c3c:	bcc	8c1c <rb_sha512_crypt_r+0x394>
    8c40:	sub	r0, fp, #848	; 0x350
    8c44:	sub	r8, fp, #160	; 0xa0
    8c48:	mov	r1, r8
    8c4c:	bl	9990 <rb_sha512_finish_ctx>
    8c50:	add	r0, sl, #7
    8c54:	bic	r0, r0, #7
    8c58:	sub	r0, sp, r0
    8c5c:	mov	sp, r0
    8c60:	cmp	sl, #64	; 0x40
    8c64:	mov	r2, sl
    8c68:	bcc	8cd8 <rb_sha512_crypt_r+0x450>
    8c6c:	ldr	r6, [fp, #-896]	; 0xfffffc80
    8c70:	mvn	r2, r6
    8c74:	cmn	r2, #17
    8c78:	mvnls	r2, #16
    8c7c:	mvn	r1, #64	; 0x40
    8c80:	sub	ip, r1, r2
    8c84:	add	r1, r8, #32
    8c88:	mov	lr, #48	; 0x30
    8c8c:	add	r3, r8, #16
    8c90:	mov	r7, #64	; 0x40
    8c94:	mov	r4, r0
    8c98:	mov	r5, r8
    8c9c:	vld1.8	{d16-d17}, [r5], lr
    8ca0:	vld1.64	{d18-d19}, [r1]
    8ca4:	add	r2, r4, #32
    8ca8:	vld1.64	{d20-d21}, [r3]
    8cac:	vld1.64	{d22-d23}, [r5]
    8cb0:	vst1.8	{d18-d19}, [r2]
    8cb4:	add	r2, r4, #16
    8cb8:	vst1.8	{d20-d21}, [r2]
    8cbc:	add	r2, r4, #48	; 0x30
    8cc0:	vst1.8	{d22-d23}, [r2]
    8cc4:	vst1.8	{d16-d17}, [r4], r7
    8cc8:	sub	r6, r6, #64	; 0x40
    8ccc:	cmp	r6, #63	; 0x3f
    8cd0:	bhi	8c98 <rb_sha512_crypt_r+0x410>
    8cd4:	add	r2, ip, #64	; 0x40
    8cd8:	str	sl, [fp, #-864]	; 0xfffffca0
    8cdc:	sub	r1, fp, #160	; 0xa0
    8ce0:	str	r0, [fp, #-868]	; 0xfffffc9c
    8ce4:	bl	5130 <memcpy@plt>
    8ce8:	ldr	r0, [fp, #-860]	; 0xfffffca4
    8cec:	cmp	r0, #0
    8cf0:	beq	8de0 <rb_sha512_crypt_r+0x558>
    8cf4:	mov	r5, #0
    8cf8:	sub	r8, fp, #504	; 0x1f8
    8cfc:	sub	sl, fp, #96	; 0x60
    8d00:	mov	r0, r8
    8d04:	bl	9700 <rb_sha512_init_ctx>
    8d08:	movw	r0, #18725	; 0x4925
    8d0c:	movt	r0, #9362	; 0x2492
    8d10:	umull	r0, r1, r5, r0
    8d14:	sub	r0, r5, r1
    8d18:	add	r9, r1, r0, lsr #1
    8d1c:	lsr	r0, r9, #2
    8d20:	lsl	r6, r0, #3
    8d24:	movw	r0, #43691	; 0xaaab
    8d28:	movt	r0, #43690	; 0xaaaa
    8d2c:	umull	r0, r1, r5, r0
    8d30:	lsr	r0, r1, #1
    8d34:	add	r4, r0, r0, lsl #1
    8d38:	ands	r7, r5, #1
    8d3c:	beq	8d4c <rb_sha512_crypt_r+0x4c4>
    8d40:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8d44:	ldr	r1, [fp, #-852]	; 0xfffffcac
    8d48:	b	8d54 <rb_sha512_crypt_r+0x4cc>
    8d4c:	mov	r0, sl
    8d50:	mov	r1, #64	; 0x40
    8d54:	mov	r2, r8
    8d58:	bl	97dc <rb_sha512_process_bytes>
    8d5c:	sub	r6, r6, r9, lsr #2
    8d60:	cmp	r4, r5
    8d64:	bne	8d84 <rb_sha512_crypt_r+0x4fc>
    8d68:	cmp	r6, r5
    8d6c:	bne	8d9c <rb_sha512_crypt_r+0x514>
    8d70:	cmp	r7, #0
    8d74:	beq	8db4 <rb_sha512_crypt_r+0x52c>
    8d78:	mov	r0, sl
    8d7c:	mov	r1, #64	; 0x40
    8d80:	b	8dbc <rb_sha512_crypt_r+0x534>
    8d84:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    8d88:	ldr	r1, [fp, #-864]	; 0xfffffca0
    8d8c:	mov	r2, r8
    8d90:	bl	97dc <rb_sha512_process_bytes>
    8d94:	cmp	r6, r5
    8d98:	beq	8d70 <rb_sha512_crypt_r+0x4e8>
    8d9c:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8da0:	ldr	r1, [fp, #-852]	; 0xfffffcac
    8da4:	mov	r2, r8
    8da8:	bl	97dc <rb_sha512_process_bytes>
    8dac:	cmp	r7, #0
    8db0:	bne	8d78 <rb_sha512_crypt_r+0x4f0>
    8db4:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8db8:	ldr	r1, [fp, #-852]	; 0xfffffcac
    8dbc:	mov	r2, r8
    8dc0:	bl	97dc <rb_sha512_process_bytes>
    8dc4:	mov	r0, r8
    8dc8:	mov	r1, sl
    8dcc:	bl	9990 <rb_sha512_finish_ctx>
    8dd0:	add	r5, r5, #1
    8dd4:	ldr	r0, [fp, #-860]	; 0xfffffca4
    8dd8:	cmp	r0, r5
    8ddc:	bne	8d00 <rb_sha512_crypt_r+0x478>
    8de0:	ldr	r4, [fp, #-888]	; 0xfffffc88
    8de4:	bic	r6, r4, r4, asr #31
    8de8:	ldr	r7, [fp, #-876]	; 0xfffffc94
    8dec:	mov	r0, r7
    8df0:	mov	r1, #0
    8df4:	mov	r2, r6
    8df8:	bl	4f68 <memset@plt>
    8dfc:	ldr	r1, [pc, #2284]	; 96f0 <rb_sha512_crypt_r+0xe68>
    8e00:	add	r1, pc, r1
    8e04:	mov	r0, r7
    8e08:	mov	r2, r6
    8e0c:	bl	4ec0 <strncpy@plt>
    8e10:	mov	r0, r7
    8e14:	bl	510c <strlen@plt>
    8e18:	adds	r5, r7, r0
    8e1c:	addeq	r5, r7, r6
    8e20:	sub	r8, r4, #3
    8e24:	ldr	r0, [fp, #-892]	; 0xfffffc84
    8e28:	cmp	r0, #0
    8e2c:	beq	8e64 <rb_sha512_crypt_r+0x5dc>
    8e30:	sub	sp, sp, #8
    8e34:	ldr	r0, [fp, #-860]	; 0xfffffca4
    8e38:	str	r0, [sp]
    8e3c:	bic	r1, r8, r8, asr #31
    8e40:	ldr	r2, [pc, #2220]	; 96f4 <rb_sha512_crypt_r+0xe6c>
    8e44:	add	r2, pc, r2
    8e48:	ldr	r3, [pc, #2216]	; 96f8 <rb_sha512_crypt_r+0xe70>
    8e4c:	add	r3, pc, r3
    8e50:	mov	r0, r5
    8e54:	bl	54cc <snprintf@plt>
    8e58:	add	sp, sp, #8
    8e5c:	sub	r8, r8, r0
    8e60:	add	r5, r5, r0
    8e64:	ldr	sl, [fp, #-864]	; 0xfffffca0
    8e68:	bic	r4, r8, r8, asr #31
    8e6c:	cmp	r4, sl
    8e70:	mov	r6, sl
    8e74:	movcc	r6, r4
    8e78:	mov	r0, #0
    8e7c:	str	r0, [fp, #-860]	; 0xfffffca4
    8e80:	mov	r0, r5
    8e84:	mov	r1, #0
    8e88:	mov	r2, r6
    8e8c:	bl	4f68 <memset@plt>
    8e90:	mov	r0, r5
    8e94:	ldr	r1, [fp, #-872]	; 0xfffffc98
    8e98:	mov	r2, r6
    8e9c:	bl	4ec0 <strncpy@plt>
    8ea0:	mov	r0, r7
    8ea4:	bl	510c <strlen@plt>
    8ea8:	adds	r5, r7, r0
    8eac:	addeq	r5, r7, sl
    8eb0:	sub	r0, r8, r6
    8eb4:	cmp	r0, #1
    8eb8:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    8ebc:	mov	r0, #36	; 0x24
    8ec0:	strb	r0, [r5]
    8ec4:	beq	95f4 <rb_sha512_crypt_r+0xd6c>
    8ec8:	mvn	lr, r4
    8ecc:	ldr	r0, [fp, #-896]	; 0xfffffc80
    8ed0:	mvn	r9, r0
    8ed4:	cmp	lr, r9
    8ed8:	mov	r0, r9
    8edc:	movhi	r0, lr
    8ee0:	cmn	r0, #17
    8ee4:	mvnls	r0, #16
    8ee8:	add	r7, r8, r0
    8eec:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    8ef0:	ldrb	r2, [fp, #-75]	; 0xffffffb5
    8ef4:	ldrb	r3, [fp, #-54]	; 0xffffffca
    8ef8:	lsl	r2, r2, #8
    8efc:	orr	r0, r2, r0, lsl #16
    8f00:	orr	r0, r0, r3
    8f04:	add	r3, r5, #1
    8f08:	mov	r6, #0
    8f0c:	ldr	ip, [pc, #2024]	; 96fc <rb_sha512_crypt_r+0xe74>
    8f10:	add	ip, pc, ip
    8f14:	and	r2, r0, #63	; 0x3f
    8f18:	ldrb	r2, [ip, r2]
    8f1c:	strb	r2, [r3, -r6]
    8f20:	add	r4, r7, r6
    8f24:	sub	r2, r6, #1
    8f28:	cmp	r4, #2
    8f2c:	blt	8f44 <rb_sha512_crypt_r+0x6bc>
    8f30:	add	r4, r6, #4
    8f34:	lsr	r0, r0, #6
    8f38:	cmp	r4, #1
    8f3c:	mov	r6, r2
    8f40:	bhi	8f14 <rb_sha512_crypt_r+0x68c>
    8f44:	cmp	lr, r9
    8f48:	mov	r4, r9
    8f4c:	movhi	r4, lr
    8f50:	mvn	r0, #16
    8f54:	cmn	r4, #17
    8f58:	movls	r4, r0
    8f5c:	add	r4, r8, r4
    8f60:	add	r4, r4, r2
    8f64:	add	r4, r4, #1
    8f68:	cmp	r4, #2
    8f6c:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    8f70:	cmp	lr, r9
    8f74:	mov	r4, r9
    8f78:	movhi	r4, lr
    8f7c:	cmn	r4, #17
    8f80:	movhi	r0, r4
    8f84:	add	r7, r8, r0
    8f88:	ldrb	r0, [fp, #-95]	; 0xffffffa1
    8f8c:	ldrb	r4, [fp, #-74]	; 0xffffffb6
    8f90:	ldrb	r6, [fp, #-53]	; 0xffffffcb
    8f94:	lsl	r6, r6, #8
    8f98:	orr	r4, r6, r4, lsl #16
    8f9c:	orr	r4, r4, r0
    8fa0:	mvn	r0, #0
    8fa4:	and	r6, r4, #63	; 0x3f
    8fa8:	ldrb	r6, [ip, r6]
    8fac:	sub	r1, r5, r2
    8fb0:	strb	r6, [r1, #1]
    8fb4:	add	r1, r7, r2
    8fb8:	sub	r2, r2, #1
    8fbc:	cmp	r1, #2
    8fc0:	blt	8fd8 <rb_sha512_crypt_r+0x750>
    8fc4:	add	r1, r0, #5
    8fc8:	sub	r0, r0, #1
    8fcc:	lsr	r4, r4, #6
    8fd0:	cmp	r1, #1
    8fd4:	bhi	8fa4 <rb_sha512_crypt_r+0x71c>
    8fd8:	cmp	lr, r9
    8fdc:	mov	r1, r9
    8fe0:	movhi	r1, lr
    8fe4:	mvn	r0, #16
    8fe8:	cmn	r1, #17
    8fec:	movls	r1, r0
    8ff0:	add	r1, r8, r1
    8ff4:	add	r1, r1, r2
    8ff8:	add	r1, r1, #1
    8ffc:	cmp	r1, #2
    9000:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9004:	cmp	lr, r9
    9008:	mov	r1, r9
    900c:	movhi	r1, lr
    9010:	cmn	r1, #17
    9014:	movhi	r0, r1
    9018:	add	r7, r8, r0
    901c:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    9020:	ldrb	r1, [fp, #-73]	; 0xffffffb7
    9024:	ldrb	r4, [fp, #-52]	; 0xffffffcc
    9028:	lsl	r0, r0, #8
    902c:	orr	r0, r0, r4, lsl #16
    9030:	orr	r0, r0, r1
    9034:	mov	r5, #4
    9038:	and	r1, r0, #63	; 0x3f
    903c:	ldrb	r1, [ip, r1]
    9040:	strb	r1, [r3, -r2]
    9044:	add	r1, r7, r2
    9048:	sub	r2, r2, #1
    904c:	cmp	r1, #2
    9050:	blt	9060 <rb_sha512_crypt_r+0x7d8>
    9054:	lsr	r0, r0, #6
    9058:	subs	r5, r5, #1
    905c:	bhi	9038 <rb_sha512_crypt_r+0x7b0>
    9060:	cmp	lr, r9
    9064:	movhi	r9, lr
    9068:	cmn	r9, #17
    906c:	mvnls	r9, #16
    9070:	add	r0, r8, r9
    9074:	add	r0, r0, r2
    9078:	add	r1, r0, #1
    907c:	cmp	r1, #2
    9080:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9084:	sub	r2, r3, r2
    9088:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    908c:	ldrb	r3, [fp, #-72]	; 0xffffffb8
    9090:	ldrb	r7, [fp, #-51]	; 0xffffffcd
    9094:	lsl	r3, r3, #8
    9098:	orr	r0, r3, r0, lsl #16
    909c:	orr	r3, r0, r7
    90a0:	mov	r0, #4
    90a4:	and	r7, r3, #63	; 0x3f
    90a8:	ldrb	r7, [ip, r7]
    90ac:	strb	r7, [r2], #1
    90b0:	sub	r1, r1, #1
    90b4:	cmp	r1, #2
    90b8:	blt	90c8 <rb_sha512_crypt_r+0x840>
    90bc:	lsr	r3, r3, #6
    90c0:	subs	r0, r0, #1
    90c4:	bhi	90a4 <rb_sha512_crypt_r+0x81c>
    90c8:	cmp	r1, #2
    90cc:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    90d0:	ldrb	r0, [fp, #-92]	; 0xffffffa4
    90d4:	ldrb	r3, [fp, #-71]	; 0xffffffb9
    90d8:	ldrb	r7, [fp, #-50]	; 0xffffffce
    90dc:	lsl	r7, r7, #8
    90e0:	orr	r3, r7, r3, lsl #16
    90e4:	orr	r3, r3, r0
    90e8:	mov	r0, #4
    90ec:	and	r7, r3, #63	; 0x3f
    90f0:	ldrb	r7, [ip, r7]
    90f4:	strb	r7, [r2], #1
    90f8:	sub	r1, r1, #1
    90fc:	cmp	r1, #2
    9100:	blt	9110 <rb_sha512_crypt_r+0x888>
    9104:	lsr	r3, r3, #6
    9108:	subs	r0, r0, #1
    910c:	bhi	90ec <rb_sha512_crypt_r+0x864>
    9110:	cmp	r1, #2
    9114:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9118:	ldrb	r0, [fp, #-91]	; 0xffffffa5
    911c:	ldrb	r3, [fp, #-70]	; 0xffffffba
    9120:	ldrb	r7, [fp, #-49]	; 0xffffffcf
    9124:	lsl	r0, r0, #8
    9128:	orr	r0, r0, r7, lsl #16
    912c:	orr	r3, r0, r3
    9130:	mov	r0, #4
    9134:	and	r7, r3, #63	; 0x3f
    9138:	ldrb	r7, [ip, r7]
    913c:	strb	r7, [r2], #1
    9140:	sub	r1, r1, #1
    9144:	cmp	r1, #2
    9148:	blt	9158 <rb_sha512_crypt_r+0x8d0>
    914c:	lsr	r3, r3, #6
    9150:	subs	r0, r0, #1
    9154:	bhi	9134 <rb_sha512_crypt_r+0x8ac>
    9158:	cmp	r1, #2
    915c:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9160:	ldrb	r0, [fp, #-90]	; 0xffffffa6
    9164:	ldrb	r3, [fp, #-69]	; 0xffffffbb
    9168:	ldrb	r7, [fp, #-48]	; 0xffffffd0
    916c:	lsl	r3, r3, #8
    9170:	orr	r0, r3, r0, lsl #16
    9174:	orr	r3, r0, r7
    9178:	mov	r0, #4
    917c:	and	r7, r3, #63	; 0x3f
    9180:	ldrb	r7, [ip, r7]
    9184:	strb	r7, [r2], #1
    9188:	sub	r1, r1, #1
    918c:	cmp	r1, #2
    9190:	blt	91a0 <rb_sha512_crypt_r+0x918>
    9194:	lsr	r3, r3, #6
    9198:	subs	r0, r0, #1
    919c:	bhi	917c <rb_sha512_crypt_r+0x8f4>
    91a0:	cmp	r1, #2
    91a4:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    91a8:	ldrb	r0, [fp, #-89]	; 0xffffffa7
    91ac:	ldrb	r3, [fp, #-68]	; 0xffffffbc
    91b0:	ldrb	r7, [fp, #-47]	; 0xffffffd1
    91b4:	lsl	r7, r7, #8
    91b8:	orr	r3, r7, r3, lsl #16
    91bc:	orr	r3, r3, r0
    91c0:	mov	r0, #4
    91c4:	and	r7, r3, #63	; 0x3f
    91c8:	ldrb	r7, [ip, r7]
    91cc:	strb	r7, [r2], #1
    91d0:	sub	r1, r1, #1
    91d4:	cmp	r1, #2
    91d8:	blt	91e8 <rb_sha512_crypt_r+0x960>
    91dc:	lsr	r3, r3, #6
    91e0:	subs	r0, r0, #1
    91e4:	bhi	91c4 <rb_sha512_crypt_r+0x93c>
    91e8:	cmp	r1, #2
    91ec:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    91f0:	ldrb	r0, [fp, #-88]	; 0xffffffa8
    91f4:	ldrb	r3, [fp, #-67]	; 0xffffffbd
    91f8:	ldrb	r7, [fp, #-46]	; 0xffffffd2
    91fc:	lsl	r0, r0, #8
    9200:	orr	r0, r0, r7, lsl #16
    9204:	orr	r3, r0, r3
    9208:	mov	r0, #4
    920c:	and	r7, r3, #63	; 0x3f
    9210:	ldrb	r7, [ip, r7]
    9214:	strb	r7, [r2], #1
    9218:	sub	r1, r1, #1
    921c:	cmp	r1, #2
    9220:	blt	9230 <rb_sha512_crypt_r+0x9a8>
    9224:	lsr	r3, r3, #6
    9228:	subs	r0, r0, #1
    922c:	bhi	920c <rb_sha512_crypt_r+0x984>
    9230:	cmp	r1, #2
    9234:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9238:	ldrb	r0, [fp, #-87]	; 0xffffffa9
    923c:	ldrb	r3, [fp, #-66]	; 0xffffffbe
    9240:	ldrb	r7, [fp, #-45]	; 0xffffffd3
    9244:	lsl	r3, r3, #8
    9248:	orr	r0, r3, r0, lsl #16
    924c:	orr	r3, r0, r7
    9250:	mov	r0, #4
    9254:	and	r7, r3, #63	; 0x3f
    9258:	ldrb	r7, [ip, r7]
    925c:	strb	r7, [r2], #1
    9260:	sub	r1, r1, #1
    9264:	cmp	r1, #2
    9268:	blt	9278 <rb_sha512_crypt_r+0x9f0>
    926c:	lsr	r3, r3, #6
    9270:	subs	r0, r0, #1
    9274:	bhi	9254 <rb_sha512_crypt_r+0x9cc>
    9278:	cmp	r1, #2
    927c:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9280:	ldrb	r0, [fp, #-86]	; 0xffffffaa
    9284:	ldrb	r3, [fp, #-65]	; 0xffffffbf
    9288:	ldrb	r7, [fp, #-44]	; 0xffffffd4
    928c:	lsl	r7, r7, #8
    9290:	orr	r3, r7, r3, lsl #16
    9294:	orr	r3, r3, r0
    9298:	mov	r0, #4
    929c:	and	r7, r3, #63	; 0x3f
    92a0:	ldrb	r7, [ip, r7]
    92a4:	strb	r7, [r2], #1
    92a8:	sub	r1, r1, #1
    92ac:	cmp	r1, #2
    92b0:	blt	92c0 <rb_sha512_crypt_r+0xa38>
    92b4:	lsr	r3, r3, #6
    92b8:	subs	r0, r0, #1
    92bc:	bhi	929c <rb_sha512_crypt_r+0xa14>
    92c0:	cmp	r1, #2
    92c4:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    92c8:	ldrb	r0, [fp, #-85]	; 0xffffffab
    92cc:	ldrb	r3, [fp, #-64]	; 0xffffffc0
    92d0:	ldrb	r7, [fp, #-43]	; 0xffffffd5
    92d4:	lsl	r0, r0, #8
    92d8:	orr	r0, r0, r7, lsl #16
    92dc:	orr	r3, r0, r3
    92e0:	mov	r0, #4
    92e4:	and	r7, r3, #63	; 0x3f
    92e8:	ldrb	r7, [ip, r7]
    92ec:	strb	r7, [r2], #1
    92f0:	sub	r1, r1, #1
    92f4:	cmp	r1, #2
    92f8:	blt	9308 <rb_sha512_crypt_r+0xa80>
    92fc:	lsr	r3, r3, #6
    9300:	subs	r0, r0, #1
    9304:	bhi	92e4 <rb_sha512_crypt_r+0xa5c>
    9308:	cmp	r1, #2
    930c:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9310:	ldrb	r0, [fp, #-84]	; 0xffffffac
    9314:	ldrb	r3, [fp, #-63]	; 0xffffffc1
    9318:	ldrb	r7, [fp, #-42]	; 0xffffffd6
    931c:	lsl	r3, r3, #8
    9320:	orr	r0, r3, r0, lsl #16
    9324:	orr	r3, r0, r7
    9328:	mov	r0, #4
    932c:	and	r7, r3, #63	; 0x3f
    9330:	ldrb	r7, [ip, r7]
    9334:	strb	r7, [r2], #1
    9338:	sub	r1, r1, #1
    933c:	cmp	r1, #2
    9340:	blt	9350 <rb_sha512_crypt_r+0xac8>
    9344:	lsr	r3, r3, #6
    9348:	subs	r0, r0, #1
    934c:	bhi	932c <rb_sha512_crypt_r+0xaa4>
    9350:	cmp	r1, #2
    9354:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9358:	ldrb	r0, [fp, #-83]	; 0xffffffad
    935c:	ldrb	r3, [fp, #-62]	; 0xffffffc2
    9360:	ldrb	r7, [fp, #-41]	; 0xffffffd7
    9364:	lsl	r7, r7, #8
    9368:	orr	r3, r7, r3, lsl #16
    936c:	orr	r3, r3, r0
    9370:	mov	r0, #4
    9374:	and	r7, r3, #63	; 0x3f
    9378:	ldrb	r7, [ip, r7]
    937c:	strb	r7, [r2], #1
    9380:	sub	r1, r1, #1
    9384:	cmp	r1, #2
    9388:	blt	9398 <rb_sha512_crypt_r+0xb10>
    938c:	lsr	r3, r3, #6
    9390:	subs	r0, r0, #1
    9394:	bhi	9374 <rb_sha512_crypt_r+0xaec>
    9398:	cmp	r1, #2
    939c:	ldr	sl, [fp, #-864]	; 0xfffffca0
    93a0:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    93a4:	ldrb	r0, [fp, #-82]	; 0xffffffae
    93a8:	ldrb	r3, [fp, #-61]	; 0xffffffc3
    93ac:	ldrb	r7, [fp, #-40]	; 0xffffffd8
    93b0:	lsl	r0, r0, #8
    93b4:	orr	r0, r0, r7, lsl #16
    93b8:	orr	r3, r0, r3
    93bc:	mov	r0, #4
    93c0:	and	r7, r3, #63	; 0x3f
    93c4:	ldrb	r7, [ip, r7]
    93c8:	strb	r7, [r2], #1
    93cc:	sub	r1, r1, #1
    93d0:	cmp	r1, #2
    93d4:	blt	93e4 <rb_sha512_crypt_r+0xb5c>
    93d8:	lsr	r3, r3, #6
    93dc:	subs	r0, r0, #1
    93e0:	bhi	93c0 <rb_sha512_crypt_r+0xb38>
    93e4:	cmp	r1, #2
    93e8:	ldr	sl, [fp, #-864]	; 0xfffffca0
    93ec:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    93f0:	ldrb	r0, [fp, #-81]	; 0xffffffaf
    93f4:	ldrb	r3, [fp, #-60]	; 0xffffffc4
    93f8:	ldrb	r7, [fp, #-39]	; 0xffffffd9
    93fc:	lsl	r3, r3, #8
    9400:	orr	r0, r3, r0, lsl #16
    9404:	orr	r3, r0, r7
    9408:	mov	r0, #4
    940c:	and	r7, r3, #63	; 0x3f
    9410:	ldrb	r7, [ip, r7]
    9414:	strb	r7, [r2], #1
    9418:	sub	r1, r1, #1
    941c:	cmp	r1, #2
    9420:	blt	9430 <rb_sha512_crypt_r+0xba8>
    9424:	lsr	r3, r3, #6
    9428:	subs	r0, r0, #1
    942c:	bhi	940c <rb_sha512_crypt_r+0xb84>
    9430:	cmp	r1, #2
    9434:	ldr	sl, [fp, #-864]	; 0xfffffca0
    9438:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    943c:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    9440:	ldrb	r3, [fp, #-59]	; 0xffffffc5
    9444:	ldrb	r7, [fp, #-38]	; 0xffffffda
    9448:	lsl	r7, r7, #8
    944c:	orr	r3, r7, r3, lsl #16
    9450:	orr	r3, r3, r0
    9454:	mov	r0, #4
    9458:	and	r7, r3, #63	; 0x3f
    945c:	ldrb	r7, [ip, r7]
    9460:	strb	r7, [r2], #1
    9464:	sub	r1, r1, #1
    9468:	cmp	r1, #2
    946c:	blt	947c <rb_sha512_crypt_r+0xbf4>
    9470:	lsr	r3, r3, #6
    9474:	subs	r0, r0, #1
    9478:	bhi	9458 <rb_sha512_crypt_r+0xbd0>
    947c:	cmp	r1, #2
    9480:	ldr	sl, [fp, #-864]	; 0xfffffca0
    9484:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9488:	ldrb	r0, [fp, #-79]	; 0xffffffb1
    948c:	ldrb	r3, [fp, #-58]	; 0xffffffc6
    9490:	ldrb	r7, [fp, #-37]	; 0xffffffdb
    9494:	lsl	r0, r0, #8
    9498:	orr	r0, r0, r7, lsl #16
    949c:	orr	r3, r0, r3
    94a0:	mov	r0, #4
    94a4:	and	r7, r3, #63	; 0x3f
    94a8:	ldrb	r7, [ip, r7]
    94ac:	strb	r7, [r2], #1
    94b0:	sub	r1, r1, #1
    94b4:	cmp	r1, #2
    94b8:	blt	94c8 <rb_sha512_crypt_r+0xc40>
    94bc:	lsr	r3, r3, #6
    94c0:	subs	r0, r0, #1
    94c4:	bhi	94a4 <rb_sha512_crypt_r+0xc1c>
    94c8:	cmp	r1, #2
    94cc:	ldr	sl, [fp, #-864]	; 0xfffffca0
    94d0:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    94d4:	ldrb	r0, [fp, #-78]	; 0xffffffb2
    94d8:	ldrb	r3, [fp, #-57]	; 0xffffffc7
    94dc:	ldrb	r7, [fp, #-36]	; 0xffffffdc
    94e0:	lsl	r3, r3, #8
    94e4:	orr	r0, r3, r0, lsl #16
    94e8:	orr	r3, r0, r7
    94ec:	mov	r0, #4
    94f0:	and	r7, r3, #63	; 0x3f
    94f4:	ldrb	r7, [ip, r7]
    94f8:	strb	r7, [r2], #1
    94fc:	sub	r1, r1, #1
    9500:	cmp	r1, #2
    9504:	blt	9514 <rb_sha512_crypt_r+0xc8c>
    9508:	lsr	r3, r3, #6
    950c:	subs	r0, r0, #1
    9510:	bhi	94f0 <rb_sha512_crypt_r+0xc68>
    9514:	cmp	r1, #2
    9518:	ldr	sl, [fp, #-864]	; 0xfffffca0
    951c:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    9520:	ldrb	r0, [fp, #-77]	; 0xffffffb3
    9524:	ldrb	r3, [fp, #-56]	; 0xffffffc8
    9528:	ldrb	r7, [fp, #-35]	; 0xffffffdd
    952c:	lsl	r7, r7, #8
    9530:	orr	r3, r7, r3, lsl #16
    9534:	orr	r3, r3, r0
    9538:	mov	r0, #4
    953c:	and	r7, r3, #63	; 0x3f
    9540:	ldrb	r7, [ip, r7]
    9544:	strb	r7, [r2], #1
    9548:	sub	r1, r1, #1
    954c:	cmp	r1, #2
    9550:	blt	9560 <rb_sha512_crypt_r+0xcd8>
    9554:	lsr	r3, r3, #6
    9558:	subs	r0, r0, #1
    955c:	bhi	953c <rb_sha512_crypt_r+0xcb4>
    9560:	cmp	r1, #2
    9564:	ldr	sl, [fp, #-864]	; 0xfffffca0
    9568:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    956c:	ldrb	r0, [fp, #-76]	; 0xffffffb4
    9570:	ldrb	r3, [fp, #-55]	; 0xffffffc9
    9574:	ldrb	r7, [fp, #-34]	; 0xffffffde
    9578:	lsl	r0, r0, #8
    957c:	orr	r0, r0, r7, lsl #16
    9580:	orr	r3, r0, r3
    9584:	mov	r0, #4
    9588:	and	r7, r3, #63	; 0x3f
    958c:	ldrb	r7, [ip, r7]
    9590:	strb	r7, [r2], #1
    9594:	sub	r1, r1, #1
    9598:	cmp	r1, #2
    959c:	blt	95ac <rb_sha512_crypt_r+0xd24>
    95a0:	lsr	r3, r3, #6
    95a4:	subs	r0, r0, #1
    95a8:	bhi	9588 <rb_sha512_crypt_r+0xd00>
    95ac:	cmp	r1, #2
    95b0:	ldr	sl, [fp, #-864]	; 0xfffffca0
    95b4:	blt	95f4 <rb_sha512_crypt_r+0xd6c>
    95b8:	mov	r3, #2
    95bc:	ldrb	r7, [fp, #-33]	; 0xffffffdf
    95c0:	and	r0, r7, #63	; 0x3f
    95c4:	ldrb	r0, [ip, r0]
    95c8:	strb	r0, [r2], #1
    95cc:	sub	r1, r1, #1
    95d0:	cmp	r1, #2
    95d4:	blt	95e4 <rb_sha512_crypt_r+0xd5c>
    95d8:	lsr	r7, r7, #6
    95dc:	subs	r3, r3, #1
    95e0:	bhi	95c0 <rb_sha512_crypt_r+0xd38>
    95e4:	cmp	r1, #1
    95e8:	ldr	r1, [fp, #-876]	; 0xfffffc94
    95ec:	ldr	sl, [fp, #-864]	; 0xfffffca0
    95f0:	bgt	96d4 <rb_sha512_crypt_r+0xe4c>
    95f4:	bl	5610 <__errno_location@plt>
    95f8:	mov	r1, #34	; 0x22
    95fc:	str	r1, [r0]
    9600:	sub	r5, fp, #504	; 0x1f8
    9604:	mov	r0, r5
    9608:	bl	9700 <rb_sha512_init_ctx>
    960c:	sub	r1, fp, #96	; 0x60
    9610:	mov	r0, r5
    9614:	bl	9990 <rb_sha512_finish_ctx>
    9618:	vmov.i32	q8, #0	; 0x00000000
    961c:	sub	r0, fp, #160	; 0xa0
    9620:	mov	r1, r0
    9624:	add	r0, r0, #32
    9628:	vst1.64	{d16-d17}, [r0]
    962c:	add	r0, r1, #16
    9630:	vst1.64	{d16-d17}, [r0]
    9634:	mov	r0, #48	; 0x30
    9638:	vst1.64	{d16-d17}, [r1], r0
    963c:	vst1.64	{d16-d17}, [r1]
    9640:	ldr	r0, [fp, #-856]	; 0xfffffca8
    9644:	mov	r1, #0
    9648:	ldr	r4, [fp, #-852]	; 0xfffffcac
    964c:	mov	r2, r4
    9650:	bl	4f68 <memset@plt>
    9654:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    9658:	mov	r1, #0
    965c:	mov	r2, sl
    9660:	bl	4f68 <memset@plt>
    9664:	mov	r0, r5
    9668:	mov	r1, #0
    966c:	mov	r2, #344	; 0x158
    9670:	bl	4f68 <memset@plt>
    9674:	sub	r0, fp, #848	; 0x350
    9678:	mov	r1, #0
    967c:	mov	r2, #344	; 0x158
    9680:	bl	4f68 <memset@plt>
    9684:	ldr	r0, [fp, #-880]	; 0xfffffc90
    9688:	cmp	r0, #0
    968c:	beq	969c <rb_sha512_crypt_r+0xe14>
    9690:	mov	r1, #0
    9694:	mov	r2, r4
    9698:	bl	4f68 <memset@plt>
    969c:	ldr	r0, [fp, #-884]	; 0xfffffc8c
    96a0:	cmp	r0, #0
    96a4:	beq	96b4 <rb_sha512_crypt_r+0xe2c>
    96a8:	mov	r1, #0
    96ac:	mov	r2, sl
    96b0:	bl	4f68 <memset@plt>
    96b4:	ldr	r0, [fp, #-860]	; 0xfffffca4
    96b8:	sub	sp, fp, #28
    96bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96c0:	mov	r0, #0
    96c4:	str	r0, [fp, #-892]	; 0xfffffc84
    96c8:	movw	r0, #5000	; 0x1388
    96cc:	str	r0, [fp, #-860]	; 0xfffffca4
    96d0:	b	8934 <rb_sha512_crypt_r+0xac>
    96d4:	mov	r0, #0
    96d8:	strb	r0, [r2]
    96dc:	str	r1, [fp, #-860]	; 0xfffffca4
    96e0:	b	9600 <rb_sha512_crypt_r+0xd78>
    96e4:	.word	0x0000ca58
    96e8:	.word	0x0000ca44
    96ec:	.word	0x0000c542
    96f0:	.word	0x0000c500
    96f4:	.word	0x0000c038
    96f8:	.word	0x0000c4b8
    96fc:	.word	0x0000bf27

00009700 <rb_sha512_init_ctx>:
    9700:	push	{r4, r5, r6, sl, fp, lr}
    9704:	add	fp, sp, #16
    9708:	movw	ip, #44677	; 0xae85
    970c:	movt	ip, #47975	; 0xbb67
    9710:	vmov.i32	q8, #0	; 0x00000000
    9714:	movw	r2, #42811	; 0xa73b
    9718:	movt	r2, #33994	; 0x84ca
    971c:	movw	r3, #58983	; 0xe667
    9720:	movt	r3, #27145	; 0x6a09
    9724:	movw	r1, #51464	; 0xc908
    9728:	movt	r1, #62396	; 0xf3bc
    972c:	movw	lr, #62322	; 0xf372
    9730:	movt	lr, #15470	; 0x3c6e
    9734:	movw	r4, #63531	; 0xf82b
    9738:	movt	r4, #65172	; 0xfe94
    973c:	movw	r5, #62778	; 0xf53a
    9740:	movt	r5, #42319	; 0xa54f
    9744:	movw	r6, #14065	; 0x36f1
    9748:	movt	r6, #24349	; 0x5f1d
    974c:	stm	r0, {r1, r3}
    9750:	str	r2, [r0, #8]
    9754:	str	ip, [r0, #12]
    9758:	str	r4, [r0, #16]
    975c:	str	lr, [r0, #20]
    9760:	str	r6, [r0, #24]
    9764:	str	r5, [r0, #28]
    9768:	movw	lr, #21119	; 0x527f
    976c:	movt	lr, #20750	; 0x510e
    9770:	movw	r2, #33489	; 0x82d1
    9774:	movt	r2, #44518	; 0xade6
    9778:	movw	r3, #26764	; 0x688c
    977c:	movt	r3, #39685	; 0x9b05
    9780:	movw	r6, #27679	; 0x6c1f
    9784:	movt	r6, #11070	; 0x2b3e
    9788:	movw	r5, #55723	; 0xd9ab
    978c:	movt	r5, #8067	; 0x1f83
    9790:	movw	r4, #48491	; 0xbd6b
    9794:	movt	r4, #64321	; 0xfb41
    9798:	movw	ip, #52505	; 0xcd19
    979c:	movt	ip, #23520	; 0x5be0
    97a0:	movw	r1, #8569	; 0x2179
    97a4:	movt	r1, #4990	; 0x137e
    97a8:	str	r2, [r0, #32]
    97ac:	str	lr, [r0, #36]	; 0x24
    97b0:	str	r6, [r0, #40]	; 0x28
    97b4:	add	r2, r0, #44	; 0x2c
    97b8:	stm	r2, {r3, r4, r5}
    97bc:	str	r1, [r0, #56]	; 0x38
    97c0:	str	ip, [r0, #60]	; 0x3c
    97c4:	mov	r1, #0
    97c8:	str	r1, [r0, #80]	; 0x50
    97cc:	str	r1, [r0, #84]	; 0x54
    97d0:	add	r0, r0, #64	; 0x40
    97d4:	vst1.64	{d16-d17}, [r0]
    97d8:	pop	{r4, r5, r6, sl, fp, pc}

000097dc <rb_sha512_process_bytes>:
    97dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97e0:	add	fp, sp, #28
    97e4:	sub	sp, sp, #12
    97e8:	mov	r4, r2
    97ec:	mov	r5, r1
    97f0:	mov	r8, r0
    97f4:	mov	r9, r2
    97f8:	ldr	r6, [r9, #80]!	; 0x50
    97fc:	ldr	r0, [r9, #4]
    9800:	orrs	r0, r6, r0
    9804:	beq	9888 <rb_sha512_process_bytes+0xac>
    9808:	rsb	r7, r6, #256	; 0x100
    980c:	cmp	r7, r5
    9810:	movhi	r7, r5
    9814:	add	r0, r4, r6
    9818:	add	r0, r0, #88	; 0x58
    981c:	mov	r1, r8
    9820:	mov	r2, r7
    9824:	bl	5130 <memcpy@plt>
    9828:	ldrd	r0, [r9]
    982c:	adds	r0, r0, r7
    9830:	adc	r1, r1, #0
    9834:	strd	r0, [r9]
    9838:	subs	r2, r0, #129	; 0x81
    983c:	sbcs	r1, r1, #0
    9840:	bcc	9880 <rb_sha512_process_bytes+0xa4>
    9844:	add	sl, r4, #88	; 0x58
    9848:	bic	r1, r0, #127	; 0x7f
    984c:	mov	r0, sl
    9850:	mov	r2, r4
    9854:	bl	9b08 <rb_sha512_process_block>
    9858:	mov	r0, #0
    985c:	str	r0, [r9, #4]
    9860:	ldr	r0, [r9]
    9864:	and	r2, r0, #127	; 0x7f
    9868:	str	r2, [r9]
    986c:	add	r0, r7, r6
    9870:	bic	r0, r0, #127	; 0x7f
    9874:	add	r1, sl, r0
    9878:	mov	r0, sl
    987c:	bl	5130 <memcpy@plt>
    9880:	sub	r5, r5, r7
    9884:	add	r8, r8, r7
    9888:	cmp	r5, #128	; 0x80
    988c:	bcc	9920 <rb_sha512_process_bytes+0x144>
    9890:	tst	r8, #7
    9894:	beq	9904 <rb_sha512_process_bytes+0x128>
    9898:	cmp	r5, #129	; 0x81
    989c:	bcc	9930 <rb_sha512_process_bytes+0x154>
    98a0:	sub	r0, r5, #128	; 0x80
    98a4:	str	r0, [sp, #8]
    98a8:	add	r7, r4, #88	; 0x58
    98ac:	sub	r0, r5, #129	; 0x81
    98b0:	bic	sl, r0, #127	; 0x7f
    98b4:	add	r0, sl, #128	; 0x80
    98b8:	str	r0, [sp, #4]
    98bc:	mov	r6, r8
    98c0:	mov	r0, r7
    98c4:	mov	r1, r6
    98c8:	mov	r2, #128	; 0x80
    98cc:	bl	5130 <memcpy@plt>
    98d0:	mov	r0, r7
    98d4:	mov	r1, #128	; 0x80
    98d8:	mov	r2, r4
    98dc:	bl	9b08 <rb_sha512_process_block>
    98e0:	sub	r5, r5, #128	; 0x80
    98e4:	add	r6, r6, #128	; 0x80
    98e8:	cmp	r5, #128	; 0x80
    98ec:	bhi	98c0 <rb_sha512_process_bytes+0xe4>
    98f0:	ldr	r0, [sp, #8]
    98f4:	sub	r5, r0, sl
    98f8:	ldr	r0, [sp, #4]
    98fc:	add	r8, r8, r0
    9900:	b	9934 <rb_sha512_process_bytes+0x158>
    9904:	bic	r6, r5, #127	; 0x7f
    9908:	mov	r0, r8
    990c:	mov	r1, r6
    9910:	mov	r2, r4
    9914:	bl	9b08 <rb_sha512_process_block>
    9918:	add	r8, r8, r6
    991c:	and	r5, r5, #127	; 0x7f
    9920:	cmp	r5, #0
    9924:	bne	9934 <rb_sha512_process_bytes+0x158>
    9928:	sub	sp, fp, #28
    992c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9930:	mov	r5, #128	; 0x80
    9934:	ldr	r6, [r9]
    9938:	add	r0, r4, r6
    993c:	add	r0, r0, #88	; 0x58
    9940:	mov	r1, r8
    9944:	mov	r2, r5
    9948:	bl	5130 <memcpy@plt>
    994c:	add	r6, r5, r6
    9950:	cmp	r6, #128	; 0x80
    9954:	bcc	9980 <rb_sha512_process_bytes+0x1a4>
    9958:	add	r5, r4, #88	; 0x58
    995c:	mov	r0, r5
    9960:	mov	r1, #128	; 0x80
    9964:	mov	r2, r4
    9968:	bl	9b08 <rb_sha512_process_block>
    996c:	add	r1, r4, #216	; 0xd8
    9970:	sub	r6, r6, #128	; 0x80
    9974:	mov	r0, r5
    9978:	mov	r2, r6
    997c:	bl	5130 <memcpy@plt>
    9980:	mov	r7, #0
    9984:	strd	r6, [r9]
    9988:	sub	sp, fp, #28
    998c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009990 <rb_sha512_finish_ctx>:
    9990:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    9994:	add	fp, sp, #24
    9998:	mov	r4, r1
    999c:	mov	r5, r0
    99a0:	mov	r9, r0
    99a4:	ldr	r0, [r9, #64]!	; 0x40
    99a8:	ldr	r1, [r9, #4]
    99ac:	ldrd	r2, [r9, #16]
    99b0:	adds	r0, r0, r2
    99b4:	adcs	r1, r1, r3
    99b8:	strd	r0, [r9]
    99bc:	mov	r7, #0
    99c0:	adc	r0, r7, #0
    99c4:	cmp	r0, #1
    99c8:	bne	99dc <rb_sha512_finish_ctx+0x4c>
    99cc:	ldrd	r0, [r5, #72]	; 0x48
    99d0:	adds	r0, r0, #1
    99d4:	adc	r1, r1, #0
    99d8:	strd	r0, [r5, #72]	; 0x48
    99dc:	add	r8, r5, #88	; 0x58
    99e0:	add	r0, r8, r2
    99e4:	rsbs	r1, r2, #111	; 0x6f
    99e8:	rscs	r1, r3, #0
    99ec:	mov	r1, #0
    99f0:	movwcc	r1, #1
    99f4:	mov	r6, #112	; 0x70
    99f8:	cmp	r1, #0
    99fc:	movwne	r6, #240	; 0xf0
    9a00:	sub	r2, r6, r2
    9a04:	ldr	r1, [pc, #248]	; 9b04 <rb_sha512_finish_ctx+0x174>
    9a08:	add	r1, pc, r1
    9a0c:	bl	5130 <memcpy@plt>
    9a10:	ldrd	r0, [r9]
    9a14:	lsr	r2, r0, #5
    9a18:	orr	r2, r2, r1, lsl #27
    9a1c:	and	r2, r2, #-16777216	; 0xff000000
    9a20:	movw	ip, #8160	; 0x1fe0
    9a24:	and	r3, r1, ip
    9a28:	orr	r2, r2, r3, lsl #11
    9a2c:	mov	lr, #65280	; 0xff00
    9a30:	and	r3, lr, r1, lsr #5
    9a34:	orr	r2, r2, r3
    9a38:	ubfx	r1, r1, #21, #8
    9a3c:	orr	r1, r2, r1
    9a40:	orr	r2, r6, #8
    9a44:	str	r1, [r8, r2]
    9a48:	lsl	r1, r0, #11
    9a4c:	uxtb16	r1, r1
    9a50:	and	r3, lr, r0, lsr #5
    9a54:	orr	r1, r1, r0, lsl #27
    9a58:	orr	r1, r1, r3
    9a5c:	ubfx	r0, r0, #21, #8
    9a60:	orr	r0, r1, r0
    9a64:	add	r1, r8, r2
    9a68:	str	r0, [r1, #4]
    9a6c:	ldrd	r0, [r5, #72]	; 0x48
    9a70:	lsr	r2, r0, #5
    9a74:	orr	r2, r2, r1, lsl #27
    9a78:	and	r2, r2, #-16777216	; 0xff000000
    9a7c:	and	r3, r1, ip
    9a80:	orr	r2, r2, r3, lsl #11
    9a84:	and	r3, lr, r1, lsr #5
    9a88:	orr	r2, r2, r3
    9a8c:	ubfx	r1, r1, #21, #8
    9a90:	orr	r1, r2, r1
    9a94:	ldr	r2, [r9, #4]
    9a98:	str	r1, [r8, r6]
    9a9c:	and	r1, r0, ip
    9aa0:	and	r3, lr, r0, lsr #5
    9aa4:	orr	r1, r3, r1, lsl #11
    9aa8:	ubfx	r3, r0, #21, #8
    9aac:	orr	r1, r1, r3
    9ab0:	lsr	r2, r2, #29
    9ab4:	orr	r0, r2, r0, lsl #3
    9ab8:	orr	r0, r1, r0, lsl #24
    9abc:	add	r1, r8, r6
    9ac0:	str	r0, [r1, #4]
    9ac4:	add	r1, r6, #16
    9ac8:	mov	r0, r8
    9acc:	mov	r2, r5
    9ad0:	bl	9b08 <rb_sha512_process_block>
    9ad4:	mov	r0, r5
    9ad8:	ldr	r1, [r0, r7]!
    9adc:	ldr	r0, [r0, #4]
    9ae0:	rev	r0, r0
    9ae4:	mov	r2, r4
    9ae8:	str	r0, [r2, r7]!
    9aec:	rev	r0, r1
    9af0:	str	r0, [r2, #4]
    9af4:	add	r7, r7, #8
    9af8:	cmp	r7, #64	; 0x40
    9afc:	bne	9ad4 <rb_sha512_finish_ctx+0x144>
    9b00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    9b04:	.word	0x0000bb88

00009b08 <rb_sha512_process_block>:
    9b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b0c:	add	fp, sp, #28
    9b10:	sub	sp, sp, #796	; 0x31c
    9b14:	ldr	r3, [r2, #64]	; 0x40
    9b18:	adds	r3, r3, r1
    9b1c:	str	r3, [r2, #64]	; 0x40
    9b20:	ldr	r3, [r2, #68]	; 0x44
    9b24:	adcs	r3, r3, #0
    9b28:	str	r3, [r2, #68]	; 0x44
    9b2c:	mov	r3, #0
    9b30:	adc	r7, r3, #0
    9b34:	lsr	r6, r1, #3
    9b38:	ldr	r1, [r2, #60]	; 0x3c
    9b3c:	str	r1, [sp, #100]	; 0x64
    9b40:	mov	r1, r2
    9b44:	ldr	lr, [r1, #56]!	; 0x38
    9b48:	str	r1, [sp, #24]
    9b4c:	ldr	r1, [r2, #52]	; 0x34
    9b50:	str	r1, [sp, #96]	; 0x60
    9b54:	mov	r1, r2
    9b58:	ldr	r3, [r1, #48]!	; 0x30
    9b5c:	str	r3, [sp, #92]	; 0x5c
    9b60:	str	r1, [sp, #20]
    9b64:	ldr	r1, [r2, #44]	; 0x2c
    9b68:	str	r1, [sp, #88]	; 0x58
    9b6c:	mov	r1, r2
    9b70:	ldr	r3, [r1, #40]!	; 0x28
    9b74:	str	r3, [sp, #84]	; 0x54
    9b78:	str	r1, [sp, #16]
    9b7c:	ldr	r1, [r2, #36]	; 0x24
    9b80:	str	r1, [sp, #80]	; 0x50
    9b84:	mov	r1, r2
    9b88:	ldr	r3, [r1, #32]!
    9b8c:	str	r3, [sp, #76]	; 0x4c
    9b90:	str	r1, [sp, #12]
    9b94:	ldr	sl, [r2, #28]
    9b98:	mov	r1, r2
    9b9c:	ldr	r3, [r1, #24]!
    9ba0:	str	r3, [sp, #72]	; 0x48
    9ba4:	str	r1, [sp, #8]
    9ba8:	ldm	r2, {r1, r3}
    9bac:	str	r3, [sp, #56]	; 0x38
    9bb0:	str	r1, [sp, #60]	; 0x3c
    9bb4:	ldr	r1, [r2, #12]
    9bb8:	str	r1, [sp, #64]	; 0x40
    9bbc:	ldr	r1, [r2, #20]
    9bc0:	str	r1, [sp, #68]	; 0x44
    9bc4:	mov	r1, r2
    9bc8:	ldr	r3, [r1, #16]!
    9bcc:	str	r3, [sp, #52]	; 0x34
    9bd0:	str	r1, [sp, #4]
    9bd4:	mov	r1, r2
    9bd8:	ldr	r3, [r1, #8]!
    9bdc:	str	r3, [sp, #48]	; 0x30
    9be0:	str	r1, [sp]
    9be4:	cmp	r7, #1
    9be8:	bne	9c04 <rb_sha512_process_block+0xfc>
    9bec:	ldr	r4, [r2, #72]	; 0x48
    9bf0:	ldr	r1, [r2, #76]	; 0x4c
    9bf4:	adds	r4, r4, #1
    9bf8:	adc	r1, r1, #0
    9bfc:	str	r4, [r2, #72]	; 0x48
    9c00:	str	r1, [r2, #76]	; 0x4c
    9c04:	str	r2, [sp, #28]
    9c08:	cmp	r6, #0
    9c0c:	beq	a00c <rb_sha512_process_block+0x504>
    9c10:	add	r7, sp, #152	; 0x98
    9c14:	mov	r3, #0
    9c18:	mov	r1, r0
    9c1c:	ldr	r2, [r1, r3]!
    9c20:	ldr	r1, [r1, #4]
    9c24:	rev	r1, r1
    9c28:	str	r1, [r7, r3]
    9c2c:	add	r1, r7, r3
    9c30:	rev	r2, r2
    9c34:	str	r2, [r1, #4]
    9c38:	add	r3, r3, #8
    9c3c:	cmp	r3, #128	; 0x80
    9c40:	bne	9c18 <rb_sha512_process_block+0x110>
    9c44:	str	r6, [sp, #32]
    9c48:	str	r0, [sp, #36]	; 0x24
    9c4c:	mov	r0, #0
    9c50:	add	r1, sp, #152	; 0x98
    9c54:	mov	r4, r1
    9c58:	add	r1, r1, r0
    9c5c:	ldrd	r2, [r1, #112]	; 0x70
    9c60:	lsr	r7, r3, #19
    9c64:	orr	r7, r7, r2, lsl #13
    9c68:	lsl	r6, r3, #3
    9c6c:	orr	r6, r6, r2, lsr #29
    9c70:	eor	r6, r6, r3, lsr #6
    9c74:	eor	r7, r6, r7
    9c78:	lsr	r6, r2, #6
    9c7c:	orr	r6, r6, r3, lsl #26
    9c80:	lsr	r5, r3, #29
    9c84:	orr	r5, r5, r2, lsl #3
    9c88:	eor	r6, r5, r6
    9c8c:	lsr	r2, r2, #19
    9c90:	orr	r2, r2, r3, lsl #13
    9c94:	eor	r2, r6, r2
    9c98:	ldr	r3, [r4, r0]
    9c9c:	ldr	r6, [r1, #4]
    9ca0:	ldr	r5, [r1, #8]
    9ca4:	ldr	r4, [r1, #12]
    9ca8:	ldrd	r8, [r1, #72]	; 0x48
    9cac:	adds	r3, r3, r8
    9cb0:	adc	r6, r6, r9
    9cb4:	adds	r2, r3, r2
    9cb8:	adc	ip, r6, r7
    9cbc:	lsr	r7, r5, #7
    9cc0:	orr	r7, r7, r4, lsl #25
    9cc4:	lsr	r6, r5, #8
    9cc8:	orr	r6, r6, r4, lsl #24
    9ccc:	eor	r7, r6, r7
    9cd0:	lsrs	r6, r4, #1
    9cd4:	rrx	r3, r5
    9cd8:	eor	r3, r7, r3
    9cdc:	orr	r7, r6, r5, lsl #31
    9ce0:	lsr	r6, r4, #8
    9ce4:	adds	r2, r2, r3
    9ce8:	orr	r3, r6, r5, lsl #24
    9cec:	eor	r3, r3, r4, lsr #7
    9cf0:	eor	r3, r3, r7
    9cf4:	adc	r3, ip, r3
    9cf8:	strd	r2, [r1, #128]	; 0x80
    9cfc:	add	r0, r0, #8
    9d00:	cmp	r0, #512	; 0x200
    9d04:	bne	9c50 <rb_sha512_process_block+0x148>
    9d08:	mov	ip, #0
    9d0c:	ldr	r0, [sp, #60]	; 0x3c
    9d10:	str	r0, [sp, #132]	; 0x84
    9d14:	ldr	r0, [sp, #56]	; 0x38
    9d18:	str	r0, [sp, #128]	; 0x80
    9d1c:	ldr	r2, [sp, #48]	; 0x30
    9d20:	ldr	r3, [sp, #64]	; 0x40
    9d24:	ldr	r4, [sp, #52]	; 0x34
    9d28:	str	r4, [sp, #144]	; 0x90
    9d2c:	ldr	r4, [sp, #68]	; 0x44
    9d30:	str	r4, [sp, #140]	; 0x8c
    9d34:	ldr	r6, [sp, #72]	; 0x48
    9d38:	str	sl, [sp, #40]	; 0x28
    9d3c:	str	sl, [sp, #124]	; 0x7c
    9d40:	ldr	r9, [sp, #76]	; 0x4c
    9d44:	ldr	r8, [sp, #80]	; 0x50
    9d48:	ldr	r5, [sp, #84]	; 0x54
    9d4c:	ldr	r7, [sp, #88]	; 0x58
    9d50:	ldr	r0, [sp, #92]	; 0x5c
    9d54:	str	r0, [sp, #148]	; 0x94
    9d58:	ldr	r4, [sp, #96]	; 0x60
    9d5c:	str	r4, [sp, #136]	; 0x88
    9d60:	str	lr, [sp, #44]	; 0x2c
    9d64:	ldr	r4, [sp, #100]	; 0x64
    9d68:	str	r6, [sp, #112]	; 0x70
    9d6c:	ldr	r0, [sp, #136]	; 0x88
    9d70:	str	r0, [sp, #116]	; 0x74
    9d74:	mov	r1, r9
    9d78:	ldr	r9, [sp, #148]	; 0x94
    9d7c:	str	r9, [sp, #108]	; 0x6c
    9d80:	mov	r6, r7
    9d84:	str	r5, [sp, #148]	; 0x94
    9d88:	mov	r7, r8
    9d8c:	mov	r5, r1
    9d90:	ldr	r1, [sp, #140]	; 0x8c
    9d94:	str	r1, [sp, #104]	; 0x68
    9d98:	ldr	r1, [sp, #144]	; 0x90
    9d9c:	str	r1, [sp, #120]	; 0x78
    9da0:	mov	r8, r3
    9da4:	mov	sl, r2
    9da8:	ldr	r3, [sp, #128]	; 0x80
    9dac:	ldr	r2, [sp, #132]	; 0x84
    9db0:	bic	r0, r0, r7
    9db4:	str	r6, [sp, #136]	; 0x88
    9db8:	and	r1, r7, r6
    9dbc:	orr	r0, r1, r0
    9dc0:	bic	r1, r9, r5
    9dc4:	ldr	r6, [sp, #148]	; 0x94
    9dc8:	and	r6, r5, r6
    9dcc:	orr	r1, r6, r1
    9dd0:	adds	r1, r1, lr
    9dd4:	adc	lr, r0, r4
    9dd8:	lsr	r6, r7, #18
    9ddc:	orr	r6, r6, r5, lsl #14
    9de0:	lsr	r4, r7, #14
    9de4:	orr	r4, r4, r5, lsl #18
    9de8:	eor	r6, r4, r6
    9dec:	lsl	r4, r7, #23
    9df0:	orr	r4, r4, r5, lsr #9
    9df4:	eor	r6, r6, r4
    9df8:	lsr	r4, r5, #18
    9dfc:	orr	r4, r4, r7, lsl #14
    9e00:	lsr	r0, r5, #14
    9e04:	orr	r0, r0, r7, lsl #18
    9e08:	eor	r0, r0, r4
    9e0c:	lsr	r4, r7, #9
    9e10:	orr	r4, r4, r5, lsl #23
    9e14:	eor	r0, r0, r4
    9e18:	adds	r0, r1, r0
    9e1c:	adc	r1, lr, r6
    9e20:	ldr	r6, [pc, #636]	; a0a4 <rb_sha512_process_block+0x59c>
    9e24:	add	r6, pc, r6
    9e28:	ldr	r4, [r6, ip]!
    9e2c:	ldr	r6, [r6, #4]
    9e30:	adds	r0, r0, r4
    9e34:	adc	r1, r1, r6
    9e38:	add	r6, sp, #152	; 0x98
    9e3c:	mov	r4, r6
    9e40:	add	r6, r6, ip
    9e44:	ldr	r6, [r6, #4]
    9e48:	ldr	r4, [r4, ip]
    9e4c:	adds	r9, r0, r4
    9e50:	adc	r6, r1, r6
    9e54:	ldr	lr, [sp, #104]	; 0x68
    9e58:	and	r0, r8, lr
    9e5c:	str	r8, [sp, #140]	; 0x8c
    9e60:	eor	r1, r8, lr
    9e64:	and	r1, r3, r1
    9e68:	eor	r0, r1, r0
    9e6c:	str	r0, [sp, #132]	; 0x84
    9e70:	lsl	r1, r3, #30
    9e74:	orr	r1, r1, r2, lsr #2
    9e78:	lsr	r0, r3, #28
    9e7c:	orr	r0, r0, r2, lsl #4
    9e80:	eor	r0, r0, r1
    9e84:	lsl	r1, r3, #25
    9e88:	orr	r1, r1, r2, lsr #7
    9e8c:	eor	r8, r0, r1
    9e90:	ldr	r4, [sp, #120]	; 0x78
    9e94:	and	r1, sl, r4
    9e98:	str	sl, [sp, #144]	; 0x90
    9e9c:	eor	r0, sl, r4
    9ea0:	mov	sl, r4
    9ea4:	and	r0, r2, r0
    9ea8:	eor	r0, r0, r1
    9eac:	lsr	r1, r2, #28
    9eb0:	orr	r1, r1, r3, lsl #4
    9eb4:	lsr	r4, r3, #2
    9eb8:	orr	r4, r4, r2, lsl #30
    9ebc:	eor	r1, r1, r4
    9ec0:	lsr	r4, r3, #7
    9ec4:	orr	r4, r4, r2, lsl #25
    9ec8:	eor	r1, r1, r4
    9ecc:	adds	r0, r1, r0
    9ed0:	ldr	r1, [sp, #132]	; 0x84
    9ed4:	adc	r1, r8, r1
    9ed8:	adds	r0, r0, r9
    9edc:	str	r0, [sp, #132]	; 0x84
    9ee0:	adc	r0, r1, r6
    9ee4:	str	r0, [sp, #128]	; 0x80
    9ee8:	ldr	r0, [sp, #112]	; 0x70
    9eec:	adds	r9, r9, r0
    9ef0:	ldr	r0, [sp, #124]	; 0x7c
    9ef4:	adc	r8, r6, r0
    9ef8:	add	ip, ip, #8
    9efc:	cmp	ip, #640	; 0x280
    9f00:	mov	r6, sl
    9f04:	mov	r0, lr
    9f08:	str	lr, [sp, #124]	; 0x7c
    9f0c:	ldr	lr, [sp, #108]	; 0x6c
    9f10:	ldr	r4, [sp, #116]	; 0x74
    9f14:	bne	9d68 <rb_sha512_process_block+0x260>
    9f18:	mov	sl, lr
    9f1c:	mov	r1, r4
    9f20:	ldr	lr, [sp, #44]	; 0x2c
    9f24:	adds	lr, sl, lr
    9f28:	ldr	r6, [sp, #100]	; 0x64
    9f2c:	adc	r6, r4, r6
    9f30:	str	r6, [sp, #100]	; 0x64
    9f34:	ldr	r6, [sp, #92]	; 0x5c
    9f38:	ldr	r1, [sp, #148]	; 0x94
    9f3c:	adds	r6, r1, r6
    9f40:	str	r6, [sp, #92]	; 0x5c
    9f44:	ldr	r6, [sp, #96]	; 0x60
    9f48:	ldr	r4, [sp, #136]	; 0x88
    9f4c:	adc	r6, r4, r6
    9f50:	str	r6, [sp, #96]	; 0x60
    9f54:	ldr	r6, [sp, #84]	; 0x54
    9f58:	adds	r6, r5, r6
    9f5c:	str	r6, [sp, #84]	; 0x54
    9f60:	ldr	r6, [sp, #88]	; 0x58
    9f64:	adc	r6, r7, r6
    9f68:	str	r6, [sp, #88]	; 0x58
    9f6c:	ldr	r7, [sp, #76]	; 0x4c
    9f70:	adds	r7, r9, r7
    9f74:	str	r7, [sp, #76]	; 0x4c
    9f78:	ldr	r7, [sp, #80]	; 0x50
    9f7c:	adc	r7, r8, r7
    9f80:	str	r7, [sp, #80]	; 0x50
    9f84:	ldr	r7, [sp, #72]	; 0x48
    9f88:	ldr	r1, [sp, #120]	; 0x78
    9f8c:	adds	r7, r1, r7
    9f90:	str	r7, [sp, #72]	; 0x48
    9f94:	ldr	sl, [sp, #40]	; 0x28
    9f98:	adc	sl, r0, sl
    9f9c:	ldr	r7, [sp, #52]	; 0x34
    9fa0:	ldr	r6, [sp, #144]	; 0x90
    9fa4:	adds	r7, r6, r7
    9fa8:	str	r7, [sp, #52]	; 0x34
    9fac:	ldr	r7, [sp, #68]	; 0x44
    9fb0:	ldr	r6, [sp, #140]	; 0x8c
    9fb4:	adc	r7, r6, r7
    9fb8:	str	r7, [sp, #68]	; 0x44
    9fbc:	ldr	r7, [sp, #48]	; 0x30
    9fc0:	adds	r7, r2, r7
    9fc4:	str	r7, [sp, #48]	; 0x30
    9fc8:	ldr	r2, [sp, #64]	; 0x40
    9fcc:	adc	r2, r3, r2
    9fd0:	str	r2, [sp, #64]	; 0x40
    9fd4:	ldr	r2, [sp, #60]	; 0x3c
    9fd8:	ldr	r0, [sp, #132]	; 0x84
    9fdc:	adds	r2, r0, r2
    9fe0:	str	r2, [sp, #60]	; 0x3c
    9fe4:	ldr	r0, [sp, #56]	; 0x38
    9fe8:	ldr	r1, [sp, #128]	; 0x80
    9fec:	adc	r0, r1, r0
    9ff0:	str	r0, [sp, #56]	; 0x38
    9ff4:	ldr	r0, [sp, #36]	; 0x24
    9ff8:	add	r0, r0, #128	; 0x80
    9ffc:	ldr	r6, [sp, #32]
    a000:	subs	r6, r6, #16
    a004:	add	r7, sp, #152	; 0x98
    a008:	bne	9c14 <rb_sha512_process_block+0x10c>
    a00c:	ldr	r0, [sp, #28]
    a010:	ldr	r1, [sp, #60]	; 0x3c
    a014:	ldr	r2, [sp, #56]	; 0x38
    a018:	stm	r0, {r1, r2}
    a01c:	ldr	r0, [sp, #64]	; 0x40
    a020:	ldr	r1, [sp]
    a024:	ldr	r2, [sp, #48]	; 0x30
    a028:	str	r2, [r1]
    a02c:	str	r0, [r1, #4]
    a030:	ldr	r0, [sp, #68]	; 0x44
    a034:	ldr	r1, [sp, #4]
    a038:	ldr	r2, [sp, #52]	; 0x34
    a03c:	str	r2, [r1]
    a040:	str	r0, [r1, #4]
    a044:	ldr	r0, [sp, #8]
    a048:	ldr	r1, [sp, #72]	; 0x48
    a04c:	stm	r0, {r1, sl}
    a050:	ldr	r0, [sp, #80]	; 0x50
    a054:	ldr	r1, [sp, #12]
    a058:	ldr	r2, [sp, #76]	; 0x4c
    a05c:	str	r2, [r1]
    a060:	str	r0, [r1, #4]
    a064:	ldr	r0, [sp, #88]	; 0x58
    a068:	ldr	r1, [sp, #16]
    a06c:	ldr	r2, [sp, #84]	; 0x54
    a070:	str	r2, [r1]
    a074:	str	r0, [r1, #4]
    a078:	ldr	r0, [sp, #96]	; 0x60
    a07c:	ldr	r1, [sp, #20]
    a080:	ldr	r2, [sp, #92]	; 0x5c
    a084:	str	r2, [r1]
    a088:	str	r0, [r1, #4]
    a08c:	ldr	r0, [sp, #100]	; 0x64
    a090:	ldr	r1, [sp, #24]
    a094:	str	lr, [r1]
    a098:	str	r0, [r1, #4]
    a09c:	sub	sp, fp, #28
    a0a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0a4:	.word	0x0000b4ec

0000a0a8 <rb_init_bh>:
    a0a8:	push	{fp, lr}
    a0ac:	mov	fp, sp
    a0b0:	mov	r0, #12
    a0b4:	bl	a0cc <rb_malloc>
    a0b8:	ldr	r1, [pc, #8]	; a0c8 <rb_init_bh+0x20>
    a0bc:	add	r1, pc, r1
    a0c0:	str	r0, [r1]
    a0c4:	pop	{fp, pc}
    a0c8:	.word	0x0003085c

0000a0cc <rb_malloc>:
    a0cc:	push	{fp, lr}
    a0d0:	mov	fp, sp
    a0d4:	mov	r1, r0
    a0d8:	mov	r0, #1
    a0dc:	bl	4f2c <calloc@plt>
    a0e0:	cmp	r0, #0
    a0e4:	popne	{fp, pc}
    a0e8:	bl	52a4 <rb_outofmemory@plt>

0000a0ec <rb_bh_create>:
    a0ec:	push	{r4, r5, r6, r7, fp, lr}
    a0f0:	add	fp, sp, #16
    a0f4:	cmp	r0, #0
    a0f8:	beq	a168 <rb_bh_create+0x7c>
    a0fc:	mov	r6, r1
    a100:	cmp	r1, #0
    a104:	ble	a168 <rb_bh_create+0x7c>
    a108:	mov	r7, r0
    a10c:	cmp	r0, #11
    a110:	bls	a178 <rb_bh_create+0x8c>
    a114:	mov	r4, r2
    a118:	mov	r0, #48	; 0x30
    a11c:	bl	a0cc <rb_malloc>
    a120:	mov	r5, r0
    a124:	str	r7, [r0, #12]
    a128:	str	r6, [r0, #16]
    a12c:	cmp	r4, #0
    a130:	beq	a144 <rb_bh_create+0x58>
    a134:	mov	r0, r4
    a138:	bl	a1d8 <rb_strdup>
    a13c:	str	r0, [r5, #44]	; 0x2c
    a140:	b	a14c <rb_bh_create+0x60>
    a144:	cmp	r5, #0
    a148:	beq	a188 <rb_bh_create+0x9c>
    a14c:	ldr	r2, [pc, #68]	; a198 <rb_bh_create+0xac>
    a150:	ldr	r2, [pc, r2]
    a154:	mov	r0, r5
    a158:	mov	r1, r5
    a15c:	bl	a210 <rb_dlinkAdd>
    a160:	mov	r0, r5
    a164:	pop	{r4, r5, r6, r7, fp, pc}
    a168:	ldr	r0, [pc, #44]	; a19c <rb_bh_create+0xb0>
    a16c:	add	r0, pc, r0
    a170:	mov	r1, #147	; 0x93
    a174:	bl	a1a8 <_rb_bh_fail>
    a178:	ldr	r0, [pc, #32]	; a1a0 <rb_bh_create+0xb4>
    a17c:	add	r0, pc, r0
    a180:	mov	r1, #151	; 0x97
    a184:	bl	a1a8 <_rb_bh_fail>
    a188:	ldr	r0, [pc, #20]	; a1a4 <rb_bh_create+0xb8>
    a18c:	add	r0, pc, r0
    a190:	mov	r1, #162	; 0xa2
    a194:	bl	a1a8 <_rb_bh_fail>
    a198:	.word	0x000307c8
    a19c:	.word	0x0000b4dc
    a1a0:	.word	0x0000b4fe
    a1a4:	.word	0x0000b529

0000a1a8 <_rb_bh_fail>:
    a1a8:	push	{fp, lr}
    a1ac:	mov	fp, sp
    a1b0:	mov	r3, r1
    a1b4:	mov	r1, r0
    a1b8:	ldr	r0, [pc, #16]	; a1d0 <_rb_bh_fail+0x28>
    a1bc:	add	r0, pc, r0
    a1c0:	ldr	r2, [pc, #12]	; a1d4 <_rb_bh_fail+0x2c>
    a1c4:	add	r2, pc, r2
    a1c8:	bl	5244 <rb_lib_log@plt>
    a1cc:	bl	4d10 <abort@plt>
    a1d0:	.word	0x0000b592
    a1d4:	.word	0x0000b4ad

0000a1d8 <rb_strdup>:
    a1d8:	push	{r4, r5, fp, lr}
    a1dc:	add	fp, sp, #8
    a1e0:	mov	r4, r0
    a1e4:	bl	510c <strlen@plt>
    a1e8:	add	r0, r0, #1
    a1ec:	bl	52c8 <malloc@plt>
    a1f0:	cmp	r0, #0
    a1f4:	beq	a20c <rb_strdup+0x34>
    a1f8:	mov	r5, r0
    a1fc:	mov	r1, r4
    a200:	bl	51b4 <strcpy@plt>
    a204:	mov	r0, r5
    a208:	pop	{r4, r5, fp, pc}
    a20c:	bl	52a4 <rb_outofmemory@plt>

0000a210 <rb_dlinkAdd>:
    a210:	mov	r3, #0
    a214:	stm	r1, {r0, r3}
    a218:	ldr	r0, [r2]
    a21c:	str	r0, [r1, #8]
    a220:	ldr	r0, [r2]
    a224:	cmp	r0, #0
    a228:	beq	a238 <rb_dlinkAdd+0x28>
    a22c:	add	r0, r0, #4
    a230:	str	r1, [r0]
    a234:	b	a248 <rb_dlinkAdd+0x38>
    a238:	mov	r0, r2
    a23c:	ldr	r3, [r0, #4]!
    a240:	cmp	r3, #0
    a244:	streq	r1, [r0]
    a248:	str	r1, [r2]
    a24c:	ldr	r0, [r2, #8]
    a250:	add	r0, r0, #1
    a254:	str	r0, [r2, #8]
    a258:	bx	lr

0000a25c <rb_bh_alloc>:
    a25c:	cmp	r0, #0
    a260:	beq	a26c <rb_bh_alloc+0x10>
    a264:	ldr	r0, [r0, #12]
    a268:	b	a0cc <rb_malloc>
    a26c:	push	{fp, lr}
    a270:	mov	fp, sp
    a274:	ldr	r0, [pc, #8]	; a284 <rb_bh_alloc+0x28>
    a278:	add	r0, pc, r0
    a27c:	mov	r1, #186	; 0xba
    a280:	bl	a1a8 <_rb_bh_fail>
    a284:	.word	0x0000b45d

0000a288 <rb_bh_free>:
    a288:	push	{fp, lr}
    a28c:	mov	fp, sp
    a290:	cmp	r0, #0
    a294:	beq	a2b0 <rb_bh_free+0x28>
    a298:	cmp	r1, #0
    a29c:	beq	a2bc <rb_bh_free+0x34>
    a2a0:	mov	r0, r1
    a2a4:	bl	a2d8 <rb_free>
    a2a8:	mov	r0, #0
    a2ac:	pop	{fp, pc}
    a2b0:	ldr	r0, [pc, #24]	; a2d0 <rb_bh_free+0x48>
    a2b4:	add	r0, pc, r0
    a2b8:	b	a2c4 <rb_bh_free+0x3c>
    a2bc:	ldr	r0, [pc, #16]	; a2d4 <rb_bh_free+0x4c>
    a2c0:	add	r0, pc, r0
    a2c4:	bl	5244 <rb_lib_log@plt>
    a2c8:	mov	r0, #1
    a2cc:	pop	{fp, pc}
    a2d0:	.word	0x0000b43f
    a2d4:	.word	0x0000b453

0000a2d8 <rb_free>:
    a2d8:	cmp	r0, #0
    a2dc:	bxeq	lr
    a2e0:	b	501c <free@plt>

0000a2e4 <rb_bh_destroy>:
    a2e4:	cmp	r0, #0
    a2e8:	moveq	r0, #1
    a2ec:	bxeq	lr
    a2f0:	push	{r4, sl, fp, lr}
    a2f4:	add	fp, sp, #8
    a2f8:	mov	r4, r0
    a2fc:	ldr	r1, [pc, #28]	; a320 <rb_bh_destroy+0x3c>
    a300:	ldr	r1, [pc, r1]
    a304:	bl	a324 <rb_dlinkDelete>
    a308:	ldr	r0, [r4, #44]	; 0x2c
    a30c:	bl	a2d8 <rb_free>
    a310:	mov	r0, r4
    a314:	bl	a2d8 <rb_free>
    a318:	mov	r0, #0
    a31c:	pop	{r4, sl, fp, pc}
    a320:	.word	0x00030618

0000a324 <rb_dlinkDelete>:
    a324:	ldr	ip, [r0, #4]
    a328:	ldr	r3, [r0, #8]
    a32c:	add	r2, r3, #4
    a330:	cmp	r3, #0
    a334:	addeq	r2, r1, #4
    a338:	str	ip, [r2]
    a33c:	ldmib	r0, {r2, ip}
    a340:	cmp	r2, #0
    a344:	mov	r3, r1
    a348:	addne	r3, r2, #8
    a34c:	str	ip, [r3]
    a350:	mov	r2, #0
    a354:	str	r2, [r0, #4]
    a358:	str	r2, [r0, #8]
    a35c:	ldr	r0, [r1, #8]
    a360:	sub	r0, r0, #1
    a364:	str	r0, [r1, #8]
    a368:	bx	lr

0000a36c <rb_bh_usage>:
    a36c:	cmp	r1, #0
    a370:	movne	r0, #0
    a374:	strne	r0, [r1]
    a378:	cmp	r2, #0
    a37c:	movne	r0, #0
    a380:	strne	r0, [r2]
    a384:	ldr	r0, [sp]
    a388:	cmp	r3, #0
    a38c:	movne	r1, #0
    a390:	strne	r1, [r3]
    a394:	cmp	r0, #0
    a398:	ldrne	r1, [pc, #8]	; a3a8 <rb_bh_usage+0x3c>
    a39c:	addne	r1, pc, r1
    a3a0:	strne	r1, [r0]
    a3a4:	bx	lr
    a3a8:	.word	0x0000b396

0000a3ac <rb_bh_usage_all>:
    a3ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a3b0:	add	fp, sp, #24
    a3b4:	sub	sp, sp, #8
    a3b8:	cmp	r0, #0
    a3bc:	beq	a428 <rb_bh_usage_all+0x7c>
    a3c0:	mov	r5, r0
    a3c4:	ldr	r0, [pc, #100]	; a430 <rb_bh_usage_all+0x84>
    a3c8:	ldr	r0, [pc, r0]
    a3cc:	ldr	r6, [r0]
    a3d0:	cmp	r6, #0
    a3d4:	beq	a428 <rb_bh_usage_all+0x7c>
    a3d8:	mov	r8, r1
    a3dc:	ldr	r7, [pc, #80]	; a434 <rb_bh_usage_all+0x88>
    a3e0:	add	r7, pc, r7
    a3e4:	ldr	r0, [r6]
    a3e8:	ldr	r2, [r0, #12]
    a3ec:	ldr	r3, [r0, #16]
    a3f0:	ldr	r4, [r0, #28]
    a3f4:	ldr	r1, [r0, #40]	; 0x28
    a3f8:	ldr	r0, [r0, #44]	; 0x2c
    a3fc:	cmp	r0, #0
    a400:	movne	r7, r0
    a404:	stm	sp, {r7, r8}
    a408:	mul	r0, r3, r4
    a40c:	mul	r3, r0, r2
    a410:	sub	r0, r0, r1
    a414:	mul	r2, r0, r2
    a418:	blx	r5
    a41c:	ldr	r6, [r6, #8]
    a420:	cmp	r6, #0
    a424:	bne	a3e4 <rb_bh_usage_all+0x38>
    a428:	sub	sp, fp, #24
    a42c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a430:	.word	0x00030550
    a434:	.word	0x0000b35f

0000a438 <rb_bh_total_usage>:
    a438:	push	{r4, r5, r6, sl, fp, lr}
    a43c:	add	fp, sp, #16
    a440:	ldr	r2, [pc, #100]	; a4ac <rb_bh_total_usage+0x74>
    a444:	ldr	r2, [pc, r2]
    a448:	ldr	r2, [r2]
    a44c:	cmp	r2, #0
    a450:	beq	a490 <rb_bh_total_usage+0x58>
    a454:	mov	lr, #0
    a458:	mov	ip, #0
    a45c:	ldr	r3, [r2]
    a460:	ldr	r2, [r2, #8]
    a464:	ldr	r4, [r3, #12]
    a468:	ldr	r5, [r3, #16]
    a46c:	ldr	r6, [r3, #28]
    a470:	ldr	r3, [r3, #40]	; 0x28
    a474:	mul	r5, r5, r6
    a478:	mla	lr, r5, r4, lr
    a47c:	sub	r3, r5, r3
    a480:	mla	ip, r3, r4, ip
    a484:	cmp	r2, #0
    a488:	bne	a45c <rb_bh_total_usage+0x24>
    a48c:	b	a498 <rb_bh_total_usage+0x60>
    a490:	mov	ip, #0
    a494:	mov	lr, #0
    a498:	cmp	r0, #0
    a49c:	strne	lr, [r0]
    a4a0:	cmp	r1, #0
    a4a4:	strne	ip, [r1]
    a4a8:	pop	{r4, r5, r6, sl, fp, pc}
    a4ac:	.word	0x000304d4

0000a4b0 <rb_get_sockerr>:
    a4b0:	push	{r4, r5, r6, r7, fp, lr}
    a4b4:	add	fp, sp, #16
    a4b8:	sub	sp, sp, #16
    a4bc:	mov	r5, r0
    a4c0:	mov	r0, #0
    a4c4:	str	r0, [sp, #12]
    a4c8:	mov	r0, #4
    a4cc:	str	r0, [sp, #8]
    a4d0:	ldrb	r7, [r5, #17]
    a4d4:	bl	5610 <__errno_location@plt>
    a4d8:	ldr	r6, [r0]
    a4dc:	tst	r7, #4
    a4e0:	moveq	r0, r6
    a4e4:	subeq	sp, fp, #16
    a4e8:	popeq	{r4, r5, r6, r7, fp, pc}
    a4ec:	mov	r4, r0
    a4f0:	mov	r0, r5
    a4f4:	bl	4e30 <rb_get_fd@plt>
    a4f8:	add	r1, sp, #8
    a4fc:	str	r1, [sp]
    a500:	add	r3, sp, #12
    a504:	mov	r1, #1
    a508:	mov	r2, #4
    a50c:	bl	5598 <getsockopt@plt>
    a510:	mov	r1, r0
    a514:	ldr	r0, [sp, #12]
    a518:	cmp	r0, #0
    a51c:	moveq	r0, r6
    a520:	cmp	r1, #0
    a524:	movne	r0, r6
    a528:	str	r0, [r4]
    a52c:	sub	sp, fp, #16
    a530:	pop	{r4, r5, r6, r7, fp, pc}

0000a534 <rb_get_fd>:
    a534:	cmp	r0, #0
    a538:	ldrne	r0, [r0, #12]
    a53c:	mvneq	r0, #0
    a540:	bx	lr

0000a544 <rb_getmaxconnect>:
    a544:	ldr	r0, [pc, #8]	; a554 <rb_getmaxconnect+0x10>
    a548:	ldr	r0, [pc, r0]
    a54c:	ldr	r0, [r0]
    a550:	bx	lr
    a554:	.word	0x0001de40

0000a558 <rb_set_buffers>:
    a558:	push	{r4, r5, fp, lr}
    a55c:	add	fp, sp, #8
    a560:	sub	sp, sp, #8
    a564:	str	r1, [sp, #4]
    a568:	cmp	r0, #0
    a56c:	beq	a598 <rb_set_buffers+0x40>
    a570:	mov	r4, r0
    a574:	ldr	r0, [r0, #12]
    a578:	mov	r5, #4
    a57c:	str	r5, [sp]
    a580:	add	r3, sp, #4
    a584:	mov	r1, #1
    a588:	mov	r2, #8
    a58c:	bl	55bc <setsockopt@plt>
    a590:	cmp	r0, #0
    a594:	beq	a5a4 <rb_set_buffers+0x4c>
    a598:	mov	r0, #0
    a59c:	sub	sp, fp, #8
    a5a0:	pop	{r4, r5, fp, pc}
    a5a4:	ldr	r0, [r4, #12]
    a5a8:	str	r5, [sp]
    a5ac:	add	r3, sp, #4
    a5b0:	mov	r1, #1
    a5b4:	mov	r2, #7
    a5b8:	bl	55bc <setsockopt@plt>
    a5bc:	clz	r0, r0
    a5c0:	lsr	r0, r0, #5
    a5c4:	sub	sp, fp, #8
    a5c8:	pop	{r4, r5, fp, pc}

0000a5cc <rb_set_nb>:
    a5cc:	push	{r4, r5, fp, lr}
    a5d0:	add	fp, sp, #8
    a5d4:	cmp	r0, #0
    a5d8:	beq	a630 <rb_set_nb+0x64>
    a5dc:	ldr	r4, [r0, #12]
    a5e0:	bl	5448 <rb_setup_fd@plt>
    a5e4:	mov	r5, r0
    a5e8:	cmp	r0, #0
    a5ec:	bne	a634 <rb_set_nb+0x68>
    a5f0:	mov	r5, #0
    a5f4:	mov	r0, r4
    a5f8:	mov	r1, #3
    a5fc:	mov	r2, #0
    a600:	bl	5520 <fcntl@plt>
    a604:	cmn	r0, #1
    a608:	beq	a634 <rb_set_nb+0x68>
    a60c:	orr	r2, r0, #2048	; 0x800
    a610:	mov	r0, r4
    a614:	mov	r1, #4
    a618:	bl	5520 <fcntl@plt>
    a61c:	add	r1, r0, #1
    a620:	cmn	r0, #1
    a624:	movwne	r1, #1
    a628:	mov	r0, r1
    a62c:	pop	{r4, r5, fp, pc}
    a630:	mov	r5, #0
    a634:	mov	r0, r5
    a638:	pop	{r4, r5, fp, pc}

0000a63c <rb_setup_fd>:
    a63c:	ldr	r1, [pc, #4]	; a648 <rb_setup_fd+0xc>
    a640:	ldr	r1, [pc, r1]
    a644:	bx	r1
    a648:	.word	0x00030330

0000a64c <rb_settimeout>:
    a64c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a650:	add	fp, sp, #24
    a654:	cmp	r0, #0
    a658:	beq	a6f0 <rb_settimeout+0xa4>
    a65c:	mov	r7, r2
    a660:	mov	r4, r0
    a664:	ldr	r5, [r0, #44]	; 0x2c
    a668:	cmp	r2, #0
    a66c:	beq	a6f4 <rb_settimeout+0xa8>
    a670:	mov	r8, r3
    a674:	mov	r6, r1
    a678:	cmp	r5, #0
    a67c:	bne	a690 <rb_settimeout+0x44>
    a680:	mov	r0, #28
    a684:	bl	a7bc <rb_malloc>
    a688:	mov	r5, r0
    a68c:	str	r0, [r4, #44]	; 0x2c
    a690:	str	r4, [r5]
    a694:	bl	5118 <rb_current_time@plt>
    a698:	add	r0, r0, r6
    a69c:	add	r1, r5, #16
    a6a0:	stm	r1, {r0, r7, r8}
    a6a4:	add	r1, r5, #4
    a6a8:	ldr	r2, [pc, #164]	; a754 <rb_settimeout+0x108>
    a6ac:	add	r2, pc, r2
    a6b0:	mov	r0, r5
    a6b4:	bl	a7dc <rb_dlinkAdd>
    a6b8:	ldr	r0, [pc, #152]	; a758 <rb_settimeout+0x10c>
    a6bc:	ldr	r0, [pc, r0]
    a6c0:	cmp	r0, #0
    a6c4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    a6c8:	ldr	r1, [pc, #140]	; a75c <rb_settimeout+0x110>
    a6cc:	ldr	r1, [pc, r1]
    a6d0:	ldr	r0, [pc, #136]	; a760 <rb_settimeout+0x114>
    a6d4:	add	r0, pc, r0
    a6d8:	mov	r2, #0
    a6dc:	mov	r3, #5
    a6e0:	bl	5424 <rb_event_add@plt>
    a6e4:	ldr	r1, [pc, #120]	; a764 <rb_settimeout+0x118>
    a6e8:	add	r1, pc, r1
    a6ec:	str	r0, [r1]
    a6f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a6f4:	cmp	r5, #0
    a6f8:	beq	a6f0 <rb_settimeout+0xa4>
    a6fc:	add	r0, r5, #4
    a700:	ldr	r6, [pc, #64]	; a748 <rb_settimeout+0xfc>
    a704:	add	r6, pc, r6
    a708:	mov	r1, r6
    a70c:	bl	a768 <rb_dlinkDelete>
    a710:	mov	r0, r5
    a714:	bl	a7b0 <rb_free>
    a718:	mov	r5, #0
    a71c:	str	r5, [r4, #44]	; 0x2c
    a720:	ldr	r0, [r6, #8]
    a724:	cmp	r0, #0
    a728:	bne	a6f0 <rb_settimeout+0xa4>
    a72c:	ldr	r0, [pc, #24]	; a74c <rb_settimeout+0x100>
    a730:	ldr	r0, [pc, r0]
    a734:	bl	4de8 <rb_event_delete@plt>
    a738:	ldr	r0, [pc, #16]	; a750 <rb_settimeout+0x104>
    a73c:	add	r0, pc, r0
    a740:	str	r5, [r0]
    a744:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a748:	.word	0x0003021c
    a74c:	.word	0x000301fc
    a750:	.word	0x000301f0
    a754:	.word	0x00030274
    a758:	.word	0x00030270
    a75c:	.word	0x0001dc6c
    a760:	.word	0x0000b0a0
    a764:	.word	0x00030244

0000a768 <rb_dlinkDelete>:
    a768:	ldr	ip, [r0, #4]
    a76c:	ldr	r3, [r0, #8]
    a770:	add	r2, r3, #4
    a774:	cmp	r3, #0
    a778:	addeq	r2, r1, #4
    a77c:	str	ip, [r2]
    a780:	ldmib	r0, {r2, ip}
    a784:	cmp	r2, #0
    a788:	mov	r3, r1
    a78c:	addne	r3, r2, #8
    a790:	str	ip, [r3]
    a794:	mov	r2, #0
    a798:	str	r2, [r0, #4]
    a79c:	str	r2, [r0, #8]
    a7a0:	ldr	r0, [r1, #8]
    a7a4:	sub	r0, r0, #1
    a7a8:	str	r0, [r1, #8]
    a7ac:	bx	lr

0000a7b0 <rb_free>:
    a7b0:	cmp	r0, #0
    a7b4:	bxeq	lr
    a7b8:	b	501c <free@plt>

0000a7bc <rb_malloc>:
    a7bc:	push	{fp, lr}
    a7c0:	mov	fp, sp
    a7c4:	mov	r1, r0
    a7c8:	mov	r0, #1
    a7cc:	bl	4f2c <calloc@plt>
    a7d0:	cmp	r0, #0
    a7d4:	popne	{fp, pc}
    a7d8:	bl	52a4 <rb_outofmemory@plt>

0000a7dc <rb_dlinkAdd>:
    a7dc:	mov	r3, #0
    a7e0:	stm	r1, {r0, r3}
    a7e4:	ldr	r0, [r2]
    a7e8:	str	r0, [r1, #8]
    a7ec:	ldr	r0, [r2]
    a7f0:	cmp	r0, #0
    a7f4:	beq	a804 <rb_dlinkAdd+0x28>
    a7f8:	add	r0, r0, #4
    a7fc:	str	r1, [r0]
    a800:	b	a814 <rb_dlinkAdd+0x38>
    a804:	mov	r0, r2
    a808:	ldr	r3, [r0, #4]!
    a80c:	cmp	r3, #0
    a810:	streq	r1, [r0]
    a814:	str	r1, [r2]
    a818:	ldr	r0, [r2, #8]
    a81c:	add	r0, r0, #1
    a820:	str	r0, [r2, #8]
    a824:	bx	lr

0000a828 <rb_checktimeouts>:
    a828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a82c:	add	fp, sp, #28
    a830:	sub	sp, sp, #4
    a834:	ldr	r4, [pc, #136]	; a8c4 <rb_checktimeouts+0x9c>
    a838:	ldr	r4, [pc, r4]
    a83c:	cmp	r4, #0
    a840:	beq	a8bc <rb_checktimeouts+0x94>
    a844:	ldr	r8, [pc, #124]	; a8c8 <rb_checktimeouts+0xa0>
    a848:	add	r8, pc, r8
    a84c:	mov	r9, #0
    a850:	ldr	r6, [r4]
    a854:	ldr	r4, [r4, #8]
    a858:	ldr	r5, [r6]
    a85c:	cmp	r5, #0
    a860:	ldrbne	r0, [r5, #16]
    a864:	tstne	r0, #1
    a868:	bne	a878 <rb_checktimeouts+0x50>
    a86c:	cmp	r4, #0
    a870:	bne	a850 <rb_checktimeouts+0x28>
    a874:	b	a8bc <rb_checktimeouts+0x94>
    a878:	ldr	r7, [r6, #16]
    a87c:	bl	5118 <rb_current_time@plt>
    a880:	cmp	r7, r0
    a884:	bge	a86c <rb_checktimeouts+0x44>
    a888:	ldr	sl, [r6, #20]
    a88c:	ldr	r7, [r6, #24]
    a890:	add	r0, r6, #4
    a894:	mov	r1, r8
    a898:	bl	a768 <rb_dlinkDelete>
    a89c:	str	r9, [r5, #44]	; 0x2c
    a8a0:	mov	r0, r6
    a8a4:	bl	a7b0 <rb_free>
    a8a8:	mov	r0, r5
    a8ac:	mov	r1, r7
    a8b0:	blx	sl
    a8b4:	cmp	r4, #0
    a8b8:	bne	a850 <rb_checktimeouts+0x28>
    a8bc:	sub	sp, fp, #28
    a8c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8c4:	.word	0x000300e8
    a8c8:	.word	0x000300d8

0000a8cc <rb_bind>:
    a8cc:	push	{r4, r5, fp, lr}
    a8d0:	add	fp, sp, #8
    a8d4:	mov	r4, r1
    a8d8:	mov	r5, r0
    a8dc:	bl	a908 <rb_setsockopt_reuseaddr>
    a8e0:	cmp	r0, #0
    a8e4:	popne	{r4, r5, fp, pc}
    a8e8:	ldrh	r0, [r4]
    a8ec:	mov	r2, #28
    a8f0:	cmp	r0, #2
    a8f4:	movweq	r2, #16
    a8f8:	ldr	r0, [r5, #12]
    a8fc:	mov	r1, r4
    a900:	pop	{r4, r5, fp, lr}
    a904:	b	5238 <bind@plt>

0000a908 <rb_setsockopt_reuseaddr>:
    a908:	push	{r4, r5, r6, sl, fp, lr}
    a90c:	add	fp, sp, #16
    a910:	sub	sp, sp, #8
    a914:	mov	r5, r0
    a918:	mov	r0, #1
    a91c:	str	r0, [sp, #4]
    a920:	ldr	r0, [r5, #12]
    a924:	mov	r1, #4
    a928:	str	r1, [sp]
    a92c:	add	r3, sp, #4
    a930:	mov	r1, #1
    a934:	mov	r2, #2
    a938:	bl	55bc <setsockopt@plt>
    a93c:	mov	r4, r0
    a940:	cmp	r0, #0
    a944:	beq	a96c <rb_setsockopt_reuseaddr+0x64>
    a948:	ldr	r6, [r5, #12]
    a94c:	mov	r0, r5
    a950:	bl	53ac <rb_get_sockerr@plt>
    a954:	bl	4cec <strerror@plt>
    a958:	mov	r2, r0
    a95c:	ldr	r0, [pc, #20]	; a978 <rb_setsockopt_reuseaddr+0x70>
    a960:	add	r0, pc, r0
    a964:	mov	r1, r6
    a968:	bl	5244 <rb_lib_log@plt>
    a96c:	mov	r0, r4
    a970:	sub	sp, fp, #16
    a974:	pop	{r4, r5, r6, sl, fp, pc}
    a978:	.word	0x0000afdb

0000a97c <rb_sctp_bindx>:
    a97c:	mvn	r0, #0
    a980:	bx	lr

0000a984 <rb_inet_get_proto>:
    a984:	mov	r0, #6
    a988:	bx	lr

0000a98c <rb_accept_tcp>:
    a98c:	cmp	r0, #0
    a990:	bxeq	lr
    a994:	push	{r4, r5, r6, r7, fp, lr}
    a998:	add	fp, sp, #16
    a99c:	mov	r4, r3
    a9a0:	mov	r7, r2
    a9a4:	mov	r6, r1
    a9a8:	mov	r5, r0
    a9ac:	mov	r0, #144	; 0x90
    a9b0:	bl	a7bc <rb_malloc>
    a9b4:	str	r0, [r5, #52]	; 0x34
    a9b8:	str	r7, [r0, #132]	; 0x84
    a9bc:	str	r6, [r0, #136]	; 0x88
    a9c0:	str	r4, [r0, #140]	; 0x8c
    a9c4:	mov	r0, r5
    a9c8:	mov	r1, #0
    a9cc:	pop	{r4, r5, r6, r7, fp, lr}
    a9d0:	b	a9d4 <rb_accept_tryaccept>

0000a9d4 <rb_accept_tryaccept>:
    a9d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9d8:	add	fp, sp, #28
    a9dc:	sub	sp, sp, #4
    a9e0:	vpush	{d8-d9}
    a9e4:	sub	sp, sp, #152	; 0x98
    a9e8:	mov	r4, r0
    a9ec:	vmov.i32	q4, #0	; 0x00000000
    a9f0:	add	r5, sp, #24
    a9f4:	add	r0, r5, #96	; 0x60
    a9f8:	str	r0, [sp, #16]
    a9fc:	vst1.64	{d8-d9}, [r0]
    aa00:	add	r0, r5, #80	; 0x50
    aa04:	str	r0, [sp, #12]
    aa08:	vst1.64	{d8-d9}, [r0]
    aa0c:	add	r0, r5, #64	; 0x40
    aa10:	str	r0, [sp, #8]
    aa14:	vst1.64	{d8-d9}, [r0]
    aa18:	add	r0, r5, #48	; 0x30
    aa1c:	str	r0, [sp, #4]
    aa20:	vst1.64	{d8-d9}, [r0]
    aa24:	add	sl, r5, #32
    aa28:	vst1.64	{d8-d9}, [sl]
    aa2c:	add	r8, r5, #16
    aa30:	vst1.64	{d8-d9}, [r8]
    aa34:	mov	r1, #112	; 0x70
    aa38:	mov	r0, r5
    aa3c:	vst1.64	{d8-d9}, [r0], r1
    aa40:	vst1.64	{d8-d9}, [r0]
    aa44:	mov	r0, #128	; 0x80
    aa48:	str	r0, [sp, #20]
    aa4c:	ldr	r0, [r4, #12]
    aa50:	add	r2, sp, #20
    aa54:	mov	r1, r5
    aa58:	bl	5094 <accept@plt>
    aa5c:	cmp	r0, #0
    aa60:	blt	abb0 <rb_accept_tryaccept+0x1dc>
    aa64:	mov	r9, r0
    aa68:	b	aa88 <rb_accept_tryaccept+0xb4>
    aa6c:	ldr	r1, [r6, #12]
    aa70:	ldr	r0, [pc, #364]	; abe4 <rb_accept_tryaccept+0x210>
    aa74:	add	r0, pc, r0
    aa78:	bl	5244 <rb_lib_log@plt>
    aa7c:	mov	r0, r6
    aa80:	bl	5190 <rb_close@plt>
    aa84:	b	aabc <rb_accept_tryaccept+0xe8>
    aa88:	ldrb	r0, [r4, #17]
    aa8c:	and	r0, r0, #128	; 0x80
    aa90:	orr	r1, r0, #4
    aa94:	mov	r0, r9
    aa98:	ldr	r2, [pc, #312]	; abd8 <rb_accept_tryaccept+0x204>
    aa9c:	add	r2, pc, r2
    aaa0:	bl	53a0 <rb_open@plt>
    aaa4:	cmp	r0, #0
    aaa8:	beq	ab24 <rb_accept_tryaccept+0x150>
    aaac:	mov	r6, r0
    aab0:	bl	4f5c <rb_set_nb@plt>
    aab4:	cmp	r0, #0
    aab8:	beq	aa6c <rb_accept_tryaccept+0x98>
    aabc:	mov	r0, r5
    aac0:	bl	cf14 <mangle_mapped_sockaddr>
    aac4:	ldr	r0, [r4, #52]	; 0x34
    aac8:	ldr	r7, [r0, #136]	; 0x88
    aacc:	cmp	r7, #0
    aad0:	beq	aaf0 <rb_accept_tryaccept+0x11c>
    aad4:	ldr	r3, [r0, #140]	; 0x8c
    aad8:	ldr	r2, [sp, #20]
    aadc:	mov	r0, r6
    aae0:	mov	r1, r5
    aae4:	blx	r7
    aae8:	cmp	r0, #0
    aaec:	beq	ab54 <rb_accept_tryaccept+0x180>
    aaf0:	ldrb	r0, [r4, #17]
    aaf4:	tst	r0, #32
    aaf8:	bne	ab40 <rb_accept_tryaccept+0x16c>
    aafc:	ldr	r0, [r4, #52]	; 0x34
    ab00:	ldr	r7, [r0, #132]	; 0x84
    ab04:	ldr	r0, [r0, #140]	; 0x8c
    ab08:	ldr	r3, [sp, #20]
    ab0c:	str	r0, [sp]
    ab10:	mov	r0, r6
    ab14:	mov	r1, #0
    ab18:	mov	r2, r5
    ab1c:	blx	r7
    ab20:	b	ab54 <rb_accept_tryaccept+0x180>
    ab24:	ldr	r0, [pc, #176]	; abdc <rb_accept_tryaccept+0x208>
    ab28:	add	r0, pc, r0
    ab2c:	mov	r1, r9
    ab30:	bl	5244 <rb_lib_log@plt>
    ab34:	mov	r0, r9
    ab38:	bl	5268 <close@plt>
    ab3c:	b	ab54 <rb_accept_tryaccept+0x180>
    ab40:	ldr	r3, [sp, #20]
    ab44:	mov	r0, r4
    ab48:	mov	r1, r6
    ab4c:	mov	r2, r5
    ab50:	bl	de2c <rb_ssl_accept_setup>
    ab54:	mov	r0, r5
    ab58:	mov	r1, #112	; 0x70
    ab5c:	vst1.64	{d8-d9}, [r0], r1
    ab60:	vst1.64	{d8-d9}, [r0]
    ab64:	ldr	r0, [sp, #16]
    ab68:	vst1.64	{d8-d9}, [r0]
    ab6c:	ldr	r0, [sp, #12]
    ab70:	vst1.64	{d8-d9}, [r0]
    ab74:	ldr	r0, [sp, #8]
    ab78:	vst1.64	{d8-d9}, [r0]
    ab7c:	ldr	r0, [sp, #4]
    ab80:	vst1.64	{d8-d9}, [r0]
    ab84:	vst1.64	{d8-d9}, [sl]
    ab88:	vst1.64	{d8-d9}, [r8]
    ab8c:	mov	r0, #128	; 0x80
    ab90:	str	r0, [sp, #20]
    ab94:	ldr	r0, [r4, #12]
    ab98:	mov	r1, r5
    ab9c:	add	r2, sp, #20
    aba0:	bl	5094 <accept@plt>
    aba4:	mov	r9, r0
    aba8:	cmp	r0, #0
    abac:	bge	aa88 <rb_accept_tryaccept+0xb4>
    abb0:	ldr	r2, [pc, #40]	; abe0 <rb_accept_tryaccept+0x20c>
    abb4:	add	r2, pc, r2
    abb8:	mov	r0, r4
    abbc:	mov	r1, #1
    abc0:	mov	r3, #0
    abc4:	bl	4df4 <rb_setselect@plt>
    abc8:	sub	sp, fp, #48	; 0x30
    abcc:	vpop	{d8-d9}
    abd0:	add	sp, sp, #4
    abd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abd8:	.word	0x0000aede
    abdc:	.word	0x0000ae66
    abe0:	.word	0xfffffe18
    abe4:	.word	0x0000af60

0000abe8 <rb_connect_tcp>:
    abe8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    abec:	add	fp, sp, #24
    abf0:	cmp	r0, #0
    abf4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    abf8:	mov	r5, r3
    abfc:	mov	r6, r2
    ac00:	mov	r9, r1
    ac04:	mov	r4, r0
    ac08:	ldr	r8, [fp, #12]
    ac0c:	ldr	r7, [fp, #8]
    ac10:	mov	r0, #268	; 0x10c
    ac14:	bl	a7bc <rb_malloc>
    ac18:	str	r0, [r4, #48]	; 0x30
    ac1c:	str	r5, [r0, #260]	; 0x104
    ac20:	str	r7, [r0, #264]	; 0x108
    ac24:	add	r0, r0, #128	; 0x80
    ac28:	mov	r1, r9
    ac2c:	mov	r2, #128	; 0x80
    ac30:	bl	5130 <memcpy@plt>
    ac34:	cmp	r6, #0
    ac38:	beq	ac60 <rb_connect_tcp+0x78>
    ac3c:	ldrh	r0, [r6]
    ac40:	mov	r2, #28
    ac44:	cmp	r0, #2
    ac48:	movweq	r2, #16
    ac4c:	ldr	r0, [r4, #12]
    ac50:	mov	r1, r6
    ac54:	bl	5238 <bind@plt>
    ac58:	cmn	r0, #1
    ac5c:	ble	acbc <rb_connect_tcp+0xd4>
    ac60:	ldr	r2, [pc, #156]	; ad04 <rb_connect_tcp+0x11c>
    ac64:	add	r2, pc, r2
    ac68:	mov	r0, r4
    ac6c:	mov	r1, r8
    ac70:	mov	r3, #0
    ac74:	bl	4d34 <rb_settimeout@plt>
    ac78:	ldr	r0, [r4, #12]
    ac7c:	ldr	r1, [r4, #48]	; 0x30
    ac80:	ldrh	r3, [r1, #128]!	; 0x80
    ac84:	mov	r2, #28
    ac88:	cmp	r3, #2
    ac8c:	movweq	r2, #16
    ac90:	bl	4d1c <connect@plt>
    ac94:	cmn	r0, #1
    ac98:	bgt	acac <rb_connect_tcp+0xc4>
    ac9c:	bl	5610 <__errno_location@plt>
    aca0:	ldr	r0, [r0]
    aca4:	cmp	r0, #106	; 0x6a
    aca8:	bne	accc <rb_connect_tcp+0xe4>
    acac:	mov	r0, r4
    acb0:	mov	r1, #0
    acb4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    acb8:	b	ad0c <rb_connect_callback>
    acbc:	mov	r0, r4
    acc0:	mov	r1, #1
    acc4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    acc8:	b	ad0c <rb_connect_callback>
    accc:	bl	4d28 <rb_ignore_errno@plt>
    acd0:	cmp	r0, #0
    acd4:	beq	acf4 <rb_connect_tcp+0x10c>
    acd8:	ldr	r2, [pc, #40]	; ad08 <rb_connect_tcp+0x120>
    acdc:	add	r2, pc, r2
    ace0:	mov	r0, r4
    ace4:	mov	r1, #2
    ace8:	mov	r3, #0
    acec:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    acf0:	b	add0 <rb_setselect>
    acf4:	mov	r0, r4
    acf8:	mov	r1, #4
    acfc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    ad00:	b	ad0c <rb_connect_callback>
    ad04:	.word	0x0000011c
    ad08:	.word	0x000000fc

0000ad0c <rb_connect_callback>:
    ad0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    ad10:	add	fp, sp, #24
    ad14:	mov	r4, r1
    ad18:	mov	r5, r0
    ad1c:	bl	5610 <__errno_location@plt>
    ad20:	cmp	r5, #0
    ad24:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    ad28:	mov	r6, r0
    ad2c:	ldr	r0, [r5, #48]	; 0x30
    ad30:	cmp	r0, #0
    ad34:	ldrne	r1, [r0, #260]	; 0x104
    ad38:	cmpne	r1, #0
    ad3c:	bne	ad44 <rb_connect_callback+0x38>
    ad40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    ad44:	ldr	r8, [r6]
    ad48:	mov	r9, r1
    ad4c:	mov	r1, #0
    ad50:	str	r1, [r0, #260]	; 0x104
    ad54:	ldr	r7, [r0, #264]	; 0x108
    ad58:	mov	r0, r5
    ad5c:	mov	r1, #0
    ad60:	mov	r2, #0
    ad64:	mov	r3, #0
    ad68:	bl	4d34 <rb_settimeout@plt>
    ad6c:	str	r8, [r6]
    ad70:	mov	r0, r5
    ad74:	mov	r1, r4
    ad78:	mov	r2, r7
    ad7c:	mov	r3, r9
    ad80:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    ad84:	bx	r3

0000ad88 <rb_connect_timeout>:
    ad88:	mov	r1, #3
    ad8c:	b	ad0c <rb_connect_callback>

0000ad90 <rb_ignore_errno>:
    ad90:	mov	r1, r0
    ad94:	sub	r2, r0, #85	; 0x55
    ad98:	mov	r0, #1
    ad9c:	cmp	r2, #30
    ada0:	bhi	adb8 <rb_ignore_errno+0x28>
    ada4:	mov	ip, #1
    ada8:	movw	r3, #1
    adac:	movt	r3, #16400	; 0x4010
    adb0:	tst	r3, ip, lsl r2
    adb4:	bxne	lr
    adb8:	cmp	r1, #4
    adbc:	cmpne	r1, #11
    adc0:	bne	adc8 <rb_ignore_errno+0x38>
    adc4:	bx	lr
    adc8:	mov	r0, #0
    adcc:	bx	lr

0000add0 <rb_setselect>:
    add0:	ldr	ip, [pc, #4]	; addc <rb_setselect+0xc>
    add4:	ldr	ip, [pc, ip]
    add8:	bx	ip
    addc:	.word	0x0002fb94

0000ade0 <rb_connect_outcome>:
    ade0:	push	{r4, r5, fp, lr}
    ade4:	add	fp, sp, #8
    ade8:	sub	sp, sp, #16
    adec:	mov	r4, r0
    adf0:	mov	r0, #0
    adf4:	str	r0, [sp, #12]
    adf8:	mov	r0, #4
    adfc:	str	r0, [sp, #8]
    ae00:	cmp	r4, #0
    ae04:	beq	ae1c <rb_connect_outcome+0x3c>
    ae08:	ldr	r0, [r4, #48]	; 0x30
    ae0c:	cmp	r0, #0
    ae10:	ldrne	r0, [r0, #260]	; 0x104
    ae14:	cmpne	r0, #0
    ae18:	bne	ae24 <rb_connect_outcome+0x44>
    ae1c:	sub	sp, fp, #8
    ae20:	pop	{r4, r5, fp, pc}
    ae24:	ldr	r0, [r4, #12]
    ae28:	add	r1, sp, #8
    ae2c:	str	r1, [sp]
    ae30:	add	r3, sp, #12
    ae34:	mov	r1, #1
    ae38:	mov	r2, #4
    ae3c:	bl	5598 <getsockopt@plt>
    ae40:	cmp	r0, #0
    ae44:	blt	ae60 <rb_connect_outcome+0x80>
    ae48:	ldr	r5, [sp, #12]
    ae4c:	cmp	r5, #0
    ae50:	beq	ae60 <rb_connect_outcome+0x80>
    ae54:	bl	5610 <__errno_location@plt>
    ae58:	str	r5, [r0]
    ae5c:	b	ae74 <rb_connect_outcome+0x94>
    ae60:	cmn	r0, #1
    ae64:	ble	ae74 <rb_connect_outcome+0x94>
    ae68:	mov	r0, r4
    ae6c:	mov	r1, #0
    ae70:	b	ae7c <rb_connect_outcome+0x9c>
    ae74:	mov	r0, r4
    ae78:	mov	r1, #4
    ae7c:	bl	ad0c <rb_connect_callback>
    ae80:	sub	sp, fp, #8
    ae84:	pop	{r4, r5, fp, pc}

0000ae88 <rb_connect_sctp>:
    ae88:	mov	r1, #4
    ae8c:	b	ad0c <rb_connect_callback>

0000ae90 <rb_connect_sockaddr>:
    ae90:	cmp	r0, #0
    ae94:	moveq	r0, #0
    ae98:	bxeq	lr
    ae9c:	push	{fp, lr}
    aea0:	mov	fp, sp
    aea4:	ldr	r0, [r0, #48]	; 0x30
    aea8:	add	r3, r0, #128	; 0x80
    aeac:	mov	r0, r1
    aeb0:	mov	r1, r3
    aeb4:	bl	5130 <memcpy@plt>
    aeb8:	mov	r0, #1
    aebc:	pop	{fp, pc}

0000aec0 <rb_errstr>:
    aec0:	cmp	r0, #6
    aec4:	ldrls	r1, [pc, #24]	; aee4 <rb_errstr+0x24>
    aec8:	addls	r1, pc, r1
    aecc:	ldrls	r0, [r1, r0, lsl #2]
    aed0:	bxls	lr
    aed4:	ldr	r0, [pc, #4]	; aee0 <rb_errstr+0x20>
    aed8:	add	r0, pc, r0
    aedc:	bx	lr
    aee0:	.word	0x0000a8ad
    aee4:	.word	0x0001cb6c

0000aee8 <rb_socketpair>:
    aee8:	push	{r4, r5, r6, r7, fp, lr}
    aeec:	add	fp, sp, #16
    aef0:	sub	sp, sp, #8
    aef4:	mov	r4, r3
    aef8:	ldr	r3, [pc, #256]	; b000 <rb_socketpair+0x118>
    aefc:	ldr	r3, [pc, r3]
    af00:	ldr	r3, [r3]
    af04:	ldr	r7, [pc, #248]	; b004 <rb_socketpair+0x11c>
    af08:	ldr	r7, [pc, r7]
    af0c:	cmp	r7, r3
    af10:	bge	af98 <rb_socketpair+0xb0>
    af14:	mov	r3, sp
    af18:	bl	4eb4 <socketpair@plt>
    af1c:	mvn	r5, #0
    af20:	cmp	r0, #0
    af24:	bne	afa8 <rb_socketpair+0xc0>
    af28:	ldr	r6, [fp, #12]
    af2c:	ldr	r7, [fp, #8]
    af30:	ldr	r0, [sp]
    af34:	mov	r1, #4
    af38:	mov	r2, r6
    af3c:	bl	53a0 <rb_open@plt>
    af40:	str	r0, [r4]
    af44:	ldr	r0, [sp, #4]
    af48:	mov	r1, #4
    af4c:	mov	r2, r6
    af50:	bl	53a0 <rb_open@plt>
    af54:	str	r0, [r7]
    af58:	ldr	r1, [r4]
    af5c:	cmp	r1, #0
    af60:	beq	afb4 <rb_socketpair+0xcc>
    af64:	cmp	r0, #0
    af68:	beq	afc0 <rb_socketpair+0xd8>
    af6c:	mov	r0, r1
    af70:	bl	4f5c <rb_set_nb@plt>
    af74:	cmp	r0, #0
    af78:	beq	afcc <rb_socketpair+0xe4>
    af7c:	ldr	r0, [r7]
    af80:	bl	4f5c <rb_set_nb@plt>
    af84:	mov	r5, #0
    af88:	cmp	r0, #0
    af8c:	bne	afa8 <rb_socketpair+0xc0>
    af90:	ldr	r5, [sp, #4]
    af94:	b	afd0 <rb_socketpair+0xe8>
    af98:	bl	5610 <__errno_location@plt>
    af9c:	mov	r1, #23
    afa0:	str	r1, [r0]
    afa4:	mvn	r5, #0
    afa8:	mov	r0, r5
    afac:	sub	sp, fp, #16
    afb0:	pop	{r4, r5, r6, r7, fp, pc}
    afb4:	cmp	r0, #0
    afb8:	bne	afc4 <rb_socketpair+0xdc>
    afbc:	b	afa8 <rb_socketpair+0xc0>
    afc0:	mov	r0, r1
    afc4:	bl	5190 <rb_close@plt>
    afc8:	b	afa4 <rb_socketpair+0xbc>
    afcc:	ldr	r5, [sp]
    afd0:	bl	5610 <__errno_location@plt>
    afd4:	ldr	r0, [r0]
    afd8:	bl	4cec <strerror@plt>
    afdc:	mov	r2, r0
    afe0:	ldr	r0, [pc, #32]	; b008 <rb_socketpair+0x120>
    afe4:	add	r0, pc, r0
    afe8:	mov	r1, r5
    afec:	bl	5244 <rb_lib_log@plt>
    aff0:	ldr	r0, [r4]
    aff4:	bl	5190 <rb_close@plt>
    aff8:	ldr	r0, [r7]
    affc:	b	afc4 <rb_socketpair+0xdc>
    b000:	.word	0x0001d48c
    b004:	.word	0x0002fa28
    b008:	.word	0x0000a7b7

0000b00c <rb_open>:
    b00c:	push	{r4, r5, r6, r7, fp, lr}
    b010:	add	fp, sp, #16
    b014:	mov	r6, r2
    b018:	mov	r7, r1
    b01c:	mov	r5, r0
    b020:	bl	b4fc <add_fd>
    b024:	mov	r4, r0
    b028:	ldrb	r0, [r0, #16]
    b02c:	tst	r0, #1
    b030:	bne	b078 <rb_open+0x6c>
    b034:	strb	r7, [r4, #17]
    b038:	str	r5, [r4, #12]
    b03c:	orr	r0, r0, #1
    b040:	strb	r0, [r4, #16]
    b044:	cmp	r6, #0
    b048:	beq	b058 <rb_open+0x4c>
    b04c:	mov	r0, r6
    b050:	bl	b570 <rb_strndup>
    b054:	str	r0, [r4, #24]
    b058:	ldr	r0, [pc, #84]	; b0b4 <rb_open+0xa8>
    b05c:	ldr	r0, [pc, r0]
    b060:	add	r0, r0, #1
    b064:	ldr	r1, [pc, #76]	; b0b8 <rb_open+0xac>
    b068:	add	r1, pc, r1
    b06c:	str	r0, [r1]
    b070:	mov	r0, r4
    b074:	pop	{r4, r5, r6, r7, fp, pc}
    b078:	cmp	r4, #0
    b07c:	ldrne	r2, [r4, #24]
    b080:	cmpne	r2, #0
    b084:	bne	b090 <rb_open+0x84>
    b088:	ldr	r2, [pc, #28]	; b0ac <rb_open+0xa0>
    b08c:	add	r2, pc, r2
    b090:	ldr	r0, [pc, #24]	; b0b0 <rb_open+0xa4>
    b094:	add	r0, pc, r0
    b098:	mov	r1, r5
    b09c:	bl	5244 <rb_lib_log@plt>
    b0a0:	mov	r4, #0
    b0a4:	mov	r0, r4
    b0a8:	pop	{r4, r5, r6, r7, fp, pc}
    b0ac:	.word	0x0000a682
    b0b0:	.word	0x0000a7ba
    b0b4:	.word	0x0002f8d4
    b0b8:	.word	0x0002f8c8

0000b0bc <rb_close>:
    b0bc:	push	{r4, r5, r6, r7, fp, lr}
    b0c0:	add	fp, sp, #16
    b0c4:	cmp	r0, #0
    b0c8:	popeq	{r4, r5, r6, r7, fp, pc}
    b0cc:	mov	r5, r0
    b0d0:	ldr	r4, [r0, #12]
    b0d4:	ldrb	r7, [r0, #17]
    b0d8:	ands	r6, r7, #16
    b0dc:	beq	b0ec <rb_close+0x30>
    b0e0:	mov	r0, r4
    b0e4:	mov	r1, #0
    b0e8:	bl	4f20 <listen@plt>
    b0ec:	mov	r0, r5
    b0f0:	mov	r1, #3
    b0f4:	mov	r2, #0
    b0f8:	mov	r3, #0
    b0fc:	bl	4df4 <rb_setselect@plt>
    b100:	mov	r0, r5
    b104:	mov	r1, #0
    b108:	mov	r2, #0
    b10c:	mov	r3, #0
    b110:	bl	4d34 <rb_settimeout@plt>
    b114:	ldr	r0, [r5, #52]	; 0x34
    b118:	bl	a7b0 <rb_free>
    b11c:	ldr	r0, [r5, #48]	; 0x30
    b120:	bl	a7b0 <rb_free>
    b124:	ldr	r0, [r5, #24]
    b128:	bl	a7b0 <rb_free>
    b12c:	tst	r7, #32
    b130:	beq	b13c <rb_close+0x80>
    b134:	mov	r0, r5
    b138:	bl	d124 <rb_ssl_shutdown>
    b13c:	ldrb	r0, [r5, #16]
    b140:	tst	r0, #1
    b144:	beq	b15c <rb_close+0xa0>
    b148:	mov	r0, r5
    b14c:	bl	b5a8 <remove_fd>
    b150:	ldrb	r0, [r5, #16]
    b154:	and	r0, r0, #254	; 0xfe
    b158:	strb	r0, [r5, #16]
    b15c:	cmp	r6, #0
    b160:	beq	b174 <rb_close+0xb8>
    b164:	mov	r0, r4
    b168:	mov	r1, #2
    b16c:	pop	{r4, r5, r6, r7, fp, lr}
    b170:	b	522c <shutdown@plt>
    b174:	pop	{r4, r5, r6, r7, fp, pc}

0000b178 <rb_pipe>:
    b178:	push	{r4, r5, r6, sl, fp, lr}
    b17c:	add	fp, sp, #16
    b180:	sub	sp, sp, #8
    b184:	mov	r4, r1
    b188:	mov	r5, r0
    b18c:	ldr	r0, [pc, #224]	; b274 <rb_pipe+0xfc>
    b190:	ldr	r0, [pc, r0]
    b194:	ldr	r0, [r0]
    b198:	ldr	r1, [pc, #216]	; b278 <rb_pipe+0x100>
    b19c:	ldr	r1, [pc, r1]
    b1a0:	cmp	r1, r0
    b1a4:	bge	b21c <rb_pipe+0xa4>
    b1a8:	mov	r6, r2
    b1ac:	mov	r0, sp
    b1b0:	bl	55a4 <pipe@plt>
    b1b4:	mov	r1, r0
    b1b8:	mvn	r0, #0
    b1bc:	cmn	r1, #1
    b1c0:	beq	b214 <rb_pipe+0x9c>
    b1c4:	ldr	r0, [sp]
    b1c8:	mov	r1, #8
    b1cc:	mov	r2, r6
    b1d0:	bl	53a0 <rb_open@plt>
    b1d4:	str	r0, [r5]
    b1d8:	ldr	r0, [sp, #4]
    b1dc:	mov	r1, #8
    b1e0:	mov	r2, r6
    b1e4:	bl	53a0 <rb_open@plt>
    b1e8:	str	r0, [r4]
    b1ec:	ldr	r0, [r5]
    b1f0:	bl	4f5c <rb_set_nb@plt>
    b1f4:	cmp	r0, #0
    b1f8:	beq	b234 <rb_pipe+0xbc>
    b1fc:	ldr	r0, [r4]
    b200:	bl	4f5c <rb_set_nb@plt>
    b204:	mov	r1, r0
    b208:	mov	r0, #0
    b20c:	cmp	r1, #0
    b210:	beq	b23c <rb_pipe+0xc4>
    b214:	sub	sp, fp, #16
    b218:	pop	{r4, r5, r6, sl, fp, pc}
    b21c:	bl	5610 <__errno_location@plt>
    b220:	mov	r1, #23
    b224:	str	r1, [r0]
    b228:	mvn	r0, #0
    b22c:	sub	sp, fp, #16
    b230:	pop	{r4, r5, r6, sl, fp, pc}
    b234:	ldr	r6, [sp]
    b238:	b	b240 <rb_pipe+0xc8>
    b23c:	ldr	r6, [sp, #4]
    b240:	bl	5610 <__errno_location@plt>
    b244:	ldr	r0, [r0]
    b248:	bl	4cec <strerror@plt>
    b24c:	mov	r2, r0
    b250:	ldr	r0, [pc, #36]	; b27c <rb_pipe+0x104>
    b254:	add	r0, pc, r0
    b258:	mov	r1, r6
    b25c:	bl	5244 <rb_lib_log@plt>
    b260:	ldr	r0, [r5]
    b264:	bl	5190 <rb_close@plt>
    b268:	ldr	r0, [r4]
    b26c:	bl	5190 <rb_close@plt>
    b270:	b	b228 <rb_pipe+0xb0>
    b274:	.word	0x0001d1f8
    b278:	.word	0x0002f794
    b27c:	.word	0x0000a547

0000b280 <rb_socket>:
    b280:	push	{r4, r5, r6, r7, fp, lr}
    b284:	add	fp, sp, #16
    b288:	sub	sp, sp, #8
    b28c:	mov	r6, r3
    b290:	mov	r7, r0
    b294:	ldr	r0, [pc, #304]	; b3cc <rb_socket+0x14c>
    b298:	ldr	r0, [pc, r0]
    b29c:	ldr	r0, [r0]
    b2a0:	ldr	r3, [pc, #296]	; b3d0 <rb_socket+0x150>
    b2a4:	ldr	r3, [pc, r3]
    b2a8:	cmp	r3, r0
    b2ac:	bge	b38c <rb_socket+0x10c>
    b2b0:	mov	r0, r7
    b2b4:	bl	50b8 <socket@plt>
    b2b8:	mov	r4, #0
    b2bc:	cmp	r0, #0
    b2c0:	blt	b380 <rb_socket+0x100>
    b2c4:	mov	r5, r0
    b2c8:	cmp	r7, #10
    b2cc:	bne	b2fc <rb_socket+0x7c>
    b2d0:	mov	r0, #1
    b2d4:	str	r0, [sp, #4]
    b2d8:	mov	r0, #4
    b2dc:	str	r0, [sp]
    b2e0:	add	r3, sp, #4
    b2e4:	mov	r0, r5
    b2e8:	mov	r1, #41	; 0x29
    b2ec:	mov	r2, #26
    b2f0:	bl	55bc <setsockopt@plt>
    b2f4:	cmn	r0, #1
    b2f8:	beq	b350 <rb_socket+0xd0>
    b2fc:	mov	r0, r5
    b300:	mov	r1, #4
    b304:	mov	r2, r6
    b308:	bl	53a0 <rb_open@plt>
    b30c:	cmp	r0, #0
    b310:	beq	b32c <rb_socket+0xac>
    b314:	mov	r6, r0
    b318:	bl	4f5c <rb_set_nb@plt>
    b31c:	cmp	r0, #0
    b320:	beq	b3a0 <rb_socket+0x120>
    b324:	mov	r4, r6
    b328:	b	b380 <rb_socket+0x100>
    b32c:	bl	5610 <__errno_location@plt>
    b330:	ldr	r0, [r0]
    b334:	bl	4cec <strerror@plt>
    b338:	mov	r2, r0
    b33c:	ldr	r0, [pc, #148]	; b3d8 <rb_socket+0x158>
    b340:	add	r0, pc, r0
    b344:	mov	r1, r5
    b348:	bl	5244 <rb_lib_log@plt>
    b34c:	b	b378 <rb_socket+0xf8>
    b350:	ldr	r6, [sp, #4]
    b354:	bl	5610 <__errno_location@plt>
    b358:	ldr	r0, [r0]
    b35c:	bl	4cec <strerror@plt>
    b360:	mov	r3, r0
    b364:	ldr	r0, [pc, #104]	; b3d4 <rb_socket+0x154>
    b368:	add	r0, pc, r0
    b36c:	mov	r1, r6
    b370:	mov	r2, r5
    b374:	bl	5244 <rb_lib_log@plt>
    b378:	mov	r0, r5
    b37c:	bl	5268 <close@plt>
    b380:	mov	r0, r4
    b384:	sub	sp, fp, #16
    b388:	pop	{r4, r5, r6, r7, fp, pc}
    b38c:	bl	5610 <__errno_location@plt>
    b390:	mov	r1, #23
    b394:	str	r1, [r0]
    b398:	mov	r4, #0
    b39c:	b	b380 <rb_socket+0x100>
    b3a0:	bl	5610 <__errno_location@plt>
    b3a4:	ldr	r0, [r0]
    b3a8:	bl	4cec <strerror@plt>
    b3ac:	mov	r2, r0
    b3b0:	ldr	r0, [pc, #36]	; b3dc <rb_socket+0x15c>
    b3b4:	add	r0, pc, r0
    b3b8:	mov	r1, r5
    b3bc:	bl	5244 <rb_lib_log@plt>
    b3c0:	mov	r0, r6
    b3c4:	bl	5190 <rb_close@plt>
    b3c8:	b	b380 <rb_socket+0x100>
    b3cc:	.word	0x0001d0f0
    b3d0:	.word	0x0002f68c
    b3d4:	.word	0x0000a460
    b3d8:	.word	0x0000a4c7
    b3dc:	.word	0x0000a3e7

0000b3e0 <rb_listen>:
    b3e0:	push	{r4, r5, r6, sl, fp, lr}
    b3e4:	add	fp, sp, #16
    b3e8:	sub	sp, sp, #8
    b3ec:	mov	r6, r2
    b3f0:	mov	r5, r0
    b3f4:	str	r1, [sp, #4]
    b3f8:	ldrb	r0, [r0, #17]
    b3fc:	and	r0, r0, #128	; 0x80
    b400:	orr	r0, r0, #20
    b404:	strb	r0, [r5, #17]
    b408:	ldr	r0, [r5, #12]
    b40c:	bl	4f20 <listen@plt>
    b410:	mov	r4, r0
    b414:	cmp	r6, #0
    b418:	beq	b440 <rb_listen+0x60>
    b41c:	cmp	r4, #0
    b420:	bne	b440 <rb_listen+0x60>
    b424:	ldr	r0, [r5, #12]
    b428:	mov	r1, #4
    b42c:	str	r1, [sp]
    b430:	add	r3, sp, #4
    b434:	mov	r1, #6
    b438:	mov	r2, #9
    b43c:	bl	55bc <setsockopt@plt>
    b440:	mov	r0, r4
    b444:	sub	sp, fp, #16
    b448:	pop	{r4, r5, r6, sl, fp, pc}

0000b44c <rb_fdlist_init>:
    b44c:	push	{r4, r5, fp, lr}
    b450:	add	fp, sp, #8
    b454:	mov	r4, r2
    b458:	ldr	r5, [pc, #76]	; b4ac <rb_fdlist_init+0x60>
    b45c:	add	r5, pc, r5
    b460:	ldrb	r2, [r5]
    b464:	cmp	r2, #0
    b468:	bne	b488 <rb_fdlist_init+0x3c>
    b46c:	ldr	r2, [pc, #60]	; b4b0 <rb_fdlist_init+0x64>
    b470:	ldr	r2, [pc, r2]
    b474:	str	r1, [r2]
    b478:	cmp	r0, #0
    b47c:	blne	b4bc <rb_close_all>
    b480:	mov	r0, #1
    b484:	strb	r0, [r5]
    b488:	ldr	r2, [pc, #36]	; b4b4 <rb_fdlist_init+0x68>
    b48c:	add	r2, pc, r2
    b490:	mov	r0, #68	; 0x44
    b494:	mov	r1, r4
    b498:	bl	53d0 <rb_bh_create@plt>
    b49c:	ldr	r1, [pc, #20]	; b4b8 <rb_fdlist_init+0x6c>
    b4a0:	add	r1, pc, r1
    b4a4:	str	r0, [r1]
    b4a8:	pop	{r4, r5, fp, pc}
    b4ac:	.word	0x0002f4d8
    b4b0:	.word	0x0001cf18
    b4b4:	.word	0x0000a3b4
    b4b8:	.word	0x0002f498

0000b4bc <rb_close_all>:
    b4bc:	push	{r4, r5, fp, lr}
    b4c0:	add	fp, sp, #8
    b4c4:	ldr	r5, [pc, #44]	; b4f8 <rb_close_all+0x3c>
    b4c8:	ldr	r5, [pc, r5]
    b4cc:	ldr	r0, [r5]
    b4d0:	cmp	r0, #4
    b4d4:	poplt	{r4, r5, fp, pc}
    b4d8:	mov	r4, #3
    b4dc:	mov	r0, r4
    b4e0:	bl	5268 <close@plt>
    b4e4:	add	r4, r4, #1
    b4e8:	ldr	r0, [r5]
    b4ec:	cmp	r4, r0
    b4f0:	blt	b4dc <rb_close_all+0x20>
    b4f4:	pop	{r4, r5, fp, pc}
    b4f8:	.word	0x0001cec0

0000b4fc <add_fd>:
    b4fc:	push	{r4, r5, fp, lr}
    b500:	add	fp, sp, #8
    b504:	mov	r5, r0
    b508:	bl	b6e0 <rb_find_fd>
    b50c:	mov	r4, r0
    b510:	cmp	r0, #0
    b514:	beq	b520 <add_fd+0x24>
    b518:	mov	r0, r4
    b51c:	pop	{r4, r5, fp, pc}
    b520:	ldr	r0, [pc, #64]	; b568 <add_fd+0x6c>
    b524:	ldr	r0, [pc, r0]
    b528:	bl	5274 <rb_bh_alloc@plt>
    b52c:	mov	r4, r0
    b530:	str	r5, [r0, #12]
    b534:	eor	r0, r5, r5, lsr #12
    b538:	eor	r0, r0, r5, asr #24
    b53c:	bfc	r0, #12, #20
    b540:	add	r0, r0, r0, lsl #1
    b544:	ldr	r1, [pc, #32]	; b56c <add_fd+0x70>
    b548:	ldr	r1, [pc, r1]
    b54c:	ldr	r1, [r1]
    b550:	add	r2, r1, r0, lsl #2
    b554:	mov	r0, r4
    b558:	mov	r1, r4
    b55c:	bl	a7dc <rb_dlinkAdd>
    b560:	mov	r0, r4
    b564:	pop	{r4, r5, fp, pc}
    b568:	.word	0x0002f414
    b56c:	.word	0x0001ce60

0000b570 <rb_strndup>:
    b570:	push	{r4, r5, fp, lr}
    b574:	add	fp, sp, #8
    b578:	mov	r4, r0
    b57c:	mov	r0, #128	; 0x80
    b580:	bl	52c8 <malloc@plt>
    b584:	cmp	r0, #0
    b588:	beq	b5a4 <rb_strndup+0x34>
    b58c:	mov	r5, r0
    b590:	mov	r1, r4
    b594:	mov	r2, #128	; 0x80
    b598:	bl	4fe0 <rb_strlcpy@plt>
    b59c:	mov	r0, r5
    b5a0:	pop	{r4, r5, fp, pc}
    b5a4:	bl	52a4 <rb_outofmemory@plt>

0000b5a8 <remove_fd>:
    b5a8:	cmp	r0, #0
    b5ac:	ldrbne	r1, [r0, #16]
    b5b0:	tstne	r1, #1
    b5b4:	bxeq	lr
    b5b8:	ldr	r1, [r0, #12]
    b5bc:	eor	r2, r1, r1, lsr #12
    b5c0:	eor	r1, r2, r1, asr #24
    b5c4:	bfc	r1, #12, #20
    b5c8:	add	r1, r1, r1, lsl #1
    b5cc:	ldr	r2, [pc, #12]	; b5e0 <remove_fd+0x38>
    b5d0:	ldr	r2, [pc, r2]
    b5d4:	ldr	r2, [r2]
    b5d8:	add	r1, r2, r1, lsl #2
    b5dc:	b	cf80 <rb_dlinkMoveNode>
    b5e0:	.word	0x0001cdd8

0000b5e4 <rb_dump_fd>:
    b5e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b5e8:	add	fp, sp, #24
    b5ec:	mov	r4, r1
    b5f0:	mov	r5, r0
    b5f4:	mov	r6, #0
    b5f8:	ldr	r8, [pc, #124]	; b67c <rb_dump_fd+0x98>
    b5fc:	ldr	r8, [pc, r8]
    b600:	ldr	r9, [pc, #120]	; b680 <rb_dump_fd+0x9c>
    b604:	add	r9, pc, r9
    b608:	b	b618 <rb_dump_fd+0x34>
    b60c:	add	r6, r6, #1
    b610:	cmp	r6, #4096	; 0x1000
    b614:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    b618:	ldr	r0, [r8]
    b61c:	add	r1, r6, r6, lsl #1
    b620:	add	r2, r0, r1, lsl #2
    b624:	ldr	r2, [r2, #8]
    b628:	cmp	r2, #0
    b62c:	beq	b60c <rb_dump_fd+0x28>
    b630:	ldr	r7, [r0, r1, lsl #2]
    b634:	cmp	r7, #0
    b638:	bne	b64c <rb_dump_fd+0x68>
    b63c:	b	b60c <rb_dump_fd+0x28>
    b640:	ldr	r7, [r7, #8]
    b644:	cmp	r7, #0
    b648:	beq	b60c <rb_dump_fd+0x28>
    b64c:	ldr	r1, [r7]
    b650:	cmp	r1, #0
    b654:	ldrbne	r0, [r1, #16]
    b658:	tstne	r0, #1
    b65c:	beq	b640 <rb_dump_fd+0x5c>
    b660:	ldr	r0, [r1, #12]
    b664:	ldr	r1, [r1, #24]
    b668:	cmp	r1, #0
    b66c:	moveq	r1, r9
    b670:	mov	r2, r4
    b674:	blx	r5
    b678:	b	b640 <rb_dump_fd+0x5c>
    b67c:	.word	0x0001cdac
    b680:	.word	0x0000a336

0000b684 <rb_note>:
    b684:	cmp	r0, #0
    b688:	bxeq	lr
    b68c:	push	{r4, r5, fp, lr}
    b690:	add	fp, sp, #8
    b694:	mov	r5, r1
    b698:	mov	r4, r0
    b69c:	ldr	r0, [r0, #24]
    b6a0:	bl	a7b0 <rb_free>
    b6a4:	mov	r0, r5
    b6a8:	bl	b570 <rb_strndup>
    b6ac:	str	r0, [r4, #24]
    b6b0:	pop	{r4, r5, fp, lr}
    b6b4:	bx	lr

0000b6b8 <rb_set_type>:
    b6b8:	strb	r1, [r0, #17]
    b6bc:	bx	lr

0000b6c0 <rb_get_type>:
    b6c0:	ldrb	r0, [r0, #17]
    b6c4:	bx	lr

0000b6c8 <rb_fd_ssl>:
    b6c8:	cmp	r0, #0
    b6cc:	moveq	r0, #0
    b6d0:	ldrbne	r0, [r0, #17]
    b6d4:	ubfxne	r0, r0, #5, #1
    b6d8:	bx	lr

0000b6dc <rb_get_fde>:
    b6dc:	b	b6e0 <rb_find_fd>

0000b6e0 <rb_find_fd>:
    b6e0:	cmp	r0, #0
    b6e4:	blt	b738 <rb_find_fd+0x58>
    b6e8:	eor	r1, r0, r0, lsr #12
    b6ec:	bfc	r1, #12, #20
    b6f0:	eor	r1, r1, r0, lsr #24
    b6f4:	add	r1, r1, r1, lsl #1
    b6f8:	ldr	r2, [pc, #68]	; b744 <rb_find_fd+0x64>
    b6fc:	ldr	r2, [pc, r2]
    b700:	ldr	r2, [r2]
    b704:	ldr	r2, [r2, r1, lsl #2]
    b708:	cmp	r2, #0
    b70c:	bne	b720 <rb_find_fd+0x40>
    b710:	b	b738 <rb_find_fd+0x58>
    b714:	ldr	r2, [r2, #8]
    b718:	cmp	r2, #0
    b71c:	beq	b738 <rb_find_fd+0x58>
    b720:	ldr	r1, [r2]
    b724:	ldr	r3, [r1, #12]
    b728:	cmp	r3, r0
    b72c:	bne	b714 <rb_find_fd+0x34>
    b730:	mov	r0, r1
    b734:	bx	lr
    b738:	mov	r1, #0
    b73c:	mov	r0, r1
    b740:	bx	lr
    b744:	.word	0x0001ccac

0000b748 <rb_read>:
    b748:	cmp	r0, #0
    b74c:	moveq	r0, #0
    b750:	bxeq	lr
    b754:	ldrb	r3, [r0, #17]
    b758:	tst	r3, #32
    b75c:	bne	b770 <rb_read+0x28>
    b760:	ldr	r0, [r0, #12]
    b764:	tst	r3, #4
    b768:	bne	b774 <rb_read+0x2c>
    b76c:	b	5034 <read@plt>
    b770:	b	d9fc <rb_ssl_read>
    b774:	mov	r3, #0
    b778:	b	4ed8 <recv@plt>

0000b77c <rb_write>:
    b77c:	cmp	r0, #0
    b780:	moveq	r0, #0
    b784:	bxeq	lr
    b788:	ldrb	r3, [r0, #17]
    b78c:	tst	r3, #32
    b790:	bne	b7a4 <rb_write+0x28>
    b794:	ldr	r0, [r0, #12]
    b798:	tst	r3, #4
    b79c:	bne	b7a8 <rb_write+0x2c>
    b7a0:	b	504c <write@plt>
    b7a4:	b	db38 <rb_ssl_write>
    b7a8:	mov	r3, #16384	; 0x4000
    b7ac:	b	53b8 <send@plt>

0000b7b0 <rb_writev>:
    b7b0:	push	{fp, lr}
    b7b4:	mov	fp, sp
    b7b8:	sub	sp, sp, #32
    b7bc:	cmp	r0, #0
    b7c0:	beq	b7e8 <rb_writev+0x38>
    b7c4:	ldrb	r3, [r0, #17]
    b7c8:	tst	r3, #32
    b7cc:	bne	b800 <rb_writev+0x50>
    b7d0:	tst	r3, #4
    b7d4:	bne	b80c <rb_writev+0x5c>
    b7d8:	ldr	r0, [r0, #12]
    b7dc:	mov	sp, fp
    b7e0:	pop	{fp, lr}
    b7e4:	b	4fc8 <writev@plt>
    b7e8:	bl	5610 <__errno_location@plt>
    b7ec:	mov	r1, #9
    b7f0:	str	r1, [r0]
    b7f4:	mvn	r0, #0
    b7f8:	mov	sp, fp
    b7fc:	pop	{fp, pc}
    b800:	mov	sp, fp
    b804:	pop	{fp, lr}
    b808:	b	b848 <rb_fake_writev>
    b80c:	mov	ip, sp
    b810:	vmov.i32	q8, #0	; 0x00000000
    b814:	add	r3, ip, #12
    b818:	vst1.32	{d16-d17}, [r3]
    b81c:	mov	lr, #8
    b820:	mov	r3, ip
    b824:	vst1.64	{d16-d17}, [r3], lr
    b828:	str	r1, [r3]
    b82c:	str	r2, [sp, #12]
    b830:	ldr	r0, [r0, #12]
    b834:	mov	r1, ip
    b838:	mov	r2, #16384	; 0x4000
    b83c:	bl	5028 <sendmsg@plt>
    b840:	mov	sp, fp
    b844:	pop	{fp, pc}

0000b848 <rb_fake_writev>:
    b848:	push	{r4, r5, r6, r7, fp, lr}
    b84c:	add	fp, sp, #16
    b850:	cmp	r2, #0
    b854:	moveq	r4, #0
    b858:	moveq	r0, r4
    b85c:	popeq	{r4, r5, r6, r7, fp, pc}
    b860:	mov	r5, r2
    b864:	mov	r6, r1
    b868:	mov	r7, r0
    b86c:	mov	r4, #0
    b870:	b	b888 <rb_fake_writev+0x40>
    b874:	subs	r5, r5, #1
    b878:	add	r4, r0, r4
    b87c:	add	r6, r6, #8
    b880:	moveq	r0, r4
    b884:	popeq	{r4, r5, r6, r7, fp, pc}
    b888:	ldm	r6, {r1, r2}
    b88c:	mov	r0, r7
    b890:	bl	4f98 <rb_write@plt>
    b894:	cmp	r0, #0
    b898:	bgt	b874 <rb_fake_writev+0x2c>
    b89c:	cmp	r4, #0
    b8a0:	movle	r4, r0
    b8a4:	mov	r0, r4
    b8a8:	pop	{r4, r5, r6, r7, fp, pc}

0000b8ac <rb_inet_pton_sock>:
    b8ac:	push	{r4, r5, r6, sl, fp, lr}
    b8b0:	add	fp, sp, #16
    b8b4:	mov	r4, r1
    b8b8:	mov	r5, r0
    b8bc:	vmov.i32	q8, #0	; 0x00000000
    b8c0:	add	r0, r1, #112	; 0x70
    b8c4:	vst1.32	{d16-d17}, [r0]
    b8c8:	add	r0, r1, #96	; 0x60
    b8cc:	vst1.32	{d16-d17}, [r0]
    b8d0:	add	r0, r1, #80	; 0x50
    b8d4:	vst1.32	{d16-d17}, [r0]
    b8d8:	add	r0, r1, #64	; 0x40
    b8dc:	vst1.32	{d16-d17}, [r0]
    b8e0:	add	r0, r1, #48	; 0x30
    b8e4:	vst1.32	{d16-d17}, [r0]
    b8e8:	add	r0, r1, #32
    b8ec:	vst1.32	{d16-d17}, [r0]
    b8f0:	add	r0, r1, #16
    b8f4:	vst1.32	{d16-d17}, [r0]
    b8f8:	mov	r0, #4
    b8fc:	mov	r2, r1
    b900:	vst1.32	{d16-d17}, [r2], r0
    b904:	mov	r6, #2
    b908:	mov	r0, #2
    b90c:	mov	r1, r5
    b910:	bl	4f74 <rb_inet_pton@plt>
    b914:	cmp	r0, #0
    b918:	bne	b93c <rb_inet_pton_sock+0x90>
    b91c:	add	r2, r4, #8
    b920:	mov	r6, #10
    b924:	mov	r0, #10
    b928:	mov	r1, r5
    b92c:	bl	4f74 <rb_inet_pton@plt>
    b930:	cmp	r0, #0
    b934:	moveq	r0, #0
    b938:	popeq	{r4, r5, r6, sl, fp, pc}
    b93c:	mov	r0, #0
    b940:	strh	r0, [r4, #2]
    b944:	strh	r6, [r4]
    b948:	mov	r0, #1
    b94c:	pop	{r4, r5, r6, sl, fp, pc}

0000b950 <rb_inet_pton>:
    b950:	push	{r4, r5, r6, sl, fp, lr}
    b954:	add	fp, sp, #16
    b958:	sub	sp, sp, #56	; 0x38
    b95c:	mov	r4, r2
    b960:	mov	r5, r1
    b964:	cmp	r0, #10
    b968:	beq	b990 <rb_inet_pton+0x40>
    b96c:	mov	r1, r0
    b970:	mvn	r0, #0
    b974:	cmp	r1, #2
    b978:	bne	b9c8 <rb_inet_pton+0x78>
    b97c:	mov	r0, r5
    b980:	mov	r1, r4
    b984:	sub	sp, fp, #16
    b988:	pop	{r4, r5, r6, sl, fp, lr}
    b98c:	b	bd44 <inet_pton4>
    b990:	mov	r0, r5
    b994:	mov	r1, r4
    b998:	bl	bd44 <inet_pton4>
    b99c:	cmp	r0, #0
    b9a0:	beq	b9d0 <rb_inet_pton+0x80>
    b9a4:	add	r6, sp, #3
    b9a8:	ldr	r1, [pc, #52]	; b9e4 <rb_inet_pton+0x94>
    b9ac:	add	r1, pc, r1
    b9b0:	mov	r0, r6
    b9b4:	mov	r2, r5
    b9b8:	bl	5628 <sprintf@plt>
    b9bc:	mov	r0, r6
    b9c0:	mov	r1, r4
    b9c4:	bl	be14 <inet_pton6>
    b9c8:	sub	sp, fp, #16
    b9cc:	pop	{r4, r5, r6, sl, fp, pc}
    b9d0:	mov	r0, r5
    b9d4:	mov	r1, r4
    b9d8:	sub	sp, fp, #16
    b9dc:	pop	{r4, r5, r6, sl, fp, lr}
    b9e0:	b	be14 <inet_pton6>
    b9e4:	.word	0x00009ed4

0000b9e8 <rb_inet_ntop_sock>:
    b9e8:	mov	r3, r2
    b9ec:	mov	r2, r1
    b9f0:	ldrh	r1, [r0]
    b9f4:	cmp	r1, #10
    b9f8:	beq	ba14 <rb_inet_ntop_sock+0x2c>
    b9fc:	cmp	r1, #2
    ba00:	movne	r0, #0
    ba04:	bxne	lr
    ba08:	add	r1, r0, #4
    ba0c:	mov	r0, #2
    ba10:	b	ba20 <rb_inet_ntop>
    ba14:	add	r1, r0, #8
    ba18:	mov	r0, #10
    ba1c:	b	ba20 <rb_inet_ntop>

0000ba20 <rb_inet_ntop>:
    ba20:	push	{r4, r5, r6, r7, fp, lr}
    ba24:	add	fp, sp, #16
    ba28:	mov	r4, r3
    ba2c:	mov	r5, r2
    ba30:	mov	r6, r1
    ba34:	cmp	r0, #10
    ba38:	beq	ba5c <rb_inet_ntop+0x3c>
    ba3c:	cmp	r0, #2
    ba40:	movne	r0, #0
    ba44:	popne	{r4, r5, r6, r7, fp, pc}
    ba48:	mov	r0, r6
    ba4c:	mov	r1, r5
    ba50:	mov	r2, r4
    ba54:	pop	{r4, r5, r6, r7, fp, lr}
    ba58:	b	bacc <inet_ntop4>
    ba5c:	ldr	r0, [r6]
    ba60:	cmp	r0, #0
    ba64:	bne	bab8 <rb_inet_ntop+0x98>
    ba68:	ldr	r0, [r6, #4]
    ba6c:	cmp	r0, #0
    ba70:	bne	ba88 <rb_inet_ntop+0x68>
    ba74:	ldr	r7, [r6, #8]
    ba78:	movw	r0, #65535	; 0xffff
    ba7c:	bl	bb00 <__bswap_32>
    ba80:	cmp	r7, r0
    ba84:	beq	bab0 <rb_inet_ntop+0x90>
    ba88:	ldr	r0, [r6, #4]
    ba8c:	cmp	r0, #0
    ba90:	bne	bab8 <rb_inet_ntop+0x98>
    ba94:	ldr	r0, [r6, #8]
    ba98:	cmp	r0, #0
    ba9c:	bne	bab8 <rb_inet_ntop+0x98>
    baa0:	ldr	r0, [r6, #12]
    baa4:	bl	bb00 <__bswap_32>
    baa8:	cmp	r0, #2
    baac:	bcc	bab8 <rb_inet_ntop+0x98>
    bab0:	add	r0, r6, #12
    bab4:	b	ba4c <rb_inet_ntop+0x2c>
    bab8:	mov	r0, r6
    babc:	mov	r1, r5
    bac0:	mov	r2, r4
    bac4:	pop	{r4, r5, r6, r7, fp, lr}
    bac8:	b	bb08 <inet_ntop6>

0000bacc <inet_ntop4>:
    bacc:	cmp	r2, #16
    bad0:	movcc	r0, #0
    bad4:	bxcc	lr
    bad8:	push	{r4, sl, fp, lr}
    badc:	add	fp, sp, #8
    bae0:	mov	r4, r1
    bae4:	bl	d01c <inetntoa>
    bae8:	ldr	r1, [pc, #12]	; bafc <inet_ntop4+0x30>
    baec:	add	r1, pc, r1
    baf0:	mov	r0, r4
    baf4:	pop	{r4, sl, fp, lr}
    baf8:	b	51b4 <strcpy@plt>
    bafc:	.word	0x0002ee94

0000bb00 <__bswap_32>:
    bb00:	rev	r0, r0
    bb04:	bx	lr

0000bb08 <inet_ntop6>:
    bb08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb0c:	add	fp, sp, #28
    bb10:	sub	sp, sp, #100	; 0x64
    bb14:	str	r2, [sp, #12]
    bb18:	str	r1, [sp, #8]
    bb1c:	vmov.i32	q8, #0	; 0x00000000
    bb20:	add	r5, sp, #16
    bb24:	mov	r1, r5
    bb28:	vst1.64	{d16-d17}, [r1]!
    bb2c:	vst1.64	{d16-d17}, [r1]
    bb30:	mov	r3, #0
    bb34:	mov	r1, r0
    bb38:	ldrb	r2, [r1, r3]!
    bb3c:	ldrb	r1, [r1, #1]
    bb40:	orr	r1, r1, r2, lsl #8
    bb44:	str	r1, [r5, r3, lsl #1]
    bb48:	add	r3, r3, #2
    bb4c:	cmp	r3, #16
    bb50:	bcc	bb34 <inet_ntop6+0x2c>
    bb54:	str	r0, [sp, #4]
    bb58:	mvn	r0, #0
    bb5c:	mov	r3, #0
    bb60:	mov	r1, #0
    bb64:	mvn	r2, #0
    bb68:	mov	r4, #0
    bb6c:	ldr	r7, [r5, r3, lsl #2]
    bb70:	cmp	r7, #0
    bb74:	beq	bbac <inet_ntop6+0xa4>
    bb78:	cmn	r0, #1
    bb7c:	beq	bba4 <inet_ntop6+0x9c>
    bb80:	cmp	r1, r4
    bb84:	mov	r7, #0
    bb88:	movwgt	r7, #1
    bb8c:	add	r6, r2, #1
    bb90:	clz	r6, r6
    bb94:	lsr	r6, r6, #5
    bb98:	orrs	r7, r6, r7
    bb9c:	movne	r2, r0
    bba0:	movne	r4, r1
    bba4:	mvn	r0, #0
    bba8:	b	bbbc <inet_ntop6+0xb4>
    bbac:	cmn	r0, #1
    bbb0:	moveq	r0, r3
    bbb4:	add	r1, r1, #1
    bbb8:	movweq	r1, #1
    bbbc:	add	r3, r3, #1
    bbc0:	cmp	r3, #8
    bbc4:	bne	bb6c <inet_ntop6+0x64>
    bbc8:	cmn	r0, #1
    bbcc:	beq	bbf8 <inet_ntop6+0xf0>
    bbd0:	mov	r3, #0
    bbd4:	cmp	r1, r4
    bbd8:	movwgt	r3, #1
    bbdc:	add	r7, r2, #1
    bbe0:	clz	r7, r7
    bbe4:	lsr	r7, r7, #5
    bbe8:	orrs	r3, r7, r3
    bbec:	moveq	r0, r2
    bbf0:	movne	r4, r1
    bbf4:	b	bbfc <inet_ntop6+0xf4>
    bbf8:	mov	r0, r2
    bbfc:	cmn	r0, #1
    bc00:	mov	r8, r0
    bc04:	mvnne	r8, #0
    bc08:	cmp	r4, #2
    bc0c:	movge	r8, r0
    bc10:	add	r9, r8, r4
    bc14:	mov	sl, #0
    bc18:	add	r7, sp, #48	; 0x30
    bc1c:	mov	r6, #48	; 0x30
    bc20:	cmp	sl, r9
    bc24:	bge	bc54 <inet_ntop6+0x14c>
    bc28:	cmn	r8, #1
    bc2c:	beq	bc54 <inet_ntop6+0x14c>
    bc30:	cmp	sl, r8
    bc34:	blt	bc54 <inet_ntop6+0x14c>
    bc38:	cmp	r8, sl
    bc3c:	bne	bc88 <inet_ntop6+0x180>
    bc40:	cmp	sl, #0
    bc44:	strbeq	r6, [r7], #1
    bc48:	mov	r0, #58	; 0x3a
    bc4c:	strb	r0, [r7], #1
    bc50:	b	bc88 <inet_ntop6+0x180>
    bc54:	cmp	sl, #0
    bc58:	beq	bc70 <inet_ntop6+0x168>
    bc5c:	mov	r0, #58	; 0x3a
    bc60:	strb	r0, [r7], #1
    bc64:	cmp	r8, #0
    bc68:	cmpeq	sl, #6
    bc6c:	beq	bc98 <inet_ntop6+0x190>
    bc70:	ldr	r2, [r5, sl, lsl #2]
    bc74:	mov	r0, r7
    bc78:	ldr	r1, [pc, #192]	; bd40 <inet_ntop6+0x238>
    bc7c:	add	r1, pc, r1
    bc80:	bl	5628 <sprintf@plt>
    bc84:	add	r7, r7, r0
    bc88:	add	sl, sl, #1
    bc8c:	cmp	sl, #8
    bc90:	bcc	bc20 <inet_ntop6+0x118>
    bc94:	b	bcf4 <inet_ntop6+0x1ec>
    bc98:	cmp	r4, #5
    bc9c:	beq	bcac <inet_ntop6+0x1a4>
    bca0:	cmp	r4, #6
    bca4:	bne	bc70 <inet_ntop6+0x168>
    bca8:	b	bcbc <inet_ntop6+0x1b4>
    bcac:	ldr	r0, [sp, #36]	; 0x24
    bcb0:	movw	r1, #65535	; 0xffff
    bcb4:	cmp	r0, r1
    bcb8:	bne	bc70 <inet_ntop6+0x168>
    bcbc:	add	r0, sp, #48	; 0x30
    bcc0:	add	r0, r0, #46	; 0x2e
    bcc4:	sub	r2, r0, r7
    bcc8:	ldr	r0, [sp, #4]
    bccc:	add	r0, r0, #12
    bcd0:	mov	r1, r7
    bcd4:	bl	bacc <inet_ntop4>
    bcd8:	cmp	r0, #0
    bcdc:	moveq	r0, #0
    bce0:	subeq	sp, fp, #28
    bce4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bce8:	mov	r0, r7
    bcec:	bl	510c <strlen@plt>
    bcf0:	add	r7, r7, r0
    bcf4:	cmn	r8, #1
    bcf8:	beq	bd08 <inet_ntop6+0x200>
    bcfc:	cmp	r9, #8
    bd00:	moveq	r0, #58	; 0x3a
    bd04:	strbeq	r0, [r7], #1
    bd08:	mov	r0, #0
    bd0c:	strb	r0, [r7], #1
    bd10:	add	r1, sp, #48	; 0x30
    bd14:	sub	r2, r7, r1
    bd18:	ldr	r1, [sp, #12]
    bd1c:	cmp	r2, r1
    bd20:	bhi	bd38 <inet_ntop6+0x230>
    bd24:	add	r1, sp, #48	; 0x30
    bd28:	ldr	r4, [sp, #8]
    bd2c:	mov	r0, r4
    bd30:	bl	5130 <memcpy@plt>
    bd34:	mov	r0, r4
    bd38:	sub	sp, fp, #28
    bd3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd40:	.word	0x0000a069

0000bd44 <inet_pton4>:
    bd44:	push	{r4, sl, fp, lr}
    bd48:	add	fp, sp, #8
    bd4c:	sub	sp, sp, #4
    bd50:	mov	r2, r0
    bd54:	mov	r0, #0
    bd58:	strb	r0, [sp]
    bd5c:	ldrb	r4, [r2]
    bd60:	cmp	r4, #0
    bd64:	beq	be0c <inet_pton4+0xc8>
    bd68:	add	r3, r2, #1
    bd6c:	mov	ip, #0
    bd70:	mov	lr, sp
    bd74:	mov	r2, #0
    bd78:	sub	r0, r4, #48	; 0x30
    bd7c:	uxtb	r0, r0
    bd80:	cmp	r0, #9
    bd84:	bhi	bdc8 <inet_pton4+0x84>
    bd88:	ldrb	r0, [lr]
    bd8c:	add	r0, r0, r0, lsl #2
    bd90:	lsl	r0, r0, #1
    bd94:	uxtab	r0, r0, r4
    bd98:	sub	r4, r0, #48	; 0x30
    bd9c:	mov	r0, #0
    bda0:	cmp	r4, #255	; 0xff
    bda4:	bhi	be0c <inet_pton4+0xc8>
    bda8:	strb	r4, [lr]
    bdac:	cmp	r2, #0
    bdb0:	bne	bdec <inet_pton4+0xa8>
    bdb4:	cmp	ip, #3
    bdb8:	bgt	be0c <inet_pton4+0xc8>
    bdbc:	add	ip, ip, #1
    bdc0:	mov	r2, #1
    bdc4:	b	bdec <inet_pton4+0xa8>
    bdc8:	mov	r0, #0
    bdcc:	cmp	ip, #4
    bdd0:	cmpne	r2, #0
    bdd4:	beq	be0c <inet_pton4+0xc8>
    bdd8:	uxtb	r2, r4
    bddc:	cmp	r2, #46	; 0x2e
    bde0:	bne	be0c <inet_pton4+0xc8>
    bde4:	mov	r2, #0
    bde8:	strb	r2, [lr, #1]!
    bdec:	ldrb	r4, [r3], #1
    bdf0:	cmp	r4, #0
    bdf4:	bne	bd78 <inet_pton4+0x34>
    bdf8:	mov	r0, #0
    bdfc:	cmp	ip, #4
    be00:	ldrge	r0, [sp]
    be04:	strge	r0, [r1]
    be08:	movge	r0, #1
    be0c:	sub	sp, fp, #8
    be10:	pop	{r4, sl, fp, pc}

0000be14 <inet_pton6>:
    be14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be18:	add	fp, sp, #28
    be1c:	sub	sp, sp, #36	; 0x24
    be20:	vmov.i32	q8, #0	; 0x00000000
    be24:	add	r5, sp, #16
    be28:	mov	r2, r5
    be2c:	vst1.64	{d16-d17}, [r2]!
    be30:	str	r2, [sp, #12]
    be34:	ldrb	r2, [r0]
    be38:	cmp	r2, #58	; 0x3a
    be3c:	str	r1, [sp]
    be40:	bne	be54 <inet_pton6+0x40>
    be44:	ldrb	r1, [r0, #1]!
    be48:	mov	r6, #0
    be4c:	cmp	r1, #58	; 0x3a
    be50:	bne	c054 <inet_pton6+0x240>
    be54:	str	r0, [sp, #4]
    be58:	add	r9, r0, #1
    be5c:	bl	5154 <__ctype_tolower_loc@plt>
    be60:	mov	r7, r0
    be64:	ldr	r4, [pc, #500]	; c060 <inet_pton6+0x24c>
    be68:	add	r4, pc, r4
    be6c:	mov	sl, #0
    be70:	mov	r8, #0
    be74:	mov	r0, #0
    be78:	str	r0, [sp, #8]
    be7c:	ldrb	r0, [r9, #-1]
    be80:	ldr	r1, [r7]
    be84:	ldr	r6, [r1, r0, lsl #2]
    be88:	cmp	r6, #0
    be8c:	beq	bf78 <inet_pton6+0x164>
    be90:	mov	r0, r4
    be94:	mov	r1, r6
    be98:	mov	r2, #17
    be9c:	bl	55ec <memchr@plt>
    bea0:	cmp	r0, #0
    bea4:	beq	bed8 <inet_pton6+0xc4>
    bea8:	sub	r0, r0, r4
    beac:	orr	r8, r0, r8, lsl #4
    beb0:	mov	r0, #0
    beb4:	cmp	r0, r8, lsr #16
    beb8:	mov	r0, #1
    bebc:	moveq	sl, r0
    bec0:	mov	r0, #2
    bec4:	movwne	r0, #1
    bec8:	add	r9, r9, #1
    becc:	cmp	r0, #2
    bed0:	beq	be7c <inet_pton6+0x68>
    bed4:	b	bf6c <inet_pton6+0x158>
    bed8:	cmp	r6, #58	; 0x3a
    bedc:	bne	bf2c <inet_pton6+0x118>
    bee0:	cmp	sl, #0
    bee4:	beq	bf48 <inet_pton6+0x134>
    bee8:	add	r1, r5, #2
    beec:	mov	r6, #0
    bef0:	ldr	r0, [sp, #12]
    bef4:	cmp	r1, r0
    bef8:	bhi	c054 <inet_pton6+0x240>
    befc:	ldrb	r0, [r9]
    bf00:	cmp	r0, #0
    bf04:	beq	c054 <inet_pton6+0x240>
    bf08:	strb	r8, [r5, #1]
    bf0c:	lsr	r0, r8, #8
    bf10:	strb	r0, [r5]
    bf14:	mov	r0, #2
    bf18:	mov	sl, #0
    bf1c:	str	r9, [sp, #4]
    bf20:	mov	r8, #0
    bf24:	mov	r5, r1
    bf28:	b	bec8 <inet_pton6+0xb4>
    bf2c:	mov	r0, #2
    bf30:	cmp	r6, #46	; 0x2e
    bf34:	bne	bec8 <inet_pton6+0xb4>
    bf38:	ldrb	r1, [r9]
    bf3c:	cmp	r1, #0
    bf40:	beq	bec8 <inet_pton6+0xb4>
    bf44:	b	c02c <inet_pton6+0x218>
    bf48:	ldr	r0, [sp, #8]
    bf4c:	cmp	r0, #0
    bf50:	moveq	r0, r5
    bf54:	str	r0, [sp, #8]
    bf58:	mov	r0, #1
    bf5c:	movweq	r0, #2
    bf60:	mov	sl, #0
    bf64:	str	r9, [sp, #4]
    bf68:	b	bec8 <inet_pton6+0xb4>
    bf6c:	mov	r6, #0
    bf70:	cmp	r0, #3
    bf74:	bne	c054 <inet_pton6+0x240>
    bf78:	cmp	sl, #0
    bf7c:	beq	bfa4 <inet_pton6+0x190>
    bf80:	add	r4, r5, #2
    bf84:	mov	r6, #0
    bf88:	ldr	r0, [sp, #12]
    bf8c:	cmp	r4, r0
    bf90:	bhi	c054 <inet_pton6+0x240>
    bf94:	strb	r8, [r5, #1]
    bf98:	lsr	r0, r8, #8
    bf9c:	strb	r0, [r5]
    bfa0:	b	bfa8 <inet_pton6+0x194>
    bfa4:	mov	r4, r5
    bfa8:	ldr	r0, [sp, #8]
    bfac:	cmp	r0, #0
    bfb0:	beq	bffc <inet_pton6+0x1e8>
    bfb4:	ldr	r0, [sp, #12]
    bfb8:	cmp	r4, r0
    bfbc:	beq	c024 <inet_pton6+0x210>
    bfc0:	ldr	r0, [sp, #8]
    bfc4:	sub	r0, r4, r0
    bfc8:	cmp	r0, #1
    bfcc:	blt	c00c <inet_pton6+0x1f8>
    bfd0:	add	r1, sp, #16
    bfd4:	add	r1, r1, #15
    bfd8:	ldr	r2, [sp, #8]
    bfdc:	sub	r2, r2, #1
    bfe0:	mov	r3, #0
    bfe4:	ldrb	r7, [r2, r0]
    bfe8:	strb	r7, [r1], #-1
    bfec:	strb	r3, [r2, r0]
    bff0:	subs	r0, r0, #1
    bff4:	bne	bfe4 <inet_pton6+0x1d0>
    bff8:	b	c00c <inet_pton6+0x1f8>
    bffc:	mov	r6, #0
    c000:	ldr	r0, [sp, #12]
    c004:	cmp	r4, r0
    c008:	bne	c054 <inet_pton6+0x240>
    c00c:	add	r0, sp, #16
    c010:	vld1.64	{d16-d17}, [r0]
    c014:	ldr	r0, [sp]
    c018:	vst1.8	{d16-d17}, [r0]
    c01c:	mov	r6, #1
    c020:	b	c054 <inet_pton6+0x240>
    c024:	mov	r6, #0
    c028:	b	c054 <inet_pton6+0x240>
    c02c:	add	r4, r5, #4
    c030:	mov	r6, #0
    c034:	ldr	r0, [sp, #12]
    c038:	cmp	r4, r0
    c03c:	bhi	c054 <inet_pton6+0x240>
    c040:	ldr	r0, [sp, #4]
    c044:	mov	r1, r5
    c048:	bl	bd44 <inet_pton4>
    c04c:	cmp	r0, #0
    c050:	bgt	bfa8 <inet_pton6+0x194>
    c054:	mov	r0, r6
    c058:	sub	sp, fp, #28
    c05c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c060:	.word	0x00009e85

0000c064 <rb_get_iotype>:
    c064:	ldr	r0, [pc, #4]	; c070 <rb_get_iotype+0xc>
    c068:	add	r0, pc, r0
    c06c:	bx	lr
    c070:	.word	0x0002e8d4

0000c074 <rb_io_sched_event>:
    c074:	push	{r4, r5, fp, lr}
    c078:	add	fp, sp, #8
    c07c:	cmp	r0, #0
    c080:	beq	c0a8 <rb_io_sched_event+0x34>
    c084:	mov	r5, r0
    c088:	ldr	r0, [pc, #68]	; c0d4 <rb_io_sched_event+0x60>
    c08c:	ldr	r0, [pc, r0]
    c090:	cmp	r0, #0
    c094:	movne	r4, r1
    c098:	ldrne	r1, [pc, #56]	; c0d8 <rb_io_sched_event+0x64>
    c09c:	ldrne	r1, [pc, r1]
    c0a0:	cmpne	r1, #0
    c0a4:	bne	c0b0 <rb_io_sched_event+0x3c>
    c0a8:	mov	r0, #0
    c0ac:	pop	{r4, r5, fp, pc}
    c0b0:	blx	r0
    c0b4:	cmp	r0, #0
    c0b8:	beq	c0a8 <rb_io_sched_event+0x34>
    c0bc:	ldr	r2, [pc, #24]	; c0dc <rb_io_sched_event+0x68>
    c0c0:	ldr	r2, [pc, r2]
    c0c4:	mov	r0, r5
    c0c8:	mov	r1, r4
    c0cc:	pop	{r4, r5, fp, lr}
    c0d0:	bx	r2
    c0d4:	.word	0x0002e8cc
    c0d8:	.word	0x0002e8c0
    c0dc:	.word	0x0002e89c

0000c0e0 <rb_io_unsched_event>:
    c0e0:	push	{r4, sl, fp, lr}
    c0e4:	add	fp, sp, #8
    c0e8:	cmp	r0, #0
    c0ec:	beq	c110 <rb_io_unsched_event+0x30>
    c0f0:	mov	r4, r0
    c0f4:	ldr	r0, [pc, #56]	; c134 <rb_io_unsched_event+0x54>
    c0f8:	ldr	r0, [pc, r0]
    c0fc:	cmp	r0, #0
    c100:	ldrne	r1, [pc, #48]	; c138 <rb_io_unsched_event+0x58>
    c104:	ldrne	r1, [pc, r1]
    c108:	cmpne	r1, #0
    c10c:	bne	c114 <rb_io_unsched_event+0x34>
    c110:	pop	{r4, sl, fp, pc}
    c114:	blx	r0
    c118:	cmp	r0, #0
    c11c:	popeq	{r4, sl, fp, pc}
    c120:	ldr	r1, [pc, #20]	; c13c <rb_io_unsched_event+0x5c>
    c124:	ldr	r1, [pc, r1]
    c128:	mov	r0, r4
    c12c:	pop	{r4, sl, fp, lr}
    c130:	bx	r1
    c134:	.word	0x0002e860
    c138:	.word	0x0002e85c
    c13c:	.word	0x0002e83c

0000c140 <rb_io_supports_event>:
    c140:	ldr	r0, [pc, #16]	; c158 <rb_io_supports_event+0x18>
    c144:	ldr	r0, [pc, r0]
    c148:	cmp	r0, #0
    c14c:	moveq	r0, #0
    c150:	bxeq	lr
    c154:	bx	r0
    c158:	.word	0x0002e814

0000c15c <rb_io_init_event>:
    c15c:	push	{fp, lr}
    c160:	mov	fp, sp
    c164:	ldr	r0, [pc, #12]	; c178 <rb_io_init_event+0x1c>
    c168:	ldr	r0, [pc, r0]
    c16c:	blx	r0
    c170:	pop	{fp, lr}
    c174:	b	e644 <rb_event_io_register_all>
    c178:	.word	0x0002e7fc

0000c17c <rb_init_netio>:
    c17c:	push	{r4, sl, fp, lr}
    c180:	add	fp, sp, #8
    c184:	ldr	r0, [pc, #468]	; c360 <rb_init_netio+0x1e4>
    c188:	add	r0, pc, r0
    c18c:	bl	4ee4 <getenv@plt>
    c190:	mov	r4, r0
    c194:	mov	r0, #49152	; 0xc000
    c198:	bl	a7bc <rb_malloc>
    c19c:	ldr	r1, [pc, #448]	; c364 <rb_init_netio+0x1e8>
    c1a0:	ldr	r1, [pc, r1]
    c1a4:	str	r0, [r1]
    c1a8:	bl	d1c0 <rb_init_ssl>
    c1ac:	cmp	r4, #0
    c1b0:	beq	c2ec <rb_init_netio+0x170>
    c1b4:	ldr	r0, [pc, #428]	; c368 <rb_init_netio+0x1ec>
    c1b8:	add	r0, pc, r0
    c1bc:	mov	r1, r4
    c1c0:	bl	5604 <strcmp@plt>
    c1c4:	cmp	r0, #0
    c1c8:	beq	c26c <rb_init_netio+0xf0>
    c1cc:	ldr	r0, [pc, #408]	; c36c <rb_init_netio+0x1f0>
    c1d0:	add	r0, pc, r0
    c1d4:	mov	r1, r4
    c1d8:	bl	5604 <strcmp@plt>
    c1dc:	cmp	r0, #0
    c1e0:	beq	c27c <rb_init_netio+0x100>
    c1e4:	ldr	r0, [pc, #388]	; c370 <rb_init_netio+0x1f4>
    c1e8:	add	r0, pc, r0
    c1ec:	mov	r1, r4
    c1f0:	bl	5604 <strcmp@plt>
    c1f4:	cmp	r0, #0
    c1f8:	beq	c28c <rb_init_netio+0x110>
    c1fc:	ldr	r0, [pc, #368]	; c374 <rb_init_netio+0x1f8>
    c200:	add	r0, pc, r0
    c204:	mov	r1, r4
    c208:	bl	5604 <strcmp@plt>
    c20c:	cmp	r0, #0
    c210:	beq	c29c <rb_init_netio+0x120>
    c214:	ldr	r0, [pc, #348]	; c378 <rb_init_netio+0x1fc>
    c218:	add	r0, pc, r0
    c21c:	mov	r1, r4
    c220:	bl	5604 <strcmp@plt>
    c224:	cmp	r0, #0
    c228:	beq	c2ac <rb_init_netio+0x130>
    c22c:	ldr	r0, [pc, #328]	; c37c <rb_init_netio+0x200>
    c230:	add	r0, pc, r0
    c234:	mov	r1, r4
    c238:	bl	5604 <strcmp@plt>
    c23c:	cmp	r0, #0
    c240:	beq	c2bc <rb_init_netio+0x140>
    c244:	ldr	r0, [pc, #308]	; c380 <rb_init_netio+0x204>
    c248:	add	r0, pc, r0
    c24c:	mov	r1, r4
    c250:	bl	5604 <strcmp@plt>
    c254:	cmp	r0, #0
    c258:	bne	c2c8 <rb_init_netio+0x14c>
    c25c:	bl	c984 <try_select>
    c260:	cmp	r0, #0
    c264:	bne	c2c8 <rb_init_netio+0x14c>
    c268:	b	c34c <rb_init_netio+0x1d0>
    c26c:	bl	c38c <try_epoll>
    c270:	cmp	r0, #0
    c274:	bne	c2c8 <rb_init_netio+0x14c>
    c278:	b	c34c <rb_init_netio+0x1d0>
    c27c:	bl	c494 <try_kqueue>
    c280:	cmp	r0, #0
    c284:	bne	c2c8 <rb_init_netio+0x14c>
    c288:	b	c34c <rb_init_netio+0x1d0>
    c28c:	bl	c59c <try_ports>
    c290:	cmp	r0, #0
    c294:	bne	c2c8 <rb_init_netio+0x14c>
    c298:	b	c34c <rb_init_netio+0x1d0>
    c29c:	bl	c6a4 <try_poll>
    c2a0:	cmp	r0, #0
    c2a4:	bne	c2c8 <rb_init_netio+0x14c>
    c2a8:	b	c34c <rb_init_netio+0x1d0>
    c2ac:	bl	c790 <try_devpoll>
    c2b0:	cmp	r0, #0
    c2b4:	bne	c2c8 <rb_init_netio+0x14c>
    c2b8:	b	c34c <rb_init_netio+0x1d0>
    c2bc:	bl	c87c <try_sigio>
    c2c0:	cmp	r0, #0
    c2c4:	beq	c34c <rb_init_netio+0x1d0>
    c2c8:	ldr	r0, [pc, #180]	; c384 <rb_init_netio+0x208>
    c2cc:	add	r0, pc, r0
    c2d0:	mov	r1, r4
    c2d4:	bl	5604 <strcmp@plt>
    c2d8:	cmp	r0, #0
    c2dc:	bne	c2ec <rb_init_netio+0x170>
    c2e0:	bl	ca70 <try_win32>
    c2e4:	cmp	r0, #0
    c2e8:	beq	c34c <rb_init_netio+0x1d0>
    c2ec:	bl	c494 <try_kqueue>
    c2f0:	cmp	r0, #0
    c2f4:	beq	c34c <rb_init_netio+0x1d0>
    c2f8:	bl	c38c <try_epoll>
    c2fc:	cmp	r0, #0
    c300:	beq	c34c <rb_init_netio+0x1d0>
    c304:	bl	c59c <try_ports>
    c308:	cmp	r0, #0
    c30c:	beq	c34c <rb_init_netio+0x1d0>
    c310:	bl	c790 <try_devpoll>
    c314:	cmp	r0, #0
    c318:	beq	c34c <rb_init_netio+0x1d0>
    c31c:	bl	c87c <try_sigio>
    c320:	cmp	r0, #0
    c324:	beq	c34c <rb_init_netio+0x1d0>
    c328:	bl	c6a4 <try_poll>
    c32c:	cmp	r0, #0
    c330:	beq	c34c <rb_init_netio+0x1d0>
    c334:	bl	ca70 <try_win32>
    c338:	cmp	r0, #0
    c33c:	popeq	{r4, sl, fp, pc}
    c340:	bl	c984 <try_select>
    c344:	cmp	r0, #0
    c348:	bne	c350 <rb_init_netio+0x1d4>
    c34c:	pop	{r4, sl, fp, pc}
    c350:	ldr	r0, [pc, #48]	; c388 <rb_init_netio+0x20c>
    c354:	add	r0, pc, r0
    c358:	bl	5244 <rb_lib_log@plt>
    c35c:	bl	4d10 <abort@plt>
    c360:	.word	0x00009702
    c364:	.word	0x0001c208
    c368:	.word	0x000096e3
    c36c:	.word	0x000096d1
    c370:	.word	0x000096c0
    c374:	.word	0x0000969c
    c378:	.word	0x00009696
    c37c:	.word	0x00009686
    c380:	.word	0x00009674
    c384:	.word	0x000095f7
    c388:	.word	0x00009575

0000c38c <try_epoll>:
    c38c:	push	{fp, lr}
    c390:	mov	fp, sp
    c394:	bl	10794 <rb_init_netio_epoll>
    c398:	mov	r1, r0
    c39c:	mvn	r0, #0
    c3a0:	cmp	r1, #0
    c3a4:	popne	{fp, pc}
    c3a8:	ldr	r0, [pc, #164]	; c454 <try_epoll+0xc8>
    c3ac:	ldr	r0, [pc, r0]
    c3b0:	ldr	r1, [pc, #160]	; c458 <try_epoll+0xcc>
    c3b4:	add	r1, pc, r1
    c3b8:	str	r0, [r1]
    c3bc:	ldr	r0, [pc, #152]	; c45c <try_epoll+0xd0>
    c3c0:	ldr	r0, [pc, r0]
    c3c4:	ldr	r1, [pc, #148]	; c460 <try_epoll+0xd4>
    c3c8:	add	r1, pc, r1
    c3cc:	str	r0, [r1]
    c3d0:	ldr	r0, [pc, #140]	; c464 <try_epoll+0xd8>
    c3d4:	ldr	r0, [pc, r0]
    c3d8:	ldr	r1, [pc, #136]	; c468 <try_epoll+0xdc>
    c3dc:	add	r1, pc, r1
    c3e0:	str	r0, [r1]
    c3e4:	ldr	r0, [pc, #128]	; c46c <try_epoll+0xe0>
    c3e8:	ldr	r0, [pc, r0]
    c3ec:	ldr	r1, [pc, #124]	; c470 <try_epoll+0xe4>
    c3f0:	add	r1, pc, r1
    c3f4:	str	r0, [r1]
    c3f8:	ldr	r0, [pc, #116]	; c474 <try_epoll+0xe8>
    c3fc:	ldr	r0, [pc, r0]
    c400:	ldr	r1, [pc, #112]	; c478 <try_epoll+0xec>
    c404:	add	r1, pc, r1
    c408:	str	r0, [r1]
    c40c:	ldr	r0, [pc, #104]	; c47c <try_epoll+0xf0>
    c410:	ldr	r0, [pc, r0]
    c414:	ldr	r1, [pc, #100]	; c480 <try_epoll+0xf4>
    c418:	add	r1, pc, r1
    c41c:	str	r0, [r1]
    c420:	ldr	r0, [pc, #92]	; c484 <try_epoll+0xf8>
    c424:	ldr	r0, [pc, r0]
    c428:	ldr	r1, [pc, #88]	; c488 <try_epoll+0xfc>
    c42c:	add	r1, pc, r1
    c430:	str	r0, [r1]
    c434:	ldr	r0, [pc, #80]	; c48c <try_epoll+0x100>
    c438:	add	r0, pc, r0
    c43c:	ldr	r1, [pc, #76]	; c490 <try_epoll+0x104>
    c440:	add	r1, pc, r1
    c444:	mov	r2, #25
    c448:	bl	4fe0 <rb_strlcpy@plt>
    c44c:	mov	r0, #0
    c450:	pop	{fp, pc}
    c454:	.word	0x0001c004
    c458:	.word	0x0002e5b8
    c45c:	.word	0x0001bf90
    c460:	.word	0x0002e5a0
    c464:	.word	0x0001c018
    c468:	.word	0x0002e594
    c46c:	.word	0x0001bf84
    c470:	.word	0x0002e56c
    c474:	.word	0x0001bfb0
    c478:	.word	0x0002e55c
    c47c:	.word	0x0001bf30
    c480:	.word	0x0002e540
    c484:	.word	0x0001bfdc
    c488:	.word	0x0002e538
    c48c:	.word	0x0002e504
    c490:	.word	0x0000945b

0000c494 <try_kqueue>:
    c494:	push	{fp, lr}
    c498:	mov	fp, sp
    c49c:	bl	124c8 <rb_init_netio_kqueue>
    c4a0:	mov	r1, r0
    c4a4:	mvn	r0, #0
    c4a8:	cmp	r1, #0
    c4ac:	popne	{fp, pc}
    c4b0:	ldr	r0, [pc, #164]	; c55c <try_kqueue+0xc8>
    c4b4:	ldr	r0, [pc, r0]
    c4b8:	ldr	r1, [pc, #160]	; c560 <try_kqueue+0xcc>
    c4bc:	add	r1, pc, r1
    c4c0:	str	r0, [r1]
    c4c4:	ldr	r0, [pc, #152]	; c564 <try_kqueue+0xd0>
    c4c8:	ldr	r0, [pc, r0]
    c4cc:	ldr	r1, [pc, #148]	; c568 <try_kqueue+0xd4>
    c4d0:	add	r1, pc, r1
    c4d4:	str	r0, [r1]
    c4d8:	ldr	r0, [pc, #140]	; c56c <try_kqueue+0xd8>
    c4dc:	ldr	r0, [pc, r0]
    c4e0:	ldr	r1, [pc, #136]	; c570 <try_kqueue+0xdc>
    c4e4:	add	r1, pc, r1
    c4e8:	str	r0, [r1]
    c4ec:	ldr	r0, [pc, #128]	; c574 <try_kqueue+0xe0>
    c4f0:	ldr	r0, [pc, r0]
    c4f4:	ldr	r1, [pc, #124]	; c578 <try_kqueue+0xe4>
    c4f8:	add	r1, pc, r1
    c4fc:	str	r0, [r1]
    c500:	ldr	r0, [pc, #116]	; c57c <try_kqueue+0xe8>
    c504:	ldr	r0, [pc, r0]
    c508:	ldr	r1, [pc, #112]	; c580 <try_kqueue+0xec>
    c50c:	add	r1, pc, r1
    c510:	str	r0, [r1]
    c514:	ldr	r0, [pc, #104]	; c584 <try_kqueue+0xf0>
    c518:	ldr	r0, [pc, r0]
    c51c:	ldr	r1, [pc, #100]	; c588 <try_kqueue+0xf4>
    c520:	add	r1, pc, r1
    c524:	str	r0, [r1]
    c528:	ldr	r0, [pc, #92]	; c58c <try_kqueue+0xf8>
    c52c:	ldr	r0, [pc, r0]
    c530:	ldr	r1, [pc, #88]	; c590 <try_kqueue+0xfc>
    c534:	add	r1, pc, r1
    c538:	str	r0, [r1]
    c53c:	ldr	r0, [pc, #80]	; c594 <try_kqueue+0x100>
    c540:	add	r0, pc, r0
    c544:	ldr	r1, [pc, #76]	; c598 <try_kqueue+0x104>
    c548:	add	r1, pc, r1
    c54c:	mov	r2, #25
    c550:	bl	4fe0 <rb_strlcpy@plt>
    c554:	mov	r0, #0
    c558:	pop	{fp, pc}
    c55c:	.word	0x0001beac
    c560:	.word	0x0002e4b0
    c564:	.word	0x0001bedc
    c568:	.word	0x0002e498
    c56c:	.word	0x0001bea4
    c570:	.word	0x0002e48c
    c574:	.word	0x0001be88
    c578:	.word	0x0002e464
    c57c:	.word	0x0001beb8
    c580:	.word	0x0002e454
    c584:	.word	0x0001be64
    c588:	.word	0x0002e444
    c58c:	.word	0x0001bea0
    c590:	.word	0x0002e424
    c594:	.word	0x0002e3fc
    c598:	.word	0x00009359

0000c59c <try_ports>:
    c59c:	push	{fp, lr}
    c5a0:	mov	fp, sp
    c5a4:	bl	11674 <rb_init_netio_ports>
    c5a8:	mov	r1, r0
    c5ac:	mvn	r0, #0
    c5b0:	cmp	r1, #0
    c5b4:	popne	{fp, pc}
    c5b8:	ldr	r0, [pc, #164]	; c664 <try_ports+0xc8>
    c5bc:	ldr	r0, [pc, r0]
    c5c0:	ldr	r1, [pc, #160]	; c668 <try_ports+0xcc>
    c5c4:	add	r1, pc, r1
    c5c8:	str	r0, [r1]
    c5cc:	ldr	r0, [pc, #152]	; c66c <try_ports+0xd0>
    c5d0:	ldr	r0, [pc, r0]
    c5d4:	ldr	r1, [pc, #148]	; c670 <try_ports+0xd4>
    c5d8:	add	r1, pc, r1
    c5dc:	str	r0, [r1]
    c5e0:	ldr	r0, [pc, #140]	; c674 <try_ports+0xd8>
    c5e4:	ldr	r0, [pc, r0]
    c5e8:	ldr	r1, [pc, #136]	; c678 <try_ports+0xdc>
    c5ec:	add	r1, pc, r1
    c5f0:	str	r0, [r1]
    c5f4:	ldr	r0, [pc, #128]	; c67c <try_ports+0xe0>
    c5f8:	ldr	r0, [pc, r0]
    c5fc:	ldr	r1, [pc, #124]	; c680 <try_ports+0xe4>
    c600:	add	r1, pc, r1
    c604:	str	r0, [r1]
    c608:	ldr	r0, [pc, #116]	; c684 <try_ports+0xe8>
    c60c:	ldr	r0, [pc, r0]
    c610:	ldr	r1, [pc, #112]	; c688 <try_ports+0xec>
    c614:	add	r1, pc, r1
    c618:	str	r0, [r1]
    c61c:	ldr	r0, [pc, #104]	; c68c <try_ports+0xf0>
    c620:	ldr	r0, [pc, r0]
    c624:	ldr	r1, [pc, #100]	; c690 <try_ports+0xf4>
    c628:	add	r1, pc, r1
    c62c:	str	r0, [r1]
    c630:	ldr	r0, [pc, #92]	; c694 <try_ports+0xf8>
    c634:	ldr	r0, [pc, r0]
    c638:	ldr	r1, [pc, #88]	; c698 <try_ports+0xfc>
    c63c:	add	r1, pc, r1
    c640:	str	r0, [r1]
    c644:	ldr	r0, [pc, #80]	; c69c <try_ports+0x100>
    c648:	add	r0, pc, r0
    c64c:	ldr	r1, [pc, #76]	; c6a0 <try_ports+0x104>
    c650:	add	r1, pc, r1
    c654:	mov	r2, #25
    c658:	bl	4fe0 <rb_strlcpy@plt>
    c65c:	mov	r0, #0
    c660:	pop	{fp, pc}
    c664:	.word	0x0001bdb4
    c668:	.word	0x0002e3a8
    c66c:	.word	0x0001be00
    c670:	.word	0x0002e390
    c674:	.word	0x0001be14
    c678:	.word	0x0002e384
    c67c:	.word	0x0001bd44
    c680:	.word	0x0002e35c
    c684:	.word	0x0001bde8
    c688:	.word	0x0002e34c
    c68c:	.word	0x0001bd2c
    c690:	.word	0x0002e33c
    c694:	.word	0x0001bd94
    c698:	.word	0x0002e31c
    c69c:	.word	0x0002e2f4
    c6a0:	.word	0x00009258

0000c6a4 <try_poll>:
    c6a4:	push	{r4, sl, fp, lr}
    c6a8:	add	fp, sp, #8
    c6ac:	bl	111c8 <rb_init_netio_poll>
    c6b0:	mvn	r4, #0
    c6b4:	cmp	r0, #0
    c6b8:	beq	c6c4 <try_poll+0x20>
    c6bc:	mov	r0, r4
    c6c0:	pop	{r4, sl, fp, pc}
    c6c4:	ldr	r0, [pc, #144]	; c75c <try_poll+0xb8>
    c6c8:	add	r0, pc, r0
    c6cc:	mov	r4, #0
    c6d0:	str	r4, [r0]
    c6d4:	ldr	r0, [pc, #132]	; c760 <try_poll+0xbc>
    c6d8:	add	r0, pc, r0
    c6dc:	str	r4, [r0]
    c6e0:	ldr	r0, [pc, #124]	; c764 <try_poll+0xc0>
    c6e4:	add	r0, pc, r0
    c6e8:	str	r4, [r0]
    c6ec:	ldr	r0, [pc, #116]	; c768 <try_poll+0xc4>
    c6f0:	add	r0, pc, r0
    c6f4:	ldr	r1, [pc, #112]	; c76c <try_poll+0xc8>
    c6f8:	add	r1, pc, r1
    c6fc:	str	r1, [r0]
    c700:	ldr	r0, [pc, #104]	; c770 <try_poll+0xcc>
    c704:	ldr	r0, [pc, r0]
    c708:	ldr	r1, [pc, #100]	; c774 <try_poll+0xd0>
    c70c:	add	r1, pc, r1
    c710:	str	r0, [r1]
    c714:	ldr	r0, [pc, #92]	; c778 <try_poll+0xd4>
    c718:	ldr	r0, [pc, r0]
    c71c:	ldr	r1, [pc, #88]	; c77c <try_poll+0xd8>
    c720:	add	r1, pc, r1
    c724:	str	r0, [r1]
    c728:	ldr	r0, [pc, #80]	; c780 <try_poll+0xdc>
    c72c:	ldr	r0, [pc, r0]
    c730:	ldr	r1, [pc, #76]	; c784 <try_poll+0xe0>
    c734:	add	r1, pc, r1
    c738:	str	r0, [r1]
    c73c:	ldr	r0, [pc, #68]	; c788 <try_poll+0xe4>
    c740:	add	r0, pc, r0
    c744:	ldr	r1, [pc, #64]	; c78c <try_poll+0xe8>
    c748:	add	r1, pc, r1
    c74c:	mov	r2, #25
    c750:	bl	4fe0 <rb_strlcpy@plt>
    c754:	mov	r0, r4
    c758:	pop	{r4, sl, fp, pc}
    c75c:	.word	0x0002e294
    c760:	.word	0x0002e288
    c764:	.word	0x0002e280
    c768:	.word	0x0002e268
    c76c:	.word	0x00000a1c
    c770:	.word	0x0001bce0
    c774:	.word	0x0002e260
    c778:	.word	0x0001bcbc
    c77c:	.word	0x0002e248
    c780:	.word	0x0001bc3c
    c784:	.word	0x0002e23c
    c788:	.word	0x0002e1fc
    c78c:	.word	0x00009154

0000c790 <try_devpoll>:
    c790:	push	{r4, sl, fp, lr}
    c794:	add	fp, sp, #8
    c798:	bl	1073c <rb_init_netio_devpoll>
    c79c:	mvn	r4, #0
    c7a0:	cmp	r0, #0
    c7a4:	beq	c7b0 <try_devpoll+0x20>
    c7a8:	mov	r0, r4
    c7ac:	pop	{r4, sl, fp, pc}
    c7b0:	ldr	r0, [pc, #144]	; c848 <try_devpoll+0xb8>
    c7b4:	add	r0, pc, r0
    c7b8:	mov	r4, #0
    c7bc:	str	r4, [r0]
    c7c0:	ldr	r0, [pc, #132]	; c84c <try_devpoll+0xbc>
    c7c4:	add	r0, pc, r0
    c7c8:	str	r4, [r0]
    c7cc:	ldr	r0, [pc, #124]	; c850 <try_devpoll+0xc0>
    c7d0:	add	r0, pc, r0
    c7d4:	str	r4, [r0]
    c7d8:	ldr	r0, [pc, #116]	; c854 <try_devpoll+0xc4>
    c7dc:	add	r0, pc, r0
    c7e0:	ldr	r1, [pc, #112]	; c858 <try_devpoll+0xc8>
    c7e4:	add	r1, pc, r1
    c7e8:	str	r1, [r0]
    c7ec:	ldr	r0, [pc, #104]	; c85c <try_devpoll+0xcc>
    c7f0:	ldr	r0, [pc, r0]
    c7f4:	ldr	r1, [pc, #100]	; c860 <try_devpoll+0xd0>
    c7f8:	add	r1, pc, r1
    c7fc:	str	r0, [r1]
    c800:	ldr	r0, [pc, #92]	; c864 <try_devpoll+0xd4>
    c804:	ldr	r0, [pc, r0]
    c808:	ldr	r1, [pc, #88]	; c868 <try_devpoll+0xd8>
    c80c:	add	r1, pc, r1
    c810:	str	r0, [r1]
    c814:	ldr	r0, [pc, #80]	; c86c <try_devpoll+0xdc>
    c818:	ldr	r0, [pc, r0]
    c81c:	ldr	r1, [pc, #76]	; c870 <try_devpoll+0xe0>
    c820:	add	r1, pc, r1
    c824:	str	r0, [r1]
    c828:	ldr	r0, [pc, #68]	; c874 <try_devpoll+0xe4>
    c82c:	add	r0, pc, r0
    c830:	ldr	r1, [pc, #64]	; c878 <try_devpoll+0xe8>
    c834:	add	r1, pc, r1
    c838:	mov	r2, #25
    c83c:	bl	4fe0 <rb_strlcpy@plt>
    c840:	mov	r0, r4
    c844:	pop	{r4, sl, fp, pc}
    c848:	.word	0x0002e1a8
    c84c:	.word	0x0002e19c
    c850:	.word	0x0002e194
    c854:	.word	0x0002e17c
    c858:	.word	0x00000930
    c85c:	.word	0x0001bbe8
    c860:	.word	0x0002e174
    c864:	.word	0x0001bb94
    c868:	.word	0x0002e15c
    c86c:	.word	0x0001bb84
    c870:	.word	0x0002e150
    c874:	.word	0x0002e110
    c878:	.word	0x0000907a

0000c87c <try_sigio>:
    c87c:	push	{fp, lr}
    c880:	mov	fp, sp
    c884:	bl	116cc <rb_init_netio_sigio>
    c888:	mov	r1, r0
    c88c:	mvn	r0, #0
    c890:	cmp	r1, #0
    c894:	popne	{fp, pc}
    c898:	ldr	r0, [pc, #164]	; c944 <try_sigio+0xc8>
    c89c:	ldr	r0, [pc, r0]
    c8a0:	ldr	r1, [pc, #160]	; c948 <try_sigio+0xcc>
    c8a4:	add	r1, pc, r1
    c8a8:	str	r0, [r1]
    c8ac:	ldr	r0, [pc, #152]	; c94c <try_sigio+0xd0>
    c8b0:	ldr	r0, [pc, r0]
    c8b4:	ldr	r1, [pc, #148]	; c950 <try_sigio+0xd4>
    c8b8:	add	r1, pc, r1
    c8bc:	str	r0, [r1]
    c8c0:	ldr	r0, [pc, #140]	; c954 <try_sigio+0xd8>
    c8c4:	ldr	r0, [pc, r0]
    c8c8:	ldr	r1, [pc, #136]	; c958 <try_sigio+0xdc>
    c8cc:	add	r1, pc, r1
    c8d0:	str	r0, [r1]
    c8d4:	ldr	r0, [pc, #128]	; c95c <try_sigio+0xe0>
    c8d8:	ldr	r0, [pc, r0]
    c8dc:	ldr	r1, [pc, #124]	; c960 <try_sigio+0xe4>
    c8e0:	add	r1, pc, r1
    c8e4:	str	r0, [r1]
    c8e8:	ldr	r0, [pc, #116]	; c964 <try_sigio+0xe8>
    c8ec:	ldr	r0, [pc, r0]
    c8f0:	ldr	r1, [pc, #112]	; c968 <try_sigio+0xec>
    c8f4:	add	r1, pc, r1
    c8f8:	str	r0, [r1]
    c8fc:	ldr	r0, [pc, #104]	; c96c <try_sigio+0xf0>
    c900:	ldr	r0, [pc, r0]
    c904:	ldr	r1, [pc, #100]	; c970 <try_sigio+0xf4>
    c908:	add	r1, pc, r1
    c90c:	str	r0, [r1]
    c910:	ldr	r0, [pc, #92]	; c974 <try_sigio+0xf8>
    c914:	ldr	r0, [pc, r0]
    c918:	ldr	r1, [pc, #88]	; c978 <try_sigio+0xfc>
    c91c:	add	r1, pc, r1
    c920:	str	r0, [r1]
    c924:	ldr	r0, [pc, #80]	; c97c <try_sigio+0x100>
    c928:	add	r0, pc, r0
    c92c:	ldr	r1, [pc, #76]	; c980 <try_sigio+0x104>
    c930:	add	r1, pc, r1
    c934:	mov	r2, #25
    c938:	bl	4fe0 <rb_strlcpy@plt>
    c93c:	mov	r0, #0
    c940:	pop	{fp, pc}
    c944:	.word	0x0001bab8
    c948:	.word	0x0002e0c8
    c94c:	.word	0x0001bb04
    c950:	.word	0x0002e0b0
    c954:	.word	0x0001bb00
    c958:	.word	0x0002e0a4
    c95c:	.word	0x0001ba84
    c960:	.word	0x0002e07c
    c964:	.word	0x0001ba58
    c968:	.word	0x0002e06c
    c96c:	.word	0x0001bac0
    c970:	.word	0x0002e050
    c974:	.word	0x0001bacc
    c978:	.word	0x0002e048
    c97c:	.word	0x0002e014
    c980:	.word	0x00008f86

0000c984 <try_select>:
    c984:	push	{r4, sl, fp, lr}
    c988:	add	fp, sp, #8
    c98c:	bl	11fdc <rb_init_netio_select>
    c990:	mvn	r4, #0
    c994:	cmp	r0, #0
    c998:	beq	c9a4 <try_select+0x20>
    c99c:	mov	r0, r4
    c9a0:	pop	{r4, sl, fp, pc}
    c9a4:	ldr	r0, [pc, #144]	; ca3c <try_select+0xb8>
    c9a8:	add	r0, pc, r0
    c9ac:	mov	r4, #0
    c9b0:	str	r4, [r0]
    c9b4:	ldr	r0, [pc, #132]	; ca40 <try_select+0xbc>
    c9b8:	add	r0, pc, r0
    c9bc:	str	r4, [r0]
    c9c0:	ldr	r0, [pc, #124]	; ca44 <try_select+0xc0>
    c9c4:	add	r0, pc, r0
    c9c8:	str	r4, [r0]
    c9cc:	ldr	r0, [pc, #116]	; ca48 <try_select+0xc4>
    c9d0:	add	r0, pc, r0
    c9d4:	ldr	r1, [pc, #112]	; ca4c <try_select+0xc8>
    c9d8:	add	r1, pc, r1
    c9dc:	str	r1, [r0]
    c9e0:	ldr	r0, [pc, #104]	; ca50 <try_select+0xcc>
    c9e4:	ldr	r0, [pc, r0]
    c9e8:	ldr	r1, [pc, #100]	; ca54 <try_select+0xd0>
    c9ec:	add	r1, pc, r1
    c9f0:	str	r0, [r1]
    c9f4:	ldr	r0, [pc, #92]	; ca58 <try_select+0xd4>
    c9f8:	ldr	r0, [pc, r0]
    c9fc:	ldr	r1, [pc, #88]	; ca5c <try_select+0xd8>
    ca00:	add	r1, pc, r1
    ca04:	str	r0, [r1]
    ca08:	ldr	r0, [pc, #80]	; ca60 <try_select+0xdc>
    ca0c:	ldr	r0, [pc, r0]
    ca10:	ldr	r1, [pc, #76]	; ca64 <try_select+0xe0>
    ca14:	add	r1, pc, r1
    ca18:	str	r0, [r1]
    ca1c:	ldr	r0, [pc, #68]	; ca68 <try_select+0xe4>
    ca20:	add	r0, pc, r0
    ca24:	ldr	r1, [pc, #64]	; ca6c <try_select+0xe8>
    ca28:	add	r1, pc, r1
    ca2c:	mov	r2, #25
    ca30:	bl	4fe0 <rb_strlcpy@plt>
    ca34:	mov	r0, r4
    ca38:	pop	{r4, sl, fp, pc}
    ca3c:	.word	0x0002dfb4
    ca40:	.word	0x0002dfa8
    ca44:	.word	0x0002dfa0
    ca48:	.word	0x0002df88
    ca4c:	.word	0x0000073c
    ca50:	.word	0x0001b9bc
    ca54:	.word	0x0002df80
    ca58:	.word	0x0001ba10
    ca5c:	.word	0x0002df68
    ca60:	.word	0x0001b9dc
    ca64:	.word	0x0002df5c
    ca68:	.word	0x0002df1c
    ca6c:	.word	0x00008e94

0000ca70 <try_win32>:
    ca70:	push	{r4, sl, fp, lr}
    ca74:	add	fp, sp, #8
    ca78:	bl	587c <rb_init_netio_win32>
    ca7c:	mvn	r4, #0
    ca80:	cmp	r0, #0
    ca84:	beq	ca90 <try_win32+0x20>
    ca88:	mov	r0, r4
    ca8c:	pop	{r4, sl, fp, pc}
    ca90:	ldr	r0, [pc, #144]	; cb28 <try_win32+0xb8>
    ca94:	add	r0, pc, r0
    ca98:	mov	r4, #0
    ca9c:	str	r4, [r0]
    caa0:	ldr	r0, [pc, #132]	; cb2c <try_win32+0xbc>
    caa4:	add	r0, pc, r0
    caa8:	str	r4, [r0]
    caac:	ldr	r0, [pc, #124]	; cb30 <try_win32+0xc0>
    cab0:	add	r0, pc, r0
    cab4:	str	r4, [r0]
    cab8:	ldr	r0, [pc, #116]	; cb34 <try_win32+0xc4>
    cabc:	add	r0, pc, r0
    cac0:	ldr	r1, [pc, #112]	; cb38 <try_win32+0xc8>
    cac4:	add	r1, pc, r1
    cac8:	str	r1, [r0]
    cacc:	ldr	r0, [pc, #104]	; cb3c <try_win32+0xcc>
    cad0:	ldr	r0, [pc, r0]
    cad4:	ldr	r1, [pc, #100]	; cb40 <try_win32+0xd0>
    cad8:	add	r1, pc, r1
    cadc:	str	r0, [r1]
    cae0:	ldr	r0, [pc, #92]	; cb44 <try_win32+0xd4>
    cae4:	ldr	r0, [pc, r0]
    cae8:	ldr	r1, [pc, #88]	; cb48 <try_win32+0xd8>
    caec:	add	r1, pc, r1
    caf0:	str	r0, [r1]
    caf4:	ldr	r0, [pc, #80]	; cb4c <try_win32+0xdc>
    caf8:	ldr	r0, [pc, r0]
    cafc:	ldr	r1, [pc, #76]	; cb50 <try_win32+0xe0>
    cb00:	add	r1, pc, r1
    cb04:	str	r0, [r1]
    cb08:	ldr	r0, [pc, #68]	; cb54 <try_win32+0xe4>
    cb0c:	add	r0, pc, r0
    cb10:	ldr	r1, [pc, #64]	; cb58 <try_win32+0xe8>
    cb14:	add	r1, pc, r1
    cb18:	mov	r2, #25
    cb1c:	bl	4fe0 <rb_strlcpy@plt>
    cb20:	mov	r0, r4
    cb24:	pop	{r4, sl, fp, pc}
    cb28:	.word	0x0002dec8
    cb2c:	.word	0x0002debc
    cb30:	.word	0x0002deb4
    cb34:	.word	0x0002de9c
    cb38:	.word	0x00000650
    cb3c:	.word	0x0001b8c0
    cb40:	.word	0x0002de94
    cb44:	.word	0x0001b8a0
    cb48:	.word	0x0002de7c
    cb4c:	.word	0x0001b860
    cb50:	.word	0x0002de70
    cb54:	.word	0x0002de30
    cb58:	.word	0x00008daf

0000cb5c <rb_select>:
    cb5c:	push	{r4, sl, fp, lr}
    cb60:	add	fp, sp, #8
    cb64:	ldr	r1, [pc, #20]	; cb80 <rb_select+0x24>
    cb68:	ldr	r1, [pc, r1]
    cb6c:	blx	r1
    cb70:	mov	r4, r0
    cb74:	bl	cb84 <free_fds>
    cb78:	mov	r0, r4
    cb7c:	pop	{r4, sl, fp, pc}
    cb80:	.word	0x0002de04

0000cb84 <free_fds>:
    cb84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    cb88:	add	fp, sp, #24
    cb8c:	ldr	r5, [pc, #100]	; cbf8 <free_fds+0x74>
    cb90:	ldr	r5, [pc, r5]
    cb94:	cmp	r5, #0
    cb98:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
    cb9c:	ldr	r8, [pc, #88]	; cbfc <free_fds+0x78>
    cba0:	add	r8, pc, r8
    cba4:	ldr	r4, [pc, #84]	; cc00 <free_fds+0x7c>
    cba8:	add	r4, pc, r4
    cbac:	ldr	r6, [r5]
    cbb0:	ldr	r7, [r5, #8]
    cbb4:	ldr	r0, [pc, #72]	; cc04 <free_fds+0x80>
    cbb8:	ldr	r0, [pc, r0]
    cbbc:	sub	r0, r0, #1
    cbc0:	str	r0, [r8]
    cbc4:	ldr	r0, [r6, #12]
    cbc8:	bl	5268 <close@plt>
    cbcc:	mov	r0, r5
    cbd0:	mov	r1, r4
    cbd4:	bl	a768 <rb_dlinkDelete>
    cbd8:	ldr	r0, [pc, #40]	; cc08 <free_fds+0x84>
    cbdc:	ldr	r0, [pc, r0]
    cbe0:	mov	r1, r6
    cbe4:	bl	51fc <rb_bh_free@plt>
    cbe8:	cmp	r7, #0
    cbec:	mov	r5, r7
    cbf0:	bne	cbac <free_fds+0x28>
    cbf4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cbf8:	.word	0x0002dde4
    cbfc:	.word	0x0002dd90
    cc00:	.word	0x0002ddcc
    cc04:	.word	0x0002dd78
    cc08:	.word	0x0002dd5c

0000cc0c <rb_recv_fd_buf>:
    cc0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc10:	add	fp, sp, #28
    cc14:	sub	sp, sp, #132	; 0x84
    cc18:	mov	r4, r3
    cc1c:	str	r2, [fp, #-64]	; 0xffffffc0
    cc20:	str	r1, [fp, #-68]	; 0xffffffbc
    cc24:	mov	r1, #0
    cc28:	str	r1, [fp, #-60]	; 0xffffffc4
    cc2c:	str	r1, [fp, #-56]	; 0xffffffc8
    cc30:	sub	r2, fp, #68	; 0x44
    cc34:	str	r2, [fp, #-52]	; 0xffffffcc
    cc38:	mov	r2, #1
    cc3c:	str	r2, [fp, #-48]	; 0xffffffd0
    cc40:	str	r1, [fp, #-36]	; 0xffffffdc
    cc44:	ldr	r9, [fp, #8]
    cc48:	mov	r1, #19
    cc4c:	add	r1, r1, r9, lsl #2
    cc50:	bic	r1, r1, #7
    cc54:	sub	r1, sp, r1
    cc58:	mov	r2, #12
    cc5c:	add	r2, r2, r9, lsl #2
    cc60:	mov	sp, r1
    cc64:	str	r2, [fp, #-40]	; 0xffffffd8
    cc68:	str	r1, [fp, #-44]	; 0xffffffd4
    cc6c:	bl	4e30 <rb_get_fd@plt>
    cc70:	sub	r1, fp, #60	; 0x3c
    cc74:	mov	r2, #0
    cc78:	bl	5454 <recvmsg@plt>
    cc7c:	mov	sl, r0
    cc80:	cmp	r0, #1
    cc84:	blt	cd6c <rb_recv_fd_buf+0x160>
    cc88:	ldr	r0, [fp, #-40]	; 0xffffffd8
    cc8c:	cmp	r0, #0
    cc90:	beq	cd64 <rb_recv_fd_buf+0x158>
    cc94:	cmp	r0, #12
    cc98:	bcc	cd64 <rb_recv_fd_buf+0x158>
    cc9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    cca0:	cmp	r0, #0
    cca4:	beq	cd64 <rb_recv_fd_buf+0x158>
    cca8:	cmp	r9, #1
    ccac:	blt	cd6c <rb_recv_fd_buf+0x160>
    ccb0:	ldr	r1, [r0]
    ccb4:	sub	r1, r1, #12
    ccb8:	lsr	r6, r1, #2
    ccbc:	cmp	r6, #0
    ccc0:	beq	cd6c <rb_recv_fd_buf+0x160>
    ccc4:	add	r5, r0, #12
    ccc8:	mov	r8, #0
    cccc:	ldr	r7, [r5, r8, lsl #2]
    ccd0:	mov	r0, r7
    ccd4:	sub	r1, fp, #160	; 0xa0
    ccd8:	bl	14e18 <__fstat>
    ccdc:	mov	r1, #64	; 0x40
    cce0:	cmp	r0, #0
    cce4:	beq	cd14 <rb_recv_fd_buf+0x108>
    cce8:	ldr	r2, [pc, #148]	; cd84 <rb_recv_fd_buf+0x178>
    ccec:	add	r2, pc, r2
    ccf0:	mov	r0, r7
    ccf4:	bl	53a0 <rb_open@plt>
    ccf8:	str	r0, [r4, r8, lsl #2]
    ccfc:	add	r8, r8, #1
    cd00:	cmp	r8, r9
    cd04:	bge	cd6c <rb_recv_fd_buf+0x160>
    cd08:	cmp	r8, r6
    cd0c:	bcc	cccc <rb_recv_fd_buf+0xc0>
    cd10:	b	cd6c <rb_recv_fd_buf+0x160>
    cd14:	ldr	r0, [fp, #-144]	; 0xffffff70
    cd18:	and	r0, r0, #61440	; 0xf000
    cd1c:	cmp	r0, #49152	; 0xc000
    cd20:	beq	cd44 <rb_recv_fd_buf+0x138>
    cd24:	cmp	r0, #32768	; 0x8000
    cd28:	beq	cd54 <rb_recv_fd_buf+0x148>
    cd2c:	cmp	r0, #4096	; 0x1000
    cd30:	bne	cce8 <rb_recv_fd_buf+0xdc>
    cd34:	mov	r1, #8
    cd38:	ldr	r2, [pc, #60]	; cd7c <rb_recv_fd_buf+0x170>
    cd3c:	add	r2, pc, r2
    cd40:	b	ccf0 <rb_recv_fd_buf+0xe4>
    cd44:	mov	r1, #4
    cd48:	ldr	r2, [pc, #40]	; cd78 <rb_recv_fd_buf+0x16c>
    cd4c:	add	r2, pc, r2
    cd50:	b	ccf0 <rb_recv_fd_buf+0xe4>
    cd54:	mov	r1, #2
    cd58:	ldr	r2, [pc, #32]	; cd80 <rb_recv_fd_buf+0x174>
    cd5c:	add	r2, pc, r2
    cd60:	b	ccf0 <rb_recv_fd_buf+0xe4>
    cd64:	mov	r0, #0
    cd68:	str	r0, [r4]
    cd6c:	mov	r0, sl
    cd70:	sub	sp, fp, #28
    cd74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd78:	.word	0x00008bc6
    cd7c:	.word	0x00008be4
    cd80:	.word	0x00008bd0
    cd84:	.word	0x00008c17

0000cd88 <rb_send_fd_buf>:
    cd88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    cd8c:	add	fp, sp, #24
    cd90:	sub	sp, sp, #48	; 0x30
    cd94:	mov	r5, r2
    cd98:	mov	r6, r1
    cd9c:	mov	r9, r0
    cda0:	vmov.i32	q8, #0	; 0x00000000
    cda4:	sub	r0, fp, #56	; 0x38
    cda8:	add	r1, r0, #12
    cdac:	vst1.32	{d16-d17}, [r1]
    cdb0:	mov	r1, #48	; 0x30
    cdb4:	strb	r1, [fp, #-65]	; 0xffffffbf
    cdb8:	mov	r1, #20
    cdbc:	vst1.64	{d16-d17}, [r0], r1
    cdc0:	mov	r7, #0
    cdc4:	str	r7, [r0]
    cdc8:	str	r7, [fp, #-56]	; 0xffffffc8
    cdcc:	str	r7, [fp, #-52]	; 0xffffffcc
    cdd0:	str	r7, [fp, #-32]	; 0xffffffe0
    cdd4:	str	r7, [fp, #-40]	; 0xffffffd8
    cdd8:	sub	r0, fp, #64	; 0x40
    cddc:	str	r0, [fp, #-48]	; 0xffffffd0
    cde0:	mov	r0, #1
    cde4:	str	r0, [fp, #-44]	; 0xffffffd4
    cde8:	ldr	r1, [fp, #8]
    cdec:	sub	r2, fp, #65	; 0x41
    cdf0:	cmp	r1, #0
    cdf4:	movne	r2, r3
    cdf8:	str	r2, [fp, #-64]	; 0xffffffc0
    cdfc:	movweq	r1, #1
    ce00:	str	r1, [fp, #-60]	; 0xffffffc4
    ce04:	cmp	r5, #1
    ce08:	blt	ce8c <rb_send_fd_buf+0x104>
    ce0c:	mov	r1, #19
    ce10:	add	r1, r1, r5, lsl #2
    ce14:	bic	r1, r1, #7
    ce18:	mov	r8, sp
    ce1c:	sub	r1, sp, r1
    ce20:	mov	r2, #12
    ce24:	add	r2, r2, r5, lsl #2
    ce28:	mov	sp, r1
    ce2c:	str	r2, [fp, #-36]	; 0xffffffdc
    ce30:	str	r1, [fp, #-40]	; 0xffffffd8
    ce34:	lsl	r3, r5, #2
    ce38:	cmn	r3, #12
    ce3c:	movcc	r7, r1
    ce40:	str	r2, [r7]
    ce44:	str	r0, [r7, #4]
    ce48:	str	r0, [r7, #8]
    ce4c:	add	r4, r7, #12
    ce50:	ldr	r0, [r6], #4
    ce54:	bl	4e30 <rb_get_fd@plt>
    ce58:	str	r0, [r4], #4
    ce5c:	subs	r5, r5, #1
    ce60:	bne	ce50 <rb_send_fd_buf+0xc8>
    ce64:	ldr	r0, [r7]
    ce68:	str	r0, [fp, #-36]	; 0xffffffdc
    ce6c:	mov	r0, r9
    ce70:	bl	4e30 <rb_get_fd@plt>
    ce74:	sub	r1, fp, #56	; 0x38
    ce78:	mov	r2, #16384	; 0x4000
    ce7c:	bl	5028 <sendmsg@plt>
    ce80:	mov	sp, r8
    ce84:	sub	sp, fp, #24
    ce88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    ce8c:	mov	r0, r9
    ce90:	bl	4e30 <rb_get_fd@plt>
    ce94:	sub	r1, fp, #56	; 0x38
    ce98:	mov	r2, #16384	; 0x4000
    ce9c:	bl	5028 <sendmsg@plt>
    cea0:	sub	sp, fp, #24
    cea4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000cea8 <rb_ipv4_from_ipv6>:
    cea8:	mov	r2, r0
    ceac:	ldrh	r3, [r2, #8]!
    ceb0:	cmp	r3, #544	; 0x220
    ceb4:	beq	ced0 <rb_ipv4_from_ipv6+0x28>
    ceb8:	ldr	r3, [r2]
    cebc:	mov	r2, #0
    cec0:	cmp	r3, #288	; 0x120
    cec4:	beq	cedc <rb_ipv4_from_ipv6+0x34>
    cec8:	mov	r0, r2
    cecc:	bx	lr
    ced0:	ldr	r0, [r2, #2]
    ced4:	str	r0, [r1, #4]
    ced8:	b	cf00 <rb_ipv4_from_ipv6+0x58>
    cedc:	add	ip, r0, #20
    cee0:	add	r2, r1, #4
    cee4:	mov	r3, #0
    cee8:	ldrb	r0, [ip, r3]
    ceec:	mvn	r0, r0
    cef0:	strb	r0, [r2, r3]
    cef4:	add	r3, r3, #1
    cef8:	cmp	r3, #4
    cefc:	bne	cee8 <rb_ipv4_from_ipv6+0x40>
    cf00:	mov	r0, #2
    cf04:	str	r0, [r1]
    cf08:	mov	r2, #1
    cf0c:	mov	r0, r2
    cf10:	bx	lr

0000cf14 <mangle_mapped_sockaddr>:
    cf14:	push	{r4, r5, r6, sl, fp, lr}
    cf18:	add	fp, sp, #16
    cf1c:	mov	r4, r0
    cf20:	ldrh	r0, [r0]
    cf24:	cmp	r0, #10
    cf28:	bne	cf48 <mangle_mapped_sockaddr+0x34>
    cf2c:	mov	r5, r4
    cf30:	ldr	r0, [r5, #8]!
    cf34:	cmp	r0, #0
    cf38:	bne	cf48 <mangle_mapped_sockaddr+0x34>
    cf3c:	ldr	r0, [r4, #12]
    cf40:	cmp	r0, #0
    cf44:	beq	cf4c <mangle_mapped_sockaddr+0x38>
    cf48:	pop	{r4, r5, r6, sl, fp, pc}
    cf4c:	ldr	r6, [r4, #16]
    cf50:	movw	r0, #65535	; 0xffff
    cf54:	bl	bb00 <__bswap_32>
    cf58:	cmp	r6, r0
    cf5c:	popne	{r4, r5, r6, sl, fp, pc}
    cf60:	mov	r0, #2
    cf64:	strh	r0, [r4]
    cf68:	ldr	r0, [r4, #20]
    cf6c:	str	r0, [r4, #4]
    cf70:	mov	r0, #0
    cf74:	str	r0, [r5, #4]
    cf78:	str	r0, [r5]
    cf7c:	pop	{r4, r5, r6, sl, fp, pc}

0000cf80 <rb_dlinkMoveNode>:
    cf80:	ldr	ip, [r0, #4]
    cf84:	ldr	r3, [r0, #8]
    cf88:	add	r2, r3, #4
    cf8c:	cmp	r3, #0
    cf90:	addeq	r2, r1, #4
    cf94:	str	ip, [r2]
    cf98:	ldmib	r0, {r2, ip}
    cf9c:	cmp	r2, #0
    cfa0:	mov	r3, r1
    cfa4:	addne	r3, r2, #8
    cfa8:	str	ip, [r3]
    cfac:	mov	r3, #0
    cfb0:	ldr	r2, [pc, #88]	; d010 <rb_dlinkMoveNode+0x90>
    cfb4:	ldr	r2, [pc, r2]
    cfb8:	str	r3, [r0, #4]
    cfbc:	str	r2, [r0, #8]
    cfc0:	cmp	r2, #0
    cfc4:	beq	cfd4 <rb_dlinkMoveNode+0x54>
    cfc8:	add	r2, r2, #4
    cfcc:	str	r0, [r2]
    cfd0:	b	cfe8 <rb_dlinkMoveNode+0x68>
    cfd4:	ldr	r2, [pc, #56]	; d014 <rb_dlinkMoveNode+0x94>
    cfd8:	add	r2, pc, r2
    cfdc:	ldr	r3, [r2, #4]!
    cfe0:	cmp	r3, #0
    cfe4:	streq	r0, [r2]
    cfe8:	ldr	r2, [pc, #40]	; d018 <rb_dlinkMoveNode+0x98>
    cfec:	add	r2, pc, r2
    cff0:	str	r0, [r2]
    cff4:	ldr	r0, [r1, #8]
    cff8:	sub	r0, r0, #1
    cffc:	str	r0, [r1, #8]
    d000:	ldr	r0, [r2, #8]
    d004:	add	r0, r0, #1
    d008:	str	r0, [r2, #8]
    d00c:	bx	lr
    d010:	.word	0x0002d9c0
    d014:	.word	0x0002d99c
    d018:	.word	0x0002d988

0000d01c <inetntoa>:
    d01c:	ldrb	r1, [r0]
    d020:	ldr	ip, [pc, #232]	; d110 <inetntoa+0xf4>
    d024:	add	ip, pc, ip
    d028:	ldr	r1, [ip, r1, lsl #2]
    d02c:	ldrb	r2, [r1]
    d030:	cmp	r2, #0
    d034:	beq	d058 <inetntoa+0x3c>
    d038:	add	r3, r1, #1
    d03c:	ldr	r1, [pc, #212]	; d118 <inetntoa+0xfc>
    d040:	add	r1, pc, r1
    d044:	strb	r2, [r1], #1
    d048:	ldrb	r2, [r3], #1
    d04c:	cmp	r2, #0
    d050:	bne	d044 <inetntoa+0x28>
    d054:	b	d060 <inetntoa+0x44>
    d058:	ldr	r1, [pc, #180]	; d114 <inetntoa+0xf8>
    d05c:	add	r1, pc, r1
    d060:	push	{r4, sl, fp, lr}
    d064:	add	fp, sp, #8
    d068:	mov	lr, #46	; 0x2e
    d06c:	mov	r2, r1
    d070:	strb	lr, [r2], #1
    d074:	ldrb	r3, [r0, #1]
    d078:	ldr	r4, [ip, r3, lsl #2]
    d07c:	ldrb	r3, [r4]
    d080:	cmp	r3, #0
    d084:	beq	d0a0 <inetntoa+0x84>
    d088:	add	r1, r4, #1
    d08c:	strb	r3, [r2], #1
    d090:	ldrb	r3, [r1], #1
    d094:	cmp	r3, #0
    d098:	bne	d08c <inetntoa+0x70>
    d09c:	sub	r1, r2, #1
    d0a0:	strb	lr, [r2]
    d0a4:	ldrb	r2, [r0, #2]
    d0a8:	ldr	lr, [ip, r2, lsl #2]
    d0ac:	ldrb	r3, [lr]
    d0b0:	add	r2, r1, #2
    d0b4:	cmp	r3, #0
    d0b8:	beq	d0d0 <inetntoa+0xb4>
    d0bc:	add	r1, lr, #1
    d0c0:	strb	r3, [r2], #1
    d0c4:	ldrb	r3, [r1], #1
    d0c8:	cmp	r3, #0
    d0cc:	bne	d0c0 <inetntoa+0xa4>
    d0d0:	mov	r1, #46	; 0x2e
    d0d4:	strb	r1, [r2], #1
    d0d8:	ldrb	r0, [r0, #3]
    d0dc:	ldr	r1, [ip, r0, lsl #2]
    d0e0:	ldrb	r0, [r1]
    d0e4:	cmp	r0, #0
    d0e8:	pop	{r4, sl, fp, lr}
    d0ec:	beq	d104 <inetntoa+0xe8>
    d0f0:	add	r1, r1, #1
    d0f4:	strb	r0, [r2], #1
    d0f8:	ldrb	r0, [r1], #1
    d0fc:	cmp	r0, #0
    d100:	bne	d0f4 <inetntoa+0xd8>
    d104:	mov	r0, #0
    d108:	strb	r0, [r2]
    d10c:	bx	lr
    d110:	.word	0x0001aa2c
    d114:	.word	0x0002d924
    d118:	.word	0x0002d940

0000d11c <rb_unsupported_event>:
    d11c:	mov	r0, #0
    d120:	bx	lr

0000d124 <rb_ssl_shutdown>:
    d124:	push	{r4, r5, r6, sl, fp, lr}
    d128:	add	fp, sp, #16
    d12c:	cmp	r0, #0
    d130:	beq	d198 <rb_ssl_shutdown+0x74>
    d134:	mov	r4, r0
    d138:	ldr	r0, [r0, #56]	; 0x38
    d13c:	cmp	r0, #0
    d140:	popeq	{r4, r5, r6, sl, fp, pc}
    d144:	bl	d19c <rb_ssl_last_err>
    d148:	mov	r6, #1
    d14c:	ldr	r0, [r4, #56]	; 0x38
    d150:	bl	53c4 <SSL_shutdown@plt>
    d154:	mov	r5, r0
    d158:	ldr	r0, [r4, #56]	; 0x38
    d15c:	mov	r1, r5
    d160:	bl	55c8 <SSL_get_error@plt>
    d164:	cmn	r5, #1
    d168:	bgt	d188 <rb_ssl_shutdown+0x64>
    d16c:	orr	r0, r0, #1
    d170:	cmp	r0, #3
    d174:	bne	d188 <rb_ssl_shutdown+0x64>
    d178:	add	r0, r6, #1
    d17c:	cmp	r6, #4
    d180:	mov	r6, r0
    d184:	bcc	d14c <rb_ssl_shutdown+0x28>
    d188:	ldr	r0, [r4, #56]	; 0x38
    d18c:	bl	5280 <SSL_free@plt>
    d190:	mov	r0, #0
    d194:	str	r0, [r4, #56]	; 0x38
    d198:	pop	{r4, r5, r6, sl, fp, pc}

0000d19c <rb_ssl_last_err>:
    d19c:	push	{r4, sl, fp, lr}
    d1a0:	add	fp, sp, #8
    d1a4:	mov	r0, #0
    d1a8:	mov	r4, r0
    d1ac:	bl	4d4c <ERR_get_error@plt>
    d1b0:	cmp	r0, #0
    d1b4:	bne	d1a8 <rb_ssl_last_err+0xc>
    d1b8:	mov	r0, r4
    d1bc:	pop	{r4, sl, fp, pc}

0000d1c0 <rb_init_ssl>:
    d1c0:	push	{fp, lr}
    d1c4:	mov	fp, sp
    d1c8:	ldr	r0, [pc, #20]	; d1e4 <rb_init_ssl+0x24>
    d1cc:	add	r0, pc, r0
    d1d0:	ldr	r1, [pc, #16]	; d1e8 <rb_init_ssl+0x28>
    d1d4:	add	r1, pc, r1
    d1d8:	bl	5244 <rb_lib_log@plt>
    d1dc:	mov	r0, #1
    d1e0:	pop	{fp, pc}
    d1e4:	.word	0x00008b32
    d1e8:	.word	0x00008b4a

0000d1ec <rb_setup_ssl_server>:
    d1ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d1f0:	add	fp, sp, #24
    d1f4:	sub	sp, sp, #8
    d1f8:	cmp	r0, #0
    d1fc:	beq	d2cc <rb_setup_ssl_server+0xe0>
    d200:	mov	r8, r2
    d204:	mov	r7, r1
    d208:	mov	r6, r0
    d20c:	ldr	r5, [pc, #716]	; d4e0 <rb_setup_ssl_server+0x2f4>
    d210:	add	r5, pc, r5
    d214:	cmp	r3, #0
    d218:	movne	r5, r3
    d21c:	cmp	r1, #0
    d220:	moveq	r7, r0
    d224:	bl	d19c <rb_ssl_last_err>
    d228:	bl	4cbc <TLS_method@plt>
    d22c:	bl	543c <SSL_CTX_new@plt>
    d230:	cmp	r0, #0
    d234:	beq	d2e4 <rb_setup_ssl_server+0xf8>
    d238:	mov	r4, r0
    d23c:	mov	r1, r6
    d240:	bl	5160 <SSL_CTX_use_certificate_chain_file@plt>
    d244:	cmp	r0, #1
    d248:	bne	d30c <rb_setup_ssl_server+0x120>
    d24c:	mov	r0, r4
    d250:	mov	r1, r7
    d254:	mov	r2, #1
    d258:	bl	5250 <SSL_CTX_use_PrivateKey_file@plt>
    d25c:	cmp	r0, #1
    d260:	bne	d334 <rb_setup_ssl_server+0x148>
    d264:	cmp	r8, #0
    d268:	beq	d370 <rb_setup_ssl_server+0x184>
    d26c:	ldr	r1, [pc, #668]	; d510 <rb_setup_ssl_server+0x324>
    d270:	add	r1, pc, r1
    d274:	mov	r0, r8
    d278:	bl	4f50 <fopen@plt>
    d27c:	mov	r7, r0
    d280:	mov	r0, #0
    d284:	str	r0, [sp, #4]
    d288:	cmp	r7, #0
    d28c:	beq	d388 <rb_setup_ssl_server+0x19c>
    d290:	add	r1, sp, #4
    d294:	mov	r0, r7
    d298:	mov	r2, #0
    d29c:	mov	r3, #0
    d2a0:	bl	5304 <PEM_read_DHparams@plt>
    d2a4:	cmp	r0, #0
    d2a8:	beq	d3b4 <rb_setup_ssl_server+0x1c8>
    d2ac:	ldr	r3, [sp, #4]
    d2b0:	mov	r0, r4
    d2b4:	mov	r1, #3
    d2b8:	mov	r2, #0
    d2bc:	bl	4fb0 <SSL_CTX_ctrl@plt>
    d2c0:	ldr	r0, [sp, #4]
    d2c4:	bl	5388 <DH_free@plt>
    d2c8:	b	d3dc <rb_setup_ssl_server+0x1f0>
    d2cc:	ldr	r0, [pc, #516]	; d4d8 <rb_setup_ssl_server+0x2ec>
    d2d0:	add	r0, pc, r0
    d2d4:	ldr	r1, [pc, #512]	; d4dc <rb_setup_ssl_server+0x2f0>
    d2d8:	add	r1, pc, r1
    d2dc:	bl	5244 <rb_lib_log@plt>
    d2e0:	b	d364 <rb_setup_ssl_server+0x178>
    d2e4:	bl	d19c <rb_ssl_last_err>
    d2e8:	bl	d548 <rb_ssl_strerror>
    d2ec:	ldr	r0, [pc, #496]	; d4e4 <rb_setup_ssl_server+0x2f8>
    d2f0:	add	r0, pc, r0
    d2f4:	ldr	r1, [pc, #492]	; d4e8 <rb_setup_ssl_server+0x2fc>
    d2f8:	add	r1, pc, r1
    d2fc:	ldr	r2, [pc, #488]	; d4ec <rb_setup_ssl_server+0x300>
    d300:	add	r2, pc, r2
    d304:	bl	5244 <rb_lib_log@plt>
    d308:	b	d364 <rb_setup_ssl_server+0x178>
    d30c:	bl	d19c <rb_ssl_last_err>
    d310:	bl	d548 <rb_ssl_strerror>
    d314:	ldr	r0, [pc, #468]	; d4f0 <rb_setup_ssl_server+0x304>
    d318:	add	r0, pc, r0
    d31c:	ldr	r1, [pc, #464]	; d4f4 <rb_setup_ssl_server+0x308>
    d320:	add	r1, pc, r1
    d324:	ldr	r3, [pc, #460]	; d4f8 <rb_setup_ssl_server+0x30c>
    d328:	add	r3, pc, r3
    d32c:	mov	r2, r6
    d330:	b	d358 <rb_setup_ssl_server+0x16c>
    d334:	bl	d19c <rb_ssl_last_err>
    d338:	bl	d548 <rb_ssl_strerror>
    d33c:	ldr	r0, [pc, #440]	; d4fc <rb_setup_ssl_server+0x310>
    d340:	add	r0, pc, r0
    d344:	ldr	r1, [pc, #436]	; d500 <rb_setup_ssl_server+0x314>
    d348:	add	r1, pc, r1
    d34c:	ldr	r3, [pc, #432]	; d504 <rb_setup_ssl_server+0x318>
    d350:	add	r3, pc, r3
    d354:	mov	r2, r7
    d358:	bl	5244 <rb_lib_log@plt>
    d35c:	mov	r0, r4
    d360:	bl	4dac <SSL_CTX_free@plt>
    d364:	mov	r0, #0
    d368:	sub	sp, fp, #24
    d36c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d370:	ldr	r0, [pc, #400]	; d508 <rb_setup_ssl_server+0x31c>
    d374:	add	r0, pc, r0
    d378:	ldr	r1, [pc, #396]	; d50c <rb_setup_ssl_server+0x320>
    d37c:	add	r1, pc, r1
    d380:	bl	5244 <rb_lib_log@plt>
    d384:	b	d3e4 <rb_setup_ssl_server+0x1f8>
    d388:	bl	5610 <__errno_location@plt>
    d38c:	ldr	r0, [r0]
    d390:	bl	4cec <strerror@plt>
    d394:	mov	r3, r0
    d398:	ldr	r0, [pc, #372]	; d514 <rb_setup_ssl_server+0x328>
    d39c:	add	r0, pc, r0
    d3a0:	ldr	r1, [pc, #368]	; d518 <rb_setup_ssl_server+0x32c>
    d3a4:	add	r1, pc, r1
    d3a8:	mov	r2, r8
    d3ac:	bl	5244 <rb_lib_log@plt>
    d3b0:	b	d3e4 <rb_setup_ssl_server+0x1f8>
    d3b4:	bl	d19c <rb_ssl_last_err>
    d3b8:	bl	d548 <rb_ssl_strerror>
    d3bc:	ldr	r0, [pc, #344]	; d51c <rb_setup_ssl_server+0x330>
    d3c0:	add	r0, pc, r0
    d3c4:	ldr	r1, [pc, #340]	; d520 <rb_setup_ssl_server+0x334>
    d3c8:	add	r1, pc, r1
    d3cc:	ldr	r3, [pc, #336]	; d524 <rb_setup_ssl_server+0x338>
    d3d0:	add	r3, pc, r3
    d3d4:	mov	r2, r8
    d3d8:	bl	5244 <rb_lib_log@plt>
    d3dc:	mov	r0, r7
    d3e0:	bl	4ecc <fclose@plt>
    d3e4:	mov	r0, r4
    d3e8:	mov	r1, r5
    d3ec:	bl	4d40 <SSL_CTX_set_cipher_list@plt>
    d3f0:	cmp	r0, #1
    d3f4:	bne	d4c0 <rb_setup_ssl_server+0x2d4>
    d3f8:	mov	r0, r4
    d3fc:	mov	r1, #44	; 0x2c
    d400:	mov	r2, #0
    d404:	mov	r3, #0
    d408:	bl	4fb0 <SSL_CTX_ctrl@plt>
    d40c:	ldr	r2, [pc, #284]	; d530 <rb_setup_ssl_server+0x344>
    d410:	add	r2, pc, r2
    d414:	mov	r0, r4
    d418:	mov	r1, #5
    d41c:	bl	5640 <SSL_CTX_set_verify@plt>
    d420:	mov	r0, r4
    d424:	mov	r1, #2048	; 0x800
    d428:	bl	4e60 <SSL_CTX_clear_options@plt>
    d42c:	mov	r0, r4
    d430:	mov	r1, #67108864	; 0x4000000
    d434:	bl	5178 <SSL_CTX_set_options@plt>
    d438:	mov	r0, r4
    d43c:	mov	r1, #16384	; 0x4000
    d440:	bl	5178 <SSL_CTX_set_options@plt>
    d444:	mov	r0, r4
    d448:	mov	r1, #4194304	; 0x400000
    d44c:	bl	5178 <SSL_CTX_set_options@plt>
    d450:	mov	r0, r4
    d454:	mov	r1, #0
    d458:	bl	5178 <SSL_CTX_set_options@plt>
    d45c:	mov	r0, r4
    d460:	mov	r1, #0
    d464:	bl	5178 <SSL_CTX_set_options@plt>
    d468:	ldr	r3, [pc, #196]	; d534 <rb_setup_ssl_server+0x348>
    d46c:	add	r3, pc, r3
    d470:	mov	r0, r4
    d474:	mov	r1, #92	; 0x5c
    d478:	mov	r2, #0
    d47c:	bl	4fb0 <SSL_CTX_ctrl@plt>
    d480:	ldr	r0, [pc, #176]	; d538 <rb_setup_ssl_server+0x34c>
    d484:	ldr	r0, [pc, r0]
    d488:	cmp	r0, #0
    d48c:	beq	d494 <rb_setup_ssl_server+0x2a8>
    d490:	bl	4dac <SSL_CTX_free@plt>
    d494:	ldr	r0, [pc, #160]	; d53c <rb_setup_ssl_server+0x350>
    d498:	add	r0, pc, r0
    d49c:	str	r4, [r0]
    d4a0:	ldr	r0, [pc, #152]	; d540 <rb_setup_ssl_server+0x354>
    d4a4:	add	r0, pc, r0
    d4a8:	ldr	r1, [pc, #148]	; d544 <rb_setup_ssl_server+0x358>
    d4ac:	add	r1, pc, r1
    d4b0:	bl	5244 <rb_lib_log@plt>
    d4b4:	mov	r0, #1
    d4b8:	sub	sp, fp, #24
    d4bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d4c0:	ldr	r0, [pc, #96]	; d528 <rb_setup_ssl_server+0x33c>
    d4c4:	add	r0, pc, r0
    d4c8:	ldr	r1, [pc, #92]	; d52c <rb_setup_ssl_server+0x340>
    d4cc:	add	r1, pc, r1
    d4d0:	bl	5244 <rb_lib_log@plt>
    d4d4:	b	d35c <rb_setup_ssl_server+0x170>
    d4d8:	.word	0x00008a5a
    d4dc:	.word	0x00008a74
    d4e0:	.word	0x00008da5
    d4e4:	.word	0x00008a70
    d4e8:	.word	0x00008a54
    d4ec:	.word	0x0002d894
    d4f0:	.word	0x00008a5c
    d4f4:	.word	0x00008a2c
    d4f8:	.word	0x0002d86c
    d4fc:	.word	0x00008a66
    d500:	.word	0x00008a04
    d504:	.word	0x0002d844
    d508:	.word	0x00008a5d
    d50c:	.word	0x000089d0
    d510:	.word	0x000090a4
    d514:	.word	0x00008a59
    d518:	.word	0x000089a8
    d51c:	.word	0x00008a4a
    d520:	.word	0x00008984
    d524:	.word	0x0002d7c4
    d528:	.word	0x00008967
    d52c:	.word	0x00008880
    d530:	.word	0x00000144
    d534:	.word	0x0001afe4
    d538:	.word	0x0002d50c
    d53c:	.word	0x0002d4f8
    d540:	.word	0x000089c4
    d544:	.word	0x000088a0

0000d548 <rb_ssl_strerror>:
    d548:	ldr	r1, [pc, #8]	; d558 <rb_ssl_strerror+0x10>
    d54c:	add	r1, pc, r1
    d550:	mov	r2, #512	; 0x200
    d554:	b	4ef0 <ERR_error_string_n@plt>
    d558:	.word	0x0002d648

0000d55c <verify_accept_all_cb>:
    d55c:	mov	r0, #1
    d560:	bx	lr

0000d564 <rb_init_prng>:
    d564:	push	{r4, r5, fp, lr}
    d568:	add	fp, sp, #8
    d56c:	mov	r5, r1
    d570:	mov	r4, r0
    d574:	bl	d19c <rb_ssl_last_err>
    d578:	cmp	r5, #0
    d57c:	bne	d5b8 <rb_init_prng+0x54>
    d580:	mov	r0, r4
    d584:	mvn	r1, #0
    d588:	bl	4d7c <RAND_load_file@plt>
    d58c:	cmn	r0, #1
    d590:	bgt	d5b8 <rb_init_prng+0x54>
    d594:	bl	d19c <rb_ssl_last_err>
    d598:	bl	d548 <rb_ssl_strerror>
    d59c:	ldr	r0, [pc, #104]	; d60c <rb_init_prng+0xa8>
    d5a0:	add	r0, pc, r0
    d5a4:	ldr	r1, [pc, #100]	; d610 <rb_init_prng+0xac>
    d5a8:	add	r1, pc, r1
    d5ac:	ldr	r2, [pc, #96]	; d614 <rb_init_prng+0xb0>
    d5b0:	add	r2, pc, r2
    d5b4:	bl	5244 <rb_lib_log@plt>
    d5b8:	bl	54d8 <RAND_status@plt>
    d5bc:	cmp	r0, #1
    d5c0:	bne	d5e0 <rb_init_prng+0x7c>
    d5c4:	ldr	r0, [pc, #88]	; d624 <rb_init_prng+0xc0>
    d5c8:	add	r0, pc, r0
    d5cc:	ldr	r1, [pc, #84]	; d628 <rb_init_prng+0xc4>
    d5d0:	add	r1, pc, r1
    d5d4:	bl	5244 <rb_lib_log@plt>
    d5d8:	mov	r0, #1
    d5dc:	pop	{r4, r5, fp, pc}
    d5e0:	bl	d19c <rb_ssl_last_err>
    d5e4:	bl	d548 <rb_ssl_strerror>
    d5e8:	ldr	r0, [pc, #40]	; d618 <rb_init_prng+0xb4>
    d5ec:	add	r0, pc, r0
    d5f0:	ldr	r1, [pc, #36]	; d61c <rb_init_prng+0xb8>
    d5f4:	add	r1, pc, r1
    d5f8:	ldr	r2, [pc, #32]	; d620 <rb_init_prng+0xbc>
    d5fc:	add	r2, pc, r2
    d600:	bl	5244 <rb_lib_log@plt>
    d604:	mov	r0, #0
    d608:	pop	{r4, r5, fp, pc}
    d60c:	.word	0x000088e9
    d610:	.word	0x000088f8
    d614:	.word	0x0002d5e4
    d618:	.word	0x000088c1
    d61c:	.word	0x000088ac
    d620:	.word	0x0002d598
    d624:	.word	0x000088f9
    d628:	.word	0x000088d0

0000d62c <rb_get_random>:
    d62c:	push	{r4, r5, fp, lr}
    d630:	add	fp, sp, #8
    d634:	mov	r4, r1
    d638:	mov	r5, r0
    d63c:	bl	d19c <rb_ssl_last_err>
    d640:	mov	r0, r5
    d644:	mov	r1, r4
    d648:	bl	5400 <RAND_bytes@plt>
    d64c:	mov	r1, r0
    d650:	mov	r0, #1
    d654:	cmp	r1, #1
    d658:	popeq	{r4, r5, fp, pc}
    d65c:	bl	d19c <rb_ssl_last_err>
    d660:	bl	d548 <rb_ssl_strerror>
    d664:	ldr	r0, [pc, #28]	; d688 <rb_get_random+0x5c>
    d668:	add	r0, pc, r0
    d66c:	ldr	r1, [pc, #24]	; d68c <rb_get_random+0x60>
    d670:	add	r1, pc, r1
    d674:	ldr	r2, [pc, #20]	; d690 <rb_get_random+0x64>
    d678:	add	r2, pc, r2
    d67c:	bl	5244 <rb_lib_log@plt>
    d680:	mov	r0, #0
    d684:	pop	{r4, r5, fp, pc}
    d688:	.word	0x0000886e
    d68c:	.word	0x00008879
    d690:	.word	0x0002d51c

0000d694 <rb_get_ssl_strerror>:
    d694:	push	{fp, lr}
    d698:	mov	fp, sp
    d69c:	ldr	r0, [r0, #64]	; 0x40
    d6a0:	bl	d548 <rb_ssl_strerror>
    d6a4:	ldr	r0, [pc, #4]	; d6b0 <rb_get_ssl_strerror+0x1c>
    d6a8:	add	r0, pc, r0
    d6ac:	pop	{fp, pc}
    d6b0:	.word	0x0002d4ec

0000d6b4 <rb_get_ssl_certfp>:
    d6b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d6b8:	add	fp, sp, #24
    d6bc:	mov	r4, #0
    d6c0:	cmp	r0, #0
    d6c4:	beq	d734 <rb_get_ssl_certfp+0x80>
    d6c8:	mov	r5, r0
    d6cc:	ldr	r0, [r0, #56]	; 0x38
    d6d0:	cmp	r0, #0
    d6d4:	beq	d734 <rb_get_ssl_certfp+0x80>
    d6d8:	mov	r8, r2
    d6dc:	mov	r6, r1
    d6e0:	bl	5340 <SSL_get_peer_certificate@plt>
    d6e4:	cmp	r0, #0
    d6e8:	beq	d734 <rb_get_ssl_certfp+0x80>
    d6ec:	mov	r7, r0
    d6f0:	ldr	r0, [r5, #56]	; 0x38
    d6f4:	bl	5364 <SSL_get_verify_result@plt>
    d6f8:	mov	r4, #0
    d6fc:	cmp	r0, #27
    d700:	bhi	d72c <rb_get_ssl_certfp+0x78>
    d704:	mov	r1, #1
    d708:	movw	r2, #1
    d70c:	movt	r2, #2108	; 0x83c
    d710:	tst	r2, r1, lsl r0
    d714:	beq	d72c <rb_get_ssl_certfp+0x78>
    d718:	mov	r0, r7
    d71c:	mov	r1, r6
    d720:	mov	r2, r8
    d724:	bl	d73c <make_certfp>
    d728:	mov	r4, r0
    d72c:	mov	r0, r7
    d730:	bl	5580 <X509_free@plt>
    d734:	mov	r0, r4
    d738:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000d73c <make_certfp>:
    d73c:	push	{r4, r5, r6, r7, fp, lr}
    d740:	add	fp, sp, #16
    d744:	sub	sp, sp, #8
    d748:	mov	r5, r1
    d74c:	mov	r6, r0
    d750:	mov	r4, #0
    d754:	str	r4, [sp, #4]
    d758:	cmp	r2, #1
    d75c:	ble	d790 <make_certfp+0x54>
    d760:	cmp	r2, #2
    d764:	beq	d7b0 <make_certfp+0x74>
    d768:	movw	r0, #4097	; 0x1001
    d76c:	cmp	r2, r0
    d770:	beq	d7c0 <make_certfp+0x84>
    d774:	movw	r0, #4098	; 0x1002
    d778:	cmp	r2, r0
    d77c:	bne	d84c <make_certfp+0x110>
    d780:	mov	r0, #64	; 0x40
    d784:	str	r0, [sp, #4]
    d788:	bl	54c0 <EVP_sha512@plt>
    d78c:	b	d7cc <make_certfp+0x90>
    d790:	cmp	r2, #0
    d794:	beq	d7e8 <make_certfp+0xac>
    d798:	cmp	r2, #1
    d79c:	bne	d84c <make_certfp+0x110>
    d7a0:	mov	r0, #32
    d7a4:	str	r0, [sp, #4]
    d7a8:	bl	54f0 <EVP_sha256@plt>
    d7ac:	b	d7f4 <make_certfp+0xb8>
    d7b0:	mov	r0, #64	; 0x40
    d7b4:	str	r0, [sp, #4]
    d7b8:	bl	54c0 <EVP_sha512@plt>
    d7bc:	b	d7f4 <make_certfp+0xb8>
    d7c0:	mov	r0, #32
    d7c4:	str	r0, [sp, #4]
    d7c8:	bl	54f0 <EVP_sha256@plt>
    d7cc:	mov	r7, r0
    d7d0:	mov	r0, r6
    d7d4:	bl	4e84 <X509_get_X509_PUBKEY@plt>
    d7d8:	mov	r6, r0
    d7dc:	ldr	r0, [pc, #120]	; d85c <make_certfp+0x120>
    d7e0:	ldr	r0, [pc, r0]
    d7e4:	b	d800 <make_certfp+0xc4>
    d7e8:	mov	r0, #20
    d7ec:	str	r0, [sp, #4]
    d7f0:	bl	5214 <EVP_sha1@plt>
    d7f4:	mov	r7, r0
    d7f8:	ldr	r0, [pc, #88]	; d858 <make_certfp+0x11c>
    d7fc:	ldr	r0, [pc, r0]
    d800:	add	r1, sp, #4
    d804:	str	r1, [sp]
    d808:	mov	r1, r7
    d80c:	mov	r2, r6
    d810:	mov	r3, r5
    d814:	bl	5328 <ASN1_item_digest@plt>
    d818:	cmp	r0, #1
    d81c:	bne	d828 <make_certfp+0xec>
    d820:	ldr	r4, [sp, #4]
    d824:	b	d84c <make_certfp+0x110>
    d828:	bl	d19c <rb_ssl_last_err>
    d82c:	bl	d548 <rb_ssl_strerror>
    d830:	ldr	r0, [pc, #40]	; d860 <make_certfp+0x124>
    d834:	add	r0, pc, r0
    d838:	ldr	r1, [pc, #36]	; d864 <make_certfp+0x128>
    d83c:	add	r1, pc, r1
    d840:	ldr	r2, [pc, #32]	; d868 <make_certfp+0x12c>
    d844:	add	r2, pc, r2
    d848:	bl	5244 <rb_lib_log@plt>
    d84c:	mov	r0, r4
    d850:	sub	sp, fp, #16
    d854:	pop	{r4, r5, r6, r7, fp, pc}
    d858:	.word	0x0001abf4
    d85c:	.word	0x0001ac1c
    d860:	.word	0x0000873d
    d864:	.word	0x0000874e
    d868:	.word	0x0002d350

0000d86c <rb_get_ssl_certfp_file>:
    d86c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d870:	add	fp, sp, #24
    d874:	mov	r8, r2
    d878:	mov	r6, r1
    d87c:	ldr	r1, [pc, #112]	; d8f4 <rb_get_ssl_certfp_file+0x88>
    d880:	add	r1, pc, r1
    d884:	bl	4f50 <fopen@plt>
    d888:	cmp	r0, #0
    d88c:	mvneq	r7, #0
    d890:	moveq	r0, r7
    d894:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
    d898:	mov	r4, r0
    d89c:	mov	r7, #0
    d8a0:	mov	r1, #0
    d8a4:	mov	r2, #0
    d8a8:	mov	r3, #0
    d8ac:	bl	513c <PEM_read_X509@plt>
    d8b0:	cmp	r0, #0
    d8b4:	beq	d8e4 <rb_get_ssl_certfp_file+0x78>
    d8b8:	mov	r5, r0
    d8bc:	mov	r1, r6
    d8c0:	mov	r2, r8
    d8c4:	bl	d73c <make_certfp>
    d8c8:	mov	r6, r0
    d8cc:	mov	r0, r5
    d8d0:	bl	5580 <X509_free@plt>
    d8d4:	mov	r0, r4
    d8d8:	bl	4ecc <fclose@plt>
    d8dc:	mov	r0, r6
    d8e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d8e4:	mov	r0, r4
    d8e8:	bl	4ecc <fclose@plt>
    d8ec:	mov	r0, r7
    d8f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d8f4:	.word	0x00008a94

0000d8f8 <rb_get_ssl_info>:
    d8f8:	push	{r4, r5, r6, r7, fp, lr}
    d8fc:	add	fp, sp, #16
    d900:	sub	sp, sp, #16
    d904:	mov	r5, r1
    d908:	mov	r6, r0
    d90c:	movw	r4, #4175	; 0x104f
    d910:	movt	r4, #4112	; 0x1010
    d914:	bl	5004 <OpenSSL_version_num@plt>
    d918:	cmp	r0, r4
    d91c:	bne	d938 <rb_get_ssl_info+0x40>
    d920:	ldr	r0, [pc, #80]	; d978 <rb_get_ssl_info+0x80>
    d924:	add	r0, pc, r0
    d928:	str	r0, [sp]
    d92c:	ldr	r2, [pc, #72]	; d97c <rb_get_ssl_info+0x84>
    d930:	add	r2, pc, r2
    d934:	b	d960 <rb_get_ssl_info+0x68>
    d938:	bl	5004 <OpenSSL_version_num@plt>
    d93c:	mov	r7, r0
    d940:	mov	r0, #0
    d944:	bl	55b0 <OpenSSL_version@plt>
    d948:	ldr	r1, [pc, #48]	; d980 <rb_get_ssl_info+0x88>
    d94c:	add	r1, pc, r1
    d950:	stm	sp, {r1, r7}
    d954:	str	r0, [sp, #8]
    d958:	ldr	r2, [pc, #36]	; d984 <rb_get_ssl_info+0x8c>
    d95c:	add	r2, pc, r2
    d960:	mov	r0, r6
    d964:	mov	r1, r5
    d968:	mov	r3, r4
    d96c:	bl	54cc <snprintf@plt>
    d970:	sub	sp, fp, #16
    d974:	pop	{r4, r5, r6, r7, fp, pc}
    d978:	.word	0x000085f7
    d97c:	.word	0x000085c7
    d980:	.word	0x000085cf
    d984:	.word	0x000085db

0000d988 <rb_ssl_get_cipher>:
    d988:	push	{r4, r5, r6, sl, fp, lr}
    d98c:	add	fp, sp, #16
    d990:	sub	sp, sp, #8
    d994:	mov	r4, #0
    d998:	cmp	r0, #0
    d99c:	beq	d9e8 <rb_ssl_get_cipher+0x60>
    d9a0:	mov	r5, r0
    d9a4:	ldr	r0, [r0, #56]	; 0x38
    d9a8:	cmp	r0, #0
    d9ac:	beq	d9e8 <rb_ssl_get_cipher+0x60>
    d9b0:	bl	55d4 <SSL_get_version@plt>
    d9b4:	mov	r6, r0
    d9b8:	ldr	r0, [r5, #56]	; 0x38
    d9bc:	bl	4e6c <SSL_get_current_cipher@plt>
    d9c0:	bl	4fec <SSL_CIPHER_get_name@plt>
    d9c4:	str	r0, [sp]
    d9c8:	ldr	r4, [pc, #36]	; d9f4 <rb_ssl_get_cipher+0x6c>
    d9cc:	add	r4, pc, r4
    d9d0:	ldr	r2, [pc, #32]	; d9f8 <rb_ssl_get_cipher+0x70>
    d9d4:	add	r2, pc, r2
    d9d8:	mov	r0, r4
    d9dc:	mov	r1, #512	; 0x200
    d9e0:	mov	r3, r6
    d9e4:	bl	54cc <snprintf@plt>
    d9e8:	mov	r0, r4
    d9ec:	sub	sp, fp, #16
    d9f0:	pop	{r4, r5, r6, sl, fp, pc}
    d9f4:	.word	0x0002cfc8
    d9f8:	.word	0x00008596

0000d9fc <rb_ssl_read>:
    d9fc:	push	{fp, lr}
    da00:	mov	fp, sp
    da04:	sub	sp, sp, #8
    da08:	mov	r3, r1
    da0c:	mov	r1, r0
    da10:	str	r2, [sp]
    da14:	mov	r0, #0
    da18:	mov	r2, r3
    da1c:	mov	r3, #0
    da20:	bl	da2c <rb_ssl_read_or_write>
    da24:	mov	sp, fp
    da28:	pop	{fp, pc}

0000da2c <rb_ssl_read_or_write>:
    da2c:	push	{r4, r5, r6, r7, fp, lr}
    da30:	add	fp, sp, #16
    da34:	mov	r5, r3
    da38:	mov	r6, r2
    da3c:	mov	r4, r1
    da40:	mov	r7, r0
    da44:	bl	d19c <rb_ssl_last_err>
    da48:	ldr	r0, [r4, #56]	; 0x38
    da4c:	ldr	r2, [fp, #8]
    da50:	cmp	r7, #0
    da54:	beq	da64 <rb_ssl_read_or_write+0x38>
    da58:	mov	r1, r5
    da5c:	bl	4f38 <SSL_write@plt>
    da60:	b	da6c <rb_ssl_read_or_write+0x40>
    da64:	mov	r1, r6
    da68:	bl	50a0 <SSL_read@plt>
    da6c:	mov	r1, r0
    da70:	cmn	r0, #1
    da74:	ble	da80 <rb_ssl_read_or_write+0x54>
    da78:	mov	r0, r1
    da7c:	pop	{r4, r5, r6, r7, fp, pc}
    da80:	ldr	r0, [r4, #56]	; 0x38
    da84:	bl	55c8 <SSL_get_error@plt>
    da88:	sub	r0, r0, #2
    da8c:	cmp	r0, #4
    da90:	bhi	dae8 <rb_ssl_read_or_write+0xbc>
    da94:	mov	r1, #0
    da98:	add	r2, pc, #4
    da9c:	ldr	r0, [r2, r0, lsl #2]
    daa0:	add	pc, r2, r0
    daa4:	.word	0x00000014
    daa8:	.word	0x0000002c
    daac:	.word	0x00000044
    dab0:	.word	0x00000058
    dab4:	.word	0xffffffd4
    dab8:	bl	5610 <__errno_location@plt>
    dabc:	mov	r1, #11
    dac0:	str	r1, [r0]
    dac4:	mvn	r1, #2
    dac8:	mov	r0, r1
    dacc:	pop	{r4, r5, r6, r7, fp, pc}
    dad0:	bl	5610 <__errno_location@plt>
    dad4:	mov	r1, #11
    dad8:	str	r1, [r0]
    dadc:	mvn	r1, #3
    dae0:	mov	r0, r1
    dae4:	pop	{r4, r5, r6, r7, fp, pc}
    dae8:	bl	d19c <rb_ssl_last_err>
    daec:	str	r0, [r4, #64]	; 0x40
    daf0:	cmp	r0, #0
    daf4:	bne	db0c <rb_ssl_read_or_write+0xe0>
    daf8:	b	db2c <rb_ssl_read_or_write+0x100>
    dafc:	bl	d19c <rb_ssl_last_err>
    db00:	cmp	r0, #0
    db04:	beq	db24 <rb_ssl_read_or_write+0xf8>
    db08:	str	r0, [r4, #64]	; 0x40
    db0c:	bl	5610 <__errno_location@plt>
    db10:	mov	r1, #5
    db14:	str	r1, [r0]
    db18:	mvn	r1, #1
    db1c:	mov	r0, r1
    db20:	pop	{r4, r5, r6, r7, fp, pc}
    db24:	mov	r0, #0
    db28:	str	r0, [r4, #64]	; 0x40
    db2c:	mvn	r1, #0
    db30:	mov	r0, r1
    db34:	pop	{r4, r5, r6, r7, fp, pc}

0000db38 <rb_ssl_write>:
    db38:	push	{fp, lr}
    db3c:	mov	fp, sp
    db40:	sub	sp, sp, #8
    db44:	mov	r3, r1
    db48:	mov	r1, r0
    db4c:	str	r2, [sp]
    db50:	mov	r0, #1
    db54:	mov	r2, #0
    db58:	bl	da2c <rb_ssl_read_or_write>
    db5c:	mov	sp, fp
    db60:	pop	{fp, pc}

0000db64 <rb_supports_ssl>:
    db64:	mov	r0, #1
    db68:	bx	lr

0000db6c <rb_ssl_handshake_count>:
    db6c:	ldr	r0, [r0, #60]	; 0x3c
    db70:	bx	lr

0000db74 <rb_ssl_clear_handshake_count>:
    db74:	mov	r1, #0
    db78:	str	r1, [r0, #60]	; 0x3c
    db7c:	bx	lr

0000db80 <rb_ssl_start_accepted>:
    db80:	push	{r4, r5, r6, r7, fp, lr}
    db84:	add	fp, sp, #16
    db88:	mov	r5, r3
    db8c:	mov	r6, r2
    db90:	mov	r7, r1
    db94:	mov	r4, r0
    db98:	ldrb	r0, [r0, #17]
    db9c:	orr	r0, r0, #32
    dba0:	strb	r0, [r4, #17]
    dba4:	mov	r0, #144	; 0x90
    dba8:	bl	dbfc <rb_malloc>
    dbac:	str	r0, [r4, #52]	; 0x34
    dbb0:	str	r6, [r0, #140]	; 0x8c
    dbb4:	str	r7, [r0, #132]	; 0x84
    dbb8:	mov	r1, #0
    dbbc:	mov	r2, #132	; 0x84
    dbc0:	bl	4f68 <memset@plt>
    dbc4:	ldr	r2, [pc, #44]	; dbf8 <rb_ssl_start_accepted+0x78>
    dbc8:	add	r2, pc, r2
    dbcc:	mov	r0, r4
    dbd0:	mov	r1, r5
    dbd4:	mov	r3, #0
    dbd8:	bl	4d34 <rb_settimeout@plt>
    dbdc:	mov	r0, r4
    dbe0:	mov	r1, #0
    dbe4:	bl	dc50 <rb_ssl_init_fd>
    dbe8:	mov	r0, r4
    dbec:	mov	r1, #0
    dbf0:	pop	{r4, r5, r6, r7, fp, lr}
    dbf4:	b	dcf4 <rb_ssl_accept_common>
    dbf8:	.word	0x0000004c

0000dbfc <rb_malloc>:
    dbfc:	push	{fp, lr}
    dc00:	mov	fp, sp
    dc04:	mov	r1, r0
    dc08:	mov	r0, #1
    dc0c:	bl	4f2c <calloc@plt>
    dc10:	cmp	r0, #0
    dc14:	popne	{fp, pc}
    dc18:	bl	52a4 <rb_outofmemory@plt>

0000dc1c <rb_ssl_timeout_cb>:
    dc1c:	push	{fp, lr}
    dc20:	mov	fp, sp
    dc24:	sub	sp, sp, #8
    dc28:	ldr	r1, [r0, #52]	; 0x34
    dc2c:	ldr	ip, [r1, #132]	; 0x84
    dc30:	ldr	r1, [r1, #140]	; 0x8c
    dc34:	str	r1, [sp]
    dc38:	mov	r1, #3
    dc3c:	mov	r2, #0
    dc40:	mov	r3, #0
    dc44:	blx	ip
    dc48:	mov	sp, fp
    dc4c:	pop	{fp, pc}

0000dc50 <rb_ssl_init_fd>:
    dc50:	push	{r4, r5, fp, lr}
    dc54:	add	fp, sp, #8
    dc58:	mov	r5, r1
    dc5c:	mov	r4, r0
    dc60:	bl	d19c <rb_ssl_last_err>
    dc64:	ldr	r0, [pc, #120]	; dce4 <rb_ssl_init_fd+0x94>
    dc68:	ldr	r0, [pc, r0]
    dc6c:	bl	5058 <SSL_new@plt>
    dc70:	str	r0, [r4, #56]	; 0x38
    dc74:	cmp	r0, #0
    dc78:	beq	dc94 <rb_ssl_init_fd+0x44>
    dc7c:	cmp	r5, #1
    dc80:	beq	dcc4 <rb_ssl_init_fd+0x74>
    dc84:	cmp	r5, #0
    dc88:	bne	dcc8 <rb_ssl_init_fd+0x78>
    dc8c:	bl	52ec <SSL_set_accept_state@plt>
    dc90:	b	dcc8 <rb_ssl_init_fd+0x78>
    dc94:	bl	d19c <rb_ssl_last_err>
    dc98:	bl	d548 <rb_ssl_strerror>
    dc9c:	ldr	r0, [pc, #68]	; dce8 <rb_ssl_init_fd+0x98>
    dca0:	add	r0, pc, r0
    dca4:	ldr	r1, [pc, #64]	; dcec <rb_ssl_init_fd+0x9c>
    dca8:	add	r1, pc, r1
    dcac:	ldr	r2, [pc, #60]	; dcf0 <rb_ssl_init_fd+0xa0>
    dcb0:	add	r2, pc, r2
    dcb4:	bl	5244 <rb_lib_log@plt>
    dcb8:	mov	r0, r4
    dcbc:	pop	{r4, r5, fp, lr}
    dcc0:	b	5190 <rb_close@plt>
    dcc4:	bl	5484 <SSL_set_connect_state@plt>
    dcc8:	ldr	r5, [r4, #56]	; 0x38
    dccc:	mov	r0, r4
    dcd0:	bl	4e30 <rb_get_fd@plt>
    dcd4:	mov	r1, r0
    dcd8:	mov	r0, r5
    dcdc:	pop	{r4, r5, fp, lr}
    dce0:	b	4fa4 <SSL_set_fd@plt>
    dce4:	.word	0x0002cd28
    dce8:	.word	0x000082f6
    dcec:	.word	0x000082fe
    dcf0:	.word	0x0002cee4

0000dcf4 <rb_ssl_accept_common>:
    dcf4:	push	{r4, r5, r6, sl, fp, lr}
    dcf8:	add	fp, sp, #16
    dcfc:	sub	sp, sp, #8
    dd00:	mov	r4, r0
    dd04:	bl	d19c <rb_ssl_last_err>
    dd08:	ldr	r0, [r4, #56]	; 0x38
    dd0c:	bl	50e8 <SSL_do_handshake@plt>
    dd10:	mov	r6, r0
    dd14:	ldr	r0, [r4, #56]	; 0x38
    dd18:	mov	r1, r6
    dd1c:	bl	55c8 <SSL_get_error@plt>
    dd20:	cmp	r6, #1
    dd24:	bne	dd98 <rb_ssl_accept_common+0xa4>
    dd28:	ldr	r0, [r4, #60]	; 0x3c
    dd2c:	add	r0, r0, #1
    dd30:	str	r0, [r4, #60]	; 0x3c
    dd34:	mov	r6, #0
    dd38:	mov	r0, r4
    dd3c:	mov	r1, #0
    dd40:	mov	r2, #0
    dd44:	mov	r3, #0
    dd48:	bl	4d34 <rb_settimeout@plt>
    dd4c:	mov	r0, r4
    dd50:	mov	r1, #3
    dd54:	mov	r2, #0
    dd58:	mov	r3, #0
    dd5c:	bl	4df4 <rb_setselect@plt>
    dd60:	ldr	r5, [r4, #52]	; 0x34
    dd64:	str	r6, [r4, #52]	; 0x34
    dd68:	ldr	r3, [r5, #128]	; 0x80
    dd6c:	ldr	r6, [r5, #132]	; 0x84
    dd70:	ldr	r0, [r5, #140]	; 0x8c
    dd74:	str	r0, [sp]
    dd78:	mov	r0, r4
    dd7c:	mov	r1, #0
    dd80:	mov	r2, r5
    dd84:	blx	r6
    dd88:	mov	r0, r5
    dd8c:	sub	sp, fp, #16
    dd90:	pop	{r4, r5, r6, sl, fp, lr}
    dd94:	b	e170 <rb_free>
    dd98:	mov	r5, r0
    dd9c:	cmn	r6, #1
    dda0:	cmpeq	r5, #2
    dda4:	beq	ddf0 <rb_ssl_accept_common+0xfc>
    dda8:	cmn	r6, #1
    ddac:	cmpeq	r5, #3
    ddb0:	beq	de04 <rb_ssl_accept_common+0x110>
    ddb4:	bl	5610 <__errno_location@plt>
    ddb8:	mov	r1, #5
    ddbc:	str	r1, [r0]
    ddc0:	str	r5, [r4, #64]	; 0x40
    ddc4:	ldr	r0, [r4, #52]	; 0x34
    ddc8:	ldr	r6, [r0, #132]	; 0x84
    ddcc:	ldr	r0, [r0, #140]	; 0x8c
    ddd0:	str	r0, [sp]
    ddd4:	mov	r0, r4
    ddd8:	mov	r1, #6
    dddc:	mov	r2, #0
    dde0:	mov	r3, #0
    dde4:	blx	r6
    dde8:	sub	sp, fp, #16
    ddec:	pop	{r4, r5, r6, sl, fp, pc}
    ddf0:	ldr	r2, [pc, #44]	; de24 <rb_ssl_accept_common+0x130>
    ddf4:	add	r2, pc, r2
    ddf8:	mov	r0, r4
    ddfc:	mov	r1, #1
    de00:	b	de14 <rb_ssl_accept_common+0x120>
    de04:	ldr	r2, [pc, #28]	; de28 <rb_ssl_accept_common+0x134>
    de08:	add	r2, pc, r2
    de0c:	mov	r0, r4
    de10:	mov	r1, #2
    de14:	mov	r3, #0
    de18:	sub	sp, fp, #16
    de1c:	pop	{r4, r5, r6, sl, fp, lr}
    de20:	b	4df4 <rb_setselect@plt>
    de24:	.word	0xfffffef8
    de28:	.word	0xfffffee4

0000de2c <rb_ssl_accept_setup>:
    de2c:	push	{r4, r5, r6, r7, fp, lr}
    de30:	add	fp, sp, #16
    de34:	mov	r5, r3
    de38:	mov	r6, r2
    de3c:	mov	r4, r1
    de40:	mov	r7, r0
    de44:	ldrb	r0, [r1, #17]
    de48:	orr	r0, r0, #32
    de4c:	strb	r0, [r1, #17]
    de50:	mov	r0, #144	; 0x90
    de54:	bl	dbfc <rb_malloc>
    de58:	str	r0, [r4, #52]	; 0x34
    de5c:	ldr	r1, [r7, #52]	; 0x34
    de60:	ldr	r2, [r1, #132]	; 0x84
    de64:	str	r2, [r0, #132]	; 0x84
    de68:	ldr	r1, [r1, #140]	; 0x8c
    de6c:	ldr	r2, [r4, #52]	; 0x34
    de70:	str	r5, [r2, #128]	; 0x80
    de74:	str	r1, [r2, #140]	; 0x8c
    de78:	vmov.i32	q8, #0	; 0x00000000
    de7c:	add	r1, r0, #96	; 0x60
    de80:	vst1.32	{d16-d17}, [r1]
    de84:	add	r1, r0, #80	; 0x50
    de88:	vst1.32	{d16-d17}, [r1]
    de8c:	add	r1, r0, #64	; 0x40
    de90:	vst1.32	{d16-d17}, [r1]
    de94:	add	r1, r0, #48	; 0x30
    de98:	vst1.32	{d16-d17}, [r1]
    de9c:	add	r1, r0, #32
    dea0:	vst1.32	{d16-d17}, [r1]
    dea4:	add	r1, r0, #16
    dea8:	vst1.32	{d16-d17}, [r1]
    deac:	mov	r1, #112	; 0x70
    deb0:	vst1.32	{d16-d17}, [r0], r1
    deb4:	vst1.32	{d16-d17}, [r0]
    deb8:	ldr	r0, [r4, #52]	; 0x34
    debc:	mov	r1, r6
    dec0:	mov	r2, r5
    dec4:	bl	5130 <memcpy@plt>
    dec8:	ldr	r2, [pc, #44]	; defc <rb_ssl_accept_setup+0xd0>
    decc:	add	r2, pc, r2
    ded0:	mov	r0, r4
    ded4:	mov	r1, #10
    ded8:	mov	r3, #0
    dedc:	bl	4d34 <rb_settimeout@plt>
    dee0:	mov	r0, r4
    dee4:	mov	r1, #0
    dee8:	bl	dc50 <rb_ssl_init_fd>
    deec:	mov	r0, r4
    def0:	mov	r1, #0
    def4:	pop	{r4, r5, r6, r7, fp, lr}
    def8:	b	dcf4 <rb_ssl_accept_common>
    defc:	.word	0xfffffd48

0000df00 <rb_ssl_listen>:
    df00:	push	{r4, sl, fp, lr}
    df04:	add	fp, sp, #8
    df08:	mov	r4, r0
    df0c:	bl	5514 <rb_listen@plt>
    df10:	mov	r1, #52	; 0x34
    df14:	strb	r1, [r4, #17]
    df18:	pop	{r4, sl, fp, pc}

0000df1c <rb_connect_tcp_ssl>:
    df1c:	cmp	r0, #0
    df20:	bxeq	lr
    df24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    df28:	add	fp, sp, #24
    df2c:	sub	sp, sp, #8
    df30:	mov	r7, r3
    df34:	mov	r4, r2
    df38:	mov	r5, r1
    df3c:	mov	r6, r0
    df40:	ldr	r8, [fp, #12]
    df44:	ldr	r9, [fp, #8]
    df48:	mov	r0, #12
    df4c:	bl	dbfc <rb_malloc>
    df50:	stm	r0, {r7, r9}
    df54:	str	r8, [r0, #8]
    df58:	stm	sp, {r0, r8}
    df5c:	ldr	r3, [pc, #24]	; df7c <rb_connect_tcp_ssl+0x60>
    df60:	add	r3, pc, r3
    df64:	mov	r0, r6
    df68:	mov	r1, r5
    df6c:	mov	r2, r4
    df70:	bl	4d70 <rb_connect_tcp@plt>
    df74:	sub	sp, fp, #24
    df78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    df7c:	.word	0x00000018

0000df80 <rb_ssl_tryconn>:
    df80:	push	{r4, r5, fp, lr}
    df84:	add	fp, sp, #8
    df88:	mov	r4, r2
    df8c:	mov	r5, r0
    df90:	cmp	r1, #0
    df94:	beq	dfa8 <rb_ssl_tryconn+0x28>
    df98:	mov	r0, r5
    df9c:	mov	r2, r4
    dfa0:	pop	{r4, r5, fp, lr}
    dfa4:	b	e17c <rb_ssl_connect_realcb>
    dfa8:	ldrb	r0, [r5, #17]
    dfac:	orr	r0, r0, #32
    dfb0:	strb	r0, [r5, #17]
    dfb4:	ldr	r1, [r4, #8]
    dfb8:	ldr	r2, [pc, #40]	; dfe8 <rb_ssl_tryconn+0x68>
    dfbc:	add	r2, pc, r2
    dfc0:	mov	r0, r5
    dfc4:	mov	r3, r4
    dfc8:	bl	4d34 <rb_settimeout@plt>
    dfcc:	mov	r0, r5
    dfd0:	mov	r1, #1
    dfd4:	bl	dc50 <rb_ssl_init_fd>
    dfd8:	mov	r0, r5
    dfdc:	mov	r1, r4
    dfe0:	pop	{r4, r5, fp, lr}
    dfe4:	b	e084 <rb_ssl_connect_common>
    dfe8:	.word	0x000000b4

0000dfec <rb_ssl_start_connected>:
    dfec:	cmp	r0, #0
    dff0:	bxeq	lr
    dff4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    dff8:	add	fp, sp, #24
    dffc:	mov	r8, r3
    e000:	mov	r5, r2
    e004:	mov	r6, r1
    e008:	mov	r4, r0
    e00c:	mov	r0, #12
    e010:	bl	dbfc <rb_malloc>
    e014:	mov	r7, r0
    e018:	str	r6, [r0]
    e01c:	stmib	r0, {r5, r8}
    e020:	mov	r0, #268	; 0x10c
    e024:	bl	dbfc <rb_malloc>
    e028:	str	r0, [r4, #48]	; 0x30
    e02c:	str	r6, [r0, #260]	; 0x104
    e030:	str	r5, [r0, #264]	; 0x108
    e034:	ldrb	r0, [r4, #17]
    e038:	orr	r0, r0, #32
    e03c:	strb	r0, [r4, #17]
    e040:	ldr	r1, [r7, #8]
    e044:	ldr	r2, [pc, #40]	; e074 <rb_ssl_start_connected+0x88>
    e048:	add	r2, pc, r2
    e04c:	mov	r0, r4
    e050:	mov	r3, r7
    e054:	bl	4d34 <rb_settimeout@plt>
    e058:	mov	r0, r4
    e05c:	mov	r1, #1
    e060:	bl	dc50 <rb_ssl_init_fd>
    e064:	mov	r0, r4
    e068:	mov	r1, r7
    e06c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    e070:	b	e084 <rb_ssl_connect_common>
    e074:	.word	0x00000028

0000e078 <rb_ssl_tryconn_timeout_cb>:
    e078:	mov	r2, r1
    e07c:	mov	r1, #3
    e080:	b	e17c <rb_ssl_connect_realcb>

0000e084 <rb_ssl_connect_common>:
    e084:	push	{r4, r5, r6, r7, fp, lr}
    e088:	add	fp, sp, #16
    e08c:	mov	r4, r1
    e090:	mov	r5, r0
    e094:	bl	d19c <rb_ssl_last_err>
    e098:	ldr	r0, [r5, #56]	; 0x38
    e09c:	bl	50e8 <SSL_do_handshake@plt>
    e0a0:	mov	r7, r0
    e0a4:	ldr	r0, [r5, #56]	; 0x38
    e0a8:	mov	r1, r7
    e0ac:	bl	55c8 <SSL_get_error@plt>
    e0b0:	cmp	r7, #1
    e0b4:	bne	e0f8 <rb_ssl_connect_common+0x74>
    e0b8:	ldr	r0, [r5, #60]	; 0x3c
    e0bc:	add	r0, r0, #1
    e0c0:	str	r0, [r5, #60]	; 0x3c
    e0c4:	mov	r0, r5
    e0c8:	mov	r1, #0
    e0cc:	mov	r2, #0
    e0d0:	mov	r3, #0
    e0d4:	bl	4d34 <rb_settimeout@plt>
    e0d8:	mov	r0, r5
    e0dc:	mov	r1, #3
    e0e0:	mov	r2, #0
    e0e4:	mov	r3, #0
    e0e8:	bl	4df4 <rb_setselect@plt>
    e0ec:	mov	r0, r5
    e0f0:	mov	r1, #0
    e0f4:	b	e12c <rb_ssl_connect_common+0xa8>
    e0f8:	mov	r6, r0
    e0fc:	cmn	r7, #1
    e100:	cmpeq	r6, #2
    e104:	beq	e138 <rb_ssl_connect_common+0xb4>
    e108:	cmn	r7, #1
    e10c:	cmpeq	r6, #3
    e110:	beq	e14c <rb_ssl_connect_common+0xc8>
    e114:	bl	5610 <__errno_location@plt>
    e118:	mov	r1, #5
    e11c:	str	r1, [r0]
    e120:	str	r6, [r5, #64]	; 0x40
    e124:	mov	r0, r5
    e128:	mov	r1, #6
    e12c:	mov	r2, r4
    e130:	pop	{r4, r5, r6, r7, fp, lr}
    e134:	b	e17c <rb_ssl_connect_realcb>
    e138:	ldr	r2, [pc, #40]	; e168 <rb_ssl_connect_common+0xe4>
    e13c:	add	r2, pc, r2
    e140:	mov	r0, r5
    e144:	mov	r1, #1
    e148:	b	e15c <rb_ssl_connect_common+0xd8>
    e14c:	ldr	r2, [pc, #24]	; e16c <rb_ssl_connect_common+0xe8>
    e150:	add	r2, pc, r2
    e154:	mov	r0, r5
    e158:	mov	r1, #2
    e15c:	mov	r3, r4
    e160:	pop	{r4, r5, r6, r7, fp, lr}
    e164:	b	4df4 <rb_setselect@plt>
    e168:	.word	0xffffff40
    e16c:	.word	0xffffff2c

0000e170 <rb_free>:
    e170:	cmp	r0, #0
    e174:	bxeq	lr
    e178:	b	501c <free@plt>

0000e17c <rb_ssl_connect_realcb>:
    e17c:	push	{r4, sl, fp, lr}
    e180:	add	fp, sp, #8
    e184:	mov	r4, r2
    e188:	ldr	r2, [r0, #48]	; 0x30
    e18c:	ldr	r3, [r4]
    e190:	str	r3, [r2, #260]	; 0x104
    e194:	ldr	r3, [r4, #4]
    e198:	str	r3, [r2, #264]	; 0x108
    e19c:	bl	ad0c <rb_connect_callback>
    e1a0:	mov	r0, r4
    e1a4:	pop	{r4, sl, fp, lr}
    e1a8:	b	e170 <rb_free>

0000e1ac <rb_event_add>:
    e1ac:	push	{r4, r5, r6, sl, fp, lr}
    e1b0:	add	fp, sp, #16
    e1b4:	sub	sp, sp, #8
    e1b8:	mov	r4, r2
    e1bc:	mov	r5, r1
    e1c0:	mov	r6, r0
    e1c4:	cmp	r3, #0
    e1c8:	ble	e1e8 <rb_event_add+0x3c>
    e1cc:	str	r3, [sp]
    e1d0:	mov	r0, r6
    e1d4:	mov	r1, r5
    e1d8:	mov	r2, r4
    e1dc:	bl	e208 <rb_event_add_common>
    e1e0:	sub	sp, fp, #16
    e1e4:	pop	{r4, r5, r6, sl, fp, pc}
    e1e8:	ldr	r0, [pc, #20]	; e204 <rb_event_add+0x58>
    e1ec:	add	r0, pc, r0
    e1f0:	mov	r1, r6
    e1f4:	mov	r2, r3
    e1f8:	bl	5244 <rb_lib_log@plt>
    e1fc:	mov	r3, #1
    e200:	b	e1cc <rb_event_add+0x20>
    e204:	.word	0x00007f59

0000e208 <rb_event_add_common>:
    e208:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e20c:	add	fp, sp, #24
    e210:	mov	r4, r3
    e214:	mov	r8, r2
    e218:	mov	r7, r1
    e21c:	mov	r6, r0
    e220:	bl	e810 <rb_malloc>
    e224:	mov	r5, r0
    e228:	str	r7, [r0, #12]
    e22c:	mov	r0, r6
    e230:	bl	e830 <rb_strndup>
    e234:	str	r8, [r5, #16]
    e238:	str	r0, [r5, #20]
    e23c:	bl	5118 <rb_current_time@plt>
    e240:	str	r4, [r5, #32]
    e244:	ldr	r1, [fp, #8]
    e248:	str	r1, [r5, #24]
    e24c:	mov	r1, #0
    e250:	str	r1, [r5, #44]	; 0x2c
    e254:	add	r0, r0, r4
    e258:	str	r0, [r5, #28]
    e25c:	ldr	r1, [pc, #60]	; e2a0 <rb_event_add_common+0x98>
    e260:	ldr	r1, [pc, r1]
    e264:	cmp	r0, r1
    e268:	blt	e274 <rb_event_add_common+0x6c>
    e26c:	cmn	r1, #1
    e270:	bne	e280 <rb_event_add_common+0x78>
    e274:	ldr	r1, [pc, #40]	; e2a4 <rb_event_add_common+0x9c>
    e278:	add	r1, pc, r1
    e27c:	str	r0, [r1]
    e280:	mov	r0, r5
    e284:	mov	r1, r5
    e288:	bl	e868 <rb_dlinkAdd>
    e28c:	mov	r0, r5
    e290:	mov	r1, r4
    e294:	bl	c074 <rb_io_sched_event>
    e298:	mov	r0, r5
    e29c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e2a0:	.word	0x0001a20c
    e2a4:	.word	0x0001a1f4

0000e2a8 <rb_event_addonce>:
    e2a8:	push	{r4, r5, r6, sl, fp, lr}
    e2ac:	add	fp, sp, #16
    e2b0:	sub	sp, sp, #8
    e2b4:	mov	r4, r2
    e2b8:	mov	r5, r1
    e2bc:	mov	r6, r0
    e2c0:	cmp	r3, #0
    e2c4:	ble	e2e8 <rb_event_addonce+0x40>
    e2c8:	mov	r0, #0
    e2cc:	str	r0, [sp]
    e2d0:	mov	r0, r6
    e2d4:	mov	r1, r5
    e2d8:	mov	r2, r4
    e2dc:	bl	e208 <rb_event_add_common>
    e2e0:	sub	sp, fp, #16
    e2e4:	pop	{r4, r5, r6, sl, fp, pc}
    e2e8:	ldr	r0, [pc, #20]	; e304 <rb_event_addonce+0x5c>
    e2ec:	add	r0, pc, r0
    e2f0:	mov	r1, r6
    e2f4:	mov	r2, r3
    e2f8:	bl	5244 <rb_lib_log@plt>
    e2fc:	mov	r3, #1
    e300:	b	e2c8 <rb_event_addonce+0x20>
    e304:	.word	0x00007e9d

0000e308 <rb_event_delete>:
    e308:	cmp	r0, #0
    e30c:	bxeq	lr
    e310:	mov	r1, #1
    e314:	str	r1, [r0, #44]	; 0x2c
    e318:	b	c0e0 <rb_io_unsched_event>

0000e31c <rb_event_find_delete>:
    e31c:	push	{fp, lr}
    e320:	mov	fp, sp
    e324:	bl	e330 <rb_event_find>
    e328:	pop	{fp, lr}
    e32c:	b	e308 <rb_event_delete>

0000e330 <rb_event_find>:
    e330:	ldr	r3, [pc, #72]	; e380 <rb_event_find+0x50>
    e334:	ldr	r3, [pc, r3]
    e338:	cmp	r3, #0
    e33c:	bne	e350 <rb_event_find+0x20>
    e340:	b	e374 <rb_event_find+0x44>
    e344:	ldr	r3, [r3, #8]
    e348:	cmp	r3, #0
    e34c:	beq	e374 <rb_event_find+0x44>
    e350:	ldr	ip, [r3]
    e354:	ldr	r2, [ip, #12]
    e358:	cmp	r2, r0
    e35c:	bne	e344 <rb_event_find+0x14>
    e360:	ldr	r2, [ip, #16]
    e364:	cmp	r2, r1
    e368:	bne	e344 <rb_event_find+0x14>
    e36c:	mov	r0, ip
    e370:	bx	lr
    e374:	mov	ip, #0
    e378:	mov	r0, ip
    e37c:	bx	lr
    e380:	.word	0x0002ca84

0000e384 <rb_event_addish>:
    e384:	push	{r4, r5, r6, r7, fp, lr}
    e388:	add	fp, sp, #16
    e38c:	sub	sp, sp, #8
    e390:	mov	r6, r3
    e394:	mov	r4, r2
    e398:	mov	r5, r1
    e39c:	mov	r7, r0
    e3a0:	cmp	r3, #0
    e3a4:	rsbmi	r6, r6, #0
    e3a8:	cmp	r6, #2
    e3ac:	rsbgt	r6, r6, #0
    e3b0:	mov	r0, r6
    e3b4:	bl	e3d8 <rb_event_frequency>
    e3b8:	mov	r3, r0
    e3bc:	str	r6, [sp]
    e3c0:	mov	r0, r7
    e3c4:	mov	r1, r5
    e3c8:	mov	r2, r4
    e3cc:	bl	e208 <rb_event_add_common>
    e3d0:	sub	sp, fp, #16
    e3d4:	pop	{r4, r5, r6, r7, fp, pc}

0000e3d8 <rb_event_frequency>:
    e3d8:	push	{r4, sl, fp, lr}
    e3dc:	add	fp, sp, #8
    e3e0:	mov	r4, r0
    e3e4:	cmn	r0, #1
    e3e8:	ble	e3f4 <rb_event_frequency+0x1c>
    e3ec:	mov	r0, r4
    e3f0:	pop	{r4, sl, fp, pc}
    e3f4:	bl	5460 <rand@plt>
    e3f8:	movw	r1, #19923	; 0x4dd3
    e3fc:	movt	r1, #4194	; 0x1062
    e400:	smmul	r2, r0, r1
    e404:	asr	r3, r2, #6
    e408:	add	r2, r3, r2, lsr #31
    e40c:	mov	r3, #1000	; 0x3e8
    e410:	mls	r0, r2, r3, r0
    e414:	mov	r2, #0
    e418:	sub	r2, r2, r4, lsl #1
    e41c:	movw	r3, #21846	; 0x5556
    e420:	movt	r3, #21845	; 0x5555
    e424:	smmul	r2, r2, r3
    e428:	add	r2, r2, r2, lsr #31
    e42c:	mul	r0, r0, r2
    e430:	smmul	r0, r0, r1
    e434:	asr	r1, r0, #6
    e438:	add	r0, r1, r0, lsr #31
    e43c:	add	r4, r0, r2
    e440:	mov	r0, r4
    e444:	pop	{r4, sl, fp, pc}

0000e448 <rb_run_one_event>:
    e448:	push	{r4, r5, fp, lr}
    e44c:	add	fp, sp, #8
    e450:	mov	r4, r0
    e454:	ldr	r1, [r0, #20]
    e458:	ldr	r0, [pc, #108]	; e4cc <rb_run_one_event+0x84>
    e45c:	add	r0, pc, r0
    e460:	mov	r2, #33	; 0x21
    e464:	bl	4fe0 <rb_strlcpy@plt>
    e468:	ldr	r1, [r4, #12]
    e46c:	ldr	r0, [r4, #16]
    e470:	blx	r1
    e474:	ldr	r0, [r4, #24]
    e478:	cmp	r0, #0
    e47c:	beq	e4c0 <rb_run_one_event+0x78>
    e480:	bl	5118 <rb_current_time@plt>
    e484:	mov	r5, r0
    e488:	ldr	r0, [r4, #24]
    e48c:	bl	e3d8 <rb_event_frequency>
    e490:	add	r0, r0, r5
    e494:	str	r0, [r4, #28]
    e498:	ldr	r1, [pc, #48]	; e4d0 <rb_run_one_event+0x88>
    e49c:	ldr	r1, [pc, r1]
    e4a0:	cmp	r0, r1
    e4a4:	blt	e4b0 <rb_run_one_event+0x68>
    e4a8:	cmn	r1, #1
    e4ac:	popne	{r4, r5, fp, pc}
    e4b0:	ldr	r1, [pc, #28]	; e4d4 <rb_run_one_event+0x8c>
    e4b4:	add	r1, pc, r1
    e4b8:	str	r0, [r1]
    e4bc:	pop	{r4, r5, fp, pc}
    e4c0:	mov	r0, r4
    e4c4:	pop	{r4, r5, fp, lr}
    e4c8:	b	e308 <rb_event_delete>
    e4cc:	.word	0x0002c938
    e4d0:	.word	0x00019fd0
    e4d4:	.word	0x00019fb8

0000e4d8 <rb_event_run>:
    e4d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e4dc:	add	fp, sp, #24
    e4e0:	bl	c140 <rb_io_supports_event>
    e4e4:	cmp	r0, #0
    e4e8:	bne	e5d4 <rb_event_run+0xfc>
    e4ec:	ldr	r7, [pc, #228]	; e5d8 <rb_event_run+0x100>
    e4f0:	add	r7, pc, r7
    e4f4:	mvn	r0, #0
    e4f8:	str	r0, [r7]
    e4fc:	ldr	r4, [pc, #216]	; e5dc <rb_event_run+0x104>
    e500:	ldr	r4, [pc, r4]
    e504:	cmp	r4, #0
    e508:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
    e50c:	ldr	r8, [pc, #204]	; e5e0 <rb_event_run+0x108>
    e510:	add	r8, pc, r8
    e514:	ldr	r5, [r4]
    e518:	ldr	r4, [r4, #8]
    e51c:	ldr	r0, [r5, #44]	; 0x2c
    e520:	cmp	r0, #0
    e524:	beq	e54c <rb_event_run+0x74>
    e528:	mov	r0, r5
    e52c:	bl	e5e8 <rb_dlinkDelete>
    e530:	ldr	r0, [r5, #20]
    e534:	bl	e638 <rb_free>
    e538:	mov	r0, r5
    e53c:	bl	e638 <rb_free>
    e540:	cmp	r4, #0
    e544:	bne	e514 <rb_event_run+0x3c>
    e548:	b	e5d4 <rb_event_run+0xfc>
    e54c:	ldr	r6, [r5, #28]
    e550:	bl	5118 <rb_current_time@plt>
    e554:	cmp	r6, r0
    e558:	ble	e564 <rb_event_run+0x8c>
    e55c:	ldr	r0, [r5, #28]
    e560:	b	e5a4 <rb_event_run+0xcc>
    e564:	ldr	r1, [r5, #20]
    e568:	mov	r0, r8
    e56c:	mov	r2, #33	; 0x21
    e570:	bl	4fe0 <rb_strlcpy@plt>
    e574:	ldr	r1, [r5, #12]
    e578:	ldr	r0, [r5, #16]
    e57c:	blx	r1
    e580:	ldr	r0, [r5, #24]
    e584:	cmp	r0, #0
    e588:	beq	e528 <rb_event_run+0x50>
    e58c:	bl	5118 <rb_current_time@plt>
    e590:	mov	r6, r0
    e594:	ldr	r0, [r5, #24]
    e598:	bl	e3d8 <rb_event_frequency>
    e59c:	add	r0, r0, r6
    e5a0:	str	r0, [r5, #28]
    e5a4:	ldr	r1, [pc, #56]	; e5e4 <rb_event_run+0x10c>
    e5a8:	ldr	r1, [pc, r1]
    e5ac:	cmp	r0, r1
    e5b0:	blt	e5c8 <rb_event_run+0xf0>
    e5b4:	cmn	r1, #1
    e5b8:	streq	r0, [r7]
    e5bc:	cmp	r4, #0
    e5c0:	bne	e514 <rb_event_run+0x3c>
    e5c4:	b	e5d4 <rb_event_run+0xfc>
    e5c8:	str	r0, [r7]
    e5cc:	cmp	r4, #0
    e5d0:	bne	e514 <rb_event_run+0x3c>
    e5d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e5d8:	.word	0x00019f7c
    e5dc:	.word	0x0002c8b8
    e5e0:	.word	0x0002c884
    e5e4:	.word	0x00019ec4

0000e5e8 <rb_dlinkDelete>:
    e5e8:	ldr	ip, [pc, #68]	; e634 <rb_dlinkDelete+0x4c>
    e5ec:	add	ip, pc, ip
    e5f0:	ldmib	r0, {r2, r3}
    e5f4:	add	r1, r3, #4
    e5f8:	cmp	r3, #0
    e5fc:	addeq	r1, ip, #4
    e600:	str	r2, [r1]
    e604:	ldmib	r0, {r1, r2}
    e608:	cmp	r1, #0
    e60c:	mov	r3, ip
    e610:	addne	r3, r1, #8
    e614:	str	r2, [r3]
    e618:	mov	r1, #0
    e61c:	str	r1, [r0, #4]
    e620:	str	r1, [r0, #8]
    e624:	ldr	r0, [ip, #8]
    e628:	sub	r0, r0, #1
    e62c:	str	r0, [ip, #8]
    e630:	bx	lr
    e634:	.word	0x0002c7cc

0000e638 <rb_free>:
    e638:	cmp	r0, #0
    e63c:	bxeq	lr
    e640:	b	501c <free@plt>

0000e644 <rb_event_io_register_all>:
    e644:	push	{r4, sl, fp, lr}
    e648:	add	fp, sp, #8
    e64c:	bl	c140 <rb_io_supports_event>
    e650:	cmp	r0, #0
    e654:	popeq	{r4, sl, fp, pc}
    e658:	ldr	r4, [pc, #36]	; e684 <rb_event_io_register_all+0x40>
    e65c:	ldr	r4, [pc, r4]
    e660:	cmp	r4, #0
    e664:	beq	e680 <rb_event_io_register_all+0x3c>
    e668:	ldr	r0, [r4]
    e66c:	ldr	r1, [r0, #32]
    e670:	bl	c074 <rb_io_sched_event>
    e674:	ldr	r4, [r4, #8]
    e678:	cmp	r4, #0
    e67c:	bne	e668 <rb_event_io_register_all+0x24>
    e680:	pop	{r4, sl, fp, pc}
    e684:	.word	0x0002c75c

0000e688 <rb_event_init>:
    e688:	ldr	r0, [pc, #16]	; e6a0 <rb_event_init+0x18>
    e68c:	add	r0, pc, r0
    e690:	ldr	r1, [pc, #12]	; e6a4 <rb_event_init+0x1c>
    e694:	add	r1, pc, r1
    e698:	mov	r2, #33	; 0x21
    e69c:	b	4fe0 <rb_strlcpy@plt>
    e6a0:	.word	0x0002c708
    e6a4:	.word	0x00007b37

0000e6a8 <rb_dump_events>:
    e6a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6ac:	add	fp, sp, #28
    e6b0:	sub	sp, sp, #524	; 0x20c
    e6b4:	mov	r9, r1
    e6b8:	mov	sl, r0
    e6bc:	add	r6, sp, #8
    e6c0:	ldr	r2, [pc, #168]	; e770 <rb_dump_events+0xc8>
    e6c4:	add	r2, pc, r2
    e6c8:	ldr	r3, [pc, #164]	; e774 <rb_dump_events+0xcc>
    e6cc:	add	r3, pc, r3
    e6d0:	mov	r0, r6
    e6d4:	mov	r1, #512	; 0x200
    e6d8:	bl	54cc <snprintf@plt>
    e6dc:	mov	r0, r6
    e6e0:	mov	r1, r9
    e6e4:	blx	sl
    e6e8:	ldr	r1, [pc, #136]	; e778 <rb_dump_events+0xd0>
    e6ec:	add	r1, pc, r1
    e6f0:	mov	r0, r6
    e6f4:	mov	r2, #512	; 0x200
    e6f8:	bl	4fe0 <rb_strlcpy@plt>
    e6fc:	mov	r0, r6
    e700:	mov	r1, r9
    e704:	blx	sl
    e708:	ldr	r4, [pc, #108]	; e77c <rb_dump_events+0xd4>
    e70c:	ldr	r4, [pc, r4]
    e710:	cmp	r4, #0
    e714:	beq	e768 <rb_dump_events+0xc0>
    e718:	add	r6, sp, #8
    e71c:	ldr	r5, [r4]
    e720:	ldr	r7, [r5, #20]
    e724:	ldr	r8, [r5, #28]
    e728:	bl	5118 <rb_current_time@plt>
    e72c:	ldr	r1, [r5, #24]
    e730:	sub	r0, r8, r0
    e734:	stm	sp, {r0, r1}
    e738:	mov	r0, r6
    e73c:	mov	r1, #512	; 0x200
    e740:	ldr	r2, [pc, #56]	; e780 <rb_dump_events+0xd8>
    e744:	add	r2, pc, r2
    e748:	mov	r3, r7
    e74c:	bl	54cc <snprintf@plt>
    e750:	mov	r0, r6
    e754:	mov	r1, r9
    e758:	blx	sl
    e75c:	ldr	r4, [r4, #8]
    e760:	cmp	r4, #0
    e764:	bne	e71c <rb_dump_events+0x74>
    e768:	sub	sp, fp, #28
    e76c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e770:	.word	0x00007b0c
    e774:	.word	0x0002c6c8
    e778:	.word	0x00007afa
    e77c:	.word	0x0002c6ac
    e780:	.word	0x00007ace

0000e784 <rb_set_back_events>:
    e784:	ldr	r1, [pc, #40]	; e7b4 <rb_set_back_events+0x30>
    e788:	ldr	r1, [pc, r1]
    e78c:	b	e7a8 <rb_set_back_events+0x24>
    e790:	ldr	r2, [r1]
    e794:	ldr	r3, [r2, #28]
    e798:	subs	r3, r3, r0
    e79c:	movle	r3, #0
    e7a0:	str	r3, [r2, #28]
    e7a4:	ldr	r1, [r1, #8]
    e7a8:	cmp	r1, #0
    e7ac:	bxeq	lr
    e7b0:	b	e790 <rb_set_back_events+0xc>
    e7b4:	.word	0x0002c630

0000e7b8 <rb_event_update>:
    e7b8:	push	{r4, r5, fp, lr}
    e7bc:	add	fp, sp, #8
    e7c0:	cmp	r0, #0
    e7c4:	beq	e7fc <rb_event_update+0x44>
    e7c8:	mov	r4, r0
    e7cc:	str	r1, [r0, #24]
    e7d0:	mov	r0, r1
    e7d4:	bl	e3d8 <rb_event_frequency>
    e7d8:	mov	r5, r0
    e7dc:	bl	5118 <rb_current_time@plt>
    e7e0:	add	r0, r0, r5
    e7e4:	ldr	r1, [r4, #28]
    e7e8:	cmp	r0, r1
    e7ec:	popge	{r4, r5, fp, pc}
    e7f0:	bl	5118 <rb_current_time@plt>
    e7f4:	add	r0, r0, r5
    e7f8:	str	r0, [r4, #28]
    e7fc:	pop	{r4, r5, fp, pc}

0000e800 <rb_event_next>:
    e800:	ldr	r0, [pc, #4]	; e80c <rb_event_next+0xc>
    e804:	ldr	r0, [pc, r0]
    e808:	bx	lr
    e80c:	.word	0x00019c68

0000e810 <rb_malloc>:
    e810:	push	{fp, lr}
    e814:	mov	fp, sp
    e818:	mov	r0, #1
    e81c:	mov	r1, #48	; 0x30
    e820:	bl	4f2c <calloc@plt>
    e824:	cmp	r0, #0
    e828:	popne	{fp, pc}
    e82c:	bl	52a4 <rb_outofmemory@plt>

0000e830 <rb_strndup>:
    e830:	push	{r4, r5, fp, lr}
    e834:	add	fp, sp, #8
    e838:	mov	r4, r0
    e83c:	mov	r0, #33	; 0x21
    e840:	bl	52c8 <malloc@plt>
    e844:	cmp	r0, #0
    e848:	beq	e864 <rb_strndup+0x34>
    e84c:	mov	r5, r0
    e850:	mov	r1, r4
    e854:	mov	r2, #33	; 0x21
    e858:	bl	4fe0 <rb_strlcpy@plt>
    e85c:	mov	r0, r5
    e860:	pop	{r4, r5, fp, pc}
    e864:	bl	52a4 <rb_outofmemory@plt>

0000e868 <rb_dlinkAdd>:
    e868:	mov	r2, #0
    e86c:	stm	r1, {r0, r2}
    e870:	ldr	r0, [pc, #72]	; e8c0 <rb_dlinkAdd+0x58>
    e874:	ldr	r0, [pc, r0]
    e878:	str	r0, [r1, #8]
    e87c:	cmp	r0, #0
    e880:	beq	e890 <rb_dlinkAdd+0x28>
    e884:	add	r0, r0, #4
    e888:	str	r1, [r0]
    e88c:	b	e8a4 <rb_dlinkAdd+0x3c>
    e890:	ldr	r0, [pc, #44]	; e8c4 <rb_dlinkAdd+0x5c>
    e894:	add	r0, pc, r0
    e898:	ldr	r2, [r0, #4]!
    e89c:	cmp	r2, #0
    e8a0:	streq	r1, [r0]
    e8a4:	ldr	r0, [pc, #28]	; e8c8 <rb_dlinkAdd+0x60>
    e8a8:	add	r0, pc, r0
    e8ac:	str	r1, [r0]
    e8b0:	ldr	r1, [r0, #8]
    e8b4:	add	r1, r1, #1
    e8b8:	str	r1, [r0, #8]
    e8bc:	bx	lr
    e8c0:	.word	0x0002c544
    e8c4:	.word	0x0002c524
    e8c8:	.word	0x0002c510

0000e8cc <rb_ctime>:
    e8cc:	push	{r4, r5, r6, r7, fp, lr}
    e8d0:	add	fp, sp, #16
    e8d4:	sub	sp, sp, #72	; 0x48
    e8d8:	mov	r7, r2
    e8dc:	mov	r6, r1
    e8e0:	str	r0, [fp, #-20]	; 0xffffffec
    e8e4:	sub	r0, fp, #20
    e8e8:	add	r1, sp, #24
    e8ec:	bl	5310 <gmtime_r@plt>
    e8f0:	cmp	r6, #0
    e8f4:	movweq	r7, #128	; 0x80
    e8f8:	ldr	r5, [pc, #136]	; e988 <rb_ctime+0xbc>
    e8fc:	add	r5, pc, r5
    e900:	movne	r5, r6
    e904:	cmp	r0, #0
    e908:	beq	e970 <rb_ctime+0xa4>
    e90c:	ldm	r0, {r1, r2, r3, r6, ip}
    e910:	ldr	r4, [r0, #20]
    e914:	ldr	r0, [r0, #24]
    e918:	str	r1, [sp, #16]
    e91c:	str	r2, [sp, #12]
    e920:	str	r3, [sp, #8]
    e924:	str	r6, [sp, #4]
    e928:	movw	r1, #1900	; 0x76c
    e92c:	add	r1, r4, r1
    e930:	str	r1, [sp, #20]
    e934:	ldr	r1, [pc, #84]	; e990 <rb_ctime+0xc4>
    e938:	add	r1, pc, r1
    e93c:	ldr	r1, [r1, ip, lsl #2]
    e940:	str	r1, [sp]
    e944:	ldr	r1, [pc, #72]	; e994 <rb_ctime+0xc8>
    e948:	add	r1, pc, r1
    e94c:	ldr	r3, [r1, r0, lsl #2]
    e950:	ldr	r2, [pc, #64]	; e998 <rb_ctime+0xcc>
    e954:	add	r2, pc, r2
    e958:	mov	r0, r5
    e95c:	mov	r1, r7
    e960:	bl	54cc <snprintf@plt>
    e964:	mov	r0, r5
    e968:	sub	sp, fp, #16
    e96c:	pop	{r4, r5, r6, r7, fp, pc}
    e970:	ldr	r1, [pc, #20]	; e98c <rb_ctime+0xc0>
    e974:	add	r1, pc, r1
    e978:	mov	r0, r5
    e97c:	mov	r2, r7
    e980:	bl	4fe0 <rb_strlcpy@plt>
    e984:	b	e964 <rb_ctime+0x98>
    e988:	.word	0x0002c4cc
    e98c:	.word	0x00006fc6
    e990:	.word	0x00019534
    e994:	.word	0x00019508
    e998:	.word	0x000078e1

0000e99c <rb_date>:
    e99c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e9a0:	add	fp, sp, #24
    e9a4:	sub	sp, sp, #72	; 0x48
    e9a8:	mov	r8, r2
    e9ac:	mov	r4, r1
    e9b0:	str	r0, [fp, #-28]	; 0xffffffe4
    e9b4:	sub	r0, fp, #28
    e9b8:	add	r1, sp, #24
    e9bc:	bl	5310 <gmtime_r@plt>
    e9c0:	cmp	r0, #0
    e9c4:	beq	ea28 <rb_date+0x8c>
    e9c8:	ldm	r0, {r1, r2, r3, r5, r6, r7}
    e9cc:	ldr	r0, [r0, #24]
    e9d0:	str	r1, [sp, #20]
    e9d4:	str	r2, [sp, #16]
    e9d8:	str	r3, [sp, #12]
    e9dc:	str	r5, [sp, #4]
    e9e0:	movw	r1, #1900	; 0x76c
    e9e4:	add	r1, r7, r1
    e9e8:	str	r1, [sp, #8]
    e9ec:	ldr	r1, [pc, #80]	; ea44 <rb_date+0xa8>
    e9f0:	add	r1, pc, r1
    e9f4:	ldr	r1, [r1, r6, lsl #2]
    e9f8:	str	r1, [sp]
    e9fc:	ldr	r1, [pc, #68]	; ea48 <rb_date+0xac>
    ea00:	add	r1, pc, r1
    ea04:	ldr	r3, [r1, r0, lsl #2]
    ea08:	ldr	r2, [pc, #60]	; ea4c <rb_date+0xb0>
    ea0c:	add	r2, pc, r2
    ea10:	mov	r0, r4
    ea14:	mov	r1, r8
    ea18:	bl	54cc <snprintf@plt>
    ea1c:	mov	r0, r4
    ea20:	sub	sp, fp, #24
    ea24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    ea28:	ldr	r1, [pc, #16]	; ea40 <rb_date+0xa4>
    ea2c:	add	r1, pc, r1
    ea30:	mov	r0, r4
    ea34:	mov	r2, r8
    ea38:	bl	4fe0 <rb_strlcpy@plt>
    ea3c:	b	ea1c <rb_date+0x80>
    ea40:	.word	0x00006f0e
    ea44:	.word	0x000194c8
    ea48:	.word	0x0001949c
    ea4c:	.word	0x00007844

0000ea50 <rb_current_time>:
    ea50:	ldr	r0, [pc, #4]	; ea5c <rb_current_time+0xc>
    ea54:	ldr	r0, [pc, r0]
    ea58:	bx	lr
    ea5c:	.word	0x0002c3f4

0000ea60 <rb_current_time_tv>:
    ea60:	ldr	r0, [pc, #4]	; ea6c <rb_current_time_tv+0xc>
    ea64:	add	r0, pc, r0
    ea68:	bx	lr
    ea6c:	.word	0x0002c3e4

0000ea70 <rb_lib_log>:
    ea70:	sub	sp, sp, #12
    ea74:	push	{r4, sl, fp, lr}
    ea78:	add	fp, sp, #8
    ea7c:	sub	sp, sp, #4
    ea80:	mov	ip, r0
    ea84:	add	r0, fp, #8
    ea88:	stm	r0, {r1, r2, r3}
    ea8c:	ldr	r0, [pc, #72]	; eadc <rb_lib_log+0x6c>
    ea90:	ldr	r0, [pc, r0]
    ea94:	cmp	r0, #0
    ea98:	beq	eacc <rb_lib_log+0x5c>
    ea9c:	add	r3, fp, #8
    eaa0:	str	r3, [sp]
    eaa4:	ldr	r4, [pc, #52]	; eae0 <rb_lib_log+0x70>
    eaa8:	add	r4, pc, r4
    eaac:	mov	r0, r4
    eab0:	mov	r1, #512	; 0x200
    eab4:	mov	r2, ip
    eab8:	bl	4ea8 <vsnprintf@plt>
    eabc:	ldr	r1, [pc, #32]	; eae4 <rb_lib_log+0x74>
    eac0:	ldr	r1, [pc, r1]
    eac4:	mov	r0, r4
    eac8:	blx	r1
    eacc:	sub	sp, fp, #8
    ead0:	pop	{r4, sl, fp, lr}
    ead4:	add	sp, sp, #12
    ead8:	bx	lr
    eadc:	.word	0x0002c3c0
    eae0:	.word	0x0002c3ac
    eae4:	.word	0x0002c390

0000eae8 <rb_lib_die>:
    eae8:	sub	sp, sp, #12
    eaec:	push	{r4, sl, fp, lr}
    eaf0:	add	fp, sp, #8
    eaf4:	sub	sp, sp, #4
    eaf8:	mov	ip, r0
    eafc:	add	r0, fp, #8
    eb00:	stm	r0, {r1, r2, r3}
    eb04:	ldr	r0, [pc, #76]	; eb58 <rb_lib_die+0x70>
    eb08:	ldr	r0, [pc, r0]
    eb0c:	cmp	r0, #0
    eb10:	beq	eb54 <rb_lib_die+0x6c>
    eb14:	add	r3, fp, #8
    eb18:	str	r3, [sp]
    eb1c:	ldr	r4, [pc, #56]	; eb5c <rb_lib_die+0x74>
    eb20:	add	r4, pc, r4
    eb24:	mov	r0, r4
    eb28:	mov	r1, #512	; 0x200
    eb2c:	mov	r2, ip
    eb30:	bl	4ea8 <vsnprintf@plt>
    eb34:	ldr	r1, [pc, #36]	; eb60 <rb_lib_die+0x78>
    eb38:	ldr	r1, [pc, r1]
    eb3c:	mov	r0, r4
    eb40:	blx	r1
    eb44:	sub	sp, fp, #8
    eb48:	pop	{r4, sl, fp, lr}
    eb4c:	add	sp, sp, #12
    eb50:	bx	lr
    eb54:	bl	4d10 <abort@plt>
    eb58:	.word	0x0002c54c
    eb5c:	.word	0x0002c334
    eb60:	.word	0x0002c51c

0000eb64 <rb_lib_restart>:
    eb64:	sub	sp, sp, #12
    eb68:	push	{fp, lr}
    eb6c:	mov	fp, sp
    eb70:	sub	sp, sp, #4
    eb74:	mov	ip, r0
    eb78:	add	r0, fp, #8
    eb7c:	stm	r0, {r1, r2, r3}
    eb80:	ldr	r0, [pc, #64]	; ebc8 <rb_lib_restart+0x64>
    eb84:	ldr	r0, [pc, r0]
    eb88:	cmp	r0, #0
    eb8c:	bne	eb94 <rb_lib_restart+0x30>
    eb90:	bl	4d10 <abort@plt>
    eb94:	add	r3, fp, #8
    eb98:	str	r3, [sp]
    eb9c:	ldr	r4, [pc, #40]	; ebcc <rb_lib_restart+0x68>
    eba0:	add	r4, pc, r4
    eba4:	mov	r0, r4
    eba8:	mov	r1, #512	; 0x200
    ebac:	mov	r2, ip
    ebb0:	bl	4ea8 <vsnprintf@plt>
    ebb4:	ldr	r1, [pc, #20]	; ebd0 <rb_lib_restart+0x6c>
    ebb8:	ldr	r1, [pc, r1]
    ebbc:	mov	r0, r4
    ebc0:	blx	r1
    ebc4:	bl	4d10 <abort@plt>
    ebc8:	.word	0x0002c4d4
    ebcc:	.word	0x0002c2b4
    ebd0:	.word	0x0002c4a0

0000ebd4 <rb_set_time>:
    ebd4:	push	{fp, lr}
    ebd8:	mov	fp, sp
    ebdc:	sub	sp, sp, #8
    ebe0:	mov	r0, sp
    ebe4:	mov	r1, #0
    ebe8:	bl	4f08 <rb_gettimeofday@plt>
    ebec:	cmn	r0, #1
    ebf0:	beq	ec28 <rb_set_time+0x54>
    ebf4:	ldr	r0, [pc, #84]	; ec50 <rb_set_time+0x7c>
    ebf8:	ldr	r0, [pc, r0]
    ebfc:	ldr	r1, [sp]
    ec00:	cmp	r0, r1
    ec04:	ble	ec10 <rb_set_time+0x3c>
    ec08:	sub	r0, r0, r1
    ec0c:	bl	e784 <rb_set_back_events>
    ec10:	ldm	sp, {r0, r1}
    ec14:	ldr	r2, [pc, #56]	; ec54 <rb_set_time+0x80>
    ec18:	add	r2, pc, r2
    ec1c:	strd	r0, [r2]
    ec20:	mov	sp, fp
    ec24:	pop	{fp, pc}
    ec28:	bl	5610 <__errno_location@plt>
    ec2c:	ldr	r0, [r0]
    ec30:	bl	4cec <strerror@plt>
    ec34:	mov	r1, r0
    ec38:	ldr	r0, [pc, #24]	; ec58 <rb_set_time+0x84>
    ec3c:	add	r0, pc, r0
    ec40:	bl	5244 <rb_lib_log@plt>
    ec44:	ldr	r0, [pc, #16]	; ec5c <rb_set_time+0x88>
    ec48:	add	r0, pc, r0
    ec4c:	bl	537c <rb_lib_restart@plt>
    ec50:	.word	0x0002c250
    ec54:	.word	0x0002c230
    ec58:	.word	0x00007639
    ec5c:	.word	0x00007640

0000ec60 <rb_lib_version>:
    ec60:	push	{r4, sl, fp, lr}
    ec64:	add	fp, sp, #8
    ec68:	sub	sp, sp, #520	; 0x208
    ec6c:	add	r4, sp, #8
    ec70:	mov	r0, r4
    ec74:	mov	r1, #512	; 0x200
    ec78:	bl	d8f8 <rb_get_ssl_info>
    ec7c:	ldr	r0, [pc, #48]	; ecb4 <rb_lib_version+0x54>
    ec80:	ldr	r0, [pc, r0]
    ec84:	ldr	r3, [r0]
    ec88:	str	r4, [sp]
    ec8c:	ldr	r4, [pc, #36]	; ecb8 <rb_lib_version+0x58>
    ec90:	add	r4, pc, r4
    ec94:	ldr	r2, [pc, #32]	; ecbc <rb_lib_version+0x5c>
    ec98:	add	r2, pc, r2
    ec9c:	mov	r0, r4
    eca0:	mov	r1, #640	; 0x280
    eca4:	bl	54cc <snprintf@plt>
    eca8:	mov	r0, r4
    ecac:	sub	sp, fp, #8
    ecb0:	pop	{r4, sl, fp, pc}
    ecb4:	.word	0x00019714
    ecb8:	.word	0x0002c3cc
    ecbc:	.word	0x000075fe

0000ecc0 <rb_lib_init>:
    ecc0:	push	{r4, r5, r6, r7, fp, lr}
    ecc4:	add	fp, sp, #16
    ecc8:	mov	r4, r3
    eccc:	mov	r5, r2
    ecd0:	mov	r6, r1
    ecd4:	mov	r7, r0
    ecd8:	bl	52b0 <rb_set_time@plt>
    ecdc:	ldr	r0, [pc, #84]	; ed38 <rb_lib_init+0x78>
    ece0:	add	r0, pc, r0
    ece4:	str	r6, [r0]
    ece8:	ldr	r0, [pc, #76]	; ed3c <rb_lib_init+0x7c>
    ecec:	add	r0, pc, r0
    ecf0:	str	r7, [r0]
    ecf4:	ldr	r0, [pc, #68]	; ed40 <rb_lib_init+0x80>
    ecf8:	add	r0, pc, r0
    ecfc:	str	r5, [r0]
    ed00:	bl	4f44 <rb_event_init@plt>
    ed04:	bl	52f8 <rb_init_bh@plt>
    ed08:	ldr	r1, [fp, #8]
    ed0c:	ldr	r2, [fp, #16]
    ed10:	mov	r0, r4
    ed14:	bl	5418 <rb_fdlist_init@plt>
    ed18:	bl	4cd4 <rb_init_netio@plt>
    ed1c:	ldr	r0, [fp, #12]
    ed20:	bl	5208 <rb_init_rb_dlink_nodes@plt>
    ed24:	bl	c140 <rb_io_supports_event>
    ed28:	cmp	r0, #0
    ed2c:	popeq	{r4, r5, r6, r7, fp, pc}
    ed30:	pop	{r4, r5, r6, r7, fp, lr}
    ed34:	b	c15c <rb_io_init_event>
    ed38:	.word	0x0002c378
    ed3c:	.word	0x0002c164
    ed40:	.word	0x0002c35c

0000ed44 <rb_lib_loop>:
    ed44:	push	{fp, lr}
    ed48:	mov	fp, sp
    ed4c:	mov	r4, r0
    ed50:	bl	52b0 <rb_set_time@plt>
    ed54:	bl	c140 <rb_io_supports_event>
    ed58:	cmp	r0, #0
    ed5c:	beq	ed6c <rb_lib_loop+0x28>
    ed60:	mvn	r0, #0
    ed64:	bl	4e90 <rb_select@plt>
    ed68:	b	ed60 <rb_lib_loop+0x1c>
    ed6c:	mov	r6, #1000	; 0x3e8
    ed70:	cmp	r4, #0
    ed74:	bne	ed8c <rb_lib_loop+0x48>
    ed78:	b	ed94 <rb_lib_loop+0x50>
    ed7c:	bl	4e90 <rb_select@plt>
    ed80:	bl	52e0 <rb_event_run@plt>
    ed84:	cmp	r4, #0
    ed88:	beq	ed94 <rb_lib_loop+0x50>
    ed8c:	mov	r0, r4
    ed90:	b	ed7c <rb_lib_loop+0x38>
    ed94:	bl	5550 <rb_event_next@plt>
    ed98:	cmp	r0, #1
    ed9c:	blt	edbc <rb_lib_loop+0x78>
    eda0:	mov	r5, r0
    eda4:	bl	5118 <rb_current_time@plt>
    eda8:	sub	r1, r5, r0
    edac:	mul	r0, r1, r6
    edb0:	cmp	r1, #1
    edb4:	movwlt	r0, #1000	; 0x3e8
    edb8:	b	ed7c <rb_lib_loop+0x38>
    edbc:	mvn	r0, #0
    edc0:	b	ed7c <rb_lib_loop+0x38>

0000edc4 <rb_strtok_r>:
    edc4:	b	5370 <strtok_r@plt>

0000edc8 <rb_base64_encode>:
    edc8:	push	{r4, r5, r6, sl, fp, lr}
    edcc:	add	fp, sp, #16
    edd0:	mov	r4, r0
    edd4:	mov	r0, #0
    edd8:	cmn	r1, #2
    eddc:	poplt	{r4, r5, r6, sl, fp, pc}
    ede0:	mov	r6, r1
    ede4:	add	r0, r1, #2
    ede8:	movw	r1, #21846	; 0x5556
    edec:	movt	r1, #21845	; 0x5555
    edf0:	smmul	r0, r0, r1
    edf4:	add	r0, r0, r0, lsr #31
    edf8:	add	r0, r0, r0, lsl #2
    edfc:	bl	ef00 <rb_malloc>
    ee00:	cmp	r6, #3
    ee04:	blt	ee80 <rb_base64_encode+0xb8>
    ee08:	ldr	ip, [pc, #232]	; eef8 <rb_base64_encode+0x130>
    ee0c:	add	ip, pc, ip
    ee10:	mov	r1, r0
    ee14:	ldrb	r3, [r4]
    ee18:	ldrb	r2, [ip, r3, lsr #2]
    ee1c:	strb	r2, [r1]
    ee20:	and	r2, r3, #3
    ee24:	ldrb	r3, [r4, #1]
    ee28:	lsr	r5, r3, #4
    ee2c:	orr	r2, r5, r2, lsl #4
    ee30:	ldrb	r2, [ip, r2]
    ee34:	strb	r2, [r1, #1]
    ee38:	ldrb	r2, [r4, #2]
    ee3c:	and	r5, r2, #63	; 0x3f
    ee40:	ldrb	r5, [ip, r5]
    ee44:	strb	r5, [r1, #3]
    ee48:	and	r3, r3, #15
    ee4c:	lsr	r2, r2, #6
    ee50:	orr	r2, r2, r3, lsl #2
    ee54:	ldrb	r2, [ip, r2]
    ee58:	strb	r2, [r1, #2]
    ee5c:	add	r1, r1, #4
    ee60:	add	r4, r4, #3
    ee64:	sub	r3, r6, #3
    ee68:	cmp	r6, #5
    ee6c:	mov	r6, r3
    ee70:	bgt	ee14 <rb_base64_encode+0x4c>
    ee74:	cmp	r3, #0
    ee78:	bne	ee90 <rb_base64_encode+0xc8>
    ee7c:	b	eeec <rb_base64_encode+0x124>
    ee80:	mov	r3, r6
    ee84:	mov	r1, r0
    ee88:	cmp	r3, #0
    ee8c:	beq	eeec <rb_base64_encode+0x124>
    ee90:	ldrb	r6, [r4]
    ee94:	ldr	r2, [pc, #96]	; eefc <rb_base64_encode+0x134>
    ee98:	add	r2, pc, r2
    ee9c:	ldrb	r5, [r2, r6, lsr #2]
    eea0:	strb	r5, [r1]
    eea4:	mov	r5, #48	; 0x30
    eea8:	and	r5, r5, r6, lsl #4
    eeac:	cmp	r3, #2
    eeb0:	blt	eed0 <rb_base64_encode+0x108>
    eeb4:	ldrb	r3, [r4, #1]
    eeb8:	and	r6, r3, #15
    eebc:	ldrb	r6, [r2, r6, lsl #2]
    eec0:	strb	r6, [r1, #2]
    eec4:	orr	r3, r5, r3, lsr #4
    eec8:	ldrb	r2, [r2, r3]
    eecc:	b	eedc <rb_base64_encode+0x114>
    eed0:	mov	r3, #61	; 0x3d
    eed4:	strb	r3, [r1, #2]
    eed8:	ldrb	r2, [r2, r5]
    eedc:	strb	r2, [r1, #1]
    eee0:	mov	r2, #61	; 0x3d
    eee4:	strb	r2, [r1, #3]
    eee8:	add	r1, r1, #4
    eeec:	mov	r2, #0
    eef0:	strb	r2, [r1]
    eef4:	pop	{r4, r5, r6, sl, fp, pc}
    eef8:	.word	0x000074a1
    eefc:	.word	0x00007415

0000ef00 <rb_malloc>:
    ef00:	push	{fp, lr}
    ef04:	mov	fp, sp
    ef08:	mov	r1, r0
    ef0c:	mov	r0, #1
    ef10:	bl	4f2c <calloc@plt>
    ef14:	cmp	r0, #0
    ef18:	popne	{fp, pc}
    ef1c:	bl	52a4 <rb_outofmemory@plt>

0000ef20 <rb_base64_decode>:
    ef20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    ef24:	add	fp, sp, #24
    ef28:	mov	r8, r2
    ef2c:	mov	r5, r1
    ef30:	mov	r6, r0
    ef34:	add	r0, r1, #1
    ef38:	bl	ef00 <rb_malloc>
    ef3c:	mov	r2, #0
    ef40:	ldr	r3, [pc, #260]	; f04c <rb_base64_decode+0x12c>
    ef44:	add	r3, pc, r3
    ef48:	mov	r1, #0
    ef4c:	b	ef5c <rb_base64_decode+0x3c>
    ef50:	strb	r7, [r0, r1]
    ef54:	add	r2, r2, #1
    ef58:	mov	r1, ip
    ef5c:	ldrb	r4, [r6], #1
    ef60:	cmp	r4, #0
    ef64:	beq	f03c <rb_base64_decode+0x11c>
    ef68:	subs	r5, r5, #1
    ef6c:	blt	effc <rb_base64_decode+0xdc>
    ef70:	cmp	r4, #61	; 0x3d
    ef74:	beq	effc <rb_base64_decode+0xdc>
    ef78:	add	r7, r3, r4, lsl #1
    ef7c:	ldrsh	r4, [r7]
    ef80:	cmp	r4, #0
    ef84:	blt	ef5c <rb_base64_decode+0x3c>
    ef88:	and	r7, r2, #3
    ef8c:	cmp	r7, #1
    ef90:	beq	efbc <rb_base64_decode+0x9c>
    ef94:	cmp	r7, #2
    ef98:	beq	efd4 <rb_base64_decode+0xb4>
    ef9c:	cmp	r7, #3
    efa0:	bne	efec <rb_base64_decode+0xcc>
    efa4:	ldrb	r7, [r0, r1]
    efa8:	orr	r7, r7, r4
    efac:	strb	r7, [r0, r1]
    efb0:	add	r1, r1, #1
    efb4:	add	r2, r2, #1
    efb8:	b	ef5c <rb_base64_decode+0x3c>
    efbc:	add	ip, r1, #1
    efc0:	lsl	r7, r4, #4
    efc4:	strb	r7, [r0, ip]
    efc8:	ldrb	r7, [r0, r1]
    efcc:	orr	r7, r7, r4, lsr #4
    efd0:	b	ef50 <rb_base64_decode+0x30>
    efd4:	add	ip, r1, #1
    efd8:	lsl	r7, r4, #6
    efdc:	strb	r7, [r0, ip]
    efe0:	ldrb	r7, [r0, r1]
    efe4:	orr	r7, r7, r4, lsr #2
    efe8:	b	ef50 <rb_base64_decode+0x30>
    efec:	lsl	r7, r4, #2
    eff0:	strb	r7, [r0, r1]
    eff4:	add	r2, r2, #1
    eff8:	b	ef5c <rb_base64_decode+0x3c>
    effc:	cmp	r4, #61	; 0x3d
    f000:	bne	f03c <rb_base64_decode+0x11c>
    f004:	and	r2, r2, #3
    f008:	cmp	r2, #3
    f00c:	mov	r3, r1
    f010:	beq	f034 <rb_base64_decode+0x114>
    f014:	cmp	r2, #2
    f018:	beq	f030 <rb_base64_decode+0x110>
    f01c:	cmp	r2, #1
    f020:	bne	f03c <rb_base64_decode+0x11c>
    f024:	bl	501c <free@plt>
    f028:	mov	r0, #0
    f02c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f030:	add	r3, r1, #1
    f034:	mov	r2, #0
    f038:	strb	r2, [r0, r3]
    f03c:	mov	r2, #0
    f040:	strb	r2, [r0, r1]
    f044:	str	r1, [r8]
    f048:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f04c:	.word	0x00007482

0000f050 <rb_outofmemory>:
    f050:	push	{fp, lr}
    f054:	mov	fp, sp
    f058:	ldr	r0, [pc, #48]	; f090 <rb_outofmemory+0x40>
    f05c:	add	r0, pc, r0
    f060:	ldrb	r1, [r0]
    f064:	cmp	r1, #1
    f068:	bne	f070 <rb_outofmemory+0x20>
    f06c:	bl	4d10 <abort@plt>
    f070:	mov	r1, #1
    f074:	strb	r1, [r0]
    f078:	ldr	r0, [pc, #20]	; f094 <rb_outofmemory+0x44>
    f07c:	add	r0, pc, r0
    f080:	bl	5244 <rb_lib_log@plt>
    f084:	ldr	r0, [pc, #12]	; f098 <rb_outofmemory+0x48>
    f088:	add	r0, pc, r0
    f08c:	bl	537c <rb_lib_restart@plt>
    f090:	.word	0x0002c280
    f094:	.word	0x0000754a
    f098:	.word	0x00007562

0000f09c <rb_linebuf_init>:
    f09c:	push	{fp, lr}
    f0a0:	mov	fp, sp
    f0a4:	mov	r1, r0
    f0a8:	ldr	r2, [pc, #24]	; f0c8 <rb_linebuf_init+0x2c>
    f0ac:	add	r2, pc, r2
    f0b0:	movw	r0, #1036	; 0x40c
    f0b4:	bl	53d0 <rb_bh_create@plt>
    f0b8:	ldr	r1, [pc, #12]	; f0cc <rb_linebuf_init+0x30>
    f0bc:	add	r1, pc, r1
    f0c0:	str	r0, [r1]
    f0c4:	pop	{fp, pc}
    f0c8:	.word	0x0000754c
    f0cc:	.word	0x0002c224

0000f0d0 <rb_linebuf_newbuf>:
    f0d0:	vmov.i32	q8, #0	; 0x00000000
    f0d4:	mov	r1, #12
    f0d8:	vst1.32	{d16-d17}, [r0], r1
    f0dc:	vst1.32	{d16-d17}, [r0]
    f0e0:	bx	lr

0000f0e4 <rb_linebuf_donebuf>:
    f0e4:	push	{r4, sl, fp, lr}
    f0e8:	add	fp, sp, #8
    f0ec:	ldr	r2, [r0]
    f0f0:	cmp	r2, #0
    f0f4:	popeq	{r4, sl, fp, pc}
    f0f8:	mov	r4, r0
    f0fc:	ldr	r1, [r2]
    f100:	mov	r0, r4
    f104:	bl	f118 <rb_linebuf_done_line>
    f108:	ldr	r2, [r4]
    f10c:	cmp	r2, #0
    f110:	bne	f0fc <rb_linebuf_donebuf+0x18>
    f114:	pop	{r4, sl, fp, pc}

0000f118 <rb_linebuf_done_line>:
    f118:	push	{r4, r5, r6, sl, fp, lr}
    f11c:	add	fp, sp, #16
    f120:	mov	r5, r2
    f124:	mov	r4, r1
    f128:	mov	r6, r0
    f12c:	mov	r0, r2
    f130:	mov	r1, r6
    f134:	bl	f9ec <rb_dlinkDelete>
    f138:	mov	r0, r5
    f13c:	bl	516c <rb_free_rb_dlink_node@plt>
    f140:	ldr	r0, [r6, #12]
    f144:	ldr	r1, [r6, #16]
    f148:	ldr	r2, [r6, #24]
    f14c:	sub	r1, r1, #1
    f150:	str	r1, [r6, #16]
    f154:	ldr	r1, [r4, #1028]	; 0x404
    f158:	sub	r2, r2, #1
    f15c:	str	r2, [r6, #24]
    f160:	sub	r0, r0, r1
    f164:	str	r0, [r6, #12]
    f168:	ldr	r0, [r4, #1032]	; 0x408
    f16c:	subs	r0, r0, #1
    f170:	str	r0, [r4, #1032]	; 0x408
    f174:	popne	{r4, r5, r6, sl, fp, pc}
    f178:	ldr	r0, [pc, #28]	; f19c <rb_linebuf_done_line+0x84>
    f17c:	ldr	r0, [pc, r0]
    f180:	sub	r0, r0, #1
    f184:	ldr	r1, [pc, #20]	; f1a0 <rb_linebuf_done_line+0x88>
    f188:	add	r1, pc, r1
    f18c:	str	r0, [r1]
    f190:	mov	r0, r4
    f194:	pop	{r4, r5, r6, sl, fp, lr}
    f198:	b	fa34 <rb_linebuf_free>
    f19c:	.word	0x0002e16c
    f1a0:	.word	0x0002e160

0000f1a4 <rb_linebuf_parse>:
    f1a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    f1a8:	add	fp, sp, #24
    f1ac:	mov	r8, r3
    f1b0:	mov	r5, r2
    f1b4:	mov	r6, r1
    f1b8:	mov	r7, r0
    f1bc:	ldr	r0, [r0, #4]
    f1c0:	cmp	r0, #0
    f1c4:	beq	f1f0 <rb_linebuf_parse+0x4c>
    f1c8:	ldr	r1, [r0]
    f1cc:	mov	r0, r7
    f1d0:	mov	r2, r6
    f1d4:	mov	r3, r5
    f1d8:	cmp	r8, #0
    f1dc:	beq	f200 <rb_linebuf_parse+0x5c>
    f1e0:	bl	f410 <rb_linebuf_copy_raw>
    f1e4:	cmn	r0, #1
    f1e8:	bne	f20c <rb_linebuf_parse+0x68>
    f1ec:	b	f284 <rb_linebuf_parse+0xe0>
    f1f0:	mov	r4, #0
    f1f4:	cmp	r5, #1
    f1f8:	bge	f22c <rb_linebuf_parse+0x88>
    f1fc:	b	f27c <rb_linebuf_parse+0xd8>
    f200:	bl	f290 <rb_linebuf_copy_line>
    f204:	cmn	r0, #1
    f208:	beq	f284 <rb_linebuf_parse+0xe0>
    f20c:	mov	r4, #1
    f210:	cmp	r0, r5
    f214:	beq	f27c <rb_linebuf_parse+0xd8>
    f218:	add	r6, r6, r0
    f21c:	sub	r5, r5, r0
    f220:	mov	r4, #1
    f224:	cmp	r5, #1
    f228:	blt	f27c <rb_linebuf_parse+0xd8>
    f22c:	mov	r0, r7
    f230:	bl	f520 <rb_linebuf_new_line>
    f234:	mov	r1, r0
    f238:	mov	r0, r7
    f23c:	mov	r2, r6
    f240:	mov	r3, r5
    f244:	cmp	r8, #0
    f248:	beq	f25c <rb_linebuf_parse+0xb8>
    f24c:	bl	f410 <rb_linebuf_copy_raw>
    f250:	cmn	r0, #1
    f254:	bne	f268 <rb_linebuf_parse+0xc4>
    f258:	b	f284 <rb_linebuf_parse+0xe0>
    f25c:	bl	f290 <rb_linebuf_copy_line>
    f260:	cmn	r0, #1
    f264:	beq	f284 <rb_linebuf_parse+0xe0>
    f268:	add	r6, r6, r0
    f26c:	sub	r5, r5, r0
    f270:	add	r4, r4, #1
    f274:	cmp	r5, #0
    f278:	bgt	f22c <rb_linebuf_parse+0x88>
    f27c:	mov	r0, r4
    f280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f284:	mvn	r4, #0
    f288:	mov	r0, r4
    f28c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000f290 <rb_linebuf_copy_line>:
    f290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f294:	add	fp, sp, #28
    f298:	sub	sp, sp, #4
    f29c:	mov	r8, r0
    f2a0:	mov	r4, #0
    f2a4:	strb	r4, [r1, #1026]	; 0x402
    f2a8:	ldrb	r0, [r1, #1025]	; 0x401
    f2ac:	cmp	r0, #1
    f2b0:	beq	f404 <rb_linebuf_copy_line+0x174>
    f2b4:	mov	r7, r2
    f2b8:	mov	r5, r1
    f2bc:	ldr	sl, [r1, #1028]	; 0x404
    f2c0:	mov	r0, r2
    f2c4:	mov	r1, r3
    f2c8:	bl	fa48 <rb_linebuf_skip_crlf>
    f2cc:	cmn	r0, #1
    f2d0:	beq	f358 <rb_linebuf_copy_line+0xc8>
    f2d4:	mov	r4, r0
    f2d8:	add	r9, r5, sl
    f2dc:	movw	r0, #1022	; 0x3fe
    f2e0:	sub	r6, r0, sl
    f2e4:	cmp	r4, r6
    f2e8:	ble	f360 <rb_linebuf_copy_line+0xd0>
    f2ec:	mov	r0, r9
    f2f0:	mov	r1, r7
    f2f4:	mov	r2, r6
    f2f8:	bl	5130 <memcpy@plt>
    f2fc:	mov	r0, #0
    f300:	strb	r0, [r5, #1022]	; 0x3fe
    f304:	cmp	r6, #0
    f308:	beq	f338 <rb_linebuf_copy_line+0xa8>
    f30c:	movw	r1, #1022	; 0x3fe
    f310:	sub	r1, sl, r1
    f314:	movw	r2, #1021	; 0x3fd
    f318:	add	r2, r5, r2
    f31c:	ldrb	r3, [r2]
    f320:	cmp	r3, #13
    f324:	cmpne	r3, #10
    f328:	bne	f338 <rb_linebuf_copy_line+0xa8>
    f32c:	strb	r0, [r2], #-1
    f330:	adds	r1, r1, #1
    f334:	bne	f31c <rb_linebuf_copy_line+0x8c>
    f338:	movw	r0, #1022	; 0x3fe
    f33c:	str	r0, [r5, #1028]	; 0x404
    f340:	mov	r1, #1
    f344:	strb	r1, [r5, #1025]	; 0x401
    f348:	ldr	r1, [r8, #12]
    f34c:	add	r0, r1, r0
    f350:	str	r0, [r8, #12]
    f354:	b	f404 <rb_linebuf_copy_line+0x174>
    f358:	mvn	r4, #0
    f35c:	b	f404 <rb_linebuf_copy_line+0x174>
    f360:	mov	r0, r9
    f364:	mov	r1, r7
    f368:	mov	r2, r4
    f36c:	bl	5130 <memcpy@plt>
    f370:	mov	r0, #0
    f374:	mov	r1, r9
    f378:	strb	r0, [r1, r4]!
    f37c:	ldrb	r1, [r1, #-1]
    f380:	cmp	r1, #10
    f384:	cmpne	r1, #13
    f388:	bne	f3c0 <rb_linebuf_copy_line+0x130>
    f38c:	cmp	r4, #0
    f390:	beq	f3e4 <rb_linebuf_copy_line+0x154>
    f394:	sub	r2, r9, #1
    f398:	mov	r1, r4
    f39c:	ldrb	r0, [r2, r1]
    f3a0:	cmp	r0, #13
    f3a4:	cmpne	r0, #10
    f3a8:	bne	f3e0 <rb_linebuf_copy_line+0x150>
    f3ac:	mov	r0, #0
    f3b0:	strb	r0, [r2, r1]
    f3b4:	subs	r1, r1, #1
    f3b8:	bne	f39c <rb_linebuf_copy_line+0x10c>
    f3bc:	b	f3e4 <rb_linebuf_copy_line+0x154>
    f3c0:	ldr	r0, [r8, #12]
    f3c4:	add	r0, r0, r4
    f3c8:	str	r0, [r8, #12]
    f3cc:	mov	r0, #0
    f3d0:	strb	r0, [r5, #1025]	; 0x401
    f3d4:	ldr	r0, [r5, #1028]	; 0x404
    f3d8:	add	r0, r0, r4
    f3dc:	b	f400 <rb_linebuf_copy_line+0x170>
    f3e0:	mov	r0, r1
    f3e4:	mov	r1, #1
    f3e8:	strb	r1, [r5, #1025]	; 0x401
    f3ec:	ldr	r1, [r8, #12]
    f3f0:	add	r1, r1, r0
    f3f4:	str	r1, [r8, #12]
    f3f8:	ldr	r1, [r5, #1028]	; 0x404
    f3fc:	add	r0, r1, r0
    f400:	str	r0, [r5, #1028]	; 0x404
    f404:	mov	r0, r4
    f408:	sub	sp, fp, #28
    f40c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f410 <rb_linebuf_copy_raw>:
    f410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f414:	add	fp, sp, #28
    f418:	sub	sp, sp, #4
    f41c:	mov	r8, r0
    f420:	mov	r0, #1
    f424:	strb	r0, [r1, #1026]	; 0x402
    f428:	ldrb	r0, [r1, #1025]	; 0x401
    f42c:	mov	r6, #0
    f430:	cmp	r0, #1
    f434:	beq	f514 <rb_linebuf_copy_raw+0x104>
    f438:	mov	r7, r2
    f43c:	mov	r4, r1
    f440:	ldr	r5, [r1, #1028]	; 0x404
    f444:	mov	r0, r2
    f448:	mov	r1, r3
    f44c:	bl	fa48 <rb_linebuf_skip_crlf>
    f450:	cmn	r0, #1
    f454:	beq	f4ac <rb_linebuf_copy_raw+0x9c>
    f458:	mov	r6, r0
    f45c:	add	sl, r4, r5
    f460:	movw	r0, #1022	; 0x3fe
    f464:	sub	r9, r0, r5
    f468:	cmp	r6, r9
    f46c:	ble	f4b4 <rb_linebuf_copy_raw+0xa4>
    f470:	movw	r5, #1022	; 0x3fe
    f474:	mov	r0, sl
    f478:	mov	r1, r7
    f47c:	mov	r2, r9
    f480:	bl	5130 <memcpy@plt>
    f484:	mov	r0, #0
    f488:	strb	r0, [r4, #1022]	; 0x3fe
    f48c:	mov	r0, #1
    f490:	strb	r0, [r4, #1025]	; 0x401
    f494:	str	r5, [r4, #1028]	; 0x404
    f498:	ldr	r0, [r8, #12]
    f49c:	add	r0, r0, r5
    f4a0:	str	r0, [r8, #12]
    f4a4:	mov	r6, r9
    f4a8:	b	f514 <rb_linebuf_copy_raw+0x104>
    f4ac:	mvn	r6, #0
    f4b0:	b	f514 <rb_linebuf_copy_raw+0x104>
    f4b4:	mov	r0, sl
    f4b8:	mov	r1, r7
    f4bc:	mov	r2, r6
    f4c0:	bl	5130 <memcpy@plt>
    f4c4:	mov	r0, #0
    f4c8:	strb	r0, [sl, r6]!
    f4cc:	ldrb	r0, [sl, #-1]
    f4d0:	cmp	r0, #10
    f4d4:	cmpne	r0, #13
    f4d8:	bne	f4f4 <rb_linebuf_copy_raw+0xe4>
    f4dc:	mov	r0, #1
    f4e0:	strb	r0, [r4, #1025]	; 0x401
    f4e4:	ldr	r0, [r8, #12]
    f4e8:	add	r0, r0, r6
    f4ec:	str	r0, [r8, #12]
    f4f0:	b	f508 <rb_linebuf_copy_raw+0xf8>
    f4f4:	ldr	r0, [r8, #12]
    f4f8:	add	r0, r0, r6
    f4fc:	str	r0, [r8, #12]
    f500:	mov	r0, #0
    f504:	strb	r0, [r4, #1025]	; 0x401
    f508:	ldr	r0, [r4, #1028]	; 0x404
    f50c:	add	r0, r0, r6
    f510:	str	r0, [r4, #1028]	; 0x404
    f514:	mov	r0, r6
    f518:	sub	sp, fp, #28
    f51c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f520 <rb_linebuf_new_line>:
    f520:	push	{r4, r5, fp, lr}
    f524:	add	fp, sp, #8
    f528:	mov	r4, r0
    f52c:	bl	fac4 <rb_linebuf_allocate>
    f530:	mov	r5, r0
    f534:	cmp	r0, #0
    f538:	beq	f58c <rb_linebuf_new_line+0x6c>
    f53c:	ldr	r0, [pc, #80]	; f594 <rb_linebuf_new_line+0x74>
    f540:	ldr	r0, [pc, r0]
    f544:	add	r0, r0, #1
    f548:	ldr	r1, [pc, #72]	; f598 <rb_linebuf_new_line+0x78>
    f54c:	add	r1, pc, r1
    f550:	str	r0, [r1]
    f554:	bl	549c <rb_make_rb_dlink_node@plt>
    f558:	mov	r1, r0
    f55c:	mov	r0, r5
    f560:	mov	r2, r4
    f564:	bl	f718 <rb_dlinkAddTail>
    f568:	ldr	r0, [r5, #1032]	; 0x408
    f56c:	add	r0, r0, #1
    f570:	str	r0, [r5, #1032]	; 0x408
    f574:	ldr	r0, [r4, #16]
    f578:	ldr	r1, [r4, #24]
    f57c:	add	r0, r0, #1
    f580:	str	r0, [r4, #16]
    f584:	add	r0, r1, #1
    f588:	str	r0, [r4, #24]
    f58c:	mov	r0, r5
    f590:	pop	{r4, r5, fp, pc}
    f594:	.word	0x0002dda8
    f598:	.word	0x0002dd9c

0000f59c <rb_linebuf_get>:
    f59c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f5a0:	add	fp, sp, #24
    f5a4:	mov	r4, r0
    f5a8:	ldr	r0, [r0]
    f5ac:	mov	r7, #0
    f5b0:	cmp	r0, #0
    f5b4:	beq	f65c <rb_linebuf_get+0xc0>
    f5b8:	mov	r9, r1
    f5bc:	ldr	r6, [r0]
    f5c0:	cmp	r3, #0
    f5c4:	bne	f5d4 <rb_linebuf_get+0x38>
    f5c8:	ldrb	r0, [r6, #1025]	; 0x401
    f5cc:	cmp	r0, #0
    f5d0:	beq	f65c <rb_linebuf_get+0xc0>
    f5d4:	ldr	r8, [fp, #8]
    f5d8:	ldr	r3, [r6, #1028]	; 0x404
    f5dc:	cmp	r3, r2
    f5e0:	subgt	r3, r2, #1
    f5e4:	cmp	r8, #0
    f5e8:	bne	f62c <rb_linebuf_get+0x90>
    f5ec:	ldrb	r0, [r6, #1026]	; 0x402
    f5f0:	cmp	r0, #0
    f5f4:	beq	f62c <rb_linebuf_get+0x90>
    f5f8:	mov	r7, #0
    f5fc:	cmp	r3, #0
    f600:	beq	f630 <rb_linebuf_get+0x94>
    f604:	rsb	r0, r3, #0
    f608:	mov	r1, r6
    f60c:	ldrb	r2, [r1]
    f610:	cmp	r2, #13
    f614:	cmpne	r2, #10
    f618:	bne	f664 <rb_linebuf_get+0xc8>
    f61c:	adds	r0, r0, #1
    f620:	add	r1, r1, #1
    f624:	bne	f60c <rb_linebuf_get+0x70>
    f628:	b	f634 <rb_linebuf_get+0x98>
    f62c:	mov	r7, r3
    f630:	mov	r1, r6
    f634:	mov	r0, r9
    f638:	mov	r2, r7
    f63c:	bl	5130 <memcpy@plt>
    f640:	cmp	r8, #0
    f644:	moveq	r0, #0
    f648:	strbeq	r0, [r9, r7]
    f64c:	ldr	r2, [r4]
    f650:	mov	r0, r4
    f654:	mov	r1, r6
    f658:	bl	f118 <rb_linebuf_done_line>
    f65c:	mov	r0, r7
    f660:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    f664:	add	r2, r6, r3
    f668:	sub	r2, r2, #1
    f66c:	add	r3, r0, #1
    f670:	mov	r7, #0
    f674:	ldrb	r5, [r2, r7]
    f678:	cmp	r5, #13
    f67c:	cmpne	r5, #10
    f680:	bne	f69c <rb_linebuf_get+0x100>
    f684:	sub	r5, r7, #1
    f688:	cmp	r3, r7
    f68c:	mov	r7, r5
    f690:	bne	f674 <rb_linebuf_get+0xd8>
    f694:	mov	r7, #0
    f698:	b	f634 <rb_linebuf_get+0x98>
    f69c:	sub	r7, r7, r0
    f6a0:	b	f634 <rb_linebuf_get+0x98>

0000f6a4 <rb_linebuf_attach>:
    f6a4:	push	{r4, r5, r6, sl, fp, lr}
    f6a8:	add	fp, sp, #16
    f6ac:	ldr	r6, [r1]
    f6b0:	cmp	r6, #0
    f6b4:	popeq	{r4, r5, r6, sl, fp, pc}
    f6b8:	mov	r4, r0
    f6bc:	ldr	r5, [r6]
    f6c0:	bl	549c <rb_make_rb_dlink_node@plt>
    f6c4:	mov	r1, r0
    f6c8:	mov	r0, r5
    f6cc:	mov	r2, r4
    f6d0:	bl	f718 <rb_dlinkAddTail>
    f6d4:	ldr	r0, [r4, #12]
    f6d8:	ldr	r1, [r4, #16]
    f6dc:	ldr	r2, [r4, #24]
    f6e0:	add	r1, r1, #1
    f6e4:	str	r1, [r4, #16]
    f6e8:	ldr	r1, [r5, #1028]	; 0x404
    f6ec:	add	r2, r2, #1
    f6f0:	str	r2, [r4, #24]
    f6f4:	add	r0, r0, r1
    f6f8:	str	r0, [r4, #12]
    f6fc:	ldr	r0, [r5, #1032]	; 0x408
    f700:	add	r0, r0, #1
    f704:	str	r0, [r5, #1032]	; 0x408
    f708:	ldr	r6, [r6, #8]
    f70c:	cmp	r6, #0
    f710:	bne	f6bc <rb_linebuf_attach+0x18>
    f714:	pop	{r4, r5, r6, sl, fp, pc}

0000f718 <rb_dlinkAddTail>:
    f718:	mov	r3, #0
    f71c:	str	r3, [r1, #8]
    f720:	str	r0, [r1]
    f724:	ldr	r0, [r2, #4]
    f728:	str	r0, [r1, #4]
    f72c:	ldr	r0, [r2, #4]
    f730:	cmp	r0, #0
    f734:	beq	f744 <rb_dlinkAddTail+0x2c>
    f738:	add	r0, r0, #8
    f73c:	str	r1, [r0]
    f740:	b	f750 <rb_dlinkAddTail+0x38>
    f744:	ldr	r0, [r2]
    f748:	cmp	r0, #0
    f74c:	beq	f764 <rb_dlinkAddTail+0x4c>
    f750:	str	r1, [r2, #4]
    f754:	ldr	r0, [r2, #8]
    f758:	add	r0, r0, #1
    f75c:	str	r0, [r2, #8]
    f760:	bx	lr
    f764:	mov	r0, r2
    f768:	b	f73c <rb_dlinkAddTail+0x24>

0000f76c <rb_linebuf_put>:
    f76c:	push	{r4, r5, r6, sl, fp, lr}
    f770:	add	fp, sp, #16
    f774:	mov	r4, r1
    f778:	mov	r5, r0
    f77c:	bl	f520 <rb_linebuf_new_line>
    f780:	mov	r6, r0
    f784:	movw	r1, #1023	; 0x3ff
    f788:	mov	r2, r4
    f78c:	bl	4fd4 <rb_fsnprint@plt>
    f790:	bic	r0, r0, r0, asr #31
    f794:	movw	r1, #1022	; 0x3fe
    f798:	cmp	r0, r1
    f79c:	movcc	r1, r0
    f7a0:	add	r0, r1, #2
    f7a4:	mov	r2, #0
    f7a8:	strb	r2, [r6, r0]
    f7ac:	add	r1, r6, r1
    f7b0:	movw	r2, #2573	; 0xa0d
    f7b4:	strh	r2, [r1]
    f7b8:	str	r0, [r6, #1028]	; 0x404
    f7bc:	mov	r1, #1
    f7c0:	strb	r1, [r6, #1025]	; 0x401
    f7c4:	ldr	r1, [r5, #12]
    f7c8:	add	r0, r1, r0
    f7cc:	str	r0, [r5, #12]
    f7d0:	pop	{r4, r5, r6, sl, fp, pc}

0000f7d4 <rb_linebuf_flush>:
    f7d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7d8:	add	fp, sp, #28
    f7dc:	sub	sp, sp, #4
    f7e0:	mov	r4, r1
    f7e4:	mov	r5, r0
    f7e8:	bl	4e00 <rb_fd_ssl@plt>
    f7ec:	cmp	r0, #0
    f7f0:	beq	f868 <rb_linebuf_flush+0x94>
    f7f4:	ldr	r0, [r4]
    f7f8:	cmp	r0, #0
    f7fc:	beq	f908 <rb_linebuf_flush+0x134>
    f800:	ldr	r6, [r0]
    f804:	ldrb	r0, [r6, #1025]	; 0x401
    f808:	cmp	r0, #0
    f80c:	beq	f908 <rb_linebuf_flush+0x134>
    f810:	ldr	r0, [r4, #20]
    f814:	add	r1, r6, r0
    f818:	ldr	r2, [r6, #1028]	; 0x404
    f81c:	sub	r2, r2, r0
    f820:	mov	r0, r5
    f824:	bl	4f98 <rb_write@plt>
    f828:	mov	r8, r0
    f82c:	cmp	r0, #1
    f830:	blt	f918 <rb_linebuf_flush+0x144>
    f834:	ldr	r0, [r4, #20]
    f838:	add	r0, r0, r8
    f83c:	str	r0, [r4, #20]
    f840:	ldr	r1, [r6, #1028]	; 0x404
    f844:	cmp	r0, r1
    f848:	bne	f918 <rb_linebuf_flush+0x144>
    f84c:	mov	r0, #0
    f850:	str	r0, [r4, #20]
    f854:	ldr	r2, [r4]
    f858:	mov	r0, r4
    f85c:	mov	r1, r6
    f860:	bl	f118 <rb_linebuf_done_line>
    f864:	b	f918 <rb_linebuf_flush+0x144>
    f868:	ldr	r6, [pc, #316]	; f9ac <rb_linebuf_flush+0x1d8>
    f86c:	add	r6, pc, r6
    f870:	mov	r0, r6
    f874:	mov	r1, #0
    f878:	mov	r2, #8192	; 0x2000
    f87c:	bl	4f68 <memset@plt>
    f880:	ldr	r0, [r4]
    f884:	cmp	r0, #0
    f888:	beq	f908 <rb_linebuf_flush+0x134>
    f88c:	ldr	r1, [r0]
    f890:	ldrb	r2, [r1, #1025]	; 0x401
    f894:	cmp	r2, #0
    f898:	beq	f908 <rb_linebuf_flush+0x134>
    f89c:	ldr	r2, [r4, #20]
    f8a0:	add	r8, r1, r2
    f8a4:	ldr	r1, [r1, #1028]	; 0x404
    f8a8:	sub	r9, r1, r2
    f8ac:	strd	r8, [r6]
    f8b0:	ldr	r0, [r0, #8]
    f8b4:	cmp	r0, #0
    f8b8:	beq	f924 <rb_linebuf_flush+0x150>
    f8bc:	mov	r2, #0
    f8c0:	movw	r1, #1022	; 0x3fe
    f8c4:	ldr	r7, [r0]
    f8c8:	ldrb	r3, [r7, #1025]	; 0x401
    f8cc:	cmp	r3, #0
    f8d0:	beq	f92c <rb_linebuf_flush+0x158>
    f8d4:	add	r3, r2, #1
    f8d8:	add	r2, r6, r2, lsl #3
    f8dc:	str	r7, [r2, #8]
    f8e0:	ldr	r7, [r7, #1028]	; 0x404
    f8e4:	str	r7, [r2, #12]
    f8e8:	cmp	r3, r1
    f8ec:	bhi	f900 <rb_linebuf_flush+0x12c>
    f8f0:	ldr	r0, [r0, #8]
    f8f4:	cmp	r0, #0
    f8f8:	mov	r2, r3
    f8fc:	bne	f8c4 <rb_linebuf_flush+0xf0>
    f900:	add	sl, r3, #1
    f904:	b	f930 <rb_linebuf_flush+0x15c>
    f908:	bl	5610 <__errno_location@plt>
    f90c:	mov	r1, #11
    f910:	str	r1, [r0]
    f914:	mvn	r8, #0
    f918:	mov	r0, r8
    f91c:	sub	sp, fp, #28
    f920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f924:	mov	sl, #1
    f928:	b	f930 <rb_linebuf_flush+0x15c>
    f92c:	add	sl, r2, #1
    f930:	ldr	r1, [pc, #120]	; f9b0 <rb_linebuf_flush+0x1dc>
    f934:	add	r1, pc, r1
    f938:	mov	r0, r5
    f93c:	mov	r2, sl
    f940:	bl	53f4 <rb_writev@plt>
    f944:	mov	r8, r0
    f948:	cmp	r0, #1
    f94c:	blt	f918 <rb_linebuf_flush+0x144>
    f950:	ldr	r7, [r4]
    f954:	mov	r5, r8
    f958:	mov	r6, #0
    f95c:	ldr	r0, [r4, #20]
    f960:	ldr	r1, [r7]
    f964:	ldr	r2, [r1, #1028]	; 0x404
    f968:	sub	r9, r2, r0
    f96c:	cmp	r5, r9
    f970:	blt	f9a0 <rb_linebuf_flush+0x1cc>
    f974:	ldr	r7, [r7, #8]
    f978:	ldr	r2, [r4]
    f97c:	mov	r0, r4
    f980:	bl	f118 <rb_linebuf_done_line>
    f984:	mov	r0, #0
    f988:	str	r0, [r4, #20]
    f98c:	sub	r5, r5, r9
    f990:	add	r6, r6, #1
    f994:	cmp	r6, sl
    f998:	bcc	f95c <rb_linebuf_flush+0x188>
    f99c:	b	f918 <rb_linebuf_flush+0x144>
    f9a0:	add	r0, r0, r5
    f9a4:	str	r0, [r4, #20]
    f9a8:	b	f918 <rb_linebuf_flush+0x144>
    f9ac:	.word	0x0002ba7c
    f9b0:	.word	0x0002b9b4

0000f9b4 <rb_count_rb_linebuf_memory>:
    f9b4:	push	{fp, lr}
    f9b8:	mov	fp, sp
    f9bc:	sub	sp, sp, #8
    f9c0:	mov	r3, r1
    f9c4:	mov	r1, r0
    f9c8:	ldr	r0, [pc, #24]	; f9e8 <rb_count_rb_linebuf_memory+0x34>
    f9cc:	ldr	r0, [pc, r0]
    f9d0:	mov	r2, #0
    f9d4:	str	r2, [sp]
    f9d8:	mov	r2, #0
    f9dc:	bl	5634 <rb_bh_usage@plt>
    f9e0:	mov	sp, fp
    f9e4:	pop	{fp, pc}
    f9e8:	.word	0x0002b914

0000f9ec <rb_dlinkDelete>:
    f9ec:	ldr	ip, [r0, #4]
    f9f0:	ldr	r3, [r0, #8]
    f9f4:	add	r2, r3, #4
    f9f8:	cmp	r3, #0
    f9fc:	addeq	r2, r1, #4
    fa00:	str	ip, [r2]
    fa04:	ldmib	r0, {r2, ip}
    fa08:	cmp	r2, #0
    fa0c:	mov	r3, r1
    fa10:	addne	r3, r2, #8
    fa14:	str	ip, [r3]
    fa18:	mov	r2, #0
    fa1c:	str	r2, [r0, #4]
    fa20:	str	r2, [r0, #8]
    fa24:	ldr	r0, [r1, #8]
    fa28:	sub	r0, r0, #1
    fa2c:	str	r0, [r1, #8]
    fa30:	bx	lr

0000fa34 <rb_linebuf_free>:
    fa34:	mov	r1, r0
    fa38:	ldr	r0, [pc, #4]	; fa44 <rb_linebuf_free+0x10>
    fa3c:	ldr	r0, [pc, r0]
    fa40:	b	51fc <rb_bh_free@plt>
    fa44:	.word	0x0002b8a4

0000fa48 <rb_linebuf_skip_crlf>:
    fa48:	push	{fp, lr}
    fa4c:	mov	fp, sp
    fa50:	mov	ip, #0
    fa54:	cmp	r1, #0
    fa58:	beq	fa7c <rb_linebuf_skip_crlf+0x34>
    fa5c:	rsb	r2, r1, #0
    fa60:	ldrb	r3, [r0]
    fa64:	cmp	r3, #13
    fa68:	cmpne	r3, #10
    fa6c:	beq	fa84 <rb_linebuf_skip_crlf+0x3c>
    fa70:	adds	r2, r2, #1
    fa74:	add	r0, r0, #1
    fa78:	bne	fa60 <rb_linebuf_skip_crlf+0x18>
    fa7c:	sub	r0, r1, ip
    fa80:	pop	{fp, pc}
    fa84:	add	ip, r2, #1
    fa88:	mov	r3, #0
    fa8c:	ldrb	lr, [r0, -r3]
    fa90:	cmp	lr, #13
    fa94:	cmpne	lr, #10
    fa98:	bne	fab8 <rb_linebuf_skip_crlf+0x70>
    fa9c:	sub	lr, r3, #1
    faa0:	cmp	ip, r3
    faa4:	mov	r3, lr
    faa8:	bne	fa8c <rb_linebuf_skip_crlf+0x44>
    faac:	mov	ip, #0
    fab0:	sub	r0, r1, ip
    fab4:	pop	{fp, pc}
    fab8:	sub	ip, r3, r2
    fabc:	sub	r0, r1, ip
    fac0:	pop	{fp, pc}

0000fac4 <rb_linebuf_allocate>:
    fac4:	ldr	r0, [pc, #4]	; fad0 <rb_linebuf_allocate+0xc>
    fac8:	ldr	r0, [pc, r0]
    facc:	b	5274 <rb_bh_alloc@plt>
    fad0:	.word	0x0002b818

0000fad4 <rb_init_rb_dlink_nodes>:
    fad4:	push	{fp, lr}
    fad8:	mov	fp, sp
    fadc:	mov	r1, r0
    fae0:	ldr	r2, [pc, #32]	; fb08 <rb_init_rb_dlink_nodes+0x34>
    fae4:	add	r2, pc, r2
    fae8:	mov	r0, #12
    faec:	bl	53d0 <rb_bh_create@plt>
    faf0:	ldr	r1, [pc, #20]	; fb0c <rb_init_rb_dlink_nodes+0x38>
    faf4:	add	r1, pc, r1
    faf8:	str	r0, [r1]
    fafc:	cmp	r0, #0
    fb00:	popne	{fp, pc}
    fb04:	bl	52a4 <rb_outofmemory@plt>
    fb08:	.word	0x00006b27
    fb0c:	.word	0x0002d7f8

0000fb10 <rb_make_rb_dlink_node>:
    fb10:	ldr	r0, [pc, #4]	; fb1c <rb_make_rb_dlink_node+0xc>
    fb14:	ldr	r0, [pc, r0]
    fb18:	b	5274 <rb_bh_alloc@plt>
    fb1c:	.word	0x0002d7d8

0000fb20 <rb_free_rb_dlink_node>:
    fb20:	mov	r1, r0
    fb24:	ldr	r0, [pc, #4]	; fb30 <rb_free_rb_dlink_node+0x10>
    fb28:	ldr	r0, [pc, r0]
    fb2c:	b	51fc <rb_bh_free@plt>
    fb30:	.word	0x0002d7c4

0000fb34 <rb_string_to_array>:
    fb34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    fb38:	add	fp, sp, #24
    fb3c:	mov	r4, r1
    fb40:	mov	r1, r0
    fb44:	mov	r0, #0
    fb48:	cmp	r1, #0
    fb4c:	ldrbne	r3, [r1]
    fb50:	cmpne	r3, #0
    fb54:	bne	fb60 <rb_string_to_array+0x2c>
    fb58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    fb5c:	ldrb	r3, [r1, #1]!
    fb60:	uxtb	r3, r3
    fb64:	cmp	r3, #32
    fb68:	beq	fb5c <rb_string_to_array+0x28>
    fb6c:	cmp	r3, #0
    fb70:	beq	fb58 <rb_string_to_array+0x24>
    fb74:	sub	r6, r2, #1
    fb78:	ldrb	r7, [r1]
    fb7c:	mov	r8, #0
    fb80:	mov	r0, #0
    fb84:	mov	r5, r0
    fb88:	uxtb	r0, r7
    fb8c:	cmp	r0, #58	; 0x3a
    fb90:	beq	fbfc <rb_string_to_array+0xc8>
    fb94:	str	r1, [r4, r5, lsl #2]
    fb98:	mov	r0, r1
    fb9c:	mov	r1, #32
    fba0:	bl	4efc <strchr@plt>
    fba4:	mov	r2, r0
    fba8:	add	r0, r5, #1
    fbac:	cmp	r2, #0
    fbb0:	beq	fb58 <rb_string_to_array+0x24>
    fbb4:	mov	r3, r2
    fbb8:	strb	r8, [r3], #1
    fbbc:	mov	r1, r3
    fbc0:	b	fbc8 <rb_string_to_array+0x94>
    fbc4:	add	r1, r1, #1
    fbc8:	ldrb	r7, [r1]
    fbcc:	cmp	r7, #32
    fbd0:	beq	fbc4 <rb_string_to_array+0x90>
    fbd4:	cmp	r7, #0
    fbd8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
    fbdc:	cmp	r0, r6
    fbe0:	blt	fb84 <rb_string_to_array+0x50>
    fbe4:	ldrb	r1, [r2, #1]
    fbe8:	cmp	r1, #58	; 0x3a
    fbec:	addeq	r3, r2, #2
    fbf0:	str	r3, [r4, r0, lsl #2]
    fbf4:	add	r0, r5, #2
    fbf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    fbfc:	add	r0, r1, #1
    fc00:	str	r0, [r4, r5, lsl #2]
    fc04:	add	r0, r5, #1
    fc08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000fc0c <rb_strcasecmp>:
    fc0c:	b	4f14 <strcasecmp@plt>

0000fc10 <rb_strncasecmp>:
    fc10:	b	5298 <strncasecmp@plt>

0000fc14 <rb_strcasestr>:
    fc14:	b	4d64 <strcasestr@plt>

0000fc18 <rb_strlcat>:
    fc18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fc1c:	add	fp, sp, #24
    fc20:	mov	r4, r2
    fc24:	mov	r8, r1
    fc28:	mov	r9, r0
    fc2c:	bl	510c <strlen@plt>
    fc30:	mov	r7, r0
    fc34:	sub	r6, r4, r0
    fc38:	mov	r0, r8
    fc3c:	bl	510c <strlen@plt>
    fc40:	mov	r5, r0
    fc44:	cmp	r0, r6
    fc48:	mov	r4, r0
    fc4c:	subcs	r4, r6, #1
    fc50:	add	r6, r9, r7
    fc54:	mov	r0, r6
    fc58:	mov	r1, r8
    fc5c:	mov	r2, r4
    fc60:	bl	5130 <memcpy@plt>
    fc64:	mov	r0, #0
    fc68:	strb	r0, [r6, r4]
    fc6c:	add	r0, r5, r7
    fc70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000fc74 <rb_strlcpy>:
    fc74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    fc78:	add	fp, sp, #24
    fc7c:	mov	r7, r2
    fc80:	mov	r6, r1
    fc84:	mov	r8, r0
    fc88:	mov	r0, r1
    fc8c:	bl	510c <strlen@plt>
    fc90:	mov	r4, r0
    fc94:	cmp	r7, #0
    fc98:	beq	fcc0 <rb_strlcpy+0x4c>
    fc9c:	cmp	r4, r7
    fca0:	mov	r5, r4
    fca4:	subcs	r5, r7, #1
    fca8:	mov	r0, r8
    fcac:	mov	r1, r6
    fcb0:	mov	r2, r5
    fcb4:	bl	5130 <memcpy@plt>
    fcb8:	mov	r0, #0
    fcbc:	strb	r0, [r8, r5]
    fcc0:	mov	r0, r4
    fcc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000fcc8 <rb_strnlen>:
    fcc8:	b	5334 <strnlen@plt>

0000fccc <rb_snprintf_append>:
    fccc:	sub	sp, sp, #4
    fcd0:	push	{r4, r5, r6, r7, fp, lr}
    fcd4:	add	fp, sp, #16
    fcd8:	sub	sp, sp, #4
    fcdc:	str	r3, [fp, #8]
    fce0:	cmp	r1, #0
    fce4:	beq	fd10 <rb_snprintf_append+0x44>
    fce8:	mov	r4, r2
    fcec:	mov	r6, r1
    fcf0:	mov	r5, r0
    fcf4:	bl	510c <strlen@plt>
    fcf8:	cmp	r0, r6
    fcfc:	ble	fd18 <rb_snprintf_append+0x4c>
    fd00:	sub	r0, r6, #1
    fd04:	mov	r1, #0
    fd08:	strb	r1, [r5, r0]
    fd0c:	b	fd3c <rb_snprintf_append+0x70>
    fd10:	mvn	r0, #0
    fd14:	b	fd3c <rb_snprintf_append+0x70>
    fd18:	mov	r7, r0
    fd1c:	add	r3, fp, #8
    fd20:	str	r3, [sp]
    fd24:	add	r0, r5, r0
    fd28:	sub	r1, r6, r7
    fd2c:	mov	r2, r4
    fd30:	bl	4ea8 <vsnprintf@plt>
    fd34:	cmp	r0, #0
    fd38:	addge	r0, r0, r7
    fd3c:	sub	sp, fp, #16
    fd40:	pop	{r4, r5, r6, r7, fp, lr}
    fd44:	add	sp, sp, #4
    fd48:	bx	lr

0000fd4c <rb_snprintf_try_append>:
    fd4c:	sub	sp, sp, #4
    fd50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fd54:	add	fp, sp, #24
    fd58:	sub	sp, sp, #4
    fd5c:	str	r3, [fp, #8]
    fd60:	mvn	r4, #0
    fd64:	cmp	r1, #0
    fd68:	beq	fdd8 <rb_snprintf_try_append+0x8c>
    fd6c:	mov	r9, r2
    fd70:	mov	r5, r1
    fd74:	mov	r6, r0
    fd78:	bl	510c <strlen@plt>
    fd7c:	cmp	r0, r5
    fd80:	ble	fd94 <rb_snprintf_try_append+0x48>
    fd84:	add	r0, r6, r5
    fd88:	mov	r1, #0
    fd8c:	strb	r1, [r0, #-1]
    fd90:	b	fdd8 <rb_snprintf_try_append+0x8c>
    fd94:	mov	r7, r0
    fd98:	add	r3, fp, #8
    fd9c:	str	r3, [sp]
    fda0:	add	r8, r6, r0
    fda4:	sub	r1, r5, r0
    fda8:	mov	r0, r8
    fdac:	mov	r2, r9
    fdb0:	bl	4ea8 <vsnprintf@plt>
    fdb4:	mov	r4, r0
    fdb8:	cmp	r0, #0
    fdbc:	blt	fdd8 <rb_snprintf_try_append+0x8c>
    fdc0:	add	r4, r4, r7
    fdc4:	sub	r0, r5, #1
    fdc8:	cmp	r4, r0
    fdcc:	movgt	r0, #0
    fdd0:	strbgt	r0, [r8]
    fdd4:	mvngt	r4, #0
    fdd8:	mov	r0, r4
    fddc:	sub	sp, fp, #24
    fde0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    fde4:	add	sp, sp, #4
    fde8:	bx	lr

0000fdec <rb_basename>:
    fdec:	push	{r4, sl, fp, lr}
    fdf0:	add	fp, sp, #8
    fdf4:	mov	r4, r0
    fdf8:	mov	r1, #47	; 0x2f
    fdfc:	bl	4f8c <strrchr@plt>
    fe00:	cmp	r0, #0
    fe04:	addne	r4, r0, #1
    fe08:	mov	r0, r4
    fe0c:	pop	{r4, sl, fp, lr}
    fe10:	b	fe14 <rb_strdup>

0000fe14 <rb_strdup>:
    fe14:	push	{r4, r5, fp, lr}
    fe18:	add	fp, sp, #8
    fe1c:	mov	r4, r0
    fe20:	bl	510c <strlen@plt>
    fe24:	add	r0, r0, #1
    fe28:	bl	52c8 <malloc@plt>
    fe2c:	cmp	r0, #0
    fe30:	beq	fe48 <rb_strdup+0x34>
    fe34:	mov	r5, r0
    fe38:	mov	r1, r4
    fe3c:	bl	51b4 <strcpy@plt>
    fe40:	mov	r0, r5
    fe44:	pop	{r4, r5, fp, pc}
    fe48:	bl	52a4 <rb_outofmemory@plt>

0000fe4c <rb_dirname>:
    fe4c:	push	{r4, sl, fp, lr}
    fe50:	add	fp, sp, #8
    fe54:	mov	r4, r0
    fe58:	mov	r1, #47	; 0x2f
    fe5c:	bl	4f8c <strrchr@plt>
    fe60:	cmp	r0, #0
    fe64:	bne	fe7c <rb_dirname+0x30>
    fe68:	ldr	r0, [pc, #52]	; fea4 <rb_dirname+0x58>
    fe6c:	add	r0, pc, r0
    fe70:	pop	{r4, sl, fp, lr}
    fe74:	b	fe14 <rb_strdup>
    fe78:	sub	r0, r0, #1
    fe7c:	cmp	r0, r4
    fe80:	bls	fe90 <rb_dirname+0x44>
    fe84:	ldrb	r1, [r0]
    fe88:	cmp	r1, #47	; 0x2f
    fe8c:	beq	fe78 <rb_dirname+0x2c>
    fe90:	rsb	r1, r4, #2
    fe94:	add	r1, r1, r0
    fe98:	mov	r0, r4
    fe9c:	pop	{r4, sl, fp, lr}
    fea0:	b	fea8 <rb_strndup>
    fea4:	.word	0x0000677c

0000fea8 <rb_strndup>:
    fea8:	push	{r4, r5, r6, sl, fp, lr}
    feac:	add	fp, sp, #16
    feb0:	mov	r4, r1
    feb4:	mov	r5, r0
    feb8:	mov	r0, r1
    febc:	bl	52c8 <malloc@plt>
    fec0:	cmp	r0, #0
    fec4:	beq	fee0 <rb_strndup+0x38>
    fec8:	mov	r6, r0
    fecc:	mov	r1, r5
    fed0:	mov	r2, r4
    fed4:	bl	4fe0 <rb_strlcpy@plt>
    fed8:	mov	r0, r6
    fedc:	pop	{r4, r5, r6, sl, fp, pc}
    fee0:	bl	52a4 <rb_outofmemory@plt>

0000fee4 <rb_fsnprint>:
    fee4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fee8:	add	fp, sp, #24
    feec:	cmp	r2, #0
    fef0:	moveq	r0, #0
    fef4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    fef8:	mov	r4, r2
    fefc:	mov	r8, r1
    ff00:	mov	r9, r0
    ff04:	sub	r5, r1, #1
    ff08:	mov	r6, #0
    ff0c:	b	ff40 <rb_fsnprint+0x5c>
    ff10:	sub	r1, r7, #1
    ff14:	cmp	r0, r1
    ff18:	movls	r1, r0
    ff1c:	add	r6, r1, r6
    ff20:	cmp	r6, r5
    ff24:	movcs	r0, r5
    ff28:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
    ff2c:	sub	r1, r7, r0
    ff30:	ldr	r4, [r4, #16]
    ff34:	cmp	r4, #0
    ff38:	mov	r0, r6
    ff3c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    ff40:	ldr	r7, [r4]
    ff44:	cmp	r7, #0
    ff48:	beq	ff58 <rb_fsnprint+0x74>
    ff4c:	sub	r1, r8, r6
    ff50:	cmp	r7, r1
    ff54:	bls	ff68 <rb_fsnprint+0x84>
    ff58:	cmp	r1, #0
    ff5c:	mov	r7, r1
    ff60:	moveq	r0, r6
    ff64:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    ff68:	ldr	r2, [r4, #4]
    ff6c:	cmp	r2, #0
    ff70:	beq	ff9c <rb_fsnprint+0xb8>
    ff74:	add	r0, r9, r6
    ff78:	ldr	r1, [r4, #12]
    ff7c:	cmp	r1, #0
    ff80:	beq	ffc4 <rb_fsnprint+0xe0>
    ff84:	ldr	r3, [r1]
    ff88:	mov	r1, r7
    ff8c:	bl	4ea8 <vsnprintf@plt>
    ff90:	cmp	r0, #0
    ff94:	bge	ff10 <rb_fsnprint+0x2c>
    ff98:	b	ffe4 <rb_fsnprint+0x100>
    ff9c:	ldr	r3, [r4, #8]
    ffa0:	cmp	r3, #0
    ffa4:	beq	ffdc <rb_fsnprint+0xf8>
    ffa8:	add	r0, r9, r6
    ffac:	ldr	r2, [r4, #12]
    ffb0:	mov	r1, r7
    ffb4:	blx	r3
    ffb8:	cmp	r0, #0
    ffbc:	bge	ff10 <rb_fsnprint+0x2c>
    ffc0:	b	ffe4 <rb_fsnprint+0x100>
    ffc4:	mov	r1, r2
    ffc8:	mov	r2, r7
    ffcc:	bl	4fe0 <rb_strlcpy@plt>
    ffd0:	cmp	r0, #0
    ffd4:	bge	ff10 <rb_fsnprint+0x2c>
    ffd8:	b	ffe4 <rb_fsnprint+0x100>
    ffdc:	mov	r0, #0
    ffe0:	b	ff10 <rb_fsnprint+0x2c>
    ffe4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000ffe8 <rb_fsnprintf>:
    ffe8:	push	{fp, lr}
    ffec:	mov	fp, sp
    fff0:	sub	sp, sp, #24
    fff4:	str	r3, [sp, #4]
    fff8:	mov	r3, #0
    fffc:	str	r3, [sp]
   10000:	str	r3, [sp, #8]
   10004:	sub	r3, fp, #4
   10008:	str	r3, [sp, #12]
   1000c:	str	r2, [sp, #16]
   10010:	add	r2, fp, #8
   10014:	str	r2, [fp, #-4]
   10018:	mov	r2, sp
   1001c:	bl	4fd4 <rb_fsnprint@plt>
   10020:	mov	sp, fp
   10024:	pop	{fp, pc}

00010028 <rb_helper_child>:
   10028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1002c:	add	fp, sp, #28
   10030:	sub	sp, sp, #28
   10034:	mov	r9, r3
   10038:	str	r2, [sp, #24]
   1003c:	mov	r8, r1
   10040:	mov	r4, r0
   10044:	ldr	r0, [pc, #460]	; 10218 <rb_helper_child+0x1f0>
   10048:	add	r0, pc, r0
   1004c:	bl	4ee4 <getenv@plt>
   10050:	mov	r7, r0
   10054:	ldr	r0, [pc, #448]	; 1021c <rb_helper_child+0x1f4>
   10058:	add	r0, pc, r0
   1005c:	bl	4ee4 <getenv@plt>
   10060:	mov	r5, r0
   10064:	ldr	r0, [pc, #436]	; 10220 <rb_helper_child+0x1f8>
   10068:	add	r0, pc, r0
   1006c:	bl	4ee4 <getenv@plt>
   10070:	mov	sl, #0
   10074:	cmp	r7, #0
   10078:	beq	1020c <rb_helper_child+0x1e4>
   1007c:	cmp	r5, #0
   10080:	movne	r6, r0
   10084:	cmpne	r0, #0
   10088:	beq	1020c <rb_helper_child+0x1e4>
   1008c:	str	r4, [sp, #16]
   10090:	str	r8, [sp, #20]
   10094:	bl	10230 <rb_malloc>
   10098:	mov	sl, r0
   1009c:	mov	r4, #0
   100a0:	mov	r0, r7
   100a4:	mov	r1, #0
   100a8:	mov	r2, #10
   100ac:	bl	519c <strtol@plt>
   100b0:	mov	r7, r0
   100b4:	mov	r0, r5
   100b8:	mov	r1, #0
   100bc:	mov	r2, #10
   100c0:	bl	519c <strtol@plt>
   100c4:	mov	r5, r0
   100c8:	mov	r0, r6
   100cc:	mov	r1, #0
   100d0:	mov	r2, #10
   100d4:	bl	519c <strtol@plt>
   100d8:	mov	r8, r0
   100dc:	cmp	r0, #1
   100e0:	blt	10104 <rb_helper_child+0xdc>
   100e4:	cmp	r7, r4
   100e8:	cmpne	r5, r4
   100ec:	beq	100f8 <rb_helper_child+0xd0>
   100f0:	mov	r0, r4
   100f4:	bl	5268 <close@plt>
   100f8:	add	r4, r4, #1
   100fc:	cmp	r8, r4
   10100:	bne	100e4 <rb_helper_child+0xbc>
   10104:	str	r9, [sp, #12]
   10108:	ldr	r0, [pc, #276]	; 10224 <rb_helper_child+0x1fc>
   1010c:	add	r0, pc, r0
   10110:	mov	r1, #2
   10114:	bl	4cc8 <open@plt>
   10118:	mov	r9, r0
   1011c:	cmp	r7, #0
   10120:	cmpne	r5, #0
   10124:	beq	10134 <rb_helper_child+0x10c>
   10128:	mov	r0, r9
   1012c:	mov	r1, #0
   10130:	bl	53dc <dup2@plt>
   10134:	cmp	r7, #1
   10138:	cmpne	r5, #1
   1013c:	beq	1014c <rb_helper_child+0x124>
   10140:	mov	r0, r9
   10144:	mov	r1, #1
   10148:	bl	53dc <dup2@plt>
   1014c:	cmp	r7, #2
   10150:	cmpne	r5, #2
   10154:	beq	10164 <rb_helper_child+0x13c>
   10158:	mov	r0, r9
   1015c:	mov	r1, #2
   10160:	bl	53dc <dup2@plt>
   10164:	ldr	r4, [fp, #20]
   10168:	ldr	r6, [fp, #16]
   1016c:	ldr	r2, [fp, #8]
   10170:	cmp	r9, #3
   10174:	blt	10188 <rb_helper_child+0x160>
   10178:	mov	r0, r9
   1017c:	mov	r9, r2
   10180:	bl	5268 <close@plt>
   10184:	mov	r2, r9
   10188:	str	r8, [sp]
   1018c:	str	r6, [sp, #4]
   10190:	str	r4, [sp, #8]
   10194:	ldr	r0, [sp, #24]
   10198:	ldr	r1, [sp, #12]
   1019c:	mov	r3, #0
   101a0:	bl	5358 <rb_lib_init@plt>
   101a4:	ldr	r0, [fp, #12]
   101a8:	bl	546c <rb_linebuf_init@plt>
   101ac:	add	r0, sl, #4
   101b0:	bl	540c <rb_linebuf_newbuf@plt>
   101b4:	add	r0, sl, #32
   101b8:	bl	540c <rb_linebuf_newbuf@plt>
   101bc:	ldr	r2, [pc, #100]	; 10228 <rb_helper_child+0x200>
   101c0:	add	r2, pc, r2
   101c4:	mov	r0, r7
   101c8:	mov	r1, #8
   101cc:	bl	53a0 <rb_open@plt>
   101d0:	str	r0, [sl, #60]	; 0x3c
   101d4:	ldr	r2, [pc, #80]	; 1022c <rb_helper_child+0x204>
   101d8:	add	r2, pc, r2
   101dc:	mov	r0, r5
   101e0:	mov	r1, #8
   101e4:	bl	53a0 <rb_open@plt>
   101e8:	str	r0, [sl, #64]	; 0x40
   101ec:	ldr	r0, [sl, #60]	; 0x3c
   101f0:	bl	4f5c <rb_set_nb@plt>
   101f4:	ldr	r0, [sl, #64]	; 0x40
   101f8:	bl	4f5c <rb_set_nb@plt>
   101fc:	ldr	r0, [sp, #16]
   10200:	str	r0, [sl, #76]	; 0x4c
   10204:	ldr	r0, [sp, #20]
   10208:	str	r0, [sl, #80]	; 0x50
   1020c:	mov	r0, sl
   10210:	sub	sp, fp, #28
   10214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10218:	.word	0x000065d4
   1021c:	.word	0x000065c8
   10220:	.word	0x000065bc
   10224:	.word	0x0000651e
   10228:	.word	0x00006474
   1022c:	.word	0x00006470

00010230 <rb_malloc>:
   10230:	push	{fp, lr}
   10234:	mov	fp, sp
   10238:	mov	r0, #1
   1023c:	mov	r1, #84	; 0x54
   10240:	bl	4f2c <calloc@plt>
   10244:	cmp	r0, #0
   10248:	popne	{fp, pc}
   1024c:	bl	52a4 <rb_outofmemory@plt>

00010250 <rb_helper_start>:
   10250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10254:	add	fp, sp, #28
   10258:	sub	sp, sp, #196	; 0xc4
   1025c:	mov	r7, r3
   10260:	mov	r5, r2
   10264:	mov	r9, r1
   10268:	mov	sl, r0
   1026c:	mov	r0, r1
   10270:	mov	r1, #1
   10274:	bl	5064 <access@plt>
   10278:	mov	r4, #0
   1027c:	cmn	r0, #1
   10280:	beq	10454 <rb_helper_start+0x204>
   10284:	bl	10230 <rb_malloc>
   10288:	mov	r8, r0
   1028c:	add	r6, sp, #60	; 0x3c
   10290:	ldr	r2, [pc, #456]	; 10460 <rb_helper_start+0x210>
   10294:	add	r2, pc, r2
   10298:	mov	r0, r6
   1029c:	mov	r1, #128	; 0x80
   102a0:	mov	r3, sl
   102a4:	bl	54cc <snprintf@plt>
   102a8:	add	r0, sp, #20
   102ac:	add	r1, r0, #4
   102b0:	mov	r2, r6
   102b4:	bl	528c <rb_pipe@plt>
   102b8:	cmn	r0, #1
   102bc:	ble	1044c <rb_helper_start+0x1fc>
   102c0:	str	r5, [sp, #8]
   102c4:	str	r7, [sp, #4]
   102c8:	add	r5, sp, #60	; 0x3c
   102cc:	ldr	r2, [pc, #400]	; 10464 <rb_helper_start+0x214>
   102d0:	add	r2, pc, r2
   102d4:	mov	r0, r5
   102d8:	mov	r1, #128	; 0x80
   102dc:	mov	r3, sl
   102e0:	bl	54cc <snprintf@plt>
   102e4:	add	r0, sp, #12
   102e8:	add	r1, r0, #4
   102ec:	mov	r2, r5
   102f0:	bl	528c <rb_pipe@plt>
   102f4:	cmn	r0, #1
   102f8:	ble	1044c <rb_helper_start+0x1fc>
   102fc:	ldr	r0, [sp, #24]
   10300:	bl	4e30 <rb_get_fd@plt>
   10304:	mov	r3, r0
   10308:	add	r7, sp, #44	; 0x2c
   1030c:	ldr	r6, [pc, #340]	; 10468 <rb_helper_start+0x218>
   10310:	add	r6, pc, r6
   10314:	mov	r0, r7
   10318:	mov	r1, #16
   1031c:	mov	r2, r6
   10320:	bl	54cc <snprintf@plt>
   10324:	ldr	r0, [sp, #12]
   10328:	bl	4e30 <rb_get_fd@plt>
   1032c:	mov	r3, r0
   10330:	add	r4, sp, #28
   10334:	mov	r0, r4
   10338:	mov	r1, #16
   1033c:	mov	r2, r6
   10340:	bl	54cc <snprintf@plt>
   10344:	ldr	r0, [sp, #20]
   10348:	bl	4f5c <rb_set_nb@plt>
   1034c:	ldr	r0, [sp, #24]
   10350:	bl	4f5c <rb_set_nb@plt>
   10354:	ldr	r0, [sp, #12]
   10358:	bl	4f5c <rb_set_nb@plt>
   1035c:	ldr	r0, [sp, #16]
   10360:	bl	4f5c <rb_set_nb@plt>
   10364:	ldr	r0, [pc, #256]	; 1046c <rb_helper_start+0x21c>
   10368:	add	r0, pc, r0
   1036c:	mov	r1, r4
   10370:	mov	r2, #1
   10374:	bl	4e18 <rb_setenv@plt>
   10378:	ldr	r0, [pc, #240]	; 10470 <rb_helper_start+0x220>
   1037c:	add	r0, pc, r0
   10380:	mov	r1, r7
   10384:	mov	r2, #1
   10388:	bl	4e18 <rb_setenv@plt>
   1038c:	ldr	r0, [pc, #224]	; 10474 <rb_helper_start+0x224>
   10390:	add	r0, pc, r0
   10394:	ldr	r1, [pc, #220]	; 10478 <rb_helper_start+0x228>
   10398:	add	r1, pc, r1
   1039c:	mov	r2, #1
   103a0:	bl	4e18 <rb_setenv@plt>
   103a4:	ldr	r2, [pc, #208]	; 1047c <rb_helper_start+0x22c>
   103a8:	add	r2, pc, r2
   103ac:	mov	r0, r5
   103b0:	mov	r1, #128	; 0x80
   103b4:	mov	r3, sl
   103b8:	bl	54cc <snprintf@plt>
   103bc:	str	r5, [fp, #-36]	; 0xffffffdc
   103c0:	mov	r4, #0
   103c4:	str	r4, [fp, #-32]	; 0xffffffe0
   103c8:	sub	r1, fp, #36	; 0x24
   103cc:	mov	r0, r9
   103d0:	bl	54b4 <rb_spawn_process@plt>
   103d4:	cmn	r0, #1
   103d8:	beq	1042c <rb_helper_start+0x1dc>
   103dc:	mov	r5, r0
   103e0:	ldr	r0, [sp, #24]
   103e4:	bl	5190 <rb_close@plt>
   103e8:	ldr	r0, [sp, #12]
   103ec:	bl	5190 <rb_close@plt>
   103f0:	add	r0, r8, #4
   103f4:	bl	540c <rb_linebuf_newbuf@plt>
   103f8:	add	r0, r8, #32
   103fc:	bl	540c <rb_linebuf_newbuf@plt>
   10400:	ldr	r0, [sp, #20]
   10404:	ldr	r1, [sp, #16]
   10408:	add	r2, r8, #60	; 0x3c
   1040c:	stm	r2, {r0, r1, r5}
   10410:	str	r4, [r8, #72]	; 0x48
   10414:	ldr	r0, [sp, #8]
   10418:	str	r0, [r8, #76]	; 0x4c
   1041c:	ldr	r0, [sp, #4]
   10420:	str	r0, [r8, #80]	; 0x50
   10424:	mov	r4, r8
   10428:	b	10454 <rb_helper_start+0x204>
   1042c:	ldr	r0, [sp, #20]
   10430:	bl	5190 <rb_close@plt>
   10434:	ldr	r0, [sp, #24]
   10438:	bl	5190 <rb_close@plt>
   1043c:	ldr	r0, [sp, #12]
   10440:	bl	5190 <rb_close@plt>
   10444:	ldr	r0, [sp, #16]
   10448:	bl	5190 <rb_close@plt>
   1044c:	mov	r0, r8
   10450:	bl	10480 <rb_free>
   10454:	mov	r0, r4
   10458:	sub	sp, fp, #28
   1045c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10460:	.word	0x000063c8
   10464:	.word	0x0000639d
   10468:	.word	0x000056c1
   1046c:	.word	0x000062b4
   10470:	.word	0x000062a4
   10474:	.word	0x00006294
   10478:	.word	0x000062e7
   1047c:	.word	0x000062db

00010480 <rb_free>:
   10480:	cmp	r0, #0
   10484:	bxeq	lr
   10488:	b	501c <free@plt>

0001048c <rb_helper_restart>:
   1048c:	ldr	r1, [r0, #80]	; 0x50
   10490:	bx	r1

00010494 <rb_helper_write_queue>:
   10494:	sub	sp, sp, #8
   10498:	push	{fp, lr}
   1049c:	mov	fp, sp
   104a0:	sub	sp, sp, #24
   104a4:	str	r3, [fp, #12]
   104a8:	str	r2, [fp, #8]
   104ac:	str	r1, [sp, #4]
   104b0:	mov	r1, #0
   104b4:	str	r1, [sp]
   104b8:	str	r1, [sp, #8]
   104bc:	sub	r2, fp, #4
   104c0:	str	r2, [sp, #12]
   104c4:	str	r1, [sp, #16]
   104c8:	add	r1, fp, #8
   104cc:	str	r1, [fp, #-4]
   104d0:	add	r0, r0, #4
   104d4:	mov	r1, sp
   104d8:	bl	5508 <rb_linebuf_put@plt>
   104dc:	mov	sp, fp
   104e0:	pop	{fp, lr}
   104e4:	add	sp, sp, #8
   104e8:	bx	lr

000104ec <rb_helper_write_flush>:
   104ec:	mov	r1, r0
   104f0:	ldr	r0, [r0, #64]	; 0x40
   104f4:	b	104f8 <rb_helper_write_sendq>

000104f8 <rb_helper_write_sendq>:
   104f8:	push	{r4, r5, r6, sl, fp, lr}
   104fc:	add	fp, sp, #16
   10500:	mov	r5, r0
   10504:	ldr	r0, [r1, #16]
   10508:	cmp	r0, #1
   1050c:	poplt	{r4, r5, r6, sl, fp, pc}
   10510:	mov	r4, r1
   10514:	add	r6, r1, #4
   10518:	mov	r0, r5
   1051c:	mov	r1, r6
   10520:	bl	50f4 <rb_linebuf_flush@plt>
   10524:	cmp	r0, #0
   10528:	bgt	10518 <rb_helper_write_sendq+0x20>
   1052c:	beq	1056c <rb_helper_write_sendq+0x74>
   10530:	bl	5610 <__errno_location@plt>
   10534:	ldr	r0, [r0]
   10538:	bl	4d28 <rb_ignore_errno@plt>
   1053c:	cmp	r0, #0
   10540:	beq	1056c <rb_helper_write_sendq+0x74>
   10544:	ldr	r0, [r4, #16]
   10548:	cmp	r0, #1
   1054c:	blt	10578 <rb_helper_write_sendq+0x80>
   10550:	ldr	r0, [r4, #64]	; 0x40
   10554:	ldr	r2, [pc, #32]	; 1057c <rb_helper_write_sendq+0x84>
   10558:	add	r2, pc, r2
   1055c:	mov	r1, #2
   10560:	mov	r3, r4
   10564:	pop	{r4, r5, r6, sl, fp, lr}
   10568:	b	4df4 <rb_setselect@plt>
   1056c:	mov	r0, r4
   10570:	pop	{r4, r5, r6, sl, fp, lr}
   10574:	b	1048c <rb_helper_restart>
   10578:	pop	{r4, r5, r6, sl, fp, pc}
   1057c:	.word	0xffffff98

00010580 <rb_helper_write>:
   10580:	sub	sp, sp, #8
   10584:	push	{r4, sl, fp, lr}
   10588:	add	fp, sp, #8
   1058c:	sub	sp, sp, #24
   10590:	mov	r4, r0
   10594:	str	r3, [fp, #12]
   10598:	str	r2, [fp, #8]
   1059c:	str	r1, [sp, #4]
   105a0:	mov	r0, #0
   105a4:	str	r0, [sp]
   105a8:	str	r0, [sp, #8]
   105ac:	sub	r1, fp, #12
   105b0:	str	r1, [sp, #12]
   105b4:	str	r0, [sp, #16]
   105b8:	add	r0, fp, #8
   105bc:	str	r0, [fp, #-12]
   105c0:	add	r0, r4, #4
   105c4:	mov	r1, sp
   105c8:	bl	5508 <rb_linebuf_put@plt>
   105cc:	mov	r0, r4
   105d0:	bl	104ec <rb_helper_write_flush>
   105d4:	sub	sp, fp, #8
   105d8:	pop	{r4, sl, fp, lr}
   105dc:	add	sp, sp, #8
   105e0:	bx	lr

000105e4 <rb_helper_run>:
   105e4:	cmp	r0, #0
   105e8:	bxeq	lr
   105ec:	mov	r1, r0
   105f0:	ldr	r0, [r0, #60]	; 0x3c
   105f4:	b	105f8 <rb_helper_read_cb>

000105f8 <rb_helper_read_cb>:
   105f8:	push	{r4, r5, r6, sl, fp, lr}
   105fc:	add	fp, sp, #16
   10600:	cmp	r1, #0
   10604:	popeq	{r4, r5, r6, sl, fp, pc}
   10608:	mov	r4, r1
   1060c:	ldr	r0, [r1, #60]	; 0x3c
   10610:	ldr	r1, [pc, #156]	; 106b4 <rb_helper_read_cb+0xbc>
   10614:	add	r1, pc, r1
   10618:	mov	r2, #32768	; 0x8000
   1061c:	bl	50ac <rb_read@plt>
   10620:	mov	r2, r0
   10624:	cmp	r0, #1
   10628:	blt	10670 <rb_helper_read_cb+0x78>
   1062c:	add	r5, r4, #32
   10630:	ldr	r6, [pc, #128]	; 106b8 <rb_helper_read_cb+0xc0>
   10634:	add	r6, pc, r6
   10638:	mov	r0, r5
   1063c:	mov	r1, r6
   10640:	mov	r3, #0
   10644:	bl	4fbc <rb_linebuf_parse@plt>
   10648:	ldr	r1, [r4, #76]	; 0x4c
   1064c:	mov	r0, r4
   10650:	blx	r1
   10654:	ldr	r0, [r4, #60]	; 0x3c
   10658:	mov	r1, r6
   1065c:	mov	r2, #32768	; 0x8000
   10660:	bl	50ac <rb_read@plt>
   10664:	mov	r2, r0
   10668:	cmp	r0, #0
   1066c:	bgt	10638 <rb_helper_read_cb+0x40>
   10670:	cmp	r2, #0
   10674:	beq	106a8 <rb_helper_read_cb+0xb0>
   10678:	bl	5610 <__errno_location@plt>
   1067c:	ldr	r0, [r0]
   10680:	bl	4d28 <rb_ignore_errno@plt>
   10684:	cmp	r0, #0
   10688:	beq	106a8 <rb_helper_read_cb+0xb0>
   1068c:	ldr	r0, [r4, #60]	; 0x3c
   10690:	ldr	r2, [pc, #36]	; 106bc <rb_helper_read_cb+0xc4>
   10694:	add	r2, pc, r2
   10698:	mov	r1, #1
   1069c:	mov	r3, r4
   106a0:	pop	{r4, r5, r6, sl, fp, lr}
   106a4:	b	4df4 <rb_setselect@plt>
   106a8:	mov	r0, r4
   106ac:	pop	{r4, r5, r6, sl, fp, lr}
   106b0:	b	1048c <rb_helper_restart>
   106b4:	.word	0x0002ccdc
   106b8:	.word	0x0002ccbc
   106bc:	.word	0xffffff5c

000106c0 <rb_helper_close>:
   106c0:	cmp	r0, #0
   106c4:	bxeq	lr
   106c8:	push	{r4, sl, fp, lr}
   106cc:	add	fp, sp, #8
   106d0:	mov	r4, r0
   106d4:	ldr	r0, [r0, #68]	; 0x44
   106d8:	mov	r1, #9
   106dc:	bl	5010 <rb_kill@plt>
   106e0:	ldr	r0, [r4, #60]	; 0x3c
   106e4:	bl	5190 <rb_close@plt>
   106e8:	ldr	r0, [r4, #64]	; 0x40
   106ec:	bl	5190 <rb_close@plt>
   106f0:	mov	r0, r4
   106f4:	pop	{r4, sl, fp, lr}
   106f8:	b	10480 <rb_free>

000106fc <rb_helper_read>:
   106fc:	push	{fp, lr}
   10700:	mov	fp, sp
   10704:	sub	sp, sp, #8
   10708:	mov	r3, #0
   1070c:	str	r3, [sp]
   10710:	add	r0, r0, #32
   10714:	mov	r3, #0
   10718:	bl	50c4 <rb_linebuf_get@plt>
   1071c:	mov	sp, fp
   10720:	pop	{fp, pc}

00010724 <rb_helper_loop>:
   10724:	push	{fp, lr}
   10728:	mov	fp, sp
   1072c:	mov	r4, r1
   10730:	bl	4cb0 <rb_helper_run@plt>
   10734:	mov	r0, r4
   10738:	bl	5070 <rb_lib_loop@plt>

0001073c <rb_init_netio_devpoll>:
   1073c:	mov	r0, #38	; 0x26
   10740:	bx	lr

00010744 <rb_setselect_devpoll>:
   10744:	push	{fp, lr}
   10748:	mov	fp, sp
   1074c:	bl	5610 <__errno_location@plt>
   10750:	mov	r1, #38	; 0x26
   10754:	str	r1, [r0]
   10758:	pop	{fp, pc}

0001075c <rb_select_devpoll>:
   1075c:	push	{fp, lr}
   10760:	mov	fp, sp
   10764:	bl	5610 <__errno_location@plt>
   10768:	mov	r1, #38	; 0x26
   1076c:	str	r1, [r0]
   10770:	mvn	r0, #0
   10774:	pop	{fp, pc}

00010778 <rb_setup_fd_devpoll>:
   10778:	push	{fp, lr}
   1077c:	mov	fp, sp
   10780:	bl	5610 <__errno_location@plt>
   10784:	mov	r1, #38	; 0x26
   10788:	str	r1, [r0]
   1078c:	mvn	r0, #0
   10790:	pop	{fp, pc}

00010794 <rb_init_netio_epoll>:
   10794:	push	{r4, sl, fp, lr}
   10798:	add	fp, sp, #8
   1079c:	ldr	r0, [pc, #144]	; 10834 <rb_init_netio_epoll+0xa0>
   107a0:	add	r0, pc, r0
   107a4:	mov	r4, #0
   107a8:	strb	r4, [r0]
   107ac:	ldr	r0, [pc, #132]	; 10838 <rb_init_netio_epoll+0xa4>
   107b0:	add	r0, pc, r0
   107b4:	str	r4, [r0]
   107b8:	mov	r0, #12
   107bc:	bl	10854 <rb_malloc>
   107c0:	ldr	r1, [pc, #116]	; 1083c <rb_init_netio_epoll+0xa8>
   107c4:	add	r1, pc, r1
   107c8:	str	r0, [r1]
   107cc:	bl	4d04 <getdtablesize@plt>
   107d0:	ldr	r1, [pc, #104]	; 10840 <rb_init_netio_epoll+0xac>
   107d4:	ldr	r1, [pc, r1]
   107d8:	str	r0, [r1, #8]
   107dc:	bl	4e3c <epoll_create@plt>
   107e0:	ldr	r1, [pc, #92]	; 10844 <rb_init_netio_epoll+0xb0>
   107e4:	ldr	r1, [pc, r1]
   107e8:	str	r0, [r1]
   107ec:	cmp	r0, #0
   107f0:	mvnlt	r4, #0
   107f4:	movlt	r0, r4
   107f8:	poplt	{r4, sl, fp, pc}
   107fc:	ldr	r2, [pc, #68]	; 10848 <rb_init_netio_epoll+0xb4>
   10800:	add	r2, pc, r2
   10804:	mov	r1, #64	; 0x40
   10808:	bl	53a0 <rb_open@plt>
   1080c:	ldr	r0, [pc, #56]	; 1084c <rb_init_netio_epoll+0xb8>
   10810:	ldr	r0, [pc, r0]
   10814:	ldr	r0, [r0, #8]
   10818:	lsl	r0, r0, #4
   1081c:	bl	10854 <rb_malloc>
   10820:	ldr	r1, [pc, #40]	; 10850 <rb_init_netio_epoll+0xbc>
   10824:	ldr	r1, [pc, r1]
   10828:	str	r0, [r1, #4]
   1082c:	mov	r0, r4
   10830:	pop	{r4, sl, fp, pc}
   10834:	.word	0x00034b54
   10838:	.word	0x00034b40
   1083c:	.word	0x00034b34
   10840:	.word	0x00034b24
   10844:	.word	0x00034b14
   10848:	.word	0x00005e93
   1084c:	.word	0x00034ae8
   10850:	.word	0x00034ad4

00010854 <rb_malloc>:
   10854:	push	{fp, lr}
   10858:	mov	fp, sp
   1085c:	mov	r1, r0
   10860:	mov	r0, #1
   10864:	bl	4f2c <calloc@plt>
   10868:	cmp	r0, #0
   1086c:	popne	{fp, pc}
   10870:	bl	52a4 <rb_outofmemory@plt>

00010874 <rb_setup_fd_epoll>:
   10874:	mov	r0, #0
   10878:	bx	lr

0001087c <rb_setselect_epoll>:
   1087c:	push	{fp, lr}
   10880:	mov	fp, sp
   10884:	sub	sp, sp, #16
   10888:	ldr	ip, [r0, #20]
   1088c:	tst	r1, #1
   10890:	beq	108ac <rb_setselect_epoll+0x30>
   10894:	str	r2, [r0, #28]
   10898:	str	r3, [r0, #32]
   1089c:	orr	lr, ip, #1
   108a0:	cmp	r2, #0
   108a4:	biceq	lr, ip, #1
   108a8:	str	lr, [r0, #20]
   108ac:	tst	r1, #2
   108b0:	bne	108e0 <rb_setselect_epoll+0x64>
   108b4:	ldr	r3, [r0, #20]
   108b8:	orrs	r1, r3, ip
   108bc:	beq	10948 <rb_setselect_epoll+0xcc>
   108c0:	cmp	r3, #1
   108c4:	blt	10908 <rb_setselect_epoll+0x8c>
   108c8:	cmp	ip, #0
   108cc:	beq	10918 <rb_setselect_epoll+0x9c>
   108d0:	mov	r1, #3
   108d4:	cmp	r3, ip
   108d8:	bne	1091c <rb_setselect_epoll+0xa0>
   108dc:	b	10948 <rb_setselect_epoll+0xcc>
   108e0:	str	r2, [r0, #36]	; 0x24
   108e4:	str	r3, [r0, #40]	; 0x28
   108e8:	ldr	r1, [r0, #20]
   108ec:	orr	r3, r1, #4
   108f0:	cmp	r2, #0
   108f4:	biceq	r3, r1, #4
   108f8:	str	r3, [r0, #20]
   108fc:	orrs	r1, r3, ip
   10900:	bne	108c0 <rb_setselect_epoll+0x44>
   10904:	b	10948 <rb_setselect_epoll+0xcc>
   10908:	str	r0, [sp, #8]
   1090c:	str	r3, [sp]
   10910:	mov	r1, #2
   10914:	b	10928 <rb_setselect_epoll+0xac>
   10918:	mov	r1, #1
   1091c:	str	r0, [sp, #8]
   10920:	orr	r2, r3, #-2147483648	; 0x80000000
   10924:	str	r2, [sp]
   10928:	ldr	r2, [r0, #12]
   1092c:	ldr	r0, [pc, #60]	; 10970 <rb_setselect_epoll+0xf4>
   10930:	ldr	r0, [pc, r0]
   10934:	ldr	r0, [r0]
   10938:	mov	r3, sp
   1093c:	bl	5574 <epoll_ctl@plt>
   10940:	cmp	r0, #0
   10944:	bne	10950 <rb_setselect_epoll+0xd4>
   10948:	mov	sp, fp
   1094c:	pop	{fp, pc}
   10950:	bl	5610 <__errno_location@plt>
   10954:	ldr	r0, [r0]
   10958:	bl	4cec <strerror@plt>
   1095c:	mov	r1, r0
   10960:	ldr	r0, [pc, #12]	; 10974 <rb_setselect_epoll+0xf8>
   10964:	add	r0, pc, r0
   10968:	bl	5244 <rb_lib_log@plt>
   1096c:	bl	4d10 <abort@plt>
   10970:	.word	0x000349c8
   10974:	.word	0x00005d45

00010978 <rb_select_epoll>:
   10978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1097c:	add	fp, sp, #28
   10980:	sub	sp, sp, #20
   10984:	mov	r3, r0
   10988:	ldr	r2, [pc, #380]	; 10b0c <rb_select_epoll+0x194>
   1098c:	ldr	r2, [pc, r2]
   10990:	ldm	r2, {r0, r1, r2}
   10994:	bl	50dc <epoll_wait@plt>
   10998:	mov	r4, r0
   1099c:	bl	5610 <__errno_location@plt>
   109a0:	mov	sl, r0
   109a4:	ldr	r6, [r0]
   109a8:	bl	52b0 <rb_set_time@plt>
   109ac:	str	r6, [sl]
   109b0:	cmn	r4, #1
   109b4:	ble	10aec <rb_select_epoll+0x174>
   109b8:	cmp	r4, #0
   109bc:	beq	10ae0 <rb_select_epoll+0x168>
   109c0:	mov	r6, #0
   109c4:	mov	r9, sp
   109c8:	mov	r5, #0
   109cc:	ldr	r0, [pc, #316]	; 10b10 <rb_select_epoll+0x198>
   109d0:	ldr	r0, [pc, r0]
   109d4:	ldr	r0, [r0, #4]
   109d8:	ldrb	r1, [r0, r5, lsl #4]!
   109dc:	ldr	r7, [r0, #8]
   109e0:	ldr	r8, [r7, #20]
   109e4:	tst	r1, #25
   109e8:	beq	10a0c <rb_select_epoll+0x94>
   109ec:	ldr	r2, [r7, #28]
   109f0:	ldr	r1, [r7, #32]
   109f4:	str	r6, [r7, #28]
   109f8:	str	r6, [r7, #32]
   109fc:	cmp	r2, #0
   10a00:	beq	10a0c <rb_select_epoll+0x94>
   10a04:	mov	r0, r7
   10a08:	blx	r2
   10a0c:	ldrb	r0, [r7, #16]
   10a10:	tst	r0, #1
   10a14:	beq	10ad4 <rb_select_epoll+0x15c>
   10a18:	ldr	r0, [pc, #244]	; 10b14 <rb_select_epoll+0x19c>
   10a1c:	ldr	r0, [pc, r0]
   10a20:	ldr	r0, [r0, #4]
   10a24:	ldrb	r0, [r0, r5, lsl #4]
   10a28:	tst	r0, #28
   10a2c:	beq	10a50 <rb_select_epoll+0xd8>
   10a30:	ldr	r2, [r7, #36]	; 0x24
   10a34:	ldr	r1, [r7, #40]	; 0x28
   10a38:	str	r6, [r7, #36]	; 0x24
   10a3c:	str	r6, [r7, #40]	; 0x28
   10a40:	cmp	r2, #0
   10a44:	beq	10a50 <rb_select_epoll+0xd8>
   10a48:	mov	r0, r7
   10a4c:	blx	r2
   10a50:	ldrb	r0, [r7, #16]
   10a54:	tst	r0, #1
   10a58:	beq	10ad4 <rb_select_epoll+0x15c>
   10a5c:	ldr	r0, [r7, #28]
   10a60:	ldr	r1, [r7, #36]	; 0x24
   10a64:	cmp	r0, #0
   10a68:	movwne	r0, #1
   10a6c:	cmp	r1, #0
   10a70:	orrne	r0, r0, #4
   10a74:	cmp	r8, r0
   10a78:	beq	10ad4 <rb_select_epoll+0x15c>
   10a7c:	str	r0, [sp]
   10a80:	str	r0, [r7, #20]
   10a84:	str	r7, [sp, #8]
   10a88:	cmp	r0, #0
   10a8c:	mov	r1, #3
   10a90:	movweq	r1, #2
   10a94:	orrne	r0, r0, #-2147483648	; 0x80000000
   10a98:	strne	r0, [sp]
   10a9c:	ldr	r2, [r7, #12]
   10aa0:	ldr	r0, [pc, #112]	; 10b18 <rb_select_epoll+0x1a0>
   10aa4:	ldr	r0, [pc, r0]
   10aa8:	ldr	r0, [r0]
   10aac:	mov	r3, r9
   10ab0:	bl	5574 <epoll_ctl@plt>
   10ab4:	cmp	r0, #0
   10ab8:	beq	10ad4 <rb_select_epoll+0x15c>
   10abc:	ldr	r0, [sl]
   10ac0:	bl	4cec <strerror@plt>
   10ac4:	mov	r1, r0
   10ac8:	ldr	r0, [pc, #76]	; 10b1c <rb_select_epoll+0x1a4>
   10acc:	add	r0, pc, r0
   10ad0:	bl	5244 <rb_lib_log@plt>
   10ad4:	add	r5, r5, #1
   10ad8:	cmp	r4, r5
   10adc:	bne	109cc <rb_select_epoll+0x54>
   10ae0:	mov	r0, #0
   10ae4:	sub	sp, fp, #28
   10ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10aec:	mov	r0, r6
   10af0:	bl	4d28 <rb_ignore_errno@plt>
   10af4:	mov	r1, r0
   10af8:	mov	r0, #0
   10afc:	cmp	r1, #0
   10b00:	movweq	r0, #5
   10b04:	sub	sp, fp, #28
   10b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b0c:	.word	0x0003496c
   10b10:	.word	0x00034928
   10b14:	.word	0x000348dc
   10b18:	.word	0x00034854
   10b1c:	.word	0x00005c08

00010b20 <rb_epoll_supports_event>:
   10b20:	push	{r4, r5, r6, sl, fp, lr}
   10b24:	add	fp, sp, #16
   10b28:	sub	sp, sp, #288	; 0x120
   10b2c:	ldr	r4, [pc, #260]	; 10c38 <rb_epoll_supports_event+0x118>
   10b30:	ldr	r4, [pc, r4]
   10b34:	cmp	r4, #1
   10b38:	beq	10bd0 <rb_epoll_supports_event+0xb0>
   10b3c:	cmn	r4, #1
   10b40:	beq	10bcc <rb_epoll_supports_event+0xac>
   10b44:	ldr	r0, [pc, #240]	; 10c3c <rb_epoll_supports_event+0x11c>
   10b48:	add	r0, pc, r0
   10b4c:	add	r1, sp, #128	; 0x80
   10b50:	bl	14e08 <__stat>
   10b54:	cmp	r0, #0
   10b58:	beq	10bbc <rb_epoll_supports_event+0x9c>
   10b5c:	mov	r4, #0
   10b60:	mov	r0, #0
   10b64:	mov	r1, #0
   10b68:	bl	54e4 <timerfd_create@plt>
   10b6c:	cmp	r0, #0
   10b70:	blt	10b98 <rb_epoll_supports_event+0x78>
   10b74:	bl	5268 <close@plt>
   10b78:	ldr	r0, [pc, #196]	; 10c44 <rb_epoll_supports_event+0x124>
   10b7c:	add	r0, pc, r0
   10b80:	mov	r4, #1
   10b84:	str	r4, [r0]
   10b88:	ldr	r0, [pc, #184]	; 10c48 <rb_epoll_supports_event+0x128>
   10b8c:	add	r0, pc, r0
   10b90:	strb	r4, [r0]
   10b94:	b	10bd0 <rb_epoll_supports_event+0xb0>
   10b98:	str	r4, [fp, #-76]	; 0xffffffb4
   10b9c:	mov	r0, #26
   10ba0:	str	r0, [fp, #-80]	; 0xffffffb0
   10ba4:	sub	r1, fp, #84	; 0x54
   10ba8:	sub	r2, fp, #20
   10bac:	mov	r0, #0
   10bb0:	bl	4e78 <timer_create@plt>
   10bb4:	cmp	r0, #0
   10bb8:	beq	10bdc <rb_epoll_supports_event+0xbc>
   10bbc:	ldr	r0, [pc, #124]	; 10c40 <rb_epoll_supports_event+0x120>
   10bc0:	add	r0, pc, r0
   10bc4:	mvn	r1, #0
   10bc8:	str	r1, [r0]
   10bcc:	mov	r4, #0
   10bd0:	mov	r0, r4
   10bd4:	sub	sp, fp, #16
   10bd8:	pop	{r4, r5, r6, sl, fp, pc}
   10bdc:	ldr	r0, [fp, #-20]	; 0xffffffec
   10be0:	bl	5394 <timer_delete@plt>
   10be4:	mov	r5, sp
   10be8:	mov	r0, r5
   10bec:	bl	4ce0 <sigemptyset@plt>
   10bf0:	mvn	r6, #0
   10bf4:	mov	r4, #0
   10bf8:	mvn	r0, #0
   10bfc:	mov	r1, r5
   10c00:	mov	r2, #0
   10c04:	bl	4d88 <signalfd@plt>
   10c08:	cmn	r0, #1
   10c0c:	ble	10c28 <rb_epoll_supports_event+0x108>
   10c10:	bl	5268 <close@plt>
   10c14:	ldr	r0, [pc, #52]	; 10c50 <rb_epoll_supports_event+0x130>
   10c18:	add	r0, pc, r0
   10c1c:	mov	r4, #1
   10c20:	str	r4, [r0]
   10c24:	b	10bd0 <rb_epoll_supports_event+0xb0>
   10c28:	ldr	r0, [pc, #28]	; 10c4c <rb_epoll_supports_event+0x12c>
   10c2c:	add	r0, pc, r0
   10c30:	str	r6, [r0]
   10c34:	b	10bd0 <rb_epoll_supports_event+0xb0>
   10c38:	.word	0x000347c0
   10c3c:	.word	0x00005bb4
   10c40:	.word	0x00034730
   10c44:	.word	0x00034774
   10c48:	.word	0x00034768
   10c4c:	.word	0x000346c4
   10c50:	.word	0x000346d8

00010c54 <rb_epoll_init_event>:
   10c54:	push	{r4, r5, fp, lr}
   10c58:	add	fp, sp, #8
   10c5c:	sub	sp, sp, #128	; 0x80
   10c60:	bl	10b20 <rb_epoll_supports_event>
   10c64:	ldr	r0, [pc, #172]	; 10d18 <rb_epoll_init_event+0xc4>
   10c68:	add	r0, pc, r0
   10c6c:	ldrb	r0, [r0]
   10c70:	cmp	r0, #0
   10c74:	bne	10cfc <rb_epoll_init_event+0xa8>
   10c78:	mov	r4, sp
   10c7c:	mov	r0, r4
   10c80:	bl	4ce0 <sigemptyset@plt>
   10c84:	bl	4dd0 <__libc_current_sigrtmin@plt>
   10c88:	mov	r1, r0
   10c8c:	mov	r0, r4
   10c90:	bl	51a8 <sigaddset@plt>
   10c94:	mov	r0, #0
   10c98:	mov	r1, r4
   10c9c:	mov	r2, #0
   10ca0:	bl	52d4 <sigprocmask@plt>
   10ca4:	mov	r0, r4
   10ca8:	bl	4ce0 <sigemptyset@plt>
   10cac:	bl	4dd0 <__libc_current_sigrtmin@plt>
   10cb0:	mov	r1, r0
   10cb4:	mov	r0, r4
   10cb8:	bl	51a8 <sigaddset@plt>
   10cbc:	mvn	r5, #0
   10cc0:	mvn	r0, #0
   10cc4:	mov	r1, r4
   10cc8:	mov	r2, #0
   10ccc:	bl	4d88 <signalfd@plt>
   10cd0:	cmn	r0, #1
   10cd4:	beq	10d04 <rb_epoll_init_event+0xb0>
   10cd8:	ldr	r2, [pc, #64]	; 10d20 <rb_epoll_init_event+0xcc>
   10cdc:	add	r2, pc, r2
   10ce0:	mov	r1, #64	; 0x40
   10ce4:	bl	53a0 <rb_open@plt>
   10ce8:	mov	r4, r0
   10cec:	bl	4f5c <rb_set_nb@plt>
   10cf0:	mov	r0, r4
   10cf4:	mov	r1, #0
   10cf8:	bl	10d24 <signalfd_handler>
   10cfc:	sub	sp, fp, #8
   10d00:	pop	{r4, r5, fp, pc}
   10d04:	ldr	r0, [pc, #16]	; 10d1c <rb_epoll_init_event+0xc8>
   10d08:	add	r0, pc, r0
   10d0c:	str	r5, [r0]
   10d10:	sub	sp, fp, #8
   10d14:	pop	{r4, r5, fp, pc}
   10d18:	.word	0x0003468c
   10d1c:	.word	0x000345e8
   10d20:	.word	0x00005a38

00010d24 <signalfd_handler>:
   10d24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10d28:	add	fp, sp, #24
   10d2c:	mov	r4, r0
   10d30:	mov	r0, #0
   10d34:	ldr	r1, [pc, #240]	; 10e2c <signalfd_handler+0x108>
   10d38:	add	r1, pc, r1
   10d3c:	ldr	r7, [pc, #236]	; 10e30 <signalfd_handler+0x10c>
   10d40:	add	r7, pc, r7
   10d44:	mov	r3, #128	; 0x80
   10d48:	mov	r2, r7
   10d4c:	str	r1, [r2, r0, lsl #3]!
   10d50:	str	r3, [r2, #4]
   10d54:	add	r1, r1, #128	; 0x80
   10d58:	add	r0, r0, #1
   10d5c:	cmp	r0, #16
   10d60:	bne	10d48 <signalfd_handler+0x24>
   10d64:	mov	r0, r4
   10d68:	bl	4e30 <rb_get_fd@plt>
   10d6c:	ldr	r1, [pc, #192]	; 10e34 <signalfd_handler+0x110>
   10d70:	add	r1, pc, r1
   10d74:	mov	r2, #16
   10d78:	bl	558c <readv@plt>
   10d7c:	cmp	r0, #0
   10d80:	beq	10e1c <signalfd_handler+0xf8>
   10d84:	ldr	r1, [pc, #172]	; 10e38 <signalfd_handler+0x114>
   10d88:	add	r1, pc, r1
   10d8c:	add	r5, r1, #48	; 0x30
   10d90:	ldr	r8, [pc, #164]	; 10e3c <signalfd_handler+0x118>
   10d94:	add	r8, pc, r8
   10d98:	cmp	r0, #0
   10d9c:	blt	10dec <signalfd_handler+0xc8>
   10da0:	cmp	r0, #128	; 0x80
   10da4:	blt	10dcc <signalfd_handler+0xa8>
   10da8:	lsr	r7, r0, #7
   10dac:	mov	r6, r5
   10db0:	ldr	r0, [r6]
   10db4:	cmp	r0, #0
   10db8:	beq	10dc0 <signalfd_handler+0x9c>
   10dbc:	bl	51cc <rb_run_one_event@plt>
   10dc0:	add	r6, r6, #128	; 0x80
   10dc4:	subs	r7, r7, #1
   10dc8:	bne	10db0 <signalfd_handler+0x8c>
   10dcc:	mov	r0, r4
   10dd0:	bl	4e30 <rb_get_fd@plt>
   10dd4:	mov	r1, r8
   10dd8:	mov	r2, #16
   10ddc:	bl	558c <readv@plt>
   10de0:	cmp	r0, #0
   10de4:	bne	10d98 <signalfd_handler+0x74>
   10de8:	b	10e1c <signalfd_handler+0xf8>
   10dec:	bl	5610 <__errno_location@plt>
   10df0:	ldr	r0, [r0]
   10df4:	bl	4d28 <rb_ignore_errno@plt>
   10df8:	cmp	r0, #0
   10dfc:	beq	10e1c <signalfd_handler+0xf8>
   10e00:	ldr	r2, [pc, #56]	; 10e40 <signalfd_handler+0x11c>
   10e04:	add	r2, pc, r2
   10e08:	mov	r0, r4
   10e0c:	mov	r1, #1
   10e10:	mov	r3, #0
   10e14:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   10e18:	b	4df4 <rb_setselect@plt>
   10e1c:	mov	r0, r4
   10e20:	bl	5190 <rb_close@plt>
   10e24:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   10e28:	b	10c54 <rb_epoll_init_event>
   10e2c:	.word	0x000345c8
   10e30:	.word	0x00034dc0
   10e34:	.word	0x00034d90
   10e38:	.word	0x00034578
   10e3c:	.word	0x00034d6c
   10e40:	.word	0xffffff18

00010e44 <rb_epoll_sched_event>:
   10e44:	ldr	r2, [pc, #20]	; 10e60 <rb_epoll_sched_event+0x1c>
   10e48:	add	r2, pc, r2
   10e4c:	ldrb	r2, [r2]
   10e50:	cmp	r2, #1
   10e54:	bne	10e5c <rb_epoll_sched_event+0x18>
   10e58:	b	10e64 <rb_epoll_sched_event_timerfd>
   10e5c:	b	10f98 <rb_epoll_sched_event_signalfd>
   10e60:	.word	0x000344ac

00010e64 <rb_epoll_sched_event_timerfd>:
   10e64:	push	{r4, r5, r6, r7, fp, lr}
   10e68:	add	fp, sp, #16
   10e6c:	sub	sp, sp, #16
   10e70:	mov	r7, r1
   10e74:	mov	r5, r0
   10e78:	mov	r4, #0
   10e7c:	mov	r0, #0
   10e80:	mov	r1, #0
   10e84:	bl	54e4 <timerfd_create@plt>
   10e88:	cmn	r0, #1
   10e8c:	ble	10f34 <rb_epoll_sched_event_timerfd+0xd0>
   10e90:	mov	r6, r0
   10e94:	str	r4, [sp]
   10e98:	stmib	sp, {r4, r7}
   10e9c:	str	r4, [sp, #12]
   10ea0:	ldr	r0, [r5, #24]
   10ea4:	cmp	r0, #0
   10ea8:	movne	r0, sp
   10eac:	addne	r0, r0, #8
   10eb0:	ldrdne	r0, [r0]
   10eb4:	stmne	sp, {r0, r1}
   10eb8:	mov	r2, sp
   10ebc:	mov	r4, #0
   10ec0:	mov	r0, r6
   10ec4:	mov	r1, #0
   10ec8:	mov	r3, #0
   10ecc:	bl	5568 <timerfd_settime@plt>
   10ed0:	cmn	r0, #1
   10ed4:	ble	10f54 <rb_epoll_sched_event_timerfd+0xf0>
   10ed8:	ldr	r3, [r5, #20]
   10edc:	ldr	r4, [pc, #168]	; 10f8c <rb_epoll_sched_event_timerfd+0x128>
   10ee0:	add	r4, pc, r4
   10ee4:	ldr	r2, [pc, #164]	; 10f90 <rb_epoll_sched_event_timerfd+0x12c>
   10ee8:	add	r2, pc, r2
   10eec:	mov	r0, r4
   10ef0:	mov	r1, #136	; 0x88
   10ef4:	bl	54cc <snprintf@plt>
   10ef8:	mov	r0, r6
   10efc:	mov	r1, #64	; 0x40
   10f00:	mov	r2, r4
   10f04:	bl	53a0 <rb_open@plt>
   10f08:	mov	r6, r0
   10f0c:	bl	4f5c <rb_set_nb@plt>
   10f10:	str	r6, [r5, #40]	; 0x28
   10f14:	mov	r4, #1
   10f18:	ldr	r2, [pc, #116]	; 10f94 <rb_epoll_sched_event_timerfd+0x130>
   10f1c:	add	r2, pc, r2
   10f20:	mov	r0, r6
   10f24:	mov	r1, #1
   10f28:	mov	r3, r5
   10f2c:	bl	4df4 <rb_setselect@plt>
   10f30:	b	10f78 <rb_epoll_sched_event_timerfd+0x114>
   10f34:	bl	5610 <__errno_location@plt>
   10f38:	ldr	r0, [r0]
   10f3c:	bl	4cec <strerror@plt>
   10f40:	mov	r1, r0
   10f44:	ldr	r0, [pc, #56]	; 10f84 <rb_epoll_sched_event_timerfd+0x120>
   10f48:	add	r0, pc, r0
   10f4c:	bl	5244 <rb_lib_log@plt>
   10f50:	b	10f78 <rb_epoll_sched_event_timerfd+0x114>
   10f54:	bl	5610 <__errno_location@plt>
   10f58:	ldr	r0, [r0]
   10f5c:	bl	4cec <strerror@plt>
   10f60:	mov	r1, r0
   10f64:	ldr	r0, [pc, #28]	; 10f88 <rb_epoll_sched_event_timerfd+0x124>
   10f68:	add	r0, pc, r0
   10f6c:	bl	5244 <rb_lib_log@plt>
   10f70:	mov	r0, r6
   10f74:	bl	5268 <close@plt>
   10f78:	mov	r0, r4
   10f7c:	sub	sp, fp, #16
   10f80:	pop	{r4, r5, r6, r7, fp, pc}
   10f84:	.word	0x000057d5
   10f88:	.word	0x000057c9
   10f8c:	.word	0x00034ca0
   10f90:	.word	0x0000585e
   10f94:	.word	0x000001d8

00010f98 <rb_epoll_sched_event_signalfd>:
   10f98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10f9c:	add	fp, sp, #24
   10fa0:	sub	sp, sp, #80	; 0x50
   10fa4:	mov	r8, r1
   10fa8:	mov	r5, r0
   10fac:	vmov.i32	q8, #0	; 0x00000000
   10fb0:	add	r6, sp, #16
   10fb4:	add	r0, r6, #44	; 0x2c
   10fb8:	vst1.32	{d16-d17}, [r0]
   10fbc:	add	r0, r6, #28
   10fc0:	vst1.32	{d16-d17}, [r0]
   10fc4:	add	r0, r6, #12
   10fc8:	vst1.32	{d16-d17}, [r0]
   10fcc:	mov	r4, #0
   10fd0:	str	r4, [sp, #76]	; 0x4c
   10fd4:	mov	r0, #4
   10fd8:	bl	10854 <rb_malloc>
   10fdc:	mov	r7, r0
   10fe0:	str	r0, [r5, #40]	; 0x28
   10fe4:	str	r4, [sp, #24]
   10fe8:	bl	4dd0 <__libc_current_sigrtmin@plt>
   10fec:	str	r0, [sp, #20]
   10ff0:	str	r5, [sp, #16]
   10ff4:	mov	r0, #0
   10ff8:	mov	r1, r6
   10ffc:	mov	r2, r7
   11000:	bl	4e78 <timer_create@plt>
   11004:	cmn	r0, #1
   11008:	ble	11074 <rb_epoll_sched_event_signalfd+0xdc>
   1100c:	str	r4, [sp]
   11010:	stmib	sp, {r4, r8}
   11014:	str	r4, [sp, #12]
   11018:	ldr	r0, [r5, #24]
   1101c:	cmp	r0, #0
   11020:	movne	r0, sp
   11024:	addne	r0, r0, #8
   11028:	ldrdne	r0, [r0]
   1102c:	stmne	sp, {r0, r1}
   11030:	ldr	r0, [r7]
   11034:	mov	r2, sp
   11038:	mov	r1, #0
   1103c:	mov	r3, #0
   11040:	bl	507c <timer_settime@plt>
   11044:	mov	r4, #1
   11048:	cmn	r0, #1
   1104c:	bgt	11090 <rb_epoll_sched_event_signalfd+0xf8>
   11050:	bl	5610 <__errno_location@plt>
   11054:	ldr	r0, [r0]
   11058:	bl	4cec <strerror@plt>
   1105c:	mov	r1, r0
   11060:	ldr	r0, [pc, #56]	; 110a0 <rb_epoll_sched_event_signalfd+0x108>
   11064:	add	r0, pc, r0
   11068:	bl	5244 <rb_lib_log@plt>
   1106c:	mov	r4, #0
   11070:	b	11090 <rb_epoll_sched_event_signalfd+0xf8>
   11074:	bl	5610 <__errno_location@plt>
   11078:	ldr	r0, [r0]
   1107c:	bl	4cec <strerror@plt>
   11080:	mov	r1, r0
   11084:	ldr	r0, [pc, #16]	; 1109c <rb_epoll_sched_event_signalfd+0x104>
   11088:	add	r0, pc, r0
   1108c:	bl	5244 <rb_lib_log@plt>
   11090:	mov	r0, r4
   11094:	sub	sp, fp, #24
   11098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1109c:	.word	0x000056fb
   110a0:	.word	0x00005731

000110a4 <rb_epoll_unsched_event>:
   110a4:	push	{r4, sl, fp, lr}
   110a8:	add	fp, sp, #8
   110ac:	mov	r4, r0
   110b0:	ldr	r0, [r0, #40]	; 0x28
   110b4:	ldr	r1, [pc, #48]	; 110ec <rb_epoll_unsched_event+0x48>
   110b8:	add	r1, pc, r1
   110bc:	ldrb	r1, [r1]
   110c0:	cmp	r1, #1
   110c4:	bne	110d0 <rb_epoll_unsched_event+0x2c>
   110c8:	bl	5190 <rb_close@plt>
   110cc:	b	110e0 <rb_epoll_unsched_event+0x3c>
   110d0:	ldr	r0, [r0]
   110d4:	bl	5394 <timer_delete@plt>
   110d8:	ldr	r0, [r4, #40]	; 0x28
   110dc:	bl	110f0 <rb_free>
   110e0:	mov	r0, #0
   110e4:	str	r0, [r4, #40]	; 0x28
   110e8:	pop	{r4, sl, fp, pc}
   110ec:	.word	0x0003423c

000110f0 <rb_free>:
   110f0:	cmp	r0, #0
   110f4:	bxeq	lr
   110f8:	b	501c <free@plt>

000110fc <rb_read_timerfd>:
   110fc:	push	{r4, r5, fp, lr}
   11100:	add	fp, sp, #8
   11104:	sub	sp, sp, #8
   11108:	mov	r5, r0
   1110c:	cmp	r1, #0
   11110:	beq	11174 <rb_read_timerfd+0x78>
   11114:	mov	r4, r1
   11118:	mov	r1, sp
   1111c:	mov	r0, r5
   11120:	mov	r2, #8
   11124:	bl	50ac <rb_read@plt>
   11128:	cmp	r0, #0
   1112c:	beq	11184 <rb_read_timerfd+0x88>
   11130:	cmn	r0, #1
   11134:	bgt	1114c <rb_read_timerfd+0x50>
   11138:	bl	5610 <__errno_location@plt>
   1113c:	ldr	r0, [r0]
   11140:	bl	4d28 <rb_ignore_errno@plt>
   11144:	cmp	r0, #0
   11148:	beq	11184 <rb_read_timerfd+0x88>
   1114c:	ldr	r2, [pc, #104]	; 111bc <rb_read_timerfd+0xc0>
   11150:	add	r2, pc, r2
   11154:	mov	r0, r5
   11158:	mov	r1, #1
   1115c:	mov	r3, r4
   11160:	bl	4df4 <rb_setselect@plt>
   11164:	mov	r0, r4
   11168:	bl	51cc <rb_run_one_event@plt>
   1116c:	sub	sp, fp, #8
   11170:	pop	{r4, r5, fp, pc}
   11174:	mov	r0, r5
   11178:	bl	5190 <rb_close@plt>
   1117c:	sub	sp, fp, #8
   11180:	pop	{r4, r5, fp, pc}
   11184:	mov	r0, r5
   11188:	bl	5190 <rb_close@plt>
   1118c:	ldr	r4, [r4, #20]
   11190:	bl	5610 <__errno_location@plt>
   11194:	ldr	r0, [r0]
   11198:	bl	4cec <strerror@plt>
   1119c:	mov	r2, r0
   111a0:	ldr	r0, [pc, #16]	; 111b8 <rb_read_timerfd+0xbc>
   111a4:	add	r0, pc, r0
   111a8:	mov	r1, r4
   111ac:	bl	5244 <rb_lib_log@plt>
   111b0:	sub	sp, fp, #8
   111b4:	pop	{r4, r5, fp, pc}
   111b8:	.word	0x000055ae
   111bc:	.word	0xffffffa4

000111c0 <rb_setup_fd_poll>:
   111c0:	mov	r0, #0
   111c4:	bx	lr

000111c8 <rb_init_netio_poll>:
   111c8:	push	{r4, r5, fp, lr}
   111cc:	add	fp, sp, #8
   111d0:	bl	4db8 <rb_getmaxconnect@plt>
   111d4:	lsl	r0, r0, #3
   111d8:	bl	11250 <rb_malloc>
   111dc:	ldr	r1, [pc, #92]	; 11240 <rb_init_netio_poll+0x78>
   111e0:	add	r1, pc, r1
   111e4:	str	r0, [r1]
   111e8:	bl	4db8 <rb_getmaxconnect@plt>
   111ec:	ldr	r1, [pc, #80]	; 11244 <rb_init_netio_poll+0x7c>
   111f0:	add	r1, pc, r1
   111f4:	str	r0, [r1]
   111f8:	bl	4db8 <rb_getmaxconnect@plt>
   111fc:	cmp	r0, #1
   11200:	blt	11228 <rb_init_netio_poll+0x60>
   11204:	mov	r4, #0
   11208:	mvn	r5, #0
   1120c:	ldr	r0, [pc, #52]	; 11248 <rb_init_netio_poll+0x80>
   11210:	ldr	r0, [pc, r0]
   11214:	str	r5, [r0, r4, lsl #3]
   11218:	add	r4, r4, #1
   1121c:	bl	4db8 <rb_getmaxconnect@plt>
   11220:	cmp	r4, r0
   11224:	blt	1120c <rb_init_netio_poll+0x44>
   11228:	ldr	r0, [pc, #28]	; 1124c <rb_init_netio_poll+0x84>
   1122c:	add	r0, pc, r0
   11230:	mov	r1, #0
   11234:	str	r1, [r0]
   11238:	mov	r0, #0
   1123c:	pop	{r4, r5, fp, pc}
   11240:	.word	0x00034a28
   11244:	.word	0x00034a20
   11248:	.word	0x000349f8
   1124c:	.word	0x000349e0

00011250 <rb_malloc>:
   11250:	push	{fp, lr}
   11254:	mov	fp, sp
   11258:	mov	r1, r0
   1125c:	mov	r0, #1
   11260:	bl	4f2c <calloc@plt>
   11264:	cmp	r0, #0
   11268:	popne	{fp, pc}
   1126c:	bl	52a4 <rb_outofmemory@plt>

00011270 <rb_setselect_poll>:
   11270:	push	{r4, sl, fp, lr}
   11274:	add	fp, sp, #8
   11278:	cmp	r0, #0
   1127c:	beq	11370 <rb_setselect_poll+0x100>
   11280:	mov	r4, r0
   11284:	tst	r1, #1
   11288:	beq	112a8 <rb_setselect_poll+0x38>
   1128c:	str	r2, [r4, #28]
   11290:	str	r3, [r4, #32]
   11294:	ldr	ip, [r4, #20]
   11298:	orr	r0, ip, #64	; 0x40
   1129c:	cmp	r2, #0
   112a0:	biceq	r0, ip, #64	; 0x40
   112a4:	str	r0, [r4, #20]
   112a8:	tst	r1, #2
   112ac:	beq	112cc <rb_setselect_poll+0x5c>
   112b0:	str	r2, [r4, #36]	; 0x24
   112b4:	str	r3, [r4, #40]	; 0x28
   112b8:	ldr	r0, [r4, #20]
   112bc:	orr	r1, r0, #256	; 0x100
   112c0:	cmp	r2, #0
   112c4:	biceq	r1, r0, #256	; 0x100
   112c8:	str	r1, [r4, #20]
   112cc:	ldr	r0, [r4, #12]
   112d0:	bl	1138c <resize_pollarray>
   112d4:	ldr	r1, [r4, #20]
   112d8:	cmp	r1, #0
   112dc:	ble	11310 <rb_setselect_poll+0xa0>
   112e0:	ldr	r0, [r4, #12]
   112e4:	ldr	r2, [pc, #148]	; 11380 <rb_setselect_poll+0x110>
   112e8:	ldr	r2, [pc, r2]
   112ec:	str	r0, [r2, r0, lsl #3]!
   112f0:	strh	r1, [r2, #4]
   112f4:	ldr	r1, [pc, #136]	; 11384 <rb_setselect_poll+0x114>
   112f8:	ldr	r1, [pc, r1]
   112fc:	cmp	r0, r1
   11300:	ldrgt	r1, [pc, #128]	; 11388 <rb_setselect_poll+0x118>
   11304:	addgt	r1, pc, r1
   11308:	strgt	r0, [r1]
   1130c:	pop	{r4, sl, fp, pc}
   11310:	ldr	r2, [r4, #12]
   11314:	ldr	r0, [pc, #88]	; 11374 <rb_setselect_poll+0x104>
   11318:	ldr	r0, [pc, r0]
   1131c:	mvn	r1, #0
   11320:	mov	r3, r0
   11324:	str	r1, [r3, r2, lsl #3]!
   11328:	mov	r1, #0
   1132c:	strh	r1, [r3, #4]
   11330:	ldr	r1, [pc, #64]	; 11378 <rb_setselect_poll+0x108>
   11334:	ldr	r1, [pc, r1]
   11338:	cmp	r2, r1
   1133c:	bne	11370 <rb_setselect_poll+0x100>
   11340:	cmp	r1, #0
   11344:	blt	11370 <rb_setselect_poll+0x100>
   11348:	ldr	r2, [pc, #44]	; 1137c <rb_setselect_poll+0x10c>
   1134c:	add	r2, pc, r2
   11350:	ldr	r3, [r0, r1, lsl #3]
   11354:	cmn	r3, #1
   11358:	popne	{r4, sl, fp, pc}
   1135c:	sub	r3, r1, #1
   11360:	str	r3, [r2]
   11364:	cmp	r1, #0
   11368:	mov	r1, r3
   1136c:	bgt	11350 <rb_setselect_poll+0xe0>
   11370:	pop	{r4, sl, fp, pc}
   11374:	.word	0x000348f0
   11378:	.word	0x000348d8
   1137c:	.word	0x000348c0
   11380:	.word	0x00034920
   11384:	.word	0x00034914
   11388:	.word	0x00034908

0001138c <resize_pollarray>:
   1138c:	push	{r4, sl, fp, lr}
   11390:	add	fp, sp, #8
   11394:	ldr	r4, [pc, #132]	; 11420 <resize_pollarray+0x94>
   11398:	ldr	r4, [pc, r4]
   1139c:	cmp	r4, r0
   113a0:	ble	113a8 <resize_pollarray+0x1c>
   113a4:	pop	{r4, sl, fp, pc}
   113a8:	add	r1, r4, #1024	; 0x400
   113ac:	ldr	r0, [pc, #112]	; 11424 <resize_pollarray+0x98>
   113b0:	add	r0, pc, r0
   113b4:	str	r1, [r0]
   113b8:	ldr	r0, [pc, #104]	; 11428 <resize_pollarray+0x9c>
   113bc:	ldr	r0, [pc, r0]
   113c0:	lsl	r1, r1, #3
   113c4:	bl	1161c <rb_realloc>
   113c8:	ldr	r1, [pc, #92]	; 1142c <resize_pollarray+0xa0>
   113cc:	add	r1, pc, r1
   113d0:	str	r0, [r1]
   113d4:	add	r4, r4, #1
   113d8:	add	r0, r0, r4, lsl #3
   113dc:	mov	r1, #0
   113e0:	mov	r2, #8192	; 0x2000
   113e4:	bl	4f68 <memset@plt>
   113e8:	ldr	r0, [pc, #64]	; 11430 <resize_pollarray+0xa4>
   113ec:	ldr	r0, [pc, r0]
   113f0:	cmp	r4, r0
   113f4:	popge	{r4, sl, fp, pc}
   113f8:	ldr	r0, [pc, #52]	; 11434 <resize_pollarray+0xa8>
   113fc:	ldr	r0, [pc, r0]
   11400:	ldr	r1, [pc, #48]	; 11438 <resize_pollarray+0xac>
   11404:	ldr	r1, [pc, r1]
   11408:	mvn	r2, #0
   1140c:	str	r2, [r1, r4, lsl #3]
   11410:	add	r4, r4, #1
   11414:	cmp	r4, r0
   11418:	blt	1140c <resize_pollarray+0x80>
   1141c:	b	113a4 <resize_pollarray+0x18>
   11420:	.word	0x00034878
   11424:	.word	0x00034860
   11428:	.word	0x0003484c
   1142c:	.word	0x0003483c
   11430:	.word	0x00034824
   11434:	.word	0x00034814
   11438:	.word	0x00034804

0001143c <rb_select_poll>:
   1143c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11440:	add	fp, sp, #24
   11444:	mov	r2, r0
   11448:	ldr	r0, [pc, #336]	; 115a0 <rb_select_poll+0x164>
   1144c:	ldr	r0, [pc, r0]
   11450:	ldr	r1, [pc, #332]	; 115a4 <rb_select_poll+0x168>
   11454:	ldr	r1, [pc, r1]
   11458:	add	r1, r1, #1
   1145c:	bl	531c <poll@plt>
   11460:	mov	r4, r0
   11464:	bl	52b0 <rb_set_time@plt>
   11468:	cmn	r4, #1
   1146c:	ble	11588 <rb_select_poll+0x14c>
   11470:	mov	r0, #0
   11474:	cmp	r4, #0
   11478:	beq	11584 <rb_select_poll+0x148>
   1147c:	ldr	r1, [pc, #292]	; 115a8 <rb_select_poll+0x16c>
   11480:	ldr	r1, [pc, r1]
   11484:	cmp	r1, #0
   11488:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   1148c:	mvn	r5, #0
   11490:	mov	r8, #0
   11494:	mov	r7, #0
   11498:	b	1154c <rb_select_poll+0x110>
   1149c:	bl	115b4 <rb_find_fd>
   114a0:	cmp	r0, #0
   114a4:	beq	11568 <rb_select_poll+0x12c>
   114a8:	mov	r4, r0
   114ac:	tst	r6, #89	; 0x59
   114b0:	beq	114d4 <rb_select_poll+0x98>
   114b4:	ldr	r2, [r4, #28]
   114b8:	ldr	r1, [r4, #32]
   114bc:	str	r8, [r4, #28]
   114c0:	str	r8, [r4, #32]
   114c4:	cmp	r2, #0
   114c8:	beq	114d4 <rb_select_poll+0x98>
   114cc:	mov	r0, r4
   114d0:	blx	r2
   114d4:	tst	r6, #284	; 0x11c
   114d8:	ldrbne	r0, [r4, #16]
   114dc:	andsne	r0, r0, #1
   114e0:	bne	11528 <rb_select_poll+0xec>
   114e4:	ldr	r0, [r4, #28]
   114e8:	cmp	r0, #0
   114ec:	bne	11504 <rb_select_poll+0xc8>
   114f0:	mov	r0, r4
   114f4:	mov	r1, #1
   114f8:	mov	r2, #0
   114fc:	mov	r3, #0
   11500:	bl	11270 <rb_setselect_poll>
   11504:	ldr	r0, [r4, #36]	; 0x24
   11508:	cmp	r0, #0
   1150c:	bne	11568 <rb_select_poll+0x12c>
   11510:	mov	r0, r4
   11514:	mov	r1, #2
   11518:	mov	r2, #0
   1151c:	mov	r3, #0
   11520:	bl	11270 <rb_setselect_poll>
   11524:	b	11568 <rb_select_poll+0x12c>
   11528:	ldr	r2, [r4, #36]	; 0x24
   1152c:	ldr	r1, [r4, #40]	; 0x28
   11530:	str	r8, [r4, #36]	; 0x24
   11534:	str	r8, [r4, #40]	; 0x28
   11538:	cmp	r2, #0
   1153c:	beq	114e4 <rb_select_poll+0xa8>
   11540:	mov	r0, r4
   11544:	blx	r2
   11548:	b	114e4 <rb_select_poll+0xa8>
   1154c:	ldr	r1, [pc, #88]	; 115ac <rb_select_poll+0x170>
   11550:	ldr	r1, [pc, r1]
   11554:	ldr	r0, [r1, r7]!
   11558:	ldrsh	r6, [r1, #6]
   1155c:	cmp	r6, #0
   11560:	cmnne	r0, #1
   11564:	bne	1149c <rb_select_poll+0x60>
   11568:	add	r7, r7, #8
   1156c:	add	r5, r5, #1
   11570:	ldr	r0, [pc, #56]	; 115b0 <rb_select_poll+0x174>
   11574:	ldr	r0, [pc, r0]
   11578:	cmp	r5, r0
   1157c:	blt	1154c <rb_select_poll+0x110>
   11580:	mov	r0, #0
   11584:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11588:	bl	5610 <__errno_location@plt>
   1158c:	ldr	r0, [r0]
   11590:	bl	4d28 <rb_ignore_errno@plt>
   11594:	cmp	r0, #0
   11598:	movwne	r0, #5
   1159c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   115a0:	.word	0x000347bc
   115a4:	.word	0x000347b8
   115a8:	.word	0x0003478c
   115ac:	.word	0x000346b8
   115b0:	.word	0x00034698

000115b4 <rb_find_fd>:
   115b4:	cmp	r0, #0
   115b8:	blt	1160c <rb_find_fd+0x58>
   115bc:	eor	r1, r0, r0, lsr #12
   115c0:	bfc	r1, #12, #20
   115c4:	eor	r1, r1, r0, lsr #24
   115c8:	add	r1, r1, r1, lsl #1
   115cc:	ldr	r2, [pc, #68]	; 11618 <rb_find_fd+0x64>
   115d0:	ldr	r2, [pc, r2]
   115d4:	ldr	r2, [r2]
   115d8:	ldr	r2, [r2, r1, lsl #2]
   115dc:	cmp	r2, #0
   115e0:	bne	115f4 <rb_find_fd+0x40>
   115e4:	b	1160c <rb_find_fd+0x58>
   115e8:	ldr	r2, [r2, #8]
   115ec:	cmp	r2, #0
   115f0:	beq	1160c <rb_find_fd+0x58>
   115f4:	ldr	r1, [r2]
   115f8:	ldr	r3, [r1, #12]
   115fc:	cmp	r3, r0
   11600:	bne	115e8 <rb_find_fd+0x34>
   11604:	mov	r0, r1
   11608:	bx	lr
   1160c:	mov	r1, #0
   11610:	mov	r0, r1
   11614:	bx	lr
   11618:	.word	0x00016dd8

0001161c <rb_realloc>:
   1161c:	push	{fp, lr}
   11620:	mov	fp, sp
   11624:	bl	555c <realloc@plt>
   11628:	cmp	r0, #0
   1162c:	popne	{fp, pc}
   11630:	bl	52a4 <rb_outofmemory@plt>

00011634 <rb_ports_supports_event>:
   11634:	push	{fp, lr}
   11638:	mov	fp, sp
   1163c:	bl	5610 <__errno_location@plt>
   11640:	mov	r1, #38	; 0x26
   11644:	str	r1, [r0]
   11648:	mov	r0, #0
   1164c:	pop	{fp, pc}

00011650 <rb_ports_init_event>:
   11650:	bx	lr

00011654 <rb_ports_sched_event>:
   11654:	push	{fp, lr}
   11658:	mov	fp, sp
   1165c:	bl	5610 <__errno_location@plt>
   11660:	mov	r1, #38	; 0x26
   11664:	str	r1, [r0]
   11668:	mvn	r0, #0
   1166c:	pop	{fp, pc}

00011670 <rb_ports_unsched_event>:
   11670:	bx	lr

00011674 <rb_init_netio_ports>:
   11674:	mov	r0, #38	; 0x26
   11678:	bx	lr

0001167c <rb_setselect_ports>:
   1167c:	push	{fp, lr}
   11680:	mov	fp, sp
   11684:	bl	5610 <__errno_location@plt>
   11688:	mov	r1, #38	; 0x26
   1168c:	str	r1, [r0]
   11690:	pop	{fp, pc}

00011694 <rb_select_ports>:
   11694:	push	{fp, lr}
   11698:	mov	fp, sp
   1169c:	bl	5610 <__errno_location@plt>
   116a0:	mov	r1, #38	; 0x26
   116a4:	str	r1, [r0]
   116a8:	mvn	r0, #0
   116ac:	pop	{fp, pc}

000116b0 <rb_setup_fd_ports>:
   116b0:	push	{fp, lr}
   116b4:	mov	fp, sp
   116b8:	bl	5610 <__errno_location@plt>
   116bc:	mov	r1, #38	; 0x26
   116c0:	str	r1, [r0]
   116c4:	mvn	r0, #0
   116c8:	pop	{fp, pc}

000116cc <rb_init_netio_sigio>:
   116cc:	push	{r4, r5, r6, sl, fp, lr}
   116d0:	add	fp, sp, #16
   116d4:	bl	4db8 <rb_getmaxconnect@plt>
   116d8:	lsl	r0, r0, #3
   116dc:	bl	11798 <rb_malloc>
   116e0:	ldr	r4, [pc, #164]	; 1178c <rb_init_netio_sigio+0xc0>
   116e4:	ldr	r4, [pc, r4]
   116e8:	str	r0, [r4]
   116ec:	bl	4db8 <rb_getmaxconnect@plt>
   116f0:	str	r0, [r4, #8]
   116f4:	bl	4db8 <rb_getmaxconnect@plt>
   116f8:	cmp	r0, #1
   116fc:	blt	11720 <rb_init_netio_sigio+0x54>
   11700:	mov	r5, #0
   11704:	mvn	r6, #0
   11708:	ldr	r0, [r4]
   1170c:	str	r6, [r0, r5, lsl #3]
   11710:	add	r5, r5, #1
   11714:	bl	4db8 <rb_getmaxconnect@plt>
   11718:	cmp	r5, r0
   1171c:	blt	11708 <rb_init_netio_sigio+0x3c>
   11720:	ldr	r0, [pc, #104]	; 11790 <rb_init_netio_sigio+0xc4>
   11724:	add	r0, pc, r0
   11728:	mov	r1, #1
   1172c:	strb	r1, [r0]
   11730:	mov	r0, #0
   11734:	str	r0, [r4, #4]
   11738:	ldr	r4, [pc, #84]	; 11794 <rb_init_netio_sigio+0xc8>
   1173c:	add	r4, pc, r4
   11740:	mov	r0, r4
   11744:	bl	4ce0 <sigemptyset@plt>
   11748:	bl	4dd0 <__libc_current_sigrtmin@plt>
   1174c:	mov	r1, r0
   11750:	mov	r0, r4
   11754:	bl	51a8 <sigaddset@plt>
   11758:	mov	r0, r4
   1175c:	mov	r1, #29
   11760:	bl	51a8 <sigaddset@plt>
   11764:	bl	4dd0 <__libc_current_sigrtmin@plt>
   11768:	add	r1, r0, #1
   1176c:	mov	r0, r4
   11770:	bl	51a8 <sigaddset@plt>
   11774:	mov	r0, #0
   11778:	mov	r1, r4
   1177c:	mov	r2, #0
   11780:	bl	52d4 <sigprocmask@plt>
   11784:	mov	r0, #0
   11788:	pop	{r4, r5, r6, sl, fp, pc}
   1178c:	.word	0x00016cd4
   11790:	.word	0x000344f0
   11794:	.word	0x000344dc

00011798 <rb_malloc>:
   11798:	push	{fp, lr}
   1179c:	mov	fp, sp
   117a0:	mov	r1, r0
   117a4:	mov	r0, #1
   117a8:	bl	4f2c <calloc@plt>
   117ac:	cmp	r0, #0
   117b0:	popne	{fp, pc}
   117b4:	bl	52a4 <rb_outofmemory@plt>

000117b8 <rb_setup_fd_sigio>:
   117b8:	push	{r4, r5, r6, sl, fp, lr}
   117bc:	add	fp, sp, #16
   117c0:	ldr	r5, [r0, #12]
   117c4:	mov	r4, #0
   117c8:	mov	r0, r5
   117cc:	mov	r1, #3
   117d0:	mov	r2, #0
   117d4:	bl	5520 <fcntl@plt>
   117d8:	cmn	r0, #1
   117dc:	beq	11854 <rb_setup_fd_sigio+0x9c>
   117e0:	mov	r6, r0
   117e4:	tst	r0, #8192	; 0x2000
   117e8:	beq	11800 <rb_setup_fd_sigio+0x48>
   117ec:	bic	r6, r6, #8192	; 0x2000
   117f0:	mov	r0, r5
   117f4:	mov	r1, #4
   117f8:	mov	r2, r6
   117fc:	bl	5520 <fcntl@plt>
   11800:	orr	r2, r6, #10240	; 0x2800
   11804:	mov	r0, r5
   11808:	mov	r1, #4
   1180c:	bl	5520 <fcntl@plt>
   11810:	cmn	r0, #1
   11814:	beq	11854 <rb_setup_fd_sigio+0x9c>
   11818:	bl	4dd0 <__libc_current_sigrtmin@plt>
   1181c:	mov	r2, r0
   11820:	mov	r0, r5
   11824:	mov	r1, #10
   11828:	bl	5520 <fcntl@plt>
   1182c:	cmn	r0, #1
   11830:	beq	11854 <rb_setup_fd_sigio+0x9c>
   11834:	bl	53e8 <getpid@plt>
   11838:	mov	r2, r0
   1183c:	mov	r0, r5
   11840:	mov	r1, #8
   11844:	bl	5520 <fcntl@plt>
   11848:	add	r4, r0, #1
   1184c:	cmn	r0, #1
   11850:	movwne	r4, #1
   11854:	mov	r0, r4
   11858:	pop	{r4, r5, r6, sl, fp, pc}

0001185c <rb_setselect_sigio>:
   1185c:	push	{r4, sl, fp, lr}
   11860:	add	fp, sp, #8
   11864:	cmp	r0, #0
   11868:	beq	1194c <rb_setselect_sigio+0xf0>
   1186c:	mov	r4, r0
   11870:	tst	r1, #1
   11874:	beq	11894 <rb_setselect_sigio+0x38>
   11878:	str	r2, [r4, #28]
   1187c:	str	r3, [r4, #32]
   11880:	ldr	ip, [r4, #20]
   11884:	orr	r0, ip, #64	; 0x40
   11888:	cmp	r2, #0
   1188c:	biceq	r0, ip, #64	; 0x40
   11890:	str	r0, [r4, #20]
   11894:	tst	r1, #2
   11898:	beq	118b8 <rb_setselect_sigio+0x5c>
   1189c:	str	r2, [r4, #36]	; 0x24
   118a0:	str	r3, [r4, #40]	; 0x28
   118a4:	ldr	r0, [r4, #20]
   118a8:	orr	r1, r0, #256	; 0x100
   118ac:	cmp	r2, #0
   118b0:	biceq	r1, r0, #256	; 0x100
   118b4:	str	r1, [r4, #20]
   118b8:	ldr	r0, [r4, #12]
   118bc:	bl	11958 <resize_pollarray>
   118c0:	ldr	r1, [r4, #20]
   118c4:	cmp	r1, #0
   118c8:	ble	118f4 <rb_setselect_sigio+0x98>
   118cc:	ldr	r0, [r4, #12]
   118d0:	ldr	r2, [pc, #124]	; 11954 <rb_setselect_sigio+0xf8>
   118d4:	ldr	r2, [pc, r2]
   118d8:	ldr	r3, [r2]
   118dc:	str	r0, [r3, r0, lsl #3]!
   118e0:	strh	r1, [r3, #4]
   118e4:	ldr	r1, [r2, #4]
   118e8:	cmp	r0, r1
   118ec:	strgt	r0, [r2, #4]
   118f0:	pop	{r4, sl, fp, pc}
   118f4:	ldr	r3, [r4, #12]
   118f8:	ldr	r0, [pc, #80]	; 11950 <rb_setselect_sigio+0xf4>
   118fc:	ldr	r0, [pc, r0]
   11900:	ldr	r1, [r0]
   11904:	mvn	r2, #0
   11908:	mov	r4, r1
   1190c:	str	r2, [r4, r3, lsl #3]!
   11910:	mov	r2, #0
   11914:	strh	r2, [r4, #4]
   11918:	ldr	r2, [r0, #4]
   1191c:	cmp	r3, r2
   11920:	bne	1194c <rb_setselect_sigio+0xf0>
   11924:	cmp	r2, #0
   11928:	blt	1194c <rb_setselect_sigio+0xf0>
   1192c:	ldr	r3, [r1, r2, lsl #3]
   11930:	cmn	r3, #1
   11934:	popne	{r4, sl, fp, pc}
   11938:	sub	r3, r2, #1
   1193c:	str	r3, [r0, #4]
   11940:	cmp	r2, #0
   11944:	mov	r2, r3
   11948:	bgt	1192c <rb_setselect_sigio+0xd0>
   1194c:	pop	{r4, sl, fp, pc}
   11950:	.word	0x00016abc
   11954:	.word	0x00016ae4

00011958 <resize_pollarray>:
   11958:	push	{r4, r5, fp, lr}
   1195c:	add	fp, sp, #8
   11960:	ldr	r4, [pc, #104]	; 119d0 <resize_pollarray+0x78>
   11964:	ldr	r4, [pc, r4]
   11968:	ldr	r5, [r4, #8]
   1196c:	cmp	r5, r0
   11970:	ble	11978 <resize_pollarray+0x20>
   11974:	pop	{r4, r5, fp, pc}
   11978:	add	r1, r5, #1024	; 0x400
   1197c:	str	r1, [r4, #8]
   11980:	ldr	r0, [r4]
   11984:	lsl	r1, r1, #3
   11988:	bl	11fbc <rb_realloc>
   1198c:	str	r0, [r4]
   11990:	add	r5, r5, #1
   11994:	add	r0, r0, r5, lsl #3
   11998:	mov	r1, #0
   1199c:	mov	r2, #8192	; 0x2000
   119a0:	bl	4f68 <memset@plt>
   119a4:	ldr	r0, [r4, #8]
   119a8:	cmp	r5, r0
   119ac:	popge	{r4, r5, fp, pc}
   119b0:	ldr	r0, [r4]
   119b4:	ldr	r1, [r4, #8]
   119b8:	mvn	r2, #0
   119bc:	str	r2, [r0, r5, lsl #3]
   119c0:	add	r5, r5, #1
   119c4:	cmp	r5, r1
   119c8:	blt	119bc <resize_pollarray+0x64>
   119cc:	b	11974 <resize_pollarray+0x1c>
   119d0:	.word	0x00016a54

000119d4 <rb_select_sigio>:
   119d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d8:	add	fp, sp, #28
   119dc:	sub	sp, sp, #140	; 0x8c
   119e0:	mov	sl, r0
   119e4:	bl	11d48 <rb_sigio_supports_event>
   119e8:	cmn	sl, #1
   119ec:	bgt	119f8 <rb_select_sigio+0x24>
   119f0:	cmp	r0, #0
   119f4:	beq	11a28 <rb_select_sigio+0x54>
   119f8:	movw	r0, #19923	; 0x4dd3
   119fc:	movt	r0, #4194	; 0x1062
   11a00:	smmul	r0, sl, r0
   11a04:	asr	r1, r0, #6
   11a08:	add	r0, r1, r0, lsr #31
   11a0c:	str	r0, [sp, #4]
   11a10:	mov	r1, #1000	; 0x3e8
   11a14:	mls	r0, r0, r1, sl
   11a18:	movw	r1, #16960	; 0x4240
   11a1c:	movt	r1, #15
   11a20:	mul	r0, r0, r1
   11a24:	str	r0, [sp, #8]
   11a28:	ldr	r9, [pc, #764]	; 11d2c <rb_select_sigio+0x358>
   11a2c:	add	r9, pc, r9
   11a30:	ldrb	r0, [r9]
   11a34:	cmp	r0, #0
   11a38:	bne	11bb4 <rb_select_sigio+0x1e0>
   11a3c:	ldr	r4, [pc, #748]	; 11d30 <rb_select_sigio+0x35c>
   11a40:	add	r4, pc, r4
   11a44:	add	r6, sp, #12
   11a48:	add	r8, sp, #4
   11a4c:	str	sl, [sp]
   11a50:	cmp	sl, #0
   11a54:	blt	11a7c <rb_select_sigio+0xa8>
   11a58:	ldr	r0, [pc, #724]	; 11d34 <rb_select_sigio+0x360>
   11a5c:	ldr	r0, [pc, r0]
   11a60:	cmp	r0, #0
   11a64:	bne	11a7c <rb_select_sigio+0xa8>
   11a68:	mov	r0, r4
   11a6c:	mov	r1, r6
   11a70:	mov	r2, r8
   11a74:	bl	4e0c <sigtimedwait@plt>
   11a78:	b	11a88 <rb_select_sigio+0xb4>
   11a7c:	mov	r0, r4
   11a80:	mov	r1, r6
   11a84:	bl	4dc4 <sigwaitinfo@plt>
   11a88:	mov	r7, r0
   11a8c:	cmp	r0, #1
   11a90:	blt	11b8c <rb_select_sigio+0x1b8>
   11a94:	cmp	r7, #29
   11a98:	beq	11ba0 <rb_select_sigio+0x1cc>
   11a9c:	bl	4dd0 <__libc_current_sigrtmin@plt>
   11aa0:	add	r0, r0, #1
   11aa4:	cmp	r7, r0
   11aa8:	bne	11ad0 <rb_select_sigio+0xfc>
   11aac:	ldr	r0, [pc, #648]	; 11d3c <rb_select_sigio+0x368>
   11ab0:	ldr	r0, [pc, r0]
   11ab4:	cmp	r0, #0
   11ab8:	beq	11ad0 <rb_select_sigio+0xfc>
   11abc:	ldr	r0, [sp, #32]
   11ac0:	cmp	r0, #0
   11ac4:	beq	11b7c <rb_select_sigio+0x1a8>
   11ac8:	bl	51cc <rb_run_one_event@plt>
   11acc:	b	11b7c <rb_select_sigio+0x1a8>
   11ad0:	ldr	r0, [pc, #620]	; 11d44 <rb_select_sigio+0x370>
   11ad4:	ldr	r0, [pc, r0]
   11ad8:	ldr	r1, [r0]
   11adc:	ldr	r0, [sp, #28]
   11ae0:	add	r1, r1, r0, lsl #3
   11ae4:	ldrh	r2, [r1, #6]
   11ae8:	ldrh	r3, [sp, #24]
   11aec:	orr	r5, r2, r3
   11af0:	strh	r5, [r1, #6]
   11af4:	bl	11de0 <rb_find_fd>
   11af8:	cmp	r0, #0
   11afc:	beq	11b7c <rb_select_sigio+0x1a8>
   11b00:	mov	r7, r0
   11b04:	mov	sl, r9
   11b08:	mov	r9, r6
   11b0c:	mov	r6, r8
   11b10:	sxth	r8, r5
   11b14:	tst	r8, #89	; 0x59
   11b18:	beq	11b40 <rb_select_sigio+0x16c>
   11b1c:	ldr	r2, [r7, #28]
   11b20:	ldr	r1, [r7, #32]
   11b24:	mov	r0, #0
   11b28:	str	r0, [r7, #28]
   11b2c:	str	r0, [r7, #32]
   11b30:	cmp	r2, #0
   11b34:	beq	11b40 <rb_select_sigio+0x16c>
   11b38:	mov	r0, r7
   11b3c:	blx	r2
   11b40:	tst	r8, #284	; 0x11c
   11b44:	mov	r8, r6
   11b48:	mov	r6, r9
   11b4c:	mov	r9, sl
   11b50:	ldr	sl, [sp]
   11b54:	beq	11b7c <rb_select_sigio+0x1a8>
   11b58:	ldr	r2, [r7, #36]	; 0x24
   11b5c:	ldr	r1, [r7, #40]	; 0x28
   11b60:	mov	r0, #0
   11b64:	str	r0, [r7, #36]	; 0x24
   11b68:	str	r0, [r7, #40]	; 0x28
   11b6c:	cmp	r2, #0
   11b70:	beq	11b7c <rb_select_sigio+0x1a8>
   11b74:	mov	r0, r7
   11b78:	blx	r2
   11b7c:	ldrb	r0, [r9]
   11b80:	cmp	r0, #0
   11b84:	beq	11a50 <rb_select_sigio+0x7c>
   11b88:	b	11bb4 <rb_select_sigio+0x1e0>
   11b8c:	ldrb	r0, [r9]
   11b90:	cmp	r0, #0
   11b94:	bne	11bb4 <rb_select_sigio+0x1e0>
   11b98:	bl	52b0 <rb_set_time@plt>
   11b9c:	b	11d00 <rb_select_sigio+0x32c>
   11ba0:	ldr	r0, [pc, #400]	; 11d38 <rb_select_sigio+0x364>
   11ba4:	add	r0, pc, r0
   11ba8:	bl	5244 <rb_lib_log@plt>
   11bac:	mov	r0, #1
   11bb0:	strb	r0, [r9]
   11bb4:	bl	4dd0 <__libc_current_sigrtmin@plt>
   11bb8:	mov	r1, #1
   11bbc:	bl	4e24 <signal@plt>
   11bc0:	bl	4dd0 <__libc_current_sigrtmin@plt>
   11bc4:	mov	r5, #0
   11bc8:	mov	r1, #0
   11bcc:	bl	4e24 <signal@plt>
   11bd0:	strb	r5, [r9]
   11bd4:	ldr	r9, [pc, #356]	; 11d40 <rb_select_sigio+0x36c>
   11bd8:	ldr	r9, [pc, r9]
   11bdc:	ldm	r9, {r0, r1}
   11be0:	add	r1, r1, #1
   11be4:	mov	r2, sl
   11be8:	bl	531c <poll@plt>
   11bec:	mov	r4, r0
   11bf0:	bl	52b0 <rb_set_time@plt>
   11bf4:	cmn	r4, #1
   11bf8:	ble	11d08 <rb_select_sigio+0x334>
   11bfc:	cmp	r4, #0
   11c00:	beq	11d20 <rb_select_sigio+0x34c>
   11c04:	ldr	r0, [r9, #4]
   11c08:	cmp	r0, #0
   11c0c:	blt	11d20 <rb_select_sigio+0x34c>
   11c10:	mvn	r5, #0
   11c14:	mov	r8, #0
   11c18:	mov	r7, #0
   11c1c:	b	11cd0 <rb_select_sigio+0x2fc>
   11c20:	bl	11de0 <rb_find_fd>
   11c24:	cmp	r0, #0
   11c28:	beq	11cec <rb_select_sigio+0x318>
   11c2c:	mov	r4, r0
   11c30:	tst	r6, #89	; 0x59
   11c34:	beq	11c58 <rb_select_sigio+0x284>
   11c38:	ldr	r2, [r4, #28]
   11c3c:	ldr	r1, [r4, #32]
   11c40:	str	r8, [r4, #28]
   11c44:	str	r8, [r4, #32]
   11c48:	cmp	r2, #0
   11c4c:	beq	11c58 <rb_select_sigio+0x284>
   11c50:	mov	r0, r4
   11c54:	blx	r2
   11c58:	tst	r6, #284	; 0x11c
   11c5c:	ldrbne	r0, [r4, #16]
   11c60:	andsne	r0, r0, #1
   11c64:	bne	11cac <rb_select_sigio+0x2d8>
   11c68:	ldr	r0, [r4, #28]
   11c6c:	cmp	r0, #0
   11c70:	bne	11c88 <rb_select_sigio+0x2b4>
   11c74:	mov	r0, r4
   11c78:	mov	r1, #1
   11c7c:	mov	r2, #0
   11c80:	mov	r3, #0
   11c84:	bl	1185c <rb_setselect_sigio>
   11c88:	ldr	r0, [r4, #36]	; 0x24
   11c8c:	cmp	r0, #0
   11c90:	bne	11cec <rb_select_sigio+0x318>
   11c94:	mov	r0, r4
   11c98:	mov	r1, #2
   11c9c:	mov	r2, #0
   11ca0:	mov	r3, #0
   11ca4:	bl	1185c <rb_setselect_sigio>
   11ca8:	b	11cec <rb_select_sigio+0x318>
   11cac:	ldr	r2, [r4, #36]	; 0x24
   11cb0:	ldr	r1, [r4, #40]	; 0x28
   11cb4:	str	r8, [r4, #36]	; 0x24
   11cb8:	str	r8, [r4, #40]	; 0x28
   11cbc:	cmp	r2, #0
   11cc0:	beq	11c68 <rb_select_sigio+0x294>
   11cc4:	mov	r0, r4
   11cc8:	blx	r2
   11ccc:	b	11c68 <rb_select_sigio+0x294>
   11cd0:	ldr	r0, [r9]
   11cd4:	add	r1, r0, r7
   11cd8:	ldrsh	r6, [r1, #6]
   11cdc:	cmp	r6, #0
   11ce0:	ldrne	r0, [r0, r7]
   11ce4:	cmnne	r0, #1
   11ce8:	bne	11c20 <rb_select_sigio+0x24c>
   11cec:	add	r7, r7, #8
   11cf0:	add	r5, r5, #1
   11cf4:	ldr	r0, [r9, #4]
   11cf8:	cmp	r5, r0
   11cfc:	blt	11cd0 <rb_select_sigio+0x2fc>
   11d00:	mov	r5, #0
   11d04:	b	11d20 <rb_select_sigio+0x34c>
   11d08:	bl	5610 <__errno_location@plt>
   11d0c:	ldr	r0, [r0]
   11d10:	bl	4d28 <rb_ignore_errno@plt>
   11d14:	mov	r5, r0
   11d18:	cmp	r0, #0
   11d1c:	movwne	r5, #5
   11d20:	mov	r0, r5
   11d24:	sub	sp, fp, #28
   11d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d2c:	.word	0x000341e8
   11d30:	.word	0x000341d8
   11d34:	.word	0x0003423c
   11d38:	.word	0x00004c04
   11d3c:	.word	0x000341e8
   11d40:	.word	0x000167e0
   11d44:	.word	0x000168e4

00011d48 <rb_sigio_supports_event>:
   11d48:	push	{r4, sl, fp, lr}
   11d4c:	add	fp, sp, #8
   11d50:	sub	sp, sp, #72	; 0x48
   11d54:	ldr	r4, [pc, #120]	; 11dd4 <rb_sigio_supports_event+0x8c>
   11d58:	ldr	r4, [pc, r4]
   11d5c:	cmp	r4, #1
   11d60:	beq	11dc8 <rb_sigio_supports_event+0x80>
   11d64:	cmn	r4, #1
   11d68:	bne	11d74 <rb_sigio_supports_event+0x2c>
   11d6c:	mov	r4, #0
   11d70:	b	11dc8 <rb_sigio_supports_event+0x80>
   11d74:	mov	r4, #0
   11d78:	str	r4, [sp, #12]
   11d7c:	mov	r0, #26
   11d80:	str	r0, [sp, #8]
   11d84:	add	r1, sp, #4
   11d88:	sub	r2, fp, #12
   11d8c:	mov	r0, #0
   11d90:	bl	4e78 <timer_create@plt>
   11d94:	cmp	r0, #0
   11d98:	beq	11db0 <rb_sigio_supports_event+0x68>
   11d9c:	ldr	r0, [pc, #52]	; 11dd8 <rb_sigio_supports_event+0x90>
   11da0:	add	r0, pc, r0
   11da4:	mvn	r1, #0
   11da8:	str	r1, [r0]
   11dac:	b	11dc8 <rb_sigio_supports_event+0x80>
   11db0:	ldr	r0, [fp, #-12]
   11db4:	bl	5394 <timer_delete@plt>
   11db8:	ldr	r0, [pc, #28]	; 11ddc <rb_sigio_supports_event+0x94>
   11dbc:	add	r0, pc, r0
   11dc0:	mov	r4, #1
   11dc4:	str	r4, [r0]
   11dc8:	mov	r0, r4
   11dcc:	sub	sp, fp, #8
   11dd0:	pop	{r4, sl, fp, pc}
   11dd4:	.word	0x00033f40
   11dd8:	.word	0x00033ef8
   11ddc:	.word	0x00033edc

00011de0 <rb_find_fd>:
   11de0:	cmp	r0, #0
   11de4:	blt	11e38 <rb_find_fd+0x58>
   11de8:	eor	r1, r0, r0, lsr #12
   11dec:	bfc	r1, #12, #20
   11df0:	eor	r1, r1, r0, lsr #24
   11df4:	add	r1, r1, r1, lsl #1
   11df8:	ldr	r2, [pc, #68]	; 11e44 <rb_find_fd+0x64>
   11dfc:	ldr	r2, [pc, r2]
   11e00:	ldr	r2, [r2]
   11e04:	ldr	r2, [r2, r1, lsl #2]
   11e08:	cmp	r2, #0
   11e0c:	bne	11e20 <rb_find_fd+0x40>
   11e10:	b	11e38 <rb_find_fd+0x58>
   11e14:	ldr	r2, [r2, #8]
   11e18:	cmp	r2, #0
   11e1c:	beq	11e38 <rb_find_fd+0x58>
   11e20:	ldr	r1, [r2]
   11e24:	ldr	r3, [r1, #12]
   11e28:	cmp	r3, r0
   11e2c:	bne	11e14 <rb_find_fd+0x34>
   11e30:	mov	r0, r1
   11e34:	bx	lr
   11e38:	mov	r1, #0
   11e3c:	mov	r0, r1
   11e40:	bx	lr
   11e44:	.word	0x000165ac

00011e48 <rb_sigio_init_event>:
   11e48:	b	11d48 <rb_sigio_supports_event>

00011e4c <rb_sigio_sched_event>:
   11e4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e50:	add	fp, sp, #24
   11e54:	sub	sp, sp, #80	; 0x50
   11e58:	mov	r5, r0
   11e5c:	ldr	r0, [pc, #256]	; 11f64 <rb_sigio_sched_event+0x118>
   11e60:	ldr	r0, [pc, r0]
   11e64:	cmp	r0, #1
   11e68:	blt	11f34 <rb_sigio_sched_event+0xe8>
   11e6c:	mov	r8, r1
   11e70:	add	r6, sp, #16
   11e74:	vmov.i32	q8, #0	; 0x00000000
   11e78:	add	r0, r6, #44	; 0x2c
   11e7c:	vst1.32	{d16-d17}, [r0]
   11e80:	add	r0, r6, #28
   11e84:	vst1.32	{d16-d17}, [r0]
   11e88:	add	r0, r6, #12
   11e8c:	vst1.32	{d16-d17}, [r0]
   11e90:	mov	r4, #0
   11e94:	str	r4, [sp, #76]	; 0x4c
   11e98:	mov	r0, #4
   11e9c:	bl	11798 <rb_malloc>
   11ea0:	mov	r7, r0
   11ea4:	str	r0, [r5, #40]	; 0x28
   11ea8:	str	r4, [sp, #24]
   11eac:	bl	4dd0 <__libc_current_sigrtmin@plt>
   11eb0:	str	r5, [sp, #16]
   11eb4:	add	r0, r0, #1
   11eb8:	str	r0, [sp, #20]
   11ebc:	mov	r0, #0
   11ec0:	mov	r1, r6
   11ec4:	mov	r2, r7
   11ec8:	bl	4e78 <timer_create@plt>
   11ecc:	cmn	r0, #1
   11ed0:	ble	11f3c <rb_sigio_sched_event+0xf0>
   11ed4:	str	r4, [sp]
   11ed8:	stmib	sp, {r4, r8}
   11edc:	str	r4, [sp, #12]
   11ee0:	ldr	r0, [r5, #24]
   11ee4:	cmp	r0, #0
   11ee8:	movne	r0, sp
   11eec:	addne	r0, r0, #8
   11ef0:	ldrdne	r0, [r0]
   11ef4:	stmne	sp, {r0, r1}
   11ef8:	ldr	r0, [r7]
   11efc:	mov	r2, sp
   11f00:	mov	r1, #0
   11f04:	mov	r3, #0
   11f08:	bl	507c <timer_settime@plt>
   11f0c:	mov	r4, #1
   11f10:	cmn	r0, #1
   11f14:	bgt	11f58 <rb_sigio_sched_event+0x10c>
   11f18:	bl	5610 <__errno_location@plt>
   11f1c:	ldr	r0, [r0]
   11f20:	bl	4cec <strerror@plt>
   11f24:	mov	r1, r0
   11f28:	ldr	r0, [pc, #60]	; 11f6c <rb_sigio_sched_event+0x120>
   11f2c:	add	r0, pc, r0
   11f30:	bl	5244 <rb_lib_log@plt>
   11f34:	mov	r4, #0
   11f38:	b	11f58 <rb_sigio_sched_event+0x10c>
   11f3c:	bl	5610 <__errno_location@plt>
   11f40:	ldr	r0, [r0]
   11f44:	bl	4cec <strerror@plt>
   11f48:	mov	r1, r0
   11f4c:	ldr	r0, [pc, #20]	; 11f68 <rb_sigio_sched_event+0x11c>
   11f50:	add	r0, pc, r0
   11f54:	bl	5244 <rb_lib_log@plt>
   11f58:	mov	r0, r4
   11f5c:	sub	sp, fp, #24
   11f60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f64:	.word	0x00033e38
   11f68:	.word	0x00004833
   11f6c:	.word	0x00004869

00011f70 <rb_sigio_unsched_event>:
   11f70:	push	{r4, sl, fp, lr}
   11f74:	add	fp, sp, #8
   11f78:	mov	r4, r0
   11f7c:	ldr	r0, [pc, #40]	; 11fac <rb_sigio_unsched_event+0x3c>
   11f80:	ldr	r0, [pc, r0]
   11f84:	cmp	r0, #1
   11f88:	poplt	{r4, sl, fp, pc}
   11f8c:	ldr	r0, [r4, #40]	; 0x28
   11f90:	ldr	r0, [r0]
   11f94:	bl	5394 <timer_delete@plt>
   11f98:	ldr	r0, [r4, #40]	; 0x28
   11f9c:	bl	11fb0 <rb_free>
   11fa0:	mov	r0, #0
   11fa4:	str	r0, [r4, #40]	; 0x28
   11fa8:	pop	{r4, sl, fp, pc}
   11fac:	.word	0x00033d18

00011fb0 <rb_free>:
   11fb0:	cmp	r0, #0
   11fb4:	bxeq	lr
   11fb8:	b	501c <free@plt>

00011fbc <rb_realloc>:
   11fbc:	push	{fp, lr}
   11fc0:	mov	fp, sp
   11fc4:	bl	555c <realloc@plt>
   11fc8:	cmp	r0, #0
   11fcc:	popne	{fp, pc}
   11fd0:	bl	52a4 <rb_outofmemory@plt>

00011fd4 <rb_setup_fd_select>:
   11fd4:	mov	r0, #0
   11fd8:	bx	lr

00011fdc <rb_init_netio_select>:
   11fdc:	ldr	r0, [pc, #168]	; 1208c <rb_init_netio_select+0xb0>
   11fe0:	ldr	r0, [pc, r0]
   11fe4:	ldr	r1, [r0]
   11fe8:	cmp	r1, #1024	; 0x400
   11fec:	movgt	r1, #1024	; 0x400
   11ff0:	strgt	r1, [r0]
   11ff4:	vmov.i32	q8, #0	; 0x00000000
   11ff8:	mov	r0, #112	; 0x70
   11ffc:	ldr	r1, [pc, #140]	; 12090 <rb_init_netio_select+0xb4>
   12000:	add	r1, pc, r1
   12004:	mov	r2, r1
   12008:	vst1.64	{d16-d17}, [r2], r0
   1200c:	vst1.64	{d16-d17}, [r2]
   12010:	add	r2, r1, #96	; 0x60
   12014:	vst1.64	{d16-d17}, [r2]
   12018:	add	r2, r1, #80	; 0x50
   1201c:	vst1.64	{d16-d17}, [r2]
   12020:	add	r2, r1, #64	; 0x40
   12024:	vst1.64	{d16-d17}, [r2]
   12028:	add	r2, r1, #48	; 0x30
   1202c:	vst1.64	{d16-d17}, [r2]
   12030:	add	r2, r1, #32
   12034:	vst1.64	{d16-d17}, [r2]
   12038:	add	r1, r1, #16
   1203c:	vst1.64	{d16-d17}, [r1]
   12040:	ldr	r1, [pc, #76]	; 12094 <rb_init_netio_select+0xb8>
   12044:	add	r1, pc, r1
   12048:	mov	r2, r1
   1204c:	vst1.64	{d16-d17}, [r2], r0
   12050:	vst1.64	{d16-d17}, [r2]
   12054:	add	r0, r1, #96	; 0x60
   12058:	vst1.64	{d16-d17}, [r0]
   1205c:	add	r0, r1, #80	; 0x50
   12060:	vst1.64	{d16-d17}, [r0]
   12064:	add	r0, r1, #64	; 0x40
   12068:	vst1.64	{d16-d17}, [r0]
   1206c:	add	r0, r1, #48	; 0x30
   12070:	vst1.64	{d16-d17}, [r0]
   12074:	add	r0, r1, #32
   12078:	vst1.64	{d16-d17}, [r0]
   1207c:	add	r0, r1, #16
   12080:	vst1.64	{d16-d17}, [r0]
   12084:	mov	r0, #0
   12088:	bx	lr
   1208c:	.word	0x000163a8
   12090:	.word	0x00033ca0
   12094:	.word	0x00033cdc

00012098 <rb_setselect_select>:
   12098:	push	{r4, r5, r6, r7, fp, lr}
   1209c:	add	fp, sp, #16
   120a0:	mov	r5, r3
   120a4:	mov	r4, r2
   120a8:	mov	r7, r1
   120ac:	mov	r6, r0
   120b0:	tst	r1, #1
   120b4:	beq	120d0 <rb_setselect_select+0x38>
   120b8:	str	r4, [r6, #28]
   120bc:	str	r5, [r6, #32]
   120c0:	mov	r0, r6
   120c4:	mov	r1, #1
   120c8:	mov	r2, r4
   120cc:	bl	120f4 <select_update_selectfds>
   120d0:	tst	r7, #2
   120d4:	popeq	{r4, r5, r6, r7, fp, pc}
   120d8:	str	r4, [r6, #36]	; 0x24
   120dc:	str	r5, [r6, #40]	; 0x28
   120e0:	mov	r0, r6
   120e4:	mov	r1, #2
   120e8:	mov	r2, r4
   120ec:	pop	{r4, r5, r6, r7, fp, lr}
   120f0:	b	120f4 <select_update_selectfds>

000120f4 <select_update_selectfds>:
   120f4:	push	{r4, r5, fp, lr}
   120f8:	add	fp, sp, #8
   120fc:	tst	r1, #1
   12100:	beq	12160 <select_update_selectfds+0x6c>
   12104:	ldr	r3, [r0, #12]
   12108:	and	ip, r3, #31
   1210c:	mov	r4, #1
   12110:	lsl	ip, r4, ip
   12114:	asr	r4, r3, #31
   12118:	add	r3, r3, r4, lsr #27
   1211c:	asr	r3, r3, #5
   12120:	ldr	lr, [pc, #332]	; 12274 <select_update_selectfds+0x180>
   12124:	add	lr, pc, lr
   12128:	cmp	r2, #0
   1212c:	beq	12148 <select_update_selectfds+0x54>
   12130:	ldr	r4, [lr, r3, lsl #2]
   12134:	orr	r4, r4, ip
   12138:	str	r4, [lr, r3, lsl #2]
   1213c:	ldr	r3, [r0, #20]
   12140:	orr	r3, r3, #1
   12144:	b	1215c <select_update_selectfds+0x68>
   12148:	ldr	r4, [lr, r3, lsl #2]
   1214c:	bic	r4, r4, ip
   12150:	str	r4, [lr, r3, lsl #2]
   12154:	ldr	r3, [r0, #20]
   12158:	bic	r3, r3, #1
   1215c:	str	r3, [r0, #20]
   12160:	tst	r1, #2
   12164:	beq	121d8 <select_update_selectfds+0xe4>
   12168:	ldr	r3, [r0, #12]
   1216c:	and	r1, r3, #31
   12170:	mov	r4, #1
   12174:	lsl	r1, r4, r1
   12178:	cmp	r2, #0
   1217c:	beq	121ac <select_update_selectfds+0xb8>
   12180:	asr	r2, r3, #31
   12184:	add	r2, r3, r2, lsr #27
   12188:	asr	r2, r2, #5
   1218c:	ldr	r3, [pc, #228]	; 12278 <select_update_selectfds+0x184>
   12190:	add	r3, pc, r3
   12194:	ldr	r4, [r3, r2, lsl #2]
   12198:	orr	r1, r4, r1
   1219c:	str	r1, [r3, r2, lsl #2]
   121a0:	ldr	r1, [r0, #20]
   121a4:	orr	r1, r1, #2
   121a8:	b	121d4 <select_update_selectfds+0xe0>
   121ac:	asr	r2, r3, #31
   121b0:	add	r2, r3, r2, lsr #27
   121b4:	asr	r2, r2, #5
   121b8:	ldr	r3, [pc, #188]	; 1227c <select_update_selectfds+0x188>
   121bc:	add	r3, pc, r3
   121c0:	ldr	r4, [r3, r2, lsl #2]
   121c4:	bic	r1, r4, r1
   121c8:	str	r1, [r3, r2, lsl #2]
   121cc:	ldr	r1, [r0, #20]
   121d0:	bic	r1, r1, #2
   121d4:	str	r1, [r0, #20]
   121d8:	ldr	r1, [r0, #12]
   121dc:	ldrb	r2, [r0, #20]
   121e0:	ldr	r0, [pc, #152]	; 12280 <select_update_selectfds+0x18c>
   121e4:	ldr	r0, [pc, r0]
   121e8:	tst	r2, #3
   121ec:	beq	12208 <select_update_selectfds+0x114>
   121f0:	cmp	r1, r0
   121f4:	ldrgt	r0, [pc, #136]	; 12284 <select_update_selectfds+0x190>
   121f8:	addgt	r0, pc, r0
   121fc:	strgt	r1, [r0]
   12200:	popgt	{r4, r5, fp, pc}
   12204:	pop	{r4, r5, fp, pc}
   12208:	cmp	r1, r0
   1220c:	bgt	12270 <select_update_selectfds+0x17c>
   12210:	cmp	r0, #0
   12214:	poplt	{r4, r5, fp, pc}
   12218:	mov	r1, #1
   1221c:	ldr	r2, [pc, #100]	; 12288 <select_update_selectfds+0x194>
   12220:	add	r2, pc, r2
   12224:	ldr	lr, [pc, #96]	; 1228c <select_update_selectfds+0x198>
   12228:	add	lr, pc, lr
   1222c:	ldr	ip, [pc, #92]	; 12290 <select_update_selectfds+0x19c>
   12230:	add	ip, pc, ip
   12234:	and	r3, r0, #31
   12238:	asr	r4, r0, #31
   1223c:	add	r4, r0, r4, lsr #27
   12240:	asr	r4, r4, #5
   12244:	ldr	r5, [r2, r4, lsl #2]
   12248:	tst	r5, r1, lsl r3
   1224c:	lsleq	r3, r1, r3
   12250:	ldreq	r4, [lr, r4, lsl #2]
   12254:	tsteq	r4, r3
   12258:	bne	12270 <select_update_selectfds+0x17c>
   1225c:	sub	r3, r0, #1
   12260:	str	r3, [ip]
   12264:	cmp	r0, #0
   12268:	mov	r0, r3
   1226c:	bgt	12234 <select_update_selectfds+0x140>
   12270:	pop	{r4, r5, fp, pc}
   12274:	.word	0x00033b7c
   12278:	.word	0x00033b90
   1227c:	.word	0x00033b64
   12280:	.word	0x0001628c
   12284:	.word	0x00016278
   12288:	.word	0x00033a80
   1228c:	.word	0x00033af8
   12290:	.word	0x00016240

00012294 <rb_select_select>:
   12294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12298:	add	fp, sp, #28
   1229c:	sub	sp, sp, #12
   122a0:	mov	r6, r0
   122a4:	ldr	r9, [pc, #408]	; 12444 <rb_select_select+0x1b0>
   122a8:	add	r9, pc, r9
   122ac:	ldr	r1, [pc, #404]	; 12448 <rb_select_select+0x1b4>
   122b0:	add	r1, pc, r1
   122b4:	mov	r0, r9
   122b8:	mov	r2, #128	; 0x80
   122bc:	bl	5130 <memcpy@plt>
   122c0:	ldr	sl, [pc, #388]	; 1244c <rb_select_select+0x1b8>
   122c4:	add	sl, pc, sl
   122c8:	ldr	r1, [pc, #384]	; 12450 <rb_select_select+0x1bc>
   122cc:	add	r1, pc, r1
   122d0:	mov	r0, sl
   122d4:	mov	r2, #128	; 0x80
   122d8:	bl	5130 <memcpy@plt>
   122dc:	mov	r0, #1000	; 0x3e8
   122e0:	mul	r7, r6, r0
   122e4:	mov	r5, #0
   122e8:	add	r4, sp, #4
   122ec:	stmib	sp, {r5, r7}
   122f0:	ldr	r0, [pc, #348]	; 12454 <rb_select_select+0x1c0>
   122f4:	ldr	r0, [pc, r0]
   122f8:	str	r4, [sp]
   122fc:	add	r0, r0, #1
   12300:	mov	r1, r9
   12304:	mov	r2, sl
   12308:	mov	r3, #0
   1230c:	bl	525c <select@plt>
   12310:	cmn	r0, #1
   12314:	bgt	1233c <rb_select_select+0xa8>
   12318:	bl	5610 <__errno_location@plt>
   1231c:	ldr	r0, [r0]
   12320:	bl	4d28 <rb_ignore_errno@plt>
   12324:	cmp	r0, #0
   12328:	bne	122ec <rb_select_select+0x58>
   1232c:	bl	52b0 <rb_set_time@plt>
   12330:	mvn	r0, #0
   12334:	sub	sp, fp, #28
   12338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1233c:	mov	r6, r0
   12340:	bl	52b0 <rb_set_time@plt>
   12344:	mov	r0, #0
   12348:	cmp	r6, #0
   1234c:	beq	1243c <rb_select_select+0x1a8>
   12350:	ldr	r1, [pc, #256]	; 12458 <rb_select_select+0x1c4>
   12354:	ldr	r1, [pc, r1]
   12358:	cmp	r1, #0
   1235c:	blt	1243c <rb_select_select+0x1a8>
   12360:	mvn	r6, #0
   12364:	mov	r8, #1
   12368:	add	r6, r6, #1
   1236c:	mov	r0, r6
   12370:	bl	12460 <rb_find_fd>
   12374:	cmp	r0, #0
   12378:	beq	12428 <rb_select_select+0x194>
   1237c:	mov	r7, r0
   12380:	and	r4, r6, #31
   12384:	lsr	r5, r6, #5
   12388:	ldr	r0, [r9, r5, lsl #2]
   1238c:	tst	r0, r8, lsl r4
   12390:	beq	123b4 <rb_select_select+0x120>
   12394:	ldr	r2, [r7, #28]
   12398:	mov	r0, #0
   1239c:	str	r0, [r7, #28]
   123a0:	cmp	r2, #0
   123a4:	beq	123b4 <rb_select_select+0x120>
   123a8:	ldr	r1, [r7, #32]
   123ac:	mov	r0, r7
   123b0:	blx	r2
   123b4:	ldrb	r0, [r7, #16]
   123b8:	tst	r0, #1
   123bc:	beq	12428 <rb_select_select+0x194>
   123c0:	lsl	r0, r8, r4
   123c4:	ldr	r1, [sl, r5, lsl #2]
   123c8:	tst	r1, r0
   123cc:	beq	123f0 <rb_select_select+0x15c>
   123d0:	ldr	r2, [r7, #36]	; 0x24
   123d4:	mov	r0, #0
   123d8:	str	r0, [r7, #36]	; 0x24
   123dc:	cmp	r2, #0
   123e0:	beq	123f0 <rb_select_select+0x15c>
   123e4:	ldr	r1, [r7, #40]	; 0x28
   123e8:	mov	r0, r7
   123ec:	blx	r2
   123f0:	ldr	r0, [r7, #28]
   123f4:	cmp	r0, #0
   123f8:	bne	1240c <rb_select_select+0x178>
   123fc:	mov	r0, r7
   12400:	mov	r1, #1
   12404:	mov	r2, #0
   12408:	bl	120f4 <select_update_selectfds>
   1240c:	ldr	r0, [r7, #36]	; 0x24
   12410:	cmp	r0, #0
   12414:	bne	12428 <rb_select_select+0x194>
   12418:	mov	r0, r7
   1241c:	mov	r1, #2
   12420:	mov	r2, #0
   12424:	bl	120f4 <select_update_selectfds>
   12428:	ldr	r0, [pc, #44]	; 1245c <rb_select_select+0x1c8>
   1242c:	ldr	r0, [pc, r0]
   12430:	cmp	r6, r0
   12434:	blt	12368 <rb_select_select+0xd4>
   12438:	mov	r0, #0
   1243c:	sub	sp, fp, #28
   12440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12444:	.word	0x00033af8
   12448:	.word	0x000339f0
   1244c:	.word	0x00033b5c
   12450:	.word	0x00033a54
   12454:	.word	0x0001617c
   12458:	.word	0x0001611c
   1245c:	.word	0x00016044

00012460 <rb_find_fd>:
   12460:	cmp	r0, #0
   12464:	blt	124b8 <rb_find_fd+0x58>
   12468:	eor	r1, r0, r0, lsr #12
   1246c:	bfc	r1, #12, #20
   12470:	eor	r1, r1, r0, lsr #24
   12474:	add	r1, r1, r1, lsl #1
   12478:	ldr	r2, [pc, #68]	; 124c4 <rb_find_fd+0x64>
   1247c:	ldr	r2, [pc, r2]
   12480:	ldr	r2, [r2]
   12484:	ldr	r2, [r2, r1, lsl #2]
   12488:	cmp	r2, #0
   1248c:	bne	124a0 <rb_find_fd+0x40>
   12490:	b	124b8 <rb_find_fd+0x58>
   12494:	ldr	r2, [r2, #8]
   12498:	cmp	r2, #0
   1249c:	beq	124b8 <rb_find_fd+0x58>
   124a0:	ldr	r1, [r2]
   124a4:	ldr	r3, [r1, #12]
   124a8:	cmp	r3, r0
   124ac:	bne	12494 <rb_find_fd+0x34>
   124b0:	mov	r0, r1
   124b4:	bx	lr
   124b8:	mov	r1, #0
   124bc:	mov	r0, r1
   124c0:	bx	lr
   124c4:	.word	0x00015f2c

000124c8 <rb_init_netio_kqueue>:
   124c8:	push	{fp, lr}
   124cc:	mov	fp, sp
   124d0:	bl	5610 <__errno_location@plt>
   124d4:	mov	r1, #38	; 0x26
   124d8:	str	r1, [r0]
   124dc:	mvn	r0, #0
   124e0:	pop	{fp, pc}

000124e4 <rb_setselect_kqueue>:
   124e4:	push	{fp, lr}
   124e8:	mov	fp, sp
   124ec:	bl	5610 <__errno_location@plt>
   124f0:	mov	r1, #38	; 0x26
   124f4:	str	r1, [r0]
   124f8:	pop	{fp, pc}

000124fc <rb_select_kqueue>:
   124fc:	push	{fp, lr}
   12500:	mov	fp, sp
   12504:	bl	5610 <__errno_location@plt>
   12508:	mov	r1, #38	; 0x26
   1250c:	str	r1, [r0]
   12510:	mvn	r0, #0
   12514:	pop	{fp, pc}

00012518 <rb_setup_fd_kqueue>:
   12518:	push	{fp, lr}
   1251c:	mov	fp, sp
   12520:	bl	5610 <__errno_location@plt>
   12524:	mov	r1, #38	; 0x26
   12528:	str	r1, [r0]
   1252c:	mvn	r0, #0
   12530:	pop	{fp, pc}

00012534 <rb_kqueue_init_event>:
   12534:	bx	lr

00012538 <rb_kqueue_sched_event>:
   12538:	push	{fp, lr}
   1253c:	mov	fp, sp
   12540:	bl	5610 <__errno_location@plt>
   12544:	mov	r1, #38	; 0x26
   12548:	str	r1, [r0]
   1254c:	mvn	r0, #0
   12550:	pop	{fp, pc}

00012554 <rb_kqueue_unsched_event>:
   12554:	bx	lr

00012558 <rb_kqueue_supports_event>:
   12558:	push	{fp, lr}
   1255c:	mov	fp, sp
   12560:	bl	5610 <__errno_location@plt>
   12564:	mov	r1, #38	; 0x26
   12568:	str	r1, [r0]
   1256c:	mov	r0, #0
   12570:	pop	{fp, pc}

00012574 <rb_rawbuf_flush>:
   12574:	push	{r4, r5, r6, sl, fp, lr}
   12578:	add	fp, sp, #16
   1257c:	mov	r4, r0
   12580:	ldr	r0, [r0]
   12584:	cmp	r0, #0
   12588:	beq	1263c <rb_rawbuf_flush+0xc8>
   1258c:	mov	r6, r1
   12590:	mov	r0, r1
   12594:	bl	4e00 <rb_fd_ssl@plt>
   12598:	cmp	r0, #0
   1259c:	beq	12654 <rb_rawbuf_flush+0xe0>
   125a0:	ldr	r0, [r4]
   125a4:	ldr	r5, [r0]
   125a8:	ldrb	r0, [r5, #1040]	; 0x410
   125ac:	cmp	r0, #0
   125b0:	bne	125c4 <rb_rawbuf_flush+0x50>
   125b4:	mov	r0, #1
   125b8:	strb	r0, [r5, #1040]	; 0x410
   125bc:	mov	r0, #0
   125c0:	str	r0, [r4, #16]
   125c4:	ldr	r0, [r4, #16]
   125c8:	ldr	r1, [r5, #1036]	; 0x40c
   125cc:	sub	r2, r1, r0
   125d0:	add	r0, r5, r0
   125d4:	add	r1, r0, #12
   125d8:	mov	r0, r6
   125dc:	bl	4f98 <rb_write@plt>
   125e0:	mov	r6, r0
   125e4:	cmp	r0, #1
   125e8:	blt	12634 <rb_rawbuf_flush+0xc0>
   125ec:	ldr	r0, [r4, #16]
   125f0:	add	r0, r0, r6
   125f4:	str	r0, [r4, #16]
   125f8:	ldr	r1, [r5, #1036]	; 0x40c
   125fc:	cmp	r0, r1
   12600:	bne	12628 <rb_rawbuf_flush+0xb4>
   12604:	mov	r0, #0
   12608:	str	r0, [r4, #16]
   1260c:	mov	r0, r5
   12610:	mov	r1, r4
   12614:	bl	127d4 <rb_dlinkDelete>
   12618:	ldr	r0, [pc, #68]	; 12664 <rb_rawbuf_flush+0xf0>
   1261c:	ldr	r0, [pc, r0]
   12620:	mov	r1, r5
   12624:	bl	51fc <rb_bh_free@plt>
   12628:	ldr	r0, [r4, #12]
   1262c:	sub	r0, r0, r6
   12630:	str	r0, [r4, #12]
   12634:	mov	r0, r6
   12638:	pop	{r4, r5, r6, sl, fp, pc}
   1263c:	bl	5610 <__errno_location@plt>
   12640:	mov	r1, #11
   12644:	str	r1, [r0]
   12648:	mvn	r6, #0
   1264c:	mov	r0, r6
   12650:	pop	{r4, r5, r6, sl, fp, pc}
   12654:	mov	r0, r4
   12658:	mov	r1, r6
   1265c:	pop	{r4, r5, r6, sl, fp, lr}
   12660:	b	12668 <rb_rawbuf_flush_writev>
   12664:	.word	0x00033884

00012668 <rb_rawbuf_flush_writev>:
   12668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1266c:	add	fp, sp, #28
   12670:	sub	sp, sp, #4
   12674:	sub	sp, sp, #8192	; 0x2000
   12678:	mov	r8, r1
   1267c:	mov	r4, r0
   12680:	mov	r6, sp
   12684:	mov	r7, #0
   12688:	mov	r0, r6
   1268c:	mov	r1, #0
   12690:	mov	r2, #8192	; 0x2000
   12694:	bl	4f68 <memset@plt>
   12698:	ldr	r0, [r4]
   1269c:	cmp	r0, #0
   126a0:	beq	1279c <rb_rawbuf_flush_writev+0x134>
   126a4:	movw	r1, #1023	; 0x3ff
   126a8:	ldr	r2, [r0]
   126ac:	ldrb	r3, [r2, #1040]	; 0x410
   126b0:	cmp	r3, #0
   126b4:	beq	126d4 <rb_rawbuf_flush_writev+0x6c>
   126b8:	ldr	r3, [r4, #16]
   126bc:	add	r5, r2, r3
   126c0:	add	r5, r5, #12
   126c4:	str	r5, [r6, r7, lsl #3]
   126c8:	ldr	r2, [r2, #1036]	; 0x40c
   126cc:	sub	r2, r2, r3
   126d0:	b	126e0 <rb_rawbuf_flush_writev+0x78>
   126d4:	add	r3, r2, #12
   126d8:	str	r3, [r6, r7, lsl #3]
   126dc:	ldr	r2, [r2, #1036]	; 0x40c
   126e0:	add	r3, r6, r7, lsl #3
   126e4:	str	r2, [r3, #4]
   126e8:	add	r5, r7, #1
   126ec:	ldr	r0, [r0, #8]
   126f0:	cmp	r0, #0
   126f4:	beq	12704 <rb_rawbuf_flush_writev+0x9c>
   126f8:	cmp	r7, r1
   126fc:	mov	r7, r5
   12700:	bcc	126a8 <rb_rawbuf_flush_writev+0x40>
   12704:	mov	r1, sp
   12708:	mov	r0, r8
   1270c:	mov	r2, r5
   12710:	bl	53f4 <rb_writev@plt>
   12714:	mov	r8, r0
   12718:	cmp	r0, #1
   1271c:	blt	127ac <rb_rawbuf_flush_writev+0x144>
   12720:	ldr	sl, [r4]
   12724:	cmp	sl, #0
   12728:	beq	127ac <rb_rawbuf_flush_writev+0x144>
   1272c:	sub	r9, r5, #1
   12730:	mov	r5, #0
   12734:	mov	r7, r8
   12738:	ldr	r1, [sl]
   1273c:	ldr	sl, [sl, #8]
   12740:	ldrb	r0, [r1, #1040]	; 0x410
   12744:	cmp	r0, #0
   12748:	beq	12760 <rb_rawbuf_flush_writev+0xf8>
   1274c:	ldr	r0, [r4, #16]
   12750:	ldr	r2, [r1, #1036]	; 0x40c
   12754:	sub	r6, r2, r0
   12758:	cmp	r7, r6
   1275c:	bge	1276c <rb_rawbuf_flush_writev+0x104>
   12760:	ldr	r6, [r1, #1036]	; 0x40c
   12764:	cmp	r7, r6
   12768:	blt	127b8 <rb_rawbuf_flush_writev+0x150>
   1276c:	ldr	r0, [r4, #12]
   12770:	sub	r0, r0, r6
   12774:	str	r0, [r4, #12]
   12778:	mov	r0, r4
   1277c:	bl	129fc <rb_rawbuf_done>
   12780:	cmp	sl, #0
   12784:	beq	127ac <rb_rawbuf_flush_writev+0x144>
   12788:	sub	r7, r7, r6
   1278c:	add	r5, r5, #1
   12790:	cmp	r5, r9
   12794:	bls	12738 <rb_rawbuf_flush_writev+0xd0>
   12798:	b	127ac <rb_rawbuf_flush_writev+0x144>
   1279c:	bl	5610 <__errno_location@plt>
   127a0:	mov	r1, #11
   127a4:	str	r1, [r0]
   127a8:	mvn	r8, #0
   127ac:	mov	r0, r8
   127b0:	sub	sp, fp, #28
   127b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127b8:	mov	r0, #1
   127bc:	strb	r0, [r1, #1040]	; 0x410
   127c0:	str	r7, [r4, #16]
   127c4:	ldr	r0, [r4, #12]
   127c8:	sub	r0, r0, r7
   127cc:	str	r0, [r4, #12]
   127d0:	b	127ac <rb_rawbuf_flush_writev+0x144>

000127d4 <rb_dlinkDelete>:
   127d4:	ldr	ip, [r0, #4]
   127d8:	ldr	r3, [r0, #8]
   127dc:	add	r2, r3, #4
   127e0:	cmp	r3, #0
   127e4:	addeq	r2, r1, #4
   127e8:	str	ip, [r2]
   127ec:	ldmib	r0, {r2, ip}
   127f0:	cmp	r2, #0
   127f4:	mov	r3, r1
   127f8:	addne	r3, r2, #8
   127fc:	str	ip, [r3]
   12800:	mov	r2, #0
   12804:	str	r2, [r0, #4]
   12808:	str	r2, [r0, #8]
   1280c:	ldr	r0, [r1, #8]
   12810:	sub	r0, r0, #1
   12814:	str	r0, [r1, #8]
   12818:	bx	lr

0001281c <rb_rawbuf_append>:
   1281c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12820:	add	fp, sp, #24
   12824:	mov	r6, r2
   12828:	mov	r5, r1
   1282c:	mov	r8, r0
   12830:	ldr	r0, [r0, #4]
   12834:	cmp	r0, #0
   12838:	ldrne	r0, [r0]
   1283c:	cmpne	r0, #0
   12840:	bne	128a0 <rb_rawbuf_append+0x84>
   12844:	cmp	r6, #1
   12848:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   1284c:	mov	r0, r8
   12850:	bl	1290c <rb_rawbuf_newbuf>
   12854:	mov	r7, r0
   12858:	cmp	r6, #1024	; 0x400
   1285c:	mov	r4, r6
   12860:	movge	r4, #1024	; 0x400
   12864:	add	r0, r0, #12
   12868:	mov	r1, r5
   1286c:	mov	r2, r4
   12870:	bl	5130 <memcpy@plt>
   12874:	ldr	r0, [r7, #1036]	; 0x40c
   12878:	add	r0, r0, r4
   1287c:	str	r0, [r7, #1036]	; 0x40c
   12880:	ldr	r0, [r8, #12]
   12884:	add	r0, r0, r4
   12888:	str	r0, [r8, #12]
   1288c:	add	r5, r5, r4
   12890:	sub	r6, r6, r4
   12894:	cmp	r6, #0
   12898:	bgt	1284c <rb_rawbuf_append+0x30>
   1289c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   128a0:	ldr	r1, [r0, #1036]	; 0x40c
   128a4:	cmp	r1, #1024	; 0x400
   128a8:	bge	12844 <rb_rawbuf_append+0x28>
   128ac:	ldrb	r0, [r0, #1040]	; 0x410
   128b0:	cmp	r0, #0
   128b4:	bne	12844 <rb_rawbuf_append+0x28>
   128b8:	ldr	r0, [r8, #4]
   128bc:	ldr	r4, [r0]
   128c0:	ldr	r0, [r4, #1036]	; 0x40c
   128c4:	rsb	r7, r0, #1024	; 0x400
   128c8:	cmp	r7, r6
   128cc:	movgt	r7, r6
   128d0:	add	r0, r4, r0
   128d4:	add	r0, r0, #12
   128d8:	mov	r1, r5
   128dc:	mov	r2, r7
   128e0:	bl	5130 <memcpy@plt>
   128e4:	ldr	r0, [r4, #1036]	; 0x40c
   128e8:	add	r0, r7, r0
   128ec:	str	r0, [r4, #1036]	; 0x40c
   128f0:	ldr	r0, [r8, #12]
   128f4:	add	r0, r0, r7
   128f8:	str	r0, [r8, #12]
   128fc:	subs	r6, r6, r7
   12900:	beq	1289c <rb_rawbuf_append+0x80>
   12904:	add	r5, r5, r7
   12908:	b	12844 <rb_rawbuf_append+0x28>

0001290c <rb_rawbuf_newbuf>:
   1290c:	push	{r4, r5, fp, lr}
   12910:	add	fp, sp, #8
   12914:	mov	r4, r0
   12918:	bl	12aec <rb_rawbuf_alloc>
   1291c:	mov	r5, r0
   12920:	mov	r1, r0
   12924:	mov	r2, r4
   12928:	bl	12afc <rb_dlinkAddTail>
   1292c:	mov	r0, r5
   12930:	pop	{r4, r5, fp, pc}

00012934 <rb_rawbuf_get>:
   12934:	push	{r4, r5, r6, r7, fp, lr}
   12938:	add	fp, sp, #16
   1293c:	mov	r4, r0
   12940:	ldr	r0, [r0]
   12944:	cmp	r0, #0
   12948:	moveq	r6, #0
   1294c:	moveq	r0, r6
   12950:	popeq	{r4, r5, r6, r7, fp, pc}
   12954:	mov	r5, r2
   12958:	ldr	r7, [r0]
   1295c:	ldrb	r0, [r7, #1040]	; 0x410
   12960:	cmp	r0, #0
   12964:	beq	12978 <rb_rawbuf_get+0x44>
   12968:	ldr	r0, [r4, #16]
   1296c:	add	r0, r7, r0
   12970:	add	r2, r0, #12
   12974:	b	1297c <rb_rawbuf_get+0x48>
   12978:	add	r2, r7, #12
   1297c:	ldr	r6, [r7, #1036]	; 0x40c
   12980:	cmp	r6, r5
   12984:	movge	r6, r5
   12988:	mov	r0, r1
   1298c:	mov	r1, r2
   12990:	mov	r2, r6
   12994:	bl	5130 <memcpy@plt>
   12998:	ldr	r0, [r7, #1036]	; 0x40c
   1299c:	cmp	r0, r6
   129a0:	bne	129cc <rb_rawbuf_get+0x98>
   129a4:	mov	r0, #0
   129a8:	str	r0, [r4, #16]
   129ac:	mov	r0, r4
   129b0:	mov	r1, r7
   129b4:	bl	129fc <rb_rawbuf_done>
   129b8:	ldr	r0, [r4, #12]
   129bc:	sub	r0, r0, r5
   129c0:	str	r0, [r4, #12]
   129c4:	mov	r0, r6
   129c8:	pop	{r4, r5, r6, r7, fp, pc}
   129cc:	mov	r1, #1
   129d0:	strb	r1, [r7, #1040]	; 0x410
   129d4:	sub	r0, r0, r6
   129d8:	str	r0, [r7, #1036]	; 0x40c
   129dc:	ldr	r0, [r4, #12]
   129e0:	ldr	r1, [r4, #16]
   129e4:	sub	r0, r0, r6
   129e8:	add	r1, r1, r6
   129ec:	str	r0, [r4, #12]
   129f0:	str	r1, [r4, #16]
   129f4:	mov	r0, r6
   129f8:	pop	{r4, r5, r6, r7, fp, pc}

000129fc <rb_rawbuf_done>:
   129fc:	push	{r4, sl, fp, lr}
   12a00:	add	fp, sp, #8
   12a04:	mov	r4, r1
   12a08:	mov	r1, r0
   12a0c:	mov	r0, r4
   12a10:	bl	127d4 <rb_dlinkDelete>
   12a14:	ldr	r0, [pc, #12]	; 12a28 <rb_rawbuf_done+0x2c>
   12a18:	ldr	r0, [pc, r0]
   12a1c:	mov	r1, r4
   12a20:	pop	{r4, sl, fp, lr}
   12a24:	b	51fc <rb_bh_free@plt>
   12a28:	.word	0x00033488

00012a2c <rb_rawbuf_length>:
   12a2c:	ldr	r0, [r0, #12]
   12a30:	bx	lr

00012a34 <rb_new_rawbuffer>:
   12a34:	b	12a38 <rb_malloc>

00012a38 <rb_malloc>:
   12a38:	push	{fp, lr}
   12a3c:	mov	fp, sp
   12a40:	mov	r0, #1
   12a44:	mov	r1, #20
   12a48:	bl	4f2c <calloc@plt>
   12a4c:	cmp	r0, #0
   12a50:	popne	{fp, pc}
   12a54:	bl	52a4 <rb_outofmemory@plt>

00012a58 <rb_free_rawbuffer>:
   12a58:	push	{r4, r5, fp, lr}
   12a5c:	add	fp, sp, #8
   12a60:	mov	r4, r0
   12a64:	ldr	r5, [r0]
   12a68:	cmp	r5, #0
   12a6c:	beq	12a88 <rb_free_rawbuffer+0x30>
   12a70:	ldr	r1, [r5]
   12a74:	ldr	r5, [r5, #8]
   12a78:	mov	r0, r4
   12a7c:	bl	129fc <rb_rawbuf_done>
   12a80:	cmp	r5, #0
   12a84:	bne	12a70 <rb_free_rawbuffer+0x18>
   12a88:	mov	r0, r4
   12a8c:	pop	{r4, r5, fp, lr}
   12a90:	b	12a94 <rb_free>

00012a94 <rb_free>:
   12a94:	cmp	r0, #0
   12a98:	bxeq	lr
   12a9c:	b	501c <free@plt>

00012aa0 <rb_init_rawbuffers>:
   12aa0:	mov	r1, r0
   12aa4:	ldr	r0, [pc, #52]	; 12ae0 <rb_init_rawbuffers+0x40>
   12aa8:	ldr	r0, [pc, r0]
   12aac:	cmp	r0, #0
   12ab0:	bxne	lr
   12ab4:	push	{fp, lr}
   12ab8:	mov	fp, sp
   12abc:	ldr	r2, [pc, #32]	; 12ae4 <rb_init_rawbuffers+0x44>
   12ac0:	add	r2, pc, r2
   12ac4:	movw	r0, #1044	; 0x414
   12ac8:	bl	53d0 <rb_bh_create@plt>
   12acc:	ldr	r1, [pc, #20]	; 12ae8 <rb_init_rawbuffers+0x48>
   12ad0:	add	r1, pc, r1
   12ad4:	str	r0, [r1]
   12ad8:	pop	{fp, lr}
   12adc:	bx	lr
   12ae0:	.word	0x000333f8
   12ae4:	.word	0x00003d59
   12ae8:	.word	0x000333d0

00012aec <rb_rawbuf_alloc>:
   12aec:	ldr	r0, [pc, #4]	; 12af8 <rb_rawbuf_alloc+0xc>
   12af0:	ldr	r0, [pc, r0]
   12af4:	b	5274 <rb_bh_alloc@plt>
   12af8:	.word	0x000333b0

00012afc <rb_dlinkAddTail>:
   12afc:	mov	r3, #0
   12b00:	str	r3, [r1, #8]
   12b04:	str	r0, [r1]
   12b08:	ldr	r0, [r2, #4]
   12b0c:	str	r0, [r1, #4]
   12b10:	ldr	r0, [r2, #4]
   12b14:	cmp	r0, #0
   12b18:	beq	12b28 <rb_dlinkAddTail+0x2c>
   12b1c:	add	r0, r0, #8
   12b20:	str	r1, [r0]
   12b24:	b	12b34 <rb_dlinkAddTail+0x38>
   12b28:	ldr	r0, [r2]
   12b2c:	cmp	r0, #0
   12b30:	beq	12b48 <rb_dlinkAddTail+0x4c>
   12b34:	str	r1, [r2, #4]
   12b38:	ldr	r0, [r2, #8]
   12b3c:	add	r0, r0, #1
   12b40:	str	r0, [r2, #8]
   12b44:	bx	lr
   12b48:	mov	r0, r2
   12b4c:	b	12b20 <rb_dlinkAddTail+0x24>

00012b50 <rb_init_patricia>:
   12b50:	bx	lr

00012b54 <rb_new_patricia>:
   12b54:	push	{r4, sl, fp, lr}
   12b58:	add	fp, sp, #8
   12b5c:	mov	r4, r0
   12b60:	mov	r0, #12
   12b64:	bl	12b98 <rb_malloc>
   12b68:	mov	r1, #0
   12b6c:	stm	r0, {r1, r4}
   12b70:	str	r1, [r0, #8]
   12b74:	ldr	r1, [pc, #20]	; 12b90 <rb_new_patricia+0x3c>
   12b78:	ldr	r1, [pc, r1]
   12b7c:	add	r1, r1, #1
   12b80:	ldr	r2, [pc, #12]	; 12b94 <rb_new_patricia+0x40>
   12b84:	add	r2, pc, r2
   12b88:	str	r1, [r2]
   12b8c:	pop	{r4, sl, fp, pc}
   12b90:	.word	0x0003332c
   12b94:	.word	0x00033320

00012b98 <rb_malloc>:
   12b98:	push	{fp, lr}
   12b9c:	mov	fp, sp
   12ba0:	mov	r1, r0
   12ba4:	mov	r0, #1
   12ba8:	bl	4f2c <calloc@plt>
   12bac:	cmp	r0, #0
   12bb0:	popne	{fp, pc}
   12bb4:	bl	52a4 <rb_outofmemory@plt>

00012bb8 <rb_clear_patricia>:
   12bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bbc:	add	fp, sp, #28
   12bc0:	sub	sp, sp, #524	; 0x20c
   12bc4:	mov	r4, r0
   12bc8:	ldr	r6, [r0]
   12bcc:	cmp	r6, #0
   12bd0:	beq	12c6c <rb_clear_patricia+0xb4>
   12bd4:	mov	r9, r1
   12bd8:	mov	sl, #0
   12bdc:	add	r8, sp, #4
   12be0:	ldmib	r6, {r0, r5, r7}
   12be4:	cmp	r0, #0
   12be8:	beq	12c04 <rb_clear_patricia+0x4c>
   12bec:	bl	12c7c <Deref_Prefix>
   12bf0:	cmp	r9, #0
   12bf4:	ldrne	r0, [r6, #20]
   12bf8:	cmpne	r0, #0
   12bfc:	beq	12c04 <rb_clear_patricia+0x4c>
   12c00:	blx	r9
   12c04:	mov	r0, r6
   12c08:	bl	12c9c <rb_free>
   12c0c:	ldr	r0, [r4, #8]
   12c10:	sub	r0, r0, #1
   12c14:	str	r0, [r4, #8]
   12c18:	cmp	r5, #0
   12c1c:	beq	12c3c <rb_clear_patricia+0x84>
   12c20:	cmp	r7, #0
   12c24:	strne	r7, [r8, sl, lsl #2]
   12c28:	addne	sl, sl, #1
   12c2c:	mov	r6, r5
   12c30:	cmp	r6, #0
   12c34:	bne	12be0 <rb_clear_patricia+0x28>
   12c38:	b	12c6c <rb_clear_patricia+0xb4>
   12c3c:	cmp	r7, #0
   12c40:	beq	12c54 <rb_clear_patricia+0x9c>
   12c44:	mov	r6, r7
   12c48:	cmp	r6, #0
   12c4c:	bne	12be0 <rb_clear_patricia+0x28>
   12c50:	b	12c6c <rb_clear_patricia+0xb4>
   12c54:	cmp	sl, #0
   12c58:	beq	12c6c <rb_clear_patricia+0xb4>
   12c5c:	sub	sl, sl, #1
   12c60:	ldr	r6, [r8, sl, lsl #2]
   12c64:	cmp	r6, #0
   12c68:	bne	12be0 <rb_clear_patricia+0x28>
   12c6c:	mov	r0, r4
   12c70:	sub	sp, fp, #28
   12c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c78:	b	12c9c <rb_free>

00012c7c <Deref_Prefix>:
   12c7c:	cmp	r0, #0
   12c80:	bxeq	lr
   12c84:	ldr	r1, [r0, #4]
   12c88:	subs	r1, r1, #1
   12c8c:	str	r1, [r0, #4]
   12c90:	bgt	12c98 <Deref_Prefix+0x1c>
   12c94:	b	12c9c <rb_free>
   12c98:	bx	lr

00012c9c <rb_free>:
   12c9c:	cmp	r0, #0
   12ca0:	bxeq	lr
   12ca4:	b	501c <free@plt>

00012ca8 <rb_destroy_patricia>:
   12ca8:	push	{fp, lr}
   12cac:	mov	fp, sp
   12cb0:	bl	4e48 <rb_clear_patricia@plt>
   12cb4:	ldr	r0, [pc, #20]	; 12cd0 <rb_destroy_patricia+0x28>
   12cb8:	ldr	r0, [pc, r0]
   12cbc:	sub	r0, r0, #1
   12cc0:	ldr	r1, [pc, #12]	; 12cd4 <rb_destroy_patricia+0x2c>
   12cc4:	add	r1, pc, r1
   12cc8:	str	r0, [r1]
   12ccc:	pop	{fp, pc}
   12cd0:	.word	0x000331ec
   12cd4:	.word	0x000331e0

00012cd8 <rb_patricia_process>:
   12cd8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12cdc:	add	fp, sp, #24
   12ce0:	sub	sp, sp, #520	; 0x208
   12ce4:	ldr	r7, [r0]
   12ce8:	cmp	r7, #0
   12cec:	beq	12d68 <rb_patricia_process+0x90>
   12cf0:	mov	r4, r1
   12cf4:	mov	r5, #0
   12cf8:	add	r6, sp, #4
   12cfc:	ldr	r0, [r7, #4]
   12d00:	cmp	r0, #0
   12d04:	beq	12d10 <rb_patricia_process+0x38>
   12d08:	ldr	r1, [r7, #20]
   12d0c:	blx	r4
   12d10:	ldr	r1, [r7, #8]!
   12d14:	ldr	r0, [r7, #4]
   12d18:	cmp	r1, #0
   12d1c:	beq	12d3c <rb_patricia_process+0x64>
   12d20:	cmp	r0, #0
   12d24:	strne	r0, [r6, r5, lsl #2]
   12d28:	addne	r5, r5, #1
   12d2c:	ldr	r7, [r7]
   12d30:	cmp	r7, #0
   12d34:	bne	12cfc <rb_patricia_process+0x24>
   12d38:	b	12d68 <rb_patricia_process+0x90>
   12d3c:	cmp	r0, #0
   12d40:	beq	12d54 <rb_patricia_process+0x7c>
   12d44:	mov	r7, r0
   12d48:	cmp	r7, #0
   12d4c:	bne	12cfc <rb_patricia_process+0x24>
   12d50:	b	12d68 <rb_patricia_process+0x90>
   12d54:	cmp	r5, #0
   12d58:	beq	12d68 <rb_patricia_process+0x90>
   12d5c:	sub	r5, r5, #1
   12d60:	add	r7, r6, r5, lsl #2
   12d64:	b	12d2c <rb_patricia_process+0x54>
   12d68:	sub	sp, fp, #24
   12d6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012d70 <rb_patricia_search_exact>:
   12d70:	push	{r4, r5, r6, r7, fp, lr}
   12d74:	add	fp, sp, #16
   12d78:	ldr	r7, [r0]
   12d7c:	mov	r0, #0
   12d80:	cmp	r7, #0
   12d84:	beq	12e08 <rb_patricia_search_exact+0x98>
   12d88:	mov	r4, r1
   12d8c:	add	r1, r1, #8
   12d90:	ldrh	r5, [r4, #2]
   12d94:	mov	r2, #128	; 0x80
   12d98:	ldr	r3, [r7]
   12d9c:	cmp	r3, r5
   12da0:	bcs	12dc8 <rb_patricia_search_exact+0x58>
   12da4:	ldrb	r6, [r1, r3, lsr #3]
   12da8:	and	r3, r3, #7
   12dac:	tst	r6, r2, lsr r3
   12db0:	mov	r3, #12
   12db4:	movweq	r3, #8
   12db8:	ldr	r7, [r7, r3]
   12dbc:	cmp	r7, #0
   12dc0:	bne	12d98 <rb_patricia_search_exact+0x28>
   12dc4:	b	12e08 <rb_patricia_search_exact+0x98>
   12dc8:	bhi	12e08 <rb_patricia_search_exact+0x98>
   12dcc:	ldr	r1, [r7, #4]
   12dd0:	cmp	r1, #0
   12dd4:	popeq	{r4, r5, r6, r7, fp, pc}
   12dd8:	mov	r0, r1
   12ddc:	bl	12e6c <prefix_tochar>
   12de0:	mov	r6, r0
   12de4:	mov	r0, r4
   12de8:	bl	12e6c <prefix_tochar>
   12dec:	mov	r1, r0
   12df0:	mov	r0, r6
   12df4:	mov	r2, r5
   12df8:	bl	12e0c <comp_with_mask>
   12dfc:	cmp	r0, #0
   12e00:	moveq	r7, r0
   12e04:	mov	r0, r7
   12e08:	pop	{r4, r5, r6, r7, fp, pc}

00012e0c <comp_with_mask>:
   12e0c:	push	{r4, r5, r6, r7, fp, lr}
   12e10:	add	fp, sp, #16
   12e14:	mov	r7, r2
   12e18:	mov	r4, r1
   12e1c:	mov	r5, r0
   12e20:	lsr	r6, r2, #3
   12e24:	mov	r2, r6
   12e28:	bl	4da0 <memcmp@plt>
   12e2c:	mov	r1, r0
   12e30:	mov	r0, #0
   12e34:	cmp	r1, #0
   12e38:	popne	{r4, r5, r6, r7, fp, pc}
   12e3c:	ands	r0, r7, #7
   12e40:	moveq	r0, #1
   12e44:	popeq	{r4, r5, r6, r7, fp, pc}
   12e48:	ldrb	r1, [r5, r6]
   12e4c:	ldrb	r2, [r4, r6]
   12e50:	eor	r1, r2, r1
   12e54:	rsb	r0, r0, #8
   12e58:	mov	r2, #255	; 0xff
   12e5c:	and	r0, r1, r2, lsl r0
   12e60:	clz	r0, r0
   12e64:	lsr	r0, r0, #5
   12e68:	pop	{r4, r5, r6, r7, fp, pc}

00012e6c <prefix_tochar>:
   12e6c:	cmp	r0, #0
   12e70:	addne	r0, r0, #8
   12e74:	bx	lr

00012e78 <rb_patricia_search_best2>:
   12e78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e7c:	add	fp, sp, #24
   12e80:	sub	sp, sp, #520	; 0x208
   12e84:	ldr	r3, [r0]
   12e88:	cmp	r3, #0
   12e8c:	beq	12f54 <rb_patricia_search_best2+0xdc>
   12e90:	mov	r8, r1
   12e94:	add	r7, r1, #8
   12e98:	ldrh	r6, [r1, #2]
   12e9c:	mov	r0, #0
   12ea0:	mov	r5, #128	; 0x80
   12ea4:	mov	ip, sp
   12ea8:	ldr	r4, [r3]
   12eac:	cmp	r4, r6
   12eb0:	bcs	12ef0 <rb_patricia_search_best2+0x78>
   12eb4:	ldr	r1, [r3, #4]
   12eb8:	cmp	r1, #0
   12ebc:	strne	r3, [ip, r0, lsl #2]
   12ec0:	addne	r0, r0, #1
   12ec4:	ldrb	r1, [r7, r4, lsr #3]
   12ec8:	and	r4, r4, #7
   12ecc:	tst	r1, r5, lsr r4
   12ed0:	mov	r1, #12
   12ed4:	movweq	r1, #8
   12ed8:	ldr	r3, [r3, r1]
   12edc:	cmp	r3, #0
   12ee0:	bne	12ea8 <rb_patricia_search_best2+0x30>
   12ee4:	cmp	r0, #1
   12ee8:	bge	12f0c <rb_patricia_search_best2+0x94>
   12eec:	b	12f54 <rb_patricia_search_best2+0xdc>
   12ef0:	cmp	r2, #0
   12ef4:	ldrne	r1, [r3, #4]
   12ef8:	cmpne	r1, #0
   12efc:	strne	r3, [ip, r0, lsl #2]
   12f00:	addne	r0, r0, #1
   12f04:	cmp	r0, #1
   12f08:	blt	12f54 <rb_patricia_search_best2+0xdc>
   12f0c:	sub	r9, ip, #4
   12f10:	subs	r4, r0, #1
   12f14:	blt	12f54 <rb_patricia_search_best2+0xdc>
   12f18:	ldr	r5, [r9, r0, lsl #2]
   12f1c:	ldr	r6, [r5, #4]
   12f20:	mov	r0, r6
   12f24:	bl	12e6c <prefix_tochar>
   12f28:	mov	r7, r0
   12f2c:	mov	r0, r8
   12f30:	bl	12e6c <prefix_tochar>
   12f34:	mov	r1, r0
   12f38:	ldrh	r2, [r6, #2]
   12f3c:	mov	r0, r7
   12f40:	bl	12e0c <comp_with_mask>
   12f44:	cmp	r0, #0
   12f48:	mov	r0, r4
   12f4c:	beq	12f10 <rb_patricia_search_best2+0x98>
   12f50:	b	12f58 <rb_patricia_search_best2+0xe0>
   12f54:	mov	r5, #0
   12f58:	mov	r0, r5
   12f5c:	sub	sp, fp, #24
   12f60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012f64 <rb_patricia_search_best>:
   12f64:	mov	r2, #1
   12f68:	b	12e78 <rb_patricia_search_best2>

00012f6c <rb_patricia_lookup>:
   12f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	add	fp, sp, #28
   12f74:	sub	sp, sp, #4
   12f78:	mov	r4, r1
   12f7c:	mov	r9, r0
   12f80:	ldr	r3, [r0]
   12f84:	cmp	r3, #0
   12f88:	beq	13078 <rb_patricia_lookup+0x10c>
   12f8c:	add	r8, r4, #8
   12f90:	ldrh	r6, [r4, #2]
   12f94:	mov	r2, #128	; 0x80
   12f98:	mov	r0, r3
   12f9c:	ldr	r1, [r3]
   12fa0:	cmp	r1, r6
   12fa4:	bcc	12fb4 <rb_patricia_lookup+0x48>
   12fa8:	ldr	r3, [r0, #4]
   12fac:	cmp	r3, #0
   12fb0:	bne	12fec <rb_patricia_lookup+0x80>
   12fb4:	ldr	r3, [r9, #4]
   12fb8:	cmp	r1, r3
   12fbc:	bcs	12fe0 <rb_patricia_lookup+0x74>
   12fc0:	ldrb	r3, [r8, r1, lsr #3]
   12fc4:	and	r7, r1, #7
   12fc8:	tst	r3, r2, lsr r7
   12fcc:	beq	12fe0 <rb_patricia_lookup+0x74>
   12fd0:	ldr	r3, [r0, #12]
   12fd4:	cmp	r3, #0
   12fd8:	bne	12f98 <rb_patricia_lookup+0x2c>
   12fdc:	b	12fec <rb_patricia_lookup+0x80>
   12fe0:	ldr	r3, [r0, #8]
   12fe4:	cmp	r3, #0
   12fe8:	bne	12f98 <rb_patricia_lookup+0x2c>
   12fec:	cmp	r1, r6
   12ff0:	movcs	r1, r6
   12ff4:	ldr	r5, [r0, #4]
   12ff8:	add	ip, r5, #8
   12ffc:	cmp	r1, #0
   13000:	str	r4, [sp]
   13004:	beq	130b8 <rb_patricia_lookup+0x14c>
   13008:	ldrb	r2, [r8]
   1300c:	ldrb	r3, [ip]
   13010:	eor	r7, r3, r2
   13014:	mov	r2, #0
   13018:	tst	r7, #255	; 0xff
   1301c:	mov	r3, #0
   13020:	bne	13054 <rb_patricia_lookup+0xe8>
   13024:	add	r3, r4, #9
   13028:	add	r5, r5, #9
   1302c:	mov	sl, #8
   13030:	cmp	sl, r1
   13034:	bcs	130bc <rb_patricia_lookup+0x150>
   13038:	ldrb	r7, [r3], #1
   1303c:	ldrb	r4, [r5], #1
   13040:	eor	r7, r4, r7
   13044:	add	sl, sl, #8
   13048:	tst	r7, #255	; 0xff
   1304c:	beq	13030 <rb_patricia_lookup+0xc4>
   13050:	sub	r3, sl, #8
   13054:	uxtb	r7, r7
   13058:	mov	r5, #128	; 0x80
   1305c:	tst	r7, r5, lsr r2
   13060:	bne	13070 <rb_patricia_lookup+0x104>
   13064:	add	r2, r2, #1
   13068:	cmp	r2, #8
   1306c:	bcc	1305c <rb_patricia_lookup+0xf0>
   13070:	add	sl, r2, r3
   13074:	b	130bc <rb_patricia_lookup+0x150>
   13078:	mov	r0, #24
   1307c:	bl	12b98 <rb_malloc>
   13080:	mov	r7, r0
   13084:	ldrh	r0, [r4, #2]
   13088:	str	r0, [r7]
   1308c:	mov	r0, r4
   13090:	bl	13278 <Ref_Prefix>
   13094:	vmov.i32	q8, #0	; 0x00000000
   13098:	add	r1, r7, #8
   1309c:	vst1.32	{d16-d17}, [r1]
   130a0:	str	r0, [r7, #4]
   130a4:	str	r7, [r9]
   130a8:	ldr	r0, [r9, #8]
   130ac:	add	r0, r0, #1
   130b0:	str	r0, [r9, #8]
   130b4:	b	1326c <rb_patricia_lookup+0x300>
   130b8:	mov	sl, #0
   130bc:	cmp	sl, r1
   130c0:	movhi	sl, r1
   130c4:	mov	r5, r0
   130c8:	ldr	r0, [r0, #16]
   130cc:	cmp	r0, #0
   130d0:	beq	130e0 <rb_patricia_lookup+0x174>
   130d4:	ldr	r1, [r0]
   130d8:	cmp	r1, sl
   130dc:	bcs	130c4 <rb_patricia_lookup+0x158>
   130e0:	cmp	sl, r6
   130e4:	ldreq	r0, [r5]
   130e8:	cmpeq	r0, r6
   130ec:	beq	131c8 <rb_patricia_lookup+0x25c>
   130f0:	mov	r4, ip
   130f4:	mov	r0, #24
   130f8:	bl	12b98 <rb_malloc>
   130fc:	mov	r7, r0
   13100:	ldr	r0, [sp]
   13104:	ldrh	r1, [r0, #2]
   13108:	str	r1, [r7]
   1310c:	bl	13278 <Ref_Prefix>
   13110:	vmov.i32	q8, #0	; 0x00000000
   13114:	add	r1, r7, #8
   13118:	vst1.32	{d16-d17}, [r1]
   1311c:	str	r0, [r7, #4]
   13120:	ldr	r0, [r9, #8]
   13124:	add	r0, r0, #1
   13128:	str	r0, [r9, #8]
   1312c:	ldr	r0, [r5]
   13130:	cmp	r0, sl
   13134:	bne	13164 <rb_patricia_lookup+0x1f8>
   13138:	str	r5, [r7, #16]
   1313c:	ldr	r1, [r9, #4]
   13140:	cmp	r0, r1
   13144:	bcs	131c0 <rb_patricia_lookup+0x254>
   13148:	ldrb	r1, [r8, r0, lsr #3]
   1314c:	and	r0, r0, #7
   13150:	mov	r2, #128	; 0x80
   13154:	tst	r1, r2, lsr r0
   13158:	beq	131c0 <rb_patricia_lookup+0x254>
   1315c:	str	r7, [r5, #12]
   13160:	b	1326c <rb_patricia_lookup+0x300>
   13164:	cmp	sl, r6
   13168:	bne	131e8 <rb_patricia_lookup+0x27c>
   1316c:	ldr	r0, [r9, #4]
   13170:	cmp	r0, r6
   13174:	bls	1318c <rb_patricia_lookup+0x220>
   13178:	ldrb	r0, [r4, r6, lsr #3]
   1317c:	and	r2, r6, #7
   13180:	mov	r3, #128	; 0x80
   13184:	tst	r0, r3, lsr r2
   13188:	addne	r1, r7, #12
   1318c:	str	r5, [r1]
   13190:	ldr	r0, [r5, #16]
   13194:	str	r0, [r7, #16]
   13198:	ldr	r0, [r5, #16]
   1319c:	cmp	r0, #0
   131a0:	beq	131b4 <rb_patricia_lookup+0x248>
   131a4:	mov	r9, r0
   131a8:	ldr	r1, [r9, #12]!
   131ac:	cmp	r1, r5
   131b0:	addne	r9, r0, #8
   131b4:	str	r7, [r9]
   131b8:	str	r7, [r5, #16]
   131bc:	b	1326c <rb_patricia_lookup+0x300>
   131c0:	str	r7, [r5, #8]
   131c4:	b	1326c <rb_patricia_lookup+0x300>
   131c8:	ldr	r0, [r5, #4]
   131cc:	cmp	r0, #0
   131d0:	bne	131e0 <rb_patricia_lookup+0x274>
   131d4:	ldr	r0, [sp]
   131d8:	bl	13278 <Ref_Prefix>
   131dc:	str	r0, [r5, #4]
   131e0:	mov	r7, r5
   131e4:	b	1326c <rb_patricia_lookup+0x300>
   131e8:	mov	r0, #24
   131ec:	bl	12b98 <rb_malloc>
   131f0:	mov	r1, #0
   131f4:	str	sl, [r0]
   131f8:	str	r1, [r0, #4]
   131fc:	ldr	r2, [r5, #16]
   13200:	str	r2, [r0, #16]
   13204:	str	r1, [r0, #20]
   13208:	ldmib	r9, {r1, r2}
   1320c:	add	r2, r2, #1
   13210:	str	r2, [r9, #8]
   13214:	cmp	sl, r1
   13218:	bcs	1323c <rb_patricia_lookup+0x2d0>
   1321c:	ldrb	r1, [r8, sl, lsr #3]
   13220:	and	r2, sl, #7
   13224:	mov	r3, #128	; 0x80
   13228:	tst	r1, r3, lsr r2
   1322c:	beq	1323c <rb_patricia_lookup+0x2d0>
   13230:	str	r5, [r0, #8]
   13234:	str	r7, [r0, #12]
   13238:	b	13244 <rb_patricia_lookup+0x2d8>
   1323c:	str	r7, [r0, #8]
   13240:	str	r5, [r0, #12]
   13244:	str	r0, [r7, #16]
   13248:	ldr	r1, [r5, #16]
   1324c:	cmp	r1, #0
   13250:	beq	13264 <rb_patricia_lookup+0x2f8>
   13254:	mov	r9, r1
   13258:	ldr	r2, [r9, #12]!
   1325c:	cmp	r2, r5
   13260:	addne	r9, r1, #8
   13264:	str	r0, [r9]
   13268:	str	r0, [r5, #16]
   1326c:	mov	r0, r7
   13270:	sub	sp, fp, #28
   13274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013278 <Ref_Prefix>:
   13278:	cmp	r0, #0
   1327c:	moveq	r0, #0
   13280:	bxeq	lr
   13284:	ldr	r1, [r0, #4]
   13288:	cmp	r1, #0
   1328c:	addne	r1, r1, #1
   13290:	strne	r1, [r0, #4]
   13294:	bxne	lr
   13298:	ldrh	r2, [r0, #2]
   1329c:	ldrh	r3, [r0]
   132a0:	add	r1, r0, #8
   132a4:	mov	r0, r3
   132a8:	b	13778 <New_Prefix2>

000132ac <rb_patricia_remove>:
   132ac:	push	{r4, r5, r6, r7, fp, lr}
   132b0:	add	fp, sp, #16
   132b4:	mov	r5, r1
   132b8:	mov	r4, r0
   132bc:	ldr	r0, [r1, #8]
   132c0:	ldr	r6, [r1, #12]
   132c4:	cmp	r6, #0
   132c8:	beq	132f0 <rb_patricia_remove+0x44>
   132cc:	cmp	r0, #0
   132d0:	beq	132fc <rb_patricia_remove+0x50>
   132d4:	ldr	r0, [r5, #4]
   132d8:	cmp	r0, #0
   132dc:	blne	12c7c <Deref_Prefix>
   132e0:	mov	r0, #0
   132e4:	str	r0, [r5, #20]
   132e8:	str	r0, [r5, #4]
   132ec:	pop	{r4, r5, r6, r7, fp, pc}
   132f0:	cmp	r0, #0
   132f4:	beq	13344 <rb_patricia_remove+0x98>
   132f8:	ldr	r6, [r5, #8]
   132fc:	ldr	r7, [r5, #16]
   13300:	str	r7, [r6, #16]
   13304:	ldr	r0, [r5, #4]
   13308:	bl	12c7c <Deref_Prefix>
   1330c:	mov	r0, r5
   13310:	bl	12c9c <rb_free>
   13314:	ldr	r0, [r4, #8]
   13318:	sub	r0, r0, #1
   1331c:	str	r0, [r4, #8]
   13320:	cmp	r7, #0
   13324:	streq	r6, [r4]
   13328:	popeq	{r4, r5, r6, r7, fp, pc}
   1332c:	ldr	r0, [r7, #12]
   13330:	cmp	r0, r5
   13334:	streq	r6, [r7, #12]
   13338:	popeq	{r4, r5, r6, r7, fp, pc}
   1333c:	str	r6, [r7, #8]
   13340:	pop	{r4, r5, r6, r7, fp, pc}
   13344:	ldr	r0, [r5, #4]
   13348:	ldr	r6, [r5, #16]
   1334c:	bl	12c7c <Deref_Prefix>
   13350:	mov	r0, r5
   13354:	bl	12c9c <rb_free>
   13358:	ldr	r0, [r4, #8]
   1335c:	sub	r0, r0, #1
   13360:	str	r0, [r4, #8]
   13364:	cmp	r6, #0
   13368:	moveq	r0, #0
   1336c:	streq	r0, [r4]
   13370:	popeq	{r4, r5, r6, r7, fp, pc}
   13374:	mov	r0, r6
   13378:	ldr	r1, [r0, #12]!
   1337c:	cmp	r1, r5
   13380:	beq	13390 <rb_patricia_remove+0xe4>
   13384:	mov	r1, #0
   13388:	str	r1, [r6, #8]
   1338c:	b	1339c <rb_patricia_remove+0xf0>
   13390:	mov	r0, #0
   13394:	str	r0, [r6, #12]
   13398:	add	r0, r6, #8
   1339c:	ldr	r1, [r6, #4]
   133a0:	cmp	r1, #0
   133a4:	popne	{r4, r5, r6, r7, fp, pc}
   133a8:	ldr	r0, [r0]
   133ac:	ldr	r1, [r6, #16]
   133b0:	cmp	r1, #0
   133b4:	beq	133c8 <rb_patricia_remove+0x11c>
   133b8:	ldr	r2, [r1, #12]!
   133bc:	cmp	r2, r6
   133c0:	subne	r1, r1, #4
   133c4:	b	133cc <rb_patricia_remove+0x120>
   133c8:	mov	r1, r4
   133cc:	str	r0, [r1]
   133d0:	ldr	r1, [r6, #16]
   133d4:	str	r1, [r0, #16]
   133d8:	mov	r0, r6
   133dc:	bl	12c9c <rb_free>
   133e0:	ldr	r0, [r4, #8]
   133e4:	sub	r0, r0, #1
   133e8:	str	r0, [r4, #8]
   133ec:	pop	{r4, r5, r6, r7, fp, pc}

000133f0 <make_and_lookup_ip>:
   133f0:	push	{r4, r5, fp, lr}
   133f4:	add	fp, sp, #8
   133f8:	mov	r4, r0
   133fc:	mov	r3, r1
   13400:	ldrh	r0, [r3], #8
   13404:	cmp	r0, #10
   13408:	addne	r3, r1, #4
   1340c:	mov	r1, r3
   13410:	bl	13444 <New_Prefix>
   13414:	cmp	r0, #0
   13418:	moveq	r0, #0
   1341c:	popeq	{r4, r5, fp, pc}
   13420:	mov	r5, r0
   13424:	mov	r0, r4
   13428:	mov	r1, r5
   1342c:	bl	5220 <rb_patricia_lookup@plt>
   13430:	mov	r4, r0
   13434:	mov	r0, r5
   13438:	bl	12c7c <Deref_Prefix>
   1343c:	mov	r0, r4
   13440:	pop	{r4, r5, fp, pc}

00013444 <New_Prefix>:
   13444:	b	13778 <New_Prefix2>

00013448 <make_and_lookup>:
   13448:	push	{r4, r5, r6, sl, fp, lr}
   1344c:	add	fp, sp, #16
   13450:	mov	r6, r1
   13454:	mov	r4, r0
   13458:	mov	r0, #2
   1345c:	bl	134a8 <ascii2prefix>
   13460:	mov	r5, r0
   13464:	cmp	r0, #0
   13468:	bne	13488 <make_and_lookup+0x40>
   1346c:	mov	r0, #10
   13470:	mov	r1, r6
   13474:	bl	134a8 <ascii2prefix>
   13478:	mov	r5, r0
   1347c:	cmp	r0, #0
   13480:	moveq	r0, #0
   13484:	popeq	{r4, r5, r6, sl, fp, pc}
   13488:	mov	r0, r4
   1348c:	mov	r1, r5
   13490:	bl	5220 <rb_patricia_lookup@plt>
   13494:	mov	r4, r0
   13498:	mov	r0, r5
   1349c:	bl	12c7c <Deref_Prefix>
   134a0:	mov	r0, r4
   134a4:	pop	{r4, r5, r6, sl, fp, pc}

000134a8 <ascii2prefix>:
   134a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134ac:	add	fp, sp, #28
   134b0:	sub	sp, sp, #20
   134b4:	sub	sp, sp, #1024	; 0x400
   134b8:	mov	r8, #0
   134bc:	cmp	r1, #0
   134c0:	beq	135ac <ascii2prefix+0x104>
   134c4:	mov	r5, r1
   134c8:	mov	sl, r0
   134cc:	sub	r0, r0, #10
   134d0:	clz	r0, r0
   134d4:	lsr	r0, r0, #5
   134d8:	lsl	r6, r0, #7
   134dc:	cmp	sl, #2
   134e0:	movweq	r6, #32
   134e4:	mov	r0, r1
   134e8:	mov	r1, #47	; 0x2f
   134ec:	bl	4efc <strchr@plt>
   134f0:	cmp	r0, #0
   134f4:	beq	13568 <ascii2prefix+0xc0>
   134f8:	mov	r7, r0
   134fc:	add	r0, r0, #1
   13500:	bl	51f0 <atol@plt>
   13504:	mov	r4, r0
   13508:	sub	r7, r7, r5
   1350c:	mov	r9, sp
   13510:	mov	r0, r9
   13514:	mov	r1, r5
   13518:	mov	r2, r7
   1351c:	bl	5130 <memcpy@plt>
   13520:	mov	r0, #0
   13524:	strb	r0, [r9, r7]
   13528:	cmp	r4, r6
   1352c:	mov	r5, r4
   13530:	movgt	r5, r6
   13534:	cmp	r4, #1
   13538:	movlt	r5, r6
   1353c:	cmp	sl, #2
   13540:	bne	13578 <ascii2prefix+0xd0>
   13544:	sub	r2, fp, #48	; 0x30
   13548:	mov	r0, #2
   1354c:	mov	r1, r9
   13550:	bl	4f74 <rb_inet_pton@plt>
   13554:	cmp	r0, #1
   13558:	blt	135ac <ascii2prefix+0x104>
   1355c:	sub	r1, fp, #48	; 0x30
   13560:	mov	r0, #2
   13564:	b	135a0 <ascii2prefix+0xf8>
   13568:	mov	r9, r5
   1356c:	mov	r5, r6
   13570:	cmp	sl, #2
   13574:	beq	13544 <ascii2prefix+0x9c>
   13578:	cmp	sl, #10
   1357c:	bne	135ac <ascii2prefix+0x104>
   13580:	sub	r2, fp, #48	; 0x30
   13584:	mov	r0, #10
   13588:	mov	r1, r9
   1358c:	bl	4f74 <rb_inet_pton@plt>
   13590:	cmp	r0, #1
   13594:	blt	135ac <ascii2prefix+0x104>
   13598:	sub	r1, fp, #48	; 0x30
   1359c:	mov	r0, #10
   135a0:	mov	r2, r5
   135a4:	bl	13444 <New_Prefix>
   135a8:	mov	r8, r0
   135ac:	mov	r0, r8
   135b0:	sub	sp, fp, #28
   135b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000135b8 <rb_match_ip>:
   135b8:	push	{r4, r5, fp, lr}
   135bc:	add	fp, sp, #8
   135c0:	mov	r4, r0
   135c4:	mov	r3, r1
   135c8:	ldrh	r0, [r3], #8
   135cc:	cmp	r0, #10
   135d0:	addne	r3, r1, #4
   135d4:	mov	r2, #32
   135d8:	movweq	r2, #128	; 0x80
   135dc:	movwne	r0, #2
   135e0:	mov	r1, r3
   135e4:	bl	13444 <New_Prefix>
   135e8:	cmp	r0, #0
   135ec:	moveq	r0, #0
   135f0:	popeq	{r4, r5, fp, pc}
   135f4:	mov	r5, r0
   135f8:	mov	r0, r4
   135fc:	mov	r1, r5
   13600:	bl	4e9c <rb_patricia_search_best@plt>
   13604:	mov	r4, r0
   13608:	mov	r0, r5
   1360c:	bl	12c7c <Deref_Prefix>
   13610:	mov	r0, r4
   13614:	pop	{r4, r5, fp, pc}

00013618 <rb_match_ip_exact>:
   13618:	push	{r4, r5, fp, lr}
   1361c:	add	fp, sp, #8
   13620:	mov	r4, r0
   13624:	cmp	r2, #128	; 0x80
   13628:	mov	r5, r2
   1362c:	movcs	r5, #128	; 0x80
   13630:	cmp	r2, #32
   13634:	movcs	r2, #32
   13638:	mov	r3, r1
   1363c:	ldrh	r0, [r3], #8
   13640:	cmp	r0, #10
   13644:	moveq	r2, r5
   13648:	addne	r3, r1, #4
   1364c:	movwne	r0, #2
   13650:	mov	r1, r3
   13654:	bl	13444 <New_Prefix>
   13658:	cmp	r0, #0
   1365c:	moveq	r0, #0
   13660:	popeq	{r4, r5, fp, pc}
   13664:	mov	r5, r0
   13668:	mov	r0, r4
   1366c:	mov	r1, r5
   13670:	bl	51d8 <rb_patricia_search_exact@plt>
   13674:	mov	r4, r0
   13678:	mov	r0, r5
   1367c:	bl	12c7c <Deref_Prefix>
   13680:	mov	r0, r4
   13684:	pop	{r4, r5, fp, pc}

00013688 <rb_match_string>:
   13688:	push	{r4, r5, r6, sl, fp, lr}
   1368c:	add	fp, sp, #16
   13690:	mov	r5, r1
   13694:	mov	r4, r0
   13698:	mov	r0, #2
   1369c:	bl	134a8 <ascii2prefix>
   136a0:	cmp	r0, #0
   136a4:	beq	136c4 <rb_match_string+0x3c>
   136a8:	mov	r6, r0
   136ac:	mov	r0, r4
   136b0:	mov	r1, r6
   136b4:	bl	4e9c <rb_patricia_search_best@plt>
   136b8:	mov	r4, r0
   136bc:	mov	r0, r6
   136c0:	b	136f4 <rb_match_string+0x6c>
   136c4:	mov	r0, #10
   136c8:	mov	r1, r5
   136cc:	bl	134a8 <ascii2prefix>
   136d0:	cmp	r0, #0
   136d4:	moveq	r0, #0
   136d8:	popeq	{r4, r5, r6, sl, fp, pc}
   136dc:	mov	r5, r0
   136e0:	mov	r0, r4
   136e4:	mov	r1, r5
   136e8:	bl	4e9c <rb_patricia_search_best@plt>
   136ec:	mov	r4, r0
   136f0:	mov	r0, r5
   136f4:	bl	12c7c <Deref_Prefix>
   136f8:	mov	r0, r4
   136fc:	pop	{r4, r5, r6, sl, fp, pc}

00013700 <rb_match_exact_string>:
   13700:	push	{r4, r5, r6, sl, fp, lr}
   13704:	add	fp, sp, #16
   13708:	mov	r5, r1
   1370c:	mov	r4, r0
   13710:	mov	r0, #2
   13714:	bl	134a8 <ascii2prefix>
   13718:	cmp	r0, #0
   1371c:	beq	1373c <rb_match_exact_string+0x3c>
   13720:	mov	r6, r0
   13724:	mov	r0, r4
   13728:	mov	r1, r6
   1372c:	bl	51d8 <rb_patricia_search_exact@plt>
   13730:	mov	r4, r0
   13734:	mov	r0, r6
   13738:	b	1376c <rb_match_exact_string+0x6c>
   1373c:	mov	r0, #10
   13740:	mov	r1, r5
   13744:	bl	134a8 <ascii2prefix>
   13748:	cmp	r0, #0
   1374c:	moveq	r0, #0
   13750:	popeq	{r4, r5, r6, sl, fp, pc}
   13754:	mov	r5, r0
   13758:	mov	r0, r4
   1375c:	mov	r1, r5
   13760:	bl	51d8 <rb_patricia_search_exact@plt>
   13764:	mov	r4, r0
   13768:	mov	r0, r5
   1376c:	bl	12c7c <Deref_Prefix>
   13770:	mov	r0, r4
   13774:	pop	{r4, r5, r6, sl, fp, pc}

00013778 <New_Prefix2>:
   13778:	push	{r4, r5, r6, sl, fp, lr}
   1377c:	add	fp, sp, #16
   13780:	mov	r4, r2
   13784:	mov	r6, r1
   13788:	mov	r5, r0
   1378c:	cmp	r0, #2
   13790:	beq	137b8 <New_Prefix2+0x40>
   13794:	mov	r0, #0
   13798:	cmp	r5, #10
   1379c:	popne	{r4, r5, r6, sl, fp, pc}
   137a0:	mov	r0, #24
   137a4:	bl	12b98 <rb_malloc>
   137a8:	vld1.8	{d16-d17}, [r6]
   137ac:	add	r1, r0, #8
   137b0:	vst1.8	{d16-d17}, [r1]
   137b4:	b	137c8 <New_Prefix2+0x50>
   137b8:	mov	r0, #24
   137bc:	bl	12b98 <rb_malloc>
   137c0:	ldr	r1, [r6]
   137c4:	str	r1, [r0, #8]
   137c8:	strh	r5, [r0]
   137cc:	mov	r1, #1
   137d0:	str	r1, [r0, #4]
   137d4:	cmn	r4, #1
   137d8:	movle	r4, #128	; 0x80
   137dc:	strh	r4, [r0, #2]
   137e0:	pop	{r4, r5, r6, sl, fp, pc}

000137e4 <rb_dictionary_create>:
   137e4:	push	{r4, r5, r6, sl, fp, lr}
   137e8:	add	fp, sp, #16
   137ec:	mov	r4, r1
   137f0:	mov	r5, r0
   137f4:	mov	r0, #40	; 0x28
   137f8:	bl	13824 <rb_malloc>
   137fc:	mov	r6, r0
   13800:	str	r4, [r0]
   13804:	mov	r0, r5
   13808:	bl	13844 <rb_strdup>
   1380c:	str	r0, [r6, #20]
   13810:	add	r1, r6, #28
   13814:	mov	r0, r6
   13818:	bl	1387c <rb_dlinkAdd>
   1381c:	mov	r0, r6
   13820:	pop	{r4, r5, r6, sl, fp, pc}

00013824 <rb_malloc>:
   13824:	push	{fp, lr}
   13828:	mov	fp, sp
   1382c:	mov	r1, r0
   13830:	mov	r0, #1
   13834:	bl	4f2c <calloc@plt>
   13838:	cmp	r0, #0
   1383c:	popne	{fp, pc}
   13840:	bl	52a4 <rb_outofmemory@plt>

00013844 <rb_strdup>:
   13844:	push	{r4, r5, fp, lr}
   13848:	add	fp, sp, #8
   1384c:	mov	r4, r0
   13850:	bl	510c <strlen@plt>
   13854:	add	r0, r0, #1
   13858:	bl	52c8 <malloc@plt>
   1385c:	cmp	r0, #0
   13860:	beq	13878 <rb_strdup+0x34>
   13864:	mov	r5, r0
   13868:	mov	r1, r4
   1386c:	bl	51b4 <strcpy@plt>
   13870:	mov	r0, r5
   13874:	pop	{r4, r5, fp, pc}
   13878:	bl	52a4 <rb_outofmemory@plt>

0001387c <rb_dlinkAdd>:
   1387c:	mov	r2, #0
   13880:	stm	r1, {r0, r2}
   13884:	ldr	r0, [pc, #72]	; 138d4 <rb_dlinkAdd+0x58>
   13888:	ldr	r0, [pc, r0]
   1388c:	str	r0, [r1, #8]
   13890:	cmp	r0, #0
   13894:	beq	138a4 <rb_dlinkAdd+0x28>
   13898:	add	r0, r0, #4
   1389c:	str	r1, [r0]
   138a0:	b	138b8 <rb_dlinkAdd+0x3c>
   138a4:	ldr	r0, [pc, #44]	; 138d8 <rb_dlinkAdd+0x5c>
   138a8:	add	r0, pc, r0
   138ac:	ldr	r2, [r0, #4]!
   138b0:	cmp	r2, #0
   138b4:	streq	r1, [r0]
   138b8:	ldr	r0, [pc, #28]	; 138dc <rb_dlinkAdd+0x60>
   138bc:	add	r0, pc, r0
   138c0:	str	r1, [r0]
   138c4:	ldr	r1, [r0, #8]
   138c8:	add	r1, r1, #1
   138cc:	str	r1, [r0, #8]
   138d0:	bx	lr
   138d4:	.word	0x00032620
   138d8:	.word	0x00032600
   138dc:	.word	0x000325ec

000138e0 <rb_dictionary_set_comparator_func>:
   138e0:	str	r1, [r0]
   138e4:	bx	lr

000138e8 <rb_dictionary_get_comparator_func>:
   138e8:	ldr	r0, [r0]
   138ec:	bx	lr

000138f0 <rb_dictionary_get_linear_index>:
   138f0:	push	{r4, sl, fp, lr}
   138f4:	add	fp, sp, #8
   138f8:	mov	r4, r0
   138fc:	bl	534c <rb_dictionary_find@plt>
   13900:	cmp	r0, #0
   13904:	mvneq	r0, #0
   13908:	popeq	{r4, sl, fp, pc}
   1390c:	ldrb	r1, [r4, #24]
   13910:	tst	r1, #1
   13914:	beq	13948 <rb_dictionary_get_linear_index+0x58>
   13918:	ldr	r1, [r4, #8]
   1391c:	cmp	r1, #0
   13920:	beq	1393c <rb_dictionary_get_linear_index+0x4c>
   13924:	mov	r2, #0
   13928:	str	r2, [r1, #24]
   1392c:	add	r2, r2, #1
   13930:	ldr	r1, [r1, #12]
   13934:	cmp	r1, #0
   13938:	bne	13928 <rb_dictionary_get_linear_index+0x38>
   1393c:	ldrb	r1, [r4, #24]
   13940:	and	r1, r1, #254	; 0xfe
   13944:	strb	r1, [r4, #24]
   13948:	ldr	r0, [r0, #24]
   1394c:	pop	{r4, sl, fp, pc}

00013950 <rb_dictionary_find>:
   13950:	push	{r4, r5, r6, sl, fp, lr}
   13954:	add	fp, sp, #16
   13958:	mov	r6, r1
   1395c:	mov	r4, r0
   13960:	bl	13b54 <rb_dictionary_retune>
   13964:	ldr	r0, [r4, #4]
   13968:	mov	r5, #0
   1396c:	cmp	r0, #0
   13970:	beq	1398c <rb_dictionary_find+0x3c>
   13974:	ldr	r1, [r0, #20]
   13978:	ldr	r2, [r4]
   1397c:	mov	r0, r6
   13980:	blx	r2
   13984:	cmp	r0, #0
   13988:	ldreq	r5, [r4, #4]
   1398c:	mov	r0, r5
   13990:	pop	{r4, r5, r6, sl, fp, pc}

00013994 <rb_dictionary_destroy>:
   13994:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13998:	add	fp, sp, #24
   1399c:	mov	r8, r0
   139a0:	ldr	r7, [r0, #8]
   139a4:	cmp	r7, #0
   139a8:	beq	139e0 <rb_dictionary_destroy+0x4c>
   139ac:	mov	r5, r2
   139b0:	mov	r6, r1
   139b4:	ldr	r4, [r7, #12]
   139b8:	cmp	r6, #0
   139bc:	beq	139cc <rb_dictionary_destroy+0x38>
   139c0:	mov	r0, r7
   139c4:	mov	r1, r5
   139c8:	blx	r6
   139cc:	mov	r0, r7
   139d0:	bl	139fc <rb_free>
   139d4:	cmp	r4, #0
   139d8:	mov	r7, r4
   139dc:	bne	139b4 <rb_dictionary_destroy+0x20>
   139e0:	add	r0, r8, #28
   139e4:	bl	13a08 <rb_dlinkDelete>
   139e8:	ldr	r0, [r8, #20]
   139ec:	bl	139fc <rb_free>
   139f0:	mov	r0, r8
   139f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   139f8:	b	139fc <rb_free>

000139fc <rb_free>:
   139fc:	cmp	r0, #0
   13a00:	bxeq	lr
   13a04:	b	501c <free@plt>

00013a08 <rb_dlinkDelete>:
   13a08:	ldr	ip, [pc, #68]	; 13a54 <rb_dlinkDelete+0x4c>
   13a0c:	add	ip, pc, ip
   13a10:	ldmib	r0, {r2, r3}
   13a14:	add	r1, r3, #4
   13a18:	cmp	r3, #0
   13a1c:	addeq	r1, ip, #4
   13a20:	str	r2, [r1]
   13a24:	ldmib	r0, {r1, r2}
   13a28:	cmp	r1, #0
   13a2c:	mov	r3, ip
   13a30:	addne	r3, r1, #8
   13a34:	str	r2, [r3]
   13a38:	mov	r1, #0
   13a3c:	str	r1, [r0, #4]
   13a40:	str	r1, [r0, #8]
   13a44:	ldr	r0, [ip, #8]
   13a48:	sub	r0, r0, #1
   13a4c:	str	r0, [ip, #8]
   13a50:	bx	lr
   13a54:	.word	0x0003249c

00013a58 <rb_dictionary_foreach>:
   13a58:	push	{r4, r5, r6, sl, fp, lr}
   13a5c:	add	fp, sp, #16
   13a60:	ldr	r0, [r0, #8]
   13a64:	cmp	r0, #0
   13a68:	popeq	{r4, r5, r6, sl, fp, pc}
   13a6c:	mov	r4, r2
   13a70:	mov	r5, r1
   13a74:	ldr	r6, [r0, #12]
   13a78:	cmp	r5, #0
   13a7c:	beq	13a88 <rb_dictionary_foreach+0x30>
   13a80:	mov	r1, r4
   13a84:	blx	r5
   13a88:	cmp	r6, #0
   13a8c:	mov	r0, r6
   13a90:	bne	13a74 <rb_dictionary_foreach+0x1c>
   13a94:	pop	{r4, r5, r6, sl, fp, pc}

00013a98 <rb_dictionary_search>:
   13a98:	push	{r4, r5, r6, sl, fp, lr}
   13a9c:	add	fp, sp, #16
   13aa0:	ldr	r0, [r0, #8]
   13aa4:	cmp	r0, #0
   13aa8:	beq	13adc <rb_dictionary_search+0x44>
   13aac:	mov	r4, r2
   13ab0:	mov	r5, r1
   13ab4:	ldr	r6, [r0, #12]
   13ab8:	cmp	r5, #0
   13abc:	beq	13ad0 <rb_dictionary_search+0x38>
   13ac0:	mov	r1, r4
   13ac4:	blx	r5
   13ac8:	cmp	r0, #0
   13acc:	popne	{r4, r5, r6, sl, fp, pc}
   13ad0:	cmp	r6, #0
   13ad4:	mov	r0, r6
   13ad8:	bne	13ab4 <rb_dictionary_search+0x1c>
   13adc:	mov	r0, #0
   13ae0:	pop	{r4, r5, r6, sl, fp, pc}

00013ae4 <rb_dictionary_foreach_start>:
   13ae4:	mov	r2, #0
   13ae8:	str	r2, [r1, #4]
   13aec:	ldr	r2, [r0, #8]
   13af0:	str	r2, [r1]
   13af4:	cmp	r2, #0
   13af8:	bxeq	lr
   13afc:	str	r2, [r1, #4]
   13b00:	b	13b04 <rb_dictionary_foreach_next>

00013b04 <rb_dictionary_foreach_next>:
   13b04:	mov	r2, r0
   13b08:	ldr	r0, [r1]
   13b0c:	cmp	r0, #0
   13b10:	beq	13b2c <rb_dictionary_foreach_next+0x28>
   13b14:	ldr	r0, [r1, #4]
   13b18:	str	r0, [r1]
   13b1c:	cmp	r0, #0
   13b20:	ldrne	r0, [r0, #12]
   13b24:	strne	r0, [r1, #4]
   13b28:	bx	lr
   13b2c:	ldr	r0, [pc, #8]	; 13b3c <rb_dictionary_foreach_next+0x38>
   13b30:	add	r0, pc, r0
   13b34:	mov	r1, r2
   13b38:	b	5244 <rb_lib_log@plt>
   13b3c:	.word	0x00002cfb

00013b40 <rb_dictionary_foreach_cur>:
   13b40:	ldr	r0, [r1]
   13b44:	cmp	r0, #0
   13b48:	ldrne	r0, [r0, #16]
   13b4c:	moveq	r0, #0
   13b50:	bx	lr

00013b54 <rb_dictionary_retune>:
   13b54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b58:	add	fp, sp, #24
   13b5c:	sub	sp, sp, #32
   13b60:	mov	r4, r0
   13b64:	ldr	r0, [r0, #4]
   13b68:	cmp	r0, #0
   13b6c:	beq	13cac <rb_dictionary_retune+0x158>
   13b70:	mov	r5, r1
   13b74:	mov	r0, #0
   13b78:	str	r0, [sp, #4]
   13b7c:	str	r0, [sp, #8]
   13b80:	ldm	r4, {r2, r6}
   13b84:	ldr	r1, [r6, #20]
   13b88:	mov	r0, r5
   13b8c:	blx	r2
   13b90:	cmp	r0, #0
   13b94:	beq	13c70 <rb_dictionary_retune+0x11c>
   13b98:	add	r8, sp, #4
   13b9c:	mov	r7, r8
   13ba0:	cmn	r0, #1
   13ba4:	ble	13bec <rb_dictionary_retune+0x98>
   13ba8:	ldr	r0, [r6, #4]
   13bac:	cmp	r0, #0
   13bb0:	beq	13c88 <rb_dictionary_retune+0x134>
   13bb4:	ldr	r1, [r0, #20]
   13bb8:	ldr	r2, [r4]
   13bbc:	mov	r0, r5
   13bc0:	blx	r2
   13bc4:	cmp	r0, #1
   13bc8:	blt	13c18 <rb_dictionary_retune+0xc4>
   13bcc:	ldr	r1, [r6, #4]
   13bd0:	ldr	r0, [r1]
   13bd4:	str	r0, [r6, #4]
   13bd8:	str	r6, [r1]
   13bdc:	ldr	r0, [r1, #4]
   13be0:	cmp	r0, #0
   13be4:	bne	13c1c <rb_dictionary_retune+0xc8>
   13be8:	b	13c7c <rb_dictionary_retune+0x128>
   13bec:	ldr	r0, [r6]
   13bf0:	cmp	r0, #0
   13bf4:	beq	13c88 <rb_dictionary_retune+0x134>
   13bf8:	ldr	r1, [r0, #20]
   13bfc:	ldr	r2, [r4]
   13c00:	mov	r0, r5
   13c04:	blx	r2
   13c08:	cmn	r0, #1
   13c0c:	ble	13c2c <rb_dictionary_retune+0xd8>
   13c10:	mov	r0, r6
   13c14:	b	13c48 <rb_dictionary_retune+0xf4>
   13c18:	mov	r1, r6
   13c1c:	str	r1, [r7, #4]
   13c20:	add	r0, r1, #4
   13c24:	mov	r7, r1
   13c28:	b	13c50 <rb_dictionary_retune+0xfc>
   13c2c:	ldr	r0, [r6]
   13c30:	ldr	r1, [r0, #4]
   13c34:	str	r1, [r6]
   13c38:	str	r6, [r0, #4]
   13c3c:	ldr	r1, [r0]
   13c40:	cmp	r1, #0
   13c44:	beq	13c84 <rb_dictionary_retune+0x130>
   13c48:	str	r0, [r8]
   13c4c:	mov	r8, r0
   13c50:	ldr	r2, [r4]
   13c54:	ldr	r6, [r0]
   13c58:	ldr	r1, [r6, #20]
   13c5c:	mov	r0, r5
   13c60:	blx	r2
   13c64:	cmp	r0, #0
   13c68:	bne	13ba0 <rb_dictionary_retune+0x4c>
   13c6c:	b	13c88 <rb_dictionary_retune+0x134>
   13c70:	add	r7, sp, #4
   13c74:	mov	r8, r7
   13c78:	b	13c88 <rb_dictionary_retune+0x134>
   13c7c:	mov	r6, r1
   13c80:	b	13c88 <rb_dictionary_retune+0x134>
   13c84:	mov	r6, r0
   13c88:	ldr	r0, [r6]
   13c8c:	str	r0, [r7, #4]
   13c90:	ldr	r0, [r6, #4]
   13c94:	str	r0, [r8]
   13c98:	ldr	r0, [sp, #8]
   13c9c:	str	r0, [r6]
   13ca0:	ldr	r0, [sp, #4]
   13ca4:	str	r0, [r6, #4]
   13ca8:	str	r6, [r4, #4]
   13cac:	sub	sp, fp, #24
   13cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013cb4 <rb_dictionary_add>:
   13cb4:	push	{r4, r5, r6, sl, fp, lr}
   13cb8:	add	fp, sp, #16
   13cbc:	mov	r4, r2
   13cc0:	mov	r5, r1
   13cc4:	mov	r6, r0
   13cc8:	mov	r0, #28
   13ccc:	bl	13824 <rb_malloc>
   13cd0:	mov	r1, r0
   13cd4:	str	r4, [r0, #16]
   13cd8:	str	r5, [r0, #20]
   13cdc:	mov	r0, r6
   13ce0:	pop	{r4, r5, r6, sl, fp, lr}
   13ce4:	b	13ce8 <rb_dictionary_link>

00013ce8 <rb_dictionary_link>:
   13ce8:	push	{r4, r5, fp, lr}
   13cec:	add	fp, sp, #8
   13cf0:	mov	r4, r1
   13cf4:	mov	r5, r0
   13cf8:	ldrb	r0, [r0, #24]
   13cfc:	orr	r0, r0, #1
   13d00:	strb	r0, [r5, #24]
   13d04:	ldr	r0, [r5, #4]
   13d08:	ldr	r1, [r5, #16]
   13d0c:	add	r1, r1, #1
   13d10:	str	r1, [r5, #16]
   13d14:	cmp	r0, #0
   13d18:	beq	13d90 <rb_dictionary_link+0xa8>
   13d1c:	ldr	r1, [r4, #20]
   13d20:	mov	r0, r5
   13d24:	bl	13b54 <rb_dictionary_retune>
   13d28:	ldr	r0, [r4, #20]
   13d2c:	ldr	r2, [r5]
   13d30:	ldr	r1, [r5, #4]
   13d34:	ldr	r1, [r1, #20]
   13d38:	blx	r2
   13d3c:	cmn	r0, #1
   13d40:	ble	13dac <rb_dictionary_link+0xc4>
   13d44:	cmp	r0, #0
   13d48:	beq	13dfc <rb_dictionary_link+0x114>
   13d4c:	ldr	r0, [r5, #4]
   13d50:	ldr	r1, [r0, #4]
   13d54:	str	r1, [r4, #4]
   13d58:	ldr	r1, [r5, #4]
   13d5c:	str	r1, [r4]
   13d60:	mov	r2, #0
   13d64:	str	r2, [r0, #4]
   13d68:	ldr	r2, [r0, #12]
   13d6c:	add	r3, r2, #8
   13d70:	cmp	r2, #0
   13d74:	addeq	r3, r5, #12
   13d78:	str	r4, [r3]
   13d7c:	ldr	r2, [r0, #12]
   13d80:	str	r1, [r4, #8]
   13d84:	str	r2, [r4, #12]
   13d88:	str	r4, [r0, #12]
   13d8c:	b	13df0 <rb_dictionary_link+0x108>
   13d90:	vmov.i32	q8, #0	; 0x00000000
   13d94:	vst1.32	{d16-d17}, [r4]
   13d98:	str	r4, [r5, #4]
   13d9c:	str	r4, [r5, #8]
   13da0:	str	r4, [r5, #12]
   13da4:	mov	r0, r4
   13da8:	pop	{r4, r5, fp, pc}
   13dac:	ldr	r0, [r5, #4]
   13db0:	ldr	r0, [r0]
   13db4:	str	r0, [r4]
   13db8:	ldr	r0, [r5, #4]
   13dbc:	str	r0, [r4, #4]
   13dc0:	ldr	r1, [r5, #4]
   13dc4:	mov	r2, #0
   13dc8:	str	r2, [r1]
   13dcc:	ldr	r2, [r1, #8]
   13dd0:	add	r3, r2, #12
   13dd4:	cmp	r2, #0
   13dd8:	addeq	r3, r5, #8
   13ddc:	str	r4, [r3]
   13de0:	ldr	r2, [r1, #8]
   13de4:	str	r2, [r4, #8]
   13de8:	str	r0, [r4, #12]
   13dec:	str	r4, [r1, #8]
   13df0:	str	r4, [r5, #4]
   13df4:	mov	r0, r4
   13df8:	pop	{r4, r5, fp, pc}
   13dfc:	ldr	r0, [r5, #4]
   13e00:	ldr	r1, [r4, #20]
   13e04:	str	r1, [r0, #20]
   13e08:	ldr	r1, [r4, #16]
   13e0c:	str	r1, [r0, #16]
   13e10:	ldr	r0, [r5, #16]
   13e14:	sub	r0, r0, #1
   13e18:	str	r0, [r5, #16]
   13e1c:	mov	r0, r4
   13e20:	bl	139fc <rb_free>
   13e24:	ldr	r4, [r5, #4]
   13e28:	mov	r0, r4
   13e2c:	pop	{r4, r5, fp, pc}

00013e30 <rb_dictionary_delete>:
   13e30:	push	{r4, r5, r6, sl, fp, lr}
   13e34:	add	fp, sp, #16
   13e38:	mov	r5, r0
   13e3c:	bl	534c <rb_dictionary_find@plt>
   13e40:	cmp	r0, #0
   13e44:	moveq	r4, #0
   13e48:	moveq	r0, r4
   13e4c:	popeq	{r4, r5, r6, sl, fp, pc}
   13e50:	mov	r6, r0
   13e54:	ldr	r4, [r0, #16]
   13e58:	mov	r0, r5
   13e5c:	bl	13e70 <rb_dictionary_unlink_root>
   13e60:	mov	r0, r6
   13e64:	bl	139fc <rb_free>
   13e68:	mov	r0, r4
   13e6c:	pop	{r4, r5, r6, sl, fp, pc}

00013e70 <rb_dictionary_unlink_root>:
   13e70:	ldrb	r1, [r0, #24]
   13e74:	orr	r1, r1, #1
   13e78:	strb	r1, [r0, #24]
   13e7c:	ldr	ip, [r0, #4]
   13e80:	cmp	ip, #0
   13e84:	bxeq	lr
   13e88:	ldm	ip, {r1, r3}
   13e8c:	cmp	r1, #0
   13e90:	beq	13edc <rb_dictionary_unlink_root+0x6c>
   13e94:	cmp	r3, #0
   13e98:	beq	13ee4 <rb_dictionary_unlink_root+0x74>
   13e9c:	ldr	r2, [ip, #12]
   13ea0:	cmp	r2, r3
   13ea4:	beq	13eec <rb_dictionary_unlink_root+0x7c>
   13ea8:	mov	r1, r3
   13eac:	ldr	r3, [r3]
   13eb0:	cmp	r3, #0
   13eb4:	cmpne	r3, r2
   13eb8:	bne	13ea8 <rb_dictionary_unlink_root+0x38>
   13ebc:	ldr	r3, [r2, #4]
   13ec0:	str	r3, [r1]
   13ec4:	str	r2, [r0, #4]
   13ec8:	ldr	r1, [ip]
   13ecc:	str	r1, [r2]
   13ed0:	ldr	r1, [ip, #4]
   13ed4:	str	r1, [r2, #4]
   13ed8:	b	13ef8 <rb_dictionary_unlink_root+0x88>
   13edc:	str	r3, [r0, #4]
   13ee0:	b	13ef8 <rb_dictionary_unlink_root+0x88>
   13ee4:	str	r1, [r0, #4]
   13ee8:	b	13ef8 <rb_dictionary_unlink_root+0x88>
   13eec:	str	r2, [r0, #4]
   13ef0:	ldr	r1, [ip]
   13ef4:	str	r1, [r2]
   13ef8:	ldr	r1, [ip, #8]
   13efc:	cmp	r1, #0
   13f00:	ldrne	r2, [ip, #12]
   13f04:	strne	r2, [r1, #12]
   13f08:	ldr	r1, [r0, #8]
   13f0c:	cmp	r1, ip
   13f10:	ldreq	r1, [ip, #12]
   13f14:	streq	r1, [r0, #8]
   13f18:	ldr	r1, [ip, #12]
   13f1c:	cmp	r1, #0
   13f20:	ldrne	r2, [ip, #8]
   13f24:	strne	r2, [r1, #8]
   13f28:	ldr	r1, [r0, #12]
   13f2c:	cmp	r1, ip
   13f30:	ldreq	r1, [ip, #8]
   13f34:	streq	r1, [r0, #12]
   13f38:	ldr	r1, [r0, #16]
   13f3c:	sub	r1, r1, #1
   13f40:	str	r1, [r0, #16]
   13f44:	bx	lr

00013f48 <rb_dictionary_retrieve>:
   13f48:	push	{fp, lr}
   13f4c:	mov	fp, sp
   13f50:	bl	534c <rb_dictionary_find@plt>
   13f54:	cmp	r0, #0
   13f58:	ldrne	r0, [r0, #16]
   13f5c:	moveq	r0, #0
   13f60:	pop	{fp, pc}

00013f64 <rb_dictionary_size>:
   13f64:	ldr	r0, [r0, #16]
   13f68:	bx	lr

00013f6c <rb_dictionary_stats>:
   13f6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f70:	add	fp, sp, #24
   13f74:	sub	sp, sp, #280	; 0x118
   13f78:	mov	r5, r2
   13f7c:	mov	r7, r1
   13f80:	mov	r6, r0
   13f84:	ldr	r0, [r0, #16]
   13f88:	cmp	r0, #0
   13f8c:	beq	13fe4 <rb_dictionary_stats+0x78>
   13f90:	mov	r0, #0
   13f94:	str	r0, [sp, #20]
   13f98:	ldr	r0, [r6, #4]
   13f9c:	add	r2, sp, #20
   13fa0:	mov	r1, #0
   13fa4:	bl	14048 <stats_recurse>
   13fa8:	ldr	r1, [r6, #16]
   13fac:	ldr	r3, [r6, #20]
   13fb0:	ldr	r2, [sp, #20]
   13fb4:	ldr	r6, [pc, #120]	; 14034 <rb_dictionary_stats+0xc8>
   13fb8:	add	r6, pc, r6
   13fbc:	udiv	r4, r0, r1
   13fc0:	str	r6, [sp]
   13fc4:	str	r1, [sp, #4]
   13fc8:	str	r0, [sp, #8]
   13fcc:	str	r4, [sp, #12]
   13fd0:	str	r2, [sp, #16]
   13fd4:	add	r0, sp, #24
   13fd8:	ldr	r2, [pc, #88]	; 14038 <rb_dictionary_stats+0xcc>
   13fdc:	add	r2, pc, r2
   13fe0:	b	14018 <rb_dictionary_stats+0xac>
   13fe4:	ldr	r3, [r6, #20]
   13fe8:	ldr	r0, [pc, #76]	; 1403c <rb_dictionary_stats+0xd0>
   13fec:	add	r0, pc, r0
   13ff0:	ldr	r1, [pc, #72]	; 14040 <rb_dictionary_stats+0xd4>
   13ff4:	add	r1, pc, r1
   13ff8:	str	r1, [sp]
   13ffc:	str	r0, [sp, #4]
   14000:	str	r0, [sp, #8]
   14004:	str	r0, [sp, #12]
   14008:	str	r0, [sp, #16]
   1400c:	add	r0, sp, #24
   14010:	ldr	r2, [pc, #44]	; 14044 <rb_dictionary_stats+0xd8>
   14014:	add	r2, pc, r2
   14018:	mov	r1, #256	; 0x100
   1401c:	bl	54cc <snprintf@plt>
   14020:	add	r0, sp, #24
   14024:	mov	r1, r5
   14028:	blx	r7
   1402c:	sub	sp, fp, #24
   14030:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14034:	.word	0x000028e8
   14038:	.word	0x000028a0
   1403c:	.word	0x00001a8b
   14040:	.word	0x000028ac
   14044:	.word	0x00002891

00014048 <stats_recurse>:
   14048:	push	{r4, r5, r6, r7, fp, lr}
   1404c:	add	fp, sp, #16
   14050:	mov	r5, r2
   14054:	mov	r4, r1
   14058:	mov	r6, r0
   1405c:	ldr	r0, [r2]
   14060:	cmp	r0, r1
   14064:	strlt	r4, [r5]
   14068:	cmp	r6, #0
   1406c:	beq	140b4 <stats_recurse+0x6c>
   14070:	ldr	r0, [r6]
   14074:	cmp	r0, #0
   14078:	mov	r7, r4
   1407c:	beq	14090 <stats_recurse+0x48>
   14080:	add	r1, r4, #1
   14084:	mov	r2, r5
   14088:	bl	14048 <stats_recurse>
   1408c:	add	r7, r0, r4
   14090:	ldr	r0, [r6, #4]
   14094:	cmp	r0, #0
   14098:	beq	140b0 <stats_recurse+0x68>
   1409c:	add	r1, r4, #1
   140a0:	mov	r2, r5
   140a4:	bl	14048 <stats_recurse>
   140a8:	add	r0, r0, r7
   140ac:	pop	{r4, r5, r6, r7, fp, pc}
   140b0:	mov	r4, r7
   140b4:	mov	r0, r4
   140b8:	pop	{r4, r5, r6, r7, fp, pc}

000140bc <rb_dictionary_stats_walk>:
   140bc:	push	{r4, r5, r6, sl, fp, lr}
   140c0:	add	fp, sp, #16
   140c4:	ldr	r6, [pc, #48]	; 140fc <rb_dictionary_stats_walk+0x40>
   140c8:	ldr	r6, [pc, r6]
   140cc:	cmp	r6, #0
   140d0:	popeq	{r4, r5, r6, sl, fp, pc}
   140d4:	mov	r4, r1
   140d8:	mov	r5, r0
   140dc:	ldr	r0, [r6]
   140e0:	mov	r1, r5
   140e4:	mov	r2, r4
   140e8:	bl	52bc <rb_dictionary_stats@plt>
   140ec:	ldr	r6, [r6, #8]
   140f0:	cmp	r6, #0
   140f4:	bne	140dc <rb_dictionary_stats_walk+0x20>
   140f8:	pop	{r4, r5, r6, sl, fp, pc}
   140fc:	.word	0x00031de0

00014100 <rb_radixtree_create>:
   14100:	push	{r4, r5, r6, sl, fp, lr}
   14104:	add	fp, sp, #16
   14108:	mov	r4, r1
   1410c:	mov	r5, r0
   14110:	mov	r0, #28
   14114:	bl	14148 <rb_malloc>
   14118:	mov	r6, r0
   1411c:	str	r4, [r0]
   14120:	mov	r0, r5
   14124:	bl	14168 <rb_strdup>
   14128:	str	r0, [r6, #12]
   1412c:	mov	r0, #0
   14130:	str	r0, [r6, #4]
   14134:	add	r1, r6, #16
   14138:	mov	r0, r6
   1413c:	bl	141a0 <rb_dlinkAdd>
   14140:	mov	r0, r6
   14144:	pop	{r4, r5, r6, sl, fp, pc}

00014148 <rb_malloc>:
   14148:	push	{fp, lr}
   1414c:	mov	fp, sp
   14150:	mov	r1, r0
   14154:	mov	r0, #1
   14158:	bl	4f2c <calloc@plt>
   1415c:	cmp	r0, #0
   14160:	popne	{fp, pc}
   14164:	bl	52a4 <rb_outofmemory@plt>

00014168 <rb_strdup>:
   14168:	push	{r4, r5, fp, lr}
   1416c:	add	fp, sp, #8
   14170:	mov	r4, r0
   14174:	bl	510c <strlen@plt>
   14178:	add	r0, r0, #1
   1417c:	bl	52c8 <malloc@plt>
   14180:	cmp	r0, #0
   14184:	beq	1419c <rb_strdup+0x34>
   14188:	mov	r5, r0
   1418c:	mov	r1, r4
   14190:	bl	51b4 <strcpy@plt>
   14194:	mov	r0, r5
   14198:	pop	{r4, r5, fp, pc}
   1419c:	bl	52a4 <rb_outofmemory@plt>

000141a0 <rb_dlinkAdd>:
   141a0:	mov	r2, #0
   141a4:	stm	r1, {r0, r2}
   141a8:	ldr	r0, [pc, #64]	; 141f0 <rb_dlinkAdd+0x50>
   141ac:	ldr	r0, [pc, r0]
   141b0:	ldr	r2, [r0]
   141b4:	str	r2, [r1, #8]
   141b8:	cmp	r2, #0
   141bc:	beq	141cc <rb_dlinkAdd+0x2c>
   141c0:	add	r2, r2, #4
   141c4:	str	r1, [r2]
   141c8:	b	141dc <rb_dlinkAdd+0x3c>
   141cc:	mov	r2, r0
   141d0:	ldr	r3, [r2, #4]!
   141d4:	cmp	r3, #0
   141d8:	streq	r1, [r2]
   141dc:	str	r1, [r0]
   141e0:	ldr	r1, [r0, #8]
   141e4:	add	r1, r1, #1
   141e8:	str	r1, [r0, #8]
   141ec:	bx	lr
   141f0:	.word	0x00014230

000141f4 <rb_radixtree_destroy>:
   141f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   141f8:	add	fp, sp, #24
   141fc:	sub	sp, sp, #40	; 0x28
   14200:	mov	r8, r2
   14204:	mov	r6, r1
   14208:	mov	r4, r0
   1420c:	mov	r7, sp
   14210:	mov	r1, r7
   14214:	bl	4d58 <rb_radixtree_foreach_start@plt>
   14218:	mov	r0, r4
   1421c:	mov	r1, r7
   14220:	bl	50d0 <rb_radixtree_foreach_cur@plt>
   14224:	cmp	r0, #0
   14228:	beq	14278 <rb_radixtree_destroy+0x84>
   1422c:	mov	r7, sp
   14230:	ldr	r5, [sp, #8]
   14234:	cmp	r6, #0
   14238:	beq	1424c <rb_radixtree_destroy+0x58>
   1423c:	ldr	r1, [r5, #4]
   14240:	ldr	r0, [r5, #8]
   14244:	mov	r2, r8
   14248:	blx	r6
   1424c:	ldr	r1, [r5, #8]
   14250:	mov	r0, r4
   14254:	bl	55e0 <rb_radixtree_delete@plt>
   14258:	mov	r0, r4
   1425c:	mov	r1, r7
   14260:	bl	4d94 <rb_radixtree_foreach_next@plt>
   14264:	mov	r0, r4
   14268:	mov	r1, r7
   1426c:	bl	50d0 <rb_radixtree_foreach_cur@plt>
   14270:	cmp	r0, #0
   14274:	bne	14230 <rb_radixtree_destroy+0x3c>
   14278:	add	r0, r4, #16
   1427c:	bl	14428 <rb_dlinkDelete>
   14280:	ldr	r0, [r4, #12]
   14284:	bl	14478 <rb_free>
   14288:	mov	r0, r4
   1428c:	bl	14478 <rb_free>
   14290:	sub	sp, fp, #24
   14294:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014298 <rb_radixtree_foreach_start>:
   14298:	push	{r4, r5, fp, lr}
   1429c:	add	fp, sp, #8
   142a0:	cmp	r0, #0
   142a4:	popeq	{r4, r5, fp, pc}
   142a8:	mov	r4, r1
   142ac:	mov	r5, r0
   142b0:	ldr	r0, [r0, #4]
   142b4:	cmp	r0, #0
   142b8:	beq	142c4 <rb_radixtree_foreach_start+0x2c>
   142bc:	bl	14664 <first_leaf>
   142c0:	b	142c8 <rb_radixtree_foreach_start+0x30>
   142c4:	mov	r0, #0
   142c8:	str	r0, [r4, #12]
   142cc:	ldr	r0, [r4, #12]
   142d0:	str	r0, [r4, #8]
   142d4:	cmp	r0, #0
   142d8:	beq	142ec <rb_radixtree_foreach_start+0x54>
   142dc:	mov	r0, r5
   142e0:	mov	r1, r4
   142e4:	pop	{r4, r5, fp, lr}
   142e8:	b	14344 <rb_radixtree_foreach_next>
   142ec:	pop	{r4, r5, fp, pc}

000142f0 <rb_radixtree_foreach_cur>:
   142f0:	mov	r2, r0
   142f4:	mov	r0, #0
   142f8:	cmp	r2, #0
   142fc:	ldrne	r1, [r1, #8]
   14300:	cmpne	r1, #0
   14304:	ldrne	r0, [r1, #4]
   14308:	bx	lr

0001430c <rb_radixtree_delete>:
   1430c:	push	{r4, r5, fp, lr}
   14310:	add	fp, sp, #8
   14314:	mov	r5, r0
   14318:	mov	r4, #0
   1431c:	mov	r2, #0
   14320:	bl	5490 <rb_radixtree_elem_find@plt>
   14324:	cmp	r0, #0
   14328:	beq	1433c <rb_radixtree_delete+0x30>
   1432c:	mov	r1, r0
   14330:	ldr	r4, [r0, #4]
   14334:	mov	r0, r5
   14338:	bl	4cf8 <rb_radixtree_elem_delete@plt>
   1433c:	mov	r0, r4
   14340:	pop	{r4, r5, fp, pc}

00014344 <rb_radixtree_foreach_next>:
   14344:	push	{r4, r5, fp, lr}
   14348:	add	fp, sp, #8
   1434c:	cmp	r0, #0
   14350:	beq	14424 <rb_radixtree_foreach_next+0xe0>
   14354:	mov	r4, r1
   14358:	ldr	r0, [r1, #8]
   1435c:	cmp	r0, #0
   14360:	beq	14424 <rb_radixtree_foreach_next+0xe0>
   14364:	ldr	r0, [r4, #12]
   14368:	str	r0, [r4, #8]
   1436c:	cmp	r0, #0
   14370:	popeq	{r4, r5, fp, pc}
   14374:	ldr	r1, [r0, #12]
   14378:	cmp	r1, #0
   1437c:	beq	1441c <rb_radixtree_foreach_next+0xd8>
   14380:	ldrb	r2, [r0, #16]
   14384:	b	14390 <rb_radixtree_foreach_next+0x4c>
   14388:	mov	r2, #0
   1438c:	mov	r1, r5
   14390:	mov	r3, r2
   14394:	add	r2, r1, r3, lsl #2
   14398:	ldr	r5, [r2, #4]
   1439c:	add	r2, r3, #1
   143a0:	cmp	r3, #14
   143a4:	bgt	143b4 <rb_radixtree_foreach_next+0x70>
   143a8:	cmp	r5, #0
   143ac:	mov	r3, r2
   143b0:	beq	14394 <rb_radixtree_foreach_next+0x50>
   143b4:	cmp	r5, #0
   143b8:	beq	143d0 <rb_radixtree_foreach_next+0x8c>
   143bc:	ldr	r3, [r5]
   143c0:	cmn	r3, #1
   143c4:	bne	14388 <rb_radixtree_foreach_next+0x44>
   143c8:	cmp	r5, r0
   143cc:	bne	14404 <rb_radixtree_foreach_next+0xc0>
   143d0:	sub	r3, r2, #1
   143d4:	cmp	r3, #15
   143d8:	blt	14390 <rb_radixtree_foreach_next+0x4c>
   143dc:	ldr	r3, [r1, #68]	; 0x44
   143e0:	cmp	r3, #0
   143e4:	beq	1441c <rb_radixtree_foreach_next+0xd8>
   143e8:	ldrb	r2, [r1, #72]	; 0x48
   143ec:	cmp	r2, #14
   143f0:	mov	r1, r3
   143f4:	bhi	143dc <rb_radixtree_foreach_next+0x98>
   143f8:	add	r2, r2, #1
   143fc:	mov	r1, r3
   14400:	b	14390 <rb_radixtree_foreach_next+0x4c>
   14404:	ldr	r1, [r0, #8]
   14408:	ldr	r0, [r5, #8]
   1440c:	bl	5604 <strcmp@plt>
   14410:	cmn	r0, #1
   14414:	strgt	r5, [r4, #12]
   14418:	popgt	{r4, r5, fp, pc}
   1441c:	mov	r0, #0
   14420:	str	r0, [r4, #12]
   14424:	pop	{r4, r5, fp, pc}

00014428 <rb_dlinkDelete>:
   14428:	ldr	ip, [pc, #68]	; 14474 <rb_dlinkDelete+0x4c>
   1442c:	ldr	ip, [pc, ip]
   14430:	ldmib	r0, {r2, r3}
   14434:	add	r1, r3, #4
   14438:	cmp	r3, #0
   1443c:	addeq	r1, ip, #4
   14440:	str	r2, [r1]
   14444:	ldmib	r0, {r1, r2}
   14448:	cmp	r1, #0
   1444c:	mov	r3, ip
   14450:	addne	r3, r1, #8
   14454:	str	r2, [r3]
   14458:	mov	r1, #0
   1445c:	str	r1, [r0, #4]
   14460:	str	r1, [r0, #8]
   14464:	ldr	r0, [ip, #8]
   14468:	sub	r0, r0, #1
   1446c:	str	r0, [ip, #8]
   14470:	bx	lr
   14474:	.word	0x00013fb0

00014478 <rb_free>:
   14478:	cmp	r0, #0
   1447c:	bxeq	lr
   14480:	b	501c <free@plt>

00014484 <rb_radixtree_foreach>:
   14484:	push	{r4, r5, r6, r7, fp, lr}
   14488:	add	fp, sp, #16
   1448c:	ldr	r0, [r0, #4]
   14490:	cmp	r0, #0
   14494:	beq	14570 <rb_radixtree_foreach+0xec>
   14498:	mov	r4, r2
   1449c:	mov	r3, r1
   144a0:	ldr	r1, [r0]
   144a4:	cmn	r1, #1
   144a8:	beq	14554 <rb_radixtree_foreach+0xd0>
   144ac:	mov	r1, #0
   144b0:	b	144b8 <rb_radixtree_foreach+0x34>
   144b4:	add	r1, r2, #1
   144b8:	mov	r5, r0
   144bc:	add	r0, r5, r1, lsl #2
   144c0:	ldr	r2, [r0, #4]
   144c4:	add	r6, r1, #1
   144c8:	cmp	r1, #14
   144cc:	bgt	144dc <rb_radixtree_foreach+0x58>
   144d0:	cmp	r2, #0
   144d4:	mov	r1, r6
   144d8:	beq	144bc <rb_radixtree_foreach+0x38>
   144dc:	cmp	r2, #0
   144e0:	beq	14520 <rb_radixtree_foreach+0x9c>
   144e4:	ldr	r0, [r2]
   144e8:	cmn	r0, #1
   144ec:	mov	r0, r5
   144f0:	movne	r0, r2
   144f4:	mov	r1, r6
   144f8:	movwne	r1, #0
   144fc:	bne	14528 <rb_radixtree_foreach+0xa4>
   14500:	cmp	r3, #0
   14504:	beq	14528 <rb_radixtree_foreach+0xa4>
   14508:	ldr	r1, [r2, #4]
   1450c:	ldr	r0, [r2, #8]
   14510:	mov	r2, r4
   14514:	mov	r7, r3
   14518:	blx	r3
   1451c:	mov	r3, r7
   14520:	mov	r0, r5
   14524:	mov	r1, r6
   14528:	cmp	r1, #16
   1452c:	blt	144b8 <rb_radixtree_foreach+0x34>
   14530:	mov	r1, r0
   14534:	ldr	r0, [r1, #68]	; 0x44
   14538:	cmp	r0, #0
   1453c:	popeq	{r4, r5, r6, r7, fp, pc}
   14540:	ldrb	r2, [r1, #72]	; 0x48
   14544:	cmp	r2, #14
   14548:	mov	r1, r0
   1454c:	bhi	14534 <rb_radixtree_foreach+0xb0>
   14550:	b	144b4 <rb_radixtree_foreach+0x30>
   14554:	cmp	r3, #0
   14558:	beq	14570 <rb_radixtree_foreach+0xec>
   1455c:	ldr	r1, [r0, #4]
   14560:	ldr	r0, [r0, #8]
   14564:	mov	r2, r4
   14568:	pop	{r4, r5, r6, r7, fp, lr}
   1456c:	bx	r3
   14570:	pop	{r4, r5, r6, r7, fp, pc}

00014574 <rb_radixtree_search>:
   14574:	push	{r4, r5, r6, r7, fp, lr}
   14578:	add	fp, sp, #16
   1457c:	ldr	r5, [r0, #4]
   14580:	mov	r0, #0
   14584:	cmp	r5, #0
   14588:	beq	14660 <rb_radixtree_search+0xec>
   1458c:	mov	r4, r2
   14590:	mov	r3, r1
   14594:	ldr	r1, [r5]
   14598:	cmn	r1, #1
   1459c:	bne	145c0 <rb_radixtree_search+0x4c>
   145a0:	cmp	r3, #0
   145a4:	beq	14660 <rb_radixtree_search+0xec>
   145a8:	ldr	r1, [r5, #4]
   145ac:	ldr	r0, [r5, #8]
   145b0:	mov	r2, r4
   145b4:	pop	{r4, r5, r6, r7, fp, lr}
   145b8:	bx	r3
   145bc:	mov	r5, r0
   145c0:	mov	r6, #0
   145c4:	b	145cc <rb_radixtree_search+0x58>
   145c8:	mov	r5, #0
   145cc:	mov	r1, r6
   145d0:	add	r0, r5, r1, lsl #2
   145d4:	ldr	r0, [r0, #4]
   145d8:	add	r6, r1, #1
   145dc:	cmp	r1, #14
   145e0:	bgt	145f0 <rb_radixtree_search+0x7c>
   145e4:	cmp	r0, #0
   145e8:	mov	r1, r6
   145ec:	beq	145d0 <rb_radixtree_search+0x5c>
   145f0:	cmp	r0, #0
   145f4:	beq	1462c <rb_radixtree_search+0xb8>
   145f8:	ldr	r1, [r0]
   145fc:	cmn	r1, #1
   14600:	bne	145bc <rb_radixtree_search+0x48>
   14604:	cmp	r3, #0
   14608:	beq	1462c <rb_radixtree_search+0xb8>
   1460c:	ldr	r1, [r0, #4]
   14610:	ldr	r0, [r0, #8]
   14614:	mov	r2, r4
   14618:	mov	r7, r3
   1461c:	blx	r3
   14620:	mov	r3, r7
   14624:	cmp	r0, #0
   14628:	popne	{r4, r5, r6, r7, fp, pc}
   1462c:	sub	r0, r6, #1
   14630:	cmp	r0, #15
   14634:	blt	145cc <rb_radixtree_search+0x58>
   14638:	ldr	r0, [r5, #68]	; 0x44
   1463c:	ldrb	r6, [r5, #72]	; 0x48
   14640:	cmp	r0, #0
   14644:	beq	145c8 <rb_radixtree_search+0x54>
   14648:	cmp	r6, #14
   1464c:	mov	r5, r0
   14650:	bhi	14638 <rb_radixtree_search+0xc4>
   14654:	add	r6, r6, #1
   14658:	mov	r5, r0
   1465c:	b	145cc <rb_radixtree_search+0x58>
   14660:	pop	{r4, r5, r6, r7, fp, pc}

00014664 <first_leaf>:
   14664:	b	14698 <first_leaf+0x34>
   14668:	mov	r0, r1
   1466c:	b	14698 <first_leaf+0x34>
   14670:	mov	r1, r0
   14674:	mov	r2, #0
   14678:	add	r0, r1, r2, lsl #2
   1467c:	ldr	r0, [r0, #4]
   14680:	cmp	r0, #0
   14684:	bne	14698 <first_leaf+0x34>
   14688:	add	r2, r2, #1
   1468c:	cmp	r2, #15
   14690:	bls	14678 <first_leaf+0x14>
   14694:	b	14668 <first_leaf+0x4>
   14698:	ldr	r1, [r0]
   1469c:	cmn	r1, #1
   146a0:	bxeq	lr
   146a4:	b	14670 <first_leaf+0xc>

000146a8 <rb_radixtree_elem_find>:
   146a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146ac:	add	fp, sp, #28
   146b0:	sub	sp, sp, #260	; 0x104
   146b4:	mov	r8, r2
   146b8:	mov	r4, r1
   146bc:	mov	sl, r0
   146c0:	mov	r0, r1
   146c4:	bl	510c <strlen@plt>
   146c8:	mov	r5, r0
   146cc:	ldr	r0, [sl]
   146d0:	mov	r6, #0
   146d4:	cmp	r0, #0
   146d8:	beq	14700 <rb_radixtree_elem_find+0x58>
   146dc:	cmp	r5, #256	; 0x100
   146e0:	blt	14708 <rb_radixtree_elem_find+0x60>
   146e4:	mov	r0, r4
   146e8:	bl	14168 <rb_strdup>
   146ec:	mov	r7, r0
   146f0:	ldr	r1, [sl]
   146f4:	blx	r1
   146f8:	mov	r9, r7
   146fc:	b	1472c <rb_radixtree_elem_find+0x84>
   14700:	mov	r7, r4
   14704:	b	14728 <rb_radixtree_elem_find+0x80>
   14708:	mov	r7, sp
   1470c:	mov	r0, r7
   14710:	mov	r1, r4
   14714:	mov	r2, #256	; 0x100
   14718:	bl	4fe0 <rb_strlcpy@plt>
   1471c:	ldr	r1, [sl]
   14720:	mov	r0, r7
   14724:	blx	r1
   14728:	mov	r9, #0
   1472c:	ldr	r4, [sl, #4]
   14730:	cmp	r4, #0
   14734:	beq	147a0 <rb_radixtree_elem_find+0xf8>
   14738:	mov	ip, #4
   1473c:	mov	r1, #15
   14740:	mov	r6, #0
   14744:	ldr	r2, [r4]
   14748:	cmn	r2, #1
   1474c:	beq	14780 <rb_radixtree_elem_find+0xd8>
   14750:	add	r3, r2, r2, lsr #31
   14754:	cmp	r5, r3, asr #1
   14758:	mov	r0, #0
   1475c:	asrgt	r0, r3, #1
   14760:	ldrbgt	r0, [r7, r0]
   14764:	bicgt	r2, ip, r2, lsl #2
   14768:	andgt	r0, r1, r0, lsr r2
   1476c:	add	r0, r4, r0, lsl #2
   14770:	ldr	r4, [r0, #4]
   14774:	cmp	r4, #0
   14778:	bne	14744 <rb_radixtree_elem_find+0x9c>
   1477c:	b	147a0 <rb_radixtree_elem_find+0xf8>
   14780:	cmp	r8, #0
   14784:	bne	1479c <rb_radixtree_elem_find+0xf4>
   14788:	ldr	r0, [r4, #8]
   1478c:	mov	r1, r7
   14790:	bl	5604 <strcmp@plt>
   14794:	cmp	r0, #0
   14798:	movne	r4, #0
   1479c:	mov	r6, r4
   147a0:	cmp	r9, #0
   147a4:	movne	r0, r9
   147a8:	blne	14478 <rb_free>
   147ac:	mov	r0, r6
   147b0:	sub	sp, fp, #28
   147b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000147b8 <rb_radixtree_foreach_start_from>:
   147b8:	push	{r4, r5, fp, lr}
   147bc:	add	fp, sp, #8
   147c0:	mov	r4, r1
   147c4:	mov	r5, r0
   147c8:	cmp	r2, #0
   147cc:	beq	147fc <rb_radixtree_foreach_start_from+0x44>
   147d0:	mov	r0, #0
   147d4:	str	r0, [r4, #8]
   147d8:	mov	r0, r5
   147dc:	mov	r1, r2
   147e0:	mov	r2, #1
   147e4:	bl	5490 <rb_radixtree_elem_find@plt>
   147e8:	str	r0, [r4, #12]
   147ec:	mov	r0, r5
   147f0:	mov	r1, r4
   147f4:	pop	{r4, r5, fp, lr}
   147f8:	b	14344 <rb_radixtree_foreach_next>
   147fc:	mov	r0, r5
   14800:	mov	r1, r4
   14804:	pop	{r4, r5, fp, lr}
   14808:	b	14298 <rb_radixtree_foreach_start>

0001480c <rb_radixtree_elem_add>:
   1480c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14810:	add	fp, sp, #28
   14814:	sub	sp, sp, #20
   14818:	mov	r9, r2
   1481c:	mov	r5, r1
   14820:	mov	r6, r0
   14824:	mov	r0, r1
   14828:	bl	510c <strlen@plt>
   1482c:	mov	r4, r0
   14830:	mov	r0, r5
   14834:	bl	14168 <rb_strdup>
   14838:	cmp	r0, #0
   1483c:	beq	14930 <rb_radixtree_elem_add+0x124>
   14840:	mov	r1, r0
   14844:	ldr	r2, [r6]
   14848:	cmp	r2, #0
   1484c:	str	r0, [sp, #16]
   14850:	beq	14860 <rb_radixtree_elem_add+0x54>
   14854:	mov	r0, r1
   14858:	blx	r2
   1485c:	ldr	r1, [sp, #16]
   14860:	mov	sl, r6
   14864:	ldr	r7, [sl, #4]!
   14868:	cmp	r7, #0
   1486c:	beq	148c4 <rb_radixtree_elem_add+0xb8>
   14870:	ldr	r2, [r7]
   14874:	cmn	r2, #1
   14878:	beq	14910 <rb_radixtree_elem_add+0x104>
   1487c:	mov	ip, #4
   14880:	mov	r0, #15
   14884:	mov	r5, r7
   14888:	add	r3, r2, r2, lsr #31
   1488c:	mov	r8, #0
   14890:	cmp	r4, r3, asr #1
   14894:	asrgt	r3, r3, #1
   14898:	ldrbgt	r3, [r1, r3]
   1489c:	bicgt	r2, ip, r2, lsl #2
   148a0:	andgt	r8, r0, r3, lsr r2
   148a4:	add	r2, r5, r8, lsl #2
   148a8:	ldr	r7, [r2, #4]
   148ac:	cmp	r7, #0
   148b0:	beq	1493c <rb_radixtree_elem_add+0x130>
   148b4:	ldr	r2, [r7]
   148b8:	cmn	r2, #1
   148bc:	bne	14884 <rb_radixtree_elem_add+0x78>
   148c0:	b	14918 <rb_radixtree_elem_add+0x10c>
   148c4:	mov	r8, #18
   148c8:	mov	r5, #0
   148cc:	mov	r0, #20
   148d0:	bl	14148 <rb_malloc>
   148d4:	str	r0, [r6, #4]
   148d8:	mvn	r1, #0
   148dc:	stm	r0, {r1, r9}
   148e0:	ldr	r0, [r6, #4]
   148e4:	ldr	r1, [sp, #16]
   148e8:	str	r1, [r0, #8]
   148ec:	ldr	r0, [r6, #4]
   148f0:	str	r5, [r0, #12]
   148f4:	ldr	r0, [r6, #4]
   148f8:	strb	r8, [r0, #16]
   148fc:	ldmib	r6, {r0, r1}
   14900:	add	r1, r1, #1
   14904:	str	r1, [r6, #8]
   14908:	sub	sp, fp, #28
   1490c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14910:	mov	r5, #0
   14914:	mov	r8, #18
   14918:	ldr	r0, [r7, #8]
   1491c:	bl	5604 <strcmp@plt>
   14920:	cmp	r0, #0
   14924:	bne	14950 <rb_radixtree_elem_add+0x144>
   14928:	ldr	r0, [sp, #16]
   1492c:	bl	14478 <rb_free>
   14930:	mov	r0, #0
   14934:	sub	sp, fp, #28
   14938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1493c:	mov	r0, r5
   14940:	bl	14664 <first_leaf>
   14944:	mov	r7, r0
   14948:	cmp	r0, #0
   1494c:	beq	148cc <rb_radixtree_elem_add+0xc0>
   14950:	str	sl, [sp]
   14954:	str	r9, [sp, #8]
   14958:	str	r6, [sp, #12]
   1495c:	ldr	r0, [r7, #8]
   14960:	mvn	sl, #0
   14964:	mov	r1, #0
   14968:	mov	r2, #4
   1496c:	mov	r3, #15
   14970:	ldr	ip, [sp, #16]
   14974:	add	sl, sl, #1
   14978:	ldrb	r4, [ip, sl, lsr #1]
   1497c:	ldrb	r6, [r0, sl, lsr #1]
   14980:	eor	r6, r6, r4
   14984:	bic	r4, r2, r1
   14988:	add	r1, r1, #4
   1498c:	tst	r6, r3, lsl r4
   14990:	beq	14974 <rb_radixtree_elem_add+0x168>
   14994:	lsr	r6, sl, #1
   14998:	mov	r1, #1
   1499c:	mov	r9, #0
   149a0:	cmp	r5, #0
   149a4:	beq	149f8 <rb_radixtree_elem_add+0x1ec>
   149a8:	ldr	r0, [r5]
   149ac:	cmp	r0, sl
   149b0:	ble	149d8 <rb_radixtree_elem_add+0x1cc>
   149b4:	ldr	r9, [r5, #68]	; 0x44
   149b8:	ldrb	r8, [r5, #72]	; 0x48
   149bc:	cmp	r9, #0
   149c0:	beq	149f4 <rb_radixtree_elem_add+0x1e8>
   149c4:	ldr	r0, [r9]
   149c8:	cmp	r0, sl
   149cc:	mov	r5, r9
   149d0:	bgt	149b4 <rb_radixtree_elem_add+0x1a8>
   149d4:	b	149dc <rb_radixtree_elem_add+0x1d0>
   149d8:	mov	r9, r5
   149dc:	ldr	r0, [r9]
   149e0:	mov	r1, #0
   149e4:	cmp	r0, sl
   149e8:	mov	r5, r9
   149ec:	blt	149f8 <rb_radixtree_elem_add+0x1ec>
   149f0:	b	14ad8 <rb_radixtree_elem_add+0x2cc>
   149f4:	mov	r9, #0
   149f8:	str	r6, [sp, #4]
   149fc:	mov	r0, #76	; 0x4c
   14a00:	mov	r6, r1
   14a04:	bl	14148 <rb_malloc>
   14a08:	mov	r5, r0
   14a0c:	vmov.i32	q8, #0	; 0x00000000
   14a10:	str	sl, [r0]
   14a14:	str	r9, [r0, #68]	; 0x44
   14a18:	strb	r8, [r0, #72]	; 0x48
   14a1c:	add	r0, r0, #52	; 0x34
   14a20:	vst1.32	{d16-d17}, [r0]
   14a24:	add	r0, r5, #36	; 0x24
   14a28:	vst1.32	{d16-d17}, [r0]
   14a2c:	add	r0, r5, #20
   14a30:	vst1.32	{d16-d17}, [r0]
   14a34:	add	r0, r5, #4
   14a38:	vst1.32	{d16-d17}, [r0]
   14a3c:	cmp	r6, #0
   14a40:	beq	14a68 <rb_radixtree_elem_add+0x25c>
   14a44:	ldr	r0, [r7, #8]
   14a48:	ldr	r6, [sp, #4]
   14a4c:	ldrb	r1, [r0, r6]
   14a50:	mov	r0, #15
   14a54:	and	r1, r0, r1, lsr r4
   14a58:	add	r1, r5, r1, lsl #2
   14a5c:	ldr	r3, [sp]
   14a60:	ldr	r2, [r3]
   14a64:	b	14a88 <rb_radixtree_elem_add+0x27c>
   14a68:	ldr	r0, [r7, #8]
   14a6c:	ldr	r6, [sp, #4]
   14a70:	ldrb	r1, [r0, r6]
   14a74:	mov	r0, #15
   14a78:	and	r1, r0, r1, lsr r4
   14a7c:	add	r1, r5, r1, lsl #2
   14a80:	add	r3, r9, r8, lsl #2
   14a84:	ldr	r2, [r3, #4]!
   14a88:	str	r2, [r1, #4]
   14a8c:	ldr	r1, [r3]
   14a90:	ldr	r2, [r1]
   14a94:	cmn	r2, #1
   14a98:	beq	14ab8 <rb_radixtree_elem_add+0x2ac>
   14a9c:	str	r5, [r1, #68]	; 0x44
   14aa0:	ldr	r1, [r7, #8]
   14aa4:	ldrb	r1, [r1, r6]
   14aa8:	and	r0, r0, r1, lsr r4
   14aac:	ldr	r1, [r3]
   14ab0:	strb	r0, [r1, #72]	; 0x48
   14ab4:	b	14ad0 <rb_radixtree_elem_add+0x2c4>
   14ab8:	str	r5, [r1, #12]
   14abc:	ldr	r1, [r7, #8]
   14ac0:	ldrb	r1, [r1, r6]
   14ac4:	and	r0, r0, r1, lsr r4
   14ac8:	ldr	r1, [r3]
   14acc:	strb	r0, [r1, #16]
   14ad0:	ldr	ip, [sp, #16]
   14ad4:	str	r5, [r3]
   14ad8:	ldrb	r0, [ip, r6]
   14adc:	mov	r1, #15
   14ae0:	and	r4, r1, r0, lsr r4
   14ae4:	add	r6, r5, r4, lsl #2
   14ae8:	mov	r0, #20
   14aec:	mov	r7, ip
   14af0:	bl	14148 <rb_malloc>
   14af4:	str	r0, [r6, #4]
   14af8:	mvn	r1, #0
   14afc:	str	r1, [r0]
   14b00:	ldr	r0, [r6, #4]
   14b04:	ldr	r1, [sp, #8]
   14b08:	str	r1, [r0, #4]
   14b0c:	ldr	r0, [r6, #4]
   14b10:	str	r7, [r0, #8]
   14b14:	ldr	r0, [r6, #4]
   14b18:	str	r5, [r0, #12]
   14b1c:	ldr	r0, [r6, #4]
   14b20:	strb	r4, [r0, #16]
   14b24:	ldr	r1, [sp, #12]
   14b28:	ldr	r0, [r1, #8]
   14b2c:	add	r0, r0, #1
   14b30:	str	r0, [r1, #8]
   14b34:	ldr	r0, [r6, #4]
   14b38:	sub	sp, fp, #28
   14b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014b40 <rb_radixtree_add>:
   14b40:	push	{fp, lr}
   14b44:	mov	fp, sp
   14b48:	bl	5040 <rb_radixtree_elem_add@plt>
   14b4c:	cmp	r0, #0
   14b50:	movwne	r0, #1
   14b54:	pop	{fp, pc}

00014b58 <rb_radixtree_elem_delete>:
   14b58:	push	{r4, r5, r6, r7, fp, lr}
   14b5c:	add	fp, sp, #16
   14b60:	mov	r6, r1
   14b64:	mov	r4, r0
   14b68:	ldrb	r7, [r1, #16]
   14b6c:	ldr	r0, [r1, #8]
   14b70:	ldr	r5, [r1, #12]
   14b74:	bl	14478 <rb_free>
   14b78:	mov	r0, r6
   14b7c:	bl	14478 <rb_free>
   14b80:	cmp	r5, #0
   14b84:	beq	14c00 <rb_radixtree_elem_delete+0xa8>
   14b88:	add	r1, r5, #4
   14b8c:	mov	r2, #0
   14b90:	str	r2, [r1, r7, lsl #2]
   14b94:	mvn	r0, #0
   14b98:	cmn	r0, #1
   14b9c:	mov	r3, r2
   14ba0:	mvnne	r3, #1
   14ba4:	ldr	r7, [r1, r2, lsl #2]
   14ba8:	cmp	r7, #0
   14bac:	movne	r0, r3
   14bb0:	add	r2, r2, #1
   14bb4:	cmp	r2, #16
   14bb8:	bne	14b98 <rb_radixtree_elem_delete+0x40>
   14bbc:	cmp	r0, #0
   14bc0:	blt	14c20 <rb_radixtree_elem_delete+0xc8>
   14bc4:	ldrb	r1, [r5, #72]	; 0x48
   14bc8:	ldr	r2, [r5, #68]	; 0x44
   14bcc:	add	r3, r2, r1, lsl #2
   14bd0:	add	r3, r3, #4
   14bd4:	cmp	r2, #0
   14bd8:	addeq	r3, r4, #4
   14bdc:	add	r0, r5, r0, lsl #2
   14be0:	ldr	r0, [r0, #4]
   14be4:	str	r0, [r3]
   14be8:	ldr	r3, [r0]
   14bec:	cmn	r3, #1
   14bf0:	beq	14c0c <rb_radixtree_elem_delete+0xb4>
   14bf4:	str	r2, [r0, #68]	; 0x44
   14bf8:	add	r0, r0, #72	; 0x48
   14bfc:	b	14c14 <rb_radixtree_elem_delete+0xbc>
   14c00:	mov	r0, #0
   14c04:	str	r0, [r4, #4]
   14c08:	b	14c20 <rb_radixtree_elem_delete+0xc8>
   14c0c:	str	r2, [r0, #12]
   14c10:	add	r0, r0, #16
   14c14:	strb	r1, [r0]
   14c18:	mov	r0, r5
   14c1c:	bl	14478 <rb_free>
   14c20:	ldr	r0, [r4, #8]
   14c24:	subs	r0, r0, #1
   14c28:	str	r0, [r4, #8]
   14c2c:	moveq	r0, #0
   14c30:	streq	r0, [r4, #4]
   14c34:	pop	{r4, r5, r6, r7, fp, pc}

00014c38 <rb_radixtree_retrieve>:
   14c38:	push	{r4, sl, fp, lr}
   14c3c:	add	fp, sp, #8
   14c40:	mov	r4, #0
   14c44:	mov	r2, #0
   14c48:	bl	5490 <rb_radixtree_elem_find@plt>
   14c4c:	cmp	r0, #0
   14c50:	ldrne	r4, [r0, #4]
   14c54:	mov	r0, r4
   14c58:	pop	{r4, sl, fp, pc}

00014c5c <rb_radixtree_elem_get_key>:
   14c5c:	ldr	r0, [r0, #8]
   14c60:	bx	lr

00014c64 <rb_radixtree_elem_set_data>:
   14c64:	str	r1, [r0, #4]
   14c68:	bx	lr

00014c6c <rb_radixtree_elem_get_data>:
   14c6c:	ldr	r0, [r0, #4]
   14c70:	bx	lr

00014c74 <rb_radixtree_size>:
   14c74:	ldr	r0, [r0, #8]
   14c78:	bx	lr

00014c7c <rb_radixtree_stats>:
   14c7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c80:	add	fp, sp, #24
   14c84:	sub	sp, sp, #280	; 0x118
   14c88:	mov	r5, r2
   14c8c:	mov	r7, r1
   14c90:	mov	r6, r0
   14c94:	mov	r0, #0
   14c98:	str	r0, [sp, #20]
   14c9c:	ldr	r0, [r6, #8]
   14ca0:	cmp	r0, #0
   14ca4:	beq	14cf4 <rb_radixtree_stats+0x78>
   14ca8:	ldr	r0, [r6, #4]
   14cac:	add	r2, sp, #20
   14cb0:	mov	r1, #0
   14cb4:	bl	14d58 <stats_recurse>
   14cb8:	ldr	r1, [r6, #8]
   14cbc:	ldr	r3, [r6, #12]
   14cc0:	ldr	r2, [sp, #20]
   14cc4:	ldr	r6, [pc, #120]	; 14d44 <rb_radixtree_stats+0xc8>
   14cc8:	add	r6, pc, r6
   14ccc:	udiv	r4, r0, r1
   14cd0:	str	r6, [sp]
   14cd4:	str	r1, [sp, #4]
   14cd8:	str	r0, [sp, #8]
   14cdc:	str	r4, [sp, #12]
   14ce0:	str	r2, [sp, #16]
   14ce4:	add	r0, sp, #24
   14ce8:	ldr	r2, [pc, #88]	; 14d48 <rb_radixtree_stats+0xcc>
   14cec:	add	r2, pc, r2
   14cf0:	b	14d28 <rb_radixtree_stats+0xac>
   14cf4:	ldr	r3, [r6, #12]
   14cf8:	ldr	r0, [pc, #76]	; 14d4c <rb_radixtree_stats+0xd0>
   14cfc:	add	r0, pc, r0
   14d00:	ldr	r1, [pc, #72]	; 14d50 <rb_radixtree_stats+0xd4>
   14d04:	add	r1, pc, r1
   14d08:	str	r1, [sp]
   14d0c:	str	r0, [sp, #4]
   14d10:	str	r0, [sp, #8]
   14d14:	str	r0, [sp, #12]
   14d18:	str	r0, [sp, #16]
   14d1c:	add	r0, sp, #24
   14d20:	ldr	r2, [pc, #44]	; 14d54 <rb_radixtree_stats+0xd8>
   14d24:	add	r2, pc, r2
   14d28:	mov	r1, #256	; 0x100
   14d2c:	bl	54cc <snprintf@plt>
   14d30:	add	r0, sp, #24
   14d34:	mov	r1, r5
   14d38:	blx	r7
   14d3c:	sub	sp, fp, #24
   14d40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d44:	.word	0x00001c01
   14d48:	.word	0x00001b90
   14d4c:	.word	0x00000d7b
   14d50:	.word	0x00001bc5
   14d54:	.word	0x00001b81

00014d58 <stats_recurse>:
   14d58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d5c:	add	fp, sp, #24
   14d60:	mov	r8, r2
   14d64:	mov	r4, r1
   14d68:	ldr	r1, [r2]
   14d6c:	cmp	r1, r4
   14d70:	strlt	r4, [r8]
   14d74:	ldr	r1, [r0]
   14d78:	cmn	r1, #1
   14d7c:	beq	14db8 <stats_recurse+0x60>
   14d80:	add	r7, r0, #4
   14d84:	add	r6, r4, #1
   14d88:	mov	r5, #0
   14d8c:	mov	r4, #0
   14d90:	ldr	r0, [r7, r5, lsl #2]
   14d94:	cmp	r0, #0
   14d98:	beq	14dac <stats_recurse+0x54>
   14d9c:	mov	r1, r6
   14da0:	mov	r2, r8
   14da4:	bl	14d58 <stats_recurse>
   14da8:	add	r4, r0, r4
   14dac:	add	r5, r5, #1
   14db0:	cmp	r5, #16
   14db4:	bne	14d90 <stats_recurse+0x38>
   14db8:	mov	r0, r4
   14dbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014dc0 <rb_radixtree_stats_walk>:
   14dc0:	push	{r4, r5, r6, sl, fp, lr}
   14dc4:	add	fp, sp, #16
   14dc8:	mov	r5, r0
   14dcc:	ldr	r0, [pc, #48]	; 14e04 <rb_radixtree_stats_walk+0x44>
   14dd0:	ldr	r0, [pc, r0]
   14dd4:	ldr	r6, [r0]
   14dd8:	cmp	r6, #0
   14ddc:	popeq	{r4, r5, r6, sl, fp, pc}
   14de0:	mov	r4, r1
   14de4:	ldr	r0, [r6]
   14de8:	mov	r1, r5
   14dec:	mov	r2, r4
   14df0:	bl	4f80 <rb_radixtree_stats@plt>
   14df4:	ldr	r6, [r6, #8]
   14df8:	cmp	r6, #0
   14dfc:	bne	14de4 <rb_radixtree_stats_walk+0x24>
   14e00:	pop	{r4, r5, r6, sl, fp, pc}
   14e04:	.word	0x0001360c

00014e08 <__stat>:
   14e08:	mov	r2, r1
   14e0c:	mov	r1, r0
   14e10:	mov	r0, #3
   14e14:	b	4ddc <__xstat@plt>

00014e18 <__fstat>:
   14e18:	mov	r2, r1
   14e1c:	mov	r1, r0
   14e20:	mov	r0, #3
   14e24:	b	5478 <__fxstat@plt>

Disassembly of section .fini:

00014e28 <_fini>:
   14e28:	push	{r3, lr}
   14e2c:	pop	{r3, pc}
