
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

0001164c <.init>:
   1164c:	push	{r3, lr}
   11650:	bl	11ac8 <__assert_fail@plt+0x48>
   11654:	pop	{r3, pc}

Disassembly of section .plt:

00011658 <calloc@plt-0x14>:
   11658:	push	{lr}		; (str lr, [sp, #-4]!)
   1165c:	ldr	lr, [pc, #4]	; 11668 <calloc@plt-0x4>
   11660:	add	lr, pc, lr
   11664:	ldr	pc, [lr, #8]!
   11668:	muleq	r1, r8, r9

0001166c <calloc@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #122880	; 0x1e000
   11674:	ldr	pc, [ip, #2456]!	; 0x998

00011678 <fputs_unlocked@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #122880	; 0x1e000
   11680:	ldr	pc, [ip, #2448]!	; 0x990

00011684 <raise@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #122880	; 0x1e000
   1168c:	ldr	pc, [ip, #2440]!	; 0x988

00011690 <__gmpz_scan1@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #122880	; 0x1e000
   11698:	ldr	pc, [ip, #2432]!	; 0x980

0001169c <iconv_close@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #122880	; 0x1e000
   116a4:	ldr	pc, [ip, #2424]!	; 0x978

000116a8 <iconv@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #122880	; 0x1e000
   116b0:	ldr	pc, [ip, #2416]!	; 0x970

000116b4 <strcmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #122880	; 0x1e000
   116bc:	ldr	pc, [ip, #2408]!	; 0x968

000116c0 <fflush@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #122880	; 0x1e000
   116c8:	ldr	pc, [ip, #2400]!	; 0x960

000116cc <__gmpz_sub_ui@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #122880	; 0x1e000
   116d4:	ldr	pc, [ip, #2392]!	; 0x958

000116d8 <__gmpz_clears@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #122880	; 0x1e000
   116e0:	ldr	pc, [ip, #2384]!	; 0x950

000116e4 <wcwidth@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #122880	; 0x1e000
   116ec:	ldr	pc, [ip, #2376]!	; 0x948

000116f0 <memmove@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #122880	; 0x1e000
   116f8:	ldr	pc, [ip, #2368]!	; 0x940

000116fc <__gmpz_set_ui@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #122880	; 0x1e000
   11704:	ldr	pc, [ip, #2360]!	; 0x938

00011708 <free@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #122880	; 0x1e000
   11710:	ldr	pc, [ip, #2352]!	; 0x930

00011714 <_exit@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #122880	; 0x1e000
   1171c:	ldr	pc, [ip, #2344]!	; 0x928

00011720 <memcpy@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #122880	; 0x1e000
   11728:	ldr	pc, [ip, #2336]!	; 0x920

0001172c <__gmpz_sub@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #122880	; 0x1e000
   11734:	ldr	pc, [ip, #2328]!	; 0x918

00011738 <mbsinit@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #122880	; 0x1e000
   11740:	ldr	pc, [ip, #2320]!	; 0x910

00011744 <memcmp@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #122880	; 0x1e000
   1174c:	ldr	pc, [ip, #2312]!	; 0x908

00011750 <getc_unlocked@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #122880	; 0x1e000
   11758:	ldr	pc, [ip, #2304]!	; 0x900

0001175c <dcgettext@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #122880	; 0x1e000
   11764:	ldr	pc, [ip, #2296]!	; 0x8f8

00011768 <__gmpz_powm@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #122880	; 0x1e000
   11770:	ldr	pc, [ip, #2288]!	; 0x8f0

00011774 <strdup@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #122880	; 0x1e000
   1177c:	ldr	pc, [ip, #2280]!	; 0x8e8

00011780 <__gmpz_divexact@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #122880	; 0x1e000
   11788:	ldr	pc, [ip, #2272]!	; 0x8e0

0001178c <__gmpz_inits@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #122880	; 0x1e000
   11794:	ldr	pc, [ip, #2264]!	; 0x8d8

00011798 <__gmpz_set@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #122880	; 0x1e000
   117a0:	ldr	pc, [ip, #2256]!	; 0x8d0

000117a4 <realloc@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #122880	; 0x1e000
   117ac:	ldr	pc, [ip, #2248]!	; 0x8c8

000117b0 <__gmpz_mul@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #122880	; 0x1e000
   117b8:	ldr	pc, [ip, #2240]!	; 0x8c0

000117bc <__gmpz_tdiv_q_ui@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #122880	; 0x1e000
   117c4:	ldr	pc, [ip, #2232]!	; 0x8b8

000117c8 <textdomain@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #122880	; 0x1e000
   117d0:	ldr	pc, [ip, #2224]!	; 0x8b0

000117d4 <iswcntrl@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #122880	; 0x1e000
   117dc:	ldr	pc, [ip, #2216]!	; 0x8a8

000117e0 <__gmpz_out_str@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #122880	; 0x1e000
   117e8:	ldr	pc, [ip, #2208]!	; 0x8a0

000117ec <fflush_unlocked@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #122880	; 0x1e000
   117f4:	ldr	pc, [ip, #2200]!	; 0x898

000117f8 <iswprint@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #122880	; 0x1e000
   11800:	ldr	pc, [ip, #2192]!	; 0x890

00011804 <lseek64@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #122880	; 0x1e000
   1180c:	ldr	pc, [ip, #2184]!	; 0x888

00011810 <__gmpz_fdiv_q_2exp@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #122880	; 0x1e000
   11818:	ldr	pc, [ip, #2176]!	; 0x880

0001181c <__ctype_get_mb_cur_max@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #122880	; 0x1e000
   11824:	ldr	pc, [ip, #2168]!	; 0x878

00011828 <__fpending@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #122880	; 0x1e000
   11830:	ldr	pc, [ip, #2160]!	; 0x870

00011834 <ferror_unlocked@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #122880	; 0x1e000
   1183c:	ldr	pc, [ip, #2152]!	; 0x868

00011840 <mbrtowc@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #122880	; 0x1e000
   11848:	ldr	pc, [ip, #2144]!	; 0x860

0001184c <error@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #122880	; 0x1e000
   11854:	ldr	pc, [ip, #2136]!	; 0x858

00011858 <malloc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #122880	; 0x1e000
   11860:	ldr	pc, [ip, #2128]!	; 0x850

00011864 <iconv_open@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #122880	; 0x1e000
   1186c:	ldr	pc, [ip, #2120]!	; 0x848

00011870 <__libc_start_main@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #122880	; 0x1e000
   11878:	ldr	pc, [ip, #2112]!	; 0x840

0001187c <__freading@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #122880	; 0x1e000
   11884:	ldr	pc, [ip, #2104]!	; 0x838

00011888 <__gmpz_init_set_si@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #122880	; 0x1e000
   11890:	ldr	pc, [ip, #2096]!	; 0x830

00011894 <__gmpz_add_ui@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #122880	; 0x1e000
   1189c:	ldr	pc, [ip, #2088]!	; 0x828

000118a0 <__gmon_start__@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #122880	; 0x1e000
   118a8:	ldr	pc, [ip, #2080]!	; 0x820

000118ac <getopt_long@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #122880	; 0x1e000
   118b4:	ldr	pc, [ip, #2072]!	; 0x818

000118b8 <__ctype_b_loc@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #122880	; 0x1e000
   118c0:	ldr	pc, [ip, #2064]!	; 0x810

000118c4 <exit@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #122880	; 0x1e000
   118cc:	ldr	pc, [ip, #2056]!	; 0x808

000118d0 <iswspace@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #122880	; 0x1e000
   118d8:	ldr	pc, [ip, #2048]!	; 0x800

000118dc <strlen@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #122880	; 0x1e000
   118e4:	ldr	pc, [ip, #2040]!	; 0x7f8

000118e8 <strchr@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #122880	; 0x1e000
   118f0:	ldr	pc, [ip, #2032]!	; 0x7f0

000118f4 <__gmpz_divisible_ui_p@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #122880	; 0x1e000
   118fc:	ldr	pc, [ip, #2024]!	; 0x7e8

00011900 <__gmpz_clear@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #122880	; 0x1e000
   11908:	ldr	pc, [ip, #2016]!	; 0x7e0

0001190c <__errno_location@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #122880	; 0x1e000
   11914:	ldr	pc, [ip, #2008]!	; 0x7d8

00011918 <iswalnum@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #122880	; 0x1e000
   11920:	ldr	pc, [ip, #2000]!	; 0x7d0

00011924 <__sprintf_chk@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #122880	; 0x1e000
   1192c:	ldr	pc, [ip, #1992]!	; 0x7c8

00011930 <__cxa_atexit@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #122880	; 0x1e000
   11938:	ldr	pc, [ip, #1984]!	; 0x7c0

0001193c <memset@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #122880	; 0x1e000
   11944:	ldr	pc, [ip, #1976]!	; 0x7b8

00011948 <__gmpz_tdiv_q_2exp@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #122880	; 0x1e000
   11950:	ldr	pc, [ip, #1968]!	; 0x7b0

00011954 <__printf_chk@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #122880	; 0x1e000
   1195c:	ldr	pc, [ip, #1960]!	; 0x7a8

00011960 <write@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #122880	; 0x1e000
   11968:	ldr	pc, [ip, #1952]!	; 0x7a0

0001196c <fileno@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #122880	; 0x1e000
   11974:	ldr	pc, [ip, #1944]!	; 0x798

00011978 <__fprintf_chk@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #122880	; 0x1e000
   11980:	ldr	pc, [ip, #1936]!	; 0x790

00011984 <memchr@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #122880	; 0x1e000
   1198c:	ldr	pc, [ip, #1928]!	; 0x788

00011990 <fclose@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #122880	; 0x1e000
   11998:	ldr	pc, [ip, #1920]!	; 0x780

0001199c <strnlen@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #122880	; 0x1e000
   119a4:	ldr	pc, [ip, #1912]!	; 0x778

000119a8 <fseeko64@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #122880	; 0x1e000
   119b0:	ldr	pc, [ip, #1904]!	; 0x770

000119b4 <__gmpz_mod@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #122880	; 0x1e000
   119bc:	ldr	pc, [ip, #1896]!	; 0x768

000119c0 <__gmpz_init_set_ui@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #122880	; 0x1e000
   119c8:	ldr	pc, [ip, #1888]!	; 0x760

000119cc <__gmpz_cmp@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #122880	; 0x1e000
   119d4:	ldr	pc, [ip, #1880]!	; 0x758

000119d8 <setlocale@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #122880	; 0x1e000
   119e0:	ldr	pc, [ip, #1872]!	; 0x750

000119e4 <strrchr@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #122880	; 0x1e000
   119ec:	ldr	pc, [ip, #1864]!	; 0x748

000119f0 <nl_langinfo@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #122880	; 0x1e000
   119f8:	ldr	pc, [ip, #1856]!	; 0x740

000119fc <__gmpz_gcd@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #122880	; 0x1e000
   11a04:	ldr	pc, [ip, #1848]!	; 0x738

00011a08 <__gmpz_init_set_str@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #122880	; 0x1e000
   11a10:	ldr	pc, [ip, #1840]!	; 0x730

00011a14 <bindtextdomain@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #122880	; 0x1e000
   11a1c:	ldr	pc, [ip, #1832]!	; 0x728

00011a20 <__gmpz_cmp_ui@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #122880	; 0x1e000
   11a28:	ldr	pc, [ip, #1824]!	; 0x720

00011a2c <__gmpz_init@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #122880	; 0x1e000
   11a34:	ldr	pc, [ip, #1816]!	; 0x718

00011a38 <__gmpz_powm_ui@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #122880	; 0x1e000
   11a40:	ldr	pc, [ip, #1808]!	; 0x710

00011a44 <isatty@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #122880	; 0x1e000
   11a4c:	ldr	pc, [ip, #1800]!	; 0x708

00011a50 <fputs@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #122880	; 0x1e000
   11a58:	ldr	pc, [ip, #1792]!	; 0x700

00011a5c <strncmp@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #122880	; 0x1e000
   11a64:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a68 <abort@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #122880	; 0x1e000
   11a70:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a74 <putchar_unlocked@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #122880	; 0x1e000
   11a7c:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a80 <__assert_fail@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #122880	; 0x1e000
   11a88:	ldr	pc, [ip, #1760]!	; 0x6e0

Disassembly of section .text:

00011a8c <.text>:
   11a8c:	mov	fp, #0
   11a90:	mov	lr, #0
   11a94:	pop	{r1}		; (ldr r1, [sp], #4)
   11a98:	mov	r2, sp
   11a9c:	push	{r2}		; (str r2, [sp, #-4]!)
   11aa0:	push	{r0}		; (str r0, [sp, #-4]!)
   11aa4:	ldr	ip, [pc, #16]	; 11abc <__assert_fail@plt+0x3c>
   11aa8:	push	{ip}		; (str ip, [sp, #-4]!)
   11aac:	ldr	r0, [pc, #12]	; 11ac0 <__assert_fail@plt+0x40>
   11ab0:	ldr	r3, [pc, #12]	; 11ac4 <__assert_fail@plt+0x44>
   11ab4:	bl	11870 <__libc_start_main@plt>
   11ab8:	bl	11a68 <abort@plt>
   11abc:			; <UNDEFINED> instruction: 0x0001c2b0
   11ac0:	andeq	r1, r1, r4, lsr #27
   11ac4:	andeq	ip, r1, r0, asr r2
   11ac8:	ldr	r3, [pc, #20]	; 11ae4 <__assert_fail@plt+0x64>
   11acc:	ldr	r2, [pc, #20]	; 11ae8 <__assert_fail@plt+0x68>
   11ad0:	add	r3, pc, r3
   11ad4:	ldr	r2, [r3, r2]
   11ad8:	cmp	r2, #0
   11adc:	bxeq	lr
   11ae0:	b	118a0 <__gmon_start__@plt>
   11ae4:	andeq	lr, r1, r8, lsr #10
   11ae8:	andeq	r0, r0, ip, ror #2
   11aec:	ldr	r0, [pc, #24]	; 11b0c <__assert_fail@plt+0x8c>
   11af0:	ldr	r3, [pc, #24]	; 11b10 <__assert_fail@plt+0x90>
   11af4:	cmp	r3, r0
   11af8:	bxeq	lr
   11afc:	ldr	r3, [pc, #16]	; 11b14 <__assert_fail@plt+0x94>
   11b00:	cmp	r3, #0
   11b04:	bxeq	lr
   11b08:	bx	r3
   11b0c:	andeq	r0, r3, r8, asr #3
   11b10:	andeq	r0, r3, r8, asr #3
   11b14:	andeq	r0, r0, r0
   11b18:	ldr	r0, [pc, #36]	; 11b44 <__assert_fail@plt+0xc4>
   11b1c:	ldr	r1, [pc, #36]	; 11b48 <__assert_fail@plt+0xc8>
   11b20:	sub	r1, r1, r0
   11b24:	asr	r1, r1, #2
   11b28:	add	r1, r1, r1, lsr #31
   11b2c:	asrs	r1, r1, #1
   11b30:	bxeq	lr
   11b34:	ldr	r3, [pc, #16]	; 11b4c <__assert_fail@plt+0xcc>
   11b38:	cmp	r3, #0
   11b3c:	bxeq	lr
   11b40:	bx	r3
   11b44:	andeq	r0, r3, r8, asr #3
   11b48:	andeq	r0, r3, r8, asr #3
   11b4c:	andeq	r0, r0, r0
   11b50:	push	{r4, lr}
   11b54:	ldr	r4, [pc, #24]	; 11b74 <__assert_fail@plt+0xf4>
   11b58:	ldrb	r3, [r4]
   11b5c:	cmp	r3, #0
   11b60:	popne	{r4, pc}
   11b64:	bl	11aec <__assert_fail@plt+0x6c>
   11b68:	mov	r3, #1
   11b6c:	strb	r3, [r4]
   11b70:	pop	{r4, pc}
   11b74:	andeq	r0, r3, r8, ror #3
   11b78:	b	11b18 <__assert_fail@plt+0x98>
   11b7c:	push	{fp, lr}
   11b80:	mov	fp, sp
   11b84:	sub	sp, sp, #56	; 0x38
   11b88:	mov	r8, r0
   11b8c:	cmp	r0, #0
   11b90:	bne	11d64 <__assert_fail@plt+0x2e4>
   11b94:	movw	r1, #49923	; 0xc303
   11b98:	mov	r0, #0
   11b9c:	mov	r2, #5
   11ba0:	movt	r1, #1
   11ba4:	bl	1175c <dcgettext@plt>
   11ba8:	mov	r1, r0
   11bac:	movw	r0, #512	; 0x200
   11bb0:	movt	r0, #3
   11bb4:	ldr	r2, [r0]
   11bb8:	mov	r0, #1
   11bbc:	mov	r3, r2
   11bc0:	bl	11954 <__printf_chk@plt>
   11bc4:	movw	r1, #49963	; 0xc32b
   11bc8:	mov	r0, #0
   11bcc:	mov	r2, #5
   11bd0:	movt	r1, #1
   11bd4:	bl	1175c <dcgettext@plt>
   11bd8:	movw	r9, #484	; 0x1e4
   11bdc:	movt	r9, #3
   11be0:	ldr	r1, [r9]
   11be4:	bl	11678 <fputs_unlocked@plt>
   11be8:	movw	r1, #50098	; 0xc3b2
   11bec:	mov	r0, #0
   11bf0:	mov	r2, #5
   11bf4:	movt	r1, #1
   11bf8:	bl	1175c <dcgettext@plt>
   11bfc:	ldr	r1, [r9]
   11c00:	bl	11678 <fputs_unlocked@plt>
   11c04:	movw	r1, #50143	; 0xc3df
   11c08:	mov	r0, #0
   11c0c:	mov	r2, #5
   11c10:	movt	r1, #1
   11c14:	bl	1175c <dcgettext@plt>
   11c18:	ldr	r1, [r9]
   11c1c:	bl	11678 <fputs_unlocked@plt>
   11c20:	movw	r0, #51592	; 0xc988
   11c24:	mov	r6, sp
   11c28:	movt	r0, #1
   11c2c:	mov	r1, r6
   11c30:	ldm	r0!, {r2, r3, r4, r5}
   11c34:	stmia	r1!, {r2, r3, r4, r5}
   11c38:	ldm	r0!, {r2, r3, r4, r5, r7}
   11c3c:	stmia	r1!, {r2, r3, r4, r5, r7}
   11c40:	ldm	r0, {r2, r3, r4, r5, r7}
   11c44:	stm	r1, {r2, r3, r4, r5, r7}
   11c48:	movw	r1, #50317	; 0xc48d
   11c4c:	movw	r5, #50197	; 0xc415
   11c50:	movt	r1, #1
   11c54:	movt	r5, #1
   11c58:	mov	r0, r5
   11c5c:	bl	116b4 <strcmp@plt>
   11c60:	cmp	r0, #0
   11c64:	ldrne	r1, [r6, #8]!
   11c68:	cmpne	r1, #0
   11c6c:	bne	11c58 <__assert_fail@plt+0x1d8>
   11c70:	ldr	r6, [r6, #4]
   11c74:	movw	r1, #50412	; 0xc4ec
   11c78:	mov	r0, #0
   11c7c:	mov	r2, #5
   11c80:	movt	r1, #1
   11c84:	bl	1175c <dcgettext@plt>
   11c88:	movw	r2, #50228	; 0xc434
   11c8c:	movw	r3, #50435	; 0xc503
   11c90:	mov	r1, r0
   11c94:	mov	r0, #1
   11c98:	movt	r2, #1
   11c9c:	movt	r3, #1
   11ca0:	bl	11954 <__printf_chk@plt>
   11ca4:	cmp	r6, #0
   11ca8:	mov	r0, #5
   11cac:	mov	r1, #0
   11cb0:	moveq	r6, r5
   11cb4:	bl	119d8 <setlocale@plt>
   11cb8:	cmp	r0, #0
   11cbc:	beq	11cf4 <__assert_fail@plt+0x274>
   11cc0:	movw	r1, #50475	; 0xc52b
   11cc4:	mov	r2, #3
   11cc8:	movt	r1, #1
   11ccc:	bl	11a5c <strncmp@plt>
   11cd0:	cmp	r0, #0
   11cd4:	beq	11cf4 <__assert_fail@plt+0x274>
   11cd8:	movw	r1, #50479	; 0xc52f
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	movt	r1, #1
   11ce8:	bl	1175c <dcgettext@plt>
   11cec:	ldr	r1, [r9]
   11cf0:	bl	11678 <fputs_unlocked@plt>
   11cf4:	movw	r1, #50550	; 0xc576
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	movt	r1, #1
   11d04:	bl	1175c <dcgettext@plt>
   11d08:	movw	r2, #50435	; 0xc503
   11d0c:	mov	r1, r0
   11d10:	mov	r0, #1
   11d14:	mov	r3, r5
   11d18:	movt	r2, #1
   11d1c:	bl	11954 <__printf_chk@plt>
   11d20:	movw	r1, #50577	; 0xc591
   11d24:	mov	r0, #0
   11d28:	mov	r2, #5
   11d2c:	movt	r1, #1
   11d30:	bl	1175c <dcgettext@plt>
   11d34:	movw	r3, #50097	; 0xc3b1
   11d38:	mov	r1, r0
   11d3c:	movw	r0, #50345	; 0xc4a9
   11d40:	cmp	r6, r5
   11d44:	mov	r2, r6
   11d48:	movt	r0, #1
   11d4c:	movt	r3, #1
   11d50:	moveq	r3, r0
   11d54:	mov	r0, #1
   11d58:	bl	11954 <__printf_chk@plt>
   11d5c:	mov	r0, r8
   11d60:	bl	118c4 <exit@plt>
   11d64:	movw	r0, #472	; 0x1d8
   11d68:	movw	r1, #49884	; 0xc2dc
   11d6c:	mov	r2, #5
   11d70:	movt	r0, #3
   11d74:	movt	r1, #1
   11d78:	ldr	r5, [r0]
   11d7c:	mov	r0, #0
   11d80:	bl	1175c <dcgettext@plt>
   11d84:	mov	r2, r0
   11d88:	movw	r0, #512	; 0x200
   11d8c:	mov	r1, #1
   11d90:	movt	r0, #3
   11d94:	ldr	r3, [r0]
   11d98:	mov	r0, r5
   11d9c:	bl	11978 <__fprintf_chk@plt>
   11da0:	b	11d5c <__assert_fail@plt+0x2dc>
   11da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da8:	add	fp, sp, #28
   11dac:	sub	sp, sp, #28
   11db0:	mov	r5, r0
   11db4:	ldr	r0, [r1]
   11db8:	mov	r4, r1
   11dbc:	bl	174f8 <__assert_fail@plt+0x5a78>
   11dc0:	movw	r1, #50097	; 0xc3b1
   11dc4:	mov	r0, #6
   11dc8:	movt	r1, #1
   11dcc:	bl	119d8 <setlocale@plt>
   11dd0:	movw	r6, #50232	; 0xc438
   11dd4:	movw	r1, #50204	; 0xc41c
   11dd8:	movt	r6, #1
   11ddc:	movt	r1, #1
   11de0:	mov	r0, r6
   11de4:	bl	11a14 <bindtextdomain@plt>
   11de8:	mov	r0, r6
   11dec:	bl	117c8 <textdomain@plt>
   11df0:	movw	r6, #496	; 0x1f0
   11df4:	movt	r6, #3
   11df8:	ldr	r0, [r6]
   11dfc:	cmp	r0, #0
   11e00:	bne	11e1c <__assert_fail@plt+0x39c>
   11e04:	mov	r0, #1024	; 0x400
   11e08:	bl	1a018 <__assert_fail@plt+0x8598>
   11e0c:	movw	r1, #500	; 0x1f4
   11e10:	str	r0, [r6]
   11e14:	movt	r1, #3
   11e18:	str	r0, [r1]
   11e1c:	movw	r0, #29468	; 0x731c
   11e20:	movt	r0, #1
   11e24:	bl	1c2b4 <__assert_fail@plt+0xa834>
   11e28:	movw	r0, #8176	; 0x1ff0
   11e2c:	movt	r0, #1
   11e30:	bl	1c2b4 <__assert_fail@plt+0xa834>
   11e34:	movw	r6, #50097	; 0xc3b1
   11e38:	movw	r7, #51528	; 0xc948
   11e3c:	movw	r9, #492	; 0x1ec
   11e40:	mov	r8, #0
   11e44:	mov	sl, #1
   11e48:	movt	r6, #1
   11e4c:	movt	r7, #1
   11e50:	movt	r9, #3
   11e54:	b	11e64 <__assert_fail@plt+0x3e4>
   11e58:	cmp	r0, #256	; 0x100
   11e5c:	bne	11fe8 <__assert_fail@plt+0x568>
   11e60:	strb	sl, [r9]
   11e64:	mov	r0, r5
   11e68:	mov	r1, r4
   11e6c:	mov	r2, r6
   11e70:	mov	r3, r7
   11e74:	str	r8, [sp]
   11e78:	bl	118ac <getopt_long@plt>
   11e7c:	cmp	r0, #255	; 0xff
   11e80:	bgt	11e58 <__assert_fail@plt+0x3d8>
   11e84:	cmn	r0, #1
   11e88:	bne	11f50 <__assert_fail@plt+0x4d0>
   11e8c:	movw	r0, #464	; 0x1d0
   11e90:	movt	r0, #3
   11e94:	ldr	r0, [r0]
   11e98:	cmp	r0, r5
   11e9c:	bge	11ec4 <__assert_fail@plt+0x444>
   11ea0:	sub	r5, r5, r0
   11ea4:	add	r4, r4, r0, lsl #2
   11ea8:	mov	r7, #1
   11eac:	ldr	r0, [r4], #4
   11eb0:	bl	12064 <__assert_fail@plt+0x5e4>
   11eb4:	and	r7, r7, r0
   11eb8:	subs	r5, r5, #1
   11ebc:	bne	11eac <__assert_fail@plt+0x42c>
   11ec0:	b	11f44 <__assert_fail@plt+0x4c4>
   11ec4:	add	r4, sp, #20
   11ec8:	mov	r0, r4
   11ecc:	bl	195c0 <__assert_fail@plt+0x7b40>
   11ed0:	movw	r8, #480	; 0x1e0
   11ed4:	movw	r1, #50660	; 0xc5e4
   11ed8:	mov	r2, #3
   11edc:	mov	r3, r4
   11ee0:	movt	r8, #3
   11ee4:	movt	r1, #1
   11ee8:	ldr	r0, [r8]
   11eec:	bl	195d0 <__assert_fail@plt+0x7b50>
   11ef0:	mov	r1, r0
   11ef4:	ldr	r0, [sp, #24]
   11ef8:	mov	r7, #1
   11efc:	cmn	r1, #1
   11f00:	beq	11f40 <__assert_fail@plt+0x4c0>
   11f04:	movw	r4, #50660	; 0xc5e4
   11f08:	add	r5, sp, #20
   11f0c:	movt	r4, #1
   11f10:	bl	12064 <__assert_fail@plt+0x5e4>
   11f14:	mov	r6, r0
   11f18:	ldr	r0, [r8]
   11f1c:	mov	r1, r4
   11f20:	mov	r2, #3
   11f24:	mov	r3, r5
   11f28:	bl	195d0 <__assert_fail@plt+0x7b50>
   11f2c:	mov	r1, r0
   11f30:	ldr	r0, [sp, #24]
   11f34:	and	r7, r7, r6
   11f38:	cmn	r1, #1
   11f3c:	bne	11f10 <__assert_fail@plt+0x490>
   11f40:	bl	17404 <__assert_fail@plt+0x5984>
   11f44:	eor	r0, r7, #1
   11f48:	sub	sp, fp, #28
   11f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f50:	cmn	r0, #3
   11f54:	bne	11fd8 <__assert_fail@plt+0x558>
   11f58:	movw	r0, #380	; 0x17c
   11f5c:	movw	r1, #50271	; 0xc45f
   11f60:	movt	r0, #3
   11f64:	movt	r1, #1
   11f68:	ldr	r4, [r0]
   11f6c:	movw	r0, #484	; 0x1e4
   11f70:	movt	r0, #3
   11f74:	ldr	r5, [r0]
   11f78:	movw	r0, #50253	; 0xc44d
   11f7c:	movt	r0, #1
   11f80:	bl	17904 <__assert_fail@plt+0x5e84>
   11f84:	movw	r1, #50303	; 0xc47f
   11f88:	mov	r6, r0
   11f8c:	movw	r0, #50290	; 0xc472
   11f90:	movt	r0, #1
   11f94:	movt	r1, #1
   11f98:	bl	17904 <__assert_fail@plt+0x5e84>
   11f9c:	movw	r2, #50242	; 0xc442
   11fa0:	mov	r1, #0
   11fa4:	mov	r3, r4
   11fa8:	movt	r2, #1
   11fac:	stm	sp, {r2, r6}
   11fb0:	movw	r2, #50228	; 0xc434
   11fb4:	str	r1, [sp, #12]
   11fb8:	movw	r1, #50197	; 0xc415
   11fbc:	str	r0, [sp, #8]
   11fc0:	mov	r0, r5
   11fc4:	movt	r1, #1
   11fc8:	movt	r2, #1
   11fcc:	bl	19f10 <__assert_fail@plt+0x8490>
   11fd0:	mov	r0, #0
   11fd4:	bl	118c4 <exit@plt>
   11fd8:	cmn	r0, #2
   11fdc:	bne	11fe8 <__assert_fail@plt+0x568>
   11fe0:	mov	r0, #0
   11fe4:	bl	11b7c <__assert_fail@plt+0xfc>
   11fe8:	mov	r0, #1
   11fec:	bl	11b7c <__assert_fail@plt+0xfc>
   11ff0:	push	{r4, r5, r6, sl, fp, lr}
   11ff4:	add	fp, sp, #16
   11ff8:	movw	r5, #496	; 0x1f0
   11ffc:	movw	r6, #500	; 0x1f4
   12000:	movt	r5, #3
   12004:	movt	r6, #3
   12008:	ldr	r1, [r5]
   1200c:	ldr	r0, [r6]
   12010:	sub	r4, r0, r1
   12014:	mov	r0, #1
   12018:	mov	r2, r4
   1201c:	bl	1742c <__assert_fail@plt+0x59ac>
   12020:	cmp	r0, r4
   12024:	ldreq	r0, [r5]
   12028:	streq	r0, [r6]
   1202c:	popeq	{r4, r5, r6, sl, fp, pc}
   12030:	bl	1190c <__errno_location@plt>
   12034:	ldr	r4, [r0]
   12038:	movw	r1, #50628	; 0xc5c4
   1203c:	mov	r0, #0
   12040:	mov	r2, #5
   12044:	movt	r1, #1
   12048:	bl	1175c <dcgettext@plt>
   1204c:	movw	r2, #63945	; 0xf9c9
   12050:	mov	r3, r0
   12054:	mov	r0, #1
   12058:	mov	r1, r4
   1205c:	movt	r2, #1
   12060:	bl	1184c <error@plt>
   12064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12068:	add	fp, sp, #28
   1206c:	sub	sp, sp, #284	; 0x11c
   12070:	mov	r4, r0
   12074:	sub	r1, r0, #1
   12078:	ldrb	r0, [r1, #1]!
   1207c:	cmp	r0, #32
   12080:	beq	12078 <__assert_fail@plt+0x5f8>
   12084:	sub	r0, r0, #43	; 0x2b
   12088:	mov	r6, r1
   1208c:	clz	r0, r0
   12090:	lsr	r0, r0, #5
   12094:	ldrb	r3, [r6, r0]!
   12098:	cmp	r3, #0
   1209c:	beq	12308 <__assert_fail@plt+0x888>
   120a0:	add	r1, r1, r0
   120a4:	mvn	r7, #47	; 0x2f
   120a8:	mov	r0, r3
   120ac:	add	r2, r1, #1
   120b0:	uxtab	r0, r7, r0
   120b4:	cmp	r0, #9
   120b8:	bhi	12308 <__assert_fail@plt+0x888>
   120bc:	ldrb	r0, [r2], #1
   120c0:	cmp	r0, #0
   120c4:	bne	120b0 <__assert_fail@plt+0x630>
   120c8:	str	r6, [sp, #8]
   120cc:	add	r1, r1, #1
   120d0:	mov	r9, #10
   120d4:	mov	r6, #0
   120d8:	mov	r5, #0
   120dc:	mov	sl, #0
   120e0:	mov	r4, #0
   120e4:	movw	r0, #39321	; 0x9999
   120e8:	movt	r0, #39321	; 0x9999
   120ec:	subs	r2, r0, sl
   120f0:	movw	r0, #39321	; 0x9999
   120f4:	movt	r0, #6553	; 0x1999
   120f8:	sbcs	r2, r0, r4
   120fc:	bcc	12344 <__assert_fail@plt+0x8c4>
   12100:	lsl	r2, r5, #1
   12104:	umull	r8, ip, r6, r9
   12108:	add	lr, r5, r5, lsl #2
   1210c:	orr	r2, r2, r6, lsr #31
   12110:	subs	r6, r8, r6, lsl #1
   12114:	add	r0, ip, lr, lsl #1
   12118:	lsr	r6, r5, #29
   1211c:	sbcs	r2, r0, r2
   12120:	add	r7, r6, r5, lsr #31
   12124:	mvn	r6, #47	; 0x2f
   12128:	mov	r2, #0
   1212c:	uxtab	r3, r6, r3
   12130:	movwcc	r2, #1
   12134:	adds	r6, r8, r3
   12138:	adcs	r5, r0, #0
   1213c:	adc	r0, r7, r2
   12140:	umull	r2, r3, sl, r9
   12144:	add	r7, r4, r4, lsl #2
   12148:	adds	sl, r2, r0
   1214c:	add	r3, r3, r7, lsl #1
   12150:	mov	r0, #0
   12154:	adcs	r4, r3, #0
   12158:	adcs	r0, r0, #0
   1215c:	bne	12344 <__assert_fail@plt+0x8c4>
   12160:	ldrb	r3, [r1], #1
   12164:	cmp	r3, #0
   12168:	bne	120e4 <__assert_fail@plt+0x664>
   1216c:	cmp	r4, #0
   12170:	blt	12344 <__assert_fail@plt+0x8c4>
   12174:	movw	r0, #492	; 0x1ec
   12178:	movt	r0, #3
   1217c:	ldrb	r0, [r0]
   12180:	cmp	r0, #1
   12184:	bne	121a4 <__assert_fail@plt+0x724>
   12188:	movw	r0, #472	; 0x1d8
   1218c:	movw	r2, #50664	; 0xc5e8
   12190:	mov	r1, #1
   12194:	movt	r0, #3
   12198:	movt	r2, #1
   1219c:	ldr	r0, [r0]
   121a0:	bl	11978 <__fprintf_chk@plt>
   121a4:	mov	r0, sl
   121a8:	mov	r1, r4
   121ac:	mov	r2, r6
   121b0:	mov	r3, r5
   121b4:	bl	12684 <__assert_fail@plt+0xc04>
   121b8:	movw	r8, #500	; 0x1f4
   121bc:	add	r9, sp, #24
   121c0:	mov	r2, r6
   121c4:	mov	r3, r5
   121c8:	movt	r8, #3
   121cc:	ldr	r0, [r8]
   121d0:	add	r1, r0, #1
   121d4:	str	r1, [r8]
   121d8:	mov	r1, #58	; 0x3a
   121dc:	strb	r1, [r0]
   121e0:	mov	r0, sl
   121e4:	mov	r1, r4
   121e8:	str	r9, [sp]
   121ec:	bl	127c8 <__assert_fail@plt+0xd48>
   121f0:	ldrb	r0, [sp, #274]	; 0x112
   121f4:	cmp	r0, #0
   121f8:	beq	12260 <__assert_fail@plt+0x7e0>
   121fc:	mov	sl, #0
   12200:	mov	r5, #32
   12204:	add	r6, r9, sl
   12208:	ldrb	r1, [r6, #224]!	; 0xe0
   1220c:	cmp	r1, #0
   12210:	beq	12250 <__assert_fail@plt+0x7d0>
   12214:	add	r0, r9, sl, lsl #3
   12218:	mov	r4, #0
   1221c:	add	r7, r0, #16
   12220:	ldr	r0, [r8]
   12224:	mov	r2, #0
   12228:	add	r1, r0, #1
   1222c:	str	r1, [r8]
   12230:	strb	r5, [r0]
   12234:	ldrd	r0, [r7]
   12238:	bl	13174 <__assert_fail@plt+0x16f4>
   1223c:	ldrb	r0, [r6]
   12240:	add	r4, r4, #1
   12244:	cmp	r4, r0
   12248:	bcc	12220 <__assert_fail@plt+0x7a0>
   1224c:	ldrb	r0, [sp, #274]	; 0x112
   12250:	add	sl, sl, #1
   12254:	uxtb	r1, r0
   12258:	cmp	sl, r1
   1225c:	bcc	12204 <__assert_fail@plt+0x784>
   12260:	ldr	r0, [sp, #32]
   12264:	ldr	r1, [sp, #36]	; 0x24
   12268:	orrs	r0, r0, r1
   1226c:	beq	12298 <__assert_fail@plt+0x818>
   12270:	ldr	r1, [r8]
   12274:	add	r0, r9, #8
   12278:	add	r2, r1, #1
   1227c:	str	r2, [r8]
   12280:	mov	r2, #32
   12284:	strb	r2, [r1]
   12288:	ldrd	r0, [r0]
   1228c:	ldr	r2, [sp, #24]
   12290:	ldr	r3, [sp, #28]
   12294:	bl	12684 <__assert_fail@plt+0xc04>
   12298:	ldr	r0, [r8]
   1229c:	movw	r7, #376	; 0x178
   122a0:	mov	r1, #10
   122a4:	movw	r6, #496	; 0x1f0
   122a8:	movt	r7, #3
   122ac:	movt	r6, #3
   122b0:	add	r4, r0, #1
   122b4:	str	r4, [r8]
   122b8:	strb	r1, [r0]
   122bc:	ldr	r0, [r7]
   122c0:	ldr	r5, [r6]
   122c4:	cmn	r0, #1
   122c8:	bne	122f8 <__assert_fail@plt+0x878>
   122cc:	mov	r0, #0
   122d0:	bl	11a44 <isatty@plt>
   122d4:	mov	r1, r0
   122d8:	mov	r0, #1
   122dc:	cmp	r1, #0
   122e0:	bne	122f4 <__assert_fail@plt+0x874>
   122e4:	mov	r0, #1
   122e8:	bl	11a44 <isatty@plt>
   122ec:	cmp	r0, #0
   122f0:	movwne	r0, #1
   122f4:	str	r0, [r7]
   122f8:	cmp	r0, #0
   122fc:	beq	1244c <__assert_fail@plt+0x9cc>
   12300:	bl	11ff0 <__assert_fail@plt+0x570>
   12304:	b	1243c <__assert_fail@plt+0x9bc>
   12308:	movw	r1, #50701	; 0xc60d
   1230c:	mov	r0, #0
   12310:	mov	r2, #5
   12314:	mov	r5, #0
   12318:	movt	r1, #1
   1231c:	bl	1175c <dcgettext@plt>
   12320:	mov	r6, r0
   12324:	mov	r0, r4
   12328:	bl	19488 <__assert_fail@plt+0x7a08>
   1232c:	mov	r3, r0
   12330:	mov	r0, #0
   12334:	mov	r1, #0
   12338:	mov	r2, r6
   1233c:	bl	1184c <error@plt>
   12340:	b	12440 <__assert_fail@plt+0x9c0>
   12344:	movw	r0, #492	; 0x1ec
   12348:	movt	r0, #3
   1234c:	ldrb	r0, [r0]
   12350:	cmp	r0, #1
   12354:	bne	12374 <__assert_fail@plt+0x8f4>
   12358:	movw	r0, #472	; 0x1d8
   1235c:	movw	r2, #50736	; 0xc630
   12360:	mov	r1, #1
   12364:	movt	r0, #3
   12368:	movt	r2, #1
   1236c:	ldr	r0, [r0]
   12370:	bl	11978 <__fprintf_chk@plt>
   12374:	ldr	r1, [sp, #8]
   12378:	add	r4, sp, #24
   1237c:	mov	r2, #10
   12380:	mov	r0, r4
   12384:	bl	11a08 <__gmpz_init_set_str@plt>
   12388:	movw	r5, #484	; 0x1e4
   1238c:	mov	r1, #10
   12390:	mov	r2, r4
   12394:	movt	r5, #3
   12398:	ldr	r0, [r5]
   1239c:	bl	117e0 <__gmpz_out_str@plt>
   123a0:	mov	r0, #58	; 0x3a
   123a4:	bl	11a74 <putchar_unlocked@plt>
   123a8:	add	r1, sp, #12
   123ac:	mov	r0, r4
   123b0:	bl	124a4 <__assert_fail@plt+0xa24>
   123b4:	ldr	r1, [sp, #20]
   123b8:	cmp	r1, #0
   123bc:	beq	1241c <__assert_fail@plt+0x99c>
   123c0:	ldr	r0, [sp, #16]
   123c4:	mov	r4, #0
   123c8:	ldr	r2, [r0, r4, lsl #2]
   123cc:	cmp	r2, #0
   123d0:	beq	12410 <__assert_fail@plt+0x990>
   123d4:	mov	r6, #0
   123d8:	mov	r0, #32
   123dc:	bl	11a74 <putchar_unlocked@plt>
   123e0:	ldr	r1, [sp, #12]
   123e4:	add	r0, r4, r4, lsl #1
   123e8:	add	r2, r1, r0, lsl #2
   123ec:	ldr	r0, [r5]
   123f0:	mov	r1, #10
   123f4:	bl	117e0 <__gmpz_out_str@plt>
   123f8:	ldr	r0, [sp, #16]
   123fc:	add	r6, r6, #1
   12400:	ldr	r1, [r0, r4, lsl #2]
   12404:	cmp	r6, r1
   12408:	bcc	123d8 <__assert_fail@plt+0x958>
   1240c:	ldr	r1, [sp, #20]
   12410:	add	r4, r4, #1
   12414:	cmp	r4, r1
   12418:	bcc	123c8 <__assert_fail@plt+0x948>
   1241c:	add	r0, sp, #12
   12420:	bl	12630 <__assert_fail@plt+0xbb0>
   12424:	add	r0, sp, #24
   12428:	bl	11900 <__gmpz_clear@plt>
   1242c:	mov	r0, #10
   12430:	bl	11a74 <putchar_unlocked@plt>
   12434:	ldr	r0, [r5]
   12438:	bl	117ec <fflush_unlocked@plt>
   1243c:	mov	r5, #1
   12440:	mov	r0, r5
   12444:	sub	sp, fp, #28
   12448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1244c:	sub	r0, r4, r5
   12450:	cmp	r0, #512	; 0x200
   12454:	bcc	1243c <__assert_fail@plt+0x9bc>
   12458:	ldr	r0, [r6]
   1245c:	ldr	r5, [r8]
   12460:	movw	r1, #513	; 0x201
   12464:	add	r4, r0, r1
   12468:	ldrb	r0, [r4, #-2]
   1246c:	sub	r4, r4, #1
   12470:	cmp	r0, #10
   12474:	bne	12468 <__assert_fail@plt+0x9e8>
   12478:	str	r4, [r8]
   1247c:	bl	11ff0 <__assert_fail@plt+0x570>
   12480:	ldr	r6, [r6]
   12484:	sub	r5, r5, r4
   12488:	mov	r1, r4
   1248c:	mov	r2, r5
   12490:	mov	r0, r6
   12494:	bl	11720 <memcpy@plt>
   12498:	add	r0, r6, r5
   1249c:	str	r0, [r8]
   124a0:	b	1243c <__assert_fail@plt+0x9bc>
   124a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   124a8:	add	fp, sp, #24
   124ac:	sub	sp, sp, #16
   124b0:	mov	r5, r0
   124b4:	mov	r0, #0
   124b8:	str	r0, [r1]
   124bc:	str	r0, [r1, #4]
   124c0:	str	r0, [r1, #8]
   124c4:	ldr	r0, [r5, #4]
   124c8:	cmp	r0, #0
   124cc:	beq	12628 <__assert_fail@plt+0xba8>
   124d0:	movw	r8, #492	; 0x1ec
   124d4:	mov	r4, r1
   124d8:	movt	r8, #3
   124dc:	ldrb	r0, [r8]
   124e0:	cmp	r0, #1
   124e4:	bne	12504 <__assert_fail@plt+0xa84>
   124e8:	movw	r0, #472	; 0x1d8
   124ec:	movw	r2, #51439	; 0xc8ef
   124f0:	mov	r1, #1
   124f4:	movt	r0, #3
   124f8:	movt	r2, #1
   124fc:	ldr	r0, [r0]
   12500:	bl	11978 <__fprintf_chk@plt>
   12504:	add	r0, sp, #4
   12508:	bl	11a2c <__gmpz_init@plt>
   1250c:	mov	r0, r5
   12510:	mov	r1, #0
   12514:	bl	11690 <__gmpz_scan1@plt>
   12518:	mov	r6, r0
   1251c:	mov	r0, r5
   12520:	mov	r1, r5
   12524:	mov	r2, r6
   12528:	bl	11810 <__gmpz_fdiv_q_2exp@plt>
   1252c:	cmp	r6, #0
   12530:	beq	12548 <__assert_fail@plt+0xac8>
   12534:	mov	r0, r4
   12538:	mov	r1, #2
   1253c:	bl	171fc <__assert_fail@plt+0x577c>
   12540:	subs	r6, r6, #1
   12544:	bne	12534 <__assert_fail@plt+0xab4>
   12548:	movw	r9, #62448	; 0xf3f0
   1254c:	mov	r6, #3
   12550:	mov	r7, #1
   12554:	movt	r9, #1
   12558:	mov	r0, r5
   1255c:	mov	r1, r6
   12560:	bl	118f4 <__gmpz_divisible_ui_p@plt>
   12564:	cmp	r0, #0
   12568:	beq	1258c <__assert_fail@plt+0xb0c>
   1256c:	mov	r0, r5
   12570:	mov	r1, r5
   12574:	mov	r2, r6
   12578:	bl	117bc <__gmpz_tdiv_q_ui@plt>
   1257c:	mov	r0, r4
   12580:	mov	r1, r6
   12584:	bl	171fc <__assert_fail@plt+0x577c>
   12588:	b	125ac <__assert_fail@plt+0xb2c>
   1258c:	ldrb	r0, [r9, r7]
   12590:	add	r6, r6, r0
   12594:	mov	r0, r5
   12598:	mul	r1, r6, r6
   1259c:	bl	11a20 <__gmpz_cmp_ui@plt>
   125a0:	cmp	r0, #0
   125a4:	blt	125b4 <__assert_fail@plt+0xb34>
   125a8:	add	r7, r7, #1
   125ac:	cmp	r7, #668	; 0x29c
   125b0:	bls	12558 <__assert_fail@plt+0xad8>
   125b4:	add	r0, sp, #4
   125b8:	bl	11900 <__gmpz_clear@plt>
   125bc:	mov	r0, r5
   125c0:	mov	r1, #1
   125c4:	bl	11a20 <__gmpz_cmp_ui@plt>
   125c8:	cmp	r0, #0
   125cc:	beq	12628 <__assert_fail@plt+0xba8>
   125d0:	ldrb	r0, [r8]
   125d4:	cmp	r0, #1
   125d8:	bne	125f8 <__assert_fail@plt+0xb78>
   125dc:	movw	r0, #472	; 0x1d8
   125e0:	movw	r2, #51419	; 0xc8db
   125e4:	mov	r1, #1
   125e8:	movt	r0, #3
   125ec:	movt	r2, #1
   125f0:	ldr	r0, [r0]
   125f4:	bl	11978 <__fprintf_chk@plt>
   125f8:	mov	r0, r5
   125fc:	bl	16ad0 <__assert_fail@plt+0x5050>
   12600:	cmp	r0, #0
   12604:	beq	12618 <__assert_fail@plt+0xb98>
   12608:	mov	r0, r4
   1260c:	mov	r1, r5
   12610:	bl	16cf8 <__assert_fail@plt+0x5278>
   12614:	b	12628 <__assert_fail@plt+0xba8>
   12618:	mov	r0, r5
   1261c:	mov	r1, #1
   12620:	mov	r2, r4
   12624:	bl	16e50 <__assert_fail@plt+0x53d0>
   12628:	sub	sp, fp, #24
   1262c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12630:	push	{r4, r5, r6, sl, fp, lr}
   12634:	add	fp, sp, #16
   12638:	mov	r4, r0
   1263c:	ldr	r0, [r0, #8]
   12640:	cmp	r0, #0
   12644:	beq	12670 <__assert_fail@plt+0xbf0>
   12648:	mov	r5, #0
   1264c:	mov	r6, #0
   12650:	ldr	r0, [r4]
   12654:	add	r0, r0, r5
   12658:	bl	11900 <__gmpz_clear@plt>
   1265c:	ldr	r0, [r4, #8]
   12660:	add	r6, r6, #1
   12664:	add	r5, r5, #12
   12668:	cmp	r6, r0
   1266c:	bcc	12650 <__assert_fail@plt+0xbd0>
   12670:	ldr	r0, [r4]
   12674:	bl	17404 <__assert_fail@plt+0x5984>
   12678:	ldr	r0, [r4, #4]
   1267c:	pop	{r4, r5, r6, sl, fp, lr}
   12680:	b	17404 <__assert_fail@plt+0x5984>
   12684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12688:	add	fp, sp, #28
   1268c:	sub	sp, sp, #12
   12690:	mov	r5, r0
   12694:	mov	r8, r3
   12698:	orrs	r0, r0, r1
   1269c:	beq	127b0 <__assert_fail@plt+0xd30>
   126a0:	movw	r7, #51712	; 0xca00
   126a4:	str	r2, [sp, #8]
   126a8:	mov	r0, r5
   126ac:	mov	r3, #0
   126b0:	mov	r4, r1
   126b4:	mov	r9, #0
   126b8:	movt	r7, #15258	; 0x3b9a
   126bc:	mov	r2, r7
   126c0:	bl	1c0dc <__assert_fail@plt+0xa65c>
   126c4:	umull	r2, r3, r0, r7
   126c8:	str	r0, [sp, #4]
   126cc:	str	r1, [sp]
   126d0:	mov	lr, #0
   126d4:	mov	r6, #0
   126d8:	mla	r3, r1, r7, r3
   126dc:	subs	sl, r5, r2
   126e0:	mov	r1, #0
   126e4:	sbc	ip, r4, r3
   126e8:	mvn	r4, #63	; 0x3f
   126ec:	mov	r3, #0
   126f0:	b	126fc <__assert_fail@plt+0xc7c>
   126f4:	mov	r8, r0
   126f8:	b	12788 <__assert_fail@plt+0xd08>
   126fc:	lsrs	r2, lr, #1
   12700:	lsl	r3, r3, #1
   12704:	rrx	r1, r1
   12708:	lsrs	r6, r6, #1
   1270c:	orr	lr, r2, r7, lsl #31
   12710:	orr	r3, r3, r9, lsr #31
   12714:	lsl	r9, r9, #1
   12718:	rrx	r7, r7
   1271c:	subs	r2, r7, sl
   12720:	sbcs	r2, r6, ip
   12724:	bcc	12750 <__assert_fail@plt+0xcd0>
   12728:	mov	r0, r8
   1272c:	eor	r2, sl, r7
   12730:	eor	r8, ip, r6
   12734:	orrs	r2, r2, r8
   12738:	bne	126f4 <__assert_fail@plt+0xc74>
   1273c:	ldr	r2, [sp, #8]
   12740:	mov	r8, r0
   12744:	subs	r2, r2, r1
   12748:	sbcs	r2, r0, lr
   1274c:	bcc	12788 <__assert_fail@plt+0xd08>
   12750:	ldr	r0, [sp, #8]
   12754:	subs	r2, sl, r7
   12758:	orr	r9, r9, #1
   1275c:	sbc	r5, ip, r6
   12760:	subs	sl, r2, #1
   12764:	sbc	ip, r5, #0
   12768:	subs	r0, r0, r1
   1276c:	str	r0, [sp, #8]
   12770:	sbcs	r8, r8, lr
   12774:	mov	r0, #0
   12778:	movwcc	r0, #1
   1277c:	cmp	r0, #0
   12780:	moveq	sl, r2
   12784:	moveq	ip, r5
   12788:	adds	r4, r4, #1
   1278c:	bne	126fc <__assert_fail@plt+0xc7c>
   12790:	ldr	r0, [sp, #4]
   12794:	ldr	r1, [sp]
   12798:	mov	r2, r9
   1279c:	bl	12684 <__assert_fail@plt+0xc04>
   127a0:	ldr	r0, [sp, #8]
   127a4:	mov	r1, r8
   127a8:	mov	r2, #9
   127ac:	b	127bc <__assert_fail@plt+0xd3c>
   127b0:	mov	r0, r2
   127b4:	mov	r1, r8
   127b8:	mov	r2, #0
   127bc:	sub	sp, fp, #28
   127c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c4:	b	13174 <__assert_fail@plt+0x16f4>
   127c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127cc:	add	fp, sp, #28
   127d0:	sub	sp, sp, #4
   127d4:	vpush	{d8-d11}
   127d8:	sub	sp, sp, #56	; 0x38
   127dc:	ldr	r4, [fp, #8]
   127e0:	mov	r9, r2
   127e4:	mov	r2, #0
   127e8:	str	r2, [r4, #8]
   127ec:	str	r2, [r4, #12]
   127f0:	strb	r2, [r4, #250]	; 0xfa
   127f4:	orrs	r2, r0, r1
   127f8:	bne	12808 <__assert_fail@plt+0xd88>
   127fc:	subs	r2, r9, #2
   12800:	sbcs	r2, r3, #0
   12804:	bcc	13140 <__assert_fail@plt+0x16c0>
   12808:	tst	r9, #1
   1280c:	str	r4, [sp, #12]
   12810:	bne	128b0 <__assert_fail@plt+0xe30>
   12814:	orrs	r2, r9, r3
   12818:	beq	128c0 <__assert_fail@plt+0xe40>
   1281c:	mov	r7, #0
   12820:	mov	lr, r9
   12824:	mov	r2, r3
   12828:	lsrs	r2, r2, #1
   1282c:	sub	r7, r7, #1
   12830:	rrx	r5, r9
   12834:	tst	r9, #2
   12838:	mov	r9, r5
   1283c:	beq	12828 <__assert_fail@plt+0xda8>
   12840:	rsb	r2, r7, #0
   12844:	add	r5, r7, #32
   12848:	add	ip, r7, #64	; 0x40
   1284c:	lsr	r6, r0, r2
   12850:	lsr	sl, r1, r2
   12854:	lsr	r4, r3, r2
   12858:	orr	r8, r6, r1, lsl r5
   1285c:	mvn	r6, #31
   12860:	sub	r6, r6, r7
   12864:	cmp	r6, #0
   12868:	lsr	r7, r0, r6
   1286c:	lsrge	r8, r1, r6
   12870:	movwge	sl, #0
   12874:	movwge	r4, #0
   12878:	orr	r1, r7, r1, lsl ip
   1287c:	cmp	r5, #0
   12880:	lslge	r1, r0, r5
   12884:	cmp	r6, #0
   12888:	lsl	r0, r0, ip
   1288c:	orr	r7, r1, r4
   12890:	lsr	r1, lr, r2
   12894:	ldr	r4, [sp, #12]
   12898:	orr	r1, r1, r3, lsl r5
   1289c:	lsrge	r1, r3, r6
   128a0:	cmp	r5, #0
   128a4:	movwge	r0, #0
   128a8:	orr	r9, r0, r1
   128ac:	b	1291c <__assert_fail@plt+0xe9c>
   128b0:	mov	r8, r3
   128b4:	mov	r5, r0
   128b8:	mov	r3, r1
   128bc:	b	1293c <__assert_fail@plt+0xebc>
   128c0:	mov	r8, #0
   128c4:	tst	r0, #1
   128c8:	mov	r2, #0
   128cc:	bne	128f4 <__assert_fail@plt+0xe74>
   128d0:	mov	r2, #0
   128d4:	mov	r3, r0
   128d8:	mov	r7, r1
   128dc:	lsrs	r7, r7, #1
   128e0:	add	r2, r2, #1
   128e4:	rrx	r6, r3
   128e8:	tst	r3, #2
   128ec:	mov	r3, r6
   128f0:	beq	128dc <__assert_fail@plt+0xe5c>
   128f4:	lsr	r0, r0, r2
   128f8:	rsb	r3, r2, #32
   128fc:	lsr	r7, r1, r2
   12900:	mov	sl, #0
   12904:	orr	r9, r0, r1, lsl r3
   12908:	sub	r0, r2, #32
   1290c:	add	r2, r2, #64	; 0x40
   12910:	cmp	r0, #0
   12914:	lsrge	r9, r1, r0
   12918:	movwge	r7, #0
   1291c:	str	r2, [sp]
   12920:	mov	r0, r4
   12924:	mov	r2, #2
   12928:	mov	r3, #0
   1292c:	bl	15148 <__assert_fail@plt+0x36c8>
   12930:	mov	r5, r8
   12934:	mov	r3, sl
   12938:	mov	r8, r7
   1293c:	orrs	r0, r5, r3
   12940:	beq	12aa0 <__assert_fail@plt+0x1020>
   12944:	str	r5, [sp, #20]
   12948:	mov	r2, #0
   1294c:	mov	r5, #3
   12950:	mov	r6, #0
   12954:	str	r8, [sp, #36]	; 0x24
   12958:	str	r9, [sp, #24]
   1295c:	movw	r0, #51648	; 0xc9c0
   12960:	str	r6, [sp, #40]	; 0x28
   12964:	mov	sl, r3
   12968:	movt	r0, #1
   1296c:	ldr	r6, [r0, r6, lsl #4]!
   12970:	ldr	r8, [r0, #4]
   12974:	add	r1, r0, #8
   12978:	str	r1, [sp, #28]
   1297c:	b	129b4 <__assert_fail@plt+0xf34>
   12980:	mov	r0, #1
   12984:	mov	r2, lr
   12988:	mov	r3, ip
   1298c:	mov	r9, ip
   12990:	str	r0, [sp]
   12994:	ldr	r0, [sp, #12]
   12998:	str	lr, [sp, #32]
   1299c:	bl	15148 <__assert_fail@plt+0x36c8>
   129a0:	str	r4, [sp, #24]
   129a4:	str	r7, [sp, #36]	; 0x24
   129a8:	str	r5, [sp, #20]
   129ac:	mov	r2, r9
   129b0:	ldr	r5, [sp, #32]
   129b4:	ldr	r1, [sp, #24]
   129b8:	mov	r9, r2
   129bc:	mov	lr, r5
   129c0:	mov	ip, r9
   129c4:	umull	r4, r0, r1, r6
   129c8:	mla	r0, r1, r8, r0
   129cc:	ldr	r1, [sp, #36]	; 0x24
   129d0:	mla	r7, r1, r6, r0
   129d4:	umull	r0, r1, r4, r2
   129d8:	umull	r2, r3, r4, r5
   129dc:	umlal	r0, r1, r7, r5
   129e0:	adds	r0, r0, r3
   129e4:	umull	r2, r3, r7, r5
   129e8:	ldr	r5, [sp, #20]
   129ec:	adc	r1, r1, #0
   129f0:	subs	r0, r0, r2
   129f4:	sbcs	r0, r1, r3
   129f8:	umull	r2, r3, r7, r9
   129fc:	mov	r0, #0
   12a00:	movwcc	r0, #1
   12a04:	cmp	r0, #0
   12a08:	addne	r3, r3, #1
   12a0c:	adds	r1, r2, r1
   12a10:	adc	r0, r3, #0
   12a14:	subs	r2, r5, r1
   12a18:	mov	r3, sl
   12a1c:	sbcs	r2, sl, r0
   12a20:	bcc	12a4c <__assert_fail@plt+0xfcc>
   12a24:	subs	r1, r5, r1
   12a28:	umull	r5, r2, r1, r6
   12a2c:	sbc	r0, r3, r0
   12a30:	mla	r1, r1, r8, r2
   12a34:	mla	sl, r0, r6, r1
   12a38:	ldr	r0, [sp, #28]
   12a3c:	ldrd	r0, [r0]
   12a40:	subs	r0, r0, r5
   12a44:	sbcs	r0, r1, sl
   12a48:	bcs	12980 <__assert_fail@plt+0xf00>
   12a4c:	ldr	r6, [sp, #40]	; 0x28
   12a50:	movw	r0, #62448	; 0xf3f0
   12a54:	mov	r5, lr
   12a58:	mov	r2, ip
   12a5c:	movt	r0, #1
   12a60:	add	r6, r6, #1
   12a64:	ldrb	r0, [r0, r6]
   12a68:	adds	r5, lr, r0
   12a6c:	lsr	r0, r6, #2
   12a70:	adc	r2, ip, #0
   12a74:	cmp	r0, #166	; 0xa6
   12a78:	bhi	12a88 <__assert_fail@plt+0x1008>
   12a7c:	ldr	r1, [sp, #20]
   12a80:	orrs	r1, r1, r3
   12a84:	bne	1295c <__assert_fail@plt+0xedc>
   12a88:	ldr	r4, [sp, #12]
   12a8c:	ldr	r9, [sp, #24]
   12a90:	ldr	r8, [sp, #36]	; 0x24
   12a94:	cmp	r0, #166	; 0xa6
   12a98:	bls	12ab8 <__assert_fail@plt+0x1038>
   12a9c:	b	130c4 <__assert_fail@plt+0x1644>
   12aa0:	mov	r0, #0
   12aa4:	mov	r5, #3
   12aa8:	mov	r3, #0
   12aac:	mov	r2, #0
   12ab0:	mov	r6, #0
   12ab4:	str	r0, [sp, #20]
   12ab8:	movw	r0, #62448	; 0xf3f0
   12abc:	vmov.i32	d9, #0	; 0x00000000
   12ac0:	movt	r0, #1
   12ac4:	add	r0, r0, r6
   12ac8:	add	r0, r0, #1
   12acc:	str	r0, [sp, #24]
   12ad0:	str	r3, [sp, #16]
   12ad4:	str	r5, [sp, #32]
   12ad8:	movw	r5, #51648	; 0xc9c0
   12adc:	str	r6, [sp, #40]	; 0x28
   12ae0:	movt	r5, #1
   12ae4:	ldr	sl, [r5, r6, lsl #4]!
   12ae8:	mov	r6, r9
   12aec:	ldr	r7, [r5, #4]
   12af0:	ldr	r3, [r5, #8]
   12af4:	ldr	r4, [r5, #12]
   12af8:	umull	lr, r0, sl, r9
   12afc:	mla	r0, sl, r8, r0
   12b00:	mla	r9, r7, r9, r0
   12b04:	subs	r0, r3, lr
   12b08:	str	r7, [sp, #36]	; 0x24
   12b0c:	str	r2, [sp, #28]
   12b10:	sbcs	r0, r4, r9
   12b14:	bcs	12c34 <__assert_fail@plt+0x11b4>
   12b18:	ldr	r4, [r5, #16]
   12b1c:	ldr	r3, [r5, #20]
   12b20:	ldr	lr, [r5, #24]
   12b24:	ldr	sl, [r5, #28]
   12b28:	umull	r7, r0, r4, r6
   12b2c:	mla	r0, r4, r8, r0
   12b30:	mla	r9, r3, r6, r0
   12b34:	subs	r0, lr, r7
   12b38:	sbcs	r0, sl, r9
   12b3c:	bcs	12c84 <__assert_fail@plt+0x1204>
   12b40:	ldr	r7, [r5, #32]
   12b44:	ldr	lr, [r5, #36]	; 0x24
   12b48:	ldr	sl, [r5, #40]	; 0x28
   12b4c:	ldr	r4, [r5, #44]	; 0x2c
   12b50:	mov	r9, r6
   12b54:	umull	r1, r0, r7, r6
   12b58:	mla	r0, r7, r8, r0
   12b5c:	mla	r3, lr, r6, r0
   12b60:	subs	r0, sl, r1
   12b64:	sbcs	r0, r4, r3
   12b68:	bcs	12d04 <__assert_fail@plt+0x1284>
   12b6c:	ldr	r7, [r5, #48]	; 0x30
   12b70:	ldr	r6, [r5, #52]	; 0x34
   12b74:	ldr	r1, [r5, #56]	; 0x38
   12b78:	ldr	r3, [r5, #60]	; 0x3c
   12b7c:	umull	r4, r0, r7, r9
   12b80:	mla	r0, r7, r8, r0
   12b84:	mla	sl, r6, r9, r0
   12b88:	subs	r0, r1, r4
   12b8c:	sbcs	r0, r3, sl
   12b90:	bcs	12dac <__assert_fail@plt+0x132c>
   12b94:	ldr	r7, [r5, #64]	; 0x40
   12b98:	ldr	r4, [r5, #68]	; 0x44
   12b9c:	ldr	sl, [r5, #72]	; 0x48
   12ba0:	ldr	r1, [r5, #76]	; 0x4c
   12ba4:	umull	lr, r0, r7, r9
   12ba8:	mla	r0, r7, r8, r0
   12bac:	mla	r3, r4, r9, r0
   12bb0:	subs	r0, sl, lr
   12bb4:	sbcs	r0, r1, r3
   12bb8:	bcs	12e24 <__assert_fail@plt+0x13a4>
   12bbc:	ldr	r7, [r5, #80]	; 0x50
   12bc0:	ldr	r4, [r5, #84]	; 0x54
   12bc4:	ldr	r3, [r5, #88]	; 0x58
   12bc8:	ldr	r1, [r5, #92]	; 0x5c
   12bcc:	umull	sl, r0, r7, r9
   12bd0:	mla	r0, r7, r8, r0
   12bd4:	mla	r6, r4, r9, r0
   12bd8:	subs	r0, r3, sl
   12bdc:	sbcs	r0, r1, r6
   12be0:	bcs	12ecc <__assert_fail@plt+0x144c>
   12be4:	ldr	r6, [r5, #96]	; 0x60
   12be8:	ldr	r4, [r5, #100]	; 0x64
   12bec:	ldr	lr, [r5, #104]	; 0x68
   12bf0:	ldr	r1, [r5, #108]	; 0x6c
   12bf4:	mov	sl, r8
   12bf8:	umull	r3, r0, r6, r9
   12bfc:	mla	r0, r6, r8, r0
   12c00:	mla	r7, r4, r9, r0
   12c04:	subs	r0, lr, r3
   12c08:	sbcs	r0, r1, r7
   12c0c:	bcs	12f4c <__assert_fail@plt+0x14cc>
   12c10:	ldr	r8, [r5, #112]	; 0x70
   12c14:	ldr	r6, [r5, #116]	; 0x74
   12c18:	ldr	r7, [r5, #120]	; 0x78
   12c1c:	ldr	r4, [r5, #124]	; 0x7c
   12c20:	str	sl, [sp, #36]	; 0x24
   12c24:	umull	r0, r1, r8, r9
   12c28:	mla	r1, r8, sl, r1
   12c2c:	mla	r1, r6, r9, r1
   12c30:	b	13050 <__assert_fail@plt+0x15d0>
   12c34:	mov	r7, r3
   12c38:	mov	r0, #1
   12c3c:	mov	r6, lr
   12c40:	str	r0, [sp]
   12c44:	ldr	r0, [sp, #12]
   12c48:	ldr	r2, [sp, #32]
   12c4c:	ldr	r3, [sp, #28]
   12c50:	bl	15148 <__assert_fail@plt+0x36c8>
   12c54:	ldr	r2, [sp, #36]	; 0x24
   12c58:	umull	r0, r1, r6, sl
   12c5c:	mov	r8, r9
   12c60:	mov	lr, r0
   12c64:	mla	r1, r6, r2, r1
   12c68:	subs	r2, r7, r0
   12c6c:	mla	r1, r9, sl, r1
   12c70:	sbcs	r2, r4, r1
   12c74:	mov	r9, r1
   12c78:	ldr	r2, [sp, #28]
   12c7c:	bcc	12b18 <__assert_fail@plt+0x1098>
   12c80:	b	12c38 <__assert_fail@plt+0x11b8>
   12c84:	ldr	r0, [sp, #40]	; 0x28
   12c88:	movw	r1, #62448	; 0xf3f0
   12c8c:	movt	r1, #1
   12c90:	add	r0, r1, r0
   12c94:	ldr	r1, [sp, #32]
   12c98:	ldrb	r0, [r0, #1]
   12c9c:	adds	r0, r1, r0
   12ca0:	str	r0, [sp, #36]	; 0x24
   12ca4:	adc	r0, r2, #0
   12ca8:	str	r0, [sp, #8]
   12cac:	mov	r0, #1
   12cb0:	mov	r8, r3
   12cb4:	mov	r6, lr
   12cb8:	str	r0, [sp]
   12cbc:	ldr	r0, [sp, #12]
   12cc0:	ldr	r2, [sp, #36]	; 0x24
   12cc4:	ldr	r3, [sp, #8]
   12cc8:	bl	15148 <__assert_fail@plt+0x36c8>
   12ccc:	umull	r0, r1, r7, r4
   12cd0:	mov	r3, r8
   12cd4:	mov	lr, r6
   12cd8:	mla	r1, r7, r8, r1
   12cdc:	subs	r2, r6, r0
   12ce0:	mov	r6, r7
   12ce4:	mov	r8, r9
   12ce8:	mov	r7, r0
   12cec:	mla	r1, r9, r4, r1
   12cf0:	sbcs	r2, sl, r1
   12cf4:	mov	r9, r1
   12cf8:	ldr	r2, [sp, #28]
   12cfc:	bcc	12b40 <__assert_fail@plt+0x10c0>
   12d00:	b	12cac <__assert_fail@plt+0x122c>
   12d04:	ldr	r0, [sp, #32]
   12d08:	vmov.32	d8[0], r0
   12d0c:	vmov.32	d8[1], r2
   12d10:	str	r3, [sp, #8]
   12d14:	str	r4, [sp, #36]	; 0x24
   12d18:	mov	r9, r1
   12d1c:	mov	r4, lr
   12d20:	mov	r0, #0
   12d24:	vorr	q8, q4, q4
   12d28:	add	r3, sp, #52	; 0x34
   12d2c:	ldr	r2, [sp, #24]
   12d30:	add	r1, r2, r0
   12d34:	add	r0, r0, #2
   12d38:	ldrh	r1, [r1]
   12d3c:	cmp	r0, #2
   12d40:	strh	r1, [sp, #52]	; 0x34
   12d44:	vld1.16	{d18[0]}, [r3 :16]
   12d48:	vmovl.u8	q9, d18
   12d4c:	vmovl.u16	q9, d18
   12d50:	vmovl.u32	q9, d18
   12d54:	vadd.i64	q8, q8, q9
   12d58:	bne	12d30 <__assert_fail@plt+0x12b0>
   12d5c:	mov	r0, #1
   12d60:	vorr	d18, d17, d17
   12d64:	str	r0, [sp]
   12d68:	vadd.i64	q8, q8, q9
   12d6c:	ldr	r0, [sp, #12]
   12d70:	vmov.32	r2, d16[0]
   12d74:	vmov.32	r3, d16[1]
   12d78:	bl	15148 <__assert_fail@plt+0x36c8>
   12d7c:	umull	ip, r1, r9, r7
   12d80:	ldr	r8, [sp, #8]
   12d84:	mov	lr, r4
   12d88:	mla	r1, r9, r4, r1
   12d8c:	ldr	r4, [sp, #36]	; 0x24
   12d90:	subs	r2, sl, ip
   12d94:	mla	r3, r8, r7, r1
   12d98:	mov	r1, ip
   12d9c:	sbcs	r2, r4, r3
   12da0:	ldr	r2, [sp, #28]
   12da4:	bcc	12b6c <__assert_fail@plt+0x10ec>
   12da8:	b	12d10 <__assert_fail@plt+0x1290>
   12dac:	mov	r9, r3
   12db0:	mov	r3, r2
   12db4:	ldr	r2, [sp, #32]
   12db8:	ldr	ip, [sp, #24]
   12dbc:	mov	r8, r1
   12dc0:	mov	r0, #0
   12dc4:	ldrb	r1, [ip, -r0]
   12dc8:	sub	r0, r0, #1
   12dcc:	adds	r2, r2, r1
   12dd0:	adc	r3, r3, #0
   12dd4:	cmn	r0, #3
   12dd8:	bne	12dc4 <__assert_fail@plt+0x1344>
   12ddc:	mov	r0, #1
   12de0:	str	r0, [sp]
   12de4:	ldr	r0, [sp, #12]
   12de8:	bl	15148 <__assert_fail@plt+0x36c8>
   12dec:	umull	ip, r1, r4, r7
   12df0:	mov	r3, r9
   12df4:	mla	r1, r4, r6, r1
   12df8:	subs	r2, r8, ip
   12dfc:	mla	r0, sl, r7, r1
   12e00:	mov	r1, r8
   12e04:	mov	r8, sl
   12e08:	sbcs	r2, r9, r0
   12e0c:	mov	r9, r4
   12e10:	mov	r4, ip
   12e14:	mov	sl, r0
   12e18:	ldr	r2, [sp, #28]
   12e1c:	bcc	12b94 <__assert_fail@plt+0x1114>
   12e20:	b	12dac <__assert_fail@plt+0x132c>
   12e24:	ldr	r0, [sp, #32]
   12e28:	vmov.32	d10[0], r0
   12e2c:	vmov.32	d10[1], r2
   12e30:	vorr	d11, d9, d9
   12e34:	str	r3, [sp, #36]	; 0x24
   12e38:	mov	r9, lr
   12e3c:	mov	r8, r1
   12e40:	mov	r0, #0
   12e44:	vorr	q8, q5, q5
   12e48:	add	r3, sp, #48	; 0x30
   12e4c:	ldr	r2, [sp, #24]
   12e50:	add	r1, r2, r0
   12e54:	add	r0, r0, #2
   12e58:	ldrh	r1, [r1]
   12e5c:	cmp	r0, #4
   12e60:	strh	r1, [sp, #48]	; 0x30
   12e64:	vld1.16	{d18[0]}, [r3 :16]
   12e68:	vmovl.u8	q9, d18
   12e6c:	vmovl.u16	q9, d18
   12e70:	vmovl.u32	q9, d18
   12e74:	vadd.i64	q8, q8, q9
   12e78:	bne	12e50 <__assert_fail@plt+0x13d0>
   12e7c:	mov	r0, #1
   12e80:	vorr	d18, d17, d17
   12e84:	str	r0, [sp]
   12e88:	vadd.i64	q8, q8, q9
   12e8c:	ldr	r0, [sp, #12]
   12e90:	vmov.32	r2, d16[0]
   12e94:	vmov.32	r3, d16[1]
   12e98:	bl	15148 <__assert_fail@plt+0x36c8>
   12e9c:	ldr	r6, [sp, #36]	; 0x24
   12ea0:	umull	ip, r1, r9, r7
   12ea4:	mla	r1, r9, r4, r1
   12ea8:	subs	r2, sl, ip
   12eac:	mov	lr, ip
   12eb0:	mla	r3, r6, r7, r1
   12eb4:	mov	r1, r8
   12eb8:	sbcs	r2, r8, r3
   12ebc:	mov	r8, r6
   12ec0:	ldr	r2, [sp, #28]
   12ec4:	bcc	12bbc <__assert_fail@plt+0x113c>
   12ec8:	b	12e34 <__assert_fail@plt+0x13b4>
   12ecc:	str	r1, [sp, #36]	; 0x24
   12ed0:	mov	r9, r3
   12ed4:	mov	r3, r2
   12ed8:	mov	r8, r4
   12edc:	mov	r0, #0
   12ee0:	ldr	r2, [sp, #32]
   12ee4:	ldr	ip, [sp, #24]
   12ee8:	ldrb	r1, [ip, -r0]
   12eec:	sub	r0, r0, #1
   12ef0:	adds	r2, r2, r1
   12ef4:	adc	r3, r3, #0
   12ef8:	cmn	r0, #5
   12efc:	bne	12ee8 <__assert_fail@plt+0x1468>
   12f00:	mov	r0, #1
   12f04:	str	r0, [sp]
   12f08:	ldr	r0, [sp, #12]
   12f0c:	bl	15148 <__assert_fail@plt+0x36c8>
   12f10:	umull	ip, r1, sl, r7
   12f14:	mov	r4, r8
   12f18:	mov	r3, r9
   12f1c:	mla	r1, sl, r8, r1
   12f20:	subs	r2, r9, ip
   12f24:	mov	r9, sl
   12f28:	mov	r8, r6
   12f2c:	mov	sl, ip
   12f30:	mla	r0, r6, r7, r1
   12f34:	ldr	r1, [sp, #36]	; 0x24
   12f38:	mov	r6, r0
   12f3c:	sbcs	r2, r1, r0
   12f40:	ldr	r2, [sp, #28]
   12f44:	bcc	12be4 <__assert_fail@plt+0x1164>
   12f48:	b	12ecc <__assert_fail@plt+0x144c>
   12f4c:	ldr	r0, [sp, #32]
   12f50:	vmov.32	d10[0], r0
   12f54:	vmov.32	d10[1], r2
   12f58:	vorr	d11, d9, d9
   12f5c:	str	r1, [sp, #36]	; 0x24
   12f60:	mov	sl, r3
   12f64:	mov	r9, lr
   12f68:	mov	r0, #0
   12f6c:	vorr	q8, q5, q5
   12f70:	add	r3, sp, #44	; 0x2c
   12f74:	ldr	r2, [sp, #24]
   12f78:	add	r1, r2, r0
   12f7c:	add	r0, r0, #2
   12f80:	ldrh	r1, [r1]
   12f84:	cmp	r0, #6
   12f88:	strh	r1, [sp, #44]	; 0x2c
   12f8c:	vld1.16	{d18[0]}, [r3 :16]
   12f90:	vmovl.u8	q9, d18
   12f94:	vmovl.u16	q9, d18
   12f98:	vmovl.u32	q9, d18
   12f9c:	vadd.i64	q8, q8, q9
   12fa0:	bne	12f78 <__assert_fail@plt+0x14f8>
   12fa4:	mov	r0, #1
   12fa8:	vorr	d18, d17, d17
   12fac:	str	r0, [sp]
   12fb0:	vadd.i64	q8, q8, q9
   12fb4:	ldr	r0, [sp, #12]
   12fb8:	vmov.32	r2, d16[0]
   12fbc:	vmov.32	r3, d16[1]
   12fc0:	bl	15148 <__assert_fail@plt+0x36c8>
   12fc4:	umull	r0, r1, sl, r6
   12fc8:	mov	r3, sl
   12fcc:	mov	lr, r9
   12fd0:	mla	r1, sl, r4, r1
   12fd4:	mov	sl, r7
   12fd8:	subs	r2, r9, r0
   12fdc:	mov	r9, r3
   12fe0:	mov	r3, r0
   12fe4:	mla	r7, r7, r6, r1
   12fe8:	ldr	r1, [sp, #36]	; 0x24
   12fec:	sbcs	r2, r1, r7
   12ff0:	bcc	12c10 <__assert_fail@plt+0x1190>
   12ff4:	b	12f5c <__assert_fail@plt+0x14dc>
   12ff8:	str	r1, [sp, #36]	; 0x24
   12ffc:	mov	r9, r0
   13000:	mov	r5, r6
   13004:	mov	r0, #0
   13008:	ldr	r2, [sp, #32]
   1300c:	ldr	r3, [sp, #28]
   13010:	ldr	ip, [sp, #24]
   13014:	ldrb	r1, [ip, -r0]
   13018:	sub	r0, r0, #1
   1301c:	adds	r2, r2, r1
   13020:	adc	r3, r3, #0
   13024:	cmn	r0, #7
   13028:	bne	13014 <__assert_fail@plt+0x1594>
   1302c:	mov	r0, #1
   13030:	str	r0, [sp]
   13034:	ldr	r0, [sp, #12]
   13038:	bl	15148 <__assert_fail@plt+0x36c8>
   1303c:	ldr	r2, [sp, #36]	; 0x24
   13040:	umull	r0, r1, r9, r8
   13044:	mov	r6, r5
   13048:	mla	r1, r9, r5, r1
   1304c:	mla	r1, r2, r8, r1
   13050:	ldr	r3, [sp, #16]
   13054:	subs	r2, r7, r0
   13058:	sbcs	r2, r4, r1
   1305c:	bcs	12ff8 <__assert_fail@plt+0x1578>
   13060:	ldr	r6, [sp, #40]	; 0x28
   13064:	movw	r0, #63123	; 0xf693
   13068:	ldr	r5, [sp, #32]
   1306c:	ldr	r2, [sp, #28]
   13070:	movt	r0, #1
   13074:	ldrb	r0, [r0, r6]
   13078:	add	r6, r6, #8
   1307c:	adds	r5, r5, r0
   13080:	lsr	r0, r6, #2
   13084:	adc	r2, r2, #0
   13088:	cmp	r0, #166	; 0xa6
   1308c:	bhi	130bc <__assert_fail@plt+0x163c>
   13090:	ldr	r4, [sp, #24]
   13094:	umull	r0, r1, r5, r5
   13098:	mla	r1, r5, r2, r1
   1309c:	subs	r0, r9, r0
   130a0:	mla	r1, r5, r2, r1
   130a4:	add	r4, r4, #8
   130a8:	str	r4, [sp, #24]
   130ac:	ldr	r8, [sp, #36]	; 0x24
   130b0:	sbcs	r0, r8, r1
   130b4:	bcs	12ad4 <__assert_fail@plt+0x1054>
   130b8:	b	130c0 <__assert_fail@plt+0x1640>
   130bc:	ldr	r8, [sp, #36]	; 0x24
   130c0:	ldr	r4, [sp, #12]
   130c4:	ldr	r5, [sp, #20]
   130c8:	orrs	sl, r5, r3
   130cc:	bne	130dc <__assert_fail@plt+0x165c>
   130d0:	subs	r2, r9, #2
   130d4:	sbcs	r2, r8, #0
   130d8:	bcc	13140 <__assert_fail@plt+0x16c0>
   130dc:	mov	r6, r4
   130e0:	mov	r0, r5
   130e4:	mov	r1, r3
   130e8:	mov	r4, r3
   130ec:	mov	r2, r9
   130f0:	mov	r3, r8
   130f4:	bl	131f4 <__assert_fail@plt+0x1774>
   130f8:	cmp	r0, #0
   130fc:	beq	1311c <__assert_fail@plt+0x169c>
   13100:	mov	r0, r6
   13104:	mov	r2, r5
   13108:	mov	r3, r4
   1310c:	str	r9, [sp]
   13110:	str	r8, [sp, #4]
   13114:	bl	13be8 <__assert_fail@plt+0x2168>
   13118:	b	13140 <__assert_fail@plt+0x16c0>
   1311c:	cmp	sl, #0
   13120:	beq	13150 <__assert_fail@plt+0x16d0>
   13124:	mov	r0, #1
   13128:	mov	r1, r4
   1312c:	mov	r2, r9
   13130:	mov	r3, r8
   13134:	stm	sp, {r0, r6}
   13138:	mov	r0, r5
   1313c:	bl	144d0 <__assert_fail@plt+0x2a50>
   13140:	sub	sp, fp, #64	; 0x40
   13144:	vpop	{d8-d11}
   13148:	add	sp, sp, #4
   1314c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13150:	mov	r0, r9
   13154:	mov	r1, r8
   13158:	mov	r2, #1
   1315c:	mov	r3, r6
   13160:	sub	sp, fp, #64	; 0x40
   13164:	vpop	{d8-d11}
   13168:	add	sp, sp, #4
   1316c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13170:	b	13c64 <__assert_fail@plt+0x21e4>
   13174:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13178:	add	fp, sp, #24
   1317c:	sub	sp, sp, #24
   13180:	add	r8, sp, #3
   13184:	mov	r7, r2
   13188:	mov	r2, r8
   1318c:	bl	1749c <__assert_fail@plt+0x5a1c>
   13190:	movw	r9, #500	; 0x1f4
   13194:	mov	r5, r0
   13198:	sub	r0, r8, r0
   1319c:	movt	r9, #3
   131a0:	add	r4, r0, #20
   131a4:	ldr	r6, [r9]
   131a8:	cmp	r4, r7
   131ac:	bcs	131d4 <__assert_fail@plt+0x1754>
   131b0:	add	r0, r5, r7
   131b4:	mov	r1, #48	; 0x30
   131b8:	sub	r0, r0, #20
   131bc:	sub	r7, r0, r8
   131c0:	mov	r0, r6
   131c4:	mov	r2, r7
   131c8:	bl	1193c <memset@plt>
   131cc:	add	r6, r6, r7
   131d0:	str	r6, [r9]
   131d4:	mov	r0, r6
   131d8:	mov	r1, r5
   131dc:	mov	r2, r4
   131e0:	bl	11720 <memcpy@plt>
   131e4:	add	r0, r6, r4
   131e8:	str	r0, [r9]
   131ec:	sub	sp, fp, #24
   131f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131f8:	add	fp, sp, #28
   131fc:	sub	sp, sp, #516	; 0x204
   13200:	orrs	r7, r0, r1
   13204:	beq	13300 <__assert_fail@plt+0x1880>
   13208:	subs	ip, r0, #1
   1320c:	orr	r7, r2, r3
   13210:	str	r1, [sp, #84]	; 0x54
   13214:	str	r0, [sp, #56]	; 0x38
   13218:	sbc	lr, r1, #0
   1321c:	cmp	r7, #0
   13220:	movne	lr, r1
   13224:	movne	ip, r0
   13228:	subs	r6, r2, #1
   1322c:	sbc	r5, r3, #0
   13230:	str	ip, [sp, #80]	; 0x50
   13234:	str	lr, [sp, #76]	; 0x4c
   13238:	str	r6, [sp, #88]	; 0x58
   1323c:	mov	r7, r5
   13240:	str	r5, [sp, #92]	; 0x5c
   13244:	orrs	r7, r6, r5
   13248:	beq	13310 <__assert_fail@plt+0x1890>
   1324c:	mov	r4, #0
   13250:	tst	r6, #1
   13254:	bne	1327c <__assert_fail@plt+0x17fc>
   13258:	ldr	r1, [sp, #92]	; 0x5c
   1325c:	mov	r4, #0
   13260:	mov	r0, r6
   13264:	lsrs	r1, r1, #1
   13268:	add	r4, r4, #1
   1326c:	rrx	r7, r0
   13270:	tst	r0, #2
   13274:	mov	r0, r7
   13278:	beq	13264 <__assert_fail@plt+0x17e4>
   1327c:	sub	r1, r4, #32
   13280:	lsr	r0, lr, r4
   13284:	rsb	r5, r4, #32
   13288:	ldr	r8, [sp, #92]	; 0x5c
   1328c:	str	r4, [sp, #32]
   13290:	cmp	r1, #0
   13294:	movwge	r0, #0
   13298:	cmp	r1, #0
   1329c:	str	r0, [fp, #-36]	; 0xffffffdc
   132a0:	lsr	r0, ip, r4
   132a4:	orr	r0, r0, lr, lsl r5
   132a8:	lsrge	r0, lr, r1
   132ac:	str	r0, [fp, #-40]	; 0xffffffd8
   132b0:	lsr	r0, r6, r4
   132b4:	rsb	r6, r4, #64	; 0x40
   132b8:	orr	r0, r0, r8, lsl r5
   132bc:	lsl	r7, ip, r6
   132c0:	lsrge	r0, r8, r1
   132c4:	cmp	r5, #0
   132c8:	movwge	r7, #0
   132cc:	cmp	r5, #0
   132d0:	orr	r0, r7, r0
   132d4:	lsr	r7, r8, r4
   132d8:	str	r0, [fp, #-48]	; 0xffffffd0
   132dc:	rsb	r0, r6, #32
   132e0:	lsr	r0, ip, r0
   132e4:	orr	r0, r0, lr, lsl r6
   132e8:	lslge	r0, ip, r5
   132ec:	cmp	r1, #0
   132f0:	movwge	r7, #0
   132f4:	orr	r0, r0, r7
   132f8:	str	r0, [fp, #-44]	; 0xffffffd4
   132fc:	b	13380 <__assert_fail@plt+0x1900>
   13300:	mov	r0, r2
   13304:	mov	r1, r3
   13308:	bl	1522c <__assert_fail@plt+0x37ac>
   1330c:	b	13bb8 <__assert_fail@plt+0x2138>
   13310:	mov	r1, #0
   13314:	tst	ip, #1
   13318:	mov	r0, #0
   1331c:	bne	13344 <__assert_fail@plt+0x18c4>
   13320:	mov	r0, #0
   13324:	mov	r7, ip
   13328:	mov	r6, lr
   1332c:	lsrs	r6, r6, #1
   13330:	add	r0, r0, #1
   13334:	rrx	r5, r7
   13338:	tst	r7, #2
   1333c:	mov	r7, r5
   13340:	beq	1332c <__assert_fail@plt+0x18ac>
   13344:	sub	r6, r0, #32
   13348:	str	r1, [fp, #-36]	; 0xffffffdc
   1334c:	str	r1, [fp, #-40]	; 0xffffffd8
   13350:	lsr	r1, lr, r0
   13354:	rsb	r7, r0, #32
   13358:	cmp	r6, #0
   1335c:	movwge	r1, #0
   13360:	cmp	r6, #0
   13364:	str	r1, [fp, #-44]	; 0xffffffd4
   13368:	lsr	r1, ip, r0
   1336c:	add	r0, r0, #64	; 0x40
   13370:	orr	r1, r1, lr, lsl r7
   13374:	str	r0, [sp, #32]
   13378:	lsrge	r1, lr, r6
   1337c:	str	r1, [fp, #-48]	; 0xffffffd0
   13380:	movw	r1, #63798	; 0xf936
   13384:	ubfx	r0, r2, #1, #7
   13388:	mov	r6, r2
   1338c:	str	r3, [sp, #52]	; 0x34
   13390:	movt	r1, #1
   13394:	str	r6, [sp, #48]	; 0x30
   13398:	ldrb	r1, [r1, r0]
   1339c:	umull	r0, r7, r1, r2
   133a0:	mla	r7, r1, r3, r7
   133a4:	rsbs	r0, r0, #2
   133a8:	rsc	r8, r7, #0
   133ac:	umull	r4, r7, r0, r1
   133b0:	umull	r0, sl, r4, r2
   133b4:	mla	r1, r8, r1, r7
   133b8:	mov	r7, #0
   133bc:	rsbs	r5, r0, #2
   133c0:	umull	r9, lr, r4, r5
   133c4:	umull	ip, r0, r9, r2
   133c8:	mla	r2, r4, r3, sl
   133cc:	ldr	sl, [sp, #84]	; 0x54
   133d0:	mla	r2, r1, r6, r2
   133d4:	mla	r0, r9, r3, r0
   133d8:	mov	r3, #0
   133dc:	rsc	r2, r2, #0
   133e0:	rsbs	ip, ip, #2
   133e4:	mla	r2, r4, r2, lr
   133e8:	ldr	r4, [sp, #56]	; 0x38
   133ec:	mla	lr, r1, r5, r2
   133f0:	mov	r1, #127	; 0x7f
   133f4:	mov	r2, #0
   133f8:	mov	r5, #0
   133fc:	mla	r0, lr, r6, r0
   13400:	rsc	r0, r0, #0
   13404:	str	r0, [sp, #148]	; 0x94
   13408:	rsbs	r0, r4, #1
   1340c:	rscs	r0, sl, #0
   13410:	movwcc	r7, #1
   13414:	cmp	r7, #0
   13418:	movwne	r1, #63	; 0x3f
   1341c:	subs	r0, r4, #2
   13420:	sbcs	r0, sl, #0
   13424:	movwcc	r2, #1
   13428:	mov	r0, #0
   1342c:	str	r0, [sp, #156]	; 0x9c
   13430:	mov	r8, r3
   13434:	ldr	r3, [sp, #156]	; 0x9c
   13438:	ldr	r6, [sp, #56]	; 0x38
   1343c:	mov	r4, r1
   13440:	lsl	r0, r3, #1
   13444:	orr	r1, r0, r2, lsr #31
   13448:	lsl	r0, r5, #1
   1344c:	lsl	r2, r2, #1
   13450:	orr	r5, r0, r7, lsr #31
   13454:	lsl	r0, r7, #1
   13458:	orr	r7, r0, r3, lsr #31
   1345c:	subs	r0, r6, r7
   13460:	sbcs	r0, sl, r5
   13464:	bcc	13490 <__assert_fail@plt+0x1a10>
   13468:	ldr	r0, [sp, #48]	; 0x30
   1346c:	subs	r0, r2, r0
   13470:	ldr	r0, [sp, #52]	; 0x34
   13474:	sbcs	r0, r1, r0
   13478:	bcc	134cc <__assert_fail@plt+0x1a4c>
   1347c:	ldr	r6, [sp, #56]	; 0x38
   13480:	eor	r3, r5, sl
   13484:	eor	r0, r7, r6
   13488:	orrs	r0, r0, r3
   1348c:	bne	134cc <__assert_fail@plt+0x1a4c>
   13490:	subs	r0, r7, r6
   13494:	ldr	r6, [sp, #48]	; 0x30
   13498:	sbc	r3, r5, sl
   1349c:	subs	r7, r0, #1
   134a0:	sbc	r5, r3, #0
   134a4:	subs	r2, r2, r6
   134a8:	ldr	r6, [sp, #52]	; 0x34
   134ac:	sbcs	r1, r1, r6
   134b0:	str	r1, [sp, #156]	; 0x9c
   134b4:	mov	r1, #0
   134b8:	movwcc	r1, #1
   134bc:	cmp	r1, #0
   134c0:	moveq	r7, r0
   134c4:	moveq	r5, r3
   134c8:	b	134d0 <__assert_fail@plt+0x1a50>
   134cc:	str	r1, [sp, #156]	; 0x9c
   134d0:	subs	r1, r4, #1
   134d4:	sbc	r3, r8, #0
   134d8:	orrs	r0, r4, r8
   134dc:	bne	13430 <__assert_fail@plt+0x19b0>
   134e0:	ldr	r3, [sp, #156]	; 0x9c
   134e4:	lsl	r0, r5, #1
   134e8:	str	r2, [fp, #-80]	; 0xffffffb0
   134ec:	str	r7, [fp, #-72]	; 0xffffffb8
   134f0:	str	r5, [sp, #132]	; 0x84
   134f4:	lsl	r8, r2, #1
   134f8:	str	r2, [sp, #140]	; 0x8c
   134fc:	str	r7, [sp, #96]	; 0x60
   13500:	mov	r4, #0
   13504:	str	r8, [fp, #-64]	; 0xffffffc0
   13508:	str	r3, [fp, #-76]	; 0xffffffb4
   1350c:	str	r5, [fp, #-68]	; 0xffffffbc
   13510:	orr	r5, r0, r7, lsr #31
   13514:	lsl	r0, r3, #1
   13518:	orr	r1, r0, r2, lsr #31
   1351c:	rsbs	r0, r2, r2, lsl #1
   13520:	str	r5, [fp, #-52]	; 0xffffffcc
   13524:	sbcs	r0, r1, r3
   13528:	ldr	r3, [sp, #48]	; 0x30
   1352c:	str	r1, [fp, #-60]	; 0xffffffc4
   13530:	mov	r0, #0
   13534:	movwcc	r0, #1
   13538:	orr	r6, r0, r7, lsl #1
   1353c:	umull	r2, r0, r9, ip
   13540:	ldr	r7, [sp, #56]	; 0x38
   13544:	str	r2, [sp, #152]	; 0x98
   13548:	ldr	r2, [sp, #148]	; 0x94
   1354c:	str	r6, [fp, #-56]	; 0xffffffc8
   13550:	mla	r0, r9, r2, r0
   13554:	mla	r0, lr, ip, r0
   13558:	ldr	ip, [sp, #52]	; 0x34
   1355c:	str	r0, [sp, #148]	; 0x94
   13560:	sub	r0, fp, #64	; 0x40
   13564:	add	r0, r0, #8
   13568:	str	r0, [sp, #28]
   1356c:	subs	r0, r7, r6
   13570:	sbcs	r0, sl, r5
   13574:	bcc	13594 <__assert_fail@plt+0x1b14>
   13578:	subs	r0, r8, r3
   1357c:	sbcs	r0, r1, ip
   13580:	bcc	135c8 <__assert_fail@plt+0x1b48>
   13584:	eor	r0, r6, r7
   13588:	eor	r2, r5, sl
   1358c:	orrs	r0, r0, r2
   13590:	bne	135c8 <__assert_fail@plt+0x1b48>
   13594:	subs	r0, r8, r3
   13598:	ldr	r2, [sp, #28]
   1359c:	str	r0, [fp, #-64]	; 0xffffffc0
   135a0:	sbcs	r0, r1, ip
   135a4:	movwcc	r4, #1
   135a8:	str	r0, [fp, #-60]	; 0xffffffc4
   135ac:	cmp	r4, #0
   135b0:	mvnne	r4, #0
   135b4:	subs	r0, r4, r7
   135b8:	sbc	r1, r4, sl
   135bc:	adds	r0, r0, r6
   135c0:	adc	r1, r1, r5
   135c4:	strd	r0, [r2]
   135c8:	sub	r2, fp, #48	; 0x30
   135cc:	sub	r0, fp, #64	; 0x40
   135d0:	str	r7, [fp, #-88]	; 0xffffffa8
   135d4:	str	r3, [fp, #-96]	; 0xffffffa0
   135d8:	str	sl, [fp, #-84]	; 0xffffffac
   135dc:	str	ip, [fp, #-92]	; 0xffffffa4
   135e0:	sub	r1, fp, #80	; 0x50
   135e4:	stm	sp, {r0, r2}
   135e8:	str	r1, [sp, #12]
   135ec:	ldr	r0, [sp, #32]
   135f0:	ldr	r2, [sp, #152]	; 0x98
   135f4:	ldr	r3, [sp, #148]	; 0x94
   135f8:	str	r0, [sp, #8]
   135fc:	sub	r0, fp, #96	; 0x60
   13600:	bl	1574c <__assert_fail@plt+0x3ccc>
   13604:	mov	r1, r0
   13608:	mov	r0, #0
   1360c:	cmp	r1, #0
   13610:	beq	13bb8 <__assert_fail@plt+0x2138>
   13614:	ldr	r5, [sp, #80]	; 0x50
   13618:	ldr	r6, [sp, #76]	; 0x4c
   1361c:	ldr	r7, [sp, #88]	; 0x58
   13620:	ldr	r4, [sp, #92]	; 0x5c
   13624:	add	r8, sp, #192	; 0xc0
   13628:	str	r8, [sp]
   1362c:	mov	r0, r5
   13630:	mov	r1, r6
   13634:	mov	r2, r7
   13638:	mov	r3, r4
   1363c:	bl	127c8 <__assert_fail@plt+0xd48>
   13640:	lsrs	r0, r6, #1
   13644:	str	r0, [sp, #72]	; 0x48
   13648:	rrx	r0, r5
   1364c:	str	r0, [sp, #68]	; 0x44
   13650:	lsrs	r0, r4, #1
   13654:	orr	r0, r0, r5, lsl #31
   13658:	rrx	r1, r7
   1365c:	str	r0, [sp, #60]	; 0x3c
   13660:	add	r0, sp, #160	; 0xa0
   13664:	str	r1, [sp, #64]	; 0x40
   13668:	add	r0, r0, #8
   1366c:	str	r0, [sp, #144]	; 0x90
   13670:	add	r0, sp, #176	; 0xb0
   13674:	add	r0, r0, #8
   13678:	str	r0, [sp, #136]	; 0x88
   1367c:	add	r0, r8, #16
   13680:	str	r0, [sp, #20]
   13684:	add	r0, r8, #8
   13688:	str	r0, [sp, #24]
   1368c:	mov	r0, #2
   13690:	str	r0, [sp, #40]	; 0x28
   13694:	mov	r0, #0
   13698:	str	r0, [sp, #36]	; 0x24
   1369c:	mov	r0, #0
   136a0:	str	r0, [sp, #44]	; 0x2c
   136a4:	ldr	r0, [sp, #24]
   136a8:	mov	r4, #1
   136ac:	mov	r8, sl
   136b0:	ldrd	r0, [r0]
   136b4:	orrs	r0, r0, r1
   136b8:	beq	137f8 <__assert_fail@plt+0x1d78>
   136bc:	ldr	r0, [sp, #192]	; 0xc0
   136c0:	movw	r1, #63798	; 0xf936
   136c4:	ldr	ip, [sp, #196]	; 0xc4
   136c8:	movt	r1, #1
   136cc:	ubfx	r2, r0, #1, #7
   136d0:	ldrb	r2, [r1, r2]
   136d4:	umull	r3, r7, r0, r2
   136d8:	rsbs	r3, r3, #2
   136dc:	mla	r7, ip, r2, r7
   136e0:	umull	r3, r6, r3, r2
   136e4:	rsc	r7, r7, #0
   136e8:	mla	r1, r7, r2, r6
   136ec:	umull	r7, r6, r3, r0
   136f0:	mla	r6, r3, ip, r6
   136f4:	rsbs	r9, r7, #2
   136f8:	str	r1, [sp, #108]	; 0x6c
   136fc:	mla	r6, r1, r0, r6
   13700:	rsc	r1, r6, #0
   13704:	str	r1, [sp, #128]	; 0x80
   13708:	umull	r5, r1, r3, r9
   1370c:	str	r1, [sp, #120]	; 0x78
   13710:	umull	r6, r1, r5, r0
   13714:	rsbs	sl, r6, #2
   13718:	ldr	r6, [sp, #88]	; 0x58
   1371c:	str	r1, [sp, #116]	; 0x74
   13720:	umull	r1, r2, r5, sl
   13724:	str	r2, [sp, #124]	; 0x7c
   13728:	umull	lr, r2, r1, r6
   1372c:	str	r2, [sp, #112]	; 0x70
   13730:	ldr	r2, [sp, #92]	; 0x5c
   13734:	str	lr, [sp, #176]	; 0xb0
   13738:	ldr	r7, [sp, #112]	; 0x70
   1373c:	mla	lr, r1, r2, r7
   13740:	ldr	r1, [sp, #116]	; 0x74
   13744:	ldr	r2, [sp, #128]	; 0x80
   13748:	mla	ip, r5, ip, r1
   1374c:	ldr	r1, [sp, #120]	; 0x78
   13750:	mla	r3, r3, r2, r1
   13754:	ldr	r1, [sp, #108]	; 0x6c
   13758:	mla	r2, r1, r9, r3
   1375c:	ldr	r1, [sp, #124]	; 0x7c
   13760:	sub	r3, fp, #96	; 0x60
   13764:	mla	r0, r2, r0, ip
   13768:	rsc	r0, r0, #0
   1376c:	mla	r0, r5, r0, r1
   13770:	mov	r1, #0
   13774:	mla	r0, r2, sl, r0
   13778:	add	r2, sp, #176	; 0xb0
   1377c:	mla	r0, r0, r6, lr
   13780:	str	r0, [sp, #180]	; 0xb4
   13784:	ldr	r0, [sp, #136]	; 0x88
   13788:	str	r1, [r0]
   1378c:	str	r1, [r0, #4]
   13790:	ldr	r0, [sp, #152]	; 0x98
   13794:	sub	r1, fp, #64	; 0x40
   13798:	str	r0, [sp]
   1379c:	ldr	r0, [sp, #148]	; 0x94
   137a0:	str	r0, [sp, #4]
   137a4:	sub	r0, fp, #80	; 0x50
   137a8:	str	r0, [sp, #8]
   137ac:	ldr	r0, [sp, #144]	; 0x90
   137b0:	bl	159a4 <__assert_fail@plt+0x3f24>
   137b4:	ldr	r2, [sp, #156]	; 0x9c
   137b8:	str	r1, [sp, #164]	; 0xa4
   137bc:	ldr	r9, [sp, #96]	; 0x60
   137c0:	str	r0, [sp, #160]	; 0xa0
   137c4:	eor	r1, r1, r2
   137c8:	ldr	r2, [sp, #140]	; 0x8c
   137cc:	eor	r0, r0, r2
   137d0:	orrs	r0, r0, r1
   137d4:	bne	137fc <__assert_fail@plt+0x1d7c>
   137d8:	ldr	r0, [sp, #144]	; 0x90
   137dc:	ldr	r2, [sp, #132]	; 0x84
   137e0:	ldrd	r0, [r0]
   137e4:	eor	r1, r1, r2
   137e8:	eor	r0, r0, r9
   137ec:	orrs	r4, r0, r1
   137f0:	movwne	r4, #1
   137f4:	b	137fc <__assert_fail@plt+0x1d7c>
   137f8:	ldr	r9, [sp, #96]	; 0x60
   137fc:	cmp	r4, #0
   13800:	ldrbne	r0, [sp, #442]	; 0x1ba
   13804:	cmpne	r0, #0
   13808:	bne	13980 <__assert_fail@plt+0x1f00>
   1380c:	cmp	r4, #0
   13810:	bne	13bac <__assert_fail@plt+0x212c>
   13814:	ldr	r1, [sp, #44]	; 0x2c
   13818:	movw	r0, #62448	; 0xf3f0
   1381c:	ldr	r7, [sp, #40]	; 0x28
   13820:	ldr	r6, [sp, #36]	; 0x24
   13824:	ldr	r9, [sp, #56]	; 0x38
   13828:	mov	sl, r8
   1382c:	ldr	lr, [sp, #52]	; 0x34
   13830:	mov	r4, #127	; 0x7f
   13834:	mov	r2, #0
   13838:	movt	r0, #1
   1383c:	ldrb	r0, [r0, r1]
   13840:	adds	r7, r7, r0
   13844:	adc	r6, r6, #0
   13848:	subs	r0, r7, r9
   1384c:	mov	r1, r7
   13850:	str	r7, [sp, #40]	; 0x28
   13854:	sbcs	r0, r6, r8
   13858:	ldr	r8, [sp, #48]	; 0x30
   1385c:	mov	r5, r6
   13860:	str	r6, [sp, #36]	; 0x24
   13864:	mov	r0, #0
   13868:	movwcc	r0, #1
   1386c:	cmp	r0, #0
   13870:	mov	r3, r0
   13874:	movwne	r4, #63	; 0x3f
   13878:	movwne	r5, #0
   1387c:	movwne	r1, #0
   13880:	movne	r3, r6
   13884:	movne	r0, r7
   13888:	lsl	r3, r3, #1
   1388c:	mov	ip, r2
   13890:	lsl	r2, r5, #1
   13894:	lsr	r5, r5, #31
   13898:	mov	r7, r4
   1389c:	orr	r3, r3, r0, lsr #31
   138a0:	orr	r0, r5, r0, lsl #1
   138a4:	orr	r2, r2, r1, lsr #31
   138a8:	lsl	r1, r1, #1
   138ac:	subs	r5, r9, r0
   138b0:	sbcs	r5, sl, r3
   138b4:	bcc	138d4 <__assert_fail@plt+0x1e54>
   138b8:	subs	r5, r1, r8
   138bc:	sbcs	r5, r2, lr
   138c0:	bcc	13904 <__assert_fail@plt+0x1e84>
   138c4:	eor	r5, r0, r9
   138c8:	eor	r4, r3, sl
   138cc:	orrs	r5, r5, r4
   138d0:	bne	13904 <__assert_fail@plt+0x1e84>
   138d4:	subs	r4, r0, r9
   138d8:	sbc	r6, r3, sl
   138dc:	subs	r0, r4, #1
   138e0:	sbc	r3, r6, #0
   138e4:	subs	r1, r1, r8
   138e8:	sbcs	r5, r2, lr
   138ec:	mov	r2, #0
   138f0:	movwcc	r2, #1
   138f4:	cmp	r2, #0
   138f8:	moveq	r0, r4
   138fc:	moveq	r3, r6
   13900:	b	13908 <__assert_fail@plt+0x1e88>
   13904:	mov	r5, r2
   13908:	subs	r4, r7, #1
   1390c:	sbc	r2, ip, #0
   13910:	orrs	r7, r7, ip
   13914:	bne	13888 <__assert_fail@plt+0x1e08>
   13918:	ldr	r2, [sp, #28]
   1391c:	stm	r2, {r0, r3}
   13920:	sub	r0, fp, #64	; 0x40
   13924:	str	r5, [fp, #-60]	; 0xffffffc4
   13928:	str	r1, [fp, #-64]	; 0xffffffc0
   1392c:	str	r0, [sp]
   13930:	sub	r0, fp, #48	; 0x30
   13934:	ldr	r2, [sp, #152]	; 0x98
   13938:	ldr	r3, [sp, #148]	; 0x94
   1393c:	str	r0, [sp, #4]
   13940:	ldr	r0, [sp, #32]
   13944:	str	r0, [sp, #8]
   13948:	sub	r0, fp, #80	; 0x50
   1394c:	str	r0, [sp, #12]
   13950:	sub	r0, fp, #96	; 0x60
   13954:	bl	1574c <__assert_fail@plt+0x3ccc>
   13958:	cmp	r0, #0
   1395c:	beq	13bb4 <__assert_fail@plt+0x2134>
   13960:	ldr	r0, [sp, #44]	; 0x2c
   13964:	mov	r1, r0
   13968:	add	r1, r0, #1
   1396c:	cmp	r1, #668	; 0x29c
   13970:	mov	r0, r1
   13974:	str	r1, [sp, #44]	; 0x2c
   13978:	bcc	136a4 <__assert_fail@plt+0x1c24>
   1397c:	b	13bc0 <__assert_fail@plt+0x2140>
   13980:	ldr	r5, [sp, #20]
   13984:	mov	r6, #1
   13988:	ldrd	r0, [r5]
   1398c:	eor	r2, r0, #2
   13990:	orrs	r2, r2, r1
   13994:	bne	139c0 <__assert_fail@plt+0x1f40>
   13998:	ldr	r0, [sp, #64]	; 0x40
   1399c:	ldr	r1, [sp, #68]	; 0x44
   139a0:	ldr	r2, [sp, #136]	; 0x88
   139a4:	str	r0, [sp, #176]	; 0xb0
   139a8:	ldr	r0, [sp, #60]	; 0x3c
   139ac:	str	r0, [sp, #180]	; 0xb4
   139b0:	ldr	r0, [sp, #72]	; 0x48
   139b4:	str	r1, [r2]
   139b8:	str	r0, [r2, #4]
   139bc:	b	13b1c <__assert_fail@plt+0x209c>
   139c0:	movw	r3, #63798	; 0xf936
   139c4:	str	r6, [sp, #104]	; 0x68
   139c8:	ubfx	r2, r0, #1, #7
   139cc:	ldr	r9, [sp, #88]	; 0x58
   139d0:	movt	r3, #1
   139d4:	ldrb	r2, [r3, r2]
   139d8:	umull	r3, r7, r0, r2
   139dc:	rsbs	r3, r3, #2
   139e0:	mla	r7, r1, r2, r7
   139e4:	umull	r6, r3, r3, r2
   139e8:	rsc	r7, r7, #0
   139ec:	mla	sl, r7, r2, r3
   139f0:	umull	r2, r3, r6, r0
   139f4:	mla	r3, r6, r1, r3
   139f8:	rsbs	r4, r2, #2
   139fc:	mla	r3, sl, r0, r3
   13a00:	rsc	r2, r3, #0
   13a04:	str	r2, [sp, #124]	; 0x7c
   13a08:	umull	r2, r3, r6, r4
   13a0c:	str	r3, [sp, #116]	; 0x74
   13a10:	umull	r3, r7, r2, r0
   13a14:	rsbs	ip, r3, #2
   13a18:	str	r7, [sp, #108]	; 0x6c
   13a1c:	umull	r8, r3, r2, ip
   13a20:	str	r3, [sp, #120]	; 0x78
   13a24:	umull	r3, lr, r8, r9
   13a28:	str	r8, [sp, #100]	; 0x64
   13a2c:	str	r3, [sp, #128]	; 0x80
   13a30:	ldr	r3, [sp, #92]	; 0x5c
   13a34:	mla	r3, r8, r3, lr
   13a38:	ldr	lr, [sp, #116]	; 0x74
   13a3c:	str	r3, [sp, #112]	; 0x70
   13a40:	ldr	r3, [sp, #108]	; 0x6c
   13a44:	mla	r8, r2, r1, r3
   13a48:	ldr	r3, [sp, #124]	; 0x7c
   13a4c:	mla	r6, r6, r3, lr
   13a50:	ldr	lr, [sp, #80]	; 0x50
   13a54:	mla	r4, sl, r4, r6
   13a58:	ldr	r6, [sp, #120]	; 0x78
   13a5c:	mla	r3, r4, r0, r8
   13a60:	rsc	r3, r3, #0
   13a64:	mla	r2, r2, r3, r6
   13a68:	mla	ip, r4, ip, r2
   13a6c:	ldr	r2, [sp, #112]	; 0x70
   13a70:	mla	r6, ip, r9, r2
   13a74:	ldr	r9, [sp, #76]	; 0x4c
   13a78:	subs	r2, lr, r0
   13a7c:	sbcs	r2, r9, r1
   13a80:	bcs	13aa4 <__assert_fail@plt+0x2024>
   13a84:	ldr	r0, [sp, #128]	; 0x80
   13a88:	mov	r1, #0
   13a8c:	str	r6, [sp, #180]	; 0xb4
   13a90:	str	r0, [sp, #176]	; 0xb0
   13a94:	ldr	r0, [sp, #136]	; 0x88
   13a98:	str	r1, [r0]
   13a9c:	str	r1, [r0, #4]
   13aa0:	b	13b10 <__assert_fail@plt+0x2090>
   13aa4:	ldr	r8, [sp, #128]	; 0x80
   13aa8:	umull	r2, r3, r8, r1
   13aac:	umull	r4, r7, r8, r0
   13ab0:	umlal	r2, r3, r6, r0
   13ab4:	adds	r2, r2, r7
   13ab8:	umull	r0, r7, r6, r0
   13abc:	adc	r3, r3, #0
   13ac0:	subs	r0, r2, r0
   13ac4:	umull	r1, r2, r6, r1
   13ac8:	sbcs	r0, r3, r7
   13acc:	ldr	r7, [sp, #100]	; 0x64
   13ad0:	mov	r0, #0
   13ad4:	movwcc	r0, #1
   13ad8:	cmp	r0, #0
   13adc:	addne	r2, r2, #1
   13ae0:	subs	r0, lr, r3
   13ae4:	sbc	r3, r9, #0
   13ae8:	subs	r0, r0, r1
   13aec:	umull	r4, r1, r0, r7
   13af0:	mla	r0, r0, ip, r1
   13af4:	sbc	r1, r3, r2
   13af8:	mla	r1, r1, r7, r0
   13afc:	ldr	r0, [sp, #136]	; 0x88
   13b00:	str	r4, [r0]
   13b04:	str	r1, [r0, #4]
   13b08:	str	r6, [sp, #180]	; 0xb4
   13b0c:	str	r8, [sp, #176]	; 0xb0
   13b10:	ldr	r8, [sp, #84]	; 0x54
   13b14:	ldr	r9, [sp, #96]	; 0x60
   13b18:	ldr	r6, [sp, #104]	; 0x68
   13b1c:	ldr	r0, [sp, #152]	; 0x98
   13b20:	ldr	r4, [sp, #144]	; 0x90
   13b24:	sub	r1, fp, #64	; 0x40
   13b28:	add	r2, sp, #176	; 0xb0
   13b2c:	sub	r3, fp, #96	; 0x60
   13b30:	str	r0, [sp]
   13b34:	ldr	r0, [sp, #148]	; 0x94
   13b38:	str	r0, [sp, #4]
   13b3c:	sub	r0, fp, #80	; 0x50
   13b40:	str	r0, [sp, #8]
   13b44:	mov	r0, r4
   13b48:	bl	159a4 <__assert_fail@plt+0x3f24>
   13b4c:	ldr	r2, [sp, #156]	; 0x9c
   13b50:	str	r1, [sp, #164]	; 0xa4
   13b54:	str	r0, [sp, #160]	; 0xa0
   13b58:	ldr	r7, [sp, #132]	; 0x84
   13b5c:	eor	r1, r1, r2
   13b60:	ldrd	r2, [r4]
   13b64:	eor	r3, r3, r7
   13b68:	eor	r2, r2, r9
   13b6c:	orr	r1, r1, r3
   13b70:	ldr	r3, [sp, #140]	; 0x8c
   13b74:	eor	r0, r0, r3
   13b78:	orr	r0, r0, r2
   13b7c:	orrs	r0, r0, r1
   13b80:	mov	r4, r0
   13b84:	movwne	r4, #1
   13b88:	cmp	r0, #0
   13b8c:	beq	1380c <__assert_fail@plt+0x1d8c>
   13b90:	ldrb	r1, [sp, #442]	; 0x1ba
   13b94:	add	r0, r6, #1
   13b98:	add	r5, r5, #8
   13b9c:	cmp	r6, r1
   13ba0:	mov	r6, r0
   13ba4:	bcc	13988 <__assert_fail@plt+0x1f08>
   13ba8:	b	1380c <__assert_fail@plt+0x1d8c>
   13bac:	mov	r0, #1
   13bb0:	b	13bb8 <__assert_fail@plt+0x2138>
   13bb4:	mov	r0, #0
   13bb8:	sub	sp, fp, #28
   13bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bc0:	movw	r1, #50789	; 0xc665
   13bc4:	mov	r0, #0
   13bc8:	mov	r2, #5
   13bcc:	movt	r1, #1
   13bd0:	bl	1175c <dcgettext@plt>
   13bd4:	mov	r2, r0
   13bd8:	mov	r0, #0
   13bdc:	mov	r1, #0
   13be0:	bl	1184c <error@plt>
   13be4:	bl	11a68 <abort@plt>
   13be8:	push	{r4, r5, r7, r9, fp, lr}
   13bec:	add	fp, sp, #16
   13bf0:	sub	sp, sp, #8
   13bf4:	mov	r4, r2
   13bf8:	orrs	r1, r2, r3
   13bfc:	ldr	r9, [fp, #12]
   13c00:	ldr	r2, [fp, #8]
   13c04:	beq	13c4c <__assert_fail@plt+0x21cc>
   13c08:	mov	r1, r0
   13c0c:	ldr	r5, [r1, #8]!
   13c10:	ldr	r7, [r1, #4]
   13c14:	orrs	r7, r5, r7
   13c18:	stmeq	r0, {r2, r9}
   13c1c:	streq	r4, [r1]
   13c20:	streq	r3, [r1, #4]
   13c24:	subeq	sp, fp, #16
   13c28:	popeq	{r4, r5, r7, r9, fp, pc}
   13c2c:	movw	r0, #51087	; 0xc78f
   13c30:	movw	r1, #50776	; 0xc658
   13c34:	movw	r3, #51111	; 0xc7a7
   13c38:	movw	r2, #558	; 0x22e
   13c3c:	movt	r0, #1
   13c40:	movt	r1, #1
   13c44:	movt	r3, #1
   13c48:	bl	11a80 <__assert_fail@plt>
   13c4c:	mov	r1, #1
   13c50:	mov	r3, r9
   13c54:	str	r1, [sp]
   13c58:	bl	15148 <__assert_fail@plt+0x36c8>
   13c5c:	sub	sp, fp, #16
   13c60:	pop	{r4, r5, r7, r9, fp, pc}
   13c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c68:	add	fp, sp, #28
   13c6c:	sub	sp, sp, #84	; 0x54
   13c70:	mov	lr, r0
   13c74:	subs	r0, r0, #2
   13c78:	str	r3, [sp, #12]
   13c7c:	sbcs	r0, r1, #0
   13c80:	bcc	14470 <__assert_fail@plt+0x29f0>
   13c84:	mvn	r0, #63	; 0x3f
   13c88:	str	lr, [fp, #-32]	; 0xffffffe0
   13c8c:	mov	r6, lr
   13c90:	mov	r5, r1
   13c94:	mov	r9, r1
   13c98:	mov	r1, #0
   13c9c:	mov	r7, #0
   13ca0:	mov	sl, #1
   13ca4:	mov	r4, #0
   13ca8:	mov	ip, #0
   13cac:	mov	lr, #0
   13cb0:	str	r2, [sp, #16]
   13cb4:	str	r1, [fp, #-44]	; 0xffffffd4
   13cb8:	lsrs	r3, lr, #1
   13cbc:	rrx	ip, ip
   13cc0:	lsrs	r9, r9, #1
   13cc4:	orr	lr, r3, r6, lsl #31
   13cc8:	rrx	r6, r6
   13ccc:	subs	r3, r6, sl
   13cd0:	sbcs	r3, r9, r4
   13cd4:	bcc	13cf8 <__assert_fail@plt+0x2278>
   13cd8:	eor	r8, sl, r6
   13cdc:	eor	r3, r4, r9
   13ce0:	orrs	r3, r8, r3
   13ce4:	bne	13d34 <__assert_fail@plt+0x22b4>
   13ce8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13cec:	subs	r3, r1, ip
   13cf0:	sbcs	r3, r7, lr
   13cf4:	bcc	13d34 <__assert_fail@plt+0x22b4>
   13cf8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13cfc:	subs	r3, sl, r6
   13d00:	sbc	r2, r4, r9
   13d04:	subs	sl, r3, #1
   13d08:	sbc	r4, r2, #0
   13d0c:	subs	r1, r1, ip
   13d10:	sbcs	r7, r7, lr
   13d14:	str	r1, [fp, #-44]	; 0xffffffd4
   13d18:	mov	r1, r7
   13d1c:	mov	r7, #0
   13d20:	movwcc	r7, #1
   13d24:	cmp	r7, #0
   13d28:	mov	r7, r1
   13d2c:	moveq	sl, r3
   13d30:	moveq	r4, r2
   13d34:	adds	r0, r0, #1
   13d38:	bne	13cb8 <__assert_fail@plt+0x2238>
   13d3c:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13d40:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13d44:	ldr	ip, [sp, #16]
   13d48:	subs	r0, r4, r2
   13d4c:	sbc	r1, r5, r7
   13d50:	subs	r0, r2, r0
   13d54:	mov	r2, #0
   13d58:	sbcs	r1, r7, r1
   13d5c:	movwcc	r2, #1
   13d60:	adds	r6, r0, r4
   13d64:	adc	r3, r1, r5
   13d68:	cmp	r2, #0
   13d6c:	moveq	r6, r0
   13d70:	eor	r0, r4, #1
   13d74:	moveq	r3, r1
   13d78:	orrs	r0, r0, r5
   13d7c:	str	r3, [sp, #28]
   13d80:	str	r6, [sp, #24]
   13d84:	beq	144a8 <__assert_fail@plt+0x2a28>
   13d88:	ldr	r8, [sp, #24]
   13d8c:	ldr	sl, [sp, #28]
   13d90:	add	r0, ip, #1
   13d94:	str	r0, [sp, #8]
   13d98:	mov	r0, #1
   13d9c:	str	r0, [fp, #-40]	; 0xffffffd8
   13da0:	mov	r0, #1
   13da4:	str	r0, [sp, #20]
   13da8:	mov	r9, r8
   13dac:	mov	r6, sl
   13db0:	mov	r3, sl
   13db4:	str	r8, [fp, #-52]	; 0xffffffcc
   13db8:	subs	r0, ip, r4
   13dbc:	str	r6, [sp, #44]	; 0x2c
   13dc0:	str	r9, [sp, #40]	; 0x28
   13dc4:	str	r7, [sp, #56]	; 0x38
   13dc8:	rscs	r0, r5, #0
   13dcc:	bcs	144b0 <__assert_fail@plt+0x2a30>
   13dd0:	movw	r1, #63798	; 0xf936
   13dd4:	ubfx	r0, r4, #1, #7
   13dd8:	mov	sl, r3
   13ddc:	str	r5, [fp, #-48]	; 0xffffffd0
   13de0:	str	r4, [fp, #-32]	; 0xffffffe0
   13de4:	movt	r1, #1
   13de8:	ldrb	r0, [r1, r0]
   13dec:	umull	r1, r2, r4, r0
   13df0:	rsbs	r1, r1, #2
   13df4:	mla	r2, r5, r0, r2
   13df8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13dfc:	umull	r1, r3, r1, r0
   13e00:	rsc	r8, r2, #0
   13e04:	mla	r0, r8, r0, r3
   13e08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e0c:	umull	r7, r6, r1, r4
   13e10:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13e14:	rsbs	r7, r7, #2
   13e18:	umull	r2, lr, r1, r7
   13e1c:	mla	r3, r1, r3, r6
   13e20:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13e24:	umull	r4, r9, r2, r4
   13e28:	mla	r9, r2, r5, r9
   13e2c:	mov	r5, sl
   13e30:	mla	r3, r0, r6, r3
   13e34:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13e38:	rsc	r3, r3, #0
   13e3c:	mla	r1, r1, r3, lr
   13e40:	ldr	lr, [fp, #-32]	; 0xffffffe0
   13e44:	rsbs	r3, r4, #2
   13e48:	mla	r0, r0, r7, r1
   13e4c:	umull	r8, r4, r2, r3
   13e50:	str	r8, [sp, #32]
   13e54:	mla	r1, r0, lr, r9
   13e58:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13e5c:	rsc	r1, r1, #0
   13e60:	mla	r1, r2, r1, r4
   13e64:	ldr	r2, [sp, #20]
   13e68:	mla	r0, r0, r3, r1
   13e6c:	str	r0, [fp, #-36]	; 0xffffffdc
   13e70:	subs	r0, lr, ip
   13e74:	str	r0, [sp, #48]	; 0x30
   13e78:	sbc	r0, r9, #0
   13e7c:	str	r0, [sp, #36]	; 0x24
   13e80:	ldr	ip, [sp, #28]
   13e84:	ldr	sl, [sp, #24]
   13e88:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13e8c:	str	r2, [sp, #20]
   13e90:	str	r0, [fp, #-40]	; 0xffffffd8
   13e94:	umull	r0, r1, ip, sl
   13e98:	umull	r3, r4, sl, sl
   13e9c:	mov	sl, ip
   13ea0:	str	r5, [sp, #52]	; 0x34
   13ea4:	str	r6, [fp, #-52]	; 0xffffffcc
   13ea8:	lsl	r2, r1, #1
   13eac:	adds	r4, r4, r0, lsl #1
   13eb0:	umull	r7, r5, r3, r8
   13eb4:	orr	r2, r2, r0, lsr #31
   13eb8:	adc	ip, r2, #0
   13ebc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13ec0:	mla	r3, r3, r2, r5
   13ec4:	umull	r5, r6, r7, r9
   13ec8:	umull	r7, r2, r7, lr
   13ecc:	mla	r3, r4, r8, r3
   13ed0:	umlal	r5, r6, r3, lr
   13ed4:	adds	r2, r5, r2
   13ed8:	adc	r7, r6, #0
   13edc:	umull	r6, r5, r3, lr
   13ee0:	subs	r2, r2, r6
   13ee4:	umull	r3, r6, r3, r9
   13ee8:	sbcs	r2, r7, r5
   13eec:	ldr	r5, [sp, #56]	; 0x38
   13ef0:	mov	r2, #0
   13ef4:	movwcc	r2, #1
   13ef8:	cmp	r2, #0
   13efc:	addne	r6, r6, #1
   13f00:	adds	r2, r3, r7
   13f04:	adc	r3, r6, #0
   13f08:	subs	r0, r4, r0
   13f0c:	ldr	r4, [fp, #-36]	; 0xffffffdc
   13f10:	sbcs	r0, ip, r1
   13f14:	umull	r1, r7, sl, sl
   13f18:	mov	r0, #0
   13f1c:	movwcc	r0, #1
   13f20:	cmp	r0, #0
   13f24:	addne	r7, r7, #1
   13f28:	adds	r0, r1, ip
   13f2c:	adc	r1, r7, #0
   13f30:	subs	r0, r0, r2
   13f34:	mov	r2, #0
   13f38:	sbcs	r1, r1, r3
   13f3c:	movwcc	r2, #1
   13f40:	adds	r3, r0, lr
   13f44:	adc	r7, r1, r9
   13f48:	cmp	r2, #0
   13f4c:	mov	r2, #0
   13f50:	moveq	r3, r0
   13f54:	ldr	r0, [sp, #48]	; 0x30
   13f58:	moveq	r7, r1
   13f5c:	ldr	r1, [sp, #36]	; 0x24
   13f60:	subs	r0, r3, r0
   13f64:	sbcs	r1, r7, r1
   13f68:	movwcc	r2, #1
   13f6c:	adds	sl, r0, lr
   13f70:	adc	ip, r1, r9
   13f74:	cmp	r2, #0
   13f78:	mov	r2, #0
   13f7c:	moveq	sl, r0
   13f80:	ldr	r0, [sp, #40]	; 0x28
   13f84:	moveq	ip, r1
   13f88:	ldr	r1, [sp, #44]	; 0x2c
   13f8c:	subs	r0, r0, sl
   13f90:	sbcs	r1, r1, ip
   13f94:	movwcc	r2, #1
   13f98:	adds	r3, r0, lr
   13f9c:	adc	r7, r1, r9
   13fa0:	cmp	r2, #0
   13fa4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13fa8:	moveq	r7, r1
   13fac:	moveq	r3, r0
   13fb0:	umull	r0, r1, r7, r2
   13fb4:	umull	r2, r6, r3, r2
   13fb8:	umlal	r0, r1, r3, r5
   13fbc:	adds	r0, r0, r6
   13fc0:	umull	r7, r6, r7, r5
   13fc4:	umull	r3, r5, r3, r5
   13fc8:	adc	r1, r1, #0
   13fcc:	subs	r3, r0, r3
   13fd0:	sbcs	r3, r1, r5
   13fd4:	mov	r3, #0
   13fd8:	movwcc	r3, #1
   13fdc:	cmp	r3, #0
   13fe0:	addne	r6, r6, #1
   13fe4:	adds	r1, r7, r1
   13fe8:	adc	r3, r6, #0
   13fec:	umull	r7, r6, r2, r8
   13ff0:	mla	r2, r2, r4, r6
   13ff4:	mla	r0, r0, r8, r2
   13ff8:	umull	r2, r6, r7, r9
   13ffc:	umull	r7, r5, r7, lr
   14000:	umlal	r2, r6, r0, lr
   14004:	adds	r2, r2, r5
   14008:	adc	r7, r6, #0
   1400c:	umull	r6, r5, r0, r9
   14010:	umull	r0, r4, r0, lr
   14014:	subs	r0, r2, r0
   14018:	sbcs	r0, r7, r4
   1401c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14020:	mov	r0, #0
   14024:	movwcc	r0, #1
   14028:	cmp	r0, #0
   1402c:	addne	r5, r5, #1
   14030:	adds	r0, r6, r7
   14034:	adc	r2, r5, #0
   14038:	subs	r7, r1, r0
   1403c:	sbcs	r3, r3, r2
   14040:	mov	r2, #0
   14044:	movwcc	r2, #1
   14048:	adds	r0, r7, lr
   1404c:	adc	r1, r3, r9
   14050:	cmp	r2, #0
   14054:	and	r2, r4, #31
   14058:	moveq	r1, r3
   1405c:	moveq	r0, r7
   14060:	cmp	r2, #1
   14064:	str	r1, [sp, #56]	; 0x38
   14068:	str	r0, [fp, #-44]	; 0xffffffd4
   1406c:	bne	140a8 <__assert_fail@plt+0x2628>
   14070:	mov	r2, lr
   14074:	mov	r3, r9
   14078:	str	ip, [sp, #28]
   1407c:	bl	16600 <__assert_fail@plt+0x4b80>
   14080:	ldr	ip, [sp, #28]
   14084:	ldr	lr, [fp, #-32]	; 0xffffffe0
   14088:	ldr	r5, [sp, #52]	; 0x34
   1408c:	ldr	r8, [fp, #-52]	; 0xffffffcc
   14090:	eor	r0, r0, #1
   14094:	orrs	r0, r0, r1
   14098:	mov	r0, sl
   1409c:	mov	r1, ip
   140a0:	beq	140b0 <__assert_fail@plt+0x2630>
   140a4:	b	14230 <__assert_fail@plt+0x27b0>
   140a8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   140ac:	ldr	r1, [sp, #52]	; 0x34
   140b0:	ldr	r8, [sp, #32]
   140b4:	subs	r4, r4, #1
   140b8:	mov	r6, r0
   140bc:	mov	r5, r1
   140c0:	mov	r0, r4
   140c4:	bne	13e90 <__assert_fail@plt+0x2410>
   140c8:	ldr	r3, [sp, #20]
   140cc:	mov	r6, sl
   140d0:	mov	r5, ip
   140d4:	mov	r0, ip
   140d8:	str	sl, [sp, #24]
   140dc:	str	sl, [sp, #40]	; 0x28
   140e0:	str	ip, [sp, #28]
   140e4:	str	ip, [sp, #44]	; 0x2c
   140e8:	lsl	r2, r3, #1
   140ec:	cmp	r3, #0
   140f0:	str	r3, [fp, #-40]	; 0xffffffd8
   140f4:	beq	13e80 <__assert_fail@plt+0x2400>
   140f8:	ldr	r6, [sp, #24]
   140fc:	ldr	r5, [sp, #28]
   14100:	ldr	sl, [sp, #36]	; 0x24
   14104:	mov	r1, r3
   14108:	str	r2, [fp, #-52]	; 0xffffffcc
   1410c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14110:	umull	r2, r9, r5, r6
   14114:	mov	ip, r5
   14118:	umull	r6, r5, r6, r6
   1411c:	umull	r4, r0, r6, r8
   14120:	lsl	r7, r9, #1
   14124:	adds	r5, r5, r2, lsl #1
   14128:	orr	r7, r7, r2, lsr #31
   1412c:	adc	lr, r7, #0
   14130:	mla	r0, r6, r3, r0
   14134:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14138:	mla	r0, r5, r8, r0
   1413c:	umull	r6, r7, r4, r3
   14140:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14144:	umlal	r6, r7, r0, r3
   14148:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1414c:	umull	r4, r3, r4, r3
   14150:	adds	r3, r6, r3
   14154:	ldr	r6, [fp, #-32]	; 0xffffffe0
   14158:	adc	r4, r7, #0
   1415c:	umull	r6, r7, r0, r6
   14160:	subs	r3, r3, r6
   14164:	ldr	r6, [fp, #-48]	; 0xffffffd0
   14168:	sbcs	r3, r4, r7
   1416c:	mov	r3, #0
   14170:	movwcc	r3, #1
   14174:	umull	r0, r6, r0, r6
   14178:	cmp	r3, #0
   1417c:	addne	r6, r6, #1
   14180:	adds	r0, r0, r4
   14184:	adc	r3, r6, #0
   14188:	subs	r2, r5, r2
   1418c:	umull	r4, r5, ip, ip
   14190:	sbcs	r2, lr, r9
   14194:	ldr	r9, [fp, #-48]	; 0xffffffd0
   14198:	mov	r2, #0
   1419c:	movwcc	r2, #1
   141a0:	cmp	r2, #0
   141a4:	addne	r5, r5, #1
   141a8:	adds	r2, r4, lr
   141ac:	ldr	lr, [fp, #-32]	; 0xffffffe0
   141b0:	adc	r7, r5, #0
   141b4:	subs	r0, r2, r0
   141b8:	sbcs	r2, r7, r3
   141bc:	mov	r3, #0
   141c0:	movwcc	r3, #1
   141c4:	adds	r7, r0, lr
   141c8:	adc	r6, r2, r9
   141cc:	cmp	r3, #0
   141d0:	mov	r3, #0
   141d4:	moveq	r7, r0
   141d8:	ldr	r0, [sp, #48]	; 0x30
   141dc:	moveq	r6, r2
   141e0:	subs	r0, r7, r0
   141e4:	sbcs	r2, r6, sl
   141e8:	movwcc	r3, #1
   141ec:	adds	r6, r0, lr
   141f0:	adc	r5, r2, r9
   141f4:	cmp	r3, #0
   141f8:	moveq	r5, r2
   141fc:	moveq	r6, r0
   14200:	subs	r1, r1, #1
   14204:	bne	1410c <__assert_fail@plt+0x268c>
   14208:	ldr	r0, [sp, #20]
   1420c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14210:	str	r0, [fp, #-40]	; 0xffffffd8
   14214:	ldr	r0, [sp, #24]
   14218:	str	r6, [sp, #24]
   1421c:	str	r0, [sp, #40]	; 0x28
   14220:	ldr	r0, [sp, #28]
   14224:	str	r5, [sp, #28]
   14228:	str	r0, [sp, #44]	; 0x2c
   1422c:	b	13e80 <__assert_fail@plt+0x2400>
   14230:	umull	r0, r9, r5, r8
   14234:	umull	r3, r7, r8, r8
   14238:	ldr	r1, [sp, #32]
   1423c:	mov	r8, r5
   14240:	lsl	r2, r9, #1
   14244:	adds	r7, r7, r0, lsl #1
   14248:	orr	r2, r2, r0, lsr #31
   1424c:	adc	ip, r2, #0
   14250:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14254:	umull	r6, r5, r3, r1
   14258:	mla	r3, r3, r2, r5
   1425c:	mla	r1, r7, r1, r3
   14260:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14264:	umull	r5, r4, r6, r3
   14268:	umull	r6, r2, r6, lr
   1426c:	umlal	r5, r4, r1, lr
   14270:	adds	r2, r5, r2
   14274:	adc	r6, r4, #0
   14278:	umull	r5, r4, r1, lr
   1427c:	subs	r2, r2, r5
   14280:	umull	r1, r5, r1, r3
   14284:	sbcs	r2, r6, r4
   14288:	mov	r2, #0
   1428c:	movwcc	r2, #1
   14290:	cmp	r2, #0
   14294:	addne	r5, r5, #1
   14298:	adds	r2, r1, r6
   1429c:	adc	r4, r5, #0
   142a0:	subs	r0, r7, r0
   142a4:	umull	r1, r7, r8, r8
   142a8:	sbcs	r0, ip, r9
   142ac:	mov	r0, #0
   142b0:	movwcc	r0, #1
   142b4:	cmp	r0, #0
   142b8:	addne	r7, r7, #1
   142bc:	adds	r0, r1, ip
   142c0:	adc	r1, r7, #0
   142c4:	subs	r0, r0, r2
   142c8:	mov	r2, #0
   142cc:	sbcs	r1, r1, r4
   142d0:	movwcc	r2, #1
   142d4:	adds	r6, r0, lr
   142d8:	adc	r7, r1, r3
   142dc:	cmp	r2, #0
   142e0:	mov	r2, #0
   142e4:	moveq	r6, r0
   142e8:	ldr	r0, [sp, #48]	; 0x30
   142ec:	moveq	r7, r1
   142f0:	ldr	r1, [sp, #36]	; 0x24
   142f4:	subs	r0, r6, r0
   142f8:	sbcs	r1, r7, r1
   142fc:	mov	r7, #0
   14300:	movwcc	r2, #1
   14304:	adds	r8, r0, lr
   14308:	adc	r5, r1, r3
   1430c:	cmp	r2, #0
   14310:	moveq	r8, r0
   14314:	ldr	r0, [sp, #40]	; 0x28
   14318:	moveq	r5, r1
   1431c:	subs	r2, r0, r8
   14320:	ldr	r0, [sp, #44]	; 0x2c
   14324:	sbcs	r6, r0, r5
   14328:	movwcc	r7, #1
   1432c:	adds	r0, r2, lr
   14330:	adc	r1, r6, r3
   14334:	cmp	r7, #0
   14338:	moveq	r0, r2
   1433c:	moveq	r1, r6
   14340:	mov	r2, lr
   14344:	bl	16600 <__assert_fail@plt+0x4b80>
   14348:	ldr	lr, [fp, #-32]	; 0xffffffe0
   1434c:	mov	r9, r0
   14350:	eor	r0, r0, #1
   14354:	orrs	r0, r0, r1
   14358:	beq	14230 <__assert_fail@plt+0x27b0>
   1435c:	mov	r4, r1
   14360:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14364:	eor	r0, lr, r9
   14368:	eor	r1, r1, r4
   1436c:	orrs	r0, r0, r1
   14370:	beq	1445c <__assert_fail@plt+0x29dc>
   14374:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14378:	mov	r0, lr
   1437c:	mov	r2, r9
   14380:	mov	r3, r4
   14384:	str	r5, [sp, #52]	; 0x34
   14388:	bl	1c0dc <__assert_fail@plt+0xa65c>
   1438c:	mov	r6, r0
   14390:	mov	r5, r1
   14394:	mov	r0, r9
   14398:	mov	r1, r4
   1439c:	bl	1522c <__assert_fail@plt+0x37ac>
   143a0:	cmp	r0, #0
   143a4:	beq	143c4 <__assert_fail@plt+0x2944>
   143a8:	mov	r0, #1
   143ac:	mov	r2, r9
   143b0:	mov	r3, r4
   143b4:	str	r0, [sp]
   143b8:	ldr	r0, [sp, #12]
   143bc:	bl	15148 <__assert_fail@plt+0x36c8>
   143c0:	b	143d8 <__assert_fail@plt+0x2958>
   143c4:	ldr	r2, [sp, #8]
   143c8:	ldr	r3, [sp, #12]
   143cc:	mov	r0, r9
   143d0:	mov	r1, r4
   143d4:	bl	13c64 <__assert_fail@plt+0x21e4>
   143d8:	ldr	r7, [sp, #56]	; 0x38
   143dc:	mov	r0, r6
   143e0:	mov	r1, r5
   143e4:	mov	r4, r6
   143e8:	bl	1522c <__assert_fail@plt+0x37ac>
   143ec:	ldr	r6, [sp, #44]	; 0x2c
   143f0:	cmp	r0, #0
   143f4:	bne	14490 <__assert_fail@plt+0x2a10>
   143f8:	ldr	r1, [sp, #28]
   143fc:	mov	r0, sl
   14400:	mov	r2, r4
   14404:	mov	r3, r5
   14408:	bl	1c0dc <__assert_fail@plt+0xa65c>
   1440c:	ldr	r0, [sp, #40]	; 0x28
   14410:	str	r2, [sp, #24]
   14414:	str	r3, [sp, #28]
   14418:	mov	r1, r6
   1441c:	mov	r2, r4
   14420:	mov	r3, r5
   14424:	bl	1c0dc <__assert_fail@plt+0xa65c>
   14428:	ldr	r1, [sp, #52]	; 0x34
   1442c:	mov	r9, r2
   14430:	mov	r6, r3
   14434:	mov	r0, r8
   14438:	mov	r2, r4
   1443c:	mov	r3, r5
   14440:	bl	1c0dc <__assert_fail@plt+0xa65c>
   14444:	ldr	ip, [sp, #16]
   14448:	eor	r0, r4, #1
   1444c:	str	r2, [fp, #-52]	; 0xffffffcc
   14450:	orrs	r0, r0, r5
   14454:	bne	13db8 <__assert_fail@plt+0x2338>
   14458:	b	144a8 <__assert_fail@plt+0x2a28>
   1445c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14460:	ldr	r2, [sp, #8]
   14464:	rsbs	r0, lr, #1
   14468:	rscs	r0, r1, #0
   1446c:	bcc	13c84 <__assert_fail@plt+0x2204>
   14470:	movw	r0, #50839	; 0xc697
   14474:	movw	r1, #50776	; 0xc658
   14478:	movw	r3, #51176	; 0xc7e8
   1447c:	movw	r2, #1466	; 0x5ba
   14480:	movt	r0, #1
   14484:	movt	r1, #1
   14488:	movt	r3, #1
   1448c:	bl	11a80 <__assert_fail@plt>
   14490:	mov	r0, #1
   14494:	mov	r2, r4
   14498:	mov	r3, r5
   1449c:	str	r0, [sp]
   144a0:	ldr	r0, [sp, #12]
   144a4:	bl	15148 <__assert_fail@plt+0x36c8>
   144a8:	sub	sp, fp, #28
   144ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b0:	movw	r0, #51250	; 0xc832
   144b4:	movw	r1, #50776	; 0xc658
   144b8:	movw	r3, #51176	; 0xc7e8
   144bc:	mov	r2, #1472	; 0x5c0
   144c0:	movt	r0, #1
   144c4:	movt	r1, #1
   144c8:	movt	r3, #1
   144cc:	bl	11a80 <__assert_fail@plt>
   144d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144d4:	add	fp, sp, #28
   144d8:	sub	sp, sp, #204	; 0xcc
   144dc:	mov	sl, r3
   144e0:	subs	r3, r0, #2
   144e4:	mov	r8, #0
   144e8:	str	r0, [fp, #-76]	; 0xffffffb4
   144ec:	mov	r6, #0
   144f0:	mov	r7, #0
   144f4:	mov	r4, #0
   144f8:	mov	lr, #0
   144fc:	str	r1, [sp, #88]	; 0x58
   14500:	sbcs	r3, r1, #0
   14504:	movwcc	r8, #1
   14508:	rsbs	r0, r0, #1
   1450c:	mov	r3, #127	; 0x7f
   14510:	rscs	r0, r1, #0
   14514:	movwcc	r6, #1
   14518:	cmp	r6, #0
   1451c:	movwne	r3, #63	; 0x3f
   14520:	mov	r9, r7
   14524:	mov	r1, r3
   14528:	lsl	r3, lr, #1
   1452c:	ldr	r7, [fp, #-76]	; 0xffffffb4
   14530:	ldr	r0, [sp, #88]	; 0x58
   14534:	orr	r5, r3, r8, lsr #31
   14538:	lsl	r3, r4, #1
   1453c:	lsl	r8, r8, #1
   14540:	orr	r4, r3, r6, lsr #31
   14544:	lsl	r3, r6, #1
   14548:	orr	r6, r3, lr, lsr #31
   1454c:	subs	r3, r7, r6
   14550:	sbcs	r3, r0, r4
   14554:	bcc	1457c <__assert_fail@plt+0x2afc>
   14558:	subs	r3, r8, r2
   1455c:	sbcs	r3, r5, sl
   14560:	bcc	145ac <__assert_fail@plt+0x2b2c>
   14564:	ldr	r0, [sp, #88]	; 0x58
   14568:	eor	r3, r6, r7
   1456c:	eor	r7, r4, r0
   14570:	orrs	r3, r3, r7
   14574:	ldr	r7, [fp, #-76]	; 0xffffffb4
   14578:	bne	145ac <__assert_fail@plt+0x2b2c>
   1457c:	subs	r3, r6, r7
   14580:	sbc	r7, r4, r0
   14584:	subs	r6, r3, #1
   14588:	sbc	r4, r7, #0
   1458c:	subs	r8, r8, r2
   14590:	sbcs	lr, r5, sl
   14594:	mov	r5, #0
   14598:	movwcc	r5, #1
   1459c:	cmp	r5, #0
   145a0:	moveq	r6, r3
   145a4:	moveq	r4, r7
   145a8:	b	145b0 <__assert_fail@plt+0x2b30>
   145ac:	mov	lr, r5
   145b0:	subs	r3, r1, #1
   145b4:	sbc	r7, r9, #0
   145b8:	orrs	r0, r1, r9
   145bc:	bne	14520 <__assert_fail@plt+0x2aa0>
   145c0:	lsl	r0, r4, #1
   145c4:	rsbs	r1, r8, r8, lsl #1
   145c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   145cc:	lsl	ip, r8, #1
   145d0:	orr	r7, r0, r6, lsr #31
   145d4:	lsl	r0, lr, #1
   145d8:	orr	r9, r0, r8, lsr #31
   145dc:	mov	r0, #0
   145e0:	str	r7, [fp, #-36]	; 0xffffffdc
   145e4:	sbcs	r1, r9, lr
   145e8:	mov	r1, #0
   145ec:	movwcc	r1, #1
   145f0:	orr	r5, r1, r6, lsl #1
   145f4:	subs	r1, r3, r5
   145f8:	str	r5, [fp, #-40]	; 0xffffffd8
   145fc:	ldr	r1, [sp, #88]	; 0x58
   14600:	sbcs	r1, r1, r7
   14604:	bcc	14638 <__assert_fail@plt+0x2bb8>
   14608:	subs	r1, ip, r2
   1460c:	str	ip, [fp, #-108]	; 0xffffff94
   14610:	sbcs	r1, r9, sl
   14614:	bcc	14680 <__assert_fail@plt+0x2c00>
   14618:	ldr	r3, [sp, #88]	; 0x58
   1461c:	ldr	ip, [fp, #-76]	; 0xffffffb4
   14620:	eor	r1, r5, ip
   14624:	eor	r3, r7, r3
   14628:	orrs	r1, r1, r3
   1462c:	mov	r3, ip
   14630:	ldr	ip, [fp, #-108]	; 0xffffff94
   14634:	bne	1468c <__assert_fail@plt+0x2c0c>
   14638:	subs	ip, ip, r2
   1463c:	mov	r1, r2
   14640:	sbcs	r9, r9, sl
   14644:	str	ip, [fp, #-108]	; 0xffffff94
   14648:	movwcc	r0, #1
   1464c:	str	r9, [fp, #-112]	; 0xffffff90
   14650:	mov	r9, r3
   14654:	cmp	r0, #0
   14658:	mvnne	r0, #0
   1465c:	subs	ip, r0, r3
   14660:	ldr	r3, [sp, #88]	; 0x58
   14664:	sbc	r0, r0, r3
   14668:	adds	r5, ip, r5
   1466c:	adc	r7, r0, r7
   14670:	mov	r0, r2
   14674:	str	r5, [fp, #-40]	; 0xffffffd8
   14678:	str	r7, [fp, #-36]	; 0xffffffdc
   1467c:	b	14698 <__assert_fail@plt+0x2c18>
   14680:	str	r9, [fp, #-112]	; 0xffffff90
   14684:	ldr	r9, [fp, #-76]	; 0xffffffb4
   14688:	b	14694 <__assert_fail@plt+0x2c14>
   1468c:	str	r9, [fp, #-112]	; 0xffffff90
   14690:	mov	r9, r3
   14694:	mov	r0, r2
   14698:	eor	r0, r0, #1
   1469c:	str	r5, [fp, #-56]	; 0xffffffc8
   146a0:	str	r5, [fp, #-48]	; 0xffffffd0
   146a4:	str	r7, [fp, #-52]	; 0xffffffcc
   146a8:	str	r7, [fp, #-44]	; 0xffffffd4
   146ac:	orrs	r0, r0, sl
   146b0:	ldreq	r0, [sp, #88]	; 0x58
   146b4:	orrseq	r0, r9, r0
   146b8:	beq	15140 <__assert_fail@plt+0x36c0>
   146bc:	add	r0, sp, #96	; 0x60
   146c0:	str	lr, [sp, #92]	; 0x5c
   146c4:	stm	r0, {r4, r6, r8}
   146c8:	ldr	r0, [fp, #8]
   146cc:	mov	r8, #1
   146d0:	mov	r4, r2
   146d4:	str	r5, [sp, #84]	; 0x54
   146d8:	str	r7, [sp, #80]	; 0x50
   146dc:	str	r5, [sp, #76]	; 0x4c
   146e0:	str	r5, [sp, #116]	; 0x74
   146e4:	str	r7, [fp, #-96]	; 0xffffffa0
   146e8:	str	r7, [sp, #112]	; 0x70
   146ec:	ldr	r9, [fp, #-112]	; 0xffffff90
   146f0:	add	r0, r0, #1
   146f4:	str	r0, [sp, #52]	; 0x34
   146f8:	ldr	r0, [fp, #-108]	; 0xffffff94
   146fc:	str	r9, [sp, #68]	; 0x44
   14700:	str	r9, [fp, #-92]	; 0xffffffa4
   14704:	str	r0, [sp, #72]	; 0x48
   14708:	str	r0, [fp, #-100]	; 0xffffff9c
   1470c:	mov	r0, #1
   14710:	str	r0, [sp, #108]	; 0x6c
   14714:	b	14968 <__assert_fail@plt+0x2ee8>
   14718:	movw	r1, #63798	; 0xf936
   1471c:	str	r2, [sp, #76]	; 0x4c
   14720:	ubfx	r0, r5, #1, #7
   14724:	movt	r1, #1
   14728:	ldrb	r0, [r1, r0]
   1472c:	umull	r1, r2, r5, r0
   14730:	rsbs	r1, r1, #2
   14734:	mla	r2, r8, r0, r2
   14738:	umull	r1, r3, r1, r0
   1473c:	rsc	r2, r2, #0
   14740:	mla	r2, r2, r0, r3
   14744:	umull	r0, r3, r1, r5
   14748:	mla	r3, r1, r8, r3
   1474c:	rsbs	r6, r0, #2
   14750:	mla	r3, r2, r5, r3
   14754:	umull	r4, sl, r1, r6
   14758:	rsc	r0, r3, #0
   1475c:	str	r0, [fp, #-104]	; 0xffffff98
   14760:	umull	r0, r9, r4, r5
   14764:	rsbs	r3, r0, #2
   14768:	umull	r0, r7, r4, r3
   1476c:	str	r7, [sp, #60]	; 0x3c
   14770:	umull	r7, lr, r0, ip
   14774:	str	r0, [sp, #56]	; 0x38
   14778:	str	r7, [fp, #-84]	; 0xffffffac
   1477c:	ldr	r7, [fp, #-88]	; 0xffffffa8
   14780:	mla	lr, r0, r7, lr
   14784:	ldr	r0, [fp, #-104]	; 0xffffff98
   14788:	mla	r7, r4, r8, r9
   1478c:	ldr	r9, [sp, #88]	; 0x58
   14790:	mla	r1, r1, r0, sl
   14794:	ldr	r0, [sp, #60]	; 0x3c
   14798:	mov	sl, #0
   1479c:	mla	r1, r2, r6, r1
   147a0:	mov	r6, #0
   147a4:	mla	r2, r1, r5, r7
   147a8:	ldr	r7, [fp, #-76]	; 0xffffffb4
   147ac:	rsc	r2, r2, #0
   147b0:	mla	r2, r4, r2, r0
   147b4:	mla	r1, r1, r3, r2
   147b8:	mla	r0, r1, ip, lr
   147bc:	str	r0, [fp, #-88]	; 0xffffffa8
   147c0:	subs	r0, r7, r5
   147c4:	sbcs	r0, r9, r8
   147c8:	bcc	14830 <__assert_fail@plt+0x2db0>
   147cc:	ldr	r6, [fp, #-84]	; 0xffffffac
   147d0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   147d4:	umull	r0, r2, r6, r8
   147d8:	mov	r4, r3
   147dc:	umlal	r0, r2, r3, r5
   147e0:	umull	r3, r6, r6, r5
   147e4:	adds	r0, r0, r6
   147e8:	umull	r3, r6, r4, r5
   147ec:	adc	r2, r2, #0
   147f0:	subs	r0, r0, r3
   147f4:	sbcs	r0, r2, r6
   147f8:	umull	r3, r6, r4, r8
   147fc:	ldr	r4, [sp, #56]	; 0x38
   14800:	mov	r0, #0
   14804:	movwcc	r0, #1
   14808:	cmp	r0, #0
   1480c:	addne	r6, r6, #1
   14810:	subs	r0, r7, r2
   14814:	sbc	r2, r9, #0
   14818:	subs	r0, r0, r3
   1481c:	umull	r7, r3, r0, r4
   14820:	mla	r0, r0, r1, r3
   14824:	sbc	r1, r2, r6
   14828:	mov	r6, r7
   1482c:	mla	sl, r1, r4, r0
   14830:	mov	r0, r5
   14834:	mov	r1, r8
   14838:	bl	1522c <__assert_fail@plt+0x37ac>
   1483c:	cmp	r0, #0
   14840:	beq	14860 <__assert_fail@plt+0x2de0>
   14844:	mov	r0, #1
   14848:	mov	r2, r5
   1484c:	mov	r3, r8
   14850:	str	r0, [sp]
   14854:	ldr	r0, [fp, #12]
   14858:	bl	15148 <__assert_fail@plt+0x36c8>
   1485c:	b	14874 <__assert_fail@plt+0x2df4>
   14860:	ldr	r2, [sp, #52]	; 0x34
   14864:	ldr	r3, [fp, #12]
   14868:	mov	r0, r5
   1486c:	mov	r1, r8
   14870:	bl	13c64 <__assert_fail@plt+0x21e4>
   14874:	ldr	r4, [fp, #-112]	; 0xffffff90
   14878:	ldr	r5, [fp, #-92]	; 0xffffffa4
   1487c:	mov	r7, sl
   14880:	orrs	r0, r6, sl
   14884:	ldr	sl, [fp, #-88]	; 0xffffffa8
   14888:	beq	150f4 <__assert_fail@plt+0x3674>
   1488c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14890:	mov	r0, r6
   14894:	mov	r1, r7
   14898:	mov	r3, sl
   1489c:	bl	131f4 <__assert_fail@plt+0x1774>
   148a0:	cmp	r0, #0
   148a4:	bne	15088 <__assert_fail@plt+0x3608>
   148a8:	ldr	r0, [fp, #-108]	; 0xffffff94
   148ac:	stm	sp, {r0, r4, r6, r7}
   148b0:	sub	r0, fp, #40	; 0x28
   148b4:	str	sl, [sp, #20]
   148b8:	ldr	r4, [fp, #-84]	; 0xffffffac
   148bc:	ldr	r2, [sp, #116]	; 0x74
   148c0:	ldr	r3, [sp, #112]	; 0x70
   148c4:	str	r4, [sp, #16]
   148c8:	bl	168a0 <__assert_fail@plt+0x4e20>
   148cc:	str	r0, [fp, #-108]	; 0xffffff94
   148d0:	ldr	r0, [sp, #72]	; 0x48
   148d4:	str	r1, [fp, #-112]	; 0xffffff90
   148d8:	str	r0, [sp]
   148dc:	ldr	r0, [sp, #68]	; 0x44
   148e0:	stmib	sp, {r0, r6, r7}
   148e4:	sub	r0, fp, #48	; 0x30
   148e8:	str	r4, [sp, #16]
   148ec:	str	sl, [sp, #20]
   148f0:	ldr	r2, [sp, #84]	; 0x54
   148f4:	ldr	r3, [sp, #80]	; 0x50
   148f8:	bl	168a0 <__assert_fail@plt+0x4e20>
   148fc:	str	r0, [sp, #72]	; 0x48
   14900:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14904:	str	r1, [sp, #68]	; 0x44
   14908:	stm	sp, {r0, r5, r6, r7}
   1490c:	sub	r0, fp, #56	; 0x38
   14910:	str	r4, [sp, #16]
   14914:	str	sl, [sp, #20]
   14918:	ldr	r2, [sp, #76]	; 0x4c
   1491c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14920:	bl	168a0 <__assert_fail@plt+0x4e20>
   14924:	str	r0, [fp, #-100]	; 0xffffff9c
   14928:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1492c:	ldr	r8, [sp, #64]	; 0x40
   14930:	str	r1, [fp, #-92]	; 0xffffffa4
   14934:	str	r6, [fp, #-76]	; 0xffffffb4
   14938:	str	r7, [sp, #88]	; 0x58
   1493c:	str	r0, [sp, #76]	; 0x4c
   14940:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14944:	str	r0, [fp, #-96]	; 0xffffffa0
   14948:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1494c:	str	r0, [sp, #84]	; 0x54
   14950:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14954:	str	r0, [sp, #80]	; 0x50
   14958:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1495c:	str	r0, [sp, #116]	; 0x74
   14960:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14964:	str	r0, [sp, #112]	; 0x70
   14968:	movw	r1, #63798	; 0xf936
   1496c:	str	sl, [fp, #-88]	; 0xffffffa8
   14970:	ubfx	r0, r4, #1, #7
   14974:	mov	r5, r4
   14978:	movt	r1, #1
   1497c:	str	r5, [fp, #-80]	; 0xffffffb0
   14980:	ldrb	r0, [r1, r0]
   14984:	umull	r1, r2, r4, r0
   14988:	rsbs	r1, r1, #2
   1498c:	mla	r2, sl, r0, r2
   14990:	umull	r1, r3, r1, r0
   14994:	rsc	ip, r2, #0
   14998:	mla	r0, ip, r0, r3
   1499c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   149a0:	umull	r6, lr, r1, r4
   149a4:	ldr	ip, [fp, #-112]	; 0xffffff90
   149a8:	rsbs	r6, r6, #2
   149ac:	umull	r2, sl, r1, r6
   149b0:	umull	r7, r9, r2, r4
   149b4:	ldr	r4, [fp, #-88]	; 0xffffffa8
   149b8:	mla	r3, r1, r3, lr
   149bc:	ldr	lr, [sp, #112]	; 0x70
   149c0:	mla	r3, r0, r5, r3
   149c4:	rsc	r3, r3, #0
   149c8:	mla	r1, r1, r3, sl
   149cc:	mla	r9, r2, r4, r9
   149d0:	rsbs	r3, r7, #2
   149d4:	ldr	r4, [sp, #116]	; 0x74
   149d8:	mla	r0, r0, r6, r1
   149dc:	umull	r7, r6, r2, r3
   149e0:	mla	r1, r0, r5, r9
   149e4:	str	r7, [fp, #-104]	; 0xffffff98
   149e8:	ldr	r9, [sp, #88]	; 0x58
   149ec:	ldr	r7, [fp, #-108]	; 0xffffff94
   149f0:	ldr	r5, [fp, #-100]	; 0xffffff9c
   149f4:	rsc	r1, r1, #0
   149f8:	mla	r1, r2, r1, r6
   149fc:	ldr	r2, [sp, #76]	; 0x4c
   14a00:	mla	r0, r0, r3, r1
   14a04:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14a08:	str	r0, [fp, #-84]	; 0xffffffac
   14a0c:	str	r8, [sp, #64]	; 0x40
   14a10:	ldr	r0, [fp, #-104]	; 0xffffff98
   14a14:	ldr	r6, [fp, #-80]	; 0xffffffb0
   14a18:	ldr	r8, [fp, #-88]	; 0xffffffa8
   14a1c:	str	r2, [sp, #76]	; 0x4c
   14a20:	str	r3, [fp, #-96]	; 0xffffffa0
   14a24:	str	r5, [fp, #-100]	; 0xffffff9c
   14a28:	mov	r2, r4
   14a2c:	mov	r3, lr
   14a30:	str	r0, [sp, #40]	; 0x28
   14a34:	ldr	r0, [fp, #-84]	; 0xffffffac
   14a38:	str	r6, [sp, #32]
   14a3c:	str	r8, [sp, #36]	; 0x24
   14a40:	str	r0, [sp, #44]	; 0x2c
   14a44:	stm	sp, {r7, ip}
   14a48:	sub	r0, fp, #72	; 0x48
   14a4c:	str	r4, [sp, #8]
   14a50:	str	lr, [sp, #12]
   14a54:	str	r7, [sp, #16]
   14a58:	str	ip, [sp, #20]
   14a5c:	str	r9, [sp, #28]
   14a60:	ldr	sl, [fp, #-76]	; 0xffffffb4
   14a64:	str	sl, [sp, #24]
   14a68:	bl	16030 <__assert_fail@plt+0x45b0>
   14a6c:	ldr	r7, [fp, #8]
   14a70:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14a74:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14a78:	ldr	lr, [sp, #92]	; 0x5c
   14a7c:	adds	r4, r0, r7
   14a80:	adcs	ip, r1, #0
   14a84:	adcs	r5, r2, #0
   14a88:	ldr	r2, [sp, #100]	; 0x64
   14a8c:	adc	r7, r3, #0
   14a90:	ldr	r3, [sp, #96]	; 0x60
   14a94:	subs	r0, sl, r5
   14a98:	sbcs	r0, r9, r7
   14a9c:	bcc	14ac8 <__assert_fail@plt+0x3048>
   14aa0:	subs	r0, r4, r6
   14aa4:	sbcs	r0, ip, r8
   14aa8:	bcc	14af0 <__assert_fail@plt+0x3070>
   14aac:	ldr	sl, [fp, #-76]	; 0xffffffb4
   14ab0:	ldr	r6, [fp, #-80]	; 0xffffffb0
   14ab4:	ldr	r8, [fp, #-88]	; 0xffffffa8
   14ab8:	eor	r1, r7, r9
   14abc:	eor	r0, r5, sl
   14ac0:	orrs	r0, r0, r1
   14ac4:	bne	14af0 <__assert_fail@plt+0x3070>
   14ac8:	subs	r4, r4, r6
   14acc:	mov	r0, #0
   14ad0:	sbcs	ip, ip, r8
   14ad4:	movwcc	r0, #1
   14ad8:	cmp	r0, #0
   14adc:	mvnne	r0, #0
   14ae0:	subs	r1, r0, sl
   14ae4:	sbc	r0, r0, r9
   14ae8:	adds	r5, r1, r5
   14aec:	adc	r7, r0, r7
   14af0:	ldr	r0, [sp, #84]	; 0x54
   14af4:	str	r5, [sp, #116]	; 0x74
   14af8:	str	r7, [sp, #112]	; 0x70
   14afc:	mov	r1, ip
   14b00:	str	r4, [fp, #-108]	; 0xffffff94
   14b04:	str	r1, [fp, #-112]	; 0xffffff90
   14b08:	subs	r6, r0, r5
   14b0c:	ldr	r0, [sp, #80]	; 0x50
   14b10:	sbc	r5, r0, r7
   14b14:	ldr	r7, [sp, #72]	; 0x48
   14b18:	subs	sl, r6, #1
   14b1c:	sbc	r0, r5, #0
   14b20:	subs	ip, r7, r4
   14b24:	ldr	r4, [sp, #68]	; 0x44
   14b28:	sbcs	r1, r4, r1
   14b2c:	mov	r4, #0
   14b30:	movwcc	r4, #1
   14b34:	cmp	r4, #0
   14b38:	moveq	r0, r5
   14b3c:	moveq	sl, r6
   14b40:	cmn	r0, #1
   14b44:	ble	14b60 <__assert_fail@plt+0x30e0>
   14b48:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14b4c:	ldr	r9, [sp, #88]	; 0x58
   14b50:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14b54:	ldr	r5, [sp, #108]	; 0x6c
   14b58:	ldr	r8, [fp, #-88]	; 0xffffffa8
   14b5c:	b	14b8c <__assert_fail@plt+0x310c>
   14b60:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14b64:	ldr	r9, [sp, #88]	; 0x58
   14b68:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14b6c:	ldr	r8, [fp, #-88]	; 0xffffffa8
   14b70:	ldr	r5, [sp, #108]	; 0x6c
   14b74:	adds	r7, sl, r6
   14b78:	adc	r0, r0, r9
   14b7c:	adds	ip, ip, r4
   14b80:	adcs	r1, r1, r8
   14b84:	adcs	sl, r7, #0
   14b88:	adc	r0, r0, #0
   14b8c:	ldr	r7, [fp, #-104]	; 0xffffff98
   14b90:	str	r4, [sp, #32]
   14b94:	str	r8, [sp, #36]	; 0x24
   14b98:	str	r7, [sp, #40]	; 0x28
   14b9c:	ldr	r7, [fp, #-84]	; 0xffffffac
   14ba0:	str	r7, [sp, #44]	; 0x2c
   14ba4:	ldr	r7, [sp, #104]	; 0x68
   14ba8:	stm	sp, {r7, lr}
   14bac:	str	r0, [sp, #12]
   14bb0:	add	r0, sp, #20
   14bb4:	str	sl, [sp, #8]
   14bb8:	str	ip, [sp, #16]
   14bbc:	stm	r0, {r1, r6, r9}
   14bc0:	sub	r0, fp, #72	; 0x48
   14bc4:	bl	16030 <__assert_fail@plt+0x45b0>
   14bc8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14bcc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14bd0:	ldr	ip, [fp, #-112]	; 0xffffff90
   14bd4:	and	r7, r5, #31
   14bd8:	str	r6, [fp, #-76]	; 0xffffffb4
   14bdc:	str	r0, [sp, #104]	; 0x68
   14be0:	str	r1, [sp, #92]	; 0x5c
   14be4:	cmp	r7, #1
   14be8:	str	r2, [sp, #100]	; 0x64
   14bec:	str	r3, [sp, #96]	; 0x60
   14bf0:	bne	14c4c <__assert_fail@plt+0x31cc>
   14bf4:	stm	sp, {r0, r1, r6, r9}
   14bf8:	sub	r0, fp, #64	; 0x40
   14bfc:	str	r4, [sp, #16]
   14c00:	str	r8, [sp, #20]
   14c04:	mov	r4, ip
   14c08:	bl	1669c <__assert_fail@plt+0x4c1c>
   14c0c:	mov	ip, r4
   14c10:	ldr	r7, [fp, #-108]	; 0xffffff94
   14c14:	ldr	r4, [sp, #116]	; 0x74
   14c18:	ldr	lr, [sp, #112]	; 0x70
   14c1c:	eor	r0, r0, #1
   14c20:	orrs	r0, r0, r1
   14c24:	bne	14dc8 <__assert_fail@plt+0x3348>
   14c28:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14c2c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14c30:	mov	r2, r4
   14c34:	mov	r3, lr
   14c38:	orrs	r0, r0, r1
   14c3c:	mov	r1, ip
   14c40:	mov	r0, r7
   14c44:	beq	14c68 <__assert_fail@plt+0x31e8>
   14c48:	b	14dc8 <__assert_fail@plt+0x3348>
   14c4c:	ldr	r2, [sp, #76]	; 0x4c
   14c50:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14c54:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14c58:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14c5c:	ldr	r7, [fp, #-108]	; 0xffffff94
   14c60:	ldr	r4, [sp, #116]	; 0x74
   14c64:	ldr	lr, [sp, #112]	; 0x70
   14c68:	subs	r5, r5, #1
   14c6c:	str	r1, [fp, #-92]	; 0xffffffa4
   14c70:	str	r5, [sp, #108]	; 0x6c
   14c74:	mov	r5, r0
   14c78:	bne	14a10 <__assert_fail@plt+0x2f90>
   14c7c:	ldr	r0, [sp, #64]	; 0x40
   14c80:	mov	r2, r4
   14c84:	mov	r3, lr
   14c88:	mov	r5, r7
   14c8c:	str	r4, [sp, #84]	; 0x54
   14c90:	str	lr, [sp, #80]	; 0x50
   14c94:	str	ip, [fp, #-92]	; 0xffffffa4
   14c98:	str	r7, [sp, #72]	; 0x48
   14c9c:	str	ip, [sp, #68]	; 0x44
   14ca0:	lsl	r8, r0, #1
   14ca4:	cmp	r0, #0
   14ca8:	str	r0, [sp, #108]	; 0x6c
   14cac:	beq	14a0c <__assert_fail@plt+0x2f8c>
   14cb0:	mov	r2, r4
   14cb4:	mov	r5, r7
   14cb8:	ldr	sl, [fp, #-104]	; 0xffffff98
   14cbc:	ldr	r6, [fp, #-80]	; 0xffffffb0
   14cc0:	ldr	r4, [fp, #-88]	; 0xffffffa8
   14cc4:	ldr	r7, [fp, #-76]	; 0xffffffb4
   14cc8:	str	r8, [fp, #-96]	; 0xffffffa0
   14ccc:	mov	r8, r0
   14cd0:	mov	r3, lr
   14cd4:	ldr	r0, [fp, #-84]	; 0xffffffac
   14cd8:	str	r6, [sp, #32]
   14cdc:	str	r4, [sp, #36]	; 0x24
   14ce0:	str	sl, [sp, #40]	; 0x28
   14ce4:	str	r0, [sp, #44]	; 0x2c
   14ce8:	add	r0, sp, #8
   14cec:	stm	sp, {r5, ip}
   14cf0:	stm	r0, {r2, r3, r5, ip}
   14cf4:	sub	r0, fp, #72	; 0x48
   14cf8:	str	r7, [sp, #24]
   14cfc:	str	r9, [sp, #28]
   14d00:	bl	16030 <__assert_fail@plt+0x45b0>
   14d04:	ldr	r5, [fp, #8]
   14d08:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14d0c:	ldr	r7, [fp, #-76]	; 0xffffffb4
   14d10:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14d14:	adds	r5, r0, r5
   14d18:	adcs	r1, r1, #0
   14d1c:	adcs	r2, r2, #0
   14d20:	adc	r3, r3, #0
   14d24:	subs	r0, r7, r2
   14d28:	sbcs	r0, r9, r3
   14d2c:	bcc	14d54 <__assert_fail@plt+0x32d4>
   14d30:	subs	r0, r5, r6
   14d34:	mov	ip, r1
   14d38:	sbcs	r0, r1, r4
   14d3c:	bcc	14d80 <__assert_fail@plt+0x3300>
   14d40:	eor	r0, r2, r7
   14d44:	eor	r1, r3, r9
   14d48:	orrs	r0, r0, r1
   14d4c:	mov	r1, ip
   14d50:	bne	14d80 <__assert_fail@plt+0x3300>
   14d54:	subs	r5, r5, r6
   14d58:	mov	r0, #0
   14d5c:	sbcs	r1, r1, r4
   14d60:	movwcc	r0, #1
   14d64:	mov	ip, r1
   14d68:	cmp	r0, #0
   14d6c:	mvnne	r0, #0
   14d70:	subs	r1, r0, r7
   14d74:	sbc	r0, r0, r9
   14d78:	adds	r2, r1, r2
   14d7c:	adc	r3, r0, r3
   14d80:	subs	r8, r8, #1
   14d84:	bne	14cd4 <__assert_fail@plt+0x3254>
   14d88:	ldr	r0, [sp, #116]	; 0x74
   14d8c:	ldr	r8, [fp, #-96]	; 0xffffffa0
   14d90:	mov	r4, r2
   14d94:	mov	lr, r3
   14d98:	mov	r7, r5
   14d9c:	str	ip, [fp, #-92]	; 0xffffffa4
   14da0:	str	r0, [sp, #84]	; 0x54
   14da4:	ldr	r0, [sp, #112]	; 0x70
   14da8:	str	r0, [sp, #80]	; 0x50
   14dac:	ldr	r0, [sp, #64]	; 0x40
   14db0:	str	r0, [sp, #108]	; 0x6c
   14db4:	ldr	r0, [fp, #-108]	; 0xffffff94
   14db8:	str	r0, [sp, #72]	; 0x48
   14dbc:	ldr	r0, [fp, #-112]	; 0xffffff90
   14dc0:	str	r0, [sp, #68]	; 0x44
   14dc4:	b	14a0c <__assert_fail@plt+0x2f8c>
   14dc8:	ldr	r0, [sp, #84]	; 0x54
   14dcc:	ldr	r2, [sp, #76]	; 0x4c
   14dd0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14dd4:	str	r4, [fp, #-40]	; 0xffffffd8
   14dd8:	str	lr, [fp, #-36]	; 0xffffffdc
   14ddc:	str	r0, [fp, #-48]	; 0xffffffd0
   14de0:	ldr	r0, [sp, #80]	; 0x50
   14de4:	str	r2, [fp, #-56]	; 0xffffffc8
   14de8:	str	r3, [fp, #-52]	; 0xffffffcc
   14dec:	str	r0, [fp, #-44]	; 0xffffffd4
   14df0:	ldr	r0, [fp, #-104]	; 0xffffff98
   14df4:	ldr	sl, [fp, #-80]	; 0xffffffb0
   14df8:	ldr	r8, [fp, #-88]	; 0xffffffa8
   14dfc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14e00:	str	r0, [sp, #40]	; 0x28
   14e04:	ldr	r0, [fp, #-84]	; 0xffffffac
   14e08:	str	sl, [sp, #32]
   14e0c:	str	r8, [sp, #36]	; 0x24
   14e10:	str	r0, [sp, #44]	; 0x2c
   14e14:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14e18:	str	r0, [sp]
   14e1c:	stmib	sp, {r1, r2, r3}
   14e20:	str	r0, [sp, #16]
   14e24:	sub	r0, fp, #72	; 0x48
   14e28:	str	r1, [sp, #20]
   14e2c:	str	r9, [sp, #28]
   14e30:	ldr	r5, [fp, #-76]	; 0xffffffb4
   14e34:	str	r5, [sp, #24]
   14e38:	bl	16030 <__assert_fail@plt+0x45b0>
   14e3c:	ldr	r6, [fp, #8]
   14e40:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14e44:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14e48:	adds	lr, r0, r6
   14e4c:	adcs	r4, r1, #0
   14e50:	adcs	ip, r2, #0
   14e54:	adc	r7, r3, #0
   14e58:	subs	r0, r5, ip
   14e5c:	sbcs	r0, r9, r7
   14e60:	bcc	14e84 <__assert_fail@plt+0x3404>
   14e64:	subs	r0, lr, sl
   14e68:	sbcs	r0, r4, r8
   14e6c:	bcc	14eac <__assert_fail@plt+0x342c>
   14e70:	ldr	r5, [fp, #-76]	; 0xffffffb4
   14e74:	eor	r1, r7, r9
   14e78:	eor	r0, ip, r5
   14e7c:	orrs	r0, r0, r1
   14e80:	bne	14eac <__assert_fail@plt+0x342c>
   14e84:	subs	lr, lr, sl
   14e88:	mov	r0, #0
   14e8c:	sbcs	r4, r4, r8
   14e90:	movwcc	r0, #1
   14e94:	cmp	r0, #0
   14e98:	mvnne	r0, #0
   14e9c:	subs	r1, r0, r5
   14ea0:	sbc	r0, r0, r9
   14ea4:	adds	ip, r1, ip
   14ea8:	adc	r7, r0, r7
   14eac:	ldr	r0, [sp, #84]	; 0x54
   14eb0:	ldr	r1, [sp, #68]	; 0x44
   14eb4:	str	r4, [fp, #-92]	; 0xffffffa4
   14eb8:	str	r7, [fp, #-96]	; 0xffffffa0
   14ebc:	str	lr, [fp, #-100]	; 0xffffff9c
   14ec0:	subs	r6, r0, ip
   14ec4:	ldr	r0, [sp, #80]	; 0x50
   14ec8:	sbc	r5, r0, r7
   14ecc:	ldr	r0, [sp, #72]	; 0x48
   14ed0:	subs	r2, r6, #1
   14ed4:	sbc	r3, r5, #0
   14ed8:	subs	r0, r0, lr
   14edc:	sbcs	r1, r1, r4
   14ee0:	mov	r4, #0
   14ee4:	movwcc	r4, #1
   14ee8:	cmp	r4, #0
   14eec:	mov	r4, ip
   14ef0:	moveq	r3, r5
   14ef4:	moveq	r2, r6
   14ef8:	cmn	r3, #1
   14efc:	ble	14f10 <__assert_fail@plt+0x3490>
   14f00:	ldr	r5, [fp, #-80]	; 0xffffffb0
   14f04:	ldr	r9, [sp, #88]	; 0x58
   14f08:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14f0c:	b	14f34 <__assert_fail@plt+0x34b4>
   14f10:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14f14:	ldr	r9, [sp, #88]	; 0x58
   14f18:	ldr	r5, [fp, #-80]	; 0xffffffb0
   14f1c:	adds	r2, r2, r6
   14f20:	adc	r3, r3, r9
   14f24:	adds	r0, r0, r5
   14f28:	adcs	r1, r1, r8
   14f2c:	adcs	r2, r2, #0
   14f30:	adc	r3, r3, #0
   14f34:	stm	sp, {r0, r1, r6, r9}
   14f38:	sub	r0, fp, #64	; 0x40
   14f3c:	str	r5, [sp, #16]
   14f40:	str	r8, [sp, #20]
   14f44:	bl	1669c <__assert_fail@plt+0x4c1c>
   14f48:	ldr	r6, [fp, #-64]	; 0xffffffc0
   14f4c:	ldr	sl, [fp, #-60]	; 0xffffffc4
   14f50:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14f54:	mov	r5, r0
   14f58:	eor	r0, r0, #1
   14f5c:	mov	r8, r1
   14f60:	mov	r2, r4
   14f64:	orrs	r0, r0, r1
   14f68:	orrseq	r0, r6, sl
   14f6c:	beq	14df0 <__assert_fail@plt+0x3370>
   14f70:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14f74:	orrs	r0, r6, sl
   14f78:	str	r2, [fp, #-56]	; 0xffffffc8
   14f7c:	str	r3, [fp, #-52]	; 0xffffffcc
   14f80:	beq	14718 <__assert_fail@plt+0x2c98>
   14f84:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14f88:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14f8c:	eor	r0, ip, r5
   14f90:	eor	r1, r1, r8
   14f94:	orrs	r0, r0, r1
   14f98:	eoreq	r0, r2, r6
   14f9c:	eoreq	r1, r9, sl
   14fa0:	orrseq	r0, r0, r1
   14fa4:	beq	150a4 <__assert_fail@plt+0x3624>
   14fa8:	movw	r1, #63798	; 0xf936
   14fac:	ubfx	r0, r5, #1, #7
   14fb0:	mov	r7, r8
   14fb4:	mov	lr, ip
   14fb8:	movt	r1, #1
   14fbc:	ldrb	r0, [r1, r0]
   14fc0:	umull	r1, r2, r5, r0
   14fc4:	rsbs	r1, r1, #2
   14fc8:	mla	r2, r8, r0, r2
   14fcc:	umull	r1, r3, r1, r0
   14fd0:	rsc	r2, r2, #0
   14fd4:	mla	r0, r2, r0, r3
   14fd8:	umull	r2, r3, r1, r5
   14fdc:	mla	r3, r1, r8, r3
   14fe0:	rsbs	r2, r2, #2
   14fe4:	str	r0, [fp, #-76]	; 0xffffffb4
   14fe8:	ldr	r8, [fp, #-88]	; 0xffffffa8
   14fec:	mla	r3, r0, r5, r3
   14ff0:	rsc	r0, r3, #0
   14ff4:	str	r0, [fp, #-92]	; 0xffffffa4
   14ff8:	umull	r9, r0, r1, r2
   14ffc:	str	r0, [fp, #-100]	; 0xffffff9c
   15000:	umull	r4, r0, r9, r5
   15004:	rsbs	r4, r4, #2
   15008:	str	r0, [fp, #-104]	; 0xffffff98
   1500c:	umull	r0, r3, r9, r4
   15010:	str	r3, [fp, #-96]	; 0xffffffa0
   15014:	umull	r3, ip, r0, ip
   15018:	mla	ip, r0, r8, ip
   1501c:	ldr	r0, [fp, #-104]	; 0xffffff98
   15020:	str	r3, [fp, #-84]	; 0xffffffac
   15024:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15028:	mla	r8, r9, r7, r0
   1502c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   15030:	mla	r1, r1, r0, r3
   15034:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15038:	mov	r3, r7
   1503c:	mla	r0, r0, r2, r1
   15040:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15044:	mla	r1, r0, r5, r8
   15048:	rsc	r1, r1, #0
   1504c:	mla	r1, r9, r1, r2
   15050:	mov	r2, r5
   15054:	mla	r0, r0, r4, r1
   15058:	mov	r1, sl
   1505c:	mla	r4, r0, lr, ip
   15060:	mov	r0, r6
   15064:	bl	131f4 <__assert_fail@plt+0x1774>
   15068:	cmp	r0, #0
   1506c:	beq	150cc <__assert_fail@plt+0x364c>
   15070:	ldr	r0, [fp, #12]
   15074:	mov	r2, r6
   15078:	mov	r3, sl
   1507c:	stm	sp, {r5, r7}
   15080:	bl	13be8 <__assert_fail@plt+0x2168>
   15084:	b	150f0 <__assert_fail@plt+0x3670>
   15088:	ldr	r0, [fp, #-84]	; 0xffffffac
   1508c:	mov	r2, r6
   15090:	mov	r3, r7
   15094:	stm	sp, {r0, sl}
   15098:	ldr	r0, [fp, #12]
   1509c:	bl	13be8 <__assert_fail@plt+0x2168>
   150a0:	b	15140 <__assert_fail@plt+0x36c0>
   150a4:	ldr	r0, [sp, #52]	; 0x34
   150a8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   150ac:	mov	r1, r9
   150b0:	str	r0, [sp]
   150b4:	ldr	r0, [fp, #12]
   150b8:	str	r0, [sp, #4]
   150bc:	mov	r0, r2
   150c0:	mov	r2, ip
   150c4:	bl	144d0 <__assert_fail@plt+0x2a50>
   150c8:	b	15140 <__assert_fail@plt+0x36c0>
   150cc:	ldr	r0, [sp, #52]	; 0x34
   150d0:	mov	r1, sl
   150d4:	mov	r2, r5
   150d8:	mov	r3, r7
   150dc:	str	r0, [sp]
   150e0:	ldr	r0, [fp, #12]
   150e4:	str	r0, [sp, #4]
   150e8:	mov	r0, r6
   150ec:	bl	144d0 <__assert_fail@plt+0x2a50>
   150f0:	mov	sl, r4
   150f4:	ldr	r4, [fp, #-84]	; 0xffffffac
   150f8:	ldr	r5, [fp, #8]
   150fc:	mov	r1, sl
   15100:	mov	r0, r4
   15104:	bl	1522c <__assert_fail@plt+0x37ac>
   15108:	cmp	r0, #0
   1510c:	beq	1512c <__assert_fail@plt+0x36ac>
   15110:	mov	r0, #1
   15114:	mov	r2, r4
   15118:	mov	r3, sl
   1511c:	str	r0, [sp]
   15120:	ldr	r0, [fp, #12]
   15124:	bl	15148 <__assert_fail@plt+0x36c8>
   15128:	b	15140 <__assert_fail@plt+0x36c0>
   1512c:	ldr	r3, [fp, #12]
   15130:	mov	r0, r4
   15134:	mov	r1, sl
   15138:	mov	r2, r5
   1513c:	bl	13c64 <__assert_fail@plt+0x21e4>
   15140:	sub	sp, fp, #28
   15144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15148:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1514c:	add	fp, sp, #24
   15150:	ldrb	lr, [r0, #250]	; 0xfa
   15154:	ldr	ip, [fp, #8]
   15158:	mov	r9, r3
   1515c:	mov	r4, r2
   15160:	sub	r3, lr, #1
   15164:	cmp	lr, #0
   15168:	beq	15208 <__assert_fail@plt+0x3788>
   1516c:	mov	r2, #8
   15170:	add	r5, r2, lr, lsl #3
   15174:	add	r2, lr, #223	; 0xdf
   15178:	mov	r7, r0
   1517c:	ldr	r6, [r7, r5]!
   15180:	ldr	r7, [r7, #4]
   15184:	subs	r1, r4, r6
   15188:	sbcs	r1, r9, r7
   1518c:	bcs	151b0 <__assert_fail@plt+0x3730>
   15190:	sub	r1, r2, #224	; 0xe0
   15194:	sub	r6, r2, #1
   15198:	sub	r5, r5, #8
   1519c:	cmp	r1, #0
   151a0:	mov	r2, r6
   151a4:	bgt	15178 <__assert_fail@plt+0x36f8>
   151a8:	sub	r2, r6, #224	; 0xe0
   151ac:	b	151d0 <__assert_fail@plt+0x3750>
   151b0:	eor	r1, r6, r4
   151b4:	eor	r5, r7, r9
   151b8:	orrs	r1, r1, r5
   151bc:	ldrbeq	r1, [r0, r2]
   151c0:	addeq	r1, r1, ip
   151c4:	strbeq	r1, [r0, r2]
   151c8:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   151cc:	sub	r2, r2, #224	; 0xe0
   151d0:	cmp	r3, r2
   151d4:	ble	15204 <__assert_fail@plt+0x3784>
   151d8:	lsl	r5, lr, #3
   151dc:	add	r1, r0, r5
   151e0:	sub	r5, r5, #8
   151e4:	ldrd	r6, [r1, #8]
   151e8:	strd	r6, [r1, #16]
   151ec:	add	r1, r0, r3
   151f0:	sub	r3, r3, #1
   151f4:	ldrb	r6, [r1, #224]	; 0xe0
   151f8:	cmp	r3, r2
   151fc:	strb	r6, [r1, #225]	; 0xe1
   15200:	bgt	151dc <__assert_fail@plt+0x375c>
   15204:	mov	r3, r2
   15208:	add	r1, r3, #1
   1520c:	add	r2, r0, r1, lsl #3
   15210:	add	r1, r0, r1
   15214:	str	r4, [r2, #16]
   15218:	str	r9, [r2, #20]
   1521c:	strb	ip, [r1, #224]	; 0xe0
   15220:	add	r1, lr, #1
   15224:	strb	r1, [r0, #250]	; 0xfa
   15228:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1522c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15230:	add	fp, sp, #28
   15234:	sub	sp, sp, #356	; 0x164
   15238:	subs	r2, r0, #2
   1523c:	mov	r5, #0
   15240:	sbcs	r2, r1, #0
   15244:	bcc	156d8 <__assert_fail@plt+0x3c58>
   15248:	movw	r2, #60793	; 0xed79
   1524c:	mov	r5, #1
   15250:	movt	r2, #381	; 0x17d
   15254:	subs	r2, r0, r2
   15258:	sbcs	r2, r1, #0
   1525c:	bcc	156d8 <__assert_fail@plt+0x3c58>
   15260:	subs	r2, r0, #1
   15264:	mov	r7, #0
   15268:	sbc	r3, r1, #0
   1526c:	tst	r2, #1
   15270:	mov	r6, r2
   15274:	str	r2, [sp, #76]	; 0x4c
   15278:	str	r3, [sp, #72]	; 0x48
   1527c:	bne	152a4 <__assert_fail@plt+0x3824>
   15280:	ldr	r2, [sp, #76]	; 0x4c
   15284:	ldr	r3, [sp, #72]	; 0x48
   15288:	mov	r7, #0
   1528c:	lsrs	r3, r3, #1
   15290:	add	r7, r7, #1
   15294:	rrx	r6, r2
   15298:	tst	r2, #2
   1529c:	mov	r2, r6
   152a0:	beq	1528c <__assert_fail@plt+0x380c>
   152a4:	movw	r2, #63798	; 0xf936
   152a8:	str	r6, [sp, #48]	; 0x30
   152ac:	str	r3, [sp, #52]	; 0x34
   152b0:	str	r7, [sp, #56]	; 0x38
   152b4:	ubfx	r3, r0, #1, #7
   152b8:	str	r1, [sp, #92]	; 0x5c
   152bc:	mov	r5, r0
   152c0:	movt	r2, #1
   152c4:	ldrb	r4, [r2, r3]
   152c8:	umull	r3, r2, r4, r0
   152cc:	rsbs	r3, r3, #2
   152d0:	mla	r2, r4, r1, r2
   152d4:	ldr	r1, [sp, #92]	; 0x5c
   152d8:	umull	r3, r7, r3, r4
   152dc:	rsc	lr, r2, #0
   152e0:	umull	r0, r6, r3, r0
   152e4:	rsbs	r9, r0, #2
   152e8:	umull	r0, r8, r3, r9
   152ec:	umull	ip, r2, r0, r5
   152f0:	mla	r2, r0, r1, r2
   152f4:	mla	r1, lr, r4, r7
   152f8:	ldr	r7, [sp, #92]	; 0x5c
   152fc:	mla	r7, r3, r7, r6
   15300:	ldr	r6, [sp, #92]	; 0x5c
   15304:	mla	r7, r1, r5, r7
   15308:	rsc	r7, r7, #0
   1530c:	mla	r3, r3, r7, r8
   15310:	mla	r1, r1, r9, r3
   15314:	mla	r3, r1, r5, r2
   15318:	rsbs	r2, ip, #2
   1531c:	rsc	r3, r3, #0
   15320:	subs	r7, r5, #2
   15324:	sbcs	r7, r6, #0
   15328:	bcc	1570c <__assert_fail@plt+0x3c8c>
   1532c:	umull	r4, r7, r0, r2
   15330:	mov	ip, #0
   15334:	str	r5, [sp, #88]	; 0x58
   15338:	mov	lr, #0
   1533c:	mov	r9, #0
   15340:	mov	sl, #0
   15344:	mla	r0, r0, r3, r7
   15348:	mov	r3, r5
   1534c:	mov	r5, r6
   15350:	mov	r7, #0
   15354:	str	r4, [sp, #84]	; 0x54
   15358:	mla	r0, r1, r2, r0
   1535c:	mov	r2, #1
   15360:	mvn	r1, #63	; 0x3f
   15364:	str	r0, [sp, #80]	; 0x50
   15368:	lsrs	r6, lr, #1
   1536c:	rrx	ip, ip
   15370:	lsrs	r5, r5, #1
   15374:	orr	lr, r6, r3, lsl #31
   15378:	rrx	r3, r3
   1537c:	subs	r6, r3, r2
   15380:	sbcs	r6, r5, r7
   15384:	bcc	153a4 <__assert_fail@plt+0x3924>
   15388:	eor	r6, r2, r3
   1538c:	eor	r0, r7, r5
   15390:	orrs	r0, r6, r0
   15394:	bne	153d0 <__assert_fail@plt+0x3950>
   15398:	subs	r0, r9, ip
   1539c:	sbcs	r0, sl, lr
   153a0:	bcc	153d0 <__assert_fail@plt+0x3950>
   153a4:	subs	r0, r2, r3
   153a8:	mov	r4, #0
   153ac:	sbc	r6, r7, r5
   153b0:	subs	r2, r0, #1
   153b4:	sbc	r7, r6, #0
   153b8:	subs	r9, r9, ip
   153bc:	sbcs	sl, sl, lr
   153c0:	movwcc	r4, #1
   153c4:	cmp	r4, #0
   153c8:	moveq	r2, r0
   153cc:	moveq	r7, r6
   153d0:	adds	r1, r1, #1
   153d4:	bne	15368 <__assert_fail@plt+0x38e8>
   153d8:	ldr	r0, [sp, #48]	; 0x30
   153dc:	ldr	r1, [sp, #92]	; 0x5c
   153e0:	str	r9, [sp, #24]
   153e4:	str	sl, [sp, #28]
   153e8:	mov	r5, #0
   153ec:	str	r0, [sp, #8]
   153f0:	ldr	r0, [sp, #88]	; 0x58
   153f4:	subs	r3, r0, r9
   153f8:	sbc	r2, r1, sl
   153fc:	subs	r7, r9, r3
   15400:	sbcs	r3, sl, r2
   15404:	ldr	r2, [sp, #52]	; 0x34
   15408:	str	r2, [sp, #12]
   1540c:	ldr	r2, [sp, #56]	; 0x38
   15410:	str	r2, [sp, #16]
   15414:	mov	r2, #0
   15418:	movwcc	r2, #1
   1541c:	adds	r4, r7, r0
   15420:	adc	r8, r3, r1
   15424:	cmp	r2, #0
   15428:	ldr	r2, [sp, #84]	; 0x54
   1542c:	moveq	r8, r3
   15430:	ldr	r3, [sp, #80]	; 0x50
   15434:	moveq	r4, r7
   15438:	str	r8, [sp, #4]
   1543c:	str	r4, [sp]
   15440:	bl	15c6c <__assert_fail@plt+0x41ec>
   15444:	cmp	r0, #0
   15448:	beq	156d8 <__assert_fail@plt+0x3c58>
   1544c:	ldr	r2, [sp, #76]	; 0x4c
   15450:	ldr	r3, [sp, #72]	; 0x48
   15454:	mov	r0, #0
   15458:	add	r5, sp, #96	; 0x60
   1545c:	mov	r1, #0
   15460:	str	r0, [sp, #64]	; 0x40
   15464:	mov	r0, #0
   15468:	str	r5, [sp]
   1546c:	bl	127c8 <__assert_fail@plt+0xd48>
   15470:	add	r0, r5, #16
   15474:	ldrb	r5, [sp, #346]	; 0x15a
   15478:	str	r0, [sp, #44]	; 0x2c
   1547c:	mov	r0, #2
   15480:	str	r0, [sp, #60]	; 0x3c
   15484:	mov	r0, #0
   15488:	str	r0, [sp, #68]	; 0x44
   1548c:	cmp	r5, #0
   15490:	beq	156cc <__assert_fail@plt+0x3c4c>
   15494:	ldr	r7, [sp, #44]	; 0x2c
   15498:	mov	r6, #1
   1549c:	ldrd	r2, [r7]
   154a0:	ldr	r0, [sp, #76]	; 0x4c
   154a4:	ldr	r1, [sp, #72]	; 0x48
   154a8:	bl	1c0dc <__assert_fail@plt+0xa65c>
   154ac:	mov	r2, r0
   154b0:	ldr	r0, [sp, #88]	; 0x58
   154b4:	mov	r3, r1
   154b8:	add	r1, sp, #12
   154bc:	str	r0, [sp]
   154c0:	ldr	r0, [sp, #92]	; 0x5c
   154c4:	str	r0, [sp, #4]
   154c8:	ldr	r0, [sp, #84]	; 0x54
   154cc:	str	r0, [sp, #8]
   154d0:	ldr	r0, [sp, #80]	; 0x50
   154d4:	stm	r1, {r0, r9, sl}
   154d8:	mov	r0, r4
   154dc:	mov	r1, r8
   154e0:	bl	15e0c <__assert_fail@plt+0x438c>
   154e4:	eor	r1, r1, sl
   154e8:	eor	r0, r0, r9
   154ec:	orrs	r0, r0, r1
   154f0:	beq	15508 <__assert_fail@plt+0x3a88>
   154f4:	add	r1, r6, #1
   154f8:	cmp	r6, r5
   154fc:	add	r7, r7, #8
   15500:	mov	r6, r1
   15504:	bcc	1549c <__assert_fail@plt+0x3a1c>
   15508:	cmp	r0, #0
   1550c:	bne	156cc <__assert_fail@plt+0x3c4c>
   15510:	ldr	r1, [sp, #68]	; 0x44
   15514:	movw	r0, #62448	; 0xf3f0
   15518:	ldr	r7, [sp, #60]	; 0x3c
   1551c:	ldr	r3, [sp, #64]	; 0x40
   15520:	movt	r0, #1
   15524:	ldrb	r0, [r0, r1]
   15528:	adds	r7, r7, r0
   1552c:	adc	r3, r3, #0
   15530:	umull	r4, r2, r7, r9
   15534:	str	r7, [sp, #60]	; 0x3c
   15538:	umull	r0, r1, r3, r9
   1553c:	str	r3, [sp, #64]	; 0x40
   15540:	umlal	r0, r1, r7, sl
   15544:	adds	r8, r0, r2
   15548:	adc	r0, r1, #0
   1554c:	umull	r1, r2, r7, sl
   15550:	subs	r1, r8, r1
   15554:	sbcs	r1, r0, r2
   15558:	umull	r2, r3, r3, sl
   1555c:	mov	r1, #0
   15560:	movwcc	r1, #1
   15564:	cmp	r1, #0
   15568:	addne	r3, r3, #1
   1556c:	adds	r0, r2, r0
   15570:	adc	r1, r3, #0
   15574:	orrs	r2, r0, r1
   15578:	bne	15604 <__assert_fail@plt+0x3b84>
   1557c:	ldr	r7, [sp, #88]	; 0x58
   15580:	ldr	r6, [sp, #92]	; 0x5c
   15584:	mov	r0, r4
   15588:	mov	r1, r8
   1558c:	mov	r2, r7
   15590:	mov	r3, r6
   15594:	bl	1c0dc <__assert_fail@plt+0xa65c>
   15598:	mov	r4, r2
   1559c:	mov	r8, r3
   155a0:	str	r9, [sp, #24]
   155a4:	str	sl, [sp, #28]
   155a8:	stm	sp, {r4, r8}
   155ac:	mov	r1, r6
   155b0:	ldr	r0, [sp, #48]	; 0x30
   155b4:	ldr	r2, [sp, #84]	; 0x54
   155b8:	ldr	r3, [sp, #80]	; 0x50
   155bc:	str	r0, [sp, #8]
   155c0:	ldr	r0, [sp, #52]	; 0x34
   155c4:	str	r0, [sp, #12]
   155c8:	ldr	r0, [sp, #56]	; 0x38
   155cc:	str	r0, [sp, #16]
   155d0:	mov	r0, r7
   155d4:	bl	15c6c <__assert_fail@plt+0x41ec>
   155d8:	cmp	r0, #0
   155dc:	beq	156d4 <__assert_fail@plt+0x3c54>
   155e0:	ldr	r0, [sp, #68]	; 0x44
   155e4:	mov	r1, r0
   155e8:	add	r1, r0, #1
   155ec:	mov	r0, r1
   155f0:	str	r1, [sp, #68]	; 0x44
   155f4:	lsr	r0, r1, #2
   155f8:	cmp	r0, #166	; 0xa6
   155fc:	bls	1548c <__assert_fail@plt+0x3a0c>
   15600:	b	156e4 <__assert_fail@plt+0x3c64>
   15604:	ldr	r7, [sp, #88]	; 0x58
   15608:	ldr	ip, [sp, #92]	; 0x5c
   1560c:	subs	r2, r0, r7
   15610:	sbcs	r2, r1, ip
   15614:	bcs	1572c <__assert_fail@plt+0x3cac>
   15618:	str	ip, [sp, #40]	; 0x28
   1561c:	mov	lr, #0
   15620:	mvn	r3, #63	; 0x3f
   15624:	mov	r2, r7
   15628:	mov	ip, #0
   1562c:	lsrs	r7, ip, #1
   15630:	orr	ip, r7, r2, lsl #31
   15634:	ldr	r7, [sp, #40]	; 0x28
   15638:	rrx	lr, lr
   1563c:	lsrs	r7, r7, #1
   15640:	rrx	r2, r2
   15644:	str	r7, [sp, #40]	; 0x28
   15648:	subs	r6, r2, r0
   1564c:	sbcs	r6, r7, r1
   15650:	bcc	15674 <__assert_fail@plt+0x3bf4>
   15654:	eor	r6, r0, r2
   15658:	eor	r7, r1, r7
   1565c:	orrs	r6, r6, r7
   15660:	bne	156b8 <__assert_fail@plt+0x3c38>
   15664:	ldr	r7, [sp, #40]	; 0x28
   15668:	subs	r6, r4, lr
   1566c:	sbcs	r6, r8, ip
   15670:	bcc	156b8 <__assert_fail@plt+0x3c38>
   15674:	subs	r6, r0, r2
   15678:	str	r2, [sp, #36]	; 0x24
   1567c:	mov	r2, ip
   15680:	sbc	r7, r1, r7
   15684:	subs	r0, r6, #1
   15688:	sbc	r1, r7, #0
   1568c:	subs	r4, r4, lr
   15690:	sbcs	r8, r8, ip
   15694:	mov	ip, lr
   15698:	mov	lr, #0
   1569c:	movwcc	lr, #1
   156a0:	cmp	lr, #0
   156a4:	mov	lr, ip
   156a8:	mov	ip, r2
   156ac:	ldr	r2, [sp, #36]	; 0x24
   156b0:	moveq	r0, r6
   156b4:	moveq	r1, r7
   156b8:	ldr	r6, [sp, #92]	; 0x5c
   156bc:	ldr	r7, [sp, #88]	; 0x58
   156c0:	adds	r3, r3, #1
   156c4:	bne	1562c <__assert_fail@plt+0x3bac>
   156c8:	b	155a0 <__assert_fail@plt+0x3b20>
   156cc:	mov	r5, #1
   156d0:	b	156d8 <__assert_fail@plt+0x3c58>
   156d4:	mov	r5, #0
   156d8:	mov	r0, r5
   156dc:	sub	sp, fp, #28
   156e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156e4:	movw	r1, #50789	; 0xc665
   156e8:	mov	r0, #0
   156ec:	mov	r2, #5
   156f0:	movt	r1, #1
   156f4:	bl	1175c <dcgettext@plt>
   156f8:	mov	r2, r0
   156fc:	mov	r0, #0
   15700:	mov	r1, #0
   15704:	bl	1184c <error@plt>
   15708:	bl	11a68 <abort@plt>
   1570c:	movw	r0, #50839	; 0xc697
   15710:	movw	r1, #50776	; 0xc658
   15714:	movw	r3, #50849	; 0xc6a1
   15718:	movw	r2, #1214	; 0x4be
   1571c:	movt	r0, #1
   15720:	movt	r1, #1
   15724:	movt	r3, #1
   15728:	bl	11a80 <__assert_fail@plt>
   1572c:	movw	r0, #50874	; 0xc6ba
   15730:	movw	r1, #50776	; 0xc658
   15734:	movw	r3, #50849	; 0xc6a1
   15738:	movw	r2, #1262	; 0x4ee
   1573c:	movt	r0, #1
   15740:	movt	r1, #1
   15744:	movt	r3, #1
   15748:	bl	11a80 <__assert_fail@plt>
   1574c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15750:	add	fp, sp, #28
   15754:	sub	sp, sp, #108	; 0x6c
   15758:	ldr	r6, [fp, #20]
   1575c:	str	r2, [fp, #-48]	; 0xffffffd0
   15760:	str	r2, [sp]
   15764:	ldr	r1, [fp, #8]
   15768:	ldr	r2, [fp, #12]
   1576c:	mov	r9, r0
   15770:	str	r3, [fp, #-44]	; 0xffffffd4
   15774:	sub	r0, fp, #40	; 0x28
   15778:	stmib	sp, {r3, r6}
   1577c:	mov	r3, r9
   15780:	bl	159a4 <__assert_fail@plt+0x3f24>
   15784:	ldr	r4, [r6]
   15788:	mov	sl, r1
   1578c:	ldr	r1, [r6, #4]
   15790:	mov	r5, r6
   15794:	ldr	ip, [r6, #12]
   15798:	mov	r8, #1
   1579c:	ldr	lr, [r5, #8]!
   157a0:	eor	r2, sl, r1
   157a4:	eor	r3, r0, r4
   157a8:	orrs	r2, r3, r2
   157ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   157b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   157b4:	eoreq	r7, r3, ip
   157b8:	eoreq	r6, r2, lr
   157bc:	orrseq	r6, r6, r7
   157c0:	beq	15998 <__assert_fail@plt+0x3f18>
   157c4:	str	r5, [sp, #68]	; 0x44
   157c8:	mov	r5, r9
   157cc:	ldrd	r6, [r9]
   157d0:	str	r5, [sp, #64]	; 0x40
   157d4:	ldr	r9, [r9, #12]
   157d8:	str	r6, [sp, #52]	; 0x34
   157dc:	subs	r6, r6, r4
   157e0:	mov	r4, r5
   157e4:	str	r7, [sp, #56]	; 0x38
   157e8:	str	r9, [fp, #-64]	; 0xffffffc0
   157ec:	ldr	r5, [r4, #8]!
   157f0:	sbcs	r1, r7, r1
   157f4:	mov	r7, #0
   157f8:	str	r6, [fp, #-52]	; 0xffffffcc
   157fc:	movwcc	r7, #1
   15800:	str	r1, [fp, #-56]	; 0xffffffc8
   15804:	str	r5, [sp, #60]	; 0x3c
   15808:	subs	r5, r5, lr
   1580c:	str	r4, [fp, #-60]	; 0xffffffc4
   15810:	sbc	lr, r9, ip
   15814:	subs	ip, r5, #1
   15818:	sbc	r4, lr, #0
   1581c:	cmp	r7, #0
   15820:	eor	r7, r0, r6
   15824:	moveq	ip, r5
   15828:	eor	r5, sl, r1
   1582c:	moveq	r4, lr
   15830:	orrs	r7, r7, r5
   15834:	eoreq	r7, r2, ip
   15838:	eoreq	r5, r3, r4
   1583c:	orrseq	r7, r7, r5
   15840:	beq	15998 <__assert_fail@plt+0x3f18>
   15844:	ldr	r1, [fp, #16]
   15848:	cmp	r1, #2
   1584c:	bcc	15994 <__assert_fail@plt+0x3f14>
   15850:	ldr	r1, [sp, #52]	; 0x34
   15854:	ldr	r7, [fp, #-48]	; 0xffffffd0
   15858:	str	r4, [sp, #48]	; 0x30
   1585c:	str	r1, [sp, #32]
   15860:	ldr	r1, [sp, #56]	; 0x38
   15864:	str	r7, [sp, #40]	; 0x28
   15868:	ldr	r7, [fp, #-44]	; 0xffffffd4
   1586c:	str	r1, [sp, #36]	; 0x24
   15870:	str	r7, [sp, #44]	; 0x2c
   15874:	stm	sp, {r0, sl}
   15878:	str	r0, [sp, #16]
   1587c:	str	r2, [sp, #8]
   15880:	str	r3, [sp, #12]
   15884:	str	sl, [sp, #20]
   15888:	ldr	r0, [sp, #60]	; 0x3c
   1588c:	str	r0, [sp, #24]
   15890:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15894:	str	ip, [fp, #-64]	; 0xffffffc0
   15898:	str	r0, [sp, #28]
   1589c:	sub	r0, fp, #40	; 0x28
   158a0:	bl	16030 <__assert_fail@plt+0x45b0>
   158a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   158a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   158ac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   158b0:	ldr	r9, [sp, #64]	; 0x40
   158b4:	eor	r2, r1, r2
   158b8:	eor	r3, r0, r3
   158bc:	orrs	r2, r3, r2
   158c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158c4:	ldreq	r6, [sp, #48]	; 0x30
   158c8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   158cc:	eoreq	r7, r2, r7
   158d0:	eoreq	r6, r3, r6
   158d4:	orrseq	r7, r7, r6
   158d8:	beq	15998 <__assert_fail@plt+0x3f18>
   158dc:	mov	sl, #1
   158e0:	mov	r8, #1
   158e4:	ldr	r7, [fp, #20]
   158e8:	ldrd	r4, [r7]
   158ec:	eor	r7, r1, r5
   158f0:	eor	r6, r0, r4
   158f4:	orrs	r7, r6, r7
   158f8:	bne	15914 <__assert_fail@plt+0x3e94>
   158fc:	ldr	r7, [sp, #68]	; 0x44
   15900:	ldrd	r4, [r7]
   15904:	eor	r7, r3, r5
   15908:	eor	r6, r2, r4
   1590c:	orrs	r7, r6, r7
   15910:	beq	15994 <__assert_fail@plt+0x3f14>
   15914:	ldr	r7, [fp, #16]
   15918:	add	sl, sl, #1
   1591c:	cmp	sl, r7
   15920:	bcs	15994 <__assert_fail@plt+0x3f14>
   15924:	ldr	r7, [fp, #-60]	; 0xffffffc4
   15928:	add	ip, sp, #16
   1592c:	ldrd	r4, [r7]
   15930:	ldrd	r6, [r9]
   15934:	str	r7, [sp, #36]	; 0x24
   15938:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1593c:	str	r6, [sp, #32]
   15940:	str	r7, [sp, #40]	; 0x28
   15944:	ldr	r7, [fp, #-44]	; 0xffffffd4
   15948:	str	r7, [sp, #44]	; 0x2c
   1594c:	stm	sp, {r0, r1, r2, r3}
   15950:	stm	ip, {r0, r1, r4, r5}
   15954:	sub	r0, fp, #40	; 0x28
   15958:	bl	16030 <__assert_fail@plt+0x45b0>
   1595c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15960:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15964:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15968:	eor	r2, r1, r2
   1596c:	eor	r3, r0, r3
   15970:	orrs	r2, r3, r2
   15974:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15978:	ldreq	r6, [sp, #48]	; 0x30
   1597c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15980:	eoreq	r7, r2, r7
   15984:	eoreq	r6, r3, r6
   15988:	orrseq	r7, r7, r6
   1598c:	bne	158e4 <__assert_fail@plt+0x3e64>
   15990:	b	15998 <__assert_fail@plt+0x3f18>
   15994:	mov	r8, #0
   15998:	mov	r0, r8
   1599c:	sub	sp, fp, #28
   159a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159a8:	add	fp, sp, #28
   159ac:	sub	sp, sp, #100	; 0x64
   159b0:	str	r0, [fp, #-40]	; 0xffffffd8
   159b4:	mvn	r9, #63	; 0x3f
   159b8:	ldm	r1, {r5, lr}
   159bc:	str	r2, [sp, #52]	; 0x34
   159c0:	ldr	ip, [r1, #8]
   159c4:	ldr	r6, [r1, #12]
   159c8:	ldr	r4, [r2]
   159cc:	ldr	r2, [r2, #4]
   159d0:	ldr	r0, [r3]
   159d4:	ldr	r8, [r3, #4]
   159d8:	ldr	sl, [r3, #12]
   159dc:	str	r0, [fp, #-44]	; 0xffffffd4
   159e0:	ldr	r0, [r3, #8]
   159e4:	str	sl, [sp, #64]	; 0x40
   159e8:	str	r8, [sp, #60]	; 0x3c
   159ec:	str	r0, [fp, #-32]	; 0xffffffe0
   159f0:	ldr	r0, [fp, #16]
   159f4:	ldr	r1, [r0]
   159f8:	str	r1, [fp, #-56]	; 0xffffffc8
   159fc:	ldr	r1, [r0, #4]
   15a00:	str	r1, [fp, #-60]	; 0xffffffc4
   15a04:	ldr	r1, [r0, #8]
   15a08:	ldr	r0, [r0, #12]
   15a0c:	str	r1, [fp, #-52]	; 0xffffffcc
   15a10:	str	r0, [fp, #-48]	; 0xffffffd0
   15a14:	tst	r4, #1
   15a18:	str	r2, [fp, #-36]	; 0xffffffdc
   15a1c:	bne	15a38 <__assert_fail@plt+0x3fb8>
   15a20:	ldr	r7, [fp, #-40]	; 0xffffffd8
   15a24:	ldr	r8, [fp, #-44]	; 0xffffffd4
   15a28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15a2c:	ldr	r1, [fp, #12]
   15a30:	ldr	r2, [fp, #8]
   15a34:	b	15ac8 <__assert_fail@plt+0x4048>
   15a38:	mov	r0, r8
   15a3c:	ldr	r8, [fp, #-44]	; 0xffffffd4
   15a40:	str	r0, [sp, #36]	; 0x24
   15a44:	ldr	r0, [fp, #8]
   15a48:	str	r8, [sp, #32]
   15a4c:	str	r0, [sp, #40]	; 0x28
   15a50:	ldr	r0, [fp, #12]
   15a54:	str	r0, [sp, #44]	; 0x2c
   15a58:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15a5c:	str	r0, [sp]
   15a60:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15a64:	stmib	sp, {r0, ip}
   15a68:	str	sl, [sp, #28]
   15a6c:	str	r6, [sp, #12]
   15a70:	str	r5, [sp, #16]
   15a74:	str	lr, [sp, #20]
   15a78:	str	lr, [sp, #56]	; 0x38
   15a7c:	mov	sl, ip
   15a80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15a84:	ldr	r7, [fp, #-40]	; 0xffffffd8
   15a88:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15a8c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a90:	str	r0, [sp, #24]
   15a94:	mov	r0, r7
   15a98:	bl	16030 <__assert_fail@plt+0x45b0>
   15a9c:	str	r0, [fp, #-56]	; 0xffffffc8
   15aa0:	str	r1, [fp, #-60]	; 0xffffffc4
   15aa4:	ldr	lr, [sp, #56]	; 0x38
   15aa8:	ldr	r2, [fp, #8]
   15aac:	mov	ip, sl
   15ab0:	ldr	r1, [r7]
   15ab4:	ldr	r0, [r7, #4]
   15ab8:	str	r1, [fp, #-52]	; 0xffffffcc
   15abc:	str	r0, [fp, #-48]	; 0xffffffd0
   15ac0:	ldr	r1, [fp, #12]
   15ac4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15ac8:	str	r8, [sp, #32]
   15acc:	ldr	r8, [sp, #60]	; 0x3c
   15ad0:	str	r2, [sp, #40]	; 0x28
   15ad4:	str	r1, [sp, #44]	; 0x2c
   15ad8:	mov	r2, ip
   15adc:	mov	r3, r6
   15ae0:	str	r8, [sp, #36]	; 0x24
   15ae4:	stm	sp, {r5, lr}
   15ae8:	str	r0, [sp, #24]
   15aec:	mov	r0, r7
   15af0:	str	ip, [sp, #8]
   15af4:	str	r6, [sp, #12]
   15af8:	str	r5, [sp, #16]
   15afc:	str	lr, [sp, #20]
   15b00:	ldr	sl, [sp, #64]	; 0x40
   15b04:	str	sl, [sp, #28]
   15b08:	bl	16030 <__assert_fail@plt+0x45b0>
   15b0c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15b10:	ldr	ip, [r7]
   15b14:	ldr	r6, [r7, #4]
   15b18:	mov	r5, r0
   15b1c:	mov	lr, r1
   15b20:	lsrs	r2, r2, #1
   15b24:	rrx	r4, r4
   15b28:	adds	r9, r9, #1
   15b2c:	bne	15a14 <__assert_fail@plt+0x3f94>
   15b30:	ldr	r0, [sp, #52]	; 0x34
   15b34:	ldr	r4, [r0, #8]
   15b38:	ldr	r9, [r0, #12]
   15b3c:	orrs	r0, r4, r9
   15b40:	beq	15c4c <__assert_fail@plt+0x41cc>
   15b44:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15b48:	ldr	r7, [fp, #-32]	; 0xffffffe0
   15b4c:	ldr	r1, [fp, #12]
   15b50:	ldr	r2, [fp, #8]
   15b54:	tst	r4, #1
   15b58:	bne	15b64 <__assert_fail@plt+0x40e4>
   15b5c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15b60:	b	15be8 <__assert_fail@plt+0x4168>
   15b64:	str	r1, [sp, #44]	; 0x2c
   15b68:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15b6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15b70:	str	r8, [sp, #36]	; 0x24
   15b74:	str	r2, [sp, #40]	; 0x28
   15b78:	str	r1, [sp]
   15b7c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15b80:	str	r0, [sp, #32]
   15b84:	mov	r0, r3
   15b88:	stmib	sp, {r1, ip}
   15b8c:	str	r7, [sp, #24]
   15b90:	str	r6, [sp, #12]
   15b94:	str	r5, [sp, #16]
   15b98:	str	lr, [sp, #20]
   15b9c:	str	sl, [sp, #28]
   15ba0:	mov	r7, lr
   15ba4:	str	ip, [fp, #-36]	; 0xffffffdc
   15ba8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15bac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15bb0:	bl	16030 <__assert_fail@plt+0x45b0>
   15bb4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15bb8:	str	r0, [fp, #-56]	; 0xffffffc8
   15bbc:	str	r1, [fp, #-60]	; 0xffffffc4
   15bc0:	mov	lr, r7
   15bc4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   15bc8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   15bcc:	ldr	r2, [fp, #8]
   15bd0:	ldr	r1, [r3]
   15bd4:	ldr	r0, [r3, #4]
   15bd8:	str	r0, [fp, #-48]	; 0xffffffd0
   15bdc:	str	r1, [fp, #-52]	; 0xffffffcc
   15be0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15be4:	ldr	r1, [fp, #12]
   15be8:	str	r0, [sp, #32]
   15bec:	str	r2, [sp, #40]	; 0x28
   15bf0:	mov	r0, r3
   15bf4:	mov	r2, ip
   15bf8:	mov	r3, r6
   15bfc:	str	r8, [sp, #36]	; 0x24
   15c00:	str	r1, [sp, #44]	; 0x2c
   15c04:	stm	sp, {r5, lr}
   15c08:	str	ip, [sp, #8]
   15c0c:	str	r6, [sp, #12]
   15c10:	str	r5, [sp, #16]
   15c14:	str	lr, [sp, #20]
   15c18:	str	r7, [sp, #24]
   15c1c:	str	sl, [sp, #28]
   15c20:	bl	16030 <__assert_fail@plt+0x45b0>
   15c24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c28:	lsrs	r9, r9, #1
   15c2c:	mov	r5, r0
   15c30:	mov	lr, r1
   15c34:	rrx	r4, r4
   15c38:	orrs	r0, r4, r9
   15c3c:	ldr	ip, [r3]
   15c40:	ldr	r6, [r3, #4]
   15c44:	bne	15b48 <__assert_fail@plt+0x40c8>
   15c48:	b	15c50 <__assert_fail@plt+0x41d0>
   15c4c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c50:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15c54:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15c58:	strd	r0, [r3]
   15c5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15c60:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15c64:	sub	sp, fp, #28
   15c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c70:	add	fp, sp, #28
   15c74:	sub	sp, sp, #52	; 0x34
   15c78:	ldr	r4, [fp, #36]	; 0x24
   15c7c:	ldr	r5, [fp, #32]
   15c80:	str	r3, [fp, #-32]	; 0xffffffe0
   15c84:	str	r3, [sp, #12]
   15c88:	str	r2, [fp, #-36]	; 0xffffffdc
   15c8c:	stm	sp, {r0, r1, r2}
   15c90:	add	r3, fp, #8
   15c94:	mov	r7, r1
   15c98:	mov	r6, r0
   15c9c:	str	r4, [sp, #20]
   15ca0:	str	r5, [sp, #16]
   15ca4:	ldm	r3, {r0, r1, r2, r3}
   15ca8:	bl	15e0c <__assert_fail@plt+0x438c>
   15cac:	eor	r2, r1, r4
   15cb0:	eor	r3, r0, r5
   15cb4:	str	r6, [sp, #36]	; 0x24
   15cb8:	subs	r6, r6, r5
   15cbc:	str	r7, [sp, #40]	; 0x28
   15cc0:	orr	r2, r3, r2
   15cc4:	sbc	r5, r7, r4
   15cc8:	cmp	r2, #0
   15ccc:	eorne	r2, r0, r6
   15cd0:	eorne	r3, r1, r5
   15cd4:	orrsne	r2, r2, r3
   15cd8:	beq	15dfc <__assert_fail@plt+0x437c>
   15cdc:	ldr	r3, [fp, #24]
   15ce0:	mov	r2, #0
   15ce4:	cmp	r3, #2
   15ce8:	bcc	15e00 <__assert_fail@plt+0x4380>
   15cec:	ldr	sl, [sp, #40]	; 0x28
   15cf0:	ldr	lr, [sp, #36]	; 0x24
   15cf4:	mov	r9, #2
   15cf8:	str	r6, [sp, #32]
   15cfc:	str	r5, [sp, #28]
   15d00:	umull	r2, ip, r1, r0
   15d04:	umull	r0, r5, r0, r0
   15d08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15d0c:	lsl	r8, ip, #1
   15d10:	adds	r5, r5, r2, lsl #1
   15d14:	orr	r4, r8, r2, lsr #31
   15d18:	adc	r8, r4, #0
   15d1c:	ldr	r4, [fp, #-36]	; 0xffffffdc
   15d20:	umull	r6, r7, r0, r4
   15d24:	mla	r0, r0, r3, r7
   15d28:	umull	r7, r3, r6, sl
   15d2c:	mla	r0, r5, r4, r0
   15d30:	umull	r6, r4, r6, lr
   15d34:	umlal	r7, r3, r0, lr
   15d38:	adds	r4, r7, r4
   15d3c:	umull	r6, r7, r0, lr
   15d40:	adc	r3, r3, #0
   15d44:	subs	r4, r4, r6
   15d48:	umull	r0, r6, r0, sl
   15d4c:	sbcs	r4, r3, r7
   15d50:	umull	r1, r7, r1, r1
   15d54:	mov	r4, #0
   15d58:	movwcc	r4, #1
   15d5c:	cmp	r4, #0
   15d60:	addne	r6, r6, #1
   15d64:	adds	r0, r0, r3
   15d68:	adc	r3, r6, #0
   15d6c:	subs	r2, r5, r2
   15d70:	ldr	r5, [sp, #28]
   15d74:	ldr	r6, [sp, #32]
   15d78:	sbcs	r2, r8, ip
   15d7c:	mov	r2, #0
   15d80:	movwcc	r2, #1
   15d84:	cmp	r2, #0
   15d88:	addne	r7, r7, #1
   15d8c:	adds	r1, r1, r8
   15d90:	adc	r2, r7, #0
   15d94:	subs	r7, r1, r0
   15d98:	sbcs	r2, r2, r3
   15d9c:	mov	r3, #0
   15da0:	movwcc	r3, #1
   15da4:	adds	r0, r7, lr
   15da8:	adc	r1, r2, sl
   15dac:	cmp	r3, #0
   15db0:	moveq	r1, r2
   15db4:	moveq	r0, r7
   15db8:	eor	r2, r1, r5
   15dbc:	eor	r3, r0, r6
   15dc0:	orrs	r2, r3, r2
   15dc4:	beq	15dfc <__assert_fail@plt+0x437c>
   15dc8:	ldr	r2, [fp, #32]
   15dcc:	ldr	r3, [fp, #36]	; 0x24
   15dd0:	eor	r2, r0, r2
   15dd4:	eor	r3, r1, r3
   15dd8:	orrs	r2, r2, r3
   15ddc:	mov	r2, #0
   15de0:	beq	15e00 <__assert_fail@plt+0x4380>
   15de4:	ldr	r7, [fp, #24]
   15de8:	add	r3, r9, #1
   15dec:	cmp	r9, r7
   15df0:	mov	r9, r3
   15df4:	bcc	15d00 <__assert_fail@plt+0x4280>
   15df8:	b	15e00 <__assert_fail@plt+0x4380>
   15dfc:	mov	r2, #1
   15e00:	mov	r0, r2
   15e04:	sub	sp, fp, #28
   15e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e10:	add	fp, sp, #28
   15e14:	sub	sp, sp, #20
   15e18:	mov	lr, r0
   15e1c:	ands	r0, r2, #1
   15e20:	ldr	r0, [fp, #28]
   15e24:	movne	r0, r1
   15e28:	str	r0, [sp, #8]
   15e2c:	ldr	r0, [fp, #24]
   15e30:	movne	r0, lr
   15e34:	orrs	r4, r2, r3
   15e38:	str	r0, [sp, #4]
   15e3c:	beq	16024 <__assert_fail@plt+0x45a4>
   15e40:	mov	sl, r1
   15e44:	ldr	r0, [fp, #20]
   15e48:	ldr	r1, [fp, #16]
   15e4c:	ldr	ip, [fp, #12]
   15e50:	mov	r8, r2
   15e54:	umull	r4, r9, sl, lr
   15e58:	umull	r7, r5, lr, lr
   15e5c:	ldr	lr, [fp, #8]
   15e60:	str	sl, [sp, #12]
   15e64:	str	r8, [sp, #16]
   15e68:	lsl	r6, r9, #1
   15e6c:	adds	r5, r5, r4, lsl #1
   15e70:	orr	r6, r6, r4, lsr #31
   15e74:	adc	r2, r6, #0
   15e78:	umull	r6, sl, r7, r1
   15e7c:	mla	r7, r7, r0, sl
   15e80:	mov	r0, r3
   15e84:	mla	sl, r5, r1, r7
   15e88:	umull	r7, r8, r6, ip
   15e8c:	umull	r6, r3, r6, lr
   15e90:	umlal	r7, r8, sl, lr
   15e94:	adds	r3, r7, r3
   15e98:	umull	r7, r1, sl, lr
   15e9c:	adc	r6, r8, #0
   15ea0:	subs	r3, r3, r7
   15ea4:	sbcs	r1, r6, r1
   15ea8:	umull	r3, r7, sl, ip
   15eac:	mov	r1, #0
   15eb0:	movwcc	r1, #1
   15eb4:	cmp	r1, #0
   15eb8:	addne	r7, r7, #1
   15ebc:	adds	r1, r3, r6
   15ec0:	adc	r3, r7, #0
   15ec4:	subs	r4, r5, r4
   15ec8:	ldr	r7, [sp, #12]
   15ecc:	sbcs	r4, r2, r9
   15ed0:	mov	r9, lr
   15ed4:	mov	r4, #0
   15ed8:	movwcc	r4, #1
   15edc:	cmp	r4, #0
   15ee0:	umull	r7, r6, r7, r7
   15ee4:	mov	r4, #0
   15ee8:	addne	r6, r6, #1
   15eec:	adds	r7, r7, r2
   15ef0:	adc	r6, r6, #0
   15ef4:	subs	r1, r7, r1
   15ef8:	sbcs	r3, r6, r3
   15efc:	movwcc	r4, #1
   15f00:	adds	lr, r1, lr
   15f04:	adc	sl, r3, ip
   15f08:	cmp	r4, #0
   15f0c:	moveq	sl, r3
   15f10:	mov	r3, r0
   15f14:	moveq	lr, r1
   15f18:	lsrs	r3, r0, #1
   15f1c:	ldr	r0, [sp, #16]
   15f20:	rrx	r8, r0
   15f24:	tst	r0, #2
   15f28:	beq	16010 <__assert_fail@plt+0x4590>
   15f2c:	ldr	r0, [sp, #4]
   15f30:	str	r3, [sp, #16]
   15f34:	ldr	r3, [fp, #16]
   15f38:	ldr	r4, [fp, #20]
   15f3c:	umull	r1, r2, lr, r0
   15f40:	mov	r6, r3
   15f44:	umull	r3, r5, r1, r3
   15f48:	mla	r1, r1, r4, r5
   15f4c:	ldr	r4, [sp, #8]
   15f50:	umull	r0, r5, sl, r0
   15f54:	umlal	r0, r5, lr, r4
   15f58:	adds	r0, r0, r2
   15f5c:	mla	r1, r0, r6, r1
   15f60:	umull	r2, r6, r1, ip
   15f64:	str	r2, [sp, #12]
   15f68:	umull	r7, r2, r1, r9
   15f6c:	str	r7, [sp]
   15f70:	str	r2, [sp, #4]
   15f74:	umull	r2, r7, r3, ip
   15f78:	umlal	r2, r7, r1, r9
   15f7c:	adc	r1, r5, #0
   15f80:	umull	r3, r5, r3, r9
   15f84:	adds	r2, r2, r5
   15f88:	ldr	r5, [sp]
   15f8c:	adc	r3, r7, #0
   15f90:	subs	r2, r2, r5
   15f94:	ldr	r2, [sp, #4]
   15f98:	sbcs	r2, r3, r2
   15f9c:	mov	r2, #0
   15fa0:	movwcc	r2, #1
   15fa4:	cmp	r2, #0
   15fa8:	ldr	r2, [sp, #12]
   15fac:	addne	r6, r6, #1
   15fb0:	adds	r2, r2, r3
   15fb4:	adc	r3, r6, #0
   15fb8:	umull	r5, r6, lr, r4
   15fbc:	subs	r0, r0, r5
   15fc0:	sbcs	r0, r1, r6
   15fc4:	umull	r5, r6, sl, r4
   15fc8:	mov	r0, #0
   15fcc:	movwcc	r0, #1
   15fd0:	cmp	r0, #0
   15fd4:	addne	r6, r6, #1
   15fd8:	adds	r0, r5, r1
   15fdc:	adc	r1, r6, #0
   15fe0:	subs	r2, r0, r2
   15fe4:	sbcs	r1, r1, r3
   15fe8:	mov	r3, #0
   15fec:	movwcc	r3, #1
   15ff0:	adds	r4, r2, r9
   15ff4:	adc	r0, r1, ip
   15ff8:	cmp	r3, #0
   15ffc:	ldr	r3, [sp, #16]
   16000:	moveq	r0, r1
   16004:	moveq	r4, r2
   16008:	str	r0, [sp, #8]
   1600c:	str	r4, [sp, #4]
   16010:	orrs	r1, r8, r3
   16014:	ldr	r0, [fp, #20]
   16018:	ldr	ip, [fp, #12]
   1601c:	ldr	r1, [fp, #16]
   16020:	bne	15e54 <__assert_fail@plt+0x43d4>
   16024:	ldmib	sp, {r0, r1}
   16028:	sub	sp, fp, #28
   1602c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16034:	add	fp, sp, #28
   16038:	sub	sp, sp, #84	; 0x54
   1603c:	ldr	r1, [fp, #48]	; 0x30
   16040:	ldr	r6, [fp, #52]	; 0x34
   16044:	str	r3, [fp, #-32]	; 0xffffffe0
   16048:	rsbs	r7, r1, #0
   1604c:	rsc	r4, r6, #0
   16050:	cmn	r3, #1
   16054:	ble	165a0 <__assert_fail@plt+0x4b20>
   16058:	ldr	r1, [fp, #16]
   1605c:	ldr	r6, [fp, #20]
   16060:	mvn	r3, #0
   16064:	subs	r1, r3, r1
   16068:	sbcs	r1, r3, r6
   1606c:	bge	165c0 <__assert_fail@plt+0x4b40>
   16070:	ldr	r9, [fp, #32]
   16074:	str	r0, [fp, #-36]	; 0xffffffdc
   16078:	ldr	r0, [fp, #36]	; 0x24
   1607c:	str	r2, [fp, #-40]	; 0xffffffd8
   16080:	subs	r1, r3, r9
   16084:	sbcs	r0, r3, r0
   16088:	bge	165e0 <__assert_fail@plt+0x4b60>
   1608c:	ldr	r3, [fp, #24]
   16090:	ldr	r5, [fp, #8]
   16094:	ldr	sl, [fp, #28]
   16098:	ldr	lr, [fp, #12]
   1609c:	ldr	r6, [fp, #44]	; 0x2c
   160a0:	str	r4, [fp, #-44]	; 0xffffffd4
   160a4:	ldr	r8, [fp, #40]	; 0x28
   160a8:	str	r7, [fp, #-48]	; 0xffffffd0
   160ac:	umull	r2, r0, r3, r5
   160b0:	umull	ip, r1, r2, r7
   160b4:	str	r2, [sp, #32]
   160b8:	mla	r1, r2, r4, r1
   160bc:	umull	r2, r4, sl, r5
   160c0:	umlal	r2, r4, r3, lr
   160c4:	mov	r3, lr
   160c8:	adds	r0, r2, r0
   160cc:	mla	r7, r0, r7, r1
   160d0:	str	r0, [sp, #28]
   160d4:	umull	r0, r1, r7, r6
   160d8:	umull	r5, sl, r7, r9
   160dc:	ldr	r9, [fp, #20]
   160e0:	str	r1, [sp, #24]
   160e4:	str	r0, [sp, #36]	; 0x24
   160e8:	umull	r1, r0, r7, r8
   160ec:	str	r1, [sp, #16]
   160f0:	str	r0, [sp, #20]
   160f4:	umull	r1, r0, ip, r6
   160f8:	umlal	r1, r0, r7, r8
   160fc:	str	r0, [sp, #12]
   16100:	ldr	r0, [fp, #36]	; 0x24
   16104:	str	r1, [sp, #8]
   16108:	ldr	r1, [fp, #32]
   1610c:	umull	r0, r6, r7, r0
   16110:	str	r0, [sp, #4]
   16114:	ldr	r0, [fp, #36]	; 0x24
   16118:	umull	r0, lr, ip, r0
   1611c:	umlal	r0, lr, r7, r1
   16120:	adc	r1, r4, #0
   16124:	ldr	r7, [fp, #8]
   16128:	str	r1, [sp, #40]	; 0x28
   1612c:	ldr	r1, [fp, #32]
   16130:	umull	r2, r1, ip, r1
   16134:	adds	r0, r0, r1
   16138:	ldr	r1, [fp, #16]
   1613c:	str	r2, [sp, #48]	; 0x30
   16140:	adc	r8, lr, #0
   16144:	str	r0, [sp, #44]	; 0x2c
   16148:	subs	r0, r0, r5
   1614c:	ldr	lr, [fp, #-40]	; 0xffffffd8
   16150:	sbcs	r0, r8, sl
   16154:	mov	r0, #0
   16158:	movwcc	r0, #1
   1615c:	mov	r2, r1
   16160:	cmp	r0, #0
   16164:	umull	r4, r0, r9, r7
   16168:	umlal	r4, r0, r1, r3
   1616c:	umull	r1, r5, r1, r7
   16170:	addne	r6, r6, #1
   16174:	mov	r7, #0
   16178:	adds	sl, r4, r5
   1617c:	str	r1, [sp]
   16180:	adc	r1, r0, #0
   16184:	umull	r5, r0, r2, r3
   16188:	subs	r5, sl, r5
   1618c:	sbcs	r0, r1, r0
   16190:	movwcc	r7, #1
   16194:	umull	r5, r0, r9, r3
   16198:	cmp	r7, #0
   1619c:	addne	r0, r0, #1
   161a0:	adds	r3, r5, r1
   161a4:	ldr	r1, [fp, #16]
   161a8:	umull	r7, r5, r9, lr
   161ac:	adc	r2, r0, #0
   161b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   161b4:	umlal	r7, r5, r1, r0
   161b8:	umull	r1, r9, r1, lr
   161bc:	adds	r7, r7, r9
   161c0:	str	r1, [sp, #56]	; 0x38
   161c4:	adc	r0, r5, #0
   161c8:	adds	r3, r3, r1
   161cc:	str	r7, [sp, #52]	; 0x34
   161d0:	ldr	r5, [sp, #24]
   161d4:	str	r0, [fp, #-52]	; 0xffffffcc
   161d8:	adc	r0, r2, r7
   161dc:	ldr	r2, [sp, #4]
   161e0:	adds	r1, r3, r8
   161e4:	ldr	r3, [sp, #12]
   161e8:	adc	r0, r0, #0
   161ec:	adds	r8, r1, r2
   161f0:	ldr	r2, [fp, #40]	; 0x28
   161f4:	adc	r1, r0, r6
   161f8:	adds	r9, r8, #1
   161fc:	ldr	r6, [fp, #8]
   16200:	adc	r0, r1, #0
   16204:	umull	r2, r7, ip, r2
   16208:	ldr	ip, [sp, #28]
   1620c:	ldr	r2, [sp, #8]
   16210:	adds	r2, r2, r7
   16214:	adc	r7, r3, #0
   16218:	ldr	r3, [sp, #16]
   1621c:	subs	r2, r2, r3
   16220:	ldr	r3, [fp, #16]
   16224:	ldr	r2, [sp, #20]
   16228:	sbcs	r2, r7, r2
   1622c:	mov	r2, #0
   16230:	movwcc	r2, #1
   16234:	cmp	r2, #0
   16238:	ldr	r2, [sp, #32]
   1623c:	addne	r5, r5, #1
   16240:	orrs	r2, r2, ip
   16244:	mov	r2, #1
   16248:	umlal	r2, r4, r3, r6
   1624c:	ldr	r3, [sp]
   16250:	moveq	r4, sl
   16254:	moveq	r2, r3
   16258:	ldr	r3, [sp, #36]	; 0x24
   1625c:	adds	r7, r7, r2
   16260:	adc	r6, r4, #0
   16264:	adds	r7, r7, r3
   16268:	ldr	r3, [fp, #12]
   1626c:	adc	r6, r6, r5
   16270:	subs	r2, r7, r2
   16274:	ldr	r5, [sp, #40]	; 0x28
   16278:	sbcs	r2, r6, r4
   1627c:	ldr	r4, [fp, #28]
   16280:	mov	r2, #0
   16284:	movwcc	r2, #1
   16288:	cmp	r2, #0
   1628c:	moveq	r0, r1
   16290:	ldr	r1, [fp, #24]
   16294:	moveq	r9, r8
   16298:	umull	r1, r2, r1, r3
   1629c:	subs	r1, ip, r1
   162a0:	sbcs	r1, r5, r2
   162a4:	umull	r2, r3, r4, r3
   162a8:	mov	r1, #0
   162ac:	movwcc	r1, #1
   162b0:	cmp	r1, #0
   162b4:	addne	r3, r3, #1
   162b8:	adds	r1, r2, r5
   162bc:	mov	r5, r4
   162c0:	adc	r2, r3, #0
   162c4:	adds	r1, r1, r7
   162c8:	ldr	r3, [fp, #24]
   162cc:	adcs	r2, r2, r6
   162d0:	umull	r7, r6, r4, lr
   162d4:	adcs	r9, r9, #0
   162d8:	adc	ip, r0, #0
   162dc:	ldr	r0, [sp, #48]	; 0x30
   162e0:	adds	sl, r1, r0
   162e4:	ldr	r0, [sp, #44]	; 0x2c
   162e8:	adcs	r2, r2, r0
   162ec:	umull	r4, r0, r3, lr
   162f0:	mrs	r8, CPSR
   162f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   162f8:	umlal	r7, r6, r3, r1
   162fc:	adds	r0, r7, r0
   16300:	adc	r7, r6, #0
   16304:	umull	r6, r3, r3, r1
   16308:	subs	r6, r0, r6
   1630c:	sbcs	r3, r7, r3
   16310:	umull	r6, r5, r5, r1
   16314:	mov	r3, #0
   16318:	movwcc	r3, #1
   1631c:	cmp	r3, #0
   16320:	addne	r5, r5, #1
   16324:	adds	r3, r6, r7
   16328:	adc	r5, r5, #0
   1632c:	adds	r7, sl, r4
   16330:	adcs	r6, r2, r0
   16334:	str	r7, [sp, #36]	; 0x24
   16338:	adcs	r0, r3, #0
   1633c:	str	r6, [sp, #32]
   16340:	str	r0, [fp, #-40]	; 0xffffffd8
   16344:	adc	r0, r5, #0
   16348:	str	r0, [sp, #48]	; 0x30
   1634c:	msr	CPSR_f, r8
   16350:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16354:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16358:	adcs	r5, r9, #0
   1635c:	adc	r8, ip, #0
   16360:	str	r5, [sp, #16]
   16364:	umull	lr, r0, r7, r2
   16368:	mla	r0, r7, r1, r0
   1636c:	ldr	r1, [fp, #36]	; 0x24
   16370:	mla	r0, r6, r2, r0
   16374:	ldr	r2, [fp, #32]
   16378:	ldr	r6, [fp, #40]	; 0x28
   1637c:	umull	r1, r3, lr, r1
   16380:	umlal	r1, r3, r0, r2
   16384:	ldr	r2, [fp, #32]
   16388:	umull	r2, r4, lr, r2
   1638c:	str	r2, [fp, #-44]	; 0xffffffd4
   16390:	adds	r2, r1, r4
   16394:	ldr	r1, [fp, #32]
   16398:	adc	r9, r3, #0
   1639c:	str	r2, [fp, #-48]	; 0xffffffd0
   163a0:	umull	r1, r3, r0, r1
   163a4:	subs	r1, r2, r1
   163a8:	sbcs	r1, r9, r3
   163ac:	mov	r3, #0
   163b0:	ldr	r1, [fp, #44]	; 0x2c
   163b4:	movwcc	r3, #1
   163b8:	cmp	r3, #0
   163bc:	umull	r4, sl, lr, r1
   163c0:	umull	r2, r7, r0, r1
   163c4:	ldr	r1, [fp, #36]	; 0x24
   163c8:	str	r7, [sp, #40]	; 0x28
   163cc:	str	r2, [sp, #44]	; 0x2c
   163d0:	umull	r7, r2, r0, r6
   163d4:	umlal	r4, sl, r0, r6
   163d8:	mov	r6, r8
   163dc:	str	r2, [sp, #28]
   163e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   163e4:	str	r7, [sp, #24]
   163e8:	umull	r0, ip, r0, r1
   163ec:	str	r0, [sp, #20]
   163f0:	ldr	r0, [sp, #56]	; 0x38
   163f4:	addne	ip, ip, #1
   163f8:	subs	r3, r5, r0
   163fc:	ldr	r5, [sp, #52]	; 0x34
   16400:	ldr	r0, [fp, #16]
   16404:	sbcs	r3, r8, r5
   16408:	umull	r8, r1, r0, r2
   1640c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16410:	mov	r3, #0
   16414:	movwcc	r3, #1
   16418:	subs	r7, r5, r8
   1641c:	ldr	r5, [fp, #20]
   16420:	sbcs	r1, r0, r1
   16424:	mov	r1, #0
   16428:	movwcc	r1, #1
   1642c:	umull	r8, r7, r5, r2
   16430:	ldr	r2, [sp, #20]
   16434:	ldr	r5, [sp, #36]	; 0x24
   16438:	cmp	r1, #0
   1643c:	addne	r7, r7, #1
   16440:	adds	r8, r8, r0
   16444:	adc	r7, r7, #0
   16448:	adds	r1, r8, #1
   1644c:	adc	r0, r7, #0
   16450:	cmp	r3, #0
   16454:	mov	r3, r6
   16458:	moveq	r1, r8
   1645c:	moveq	r0, r7
   16460:	adds	r1, r1, r9
   16464:	adc	r0, r0, #0
   16468:	adds	r8, r1, r2
   1646c:	adc	r1, r0, ip
   16470:	ldr	ip, [sp, #16]
   16474:	adds	r0, r8, #1
   16478:	adc	r9, r1, #0
   1647c:	adds	r2, ip, #1
   16480:	adc	r7, r6, #0
   16484:	ldr	r6, [sp, #32]
   16488:	orrs	r5, r5, r6
   1648c:	moveq	r7, r3
   16490:	ldr	r3, [fp, #40]	; 0x28
   16494:	moveq	r2, ip
   16498:	ldr	ip, [sp, #24]
   1649c:	umull	r5, r6, lr, r3
   164a0:	ldr	lr, [fp, #36]	; 0x24
   164a4:	adds	r6, r4, r6
   164a8:	adc	r5, sl, #0
   164ac:	ldr	sl, [fp, #32]
   164b0:	adds	r4, r5, r2
   164b4:	adc	r3, r7, #0
   164b8:	subs	r6, r6, ip
   164bc:	ldr	r6, [sp, #28]
   164c0:	sbcs	r6, r5, r6
   164c4:	ldr	r5, [sp, #40]	; 0x28
   164c8:	mov	r6, #0
   164cc:	movwcc	r6, #1
   164d0:	cmp	r6, #0
   164d4:	ldr	r6, [sp, #44]	; 0x2c
   164d8:	addne	r5, r5, #1
   164dc:	adds	r6, r4, r6
   164e0:	ldr	r4, [fp, #44]	; 0x2c
   164e4:	adc	r3, r3, r5
   164e8:	subs	r2, r6, r2
   164ec:	sbcs	r2, r3, r7
   164f0:	mov	r2, #0
   164f4:	movwcc	r2, #1
   164f8:	cmp	r2, #0
   164fc:	ldr	r2, [sp, #48]	; 0x30
   16500:	moveq	r9, r1
   16504:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16508:	moveq	r0, r8
   1650c:	adds	r1, r1, r6
   16510:	adcs	r3, r2, r3
   16514:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16518:	adcs	r0, r0, #0
   1651c:	adc	r7, r9, #0
   16520:	adds	r2, r1, r2
   16524:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16528:	adcs	r1, r3, r1
   1652c:	adcs	r0, r0, #0
   16530:	adc	r3, r7, #0
   16534:	subs	r7, sl, r0
   16538:	sbcs	r7, lr, r3
   1653c:	bcc	16560 <__assert_fail@plt+0x4ae0>
   16540:	ldr	r7, [fp, #40]	; 0x28
   16544:	subs	r7, r2, r7
   16548:	sbcs	r7, r1, r4
   1654c:	bcc	1658c <__assert_fail@plt+0x4b0c>
   16550:	eor	r7, r0, sl
   16554:	eor	r6, r3, lr
   16558:	orrs	r7, r7, r6
   1655c:	bne	1658c <__assert_fail@plt+0x4b0c>
   16560:	ldr	r7, [fp, #40]	; 0x28
   16564:	subs	r2, r2, r7
   16568:	sbcs	r1, r1, r4
   1656c:	mov	r4, #0
   16570:	movwcc	r4, #1
   16574:	cmp	r4, #0
   16578:	mvnne	r4, #0
   1657c:	subs	r7, r4, sl
   16580:	sbc	r6, r4, lr
   16584:	adds	r0, r7, r0
   16588:	adc	r3, r6, r3
   1658c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   16590:	stm	r7, {r0, r3}
   16594:	mov	r0, r2
   16598:	sub	sp, fp, #28
   1659c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165a0:	movw	r0, #50885	; 0xc6c5
   165a4:	movw	r1, #50776	; 0xc658
   165a8:	movw	r3, #50916	; 0xc6e4
   165ac:	movw	r2, #993	; 0x3e1
   165b0:	movt	r0, #1
   165b4:	movt	r1, #1
   165b8:	movt	r3, #1
   165bc:	bl	11a80 <__assert_fail@plt>
   165c0:	movw	r0, #51025	; 0xc751
   165c4:	movw	r1, #50776	; 0xc658
   165c8:	movw	r3, #50916	; 0xc6e4
   165cc:	movw	r2, #994	; 0x3e2
   165d0:	movt	r0, #1
   165d4:	movt	r1, #1
   165d8:	movt	r3, #1
   165dc:	bl	11a80 <__assert_fail@plt>
   165e0:	movw	r0, #51056	; 0xc770
   165e4:	movw	r1, #50776	; 0xc658
   165e8:	movw	r3, #50916	; 0xc6e4
   165ec:	movw	r2, #995	; 0x3e3
   165f0:	movt	r0, #1
   165f4:	movt	r1, #1
   165f8:	movt	r3, #1
   165fc:	bl	11a80 <__assert_fail@plt>
   16600:	push	{r4, r5, r6, sl, fp, lr}
   16604:	add	fp, sp, #16
   16608:	mov	ip, r3
   1660c:	mov	lr, r2
   16610:	ands	r2, r2, #1
   16614:	mov	r3, r1
   16618:	mov	r4, r0
   1661c:	moveq	r3, ip
   16620:	moveq	r4, lr
   16624:	moveq	ip, r1
   16628:	moveq	lr, r0
   1662c:	orr	r2, r4, r3
   16630:	cmp	r2, #0
   16634:	beq	16690 <__assert_fail@plt+0x4c10>
   16638:	lsrs	r6, ip, #1
   1663c:	rrx	r1, lr
   16640:	b	16664 <__assert_fail@plt+0x4be4>
   16644:	eor	r2, r0, r5, asr #31
   16648:	eor	r3, r5, r5, asr #31
   1664c:	and	r0, r0, r5, asr #31
   16650:	subs	r4, r2, r5, asr #31
   16654:	and	r2, r5, r5, asr #31
   16658:	sbc	r3, r3, r5, asr #31
   1665c:	adds	r1, r0, r1
   16660:	adc	r6, r2, r6
   16664:	mov	ip, r3
   16668:	mov	r2, r4
   1666c:	lsrs	r3, r3, #1
   16670:	rrx	r4, r4
   16674:	tst	r2, #1
   16678:	beq	16664 <__assert_fail@plt+0x4be4>
   1667c:	subs	r0, r4, r1
   16680:	sbc	r5, r3, r6
   16684:	orrs	r3, r0, r5
   16688:	bne	16644 <__assert_fail@plt+0x4bc4>
   1668c:	orr	lr, r2, #1
   16690:	mov	r0, lr
   16694:	mov	r1, ip
   16698:	pop	{r4, r5, r6, sl, fp, pc}
   1669c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166a0:	add	fp, sp, #28
   166a4:	sub	sp, sp, #4
   166a8:	ldr	ip, [fp, #24]
   166ac:	tst	ip, #1
   166b0:	beq	16880 <__assert_fail@plt+0x4e00>
   166b4:	add	sl, fp, #12
   166b8:	mov	r5, r3
   166bc:	ldr	r1, [fp, #28]
   166c0:	mov	lr, r2
   166c4:	ldm	sl, {r3, r9, sl}
   166c8:	ldr	r8, [fp, #8]
   166cc:	orr	r2, r8, r2
   166d0:	orr	r4, r3, r5
   166d4:	orrs	r2, r2, r4
   166d8:	beq	16710 <__assert_fail@plt+0x4c90>
   166dc:	tst	r8, #1
   166e0:	str	r0, [sp]
   166e4:	bne	16720 <__assert_fail@plt+0x4ca0>
   166e8:	lsrs	r5, r5, #1
   166ec:	rrx	r0, lr
   166f0:	lsrs	r3, r3, #1
   166f4:	rrx	r2, r8
   166f8:	orr	r3, r3, lr, lsl #31
   166fc:	tst	r8, #2
   16700:	mov	lr, r0
   16704:	mov	r8, r2
   16708:	beq	166e8 <__assert_fail@plt+0x4c68>
   1670c:	b	16728 <__assert_fail@plt+0x4ca8>
   16710:	stm	r0, {r9, sl}
   16714:	mov	r0, ip
   16718:	sub	sp, fp, #28
   1671c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16720:	mov	r2, r8
   16724:	mov	r0, lr
   16728:	orr	r6, r0, r9
   1672c:	orr	r4, r5, sl
   16730:	orrs	r6, r6, r4
   16734:	beq	1684c <__assert_fail@plt+0x4dcc>
   16738:	subs	r6, r9, r0
   1673c:	sbcs	r6, sl, r5
   16740:	bcc	16760 <__assert_fail@plt+0x4ce0>
   16744:	subs	r6, ip, r2
   16748:	sbcs	r6, r1, r3
   1674c:	bcs	167b4 <__assert_fail@plt+0x4d34>
   16750:	eor	r6, r0, r9
   16754:	eor	r4, r5, sl
   16758:	orrs	r6, r6, r4
   1675c:	bne	167b4 <__assert_fail@plt+0x4d34>
   16760:	subs	r7, r0, r9
   16764:	sbc	lr, r5, sl
   16768:	subs	r4, r7, #1
   1676c:	sbc	r5, lr, #0
   16770:	subs	r6, r2, ip
   16774:	mov	r2, #0
   16778:	sbcs	r3, r3, r1
   1677c:	movwcc	r2, #1
   16780:	cmp	r2, #0
   16784:	moveq	r4, r7
   16788:	moveq	r5, lr
   1678c:	lsrs	r5, r5, #1
   16790:	rrx	r0, r4
   16794:	lsrs	r3, r3, #1
   16798:	rrx	r2, r6
   1679c:	orr	r3, r3, r4, lsl #31
   167a0:	tst	r6, #2
   167a4:	mov	r4, r0
   167a8:	mov	r6, r2
   167ac:	beq	1678c <__assert_fail@plt+0x4d0c>
   167b0:	b	1683c <__assert_fail@plt+0x4dbc>
   167b4:	subs	r6, r2, ip
   167b8:	sbcs	r6, r3, r1
   167bc:	mov	r6, #0
   167c0:	movwcc	r6, #1
   167c4:	subs	r4, r0, r9
   167c8:	sbcs	r4, r5, sl
   167cc:	bcc	167ec <__assert_fail@plt+0x4d6c>
   167d0:	eor	lr, r0, r9
   167d4:	eor	r4, r5, sl
   167d8:	orr	r4, lr, r4
   167dc:	clz	r4, r4
   167e0:	lsr	r4, r4, #5
   167e4:	ands	r6, r6, r4
   167e8:	beq	1686c <__assert_fail@plt+0x4dec>
   167ec:	subs	lr, r9, r0
   167f0:	mov	r7, #0
   167f4:	sbc	r8, sl, r5
   167f8:	subs	r6, lr, #1
   167fc:	sbc	sl, r8, #0
   16800:	subs	r4, ip, r2
   16804:	sbcs	r1, r1, r3
   16808:	movwcc	r7, #1
   1680c:	cmp	r7, #0
   16810:	moveq	r6, lr
   16814:	moveq	sl, r8
   16818:	lsrs	sl, sl, #1
   1681c:	rrx	r9, r6
   16820:	lsrs	r1, r1, #1
   16824:	rrx	ip, r4
   16828:	orr	r1, r1, r6, lsl #31
   1682c:	tst	r4, #2
   16830:	mov	r6, r9
   16834:	mov	r4, ip
   16838:	beq	16818 <__assert_fail@plt+0x4d98>
   1683c:	orr	r7, r0, r9
   16840:	orr	r6, r5, sl
   16844:	orrs	r7, r7, r6
   16848:	bne	16738 <__assert_fail@plt+0x4cb8>
   1684c:	ldr	r0, [sp]
   16850:	mov	r7, #0
   16854:	str	r7, [r0]
   16858:	str	r7, [r0, #4]
   1685c:	mov	r0, ip
   16860:	sub	sp, fp, #28
   16864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16868:	b	16600 <__assert_fail@plt+0x4b80>
   1686c:	ldr	r1, [sp]
   16870:	mov	ip, r2
   16874:	stm	r1, {r0, r5}
   16878:	mov	r1, r3
   1687c:	b	16714 <__assert_fail@plt+0x4c94>
   16880:	movw	r0, #51256	; 0xc838
   16884:	movw	r1, #50776	; 0xc658
   16888:	movw	r3, #51263	; 0xc83f
   1688c:	mov	r2, #476	; 0x1dc
   16890:	movt	r0, #1
   16894:	movt	r1, #1
   16898:	movt	r3, #1
   1689c:	bl	11a80 <__assert_fail@plt>
   168a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168a4:	add	fp, sp, #28
   168a8:	push	{r0}		; (str r0, [sp, #-4]!)
   168ac:	ldr	ip, [fp, #20]
   168b0:	ldr	r0, [fp, #16]
   168b4:	orrs	r1, r0, ip
   168b8:	beq	16ab0 <__assert_fail@plt+0x5030>
   168bc:	ldr	r1, [fp, #12]
   168c0:	ldr	r8, [fp, #8]
   168c4:	mov	r9, r2
   168c8:	mov	sl, r3
   168cc:	orrs	r2, r2, r3
   168d0:	beq	16a94 <__assert_fail@plt+0x5014>
   168d4:	mov	r3, #0
   168d8:	mov	r4, r0
   168dc:	mov	r6, ip
   168e0:	cmp	r3, ip, lsr #24
   168e4:	bne	1690c <__assert_fail@plt+0x4e8c>
   168e8:	mov	r3, #0
   168ec:	mov	r4, r0
   168f0:	mov	r6, ip
   168f4:	lsl	r2, r6, #8
   168f8:	add	r3, r3, #8
   168fc:	orr	r6, r2, r4, lsr #24
   16900:	lsl	r4, r4, #8
   16904:	cmp	r6, #16777216	; 0x1000000
   16908:	bcc	168f4 <__assert_fail@plt+0x4e74>
   1690c:	mvn	r2, #0
   16910:	cmp	r6, #0
   16914:	blt	16938 <__assert_fail@plt+0x4eb8>
   16918:	lsl	r5, r6, #1
   1691c:	add	r3, r3, #1
   16920:	orr	r6, r5, r4, lsr #31
   16924:	lsl	r5, r4, #1
   16928:	subs	r4, r2, r4, lsl #1
   1692c:	sbcs	r4, r2, r6
   16930:	mov	r4, r5
   16934:	blt	16918 <__assert_fail@plt+0x4e98>
   16938:	mov	r6, #0
   1693c:	mov	r4, r9
   16940:	mov	r7, sl
   16944:	cmp	r6, sl, lsr #24
   16948:	bne	16970 <__assert_fail@plt+0x4ef0>
   1694c:	mov	r6, #0
   16950:	mov	r4, r9
   16954:	mov	r7, sl
   16958:	lsl	r5, r7, #8
   1695c:	add	r6, r6, #8
   16960:	orr	r7, r5, r4, lsr #24
   16964:	lsl	r4, r4, #8
   16968:	cmp	r7, #16777216	; 0x1000000
   1696c:	bcc	16958 <__assert_fail@plt+0x4ed8>
   16970:	subs	r5, r2, r4
   16974:	sbcs	r5, r2, r7
   16978:	bge	1699c <__assert_fail@plt+0x4f1c>
   1697c:	lsl	r5, r7, #1
   16980:	add	r6, r6, #1
   16984:	orr	r7, r5, r4, lsr #31
   16988:	lsl	r5, r4, #1
   1698c:	subs	r4, r2, r4, lsl #1
   16990:	sbcs	r4, r2, r7
   16994:	mov	r4, r5
   16998:	blt	1697c <__assert_fail@plt+0x4efc>
   1699c:	sub	lr, r3, r6
   169a0:	cmp	lr, #1
   169a4:	blt	16a9c <__assert_fail@plt+0x501c>
   169a8:	ldr	r7, [fp, #28]
   169ac:	rsb	r6, lr, #32
   169b0:	sub	r3, lr, #32
   169b4:	rsb	r5, lr, #64	; 0x40
   169b8:	mov	r4, r0
   169bc:	lsr	r2, r0, r6
   169c0:	cmp	r3, #0
   169c4:	orr	r2, r2, ip, lsl lr
   169c8:	lslge	r2, r0, r3
   169cc:	cmp	r6, #0
   169d0:	lsr	ip, r7, r5
   169d4:	movwge	ip, #0
   169d8:	cmp	r6, #0
   169dc:	orr	r2, ip, r2
   169e0:	ldr	ip, [fp, #24]
   169e4:	lsr	r0, ip, r5
   169e8:	rsb	r5, r5, #32
   169ec:	orr	r0, r0, r7, lsl r5
   169f0:	lsl	r5, r4, lr
   169f4:	lsrge	r0, r7, r6
   169f8:	cmp	r3, #0
   169fc:	movwge	r5, #0
   16a00:	orr	r5, r0, r5
   16a04:	lsr	r0, ip, r6
   16a08:	orr	r6, r0, r7, lsl lr
   16a0c:	lsl	r7, ip, lr
   16a10:	lslge	r6, ip, r3
   16a14:	cmp	r3, #0
   16a18:	movwge	r7, #0
   16a1c:	subs	r0, r5, r9
   16a20:	mov	r4, r5
   16a24:	sbcs	r0, r2, sl
   16a28:	bcc	16a48 <__assert_fail@plt+0x4fc8>
   16a2c:	subs	r0, r8, r7
   16a30:	sbcs	r0, r1, r6
   16a34:	bcc	16a74 <__assert_fail@plt+0x4ff4>
   16a38:	eor	r0, r9, r4
   16a3c:	eor	r5, sl, r2
   16a40:	orrs	r0, r0, r5
   16a44:	bne	16a74 <__assert_fail@plt+0x4ff4>
   16a48:	subs	r0, r9, r4
   16a4c:	mov	r3, #0
   16a50:	sbc	r5, sl, r2
   16a54:	subs	r9, r0, #1
   16a58:	sbc	sl, r5, #0
   16a5c:	subs	r8, r8, r7
   16a60:	sbcs	r1, r1, r6
   16a64:	movwcc	r3, #1
   16a68:	cmp	r3, #0
   16a6c:	moveq	r9, r0
   16a70:	moveq	sl, r5
   16a74:	lsrs	r2, r2, #1
   16a78:	rrx	r5, r4
   16a7c:	lsrs	r0, r6, #1
   16a80:	rrx	r7, r7
   16a84:	orr	r6, r0, r4, lsl #31
   16a88:	subs	lr, lr, #1
   16a8c:	bne	16a1c <__assert_fail@plt+0x4f9c>
   16a90:	b	16a9c <__assert_fail@plt+0x501c>
   16a94:	mov	r9, #0
   16a98:	mov	sl, #0
   16a9c:	ldr	r0, [sp]
   16aa0:	stm	r0, {r9, sl}
   16aa4:	mov	r0, r8
   16aa8:	sub	sp, fp, #28
   16aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ab0:	movw	r0, #51339	; 0xc88b
   16ab4:	movw	r1, #50776	; 0xc658
   16ab8:	movw	r3, #51347	; 0xc893
   16abc:	movw	r2, #411	; 0x19b
   16ac0:	movt	r0, #1
   16ac4:	movt	r1, #1
   16ac8:	movt	r3, #1
   16acc:	bl	11a80 <__assert_fail@plt>
   16ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ad4:	add	fp, sp, #28
   16ad8:	sub	sp, sp, #76	; 0x4c
   16adc:	mov	r1, #1
   16ae0:	mov	r4, r0
   16ae4:	mov	r5, #1
   16ae8:	bl	11a20 <__gmpz_cmp_ui@plt>
   16aec:	cmp	r0, #1
   16af0:	blt	16cb4 <__assert_fail@plt+0x5234>
   16af4:	movw	r1, #60793	; 0xed79
   16af8:	mov	r0, r4
   16afc:	movt	r1, #381	; 0x17d
   16b00:	bl	11a20 <__gmpz_cmp_ui@plt>
   16b04:	cmp	r0, #0
   16b08:	blt	16cec <__assert_fail@plt+0x526c>
   16b0c:	sub	sl, fp, #40	; 0x28
   16b10:	add	r9, sp, #52	; 0x34
   16b14:	add	r7, sp, #40	; 0x28
   16b18:	add	r8, sp, #28
   16b1c:	mov	r6, #0
   16b20:	mov	r0, sl
   16b24:	mov	r1, r9
   16b28:	mov	r2, r7
   16b2c:	mov	r3, r8
   16b30:	str	r6, [sp]
   16b34:	bl	1178c <__gmpz_inits@plt>
   16b38:	mov	r0, r7
   16b3c:	mov	r1, r4
   16b40:	mov	r2, #1
   16b44:	bl	116cc <__gmpz_sub_ui@plt>
   16b48:	mov	r0, r7
   16b4c:	mov	r1, #0
   16b50:	bl	11690 <__gmpz_scan1@plt>
   16b54:	mov	r5, r0
   16b58:	mov	r0, sl
   16b5c:	mov	r1, r7
   16b60:	mov	r2, r5
   16b64:	bl	11948 <__gmpz_tdiv_q_2exp@plt>
   16b68:	mov	r0, r9
   16b6c:	mov	r1, #2
   16b70:	bl	116fc <__gmpz_set_ui@plt>
   16b74:	mov	r0, r4
   16b78:	mov	r1, r7
   16b7c:	mov	r2, r9
   16b80:	mov	r3, r8
   16b84:	str	sl, [sp]
   16b88:	str	r5, [sp, #12]
   16b8c:	str	r5, [sp, #4]
   16b90:	bl	17234 <__assert_fail@plt+0x57b4>
   16b94:	cmp	r0, #0
   16b98:	mov	r5, #0
   16b9c:	beq	16cd4 <__assert_fail@plt+0x5254>
   16ba0:	add	r5, sp, #28
   16ba4:	add	r6, sp, #40	; 0x28
   16ba8:	mov	r0, r5
   16bac:	mov	r1, r6
   16bb0:	bl	11798 <__gmpz_set@plt>
   16bb4:	add	r1, sp, #16
   16bb8:	mov	r0, r5
   16bbc:	bl	124a4 <__assert_fail@plt+0xa24>
   16bc0:	mov	r8, #0
   16bc4:	add	r7, sp, #52	; 0x34
   16bc8:	ldr	r0, [sp, #24]
   16bcc:	cmp	r0, #0
   16bd0:	beq	16cbc <__assert_fail@plt+0x523c>
   16bd4:	mov	sl, #1
   16bd8:	mov	r9, #0
   16bdc:	ldr	r0, [sp, #16]
   16be0:	mov	r1, r6
   16be4:	add	r2, r0, r9
   16be8:	mov	r0, r5
   16bec:	bl	11780 <__gmpz_divexact@plt>
   16bf0:	mov	r0, r5
   16bf4:	mov	r1, r7
   16bf8:	mov	r2, r5
   16bfc:	mov	r3, r4
   16c00:	bl	11768 <__gmpz_powm@plt>
   16c04:	mov	r0, r5
   16c08:	mov	r1, #1
   16c0c:	bl	11a20 <__gmpz_cmp_ui@plt>
   16c10:	cmp	r0, #0
   16c14:	beq	16c30 <__assert_fail@plt+0x51b0>
   16c18:	ldr	r2, [sp, #24]
   16c1c:	add	r1, sl, #1
   16c20:	add	r9, r9, #12
   16c24:	cmp	sl, r2
   16c28:	mov	sl, r1
   16c2c:	bcc	16bdc <__assert_fail@plt+0x515c>
   16c30:	cmp	r0, #0
   16c34:	bne	16cbc <__assert_fail@plt+0x523c>
   16c38:	movw	r0, #62448	; 0xf3f0
   16c3c:	mov	r1, r7
   16c40:	movt	r0, #1
   16c44:	ldrb	r2, [r0, r8]
   16c48:	mov	r0, r7
   16c4c:	bl	11894 <__gmpz_add_ui@plt>
   16c50:	sub	r0, fp, #40	; 0x28
   16c54:	mov	r1, r6
   16c58:	mov	r2, r7
   16c5c:	mov	r3, r5
   16c60:	str	r0, [sp]
   16c64:	ldr	r0, [sp, #12]
   16c68:	str	r0, [sp, #4]
   16c6c:	mov	r0, r4
   16c70:	bl	17234 <__assert_fail@plt+0x57b4>
   16c74:	cmp	r0, #0
   16c78:	beq	16cc4 <__assert_fail@plt+0x5244>
   16c7c:	add	r8, r8, #1
   16c80:	lsr	r0, r8, #2
   16c84:	cmp	r0, #166	; 0xa6
   16c88:	bls	16bc8 <__assert_fail@plt+0x5148>
   16c8c:	movw	r1, #50789	; 0xc665
   16c90:	mov	r0, #0
   16c94:	mov	r2, #5
   16c98:	movt	r1, #1
   16c9c:	bl	1175c <dcgettext@plt>
   16ca0:	mov	r2, r0
   16ca4:	mov	r0, #0
   16ca8:	mov	r1, #0
   16cac:	bl	1184c <error@plt>
   16cb0:	bl	11a68 <abort@plt>
   16cb4:	mov	r5, #0
   16cb8:	b	16cec <__assert_fail@plt+0x526c>
   16cbc:	mov	r5, #1
   16cc0:	b	16cc8 <__assert_fail@plt+0x5248>
   16cc4:	mov	r5, #0
   16cc8:	add	r0, sp, #16
   16ccc:	bl	12630 <__assert_fail@plt+0xbb0>
   16cd0:	mov	r6, #0
   16cd4:	sub	r0, fp, #40	; 0x28
   16cd8:	add	r1, sp, #52	; 0x34
   16cdc:	add	r2, sp, #40	; 0x28
   16ce0:	add	r3, sp, #28
   16ce4:	str	r6, [sp]
   16ce8:	bl	116d8 <__gmpz_clears@plt>
   16cec:	mov	r0, r5
   16cf0:	sub	sp, fp, #28
   16cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cfc:	add	fp, sp, #28
   16d00:	sub	sp, sp, #20
   16d04:	mov	r5, r0
   16d08:	ldr	r0, [r0]
   16d0c:	mov	sl, r1
   16d10:	ldr	r4, [r5, #8]
   16d14:	ldr	r6, [r5, #4]
   16d18:	sub	r8, r4, #1
   16d1c:	cmp	r8, #0
   16d20:	mov	r9, r8
   16d24:	blt	16d78 <__assert_fail@plt+0x52f8>
   16d28:	add	r1, r8, r8, lsl #1
   16d2c:	str	r6, [sp, #16]
   16d30:	mov	r7, r4
   16d34:	str	r0, [sp, #12]
   16d38:	add	r6, r0, r1, lsl #2
   16d3c:	mov	r0, r6
   16d40:	mov	r1, sl
   16d44:	bl	119cc <__gmpz_cmp@plt>
   16d48:	cmp	r0, #1
   16d4c:	blt	16d64 <__assert_fail@plt+0x52e4>
   16d50:	sub	r7, r7, #1
   16d54:	sub	r6, r6, #12
   16d58:	cmp	r7, #0
   16d5c:	bgt	16d3c <__assert_fail@plt+0x52bc>
   16d60:	b	16d6c <__assert_fail@plt+0x52ec>
   16d64:	cmp	r0, #0
   16d68:	beq	16e38 <__assert_fail@plt+0x53b8>
   16d6c:	ldr	r6, [sp, #16]
   16d70:	ldr	r0, [sp, #12]
   16d74:	sub	r9, r7, #1
   16d78:	str	r5, [sp, #12]
   16d7c:	add	r5, r4, r4, lsl #1
   16d80:	mov	r1, #12
   16d84:	add	r1, r1, r5, lsl #2
   16d88:	bl	1a060 <__assert_fail@plt+0x85e0>
   16d8c:	mov	r7, r0
   16d90:	add	r0, r4, #1
   16d94:	str	r0, [sp, #8]
   16d98:	lsl	r1, r0, #2
   16d9c:	mov	r0, r6
   16da0:	bl	1a060 <__assert_fail@plt+0x85e0>
   16da4:	add	r6, r7, r5, lsl #2
   16da8:	str	r0, [sp, #16]
   16dac:	str	r7, [sp, #4]
   16db0:	mov	r0, r6
   16db4:	bl	11a2c <__gmpz_init@plt>
   16db8:	cmp	r8, r9
   16dbc:	ble	16df8 <__assert_fail@plt+0x5378>
   16dc0:	ldr	r0, [sp, #16]
   16dc4:	add	r4, r0, r4, lsl #2
   16dc8:	mov	r5, r4
   16dcc:	sub	r7, r6, #12
   16dd0:	mov	r0, r6
   16dd4:	mov	r1, r7
   16dd8:	bl	11798 <__gmpz_set@plt>
   16ddc:	ldr	r0, [r5, #-4]!
   16de0:	sub	r8, r8, #1
   16de4:	mov	r6, r7
   16de8:	cmp	r8, r9
   16dec:	str	r0, [r4]
   16df0:	mov	r4, r5
   16df4:	bgt	16dcc <__assert_fail@plt+0x534c>
   16df8:	ldr	r5, [sp, #4]
   16dfc:	add	r4, r9, #1
   16e00:	mov	r1, sl
   16e04:	add	r0, r4, r4, lsl #1
   16e08:	add	r0, r5, r0, lsl #2
   16e0c:	bl	11798 <__gmpz_set@plt>
   16e10:	ldr	r1, [sp, #16]
   16e14:	mov	r0, #1
   16e18:	str	r0, [r1, r4, lsl #2]
   16e1c:	ldr	r0, [sp, #12]
   16e20:	str	r5, [r0]
   16e24:	str	r1, [r0, #4]
   16e28:	ldr	r1, [sp, #8]
   16e2c:	str	r1, [r0, #8]
   16e30:	sub	sp, fp, #28
   16e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e38:	ldr	r0, [sp, #16]
   16e3c:	add	r0, r0, r7, lsl #2
   16e40:	ldr	r1, [r0, #-4]
   16e44:	add	r1, r1, #1
   16e48:	str	r1, [r0, #-4]
   16e4c:	b	16e30 <__assert_fail@plt+0x53b0>
   16e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e54:	add	fp, sp, #28
   16e58:	sub	sp, sp, #108	; 0x6c
   16e5c:	mov	r8, r0
   16e60:	movw	r0, #492	; 0x1ec
   16e64:	mov	r9, r1
   16e68:	str	r2, [sp, #20]
   16e6c:	movt	r0, #3
   16e70:	ldrb	r0, [r0]
   16e74:	cmp	r0, #1
   16e78:	bne	16e9c <__assert_fail@plt+0x541c>
   16e7c:	movw	r0, #472	; 0x1d8
   16e80:	movw	r2, #51457	; 0xc901
   16e84:	mov	r1, #1
   16e88:	mov	r3, r9
   16e8c:	movt	r0, #3
   16e90:	movt	r2, #1
   16e94:	ldr	r0, [r0]
   16e98:	bl	11978 <__fprintf_chk@plt>
   16e9c:	add	r0, sp, #48	; 0x30
   16ea0:	add	r1, sp, #36	; 0x24
   16ea4:	mov	r2, #0
   16ea8:	mov	r6, #0
   16eac:	bl	1178c <__gmpz_inits@plt>
   16eb0:	sub	r0, fp, #64	; 0x40
   16eb4:	mov	r1, #2
   16eb8:	bl	11888 <__gmpz_init_set_si@plt>
   16ebc:	sub	r0, fp, #40	; 0x28
   16ec0:	mov	r1, #2
   16ec4:	bl	11888 <__gmpz_init_set_si@plt>
   16ec8:	sub	r0, fp, #52	; 0x34
   16ecc:	mov	r1, #2
   16ed0:	bl	11888 <__gmpz_init_set_si@plt>
   16ed4:	add	r0, sp, #60	; 0x3c
   16ed8:	mov	r1, #1
   16edc:	mov	r4, #1
   16ee0:	bl	119c0 <__gmpz_init_set_ui@plt>
   16ee4:	mov	r0, r8
   16ee8:	mov	r1, #1
   16eec:	bl	11a20 <__gmpz_cmp_ui@plt>
   16ef0:	cmp	r0, #0
   16ef4:	beq	171c8 <__assert_fail@plt+0x5748>
   16ef8:	add	r0, r9, #1
   16efc:	add	r7, sp, #48	; 0x30
   16f00:	sub	r5, fp, #40	; 0x28
   16f04:	str	r0, [sp, #16]
   16f08:	mov	r0, #1
   16f0c:	str	r0, [sp, #24]
   16f10:	mov	r0, #0
   16f14:	str	r0, [sp, #28]
   16f18:	mov	r0, r7
   16f1c:	mov	r1, r5
   16f20:	mov	r2, r5
   16f24:	str	r6, [sp, #32]
   16f28:	bl	117b0 <__gmpz_mul@plt>
   16f2c:	mov	r0, r5
   16f30:	mov	r1, r7
   16f34:	mov	r2, r8
   16f38:	bl	119b4 <__gmpz_mod@plt>
   16f3c:	mov	r0, r5
   16f40:	mov	r1, r5
   16f44:	mov	r2, r9
   16f48:	bl	11894 <__gmpz_add_ui@plt>
   16f4c:	mov	r0, r7
   16f50:	sub	r1, fp, #52	; 0x34
   16f54:	mov	r2, r5
   16f58:	bl	1172c <__gmpz_sub@plt>
   16f5c:	add	r6, sp, #36	; 0x24
   16f60:	mov	sl, r5
   16f64:	add	r5, sp, #60	; 0x3c
   16f68:	mov	r2, r7
   16f6c:	mov	r0, r6
   16f70:	mov	r1, r5
   16f74:	bl	117b0 <__gmpz_mul@plt>
   16f78:	mov	r0, r5
   16f7c:	mov	r1, r6
   16f80:	mov	r2, r8
   16f84:	mov	r5, sl
   16f88:	bl	119b4 <__gmpz_mod@plt>
   16f8c:	and	r0, r4, #31
   16f90:	teq	r0, #1
   16f94:	bne	16fcc <__assert_fail@plt+0x554c>
   16f98:	mov	r0, r7
   16f9c:	add	r1, sp, #60	; 0x3c
   16fa0:	mov	r2, r8
   16fa4:	bl	119fc <__gmpz_gcd@plt>
   16fa8:	mov	r0, r7
   16fac:	mov	r1, #1
   16fb0:	bl	11a20 <__gmpz_cmp_ui@plt>
   16fb4:	cmp	r0, #0
   16fb8:	sub	r6, fp, #64	; 0x40
   16fbc:	bne	1708c <__assert_fail@plt+0x560c>
   16fc0:	mov	r0, r6
   16fc4:	mov	r1, r5
   16fc8:	bl	11798 <__gmpz_set@plt>
   16fcc:	ldr	r6, [sp, #32]
   16fd0:	subs	r4, r4, #1
   16fd4:	sbc	r6, r6, #0
   16fd8:	orrs	r0, r4, r6
   16fdc:	bne	16f18 <__assert_fail@plt+0x5498>
   16fe0:	sub	r0, fp, #52	; 0x34
   16fe4:	mov	r1, r5
   16fe8:	bl	11798 <__gmpz_set@plt>
   16fec:	ldr	r0, [sp, #28]
   16ff0:	ldr	r6, [sp, #24]
   16ff4:	lsl	r1, r0, #1
   16ff8:	str	r0, [sp, #28]
   16ffc:	orrs	r0, r6, r0
   17000:	str	r1, [sp, #32]
   17004:	beq	17058 <__assert_fail@plt+0x55d8>
   17008:	mov	r4, #0
   1700c:	mov	sl, #0
   17010:	mov	r0, r7
   17014:	mov	r1, r5
   17018:	mov	r2, r5
   1701c:	bl	117b0 <__gmpz_mul@plt>
   17020:	mov	r0, r5
   17024:	mov	r1, r7
   17028:	mov	r2, r8
   1702c:	bl	119b4 <__gmpz_mod@plt>
   17030:	mov	r0, r5
   17034:	mov	r1, r5
   17038:	mov	r2, r9
   1703c:	bl	11894 <__gmpz_add_ui@plt>
   17040:	adds	r4, r4, #1
   17044:	adc	sl, sl, #0
   17048:	subs	r0, r4, r6
   1704c:	ldr	r0, [sp, #28]
   17050:	sbcs	r0, sl, r0
   17054:	bcc	17010 <__assert_fail@plt+0x5590>
   17058:	ldr	r0, [sp, #32]
   1705c:	mov	r1, r5
   17060:	orr	sl, r0, r6, lsr #31
   17064:	lsl	r0, r6, #1
   17068:	str	r0, [sp, #32]
   1706c:	sub	r0, fp, #64	; 0x40
   17070:	bl	11798 <__gmpz_set@plt>
   17074:	ldr	r0, [sp, #32]
   17078:	mov	r4, r6
   1707c:	ldr	r6, [sp, #28]
   17080:	str	sl, [sp, #28]
   17084:	str	r0, [sp, #24]
   17088:	b	16f18 <__assert_fail@plt+0x5498>
   1708c:	mov	r0, r7
   17090:	mov	r1, r6
   17094:	mov	r2, r6
   17098:	bl	117b0 <__gmpz_mul@plt>
   1709c:	mov	r0, r6
   170a0:	mov	r1, r7
   170a4:	mov	r2, r8
   170a8:	bl	119b4 <__gmpz_mod@plt>
   170ac:	mov	r0, r6
   170b0:	mov	r1, r6
   170b4:	mov	r2, r9
   170b8:	bl	11894 <__gmpz_add_ui@plt>
   170bc:	mov	r0, r7
   170c0:	sub	r1, fp, #52	; 0x34
   170c4:	mov	r2, r6
   170c8:	bl	1172c <__gmpz_sub@plt>
   170cc:	mov	r0, r7
   170d0:	mov	r1, r7
   170d4:	mov	r2, r8
   170d8:	bl	119fc <__gmpz_gcd@plt>
   170dc:	mov	r0, r7
   170e0:	mov	r1, #1
   170e4:	bl	11a20 <__gmpz_cmp_ui@plt>
   170e8:	cmp	r0, #0
   170ec:	beq	1708c <__assert_fail@plt+0x560c>
   170f0:	mov	r0, r8
   170f4:	mov	r1, r8
   170f8:	mov	r2, r7
   170fc:	bl	11780 <__gmpz_divexact@plt>
   17100:	mov	r0, r7
   17104:	bl	16ad0 <__assert_fail@plt+0x5050>
   17108:	cmp	r0, #0
   1710c:	beq	17120 <__assert_fail@plt+0x56a0>
   17110:	ldr	r0, [sp, #20]
   17114:	mov	r1, r7
   17118:	bl	16cf8 <__assert_fail@plt+0x5278>
   1711c:	b	17160 <__assert_fail@plt+0x56e0>
   17120:	movw	r0, #492	; 0x1ec
   17124:	movt	r0, #3
   17128:	ldrb	r0, [r0]
   1712c:	cmp	r0, #1
   17130:	bne	17150 <__assert_fail@plt+0x56d0>
   17134:	movw	r0, #472	; 0x1d8
   17138:	movw	r2, #51478	; 0xc916
   1713c:	mov	r1, #1
   17140:	movt	r0, #3
   17144:	movt	r2, #1
   17148:	ldr	r0, [r0]
   1714c:	bl	11978 <__fprintf_chk@plt>
   17150:	ldr	r1, [sp, #16]
   17154:	ldr	r2, [sp, #20]
   17158:	mov	r0, r7
   1715c:	bl	16e50 <__assert_fail@plt+0x53d0>
   17160:	mov	r0, r8
   17164:	bl	16ad0 <__assert_fail@plt+0x5050>
   17168:	cmp	r0, #0
   1716c:	bne	171bc <__assert_fail@plt+0x573c>
   17170:	mov	r0, r5
   17174:	mov	r1, r5
   17178:	mov	r2, r8
   1717c:	bl	119b4 <__gmpz_mod@plt>
   17180:	sub	r0, fp, #52	; 0x34
   17184:	mov	r2, r8
   17188:	mov	r1, r0
   1718c:	bl	119b4 <__gmpz_mod@plt>
   17190:	mov	r0, r6
   17194:	mov	r1, r6
   17198:	mov	r2, r8
   1719c:	bl	119b4 <__gmpz_mod@plt>
   171a0:	mov	r0, r8
   171a4:	mov	r1, #1
   171a8:	bl	11a20 <__gmpz_cmp_ui@plt>
   171ac:	ldr	r6, [sp, #32]
   171b0:	cmp	r0, #0
   171b4:	bne	16f18 <__assert_fail@plt+0x5498>
   171b8:	b	171c8 <__assert_fail@plt+0x5748>
   171bc:	ldr	r0, [sp, #20]
   171c0:	mov	r1, r8
   171c4:	bl	16cf8 <__assert_fail@plt+0x5278>
   171c8:	sub	r1, fp, #40	; 0x28
   171cc:	mov	r0, #0
   171d0:	add	r2, sp, #48	; 0x30
   171d4:	sub	r3, fp, #52	; 0x34
   171d8:	str	r1, [sp]
   171dc:	sub	r1, fp, #64	; 0x40
   171e0:	str	r0, [sp, #8]
   171e4:	add	r0, sp, #60	; 0x3c
   171e8:	str	r1, [sp, #4]
   171ec:	add	r1, sp, #36	; 0x24
   171f0:	bl	116d8 <__gmpz_clears@plt>
   171f4:	sub	sp, fp, #28
   171f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171fc:	push	{r4, r5, fp, lr}
   17200:	add	fp, sp, #8
   17204:	sub	sp, sp, #16
   17208:	add	r5, sp, #4
   1720c:	mov	r4, r0
   17210:	mov	r0, r5
   17214:	bl	119c0 <__gmpz_init_set_ui@plt>
   17218:	mov	r0, r4
   1721c:	mov	r1, r5
   17220:	bl	16cf8 <__assert_fail@plt+0x5278>
   17224:	mov	r0, r5
   17228:	bl	11900 <__gmpz_clear@plt>
   1722c:	sub	sp, fp, #8
   17230:	pop	{r4, r5, fp, pc}
   17234:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17238:	add	fp, sp, #24
   1723c:	mov	r4, r3
   17240:	mov	r3, r2
   17244:	ldr	r2, [fp, #8]
   17248:	mov	r7, r0
   1724c:	mov	r6, r1
   17250:	mov	r1, r3
   17254:	mov	r0, r4
   17258:	mov	r3, r7
   1725c:	bl	11768 <__gmpz_powm@plt>
   17260:	mov	r0, r4
   17264:	mov	r1, #1
   17268:	mov	r8, #1
   1726c:	bl	11a20 <__gmpz_cmp_ui@plt>
   17270:	cmp	r0, #0
   17274:	beq	172f4 <__assert_fail@plt+0x5874>
   17278:	mov	r0, r4
   1727c:	mov	r1, r6
   17280:	bl	119cc <__gmpz_cmp@plt>
   17284:	cmp	r0, #0
   17288:	beq	172f4 <__assert_fail@plt+0x5874>
   1728c:	ldr	r9, [fp, #12]
   17290:	mov	r8, #0
   17294:	cmp	r9, #2
   17298:	bcc	172f4 <__assert_fail@plt+0x5874>
   1729c:	mov	r5, #2
   172a0:	mov	r0, r4
   172a4:	mov	r1, r4
   172a8:	mov	r2, #2
   172ac:	mov	r3, r7
   172b0:	bl	11a38 <__gmpz_powm_ui@plt>
   172b4:	mov	r0, r4
   172b8:	mov	r1, r6
   172bc:	bl	119cc <__gmpz_cmp@plt>
   172c0:	cmp	r0, #0
   172c4:	beq	172f0 <__assert_fail@plt+0x5870>
   172c8:	mov	r0, r4
   172cc:	mov	r1, #1
   172d0:	bl	11a20 <__gmpz_cmp_ui@plt>
   172d4:	cmp	r0, #0
   172d8:	beq	172f4 <__assert_fail@plt+0x5874>
   172dc:	add	r0, r5, #1
   172e0:	cmp	r5, r9
   172e4:	mov	r5, r0
   172e8:	bcc	172a0 <__assert_fail@plt+0x5820>
   172ec:	b	172f4 <__assert_fail@plt+0x5874>
   172f0:	mov	r8, #1
   172f4:	mov	r0, r8
   172f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172fc:	movw	r1, #504	; 0x1f8
   17300:	movt	r1, #3
   17304:	str	r0, [r1]
   17308:	bx	lr
   1730c:	movw	r1, #508	; 0x1fc
   17310:	movt	r1, #3
   17314:	strb	r0, [r1]
   17318:	bx	lr
   1731c:	push	{r4, r5, r6, sl, fp, lr}
   17320:	add	fp, sp, #16
   17324:	sub	sp, sp, #8
   17328:	movw	r0, #484	; 0x1e4
   1732c:	movt	r0, #3
   17330:	ldr	r0, [r0]
   17334:	bl	1a680 <__assert_fail@plt+0x8c00>
   17338:	cmp	r0, #0
   1733c:	beq	17364 <__assert_fail@plt+0x58e4>
   17340:	movw	r0, #508	; 0x1fc
   17344:	movt	r0, #3
   17348:	ldrb	r0, [r0]
   1734c:	cmp	r0, #0
   17350:	beq	17384 <__assert_fail@plt+0x5904>
   17354:	bl	1190c <__errno_location@plt>
   17358:	ldr	r0, [r0]
   1735c:	cmp	r0, #32
   17360:	bne	17384 <__assert_fail@plt+0x5904>
   17364:	movw	r0, #472	; 0x1d8
   17368:	movt	r0, #3
   1736c:	ldr	r0, [r0]
   17370:	bl	1a680 <__assert_fail@plt+0x8c00>
   17374:	cmp	r0, #0
   17378:	subeq	sp, fp, #16
   1737c:	popeq	{r4, r5, r6, sl, fp, pc}
   17380:	b	173f4 <__assert_fail@plt+0x5974>
   17384:	movw	r1, #50628	; 0xc5c4
   17388:	mov	r0, #0
   1738c:	mov	r2, #5
   17390:	movt	r1, #1
   17394:	bl	1175c <dcgettext@plt>
   17398:	mov	r4, r0
   1739c:	movw	r0, #504	; 0x1f8
   173a0:	movt	r0, #3
   173a4:	ldr	r6, [r0]
   173a8:	bl	1190c <__errno_location@plt>
   173ac:	ldr	r5, [r0]
   173b0:	cmp	r6, #0
   173b4:	bne	173d0 <__assert_fail@plt+0x5950>
   173b8:	movw	r2, #63945	; 0xf9c9
   173bc:	mov	r0, #0
   173c0:	mov	r1, r5
   173c4:	mov	r3, r4
   173c8:	movt	r2, #1
   173cc:	b	173f0 <__assert_fail@plt+0x5970>
   173d0:	mov	r0, r6
   173d4:	bl	19248 <__assert_fail@plt+0x77c8>
   173d8:	movw	r2, #63941	; 0xf9c5
   173dc:	mov	r3, r0
   173e0:	str	r4, [sp]
   173e4:	mov	r0, #0
   173e8:	mov	r1, r5
   173ec:	movt	r2, #1
   173f0:	bl	1184c <error@plt>
   173f4:	movw	r0, #384	; 0x180
   173f8:	movt	r0, #3
   173fc:	ldr	r0, [r0]
   17400:	bl	11714 <_exit@plt>
   17404:	push	{r4, r5, r6, sl, fp, lr}
   17408:	add	fp, sp, #16
   1740c:	mov	r4, r0
   17410:	bl	1190c <__errno_location@plt>
   17414:	ldr	r6, [r0]
   17418:	mov	r5, r0
   1741c:	mov	r0, r4
   17420:	bl	11708 <free@plt>
   17424:	str	r6, [r5]
   17428:	pop	{r4, r5, r6, sl, fp, pc}
   1742c:	push	{r4, r5, r6, r7, fp, lr}
   17430:	add	fp, sp, #16
   17434:	cmp	r2, #0
   17438:	beq	17480 <__assert_fail@plt+0x5a00>
   1743c:	mov	r5, r2
   17440:	mov	r6, r1
   17444:	mov	r7, r0
   17448:	mov	r4, #0
   1744c:	mov	r0, r7
   17450:	mov	r1, r6
   17454:	mov	r2, r5
   17458:	bl	19830 <__assert_fail@plt+0x7db0>
   1745c:	cmn	r0, #1
   17460:	beq	17494 <__assert_fail@plt+0x5a14>
   17464:	cmp	r0, #0
   17468:	beq	17488 <__assert_fail@plt+0x5a08>
   1746c:	subs	r5, r5, r0
   17470:	add	r6, r6, r0
   17474:	add	r4, r0, r4
   17478:	bne	1744c <__assert_fail@plt+0x59cc>
   1747c:	b	17494 <__assert_fail@plt+0x5a14>
   17480:	mov	r4, #0
   17484:	b	17494 <__assert_fail@plt+0x5a14>
   17488:	bl	1190c <__errno_location@plt>
   1748c:	mov	r1, #28
   17490:	str	r1, [r0]
   17494:	mov	r0, r4
   17498:	pop	{r4, r5, r6, r7, fp, pc}
   1749c:	push	{r4, r5, r6, sl, fp, lr}
   174a0:	add	fp, sp, #16
   174a4:	mov	r5, r0
   174a8:	mov	r0, #0
   174ac:	mov	r4, r1
   174b0:	add	r6, r2, #19
   174b4:	strb	r0, [r2, #20]
   174b8:	mov	r0, r5
   174bc:	mov	r1, r4
   174c0:	mov	r2, #10
   174c4:	mov	r3, #0
   174c8:	bl	1c0dc <__assert_fail@plt+0xa65c>
   174cc:	add	r2, r0, r0, lsl #2
   174d0:	sub	r2, r5, r2, lsl #1
   174d4:	orr	r2, r2, #48	; 0x30
   174d8:	strb	r2, [r6], #-1
   174dc:	rsbs	r2, r5, #9
   174e0:	mov	r5, r0
   174e4:	rscs	r2, r4, #0
   174e8:	mov	r4, r1
   174ec:	bcc	174b8 <__assert_fail@plt+0x5a38>
   174f0:	add	r0, r6, #1
   174f4:	pop	{r4, r5, r6, sl, fp, pc}
   174f8:	push	{r4, r5, fp, lr}
   174fc:	add	fp, sp, #8
   17500:	cmp	r0, #0
   17504:	beq	17598 <__assert_fail@plt+0x5b18>
   17508:	mov	r1, #47	; 0x2f
   1750c:	mov	r4, r0
   17510:	bl	119e4 <strrchr@plt>
   17514:	cmp	r0, #0
   17518:	mov	r5, r4
   1751c:	addne	r5, r0, #1
   17520:	sub	r0, r5, r4
   17524:	cmp	r0, #7
   17528:	blt	1757c <__assert_fail@plt+0x5afc>
   1752c:	movw	r1, #64004	; 0xfa04
   17530:	sub	r0, r5, #7
   17534:	mov	r2, #7
   17538:	movt	r1, #1
   1753c:	bl	11a5c <strncmp@plt>
   17540:	cmp	r0, #0
   17544:	bne	1757c <__assert_fail@plt+0x5afc>
   17548:	movw	r1, #64012	; 0xfa0c
   1754c:	mov	r0, r5
   17550:	mov	r2, #3
   17554:	movt	r1, #1
   17558:	bl	11a5c <strncmp@plt>
   1755c:	cmp	r0, #0
   17560:	beq	1756c <__assert_fail@plt+0x5aec>
   17564:	mov	r4, r5
   17568:	b	1757c <__assert_fail@plt+0x5afc>
   1756c:	movw	r0, #456	; 0x1c8
   17570:	add	r4, r5, #3
   17574:	movt	r0, #3
   17578:	str	r4, [r0]
   1757c:	movw	r0, #460	; 0x1cc
   17580:	movt	r0, #3
   17584:	str	r4, [r0]
   17588:	movw	r0, #512	; 0x200
   1758c:	movt	r0, #3
   17590:	str	r4, [r0]
   17594:	pop	{r4, r5, fp, pc}
   17598:	movw	r0, #472	; 0x1d8
   1759c:	movt	r0, #3
   175a0:	ldr	r1, [r0]
   175a4:	movw	r0, #63948	; 0xf9cc
   175a8:	movt	r0, #1
   175ac:	bl	11a50 <fputs@plt>
   175b0:	bl	11a68 <abort@plt>
   175b4:	push	{r4, r5, r6, sl, fp, lr}
   175b8:	add	fp, sp, #16
   175bc:	sub	sp, sp, #8
   175c0:	mov	r4, r0
   175c4:	mov	r0, #0
   175c8:	mov	r2, #5
   175cc:	mov	r1, r4
   175d0:	bl	1175c <dcgettext@plt>
   175d4:	cmp	r0, r4
   175d8:	beq	175f8 <__assert_fail@plt+0x5b78>
   175dc:	mov	r1, r4
   175e0:	mov	r5, r0
   175e4:	bl	1764c <__assert_fail@plt+0x5bcc>
   175e8:	cmp	r0, #0
   175ec:	beq	17600 <__assert_fail@plt+0x5b80>
   175f0:	mov	r6, r5
   175f4:	b	17640 <__assert_fail@plt+0x5bc0>
   175f8:	mov	r6, r4
   175fc:	b	17640 <__assert_fail@plt+0x5bc0>
   17600:	mov	r0, r5
   17604:	bl	118dc <strlen@plt>
   17608:	mov	r6, r0
   1760c:	mov	r0, r4
   17610:	bl	118dc <strlen@plt>
   17614:	add	r0, r6, r0
   17618:	add	r0, r0, #4
   1761c:	bl	1a018 <__assert_fail@plt+0x8598>
   17620:	movw	r3, #64016	; 0xfa10
   17624:	mov	r1, #1
   17628:	mvn	r2, #0
   1762c:	mov	r6, r0
   17630:	str	r5, [sp]
   17634:	str	r4, [sp, #4]
   17638:	movt	r3, #1
   1763c:	bl	11924 <__sprintf_chk@plt>
   17640:	mov	r0, r6
   17644:	sub	sp, fp, #16
   17648:	pop	{r4, r5, r6, sl, fp, pc}
   1764c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17650:	add	fp, sp, #28
   17654:	sub	sp, sp, #124	; 0x7c
   17658:	mov	r4, r0
   1765c:	mov	r0, r1
   17660:	mov	r1, #2
   17664:	bl	19894 <__assert_fail@plt+0x7e14>
   17668:	mov	sl, r0
   1766c:	ldrb	r0, [r4]
   17670:	cmp	r0, #0
   17674:	beq	178dc <__assert_fail@plt+0x5e5c>
   17678:	add	r5, sp, #12
   1767c:	add	r6, sp, #68	; 0x44
   17680:	mov	r9, #0
   17684:	add	r8, r6, #4
   17688:	add	r0, r5, #4
   1768c:	str	r0, [sp, #4]
   17690:	str	r8, [sp]
   17694:	mov	r0, r4
   17698:	mov	r1, sl
   1769c:	bl	1ab8c <__assert_fail@plt+0x910c>
   176a0:	cmp	r0, #0
   176a4:	beq	178dc <__assert_fail@plt+0x5e5c>
   176a8:	mov	r7, r0
   176ac:	bl	1181c <__ctype_get_mb_cur_max@plt>
   176b0:	cmp	r0, #2
   176b4:	bcc	17850 <__assert_fail@plt+0x5dd0>
   176b8:	mov	r0, #1
   176bc:	cmp	r4, r7
   176c0:	strb	r9, [sp, #68]	; 0x44
   176c4:	str	r4, [sp, #84]	; 0x54
   176c8:	str	r9, [r8]
   176cc:	str	r9, [r8, #4]
   176d0:	strb	r9, [sp, #80]	; 0x50
   176d4:	str	r0, [sp, #8]
   176d8:	bcs	17730 <__assert_fail@plt+0x5cb0>
   176dc:	mov	r0, r6
   176e0:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   176e4:	ldrb	r1, [sp, #92]	; 0x5c
   176e8:	ldr	r0, [sp, #96]	; 0x60
   176ec:	cmp	r1, #0
   176f0:	beq	176fc <__assert_fail@plt+0x5c7c>
   176f4:	cmp	r0, #0
   176f8:	beq	17900 <__assert_fail@plt+0x5e80>
   176fc:	strb	r9, [sp, #80]	; 0x50
   17700:	ldr	r2, [sp, #84]	; 0x54
   17704:	ldr	r3, [sp, #88]	; 0x58
   17708:	add	r2, r2, r3
   1770c:	cmp	r2, r7
   17710:	str	r2, [sp, #84]	; 0x54
   17714:	bcc	176dc <__assert_fail@plt+0x5c5c>
   17718:	cmp	r1, #0
   1771c:	beq	17730 <__assert_fail@plt+0x5cb0>
   17720:	bl	11918 <iswalnum@plt>
   17724:	clz	r0, r0
   17728:	lsr	r0, r0, #5
   1772c:	str	r0, [sp, #8]
   17730:	ldr	r0, [sp, #4]
   17734:	strb	r9, [sp, #68]	; 0x44
   17738:	str	r7, [sp, #84]	; 0x54
   1773c:	strb	r9, [sp, #12]
   17740:	str	sl, [sp, #28]
   17744:	str	r9, [r8]
   17748:	str	r9, [r8, #4]
   1774c:	strb	r9, [sp, #80]	; 0x50
   17750:	str	r9, [r0]
   17754:	str	r9, [r0, #4]
   17758:	strb	r9, [sp, #24]
   1775c:	b	177a8 <__assert_fail@plt+0x5d28>
   17760:	mov	r0, r6
   17764:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   17768:	ldrb	r0, [sp, #92]	; 0x5c
   1776c:	cmp	r0, #0
   17770:	beq	17780 <__assert_fail@plt+0x5d00>
   17774:	ldr	r0, [sp, #96]	; 0x60
   17778:	cmp	r0, #0
   1777c:	beq	17900 <__assert_fail@plt+0x5e80>
   17780:	strb	r9, [sp, #80]	; 0x50
   17784:	strb	r9, [sp, #24]
   17788:	ldr	r0, [sp, #84]	; 0x54
   1778c:	ldr	r1, [sp, #88]	; 0x58
   17790:	add	r0, r0, r1
   17794:	ldr	r1, [sp, #32]
   17798:	str	r0, [sp, #84]	; 0x54
   1779c:	ldr	r0, [sp, #28]
   177a0:	add	r0, r0, r1
   177a4:	str	r0, [sp, #28]
   177a8:	mov	r0, r5
   177ac:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   177b0:	ldrb	r0, [sp, #36]	; 0x24
   177b4:	cmp	r0, #0
   177b8:	beq	17760 <__assert_fail@plt+0x5ce0>
   177bc:	ldr	r0, [sp, #40]	; 0x28
   177c0:	cmp	r0, #0
   177c4:	bne	17760 <__assert_fail@plt+0x5ce0>
   177c8:	mov	r0, r6
   177cc:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   177d0:	ldrb	r0, [sp, #92]	; 0x5c
   177d4:	mov	r4, #1
   177d8:	mov	r1, #1
   177dc:	cmp	r0, #0
   177e0:	beq	17800 <__assert_fail@plt+0x5d80>
   177e4:	ldr	r0, [sp, #96]	; 0x60
   177e8:	mov	r1, #1
   177ec:	cmp	r0, #0
   177f0:	beq	17800 <__assert_fail@plt+0x5d80>
   177f4:	bl	11918 <iswalnum@plt>
   177f8:	clz	r0, r0
   177fc:	lsr	r1, r0, #5
   17800:	ldr	r0, [sp, #8]
   17804:	tst	r0, r1
   17808:	bne	178e0 <__assert_fail@plt+0x5e60>
   1780c:	mov	r4, #0
   17810:	mov	r0, r6
   17814:	strb	r4, [sp, #68]	; 0x44
   17818:	str	r7, [sp, #84]	; 0x54
   1781c:	str	r4, [r8]
   17820:	str	r4, [r8, #4]
   17824:	strb	r4, [sp, #80]	; 0x50
   17828:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1782c:	ldrb	r0, [sp, #92]	; 0x5c
   17830:	cmp	r0, #0
   17834:	beq	17844 <__assert_fail@plt+0x5dc4>
   17838:	ldr	r0, [sp, #96]	; 0x60
   1783c:	cmp	r0, #0
   17840:	beq	178e0 <__assert_fail@plt+0x5e60>
   17844:	ldr	r0, [sp, #88]	; 0x58
   17848:	add	r4, r7, r0
   1784c:	b	178d0 <__assert_fail@plt+0x5e50>
   17850:	cmp	r4, r7
   17854:	mov	r8, #1
   17858:	mov	r4, #1
   1785c:	bcs	1787c <__assert_fail@plt+0x5dfc>
   17860:	bl	118b8 <__ctype_b_loc@plt>
   17864:	ldrb	r1, [r7, #-1]
   17868:	ldr	r0, [r0]
   1786c:	ldrb	r0, [r0, r1, lsl #1]
   17870:	mov	r1, #1
   17874:	and	r0, r0, #8
   17878:	eor	r4, r1, r0, lsr #3
   1787c:	mov	r0, sl
   17880:	mov	r5, sl
   17884:	bl	118dc <strlen@plt>
   17888:	ldrb	sl, [r7, r0]
   1788c:	cmp	sl, #0
   17890:	beq	178ac <__assert_fail@plt+0x5e2c>
   17894:	bl	118b8 <__ctype_b_loc@plt>
   17898:	ldr	r0, [r0]
   1789c:	mov	r1, #1
   178a0:	ldrb	r0, [r0, sl, lsl #1]
   178a4:	and	r0, r0, #8
   178a8:	eor	r8, r1, r0, lsr #3
   178ac:	tst	r4, r8
   178b0:	bne	178f4 <__assert_fail@plt+0x5e74>
   178b4:	ldrb	r0, [r7], #1
   178b8:	ldr	r8, [sp]
   178bc:	mov	sl, r5
   178c0:	add	r5, sp, #12
   178c4:	cmp	r0, #0
   178c8:	mov	r4, r7
   178cc:	beq	178dc <__assert_fail@plt+0x5e5c>
   178d0:	ldrb	r0, [r4]
   178d4:	cmp	r0, #0
   178d8:	bne	17694 <__assert_fail@plt+0x5c14>
   178dc:	mov	r4, #0
   178e0:	mov	r0, sl
   178e4:	bl	17404 <__assert_fail@plt+0x5984>
   178e8:	mov	r0, r4
   178ec:	sub	sp, fp, #28
   178f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178f4:	mov	r4, #1
   178f8:	mov	sl, r5
   178fc:	b	178e0 <__assert_fail@plt+0x5e60>
   17900:	bl	11a68 <abort@plt>
   17904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17908:	add	fp, sp, #28
   1790c:	sub	sp, sp, #12
   17910:	mov	r8, r0
   17914:	mov	r4, r1
   17918:	mov	r0, #0
   1791c:	mov	r2, #5
   17920:	mov	sl, #0
   17924:	mov	r1, r8
   17928:	bl	1175c <dcgettext@plt>
   1792c:	mov	r7, r0
   17930:	bl	1a89c <__assert_fail@plt+0x8e1c>
   17934:	movw	r1, #64024	; 0xfa18
   17938:	mov	r6, r0
   1793c:	movt	r1, #1
   17940:	bl	1a62c <__assert_fail@plt+0x8bac>
   17944:	cmp	r0, #0
   17948:	beq	179f0 <__assert_fail@plt+0x5f70>
   1794c:	movw	sl, #64024	; 0xfa18
   17950:	mov	r0, r4
   17954:	mov	r2, r6
   17958:	str	r7, [sp, #8]
   1795c:	movt	sl, #1
   17960:	mov	r1, sl
   17964:	bl	1a524 <__assert_fail@plt+0x8aa4>
   17968:	mov	r5, r0
   1796c:	mov	r0, r6
   17970:	bl	118dc <strlen@plt>
   17974:	mov	r7, r0
   17978:	add	r0, r0, #11
   1797c:	bl	1a018 <__assert_fail@plt+0x8598>
   17980:	mov	r1, r6
   17984:	mov	r2, r7
   17988:	mov	r9, r0
   1798c:	bl	11720 <memcpy@plt>
   17990:	movw	r1, #64032	; 0xfa20
   17994:	add	r0, r9, r7
   17998:	mov	r2, #11
   1799c:	movt	r1, #1
   179a0:	bl	11720 <memcpy@plt>
   179a4:	mov	r0, r4
   179a8:	mov	r1, sl
   179ac:	mov	r2, r9
   179b0:	bl	1a524 <__assert_fail@plt+0x8aa4>
   179b4:	mov	sl, r0
   179b8:	mov	r0, r9
   179bc:	bl	17404 <__assert_fail@plt+0x5984>
   179c0:	mov	r4, #0
   179c4:	cmp	sl, #0
   179c8:	beq	179e8 <__assert_fail@plt+0x5f68>
   179cc:	mov	r0, sl
   179d0:	mov	r1, #63	; 0x3f
   179d4:	bl	118e8 <strchr@plt>
   179d8:	cmp	r0, #0
   179dc:	beq	179fc <__assert_fail@plt+0x5f7c>
   179e0:	mov	r0, sl
   179e4:	bl	17404 <__assert_fail@plt+0x5984>
   179e8:	mov	sl, #0
   179ec:	b	17a00 <__assert_fail@plt+0x5f80>
   179f0:	mov	r5, r4
   179f4:	mov	r9, #0
   179f8:	b	17a08 <__assert_fail@plt+0x5f88>
   179fc:	mov	r4, sl
   17a00:	ldr	r7, [sp, #8]
   17a04:	mov	r9, r5
   17a08:	cmp	r4, #0
   17a0c:	mov	r6, r4
   17a10:	mov	r0, r7
   17a14:	mov	r1, r8
   17a18:	moveq	r6, r8
   17a1c:	cmp	r5, #0
   17a20:	movne	r6, r5
   17a24:	bl	116b4 <strcmp@plt>
   17a28:	cmp	r0, #0
   17a2c:	beq	17aa0 <__assert_fail@plt+0x6020>
   17a30:	mov	r0, r7
   17a34:	mov	r1, r8
   17a38:	bl	1764c <__assert_fail@plt+0x5bcc>
   17a3c:	cmp	r0, #0
   17a40:	bne	17a7c <__assert_fail@plt+0x5ffc>
   17a44:	cmp	r5, #0
   17a48:	beq	17a60 <__assert_fail@plt+0x5fe0>
   17a4c:	mov	r0, r7
   17a50:	mov	r1, r5
   17a54:	bl	1764c <__assert_fail@plt+0x5bcc>
   17a58:	cmp	r0, #0
   17a5c:	bne	17a7c <__assert_fail@plt+0x5ffc>
   17a60:	cmp	r4, #0
   17a64:	beq	17ad0 <__assert_fail@plt+0x6050>
   17a68:	mov	r0, r7
   17a6c:	mov	r1, r4
   17a70:	bl	1764c <__assert_fail@plt+0x5bcc>
   17a74:	cmp	r0, #0
   17a78:	beq	17ad0 <__assert_fail@plt+0x6050>
   17a7c:	cmp	r9, #0
   17a80:	beq	17a8c <__assert_fail@plt+0x600c>
   17a84:	mov	r0, r9
   17a88:	bl	17404 <__assert_fail@plt+0x5984>
   17a8c:	cmp	sl, #0
   17a90:	beq	17b34 <__assert_fail@plt+0x60b4>
   17a94:	mov	r0, sl
   17a98:	bl	17404 <__assert_fail@plt+0x5984>
   17a9c:	b	17b34 <__assert_fail@plt+0x60b4>
   17aa0:	cmp	r9, #0
   17aa4:	cmpne	r9, r6
   17aa8:	beq	17ab4 <__assert_fail@plt+0x6034>
   17aac:	mov	r0, r9
   17ab0:	bl	17404 <__assert_fail@plt+0x5984>
   17ab4:	cmp	sl, #0
   17ab8:	cmpne	sl, r6
   17abc:	beq	17ac8 <__assert_fail@plt+0x6048>
   17ac0:	mov	r0, sl
   17ac4:	bl	17404 <__assert_fail@plt+0x5984>
   17ac8:	mov	r7, r6
   17acc:	b	17b34 <__assert_fail@plt+0x60b4>
   17ad0:	mov	r0, r7
   17ad4:	bl	118dc <strlen@plt>
   17ad8:	mov	r4, r0
   17adc:	mov	r0, r6
   17ae0:	bl	118dc <strlen@plt>
   17ae4:	add	r0, r4, r0
   17ae8:	add	r0, r0, #4
   17aec:	bl	1a018 <__assert_fail@plt+0x8598>
   17af0:	movw	r3, #64016	; 0xfa10
   17af4:	mov	r1, #1
   17af8:	mvn	r2, #0
   17afc:	mov	r4, r0
   17b00:	str	r7, [sp]
   17b04:	str	r6, [sp, #4]
   17b08:	movt	r3, #1
   17b0c:	bl	11924 <__sprintf_chk@plt>
   17b10:	cmp	r9, #0
   17b14:	beq	17b20 <__assert_fail@plt+0x60a0>
   17b18:	mov	r0, r9
   17b1c:	bl	17404 <__assert_fail@plt+0x5984>
   17b20:	cmp	sl, #0
   17b24:	beq	17b30 <__assert_fail@plt+0x60b0>
   17b28:	mov	r0, sl
   17b2c:	bl	17404 <__assert_fail@plt+0x5984>
   17b30:	mov	r7, r4
   17b34:	mov	r0, r7
   17b38:	sub	sp, fp, #28
   17b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b40:	push	{r4, r5, r6, sl, fp, lr}
   17b44:	add	fp, sp, #16
   17b48:	mov	r4, r0
   17b4c:	movw	r0, #520	; 0x208
   17b50:	movt	r0, #3
   17b54:	cmp	r4, #0
   17b58:	moveq	r4, r0
   17b5c:	bl	1190c <__errno_location@plt>
   17b60:	ldr	r6, [r0]
   17b64:	mov	r5, r0
   17b68:	mov	r0, r4
   17b6c:	mov	r1, #48	; 0x30
   17b70:	bl	1a368 <__assert_fail@plt+0x88e8>
   17b74:	str	r6, [r5]
   17b78:	pop	{r4, r5, r6, sl, fp, pc}
   17b7c:	movw	r1, #520	; 0x208
   17b80:	cmp	r0, #0
   17b84:	movt	r1, #3
   17b88:	movne	r1, r0
   17b8c:	ldr	r0, [r1]
   17b90:	bx	lr
   17b94:	movw	r2, #520	; 0x208
   17b98:	cmp	r0, #0
   17b9c:	movt	r2, #3
   17ba0:	movne	r2, r0
   17ba4:	str	r1, [r2]
   17ba8:	bx	lr
   17bac:	movw	r3, #520	; 0x208
   17bb0:	cmp	r0, #0
   17bb4:	movt	r3, #3
   17bb8:	movne	r3, r0
   17bbc:	ubfx	r0, r1, #5, #3
   17bc0:	and	r1, r1, #31
   17bc4:	add	r0, r3, r0, lsl #2
   17bc8:	ldr	r3, [r0, #8]
   17bcc:	eor	r2, r2, r3, lsr r1
   17bd0:	and	r2, r2, #1
   17bd4:	eor	r2, r3, r2, lsl r1
   17bd8:	str	r2, [r0, #8]
   17bdc:	mov	r0, #1
   17be0:	and	r0, r0, r3, lsr r1
   17be4:	bx	lr
   17be8:	movw	r2, #520	; 0x208
   17bec:	cmp	r0, #0
   17bf0:	movt	r2, #3
   17bf4:	movne	r2, r0
   17bf8:	ldr	r0, [r2, #4]
   17bfc:	str	r1, [r2, #4]
   17c00:	bx	lr
   17c04:	movw	r3, #520	; 0x208
   17c08:	cmp	r0, #0
   17c0c:	movt	r3, #3
   17c10:	movne	r3, r0
   17c14:	cmp	r1, #0
   17c18:	mov	r0, #10
   17c1c:	cmpne	r2, #0
   17c20:	str	r0, [r3]
   17c24:	bne	17c34 <__assert_fail@plt+0x61b4>
   17c28:	push	{fp, lr}
   17c2c:	mov	fp, sp
   17c30:	bl	11a68 <abort@plt>
   17c34:	str	r1, [r3, #40]	; 0x28
   17c38:	str	r2, [r3, #44]	; 0x2c
   17c3c:	bx	lr
   17c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c44:	add	fp, sp, #28
   17c48:	sub	sp, sp, #20
   17c4c:	mov	r7, r0
   17c50:	ldr	r0, [fp, #8]
   17c54:	movw	r5, #520	; 0x208
   17c58:	mov	r8, r3
   17c5c:	mov	r9, r2
   17c60:	mov	sl, r1
   17c64:	movt	r5, #3
   17c68:	cmp	r0, #0
   17c6c:	movne	r5, r0
   17c70:	bl	1190c <__errno_location@plt>
   17c74:	mov	r4, r0
   17c78:	ldm	r5, {r0, r1}
   17c7c:	ldr	r2, [r5, #40]	; 0x28
   17c80:	ldr	r3, [r5, #44]	; 0x2c
   17c84:	add	r5, r5, #8
   17c88:	ldr	r6, [r4]
   17c8c:	stm	sp, {r0, r1, r5}
   17c90:	str	r2, [sp, #12]
   17c94:	str	r3, [sp, #16]
   17c98:	mov	r0, r7
   17c9c:	mov	r1, sl
   17ca0:	mov	r2, r9
   17ca4:	mov	r3, r8
   17ca8:	bl	17cb8 <__assert_fail@plt+0x6238>
   17cac:	str	r6, [r4]
   17cb0:	sub	sp, fp, #28
   17cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cbc:	add	fp, sp, #28
   17cc0:	sub	sp, sp, #156	; 0x9c
   17cc4:	str	r0, [fp, #-56]	; 0xffffffc8
   17cc8:	ldr	r0, [fp, #12]
   17ccc:	mov	r4, r1
   17cd0:	str	r3, [sp, #80]	; 0x50
   17cd4:	str	r2, [fp, #-84]	; 0xffffffac
   17cd8:	and	r1, r0, #4
   17cdc:	str	r1, [sp, #24]
   17ce0:	and	r1, r0, #1
   17ce4:	str	r1, [sp, #28]
   17ce8:	ubfx	r7, r0, #1, #1
   17cec:	bl	1181c <__ctype_get_mb_cur_max@plt>
   17cf0:	str	r0, [sp, #32]
   17cf4:	ldr	r0, [fp, #24]
   17cf8:	ldr	r9, [fp, #8]
   17cfc:	mov	r2, #0
   17d00:	mov	r1, #0
   17d04:	mov	r5, #0
   17d08:	str	r2, [sp, #52]	; 0x34
   17d0c:	mov	r2, #1
   17d10:	str	r0, [sp, #72]	; 0x48
   17d14:	ldr	r0, [fp, #20]
   17d18:	str	r0, [sp, #64]	; 0x40
   17d1c:	mov	r0, #0
   17d20:	str	r0, [sp, #92]	; 0x5c
   17d24:	mov	r0, #0
   17d28:	str	r0, [fp, #-76]	; 0xffffffb4
   17d2c:	mov	r0, #0
   17d30:	cmp	r9, #10
   17d34:	str	r1, [sp, #68]	; 0x44
   17d38:	bhi	18d38 <__assert_fail@plt+0x72b8>
   17d3c:	add	r1, pc, #28
   17d40:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d44:	ldr	lr, [sp, #80]	; 0x50
   17d48:	mov	r6, r4
   17d4c:	mov	r8, #0
   17d50:	mov	r3, #1
   17d54:	mov	sl, #0
   17d58:	mov	r4, r2
   17d5c:	ldr	pc, [r1, r9, lsl #2]
   17d60:	andeq	r7, r1, r0, lsr lr
   17d64:	andeq	r7, r1, ip, ror #28
   17d68:	andeq	r7, r1, r0, asr #28
   17d6c:	andeq	r7, r1, r8, lsr #28
   17d70:	andeq	r7, r1, r0, ror #28
   17d74:			; <UNDEFINED> instruction: 0x00017eb8
   17d78:	andeq	r7, r1, r0, asr lr
   17d7c:	andeq	r7, r1, r8, lsl pc
   17d80:	andeq	r7, r1, ip, lsl #27
   17d84:	andeq	r7, r1, ip, lsl #27
   17d88:			; <UNDEFINED> instruction: 0x00017db4
   17d8c:	movw	r0, #64126	; 0xfa7e
   17d90:	mov	r1, r9
   17d94:	movt	r0, #1
   17d98:	bl	194a0 <__assert_fail@plt+0x7a20>
   17d9c:	str	r0, [sp, #64]	; 0x40
   17da0:	movw	r0, #65140	; 0xfe74
   17da4:	mov	r1, r9
   17da8:	movt	r0, #1
   17dac:	bl	194a0 <__assert_fail@plt+0x7a20>
   17db0:	str	r0, [sp, #72]	; 0x48
   17db4:	mov	r8, #0
   17db8:	mov	sl, r7
   17dbc:	tst	r7, #1
   17dc0:	str	r5, [fp, #-48]	; 0xffffffd0
   17dc4:	bne	17e00 <__assert_fail@plt+0x6380>
   17dc8:	ldr	r0, [sp, #64]	; 0x40
   17dcc:	ldrb	r0, [r0]
   17dd0:	cmp	r0, #0
   17dd4:	beq	17e00 <__assert_fail@plt+0x6380>
   17dd8:	ldr	r1, [sp, #64]	; 0x40
   17ddc:	mov	r8, #0
   17de0:	add	r1, r1, #1
   17de4:	cmp	r8, r6
   17de8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17dec:	strbcc	r0, [r2, r8]
   17df0:	ldrb	r0, [r1, r8]
   17df4:	add	r8, r8, #1
   17df8:	cmp	r0, #0
   17dfc:	bne	17de4 <__assert_fail@plt+0x6364>
   17e00:	ldr	r7, [sp, #72]	; 0x48
   17e04:	mov	r0, r7
   17e08:	bl	118dc <strlen@plt>
   17e0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e10:	ldr	lr, [sp, #80]	; 0x50
   17e14:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17e18:	str	r0, [fp, #-76]	; 0xffffffb4
   17e1c:	str	r7, [sp, #92]	; 0x5c
   17e20:	mov	r3, #1
   17e24:	b	17f18 <__assert_fail@plt+0x6498>
   17e28:	mov	r0, #1
   17e2c:	b	17e6c <__assert_fail@plt+0x63ec>
   17e30:	mov	r9, #0
   17e34:	mov	r8, #0
   17e38:	mov	r3, r0
   17e3c:	b	17f14 <__assert_fail@plt+0x6494>
   17e40:	tst	r7, #1
   17e44:	bne	17e6c <__assert_fail@plt+0x63ec>
   17e48:	mov	r3, r0
   17e4c:	b	17e94 <__assert_fail@plt+0x6414>
   17e50:	mov	r0, #1
   17e54:	mov	r8, #0
   17e58:	mov	r9, #5
   17e5c:	b	17ecc <__assert_fail@plt+0x644c>
   17e60:	mov	r3, #1
   17e64:	tst	r7, #1
   17e68:	beq	17e94 <__assert_fail@plt+0x6414>
   17e6c:	mov	r1, #1
   17e70:	mov	r8, #0
   17e74:	mov	r9, #2
   17e78:	mov	r3, r0
   17e7c:	mov	sl, #1
   17e80:	str	r1, [fp, #-76]	; 0xffffffb4
   17e84:	movw	r1, #65140	; 0xfe74
   17e88:	movt	r1, #1
   17e8c:	str	r1, [sp, #92]	; 0x5c
   17e90:	b	17f18 <__assert_fail@plt+0x6498>
   17e94:	cmp	r6, #0
   17e98:	mov	r8, #1
   17e9c:	mov	r9, #2
   17ea0:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   17ea4:	movne	r0, #39	; 0x27
   17ea8:	strbne	r0, [r1]
   17eac:	movw	r0, #65140	; 0xfe74
   17eb0:	movt	r0, #1
   17eb4:	b	17f08 <__assert_fail@plt+0x6488>
   17eb8:	mov	r9, #5
   17ebc:	tst	r7, #1
   17ec0:	beq	17ee8 <__assert_fail@plt+0x6468>
   17ec4:	mov	r0, #1
   17ec8:	mov	r8, #0
   17ecc:	str	r0, [fp, #-76]	; 0xffffffb4
   17ed0:	movw	r0, #64124	; 0xfa7c
   17ed4:	mov	r3, #1
   17ed8:	mov	sl, #1
   17edc:	movt	r0, #1
   17ee0:	str	r0, [sp, #92]	; 0x5c
   17ee4:	b	17f18 <__assert_fail@plt+0x6498>
   17ee8:	cmp	r6, #0
   17eec:	mov	r8, #1
   17ef0:	mov	r3, #1
   17ef4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   17ef8:	movne	r0, #34	; 0x22
   17efc:	strbne	r0, [r1]
   17f00:	movw	r0, #64124	; 0xfa7c
   17f04:	movt	r0, #1
   17f08:	str	r0, [sp, #92]	; 0x5c
   17f0c:	mov	r0, #1
   17f10:	str	r0, [fp, #-76]	; 0xffffffb4
   17f14:	mov	sl, #0
   17f18:	ldr	r0, [fp, #16]
   17f1c:	mov	r7, #0
   17f20:	str	r9, [fp, #-64]	; 0xffffffc0
   17f24:	str	sl, [fp, #-72]	; 0xffffffb8
   17f28:	str	r3, [sp, #84]	; 0x54
   17f2c:	cmp	r0, #0
   17f30:	movwne	r0, #1
   17f34:	and	r0, r0, sl
   17f38:	str	r0, [fp, #-88]	; 0xffffffa8
   17f3c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17f40:	cmp	r0, #0
   17f44:	movwne	r0, #1
   17f48:	subs	r2, r9, #2
   17f4c:	and	r1, r0, sl
   17f50:	str	r2, [fp, #-80]	; 0xffffffb0
   17f54:	and	r1, r3, r1
   17f58:	str	r1, [sp, #44]	; 0x2c
   17f5c:	clz	r1, r2
   17f60:	lsr	r1, r1, #5
   17f64:	and	r1, r1, sl
   17f68:	str	r1, [sp, #56]	; 0x38
   17f6c:	mov	r1, r2
   17f70:	eor	r2, sl, #1
   17f74:	movwne	r1, #1
   17f78:	str	r2, [sp, #88]	; 0x58
   17f7c:	orr	r2, r1, r2
   17f80:	and	r1, r1, r3
   17f84:	and	r0, r0, r1
   17f88:	str	r2, [sp, #60]	; 0x3c
   17f8c:	str	r1, [fp, #-68]	; 0xffffffbc
   17f90:	str	r0, [fp, #-60]	; 0xffffffc4
   17f94:	eor	r0, r3, #1
   17f98:	str	r0, [sp, #48]	; 0x30
   17f9c:	cmn	lr, #1
   17fa0:	beq	17fb0 <__assert_fail@plt+0x6530>
   17fa4:	cmp	r7, lr
   17fa8:	bne	17fbc <__assert_fail@plt+0x653c>
   17fac:	b	18b68 <__assert_fail@plt+0x70e8>
   17fb0:	ldrb	r0, [ip, r7]
   17fb4:	cmp	r0, #0
   17fb8:	beq	18b70 <__assert_fail@plt+0x70f0>
   17fbc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17fc0:	mov	r9, #0
   17fc4:	str	r5, [fp, #-48]	; 0xffffffd0
   17fc8:	str	r6, [fp, #-52]	; 0xffffffcc
   17fcc:	cmp	r0, #0
   17fd0:	beq	18010 <__assert_fail@plt+0x6590>
   17fd4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17fd8:	mov	r5, r4
   17fdc:	add	r4, r7, r0
   17fe0:	cmp	r0, #2
   17fe4:	bcc	18000 <__assert_fail@plt+0x6580>
   17fe8:	cmn	lr, #1
   17fec:	bne	18000 <__assert_fail@plt+0x6580>
   17ff0:	mov	r0, ip
   17ff4:	bl	118dc <strlen@plt>
   17ff8:	ldr	ip, [fp, #-84]	; 0xffffffac
   17ffc:	mov	lr, r0
   18000:	cmp	r4, lr
   18004:	bls	18018 <__assert_fail@plt+0x6598>
   18008:	mov	r6, #0
   1800c:	b	18058 <__assert_fail@plt+0x65d8>
   18010:	mov	r6, #0
   18014:	b	1805c <__assert_fail@plt+0x65dc>
   18018:	ldr	r1, [sp, #92]	; 0x5c
   1801c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18020:	add	r0, ip, r7
   18024:	mov	r4, lr
   18028:	bl	11744 <memcmp@plt>
   1802c:	ldr	r2, [sp, #88]	; 0x58
   18030:	cmp	r0, #0
   18034:	mov	r1, r0
   18038:	movwne	r1, #1
   1803c:	orr	r1, r1, r2
   18040:	tst	r1, #1
   18044:	beq	18c04 <__assert_fail@plt+0x7184>
   18048:	ldr	ip, [fp, #-84]	; 0xffffffac
   1804c:	clz	r0, r0
   18050:	mov	lr, r4
   18054:	lsr	r6, r0, #5
   18058:	mov	r4, r5
   1805c:	ldrb	r5, [ip, r7]
   18060:	cmp	r5, #126	; 0x7e
   18064:	bhi	1842c <__assert_fail@plt+0x69ac>
   18068:	add	r3, pc, #16
   1806c:	mov	sl, #1
   18070:	mov	r2, #110	; 0x6e
   18074:	mov	r0, #97	; 0x61
   18078:	mov	r1, #0
   1807c:	ldr	pc, [r3, r5, lsl #2]
   18080:	andeq	r8, r1, r0, lsl r3
   18084:	andeq	r8, r1, ip, lsr #8
   18088:	andeq	r8, r1, ip, lsr #8
   1808c:	andeq	r8, r1, ip, lsr #8
   18090:	andeq	r8, r1, ip, lsr #8
   18094:	andeq	r8, r1, ip, lsr #8
   18098:	andeq	r8, r1, ip, lsr #8
   1809c:	ldrdeq	r8, [r1], -r0
   180a0:	strdeq	r8, [r1], -r0
   180a4:	andeq	r8, r1, r8, ror #5
   180a8:	strdeq	r8, [r1], -ip
   180ac:	andeq	r8, r1, r0, lsl #7
   180b0:	andeq	r8, r1, r0, ror #5
   180b4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180b8:	andeq	r8, r1, ip, lsr #8
   180bc:	andeq	r8, r1, ip, lsr #8
   180c0:	andeq	r8, r1, ip, lsr #8
   180c4:	andeq	r8, r1, ip, lsr #8
   180c8:	andeq	r8, r1, ip, lsr #8
   180cc:	andeq	r8, r1, ip, lsr #8
   180d0:	andeq	r8, r1, ip, lsr #8
   180d4:	andeq	r8, r1, ip, lsr #8
   180d8:	andeq	r8, r1, ip, lsr #8
   180dc:	andeq	r8, r1, ip, lsr #8
   180e0:	andeq	r8, r1, ip, lsr #8
   180e4:	andeq	r8, r1, ip, lsr #8
   180e8:	andeq	r8, r1, ip, lsr #8
   180ec:	andeq	r8, r1, ip, lsr #8
   180f0:	andeq	r8, r1, ip, lsr #8
   180f4:	andeq	r8, r1, ip, lsr #8
   180f8:	andeq	r8, r1, ip, lsr #8
   180fc:	andeq	r8, r1, ip, lsr #8
   18100:	muleq	r1, r0, r4
   18104:	muleq	r1, r4, r4
   18108:	muleq	r1, r4, r4
   1810c:	muleq	r1, r0, r2
   18110:	muleq	r1, r4, r4
   18114:	andeq	r8, r1, ip, ror r2
   18118:	muleq	r1, r4, r4
   1811c:	andeq	r8, r1, r8, lsl #7
   18120:	muleq	r1, r4, r4
   18124:	muleq	r1, r4, r4
   18128:	muleq	r1, r4, r4
   1812c:	andeq	r8, r1, ip, ror r2
   18130:	andeq	r8, r1, ip, ror r2
   18134:	andeq	r8, r1, ip, ror r2
   18138:	andeq	r8, r1, ip, ror r2
   1813c:	andeq	r8, r1, ip, ror r2
   18140:	andeq	r8, r1, ip, ror r2
   18144:	andeq	r8, r1, ip, ror r2
   18148:	andeq	r8, r1, ip, ror r2
   1814c:	andeq	r8, r1, ip, ror r2
   18150:	andeq	r8, r1, ip, ror r2
   18154:	andeq	r8, r1, ip, ror r2
   18158:	andeq	r8, r1, ip, ror r2
   1815c:	andeq	r8, r1, ip, ror r2
   18160:	andeq	r8, r1, ip, ror r2
   18164:	andeq	r8, r1, ip, ror r2
   18168:	andeq	r8, r1, ip, ror r2
   1816c:	muleq	r1, r4, r4
   18170:	muleq	r1, r4, r4
   18174:	muleq	r1, r4, r4
   18178:	muleq	r1, r4, r4
   1817c:	andeq	r8, r1, r4, asr r3
   18180:	andeq	r8, r1, ip, lsr #8
   18184:	andeq	r8, r1, ip, ror r2
   18188:	andeq	r8, r1, ip, ror r2
   1818c:	andeq	r8, r1, ip, ror r2
   18190:	andeq	r8, r1, ip, ror r2
   18194:	andeq	r8, r1, ip, ror r2
   18198:	andeq	r8, r1, ip, ror r2
   1819c:	andeq	r8, r1, ip, ror r2
   181a0:	andeq	r8, r1, ip, ror r2
   181a4:	andeq	r8, r1, ip, ror r2
   181a8:	andeq	r8, r1, ip, ror r2
   181ac:	andeq	r8, r1, ip, ror r2
   181b0:	andeq	r8, r1, ip, ror r2
   181b4:	andeq	r8, r1, ip, ror r2
   181b8:	andeq	r8, r1, ip, ror r2
   181bc:	andeq	r8, r1, ip, ror r2
   181c0:	andeq	r8, r1, ip, ror r2
   181c4:	andeq	r8, r1, ip, ror r2
   181c8:	andeq	r8, r1, ip, ror r2
   181cc:	andeq	r8, r1, ip, ror r2
   181d0:	andeq	r8, r1, ip, ror r2
   181d4:	andeq	r8, r1, ip, ror r2
   181d8:	andeq	r8, r1, ip, ror r2
   181dc:	andeq	r8, r1, ip, ror r2
   181e0:	andeq	r8, r1, ip, ror r2
   181e4:	andeq	r8, r1, ip, ror r2
   181e8:	andeq	r8, r1, ip, ror r2
   181ec:	muleq	r1, r4, r4
   181f0:			; <UNDEFINED> instruction: 0x000182bc
   181f4:	andeq	r8, r1, ip, ror r2
   181f8:	muleq	r1, r4, r4
   181fc:	andeq	r8, r1, ip, ror r2
   18200:	muleq	r1, r4, r4
   18204:	andeq	r8, r1, ip, ror r2
   18208:	andeq	r8, r1, ip, ror r2
   1820c:	andeq	r8, r1, ip, ror r2
   18210:	andeq	r8, r1, ip, ror r2
   18214:	andeq	r8, r1, ip, ror r2
   18218:	andeq	r8, r1, ip, ror r2
   1821c:	andeq	r8, r1, ip, ror r2
   18220:	andeq	r8, r1, ip, ror r2
   18224:	andeq	r8, r1, ip, ror r2
   18228:	andeq	r8, r1, ip, ror r2
   1822c:	andeq	r8, r1, ip, ror r2
   18230:	andeq	r8, r1, ip, ror r2
   18234:	andeq	r8, r1, ip, ror r2
   18238:	andeq	r8, r1, ip, ror r2
   1823c:	andeq	r8, r1, ip, ror r2
   18240:	andeq	r8, r1, ip, ror r2
   18244:	andeq	r8, r1, ip, ror r2
   18248:	andeq	r8, r1, ip, ror r2
   1824c:	andeq	r8, r1, ip, ror r2
   18250:	andeq	r8, r1, ip, ror r2
   18254:	andeq	r8, r1, ip, ror r2
   18258:	andeq	r8, r1, ip, ror r2
   1825c:	andeq	r8, r1, ip, ror r2
   18260:	andeq	r8, r1, ip, ror r2
   18264:	andeq	r8, r1, ip, ror r2
   18268:	andeq	r8, r1, ip, ror r2
   1826c:	andeq	r8, r1, r0, lsr #5
   18270:	muleq	r1, r4, r4
   18274:	andeq	r8, r1, r0, lsr #5
   18278:	muleq	r1, r0, r2
   1827c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18280:	cmp	r0, #0
   18284:	beq	184e4 <__assert_fail@plt+0x6a64>
   18288:	ldr	r0, [fp, #16]
   1828c:	b	184e8 <__assert_fail@plt+0x6a68>
   18290:	mov	sl, #0
   18294:	cmp	r7, #0
   18298:	bne	18700 <__assert_fail@plt+0x6c80>
   1829c:	b	18490 <__assert_fail@plt+0x6a10>
   182a0:	mov	sl, #0
   182a4:	cmn	lr, #1
   182a8:	beq	1847c <__assert_fail@plt+0x69fc>
   182ac:	cmp	r7, #0
   182b0:	cmpeq	lr, #1
   182b4:	bne	18700 <__assert_fail@plt+0x6c80>
   182b8:	b	18490 <__assert_fail@plt+0x6a10>
   182bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   182c0:	cmp	r0, #2
   182c4:	bne	184b4 <__assert_fail@plt+0x6a34>
   182c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   182cc:	tst	r0, #1
   182d0:	bne	18c20 <__assert_fail@plt+0x71a0>
   182d4:	mov	r9, #0
   182d8:	mov	r0, #92	; 0x5c
   182dc:	b	184c8 <__assert_fail@plt+0x6a48>
   182e0:	mov	r0, #102	; 0x66
   182e4:	b	184d0 <__assert_fail@plt+0x6a50>
   182e8:	mov	r2, #116	; 0x74
   182ec:	b	182fc <__assert_fail@plt+0x687c>
   182f0:	mov	r0, #98	; 0x62
   182f4:	b	184d0 <__assert_fail@plt+0x6a50>
   182f8:	mov	r2, #114	; 0x72
   182fc:	ldr	r0, [sp, #60]	; 0x3c
   18300:	tst	r0, #1
   18304:	mov	r0, r2
   18308:	bne	184d0 <__assert_fail@plt+0x6a50>
   1830c:	b	18c20 <__assert_fail@plt+0x71a0>
   18310:	ldr	r0, [sp, #84]	; 0x54
   18314:	tst	r0, #1
   18318:	beq	185bc <__assert_fail@plt+0x6b3c>
   1831c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18320:	tst	r0, #1
   18324:	bne	18d28 <__assert_fail@plt+0x72a8>
   18328:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1832c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18330:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18334:	cmp	r0, #2
   18338:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1833c:	movwne	r0, #1
   18340:	orr	r0, r0, r3
   18344:	tst	r0, #1
   18348:	beq	18a3c <__assert_fail@plt+0x6fbc>
   1834c:	mov	r0, r8
   18350:	b	18a7c <__assert_fail@plt+0x6ffc>
   18354:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18358:	mov	r9, #0
   1835c:	mov	r5, #63	; 0x3f
   18360:	cmp	r0, #5
   18364:	beq	18708 <__assert_fail@plt+0x6c88>
   18368:	cmp	r0, #2
   1836c:	bne	187c8 <__assert_fail@plt+0x6d48>
   18370:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18374:	tst	r0, #1
   18378:	beq	187cc <__assert_fail@plt+0x6d4c>
   1837c:	b	18c20 <__assert_fail@plt+0x71a0>
   18380:	mov	r0, #118	; 0x76
   18384:	b	184d0 <__assert_fail@plt+0x6a50>
   18388:	mov	r0, #1
   1838c:	mov	r5, #39	; 0x27
   18390:	str	r0, [sp, #52]	; 0x34
   18394:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18398:	cmp	r0, #2
   1839c:	bne	18424 <__assert_fail@plt+0x69a4>
   183a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   183a4:	tst	r0, #1
   183a8:	bne	18c20 <__assert_fail@plt+0x71a0>
   183ac:	ldr	r3, [sp, #68]	; 0x44
   183b0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   183b4:	mov	r9, #0
   183b8:	clz	r1, r2
   183bc:	cmp	r3, #0
   183c0:	mov	r0, r3
   183c4:	movwne	r0, #1
   183c8:	lsr	r1, r1, #5
   183cc:	orrs	r0, r0, r1
   183d0:	moveq	r3, r2
   183d4:	moveq	r2, r0
   183d8:	cmp	r8, r2
   183dc:	str	r3, [sp, #68]	; 0x44
   183e0:	str	r2, [fp, #-52]	; 0xffffffcc
   183e4:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   183e8:	movcc	r0, #39	; 0x27
   183ec:	strbcc	r0, [r1, r8]
   183f0:	add	r0, r8, #1
   183f4:	cmp	r0, r2
   183f8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   183fc:	movcc	r1, #92	; 0x5c
   18400:	strbcc	r1, [r3, r0]
   18404:	add	r0, r8, #2
   18408:	add	r8, r8, #3
   1840c:	cmp	r0, r2
   18410:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18414:	movcc	r1, #39	; 0x27
   18418:	strbcc	r1, [r2, r0]
   1841c:	mov	r0, #0
   18420:	str	r0, [fp, #-48]	; 0xffffffd0
   18424:	mov	sl, #1
   18428:	b	1827c <__assert_fail@plt+0x67fc>
   1842c:	ldr	r0, [sp, #32]
   18430:	cmp	r0, #1
   18434:	bne	185e0 <__assert_fail@plt+0x6b60>
   18438:	str	lr, [sp, #80]	; 0x50
   1843c:	bl	118b8 <__ctype_b_loc@plt>
   18440:	ldr	r0, [r0]
   18444:	ldr	ip, [fp, #-84]	; 0xffffffac
   18448:	mov	r1, #1
   1844c:	add	r0, r0, r5, lsl #1
   18450:	ldrb	r0, [r0, #1]
   18454:	ubfx	sl, r0, #6, #1
   18458:	ldr	r0, [sp, #48]	; 0x30
   1845c:	mov	r2, r1
   18460:	cmp	r1, #1
   18464:	orr	r0, sl, r0
   18468:	bhi	187d4 <__assert_fail@plt+0x6d54>
   1846c:	tst	r0, #1
   18470:	beq	187d4 <__assert_fail@plt+0x6d54>
   18474:	ldr	lr, [sp, #80]	; 0x50
   18478:	b	1827c <__assert_fail@plt+0x67fc>
   1847c:	cmp	r7, #0
   18480:	bne	186fc <__assert_fail@plt+0x6c7c>
   18484:	ldrb	r0, [ip, #1]
   18488:	cmp	r0, #0
   1848c:	bne	186fc <__assert_fail@plt+0x6c7c>
   18490:	mov	r1, #1
   18494:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18498:	cmp	r0, #2
   1849c:	bne	184ac <__assert_fail@plt+0x6a2c>
   184a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   184a4:	tst	r0, #1
   184a8:	bne	18c20 <__assert_fail@plt+0x71a0>
   184ac:	mov	sl, r1
   184b0:	b	1827c <__assert_fail@plt+0x67fc>
   184b4:	ldr	r1, [sp, #44]	; 0x2c
   184b8:	mov	r9, #0
   184bc:	mov	r0, #92	; 0x5c
   184c0:	cmp	r1, #0
   184c4:	beq	184d0 <__assert_fail@plt+0x6a50>
   184c8:	mov	sl, #0
   184cc:	b	189e8 <__assert_fail@plt+0x6f68>
   184d0:	ldr	r1, [sp, #84]	; 0x54
   184d4:	mov	sl, #0
   184d8:	mov	r9, #0
   184dc:	tst	r1, #1
   184e0:	bne	1851c <__assert_fail@plt+0x6a9c>
   184e4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   184e8:	cmp	r0, #0
   184ec:	mov	r0, r5
   184f0:	beq	18514 <__assert_fail@plt+0x6a94>
   184f4:	ldr	r1, [fp, #16]
   184f8:	ubfx	r0, r5, #5, #3
   184fc:	mov	r2, #1
   18500:	ldr	r0, [r1, r0, lsl #2]
   18504:	and	r1, r5, #31
   18508:	tst	r0, r2, lsl r1
   1850c:	mov	r0, r5
   18510:	bne	1851c <__assert_fail@plt+0x6a9c>
   18514:	cmp	r6, #0
   18518:	beq	189e8 <__assert_fail@plt+0x6f68>
   1851c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18520:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18524:	tst	r1, #1
   18528:	bne	18bfc <__assert_fail@plt+0x717c>
   1852c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18530:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18534:	cmp	r1, #2
   18538:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1853c:	movwne	r1, #1
   18540:	orr	r1, r1, r5
   18544:	tst	r1, #1
   18548:	bne	1858c <__assert_fail@plt+0x6b0c>
   1854c:	cmp	r8, r6
   18550:	mov	r5, #1
   18554:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18558:	movcc	r1, #39	; 0x27
   1855c:	strbcc	r1, [r2, r8]
   18560:	add	r1, r8, #1
   18564:	cmp	r1, r6
   18568:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1856c:	movcc	r2, #36	; 0x24
   18570:	strbcc	r2, [r3, r1]
   18574:	add	r1, r8, #2
   18578:	add	r8, r8, #3
   1857c:	cmp	r1, r6
   18580:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18584:	movcc	r2, #39	; 0x27
   18588:	strbcc	r2, [r3, r1]
   1858c:	cmp	r8, r6
   18590:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18594:	movcc	r1, #92	; 0x5c
   18598:	strbcc	r1, [r2, r8]
   1859c:	add	r8, r8, #1
   185a0:	cmp	r8, r6
   185a4:	and	r4, r4, sl
   185a8:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   185ac:	strbcc	r0, [r1, r8]
   185b0:	add	r8, r8, #1
   185b4:	add	r7, r7, #1
   185b8:	b	17f9c <__assert_fail@plt+0x651c>
   185bc:	ldr	r0, [sp, #28]
   185c0:	mov	sl, #0
   185c4:	mov	r9, #0
   185c8:	mov	r5, #0
   185cc:	cmp	r0, #0
   185d0:	beq	184e4 <__assert_fail@plt+0x6a64>
   185d4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   185d8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   185dc:	b	185b4 <__assert_fail@plt+0x6b34>
   185e0:	mov	r0, #0
   185e4:	cmn	lr, #1
   185e8:	str	r6, [sp, #76]	; 0x4c
   185ec:	str	r4, [sp, #20]
   185f0:	str	r0, [fp, #-36]	; 0xffffffdc
   185f4:	str	r0, [fp, #-40]	; 0xffffffd8
   185f8:	bne	1860c <__assert_fail@plt+0x6b8c>
   185fc:	mov	r0, ip
   18600:	bl	118dc <strlen@plt>
   18604:	ldr	ip, [fp, #-84]	; 0xffffffac
   18608:	mov	lr, r0
   1860c:	add	r0, ip, r7
   18610:	mov	sl, #1
   18614:	mov	r6, #0
   18618:	sub	r4, fp, #40	; 0x28
   1861c:	str	lr, [sp, #80]	; 0x50
   18620:	str	r0, [sp, #36]	; 0x24
   18624:	str	r6, [sp, #40]	; 0x28
   18628:	add	r6, r6, r7
   1862c:	sub	r0, fp, #44	; 0x2c
   18630:	mov	r3, r4
   18634:	add	r1, ip, r6
   18638:	sub	r2, lr, r6
   1863c:	bl	1ab2c <__assert_fail@plt+0x90ac>
   18640:	cmp	r0, #0
   18644:	beq	18b50 <__assert_fail@plt+0x70d0>
   18648:	cmn	r0, #1
   1864c:	beq	18b10 <__assert_fail@plt+0x7090>
   18650:	ldr	lr, [sp, #80]	; 0x50
   18654:	cmn	r0, #2
   18658:	beq	18b18 <__assert_fail@plt+0x7098>
   1865c:	ldr	r2, [sp, #56]	; 0x38
   18660:	cmp	r0, #2
   18664:	mov	r1, #0
   18668:	movwcc	r1, #1
   1866c:	eor	r2, r2, #1
   18670:	orrs	r1, r2, r1
   18674:	bne	186c0 <__assert_fail@plt+0x6c40>
   18678:	ldr	r1, [sp, #40]	; 0x28
   1867c:	ldr	r2, [sp, #36]	; 0x24
   18680:	add	ip, r2, r1
   18684:	mov	r2, #1
   18688:	ldrb	r3, [ip, r2]
   1868c:	sub	r6, r3, #94	; 0x5e
   18690:	cmp	r6, #30
   18694:	bhi	186a8 <__assert_fail@plt+0x6c28>
   18698:	mov	r4, #1
   1869c:	mov	r1, #1073741829	; 0x40000005
   186a0:	tst	r1, r4, lsl r6
   186a4:	bne	18c1c <__assert_fail@plt+0x719c>
   186a8:	sub	r3, r3, #91	; 0x5b
   186ac:	cmp	r3, #2
   186b0:	bcc	18c1c <__assert_fail@plt+0x719c>
   186b4:	add	r2, r2, #1
   186b8:	cmp	r2, r0
   186bc:	bcc	18688 <__assert_fail@plt+0x6c08>
   186c0:	ldr	r6, [sp, #40]	; 0x28
   186c4:	add	r6, r0, r6
   186c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   186cc:	bl	117f8 <iswprint@plt>
   186d0:	cmp	r0, #0
   186d4:	sub	r4, fp, #40	; 0x28
   186d8:	movwne	r0, #1
   186dc:	and	sl, sl, r0
   186e0:	mov	r0, r4
   186e4:	bl	11738 <mbsinit@plt>
   186e8:	ldr	lr, [sp, #80]	; 0x50
   186ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   186f0:	cmp	r0, #0
   186f4:	beq	18624 <__assert_fail@plt+0x6ba4>
   186f8:	b	18b58 <__assert_fail@plt+0x70d8>
   186fc:	mvn	lr, #0
   18700:	mov	r9, #0
   18704:	b	1827c <__assert_fail@plt+0x67fc>
   18708:	ldr	r0, [sp, #24]
   1870c:	cmp	r0, #0
   18710:	beq	187c8 <__assert_fail@plt+0x6d48>
   18714:	add	r0, r7, #2
   18718:	cmp	r0, lr
   1871c:	bcs	187c8 <__assert_fail@plt+0x6d48>
   18720:	add	r1, ip, r7
   18724:	ldrb	r1, [r1, #1]
   18728:	cmp	r1, #63	; 0x3f
   1872c:	bne	187c8 <__assert_fail@plt+0x6d48>
   18730:	ldrb	r5, [ip, r0]
   18734:	sub	r1, r5, #33	; 0x21
   18738:	cmp	r1, #29
   1873c:	bhi	187c8 <__assert_fail@plt+0x6d48>
   18740:	movw	r3, #20929	; 0x51c1
   18744:	mov	r2, #1
   18748:	movt	r3, #14336	; 0x3800
   1874c:	tst	r3, r2, lsl r1
   18750:	beq	187c8 <__assert_fail@plt+0x6d48>
   18754:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18758:	tst	r1, #1
   1875c:	bne	18d30 <__assert_fail@plt+0x72b0>
   18760:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18764:	mov	r7, r0
   18768:	cmp	r8, r1
   1876c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18770:	movcc	r1, #63	; 0x3f
   18774:	strbcc	r1, [r2, r8]
   18778:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1877c:	add	r1, r8, #1
   18780:	cmp	r1, r2
   18784:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18788:	movcc	r2, #34	; 0x22
   1878c:	strbcc	r2, [r3, r1]
   18790:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18794:	add	r1, r8, #2
   18798:	cmp	r1, r2
   1879c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   187a0:	movcc	r2, #34	; 0x22
   187a4:	strbcc	r2, [r3, r1]
   187a8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   187ac:	add	r1, r8, #3
   187b0:	add	r8, r8, #4
   187b4:	cmp	r1, r2
   187b8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   187bc:	movcc	r2, #63	; 0x3f
   187c0:	strbcc	r2, [r3, r1]
   187c4:	b	187cc <__assert_fail@plt+0x6d4c>
   187c8:	mov	r5, #63	; 0x3f
   187cc:	mov	sl, #0
   187d0:	b	1827c <__assert_fail@plt+0x67fc>
   187d4:	str	r0, [sp, #40]	; 0x28
   187d8:	add	r0, r2, r7
   187dc:	str	r6, [sp, #76]	; 0x4c
   187e0:	add	r1, r7, #1
   187e4:	ldr	lr, [sp, #80]	; 0x50
   187e8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   187ec:	ldr	r6, [fp, #-52]	; 0xffffffcc
   187f0:	mov	r3, #0
   187f4:	str	r0, [sp, #36]	; 0x24
   187f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   187fc:	b	18890 <__assert_fail@plt+0x6e10>
   18800:	str	r0, [sp, #76]	; 0x4c
   18804:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18808:	cmp	r9, #0
   1880c:	movwne	r9, #1
   18810:	mvn	r7, r0
   18814:	orr	r7, r7, r9
   18818:	tst	r7, #1
   1881c:	bne	1886c <__assert_fail@plt+0x6dec>
   18820:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18824:	cmp	r8, r6
   18828:	bcs	18840 <__assert_fail@plt+0x6dc0>
   1882c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   18830:	mov	r2, r4
   18834:	mov	r4, #39	; 0x27
   18838:	strb	r4, [r7, r8]
   1883c:	mov	r4, r2
   18840:	add	r7, r8, #1
   18844:	cmp	r7, r6
   18848:	bcs	18860 <__assert_fail@plt+0x6de0>
   1884c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18850:	mov	r2, r4
   18854:	mov	r4, #39	; 0x27
   18858:	strb	r4, [r0, r7]
   1885c:	mov	r4, r2
   18860:	add	r8, r8, #2
   18864:	mov	r0, #0
   18868:	b	18874 <__assert_fail@plt+0x6df4>
   1886c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18870:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18874:	cmp	r8, r6
   18878:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1887c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18880:	strbcc	r5, [r2, r8]
   18884:	add	r8, r8, #1
   18888:	ldrb	r5, [ip, r1]
   1888c:	add	r1, r1, #1
   18890:	ldr	r2, [sp, #40]	; 0x28
   18894:	tst	r2, #1
   18898:	beq	188d4 <__assert_fail@plt+0x6e54>
   1889c:	ldr	r2, [sp, #76]	; 0x4c
   188a0:	str	r0, [fp, #-48]	; 0xffffffd0
   188a4:	tst	r2, #1
   188a8:	beq	188cc <__assert_fail@plt+0x6e4c>
   188ac:	cmp	r8, r6
   188b0:	bcs	188c8 <__assert_fail@plt+0x6e48>
   188b4:	ldr	r6, [fp, #-56]	; 0xffffffc8
   188b8:	mov	r2, r4
   188bc:	mov	r4, #92	; 0x5c
   188c0:	strb	r4, [r6, r8]
   188c4:	mov	r4, r2
   188c8:	add	r8, r8, #1
   188cc:	mov	r0, #0
   188d0:	b	189c8 <__assert_fail@plt+0x6f48>
   188d4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   188d8:	tst	r2, #1
   188dc:	bne	18c28 <__assert_fail@plt+0x71a8>
   188e0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   188e4:	cmp	r7, #2
   188e8:	movwne	r3, #1
   188ec:	orr	r3, r3, r0
   188f0:	tst	r3, #1
   188f4:	bne	18950 <__assert_fail@plt+0x6ed0>
   188f8:	cmp	r8, r6
   188fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18900:	movcc	r3, #39	; 0x27
   18904:	strbcc	r3, [r2, r8]
   18908:	add	r3, r8, #1
   1890c:	cmp	r3, r6
   18910:	bcs	18928 <__assert_fail@plt+0x6ea8>
   18914:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18918:	mov	r7, r4
   1891c:	mov	r4, #36	; 0x24
   18920:	strb	r4, [r2, r3]
   18924:	mov	r4, r7
   18928:	add	r3, r8, #2
   1892c:	cmp	r3, r6
   18930:	bcs	18948 <__assert_fail@plt+0x6ec8>
   18934:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18938:	mov	r7, r4
   1893c:	mov	r4, #39	; 0x27
   18940:	strb	r4, [r2, r3]
   18944:	mov	r4, r7
   18948:	add	r8, r8, #3
   1894c:	mov	r0, #1
   18950:	cmp	r8, r6
   18954:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18958:	movcc	r3, #92	; 0x5c
   1895c:	strbcc	r3, [r2, r8]
   18960:	add	r3, r8, #1
   18964:	cmp	r3, r6
   18968:	bcs	18988 <__assert_fail@plt+0x6f08>
   1896c:	mov	r2, r4
   18970:	and	r7, r5, #192	; 0xc0
   18974:	mov	r4, #48	; 0x30
   18978:	orr	r7, r4, r7, lsr #6
   1897c:	mov	r4, r2
   18980:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18984:	strb	r7, [r2, r3]
   18988:	add	r3, r8, #2
   1898c:	cmp	r3, r6
   18990:	bcs	189b0 <__assert_fail@plt+0x6f30>
   18994:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18998:	mov	r6, r4
   1899c:	lsr	r7, r5, #3
   189a0:	mov	r4, #6
   189a4:	bfi	r7, r4, #3, #29
   189a8:	mov	r4, r6
   189ac:	strb	r7, [r2, r3]
   189b0:	str	r0, [fp, #-48]	; 0xffffffd0
   189b4:	ldr	r0, [sp, #76]	; 0x4c
   189b8:	mov	r3, #6
   189bc:	add	r8, r8, #3
   189c0:	bfi	r5, r3, #3, #29
   189c4:	mov	r3, #1
   189c8:	ldr	r2, [sp, #36]	; 0x24
   189cc:	and	r9, r3, #1
   189d0:	cmp	r2, r1
   189d4:	bhi	18800 <__assert_fail@plt+0x6d80>
   189d8:	cmp	r9, #0
   189dc:	sub	r7, r1, #1
   189e0:	mov	r0, r5
   189e4:	movwne	r9, #1
   189e8:	cmp	r9, #0
   189ec:	bne	18a30 <__assert_fail@plt+0x6fb0>
   189f0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   189f4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   189f8:	tst	r5, #1
   189fc:	beq	185a0 <__assert_fail@plt+0x6b20>
   18a00:	cmp	r8, r6
   18a04:	mov	r5, #0
   18a08:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18a0c:	movcc	r1, #39	; 0x27
   18a10:	strbcc	r1, [r2, r8]
   18a14:	add	r1, r8, #1
   18a18:	add	r8, r8, #2
   18a1c:	cmp	r1, r6
   18a20:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18a24:	movcc	r2, #39	; 0x27
   18a28:	strbcc	r2, [r3, r1]
   18a2c:	b	185a0 <__assert_fail@plt+0x6b20>
   18a30:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18a34:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18a38:	b	185a0 <__assert_fail@plt+0x6b20>
   18a3c:	cmp	r8, r1
   18a40:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18a44:	movcc	r0, #39	; 0x27
   18a48:	strbcc	r0, [r2, r8]
   18a4c:	add	r0, r8, #1
   18a50:	cmp	r0, r1
   18a54:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18a58:	movcc	r2, #36	; 0x24
   18a5c:	strbcc	r2, [r3, r0]
   18a60:	add	r0, r8, #2
   18a64:	cmp	r0, r1
   18a68:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18a6c:	movcc	r2, #39	; 0x27
   18a70:	strbcc	r2, [r3, r0]
   18a74:	add	r0, r8, #3
   18a78:	mov	r3, #1
   18a7c:	cmp	r0, r1
   18a80:	add	r8, r0, #1
   18a84:	str	r3, [fp, #-48]	; 0xffffffd0
   18a88:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18a8c:	movcc	r1, #92	; 0x5c
   18a90:	strbcc	r1, [r2, r0]
   18a94:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18a98:	cmp	r1, #2
   18a9c:	beq	18b00 <__assert_fail@plt+0x7080>
   18aa0:	add	r1, r7, #1
   18aa4:	mov	sl, #0
   18aa8:	mov	r9, #1
   18aac:	mov	r5, #48	; 0x30
   18ab0:	cmp	r1, lr
   18ab4:	bcs	1827c <__assert_fail@plt+0x67fc>
   18ab8:	ldrb	r1, [ip, r1]
   18abc:	sub	r1, r1, #48	; 0x30
   18ac0:	uxtb	r1, r1
   18ac4:	cmp	r1, #9
   18ac8:	bhi	1827c <__assert_fail@plt+0x67fc>
   18acc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18ad0:	cmp	r8, r1
   18ad4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   18ad8:	movcc	r1, #48	; 0x30
   18adc:	strbcc	r1, [r2, r8]
   18ae0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18ae4:	add	r1, r0, #2
   18ae8:	add	r8, r0, #3
   18aec:	cmp	r1, r2
   18af0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   18af4:	movcc	r2, #48	; 0x30
   18af8:	strbcc	r2, [r3, r1]
   18afc:	b	1827c <__assert_fail@plt+0x67fc>
   18b00:	mov	r0, #48	; 0x30
   18b04:	mov	r9, #1
   18b08:	mov	sl, #0
   18b0c:	b	18514 <__assert_fail@plt+0x6a94>
   18b10:	mov	sl, #0
   18b14:	b	18b50 <__assert_fail@plt+0x70d0>
   18b18:	mov	sl, #0
   18b1c:	cmp	lr, r6
   18b20:	bls	18b50 <__assert_fail@plt+0x70d0>
   18b24:	ldr	ip, [fp, #-84]	; 0xffffffac
   18b28:	ldr	r6, [sp, #40]	; 0x28
   18b2c:	ldr	r0, [sp, #36]	; 0x24
   18b30:	ldrb	r0, [r0, r6]
   18b34:	cmp	r0, #0
   18b38:	beq	18b58 <__assert_fail@plt+0x70d8>
   18b3c:	add	r6, r6, #1
   18b40:	add	r0, r7, r6
   18b44:	cmp	r0, lr
   18b48:	bcc	18b2c <__assert_fail@plt+0x70ac>
   18b4c:	b	18b58 <__assert_fail@plt+0x70d8>
   18b50:	ldr	ip, [fp, #-84]	; 0xffffffac
   18b54:	ldr	r6, [sp, #40]	; 0x28
   18b58:	mov	r1, r6
   18b5c:	ldr	r4, [sp, #20]
   18b60:	ldr	r6, [sp, #76]	; 0x4c
   18b64:	b	18458 <__assert_fail@plt+0x69d8>
   18b68:	mov	lr, r7
   18b6c:	b	18b74 <__assert_fail@plt+0x70f4>
   18b70:	mvn	lr, #0
   18b74:	ldr	r9, [fp, #-64]	; 0xffffffc0
   18b78:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18b7c:	eor	r0, r9, #2
   18b80:	orr	r0, r0, r8
   18b84:	clz	r0, r0
   18b88:	lsr	r0, r0, #5
   18b8c:	tst	r1, r0
   18b90:	bne	18c8c <__assert_fail@plt+0x720c>
   18b94:	mov	r0, r1
   18b98:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18b9c:	cmp	r9, #2
   18ba0:	movwne	r1, #1
   18ba4:	orr	r0, r0, r1
   18ba8:	tst	r0, #1
   18bac:	bne	18ccc <__assert_fail@plt+0x724c>
   18bb0:	ldr	r0, [sp, #52]	; 0x34
   18bb4:	ldr	r1, [sp, #68]	; 0x44
   18bb8:	str	lr, [sp, #80]	; 0x50
   18bbc:	eor	r0, r0, #1
   18bc0:	tst	r0, #1
   18bc4:	bne	18ccc <__assert_fail@plt+0x724c>
   18bc8:	tst	r4, #1
   18bcc:	bne	18c94 <__assert_fail@plt+0x7214>
   18bd0:	mov	r7, #0
   18bd4:	cmp	r1, #0
   18bd8:	beq	18cc4 <__assert_fail@plt+0x7244>
   18bdc:	ldr	r0, [sp, #84]	; 0x54
   18be0:	mov	r3, #0
   18be4:	cmp	r6, #0
   18be8:	mov	r2, #0
   18bec:	mov	r4, r1
   18bf0:	str	r3, [fp, #-72]	; 0xffffffb8
   18bf4:	beq	17d30 <__assert_fail@plt+0x62b0>
   18bf8:	b	18ccc <__assert_fail@plt+0x724c>
   18bfc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18c00:	b	18c28 <__assert_fail@plt+0x71a8>
   18c04:	ldr	ip, [fp, #-84]	; 0xffffffac
   18c08:	mov	r2, #1
   18c0c:	mov	lr, r4
   18c10:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18c14:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18c18:	b	18c2c <__assert_fail@plt+0x71ac>
   18c1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18c20:	mov	r7, #2
   18c24:	ldr	r6, [fp, #-52]	; 0xffffffcc
   18c28:	ldr	r2, [sp, #84]	; 0x54
   18c2c:	mov	r0, #0
   18c30:	ldr	r1, [fp, #12]
   18c34:	tst	r2, #1
   18c38:	mov	r2, r7
   18c3c:	mov	r3, lr
   18c40:	str	r0, [sp, #8]
   18c44:	ldr	r0, [sp, #64]	; 0x40
   18c48:	movwne	r2, #4
   18c4c:	cmp	r7, #2
   18c50:	movne	r2, r7
   18c54:	str	r2, [sp]
   18c58:	mov	r2, ip
   18c5c:	bic	r1, r1, #2
   18c60:	str	r0, [sp, #12]
   18c64:	ldr	r0, [sp, #72]	; 0x48
   18c68:	str	r1, [sp, #4]
   18c6c:	mov	r1, r6
   18c70:	str	r0, [sp, #16]
   18c74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18c78:	bl	17cb8 <__assert_fail@plt+0x6238>
   18c7c:	mov	r8, r0
   18c80:	mov	r0, r8
   18c84:	sub	sp, fp, #28
   18c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c8c:	mov	r7, #2
   18c90:	b	18c28 <__assert_fail@plt+0x71a8>
   18c94:	mov	r0, #5
   18c98:	ldr	r2, [fp, #-84]	; 0xffffffac
   18c9c:	ldr	r3, [sp, #80]	; 0x50
   18ca0:	str	r0, [sp]
   18ca4:	ldr	r0, [fp, #12]
   18ca8:	str	r0, [sp, #4]
   18cac:	ldr	r0, [fp, #16]
   18cb0:	str	r0, [sp, #8]
   18cb4:	ldr	r0, [sp, #64]	; 0x40
   18cb8:	str	r0, [sp, #12]
   18cbc:	ldr	r0, [sp, #72]	; 0x48
   18cc0:	b	18c70 <__assert_fail@plt+0x71f0>
   18cc4:	mov	r0, #0
   18cc8:	str	r0, [fp, #-72]	; 0xffffffb8
   18ccc:	ldr	r1, [sp, #92]	; 0x5c
   18cd0:	cmp	r1, #0
   18cd4:	beq	18d14 <__assert_fail@plt+0x7294>
   18cd8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18cdc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18ce0:	tst	r0, #1
   18ce4:	bne	18d18 <__assert_fail@plt+0x7298>
   18ce8:	ldrb	r0, [r1]
   18cec:	cmp	r0, #0
   18cf0:	beq	18d18 <__assert_fail@plt+0x7298>
   18cf4:	add	r1, r1, #1
   18cf8:	cmp	r8, r6
   18cfc:	strbcc	r0, [r2, r8]
   18d00:	add	r8, r8, #1
   18d04:	ldrb	r0, [r1], #1
   18d08:	cmp	r0, #0
   18d0c:	bne	18cf8 <__assert_fail@plt+0x7278>
   18d10:	b	18d18 <__assert_fail@plt+0x7298>
   18d14:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18d18:	cmp	r8, r6
   18d1c:	movcc	r0, #0
   18d20:	strbcc	r0, [r2, r8]
   18d24:	b	18c80 <__assert_fail@plt+0x7200>
   18d28:	mov	r2, #1
   18d2c:	b	18c10 <__assert_fail@plt+0x7190>
   18d30:	mov	r7, #5
   18d34:	b	18c24 <__assert_fail@plt+0x71a4>
   18d38:	bl	11a68 <abort@plt>
   18d3c:	mov	r3, r2
   18d40:	mov	r2, #0
   18d44:	b	18d48 <__assert_fail@plt+0x72c8>
   18d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d4c:	add	fp, sp, #28
   18d50:	sub	sp, sp, #36	; 0x24
   18d54:	movw	r8, #520	; 0x208
   18d58:	cmp	r3, #0
   18d5c:	mov	r4, r2
   18d60:	str	r2, [sp, #24]
   18d64:	mov	r5, r1
   18d68:	mov	r6, r0
   18d6c:	str	r0, [sp, #20]
   18d70:	movt	r8, #3
   18d74:	movne	r8, r3
   18d78:	bl	1190c <__errno_location@plt>
   18d7c:	str	r0, [sp, #28]
   18d80:	cmp	r4, #0
   18d84:	add	sl, r8, #8
   18d88:	ldm	r8, {r3, r9}
   18d8c:	ldr	r7, [r0]
   18d90:	ldr	r1, [r8, #40]	; 0x28
   18d94:	ldr	r2, [r8, #44]	; 0x2c
   18d98:	mov	r0, #0
   18d9c:	orreq	r9, r9, #1
   18da0:	str	r7, [sp, #32]
   18da4:	mov	r7, r5
   18da8:	stm	sp, {r3, r9, sl}
   18dac:	str	r1, [sp, #12]
   18db0:	str	r2, [sp, #16]
   18db4:	mov	r1, #0
   18db8:	mov	r2, r6
   18dbc:	mov	r3, r5
   18dc0:	bl	17cb8 <__assert_fail@plt+0x6238>
   18dc4:	add	r4, r0, #1
   18dc8:	mov	r5, r0
   18dcc:	mov	r0, r4
   18dd0:	bl	1a048 <__assert_fail@plt+0x85c8>
   18dd4:	mov	r6, r0
   18dd8:	ldr	r0, [r8]
   18ddc:	ldr	r2, [r8, #44]	; 0x2c
   18de0:	ldr	r1, [r8, #40]	; 0x28
   18de4:	mov	r3, r7
   18de8:	stm	sp, {r0, r9, sl}
   18dec:	str	r2, [sp, #16]
   18df0:	str	r1, [sp, #12]
   18df4:	mov	r0, r6
   18df8:	mov	r1, r4
   18dfc:	ldr	r2, [sp, #20]
   18e00:	bl	17cb8 <__assert_fail@plt+0x6238>
   18e04:	ldr	r0, [sp, #24]
   18e08:	ldr	r1, [sp, #32]
   18e0c:	ldr	r2, [sp, #28]
   18e10:	cmp	r0, #0
   18e14:	str	r1, [r2]
   18e18:	strne	r5, [r0]
   18e1c:	mov	r0, r6
   18e20:	sub	sp, fp, #28
   18e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18e2c:	add	fp, sp, #24
   18e30:	movw	r5, #396	; 0x18c
   18e34:	movw	r8, #392	; 0x188
   18e38:	movt	r5, #3
   18e3c:	movt	r8, #3
   18e40:	ldr	r0, [r5]
   18e44:	ldr	r4, [r8]
   18e48:	cmp	r0, #2
   18e4c:	blt	18e78 <__assert_fail@plt+0x73f8>
   18e50:	add	r7, r4, #12
   18e54:	mov	r6, #0
   18e58:	ldr	r0, [r7, r6, lsl #3]
   18e5c:	bl	17404 <__assert_fail@plt+0x5984>
   18e60:	ldr	r1, [r5]
   18e64:	add	r2, r6, #2
   18e68:	add	r0, r6, #1
   18e6c:	mov	r6, r0
   18e70:	cmp	r2, r1
   18e74:	blt	18e58 <__assert_fail@plt+0x73d8>
   18e78:	ldr	r0, [r4, #4]
   18e7c:	movw	r7, #568	; 0x238
   18e80:	movt	r7, #3
   18e84:	cmp	r0, r7
   18e88:	beq	18ea0 <__assert_fail@plt+0x7420>
   18e8c:	bl	17404 <__assert_fail@plt+0x5984>
   18e90:	movw	r0, #400	; 0x190
   18e94:	mov	r6, #256	; 0x100
   18e98:	movt	r0, #3
   18e9c:	strd	r6, [r0]
   18ea0:	movw	r6, #400	; 0x190
   18ea4:	movt	r6, #3
   18ea8:	cmp	r4, r6
   18eac:	beq	18ebc <__assert_fail@plt+0x743c>
   18eb0:	mov	r0, r4
   18eb4:	bl	17404 <__assert_fail@plt+0x5984>
   18eb8:	str	r6, [r8]
   18ebc:	mov	r0, #1
   18ec0:	str	r0, [r5]
   18ec4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18ec8:	movw	r3, #520	; 0x208
   18ecc:	mvn	r2, #0
   18ed0:	movt	r3, #3
   18ed4:	b	18ed8 <__assert_fail@plt+0x7458>
   18ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18edc:	add	fp, sp, #28
   18ee0:	sub	sp, sp, #44	; 0x2c
   18ee4:	mov	r7, r3
   18ee8:	str	r2, [sp, #36]	; 0x24
   18eec:	str	r1, [sp, #32]
   18ef0:	mov	r5, r0
   18ef4:	bl	1190c <__errno_location@plt>
   18ef8:	cmp	r5, #0
   18efc:	blt	19068 <__assert_fail@plt+0x75e8>
   18f00:	cmn	r5, #-2147483647	; 0x80000001
   18f04:	beq	19068 <__assert_fail@plt+0x75e8>
   18f08:	movw	r8, #396	; 0x18c
   18f0c:	movw	r4, #392	; 0x188
   18f10:	str	r0, [sp, #28]
   18f14:	ldr	r0, [r0]
   18f18:	movt	r8, #3
   18f1c:	movt	r4, #3
   18f20:	ldr	r1, [r8]
   18f24:	ldr	r6, [r4]
   18f28:	str	r0, [sp, #24]
   18f2c:	cmp	r1, r5
   18f30:	ble	18f3c <__assert_fail@plt+0x74bc>
   18f34:	mov	sl, r6
   18f38:	b	18fa4 <__assert_fail@plt+0x7524>
   18f3c:	movw	r9, #400	; 0x190
   18f40:	mov	r0, #8
   18f44:	add	r2, r5, #1
   18f48:	str	r1, [fp, #-32]	; 0xffffffe0
   18f4c:	mvn	r3, #-2147483648	; 0x80000000
   18f50:	movt	r9, #3
   18f54:	str	r0, [sp]
   18f58:	sub	r2, r2, r1
   18f5c:	sub	r1, fp, #32
   18f60:	subs	r0, r6, r9
   18f64:	movne	r0, r6
   18f68:	bl	1a178 <__assert_fail@plt+0x86f8>
   18f6c:	cmp	r6, r9
   18f70:	mov	sl, r0
   18f74:	str	r0, [r4]
   18f78:	ldrdeq	r0, [r9]
   18f7c:	stmeq	sl, {r0, r1}
   18f80:	ldr	r1, [r8]
   18f84:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18f88:	add	r0, sl, r1, lsl #3
   18f8c:	sub	r1, r2, r1
   18f90:	lsl	r2, r1, #3
   18f94:	mov	r1, #0
   18f98:	bl	1193c <memset@plt>
   18f9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18fa0:	str	r0, [r8]
   18fa4:	mov	r9, sl
   18fa8:	ldr	r6, [r9, r5, lsl #3]!
   18fac:	ldr	r4, [r9, #4]!
   18fb0:	ldm	r7, {r0, r1}
   18fb4:	ldr	r2, [r7, #40]	; 0x28
   18fb8:	ldr	r3, [r7, #44]	; 0x2c
   18fbc:	orr	r8, r1, #1
   18fc0:	add	r1, r7, #8
   18fc4:	stm	sp, {r0, r8}
   18fc8:	add	r0, sp, #8
   18fcc:	str	r1, [sp, #20]
   18fd0:	stm	r0, {r1, r2, r3}
   18fd4:	mov	r0, r4
   18fd8:	mov	r1, r6
   18fdc:	ldr	r2, [sp, #32]
   18fe0:	ldr	r3, [sp, #36]	; 0x24
   18fe4:	bl	17cb8 <__assert_fail@plt+0x6238>
   18fe8:	cmp	r6, r0
   18fec:	bhi	19050 <__assert_fail@plt+0x75d0>
   18ff0:	add	r6, r0, #1
   18ff4:	movw	r0, #568	; 0x238
   18ff8:	movt	r0, #3
   18ffc:	str	r6, [sl, r5, lsl #3]
   19000:	cmp	r4, r0
   19004:	beq	19010 <__assert_fail@plt+0x7590>
   19008:	mov	r0, r4
   1900c:	bl	17404 <__assert_fail@plt+0x5984>
   19010:	mov	r0, r6
   19014:	bl	1a048 <__assert_fail@plt+0x85c8>
   19018:	str	r0, [r9]
   1901c:	mov	r4, r0
   19020:	add	r3, sp, #8
   19024:	ldr	r0, [r7]
   19028:	ldr	r1, [r7, #40]	; 0x28
   1902c:	ldr	r2, [r7, #44]	; 0x2c
   19030:	stm	sp, {r0, r8}
   19034:	ldr	r0, [sp, #20]
   19038:	stm	r3, {r0, r1, r2}
   1903c:	mov	r0, r4
   19040:	mov	r1, r6
   19044:	ldr	r2, [sp, #32]
   19048:	ldr	r3, [sp, #36]	; 0x24
   1904c:	bl	17cb8 <__assert_fail@plt+0x6238>
   19050:	ldr	r0, [sp, #28]
   19054:	ldr	r1, [sp, #24]
   19058:	str	r1, [r0]
   1905c:	mov	r0, r4
   19060:	sub	sp, fp, #28
   19064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19068:	bl	11a68 <abort@plt>
   1906c:	movw	r3, #520	; 0x208
   19070:	movt	r3, #3
   19074:	b	18ed8 <__assert_fail@plt+0x7458>
   19078:	movw	r3, #520	; 0x208
   1907c:	mov	r1, r0
   19080:	mov	r0, #0
   19084:	mvn	r2, #0
   19088:	movt	r3, #3
   1908c:	b	18ed8 <__assert_fail@plt+0x7458>
   19090:	movw	r3, #520	; 0x208
   19094:	mov	r2, r1
   19098:	mov	r1, r0
   1909c:	mov	r0, #0
   190a0:	movt	r3, #3
   190a4:	b	18ed8 <__assert_fail@plt+0x7458>
   190a8:	push	{fp, lr}
   190ac:	mov	fp, sp
   190b0:	sub	sp, sp, #48	; 0x30
   190b4:	vmov.i32	q8, #0	; 0x00000000
   190b8:	mov	ip, #32
   190bc:	mov	r3, sp
   190c0:	mov	lr, r2
   190c4:	cmp	r1, #10
   190c8:	add	r2, r3, #16
   190cc:	vst1.64	{d16-d17}, [r3], ip
   190d0:	vst1.64	{d16-d17}, [r3]
   190d4:	vst1.64	{d16-d17}, [r2]
   190d8:	beq	190f8 <__assert_fail@plt+0x7678>
   190dc:	str	r1, [sp]
   190e0:	mov	r3, sp
   190e4:	mov	r1, lr
   190e8:	mvn	r2, #0
   190ec:	bl	18ed8 <__assert_fail@plt+0x7458>
   190f0:	mov	sp, fp
   190f4:	pop	{fp, pc}
   190f8:	bl	11a68 <abort@plt>
   190fc:	push	{r4, sl, fp, lr}
   19100:	add	fp, sp, #8
   19104:	sub	sp, sp, #48	; 0x30
   19108:	mov	ip, r3
   1910c:	mov	r3, sp
   19110:	vmov.i32	q8, #0	; 0x00000000
   19114:	mov	lr, #32
   19118:	cmp	r1, #10
   1911c:	add	r4, r3, #16
   19120:	vst1.64	{d16-d17}, [r3], lr
   19124:	vst1.64	{d16-d17}, [r3]
   19128:	vst1.64	{d16-d17}, [r4]
   1912c:	beq	1914c <__assert_fail@plt+0x76cc>
   19130:	str	r1, [sp]
   19134:	mov	r1, r2
   19138:	mov	r3, sp
   1913c:	mov	r2, ip
   19140:	bl	18ed8 <__assert_fail@plt+0x7458>
   19144:	sub	sp, fp, #8
   19148:	pop	{r4, sl, fp, pc}
   1914c:	bl	11a68 <abort@plt>
   19150:	mov	r2, r1
   19154:	mov	r1, r0
   19158:	mov	r0, #0
   1915c:	b	190a8 <__assert_fail@plt+0x7628>
   19160:	mov	r3, r2
   19164:	mov	r2, r1
   19168:	mov	r1, r0
   1916c:	mov	r0, #0
   19170:	b	190fc <__assert_fail@plt+0x767c>
   19174:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19178:	add	fp, sp, #24
   1917c:	sub	sp, sp, #48	; 0x30
   19180:	movw	r8, #520	; 0x208
   19184:	mov	lr, r0
   19188:	mov	r3, sp
   1918c:	mov	ip, r1
   19190:	movt	r8, #3
   19194:	mov	r1, r3
   19198:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1919c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   191a0:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   191a4:	stm	r1, {r0, r4, r5, r6, r7, r9}
   191a8:	ubfx	r0, r2, #5, #3
   191ac:	and	r2, r2, #31
   191b0:	mov	r4, #1
   191b4:	add	r0, r3, r0, lsl #2
   191b8:	ldr	r1, [r0, #8]
   191bc:	bic	r4, r4, r1, lsr r2
   191c0:	eor	r1, r1, r4, lsl r2
   191c4:	mov	r2, ip
   191c8:	str	r1, [r0, #8]
   191cc:	mov	r0, #0
   191d0:	mov	r1, lr
   191d4:	bl	18ed8 <__assert_fail@plt+0x7458>
   191d8:	sub	sp, fp, #24
   191dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   191e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   191e4:	add	fp, sp, #24
   191e8:	sub	sp, sp, #48	; 0x30
   191ec:	movw	lr, #520	; 0x208
   191f0:	mov	ip, r0
   191f4:	mov	r3, sp
   191f8:	movt	lr, #3
   191fc:	mov	r2, r3
   19200:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   19204:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   19208:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   1920c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   19210:	ubfx	r0, r1, #5, #3
   19214:	and	r1, r1, #31
   19218:	mov	r7, #1
   1921c:	add	r0, r3, r0, lsl #2
   19220:	ldr	r2, [r0, #8]
   19224:	bic	r7, r7, r2, lsr r1
   19228:	eor	r1, r2, r7, lsl r1
   1922c:	mvn	r2, #0
   19230:	str	r1, [r0, #8]
   19234:	mov	r0, #0
   19238:	mov	r1, ip
   1923c:	bl	18ed8 <__assert_fail@plt+0x7458>
   19240:	sub	sp, fp, #24
   19244:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19248:	push	{r4, r5, r6, r7, fp, lr}
   1924c:	add	fp, sp, #16
   19250:	sub	sp, sp, #48	; 0x30
   19254:	movw	lr, #520	; 0x208
   19258:	mov	ip, r0
   1925c:	mov	r3, sp
   19260:	movt	lr, #3
   19264:	mov	r2, r3
   19268:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   1926c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   19270:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   19274:	stm	r2, {r0, r1, r4, r5, r6, r7}
   19278:	mov	r1, ip
   1927c:	mvn	r2, #0
   19280:	ldr	r0, [sp, #12]
   19284:	orr	r0, r0, #67108864	; 0x4000000
   19288:	str	r0, [sp, #12]
   1928c:	mov	r0, #0
   19290:	bl	18ed8 <__assert_fail@plt+0x7458>
   19294:	sub	sp, fp, #16
   19298:	pop	{r4, r5, r6, r7, fp, pc}
   1929c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   192a0:	add	fp, sp, #24
   192a4:	sub	sp, sp, #48	; 0x30
   192a8:	movw	r8, #520	; 0x208
   192ac:	mov	ip, r1
   192b0:	mov	lr, r0
   192b4:	mov	r3, sp
   192b8:	movt	r8, #3
   192bc:	mov	r2, r3
   192c0:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   192c4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   192c8:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   192cc:	stm	r2, {r0, r1, r4, r5, r6, r7}
   192d0:	mov	r1, lr
   192d4:	mov	r2, ip
   192d8:	ldr	r0, [sp, #12]
   192dc:	orr	r0, r0, #67108864	; 0x4000000
   192e0:	str	r0, [sp, #12]
   192e4:	mov	r0, #0
   192e8:	bl	18ed8 <__assert_fail@plt+0x7458>
   192ec:	sub	sp, fp, #24
   192f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   192f8:	add	fp, sp, #24
   192fc:	sub	sp, sp, #96	; 0x60
   19300:	mov	lr, sp
   19304:	vmov.i32	q8, #0	; 0x00000000
   19308:	mov	ip, r2
   1930c:	cmp	r1, #10
   19310:	add	r3, lr, #16
   19314:	mov	r2, lr
   19318:	vst1.64	{d16-d17}, [r3]
   1931c:	mov	r3, #28
   19320:	vst1.64	{d16-d17}, [r2], r3
   19324:	vst1.32	{d16-d17}, [r2]
   19328:	beq	19368 <__assert_fail@plt+0x78e8>
   1932c:	str	r1, [sp, #48]	; 0x30
   19330:	add	r3, sp, #48	; 0x30
   19334:	ldm	lr!, {r2, r4, r5, r6, r7}
   19338:	add	r1, r3, #4
   1933c:	stmia	r1!, {r2, r4, r5, r6, r7}
   19340:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   19344:	stm	r1, {r2, r4, r5, r6, r7, r8}
   19348:	mvn	r2, #0
   1934c:	ldr	r1, [sp, #60]	; 0x3c
   19350:	orr	r1, r1, #67108864	; 0x4000000
   19354:	str	r1, [sp, #60]	; 0x3c
   19358:	mov	r1, ip
   1935c:	bl	18ed8 <__assert_fail@plt+0x7458>
   19360:	sub	sp, fp, #24
   19364:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19368:	bl	11a68 <abort@plt>
   1936c:	push	{fp, lr}
   19370:	mov	fp, sp
   19374:	sub	sp, sp, #8
   19378:	mvn	ip, #0
   1937c:	str	ip, [sp]
   19380:	bl	1938c <__assert_fail@plt+0x790c>
   19384:	mov	sp, fp
   19388:	pop	{fp, pc}
   1938c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19390:	add	fp, sp, #24
   19394:	sub	sp, sp, #48	; 0x30
   19398:	movw	ip, #520	; 0x208
   1939c:	mov	lr, r3
   193a0:	mov	r3, sp
   193a4:	cmp	r1, #0
   193a8:	movt	ip, #3
   193ac:	cmpne	r2, #0
   193b0:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   193b4:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   193b8:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   193bc:	stm	r3, {r4, r5, r6, r7, r8, r9}
   193c0:	mov	r3, #10
   193c4:	str	r3, [sp]
   193c8:	bne	193d0 <__assert_fail@plt+0x7950>
   193cc:	bl	11a68 <abort@plt>
   193d0:	ldr	ip, [fp, #8]
   193d4:	str	r2, [sp, #44]	; 0x2c
   193d8:	str	r1, [sp, #40]	; 0x28
   193dc:	mov	r3, sp
   193e0:	mov	r1, lr
   193e4:	mov	r2, ip
   193e8:	bl	18ed8 <__assert_fail@plt+0x7458>
   193ec:	sub	sp, fp, #24
   193f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   193f4:	push	{fp, lr}
   193f8:	mov	fp, sp
   193fc:	sub	sp, sp, #8
   19400:	mov	r3, r2
   19404:	mov	r2, r1
   19408:	mov	r1, r0
   1940c:	mvn	r0, #0
   19410:	str	r0, [sp]
   19414:	mov	r0, #0
   19418:	bl	1938c <__assert_fail@plt+0x790c>
   1941c:	mov	sp, fp
   19420:	pop	{fp, pc}
   19424:	push	{fp, lr}
   19428:	mov	fp, sp
   1942c:	sub	sp, sp, #8
   19430:	mov	ip, r2
   19434:	mov	r2, r1
   19438:	mov	r1, r0
   1943c:	str	r3, [sp]
   19440:	mov	r0, #0
   19444:	mov	r3, ip
   19448:	bl	1938c <__assert_fail@plt+0x790c>
   1944c:	mov	sp, fp
   19450:	pop	{fp, pc}
   19454:	movw	r3, #408	; 0x198
   19458:	movt	r3, #3
   1945c:	b	18ed8 <__assert_fail@plt+0x7458>
   19460:	movw	r3, #408	; 0x198
   19464:	mov	r2, r1
   19468:	mov	r1, r0
   1946c:	mov	r0, #0
   19470:	movt	r3, #3
   19474:	b	18ed8 <__assert_fail@plt+0x7458>
   19478:	movw	r3, #408	; 0x198
   1947c:	mvn	r2, #0
   19480:	movt	r3, #3
   19484:	b	18ed8 <__assert_fail@plt+0x7458>
   19488:	movw	r3, #408	; 0x198
   1948c:	mov	r1, r0
   19490:	mov	r0, #0
   19494:	mvn	r2, #0
   19498:	movt	r3, #3
   1949c:	b	18ed8 <__assert_fail@plt+0x7458>
   194a0:	push	{r4, r5, fp, lr}
   194a4:	add	fp, sp, #8
   194a8:	mov	r5, r0
   194ac:	mov	r4, r1
   194b0:	mov	r0, #0
   194b4:	mov	r2, #5
   194b8:	mov	r1, r5
   194bc:	bl	1175c <dcgettext@plt>
   194c0:	cmp	r0, r5
   194c4:	popne	{r4, r5, fp, pc}
   194c8:	bl	1a89c <__assert_fail@plt+0x8e1c>
   194cc:	ldrb	r1, [r0]
   194d0:	and	r1, r1, #223	; 0xdf
   194d4:	cmp	r1, #71	; 0x47
   194d8:	beq	19540 <__assert_fail@plt+0x7ac0>
   194dc:	cmp	r1, #85	; 0x55
   194e0:	bne	19564 <__assert_fail@plt+0x7ae4>
   194e4:	ldrb	r1, [r0, #1]
   194e8:	and	r1, r1, #223	; 0xdf
   194ec:	cmp	r1, #84	; 0x54
   194f0:	bne	19564 <__assert_fail@plt+0x7ae4>
   194f4:	ldrb	r1, [r0, #2]
   194f8:	and	r1, r1, #223	; 0xdf
   194fc:	cmp	r1, #70	; 0x46
   19500:	ldrbeq	r1, [r0, #3]
   19504:	cmpeq	r1, #45	; 0x2d
   19508:	bne	19564 <__assert_fail@plt+0x7ae4>
   1950c:	ldrb	r1, [r0, #4]
   19510:	cmp	r1, #56	; 0x38
   19514:	ldrbeq	r0, [r0, #5]
   19518:	cmpeq	r0, #0
   1951c:	bne	19564 <__assert_fail@plt+0x7ae4>
   19520:	ldrb	r1, [r5]
   19524:	movw	r2, #64128	; 0xfa80
   19528:	movw	r0, #64132	; 0xfa84
   1952c:	movt	r2, #1
   19530:	movt	r0, #1
   19534:	cmp	r1, #96	; 0x60
   19538:	moveq	r0, r2
   1953c:	pop	{r4, r5, fp, pc}
   19540:	ldrb	r1, [r0, #1]
   19544:	and	r1, r1, #223	; 0xdf
   19548:	cmp	r1, #66	; 0x42
   1954c:	bne	19564 <__assert_fail@plt+0x7ae4>
   19550:	ldrb	r1, [r0, #2]
   19554:	cmp	r1, #49	; 0x31
   19558:	ldrbeq	r1, [r0, #3]
   1955c:	cmpeq	r1, #56	; 0x38
   19560:	beq	19580 <__assert_fail@plt+0x7b00>
   19564:	movw	r1, #64124	; 0xfa7c
   19568:	movw	r0, #65140	; 0xfe74
   1956c:	cmp	r4, #9
   19570:	movt	r1, #1
   19574:	movt	r0, #1
   19578:	moveq	r0, r1
   1957c:	pop	{r4, r5, fp, pc}
   19580:	ldrb	r1, [r0, #4]
   19584:	cmp	r1, #48	; 0x30
   19588:	ldrbeq	r1, [r0, #5]
   1958c:	cmpeq	r1, #51	; 0x33
   19590:	bne	19564 <__assert_fail@plt+0x7ae4>
   19594:	ldrb	r1, [r0, #6]
   19598:	cmp	r1, #48	; 0x30
   1959c:	ldrbeq	r0, [r0, #7]
   195a0:	cmpeq	r0, #0
   195a4:	bne	19564 <__assert_fail@plt+0x7ae4>
   195a8:	ldrb	r1, [r5]
   195ac:	movw	r2, #64136	; 0xfa88
   195b0:	movw	r0, #64140	; 0xfa8c
   195b4:	movt	r2, #1
   195b8:	movt	r0, #1
   195bc:	b	19534 <__assert_fail@plt+0x7ab4>
   195c0:	mov	r1, #0
   195c4:	str	r1, [r0]
   195c8:	str	r1, [r0, #4]
   195cc:	bx	lr
   195d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195d4:	add	fp, sp, #28
   195d8:	sub	sp, sp, #52	; 0x34
   195dc:	add	r5, sp, #16
   195e0:	mov	sl, r0
   195e4:	vmov.i32	q8, #0	; 0x00000000
   195e8:	mov	r8, r3
   195ec:	cmp	r2, #0
   195f0:	mov	r0, r5
   195f4:	vst1.64	{d16-d17}, [r0]!
   195f8:	vst1.64	{d16-d17}, [r0]
   195fc:	beq	19624 <__assert_fail@plt+0x7ba4>
   19600:	mov	r0, #1
   19604:	ldrb	r3, [r1], #1
   19608:	subs	r2, r2, #1
   1960c:	ubfx	r7, r3, #5, #3
   19610:	and	r3, r3, #31
   19614:	ldr	r6, [r5, r7, lsl #2]
   19618:	orr	r3, r6, r0, lsl r3
   1961c:	str	r3, [r5, r7, lsl #2]
   19620:	bne	19604 <__assert_fail@plt+0x7b84>
   19624:	mov	r0, sl
   19628:	bl	11750 <getc_unlocked@plt>
   1962c:	mov	r6, r0
   19630:	cmp	r0, #0
   19634:	blt	19664 <__assert_fail@plt+0x7be4>
   19638:	mov	r4, #1
   1963c:	lsr	r0, r6, #5
   19640:	and	r1, r6, #31
   19644:	ldr	r0, [r5, r0, lsl #2]
   19648:	tst	r0, r4, lsl r1
   1964c:	beq	19664 <__assert_fail@plt+0x7be4>
   19650:	mov	r0, sl
   19654:	bl	11750 <getc_unlocked@plt>
   19658:	mov	r6, r0
   1965c:	cmn	r0, #1
   19660:	bgt	1963c <__assert_fail@plt+0x7bbc>
   19664:	ldm	r8, {r0, r7}
   19668:	cmp	r6, #0
   1966c:	str	r0, [sp, #12]
   19670:	blt	196f8 <__assert_fail@plt+0x7c78>
   19674:	str	r8, [sp, #8]
   19678:	mov	r9, #0
   1967c:	mov	r8, #1
   19680:	mov	r4, #0
   19684:	b	196a4 <__assert_fail@plt+0x7c24>
   19688:	mov	r0, sl
   1968c:	strb	r6, [r7, r4]
   19690:	bl	11750 <getc_unlocked@plt>
   19694:	mov	r6, r0
   19698:	lsr	r9, r0, #31
   1969c:	ldr	r0, [sp, #12]
   196a0:	add	r4, r4, #1
   196a4:	cmp	r4, r0
   196a8:	bne	196c8 <__assert_fail@plt+0x7c48>
   196ac:	mov	r0, r7
   196b0:	add	r1, sp, #12
   196b4:	mov	r2, #1
   196b8:	mvn	r3, #0
   196bc:	str	r8, [sp]
   196c0:	bl	1a178 <__assert_fail@plt+0x86f8>
   196c4:	mov	r7, r0
   196c8:	tst	r9, #1
   196cc:	lsreq	r0, r6, #5
   196d0:	andeq	r1, r6, #31
   196d4:	ldreq	r0, [r5, r0, lsl #2]
   196d8:	tsteq	r0, r8, lsl r1
   196dc:	beq	19688 <__assert_fail@plt+0x7c08>
   196e0:	mov	r0, #0
   196e4:	ldr	r1, [sp, #8]
   196e8:	strb	r0, [r7, r4]
   196ec:	ldr	r0, [sp, #12]
   196f0:	stm	r1, {r0, r7}
   196f4:	b	196fc <__assert_fail@plt+0x7c7c>
   196f8:	mvn	r4, #0
   196fc:	mov	r0, r4
   19700:	sub	sp, fp, #28
   19704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1970c:	add	fp, sp, #28
   19710:	sub	sp, sp, #28
   19714:	add	r4, r1, #1
   19718:	cmp	r1, #0
   1971c:	mov	r7, r0
   19720:	mov	r1, #4
   19724:	str	r3, [sp, #12]
   19728:	str	r2, [sp, #8]
   1972c:	movweq	r4, #64	; 0x40
   19730:	mov	r0, r4
   19734:	str	r4, [sp, #16]
   19738:	bl	1a0e8 <__assert_fail@plt+0x8668>
   1973c:	mov	r6, r0
   19740:	mov	r0, r4
   19744:	mov	r1, #4
   19748:	bl	1a0e8 <__assert_fail@plt+0x8668>
   1974c:	mov	r4, #0
   19750:	mov	r5, r0
   19754:	str	r4, [sp, #20]
   19758:	str	r4, [sp, #24]
   1975c:	b	1978c <__assert_fail@plt+0x7d0c>
   19760:	add	r8, sl, #1
   19764:	mov	r1, #1
   19768:	mov	r0, r8
   1976c:	bl	1a0e8 <__assert_fail@plt+0x8668>
   19770:	str	sl, [r5, r4, lsl #2]
   19774:	mov	r2, r8
   19778:	mov	r9, r0
   1977c:	ldr	r1, [sp, #24]
   19780:	bl	11720 <memcpy@plt>
   19784:	str	r9, [r6, r4, lsl #2]
   19788:	add	r4, r4, #1
   1978c:	ldr	r1, [sp, #8]
   19790:	ldr	r2, [sp, #12]
   19794:	mov	r0, r7
   19798:	add	r3, sp, #20
   1979c:	bl	195d0 <__assert_fail@plt+0x7b50>
   197a0:	mov	sl, r0
   197a4:	ldr	r0, [sp, #16]
   197a8:	cmp	r4, r0
   197ac:	blt	197e4 <__assert_fail@plt+0x7d64>
   197b0:	mov	r0, #4
   197b4:	add	r1, sp, #16
   197b8:	mov	r2, #1
   197bc:	mvn	r3, #0
   197c0:	str	r0, [sp]
   197c4:	mov	r0, r6
   197c8:	bl	1a178 <__assert_fail@plt+0x86f8>
   197cc:	ldr	r1, [sp, #16]
   197d0:	mov	r6, r0
   197d4:	mov	r0, r5
   197d8:	mov	r2, #4
   197dc:	bl	19fdc <__assert_fail@plt+0x855c>
   197e0:	mov	r5, r0
   197e4:	cmn	sl, #1
   197e8:	bne	19760 <__assert_fail@plt+0x7ce0>
   197ec:	mov	r0, #0
   197f0:	str	r0, [r6, r4, lsl #2]
   197f4:	str	r0, [r5, r4, lsl #2]
   197f8:	ldr	r0, [sp, #24]
   197fc:	bl	17404 <__assert_fail@plt+0x5984>
   19800:	ldr	r0, [fp, #8]
   19804:	str	r6, [r0]
   19808:	ldr	r0, [fp, #12]
   1980c:	cmp	r0, #0
   19810:	beq	1981c <__assert_fail@plt+0x7d9c>
   19814:	str	r5, [r0]
   19818:	b	19824 <__assert_fail@plt+0x7da4>
   1981c:	mov	r0, r5
   19820:	bl	17404 <__assert_fail@plt+0x5984>
   19824:	mov	r0, r4
   19828:	sub	sp, fp, #28
   1982c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19830:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19834:	add	fp, sp, #24
   19838:	movw	r8, #0
   1983c:	mov	r6, r2
   19840:	mov	r4, r1
   19844:	mov	r5, r0
   19848:	movt	r8, #32752	; 0x7ff0
   1984c:	mov	r0, r5
   19850:	mov	r1, r4
   19854:	mov	r2, r6
   19858:	bl	11960 <write@plt>
   1985c:	mov	r7, r0
   19860:	cmn	r0, #1
   19864:	bgt	1988c <__assert_fail@plt+0x7e0c>
   19868:	bl	1190c <__errno_location@plt>
   1986c:	ldr	r0, [r0]
   19870:	cmp	r0, #4
   19874:	beq	1984c <__assert_fail@plt+0x7dcc>
   19878:	cmp	r6, r8
   1987c:	bls	1988c <__assert_fail@plt+0x7e0c>
   19880:	cmp	r0, #22
   19884:	mov	r6, r8
   19888:	beq	1984c <__assert_fail@plt+0x7dcc>
   1988c:	mov	r0, r7
   19890:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19894:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19898:	add	fp, sp, #24
   1989c:	sub	sp, sp, #64	; 0x40
   198a0:	mov	r5, r1
   198a4:	bl	11774 <strdup@plt>
   198a8:	cmp	r0, #0
   198ac:	beq	19b58 <__assert_fail@plt+0x80d8>
   198b0:	mov	r4, r0
   198b4:	bl	1181c <__ctype_get_mb_cur_max@plt>
   198b8:	cmp	r0, #2
   198bc:	bcc	19aa8 <__assert_fail@plt+0x8028>
   198c0:	cmp	r5, #0
   198c4:	beq	19968 <__assert_fail@plt+0x7ee8>
   198c8:	mov	r0, r4
   198cc:	str	r4, [sp, #24]
   198d0:	bl	118dc <strlen@plt>
   198d4:	mov	r7, #0
   198d8:	add	r1, r4, r0
   198dc:	cmp	r0, #1
   198e0:	mov	r6, r4
   198e4:	str	r7, [sp, #16]
   198e8:	str	r7, [sp, #12]
   198ec:	strb	r7, [sp, #8]
   198f0:	strb	r7, [sp, #20]
   198f4:	str	r1, [sp, #4]
   198f8:	blt	19948 <__assert_fail@plt+0x7ec8>
   198fc:	add	r6, sp, #4
   19900:	mov	r0, r6
   19904:	bl	1a8d4 <__assert_fail@plt+0x8e54>
   19908:	ldrb	r0, [sp, #32]
   1990c:	cmp	r0, #0
   19910:	beq	19944 <__assert_fail@plt+0x7ec4>
   19914:	ldr	r0, [sp, #36]	; 0x24
   19918:	bl	118d0 <iswspace@plt>
   1991c:	cmp	r0, #0
   19920:	beq	19944 <__assert_fail@plt+0x7ec4>
   19924:	strb	r7, [sp, #20]
   19928:	ldr	r1, [sp, #24]
   1992c:	ldr	r2, [sp, #28]
   19930:	ldr	r0, [sp, #4]
   19934:	add	r1, r1, r2
   19938:	cmp	r1, r0
   1993c:	str	r1, [sp, #24]
   19940:	bcc	19900 <__assert_fail@plt+0x7e80>
   19944:	ldr	r6, [sp, #24]
   19948:	mov	r0, r6
   1994c:	bl	118dc <strlen@plt>
   19950:	add	r2, r0, #1
   19954:	mov	r0, r4
   19958:	mov	r1, r6
   1995c:	bl	116f0 <memmove@plt>
   19960:	cmp	r5, #1
   19964:	beq	19b4c <__assert_fail@plt+0x80cc>
   19968:	add	r0, sp, #4
   1996c:	str	r4, [sp, #24]
   19970:	add	r5, r0, #8
   19974:	mov	r0, r4
   19978:	bl	118dc <strlen@plt>
   1997c:	mov	r6, #0
   19980:	cmp	r0, #1
   19984:	add	r1, r4, r0
   19988:	strb	r6, [sp, #8]
   1998c:	str	r1, [sp, #4]
   19990:	str	r6, [r5]
   19994:	str	r6, [r5, #4]
   19998:	strb	r6, [sp, #20]
   1999c:	blt	19b4c <__assert_fail@plt+0x80cc>
   199a0:	add	r5, sp, #4
   199a4:	mov	r7, #0
   199a8:	b	199cc <__assert_fail@plt+0x7f4c>
   199ac:	ldrb	r0, [sp, #32]
   199b0:	cmp	r0, #0
   199b4:	beq	19a78 <__assert_fail@plt+0x7ff8>
   199b8:	ldr	r0, [sp, #36]	; 0x24
   199bc:	bl	118d0 <iswspace@plt>
   199c0:	cmp	r0, #0
   199c4:	movne	r7, #1
   199c8:	b	19a78 <__assert_fail@plt+0x7ff8>
   199cc:	mov	r0, r5
   199d0:	bl	1a8d4 <__assert_fail@plt+0x8e54>
   199d4:	cmp	r7, #1
   199d8:	beq	19a0c <__assert_fail@plt+0x7f8c>
   199dc:	cmp	r7, #0
   199e0:	bne	19a54 <__assert_fail@plt+0x7fd4>
   199e4:	ldrb	r0, [sp, #32]
   199e8:	mov	r7, #1
   199ec:	cmp	r0, #0
   199f0:	beq	19a78 <__assert_fail@plt+0x7ff8>
   199f4:	ldr	r0, [sp, #36]	; 0x24
   199f8:	bl	118d0 <iswspace@plt>
   199fc:	cmp	r0, #0
   19a00:	beq	199ac <__assert_fail@plt+0x7f2c>
   19a04:	mov	r7, #0
   19a08:	b	19a78 <__assert_fail@plt+0x7ff8>
   19a0c:	ldrb	r0, [sp, #32]
   19a10:	mov	r7, #1
   19a14:	cmp	r0, #0
   19a18:	beq	19a78 <__assert_fail@plt+0x7ff8>
   19a1c:	ldr	r0, [sp, #36]	; 0x24
   19a20:	bl	118d0 <iswspace@plt>
   19a24:	cmp	r0, #0
   19a28:	beq	19a78 <__assert_fail@plt+0x7ff8>
   19a2c:	ldrb	r0, [sp, #32]
   19a30:	cmp	r0, #0
   19a34:	beq	19a74 <__assert_fail@plt+0x7ff4>
   19a38:	ldr	r0, [sp, #36]	; 0x24
   19a3c:	bl	118d0 <iswspace@plt>
   19a40:	cmp	r0, #0
   19a44:	beq	19a74 <__assert_fail@plt+0x7ff4>
   19a48:	ldr	r8, [sp, #24]
   19a4c:	mov	r7, #2
   19a50:	b	19a78 <__assert_fail@plt+0x7ff8>
   19a54:	ldrb	r0, [sp, #32]
   19a58:	cmp	r0, #0
   19a5c:	beq	19a74 <__assert_fail@plt+0x7ff4>
   19a60:	ldr	r0, [sp, #36]	; 0x24
   19a64:	bl	118d0 <iswspace@plt>
   19a68:	mov	r7, #2
   19a6c:	cmp	r0, #0
   19a70:	bne	19a78 <__assert_fail@plt+0x7ff8>
   19a74:	mov	r7, #1
   19a78:	strb	r6, [sp, #20]
   19a7c:	ldr	r1, [sp, #24]
   19a80:	ldr	r2, [sp, #28]
   19a84:	ldr	r0, [sp, #4]
   19a88:	add	r1, r1, r2
   19a8c:	cmp	r1, r0
   19a90:	str	r1, [sp, #24]
   19a94:	bcc	199cc <__assert_fail@plt+0x7f4c>
   19a98:	cmp	r7, #2
   19a9c:	moveq	r0, #0
   19aa0:	strbeq	r0, [r8]
   19aa4:	b	19b4c <__assert_fail@plt+0x80cc>
   19aa8:	cmp	r5, #0
   19aac:	beq	19b08 <__assert_fail@plt+0x8088>
   19ab0:	ldrb	r7, [r4]
   19ab4:	mov	r6, r4
   19ab8:	cmp	r7, #0
   19abc:	beq	19ae8 <__assert_fail@plt+0x8068>
   19ac0:	bl	118b8 <__ctype_b_loc@plt>
   19ac4:	ldr	r0, [r0]
   19ac8:	mov	r6, r4
   19acc:	uxtb	r1, r7
   19ad0:	add	r1, r0, r1, lsl #1
   19ad4:	ldrb	r1, [r1, #1]
   19ad8:	tst	r1, #32
   19adc:	ldrbne	r7, [r6, #1]!
   19ae0:	cmpne	r7, #0
   19ae4:	bne	19acc <__assert_fail@plt+0x804c>
   19ae8:	mov	r0, r6
   19aec:	bl	118dc <strlen@plt>
   19af0:	add	r2, r0, #1
   19af4:	mov	r0, r4
   19af8:	mov	r1, r6
   19afc:	bl	116f0 <memmove@plt>
   19b00:	cmp	r5, #1
   19b04:	beq	19b4c <__assert_fail@plt+0x80cc>
   19b08:	mov	r0, r4
   19b0c:	bl	118dc <strlen@plt>
   19b10:	add	r0, r4, r0
   19b14:	sub	r5, r0, #1
   19b18:	cmp	r5, r4
   19b1c:	bcc	19b4c <__assert_fail@plt+0x80cc>
   19b20:	bl	118b8 <__ctype_b_loc@plt>
   19b24:	mov	r1, #0
   19b28:	ldrb	r2, [r5]
   19b2c:	ldr	r3, [r0]
   19b30:	add	r2, r3, r2, lsl #1
   19b34:	ldrb	r2, [r2, #1]
   19b38:	tst	r2, #32
   19b3c:	beq	19b4c <__assert_fail@plt+0x80cc>
   19b40:	strb	r1, [r5], #-1
   19b44:	cmp	r5, r4
   19b48:	bcs	19b28 <__assert_fail@plt+0x80a8>
   19b4c:	mov	r0, r4
   19b50:	sub	sp, fp, #24
   19b54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19b58:	bl	1a468 <__assert_fail@plt+0x89e8>
   19b5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19b60:	add	fp, sp, #24
   19b64:	sub	sp, sp, #32
   19b68:	ldr	r6, [fp, #12]
   19b6c:	ldr	r7, [fp, #8]
   19b70:	mov	r4, r2
   19b74:	mov	r8, r0
   19b78:	cmp	r1, #0
   19b7c:	beq	19ba4 <__assert_fail@plt+0x8124>
   19b80:	movw	r2, #64228	; 0xfae4
   19b84:	mov	r5, r1
   19b88:	str	r3, [sp, #4]
   19b8c:	str	r4, [sp]
   19b90:	mov	r0, r8
   19b94:	mov	r1, #1
   19b98:	movt	r2, #1
   19b9c:	mov	r3, r5
   19ba0:	b	19bbc <__assert_fail@plt+0x813c>
   19ba4:	movw	r2, #64240	; 0xfaf0
   19ba8:	str	r3, [sp]
   19bac:	mov	r0, r8
   19bb0:	mov	r1, #1
   19bb4:	mov	r3, r4
   19bb8:	movt	r2, #1
   19bbc:	bl	11978 <__fprintf_chk@plt>
   19bc0:	movw	r1, #64247	; 0xfaf7
   19bc4:	mov	r0, #0
   19bc8:	mov	r2, #5
   19bcc:	movt	r1, #1
   19bd0:	bl	1175c <dcgettext@plt>
   19bd4:	movw	r2, #64965	; 0xfdc5
   19bd8:	mov	r3, r0
   19bdc:	movw	r0, #2022	; 0x7e6
   19be0:	mov	r1, #1
   19be4:	str	r0, [sp]
   19be8:	movt	r2, #1
   19bec:	mov	r0, r8
   19bf0:	bl	11978 <__fprintf_chk@plt>
   19bf4:	movw	r4, #50096	; 0xc3b0
   19bf8:	mov	r1, r8
   19bfc:	movt	r4, #1
   19c00:	mov	r0, r4
   19c04:	bl	11678 <fputs_unlocked@plt>
   19c08:	movw	r1, #64251	; 0xfafb
   19c0c:	mov	r0, #0
   19c10:	mov	r2, #5
   19c14:	movt	r1, #1
   19c18:	bl	1175c <dcgettext@plt>
   19c1c:	movw	r3, #64422	; 0xfba6
   19c20:	mov	r2, r0
   19c24:	mov	r0, r8
   19c28:	mov	r1, #1
   19c2c:	movt	r3, #1
   19c30:	bl	11978 <__fprintf_chk@plt>
   19c34:	mov	r0, r4
   19c38:	mov	r1, r8
   19c3c:	bl	11678 <fputs_unlocked@plt>
   19c40:	cmp	r6, #9
   19c44:	bhi	19ca8 <__assert_fail@plt+0x8228>
   19c48:	add	r0, pc, #0
   19c4c:	ldr	pc, [r0, r6, lsl #2]
   19c50:	andeq	r9, r1, r0, lsl #29
   19c54:	andeq	r9, r1, r8, ror ip
   19c58:			; <UNDEFINED> instruction: 0x00019cb4
   19c5c:	ldrdeq	r9, [r1], -ip
   19c60:	andeq	r9, r1, r4, lsl #26
   19c64:	andeq	r9, r1, ip, lsr #26
   19c68:	andeq	r9, r1, r4, asr sp
   19c6c:	andeq	r9, r1, ip, lsl #27
   19c70:	andeq	r9, r1, ip, lsr #28
   19c74:	ldrdeq	r9, [r1], -r4
   19c78:	movw	r1, #64456	; 0xfbc8
   19c7c:	mov	r0, #0
   19c80:	mov	r2, #5
   19c84:	movt	r1, #1
   19c88:	bl	1175c <dcgettext@plt>
   19c8c:	ldr	r3, [r7]
   19c90:	mov	r2, r0
   19c94:	mov	r0, r8
   19c98:	mov	r1, #1
   19c9c:	sub	sp, fp, #24
   19ca0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ca4:	b	11978 <__fprintf_chk@plt>
   19ca8:	movw	r1, #64775	; 0xfd07
   19cac:	movt	r1, #1
   19cb0:	b	19ddc <__assert_fail@plt+0x835c>
   19cb4:	movw	r1, #64472	; 0xfbd8
   19cb8:	mov	r0, #0
   19cbc:	mov	r2, #5
   19cc0:	movt	r1, #1
   19cc4:	bl	1175c <dcgettext@plt>
   19cc8:	mov	r2, r0
   19ccc:	ldr	r3, [r7]
   19cd0:	ldr	r0, [r7, #4]
   19cd4:	str	r0, [sp]
   19cd8:	b	19dc8 <__assert_fail@plt+0x8348>
   19cdc:	movw	r1, #64495	; 0xfbef
   19ce0:	mov	r0, #0
   19ce4:	mov	r2, #5
   19ce8:	movt	r1, #1
   19cec:	bl	1175c <dcgettext@plt>
   19cf0:	ldr	r3, [r7]
   19cf4:	mov	r2, r0
   19cf8:	ldmib	r7, {r0, r1}
   19cfc:	stm	sp, {r0, r1}
   19d00:	b	19dc8 <__assert_fail@plt+0x8348>
   19d04:	movw	r1, #64523	; 0xfc0b
   19d08:	mov	r0, #0
   19d0c:	mov	r2, #5
   19d10:	movt	r1, #1
   19d14:	bl	1175c <dcgettext@plt>
   19d18:	ldr	r3, [r7]
   19d1c:	mov	r2, r0
   19d20:	ldmib	r7, {r0, r1, r7}
   19d24:	stm	sp, {r0, r1, r7}
   19d28:	b	19dc8 <__assert_fail@plt+0x8348>
   19d2c:	movw	r1, #64555	; 0xfc2b
   19d30:	mov	r0, #0
   19d34:	mov	r2, #5
   19d38:	movt	r1, #1
   19d3c:	bl	1175c <dcgettext@plt>
   19d40:	ldr	r3, [r7]
   19d44:	mov	r2, r0
   19d48:	ldmib	r7, {r0, r1, r6, r7}
   19d4c:	stm	sp, {r0, r1, r6, r7}
   19d50:	b	19dc8 <__assert_fail@plt+0x8348>
   19d54:	movw	r1, #64591	; 0xfc4f
   19d58:	mov	r0, #0
   19d5c:	mov	r2, #5
   19d60:	movt	r1, #1
   19d64:	bl	1175c <dcgettext@plt>
   19d68:	ldr	r3, [r7]
   19d6c:	mov	r2, r0
   19d70:	ldmib	r7, {r0, r1, r6}
   19d74:	ldr	r5, [r7, #16]
   19d78:	ldr	r7, [r7, #20]
   19d7c:	stm	sp, {r0, r1, r6}
   19d80:	str	r5, [sp, #12]
   19d84:	str	r7, [sp, #16]
   19d88:	b	19dc8 <__assert_fail@plt+0x8348>
   19d8c:	movw	r1, #64631	; 0xfc77
   19d90:	mov	r0, #0
   19d94:	mov	r2, #5
   19d98:	movt	r1, #1
   19d9c:	bl	1175c <dcgettext@plt>
   19da0:	ldr	r3, [r7]
   19da4:	mov	r2, r0
   19da8:	ldmib	r7, {r0, r1, r6}
   19dac:	ldr	r5, [r7, #16]
   19db0:	ldr	r4, [r7, #20]
   19db4:	ldr	r7, [r7, #24]
   19db8:	stm	sp, {r0, r1, r6}
   19dbc:	str	r5, [sp, #12]
   19dc0:	str	r4, [sp, #16]
   19dc4:	str	r7, [sp, #20]
   19dc8:	mov	r0, r8
   19dcc:	mov	r1, #1
   19dd0:	b	19e7c <__assert_fail@plt+0x83fc>
   19dd4:	movw	r1, #64723	; 0xfcd3
   19dd8:	movt	r1, #1
   19ddc:	mov	r0, #0
   19de0:	mov	r2, #5
   19de4:	bl	1175c <dcgettext@plt>
   19de8:	mov	ip, r0
   19dec:	ldr	r3, [r7]
   19df0:	ldr	r0, [r7, #4]
   19df4:	ldr	r1, [r7, #8]
   19df8:	ldr	r6, [r7, #12]
   19dfc:	ldr	r5, [r7, #16]
   19e00:	ldr	r4, [r7, #20]
   19e04:	ldr	r2, [r7, #24]
   19e08:	ldr	lr, [r7, #28]
   19e0c:	ldr	r7, [r7, #32]
   19e10:	stm	sp, {r0, r1, r6}
   19e14:	str	r5, [sp, #12]
   19e18:	str	r4, [sp, #16]
   19e1c:	str	r2, [sp, #20]
   19e20:	str	lr, [sp, #24]
   19e24:	str	r7, [sp, #28]
   19e28:	b	19e70 <__assert_fail@plt+0x83f0>
   19e2c:	movw	r1, #64675	; 0xfca3
   19e30:	mov	r0, #0
   19e34:	mov	r2, #5
   19e38:	movt	r1, #1
   19e3c:	bl	1175c <dcgettext@plt>
   19e40:	mov	ip, r0
   19e44:	ldr	r3, [r7]
   19e48:	ldmib	r7, {r0, r1, r6}
   19e4c:	ldr	r5, [r7, #16]
   19e50:	ldr	r4, [r7, #20]
   19e54:	ldr	r2, [r7, #24]
   19e58:	ldr	r7, [r7, #28]
   19e5c:	stm	sp, {r0, r1, r6}
   19e60:	str	r5, [sp, #12]
   19e64:	str	r4, [sp, #16]
   19e68:	str	r2, [sp, #20]
   19e6c:	str	r7, [sp, #24]
   19e70:	mov	r0, r8
   19e74:	mov	r1, #1
   19e78:	mov	r2, ip
   19e7c:	bl	11978 <__fprintf_chk@plt>
   19e80:	sub	sp, fp, #24
   19e84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19e88:	push	{r4, sl, fp, lr}
   19e8c:	add	fp, sp, #8
   19e90:	sub	sp, sp, #8
   19e94:	ldr	ip, [fp, #8]
   19e98:	mov	lr, #0
   19e9c:	ldr	r4, [ip, lr, lsl #2]
   19ea0:	add	lr, lr, #1
   19ea4:	cmp	r4, #0
   19ea8:	bne	19e9c <__assert_fail@plt+0x841c>
   19eac:	sub	r4, lr, #1
   19eb0:	str	ip, [sp]
   19eb4:	str	r4, [sp, #4]
   19eb8:	bl	19b5c <__assert_fail@plt+0x80dc>
   19ebc:	sub	sp, fp, #8
   19ec0:	pop	{r4, sl, fp, pc}
   19ec4:	push	{r4, r5, fp, lr}
   19ec8:	add	fp, sp, #8
   19ecc:	sub	sp, sp, #48	; 0x30
   19ed0:	ldr	r4, [fp, #8]
   19ed4:	mov	ip, #0
   19ed8:	add	lr, sp, #8
   19edc:	ldr	r5, [r4]
   19ee0:	cmp	r5, #0
   19ee4:	str	r5, [lr, ip, lsl #2]
   19ee8:	beq	19efc <__assert_fail@plt+0x847c>
   19eec:	add	ip, ip, #1
   19ef0:	add	r4, r4, #4
   19ef4:	cmp	ip, #10
   19ef8:	bcc	19edc <__assert_fail@plt+0x845c>
   19efc:	str	lr, [sp]
   19f00:	str	ip, [sp, #4]
   19f04:	bl	19b5c <__assert_fail@plt+0x80dc>
   19f08:	sub	sp, fp, #8
   19f0c:	pop	{r4, r5, fp, pc}
   19f10:	push	{fp, lr}
   19f14:	mov	fp, sp
   19f18:	sub	sp, sp, #8
   19f1c:	add	ip, fp, #8
   19f20:	str	ip, [sp, #4]
   19f24:	str	ip, [sp]
   19f28:	bl	19ec4 <__assert_fail@plt+0x8444>
   19f2c:	mov	sp, fp
   19f30:	pop	{fp, pc}
   19f34:	push	{fp, lr}
   19f38:	mov	fp, sp
   19f3c:	movw	r0, #484	; 0x1e4
   19f40:	movt	r0, #3
   19f44:	ldr	r1, [r0]
   19f48:	movw	r0, #50096	; 0xc3b0
   19f4c:	movt	r0, #1
   19f50:	bl	11678 <fputs_unlocked@plt>
   19f54:	movw	r1, #64835	; 0xfd43
   19f58:	mov	r0, #0
   19f5c:	mov	r2, #5
   19f60:	movt	r1, #1
   19f64:	bl	1175c <dcgettext@plt>
   19f68:	movw	r2, #64855	; 0xfd57
   19f6c:	mov	r1, r0
   19f70:	mov	r0, #1
   19f74:	movt	r2, #1
   19f78:	bl	11954 <__printf_chk@plt>
   19f7c:	movw	r1, #64877	; 0xfd6d
   19f80:	mov	r0, #0
   19f84:	mov	r2, #5
   19f88:	movt	r1, #1
   19f8c:	bl	1175c <dcgettext@plt>
   19f90:	movw	r2, #50228	; 0xc434
   19f94:	movw	r3, #50435	; 0xc503
   19f98:	mov	r1, r0
   19f9c:	mov	r0, #1
   19fa0:	movt	r2, #1
   19fa4:	movt	r3, #1
   19fa8:	bl	11954 <__printf_chk@plt>
   19fac:	movw	r1, #64897	; 0xfd81
   19fb0:	mov	r0, #0
   19fb4:	mov	r2, #5
   19fb8:	movt	r1, #1
   19fbc:	bl	1175c <dcgettext@plt>
   19fc0:	movw	r2, #64936	; 0xfda8
   19fc4:	mov	r1, r0
   19fc8:	mov	r0, #1
   19fcc:	movt	r2, #1
   19fd0:	pop	{fp, lr}
   19fd4:	b	11954 <__printf_chk@plt>
   19fd8:	b	19fdc <__assert_fail@plt+0x855c>
   19fdc:	push	{r4, r5, r6, sl, fp, lr}
   19fe0:	add	fp, sp, #16
   19fe4:	mov	r4, r2
   19fe8:	mov	r5, r1
   19fec:	mov	r6, r0
   19ff0:	bl	1b7f4 <__assert_fail@plt+0x9d74>
   19ff4:	cmp	r0, #0
   19ff8:	popne	{r4, r5, r6, sl, fp, pc}
   19ffc:	cmp	r6, #0
   1a000:	beq	1a014 <__assert_fail@plt+0x8594>
   1a004:	cmp	r5, #0
   1a008:	cmpne	r4, #0
   1a00c:	bne	1a014 <__assert_fail@plt+0x8594>
   1a010:	pop	{r4, r5, r6, sl, fp, pc}
   1a014:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a018:	push	{fp, lr}
   1a01c:	mov	fp, sp
   1a020:	bl	1a5ac <__assert_fail@plt+0x8b2c>
   1a024:	cmp	r0, #0
   1a028:	popne	{fp, pc}
   1a02c:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a030:	push	{fp, lr}
   1a034:	mov	fp, sp
   1a038:	bl	1a5ac <__assert_fail@plt+0x8b2c>
   1a03c:	cmp	r0, #0
   1a040:	popne	{fp, pc}
   1a044:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a048:	push	{fp, lr}
   1a04c:	mov	fp, sp
   1a050:	bl	1a5ac <__assert_fail@plt+0x8b2c>
   1a054:	cmp	r0, #0
   1a058:	popne	{fp, pc}
   1a05c:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a060:	push	{r4, r5, fp, lr}
   1a064:	add	fp, sp, #8
   1a068:	mov	r4, r1
   1a06c:	mov	r5, r0
   1a070:	bl	1a5dc <__assert_fail@plt+0x8b5c>
   1a074:	cmp	r0, #0
   1a078:	popne	{r4, r5, fp, pc}
   1a07c:	cmp	r5, #0
   1a080:	beq	1a090 <__assert_fail@plt+0x8610>
   1a084:	cmp	r4, #0
   1a088:	bne	1a090 <__assert_fail@plt+0x8610>
   1a08c:	pop	{r4, r5, fp, pc}
   1a090:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a094:	push	{fp, lr}
   1a098:	mov	fp, sp
   1a09c:	cmp	r1, #0
   1a0a0:	orreq	r1, r1, #1
   1a0a4:	bl	1a5dc <__assert_fail@plt+0x8b5c>
   1a0a8:	cmp	r0, #0
   1a0ac:	popne	{fp, pc}
   1a0b0:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a0b4:	push	{fp, lr}
   1a0b8:	mov	fp, sp
   1a0bc:	clz	r3, r2
   1a0c0:	lsr	ip, r3, #5
   1a0c4:	clz	r3, r1
   1a0c8:	lsr	r3, r3, #5
   1a0cc:	orrs	r3, r3, ip
   1a0d0:	movwne	r1, #1
   1a0d4:	movwne	r2, #1
   1a0d8:	bl	1b7f4 <__assert_fail@plt+0x9d74>
   1a0dc:	cmp	r0, #0
   1a0e0:	popne	{fp, pc}
   1a0e4:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a0e8:	push	{fp, lr}
   1a0ec:	mov	fp, sp
   1a0f0:	mov	r2, r1
   1a0f4:	mov	r1, r0
   1a0f8:	mov	r0, #0
   1a0fc:	bl	1b7f4 <__assert_fail@plt+0x9d74>
   1a100:	cmp	r0, #0
   1a104:	popne	{fp, pc}
   1a108:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a10c:	mov	r2, r1
   1a110:	mov	r1, r0
   1a114:	mov	r0, #0
   1a118:	b	1a0b4 <__assert_fail@plt+0x8634>
   1a11c:	mov	r2, #1
   1a120:	b	1a124 <__assert_fail@plt+0x86a4>
   1a124:	push	{r4, r5, fp, lr}
   1a128:	add	fp, sp, #8
   1a12c:	ldr	r5, [r1]
   1a130:	mov	r4, r1
   1a134:	cmp	r0, #0
   1a138:	beq	1a150 <__assert_fail@plt+0x86d0>
   1a13c:	mov	r1, #1
   1a140:	add	r1, r1, r5, lsr #1
   1a144:	adds	r5, r5, r1
   1a148:	bcc	1a168 <__assert_fail@plt+0x86e8>
   1a14c:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a150:	cmp	r5, #0
   1a154:	bne	1a168 <__assert_fail@plt+0x86e8>
   1a158:	mov	r1, #64	; 0x40
   1a15c:	cmp	r2, #64	; 0x40
   1a160:	udiv	r5, r1, r2
   1a164:	addhi	r5, r5, #1
   1a168:	mov	r1, r5
   1a16c:	bl	19fdc <__assert_fail@plt+0x855c>
   1a170:	str	r5, [r4]
   1a174:	pop	{r4, r5, fp, pc}
   1a178:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a17c:	add	fp, sp, #24
   1a180:	ldr	r6, [r1]
   1a184:	mov	r8, r1
   1a188:	ldr	r4, [fp, #8]
   1a18c:	add	r1, r6, r6, asr #1
   1a190:	cmp	r1, r6
   1a194:	mvnvs	r1, #-2147483648	; 0x80000000
   1a198:	cmp	r1, r3
   1a19c:	mov	r5, r1
   1a1a0:	movgt	r5, r3
   1a1a4:	cmn	r3, #1
   1a1a8:	movle	r5, r1
   1a1ac:	cmn	r4, #1
   1a1b0:	ble	1a1d0 <__assert_fail@plt+0x8750>
   1a1b4:	cmp	r4, #0
   1a1b8:	beq	1a224 <__assert_fail@plt+0x87a4>
   1a1bc:	cmn	r5, #1
   1a1c0:	ble	1a1f8 <__assert_fail@plt+0x8778>
   1a1c4:	mvn	r7, #-2147483648	; 0x80000000
   1a1c8:	udiv	r1, r7, r4
   1a1cc:	b	1a1ec <__assert_fail@plt+0x876c>
   1a1d0:	cmn	r5, #1
   1a1d4:	ble	1a214 <__assert_fail@plt+0x8794>
   1a1d8:	cmn	r4, #1
   1a1dc:	beq	1a224 <__assert_fail@plt+0x87a4>
   1a1e0:	mov	r1, #-2147483648	; 0x80000000
   1a1e4:	mvn	r7, #-2147483648	; 0x80000000
   1a1e8:	sdiv	r1, r1, r4
   1a1ec:	cmp	r1, r5
   1a1f0:	bge	1a224 <__assert_fail@plt+0x87a4>
   1a1f4:	b	1a234 <__assert_fail@plt+0x87b4>
   1a1f8:	beq	1a224 <__assert_fail@plt+0x87a4>
   1a1fc:	mov	r1, #-2147483648	; 0x80000000
   1a200:	mvn	r7, #-2147483648	; 0x80000000
   1a204:	sdiv	r1, r1, r5
   1a208:	cmp	r1, r4
   1a20c:	bge	1a224 <__assert_fail@plt+0x87a4>
   1a210:	b	1a234 <__assert_fail@plt+0x87b4>
   1a214:	mvn	r7, #-2147483648	; 0x80000000
   1a218:	sdiv	r1, r7, r4
   1a21c:	cmp	r5, r1
   1a220:	blt	1a234 <__assert_fail@plt+0x87b4>
   1a224:	mul	r1, r5, r4
   1a228:	mov	r7, #64	; 0x40
   1a22c:	cmp	r1, #63	; 0x3f
   1a230:	bgt	1a23c <__assert_fail@plt+0x87bc>
   1a234:	sdiv	r5, r7, r4
   1a238:	mul	r1, r5, r4
   1a23c:	cmp	r0, #0
   1a240:	moveq	r7, #0
   1a244:	streq	r7, [r8]
   1a248:	sub	r7, r5, r6
   1a24c:	cmp	r7, r2
   1a250:	bge	1a2f4 <__assert_fail@plt+0x8874>
   1a254:	add	r5, r6, r2
   1a258:	mov	r2, #0
   1a25c:	mov	r1, #0
   1a260:	cmp	r5, r3
   1a264:	movwgt	r2, #1
   1a268:	cmn	r3, #1
   1a26c:	movwgt	r1, #1
   1a270:	cmp	r5, r6
   1a274:	bvs	1a2dc <__assert_fail@plt+0x885c>
   1a278:	ands	r1, r1, r2
   1a27c:	bne	1a2dc <__assert_fail@plt+0x885c>
   1a280:	cmn	r4, #1
   1a284:	ble	1a2a4 <__assert_fail@plt+0x8824>
   1a288:	cmp	r4, #0
   1a28c:	beq	1a2f0 <__assert_fail@plt+0x8870>
   1a290:	cmn	r5, #1
   1a294:	ble	1a2c8 <__assert_fail@plt+0x8848>
   1a298:	mvn	r1, #-2147483648	; 0x80000000
   1a29c:	udiv	r1, r1, r4
   1a2a0:	b	1a2bc <__assert_fail@plt+0x883c>
   1a2a4:	cmn	r5, #1
   1a2a8:	ble	1a2e0 <__assert_fail@plt+0x8860>
   1a2ac:	cmn	r4, #1
   1a2b0:	beq	1a2f0 <__assert_fail@plt+0x8870>
   1a2b4:	mov	r1, #-2147483648	; 0x80000000
   1a2b8:	sdiv	r1, r1, r4
   1a2bc:	cmp	r1, r5
   1a2c0:	bge	1a2f0 <__assert_fail@plt+0x8870>
   1a2c4:	b	1a2dc <__assert_fail@plt+0x885c>
   1a2c8:	beq	1a2f0 <__assert_fail@plt+0x8870>
   1a2cc:	mov	r1, #-2147483648	; 0x80000000
   1a2d0:	sdiv	r1, r1, r5
   1a2d4:	cmp	r1, r4
   1a2d8:	bge	1a2f0 <__assert_fail@plt+0x8870>
   1a2dc:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a2e0:	mvn	r1, #-2147483648	; 0x80000000
   1a2e4:	sdiv	r1, r1, r4
   1a2e8:	cmp	r5, r1
   1a2ec:	blt	1a2dc <__assert_fail@plt+0x885c>
   1a2f0:	mul	r1, r5, r4
   1a2f4:	bl	1a060 <__assert_fail@plt+0x85e0>
   1a2f8:	str	r5, [r8]
   1a2fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a300:	push	{fp, lr}
   1a304:	mov	fp, sp
   1a308:	mov	r1, #1
   1a30c:	bl	1a558 <__assert_fail@plt+0x8ad8>
   1a310:	cmp	r0, #0
   1a314:	popne	{fp, pc}
   1a318:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a31c:	push	{fp, lr}
   1a320:	mov	fp, sp
   1a324:	bl	1a558 <__assert_fail@plt+0x8ad8>
   1a328:	cmp	r0, #0
   1a32c:	popne	{fp, pc}
   1a330:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a334:	push	{fp, lr}
   1a338:	mov	fp, sp
   1a33c:	mov	r1, #1
   1a340:	bl	1a558 <__assert_fail@plt+0x8ad8>
   1a344:	cmp	r0, #0
   1a348:	popne	{fp, pc}
   1a34c:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a350:	push	{fp, lr}
   1a354:	mov	fp, sp
   1a358:	bl	1a558 <__assert_fail@plt+0x8ad8>
   1a35c:	cmp	r0, #0
   1a360:	popne	{fp, pc}
   1a364:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a368:	push	{r4, r5, r6, sl, fp, lr}
   1a36c:	add	fp, sp, #16
   1a370:	mov	r5, r0
   1a374:	mov	r0, r1
   1a378:	mov	r4, r1
   1a37c:	bl	1a5ac <__assert_fail@plt+0x8b2c>
   1a380:	cmp	r0, #0
   1a384:	beq	1a3a0 <__assert_fail@plt+0x8920>
   1a388:	mov	r1, r5
   1a38c:	mov	r2, r4
   1a390:	mov	r6, r0
   1a394:	bl	11720 <memcpy@plt>
   1a398:	mov	r0, r6
   1a39c:	pop	{r4, r5, r6, sl, fp, pc}
   1a3a0:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a3a4:	push	{r4, r5, r6, sl, fp, lr}
   1a3a8:	add	fp, sp, #16
   1a3ac:	mov	r5, r0
   1a3b0:	mov	r0, r1
   1a3b4:	mov	r4, r1
   1a3b8:	bl	1a5ac <__assert_fail@plt+0x8b2c>
   1a3bc:	cmp	r0, #0
   1a3c0:	beq	1a3dc <__assert_fail@plt+0x895c>
   1a3c4:	mov	r1, r5
   1a3c8:	mov	r2, r4
   1a3cc:	mov	r6, r0
   1a3d0:	bl	11720 <memcpy@plt>
   1a3d4:	mov	r0, r6
   1a3d8:	pop	{r4, r5, r6, sl, fp, pc}
   1a3dc:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a3e0:	push	{r4, r5, r6, sl, fp, lr}
   1a3e4:	add	fp, sp, #16
   1a3e8:	mov	r5, r0
   1a3ec:	add	r0, r1, #1
   1a3f0:	mov	r4, r1
   1a3f4:	bl	1a5ac <__assert_fail@plt+0x8b2c>
   1a3f8:	cmp	r0, #0
   1a3fc:	beq	1a424 <__assert_fail@plt+0x89a4>
   1a400:	mov	r6, r0
   1a404:	mov	r0, #0
   1a408:	mov	r1, r5
   1a40c:	mov	r2, r4
   1a410:	strb	r0, [r6, r4]
   1a414:	mov	r0, r6
   1a418:	bl	11720 <memcpy@plt>
   1a41c:	mov	r0, r6
   1a420:	pop	{r4, r5, r6, sl, fp, pc}
   1a424:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a428:	push	{r4, r5, r6, sl, fp, lr}
   1a42c:	add	fp, sp, #16
   1a430:	mov	r4, r0
   1a434:	bl	118dc <strlen@plt>
   1a438:	add	r5, r0, #1
   1a43c:	mov	r0, r5
   1a440:	bl	1a5ac <__assert_fail@plt+0x8b2c>
   1a444:	cmp	r0, #0
   1a448:	beq	1a464 <__assert_fail@plt+0x89e4>
   1a44c:	mov	r1, r4
   1a450:	mov	r2, r5
   1a454:	mov	r6, r0
   1a458:	bl	11720 <memcpy@plt>
   1a45c:	mov	r0, r6
   1a460:	pop	{r4, r5, r6, sl, fp, pc}
   1a464:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a468:	push	{fp, lr}
   1a46c:	mov	fp, sp
   1a470:	movw	r0, #384	; 0x180
   1a474:	movw	r1, #65012	; 0xfdf4
   1a478:	mov	r2, #5
   1a47c:	movt	r0, #3
   1a480:	movt	r1, #1
   1a484:	ldr	r4, [r0]
   1a488:	mov	r0, #0
   1a48c:	bl	1175c <dcgettext@plt>
   1a490:	movw	r2, #63945	; 0xf9c9
   1a494:	mov	r3, r0
   1a498:	mov	r0, r4
   1a49c:	mov	r1, #0
   1a4a0:	movt	r2, #1
   1a4a4:	bl	1184c <error@plt>
   1a4a8:	bl	11a68 <abort@plt>
   1a4ac:	push	{r4, sl, fp, lr}
   1a4b0:	add	fp, sp, #8
   1a4b4:	sub	sp, sp, #8
   1a4b8:	ldr	r4, [fp, #8]
   1a4bc:	str	r4, [sp]
   1a4c0:	bl	1b830 <__assert_fail@plt+0x9db0>
   1a4c4:	mov	r4, r0
   1a4c8:	cmn	r0, #1
   1a4cc:	bgt	1a4e0 <__assert_fail@plt+0x8a60>
   1a4d0:	bl	1190c <__errno_location@plt>
   1a4d4:	ldr	r0, [r0]
   1a4d8:	cmp	r0, #12
   1a4dc:	beq	1a4ec <__assert_fail@plt+0x8a6c>
   1a4e0:	mov	r0, r4
   1a4e4:	sub	sp, fp, #8
   1a4e8:	pop	{r4, sl, fp, pc}
   1a4ec:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a4f0:	push	{r4, sl, fp, lr}
   1a4f4:	add	fp, sp, #8
   1a4f8:	bl	1bab4 <__assert_fail@plt+0xa034>
   1a4fc:	mov	r4, r0
   1a500:	cmp	r0, #0
   1a504:	bne	1a518 <__assert_fail@plt+0x8a98>
   1a508:	bl	1190c <__errno_location@plt>
   1a50c:	ldr	r0, [r0]
   1a510:	cmp	r0, #12
   1a514:	beq	1a520 <__assert_fail@plt+0x8aa0>
   1a518:	mov	r0, r4
   1a51c:	pop	{r4, sl, fp, pc}
   1a520:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a524:	push	{r4, sl, fp, lr}
   1a528:	add	fp, sp, #8
   1a52c:	bl	1bcec <__assert_fail@plt+0xa26c>
   1a530:	mov	r4, r0
   1a534:	cmp	r0, #0
   1a538:	bne	1a54c <__assert_fail@plt+0x8acc>
   1a53c:	bl	1190c <__errno_location@plt>
   1a540:	ldr	r0, [r0]
   1a544:	cmp	r0, #12
   1a548:	beq	1a554 <__assert_fail@plt+0x8ad4>
   1a54c:	mov	r0, r4
   1a550:	pop	{r4, sl, fp, pc}
   1a554:	bl	1a468 <__assert_fail@plt+0x89e8>
   1a558:	clz	r2, r1
   1a55c:	clz	r3, r0
   1a560:	lsr	r2, r2, #5
   1a564:	lsr	r3, r3, #5
   1a568:	orrs	r2, r3, r2
   1a56c:	movwne	r1, #1
   1a570:	movwne	r0, #1
   1a574:	cmp	r1, #0
   1a578:	beq	1a5a8 <__assert_fail@plt+0x8b28>
   1a57c:	mvn	r2, #-2147483648	; 0x80000000
   1a580:	udiv	r2, r2, r1
   1a584:	cmp	r2, r0
   1a588:	bcs	1a5a8 <__assert_fail@plt+0x8b28>
   1a58c:	push	{fp, lr}
   1a590:	mov	fp, sp
   1a594:	bl	1190c <__errno_location@plt>
   1a598:	mov	r1, #12
   1a59c:	str	r1, [r0]
   1a5a0:	mov	r0, #0
   1a5a4:	pop	{fp, pc}
   1a5a8:	b	1166c <calloc@plt>
   1a5ac:	cmp	r0, #0
   1a5b0:	movweq	r0, #1
   1a5b4:	cmn	r0, #1
   1a5b8:	ble	1a5c0 <__assert_fail@plt+0x8b40>
   1a5bc:	b	11858 <malloc@plt>
   1a5c0:	push	{fp, lr}
   1a5c4:	mov	fp, sp
   1a5c8:	bl	1190c <__errno_location@plt>
   1a5cc:	mov	r1, #12
   1a5d0:	str	r1, [r0]
   1a5d4:	mov	r0, #0
   1a5d8:	pop	{fp, pc}
   1a5dc:	push	{fp, lr}
   1a5e0:	mov	fp, sp
   1a5e4:	cmp	r0, #0
   1a5e8:	beq	1a604 <__assert_fail@plt+0x8b84>
   1a5ec:	cmp	r1, #0
   1a5f0:	beq	1a610 <__assert_fail@plt+0x8b90>
   1a5f4:	cmn	r1, #1
   1a5f8:	ble	1a618 <__assert_fail@plt+0x8b98>
   1a5fc:	pop	{fp, lr}
   1a600:	b	117a4 <realloc@plt>
   1a604:	mov	r0, r1
   1a608:	pop	{fp, lr}
   1a60c:	b	1a5ac <__assert_fail@plt+0x8b2c>
   1a610:	bl	17404 <__assert_fail@plt+0x5984>
   1a614:	b	1a624 <__assert_fail@plt+0x8ba4>
   1a618:	bl	1190c <__errno_location@plt>
   1a61c:	mov	r1, #12
   1a620:	str	r1, [r0]
   1a624:	mov	r0, #0
   1a628:	pop	{fp, pc}
   1a62c:	cmp	r0, r1
   1a630:	moveq	r0, #0
   1a634:	bxeq	lr
   1a638:	ldrb	r3, [r1]
   1a63c:	ldrb	ip, [r0]
   1a640:	sub	r2, r3, #65	; 0x41
   1a644:	cmp	r2, #26
   1a648:	sub	r2, ip, #65	; 0x41
   1a64c:	addcc	r3, r3, #32
   1a650:	cmp	r2, #26
   1a654:	addcc	ip, ip, #32
   1a658:	uxtb	r3, r3
   1a65c:	uxtb	r2, ip
   1a660:	cmp	r2, #0
   1a664:	beq	1a678 <__assert_fail@plt+0x8bf8>
   1a668:	add	r1, r1, #1
   1a66c:	add	r0, r0, #1
   1a670:	cmp	r2, r3
   1a674:	beq	1a638 <__assert_fail@plt+0x8bb8>
   1a678:	sub	r0, r2, r3
   1a67c:	bx	lr
   1a680:	push	{r4, r5, r6, sl, fp, lr}
   1a684:	add	fp, sp, #16
   1a688:	mov	r4, r0
   1a68c:	bl	11828 <__fpending@plt>
   1a690:	mov	r5, r0
   1a694:	mov	r0, r4
   1a698:	bl	11834 <ferror_unlocked@plt>
   1a69c:	mov	r6, r0
   1a6a0:	mov	r0, r4
   1a6a4:	bl	1a700 <__assert_fail@plt+0x8c80>
   1a6a8:	cmp	r6, #0
   1a6ac:	beq	1a6cc <__assert_fail@plt+0x8c4c>
   1a6b0:	mvn	r4, #0
   1a6b4:	cmp	r0, #0
   1a6b8:	bne	1a6f8 <__assert_fail@plt+0x8c78>
   1a6bc:	bl	1190c <__errno_location@plt>
   1a6c0:	mov	r1, #0
   1a6c4:	str	r1, [r0]
   1a6c8:	b	1a6f8 <__assert_fail@plt+0x8c78>
   1a6cc:	cmp	r0, #0
   1a6d0:	mov	r4, r0
   1a6d4:	mvnne	r4, #0
   1a6d8:	cmp	r5, #0
   1a6dc:	bne	1a6f8 <__assert_fail@plt+0x8c78>
   1a6e0:	cmp	r0, #0
   1a6e4:	beq	1a6f8 <__assert_fail@plt+0x8c78>
   1a6e8:	bl	1190c <__errno_location@plt>
   1a6ec:	ldr	r0, [r0]
   1a6f0:	subs	r4, r0, #9
   1a6f4:	mvnne	r4, #0
   1a6f8:	mov	r0, r4
   1a6fc:	pop	{r4, r5, r6, sl, fp, pc}
   1a700:	push	{r4, r5, r6, sl, fp, lr}
   1a704:	add	fp, sp, #16
   1a708:	sub	sp, sp, #8
   1a70c:	mov	r4, r0
   1a710:	bl	1196c <fileno@plt>
   1a714:	cmn	r0, #1
   1a718:	ble	1a78c <__assert_fail@plt+0x8d0c>
   1a71c:	mov	r0, r4
   1a720:	bl	1187c <__freading@plt>
   1a724:	cmp	r0, #0
   1a728:	beq	1a754 <__assert_fail@plt+0x8cd4>
   1a72c:	mov	r0, r4
   1a730:	bl	1196c <fileno@plt>
   1a734:	mov	r1, #1
   1a738:	mov	r2, #0
   1a73c:	mov	r3, #0
   1a740:	str	r1, [sp]
   1a744:	bl	11804 <lseek64@plt>
   1a748:	and	r0, r0, r1
   1a74c:	cmn	r0, #1
   1a750:	beq	1a78c <__assert_fail@plt+0x8d0c>
   1a754:	mov	r0, r4
   1a758:	bl	1a79c <__assert_fail@plt+0x8d1c>
   1a75c:	cmp	r0, #0
   1a760:	beq	1a78c <__assert_fail@plt+0x8d0c>
   1a764:	bl	1190c <__errno_location@plt>
   1a768:	ldr	r6, [r0]
   1a76c:	mov	r5, r0
   1a770:	mov	r0, r4
   1a774:	bl	11990 <fclose@plt>
   1a778:	cmp	r6, #0
   1a77c:	strne	r6, [r5]
   1a780:	mvnne	r0, #0
   1a784:	sub	sp, fp, #16
   1a788:	pop	{r4, r5, r6, sl, fp, pc}
   1a78c:	mov	r0, r4
   1a790:	sub	sp, fp, #16
   1a794:	pop	{r4, r5, r6, sl, fp, lr}
   1a798:	b	11990 <fclose@plt>
   1a79c:	push	{r4, sl, fp, lr}
   1a7a0:	add	fp, sp, #8
   1a7a4:	sub	sp, sp, #8
   1a7a8:	mov	r4, r0
   1a7ac:	cmp	r0, #0
   1a7b0:	beq	1a7cc <__assert_fail@plt+0x8d4c>
   1a7b4:	mov	r0, r4
   1a7b8:	bl	1187c <__freading@plt>
   1a7bc:	cmp	r0, #0
   1a7c0:	ldrbne	r0, [r4, #1]
   1a7c4:	tstne	r0, #1
   1a7c8:	bne	1a7dc <__assert_fail@plt+0x8d5c>
   1a7cc:	mov	r0, r4
   1a7d0:	sub	sp, fp, #8
   1a7d4:	pop	{r4, sl, fp, lr}
   1a7d8:	b	116c0 <fflush@plt>
   1a7dc:	mov	r0, #1
   1a7e0:	mov	r2, #0
   1a7e4:	mov	r3, #0
   1a7e8:	str	r0, [sp]
   1a7ec:	mov	r0, r4
   1a7f0:	bl	1a7f8 <__assert_fail@plt+0x8d78>
   1a7f4:	b	1a7cc <__assert_fail@plt+0x8d4c>
   1a7f8:	push	{r4, r5, r6, r7, fp, lr}
   1a7fc:	add	fp, sp, #16
   1a800:	sub	sp, sp, #8
   1a804:	mov	r4, r0
   1a808:	ldr	r0, [r0, #4]
   1a80c:	mov	r5, r3
   1a810:	mov	r6, r2
   1a814:	ldr	r1, [r4, #8]
   1a818:	cmp	r1, r0
   1a81c:	bne	1a838 <__assert_fail@plt+0x8db8>
   1a820:	ldrd	r0, [r4, #16]
   1a824:	cmp	r1, r0
   1a828:	bne	1a838 <__assert_fail@plt+0x8db8>
   1a82c:	ldr	r0, [r4, #36]	; 0x24
   1a830:	cmp	r0, #0
   1a834:	beq	1a850 <__assert_fail@plt+0x8dd0>
   1a838:	mov	r0, r4
   1a83c:	mov	r2, r6
   1a840:	mov	r3, r5
   1a844:	sub	sp, fp, #16
   1a848:	pop	{r4, r5, r6, r7, fp, lr}
   1a84c:	b	119a8 <fseeko64@plt>
   1a850:	ldr	r7, [fp, #8]
   1a854:	mov	r0, r4
   1a858:	bl	1196c <fileno@plt>
   1a85c:	mov	r2, r6
   1a860:	mov	r3, r5
   1a864:	str	r7, [sp]
   1a868:	bl	11804 <lseek64@plt>
   1a86c:	and	r2, r0, r1
   1a870:	cmn	r2, #1
   1a874:	beq	1a890 <__assert_fail@plt+0x8e10>
   1a878:	strd	r0, [r4, #80]	; 0x50
   1a87c:	ldr	r0, [r4]
   1a880:	bic	r0, r0, #16
   1a884:	str	r0, [r4]
   1a888:	mov	r0, #0
   1a88c:	b	1a894 <__assert_fail@plt+0x8e14>
   1a890:	mvn	r0, #0
   1a894:	sub	sp, fp, #16
   1a898:	pop	{r4, r5, r6, r7, fp, pc}
   1a89c:	push	{fp, lr}
   1a8a0:	mov	fp, sp
   1a8a4:	mov	r0, #14
   1a8a8:	bl	119f0 <nl_langinfo@plt>
   1a8ac:	movw	r1, #50097	; 0xc3b1
   1a8b0:	cmp	r0, #0
   1a8b4:	movt	r1, #1
   1a8b8:	movne	r1, r0
   1a8bc:	movw	r0, #65029	; 0xfe05
   1a8c0:	ldrb	r2, [r1]
   1a8c4:	movt	r0, #1
   1a8c8:	cmp	r2, #0
   1a8cc:	movne	r0, r1
   1a8d0:	pop	{fp, pc}
   1a8d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a8d8:	add	fp, sp, #24
   1a8dc:	mov	r4, r0
   1a8e0:	ldrb	r0, [r0, #16]
   1a8e4:	cmp	r0, #0
   1a8e8:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a8ec:	ldrb	r0, [r4, #4]
   1a8f0:	cmp	r0, #0
   1a8f4:	beq	1a94c <__assert_fail@plt+0x8ecc>
   1a8f8:	mov	r5, r4
   1a8fc:	ldr	r6, [r5, #20]!
   1a900:	sub	r8, r5, #12
   1a904:	ldr	r0, [r4]
   1a908:	add	r7, r4, #32
   1a90c:	mov	r1, r6
   1a910:	mov	r3, r8
   1a914:	sub	r2, r0, r6
   1a918:	mov	r0, r7
   1a91c:	bl	1ab2c <__assert_fail@plt+0x90ac>
   1a920:	cmn	r0, #2
   1a924:	str	r0, [r4, #24]
   1a928:	beq	1a9cc <__assert_fail@plt+0x8f4c>
   1a92c:	cmp	r0, #0
   1a930:	beq	1a988 <__assert_fail@plt+0x8f08>
   1a934:	cmn	r0, #1
   1a938:	bne	1a9ac <__assert_fail@plt+0x8f2c>
   1a93c:	mov	r0, #0
   1a940:	strb	r0, [r4, #28]
   1a944:	mov	r0, #1
   1a948:	b	1a9e0 <__assert_fail@plt+0x8f60>
   1a94c:	ldr	r6, [r4, #20]
   1a950:	movw	r2, #65232	; 0xfed0
   1a954:	movt	r2, #1
   1a958:	ldrb	r0, [r6]
   1a95c:	ubfx	r1, r0, #5, #3
   1a960:	ldr	r1, [r2, r1, lsl #2]
   1a964:	and	r2, r0, #31
   1a968:	mov	r0, #1
   1a96c:	tst	r1, r0, lsl r2
   1a970:	beq	1a9f0 <__assert_fail@plt+0x8f70>
   1a974:	str	r0, [r4, #24]
   1a978:	ldrb	r1, [r6]
   1a97c:	strb	r0, [r4, #28]
   1a980:	str	r1, [r4, #32]
   1a984:	b	1a9e4 <__assert_fail@plt+0x8f64>
   1a988:	mov	r0, #1
   1a98c:	str	r0, [r4, #24]
   1a990:	ldr	r0, [r4, #20]
   1a994:	ldrb	r0, [r0]
   1a998:	cmp	r0, #0
   1a99c:	bne	1aa14 <__assert_fail@plt+0x8f94>
   1a9a0:	ldr	r0, [r7]
   1a9a4:	cmp	r0, #0
   1a9a8:	bne	1aa34 <__assert_fail@plt+0x8fb4>
   1a9ac:	mov	r0, #1
   1a9b0:	strb	r0, [r4, #28]
   1a9b4:	mov	r0, r8
   1a9b8:	bl	11738 <mbsinit@plt>
   1a9bc:	cmp	r0, #0
   1a9c0:	movne	r0, #0
   1a9c4:	strbne	r0, [r4, #4]
   1a9c8:	b	1a9e4 <__assert_fail@plt+0x8f64>
   1a9cc:	mov	r1, #0
   1a9d0:	ldr	r0, [r5]
   1a9d4:	strb	r1, [r4, #28]
   1a9d8:	ldr	r1, [r4]
   1a9dc:	sub	r0, r1, r0
   1a9e0:	str	r0, [r4, #24]
   1a9e4:	mov	r0, #1
   1a9e8:	strb	r0, [r4, #16]
   1a9ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a9f0:	add	r8, r4, #8
   1a9f4:	mov	r0, r8
   1a9f8:	bl	11738 <mbsinit@plt>
   1a9fc:	cmp	r0, #0
   1aa00:	beq	1aa54 <__assert_fail@plt+0x8fd4>
   1aa04:	mov	r0, #1
   1aa08:	add	r5, r4, #20
   1aa0c:	strb	r0, [r4, #4]
   1aa10:	b	1a904 <__assert_fail@plt+0x8e84>
   1aa14:	movw	r0, #65119	; 0xfe5f
   1aa18:	movw	r1, #65058	; 0xfe22
   1aa1c:	movw	r3, #65073	; 0xfe31
   1aa20:	mov	r2, #162	; 0xa2
   1aa24:	movt	r0, #1
   1aa28:	movt	r1, #1
   1aa2c:	movt	r3, #1
   1aa30:	bl	11a80 <__assert_fail@plt>
   1aa34:	movw	r0, #65142	; 0xfe76
   1aa38:	movw	r1, #65058	; 0xfe22
   1aa3c:	movw	r3, #65073	; 0xfe31
   1aa40:	mov	r2, #163	; 0xa3
   1aa44:	movt	r0, #1
   1aa48:	movt	r1, #1
   1aa4c:	movt	r3, #1
   1aa50:	bl	11a80 <__assert_fail@plt>
   1aa54:	movw	r0, #65035	; 0xfe0b
   1aa58:	movw	r1, #65058	; 0xfe22
   1aa5c:	movw	r3, #65073	; 0xfe31
   1aa60:	mov	r2, #135	; 0x87
   1aa64:	movt	r0, #1
   1aa68:	movt	r1, #1
   1aa6c:	movt	r3, #1
   1aa70:	bl	11a80 <__assert_fail@plt>
   1aa74:	ldr	r3, [r0, #20]
   1aa78:	ldr	r2, [r0]
   1aa7c:	add	r3, r3, r1
   1aa80:	add	r1, r2, r1
   1aa84:	str	r3, [r0, #20]
   1aa88:	str	r1, [r0]
   1aa8c:	bx	lr
   1aa90:	push	{r4, r5, r6, sl, fp, lr}
   1aa94:	add	fp, sp, #16
   1aa98:	mov	r4, r0
   1aa9c:	ldr	r0, [r1]
   1aaa0:	mov	r5, r1
   1aaa4:	str	r0, [r4]
   1aaa8:	add	r0, r4, #8
   1aaac:	ldrb	r1, [r1, #4]
   1aab0:	cmp	r1, #0
   1aab4:	strb	r1, [r4, #4]
   1aab8:	beq	1aacc <__assert_fail@plt+0x904c>
   1aabc:	ldr	r1, [r5, #8]
   1aac0:	ldr	r2, [r5, #12]
   1aac4:	stm	r0, {r1, r2}
   1aac8:	b	1aad8 <__assert_fail@plt+0x9058>
   1aacc:	mov	r1, #0
   1aad0:	str	r1, [r0]
   1aad4:	str	r1, [r0, #4]
   1aad8:	ldrb	r0, [r5, #16]
   1aadc:	strb	r0, [r4, #16]
   1aae0:	add	r0, r5, #36	; 0x24
   1aae4:	ldr	r1, [r5, #20]
   1aae8:	cmp	r1, r0
   1aaec:	beq	1aaf8 <__assert_fail@plt+0x9078>
   1aaf0:	mov	r6, r1
   1aaf4:	b	1ab08 <__assert_fail@plt+0x9088>
   1aaf8:	ldr	r2, [r5, #24]
   1aafc:	add	r6, r4, #36	; 0x24
   1ab00:	mov	r0, r6
   1ab04:	bl	11720 <memcpy@plt>
   1ab08:	str	r6, [r4, #20]
   1ab0c:	ldr	r0, [r5, #24]
   1ab10:	str	r0, [r4, #24]
   1ab14:	ldrb	r0, [r5, #28]
   1ab18:	strb	r0, [r4, #28]
   1ab1c:	cmp	r0, #0
   1ab20:	ldrne	r0, [r5, #32]
   1ab24:	strne	r0, [r4, #32]
   1ab28:	pop	{r4, r5, r6, sl, fp, pc}
   1ab2c:	push	{r4, r5, r6, r7, fp, lr}
   1ab30:	add	fp, sp, #16
   1ab34:	sub	sp, sp, #8
   1ab38:	add	r5, sp, #4
   1ab3c:	cmp	r0, #0
   1ab40:	mov	r7, r2
   1ab44:	mov	r4, r1
   1ab48:	movne	r5, r0
   1ab4c:	mov	r0, r5
   1ab50:	bl	11840 <mbrtowc@plt>
   1ab54:	mov	r6, r0
   1ab58:	cmp	r7, #0
   1ab5c:	beq	1ab80 <__assert_fail@plt+0x9100>
   1ab60:	cmn	r6, #2
   1ab64:	bcc	1ab80 <__assert_fail@plt+0x9100>
   1ab68:	mov	r0, #0
   1ab6c:	bl	1bdf0 <__assert_fail@plt+0xa370>
   1ab70:	cmp	r0, #0
   1ab74:	ldrbeq	r0, [r4]
   1ab78:	moveq	r6, #1
   1ab7c:	streq	r0, [r5]
   1ab80:	mov	r0, r6
   1ab84:	sub	sp, fp, #16
   1ab88:	pop	{r4, r5, r6, r7, fp, pc}
   1ab8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab90:	add	fp, sp, #28
   1ab94:	sub	sp, sp, #308	; 0x134
   1ab98:	mov	r5, r1
   1ab9c:	mov	r7, r0
   1aba0:	bl	1181c <__ctype_get_mb_cur_max@plt>
   1aba4:	cmp	r0, #2
   1aba8:	bcc	1af24 <__assert_fail@plt+0x94a4>
   1abac:	mov	r4, #0
   1abb0:	sub	r0, fp, #88	; 0x58
   1abb4:	str	r4, [fp, #-80]	; 0xffffffb0
   1abb8:	str	r4, [fp, #-84]	; 0xffffffac
   1abbc:	strb	r4, [fp, #-88]	; 0xffffffa8
   1abc0:	str	r5, [fp, #-72]	; 0xffffffb8
   1abc4:	strb	r4, [fp, #-76]	; 0xffffffb4
   1abc8:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1abcc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1abd0:	cmp	r0, #0
   1abd4:	beq	1abe4 <__assert_fail@plt+0x9164>
   1abd8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1abdc:	cmp	r0, #0
   1abe0:	beq	1b044 <__assert_fail@plt+0x95c4>
   1abe4:	add	r0, sp, #136	; 0x88
   1abe8:	str	r4, [fp, #-136]	; 0xffffff78
   1abec:	str	r4, [fp, #-140]	; 0xffffff74
   1abf0:	strb	r4, [fp, #-144]	; 0xffffff70
   1abf4:	str	r5, [fp, #-128]	; 0xffffff80
   1abf8:	str	r4, [sp, #144]	; 0x90
   1abfc:	str	r4, [sp, #140]	; 0x8c
   1ac00:	str	r7, [sp, #152]	; 0x98
   1ac04:	strb	r4, [sp, #136]	; 0x88
   1ac08:	strb	r4, [fp, #-132]	; 0xffffff7c
   1ac0c:	str	r7, [sp, #12]
   1ac10:	strb	r4, [sp, #148]	; 0x94
   1ac14:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1ac18:	ldrb	r0, [sp, #160]	; 0xa0
   1ac1c:	cmp	r0, #0
   1ac20:	beq	1ac30 <__assert_fail@plt+0x91b0>
   1ac24:	ldr	r0, [sp, #164]	; 0xa4
   1ac28:	cmp	r0, #0
   1ac2c:	beq	1b050 <__assert_fail@plt+0x95d0>
   1ac30:	add	r0, sp, #24
   1ac34:	mov	sl, #0
   1ac38:	sub	r7, fp, #144	; 0x90
   1ac3c:	mov	r1, #0
   1ac40:	mov	r6, #0
   1ac44:	mov	r9, #0
   1ac48:	add	r0, r0, #4
   1ac4c:	str	r0, [sp, #8]
   1ac50:	mov	r0, #1
   1ac54:	str	r0, [sp, #16]
   1ac58:	add	r0, r9, r9, lsl #2
   1ac5c:	mov	r8, r6
   1ac60:	cmp	r6, r0
   1ac64:	bcc	1ad14 <__assert_fail@plt+0x9294>
   1ac68:	ldr	r0, [sp, #16]
   1ac6c:	tst	r0, #1
   1ac70:	beq	1ad14 <__assert_fail@plt+0x9294>
   1ac74:	cmp	r9, #10
   1ac78:	bcc	1ad14 <__assert_fail@plt+0x9294>
   1ac7c:	subs	r0, r8, r1
   1ac80:	beq	1acc4 <__assert_fail@plt+0x9244>
   1ac84:	sub	r6, r1, r8
   1ac88:	mov	r0, r7
   1ac8c:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1ac90:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1ac94:	cmp	r0, #0
   1ac98:	beq	1aca8 <__assert_fail@plt+0x9228>
   1ac9c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1aca0:	cmp	r0, #0
   1aca4:	beq	1acc4 <__assert_fail@plt+0x9244>
   1aca8:	strb	sl, [fp, #-132]	; 0xffffff7c
   1acac:	adds	r6, r6, #1
   1acb0:	ldr	r0, [fp, #-128]	; 0xffffff80
   1acb4:	ldr	r1, [fp, #-124]	; 0xffffff84
   1acb8:	add	r0, r0, r1
   1acbc:	str	r0, [fp, #-128]	; 0xffffff80
   1acc0:	bne	1ac88 <__assert_fail@plt+0x9208>
   1acc4:	mov	r0, r7
   1acc8:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1accc:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1acd0:	cmp	r0, #0
   1acd4:	beq	1ad10 <__assert_fail@plt+0x9290>
   1acd8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1acdc:	mov	r1, r8
   1ace0:	cmp	r0, #0
   1ace4:	bne	1ad14 <__assert_fail@plt+0x9294>
   1ace8:	ldr	r0, [sp, #12]
   1acec:	mov	r1, r5
   1acf0:	add	r2, sp, #80	; 0x50
   1acf4:	bl	1b078 <__assert_fail@plt+0x95f8>
   1acf8:	mov	r1, #0
   1acfc:	cmp	r0, #0
   1ad00:	str	r1, [sp, #16]
   1ad04:	mov	r1, r8
   1ad08:	beq	1ad14 <__assert_fail@plt+0x9294>
   1ad0c:	b	1b06c <__assert_fail@plt+0x95ec>
   1ad10:	mov	r1, r8
   1ad14:	ldrb	r0, [sp, #160]	; 0xa0
   1ad18:	add	r6, r8, #1
   1ad1c:	str	r1, [sp, #20]
   1ad20:	cmp	r0, #0
   1ad24:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   1ad28:	cmpne	r0, #0
   1ad2c:	bne	1ad58 <__assert_fail@plt+0x92d8>
   1ad30:	ldr	r2, [sp, #156]	; 0x9c
   1ad34:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ad38:	cmp	r2, r0
   1ad3c:	bne	1aee0 <__assert_fail@plt+0x9460>
   1ad40:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1ad44:	ldr	r0, [sp, #152]	; 0x98
   1ad48:	bl	11744 <memcmp@plt>
   1ad4c:	cmp	r0, #0
   1ad50:	bne	1aee0 <__assert_fail@plt+0x9460>
   1ad54:	b	1ad68 <__assert_fail@plt+0x92e8>
   1ad58:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1ad5c:	ldr	r1, [sp, #164]	; 0xa4
   1ad60:	cmp	r1, r0
   1ad64:	bne	1aee0 <__assert_fail@plt+0x9460>
   1ad68:	str	r9, [sp, #4]
   1ad6c:	add	r1, sp, #136	; 0x88
   1ad70:	mov	ip, r5
   1ad74:	add	r0, sp, #80	; 0x50
   1ad78:	ldm	r1!, {r2, r3, r5, r6}
   1ad7c:	stmia	r0!, {r2, r3, r5, r6}
   1ad80:	ldm	r1!, {r2, r3, r4, r5, r6}
   1ad84:	stmia	r0!, {r2, r3, r4, r5, r6}
   1ad88:	ldm	r1, {r2, r3, r4, r5, r6}
   1ad8c:	stm	r0, {r2, r3, r4, r5, r6}
   1ad90:	strb	sl, [sp, #92]	; 0x5c
   1ad94:	str	ip, [sp, #40]	; 0x28
   1ad98:	strb	sl, [sp, #24]
   1ad9c:	mov	r5, ip
   1ada0:	ldr	r0, [sp, #96]	; 0x60
   1ada4:	ldr	r1, [sp, #100]	; 0x64
   1ada8:	add	r0, r0, r1
   1adac:	str	r0, [sp, #96]	; 0x60
   1adb0:	ldr	r0, [sp, #8]
   1adb4:	str	sl, [r0]
   1adb8:	str	sl, [r0, #4]
   1adbc:	add	r0, sp, #24
   1adc0:	strb	sl, [sp, #36]	; 0x24
   1adc4:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1adc8:	ldrb	r0, [sp, #48]	; 0x30
   1adcc:	cmp	r0, #0
   1add0:	beq	1ade0 <__assert_fail@plt+0x9360>
   1add4:	ldr	r0, [sp, #52]	; 0x34
   1add8:	cmp	r0, #0
   1addc:	beq	1b074 <__assert_fail@plt+0x95f4>
   1ade0:	strb	sl, [sp, #36]	; 0x24
   1ade4:	ldr	r0, [sp, #40]	; 0x28
   1ade8:	ldr	r1, [sp, #44]	; 0x2c
   1adec:	add	r0, r0, r1
   1adf0:	str	r0, [sp, #40]	; 0x28
   1adf4:	add	r0, sp, #24
   1adf8:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1adfc:	ldrb	r0, [sp, #48]	; 0x30
   1ae00:	cmp	r0, #0
   1ae04:	beq	1ae14 <__assert_fail@plt+0x9394>
   1ae08:	ldr	r0, [sp, #52]	; 0x34
   1ae0c:	cmp	r0, #0
   1ae10:	beq	1b05c <__assert_fail@plt+0x95dc>
   1ae14:	add	r6, r8, #2
   1ae18:	add	r0, sp, #80	; 0x50
   1ae1c:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1ae20:	ldr	r0, [sp, #108]	; 0x6c
   1ae24:	ldrb	r1, [sp, #104]	; 0x68
   1ae28:	cmp	r0, #0
   1ae2c:	bne	1ae38 <__assert_fail@plt+0x93b8>
   1ae30:	cmp	r1, #0
   1ae34:	bne	1b04c <__assert_fail@plt+0x95cc>
   1ae38:	cmp	r1, #0
   1ae3c:	ldrbne	r1, [sp, #48]	; 0x30
   1ae40:	cmpne	r1, #0
   1ae44:	bne	1ae80 <__assert_fail@plt+0x9400>
   1ae48:	ldr	r4, [sp, #100]	; 0x64
   1ae4c:	ldr	r0, [sp, #44]	; 0x2c
   1ae50:	cmp	r4, r0
   1ae54:	bne	1aedc <__assert_fail@plt+0x945c>
   1ae58:	ldr	r8, [sp, #40]	; 0x28
   1ae5c:	ldr	r9, [sp, #96]	; 0x60
   1ae60:	mov	r2, r4
   1ae64:	mov	r0, r9
   1ae68:	mov	r1, r8
   1ae6c:	bl	11744 <memcmp@plt>
   1ae70:	cmp	r0, #0
   1ae74:	mov	r0, r4
   1ae78:	beq	1ae9c <__assert_fail@plt+0x941c>
   1ae7c:	b	1aedc <__assert_fail@plt+0x945c>
   1ae80:	ldr	r1, [sp, #52]	; 0x34
   1ae84:	cmp	r0, r1
   1ae88:	bne	1aedc <__assert_fail@plt+0x945c>
   1ae8c:	ldr	r8, [sp, #40]	; 0x28
   1ae90:	ldr	r4, [sp, #44]	; 0x2c
   1ae94:	ldr	r9, [sp, #96]	; 0x60
   1ae98:	ldr	r0, [sp, #100]	; 0x64
   1ae9c:	add	r0, r9, r0
   1aea0:	strb	sl, [sp, #92]	; 0x5c
   1aea4:	strb	sl, [sp, #36]	; 0x24
   1aea8:	str	r0, [sp, #96]	; 0x60
   1aeac:	add	r0, r8, r4
   1aeb0:	str	r0, [sp, #40]	; 0x28
   1aeb4:	add	r0, sp, #24
   1aeb8:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1aebc:	ldrb	r0, [sp, #48]	; 0x30
   1aec0:	add	r6, r6, #1
   1aec4:	cmp	r0, #0
   1aec8:	beq	1ae18 <__assert_fail@plt+0x9398>
   1aecc:	ldr	r0, [sp, #52]	; 0x34
   1aed0:	cmp	r0, #0
   1aed4:	bne	1ae18 <__assert_fail@plt+0x9398>
   1aed8:	b	1b05c <__assert_fail@plt+0x95dc>
   1aedc:	ldr	r9, [sp, #4]
   1aee0:	mov	r4, #0
   1aee4:	add	r9, r9, #1
   1aee8:	strb	r4, [sp, #148]	; 0x94
   1aeec:	ldr	r0, [sp, #152]	; 0x98
   1aef0:	ldr	r1, [sp, #156]	; 0x9c
   1aef4:	add	r0, r0, r1
   1aef8:	str	r0, [sp, #152]	; 0x98
   1aefc:	add	r0, sp, #136	; 0x88
   1af00:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1af04:	ldrb	r0, [sp, #160]	; 0xa0
   1af08:	ldr	r1, [sp, #20]
   1af0c:	cmp	r0, #0
   1af10:	beq	1ac58 <__assert_fail@plt+0x91d8>
   1af14:	ldr	r0, [sp, #164]	; 0xa4
   1af18:	cmp	r0, #0
   1af1c:	bne	1ac58 <__assert_fail@plt+0x91d8>
   1af20:	b	1b050 <__assert_fail@plt+0x95d0>
   1af24:	ldrb	r6, [r5]
   1af28:	cmp	r6, #0
   1af2c:	beq	1b044 <__assert_fail@plt+0x95c4>
   1af30:	ldrb	r9, [r7]
   1af34:	cmp	r9, #0
   1af38:	beq	1b04c <__assert_fail@plt+0x95cc>
   1af3c:	mov	r3, #1
   1af40:	mov	ip, #0
   1af44:	mov	lr, r5
   1af48:	mov	r8, #0
   1af4c:	mov	sl, #0
   1af50:	str	r6, [sp, #16]
   1af54:	add	r0, sl, sl, lsl #2
   1af58:	cmp	r8, r0
   1af5c:	bcc	1afec <__assert_fail@plt+0x956c>
   1af60:	tst	r3, #1
   1af64:	beq	1afec <__assert_fail@plt+0x956c>
   1af68:	cmp	sl, #10
   1af6c:	bcc	1afec <__assert_fail@plt+0x956c>
   1af70:	cmp	lr, #0
   1af74:	str	r3, [sp, #20]
   1af78:	beq	1afac <__assert_fail@plt+0x952c>
   1af7c:	sub	r1, r8, ip
   1af80:	mov	r0, lr
   1af84:	mov	r6, lr
   1af88:	bl	1199c <strnlen@plt>
   1af8c:	mov	lr, r6
   1af90:	mov	ip, r8
   1af94:	ldrb	r0, [lr, r0]!
   1af98:	cmp	r0, #0
   1af9c:	beq	1afac <__assert_fail@plt+0x952c>
   1afa0:	ldr	r3, [sp, #20]
   1afa4:	mov	ip, r8
   1afa8:	b	1afe8 <__assert_fail@plt+0x9568>
   1afac:	mov	r0, r5
   1afb0:	mov	r4, ip
   1afb4:	bl	118dc <strlen@plt>
   1afb8:	mov	r2, r0
   1afbc:	mov	r0, r7
   1afc0:	mov	r1, r5
   1afc4:	sub	r3, fp, #88	; 0x58
   1afc8:	bl	1b470 <__assert_fail@plt+0x99f0>
   1afcc:	cmp	r0, #0
   1afd0:	bne	1b064 <__assert_fail@plt+0x95e4>
   1afd4:	ldr	r3, [sp, #20]
   1afd8:	ldrb	r9, [r7]
   1afdc:	mov	lr, #0
   1afe0:	mov	ip, r4
   1afe4:	and	r3, r3, r0
   1afe8:	ldr	r6, [sp, #16]
   1afec:	uxtb	r0, r9
   1aff0:	cmp	r0, r6
   1aff4:	bne	1b028 <__assert_fail@plt+0x95a8>
   1aff8:	mov	r0, #1
   1affc:	ldrb	r1, [r5, r0]
   1b000:	cmp	r1, #0
   1b004:	beq	1b044 <__assert_fail@plt+0x95c4>
   1b008:	ldrb	r2, [r7, r0]
   1b00c:	cmp	r2, #0
   1b010:	beq	1b04c <__assert_fail@plt+0x95cc>
   1b014:	add	r0, r0, #1
   1b018:	cmp	r2, r1
   1b01c:	beq	1affc <__assert_fail@plt+0x957c>
   1b020:	add	r8, r8, r0
   1b024:	b	1b02c <__assert_fail@plt+0x95ac>
   1b028:	add	r8, r8, #1
   1b02c:	ldrb	r9, [r7, #1]!
   1b030:	add	sl, sl, #1
   1b034:	mov	r4, #0
   1b038:	cmp	r9, #0
   1b03c:	bne	1af54 <__assert_fail@plt+0x94d4>
   1b040:	b	1b050 <__assert_fail@plt+0x95d0>
   1b044:	mov	r4, r7
   1b048:	b	1b050 <__assert_fail@plt+0x95d0>
   1b04c:	mov	r4, #0
   1b050:	mov	r0, r4
   1b054:	sub	sp, fp, #28
   1b058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b05c:	ldr	r4, [sp, #152]	; 0x98
   1b060:	b	1b050 <__assert_fail@plt+0x95d0>
   1b064:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1b068:	b	1b050 <__assert_fail@plt+0x95d0>
   1b06c:	ldr	r4, [sp, #80]	; 0x50
   1b070:	b	1b050 <__assert_fail@plt+0x95d0>
   1b074:	bl	11a68 <abort@plt>
   1b078:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b07c:	add	fp, sp, #28
   1b080:	sub	sp, sp, #132	; 0x84
   1b084:	mov	r4, r0
   1b088:	mov	r0, r1
   1b08c:	mov	r8, r2
   1b090:	mov	r7, r1
   1b094:	bl	1bf94 <__assert_fail@plt+0xa514>
   1b098:	mov	sl, r0
   1b09c:	movw	r0, #47662	; 0xba2e
   1b0a0:	mov	r5, #0
   1b0a4:	movt	r0, #744	; 0x2e8
   1b0a8:	cmp	sl, r0
   1b0ac:	bhi	1b460 <__assert_fail@plt+0x99e0>
   1b0b0:	mov	r0, #44	; 0x2c
   1b0b4:	mul	r0, sl, r0
   1b0b8:	cmp	r0, #4016	; 0xfb0
   1b0bc:	bhi	1b0dc <__assert_fail@plt+0x965c>
   1b0c0:	add	r0, r0, #22
   1b0c4:	bic	r0, r0, #7
   1b0c8:	sub	r0, sp, r0
   1b0cc:	add	r1, r0, #15
   1b0d0:	bic	r9, r1, #15
   1b0d4:	mov	sp, r0
   1b0d8:	b	1b0e4 <__assert_fail@plt+0x9664>
   1b0dc:	bl	1be54 <__assert_fail@plt+0xa3d4>
   1b0e0:	mov	r9, r0
   1b0e4:	cmp	r9, #0
   1b0e8:	beq	1b460 <__assert_fail@plt+0x99e0>
   1b0ec:	sub	r6, fp, #88	; 0x58
   1b0f0:	str	r4, [fp, #-160]	; 0xffffff60
   1b0f4:	mov	r4, #0
   1b0f8:	mov	r0, r6
   1b0fc:	str	r4, [fp, #-80]	; 0xffffffb0
   1b100:	str	r4, [fp, #-84]	; 0xffffffac
   1b104:	strb	r4, [fp, #-88]	; 0xffffffa8
   1b108:	str	r7, [fp, #-72]	; 0xffffffb8
   1b10c:	strb	r4, [fp, #-76]	; 0xffffffb4
   1b110:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1b114:	add	r0, sl, sl, lsl #2
   1b118:	add	r3, r9, r0, lsl #3
   1b11c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b120:	str	r3, [fp, #-148]	; 0xffffff6c
   1b124:	cmp	r0, #0
   1b128:	beq	1b138 <__assert_fail@plt+0x96b8>
   1b12c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b130:	cmp	r0, #0
   1b134:	beq	1b1bc <__assert_fail@plt+0x973c>
   1b138:	add	r7, r9, #16
   1b13c:	add	r5, r6, #32
   1b140:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b144:	cmp	r0, r5
   1b148:	bne	1b160 <__assert_fail@plt+0x96e0>
   1b14c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b150:	mov	r0, r7
   1b154:	mov	r1, r5
   1b158:	bl	11720 <memcpy@plt>
   1b15c:	mov	r0, r7
   1b160:	str	r0, [r7, #-16]
   1b164:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b168:	str	r0, [r7, #-12]
   1b16c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b170:	strb	r0, [r7, #-8]
   1b174:	cmp	r0, #0
   1b178:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   1b17c:	strne	r0, [r7, #-4]
   1b180:	strb	r4, [fp, #-76]	; 0xffffffb4
   1b184:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b188:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b18c:	add	r0, r0, r1
   1b190:	str	r0, [fp, #-72]	; 0xffffffb8
   1b194:	mov	r0, r6
   1b198:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1b19c:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1b1a0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b1a4:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1b1a8:	add	r7, r7, #40	; 0x28
   1b1ac:	cmp	r1, #0
   1b1b0:	beq	1b140 <__assert_fail@plt+0x96c0>
   1b1b4:	cmp	r0, #0
   1b1b8:	bne	1b140 <__assert_fail@plt+0x96c0>
   1b1bc:	mov	r0, #1
   1b1c0:	cmp	sl, #3
   1b1c4:	str	r8, [fp, #-156]	; 0xffffff64
   1b1c8:	str	sl, [fp, #-152]	; 0xffffff68
   1b1cc:	str	r0, [r3, #4]
   1b1d0:	bcc	1b290 <__assert_fail@plt+0x9810>
   1b1d4:	mov	r4, #2
   1b1d8:	mov	r5, #0
   1b1dc:	add	r0, r4, r4, lsl #2
   1b1e0:	add	r0, r9, r0, lsl #3
   1b1e4:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   1b1e8:	sub	r7, r0, #28
   1b1ec:	sub	sl, r0, #40	; 0x28
   1b1f0:	sub	r6, r0, #36	; 0x24
   1b1f4:	b	1b200 <__assert_fail@plt+0x9780>
   1b1f8:	ldr	r0, [r3, r5, lsl #2]
   1b1fc:	sub	r5, r5, r0
   1b200:	cmp	r8, #0
   1b204:	beq	1b230 <__assert_fail@plt+0x97b0>
   1b208:	add	r0, r5, r5, lsl #2
   1b20c:	add	r0, r9, r0, lsl #3
   1b210:	ldrb	r1, [r0, #8]
   1b214:	cmp	r1, #0
   1b218:	beq	1b230 <__assert_fail@plt+0x97b0>
   1b21c:	ldr	r0, [r0, #12]
   1b220:	ldr	r1, [r7]
   1b224:	cmp	r1, r0
   1b228:	bne	1b260 <__assert_fail@plt+0x97e0>
   1b22c:	b	1b274 <__assert_fail@plt+0x97f4>
   1b230:	add	r0, r5, r5, lsl #2
   1b234:	ldr	r2, [r6]
   1b238:	add	r1, r9, r0, lsl #3
   1b23c:	ldr	r1, [r1, #4]
   1b240:	cmp	r2, r1
   1b244:	bne	1b260 <__assert_fail@plt+0x97e0>
   1b248:	ldr	r1, [r9, r0, lsl #3]
   1b24c:	ldr	r0, [sl]
   1b250:	bl	11744 <memcmp@plt>
   1b254:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1b258:	cmp	r0, #0
   1b25c:	beq	1b274 <__assert_fail@plt+0x97f4>
   1b260:	cmp	r5, #0
   1b264:	bne	1b1f8 <__assert_fail@plt+0x9778>
   1b268:	mov	r5, #0
   1b26c:	mov	r0, r4
   1b270:	b	1b27c <__assert_fail@plt+0x97fc>
   1b274:	add	r5, r5, #1
   1b278:	sub	r0, r4, r5
   1b27c:	str	r0, [r3, r4, lsl #2]
   1b280:	ldr	r0, [fp, #-152]	; 0xffffff68
   1b284:	add	r4, r4, #1
   1b288:	cmp	r4, r0
   1b28c:	bne	1b1dc <__assert_fail@plt+0x975c>
   1b290:	ldr	r8, [fp, #-156]	; 0xffffff64
   1b294:	ldr	r0, [fp, #-160]	; 0xffffff60
   1b298:	mov	r6, #0
   1b29c:	str	r6, [r8]
   1b2a0:	str	r6, [fp, #-80]	; 0xffffffb0
   1b2a4:	str	r6, [fp, #-84]	; 0xffffffac
   1b2a8:	strb	r6, [fp, #-88]	; 0xffffffa8
   1b2ac:	str	r0, [fp, #-72]	; 0xffffffb8
   1b2b0:	str	r6, [fp, #-136]	; 0xffffff78
   1b2b4:	str	r6, [fp, #-140]	; 0xffffff74
   1b2b8:	str	r0, [fp, #-128]	; 0xffffff80
   1b2bc:	sub	r0, fp, #144	; 0x90
   1b2c0:	strb	r6, [fp, #-144]	; 0xffffff70
   1b2c4:	strb	r6, [fp, #-76]	; 0xffffffb4
   1b2c8:	strb	r6, [fp, #-132]	; 0xffffff7c
   1b2cc:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1b2d0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1b2d4:	ldrb	r1, [fp, #-120]	; 0xffffff88
   1b2d8:	cmp	r0, #0
   1b2dc:	bne	1b2e8 <__assert_fail@plt+0x9868>
   1b2e0:	cmp	r1, #0
   1b2e4:	bne	1b454 <__assert_fail@plt+0x99d4>
   1b2e8:	clz	r1, r1
   1b2ec:	sub	r4, fp, #88	; 0x58
   1b2f0:	mov	sl, #0
   1b2f4:	lsr	r1, r1, #5
   1b2f8:	add	r2, sl, sl, lsl #2
   1b2fc:	tst	r1, #1
   1b300:	add	r3, r9, r2, lsl #3
   1b304:	bne	1b32c <__assert_fail@plt+0x98ac>
   1b308:	ldrb	r1, [r3, #8]
   1b30c:	cmp	r1, #0
   1b310:	beq	1b32c <__assert_fail@plt+0x98ac>
   1b314:	ldr	r1, [r3, #12]
   1b318:	cmp	r1, r0
   1b31c:	bne	1b358 <__assert_fail@plt+0x98d8>
   1b320:	ldr	r7, [fp, #-128]	; 0xffffff80
   1b324:	ldr	r5, [fp, #-124]	; 0xffffff84
   1b328:	b	1b3b4 <__assert_fail@plt+0x9934>
   1b32c:	ldr	r5, [r3, #4]
   1b330:	ldr	r0, [fp, #-124]	; 0xffffff84
   1b334:	cmp	r5, r0
   1b338:	bne	1b358 <__assert_fail@plt+0x98d8>
   1b33c:	ldr	r7, [fp, #-128]	; 0xffffff80
   1b340:	ldr	r0, [r9, r2, lsl #3]
   1b344:	mov	r2, r5
   1b348:	mov	r1, r7
   1b34c:	bl	11744 <memcmp@plt>
   1b350:	cmp	r0, #0
   1b354:	beq	1b3b4 <__assert_fail@plt+0x9934>
   1b358:	cmp	sl, #0
   1b35c:	beq	1b3d4 <__assert_fail@plt+0x9954>
   1b360:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1b364:	ldr	r5, [r0, sl, lsl #2]
   1b368:	sub	sl, sl, r5
   1b36c:	cmp	r5, #0
   1b370:	beq	1b420 <__assert_fail@plt+0x99a0>
   1b374:	mov	r0, r4
   1b378:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1b37c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b380:	cmp	r0, #0
   1b384:	beq	1b394 <__assert_fail@plt+0x9914>
   1b388:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b38c:	cmp	r0, #0
   1b390:	beq	1b46c <__assert_fail@plt+0x99ec>
   1b394:	strb	r6, [fp, #-76]	; 0xffffffb4
   1b398:	subs	r5, r5, #1
   1b39c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b3a0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b3a4:	add	r0, r0, r1
   1b3a8:	str	r0, [fp, #-72]	; 0xffffffb8
   1b3ac:	bne	1b374 <__assert_fail@plt+0x98f4>
   1b3b0:	b	1b420 <__assert_fail@plt+0x99a0>
   1b3b4:	add	r0, r7, r5
   1b3b8:	strb	r6, [fp, #-132]	; 0xffffff7c
   1b3bc:	add	sl, sl, #1
   1b3c0:	str	r0, [fp, #-128]	; 0xffffff80
   1b3c4:	ldr	r0, [fp, #-152]	; 0xffffff68
   1b3c8:	cmp	sl, r0
   1b3cc:	bne	1b420 <__assert_fail@plt+0x99a0>
   1b3d0:	b	1b44c <__assert_fail@plt+0x99cc>
   1b3d4:	mov	r0, r4
   1b3d8:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1b3dc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b3e0:	cmp	r0, #0
   1b3e4:	beq	1b3f4 <__assert_fail@plt+0x9974>
   1b3e8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b3ec:	cmp	r0, #0
   1b3f0:	beq	1b46c <__assert_fail@plt+0x99ec>
   1b3f4:	mov	sl, #0
   1b3f8:	strb	sl, [fp, #-76]	; 0xffffffb4
   1b3fc:	strb	sl, [fp, #-132]	; 0xffffff7c
   1b400:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b404:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b408:	add	r0, r0, r1
   1b40c:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b410:	str	r0, [fp, #-72]	; 0xffffffb8
   1b414:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b418:	add	r0, r0, r1
   1b41c:	str	r0, [fp, #-128]	; 0xffffff80
   1b420:	sub	r0, fp, #144	; 0x90
   1b424:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1b428:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1b42c:	clz	r0, r2
   1b430:	lsr	r1, r0, #5
   1b434:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1b438:	cmp	r0, #0
   1b43c:	bne	1b2f8 <__assert_fail@plt+0x9878>
   1b440:	cmp	r2, #0
   1b444:	beq	1b2f8 <__assert_fail@plt+0x9878>
   1b448:	b	1b454 <__assert_fail@plt+0x99d4>
   1b44c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b450:	str	r0, [r8]
   1b454:	mov	r0, r9
   1b458:	bl	1bebc <__assert_fail@plt+0xa43c>
   1b45c:	mov	r5, #1
   1b460:	mov	r0, r5
   1b464:	sub	sp, fp, #28
   1b468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b46c:	bl	11a68 <abort@plt>
   1b470:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b474:	add	fp, sp, #24
   1b478:	mov	r4, #0
   1b47c:	cmn	r2, #-536870911	; 0xe0000001
   1b480:	bhi	1b5ac <__assert_fail@plt+0x9b2c>
   1b484:	mov	r7, r0
   1b488:	lsl	r0, r2, #2
   1b48c:	mov	r8, r3
   1b490:	mov	r5, r2
   1b494:	mov	r6, r1
   1b498:	cmp	r0, #4016	; 0xfb0
   1b49c:	bhi	1b4bc <__assert_fail@plt+0x9a3c>
   1b4a0:	add	r0, r0, #22
   1b4a4:	bic	r0, r0, #7
   1b4a8:	sub	r1, sp, r0
   1b4ac:	add	r0, r1, #15
   1b4b0:	bic	r0, r0, #15
   1b4b4:	mov	sp, r1
   1b4b8:	b	1b4c0 <__assert_fail@plt+0x9a40>
   1b4bc:	bl	1be54 <__assert_fail@plt+0xa3d4>
   1b4c0:	cmp	r0, #0
   1b4c4:	beq	1b5ac <__assert_fail@plt+0x9b2c>
   1b4c8:	mov	r1, #1
   1b4cc:	cmp	r5, #3
   1b4d0:	str	r1, [r0, #4]
   1b4d4:	bcc	1b530 <__assert_fail@plt+0x9ab0>
   1b4d8:	mov	r1, #2
   1b4dc:	mov	r2, #0
   1b4e0:	add	r3, r6, r1
   1b4e4:	ldrb	r4, [r6, r2]
   1b4e8:	ldrb	r3, [r3, #-1]
   1b4ec:	b	1b4fc <__assert_fail@plt+0x9a7c>
   1b4f0:	ldr	r4, [r0, r2, lsl #2]
   1b4f4:	sub	r2, r2, r4
   1b4f8:	ldrb	r4, [r6, r2]
   1b4fc:	cmp	r3, r4
   1b500:	beq	1b518 <__assert_fail@plt+0x9a98>
   1b504:	cmp	r2, #0
   1b508:	bne	1b4f0 <__assert_fail@plt+0x9a70>
   1b50c:	mov	r2, #0
   1b510:	mov	r3, r1
   1b514:	b	1b520 <__assert_fail@plt+0x9aa0>
   1b518:	add	r2, r2, #1
   1b51c:	sub	r3, r1, r2
   1b520:	str	r3, [r0, r1, lsl #2]
   1b524:	add	r1, r1, #1
   1b528:	cmp	r1, r5
   1b52c:	bne	1b4e0 <__assert_fail@plt+0x9a60>
   1b530:	mov	r1, #0
   1b534:	str	r1, [r8]
   1b538:	ldrb	r3, [r7]
   1b53c:	cmp	r3, #0
   1b540:	beq	1b5a4 <__assert_fail@plt+0x9b24>
   1b544:	mov	r2, r7
   1b548:	ldrb	r4, [r6, r1]
   1b54c:	uxtb	r3, r3
   1b550:	cmp	r4, r3
   1b554:	bne	1b56c <__assert_fail@plt+0x9aec>
   1b558:	add	r1, r1, #1
   1b55c:	cmp	r1, r5
   1b560:	beq	1b5a0 <__assert_fail@plt+0x9b20>
   1b564:	add	r7, r7, #1
   1b568:	b	1b590 <__assert_fail@plt+0x9b10>
   1b56c:	cmp	r1, #0
   1b570:	beq	1b584 <__assert_fail@plt+0x9b04>
   1b574:	ldr	r3, [r0, r1, lsl #2]
   1b578:	sub	r1, r1, r3
   1b57c:	add	r2, r2, r3
   1b580:	b	1b590 <__assert_fail@plt+0x9b10>
   1b584:	add	r7, r7, #1
   1b588:	add	r2, r2, #1
   1b58c:	mov	r1, #0
   1b590:	ldrb	r3, [r7]
   1b594:	cmp	r3, #0
   1b598:	bne	1b548 <__assert_fail@plt+0x9ac8>
   1b59c:	b	1b5a4 <__assert_fail@plt+0x9b24>
   1b5a0:	str	r2, [r8]
   1b5a4:	bl	1bebc <__assert_fail@plt+0xa43c>
   1b5a8:	mov	r4, #1
   1b5ac:	mov	r0, r4
   1b5b0:	sub	sp, fp, #24
   1b5b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b5b8:	push	{r4, r5, r6, r7, fp, lr}
   1b5bc:	add	fp, sp, #16
   1b5c0:	mov	r4, r0
   1b5c4:	ldrb	r0, [r0, #12]
   1b5c8:	cmp	r0, #0
   1b5cc:	popne	{r4, r5, r6, r7, fp, pc}
   1b5d0:	ldrb	r0, [r4]
   1b5d4:	ldr	r6, [r4, #16]
   1b5d8:	cmp	r0, #0
   1b5dc:	beq	1b63c <__assert_fail@plt+0x9bbc>
   1b5e0:	add	r5, r4, #4
   1b5e4:	bl	1181c <__ctype_get_mb_cur_max@plt>
   1b5e8:	mov	r1, r0
   1b5ec:	mov	r0, r6
   1b5f0:	bl	1bdc0 <__assert_fail@plt+0xa340>
   1b5f4:	add	r7, r4, #28
   1b5f8:	mov	r2, r0
   1b5fc:	mov	r1, r6
   1b600:	mov	r3, r5
   1b604:	mov	r0, r7
   1b608:	bl	1ab2c <__assert_fail@plt+0x90ac>
   1b60c:	cmn	r0, #2
   1b610:	str	r0, [r4, #20]
   1b614:	beq	1b6b8 <__assert_fail@plt+0x9c38>
   1b618:	cmp	r0, #0
   1b61c:	beq	1b674 <__assert_fail@plt+0x9bf4>
   1b620:	cmn	r0, #1
   1b624:	bne	1b698 <__assert_fail@plt+0x9c18>
   1b628:	mov	r0, #0
   1b62c:	strb	r0, [r4, #24]
   1b630:	mov	r0, #1
   1b634:	str	r0, [r4, #20]
   1b638:	b	1b6cc <__assert_fail@plt+0x9c4c>
   1b63c:	ldrb	r0, [r6]
   1b640:	movw	r2, #65232	; 0xfed0
   1b644:	movt	r2, #1
   1b648:	ubfx	r1, r0, #5, #3
   1b64c:	ldr	r1, [r2, r1, lsl #2]
   1b650:	and	r2, r0, #31
   1b654:	mov	r0, #1
   1b658:	tst	r1, r0, lsl r2
   1b65c:	beq	1b6d8 <__assert_fail@plt+0x9c58>
   1b660:	str	r0, [r4, #20]
   1b664:	ldrb	r1, [r6]
   1b668:	strb	r0, [r4, #24]
   1b66c:	str	r1, [r4, #28]
   1b670:	b	1b6cc <__assert_fail@plt+0x9c4c>
   1b674:	mov	r0, #1
   1b678:	str	r0, [r4, #20]
   1b67c:	ldr	r0, [r4, #16]
   1b680:	ldrb	r0, [r0]
   1b684:	cmp	r0, #0
   1b688:	bne	1b6f8 <__assert_fail@plt+0x9c78>
   1b68c:	ldr	r0, [r7]
   1b690:	cmp	r0, #0
   1b694:	bne	1b718 <__assert_fail@plt+0x9c98>
   1b698:	mov	r0, #1
   1b69c:	strb	r0, [r4, #24]
   1b6a0:	mov	r0, r5
   1b6a4:	bl	11738 <mbsinit@plt>
   1b6a8:	cmp	r0, #0
   1b6ac:	movne	r0, #0
   1b6b0:	strbne	r0, [r4]
   1b6b4:	b	1b6cc <__assert_fail@plt+0x9c4c>
   1b6b8:	ldr	r0, [r4, #16]
   1b6bc:	bl	118dc <strlen@plt>
   1b6c0:	str	r0, [r4, #20]
   1b6c4:	mov	r0, #0
   1b6c8:	strb	r0, [r4, #24]
   1b6cc:	mov	r0, #1
   1b6d0:	strb	r0, [r4, #12]
   1b6d4:	pop	{r4, r5, r6, r7, fp, pc}
   1b6d8:	add	r5, r4, #4
   1b6dc:	mov	r0, r5
   1b6e0:	bl	11738 <mbsinit@plt>
   1b6e4:	cmp	r0, #0
   1b6e8:	beq	1b738 <__assert_fail@plt+0x9cb8>
   1b6ec:	mov	r0, #1
   1b6f0:	strb	r0, [r4]
   1b6f4:	b	1b5e4 <__assert_fail@plt+0x9b64>
   1b6f8:	movw	r0, #65119	; 0xfe5f
   1b6fc:	movw	r1, #65160	; 0xfe88
   1b700:	movw	r3, #65176	; 0xfe98
   1b704:	mov	r2, #171	; 0xab
   1b708:	movt	r0, #1
   1b70c:	movt	r1, #1
   1b710:	movt	r3, #1
   1b714:	bl	11a80 <__assert_fail@plt>
   1b718:	movw	r0, #65142	; 0xfe76
   1b71c:	movw	r1, #65160	; 0xfe88
   1b720:	movw	r3, #65176	; 0xfe98
   1b724:	mov	r2, #172	; 0xac
   1b728:	movt	r0, #1
   1b72c:	movt	r1, #1
   1b730:	movt	r3, #1
   1b734:	bl	11a80 <__assert_fail@plt>
   1b738:	movw	r0, #65035	; 0xfe0b
   1b73c:	movw	r1, #65160	; 0xfe88
   1b740:	movw	r3, #65176	; 0xfe98
   1b744:	mov	r2, #143	; 0x8f
   1b748:	movt	r0, #1
   1b74c:	movt	r1, #1
   1b750:	movt	r3, #1
   1b754:	bl	11a80 <__assert_fail@plt>
   1b758:	ldr	r2, [r0, #16]
   1b75c:	add	r1, r2, r1
   1b760:	str	r1, [r0, #16]
   1b764:	bx	lr
   1b768:	push	{r4, r5, r6, sl, fp, lr}
   1b76c:	add	fp, sp, #16
   1b770:	mov	r5, r1
   1b774:	ldrb	r1, [r1]
   1b778:	mov	r4, r0
   1b77c:	strb	r1, [r0], #4
   1b780:	cmp	r1, #0
   1b784:	beq	1b794 <__assert_fail@plt+0x9d14>
   1b788:	ldmib	r5, {r1, r2}
   1b78c:	stm	r0, {r1, r2}
   1b790:	b	1b7a0 <__assert_fail@plt+0x9d20>
   1b794:	mov	r1, #0
   1b798:	str	r1, [r0]
   1b79c:	str	r1, [r0, #4]
   1b7a0:	ldrb	r0, [r5, #12]
   1b7a4:	strb	r0, [r4, #12]
   1b7a8:	add	r0, r5, #32
   1b7ac:	ldr	r1, [r5, #16]
   1b7b0:	cmp	r1, r0
   1b7b4:	beq	1b7c0 <__assert_fail@plt+0x9d40>
   1b7b8:	mov	r6, r1
   1b7bc:	b	1b7d0 <__assert_fail@plt+0x9d50>
   1b7c0:	ldr	r2, [r5, #20]
   1b7c4:	add	r6, r4, #32
   1b7c8:	mov	r0, r6
   1b7cc:	bl	11720 <memcpy@plt>
   1b7d0:	str	r6, [r4, #16]
   1b7d4:	ldr	r0, [r5, #20]
   1b7d8:	str	r0, [r4, #20]
   1b7dc:	ldrb	r0, [r5, #24]
   1b7e0:	strb	r0, [r4, #24]
   1b7e4:	cmp	r0, #0
   1b7e8:	ldrne	r0, [r5, #28]
   1b7ec:	strne	r0, [r4, #28]
   1b7f0:	pop	{r4, r5, r6, sl, fp, pc}
   1b7f4:	cmp	r2, #0
   1b7f8:	beq	1b828 <__assert_fail@plt+0x9da8>
   1b7fc:	mvn	r3, #0
   1b800:	udiv	r3, r3, r2
   1b804:	cmp	r3, r1
   1b808:	bcs	1b828 <__assert_fail@plt+0x9da8>
   1b80c:	push	{fp, lr}
   1b810:	mov	fp, sp
   1b814:	bl	1190c <__errno_location@plt>
   1b818:	mov	r1, #12
   1b81c:	str	r1, [r0]
   1b820:	mov	r0, #0
   1b824:	pop	{fp, pc}
   1b828:	mul	r1, r2, r1
   1b82c:	b	1a5dc <__assert_fail@plt+0x8b5c>
   1b830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b834:	add	fp, sp, #28
   1b838:	sub	sp, sp, #44	; 0x2c
   1b83c:	sub	sp, sp, #4096	; 0x1000
   1b840:	str	r3, [sp, #16]
   1b844:	mov	r4, r1
   1b848:	mov	r6, r0
   1b84c:	mov	r5, #0
   1b850:	str	r2, [sp, #20]
   1b854:	mov	r0, r2
   1b858:	mov	r1, #0
   1b85c:	mov	r2, #0
   1b860:	mov	r3, #0
   1b864:	str	r5, [sp]
   1b868:	bl	116a8 <iconv@plt>
   1b86c:	cmp	r4, #0
   1b870:	str	r6, [sp, #8]
   1b874:	str	r6, [sp, #36]	; 0x24
   1b878:	str	r4, [sp, #32]
   1b87c:	str	r4, [sp, #12]
   1b880:	beq	1b8f0 <__assert_fail@plt+0x9e70>
   1b884:	mov	r5, #0
   1b888:	add	r4, sp, #40	; 0x28
   1b88c:	mov	r8, #4096	; 0x1000
   1b890:	add	sl, sp, #24
   1b894:	add	r9, sp, #36	; 0x24
   1b898:	add	r7, sp, #32
   1b89c:	add	r6, sp, #28
   1b8a0:	ldr	r0, [sp, #20]
   1b8a4:	mov	r1, r9
   1b8a8:	mov	r2, r7
   1b8ac:	mov	r3, r6
   1b8b0:	str	r4, [sp, #28]
   1b8b4:	str	r8, [sp, #24]
   1b8b8:	str	sl, [sp]
   1b8bc:	bl	116a8 <iconv@plt>
   1b8c0:	cmn	r0, #1
   1b8c4:	bne	1b8d8 <__assert_fail@plt+0x9e58>
   1b8c8:	bl	1190c <__errno_location@plt>
   1b8cc:	ldr	r0, [r0]
   1b8d0:	cmp	r0, #7
   1b8d4:	bne	1b940 <__assert_fail@plt+0x9ec0>
   1b8d8:	ldr	r1, [sp, #28]
   1b8dc:	sub	r0, r5, r4
   1b8e0:	add	r5, r0, r1
   1b8e4:	ldr	r0, [sp, #32]
   1b8e8:	cmp	r0, #0
   1b8ec:	bne	1b8a0 <__assert_fail@plt+0x9e20>
   1b8f0:	mov	r0, #4096	; 0x1000
   1b8f4:	add	r6, sp, #40	; 0x28
   1b8f8:	add	r3, sp, #28
   1b8fc:	mov	r1, #0
   1b900:	mov	r2, #0
   1b904:	mov	r4, #0
   1b908:	str	r0, [sp, #24]
   1b90c:	add	r0, sp, #24
   1b910:	str	r6, [sp, #28]
   1b914:	str	r0, [sp]
   1b918:	ldr	r0, [sp, #20]
   1b91c:	bl	116a8 <iconv@plt>
   1b920:	cmn	r0, #1
   1b924:	beq	1b938 <__assert_fail@plt+0x9eb8>
   1b928:	ldr	r1, [sp, #28]
   1b92c:	sub	r0, r5, r6
   1b930:	add	r5, r0, r1
   1b934:	b	1b94c <__assert_fail@plt+0x9ecc>
   1b938:	mov	r4, #1
   1b93c:	b	1b94c <__assert_fail@plt+0x9ecc>
   1b940:	cmp	r0, #22
   1b944:	beq	1b8f0 <__assert_fail@plt+0x9e70>
   1b948:	mov	r4, #1
   1b94c:	mvn	r9, #0
   1b950:	cmp	r4, #0
   1b954:	beq	1b964 <__assert_fail@plt+0x9ee4>
   1b958:	mov	r0, r9
   1b95c:	sub	sp, fp, #28
   1b960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b964:	ldr	r1, [fp, #8]
   1b968:	cmp	r5, #0
   1b96c:	beq	1ba20 <__assert_fail@plt+0x9fa0>
   1b970:	ldr	r0, [sp, #16]
   1b974:	ldr	r4, [r0]
   1b978:	cmp	r4, #0
   1b97c:	beq	1b98c <__assert_fail@plt+0x9f0c>
   1b980:	ldr	r0, [r1]
   1b984:	cmp	r0, r5
   1b988:	bcs	1b9a0 <__assert_fail@plt+0x9f20>
   1b98c:	mov	r0, r5
   1b990:	bl	1a5ac <__assert_fail@plt+0x8b2c>
   1b994:	mov	r4, r0
   1b998:	cmp	r0, #0
   1b99c:	beq	1ba2c <__assert_fail@plt+0x9fac>
   1b9a0:	mov	r0, #0
   1b9a4:	mov	r1, #0
   1b9a8:	mov	r2, #0
   1b9ac:	mov	r3, #0
   1b9b0:	str	r0, [sp]
   1b9b4:	ldr	r0, [sp, #20]
   1b9b8:	bl	116a8 <iconv@plt>
   1b9bc:	ldr	r0, [sp, #8]
   1b9c0:	mov	sl, r4
   1b9c4:	str	r4, [sp, #32]
   1b9c8:	str	r5, [sp, #28]
   1b9cc:	str	r0, [sp, #40]	; 0x28
   1b9d0:	ldr	r0, [sp, #12]
   1b9d4:	cmp	r0, #0
   1b9d8:	str	r0, [sp, #36]	; 0x24
   1b9dc:	beq	1ba4c <__assert_fail@plt+0x9fcc>
   1b9e0:	add	r8, sp, #28
   1b9e4:	add	r7, sp, #40	; 0x28
   1b9e8:	add	r6, sp, #36	; 0x24
   1b9ec:	add	r4, sp, #32
   1b9f0:	ldr	r0, [sp, #20]
   1b9f4:	mov	r1, r7
   1b9f8:	mov	r2, r6
   1b9fc:	mov	r3, r4
   1ba00:	str	r8, [sp]
   1ba04:	bl	116a8 <iconv@plt>
   1ba08:	cmn	r0, #1
   1ba0c:	beq	1ba3c <__assert_fail@plt+0x9fbc>
   1ba10:	ldr	r0, [sp, #36]	; 0x24
   1ba14:	cmp	r0, #0
   1ba18:	bne	1b9f0 <__assert_fail@plt+0x9f70>
   1ba1c:	b	1ba4c <__assert_fail@plt+0x9fcc>
   1ba20:	mov	r9, #0
   1ba24:	str	r9, [r1]
   1ba28:	b	1b958 <__assert_fail@plt+0x9ed8>
   1ba2c:	bl	1190c <__errno_location@plt>
   1ba30:	mov	r1, #12
   1ba34:	str	r1, [r0]
   1ba38:	b	1b958 <__assert_fail@plt+0x9ed8>
   1ba3c:	bl	1190c <__errno_location@plt>
   1ba40:	ldr	r0, [r0]
   1ba44:	cmp	r0, #22
   1ba48:	bne	1ba94 <__assert_fail@plt+0xa014>
   1ba4c:	add	r0, sp, #28
   1ba50:	add	r3, sp, #32
   1ba54:	mov	r1, #0
   1ba58:	mov	r2, #0
   1ba5c:	str	r0, [sp]
   1ba60:	ldr	r0, [sp, #20]
   1ba64:	bl	116a8 <iconv@plt>
   1ba68:	cmn	r0, #1
   1ba6c:	beq	1ba94 <__assert_fail@plt+0xa014>
   1ba70:	ldr	r0, [sp, #28]
   1ba74:	cmp	r0, #0
   1ba78:	bne	1bab0 <__assert_fail@plt+0xa030>
   1ba7c:	ldr	r0, [sp, #16]
   1ba80:	mov	r9, #0
   1ba84:	str	sl, [r0]
   1ba88:	ldr	r0, [fp, #8]
   1ba8c:	str	r5, [r0]
   1ba90:	b	1b958 <__assert_fail@plt+0x9ed8>
   1ba94:	ldr	r0, [sp, #16]
   1ba98:	ldr	r0, [r0]
   1ba9c:	cmp	sl, r0
   1baa0:	beq	1b958 <__assert_fail@plt+0x9ed8>
   1baa4:	mov	r0, sl
   1baa8:	bl	17404 <__assert_fail@plt+0x5984>
   1baac:	b	1b958 <__assert_fail@plt+0x9ed8>
   1bab0:	bl	11a68 <abort@plt>
   1bab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bab8:	add	fp, sp, #28
   1babc:	sub	sp, sp, #20
   1bac0:	mov	r8, r1
   1bac4:	str	r0, [sp, #16]
   1bac8:	bl	118dc <strlen@plt>
   1bacc:	mov	r5, r0
   1bad0:	cmp	r0, #4096	; 0x1000
   1bad4:	str	r0, [sp, #12]
   1bad8:	lslcc	r5, r0, #4
   1badc:	add	r4, r5, #1
   1bae0:	mov	r0, r4
   1bae4:	bl	1a5ac <__assert_fail@plt+0x8b2c>
   1bae8:	cmp	r0, #0
   1baec:	beq	1bb98 <__assert_fail@plt+0xa118>
   1baf0:	mov	r6, r0
   1baf4:	mov	r0, #0
   1baf8:	mov	r1, #0
   1bafc:	mov	r2, #0
   1bb00:	mov	r3, #0
   1bb04:	str	r0, [sp]
   1bb08:	mov	r0, r8
   1bb0c:	bl	116a8 <iconv@plt>
   1bb10:	stmib	sp, {r5, r6}
   1bb14:	add	r5, sp, #4
   1bb18:	add	r1, sp, #16
   1bb1c:	add	r2, sp, #12
   1bb20:	add	r3, sp, #8
   1bb24:	mov	r0, r8
   1bb28:	str	r5, [sp]
   1bb2c:	bl	116a8 <iconv@plt>
   1bb30:	cmn	r0, #1
   1bb34:	beq	1bba8 <__assert_fail@plt+0xa128>
   1bb38:	mov	r7, r6
   1bb3c:	add	r3, sp, #8
   1bb40:	mov	r0, r8
   1bb44:	mov	r1, #0
   1bb48:	mov	r2, #0
   1bb4c:	str	r5, [sp]
   1bb50:	bl	116a8 <iconv@plt>
   1bb54:	cmn	r0, #1
   1bb58:	beq	1bc28 <__assert_fail@plt+0xa1a8>
   1bb5c:	mov	r5, r7
   1bb60:	ldr	r0, [sp, #8]
   1bb64:	add	r1, r0, #1
   1bb68:	str	r1, [sp, #8]
   1bb6c:	mov	r1, #0
   1bb70:	strb	r1, [r0]
   1bb74:	ldr	r0, [sp, #8]
   1bb78:	sub	r1, r0, r5
   1bb7c:	cmp	r1, r4
   1bb80:	bcs	1bcac <__assert_fail@plt+0xa22c>
   1bb84:	mov	r0, r5
   1bb88:	bl	1a5dc <__assert_fail@plt+0x8b5c>
   1bb8c:	cmp	r0, #0
   1bb90:	moveq	r0, r5
   1bb94:	b	1bcd8 <__assert_fail@plt+0xa258>
   1bb98:	bl	1190c <__errno_location@plt>
   1bb9c:	mov	r1, #12
   1bba0:	str	r1, [r0]
   1bba4:	b	1bcd4 <__assert_fail@plt+0xa254>
   1bba8:	bl	1190c <__errno_location@plt>
   1bbac:	mov	r9, r0
   1bbb0:	ldr	r0, [r9]
   1bbb4:	cmp	r0, #7
   1bbb8:	bne	1bce0 <__assert_fail@plt+0xa260>
   1bbbc:	cmp	r4, r4, lsl #1
   1bbc0:	bcs	1bcb4 <__assert_fail@plt+0xa234>
   1bbc4:	ldr	sl, [sp, #8]
   1bbc8:	lsl	r4, r4, #1
   1bbcc:	mov	r0, r6
   1bbd0:	mov	r1, r4
   1bbd4:	bl	1a5dc <__assert_fail@plt+0x8b5c>
   1bbd8:	cmp	r0, #0
   1bbdc:	beq	1bcb4 <__assert_fail@plt+0xa234>
   1bbe0:	mov	r7, r0
   1bbe4:	sub	r0, sl, r6
   1bbe8:	add	r5, sp, #4
   1bbec:	add	r2, sp, #12
   1bbf0:	add	r3, sp, #8
   1bbf4:	add	r1, r7, r0
   1bbf8:	mvn	r0, r0
   1bbfc:	str	r5, [sp]
   1bc00:	add	r0, r4, r0
   1bc04:	str	r1, [sp, #8]
   1bc08:	add	r1, sp, #16
   1bc0c:	str	r0, [sp, #4]
   1bc10:	mov	r0, r8
   1bc14:	bl	116a8 <iconv@plt>
   1bc18:	cmn	r0, #1
   1bc1c:	mov	r6, r7
   1bc20:	beq	1bbb0 <__assert_fail@plt+0xa130>
   1bc24:	b	1bb3c <__assert_fail@plt+0xa0bc>
   1bc28:	bl	1190c <__errno_location@plt>
   1bc2c:	mov	r6, r0
   1bc30:	add	r9, sp, #8
   1bc34:	ldr	r0, [r6]
   1bc38:	cmp	r0, #7
   1bc3c:	bne	1bcc8 <__assert_fail@plt+0xa248>
   1bc40:	cmp	r4, r4, lsl #1
   1bc44:	bcs	1bcc0 <__assert_fail@plt+0xa240>
   1bc48:	ldr	sl, [sp, #8]
   1bc4c:	lsl	r4, r4, #1
   1bc50:	mov	r0, r7
   1bc54:	mov	r1, r4
   1bc58:	bl	1a5dc <__assert_fail@plt+0x8b5c>
   1bc5c:	cmp	r0, #0
   1bc60:	beq	1bcc0 <__assert_fail@plt+0xa240>
   1bc64:	mov	r5, r0
   1bc68:	sub	r0, sl, r7
   1bc6c:	mov	r2, #0
   1bc70:	mov	r3, r9
   1bc74:	add	r1, r5, r0
   1bc78:	mvn	r0, r0
   1bc7c:	add	r0, r4, r0
   1bc80:	str	r1, [sp, #8]
   1bc84:	mov	r1, #0
   1bc88:	str	r0, [sp, #4]
   1bc8c:	add	r0, sp, #4
   1bc90:	str	r0, [sp]
   1bc94:	mov	r0, r8
   1bc98:	bl	116a8 <iconv@plt>
   1bc9c:	cmn	r0, #1
   1bca0:	mov	r7, r5
   1bca4:	beq	1bc34 <__assert_fail@plt+0xa1b4>
   1bca8:	b	1bb60 <__assert_fail@plt+0xa0e0>
   1bcac:	mov	r0, r5
   1bcb0:	b	1bcd8 <__assert_fail@plt+0xa258>
   1bcb4:	mov	r0, #12
   1bcb8:	str	r0, [r9]
   1bcbc:	b	1bccc <__assert_fail@plt+0xa24c>
   1bcc0:	mov	r0, #12
   1bcc4:	str	r0, [r6]
   1bcc8:	mov	r6, r7
   1bccc:	mov	r0, r6
   1bcd0:	bl	17404 <__assert_fail@plt+0x5984>
   1bcd4:	mov	r0, #0
   1bcd8:	sub	sp, fp, #28
   1bcdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bce0:	cmp	r0, #22
   1bce4:	beq	1bb38 <__assert_fail@plt+0xa0b8>
   1bce8:	b	1bccc <__assert_fail@plt+0xa24c>
   1bcec:	push	{r4, r5, r6, r7, fp, lr}
   1bcf0:	add	fp, sp, #16
   1bcf4:	mov	r5, r0
   1bcf8:	ldrb	r0, [r0]
   1bcfc:	cmp	r0, #0
   1bd00:	beq	1bd6c <__assert_fail@plt+0xa2ec>
   1bd04:	mov	r4, r1
   1bd08:	mov	r0, r1
   1bd0c:	mov	r1, r2
   1bd10:	mov	r6, r2
   1bd14:	bl	1a62c <__assert_fail@plt+0x8bac>
   1bd18:	cmp	r0, #0
   1bd1c:	beq	1bd6c <__assert_fail@plt+0xa2ec>
   1bd20:	mov	r0, r6
   1bd24:	mov	r1, r4
   1bd28:	bl	11864 <iconv_open@plt>
   1bd2c:	mov	r4, #0
   1bd30:	cmn	r0, #1
   1bd34:	beq	1bdb8 <__assert_fail@plt+0xa338>
   1bd38:	mov	r6, r0
   1bd3c:	mov	r0, r5
   1bd40:	mov	r1, r6
   1bd44:	bl	1bab4 <__assert_fail@plt+0xa034>
   1bd48:	cmp	r0, #0
   1bd4c:	beq	1bd94 <__assert_fail@plt+0xa314>
   1bd50:	mov	r5, r0
   1bd54:	mov	r0, r6
   1bd58:	bl	1169c <iconv_close@plt>
   1bd5c:	cmn	r0, #1
   1bd60:	ble	1bdb0 <__assert_fail@plt+0xa330>
   1bd64:	mov	r4, r5
   1bd68:	b	1bdb8 <__assert_fail@plt+0xa338>
   1bd6c:	mov	r0, r5
   1bd70:	bl	11774 <strdup@plt>
   1bd74:	mov	r4, r0
   1bd78:	cmp	r0, #0
   1bd7c:	bne	1bdb8 <__assert_fail@plt+0xa338>
   1bd80:	bl	1190c <__errno_location@plt>
   1bd84:	mov	r1, #12
   1bd88:	mov	r4, #0
   1bd8c:	str	r1, [r0]
   1bd90:	b	1bdb8 <__assert_fail@plt+0xa338>
   1bd94:	bl	1190c <__errno_location@plt>
   1bd98:	ldr	r7, [r0]
   1bd9c:	mov	r5, r0
   1bda0:	mov	r0, r6
   1bda4:	bl	1169c <iconv_close@plt>
   1bda8:	str	r7, [r5]
   1bdac:	b	1bdb8 <__assert_fail@plt+0xa338>
   1bdb0:	mov	r0, r5
   1bdb4:	bl	17404 <__assert_fail@plt+0x5984>
   1bdb8:	mov	r0, r4
   1bdbc:	pop	{r4, r5, r6, r7, fp, pc}
   1bdc0:	push	{r4, r5, fp, lr}
   1bdc4:	add	fp, sp, #8
   1bdc8:	mov	r4, r1
   1bdcc:	mov	r1, #0
   1bdd0:	mov	r5, r0
   1bdd4:	mov	r2, r4
   1bdd8:	bl	11984 <memchr@plt>
   1bddc:	rsb	r1, r5, #1
   1bde0:	cmp	r0, #0
   1bde4:	addne	r4, r1, r0
   1bde8:	mov	r0, r4
   1bdec:	pop	{r4, r5, fp, pc}
   1bdf0:	push	{r4, sl, fp, lr}
   1bdf4:	add	fp, sp, #8
   1bdf8:	sub	sp, sp, #264	; 0x108
   1bdfc:	add	r1, sp, #7
   1be00:	movw	r2, #257	; 0x101
   1be04:	bl	1c048 <__assert_fail@plt+0xa5c8>
   1be08:	mov	r4, #0
   1be0c:	cmp	r0, #0
   1be10:	bne	1be48 <__assert_fail@plt+0xa3c8>
   1be14:	movw	r1, #65224	; 0xfec8
   1be18:	add	r0, sp, #7
   1be1c:	movt	r1, #1
   1be20:	bl	116b4 <strcmp@plt>
   1be24:	cmp	r0, #0
   1be28:	beq	1be48 <__assert_fail@plt+0xa3c8>
   1be2c:	movw	r1, #65226	; 0xfeca
   1be30:	add	r0, sp, #7
   1be34:	movt	r1, #1
   1be38:	bl	116b4 <strcmp@plt>
   1be3c:	mov	r4, r0
   1be40:	cmp	r0, #0
   1be44:	movwne	r4, #1
   1be48:	mov	r0, r4
   1be4c:	sub	sp, fp, #8
   1be50:	pop	{r4, sl, fp, pc}
   1be54:	push	{r4, sl, fp, lr}
   1be58:	add	fp, sp, #8
   1be5c:	mov	r4, #0
   1be60:	adds	r0, r0, #16
   1be64:	adc	r1, r4, #0
   1be68:	rsb	r2, r1, #0
   1be6c:	eors	r2, r2, r1
   1be70:	movwne	r2, #1
   1be74:	cmp	r0, #0
   1be78:	blt	1beb4 <__assert_fail@plt+0xa434>
   1be7c:	cmp	r2, #0
   1be80:	asreq	r2, r0, #31
   1be84:	eoreq	r3, r0, r0
   1be88:	andeq	r2, r2, #1
   1be8c:	eoreq	r1, r1, r2
   1be90:	orrseq	r1, r3, r1
   1be94:	bne	1beb4 <__assert_fail@plt+0xa434>
   1be98:	bl	11858 <malloc@plt>
   1be9c:	cmp	r0, #0
   1bea0:	addne	r4, r0, #8
   1bea4:	movne	r1, #8
   1bea8:	bfine	r4, r1, #0, #4
   1beac:	subne	r0, r4, r0
   1beb0:	strbne	r0, [r4, #-1]
   1beb4:	mov	r0, r4
   1beb8:	pop	{r4, sl, fp, pc}
   1bebc:	tst	r0, #7
   1bec0:	bne	1bed8 <__assert_fail@plt+0xa458>
   1bec4:	tst	r0, #8
   1bec8:	bxeq	lr
   1becc:	ldrb	r1, [r0, #-1]
   1bed0:	sub	r0, r0, r1
   1bed4:	b	17404 <__assert_fail@plt+0x5984>
   1bed8:	push	{fp, lr}
   1bedc:	mov	fp, sp
   1bee0:	bl	11a68 <abort@plt>
   1bee4:	push	{r4, sl, fp, lr}
   1bee8:	add	fp, sp, #8
   1beec:	mov	r4, r0
   1bef0:	bl	116e4 <wcwidth@plt>
   1bef4:	cmn	r0, #1
   1bef8:	popgt	{r4, sl, fp, pc}
   1befc:	mov	r0, r4
   1bf00:	bl	117d4 <iswcntrl@plt>
   1bf04:	clz	r0, r0
   1bf08:	lsr	r0, r0, #5
   1bf0c:	pop	{r4, sl, fp, pc}
   1bf10:	push	{r4, r5, r6, sl, fp, lr}
   1bf14:	add	fp, sp, #16
   1bf18:	mov	r4, r0
   1bf1c:	mov	r0, r1
   1bf20:	mov	r5, r1
   1bf24:	ldr	r1, [r0], #16
   1bf28:	cmp	r1, r0
   1bf2c:	beq	1bf38 <__assert_fail@plt+0xa4b8>
   1bf30:	mov	r6, r1
   1bf34:	b	1bf48 <__assert_fail@plt+0xa4c8>
   1bf38:	ldr	r2, [r5, #4]
   1bf3c:	add	r6, r4, #16
   1bf40:	mov	r0, r6
   1bf44:	bl	11720 <memcpy@plt>
   1bf48:	str	r6, [r4]
   1bf4c:	ldr	r0, [r5, #4]
   1bf50:	str	r0, [r4, #4]
   1bf54:	ldrb	r0, [r5, #8]
   1bf58:	strb	r0, [r4, #8]
   1bf5c:	cmp	r0, #0
   1bf60:	ldrne	r0, [r5, #12]
   1bf64:	strne	r0, [r4, #12]
   1bf68:	pop	{r4, r5, r6, sl, fp, pc}
   1bf6c:	movw	r2, #65232	; 0xfed0
   1bf70:	ubfx	r1, r0, #5, #3
   1bf74:	and	r0, r0, #31
   1bf78:	movt	r2, #1
   1bf7c:	ldr	r1, [r2, r1, lsl #2]
   1bf80:	mov	r2, #1
   1bf84:	and	r0, r1, r2, lsl r0
   1bf88:	cmp	r0, #0
   1bf8c:	movwne	r0, #1
   1bf90:	bx	lr
   1bf94:	push	{r4, r5, r6, sl, fp, lr}
   1bf98:	add	fp, sp, #16
   1bf9c:	sub	sp, sp, #56	; 0x38
   1bfa0:	mov	r5, r0
   1bfa4:	bl	1181c <__ctype_get_mb_cur_max@plt>
   1bfa8:	cmp	r0, #2
   1bfac:	bcc	1c038 <__assert_fail@plt+0xa5b8>
   1bfb0:	mov	r4, #0
   1bfb4:	mov	r0, sp
   1bfb8:	str	r4, [sp, #8]
   1bfbc:	str	r4, [sp, #4]
   1bfc0:	strb	r4, [sp]
   1bfc4:	str	r5, [sp, #16]
   1bfc8:	strb	r4, [sp, #12]
   1bfcc:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1bfd0:	ldrb	r0, [sp, #24]
   1bfd4:	cmp	r0, #0
   1bfd8:	beq	1bfe8 <__assert_fail@plt+0xa568>
   1bfdc:	ldr	r0, [sp, #28]
   1bfe0:	cmp	r0, #0
   1bfe4:	beq	1c02c <__assert_fail@plt+0xa5ac>
   1bfe8:	mov	r6, #0
   1bfec:	mov	r5, sp
   1bff0:	mov	r4, #0
   1bff4:	strb	r6, [sp, #12]
   1bff8:	ldr	r0, [sp, #16]
   1bffc:	ldr	r1, [sp, #20]
   1c000:	add	r0, r0, r1
   1c004:	str	r0, [sp, #16]
   1c008:	mov	r0, r5
   1c00c:	bl	1b5b8 <__assert_fail@plt+0x9b38>
   1c010:	ldrb	r1, [sp, #24]
   1c014:	ldr	r0, [sp, #28]
   1c018:	add	r4, r4, #1
   1c01c:	cmp	r1, #0
   1c020:	beq	1bff4 <__assert_fail@plt+0xa574>
   1c024:	cmp	r0, #0
   1c028:	bne	1bff4 <__assert_fail@plt+0xa574>
   1c02c:	mov	r0, r4
   1c030:	sub	sp, fp, #16
   1c034:	pop	{r4, r5, r6, sl, fp, pc}
   1c038:	mov	r0, r5
   1c03c:	sub	sp, fp, #16
   1c040:	pop	{r4, r5, r6, sl, fp, lr}
   1c044:	b	118dc <strlen@plt>
   1c048:	push	{r4, r5, r6, r7, fp, lr}
   1c04c:	add	fp, sp, #16
   1c050:	mov	r4, r1
   1c054:	mov	r1, #0
   1c058:	mov	r6, r2
   1c05c:	bl	119d8 <setlocale@plt>
   1c060:	cmp	r0, #0
   1c064:	beq	1c090 <__assert_fail@plt+0xa610>
   1c068:	mov	r7, r0
   1c06c:	bl	118dc <strlen@plt>
   1c070:	cmp	r0, r6
   1c074:	bcs	1c0a4 <__assert_fail@plt+0xa624>
   1c078:	add	r2, r0, #1
   1c07c:	mov	r0, r4
   1c080:	mov	r1, r7
   1c084:	bl	11720 <memcpy@plt>
   1c088:	mov	r5, #0
   1c08c:	b	1c0cc <__assert_fail@plt+0xa64c>
   1c090:	cmp	r6, #0
   1c094:	mov	r5, #22
   1c098:	movne	r0, #0
   1c09c:	strbne	r0, [r4]
   1c0a0:	b	1c0cc <__assert_fail@plt+0xa64c>
   1c0a4:	mov	r5, #34	; 0x22
   1c0a8:	cmp	r6, #0
   1c0ac:	beq	1c0cc <__assert_fail@plt+0xa64c>
   1c0b0:	sub	r6, r6, #1
   1c0b4:	mov	r0, r4
   1c0b8:	mov	r1, r7
   1c0bc:	mov	r2, r6
   1c0c0:	bl	11720 <memcpy@plt>
   1c0c4:	mov	r0, #0
   1c0c8:	strb	r0, [r4, r6]
   1c0cc:	mov	r0, r5
   1c0d0:	pop	{r4, r5, r6, r7, fp, pc}
   1c0d4:	mov	r1, #0
   1c0d8:	b	119d8 <setlocale@plt>
   1c0dc:	cmp	r3, #0
   1c0e0:	cmpeq	r2, #0
   1c0e4:	bne	1c0fc <__assert_fail@plt+0xa67c>
   1c0e8:	cmp	r1, #0
   1c0ec:	cmpeq	r0, #0
   1c0f0:	mvnne	r1, #0
   1c0f4:	mvnne	r0, #0
   1c0f8:	b	1c118 <__assert_fail@plt+0xa698>
   1c0fc:	sub	sp, sp, #8
   1c100:	push	{sp, lr}
   1c104:	bl	1c128 <__assert_fail@plt+0xa6a8>
   1c108:	ldr	lr, [sp, #4]
   1c10c:	add	sp, sp, #8
   1c110:	pop	{r2, r3}
   1c114:	bx	lr
   1c118:	push	{r1, lr}
   1c11c:	mov	r0, #8
   1c120:	bl	11684 <raise@plt>
   1c124:	pop	{r1, pc}
   1c128:	cmp	r1, r3
   1c12c:	cmpeq	r0, r2
   1c130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c134:	mov	r4, r0
   1c138:	movcc	r0, #0
   1c13c:	mov	r5, r1
   1c140:	ldr	lr, [sp, #36]	; 0x24
   1c144:	movcc	r1, r0
   1c148:	bcc	1c244 <__assert_fail@plt+0xa7c4>
   1c14c:	cmp	r3, #0
   1c150:	clzeq	ip, r2
   1c154:	clzne	ip, r3
   1c158:	addeq	ip, ip, #32
   1c15c:	cmp	r5, #0
   1c160:	clzeq	r1, r4
   1c164:	addeq	r1, r1, #32
   1c168:	clzne	r1, r5
   1c16c:	sub	ip, ip, r1
   1c170:	sub	sl, ip, #32
   1c174:	lsl	r9, r3, ip
   1c178:	rsb	fp, ip, #32
   1c17c:	orr	r9, r9, r2, lsl sl
   1c180:	orr	r9, r9, r2, lsr fp
   1c184:	lsl	r8, r2, ip
   1c188:	cmp	r5, r9
   1c18c:	cmpeq	r4, r8
   1c190:	movcc	r0, #0
   1c194:	movcc	r1, r0
   1c198:	bcc	1c1b4 <__assert_fail@plt+0xa734>
   1c19c:	mov	r0, #1
   1c1a0:	subs	r4, r4, r8
   1c1a4:	lsl	r1, r0, sl
   1c1a8:	orr	r1, r1, r0, lsr fp
   1c1ac:	lsl	r0, r0, ip
   1c1b0:	sbc	r5, r5, r9
   1c1b4:	cmp	ip, #0
   1c1b8:	beq	1c244 <__assert_fail@plt+0xa7c4>
   1c1bc:	lsr	r6, r8, #1
   1c1c0:	orr	r6, r6, r9, lsl #31
   1c1c4:	lsr	r7, r9, #1
   1c1c8:	mov	r2, ip
   1c1cc:	b	1c1f0 <__assert_fail@plt+0xa770>
   1c1d0:	subs	r3, r4, r6
   1c1d4:	sbc	r8, r5, r7
   1c1d8:	adds	r3, r3, r3
   1c1dc:	adc	r8, r8, r8
   1c1e0:	adds	r4, r3, #1
   1c1e4:	adc	r5, r8, #0
   1c1e8:	subs	r2, r2, #1
   1c1ec:	beq	1c20c <__assert_fail@plt+0xa78c>
   1c1f0:	cmp	r5, r7
   1c1f4:	cmpeq	r4, r6
   1c1f8:	bcs	1c1d0 <__assert_fail@plt+0xa750>
   1c1fc:	adds	r4, r4, r4
   1c200:	adc	r5, r5, r5
   1c204:	subs	r2, r2, #1
   1c208:	bne	1c1f0 <__assert_fail@plt+0xa770>
   1c20c:	lsr	r3, r4, ip
   1c210:	orr	r3, r3, r5, lsl fp
   1c214:	lsr	r2, r5, ip
   1c218:	orr	r3, r3, r5, lsr sl
   1c21c:	adds	r0, r0, r4
   1c220:	mov	r4, r3
   1c224:	lsl	r3, r2, ip
   1c228:	orr	r3, r3, r4, lsl sl
   1c22c:	lsl	ip, r4, ip
   1c230:	orr	r3, r3, r4, lsr fp
   1c234:	adc	r1, r1, r5
   1c238:	subs	r0, r0, ip
   1c23c:	mov	r5, r2
   1c240:	sbc	r1, r1, r3
   1c244:	cmp	lr, #0
   1c248:	strdne	r4, [lr]
   1c24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c250:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c254:	mov	r7, r0
   1c258:	ldr	r6, [pc, #72]	; 1c2a8 <__assert_fail@plt+0xa828>
   1c25c:	ldr	r5, [pc, #72]	; 1c2ac <__assert_fail@plt+0xa82c>
   1c260:	add	r6, pc, r6
   1c264:	add	r5, pc, r5
   1c268:	sub	r6, r6, r5
   1c26c:	mov	r8, r1
   1c270:	mov	r9, r2
   1c274:	bl	1164c <calloc@plt-0x20>
   1c278:	asrs	r6, r6, #2
   1c27c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c280:	mov	r4, #0
   1c284:	add	r4, r4, #1
   1c288:	ldr	r3, [r5], #4
   1c28c:	mov	r2, r9
   1c290:	mov	r1, r8
   1c294:	mov	r0, r7
   1c298:	blx	r3
   1c29c:	cmp	r6, r4
   1c2a0:	bne	1c284 <__assert_fail@plt+0xa804>
   1c2a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c2a8:	muleq	r1, ip, ip
   1c2ac:	muleq	r1, r4, ip
   1c2b0:	bx	lr
   1c2b4:	ldr	r3, [pc, #12]	; 1c2c8 <__assert_fail@plt+0xa848>
   1c2b8:	mov	r1, #0
   1c2bc:	add	r3, pc, r3
   1c2c0:	ldr	r2, [r3]
   1c2c4:	b	11930 <__cxa_atexit@plt>
   1c2c8:			; <UNDEFINED> instruction: 0x00013eb0

Disassembly of section .fini:

0001c2cc <.fini>:
   1c2cc:	push	{r3, lr}
   1c2d0:	pop	{r3, pc}
