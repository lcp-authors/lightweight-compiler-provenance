
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010e1c <.init>:
   10e1c:	push	{r3, lr}
   10e20:	bl	11104 <__assert_fail@plt+0x4c>
   10e24:	pop	{r3, pc}

Disassembly of section .plt:

00010e28 <calloc@plt-0x14>:
   10e28:	push	{lr}		; (str lr, [sp, #-4]!)
   10e2c:	ldr	lr, [pc, #4]	; 10e38 <calloc@plt-0x4>
   10e30:	add	lr, pc, lr
   10e34:	ldr	pc, [lr, #8]!
   10e38:	andeq	r8, r1, r8, asr #3

00010e3c <calloc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #456]!	; 0x1c8

00010e48 <fputs_unlocked@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #448]!	; 0x1c0

00010e54 <raise@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #440]!	; 0x1b8

00010e60 <strcmp@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #432]!	; 0x1b0

00010e6c <posix_fadvise64@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #424]!	; 0x1a8

00010e78 <read@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #416]!	; 0x1a0

00010e84 <fflush@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #408]!	; 0x198

00010e90 <free@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #400]!	; 0x190

00010e9c <_exit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #392]!	; 0x188

00010ea8 <memcpy@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #384]!	; 0x180

00010eb4 <tolower@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #376]!	; 0x178

00010ec0 <mbsinit@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #368]!	; 0x170

00010ecc <fwrite_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #360]!	; 0x168

00010ed8 <stpcpy@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #352]!	; 0x160

00010ee4 <dcgettext@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #344]!	; 0x158

00010ef0 <realloc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #336]!	; 0x150

00010efc <textdomain@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #328]!	; 0x148

00010f08 <iswprint@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #320]!	; 0x140

00010f14 <lseek64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #312]!	; 0x138

00010f20 <__ctype_get_mb_cur_max@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #304]!	; 0x130

00010f2c <__fpending@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #296]!	; 0x128

00010f38 <ferror_unlocked@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #288]!	; 0x120

00010f44 <mbrtowc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #280]!	; 0x118

00010f50 <error@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #272]!	; 0x110

00010f5c <malloc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #264]!	; 0x108

00010f68 <__libc_start_main@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #256]!	; 0x100

00010f74 <__freading@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #248]!	; 0xf8

00010f80 <__gmon_start__@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #240]!	; 0xf0

00010f8c <getopt_long@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #232]!	; 0xe8

00010f98 <__ctype_b_loc@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #224]!	; 0xe0

00010fa4 <exit@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #216]!	; 0xd8

00010fb0 <bcmp@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #208]!	; 0xd0

00010fbc <strlen@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #200]!	; 0xc8

00010fc8 <strchr@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #192]!	; 0xc0

00010fd4 <__errno_location@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #184]!	; 0xb8

00010fe0 <__sprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #176]!	; 0xb0

00010fec <__cxa_atexit@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #168]!	; 0xa8

00010ff8 <memset@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #160]!	; 0xa0

00011004 <__printf_chk@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #152]!	; 0x98

00011010 <fileno@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #144]!	; 0x90

0001101c <strtoumax@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #136]!	; 0x88

00011028 <__fprintf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #128]!	; 0x80

00011034 <fclose@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #120]!	; 0x78

00011040 <fseeko64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #112]!	; 0x70

0001104c <setlocale@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #104]!	; 0x68

00011058 <toupper@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #96]!	; 0x60

00011064 <strrchr@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #88]!	; 0x58

00011070 <nl_langinfo@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #80]!	; 0x50

0001107c <bindtextdomain@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #72]!	; 0x48

00011088 <fputs@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #64]!	; 0x40

00011094 <strncmp@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #56]!	; 0x38

000110a0 <abort@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #48]!	; 0x30

000110ac <close@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #40]!	; 0x28

000110b8 <__assert_fail@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #32]!

Disassembly of section .text:

000110c8 <.text>:
   110c8:	mov	fp, #0
   110cc:	mov	lr, #0
   110d0:	pop	{r1}		; (ldr r1, [sp], #4)
   110d4:	mov	r2, sp
   110d8:	push	{r2}		; (str r2, [sp, #-4]!)
   110dc:	push	{r0}		; (str r0, [sp, #-4]!)
   110e0:	ldr	ip, [pc, #16]	; 110f8 <__assert_fail@plt+0x40>
   110e4:	push	{ip}		; (str ip, [sp, #-4]!)
   110e8:	ldr	r0, [pc, #12]	; 110fc <__assert_fail@plt+0x44>
   110ec:	ldr	r3, [pc, #12]	; 11100 <__assert_fail@plt+0x48>
   110f0:	bl	10f68 <__libc_start_main@plt>
   110f4:	bl	110a0 <abort@plt>
   110f8:	andeq	r6, r1, r8, lsl #20
   110fc:	andeq	r1, r1, r0, asr r4
   11100:	andeq	r6, r1, r8, lsr #19
   11104:	ldr	r3, [pc, #20]	; 11120 <__assert_fail@plt+0x68>
   11108:	ldr	r2, [pc, #20]	; 11124 <__assert_fail@plt+0x6c>
   1110c:	add	r3, pc, r3
   11110:	ldr	r2, [r3, r2]
   11114:	cmp	r2, #0
   11118:	bxeq	lr
   1111c:	b	10f80 <__gmon_start__@plt>
   11120:	andeq	r7, r1, ip, ror #29
   11124:	andeq	r0, r0, r4, ror #1
   11128:	ldr	r0, [pc, #24]	; 11148 <__assert_fail@plt+0x90>
   1112c:	ldr	r3, [pc, #24]	; 1114c <__assert_fail@plt+0x94>
   11130:	cmp	r3, r0
   11134:	bxeq	lr
   11138:	ldr	r3, [pc, #16]	; 11150 <__assert_fail@plt+0x98>
   1113c:	cmp	r3, #0
   11140:	bxeq	lr
   11144:	bx	r3
   11148:	andeq	r9, r2, r8, lsr r1
   1114c:	andeq	r9, r2, r8, lsr r1
   11150:	andeq	r0, r0, r0
   11154:	ldr	r0, [pc, #36]	; 11180 <__assert_fail@plt+0xc8>
   11158:	ldr	r1, [pc, #36]	; 11184 <__assert_fail@plt+0xcc>
   1115c:	sub	r1, r1, r0
   11160:	asr	r1, r1, #2
   11164:	add	r1, r1, r1, lsr #31
   11168:	asrs	r1, r1, #1
   1116c:	bxeq	lr
   11170:	ldr	r3, [pc, #16]	; 11188 <__assert_fail@plt+0xd0>
   11174:	cmp	r3, #0
   11178:	bxeq	lr
   1117c:	bx	r3
   11180:	andeq	r9, r2, r8, lsr r1
   11184:	andeq	r9, r2, r8, lsr r1
   11188:	andeq	r0, r0, r0
   1118c:	push	{r4, lr}
   11190:	ldr	r4, [pc, #24]	; 111b0 <__assert_fail@plt+0xf8>
   11194:	ldrb	r3, [r4]
   11198:	cmp	r3, #0
   1119c:	popne	{r4, pc}
   111a0:	bl	11128 <__assert_fail@plt+0x70>
   111a4:	mov	r3, #1
   111a8:	strb	r3, [r4]
   111ac:	pop	{r4, pc}
   111b0:	andeq	r9, r2, r8, asr r1
   111b4:	b	11154 <__assert_fail@plt+0x9c>
   111b8:	push	{fp, lr}
   111bc:	mov	fp, sp
   111c0:	sub	sp, sp, #56	; 0x38
   111c4:	mov	r8, r0
   111c8:	cmp	r0, #0
   111cc:	bne	1140c <__assert_fail@plt+0x354>
   111d0:	movw	r1, #27227	; 0x6a5b
   111d4:	mov	r0, #0
   111d8:	mov	r2, #5
   111dc:	movt	r1, #1
   111e0:	bl	10ee4 <dcgettext@plt>
   111e4:	mov	r1, r0
   111e8:	movw	r0, #46184	; 0xb468
   111ec:	movt	r0, #2
   111f0:	ldr	r2, [r0]
   111f4:	mov	r0, #1
   111f8:	bl	11004 <__printf_chk@plt>
   111fc:	movw	r1, #27262	; 0x6a7e
   11200:	mov	r0, #0
   11204:	mov	r2, #5
   11208:	movt	r1, #1
   1120c:	bl	10ee4 <dcgettext@plt>
   11210:	movw	r9, #37204	; 0x9154
   11214:	movt	r9, #2
   11218:	ldr	r1, [r9]
   1121c:	bl	10e48 <fputs_unlocked@plt>
   11220:	movw	r1, #27758	; 0x6c6e
   11224:	mov	r0, #0
   11228:	mov	r2, #5
   1122c:	movt	r1, #1
   11230:	bl	10ee4 <dcgettext@plt>
   11234:	ldr	r1, [r9]
   11238:	bl	10e48 <fputs_unlocked@plt>
   1123c:	movw	r1, #27803	; 0x6c9b
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10ee4 <dcgettext@plt>
   11250:	ldr	r1, [r9]
   11254:	bl	10e48 <fputs_unlocked@plt>
   11258:	movw	r1, #27857	; 0x6cd1
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	movt	r1, #1
   11268:	bl	10ee4 <dcgettext@plt>
   1126c:	ldr	r1, [r9]
   11270:	bl	10e48 <fputs_unlocked@plt>
   11274:	movw	r1, #28230	; 0x6e46
   11278:	mov	r0, #0
   1127c:	mov	r2, #5
   11280:	movt	r1, #1
   11284:	bl	10ee4 <dcgettext@plt>
   11288:	ldr	r1, [r9]
   1128c:	bl	10e48 <fputs_unlocked@plt>
   11290:	movw	r1, #28655	; 0x6fef
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	movt	r1, #1
   112a0:	bl	10ee4 <dcgettext@plt>
   112a4:	ldr	r1, [r9]
   112a8:	bl	10e48 <fputs_unlocked@plt>
   112ac:	movw	r1, #29066	; 0x718a
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	movt	r1, #1
   112bc:	bl	10ee4 <dcgettext@plt>
   112c0:	ldr	r1, [r9]
   112c4:	bl	10e48 <fputs_unlocked@plt>
   112c8:	movw	r0, #32504	; 0x7ef8
   112cc:	mov	r6, sp
   112d0:	movt	r0, #1
   112d4:	mov	r1, r6
   112d8:	ldm	r0!, {r2, r3, r4, r5}
   112dc:	stmia	r1!, {r2, r3, r4, r5}
   112e0:	ldm	r0!, {r2, r3, r4, r5, r7}
   112e4:	stmia	r1!, {r2, r3, r4, r5, r7}
   112e8:	ldm	r0, {r2, r3, r4, r5, r7}
   112ec:	stm	r1, {r2, r3, r4, r5, r7}
   112f0:	movw	r1, #29953	; 0x7501
   112f4:	movw	r5, #29538	; 0x7362
   112f8:	movt	r1, #1
   112fc:	movt	r5, #1
   11300:	mov	r0, r5
   11304:	bl	10e60 <strcmp@plt>
   11308:	cmp	r0, #0
   1130c:	ldrne	r1, [r6, #8]!
   11310:	cmpne	r1, #0
   11314:	bne	11300 <__assert_fail@plt+0x248>
   11318:	movw	r1, #30048	; 0x7560
   1131c:	ldr	r6, [r6, #4]
   11320:	mov	r0, #0
   11324:	mov	r2, #5
   11328:	movt	r1, #1
   1132c:	bl	10ee4 <dcgettext@plt>
   11330:	movw	r2, #29575	; 0x7387
   11334:	movw	r3, #30071	; 0x7577
   11338:	mov	r1, r0
   1133c:	mov	r0, #1
   11340:	movt	r2, #1
   11344:	movt	r3, #1
   11348:	bl	11004 <__printf_chk@plt>
   1134c:	cmp	r6, #0
   11350:	mov	r0, #5
   11354:	mov	r1, #0
   11358:	moveq	r6, r5
   1135c:	bl	1104c <setlocale@plt>
   11360:	cmp	r0, #0
   11364:	beq	1139c <__assert_fail@plt+0x2e4>
   11368:	movw	r1, #30111	; 0x759f
   1136c:	mov	r2, #3
   11370:	movt	r1, #1
   11374:	bl	11094 <strncmp@plt>
   11378:	cmp	r0, #0
   1137c:	beq	1139c <__assert_fail@plt+0x2e4>
   11380:	movw	r1, #30115	; 0x75a3
   11384:	mov	r0, #0
   11388:	mov	r2, #5
   1138c:	movt	r1, #1
   11390:	bl	10ee4 <dcgettext@plt>
   11394:	ldr	r1, [r9]
   11398:	bl	10e48 <fputs_unlocked@plt>
   1139c:	movw	r1, #30186	; 0x75ea
   113a0:	mov	r0, #0
   113a4:	mov	r2, #5
   113a8:	movt	r1, #1
   113ac:	bl	10ee4 <dcgettext@plt>
   113b0:	movw	r2, #30071	; 0x7577
   113b4:	mov	r1, r0
   113b8:	mov	r0, #1
   113bc:	mov	r3, r5
   113c0:	movt	r2, #1
   113c4:	bl	11004 <__printf_chk@plt>
   113c8:	movw	r1, #30213	; 0x7605
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	movt	r1, #1
   113d8:	bl	10ee4 <dcgettext@plt>
   113dc:	mov	r1, r0
   113e0:	movw	r0, #29981	; 0x751d
   113e4:	movw	r3, #30263	; 0x7637
   113e8:	cmp	r6, r5
   113ec:	mov	r2, r6
   113f0:	movt	r0, #1
   113f4:	movt	r3, #1
   113f8:	moveq	r3, r0
   113fc:	mov	r0, #1
   11400:	bl	11004 <__printf_chk@plt>
   11404:	mov	r0, r8
   11408:	bl	10fa4 <exit@plt>
   1140c:	movw	r0, #37192	; 0x9148
   11410:	movw	r1, #27188	; 0x6a34
   11414:	mov	r2, #5
   11418:	movt	r0, #2
   1141c:	movt	r1, #1
   11420:	ldr	r5, [r0]
   11424:	mov	r0, #0
   11428:	bl	10ee4 <dcgettext@plt>
   1142c:	mov	r2, r0
   11430:	movw	r0, #46184	; 0xb468
   11434:	mov	r1, #1
   11438:	movt	r0, #2
   1143c:	ldr	r3, [r0]
   11440:	mov	r0, r5
   11444:	bl	11028 <__fprintf_chk@plt>
   11448:	b	11404 <__assert_fail@plt+0x34c>
   1144c:	nop	{0}
   11450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11454:	add	fp, sp, #28
   11458:	sub	sp, sp, #412	; 0x19c
   1145c:	mov	r4, r0
   11460:	ldr	r0, [r1]
   11464:	mov	r5, r1
   11468:	bl	137e4 <__assert_fail@plt+0x272c>
   1146c:	movw	r1, #30263	; 0x7637
   11470:	mov	r0, #6
   11474:	movt	r1, #1
   11478:	bl	1104c <setlocale@plt>
   1147c:	movw	r6, #29579	; 0x738b
   11480:	movw	r1, #29541	; 0x7365
   11484:	movt	r6, #1
   11488:	movt	r1, #1
   1148c:	mov	r0, r6
   11490:	bl	1107c <bindtextdomain@plt>
   11494:	mov	r0, r6
   11498:	bl	10efc <textdomain@plt>
   1149c:	movw	r0, #13972	; 0x3694
   114a0:	movt	r0, #1
   114a4:	bl	16a0c <__assert_fail@plt+0x5954>
   114a8:	movw	r6, #29565	; 0x737d
   114ac:	movw	r7, #32392	; 0x7e88
   114b0:	movw	r8, #29573	; 0x7385
   114b4:	add	r0, sp, #104	; 0x68
   114b8:	mov	r9, #0
   114bc:	mov	sl, #1
   114c0:	movt	r6, #1
   114c4:	movt	r7, #1
   114c8:	movt	r8, #1
   114cc:	add	r1, r0, #8
   114d0:	add	r0, r0, #16
   114d4:	str	r1, [sp, #60]	; 0x3c
   114d8:	str	r0, [sp, #52]	; 0x34
   114dc:	mov	r0, r4
   114e0:	mov	r1, r5
   114e4:	mov	r2, r6
   114e8:	mov	r3, r7
   114ec:	str	r9, [sp]
   114f0:	bl	10f8c <getopt_long@plt>
   114f4:	cmp	r0, #98	; 0x62
   114f8:	ble	11524 <__assert_fail@plt+0x46c>
   114fc:	cmp	r0, #114	; 0x72
   11500:	bgt	11550 <__assert_fail@plt+0x498>
   11504:	cmp	r0, #99	; 0x63
   11508:	beq	11588 <__assert_fail@plt+0x4d0>
   1150c:	cmp	r0, #100	; 0x64
   11510:	bne	1217c <__assert_fail@plt+0x10c4>
   11514:	movw	r0, #37210	; 0x915a
   11518:	movt	r0, #2
   1151c:	strb	sl, [r0]
   11520:	b	114dc <__assert_fail@plt+0x424>
   11524:	cmp	r0, #64	; 0x40
   11528:	ble	11598 <__assert_fail@plt+0x4e0>
   1152c:	cmp	r0, #65	; 0x41
   11530:	bne	11580 <__assert_fail@plt+0x4c8>
   11534:	mov	r0, #3
   11538:	mov	r1, r8
   1153c:	bl	1104c <setlocale@plt>
   11540:	mov	r0, #0
   11544:	mov	r1, r8
   11548:	bl	1104c <setlocale@plt>
   1154c:	b	114dc <__assert_fail@plt+0x424>
   11550:	cmp	r0, #115	; 0x73
   11554:	bne	11568 <__assert_fail@plt+0x4b0>
   11558:	movw	r0, #37211	; 0x915b
   1155c:	movt	r0, #2
   11560:	strb	sl, [r0]
   11564:	b	114dc <__assert_fail@plt+0x424>
   11568:	cmp	r0, #116	; 0x74
   1156c:	bne	1217c <__assert_fail@plt+0x10c4>
   11570:	movw	r0, #37212	; 0x915c
   11574:	movt	r0, #2
   11578:	strb	sl, [r0]
   1157c:	b	114dc <__assert_fail@plt+0x424>
   11580:	cmp	r0, #67	; 0x43
   11584:	bne	1217c <__assert_fail@plt+0x10c4>
   11588:	movw	r0, #37209	; 0x9159
   1158c:	movt	r0, #2
   11590:	strb	sl, [r0]
   11594:	b	114dc <__assert_fail@plt+0x424>
   11598:	cmn	r0, #1
   1159c:	bne	11ff4 <__assert_fail@plt+0xf3c>
   115a0:	movw	r8, #37184	; 0x9140
   115a4:	movw	r9, #37213	; 0x915d
   115a8:	mov	r2, #2
   115ac:	mov	r6, #2
   115b0:	movt	r8, #2
   115b4:	movt	r9, #2
   115b8:	ldr	r0, [r8]
   115bc:	sub	sl, r4, r0
   115c0:	sub	r0, sl, #2
   115c4:	clz	r0, r0
   115c8:	lsr	r3, r0, #5
   115cc:	movw	r0, #37210	; 0x915a
   115d0:	movt	r0, #2
   115d4:	ldrb	r0, [r0]
   115d8:	eor	r1, r0, #1
   115dc:	and	r1, r3, r1
   115e0:	strb	r1, [r9]
   115e4:	movw	r1, #37211	; 0x915b
   115e8:	movt	r1, #2
   115ec:	ldrb	r1, [r1]
   115f0:	teq	r0, r1
   115f4:	movwne	r2, #1
   115f8:	cmp	r0, #0
   115fc:	movwne	r6, #1
   11600:	cmp	r1, #0
   11604:	movwne	r6, #2
   11608:	cmp	sl, r2
   1160c:	blt	12054 <__assert_fail@plt+0xf9c>
   11610:	cmp	r6, sl
   11614:	str	r3, [sp, #36]	; 0x24
   11618:	blt	12084 <__assert_fail@plt+0xfcc>
   1161c:	mov	r0, #24
   11620:	bl	15840 <__assert_fail@plt+0x4788>
   11624:	mov	r7, #0
   11628:	str	r0, [sp, #108]	; 0x6c
   1162c:	str	r0, [sp, #104]	; 0x68
   11630:	add	r1, sp, #104	; 0x68
   11634:	str	r7, [r0, #4]
   11638:	ldr	r0, [r8]
   1163c:	ldr	r0, [r5, r0, lsl #2]
   11640:	bl	12268 <__assert_fail@plt+0x11b0>
   11644:	mov	r6, #1
   11648:	cmp	r0, #0
   1164c:	beq	11fe8 <__assert_fail@plt+0xf30>
   11650:	cmp	sl, #2
   11654:	bne	11690 <__assert_fail@plt+0x5d8>
   11658:	mov	r0, #24
   1165c:	bl	15840 <__assert_fail@plt+0x4788>
   11660:	mov	r1, #0
   11664:	str	r0, [sp, #68]	; 0x44
   11668:	str	r0, [sp, #64]	; 0x40
   1166c:	add	r7, sp, #64	; 0x40
   11670:	str	r1, [r0, #4]
   11674:	ldr	r0, [r8]
   11678:	mov	r1, r7
   1167c:	add	r0, r5, r0, lsl #2
   11680:	ldr	r0, [r0, #4]
   11684:	bl	12268 <__assert_fail@plt+0x11b0>
   11688:	cmp	r0, #0
   1168c:	beq	11fe8 <__assert_fail@plt+0xf30>
   11690:	add	r0, sp, #104	; 0x68
   11694:	bl	13398 <__assert_fail@plt+0x22e0>
   11698:	movw	r0, #37209	; 0x9159
   1169c:	movt	r0, #2
   116a0:	ldrb	r0, [r0]
   116a4:	cmp	r0, #1
   116a8:	bne	1173c <__assert_fail@plt+0x684>
   116ac:	add	r5, sp, #144	; 0x90
   116b0:	mov	r1, #0
   116b4:	mov	r2, #256	; 0x100
   116b8:	mov	r9, #0
   116bc:	mov	r4, #256	; 0x100
   116c0:	mov	r0, r5
   116c4:	bl	10ff8 <memset@plt>
   116c8:	mvn	r0, #0
   116cc:	mov	r1, #0
   116d0:	subs	r2, r0, #1
   116d4:	sbc	r3, r0, #0
   116d8:	ldr	r0, [sp, #60]	; 0x3c
   116dc:	strd	r2, [r0]
   116e0:	add	r0, sp, #104	; 0x68
   116e4:	bl	12dfc <__assert_fail@plt+0x1d44>
   116e8:	cmn	r0, #1
   116ec:	beq	1172c <__assert_fail@plt+0x674>
   116f0:	mov	r8, r7
   116f4:	mov	r4, #256	; 0x100
   116f8:	mov	r7, #1
   116fc:	add	r6, sp, #104	; 0x68
   11700:	ldrb	r1, [r5, r0]
   11704:	strb	r7, [r5, r0]
   11708:	eor	r0, r1, #1
   1170c:	mov	r1, #0
   11710:	sub	r4, r4, r0
   11714:	mov	r0, r6
   11718:	bl	12dfc <__assert_fail@plt+0x1d44>
   1171c:	cmn	r0, #1
   11720:	bne	11700 <__assert_fail@plt+0x648>
   11724:	asr	r9, r4, #31
   11728:	mov	r7, r8
   1172c:	ldr	r0, [sp, #52]	; 0x34
   11730:	stm	r0, {r4, r9}
   11734:	movw	r9, #37213	; 0x915d
   11738:	movt	r9, #2
   1173c:	ldr	r0, [sp, #128]	; 0x80
   11740:	cmp	r0, #0
   11744:	bne	12190 <__assert_fail@plt+0x10d8>
   11748:	add	r0, r7, #8
   1174c:	cmp	r7, #0
   11750:	str	r0, [sp, #56]	; 0x38
   11754:	beq	11b90 <__assert_fail@plt+0xad8>
   11758:	ldr	r0, [sp, #52]	; 0x34
   1175c:	add	r4, r7, #16
   11760:	ldr	r6, [r0]
   11764:	ldr	r5, [r0, #4]
   11768:	mov	r0, r7
   1176c:	bl	13398 <__assert_fail@plt+0x22e0>
   11770:	str	r4, [sp, #48]	; 0x30
   11774:	ldr	r3, [r4]
   11778:	ldr	r2, [r4, #4]
   1177c:	subs	r0, r6, r3
   11780:	sbcs	r0, r5, r2
   11784:	bcc	117b8 <__assert_fail@plt+0x700>
   11788:	ldr	r0, [r7, #24]
   1178c:	cmp	r0, #1
   11790:	bne	117b8 <__assert_fail@plt+0x700>
   11794:	subs	r0, r6, r3
   11798:	mov	r3, r6
   1179c:	sbc	r1, r5, r2
   117a0:	ldr	r2, [r7, #28]
   117a4:	strd	r0, [r2, #16]
   117a8:	mov	r2, r5
   117ac:	ldr	r0, [sp, #48]	; 0x30
   117b0:	str	r6, [r0]
   117b4:	str	r5, [r0, #4]
   117b8:	ldr	r0, [r7, #24]
   117bc:	cmp	r0, #2
   117c0:	bcs	121b0 <__assert_fail@plt+0x10f8>
   117c4:	ldrb	r1, [r9]
   117c8:	cmp	r1, #0
   117cc:	beq	11ac8 <__assert_fail@plt+0xa10>
   117d0:	ldrb	r0, [r7, #32]
   117d4:	cmp	r0, #0
   117d8:	bne	121bc <__assert_fail@plt+0x1104>
   117dc:	ldrb	r0, [r7, #34]	; 0x22
   117e0:	cmp	r0, #0
   117e4:	bne	121c8 <__assert_fail@plt+0x1110>
   117e8:	movw	r0, #37209	; 0x9159
   117ec:	ldr	r4, [r7, #4]
   117f0:	movt	r0, #2
   117f4:	ldrb	r0, [r0]
   117f8:	cmp	r0, #0
   117fc:	bne	11a58 <__assert_fail@plt+0x9a0>
   11800:	ldrb	r0, [r7, #33]	; 0x21
   11804:	cmp	r0, #0
   11808:	beq	11a58 <__assert_fail@plt+0x9a0>
   1180c:	ldr	r0, [sp, #108]	; 0x6c
   11810:	str	r3, [sp, #12]
   11814:	str	r2, [sp, #16]
   11818:	str	r6, [sp, #20]
   1181c:	str	r4, [sp, #24]
   11820:	str	sl, [sp, #32]
   11824:	str	r0, [sp, #8]
   11828:	bl	10f98 <__ctype_b_loc@plt>
   1182c:	ldr	r0, [r0]
   11830:	vmov.i32	q8, #0	; 0x00000000
   11834:	vmov.i16	d20, #1	; 0x0001
   11838:	vmov.i32	q9, #0	; 0x00000000
   1183c:	mov	r1, #0
   11840:	add	r2, r0, r1
   11844:	add	r1, r1, #8
   11848:	vld1.16	{d21}, [r2]
   1184c:	cmp	r1, #512	; 0x200
   11850:	vshr.u16	d22, d21, #9
   11854:	vshr.u16	d21, d21, #8
   11858:	vand	d22, d22, d20
   1185c:	vand	d21, d21, d20
   11860:	vaddw.u16	q9, q9, d22
   11864:	vaddw.u16	q8, q8, d21
   11868:	bne	11840 <__assert_fail@plt+0x788>
   1186c:	vext.8	q10, q8, q8, #8
   11870:	vext.8	q11, q9, q8, #8
   11874:	ldr	r2, [sp, #60]	; 0x3c
   11878:	mvn	r4, #0
   1187c:	str	r5, [sp, #28]
   11880:	mov	r8, #1
   11884:	mov	r9, #1
   11888:	subs	r0, r4, #1
   1188c:	sbc	r1, r4, #0
   11890:	vadd.i32	q8, q8, q10
   11894:	vadd.i32	q9, q9, q11
   11898:	strd	r0, [r2]
   1189c:	ldr	r2, [sp, #56]	; 0x38
   118a0:	vdup.32	q10, d16[1]
   118a4:	vdup.32	q11, d18[1]
   118a8:	strd	r0, [r2]
   118ac:	vadd.i32	q8, q8, q10
   118b0:	vadd.i32	q9, q9, q11
   118b4:	vmov.32	r0, d16[0]
   118b8:	str	r0, [sp, #44]	; 0x2c
   118bc:	vmov.32	r0, d18[0]
   118c0:	str	r0, [sp, #40]	; 0x28
   118c4:	add	r0, sp, #104	; 0x68
   118c8:	add	r1, sp, #144	; 0x90
   118cc:	bl	12dfc <__assert_fail@plt+0x1d44>
   118d0:	mov	sl, r0
   118d4:	mov	r0, r7
   118d8:	sub	r1, fp, #36	; 0x24
   118dc:	bl	12dfc <__assert_fail@plt+0x1d44>
   118e0:	ldr	r5, [fp, #-36]	; 0xffffffdc
   118e4:	tst	r8, #1
   118e8:	cmpne	r5, #2
   118ec:	bne	1190c <__assert_fail@plt+0x854>
   118f0:	cmp	r5, #2
   118f4:	bne	11924 <__assert_fail@plt+0x86c>
   118f8:	ldr	r1, [sp, #60]	; 0x3c
   118fc:	ldrd	r2, [r1]
   11900:	ldr	r1, [sp, #56]	; 0x38
   11904:	ldrd	r8, [r1]
   11908:	b	119c0 <__assert_fail@plt+0x908>
   1190c:	ldr	r2, [sp, #144]	; 0x90
   11910:	subs	r3, r2, #2
   11914:	movwne	r3, #1
   11918:	tst	r9, r3
   1191c:	bne	11928 <__assert_fail@plt+0x870>
   11920:	b	12184 <__assert_fail@plt+0x10cc>
   11924:	ldr	r2, [sp, #144]	; 0x90
   11928:	ldr	r3, [sp, #108]	; 0x6c
   1192c:	cmp	r2, #1
   11930:	ldr	r3, [r3, #4]
   11934:	str	r3, [sp, #108]	; 0x6c
   11938:	ldr	r3, [sp, #60]	; 0x3c
   1193c:	str	r4, [r3]
   11940:	str	r4, [r3, #4]
   11944:	ldr	r3, [r7, #4]
   11948:	ldr	r3, [r3, #4]
   1194c:	str	r3, [r7, #4]
   11950:	ldr	r3, [sp, #56]	; 0x38
   11954:	str	r4, [r3]
   11958:	str	r4, [r3, #4]
   1195c:	mov	r4, r7
   11960:	ldr	r6, [sp, #52]	; 0x34
   11964:	ldr	r1, [sp, #40]	; 0x28
   11968:	ldr	r7, [sp, #44]	; 0x2c
   1196c:	ldrd	r8, [r6]
   11970:	mov	r2, r1
   11974:	moveq	r2, r7
   11978:	sub	r2, r2, #1
   1197c:	subs	r2, r8, r2
   11980:	mvn	r8, #0
   11984:	sbc	r3, r9, #0
   11988:	cmp	r5, #1
   1198c:	mvn	r9, #0
   11990:	strd	r2, [r6]
   11994:	ldr	r6, [sp, #48]	; 0x30
   11998:	moveq	r1, r7
   1199c:	mov	r7, r4
   119a0:	mvn	r4, #0
   119a4:	sub	r1, r1, #1
   119a8:	ldrd	r2, [r6]
   119ac:	subs	r2, r2, r1
   119b0:	sbc	r3, r3, #0
   119b4:	strd	r2, [r6]
   119b8:	mvn	r2, #0
   119bc:	mvn	r3, #0
   119c0:	cmn	sl, #1
   119c4:	movne	r5, r7
   119c8:	eorne	r1, r8, r4
   119cc:	eorne	r7, r9, r4
   119d0:	orrne	r1, r1, r7
   119d4:	movne	r7, r5
   119d8:	clzne	r1, r1
   119dc:	lsrne	r8, r1, #5
   119e0:	eorne	r1, r2, r4
   119e4:	eorne	r2, r3, r4
   119e8:	orrne	r1, r1, r2
   119ec:	clzne	r1, r1
   119f0:	lsrne	r9, r1, #5
   119f4:	cmnne	r0, #1
   119f8:	bne	118c4 <__assert_fail@plt+0x80c>
   119fc:	ldr	r0, [sp, #52]	; 0x34
   11a00:	ldr	r6, [r0]
   11a04:	ldr	r5, [r0, #4]
   11a08:	ldr	r0, [sp, #20]
   11a0c:	subs	r0, r0, r6
   11a10:	ldr	r0, [sp, #28]
   11a14:	sbcs	r0, r0, r5
   11a18:	bcc	121ec <__assert_fail@plt+0x1134>
   11a1c:	ldr	r0, [sp, #48]	; 0x30
   11a20:	ldr	r2, [sp, #12]
   11a24:	ldrd	r0, [r0]
   11a28:	subs	r2, r2, r0
   11a2c:	ldr	r2, [sp, #16]
   11a30:	sbcs	r2, r2, r1
   11a34:	bcc	121ec <__assert_fail@plt+0x1134>
   11a38:	ldr	r2, [sp, #8]
   11a3c:	ldr	r4, [sp, #24]
   11a40:	ldr	sl, [sp, #32]
   11a44:	movw	r9, #37213	; 0x915d
   11a48:	movt	r9, #2
   11a4c:	str	r2, [sp, #108]	; 0x6c
   11a50:	str	r4, [r7, #4]
   11a54:	b	11a60 <__assert_fail@plt+0x9a8>
   11a58:	mov	r0, r3
   11a5c:	mov	r1, r2
   11a60:	subs	r2, r0, r6
   11a64:	sbcs	r2, r1, r5
   11a68:	bcs	11b0c <__assert_fail@plt+0xa54>
   11a6c:	movw	r2, #37212	; 0x915c
   11a70:	movt	r2, #2
   11a74:	ldrb	r2, [r2]
   11a78:	cmp	r2, #0
   11a7c:	bne	11b0c <__assert_fail@plt+0xa54>
   11a80:	orrs	r2, r0, r1
   11a84:	beq	12210 <__assert_fail@plt+0x1158>
   11a88:	ldrb	r2, [r9]
   11a8c:	cmp	r2, #0
   11a90:	beq	1221c <__assert_fail@plt+0x1164>
   11a94:	ldr	r2, [r4]
   11a98:	cmp	r2, #4
   11a9c:	bhi	1220c <__assert_fail@plt+0x1154>
   11aa0:	add	r3, pc, #4
   11aa4:	mov	ip, r7
   11aa8:	ldr	pc, [r3, r2, lsl #2]
   11aac:	andeq	r1, r1, r0, asr #21
   11ab0:	ldrdeq	r1, [r1], -ip
   11ab4:	andeq	r2, r1, ip, lsr r2
   11ab8:	andeq	r2, r1, ip, lsl #4
   11abc:	andeq	r1, r1, r0, asr #21
   11ac0:	add	r7, r4, #8
   11ac4:	b	11ae0 <__assert_fail@plt+0xa28>
   11ac8:	cmp	r0, #0
   11acc:	beq	11b90 <__assert_fail@plt+0xad8>
   11ad0:	movw	r1, #31739	; 0x7bfb
   11ad4:	movt	r1, #1
   11ad8:	b	121d0 <__assert_fail@plt+0x1118>
   11adc:	add	r7, r4, #9
   11ae0:	subs	r2, r6, r0
   11ae4:	mov	r0, ip
   11ae8:	sbc	r3, r5, r1
   11aec:	ldrb	r1, [r7]
   11af0:	mov	r7, ip
   11af4:	bl	13264 <__assert_fail@plt+0x21ac>
   11af8:	ldr	r0, [sp, #48]	; 0x30
   11afc:	mov	r1, r5
   11b00:	str	r6, [r0]
   11b04:	str	r5, [r0, #4]
   11b08:	mov	r0, r6
   11b0c:	movw	r2, #37209	; 0x9159
   11b10:	movt	r2, #2
   11b14:	ldrb	r2, [r2]
   11b18:	cmp	r2, #1
   11b1c:	bne	11b90 <__assert_fail@plt+0xad8>
   11b20:	ldrb	r2, [sp, #137]	; 0x89
   11b24:	cmp	r2, #0
   11b28:	beq	11b90 <__assert_fail@plt+0xad8>
   11b2c:	eor	r0, r0, r6
   11b30:	eor	r1, r1, r5
   11b34:	orrs	r0, r0, r1
   11b38:	bne	11b84 <__assert_fail@plt+0xacc>
   11b3c:	mvn	r0, #0
   11b40:	mov	r1, #0
   11b44:	subs	r2, r0, #1
   11b48:	sbc	r3, r0, #0
   11b4c:	ldr	r0, [sp, #56]	; 0x38
   11b50:	strd	r2, [r0]
   11b54:	mov	r0, r7
   11b58:	bl	12dfc <__assert_fail@plt+0x1d44>
   11b5c:	cmn	r0, #1
   11b60:	beq	11b84 <__assert_fail@plt+0xacc>
   11b64:	mov	r5, r0
   11b68:	mov	r0, r7
   11b6c:	mov	r1, #0
   11b70:	bl	12dfc <__assert_fail@plt+0x1d44>
   11b74:	cmn	r0, #1
   11b78:	beq	11b90 <__assert_fail@plt+0xad8>
   11b7c:	cmp	r0, r5
   11b80:	beq	11b68 <__assert_fail@plt+0xab0>
   11b84:	movw	r1, #31632	; 0x7b90
   11b88:	movt	r1, #1
   11b8c:	b	121d0 <__assert_fail@plt+0x1118>
   11b90:	movw	r0, #37200	; 0x9150
   11b94:	mov	r1, #2
   11b98:	movt	r0, #2
   11b9c:	ldr	r0, [r0]
   11ba0:	bl	13780 <__assert_fail@plt+0x26c8>
   11ba4:	movw	r0, #37211	; 0x915b
   11ba8:	cmp	sl, #1
   11bac:	movt	r0, #2
   11bb0:	ldrb	r0, [r0]
   11bb4:	bne	11bec <__assert_fail@plt+0xb34>
   11bb8:	cmp	r0, #0
   11bbc:	beq	11bec <__assert_fail@plt+0xb34>
   11bc0:	movw	r0, #37209	; 0x9159
   11bc4:	movw	r2, #37214	; 0x915e
   11bc8:	movt	r0, #2
   11bcc:	movt	r2, #2
   11bd0:	ldrb	r1, [r0]
   11bd4:	add	r0, sp, #104	; 0x68
   11bd8:	bl	12ac4 <__assert_fail@plt+0x1a0c>
   11bdc:	movw	r0, #11532	; 0x2d0c
   11be0:	movt	r0, #1
   11be4:	bl	12b44 <__assert_fail@plt+0x1a8c>
   11be8:	b	11fd4 <__assert_fail@plt+0xf1c>
   11bec:	movw	r1, #37210	; 0x915a
   11bf0:	cmp	sl, #1
   11bf4:	movt	r1, #2
   11bf8:	ldrb	r1, [r1]
   11bfc:	bne	11c94 <__assert_fail@plt+0xbdc>
   11c00:	cmp	r1, #0
   11c04:	beq	11c94 <__assert_fail@plt+0xbdc>
   11c08:	movw	r0, #37209	; 0x9159
   11c0c:	movw	r2, #45662	; 0xb25e
   11c10:	movt	r0, #2
   11c14:	movt	r2, #2
   11c18:	ldrb	r1, [r0]
   11c1c:	add	r0, sp, #104	; 0x68
   11c20:	bl	12ac4 <__assert_fail@plt+0x1a0c>
   11c24:	movw	r4, #37470	; 0x925e
   11c28:	movw	r6, #37204	; 0x9154
   11c2c:	movt	r4, #2
   11c30:	movt	r6, #2
   11c34:	mov	r0, r4
   11c38:	mov	r1, #8192	; 0x2000
   11c3c:	bl	12d58 <__assert_fail@plt+0x1ca0>
   11c40:	cmp	r0, #0
   11c44:	beq	11fd4 <__assert_fail@plt+0xf1c>
   11c48:	ldr	r3, [r6]
   11c4c:	mov	r5, r0
   11c50:	mov	r0, r4
   11c54:	mov	r1, #1
   11c58:	mov	r2, r5
   11c5c:	bl	10ecc <fwrite_unlocked@plt>
   11c60:	cmp	r0, r5
   11c64:	beq	11c34 <__assert_fail@plt+0xb7c>
   11c68:	bl	10fd4 <__errno_location@plt>
   11c6c:	ldr	r4, [r0]
   11c70:	movw	r1, #29842	; 0x7492
   11c74:	movt	r1, #1
   11c78:	mov	r0, #0
   11c7c:	mov	r2, #5
   11c80:	bl	10ee4 <dcgettext@plt>
   11c84:	mov	r2, r0
   11c88:	mov	r0, #1
   11c8c:	mov	r1, r4
   11c90:	bl	10f50 <error@plt>
   11c94:	ldr	r2, [sp, #36]	; 0x24
   11c98:	and	r1, r2, r1
   11c9c:	and	r0, r0, r1
   11ca0:	cmp	r0, #1
   11ca4:	bne	11ce4 <__assert_fail@plt+0xc2c>
   11ca8:	movw	r0, #37209	; 0x9159
   11cac:	movw	r2, #45662	; 0xb25e
   11cb0:	movt	r0, #2
   11cb4:	movt	r2, #2
   11cb8:	ldrb	r1, [r0]
   11cbc:	add	r0, sp, #104	; 0x68
   11cc0:	bl	12ac4 <__assert_fail@plt+0x1a0c>
   11cc4:	movw	r2, #37214	; 0x915e
   11cc8:	mov	r0, r7
   11ccc:	mov	r1, #0
   11cd0:	movt	r2, #2
   11cd4:	bl	12ac4 <__assert_fail@plt+0x1a0c>
   11cd8:	movw	r0, #11608	; 0x2d58
   11cdc:	movt	r0, #1
   11ce0:	b	11be4 <__assert_fail@plt+0xb2c>
   11ce4:	ldrb	r0, [r9]
   11ce8:	cmp	r0, #0
   11cec:	beq	11fd4 <__assert_fail@plt+0xf1c>
   11cf0:	movw	r0, #37209	; 0x9159
   11cf4:	movt	r0, #2
   11cf8:	ldrb	r0, [r0]
   11cfc:	cmp	r0, #1
   11d00:	bne	11d9c <__assert_fail@plt+0xce4>
   11d04:	movw	r5, #45662	; 0xb25e
   11d08:	add	r0, sp, #104	; 0x68
   11d0c:	mov	r1, #0
   11d10:	mov	r6, #0
   11d14:	movt	r5, #2
   11d18:	mov	r2, r5
   11d1c:	bl	12ac4 <__assert_fail@plt+0x1a0c>
   11d20:	add	r0, pc, #952	; 0x3b8
   11d24:	movw	r4, #45918	; 0xb35e
   11d28:	mvn	r1, #0
   11d2c:	vmov.i8	q8, #16	; 0x10
   11d30:	vld1.64	{d18-d19}, [r0]
   11d34:	ldr	r0, [sp, #56]	; 0x38
   11d38:	subs	r2, r1, #1
   11d3c:	movt	r4, #2
   11d40:	sbc	r3, r1, #0
   11d44:	strd	r2, [r0]
   11d48:	vadd.i8	q10, q9, q8
   11d4c:	add	r0, r4, r6
   11d50:	add	r6, r6, #16
   11d54:	vst1.8	{d18-d19}, [r0]
   11d58:	cmp	r6, #256	; 0x100
   11d5c:	vorr	q9, q10, q10
   11d60:	bne	11d48 <__assert_fail@plt+0xc90>
   11d64:	mov	r6, #0
   11d68:	ldrb	r0, [r5, r6]
   11d6c:	cmp	r0, #0
   11d70:	bne	11d8c <__assert_fail@plt+0xcd4>
   11d74:	mov	r0, r7
   11d78:	mov	r1, #0
   11d7c:	bl	12dfc <__assert_fail@plt+0x1d44>
   11d80:	cmn	r0, #1
   11d84:	beq	11f20 <__assert_fail@plt+0xe68>
   11d88:	strb	r0, [r4, r6]
   11d8c:	add	r6, r6, #1
   11d90:	cmp	r6, #256	; 0x100
   11d94:	bne	11d68 <__assert_fail@plt+0xcb0>
   11d98:	b	11f34 <__assert_fail@plt+0xe7c>
   11d9c:	add	r0, pc, #828	; 0x33c
   11da0:	movw	r6, #45918	; 0xb35e
   11da4:	vmov.i8	q8, #16	; 0x10
   11da8:	vld1.64	{d18-d19}, [r0]
   11dac:	movt	r6, #2
   11db0:	mov	r0, #0
   11db4:	vadd.i8	q10, q9, q8
   11db8:	add	r1, r6, r0
   11dbc:	add	r0, r0, #16
   11dc0:	vst1.8	{d18-d19}, [r1]
   11dc4:	cmp	r0, #256	; 0x100
   11dc8:	vorr	q9, q10, q10
   11dcc:	bne	11db4 <__assert_fail@plt+0xcfc>
   11dd0:	ldr	r2, [sp, #60]	; 0x3c
   11dd4:	mvn	r1, #0
   11dd8:	sub	r9, fp, #36	; 0x24
   11ddc:	subs	r0, r1, #1
   11de0:	sbc	r1, r1, #0
   11de4:	strd	r0, [r2]
   11de8:	ldr	r2, [sp, #56]	; 0x38
   11dec:	strd	r0, [r2]
   11df0:	b	11ea4 <__assert_fail@plt+0xdec>
   11df4:	strb	r0, [r6, r5]
   11df8:	b	11e68 <__assert_fail@plt+0xdb0>
   11dfc:	bl	10f98 <__ctype_b_loc@plt>
   11e00:	ldr	r8, [r0]
   11e04:	mov	r5, #0
   11e08:	ldrb	r0, [r8, #1]
   11e0c:	tst	r0, #2
   11e10:	beq	11e20 <__assert_fail@plt+0xd68>
   11e14:	mov	r0, r5
   11e18:	bl	11058 <toupper@plt>
   11e1c:	strb	r0, [r6, r5]
   11e20:	add	r5, r5, #1
   11e24:	add	r8, r8, #2
   11e28:	cmp	r5, #256	; 0x100
   11e2c:	bne	11e08 <__assert_fail@plt+0xd50>
   11e30:	b	11e68 <__assert_fail@plt+0xdb0>
   11e34:	bl	10f98 <__ctype_b_loc@plt>
   11e38:	ldr	r4, [r0]
   11e3c:	mov	r5, #0
   11e40:	ldrb	r0, [r4, #1]
   11e44:	tst	r0, #1
   11e48:	beq	11e58 <__assert_fail@plt+0xda0>
   11e4c:	mov	r0, r5
   11e50:	bl	10eb4 <tolower@plt>
   11e54:	strb	r0, [r6, r5]
   11e58:	add	r5, r5, #1
   11e5c:	add	r4, r4, #2
   11e60:	cmp	r5, #256	; 0x100
   11e64:	bne	11e40 <__assert_fail@plt+0xd88>
   11e68:	cmp	sl, #2
   11e6c:	beq	11ea4 <__assert_fail@plt+0xdec>
   11e70:	ldr	r0, [sp, #108]	; 0x6c
   11e74:	mvn	r1, #0
   11e78:	ldr	r0, [r0, #4]
   11e7c:	str	r0, [sp, #108]	; 0x6c
   11e80:	ldr	r0, [sp, #60]	; 0x3c
   11e84:	str	r1, [r0]
   11e88:	str	r1, [r0, #4]
   11e8c:	ldr	r0, [r7, #4]
   11e90:	ldr	r0, [r0, #4]
   11e94:	str	r0, [r7, #4]
   11e98:	ldr	r0, [sp, #56]	; 0x38
   11e9c:	str	r1, [r0]
   11ea0:	str	r1, [r0, #4]
   11ea4:	add	r0, sp, #104	; 0x68
   11ea8:	add	r1, sp, #144	; 0x90
   11eac:	bl	12dfc <__assert_fail@plt+0x1d44>
   11eb0:	mov	r5, r0
   11eb4:	mov	r0, r7
   11eb8:	mov	r1, r9
   11ebc:	bl	12dfc <__assert_fail@plt+0x1d44>
   11ec0:	ldr	r1, [sp, #144]	; 0x90
   11ec4:	ldr	sl, [fp, #-36]	; 0xffffffdc
   11ec8:	cmp	r1, #0
   11ecc:	cmpeq	sl, #1
   11ed0:	beq	11dfc <__assert_fail@plt+0xd44>
   11ed4:	cmp	r1, #1
   11ed8:	cmpeq	sl, #0
   11edc:	beq	11e34 <__assert_fail@plt+0xd7c>
   11ee0:	cmn	r5, #1
   11ee4:	cmnne	r0, #1
   11ee8:	bne	11df4 <__assert_fail@plt+0xd3c>
   11eec:	cmn	r5, #1
   11ef0:	beq	11f34 <__assert_fail@plt+0xe7c>
   11ef4:	movw	r0, #37212	; 0x915c
   11ef8:	movt	r0, #2
   11efc:	ldrb	r0, [r0]
   11f00:	cmp	r0, #0
   11f04:	bne	11f34 <__assert_fail@plt+0xe7c>
   11f08:	movw	r0, #29912	; 0x74d8
   11f0c:	movw	r1, #29880	; 0x74b8
   11f10:	movw	r3, #29889	; 0x74c1
   11f14:	movw	r2, #1893	; 0x765
   11f18:	movt	r0, #1
   11f1c:	b	1225c <__assert_fail@plt+0x11a4>
   11f20:	movw	r0, #37212	; 0x915c
   11f24:	movt	r0, #2
   11f28:	ldrb	r0, [r0]
   11f2c:	cmp	r0, #0
   11f30:	beq	12248 <__assert_fail@plt+0x1190>
   11f34:	movw	r0, #37211	; 0x915b
   11f38:	movt	r0, #2
   11f3c:	ldrb	r0, [r0]
   11f40:	cmp	r0, #0
   11f44:	beq	11f68 <__assert_fail@plt+0xeb0>
   11f48:	movw	r2, #37214	; 0x915e
   11f4c:	mov	r0, r7
   11f50:	mov	r1, #0
   11f54:	movt	r2, #2
   11f58:	bl	12ac4 <__assert_fail@plt+0x1a0c>
   11f5c:	movw	r0, #12400	; 0x3070
   11f60:	movt	r0, #1
   11f64:	b	11be4 <__assert_fail@plt+0xb2c>
   11f68:	movw	r4, #37470	; 0x925e
   11f6c:	movw	r6, #45918	; 0xb35e
   11f70:	movw	r7, #37204	; 0x9154
   11f74:	movt	r4, #2
   11f78:	movt	r6, #2
   11f7c:	movt	r7, #2
   11f80:	mov	r0, r4
   11f84:	mov	r1, #8192	; 0x2000
   11f88:	bl	12d0c <__assert_fail@plt+0x1c54>
   11f8c:	cmp	r0, #0
   11f90:	beq	11fd4 <__assert_fail@plt+0xf1c>
   11f94:	mov	r5, r0
   11f98:	mov	r0, #0
   11f9c:	ldrb	r1, [r4, r0]
   11fa0:	ldrb	r1, [r6, r1]
   11fa4:	strb	r1, [r4, r0]
   11fa8:	add	r0, r0, #1
   11fac:	cmp	r5, r0
   11fb0:	bne	11f9c <__assert_fail@plt+0xee4>
   11fb4:	ldr	r3, [r7]
   11fb8:	mov	r0, r4
   11fbc:	mov	r1, #1
   11fc0:	mov	r2, r5
   11fc4:	bl	10ecc <fwrite_unlocked@plt>
   11fc8:	cmp	r0, r5
   11fcc:	beq	11f80 <__assert_fail@plt+0xec8>
   11fd0:	b	11c68 <__assert_fail@plt+0xbb0>
   11fd4:	mov	r0, #0
   11fd8:	mov	r6, #0
   11fdc:	bl	110ac <close@plt>
   11fe0:	cmp	r0, #0
   11fe4:	bne	1219c <__assert_fail@plt+0x10e4>
   11fe8:	mov	r0, r6
   11fec:	sub	sp, fp, #28
   11ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff4:	cmn	r0, #3
   11ff8:	bne	12044 <__assert_fail@plt+0xf8c>
   11ffc:	movw	r0, #37104	; 0x90f0
   12000:	movw	r2, #29589	; 0x7395
   12004:	mov	r1, #0
   12008:	movt	r0, #2
   1200c:	movt	r2, #1
   12010:	str	r1, [sp, #4]
   12014:	movw	r1, #29538	; 0x7362
   12018:	movt	r1, #1
   1201c:	ldr	r3, [r0]
   12020:	movw	r0, #37204	; 0x9154
   12024:	str	r2, [sp]
   12028:	movw	r2, #29575	; 0x7387
   1202c:	movt	r0, #2
   12030:	movt	r2, #1
   12034:	ldr	r0, [r0]
   12038:	bl	15738 <__assert_fail@plt+0x4680>
   1203c:	mov	r0, #0
   12040:	bl	10fa4 <exit@plt>
   12044:	cmn	r0, #2
   12048:	bne	1217c <__assert_fail@plt+0x10c4>
   1204c:	mov	r0, #0
   12050:	bl	111b8 <__assert_fail@plt+0x100>
   12054:	cmp	sl, #0
   12058:	bne	120f0 <__assert_fail@plt+0x1038>
   1205c:	movw	r1, #29602	; 0x73a2
   12060:	mov	r0, #0
   12064:	mov	r2, #5
   12068:	movt	r1, #1
   1206c:	bl	10ee4 <dcgettext@plt>
   12070:	mov	r2, r0
   12074:	mov	r0, #0
   12078:	mov	r1, #0
   1207c:	bl	10f50 <error@plt>
   12080:	b	1217c <__assert_fail@plt+0x10c4>
   12084:	movw	r1, #29755	; 0x743b
   12088:	mov	r0, #0
   1208c:	mov	r2, #5
   12090:	movt	r1, #1
   12094:	bl	10ee4 <dcgettext@plt>
   12098:	mov	r4, r0
   1209c:	ldr	r0, [r8]
   120a0:	add	r0, r0, r6
   120a4:	ldr	r0, [r5, r0, lsl #2]
   120a8:	bl	151d0 <__assert_fail@plt+0x4118>
   120ac:	mov	r3, r0
   120b0:	mov	r0, #0
   120b4:	mov	r1, #0
   120b8:	mov	r2, r4
   120bc:	bl	10f50 <error@plt>
   120c0:	cmp	sl, #2
   120c4:	bne	1217c <__assert_fail@plt+0x10c4>
   120c8:	movw	r0, #37192	; 0x9148
   120cc:	movw	r1, #29772	; 0x744c
   120d0:	movt	r0, #2
   120d4:	movt	r1, #1
   120d8:	b	12154 <__assert_fail@plt+0x109c>
   120dc:	nop	{0}
   120e0:	movweq	r0, #8448	; 0x2100
   120e4:	streq	r0, [r6, -r4, lsl #10]
   120e8:	bleq	294510 <stdout@@GLIBC_2.4+0x26b3bc>
   120ec:	svceq	0x000e0d0c
   120f0:	movw	r1, #29618	; 0x73b2
   120f4:	mov	r0, #0
   120f8:	mov	r2, #5
   120fc:	movt	r1, #1
   12100:	bl	10ee4 <dcgettext@plt>
   12104:	mov	r6, r0
   12108:	add	r0, r5, r4, lsl #2
   1210c:	ldr	r0, [r0, #-4]
   12110:	bl	151d0 <__assert_fail@plt+0x4118>
   12114:	mov	r3, r0
   12118:	mov	r0, #0
   1211c:	mov	r1, #0
   12120:	mov	r2, r6
   12124:	bl	10f50 <error@plt>
   12128:	movw	r0, #37211	; 0x915b
   1212c:	movw	r2, #29643	; 0x73cb
   12130:	movw	r1, #29711	; 0x740f
   12134:	movt	r0, #2
   12138:	movt	r2, #1
   1213c:	movt	r1, #1
   12140:	ldrb	r0, [r0]
   12144:	cmp	r0, #0
   12148:	movw	r0, #37192	; 0x9148
   1214c:	movt	r0, #2
   12150:	movne	r1, r2
   12154:	ldr	r4, [r0]
   12158:	mov	r0, #0
   1215c:	mov	r2, #5
   12160:	bl	10ee4 <dcgettext@plt>
   12164:	movw	r2, #32888	; 0x8078
   12168:	mov	r3, r0
   1216c:	mov	r0, r4
   12170:	mov	r1, #1
   12174:	movt	r2, #1
   12178:	bl	11028 <__fprintf_chk@plt>
   1217c:	mov	r0, #1
   12180:	bl	111b8 <__assert_fail@plt+0x100>
   12184:	movw	r1, #31915	; 0x7cab
   12188:	movt	r1, #1
   1218c:	b	121d0 <__assert_fail@plt+0x1118>
   12190:	movw	r1, #31318	; 0x7a56
   12194:	movt	r1, #1
   12198:	b	121d0 <__assert_fail@plt+0x1118>
   1219c:	bl	10fd4 <__errno_location@plt>
   121a0:	ldr	r4, [r0]
   121a4:	movw	r1, #29938	; 0x74f2
   121a8:	movt	r1, #1
   121ac:	b	11c78 <__assert_fail@plt+0xbc0>
   121b0:	movw	r1, #31370	; 0x7a8a
   121b4:	movt	r1, #1
   121b8:	b	121d0 <__assert_fail@plt+0x1118>
   121bc:	movw	r1, #31423	; 0x7abf
   121c0:	movt	r1, #1
   121c4:	b	121d0 <__assert_fail@plt+0x1118>
   121c8:	movw	r1, #31484	; 0x7afc
   121cc:	movt	r1, #1
   121d0:	mov	r0, #0
   121d4:	mov	r2, #5
   121d8:	bl	10ee4 <dcgettext@plt>
   121dc:	mov	r2, r0
   121e0:	mov	r0, #1
   121e4:	mov	r1, #0
   121e8:	bl	10f50 <error@plt>
   121ec:	movw	r0, #31963	; 0x7cdb
   121f0:	movw	r1, #29880	; 0x74b8
   121f4:	movw	r3, #32016	; 0x7d10
   121f8:	movw	r2, #1224	; 0x4c8
   121fc:	movt	r0, #1
   12200:	movt	r1, #1
   12204:	movt	r3, #1
   12208:	bl	110b8 <__assert_fail@plt>
   1220c:	bl	110a0 <abort@plt>
   12210:	movw	r1, #31580	; 0x7b5c
   12214:	movt	r1, #1
   12218:	b	121d0 <__assert_fail@plt+0x1118>
   1221c:	movw	r0, #31472	; 0x7af0
   12220:	movw	r1, #29880	; 0x74b8
   12224:	movw	r3, #32083	; 0x7d53
   12228:	movw	r2, #1377	; 0x561
   1222c:	movt	r0, #1
   12230:	movt	r1, #1
   12234:	movt	r3, #1
   12238:	bl	110b8 <__assert_fail@plt>
   1223c:	movw	r1, #32149	; 0x7d95
   12240:	movt	r1, #1
   12244:	b	121d0 <__assert_fail@plt+0x1118>
   12248:	movw	r0, #29854	; 0x749e
   1224c:	movw	r1, #29880	; 0x74b8
   12250:	movw	r3, #29889	; 0x74c1
   12254:	mov	r2, #1840	; 0x730
   12258:	movt	r0, #1
   1225c:	movt	r1, #1
   12260:	movt	r3, #1
   12264:	bl	110b8 <__assert_fail@plt>
   12268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1226c:	add	fp, sp, #28
   12270:	sub	sp, sp, #108	; 0x6c
   12274:	str	r1, [sp, #68]	; 0x44
   12278:	mov	r7, r0
   1227c:	bl	10fbc <strlen@plt>
   12280:	mov	r5, r0
   12284:	bl	15840 <__assert_fail@plt+0x4788>
   12288:	mov	r4, r0
   1228c:	str	r0, [fp, #-52]	; 0xffffffcc
   12290:	mov	r0, r5
   12294:	mov	r1, #1
   12298:	mov	r6, #1
   1229c:	bl	15b44 <__assert_fail@plt+0x4a8c>
   122a0:	mov	ip, r4
   122a4:	mov	lr, r0
   122a8:	mov	sl, #0
   122ac:	mov	r5, #0
   122b0:	str	r0, [fp, #-48]	; 0xffffffd0
   122b4:	str	r4, [fp, #-56]	; 0xffffffc8
   122b8:	str	r0, [fp, #-64]	; 0xffffffc0
   122bc:	ldrb	r0, [r7, r5]
   122c0:	cmp	r0, #92	; 0x5c
   122c4:	beq	122d4 <__assert_fail@plt+0x121c>
   122c8:	cmp	r0, #0
   122cc:	bne	12468 <__assert_fail@plt+0x13b0>
   122d0:	b	12478 <__assert_fail@plt+0x13c0>
   122d4:	strb	r6, [lr, sl]
   122d8:	add	r4, r5, #1
   122dc:	ldrb	r0, [r7, r4]
   122e0:	cmp	r0, #96	; 0x60
   122e4:	bgt	1233c <__assert_fail@plt+0x1284>
   122e8:	sub	r1, r0, #48	; 0x30
   122ec:	cmp	r1, #8
   122f0:	bcs	123a8 <__assert_fail@plt+0x12f0>
   122f4:	add	r9, r5, #2
   122f8:	ldrb	r0, [r7, r9]
   122fc:	sub	r0, r0, #48	; 0x30
   12300:	cmp	r0, #7
   12304:	bhi	12384 <__assert_fail@plt+0x12cc>
   12308:	uxtb	r1, r1
   1230c:	add	r5, r5, #3
   12310:	add	r8, r0, r1, lsl #3
   12314:	ldrb	r0, [r7, r5]
   12318:	sub	r0, r0, #48	; 0x30
   1231c:	cmp	r0, #7
   12320:	bhi	1244c <__assert_fail@plt+0x1394>
   12324:	uxtb	r1, r8
   12328:	add	r0, r0, r1, lsl #3
   1232c:	cmp	r0, #255	; 0xff
   12330:	bgt	12408 <__assert_fail@plt+0x1350>
   12334:	mov	r5, r9
   12338:	b	12464 <__assert_fail@plt+0x13ac>
   1233c:	cmp	r0, #109	; 0x6d
   12340:	ble	1238c <__assert_fail@plt+0x12d4>
   12344:	sub	r1, r0, #110	; 0x6e
   12348:	cmp	r1, #8
   1234c:	bhi	12464 <__assert_fail@plt+0x13ac>
   12350:	add	r2, pc, #0
   12354:	ldr	pc, [r2, r1, lsl #2]
   12358:	andeq	r2, r1, ip, ror r3
   1235c:	andeq	r2, r1, r4, ror #8
   12360:	andeq	r2, r1, r4, ror #8
   12364:	andeq	r2, r1, r4, ror #8
   12368:	strdeq	r2, [r1], -r0
   1236c:	andeq	r2, r1, r4, ror #8
   12370:	andeq	r2, r1, r0, lsl #8
   12374:	andeq	r2, r1, r4, ror #8
   12378:	strdeq	r2, [r1], -r8
   1237c:	mov	r0, #10
   12380:	b	12464 <__assert_fail@plt+0x13ac>
   12384:	mov	r0, r1
   12388:	b	12464 <__assert_fail@plt+0x13ac>
   1238c:	cmp	r0, #97	; 0x61
   12390:	beq	12460 <__assert_fail@plt+0x13a8>
   12394:	cmp	r0, #98	; 0x62
   12398:	beq	12458 <__assert_fail@plt+0x13a0>
   1239c:	cmp	r0, #102	; 0x66
   123a0:	moveq	r0, #12
   123a4:	b	12464 <__assert_fail@plt+0x13ac>
   123a8:	cmp	r0, #0
   123ac:	bne	12464 <__assert_fail@plt+0x13ac>
   123b0:	movw	r1, #30425	; 0x76d9
   123b4:	mov	r0, #0
   123b8:	mov	r2, #5
   123bc:	movt	r1, #1
   123c0:	bl	10ee4 <dcgettext@plt>
   123c4:	mov	r2, r0
   123c8:	mov	r0, #0
   123cc:	mov	r1, #0
   123d0:	bl	10f50 <error@plt>
   123d4:	ldr	lr, [fp, #-64]	; 0xffffffc0
   123d8:	ldr	ip, [fp, #-56]	; 0xffffffc8
   123dc:	mov	r0, #0
   123e0:	sub	r5, r5, #1
   123e4:	strb	r0, [lr, sl]
   123e8:	mov	r0, #92	; 0x5c
   123ec:	b	12464 <__assert_fail@plt+0x13ac>
   123f0:	mov	r0, #13
   123f4:	b	12464 <__assert_fail@plt+0x13ac>
   123f8:	mov	r0, #11
   123fc:	b	12464 <__assert_fail@plt+0x13ac>
   12400:	mov	r0, #9
   12404:	b	12464 <__assert_fail@plt+0x13ac>
   12408:	movw	r1, #30325	; 0x7675
   1240c:	mov	r0, #0
   12410:	mov	r2, #5
   12414:	movt	r1, #1
   12418:	bl	10ee4 <dcgettext@plt>
   1241c:	mov	r2, r0
   12420:	ldrb	r0, [r7, r9]
   12424:	ldrb	r1, [r7, r5]
   12428:	ldrb	r3, [r7, r4]
   1242c:	stm	sp, {r0, r1, r3}
   12430:	str	r0, [sp, #12]
   12434:	str	r1, [sp, #16]
   12438:	mov	r0, #0
   1243c:	mov	r1, #0
   12440:	bl	10f50 <error@plt>
   12444:	ldr	lr, [fp, #-64]	; 0xffffffc0
   12448:	ldr	ip, [fp, #-56]	; 0xffffffc8
   1244c:	mov	r5, r4
   12450:	mov	r0, r8
   12454:	b	12464 <__assert_fail@plt+0x13ac>
   12458:	mov	r0, #8
   1245c:	b	12464 <__assert_fail@plt+0x13ac>
   12460:	mov	r0, #7
   12464:	add	r5, r5, #1
   12468:	strb	r0, [ip, sl]
   1246c:	add	r5, r5, #1
   12470:	add	sl, sl, #1
   12474:	b	122bc <__assert_fail@plt+0x1204>
   12478:	ldr	r5, [sp, #68]	; 0x44
   1247c:	mov	r6, #0
   12480:	cmp	sl, #3
   12484:	str	sl, [fp, #-44]	; 0xffffffd4
   12488:	bcc	12888 <__assert_fail@plt+0x17d0>
   1248c:	sub	r0, sl, #1
   12490:	mov	r9, #2
   12494:	mov	r6, #0
   12498:	str	r0, [sp, #60]	; 0x3c
   1249c:	mvn	r0, #2
   124a0:	sub	r0, r0, ip
   124a4:	str	r0, [sp, #24]
   124a8:	add	r0, lr, #3
   124ac:	str	r0, [sp, #36]	; 0x24
   124b0:	add	r0, ip, #3
   124b4:	str	r0, [sp, #32]
   124b8:	add	r0, ip, #1
   124bc:	str	r0, [sp, #56]	; 0x38
   124c0:	add	r0, lr, #1
   124c4:	str	r0, [sp, #52]	; 0x34
   124c8:	sub	r0, sl, #1
   124cc:	str	r0, [sp, #64]	; 0x40
   124d0:	add	r0, ip, #2
   124d4:	str	r0, [sp, #28]
   124d8:	ldrb	r8, [ip, r6]
   124dc:	cmp	r8, #91	; 0x5b
   124e0:	bne	1261c <__assert_fail@plt+0x1564>
   124e4:	ldrb	r0, [lr, r6]
   124e8:	cmp	r0, #0
   124ec:	bne	1261c <__assert_fail@plt+0x1564>
   124f0:	add	r0, r6, #1
   124f4:	ldrb	r1, [ip, r0]
   124f8:	cmp	r1, #61	; 0x3d
   124fc:	str	r1, [fp, #-60]	; 0xffffffc4
   12500:	beq	12518 <__assert_fail@plt+0x1460>
   12504:	cmp	r1, #58	; 0x3a
   12508:	bne	125a4 <__assert_fail@plt+0x14ec>
   1250c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12510:	ldrb	r0, [r1, r0]
   12514:	b	1251c <__assert_fail@plt+0x1464>
   12518:	ldrb	r0, [lr, r0]
   1251c:	cmp	r0, #0
   12520:	bne	125a4 <__assert_fail@plt+0x14ec>
   12524:	ldr	r0, [sp, #64]	; 0x40
   12528:	cmp	r0, r9
   1252c:	bls	125a4 <__assert_fail@plt+0x14ec>
   12530:	ldr	r1, [sp, #60]	; 0x3c
   12534:	ldr	r2, [sp, #56]	; 0x38
   12538:	ldr	r3, [sp, #52]	; 0x34
   1253c:	add	r4, r6, #2
   12540:	add	r0, r6, #3
   12544:	mvn	r5, #1
   12548:	add	r7, r2, r9
   1254c:	ldr	lr, [fp, #-60]	; 0xffffffc4
   12550:	ldrb	r7, [r7, #-1]
   12554:	cmp	r7, lr
   12558:	bne	12584 <__assert_fail@plt+0x14cc>
   1255c:	ldrb	r7, [r2, r9]
   12560:	cmp	r7, #93	; 0x5d
   12564:	bne	12584 <__assert_fail@plt+0x14cc>
   12568:	add	r7, r3, r9
   1256c:	ldrb	r7, [r7, #-1]
   12570:	cmp	r7, #0
   12574:	bne	12584 <__assert_fail@plt+0x14cc>
   12578:	ldrb	r7, [r3, r9]
   1257c:	cmp	r7, #0
   12580:	beq	12724 <__assert_fail@plt+0x166c>
   12584:	sub	r1, r1, #1
   12588:	add	r2, r2, #1
   1258c:	add	r3, r3, #1
   12590:	sub	r4, r4, #1
   12594:	sub	r0, r0, #1
   12598:	sub	r5, r5, #1
   1259c:	cmp	r9, r1
   125a0:	bne	12548 <__assert_fail@plt+0x1490>
   125a4:	add	r0, r6, #2
   125a8:	cmp	r0, sl
   125ac:	bcs	12a44 <__assert_fail@plt+0x198c>
   125b0:	ldrb	r1, [ip, r0]
   125b4:	ldr	lr, [fp, #-64]	; 0xffffffc0
   125b8:	cmp	r1, #42	; 0x2a
   125bc:	bne	12618 <__assert_fail@plt+0x1560>
   125c0:	ldrb	r0, [lr, r0]
   125c4:	cmp	r0, #0
   125c8:	bne	12618 <__assert_fail@plt+0x1560>
   125cc:	add	r0, r6, #3
   125d0:	cmp	r0, sl
   125d4:	bcs	12618 <__assert_fail@plt+0x1560>
   125d8:	ldr	r1, [sp, #36]	; 0x24
   125dc:	ldr	r2, [sp, #32]
   125e0:	sub	r3, sl, r6
   125e4:	mov	r5, #0
   125e8:	sub	r3, r3, #3
   125ec:	add	r1, r1, r6
   125f0:	add	r2, r2, r6
   125f4:	ldrb	r7, [r1, r5]
   125f8:	cmp	r7, #0
   125fc:	bne	12618 <__assert_fail@plt+0x1560>
   12600:	ldrb	r7, [r2, r5]
   12604:	cmp	r7, #93	; 0x5d
   12608:	beq	126b4 <__assert_fail@plt+0x15fc>
   1260c:	add	r5, r5, #1
   12610:	cmp	r3, r5
   12614:	bne	125f4 <__assert_fail@plt+0x153c>
   12618:	ldr	r5, [sp, #68]	; 0x44
   1261c:	add	r4, r6, #1
   12620:	ldrb	r0, [ip, r4]
   12624:	cmp	r0, #45	; 0x2d
   12628:	bne	12638 <__assert_fail@plt+0x1580>
   1262c:	ldrb	r0, [lr, r4]
   12630:	cmp	r0, #0
   12634:	beq	12660 <__assert_fail@plt+0x15a8>
   12638:	mov	r0, r5
   1263c:	mov	r1, r8
   12640:	bl	132d0 <__assert_fail@plt+0x2218>
   12644:	ldr	lr, [fp, #-64]	; 0xffffffc0
   12648:	mov	r6, r4
   1264c:	ldr	ip, [fp, #-56]	; 0xffffffc8
   12650:	add	r9, r6, #2
   12654:	cmp	r9, sl
   12658:	bcc	124d8 <__assert_fail@plt+0x1420>
   1265c:	b	12888 <__assert_fail@plt+0x17d0>
   12660:	add	r0, r6, ip
   12664:	ldrb	r5, [r0, #2]
   12668:	cmp	r5, r8
   1266c:	bcc	128cc <__assert_fail@plt+0x1814>
   12670:	mov	r0, #24
   12674:	bl	15840 <__assert_fail@plt+0x4788>
   12678:	strb	r5, [r0, #9]
   1267c:	ldr	r5, [sp, #68]	; 0x44
   12680:	mov	r1, #0
   12684:	mov	r2, #1
   12688:	strb	r8, [r0, #8]
   1268c:	str	r2, [r0]
   12690:	str	r1, [r0, #4]
   12694:	ldr	r1, [r5, #4]
   12698:	cmp	r1, #0
   1269c:	beq	12a64 <__assert_fail@plt+0x19ac>
   126a0:	ldr	lr, [fp, #-64]	; 0xffffffc0
   126a4:	str	r0, [r1, #4]
   126a8:	str	r0, [r5, #4]
   126ac:	add	r6, r6, #3
   126b0:	b	1264c <__assert_fail@plt+0x1594>
   126b4:	cmp	r5, #0
   126b8:	beq	127ec <__assert_fail@plt+0x1734>
   126bc:	mov	r8, ip
   126c0:	mov	r1, #0
   126c4:	mov	r2, #10
   126c8:	sub	r3, fp, #40	; 0x28
   126cc:	ldrb	r0, [r8, r0]!
   126d0:	str	r1, [sp]
   126d4:	sub	r1, fp, #32
   126d8:	cmp	r0, #48	; 0x30
   126dc:	mov	r0, r8
   126e0:	movweq	r2, #8
   126e4:	bl	15cb0 <__assert_fail@plt+0x4bf8>
   126e8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   126ec:	cmp	r0, #0
   126f0:	bne	12944 <__assert_fail@plt+0x188c>
   126f4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   126f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   126fc:	and	r0, r2, r3
   12700:	cmn	r0, #1
   12704:	beq	12944 <__assert_fail@plt+0x188c>
   12708:	ldr	r0, [sp, #24]
   1270c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12710:	sub	r0, r0, r6
   12714:	add	r0, r7, r0
   12718:	cmp	r0, r5
   1271c:	beq	12800 <__assert_fail@plt+0x1748>
   12720:	b	12944 <__assert_fail@plt+0x188c>
   12724:	subs	r1, r9, r4
   12728:	str	r1, [sp, #40]	; 0x28
   1272c:	beq	1292c <__assert_fail@plt+0x1874>
   12730:	ldr	r1, [sp, #28]
   12734:	add	r1, r1, r6
   12738:	str	r1, [sp, #44]	; 0x2c
   1273c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12740:	cmp	r1, #58	; 0x3a
   12744:	bne	127ac <__assert_fail@plt+0x16f4>
   12748:	mov	r7, #0
   1274c:	movw	r0, #32560	; 0x7f30
   12750:	ldr	r2, [sp, #40]	; 0x28
   12754:	movt	r0, #1
   12758:	ldr	r1, [r0, r7, lsl #2]
   1275c:	ldr	r0, [sp, #44]	; 0x2c
   12760:	str	r1, [sp, #48]	; 0x30
   12764:	bl	11094 <strncmp@plt>
   12768:	cmp	r0, #0
   1276c:	bne	12784 <__assert_fail@plt+0x16cc>
   12770:	ldr	r0, [sp, #48]	; 0x30
   12774:	bl	10fbc <strlen@plt>
   12778:	sub	r0, r9, r0
   1277c:	cmp	r0, r4
   12780:	beq	12830 <__assert_fail@plt+0x1778>
   12784:	add	r7, r7, #1
   12788:	cmp	r7, #12
   1278c:	bne	1274c <__assert_fail@plt+0x1694>
   12790:	sub	r0, fp, #52	; 0x34
   12794:	mov	r1, r9
   12798:	bl	130ac <__assert_fail@plt+0x1ff4>
   1279c:	ldr	ip, [fp, #-56]	; 0xffffffc8
   127a0:	cmp	r0, #0
   127a4:	bne	125a4 <__assert_fail@plt+0x14ec>
   127a8:	b	129b8 <__assert_fail@plt+0x1900>
   127ac:	cmp	r9, r0
   127b0:	bne	12814 <__assert_fail@plt+0x175c>
   127b4:	mov	r0, #24
   127b8:	bl	15840 <__assert_fail@plt+0x4788>
   127bc:	mov	r2, #3
   127c0:	mov	r1, #0
   127c4:	str	r2, [r0]
   127c8:	str	r1, [r0, #4]
   127cc:	ldr	r1, [sp, #44]	; 0x2c
   127d0:	ldr	r2, [sp, #68]	; 0x44
   127d4:	ldrb	r1, [r1]
   127d8:	strb	r1, [r0, #8]
   127dc:	ldr	r1, [r2, #4]
   127e0:	cmp	r1, #0
   127e4:	bne	12864 <__assert_fail@plt+0x17ac>
   127e8:	b	12a84 <__assert_fail@plt+0x19cc>
   127ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   127f0:	mov	r2, #0
   127f4:	mov	r3, #0
   127f8:	str	r2, [fp, #-36]	; 0xffffffdc
   127fc:	str	r2, [fp, #-40]	; 0xffffffd8
   12800:	ldr	r0, [sp, #68]	; 0x44
   12804:	bl	13264 <__assert_fail@plt+0x21ac>
   12808:	add	r0, r6, r5
   1280c:	add	r6, r0, #4
   12810:	b	12870 <__assert_fail@plt+0x17b8>
   12814:	sub	r0, fp, #52	; 0x34
   12818:	mov	r1, r9
   1281c:	bl	130ac <__assert_fail@plt+0x1ff4>
   12820:	ldr	ip, [fp, #-56]	; 0xffffffc8
   12824:	cmp	r0, #0
   12828:	bne	125a4 <__assert_fail@plt+0x14ec>
   1282c:	b	129fc <__assert_fail@plt+0x1944>
   12830:	movw	r0, #9999	; 0x270f
   12834:	cmp	r7, r0
   12838:	beq	12790 <__assert_fail@plt+0x16d8>
   1283c:	mov	r0, #24
   12840:	bl	15840 <__assert_fail@plt+0x4788>
   12844:	ldr	r2, [sp, #68]	; 0x44
   12848:	mov	r1, #2
   1284c:	str	r1, [r0]
   12850:	mov	r1, #0
   12854:	stmib	r0, {r1, r7}
   12858:	ldr	r1, [r2, #4]
   1285c:	cmp	r1, #0
   12860:	beq	12aa4 <__assert_fail@plt+0x19ec>
   12864:	sub	r6, r9, r5
   12868:	str	r0, [r1, #4]
   1286c:	str	r0, [r2, #4]
   12870:	ldr	ip, [fp, #-56]	; 0xffffffc8
   12874:	ldr	lr, [fp, #-64]	; 0xffffffc0
   12878:	ldr	r5, [sp, #68]	; 0x44
   1287c:	add	r9, r6, #2
   12880:	cmp	r9, sl
   12884:	bcc	124d8 <__assert_fail@plt+0x1420>
   12888:	mov	r7, #1
   1288c:	cmp	r6, sl
   12890:	bcs	128b0 <__assert_fail@plt+0x17f8>
   12894:	ldrb	r1, [ip, r6]
   12898:	mov	r0, r5
   1289c:	bl	132d0 <__assert_fail@plt+0x2218>
   128a0:	ldr	ip, [fp, #-56]	; 0xffffffc8
   128a4:	add	r6, r6, #1
   128a8:	cmp	sl, r6
   128ac:	bne	12894 <__assert_fail@plt+0x17dc>
   128b0:	mov	r0, ip
   128b4:	bl	137bc <__assert_fail@plt+0x2704>
   128b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128bc:	bl	137bc <__assert_fail@plt+0x2704>
   128c0:	mov	r0, r7
   128c4:	sub	sp, fp, #28
   128c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128cc:	mov	r0, r8
   128d0:	bl	1332c <__assert_fail@plt+0x2274>
   128d4:	mov	r6, r0
   128d8:	mov	r0, r5
   128dc:	bl	1332c <__assert_fail@plt+0x2274>
   128e0:	movw	r1, #31123	; 0x7993
   128e4:	mov	r5, r0
   128e8:	mov	r0, #0
   128ec:	mov	r2, #5
   128f0:	mov	r7, #0
   128f4:	movt	r1, #1
   128f8:	bl	10ee4 <dcgettext@plt>
   128fc:	mov	r2, r0
   12900:	mov	r0, #0
   12904:	mov	r1, #0
   12908:	mov	r3, r6
   1290c:	str	r5, [sp]
   12910:	bl	10f50 <error@plt>
   12914:	mov	r0, r6
   12918:	bl	137bc <__assert_fail@plt+0x2704>
   1291c:	mov	r0, r5
   12920:	bl	137bc <__assert_fail@plt+0x2704>
   12924:	ldr	ip, [fp, #-56]	; 0xffffffc8
   12928:	b	128b0 <__assert_fail@plt+0x17f8>
   1292c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12930:	cmp	r0, #58	; 0x3a
   12934:	bne	12990 <__assert_fail@plt+0x18d8>
   12938:	movw	r1, #30490	; 0x771a
   1293c:	movt	r1, #1
   12940:	b	12998 <__assert_fail@plt+0x18e0>
   12944:	mov	r0, r8
   12948:	mov	r1, r5
   1294c:	bl	13128 <__assert_fail@plt+0x2070>
   12950:	movw	r1, #31012	; 0x7924
   12954:	mov	r5, r0
   12958:	mov	r0, #0
   1295c:	mov	r2, #5
   12960:	mov	r7, #0
   12964:	movt	r1, #1
   12968:	bl	10ee4 <dcgettext@plt>
   1296c:	mov	r6, r0
   12970:	mov	r0, r5
   12974:	bl	151d0 <__assert_fail@plt+0x4118>
   12978:	mov	r3, r0
   1297c:	mov	r0, #0
   12980:	mov	r1, #0
   12984:	mov	r2, r6
   12988:	bl	10f50 <error@plt>
   1298c:	b	1291c <__assert_fail@plt+0x1864>
   12990:	movw	r1, #30526	; 0x773e
   12994:	movt	r1, #1
   12998:	mov	r0, #0
   1299c:	mov	r2, #5
   129a0:	bl	10ee4 <dcgettext@plt>
   129a4:	mov	r2, r0
   129a8:	mov	r0, #0
   129ac:	mov	r1, #0
   129b0:	bl	10f50 <error@plt>
   129b4:	b	12a3c <__assert_fail@plt+0x1984>
   129b8:	ldr	r0, [sp, #44]	; 0x2c
   129bc:	ldr	r1, [sp, #40]	; 0x28
   129c0:	bl	13128 <__assert_fail@plt+0x2070>
   129c4:	movw	r1, #30569	; 0x7769
   129c8:	mov	r5, r0
   129cc:	mov	r0, #0
   129d0:	mov	r2, #5
   129d4:	movt	r1, #1
   129d8:	bl	10ee4 <dcgettext@plt>
   129dc:	mov	r6, r0
   129e0:	mov	r0, r5
   129e4:	bl	151d0 <__assert_fail@plt+0x4118>
   129e8:	mov	r3, r0
   129ec:	mov	r0, #0
   129f0:	mov	r1, #0
   129f4:	mov	r2, r6
   129f8:	b	12a30 <__assert_fail@plt+0x1978>
   129fc:	ldr	r0, [sp, #44]	; 0x2c
   12a00:	ldr	r1, [sp, #40]	; 0x28
   12a04:	bl	13128 <__assert_fail@plt+0x2070>
   12a08:	movw	r1, #30596	; 0x7784
   12a0c:	mov	r5, r0
   12a10:	mov	r0, #0
   12a14:	mov	r2, #5
   12a18:	movt	r1, #1
   12a1c:	bl	10ee4 <dcgettext@plt>
   12a20:	mov	r2, r0
   12a24:	mov	r0, #0
   12a28:	mov	r1, #0
   12a2c:	mov	r3, r5
   12a30:	bl	10f50 <error@plt>
   12a34:	mov	r0, r5
   12a38:	bl	137bc <__assert_fail@plt+0x2704>
   12a3c:	mov	r7, #0
   12a40:	b	12924 <__assert_fail@plt+0x186c>
   12a44:	movw	r0, #30893	; 0x78ad
   12a48:	movw	r1, #29880	; 0x74b8
   12a4c:	movw	r3, #30917	; 0x78c5
   12a50:	mov	r2, #784	; 0x310
   12a54:	movt	r0, #1
   12a58:	movt	r1, #1
   12a5c:	movt	r3, #1
   12a60:	bl	110b8 <__assert_fail@plt>
   12a64:	movw	r0, #30653	; 0x77bd
   12a68:	movw	r1, #29880	; 0x74b8
   12a6c:	movw	r3, #31190	; 0x79d6
   12a70:	movw	r2, #679	; 0x2a7
   12a74:	movt	r0, #1
   12a78:	movt	r1, #1
   12a7c:	movt	r3, #1
   12a80:	bl	110b8 <__assert_fail@plt>
   12a84:	movw	r0, #30653	; 0x77bd
   12a88:	movw	r1, #29880	; 0x74b8
   12a8c:	movw	r3, #30826	; 0x786a
   12a90:	movw	r2, #743	; 0x2e7
   12a94:	movt	r0, #1
   12a98:	movt	r1, #1
   12a9c:	movt	r3, #1
   12aa0:	bl	110b8 <__assert_fail@plt>
   12aa4:	movw	r0, #30653	; 0x77bd
   12aa8:	movw	r1, #29880	; 0x74b8
   12aac:	movw	r3, #30664	; 0x77c8
   12ab0:	movw	r2, #701	; 0x2bd
   12ab4:	movt	r0, #1
   12ab8:	movt	r1, #1
   12abc:	movt	r3, #1
   12ac0:	bl	110b8 <__assert_fail@plt>
   12ac4:	push	{r4, r5, r6, r7, fp, lr}
   12ac8:	add	fp, sp, #16
   12acc:	mov	r5, r1
   12ad0:	mov	r6, r0
   12ad4:	mvn	r1, #0
   12ad8:	mvn	r0, #1
   12adc:	mov	r4, r2
   12ae0:	strd	r0, [r6, #8]
   12ae4:	mov	r0, r6
   12ae8:	mov	r1, #0
   12aec:	bl	12dfc <__assert_fail@plt+0x1d44>
   12af0:	cmn	r0, #1
   12af4:	beq	12b14 <__assert_fail@plt+0x1a5c>
   12af8:	mov	r7, #1
   12afc:	strb	r7, [r4, r0]
   12b00:	mov	r0, r6
   12b04:	mov	r1, #0
   12b08:	bl	12dfc <__assert_fail@plt+0x1d44>
   12b0c:	cmn	r0, #1
   12b10:	bne	12afc <__assert_fail@plt+0x1a44>
   12b14:	cmp	r5, #0
   12b18:	popeq	{r4, r5, r6, r7, fp, pc}
   12b1c:	vmov.i8	q8, #1	; 0x01
   12b20:	mov	r0, #0
   12b24:	add	r1, r4, r0
   12b28:	add	r0, r0, #16
   12b2c:	vld1.8	{d18-d19}, [r1]
   12b30:	cmp	r0, #256	; 0x100
   12b34:	veor	q9, q9, q8
   12b38:	vst1.8	{d18-d19}, [r1]
   12b3c:	bne	12b24 <__assert_fail@plt+0x1a6c>
   12b40:	pop	{r4, r5, r6, r7, fp, pc}
   12b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b48:	add	fp, sp, #28
   12b4c:	sub	sp, sp, #4
   12b50:	movw	r5, #37470	; 0x925e
   12b54:	movw	sl, #37214	; 0x915e
   12b58:	mov	r8, r0
   12b5c:	mvn	r7, #-2147483648	; 0x80000000
   12b60:	mov	r0, #0
   12b64:	mov	r6, #0
   12b68:	movt	r5, #2
   12b6c:	movt	sl, #2
   12b70:	cmp	r0, r6
   12b74:	bcc	12b94 <__assert_fail@plt+0x1adc>
   12b78:	mov	r0, r5
   12b7c:	mov	r1, #8192	; 0x2000
   12b80:	blx	r8
   12b84:	cmp	r0, #0
   12b88:	beq	12cd8 <__assert_fail@plt+0x1c20>
   12b8c:	mov	r6, r0
   12b90:	mov	r0, #0
   12b94:	cmn	r7, #-2147483647	; 0x80000001
   12b98:	bne	12c18 <__assert_fail@plt+0x1b60>
   12b9c:	cmp	r6, r0
   12ba0:	mov	r4, r0
   12ba4:	bls	12bc8 <__assert_fail@plt+0x1b10>
   12ba8:	mov	r4, r0
   12bac:	ldrb	r1, [r5, r4]
   12bb0:	ldrb	r1, [sl, r1]
   12bb4:	cmp	r1, #0
   12bb8:	bne	12bc8 <__assert_fail@plt+0x1b10>
   12bbc:	add	r4, r4, #2
   12bc0:	cmp	r4, r6
   12bc4:	bcc	12bac <__assert_fail@plt+0x1af4>
   12bc8:	cmp	r4, r6
   12bcc:	bne	12be4 <__assert_fail@plt+0x1b2c>
   12bd0:	sub	r4, r6, #1
   12bd4:	ldrb	r1, [r5, r4]
   12bd8:	ldrb	r1, [sl, r1]
   12bdc:	cmp	r1, #0
   12be0:	moveq	r4, r6
   12be4:	cmp	r4, r6
   12be8:	bcs	12c24 <__assert_fail@plt+0x1b6c>
   12bec:	ldrb	r9, [r5, r4]
   12bf0:	sub	r1, r4, r0
   12bf4:	cmp	r4, #0
   12bf8:	add	r7, r1, #1
   12bfc:	beq	12c10 <__assert_fail@plt+0x1b58>
   12c00:	add	r2, r4, r5
   12c04:	ldrb	r2, [r2, #-1]
   12c08:	cmp	r2, r9
   12c0c:	moveq	r7, r1
   12c10:	add	r4, r4, #1
   12c14:	b	12c2c <__assert_fail@plt+0x1b74>
   12c18:	mov	r9, r7
   12c1c:	mov	r4, r0
   12c20:	b	12c68 <__assert_fail@plt+0x1bb0>
   12c24:	sub	r7, r6, r0
   12c28:	mvn	r9, #-2147483648	; 0x80000000
   12c2c:	cmp	r7, #0
   12c30:	beq	12c58 <__assert_fail@plt+0x1ba0>
   12c34:	movw	r1, #37204	; 0x9154
   12c38:	add	r0, r5, r0
   12c3c:	mov	r2, r7
   12c40:	movt	r1, #2
   12c44:	ldr	r3, [r1]
   12c48:	mov	r1, #1
   12c4c:	bl	10ecc <fwrite_unlocked@plt>
   12c50:	cmp	r0, r7
   12c54:	bne	12ce0 <__assert_fail@plt+0x1c28>
   12c58:	cmn	r9, #-2147483647	; 0x80000001
   12c5c:	mov	r0, r4
   12c60:	mvn	r7, #-2147483648	; 0x80000000
   12c64:	beq	12b70 <__assert_fail@plt+0x1ab8>
   12c68:	cmp	r4, r6
   12c6c:	mov	r0, r4
   12c70:	mov	r7, r9
   12c74:	bcs	12b70 <__assert_fail@plt+0x1ab8>
   12c78:	ldrb	r0, [r5, r4]
   12c7c:	mov	r1, #1
   12c80:	cmp	r9, r0
   12c84:	bne	12cb0 <__assert_fail@plt+0x1bf8>
   12c88:	add	r0, r4, #1
   12c8c:	mov	r1, r0
   12c90:	cmp	r6, r0
   12c94:	beq	12cb8 <__assert_fail@plt+0x1c00>
   12c98:	ldrb	r2, [r5, r1]
   12c9c:	add	r0, r1, #1
   12ca0:	cmp	r9, r2
   12ca4:	beq	12c8c <__assert_fail@plt+0x1bd4>
   12ca8:	sub	r0, r0, #1
   12cac:	b	12cbc <__assert_fail@plt+0x1c04>
   12cb0:	mov	r0, r4
   12cb4:	b	12cc8 <__assert_fail@plt+0x1c10>
   12cb8:	mov	r0, r6
   12cbc:	cmp	r1, r6
   12cc0:	mov	r1, #0
   12cc4:	movwcc	r1, #1
   12cc8:	cmp	r1, #0
   12ccc:	mvnne	r9, #-2147483648	; 0x80000000
   12cd0:	mov	r7, r9
   12cd4:	b	12b70 <__assert_fail@plt+0x1ab8>
   12cd8:	sub	sp, fp, #28
   12cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ce0:	bl	10fd4 <__errno_location@plt>
   12ce4:	movw	r1, #29842	; 0x7492
   12ce8:	ldr	r4, [r0]
   12cec:	mov	r0, #0
   12cf0:	mov	r2, #5
   12cf4:	movt	r1, #1
   12cf8:	bl	10ee4 <dcgettext@plt>
   12cfc:	mov	r2, r0
   12d00:	mov	r0, #1
   12d04:	mov	r1, r4
   12d08:	bl	10f50 <error@plt>
   12d0c:	push	{r4, sl, fp, lr}
   12d10:	add	fp, sp, #8
   12d14:	mov	r2, r1
   12d18:	mov	r1, r0
   12d1c:	mov	r0, #0
   12d20:	bl	1531c <__assert_fail@plt+0x4264>
   12d24:	cmn	r0, #1
   12d28:	popne	{r4, sl, fp, pc}
   12d2c:	bl	10fd4 <__errno_location@plt>
   12d30:	movw	r1, #32254	; 0x7dfe
   12d34:	ldr	r4, [r0]
   12d38:	mov	r0, #0
   12d3c:	mov	r2, #5
   12d40:	movt	r1, #1
   12d44:	bl	10ee4 <dcgettext@plt>
   12d48:	mov	r2, r0
   12d4c:	mov	r0, #1
   12d50:	mov	r1, r4
   12d54:	bl	10f50 <error@plt>
   12d58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d5c:	add	fp, sp, #24
   12d60:	movw	r7, #45662	; 0xb25e
   12d64:	mov	r4, r1
   12d68:	mov	r5, r0
   12d6c:	add	r8, r0, #1
   12d70:	movt	r7, #2
   12d74:	mov	r0, r5
   12d78:	mov	r1, r4
   12d7c:	bl	12d0c <__assert_fail@plt+0x1c54>
   12d80:	cmp	r0, #0
   12d84:	beq	12df4 <__assert_fail@plt+0x1d3c>
   12d88:	mov	r1, r0
   12d8c:	mov	r0, #0
   12d90:	ldrb	r2, [r5, r0]
   12d94:	ldrb	r2, [r7, r2]
   12d98:	cmp	r2, #0
   12d9c:	bne	12db0 <__assert_fail@plt+0x1cf8>
   12da0:	add	r0, r0, #1
   12da4:	cmp	r1, r0
   12da8:	bne	12d90 <__assert_fail@plt+0x1cd8>
   12dac:	mov	r0, r1
   12db0:	add	r2, r0, #1
   12db4:	cmp	r2, r1
   12db8:	bcs	12de8 <__assert_fail@plt+0x1d30>
   12dbc:	mvn	r3, r0
   12dc0:	add	r2, r8, r0
   12dc4:	add	r1, r3, r1
   12dc8:	ldrb	r3, [r2]
   12dcc:	add	r2, r2, #1
   12dd0:	ldrb	r6, [r7, r3]
   12dd4:	cmp	r6, #0
   12dd8:	strbeq	r3, [r5, r0]
   12ddc:	addeq	r0, r0, #1
   12de0:	subs	r1, r1, #1
   12de4:	bne	12dc8 <__assert_fail@plt+0x1d10>
   12de8:	cmp	r0, #0
   12dec:	beq	12d74 <__assert_fail@plt+0x1cbc>
   12df0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12df4:	mov	r0, #0
   12df8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e00:	add	fp, sp, #28
   12e04:	sub	sp, sp, #4
   12e08:	mov	r4, r0
   12e0c:	add	sl, r0, #8
   12e10:	mvn	r9, #0
   12e14:	mov	ip, #2
   12e18:	cmp	r1, #0
   12e1c:	strne	ip, [r1]
   12e20:	subs	r7, r9, #1
   12e24:	ldm	sl, {r0, r3}
   12e28:	sbc	r6, r9, #0
   12e2c:	eor	r6, r3, r6
   12e30:	eor	r7, r0, r7
   12e34:	orrs	r7, r7, r6
   12e38:	bne	12e5c <__assert_fail@plt+0x1da4>
   12e3c:	ldr	r0, [r4]
   12e40:	mvn	r3, #0
   12e44:	ldr	r6, [r0, #4]
   12e48:	mvn	r0, #0
   12e4c:	str	r6, [r4, #4]
   12e50:	str	r9, [sl]
   12e54:	str	r9, [sl, #4]
   12e58:	b	12e60 <__assert_fail@plt+0x1da8>
   12e5c:	ldr	r6, [r4, #4]
   12e60:	cmp	r6, #0
   12e64:	beq	13010 <__assert_fail@plt+0x1f58>
   12e68:	ldr	r7, [r6]
   12e6c:	cmp	r7, #4
   12e70:	bhi	13054 <__assert_fail@plt+0x1f9c>
   12e74:	add	r5, pc, #0
   12e78:	ldr	pc, [r5, r7, lsl #2]
   12e7c:			; <UNDEFINED> instruction: 0x00012eb8
   12e80:	strdeq	r2, [r1], -r4
   12e84:	ldrdeq	r2, [r1], -r0
   12e88:			; <UNDEFINED> instruction: 0x00012eb8
   12e8c:	muleq	r1, r0, lr
   12e90:	mov	r7, r6
   12e94:	ldr	r5, [r7, #16]!
   12e98:	ldr	r2, [r7, #4]
   12e9c:	orrs	r2, r5, r2
   12ea0:	bne	13018 <__assert_fail@plt+0x1f60>
   12ea4:	ldr	r0, [r6, #4]
   12ea8:	str	r0, [r4, #4]
   12eac:	str	r9, [sl]
   12eb0:	str	r9, [sl, #4]
   12eb4:	b	12e18 <__assert_fail@plt+0x1d60>
   12eb8:	ldrb	r8, [r6, #8]
   12ebc:	str	r9, [sl]
   12ec0:	str	r9, [sl, #4]
   12ec4:	ldr	r0, [r6, #4]
   12ec8:	str	r0, [r4, #4]
   12ecc:	b	13004 <__assert_fail@plt+0x1f4c>
   12ed0:	cmp	r1, #0
   12ed4:	beq	12f3c <__assert_fail@plt+0x1e84>
   12ed8:	ldr	r0, [r6, #8]
   12edc:	cmp	r0, #10
   12ee0:	beq	12f34 <__assert_fail@plt+0x1e7c>
   12ee4:	cmp	r0, #6
   12ee8:	bne	12f3c <__assert_fail@plt+0x1e84>
   12eec:	mov	r0, #0
   12ef0:	b	12f38 <__assert_fail@plt+0x1e80>
   12ef4:	eor	r1, r0, r9
   12ef8:	eor	r2, r3, r9
   12efc:	orrs	r1, r1, r2
   12f00:	beq	12f10 <__assert_fail@plt+0x1e58>
   12f04:	adds	r8, r0, #1
   12f08:	adc	r1, r3, #0
   12f0c:	b	12f18 <__assert_fail@plt+0x1e60>
   12f10:	ldrb	r8, [r6, #8]
   12f14:	mov	r1, #0
   12f18:	str	r8, [sl]
   12f1c:	str	r1, [sl, #4]
   12f20:	ldrb	r0, [r6, #9]
   12f24:	eor	r0, r8, r0
   12f28:	orrs	r0, r0, r1
   12f2c:	bne	13004 <__assert_fail@plt+0x1f4c>
   12f30:	b	12ff4 <__assert_fail@plt+0x1f3c>
   12f34:	mov	r0, #1
   12f38:	str	r0, [r1]
   12f3c:	ldr	r1, [sl, #4]
   12f40:	ldr	r8, [sl]
   12f44:	eor	r0, r1, r9
   12f48:	eor	r1, r8, r9
   12f4c:	orrs	r0, r1, r0
   12f50:	bne	12fa8 <__assert_fail@plt+0x1ef0>
   12f54:	ldr	r5, [r6, #8]
   12f58:	mov	r8, #0
   12f5c:	uxtb	r1, r8
   12f60:	mov	r0, r5
   12f64:	bl	135b0 <__assert_fail@plt+0x24f8>
   12f68:	cmp	r0, #0
   12f6c:	bne	12f9c <__assert_fail@plt+0x1ee4>
   12f70:	add	r8, r8, #1
   12f74:	cmp	r8, #256	; 0x100
   12f78:	bne	12f5c <__assert_fail@plt+0x1ea4>
   12f7c:	movw	r0, #32265	; 0x7e09
   12f80:	movw	r1, #29880	; 0x74b8
   12f84:	movw	r3, #32277	; 0x7e15
   12f88:	movw	r2, #1079	; 0x437
   12f8c:	movt	r0, #1
   12f90:	movt	r1, #1
   12f94:	movt	r3, #1
   12f98:	bl	110b8 <__assert_fail@plt>
   12f9c:	mov	r1, #0
   12fa0:	str	r8, [sl]
   12fa4:	str	r1, [sl, #4]
   12fa8:	ldr	r5, [r6, #8]
   12fac:	uxtb	r1, r8
   12fb0:	mov	r0, r5
   12fb4:	bl	135b0 <__assert_fail@plt+0x24f8>
   12fb8:	cmp	r0, #0
   12fbc:	beq	13058 <__assert_fail@plt+0x1fa0>
   12fc0:	mov	r7, r8
   12fc4:	add	r7, r7, #1
   12fc8:	cmp	r7, #255	; 0xff
   12fcc:	bgt	12ff4 <__assert_fail@plt+0x1f3c>
   12fd0:	uxtb	r1, r7
   12fd4:	mov	r0, r5
   12fd8:	bl	135b0 <__assert_fail@plt+0x24f8>
   12fdc:	cmp	r0, #0
   12fe0:	beq	12fc4 <__assert_fail@plt+0x1f0c>
   12fe4:	asr	r1, r7, #31
   12fe8:	str	r7, [sl]
   12fec:	str	r1, [sl, #4]
   12ff0:	b	13004 <__assert_fail@plt+0x1f4c>
   12ff4:	ldr	r0, [r6, #4]
   12ff8:	str	r0, [r4, #4]
   12ffc:	str	r9, [sl]
   13000:	str	r9, [sl, #4]
   13004:	mov	r0, r8
   13008:	sub	sp, fp, #28
   1300c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13010:	mvn	r8, #0
   13014:	b	13004 <__assert_fail@plt+0x1f4c>
   13018:	eor	r1, r0, r9
   1301c:	eor	r2, r3, r9
   13020:	orrs	r1, r1, r2
   13024:	moveq	r0, #0
   13028:	moveq	r3, #0
   1302c:	streq	r0, [sl]
   13030:	streq	r0, [sl, #4]
   13034:	adds	r0, r0, #1
   13038:	adc	r1, r3, #0
   1303c:	strd	r0, [sl]
   13040:	ldrd	r2, [r7]
   13044:	ldrb	r8, [r6, #8]
   13048:	eor	r1, r1, r3
   1304c:	eor	r0, r0, r2
   13050:	b	12f28 <__assert_fail@plt+0x1e70>
   13054:	bl	110a0 <abort@plt>
   13058:	movw	r0, #32336	; 0x7e50
   1305c:	movw	r1, #29880	; 0x74b8
   13060:	movw	r3, #32277	; 0x7e15
   13064:	movw	r2, #1082	; 0x43a
   13068:	movt	r0, #1
   1306c:	b	12f90 <__assert_fail@plt+0x1ed8>
   13070:	push	{r4, sl, fp, lr}
   13074:	add	fp, sp, #8
   13078:	mov	r4, r0
   1307c:	bl	12d0c <__assert_fail@plt+0x1c54>
   13080:	cmp	r0, #0
   13084:	beq	130a8 <__assert_fail@plt+0x1ff0>
   13088:	movw	r1, #45918	; 0xb35e
   1308c:	mov	r2, r0
   13090:	movt	r1, #2
   13094:	ldrb	r3, [r4]
   13098:	subs	r2, r2, #1
   1309c:	ldrb	r3, [r1, r3]
   130a0:	strb	r3, [r4], #1
   130a4:	bne	13094 <__assert_fail@plt+0x1fdc>
   130a8:	pop	{r4, sl, fp, pc}
   130ac:	push	{r4, r5, fp, lr}
   130b0:	add	fp, sp, #8
   130b4:	ldr	r3, [r0]
   130b8:	mov	r2, r0
   130bc:	mov	r0, #0
   130c0:	ldrb	r4, [r3, r1]
   130c4:	cmp	r4, #42	; 0x2a
   130c8:	bne	13124 <__assert_fail@plt+0x206c>
   130cc:	ldr	ip, [r2, #4]
   130d0:	ldrb	r4, [ip, r1]
   130d4:	cmp	r4, #0
   130d8:	bne	13124 <__assert_fail@plt+0x206c>
   130dc:	ldr	lr, [r2, #8]
   130e0:	add	r4, r1, #1
   130e4:	cmp	r4, lr
   130e8:	bcs	13124 <__assert_fail@plt+0x206c>
   130ec:	ldrb	r2, [r3, r4]
   130f0:	mov	r1, r4
   130f4:	sub	r4, r2, #48	; 0x30
   130f8:	cmp	r4, #9
   130fc:	bhi	13110 <__assert_fail@plt+0x2058>
   13100:	ldrb	r5, [ip, r1]
   13104:	add	r4, r1, #1
   13108:	cmp	r5, #0
   1310c:	beq	130e4 <__assert_fail@plt+0x202c>
   13110:	cmp	r2, #93	; 0x5d
   13114:	popne	{r4, r5, fp, pc}
   13118:	ldrb	r0, [ip, r1]
   1311c:	clz	r0, r0
   13120:	lsr	r0, r0, #5
   13124:	pop	{r4, r5, fp, pc}
   13128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1312c:	add	fp, sp, #28
   13130:	sub	sp, sp, #12
   13134:	mov	r5, r0
   13138:	mov	r4, r1
   1313c:	add	r0, r1, #1
   13140:	mov	r1, #4
   13144:	bl	15910 <__assert_fail@plt+0x4858>
   13148:	mov	sl, r0
   1314c:	cmp	r4, #0
   13150:	beq	13258 <__assert_fail@plt+0x21a0>
   13154:	movw	r7, #30797	; 0x784d
   13158:	add	r9, sp, #7
   1315c:	mov	r6, sl
   13160:	movt	r7, #1
   13164:	ldrb	r8, [r5]
   13168:	sub	r0, r8, #7
   1316c:	cmp	r0, #6
   13170:	bhi	131a4 <__assert_fail@plt+0x20ec>
   13174:	add	r1, pc, #0
   13178:	ldr	pc, [r1, r0, lsl #2]
   1317c:	muleq	r1, r8, r1
   13180:	andeq	r3, r1, r8, ror #3
   13184:	strdeq	r3, [r1], -r4
   13188:	andeq	r3, r1, r0, lsl #4
   1318c:	andeq	r3, r1, ip, lsl #4
   13190:	andeq	r3, r1, r8, lsl r2
   13194:	andeq	r3, r1, r4, lsr #4
   13198:	movw	r1, #30799	; 0x784f
   1319c:	movt	r1, #1
   131a0:	b	13240 <__assert_fail@plt+0x2188>
   131a4:	cmp	r8, #92	; 0x5c
   131a8:	mov	r1, r7
   131ac:	beq	13240 <__assert_fail@plt+0x2188>
   131b0:	bl	10f98 <__ctype_b_loc@plt>
   131b4:	ldr	r0, [r0]
   131b8:	add	r0, r0, r8, lsl #1
   131bc:	ldrb	r0, [r0, #1]
   131c0:	tst	r0, #64	; 0x40
   131c4:	bne	13230 <__assert_fail@plt+0x2178>
   131c8:	movw	r3, #30820	; 0x7864
   131cc:	mov	r0, r9
   131d0:	mov	r1, #1
   131d4:	mov	r2, #5
   131d8:	str	r8, [sp]
   131dc:	movt	r3, #1
   131e0:	bl	10fe0 <__sprintf_chk@plt>
   131e4:	b	1323c <__assert_fail@plt+0x2184>
   131e8:	movw	r1, #30802	; 0x7852
   131ec:	movt	r1, #1
   131f0:	b	13240 <__assert_fail@plt+0x2188>
   131f4:	movw	r1, #30814	; 0x785e
   131f8:	movt	r1, #1
   131fc:	b	13240 <__assert_fail@plt+0x2188>
   13200:	movw	r1, #30808	; 0x7858
   13204:	movt	r1, #1
   13208:	b	13240 <__assert_fail@plt+0x2188>
   1320c:	movw	r1, #30817	; 0x7861
   13210:	movt	r1, #1
   13214:	b	13240 <__assert_fail@plt+0x2188>
   13218:	movw	r1, #30805	; 0x7855
   1321c:	movt	r1, #1
   13220:	b	13240 <__assert_fail@plt+0x2188>
   13224:	movw	r1, #30811	; 0x785b
   13228:	movt	r1, #1
   1322c:	b	13240 <__assert_fail@plt+0x2188>
   13230:	mov	r0, #0
   13234:	strb	r0, [sp, #8]
   13238:	strb	r8, [sp, #7]
   1323c:	mov	r1, r9
   13240:	mov	r0, r6
   13244:	bl	10ed8 <stpcpy@plt>
   13248:	mov	r6, r0
   1324c:	add	r5, r5, #1
   13250:	subs	r4, r4, #1
   13254:	bne	13164 <__assert_fail@plt+0x20ac>
   13258:	mov	r0, sl
   1325c:	sub	sp, fp, #28
   13260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13264:	push	{r4, r5, r6, r7, fp, lr}
   13268:	add	fp, sp, #16
   1326c:	mov	r4, r0
   13270:	mov	r0, #24
   13274:	mov	r7, r3
   13278:	mov	r6, r2
   1327c:	mov	r5, r1
   13280:	bl	15840 <__assert_fail@plt+0x4788>
   13284:	mov	r1, #0
   13288:	mov	r2, #4
   1328c:	strd	r6, [r0, #16]
   13290:	strb	r5, [r0, #8]
   13294:	str	r2, [r0]
   13298:	str	r1, [r0, #4]
   1329c:	ldr	r1, [r4, #4]
   132a0:	cmp	r1, #0
   132a4:	strne	r0, [r1, #4]
   132a8:	strne	r0, [r4, #4]
   132ac:	popne	{r4, r5, r6, r7, fp, pc}
   132b0:	movw	r0, #30653	; 0x77bd
   132b4:	movw	r1, #29880	; 0x74b8
   132b8:	movw	r3, #31055	; 0x794f
   132bc:	movw	r2, #721	; 0x2d1
   132c0:	movt	r0, #1
   132c4:	movt	r1, #1
   132c8:	movt	r3, #1
   132cc:	bl	110b8 <__assert_fail@plt>
   132d0:	push	{r4, r5, fp, lr}
   132d4:	add	fp, sp, #8
   132d8:	mov	r4, r0
   132dc:	mov	r0, #24
   132e0:	mov	r5, r1
   132e4:	bl	15840 <__assert_fail@plt+0x4788>
   132e8:	mov	r1, #0
   132ec:	strb	r5, [r0, #8]
   132f0:	str	r1, [r0]
   132f4:	str	r1, [r0, #4]
   132f8:	ldr	r1, [r4, #4]
   132fc:	cmp	r1, #0
   13300:	strne	r0, [r1, #4]
   13304:	strne	r0, [r4, #4]
   13308:	popne	{r4, r5, fp, pc}
   1330c:	movw	r0, #30653	; 0x77bd
   13310:	movw	r1, #29880	; 0x74b8
   13314:	movw	r3, #31259	; 0x7a1b
   13318:	movw	r2, #649	; 0x289
   1331c:	movt	r0, #1
   13320:	movt	r1, #1
   13324:	movt	r3, #1
   13328:	bl	110b8 <__assert_fail@plt>
   1332c:	push	{r4, r5, fp, lr}
   13330:	add	fp, sp, #8
   13334:	sub	sp, sp, #8
   13338:	mov	r5, r0
   1333c:	mov	r0, #5
   13340:	bl	15840 <__assert_fail@plt+0x4788>
   13344:	mov	r4, r0
   13348:	bl	10f98 <__ctype_b_loc@plt>
   1334c:	ldr	r0, [r0]
   13350:	add	r0, r0, r5, lsl #1
   13354:	ldrb	r0, [r0, #1]
   13358:	tst	r0, #64	; 0x40
   1335c:	bne	13380 <__assert_fail@plt+0x22c8>
   13360:	movw	r3, #30820	; 0x7864
   13364:	mov	r0, r4
   13368:	mov	r1, #1
   1336c:	mov	r2, #5
   13370:	str	r5, [sp]
   13374:	movt	r3, #1
   13378:	bl	10fe0 <__sprintf_chk@plt>
   1337c:	b	1338c <__assert_fail@plt+0x22d4>
   13380:	mov	r0, #0
   13384:	strb	r0, [r4, #1]
   13388:	strb	r5, [r4]
   1338c:	mov	r0, r4
   13390:	sub	sp, fp, #8
   13394:	pop	{r4, r5, fp, pc}
   13398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1339c:	add	fp, sp, #28
   133a0:	sub	sp, sp, #4
   133a4:	vpush	{d8-d9}
   133a8:	sub	sp, sp, #8
   133ac:	mov	r2, #0
   133b0:	vldr	d8, [pc, #480]	; 13598 <__assert_fail@plt+0x24e0>
   133b4:	vmov.i32	d9, #2	; 0x00000002
   133b8:	mov	r1, #0
   133bc:	mov	ip, #1
   133c0:	mov	r8, #0
   133c4:	mov	r6, #0
   133c8:	str	r0, [sp, #4]
   133cc:	strb	r2, [r0, #34]	; 0x22
   133d0:	str	r2, [r0, #24]
   133d4:	strh	r2, [r0, #32]
   133d8:	str	r1, [sp]
   133dc:	ldr	r7, [r0]
   133e0:	ldr	r7, [r7, #4]
   133e4:	cmp	r7, #0
   133e8:	beq	1355c <__assert_fail@plt+0x24a4>
   133ec:	ldr	r2, [r7]
   133f0:	cmp	r2, #4
   133f4:	bhi	13574 <__assert_fail@plt+0x24bc>
   133f8:	add	r1, pc, #8
   133fc:	mov	r5, #0
   13400:	mov	r4, #1
   13404:	ldr	pc, [r1, r2, lsl #2]
   13408:	andeq	r3, r1, r0, lsl r5
   1340c:	andeq	r3, r1, ip, lsl r4
   13410:	andeq	r3, r1, r8, ror #8
   13414:			; <UNDEFINED> instruction: 0x000134b8
   13418:	andeq	r3, r1, ip, lsr r4
   1341c:	ldrb	r2, [r7, #8]
   13420:	ldrb	r1, [r7, #9]
   13424:	cmp	r1, r2
   13428:	bcc	13578 <__assert_fail@plt+0x24c0>
   1342c:	sub	r1, r1, r2
   13430:	add	r4, r1, #1
   13434:	asr	r5, r4, #31
   13438:	b	13510 <__assert_fail@plt+0x2458>
   1343c:	ldrd	r4, [r7, #16]
   13440:	orrs	r1, r4, r5
   13444:	bne	13510 <__assert_fail@plt+0x2458>
   13448:	ldr	r1, [sp]
   1344c:	mov	r4, #0
   13450:	mov	r5, #0
   13454:	add	r1, r1, #1
   13458:	str	r1, [sp]
   1345c:	str	r1, [r0, #24]
   13460:	str	r7, [r0, #28]
   13464:	b	13510 <__assert_fail@plt+0x2458>
   13468:	strb	ip, [r0, #33]	; 0x21
   1346c:	mov	sl, #0
   13470:	mov	r4, #0
   13474:	mov	r5, #0
   13478:	ldr	r9, [r7, #8]
   1347c:	uxtb	r1, sl
   13480:	mov	r0, r9
   13484:	bl	135b0 <__assert_fail@plt+0x24f8>
   13488:	adds	r4, r4, r0
   1348c:	add	sl, sl, #1
   13490:	adc	r5, r5, #0
   13494:	cmp	sl, #256	; 0x100
   13498:	bne	1347c <__assert_fail@plt+0x23c4>
   1349c:	cmp	r9, #6
   134a0:	beq	13508 <__assert_fail@plt+0x2450>
   134a4:	ldr	r0, [sp, #4]
   134a8:	cmp	r9, #10
   134ac:	mov	ip, #1
   134b0:	strbne	ip, [r0, #34]	; 0x22
   134b4:	b	13510 <__assert_fail@plt+0x2458>
   134b8:	ldrb	r1, [r7, #8]
   134bc:	vmov.i32	q8, #0	; 0x00000000
   134c0:	vorr	d19, d8, d8
   134c4:	mov	r2, #256	; 0x100
   134c8:	vdup.32	d18, r1
   134cc:	vceq.i32	d20, d19, d18
   134d0:	add	r1, pc, #200	; 0xc8
   134d4:	vadd.i32	d19, d19, d9
   134d8:	subs	r2, r2, #2
   134dc:	vld1.64	{d22-d23}, [r1]
   134e0:	vmovl.u32	q10, d20
   134e4:	vand	q10, q10, q11
   134e8:	vadd.i64	q8, q8, q10
   134ec:	bne	134cc <__assert_fail@plt+0x2414>
   134f0:	vorr	d18, d17, d17
   134f4:	strb	ip, [r0, #32]
   134f8:	vadd.i64	q8, q8, q9
   134fc:	vmov.32	r5, d16[1]
   13500:	vmov.32	r4, d16[0]
   13504:	b	13510 <__assert_fail@plt+0x2458>
   13508:	ldr	r0, [sp, #4]
   1350c:	mov	ip, #1
   13510:	adds	r3, r4, r8
   13514:	adc	r1, r5, r6
   13518:	subs	r2, r3, r8
   1351c:	sbcs	r2, r1, r6
   13520:	bcc	13538 <__assert_fail@plt+0x2480>
   13524:	and	r2, r3, r1
   13528:	mov	r8, r3
   1352c:	mov	r6, r1
   13530:	cmn	r2, #1
   13534:	bne	133e0 <__assert_fail@plt+0x2328>
   13538:	movw	r1, #31888	; 0x7c90
   1353c:	mov	r0, #0
   13540:	mov	r2, #5
   13544:	movt	r1, #1
   13548:	bl	10ee4 <dcgettext@plt>
   1354c:	mov	r2, r0
   13550:	mov	r0, #1
   13554:	mov	r1, #0
   13558:	bl	10f50 <error@plt>
   1355c:	str	r8, [r0, #16]
   13560:	str	r6, [r0, #20]
   13564:	sub	sp, fp, #48	; 0x30
   13568:	vpop	{d8-d9}
   1356c:	add	sp, sp, #4
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13574:	bl	110a0 <abort@plt>
   13578:	movw	r0, #31802	; 0x7c3a
   1357c:	movw	r1, #29880	; 0x74b8
   13580:	movw	r3, #31848	; 0x7c68
   13584:	movw	r2, #1265	; 0x4f1
   13588:	movt	r0, #1
   1358c:	movt	r1, #1
   13590:	movt	r3, #1
   13594:	bl	110b8 <__assert_fail@plt>
   13598:	andeq	r0, r0, r0
   1359c:	andeq	r0, r0, r1
   135a0:	andeq	r0, r0, r1
   135a4:	andeq	r0, r0, r0
   135a8:	andeq	r0, r0, r1
   135ac:	andeq	r0, r0, r0
   135b0:	push	{r4, r5, fp, lr}
   135b4:	add	fp, sp, #8
   135b8:	cmp	r0, #11
   135bc:	bhi	13670 <__assert_fail@plt+0x25b8>
   135c0:	mov	r4, r1
   135c4:	add	r1, pc, #4
   135c8:	mov	r5, #8
   135cc:	ldr	pc, [r1, r0, lsl #2]
   135d0:	andeq	r3, r1, r4, asr r6
   135d4:	andeq	r3, r1, r0, lsl #12
   135d8:	andeq	r3, r1, r8, lsl r6
   135dc:	andeq	r3, r1, r8, lsr #12
   135e0:	andeq	r3, r1, r0, lsl r6
   135e4:	andeq	r3, r1, r8, lsr r6
   135e8:	andeq	r3, r1, r0, asr #12
   135ec:	andeq	r3, r1, r0, lsr r6
   135f0:	andeq	r3, r1, r8, asr #12
   135f4:	andeq	r3, r1, r0, lsr #12
   135f8:	andeq	r3, r1, r0, asr r6
   135fc:	andeq	r3, r1, r8, lsl #12
   13600:	mov	r5, #1024	; 0x400
   13604:	b	13654 <__assert_fail@plt+0x259c>
   13608:	mov	r5, #4096	; 0x1000
   1360c:	b	13654 <__assert_fail@plt+0x259c>
   13610:	mov	r5, #2048	; 0x800
   13614:	b	13654 <__assert_fail@plt+0x259c>
   13618:	mov	r5, #1
   1361c:	b	13654 <__assert_fail@plt+0x259c>
   13620:	mov	r5, #8192	; 0x2000
   13624:	b	13654 <__assert_fail@plt+0x259c>
   13628:	mov	r5, #2
   1362c:	b	13654 <__assert_fail@plt+0x259c>
   13630:	mov	r5, #16384	; 0x4000
   13634:	b	13654 <__assert_fail@plt+0x259c>
   13638:	mov	r5, #32768	; 0x8000
   1363c:	b	13654 <__assert_fail@plt+0x259c>
   13640:	mov	r5, #512	; 0x200
   13644:	b	13654 <__assert_fail@plt+0x259c>
   13648:	mov	r5, #4
   1364c:	b	13654 <__assert_fail@plt+0x259c>
   13650:	mov	r5, #256	; 0x100
   13654:	bl	10f98 <__ctype_b_loc@plt>
   13658:	ldr	r0, [r0]
   1365c:	add	r0, r0, r4, lsl #1
   13660:	ldrh	r0, [r0]
   13664:	ands	r0, r0, r5
   13668:	movwne	r0, #1
   1366c:	pop	{r4, r5, fp, pc}
   13670:	bl	110a0 <abort@plt>
   13674:	movw	r1, #46176	; 0xb460
   13678:	movt	r1, #2
   1367c:	str	r0, [r1]
   13680:	bx	lr
   13684:	movw	r1, #46180	; 0xb464
   13688:	movt	r1, #2
   1368c:	strb	r0, [r1]
   13690:	bx	lr
   13694:	push	{r4, r5, r6, sl, fp, lr}
   13698:	add	fp, sp, #16
   1369c:	sub	sp, sp, #8
   136a0:	movw	r0, #37204	; 0x9154
   136a4:	movt	r0, #2
   136a8:	ldr	r0, [r0]
   136ac:	bl	16440 <__assert_fail@plt+0x5388>
   136b0:	cmp	r0, #0
   136b4:	beq	136dc <__assert_fail@plt+0x2624>
   136b8:	movw	r0, #46180	; 0xb464
   136bc:	movt	r0, #2
   136c0:	ldrb	r0, [r0]
   136c4:	cmp	r0, #0
   136c8:	beq	136fc <__assert_fail@plt+0x2644>
   136cc:	bl	10fd4 <__errno_location@plt>
   136d0:	ldr	r0, [r0]
   136d4:	cmp	r0, #32
   136d8:	bne	136fc <__assert_fail@plt+0x2644>
   136dc:	movw	r0, #37192	; 0x9148
   136e0:	movt	r0, #2
   136e4:	ldr	r0, [r0]
   136e8:	bl	16440 <__assert_fail@plt+0x5388>
   136ec:	cmp	r0, #0
   136f0:	subeq	sp, fp, #16
   136f4:	popeq	{r4, r5, r6, sl, fp, pc}
   136f8:	b	1376c <__assert_fail@plt+0x26b4>
   136fc:	movw	r1, #29842	; 0x7492
   13700:	mov	r0, #0
   13704:	mov	r2, #5
   13708:	movt	r1, #1
   1370c:	bl	10ee4 <dcgettext@plt>
   13710:	mov	r4, r0
   13714:	movw	r0, #46176	; 0xb460
   13718:	movt	r0, #2
   1371c:	ldr	r6, [r0]
   13720:	bl	10fd4 <__errno_location@plt>
   13724:	ldr	r5, [r0]
   13728:	cmp	r6, #0
   1372c:	bne	13748 <__assert_fail@plt+0x2690>
   13730:	movw	r2, #32627	; 0x7f73
   13734:	mov	r0, #0
   13738:	mov	r1, r5
   1373c:	mov	r3, r4
   13740:	movt	r2, #1
   13744:	b	13768 <__assert_fail@plt+0x26b0>
   13748:	mov	r0, r6
   1374c:	bl	14f90 <__assert_fail@plt+0x3ed8>
   13750:	movw	r2, #32623	; 0x7f6f
   13754:	mov	r3, r0
   13758:	str	r4, [sp]
   1375c:	mov	r0, #0
   13760:	mov	r1, r5
   13764:	movt	r2, #1
   13768:	bl	10f50 <error@plt>
   1376c:	movw	r0, #37108	; 0x90f4
   13770:	movt	r0, #2
   13774:	ldr	r0, [r0]
   13778:	bl	10e9c <_exit@plt>
   1377c:	b	10e6c <posix_fadvise64@plt>
   13780:	cmp	r0, #0
   13784:	bxeq	lr
   13788:	push	{r4, sl, fp, lr}
   1378c:	add	fp, sp, #8
   13790:	sub	sp, sp, #16
   13794:	mov	r4, r1
   13798:	bl	11010 <fileno@plt>
   1379c:	mov	r1, #0
   137a0:	mov	r2, #0
   137a4:	mov	r3, #0
   137a8:	str	r1, [sp]
   137ac:	stmib	sp, {r1, r4}
   137b0:	bl	10e6c <posix_fadvise64@plt>
   137b4:	sub	sp, fp, #8
   137b8:	pop	{r4, sl, fp, pc}
   137bc:	push	{r4, r5, r6, sl, fp, lr}
   137c0:	add	fp, sp, #16
   137c4:	mov	r4, r0
   137c8:	bl	10fd4 <__errno_location@plt>
   137cc:	ldr	r6, [r0]
   137d0:	mov	r5, r0
   137d4:	mov	r0, r4
   137d8:	bl	10e90 <free@plt>
   137dc:	str	r6, [r5]
   137e0:	pop	{r4, r5, r6, sl, fp, pc}
   137e4:	push	{r4, r5, fp, lr}
   137e8:	add	fp, sp, #8
   137ec:	cmp	r0, #0
   137f0:	beq	13884 <__assert_fail@plt+0x27cc>
   137f4:	mov	r1, #47	; 0x2f
   137f8:	mov	r4, r0
   137fc:	bl	11064 <strrchr@plt>
   13800:	cmp	r0, #0
   13804:	mov	r5, r4
   13808:	addne	r5, r0, #1
   1380c:	sub	r0, r5, r4
   13810:	cmp	r0, #7
   13814:	blt	13868 <__assert_fail@plt+0x27b0>
   13818:	movw	r1, #32686	; 0x7fae
   1381c:	sub	r0, r5, #7
   13820:	mov	r2, #7
   13824:	movt	r1, #1
   13828:	bl	11094 <strncmp@plt>
   1382c:	cmp	r0, #0
   13830:	bne	13868 <__assert_fail@plt+0x27b0>
   13834:	movw	r1, #32694	; 0x7fb6
   13838:	mov	r0, r5
   1383c:	mov	r2, #3
   13840:	movt	r1, #1
   13844:	bl	11094 <strncmp@plt>
   13848:	cmp	r0, #0
   1384c:	beq	13858 <__assert_fail@plt+0x27a0>
   13850:	mov	r4, r5
   13854:	b	13868 <__assert_fail@plt+0x27b0>
   13858:	movw	r0, #37176	; 0x9138
   1385c:	add	r4, r5, #3
   13860:	movt	r0, #2
   13864:	str	r4, [r0]
   13868:	movw	r0, #37180	; 0x913c
   1386c:	movt	r0, #2
   13870:	str	r4, [r0]
   13874:	movw	r0, #46184	; 0xb468
   13878:	movt	r0, #2
   1387c:	str	r4, [r0]
   13880:	pop	{r4, r5, fp, pc}
   13884:	movw	r0, #37192	; 0x9148
   13888:	movt	r0, #2
   1388c:	ldr	r1, [r0]
   13890:	movw	r0, #32630	; 0x7f76
   13894:	movt	r0, #1
   13898:	bl	11088 <fputs@plt>
   1389c:	bl	110a0 <abort@plt>
   138a0:	push	{r4, r5, r6, sl, fp, lr}
   138a4:	add	fp, sp, #16
   138a8:	mov	r4, r0
   138ac:	movw	r0, #46192	; 0xb470
   138b0:	movt	r0, #2
   138b4:	cmp	r4, #0
   138b8:	moveq	r4, r0
   138bc:	bl	10fd4 <__errno_location@plt>
   138c0:	ldr	r6, [r0]
   138c4:	mov	r5, r0
   138c8:	mov	r0, r4
   138cc:	mov	r1, #48	; 0x30
   138d0:	bl	15b90 <__assert_fail@plt+0x4ad8>
   138d4:	str	r6, [r5]
   138d8:	pop	{r4, r5, r6, sl, fp, pc}
   138dc:	movw	r1, #46192	; 0xb470
   138e0:	cmp	r0, #0
   138e4:	movt	r1, #2
   138e8:	movne	r1, r0
   138ec:	ldr	r0, [r1]
   138f0:	bx	lr
   138f4:	movw	r2, #46192	; 0xb470
   138f8:	cmp	r0, #0
   138fc:	movt	r2, #2
   13900:	movne	r2, r0
   13904:	str	r1, [r2]
   13908:	bx	lr
   1390c:	movw	r3, #46192	; 0xb470
   13910:	cmp	r0, #0
   13914:	and	r2, r2, #1
   13918:	movt	r3, #2
   1391c:	movne	r3, r0
   13920:	ubfx	r0, r1, #5, #3
   13924:	and	r1, r1, #31
   13928:	add	ip, r3, r0, lsl #2
   1392c:	mov	r0, #1
   13930:	ldr	r3, [ip, #8]
   13934:	and	r0, r0, r3, lsr r1
   13938:	eor	r2, r0, r2
   1393c:	eor	r1, r3, r2, lsl r1
   13940:	str	r1, [ip, #8]
   13944:	bx	lr
   13948:	movw	r2, #46192	; 0xb470
   1394c:	cmp	r0, #0
   13950:	movt	r2, #2
   13954:	movne	r2, r0
   13958:	ldr	r0, [r2, #4]
   1395c:	str	r1, [r2, #4]
   13960:	bx	lr
   13964:	push	{fp, lr}
   13968:	mov	fp, sp
   1396c:	movw	r3, #46192	; 0xb470
   13970:	cmp	r0, #0
   13974:	movt	r3, #2
   13978:	movne	r3, r0
   1397c:	cmp	r1, #0
   13980:	mov	r0, #10
   13984:	cmpne	r2, #0
   13988:	str	r0, [r3]
   1398c:	bne	13994 <__assert_fail@plt+0x28dc>
   13990:	bl	110a0 <abort@plt>
   13994:	str	r1, [r3, #40]	; 0x28
   13998:	str	r2, [r3, #44]	; 0x2c
   1399c:	pop	{fp, pc}
   139a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139a4:	add	fp, sp, #28
   139a8:	sub	sp, sp, #20
   139ac:	mov	r7, r0
   139b0:	ldr	r0, [fp, #8]
   139b4:	movw	r5, #46192	; 0xb470
   139b8:	mov	r8, r3
   139bc:	mov	r9, r2
   139c0:	mov	sl, r1
   139c4:	movt	r5, #2
   139c8:	cmp	r0, #0
   139cc:	movne	r5, r0
   139d0:	bl	10fd4 <__errno_location@plt>
   139d4:	ldr	r2, [r5, #40]	; 0x28
   139d8:	ldr	r3, [r5, #44]	; 0x2c
   139dc:	mov	r4, r0
   139e0:	ldm	r5, {r0, r1}
   139e4:	add	r5, r5, #8
   139e8:	ldr	r6, [r4]
   139ec:	stm	sp, {r0, r1, r5}
   139f0:	mov	r0, r7
   139f4:	mov	r1, sl
   139f8:	str	r2, [sp, #12]
   139fc:	str	r3, [sp, #16]
   13a00:	mov	r2, r9
   13a04:	mov	r3, r8
   13a08:	bl	13a18 <__assert_fail@plt+0x2960>
   13a0c:	str	r6, [r4]
   13a10:	sub	sp, fp, #28
   13a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a1c:	add	fp, sp, #28
   13a20:	sub	sp, sp, #156	; 0x9c
   13a24:	mov	r5, r0
   13a28:	add	r0, r2, #1
   13a2c:	mov	r6, r1
   13a30:	mov	sl, r3
   13a34:	str	r2, [fp, #-80]	; 0xffffffb0
   13a38:	str	r0, [sp, #72]	; 0x48
   13a3c:	ldr	r0, [fp, #12]
   13a40:	and	r1, r0, #1
   13a44:	str	r1, [sp, #32]
   13a48:	and	r1, r0, #4
   13a4c:	str	r1, [sp, #28]
   13a50:	ubfx	r9, r0, #1, #1
   13a54:	bl	10f20 <__ctype_get_mb_cur_max@plt>
   13a58:	str	r0, [sp, #40]	; 0x28
   13a5c:	ldr	r0, [fp, #24]
   13a60:	ldr	r7, [fp, #8]
   13a64:	mov	r1, #0
   13a68:	mov	lr, #0
   13a6c:	str	r5, [fp, #-84]	; 0xffffffac
   13a70:	str	r1, [sp, #60]	; 0x3c
   13a74:	mov	r1, #1
   13a78:	str	r1, [fp, #-48]	; 0xffffffd0
   13a7c:	str	r0, [sp, #80]	; 0x50
   13a80:	ldr	r0, [fp, #20]
   13a84:	str	r0, [sp, #76]	; 0x4c
   13a88:	mov	r0, #0
   13a8c:	str	r0, [sp, #56]	; 0x38
   13a90:	mov	r0, #0
   13a94:	str	r0, [fp, #-88]	; 0xffffffa8
   13a98:	mov	r0, #0
   13a9c:	str	r0, [fp, #-72]	; 0xffffffb8
   13aa0:	mov	r0, #0
   13aa4:	cmp	r7, #10
   13aa8:	bhi	14a84 <__assert_fail@plt+0x39cc>
   13aac:	add	r1, pc, #24
   13ab0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13ab4:	mov	ip, r6
   13ab8:	mov	r8, #0
   13abc:	mov	r2, #1
   13ac0:	mov	r6, #0
   13ac4:	mov	r3, sl
   13ac8:	ldr	pc, [r1, r7, lsl #2]
   13acc:			; <UNDEFINED> instruction: 0x00013bb8
   13ad0:	andeq	r3, r1, ip, lsl #24
   13ad4:	andeq	r3, r1, ip, asr #23
   13ad8:			; <UNDEFINED> instruction: 0x00013bb0
   13adc:	andeq	r3, r1, r0, lsl #24
   13ae0:	andeq	r3, r1, r4, lsr ip
   13ae4:	ldrdeq	r3, [r1], -ip
   13ae8:			; <UNDEFINED> instruction: 0x00013cb8
   13aec:	strdeq	r3, [r1], -r8
   13af0:	strdeq	r3, [r1], -r8
   13af4:	andeq	r3, r1, r8, lsr fp
   13af8:	movw	r0, #32776	; 0x8008
   13afc:	mov	r1, r7
   13b00:	mov	r6, r5
   13b04:	mov	r4, ip
   13b08:	mov	r5, lr
   13b0c:	movt	r0, #1
   13b10:	bl	151e8 <__assert_fail@plt+0x4130>
   13b14:	str	r0, [sp, #76]	; 0x4c
   13b18:	movw	r0, #30524	; 0x773c
   13b1c:	mov	r1, r7
   13b20:	movt	r0, #1
   13b24:	bl	151e8 <__assert_fail@plt+0x4130>
   13b28:	mov	lr, r5
   13b2c:	mov	r5, r6
   13b30:	mov	ip, r4
   13b34:	str	r0, [sp, #80]	; 0x50
   13b38:	mov	r8, #0
   13b3c:	tst	r9, #1
   13b40:	str	lr, [sp, #44]	; 0x2c
   13b44:	bne	13b7c <__assert_fail@plt+0x2ac4>
   13b48:	ldr	r0, [sp, #76]	; 0x4c
   13b4c:	ldrb	r0, [r0]
   13b50:	cmp	r0, #0
   13b54:	beq	13b7c <__assert_fail@plt+0x2ac4>
   13b58:	ldr	r1, [sp, #76]	; 0x4c
   13b5c:	mov	r8, #0
   13b60:	add	r1, r1, #1
   13b64:	cmp	r8, ip
   13b68:	strbcc	r0, [r5, r8]
   13b6c:	ldrb	r0, [r1, r8]
   13b70:	add	r8, r8, #1
   13b74:	cmp	r0, #0
   13b78:	bne	13b64 <__assert_fail@plt+0x2aac>
   13b7c:	ldr	r6, [sp, #80]	; 0x50
   13b80:	mov	r4, ip
   13b84:	mov	r0, r6
   13b88:	bl	10fbc <strlen@plt>
   13b8c:	mov	ip, r4
   13b90:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13b94:	ldr	lr, [sp, #44]	; 0x2c
   13b98:	str	r6, [fp, #-88]	; 0xffffffa8
   13b9c:	str	r0, [fp, #-72]	; 0xffffffb8
   13ba0:	mov	r2, #1
   13ba4:	mov	r6, r9
   13ba8:	mov	r3, sl
   13bac:	b	13cb8 <__assert_fail@plt+0x2c00>
   13bb0:	mov	r0, #1
   13bb4:	b	13c0c <__assert_fail@plt+0x2b54>
   13bb8:	mov	r7, #0
   13bbc:	mov	r8, #0
   13bc0:	mov	r2, r0
   13bc4:	mov	r6, #0
   13bc8:	b	13cb8 <__assert_fail@plt+0x2c00>
   13bcc:	tst	r9, #1
   13bd0:	bne	13c0c <__assert_fail@plt+0x2b54>
   13bd4:	mov	r2, r0
   13bd8:	b	13c64 <__assert_fail@plt+0x2bac>
   13bdc:	mov	r0, #1
   13be0:	mov	r8, #0
   13be4:	mov	r7, #5
   13be8:	mov	r2, #1
   13bec:	str	r0, [fp, #-72]	; 0xffffffb8
   13bf0:	movw	r0, #32774	; 0x8006
   13bf4:	movt	r0, #1
   13bf8:	str	r0, [fp, #-88]	; 0xffffffa8
   13bfc:	b	13c2c <__assert_fail@plt+0x2b74>
   13c00:	mov	r2, #1
   13c04:	tst	r9, #1
   13c08:	beq	13c64 <__assert_fail@plt+0x2bac>
   13c0c:	mov	r1, #1
   13c10:	mov	r8, #0
   13c14:	mov	r7, #2
   13c18:	mov	r2, r0
   13c1c:	str	r1, [fp, #-72]	; 0xffffffb8
   13c20:	movw	r1, #30524	; 0x773c
   13c24:	movt	r1, #1
   13c28:	str	r1, [fp, #-88]	; 0xffffffa8
   13c2c:	mov	r6, #1
   13c30:	b	13cb8 <__assert_fail@plt+0x2c00>
   13c34:	tst	r9, #1
   13c38:	beq	13c88 <__assert_fail@plt+0x2bd0>
   13c3c:	mov	r0, #1
   13c40:	mov	r8, #0
   13c44:	mov	r2, #1
   13c48:	mov	r6, #1
   13c4c:	mov	r7, #5
   13c50:	str	r0, [fp, #-72]	; 0xffffffb8
   13c54:	movw	r0, #32774	; 0x8006
   13c58:	movt	r0, #1
   13c5c:	str	r0, [fp, #-88]	; 0xffffffa8
   13c60:	b	13cb8 <__assert_fail@plt+0x2c00>
   13c64:	cmp	ip, #0
   13c68:	mov	r8, #1
   13c6c:	mov	r6, #0
   13c70:	mov	r7, #2
   13c74:	movne	r0, #39	; 0x27
   13c78:	strbne	r0, [r5]
   13c7c:	movw	r0, #30524	; 0x773c
   13c80:	movt	r0, #1
   13c84:	b	13cac <__assert_fail@plt+0x2bf4>
   13c88:	cmp	ip, #0
   13c8c:	mov	r8, #1
   13c90:	mov	r2, #1
   13c94:	mov	r7, #5
   13c98:	mov	r6, #0
   13c9c:	movne	r0, #34	; 0x22
   13ca0:	strbne	r0, [r5]
   13ca4:	movw	r0, #32774	; 0x8006
   13ca8:	movt	r0, #1
   13cac:	str	r0, [fp, #-88]	; 0xffffffa8
   13cb0:	mov	r0, #1
   13cb4:	str	r0, [fp, #-72]	; 0xffffffb8
   13cb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13cbc:	str	r7, [fp, #-68]	; 0xffffffbc
   13cc0:	str	r6, [fp, #-76]	; 0xffffffb4
   13cc4:	str	r2, [sp, #84]	; 0x54
   13cc8:	cmp	r0, #0
   13ccc:	movwne	r0, #1
   13cd0:	and	r1, r0, r6
   13cd4:	and	r1, r2, r1
   13cd8:	str	r1, [sp, #48]	; 0x30
   13cdc:	sub	r1, r7, #2
   13ce0:	clz	r1, r1
   13ce4:	lsr	r1, r1, #5
   13ce8:	and	r1, r1, r6
   13cec:	str	r1, [sp, #64]	; 0x40
   13cf0:	subs	r1, r7, #2
   13cf4:	eor	r7, r6, #1
   13cf8:	movwne	r1, #1
   13cfc:	str	r7, [sp, #92]	; 0x5c
   13d00:	orr	r7, r1, r7
   13d04:	and	r1, r1, r2
   13d08:	and	r0, r0, r1
   13d0c:	str	r7, [sp, #68]	; 0x44
   13d10:	mov	r7, #0
   13d14:	str	r0, [fp, #-60]	; 0xffffffc4
   13d18:	orr	r0, r1, r6
   13d1c:	ldr	r1, [fp, #16]
   13d20:	eor	r0, r0, #1
   13d24:	clz	r1, r1
   13d28:	lsr	r1, r1, #5
   13d2c:	orr	r0, r1, r0
   13d30:	str	r0, [fp, #-64]	; 0xffffffc0
   13d34:	eor	r0, r2, #1
   13d38:	str	r0, [sp, #52]	; 0x34
   13d3c:	cmn	r3, #1
   13d40:	beq	13d50 <__assert_fail@plt+0x2c98>
   13d44:	cmp	r7, r3
   13d48:	bne	13d5c <__assert_fail@plt+0x2ca4>
   13d4c:	b	148b8 <__assert_fail@plt+0x3800>
   13d50:	ldrb	r0, [r4, r7]
   13d54:	cmp	r0, #0
   13d58:	beq	148c0 <__assert_fail@plt+0x3808>
   13d5c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13d60:	cmp	r0, #0
   13d64:	beq	13dac <__assert_fail@plt+0x2cf4>
   13d68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d6c:	add	r5, r7, r0
   13d70:	cmp	r0, #2
   13d74:	bcc	13dc0 <__assert_fail@plt+0x2d08>
   13d78:	mov	r0, #0
   13d7c:	cmn	r3, #1
   13d80:	str	r0, [fp, #-56]	; 0xffffffc8
   13d84:	bne	13dc8 <__assert_fail@plt+0x2d10>
   13d88:	mov	r0, r4
   13d8c:	mov	r4, ip
   13d90:	mov	r6, lr
   13d94:	bl	10fbc <strlen@plt>
   13d98:	mov	ip, r4
   13d9c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13da0:	mov	lr, r6
   13da4:	mov	r3, r0
   13da8:	b	13dc8 <__assert_fail@plt+0x2d10>
   13dac:	mov	r0, #0
   13db0:	mov	sl, r3
   13db4:	str	r0, [fp, #-56]	; 0xffffffc8
   13db8:	mov	r0, #0
   13dbc:	b	13e34 <__assert_fail@plt+0x2d7c>
   13dc0:	mov	r0, #0
   13dc4:	str	r0, [fp, #-56]	; 0xffffffc8
   13dc8:	cmp	r5, r3
   13dcc:	bls	13de0 <__assert_fail@plt+0x2d28>
   13dd0:	ldr	r5, [fp, #-84]	; 0xffffffac
   13dd4:	mov	r0, #0
   13dd8:	mov	sl, r3
   13ddc:	b	13e34 <__assert_fail@plt+0x2d7c>
   13de0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13de4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13de8:	add	r0, r4, r7
   13dec:	mov	r5, lr
   13df0:	mov	r6, ip
   13df4:	mov	sl, r3
   13df8:	bl	10fb0 <bcmp@plt>
   13dfc:	ldr	r2, [sp, #92]	; 0x5c
   13e00:	cmp	r0, #0
   13e04:	ldr	r3, [fp, #-84]	; 0xffffffac
   13e08:	mov	r1, r0
   13e0c:	movwne	r1, #1
   13e10:	orr	r1, r1, r2
   13e14:	tst	r1, #1
   13e18:	beq	14944 <__assert_fail@plt+0x388c>
   13e1c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13e20:	clz	r0, r0
   13e24:	mov	lr, r5
   13e28:	mov	ip, r6
   13e2c:	mov	r5, r3
   13e30:	lsr	r0, r0, #5
   13e34:	str	r0, [fp, #-52]	; 0xffffffcc
   13e38:	ldrb	r6, [r4, r7]
   13e3c:	cmp	r6, #126	; 0x7e
   13e40:	bhi	14368 <__assert_fail@plt+0x32b0>
   13e44:	add	r3, pc, #16
   13e48:	mov	r9, #1
   13e4c:	mov	r2, #110	; 0x6e
   13e50:	mov	r0, #97	; 0x61
   13e54:	mov	r1, #0
   13e58:	ldr	pc, [r3, r6, lsl #2]
   13e5c:	andeq	r4, r1, ip, asr #3
   13e60:	andeq	r4, r1, r8, ror #6
   13e64:	andeq	r4, r1, r8, ror #6
   13e68:	andeq	r4, r1, r8, ror #6
   13e6c:	andeq	r4, r1, r8, ror #6
   13e70:	andeq	r4, r1, r8, ror #6
   13e74:	andeq	r4, r1, r8, ror #6
   13e78:	andeq	r4, r1, r8, ror #7
   13e7c:	andeq	r4, r1, ip, lsr #3
   13e80:	andeq	r4, r1, r4, lsr #3
   13e84:			; <UNDEFINED> instruction: 0x000141b8
   13e88:	ldrdeq	r4, [r1], -r0
   13e8c:	muleq	r1, ip, r1
   13e90:			; <UNDEFINED> instruction: 0x000141b4
   13e94:	andeq	r4, r1, r8, ror #6
   13e98:	andeq	r4, r1, r8, ror #6
   13e9c:	andeq	r4, r1, r8, ror #6
   13ea0:	andeq	r4, r1, r8, ror #6
   13ea4:	andeq	r4, r1, r8, ror #6
   13ea8:	andeq	r4, r1, r8, ror #6
   13eac:	andeq	r4, r1, r8, ror #6
   13eb0:	andeq	r4, r1, r8, ror #6
   13eb4:	andeq	r4, r1, r8, ror #6
   13eb8:	andeq	r4, r1, r8, ror #6
   13ebc:	andeq	r4, r1, r8, ror #6
   13ec0:	andeq	r4, r1, r8, ror #6
   13ec4:	andeq	r4, r1, r8, ror #6
   13ec8:	andeq	r4, r1, r8, ror #6
   13ecc:	andeq	r4, r1, r8, ror #6
   13ed0:	andeq	r4, r1, r8, ror #6
   13ed4:	andeq	r4, r1, r8, ror #6
   13ed8:	andeq	r4, r1, r8, ror #6
   13edc:	andeq	r4, r1, ip, asr #2
   13ee0:	andeq	r4, r1, r0, asr r1
   13ee4:	andeq	r4, r1, r0, asr r1
   13ee8:	andeq	r4, r1, r4, lsr r1
   13eec:	andeq	r4, r1, r0, asr r1
   13ef0:	andeq	r4, r1, r8, asr r0
   13ef4:	andeq	r4, r1, r0, asr r1
   13ef8:	ldrdeq	r4, [r1], -r8
   13efc:	andeq	r4, r1, r0, asr r1
   13f00:	andeq	r4, r1, r0, asr r1
   13f04:	andeq	r4, r1, r0, asr r1
   13f08:	andeq	r4, r1, r8, asr r0
   13f0c:	andeq	r4, r1, r8, asr r0
   13f10:	andeq	r4, r1, r8, asr r0
   13f14:	andeq	r4, r1, r8, asr r0
   13f18:	andeq	r4, r1, r8, asr r0
   13f1c:	andeq	r4, r1, r8, asr r0
   13f20:	andeq	r4, r1, r8, asr r0
   13f24:	andeq	r4, r1, r8, asr r0
   13f28:	andeq	r4, r1, r8, asr r0
   13f2c:	andeq	r4, r1, r8, asr r0
   13f30:	andeq	r4, r1, r8, asr r0
   13f34:	andeq	r4, r1, r8, asr r0
   13f38:	andeq	r4, r1, r8, asr r0
   13f3c:	andeq	r4, r1, r8, asr r0
   13f40:	andeq	r4, r1, r8, asr r0
   13f44:	andeq	r4, r1, r8, asr r0
   13f48:	andeq	r4, r1, r0, asr r1
   13f4c:	andeq	r4, r1, r0, asr r1
   13f50:	andeq	r4, r1, r0, asr r1
   13f54:	andeq	r4, r1, r0, asr r1
   13f58:	andeq	r4, r1, r4, lsr #5
   13f5c:	andeq	r4, r1, r8, ror #6
   13f60:	andeq	r4, r1, r8, asr r0
   13f64:	andeq	r4, r1, r8, asr r0
   13f68:	andeq	r4, r1, r8, asr r0
   13f6c:	andeq	r4, r1, r8, asr r0
   13f70:	andeq	r4, r1, r8, asr r0
   13f74:	andeq	r4, r1, r8, asr r0
   13f78:	andeq	r4, r1, r8, asr r0
   13f7c:	andeq	r4, r1, r8, asr r0
   13f80:	andeq	r4, r1, r8, asr r0
   13f84:	andeq	r4, r1, r8, asr r0
   13f88:	andeq	r4, r1, r8, asr r0
   13f8c:	andeq	r4, r1, r8, asr r0
   13f90:	andeq	r4, r1, r8, asr r0
   13f94:	andeq	r4, r1, r8, asr r0
   13f98:	andeq	r4, r1, r8, asr r0
   13f9c:	andeq	r4, r1, r8, asr r0
   13fa0:	andeq	r4, r1, r8, asr r0
   13fa4:	andeq	r4, r1, r8, asr r0
   13fa8:	andeq	r4, r1, r8, asr r0
   13fac:	andeq	r4, r1, r8, asr r0
   13fb0:	andeq	r4, r1, r8, asr r0
   13fb4:	andeq	r4, r1, r8, asr r0
   13fb8:	andeq	r4, r1, r8, asr r0
   13fbc:	andeq	r4, r1, r8, asr r0
   13fc0:	andeq	r4, r1, r8, asr r0
   13fc4:	andeq	r4, r1, r8, asr r0
   13fc8:	andeq	r4, r1, r0, asr r1
   13fcc:	andeq	r4, r1, r8, ror r1
   13fd0:	andeq	r4, r1, r8, asr r0
   13fd4:	andeq	r4, r1, r0, asr r1
   13fd8:	andeq	r4, r1, r8, asr r0
   13fdc:	andeq	r4, r1, r0, asr r1
   13fe0:	andeq	r4, r1, r8, asr r0
   13fe4:	andeq	r4, r1, r8, asr r0
   13fe8:	andeq	r4, r1, r8, asr r0
   13fec:	andeq	r4, r1, r8, asr r0
   13ff0:	andeq	r4, r1, r8, asr r0
   13ff4:	andeq	r4, r1, r8, asr r0
   13ff8:	andeq	r4, r1, r8, asr r0
   13ffc:	andeq	r4, r1, r8, asr r0
   14000:	andeq	r4, r1, r8, asr r0
   14004:	andeq	r4, r1, r8, asr r0
   14008:	andeq	r4, r1, r8, asr r0
   1400c:	andeq	r4, r1, r8, asr r0
   14010:	andeq	r4, r1, r8, asr r0
   14014:	andeq	r4, r1, r8, asr r0
   14018:	andeq	r4, r1, r8, asr r0
   1401c:	andeq	r4, r1, r8, asr r0
   14020:	andeq	r4, r1, r8, asr r0
   14024:	andeq	r4, r1, r8, asr r0
   14028:	andeq	r4, r1, r8, asr r0
   1402c:	andeq	r4, r1, r8, asr r0
   14030:	andeq	r4, r1, r8, asr r0
   14034:	andeq	r4, r1, r8, asr r0
   14038:	andeq	r4, r1, r8, asr r0
   1403c:	andeq	r4, r1, r8, asr r0
   14040:	andeq	r4, r1, r8, asr r0
   14044:	andeq	r4, r1, r8, asr r0
   14048:	andeq	r4, r1, ip, lsl #2
   1404c:	andeq	r4, r1, r0, asr r1
   14050:	andeq	r4, r1, ip, lsl #2
   14054:	andeq	r4, r1, r4, lsr r1
   14058:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1405c:	tst	r0, #1
   14060:	bne	1408c <__assert_fail@plt+0x2fd4>
   14064:	ldr	r1, [fp, #16]
   14068:	ubfx	r0, r6, #5, #3
   1406c:	mov	r2, #1
   14070:	ldr	r0, [r1, r0, lsl #2]
   14074:	and	r1, r6, #31
   14078:	tst	r0, r2, lsl r1
   1407c:	beq	1408c <__assert_fail@plt+0x2fd4>
   14080:	mov	r0, r6
   14084:	mov	r1, r9
   14088:	b	140a0 <__assert_fail@plt+0x2fe8>
   1408c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14090:	mov	r1, r9
   14094:	cmp	r0, #0
   14098:	mov	r0, r6
   1409c:	beq	147ec <__assert_fail@plt+0x3734>
   140a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   140a4:	tst	r2, #1
   140a8:	bne	14988 <__assert_fail@plt+0x38d0>
   140ac:	ldr	r2, [fp, #-68]	; 0xffffffbc
   140b0:	subs	r2, r2, #2
   140b4:	movwne	r2, #1
   140b8:	orr	r2, r2, lr
   140bc:	tst	r2, #1
   140c0:	bne	140f8 <__assert_fail@plt+0x3040>
   140c4:	cmp	r8, ip
   140c8:	mov	lr, #1
   140cc:	movcc	r2, #39	; 0x27
   140d0:	strbcc	r2, [r5, r8]
   140d4:	add	r2, r8, #1
   140d8:	cmp	r2, ip
   140dc:	movcc	r3, #36	; 0x24
   140e0:	strbcc	r3, [r5, r2]
   140e4:	add	r2, r8, #2
   140e8:	add	r8, r8, #3
   140ec:	cmp	r2, ip
   140f0:	movcc	r3, #39	; 0x27
   140f4:	strbcc	r3, [r5, r2]
   140f8:	cmp	r8, ip
   140fc:	movcc	r2, #92	; 0x5c
   14100:	strbcc	r2, [r5, r8]
   14104:	add	r8, r8, #1
   14108:	b	1482c <__assert_fail@plt+0x3774>
   1410c:	cmp	sl, #1
   14110:	beq	14134 <__assert_fail@plt+0x307c>
   14114:	mov	r9, #0
   14118:	cmn	sl, #1
   1411c:	bne	14140 <__assert_fail@plt+0x3088>
   14120:	ldrb	r0, [r4, #1]
   14124:	cmp	r0, #0
   14128:	beq	14134 <__assert_fail@plt+0x307c>
   1412c:	mvn	sl, #0
   14130:	b	14140 <__assert_fail@plt+0x3088>
   14134:	mov	r9, #0
   14138:	cmp	r7, #0
   1413c:	beq	1414c <__assert_fail@plt+0x3094>
   14140:	mov	r0, #0
   14144:	str	r0, [fp, #-56]	; 0xffffffc8
   14148:	b	14058 <__assert_fail@plt+0x2fa0>
   1414c:	mov	r1, #1
   14150:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14154:	cmp	r0, #2
   14158:	bne	14170 <__assert_fail@plt+0x30b8>
   1415c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14160:	mov	r9, r1
   14164:	tst	r0, #1
   14168:	beq	14058 <__assert_fail@plt+0x2fa0>
   1416c:	b	14988 <__assert_fail@plt+0x38d0>
   14170:	mov	r9, r1
   14174:	b	14058 <__assert_fail@plt+0x2fa0>
   14178:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1417c:	cmp	r0, #2
   14180:	bne	143c4 <__assert_fail@plt+0x330c>
   14184:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14188:	tst	r0, #1
   1418c:	bne	14988 <__assert_fail@plt+0x38d0>
   14190:	mov	r0, #0
   14194:	str	r0, [fp, #-56]	; 0xffffffc8
   14198:	b	143dc <__assert_fail@plt+0x3324>
   1419c:	mov	r0, #102	; 0x66
   141a0:	b	143e8 <__assert_fail@plt+0x3330>
   141a4:	mov	r2, #116	; 0x74
   141a8:	b	141b8 <__assert_fail@plt+0x3100>
   141ac:	mov	r0, #98	; 0x62
   141b0:	b	143e8 <__assert_fail@plt+0x3330>
   141b4:	mov	r2, #114	; 0x72
   141b8:	ldr	r0, [sp, #68]	; 0x44
   141bc:	tst	r0, #1
   141c0:	mov	r0, r2
   141c4:	bne	143e8 <__assert_fail@plt+0x3330>
   141c8:	b	14988 <__assert_fail@plt+0x38d0>
   141cc:	ldr	r0, [sp, #84]	; 0x54
   141d0:	tst	r0, #1
   141d4:	beq	14408 <__assert_fail@plt+0x3350>
   141d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   141dc:	tst	r0, #1
   141e0:	bne	14a74 <__assert_fail@plt+0x39bc>
   141e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141e8:	mov	r2, sl
   141ec:	subs	r0, r0, #2
   141f0:	movwne	r0, #1
   141f4:	orr	r0, r0, lr
   141f8:	tst	r0, #1
   141fc:	bne	14234 <__assert_fail@plt+0x317c>
   14200:	cmp	r8, ip
   14204:	mov	lr, #1
   14208:	movcc	r0, #39	; 0x27
   1420c:	strbcc	r0, [r5, r8]
   14210:	add	r0, r8, #1
   14214:	cmp	r0, ip
   14218:	movcc	r1, #36	; 0x24
   1421c:	strbcc	r1, [r5, r0]
   14220:	add	r0, r8, #2
   14224:	add	r8, r8, #3
   14228:	cmp	r0, ip
   1422c:	movcc	r1, #39	; 0x27
   14230:	strbcc	r1, [r5, r0]
   14234:	mov	r1, #1
   14238:	cmp	r8, ip
   1423c:	mov	r9, #0
   14240:	mov	r6, #48	; 0x30
   14244:	str	r1, [fp, #-56]	; 0xffffffc8
   14248:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1424c:	movcc	r0, #92	; 0x5c
   14250:	strbcc	r0, [r5, r8]
   14254:	add	r0, r8, #1
   14258:	cmp	r1, #2
   1425c:	beq	14564 <__assert_fail@plt+0x34ac>
   14260:	add	r1, r7, #1
   14264:	cmp	r1, r2
   14268:	bcs	14564 <__assert_fail@plt+0x34ac>
   1426c:	ldrb	r1, [r4, r1]
   14270:	sub	r1, r1, #48	; 0x30
   14274:	uxtb	r1, r1
   14278:	cmp	r1, #9
   1427c:	bhi	14564 <__assert_fail@plt+0x34ac>
   14280:	cmp	r0, ip
   14284:	movcc	r1, #48	; 0x30
   14288:	strbcc	r1, [r5, r0]
   1428c:	add	r0, r8, #2
   14290:	add	r8, r8, #3
   14294:	cmp	r0, ip
   14298:	movcc	r1, #48	; 0x30
   1429c:	strbcc	r1, [r5, r0]
   142a0:	b	14058 <__assert_fail@plt+0x2fa0>
   142a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142a8:	mov	r6, #63	; 0x3f
   142ac:	cmp	r0, #5
   142b0:	beq	1456c <__assert_fail@plt+0x34b4>
   142b4:	mov	r1, #0
   142b8:	cmp	r0, #2
   142bc:	str	r1, [fp, #-56]	; 0xffffffc8
   142c0:	bne	14620 <__assert_fail@plt+0x3568>
   142c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142c8:	mov	r9, #0
   142cc:	b	14164 <__assert_fail@plt+0x30ac>
   142d0:	mov	r0, #118	; 0x76
   142d4:	b	143e8 <__assert_fail@plt+0x3330>
   142d8:	mov	r0, #1
   142dc:	mov	r6, #39	; 0x27
   142e0:	str	r0, [sp, #60]	; 0x3c
   142e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142e8:	cmp	r0, #2
   142ec:	bne	14360 <__assert_fail@plt+0x32a8>
   142f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142f4:	tst	r0, #1
   142f8:	bne	14988 <__assert_fail@plt+0x38d0>
   142fc:	ldr	r2, [sp, #56]	; 0x38
   14300:	clz	r1, ip
   14304:	mov	lr, #0
   14308:	lsr	r1, r1, #5
   1430c:	cmp	r2, #0
   14310:	mov	r0, r2
   14314:	movwne	r0, #1
   14318:	orrs	r0, r0, r1
   1431c:	moveq	r2, ip
   14320:	moveq	ip, r0
   14324:	cmp	r8, ip
   14328:	str	r2, [sp, #56]	; 0x38
   1432c:	movcc	r0, #39	; 0x27
   14330:	strbcc	r0, [r5, r8]
   14334:	add	r0, r8, #1
   14338:	cmp	r0, ip
   1433c:	movcc	r1, #92	; 0x5c
   14340:	strbcc	r1, [r5, r0]
   14344:	add	r0, r8, #2
   14348:	add	r8, r8, #3
   1434c:	cmp	r0, ip
   14350:	movcc	r1, #39	; 0x27
   14354:	strbcc	r1, [r5, r0]
   14358:	mov	r0, #0
   1435c:	str	r0, [fp, #-56]	; 0xffffffc8
   14360:	mov	r9, #1
   14364:	b	14058 <__assert_fail@plt+0x2fa0>
   14368:	ldr	r0, [sp, #40]	; 0x28
   1436c:	str	lr, [sp, #44]	; 0x2c
   14370:	str	ip, [sp, #88]	; 0x58
   14374:	cmp	r0, #1
   14378:	bne	14428 <__assert_fail@plt+0x3370>
   1437c:	str	sl, [sp, #36]	; 0x24
   14380:	bl	10f98 <__ctype_b_loc@plt>
   14384:	ldr	r0, [r0]
   14388:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1438c:	mov	r1, #1
   14390:	add	r0, r0, r6, lsl #1
   14394:	ldrb	r0, [r0, #1]
   14398:	ubfx	r9, r0, #6, #1
   1439c:	ldr	r0, [sp, #52]	; 0x34
   143a0:	ldr	lr, [sp, #44]	; 0x2c
   143a4:	cmp	r1, #1
   143a8:	orr	r3, r9, r0
   143ac:	bhi	14628 <__assert_fail@plt+0x3570>
   143b0:	tst	r3, #1
   143b4:	beq	14628 <__assert_fail@plt+0x3570>
   143b8:	ldr	sl, [sp, #36]	; 0x24
   143bc:	ldr	ip, [sp, #88]	; 0x58
   143c0:	b	14058 <__assert_fail@plt+0x2fa0>
   143c4:	ldr	r1, [sp, #48]	; 0x30
   143c8:	mov	r0, #0
   143cc:	str	r0, [fp, #-56]	; 0xffffffc8
   143d0:	mov	r0, #92	; 0x5c
   143d4:	cmp	r1, #0
   143d8:	beq	143e8 <__assert_fail@plt+0x3330>
   143dc:	mov	r6, #92	; 0x5c
   143e0:	mov	r9, #0
   143e4:	b	147ec <__assert_fail@plt+0x3734>
   143e8:	mov	r1, #0
   143ec:	mov	r9, #0
   143f0:	str	r1, [fp, #-56]	; 0xffffffc8
   143f4:	ldr	r1, [sp, #84]	; 0x54
   143f8:	tst	r1, #1
   143fc:	mov	r1, #0
   14400:	beq	14058 <__assert_fail@plt+0x2fa0>
   14404:	b	140a0 <__assert_fail@plt+0x2fe8>
   14408:	ldr	r0, [sp, #32]
   1440c:	mov	r6, #0
   14410:	mov	r9, #0
   14414:	cmp	r0, #0
   14418:	mov	r0, #0
   1441c:	str	r0, [fp, #-56]	; 0xffffffc8
   14420:	beq	14058 <__assert_fail@plt+0x2fa0>
   14424:	b	14844 <__assert_fail@plt+0x378c>
   14428:	mov	r0, #0
   1442c:	cmn	sl, #1
   14430:	sub	r3, fp, #40	; 0x28
   14434:	str	r0, [fp, #-36]	; 0xffffffdc
   14438:	str	r0, [fp, #-40]	; 0xffffffd8
   1443c:	bne	14454 <__assert_fail@plt+0x339c>
   14440:	mov	r0, r4
   14444:	bl	10fbc <strlen@plt>
   14448:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1444c:	sub	r3, fp, #40	; 0x28
   14450:	mov	sl, r0
   14454:	ldr	r0, [sp, #72]	; 0x48
   14458:	mov	r9, #1
   1445c:	mov	r1, #0
   14460:	str	sl, [sp, #36]	; 0x24
   14464:	add	r0, r0, r7
   14468:	str	r0, [sp, #20]
   1446c:	add	r0, r1, r7
   14470:	str	r1, [sp, #24]
   14474:	add	r1, r4, r0
   14478:	mov	r4, r0
   1447c:	sub	r2, sl, r0
   14480:	sub	r0, fp, #44	; 0x2c
   14484:	bl	16694 <__assert_fail@plt+0x55dc>
   14488:	cmp	r0, #0
   1448c:	beq	14898 <__assert_fail@plt+0x37e0>
   14490:	cmn	r0, #1
   14494:	beq	14850 <__assert_fail@plt+0x3798>
   14498:	ldr	r2, [sp, #36]	; 0x24
   1449c:	cmn	r0, #2
   144a0:	beq	14858 <__assert_fail@plt+0x37a0>
   144a4:	ldr	r2, [sp, #64]	; 0x40
   144a8:	ldr	ip, [sp, #88]	; 0x58
   144ac:	ldr	r4, [sp, #84]	; 0x54
   144b0:	ldr	lr, [fp, #-48]	; 0xffffffd0
   144b4:	cmp	r0, #2
   144b8:	mov	r1, #0
   144bc:	movwcc	r1, #1
   144c0:	eor	r2, r2, #1
   144c4:	orrs	r1, r2, r1
   144c8:	bne	14518 <__assert_fail@plt+0x3460>
   144cc:	ldr	r1, [sp, #24]
   144d0:	ldr	r2, [sp, #20]
   144d4:	add	r1, r2, r1
   144d8:	sub	r2, r0, #1
   144dc:	ldrb	r3, [r1]
   144e0:	sub	r5, r3, #94	; 0x5e
   144e4:	cmp	r5, #30
   144e8:	bhi	14500 <__assert_fail@plt+0x3448>
   144ec:	mov	r4, #1
   144f0:	mov	sl, #1073741829	; 0x40000005
   144f4:	tst	sl, r4, lsl r5
   144f8:	ldr	r4, [sp, #84]	; 0x54
   144fc:	bne	14960 <__assert_fail@plt+0x38a8>
   14500:	sub	r3, r3, #91	; 0x5b
   14504:	cmp	r3, #2
   14508:	bcc	14960 <__assert_fail@plt+0x38a8>
   1450c:	add	r1, r1, #1
   14510:	subs	r2, r2, #1
   14514:	bne	144dc <__assert_fail@plt+0x3424>
   14518:	ldr	r5, [sp, #24]
   1451c:	str	lr, [fp, #-48]	; 0xffffffd0
   14520:	add	r5, r0, r5
   14524:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14528:	bl	10f08 <iswprint@plt>
   1452c:	cmp	r0, #0
   14530:	sub	r4, fp, #40	; 0x28
   14534:	movwne	r0, #1
   14538:	and	r9, r9, r0
   1453c:	mov	r0, r4
   14540:	bl	10ec0 <mbsinit@plt>
   14544:	mov	r1, r5
   14548:	mov	r3, r4
   1454c:	ldr	sl, [sp, #36]	; 0x24
   14550:	ldr	r5, [fp, #-84]	; 0xffffffac
   14554:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14558:	cmp	r0, #0
   1455c:	beq	1446c <__assert_fail@plt+0x33b4>
   14560:	b	1439c <__assert_fail@plt+0x32e4>
   14564:	mov	r8, r0
   14568:	b	14058 <__assert_fail@plt+0x2fa0>
   1456c:	mov	r0, #0
   14570:	str	r0, [fp, #-56]	; 0xffffffc8
   14574:	ldr	r0, [sp, #28]
   14578:	cmp	r0, #0
   1457c:	beq	14620 <__assert_fail@plt+0x3568>
   14580:	add	r0, r7, #2
   14584:	mov	r1, sl
   14588:	cmp	r0, sl
   1458c:	bcs	14620 <__assert_fail@plt+0x3568>
   14590:	add	r1, r7, r4
   14594:	ldrb	r1, [r1, #1]
   14598:	cmp	r1, #63	; 0x3f
   1459c:	bne	14620 <__assert_fail@plt+0x3568>
   145a0:	ldrb	r9, [r4, r0]
   145a4:	sub	r2, r9, #33	; 0x21
   145a8:	cmp	r2, #29
   145ac:	bhi	14620 <__assert_fail@plt+0x3568>
   145b0:	mov	r1, r4
   145b4:	movw	r4, #20929	; 0x51c1
   145b8:	mov	r3, #1
   145bc:	movt	r4, #14336	; 0x3800
   145c0:	tst	r4, r3, lsl r2
   145c4:	beq	148ac <__assert_fail@plt+0x37f4>
   145c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   145cc:	tst	r2, #1
   145d0:	bne	14a7c <__assert_fail@plt+0x39c4>
   145d4:	cmp	r8, ip
   145d8:	mov	r4, r1
   145dc:	mov	r7, r0
   145e0:	mov	r6, r9
   145e4:	movcc	r2, #63	; 0x3f
   145e8:	strbcc	r2, [r5, r8]
   145ec:	add	r2, r8, #1
   145f0:	cmp	r2, ip
   145f4:	movcc	r3, #34	; 0x22
   145f8:	strbcc	r3, [r5, r2]
   145fc:	add	r2, r8, #2
   14600:	cmp	r2, ip
   14604:	movcc	r3, #34	; 0x22
   14608:	strbcc	r3, [r5, r2]
   1460c:	add	r2, r8, #3
   14610:	add	r8, r8, #4
   14614:	cmp	r2, ip
   14618:	movcc	r3, #63	; 0x3f
   1461c:	strbcc	r3, [r5, r2]
   14620:	mov	r9, #0
   14624:	b	14058 <__assert_fail@plt+0x2fa0>
   14628:	ldr	sl, [sp, #36]	; 0x24
   1462c:	add	r0, r1, r7
   14630:	mov	r2, #0
   14634:	str	r3, [sp, #24]
   14638:	str	r0, [fp, #-56]	; 0xffffffc8
   1463c:	tst	r3, #1
   14640:	beq	1466c <__assert_fail@plt+0x35b4>
   14644:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14648:	tst	r0, #1
   1464c:	beq	14734 <__assert_fail@plt+0x367c>
   14650:	ldr	r1, [sp, #88]	; 0x58
   14654:	mov	r0, r3
   14658:	cmp	r8, r1
   1465c:	movcc	r1, #92	; 0x5c
   14660:	strbcc	r1, [r5, r8]
   14664:	add	r8, r8, #1
   14668:	b	14738 <__assert_fail@plt+0x3680>
   1466c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14670:	tst	r1, #1
   14674:	bne	14984 <__assert_fail@plt+0x38cc>
   14678:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1467c:	subs	r2, r1, #2
   14680:	movwne	r2, #1
   14684:	orr	r2, r2, lr
   14688:	tst	r2, #1
   1468c:	bne	146d0 <__assert_fail@plt+0x3618>
   14690:	ldr	r1, [sp, #88]	; 0x58
   14694:	add	r2, r8, #1
   14698:	mov	lr, #1
   1469c:	cmp	r8, r1
   146a0:	movcc	r1, #39	; 0x27
   146a4:	strbcc	r1, [r5, r8]
   146a8:	ldr	r1, [sp, #88]	; 0x58
   146ac:	cmp	r2, r1
   146b0:	movcc	r1, #36	; 0x24
   146b4:	strbcc	r1, [r5, r2]
   146b8:	ldr	r1, [sp, #88]	; 0x58
   146bc:	add	r2, r8, #2
   146c0:	add	r8, r8, #3
   146c4:	cmp	r2, r1
   146c8:	movcc	r1, #39	; 0x27
   146cc:	strbcc	r1, [r5, r2]
   146d0:	ldr	r1, [sp, #88]	; 0x58
   146d4:	add	r2, r8, #1
   146d8:	mov	r0, r3
   146dc:	cmp	r8, r1
   146e0:	movcc	r1, #92	; 0x5c
   146e4:	strbcc	r1, [r5, r8]
   146e8:	ldr	r1, [sp, #88]	; 0x58
   146ec:	cmp	r2, r1
   146f0:	bcs	14704 <__assert_fail@plt+0x364c>
   146f4:	uxtb	r3, r6
   146f8:	mov	r1, #48	; 0x30
   146fc:	orr	r3, r1, r3, lsr #6
   14700:	strb	r3, [r5, r2]
   14704:	ldr	r1, [sp, #88]	; 0x58
   14708:	add	r2, r8, #2
   1470c:	add	r8, r8, #3
   14710:	cmp	r2, r1
   14714:	lsrcc	r3, r6, #3
   14718:	movcc	r1, #6
   1471c:	bficc	r3, r1, #3, #29
   14720:	mov	r1, #6
   14724:	bfi	r6, r1, #3, #29
   14728:	strbcc	r3, [r5, r2]
   1472c:	mov	r2, #1
   14730:	b	14740 <__assert_fail@plt+0x3688>
   14734:	mov	r0, r3
   14738:	mov	r1, #0
   1473c:	str	r1, [fp, #-52]	; 0xffffffcc
   14740:	mov	ip, r2
   14744:	and	r1, r2, #1
   14748:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1474c:	add	r3, r7, #1
   14750:	cmp	r2, r3
   14754:	bls	147dc <__assert_fail@plt+0x3724>
   14758:	cmp	r1, #0
   1475c:	mvn	r5, lr
   14760:	movwne	r1, #1
   14764:	orr	r5, r5, r1
   14768:	tst	r5, #1
   1476c:	bne	147b0 <__assert_fail@plt+0x36f8>
   14770:	ldr	r1, [sp, #88]	; 0x58
   14774:	ldr	r5, [fp, #-84]	; 0xffffffac
   14778:	mov	r2, r4
   1477c:	ldr	r4, [sp, #88]	; 0x58
   14780:	ldr	r0, [sp, #24]
   14784:	mov	lr, #0
   14788:	cmp	r8, r1
   1478c:	movcc	r1, #39	; 0x27
   14790:	strbcc	r1, [r5, r8]
   14794:	add	r1, r8, #1
   14798:	add	r8, r8, #2
   1479c:	cmp	r1, r4
   147a0:	movcc	r4, #39	; 0x27
   147a4:	strbcc	r4, [r5, r1]
   147a8:	mov	r4, r2
   147ac:	b	147b4 <__assert_fail@plt+0x36fc>
   147b0:	ldr	r5, [fp, #-84]	; 0xffffffac
   147b4:	ldr	r1, [sp, #88]	; 0x58
   147b8:	mov	r2, ip
   147bc:	cmp	r8, r1
   147c0:	ldr	r1, [sp, #72]	; 0x48
   147c4:	strbcc	r6, [r5, r8]
   147c8:	add	r8, r8, #1
   147cc:	ldrb	r6, [r1, r7]
   147d0:	mov	r7, r3
   147d4:	mov	r3, r0
   147d8:	b	1463c <__assert_fail@plt+0x3584>
   147dc:	ldr	ip, [sp, #88]	; 0x58
   147e0:	cmp	r1, #0
   147e4:	movwne	r1, #1
   147e8:	str	r1, [fp, #-56]	; 0xffffffc8
   147ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   147f0:	cmp	r0, #0
   147f4:	bne	14824 <__assert_fail@plt+0x376c>
   147f8:	tst	lr, #1
   147fc:	beq	14824 <__assert_fail@plt+0x376c>
   14800:	cmp	r8, ip
   14804:	mov	lr, #0
   14808:	movcc	r0, #39	; 0x27
   1480c:	strbcc	r0, [r5, r8]
   14810:	add	r0, r8, #1
   14814:	add	r8, r8, #2
   14818:	cmp	r0, ip
   1481c:	movcc	r1, #39	; 0x27
   14820:	strbcc	r1, [r5, r0]
   14824:	mov	r1, r9
   14828:	mov	r0, r6
   1482c:	cmp	r8, ip
   14830:	strbcc	r0, [r5, r8]
   14834:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14838:	add	r8, r8, #1
   1483c:	and	r0, r0, r1
   14840:	str	r0, [fp, #-48]	; 0xffffffd0
   14844:	mov	r3, sl
   14848:	add	r7, r7, #1
   1484c:	b	13d3c <__assert_fail@plt+0x2c84>
   14850:	mov	r9, #0
   14854:	b	14898 <__assert_fail@plt+0x37e0>
   14858:	mov	r9, #0
   1485c:	cmp	r2, r4
   14860:	bls	14898 <__assert_fail@plt+0x37e0>
   14864:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14868:	ldr	r1, [sp, #24]
   1486c:	add	r0, r4, r7
   14870:	mov	r3, r1
   14874:	ldrb	r1, [r0, r1]
   14878:	cmp	r1, #0
   1487c:	beq	148a4 <__assert_fail@plt+0x37ec>
   14880:	add	r3, r3, #1
   14884:	add	r1, r7, r3
   14888:	cmp	r1, r2
   1488c:	mov	r1, r3
   14890:	bcc	14870 <__assert_fail@plt+0x37b8>
   14894:	b	1439c <__assert_fail@plt+0x32e4>
   14898:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1489c:	ldr	r1, [sp, #24]
   148a0:	b	1439c <__assert_fail@plt+0x32e4>
   148a4:	mov	r1, r3
   148a8:	b	1439c <__assert_fail@plt+0x32e4>
   148ac:	mov	r9, #0
   148b0:	mov	r4, r1
   148b4:	b	14058 <__assert_fail@plt+0x2fa0>
   148b8:	mov	sl, r7
   148bc:	b	148c4 <__assert_fail@plt+0x380c>
   148c0:	mvn	sl, #0
   148c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   148c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   148cc:	eor	r0, r1, #2
   148d0:	orr	r0, r0, r8
   148d4:	clz	r0, r0
   148d8:	lsr	r0, r0, #5
   148dc:	tst	r2, r0
   148e0:	bne	14988 <__assert_fail@plt+0x38d0>
   148e4:	subs	r0, r1, #2
   148e8:	movwne	r0, #1
   148ec:	orr	r0, r2, r0
   148f0:	tst	r0, #1
   148f4:	ldreq	r0, [sp, #60]	; 0x3c
   148f8:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   148fc:	eoreq	r0, r0, #1
   14900:	tsteq	r0, #1
   14904:	bne	14a1c <__assert_fail@plt+0x3964>
   14908:	tst	r1, #1
   1490c:	bne	149e8 <__assert_fail@plt+0x3930>
   14910:	ldr	r6, [sp, #56]	; 0x38
   14914:	mov	r9, #0
   14918:	cmp	r6, #0
   1491c:	beq	14a14 <__assert_fail@plt+0x395c>
   14920:	ldr	r0, [sp, #84]	; 0x54
   14924:	mov	r1, #0
   14928:	mov	r7, #2
   1492c:	cmp	ip, #0
   14930:	str	r1, [fp, #-48]	; 0xffffffd0
   14934:	mov	r1, #0
   14938:	str	r1, [fp, #-76]	; 0xffffffb4
   1493c:	beq	13aa4 <__assert_fail@plt+0x29ec>
   14940:	b	14a1c <__assert_fail@plt+0x3964>
   14944:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14948:	ldr	r1, [fp, #12]
   1494c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14950:	mov	r5, r3
   14954:	mov	ip, r6
   14958:	mov	r3, sl
   1495c:	b	149ac <__assert_fail@plt+0x38f4>
   14960:	tst	r4, #1
   14964:	ldr	r5, [fp, #-84]	; 0xffffffac
   14968:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1496c:	ldr	r1, [fp, #12]
   14970:	ldr	r3, [sp, #36]	; 0x24
   14974:	mov	r0, #2
   14978:	movwne	r0, #4
   1497c:	mov	r2, r0
   14980:	b	149ac <__assert_fail@plt+0x38f4>
   14984:	ldr	ip, [sp, #88]	; 0x58
   14988:	ldr	r1, [sp, #84]	; 0x54
   1498c:	mov	r0, #2
   14990:	tst	r1, #1
   14994:	movwne	r0, #4
   14998:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1499c:	ldr	r1, [fp, #12]
   149a0:	mov	r3, sl
   149a4:	cmp	r2, #2
   149a8:	moveq	r2, r0
   149ac:	mov	r0, #0
   149b0:	bic	r1, r1, #2
   149b4:	str	r2, [sp]
   149b8:	mov	r2, r4
   149bc:	str	r0, [sp, #8]
   149c0:	ldr	r0, [sp, #76]	; 0x4c
   149c4:	str	r1, [sp, #4]
   149c8:	mov	r1, ip
   149cc:	str	r0, [sp, #12]
   149d0:	ldr	r0, [sp, #80]	; 0x50
   149d4:	str	r0, [sp, #16]
   149d8:	mov	r0, r5
   149dc:	bl	13a18 <__assert_fail@plt+0x2960>
   149e0:	mov	r8, r0
   149e4:	b	14a68 <__assert_fail@plt+0x39b0>
   149e8:	mov	r0, #5
   149ec:	ldr	r1, [sp, #56]	; 0x38
   149f0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   149f4:	mov	r3, sl
   149f8:	str	r0, [sp]
   149fc:	ldr	r0, [fp, #12]
   14a00:	str	r0, [sp, #4]
   14a04:	ldr	r0, [fp, #16]
   14a08:	str	r0, [sp, #8]
   14a0c:	ldr	r0, [sp, #76]	; 0x4c
   14a10:	b	149cc <__assert_fail@plt+0x3914>
   14a14:	mov	r0, #0
   14a18:	str	r0, [fp, #-76]	; 0xffffffb4
   14a1c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14a20:	cmp	r1, #0
   14a24:	beq	14a5c <__assert_fail@plt+0x39a4>
   14a28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14a2c:	tst	r0, #1
   14a30:	bne	14a5c <__assert_fail@plt+0x39a4>
   14a34:	ldrb	r0, [r1]
   14a38:	cmp	r0, #0
   14a3c:	beq	14a5c <__assert_fail@plt+0x39a4>
   14a40:	add	r1, r1, #1
   14a44:	cmp	r8, ip
   14a48:	strbcc	r0, [r5, r8]
   14a4c:	add	r8, r8, #1
   14a50:	ldrb	r0, [r1], #1
   14a54:	cmp	r0, #0
   14a58:	bne	14a44 <__assert_fail@plt+0x398c>
   14a5c:	cmp	r8, ip
   14a60:	movcc	r0, #0
   14a64:	strbcc	r0, [r5, r8]
   14a68:	mov	r0, r8
   14a6c:	sub	sp, fp, #28
   14a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a74:	mov	r0, #4
   14a78:	b	14998 <__assert_fail@plt+0x38e0>
   14a7c:	mov	r4, r1
   14a80:	b	14988 <__assert_fail@plt+0x38d0>
   14a84:	bl	110a0 <abort@plt>
   14a88:	mov	r3, r2
   14a8c:	mov	r2, #0
   14a90:	b	14a94 <__assert_fail@plt+0x39dc>
   14a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a98:	add	fp, sp, #28
   14a9c:	sub	sp, sp, #36	; 0x24
   14aa0:	movw	r8, #46192	; 0xb470
   14aa4:	cmp	r3, #0
   14aa8:	mov	r4, r2
   14aac:	str	r2, [sp, #24]
   14ab0:	mov	r5, r1
   14ab4:	mov	r6, r0
   14ab8:	str	r0, [sp, #20]
   14abc:	movt	r8, #2
   14ac0:	movne	r8, r3
   14ac4:	bl	10fd4 <__errno_location@plt>
   14ac8:	str	r0, [sp, #28]
   14acc:	ldr	r1, [r8, #40]	; 0x28
   14ad0:	ldr	r2, [r8, #44]	; 0x2c
   14ad4:	ldr	r7, [r0]
   14ad8:	cmp	r4, #0
   14adc:	add	sl, r8, #8
   14ae0:	mov	r0, #0
   14ae4:	ldm	r8, {r3, r9}
   14ae8:	orreq	r9, r9, #1
   14aec:	stm	sp, {r3, r9, sl}
   14af0:	str	r1, [sp, #12]
   14af4:	str	r2, [sp, #16]
   14af8:	mov	r1, #0
   14afc:	mov	r2, r6
   14b00:	mov	r3, r5
   14b04:	str	r7, [sp, #32]
   14b08:	mov	r7, r5
   14b0c:	bl	13a18 <__assert_fail@plt+0x2960>
   14b10:	add	r4, r0, #1
   14b14:	mov	r5, r0
   14b18:	mov	r0, r4
   14b1c:	bl	15870 <__assert_fail@plt+0x47b8>
   14b20:	mov	r6, r0
   14b24:	ldr	r0, [r8]
   14b28:	ldr	r2, [r8, #44]	; 0x2c
   14b2c:	ldr	r1, [r8, #40]	; 0x28
   14b30:	mov	r3, r7
   14b34:	stm	sp, {r0, r9, sl}
   14b38:	str	r2, [sp, #16]
   14b3c:	ldr	r2, [sp, #20]
   14b40:	str	r1, [sp, #12]
   14b44:	mov	r0, r6
   14b48:	mov	r1, r4
   14b4c:	bl	13a18 <__assert_fail@plt+0x2960>
   14b50:	ldr	r0, [sp, #24]
   14b54:	ldr	r1, [sp, #32]
   14b58:	ldr	r2, [sp, #28]
   14b5c:	cmp	r0, #0
   14b60:	str	r1, [r2]
   14b64:	strne	r5, [r0]
   14b68:	mov	r0, r6
   14b6c:	sub	sp, fp, #28
   14b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b78:	add	fp, sp, #24
   14b7c:	movw	r5, #37116	; 0x90fc
   14b80:	movw	r8, #37112	; 0x90f8
   14b84:	movt	r5, #2
   14b88:	movt	r8, #2
   14b8c:	ldr	r0, [r5]
   14b90:	ldr	r4, [r8]
   14b94:	cmp	r0, #2
   14b98:	blt	14bc4 <__assert_fail@plt+0x3b0c>
   14b9c:	add	r7, r4, #12
   14ba0:	mov	r6, #0
   14ba4:	ldr	r0, [r7, r6, lsl #3]
   14ba8:	bl	137bc <__assert_fail@plt+0x2704>
   14bac:	ldr	r1, [r5]
   14bb0:	add	r2, r6, #2
   14bb4:	add	r0, r6, #1
   14bb8:	mov	r6, r0
   14bbc:	cmp	r2, r1
   14bc0:	blt	14ba4 <__assert_fail@plt+0x3aec>
   14bc4:	ldr	r0, [r4, #4]
   14bc8:	movw	r9, #46240	; 0xb4a0
   14bcc:	movw	r7, #37120	; 0x9100
   14bd0:	movt	r9, #2
   14bd4:	movt	r7, #2
   14bd8:	cmp	r0, r9
   14bdc:	beq	14bec <__assert_fail@plt+0x3b34>
   14be0:	bl	137bc <__assert_fail@plt+0x2704>
   14be4:	mov	r0, #256	; 0x100
   14be8:	stm	r7, {r0, r9}
   14bec:	cmp	r4, r7
   14bf0:	beq	14c00 <__assert_fail@plt+0x3b48>
   14bf4:	mov	r0, r4
   14bf8:	bl	137bc <__assert_fail@plt+0x2704>
   14bfc:	str	r7, [r8]
   14c00:	mov	r0, #1
   14c04:	str	r0, [r5]
   14c08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c0c:	movw	r3, #46192	; 0xb470
   14c10:	mvn	r2, #0
   14c14:	movt	r3, #2
   14c18:	b	14c1c <__assert_fail@plt+0x3b64>
   14c1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c20:	add	fp, sp, #28
   14c24:	sub	sp, sp, #44	; 0x2c
   14c28:	mov	r7, r3
   14c2c:	str	r2, [sp, #36]	; 0x24
   14c30:	str	r1, [sp, #32]
   14c34:	mov	r5, r0
   14c38:	bl	10fd4 <__errno_location@plt>
   14c3c:	cmp	r5, #0
   14c40:	bmi	14db0 <__assert_fail@plt+0x3cf8>
   14c44:	cmn	r5, #-2147483647	; 0x80000001
   14c48:	beq	14db0 <__assert_fail@plt+0x3cf8>
   14c4c:	movw	r8, #37116	; 0x90fc
   14c50:	movw	r4, #37112	; 0x90f8
   14c54:	str	r0, [sp, #28]
   14c58:	ldr	r0, [r0]
   14c5c:	movt	r8, #2
   14c60:	movt	r4, #2
   14c64:	ldr	r1, [r8]
   14c68:	ldr	r6, [r4]
   14c6c:	str	r0, [sp, #24]
   14c70:	cmp	r1, r5
   14c74:	ble	14c80 <__assert_fail@plt+0x3bc8>
   14c78:	mov	sl, r6
   14c7c:	b	14cec <__assert_fail@plt+0x3c34>
   14c80:	movw	r9, #37120	; 0x9100
   14c84:	mov	r0, #8
   14c88:	str	r1, [fp, #-32]	; 0xffffffe0
   14c8c:	sub	r1, r5, r1
   14c90:	mvn	r3, #-2147483648	; 0x80000000
   14c94:	movt	r9, #2
   14c98:	str	r0, [sp]
   14c9c:	add	r2, r1, #1
   14ca0:	sub	r1, fp, #32
   14ca4:	subs	r0, r6, r9
   14ca8:	movne	r0, r6
   14cac:	bl	159a0 <__assert_fail@plt+0x48e8>
   14cb0:	mov	sl, r0
   14cb4:	cmp	r6, r9
   14cb8:	str	r0, [r4]
   14cbc:	bne	14cc8 <__assert_fail@plt+0x3c10>
   14cc0:	ldrd	r0, [r9]
   14cc4:	stm	sl, {r0, r1}
   14cc8:	ldr	r1, [r8]
   14ccc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14cd0:	add	r0, sl, r1, lsl #3
   14cd4:	sub	r1, r2, r1
   14cd8:	lsl	r2, r1, #3
   14cdc:	mov	r1, #0
   14ce0:	bl	10ff8 <memset@plt>
   14ce4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ce8:	str	r0, [r8]
   14cec:	mov	r9, sl
   14cf0:	ldm	r7, {r0, r1}
   14cf4:	orr	r8, r1, #1
   14cf8:	add	r1, r7, #8
   14cfc:	ldr	r2, [r7, #40]	; 0x28
   14d00:	ldr	r3, [r7, #44]	; 0x2c
   14d04:	ldr	r6, [r9, r5, lsl #3]!
   14d08:	str	r1, [sp, #20]
   14d0c:	ldr	r4, [r9, #4]!
   14d10:	stm	sp, {r0, r8}
   14d14:	add	r0, sp, #8
   14d18:	stm	r0, {r1, r2, r3}
   14d1c:	ldr	r2, [sp, #32]
   14d20:	ldr	r3, [sp, #36]	; 0x24
   14d24:	mov	r1, r6
   14d28:	mov	r0, r4
   14d2c:	bl	13a18 <__assert_fail@plt+0x2960>
   14d30:	cmp	r6, r0
   14d34:	bhi	14d98 <__assert_fail@plt+0x3ce0>
   14d38:	add	r6, r0, #1
   14d3c:	movw	r0, #46240	; 0xb4a0
   14d40:	movt	r0, #2
   14d44:	str	r6, [sl, r5, lsl #3]
   14d48:	cmp	r4, r0
   14d4c:	beq	14d58 <__assert_fail@plt+0x3ca0>
   14d50:	mov	r0, r4
   14d54:	bl	137bc <__assert_fail@plt+0x2704>
   14d58:	mov	r0, r6
   14d5c:	bl	15870 <__assert_fail@plt+0x47b8>
   14d60:	str	r0, [r9]
   14d64:	mov	r4, r0
   14d68:	add	r3, sp, #8
   14d6c:	ldr	r0, [r7]
   14d70:	ldr	r1, [r7, #40]	; 0x28
   14d74:	ldr	r2, [r7, #44]	; 0x2c
   14d78:	stm	sp, {r0, r8}
   14d7c:	ldr	r0, [sp, #20]
   14d80:	stm	r3, {r0, r1, r2}
   14d84:	ldr	r2, [sp, #32]
   14d88:	ldr	r3, [sp, #36]	; 0x24
   14d8c:	mov	r0, r4
   14d90:	mov	r1, r6
   14d94:	bl	13a18 <__assert_fail@plt+0x2960>
   14d98:	ldr	r0, [sp, #28]
   14d9c:	ldr	r1, [sp, #24]
   14da0:	str	r1, [r0]
   14da4:	mov	r0, r4
   14da8:	sub	sp, fp, #28
   14dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db0:	bl	110a0 <abort@plt>
   14db4:	movw	r3, #46192	; 0xb470
   14db8:	movt	r3, #2
   14dbc:	b	14c1c <__assert_fail@plt+0x3b64>
   14dc0:	movw	r3, #46192	; 0xb470
   14dc4:	mov	r1, r0
   14dc8:	mov	r0, #0
   14dcc:	mvn	r2, #0
   14dd0:	movt	r3, #2
   14dd4:	b	14c1c <__assert_fail@plt+0x3b64>
   14dd8:	movw	r3, #46192	; 0xb470
   14ddc:	mov	r2, r1
   14de0:	mov	r1, r0
   14de4:	mov	r0, #0
   14de8:	movt	r3, #2
   14dec:	b	14c1c <__assert_fail@plt+0x3b64>
   14df0:	push	{fp, lr}
   14df4:	mov	fp, sp
   14df8:	sub	sp, sp, #48	; 0x30
   14dfc:	vmov.i32	q8, #0	; 0x00000000
   14e00:	mov	ip, #32
   14e04:	mov	r3, sp
   14e08:	mov	lr, r2
   14e0c:	cmp	r1, #10
   14e10:	add	r2, r3, #16
   14e14:	vst1.64	{d16-d17}, [r3], ip
   14e18:	vst1.64	{d16-d17}, [r2]
   14e1c:	vst1.64	{d16-d17}, [r3]
   14e20:	beq	14e40 <__assert_fail@plt+0x3d88>
   14e24:	str	r1, [sp]
   14e28:	mov	r3, sp
   14e2c:	mov	r1, lr
   14e30:	mvn	r2, #0
   14e34:	bl	14c1c <__assert_fail@plt+0x3b64>
   14e38:	mov	sp, fp
   14e3c:	pop	{fp, pc}
   14e40:	bl	110a0 <abort@plt>
   14e44:	push	{r4, sl, fp, lr}
   14e48:	add	fp, sp, #8
   14e4c:	sub	sp, sp, #48	; 0x30
   14e50:	vmov.i32	q8, #0	; 0x00000000
   14e54:	mov	ip, r3
   14e58:	mov	r3, sp
   14e5c:	mov	lr, #32
   14e60:	cmp	r1, #10
   14e64:	add	r4, r3, #16
   14e68:	vst1.64	{d16-d17}, [r3], lr
   14e6c:	vst1.64	{d16-d17}, [r4]
   14e70:	vst1.64	{d16-d17}, [r3]
   14e74:	beq	14e94 <__assert_fail@plt+0x3ddc>
   14e78:	str	r1, [sp]
   14e7c:	mov	r1, r2
   14e80:	mov	r3, sp
   14e84:	mov	r2, ip
   14e88:	bl	14c1c <__assert_fail@plt+0x3b64>
   14e8c:	sub	sp, fp, #8
   14e90:	pop	{r4, sl, fp, pc}
   14e94:	bl	110a0 <abort@plt>
   14e98:	mov	r2, r1
   14e9c:	mov	r1, r0
   14ea0:	mov	r0, #0
   14ea4:	b	14df0 <__assert_fail@plt+0x3d38>
   14ea8:	mov	r3, r2
   14eac:	mov	r2, r1
   14eb0:	mov	r1, r0
   14eb4:	mov	r0, #0
   14eb8:	b	14e44 <__assert_fail@plt+0x3d8c>
   14ebc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14ec0:	add	fp, sp, #24
   14ec4:	sub	sp, sp, #48	; 0x30
   14ec8:	movw	r8, #46192	; 0xb470
   14ecc:	mov	lr, r0
   14ed0:	mov	r3, sp
   14ed4:	mov	ip, r1
   14ed8:	movt	r8, #2
   14edc:	mov	r1, r3
   14ee0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   14ee4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14ee8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14eec:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14ef0:	ubfx	r0, r2, #5, #3
   14ef4:	and	r2, r2, #31
   14ef8:	mov	r4, #1
   14efc:	add	r0, r3, r0, lsl #2
   14f00:	ldr	r1, [r0, #8]
   14f04:	bic	r4, r4, r1, lsr r2
   14f08:	eor	r1, r1, r4, lsl r2
   14f0c:	mov	r2, ip
   14f10:	str	r1, [r0, #8]
   14f14:	mov	r0, #0
   14f18:	mov	r1, lr
   14f1c:	bl	14c1c <__assert_fail@plt+0x3b64>
   14f20:	sub	sp, fp, #24
   14f24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f2c:	add	fp, sp, #24
   14f30:	sub	sp, sp, #48	; 0x30
   14f34:	movw	lr, #46192	; 0xb470
   14f38:	mov	ip, r0
   14f3c:	mov	r3, sp
   14f40:	movt	lr, #2
   14f44:	mov	r2, r3
   14f48:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14f4c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14f50:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14f54:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14f58:	ubfx	r0, r1, #5, #3
   14f5c:	and	r1, r1, #31
   14f60:	mov	r7, #1
   14f64:	add	r0, r3, r0, lsl #2
   14f68:	ldr	r2, [r0, #8]
   14f6c:	bic	r7, r7, r2, lsr r1
   14f70:	eor	r1, r2, r7, lsl r1
   14f74:	mvn	r2, #0
   14f78:	str	r1, [r0, #8]
   14f7c:	mov	r0, #0
   14f80:	mov	r1, ip
   14f84:	bl	14c1c <__assert_fail@plt+0x3b64>
   14f88:	sub	sp, fp, #24
   14f8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f90:	push	{r4, r5, r6, r7, fp, lr}
   14f94:	add	fp, sp, #16
   14f98:	sub	sp, sp, #48	; 0x30
   14f9c:	movw	lr, #46192	; 0xb470
   14fa0:	mov	ip, r0
   14fa4:	mov	r3, sp
   14fa8:	movt	lr, #2
   14fac:	mov	r2, r3
   14fb0:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14fb4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14fb8:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14fbc:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14fc0:	mov	r1, ip
   14fc4:	mvn	r2, #0
   14fc8:	ldr	r0, [sp, #12]
   14fcc:	orr	r0, r0, #67108864	; 0x4000000
   14fd0:	str	r0, [sp, #12]
   14fd4:	mov	r0, #0
   14fd8:	bl	14c1c <__assert_fail@plt+0x3b64>
   14fdc:	sub	sp, fp, #16
   14fe0:	pop	{r4, r5, r6, r7, fp, pc}
   14fe4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fe8:	add	fp, sp, #24
   14fec:	sub	sp, sp, #48	; 0x30
   14ff0:	movw	r8, #46192	; 0xb470
   14ff4:	mov	ip, r1
   14ff8:	mov	lr, r0
   14ffc:	mov	r3, sp
   15000:	movt	r8, #2
   15004:	mov	r2, r3
   15008:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   1500c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15010:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   15014:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15018:	mov	r1, lr
   1501c:	mov	r2, ip
   15020:	ldr	r0, [sp, #12]
   15024:	orr	r0, r0, #67108864	; 0x4000000
   15028:	str	r0, [sp, #12]
   1502c:	mov	r0, #0
   15030:	bl	14c1c <__assert_fail@plt+0x3b64>
   15034:	sub	sp, fp, #24
   15038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1503c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15040:	add	fp, sp, #24
   15044:	sub	sp, sp, #96	; 0x60
   15048:	vmov.i32	q8, #0	; 0x00000000
   1504c:	mov	lr, sp
   15050:	mov	ip, r2
   15054:	cmp	r1, #10
   15058:	add	r3, lr, #16
   1505c:	mov	r2, lr
   15060:	vst1.64	{d16-d17}, [r3]
   15064:	mov	r3, #28
   15068:	vst1.64	{d16-d17}, [r2], r3
   1506c:	vst1.32	{d16-d17}, [r2]
   15070:	beq	150b0 <__assert_fail@plt+0x3ff8>
   15074:	str	r1, [sp, #48]	; 0x30
   15078:	add	r3, sp, #48	; 0x30
   1507c:	ldm	lr!, {r2, r4, r5, r6, r7}
   15080:	add	r1, r3, #4
   15084:	stmia	r1!, {r2, r4, r5, r6, r7}
   15088:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1508c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   15090:	mvn	r2, #0
   15094:	ldr	r1, [sp, #60]	; 0x3c
   15098:	orr	r1, r1, #67108864	; 0x4000000
   1509c:	str	r1, [sp, #60]	; 0x3c
   150a0:	mov	r1, ip
   150a4:	bl	14c1c <__assert_fail@plt+0x3b64>
   150a8:	sub	sp, fp, #24
   150ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150b0:	bl	110a0 <abort@plt>
   150b4:	push	{fp, lr}
   150b8:	mov	fp, sp
   150bc:	sub	sp, sp, #8
   150c0:	mvn	ip, #0
   150c4:	str	ip, [sp]
   150c8:	bl	150d4 <__assert_fail@plt+0x401c>
   150cc:	mov	sp, fp
   150d0:	pop	{fp, pc}
   150d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150d8:	add	fp, sp, #24
   150dc:	sub	sp, sp, #48	; 0x30
   150e0:	movw	ip, #46192	; 0xb470
   150e4:	mov	lr, r3
   150e8:	mov	r3, sp
   150ec:	cmp	r1, #0
   150f0:	movt	ip, #2
   150f4:	cmpne	r2, #0
   150f8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   150fc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   15100:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   15104:	stm	r3, {r4, r5, r6, r7, r8, r9}
   15108:	mov	r3, #10
   1510c:	str	r3, [sp]
   15110:	bne	15118 <__assert_fail@plt+0x4060>
   15114:	bl	110a0 <abort@plt>
   15118:	ldr	ip, [fp, #8]
   1511c:	str	r2, [sp, #44]	; 0x2c
   15120:	str	r1, [sp, #40]	; 0x28
   15124:	mov	r3, sp
   15128:	mov	r1, lr
   1512c:	mov	r2, ip
   15130:	bl	14c1c <__assert_fail@plt+0x3b64>
   15134:	sub	sp, fp, #24
   15138:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1513c:	push	{fp, lr}
   15140:	mov	fp, sp
   15144:	sub	sp, sp, #8
   15148:	mov	r3, r2
   1514c:	mov	r2, r1
   15150:	mov	r1, r0
   15154:	mvn	r0, #0
   15158:	str	r0, [sp]
   1515c:	mov	r0, #0
   15160:	bl	150d4 <__assert_fail@plt+0x401c>
   15164:	mov	sp, fp
   15168:	pop	{fp, pc}
   1516c:	push	{fp, lr}
   15170:	mov	fp, sp
   15174:	sub	sp, sp, #8
   15178:	mov	ip, r2
   1517c:	mov	r2, r1
   15180:	mov	r1, r0
   15184:	str	r3, [sp]
   15188:	mov	r0, #0
   1518c:	mov	r3, ip
   15190:	bl	150d4 <__assert_fail@plt+0x401c>
   15194:	mov	sp, fp
   15198:	pop	{fp, pc}
   1519c:	movw	r3, #37128	; 0x9108
   151a0:	movt	r3, #2
   151a4:	b	14c1c <__assert_fail@plt+0x3b64>
   151a8:	movw	r3, #37128	; 0x9108
   151ac:	mov	r2, r1
   151b0:	mov	r1, r0
   151b4:	mov	r0, #0
   151b8:	movt	r3, #2
   151bc:	b	14c1c <__assert_fail@plt+0x3b64>
   151c0:	movw	r3, #37128	; 0x9108
   151c4:	mvn	r2, #0
   151c8:	movt	r3, #2
   151cc:	b	14c1c <__assert_fail@plt+0x3b64>
   151d0:	movw	r3, #37128	; 0x9108
   151d4:	mov	r1, r0
   151d8:	mov	r0, #0
   151dc:	mvn	r2, #0
   151e0:	movt	r3, #2
   151e4:	b	14c1c <__assert_fail@plt+0x3b64>
   151e8:	push	{r4, r5, fp, lr}
   151ec:	add	fp, sp, #8
   151f0:	mov	r5, r0
   151f4:	mov	r4, r1
   151f8:	mov	r0, #0
   151fc:	mov	r2, #5
   15200:	mov	r1, r5
   15204:	bl	10ee4 <dcgettext@plt>
   15208:	cmp	r0, r5
   1520c:	popne	{r4, r5, fp, pc}
   15210:	bl	1665c <__assert_fail@plt+0x55a4>
   15214:	ldrb	r1, [r0]
   15218:	and	r1, r1, #223	; 0xdf
   1521c:	cmp	r1, #71	; 0x47
   15220:	beq	15288 <__assert_fail@plt+0x41d0>
   15224:	cmp	r1, #85	; 0x55
   15228:	bne	152e0 <__assert_fail@plt+0x4228>
   1522c:	ldrb	r1, [r0, #1]
   15230:	and	r1, r1, #223	; 0xdf
   15234:	cmp	r1, #84	; 0x54
   15238:	bne	152e0 <__assert_fail@plt+0x4228>
   1523c:	ldrb	r1, [r0, #2]
   15240:	and	r1, r1, #223	; 0xdf
   15244:	cmp	r1, #70	; 0x46
   15248:	bne	152e0 <__assert_fail@plt+0x4228>
   1524c:	ldrb	r1, [r0, #3]
   15250:	cmp	r1, #45	; 0x2d
   15254:	bne	152e0 <__assert_fail@plt+0x4228>
   15258:	ldrb	r1, [r0, #4]
   1525c:	cmp	r1, #56	; 0x38
   15260:	bne	152e0 <__assert_fail@plt+0x4228>
   15264:	ldrb	r0, [r0, #5]
   15268:	cmp	r0, #0
   1526c:	bne	152e0 <__assert_fail@plt+0x4228>
   15270:	ldrb	r1, [r5]
   15274:	movw	r2, #32778	; 0x800a
   15278:	movw	r0, #32782	; 0x800e
   1527c:	movt	r2, #1
   15280:	movt	r0, #1
   15284:	b	15310 <__assert_fail@plt+0x4258>
   15288:	ldrb	r1, [r0, #1]
   1528c:	and	r1, r1, #223	; 0xdf
   15290:	cmp	r1, #66	; 0x42
   15294:	bne	152e0 <__assert_fail@plt+0x4228>
   15298:	ldrb	r1, [r0, #2]
   1529c:	cmp	r1, #49	; 0x31
   152a0:	bne	152e0 <__assert_fail@plt+0x4228>
   152a4:	ldrb	r1, [r0, #3]
   152a8:	cmp	r1, #56	; 0x38
   152ac:	bne	152e0 <__assert_fail@plt+0x4228>
   152b0:	ldrb	r1, [r0, #4]
   152b4:	cmp	r1, #48	; 0x30
   152b8:	bne	152e0 <__assert_fail@plt+0x4228>
   152bc:	ldrb	r1, [r0, #5]
   152c0:	cmp	r1, #51	; 0x33
   152c4:	bne	152e0 <__assert_fail@plt+0x4228>
   152c8:	ldrb	r1, [r0, #6]
   152cc:	cmp	r1, #48	; 0x30
   152d0:	bne	152e0 <__assert_fail@plt+0x4228>
   152d4:	ldrb	r0, [r0, #7]
   152d8:	cmp	r0, #0
   152dc:	beq	152fc <__assert_fail@plt+0x4244>
   152e0:	movw	r1, #32774	; 0x8006
   152e4:	movw	r0, #30524	; 0x773c
   152e8:	cmp	r4, #9
   152ec:	movt	r1, #1
   152f0:	movt	r0, #1
   152f4:	moveq	r0, r1
   152f8:	pop	{r4, r5, fp, pc}
   152fc:	ldrb	r1, [r5]
   15300:	movw	r2, #32786	; 0x8012
   15304:	movw	r0, #32790	; 0x8016
   15308:	movt	r2, #1
   1530c:	movt	r0, #1
   15310:	cmp	r1, #96	; 0x60
   15314:	moveq	r0, r2
   15318:	pop	{r4, r5, fp, pc}
   1531c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15320:	add	fp, sp, #24
   15324:	movw	r8, #0
   15328:	mov	r6, r2
   1532c:	mov	r4, r1
   15330:	mov	r5, r0
   15334:	movt	r8, #32752	; 0x7ff0
   15338:	mov	r0, r5
   1533c:	mov	r1, r4
   15340:	mov	r2, r6
   15344:	bl	10e78 <read@plt>
   15348:	mov	r7, r0
   1534c:	cmn	r0, #1
   15350:	bgt	15378 <__assert_fail@plt+0x42c0>
   15354:	bl	10fd4 <__errno_location@plt>
   15358:	ldr	r0, [r0]
   1535c:	cmp	r0, #4
   15360:	beq	15338 <__assert_fail@plt+0x4280>
   15364:	cmp	r6, r8
   15368:	bls	15378 <__assert_fail@plt+0x42c0>
   1536c:	cmp	r0, #22
   15370:	mov	r6, r8
   15374:	beq	15338 <__assert_fail@plt+0x4280>
   15378:	mov	r0, r7
   1537c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15380:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15384:	add	fp, sp, #24
   15388:	sub	sp, sp, #32
   1538c:	ldr	r6, [fp, #12]
   15390:	ldr	r7, [fp, #8]
   15394:	mov	r4, r2
   15398:	mov	r8, r0
   1539c:	cmp	r1, #0
   153a0:	beq	153c8 <__assert_fail@plt+0x4310>
   153a4:	movw	r2, #32880	; 0x8070
   153a8:	mov	r5, r1
   153ac:	str	r3, [sp, #4]
   153b0:	str	r4, [sp]
   153b4:	mov	r0, r8
   153b8:	mov	r1, #1
   153bc:	movt	r2, #1
   153c0:	mov	r3, r5
   153c4:	b	153e0 <__assert_fail@plt+0x4328>
   153c8:	movw	r2, #32892	; 0x807c
   153cc:	str	r3, [sp]
   153d0:	mov	r0, r8
   153d4:	mov	r1, #1
   153d8:	mov	r3, r4
   153dc:	movt	r2, #1
   153e0:	bl	11028 <__fprintf_chk@plt>
   153e4:	movw	r1, #32899	; 0x8083
   153e8:	mov	r0, #0
   153ec:	mov	r2, #5
   153f0:	movt	r1, #1
   153f4:	bl	10ee4 <dcgettext@plt>
   153f8:	movw	r2, #33617	; 0x8351
   153fc:	mov	r3, r0
   15400:	movw	r0, #2022	; 0x7e6
   15404:	mov	r1, #1
   15408:	movt	r2, #1
   1540c:	str	r0, [sp]
   15410:	mov	r0, r8
   15414:	bl	11028 <__fprintf_chk@plt>
   15418:	movw	r4, #30262	; 0x7636
   1541c:	mov	r1, r8
   15420:	movt	r4, #1
   15424:	mov	r0, r4
   15428:	bl	10e48 <fputs_unlocked@plt>
   1542c:	movw	r1, #32903	; 0x8087
   15430:	mov	r0, #0
   15434:	mov	r2, #5
   15438:	movt	r1, #1
   1543c:	bl	10ee4 <dcgettext@plt>
   15440:	movw	r3, #33074	; 0x8132
   15444:	mov	r2, r0
   15448:	mov	r0, r8
   1544c:	mov	r1, #1
   15450:	movt	r3, #1
   15454:	bl	11028 <__fprintf_chk@plt>
   15458:	mov	r0, r4
   1545c:	mov	r1, r8
   15460:	bl	10e48 <fputs_unlocked@plt>
   15464:	cmp	r6, #9
   15468:	bhi	154cc <__assert_fail@plt+0x4414>
   1546c:	add	r0, pc, #0
   15470:	ldr	pc, [r0, r6, lsl #2]
   15474:	andeq	r5, r1, r4, lsr #13
   15478:	muleq	r1, ip, r4
   1547c:	ldrdeq	r5, [r1], -r8
   15480:	andeq	r5, r1, r0, lsl #10
   15484:	andeq	r5, r1, r8, lsr #10
   15488:	andeq	r5, r1, r0, asr r5
   1548c:	andeq	r5, r1, r8, ror r5
   15490:			; <UNDEFINED> instruction: 0x000155b0
   15494:	andeq	r5, r1, r0, asr r6
   15498:	strdeq	r5, [r1], -r8
   1549c:	movw	r1, #33108	; 0x8154
   154a0:	mov	r0, #0
   154a4:	mov	r2, #5
   154a8:	movt	r1, #1
   154ac:	bl	10ee4 <dcgettext@plt>
   154b0:	ldr	r3, [r7]
   154b4:	mov	r2, r0
   154b8:	mov	r0, r8
   154bc:	mov	r1, #1
   154c0:	sub	sp, fp, #24
   154c4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   154c8:	b	11028 <__fprintf_chk@plt>
   154cc:	movw	r1, #33427	; 0x8293
   154d0:	movt	r1, #1
   154d4:	b	15600 <__assert_fail@plt+0x4548>
   154d8:	movw	r1, #33124	; 0x8164
   154dc:	mov	r0, #0
   154e0:	mov	r2, #5
   154e4:	movt	r1, #1
   154e8:	bl	10ee4 <dcgettext@plt>
   154ec:	mov	r2, r0
   154f0:	ldr	r3, [r7]
   154f4:	ldr	r0, [r7, #4]
   154f8:	str	r0, [sp]
   154fc:	b	155ec <__assert_fail@plt+0x4534>
   15500:	movw	r1, #33147	; 0x817b
   15504:	mov	r0, #0
   15508:	mov	r2, #5
   1550c:	movt	r1, #1
   15510:	bl	10ee4 <dcgettext@plt>
   15514:	mov	r2, r0
   15518:	ldr	r3, [r7]
   1551c:	ldmib	r7, {r0, r1}
   15520:	stm	sp, {r0, r1}
   15524:	b	155ec <__assert_fail@plt+0x4534>
   15528:	movw	r1, #33175	; 0x8197
   1552c:	mov	r0, #0
   15530:	mov	r2, #5
   15534:	movt	r1, #1
   15538:	bl	10ee4 <dcgettext@plt>
   1553c:	ldr	r3, [r7]
   15540:	mov	r2, r0
   15544:	ldmib	r7, {r0, r1, r7}
   15548:	stm	sp, {r0, r1, r7}
   1554c:	b	155ec <__assert_fail@plt+0x4534>
   15550:	movw	r1, #33207	; 0x81b7
   15554:	mov	r0, #0
   15558:	mov	r2, #5
   1555c:	movt	r1, #1
   15560:	bl	10ee4 <dcgettext@plt>
   15564:	ldr	r3, [r7]
   15568:	mov	r2, r0
   1556c:	ldmib	r7, {r0, r1, r6, r7}
   15570:	stm	sp, {r0, r1, r6, r7}
   15574:	b	155ec <__assert_fail@plt+0x4534>
   15578:	movw	r1, #33243	; 0x81db
   1557c:	mov	r0, #0
   15580:	mov	r2, #5
   15584:	movt	r1, #1
   15588:	bl	10ee4 <dcgettext@plt>
   1558c:	mov	r2, r0
   15590:	ldr	r3, [r7]
   15594:	ldmib	r7, {r0, r1, r6}
   15598:	ldr	r5, [r7, #16]
   1559c:	ldr	r7, [r7, #20]
   155a0:	stm	sp, {r0, r1, r6}
   155a4:	str	r5, [sp, #12]
   155a8:	str	r7, [sp, #16]
   155ac:	b	155ec <__assert_fail@plt+0x4534>
   155b0:	movw	r1, #33283	; 0x8203
   155b4:	mov	r0, #0
   155b8:	mov	r2, #5
   155bc:	movt	r1, #1
   155c0:	bl	10ee4 <dcgettext@plt>
   155c4:	mov	r2, r0
   155c8:	ldr	r3, [r7]
   155cc:	ldmib	r7, {r0, r1, r6}
   155d0:	ldr	r5, [r7, #16]
   155d4:	ldr	r4, [r7, #20]
   155d8:	ldr	r7, [r7, #24]
   155dc:	stm	sp, {r0, r1, r6}
   155e0:	str	r5, [sp, #12]
   155e4:	str	r4, [sp, #16]
   155e8:	str	r7, [sp, #20]
   155ec:	mov	r0, r8
   155f0:	mov	r1, #1
   155f4:	b	156a0 <__assert_fail@plt+0x45e8>
   155f8:	movw	r1, #33375	; 0x825f
   155fc:	movt	r1, #1
   15600:	mov	r0, #0
   15604:	mov	r2, #5
   15608:	bl	10ee4 <dcgettext@plt>
   1560c:	mov	ip, r0
   15610:	ldr	r3, [r7]
   15614:	ldr	r0, [r7, #4]
   15618:	ldr	r1, [r7, #8]
   1561c:	ldr	r6, [r7, #12]
   15620:	ldr	r5, [r7, #16]
   15624:	ldr	r4, [r7, #20]
   15628:	ldr	r2, [r7, #24]
   1562c:	ldr	lr, [r7, #28]
   15630:	ldr	r7, [r7, #32]
   15634:	stm	sp, {r0, r1, r6}
   15638:	str	r5, [sp, #12]
   1563c:	str	r4, [sp, #16]
   15640:	str	r2, [sp, #20]
   15644:	str	lr, [sp, #24]
   15648:	str	r7, [sp, #28]
   1564c:	b	15694 <__assert_fail@plt+0x45dc>
   15650:	movw	r1, #33327	; 0x822f
   15654:	mov	r0, #0
   15658:	mov	r2, #5
   1565c:	movt	r1, #1
   15660:	bl	10ee4 <dcgettext@plt>
   15664:	mov	ip, r0
   15668:	ldr	r3, [r7]
   1566c:	ldmib	r7, {r0, r1, r6}
   15670:	ldr	r5, [r7, #16]
   15674:	ldr	r4, [r7, #20]
   15678:	ldr	r2, [r7, #24]
   1567c:	ldr	r7, [r7, #28]
   15680:	stm	sp, {r0, r1, r6}
   15684:	str	r5, [sp, #12]
   15688:	str	r4, [sp, #16]
   1568c:	str	r2, [sp, #20]
   15690:	str	r7, [sp, #24]
   15694:	mov	r0, r8
   15698:	mov	r1, #1
   1569c:	mov	r2, ip
   156a0:	bl	11028 <__fprintf_chk@plt>
   156a4:	sub	sp, fp, #24
   156a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156ac:	push	{r4, sl, fp, lr}
   156b0:	add	fp, sp, #8
   156b4:	sub	sp, sp, #8
   156b8:	ldr	ip, [fp, #8]
   156bc:	mov	lr, #0
   156c0:	ldr	r4, [ip, lr, lsl #2]
   156c4:	add	lr, lr, #1
   156c8:	cmp	r4, #0
   156cc:	bne	156c0 <__assert_fail@plt+0x4608>
   156d0:	sub	r4, lr, #1
   156d4:	str	ip, [sp]
   156d8:	str	r4, [sp, #4]
   156dc:	bl	15380 <__assert_fail@plt+0x42c8>
   156e0:	sub	sp, fp, #8
   156e4:	pop	{r4, sl, fp, pc}
   156e8:	push	{r4, r5, fp, lr}
   156ec:	add	fp, sp, #8
   156f0:	sub	sp, sp, #48	; 0x30
   156f4:	ldr	r4, [fp, #8]
   156f8:	mov	ip, #0
   156fc:	add	lr, sp, #8
   15700:	ldr	r5, [r4]
   15704:	cmp	r5, #0
   15708:	str	r5, [lr, ip, lsl #2]
   1570c:	beq	15724 <__assert_fail@plt+0x466c>
   15710:	add	ip, ip, #1
   15714:	add	r4, r4, #4
   15718:	cmp	ip, #10
   1571c:	bne	15700 <__assert_fail@plt+0x4648>
   15720:	mov	ip, #10
   15724:	str	lr, [sp]
   15728:	str	ip, [sp, #4]
   1572c:	bl	15380 <__assert_fail@plt+0x42c8>
   15730:	sub	sp, fp, #8
   15734:	pop	{r4, r5, fp, pc}
   15738:	push	{fp, lr}
   1573c:	mov	fp, sp
   15740:	sub	sp, sp, #8
   15744:	add	ip, fp, #8
   15748:	str	ip, [sp, #4]
   1574c:	str	ip, [sp]
   15750:	bl	156e8 <__assert_fail@plt+0x4630>
   15754:	mov	sp, fp
   15758:	pop	{fp, pc}
   1575c:	push	{fp, lr}
   15760:	mov	fp, sp
   15764:	movw	r0, #37204	; 0x9154
   15768:	movt	r0, #2
   1576c:	ldr	r1, [r0]
   15770:	movw	r0, #30262	; 0x7636
   15774:	movt	r0, #1
   15778:	bl	10e48 <fputs_unlocked@plt>
   1577c:	movw	r1, #33487	; 0x82cf
   15780:	mov	r0, #0
   15784:	mov	r2, #5
   15788:	movt	r1, #1
   1578c:	bl	10ee4 <dcgettext@plt>
   15790:	movw	r2, #33507	; 0x82e3
   15794:	mov	r1, r0
   15798:	mov	r0, #1
   1579c:	movt	r2, #1
   157a0:	bl	11004 <__printf_chk@plt>
   157a4:	movw	r1, #33529	; 0x82f9
   157a8:	mov	r0, #0
   157ac:	mov	r2, #5
   157b0:	movt	r1, #1
   157b4:	bl	10ee4 <dcgettext@plt>
   157b8:	movw	r2, #29575	; 0x7387
   157bc:	movw	r3, #30071	; 0x7577
   157c0:	mov	r1, r0
   157c4:	mov	r0, #1
   157c8:	movt	r2, #1
   157cc:	movt	r3, #1
   157d0:	bl	11004 <__printf_chk@plt>
   157d4:	movw	r1, #33549	; 0x830d
   157d8:	mov	r0, #0
   157dc:	mov	r2, #5
   157e0:	movt	r1, #1
   157e4:	bl	10ee4 <dcgettext@plt>
   157e8:	movw	r2, #33588	; 0x8334
   157ec:	mov	r1, r0
   157f0:	mov	r0, #1
   157f4:	movt	r2, #1
   157f8:	pop	{fp, lr}
   157fc:	b	11004 <__printf_chk@plt>
   15800:	b	15804 <__assert_fail@plt+0x474c>
   15804:	push	{r4, r5, r6, sl, fp, lr}
   15808:	add	fp, sp, #16
   1580c:	mov	r4, r2
   15810:	mov	r5, r1
   15814:	mov	r6, r0
   15818:	bl	166f8 <__assert_fail@plt+0x5640>
   1581c:	cmp	r0, #0
   15820:	popne	{r4, r5, r6, sl, fp, pc}
   15824:	cmp	r6, #0
   15828:	beq	1583c <__assert_fail@plt+0x4784>
   1582c:	cmp	r5, #0
   15830:	cmpne	r4, #0
   15834:	bne	1583c <__assert_fail@plt+0x4784>
   15838:	pop	{r4, r5, r6, sl, fp, pc}
   1583c:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15840:	push	{fp, lr}
   15844:	mov	fp, sp
   15848:	bl	163c0 <__assert_fail@plt+0x5308>
   1584c:	cmp	r0, #0
   15850:	popne	{fp, pc}
   15854:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15858:	push	{fp, lr}
   1585c:	mov	fp, sp
   15860:	bl	163c0 <__assert_fail@plt+0x5308>
   15864:	cmp	r0, #0
   15868:	popne	{fp, pc}
   1586c:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15870:	push	{fp, lr}
   15874:	mov	fp, sp
   15878:	bl	163c0 <__assert_fail@plt+0x5308>
   1587c:	cmp	r0, #0
   15880:	popne	{fp, pc}
   15884:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15888:	push	{r4, r5, fp, lr}
   1588c:	add	fp, sp, #8
   15890:	mov	r4, r1
   15894:	mov	r5, r0
   15898:	bl	163f0 <__assert_fail@plt+0x5338>
   1589c:	cmp	r0, #0
   158a0:	popne	{r4, r5, fp, pc}
   158a4:	cmp	r5, #0
   158a8:	beq	158b8 <__assert_fail@plt+0x4800>
   158ac:	cmp	r4, #0
   158b0:	bne	158b8 <__assert_fail@plt+0x4800>
   158b4:	pop	{r4, r5, fp, pc}
   158b8:	bl	15c6c <__assert_fail@plt+0x4bb4>
   158bc:	push	{fp, lr}
   158c0:	mov	fp, sp
   158c4:	cmp	r1, #0
   158c8:	orreq	r1, r1, #1
   158cc:	bl	163f0 <__assert_fail@plt+0x5338>
   158d0:	cmp	r0, #0
   158d4:	popne	{fp, pc}
   158d8:	bl	15c6c <__assert_fail@plt+0x4bb4>
   158dc:	push	{fp, lr}
   158e0:	mov	fp, sp
   158e4:	clz	r3, r2
   158e8:	lsr	ip, r3, #5
   158ec:	clz	r3, r1
   158f0:	lsr	r3, r3, #5
   158f4:	orrs	r3, r3, ip
   158f8:	movwne	r1, #1
   158fc:	movwne	r2, #1
   15900:	bl	166f8 <__assert_fail@plt+0x5640>
   15904:	cmp	r0, #0
   15908:	popne	{fp, pc}
   1590c:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15910:	push	{fp, lr}
   15914:	mov	fp, sp
   15918:	mov	r2, r1
   1591c:	mov	r1, r0
   15920:	mov	r0, #0
   15924:	bl	166f8 <__assert_fail@plt+0x5640>
   15928:	cmp	r0, #0
   1592c:	popne	{fp, pc}
   15930:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15934:	mov	r2, r1
   15938:	mov	r1, r0
   1593c:	mov	r0, #0
   15940:	b	158dc <__assert_fail@plt+0x4824>
   15944:	mov	r2, #1
   15948:	b	1594c <__assert_fail@plt+0x4894>
   1594c:	push	{r4, r5, fp, lr}
   15950:	add	fp, sp, #8
   15954:	ldr	r5, [r1]
   15958:	mov	r4, r1
   1595c:	cmp	r0, #0
   15960:	beq	15978 <__assert_fail@plt+0x48c0>
   15964:	mov	r1, #1
   15968:	add	r1, r1, r5, lsr #1
   1596c:	adds	r5, r5, r1
   15970:	bcc	15990 <__assert_fail@plt+0x48d8>
   15974:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15978:	cmp	r5, #0
   1597c:	bne	15990 <__assert_fail@plt+0x48d8>
   15980:	mov	r1, #64	; 0x40
   15984:	cmp	r2, #64	; 0x40
   15988:	udiv	r5, r1, r2
   1598c:	addhi	r5, r5, #1
   15990:	mov	r1, r5
   15994:	bl	15804 <__assert_fail@plt+0x474c>
   15998:	str	r5, [r4]
   1599c:	pop	{r4, r5, fp, pc}
   159a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159a4:	add	fp, sp, #24
   159a8:	ldr	r6, [r1]
   159ac:	mov	r8, r1
   159b0:	ldr	r4, [fp, #8]
   159b4:	add	r1, r6, r6, asr #1
   159b8:	cmp	r1, r6
   159bc:	mvnvs	r1, #-2147483648	; 0x80000000
   159c0:	cmp	r1, r3
   159c4:	mov	r5, r1
   159c8:	movgt	r5, r3
   159cc:	cmn	r3, #1
   159d0:	movle	r5, r1
   159d4:	cmn	r4, #1
   159d8:	ble	159f8 <__assert_fail@plt+0x4940>
   159dc:	cmp	r4, #0
   159e0:	beq	15a4c <__assert_fail@plt+0x4994>
   159e4:	cmn	r5, #1
   159e8:	ble	15a20 <__assert_fail@plt+0x4968>
   159ec:	mvn	r7, #-2147483648	; 0x80000000
   159f0:	udiv	r1, r7, r4
   159f4:	b	15a14 <__assert_fail@plt+0x495c>
   159f8:	cmn	r5, #1
   159fc:	ble	15a3c <__assert_fail@plt+0x4984>
   15a00:	cmn	r4, #1
   15a04:	beq	15a4c <__assert_fail@plt+0x4994>
   15a08:	mov	r1, #-2147483648	; 0x80000000
   15a0c:	mvn	r7, #-2147483648	; 0x80000000
   15a10:	sdiv	r1, r1, r4
   15a14:	cmp	r1, r5
   15a18:	bge	15a4c <__assert_fail@plt+0x4994>
   15a1c:	b	15a5c <__assert_fail@plt+0x49a4>
   15a20:	beq	15a4c <__assert_fail@plt+0x4994>
   15a24:	mov	r1, #-2147483648	; 0x80000000
   15a28:	mvn	r7, #-2147483648	; 0x80000000
   15a2c:	sdiv	r1, r1, r5
   15a30:	cmp	r1, r4
   15a34:	bge	15a4c <__assert_fail@plt+0x4994>
   15a38:	b	15a5c <__assert_fail@plt+0x49a4>
   15a3c:	mvn	r7, #-2147483648	; 0x80000000
   15a40:	sdiv	r1, r7, r4
   15a44:	cmp	r5, r1
   15a48:	blt	15a5c <__assert_fail@plt+0x49a4>
   15a4c:	mul	r1, r5, r4
   15a50:	mov	r7, #64	; 0x40
   15a54:	cmp	r1, #63	; 0x3f
   15a58:	bgt	15a64 <__assert_fail@plt+0x49ac>
   15a5c:	sdiv	r5, r7, r4
   15a60:	mul	r1, r5, r4
   15a64:	cmp	r0, #0
   15a68:	moveq	r7, #0
   15a6c:	streq	r7, [r8]
   15a70:	sub	r7, r5, r6
   15a74:	cmp	r7, r2
   15a78:	bge	15b1c <__assert_fail@plt+0x4a64>
   15a7c:	add	r5, r6, r2
   15a80:	mov	r2, #0
   15a84:	mov	r1, #0
   15a88:	cmp	r5, r3
   15a8c:	movwgt	r2, #1
   15a90:	cmn	r3, #1
   15a94:	movwgt	r1, #1
   15a98:	cmp	r5, r6
   15a9c:	bvs	15b04 <__assert_fail@plt+0x4a4c>
   15aa0:	ands	r1, r1, r2
   15aa4:	bne	15b04 <__assert_fail@plt+0x4a4c>
   15aa8:	cmn	r4, #1
   15aac:	ble	15acc <__assert_fail@plt+0x4a14>
   15ab0:	cmp	r4, #0
   15ab4:	beq	15b18 <__assert_fail@plt+0x4a60>
   15ab8:	cmn	r5, #1
   15abc:	ble	15af0 <__assert_fail@plt+0x4a38>
   15ac0:	mvn	r1, #-2147483648	; 0x80000000
   15ac4:	udiv	r1, r1, r4
   15ac8:	b	15ae4 <__assert_fail@plt+0x4a2c>
   15acc:	cmn	r5, #1
   15ad0:	ble	15b08 <__assert_fail@plt+0x4a50>
   15ad4:	cmn	r4, #1
   15ad8:	beq	15b18 <__assert_fail@plt+0x4a60>
   15adc:	mov	r1, #-2147483648	; 0x80000000
   15ae0:	sdiv	r1, r1, r4
   15ae4:	cmp	r1, r5
   15ae8:	bge	15b18 <__assert_fail@plt+0x4a60>
   15aec:	b	15b04 <__assert_fail@plt+0x4a4c>
   15af0:	beq	15b18 <__assert_fail@plt+0x4a60>
   15af4:	mov	r1, #-2147483648	; 0x80000000
   15af8:	sdiv	r1, r1, r5
   15afc:	cmp	r1, r4
   15b00:	bge	15b18 <__assert_fail@plt+0x4a60>
   15b04:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15b08:	mvn	r1, #-2147483648	; 0x80000000
   15b0c:	sdiv	r1, r1, r4
   15b10:	cmp	r5, r1
   15b14:	blt	15b04 <__assert_fail@plt+0x4a4c>
   15b18:	mul	r1, r5, r4
   15b1c:	bl	15888 <__assert_fail@plt+0x47d0>
   15b20:	str	r5, [r8]
   15b24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b28:	push	{fp, lr}
   15b2c:	mov	fp, sp
   15b30:	mov	r1, #1
   15b34:	bl	1636c <__assert_fail@plt+0x52b4>
   15b38:	cmp	r0, #0
   15b3c:	popne	{fp, pc}
   15b40:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15b44:	push	{fp, lr}
   15b48:	mov	fp, sp
   15b4c:	bl	1636c <__assert_fail@plt+0x52b4>
   15b50:	cmp	r0, #0
   15b54:	popne	{fp, pc}
   15b58:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15b5c:	push	{fp, lr}
   15b60:	mov	fp, sp
   15b64:	mov	r1, #1
   15b68:	bl	1636c <__assert_fail@plt+0x52b4>
   15b6c:	cmp	r0, #0
   15b70:	popne	{fp, pc}
   15b74:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15b78:	push	{fp, lr}
   15b7c:	mov	fp, sp
   15b80:	bl	1636c <__assert_fail@plt+0x52b4>
   15b84:	cmp	r0, #0
   15b88:	popne	{fp, pc}
   15b8c:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15b90:	push	{r4, r5, fp, lr}
   15b94:	add	fp, sp, #8
   15b98:	mov	r5, r0
   15b9c:	mov	r0, r1
   15ba0:	mov	r4, r1
   15ba4:	bl	163c0 <__assert_fail@plt+0x5308>
   15ba8:	cmp	r0, #0
   15bac:	beq	15bc0 <__assert_fail@plt+0x4b08>
   15bb0:	mov	r1, r5
   15bb4:	mov	r2, r4
   15bb8:	pop	{r4, r5, fp, lr}
   15bbc:	b	10ea8 <memcpy@plt>
   15bc0:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15bc4:	push	{r4, r5, fp, lr}
   15bc8:	add	fp, sp, #8
   15bcc:	mov	r5, r0
   15bd0:	mov	r0, r1
   15bd4:	mov	r4, r1
   15bd8:	bl	163c0 <__assert_fail@plt+0x5308>
   15bdc:	cmp	r0, #0
   15be0:	beq	15bf4 <__assert_fail@plt+0x4b3c>
   15be4:	mov	r1, r5
   15be8:	mov	r2, r4
   15bec:	pop	{r4, r5, fp, lr}
   15bf0:	b	10ea8 <memcpy@plt>
   15bf4:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15bf8:	push	{r4, r5, fp, lr}
   15bfc:	add	fp, sp, #8
   15c00:	mov	r5, r0
   15c04:	add	r0, r1, #1
   15c08:	mov	r4, r1
   15c0c:	bl	163c0 <__assert_fail@plt+0x5308>
   15c10:	cmp	r0, #0
   15c14:	beq	15c30 <__assert_fail@plt+0x4b78>
   15c18:	mov	r1, #0
   15c1c:	mov	r2, r4
   15c20:	strb	r1, [r0, r4]
   15c24:	mov	r1, r5
   15c28:	pop	{r4, r5, fp, lr}
   15c2c:	b	10ea8 <memcpy@plt>
   15c30:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15c34:	push	{r4, r5, fp, lr}
   15c38:	add	fp, sp, #8
   15c3c:	mov	r4, r0
   15c40:	bl	10fbc <strlen@plt>
   15c44:	add	r5, r0, #1
   15c48:	mov	r0, r5
   15c4c:	bl	163c0 <__assert_fail@plt+0x5308>
   15c50:	cmp	r0, #0
   15c54:	beq	15c68 <__assert_fail@plt+0x4bb0>
   15c58:	mov	r1, r4
   15c5c:	mov	r2, r5
   15c60:	pop	{r4, r5, fp, lr}
   15c64:	b	10ea8 <memcpy@plt>
   15c68:	bl	15c6c <__assert_fail@plt+0x4bb4>
   15c6c:	push	{fp, lr}
   15c70:	mov	fp, sp
   15c74:	movw	r0, #37108	; 0x90f4
   15c78:	movw	r1, #33664	; 0x8380
   15c7c:	mov	r2, #5
   15c80:	movt	r0, #2
   15c84:	movt	r1, #1
   15c88:	ldr	r4, [r0]
   15c8c:	mov	r0, #0
   15c90:	bl	10ee4 <dcgettext@plt>
   15c94:	movw	r2, #32627	; 0x7f73
   15c98:	mov	r3, r0
   15c9c:	mov	r0, r4
   15ca0:	mov	r1, #0
   15ca4:	movt	r2, #1
   15ca8:	bl	10f50 <error@plt>
   15cac:	bl	110a0 <abort@plt>
   15cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cb4:	add	fp, sp, #28
   15cb8:	sub	sp, sp, #20
   15cbc:	cmp	r2, #37	; 0x25
   15cc0:	bcs	1634c <__assert_fail@plt+0x5294>
   15cc4:	mov	r8, r3
   15cc8:	mov	r5, r2
   15ccc:	mov	r6, r1
   15cd0:	mov	r4, r0
   15cd4:	bl	10fd4 <__errno_location@plt>
   15cd8:	mov	r7, r0
   15cdc:	mov	r0, #0
   15ce0:	str	r0, [r7]
   15ce4:	bl	10f98 <__ctype_b_loc@plt>
   15ce8:	ldr	r1, [r0]
   15cec:	mov	r2, r4
   15cf0:	ldrb	r0, [r2], #1
   15cf4:	add	r3, r1, r0, lsl #1
   15cf8:	ldrb	r3, [r3, #1]
   15cfc:	tst	r3, #32
   15d00:	bne	15cf0 <__assert_fail@plt+0x4c38>
   15d04:	cmp	r6, #0
   15d08:	add	sl, sp, #16
   15d0c:	movne	sl, r6
   15d10:	mov	r6, #4
   15d14:	cmp	r0, #45	; 0x2d
   15d18:	beq	16340 <__assert_fail@plt+0x5288>
   15d1c:	mov	r0, r4
   15d20:	mov	r1, sl
   15d24:	mov	r2, r5
   15d28:	str	r8, [sp, #12]
   15d2c:	bl	1101c <strtoumax@plt>
   15d30:	ldr	r5, [sl]
   15d34:	cmp	r5, r4
   15d38:	beq	15d60 <__assert_fail@plt+0x4ca8>
   15d3c:	mov	r8, r0
   15d40:	ldr	r0, [r7]
   15d44:	mov	r9, r1
   15d48:	cmp	r0, #0
   15d4c:	beq	15d94 <__assert_fail@plt+0x4cdc>
   15d50:	cmp	r0, #34	; 0x22
   15d54:	bne	16340 <__assert_fail@plt+0x5288>
   15d58:	mov	r6, #1
   15d5c:	b	15d98 <__assert_fail@plt+0x4ce0>
   15d60:	ldr	r0, [fp, #8]
   15d64:	cmp	r0, #0
   15d68:	beq	16340 <__assert_fail@plt+0x5288>
   15d6c:	ldrb	r1, [r4]
   15d70:	cmp	r1, #0
   15d74:	beq	16340 <__assert_fail@plt+0x5288>
   15d78:	bl	10fc8 <strchr@plt>
   15d7c:	cmp	r0, #0
   15d80:	beq	16340 <__assert_fail@plt+0x5288>
   15d84:	mov	r6, #0
   15d88:	mov	r8, #1
   15d8c:	mov	r9, #0
   15d90:	b	15da4 <__assert_fail@plt+0x4cec>
   15d94:	mov	r6, r0
   15d98:	ldr	r0, [fp, #8]
   15d9c:	cmp	r0, #0
   15da0:	beq	16338 <__assert_fail@plt+0x5280>
   15da4:	ldrb	r7, [r5]
   15da8:	cmp	r7, #0
   15dac:	beq	16338 <__assert_fail@plt+0x5280>
   15db0:	ldr	r0, [fp, #8]
   15db4:	mov	r1, r7
   15db8:	bl	10fc8 <strchr@plt>
   15dbc:	cmp	r0, #0
   15dc0:	beq	15ec8 <__assert_fail@plt+0x4e10>
   15dc4:	sub	r0, r7, #69	; 0x45
   15dc8:	mov	r1, #1
   15dcc:	mov	r3, #0
   15dd0:	mov	r4, #1024	; 0x400
   15dd4:	cmp	r0, #21
   15dd8:	str	r1, [sp, #8]
   15ddc:	bhi	15df4 <__assert_fail@plt+0x4d3c>
   15de0:	movw	r2, #35141	; 0x8945
   15de4:	mov	r1, #1
   15de8:	movt	r2, #48	; 0x30
   15dec:	tst	r2, r1, lsl r0
   15df0:	bne	15e10 <__assert_fail@plt+0x4d58>
   15df4:	sub	r0, r7, #103	; 0x67
   15df8:	cmp	r0, #13
   15dfc:	bhi	15e44 <__assert_fail@plt+0x4d8c>
   15e00:	mov	r1, #1
   15e04:	movw	r2, #8273	; 0x2051
   15e08:	tst	r2, r1, lsl r0
   15e0c:	beq	15e44 <__assert_fail@plt+0x4d8c>
   15e10:	ldr	r0, [fp, #8]
   15e14:	mov	r1, #48	; 0x30
   15e18:	bl	10fc8 <strchr@plt>
   15e1c:	cmp	r0, #0
   15e20:	beq	15e40 <__assert_fail@plt+0x4d88>
   15e24:	ldrb	r0, [r5, #1]
   15e28:	cmp	r0, #66	; 0x42
   15e2c:	cmpne	r0, #68	; 0x44
   15e30:	bne	15f58 <__assert_fail@plt+0x4ea0>
   15e34:	mov	r4, #1000	; 0x3e8
   15e38:	mov	r0, #2
   15e3c:	str	r0, [sp, #8]
   15e40:	mov	r3, #0
   15e44:	cmp	r7, #89	; 0x59
   15e48:	stm	sp, {r5, r6}
   15e4c:	bgt	15ed4 <__assert_fail@plt+0x4e1c>
   15e50:	sub	r0, r7, #66	; 0x42
   15e54:	cmp	r0, #14
   15e58:	bhi	15f7c <__assert_fail@plt+0x4ec4>
   15e5c:	add	r1, pc, #0
   15e60:	ldr	pc, [r1, r0, lsl #2]
   15e64:	andeq	r5, r1, r0, lsr #29
   15e68:	andeq	r6, r1, ip, lsr #4
   15e6c:	andeq	r6, r1, ip, lsr #4
   15e70:	andeq	r6, r1, r0, asr #4
   15e74:	andeq	r6, r1, ip, lsr #4
   15e78:	andeq	r6, r1, r0, lsr r0
   15e7c:	andeq	r6, r1, ip, lsr #4
   15e80:	andeq	r6, r1, ip, lsr #4
   15e84:	andeq	r6, r1, ip, lsr #4
   15e88:	muleq	r1, ip, r0
   15e8c:	andeq	r6, r1, ip, lsr #4
   15e90:	andeq	r6, r1, r0, ror #1
   15e94:	andeq	r6, r1, ip, lsr #4
   15e98:	andeq	r6, r1, ip, lsr #4
   15e9c:	andeq	r6, r1, ip, lsr #5
   15ea0:	mov	r1, #0
   15ea4:	lsl	r3, r9, #10
   15ea8:	lsl	r0, r8, #10
   15eac:	lsr	r2, r9, #22
   15eb0:	cmp	r1, r9, lsr #22
   15eb4:	orr	r3, r3, r8, lsr #22
   15eb8:	mvnne	r0, #0
   15ebc:	movwne	r2, #1
   15ec0:	cmp	r1, r9, lsr #22
   15ec4:	b	15f48 <__assert_fail@plt+0x4e90>
   15ec8:	ldr	r0, [sp, #12]
   15ecc:	orr	r6, r6, #2
   15ed0:	b	1633c <__assert_fail@plt+0x5284>
   15ed4:	cmp	r7, #115	; 0x73
   15ed8:	bgt	15ff8 <__assert_fail@plt+0x4f40>
   15edc:	sub	r0, r7, #98	; 0x62
   15ee0:	cmp	r0, #11
   15ee4:	bhi	161b8 <__assert_fail@plt+0x5100>
   15ee8:	add	r1, pc, #4
   15eec:	mov	r2, #0
   15ef0:	ldr	pc, [r1, r0, lsl #2]
   15ef4:	andeq	r5, r1, r4, lsr #30
   15ef8:	andeq	r6, r1, r4, lsl r3
   15efc:	andeq	r6, r1, ip, lsr #4
   15f00:	andeq	r6, r1, ip, lsr #4
   15f04:	andeq	r6, r1, ip, lsr #4
   15f08:	andeq	r6, r1, r0, lsr r0
   15f0c:	andeq	r6, r1, ip, lsr #4
   15f10:	andeq	r6, r1, ip, lsr #4
   15f14:	andeq	r6, r1, ip, lsr #4
   15f18:	muleq	r1, ip, r0
   15f1c:	andeq	r6, r1, ip, lsr #4
   15f20:	andeq	r6, r1, r0, ror #1
   15f24:	mov	r1, #0
   15f28:	lsl	r3, r9, #9
   15f2c:	lsl	r0, r8, #9
   15f30:	lsr	r2, r9, #23
   15f34:	cmp	r1, r9, lsr #23
   15f38:	orr	r3, r3, r8, lsr #23
   15f3c:	mvnne	r0, #0
   15f40:	movwne	r2, #1
   15f44:	cmp	r1, r9, lsr #23
   15f48:	mvnne	r3, #0
   15f4c:	mov	r8, r0
   15f50:	mov	r9, r3
   15f54:	b	16314 <__assert_fail@plt+0x525c>
   15f58:	cmp	r0, #105	; 0x69
   15f5c:	mov	r3, #0
   15f60:	bne	15e44 <__assert_fail@plt+0x4d8c>
   15f64:	ldrb	r0, [r5, #2]
   15f68:	mov	r1, #1
   15f6c:	cmp	r0, #66	; 0x42
   15f70:	movweq	r1, #3
   15f74:	str	r1, [sp, #8]
   15f78:	b	15e44 <__assert_fail@plt+0x4d8c>
   15f7c:	cmp	r7, #84	; 0x54
   15f80:	beq	1614c <__assert_fail@plt+0x5094>
   15f84:	cmp	r7, #89	; 0x59
   15f88:	bne	1622c <__assert_fail@plt+0x5174>
   15f8c:	mvn	r0, #0
   15f90:	mvn	r1, #0
   15f94:	mov	r2, r4
   15f98:	mov	r5, r3
   15f9c:	bl	16834 <__assert_fail@plt+0x577c>
   15fa0:	mov	ip, r5
   15fa4:	mvn	lr, #0
   15fa8:	mov	r2, #0
   15fac:	mvn	r3, #7
   15fb0:	mov	r5, r8
   15fb4:	mov	r7, r9
   15fb8:	umull	r8, r6, r5, r4
   15fbc:	mvn	r9, #0
   15fc0:	mla	r6, r5, ip, r6
   15fc4:	subs	r5, r0, r5
   15fc8:	sbcs	r5, r1, r7
   15fcc:	mov	r5, #0
   15fd0:	movwcc	r5, #1
   15fd4:	cmp	r5, #0
   15fd8:	mlaeq	r9, r7, r4, r6
   15fdc:	movne	r8, lr
   15fe0:	orrne	r2, r2, #1
   15fe4:	adds	r3, r3, #1
   15fe8:	mov	r5, r8
   15fec:	mov	r7, r9
   15ff0:	bcc	15fb8 <__assert_fail@plt+0x4f00>
   15ff4:	b	16314 <__assert_fail@plt+0x525c>
   15ff8:	cmp	r7, #116	; 0x74
   15ffc:	beq	1614c <__assert_fail@plt+0x5094>
   16000:	cmp	r7, #119	; 0x77
   16004:	bne	1622c <__assert_fail@plt+0x5174>
   16008:	lsl	r1, r9, #1
   1600c:	cmp	r9, #0
   16010:	lsl	r0, r8, #1
   16014:	lsr	r2, r9, #31
   16018:	orr	r1, r1, r8, lsr #31
   1601c:	mvnmi	r0, #0
   16020:	mvnmi	r1, #0
   16024:	mov	r8, r0
   16028:	mov	r9, r1
   1602c:	b	16314 <__assert_fail@plt+0x525c>
   16030:	mvn	r0, #0
   16034:	mvn	r1, #0
   16038:	mov	r2, r4
   1603c:	mov	r5, r3
   16040:	bl	16834 <__assert_fail@plt+0x577c>
   16044:	mov	ip, r5
   16048:	mvn	lr, #0
   1604c:	mov	r2, #0
   16050:	mvn	r3, #2
   16054:	mov	r6, r8
   16058:	mov	r5, r9
   1605c:	umull	r8, r7, r6, r4
   16060:	mvn	r9, #0
   16064:	mla	r7, r6, ip, r7
   16068:	subs	r6, r0, r6
   1606c:	sbcs	r6, r1, r5
   16070:	mov	r6, #0
   16074:	movwcc	r6, #1
   16078:	cmp	r6, #0
   1607c:	mlaeq	r9, r5, r4, r7
   16080:	movne	r8, lr
   16084:	orrne	r2, r2, #1
   16088:	adds	r3, r3, #1
   1608c:	mov	r6, r8
   16090:	mov	r5, r9
   16094:	bcc	1605c <__assert_fail@plt+0x4fa4>
   16098:	b	16314 <__assert_fail@plt+0x525c>
   1609c:	mvn	r0, #0
   160a0:	mvn	r1, #0
   160a4:	mov	r2, r4
   160a8:	mov	r5, r3
   160ac:	bl	16834 <__assert_fail@plt+0x577c>
   160b0:	subs	r0, r0, r8
   160b4:	mov	r2, #0
   160b8:	sbcs	r0, r1, r9
   160bc:	umull	r0, r1, r8, r4
   160c0:	movwcc	r2, #1
   160c4:	cmp	r2, #0
   160c8:	mla	r1, r8, r5, r1
   160cc:	mvnne	r0, #0
   160d0:	mla	r9, r9, r4, r1
   160d4:	mvnne	r9, #0
   160d8:	mov	r8, r0
   160dc:	b	16314 <__assert_fail@plt+0x525c>
   160e0:	mvn	r0, #0
   160e4:	mvn	r1, #0
   160e8:	mov	r2, r4
   160ec:	mov	r5, r3
   160f0:	bl	16834 <__assert_fail@plt+0x577c>
   160f4:	mov	ip, r5
   160f8:	mvn	lr, #0
   160fc:	mov	r2, #0
   16100:	mvn	r3, #1
   16104:	mov	r6, r8
   16108:	mov	r5, r9
   1610c:	umull	r8, r7, r6, r4
   16110:	mvn	r9, #0
   16114:	mla	r7, r6, ip, r7
   16118:	subs	r6, r0, r6
   1611c:	sbcs	r6, r1, r5
   16120:	mov	r6, #0
   16124:	movwcc	r6, #1
   16128:	cmp	r6, #0
   1612c:	mlaeq	r9, r5, r4, r7
   16130:	movne	r8, lr
   16134:	orrne	r2, r2, #1
   16138:	adds	r3, r3, #1
   1613c:	mov	r6, r8
   16140:	mov	r5, r9
   16144:	bcc	1610c <__assert_fail@plt+0x5054>
   16148:	b	16314 <__assert_fail@plt+0x525c>
   1614c:	mvn	r0, #0
   16150:	mvn	r1, #0
   16154:	mov	r2, r4
   16158:	mov	r5, r3
   1615c:	bl	16834 <__assert_fail@plt+0x577c>
   16160:	mov	ip, r5
   16164:	mvn	lr, #0
   16168:	mov	r2, #0
   1616c:	mvn	r3, #3
   16170:	mov	r6, r8
   16174:	mov	r5, r9
   16178:	umull	r8, r7, r6, r4
   1617c:	mvn	r9, #0
   16180:	mla	r7, r6, ip, r7
   16184:	subs	r6, r0, r6
   16188:	sbcs	r6, r1, r5
   1618c:	mov	r6, #0
   16190:	movwcc	r6, #1
   16194:	cmp	r6, #0
   16198:	mlaeq	r9, r5, r4, r7
   1619c:	movne	r8, lr
   161a0:	orrne	r2, r2, #1
   161a4:	adds	r3, r3, #1
   161a8:	mov	r6, r8
   161ac:	mov	r5, r9
   161b0:	bcc	16178 <__assert_fail@plt+0x50c0>
   161b4:	b	16314 <__assert_fail@plt+0x525c>
   161b8:	cmp	r7, #90	; 0x5a
   161bc:	bne	1622c <__assert_fail@plt+0x5174>
   161c0:	mvn	r0, #0
   161c4:	mvn	r1, #0
   161c8:	mov	r2, r4
   161cc:	mov	r5, r3
   161d0:	bl	16834 <__assert_fail@plt+0x577c>
   161d4:	mov	ip, r5
   161d8:	mvn	lr, #0
   161dc:	mov	r2, #0
   161e0:	mvn	r3, #6
   161e4:	mov	r5, r8
   161e8:	mov	r7, r9
   161ec:	umull	r8, r6, r5, r4
   161f0:	mvn	r9, #0
   161f4:	mla	r6, r5, ip, r6
   161f8:	subs	r5, r0, r5
   161fc:	sbcs	r5, r1, r7
   16200:	mov	r5, #0
   16204:	movwcc	r5, #1
   16208:	cmp	r5, #0
   1620c:	mlaeq	r9, r7, r4, r6
   16210:	movne	r8, lr
   16214:	orrne	r2, r2, #1
   16218:	adds	r3, r3, #1
   1621c:	mov	r5, r8
   16220:	mov	r7, r9
   16224:	bcc	161ec <__assert_fail@plt+0x5134>
   16228:	b	16314 <__assert_fail@plt+0x525c>
   1622c:	ldr	r0, [sp, #12]
   16230:	strd	r8, [r0]
   16234:	ldr	r6, [sp, #4]
   16238:	orr	r6, r6, #2
   1623c:	b	16340 <__assert_fail@plt+0x5288>
   16240:	mvn	r0, #0
   16244:	mvn	r1, #0
   16248:	mov	r2, r4
   1624c:	mov	r5, r3
   16250:	bl	16834 <__assert_fail@plt+0x577c>
   16254:	mov	ip, r5
   16258:	mvn	lr, #0
   1625c:	mov	r2, #0
   16260:	mvn	r3, #5
   16264:	mov	r5, r8
   16268:	mov	r7, r9
   1626c:	umull	r8, r6, r5, r4
   16270:	mvn	r9, #0
   16274:	mla	r6, r5, ip, r6
   16278:	subs	r5, r0, r5
   1627c:	sbcs	r5, r1, r7
   16280:	mov	r5, #0
   16284:	movwcc	r5, #1
   16288:	cmp	r5, #0
   1628c:	mlaeq	r9, r7, r4, r6
   16290:	movne	r8, lr
   16294:	orrne	r2, r2, #1
   16298:	adds	r3, r3, #1
   1629c:	mov	r5, r8
   162a0:	mov	r7, r9
   162a4:	bcc	1626c <__assert_fail@plt+0x51b4>
   162a8:	b	16314 <__assert_fail@plt+0x525c>
   162ac:	mvn	r0, #0
   162b0:	mvn	r1, #0
   162b4:	mov	r2, r4
   162b8:	mov	r5, r3
   162bc:	bl	16834 <__assert_fail@plt+0x577c>
   162c0:	mov	ip, r5
   162c4:	mvn	lr, #0
   162c8:	mov	r2, #0
   162cc:	mvn	r3, #4
   162d0:	mov	r5, r8
   162d4:	mov	r7, r9
   162d8:	umull	r8, r6, r5, r4
   162dc:	mvn	r9, #0
   162e0:	mla	r6, r5, ip, r6
   162e4:	subs	r5, r0, r5
   162e8:	sbcs	r5, r1, r7
   162ec:	mov	r5, #0
   162f0:	movwcc	r5, #1
   162f4:	cmp	r5, #0
   162f8:	mlaeq	r9, r7, r4, r6
   162fc:	movne	r8, lr
   16300:	orrne	r2, r2, #1
   16304:	adds	r3, r3, #1
   16308:	mov	r5, r8
   1630c:	mov	r7, r9
   16310:	bcc	162d8 <__assert_fail@plt+0x5220>
   16314:	ldr	r1, [sp]
   16318:	ldr	r3, [sp, #8]
   1631c:	ldr	r6, [sp, #4]
   16320:	add	r0, r1, r3
   16324:	orr	r6, r2, r6
   16328:	str	r0, [sl]
   1632c:	ldrb	r0, [r1, r3]
   16330:	cmp	r0, #0
   16334:	orrne	r6, r6, #2
   16338:	ldr	r0, [sp, #12]
   1633c:	strd	r8, [r0]
   16340:	mov	r0, r6
   16344:	sub	sp, fp, #28
   16348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1634c:	movw	r0, #33681	; 0x8391
   16350:	movw	r1, #33719	; 0x83b7
   16354:	movw	r3, #33735	; 0x83c7
   16358:	mov	r2, #85	; 0x55
   1635c:	movt	r0, #1
   16360:	movt	r1, #1
   16364:	movt	r3, #1
   16368:	bl	110b8 <__assert_fail@plt>
   1636c:	clz	r2, r1
   16370:	clz	r3, r0
   16374:	lsr	r2, r2, #5
   16378:	lsr	r3, r3, #5
   1637c:	orrs	r2, r3, r2
   16380:	movwne	r1, #1
   16384:	movwne	r0, #1
   16388:	cmp	r1, #0
   1638c:	beq	163bc <__assert_fail@plt+0x5304>
   16390:	mvn	r2, #-2147483648	; 0x80000000
   16394:	udiv	r2, r2, r1
   16398:	cmp	r2, r0
   1639c:	bcs	163bc <__assert_fail@plt+0x5304>
   163a0:	push	{fp, lr}
   163a4:	mov	fp, sp
   163a8:	bl	10fd4 <__errno_location@plt>
   163ac:	mov	r1, #12
   163b0:	str	r1, [r0]
   163b4:	mov	r0, #0
   163b8:	pop	{fp, pc}
   163bc:	b	10e3c <calloc@plt>
   163c0:	cmp	r0, #0
   163c4:	movweq	r0, #1
   163c8:	cmn	r0, #1
   163cc:	ble	163d4 <__assert_fail@plt+0x531c>
   163d0:	b	10f5c <malloc@plt>
   163d4:	push	{fp, lr}
   163d8:	mov	fp, sp
   163dc:	bl	10fd4 <__errno_location@plt>
   163e0:	mov	r1, #12
   163e4:	str	r1, [r0]
   163e8:	mov	r0, #0
   163ec:	pop	{fp, pc}
   163f0:	push	{fp, lr}
   163f4:	mov	fp, sp
   163f8:	cmp	r0, #0
   163fc:	beq	16418 <__assert_fail@plt+0x5360>
   16400:	cmp	r1, #0
   16404:	beq	16424 <__assert_fail@plt+0x536c>
   16408:	cmn	r1, #1
   1640c:	ble	1642c <__assert_fail@plt+0x5374>
   16410:	pop	{fp, lr}
   16414:	b	10ef0 <realloc@plt>
   16418:	mov	r0, r1
   1641c:	pop	{fp, lr}
   16420:	b	163c0 <__assert_fail@plt+0x5308>
   16424:	bl	137bc <__assert_fail@plt+0x2704>
   16428:	b	16438 <__assert_fail@plt+0x5380>
   1642c:	bl	10fd4 <__errno_location@plt>
   16430:	mov	r1, #12
   16434:	str	r1, [r0]
   16438:	mov	r0, #0
   1643c:	pop	{fp, pc}
   16440:	push	{r4, r5, r6, sl, fp, lr}
   16444:	add	fp, sp, #16
   16448:	mov	r4, r0
   1644c:	bl	10f2c <__fpending@plt>
   16450:	mov	r5, r0
   16454:	mov	r0, r4
   16458:	bl	10f38 <ferror_unlocked@plt>
   1645c:	mov	r6, r0
   16460:	mov	r0, r4
   16464:	bl	164c0 <__assert_fail@plt+0x5408>
   16468:	cmp	r6, #0
   1646c:	beq	1648c <__assert_fail@plt+0x53d4>
   16470:	mvn	r4, #0
   16474:	cmp	r0, #0
   16478:	bne	164b8 <__assert_fail@plt+0x5400>
   1647c:	bl	10fd4 <__errno_location@plt>
   16480:	mov	r1, #0
   16484:	str	r1, [r0]
   16488:	b	164b8 <__assert_fail@plt+0x5400>
   1648c:	cmp	r0, #0
   16490:	mov	r4, r0
   16494:	mvnne	r4, #0
   16498:	cmp	r5, #0
   1649c:	bne	164b8 <__assert_fail@plt+0x5400>
   164a0:	cmp	r0, #0
   164a4:	beq	164b8 <__assert_fail@plt+0x5400>
   164a8:	bl	10fd4 <__errno_location@plt>
   164ac:	ldr	r0, [r0]
   164b0:	subs	r4, r0, #9
   164b4:	mvnne	r4, #0
   164b8:	mov	r0, r4
   164bc:	pop	{r4, r5, r6, sl, fp, pc}
   164c0:	push	{r4, r5, r6, sl, fp, lr}
   164c4:	add	fp, sp, #16
   164c8:	sub	sp, sp, #8
   164cc:	mov	r4, r0
   164d0:	bl	11010 <fileno@plt>
   164d4:	cmn	r0, #1
   164d8:	ble	1654c <__assert_fail@plt+0x5494>
   164dc:	mov	r0, r4
   164e0:	bl	10f74 <__freading@plt>
   164e4:	cmp	r0, #0
   164e8:	beq	16514 <__assert_fail@plt+0x545c>
   164ec:	mov	r0, r4
   164f0:	bl	11010 <fileno@plt>
   164f4:	mov	r1, #1
   164f8:	mov	r2, #0
   164fc:	mov	r3, #0
   16500:	str	r1, [sp]
   16504:	bl	10f14 <lseek64@plt>
   16508:	and	r0, r0, r1
   1650c:	cmn	r0, #1
   16510:	beq	1654c <__assert_fail@plt+0x5494>
   16514:	mov	r0, r4
   16518:	bl	1655c <__assert_fail@plt+0x54a4>
   1651c:	cmp	r0, #0
   16520:	beq	1654c <__assert_fail@plt+0x5494>
   16524:	bl	10fd4 <__errno_location@plt>
   16528:	ldr	r6, [r0]
   1652c:	mov	r5, r0
   16530:	mov	r0, r4
   16534:	bl	11034 <fclose@plt>
   16538:	cmp	r6, #0
   1653c:	strne	r6, [r5]
   16540:	mvnne	r0, #0
   16544:	sub	sp, fp, #16
   16548:	pop	{r4, r5, r6, sl, fp, pc}
   1654c:	mov	r0, r4
   16550:	sub	sp, fp, #16
   16554:	pop	{r4, r5, r6, sl, fp, lr}
   16558:	b	11034 <fclose@plt>
   1655c:	push	{r4, sl, fp, lr}
   16560:	add	fp, sp, #8
   16564:	sub	sp, sp, #8
   16568:	mov	r4, r0
   1656c:	cmp	r0, #0
   16570:	beq	165a8 <__assert_fail@plt+0x54f0>
   16574:	mov	r0, r4
   16578:	bl	10f74 <__freading@plt>
   1657c:	cmp	r0, #0
   16580:	beq	165a8 <__assert_fail@plt+0x54f0>
   16584:	ldrb	r0, [r4, #1]
   16588:	tst	r0, #1
   1658c:	beq	165a8 <__assert_fail@plt+0x54f0>
   16590:	mov	r0, #1
   16594:	mov	r2, #0
   16598:	mov	r3, #0
   1659c:	str	r0, [sp]
   165a0:	mov	r0, r4
   165a4:	bl	165b8 <__assert_fail@plt+0x5500>
   165a8:	mov	r0, r4
   165ac:	sub	sp, fp, #8
   165b0:	pop	{r4, sl, fp, lr}
   165b4:	b	10e84 <fflush@plt>
   165b8:	push	{r4, r5, r6, r7, fp, lr}
   165bc:	add	fp, sp, #16
   165c0:	sub	sp, sp, #8
   165c4:	mov	r4, r0
   165c8:	ldr	r0, [r0, #4]
   165cc:	mov	r5, r3
   165d0:	mov	r6, r2
   165d4:	ldr	r1, [r4, #8]
   165d8:	cmp	r1, r0
   165dc:	bne	165f8 <__assert_fail@plt+0x5540>
   165e0:	ldrd	r0, [r4, #16]
   165e4:	cmp	r1, r0
   165e8:	bne	165f8 <__assert_fail@plt+0x5540>
   165ec:	ldr	r0, [r4, #36]	; 0x24
   165f0:	cmp	r0, #0
   165f4:	beq	16610 <__assert_fail@plt+0x5558>
   165f8:	mov	r0, r4
   165fc:	mov	r2, r6
   16600:	mov	r3, r5
   16604:	sub	sp, fp, #16
   16608:	pop	{r4, r5, r6, r7, fp, lr}
   1660c:	b	11040 <fseeko64@plt>
   16610:	ldr	r7, [fp, #8]
   16614:	mov	r0, r4
   16618:	bl	11010 <fileno@plt>
   1661c:	mov	r2, r6
   16620:	mov	r3, r5
   16624:	str	r7, [sp]
   16628:	bl	10f14 <lseek64@plt>
   1662c:	and	r2, r0, r1
   16630:	cmn	r2, #1
   16634:	beq	16650 <__assert_fail@plt+0x5598>
   16638:	strd	r0, [r4, #80]	; 0x50
   1663c:	ldr	r0, [r4]
   16640:	bic	r0, r0, #16
   16644:	str	r0, [r4]
   16648:	mov	r0, #0
   1664c:	b	16654 <__assert_fail@plt+0x559c>
   16650:	mvn	r0, #0
   16654:	sub	sp, fp, #16
   16658:	pop	{r4, r5, r6, r7, fp, pc}
   1665c:	push	{fp, lr}
   16660:	mov	fp, sp
   16664:	mov	r0, #14
   16668:	bl	11070 <nl_langinfo@plt>
   1666c:	movw	r1, #30263	; 0x7637
   16670:	cmp	r0, #0
   16674:	movt	r1, #1
   16678:	movne	r1, r0
   1667c:	movw	r0, #33814	; 0x8416
   16680:	ldrb	r2, [r1]
   16684:	movt	r0, #1
   16688:	cmp	r2, #0
   1668c:	movne	r0, r1
   16690:	pop	{fp, pc}
   16694:	push	{r4, r5, r6, r7, fp, lr}
   16698:	add	fp, sp, #16
   1669c:	sub	sp, sp, #8
   166a0:	cmp	r0, #0
   166a4:	add	r5, sp, #4
   166a8:	mov	r7, r2
   166ac:	mov	r4, r1
   166b0:	movne	r5, r0
   166b4:	mov	r0, r5
   166b8:	bl	10f44 <mbrtowc@plt>
   166bc:	mov	r6, r0
   166c0:	cmp	r7, #0
   166c4:	beq	166ec <__assert_fail@plt+0x5634>
   166c8:	cmn	r6, #2
   166cc:	bcc	166ec <__assert_fail@plt+0x5634>
   166d0:	mov	r0, #0
   166d4:	bl	16734 <__assert_fail@plt+0x567c>
   166d8:	cmp	r0, #0
   166dc:	bne	166ec <__assert_fail@plt+0x5634>
   166e0:	ldrb	r0, [r4]
   166e4:	mov	r6, #1
   166e8:	str	r0, [r5]
   166ec:	mov	r0, r6
   166f0:	sub	sp, fp, #16
   166f4:	pop	{r4, r5, r6, r7, fp, pc}
   166f8:	cmp	r2, #0
   166fc:	beq	1672c <__assert_fail@plt+0x5674>
   16700:	mvn	r3, #0
   16704:	udiv	r3, r3, r2
   16708:	cmp	r3, r1
   1670c:	bcs	1672c <__assert_fail@plt+0x5674>
   16710:	push	{fp, lr}
   16714:	mov	fp, sp
   16718:	bl	10fd4 <__errno_location@plt>
   1671c:	mov	r1, #12
   16720:	str	r1, [r0]
   16724:	mov	r0, #0
   16728:	pop	{fp, pc}
   1672c:	mul	r1, r2, r1
   16730:	b	163f0 <__assert_fail@plt+0x5338>
   16734:	push	{r4, sl, fp, lr}
   16738:	add	fp, sp, #8
   1673c:	sub	sp, sp, #264	; 0x108
   16740:	add	r1, sp, #7
   16744:	movw	r2, #257	; 0x101
   16748:	bl	167a0 <__assert_fail@plt+0x56e8>
   1674c:	mov	r4, #0
   16750:	cmp	r0, #0
   16754:	bne	16794 <__assert_fail@plt+0x56dc>
   16758:	movw	r1, #29573	; 0x7385
   1675c:	add	r0, sp, #7
   16760:	mov	r2, #2
   16764:	movt	r1, #1
   16768:	bl	10fb0 <bcmp@plt>
   1676c:	cmp	r0, #0
   16770:	beq	16794 <__assert_fail@plt+0x56dc>
   16774:	movw	r1, #33820	; 0x841c
   16778:	add	r0, sp, #7
   1677c:	mov	r2, #6
   16780:	movt	r1, #1
   16784:	bl	10fb0 <bcmp@plt>
   16788:	cmp	r0, #0
   1678c:	mov	r4, r0
   16790:	movwne	r4, #1
   16794:	mov	r0, r4
   16798:	sub	sp, fp, #8
   1679c:	pop	{r4, sl, fp, pc}
   167a0:	push	{r4, r5, r6, r7, fp, lr}
   167a4:	add	fp, sp, #16
   167a8:	mov	r4, r1
   167ac:	mov	r1, #0
   167b0:	mov	r6, r2
   167b4:	bl	1104c <setlocale@plt>
   167b8:	cmp	r0, #0
   167bc:	beq	167e8 <__assert_fail@plt+0x5730>
   167c0:	mov	r7, r0
   167c4:	bl	10fbc <strlen@plt>
   167c8:	cmp	r0, r6
   167cc:	bcs	167fc <__assert_fail@plt+0x5744>
   167d0:	add	r2, r0, #1
   167d4:	mov	r0, r4
   167d8:	mov	r1, r7
   167dc:	bl	10ea8 <memcpy@plt>
   167e0:	mov	r5, #0
   167e4:	b	16824 <__assert_fail@plt+0x576c>
   167e8:	cmp	r6, #0
   167ec:	mov	r5, #22
   167f0:	movne	r0, #0
   167f4:	strbne	r0, [r4]
   167f8:	b	16824 <__assert_fail@plt+0x576c>
   167fc:	mov	r5, #34	; 0x22
   16800:	cmp	r6, #0
   16804:	beq	16824 <__assert_fail@plt+0x576c>
   16808:	sub	r6, r6, #1
   1680c:	mov	r0, r4
   16810:	mov	r1, r7
   16814:	mov	r2, r6
   16818:	bl	10ea8 <memcpy@plt>
   1681c:	mov	r0, #0
   16820:	strb	r0, [r4, r6]
   16824:	mov	r0, r5
   16828:	pop	{r4, r5, r6, r7, fp, pc}
   1682c:	mov	r1, #0
   16830:	b	1104c <setlocale@plt>
   16834:	cmp	r3, #0
   16838:	cmpeq	r2, #0
   1683c:	bne	16854 <__assert_fail@plt+0x579c>
   16840:	cmp	r1, #0
   16844:	cmpeq	r0, #0
   16848:	mvnne	r1, #0
   1684c:	mvnne	r0, #0
   16850:	b	16870 <__assert_fail@plt+0x57b8>
   16854:	sub	sp, sp, #8
   16858:	push	{sp, lr}
   1685c:	bl	16880 <__assert_fail@plt+0x57c8>
   16860:	ldr	lr, [sp, #4]
   16864:	add	sp, sp, #8
   16868:	pop	{r2, r3}
   1686c:	bx	lr
   16870:	push	{r1, lr}
   16874:	mov	r0, #8
   16878:	bl	10e54 <raise@plt>
   1687c:	pop	{r1, pc}
   16880:	cmp	r1, r3
   16884:	cmpeq	r0, r2
   16888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1688c:	mov	r4, r0
   16890:	movcc	r0, #0
   16894:	mov	r5, r1
   16898:	ldr	lr, [sp, #36]	; 0x24
   1689c:	movcc	r1, r0
   168a0:	bcc	1699c <__assert_fail@plt+0x58e4>
   168a4:	cmp	r3, #0
   168a8:	clzeq	ip, r2
   168ac:	clzne	ip, r3
   168b0:	addeq	ip, ip, #32
   168b4:	cmp	r5, #0
   168b8:	clzeq	r1, r4
   168bc:	addeq	r1, r1, #32
   168c0:	clzne	r1, r5
   168c4:	sub	ip, ip, r1
   168c8:	sub	sl, ip, #32
   168cc:	lsl	r9, r3, ip
   168d0:	rsb	fp, ip, #32
   168d4:	orr	r9, r9, r2, lsl sl
   168d8:	orr	r9, r9, r2, lsr fp
   168dc:	lsl	r8, r2, ip
   168e0:	cmp	r5, r9
   168e4:	cmpeq	r4, r8
   168e8:	movcc	r0, #0
   168ec:	movcc	r1, r0
   168f0:	bcc	1690c <__assert_fail@plt+0x5854>
   168f4:	mov	r0, #1
   168f8:	subs	r4, r4, r8
   168fc:	lsl	r1, r0, sl
   16900:	orr	r1, r1, r0, lsr fp
   16904:	lsl	r0, r0, ip
   16908:	sbc	r5, r5, r9
   1690c:	cmp	ip, #0
   16910:	beq	1699c <__assert_fail@plt+0x58e4>
   16914:	lsr	r6, r8, #1
   16918:	orr	r6, r6, r9, lsl #31
   1691c:	lsr	r7, r9, #1
   16920:	mov	r2, ip
   16924:	b	16948 <__assert_fail@plt+0x5890>
   16928:	subs	r3, r4, r6
   1692c:	sbc	r8, r5, r7
   16930:	adds	r3, r3, r3
   16934:	adc	r8, r8, r8
   16938:	adds	r4, r3, #1
   1693c:	adc	r5, r8, #0
   16940:	subs	r2, r2, #1
   16944:	beq	16964 <__assert_fail@plt+0x58ac>
   16948:	cmp	r5, r7
   1694c:	cmpeq	r4, r6
   16950:	bcs	16928 <__assert_fail@plt+0x5870>
   16954:	adds	r4, r4, r4
   16958:	adc	r5, r5, r5
   1695c:	subs	r2, r2, #1
   16960:	bne	16948 <__assert_fail@plt+0x5890>
   16964:	lsr	r3, r4, ip
   16968:	orr	r3, r3, r5, lsl fp
   1696c:	lsr	r2, r5, ip
   16970:	orr	r3, r3, r5, lsr sl
   16974:	adds	r0, r0, r4
   16978:	mov	r4, r3
   1697c:	lsl	r3, r2, ip
   16980:	orr	r3, r3, r4, lsl sl
   16984:	lsl	ip, r4, ip
   16988:	orr	r3, r3, r4, lsr fp
   1698c:	adc	r1, r1, r5
   16990:	subs	r0, r0, ip
   16994:	mov	r5, r2
   16998:	sbc	r1, r1, r3
   1699c:	cmp	lr, #0
   169a0:	strdne	r4, [lr]
   169a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   169ac:	mov	r7, r0
   169b0:	ldr	r6, [pc, #72]	; 16a00 <__assert_fail@plt+0x5948>
   169b4:	ldr	r5, [pc, #72]	; 16a04 <__assert_fail@plt+0x594c>
   169b8:	add	r6, pc, r6
   169bc:	add	r5, pc, r5
   169c0:	sub	r6, r6, r5
   169c4:	mov	r8, r1
   169c8:	mov	r9, r2
   169cc:	bl	10e1c <calloc@plt-0x20>
   169d0:	asrs	r6, r6, #2
   169d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   169d8:	mov	r4, #0
   169dc:	add	r4, r4, #1
   169e0:	ldr	r3, [r5], #4
   169e4:	mov	r2, r9
   169e8:	mov	r1, r8
   169ec:	mov	r0, r7
   169f0:	blx	r3
   169f4:	cmp	r6, r4
   169f8:	bne	169dc <__assert_fail@plt+0x5924>
   169fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a00:	andeq	r2, r1, ip, asr #10
   16a04:	andeq	r2, r1, r4, asr #10
   16a08:	bx	lr
   16a0c:	ldr	r3, [pc, #12]	; 16a20 <__assert_fail@plt+0x5968>
   16a10:	mov	r1, #0
   16a14:	add	r3, pc, r3
   16a18:	ldr	r2, [r3]
   16a1c:	b	10fec <__cxa_atexit@plt>
   16a20:	ldrdeq	r2, [r1], -r0

Disassembly of section .fini:

00016a24 <.fini>:
   16a24:	push	{r3, lr}
   16a28:	pop	{r3, pc}
