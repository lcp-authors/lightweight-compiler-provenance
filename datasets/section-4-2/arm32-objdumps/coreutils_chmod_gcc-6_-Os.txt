
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010ec4 <.init>:
   10ec4:	push	{r3, lr}
   10ec8:	bl	11e00 <__assert_fail@plt+0xc1c>
   10ecc:	pop	{r3, pc}

Disassembly of section .plt:

00010ed0 <fstatfs64@plt-0x14>:
   10ed0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ed4:	ldr	lr, [pc, #4]	; 10ee0 <fstatfs64@plt-0x4>
   10ed8:	add	lr, pc, lr
   10edc:	ldr	pc, [lr, #8]!
   10ee0:	andeq	r9, r1, r0, lsr #2

00010ee4 <fstatfs64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #288]!	; 0x120

00010ef0 <calloc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #280]!	; 0x118

00010efc <fputs_unlocked@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #272]!	; 0x110

00010f08 <raise@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #264]!	; 0x108

00010f14 <strcmp@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #256]!	; 0x100

00010f20 <fflush@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #248]!	; 0xf8

00010f2c <memmove@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #240]!	; 0xf0

00010f38 <free@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #232]!	; 0xe8

00010f44 <_exit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #224]!	; 0xe0

00010f50 <memcpy@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #216]!	; 0xd8

00010f5c <mbsinit@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #208]!	; 0xd0

00010f68 <memcmp@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #200]!	; 0xc8

00010f74 <fputc_unlocked@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #192]!	; 0xc0

00010f80 <dcgettext@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #184]!	; 0xb8

00010f8c <realloc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #176]!	; 0xb0

00010f98 <textdomain@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #168]!	; 0xa8

00010fa4 <__fxstatat64@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #160]!	; 0xa0

00010fb0 <iswprint@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #152]!	; 0x98

00010fbc <__fxstat64@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #144]!	; 0x90

00010fc8 <lseek64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #136]!	; 0x88

00010fd4 <__ctype_get_mb_cur_max@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #128]!	; 0x80

00010fe0 <__fpending@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #120]!	; 0x78

00010fec <ferror_unlocked@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #112]!	; 0x70

00010ff8 <mbrtowc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #104]!	; 0x68

00011004 <error@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #96]!	; 0x60

00011010 <open64@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #88]!	; 0x58

0001101c <malloc@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #80]!	; 0x50

00011028 <__libc_start_main@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #72]!	; 0x48

00011034 <__freading@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #64]!	; 0x40

00011040 <__gmon_start__@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #56]!	; 0x38

0001104c <getopt_long@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #48]!	; 0x30

00011058 <__ctype_b_loc@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #40]!	; 0x28

00011064 <exit@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #32]!

00011070 <strlen@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #24]!

0001107c <openat64@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #16]!

00011088 <fchmodat@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #8]!

00011094 <__errno_location@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #0]!

000110a0 <__sprintf_chk@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #4088]!	; 0xff8

000110ac <__cxa_atexit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #4080]!	; 0xff0

000110b8 <memset@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110c4 <__printf_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #24, 20	; 0x18000
   110cc:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d0 <fileno@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #24, 20	; 0x18000
   110d8:	ldr	pc, [ip, #4056]!	; 0xfd8

000110dc <__fprintf_chk@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #24, 20	; 0x18000
   110e4:	ldr	pc, [ip, #4048]!	; 0xfd0

000110e8 <fclose@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #24, 20	; 0x18000
   110f0:	ldr	pc, [ip, #4040]!	; 0xfc8

000110f4 <fseeko64@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #24, 20	; 0x18000
   110fc:	ldr	pc, [ip, #4032]!	; 0xfc0

00011100 <fcntl64@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #24, 20	; 0x18000
   11108:	ldr	pc, [ip, #4024]!	; 0xfb8

0001110c <setlocale@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #24, 20	; 0x18000
   11114:	ldr	pc, [ip, #4016]!	; 0xfb0

00011118 <strrchr@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #24, 20	; 0x18000
   11120:	ldr	pc, [ip, #4008]!	; 0xfa8

00011124 <nl_langinfo@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #24, 20	; 0x18000
   1112c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011130 <readdir64@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #24, 20	; 0x18000
   11138:	ldr	pc, [ip, #3992]!	; 0xf98

0001113c <fdopendir@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #24, 20	; 0x18000
   11144:	ldr	pc, [ip, #3984]!	; 0xf90

00011148 <dirfd@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #24, 20	; 0x18000
   11150:	ldr	pc, [ip, #3976]!	; 0xf88

00011154 <fchdir@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #24, 20	; 0x18000
   1115c:	ldr	pc, [ip, #3968]!	; 0xf80

00011160 <qsort@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #24, 20	; 0x18000
   11168:	ldr	pc, [ip, #3960]!	; 0xf78

0001116c <bindtextdomain@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #24, 20	; 0x18000
   11174:	ldr	pc, [ip, #3952]!	; 0xf70

00011178 <umask@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #24, 20	; 0x18000
   11180:	ldr	pc, [ip, #3944]!	; 0xf68

00011184 <chmod@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #24, 20	; 0x18000
   1118c:	ldr	pc, [ip, #3936]!	; 0xf60

00011190 <__xstat64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #24, 20	; 0x18000
   11198:	ldr	pc, [ip, #3928]!	; 0xf58

0001119c <fputs@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #24, 20	; 0x18000
   111a4:	ldr	pc, [ip, #3920]!	; 0xf50

000111a8 <strncmp@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #24, 20	; 0x18000
   111b0:	ldr	pc, [ip, #3912]!	; 0xf48

000111b4 <abort@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #24, 20	; 0x18000
   111bc:	ldr	pc, [ip, #3904]!	; 0xf40

000111c0 <close@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #24, 20	; 0x18000
   111c8:	ldr	pc, [ip, #3896]!	; 0xf38

000111cc <__lxstat64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #24, 20	; 0x18000
   111d4:	ldr	pc, [ip, #3888]!	; 0xf30

000111d8 <closedir@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #24, 20	; 0x18000
   111e0:	ldr	pc, [ip, #3880]!	; 0xf28

000111e4 <__assert_fail@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #24, 20	; 0x18000
   111ec:	ldr	pc, [ip, #3872]!	; 0xf20

Disassembly of section .text:

000111f0 <.text>:
   111f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f4:	sub	sp, sp, #164	; 0xa4
   111f8:	add	fp, sp, #160	; 0xa0
   111fc:	mov	r5, #0
   11200:	mov	r9, r0
   11204:	ldr	r0, [r1]
   11208:	mov	r8, r1
   1120c:	str	r5, [fp, #-120]!	; 0xffffff88
   11210:	bl	155b0 <__assert_fail@plt+0x43cc>
   11214:	ldr	r1, [pc, #2808]	; 11d14 <__assert_fail@plt+0xb30>
   11218:	mov	r0, #6
   1121c:	bl	1110c <setlocale@plt>
   11220:	ldr	r4, [pc, #2800]	; 11d18 <__assert_fail@plt+0xb34>
   11224:	ldr	r1, [pc, #2800]	; 11d1c <__assert_fail@plt+0xb38>
   11228:	ldr	r0, [pc, #2800]	; 11d20 <__assert_fail@plt+0xb3c>
   1122c:	bl	1116c <bindtextdomain@plt>
   11230:	mov	sl, r5
   11234:	ldr	r0, [pc, #2788]	; 11d20 <__assert_fail@plt+0xb3c>
   11238:	mov	r6, r5
   1123c:	bl	10f98 <textdomain@plt>
   11240:	ldr	r0, [pc, #2780]	; 11d24 <__assert_fail@plt+0xb40>
   11244:	bl	184a0 <__assert_fail@plt+0x72bc>
   11248:	strb	r5, [r4]
   1124c:	strb	r5, [r4, #1]
   11250:	strb	r5, [r4, #2]
   11254:	str	r5, [sp, #20]
   11258:	mov	r7, #0
   1125c:	str	r7, [sp]
   11260:	ldr	r3, [pc, #2752]	; 11d28 <__assert_fail@plt+0xb44>
   11264:	ldr	r2, [pc, #2752]	; 11d2c <__assert_fail@plt+0xb48>
   11268:	mov	r1, r8
   1126c:	mov	r0, r9
   11270:	bl	1104c <getopt_long@plt>
   11274:	cmn	r0, #1
   11278:	bne	112e0 <__assert_fail@plt+0xfc>
   1127c:	cmp	r5, r7
   11280:	ldr	sl, [pc, #2728]	; 11d30 <__assert_fail@plt+0xb4c>
   11284:	beq	114c8 <__assert_fail@plt+0x2e4>
   11288:	cmp	r6, r7
   1128c:	movne	r2, #5
   11290:	ldrne	r1, [pc, #2716]	; 11d34 <__assert_fail@plt+0xb50>
   11294:	bne	112c4 <__assert_fail@plt+0xe0>
   11298:	ldr	r3, [sl]
   1129c:	cmp	r9, r3
   112a0:	bgt	11514 <__assert_fail@plt+0x330>
   112a4:	cmp	r6, #0
   112a8:	mov	r2, #5
   112ac:	beq	112c0 <__assert_fail@plt+0xdc>
   112b0:	sub	r3, r3, #-1073741823	; 0xc0000001
   112b4:	ldr	r3, [r8, r3, lsl #2]
   112b8:	cmp	r6, r3
   112bc:	beq	114e0 <__assert_fail@plt+0x2fc>
   112c0:	ldr	r1, [pc, #2672]	; 11d38 <__assert_fail@plt+0xb54>
   112c4:	mov	r0, #0
   112c8:	bl	10f80 <dcgettext@plt>
   112cc:	mov	r1, #0
   112d0:	mov	r2, r0
   112d4:	mov	r0, r1
   112d8:	bl	11004 <error@plt>
   112dc:	b	11310 <__assert_fail@plt+0x12c>
   112e0:	cmp	r0, #99	; 0x63
   112e4:	beq	11464 <__assert_fail@plt+0x280>
   112e8:	bgt	113e0 <__assert_fail@plt+0x1fc>
   112ec:	cmp	r0, #55	; 0x37
   112f0:	bgt	113b0 <__assert_fail@plt+0x1cc>
   112f4:	cmp	r0, #48	; 0x30
   112f8:	bge	11324 <__assert_fail@plt+0x140>
   112fc:	cmn	r0, #2
   11300:	beq	11480 <__assert_fail@plt+0x29c>
   11304:	bgt	11318 <__assert_fail@plt+0x134>
   11308:	cmn	r0, #3
   1130c:	beq	11488 <__assert_fail@plt+0x2a4>
   11310:	mov	r0, #1
   11314:	b	11484 <__assert_fail@plt+0x2a0>
   11318:	sub	r0, r0, #43	; 0x2b
   1131c:	cmp	r0, #1
   11320:	bhi	11310 <__assert_fail@plt+0x12c>
   11324:	ldr	r3, [pc, #2564]	; 11d30 <__assert_fail@plt+0xb4c>
   11328:	ldr	r3, [r3]
   1132c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11330:	ldr	r3, [r8, r3, lsl #2]
   11334:	mov	r0, r3
   11338:	str	r3, [sp, #24]
   1133c:	bl	11070 <strlen@plt>
   11340:	cmp	sl, #0
   11344:	moveq	r3, sl
   11348:	addne	r3, sl, #1
   1134c:	ldr	r1, [sp, #40]	; 0x28
   11350:	add	r7, r0, r3
   11354:	cmp	r7, r1
   11358:	mov	r2, r0
   1135c:	bcc	11388 <__assert_fail@plt+0x1a4>
   11360:	add	r1, r7, #1
   11364:	str	r0, [sp, #28]
   11368:	str	r1, [sp, #40]	; 0x28
   1136c:	mov	r0, r6
   11370:	mov	r1, fp
   11374:	str	r3, [sp, #32]
   11378:	bl	172dc <__assert_fail@plt+0x60f8>
   1137c:	ldr	r3, [sp, #32]
   11380:	ldr	r2, [sp, #28]
   11384:	mov	r6, r0
   11388:	mov	r1, #44	; 0x2c
   1138c:	strb	r1, [r6, sl]
   11390:	add	r2, r2, #1
   11394:	ldr	r1, [sp, #24]
   11398:	add	r0, r6, r3
   1139c:	bl	10f50 <memcpy@plt>
   113a0:	mov	r2, #1
   113a4:	strb	r2, [r4]
   113a8:	mov	sl, r7
   113ac:	b	11258 <__assert_fail@plt+0x74>
   113b0:	cmp	r0, #82	; 0x52
   113b4:	moveq	r3, #1
   113b8:	strbeq	r3, [r4, #2]
   113bc:	beq	11258 <__assert_fail@plt+0x74>
   113c0:	bgt	113d0 <__assert_fail@plt+0x1ec>
   113c4:	cmp	r0, #61	; 0x3d
   113c8:	bne	11310 <__assert_fail@plt+0x12c>
   113cc:	b	11324 <__assert_fail@plt+0x140>
   113d0:	cmp	r0, #88	; 0x58
   113d4:	beq	11324 <__assert_fail@plt+0x140>
   113d8:	cmp	r0, #97	; 0x61
   113dc:	b	113c8 <__assert_fail@plt+0x1e4>
   113e0:	cmp	r0, #118	; 0x76
   113e4:	beq	11474 <__assert_fail@plt+0x290>
   113e8:	bgt	1141c <__assert_fail@plt+0x238>
   113ec:	cmp	r0, #111	; 0x6f
   113f0:	beq	11324 <__assert_fail@plt+0x140>
   113f4:	bgt	11410 <__assert_fail@plt+0x22c>
   113f8:	cmp	r0, #102	; 0x66
   113fc:	moveq	r3, #1
   11400:	strbeq	r3, [r4, #1]
   11404:	beq	11258 <__assert_fail@plt+0x74>
   11408:	cmp	r0, #103	; 0x67
   1140c:	b	113c8 <__assert_fail@plt+0x1e4>
   11410:	cmp	r0, #114	; 0x72
   11414:	blt	11310 <__assert_fail@plt+0x12c>
   11418:	b	11324 <__assert_fail@plt+0x140>
   1141c:	cmp	r0, #256	; 0x100
   11420:	beq	114c0 <__assert_fail@plt+0x2dc>
   11424:	bgt	11434 <__assert_fail@plt+0x250>
   11428:	cmp	r0, #120	; 0x78
   1142c:	bgt	11310 <__assert_fail@plt+0x12c>
   11430:	b	11324 <__assert_fail@plt+0x140>
   11434:	ldr	r3, [pc, #2304]	; 11d3c <__assert_fail@plt+0xb58>
   11438:	cmp	r0, r3
   1143c:	beq	11458 <__assert_fail@plt+0x274>
   11440:	add	r3, r3, #1
   11444:	cmp	r0, r3
   11448:	bne	11310 <__assert_fail@plt+0x12c>
   1144c:	ldr	r3, [pc, #2284]	; 11d40 <__assert_fail@plt+0xb5c>
   11450:	ldr	r5, [r3]
   11454:	b	11258 <__assert_fail@plt+0x74>
   11458:	mov	r3, #1
   1145c:	str	r3, [sp, #20]
   11460:	b	11258 <__assert_fail@plt+0x74>
   11464:	ldr	r2, [pc, #2264]	; 11d44 <__assert_fail@plt+0xb60>
   11468:	mov	r3, #1
   1146c:	str	r3, [r2]
   11470:	b	11258 <__assert_fail@plt+0x74>
   11474:	ldr	r3, [pc, #2248]	; 11d44 <__assert_fail@plt+0xb60>
   11478:	str	r7, [r3]
   1147c:	b	11258 <__assert_fail@plt+0x74>
   11480:	mov	r0, r7
   11484:	bl	11eec <__assert_fail@plt+0xd08>
   11488:	ldr	r3, [pc, #2232]	; 11d48 <__assert_fail@plt+0xb64>
   1148c:	ldr	r0, [pc, #2232]	; 11d4c <__assert_fail@plt+0xb68>
   11490:	str	r3, [sp, #4]
   11494:	ldr	r3, [pc, #2228]	; 11d50 <__assert_fail@plt+0xb6c>
   11498:	str	r7, [sp, #8]
   1149c:	str	r3, [sp]
   114a0:	ldr	r3, [pc, #2220]	; 11d54 <__assert_fail@plt+0xb70>
   114a4:	ldr	r0, [r0]
   114a8:	ldr	r2, [pc, #2216]	; 11d58 <__assert_fail@plt+0xb74>
   114ac:	ldr	r3, [r3]
   114b0:	ldr	r1, [pc, #2212]	; 11d5c <__assert_fail@plt+0xb78>
   114b4:	bl	170ac <__assert_fail@plt+0x5ec8>
   114b8:	mov	r0, r7
   114bc:	bl	11064 <exit@plt>
   114c0:	str	r7, [sp, #20]
   114c4:	b	11258 <__assert_fail@plt+0x74>
   114c8:	cmp	r6, #0
   114cc:	ldreq	r3, [sl]
   114d0:	addeq	r2, r3, #1
   114d4:	streq	r2, [sl]
   114d8:	ldreq	r6, [r8, r3, lsl #2]
   114dc:	b	11298 <__assert_fail@plt+0xb4>
   114e0:	ldr	r1, [pc, #2168]	; 11d60 <__assert_fail@plt+0xb7c>
   114e4:	mov	r0, #0
   114e8:	bl	10f80 <dcgettext@plt>
   114ec:	sub	r9, r9, #-1073741823	; 0xc0000001
   114f0:	mov	r4, r0
   114f4:	ldr	r0, [r8, r9, lsl #2]
   114f8:	bl	16be0 <__assert_fail@plt+0x59fc>
   114fc:	mov	r1, #0
   11500:	mov	r2, r4
   11504:	mov	r3, r0
   11508:	mov	r0, r1
   1150c:	bl	11004 <error@plt>
   11510:	b	11310 <__assert_fail@plt+0x12c>
   11514:	cmp	r5, #0
   11518:	beq	11570 <__assert_fail@plt+0x38c>
   1151c:	mov	r0, r5
   11520:	bl	153cc <__assert_fail@plt+0x41e8>
   11524:	cmp	r0, #0
   11528:	mov	r6, r0
   1152c:	str	r0, [r4, #4]
   11530:	bne	115a8 <__assert_fail@plt+0x3c4>
   11534:	bl	11094 <__errno_location@plt>
   11538:	mov	r2, #5
   1153c:	ldr	r1, [pc, #2080]	; 11d64 <__assert_fail@plt+0xb80>
   11540:	ldr	r4, [r0]
   11544:	mov	r0, r6
   11548:	bl	10f80 <dcgettext@plt>
   1154c:	mov	r1, r5
   11550:	mov	r6, r0
   11554:	mov	r0, #4
   11558:	bl	169fc <__assert_fail@plt+0x5818>
   1155c:	mov	r2, r6
   11560:	mov	r3, r0
   11564:	mov	r1, r4
   11568:	mov	r0, #1
   1156c:	bl	11004 <error@plt>
   11570:	mov	r0, r6
   11574:	bl	150bc <__assert_fail@plt+0x3ed8>
   11578:	cmp	r0, #0
   1157c:	str	r0, [r4, #4]
   11580:	bne	1159c <__assert_fail@plt+0x3b8>
   11584:	mov	r2, #5
   11588:	ldr	r1, [pc, #2008]	; 11d68 <__assert_fail@plt+0xb84>
   1158c:	bl	10f80 <dcgettext@plt>
   11590:	mov	r4, r0
   11594:	mov	r0, r6
   11598:	b	114f8 <__assert_fail@plt+0x314>
   1159c:	mov	r0, r5
   115a0:	bl	11178 <umask@plt>
   115a4:	str	r0, [r4, #8]
   115a8:	ldrb	r3, [r4, #2]
   115ac:	ldr	r2, [sp, #20]
   115b0:	ands	r3, r2, r3
   115b4:	streq	r3, [r4, #32]
   115b8:	beq	11608 <__assert_fail@plt+0x424>
   115bc:	ldr	r0, [pc, #1960]	; 11d6c <__assert_fail@plt+0xb88>
   115c0:	bl	16bec <__assert_fail@plt+0x5a08>
   115c4:	cmp	r0, #0
   115c8:	mov	r5, r0
   115cc:	str	r0, [r4, #32]
   115d0:	bne	11608 <__assert_fail@plt+0x424>
   115d4:	bl	11094 <__errno_location@plt>
   115d8:	mov	r2, #5
   115dc:	ldr	r1, [pc, #1920]	; 11d64 <__assert_fail@plt+0xb80>
   115e0:	ldr	r4, [r0]
   115e4:	mov	r0, r5
   115e8:	bl	10f80 <dcgettext@plt>
   115ec:	ldr	r1, [pc, #1916]	; 11d70 <__assert_fail@plt+0xb8c>
   115f0:	mov	r5, r0
   115f4:	mov	r0, #4
   115f8:	bl	169fc <__assert_fail@plt+0x5818>
   115fc:	mov	r2, r5
   11600:	mov	r3, r0
   11604:	b	11564 <__assert_fail@plt+0x380>
   11608:	ldr	r0, [sl]
   1160c:	mov	r2, #0
   11610:	ldr	r1, [pc, #1884]	; 11d74 <__assert_fail@plt+0xb90>
   11614:	add	r0, r8, r0, lsl #2
   11618:	bl	17648 <__assert_fail@plt+0x6464>
   1161c:	mov	r3, #1
   11620:	str	r3, [sp, #20]
   11624:	add	r3, sp, #57	; 0x39
   11628:	str	r3, [sp, #32]
   1162c:	mov	fp, r0
   11630:	mov	r0, fp
   11634:	bl	13b40 <__assert_fail@plt+0x295c>
   11638:	subs	r5, r0, #0
   1163c:	bne	116d0 <__assert_fail@plt+0x4ec>
   11640:	bl	11094 <__errno_location@plt>
   11644:	ldr	r7, [r0]
   11648:	mov	r6, r0
   1164c:	cmp	r7, #0
   11650:	beq	11688 <__assert_fail@plt+0x4a4>
   11654:	ldrb	r3, [r4, #1]
   11658:	cmp	r3, #0
   1165c:	str	r3, [sp, #20]
   11660:	strne	r5, [sp, #20]
   11664:	bne	11688 <__assert_fail@plt+0x4a4>
   11668:	mov	r2, #5
   1166c:	ldr	r1, [pc, #1796]	; 11d78 <__assert_fail@plt+0xb94>
   11670:	mov	r0, r3
   11674:	bl	10f80 <dcgettext@plt>
   11678:	mov	r1, r7
   1167c:	mov	r2, r0
   11680:	ldr	r0, [sp, #20]
   11684:	bl	11004 <error@plt>
   11688:	mov	r0, fp
   1168c:	bl	13a28 <__assert_fail@plt+0x2844>
   11690:	cmp	r0, #0
   11694:	beq	116c4 <__assert_fail@plt+0x4e0>
   11698:	mov	r2, #5
   1169c:	ldr	r1, [pc, #1752]	; 11d7c <__assert_fail@plt+0xb98>
   116a0:	mov	r0, #0
   116a4:	ldr	r4, [r6]
   116a8:	bl	10f80 <dcgettext@plt>
   116ac:	mov	r1, r4
   116b0:	mov	r2, r0
   116b4:	mov	r0, #0
   116b8:	bl	11004 <error@plt>
   116bc:	mov	r3, #0
   116c0:	str	r3, [sp, #20]
   116c4:	ldr	r3, [sp, #20]
   116c8:	eor	r0, r3, #1
   116cc:	b	114bc <__assert_fail@plt+0x2d8>
   116d0:	ldrh	r3, [r5, #56]	; 0x38
   116d4:	ldr	r6, [r5, #28]
   116d8:	ldr	r7, [r5, #24]
   116dc:	sub	r3, r3, #2
   116e0:	cmp	r3, #11
   116e4:	ldrls	pc, [pc, r3, lsl #2]
   116e8:	b	1188c <__assert_fail@plt+0x6a8>
   116ec:	andeq	r1, r1, r8, lsr r8
   116f0:	andeq	r1, r1, ip, lsl #17
   116f4:	ldrdeq	r1, [r1], -ip
   116f8:	andeq	r1, r1, ip, lsl #17
   116fc:	andeq	r1, r1, ip, lsl #26
   11700:	muleq	r1, r8, r7
   11704:	andeq	r1, r1, ip, lsl #17
   11708:	andeq	r1, r1, ip, lsl #17
   1170c:	andeq	r1, r1, ip, lsl r7
   11710:	andeq	r1, r1, ip, lsl #17
   11714:	andeq	r1, r1, ip, lsl #17
   11718:	strdeq	r1, [r1], -r8
   1171c:	ldr	r3, [r5, #48]	; 0x30
   11720:	cmp	r3, #0
   11724:	bne	1175c <__assert_fail@plt+0x578>
   11728:	ldr	r3, [r5, #16]
   1172c:	cmp	r3, #0
   11730:	bne	1175c <__assert_fail@plt+0x578>
   11734:	mov	r8, #1
   11738:	str	r8, [r5, #16]
   1173c:	mov	r2, r8
   11740:	mov	r1, r5
   11744:	mov	r0, fp
   11748:	bl	14108 <__assert_fail@plt+0x2f24>
   1174c:	ldr	r3, [sp, #20]
   11750:	and	r3, r3, r8
   11754:	str	r3, [sp, #20]
   11758:	b	11630 <__assert_fail@plt+0x44c>
   1175c:	ldrb	r8, [r4, #1]
   11760:	cmp	r8, #0
   11764:	bne	117cc <__assert_fail@plt+0x5e8>
   11768:	ldr	r9, [r5, #32]
   1176c:	ldr	r1, [pc, #1548]	; 11d80 <__assert_fail@plt+0xb9c>
   11770:	mov	r2, #5
   11774:	mov	r0, r8
   11778:	bl	10f80 <dcgettext@plt>
   1177c:	mov	r1, r6
   11780:	mov	sl, r0
   11784:	mov	r0, #4
   11788:	bl	169fc <__assert_fail@plt+0x5818>
   1178c:	mov	r2, sl
   11790:	mov	r3, r0
   11794:	b	117c0 <__assert_fail@plt+0x5dc>
   11798:	ldrb	r8, [r4, #1]
   1179c:	cmp	r8, #0
   117a0:	bne	117cc <__assert_fail@plt+0x5e8>
   117a4:	mov	r2, r6
   117a8:	mov	r1, #3
   117ac:	mov	r0, r8
   117b0:	ldr	r9, [r5, #32]
   117b4:	bl	16aa0 <__assert_fail@plt+0x58bc>
   117b8:	ldr	r2, [pc, #1476]	; 11d84 <__assert_fail@plt+0xba0>
   117bc:	mov	r3, r0
   117c0:	mov	r1, r9
   117c4:	mov	r0, r8
   117c8:	bl	11004 <error@plt>
   117cc:	mov	r9, #0
   117d0:	mov	sl, r9
   117d4:	mov	r8, r9
   117d8:	b	11a44 <__assert_fail@plt+0x860>
   117dc:	ldrb	r8, [r4, #1]
   117e0:	cmp	r8, #0
   117e4:	bne	117cc <__assert_fail@plt+0x5e8>
   117e8:	ldr	r9, [r5, #32]
   117ec:	mov	r2, #5
   117f0:	ldr	r1, [pc, #1424]	; 11d88 <__assert_fail@plt+0xba4>
   117f4:	b	11774 <__assert_fail@plt+0x590>
   117f8:	ldrb	r8, [r4, #1]
   117fc:	cmp	r8, #0
   11800:	bne	117cc <__assert_fail@plt+0x5e8>
   11804:	mov	r2, #5
   11808:	ldr	r1, [pc, #1404]	; 11d8c <__assert_fail@plt+0xba8>
   1180c:	mov	r0, r8
   11810:	bl	10f80 <dcgettext@plt>
   11814:	mov	r1, r6
   11818:	mov	r9, r0
   1181c:	mov	r0, #4
   11820:	bl	169fc <__assert_fail@plt+0x5818>
   11824:	mov	r2, r9
   11828:	mov	r1, r8
   1182c:	mov	r3, r0
   11830:	mov	r0, r8
   11834:	b	117c8 <__assert_fail@plt+0x5e4>
   11838:	mov	r1, r5
   1183c:	mov	r0, fp
   11840:	bl	17690 <__assert_fail@plt+0x64ac>
   11844:	cmp	r0, #0
   11848:	beq	1188c <__assert_fail@plt+0x6a8>
   1184c:	mov	r2, #5
   11850:	ldr	r1, [pc, #1336]	; 11d90 <__assert_fail@plt+0xbac>
   11854:	mov	r0, #0
   11858:	bl	10f80 <dcgettext@plt>
   1185c:	mov	r2, r6
   11860:	mov	r1, #3
   11864:	mov	r5, r0
   11868:	mov	r0, #0
   1186c:	bl	16aa0 <__assert_fail@plt+0x58bc>
   11870:	mov	r1, #0
   11874:	mov	r2, r5
   11878:	mov	r3, r0
   1187c:	mov	r0, r1
   11880:	bl	11004 <error@plt>
   11884:	mov	r8, #0
   11888:	b	1174c <__assert_fail@plt+0x568>
   1188c:	ldr	ip, [r4, #32]
   11890:	cmp	ip, #0
   11894:	beq	11990 <__assert_fail@plt+0x7ac>
   11898:	ldrd	r0, [r5, #160]	; 0xa0
   1189c:	ldrd	r2, [ip]
   118a0:	cmp	r1, r3
   118a4:	cmpeq	r0, r2
   118a8:	bne	11990 <__assert_fail@plt+0x7ac>
   118ac:	ldrd	r2, [r5, #64]	; 0x40
   118b0:	ldrd	r0, [ip, #8]
   118b4:	cmp	r3, r1
   118b8:	cmpeq	r2, r0
   118bc:	bne	11990 <__assert_fail@plt+0x7ac>
   118c0:	ldr	r1, [pc, #1192]	; 11d70 <__assert_fail@plt+0xb8c>
   118c4:	mov	r0, r6
   118c8:	bl	10f14 <strcmp@plt>
   118cc:	mov	r2, #5
   118d0:	subs	r7, r0, #0
   118d4:	bne	11940 <__assert_fail@plt+0x75c>
   118d8:	ldr	r1, [pc, #1204]	; 11d94 <__assert_fail@plt+0xbb0>
   118dc:	bl	10f80 <dcgettext@plt>
   118e0:	mov	r1, r6
   118e4:	mov	r8, r0
   118e8:	mov	r0, #4
   118ec:	bl	169fc <__assert_fail@plt+0x5818>
   118f0:	mov	r2, r8
   118f4:	mov	r1, r7
   118f8:	mov	r3, r0
   118fc:	mov	r0, r7
   11900:	bl	11004 <error@plt>
   11904:	mov	r2, #5
   11908:	ldr	r1, [pc, #1160]	; 11d98 <__assert_fail@plt+0xbb4>
   1190c:	mov	r0, #0
   11910:	bl	10f80 <dcgettext@plt>
   11914:	mov	r1, #0
   11918:	mov	r2, r0
   1191c:	mov	r0, r1
   11920:	bl	11004 <error@plt>
   11924:	mov	r2, #4
   11928:	mov	r1, r5
   1192c:	mov	r0, fp
   11930:	bl	14108 <__assert_fail@plt+0x2f24>
   11934:	mov	r0, fp
   11938:	bl	13b40 <__assert_fail@plt+0x295c>
   1193c:	b	11884 <__assert_fail@plt+0x6a0>
   11940:	ldr	r1, [pc, #1108]	; 11d9c <__assert_fail@plt+0xbb8>
   11944:	mov	r0, #0
   11948:	bl	10f80 <dcgettext@plt>
   1194c:	mov	r2, r6
   11950:	mov	r1, #4
   11954:	mov	r7, r0
   11958:	mov	r0, #0
   1195c:	bl	16990 <__assert_fail@plt+0x57ac>
   11960:	ldr	r2, [pc, #1032]	; 11d70 <__assert_fail@plt+0xb8c>
   11964:	mov	r1, #4
   11968:	mov	r6, r0
   1196c:	mov	r0, #1
   11970:	bl	16990 <__assert_fail@plt+0x57ac>
   11974:	mov	r1, #0
   11978:	mov	r3, r6
   1197c:	mov	r2, r7
   11980:	str	r0, [sp]
   11984:	mov	r0, r1
   11988:	bl	11004 <error@plt>
   1198c:	b	11904 <__assert_fail@plt+0x720>
   11990:	ldr	sl, [r5, #80]	; 0x50
   11994:	and	r1, sl, #61440	; 0xf000
   11998:	cmp	r1, #40960	; 0xa000
   1199c:	moveq	r9, #0
   119a0:	moveq	sl, r9
   119a4:	moveq	r8, #2
   119a8:	beq	11a44 <__assert_fail@plt+0x860>
   119ac:	mov	r8, #0
   119b0:	str	r8, [sp]
   119b4:	sub	r1, r1, #16384	; 0x4000
   119b8:	ldr	r3, [r4, #4]
   119bc:	ldr	r2, [r4, #8]
   119c0:	clz	r1, r1
   119c4:	mov	r0, sl
   119c8:	lsr	r1, r1, #5
   119cc:	bl	15420 <__assert_fail@plt+0x423c>
   119d0:	mov	r3, r8
   119d4:	mov	r1, r7
   119d8:	mov	r2, r0
   119dc:	mov	r9, r0
   119e0:	ldr	r0, [fp, #32]
   119e4:	bl	122ac <__assert_fail@plt+0x10c8>
   119e8:	cmp	r0, r8
   119ec:	moveq	r8, #4
   119f0:	beq	11a44 <__assert_fail@plt+0x860>
   119f4:	ldrb	r8, [r4, #1]
   119f8:	cmp	r8, #0
   119fc:	bne	11a40 <__assert_fail@plt+0x85c>
   11a00:	bl	11094 <__errno_location@plt>
   11a04:	mov	r2, #5
   11a08:	ldr	r1, [pc, #912]	; 11da0 <__assert_fail@plt+0xbbc>
   11a0c:	ldr	r3, [r0]
   11a10:	mov	r0, r8
   11a14:	str	r3, [sp, #24]
   11a18:	bl	10f80 <dcgettext@plt>
   11a1c:	mov	r1, r6
   11a20:	str	r0, [sp, #28]
   11a24:	mov	r0, #4
   11a28:	bl	169fc <__assert_fail@plt+0x5818>
   11a2c:	ldr	r2, [sp, #28]
   11a30:	ldr	r1, [sp, #24]
   11a34:	mov	r3, r0
   11a38:	mov	r0, r8
   11a3c:	bl	11004 <error@plt>
   11a40:	mov	r8, #1
   11a44:	ldr	r3, [pc, #760]	; 11d44 <__assert_fail@plt+0xb60>
   11a48:	ldr	r3, [r3]
   11a4c:	cmp	r3, #2
   11a50:	beq	11c20 <__assert_fail@plt+0xa3c>
   11a54:	cmp	r8, #4
   11a58:	bne	11ad4 <__assert_fail@plt+0x8f0>
   11a5c:	tst	r9, #3584	; 0xe00
   11a60:	moveq	r3, r9
   11a64:	beq	11aec <__assert_fail@plt+0x908>
   11a68:	mov	r3, #0
   11a6c:	add	r2, sp, #56	; 0x38
   11a70:	mov	r1, r7
   11a74:	ldr	r0, [fp, #32]
   11a78:	bl	184e8 <__assert_fail@plt+0x7304>
   11a7c:	cmp	r0, #0
   11a80:	beq	11ae8 <__assert_fail@plt+0x904>
   11a84:	ldrb	r7, [r4, #1]
   11a88:	cmp	r7, #0
   11a8c:	bne	11ad0 <__assert_fail@plt+0x8ec>
   11a90:	bl	11094 <__errno_location@plt>
   11a94:	mov	r2, #5
   11a98:	ldr	r1, [pc, #772]	; 11da4 <__assert_fail@plt+0xbc0>
   11a9c:	ldr	r3, [r0]
   11aa0:	mov	r0, r7
   11aa4:	str	r3, [sp, #24]
   11aa8:	bl	10f80 <dcgettext@plt>
   11aac:	mov	r1, r6
   11ab0:	str	r0, [sp, #28]
   11ab4:	mov	r0, r8
   11ab8:	bl	169fc <__assert_fail@plt+0x5818>
   11abc:	ldr	r2, [sp, #28]
   11ac0:	ldr	r1, [sp, #24]
   11ac4:	mov	r3, r0
   11ac8:	mov	r0, r7
   11acc:	bl	11004 <error@plt>
   11ad0:	mov	r8, #3
   11ad4:	ldr	r3, [pc, #616]	; 11d44 <__assert_fail@plt+0xb60>
   11ad8:	ldr	r3, [r3]
   11adc:	cmp	r3, #0
   11ae0:	beq	11b00 <__assert_fail@plt+0x91c>
   11ae4:	b	11c20 <__assert_fail@plt+0xa3c>
   11ae8:	ldr	r3, [sp, #72]	; 0x48
   11aec:	eor	r3, r3, sl
   11af0:	lsl	r3, r3, #20
   11af4:	lsr	r3, r3, #20
   11af8:	cmp	r3, #0
   11afc:	beq	11ad0 <__assert_fail@plt+0x8ec>
   11b00:	mov	r1, r6
   11b04:	mov	r0, #4
   11b08:	bl	169fc <__assert_fail@plt+0x5818>
   11b0c:	cmp	r8, #0
   11b10:	mov	r7, r0
   11b14:	beq	11b6c <__assert_fail@plt+0x988>
   11b18:	cmp	r8, #2
   11b1c:	bne	11b78 <__assert_fail@plt+0x994>
   11b20:	ldr	r1, [pc, #640]	; 11da8 <__assert_fail@plt+0xbc4>
   11b24:	mov	r2, #5
   11b28:	mov	r0, #0
   11b2c:	bl	10f80 <dcgettext@plt>
   11b30:	mov	r2, r7
   11b34:	mov	r1, r0
   11b38:	mov	r0, #1
   11b3c:	bl	110c4 <__printf_chk@plt>
   11b40:	ldrb	r3, [r4, #2]
   11b44:	cmp	r3, #0
   11b48:	bne	11b5c <__assert_fail@plt+0x978>
   11b4c:	mov	r2, #4
   11b50:	mov	r1, r5
   11b54:	mov	r0, fp
   11b58:	bl	14108 <__assert_fail@plt+0x2f24>
   11b5c:	cmp	r8, #1
   11b60:	movls	r8, #0
   11b64:	movhi	r8, #1
   11b68:	b	1174c <__assert_fail@plt+0x568>
   11b6c:	mov	r2, #5
   11b70:	ldr	r1, [pc, #564]	; 11dac <__assert_fail@plt+0xbc8>
   11b74:	b	11b28 <__assert_fail@plt+0x944>
   11b78:	ldr	r2, [pc, #560]	; 11db0 <__assert_fail@plt+0xbcc>
   11b7c:	add	r1, sp, #44	; 0x2c
   11b80:	and	r3, r9, r2
   11b84:	mov	r0, r9
   11b88:	str	r2, [sp, #36]	; 0x24
   11b8c:	str	r3, [sp, #24]
   11b90:	bl	123bc <__assert_fail@plt+0x11d8>
   11b94:	mov	r3, #0
   11b98:	add	r1, sp, #56	; 0x38
   11b9c:	mov	r0, sl
   11ba0:	strb	r3, [sp, #54]	; 0x36
   11ba4:	str	r3, [sp, #28]
   11ba8:	bl	123bc <__assert_fail@plt+0x11d8>
   11bac:	ldr	r3, [sp, #28]
   11bb0:	ldr	r2, [sp, #36]	; 0x24
   11bb4:	cmp	r8, #3
   11bb8:	strb	r3, [sp, #66]	; 0x42
   11bbc:	str	r2, [sp, #28]
   11bc0:	beq	11c2c <__assert_fail@plt+0xa48>
   11bc4:	cmp	r8, #4
   11bc8:	beq	11be0 <__assert_fail@plt+0x9fc>
   11bcc:	cmp	r8, #1
   11bd0:	bne	11d08 <__assert_fail@plt+0xb24>
   11bd4:	mov	r2, #5
   11bd8:	ldr	r1, [pc, #468]	; 11db4 <__assert_fail@plt+0xbd0>
   11bdc:	b	11be8 <__assert_fail@plt+0xa04>
   11be0:	ldr	r1, [pc, #464]	; 11db8 <__assert_fail@plt+0xbd4>
   11be4:	mov	r2, #5
   11be8:	mov	r0, r3
   11bec:	bl	10f80 <dcgettext@plt>
   11bf0:	add	r3, sp, #45	; 0x2d
   11bf4:	str	r3, [sp, #8]
   11bf8:	ldr	r3, [sp, #24]
   11bfc:	mov	r2, r7
   11c00:	str	r3, [sp, #4]
   11c04:	add	r3, sp, #57	; 0x39
   11c08:	str	r3, [sp]
   11c0c:	ldr	r3, [sp, #28]
   11c10:	and	r3, r3, sl
   11c14:	mov	r1, r0
   11c18:	mov	r0, #1
   11c1c:	bl	110c4 <__printf_chk@plt>
   11c20:	cmp	r8, #2
   11c24:	bls	11b40 <__assert_fail@plt+0x95c>
   11c28:	b	11c58 <__assert_fail@plt+0xa74>
   11c2c:	mov	r2, #5
   11c30:	ldr	r1, [pc, #388]	; 11dbc <__assert_fail@plt+0xbd8>
   11c34:	mov	r0, r3
   11c38:	bl	10f80 <dcgettext@plt>
   11c3c:	add	r3, sp, #45	; 0x2d
   11c40:	str	r3, [sp]
   11c44:	mov	r2, r7
   11c48:	ldr	r3, [sp, #24]
   11c4c:	mov	r1, r0
   11c50:	mov	r0, #1
   11c54:	bl	110c4 <__printf_chk@plt>
   11c58:	ldrb	r3, [r4]
   11c5c:	cmp	r3, #0
   11c60:	beq	11b40 <__assert_fail@plt+0x95c>
   11c64:	and	r1, sl, #61440	; 0xf000
   11c68:	mov	r7, #0
   11c6c:	str	r7, [sp]
   11c70:	mov	r0, sl
   11c74:	ldr	r3, [r4, #4]
   11c78:	mov	r2, r7
   11c7c:	sub	r1, r1, #16384	; 0x4000
   11c80:	clz	r1, r1
   11c84:	lsr	r1, r1, #5
   11c88:	bl	15420 <__assert_fail@plt+0x423c>
   11c8c:	bics	r3, r9, r0
   11c90:	mov	sl, r0
   11c94:	beq	11b40 <__assert_fail@plt+0x95c>
   11c98:	add	r1, sp, #44	; 0x2c
   11c9c:	mov	r0, r9
   11ca0:	bl	123bc <__assert_fail@plt+0x11d8>
   11ca4:	add	r1, sp, #56	; 0x38
   11ca8:	mov	r0, sl
   11cac:	bl	123bc <__assert_fail@plt+0x11d8>
   11cb0:	mov	r2, #5
   11cb4:	ldr	r1, [pc, #260]	; 11dc0 <__assert_fail@plt+0xbdc>
   11cb8:	mov	r0, r7
   11cbc:	strb	r7, [sp, #66]	; 0x42
   11cc0:	strb	r7, [sp, #54]	; 0x36
   11cc4:	bl	10f80 <dcgettext@plt>
   11cc8:	mov	r2, r6
   11ccc:	mov	r1, #3
   11cd0:	mov	r8, r0
   11cd4:	mov	r0, r7
   11cd8:	bl	16aa0 <__assert_fail@plt+0x58bc>
   11cdc:	ldr	r3, [sp, #32]
   11ce0:	mov	r2, r8
   11ce4:	str	r3, [sp, #4]
   11ce8:	add	r3, sp, #45	; 0x2d
   11cec:	str	r3, [sp]
   11cf0:	mov	r1, r7
   11cf4:	mov	r8, #1
   11cf8:	mov	r3, r0
   11cfc:	mov	r0, r7
   11d00:	bl	11004 <error@plt>
   11d04:	b	11b40 <__assert_fail@plt+0x95c>
   11d08:	bl	111b4 <abort@plt>
   11d0c:	mov	r8, #1
   11d10:	b	1174c <__assert_fail@plt+0x568>
   11d14:	andeq	r8, r1, r0, lsr #14
   11d18:	andeq	sl, r2, r8, lsl #3
   11d1c:	andeq	r8, r1, r3, lsl #21
   11d20:	andeq	r8, r1, r0, ror #19
   11d24:	andeq	r2, r1, r8, asr #3
   11d28:	andeq	r8, r1, r4, asr r5
   11d2c:			; <UNDEFINED> instruction: 0x00018ab8
   11d30:	andeq	sl, r2, r0, ror r1
   11d34:	strdeq	r8, [r1], -ip
   11d38:	andeq	r8, r1, r8, lsr #22
   11d3c:	andeq	r0, r0, r1, lsl #2
   11d40:	andeq	sl, r2, r0, lsl #3
   11d44:	andeq	sl, r2, ip, lsl r1
   11d48:	muleq	r1, fp, sl
   11d4c:	andeq	sl, r2, ip, ror r1
   11d50:	andeq	r8, r1, r8, lsr #21
   11d54:	andeq	sl, r2, r0, lsr #2
   11d58:	ldrdeq	r8, [r1], -ip
   11d5c:	andeq	r8, r1, r4, lsl #12
   11d60:	andeq	r8, r1, r8, lsr fp
   11d64:	andeq	r8, r1, r1, asr fp
   11d68:	andeq	r8, r1, r0, ror fp
   11d6c:	muleq	r2, r8, r1
   11d70:	ldrdeq	r9, [r1], -r8
   11d74:	andeq	r0, r0, r1, lsl r4
   11d78:	andeq	r8, r1, r1, lsl #23
   11d7c:	andeq	r8, r1, r0, ror lr
   11d80:	muleq	r1, r1, fp
   11d84:	andeq	r8, r1, lr, ror fp
   11d88:	andeq	r8, r1, r2, lsr #23
   11d8c:			; <UNDEFINED> instruction: 0x00018bbb
   11d90:	andeq	r8, r1, r1, ror #23
   11d94:	muleq	r1, fp, ip
   11d98:	andeq	r8, r1, r2, lsl #26
   11d9c:	andeq	r8, r1, r8, asr #25
   11da0:	andeq	r8, r1, r3, lsr sp
   11da4:	andeq	r8, r1, lr, asr #26
   11da8:	andeq	r8, r1, fp, ror #26
   11dac:	andeq	r8, r1, r3, lsr #27
   11db0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11db4:	andeq	r8, r1, pc, ror #27
   11db8:			; <UNDEFINED> instruction: 0x00018dbd
   11dbc:	andeq	r8, r1, sl, lsr #28
   11dc0:	andeq	r8, r1, sp, asr #28
   11dc4:	mov	fp, #0
   11dc8:	mov	lr, #0
   11dcc:	pop	{r1}		; (ldr r1, [sp], #4)
   11dd0:	mov	r2, sp
   11dd4:	push	{r2}		; (str r2, [sp, #-4]!)
   11dd8:	push	{r0}		; (str r0, [sp, #-4]!)
   11ddc:	ldr	ip, [pc, #16]	; 11df4 <__assert_fail@plt+0xc10>
   11de0:	push	{ip}		; (str ip, [sp, #-4]!)
   11de4:	ldr	r0, [pc, #12]	; 11df8 <__assert_fail@plt+0xc14>
   11de8:	ldr	r3, [pc, #12]	; 11dfc <__assert_fail@plt+0xc18>
   11dec:	bl	11028 <__libc_start_main@plt>
   11df0:	bl	111b4 <abort@plt>
   11df4:	muleq	r1, ip, r4
   11df8:	strdeq	r1, [r1], -r0
   11dfc:	andeq	r8, r1, ip, lsr r4
   11e00:	ldr	r3, [pc, #20]	; 11e1c <__assert_fail@plt+0xc38>
   11e04:	ldr	r2, [pc, #20]	; 11e20 <__assert_fail@plt+0xc3c>
   11e08:	add	r3, pc, r3
   11e0c:	ldr	r2, [r3, r2]
   11e10:	cmp	r2, #0
   11e14:	bxeq	lr
   11e18:	b	11040 <__gmon_start__@plt>
   11e1c:	strdeq	r8, [r1], -r0
   11e20:	andeq	r0, r0, r0, lsl r1
   11e24:	ldr	r3, [pc, #28]	; 11e48 <__assert_fail@plt+0xc64>
   11e28:	ldr	r0, [pc, #28]	; 11e4c <__assert_fail@plt+0xc68>
   11e2c:	sub	r3, r3, r0
   11e30:	cmp	r3, #6
   11e34:	bxls	lr
   11e38:	ldr	r3, [pc, #16]	; 11e50 <__assert_fail@plt+0xc6c>
   11e3c:	cmp	r3, #0
   11e40:	bxeq	lr
   11e44:	bx	r3
   11e48:	andeq	sl, r2, fp, ror #2
   11e4c:	andeq	sl, r2, r8, ror #2
   11e50:	andeq	r0, r0, r0
   11e54:	ldr	r1, [pc, #36]	; 11e80 <__assert_fail@plt+0xc9c>
   11e58:	ldr	r0, [pc, #36]	; 11e84 <__assert_fail@plt+0xca0>
   11e5c:	sub	r1, r1, r0
   11e60:	asr	r1, r1, #2
   11e64:	add	r1, r1, r1, lsr #31
   11e68:	asrs	r1, r1, #1
   11e6c:	bxeq	lr
   11e70:	ldr	r3, [pc, #16]	; 11e88 <__assert_fail@plt+0xca4>
   11e74:	cmp	r3, #0
   11e78:	bxeq	lr
   11e7c:	bx	r3
   11e80:	andeq	sl, r2, r8, ror #2
   11e84:	andeq	sl, r2, r8, ror #2
   11e88:	andeq	r0, r0, r0
   11e8c:	push	{r4, lr}
   11e90:	ldr	r4, [pc, #24]	; 11eb0 <__assert_fail@plt+0xccc>
   11e94:	ldrb	r3, [r4]
   11e98:	cmp	r3, #0
   11e9c:	popne	{r4, pc}
   11ea0:	bl	11e24 <__assert_fail@plt+0xc40>
   11ea4:	mov	r3, #1
   11ea8:	strb	r3, [r4]
   11eac:	pop	{r4, pc}
   11eb0:	andeq	sl, r2, r4, lsl #3
   11eb4:	ldr	r0, [pc, #40]	; 11ee4 <__assert_fail@plt+0xd00>
   11eb8:	ldr	r3, [r0]
   11ebc:	cmp	r3, #0
   11ec0:	bne	11ec8 <__assert_fail@plt+0xce4>
   11ec4:	b	11e54 <__assert_fail@plt+0xc70>
   11ec8:	ldr	r3, [pc, #24]	; 11ee8 <__assert_fail@plt+0xd04>
   11ecc:	cmp	r3, #0
   11ed0:	beq	11ec4 <__assert_fail@plt+0xce0>
   11ed4:	push	{r4, lr}
   11ed8:	blx	r3
   11edc:	pop	{r4, lr}
   11ee0:	b	11e54 <__assert_fail@plt+0xc70>
   11ee4:	andeq	r9, r2, r4, lsl pc
   11ee8:	andeq	r0, r0, r0
   11eec:	subs	r5, r0, #0
   11ef0:	push	{r7, lr}
   11ef4:	sub	sp, sp, #64	; 0x40
   11ef8:	ldr	r4, [pc, #584]	; 12148 <__assert_fail@plt+0xf64>
   11efc:	beq	11f34 <__assert_fail@plt+0xd50>
   11f00:	ldr	r3, [pc, #580]	; 1214c <__assert_fail@plt+0xf68>
   11f04:	mov	r2, #5
   11f08:	ldr	r1, [pc, #576]	; 12150 <__assert_fail@plt+0xf6c>
   11f0c:	mov	r0, #0
   11f10:	ldr	r6, [r3]
   11f14:	bl	10f80 <dcgettext@plt>
   11f18:	ldr	r3, [r4]
   11f1c:	mov	r1, #1
   11f20:	mov	r2, r0
   11f24:	mov	r0, r6
   11f28:	bl	110dc <__fprintf_chk@plt>
   11f2c:	mov	r0, r5
   11f30:	bl	11064 <exit@plt>
   11f34:	mov	r2, #5
   11f38:	ldr	r1, [pc, #532]	; 12154 <__assert_fail@plt+0xf70>
   11f3c:	bl	10f80 <dcgettext@plt>
   11f40:	ldr	r3, [r4]
   11f44:	ldr	r4, [pc, #524]	; 12158 <__assert_fail@plt+0xf74>
   11f48:	mov	r2, r3
   11f4c:	str	r3, [sp]
   11f50:	ldr	r9, [pc, #516]	; 1215c <__assert_fail@plt+0xf78>
   11f54:	mov	r6, r5
   11f58:	add	r7, sp, #8
   11f5c:	mov	r1, r0
   11f60:	mov	r0, #1
   11f64:	bl	110c4 <__printf_chk@plt>
   11f68:	mov	r2, #5
   11f6c:	ldr	r1, [pc, #492]	; 12160 <__assert_fail@plt+0xf7c>
   11f70:	mov	r0, r5
   11f74:	bl	10f80 <dcgettext@plt>
   11f78:	ldr	r1, [r4]
   11f7c:	bl	10efc <fputs_unlocked@plt>
   11f80:	mov	r2, #5
   11f84:	ldr	r1, [pc, #472]	; 12164 <__assert_fail@plt+0xf80>
   11f88:	mov	r0, r5
   11f8c:	bl	10f80 <dcgettext@plt>
   11f90:	ldr	r1, [r4]
   11f94:	bl	10efc <fputs_unlocked@plt>
   11f98:	mov	r2, #5
   11f9c:	ldr	r1, [pc, #452]	; 12168 <__assert_fail@plt+0xf84>
   11fa0:	mov	r0, r5
   11fa4:	bl	10f80 <dcgettext@plt>
   11fa8:	ldr	r1, [r4]
   11fac:	bl	10efc <fputs_unlocked@plt>
   11fb0:	mov	r2, #5
   11fb4:	ldr	r1, [pc, #432]	; 1216c <__assert_fail@plt+0xf88>
   11fb8:	mov	r0, r5
   11fbc:	bl	10f80 <dcgettext@plt>
   11fc0:	ldr	r1, [r4]
   11fc4:	bl	10efc <fputs_unlocked@plt>
   11fc8:	mov	r2, #5
   11fcc:	ldr	r1, [pc, #412]	; 12170 <__assert_fail@plt+0xf8c>
   11fd0:	mov	r0, r5
   11fd4:	bl	10f80 <dcgettext@plt>
   11fd8:	ldr	r1, [r4]
   11fdc:	bl	10efc <fputs_unlocked@plt>
   11fe0:	mov	r2, #5
   11fe4:	ldr	r1, [pc, #392]	; 12174 <__assert_fail@plt+0xf90>
   11fe8:	mov	r0, r5
   11fec:	bl	10f80 <dcgettext@plt>
   11ff0:	ldr	r1, [r4]
   11ff4:	bl	10efc <fputs_unlocked@plt>
   11ff8:	mov	r2, #5
   11ffc:	ldr	r1, [pc, #372]	; 12178 <__assert_fail@plt+0xf94>
   12000:	mov	r0, r5
   12004:	bl	10f80 <dcgettext@plt>
   12008:	ldr	r1, [r4]
   1200c:	bl	10efc <fputs_unlocked@plt>
   12010:	mov	r2, #5
   12014:	ldr	r1, [pc, #352]	; 1217c <__assert_fail@plt+0xf98>
   12018:	mov	r0, r5
   1201c:	bl	10f80 <dcgettext@plt>
   12020:	ldr	r1, [r4]
   12024:	bl	10efc <fputs_unlocked@plt>
   12028:	ldr	lr, [pc, #336]	; 12180 <__assert_fail@plt+0xf9c>
   1202c:	add	ip, sp, #8
   12030:	ldm	lr!, {r0, r1, r2, r3}
   12034:	stmia	ip!, {r0, r1, r2, r3}
   12038:	ldm	lr!, {r0, r1, r2, r3}
   1203c:	stmia	ip!, {r0, r1, r2, r3}
   12040:	ldm	lr!, {r0, r1, r2, r3}
   12044:	stmia	ip!, {r0, r1, r2, r3}
   12048:	ldm	lr, {r0, r1}
   1204c:	stm	ip, {r0, r1}
   12050:	ldr	r1, [r7, r6]
   12054:	add	r8, r7, r6
   12058:	cmp	r1, #0
   1205c:	bne	12100 <__assert_fail@plt+0xf1c>
   12060:	ldr	r6, [r8, #4]
   12064:	ldr	r7, [pc, #240]	; 1215c <__assert_fail@plt+0xf78>
   12068:	cmp	r6, #0
   1206c:	mov	r2, #5
   12070:	ldr	r1, [pc, #268]	; 12184 <__assert_fail@plt+0xfa0>
   12074:	mov	r0, #0
   12078:	moveq	r6, r7
   1207c:	bl	10f80 <dcgettext@plt>
   12080:	ldr	r3, [pc, #256]	; 12188 <__assert_fail@plt+0xfa4>
   12084:	ldr	r2, [pc, #256]	; 1218c <__assert_fail@plt+0xfa8>
   12088:	mov	r1, r0
   1208c:	mov	r0, #1
   12090:	bl	110c4 <__printf_chk@plt>
   12094:	mov	r1, #0
   12098:	mov	r0, #5
   1209c:	bl	1110c <setlocale@plt>
   120a0:	cmp	r0, #0
   120a4:	bne	12118 <__assert_fail@plt+0xf34>
   120a8:	mov	r2, #5
   120ac:	ldr	r1, [pc, #220]	; 12190 <__assert_fail@plt+0xfac>
   120b0:	mov	r0, #0
   120b4:	bl	10f80 <dcgettext@plt>
   120b8:	ldr	r3, [pc, #156]	; 1215c <__assert_fail@plt+0xf78>
   120bc:	ldr	r2, [pc, #196]	; 12188 <__assert_fail@plt+0xfa4>
   120c0:	mov	r1, r0
   120c4:	mov	r0, #1
   120c8:	bl	110c4 <__printf_chk@plt>
   120cc:	mov	r2, #5
   120d0:	ldr	r1, [pc, #188]	; 12194 <__assert_fail@plt+0xfb0>
   120d4:	mov	r0, #0
   120d8:	bl	10f80 <dcgettext@plt>
   120dc:	ldr	r2, [pc, #180]	; 12198 <__assert_fail@plt+0xfb4>
   120e0:	cmp	r6, r7
   120e4:	ldr	r3, [pc, #176]	; 1219c <__assert_fail@plt+0xfb8>
   120e8:	moveq	r3, r2
   120ec:	mov	r2, r6
   120f0:	mov	r1, r0
   120f4:	mov	r0, #1
   120f8:	bl	110c4 <__printf_chk@plt>
   120fc:	b	11f2c <__assert_fail@plt+0xd48>
   12100:	mov	r0, r9
   12104:	bl	10f14 <strcmp@plt>
   12108:	add	r6, r6, #8
   1210c:	cmp	r0, #0
   12110:	bne	12050 <__assert_fail@plt+0xe6c>
   12114:	b	12060 <__assert_fail@plt+0xe7c>
   12118:	mov	r2, #3
   1211c:	ldr	r1, [pc, #124]	; 121a0 <__assert_fail@plt+0xfbc>
   12120:	bl	111a8 <strncmp@plt>
   12124:	cmp	r0, #0
   12128:	beq	120a8 <__assert_fail@plt+0xec4>
   1212c:	mov	r2, #5
   12130:	ldr	r1, [pc, #108]	; 121a4 <__assert_fail@plt+0xfc0>
   12134:	mov	r0, #0
   12138:	bl	10f80 <dcgettext@plt>
   1213c:	ldr	r1, [r4]
   12140:	bl	10efc <fputs_unlocked@plt>
   12144:	b	120a8 <__assert_fail@plt+0xec4>
   12148:			; <UNDEFINED> instruction: 0x0002a1b4
   1214c:	andeq	sl, r2, r8, ror r1
   12150:	andeq	r8, r1, sl, lsl #12
   12154:	andeq	r8, r1, r1, lsr r6
   12158:	andeq	sl, r2, ip, ror r1
   1215c:	andeq	r8, r1, r4, lsl #12
   12160:			; <UNDEFINED> instruction: 0x000186b8
   12164:	andeq	r8, r1, r1, lsr #14
   12168:	andeq	r8, r1, sl, ror #15
   1216c:	andeq	r8, r1, sl, ror #16
   12170:	andeq	r8, r1, ip, lsr #17
   12174:	andeq	r8, r1, pc, ror #17
   12178:	andeq	r8, r1, ip, lsl r9
   1217c:	andeq	r8, r1, r2, asr r9
   12180:	andeq	r8, r1, ip, lsl r5
   12184:	muleq	r1, sp, r9
   12188:			; <UNDEFINED> instruction: 0x000189b4
   1218c:	ldrdeq	r8, [r1], -ip
   12190:	andeq	r8, r1, r5, lsr sl
   12194:	andeq	r8, r1, r0, asr sl
   12198:	muleq	r1, sp, lr
   1219c:	andeq	r8, r1, r0, lsr #14
   121a0:	andeq	r8, r1, sl, ror #19
   121a4:	andeq	r8, r1, lr, ror #19
   121a8:	ldr	r3, [pc, #4]	; 121b4 <__assert_fail@plt+0xfd0>
   121ac:	str	r0, [r3]
   121b0:	bx	lr
   121b4:	andeq	sl, r2, ip, lsr #3
   121b8:	ldr	r3, [pc, #4]	; 121c4 <__assert_fail@plt+0xfe0>
   121bc:	strb	r0, [r3, #4]
   121c0:	bx	lr
   121c4:	andeq	sl, r2, ip, lsr #3
   121c8:	ldr	r3, [pc, #192]	; 12290 <__assert_fail@plt+0x10ac>
   121cc:	push	{r0, r1, r4, r5, r6, lr}
   121d0:	ldr	r0, [r3]
   121d4:	bl	177ac <__assert_fail@plt+0x65c8>
   121d8:	cmp	r0, #0
   121dc:	beq	12274 <__assert_fail@plt+0x1090>
   121e0:	ldr	r3, [pc, #172]	; 12294 <__assert_fail@plt+0x10b0>
   121e4:	mov	r4, r3
   121e8:	ldrb	r2, [r3, #4]
   121ec:	cmp	r2, #0
   121f0:	beq	12204 <__assert_fail@plt+0x1020>
   121f4:	bl	11094 <__errno_location@plt>
   121f8:	ldr	r3, [r0]
   121fc:	cmp	r3, #32
   12200:	beq	12274 <__assert_fail@plt+0x1090>
   12204:	mov	r2, #5
   12208:	ldr	r1, [pc, #136]	; 12298 <__assert_fail@plt+0x10b4>
   1220c:	mov	r0, #0
   12210:	bl	10f80 <dcgettext@plt>
   12214:	ldr	r4, [r4]
   12218:	cmp	r4, #0
   1221c:	mov	r5, r0
   12220:	beq	12258 <__assert_fail@plt+0x1074>
   12224:	bl	11094 <__errno_location@plt>
   12228:	ldr	r6, [r0]
   1222c:	mov	r0, r4
   12230:	bl	16a90 <__assert_fail@plt+0x58ac>
   12234:	str	r5, [sp]
   12238:	ldr	r2, [pc, #92]	; 1229c <__assert_fail@plt+0x10b8>
   1223c:	mov	r1, r6
   12240:	mov	r3, r0
   12244:	mov	r0, #0
   12248:	bl	11004 <error@plt>
   1224c:	ldr	r3, [pc, #76]	; 122a0 <__assert_fail@plt+0x10bc>
   12250:	ldr	r0, [r3]
   12254:	bl	10f44 <_exit@plt>
   12258:	bl	11094 <__errno_location@plt>
   1225c:	mov	r3, r5
   12260:	ldr	r2, [pc, #60]	; 122a4 <__assert_fail@plt+0x10c0>
   12264:	ldr	r1, [r0]
   12268:	mov	r0, r4
   1226c:	bl	11004 <error@plt>
   12270:	b	1224c <__assert_fail@plt+0x1068>
   12274:	ldr	r3, [pc, #44]	; 122a8 <__assert_fail@plt+0x10c4>
   12278:	ldr	r0, [r3]
   1227c:	bl	177ac <__assert_fail@plt+0x65c8>
   12280:	cmp	r0, #0
   12284:	bne	1224c <__assert_fail@plt+0x1068>
   12288:	add	sp, sp, #8
   1228c:	pop	{r4, r5, r6, pc}
   12290:	andeq	sl, r2, ip, ror r1
   12294:	andeq	sl, r2, ip, lsr #3
   12298:	andeq	r8, r1, lr, lsr pc
   1229c:	andeq	r8, r1, sl, asr #30
   122a0:	andeq	sl, r2, r4, lsr #2
   122a4:	andeq	r8, r1, lr, ror fp
   122a8:	andeq	sl, r2, r8, ror r1
   122ac:	cmp	r3, #256	; 0x100
   122b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122b4:	mov	r8, r0
   122b8:	sub	sp, sp, #148	; 0x94
   122bc:	mov	r9, r1
   122c0:	mov	r7, r2
   122c4:	movne	r6, r3
   122c8:	bne	12398 <__assert_fail@plt+0x11b4>
   122cc:	mov	r2, #2654208	; 0x288000
   122d0:	bl	1107c <openat64@plt>
   122d4:	subs	r5, r0, #0
   122d8:	movlt	r4, r5
   122dc:	blt	12314 <__assert_fail@plt+0x1130>
   122e0:	mov	r3, #4096	; 0x1000
   122e4:	add	r2, sp, #40	; 0x28
   122e8:	ldr	r1, [pc, #196]	; 123b4 <__assert_fail@plt+0x11d0>
   122ec:	bl	184e8 <__assert_fail@plt+0x7304>
   122f0:	subs	r6, r0, #0
   122f4:	beq	12320 <__assert_fail@plt+0x113c>
   122f8:	bl	11094 <__errno_location@plt>
   122fc:	ldr	r6, [r0]
   12300:	mov	r4, r0
   12304:	mov	r0, r5
   12308:	bl	111c0 <close@plt>
   1230c:	str	r6, [r4]
   12310:	mvn	r4, #0
   12314:	mov	r0, r4
   12318:	add	sp, sp, #148	; 0x94
   1231c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12320:	ldr	r3, [sp, #56]	; 0x38
   12324:	and	r3, r3, #61440	; 0xf000
   12328:	cmp	r3, #40960	; 0xa000
   1232c:	bne	12348 <__assert_fail@plt+0x1164>
   12330:	mov	r0, r5
   12334:	bl	111c0 <close@plt>
   12338:	bl	11094 <__errno_location@plt>
   1233c:	mov	r3, #95	; 0x5f
   12340:	str	r3, [r0]
   12344:	b	12310 <__assert_fail@plt+0x112c>
   12348:	ldr	r3, [pc, #104]	; 123b8 <__assert_fail@plt+0x11d4>
   1234c:	mov	r2, #26
   12350:	mov	r1, #1
   12354:	str	r5, [sp]
   12358:	add	r0, sp, #12
   1235c:	bl	110a0 <__sprintf_chk@plt>
   12360:	mov	r1, r7
   12364:	add	r0, sp, #12
   12368:	bl	11184 <chmod@plt>
   1236c:	mov	r4, r0
   12370:	bl	11094 <__errno_location@plt>
   12374:	ldr	fp, [r0]
   12378:	mov	sl, r0
   1237c:	mov	r0, r5
   12380:	bl	111c0 <close@plt>
   12384:	cmp	r4, #0
   12388:	beq	12314 <__assert_fail@plt+0x1130>
   1238c:	cmp	fp, #2
   12390:	strne	fp, [sl]
   12394:	bne	12314 <__assert_fail@plt+0x1130>
   12398:	mov	r3, r6
   1239c:	mov	r2, r7
   123a0:	mov	r1, r9
   123a4:	mov	r0, r8
   123a8:	bl	11088 <fchmodat@plt>
   123ac:	mov	r4, r0
   123b0:	b	12314 <__assert_fail@plt+0x1130>
   123b4:	andeq	r8, r1, r0, lsr #14
   123b8:	andeq	r8, r1, r1, asr pc
   123bc:	and	r3, r0, #61440	; 0xf000
   123c0:	cmp	r3, #32768	; 0x8000
   123c4:	moveq	r3, #45	; 0x2d
   123c8:	beq	12414 <__assert_fail@plt+0x1230>
   123cc:	cmp	r3, #16384	; 0x4000
   123d0:	moveq	r3, #100	; 0x64
   123d4:	beq	12414 <__assert_fail@plt+0x1230>
   123d8:	cmp	r3, #24576	; 0x6000
   123dc:	moveq	r3, #98	; 0x62
   123e0:	beq	12414 <__assert_fail@plt+0x1230>
   123e4:	cmp	r3, #8192	; 0x2000
   123e8:	moveq	r3, #99	; 0x63
   123ec:	beq	12414 <__assert_fail@plt+0x1230>
   123f0:	cmp	r3, #40960	; 0xa000
   123f4:	moveq	r3, #108	; 0x6c
   123f8:	beq	12414 <__assert_fail@plt+0x1230>
   123fc:	cmp	r3, #4096	; 0x1000
   12400:	moveq	r3, #112	; 0x70
   12404:	beq	12414 <__assert_fail@plt+0x1230>
   12408:	cmp	r3, #49152	; 0xc000
   1240c:	moveq	r3, #115	; 0x73
   12410:	movne	r3, #63	; 0x3f
   12414:	tst	r0, #256	; 0x100
   12418:	strb	r3, [r1]
   1241c:	movne	r3, #114	; 0x72
   12420:	moveq	r3, #45	; 0x2d
   12424:	tst	r0, #128	; 0x80
   12428:	strb	r3, [r1, #1]
   1242c:	movne	r3, #119	; 0x77
   12430:	moveq	r3, #45	; 0x2d
   12434:	tst	r0, #2048	; 0x800
   12438:	strb	r3, [r1, #2]
   1243c:	and	r3, r0, #64	; 0x40
   12440:	beq	124e0 <__assert_fail@plt+0x12fc>
   12444:	cmp	r3, #0
   12448:	movne	r3, #115	; 0x73
   1244c:	moveq	r3, #83	; 0x53
   12450:	tst	r0, #32
   12454:	strb	r3, [r1, #3]
   12458:	movne	r3, #114	; 0x72
   1245c:	moveq	r3, #45	; 0x2d
   12460:	tst	r0, #16
   12464:	strb	r3, [r1, #4]
   12468:	movne	r3, #119	; 0x77
   1246c:	moveq	r3, #45	; 0x2d
   12470:	tst	r0, #1024	; 0x400
   12474:	strb	r3, [r1, #5]
   12478:	and	r3, r0, #8
   1247c:	beq	124f0 <__assert_fail@plt+0x130c>
   12480:	cmp	r3, #0
   12484:	movne	r3, #115	; 0x73
   12488:	moveq	r3, #83	; 0x53
   1248c:	tst	r0, #4
   12490:	strb	r3, [r1, #6]
   12494:	movne	r3, #114	; 0x72
   12498:	moveq	r3, #45	; 0x2d
   1249c:	tst	r0, #2
   124a0:	strb	r3, [r1, #7]
   124a4:	movne	r3, #119	; 0x77
   124a8:	moveq	r3, #45	; 0x2d
   124ac:	tst	r0, #512	; 0x200
   124b0:	strb	r3, [r1, #8]
   124b4:	and	r0, r0, #1
   124b8:	beq	12500 <__assert_fail@plt+0x131c>
   124bc:	cmp	r0, #0
   124c0:	movne	r0, #116	; 0x74
   124c4:	moveq	r0, #84	; 0x54
   124c8:	mov	r3, #32
   124cc:	strb	r3, [r1, #10]
   124d0:	mov	r3, #0
   124d4:	strb	r0, [r1, #9]
   124d8:	strb	r3, [r1, #11]
   124dc:	bx	lr
   124e0:	cmp	r3, #0
   124e4:	movne	r3, #120	; 0x78
   124e8:	moveq	r3, #45	; 0x2d
   124ec:	b	12450 <__assert_fail@plt+0x126c>
   124f0:	cmp	r3, #0
   124f4:	movne	r3, #120	; 0x78
   124f8:	moveq	r3, #45	; 0x2d
   124fc:	b	1248c <__assert_fail@plt+0x12a8>
   12500:	cmp	r0, #0
   12504:	movne	r0, #120	; 0x78
   12508:	moveq	r0, #45	; 0x2d
   1250c:	b	124c8 <__assert_fail@plt+0x12e4>
   12510:	ldr	r0, [r0, #16]
   12514:	b	123bc <__assert_fail@plt+0x11d8>
   12518:	ldrd	r2, [r1, #8]
   1251c:	push	{r4, r5, lr}
   12520:	ldrd	r4, [r0, #8]
   12524:	cmp	r5, r3
   12528:	cmpeq	r4, r2
   1252c:	bne	1254c <__assert_fail@plt+0x1368>
   12530:	ldrd	r4, [r0]
   12534:	ldrd	r2, [r1]
   12538:	cmp	r5, r3
   1253c:	cmpeq	r4, r2
   12540:	moveq	r0, #1
   12544:	movne	r0, #0
   12548:	pop	{r4, r5, pc}
   1254c:	mov	r0, #0
   12550:	pop	{r4, r5, pc}
   12554:	push	{r4, lr}
   12558:	mov	r2, r1
   1255c:	mov	r3, #0
   12560:	ldrd	r0, [r0, #8]
   12564:	bl	182c8 <__assert_fail@plt+0x70e4>
   12568:	mov	r0, r2
   1256c:	pop	{r4, pc}
   12570:	push	{r4, lr}
   12574:	mov	r2, r1
   12578:	mov	r3, #0
   1257c:	ldrd	r0, [r0]
   12580:	bl	182c8 <__assert_fail@plt+0x70e4>
   12584:	mov	r0, r2
   12588:	pop	{r4, pc}
   1258c:	ldrd	r2, [r1]
   12590:	push	{r4, r5, lr}
   12594:	ldrd	r4, [r0]
   12598:	cmp	r5, r3
   1259c:	cmpeq	r4, r2
   125a0:	moveq	r0, #1
   125a4:	movne	r0, #0
   125a8:	pop	{r4, r5, pc}
   125ac:	ldr	r3, [r0]
   125b0:	push	{r4, r5, lr}
   125b4:	ldrd	r4, [r3, #160]	; 0xa0
   125b8:	ldr	r3, [r1]
   125bc:	ldrd	r2, [r3, #160]	; 0xa0
   125c0:	cmp	r5, r3
   125c4:	cmpeq	r4, r2
   125c8:	movhi	r0, #1
   125cc:	movls	r0, #0
   125d0:	movcc	r3, #1
   125d4:	movcs	r3, #0
   125d8:	sub	r0, r0, r3
   125dc:	pop	{r4, r5, pc}
   125e0:	ldr	r3, [r1, #48]	; 0x30
   125e4:	push	{r4, r5, r6, lr}
   125e8:	cmp	r3, #0
   125ec:	mov	r4, r1
   125f0:	add	r5, r1, #64	; 0x40
   125f4:	ldr	r3, [r0, #48]	; 0x30
   125f8:	bne	12604 <__assert_fail@plt+0x1420>
   125fc:	tst	r3, #1
   12600:	movne	r2, #1
   12604:	lsl	r3, r3, #30
   12608:	orrs	r3, r2, r3, lsr #31
   1260c:	beq	12678 <__assert_fail@plt+0x1494>
   12610:	mov	r1, r5
   12614:	ldr	r0, [r4, #24]
   12618:	bl	184b8 <__assert_fail@plt+0x72d4>
   1261c:	cmp	r0, #0
   12620:	beq	126a0 <__assert_fail@plt+0x14bc>
   12624:	bl	11094 <__errno_location@plt>
   12628:	ldr	r3, [r0]
   1262c:	mov	r6, r0
   12630:	cmp	r3, #2
   12634:	bne	12658 <__assert_fail@plt+0x1474>
   12638:	mov	r1, r5
   1263c:	ldr	r0, [r4, #24]
   12640:	bl	184d8 <__assert_fail@plt+0x72f4>
   12644:	cmp	r0, #0
   12648:	bne	12658 <__assert_fail@plt+0x1474>
   1264c:	str	r0, [r6]
   12650:	mov	r0, #13
   12654:	pop	{r4, r5, r6, pc}
   12658:	ldr	r3, [r6]
   1265c:	str	r3, [r4, #32]
   12660:	mov	r2, #104	; 0x68
   12664:	mov	r1, #0
   12668:	mov	r0, r5
   1266c:	bl	110b8 <memset@plt>
   12670:	mov	r0, #10
   12674:	pop	{r4, r5, r6, pc}
   12678:	mov	r3, #256	; 0x100
   1267c:	mov	r2, r5
   12680:	ldr	r1, [r4, #24]
   12684:	ldr	r0, [r0, #32]
   12688:	bl	184e8 <__assert_fail@plt+0x7304>
   1268c:	cmp	r0, #0
   12690:	beq	126a0 <__assert_fail@plt+0x14bc>
   12694:	bl	11094 <__errno_location@plt>
   12698:	ldr	r3, [r0]
   1269c:	b	1265c <__assert_fail@plt+0x1478>
   126a0:	ldr	r0, [r4, #80]	; 0x50
   126a4:	and	r0, r0, #61440	; 0xf000
   126a8:	cmp	r0, #16384	; 0x4000
   126ac:	bne	126f0 <__assert_fail@plt+0x150c>
   126b0:	ldrb	r3, [r4, #168]	; 0xa8
   126b4:	cmp	r3, #46	; 0x2e
   126b8:	bne	12708 <__assert_fail@plt+0x1524>
   126bc:	ldrb	r3, [r4, #169]	; 0xa9
   126c0:	cmp	r3, #0
   126c4:	beq	126dc <__assert_fail@plt+0x14f8>
   126c8:	ldr	r3, [r4, #168]	; 0xa8
   126cc:	bic	r3, r3, #-16777216	; 0xff000000
   126d0:	bic	r3, r3, #255	; 0xff
   126d4:	cmp	r3, #11776	; 0x2e00
   126d8:	bne	12708 <__assert_fail@plt+0x1524>
   126dc:	ldr	r0, [r4, #48]	; 0x30
   126e0:	cmp	r0, #0
   126e4:	moveq	r0, #1
   126e8:	movne	r0, #5
   126ec:	pop	{r4, r5, r6, pc}
   126f0:	cmp	r0, #40960	; 0xa000
   126f4:	beq	12710 <__assert_fail@plt+0x152c>
   126f8:	cmp	r0, #32768	; 0x8000
   126fc:	moveq	r0, #8
   12700:	movne	r0, #3
   12704:	pop	{r4, r5, r6, pc}
   12708:	mov	r0, #1
   1270c:	pop	{r4, r5, r6, pc}
   12710:	mov	r0, #12
   12714:	pop	{r4, r5, r6, pc}
   12718:	ldr	r3, [r0, #40]	; 0x28
   1271c:	push	{r4, r5, r6, r7, r8, lr}
   12720:	cmp	r3, r2
   12724:	mov	r4, r0
   12728:	mov	r6, r1
   1272c:	mov	r5, r2
   12730:	ldr	r7, [r0, #44]	; 0x2c
   12734:	bcs	1277c <__assert_fail@plt+0x1598>
   12738:	add	r1, r2, #40	; 0x28
   1273c:	cmn	r1, #-1073741823	; 0xc0000001
   12740:	str	r1, [r0, #40]	; 0x28
   12744:	bls	12764 <__assert_fail@plt+0x1580>
   12748:	ldr	r0, [r4, #8]
   1274c:	bl	17bd8 <__assert_fail@plt+0x69f4>
   12750:	mov	r3, #0
   12754:	str	r3, [r4, #8]
   12758:	str	r3, [r4, #40]	; 0x28
   1275c:	mov	r0, r6
   12760:	pop	{r4, r5, r6, r7, r8, pc}
   12764:	lsl	r1, r1, #2
   12768:	ldr	r0, [r0, #8]
   1276c:	bl	17750 <__assert_fail@plt+0x656c>
   12770:	cmp	r0, #0
   12774:	beq	12748 <__assert_fail@plt+0x1564>
   12778:	str	r0, [r4, #8]
   1277c:	ldr	r0, [r4, #8]
   12780:	mov	r2, r0
   12784:	cmp	r6, #0
   12788:	bne	127c4 <__assert_fail@plt+0x15e0>
   1278c:	mov	r3, r7
   12790:	mov	r2, #4
   12794:	mov	r1, r5
   12798:	bl	11160 <qsort@plt>
   1279c:	ldr	r2, [r4, #8]
   127a0:	mov	r3, r5
   127a4:	mov	r1, r2
   127a8:	ldr	r6, [r2]
   127ac:	subs	r3, r3, #1
   127b0:	bne	127d0 <__assert_fail@plt+0x15ec>
   127b4:	sub	r5, r5, #-1073741823	; 0xc0000001
   127b8:	ldr	r2, [r2, r5, lsl #2]
   127bc:	str	r3, [r2, #8]
   127c0:	b	1275c <__assert_fail@plt+0x1578>
   127c4:	str	r6, [r2], #4
   127c8:	ldr	r6, [r6, #8]
   127cc:	b	12784 <__assert_fail@plt+0x15a0>
   127d0:	ldr	r0, [r1]
   127d4:	ldr	ip, [r1, #4]!
   127d8:	str	ip, [r0, #8]
   127dc:	b	127ac <__assert_fail@plt+0x15c8>
   127e0:	push	{r4, r5, r6, r7, r8, lr}
   127e4:	mov	r6, r0
   127e8:	add	r0, r2, #176	; 0xb0
   127ec:	bic	r0, r0, #7
   127f0:	mov	r7, r1
   127f4:	mov	r5, r2
   127f8:	bl	17710 <__assert_fail@plt+0x652c>
   127fc:	subs	r4, r0, #0
   12800:	beq	1284c <__assert_fail@plt+0x1668>
   12804:	mov	r2, r5
   12808:	mov	r1, r7
   1280c:	add	r0, r4, #168	; 0xa8
   12810:	bl	10f50 <memcpy@plt>
   12814:	add	r2, r4, r5
   12818:	mov	r3, #0
   1281c:	strb	r3, [r2, #168]	; 0xa8
   12820:	ldr	r2, [r6, #24]
   12824:	str	r5, [r4, #52]	; 0x34
   12828:	str	r2, [r4, #28]
   1282c:	mov	r2, #3
   12830:	str	r6, [r4, #44]	; 0x2c
   12834:	str	r3, [r4, #32]
   12838:	str	r3, [r4, #12]
   1283c:	strh	r3, [r4, #58]	; 0x3a
   12840:	strh	r2, [r4, #60]	; 0x3c
   12844:	str	r3, [r4, #16]
   12848:	str	r3, [r4, #20]
   1284c:	mov	r0, r4
   12850:	pop	{r4, r5, r6, r7, r8, pc}
   12854:	ldr	ip, [r0, #48]	; 0x30
   12858:	push	{lr}		; (str lr, [sp, #-4]!)
   1285c:	tst	ip, #16
   12860:	ldr	lr, [pc, #40]	; 12890 <__assert_fail@plt+0x16ac>
   12864:	ldr	r2, [pc, #40]	; 12894 <__assert_fail@plt+0x16b0>
   12868:	moveq	r2, lr
   1286c:	tst	ip, #512	; 0x200
   12870:	beq	12880 <__assert_fail@plt+0x169c>
   12874:	ldr	r0, [r0, #32]
   12878:	pop	{lr}		; (ldr lr, [sp], #4)
   1287c:	b	1552c <__assert_fail@plt+0x4348>
   12880:	mov	r0, r1
   12884:	pop	{lr}		; (ldr lr, [sp], #4)
   12888:	mov	r1, r2
   1288c:	b	17b54 <__assert_fail@plt+0x6970>
   12890:	andeq	r4, r8, r0, lsl #18
   12894:	andeq	ip, r8, r0, lsl #18
   12898:	push	{r4, r5, r6, lr}
   1289c:	mov	r4, r0
   128a0:	cmp	r4, #0
   128a4:	bne	128ac <__assert_fail@plt+0x16c8>
   128a8:	pop	{r4, r5, r6, pc}
   128ac:	ldr	r0, [r4, #12]
   128b0:	ldr	r5, [r4, #8]
   128b4:	cmp	r0, #0
   128b8:	beq	128c0 <__assert_fail@plt+0x16dc>
   128bc:	bl	111d8 <closedir@plt>
   128c0:	mov	r0, r4
   128c4:	bl	17bd8 <__assert_fail@plt+0x69f4>
   128c8:	mov	r4, r5
   128cc:	b	128a0 <__assert_fail@plt+0x16bc>
   128d0:	ldr	r2, [r0, #48]	; 0x30
   128d4:	ldr	r3, [pc, #28]	; 128f8 <__assert_fail@plt+0x1714>
   128d8:	ldr	r0, [r0, #56]	; 0x38
   128dc:	and	r3, r3, r2
   128e0:	cmp	r3, #0
   128e4:	beq	128f4 <__assert_fail@plt+0x1710>
   128e8:	cmp	r0, #0
   128ec:	bxeq	lr
   128f0:	b	14b68 <__assert_fail@plt+0x3984>
   128f4:	b	17bd8 <__assert_fail@plt+0x69f4>
   128f8:	andeq	r0, r0, r2, lsl #2
   128fc:	push	{r4, lr}
   12900:	mov	r4, r0
   12904:	mov	r0, r4
   12908:	bl	15028 <__assert_fail@plt+0x3e44>
   1290c:	cmp	r0, #0
   12910:	beq	12918 <__assert_fail@plt+0x1734>
   12914:	pop	{r4, pc}
   12918:	mov	r0, r4
   1291c:	bl	15074 <__assert_fail@plt+0x3e90>
   12920:	cmp	r0, #0
   12924:	blt	12904 <__assert_fail@plt+0x1720>
   12928:	bl	111c0 <close@plt>
   1292c:	b	12904 <__assert_fail@plt+0x1720>
   12930:	push	{r4, r5, r6, r7, lr}
   12934:	sub	sp, sp, #100	; 0x64
   12938:	ldr	r5, [r0, #44]	; 0x2c
   1293c:	ldr	r3, [r5, #48]	; 0x30
   12940:	tst	r3, #512	; 0x200
   12944:	bne	12954 <__assert_fail@plt+0x1770>
   12948:	mov	r0, #0
   1294c:	add	sp, sp, #100	; 0x64
   12950:	pop	{r4, r5, r6, r7, pc}
   12954:	ldr	r4, [r5, #52]	; 0x34
   12958:	mov	r7, r1
   1295c:	cmp	r4, #0
   12960:	mov	r6, r0
   12964:	bne	12994 <__assert_fail@plt+0x17b0>
   12968:	ldr	r3, [pc, #184]	; 12a28 <__assert_fail@plt+0x1844>
   1296c:	mov	r1, r4
   12970:	str	r3, [sp]
   12974:	ldr	r2, [pc, #176]	; 12a2c <__assert_fail@plt+0x1848>
   12978:	ldr	r3, [pc, #176]	; 12a30 <__assert_fail@plt+0x184c>
   1297c:	mov	r0, #13
   12980:	bl	149fc <__assert_fail@plt+0x3818>
   12984:	cmp	r0, #0
   12988:	mov	r4, r0
   1298c:	str	r0, [r5, #52]	; 0x34
   12990:	beq	129b4 <__assert_fail@plt+0x17d0>
   12994:	ldrd	r2, [r6, #64]	; 0x40
   12998:	add	r1, sp, #96	; 0x60
   1299c:	mov	r0, r4
   129a0:	strd	r2, [r1, #-88]!	; 0xffffffa8
   129a4:	bl	147d8 <__assert_fail@plt+0x35f4>
   129a8:	cmp	r0, #0
   129ac:	ldrne	r0, [r0, #8]
   129b0:	bne	1294c <__assert_fail@plt+0x1768>
   129b4:	cmp	r7, #0
   129b8:	blt	12948 <__assert_fail@plt+0x1764>
   129bc:	add	r1, sp, #8
   129c0:	mov	r0, r7
   129c4:	bl	10ee4 <fstatfs64@plt>
   129c8:	cmp	r0, #0
   129cc:	bne	12948 <__assert_fail@plt+0x1764>
   129d0:	cmp	r4, #0
   129d4:	beq	12a20 <__assert_fail@plt+0x183c>
   129d8:	mov	r0, #16
   129dc:	bl	17710 <__assert_fail@plt+0x652c>
   129e0:	subs	r5, r0, #0
   129e4:	beq	12a20 <__assert_fail@plt+0x183c>
   129e8:	ldrd	r2, [r6, #64]	; 0x40
   129ec:	mov	r1, r5
   129f0:	mov	r0, r4
   129f4:	strd	r2, [r5]
   129f8:	ldr	r3, [sp, #8]
   129fc:	str	r3, [r5, #8]
   12a00:	bl	14ed0 <__assert_fail@plt+0x3cec>
   12a04:	cmp	r0, #0
   12a08:	beq	12a18 <__assert_fail@plt+0x1834>
   12a0c:	cmp	r5, r0
   12a10:	beq	12a20 <__assert_fail@plt+0x183c>
   12a14:	bl	111b4 <abort@plt>
   12a18:	mov	r0, r5
   12a1c:	bl	17bd8 <__assert_fail@plt+0x69f4>
   12a20:	ldr	r0, [sp, #8]
   12a24:	b	1294c <__assert_fail@plt+0x1768>
   12a28:	ldrdeq	r7, [r1], -r8
   12a2c:	andeq	r2, r1, r0, ror r5
   12a30:	andeq	r2, r1, ip, lsl #11
   12a34:	push	{r4, r5, r6, lr}
   12a38:	mov	r5, r1
   12a3c:	ldr	r1, [r0, #32]
   12a40:	cmn	r1, #100	; 0x64
   12a44:	sub	r3, r1, r5
   12a48:	clz	r3, r3
   12a4c:	lsr	r3, r3, #5
   12a50:	moveq	r3, #0
   12a54:	cmp	r3, #0
   12a58:	beq	12a60 <__assert_fail@plt+0x187c>
   12a5c:	bl	111b4 <abort@plt>
   12a60:	cmp	r2, #0
   12a64:	mov	r4, r0
   12a68:	beq	12a88 <__assert_fail@plt+0x18a4>
   12a6c:	add	r0, r0, #60	; 0x3c
   12a70:	bl	15030 <__assert_fail@plt+0x3e4c>
   12a74:	cmp	r0, #0
   12a78:	blt	12a80 <__assert_fail@plt+0x189c>
   12a7c:	bl	111c0 <close@plt>
   12a80:	str	r5, [r4, #32]
   12a84:	pop	{r4, r5, r6, pc}
   12a88:	ldr	r3, [r0, #48]	; 0x30
   12a8c:	lsr	r3, r3, #2
   12a90:	eor	r3, r3, #1
   12a94:	cmp	r1, #0
   12a98:	movlt	r3, #0
   12a9c:	andge	r3, r3, #1
   12aa0:	cmp	r3, #0
   12aa4:	beq	12a80 <__assert_fail@plt+0x189c>
   12aa8:	mov	r0, r1
   12aac:	b	12a7c <__assert_fail@plt+0x1898>
   12ab0:	ldr	r3, [r0, #48]	; 0x30
   12ab4:	push	{r4, r5, r6, lr}
   12ab8:	ands	r4, r3, #4
   12abc:	mov	r5, r0
   12ac0:	movne	r4, #0
   12ac4:	bne	12adc <__assert_fail@plt+0x18f8>
   12ac8:	tst	r3, #512	; 0x200
   12acc:	beq	12aec <__assert_fail@plt+0x1908>
   12ad0:	mov	r2, #1
   12ad4:	mvn	r1, #99	; 0x63
   12ad8:	bl	12a34 <__assert_fail@plt+0x1850>
   12adc:	add	r0, r5, #60	; 0x3c
   12ae0:	bl	128fc <__assert_fail@plt+0x1718>
   12ae4:	mov	r0, r4
   12ae8:	pop	{r4, r5, r6, pc}
   12aec:	ldr	r0, [r0, #28]
   12af0:	bl	11154 <fchdir@plt>
   12af4:	adds	r4, r0, #0
   12af8:	movne	r4, #1
   12afc:	b	12adc <__assert_fail@plt+0x18f8>
   12b00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b04:	subs	sl, r3, #0
   12b08:	sub	sp, sp, #104	; 0x68
   12b0c:	mov	r7, r0
   12b10:	mov	r8, r1
   12b14:	mov	r6, r2
   12b18:	moveq	r9, sl
   12b1c:	beq	12b34 <__assert_fail@plt+0x1950>
   12b20:	ldr	r1, [pc, #368]	; 12c98 <__assert_fail@plt+0x1ab4>
   12b24:	mov	r0, sl
   12b28:	bl	10f14 <strcmp@plt>
   12b2c:	clz	r9, r0
   12b30:	lsr	r9, r9, #5
   12b34:	ldr	r3, [r7, #48]	; 0x30
   12b38:	ands	r4, r3, #4
   12b3c:	beq	12b68 <__assert_fail@plt+0x1984>
   12b40:	mvn	r4, r6
   12b44:	lsr	r4, r4, #31
   12b48:	ands	r4, r4, r3, lsr #9
   12b4c:	beq	12b5c <__assert_fail@plt+0x1978>
   12b50:	mov	r0, r6
   12b54:	bl	111c0 <close@plt>
   12b58:	mov	r4, #0
   12b5c:	mov	r0, r4
   12b60:	add	sp, sp, #104	; 0x68
   12b64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b68:	ands	r2, r9, r6, lsr #31
   12b6c:	beq	12c58 <__assert_fail@plt+0x1a74>
   12b70:	tst	r3, #512	; 0x200
   12b74:	bne	12b94 <__assert_fail@plt+0x19b0>
   12b78:	mov	r1, sl
   12b7c:	mov	r0, r7
   12b80:	bl	12854 <__assert_fail@plt+0x1670>
   12b84:	subs	r5, r0, #0
   12b88:	bge	12bc0 <__assert_fail@plt+0x19dc>
   12b8c:	mvn	r4, #0
   12b90:	b	12b5c <__assert_fail@plt+0x1978>
   12b94:	add	r5, r7, #60	; 0x3c
   12b98:	mov	r0, r5
   12b9c:	bl	15028 <__assert_fail@plt+0x3e44>
   12ba0:	cmp	r0, #0
   12ba4:	bne	12b78 <__assert_fail@plt+0x1994>
   12ba8:	mov	r0, r5
   12bac:	bl	15074 <__assert_fail@plt+0x3e90>
   12bb0:	subs	r5, r0, #0
   12bb4:	movge	r6, r5
   12bb8:	movge	sl, r4
   12bbc:	blt	12b78 <__assert_fail@plt+0x1994>
   12bc0:	ldr	r3, [r7, #48]	; 0x30
   12bc4:	tst	r3, #2
   12bc8:	bne	12be8 <__assert_fail@plt+0x1a04>
   12bcc:	cmp	sl, #0
   12bd0:	beq	12c68 <__assert_fail@plt+0x1a84>
   12bd4:	ldr	r1, [pc, #188]	; 12c98 <__assert_fail@plt+0x1ab4>
   12bd8:	mov	r0, sl
   12bdc:	bl	10f14 <strcmp@plt>
   12be0:	cmp	r0, #0
   12be4:	bne	12c68 <__assert_fail@plt+0x1a84>
   12be8:	mov	r1, sp
   12bec:	mov	r0, r5
   12bf0:	bl	184c8 <__assert_fail@plt+0x72e4>
   12bf4:	cmp	r0, #0
   12bf8:	bne	12c30 <__assert_fail@plt+0x1a4c>
   12bfc:	ldrd	r0, [r8, #64]	; 0x40
   12c00:	ldrd	r2, [sp]
   12c04:	cmp	r1, r3
   12c08:	cmpeq	r0, r2
   12c0c:	bne	12c24 <__assert_fail@plt+0x1a40>
   12c10:	ldrd	r0, [r8, #160]	; 0xa0
   12c14:	ldrd	r2, [sp, #96]	; 0x60
   12c18:	cmp	r1, r3
   12c1c:	cmpeq	r0, r2
   12c20:	beq	12c68 <__assert_fail@plt+0x1a84>
   12c24:	bl	11094 <__errno_location@plt>
   12c28:	mov	r3, #2
   12c2c:	str	r3, [r0]
   12c30:	mvn	r4, #0
   12c34:	cmp	r6, #0
   12c38:	bge	12b5c <__assert_fail@plt+0x1978>
   12c3c:	bl	11094 <__errno_location@plt>
   12c40:	ldr	r7, [r0]
   12c44:	mov	r6, r0
   12c48:	mov	r0, r5
   12c4c:	bl	111c0 <close@plt>
   12c50:	str	r7, [r6]
   12c54:	b	12b5c <__assert_fail@plt+0x1978>
   12c58:	cmp	r6, #0
   12c5c:	movge	r5, r6
   12c60:	bge	12bc0 <__assert_fail@plt+0x19dc>
   12c64:	b	12b78 <__assert_fail@plt+0x1994>
   12c68:	ldr	r3, [r7, #48]	; 0x30
   12c6c:	tst	r3, #512	; 0x200
   12c70:	beq	12c88 <__assert_fail@plt+0x1aa4>
   12c74:	eor	r2, r9, #1
   12c78:	mov	r1, r5
   12c7c:	mov	r0, r7
   12c80:	bl	12a34 <__assert_fail@plt+0x1850>
   12c84:	b	12b5c <__assert_fail@plt+0x1978>
   12c88:	mov	r0, r5
   12c8c:	bl	11154 <fchdir@plt>
   12c90:	mov	r4, r0
   12c94:	b	12c34 <__assert_fail@plt+0x1a50>
   12c98:	andeq	r8, r1, sl, ror pc
   12c9c:	ldr	r2, [r0, #48]	; 0x30
   12ca0:	ldr	r3, [pc, #164]	; 12d4c <__assert_fail@plt+0x1b68>
   12ca4:	push	{r4, r5, r6, r7, lr}
   12ca8:	and	r3, r3, r2
   12cac:	cmp	r3, #0
   12cb0:	sub	sp, sp, #28
   12cb4:	beq	12cec <__assert_fail@plt+0x1b08>
   12cb8:	ldrd	r4, [r1, #64]	; 0x40
   12cbc:	ldrd	r2, [r1, #160]	; 0xa0
   12cc0:	ldr	r0, [r0, #56]	; 0x38
   12cc4:	mov	r1, sp
   12cc8:	strd	r4, [sp]
   12ccc:	strd	r2, [sp, #8]
   12cd0:	bl	14f00 <__assert_fail@plt+0x3d1c>
   12cd4:	cmp	r0, #0
   12cd8:	bne	12ce0 <__assert_fail@plt+0x1afc>
   12cdc:	bl	111b4 <abort@plt>
   12ce0:	bl	17bd8 <__assert_fail@plt+0x69f4>
   12ce4:	add	sp, sp, #28
   12ce8:	pop	{r4, r5, r6, r7, pc}
   12cec:	ldr	ip, [r1, #4]
   12cf0:	cmp	ip, #0
   12cf4:	beq	12ce4 <__assert_fail@plt+0x1b00>
   12cf8:	ldr	r3, [ip, #48]	; 0x30
   12cfc:	cmp	r3, #0
   12d00:	blt	12ce4 <__assert_fail@plt+0x1b00>
   12d04:	ldr	r3, [r0, #56]	; 0x38
   12d08:	ldrd	r4, [r3, #16]
   12d0c:	orrs	r2, r4, r5
   12d10:	beq	12cdc <__assert_fail@plt+0x1af8>
   12d14:	ldrd	r4, [r3]
   12d18:	ldrd	r6, [r1, #160]	; 0xa0
   12d1c:	cmp	r5, r7
   12d20:	cmpeq	r4, r6
   12d24:	bne	12ce4 <__assert_fail@plt+0x1b00>
   12d28:	ldrd	r6, [r3, #8]
   12d2c:	ldrd	r4, [r1, #64]	; 0x40
   12d30:	cmp	r7, r5
   12d34:	cmpeq	r6, r4
   12d38:	ldrdeq	r0, [ip, #64]	; 0x40
   12d3c:	strdeq	r0, [r3, #8]
   12d40:	ldrdeq	r0, [ip, #160]	; 0xa0
   12d44:	strdeq	r0, [r3]
   12d48:	b	12ce4 <__assert_fail@plt+0x1b00>
   12d4c:	andeq	r0, r0, r2, lsl #2
   12d50:	ldr	r3, [r0, #36]	; 0x24
   12d54:	add	r1, r1, #256	; 0x100
   12d58:	adds	r1, r1, r3
   12d5c:	push	{r4, r5, r6, lr}
   12d60:	mov	r5, r0
   12d64:	bcc	12d8c <__assert_fail@plt+0x1ba8>
   12d68:	ldr	r0, [r0, #24]
   12d6c:	mov	r4, #0
   12d70:	bl	17bd8 <__assert_fail@plt+0x69f4>
   12d74:	str	r4, [r5, #24]
   12d78:	bl	11094 <__errno_location@plt>
   12d7c:	mov	r3, #36	; 0x24
   12d80:	str	r3, [r0]
   12d84:	mov	r0, r4
   12d88:	pop	{r4, r5, r6, pc}
   12d8c:	str	r1, [r0, #36]	; 0x24
   12d90:	ldr	r0, [r0, #24]
   12d94:	bl	17750 <__assert_fail@plt+0x656c>
   12d98:	subs	r4, r0, #0
   12d9c:	bne	12db0 <__assert_fail@plt+0x1bcc>
   12da0:	ldr	r0, [r5, #24]
   12da4:	bl	17bd8 <__assert_fail@plt+0x69f4>
   12da8:	str	r4, [r5, #24]
   12dac:	b	12d84 <__assert_fail@plt+0x1ba0>
   12db0:	str	r4, [r5, #24]
   12db4:	mov	r0, #1
   12db8:	pop	{r4, r5, r6, pc}
   12dbc:	ldr	r2, [r0, #48]	; 0x30
   12dc0:	ldr	r3, [pc, #96]	; 12e28 <__assert_fail@plt+0x1c44>
   12dc4:	push	{r0, r1, r4, lr}
   12dc8:	and	r3, r3, r2
   12dcc:	cmp	r3, #0
   12dd0:	mov	r4, r0
   12dd4:	beq	12e08 <__assert_fail@plt+0x1c24>
   12dd8:	ldr	r3, [pc, #76]	; 12e2c <__assert_fail@plt+0x1c48>
   12ddc:	ldr	r2, [pc, #76]	; 12e30 <__assert_fail@plt+0x1c4c>
   12de0:	str	r3, [sp]
   12de4:	mov	r1, #0
   12de8:	ldr	r3, [pc, #68]	; 12e34 <__assert_fail@plt+0x1c50>
   12dec:	mov	r0, #31
   12df0:	bl	149fc <__assert_fail@plt+0x3818>
   12df4:	str	r0, [r4, #56]	; 0x38
   12df8:	adds	r0, r0, #0
   12dfc:	movne	r0, #1
   12e00:	add	sp, sp, #8
   12e04:	pop	{r4, pc}
   12e08:	mov	r0, #32
   12e0c:	bl	17710 <__assert_fail@plt+0x652c>
   12e10:	cmp	r0, #0
   12e14:	str	r0, [r4, #56]	; 0x38
   12e18:	beq	12e00 <__assert_fail@plt+0x1c1c>
   12e1c:	bl	1781c <__assert_fail@plt+0x6638>
   12e20:	mov	r0, #1
   12e24:	b	12e00 <__assert_fail@plt+0x1c1c>
   12e28:	andeq	r0, r0, r2, lsl #2
   12e2c:	ldrdeq	r7, [r1], -r8
   12e30:	andeq	r2, r1, r4, asr r5
   12e34:	andeq	r2, r1, r8, lsl r5
   12e38:	ldr	r2, [r0, #48]	; 0x30
   12e3c:	ldr	r3, [pc, #168]	; 12eec <__assert_fail@plt+0x1d08>
   12e40:	push	{r4, r5, r6, lr}
   12e44:	and	r3, r3, r2
   12e48:	cmp	r3, #0
   12e4c:	mov	r6, r0
   12e50:	mov	r4, r1
   12e54:	beq	12ec8 <__assert_fail@plt+0x1ce4>
   12e58:	mov	r0, #24
   12e5c:	bl	17710 <__assert_fail@plt+0x652c>
   12e60:	subs	r5, r0, #0
   12e64:	bne	12e70 <__assert_fail@plt+0x1c8c>
   12e68:	mov	r0, #0
   12e6c:	pop	{r4, r5, r6, pc}
   12e70:	ldrd	r2, [r4, #64]	; 0x40
   12e74:	ldr	r0, [r6, #56]	; 0x38
   12e78:	str	r4, [r5, #16]
   12e7c:	strd	r2, [r5]
   12e80:	ldrd	r2, [r4, #160]	; 0xa0
   12e84:	mov	r1, r5
   12e88:	strd	r2, [r5, #8]
   12e8c:	bl	14ed0 <__assert_fail@plt+0x3cec>
   12e90:	cmp	r5, r0
   12e94:	mov	r6, r0
   12e98:	bne	12ea4 <__assert_fail@plt+0x1cc0>
   12e9c:	mov	r0, #1
   12ea0:	pop	{r4, r5, r6, pc}
   12ea4:	mov	r0, r5
   12ea8:	bl	17bd8 <__assert_fail@plt+0x69f4>
   12eac:	cmp	r6, #0
   12eb0:	beq	12e68 <__assert_fail@plt+0x1c84>
   12eb4:	ldr	r3, [r6, #16]
   12eb8:	str	r3, [r4]
   12ebc:	mov	r3, #2
   12ec0:	strh	r3, [r4, #56]	; 0x38
   12ec4:	b	12e9c <__assert_fail@plt+0x1cb8>
   12ec8:	add	r1, r1, #64	; 0x40
   12ecc:	ldr	r0, [r0, #56]	; 0x38
   12ed0:	bl	17838 <__assert_fail@plt+0x6654>
   12ed4:	cmp	r0, #0
   12ed8:	beq	12e9c <__assert_fail@plt+0x1cb8>
   12edc:	mov	r3, #2
   12ee0:	str	r4, [r4]
   12ee4:	strh	r3, [r4, #56]	; 0x38
   12ee8:	pop	{r4, r5, r6, pc}
   12eec:	andeq	r0, r0, r2, lsl #2
   12ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ef4:	sub	sp, sp, #60	; 0x3c
   12ef8:	ldr	r5, [r0]
   12efc:	mov	r4, r0
   12f00:	str	r1, [sp, #8]
   12f04:	ldr	r3, [r5, #12]
   12f08:	cmp	r3, #0
   12f0c:	str	r3, [sp, #4]
   12f10:	beq	12f64 <__assert_fail@plt+0x1d80>
   12f14:	mov	r0, r3
   12f18:	bl	11148 <dirfd@plt>
   12f1c:	cmp	r0, #0
   12f20:	str	r0, [sp, #52]	; 0x34
   12f24:	bge	12fd8 <__assert_fail@plt+0x1df4>
   12f28:	ldr	r0, [r5, #12]
   12f2c:	mov	r6, #0
   12f30:	bl	111d8 <closedir@plt>
   12f34:	str	r6, [r5, #12]
   12f38:	ldr	r3, [sp, #8]
   12f3c:	cmp	r3, #3
   12f40:	bne	13104 <__assert_fail@plt+0x1f20>
   12f44:	mov	r3, #4
   12f48:	strh	r3, [r5, #56]	; 0x38
   12f4c:	bl	11094 <__errno_location@plt>
   12f50:	ldr	r3, [r0]
   12f54:	str	r3, [r5, #32]
   12f58:	mov	r0, r6
   12f5c:	add	sp, sp, #60	; 0x3c
   12f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f64:	ldr	r3, [r0, #48]	; 0x30
   12f68:	ldr	r1, [r5, #24]
   12f6c:	and	r2, r3, #516	; 0x204
   12f70:	cmp	r2, #512	; 0x200
   12f74:	mvnne	r0, #99	; 0x63
   12f78:	ldreq	r0, [r0, #32]
   12f7c:	ands	r2, r3, #16
   12f80:	beq	12fa0 <__assert_fail@plt+0x1dbc>
   12f84:	tst	r3, #1
   12f88:	moveq	r2, #32768	; 0x8000
   12f8c:	beq	12fa0 <__assert_fail@plt+0x1dbc>
   12f90:	ldr	r2, [r5, #48]	; 0x30
   12f94:	cmp	r2, #0
   12f98:	movne	r2, #32768	; 0x8000
   12f9c:	moveq	r2, #0
   12fa0:	add	r3, sp, #52	; 0x34
   12fa4:	bl	15560 <__assert_fail@plt+0x437c>
   12fa8:	cmp	r0, #0
   12fac:	mov	r6, r0
   12fb0:	str	r0, [r5, #12]
   12fb4:	beq	12f38 <__assert_fail@plt+0x1d54>
   12fb8:	ldrh	r3, [r5, #56]	; 0x38
   12fbc:	cmp	r3, #11
   12fc0:	bne	1310c <__assert_fail@plt+0x1f28>
   12fc4:	mov	r2, #0
   12fc8:	mov	r1, r5
   12fcc:	mov	r0, r4
   12fd0:	bl	125e0 <__assert_fail@plt+0x13fc>
   12fd4:	strh	r0, [r5, #56]	; 0x38
   12fd8:	ldr	r3, [r4, #44]	; 0x2c
   12fdc:	cmp	r3, #0
   12fe0:	ldr	r3, [pc, #1824]	; 13708 <__assert_fail@plt+0x2524>
   12fe4:	mvnne	r3, #0
   12fe8:	str	r3, [sp, #36]	; 0x24
   12fec:	ldr	r3, [sp, #4]
   12ff0:	cmp	r3, #0
   12ff4:	beq	13158 <__assert_fail@plt+0x1f74>
   12ff8:	mov	r3, #1
   12ffc:	str	r3, [sp, #20]
   13000:	ldr	fp, [r5, #40]	; 0x28
   13004:	ldr	r2, [r5, #28]
   13008:	sub	r3, fp, #1
   1300c:	mov	r9, #0
   13010:	ldrb	r2, [r2, r3]
   13014:	mov	r8, r9
   13018:	mov	r6, r9
   1301c:	cmp	r2, #47	; 0x2f
   13020:	moveq	fp, r3
   13024:	ldr	r3, [r4, #48]	; 0x30
   13028:	str	r9, [sp, #24]
   1302c:	ands	r3, r3, #4
   13030:	streq	r3, [sp]
   13034:	ldrne	r3, [r4, #24]
   13038:	str	r9, [sp, #32]
   1303c:	addne	r2, r3, fp
   13040:	addne	r2, r2, #1
   13044:	strne	r2, [sp]
   13048:	movne	r2, #47	; 0x2f
   1304c:	strbne	r2, [r3, fp]
   13050:	add	r3, fp, #1
   13054:	str	r3, [sp, #16]
   13058:	ldr	r3, [r4, #36]	; 0x24
   1305c:	add	r2, fp, #1
   13060:	sub	r3, r3, r2
   13064:	str	r3, [sp, #28]
   13068:	ldr	r3, [r5, #48]	; 0x30
   1306c:	add	r3, r3, #1
   13070:	str	r3, [sp, #40]	; 0x28
   13074:	ldr	r7, [r5, #12]
   13078:	cmp	r7, #0
   1307c:	bne	1329c <__assert_fail@plt+0x20b8>
   13080:	ldr	r3, [sp, #24]
   13084:	cmp	r3, #0
   13088:	bne	135c8 <__assert_fail@plt+0x23e4>
   1308c:	ldr	r3, [r4, #48]	; 0x30
   13090:	tst	r3, #4
   13094:	bne	13644 <__assert_fail@plt+0x2460>
   13098:	ldr	r3, [sp, #20]
   1309c:	ldr	r2, [sp, #4]
   130a0:	cmp	r2, #0
   130a4:	movne	r3, #0
   130a8:	andeq	r3, r3, #1
   130ac:	cmp	r3, #0
   130b0:	beq	13688 <__assert_fail@plt+0x24a4>
   130b4:	ldr	r3, [sp, #8]
   130b8:	cmp	r8, #0
   130bc:	cmpne	r3, #1
   130c0:	bne	136b4 <__assert_fail@plt+0x24d0>
   130c4:	ldr	r3, [r5, #48]	; 0x30
   130c8:	cmp	r3, #0
   130cc:	bne	13670 <__assert_fail@plt+0x248c>
   130d0:	mov	r0, r4
   130d4:	bl	12ab0 <__assert_fail@plt+0x18cc>
   130d8:	adds	r0, r0, #0
   130dc:	movne	r0, #1
   130e0:	cmp	r0, #0
   130e4:	beq	13688 <__assert_fail@plt+0x24a4>
   130e8:	mov	r3, #7
   130ec:	strh	r3, [r5, #56]	; 0x38
   130f0:	ldr	r3, [r4, #48]	; 0x30
   130f4:	orr	r3, r3, #8192	; 0x2000
   130f8:	str	r3, [r4, #48]	; 0x30
   130fc:	mov	r0, r6
   13100:	bl	12898 <__assert_fail@plt+0x16b4>
   13104:	mov	r6, #0
   13108:	b	12f58 <__assert_fail@plt+0x1d74>
   1310c:	ldr	r3, [r4, #48]	; 0x30
   13110:	tst	r3, #256	; 0x100
   13114:	beq	12fd8 <__assert_fail@plt+0x1df4>
   13118:	mov	r1, r5
   1311c:	mov	r0, r4
   13120:	bl	12c9c <__assert_fail@plt+0x1ab8>
   13124:	mov	r2, #0
   13128:	mov	r1, r5
   1312c:	mov	r0, r4
   13130:	bl	125e0 <__assert_fail@plt+0x13fc>
   13134:	mov	r1, r5
   13138:	mov	r0, r4
   1313c:	bl	12e38 <__assert_fail@plt+0x1c54>
   13140:	subs	r6, r0, #0
   13144:	bne	12fd8 <__assert_fail@plt+0x1df4>
   13148:	bl	11094 <__errno_location@plt>
   1314c:	mov	r3, #12
   13150:	str	r3, [r0]
   13154:	b	12f58 <__assert_fail@plt+0x1d74>
   13158:	ldr	r3, [sp, #8]
   1315c:	cmp	r3, #2
   13160:	beq	131b0 <__assert_fail@plt+0x1fcc>
   13164:	ldr	r3, [r4, #48]	; 0x30
   13168:	and	r3, r3, #56	; 0x38
   1316c:	cmp	r3, #24
   13170:	bne	13268 <__assert_fail@plt+0x2084>
   13174:	ldr	r3, [r5, #84]	; 0x54
   13178:	cmp	r3, #2
   1317c:	bne	13268 <__assert_fail@plt+0x2084>
   13180:	ldr	r1, [sp, #52]	; 0x34
   13184:	mov	r0, r5
   13188:	bl	12930 <__assert_fail@plt+0x174c>
   1318c:	ldr	r3, [pc, #1400]	; 1370c <__assert_fail@plt+0x2528>
   13190:	cmp	r0, r3
   13194:	beq	13268 <__assert_fail@plt+0x2084>
   13198:	bgt	13250 <__assert_fail@plt+0x206c>
   1319c:	ldr	r3, [pc, #1388]	; 13710 <__assert_fail@plt+0x252c>
   131a0:	cmp	r0, r3
   131a4:	beq	13268 <__assert_fail@plt+0x2084>
   131a8:	cmp	r0, #0
   131ac:	beq	13268 <__assert_fail@plt+0x2084>
   131b0:	mov	r3, #0
   131b4:	mov	r6, r3
   131b8:	ldr	r3, [sp, #8]
   131bc:	sub	r7, r3, #3
   131c0:	clz	r7, r7
   131c4:	lsr	r7, r7, #5
   131c8:	orrs	r3, r6, r7
   131cc:	str	r3, [sp, #20]
   131d0:	beq	13000 <__assert_fail@plt+0x1e1c>
   131d4:	ldr	r3, [r4, #48]	; 0x30
   131d8:	tst	r3, #512	; 0x200
   131dc:	beq	131f4 <__assert_fail@plt+0x2010>
   131e0:	mov	r2, #3
   131e4:	ldr	r1, [pc, #1320]	; 13714 <__assert_fail@plt+0x2530>
   131e8:	ldr	r0, [sp, #52]	; 0x34
   131ec:	bl	17990 <__assert_fail@plt+0x67ac>
   131f0:	str	r0, [sp, #52]	; 0x34
   131f4:	ldr	r2, [sp, #52]	; 0x34
   131f8:	cmp	r2, #0
   131fc:	bge	13270 <__assert_fail@plt+0x208c>
   13200:	tst	r6, r7
   13204:	bne	1328c <__assert_fail@plt+0x20a8>
   13208:	ldrh	r3, [r5, #58]	; 0x3a
   1320c:	ldr	r0, [r5, #12]
   13210:	orr	r3, r3, #1
   13214:	strh	r3, [r5, #58]	; 0x3a
   13218:	bl	111d8 <closedir@plt>
   1321c:	ldr	r2, [r4, #48]	; 0x30
   13220:	mov	r3, #0
   13224:	tst	r2, #512	; 0x200
   13228:	str	r3, [r5, #12]
   1322c:	mov	r6, r3
   13230:	beq	13244 <__assert_fail@plt+0x2060>
   13234:	ldr	r0, [sp, #52]	; 0x34
   13238:	cmp	r0, r3
   1323c:	blt	13244 <__assert_fail@plt+0x2060>
   13240:	bl	111c0 <close@plt>
   13244:	str	r6, [r5, #12]
   13248:	mov	r3, #0
   1324c:	b	12ffc <__assert_fail@plt+0x1e18>
   13250:	ldr	r3, [pc, #1216]	; 13718 <__assert_fail@plt+0x2534>
   13254:	cmp	r0, r3
   13258:	beq	13268 <__assert_fail@plt+0x2084>
   1325c:	ldr	r3, [pc, #1208]	; 1371c <__assert_fail@plt+0x2538>
   13260:	cmp	r0, r3
   13264:	b	131ac <__assert_fail@plt+0x1fc8>
   13268:	mov	r3, #1
   1326c:	b	131b4 <__assert_fail@plt+0x1fd0>
   13270:	mov	r3, #0
   13274:	mov	r1, r5
   13278:	mov	r0, r4
   1327c:	bl	12b00 <__assert_fail@plt+0x191c>
   13280:	cmp	r0, #0
   13284:	bne	13200 <__assert_fail@plt+0x201c>
   13288:	b	12ff8 <__assert_fail@plt+0x1e14>
   1328c:	bl	11094 <__errno_location@plt>
   13290:	ldr	r3, [r0]
   13294:	str	r3, [r5, #32]
   13298:	b	13208 <__assert_fail@plt+0x2024>
   1329c:	bl	11094 <__errno_location@plt>
   132a0:	mov	r3, #0
   132a4:	str	r0, [sp, #12]
   132a8:	str	r3, [r0]
   132ac:	mov	r0, r7
   132b0:	bl	11130 <readdir64@plt>
   132b4:	subs	sl, r0, #0
   132b8:	bne	13304 <__assert_fail@plt+0x2120>
   132bc:	ldr	r3, [sp, #12]
   132c0:	ldr	r3, [r3]
   132c4:	cmp	r3, #0
   132c8:	beq	132e8 <__assert_fail@plt+0x2104>
   132cc:	str	r3, [r5, #32]
   132d0:	ldr	r3, [sp, #4]
   132d4:	cmp	r8, #0
   132d8:	cmpeq	r3, #0
   132dc:	moveq	r3, #4
   132e0:	movne	r3, #7
   132e4:	strh	r3, [r5, #56]	; 0x38
   132e8:	ldr	r0, [r5, #12]
   132ec:	cmp	r0, #0
   132f0:	beq	13080 <__assert_fail@plt+0x1e9c>
   132f4:	bl	111d8 <closedir@plt>
   132f8:	mov	r3, #0
   132fc:	str	r3, [r5, #12]
   13300:	b	13080 <__assert_fail@plt+0x1e9c>
   13304:	ldr	r3, [r4, #48]	; 0x30
   13308:	tst	r3, #32
   1330c:	bne	13334 <__assert_fail@plt+0x2150>
   13310:	ldrb	r3, [sl, #19]
   13314:	cmp	r3, #46	; 0x2e
   13318:	bne	13334 <__assert_fail@plt+0x2150>
   1331c:	ldrb	r3, [sl, #20]
   13320:	cmp	r3, #0
   13324:	beq	13074 <__assert_fail@plt+0x1e90>
   13328:	ldrh	r3, [sl, #20]
   1332c:	cmp	r3, #46	; 0x2e
   13330:	beq	13074 <__assert_fail@plt+0x1e90>
   13334:	add	r7, sl, #19
   13338:	mov	r0, r7
   1333c:	bl	11070 <strlen@plt>
   13340:	mov	r1, r7
   13344:	mov	r2, r0
   13348:	str	r0, [sp, #44]	; 0x2c
   1334c:	mov	r0, r4
   13350:	bl	127e0 <__assert_fail@plt+0x15fc>
   13354:	subs	r7, r0, #0
   13358:	beq	13398 <__assert_fail@plt+0x21b4>
   1335c:	ldr	r2, [sp, #28]
   13360:	ldr	r3, [sp, #44]	; 0x2c
   13364:	cmp	r2, r3
   13368:	bhi	13418 <__assert_fail@plt+0x2234>
   1336c:	ldr	r2, [r4, #24]
   13370:	add	r1, fp, #2
   13374:	add	r1, r1, r3
   13378:	mov	r0, r4
   1337c:	str	r2, [sp, #44]	; 0x2c
   13380:	str	r3, [sp, #28]
   13384:	bl	12d50 <__assert_fail@plt+0x1b6c>
   13388:	ldr	r3, [sp, #28]
   1338c:	ldr	r2, [sp, #44]	; 0x2c
   13390:	cmp	r0, #0
   13394:	bne	133e0 <__assert_fail@plt+0x21fc>
   13398:	ldr	r3, [sp, #12]
   1339c:	mov	r0, r7
   133a0:	ldr	r8, [r3]
   133a4:	bl	17bd8 <__assert_fail@plt+0x69f4>
   133a8:	mov	r0, r6
   133ac:	bl	12898 <__assert_fail@plt+0x16b4>
   133b0:	ldr	r0, [r5, #12]
   133b4:	bl	111d8 <closedir@plt>
   133b8:	mov	r3, #7
   133bc:	strh	r3, [r5, #56]	; 0x38
   133c0:	ldr	r3, [r4, #48]	; 0x30
   133c4:	mov	r6, #0
   133c8:	orr	r3, r3, #8192	; 0x2000
   133cc:	str	r6, [r5, #12]
   133d0:	str	r3, [r4, #48]	; 0x30
   133d4:	ldr	r3, [sp, #12]
   133d8:	str	r8, [r3]
   133dc:	b	12f58 <__assert_fail@plt+0x1d74>
   133e0:	ldr	r1, [r4, #24]
   133e4:	cmp	r2, r1
   133e8:	ldreq	r0, [sp, #24]
   133ec:	beq	13404 <__assert_fail@plt+0x2220>
   133f0:	ldr	r2, [r4, #48]	; 0x30
   133f4:	tst	r2, #4
   133f8:	ldrne	r2, [sp, #16]
   133fc:	addne	r2, r1, r2
   13400:	strne	r2, [sp]
   13404:	ldr	r2, [r4, #36]	; 0x24
   13408:	ldr	r1, [sp, #16]
   1340c:	str	r0, [sp, #24]
   13410:	sub	r2, r2, r1
   13414:	str	r2, [sp, #28]
   13418:	ldr	r2, [sp, #16]
   1341c:	adds	r3, r2, r3
   13420:	bcc	13468 <__assert_fail@plt+0x2284>
   13424:	mov	r0, r7
   13428:	bl	17bd8 <__assert_fail@plt+0x69f4>
   1342c:	mov	r0, r6
   13430:	bl	12898 <__assert_fail@plt+0x16b4>
   13434:	ldr	r0, [r5, #12]
   13438:	bl	111d8 <closedir@plt>
   1343c:	mov	r3, #7
   13440:	strh	r3, [r5, #56]	; 0x38
   13444:	ldr	r3, [r4, #48]	; 0x30
   13448:	ldr	r2, [sp, #12]
   1344c:	orr	r3, r3, #8192	; 0x2000
   13450:	mov	r6, #0
   13454:	str	r6, [r5, #12]
   13458:	str	r3, [r4, #48]	; 0x30
   1345c:	mov	r3, #36	; 0x24
   13460:	str	r3, [r2]
   13464:	b	12f58 <__assert_fail@plt+0x1d74>
   13468:	ldr	r2, [sp, #40]	; 0x28
   1346c:	str	r2, [r7, #48]	; 0x30
   13470:	ldr	r2, [r4]
   13474:	str	r3, [r7, #40]	; 0x28
   13478:	str	r2, [r7, #4]
   1347c:	ldrd	r2, [sl]
   13480:	strd	r2, [r7, #160]	; 0xa0
   13484:	ldr	r3, [r4, #48]	; 0x30
   13488:	tst	r3, #4
   1348c:	addeq	r3, r7, #168	; 0xa8
   13490:	streq	r3, [r7, #24]
   13494:	beq	134b4 <__assert_fail@plt+0x22d0>
   13498:	ldr	r3, [r7, #28]
   1349c:	ldr	r2, [r7, #52]	; 0x34
   134a0:	str	r3, [r7, #24]
   134a4:	add	r2, r2, #1
   134a8:	add	r1, r7, #168	; 0xa8
   134ac:	ldr	r0, [sp]
   134b0:	bl	10f2c <memmove@plt>
   134b4:	ldr	r3, [r4, #44]	; 0x2c
   134b8:	cmp	r3, #0
   134bc:	beq	134cc <__assert_fail@plt+0x22e8>
   134c0:	ldr	r2, [r4, #48]	; 0x30
   134c4:	ands	r2, r2, #1024	; 0x400
   134c8:	beq	135b4 <__assert_fail@plt+0x23d0>
   134cc:	ldr	r3, [r4, #48]	; 0x30
   134d0:	ands	r1, r3, #8
   134d4:	beq	134f8 <__assert_fail@plt+0x2314>
   134d8:	ldrb	r2, [sl, #18]
   134dc:	ands	r1, r2, #251	; 0xfb
   134e0:	beq	134f8 <__assert_fail@plt+0x2314>
   134e4:	lsr	r3, r3, #4
   134e8:	and	r3, r3, #1
   134ec:	cmp	r2, #10
   134f0:	moveq	r1, r3
   134f4:	orrne	r1, r3, #1
   134f8:	mov	r3, #11
   134fc:	strh	r3, [r7, #56]	; 0x38
   13500:	ldrb	r2, [sl, #18]
   13504:	sub	r2, r2, #1
   13508:	cmp	r2, r3
   1350c:	lslls	r2, r2, #1
   13510:	ldrls	r3, [pc, #520]	; 13720 <__assert_fail@plt+0x253c>
   13514:	movhi	r3, #0
   13518:	ldrhls	r3, [r3, r2]
   1351c:	cmp	r1, #0
   13520:	movne	r2, #1
   13524:	str	r3, [r7, #80]	; 0x50
   13528:	moveq	r2, #2
   1352c:	mov	r3, #0
   13530:	strd	r2, [r7, #112]	; 0x70
   13534:	mov	r3, #0
   13538:	cmp	r6, r3
   1353c:	str	r3, [r7, #8]
   13540:	ldrne	r3, [sp, #32]
   13544:	moveq	r6, r7
   13548:	strne	r7, [r3, #8]
   1354c:	ldr	r3, [pc, #464]	; 13724 <__assert_fail@plt+0x2540>
   13550:	cmp	r8, r3
   13554:	bne	1359c <__assert_fail@plt+0x23b8>
   13558:	ldr	r3, [r4, #44]	; 0x2c
   1355c:	cmp	r3, #0
   13560:	bne	1359c <__assert_fail@plt+0x23b8>
   13564:	ldr	r1, [sp, #52]	; 0x34
   13568:	mov	r0, r5
   1356c:	bl	12930 <__assert_fail@plt+0x174c>
   13570:	ldr	r3, [pc, #404]	; 1370c <__assert_fail@plt+0x2528>
   13574:	cmp	r0, r3
   13578:	beq	13598 <__assert_fail@plt+0x23b4>
   1357c:	ldr	r3, [pc, #420]	; 13728 <__assert_fail@plt+0x2544>
   13580:	cmp	r0, r3
   13584:	beq	13598 <__assert_fail@plt+0x23b4>
   13588:	ldr	r3, [pc, #384]	; 13710 <__assert_fail@plt+0x252c>
   1358c:	cmp	r0, r3
   13590:	movne	r9, #1
   13594:	bne	1359c <__assert_fail@plt+0x23b8>
   13598:	mov	r9, #0
   1359c:	ldr	r3, [sp, #36]	; 0x24
   135a0:	add	r8, r8, #1
   135a4:	cmp	r3, r8
   135a8:	bls	13080 <__assert_fail@plt+0x1e9c>
   135ac:	str	r7, [sp, #32]
   135b0:	b	13074 <__assert_fail@plt+0x1e90>
   135b4:	mov	r1, r7
   135b8:	mov	r0, r4
   135bc:	bl	125e0 <__assert_fail@plt+0x13fc>
   135c0:	strh	r0, [r7, #56]	; 0x38
   135c4:	b	13534 <__assert_fail@plt+0x2350>
   135c8:	ldr	r1, [r4, #24]
   135cc:	ldr	r3, [r4, #4]
   135d0:	cmp	r3, #0
   135d4:	bne	1361c <__assert_fail@plt+0x2438>
   135d8:	mov	r3, r6
   135dc:	ldr	r2, [r3, #48]	; 0x30
   135e0:	cmp	r2, #0
   135e4:	blt	1308c <__assert_fail@plt+0x1ea8>
   135e8:	ldr	r2, [r3, #24]
   135ec:	add	r0, r3, #168	; 0xa8
   135f0:	cmp	r2, r0
   135f4:	ldrne	r0, [r3, #28]
   135f8:	str	r1, [r3, #28]
   135fc:	subne	r2, r2, r0
   13600:	addne	r2, r1, r2
   13604:	strne	r2, [r3, #24]
   13608:	ldr	r2, [r3, #8]
   1360c:	cmp	r2, #0
   13610:	ldreq	r2, [r3, #4]
   13614:	mov	r3, r2
   13618:	b	135dc <__assert_fail@plt+0x23f8>
   1361c:	ldr	r2, [r3, #24]
   13620:	add	r0, r3, #168	; 0xa8
   13624:	cmp	r2, r0
   13628:	ldrne	r0, [r3, #28]
   1362c:	str	r1, [r3, #28]
   13630:	subne	r2, r2, r0
   13634:	addne	r2, r1, r2
   13638:	strne	r2, [r3, #24]
   1363c:	ldr	r3, [r3, #8]
   13640:	b	135d0 <__assert_fail@plt+0x23ec>
   13644:	ldr	r3, [r4, #36]	; 0x24
   13648:	ldr	r2, [sp, #16]
   1364c:	cmp	r8, #0
   13650:	cmpne	r3, r2
   13654:	ldreq	r3, [sp]
   13658:	subeq	r3, r3, #1
   1365c:	streq	r3, [sp]
   13660:	ldr	r2, [sp]
   13664:	mov	r3, #0
   13668:	strb	r3, [r2]
   1366c:	b	13098 <__assert_fail@plt+0x1eb4>
   13670:	ldr	r3, [pc, #180]	; 1372c <__assert_fail@plt+0x2548>
   13674:	mvn	r2, #0
   13678:	ldr	r1, [r5, #4]
   1367c:	mov	r0, r4
   13680:	bl	12b00 <__assert_fail@plt+0x191c>
   13684:	b	130d8 <__assert_fail@plt+0x1ef4>
   13688:	cmp	r8, #0
   1368c:	bne	136b4 <__assert_fail@plt+0x24d0>
   13690:	ldr	r3, [sp, #8]
   13694:	cmp	r3, #3
   13698:	bne	130fc <__assert_fail@plt+0x1f18>
   1369c:	ldrh	r3, [r5, #56]	; 0x38
   136a0:	cmp	r3, #4
   136a4:	cmpne	r3, #7
   136a8:	movne	r3, #6
   136ac:	strhne	r3, [r5, #56]	; 0x38
   136b0:	b	130fc <__assert_fail@plt+0x1f18>
   136b4:	cmp	r9, #0
   136b8:	beq	136e0 <__assert_fail@plt+0x24fc>
   136bc:	ldr	r3, [pc, #108]	; 13730 <__assert_fail@plt+0x254c>
   136c0:	mov	r1, r6
   136c4:	str	r3, [r4, #44]	; 0x2c
   136c8:	mov	r2, r8
   136cc:	mov	r0, r4
   136d0:	bl	12718 <__assert_fail@plt+0x1534>
   136d4:	mov	r3, #0
   136d8:	str	r3, [r4, #44]	; 0x2c
   136dc:	mov	r6, r0
   136e0:	ldr	r3, [r4, #44]	; 0x2c
   136e4:	cmp	r3, #0
   136e8:	cmpne	r8, #1
   136ec:	bls	12f58 <__assert_fail@plt+0x1d74>
   136f0:	mov	r1, r6
   136f4:	mov	r2, r8
   136f8:	mov	r0, r4
   136fc:	bl	12718 <__assert_fail@plt+0x1534>
   13700:	mov	r6, r0
   13704:	b	12f58 <__assert_fail@plt+0x1d74>
   13708:	andeq	r8, r1, r0, lsr #13
   1370c:	andeq	r6, r0, r9, ror #18
   13710:			; <UNDEFINED> instruction: 0xff534d42
   13714:	andeq	r0, r0, r6, lsl #8
   13718:	andeq	r9, r0, r0, lsr #31
   1371c:	movtpl	r4, #24911	; 0x614f
   13720:	andeq	r8, r1, r2, ror #30
   13724:	andeq	r2, r0, r0, lsl r7
   13728:			; <UNDEFINED> instruction: 0x01021994
   1372c:	andeq	r8, r1, sl, ror pc
   13730:	andeq	r2, r1, ip, lsr #11
   13734:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13738:	bic	r4, r1, #4080	; 0xff0
   1373c:	bic	r4, r4, #15
   13740:	cmp	r4, #0
   13744:	beq	1375c <__assert_fail@plt+0x2578>
   13748:	bl	11094 <__errno_location@plt>
   1374c:	mov	r3, #22
   13750:	str	r3, [r0]
   13754:	mov	r4, #0
   13758:	b	13778 <__assert_fail@plt+0x2594>
   1375c:	and	r3, r1, #516	; 0x204
   13760:	cmp	r3, #516	; 0x204
   13764:	mov	r5, r1
   13768:	bne	13784 <__assert_fail@plt+0x25a0>
   1376c:	bl	11094 <__errno_location@plt>
   13770:	mov	r3, #22
   13774:	str	r3, [r0]
   13778:	mov	r0, r4
   1377c:	add	sp, sp, #12
   13780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13784:	ands	r4, r1, #18
   13788:	beq	1376c <__assert_fail@plt+0x2588>
   1378c:	mov	fp, r0
   13790:	mov	r1, #96	; 0x60
   13794:	mov	r0, #1
   13798:	mov	sl, r2
   1379c:	bl	176c8 <__assert_fail@plt+0x64e4>
   137a0:	subs	r4, r0, #0
   137a4:	beq	13778 <__assert_fail@plt+0x2594>
   137a8:	tst	r5, #2
   137ac:	bicne	r3, r5, #512	; 0x200
   137b0:	orrne	r3, r3, #4
   137b4:	sub	r7, fp, #4
   137b8:	mov	r6, #0
   137bc:	strne	r3, [r4, #48]	; 0x30
   137c0:	mvn	r3, #99	; 0x63
   137c4:	str	sl, [r4, #44]	; 0x2c
   137c8:	streq	r5, [r4, #48]	; 0x30
   137cc:	str	r3, [r4, #32]
   137d0:	ldr	r9, [r7, #4]!
   137d4:	cmp	r9, #0
   137d8:	bne	13900 <__assert_fail@plt+0x271c>
   137dc:	add	r1, r6, #1
   137e0:	cmp	r1, #4096	; 0x1000
   137e4:	movcc	r1, #4096	; 0x1000
   137e8:	mov	r0, r4
   137ec:	bl	12d50 <__assert_fail@plt+0x1b6c>
   137f0:	subs	r3, r0, #0
   137f4:	str	r3, [sp]
   137f8:	beq	13a14 <__assert_fail@plt+0x2830>
   137fc:	ldr	r7, [fp]
   13800:	cmp	r7, #0
   13804:	beq	13828 <__assert_fail@plt+0x2644>
   13808:	mov	r2, r9
   1380c:	ldr	r1, [pc, #524]	; 13a20 <__assert_fail@plt+0x283c>
   13810:	mov	r0, r4
   13814:	bl	127e0 <__assert_fail@plt+0x15fc>
   13818:	subs	r7, r0, #0
   1381c:	beq	13a0c <__assert_fail@plt+0x2828>
   13820:	mvn	r3, #0
   13824:	str	r3, [r7, #48]	; 0x30
   13828:	cmp	sl, #0
   1382c:	lsr	r5, r5, #11
   13830:	ldrne	r8, [r4, #48]	; 0x30
   13834:	eor	r5, r5, #1
   13838:	lsrne	r8, r8, #10
   1383c:	andne	r3, r8, #1
   13840:	mov	r8, #0
   13844:	mov	r9, r8
   13848:	mov	r6, r8
   1384c:	strne	r3, [sp]
   13850:	and	r3, r5, #1
   13854:	str	r3, [sp, #4]
   13858:	ldr	r5, [fp, r9, lsl #2]
   1385c:	cmp	r5, #0
   13860:	bne	13914 <__assert_fail@plt+0x2730>
   13864:	cmp	sl, #0
   13868:	cmpne	r9, #1
   1386c:	bls	13884 <__assert_fail@plt+0x26a0>
   13870:	mov	r1, r6
   13874:	mov	r2, r9
   13878:	mov	r0, r4
   1387c:	bl	12718 <__assert_fail@plt+0x1534>
   13880:	mov	r6, r0
   13884:	mov	r2, #0
   13888:	ldr	r1, [pc, #400]	; 13a20 <__assert_fail@plt+0x283c>
   1388c:	mov	r0, r4
   13890:	bl	127e0 <__assert_fail@plt+0x15fc>
   13894:	cmp	r0, #0
   13898:	str	r0, [r4]
   1389c:	beq	139fc <__assert_fail@plt+0x2818>
   138a0:	mov	r3, #9
   138a4:	strh	r3, [r0, #56]	; 0x38
   138a8:	mov	r3, #1
   138ac:	str	r6, [r0, #8]
   138b0:	str	r3, [r0, #48]	; 0x30
   138b4:	mov	r0, r4
   138b8:	bl	12dbc <__assert_fail@plt+0x1bd8>
   138bc:	cmp	r0, #0
   138c0:	beq	139fc <__assert_fail@plt+0x2818>
   138c4:	ldr	r3, [r4, #48]	; 0x30
   138c8:	tst	r3, #516	; 0x204
   138cc:	bne	138f0 <__assert_fail@plt+0x270c>
   138d0:	ldr	r1, [pc, #332]	; 13a24 <__assert_fail@plt+0x2840>
   138d4:	mov	r0, r4
   138d8:	bl	12854 <__assert_fail@plt+0x1670>
   138dc:	cmp	r0, #0
   138e0:	str	r0, [r4, #28]
   138e4:	ldrlt	r3, [r4, #48]	; 0x30
   138e8:	orrlt	r3, r3, #4
   138ec:	strlt	r3, [r4, #48]	; 0x30
   138f0:	mvn	r1, #0
   138f4:	add	r0, r4, #60	; 0x3c
   138f8:	bl	14ffc <__assert_fail@plt+0x3e18>
   138fc:	b	13778 <__assert_fail@plt+0x2594>
   13900:	mov	r0, r9
   13904:	bl	11070 <strlen@plt>
   13908:	cmp	r6, r0
   1390c:	movcc	r6, r0
   13910:	b	137d0 <__assert_fail@plt+0x25ec>
   13914:	mov	r0, r5
   13918:	bl	11070 <strlen@plt>
   1391c:	ldr	r1, [sp, #4]
   13920:	cmp	r0, #2
   13924:	movls	r1, #0
   13928:	andhi	r1, r1, #1
   1392c:	cmp	r1, #0
   13930:	mov	r2, r0
   13934:	beq	13964 <__assert_fail@plt+0x2780>
   13938:	sub	r0, r0, #1
   1393c:	add	r1, r5, r0
   13940:	ldrb	r0, [r5, r0]
   13944:	cmp	r0, #47	; 0x2f
   13948:	bne	13964 <__assert_fail@plt+0x2780>
   1394c:	ldrb	r0, [r1, #-1]!
   13950:	cmp	r0, #47	; 0x2f
   13954:	bne	13964 <__assert_fail@plt+0x2780>
   13958:	sub	r2, r2, #1
   1395c:	cmp	r2, #1
   13960:	bne	1394c <__assert_fail@plt+0x2768>
   13964:	mov	r1, r5
   13968:	mov	r0, r4
   1396c:	bl	127e0 <__assert_fail@plt+0x15fc>
   13970:	subs	r5, r0, #0
   13974:	beq	139fc <__assert_fail@plt+0x2818>
   13978:	mov	r2, #0
   1397c:	str	r2, [r5, #48]	; 0x30
   13980:	add	r2, r5, #168	; 0xa8
   13984:	str	r2, [r5, #24]
   13988:	ldr	r2, [sp]
   1398c:	str	r7, [r5, #4]
   13990:	cmp	r6, #0
   13994:	moveq	r2, #0
   13998:	andne	r2, r2, #1
   1399c:	cmp	r2, #0
   139a0:	beq	139e8 <__assert_fail@plt+0x2804>
   139a4:	mov	r0, #2
   139a8:	mov	r1, #0
   139ac:	mov	r2, #11
   139b0:	strh	r2, [r5, #56]	; 0x38
   139b4:	strd	r0, [r5, #112]	; 0x70
   139b8:	cmp	sl, #0
   139bc:	strne	r6, [r5, #8]
   139c0:	bne	139dc <__assert_fail@plt+0x27f8>
   139c4:	cmp	r6, #0
   139c8:	str	sl, [r5, #8]
   139cc:	moveq	r8, r5
   139d0:	strne	r5, [r8, #8]
   139d4:	movne	r8, r5
   139d8:	movne	r5, r6
   139dc:	add	r9, r9, #1
   139e0:	mov	r6, r5
   139e4:	b	13858 <__assert_fail@plt+0x2674>
   139e8:	mov	r1, r5
   139ec:	mov	r0, r4
   139f0:	bl	125e0 <__assert_fail@plt+0x13fc>
   139f4:	strh	r0, [r5, #56]	; 0x38
   139f8:	b	139b8 <__assert_fail@plt+0x27d4>
   139fc:	mov	r0, r6
   13a00:	bl	12898 <__assert_fail@plt+0x16b4>
   13a04:	mov	r0, r7
   13a08:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13a0c:	ldr	r0, [r4, #24]
   13a10:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13a14:	mov	r0, r4
   13a18:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13a1c:	b	13754 <__assert_fail@plt+0x2570>
   13a20:	andeq	r8, r1, r0, lsr #14
   13a24:	andeq	r8, r1, fp, ror pc
   13a28:	push	{r4, r5, r6, lr}
   13a2c:	mov	r4, r0
   13a30:	ldr	r0, [r0]
   13a34:	cmp	r0, #0
   13a38:	bne	13ad0 <__assert_fail@plt+0x28ec>
   13a3c:	ldr	r0, [r4, #4]
   13a40:	cmp	r0, #0
   13a44:	beq	13a4c <__assert_fail@plt+0x2868>
   13a48:	bl	12898 <__assert_fail@plt+0x16b4>
   13a4c:	ldr	r0, [r4, #8]
   13a50:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13a54:	ldr	r0, [r4, #24]
   13a58:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13a5c:	ldr	r3, [r4, #48]	; 0x30
   13a60:	tst	r3, #512	; 0x200
   13a64:	beq	13afc <__assert_fail@plt+0x2918>
   13a68:	ldr	r0, [r4, #32]
   13a6c:	cmp	r0, #0
   13a70:	bge	13ae4 <__assert_fail@plt+0x2900>
   13a74:	mov	r5, #0
   13a78:	add	r0, r4, #60	; 0x3c
   13a7c:	bl	128fc <__assert_fail@plt+0x1718>
   13a80:	ldr	r0, [r4, #52]	; 0x34
   13a84:	cmp	r0, #0
   13a88:	beq	13a90 <__assert_fail@plt+0x28ac>
   13a8c:	bl	14b68 <__assert_fail@plt+0x3984>
   13a90:	mov	r0, r4
   13a94:	bl	128d0 <__assert_fail@plt+0x16ec>
   13a98:	mov	r0, r4
   13a9c:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13aa0:	cmp	r5, #0
   13aa4:	beq	13ab4 <__assert_fail@plt+0x28d0>
   13aa8:	bl	11094 <__errno_location@plt>
   13aac:	str	r5, [r0]
   13ab0:	mvn	r5, #0
   13ab4:	mov	r0, r5
   13ab8:	pop	{r4, r5, r6, pc}
   13abc:	ldr	r5, [r0, #8]
   13ac0:	cmp	r5, #0
   13ac4:	ldreq	r5, [r0, #4]
   13ac8:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13acc:	mov	r0, r5
   13ad0:	ldr	r3, [r0, #48]	; 0x30
   13ad4:	cmp	r3, #0
   13ad8:	bge	13abc <__assert_fail@plt+0x28d8>
   13adc:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13ae0:	b	13a3c <__assert_fail@plt+0x2858>
   13ae4:	bl	111c0 <close@plt>
   13ae8:	cmp	r0, #0
   13aec:	beq	13a74 <__assert_fail@plt+0x2890>
   13af0:	bl	11094 <__errno_location@plt>
   13af4:	ldr	r5, [r0]
   13af8:	b	13a78 <__assert_fail@plt+0x2894>
   13afc:	tst	r3, #4
   13b00:	bne	13a74 <__assert_fail@plt+0x2890>
   13b04:	ldr	r0, [r4, #28]
   13b08:	bl	11154 <fchdir@plt>
   13b0c:	subs	r5, r0, #0
   13b10:	beq	13b1c <__assert_fail@plt+0x2938>
   13b14:	bl	11094 <__errno_location@plt>
   13b18:	ldr	r5, [r0]
   13b1c:	ldr	r0, [r4, #28]
   13b20:	bl	111c0 <close@plt>
   13b24:	clz	r3, r5
   13b28:	lsr	r3, r3, #5
   13b2c:	cmp	r0, #0
   13b30:	moveq	r3, #0
   13b34:	cmp	r3, #0
   13b38:	beq	13a78 <__assert_fail@plt+0x2894>
   13b3c:	b	13af0 <__assert_fail@plt+0x290c>
   13b40:	push	{r4, r5, r6, r7, r8, lr}
   13b44:	ldr	r4, [r0]
   13b48:	cmp	r4, #0
   13b4c:	beq	13e4c <__assert_fail@plt+0x2c68>
   13b50:	ldr	r1, [r0, #48]	; 0x30
   13b54:	mov	r5, r0
   13b58:	ands	r2, r1, #8192	; 0x2000
   13b5c:	bne	13e4c <__assert_fail@plt+0x2c68>
   13b60:	ldrh	r3, [r4, #60]	; 0x3c
   13b64:	mov	ip, #3
   13b68:	strh	ip, [r4, #60]	; 0x3c
   13b6c:	cmp	r3, #1
   13b70:	bne	13b88 <__assert_fail@plt+0x29a4>
   13b74:	mov	r1, r4
   13b78:	bl	125e0 <__assert_fail@plt+0x13fc>
   13b7c:	strh	r0, [r4, #56]	; 0x38
   13b80:	mov	r0, r4
   13b84:	pop	{r4, r5, r6, r7, r8, pc}
   13b88:	cmp	r3, #2
   13b8c:	ldrh	r2, [r4, #56]	; 0x38
   13b90:	bne	13c70 <__assert_fail@plt+0x2a8c>
   13b94:	sub	ip, r2, #12
   13b98:	cmp	ip, #1
   13b9c:	bhi	13c70 <__assert_fail@plt+0x2a8c>
   13ba0:	mov	r2, #1
   13ba4:	mov	r1, r4
   13ba8:	bl	125e0 <__assert_fail@plt+0x13fc>
   13bac:	cmp	r0, #1
   13bb0:	strh	r0, [r4, #56]	; 0x38
   13bb4:	bne	13bfc <__assert_fail@plt+0x2a18>
   13bb8:	ldr	r3, [r5, #48]	; 0x30
   13bbc:	tst	r3, #4
   13bc0:	bne	13bfc <__assert_fail@plt+0x2a18>
   13bc4:	ldr	r1, [pc, #1332]	; 14100 <__assert_fail@plt+0x2f1c>
   13bc8:	mov	r0, r5
   13bcc:	bl	12854 <__assert_fail@plt+0x1670>
   13bd0:	cmp	r0, #0
   13bd4:	str	r0, [r4, #36]	; 0x24
   13bd8:	ldrhge	r3, [r4, #58]	; 0x3a
   13bdc:	orrge	r3, r3, #2
   13be0:	strhge	r3, [r4, #58]	; 0x3a
   13be4:	bge	13bfc <__assert_fail@plt+0x2a18>
   13be8:	bl	11094 <__errno_location@plt>
   13bec:	ldr	r3, [r0]
   13bf0:	str	r3, [r4, #32]
   13bf4:	mov	r3, #7
   13bf8:	strh	r3, [r4, #56]	; 0x38
   13bfc:	ldrh	r3, [r4, #56]	; 0x38
   13c00:	str	r4, [r5]
   13c04:	cmp	r3, #11
   13c08:	bne	13c30 <__assert_fail@plt+0x2a4c>
   13c0c:	ldrd	r2, [r4, #112]	; 0x70
   13c10:	cmp	r3, #0
   13c14:	cmpeq	r2, #2
   13c18:	bne	13fa0 <__assert_fail@plt+0x2dbc>
   13c1c:	mov	r2, #0
   13c20:	mov	r1, r4
   13c24:	mov	r0, r5
   13c28:	bl	125e0 <__assert_fail@plt+0x13fc>
   13c2c:	strh	r0, [r4, #56]	; 0x38
   13c30:	ldrh	r3, [r4, #56]	; 0x38
   13c34:	cmp	r3, #1
   13c38:	bne	13b80 <__assert_fail@plt+0x299c>
   13c3c:	ldr	r3, [r4, #48]	; 0x30
   13c40:	cmp	r3, #0
   13c44:	ldrdeq	r2, [r4, #64]	; 0x40
   13c48:	strdeq	r2, [r5, #16]
   13c4c:	mov	r0, r5
   13c50:	mov	r1, r4
   13c54:	bl	12e38 <__assert_fail@plt+0x1c54>
   13c58:	subs	r5, r0, #0
   13c5c:	bne	13b80 <__assert_fail@plt+0x299c>
   13c60:	bl	11094 <__errno_location@plt>
   13c64:	mov	r3, #12
   13c68:	str	r3, [r0]
   13c6c:	b	13e4c <__assert_fail@plt+0x2c68>
   13c70:	cmp	r2, #1
   13c74:	movne	r6, r4
   13c78:	bne	13e00 <__assert_fail@plt+0x2c1c>
   13c7c:	cmp	r3, #4
   13c80:	beq	13ca0 <__assert_fail@plt+0x2abc>
   13c84:	tst	r1, #64	; 0x40
   13c88:	beq	13ce4 <__assert_fail@plt+0x2b00>
   13c8c:	ldrd	r6, [r4, #64]	; 0x40
   13c90:	ldrd	r2, [r5, #16]
   13c94:	cmp	r7, r3
   13c98:	cmpeq	r6, r2
   13c9c:	beq	13ce4 <__assert_fail@plt+0x2b00>
   13ca0:	ldrh	r3, [r4, #58]	; 0x3a
   13ca4:	tst	r3, #2
   13ca8:	beq	13cb4 <__assert_fail@plt+0x2ad0>
   13cac:	ldr	r0, [r4, #36]	; 0x24
   13cb0:	bl	111c0 <close@plt>
   13cb4:	ldr	r0, [r5, #4]
   13cb8:	cmp	r0, #0
   13cbc:	beq	13ccc <__assert_fail@plt+0x2ae8>
   13cc0:	bl	12898 <__assert_fail@plt+0x16b4>
   13cc4:	mov	r3, #0
   13cc8:	str	r3, [r5, #4]
   13ccc:	mov	r3, #6
   13cd0:	strh	r3, [r4, #56]	; 0x38
   13cd4:	mov	r1, r4
   13cd8:	mov	r0, r5
   13cdc:	bl	12c9c <__assert_fail@plt+0x1ab8>
   13ce0:	b	13b80 <__assert_fail@plt+0x299c>
   13ce4:	ldr	r0, [r5, #4]
   13ce8:	cmp	r0, #0
   13cec:	beq	13d0c <__assert_fail@plt+0x2b28>
   13cf0:	tst	r1, #4096	; 0x1000
   13cf4:	beq	13d0c <__assert_fail@plt+0x2b28>
   13cf8:	bic	r1, r1, #4096	; 0x1000
   13cfc:	str	r1, [r5, #48]	; 0x30
   13d00:	bl	12898 <__assert_fail@plt+0x16b4>
   13d04:	mov	r3, #0
   13d08:	str	r3, [r5, #4]
   13d0c:	ldr	r3, [r5, #4]
   13d10:	cmp	r3, #0
   13d14:	beq	13dbc <__assert_fail@plt+0x2bd8>
   13d18:	ldr	r3, [r4, #24]
   13d1c:	mvn	r2, #0
   13d20:	mov	r1, r4
   13d24:	mov	r0, r5
   13d28:	bl	12b00 <__assert_fail@plt+0x191c>
   13d2c:	cmp	r0, #0
   13d30:	beq	13d58 <__assert_fail@plt+0x2b74>
   13d34:	bl	11094 <__errno_location@plt>
   13d38:	ldr	r3, [r0]
   13d3c:	str	r3, [r4, #32]
   13d40:	ldrh	r3, [r4, #58]	; 0x3a
   13d44:	orr	r3, r3, #1
   13d48:	strh	r3, [r4, #58]	; 0x3a
   13d4c:	ldr	r3, [r5, #4]
   13d50:	cmp	r3, #0
   13d54:	bne	13da8 <__assert_fail@plt+0x2bc4>
   13d58:	mov	r3, #0
   13d5c:	ldr	r4, [r5, #4]
   13d60:	str	r3, [r5, #4]
   13d64:	ldr	r0, [r4, #4]
   13d68:	ldr	r2, [r5, #24]
   13d6c:	ldr	r1, [r0, #40]	; 0x28
   13d70:	ldr	r0, [r0, #28]
   13d74:	sub	r3, r1, #1
   13d78:	ldrb	r0, [r0, r3]
   13d7c:	cmp	r0, #47	; 0x2f
   13d80:	movne	r3, r1
   13d84:	mov	r1, #47	; 0x2f
   13d88:	add	r0, r2, r3
   13d8c:	strb	r1, [r2, r3]
   13d90:	ldr	r2, [r4, #52]	; 0x34
   13d94:	add	r1, r4, #168	; 0xa8
   13d98:	add	r2, r2, #1
   13d9c:	add	r0, r0, #1
   13da0:	bl	10f2c <memmove@plt>
   13da4:	b	13bfc <__assert_fail@plt+0x2a18>
   13da8:	ldr	r2, [r3, #4]
   13dac:	ldr	r2, [r2, #24]
   13db0:	str	r2, [r3, #24]
   13db4:	ldr	r3, [r3, #8]
   13db8:	b	13d50 <__assert_fail@plt+0x2b6c>
   13dbc:	mov	r1, #3
   13dc0:	mov	r0, r5
   13dc4:	bl	12ef0 <__assert_fail@plt+0x1d0c>
   13dc8:	cmp	r0, #0
   13dcc:	str	r0, [r5, #4]
   13dd0:	bne	13d58 <__assert_fail@plt+0x2b74>
   13dd4:	ldr	r3, [r5, #48]	; 0x30
   13dd8:	tst	r3, #8192	; 0x2000
   13ddc:	bne	13e4c <__assert_fail@plt+0x2c68>
   13de0:	ldr	r3, [r4, #32]
   13de4:	cmp	r3, #0
   13de8:	beq	13cd4 <__assert_fail@plt+0x2af0>
   13dec:	ldrh	r3, [r4, #56]	; 0x38
   13df0:	cmp	r3, #4
   13df4:	beq	13cd4 <__assert_fail@plt+0x2af0>
   13df8:	mov	r3, #7
   13dfc:	b	13cd0 <__assert_fail@plt+0x2aec>
   13e00:	ldr	r4, [r4, #8]
   13e04:	cmp	r4, #0
   13e08:	bne	13e60 <__assert_fail@plt+0x2c7c>
   13e0c:	ldr	r3, [r6, #4]
   13e10:	ldr	r2, [r3, #12]
   13e14:	cmp	r2, #0
   13e18:	beq	13fb0 <__assert_fail@plt+0x2dcc>
   13e1c:	str	r3, [r5]
   13e20:	ldr	r2, [r5, #24]
   13e24:	ldr	r3, [r3, #40]	; 0x28
   13e28:	mov	r1, #3
   13e2c:	mov	r0, r5
   13e30:	strb	r4, [r2, r3]
   13e34:	bl	12ef0 <__assert_fail@plt+0x1d0c>
   13e38:	subs	r4, r0, #0
   13e3c:	bne	13e54 <__assert_fail@plt+0x2c70>
   13e40:	ldr	r3, [r5, #48]	; 0x30
   13e44:	tst	r3, #8192	; 0x2000
   13e48:	beq	13fb0 <__assert_fail@plt+0x2dcc>
   13e4c:	mov	r4, #0
   13e50:	b	13b80 <__assert_fail@plt+0x299c>
   13e54:	mov	r0, r6
   13e58:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13e5c:	b	13d64 <__assert_fail@plt+0x2b80>
   13e60:	mov	r0, r6
   13e64:	str	r4, [r5]
   13e68:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13e6c:	ldr	r6, [r4, #48]	; 0x30
   13e70:	cmp	r6, #0
   13e74:	bne	13f1c <__assert_fail@plt+0x2d38>
   13e78:	mov	r0, r5
   13e7c:	bl	12ab0 <__assert_fail@plt+0x18cc>
   13e80:	cmp	r0, #0
   13e84:	ldrne	r3, [r5, #48]	; 0x30
   13e88:	orrne	r3, r3, #8192	; 0x2000
   13e8c:	strne	r3, [r5, #48]	; 0x30
   13e90:	bne	13e4c <__assert_fail@plt+0x2c68>
   13e94:	mov	r0, r5
   13e98:	bl	128d0 <__assert_fail@plt+0x16ec>
   13e9c:	ldr	r2, [r4, #52]	; 0x34
   13ea0:	add	r7, r4, #168	; 0xa8
   13ea4:	str	r2, [r4, #40]	; 0x28
   13ea8:	mov	r1, r7
   13eac:	add	r2, r2, #1
   13eb0:	ldr	r0, [r5, #24]
   13eb4:	bl	10f2c <memmove@plt>
   13eb8:	mov	r1, #47	; 0x2f
   13ebc:	mov	r0, r7
   13ec0:	bl	11118 <strrchr@plt>
   13ec4:	cmp	r0, #0
   13ec8:	beq	13f04 <__assert_fail@plt+0x2d20>
   13ecc:	cmp	r7, r0
   13ed0:	bne	13ee0 <__assert_fail@plt+0x2cfc>
   13ed4:	ldrb	r3, [r4, #169]	; 0xa9
   13ed8:	cmp	r3, #0
   13edc:	beq	13f04 <__assert_fail@plt+0x2d20>
   13ee0:	add	r6, r0, #1
   13ee4:	mov	r0, r6
   13ee8:	bl	11070 <strlen@plt>
   13eec:	mov	r1, r6
   13ef0:	mov	r8, r0
   13ef4:	add	r2, r0, #1
   13ef8:	mov	r0, r7
   13efc:	bl	10f2c <memmove@plt>
   13f00:	str	r8, [r4, #52]	; 0x34
   13f04:	ldr	r3, [r5, #24]
   13f08:	mov	r0, r5
   13f0c:	str	r3, [r4, #28]
   13f10:	str	r3, [r4, #24]
   13f14:	bl	12dbc <__assert_fail@plt+0x1bd8>
   13f18:	b	13bfc <__assert_fail@plt+0x2a18>
   13f1c:	ldrh	r3, [r4, #60]	; 0x3c
   13f20:	mov	r6, r4
   13f24:	cmp	r3, #4
   13f28:	beq	13e00 <__assert_fail@plt+0x2c1c>
   13f2c:	cmp	r3, #2
   13f30:	bne	13d64 <__assert_fail@plt+0x2b80>
   13f34:	mov	r2, #1
   13f38:	mov	r1, r4
   13f3c:	mov	r0, r5
   13f40:	bl	125e0 <__assert_fail@plt+0x13fc>
   13f44:	cmp	r0, #1
   13f48:	strh	r0, [r4, #56]	; 0x38
   13f4c:	bne	13f94 <__assert_fail@plt+0x2db0>
   13f50:	ldr	r3, [r5, #48]	; 0x30
   13f54:	tst	r3, #4
   13f58:	bne	13f94 <__assert_fail@plt+0x2db0>
   13f5c:	ldr	r1, [pc, #412]	; 14100 <__assert_fail@plt+0x2f1c>
   13f60:	mov	r0, r5
   13f64:	bl	12854 <__assert_fail@plt+0x1670>
   13f68:	cmp	r0, #0
   13f6c:	str	r0, [r4, #36]	; 0x24
   13f70:	ldrhge	r3, [r4, #58]	; 0x3a
   13f74:	orrge	r3, r3, #2
   13f78:	strhge	r3, [r4, #58]	; 0x3a
   13f7c:	bge	13f94 <__assert_fail@plt+0x2db0>
   13f80:	bl	11094 <__errno_location@plt>
   13f84:	ldr	r3, [r0]
   13f88:	str	r3, [r4, #32]
   13f8c:	mov	r3, #7
   13f90:	strh	r3, [r4, #56]	; 0x38
   13f94:	mov	r3, #3
   13f98:	strh	r3, [r4, #60]	; 0x3c
   13f9c:	b	13d64 <__assert_fail@plt+0x2b80>
   13fa0:	cmp	r3, #0
   13fa4:	cmpeq	r2, #1
   13fa8:	beq	13c30 <__assert_fail@plt+0x2a4c>
   13fac:	bl	111b4 <abort@plt>
   13fb0:	ldr	r4, [r6, #4]
   13fb4:	mov	r0, r6
   13fb8:	str	r4, [r5]
   13fbc:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13fc0:	ldr	r3, [r4, #48]	; 0x30
   13fc4:	cmn	r3, #1
   13fc8:	bne	13fe8 <__assert_fail@plt+0x2e04>
   13fcc:	mov	r0, r4
   13fd0:	bl	17bd8 <__assert_fail@plt+0x69f4>
   13fd4:	bl	11094 <__errno_location@plt>
   13fd8:	mov	r4, #0
   13fdc:	str	r4, [r0]
   13fe0:	str	r4, [r5]
   13fe4:	b	13b80 <__assert_fail@plt+0x299c>
   13fe8:	ldrh	r3, [r4, #56]	; 0x38
   13fec:	cmp	r3, #11
   13ff0:	beq	13fac <__assert_fail@plt+0x2dc8>
   13ff4:	ldr	r3, [r4, #40]	; 0x28
   13ff8:	ldr	r2, [r5, #24]
   13ffc:	mov	r1, #0
   14000:	strb	r1, [r2, r3]
   14004:	ldr	r3, [r4, #48]	; 0x30
   14008:	cmp	r3, r1
   1400c:	bne	1403c <__assert_fail@plt+0x2e58>
   14010:	mov	r0, r5
   14014:	bl	12ab0 <__assert_fail@plt+0x18cc>
   14018:	cmp	r0, #0
   1401c:	beq	14074 <__assert_fail@plt+0x2e90>
   14020:	bl	11094 <__errno_location@plt>
   14024:	ldr	r3, [r0]
   14028:	str	r3, [r4, #32]
   1402c:	ldr	r3, [r5, #48]	; 0x30
   14030:	orr	r3, r3, #8192	; 0x2000
   14034:	str	r3, [r5, #48]	; 0x30
   14038:	b	14074 <__assert_fail@plt+0x2e90>
   1403c:	ldrh	r3, [r4, #58]	; 0x3a
   14040:	tst	r3, #2
   14044:	beq	140e0 <__assert_fail@plt+0x2efc>
   14048:	ldr	r3, [r5, #48]	; 0x30
   1404c:	tst	r3, #4
   14050:	bne	1406c <__assert_fail@plt+0x2e88>
   14054:	tst	r3, #512	; 0x200
   14058:	beq	140b4 <__assert_fail@plt+0x2ed0>
   1405c:	mov	r2, #1
   14060:	ldr	r1, [r4, #36]	; 0x24
   14064:	mov	r0, r5
   14068:	bl	12a34 <__assert_fail@plt+0x1850>
   1406c:	ldr	r0, [r4, #36]	; 0x24
   14070:	bl	111c0 <close@plt>
   14074:	ldrh	r3, [r4, #56]	; 0x38
   14078:	cmp	r3, #2
   1407c:	beq	140a4 <__assert_fail@plt+0x2ec0>
   14080:	ldr	r3, [r4, #32]
   14084:	cmp	r3, #0
   14088:	movne	r3, #7
   1408c:	moveq	r3, #6
   14090:	strh	r3, [r4, #56]	; 0x38
   14094:	bne	140a4 <__assert_fail@plt+0x2ec0>
   14098:	mov	r1, r4
   1409c:	mov	r0, r5
   140a0:	bl	12c9c <__assert_fail@plt+0x1ab8>
   140a4:	ldr	r3, [r5, #48]	; 0x30
   140a8:	tst	r3, #8192	; 0x2000
   140ac:	beq	13b80 <__assert_fail@plt+0x299c>
   140b0:	b	13e4c <__assert_fail@plt+0x2c68>
   140b4:	ldr	r0, [r4, #36]	; 0x24
   140b8:	bl	11154 <fchdir@plt>
   140bc:	cmp	r0, #0
   140c0:	beq	1406c <__assert_fail@plt+0x2e88>
   140c4:	bl	11094 <__errno_location@plt>
   140c8:	ldr	r3, [r0]
   140cc:	str	r3, [r4, #32]
   140d0:	ldr	r3, [r5, #48]	; 0x30
   140d4:	orr	r3, r3, #8192	; 0x2000
   140d8:	str	r3, [r5, #48]	; 0x30
   140dc:	b	1406c <__assert_fail@plt+0x2e88>
   140e0:	tst	r3, #1
   140e4:	bne	14074 <__assert_fail@plt+0x2e90>
   140e8:	ldr	r3, [pc, #20]	; 14104 <__assert_fail@plt+0x2f20>
   140ec:	mvn	r2, #0
   140f0:	ldr	r1, [r4, #4]
   140f4:	mov	r0, r5
   140f8:	bl	12b00 <__assert_fail@plt+0x191c>
   140fc:	b	14018 <__assert_fail@plt+0x2e34>
   14100:	andeq	r8, r1, fp, ror pc
   14104:	andeq	r8, r1, sl, ror pc
   14108:	cmp	r2, #4
   1410c:	bls	14128 <__assert_fail@plt+0x2f44>
   14110:	push	{r4, lr}
   14114:	bl	11094 <__errno_location@plt>
   14118:	mov	r3, #22
   1411c:	str	r3, [r0]
   14120:	mov	r0, #1
   14124:	pop	{r4, pc}
   14128:	strh	r2, [r1, #60]	; 0x3c
   1412c:	mov	r0, #0
   14130:	bx	lr
   14134:	push	{r4, r5, r6, r7, r8, lr}
   14138:	bics	r8, r1, #4096	; 0x1000
   1413c:	beq	14154 <__assert_fail@plt+0x2f70>
   14140:	bl	11094 <__errno_location@plt>
   14144:	mov	r3, #22
   14148:	str	r3, [r0]
   1414c:	mov	r0, #0
   14150:	pop	{r4, r5, r6, r7, r8, pc}
   14154:	mov	r5, r0
   14158:	ldr	r4, [r0]
   1415c:	mov	r7, r1
   14160:	bl	11094 <__errno_location@plt>
   14164:	mov	r6, r0
   14168:	str	r8, [r0]
   1416c:	ldr	r0, [r5, #48]	; 0x30
   14170:	ands	r0, r0, #8192	; 0x2000
   14174:	bne	1414c <__assert_fail@plt+0x2f68>
   14178:	ldrh	r3, [r4, #56]	; 0x38
   1417c:	cmp	r3, #9
   14180:	bne	1418c <__assert_fail@plt+0x2fa8>
   14184:	ldr	r0, [r4, #8]
   14188:	pop	{r4, r5, r6, r7, r8, pc}
   1418c:	cmp	r3, #1
   14190:	popne	{r4, r5, r6, r7, r8, pc}
   14194:	ldr	r0, [r5, #4]
   14198:	cmp	r0, #0
   1419c:	beq	141a4 <__assert_fail@plt+0x2fc0>
   141a0:	bl	12898 <__assert_fail@plt+0x16b4>
   141a4:	cmp	r7, #4096	; 0x1000
   141a8:	moveq	r8, #2
   141ac:	ldreq	r3, [r5, #48]	; 0x30
   141b0:	movne	r8, #1
   141b4:	orreq	r3, r3, #4096	; 0x1000
   141b8:	streq	r3, [r5, #48]	; 0x30
   141bc:	ldr	r3, [r4, #48]	; 0x30
   141c0:	cmp	r3, #0
   141c4:	bne	141e4 <__assert_fail@plt+0x3000>
   141c8:	ldr	r3, [r4, #24]
   141cc:	ldrb	r3, [r3]
   141d0:	cmp	r3, #47	; 0x2f
   141d4:	beq	141e4 <__assert_fail@plt+0x3000>
   141d8:	ldr	r0, [r5, #48]	; 0x30
   141dc:	ands	r4, r0, #4
   141e0:	beq	141f8 <__assert_fail@plt+0x3014>
   141e4:	mov	r1, r8
   141e8:	mov	r0, r5
   141ec:	bl	12ef0 <__assert_fail@plt+0x1d0c>
   141f0:	str	r0, [r5, #4]
   141f4:	pop	{r4, r5, r6, r7, r8, pc}
   141f8:	ldr	r1, [pc, #116]	; 14274 <__assert_fail@plt+0x3090>
   141fc:	mov	r0, r5
   14200:	bl	12854 <__assert_fail@plt+0x1670>
   14204:	subs	r7, r0, #0
   14208:	strlt	r4, [r5, #4]
   1420c:	blt	1414c <__assert_fail@plt+0x2f68>
   14210:	mov	r1, r8
   14214:	mov	r0, r5
   14218:	bl	12ef0 <__assert_fail@plt+0x1d0c>
   1421c:	str	r0, [r5, #4]
   14220:	ldr	r0, [r5, #48]	; 0x30
   14224:	ands	r4, r0, #512	; 0x200
   14228:	beq	14244 <__assert_fail@plt+0x3060>
   1422c:	mov	r2, #1
   14230:	mov	r1, r7
   14234:	mov	r0, r5
   14238:	bl	12a34 <__assert_fail@plt+0x1850>
   1423c:	ldr	r0, [r5, #4]
   14240:	pop	{r4, r5, r6, r7, r8, pc}
   14244:	mov	r0, r7
   14248:	bl	11154 <fchdir@plt>
   1424c:	cmp	r0, #0
   14250:	beq	14268 <__assert_fail@plt+0x3084>
   14254:	ldr	r5, [r6]
   14258:	mov	r0, r7
   1425c:	bl	111c0 <close@plt>
   14260:	str	r5, [r6]
   14264:	b	1414c <__assert_fail@plt+0x2f68>
   14268:	mov	r0, r7
   1426c:	bl	111c0 <close@plt>
   14270:	b	1423c <__assert_fail@plt+0x3058>
   14274:	andeq	r8, r1, fp, ror pc
   14278:	push	{r4, lr}
   1427c:	ror	r0, r0, #3
   14280:	bl	18068 <__assert_fail@plt+0x6e84>
   14284:	mov	r0, r1
   14288:	pop	{r4, pc}
   1428c:	sub	r0, r1, r0
   14290:	clz	r0, r0
   14294:	lsr	r0, r0, #5
   14298:	bx	lr
   1429c:	push	{r4, lr}
   142a0:	mov	r4, r0
   142a4:	mov	r0, r1
   142a8:	ldr	r3, [r4, #24]
   142ac:	ldr	r1, [r4, #8]
   142b0:	blx	r3
   142b4:	ldr	r3, [r4, #8]
   142b8:	cmp	r0, r3
   142bc:	bcc	142c4 <__assert_fail@plt+0x30e0>
   142c0:	bl	111b4 <abort@plt>
   142c4:	ldr	r3, [r4]
   142c8:	add	r0, r3, r0, lsl #3
   142cc:	pop	{r4, pc}
   142d0:	push	{r4, r5, r6, r7, r8, lr}
   142d4:	mov	r6, r1
   142d8:	mov	r8, r2
   142dc:	mov	r5, r0
   142e0:	mov	r7, r3
   142e4:	bl	1429c <__assert_fail@plt+0x30b8>
   142e8:	str	r0, [r8]
   142ec:	ldr	r1, [r0]
   142f0:	cmp	r1, #0
   142f4:	bne	14304 <__assert_fail@plt+0x3120>
   142f8:	mov	r2, #0
   142fc:	mov	r0, r2
   14300:	pop	{r4, r5, r6, r7, r8, pc}
   14304:	cmp	r6, r1
   14308:	mov	r4, r0
   1430c:	bne	1434c <__assert_fail@plt+0x3168>
   14310:	cmp	r7, #0
   14314:	ldr	r2, [r4]
   14318:	beq	142fc <__assert_fail@plt+0x3118>
   1431c:	ldr	r3, [r4, #4]
   14320:	cmp	r3, #0
   14324:	streq	r3, [r4]
   14328:	beq	142fc <__assert_fail@plt+0x3118>
   1432c:	ldm	r3, {r0, r1}
   14330:	stm	r4, {r0, r1}
   14334:	mov	r1, #0
   14338:	str	r1, [r3]
   1433c:	ldr	r1, [r5, #36]	; 0x24
   14340:	str	r1, [r3, #4]
   14344:	str	r3, [r5, #36]	; 0x24
   14348:	b	142fc <__assert_fail@plt+0x3118>
   1434c:	ldr	r3, [r5, #28]
   14350:	mov	r0, r6
   14354:	blx	r3
   14358:	cmp	r0, #0
   1435c:	bne	14310 <__assert_fail@plt+0x312c>
   14360:	ldr	r3, [r4, #4]
   14364:	cmp	r3, #0
   14368:	beq	142f8 <__assert_fail@plt+0x3114>
   1436c:	ldr	r1, [r3]
   14370:	cmp	r6, r1
   14374:	bne	14394 <__assert_fail@plt+0x31b0>
   14378:	ldr	r3, [r4, #4]
   1437c:	cmp	r7, #0
   14380:	ldr	r2, [r3]
   14384:	beq	142fc <__assert_fail@plt+0x3118>
   14388:	ldr	r1, [r3, #4]
   1438c:	str	r1, [r4, #4]
   14390:	b	14334 <__assert_fail@plt+0x3150>
   14394:	ldr	r3, [r5, #28]
   14398:	mov	r0, r6
   1439c:	blx	r3
   143a0:	cmp	r0, #0
   143a4:	bne	14378 <__assert_fail@plt+0x3194>
   143a8:	ldr	r4, [r4, #4]
   143ac:	b	14360 <__assert_fail@plt+0x317c>
   143b0:	push	{r4, r5, r6, lr}
   143b4:	ldrb	r4, [r1, #16]
   143b8:	cmp	r4, #0
   143bc:	bne	143e8 <__assert_fail@plt+0x3204>
   143c0:	vmov	s15, r0
   143c4:	vldr	s14, [r1, #8]
   143c8:	vcvt.f32.u32	s13, s15
   143cc:	vdiv.f32	s15, s13, s14
   143d0:	vldr	s14, [pc, #156]	; 14474 <__assert_fail@plt+0x3290>
   143d4:	vcmpe.f32	s15, s14
   143d8:	vmrs	APSR_nzcv, fpscr
   143dc:	bge	14440 <__assert_fail@plt+0x325c>
   143e0:	vcvt.u32.f32	s15, s15
   143e4:	vmov	r0, s15
   143e8:	cmp	r0, #10
   143ec:	movcc	r0, #10
   143f0:	orr	r4, r0, #1
   143f4:	cmn	r4, #1
   143f8:	beq	14420 <__assert_fail@plt+0x323c>
   143fc:	mov	r6, #9
   14400:	mov	r5, #3
   14404:	cmp	r4, r6
   14408:	bhi	14450 <__assert_fail@plt+0x326c>
   1440c:	mov	r1, r5
   14410:	mov	r0, r4
   14414:	bl	18068 <__assert_fail@plt+0x6e84>
   14418:	cmp	r1, #0
   1441c:	beq	14448 <__assert_fail@plt+0x3264>
   14420:	lsrs	r3, r4, #30
   14424:	movne	r3, #1
   14428:	moveq	r3, #0
   1442c:	tst	r4, #536870912	; 0x20000000
   14430:	bne	1443c <__assert_fail@plt+0x3258>
   14434:	cmp	r3, #0
   14438:	beq	14440 <__assert_fail@plt+0x325c>
   1443c:	mov	r4, #0
   14440:	mov	r0, r4
   14444:	pop	{r4, r5, r6, pc}
   14448:	add	r4, r4, #2
   1444c:	b	143f4 <__assert_fail@plt+0x3210>
   14450:	mov	r1, r5
   14454:	mov	r0, r4
   14458:	bl	18068 <__assert_fail@plt+0x6e84>
   1445c:	cmp	r1, #0
   14460:	beq	1440c <__assert_fail@plt+0x3228>
   14464:	add	r3, r5, #1
   14468:	add	r5, r5, #2
   1446c:	add	r6, r6, r3, lsl #2
   14470:	b	14404 <__assert_fail@plt+0x3220>
   14474:	svcmi	0x00800000
   14478:	ldr	r3, [r0]
   1447c:	ldr	r2, [pc, #160]	; 14524 <__assert_fail@plt+0x3340>
   14480:	cmp	r3, r2
   14484:	beq	1450c <__assert_fail@plt+0x3328>
   14488:	vldr	s14, [r3, #8]
   1448c:	vldr	s13, [pc, #128]	; 14514 <__assert_fail@plt+0x3330>
   14490:	vcmpe.f32	s14, s13
   14494:	vmrs	APSR_nzcv, fpscr
   14498:	ble	14500 <__assert_fail@plt+0x331c>
   1449c:	vldr	s15, [pc, #116]	; 14518 <__assert_fail@plt+0x3334>
   144a0:	vcmpe.f32	s14, s15
   144a4:	vmrs	APSR_nzcv, fpscr
   144a8:	bpl	14500 <__assert_fail@plt+0x331c>
   144ac:	vldr	s12, [r3, #12]
   144b0:	vldr	s15, [pc, #100]	; 1451c <__assert_fail@plt+0x3338>
   144b4:	vcmpe.f32	s12, s15
   144b8:	vmrs	APSR_nzcv, fpscr
   144bc:	ble	14500 <__assert_fail@plt+0x331c>
   144c0:	vldr	s15, [r3]
   144c4:	vcmpe.f32	s15, #0.0
   144c8:	vmrs	APSR_nzcv, fpscr
   144cc:	blt	14500 <__assert_fail@plt+0x331c>
   144d0:	vadd.f32	s15, s15, s13
   144d4:	vldr	s13, [r3, #4]
   144d8:	vcmpe.f32	s15, s13
   144dc:	vmrs	APSR_nzcv, fpscr
   144e0:	bpl	14500 <__assert_fail@plt+0x331c>
   144e4:	vldr	s12, [pc, #52]	; 14520 <__assert_fail@plt+0x333c>
   144e8:	vcmpe.f32	s13, s12
   144ec:	vmrs	APSR_nzcv, fpscr
   144f0:	bhi	14500 <__assert_fail@plt+0x331c>
   144f4:	vcmpe.f32	s14, s15
   144f8:	vmrs	APSR_nzcv, fpscr
   144fc:	bgt	1450c <__assert_fail@plt+0x3328>
   14500:	str	r2, [r0]
   14504:	mov	r0, #0
   14508:	bx	lr
   1450c:	mov	r0, #1
   14510:	bx	lr
   14514:	stclcc	12, cr12, [ip, #820]	; 0x334
   14518:	svccc	0x00666666
   1451c:	svccc	0x008ccccd
   14520:	svccc	0x00800000
   14524:	andeq	r8, r1, r0, lsl #31
   14528:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1452c:	mov	r5, r0
   14530:	ldr	r4, [r1]
   14534:	mov	r7, r1
   14538:	mov	r8, r2
   1453c:	add	r4, r4, #8
   14540:	mov	r9, #0
   14544:	mov	sl, #8
   14548:	ldr	r2, [r7, #4]
   1454c:	sub	r3, r4, #8
   14550:	cmp	r2, r3
   14554:	bhi	14564 <__assert_fail@plt+0x3380>
   14558:	mov	r8, #1
   1455c:	mov	r0, r8
   14560:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14564:	ldr	r3, [r4, #-8]
   14568:	cmp	r3, #0
   1456c:	ldrne	r6, [r4, #-4]
   14570:	bne	145c8 <__assert_fail@plt+0x33e4>
   14574:	add	r4, r4, #8
   14578:	b	14548 <__assert_fail@plt+0x3364>
   1457c:	ldr	fp, [r6]
   14580:	mov	r0, r5
   14584:	mov	r1, fp
   14588:	bl	1429c <__assert_fail@plt+0x30b8>
   1458c:	ldr	r1, [r6, #4]
   14590:	ldr	r2, [r0]
   14594:	cmp	r2, #0
   14598:	streq	fp, [r0]
   1459c:	ldreq	r3, [r5, #12]
   145a0:	ldrne	r3, [r0, #4]
   145a4:	addeq	r3, r3, #1
   145a8:	streq	r3, [r5, #12]
   145ac:	streq	r2, [r6]
   145b0:	ldreq	r3, [r5, #36]	; 0x24
   145b4:	strne	r3, [r6, #4]
   145b8:	streq	r3, [r6, #4]
   145bc:	strne	r6, [r0, #4]
   145c0:	streq	r6, [r5, #36]	; 0x24
   145c4:	mov	r6, r1
   145c8:	cmp	r6, #0
   145cc:	bne	1457c <__assert_fail@plt+0x3398>
   145d0:	cmp	r8, #0
   145d4:	ldr	fp, [r4, #-8]
   145d8:	str	r6, [r4, #-4]
   145dc:	bne	14574 <__assert_fail@plt+0x3390>
   145e0:	mov	r1, fp
   145e4:	mov	r0, r5
   145e8:	bl	1429c <__assert_fail@plt+0x30b8>
   145ec:	ldr	r3, [r0]
   145f0:	mov	r6, r0
   145f4:	cmp	r3, #0
   145f8:	beq	14644 <__assert_fail@plt+0x3460>
   145fc:	ldr	r0, [r5, #36]	; 0x24
   14600:	cmp	r0, #0
   14604:	ldrne	r3, [r0, #4]
   14608:	strne	r3, [r5, #36]	; 0x24
   1460c:	bne	14620 <__assert_fail@plt+0x343c>
   14610:	mov	r0, sl
   14614:	bl	17710 <__assert_fail@plt+0x652c>
   14618:	cmp	r0, #0
   1461c:	beq	1455c <__assert_fail@plt+0x3378>
   14620:	ldr	r3, [r6, #4]
   14624:	str	fp, [r0]
   14628:	str	r3, [r0, #4]
   1462c:	str	r0, [r6, #4]
   14630:	ldr	r3, [r7, #12]
   14634:	str	r9, [r4, #-8]
   14638:	sub	r3, r3, #1
   1463c:	str	r3, [r7, #12]
   14640:	b	14574 <__assert_fail@plt+0x3390>
   14644:	ldr	r3, [r5, #12]
   14648:	str	fp, [r0]
   1464c:	add	r3, r3, #1
   14650:	str	r3, [r5, #12]
   14654:	b	14630 <__assert_fail@plt+0x344c>
   14658:	ldr	r0, [r0, #8]
   1465c:	bx	lr
   14660:	ldr	r0, [r0, #12]
   14664:	bx	lr
   14668:	ldr	r0, [r0, #16]
   1466c:	bx	lr
   14670:	ldm	r0, {r3, ip}
   14674:	mov	r0, #0
   14678:	cmp	r3, ip
   1467c:	bcc	14684 <__assert_fail@plt+0x34a0>
   14680:	bx	lr
   14684:	ldr	r2, [r3]
   14688:	cmp	r2, #0
   1468c:	movne	r1, r3
   14690:	movne	r2, #1
   14694:	bne	146a4 <__assert_fail@plt+0x34c0>
   14698:	add	r3, r3, #8
   1469c:	b	14678 <__assert_fail@plt+0x3494>
   146a0:	add	r2, r2, #1
   146a4:	ldr	r1, [r1, #4]
   146a8:	cmp	r1, #0
   146ac:	bne	146a0 <__assert_fail@plt+0x34bc>
   146b0:	cmp	r0, r2
   146b4:	movcc	r0, r2
   146b8:	b	14698 <__assert_fail@plt+0x34b4>
   146bc:	push	{lr}		; (str lr, [sp, #-4]!)
   146c0:	mov	r3, #0
   146c4:	ldm	r0, {r2, lr}
   146c8:	mov	r1, r3
   146cc:	cmp	r2, lr
   146d0:	bcc	146f4 <__assert_fail@plt+0x3510>
   146d4:	ldr	r2, [r0, #12]
   146d8:	cmp	r1, r2
   146dc:	ldreq	r0, [r0, #16]
   146e0:	subeq	r0, r0, r3
   146e4:	clzeq	r0, r0
   146e8:	lsreq	r0, r0, #5
   146ec:	movne	r0, #0
   146f0:	pop	{pc}		; (ldr pc, [sp], #4)
   146f4:	ldr	ip, [r2]
   146f8:	cmp	ip, #0
   146fc:	addne	r1, r1, #1
   14700:	addne	r3, r3, #1
   14704:	movne	ip, r2
   14708:	bne	14718 <__assert_fail@plt+0x3534>
   1470c:	add	r2, r2, #8
   14710:	b	146cc <__assert_fail@plt+0x34e8>
   14714:	add	r3, r3, #1
   14718:	ldr	ip, [ip, #4]
   1471c:	cmp	ip, #0
   14720:	bne	14714 <__assert_fail@plt+0x3530>
   14724:	b	1470c <__assert_fail@plt+0x3528>
   14728:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1472c:	mov	r4, r1
   14730:	ldr	r5, [r0, #8]
   14734:	ldr	r7, [r0, #12]
   14738:	mov	r6, r0
   1473c:	bl	14670 <__assert_fail@plt+0x348c>
   14740:	ldr	r3, [r6, #16]
   14744:	ldr	r2, [pc, #124]	; 147c8 <__assert_fail@plt+0x35e4>
   14748:	mov	r1, #1
   1474c:	mov	r8, r0
   14750:	mov	r0, r4
   14754:	bl	110dc <__fprintf_chk@plt>
   14758:	mov	r3, r5
   1475c:	ldr	r2, [pc, #104]	; 147cc <__assert_fail@plt+0x35e8>
   14760:	mov	r1, #1
   14764:	mov	r0, r4
   14768:	bl	110dc <__fprintf_chk@plt>
   1476c:	vmov	s15, r7
   14770:	mov	r3, r7
   14774:	ldr	r2, [pc, #84]	; 147d0 <__assert_fail@plt+0x35ec>
   14778:	mov	r1, #1
   1477c:	vcvt.f64.u32	d6, s15
   14780:	vldr	d7, [pc, #56]	; 147c0 <__assert_fail@plt+0x35dc>
   14784:	mov	r0, r4
   14788:	vmul.f64	d6, d6, d7
   1478c:	vmov	s15, r5
   14790:	vcvt.f64.u32	d7, s15
   14794:	vdiv.f64	d5, d6, d7
   14798:	vstr	d5, [sp]
   1479c:	bl	110dc <__fprintf_chk@plt>
   147a0:	mov	r3, r8
   147a4:	ldr	r2, [pc, #40]	; 147d4 <__assert_fail@plt+0x35f0>
   147a8:	mov	r1, #1
   147ac:	mov	r0, r4
   147b0:	add	sp, sp, #8
   147b4:	pop	{r4, r5, r6, r7, r8, lr}
   147b8:	b	110dc <__fprintf_chk@plt>
   147bc:	nop			; (mov r0, r0)
   147c0:	andeq	r0, r0, r0
   147c4:	subsmi	r0, r9, r0
   147c8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   147cc:	andeq	r8, r1, ip, lsr #31
   147d0:	andeq	r8, r1, r4, asr #31
   147d4:	andeq	r8, r1, r5, ror #31
   147d8:	push	{r4, r5, r6, lr}
   147dc:	mov	r6, r0
   147e0:	mov	r5, r1
   147e4:	bl	1429c <__assert_fail@plt+0x30b8>
   147e8:	ldr	r3, [r0]
   147ec:	cmp	r3, #0
   147f0:	movne	r4, r0
   147f4:	bne	14820 <__assert_fail@plt+0x363c>
   147f8:	mov	r0, #0
   147fc:	pop	{r4, r5, r6, pc}
   14800:	ldr	r3, [r6, #28]
   14804:	mov	r0, r5
   14808:	blx	r3
   1480c:	cmp	r0, #0
   14810:	bne	1482c <__assert_fail@plt+0x3648>
   14814:	ldr	r4, [r4, #4]
   14818:	cmp	r4, #0
   1481c:	beq	147f8 <__assert_fail@plt+0x3614>
   14820:	ldr	r1, [r4]
   14824:	cmp	r5, r1
   14828:	bne	14800 <__assert_fail@plt+0x361c>
   1482c:	ldr	r0, [r4]
   14830:	pop	{r4, r5, r6, pc}
   14834:	ldr	r3, [r0, #16]
   14838:	cmp	r3, #0
   1483c:	beq	1486c <__assert_fail@plt+0x3688>
   14840:	ldr	r3, [r0]
   14844:	ldr	r2, [r0, #4]
   14848:	cmp	r3, r2
   1484c:	bcc	14858 <__assert_fail@plt+0x3674>
   14850:	push	{r4, lr}
   14854:	bl	111b4 <abort@plt>
   14858:	ldr	r0, [r3]
   1485c:	cmp	r0, #0
   14860:	bne	14870 <__assert_fail@plt+0x368c>
   14864:	add	r3, r3, #8
   14868:	b	14848 <__assert_fail@plt+0x3664>
   1486c:	mov	r0, r3
   14870:	bx	lr
   14874:	push	{r4, r5, r6, lr}
   14878:	mov	r4, r0
   1487c:	mov	r5, r1
   14880:	bl	1429c <__assert_fail@plt+0x30b8>
   14884:	mov	r2, r0
   14888:	mov	r3, r0
   1488c:	ldr	r1, [r3]
   14890:	ldr	r3, [r3, #4]
   14894:	cmp	r5, r1
   14898:	bne	148ac <__assert_fail@plt+0x36c8>
   1489c:	cmp	r3, #0
   148a0:	beq	148ac <__assert_fail@plt+0x36c8>
   148a4:	ldr	r0, [r3]
   148a8:	pop	{r4, r5, r6, pc}
   148ac:	cmp	r3, #0
   148b0:	bne	1488c <__assert_fail@plt+0x36a8>
   148b4:	ldr	r3, [r4, #4]
   148b8:	add	r2, r2, #8
   148bc:	cmp	r2, r3
   148c0:	bcc	148cc <__assert_fail@plt+0x36e8>
   148c4:	mov	r0, #0
   148c8:	pop	{r4, r5, r6, pc}
   148cc:	ldr	r0, [r2]
   148d0:	cmp	r0, #0
   148d4:	beq	148b8 <__assert_fail@plt+0x36d4>
   148d8:	pop	{r4, r5, r6, pc}
   148dc:	ldr	ip, [r0]
   148e0:	mov	r3, #0
   148e4:	push	{r4, r5, lr}
   148e8:	ldr	lr, [r0, #4]
   148ec:	cmp	ip, lr
   148f0:	bcc	148fc <__assert_fail@plt+0x3718>
   148f4:	mov	r0, r3
   148f8:	pop	{r4, r5, pc}
   148fc:	ldr	lr, [ip]
   14900:	cmp	lr, #0
   14904:	beq	14930 <__assert_fail@plt+0x374c>
   14908:	add	r4, r1, r3, lsl #2
   1490c:	mov	lr, ip
   14910:	cmp	r2, r3
   14914:	bls	148f4 <__assert_fail@plt+0x3710>
   14918:	ldr	r5, [lr]
   1491c:	add	r3, r3, #1
   14920:	str	r5, [r4], #4
   14924:	ldr	lr, [lr, #4]
   14928:	cmp	lr, #0
   1492c:	bne	14910 <__assert_fail@plt+0x372c>
   14930:	add	ip, ip, #8
   14934:	b	148e8 <__assert_fail@plt+0x3704>
   14938:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1493c:	mov	r7, r0
   14940:	ldr	r4, [r0]
   14944:	mov	r8, r1
   14948:	mov	r9, r2
   1494c:	mov	r6, #0
   14950:	ldr	r3, [r7, #4]
   14954:	cmp	r4, r3
   14958:	bcc	14964 <__assert_fail@plt+0x3780>
   1495c:	mov	r0, r6
   14960:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14964:	ldr	r3, [r4]
   14968:	cmp	r3, #0
   1496c:	beq	14998 <__assert_fail@plt+0x37b4>
   14970:	mov	r5, r4
   14974:	mov	r1, r9
   14978:	ldr	r0, [r5]
   1497c:	blx	r8
   14980:	cmp	r0, #0
   14984:	beq	1495c <__assert_fail@plt+0x3778>
   14988:	ldr	r5, [r5, #4]
   1498c:	add	r6, r6, #1
   14990:	cmp	r5, #0
   14994:	bne	14974 <__assert_fail@plt+0x3790>
   14998:	add	r4, r4, #8
   1499c:	b	14950 <__assert_fail@plt+0x376c>
   149a0:	push	{r4, r5, r6, lr}
   149a4:	sub	r4, r0, #1
   149a8:	mov	r5, r1
   149ac:	mov	r0, #0
   149b0:	mov	r6, #31
   149b4:	ldrb	r3, [r4, #1]!
   149b8:	cmp	r3, #0
   149bc:	bne	149c4 <__assert_fail@plt+0x37e0>
   149c0:	pop	{r4, r5, r6, pc}
   149c4:	mov	r1, r5
   149c8:	mla	r0, r6, r0, r3
   149cc:	bl	18068 <__assert_fail@plt+0x6e84>
   149d0:	mov	r0, r1
   149d4:	b	149b4 <__assert_fail@plt+0x37d0>
   149d8:	push	{lr}		; (str lr, [sp, #-4]!)
   149dc:	mov	ip, r0
   149e0:	ldr	lr, [pc, #16]	; 149f8 <__assert_fail@plt+0x3814>
   149e4:	ldm	lr!, {r0, r1, r2, r3}
   149e8:	stmia	ip!, {r0, r1, r2, r3}
   149ec:	ldr	r3, [lr]
   149f0:	str	r3, [ip]
   149f4:	pop	{pc}		; (ldr pc, [sp], #4)
   149f8:	andeq	r8, r1, r0, lsl #31
   149fc:	cmp	r2, #0
   14a00:	push	{r4, r5, r6, r7, r8, lr}
   14a04:	mov	r8, r0
   14a08:	ldr	r7, [pc, #176]	; 14ac0 <__assert_fail@plt+0x38dc>
   14a0c:	mov	r0, #40	; 0x28
   14a10:	movne	r7, r2
   14a14:	cmp	r3, #0
   14a18:	mov	r5, r1
   14a1c:	ldr	r6, [pc, #160]	; 14ac4 <__assert_fail@plt+0x38e0>
   14a20:	movne	r6, r3
   14a24:	bl	17710 <__assert_fail@plt+0x652c>
   14a28:	subs	r4, r0, #0
   14a2c:	beq	14aa8 <__assert_fail@plt+0x38c4>
   14a30:	ldr	r3, [pc, #144]	; 14ac8 <__assert_fail@plt+0x38e4>
   14a34:	cmp	r5, #0
   14a38:	mov	r0, r4
   14a3c:	moveq	r5, r3
   14a40:	str	r5, [r0, #20]!
   14a44:	bl	14478 <__assert_fail@plt+0x3294>
   14a48:	cmp	r0, #0
   14a4c:	beq	14ab0 <__assert_fail@plt+0x38cc>
   14a50:	mov	r1, r5
   14a54:	mov	r0, r8
   14a58:	bl	143b0 <__assert_fail@plt+0x31cc>
   14a5c:	cmp	r0, #0
   14a60:	str	r0, [r4, #8]
   14a64:	beq	14ab0 <__assert_fail@plt+0x38cc>
   14a68:	mov	r1, #8
   14a6c:	bl	176c8 <__assert_fail@plt+0x64e4>
   14a70:	cmp	r0, #0
   14a74:	str	r0, [r4]
   14a78:	beq	14ab0 <__assert_fail@plt+0x38cc>
   14a7c:	ldr	r3, [r4, #8]
   14a80:	ldr	r2, [sp, #24]
   14a84:	str	r7, [r4, #24]
   14a88:	add	r0, r0, r3, lsl #3
   14a8c:	mov	r3, #0
   14a90:	str	r0, [r4, #4]
   14a94:	str	r3, [r4, #12]
   14a98:	str	r3, [r4, #16]
   14a9c:	str	r6, [r4, #28]
   14aa0:	str	r2, [r4, #32]
   14aa4:	str	r3, [r4, #36]	; 0x24
   14aa8:	mov	r0, r4
   14aac:	pop	{r4, r5, r6, r7, r8, pc}
   14ab0:	mov	r0, r4
   14ab4:	bl	17bd8 <__assert_fail@plt+0x69f4>
   14ab8:	mov	r4, #0
   14abc:	b	14aa8 <__assert_fail@plt+0x38c4>
   14ac0:	andeq	r4, r1, r8, ror r2
   14ac4:	andeq	r4, r1, ip, lsl #5
   14ac8:	andeq	r8, r1, r0, lsl #31
   14acc:	push	{r4, r5, r6, r7, r8, lr}
   14ad0:	mov	r5, r0
   14ad4:	ldr	r4, [r0]
   14ad8:	mov	r7, #0
   14adc:	add	r4, r4, #8
   14ae0:	ldr	r2, [r5, #4]
   14ae4:	sub	r3, r4, #8
   14ae8:	cmp	r2, r3
   14aec:	bhi	14b00 <__assert_fail@plt+0x391c>
   14af0:	mov	r3, #0
   14af4:	str	r3, [r5, #12]
   14af8:	str	r3, [r5, #16]
   14afc:	pop	{r4, r5, r6, r7, r8, pc}
   14b00:	ldr	r3, [r4, #-8]
   14b04:	cmp	r3, #0
   14b08:	ldrne	r6, [r4, #-4]
   14b0c:	bne	14b40 <__assert_fail@plt+0x395c>
   14b10:	add	r4, r4, #8
   14b14:	b	14ae0 <__assert_fail@plt+0x38fc>
   14b18:	cmp	r3, #0
   14b1c:	beq	14b28 <__assert_fail@plt+0x3944>
   14b20:	ldr	r0, [r6]
   14b24:	blx	r3
   14b28:	ldr	r3, [r6, #4]
   14b2c:	ldr	r2, [r5, #36]	; 0x24
   14b30:	str	r7, [r6]
   14b34:	str	r2, [r6, #4]
   14b38:	str	r6, [r5, #36]	; 0x24
   14b3c:	mov	r6, r3
   14b40:	cmp	r6, #0
   14b44:	ldr	r3, [r5, #32]
   14b48:	bne	14b18 <__assert_fail@plt+0x3934>
   14b4c:	cmp	r3, #0
   14b50:	beq	14b5c <__assert_fail@plt+0x3978>
   14b54:	ldr	r0, [r4, #-8]
   14b58:	blx	r3
   14b5c:	str	r7, [r4, #-8]
   14b60:	str	r7, [r4, #-4]
   14b64:	b	14b10 <__assert_fail@plt+0x392c>
   14b68:	ldr	r3, [r0, #32]
   14b6c:	push	{r4, r5, r6, lr}
   14b70:	cmp	r3, #0
   14b74:	mov	r4, r0
   14b78:	bne	14bac <__assert_fail@plt+0x39c8>
   14b7c:	ldr	r5, [r4]
   14b80:	ldr	r3, [r4, #4]
   14b84:	cmp	r5, r3
   14b88:	bcc	14bfc <__assert_fail@plt+0x3a18>
   14b8c:	ldr	r0, [r4, #36]	; 0x24
   14b90:	cmp	r0, #0
   14b94:	bne	14c1c <__assert_fail@plt+0x3a38>
   14b98:	ldr	r0, [r4]
   14b9c:	bl	17bd8 <__assert_fail@plt+0x69f4>
   14ba0:	mov	r0, r4
   14ba4:	pop	{r4, r5, r6, lr}
   14ba8:	b	17bd8 <__assert_fail@plt+0x69f4>
   14bac:	ldr	r3, [r0, #16]
   14bb0:	cmp	r3, #0
   14bb4:	ldrne	r5, [r0]
   14bb8:	beq	14b7c <__assert_fail@plt+0x3998>
   14bbc:	ldr	r3, [r4, #4]
   14bc0:	cmp	r5, r3
   14bc4:	bcs	14b7c <__assert_fail@plt+0x3998>
   14bc8:	ldr	r3, [r5]
   14bcc:	cmp	r3, #0
   14bd0:	movne	r6, r5
   14bd4:	bne	14be0 <__assert_fail@plt+0x39fc>
   14bd8:	add	r5, r5, #8
   14bdc:	b	14bbc <__assert_fail@plt+0x39d8>
   14be0:	ldr	r0, [r6]
   14be4:	ldr	r3, [r4, #32]
   14be8:	blx	r3
   14bec:	ldr	r6, [r6, #4]
   14bf0:	cmp	r6, #0
   14bf4:	bne	14be0 <__assert_fail@plt+0x39fc>
   14bf8:	b	14bd8 <__assert_fail@plt+0x39f4>
   14bfc:	ldr	r0, [r5, #4]
   14c00:	cmp	r0, #0
   14c04:	addeq	r5, r5, #8
   14c08:	beq	14b80 <__assert_fail@plt+0x399c>
   14c0c:	ldr	r6, [r0, #4]
   14c10:	bl	17bd8 <__assert_fail@plt+0x69f4>
   14c14:	mov	r0, r6
   14c18:	b	14c00 <__assert_fail@plt+0x3a1c>
   14c1c:	ldr	r5, [r0, #4]
   14c20:	bl	17bd8 <__assert_fail@plt+0x69f4>
   14c24:	mov	r0, r5
   14c28:	b	14b90 <__assert_fail@plt+0x39ac>
   14c2c:	push	{r4, r5, lr}
   14c30:	mov	r4, r0
   14c34:	sub	sp, sp, #44	; 0x2c
   14c38:	mov	r0, r1
   14c3c:	ldr	r1, [r4, #20]
   14c40:	bl	143b0 <__assert_fail@plt+0x31cc>
   14c44:	subs	r5, r0, #0
   14c48:	bne	14c5c <__assert_fail@plt+0x3a78>
   14c4c:	mov	r5, #0
   14c50:	mov	r0, r5
   14c54:	add	sp, sp, #44	; 0x2c
   14c58:	pop	{r4, r5, pc}
   14c5c:	ldr	r3, [r4, #8]
   14c60:	cmp	r5, r3
   14c64:	beq	14d4c <__assert_fail@plt+0x3b68>
   14c68:	mov	r1, #8
   14c6c:	bl	176c8 <__assert_fail@plt+0x64e4>
   14c70:	cmp	r0, #0
   14c74:	str	r0, [sp]
   14c78:	beq	14c4c <__assert_fail@plt+0x3a68>
   14c7c:	ldr	r3, [r4, #20]
   14c80:	add	r0, r0, r5, lsl #3
   14c84:	str	r3, [sp, #20]
   14c88:	ldr	r3, [r4, #24]
   14c8c:	mov	r2, #0
   14c90:	str	r3, [sp, #24]
   14c94:	ldr	r3, [r4, #28]
   14c98:	str	r0, [sp, #4]
   14c9c:	str	r3, [sp, #28]
   14ca0:	ldr	r3, [r4, #32]
   14ca4:	mov	r1, r4
   14ca8:	str	r3, [sp, #32]
   14cac:	ldr	r3, [r4, #36]	; 0x24
   14cb0:	mov	r0, sp
   14cb4:	str	r5, [sp, #8]
   14cb8:	str	r2, [sp, #12]
   14cbc:	str	r2, [sp, #16]
   14cc0:	str	r3, [sp, #36]	; 0x24
   14cc4:	bl	14528 <__assert_fail@plt+0x3344>
   14cc8:	subs	r5, r0, #0
   14ccc:	beq	14d04 <__assert_fail@plt+0x3b20>
   14cd0:	ldr	r0, [r4]
   14cd4:	bl	17bd8 <__assert_fail@plt+0x69f4>
   14cd8:	ldr	r3, [sp]
   14cdc:	str	r3, [r4]
   14ce0:	ldr	r3, [sp, #4]
   14ce4:	str	r3, [r4, #4]
   14ce8:	ldr	r3, [sp, #8]
   14cec:	str	r3, [r4, #8]
   14cf0:	ldr	r3, [sp, #12]
   14cf4:	str	r3, [r4, #12]
   14cf8:	ldr	r3, [sp, #36]	; 0x24
   14cfc:	str	r3, [r4, #36]	; 0x24
   14d00:	b	14c50 <__assert_fail@plt+0x3a6c>
   14d04:	ldr	r3, [sp, #36]	; 0x24
   14d08:	mov	r2, #1
   14d0c:	str	r3, [r4, #36]	; 0x24
   14d10:	mov	r1, sp
   14d14:	mov	r0, r4
   14d18:	bl	14528 <__assert_fail@plt+0x3344>
   14d1c:	cmp	r0, #0
   14d20:	bne	14d28 <__assert_fail@plt+0x3b44>
   14d24:	bl	111b4 <abort@plt>
   14d28:	mov	r2, r5
   14d2c:	mov	r1, sp
   14d30:	mov	r0, r4
   14d34:	bl	14528 <__assert_fail@plt+0x3344>
   14d38:	cmp	r0, #0
   14d3c:	beq	14d24 <__assert_fail@plt+0x3b40>
   14d40:	ldr	r0, [sp]
   14d44:	bl	17bd8 <__assert_fail@plt+0x69f4>
   14d48:	b	14c50 <__assert_fail@plt+0x3a6c>
   14d4c:	mov	r5, #1
   14d50:	b	14c50 <__assert_fail@plt+0x3a6c>
   14d54:	push	{r0, r1, r4, r5, r6, lr}
   14d58:	subs	r6, r1, #0
   14d5c:	bne	14d64 <__assert_fail@plt+0x3b80>
   14d60:	bl	111b4 <abort@plt>
   14d64:	mov	r5, r2
   14d68:	mov	r3, #0
   14d6c:	add	r2, sp, #4
   14d70:	mov	r4, r0
   14d74:	bl	142d0 <__assert_fail@plt+0x30ec>
   14d78:	cmp	r0, #0
   14d7c:	beq	14d94 <__assert_fail@plt+0x3bb0>
   14d80:	cmp	r5, #0
   14d84:	strne	r0, [r5]
   14d88:	movne	r0, #0
   14d8c:	moveq	r0, r5
   14d90:	b	14e14 <__assert_fail@plt+0x3c30>
   14d94:	vldr	s15, [r4, #12]
   14d98:	ldr	r3, [r4, #20]
   14d9c:	vcvt.f32.u32	s14, s15
   14da0:	vldr	s15, [r4, #8]
   14da4:	vldr	s13, [r3, #8]
   14da8:	vcvt.f32.u32	s15, s15
   14dac:	vmul.f32	s15, s15, s13
   14db0:	vcmpe.f32	s14, s15
   14db4:	vmrs	APSR_nzcv, fpscr
   14db8:	ble	14e50 <__assert_fail@plt+0x3c6c>
   14dbc:	add	r0, r4, #20
   14dc0:	bl	14478 <__assert_fail@plt+0x3294>
   14dc4:	vldr	s15, [r4, #8]
   14dc8:	ldr	r3, [r4, #20]
   14dcc:	vldr	s14, [r4, #12]
   14dd0:	vcvt.f32.u32	s15, s15
   14dd4:	vldr	s13, [r3, #8]
   14dd8:	vcvt.f32.u32	s14, s14
   14ddc:	vmul.f32	s12, s13, s15
   14de0:	vcmpe.f32	s14, s12
   14de4:	vmrs	APSR_nzcv, fpscr
   14de8:	ble	14e50 <__assert_fail@plt+0x3c6c>
   14dec:	vldr	s14, [r3, #12]
   14df0:	ldrb	r2, [r3, #16]
   14df4:	vmul.f32	s15, s15, s14
   14df8:	cmp	r2, #0
   14dfc:	vldr	s14, [pc, #200]	; 14ecc <__assert_fail@plt+0x3ce8>
   14e00:	vmuleq.f32	s15, s15, s13
   14e04:	vcmpe.f32	s15, s14
   14e08:	vmrs	APSR_nzcv, fpscr
   14e0c:	blt	14e1c <__assert_fail@plt+0x3c38>
   14e10:	mvn	r0, #0
   14e14:	add	sp, sp, #8
   14e18:	pop	{r4, r5, r6, pc}
   14e1c:	vcvt.u32.f32	s15, s15
   14e20:	mov	r0, r4
   14e24:	vmov	r1, s15
   14e28:	bl	14c2c <__assert_fail@plt+0x3a48>
   14e2c:	cmp	r0, #0
   14e30:	beq	14e10 <__assert_fail@plt+0x3c2c>
   14e34:	mov	r3, #0
   14e38:	add	r2, sp, #4
   14e3c:	mov	r1, r6
   14e40:	mov	r0, r4
   14e44:	bl	142d0 <__assert_fail@plt+0x30ec>
   14e48:	cmp	r0, #0
   14e4c:	bne	14d60 <__assert_fail@plt+0x3b7c>
   14e50:	ldr	r3, [sp, #4]
   14e54:	ldr	r2, [r3]
   14e58:	cmp	r2, #0
   14e5c:	beq	14eac <__assert_fail@plt+0x3cc8>
   14e60:	ldr	r0, [r4, #36]	; 0x24
   14e64:	cmp	r0, #0
   14e68:	ldrne	r3, [r0, #4]
   14e6c:	strne	r3, [r4, #36]	; 0x24
   14e70:	bne	14e84 <__assert_fail@plt+0x3ca0>
   14e74:	mov	r0, #8
   14e78:	bl	17710 <__assert_fail@plt+0x652c>
   14e7c:	cmp	r0, #0
   14e80:	beq	14e10 <__assert_fail@plt+0x3c2c>
   14e84:	ldr	r3, [sp, #4]
   14e88:	str	r6, [r0]
   14e8c:	ldr	r2, [r3, #4]
   14e90:	str	r2, [r0, #4]
   14e94:	str	r0, [r3, #4]
   14e98:	ldr	r3, [r4, #16]
   14e9c:	add	r3, r3, #1
   14ea0:	str	r3, [r4, #16]
   14ea4:	mov	r0, #1
   14ea8:	b	14e14 <__assert_fail@plt+0x3c30>
   14eac:	str	r6, [r3]
   14eb0:	ldr	r3, [r4, #16]
   14eb4:	add	r3, r3, #1
   14eb8:	str	r3, [r4, #16]
   14ebc:	ldr	r3, [r4, #12]
   14ec0:	add	r3, r3, #1
   14ec4:	str	r3, [r4, #12]
   14ec8:	b	14ea4 <__assert_fail@plt+0x3cc0>
   14ecc:	svcmi	0x00800000
   14ed0:	push	{r0, r1, r4, lr}
   14ed4:	add	r2, sp, #4
   14ed8:	mov	r4, r1
   14edc:	bl	14d54 <__assert_fail@plt+0x3b70>
   14ee0:	cmn	r0, #1
   14ee4:	moveq	r0, #0
   14ee8:	beq	14ef8 <__assert_fail@plt+0x3d14>
   14eec:	cmp	r0, #0
   14ef0:	movne	r0, r4
   14ef4:	ldreq	r0, [sp, #4]
   14ef8:	add	sp, sp, #8
   14efc:	pop	{r4, pc}
   14f00:	push	{r0, r1, r4, r5, r6, lr}
   14f04:	mov	r3, #1
   14f08:	add	r2, sp, #4
   14f0c:	mov	r4, r0
   14f10:	bl	142d0 <__assert_fail@plt+0x30ec>
   14f14:	subs	r5, r0, #0
   14f18:	beq	14fd0 <__assert_fail@plt+0x3dec>
   14f1c:	ldr	r3, [r4, #16]
   14f20:	sub	r3, r3, #1
   14f24:	str	r3, [r4, #16]
   14f28:	ldr	r3, [sp, #4]
   14f2c:	ldr	r3, [r3]
   14f30:	cmp	r3, #0
   14f34:	bne	14fd0 <__assert_fail@plt+0x3dec>
   14f38:	vldr	s14, [r4, #8]
   14f3c:	ldr	r3, [r4, #12]
   14f40:	sub	r3, r3, #1
   14f44:	vcvt.f32.u32	s14, s14
   14f48:	vmov	s15, r3
   14f4c:	str	r3, [r4, #12]
   14f50:	ldr	r3, [r4, #20]
   14f54:	vcvt.f32.u32	s15, s15
   14f58:	vldr	s13, [r3]
   14f5c:	vmul.f32	s14, s14, s13
   14f60:	vcmpe.f32	s15, s14
   14f64:	vmrs	APSR_nzcv, fpscr
   14f68:	bpl	14fd0 <__assert_fail@plt+0x3dec>
   14f6c:	add	r0, r4, #20
   14f70:	bl	14478 <__assert_fail@plt+0x3294>
   14f74:	vldr	s15, [r4, #8]
   14f78:	vldr	s14, [r4, #12]
   14f7c:	ldr	r3, [r4, #20]
   14f80:	vcvt.f32.u32	s15, s15
   14f84:	vcvt.f32.u32	s13, s14
   14f88:	vldr	s14, [r3]
   14f8c:	vmul.f32	s14, s15, s14
   14f90:	vcmpe.f32	s13, s14
   14f94:	vmrs	APSR_nzcv, fpscr
   14f98:	bpl	14fd0 <__assert_fail@plt+0x3dec>
   14f9c:	vldr	s14, [r3, #4]
   14fa0:	ldrb	r2, [r3, #16]
   14fa4:	mov	r0, r4
   14fa8:	vmul.f32	s15, s15, s14
   14fac:	cmp	r2, #0
   14fb0:	vldreq	s14, [r3, #8]
   14fb4:	vmuleq.f32	s15, s15, s14
   14fb8:	vcvt.u32.f32	s15, s15
   14fbc:	vmov	r1, s15
   14fc0:	bl	14c2c <__assert_fail@plt+0x3a48>
   14fc4:	cmp	r0, #0
   14fc8:	ldreq	r0, [r4, #36]	; 0x24
   14fcc:	beq	14fe8 <__assert_fail@plt+0x3e04>
   14fd0:	mov	r0, r5
   14fd4:	add	sp, sp, #8
   14fd8:	pop	{r4, r5, r6, pc}
   14fdc:	ldr	r6, [r0, #4]
   14fe0:	bl	17bd8 <__assert_fail@plt+0x69f4>
   14fe4:	mov	r0, r6
   14fe8:	cmp	r0, #0
   14fec:	bne	14fdc <__assert_fail@plt+0x3df8>
   14ff0:	str	r0, [r4, #36]	; 0x24
   14ff4:	b	14fd0 <__assert_fail@plt+0x3dec>
   14ff8:	b	14f00 <__assert_fail@plt+0x3d1c>
   14ffc:	mov	r3, #1
   15000:	strb	r3, [r0, #28]
   15004:	mov	r3, #0
   15008:	str	r3, [r0, #20]
   1500c:	str	r3, [r0, #24]
   15010:	str	r1, [r0]
   15014:	str	r1, [r0, #4]
   15018:	str	r1, [r0, #8]
   1501c:	str	r1, [r0, #12]
   15020:	str	r1, [r0, #16]
   15024:	bx	lr
   15028:	ldrb	r0, [r0, #28]
   1502c:	bx	lr
   15030:	ldrb	ip, [r0, #28]
   15034:	ldr	r3, [r0, #20]
   15038:	mov	r2, r0
   1503c:	eor	ip, ip, #1
   15040:	add	r3, ip, r3
   15044:	and	r3, r3, #3
   15048:	ldr	r0, [r0, r3, lsl #2]
   1504c:	str	r1, [r2, r3, lsl #2]
   15050:	ldr	r1, [r2, #24]
   15054:	str	r3, [r2, #20]
   15058:	cmp	r3, r1
   1505c:	addeq	r3, ip, r3
   15060:	andeq	r3, r3, #3
   15064:	streq	r3, [r2, #24]
   15068:	mov	r3, #0
   1506c:	strb	r3, [r2, #28]
   15070:	bx	lr
   15074:	ldrb	r2, [r0, #28]
   15078:	cmp	r2, #0
   1507c:	beq	15088 <__assert_fail@plt+0x3ea4>
   15080:	push	{r4, lr}
   15084:	bl	111b4 <abort@plt>
   15088:	mov	r3, r0
   1508c:	ldr	r2, [r0, #20]
   15090:	ldr	r1, [r3, #16]
   15094:	ldr	r0, [r0, r2, lsl #2]
   15098:	str	r1, [r3, r2, lsl #2]
   1509c:	ldr	r1, [r3, #24]
   150a0:	cmp	r2, r1
   150a4:	addne	r2, r2, #3
   150a8:	moveq	r2, #1
   150ac:	andne	r2, r2, #3
   150b0:	strbeq	r2, [r3, #28]
   150b4:	strne	r2, [r3, #20]
   150b8:	bx	lr
   150bc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150c0:	mov	r4, r0
   150c4:	ldrb	r3, [r0]
   150c8:	sub	r3, r3, #48	; 0x30
   150cc:	cmp	r3, #7
   150d0:	subhi	r3, r0, #1
   150d4:	movhi	r0, #1
   150d8:	bhi	15178 <__assert_fail@plt+0x3f94>
   150dc:	ldr	r0, [pc, #740]	; 153c8 <__assert_fail@plt+0x41e4>
   150e0:	mov	r2, r4
   150e4:	mov	r5, #0
   150e8:	ldrb	r3, [r2], #1
   150ec:	lsl	r5, r5, #3
   150f0:	sub	r5, r5, #48	; 0x30
   150f4:	add	r5, r3, r5
   150f8:	cmp	r5, r0
   150fc:	bhi	153c0 <__assert_fail@plt+0x41dc>
   15100:	ldrb	r3, [r2]
   15104:	sub	r1, r3, #48	; 0x30
   15108:	cmp	r1, #7
   1510c:	bls	150e8 <__assert_fail@plt+0x3f04>
   15110:	cmp	r3, #0
   15114:	bne	153c0 <__assert_fail@plt+0x41dc>
   15118:	sub	r2, r2, r4
   1511c:	cmp	r2, #4
   15120:	andle	r4, r5, #3072	; 0xc00
   15124:	mov	r0, #32
   15128:	mvnle	r4, r4, lsr #10
   1512c:	ldrgt	r4, [pc, #660]	; 153c8 <__assert_fail@plt+0x41e4>
   15130:	mvnle	r4, r4, lsl #10
   15134:	bl	17174 <__assert_fail@plt+0x5f90>
   15138:	mov	r3, #61	; 0x3d
   1513c:	strb	r3, [r0]
   15140:	mov	r3, #1
   15144:	strb	r3, [r0, #1]
   15148:	ldr	r3, [pc, #632]	; 153c8 <__assert_fail@plt+0x41e4>
   1514c:	str	r4, [r0, #12]
   15150:	stmib	r0, {r3, r5}
   15154:	mov	r3, #0
   15158:	strb	r3, [r0, #17]
   1515c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15160:	and	ip, r5, #239	; 0xef
   15164:	cmp	r5, #43	; 0x2b
   15168:	cmpne	ip, #45	; 0x2d
   1516c:	moveq	ip, #1
   15170:	movne	ip, #0
   15174:	add	r0, r0, ip
   15178:	ldrb	r5, [r3, #1]!
   1517c:	cmp	r5, #0
   15180:	bne	15160 <__assert_fail@plt+0x3f7c>
   15184:	mov	r1, #16
   15188:	ldr	sl, [pc, #568]	; 153c8 <__assert_fail@plt+0x41e4>
   1518c:	bl	1724c <__assert_fail@plt+0x6068>
   15190:	mov	ip, r5
   15194:	mov	r1, #0
   15198:	mov	r2, r4
   1519c:	add	r4, r4, #1
   151a0:	ldrb	r3, [r2]
   151a4:	cmp	r3, #97	; 0x61
   151a8:	beq	15274 <__assert_fail@plt+0x4090>
   151ac:	bhi	1523c <__assert_fail@plt+0x4058>
   151b0:	cmp	r3, #45	; 0x2d
   151b4:	beq	151c8 <__assert_fail@plt+0x3fe4>
   151b8:	cmp	r3, #61	; 0x3d
   151bc:	beq	151c8 <__assert_fail@plt+0x3fe4>
   151c0:	cmp	r3, #43	; 0x2b
   151c4:	bne	153bc <__assert_fail@plt+0x41d8>
   151c8:	add	lr, r0, ip, lsl #4
   151cc:	mov	r8, #3
   151d0:	mov	r7, #0
   151d4:	mov	r9, #1
   151d8:	ldrb	r3, [r2, #1]
   151dc:	add	r5, r2, #1
   151e0:	ldrb	fp, [r2]
   151e4:	cmp	r3, #103	; 0x67
   151e8:	beq	15338 <__assert_fail@plt+0x4154>
   151ec:	bhi	1527c <__assert_fail@plt+0x4098>
   151f0:	sub	r3, r3, #48	; 0x30
   151f4:	cmp	r3, #7
   151f8:	movls	r3, #0
   151fc:	movls	r2, r5
   15200:	bls	152a0 <__assert_fail@plt+0x40bc>
   15204:	mov	r4, r9
   15208:	mov	r3, #0
   1520c:	mov	r2, r5
   15210:	add	r5, r5, #1
   15214:	ldrb	r6, [r2]
   15218:	cmp	r6, #115	; 0x73
   1521c:	beq	15398 <__assert_fail@plt+0x41b4>
   15220:	bhi	15360 <__assert_fail@plt+0x417c>
   15224:	cmp	r6, #88	; 0x58
   15228:	beq	153a0 <__assert_fail@plt+0x41bc>
   1522c:	cmp	r6, #114	; 0x72
   15230:	beq	15380 <__assert_fail@plt+0x419c>
   15234:	mov	r5, r7
   15238:	b	152e8 <__assert_fail@plt+0x4104>
   1523c:	cmp	r3, #111	; 0x6f
   15240:	beq	15268 <__assert_fail@plt+0x4084>
   15244:	cmp	r3, #117	; 0x75
   15248:	beq	15260 <__assert_fail@plt+0x407c>
   1524c:	cmp	r3, #103	; 0x67
   15250:	bne	153bc <__assert_fail@plt+0x41d8>
   15254:	orr	r1, r1, #1072	; 0x430
   15258:	orr	r1, r1, #8
   1525c:	b	15198 <__assert_fail@plt+0x3fb4>
   15260:	orr	r1, r1, #2496	; 0x9c0
   15264:	b	15198 <__assert_fail@plt+0x3fb4>
   15268:	orr	r1, r1, #516	; 0x204
   1526c:	orr	r1, r1, #3
   15270:	b	15198 <__assert_fail@plt+0x3fb4>
   15274:	ldr	r1, [pc, #332]	; 153c8 <__assert_fail@plt+0x41e4>
   15278:	b	15198 <__assert_fail@plt+0x3fb4>
   1527c:	cmp	r3, #111	; 0x6f
   15280:	beq	1534c <__assert_fail@plt+0x4168>
   15284:	cmp	r3, #117	; 0x75
   15288:	bne	15204 <__assert_fail@plt+0x4020>
   1528c:	add	r2, r2, #2
   15290:	mov	r4, r8
   15294:	mov	r5, r7
   15298:	mov	r3, #448	; 0x1c0
   1529c:	b	152e8 <__assert_fail@plt+0x4104>
   152a0:	ldrb	r4, [r2], #1
   152a4:	lsl	r3, r3, #3
   152a8:	sub	r3, r3, #48	; 0x30
   152ac:	add	r3, r4, r3
   152b0:	cmp	r3, sl
   152b4:	bhi	153bc <__assert_fail@plt+0x41d8>
   152b8:	ldrb	r4, [r2]
   152bc:	sub	r5, r4, #48	; 0x30
   152c0:	cmp	r5, #7
   152c4:	bls	152a0 <__assert_fail@plt+0x40bc>
   152c8:	cmp	r1, #0
   152cc:	bne	153bc <__assert_fail@plt+0x41d8>
   152d0:	cmp	r4, #0
   152d4:	cmpne	r4, #44	; 0x2c
   152d8:	bne	153bc <__assert_fail@plt+0x41d8>
   152dc:	ldr	r1, [pc, #228]	; 153c8 <__assert_fail@plt+0x41e4>
   152e0:	mov	r4, r9
   152e4:	mov	r5, r1
   152e8:	cmp	r5, #0
   152ec:	stmib	lr, {r1, r3}
   152f0:	add	ip, ip, #1
   152f4:	strb	fp, [lr]
   152f8:	strb	r4, [lr, #1]
   152fc:	movne	r3, r5
   15300:	bne	1530c <__assert_fail@plt+0x4128>
   15304:	cmp	r1, #0
   15308:	andne	r3, r3, r1
   1530c:	str	r3, [lr, #12]
   15310:	ldrb	r3, [r2]
   15314:	add	lr, lr, #16
   15318:	and	r4, r3, #239	; 0xef
   1531c:	cmp	r3, #43	; 0x2b
   15320:	cmpne	r4, #45	; 0x2d
   15324:	beq	151d8 <__assert_fail@plt+0x3ff4>
   15328:	cmp	r3, #44	; 0x2c
   1532c:	bne	153a8 <__assert_fail@plt+0x41c4>
   15330:	add	r4, r2, #1
   15334:	b	15194 <__assert_fail@plt+0x3fb0>
   15338:	add	r2, r2, #2
   1533c:	mov	r4, r8
   15340:	mov	r5, r7
   15344:	mov	r3, #56	; 0x38
   15348:	b	152e8 <__assert_fail@plt+0x4104>
   1534c:	add	r2, r2, #2
   15350:	mov	r4, r8
   15354:	mov	r5, r7
   15358:	mov	r3, #7
   1535c:	b	152e8 <__assert_fail@plt+0x4104>
   15360:	cmp	r6, #119	; 0x77
   15364:	beq	15388 <__assert_fail@plt+0x41a4>
   15368:	cmp	r6, #120	; 0x78
   1536c:	beq	15390 <__assert_fail@plt+0x41ac>
   15370:	cmp	r6, #116	; 0x74
   15374:	bne	15234 <__assert_fail@plt+0x4050>
   15378:	orr	r3, r3, #512	; 0x200
   1537c:	b	1520c <__assert_fail@plt+0x4028>
   15380:	orr	r3, r3, #292	; 0x124
   15384:	b	1520c <__assert_fail@plt+0x4028>
   15388:	orr	r3, r3, #146	; 0x92
   1538c:	b	1520c <__assert_fail@plt+0x4028>
   15390:	orr	r3, r3, #73	; 0x49
   15394:	b	1520c <__assert_fail@plt+0x4028>
   15398:	orr	r3, r3, #3072	; 0xc00
   1539c:	b	1520c <__assert_fail@plt+0x4028>
   153a0:	mov	r4, #2
   153a4:	b	1520c <__assert_fail@plt+0x4028>
   153a8:	cmp	r3, #0
   153ac:	bne	153bc <__assert_fail@plt+0x41d8>
   153b0:	add	ip, r0, ip, lsl #4
   153b4:	strb	r3, [ip, #1]
   153b8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153bc:	bl	17bd8 <__assert_fail@plt+0x69f4>
   153c0:	mov	r0, #0
   153c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153c8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   153cc:	push	{r4, r5, lr}
   153d0:	sub	sp, sp, #108	; 0x6c
   153d4:	mov	r1, sp
   153d8:	bl	184b8 <__assert_fail@plt+0x72d4>
   153dc:	subs	r4, r0, #0
   153e0:	movne	r0, #0
   153e4:	bne	15414 <__assert_fail@plt+0x4230>
   153e8:	mov	r0, #32
   153ec:	ldr	r5, [sp, #16]
   153f0:	bl	17174 <__assert_fail@plt+0x5f90>
   153f4:	mov	r3, #61	; 0x3d
   153f8:	strb	r3, [r0]
   153fc:	mov	r3, #1
   15400:	strb	r3, [r0, #1]
   15404:	ldr	r3, [pc, #16]	; 1541c <__assert_fail@plt+0x4238>
   15408:	strb	r4, [r0, #17]
   1540c:	str	r3, [r0, #12]
   15410:	stmib	r0, {r3, r5}
   15414:	add	sp, sp, #108	; 0x6c
   15418:	pop	{r4, r5, pc}
   1541c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15420:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15424:	cmp	r1, #0
   15428:	ldr	r7, [pc, #248]	; 15528 <__assert_fail@plt+0x4344>
   1542c:	ldr	r5, [sp, #32]
   15430:	and	r0, r0, r7
   15434:	movne	r6, #3072	; 0xc00
   15438:	moveq	r6, #0
   1543c:	add	r3, r3, #16
   15440:	mov	r4, #0
   15444:	mvn	r2, r2
   15448:	ldrb	r9, [r3, #-15]
   1544c:	cmp	r9, #0
   15450:	bne	15460 <__assert_fail@plt+0x427c>
   15454:	cmp	r5, #0
   15458:	strne	r4, [r5]
   1545c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15460:	ldr	r8, [r3, #-4]
   15464:	cmp	r9, #2
   15468:	ldr	ip, [r3, #-12]
   1546c:	bic	r8, r6, r8
   15470:	ldr	lr, [r3, #-8]
   15474:	beq	154f4 <__assert_fail@plt+0x4310>
   15478:	cmp	r9, #3
   1547c:	bne	154b4 <__assert_fail@plt+0x42d0>
   15480:	and	lr, lr, r0
   15484:	tst	lr, #292	; 0x124
   15488:	movne	r9, #292	; 0x124
   1548c:	moveq	r9, #0
   15490:	tst	lr, #146	; 0x92
   15494:	movne	sl, #146	; 0x92
   15498:	moveq	sl, #0
   1549c:	tst	lr, #73	; 0x49
   154a0:	orr	sl, r9, sl
   154a4:	movne	r9, #73	; 0x49
   154a8:	moveq	r9, #0
   154ac:	orr	r9, r9, sl
   154b0:	orr	lr, r9, lr
   154b4:	cmp	ip, #0
   154b8:	movne	r9, ip
   154bc:	moveq	r9, r2
   154c0:	bic	lr, lr, r8
   154c4:	and	lr, lr, r9
   154c8:	ldrb	r9, [r3, #-16]
   154cc:	cmp	r9, #45	; 0x2d
   154d0:	orreq	r4, r4, lr
   154d4:	biceq	r0, r0, lr
   154d8:	beq	15520 <__assert_fail@plt+0x433c>
   154dc:	cmp	r9, #61	; 0x3d
   154e0:	beq	15504 <__assert_fail@plt+0x4320>
   154e4:	cmp	r9, #43	; 0x2b
   154e8:	orreq	r4, r4, lr
   154ec:	orreq	r0, r0, lr
   154f0:	b	15520 <__assert_fail@plt+0x433c>
   154f4:	and	r9, r0, #73	; 0x49
   154f8:	orrs	r9, r9, r1
   154fc:	orrne	lr, lr, #73	; 0x49
   15500:	b	154b4 <__assert_fail@plt+0x42d0>
   15504:	cmp	ip, #0
   15508:	mvnne	ip, ip
   1550c:	orr	ip, ip, r8
   15510:	bic	r8, r7, ip
   15514:	and	ip, ip, r0
   15518:	orr	r4, r4, r8
   1551c:	orr	r0, lr, ip
   15520:	add	r3, r3, #16
   15524:	b	15448 <__assert_fail@plt+0x4264>
   15528:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1552c:	push	{r2, r3}
   15530:	push	{r0, r1, r2, lr}
   15534:	ldr	r2, [sp, #16]
   15538:	ands	r3, r2, #64	; 0x40
   1553c:	addne	r3, sp, #20
   15540:	strne	r3, [sp, #4]
   15544:	ldrne	r3, [sp, #20]
   15548:	bl	1107c <openat64@plt>
   1554c:	bl	16c2c <__assert_fail@plt+0x5a48>
   15550:	add	sp, sp, #12
   15554:	pop	{lr}		; (ldr lr, [sp], #4)
   15558:	add	sp, sp, #8
   1555c:	bx	lr
   15560:	orr	r2, r2, #540672	; 0x84000
   15564:	push	{r4, r5, r6, r7, r8, lr}
   15568:	orr	r2, r2, #2304	; 0x900
   1556c:	mov	r5, r3
   15570:	bl	1552c <__assert_fail@plt+0x4348>
   15574:	subs	r6, r0, #0
   15578:	movlt	r4, #0
   1557c:	blt	155a8 <__assert_fail@plt+0x43c4>
   15580:	bl	1113c <fdopendir@plt>
   15584:	subs	r4, r0, #0
   15588:	strne	r6, [r5]
   1558c:	bne	155a8 <__assert_fail@plt+0x43c4>
   15590:	bl	11094 <__errno_location@plt>
   15594:	ldr	r7, [r0]
   15598:	mov	r5, r0
   1559c:	mov	r0, r6
   155a0:	bl	111c0 <close@plt>
   155a4:	str	r7, [r5]
   155a8:	mov	r0, r4
   155ac:	pop	{r4, r5, r6, r7, r8, pc}
   155b0:	push	{r4, r5, r6, lr}
   155b4:	subs	r5, r0, #0
   155b8:	bne	155d0 <__assert_fail@plt+0x43ec>
   155bc:	ldr	r3, [pc, #124]	; 15640 <__assert_fail@plt+0x445c>
   155c0:	ldr	r0, [pc, #124]	; 15644 <__assert_fail@plt+0x4460>
   155c4:	ldr	r1, [r3]
   155c8:	bl	1119c <fputs@plt>
   155cc:	bl	111b4 <abort@plt>
   155d0:	mov	r1, #47	; 0x2f
   155d4:	bl	11118 <strrchr@plt>
   155d8:	cmp	r0, #0
   155dc:	addne	r4, r0, #1
   155e0:	moveq	r4, r5
   155e4:	sub	r3, r4, r5
   155e8:	cmp	r3, #6
   155ec:	ble	1562c <__assert_fail@plt+0x4448>
   155f0:	mov	r2, #7
   155f4:	ldr	r1, [pc, #76]	; 15648 <__assert_fail@plt+0x4464>
   155f8:	sub	r0, r4, #7
   155fc:	bl	111a8 <strncmp@plt>
   15600:	cmp	r0, #0
   15604:	bne	1562c <__assert_fail@plt+0x4448>
   15608:	mov	r2, #3
   1560c:	ldr	r1, [pc, #56]	; 1564c <__assert_fail@plt+0x4468>
   15610:	mov	r0, r4
   15614:	bl	111a8 <strncmp@plt>
   15618:	cmp	r0, #0
   1561c:	movne	r5, r4
   15620:	ldreq	r3, [pc, #40]	; 15650 <__assert_fail@plt+0x446c>
   15624:	addeq	r5, r4, #3
   15628:	streq	r5, [r3]
   1562c:	ldr	r3, [pc, #32]	; 15654 <__assert_fail@plt+0x4470>
   15630:	str	r5, [r3]
   15634:	ldr	r3, [pc, #28]	; 15658 <__assert_fail@plt+0x4474>
   15638:	str	r5, [r3]
   1563c:	pop	{r4, r5, r6, pc}
   15640:	andeq	sl, r2, r8, ror r1
   15644:	strdeq	r8, [r1], -sp
   15648:	andeq	r9, r1, r5, lsr r0
   1564c:	andeq	r9, r1, sp, lsr r0
   15650:	andeq	sl, r2, r8, ror #2
   15654:			; <UNDEFINED> instruction: 0x0002a1b4
   15658:	andeq	sl, r2, ip, ror #2
   1565c:	push	{r4, r5, r6, lr}
   15660:	mov	r2, #48	; 0x30
   15664:	mov	r5, r1
   15668:	mov	r1, #0
   1566c:	mov	r4, r0
   15670:	bl	110b8 <memset@plt>
   15674:	cmp	r5, #10
   15678:	bne	15680 <__assert_fail@plt+0x449c>
   1567c:	bl	111b4 <abort@plt>
   15680:	str	r5, [r4]
   15684:	mov	r0, r4
   15688:	pop	{r4, r5, r6, pc}
   1568c:	push	{r4, r5, r6, lr}
   15690:	mov	r4, r0
   15694:	mov	r5, r1
   15698:	bl	17cc0 <__assert_fail@plt+0x6adc>
   1569c:	ldrb	r3, [r0]
   156a0:	bic	r3, r3, #32
   156a4:	cmp	r3, #85	; 0x55
   156a8:	bne	15718 <__assert_fail@plt+0x4534>
   156ac:	ldrb	r3, [r0, #1]
   156b0:	bic	r3, r3, #32
   156b4:	cmp	r3, #84	; 0x54
   156b8:	bne	156f0 <__assert_fail@plt+0x450c>
   156bc:	ldrb	r3, [r0, #2]
   156c0:	bic	r3, r3, #32
   156c4:	cmp	r3, #70	; 0x46
   156c8:	bne	156f0 <__assert_fail@plt+0x450c>
   156cc:	ldrb	r3, [r0, #3]
   156d0:	cmp	r3, #45	; 0x2d
   156d4:	bne	156f0 <__assert_fail@plt+0x450c>
   156d8:	ldrb	r3, [r0, #4]
   156dc:	cmp	r3, #56	; 0x38
   156e0:	bne	156f0 <__assert_fail@plt+0x450c>
   156e4:	ldrb	r3, [r0, #5]
   156e8:	cmp	r3, #0
   156ec:	beq	15704 <__assert_fail@plt+0x4520>
   156f0:	ldr	r1, [pc, #144]	; 15788 <__assert_fail@plt+0x45a4>
   156f4:	ldr	r0, [pc, #144]	; 1578c <__assert_fail@plt+0x45a8>
   156f8:	cmp	r5, #9
   156fc:	movne	r0, r1
   15700:	pop	{r4, r5, r6, pc}
   15704:	ldrb	r3, [r4]
   15708:	ldr	r1, [pc, #128]	; 15790 <__assert_fail@plt+0x45ac>
   1570c:	ldr	r0, [pc, #128]	; 15794 <__assert_fail@plt+0x45b0>
   15710:	cmp	r3, #96	; 0x60
   15714:	b	156fc <__assert_fail@plt+0x4518>
   15718:	cmp	r3, #71	; 0x47
   1571c:	bne	156f0 <__assert_fail@plt+0x450c>
   15720:	ldrb	r3, [r0, #1]
   15724:	bic	r3, r3, #32
   15728:	cmp	r3, #66	; 0x42
   1572c:	bne	156f0 <__assert_fail@plt+0x450c>
   15730:	ldrb	r3, [r0, #2]
   15734:	cmp	r3, #49	; 0x31
   15738:	bne	156f0 <__assert_fail@plt+0x450c>
   1573c:	ldrb	r3, [r0, #3]
   15740:	cmp	r3, #56	; 0x38
   15744:	bne	156f0 <__assert_fail@plt+0x450c>
   15748:	ldrb	r3, [r0, #4]
   1574c:	cmp	r3, #48	; 0x30
   15750:	bne	156f0 <__assert_fail@plt+0x450c>
   15754:	ldrb	r3, [r0, #5]
   15758:	cmp	r3, #51	; 0x33
   1575c:	bne	156f0 <__assert_fail@plt+0x450c>
   15760:	ldrb	r3, [r0, #6]
   15764:	cmp	r3, #48	; 0x30
   15768:	bne	156f0 <__assert_fail@plt+0x450c>
   1576c:	ldrb	r3, [r0, #7]
   15770:	cmp	r3, #0
   15774:	bne	156f0 <__assert_fail@plt+0x450c>
   15778:	ldrb	r3, [r4]
   1577c:	ldr	r1, [pc, #20]	; 15798 <__assert_fail@plt+0x45b4>
   15780:	ldr	r0, [pc, #20]	; 1579c <__assert_fail@plt+0x45b8>
   15784:	b	15710 <__assert_fail@plt+0x452c>
   15788:	andeq	r9, r1, r9, lsr #1
   1578c:	andeq	r9, r1, r7, lsr #1
   15790:	muleq	r1, ip, r0
   15794:	muleq	r1, r8, r0
   15798:	andeq	r9, r1, r4, lsr #1
   1579c:	andeq	r9, r1, r0, lsr #1
   157a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157a4:	sub	sp, sp, #108	; 0x6c
   157a8:	mov	r8, r0
   157ac:	str	r3, [sp, #36]	; 0x24
   157b0:	mov	r5, r1
   157b4:	str	r2, [sp, #44]	; 0x2c
   157b8:	ldr	sl, [sp, #144]	; 0x90
   157bc:	bl	10fd4 <__ctype_get_mb_cur_max@plt>
   157c0:	ldr	r3, [sp, #148]	; 0x94
   157c4:	mov	r7, #0
   157c8:	str	r7, [sp, #48]	; 0x30
   157cc:	lsr	r6, r3, #1
   157d0:	and	r6, r6, #1
   157d4:	mov	r3, #1
   157d8:	str	r3, [sp, #72]	; 0x48
   157dc:	str	r7, [sp, #24]
   157e0:	str	r7, [sp, #32]
   157e4:	str	r7, [sp, #40]	; 0x28
   157e8:	str	r7, [sp, #60]	; 0x3c
   157ec:	str	r0, [sp, #76]	; 0x4c
   157f0:	cmp	sl, #10
   157f4:	ldrls	pc, [pc, sl, lsl #2]
   157f8:	b	15a34 <__assert_fail@plt+0x4850>
   157fc:	andeq	r5, r1, r8, lsr #16
   15800:			; <UNDEFINED> instruction: 0x000164bc
   15804:	andeq	r5, r1, r0, lsl #20
   15808:	andeq	r5, r1, ip, asr #20
   1580c:	ldrdeq	r5, [r1], -ip
   15810:	andeq	r5, r1, r4, lsr r8
   15814:	muleq	r1, ip, r4
   15818:	andeq	r5, r1, r8, lsr sl
   1581c:	andeq	r5, r1, ip, lsr #18
   15820:	andeq	r5, r1, ip, lsr #18
   15824:	andeq	r5, r1, ip, lsr #18
   15828:	mov	r6, #0
   1582c:	mov	r4, #0
   15830:	b	15860 <__assert_fail@plt+0x467c>
   15834:	cmp	r6, #0
   15838:	bne	15a5c <__assert_fail@plt+0x4878>
   1583c:	cmp	r5, #0
   15840:	movne	r3, #34	; 0x22
   15844:	strbne	r3, [r8]
   15848:	mov	r3, #1
   1584c:	str	r3, [sp, #24]
   15850:	str	r3, [sp, #32]
   15854:	mov	r4, #1
   15858:	ldr	r3, [pc, #3172]	; 164c4 <__assert_fail@plt+0x52e0>
   1585c:	str	r3, [sp, #40]	; 0x28
   15860:	mov	r9, r5
   15864:	mov	r3, #0
   15868:	str	r7, [sp, #68]	; 0x44
   1586c:	str	r3, [sp, #28]
   15870:	ldr	r3, [sp, #36]	; 0x24
   15874:	cmn	r3, #1
   15878:	bne	16408 <__assert_fail@plt+0x5224>
   1587c:	ldr	r3, [sp, #44]	; 0x2c
   15880:	ldr	r2, [sp, #28]
   15884:	ldrb	r3, [r3, r2]
   15888:	adds	r3, r3, #0
   1588c:	movne	r3, #1
   15890:	str	r3, [sp, #52]	; 0x34
   15894:	ldr	r3, [sp, #52]	; 0x34
   15898:	cmp	r3, #0
   1589c:	bne	15a84 <__assert_fail@plt+0x48a0>
   158a0:	sub	r2, sl, #2
   158a4:	clz	r2, r2
   158a8:	lsr	r2, r2, #5
   158ac:	and	r3, r6, r2
   158b0:	cmp	r4, #0
   158b4:	movne	r3, #0
   158b8:	andeq	r3, r3, #1
   158bc:	cmp	r3, #0
   158c0:	bne	15c4c <__assert_fail@plt+0x4a68>
   158c4:	eor	r3, r6, #1
   158c8:	ands	r2, r2, r3
   158cc:	beq	16440 <__assert_fail@plt+0x525c>
   158d0:	ldr	r3, [sp, #68]	; 0x44
   158d4:	cmp	r3, #0
   158d8:	beq	16478 <__assert_fail@plt+0x5294>
   158dc:	ldr	r3, [sp, #72]	; 0x48
   158e0:	cmp	r3, #0
   158e4:	beq	1641c <__assert_fail@plt+0x5238>
   158e8:	ldr	r3, [sp, #160]	; 0xa0
   158ec:	ldr	r2, [sp, #44]	; 0x2c
   158f0:	str	r3, [sp, #16]
   158f4:	ldr	r3, [sp, #156]	; 0x9c
   158f8:	ldr	r1, [sp, #60]	; 0x3c
   158fc:	str	r3, [sp, #12]
   15900:	ldr	r3, [sp, #152]	; 0x98
   15904:	str	r3, [sp, #8]
   15908:	ldr	r3, [sp, #148]	; 0x94
   1590c:	str	r3, [sp, #4]
   15910:	mov	r3, #5
   15914:	str	r3, [sp]
   15918:	ldr	r3, [sp, #36]	; 0x24
   1591c:	mov	r0, r8
   15920:	bl	157a0 <__assert_fail@plt+0x45bc>
   15924:	mov	r4, r0
   15928:	b	1646c <__assert_fail@plt+0x5288>
   1592c:	cmp	sl, #10
   15930:	beq	1598c <__assert_fail@plt+0x47a8>
   15934:	ldr	r4, [pc, #2956]	; 164c8 <__assert_fail@plt+0x52e4>
   15938:	mov	r2, #5
   1593c:	mov	r1, r4
   15940:	mov	r0, #0
   15944:	bl	10f80 <dcgettext@plt>
   15948:	cmp	r0, r4
   1594c:	str	r0, [sp, #156]	; 0x9c
   15950:	bne	15960 <__assert_fail@plt+0x477c>
   15954:	mov	r1, sl
   15958:	bl	1568c <__assert_fail@plt+0x44a8>
   1595c:	str	r0, [sp, #156]	; 0x9c
   15960:	ldr	r4, [pc, #2916]	; 164cc <__assert_fail@plt+0x52e8>
   15964:	mov	r2, #5
   15968:	mov	r1, r4
   1596c:	mov	r0, #0
   15970:	bl	10f80 <dcgettext@plt>
   15974:	cmp	r0, r4
   15978:	str	r0, [sp, #160]	; 0xa0
   1597c:	bne	1598c <__assert_fail@plt+0x47a8>
   15980:	mov	r1, sl
   15984:	bl	1568c <__assert_fail@plt+0x44a8>
   15988:	str	r0, [sp, #160]	; 0xa0
   1598c:	cmp	r6, #0
   15990:	moveq	r4, r6
   15994:	beq	159ac <__assert_fail@plt+0x47c8>
   15998:	mov	r4, #0
   1599c:	b	159bc <__assert_fail@plt+0x47d8>
   159a0:	cmp	r5, r4
   159a4:	strbhi	r3, [r8, r4]
   159a8:	add	r4, r4, #1
   159ac:	ldr	r3, [sp, #156]	; 0x9c
   159b0:	ldrb	r3, [r3, r4]
   159b4:	cmp	r3, #0
   159b8:	bne	159a0 <__assert_fail@plt+0x47bc>
   159bc:	ldr	r0, [sp, #160]	; 0xa0
   159c0:	bl	11070 <strlen@plt>
   159c4:	ldr	r3, [sp, #160]	; 0xa0
   159c8:	str	r3, [sp, #40]	; 0x28
   159cc:	mov	r3, #1
   159d0:	str	r3, [sp, #24]
   159d4:	str	r0, [sp, #32]
   159d8:	b	15860 <__assert_fail@plt+0x467c>
   159dc:	mov	r3, #1
   159e0:	cmp	r6, #0
   159e4:	streq	r3, [sp, #24]
   159e8:	beq	15a08 <__assert_fail@plt+0x4824>
   159ec:	str	r3, [sp, #32]
   159f0:	ldr	r3, [pc, #2772]	; 164cc <__assert_fail@plt+0x52e8>
   159f4:	mov	r4, #0
   159f8:	str	r3, [sp, #40]	; 0x28
   159fc:	b	15a2c <__assert_fail@plt+0x4848>
   15a00:	cmp	r6, #0
   15a04:	bne	15a74 <__assert_fail@plt+0x4890>
   15a08:	cmp	r5, #0
   15a0c:	movne	r3, #39	; 0x27
   15a10:	strbne	r3, [r8]
   15a14:	mov	r3, #1
   15a18:	str	r3, [sp, #32]
   15a1c:	mov	r6, #0
   15a20:	ldr	r3, [pc, #2724]	; 164cc <__assert_fail@plt+0x52e8>
   15a24:	mov	r4, #1
   15a28:	str	r3, [sp, #40]	; 0x28
   15a2c:	mov	sl, #2
   15a30:	b	15860 <__assert_fail@plt+0x467c>
   15a34:	bl	111b4 <abort@plt>
   15a38:	mov	r6, #0
   15a3c:	mov	r3, #1
   15a40:	str	r3, [sp, #24]
   15a44:	mov	r4, r6
   15a48:	b	15860 <__assert_fail@plt+0x467c>
   15a4c:	mov	r6, #1
   15a50:	str	r6, [sp, #24]
   15a54:	str	r6, [sp, #32]
   15a58:	b	159f0 <__assert_fail@plt+0x480c>
   15a5c:	mov	r3, #1
   15a60:	str	r3, [sp, #32]
   15a64:	ldr	r3, [pc, #2648]	; 164c4 <__assert_fail@plt+0x52e0>
   15a68:	str	r6, [sp, #24]
   15a6c:	str	r3, [sp, #40]	; 0x28
   15a70:	b	1582c <__assert_fail@plt+0x4648>
   15a74:	mov	r3, #1
   15a78:	str	r3, [sp, #32]
   15a7c:	ldr	r3, [pc, #2632]	; 164cc <__assert_fail@plt+0x52e8>
   15a80:	b	15a6c <__assert_fail@plt+0x4888>
   15a84:	ldr	r3, [sp, #32]
   15a88:	ldr	fp, [sp, #24]
   15a8c:	cmp	sl, #2
   15a90:	moveq	fp, #0
   15a94:	andne	fp, fp, #1
   15a98:	adds	r5, r3, #0
   15a9c:	movne	r5, #1
   15aa0:	ands	r3, r5, fp
   15aa4:	str	r3, [sp, #64]	; 0x40
   15aa8:	beq	15b78 <__assert_fail@plt+0x4994>
   15aac:	ldr	r2, [sp, #32]
   15ab0:	ldr	r3, [sp, #28]
   15ab4:	add	r7, r3, r2
   15ab8:	mov	r3, r2
   15abc:	ldr	r2, [sp, #36]	; 0x24
   15ac0:	cmp	r3, #1
   15ac4:	movls	r3, #0
   15ac8:	movhi	r3, #1
   15acc:	cmn	r2, #1
   15ad0:	movne	r3, #0
   15ad4:	cmp	r3, #0
   15ad8:	beq	15ae8 <__assert_fail@plt+0x4904>
   15adc:	ldr	r0, [sp, #44]	; 0x2c
   15ae0:	bl	11070 <strlen@plt>
   15ae4:	str	r0, [sp, #36]	; 0x24
   15ae8:	ldr	r3, [sp, #36]	; 0x24
   15aec:	cmp	r3, r7
   15af0:	bcc	15b70 <__assert_fail@plt+0x498c>
   15af4:	ldr	r3, [sp, #44]	; 0x2c
   15af8:	ldr	r0, [sp, #28]
   15afc:	ldr	r2, [sp, #32]
   15b00:	ldr	r1, [sp, #40]	; 0x28
   15b04:	add	r0, r3, r0
   15b08:	bl	10f68 <memcmp@plt>
   15b0c:	cmp	r0, #0
   15b10:	bne	15b70 <__assert_fail@plt+0x498c>
   15b14:	cmp	r6, #0
   15b18:	beq	15b78 <__assert_fail@plt+0x4994>
   15b1c:	str	r6, [sp, #24]
   15b20:	ldr	r3, [sp, #24]
   15b24:	ldr	r2, [sp, #44]	; 0x2c
   15b28:	cmp	sl, #2
   15b2c:	movne	r3, #0
   15b30:	andeq	r3, r3, #1
   15b34:	cmp	r3, #0
   15b38:	ldr	r3, [sp, #160]	; 0xa0
   15b3c:	movne	sl, #4
   15b40:	str	r3, [sp, #16]
   15b44:	ldr	r3, [sp, #156]	; 0x9c
   15b48:	str	sl, [sp]
   15b4c:	str	r3, [sp, #12]
   15b50:	mov	r3, #0
   15b54:	str	r3, [sp, #8]
   15b58:	ldr	r3, [sp, #148]	; 0x94
   15b5c:	mov	r1, r9
   15b60:	bic	r3, r3, #2
   15b64:	str	r3, [sp, #4]
   15b68:	ldr	r3, [sp, #36]	; 0x24
   15b6c:	b	1591c <__assert_fail@plt+0x4738>
   15b70:	mov	r3, #0
   15b74:	str	r3, [sp, #64]	; 0x40
   15b78:	ldr	r2, [sp, #28]
   15b7c:	ldr	r3, [sp, #44]	; 0x2c
   15b80:	add	r3, r3, r2
   15b84:	str	r3, [sp, #80]	; 0x50
   15b88:	ldr	r3, [sp, #44]	; 0x2c
   15b8c:	ldrb	r7, [r3, r2]
   15b90:	cmp	r7, #58	; 0x3a
   15b94:	bhi	15cfc <__assert_fail@plt+0x4b18>
   15b98:	cmp	r7, #43	; 0x2b
   15b9c:	bcs	15d50 <__assert_fail@plt+0x4b6c>
   15ba0:	cmp	r7, #32
   15ba4:	beq	15da8 <__assert_fail@plt+0x4bc4>
   15ba8:	bhi	15c54 <__assert_fail@plt+0x4a70>
   15bac:	cmp	r7, #9
   15bb0:	beq	1605c <__assert_fail@plt+0x4e78>
   15bb4:	bhi	15c18 <__assert_fail@plt+0x4a34>
   15bb8:	cmp	r7, #7
   15bbc:	beq	16108 <__assert_fail@plt+0x4f24>
   15bc0:	bhi	15dc4 <__assert_fail@plt+0x4be0>
   15bc4:	cmp	r7, #0
   15bc8:	beq	15de0 <__assert_fail@plt+0x4bfc>
   15bcc:	ldr	r3, [sp, #76]	; 0x4c
   15bd0:	cmp	r3, #1
   15bd4:	bne	1614c <__assert_fail@plt+0x4f68>
   15bd8:	bl	11058 <__ctype_b_loc@plt>
   15bdc:	sxth	r3, r7
   15be0:	lsl	r3, r3, #1
   15be4:	ldr	r2, [r0]
   15be8:	ldrh	r5, [r2, r3]
   15bec:	ldr	r3, [sp, #76]	; 0x4c
   15bf0:	str	r3, [sp, #56]	; 0x38
   15bf4:	lsr	r5, r5, #14
   15bf8:	and	r5, r5, #1
   15bfc:	ldr	r3, [sp, #24]
   15c00:	eor	fp, r5, #1
   15c04:	and	fp, fp, r3
   15c08:	ands	fp, fp, #255	; 0xff
   15c0c:	beq	15f94 <__assert_fail@plt+0x4db0>
   15c10:	mov	r5, #0
   15c14:	b	161f8 <__assert_fail@plt+0x5014>
   15c18:	cmp	r7, #11
   15c1c:	beq	16064 <__assert_fail@plt+0x4e80>
   15c20:	bcc	16100 <__assert_fail@plt+0x4f1c>
   15c24:	cmp	r7, #12
   15c28:	beq	16110 <__assert_fail@plt+0x4f2c>
   15c2c:	cmp	r7, #13
   15c30:	moveq	r3, #114	; 0x72
   15c34:	bne	15bcc <__assert_fail@plt+0x49e8>
   15c38:	cmp	sl, #2
   15c3c:	movne	r2, #0
   15c40:	andeq	r2, r6, #1
   15c44:	cmp	r2, #0
   15c48:	beq	15dc8 <__assert_fail@plt+0x4be4>
   15c4c:	mov	sl, #2
   15c50:	b	15b20 <__assert_fail@plt+0x493c>
   15c54:	cmp	r7, #37	; 0x25
   15c58:	beq	15d50 <__assert_fail@plt+0x4b6c>
   15c5c:	bhi	15c70 <__assert_fail@plt+0x4a8c>
   15c60:	cmp	r7, #35	; 0x23
   15c64:	beq	15d9c <__assert_fail@plt+0x4bb8>
   15c68:	mov	r5, #0
   15c6c:	b	15dac <__assert_fail@plt+0x4bc8>
   15c70:	cmp	r7, #39	; 0x27
   15c74:	bne	15c68 <__assert_fail@plt+0x4a84>
   15c78:	cmp	sl, #2
   15c7c:	ldrne	r5, [sp, #52]	; 0x34
   15c80:	movne	r3, r5
   15c84:	strne	r3, [sp, #68]	; 0x44
   15c88:	bne	15d54 <__assert_fail@plt+0x4b70>
   15c8c:	cmp	r6, #0
   15c90:	bne	15b20 <__assert_fail@plt+0x493c>
   15c94:	ldr	r2, [sp, #60]	; 0x3c
   15c98:	adds	r3, r9, #0
   15c9c:	movne	r3, #1
   15ca0:	cmp	r2, #0
   15ca4:	movne	r3, #0
   15ca8:	cmp	r3, #0
   15cac:	strne	r9, [sp, #60]	; 0x3c
   15cb0:	movne	r9, #0
   15cb4:	bne	15cc4 <__assert_fail@plt+0x4ae0>
   15cb8:	cmp	r9, r4
   15cbc:	movhi	r3, #39	; 0x27
   15cc0:	strbhi	r3, [r8, r4]
   15cc4:	add	r3, r4, #1
   15cc8:	cmp	r3, r9
   15ccc:	movcc	r2, #92	; 0x5c
   15cd0:	strbcc	r2, [r8, r3]
   15cd4:	add	r3, r4, #2
   15cd8:	cmp	r3, r9
   15cdc:	ldr	r5, [sp, #52]	; 0x34
   15ce0:	movcc	r2, #39	; 0x27
   15ce4:	strbcc	r2, [r8, r3]
   15ce8:	add	r4, r4, #3
   15cec:	mov	fp, r6
   15cf0:	str	r5, [sp, #68]	; 0x44
   15cf4:	str	r6, [sp, #48]	; 0x30
   15cf8:	b	15f94 <__assert_fail@plt+0x4db0>
   15cfc:	cmp	r7, #94	; 0x5e
   15d00:	beq	15c68 <__assert_fail@plt+0x4a84>
   15d04:	bhi	15d5c <__assert_fail@plt+0x4b78>
   15d08:	cmp	r7, #90	; 0x5a
   15d0c:	bhi	15d44 <__assert_fail@plt+0x4b60>
   15d10:	cmp	r7, #65	; 0x41
   15d14:	bcs	15d50 <__assert_fail@plt+0x4b6c>
   15d18:	cmp	r7, #62	; 0x3e
   15d1c:	bls	15c68 <__assert_fail@plt+0x4a84>
   15d20:	cmp	r7, #63	; 0x3f
   15d24:	bne	15bcc <__assert_fail@plt+0x49e8>
   15d28:	cmp	sl, #2
   15d2c:	beq	15ed0 <__assert_fail@plt+0x4cec>
   15d30:	cmp	sl, #5
   15d34:	beq	15ee0 <__assert_fail@plt+0x4cfc>
   15d38:	mov	fp, #0
   15d3c:	mov	r5, fp
   15d40:	b	15f94 <__assert_fail@plt+0x4db0>
   15d44:	cmp	r7, #92	; 0x5c
   15d48:	beq	1606c <__assert_fail@plt+0x4e88>
   15d4c:	bls	15c68 <__assert_fail@plt+0x4a84>
   15d50:	ldr	r5, [sp, #52]	; 0x34
   15d54:	mov	fp, #0
   15d58:	b	15f94 <__assert_fail@plt+0x4db0>
   15d5c:	cmp	r7, #122	; 0x7a
   15d60:	bhi	15d80 <__assert_fail@plt+0x4b9c>
   15d64:	cmp	r7, #97	; 0x61
   15d68:	bcs	15d50 <__assert_fail@plt+0x4b6c>
   15d6c:	cmp	r7, #95	; 0x5f
   15d70:	beq	15d50 <__assert_fail@plt+0x4b6c>
   15d74:	cmp	r7, #96	; 0x60
   15d78:	bne	15bcc <__assert_fail@plt+0x49e8>
   15d7c:	b	15c68 <__assert_fail@plt+0x4a84>
   15d80:	cmp	r7, #124	; 0x7c
   15d84:	beq	15c68 <__assert_fail@plt+0x4a84>
   15d88:	bcc	16118 <__assert_fail@plt+0x4f34>
   15d8c:	cmp	r7, #125	; 0x7d
   15d90:	beq	16118 <__assert_fail@plt+0x4f34>
   15d94:	cmp	r7, #126	; 0x7e
   15d98:	bne	15bcc <__assert_fail@plt+0x49e8>
   15d9c:	ldr	r3, [sp, #28]
   15da0:	cmp	r3, #0
   15da4:	bne	15ed8 <__assert_fail@plt+0x4cf4>
   15da8:	ldr	r5, [sp, #52]	; 0x34
   15dac:	cmp	sl, #2
   15db0:	movne	fp, #0
   15db4:	andeq	fp, r6, #1
   15db8:	cmp	fp, #0
   15dbc:	beq	15f94 <__assert_fail@plt+0x4db0>
   15dc0:	b	15c4c <__assert_fail@plt+0x4a68>
   15dc4:	mov	r3, #98	; 0x62
   15dc8:	ldr	r2, [sp, #24]
   15dcc:	cmp	r2, #0
   15dd0:	beq	15ed8 <__assert_fail@plt+0x4cf4>
   15dd4:	mov	r7, r3
   15dd8:	mov	r5, #0
   15ddc:	b	15fec <__assert_fail@plt+0x4e08>
   15de0:	ldr	r3, [sp, #24]
   15de4:	cmp	r3, #0
   15de8:	beq	15eb4 <__assert_fail@plt+0x4cd0>
   15dec:	cmp	r6, #0
   15df0:	bne	15b1c <__assert_fail@plt+0x4938>
   15df4:	ldr	r3, [sp, #48]	; 0x30
   15df8:	eor	r2, r3, #1
   15dfc:	cmp	sl, #2
   15e00:	movne	r2, #0
   15e04:	andeq	r2, r2, #1
   15e08:	cmp	r2, #0
   15e0c:	moveq	r3, r4
   15e10:	beq	15e48 <__assert_fail@plt+0x4c64>
   15e14:	cmp	r9, r4
   15e18:	movhi	r3, #39	; 0x27
   15e1c:	strbhi	r3, [r8, r4]
   15e20:	add	r3, r4, #1
   15e24:	cmp	r9, r3
   15e28:	movhi	r1, #36	; 0x24
   15e2c:	strbhi	r1, [r8, r3]
   15e30:	add	r3, r4, #2
   15e34:	cmp	r9, r3
   15e38:	movhi	r1, #39	; 0x27
   15e3c:	strbhi	r1, [r8, r3]
   15e40:	add	r3, r4, #3
   15e44:	str	r2, [sp, #48]	; 0x30
   15e48:	cmp	r9, r3
   15e4c:	movhi	r2, #92	; 0x5c
   15e50:	strbhi	r2, [r8, r3]
   15e54:	cmp	fp, #0
   15e58:	add	r4, r3, #1
   15e5c:	beq	163ec <__assert_fail@plt+0x5208>
   15e60:	ldr	r2, [sp, #28]
   15e64:	ldr	r1, [sp, #36]	; 0x24
   15e68:	add	r2, r2, #1
   15e6c:	cmp	r1, r2
   15e70:	bls	15eac <__assert_fail@plt+0x4cc8>
   15e74:	ldr	r1, [sp, #44]	; 0x2c
   15e78:	mov	r7, #48	; 0x30
   15e7c:	ldrb	r2, [r1, r2]
   15e80:	sub	r2, r2, #48	; 0x30
   15e84:	cmp	r2, #9
   15e88:	movhi	r5, r6
   15e8c:	bhi	15f94 <__assert_fail@plt+0x4db0>
   15e90:	cmp	r9, r4
   15e94:	add	r2, r3, #2
   15e98:	strbhi	r7, [r8, r4]
   15e9c:	cmp	r9, r2
   15ea0:	add	r4, r3, #3
   15ea4:	movhi	r1, #48	; 0x30
   15ea8:	strbhi	r1, [r8, r2]
   15eac:	mov	r5, r6
   15eb0:	b	163f4 <__assert_fail@plt+0x5210>
   15eb4:	ldr	r3, [sp, #148]	; 0x94
   15eb8:	tst	r3, #1
   15ebc:	ldreq	r5, [sp, #24]
   15ec0:	beq	16400 <__assert_fail@plt+0x521c>
   15ec4:	ldr	r3, [sp, #28]
   15ec8:	add	r3, r3, #1
   15ecc:	b	1586c <__assert_fail@plt+0x4688>
   15ed0:	cmp	r6, #0
   15ed4:	bne	15b20 <__assert_fail@plt+0x493c>
   15ed8:	mov	r5, #0
   15edc:	b	15d54 <__assert_fail@plt+0x4b70>
   15ee0:	ldr	r3, [sp, #148]	; 0x94
   15ee4:	tst	r3, #4
   15ee8:	beq	15ed8 <__assert_fail@plt+0x4cf4>
   15eec:	ldr	r3, [sp, #28]
   15ef0:	add	r2, r3, #2
   15ef4:	ldr	r3, [sp, #36]	; 0x24
   15ef8:	cmp	r3, r2
   15efc:	bls	15ed8 <__assert_fail@plt+0x4cf4>
   15f00:	ldr	r3, [sp, #44]	; 0x2c
   15f04:	ldr	r1, [sp, #28]
   15f08:	add	r3, r3, r1
   15f0c:	ldrb	r0, [r3, #1]
   15f10:	cmp	r0, #63	; 0x3f
   15f14:	bne	15ed8 <__assert_fail@plt+0x4cf4>
   15f18:	ldr	r3, [sp, #44]	; 0x2c
   15f1c:	ldrb	r1, [r3, r2]
   15f20:	sub	r3, r1, #33	; 0x21
   15f24:	uxtb	r3, r3
   15f28:	cmp	r3, #29
   15f2c:	bhi	163fc <__assert_fail@plt+0x5218>
   15f30:	mov	ip, #1
   15f34:	ldr	r5, [pc, #1428]	; 164d0 <__assert_fail@plt+0x52ec>
   15f38:	ands	r5, r5, ip, lsl r3
   15f3c:	beq	15d54 <__assert_fail@plt+0x4b70>
   15f40:	cmp	r6, #0
   15f44:	bne	15b20 <__assert_fail@plt+0x493c>
   15f48:	add	r3, r4, #1
   15f4c:	cmp	r9, r4
   15f50:	strbhi	r0, [r8, r4]
   15f54:	cmp	r9, r3
   15f58:	movhi	r0, #34	; 0x22
   15f5c:	strbhi	r0, [r8, r3]
   15f60:	add	r3, r4, #2
   15f64:	cmp	r9, r3
   15f68:	movhi	r0, #34	; 0x22
   15f6c:	strbhi	r0, [r8, r3]
   15f70:	add	r3, r4, #3
   15f74:	cmp	r9, r3
   15f78:	add	r4, r4, #4
   15f7c:	mov	r5, r6
   15f80:	mov	fp, r6
   15f84:	mov	r7, r1
   15f88:	movhi	r0, #63	; 0x3f
   15f8c:	strbhi	r0, [r8, r3]
   15f90:	str	r2, [sp, #28]
   15f94:	ldr	r3, [sp, #24]
   15f98:	eor	r3, r3, #1
   15f9c:	cmp	sl, #2
   15fa0:	orreq	r3, r3, #1
   15fa4:	eor	r3, r3, #1
   15fa8:	orr	r3, r6, r3
   15fac:	tst	r3, #255	; 0xff
   15fb0:	beq	15fe0 <__assert_fail@plt+0x4dfc>
   15fb4:	ldr	r3, [sp, #152]	; 0x98
   15fb8:	cmp	r3, #0
   15fbc:	beq	15fe0 <__assert_fail@plt+0x4dfc>
   15fc0:	lsr	r2, r7, #5
   15fc4:	ldr	r1, [sp, #152]	; 0x98
   15fc8:	uxtb	r2, r2
   15fcc:	and	r3, r7, #31
   15fd0:	ldr	r2, [r1, r2, lsl #2]
   15fd4:	lsr	r3, r2, r3
   15fd8:	tst	r3, #1
   15fdc:	bne	15fec <__assert_fail@plt+0x4e08>
   15fe0:	ldr	r3, [sp, #64]	; 0x40
   15fe4:	cmp	r3, #0
   15fe8:	beq	16084 <__assert_fail@plt+0x4ea0>
   15fec:	cmp	r6, #0
   15ff0:	bne	15b20 <__assert_fail@plt+0x493c>
   15ff4:	ldr	r3, [sp, #48]	; 0x30
   15ff8:	eor	r3, r3, #1
   15ffc:	cmp	sl, #2
   16000:	movne	r3, #0
   16004:	andeq	r3, r3, #1
   16008:	cmp	r3, #0
   1600c:	beq	16044 <__assert_fail@plt+0x4e60>
   16010:	cmp	r9, r4
   16014:	movhi	r2, #39	; 0x27
   16018:	strbhi	r2, [r8, r4]
   1601c:	add	r2, r4, #1
   16020:	cmp	r9, r2
   16024:	movhi	r1, #36	; 0x24
   16028:	strbhi	r1, [r8, r2]
   1602c:	add	r2, r4, #2
   16030:	cmp	r9, r2
   16034:	add	r4, r4, #3
   16038:	movhi	r1, #39	; 0x27
   1603c:	strbhi	r1, [r8, r2]
   16040:	str	r3, [sp, #48]	; 0x30
   16044:	cmp	r9, r4
   16048:	movhi	r3, #92	; 0x5c
   1604c:	strbhi	r3, [r8, r4]
   16050:	ldr	fp, [sp, #52]	; 0x34
   16054:	add	r4, r4, #1
   16058:	b	16084 <__assert_fail@plt+0x4ea0>
   1605c:	mov	r3, #116	; 0x74
   16060:	b	15c38 <__assert_fail@plt+0x4a54>
   16064:	mov	r3, #118	; 0x76
   16068:	b	15dc8 <__assert_fail@plt+0x4be4>
   1606c:	cmp	sl, #2
   16070:	bne	160e0 <__assert_fail@plt+0x4efc>
   16074:	cmp	r6, #0
   16078:	bne	15b20 <__assert_fail@plt+0x493c>
   1607c:	mov	r5, r6
   16080:	mov	fp, r6
   16084:	ldr	r3, [sp, #48]	; 0x30
   16088:	eor	fp, fp, #1
   1608c:	and	fp, fp, r3
   16090:	tst	fp, #255	; 0xff
   16094:	beq	160c0 <__assert_fail@plt+0x4edc>
   16098:	cmp	r9, r4
   1609c:	movhi	r3, #39	; 0x27
   160a0:	strbhi	r3, [r8, r4]
   160a4:	add	r3, r4, #1
   160a8:	cmp	r9, r3
   160ac:	movhi	r2, #39	; 0x27
   160b0:	add	r4, r4, #2
   160b4:	strbhi	r2, [r8, r3]
   160b8:	mov	r3, #0
   160bc:	str	r3, [sp, #48]	; 0x30
   160c0:	cmp	r9, r4
   160c4:	strbhi	r7, [r8, r4]
   160c8:	ldr	r3, [sp, #72]	; 0x48
   160cc:	cmp	r5, #0
   160d0:	moveq	r3, #0
   160d4:	add	r4, r4, #1
   160d8:	str	r3, [sp, #72]	; 0x48
   160dc:	b	15ec4 <__assert_fail@plt+0x4ce0>
   160e0:	ldr	r3, [sp, #24]
   160e4:	and	r3, r3, r6
   160e8:	tst	r5, r3
   160ec:	moveq	r3, r7
   160f0:	beq	15c38 <__assert_fail@plt+0x4a54>
   160f4:	mov	fp, #0
   160f8:	mov	r5, fp
   160fc:	b	16084 <__assert_fail@plt+0x4ea0>
   16100:	mov	r3, #110	; 0x6e
   16104:	b	15c38 <__assert_fail@plt+0x4a54>
   16108:	mov	r3, #97	; 0x61
   1610c:	b	15dc8 <__assert_fail@plt+0x4be4>
   16110:	mov	r3, #102	; 0x66
   16114:	b	15dc8 <__assert_fail@plt+0x4be4>
   16118:	ldr	r3, [sp, #36]	; 0x24
   1611c:	cmn	r3, #1
   16120:	bne	16140 <__assert_fail@plt+0x4f5c>
   16124:	ldr	r3, [sp, #44]	; 0x2c
   16128:	ldrb	r3, [r3, #1]
   1612c:	adds	r3, r3, #0
   16130:	movne	r3, #1
   16134:	cmp	r3, #0
   16138:	bne	15ed8 <__assert_fail@plt+0x4cf4>
   1613c:	b	15d9c <__assert_fail@plt+0x4bb8>
   16140:	ldr	r3, [sp, #36]	; 0x24
   16144:	subs	r3, r3, #1
   16148:	b	16130 <__assert_fail@plt+0x4f4c>
   1614c:	mov	r3, #0
   16150:	str	r3, [sp, #96]	; 0x60
   16154:	str	r3, [sp, #100]	; 0x64
   16158:	ldr	r3, [sp, #36]	; 0x24
   1615c:	cmn	r3, #1
   16160:	bne	16170 <__assert_fail@plt+0x4f8c>
   16164:	ldr	r0, [sp, #44]	; 0x2c
   16168:	bl	11070 <strlen@plt>
   1616c:	str	r0, [sp, #36]	; 0x24
   16170:	ldr	r5, [sp, #52]	; 0x34
   16174:	mov	r3, #0
   16178:	str	r3, [sp, #56]	; 0x38
   1617c:	ldr	r3, [sp, #28]
   16180:	ldr	r2, [sp, #56]	; 0x38
   16184:	ldr	r1, [sp, #36]	; 0x24
   16188:	add	r2, r3, r2
   1618c:	ldr	r3, [sp, #44]	; 0x2c
   16190:	add	r0, sp, #92	; 0x5c
   16194:	add	fp, r3, r2
   16198:	sub	r2, r1, r2
   1619c:	add	r3, sp, #96	; 0x60
   161a0:	mov	r1, fp
   161a4:	bl	17cf4 <__assert_fail@plt+0x6b10>
   161a8:	subs	r2, r0, #0
   161ac:	beq	161ec <__assert_fail@plt+0x5008>
   161b0:	cmn	r2, #1
   161b4:	beq	163c4 <__assert_fail@plt+0x51e0>
   161b8:	cmn	r2, #2
   161bc:	bne	16334 <__assert_fail@plt+0x5150>
   161c0:	ldr	r2, [sp, #56]	; 0x38
   161c4:	ldr	r3, [sp, #28]
   161c8:	add	r3, r3, r2
   161cc:	ldr	r2, [sp, #36]	; 0x24
   161d0:	cmp	r2, r3
   161d4:	bls	163c4 <__assert_fail@plt+0x51e0>
   161d8:	ldr	r3, [sp, #80]	; 0x50
   161dc:	ldr	r2, [sp, #56]	; 0x38
   161e0:	ldrb	r5, [r3, r2]
   161e4:	cmp	r5, #0
   161e8:	bne	16324 <__assert_fail@plt+0x5140>
   161ec:	ldr	r3, [sp, #56]	; 0x38
   161f0:	cmp	r3, #1
   161f4:	bls	15bfc <__assert_fail@plt+0x4a18>
   161f8:	ldr	r2, [sp, #56]	; 0x38
   161fc:	ldr	r3, [sp, #28]
   16200:	mov	fp, #0
   16204:	add	r3, r3, r2
   16208:	ldr	r2, [sp, #24]
   1620c:	str	r3, [sp, #52]	; 0x34
   16210:	eor	r3, r5, #1
   16214:	and	r3, r3, r2
   16218:	mov	ip, #92	; 0x5c
   1621c:	uxtb	r3, r3
   16220:	mov	r2, #39	; 0x27
   16224:	cmp	r3, #0
   16228:	beq	163cc <__assert_fail@plt+0x51e8>
   1622c:	cmp	r6, #0
   16230:	bne	15b1c <__assert_fail@plt+0x4938>
   16234:	ldr	r1, [sp, #48]	; 0x30
   16238:	eor	r1, r1, #1
   1623c:	cmp	sl, #2
   16240:	movne	r1, #0
   16244:	andeq	r1, r1, #1
   16248:	cmp	r1, #0
   1624c:	beq	1627c <__assert_fail@plt+0x5098>
   16250:	add	r0, r4, #1
   16254:	cmp	r9, r4
   16258:	strbhi	r2, [r8, r4]
   1625c:	cmp	r9, r0
   16260:	movhi	lr, #36	; 0x24
   16264:	strbhi	lr, [r8, r0]
   16268:	add	r0, r4, #2
   1626c:	add	r4, r4, #3
   16270:	cmp	r9, r0
   16274:	strbhi	r2, [r8, r0]
   16278:	str	r1, [sp, #48]	; 0x30
   1627c:	add	r0, r4, #1
   16280:	cmp	r9, r4
   16284:	strbhi	ip, [r8, r4]
   16288:	cmp	r9, r0
   1628c:	lsrhi	r1, r7, #6
   16290:	addhi	r1, r1, #48	; 0x30
   16294:	strbhi	r1, [r8, r0]
   16298:	add	r0, r4, #2
   1629c:	cmp	r9, r0
   162a0:	lsrhi	r1, r7, #3
   162a4:	and	r7, r7, #7
   162a8:	andhi	r1, r1, #7
   162ac:	add	r4, r4, #3
   162b0:	add	r7, r7, #48	; 0x30
   162b4:	mov	fp, r3
   162b8:	addhi	r1, r1, #48	; 0x30
   162bc:	strbhi	r1, [r8, r0]
   162c0:	ldr	r1, [sp, #28]
   162c4:	ldr	r0, [sp, #52]	; 0x34
   162c8:	add	r1, r1, #1
   162cc:	cmp	r0, r1
   162d0:	bls	16084 <__assert_fail@plt+0x4ea0>
   162d4:	ldr	lr, [sp, #48]	; 0x30
   162d8:	eor	r0, fp, #1
   162dc:	and	r0, r0, lr
   162e0:	tst	r0, #255	; 0xff
   162e4:	beq	16308 <__assert_fail@plt+0x5124>
   162e8:	add	r0, r4, #1
   162ec:	cmp	r9, r4
   162f0:	strbhi	r2, [r8, r4]
   162f4:	cmp	r9, r0
   162f8:	add	r4, r4, #2
   162fc:	strbhi	r2, [r8, r0]
   16300:	mov	r0, #0
   16304:	str	r0, [sp, #48]	; 0x30
   16308:	ldr	r0, [sp, #44]	; 0x2c
   1630c:	cmp	r9, r4
   16310:	strbhi	r7, [r8, r4]
   16314:	str	r1, [sp, #28]
   16318:	add	r4, r4, #1
   1631c:	ldrb	r7, [r0, r1]
   16320:	b	16224 <__assert_fail@plt+0x5040>
   16324:	ldr	r3, [sp, #56]	; 0x38
   16328:	add	r3, r3, #1
   1632c:	str	r3, [sp, #56]	; 0x38
   16330:	b	161c0 <__assert_fail@plt+0x4fdc>
   16334:	cmp	sl, #2
   16338:	movne	r3, #0
   1633c:	andeq	r3, r6, #1
   16340:	cmp	r3, #0
   16344:	movne	r1, #1
   16348:	bne	163a4 <__assert_fail@plt+0x51c0>
   1634c:	ldr	r0, [sp, #92]	; 0x5c
   16350:	str	r2, [sp, #84]	; 0x54
   16354:	bl	10fb0 <iswprint@plt>
   16358:	ldr	r3, [sp, #56]	; 0x38
   1635c:	ldr	r2, [sp, #84]	; 0x54
   16360:	add	r3, r3, r2
   16364:	str	r3, [sp, #56]	; 0x38
   16368:	cmp	r0, #0
   1636c:	add	r0, sp, #96	; 0x60
   16370:	moveq	r5, #0
   16374:	bl	10f5c <mbsinit@plt>
   16378:	cmp	r0, #0
   1637c:	beq	1617c <__assert_fail@plt+0x4f98>
   16380:	b	161ec <__assert_fail@plt+0x5008>
   16384:	ldrb	r3, [fp, r1]
   16388:	cmp	r3, #94	; 0x5e
   1638c:	beq	15c4c <__assert_fail@plt+0x4a68>
   16390:	bhi	163b0 <__assert_fail@plt+0x51cc>
   16394:	sub	r3, r3, #91	; 0x5b
   16398:	cmp	r3, #1
   1639c:	bls	15c4c <__assert_fail@plt+0x4a68>
   163a0:	add	r1, r1, #1
   163a4:	cmp	r1, r2
   163a8:	bne	16384 <__assert_fail@plt+0x51a0>
   163ac:	b	1634c <__assert_fail@plt+0x5168>
   163b0:	cmp	r3, #96	; 0x60
   163b4:	beq	15c4c <__assert_fail@plt+0x4a68>
   163b8:	cmp	r3, #124	; 0x7c
   163bc:	bne	163a0 <__assert_fail@plt+0x51bc>
   163c0:	b	15c4c <__assert_fail@plt+0x4a68>
   163c4:	mov	r5, #0
   163c8:	b	161ec <__assert_fail@plt+0x5008>
   163cc:	ldr	r1, [sp, #64]	; 0x40
   163d0:	cmp	r1, #0
   163d4:	beq	162c0 <__assert_fail@plt+0x50dc>
   163d8:	cmp	r9, r4
   163dc:	strbhi	ip, [r8, r4]
   163e0:	str	r3, [sp, #64]	; 0x40
   163e4:	add	r4, r4, #1
   163e8:	b	162c0 <__assert_fail@plt+0x50dc>
   163ec:	mov	r5, fp
   163f0:	ldr	fp, [sp, #24]
   163f4:	mov	r7, #48	; 0x30
   163f8:	b	15f94 <__assert_fail@plt+0x4db0>
   163fc:	mov	r5, #0
   16400:	mov	fp, r5
   16404:	b	15f94 <__assert_fail@plt+0x4db0>
   16408:	ldr	r3, [sp, #36]	; 0x24
   1640c:	ldr	r2, [sp, #28]
   16410:	subs	r3, r3, r2
   16414:	movne	r3, #1
   16418:	b	15890 <__assert_fail@plt+0x46ac>
   1641c:	ldr	r3, [sp, #60]	; 0x3c
   16420:	clz	r7, r9
   16424:	cmp	r3, #0
   16428:	lsr	r7, r7, #5
   1642c:	moveq	r7, #0
   16430:	cmp	r7, #0
   16434:	mov	r5, r3
   16438:	bne	157f0 <__assert_fail@plt+0x460c>
   1643c:	ldr	r3, [sp, #68]	; 0x44
   16440:	ldr	r2, [sp, #40]	; 0x28
   16444:	cmp	r2, #0
   16448:	moveq	r3, #0
   1644c:	andne	r3, r3, #1
   16450:	cmp	r3, #0
   16454:	movne	r3, r2
   16458:	subne	r2, r3, #1
   1645c:	bne	1648c <__assert_fail@plt+0x52a8>
   16460:	cmp	r9, r4
   16464:	movhi	r3, #0
   16468:	strbhi	r3, [r8, r4]
   1646c:	mov	r0, r4
   16470:	add	sp, sp, #108	; 0x6c
   16474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16478:	mov	r3, r2
   1647c:	b	16440 <__assert_fail@plt+0x525c>
   16480:	cmp	r9, r4
   16484:	strbhi	r3, [r8, r4]
   16488:	add	r4, r4, #1
   1648c:	ldrb	r3, [r2, #1]!
   16490:	cmp	r3, #0
   16494:	bne	16480 <__assert_fail@plt+0x529c>
   16498:	b	16460 <__assert_fail@plt+0x527c>
   1649c:	ldr	r3, [pc, #32]	; 164c4 <__assert_fail@plt+0x52e0>
   164a0:	mov	r6, #1
   164a4:	str	r6, [sp, #24]
   164a8:	str	r6, [sp, #32]
   164ac:	str	r3, [sp, #40]	; 0x28
   164b0:	mov	r4, #0
   164b4:	mov	sl, #5
   164b8:	b	15860 <__assert_fail@plt+0x467c>
   164bc:	mov	r6, #1
   164c0:	b	15a54 <__assert_fail@plt+0x4870>
   164c4:	andeq	r9, r1, r7, lsr #1
   164c8:	andeq	r9, r1, fp, lsr #1
   164cc:	andeq	r9, r1, r9, lsr #1
   164d0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   164d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164d8:	sub	sp, sp, #52	; 0x34
   164dc:	mov	r6, r0
   164e0:	mov	r5, r3
   164e4:	mov	r8, r1
   164e8:	mov	r9, r2
   164ec:	bl	11094 <__errno_location@plt>
   164f0:	ldr	r7, [pc, #380]	; 16674 <__assert_fail@plt+0x5490>
   164f4:	cmn	r6, #-2147483647	; 0x80000001
   164f8:	ldr	r4, [r7]
   164fc:	ldr	r3, [r0]
   16500:	str	r0, [sp, #24]
   16504:	str	r3, [sp, #32]
   16508:	movne	r3, #0
   1650c:	moveq	r3, #1
   16510:	orrs	r3, r3, r6, lsr #31
   16514:	beq	1651c <__assert_fail@plt+0x5338>
   16518:	bl	111b4 <abort@plt>
   1651c:	ldr	r2, [r7, #4]
   16520:	cmp	r6, r2
   16524:	blt	16594 <__assert_fail@plt+0x53b0>
   16528:	add	r1, sp, #48	; 0x30
   1652c:	add	sl, r7, #8
   16530:	str	r2, [r1, #-4]!
   16534:	cmp	r4, sl
   16538:	mov	r3, #8
   1653c:	sub	r2, r6, r2
   16540:	movne	r0, r4
   16544:	str	r3, [sp]
   16548:	add	r2, r2, #1
   1654c:	mvn	r3, #-2147483648	; 0x80000000
   16550:	moveq	r0, #0
   16554:	bl	172e4 <__assert_fail@plt+0x6100>
   16558:	cmp	r4, sl
   1655c:	ldr	r2, [sp, #44]	; 0x2c
   16560:	mov	fp, r0
   16564:	str	r0, [r7]
   16568:	ldmeq	r4, {r0, r1}
   1656c:	mov	r4, fp
   16570:	stmeq	fp, {r0, r1}
   16574:	ldr	r0, [r7, #4]
   16578:	mov	r1, #0
   1657c:	sub	r2, r2, r0
   16580:	add	r0, fp, r0, lsl #3
   16584:	lsl	r2, r2, #3
   16588:	bl	110b8 <memset@plt>
   1658c:	ldr	r3, [sp, #44]	; 0x2c
   16590:	str	r3, [r7, #4]
   16594:	ldr	r3, [r5, #4]
   16598:	add	sl, r4, r6, lsl #3
   1659c:	orr	r3, r3, #1
   165a0:	str	r3, [sp, #28]
   165a4:	add	r3, r5, #8
   165a8:	str	r3, [sp, #36]	; 0x24
   165ac:	ldr	r3, [r5, #44]	; 0x2c
   165b0:	ldr	fp, [r4, r6, lsl #3]
   165b4:	ldr	r7, [sl, #4]
   165b8:	str	r3, [sp, #16]
   165bc:	ldr	r3, [r5, #40]	; 0x28
   165c0:	mov	r2, r8
   165c4:	str	r3, [sp, #12]
   165c8:	add	r3, r5, #8
   165cc:	str	r3, [sp, #8]
   165d0:	ldr	r3, [sp, #28]
   165d4:	mov	r1, fp
   165d8:	str	r3, [sp, #4]
   165dc:	ldr	r3, [r5]
   165e0:	mov	r0, r7
   165e4:	str	r3, [sp]
   165e8:	mov	r3, r9
   165ec:	bl	157a0 <__assert_fail@plt+0x45bc>
   165f0:	cmp	fp, r0
   165f4:	bhi	1665c <__assert_fail@plt+0x5478>
   165f8:	ldr	r3, [pc, #120]	; 16678 <__assert_fail@plt+0x5494>
   165fc:	add	fp, r0, #1
   16600:	cmp	r7, r3
   16604:	str	fp, [r4, r6, lsl #3]
   16608:	beq	16614 <__assert_fail@plt+0x5430>
   1660c:	mov	r0, r7
   16610:	bl	17bd8 <__assert_fail@plt+0x69f4>
   16614:	mov	r0, fp
   16618:	bl	1719c <__assert_fail@plt+0x5fb8>
   1661c:	ldr	r3, [r5, #44]	; 0x2c
   16620:	mov	r2, r8
   16624:	mov	r1, fp
   16628:	str	r0, [sl, #4]
   1662c:	str	r3, [sp, #16]
   16630:	ldr	r3, [r5, #40]	; 0x28
   16634:	mov	r7, r0
   16638:	str	r3, [sp, #12]
   1663c:	add	r3, r5, #8
   16640:	str	r3, [sp, #8]
   16644:	ldr	r3, [sp, #28]
   16648:	str	r3, [sp, #4]
   1664c:	ldr	r3, [r5]
   16650:	str	r3, [sp]
   16654:	mov	r3, r9
   16658:	bl	157a0 <__assert_fail@plt+0x45bc>
   1665c:	ldr	r3, [sp, #24]
   16660:	ldr	r2, [sp, #32]
   16664:	mov	r0, r7
   16668:	str	r2, [r3]
   1666c:	add	sp, sp, #52	; 0x34
   16670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16674:	andeq	sl, r2, r8, lsr #2
   16678:			; <UNDEFINED> instruction: 0x0002a1b8
   1667c:	push	{r4, r5, r6, lr}
   16680:	mov	r5, r0
   16684:	bl	11094 <__errno_location@plt>
   16688:	cmp	r5, #0
   1668c:	mov	r1, #48	; 0x30
   16690:	ldr	r6, [r0]
   16694:	mov	r4, r0
   16698:	ldr	r0, [pc, #12]	; 166ac <__assert_fail@plt+0x54c8>
   1669c:	movne	r0, r5
   166a0:	bl	17578 <__assert_fail@plt+0x6394>
   166a4:	str	r6, [r4]
   166a8:	pop	{r4, r5, r6, pc}
   166ac:			; <UNDEFINED> instruction: 0x0002a2b8
   166b0:	ldr	r3, [pc, #12]	; 166c4 <__assert_fail@plt+0x54e0>
   166b4:	cmp	r0, #0
   166b8:	moveq	r0, r3
   166bc:	ldr	r0, [r0]
   166c0:	bx	lr
   166c4:			; <UNDEFINED> instruction: 0x0002a2b8
   166c8:	ldr	r3, [pc, #12]	; 166dc <__assert_fail@plt+0x54f8>
   166cc:	cmp	r0, #0
   166d0:	moveq	r0, r3
   166d4:	str	r1, [r0]
   166d8:	bx	lr
   166dc:			; <UNDEFINED> instruction: 0x0002a2b8
   166e0:	ldr	r3, [pc, #52]	; 1671c <__assert_fail@plt+0x5538>
   166e4:	cmp	r0, #0
   166e8:	moveq	r0, r3
   166ec:	add	r3, r0, #8
   166f0:	push	{lr}		; (str lr, [sp, #-4]!)
   166f4:	lsr	lr, r1, #5
   166f8:	and	r1, r1, #31
   166fc:	ldr	ip, [r3, lr, lsl #2]
   16700:	lsr	r0, ip, r1
   16704:	eor	r2, r2, r0
   16708:	and	r2, r2, #1
   1670c:	and	r0, r0, #1
   16710:	eor	r1, ip, r2, lsl r1
   16714:	str	r1, [r3, lr, lsl #2]
   16718:	pop	{pc}		; (ldr pc, [sp], #4)
   1671c:			; <UNDEFINED> instruction: 0x0002a2b8
   16720:	ldr	r3, [pc, #16]	; 16738 <__assert_fail@plt+0x5554>
   16724:	cmp	r0, #0
   16728:	movne	r3, r0
   1672c:	ldr	r0, [r3, #4]
   16730:	str	r1, [r3, #4]
   16734:	bx	lr
   16738:			; <UNDEFINED> instruction: 0x0002a2b8
   1673c:	ldr	r3, [pc, #44]	; 16770 <__assert_fail@plt+0x558c>
   16740:	cmp	r0, #0
   16744:	moveq	r0, r3
   16748:	mov	r3, #10
   1674c:	cmp	r2, #0
   16750:	cmpne	r1, #0
   16754:	str	r3, [r0]
   16758:	bne	16764 <__assert_fail@plt+0x5580>
   1675c:	push	{r4, lr}
   16760:	bl	111b4 <abort@plt>
   16764:	str	r1, [r0, #40]	; 0x28
   16768:	str	r2, [r0, #44]	; 0x2c
   1676c:	bx	lr
   16770:			; <UNDEFINED> instruction: 0x0002a2b8
   16774:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16778:	sub	sp, sp, #24
   1677c:	mov	sl, r3
   16780:	ldr	r4, [sp, #56]	; 0x38
   16784:	ldr	r3, [pc, #100]	; 167f0 <__assert_fail@plt+0x560c>
   16788:	cmp	r4, #0
   1678c:	moveq	r4, r3
   16790:	mov	r7, r0
   16794:	mov	r8, r1
   16798:	mov	r9, r2
   1679c:	bl	11094 <__errno_location@plt>
   167a0:	ldr	r3, [r4, #44]	; 0x2c
   167a4:	mov	r2, r9
   167a8:	mov	r1, r8
   167ac:	ldr	r6, [r0]
   167b0:	str	r3, [sp, #16]
   167b4:	ldr	r3, [r4, #40]	; 0x28
   167b8:	mov	r5, r0
   167bc:	str	r3, [sp, #12]
   167c0:	add	r3, r4, #8
   167c4:	str	r3, [sp, #8]
   167c8:	ldr	r3, [r4, #4]
   167cc:	mov	r0, r7
   167d0:	str	r3, [sp, #4]
   167d4:	ldr	r3, [r4]
   167d8:	str	r3, [sp]
   167dc:	mov	r3, sl
   167e0:	bl	157a0 <__assert_fail@plt+0x45bc>
   167e4:	str	r6, [r5]
   167e8:	add	sp, sp, #24
   167ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167f0:			; <UNDEFINED> instruction: 0x0002a2b8
   167f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167f8:	cmp	r3, #0
   167fc:	sub	sp, sp, #44	; 0x2c
   16800:	ldr	r4, [pc, #188]	; 168c4 <__assert_fail@plt+0x56e0>
   16804:	mov	r6, r2
   16808:	movne	r4, r3
   1680c:	mov	sl, r1
   16810:	mov	r9, r0
   16814:	bl	11094 <__errno_location@plt>
   16818:	ldr	r5, [r4, #4]
   1681c:	add	fp, r4, #8
   16820:	cmp	r6, #0
   16824:	orreq	r5, r5, #1
   16828:	mov	r1, #0
   1682c:	mov	r2, r9
   16830:	ldr	r3, [r0]
   16834:	mov	r8, r0
   16838:	str	r3, [sp, #28]
   1683c:	ldr	r3, [r4, #44]	; 0x2c
   16840:	mov	r0, r1
   16844:	str	r3, [sp, #16]
   16848:	ldr	r3, [r4, #40]	; 0x28
   1684c:	stmib	sp, {r5, fp}
   16850:	str	r3, [sp, #12]
   16854:	ldr	r3, [r4]
   16858:	str	r3, [sp]
   1685c:	mov	r3, sl
   16860:	bl	157a0 <__assert_fail@plt+0x45bc>
   16864:	add	r1, r0, #1
   16868:	mov	r7, r0
   1686c:	mov	r0, r1
   16870:	str	r1, [sp, #36]	; 0x24
   16874:	bl	1719c <__assert_fail@plt+0x5fb8>
   16878:	ldr	r3, [r4, #44]	; 0x2c
   1687c:	mov	r2, r9
   16880:	str	r3, [sp, #16]
   16884:	ldr	r3, [r4, #40]	; 0x28
   16888:	stmib	sp, {r5, fp}
   1688c:	str	r3, [sp, #12]
   16890:	ldr	r3, [r4]
   16894:	ldr	r1, [sp, #36]	; 0x24
   16898:	str	r3, [sp]
   1689c:	mov	r3, sl
   168a0:	str	r0, [sp, #32]
   168a4:	bl	157a0 <__assert_fail@plt+0x45bc>
   168a8:	ldr	r3, [sp, #28]
   168ac:	cmp	r6, #0
   168b0:	str	r3, [r8]
   168b4:	ldr	r0, [sp, #32]
   168b8:	strne	r7, [r6]
   168bc:	add	sp, sp, #44	; 0x2c
   168c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c4:			; <UNDEFINED> instruction: 0x0002a2b8
   168c8:	mov	r3, r2
   168cc:	mov	r2, #0
   168d0:	b	167f4 <__assert_fail@plt+0x5610>
   168d4:	push	{r4, r5, r6, r7, r8, lr}
   168d8:	mov	r6, #1
   168dc:	ldr	r4, [pc, #104]	; 1694c <__assert_fail@plt+0x5768>
   168e0:	ldr	r5, [r4]
   168e4:	add	r7, r5, #12
   168e8:	ldr	r3, [r4, #4]
   168ec:	add	r7, r7, #8
   168f0:	cmp	r6, r3
   168f4:	blt	1693c <__assert_fail@plt+0x5758>
   168f8:	ldr	r0, [r5, #4]
   168fc:	ldr	r6, [pc, #76]	; 16950 <__assert_fail@plt+0x576c>
   16900:	cmp	r0, r6
   16904:	beq	16918 <__assert_fail@plt+0x5734>
   16908:	bl	17bd8 <__assert_fail@plt+0x69f4>
   1690c:	mov	r3, #256	; 0x100
   16910:	str	r3, [r4, #8]
   16914:	str	r6, [r4, #12]
   16918:	ldr	r6, [pc, #52]	; 16954 <__assert_fail@plt+0x5770>
   1691c:	cmp	r5, r6
   16920:	beq	16930 <__assert_fail@plt+0x574c>
   16924:	mov	r0, r5
   16928:	bl	17bd8 <__assert_fail@plt+0x69f4>
   1692c:	str	r6, [r4]
   16930:	mov	r3, #1
   16934:	str	r3, [r4, #4]
   16938:	pop	{r4, r5, r6, r7, r8, pc}
   1693c:	ldr	r0, [r7, #-8]
   16940:	bl	17bd8 <__assert_fail@plt+0x69f4>
   16944:	add	r6, r6, #1
   16948:	b	168e8 <__assert_fail@plt+0x5704>
   1694c:	andeq	sl, r2, r8, lsr #2
   16950:			; <UNDEFINED> instruction: 0x0002a1b8
   16954:	andeq	sl, r2, r0, lsr r1
   16958:	ldr	r3, [pc, #4]	; 16964 <__assert_fail@plt+0x5780>
   1695c:	mvn	r2, #0
   16960:	b	164d4 <__assert_fail@plt+0x52f0>
   16964:			; <UNDEFINED> instruction: 0x0002a2b8
   16968:	ldr	r3, [pc]	; 16970 <__assert_fail@plt+0x578c>
   1696c:	b	164d4 <__assert_fail@plt+0x52f0>
   16970:			; <UNDEFINED> instruction: 0x0002a2b8
   16974:	mov	r1, r0
   16978:	mov	r0, #0
   1697c:	b	16958 <__assert_fail@plt+0x5774>
   16980:	mov	r2, r1
   16984:	mov	r1, r0
   16988:	mov	r0, #0
   1698c:	b	16968 <__assert_fail@plt+0x5784>
   16990:	push	{r4, r5, lr}
   16994:	sub	sp, sp, #52	; 0x34
   16998:	mov	r5, r2
   1699c:	mov	r4, r0
   169a0:	mov	r0, sp
   169a4:	bl	1565c <__assert_fail@plt+0x4478>
   169a8:	mov	r3, sp
   169ac:	mvn	r2, #0
   169b0:	mov	r1, r5
   169b4:	mov	r0, r4
   169b8:	bl	164d4 <__assert_fail@plt+0x52f0>
   169bc:	add	sp, sp, #52	; 0x34
   169c0:	pop	{r4, r5, pc}
   169c4:	push	{r4, r5, r6, lr}
   169c8:	sub	sp, sp, #48	; 0x30
   169cc:	mov	r5, r2
   169d0:	mov	r6, r3
   169d4:	mov	r4, r0
   169d8:	mov	r0, sp
   169dc:	bl	1565c <__assert_fail@plt+0x4478>
   169e0:	mov	r3, sp
   169e4:	mov	r2, r6
   169e8:	mov	r1, r5
   169ec:	mov	r0, r4
   169f0:	bl	164d4 <__assert_fail@plt+0x52f0>
   169f4:	add	sp, sp, #48	; 0x30
   169f8:	pop	{r4, r5, r6, pc}
   169fc:	mov	r2, r1
   16a00:	mov	r1, r0
   16a04:	mov	r0, #0
   16a08:	b	16990 <__assert_fail@plt+0x57ac>
   16a0c:	mov	r3, r2
   16a10:	mov	r2, r1
   16a14:	mov	r1, r0
   16a18:	mov	r0, #0
   16a1c:	b	169c4 <__assert_fail@plt+0x57e0>
   16a20:	push	{r4, r5, r6, lr}
   16a24:	mov	r4, r0
   16a28:	ldr	lr, [pc, #80]	; 16a80 <__assert_fail@plt+0x589c>
   16a2c:	mov	r5, r1
   16a30:	mov	r6, r2
   16a34:	ldm	lr!, {r0, r1, r2, r3}
   16a38:	sub	sp, sp, #48	; 0x30
   16a3c:	mov	ip, sp
   16a40:	stmia	ip!, {r0, r1, r2, r3}
   16a44:	ldm	lr!, {r0, r1, r2, r3}
   16a48:	stmia	ip!, {r0, r1, r2, r3}
   16a4c:	ldm	lr, {r0, r1, r2, r3}
   16a50:	stm	ip, {r0, r1, r2, r3}
   16a54:	mov	r1, r6
   16a58:	mov	r2, #1
   16a5c:	mov	r0, sp
   16a60:	bl	166e0 <__assert_fail@plt+0x54fc>
   16a64:	mov	r3, sp
   16a68:	mov	r2, r5
   16a6c:	mov	r1, r4
   16a70:	mov	r0, #0
   16a74:	bl	164d4 <__assert_fail@plt+0x52f0>
   16a78:	add	sp, sp, #48	; 0x30
   16a7c:	pop	{r4, r5, r6, pc}
   16a80:			; <UNDEFINED> instruction: 0x0002a2b8
   16a84:	mov	r2, r1
   16a88:	mvn	r1, #0
   16a8c:	b	16a20 <__assert_fail@plt+0x583c>
   16a90:	mov	r1, #58	; 0x3a
   16a94:	b	16a84 <__assert_fail@plt+0x58a0>
   16a98:	mov	r2, #58	; 0x3a
   16a9c:	b	16a20 <__assert_fail@plt+0x583c>
   16aa0:	push	{r4, r5, lr}
   16aa4:	sub	sp, sp, #100	; 0x64
   16aa8:	mov	r4, r0
   16aac:	mov	r0, sp
   16ab0:	mov	r5, r2
   16ab4:	bl	1565c <__assert_fail@plt+0x4478>
   16ab8:	mov	ip, sp
   16abc:	add	lr, sp, #48	; 0x30
   16ac0:	ldm	ip!, {r0, r1, r2, r3}
   16ac4:	stmia	lr!, {r0, r1, r2, r3}
   16ac8:	ldm	ip!, {r0, r1, r2, r3}
   16acc:	stmia	lr!, {r0, r1, r2, r3}
   16ad0:	ldm	ip, {r0, r1, r2, r3}
   16ad4:	stm	lr, {r0, r1, r2, r3}
   16ad8:	mov	r2, #1
   16adc:	mov	r1, #58	; 0x3a
   16ae0:	add	r0, sp, #48	; 0x30
   16ae4:	bl	166e0 <__assert_fail@plt+0x54fc>
   16ae8:	add	r3, sp, #48	; 0x30
   16aec:	mvn	r2, #0
   16af0:	mov	r1, r5
   16af4:	mov	r0, r4
   16af8:	bl	164d4 <__assert_fail@plt+0x52f0>
   16afc:	add	sp, sp, #100	; 0x64
   16b00:	pop	{r4, r5, pc}
   16b04:	push	{r4, r5, r6, r7, lr}
   16b08:	mov	r4, r0
   16b0c:	ldr	lr, [pc, #84]	; 16b68 <__assert_fail@plt+0x5984>
   16b10:	mov	r6, r1
   16b14:	mov	r7, r2
   16b18:	mov	r5, r3
   16b1c:	ldm	lr!, {r0, r1, r2, r3}
   16b20:	sub	sp, sp, #52	; 0x34
   16b24:	mov	ip, sp
   16b28:	stmia	ip!, {r0, r1, r2, r3}
   16b2c:	ldm	lr!, {r0, r1, r2, r3}
   16b30:	stmia	ip!, {r0, r1, r2, r3}
   16b34:	ldm	lr, {r0, r1, r2, r3}
   16b38:	stm	ip, {r0, r1, r2, r3}
   16b3c:	mov	r2, r7
   16b40:	mov	r1, r6
   16b44:	mov	r0, sp
   16b48:	bl	1673c <__assert_fail@plt+0x5558>
   16b4c:	mov	r3, sp
   16b50:	ldr	r2, [sp, #72]	; 0x48
   16b54:	mov	r1, r5
   16b58:	mov	r0, r4
   16b5c:	bl	164d4 <__assert_fail@plt+0x52f0>
   16b60:	add	sp, sp, #52	; 0x34
   16b64:	pop	{r4, r5, r6, r7, pc}
   16b68:			; <UNDEFINED> instruction: 0x0002a2b8
   16b6c:	mvn	ip, #0
   16b70:	push	{r0, r1, r2, lr}
   16b74:	str	ip, [sp]
   16b78:	bl	16b04 <__assert_fail@plt+0x5920>
   16b7c:	add	sp, sp, #12
   16b80:	pop	{pc}		; (ldr pc, [sp], #4)
   16b84:	mov	r3, r2
   16b88:	mov	r2, r1
   16b8c:	mov	r1, r0
   16b90:	mov	r0, #0
   16b94:	b	16b6c <__assert_fail@plt+0x5988>
   16b98:	push	{r0, r1, r2, lr}
   16b9c:	str	r3, [sp]
   16ba0:	mov	r3, r2
   16ba4:	mov	r2, r1
   16ba8:	mov	r1, r0
   16bac:	mov	r0, #0
   16bb0:	bl	16b04 <__assert_fail@plt+0x5920>
   16bb4:	add	sp, sp, #12
   16bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bbc:	ldr	r3, [pc]	; 16bc4 <__assert_fail@plt+0x59e0>
   16bc0:	b	164d4 <__assert_fail@plt+0x52f0>
   16bc4:	andeq	sl, r2, r8, lsr r1
   16bc8:	mov	r2, r1
   16bcc:	mov	r1, r0
   16bd0:	mov	r0, #0
   16bd4:	b	16bbc <__assert_fail@plt+0x59d8>
   16bd8:	mvn	r2, #0
   16bdc:	b	16bbc <__assert_fail@plt+0x59d8>
   16be0:	mov	r1, r0
   16be4:	mov	r0, #0
   16be8:	b	16bd8 <__assert_fail@plt+0x59f4>
   16bec:	push	{r4, lr}
   16bf0:	sub	sp, sp, #104	; 0x68
   16bf4:	mov	r4, r0
   16bf8:	mov	r1, sp
   16bfc:	ldr	r0, [pc, #36]	; 16c28 <__assert_fail@plt+0x5a44>
   16c00:	bl	184d8 <__assert_fail@plt+0x72f4>
   16c04:	cmp	r0, #0
   16c08:	movne	r4, #0
   16c0c:	ldrdeq	r2, [sp, #96]	; 0x60
   16c10:	strdeq	r2, [r4]
   16c14:	ldrdeq	r2, [sp]
   16c18:	strdeq	r2, [r4, #8]
   16c1c:	mov	r0, r4
   16c20:	add	sp, sp, #104	; 0x68
   16c24:	pop	{r4, pc}
   16c28:	ldrdeq	r9, [r1], -r8
   16c2c:	cmp	r0, #2
   16c30:	push	{r4, r5, r6, r7, r8, lr}
   16c34:	mov	r4, r0
   16c38:	bhi	16c60 <__assert_fail@plt+0x5a7c>
   16c3c:	bl	17d90 <__assert_fail@plt+0x6bac>
   16c40:	mov	r6, r0
   16c44:	bl	11094 <__errno_location@plt>
   16c48:	ldr	r7, [r0]
   16c4c:	mov	r5, r0
   16c50:	mov	r0, r4
   16c54:	mov	r4, r6
   16c58:	bl	111c0 <close@plt>
   16c5c:	str	r7, [r5]
   16c60:	mov	r0, r4
   16c64:	pop	{r4, r5, r6, r7, r8, pc}
   16c68:	push	{r4, r5, r6, lr}
   16c6c:	sub	sp, sp, #32
   16c70:	cmp	r1, #0
   16c74:	mov	r5, r0
   16c78:	ldr	r4, [sp, #48]	; 0x30
   16c7c:	ldr	r6, [sp, #52]	; 0x34
   16c80:	beq	16d34 <__assert_fail@plt+0x5b50>
   16c84:	stm	sp, {r2, r3}
   16c88:	mov	r3, r1
   16c8c:	ldr	r2, [pc, #860]	; 16ff0 <__assert_fail@plt+0x5e0c>
   16c90:	mov	r1, #1
   16c94:	bl	110dc <__fprintf_chk@plt>
   16c98:	mov	r2, #5
   16c9c:	ldr	r1, [pc, #848]	; 16ff4 <__assert_fail@plt+0x5e10>
   16ca0:	mov	r0, #0
   16ca4:	bl	10f80 <dcgettext@plt>
   16ca8:	ldr	r3, [pc, #840]	; 16ff8 <__assert_fail@plt+0x5e14>
   16cac:	ldr	r2, [pc, #840]	; 16ffc <__assert_fail@plt+0x5e18>
   16cb0:	str	r3, [sp]
   16cb4:	mov	r1, #1
   16cb8:	mov	r3, r0
   16cbc:	mov	r0, r5
   16cc0:	bl	110dc <__fprintf_chk@plt>
   16cc4:	mov	r1, r5
   16cc8:	mov	r0, #10
   16ccc:	bl	10f74 <fputc_unlocked@plt>
   16cd0:	mov	r2, #5
   16cd4:	ldr	r1, [pc, #804]	; 17000 <__assert_fail@plt+0x5e1c>
   16cd8:	mov	r0, #0
   16cdc:	bl	10f80 <dcgettext@plt>
   16ce0:	mov	r1, #1
   16ce4:	ldr	r3, [pc, #792]	; 17004 <__assert_fail@plt+0x5e20>
   16ce8:	mov	r2, r0
   16cec:	mov	r0, r5
   16cf0:	bl	110dc <__fprintf_chk@plt>
   16cf4:	mov	r1, r5
   16cf8:	mov	r0, #10
   16cfc:	bl	10f74 <fputc_unlocked@plt>
   16d00:	cmp	r6, #9
   16d04:	ldrls	pc, [pc, r6, lsl #2]
   16d08:	b	16fe4 <__assert_fail@plt+0x5e00>
   16d0c:	andeq	r6, r1, r4, lsr #28
   16d10:	andeq	r6, r1, ip, asr #26
   16d14:	andeq	r6, r1, r8, ror sp
   16d18:	andeq	r6, r1, ip, lsr #27
   16d1c:	andeq	r6, r1, r8, ror #27
   16d20:	andeq	r6, r1, ip, lsr #28
   16d24:	andeq	r6, r1, r4, ror lr
   16d28:	andeq	r6, r1, r4, asr #29
   16d2c:	andeq	r6, r1, ip, lsl pc
   16d30:	andeq	r6, r1, ip, ror pc
   16d34:	str	r3, [sp]
   16d38:	mov	r1, #1
   16d3c:	mov	r3, r2
   16d40:	ldr	r2, [pc, #704]	; 17008 <__assert_fail@plt+0x5e24>
   16d44:	bl	110dc <__fprintf_chk@plt>
   16d48:	b	16c98 <__assert_fail@plt+0x5ab4>
   16d4c:	mov	r2, #5
   16d50:	ldr	r1, [pc, #692]	; 1700c <__assert_fail@plt+0x5e28>
   16d54:	mov	r0, #0
   16d58:	bl	10f80 <dcgettext@plt>
   16d5c:	ldr	r3, [r4]
   16d60:	mov	r1, #1
   16d64:	mov	r2, r0
   16d68:	mov	r0, r5
   16d6c:	add	sp, sp, #32
   16d70:	pop	{r4, r5, r6, lr}
   16d74:	b	110dc <__fprintf_chk@plt>
   16d78:	mov	r2, #5
   16d7c:	ldr	r1, [pc, #652]	; 17010 <__assert_fail@plt+0x5e2c>
   16d80:	mov	r0, #0
   16d84:	bl	10f80 <dcgettext@plt>
   16d88:	ldr	r3, [r4, #4]
   16d8c:	mov	r1, #1
   16d90:	str	r3, [sp, #48]	; 0x30
   16d94:	ldr	r3, [r4]
   16d98:	mov	r2, r0
   16d9c:	mov	r0, r5
   16da0:	add	sp, sp, #32
   16da4:	pop	{r4, r5, r6, lr}
   16da8:	b	110dc <__fprintf_chk@plt>
   16dac:	mov	r2, #5
   16db0:	ldr	r1, [pc, #604]	; 17014 <__assert_fail@plt+0x5e30>
   16db4:	mov	r0, #0
   16db8:	bl	10f80 <dcgettext@plt>
   16dbc:	ldr	r3, [r4, #8]
   16dc0:	mov	r1, #1
   16dc4:	str	r3, [sp, #52]	; 0x34
   16dc8:	ldr	r3, [r4, #4]
   16dcc:	str	r3, [sp, #48]	; 0x30
   16dd0:	ldr	r3, [r4]
   16dd4:	mov	r2, r0
   16dd8:	mov	r0, r5
   16ddc:	add	sp, sp, #32
   16de0:	pop	{r4, r5, r6, lr}
   16de4:	b	110dc <__fprintf_chk@plt>
   16de8:	mov	r2, #5
   16dec:	ldr	r1, [pc, #548]	; 17018 <__assert_fail@plt+0x5e34>
   16df0:	mov	r0, #0
   16df4:	bl	10f80 <dcgettext@plt>
   16df8:	ldr	r3, [r4, #12]
   16dfc:	mov	r1, #1
   16e00:	str	r3, [sp, #8]
   16e04:	ldr	r3, [r4, #8]
   16e08:	str	r3, [sp, #4]
   16e0c:	ldr	r3, [r4, #4]
   16e10:	str	r3, [sp]
   16e14:	ldr	r3, [r4]
   16e18:	mov	r2, r0
   16e1c:	mov	r0, r5
   16e20:	bl	110dc <__fprintf_chk@plt>
   16e24:	add	sp, sp, #32
   16e28:	pop	{r4, r5, r6, pc}
   16e2c:	mov	r2, #5
   16e30:	ldr	r1, [pc, #484]	; 1701c <__assert_fail@plt+0x5e38>
   16e34:	mov	r0, #0
   16e38:	bl	10f80 <dcgettext@plt>
   16e3c:	ldr	r3, [r4, #16]
   16e40:	mov	r1, #1
   16e44:	str	r3, [sp, #12]
   16e48:	ldr	r3, [r4, #12]
   16e4c:	str	r3, [sp, #8]
   16e50:	ldr	r3, [r4, #8]
   16e54:	str	r3, [sp, #4]
   16e58:	ldr	r3, [r4, #4]
   16e5c:	str	r3, [sp]
   16e60:	ldr	r3, [r4]
   16e64:	mov	r2, r0
   16e68:	mov	r0, r5
   16e6c:	bl	110dc <__fprintf_chk@plt>
   16e70:	b	16e24 <__assert_fail@plt+0x5c40>
   16e74:	mov	r2, #5
   16e78:	ldr	r1, [pc, #416]	; 17020 <__assert_fail@plt+0x5e3c>
   16e7c:	mov	r0, #0
   16e80:	bl	10f80 <dcgettext@plt>
   16e84:	ldr	r3, [r4, #20]
   16e88:	mov	r1, #1
   16e8c:	str	r3, [sp, #16]
   16e90:	ldr	r3, [r4, #16]
   16e94:	str	r3, [sp, #12]
   16e98:	ldr	r3, [r4, #12]
   16e9c:	str	r3, [sp, #8]
   16ea0:	ldr	r3, [r4, #8]
   16ea4:	str	r3, [sp, #4]
   16ea8:	ldr	r3, [r4, #4]
   16eac:	str	r3, [sp]
   16eb0:	ldr	r3, [r4]
   16eb4:	mov	r2, r0
   16eb8:	mov	r0, r5
   16ebc:	bl	110dc <__fprintf_chk@plt>
   16ec0:	b	16e24 <__assert_fail@plt+0x5c40>
   16ec4:	mov	r2, #5
   16ec8:	ldr	r1, [pc, #340]	; 17024 <__assert_fail@plt+0x5e40>
   16ecc:	mov	r0, #0
   16ed0:	bl	10f80 <dcgettext@plt>
   16ed4:	ldr	r3, [r4, #24]
   16ed8:	mov	r1, #1
   16edc:	str	r3, [sp, #20]
   16ee0:	ldr	r3, [r4, #20]
   16ee4:	str	r3, [sp, #16]
   16ee8:	ldr	r3, [r4, #16]
   16eec:	str	r3, [sp, #12]
   16ef0:	ldr	r3, [r4, #12]
   16ef4:	str	r3, [sp, #8]
   16ef8:	ldr	r3, [r4, #8]
   16efc:	str	r3, [sp, #4]
   16f00:	ldr	r3, [r4, #4]
   16f04:	str	r3, [sp]
   16f08:	ldr	r3, [r4]
   16f0c:	mov	r2, r0
   16f10:	mov	r0, r5
   16f14:	bl	110dc <__fprintf_chk@plt>
   16f18:	b	16e24 <__assert_fail@plt+0x5c40>
   16f1c:	mov	r2, #5
   16f20:	ldr	r1, [pc, #256]	; 17028 <__assert_fail@plt+0x5e44>
   16f24:	mov	r0, #0
   16f28:	bl	10f80 <dcgettext@plt>
   16f2c:	ldr	r3, [r4, #28]
   16f30:	mov	r1, #1
   16f34:	str	r3, [sp, #24]
   16f38:	ldr	r3, [r4, #24]
   16f3c:	str	r3, [sp, #20]
   16f40:	ldr	r3, [r4, #20]
   16f44:	str	r3, [sp, #16]
   16f48:	ldr	r3, [r4, #16]
   16f4c:	str	r3, [sp, #12]
   16f50:	ldr	r3, [r4, #12]
   16f54:	str	r3, [sp, #8]
   16f58:	ldr	r3, [r4, #8]
   16f5c:	str	r3, [sp, #4]
   16f60:	ldr	r3, [r4, #4]
   16f64:	str	r3, [sp]
   16f68:	ldr	r3, [r4]
   16f6c:	mov	r2, r0
   16f70:	mov	r0, r5
   16f74:	bl	110dc <__fprintf_chk@plt>
   16f78:	b	16e24 <__assert_fail@plt+0x5c40>
   16f7c:	ldr	r1, [pc, #168]	; 1702c <__assert_fail@plt+0x5e48>
   16f80:	mov	r2, #5
   16f84:	mov	r0, #0
   16f88:	bl	10f80 <dcgettext@plt>
   16f8c:	ldr	r3, [r4, #32]
   16f90:	mov	r1, #1
   16f94:	str	r3, [sp, #28]
   16f98:	ldr	r3, [r4, #28]
   16f9c:	str	r3, [sp, #24]
   16fa0:	ldr	r3, [r4, #24]
   16fa4:	str	r3, [sp, #20]
   16fa8:	ldr	r3, [r4, #20]
   16fac:	str	r3, [sp, #16]
   16fb0:	ldr	r3, [r4, #16]
   16fb4:	str	r3, [sp, #12]
   16fb8:	ldr	r3, [r4, #12]
   16fbc:	str	r3, [sp, #8]
   16fc0:	ldr	r3, [r4, #8]
   16fc4:	str	r3, [sp, #4]
   16fc8:	ldr	r3, [r4, #4]
   16fcc:	str	r3, [sp]
   16fd0:	ldr	r3, [r4]
   16fd4:	mov	r2, r0
   16fd8:	mov	r0, r5
   16fdc:	bl	110dc <__fprintf_chk@plt>
   16fe0:	b	16e24 <__assert_fail@plt+0x5c40>
   16fe4:	mov	r2, #5
   16fe8:	ldr	r1, [pc, #64]	; 17030 <__assert_fail@plt+0x5e4c>
   16fec:	b	16f84 <__assert_fail@plt+0x5da0>
   16ff0:	strdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   16ff4:	andeq	r9, r1, ip, lsl #2
   16ff8:	andeq	r0, r0, r6, ror #15
   16ffc:	ldrdeq	r9, [r1], -sl
   17000:	andeq	r9, r1, r0, lsl r1
   17004:			; <UNDEFINED> instruction: 0x000191bb
   17008:	andeq	r9, r1, r5, lsl #2
   1700c:	ldrdeq	r9, [r1], -sp
   17010:	andeq	r9, r1, sp, ror #3
   17014:	andeq	r9, r1, r4, lsl #4
   17018:	andeq	r9, r1, r0, lsr #4
   1701c:	andeq	r9, r1, r0, asr #4
   17020:	andeq	r9, r1, r4, ror #4
   17024:	andeq	r9, r1, ip, lsl #5
   17028:			; <UNDEFINED> instruction: 0x000192b8
   1702c:	andeq	r9, r1, r8, ror #5
   17030:	andeq	r9, r1, ip, lsl r3
   17034:	push	{r0, r1, r4, lr}
   17038:	mov	ip, #0
   1703c:	ldr	lr, [sp, #16]
   17040:	ldr	r4, [lr, ip, lsl #2]
   17044:	cmp	r4, #0
   17048:	bne	17060 <__assert_fail@plt+0x5e7c>
   1704c:	str	ip, [sp, #4]
   17050:	str	lr, [sp]
   17054:	bl	16c68 <__assert_fail@plt+0x5a84>
   17058:	add	sp, sp, #8
   1705c:	pop	{r4, pc}
   17060:	add	ip, ip, #1
   17064:	b	17040 <__assert_fail@plt+0x5e5c>
   17068:	push	{r4, r5, lr}
   1706c:	sub	sp, sp, #52	; 0x34
   17070:	mov	ip, #0
   17074:	ldr	r5, [sp, #64]	; 0x40
   17078:	add	lr, sp, #8
   1707c:	ldr	r4, [r5, ip, lsl #2]
   17080:	cmp	r4, #0
   17084:	str	r4, [lr, ip, lsl #2]
   17088:	beq	17098 <__assert_fail@plt+0x5eb4>
   1708c:	add	ip, ip, #1
   17090:	cmp	ip, #10
   17094:	bne	1707c <__assert_fail@plt+0x5e98>
   17098:	str	ip, [sp, #4]
   1709c:	str	lr, [sp]
   170a0:	bl	16c68 <__assert_fail@plt+0x5a84>
   170a4:	add	sp, sp, #52	; 0x34
   170a8:	pop	{r4, r5, pc}
   170ac:	push	{r3}		; (str r3, [sp, #-4]!)
   170b0:	push	{r0, r1, r2, r3, lr}
   170b4:	add	r3, sp, #24
   170b8:	str	r3, [sp, #12]
   170bc:	str	r3, [sp]
   170c0:	ldr	r3, [sp, #20]
   170c4:	bl	17068 <__assert_fail@plt+0x5e84>
   170c8:	add	sp, sp, #16
   170cc:	pop	{lr}		; (ldr lr, [sp], #4)
   170d0:	add	sp, sp, #4
   170d4:	bx	lr
   170d8:	ldr	r3, [pc, #116]	; 17154 <__assert_fail@plt+0x5f70>
   170dc:	push	{r4, lr}
   170e0:	mov	r0, #10
   170e4:	ldr	r1, [r3]
   170e8:	bl	10f74 <fputc_unlocked@plt>
   170ec:	mov	r2, #5
   170f0:	ldr	r1, [pc, #96]	; 17158 <__assert_fail@plt+0x5f74>
   170f4:	mov	r0, #0
   170f8:	bl	10f80 <dcgettext@plt>
   170fc:	ldr	r2, [pc, #88]	; 1715c <__assert_fail@plt+0x5f78>
   17100:	mov	r1, r0
   17104:	mov	r0, #1
   17108:	bl	110c4 <__printf_chk@plt>
   1710c:	mov	r2, #5
   17110:	ldr	r1, [pc, #72]	; 17160 <__assert_fail@plt+0x5f7c>
   17114:	mov	r0, #0
   17118:	bl	10f80 <dcgettext@plt>
   1711c:	ldr	r3, [pc, #64]	; 17164 <__assert_fail@plt+0x5f80>
   17120:	ldr	r2, [pc, #64]	; 17168 <__assert_fail@plt+0x5f84>
   17124:	mov	r1, r0
   17128:	mov	r0, #1
   1712c:	bl	110c4 <__printf_chk@plt>
   17130:	mov	r2, #5
   17134:	ldr	r1, [pc, #48]	; 1716c <__assert_fail@plt+0x5f88>
   17138:	mov	r0, #0
   1713c:	bl	10f80 <dcgettext@plt>
   17140:	ldr	r2, [pc, #40]	; 17170 <__assert_fail@plt+0x5f8c>
   17144:	pop	{r4, lr}
   17148:	mov	r1, r0
   1714c:	mov	r0, #1
   17150:	b	110c4 <__printf_chk@plt>
   17154:	andeq	sl, r2, ip, ror r1
   17158:	andeq	r9, r1, r8, asr r3
   1715c:	andeq	r9, r1, ip, ror #6
   17160:	andeq	r9, r1, r2, lsl #7
   17164:			; <UNDEFINED> instruction: 0x000189b4
   17168:	ldrdeq	r8, [r1], -ip
   1716c:	muleq	r1, r6, r3
   17170:			; <UNDEFINED> instruction: 0x000193bd
   17174:	push	{r4, lr}
   17178:	bl	17710 <__assert_fail@plt+0x652c>
   1717c:	cmp	r0, #0
   17180:	popne	{r4, pc}
   17184:	bl	17608 <__assert_fail@plt+0x6424>
   17188:	push	{r4, lr}
   1718c:	bl	17710 <__assert_fail@plt+0x652c>
   17190:	cmp	r0, #0
   17194:	popne	{r4, pc}
   17198:	bl	17608 <__assert_fail@plt+0x6424>
   1719c:	b	17174 <__assert_fail@plt+0x5f90>
   171a0:	push	{r4, r5, r6, lr}
   171a4:	mov	r5, r0
   171a8:	mov	r4, r1
   171ac:	bl	17750 <__assert_fail@plt+0x656c>
   171b0:	cmp	r0, #0
   171b4:	popne	{r4, r5, r6, pc}
   171b8:	adds	r4, r4, #0
   171bc:	movne	r4, #1
   171c0:	cmp	r5, #0
   171c4:	orreq	r4, r4, #1
   171c8:	cmp	r4, #0
   171cc:	popeq	{r4, r5, r6, pc}
   171d0:	bl	17608 <__assert_fail@plt+0x6424>
   171d4:	push	{r4, lr}
   171d8:	cmp	r1, #0
   171dc:	orreq	r1, r1, #1
   171e0:	bl	17750 <__assert_fail@plt+0x656c>
   171e4:	cmp	r0, #0
   171e8:	popne	{r4, pc}
   171ec:	bl	17608 <__assert_fail@plt+0x6424>
   171f0:	push	{r4, r5, r6, lr}
   171f4:	mov	r6, r0
   171f8:	mov	r5, r1
   171fc:	mov	r4, r2
   17200:	bl	17d44 <__assert_fail@plt+0x6b60>
   17204:	cmp	r0, #0
   17208:	popne	{r4, r5, r6, pc}
   1720c:	cmp	r6, #0
   17210:	beq	17220 <__assert_fail@plt+0x603c>
   17214:	cmp	r5, #0
   17218:	cmpne	r4, #0
   1721c:	popeq	{r4, r5, r6, pc}
   17220:	bl	17608 <__assert_fail@plt+0x6424>
   17224:	b	171f0 <__assert_fail@plt+0x600c>
   17228:	cmp	r2, #0
   1722c:	cmpne	r1, #0
   17230:	moveq	r2, #1
   17234:	moveq	r1, r2
   17238:	push	{r4, lr}
   1723c:	bl	17d44 <__assert_fail@plt+0x6b60>
   17240:	cmp	r0, #0
   17244:	popne	{r4, pc}
   17248:	bl	17608 <__assert_fail@plt+0x6424>
   1724c:	mov	r2, r1
   17250:	mov	r1, r0
   17254:	mov	r0, #0
   17258:	b	171f0 <__assert_fail@plt+0x600c>
   1725c:	mov	r2, r1
   17260:	mov	r1, r0
   17264:	mov	r0, #0
   17268:	b	17228 <__assert_fail@plt+0x6044>
   1726c:	push	{r4, r5, r6, r7, r8, lr}
   17270:	subs	r7, r0, #0
   17274:	mov	r5, r1
   17278:	mov	r6, r2
   1727c:	ldr	r4, [r1]
   17280:	bne	172bc <__assert_fail@plt+0x60d8>
   17284:	cmp	r4, #0
   17288:	bne	172a4 <__assert_fail@plt+0x60c0>
   1728c:	mov	r1, r2
   17290:	mov	r0, #64	; 0x40
   17294:	bl	17e7c <__assert_fail@plt+0x6c98>
   17298:	cmp	r0, #0
   1729c:	movne	r4, r0
   172a0:	addeq	r4, r0, #1
   172a4:	mov	r2, r6
   172a8:	mov	r1, r4
   172ac:	mov	r0, r7
   172b0:	bl	171f0 <__assert_fail@plt+0x600c>
   172b4:	str	r4, [r5]
   172b8:	pop	{r4, r5, r6, r7, r8, pc}
   172bc:	lsr	r2, r4, #1
   172c0:	add	r3, r2, #1
   172c4:	mvn	r3, r3
   172c8:	cmp	r4, r3
   172cc:	addls	r4, r4, #1
   172d0:	addls	r4, r4, r2
   172d4:	bls	172a4 <__assert_fail@plt+0x60c0>
   172d8:	bl	17608 <__assert_fail@plt+0x6424>
   172dc:	mov	r2, #1
   172e0:	b	1726c <__assert_fail@plt+0x6088>
   172e4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172e8:	mov	sl, r0
   172ec:	ldr	r8, [r1]
   172f0:	mov	fp, r1
   172f4:	mov	r5, r2
   172f8:	asrs	r4, r8, #1
   172fc:	mov	r9, r3
   17300:	ldr	r7, [sp, #48]	; 0x30
   17304:	bpl	173a0 <__assert_fail@plt+0x61bc>
   17308:	rsb	r2, r4, #-2147483648	; 0x80000000
   1730c:	cmp	r8, r2
   17310:	movge	r2, #0
   17314:	movlt	r2, #1
   17318:	mvn	r3, r9
   1731c:	cmp	r2, #0
   17320:	lsr	r3, r3, #31
   17324:	addeq	r4, r4, r8
   17328:	mvnne	r4, #-2147483648	; 0x80000000
   1732c:	mov	r0, r3
   17330:	cmp	r9, r4
   17334:	movge	r0, #0
   17338:	andlt	r0, r0, #1
   1733c:	cmp	r0, #0
   17340:	str	r3, [sp, #4]
   17344:	bne	17514 <__assert_fail@plt+0x6330>
   17348:	cmp	r7, #0
   1734c:	bge	17460 <__assert_fail@plt+0x627c>
   17350:	cmp	r4, #0
   17354:	bge	173b8 <__assert_fail@plt+0x61d4>
   17358:	mov	r1, r7
   1735c:	mvn	r0, #-2147483648	; 0x80000000
   17360:	bl	18088 <__assert_fail@plt+0x6ea4>
   17364:	cmp	r0, r4
   17368:	movle	r0, #0
   1736c:	movgt	r0, #1
   17370:	cmp	r0, #0
   17374:	mvnne	r6, #-2147483648	; 0x80000000
   17378:	beq	173c8 <__assert_fail@plt+0x61e4>
   1737c:	mov	r1, r7
   17380:	mov	r0, r6
   17384:	bl	18088 <__assert_fail@plt+0x6ea4>
   17388:	mov	r1, r7
   1738c:	mov	r4, r0
   17390:	mov	r0, r6
   17394:	bl	182a8 <__assert_fail@plt+0x70c4>
   17398:	sub	r1, r6, r1
   1739c:	b	173d8 <__assert_fail@plt+0x61f4>
   173a0:	mvn	r2, #-2147483648	; 0x80000000
   173a4:	sub	r2, r2, r4
   173a8:	cmp	r8, r2
   173ac:	movle	r2, #0
   173b0:	movgt	r2, #1
   173b4:	b	17318 <__assert_fail@plt+0x6134>
   173b8:	cmn	r7, #1
   173bc:	movne	r1, r7
   173c0:	movne	r0, #-2147483648	; 0x80000000
   173c4:	bne	1752c <__assert_fail@plt+0x6348>
   173c8:	mul	r1, r7, r4
   173cc:	cmp	r1, #63	; 0x3f
   173d0:	movle	r6, #64	; 0x40
   173d4:	ble	1737c <__assert_fail@plt+0x6198>
   173d8:	cmp	sl, #0
   173dc:	sub	r2, r4, r8
   173e0:	streq	sl, [fp]
   173e4:	cmp	r2, r5
   173e8:	bge	174bc <__assert_fail@plt+0x62d8>
   173ec:	cmp	r5, #0
   173f0:	bge	17488 <__assert_fail@plt+0x62a4>
   173f4:	rsb	r2, r5, #-2147483648	; 0x80000000
   173f8:	cmp	r8, r2
   173fc:	movge	r2, #0
   17400:	movlt	r2, #1
   17404:	cmp	r2, #0
   17408:	bne	1745c <__assert_fail@plt+0x6278>
   1740c:	ldr	r0, [sp, #4]
   17410:	add	r5, r8, r5
   17414:	cmp	r9, r5
   17418:	movge	r0, #0
   1741c:	andlt	r0, r0, #1
   17420:	cmp	r0, #0
   17424:	mov	r4, r5
   17428:	bne	1745c <__assert_fail@plt+0x6278>
   1742c:	cmp	r7, #0
   17430:	bge	174d0 <__assert_fail@plt+0x62ec>
   17434:	cmp	r5, #0
   17438:	bge	174a8 <__assert_fail@plt+0x62c4>
   1743c:	mov	r1, r7
   17440:	mvn	r0, #-2147483648	; 0x80000000
   17444:	bl	18088 <__assert_fail@plt+0x6ea4>
   17448:	cmp	r5, r0
   1744c:	movge	r0, #0
   17450:	movlt	r0, #1
   17454:	cmp	r0, #0
   17458:	beq	174b8 <__assert_fail@plt+0x62d4>
   1745c:	bl	17608 <__assert_fail@plt+0x6424>
   17460:	beq	173c8 <__assert_fail@plt+0x61e4>
   17464:	cmp	r4, #0
   17468:	bge	17524 <__assert_fail@plt+0x6340>
   1746c:	cmn	r4, #1
   17470:	beq	173c8 <__assert_fail@plt+0x61e4>
   17474:	mov	r1, r4
   17478:	mov	r0, #-2147483648	; 0x80000000
   1747c:	bl	18088 <__assert_fail@plt+0x6ea4>
   17480:	cmp	r7, r0
   17484:	b	17368 <__assert_fail@plt+0x6184>
   17488:	cmp	r8, #0
   1748c:	blt	1740c <__assert_fail@plt+0x6228>
   17490:	mvn	r2, #-2147483648	; 0x80000000
   17494:	sub	r2, r2, r5
   17498:	cmp	r8, r2
   1749c:	movle	r2, #0
   174a0:	movgt	r2, #1
   174a4:	b	17404 <__assert_fail@plt+0x6220>
   174a8:	cmn	r7, #1
   174ac:	movne	r1, r7
   174b0:	movne	r0, #-2147483648	; 0x80000000
   174b4:	bne	17508 <__assert_fail@plt+0x6324>
   174b8:	mul	r1, r5, r7
   174bc:	mov	r0, sl
   174c0:	bl	171a0 <__assert_fail@plt+0x5fbc>
   174c4:	str	r4, [fp]
   174c8:	add	sp, sp, #12
   174cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d0:	beq	174b8 <__assert_fail@plt+0x62d4>
   174d4:	cmp	r5, #0
   174d8:	movge	r1, r7
   174dc:	mvnge	r0, #-2147483648	; 0x80000000
   174e0:	bge	17508 <__assert_fail@plt+0x6324>
   174e4:	cmn	r5, #1
   174e8:	beq	174b8 <__assert_fail@plt+0x62d4>
   174ec:	mov	r1, r5
   174f0:	mov	r0, #-2147483648	; 0x80000000
   174f4:	bl	18088 <__assert_fail@plt+0x6ea4>
   174f8:	cmp	r7, r0
   174fc:	movle	r0, #0
   17500:	movgt	r0, #1
   17504:	b	17454 <__assert_fail@plt+0x6270>
   17508:	bl	18088 <__assert_fail@plt+0x6ea4>
   1750c:	cmp	r5, r0
   17510:	b	174fc <__assert_fail@plt+0x6318>
   17514:	cmp	r7, #0
   17518:	mov	r4, r9
   1751c:	blt	173b8 <__assert_fail@plt+0x61d4>
   17520:	beq	173c8 <__assert_fail@plt+0x61e4>
   17524:	mov	r1, r7
   17528:	mvn	r0, #-2147483648	; 0x80000000
   1752c:	bl	18088 <__assert_fail@plt+0x6ea4>
   17530:	cmp	r0, r4
   17534:	movge	r0, #0
   17538:	movlt	r0, #1
   1753c:	b	17370 <__assert_fail@plt+0x618c>
   17540:	push	{r4, lr}
   17544:	bl	176c8 <__assert_fail@plt+0x64e4>
   17548:	cmp	r0, #0
   1754c:	popne	{r4, pc}
   17550:	bl	17608 <__assert_fail@plt+0x6424>
   17554:	mov	r1, #1
   17558:	b	17540 <__assert_fail@plt+0x635c>
   1755c:	push	{r4, lr}
   17560:	bl	176c8 <__assert_fail@plt+0x64e4>
   17564:	cmp	r0, #0
   17568:	popne	{r4, pc}
   1756c:	bl	17608 <__assert_fail@plt+0x6424>
   17570:	mov	r1, #1
   17574:	b	1755c <__assert_fail@plt+0x6378>
   17578:	push	{r4, r5, r6, lr}
   1757c:	mov	r4, r1
   17580:	mov	r5, r0
   17584:	mov	r0, r1
   17588:	bl	17174 <__assert_fail@plt+0x5f90>
   1758c:	mov	r2, r4
   17590:	mov	r1, r5
   17594:	pop	{r4, r5, r6, lr}
   17598:	b	10f50 <memcpy@plt>
   1759c:	push	{r4, r5, r6, lr}
   175a0:	mov	r4, r1
   175a4:	mov	r5, r0
   175a8:	mov	r0, r1
   175ac:	bl	17188 <__assert_fail@plt+0x5fa4>
   175b0:	mov	r2, r4
   175b4:	mov	r1, r5
   175b8:	pop	{r4, r5, r6, lr}
   175bc:	b	10f50 <memcpy@plt>
   175c0:	push	{r4, r5, r6, lr}
   175c4:	mov	r5, r0
   175c8:	add	r0, r1, #1
   175cc:	mov	r4, r1
   175d0:	bl	17188 <__assert_fail@plt+0x5fa4>
   175d4:	mov	r2, #0
   175d8:	mov	r1, r5
   175dc:	strb	r2, [r0, r4]
   175e0:	mov	r2, r4
   175e4:	pop	{r4, r5, r6, lr}
   175e8:	b	10f50 <memcpy@plt>
   175ec:	push	{r4, lr}
   175f0:	mov	r4, r0
   175f4:	bl	11070 <strlen@plt>
   175f8:	add	r1, r0, #1
   175fc:	mov	r0, r4
   17600:	pop	{r4, lr}
   17604:	b	17578 <__assert_fail@plt+0x6394>
   17608:	ldr	r3, [pc, #44]	; 1763c <__assert_fail@plt+0x6458>
   1760c:	push	{r4, lr}
   17610:	mov	r2, #5
   17614:	ldr	r1, [pc, #36]	; 17640 <__assert_fail@plt+0x645c>
   17618:	mov	r0, #0
   1761c:	ldr	r4, [r3]
   17620:	bl	10f80 <dcgettext@plt>
   17624:	ldr	r2, [pc, #24]	; 17644 <__assert_fail@plt+0x6460>
   17628:	mov	r1, #0
   1762c:	mov	r3, r0
   17630:	mov	r0, r4
   17634:	bl	11004 <error@plt>
   17638:	bl	111b4 <abort@plt>
   1763c:	andeq	sl, r2, r4, lsr #2
   17640:	andeq	r9, r1, r9, lsl #8
   17644:	andeq	r8, r1, lr, ror fp
   17648:	push	{r4, lr}
   1764c:	orr	r1, r1, #512	; 0x200
   17650:	bl	13734 <__assert_fail@plt+0x2550>
   17654:	cmp	r0, #0
   17658:	popne	{r4, pc}
   1765c:	bl	11094 <__errno_location@plt>
   17660:	ldr	r3, [r0]
   17664:	cmp	r3, #22
   17668:	bne	17680 <__assert_fail@plt+0x649c>
   1766c:	ldr	r3, [pc, #16]	; 17684 <__assert_fail@plt+0x64a0>
   17670:	mov	r2, #41	; 0x29
   17674:	ldr	r1, [pc, #12]	; 17688 <__assert_fail@plt+0x64a4>
   17678:	ldr	r0, [pc, #12]	; 1768c <__assert_fail@plt+0x64a8>
   1767c:	bl	111e4 <__assert_fail@plt>
   17680:	bl	17608 <__assert_fail@plt+0x6424>
   17684:	andeq	r9, r1, sl, lsl r4
   17688:	andeq	r9, r1, r4, lsr #8
   1768c:	andeq	r9, r1, pc, lsr #8
   17690:	ldr	r3, [r0, #48]	; 0x30
   17694:	and	r3, r3, #17
   17698:	cmp	r3, #16
   1769c:	beq	176b8 <__assert_fail@plt+0x64d4>
   176a0:	cmp	r3, #17
   176a4:	bne	176c0 <__assert_fail@plt+0x64dc>
   176a8:	ldr	r0, [r1, #48]	; 0x30
   176ac:	adds	r0, r0, #0
   176b0:	movne	r0, #1
   176b4:	bx	lr
   176b8:	mov	r0, #1
   176bc:	bx	lr
   176c0:	mov	r0, #0
   176c4:	bx	lr
   176c8:	cmp	r1, #0
   176cc:	cmpne	r0, #0
   176d0:	moveq	r1, #1
   176d4:	moveq	r0, r1
   176d8:	umull	r2, r3, r0, r1
   176dc:	adds	r3, r3, #0
   176e0:	movne	r3, #1
   176e4:	cmp	r2, #0
   176e8:	blt	176f8 <__assert_fail@plt+0x6514>
   176ec:	cmp	r3, #0
   176f0:	bne	176f8 <__assert_fail@plt+0x6514>
   176f4:	b	10ef0 <calloc@plt>
   176f8:	push	{r4, lr}
   176fc:	bl	11094 <__errno_location@plt>
   17700:	mov	r3, #12
   17704:	str	r3, [r0]
   17708:	mov	r0, #0
   1770c:	pop	{r4, pc}
   17710:	cmp	r0, #0
   17714:	mov	r3, #0
   17718:	moveq	r0, #1
   1771c:	adds	r3, r3, #0
   17720:	movne	r3, #1
   17724:	cmp	r0, #0
   17728:	blt	17738 <__assert_fail@plt+0x6554>
   1772c:	cmp	r3, #0
   17730:	bne	17738 <__assert_fail@plt+0x6554>
   17734:	b	1101c <malloc@plt>
   17738:	push	{r4, lr}
   1773c:	bl	11094 <__errno_location@plt>
   17740:	mov	r3, #12
   17744:	str	r3, [r0]
   17748:	mov	r0, #0
   1774c:	pop	{r4, pc}
   17750:	cmp	r0, #0
   17754:	push	{r4, lr}
   17758:	mov	r4, r1
   1775c:	bne	1776c <__assert_fail@plt+0x6588>
   17760:	mov	r0, r1
   17764:	pop	{r4, lr}
   17768:	b	17710 <__assert_fail@plt+0x652c>
   1776c:	cmp	r1, #0
   17770:	bne	17780 <__assert_fail@plt+0x659c>
   17774:	bl	17bd8 <__assert_fail@plt+0x69f4>
   17778:	mov	r0, #0
   1777c:	pop	{r4, pc}
   17780:	cmp	r1, #0
   17784:	blt	17794 <__assert_fail@plt+0x65b0>
   17788:	mov	r3, #0
   1778c:	cmp	r3, r3
   17790:	beq	177a4 <__assert_fail@plt+0x65c0>
   17794:	bl	11094 <__errno_location@plt>
   17798:	mov	r3, #12
   1779c:	str	r3, [r0]
   177a0:	b	17778 <__assert_fail@plt+0x6594>
   177a4:	pop	{r4, lr}
   177a8:	b	10f8c <realloc@plt>
   177ac:	push	{r4, r5, r6, lr}
   177b0:	mov	r4, r0
   177b4:	bl	10fe0 <__fpending@plt>
   177b8:	mov	r5, r0
   177bc:	mov	r0, r4
   177c0:	bl	10fec <ferror_unlocked@plt>
   177c4:	mov	r6, r0
   177c8:	mov	r0, r4
   177cc:	bl	178e8 <__assert_fail@plt+0x6704>
   177d0:	cmp	r6, #0
   177d4:	mov	r4, r0
   177d8:	bne	17804 <__assert_fail@plt+0x6620>
   177dc:	cmp	r0, #0
   177e0:	beq	177fc <__assert_fail@plt+0x6618>
   177e4:	cmp	r5, #0
   177e8:	bne	17814 <__assert_fail@plt+0x6630>
   177ec:	bl	11094 <__errno_location@plt>
   177f0:	ldr	r4, [r0]
   177f4:	subs	r4, r4, #9
   177f8:	mvnne	r4, #0
   177fc:	mov	r0, r4
   17800:	pop	{r4, r5, r6, pc}
   17804:	cmp	r0, #0
   17808:	bne	17814 <__assert_fail@plt+0x6630>
   1780c:	bl	11094 <__errno_location@plt>
   17810:	str	r4, [r0]
   17814:	mvn	r4, #0
   17818:	b	177fc <__assert_fail@plt+0x6618>
   1781c:	mov	r3, #0
   17820:	mov	r2, #0
   17824:	strd	r2, [r0, #16]
   17828:	ldr	r3, [pc, #4]	; 17834 <__assert_fail@plt+0x6650>
   1782c:	str	r3, [r0, #24]
   17830:	bx	lr
   17834:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17838:	ldr	r2, [r0, #24]
   1783c:	ldr	r3, [pc, #148]	; 178d8 <__assert_fail@plt+0x66f4>
   17840:	push	{r4, r5, r6, r7, r8, lr}
   17844:	cmp	r2, r3
   17848:	beq	17860 <__assert_fail@plt+0x667c>
   1784c:	ldr	r3, [pc, #136]	; 178dc <__assert_fail@plt+0x66f8>
   17850:	mov	r2, #60	; 0x3c
   17854:	ldr	r1, [pc, #132]	; 178e0 <__assert_fail@plt+0x66fc>
   17858:	ldr	r0, [pc, #132]	; 178e4 <__assert_fail@plt+0x6700>
   1785c:	bl	111e4 <__assert_fail@plt>
   17860:	ldrd	r6, [r0, #16]
   17864:	orrs	r3, r6, r7
   17868:	beq	1789c <__assert_fail@plt+0x66b8>
   1786c:	ldrd	r4, [r1, #96]	; 0x60
   17870:	ldrd	r2, [r0]
   17874:	cmp	r5, r3
   17878:	cmpeq	r4, r2
   1787c:	bne	1789c <__assert_fail@plt+0x66b8>
   17880:	ldrd	r4, [r1]
   17884:	ldrd	r2, [r0, #8]
   17888:	cmp	r5, r3
   1788c:	cmpeq	r4, r2
   17890:	bne	1789c <__assert_fail@plt+0x66b8>
   17894:	mov	r0, #1
   17898:	pop	{r4, r5, r6, r7, r8, pc}
   1789c:	adds	r2, r6, #1
   178a0:	adc	r3, r7, #0
   178a4:	and	r6, r6, r2
   178a8:	and	r7, r7, r3
   178ac:	orrs	ip, r6, r7
   178b0:	strd	r2, [r0, #16]
   178b4:	bne	178d0 <__assert_fail@plt+0x66ec>
   178b8:	orrs	r3, r2, r3
   178bc:	beq	17894 <__assert_fail@plt+0x66b0>
   178c0:	ldrd	r2, [r1]
   178c4:	strd	r2, [r0, #8]
   178c8:	ldrd	r2, [r1, #96]	; 0x60
   178cc:	strd	r2, [r0]
   178d0:	mov	r0, #0
   178d4:	pop	{r4, r5, r6, r7, r8, pc}
   178d8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   178dc:	andeq	r9, r1, pc, lsr r4
   178e0:	andeq	r9, r1, fp, asr #8
   178e4:	andeq	r9, r1, sp, asr r4
   178e8:	push	{r0, r1, r2, r4, r5, lr}
   178ec:	mov	r4, r0
   178f0:	bl	110d0 <fileno@plt>
   178f4:	cmp	r0, #0
   178f8:	mov	r0, r4
   178fc:	bge	1790c <__assert_fail@plt+0x6728>
   17900:	add	sp, sp, #12
   17904:	pop	{r4, r5, lr}
   17908:	b	110e8 <fclose@plt>
   1790c:	bl	11034 <__freading@plt>
   17910:	cmp	r0, #0
   17914:	bne	17950 <__assert_fail@plt+0x676c>
   17918:	mov	r0, r4
   1791c:	bl	17b88 <__assert_fail@plt+0x69a4>
   17920:	cmp	r0, #0
   17924:	bne	17984 <__assert_fail@plt+0x67a0>
   17928:	mov	r5, #0
   1792c:	mov	r0, r4
   17930:	bl	110e8 <fclose@plt>
   17934:	cmp	r5, #0
   17938:	beq	17948 <__assert_fail@plt+0x6764>
   1793c:	bl	11094 <__errno_location@plt>
   17940:	str	r5, [r0]
   17944:	mvn	r0, #0
   17948:	add	sp, sp, #12
   1794c:	pop	{r4, r5, pc}
   17950:	mov	r0, r4
   17954:	bl	110d0 <fileno@plt>
   17958:	mov	r3, #1
   1795c:	str	r3, [sp]
   17960:	mov	r2, #0
   17964:	mov	r3, #0
   17968:	bl	10fc8 <lseek64@plt>
   1796c:	mvn	r3, #0
   17970:	mvn	r2, #0
   17974:	cmp	r1, r3
   17978:	cmpeq	r0, r2
   1797c:	bne	17918 <__assert_fail@plt+0x6734>
   17980:	b	17928 <__assert_fail@plt+0x6744>
   17984:	bl	11094 <__errno_location@plt>
   17988:	ldr	r5, [r0]
   1798c:	b	1792c <__assert_fail@plt+0x6748>
   17990:	push	{r1, r2, r3}
   17994:	push	{r0, r1, r4, r5, r6, r7, lr}
   17998:	add	r2, sp, #32
   1799c:	ldr	r1, [sp, #28]
   179a0:	str	r2, [sp, #4]
   179a4:	cmp	r1, #0
   179a8:	beq	179ec <__assert_fail@plt+0x6808>
   179ac:	ldr	r3, [pc, #396]	; 17b40 <__assert_fail@plt+0x695c>
   179b0:	mov	r6, r0
   179b4:	cmp	r1, r3
   179b8:	beq	179f8 <__assert_fail@plt+0x6814>
   179bc:	cmp	r1, #11
   179c0:	beq	179dc <__assert_fail@plt+0x67f8>
   179c4:	bgt	17b08 <__assert_fail@plt+0x6924>
   179c8:	cmp	r1, #3
   179cc:	beq	179dc <__assert_fail@plt+0x67f8>
   179d0:	bgt	17ae4 <__assert_fail@plt+0x6900>
   179d4:	cmp	r1, #1
   179d8:	bne	17af0 <__assert_fail@plt+0x690c>
   179dc:	mov	r0, r6
   179e0:	bl	11100 <fcntl64@plt>
   179e4:	mov	r4, r0
   179e8:	b	17aa4 <__assert_fail@plt+0x68c0>
   179ec:	ldr	r2, [sp, #32]
   179f0:	bl	11100 <fcntl64@plt>
   179f4:	b	179e4 <__assert_fail@plt+0x6800>
   179f8:	ldr	r5, [pc, #324]	; 17b44 <__assert_fail@plt+0x6960>
   179fc:	add	r3, sp, #36	; 0x24
   17a00:	str	r3, [sp, #4]
   17a04:	ldr	r3, [r5]
   17a08:	ldr	r7, [r2]
   17a0c:	cmp	r3, #0
   17a10:	mov	r2, r7
   17a14:	blt	17ab8 <__assert_fail@plt+0x68d4>
   17a18:	bl	11100 <fcntl64@plt>
   17a1c:	subs	r4, r0, #0
   17a20:	bge	17a34 <__assert_fail@plt+0x6850>
   17a24:	bl	11094 <__errno_location@plt>
   17a28:	ldr	r3, [r0]
   17a2c:	cmp	r3, #22
   17a30:	beq	17a84 <__assert_fail@plt+0x68a0>
   17a34:	mov	r3, #1
   17a38:	str	r3, [r5]
   17a3c:	cmp	r4, #0
   17a40:	blt	17aa4 <__assert_fail@plt+0x68c0>
   17a44:	ldr	r5, [r5]
   17a48:	cmn	r5, #1
   17a4c:	bne	17aa4 <__assert_fail@plt+0x68c0>
   17a50:	mov	r1, #1
   17a54:	mov	r0, r4
   17a58:	bl	11100 <fcntl64@plt>
   17a5c:	subs	r2, r0, #0
   17a60:	bge	17ac8 <__assert_fail@plt+0x68e4>
   17a64:	bl	11094 <__errno_location@plt>
   17a68:	ldr	r7, [r0]
   17a6c:	mov	r6, r0
   17a70:	mov	r0, r4
   17a74:	bl	111c0 <close@plt>
   17a78:	mov	r4, r5
   17a7c:	str	r7, [r6]
   17a80:	b	17aa4 <__assert_fail@plt+0x68c0>
   17a84:	mov	r2, r7
   17a88:	mov	r1, #0
   17a8c:	mov	r0, r6
   17a90:	bl	11100 <fcntl64@plt>
   17a94:	subs	r4, r0, #0
   17a98:	mvnge	r3, #0
   17a9c:	strge	r3, [r5]
   17aa0:	bge	17a44 <__assert_fail@plt+0x6860>
   17aa4:	mov	r0, r4
   17aa8:	add	sp, sp, #8
   17aac:	pop	{r4, r5, r6, r7, lr}
   17ab0:	add	sp, sp, #12
   17ab4:	bx	lr
   17ab8:	mov	r1, #0
   17abc:	bl	11100 <fcntl64@plt>
   17ac0:	mov	r4, r0
   17ac4:	b	17a3c <__assert_fail@plt+0x6858>
   17ac8:	orr	r2, r2, #1
   17acc:	mov	r1, #2
   17ad0:	mov	r0, r4
   17ad4:	bl	11100 <fcntl64@plt>
   17ad8:	cmn	r0, #1
   17adc:	bne	17aa4 <__assert_fail@plt+0x68c0>
   17ae0:	b	17a64 <__assert_fail@plt+0x6880>
   17ae4:	cmp	r1, #8
   17ae8:	beq	17af0 <__assert_fail@plt+0x690c>
   17aec:	bgt	17b00 <__assert_fail@plt+0x691c>
   17af0:	ldr	r3, [sp, #4]
   17af4:	mov	r0, r6
   17af8:	ldr	r2, [r3]
   17afc:	b	179f0 <__assert_fail@plt+0x680c>
   17b00:	cmp	r1, #9
   17b04:	b	179d8 <__assert_fail@plt+0x67f4>
   17b08:	ldr	r2, [pc, #56]	; 17b48 <__assert_fail@plt+0x6964>
   17b0c:	cmp	r1, r2
   17b10:	bgt	17b28 <__assert_fail@plt+0x6944>
   17b14:	cmp	r1, r3
   17b18:	ldrlt	r3, [pc, #44]	; 17b4c <__assert_fail@plt+0x6968>
   17b1c:	bge	17af0 <__assert_fail@plt+0x690c>
   17b20:	cmp	r1, r3
   17b24:	b	179d8 <__assert_fail@plt+0x67f4>
   17b28:	ldr	r3, [pc, #32]	; 17b50 <__assert_fail@plt+0x696c>
   17b2c:	cmp	r1, r3
   17b30:	beq	17af0 <__assert_fail@plt+0x690c>
   17b34:	blt	179dc <__assert_fail@plt+0x67f8>
   17b38:	add	r3, r3, #1
   17b3c:	b	17b20 <__assert_fail@plt+0x693c>
   17b40:	andeq	r0, r0, r6, lsl #8
   17b44:	andeq	sl, r2, r8, ror #5
   17b48:	andeq	r0, r0, r7, lsl #8
   17b4c:	andeq	r0, r0, r1, lsl #8
   17b50:	andeq	r0, r0, r9, lsl #8
   17b54:	push	{r1, r2, r3}
   17b58:	push	{r0, r1, lr}
   17b5c:	ldr	r1, [sp, #12]
   17b60:	ands	r2, r1, #64	; 0x40
   17b64:	addne	r3, sp, #16
   17b68:	ldrne	r2, [sp, #16]
   17b6c:	strne	r3, [sp, #4]
   17b70:	bl	11010 <open64@plt>
   17b74:	bl	16c2c <__assert_fail@plt+0x5a48>
   17b78:	add	sp, sp, #8
   17b7c:	pop	{lr}		; (ldr lr, [sp], #4)
   17b80:	add	sp, sp, #12
   17b84:	bx	lr
   17b88:	push	{r0, r1, r4, lr}
   17b8c:	subs	r4, r0, #0
   17b90:	bne	17ba4 <__assert_fail@plt+0x69c0>
   17b94:	mov	r0, r4
   17b98:	add	sp, sp, #8
   17b9c:	pop	{r4, lr}
   17ba0:	b	10f20 <fflush@plt>
   17ba4:	bl	11034 <__freading@plt>
   17ba8:	cmp	r0, #0
   17bac:	beq	17b94 <__assert_fail@plt+0x69b0>
   17bb0:	ldr	r3, [r4]
   17bb4:	tst	r3, #256	; 0x100
   17bb8:	beq	17b94 <__assert_fail@plt+0x69b0>
   17bbc:	mov	r3, #1
   17bc0:	str	r3, [sp]
   17bc4:	mov	r2, #0
   17bc8:	mov	r3, #0
   17bcc:	mov	r0, r4
   17bd0:	bl	17c2c <__assert_fail@plt+0x6a48>
   17bd4:	b	17b94 <__assert_fail@plt+0x69b0>
   17bd8:	push	{r0, r1, r2, r4, r5, lr}
   17bdc:	mov	r5, r0
   17be0:	bl	11094 <__errno_location@plt>
   17be4:	ldr	r3, [r0]
   17be8:	mov	r4, r0
   17bec:	str	r3, [sp]
   17bf0:	str	r3, [sp, #4]
   17bf4:	mov	r3, #0
   17bf8:	str	r3, [r0]
   17bfc:	mov	r0, r5
   17c00:	bl	10f38 <free@plt>
   17c04:	ldr	r3, [r4]
   17c08:	add	r2, sp, #8
   17c0c:	cmp	r3, #0
   17c10:	moveq	r3, #4
   17c14:	movne	r3, #0
   17c18:	add	r3, r2, r3
   17c1c:	ldr	r3, [r3, #-8]
   17c20:	str	r3, [r4]
   17c24:	add	sp, sp, #12
   17c28:	pop	{r4, r5, pc}
   17c2c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   17c30:	mov	r4, r0
   17c34:	ldmib	r0, {ip, lr}
   17c38:	ldr	r8, [sp, #32]
   17c3c:	cmp	lr, ip
   17c40:	bne	17cac <__assert_fail@plt+0x6ac8>
   17c44:	ldr	lr, [r0, #20]
   17c48:	ldr	ip, [r0, #16]
   17c4c:	cmp	lr, ip
   17c50:	bne	17cac <__assert_fail@plt+0x6ac8>
   17c54:	ldr	r5, [r0, #36]	; 0x24
   17c58:	cmp	r5, #0
   17c5c:	bne	17cac <__assert_fail@plt+0x6ac8>
   17c60:	mov	r6, r2
   17c64:	mov	r7, r3
   17c68:	bl	110d0 <fileno@plt>
   17c6c:	mov	r2, r6
   17c70:	mov	r3, r7
   17c74:	str	r8, [sp]
   17c78:	bl	10fc8 <lseek64@plt>
   17c7c:	mvn	r3, #0
   17c80:	mvn	r2, #0
   17c84:	cmp	r1, r3
   17c88:	cmpeq	r0, r2
   17c8c:	mvneq	r0, #0
   17c90:	ldrne	r3, [r4]
   17c94:	strdne	r0, [r4, #80]	; 0x50
   17c98:	movne	r0, r5
   17c9c:	bicne	r3, r3, #16
   17ca0:	strne	r3, [r4]
   17ca4:	add	sp, sp, #8
   17ca8:	pop	{r4, r5, r6, r7, r8, pc}
   17cac:	str	r8, [sp, #32]
   17cb0:	mov	r0, r4
   17cb4:	add	sp, sp, #8
   17cb8:	pop	{r4, r5, r6, r7, r8, lr}
   17cbc:	b	110f4 <fseeko64@plt>
   17cc0:	push	{r4, lr}
   17cc4:	mov	r0, #14
   17cc8:	bl	11124 <nl_langinfo@plt>
   17ccc:	ldr	r3, [pc, #24]	; 17cec <__assert_fail@plt+0x6b08>
   17cd0:	cmp	r0, #0
   17cd4:	moveq	r0, r3
   17cd8:	ldr	r3, [pc, #16]	; 17cf0 <__assert_fail@plt+0x6b0c>
   17cdc:	ldrb	r2, [r0]
   17ce0:	cmp	r2, #0
   17ce4:	moveq	r0, r3
   17ce8:	pop	{r4, pc}
   17cec:	andeq	r8, r1, r0, lsr #14
   17cf0:	andeq	r9, r1, r5, ror r4
   17cf4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17cf8:	subs	r5, r0, #0
   17cfc:	addeq	r5, sp, #4
   17d00:	mov	r0, r5
   17d04:	mov	r7, r2
   17d08:	mov	r6, r1
   17d0c:	bl	10ff8 <mbrtowc@plt>
   17d10:	cmp	r7, #0
   17d14:	cmnne	r0, #3
   17d18:	mov	r4, r0
   17d1c:	bls	17d38 <__assert_fail@plt+0x6b54>
   17d20:	mov	r0, #0
   17d24:	bl	17d9c <__assert_fail@plt+0x6bb8>
   17d28:	cmp	r0, #0
   17d2c:	moveq	r4, #1
   17d30:	ldrbeq	r3, [r6]
   17d34:	streq	r3, [r5]
   17d38:	mov	r0, r4
   17d3c:	add	sp, sp, #12
   17d40:	pop	{r4, r5, r6, r7, pc}
   17d44:	push	{r4, r5, r6, lr}
   17d48:	subs	r4, r2, #0
   17d4c:	mov	r6, r0
   17d50:	mov	r5, r1
   17d54:	beq	17d6c <__assert_fail@plt+0x6b88>
   17d58:	mov	r1, r4
   17d5c:	mvn	r0, #0
   17d60:	bl	17e7c <__assert_fail@plt+0x6c98>
   17d64:	cmp	r0, r5
   17d68:	bcc	17d7c <__assert_fail@plt+0x6b98>
   17d6c:	mul	r1, r5, r4
   17d70:	mov	r0, r6
   17d74:	pop	{r4, r5, r6, lr}
   17d78:	b	17750 <__assert_fail@plt+0x656c>
   17d7c:	bl	11094 <__errno_location@plt>
   17d80:	mov	r3, #12
   17d84:	str	r3, [r0]
   17d88:	mov	r0, #0
   17d8c:	pop	{r4, r5, r6, pc}
   17d90:	mov	r2, #3
   17d94:	mov	r1, #0
   17d98:	b	17990 <__assert_fail@plt+0x67ac>
   17d9c:	push	{lr}		; (str lr, [sp, #-4]!)
   17da0:	sub	sp, sp, #268	; 0x10c
   17da4:	ldr	r2, [pc, #64]	; 17dec <__assert_fail@plt+0x6c08>
   17da8:	add	r1, sp, #4
   17dac:	bl	17df8 <__assert_fail@plt+0x6c14>
   17db0:	cmp	r0, #0
   17db4:	movne	r0, #0
   17db8:	bne	17de4 <__assert_fail@plt+0x6c00>
   17dbc:	ldr	r1, [pc, #44]	; 17df0 <__assert_fail@plt+0x6c0c>
   17dc0:	add	r0, sp, #4
   17dc4:	bl	10f14 <strcmp@plt>
   17dc8:	cmp	r0, #0
   17dcc:	beq	17de4 <__assert_fail@plt+0x6c00>
   17dd0:	ldr	r1, [pc, #28]	; 17df4 <__assert_fail@plt+0x6c10>
   17dd4:	add	r0, sp, #4
   17dd8:	bl	10f14 <strcmp@plt>
   17ddc:	adds	r0, r0, #0
   17de0:	movne	r0, #1
   17de4:	add	sp, sp, #268	; 0x10c
   17de8:	pop	{pc}		; (ldr pc, [sp], #4)
   17dec:	andeq	r0, r0, r1, lsl #2
   17df0:	andeq	r9, r1, fp, ror r4
   17df4:	andeq	r9, r1, sp, ror r4
   17df8:	push	{r4, r5, r6, lr}
   17dfc:	mov	r5, r1
   17e00:	mov	r1, #0
   17e04:	mov	r4, r2
   17e08:	bl	1110c <setlocale@plt>
   17e0c:	subs	r6, r0, #0
   17e10:	bne	17e24 <__assert_fail@plt+0x6c40>
   17e14:	cmp	r4, #0
   17e18:	strbne	r6, [r5]
   17e1c:	mov	r0, #22
   17e20:	pop	{r4, r5, r6, pc}
   17e24:	bl	11070 <strlen@plt>
   17e28:	cmp	r4, r0
   17e2c:	bls	17e48 <__assert_fail@plt+0x6c64>
   17e30:	add	r2, r0, #1
   17e34:	mov	r1, r6
   17e38:	mov	r0, r5
   17e3c:	bl	10f50 <memcpy@plt>
   17e40:	mov	r0, #0
   17e44:	pop	{r4, r5, r6, pc}
   17e48:	cmp	r4, #0
   17e4c:	beq	17e6c <__assert_fail@plt+0x6c88>
   17e50:	sub	r4, r4, #1
   17e54:	mov	r2, r4
   17e58:	mov	r1, r6
   17e5c:	mov	r0, r5
   17e60:	bl	10f50 <memcpy@plt>
   17e64:	mov	r3, #0
   17e68:	strb	r3, [r5, r4]
   17e6c:	mov	r0, #34	; 0x22
   17e70:	pop	{r4, r5, r6, pc}
   17e74:	mov	r1, #0
   17e78:	b	1110c <setlocale@plt>
   17e7c:	subs	r2, r1, #1
   17e80:	bxeq	lr
   17e84:	bcc	1805c <__assert_fail@plt+0x6e78>
   17e88:	cmp	r0, r1
   17e8c:	bls	18040 <__assert_fail@plt+0x6e5c>
   17e90:	tst	r1, r2
   17e94:	beq	1804c <__assert_fail@plt+0x6e68>
   17e98:	clz	r3, r0
   17e9c:	clz	r2, r1
   17ea0:	sub	r3, r2, r3
   17ea4:	rsbs	r3, r3, #31
   17ea8:	addne	r3, r3, r3, lsl #1
   17eac:	mov	r2, #0
   17eb0:	addne	pc, pc, r3, lsl #2
   17eb4:	nop			; (mov r0, r0)
   17eb8:	cmp	r0, r1, lsl #31
   17ebc:	adc	r2, r2, r2
   17ec0:	subcs	r0, r0, r1, lsl #31
   17ec4:	cmp	r0, r1, lsl #30
   17ec8:	adc	r2, r2, r2
   17ecc:	subcs	r0, r0, r1, lsl #30
   17ed0:	cmp	r0, r1, lsl #29
   17ed4:	adc	r2, r2, r2
   17ed8:	subcs	r0, r0, r1, lsl #29
   17edc:	cmp	r0, r1, lsl #28
   17ee0:	adc	r2, r2, r2
   17ee4:	subcs	r0, r0, r1, lsl #28
   17ee8:	cmp	r0, r1, lsl #27
   17eec:	adc	r2, r2, r2
   17ef0:	subcs	r0, r0, r1, lsl #27
   17ef4:	cmp	r0, r1, lsl #26
   17ef8:	adc	r2, r2, r2
   17efc:	subcs	r0, r0, r1, lsl #26
   17f00:	cmp	r0, r1, lsl #25
   17f04:	adc	r2, r2, r2
   17f08:	subcs	r0, r0, r1, lsl #25
   17f0c:	cmp	r0, r1, lsl #24
   17f10:	adc	r2, r2, r2
   17f14:	subcs	r0, r0, r1, lsl #24
   17f18:	cmp	r0, r1, lsl #23
   17f1c:	adc	r2, r2, r2
   17f20:	subcs	r0, r0, r1, lsl #23
   17f24:	cmp	r0, r1, lsl #22
   17f28:	adc	r2, r2, r2
   17f2c:	subcs	r0, r0, r1, lsl #22
   17f30:	cmp	r0, r1, lsl #21
   17f34:	adc	r2, r2, r2
   17f38:	subcs	r0, r0, r1, lsl #21
   17f3c:	cmp	r0, r1, lsl #20
   17f40:	adc	r2, r2, r2
   17f44:	subcs	r0, r0, r1, lsl #20
   17f48:	cmp	r0, r1, lsl #19
   17f4c:	adc	r2, r2, r2
   17f50:	subcs	r0, r0, r1, lsl #19
   17f54:	cmp	r0, r1, lsl #18
   17f58:	adc	r2, r2, r2
   17f5c:	subcs	r0, r0, r1, lsl #18
   17f60:	cmp	r0, r1, lsl #17
   17f64:	adc	r2, r2, r2
   17f68:	subcs	r0, r0, r1, lsl #17
   17f6c:	cmp	r0, r1, lsl #16
   17f70:	adc	r2, r2, r2
   17f74:	subcs	r0, r0, r1, lsl #16
   17f78:	cmp	r0, r1, lsl #15
   17f7c:	adc	r2, r2, r2
   17f80:	subcs	r0, r0, r1, lsl #15
   17f84:	cmp	r0, r1, lsl #14
   17f88:	adc	r2, r2, r2
   17f8c:	subcs	r0, r0, r1, lsl #14
   17f90:	cmp	r0, r1, lsl #13
   17f94:	adc	r2, r2, r2
   17f98:	subcs	r0, r0, r1, lsl #13
   17f9c:	cmp	r0, r1, lsl #12
   17fa0:	adc	r2, r2, r2
   17fa4:	subcs	r0, r0, r1, lsl #12
   17fa8:	cmp	r0, r1, lsl #11
   17fac:	adc	r2, r2, r2
   17fb0:	subcs	r0, r0, r1, lsl #11
   17fb4:	cmp	r0, r1, lsl #10
   17fb8:	adc	r2, r2, r2
   17fbc:	subcs	r0, r0, r1, lsl #10
   17fc0:	cmp	r0, r1, lsl #9
   17fc4:	adc	r2, r2, r2
   17fc8:	subcs	r0, r0, r1, lsl #9
   17fcc:	cmp	r0, r1, lsl #8
   17fd0:	adc	r2, r2, r2
   17fd4:	subcs	r0, r0, r1, lsl #8
   17fd8:	cmp	r0, r1, lsl #7
   17fdc:	adc	r2, r2, r2
   17fe0:	subcs	r0, r0, r1, lsl #7
   17fe4:	cmp	r0, r1, lsl #6
   17fe8:	adc	r2, r2, r2
   17fec:	subcs	r0, r0, r1, lsl #6
   17ff0:	cmp	r0, r1, lsl #5
   17ff4:	adc	r2, r2, r2
   17ff8:	subcs	r0, r0, r1, lsl #5
   17ffc:	cmp	r0, r1, lsl #4
   18000:	adc	r2, r2, r2
   18004:	subcs	r0, r0, r1, lsl #4
   18008:	cmp	r0, r1, lsl #3
   1800c:	adc	r2, r2, r2
   18010:	subcs	r0, r0, r1, lsl #3
   18014:	cmp	r0, r1, lsl #2
   18018:	adc	r2, r2, r2
   1801c:	subcs	r0, r0, r1, lsl #2
   18020:	cmp	r0, r1, lsl #1
   18024:	adc	r2, r2, r2
   18028:	subcs	r0, r0, r1, lsl #1
   1802c:	cmp	r0, r1
   18030:	adc	r2, r2, r2
   18034:	subcs	r0, r0, r1
   18038:	mov	r0, r2
   1803c:	bx	lr
   18040:	moveq	r0, #1
   18044:	movne	r0, #0
   18048:	bx	lr
   1804c:	clz	r2, r1
   18050:	rsb	r2, r2, #31
   18054:	lsr	r0, r0, r2
   18058:	bx	lr
   1805c:	cmp	r0, #0
   18060:	mvnne	r0, #0
   18064:	b	18304 <__assert_fail@plt+0x7120>
   18068:	cmp	r1, #0
   1806c:	beq	1805c <__assert_fail@plt+0x6e78>
   18070:	push	{r0, r1, lr}
   18074:	bl	17e7c <__assert_fail@plt+0x6c98>
   18078:	pop	{r1, r2, lr}
   1807c:	mul	r3, r2, r0
   18080:	sub	r1, r1, r3
   18084:	bx	lr
   18088:	cmp	r1, #0
   1808c:	beq	18298 <__assert_fail@plt+0x70b4>
   18090:	eor	ip, r0, r1
   18094:	rsbmi	r1, r1, #0
   18098:	subs	r2, r1, #1
   1809c:	beq	18264 <__assert_fail@plt+0x7080>
   180a0:	movs	r3, r0
   180a4:	rsbmi	r3, r0, #0
   180a8:	cmp	r3, r1
   180ac:	bls	18270 <__assert_fail@plt+0x708c>
   180b0:	tst	r1, r2
   180b4:	beq	18280 <__assert_fail@plt+0x709c>
   180b8:	clz	r2, r3
   180bc:	clz	r0, r1
   180c0:	sub	r2, r0, r2
   180c4:	rsbs	r2, r2, #31
   180c8:	addne	r2, r2, r2, lsl #1
   180cc:	mov	r0, #0
   180d0:	addne	pc, pc, r2, lsl #2
   180d4:	nop			; (mov r0, r0)
   180d8:	cmp	r3, r1, lsl #31
   180dc:	adc	r0, r0, r0
   180e0:	subcs	r3, r3, r1, lsl #31
   180e4:	cmp	r3, r1, lsl #30
   180e8:	adc	r0, r0, r0
   180ec:	subcs	r3, r3, r1, lsl #30
   180f0:	cmp	r3, r1, lsl #29
   180f4:	adc	r0, r0, r0
   180f8:	subcs	r3, r3, r1, lsl #29
   180fc:	cmp	r3, r1, lsl #28
   18100:	adc	r0, r0, r0
   18104:	subcs	r3, r3, r1, lsl #28
   18108:	cmp	r3, r1, lsl #27
   1810c:	adc	r0, r0, r0
   18110:	subcs	r3, r3, r1, lsl #27
   18114:	cmp	r3, r1, lsl #26
   18118:	adc	r0, r0, r0
   1811c:	subcs	r3, r3, r1, lsl #26
   18120:	cmp	r3, r1, lsl #25
   18124:	adc	r0, r0, r0
   18128:	subcs	r3, r3, r1, lsl #25
   1812c:	cmp	r3, r1, lsl #24
   18130:	adc	r0, r0, r0
   18134:	subcs	r3, r3, r1, lsl #24
   18138:	cmp	r3, r1, lsl #23
   1813c:	adc	r0, r0, r0
   18140:	subcs	r3, r3, r1, lsl #23
   18144:	cmp	r3, r1, lsl #22
   18148:	adc	r0, r0, r0
   1814c:	subcs	r3, r3, r1, lsl #22
   18150:	cmp	r3, r1, lsl #21
   18154:	adc	r0, r0, r0
   18158:	subcs	r3, r3, r1, lsl #21
   1815c:	cmp	r3, r1, lsl #20
   18160:	adc	r0, r0, r0
   18164:	subcs	r3, r3, r1, lsl #20
   18168:	cmp	r3, r1, lsl #19
   1816c:	adc	r0, r0, r0
   18170:	subcs	r3, r3, r1, lsl #19
   18174:	cmp	r3, r1, lsl #18
   18178:	adc	r0, r0, r0
   1817c:	subcs	r3, r3, r1, lsl #18
   18180:	cmp	r3, r1, lsl #17
   18184:	adc	r0, r0, r0
   18188:	subcs	r3, r3, r1, lsl #17
   1818c:	cmp	r3, r1, lsl #16
   18190:	adc	r0, r0, r0
   18194:	subcs	r3, r3, r1, lsl #16
   18198:	cmp	r3, r1, lsl #15
   1819c:	adc	r0, r0, r0
   181a0:	subcs	r3, r3, r1, lsl #15
   181a4:	cmp	r3, r1, lsl #14
   181a8:	adc	r0, r0, r0
   181ac:	subcs	r3, r3, r1, lsl #14
   181b0:	cmp	r3, r1, lsl #13
   181b4:	adc	r0, r0, r0
   181b8:	subcs	r3, r3, r1, lsl #13
   181bc:	cmp	r3, r1, lsl #12
   181c0:	adc	r0, r0, r0
   181c4:	subcs	r3, r3, r1, lsl #12
   181c8:	cmp	r3, r1, lsl #11
   181cc:	adc	r0, r0, r0
   181d0:	subcs	r3, r3, r1, lsl #11
   181d4:	cmp	r3, r1, lsl #10
   181d8:	adc	r0, r0, r0
   181dc:	subcs	r3, r3, r1, lsl #10
   181e0:	cmp	r3, r1, lsl #9
   181e4:	adc	r0, r0, r0
   181e8:	subcs	r3, r3, r1, lsl #9
   181ec:	cmp	r3, r1, lsl #8
   181f0:	adc	r0, r0, r0
   181f4:	subcs	r3, r3, r1, lsl #8
   181f8:	cmp	r3, r1, lsl #7
   181fc:	adc	r0, r0, r0
   18200:	subcs	r3, r3, r1, lsl #7
   18204:	cmp	r3, r1, lsl #6
   18208:	adc	r0, r0, r0
   1820c:	subcs	r3, r3, r1, lsl #6
   18210:	cmp	r3, r1, lsl #5
   18214:	adc	r0, r0, r0
   18218:	subcs	r3, r3, r1, lsl #5
   1821c:	cmp	r3, r1, lsl #4
   18220:	adc	r0, r0, r0
   18224:	subcs	r3, r3, r1, lsl #4
   18228:	cmp	r3, r1, lsl #3
   1822c:	adc	r0, r0, r0
   18230:	subcs	r3, r3, r1, lsl #3
   18234:	cmp	r3, r1, lsl #2
   18238:	adc	r0, r0, r0
   1823c:	subcs	r3, r3, r1, lsl #2
   18240:	cmp	r3, r1, lsl #1
   18244:	adc	r0, r0, r0
   18248:	subcs	r3, r3, r1, lsl #1
   1824c:	cmp	r3, r1
   18250:	adc	r0, r0, r0
   18254:	subcs	r3, r3, r1
   18258:	cmp	ip, #0
   1825c:	rsbmi	r0, r0, #0
   18260:	bx	lr
   18264:	teq	ip, r0
   18268:	rsbmi	r0, r0, #0
   1826c:	bx	lr
   18270:	movcc	r0, #0
   18274:	asreq	r0, ip, #31
   18278:	orreq	r0, r0, #1
   1827c:	bx	lr
   18280:	clz	r2, r1
   18284:	rsb	r2, r2, #31
   18288:	cmp	ip, #0
   1828c:	lsr	r0, r3, r2
   18290:	rsbmi	r0, r0, #0
   18294:	bx	lr
   18298:	cmp	r0, #0
   1829c:	mvngt	r0, #-2147483648	; 0x80000000
   182a0:	movlt	r0, #-2147483648	; 0x80000000
   182a4:	b	18304 <__assert_fail@plt+0x7120>
   182a8:	cmp	r1, #0
   182ac:	beq	18298 <__assert_fail@plt+0x70b4>
   182b0:	push	{r0, r1, lr}
   182b4:	bl	18090 <__assert_fail@plt+0x6eac>
   182b8:	pop	{r1, r2, lr}
   182bc:	mul	r3, r2, r0
   182c0:	sub	r1, r1, r3
   182c4:	bx	lr
   182c8:	cmp	r3, #0
   182cc:	cmpeq	r2, #0
   182d0:	bne	182e8 <__assert_fail@plt+0x7104>
   182d4:	cmp	r1, #0
   182d8:	cmpeq	r0, #0
   182dc:	mvnne	r1, #0
   182e0:	mvnne	r0, #0
   182e4:	b	18304 <__assert_fail@plt+0x7120>
   182e8:	sub	sp, sp, #8
   182ec:	push	{sp, lr}
   182f0:	bl	18314 <__assert_fail@plt+0x7130>
   182f4:	ldr	lr, [sp, #4]
   182f8:	add	sp, sp, #8
   182fc:	pop	{r2, r3}
   18300:	bx	lr
   18304:	push	{r1, lr}
   18308:	mov	r0, #8
   1830c:	bl	10f08 <raise@plt>
   18310:	pop	{r1, pc}
   18314:	cmp	r1, r3
   18318:	push	{r4, r5, r6, r7, r8, r9, lr}
   1831c:	cmpeq	r0, r2
   18320:	mov	r4, r0
   18324:	mov	r5, r1
   18328:	ldr	r9, [sp, #28]
   1832c:	movcc	r0, #0
   18330:	movcc	r1, #0
   18334:	bcc	1842c <__assert_fail@plt+0x7248>
   18338:	cmp	r3, #0
   1833c:	clzeq	ip, r2
   18340:	clzne	ip, r3
   18344:	addeq	ip, ip, #32
   18348:	cmp	r5, #0
   1834c:	clzeq	r1, r4
   18350:	addeq	r1, r1, #32
   18354:	clzne	r1, r5
   18358:	sub	ip, ip, r1
   1835c:	sub	lr, ip, #32
   18360:	lsl	r7, r3, ip
   18364:	rsb	r8, ip, #32
   18368:	orr	r7, r7, r2, lsl lr
   1836c:	orr	r7, r7, r2, lsr r8
   18370:	lsl	r6, r2, ip
   18374:	cmp	r5, r7
   18378:	cmpeq	r4, r6
   1837c:	movcc	r0, #0
   18380:	movcc	r1, #0
   18384:	bcc	183a0 <__assert_fail@plt+0x71bc>
   18388:	mov	r3, #1
   1838c:	subs	r4, r4, r6
   18390:	lsl	r1, r3, lr
   18394:	lsl	r0, r3, ip
   18398:	orr	r1, r1, r3, lsr r8
   1839c:	sbc	r5, r5, r7
   183a0:	cmp	ip, #0
   183a4:	beq	1842c <__assert_fail@plt+0x7248>
   183a8:	lsrs	r3, r7, #1
   183ac:	rrx	r2, r6
   183b0:	mov	r6, ip
   183b4:	b	183d8 <__assert_fail@plt+0x71f4>
   183b8:	subs	r4, r4, r2
   183bc:	sbc	r5, r5, r3
   183c0:	adds	r4, r4, r4
   183c4:	adc	r5, r5, r5
   183c8:	adds	r4, r4, #1
   183cc:	adc	r5, r5, #0
   183d0:	subs	r6, r6, #1
   183d4:	beq	183f4 <__assert_fail@plt+0x7210>
   183d8:	cmp	r5, r3
   183dc:	cmpeq	r4, r2
   183e0:	bcs	183b8 <__assert_fail@plt+0x71d4>
   183e4:	adds	r4, r4, r4
   183e8:	adc	r5, r5, r5
   183ec:	subs	r6, r6, #1
   183f0:	bne	183d8 <__assert_fail@plt+0x71f4>
   183f4:	lsr	r6, r4, ip
   183f8:	lsr	r7, r5, ip
   183fc:	orr	r6, r6, r5, lsl r8
   18400:	adds	r2, r0, r4
   18404:	orr	r6, r6, r5, lsr lr
   18408:	adc	r3, r1, r5
   1840c:	lsl	r1, r7, ip
   18410:	orr	r1, r1, r6, lsl lr
   18414:	lsl	r0, r6, ip
   18418:	orr	r1, r1, r6, lsr r8
   1841c:	subs	r0, r2, r0
   18420:	mov	r4, r6
   18424:	mov	r5, r7
   18428:	sbc	r1, r3, r1
   1842c:	cmp	r9, #0
   18430:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18434:	strd	r4, [r9]
   18438:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1843c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18440:	mov	r7, r0
   18444:	ldr	r6, [pc, #72]	; 18494 <__assert_fail@plt+0x72b0>
   18448:	ldr	r5, [pc, #72]	; 18498 <__assert_fail@plt+0x72b4>
   1844c:	add	r6, pc, r6
   18450:	add	r5, pc, r5
   18454:	sub	r6, r6, r5
   18458:	mov	r8, r1
   1845c:	mov	r9, r2
   18460:	bl	10ec4 <fstatfs64@plt-0x20>
   18464:	asrs	r6, r6, #2
   18468:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1846c:	mov	r4, #0
   18470:	add	r4, r4, #1
   18474:	ldr	r3, [r5], #4
   18478:	mov	r2, r9
   1847c:	mov	r1, r8
   18480:	mov	r0, r7
   18484:	blx	r3
   18488:	cmp	r6, r4
   1848c:	bne	18470 <__assert_fail@plt+0x728c>
   18490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18494:			; <UNDEFINED> instruction: 0x00011abc
   18498:			; <UNDEFINED> instruction: 0x00011ab4
   1849c:	bx	lr
   184a0:	ldr	r3, [pc, #12]	; 184b4 <__assert_fail@plt+0x72d0>
   184a4:	mov	r1, #0
   184a8:	add	r3, pc, r3
   184ac:	ldr	r2, [r3]
   184b0:	b	110ac <__cxa_atexit@plt>
   184b4:	andeq	r1, r1, r8, ror #24
   184b8:	mov	r2, r1
   184bc:	mov	r1, r0
   184c0:	mov	r0, #3
   184c4:	b	11190 <__xstat64@plt>
   184c8:	mov	r2, r1
   184cc:	mov	r1, r0
   184d0:	mov	r0, #3
   184d4:	b	10fbc <__fxstat64@plt>
   184d8:	mov	r2, r1
   184dc:	mov	r1, r0
   184e0:	mov	r0, #3
   184e4:	b	111cc <__lxstat64@plt>
   184e8:	push	{lr}		; (str lr, [sp, #-4]!)
   184ec:	sub	sp, sp, #12
   184f0:	str	r3, [sp]
   184f4:	mov	r3, r2
   184f8:	mov	r2, r1
   184fc:	mov	r1, r0
   18500:	mov	r0, #3
   18504:	bl	10fa4 <__fxstatat64@plt>
   18508:	add	sp, sp, #12
   1850c:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00018510 <.fini>:
   18510:	push	{r3, lr}
   18514:	pop	{r3, pc}
