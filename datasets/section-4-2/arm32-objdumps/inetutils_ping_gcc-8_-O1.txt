
../repos/inetutils/ping/ping:     file format elf32-littlearm


Disassembly of section .init:

000110bc <.init>:
   110bc:	push	{r3, lr}
   110c0:	bl	11484 <__assert_fail@plt+0x48>
   110c4:	pop	{r3, pc}

Disassembly of section .plt:

000110c8 <calloc@plt-0x14>:
   110c8:	push	{lr}		; (str lr, [sp, #-4]!)
   110cc:	ldr	lr, [pc, #4]	; 110d8 <calloc@plt-0x4>
   110d0:	add	lr, pc, lr
   110d4:	ldr	pc, [lr, #8]!
   110d8:	andeq	fp, r1, r8, lsr #30

000110dc <calloc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #110592	; 0x1b000
   110e4:	ldr	pc, [ip, #3880]!	; 0xf28

000110e8 <fputs_unlocked@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #110592	; 0x1b000
   110f0:	ldr	pc, [ip, #3872]!	; 0xf20

000110f4 <strcmp@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #110592	; 0x1b000
   110fc:	ldr	pc, [ip, #3864]!	; 0xf18

00011100 <strtol@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #110592	; 0x1b000
   11108:	ldr	pc, [ip, #3856]!	; 0xf10

0001110c <setsockopt@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #110592	; 0x1b000
   11114:	ldr	pc, [ip, #3848]!	; 0xf08

00011118 <printf@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #110592	; 0x1b000
   11120:	ldr	pc, [ip, #3840]!	; 0xf00

00011124 <getprotobyname@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #110592	; 0x1b000
   1112c:	ldr	pc, [ip, #3832]!	; 0xef8

00011130 <fflush@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #110592	; 0x1b000
   11138:	ldr	pc, [ip, #3824]!	; 0xef0

0001113c <getuid@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #110592	; 0x1b000
   11144:	ldr	pc, [ip, #3816]!	; 0xee8

00011148 <memmove@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #110592	; 0x1b000
   11150:	ldr	pc, [ip, #3808]!	; 0xee0

00011154 <strchrnul@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #110592	; 0x1b000
   1115c:	ldr	pc, [ip, #3800]!	; 0xed8

00011160 <free@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #110592	; 0x1b000
   11168:	ldr	pc, [ip, #3792]!	; 0xed0

0001116c <gai_strerror@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #110592	; 0x1b000
   11174:	ldr	pc, [ip, #3784]!	; 0xec8

00011178 <strndup@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #110592	; 0x1b000
   11180:	ldr	pc, [ip, #3776]!	; 0xec0

00011184 <memcpy@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #110592	; 0x1b000
   1118c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011190 <signal@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #110592	; 0x1b000
   11198:	ldr	pc, [ip, #3760]!	; 0xeb0

0001119c <fwrite_unlocked@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #110592	; 0x1b000
   111a4:	ldr	pc, [ip, #3752]!	; 0xea8

000111a8 <memcmp@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #110592	; 0x1b000
   111b0:	ldr	pc, [ip, #3744]!	; 0xea0

000111b4 <inet_ntoa@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #110592	; 0x1b000
   111bc:	ldr	pc, [ip, #3736]!	; 0xe98

000111c0 <select@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #110592	; 0x1b000
   111c8:	ldr	pc, [ip, #3728]!	; 0xe90

000111cc <sleep@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #110592	; 0x1b000
   111d4:	ldr	pc, [ip, #3720]!	; 0xe88

000111d8 <gethostbyaddr@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #110592	; 0x1b000
   111e0:	ldr	pc, [ip, #3712]!	; 0xe80

000111e4 <recvfrom@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3704]!	; 0xe78

000111f0 <strdup@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3696]!	; 0xe70

000111fc <realloc@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3688]!	; 0xe68

00011208 <strcasecmp@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3680]!	; 0xe60

00011214 <funlockfile@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3672]!	; 0xe58

00011220 <fwrite@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3664]!	; 0xe50

0001122c <gettimeofday@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3656]!	; 0xe48

00011238 <error@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3648]!	; 0xe40

00011244 <getenv@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3640]!	; 0xe38

00011250 <puts@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3632]!	; 0xe30

0001125c <malloc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3624]!	; 0xe28

00011268 <__libc_start_main@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3616]!	; 0xe20

00011274 <strerror@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3608]!	; 0xe18

00011280 <__ctype_tolower_loc@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3600]!	; 0xe10

0001128c <__gmon_start__@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3592]!	; 0xe08

00011298 <mempcpy@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3584]!	; 0xe00

000112a4 <__ctype_b_loc@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3576]!	; 0xdf8

000112b0 <getpid@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112bc <exit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3560]!	; 0xde8

000112c8 <strtoul@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3552]!	; 0xde0

000112d4 <strlen@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112e0 <strchr@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112ec <fprintf@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112f8 <__errno_location@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3520]!	; 0xdc0

00011304 <snprintf@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011310 <strerror_r@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3504]!	; 0xdb0

0001131c <setvbuf@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3496]!	; 0xda8

00011328 <memset@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3488]!	; 0xda0

00011334 <putchar@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3480]!	; 0xd98

00011340 <strtod@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3472]!	; 0xd90

0001134c <memchr@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3464]!	; 0xd88

00011358 <sendto@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3456]!	; 0xd80

00011364 <__overflow@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3448]!	; 0xd78

00011370 <setlocale@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3440]!	; 0xd70

0001137c <getnameinfo@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3432]!	; 0xd68

00011388 <strrchr@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3424]!	; 0xd60

00011394 <vfprintf@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3416]!	; 0xd58

000113a0 <fputc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3408]!	; 0xd50

000113ac <setuid@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3400]!	; 0xd48

000113b8 <sscanf@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3392]!	; 0xd40

000113c4 <putc@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #110592	; 0x1b000
   113cc:	ldr	pc, [ip, #3384]!	; 0xd38

000113d0 <flockfile@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #110592	; 0x1b000
   113d8:	ldr	pc, [ip, #3376]!	; 0xd30

000113dc <vsnprintf@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #110592	; 0x1b000
   113e4:	ldr	pc, [ip, #3368]!	; 0xd28

000113e8 <qsort@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #110592	; 0x1b000
   113f0:	ldr	pc, [ip, #3360]!	; 0xd20

000113f4 <freeaddrinfo@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #110592	; 0x1b000
   113fc:	ldr	pc, [ip, #3352]!	; 0xd18

00011400 <getaddrinfo@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #110592	; 0x1b000
   11408:	ldr	pc, [ip, #3344]!	; 0xd10

0001140c <socket@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #110592	; 0x1b000
   11414:	ldr	pc, [ip, #3336]!	; 0xd08

00011418 <strncmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #110592	; 0x1b000
   11420:	ldr	pc, [ip, #3328]!	; 0xd00

00011424 <abort@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #110592	; 0x1b000
   1142c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011430 <close@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #110592	; 0x1b000
   11438:	ldr	pc, [ip, #3312]!	; 0xcf0

0001143c <__assert_fail@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #110592	; 0x1b000
   11444:	ldr	pc, [ip, #3304]!	; 0xce8

Disassembly of section .text:

00011448 <argp_failure@@Base-0x5164>:
   11448:	mov	fp, #0
   1144c:	mov	lr, #0
   11450:	pop	{r1}		; (ldr r1, [sp], #4)
   11454:	mov	r2, sp
   11458:	push	{r2}		; (str r2, [sp, #-4]!)
   1145c:	push	{r0}		; (str r0, [sp, #-4]!)
   11460:	ldr	ip, [pc, #16]	; 11478 <__assert_fail@plt+0x3c>
   11464:	push	{ip}		; (str ip, [sp, #-4]!)
   11468:	ldr	r0, [pc, #12]	; 1147c <__assert_fail@plt+0x40>
   1146c:	ldr	r3, [pc, #12]	; 11480 <__assert_fail@plt+0x44>
   11470:	bl	11268 <__libc_start_main@plt>
   11474:	bl	11424 <abort@plt>
   11478:	strdeq	sl, [r1], -r8
   1147c:	andeq	r1, r1, r8, lsl r6
   11480:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11484:	ldr	r3, [pc, #20]	; 114a0 <__assert_fail@plt+0x64>
   11488:	ldr	r2, [pc, #20]	; 114a4 <__assert_fail@plt+0x68>
   1148c:	add	r3, pc, r3
   11490:	ldr	r2, [r3, r2]
   11494:	cmp	r2, #0
   11498:	bxeq	lr
   1149c:	b	1128c <__gmon_start__@plt>
   114a0:	andeq	fp, r1, ip, ror #22
   114a4:	andeq	r0, r0, r0, lsr r1
   114a8:	ldr	r0, [pc, #24]	; 114c8 <__assert_fail@plt+0x8c>
   114ac:	ldr	r3, [pc, #24]	; 114cc <__assert_fail@plt+0x90>
   114b0:	cmp	r3, r0
   114b4:	bxeq	lr
   114b8:	ldr	r3, [pc, #16]	; 114d0 <__assert_fail@plt+0x94>
   114bc:	cmp	r3, #0
   114c0:	bxeq	lr
   114c4:	bx	r3
   114c8:	andeq	sp, r2, ip, lsl r6
   114cc:	andeq	sp, r2, ip, lsl r6
   114d0:	andeq	r0, r0, r0
   114d4:	ldr	r0, [pc, #36]	; 11500 <__assert_fail@plt+0xc4>
   114d8:	ldr	r1, [pc, #36]	; 11504 <__assert_fail@plt+0xc8>
   114dc:	sub	r1, r1, r0
   114e0:	asr	r1, r1, #2
   114e4:	add	r1, r1, r1, lsr #31
   114e8:	asrs	r1, r1, #1
   114ec:	bxeq	lr
   114f0:	ldr	r3, [pc, #16]	; 11508 <__assert_fail@plt+0xcc>
   114f4:	cmp	r3, #0
   114f8:	bxeq	lr
   114fc:	bx	r3
   11500:	andeq	sp, r2, ip, lsl r6
   11504:	andeq	sp, r2, ip, lsl r6
   11508:	andeq	r0, r0, r0
   1150c:	push	{r4, lr}
   11510:	ldr	r4, [pc, #24]	; 11530 <__assert_fail@plt+0xf4>
   11514:	ldrb	r3, [r4]
   11518:	cmp	r3, #0
   1151c:	popne	{r4, pc}
   11520:	bl	114a8 <__assert_fail@plt+0x6c>
   11524:	mov	r3, #1
   11528:	strb	r3, [r4]
   1152c:	pop	{r4, pc}
   11530:	andeq	sp, r2, r0, lsr r6
   11534:	b	114d4 <__assert_fail@plt+0x98>
   11538:	movw	r3, #54836	; 0xd634
   1153c:	movt	r3, #2
   11540:	mov	r2, #1
   11544:	str	r2, [r3]
   11548:	bx	lr
   1154c:	str	r4, [sp, #-8]!
   11550:	str	lr, [sp, #4]
   11554:	sub	sp, sp, #16
   11558:	mov	r4, r0
   1155c:	movw	r3, #53564	; 0xd13c
   11560:	movt	r3, #2
   11564:	ldr	r3, [r3]
   11568:	cmp	r3, #7
   1156c:	movls	r2, #0
   11570:	bhi	115d0 <__assert_fail@plt+0x194>
   11574:	movw	r3, #54980	; 0xd6c4
   11578:	movt	r3, #2
   1157c:	ldr	r1, [r3]
   11580:	cmp	r1, #0
   11584:	beq	115ac <__assert_fail@plt+0x170>
   11588:	movw	r3, #53564	; 0xd13c
   1158c:	movt	r3, #2
   11590:	ldr	r3, [r3]
   11594:	cmp	r3, r2
   11598:	subhi	r3, r3, r2
   1159c:	mov	r0, #0
   115a0:	str	r0, [sp]
   115a4:	mov	r0, r4
   115a8:	bl	127d0 <__assert_fail@plt+0x1394>
   115ac:	mov	r0, r4
   115b0:	bl	1400c <__assert_fail@plt+0x2bd0>
   115b4:	subs	r4, r0, #0
   115b8:	blt	115fc <__assert_fail@plt+0x1c0>
   115bc:	mov	r0, r4
   115c0:	add	sp, sp, #16
   115c4:	ldr	r4, [sp]
   115c8:	add	sp, sp, #4
   115cc:	pop	{pc}		; (ldr pc, [sp], #4)
   115d0:	mov	r1, #0
   115d4:	add	r0, sp, #8
   115d8:	bl	1122c <gettimeofday@plt>
   115dc:	mov	r2, #0
   115e0:	str	r2, [sp]
   115e4:	mov	r3, #8
   115e8:	add	r1, sp, r3
   115ec:	mov	r0, r4
   115f0:	bl	127d0 <__assert_fail@plt+0x1394>
   115f4:	mov	r2, #8
   115f8:	b	11574 <__assert_fail@plt+0x138>
   115fc:	bl	112f8 <__errno_location@plt>
   11600:	movw	r2, #45192	; 0xb088
   11604:	movt	r2, #1
   11608:	ldr	r1, [r0]
   1160c:	mov	r0, #1
   11610:	bl	11238 <error@plt>
   11614:	b	115bc <__assert_fail@plt+0x180>
   11618:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1161c:	strd	r6, [sp, #8]
   11620:	str	r8, [sp, #16]
   11624:	str	lr, [sp, #20]
   11628:	sub	sp, sp, #16
   1162c:	mov	r5, r0
   11630:	mov	r6, r1
   11634:	mov	r3, #1
   11638:	str	r3, [sp, #8]
   1163c:	ldr	r0, [r1]
   11640:	bl	19018 <argp_parse@@Base+0xdf0>
   11644:	movw	r1, #51684	; 0xc9e4
   11648:	movt	r1, #1
   1164c:	mov	r0, #6
   11650:	bl	11370 <setlocale@plt>
   11654:	bl	1113c <getuid@plt>
   11658:	cmp	r0, #0
   1165c:	bne	11670 <__assert_fail@plt+0x234>
   11660:	movw	r3, #54836	; 0xd634
   11664:	movt	r3, #2
   11668:	mov	r2, #1
   1166c:	strb	r2, [r3, #4]
   11670:	movw	r3, #55004	; 0xd6dc
   11674:	movt	r3, #2
   11678:	movw	r2, #45208	; 0xb098
   1167c:	movt	r2, #1
   11680:	str	r2, [r3]
   11684:	movw	r4, #53564	; 0xd13c
   11688:	movt	r4, #2
   1168c:	add	r1, r4, #4
   11690:	movw	r0, #45232	; 0xb0b0
   11694:	movt	r0, #1
   11698:	bl	18e14 <argp_parse@@Base+0xbec>
   1169c:	mov	r3, #0
   116a0:	str	r3, [sp, #4]
   116a4:	add	r2, sp, #12
   116a8:	str	r2, [sp]
   116ac:	mov	r2, r6
   116b0:	mov	r1, r5
   116b4:	add	r0, r4, #12
   116b8:	bl	18228 <argp_parse@@Base>
   116bc:	bl	112b0 <getpid@plt>
   116c0:	mov	r1, r0
   116c4:	mov	r0, #8
   116c8:	bl	13e40 <__assert_fail@plt+0x2a04>
   116cc:	movw	r3, #54992	; 0xd6d0
   116d0:	movt	r3, #2
   116d4:	str	r0, [r3]
   116d8:	cmp	r0, #0
   116dc:	beq	11828 <__assert_fail@plt+0x3ec>
   116e0:	mov	r3, #4
   116e4:	add	r2, sp, #8
   116e8:	mov	r1, #6
   116ec:	bl	12858 <__assert_fail@plt+0x141c>
   116f0:	bl	1113c <getuid@plt>
   116f4:	bl	113ac <setuid@plt>
   116f8:	cmp	r0, #0
   116fc:	bne	11830 <__assert_fail@plt+0x3f4>
   11700:	movw	r0, #54828	; 0xd62c
   11704:	movt	r0, #2
   11708:	mov	r3, #0
   1170c:	mov	r2, #1
   11710:	mov	r1, r3
   11714:	ldr	r0, [r0]
   11718:	bl	1131c <setvbuf@plt>
   1171c:	ldr	r3, [sp, #12]
   11720:	add	r6, r6, r3, lsl #2
   11724:	sub	r5, r5, r3
   11728:	movw	r3, #54836	; 0xd634
   1172c:	movt	r3, #2
   11730:	ldr	r1, [r3, #8]
   11734:	cmp	r1, #0
   11738:	bne	1184c <__assert_fail@plt+0x410>
   1173c:	movw	r3, #54988	; 0xd6cc
   11740:	movt	r3, #2
   11744:	ldr	r1, [r3]
   11748:	cmp	r1, #0
   1174c:	bne	11860 <__assert_fail@plt+0x424>
   11750:	movw	r3, #54984	; 0xd6c8
   11754:	movt	r3, #2
   11758:	ldr	r3, [r3]
   1175c:	tst	r3, #2
   11760:	bne	1187c <__assert_fail@plt+0x440>
   11764:	movw	r3, #54836	; 0xd634
   11768:	movt	r3, #2
   1176c:	ldr	r3, [r3, #12]
   11770:	cmp	r3, #0
   11774:	bgt	1189c <__assert_fail@plt+0x460>
   11778:	movw	r3, #53564	; 0xd13c
   1177c:	movt	r3, #2
   11780:	ldr	r3, [r3, #40]	; 0x28
   11784:	cmp	r3, #0
   11788:	bge	118e8 <__assert_fail@plt+0x4ac>
   1178c:	movw	r2, #53564	; 0xd13c
   11790:	movt	r2, #2
   11794:	movw	r3, #54976	; 0xd6c0
   11798:	movt	r3, #2
   1179c:	ldr	r1, [r2, #44]	; 0x2c
   117a0:	ldr	r0, [r3]
   117a4:	bl	12480 <__assert_fail@plt+0x1044>
   117a8:	sub	r4, r5, #1
   117ac:	cmp	r5, #0
   117b0:	beq	117ec <__assert_fail@plt+0x3b0>
   117b4:	mov	r5, #0
   117b8:	movw	r8, #53564	; 0xd13c
   117bc:	movt	r8, #2
   117c0:	movw	r7, #54992	; 0xd6d0
   117c4:	movt	r7, #2
   117c8:	ldr	r3, [r8, #48]	; 0x30
   117cc:	ldr	r0, [r6], #4
   117d0:	blx	r3
   117d4:	orr	r5, r5, r0
   117d8:	ldr	r0, [r7]
   117dc:	bl	13ff0 <__assert_fail@plt+0x2bb4>
   117e0:	sub	r4, r4, #1
   117e4:	cmn	r4, #1
   117e8:	bne	117c8 <__assert_fail@plt+0x38c>
   117ec:	movw	r3, #54992	; 0xd6d0
   117f0:	movt	r3, #2
   117f4:	ldr	r0, [r3]
   117f8:	bl	18f00 <argp_parse@@Base+0xcd8>
   117fc:	movw	r3, #54980	; 0xd6c4
   11800:	movt	r3, #2
   11804:	ldr	r0, [r3]
   11808:	bl	18f00 <argp_parse@@Base+0xcd8>
   1180c:	mov	r0, r5
   11810:	add	sp, sp, #16
   11814:	ldrd	r4, [sp]
   11818:	ldrd	r6, [sp, #8]
   1181c:	ldr	r8, [sp, #16]
   11820:	add	sp, sp, #20
   11824:	pop	{pc}		; (ldr pc, [sp], #4)
   11828:	mov	r0, #1
   1182c:	bl	112bc <exit@plt>
   11830:	bl	112f8 <__errno_location@plt>
   11834:	movw	r2, #45240	; 0xb0b8
   11838:	movt	r2, #1
   1183c:	ldr	r1, [r0]
   11840:	mov	r0, #1
   11844:	bl	11238 <error@plt>
   11848:	b	11700 <__assert_fail@plt+0x2c4>
   1184c:	movw	r3, #54992	; 0xd6d0
   11850:	movt	r3, #2
   11854:	ldr	r0, [r3]
   11858:	bl	12850 <__assert_fail@plt+0x1414>
   1185c:	b	1173c <__assert_fail@plt+0x300>
   11860:	movw	r0, #54992	; 0xd6d0
   11864:	movt	r0, #2
   11868:	mov	r3, #4
   1186c:	add	r2, sp, #8
   11870:	ldr	r0, [r0]
   11874:	bl	12858 <__assert_fail@plt+0x141c>
   11878:	b	11750 <__assert_fail@plt+0x314>
   1187c:	movw	r2, #55000	; 0xd6d8
   11880:	movt	r2, #2
   11884:	movw	r3, #54992	; 0xd6d0
   11888:	movt	r3, #2
   1188c:	ldr	r1, [r2]
   11890:	ldr	r0, [r3]
   11894:	bl	12884 <__assert_fail@plt+0x1448>
   11898:	b	11764 <__assert_fail@plt+0x328>
   1189c:	movw	r3, #54992	; 0xd6d0
   118a0:	movt	r3, #2
   118a4:	ldr	r0, [r3]
   118a8:	mov	r3, #4
   118ac:	str	r3, [sp]
   118b0:	ldr	r3, [pc, #124]	; 11934 <__assert_fail@plt+0x4f8>
   118b4:	mov	r2, #2
   118b8:	mov	r1, #0
   118bc:	ldr	r0, [r0]
   118c0:	bl	1110c <setsockopt@plt>
   118c4:	cmp	r0, #0
   118c8:	bge	11778 <__assert_fail@plt+0x33c>
   118cc:	bl	112f8 <__errno_location@plt>
   118d0:	movw	r2, #45248	; 0xb0c0
   118d4:	movt	r2, #1
   118d8:	ldr	r1, [r0]
   118dc:	mov	r0, #0
   118e0:	bl	11238 <error@plt>
   118e4:	b	11778 <__assert_fail@plt+0x33c>
   118e8:	movw	r3, #54992	; 0xd6d0
   118ec:	movt	r3, #2
   118f0:	ldr	r0, [r3]
   118f4:	mov	r3, #4
   118f8:	str	r3, [sp]
   118fc:	ldr	r3, [pc, #52]	; 11938 <__assert_fail@plt+0x4fc>
   11900:	mov	r2, #1
   11904:	mov	r1, #0
   11908:	ldr	r0, [r0]
   1190c:	bl	1110c <setsockopt@plt>
   11910:	cmp	r0, #0
   11914:	bge	1178c <__assert_fail@plt+0x350>
   11918:	bl	112f8 <__errno_location@plt>
   1191c:	movw	r2, #45268	; 0xb0d4
   11920:	movt	r2, #1
   11924:	ldr	r1, [r0]
   11928:	mov	r0, #0
   1192c:	bl	11238 <error@plt>
   11930:	b	1178c <__assert_fail@plt+0x350>
   11934:	andeq	sp, r2, r0, asr #12
   11938:	andeq	sp, r2, r4, ror #2
   1193c:	str	r4, [sp, #-8]!
   11940:	str	lr, [sp, #4]
   11944:	mov	r4, r0
   11948:	movw	r1, #45288	; 0xb0e8
   1194c:	movt	r1, #1
   11950:	bl	11208 <strcasecmp@plt>
   11954:	cmp	r0, #0
   11958:	movweq	r0, #12232	; 0x2fc8
   1195c:	movteq	r0, #1
   11960:	beq	119c4 <__assert_fail@plt+0x588>
   11964:	movw	r1, #45296	; 0xb0f0
   11968:	movt	r1, #1
   1196c:	mov	r0, r4
   11970:	bl	11208 <strcasecmp@plt>
   11974:	cmp	r0, #0
   11978:	movweq	r0, #15748	; 0x3d84
   1197c:	movteq	r0, #1
   11980:	beq	119c4 <__assert_fail@plt+0x588>
   11984:	movw	r1, #45308	; 0xb0fc
   11988:	movt	r1, #1
   1198c:	mov	r0, r4
   11990:	bl	11208 <strcasecmp@plt>
   11994:	cmp	r0, #0
   11998:	movweq	r0, #15160	; 0x3b38
   1199c:	movteq	r0, #1
   119a0:	beq	119c4 <__assert_fail@plt+0x588>
   119a4:	movw	r1, #45316	; 0xb104
   119a8:	movt	r1, #1
   119ac:	mov	r0, r4
   119b0:	bl	11208 <strcasecmp@plt>
   119b4:	cmp	r0, #0
   119b8:	movweq	r0, #15160	; 0x3b38
   119bc:	movteq	r0, #1
   119c0:	bne	119d0 <__assert_fail@plt+0x594>
   119c4:	ldr	r4, [sp]
   119c8:	add	sp, sp, #4
   119cc:	pop	{pc}		; (ldr pc, [sp], #4)
   119d0:	mov	r3, r4
   119d4:	movw	r2, #45324	; 0xb10c
   119d8:	movt	r2, #1
   119dc:	mov	r1, #0
   119e0:	mov	r0, #1
   119e4:	bl	11238 <error@plt>
   119e8:	mov	r0, #0
   119ec:	b	119c4 <__assert_fail@plt+0x588>
   119f0:	cmp	r0, #114	; 0x72
   119f4:	beq	11d20 <__assert_fail@plt+0x8e4>
   119f8:	strd	r4, [sp, #-12]!
   119fc:	str	lr, [sp, #8]
   11a00:	vpush	{d8}
   11a04:	sub	sp, sp, #12
   11a08:	mov	r4, r2
   11a0c:	mov	r5, r1
   11a10:	ble	11a6c <__assert_fail@plt+0x630>
   11a14:	movw	r3, #257	; 0x101
   11a18:	cmp	r0, r3
   11a1c:	beq	11e60 <__assert_fail@plt+0xa24>
   11a20:	ble	11b94 <__assert_fail@plt+0x758>
   11a24:	cmp	r0, #260	; 0x104
   11a28:	beq	11e80 <__assert_fail@plt+0xa44>
   11a2c:	bgt	11c04 <__assert_fail@plt+0x7c8>
   11a30:	movw	r3, #258	; 0x102
   11a34:	cmp	r0, r3
   11a38:	beq	11e40 <__assert_fail@plt+0xa04>
   11a3c:	movw	r3, #259	; 0x103
   11a40:	cmp	r0, r3
   11a44:	movne	r0, #7
   11a48:	bne	11c5c <__assert_fail@plt+0x820>
   11a4c:	movw	r0, #45440	; 0xb180
   11a50:	movt	r0, #1
   11a54:	bl	1193c <__assert_fail@plt+0x500>
   11a58:	movw	r3, #53564	; 0xd13c
   11a5c:	movt	r3, #2
   11a60:	str	r0, [r3, #48]	; 0x30
   11a64:	mov	r0, #0
   11a68:	b	11c5c <__assert_fail@plt+0x820>
   11a6c:	cmp	r0, #102	; 0x66
   11a70:	beq	11e24 <__assert_fail@plt+0x9e8>
   11a74:	ble	11af0 <__assert_fail@plt+0x6b4>
   11a78:	cmp	r0, #110	; 0x6e
   11a7c:	beq	11d60 <__assert_fail@plt+0x924>
   11a80:	bgt	11b64 <__assert_fail@plt+0x728>
   11a84:	cmp	r0, #105	; 0x69
   11a88:	beq	11c70 <__assert_fail@plt+0x834>
   11a8c:	cmp	r0, #108	; 0x6c
   11a90:	movne	r0, #7
   11a94:	bne	11c5c <__assert_fail@plt+0x820>
   11a98:	mov	r2, #0
   11a9c:	add	r1, sp, #4
   11aa0:	mov	r0, r5
   11aa4:	bl	112c8 <strtoul@plt>
   11aa8:	movw	r3, #54836	; 0xd634
   11aac:	movt	r3, #2
   11ab0:	str	r0, [r3, #32]
   11ab4:	ldr	r3, [sp, #4]
   11ab8:	ldrb	r3, [r3]
   11abc:	cmp	r3, #0
   11ac0:	bne	11ad0 <__assert_fail@plt+0x694>
   11ac4:	cmp	r0, #0
   11ac8:	movge	r0, #0
   11acc:	bge	11c5c <__assert_fail@plt+0x820>
   11ad0:	mov	r3, r5
   11ad4:	movw	r2, #45412	; 0xb164
   11ad8:	movt	r2, #1
   11adc:	mov	r1, #0
   11ae0:	mov	r0, #1
   11ae4:	bl	11238 <error@plt>
   11ae8:	mov	r0, #0
   11aec:	b	11c5c <__assert_fail@plt+0x820>
   11af0:	cmp	r0, #87	; 0x57
   11af4:	beq	11de4 <__assert_fail@plt+0x9a8>
   11af8:	bgt	11b34 <__assert_fail@plt+0x6f8>
   11afc:	cmp	r0, #82	; 0x52
   11b00:	beq	11dc8 <__assert_fail@plt+0x98c>
   11b04:	cmp	r0, #84	; 0x54
   11b08:	movne	r0, #7
   11b0c:	bne	11c5c <__assert_fail@plt+0x820>
   11b10:	mov	r2, #1
   11b14:	mov	r1, #255	; 0xff
   11b18:	mov	r0, r5
   11b1c:	bl	123c0 <__assert_fail@plt+0xf84>
   11b20:	movw	r3, #53564	; 0xd13c
   11b24:	movt	r3, #2
   11b28:	str	r0, [r3, #40]	; 0x28
   11b2c:	mov	r0, #0
   11b30:	b	11c5c <__assert_fail@plt+0x820>
   11b34:	cmp	r0, #99	; 0x63
   11b38:	beq	11c3c <__assert_fail@plt+0x800>
   11b3c:	cmp	r0, #100	; 0x64
   11b40:	movne	r0, #7
   11b44:	bne	11c5c <__assert_fail@plt+0x820>
   11b48:	movw	r3, #54988	; 0xd6cc
   11b4c:	movt	r3, #2
   11b50:	ldr	r2, [r3]
   11b54:	orr	r2, r2, #1
   11b58:	str	r2, [r3]
   11b5c:	mov	r0, #0
   11b60:	b	11c5c <__assert_fail@plt+0x820>
   11b64:	cmp	r0, #112	; 0x70
   11b68:	beq	11d7c <__assert_fail@plt+0x940>
   11b6c:	cmp	r0, #113	; 0x71
   11b70:	movne	r0, #7
   11b74:	bne	11c5c <__assert_fail@plt+0x820>
   11b78:	movw	r3, #54984	; 0xd6c8
   11b7c:	movt	r3, #2
   11b80:	ldr	r2, [r3]
   11b84:	orr	r2, r2, #8
   11b88:	str	r2, [r3]
   11b8c:	mov	r0, #0
   11b90:	b	11c5c <__assert_fail@plt+0x820>
   11b94:	cmp	r0, #118	; 0x76
   11b98:	beq	11e08 <__assert_fail@plt+0x9cc>
   11b9c:	bgt	11bd0 <__assert_fail@plt+0x794>
   11ba0:	cmp	r0, #115	; 0x73
   11ba4:	beq	11d3c <__assert_fail@plt+0x900>
   11ba8:	cmp	r0, #116	; 0x74
   11bac:	movne	r0, #7
   11bb0:	bne	11c5c <__assert_fail@plt+0x820>
   11bb4:	mov	r0, r1
   11bb8:	bl	1193c <__assert_fail@plt+0x500>
   11bbc:	movw	r3, #53564	; 0xd13c
   11bc0:	movt	r3, #2
   11bc4:	str	r0, [r3, #48]	; 0x30
   11bc8:	mov	r0, #0
   11bcc:	b	11c5c <__assert_fail@plt+0x820>
   11bd0:	cmp	r0, #119	; 0x77
   11bd4:	beq	11da4 <__assert_fail@plt+0x968>
   11bd8:	cmp	r0, #256	; 0x100
   11bdc:	movne	r0, #7
   11be0:	bne	11c5c <__assert_fail@plt+0x820>
   11be4:	movw	r0, #45288	; 0xb0e8
   11be8:	movt	r0, #1
   11bec:	bl	1193c <__assert_fail@plt+0x500>
   11bf0:	movw	r3, #53564	; 0xd13c
   11bf4:	movt	r3, #2
   11bf8:	str	r0, [r3, #48]	; 0x30
   11bfc:	mov	r0, #0
   11c00:	b	11c5c <__assert_fail@plt+0x820>
   11c04:	movw	r3, #261	; 0x105
   11c08:	cmp	r0, r3
   11c0c:	beq	11ea4 <__assert_fail@plt+0xa68>
   11c10:	mov	r3, #2
   11c14:	movt	r3, #256	; 0x100
   11c18:	cmp	r0, r3
   11c1c:	movne	r0, #7
   11c20:	bne	11c5c <__assert_fail@plt+0x820>
   11c24:	movw	r1, #45496	; 0xb1b8
   11c28:	movt	r1, #1
   11c2c:	mov	r0, r2
   11c30:	bl	17a94 <argp_error@@Base>
   11c34:	mov	r0, #7
   11c38:	b	11c5c <__assert_fail@plt+0x820>
   11c3c:	mov	r2, #1
   11c40:	mov	r1, #0
   11c44:	mov	r0, r5
   11c48:	bl	123c0 <__assert_fail@plt+0xf84>
   11c4c:	movw	r3, #54836	; 0xd634
   11c50:	movt	r3, #2
   11c54:	str	r0, [r3, #8]
   11c58:	mov	r0, #0
   11c5c:	add	sp, sp, #12
   11c60:	vpop	{d8}
   11c64:	ldrd	r4, [sp]
   11c68:	add	sp, sp, #8
   11c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c70:	add	r1, sp, #4
   11c74:	mov	r0, r5
   11c78:	bl	11340 <strtod@plt>
   11c7c:	vmov.f64	d8, d0
   11c80:	ldr	r3, [sp, #4]
   11c84:	ldrb	r2, [r3]
   11c88:	cmp	r2, #0
   11c8c:	bne	11d08 <__assert_fail@plt+0x8cc>
   11c90:	movw	r3, #54984	; 0xd6c8
   11c94:	movt	r3, #2
   11c98:	ldr	r2, [r3]
   11c9c:	orr	r2, r2, #2
   11ca0:	str	r2, [r3]
   11ca4:	vldr	d7, [pc, #644]	; 11f30 <__assert_fail@plt+0xaf4>
   11ca8:	vmul.f64	d8, d8, d7
   11cac:	vcvt.u32.f64	s15, d8
   11cb0:	vmov	r3, s15
   11cb4:	movw	r2, #55000	; 0xd6d8
   11cb8:	movt	r2, #2
   11cbc:	vstr	s15, [r2]
   11cc0:	movw	r2, #54836	; 0xd634
   11cc4:	movt	r2, #2
   11cc8:	ldrb	r2, [r2, #4]
   11ccc:	eor	r2, r2, #1
   11cd0:	cmp	r3, #199	; 0xc7
   11cd4:	movhi	r3, #0
   11cd8:	andls	r3, r2, #1
   11cdc:	cmp	r3, #0
   11ce0:	moveq	r0, #0
   11ce4:	beq	11c5c <__assert_fail@plt+0x820>
   11ce8:	mov	r3, r5
   11cec:	movw	r2, #45384	; 0xb148
   11cf0:	movt	r2, #1
   11cf4:	mov	r1, #0
   11cf8:	mov	r0, #1
   11cfc:	bl	11238 <error@plt>
   11d00:	mov	r0, #0
   11d04:	b	11c5c <__assert_fail@plt+0x820>
   11d08:	mov	r2, r5
   11d0c:	movw	r1, #45352	; 0xb128
   11d10:	movt	r1, #1
   11d14:	mov	r0, r4
   11d18:	bl	17a94 <argp_error@@Base>
   11d1c:	b	11c90 <__assert_fail@plt+0x854>
   11d20:	movw	r3, #54988	; 0xd6cc
   11d24:	movt	r3, #2
   11d28:	ldr	r2, [r3]
   11d2c:	orr	r2, r2, #5
   11d30:	str	r2, [r3]
   11d34:	mov	r0, #0
   11d38:	bx	lr
   11d3c:	mov	r2, #1
   11d40:	movw	r1, #65399	; 0xff77
   11d44:	mov	r0, r5
   11d48:	bl	123c0 <__assert_fail@plt+0xf84>
   11d4c:	movw	r3, #53564	; 0xd13c
   11d50:	movt	r3, #2
   11d54:	str	r0, [r3]
   11d58:	mov	r0, #0
   11d5c:	b	11c5c <__assert_fail@plt+0x820>
   11d60:	movw	r3, #54984	; 0xd6c8
   11d64:	movt	r3, #2
   11d68:	ldr	r2, [r3]
   11d6c:	orr	r2, r2, #4
   11d70:	str	r2, [r3]
   11d74:	mov	r0, #0
   11d78:	b	11c5c <__assert_fail@plt+0x820>
   11d7c:	ldr	r4, [pc, #436]	; 11f38 <__assert_fail@plt+0xafc>
   11d80:	mov	r2, r4
   11d84:	ldr	r1, [pc, #432]	; 11f3c <__assert_fail@plt+0xb00>
   11d88:	mov	r0, r5
   11d8c:	bl	12558 <__assert_fail@plt+0x111c>
   11d90:	movw	r3, #54976	; 0xd6c0
   11d94:	movt	r3, #2
   11d98:	str	r4, [r3]
   11d9c:	mov	r0, #0
   11da0:	b	11c5c <__assert_fail@plt+0x820>
   11da4:	mov	r2, #0
   11da8:	mvn	r1, #-2147483648	; 0x80000000
   11dac:	mov	r0, r5
   11db0:	bl	123c0 <__assert_fail@plt+0xf84>
   11db4:	movw	r3, #53564	; 0xd13c
   11db8:	movt	r3, #2
   11dbc:	str	r0, [r3, #52]	; 0x34
   11dc0:	mov	r0, #0
   11dc4:	b	11c5c <__assert_fail@plt+0x820>
   11dc8:	movw	r3, #54984	; 0xd6c8
   11dcc:	movt	r3, #2
   11dd0:	ldr	r2, [r3]
   11dd4:	orr	r2, r2, #16
   11dd8:	str	r2, [r3]
   11ddc:	mov	r0, #0
   11de0:	b	11c5c <__assert_fail@plt+0x820>
   11de4:	mov	r2, #0
   11de8:	mvn	r1, #-2147483648	; 0x80000000
   11dec:	mov	r0, r5
   11df0:	bl	123c0 <__assert_fail@plt+0xf84>
   11df4:	movw	r3, #53564	; 0xd13c
   11df8:	movt	r3, #2
   11dfc:	str	r0, [r3, #56]	; 0x38
   11e00:	mov	r0, #0
   11e04:	b	11c5c <__assert_fail@plt+0x820>
   11e08:	movw	r3, #54984	; 0xd6c8
   11e0c:	movt	r3, #2
   11e10:	ldr	r2, [r3]
   11e14:	orr	r2, r2, #32
   11e18:	str	r2, [r3]
   11e1c:	mov	r0, #0
   11e20:	b	11c5c <__assert_fail@plt+0x820>
   11e24:	movw	r3, #54984	; 0xd6c8
   11e28:	movt	r3, #2
   11e2c:	ldr	r2, [r3]
   11e30:	orr	r2, r2, #1
   11e34:	str	r2, [r3]
   11e38:	mov	r0, #0
   11e3c:	b	11c5c <__assert_fail@plt+0x820>
   11e40:	movw	r0, #45296	; 0xb0f0
   11e44:	movt	r0, #1
   11e48:	bl	1193c <__assert_fail@plt+0x500>
   11e4c:	movw	r3, #53564	; 0xd13c
   11e50:	movt	r3, #2
   11e54:	str	r0, [r3, #48]	; 0x30
   11e58:	mov	r0, #0
   11e5c:	b	11c5c <__assert_fail@plt+0x820>
   11e60:	movw	r0, #45308	; 0xb0fc
   11e64:	movt	r0, #1
   11e68:	bl	1193c <__assert_fail@plt+0x500>
   11e6c:	movw	r3, #53564	; 0xd13c
   11e70:	movt	r3, #2
   11e74:	str	r0, [r3, #48]	; 0x30
   11e78:	mov	r0, #0
   11e7c:	b	11c5c <__assert_fail@plt+0x820>
   11e80:	mov	r2, #0
   11e84:	mov	r1, #255	; 0xff
   11e88:	mov	r0, r5
   11e8c:	bl	123c0 <__assert_fail@plt+0xf84>
   11e90:	movw	r3, #54836	; 0xd634
   11e94:	movt	r3, #2
   11e98:	str	r0, [r3, #12]
   11e9c:	mov	r0, #0
   11ea0:	b	11c5c <__assert_fail@plt+0x820>
   11ea4:	movw	r3, #54984	; 0xd6c8
   11ea8:	movt	r3, #2
   11eac:	ldr	r2, [r3]
   11eb0:	orr	r2, r2, #64	; 0x40
   11eb4:	str	r2, [r3]
   11eb8:	movw	r1, #45448	; 0xb188
   11ebc:	movt	r1, #1
   11ec0:	mov	r0, r5
   11ec4:	bl	11208 <strcasecmp@plt>
   11ec8:	cmp	r0, #0
   11ecc:	moveq	r1, #1
   11ed0:	beq	11ef0 <__assert_fail@plt+0xab4>
   11ed4:	movw	r1, #45456	; 0xb190
   11ed8:	movt	r1, #1
   11edc:	mov	r0, r5
   11ee0:	bl	11208 <strcasecmp@plt>
   11ee4:	cmp	r0, #0
   11ee8:	moveq	r1, #2
   11eec:	bne	11f0c <__assert_fail@plt+0xad0>
   11ef0:	movw	r3, #54996	; 0xd6d4
   11ef4:	movt	r3, #2
   11ef8:	ldr	r2, [r3]
   11efc:	orr	r2, r2, r1
   11f00:	str	r2, [r3]
   11f04:	mov	r0, #0
   11f08:	b	11c5c <__assert_fail@plt+0x820>
   11f0c:	mov	r3, r5
   11f10:	movw	r2, #45464	; 0xb198
   11f14:	movt	r2, #1
   11f18:	mov	r1, #0
   11f1c:	mov	r0, #1
   11f20:	bl	11238 <error@plt>
   11f24:	mov	r1, #0
   11f28:	b	11ef0 <__assert_fail@plt+0xab4>
   11f2c:	nop	{0}
   11f30:	andeq	r0, r0, r0
   11f34:	addmi	r4, pc, r0
   11f38:	andeq	sp, r2, r4, asr #12
   11f3c:	andeq	sp, r2, r8, ror #2
   11f40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f44:	strd	r6, [sp, #8]
   11f48:	strd	r8, [sp, #16]
   11f4c:	strd	sl, [sp, #24]
   11f50:	str	lr, [sp, #32]
   11f54:	sub	sp, sp, #180	; 0xb4
   11f58:	mov	r5, r0
   11f5c:	str	r1, [sp, #12]
   11f60:	movw	r1, #5432	; 0x1538
   11f64:	movt	r1, #1
   11f68:	mov	r0, #2
   11f6c:	bl	11190 <signal@plt>
   11f70:	ldr	r7, [r5]
   11f74:	add	r7, r7, #1
   11f78:	mov	r2, #0
   11f7c:	mov	r3, #0
   11f80:	strd	r2, [sp, #40]	; 0x28
   11f84:	strd	r2, [sp, #24]
   11f88:	strd	r2, [sp, #16]
   11f8c:	movw	r3, #54836	; 0xd634
   11f90:	movt	r3, #2
   11f94:	ldr	r3, [r3, #32]
   11f98:	cmp	r3, #0
   11f9c:	beq	11fc4 <__assert_fail@plt+0xb88>
   11fa0:	mov	r4, #0
   11fa4:	movw	r6, #54836	; 0xd634
   11fa8:	movt	r6, #2
   11fac:	mov	r0, r5
   11fb0:	bl	1154c <__assert_fail@plt+0x110>
   11fb4:	add	r4, r4, #1
   11fb8:	ldr	r3, [r6, #32]
   11fbc:	cmp	r3, r4
   11fc0:	bhi	11fac <__assert_fail@plt+0xb70>
   11fc4:	movw	r3, #54984	; 0xd6c8
   11fc8:	movt	r3, #2
   11fcc:	ldr	r3, [r3]
   11fd0:	tst	r3, #1
   11fd4:	movwne	r3, #10000	; 0x2710
   11fd8:	strne	r3, [sp, #28]
   11fdc:	bne	12008 <__assert_fail@plt+0xbcc>
   11fe0:	ldr	r1, [r5, #20]
   11fe4:	movw	r3, #19923	; 0x4dd3
   11fe8:	movt	r3, #4194	; 0x1062
   11fec:	umull	r2, r3, r3, r1
   11ff0:	lsr	r3, r3, #6
   11ff4:	str	r3, [sp, #24]
   11ff8:	mov	r2, #1000	; 0x3e8
   11ffc:	mls	r3, r2, r3, r1
   12000:	mul	r3, r2, r3
   12004:	str	r3, [sp, #28]
   12008:	mov	r1, #0
   1200c:	add	r0, sp, #32
   12010:	bl	1122c <gettimeofday@plt>
   12014:	mov	r0, r5
   12018:	bl	1154c <__assert_fail@plt+0x110>
   1201c:	mov	sl, #0
   12020:	mov	r9, sl
   12024:	mov	fp, sl
   12028:	movw	r6, #54836	; 0xd634
   1202c:	movt	r6, #2
   12030:	movw	r4, #16959	; 0x423f
   12034:	movt	r4, #15
   12038:	movw	r8, #54984	; 0xd6c8
   1203c:	movt	r8, #2
   12040:	b	12158 <__assert_fail@plt+0xd1c>
   12044:	mov	r3, #0
   12048:	str	r3, [sp, #44]	; 0x2c
   1204c:	str	r3, [sp, #40]	; 0x28
   12050:	b	12260 <__assert_fail@plt+0xe24>
   12054:	bl	112f8 <__errno_location@plt>
   12058:	ldr	r1, [r0]
   1205c:	cmp	r1, #4
   12060:	beq	12158 <__assert_fail@plt+0xd1c>
   12064:	movw	r2, #45520	; 0xb1d0
   12068:	movt	r2, #1
   1206c:	mov	r0, #1
   12070:	bl	11238 <error@plt>
   12074:	b	12158 <__assert_fail@plt+0xd1c>
   12078:	mov	r0, r5
   1207c:	bl	14184 <__assert_fail@plt+0x2d48>
   12080:	cmp	r0, #0
   12084:	addeq	sl, sl, #1
   12088:	cmp	fp, #0
   1208c:	beq	12104 <__assert_fail@plt+0xcc8>
   12090:	movw	r3, #53564	; 0xd13c
   12094:	movt	r3, #2
   12098:	ldr	r1, [r3, #52]	; 0x34
   1209c:	add	r0, r5, #12
   120a0:	bl	128d4 <__assert_fail@plt+0x1498>
   120a4:	cmp	r0, #0
   120a8:	bne	120cc <__assert_fail@plt+0xc90>
   120ac:	ldr	r3, [r5, #8]
   120b0:	cmp	r3, sl
   120b4:	movhi	r2, #0
   120b8:	movls	r2, #1
   120bc:	cmp	r3, #0
   120c0:	moveq	r2, #0
   120c4:	cmp	r2, #0
   120c8:	beq	12158 <__assert_fail@plt+0xd1c>
   120cc:	mov	r0, r5
   120d0:	bl	1288c <__assert_fail@plt+0x1450>
   120d4:	ldr	r3, [sp, #12]
   120d8:	cmp	r3, #0
   120dc:	moveq	r0, #0
   120e0:	beq	120e8 <__assert_fail@plt+0xcac>
   120e4:	blx	r3
   120e8:	add	sp, sp, #180	; 0xb4
   120ec:	ldrd	r4, [sp]
   120f0:	ldrd	r6, [sp, #8]
   120f4:	ldrd	r8, [sp, #16]
   120f8:	ldrd	sl, [sp, #24]
   120fc:	add	sp, sp, #32
   12100:	pop	{pc}		; (ldr pc, [sp], #4)
   12104:	mov	r1, #0
   12108:	add	r0, sp, #16
   1210c:	bl	1122c <gettimeofday@plt>
   12110:	add	fp, sp, #16
   12114:	b	12090 <__assert_fail@plt+0xc54>
   12118:	mov	r0, r5
   1211c:	bl	1154c <__assert_fail@plt+0x110>
   12120:	ldr	r3, [r8]
   12124:	and	r3, r3, #9
   12128:	cmp	r3, #1
   1212c:	beq	122c4 <__assert_fail@plt+0xe88>
   12130:	movw	r3, #53564	; 0xd13c
   12134:	movt	r3, #2
   12138:	ldr	r1, [r3, #52]	; 0x34
   1213c:	add	r0, r5, #12
   12140:	bl	128d4 <__assert_fail@plt+0x1498>
   12144:	cmp	r0, #0
   12148:	bne	120cc <__assert_fail@plt+0xc90>
   1214c:	mov	r1, #0
   12150:	add	r0, sp, #32
   12154:	bl	1122c <gettimeofday@plt>
   12158:	ldr	r3, [r6]
   1215c:	cmp	r3, #0
   12160:	bne	120cc <__assert_fail@plt+0xc90>
   12164:	add	r3, sp, #44	; 0x2c
   12168:	add	r1, sp, #172	; 0xac
   1216c:	mov	r2, #0
   12170:	str	r2, [r3, #4]!
   12174:	cmp	r3, r1
   12178:	bne	12170 <__assert_fail@plt+0xd34>
   1217c:	ldr	r3, [r5]
   12180:	add	r2, r3, #31
   12184:	cmp	r3, #0
   12188:	movge	r2, r3
   1218c:	asr	r2, r2, #5
   12190:	add	r1, sp, #176	; 0xb0
   12194:	add	r2, r1, r2, lsl #2
   12198:	rsbs	r1, r3, #0
   1219c:	and	r3, r3, #31
   121a0:	and	r1, r1, #31
   121a4:	rsbpl	r3, r1, #0
   121a8:	ldr	r1, [r2, #-128]	; 0xffffff80
   121ac:	mov	r0, #1
   121b0:	orr	r3, r1, r0, lsl r3
   121b4:	str	r3, [r2, #-128]	; 0xffffff80
   121b8:	mov	r1, #0
   121bc:	add	r0, sp, #16
   121c0:	bl	1122c <gettimeofday@plt>
   121c4:	ldr	r2, [sp, #32]
   121c8:	ldr	r3, [sp, #24]
   121cc:	add	r2, r2, r3
   121d0:	ldr	r3, [sp, #16]
   121d4:	sub	r2, r2, r3
   121d8:	str	r2, [sp, #40]	; 0x28
   121dc:	ldr	r3, [sp, #36]	; 0x24
   121e0:	ldr	r1, [sp, #28]
   121e4:	add	r3, r3, r1
   121e8:	ldr	r1, [sp, #20]
   121ec:	sub	r3, r3, r1
   121f0:	str	r3, [sp, #44]	; 0x2c
   121f4:	cmp	r3, #0
   121f8:	bge	12220 <__assert_fail@plt+0xde4>
   121fc:	sub	r2, r2, #1
   12200:	add	r3, r3, #999424	; 0xf4000
   12204:	add	r3, r3, #576	; 0x240
   12208:	mov	r1, r2
   1220c:	sub	r2, r2, #1
   12210:	cmp	r3, #0
   12214:	blt	12200 <__assert_fail@plt+0xdc4>
   12218:	str	r3, [sp, #44]	; 0x2c
   1221c:	str	r1, [sp, #40]	; 0x28
   12220:	ldr	r3, [sp, #44]	; 0x2c
   12224:	cmp	r3, r4
   12228:	ble	12254 <__assert_fail@plt+0xe18>
   1222c:	ldr	r2, [sp, #40]	; 0x28
   12230:	add	r2, r2, #1
   12234:	sub	r3, r3, #999424	; 0xf4000
   12238:	sub	r3, r3, #576	; 0x240
   1223c:	mov	r1, r2
   12240:	add	r2, r2, #1
   12244:	cmp	r3, r4
   12248:	bgt	12234 <__assert_fail@plt+0xdf8>
   1224c:	str	r3, [sp, #44]	; 0x2c
   12250:	str	r1, [sp, #40]	; 0x28
   12254:	ldr	r3, [sp, #40]	; 0x28
   12258:	cmp	r3, #0
   1225c:	blt	12044 <__assert_fail@plt+0xc08>
   12260:	add	r3, sp, #40	; 0x28
   12264:	str	r3, [sp]
   12268:	mov	r3, #0
   1226c:	mov	r2, r3
   12270:	add	r1, sp, #48	; 0x30
   12274:	mov	r0, r7
   12278:	bl	111c0 <select@plt>
   1227c:	cmp	r0, #0
   12280:	blt	12054 <__assert_fail@plt+0xc18>
   12284:	cmp	r0, #1
   12288:	beq	12078 <__assert_fail@plt+0xc3c>
   1228c:	ldr	r3, [r5, #8]
   12290:	cmp	r3, #0
   12294:	beq	12118 <__assert_fail@plt+0xcdc>
   12298:	ldr	r2, [r5, #112]	; 0x70
   1229c:	cmp	r3, r2
   122a0:	bhi	12118 <__assert_fail@plt+0xcdc>
   122a4:	cmp	r9, #0
   122a8:	bne	120cc <__assert_fail@plt+0xc90>
   122ac:	movw	r3, #53564	; 0xd13c
   122b0:	movt	r3, #2
   122b4:	ldr	r3, [r3, #56]	; 0x38
   122b8:	str	r3, [sp, #24]
   122bc:	mov	r9, #1
   122c0:	b	1214c <__assert_fail@plt+0xd10>
   122c4:	movw	r3, #54828	; 0xd62c
   122c8:	movt	r3, #2
   122cc:	ldr	r1, [r3]
   122d0:	mov	r0, #46	; 0x2e
   122d4:	bl	113c4 <putc@plt>
   122d8:	b	12130 <__assert_fail@plt+0xcf4>
   122dc:	str	r4, [sp, #-8]!
   122e0:	str	lr, [sp, #4]
   122e4:	movw	r3, #54828	; 0xd62c
   122e8:	movt	r3, #2
   122ec:	ldr	r0, [r3]
   122f0:	bl	11130 <fflush@plt>
   122f4:	movw	r4, #54992	; 0xd6d0
   122f8:	movt	r4, #2
   122fc:	ldr	r3, [r4]
   12300:	ldr	r1, [r3, #52]	; 0x34
   12304:	movw	r0, #45536	; 0xb1e0
   12308:	movt	r0, #1
   1230c:	bl	11118 <printf@plt>
   12310:	ldr	r3, [r4]
   12314:	ldr	r1, [r3, #112]	; 0x70
   12318:	movw	r0, #45564	; 0xb1fc
   1231c:	movt	r0, #1
   12320:	bl	11118 <printf@plt>
   12324:	ldr	r3, [r4]
   12328:	ldr	r1, [r3, #116]	; 0x74
   1232c:	movw	r0, #45592	; 0xb218
   12330:	movt	r0, #1
   12334:	bl	11118 <printf@plt>
   12338:	ldr	r3, [r4]
   1233c:	ldr	r1, [r3, #120]	; 0x78
   12340:	cmp	r1, #0
   12344:	bne	12390 <__assert_fail@plt+0xf54>
   12348:	movw	r3, #54992	; 0xd6d0
   1234c:	movt	r3, #2
   12350:	ldr	r2, [r3]
   12354:	ldr	r3, [r2, #112]	; 0x70
   12358:	cmp	r3, #0
   1235c:	beq	12378 <__assert_fail@plt+0xf3c>
   12360:	ldr	r1, [r2, #116]	; 0x74
   12364:	cmp	r3, r1
   12368:	bcs	123a0 <__assert_fail@plt+0xf64>
   1236c:	movw	r0, #45636	; 0xb244
   12370:	movt	r0, #1
   12374:	bl	11118 <printf@plt>
   12378:	mov	r0, #10
   1237c:	bl	11334 <putchar@plt>
   12380:	mov	r0, #0
   12384:	ldr	r4, [sp]
   12388:	add	sp, sp, #4
   1238c:	pop	{pc}		; (ldr pc, [sp], #4)
   12390:	movw	r0, #45616	; 0xb230
   12394:	movt	r0, #1
   12398:	bl	11118 <printf@plt>
   1239c:	b	12348 <__assert_fail@plt+0xf0c>
   123a0:	sub	r1, r3, r1
   123a4:	mov	r2, #100	; 0x64
   123a8:	mul	r1, r2, r1
   123ac:	udiv	r1, r1, r3
   123b0:	movw	r0, #45676	; 0xb26c
   123b4:	movt	r0, #1
   123b8:	bl	11118 <printf@plt>
   123bc:	b	12378 <__assert_fail@plt+0xf3c>
   123c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   123c4:	strd	r6, [sp, #8]
   123c8:	str	lr, [sp, #16]
   123cc:	sub	sp, sp, #20
   123d0:	mov	r7, r0
   123d4:	mov	r5, r1
   123d8:	mov	r6, r2
   123dc:	mov	r2, #0
   123e0:	add	r1, sp, #12
   123e4:	bl	112c8 <strtoul@plt>
   123e8:	mov	r4, r0
   123ec:	ldr	r3, [sp, #12]
   123f0:	ldrb	r2, [r3]
   123f4:	cmp	r2, #0
   123f8:	bne	12428 <__assert_fail@plt+0xfec>
   123fc:	orrs	r3, r6, r4
   12400:	beq	12448 <__assert_fail@plt+0x100c>
   12404:	cmp	r5, #0
   12408:	cmpne	r4, r5
   1240c:	bhi	12464 <__assert_fail@plt+0x1028>
   12410:	mov	r0, r4
   12414:	add	sp, sp, #20
   12418:	ldrd	r4, [sp]
   1241c:	ldrd	r6, [sp, #8]
   12420:	add	sp, sp, #16
   12424:	pop	{pc}		; (ldr pc, [sp], #4)
   12428:	str	r3, [sp]
   1242c:	mov	r3, r7
   12430:	movw	r2, #45352	; 0xb128
   12434:	movt	r2, #1
   12438:	mov	r1, #0
   1243c:	mov	r0, #1
   12440:	bl	11238 <error@plt>
   12444:	b	123fc <__assert_fail@plt+0xfc0>
   12448:	mov	r3, r7
   1244c:	movw	r2, #45384	; 0xb148
   12450:	movt	r2, #1
   12454:	mov	r1, #0
   12458:	mov	r0, #1
   1245c:	bl	11238 <error@plt>
   12460:	b	12410 <__assert_fail@plt+0xfd4>
   12464:	mov	r3, r7
   12468:	movw	r2, #46840	; 0xb6f8
   1246c:	movt	r2, #1
   12470:	mov	r1, #0
   12474:	mov	r0, #1
   12478:	bl	11238 <error@plt>
   1247c:	b	12410 <__assert_fail@plt+0xfd4>
   12480:	movw	r3, #53564	; 0xd13c
   12484:	movt	r3, #2
   12488:	ldr	r3, [r3]
   1248c:	cmp	r3, #0
   12490:	bxeq	lr
   12494:	strd	r4, [sp, #-16]!
   12498:	str	r6, [sp, #8]
   1249c:	str	lr, [sp, #12]
   124a0:	mov	r5, r1
   124a4:	mov	r4, r0
   124a8:	mov	r0, r3
   124ac:	bl	19538 <argp_parse@@Base+0x1310>
   124b0:	movw	r3, #54980	; 0xd6c4
   124b4:	movt	r3, #2
   124b8:	str	r0, [r3]
   124bc:	cmp	r4, #0
   124c0:	beq	12514 <__assert_fail@plt+0x10d8>
   124c4:	movw	r3, #53564	; 0xd13c
   124c8:	movt	r3, #2
   124cc:	ldr	r1, [r3]
   124d0:	add	r1, r0, r1
   124d4:	cmp	r0, r1
   124d8:	bcs	12504 <__assert_fail@plt+0x10c8>
   124dc:	sub	r2, r0, #1
   124e0:	sub	r1, r1, #1
   124e4:	mov	r3, #0
   124e8:	ldrb	ip, [r4, r3]
   124ec:	strb	ip, [r2, #1]!
   124f0:	add	r3, r3, #1
   124f4:	cmp	r3, r5
   124f8:	movcs	r3, #0
   124fc:	cmp	r2, r1
   12500:	bne	124e8 <__assert_fail@plt+0x10ac>
   12504:	ldrd	r4, [sp]
   12508:	ldr	r6, [sp, #8]
   1250c:	add	sp, sp, #12
   12510:	pop	{pc}		; (ldr pc, [sp], #4)
   12514:	movw	r3, #53564	; 0xd13c
   12518:	movt	r3, #2
   1251c:	ldr	r3, [r3]
   12520:	cmp	r3, #0
   12524:	beq	12504 <__assert_fail@plt+0x10c8>
   12528:	mov	r3, #0
   1252c:	movw	r0, #54980	; 0xd6c4
   12530:	movt	r0, #2
   12534:	movw	r1, #53564	; 0xd13c
   12538:	movt	r1, #2
   1253c:	ldr	r2, [r0]
   12540:	strb	r3, [r2, r3]
   12544:	add	r3, r3, #1
   12548:	ldr	r2, [r1]
   1254c:	cmp	r2, r3
   12550:	bhi	1253c <__assert_fail@plt+0x1100>
   12554:	b	12504 <__assert_fail@plt+0x10c8>
   12558:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1255c:	strd	r6, [sp, #8]
   12560:	strd	r8, [sp, #16]
   12564:	str	lr, [sp, #24]
   12568:	sub	sp, sp, #12
   1256c:	mov	r8, r1
   12570:	ldrb	r3, [r0]
   12574:	cmp	r3, #0
   12578:	beq	12604 <__assert_fail@plt+0x11c8>
   1257c:	mov	r4, r0
   12580:	ldr	r3, [r1]
   12584:	cmp	r3, #0
   12588:	ble	12624 <__assert_fail@plt+0x11e8>
   1258c:	sub	r6, r2, #1
   12590:	mov	r5, #0
   12594:	movw	r7, #46868	; 0xb714
   12598:	movt	r7, #1
   1259c:	movw	r9, #46876	; 0xb71c
   125a0:	movt	r9, #1
   125a4:	b	125e4 <__assert_fail@plt+0x11a8>
   125a8:	mov	r3, r4
   125ac:	mov	r2, r9
   125b0:	mov	r1, #0
   125b4:	mov	r0, #1
   125b8:	bl	11238 <error@plt>
   125bc:	ldr	r3, [sp, #4]
   125c0:	strb	r3, [r6, #1]!
   125c4:	add	r5, r5, #1
   125c8:	ldr	r3, [sp]
   125cc:	ldrb	r3, [r4, r3]!
   125d0:	cmp	r3, #0
   125d4:	beq	12608 <__assert_fail@plt+0x11cc>
   125d8:	ldr	r3, [r8]
   125dc:	cmp	r3, r5
   125e0:	ble	12608 <__assert_fail@plt+0x11cc>
   125e4:	mov	r3, sp
   125e8:	add	r2, sp, #4
   125ec:	mov	r1, r7
   125f0:	mov	r0, r4
   125f4:	bl	113b8 <sscanf@plt>
   125f8:	cmp	r0, #1
   125fc:	beq	125bc <__assert_fail@plt+0x1180>
   12600:	b	125a8 <__assert_fail@plt+0x116c>
   12604:	mov	r5, #0
   12608:	str	r5, [r8]
   1260c:	add	sp, sp, #12
   12610:	ldrd	r4, [sp]
   12614:	ldrd	r6, [sp, #8]
   12618:	ldrd	r8, [sp, #16]
   1261c:	add	sp, sp, #24
   12620:	pop	{pc}		; (ldr pc, [sp], #4)
   12624:	mov	r5, #0
   12628:	b	12608 <__assert_fail@plt+0x11cc>
   1262c:	ldr	r3, [r0, #4]
   12630:	ldr	r2, [r1, #4]
   12634:	sub	r3, r3, r2
   12638:	str	r3, [r0, #4]
   1263c:	cmp	r3, #0
   12640:	blt	12658 <__assert_fail@plt+0x121c>
   12644:	ldr	r3, [r0]
   12648:	ldr	r2, [r1]
   1264c:	sub	r3, r3, r2
   12650:	str	r3, [r0]
   12654:	bx	lr
   12658:	ldr	r2, [r0]
   1265c:	sub	r2, r2, #1
   12660:	str	r2, [r0]
   12664:	add	r3, r3, #999424	; 0xf4000
   12668:	add	r3, r3, #576	; 0x240
   1266c:	str	r3, [r0, #4]
   12670:	b	12644 <__assert_fail@plt+0x1208>
   12674:	vcmpe.f64	d0, #0.0
   12678:	vmrs	APSR_nzcv, fpscr
   1267c:	vnegmi.f64	d0, d0
   12680:	bx	lr
   12684:	vcmpe.f64	d0, #0.0
   12688:	vmrs	APSR_nzcv, fpscr
   1268c:	bmi	126dc <__assert_fail@plt+0x12a0>
   12690:	vcmpe.f64	d0, d1
   12694:	vmrs	APSR_nzcv, fpscr
   12698:	bmi	126e4 <__assert_fail@plt+0x12a8>
   1269c:	vldr	d6, [pc, #76]	; 126f0 <__assert_fail@plt+0x12b4>
   126a0:	vmul.f64	d6, d0, d6
   126a4:	vldr	d4, [pc, #68]	; 126f0 <__assert_fail@plt+0x12b4>
   126a8:	vdiv.f64	d7, d0, d6
   126ac:	vadd.f64	d7, d7, d6
   126b0:	vmul.f64	d7, d7, d4
   126b4:	vsub.f64	d5, d7, d6
   126b8:	vcmpe.f64	d5, #0.0
   126bc:	vmrs	APSR_nzcv, fpscr
   126c0:	vnegmi.f64	d5, d5
   126c4:	vmov.f64	d6, d7
   126c8:	vcmpe.f64	d1, d5
   126cc:	vmrs	APSR_nzcv, fpscr
   126d0:	bmi	126a8 <__assert_fail@plt+0x126c>
   126d4:	vmov.f64	d0, d7
   126d8:	bx	lr
   126dc:	vldr	d7, [pc, #20]	; 126f8 <__assert_fail@plt+0x12bc>
   126e0:	b	126d4 <__assert_fail@plt+0x1298>
   126e4:	vldr	d7, [pc, #12]	; 126f8 <__assert_fail@plt+0x12bc>
   126e8:	b	126d4 <__assert_fail@plt+0x1298>
   126ec:	nop	{0}
   126f0:	andeq	r0, r0, r0
   126f4:	svccc	0x00e00000
	...
   12700:	mvn	r0, r0
   12704:	lsr	r0, r0, #31
   12708:	bx	lr
   1270c:	str	r4, [sp, #-8]!
   12710:	str	lr, [sp, #4]
   12714:	mov	r4, r0
   12718:	bic	r3, r2, #-2147483648	; 0x80000000
   1271c:	cmp	r2, #0
   12720:	movwge	r2, #46904	; 0xb738
   12724:	movtge	r2, #1
   12728:	movwlt	r2, #46908	; 0xb73c
   1272c:	movtlt	r2, #1
   12730:	bl	11304 <snprintf@plt>
   12734:	mov	r0, r4
   12738:	ldr	r4, [sp]
   1273c:	add	sp, sp, #4
   12740:	pop	{pc}		; (ldr pc, [sp], #4)
   12744:	str	r4, [sp, #-8]!
   12748:	str	lr, [sp, #4]
   1274c:	mov	r4, r0
   12750:	ldr	r3, [r0, #80]	; 0x50
   12754:	cmp	r3, #0
   12758:	beq	12778 <__assert_fail@plt+0x133c>
   1275c:	ldr	r3, [r4, #76]	; 0x4c
   12760:	cmp	r3, #0
   12764:	movne	r0, #0
   12768:	beq	127a0 <__assert_fail@plt+0x1364>
   1276c:	ldr	r4, [sp]
   12770:	add	sp, sp, #4
   12774:	pop	{pc}		; (ldr pc, [sp], #4)
   12778:	cmp	r1, #0
   1277c:	ldr	r0, [r0, #56]	; 0x38
   12780:	addne	r0, r0, #8
   12784:	addeq	r0, r0, #80	; 0x50
   12788:	bl	19a70 <argp_parse@@Base+0x1848>
   1278c:	str	r0, [r4, #80]	; 0x50
   12790:	cmp	r0, #0
   12794:	bne	1275c <__assert_fail@plt+0x1320>
   12798:	mvn	r0, #0
   1279c:	b	1276c <__assert_fail@plt+0x1330>
   127a0:	ldr	r0, [r4, #72]	; 0x48
   127a4:	bl	19a70 <argp_parse@@Base+0x1848>
   127a8:	str	r0, [r4, #76]	; 0x4c
   127ac:	cmp	r0, #0
   127b0:	beq	127c8 <__assert_fail@plt+0x138c>
   127b4:	ldr	r2, [r4, #72]	; 0x48
   127b8:	mov	r1, #0
   127bc:	bl	11328 <memset@plt>
   127c0:	mov	r0, #0
   127c4:	b	1276c <__assert_fail@plt+0x1330>
   127c8:	mvn	r0, #0
   127cc:	b	1276c <__assert_fail@plt+0x1330>
   127d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   127d4:	strd	r6, [sp, #8]
   127d8:	str	r8, [sp, #16]
   127dc:	str	lr, [sp, #20]
   127e0:	mov	r8, r0
   127e4:	mov	r7, r1
   127e8:	mov	r4, r2
   127ec:	mov	r5, r3
   127f0:	ldrb	r1, [sp, #24]
   127f4:	bl	12744 <__assert_fail@plt+0x1308>
   127f8:	subs	r6, r0, #0
   127fc:	bne	12840 <__assert_fail@plt+0x1404>
   12800:	add	r3, r4, r5
   12804:	ldr	r2, [r8, #56]	; 0x38
   12808:	cmp	r2, r3
   1280c:	bcc	12848 <__assert_fail@plt+0x140c>
   12810:	ldr	r0, [r8, #80]	; 0x50
   12814:	add	r0, r0, #8
   12818:	mov	r2, r5
   1281c:	mov	r1, r7
   12820:	add	r0, r0, r4
   12824:	bl	11184 <memcpy@plt>
   12828:	mov	r0, r6
   1282c:	ldrd	r4, [sp]
   12830:	ldrd	r6, [sp, #8]
   12834:	ldr	r8, [sp, #16]
   12838:	add	sp, sp, #20
   1283c:	pop	{pc}		; (ldr pc, [sp], #4)
   12840:	mvn	r6, #0
   12844:	b	12828 <__assert_fail@plt+0x13ec>
   12848:	mvn	r6, #0
   1284c:	b	12828 <__assert_fail@plt+0x13ec>
   12850:	str	r1, [r0, #8]
   12854:	bx	lr
   12858:	push	{lr}		; (str lr, [sp, #-4]!)
   1285c:	sub	sp, sp, #20
   12860:	str	r2, [sp, #12]
   12864:	ldr	r0, [r0]
   12868:	str	r3, [sp]
   1286c:	add	r3, sp, #12
   12870:	mov	r2, r1
   12874:	mov	r1, #1
   12878:	bl	1110c <setsockopt@plt>
   1287c:	add	sp, sp, #20
   12880:	pop	{pc}		; (ldr pc, [sp], #4)
   12884:	str	r1, [r0, #20]
   12888:	bx	lr
   1288c:	str	r4, [sp, #-8]!
   12890:	str	lr, [sp, #4]
   12894:	mov	r4, r0
   12898:	ldr	r0, [r0, #80]	; 0x50
   1289c:	cmp	r0, #0
   128a0:	beq	128b0 <__assert_fail@plt+0x1474>
   128a4:	bl	18f00 <argp_parse@@Base+0xcd8>
   128a8:	mov	r3, #0
   128ac:	str	r3, [r4, #80]	; 0x50
   128b0:	ldr	r0, [r4, #76]	; 0x4c
   128b4:	cmp	r0, #0
   128b8:	beq	128c8 <__assert_fail@plt+0x148c>
   128bc:	bl	18f00 <argp_parse@@Base+0xcd8>
   128c0:	mov	r3, #0
   128c4:	str	r3, [r4, #76]	; 0x4c
   128c8:	ldr	r4, [sp]
   128cc:	add	sp, sp, #4
   128d0:	pop	{pc}		; (ldr pc, [sp], #4)
   128d4:	strd	r4, [sp, #-12]!
   128d8:	str	lr, [sp, #8]
   128dc:	sub	sp, sp, #12
   128e0:	mov	r5, r0
   128e4:	mov	r4, r1
   128e8:	mov	r1, #0
   128ec:	mov	r0, sp
   128f0:	bl	1122c <gettimeofday@plt>
   128f4:	cmn	r4, #1
   128f8:	moveq	r0, #0
   128fc:	bne	12910 <__assert_fail@plt+0x14d4>
   12900:	add	sp, sp, #12
   12904:	ldrd	r4, [sp]
   12908:	add	sp, sp, #8
   1290c:	pop	{pc}		; (ldr pc, [sp], #4)
   12910:	mov	r1, r5
   12914:	mov	r0, sp
   12918:	bl	1262c <__assert_fail@plt+0x11f0>
   1291c:	ldr	r0, [sp]
   12920:	cmp	r0, r4
   12924:	movlt	r0, #0
   12928:	movge	r0, #1
   1292c:	b	12900 <__assert_fail@plt+0x14c4>
   12930:	strd	r4, [sp, #-16]!
   12934:	str	r6, [sp, #8]
   12938:	str	lr, [sp, #12]
   1293c:	sub	sp, sp, #320	; 0x140
   12940:	mov	r4, r0
   12944:	mov	r5, r1
   12948:	mov	r3, #1
   1294c:	str	r3, [sp, #8]
   12950:	mov	r3, #0
   12954:	str	r3, [sp, #4]
   12958:	str	r3, [sp]
   1295c:	mov	r3, #46	; 0x2e
   12960:	add	r2, sp, #272	; 0x110
   12964:	bl	1137c <getnameinfo@plt>
   12968:	cmp	r0, #0
   1296c:	bne	129fc <__assert_fail@plt+0x15c0>
   12970:	movw	r3, #54984	; 0xd6c8
   12974:	movt	r3, #2
   12978:	ldr	r3, [r3]
   1297c:	tst	r3, #4
   12980:	bne	12a60 <__assert_fail@plt+0x1624>
   12984:	mov	r3, #40	; 0x28
   12988:	str	r3, [sp, #8]
   1298c:	mov	r3, #0
   12990:	str	r3, [sp, #4]
   12994:	str	r3, [sp]
   12998:	mov	r3, #256	; 0x100
   1299c:	add	r2, sp, #16
   129a0:	mov	r1, r5
   129a4:	mov	r0, r4
   129a8:	bl	1137c <getnameinfo@plt>
   129ac:	cmp	r0, #0
   129b0:	bne	12a70 <__assert_fail@plt+0x1634>
   129b4:	add	r6, sp, #272	; 0x110
   129b8:	mov	r0, r6
   129bc:	bl	112d4 <strlen@plt>
   129c0:	mov	r4, r0
   129c4:	add	r0, sp, #16
   129c8:	bl	112d4 <strlen@plt>
   129cc:	add	r4, r4, r0
   129d0:	add	r4, r4, #4
   129d4:	mov	r0, r4
   129d8:	bl	19538 <argp_parse@@Base+0x1310>
   129dc:	mov	r5, r0
   129e0:	str	r6, [sp]
   129e4:	add	r3, sp, #16
   129e8:	movw	r2, #46948	; 0xb764
   129ec:	movt	r2, #1
   129f0:	mov	r1, r4
   129f4:	bl	11304 <snprintf@plt>
   129f8:	b	12a34 <__assert_fail@plt+0x15f8>
   129fc:	cmn	r0, #11
   12a00:	beq	12a4c <__assert_fail@plt+0x1610>
   12a04:	bl	1116c <gai_strerror@plt>
   12a08:	mov	r2, r0
   12a0c:	movw	r3, #54824	; 0xd628
   12a10:	movt	r3, #2
   12a14:	movw	r1, #46916	; 0xb744
   12a18:	movt	r1, #1
   12a1c:	ldr	r0, [r3]
   12a20:	bl	112ec <fprintf@plt>
   12a24:	movw	r0, #46940	; 0xb75c
   12a28:	movt	r0, #1
   12a2c:	bl	199a4 <argp_parse@@Base+0x177c>
   12a30:	mov	r5, r0
   12a34:	mov	r0, r5
   12a38:	add	sp, sp, #320	; 0x140
   12a3c:	ldrd	r4, [sp]
   12a40:	ldr	r6, [sp, #8]
   12a44:	add	sp, sp, #12
   12a48:	pop	{pc}		; (ldr pc, [sp], #4)
   12a4c:	bl	112f8 <__errno_location@plt>
   12a50:	ldr	r0, [r0]
   12a54:	bl	11274 <strerror@plt>
   12a58:	mov	r2, r0
   12a5c:	b	12a0c <__assert_fail@plt+0x15d0>
   12a60:	add	r0, sp, #272	; 0x110
   12a64:	bl	199a4 <argp_parse@@Base+0x177c>
   12a68:	mov	r5, r0
   12a6c:	b	12a34 <__assert_fail@plt+0x15f8>
   12a70:	add	r0, sp, #272	; 0x110
   12a74:	bl	199a4 <argp_parse@@Base+0x177c>
   12a78:	mov	r5, r0
   12a7c:	b	12a34 <__assert_fail@plt+0x15f8>
   12a80:	strd	r4, [sp, #-20]!	; 0xffffffec
   12a84:	strd	r6, [sp, #8]
   12a88:	str	lr, [sp, #16]
   12a8c:	sub	sp, sp, #20
   12a90:	str	r0, [sp, #12]
   12a94:	movw	r3, #54984	; 0xd6c8
   12a98:	movt	r3, #2
   12a9c:	ldr	r3, [r3]
   12aa0:	tst	r3, #4
   12aa4:	bne	12b20 <__assert_fail@plt+0x16e4>
   12aa8:	mov	r2, #2
   12aac:	mov	r1, #4
   12ab0:	add	r0, sp, #12
   12ab4:	bl	111d8 <gethostbyaddr@plt>
   12ab8:	subs	r6, r0, #0
   12abc:	beq	12b44 <__assert_fail@plt+0x1708>
   12ac0:	ldr	r0, [sp, #12]
   12ac4:	bl	111b4 <inet_ntoa@plt>
   12ac8:	mov	r7, r0
   12acc:	bl	112d4 <strlen@plt>
   12ad0:	mov	r4, r0
   12ad4:	ldr	r0, [r6]
   12ad8:	cmp	r0, #0
   12adc:	addeq	r4, r4, #1
   12ae0:	beq	12af0 <__assert_fail@plt+0x16b4>
   12ae4:	bl	112d4 <strlen@plt>
   12ae8:	add	r4, r4, #5
   12aec:	add	r4, r4, r0
   12af0:	mov	r0, r4
   12af4:	bl	19538 <argp_parse@@Base+0x1310>
   12af8:	mov	r5, r0
   12afc:	ldr	r3, [r6]
   12b00:	cmp	r3, #0
   12b04:	beq	12b58 <__assert_fail@plt+0x171c>
   12b08:	str	r7, [sp]
   12b0c:	movw	r2, #46948	; 0xb764
   12b10:	movt	r2, #1
   12b14:	mov	r1, r4
   12b18:	bl	11304 <snprintf@plt>
   12b1c:	b	12b2c <__assert_fail@plt+0x16f0>
   12b20:	bl	111b4 <inet_ntoa@plt>
   12b24:	bl	199a4 <argp_parse@@Base+0x177c>
   12b28:	mov	r5, r0
   12b2c:	mov	r0, r5
   12b30:	add	sp, sp, #20
   12b34:	ldrd	r4, [sp]
   12b38:	ldrd	r6, [sp, #8]
   12b3c:	add	sp, sp, #16
   12b40:	pop	{pc}		; (ldr pc, [sp], #4)
   12b44:	ldr	r0, [sp, #12]
   12b48:	bl	111b4 <inet_ntoa@plt>
   12b4c:	bl	199a4 <argp_parse@@Base+0x177c>
   12b50:	mov	r5, r0
   12b54:	b	12b2c <__assert_fail@plt+0x16f0>
   12b58:	mov	r3, r7
   12b5c:	movw	r2, #45492	; 0xb1b4
   12b60:	movt	r2, #1
   12b64:	mov	r1, r4
   12b68:	bl	11304 <snprintf@plt>
   12b6c:	b	12b2c <__assert_fail@plt+0x16f0>
   12b70:	strd	r4, [sp, #-20]!	; 0xffffffec
   12b74:	strd	r6, [sp, #8]
   12b78:	str	lr, [sp, #16]
   12b7c:	vpush	{d8}
   12b80:	sub	sp, sp, #28
   12b84:	bl	122dc <__assert_fail@plt+0xea0>
   12b88:	movw	r3, #54992	; 0xd6d0
   12b8c:	movt	r3, #2
   12b90:	ldr	r2, [r3]
   12b94:	ldr	r3, [r2, #116]	; 0x74
   12b98:	cmp	r3, #0
   12b9c:	beq	12bb4 <__assert_fail@plt+0x1778>
   12ba0:	movw	r1, #53564	; 0xd13c
   12ba4:	movt	r1, #2
   12ba8:	ldr	r1, [r1]
   12bac:	cmp	r1, #7
   12bb0:	bhi	12be4 <__assert_fail@plt+0x17a8>
   12bb4:	movw	r3, #54992	; 0xd6d0
   12bb8:	movt	r3, #2
   12bbc:	ldr	r3, [r3]
   12bc0:	ldr	r0, [r3, #116]	; 0x74
   12bc4:	clz	r0, r0
   12bc8:	lsr	r0, r0, #5
   12bcc:	add	sp, sp, #28
   12bd0:	vpop	{d8}
   12bd4:	ldrd	r4, [sp]
   12bd8:	ldrd	r6, [sp, #8]
   12bdc:	add	sp, sp, #16
   12be0:	pop	{pc}		; (ldr pc, [sp], #4)
   12be4:	ldr	r1, [r2, #68]	; 0x44
   12be8:	ldr	r2, [r2, #120]	; 0x78
   12bec:	add	r3, r3, r2
   12bf0:	vmov	s15, r3
   12bf4:	vcvt.f64.u32	d7, s15
   12bf8:	vldr	d6, [r1, #16]
   12bfc:	vdiv.f64	d8, d6, d7
   12c00:	ldrd	r4, [r1]
   12c04:	ldrd	r6, [r1, #8]
   12c08:	vldr	d6, [r1, #24]
   12c0c:	vdiv.f64	d0, d6, d7
   12c10:	vldr	d1, [pc, #40]	; 12c40 <__assert_fail@plt+0x1804>
   12c14:	vmls.f64	d0, d8, d8
   12c18:	bl	12684 <__assert_fail@plt+0x1248>
   12c1c:	vstr	d0, [sp, #16]
   12c20:	strd	r6, [sp, #8]
   12c24:	vstr	d8, [sp]
   12c28:	mov	r2, r4
   12c2c:	mov	r3, r5
   12c30:	movw	r0, #46956	; 0xb76c
   12c34:	movt	r0, #1
   12c38:	bl	11118 <printf@plt>
   12c3c:	b	12bb4 <__assert_fail@plt+0x1778>
   12c40:	rscsle	sl, r1, #252, 18	; 0x3f0000
   12c44:	svccc	0x0040624d
   12c48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12c4c:	strd	r6, [sp, #8]
   12c50:	strd	r8, [sp, #16]
   12c54:	strd	sl, [sp, #24]
   12c58:	str	lr, [sp, #32]
   12c5c:	sub	sp, sp, #12
   12c60:	mov	r4, r0
   12c64:	add	r6, r0, #8
   12c68:	ldrb	r5, [r0, #8]
   12c6c:	and	r5, r5, #15
   12c70:	lsl	r5, r5, #2
   12c74:	add	r8, r0, #28
   12c78:	movw	r3, #54984	; 0xd6c8
   12c7c:	movt	r3, #2
   12c80:	ldr	r3, [r3]
   12c84:	tst	r3, #32
   12c88:	bne	12dcc <__assert_fail@plt+0x1990>
   12c8c:	movw	r0, #47036	; 0xb7bc
   12c90:	movt	r0, #1
   12c94:	bl	11250 <puts@plt>
   12c98:	ldrb	r1, [r4, #8]
   12c9c:	ldrb	r3, [r4, #9]
   12ca0:	and	r2, r1, #15
   12ca4:	lsr	r1, r1, #4
   12ca8:	movw	r0, #47096	; 0xb7f8
   12cac:	movt	r0, #1
   12cb0:	bl	11118 <printf@plt>
   12cb4:	ldrh	r1, [r4, #10]
   12cb8:	cmp	r1, #8192	; 0x2000
   12cbc:	bls	12cc8 <__assert_fail@plt+0x188c>
   12cc0:	rev16	r1, r1
   12cc4:	uxth	r1, r1
   12cc8:	ldrh	r2, [r4, #12]
   12ccc:	rev16	r2, r2
   12cd0:	uxth	r2, r2
   12cd4:	movw	r0, #47112	; 0xb808
   12cd8:	movt	r0, #1
   12cdc:	bl	11118 <printf@plt>
   12ce0:	ldrh	r1, [r4, #14]
   12ce4:	rev16	r1, r1
   12ce8:	uxth	r1, r1
   12cec:	ubfx	r2, r1, #0, #13
   12cf0:	lsr	r1, r1, #13
   12cf4:	movw	r0, #47124	; 0xb814
   12cf8:	movt	r0, #1
   12cfc:	bl	11118 <printf@plt>
   12d00:	ldrh	r3, [r4, #18]
   12d04:	rev16	r3, r3
   12d08:	uxth	r3, r3
   12d0c:	ldrb	r2, [r4, #17]
   12d10:	ldrb	r1, [r4, #16]
   12d14:	movw	r0, #47136	; 0xb820
   12d18:	movt	r0, #1
   12d1c:	bl	11118 <printf@plt>
   12d20:	ldr	r0, [r6, #12]
   12d24:	bl	111b4 <inet_ntoa@plt>
   12d28:	movw	r7, #47156	; 0xb834
   12d2c:	movt	r7, #1
   12d30:	mov	r1, r0
   12d34:	mov	r0, r7
   12d38:	bl	11118 <printf@plt>
   12d3c:	ldr	r0, [r6, #16]
   12d40:	bl	111b4 <inet_ntoa@plt>
   12d44:	mov	r1, r0
   12d48:	mov	r0, r7
   12d4c:	bl	11118 <printf@plt>
   12d50:	cmp	r5, #20
   12d54:	bls	12d7c <__assert_fail@plt+0x1940>
   12d58:	add	r5, r5, #8
   12d5c:	add	r5, r4, r5
   12d60:	movw	r7, #47164	; 0xb83c
   12d64:	movt	r7, #1
   12d68:	ldrb	r1, [r8], #1
   12d6c:	mov	r0, r7
   12d70:	bl	11118 <printf@plt>
   12d74:	cmp	r5, r8
   12d78:	bne	12d68 <__assert_fail@plt+0x192c>
   12d7c:	mov	r0, #10
   12d80:	bl	11334 <putchar@plt>
   12d84:	ldrb	r1, [r4, #8]
   12d88:	and	r1, r1, #15
   12d8c:	lsl	r0, r1, #2
   12d90:	add	r5, r6, r0
   12d94:	ldrb	r2, [r4, #17]
   12d98:	cmp	r2, #6
   12d9c:	beq	12e3c <__assert_fail@plt+0x1a00>
   12da0:	cmp	r2, #17
   12da4:	beq	12e64 <__assert_fail@plt+0x1a28>
   12da8:	cmp	r2, #1
   12dac:	beq	12e8c <__assert_fail@plt+0x1a50>
   12db0:	add	sp, sp, #12
   12db4:	ldrd	r4, [sp]
   12db8:	ldrd	r6, [sp, #8]
   12dbc:	ldrd	r8, [sp, #16]
   12dc0:	ldrd	sl, [sp, #24]
   12dc4:	add	sp, sp, #32
   12dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dcc:	movw	r0, #47012	; 0xb7a4
   12dd0:	movt	r0, #1
   12dd4:	bl	11118 <printf@plt>
   12dd8:	add	r7, r4, #7
   12ddc:	add	fp, r4, #27
   12de0:	movw	r3, #65529	; 0xfff9
   12de4:	movt	r3, #65535	; 0xffff
   12de8:	sub	r3, r3, r4
   12dec:	str	r3, [sp, #4]
   12df0:	movw	sl, #45588	; 0xb214
   12df4:	movt	sl, #1
   12df8:	movw	r9, #51684	; 0xc9e4
   12dfc:	movt	r9, #1
   12e00:	ldr	r3, [sp, #4]
   12e04:	add	r2, r3, r7
   12e08:	and	r2, r2, #1
   12e0c:	cmp	r2, #0
   12e10:	movne	r2, sl
   12e14:	moveq	r2, r9
   12e18:	ldrb	r1, [r7, #1]!
   12e1c:	movw	r0, #47028	; 0xb7b4
   12e20:	movt	r0, #1
   12e24:	bl	11118 <printf@plt>
   12e28:	cmp	r7, fp
   12e2c:	bne	12e00 <__assert_fail@plt+0x19c4>
   12e30:	mov	r0, #10
   12e34:	bl	11334 <putchar@plt>
   12e38:	b	12c8c <__assert_fail@plt+0x1850>
   12e3c:	ldrb	r0, [r5, #2]
   12e40:	ldrb	r2, [r5, #3]
   12e44:	ldrb	r1, [r6, r1, lsl #2]
   12e48:	ldrb	r3, [r5, #1]
   12e4c:	add	r2, r2, r0, lsl #8
   12e50:	add	r1, r3, r1, lsl #8
   12e54:	movw	r0, #47172	; 0xb844
   12e58:	movt	r0, #1
   12e5c:	bl	11118 <printf@plt>
   12e60:	b	12db0 <__assert_fail@plt+0x1974>
   12e64:	ldrb	r0, [r5, #2]
   12e68:	ldrb	r2, [r5, #3]
   12e6c:	ldrb	r1, [r6, r1, lsl #2]
   12e70:	ldrb	r3, [r5, #1]
   12e74:	add	r2, r2, r0, lsl #8
   12e78:	add	r1, r3, r1, lsl #8
   12e7c:	movw	r0, #47216	; 0xb870
   12e80:	movt	r0, #1
   12e84:	bl	11118 <printf@plt>
   12e88:	b	12db0 <__assert_fail@plt+0x1974>
   12e8c:	ldrb	r6, [r6, r1, lsl #2]
   12e90:	ldrh	r3, [r4, #10]
   12e94:	rev16	r3, r3
   12e98:	uxth	r3, r3
   12e9c:	sub	r3, r3, r0
   12ea0:	ldrb	r2, [r5, #1]
   12ea4:	mov	r1, r6
   12ea8:	movw	r0, #47260	; 0xb89c
   12eac:	movt	r0, #1
   12eb0:	bl	11118 <printf@plt>
   12eb4:	tst	r6, #247	; 0xf7
   12eb8:	beq	12ec8 <__assert_fail@plt+0x1a8c>
   12ebc:	mov	r0, #10
   12ec0:	bl	11334 <putchar@plt>
   12ec4:	b	12db0 <__assert_fail@plt+0x1974>
   12ec8:	ldrb	r0, [r5, #6]
   12ecc:	ldrb	r2, [r5, #7]
   12ed0:	ldrb	r1, [r5, #4]
   12ed4:	ldrb	r3, [r5, #5]
   12ed8:	add	r2, r2, r0, lsl #8
   12edc:	add	r1, r3, r1, lsl #8
   12ee0:	movw	r0, #47292	; 0xb8bc
   12ee4:	movt	r0, #1
   12ee8:	bl	11118 <printf@plt>
   12eec:	b	12ebc <__assert_fail@plt+0x1a80>
   12ef0:	strd	r4, [sp, #-16]!
   12ef4:	str	r6, [sp, #8]
   12ef8:	str	lr, [sp, #12]
   12efc:	mov	r4, r0
   12f00:	mov	r5, r1
   12f04:	ldr	r0, [r0, #4]
   12f08:	bl	111b4 <inet_ntoa@plt>
   12f0c:	mov	r1, r0
   12f10:	movw	r0, #47316	; 0xb8d4
   12f14:	movt	r0, #1
   12f18:	bl	11118 <printf@plt>
   12f1c:	mov	r1, r5
   12f20:	mov	r0, r4
   12f24:	bl	12c48 <__assert_fail@plt+0x180c>
   12f28:	ldrd	r4, [sp]
   12f2c:	ldr	r6, [sp, #8]
   12f30:	add	sp, sp, #12
   12f34:	pop	{pc}		; (ldr pc, [sp], #4)
   12f38:	str	r4, [sp, #-8]!
   12f3c:	str	lr, [sp, #4]
   12f40:	mov	r4, r0
   12f44:	ldrb	ip, [r0]
   12f48:	ldrb	r2, [r0, #1]
   12f4c:	movw	r3, #54272	; 0xd400
   12f50:	movt	r3, #2
   12f54:	add	r0, r3, #240	; 0xf0
   12f58:	b	12f68 <__assert_fail@plt+0x1b2c>
   12f5c:	add	r3, r3, #12
   12f60:	cmp	r3, r0
   12f64:	beq	12f8c <__assert_fail@plt+0x1b50>
   12f68:	ldr	lr, [r3]
   12f6c:	cmp	ip, lr
   12f70:	bne	12f5c <__assert_fail@plt+0x1b20>
   12f74:	ldr	lr, [r3, #4]
   12f78:	cmp	r2, lr
   12f7c:	bne	12f5c <__assert_fail@plt+0x1b20>
   12f80:	ldr	r0, [r3, #8]
   12f84:	bl	11250 <puts@plt>
   12f88:	b	12f98 <__assert_fail@plt+0x1b5c>
   12f8c:	movw	r0, #47352	; 0xb8f8
   12f90:	movt	r0, #1
   12f94:	bl	11118 <printf@plt>
   12f98:	movw	r3, #54984	; 0xd6c8
   12f9c:	movt	r3, #2
   12fa0:	ldr	r3, [r3]
   12fa4:	tst	r3, #32
   12fa8:	bne	12fb8 <__assert_fail@plt+0x1b7c>
   12fac:	ldr	r4, [sp]
   12fb0:	add	sp, sp, #4
   12fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb8:	mov	r1, #0
   12fbc:	mov	r0, r4
   12fc0:	bl	12c48 <__assert_fail@plt+0x180c>
   12fc4:	b	12fac <__assert_fail@plt+0x1b70>
   12fc8:	strd	r4, [sp, #-12]!
   12fcc:	str	lr, [sp, #8]
   12fd0:	sub	sp, sp, #84	; 0x54
   12fd4:	mov	r5, r0
   12fd8:	movw	r3, #54984	; 0xd6c8
   12fdc:	movt	r3, #2
   12fe0:	ldr	r3, [r3]
   12fe4:	and	r3, r3, #3
   12fe8:	cmp	r3, #3
   12fec:	beq	13194 <__assert_fail@plt+0x1d58>
   12ff0:	mov	r2, #0
   12ff4:	mov	r3, #0
   12ff8:	strd	r2, [sp, #16]
   12ffc:	strd	r2, [sp, #24]
   13000:	strd	r2, [sp, #32]
   13004:	mov	r2, #0
   13008:	movt	r2, #65408	; 0xff80
   1300c:	movw	r3, #52580	; 0xcd64
   13010:	movt	r3, #16845	; 0x41cd
   13014:	strd	r2, [sp, #8]
   13018:	movw	r4, #54992	; 0xd6d0
   1301c:	movt	r4, #2
   13020:	mov	r1, #8
   13024:	ldr	r0, [r4]
   13028:	bl	14004 <__assert_fail@plt+0x2bc8>
   1302c:	movw	r3, #53564	; 0xd13c
   13030:	movt	r3, #2
   13034:	ldr	r1, [r3]
   13038:	ldr	r0, [r4]
   1303c:	bl	14458 <__assert_fail@plt+0x301c>
   13040:	add	r2, sp, #8
   13044:	movw	r1, #14848	; 0x3a00
   13048:	movt	r1, #1
   1304c:	ldr	r0, [r4]
   13050:	bl	1444c <__assert_fail@plt+0x3010>
   13054:	mov	r1, r5
   13058:	ldr	r0, [r4]
   1305c:	bl	14460 <__assert_fail@plt+0x3024>
   13060:	cmp	r0, #0
   13064:	bne	131ac <__assert_fail@plt+0x1d70>
   13068:	movw	r3, #54984	; 0xd6c8
   1306c:	movt	r3, #2
   13070:	ldr	r3, [r3]
   13074:	tst	r3, #16
   13078:	bne	131c4 <__assert_fail@plt+0x1d88>
   1307c:	tst	r3, #64	; 0x40
   13080:	beq	13104 <__assert_fail@plt+0x1cc8>
   13084:	movw	r3, #54996	; 0xd6d4
   13088:	movt	r3, #2
   1308c:	ldr	r3, [r3]
   13090:	tst	r3, #4
   13094:	bne	13274 <__assert_fail@plt+0x1e38>
   13098:	and	r5, r3, #2
   1309c:	ubfx	r4, r3, #1, #1
   130a0:	mov	r2, #38	; 0x26
   130a4:	mov	r1, #0
   130a8:	add	r0, sp, #42	; 0x2a
   130ac:	bl	11328 <memset@plt>
   130b0:	mov	r3, #68	; 0x44
   130b4:	strb	r3, [sp, #40]	; 0x28
   130b8:	mov	r3, #40	; 0x28
   130bc:	strb	r3, [sp, #41]	; 0x29
   130c0:	cmp	r5, #0
   130c4:	bne	132a8 <__assert_fail@plt+0x1e6c>
   130c8:	mov	r3, #5
   130cc:	strb	r3, [sp, #42]	; 0x2a
   130d0:	strb	r4, [sp, #43]	; 0x2b
   130d4:	movw	r3, #54992	; 0xd6d0
   130d8:	movt	r3, #2
   130dc:	ldr	r3, [r3]
   130e0:	ldr	r0, [r3]
   130e4:	ldrb	r3, [sp, #41]	; 0x29
   130e8:	str	r3, [sp]
   130ec:	add	r3, sp, #40	; 0x28
   130f0:	mov	r2, #4
   130f4:	mov	r1, #0
   130f8:	bl	1110c <setsockopt@plt>
   130fc:	cmp	r0, #0
   13100:	blt	13234 <__assert_fail@plt+0x1df8>
   13104:	movw	r3, #54992	; 0xd6d0
   13108:	movt	r3, #2
   1310c:	ldr	r3, [r3]
   13110:	ldr	r4, [r3, #52]	; 0x34
   13114:	ldr	r0, [r3, #28]
   13118:	bl	111b4 <inet_ntoa@plt>
   1311c:	movw	r3, #53564	; 0xd13c
   13120:	movt	r3, #2
   13124:	ldr	r3, [r3]
   13128:	mov	r2, r0
   1312c:	mov	r1, r4
   13130:	movw	r0, #47436	; 0xb94c
   13134:	movt	r0, #1
   13138:	bl	11118 <printf@plt>
   1313c:	movw	r3, #54984	; 0xd6c8
   13140:	movt	r3, #2
   13144:	ldr	r3, [r3]
   13148:	tst	r3, #32
   1314c:	bne	13250 <__assert_fail@plt+0x1e14>
   13150:	mov	r0, #10
   13154:	bl	11334 <putchar@plt>
   13158:	movw	r4, #54992	; 0xd6d0
   1315c:	movt	r4, #2
   13160:	movw	r1, #11120	; 0x2b70
   13164:	movt	r1, #1
   13168:	ldr	r0, [r4]
   1316c:	bl	11f40 <__assert_fail@plt+0xb04>
   13170:	mov	r5, r0
   13174:	ldr	r3, [r4]
   13178:	ldr	r0, [r3, #52]	; 0x34
   1317c:	bl	18f00 <argp_parse@@Base+0xcd8>
   13180:	mov	r0, r5
   13184:	add	sp, sp, #84	; 0x54
   13188:	ldrd	r4, [sp]
   1318c:	add	sp, sp, #8
   13190:	pop	{pc}		; (ldr pc, [sp], #4)
   13194:	movw	r2, #47376	; 0xb910
   13198:	movt	r2, #1
   1319c:	mov	r1, #0
   131a0:	mov	r0, #1
   131a4:	bl	11238 <error@plt>
   131a8:	b	12ff0 <__assert_fail@plt+0x1bb4>
   131ac:	movw	r2, #47408	; 0xb930
   131b0:	movt	r2, #1
   131b4:	mov	r1, #0
   131b8:	mov	r0, #1
   131bc:	bl	11238 <error@plt>
   131c0:	b	13068 <__assert_fail@plt+0x1c2c>
   131c4:	mov	r2, #38	; 0x26
   131c8:	mov	r1, #0
   131cc:	add	r0, sp, #42	; 0x2a
   131d0:	bl	11328 <memset@plt>
   131d4:	mov	r3, #7
   131d8:	strb	r3, [sp, #40]	; 0x28
   131dc:	mov	r3, #39	; 0x27
   131e0:	strb	r3, [sp, #41]	; 0x29
   131e4:	mov	r2, #4
   131e8:	strb	r2, [sp, #42]	; 0x2a
   131ec:	movw	r3, #54992	; 0xd6d0
   131f0:	movt	r3, #2
   131f4:	ldr	r3, [r3]
   131f8:	ldr	r0, [r3]
   131fc:	mov	r3, #40	; 0x28
   13200:	str	r3, [sp]
   13204:	add	r3, sp, r3
   13208:	mov	r1, #0
   1320c:	bl	1110c <setsockopt@plt>
   13210:	cmp	r0, #0
   13214:	bge	13104 <__assert_fail@plt+0x1cc8>
   13218:	bl	112f8 <__errno_location@plt>
   1321c:	movw	r2, #47424	; 0xb940
   13220:	movt	r2, #1
   13224:	ldr	r1, [r0]
   13228:	mov	r0, #1
   1322c:	bl	11238 <error@plt>
   13230:	b	13104 <__assert_fail@plt+0x1cc8>
   13234:	bl	112f8 <__errno_location@plt>
   13238:	movw	r2, #47424	; 0xb940
   1323c:	movt	r2, #1
   13240:	ldr	r1, [r0]
   13244:	mov	r0, #1
   13248:	bl	11238 <error@plt>
   1324c:	b	13104 <__assert_fail@plt+0x1cc8>
   13250:	movw	r3, #54992	; 0xd6d0
   13254:	movt	r3, #2
   13258:	ldr	r3, [r3]
   1325c:	ldr	r1, [r3, #60]	; 0x3c
   13260:	mov	r2, r1
   13264:	movw	r0, #47468	; 0xb96c
   13268:	movt	r0, #1
   1326c:	bl	11118 <printf@plt>
   13270:	b	13150 <__assert_fail@plt+0x1d14>
   13274:	mov	r3, #0
   13278:	str	r3, [sp, #44]	; 0x2c
   1327c:	str	r3, [sp, #48]	; 0x30
   13280:	str	r3, [sp, #52]	; 0x34
   13284:	str	r3, [sp, #56]	; 0x38
   13288:	str	r3, [sp, #60]	; 0x3c
   1328c:	str	r3, [sp, #64]	; 0x40
   13290:	str	r3, [sp, #68]	; 0x44
   13294:	str	r3, [sp, #72]	; 0x48
   13298:	str	r3, [sp, #76]	; 0x4c
   1329c:	mov	r3, #68	; 0x44
   132a0:	strb	r3, [sp, #40]	; 0x28
   132a4:	mov	r4, #3
   132a8:	mov	r3, #36	; 0x24
   132ac:	strb	r3, [sp, #41]	; 0x29
   132b0:	b	130c8 <__assert_fail@plt+0x1c8c>
   132b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   132b8:	strd	r6, [sp, #8]
   132bc:	strd	r8, [sp, #16]
   132c0:	strd	sl, [sp, #24]
   132c4:	str	lr, [sp, #32]
   132c8:	vpush	{d8}
   132cc:	sub	sp, sp, #60	; 0x3c
   132d0:	mov	r5, r0
   132d4:	mov	r7, r1
   132d8:	mov	r6, r3
   132dc:	mov	r1, #0
   132e0:	add	r0, sp, #48	; 0x30
   132e4:	bl	1122c <gettimeofday@plt>
   132e8:	ldr	r3, [sp, #104]	; 0x68
   132ec:	ldrb	r3, [r3]
   132f0:	and	r3, r3, #15
   132f4:	lsl	fp, r3, #2
   132f8:	ldr	r4, [sp, #112]	; 0x70
   132fc:	sub	r4, r4, fp
   13300:	sub	r3, r4, #8
   13304:	cmp	r3, #7
   13308:	bhi	133c0 <__assert_fail@plt+0x1f84>
   1330c:	vldr	d8, [pc, #900]	; 13698 <__assert_fail@plt+0x225c>
   13310:	mov	r7, #0
   13314:	movw	r3, #54984	; 0xd6c8
   13318:	movt	r3, #2
   1331c:	ldr	r3, [r3]
   13320:	tst	r3, #8
   13324:	bne	138d4 <__assert_fail@plt+0x2498>
   13328:	tst	r3, #1
   1332c:	bne	1343c <__assert_fail@plt+0x2000>
   13330:	ldr	r0, [r6, #4]
   13334:	bl	111b4 <inet_ntoa@plt>
   13338:	ldr	r3, [sp, #108]	; 0x6c
   1333c:	ldrh	r3, [r3, #6]
   13340:	rev16	r3, r3
   13344:	uxth	r3, r3
   13348:	mov	r2, r0
   1334c:	mov	r1, r4
   13350:	movw	r0, #47488	; 0xb980
   13354:	movt	r0, #1
   13358:	bl	11118 <printf@plt>
   1335c:	ldr	r3, [sp, #104]	; 0x68
   13360:	ldrb	r1, [r3, #8]
   13364:	movw	r0, #47520	; 0xb9a0
   13368:	movt	r0, #1
   1336c:	bl	11118 <printf@plt>
   13370:	cmp	r7, #0
   13374:	bne	13454 <__assert_fail@plt+0x2018>
   13378:	cmp	r5, #0
   1337c:	bne	13468 <__assert_fail@plt+0x202c>
   13380:	ldr	r3, [sp, #104]	; 0x68
   13384:	add	r9, r3, #20
   13388:	cmp	fp, #20
   1338c:	ble	138cc <__assert_fail@plt+0x2490>
   13390:	movw	r3, #54872	; 0xd658
   13394:	movt	r3, #2
   13398:	str	r3, [sp, #8]
   1339c:	movw	r3, #47596	; 0xb9ec
   133a0:	movt	r3, #1
   133a4:	str	r3, [sp, #24]
   133a8:	movw	sl, #54828	; 0xd62c
   133ac:	movt	sl, #2
   133b0:	movw	r3, #47576	; 0xb9d8
   133b4:	movt	r3, #1
   133b8:	str	r3, [sp]
   133bc:	b	134a8 <__assert_fail@plt+0x206c>
   133c0:	ldr	r3, [sp, #108]	; 0x6c
   133c4:	ldr	r2, [r3, #8]!
   133c8:	ldr	r3, [r3, #4]
   133cc:	str	r2, [sp, #32]
   133d0:	str	r3, [sp, #36]	; 0x24
   133d4:	add	r1, sp, #32
   133d8:	add	r0, sp, #48	; 0x30
   133dc:	bl	1262c <__assert_fail@plt+0x11f0>
   133e0:	vldr	s15, [sp, #48]	; 0x30
   133e4:	vcvt.f64.s32	d7, s15
   133e8:	vldr	d5, [pc, #688]	; 136a0 <__assert_fail@plt+0x2264>
   133ec:	vldr	s13, [sp, #52]	; 0x34
   133f0:	vcvt.f64.s32	d6, s13
   133f4:	vdiv.f64	d8, d6, d5
   133f8:	vmla.f64	d8, d7, d5
   133fc:	vldr	d7, [r7, #16]
   13400:	vadd.f64	d7, d7, d8
   13404:	vstr	d7, [r7, #16]
   13408:	vldr	d7, [r7, #24]
   1340c:	vmla.f64	d7, d8, d8
   13410:	vstr	d7, [r7, #24]
   13414:	vldr	d7, [r7]
   13418:	vcmpe.f64	d7, d8
   1341c:	vmrs	APSR_nzcv, fpscr
   13420:	vstrgt	d8, [r7]
   13424:	vldr	d7, [r7, #8]
   13428:	vcmpe.f64	d7, d8
   1342c:	vmrs	APSR_nzcv, fpscr
   13430:	vstrmi	d8, [r7, #8]
   13434:	mov	r7, #1
   13438:	b	13314 <__assert_fail@plt+0x1ed8>
   1343c:	movw	r3, #54828	; 0xd62c
   13440:	movt	r3, #2
   13444:	ldr	r1, [r3]
   13448:	mov	r0, #8
   1344c:	bl	113c4 <putc@plt>
   13450:	b	138d4 <__assert_fail@plt+0x2498>
   13454:	vmov	r2, r3, d8
   13458:	movw	r0, #47528	; 0xb9a8
   1345c:	movt	r0, #1
   13460:	bl	11118 <printf@plt>
   13464:	b	13378 <__assert_fail@plt+0x1f3c>
   13468:	movw	r0, #47544	; 0xb9b8
   1346c:	movt	r0, #1
   13470:	bl	11118 <printf@plt>
   13474:	b	13380 <__assert_fail@plt+0x1f44>
   13478:	cmp	r1, #0
   1347c:	moveq	fp, #0
   13480:	beq	13498 <__assert_fail@plt+0x205c>
   13484:	cmp	r1, #1
   13488:	bne	134d0 <__assert_fail@plt+0x2094>
   1348c:	movw	r0, #47676	; 0xba3c
   13490:	movt	r0, #1
   13494:	bl	11118 <printf@plt>
   13498:	sub	fp, fp, #1
   1349c:	add	r9, r9, #1
   134a0:	cmp	fp, #20
   134a4:	ble	138cc <__assert_fail@plt+0x2490>
   134a8:	ldrb	r1, [r9]
   134ac:	cmp	r1, #7
   134b0:	beq	135ac <__assert_fail@plt+0x2170>
   134b4:	bls	13478 <__assert_fail@plt+0x203c>
   134b8:	cmp	r1, #131	; 0x83
   134bc:	beq	134e0 <__assert_fail@plt+0x20a4>
   134c0:	cmp	r1, #137	; 0x89
   134c4:	beq	134e0 <__assert_fail@plt+0x20a4>
   134c8:	cmp	r1, #68	; 0x44
   134cc:	beq	13738 <__assert_fail@plt+0x22fc>
   134d0:	movw	r0, #47684	; 0xba44
   134d4:	movt	r0, #1
   134d8:	bl	11118 <printf@plt>
   134dc:	b	13498 <__assert_fail@plt+0x205c>
   134e0:	cmp	r1, #131	; 0x83
   134e4:	moveq	r1, #76	; 0x4c
   134e8:	movne	r1, #83	; 0x53
   134ec:	movw	r0, #47552	; 0xb9c0
   134f0:	movt	r0, #1
   134f4:	bl	11118 <printf@plt>
   134f8:	sub	r3, fp, #2
   134fc:	ldrb	r5, [r9, #1]
   13500:	add	r7, r9, #2
   13504:	cmp	r5, #4
   13508:	movls	r9, r7
   1350c:	movls	fp, r3
   13510:	bls	13498 <__assert_fail@plt+0x205c>
   13514:	mov	r4, r9
   13518:	sub	r5, r5, #5
   1351c:	bic	r3, r5, #3
   13520:	add	r9, r9, r3
   13524:	movw	r8, #47564	; 0xb9cc
   13528:	movt	r8, #1
   1352c:	b	13550 <__assert_fail@plt+0x2114>
   13530:	mov	r0, r8
   13534:	bl	11118 <printf@plt>
   13538:	cmp	r4, r9
   1353c:	beq	13594 <__assert_fail@plt+0x2158>
   13540:	ldr	r1, [sl]
   13544:	mov	r0, #10
   13548:	bl	113c4 <putc@plt>
   1354c:	add	r4, r4, #4
   13550:	ldrb	r3, [r4, #3]
   13554:	ldrb	r0, [r4, #4]
   13558:	add	r3, r0, r3, lsl #8
   1355c:	ldrb	r0, [r4, #5]
   13560:	add	r0, r0, r3, lsl #8
   13564:	ldrb	r3, [r4, #6]
   13568:	adds	r0, r3, r0, lsl #8
   1356c:	beq	13530 <__assert_fail@plt+0x20f4>
   13570:	rev	r0, r0
   13574:	bl	12a80 <__assert_fail@plt+0x1644>
   13578:	mov	r6, r0
   1357c:	mov	r1, r0
   13580:	ldr	r0, [sp]
   13584:	bl	11118 <printf@plt>
   13588:	mov	r0, r6
   1358c:	bl	18f00 <argp_parse@@Base+0xcd8>
   13590:	b	13538 <__assert_fail@plt+0x20fc>
   13594:	lsr	r5, r5, #2
   13598:	add	r9, r5, #1
   1359c:	add	r9, r7, r9, lsl #2
   135a0:	sub	fp, fp, #6
   135a4:	sub	fp, fp, r5, lsl #2
   135a8:	b	13498 <__assert_fail@plt+0x205c>
   135ac:	add	r4, r9, #2
   135b0:	ldrb	r3, [r9, #2]
   135b4:	sub	r7, fp, #2
   135b8:	ldrb	r5, [r9, #1]
   135bc:	cmp	r5, r3
   135c0:	movge	r5, r3
   135c4:	sub	r6, r5, #4
   135c8:	cmp	r6, #0
   135cc:	movle	r9, r4
   135d0:	movle	fp, r7
   135d4:	ble	13498 <__assert_fail@plt+0x205c>
   135d8:	ldr	r1, [sp, #8]
   135dc:	ldr	r3, [r1]
   135e0:	cmp	r6, r3
   135e4:	bne	13644 <__assert_fail@plt+0x2208>
   135e8:	ldr	r3, [sp, #104]	; 0x68
   135ec:	add	r3, r3, #22
   135f0:	cmp	r4, r3
   135f4:	bne	13644 <__assert_fail@plt+0x2208>
   135f8:	mov	r2, r6
   135fc:	add	r1, r1, #4
   13600:	mov	r0, r4
   13604:	bl	111a8 <memcmp@plt>
   13608:	movw	r3, #54984	; 0xd6c8
   1360c:	movt	r3, #2
   13610:	ldr	r3, [r3]
   13614:	and	r3, r3, #1
   13618:	orrs	r3, r3, r0
   1361c:	bne	13644 <__assert_fail@plt+0x2208>
   13620:	movw	r0, #47580	; 0xb9dc
   13624:	movt	r0, #1
   13628:	bl	11118 <printf@plt>
   1362c:	subs	r9, r5, #1
   13630:	addmi	r9, r5, #2
   13634:	bic	r9, r9, #3
   13638:	sub	fp, r7, r9
   1363c:	add	r9, r4, r9
   13640:	b	13498 <__assert_fail@plt+0x205c>
   13644:	cmp	r6, #39	; 0x27
   13648:	ble	13680 <__assert_fail@plt+0x2244>
   1364c:	mov	r3, #0
   13650:	ldr	r2, [sp, #8]
   13654:	str	r3, [r2]
   13658:	ldr	r0, [sp, #24]
   1365c:	bl	11118 <printf@plt>
   13660:	add	r6, r9, #42	; 0x2a
   13664:	sub	r5, r5, #5
   13668:	bic	r5, r5, #3
   1366c:	add	r5, r5, #6
   13670:	add	r5, r9, r5
   13674:	movw	r8, #47564	; 0xb9cc
   13678:	movt	r8, #1
   1367c:	b	136d4 <__assert_fail@plt+0x2298>
   13680:	ldr	r0, [sp, #8]
   13684:	str	r6, [r0], #4
   13688:	mov	r2, r6
   1368c:	mov	r1, r4
   13690:	bl	11148 <memmove@plt>
   13694:	b	13658 <__assert_fail@plt+0x221c>
	...
   136a4:	addmi	r4, pc, r0
   136a8:	mov	r0, r8
   136ac:	bl	11118 <printf@plt>
   136b0:	add	r3, r9, fp
   136b4:	sub	r7, r3, r7
   136b8:	cmp	r4, r5
   136bc:	beq	138c0 <__assert_fail@plt+0x2484>
   136c0:	cmp	r4, r6
   136c4:	beq	13720 <__assert_fail@plt+0x22e4>
   136c8:	ldr	r1, [sl]
   136cc:	mov	r0, #10
   136d0:	bl	113c4 <putc@plt>
   136d4:	ldrb	r0, [r4, #1]
   136d8:	ldrb	r3, [r4, #2]
   136dc:	add	r3, r3, r0, lsl #8
   136e0:	ldrb	r0, [r4, #3]
   136e4:	add	r3, r0, r3, lsl #8
   136e8:	add	r4, r4, #4
   136ec:	mov	r7, r4
   136f0:	ldrb	r0, [r4]
   136f4:	adds	r0, r0, r3, lsl #8
   136f8:	beq	136a8 <__assert_fail@plt+0x226c>
   136fc:	rev	r0, r0
   13700:	bl	12a80 <__assert_fail@plt+0x1644>
   13704:	str	r0, [sp, #4]
   13708:	mov	r1, r0
   1370c:	ldr	r0, [sp]
   13710:	bl	11118 <printf@plt>
   13714:	ldr	r0, [sp, #4]
   13718:	bl	18f00 <argp_parse@@Base+0xcd8>
   1371c:	b	136b0 <__assert_fail@plt+0x2274>
   13720:	movw	r0, #47604	; 0xb9f4
   13724:	movt	r0, #1
   13728:	bl	11118 <printf@plt>
   1372c:	mov	r9, r4
   13730:	mov	fp, r7
   13734:	b	13498 <__assert_fail@plt+0x205c>
   13738:	ldrb	r6, [r9, #1]
   1373c:	add	r2, r9, #2
   13740:	sub	r3, fp, #2
   13744:	cmp	r6, #8
   13748:	movle	r9, r2
   1374c:	movle	fp, r3
   13750:	ble	13498 <__assert_fail@plt+0x205c>
   13754:	ldrb	r8, [r9, #2]
   13758:	ldrb	r5, [r9, #3]
   1375c:	str	r5, [sp, #28]
   13760:	movw	r0, #47624	; 0xba08
   13764:	movt	r0, #1
   13768:	bl	11118 <printf@plt>
   1376c:	add	r4, r9, #8
   13770:	movw	r3, #65533	; 0xfffd
   13774:	movt	r3, #65535	; 0xffff
   13778:	sub	r3, r3, r9
   1377c:	str	r3, [sp, #4]
   13780:	and	r2, r5, #15
   13784:	movw	r3, #47632	; 0xba10
   13788:	movt	r3, #1
   1378c:	str	r3, [sp, #20]
   13790:	str	r9, [sp, #12]
   13794:	mov	r9, r2
   13798:	b	13808 <__assert_fail@plt+0x23cc>
   1379c:	str	r4, [sp, #16]
   137a0:	ldr	r2, [r4, #-4]
   137a4:	rev	r2, r2
   137a8:	mov	r1, #16
   137ac:	add	r0, sp, #32
   137b0:	bl	1270c <__assert_fail@plt+0x12d0>
   137b4:	mov	r1, r0
   137b8:	ldr	r0, [sp, #20]
   137bc:	bl	11118 <printf@plt>
   137c0:	movw	r3, #54984	; 0xd6c8
   137c4:	movt	r3, #2
   137c8:	ldr	r3, [r3]
   137cc:	tst	r3, #32
   137d0:	bne	13874 <__assert_fail@plt+0x2438>
   137d4:	add	r7, fp, r5
   137d8:	sub	r7, r7, r4
   137dc:	rsb	r5, r5, #1
   137e0:	add	r5, r5, r4
   137e4:	ldr	r1, [sl]
   137e8:	mov	r0, #10
   137ec:	bl	113c4 <putc@plt>
   137f0:	add	r4, r4, #4
   137f4:	cmp	r6, r8
   137f8:	movlt	r3, r6
   137fc:	movge	r3, r8
   13800:	cmp	r3, r5
   13804:	ble	1388c <__assert_fail@plt+0x2450>
   13808:	ldr	r5, [sp, #12]
   1380c:	ldr	r3, [sp, #4]
   13810:	add	r3, r3, r4
   13814:	cmp	r9, #0
   13818:	beq	1379c <__assert_fail@plt+0x2360>
   1381c:	add	r2, r3, #3
   13820:	cmp	r3, #0
   13824:	movlt	r3, r2
   13828:	asrs	r3, r3, #2
   1382c:	and	r3, r3, #1
   13830:	rsbmi	r3, r3, #0
   13834:	cmp	r3, #1
   13838:	bne	1379c <__assert_fail@plt+0x2360>
   1383c:	str	r4, [sp, #16]
   13840:	ldr	r0, [r4, #-4]
   13844:	bl	12a80 <__assert_fail@plt+0x1644>
   13848:	mov	r7, r0
   1384c:	mov	r1, r0
   13850:	ldr	r0, [sp]
   13854:	bl	11118 <printf@plt>
   13858:	mov	r0, r7
   1385c:	bl	18f00 <argp_parse@@Base+0xcd8>
   13860:	add	r7, fp, r5
   13864:	sub	r7, r7, r4
   13868:	rsb	r5, r5, #1
   1386c:	add	r5, r5, r4
   13870:	b	137f0 <__assert_fail@plt+0x23b4>
   13874:	ldr	r1, [r4, #-4]
   13878:	rev	r1, r1
   1387c:	movw	r0, #47640	; 0xba18
   13880:	movt	r0, #1
   13884:	bl	11118 <printf@plt>
   13888:	b	137d4 <__assert_fail@plt+0x2398>
   1388c:	ldr	r3, [sp, #28]
   13890:	tst	r3, #240	; 0xf0
   13894:	bne	138a4 <__assert_fail@plt+0x2468>
   13898:	ldr	r9, [sp, #16]
   1389c:	mov	fp, r7
   138a0:	b	13498 <__assert_fail@plt+0x205c>
   138a4:	asr	r1, r3, #4
   138a8:	movw	r0, #47652	; 0xba24
   138ac:	movt	r0, #1
   138b0:	bl	11118 <printf@plt>
   138b4:	ldr	r9, [sp, #16]
   138b8:	mov	fp, r7
   138bc:	b	13498 <__assert_fail@plt+0x205c>
   138c0:	mov	r9, r4
   138c4:	mov	fp, r7
   138c8:	b	13498 <__assert_fail@plt+0x205c>
   138cc:	mov	r0, #10
   138d0:	bl	11334 <putchar@plt>
   138d4:	mov	r0, #0
   138d8:	add	sp, sp, #60	; 0x3c
   138dc:	vpop	{d8}
   138e0:	ldrd	r4, [sp]
   138e4:	ldrd	r6, [sp, #8]
   138e8:	ldrd	r8, [sp, #16]
   138ec:	ldrd	sl, [sp, #24]
   138f0:	add	sp, sp, #32
   138f4:	pop	{pc}		; (ldr pc, [sp], #4)
   138f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   138fc:	strd	r6, [sp, #8]
   13900:	str	r8, [sp, #16]
   13904:	str	lr, [sp, #20]
   13908:	movw	ip, #54984	; 0xd6c8
   1390c:	movt	ip, #2
   13910:	ldr	ip, [ip]
   13914:	tst	ip, #32
   13918:	bne	13938 <__assert_fail@plt+0x24fc>
   1391c:	movw	ip, #54992	; 0xd6d0
   13920:	movt	ip, #2
   13924:	ldr	ip, [ip]
   13928:	ldr	lr, [r2, #24]
   1392c:	ldr	ip, [ip, #28]
   13930:	cmp	lr, ip
   13934:	bne	139b4 <__assert_fail@plt+0x2578>
   13938:	mov	r4, r3
   1393c:	mov	r5, r2
   13940:	ldrb	r6, [r1]
   13944:	and	r6, r6, #15
   13948:	mov	r1, #16
   1394c:	bl	12930 <__assert_fail@plt+0x14f4>
   13950:	mov	r7, r0
   13954:	mov	r2, r0
   13958:	sub	r1, r4, r6, lsl #2
   1395c:	movw	r0, #47704	; 0xba58
   13960:	movt	r0, #1
   13964:	bl	11118 <printf@plt>
   13968:	mov	r0, r7
   1396c:	bl	18f00 <argp_parse@@Base+0xcd8>
   13970:	ldrb	r1, [r5]
   13974:	movw	r3, #54272	; 0xd400
   13978:	movt	r3, #2
   1397c:	ldr	r3, [r3, #240]	; 0xf0
   13980:	cmp	r3, r1
   13984:	beq	139c8 <__assert_fail@plt+0x258c>
   13988:	ldr	r4, [pc, #104]	; 139f8 <__assert_fail@plt+0x25bc>
   1398c:	add	r0, r4, #224	; 0xe0
   13990:	ldr	r3, [r4]
   13994:	cmp	r3, r1
   13998:	beq	139cc <__assert_fail@plt+0x2590>
   1399c:	add	r4, r4, #16
   139a0:	cmp	r4, r0
   139a4:	bne	13990 <__assert_fail@plt+0x2554>
   139a8:	movw	r0, #47724	; 0xba6c
   139ac:	movt	r0, #1
   139b0:	bl	11118 <printf@plt>
   139b4:	ldrd	r4, [sp]
   139b8:	ldrd	r6, [sp, #8]
   139bc:	ldr	r8, [sp, #16]
   139c0:	add	sp, sp, #20
   139c4:	pop	{pc}		; (ldr pc, [sp], #4)
   139c8:	ldr	r4, [pc, #44]	; 139fc <__assert_fail@plt+0x25c0>
   139cc:	ldr	r0, [r4, #4]
   139d0:	cmp	r0, #0
   139d4:	beq	139dc <__assert_fail@plt+0x25a0>
   139d8:	bl	11250 <puts@plt>
   139dc:	ldr	r3, [r4, #8]
   139e0:	cmp	r3, #0
   139e4:	beq	139b4 <__assert_fail@plt+0x2578>
   139e8:	ldr	r1, [r4, #12]
   139ec:	mov	r0, r5
   139f0:	blx	r3
   139f4:	b	139b4 <__assert_fail@plt+0x2578>
   139f8:	andeq	sp, r2, r0, lsl #10
   139fc:	strdeq	sp, [r2], -r0
   13a00:	subs	ip, r0, #0
   13a04:	blt	13a70 <__assert_fail@plt+0x2634>
   13a08:	push	{lr}		; (str lr, [sp, #-4]!)
   13a0c:	sub	sp, sp, #20
   13a10:	mov	r0, r3
   13a14:	cmp	ip, #1
   13a18:	ble	13a38 <__assert_fail@plt+0x25fc>
   13a1c:	cmp	ip, #2
   13a20:	bne	13a64 <__assert_fail@plt+0x2628>
   13a24:	ldr	r3, [sp, #32]
   13a28:	ldr	r2, [sp, #28]
   13a2c:	ldr	r1, [sp, #24]
   13a30:	bl	138f8 <__assert_fail@plt+0x24bc>
   13a34:	b	13a64 <__assert_fail@plt+0x2628>
   13a38:	ldr	r3, [sp, #32]
   13a3c:	str	r3, [sp, #8]
   13a40:	ldr	r3, [sp, #28]
   13a44:	str	r3, [sp, #4]
   13a48:	ldr	r3, [sp, #24]
   13a4c:	str	r3, [sp]
   13a50:	mov	r3, r0
   13a54:	cmp	ip, #1
   13a58:	movne	r0, #0
   13a5c:	moveq	r0, #1
   13a60:	bl	132b4 <__assert_fail@plt+0x1e78>
   13a64:	mov	r0, #0
   13a68:	add	sp, sp, #20
   13a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a70:	mov	r0, #0
   13a74:	bx	lr
   13a78:	mov	r0, #0
   13a7c:	bx	lr
   13a80:	str	r4, [sp, #-8]!
   13a84:	str	lr, [sp, #4]
   13a88:	subs	r4, r0, #0
   13a8c:	blt	13b18 <__assert_fail@plt+0x26dc>
   13a90:	mov	r0, r3
   13a94:	cmp	r4, #1
   13a98:	ble	13ab8 <__assert_fail@plt+0x267c>
   13a9c:	cmp	r4, #2
   13aa0:	bne	13b18 <__assert_fail@plt+0x26dc>
   13aa4:	ldr	r3, [sp, #16]
   13aa8:	ldr	r2, [sp, #12]
   13aac:	ldr	r1, [sp, #8]
   13ab0:	bl	138f8 <__assert_fail@plt+0x24bc>
   13ab4:	b	13b18 <__assert_fail@plt+0x26dc>
   13ab8:	ldr	r0, [r3, #4]
   13abc:	bl	111b4 <inet_ntoa@plt>
   13ac0:	ldr	r3, [sp, #12]
   13ac4:	ldrh	r3, [r3, #6]
   13ac8:	rev16	r3, r3
   13acc:	uxth	r3, r3
   13ad0:	mov	r2, r0
   13ad4:	ldr	r1, [sp, #16]
   13ad8:	movw	r0, #47488	; 0xb980
   13adc:	movt	r0, #1
   13ae0:	bl	11118 <printf@plt>
   13ae4:	cmp	r4, #1
   13ae8:	beq	13b28 <__assert_fail@plt+0x26ec>
   13aec:	mov	r0, #10
   13af0:	bl	11334 <putchar@plt>
   13af4:	ldr	r3, [sp, #12]
   13af8:	ldr	r0, [r3, #8]
   13afc:	bl	111b4 <inet_ntoa@plt>
   13b00:	mov	r1, r0
   13b04:	movw	r0, #48536	; 0xbd98
   13b08:	movt	r0, #1
   13b0c:	bl	11118 <printf@plt>
   13b10:	mov	r0, #10
   13b14:	bl	11334 <putchar@plt>
   13b18:	mov	r0, #0
   13b1c:	ldr	r4, [sp]
   13b20:	add	sp, sp, #4
   13b24:	pop	{pc}		; (ldr pc, [sp], #4)
   13b28:	movw	r0, #47544	; 0xb9b8
   13b2c:	movt	r0, #1
   13b30:	bl	11118 <printf@plt>
   13b34:	b	13aec <__assert_fail@plt+0x26b0>
   13b38:	strd	r4, [sp, #-16]!
   13b3c:	str	r6, [sp, #8]
   13b40:	str	lr, [sp, #12]
   13b44:	mov	r5, r0
   13b48:	movw	r4, #54992	; 0xd6d0
   13b4c:	movt	r4, #2
   13b50:	mov	r1, #17
   13b54:	ldr	r0, [r4]
   13b58:	bl	14004 <__assert_fail@plt+0x2bc8>
   13b5c:	mov	r2, #0
   13b60:	movw	r1, #14976	; 0x3a80
   13b64:	movt	r1, #1
   13b68:	ldr	r0, [r4]
   13b6c:	bl	1444c <__assert_fail@plt+0x3010>
   13b70:	mov	r1, #12
   13b74:	ldr	r0, [r4]
   13b78:	bl	14458 <__assert_fail@plt+0x301c>
   13b7c:	mov	r1, #1
   13b80:	ldr	r0, [r4]
   13b84:	bl	12850 <__assert_fail@plt+0x1414>
   13b88:	mov	r1, r5
   13b8c:	ldr	r0, [r4]
   13b90:	bl	14460 <__assert_fail@plt+0x3024>
   13b94:	cmp	r0, #0
   13b98:	bne	13be8 <__assert_fail@plt+0x27ac>
   13b9c:	movw	r4, #54992	; 0xd6d0
   13ba0:	movt	r4, #2
   13ba4:	ldr	r3, [r4]
   13ba8:	ldr	r5, [r3, #52]	; 0x34
   13bac:	ldr	r0, [r3, #28]
   13bb0:	bl	111b4 <inet_ntoa@plt>
   13bb4:	mov	r2, r0
   13bb8:	mov	r1, r5
   13bbc:	movw	r0, #48552	; 0xbda8
   13bc0:	movt	r0, #1
   13bc4:	bl	11118 <printf@plt>
   13bc8:	movw	r1, #14968	; 0x3a78
   13bcc:	movt	r1, #1
   13bd0:	ldr	r0, [r4]
   13bd4:	bl	11f40 <__assert_fail@plt+0xb04>
   13bd8:	ldrd	r4, [sp]
   13bdc:	ldr	r6, [sp, #8]
   13be0:	add	sp, sp, #12
   13be4:	pop	{pc}		; (ldr pc, [sp], #4)
   13be8:	movw	r2, #47408	; 0xb930
   13bec:	movt	r2, #1
   13bf0:	mov	r1, #0
   13bf4:	mov	r0, #1
   13bf8:	bl	11238 <error@plt>
   13bfc:	b	13b9c <__assert_fail@plt+0x2760>
   13c00:	mov	r0, #0
   13c04:	bx	lr
   13c08:	str	r4, [sp, #-8]!
   13c0c:	str	lr, [sp, #4]
   13c10:	bl	122dc <__assert_fail@plt+0xea0>
   13c14:	ldr	r4, [sp]
   13c18:	add	sp, sp, #4
   13c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c20:	strd	r4, [sp, #-12]!
   13c24:	str	lr, [sp, #8]
   13c28:	sub	sp, sp, #20
   13c2c:	ldr	r5, [sp, #36]	; 0x24
   13c30:	subs	r4, r0, #0
   13c34:	blt	13c5c <__assert_fail@plt+0x2820>
   13c38:	mov	r0, r3
   13c3c:	cmp	r4, #1
   13c40:	ble	13c70 <__assert_fail@plt+0x2834>
   13c44:	cmp	r4, #2
   13c48:	bne	13c5c <__assert_fail@plt+0x2820>
   13c4c:	ldr	r3, [sp, #40]	; 0x28
   13c50:	mov	r2, r5
   13c54:	ldr	r1, [sp, #32]
   13c58:	bl	138f8 <__assert_fail@plt+0x24bc>
   13c5c:	mov	r0, #0
   13c60:	add	sp, sp, #20
   13c64:	ldrd	r4, [sp]
   13c68:	add	sp, sp, #8
   13c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c70:	ldr	r0, [r3, #4]
   13c74:	bl	111b4 <inet_ntoa@plt>
   13c78:	ldrh	r3, [r5, #6]
   13c7c:	rev16	r3, r3
   13c80:	uxth	r3, r3
   13c84:	mov	r2, r0
   13c88:	ldr	r1, [sp, #40]	; 0x28
   13c8c:	movw	r0, #47488	; 0xb980
   13c90:	movt	r0, #1
   13c94:	bl	11118 <printf@plt>
   13c98:	cmp	r4, #1
   13c9c:	beq	13d74 <__assert_fail@plt+0x2938>
   13ca0:	mov	r0, #10
   13ca4:	bl	11334 <putchar@plt>
   13ca8:	ldr	r2, [r5, #8]
   13cac:	rev	r2, r2
   13cb0:	mov	r1, #16
   13cb4:	mov	r0, sp
   13cb8:	bl	1270c <__assert_fail@plt+0x12d0>
   13cbc:	mov	r1, r0
   13cc0:	movw	r0, #48596	; 0xbdd4
   13cc4:	movt	r0, #1
   13cc8:	bl	11118 <printf@plt>
   13ccc:	ldr	r2, [r5, #12]
   13cd0:	rev	r2, r2
   13cd4:	mov	r1, #16
   13cd8:	mov	r0, sp
   13cdc:	bl	1270c <__assert_fail@plt+0x12d0>
   13ce0:	mov	r1, r0
   13ce4:	movw	r0, #48616	; 0xbde8
   13ce8:	movt	r0, #1
   13cec:	bl	11118 <printf@plt>
   13cf0:	ldr	r2, [r5, #16]
   13cf4:	rev	r2, r2
   13cf8:	mov	r1, #16
   13cfc:	mov	r0, sp
   13d00:	bl	1270c <__assert_fail@plt+0x12d0>
   13d04:	mov	r1, r0
   13d08:	movw	r0, #48636	; 0xbdfc
   13d0c:	movt	r0, #1
   13d10:	bl	11118 <printf@plt>
   13d14:	movw	r3, #54984	; 0xd6c8
   13d18:	movt	r3, #2
   13d1c:	ldr	r3, [r3]
   13d20:	tst	r3, #32
   13d24:	beq	13c5c <__assert_fail@plt+0x2820>
   13d28:	ldr	r0, [r5, #8]
   13d2c:	rev	r0, r0
   13d30:	bl	12700 <__assert_fail@plt+0x12c4>
   13d34:	cmp	r0, #0
   13d38:	beq	13c5c <__assert_fail@plt+0x2820>
   13d3c:	ldr	r0, [r5, #8]
   13d40:	rev	r0, r0
   13d44:	bl	12700 <__assert_fail@plt+0x12c4>
   13d48:	cmp	r0, #0
   13d4c:	beq	13c5c <__assert_fail@plt+0x2820>
   13d50:	ldr	r1, [r5, #16]
   13d54:	rev	r1, r1
   13d58:	ldr	r3, [r5, #8]
   13d5c:	rev	r3, r3
   13d60:	sub	r1, r1, r3
   13d64:	movw	r0, #48656	; 0xbe10
   13d68:	movt	r0, #1
   13d6c:	bl	11118 <printf@plt>
   13d70:	b	13c5c <__assert_fail@plt+0x2820>
   13d74:	movw	r0, #47544	; 0xb9b8
   13d78:	movt	r0, #1
   13d7c:	bl	11118 <printf@plt>
   13d80:	b	13ca0 <__assert_fail@plt+0x2864>
   13d84:	strd	r4, [sp, #-16]!
   13d88:	str	r6, [sp, #8]
   13d8c:	str	lr, [sp, #12]
   13d90:	mov	r5, r0
   13d94:	movw	r4, #54992	; 0xd6d0
   13d98:	movt	r4, #2
   13d9c:	mov	r1, #13
   13da0:	ldr	r0, [r4]
   13da4:	bl	14004 <__assert_fail@plt+0x2bc8>
   13da8:	mov	r2, #0
   13dac:	movw	r1, #15392	; 0x3c20
   13db0:	movt	r1, #1
   13db4:	ldr	r0, [r4]
   13db8:	bl	1444c <__assert_fail@plt+0x3010>
   13dbc:	mov	r1, #20
   13dc0:	ldr	r0, [r4]
   13dc4:	bl	14458 <__assert_fail@plt+0x301c>
   13dc8:	mov	r1, r5
   13dcc:	ldr	r0, [r4]
   13dd0:	bl	14460 <__assert_fail@plt+0x3024>
   13dd4:	cmp	r0, #0
   13dd8:	bne	13e28 <__assert_fail@plt+0x29ec>
   13ddc:	movw	r4, #54992	; 0xd6d0
   13de0:	movt	r4, #2
   13de4:	ldr	r3, [r4]
   13de8:	ldr	r5, [r3, #52]	; 0x34
   13dec:	ldr	r0, [r3, #28]
   13df0:	bl	111b4 <inet_ntoa@plt>
   13df4:	mov	r2, r0
   13df8:	mov	r1, r5
   13dfc:	movw	r0, #48676	; 0xbe24
   13e00:	movt	r0, #1
   13e04:	bl	11118 <printf@plt>
   13e08:	movw	r1, #15368	; 0x3c08
   13e0c:	movt	r1, #1
   13e10:	ldr	r0, [r4]
   13e14:	bl	11f40 <__assert_fail@plt+0xb04>
   13e18:	ldrd	r4, [sp]
   13e1c:	ldr	r6, [sp, #8]
   13e20:	add	sp, sp, #12
   13e24:	pop	{pc}		; (ldr pc, [sp], #4)
   13e28:	movw	r2, #47408	; 0xb930
   13e2c:	movt	r2, #1
   13e30:	mov	r1, #0
   13e34:	mov	r0, #1
   13e38:	bl	11238 <error@plt>
   13e3c:	b	13ddc <__assert_fail@plt+0x29a0>
   13e40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13e44:	strd	r6, [sp, #8]
   13e48:	str	r8, [sp, #16]
   13e4c:	str	lr, [sp, #20]
   13e50:	mov	r8, r0
   13e54:	mov	r6, r1
   13e58:	movw	r0, #48720	; 0xbe50
   13e5c:	movt	r0, #1
   13e60:	bl	11124 <getprotobyname@plt>
   13e64:	subs	r4, r0, #0
   13e68:	beq	13f48 <__assert_fail@plt+0x2b0c>
   13e6c:	ldr	r2, [r4, #8]
   13e70:	mov	r1, #3
   13e74:	mov	r0, #2
   13e78:	bl	1140c <socket@plt>
   13e7c:	subs	r7, r0, #0
   13e80:	bge	13ed4 <__assert_fail@plt+0x2a98>
   13e84:	bl	112f8 <__errno_location@plt>
   13e88:	mov	r5, r0
   13e8c:	ldr	r3, [r0]
   13e90:	cmp	r3, #13
   13e94:	cmpne	r3, #1
   13e98:	movne	r4, #0
   13e9c:	bne	13f30 <__assert_fail@plt+0x2af4>
   13ea0:	mov	r3, #0
   13ea4:	str	r3, [r0]
   13ea8:	ldr	r2, [r4, #8]
   13eac:	mov	r1, #2
   13eb0:	mov	r0, r1
   13eb4:	bl	1140c <socket@plt>
   13eb8:	subs	r7, r0, #0
   13ebc:	blt	13f6c <__assert_fail@plt+0x2b30>
   13ec0:	movw	r3, #54916	; 0xd684
   13ec4:	movt	r3, #2
   13ec8:	ldr	r2, [r3]
   13ecc:	add	r2, r2, #1
   13ed0:	str	r2, [r3]
   13ed4:	mov	r0, #124	; 0x7c
   13ed8:	bl	19a70 <argp_parse@@Base+0x1848>
   13edc:	subs	r4, r0, #0
   13ee0:	beq	13fe4 <__assert_fail@plt+0x2ba8>
   13ee4:	add	r5, r4, #12
   13ee8:	mov	r2, #112	; 0x70
   13eec:	mov	r1, #0
   13ef0:	mov	r0, r5
   13ef4:	bl	11328 <memset@plt>
   13ef8:	str	r7, [r4]
   13efc:	str	r8, [r4, #4]
   13f00:	mov	r1, #0
   13f04:	str	r1, [r4, #8]
   13f08:	mov	r3, #1000	; 0x3e8
   13f0c:	str	r3, [r4, #20]
   13f10:	mov	r3, #28
   13f14:	str	r3, [r4, #56]	; 0x38
   13f18:	uxth	r6, r6
   13f1c:	str	r6, [r4, #60]	; 0x3c
   13f20:	mov	r3, #128	; 0x80
   13f24:	str	r3, [r4, #72]	; 0x48
   13f28:	mov	r0, r5
   13f2c:	bl	1122c <gettimeofday@plt>
   13f30:	mov	r0, r4
   13f34:	ldrd	r4, [sp]
   13f38:	ldrd	r6, [sp, #8]
   13f3c:	ldr	r8, [sp, #16]
   13f40:	add	sp, sp, #20
   13f44:	pop	{pc}		; (ldr pc, [sp], #4)
   13f48:	movw	r3, #54824	; 0xd628
   13f4c:	movt	r3, #2
   13f50:	ldr	r3, [r3]
   13f54:	mov	r2, #29
   13f58:	mov	r1, #1
   13f5c:	movw	r0, #48728	; 0xbe58
   13f60:	movt	r0, #1
   13f64:	bl	11220 <fwrite@plt>
   13f68:	b	13f30 <__assert_fail@plt+0x2af4>
   13f6c:	ldr	r0, [r5]
   13f70:	cmp	r0, #13
   13f74:	cmpne	r0, #1
   13f78:	moveq	r3, #1
   13f7c:	movne	r3, #0
   13f80:	cmp	r0, #93	; 0x5d
   13f84:	orreq	r3, r3, #1
   13f88:	cmp	r3, #0
   13f8c:	beq	13fb8 <__assert_fail@plt+0x2b7c>
   13f90:	movw	r3, #54824	; 0xd628
   13f94:	movt	r3, #2
   13f98:	ldr	r3, [r3]
   13f9c:	mov	r2, #41	; 0x29
   13fa0:	mov	r1, #1
   13fa4:	movw	r0, #48760	; 0xbe78
   13fa8:	movt	r0, #1
   13fac:	bl	11220 <fwrite@plt>
   13fb0:	mov	r4, #0
   13fb4:	b	13f30 <__assert_fail@plt+0x2af4>
   13fb8:	movw	r3, #54824	; 0xd628
   13fbc:	movt	r3, #2
   13fc0:	ldr	r4, [r3]
   13fc4:	bl	11274 <strerror@plt>
   13fc8:	mov	r2, r0
   13fcc:	movw	r1, #48804	; 0xbea4
   13fd0:	movt	r1, #1
   13fd4:	mov	r0, r4
   13fd8:	bl	112ec <fprintf@plt>
   13fdc:	mov	r4, #0
   13fe0:	b	13f30 <__assert_fail@plt+0x2af4>
   13fe4:	mov	r0, r7
   13fe8:	bl	11430 <close@plt>
   13fec:	b	13f30 <__assert_fail@plt+0x2af4>
   13ff0:	mov	r3, #0
   13ff4:	str	r3, [r0, #112]	; 0x70
   13ff8:	str	r3, [r0, #116]	; 0x74
   13ffc:	str	r3, [r0, #120]	; 0x78
   14000:	bx	lr
   14004:	str	r1, [r0, #4]
   14008:	bx	lr
   1400c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14010:	strd	r6, [sp, #8]
   14014:	str	lr, [sp, #16]
   14018:	sub	sp, sp, #12
   1401c:	mov	r4, r0
   14020:	mov	r1, #0
   14024:	bl	12744 <__assert_fail@plt+0x1308>
   14028:	subs	r6, r0, #0
   1402c:	bne	14174 <__assert_fail@plt+0x2d38>
   14030:	ldr	r3, [r4, #4]
   14034:	sub	r2, r3, #13
   14038:	cmp	r2, #1
   1403c:	movls	r5, #20
   14040:	bls	14058 <__assert_fail@plt+0x2c1c>
   14044:	sub	r3, r3, #17
   14048:	cmp	r3, #1
   1404c:	ldrhi	r5, [r4, #56]	; 0x38
   14050:	addhi	r5, r5, #8
   14054:	movls	r5, #12
   14058:	mov	r7, r5
   1405c:	ldr	r3, [r4, #72]	; 0x48
   14060:	lsl	r2, r3, #3
   14064:	ldr	r1, [r4, #112]	; 0x70
   14068:	udiv	r3, r1, r2
   1406c:	mls	r3, r2, r3, r1
   14070:	ldr	r1, [r4, #76]	; 0x4c
   14074:	and	r0, r3, #7
   14078:	ldrb	r2, [r1, r3, asr #3]
   1407c:	mov	ip, #1
   14080:	bic	r2, r2, ip, lsl r0
   14084:	strb	r2, [r1, r3, asr #3]
   14088:	ldr	r2, [r4, #4]
   1408c:	cmp	r2, #13
   14090:	beq	1412c <__assert_fail@plt+0x2cf0>
   14094:	cmp	r2, #17
   14098:	beq	14144 <__assert_fail@plt+0x2d08>
   1409c:	cmp	r2, #8
   140a0:	beq	140c0 <__assert_fail@plt+0x2c84>
   140a4:	ldr	r3, [r4, #112]	; 0x70
   140a8:	str	r3, [sp]
   140ac:	ldr	r3, [r4, #60]	; 0x3c
   140b0:	mov	r1, r5
   140b4:	ldr	r0, [r4, #80]	; 0x50
   140b8:	bl	14510 <__assert_fail@plt+0x30d4>
   140bc:	b	140d4 <__assert_fail@plt+0x2c98>
   140c0:	ldr	r3, [r4, #112]	; 0x70
   140c4:	ldr	r2, [r4, #60]	; 0x3c
   140c8:	mov	r1, r5
   140cc:	ldr	r0, [r4, #80]	; 0x50
   140d0:	bl	145dc <__assert_fail@plt+0x31a0>
   140d4:	add	r3, r4, #24
   140d8:	mov	r2, #16
   140dc:	str	r2, [sp, #4]
   140e0:	str	r3, [sp]
   140e4:	mov	r3, #0
   140e8:	mov	r2, r5
   140ec:	ldr	r1, [r4, #80]	; 0x50
   140f0:	ldr	r0, [r4]
   140f4:	bl	11358 <sendto@plt>
   140f8:	subs	r3, r0, #0
   140fc:	blt	1417c <__assert_fail@plt+0x2d40>
   14100:	ldr	r2, [r4, #112]	; 0x70
   14104:	add	r2, r2, #1
   14108:	str	r2, [r4, #112]	; 0x70
   1410c:	cmp	r7, r3
   14110:	bne	1415c <__assert_fail@plt+0x2d20>
   14114:	mov	r0, r6
   14118:	add	sp, sp, #12
   1411c:	ldrd	r4, [sp]
   14120:	ldrd	r6, [sp, #8]
   14124:	add	sp, sp, #16
   14128:	pop	{pc}		; (ldr pc, [sp], #4)
   1412c:	ldr	r3, [r4, #112]	; 0x70
   14130:	ldr	r2, [r4, #60]	; 0x3c
   14134:	mov	r1, r5
   14138:	ldr	r0, [r4, #80]	; 0x50
   1413c:	bl	14614 <__assert_fail@plt+0x31d8>
   14140:	b	140d4 <__assert_fail@plt+0x2c98>
   14144:	ldr	r3, [r4, #112]	; 0x70
   14148:	ldr	r2, [r4, #60]	; 0x3c
   1414c:	mov	r1, r5
   14150:	ldr	r0, [r4, #80]	; 0x50
   14154:	bl	146d8 <__assert_fail@plt+0x329c>
   14158:	b	140d4 <__assert_fail@plt+0x2c98>
   1415c:	mov	r2, r7
   14160:	ldr	r1, [r4, #52]	; 0x34
   14164:	movw	r0, #48816	; 0xbeb0
   14168:	movt	r0, #1
   1416c:	bl	11118 <printf@plt>
   14170:	b	14114 <__assert_fail@plt+0x2cd8>
   14174:	mvn	r6, #0
   14178:	b	14114 <__assert_fail@plt+0x2cd8>
   1417c:	mvn	r6, #0
   14180:	b	14114 <__assert_fail@plt+0x2cd8>
   14184:	strd	r4, [sp, #-20]!	; 0xffffffec
   14188:	strd	r6, [sp, #8]
   1418c:	str	lr, [sp, #16]
   14190:	sub	sp, sp, #36	; 0x24
   14194:	mov	r4, r0
   14198:	mov	r3, #16
   1419c:	str	r3, [sp, #28]
   141a0:	ldr	r2, [r0, #56]	; 0x38
   141a4:	add	r5, r0, #84	; 0x54
   141a8:	add	r3, sp, #28
   141ac:	str	r3, [sp, #4]
   141b0:	str	r5, [sp]
   141b4:	mov	r3, #0
   141b8:	add	r2, r2, #80	; 0x50
   141bc:	ldr	r1, [r0, #80]	; 0x50
   141c0:	ldr	r0, [r0]
   141c4:	bl	111e4 <recvfrom@plt>
   141c8:	subs	r6, r0, #0
   141cc:	blt	1441c <__assert_fail@plt+0x2fe0>
   141d0:	add	r3, sp, #24
   141d4:	add	r2, sp, #20
   141d8:	mov	r1, r6
   141dc:	ldr	r0, [r4, #80]	; 0x50
   141e0:	bl	14570 <__assert_fail@plt+0x3134>
   141e4:	cmp	r0, #0
   141e8:	blt	1424c <__assert_fail@plt+0x2e10>
   141ec:	ldr	r3, [sp, #24]
   141f0:	ldrb	r2, [r3]
   141f4:	cmp	r2, #18
   141f8:	ldrls	pc, [pc, r2, lsl #2]
   141fc:	b	14380 <__assert_fail@plt+0x2f44>
   14200:	andeq	r4, r1, r0, lsl #5
   14204:	andeq	r4, r1, r0, lsl #7
   14208:	andeq	r4, r1, r0, lsl #7
   1420c:	andeq	r4, r1, r0, lsl #7
   14210:	andeq	r4, r1, r0, lsl #7
   14214:	andeq	r4, r1, r0, lsl #7
   14218:	andeq	r4, r1, r0, lsl #7
   1421c:	andeq	r4, r1, r0, lsl #7
   14220:	andeq	r4, r1, r4, lsr #8
   14224:	andeq	r4, r1, r0, lsl #7
   14228:	andeq	r4, r1, r0, lsl #7
   1422c:	andeq	r4, r1, r0, lsl #7
   14230:	andeq	r4, r1, r0, lsl #7
   14234:	andeq	r4, r1, r4, lsr #8
   14238:	andeq	r4, r1, r0, lsl #5
   1423c:	andeq	r4, r1, r0, lsl #7
   14240:	andeq	r4, r1, r0, lsl #7
   14244:	andeq	r4, r1, r4, lsr #8
   14248:	andeq	r4, r1, r0, lsl #5
   1424c:	movw	r3, #54824	; 0xd628
   14250:	movt	r3, #2
   14254:	ldr	r5, [r3]
   14258:	ldr	r0, [r4, #88]	; 0x58
   1425c:	bl	111b4 <inet_ntoa@plt>
   14260:	mov	r3, r0
   14264:	mov	r2, r6
   14268:	movw	r1, #48852	; 0xbed4
   1426c:	movt	r1, #1
   14270:	mov	r0, r5
   14274:	bl	112ec <fprintf@plt>
   14278:	mvn	r0, #0
   1427c:	b	14428 <__assert_fail@plt+0x2fec>
   14280:	ldrh	r3, [r3, #4]
   14284:	rev16	r3, r3
   14288:	uxth	r3, r3
   1428c:	ldr	r2, [r4, #60]	; 0x3c
   14290:	cmp	r3, r2
   14294:	beq	142ac <__assert_fail@plt+0x2e70>
   14298:	movw	r3, #54916	; 0xd684
   1429c:	movt	r3, #2
   142a0:	ldr	r3, [r3]
   142a4:	cmp	r3, #0
   142a8:	beq	1443c <__assert_fail@plt+0x3000>
   142ac:	cmp	r0, #0
   142b0:	bne	14344 <__assert_fail@plt+0x2f08>
   142b4:	ldr	ip, [r4, #116]	; 0x74
   142b8:	add	r3, ip, #1
   142bc:	str	r3, [r4, #116]	; 0x74
   142c0:	ldr	r3, [sp, #24]
   142c4:	ldrh	r3, [r3, #6]
   142c8:	rev16	r3, r3
   142cc:	uxth	r3, r3
   142d0:	ldr	r1, [r4, #72]	; 0x48
   142d4:	lsl	r1, r1, #3
   142d8:	sdiv	r2, r3, r1
   142dc:	mls	r3, r1, r2, r3
   142e0:	ldr	r1, [r4, #76]	; 0x4c
   142e4:	ldrb	r2, [r1, r3, asr #3]
   142e8:	and	lr, r3, #7
   142ec:	asr	r0, r2, lr
   142f0:	ands	r0, r0, #1
   142f4:	beq	14370 <__assert_fail@plt+0x2f34>
   142f8:	ldr	r3, [r4, #120]	; 0x78
   142fc:	add	r3, r3, #1
   14300:	str	r3, [r4, #120]	; 0x78
   14304:	str	ip, [r4, #116]	; 0x74
   14308:	ldr	r7, [r4, #64]	; 0x40
   1430c:	cmp	r7, #0
   14310:	moveq	r0, #0
   14314:	beq	14428 <__assert_fail@plt+0x2fec>
   14318:	str	r6, [sp, #8]
   1431c:	ldr	r3, [sp, #24]
   14320:	str	r3, [sp, #4]
   14324:	ldr	r3, [sp, #20]
   14328:	str	r3, [sp]
   1432c:	mov	r3, r5
   14330:	add	r2, r4, #24
   14334:	ldr	r1, [r4, #68]	; 0x44
   14338:	blx	r7
   1433c:	mov	r0, #0
   14340:	b	14428 <__assert_fail@plt+0x2fec>
   14344:	movw	r3, #54824	; 0xd628
   14348:	movt	r3, #2
   1434c:	ldr	r7, [r3]
   14350:	ldr	r0, [r4, #88]	; 0x58
   14354:	bl	111b4 <inet_ntoa@plt>
   14358:	mov	r2, r0
   1435c:	movw	r1, #48892	; 0xbefc
   14360:	movt	r1, #1
   14364:	mov	r0, r7
   14368:	bl	112ec <fprintf@plt>
   1436c:	b	142b4 <__assert_fail@plt+0x2e78>
   14370:	mov	ip, #1
   14374:	orr	r2, r2, ip, lsl lr
   14378:	strb	r2, [r1, r3, asr #3]
   1437c:	b	14308 <__assert_fail@plt+0x2ecc>
   14380:	ldr	r1, [r3, #24]
   14384:	ldr	r2, [r4, #28]
   14388:	cmp	r1, r2
   1438c:	mvnne	r0, #0
   14390:	bne	14428 <__assert_fail@plt+0x2fec>
   14394:	ldrb	r2, [r3, #17]
   14398:	cmp	r2, #1
   1439c:	mvnne	r0, #0
   143a0:	bne	14428 <__assert_fail@plt+0x2fec>
   143a4:	ldrb	r2, [r3, #28]
   143a8:	cmp	r2, #8
   143ac:	mvnne	r0, #0
   143b0:	bne	14428 <__assert_fail@plt+0x2fec>
   143b4:	ldrh	r2, [r3, #32]
   143b8:	rev16	r2, r2
   143bc:	uxth	r2, r2
   143c0:	ldr	r1, [r4, #60]	; 0x3c
   143c4:	cmp	r2, r1
   143c8:	beq	143e0 <__assert_fail@plt+0x2fa4>
   143cc:	movw	r2, #54916	; 0xd684
   143d0:	movt	r2, #2
   143d4:	ldr	r2, [r2]
   143d8:	cmp	r2, #0
   143dc:	beq	14444 <__assert_fail@plt+0x3008>
   143e0:	ldr	r7, [r4, #64]	; 0x40
   143e4:	cmp	r7, #0
   143e8:	moveq	r0, #0
   143ec:	beq	14428 <__assert_fail@plt+0x2fec>
   143f0:	str	r6, [sp, #8]
   143f4:	str	r3, [sp, #4]
   143f8:	ldr	r3, [sp, #20]
   143fc:	str	r3, [sp]
   14400:	mov	r3, r5
   14404:	add	r2, r4, #24
   14408:	ldr	r1, [r4, #68]	; 0x44
   1440c:	mov	r0, #2
   14410:	blx	r7
   14414:	mov	r0, #0
   14418:	b	14428 <__assert_fail@plt+0x2fec>
   1441c:	mvn	r0, #0
   14420:	b	14428 <__assert_fail@plt+0x2fec>
   14424:	mvn	r0, #0
   14428:	add	sp, sp, #36	; 0x24
   1442c:	ldrd	r4, [sp]
   14430:	ldrd	r6, [sp, #8]
   14434:	add	sp, sp, #16
   14438:	pop	{pc}		; (ldr pc, [sp], #4)
   1443c:	mvn	r0, #0
   14440:	b	14428 <__assert_fail@plt+0x2fec>
   14444:	mvn	r0, #0
   14448:	b	14428 <__assert_fail@plt+0x2fec>
   1444c:	str	r1, [r0, #64]	; 0x40
   14450:	str	r2, [r0, #68]	; 0x44
   14454:	bx	lr
   14458:	str	r1, [r0, #56]	; 0x38
   1445c:	bx	lr
   14460:	strd	r4, [sp, #-20]!	; 0xffffffec
   14464:	strd	r6, [sp, #8]
   14468:	str	lr, [sp, #16]
   1446c:	sub	sp, sp, #44	; 0x2c
   14470:	mov	r6, r0
   14474:	mov	r7, r1
   14478:	mov	r2, #0
   1447c:	mov	r3, #0
   14480:	strd	r2, [sp, #16]
   14484:	strd	r2, [sp, #24]
   14488:	strd	r2, [sp, #32]
   1448c:	mov	r3, #2
   14490:	str	r3, [sp, #12]
   14494:	mov	r3, #194	; 0xc2
   14498:	str	r3, [sp, #8]
   1449c:	add	r3, sp, #4
   144a0:	add	r2, sp, #8
   144a4:	mov	r1, #0
   144a8:	mov	r0, r7
   144ac:	bl	11400 <getaddrinfo@plt>
   144b0:	subs	r5, r0, #0
   144b4:	bne	14500 <__assert_fail@plt+0x30c4>
   144b8:	ldr	r4, [sp, #4]
   144bc:	ldr	r2, [r4, #16]
   144c0:	ldr	r1, [r4, #20]
   144c4:	add	r0, r6, #24
   144c8:	bl	11184 <memcpy@plt>
   144cc:	ldr	r0, [r4, #24]
   144d0:	cmp	r0, #0
   144d4:	moveq	r0, r7
   144d8:	bl	111f0 <strdup@plt>
   144dc:	str	r0, [r6, #52]	; 0x34
   144e0:	mov	r0, r4
   144e4:	bl	113f4 <freeaddrinfo@plt>
   144e8:	mov	r0, r5
   144ec:	add	sp, sp, #44	; 0x2c
   144f0:	ldrd	r4, [sp]
   144f4:	ldrd	r6, [sp, #8]
   144f8:	add	sp, sp, #16
   144fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14500:	mov	r0, #0
   14504:	bl	18f00 <argp_parse@@Base+0xcd8>
   14508:	mov	r5, #1
   1450c:	b	144e8 <__assert_fail@plt+0x30ac>
   14510:	cmp	r1, #7
   14514:	bls	14568 <__assert_fail@plt+0x312c>
   14518:	strd	r4, [sp, #-16]!
   1451c:	str	r6, [sp, #8]
   14520:	str	lr, [sp, #12]
   14524:	mov	r4, r0
   14528:	strb	r2, [r0]
   1452c:	mov	r5, #0
   14530:	strb	r5, [r0, #1]
   14534:	strh	r5, [r0, #2]
   14538:	ldr	r2, [sp, #16]
   1453c:	rev16	r2, r2
   14540:	strh	r2, [r0, #6]
   14544:	rev16	r3, r3
   14548:	strh	r3, [r0, #4]
   1454c:	bl	14724 <__assert_fail@plt+0x32e8>
   14550:	strh	r0, [r4, #2]
   14554:	mov	r0, r5
   14558:	ldrd	r4, [sp]
   1455c:	ldr	r6, [sp, #8]
   14560:	add	sp, sp, #12
   14564:	pop	{pc}		; (ldr pc, [sp], #4)
   14568:	mvn	r0, #0
   1456c:	bx	lr
   14570:	strd	r4, [sp, #-16]!
   14574:	str	r6, [sp, #8]
   14578:	str	lr, [sp, #12]
   1457c:	ldrb	ip, [r0]
   14580:	and	ip, ip, #15
   14584:	lsl	ip, ip, #2
   14588:	add	lr, ip, #8
   1458c:	cmp	lr, r1
   14590:	mvnhi	r0, #0
   14594:	bls	145a8 <__assert_fail@plt+0x316c>
   14598:	ldrd	r4, [sp]
   1459c:	ldr	r6, [sp, #8]
   145a0:	add	sp, sp, #12
   145a4:	pop	{pc}		; (ldr pc, [sp], #4)
   145a8:	add	r4, r0, ip
   145ac:	str	r0, [r2]
   145b0:	str	r4, [r3]
   145b4:	ldrh	r5, [r4, #2]
   145b8:	mov	r3, #0
   145bc:	strh	r3, [r4, #2]
   145c0:	sub	r1, r1, ip
   145c4:	mov	r0, r4
   145c8:	bl	14724 <__assert_fail@plt+0x32e8>
   145cc:	strh	r0, [r4, #2]
   145d0:	subs	r0, r0, r5
   145d4:	movne	r0, #1
   145d8:	b	14598 <__assert_fail@plt+0x315c>
   145dc:	push	{lr}		; (str lr, [sp, #-4]!)
   145e0:	sub	sp, sp, #12
   145e4:	str	r3, [sp]
   145e8:	mov	r3, r2
   145ec:	mov	r2, #8
   145f0:	bl	14510 <__assert_fail@plt+0x30d4>
   145f4:	add	sp, sp, #12
   145f8:	pop	{pc}		; (ldr pc, [sp], #4)
   145fc:	str	r4, [sp, #-8]!
   14600:	str	lr, [sp, #4]
   14604:	bl	14570 <__assert_fail@plt+0x3134>
   14608:	ldr	r4, [sp]
   1460c:	add	sp, sp, #4
   14610:	pop	{pc}		; (ldr pc, [sp], #4)
   14614:	cmp	r1, #19
   14618:	bls	146d0 <__assert_fail@plt+0x3294>
   1461c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14620:	strd	r6, [sp, #8]
   14624:	str	lr, [sp, #16]
   14628:	sub	sp, sp, #20
   1462c:	mov	r7, r3
   14630:	mov	r6, r2
   14634:	mov	r5, r1
   14638:	mov	r4, r0
   1463c:	mov	r1, #0
   14640:	add	r0, sp, #8
   14644:	bl	1122c <gettimeofday@plt>
   14648:	ldr	r2, [sp, #8]
   1464c:	movw	r3, #17671	; 0x4507
   14650:	movt	r3, #49710	; 0xc22e
   14654:	smull	r1, r3, r3, r2
   14658:	add	r3, r3, r2
   1465c:	asr	ip, r2, #31
   14660:	rsb	ip, ip, r3, asr #16
   14664:	movw	r3, #20864	; 0x5180
   14668:	movt	r3, #1
   1466c:	mls	ip, r3, ip, r2
   14670:	ldr	r3, [sp, #12]
   14674:	movw	r2, #19923	; 0x4dd3
   14678:	movt	r2, #4194	; 0x1062
   1467c:	smull	r1, r2, r2, r3
   14680:	asr	r3, r3, #31
   14684:	rsb	r3, r3, r2, asr #6
   14688:	mov	r2, #1000	; 0x3e8
   1468c:	mla	ip, r2, ip, r3
   14690:	rev	ip, ip
   14694:	str	ip, [r4, #8]
   14698:	str	ip, [r4, #12]
   1469c:	str	ip, [r4, #16]
   146a0:	str	r7, [sp]
   146a4:	mov	r3, r6
   146a8:	mov	r2, #13
   146ac:	mov	r1, r5
   146b0:	mov	r0, r4
   146b4:	bl	14510 <__assert_fail@plt+0x30d4>
   146b8:	mov	r0, #0
   146bc:	add	sp, sp, #20
   146c0:	ldrd	r4, [sp]
   146c4:	ldrd	r6, [sp, #8]
   146c8:	add	sp, sp, #16
   146cc:	pop	{pc}		; (ldr pc, [sp], #4)
   146d0:	mvn	r0, #0
   146d4:	bx	lr
   146d8:	cmp	r1, #11
   146dc:	bls	1471c <__assert_fail@plt+0x32e0>
   146e0:	str	r4, [sp, #-8]!
   146e4:	str	lr, [sp, #4]
   146e8:	sub	sp, sp, #8
   146ec:	mov	ip, r3
   146f0:	mov	r3, r2
   146f4:	mov	r4, #0
   146f8:	str	r4, [r0, #8]
   146fc:	str	ip, [sp]
   14700:	mov	r2, #17
   14704:	bl	14510 <__assert_fail@plt+0x30d4>
   14708:	mov	r0, r4
   1470c:	add	sp, sp, #8
   14710:	ldr	r4, [sp]
   14714:	add	sp, sp, #4
   14718:	pop	{pc}		; (ldr pc, [sp], #4)
   1471c:	mvn	r0, #0
   14720:	bx	lr
   14724:	push	{lr}		; (str lr, [sp, #-4]!)
   14728:	sub	sp, sp, #12
   1472c:	mov	r3, #0
   14730:	strh	r3, [sp, #6]
   14734:	cmp	r1, #1
   14738:	ble	14788 <__assert_fail@plt+0x334c>
   1473c:	sub	lr, r1, #2
   14740:	lsr	lr, lr, #1
   14744:	add	ip, lr, #1
   14748:	add	ip, r0, ip, lsl #1
   1474c:	ldrh	r2, [r0], #2
   14750:	add	r3, r3, r2
   14754:	cmp	r0, ip
   14758:	bne	1474c <__assert_fail@plt+0x3310>
   1475c:	sub	r1, r1, #2
   14760:	sub	r1, r1, lr, lsl #1
   14764:	cmp	r1, #1
   14768:	beq	14794 <__assert_fail@plt+0x3358>
   1476c:	uxth	r0, r3
   14770:	add	r3, r0, r3, asr #16
   14774:	add	r3, r3, r3, asr #16
   14778:	mvn	r0, r3
   1477c:	uxth	r0, r0
   14780:	add	sp, sp, #12
   14784:	pop	{pc}		; (ldr pc, [sp], #4)
   14788:	mov	ip, r0
   1478c:	mov	r3, #0
   14790:	b	14764 <__assert_fail@plt+0x3328>
   14794:	ldrb	r2, [ip]
   14798:	strb	r2, [sp, #6]
   1479c:	ldrh	r2, [sp, #6]
   147a0:	add	r3, r3, r2
   147a4:	b	1476c <__assert_fail@plt+0x3330>
   147a8:	ldr	r3, [r0]
   147ac:	ldr	r2, [r0, #4]
   147b0:	cmp	r2, #0
   147b4:	beq	147f0 <__assert_fail@plt+0x33b4>
   147b8:	add	r3, r3, #24
   147bc:	b	147cc <__assert_fail@plt+0x3390>
   147c0:	add	r3, r3, #24
   147c4:	subs	r2, r2, #1
   147c8:	beq	147e8 <__assert_fail@plt+0x33ac>
   147cc:	ldr	r0, [r3, #-24]	; 0xffffffe8
   147d0:	cmp	r0, #0
   147d4:	beq	147c0 <__assert_fail@plt+0x3384>
   147d8:	ldr	r1, [r3, #-12]
   147dc:	tst	r1, #2
   147e0:	bne	147c0 <__assert_fail@plt+0x3384>
   147e4:	bx	lr
   147e8:	mov	r0, #0
   147ec:	bx	lr
   147f0:	mov	r0, #0
   147f4:	b	147e4 <__assert_fail@plt+0x33a8>
   147f8:	ldr	r2, [r0, #8]
   147fc:	cmp	r2, #0
   14800:	beq	1480c <__assert_fail@plt+0x33d0>
   14804:	mov	r0, #0
   14808:	bx	lr
   1480c:	ldr	r2, [r1, #8]
   14810:	cmp	r2, #0
   14814:	bne	14804 <__assert_fail@plt+0x33c8>
   14818:	ldr	r2, [r0, #12]
   1481c:	ldr	r1, [r1, #12]
   14820:	orr	r2, r2, r1
   14824:	tst	r2, #16
   14828:	bne	14804 <__assert_fail@plt+0x33c8>
   1482c:	ldr	r1, [r0, #4]
   14830:	ldr	r2, [r3]
   14834:	add	r0, r2, #1
   14838:	str	r0, [r3]
   1483c:	strb	r1, [r2]
   14840:	b	14804 <__assert_fail@plt+0x33c8>
   14844:	str	r4, [sp, #-8]!
   14848:	str	lr, [sp, #4]
   1484c:	mov	r4, r0
   14850:	bl	112a4 <__ctype_b_loc@plt>
   14854:	ldr	r3, [r4]
   14858:	ldrb	r2, [r3]
   1485c:	ldr	ip, [r0]
   14860:	lsl	r1, r2, #1
   14864:	ldrh	r1, [ip, r1]
   14868:	tst	r1, #8192	; 0x2000
   1486c:	beq	1487c <__assert_fail@plt+0x3440>
   14870:	add	r3, r3, #1
   14874:	str	r3, [r4]
   14878:	b	14854 <__assert_fail@plt+0x3418>
   1487c:	subs	ip, r2, #45	; 0x2d
   14880:	movne	ip, #1
   14884:	cmp	r2, #0
   14888:	beq	148bc <__assert_fail@plt+0x3480>
   1488c:	tst	r1, #8
   14890:	bne	148bc <__assert_fail@plt+0x3480>
   14894:	add	r3, r3, #1
   14898:	str	r3, [r4]
   1489c:	ldrb	r2, [r3]
   148a0:	cmp	r2, #0
   148a4:	beq	148bc <__assert_fail@plt+0x3480>
   148a8:	ldr	r1, [r0]
   148ac:	lsl	r2, r2, #1
   148b0:	ldrh	r2, [r1, r2]
   148b4:	tst	r2, #8
   148b8:	beq	14894 <__assert_fail@plt+0x3458>
   148bc:	mov	r0, ip
   148c0:	ldr	r4, [sp]
   148c4:	add	sp, sp, #4
   148c8:	pop	{pc}		; (ldr pc, [sp], #4)
   148cc:	strd	r4, [sp, #-16]!
   148d0:	str	r6, [sp, #8]
   148d4:	str	lr, [sp, #12]
   148d8:	mov	r5, r0
   148dc:	ldr	r0, [r0, #12]
   148e0:	cmp	r0, #0
   148e4:	beq	148fc <__assert_fail@plt+0x34c0>
   148e8:	ldr	r4, [r0, #24]
   148ec:	bl	18f00 <argp_parse@@Base+0xcd8>
   148f0:	mov	r0, r4
   148f4:	cmp	r4, #0
   148f8:	bne	148e8 <__assert_fail@plt+0x34ac>
   148fc:	ldr	r3, [r5, #4]
   14900:	cmp	r3, #0
   14904:	bne	14920 <__assert_fail@plt+0x34e4>
   14908:	mov	r0, r5
   1490c:	bl	18f00 <argp_parse@@Base+0xcd8>
   14910:	ldrd	r4, [sp]
   14914:	ldr	r6, [sp, #8]
   14918:	add	sp, sp, #12
   1491c:	pop	{pc}		; (ldr pc, [sp], #4)
   14920:	ldr	r0, [r5]
   14924:	bl	18f00 <argp_parse@@Base+0xcd8>
   14928:	ldr	r0, [r5, #8]
   1492c:	bl	18f00 <argp_parse@@Base+0xcd8>
   14930:	b	14908 <__assert_fail@plt+0x34cc>
   14934:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14938:	strd	r6, [sp, #8]
   1493c:	str	r8, [sp, #16]
   14940:	str	lr, [sp, #20]
   14944:	mov	r6, r1
   14948:	ldr	r7, [r0]
   1494c:	ldr	r3, [r0, #4]
   14950:	sub	r8, r3, #1
   14954:	cmp	r3, #0
   14958:	bne	149c4 <__assert_fail@plt+0x3588>
   1495c:	mov	r7, #0
   14960:	b	1499c <__assert_fail@plt+0x3560>
   14964:	sub	r5, r5, #1
   14968:	add	r4, r4, #24
   1496c:	cmn	r5, #1
   14970:	beq	149b4 <__assert_fail@plt+0x3578>
   14974:	ldr	r0, [r4, #-24]	; 0xffffffe8
   14978:	cmp	r0, #0
   1497c:	beq	14964 <__assert_fail@plt+0x3528>
   14980:	ldr	r3, [r4, #-12]
   14984:	tst	r3, #2
   14988:	bne	14964 <__assert_fail@plt+0x3528>
   1498c:	mov	r1, r6
   14990:	bl	110f4 <strcmp@plt>
   14994:	cmp	r0, #0
   14998:	bne	14964 <__assert_fail@plt+0x3528>
   1499c:	mov	r0, r7
   149a0:	ldrd	r4, [sp]
   149a4:	ldrd	r6, [sp, #8]
   149a8:	ldr	r8, [sp, #16]
   149ac:	add	sp, sp, #20
   149b0:	pop	{pc}		; (ldr pc, [sp], #4)
   149b4:	add	r7, r7, #28
   149b8:	sub	r8, r8, #1
   149bc:	cmn	r8, #1
   149c0:	beq	149e0 <__assert_fail@plt+0x35a4>
   149c4:	ldr	r4, [r7]
   149c8:	ldr	r3, [r7, #4]
   149cc:	sub	r5, r3, #1
   149d0:	cmp	r3, #0
   149d4:	beq	149b4 <__assert_fail@plt+0x3578>
   149d8:	add	r4, r4, #24
   149dc:	b	14974 <__assert_fail@plt+0x3538>
   149e0:	mov	r7, #0
   149e4:	b	1499c <__assert_fail@plt+0x3560>
   149e8:	strd	r4, [sp, #-16]!
   149ec:	str	r6, [sp, #8]
   149f0:	str	lr, [sp, #12]
   149f4:	ldr	r4, [r0, #16]
   149f8:	ldr	r0, [r0, #8]
   149fc:	cmp	r0, #0
   14a00:	moveq	r5, #0
   14a04:	beq	14a18 <__assert_fail@plt+0x35dc>
   14a08:	mov	r1, #10
   14a0c:	bl	112e0 <strchr@plt>
   14a10:	adds	r5, r0, #0
   14a14:	movne	r5, #1
   14a18:	cmp	r4, #0
   14a1c:	beq	14a40 <__assert_fail@plt+0x3604>
   14a20:	ldr	r0, [r4]
   14a24:	cmp	r0, #0
   14a28:	beq	14a40 <__assert_fail@plt+0x3604>
   14a2c:	bl	149e8 <__assert_fail@plt+0x35ac>
   14a30:	add	r5, r5, r0
   14a34:	ldr	r0, [r4, #16]!
   14a38:	cmp	r0, #0
   14a3c:	bne	14a2c <__assert_fail@plt+0x35f0>
   14a40:	mov	r0, r5
   14a44:	ldrd	r4, [sp]
   14a48:	ldr	r6, [sp, #8]
   14a4c:	add	sp, sp, #12
   14a50:	pop	{pc}		; (ldr pc, [sp], #4)
   14a54:	strd	r4, [sp, #-16]!
   14a58:	str	r6, [sp, #8]
   14a5c:	str	lr, [sp, #12]
   14a60:	mov	r4, r0
   14a64:	subs	r5, r2, #0
   14a68:	beq	14aa0 <__assert_fail@plt+0x3664>
   14a6c:	mov	r6, r1
   14a70:	ldr	r2, [r5, #20]
   14a74:	cmp	r2, #0
   14a78:	beq	14aa0 <__assert_fail@plt+0x3664>
   14a7c:	mov	r1, r3
   14a80:	mov	r0, r5
   14a84:	bl	18d7c <argp_parse@@Base+0xb54>
   14a88:	ldr	r3, [r5, #20]
   14a8c:	mov	r2, r0
   14a90:	mov	r1, r4
   14a94:	mov	r0, r6
   14a98:	blx	r3
   14a9c:	mov	r4, r0
   14aa0:	mov	r0, r4
   14aa4:	ldrd	r4, [sp]
   14aa8:	ldr	r6, [sp, #8]
   14aac:	add	sp, sp, #12
   14ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14ab8:	strd	r6, [sp, #8]
   14abc:	strd	r8, [sp, #16]
   14ac0:	strd	sl, [sp, #24]
   14ac4:	str	lr, [sp, #32]
   14ac8:	sub	sp, sp, #20
   14acc:	ldr	r4, [r0]
   14ad0:	ldr	r9, [r0, #8]
   14ad4:	ldr	r6, [r0, #4]
   14ad8:	cmp	r6, #0
   14adc:	beq	14b30 <__assert_fail@plt+0x36f4>
   14ae0:	str	r3, [sp, #12]
   14ae4:	str	r2, [sp, #8]
   14ae8:	str	r1, [sp, #4]
   14aec:	mov	fp, r4
   14af0:	mov	sl, #0
   14af4:	b	14b80 <__assert_fail@plt+0x3744>
   14af8:	and	r3, r5, #4
   14afc:	cmp	r3, #0
   14b00:	moveq	fp, r4
   14b04:	tst	r5, #2
   14b08:	bne	14b28 <__assert_fail@plt+0x36ec>
   14b0c:	ldr	r3, [sp, #12]
   14b10:	ldr	r2, [sp, #8]
   14b14:	mov	r1, fp
   14b18:	mov	r0, r4
   14b1c:	ldr	ip, [sp, #4]
   14b20:	blx	ip
   14b24:	mov	r7, r0
   14b28:	add	r9, r9, #1
   14b2c:	b	14b60 <__assert_fail@plt+0x3724>
   14b30:	mov	r7, #0
   14b34:	mov	r0, r7
   14b38:	add	sp, sp, #20
   14b3c:	ldrd	r4, [sp]
   14b40:	ldrd	r6, [sp, #8]
   14b44:	ldrd	r8, [sp, #16]
   14b48:	ldrd	sl, [sp, #24]
   14b4c:	add	sp, sp, #32
   14b50:	pop	{pc}		; (ldr pc, [sp], #4)
   14b54:	ldrb	r3, [r9]
   14b58:	cmp	r3, r8
   14b5c:	beq	14af8 <__assert_fail@plt+0x36bc>
   14b60:	add	r4, r4, #24
   14b64:	subs	r6, r6, #1
   14b68:	movne	r3, #1
   14b6c:	moveq	r3, #0
   14b70:	cmp	r7, #0
   14b74:	movne	r3, #0
   14b78:	cmp	r3, #0
   14b7c:	beq	14b34 <__assert_fail@plt+0x36f8>
   14b80:	ldr	r5, [r4, #12]
   14b84:	ands	r7, r5, #8
   14b88:	movne	r7, sl
   14b8c:	bne	14b60 <__assert_fail@plt+0x3724>
   14b90:	ldr	r8, [r4, #4]
   14b94:	sub	r3, r8, #1
   14b98:	cmp	r3, #254	; 0xfe
   14b9c:	bhi	14b60 <__assert_fail@plt+0x3724>
   14ba0:	bl	112a4 <__ctype_b_loc@plt>
   14ba4:	ldr	r2, [r0]
   14ba8:	lsl	r3, r8, #1
   14bac:	ldrh	r3, [r2, r3]
   14bb0:	tst	r3, #16384	; 0x4000
   14bb4:	bne	14b54 <__assert_fail@plt+0x3718>
   14bb8:	b	14b60 <__assert_fail@plt+0x3724>
   14bbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14bc0:	strd	r6, [sp, #8]
   14bc4:	strd	r8, [sp, #16]
   14bc8:	strd	sl, [sp, #24]
   14bcc:	str	lr, [sp, #32]
   14bd0:	add	fp, sp, #32
   14bd4:	sub	sp, sp, #20
   14bd8:	ldr	r5, [r0, #4]
   14bdc:	cmp	r5, #0
   14be0:	beq	14d88 <__assert_fail@plt+0x394c>
   14be4:	str	r1, [fp, #-48]	; 0xffffffd0
   14be8:	mov	r6, r0
   14bec:	ldr	r0, [r0, #8]
   14bf0:	bl	112d4 <strlen@plt>
   14bf4:	add	r3, r0, #8
   14bf8:	bic	r3, r3, #7
   14bfc:	sub	sp, sp, r3
   14c00:	mov	r8, sp
   14c04:	str	r8, [fp, #-40]	; 0xffffffd8
   14c08:	ldr	r4, [r6]
   14c0c:	movw	r7, #18424	; 0x47f8
   14c10:	movt	r7, #1
   14c14:	ldr	r2, [r4, #20]
   14c18:	sub	r3, fp, #40	; 0x28
   14c1c:	ldr	r2, [r2, #24]
   14c20:	mov	r1, r7
   14c24:	mov	r0, r4
   14c28:	bl	14ab4 <__assert_fail@plt+0x3678>
   14c2c:	add	r4, r4, #28
   14c30:	subs	r5, r5, #1
   14c34:	bne	14c14 <__assert_fail@plt+0x37d8>
   14c38:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14c3c:	cmp	r3, r8
   14c40:	bhi	14cb4 <__assert_fail@plt+0x3878>
   14c44:	ldr	r4, [r6]
   14c48:	ldr	r5, [r6, #4]
   14c4c:	cmp	r5, #0
   14c50:	beq	14d88 <__assert_fail@plt+0x394c>
   14c54:	movw	r7, #20352	; 0x4f80
   14c58:	movt	r7, #1
   14c5c:	ldr	r2, [r4, #20]
   14c60:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14c64:	ldr	r2, [r2, #24]
   14c68:	mov	r1, r7
   14c6c:	mov	r0, r4
   14c70:	bl	14ab4 <__assert_fail@plt+0x3678>
   14c74:	add	r4, r4, #28
   14c78:	subs	r5, r5, #1
   14c7c:	bne	14c5c <__assert_fail@plt+0x3820>
   14c80:	ldr	r7, [r6]
   14c84:	ldr	r8, [r6, #4]
   14c88:	cmp	r8, #0
   14c8c:	beq	14d88 <__assert_fail@plt+0x394c>
   14c90:	add	r7, r7, #28
   14c94:	movw	sl, #49112	; 0xbfd8
   14c98:	movt	sl, #1
   14c9c:	movw	r9, #49096	; 0xbfc8
   14ca0:	movt	r9, #1
   14ca4:	movw	r3, #49124	; 0xbfe4
   14ca8:	movt	r3, #1
   14cac:	str	r3, [fp, #-52]	; 0xffffffcc
   14cb0:	b	14d70 <__assert_fail@plt+0x3934>
   14cb4:	add	r2, r3, #1
   14cb8:	str	r2, [fp, #-40]	; 0xffffffd8
   14cbc:	mov	r2, #0
   14cc0:	strb	r2, [r3]
   14cc4:	mov	r2, r8
   14cc8:	movw	r1, #49088	; 0xbfc0
   14ccc:	movt	r1, #1
   14cd0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14cd4:	bl	1a218 <argp_parse@@Base+0x1ff0>
   14cd8:	b	14c44 <__assert_fail@plt+0x3808>
   14cdc:	tst	r1, #16
   14ce0:	bne	14d14 <__assert_fail@plt+0x38d8>
   14ce4:	ldr	r3, [r6, #8]
   14ce8:	cmp	r3, #0
   14cec:	bne	14d00 <__assert_fail@plt+0x38c4>
   14cf0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14cf4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14cf8:	bl	1a218 <argp_parse@@Base+0x1ff0>
   14cfc:	b	14d14 <__assert_fail@plt+0x38d8>
   14d00:	tst	r1, #1
   14d04:	movne	r1, r9
   14d08:	moveq	r1, sl
   14d0c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14d10:	bl	1a218 <argp_parse@@Base+0x1ff0>
   14d14:	add	r4, r4, #24
   14d18:	subs	r5, r5, #1
   14d1c:	beq	14d64 <__assert_fail@plt+0x3928>
   14d20:	ldr	r2, [r4]
   14d24:	cmp	r2, #0
   14d28:	beq	14d14 <__assert_fail@plt+0x38d8>
   14d2c:	ldr	r1, [r4, #12]
   14d30:	and	r3, r1, #4
   14d34:	cmp	r3, #0
   14d38:	moveq	r6, r4
   14d3c:	tst	r1, #2
   14d40:	bne	14d14 <__assert_fail@plt+0x38d8>
   14d44:	ldr	r3, [r4, #8]
   14d48:	ldr	r0, [r6, #12]
   14d4c:	orr	r1, r1, r0
   14d50:	cmp	r3, #0
   14d54:	beq	14cdc <__assert_fail@plt+0x38a0>
   14d58:	tst	r1, #16
   14d5c:	beq	14d00 <__assert_fail@plt+0x38c4>
   14d60:	b	14d14 <__assert_fail@plt+0x38d8>
   14d64:	add	r7, r7, #28
   14d68:	subs	r8, r8, #1
   14d6c:	beq	14d88 <__assert_fail@plt+0x394c>
   14d70:	ldr	r4, [r7, #-28]	; 0xffffffe4
   14d74:	ldr	r5, [r7, #-24]	; 0xffffffe8
   14d78:	cmp	r5, #0
   14d7c:	beq	14d64 <__assert_fail@plt+0x3928>
   14d80:	mov	r6, r4
   14d84:	b	14d20 <__assert_fail@plt+0x38e4>
   14d88:	sub	sp, fp, #32
   14d8c:	ldrd	r4, [sp]
   14d90:	ldrd	r6, [sp, #8]
   14d94:	ldrd	r8, [sp, #16]
   14d98:	ldrd	sl, [sp, #24]
   14d9c:	add	sp, sp, #32
   14da0:	pop	{pc}		; (ldr pc, [sp], #4)
   14da4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14da8:	strd	r6, [sp, #8]
   14dac:	str	r8, [sp, #16]
   14db0:	str	lr, [sp, #20]
   14db4:	mov	r4, r0
   14db8:	mov	r5, r1
   14dbc:	ldr	r3, [r0, #28]
   14dc0:	ldr	r2, [r0, #24]
   14dc4:	sub	r3, r3, r2
   14dc8:	ldr	r2, [r0, #16]
   14dcc:	cmp	r3, r2
   14dd0:	bhi	14dec <__assert_fail@plt+0x39b0>
   14dd4:	ldr	r3, [r4, #20]
   14dd8:	cmp	r3, #0
   14ddc:	subge	r5, r5, r3
   14de0:	mov	r6, #32
   14de4:	mov	r7, #1
   14de8:	b	14e08 <__assert_fail@plt+0x39cc>
   14dec:	bl	19ba0 <argp_parse@@Base+0x1978>
   14df0:	b	14dd4 <__assert_fail@plt+0x3998>
   14df4:	ldr	r3, [r4, #28]
   14df8:	add	r2, r3, #1
   14dfc:	str	r2, [r4, #28]
   14e00:	strb	r6, [r3]
   14e04:	sub	r5, r5, #1
   14e08:	cmp	r5, #0
   14e0c:	ble	14e38 <__assert_fail@plt+0x39fc>
   14e10:	ldr	r2, [r4, #28]
   14e14:	ldr	r3, [r4, #32]
   14e18:	cmp	r2, r3
   14e1c:	bcc	14df4 <__assert_fail@plt+0x39b8>
   14e20:	mov	r1, r7
   14e24:	mov	r0, r4
   14e28:	bl	1a118 <argp_parse@@Base+0x1ef0>
   14e2c:	cmp	r0, #0
   14e30:	bne	14df4 <__assert_fail@plt+0x39b8>
   14e34:	b	14e04 <__assert_fail@plt+0x39c8>
   14e38:	ldrd	r4, [sp]
   14e3c:	ldrd	r6, [sp, #8]
   14e40:	ldr	r8, [sp, #16]
   14e44:	add	sp, sp, #20
   14e48:	pop	{pc}		; (ldr pc, [sp], #4)
   14e4c:	strd	r4, [sp, #-16]!
   14e50:	str	r6, [sp, #8]
   14e54:	str	lr, [sp, #12]
   14e58:	ldr	r4, [r0, #12]
   14e5c:	ands	r4, r4, #8
   14e60:	movne	r4, #0
   14e64:	bne	14e94 <__assert_fail@plt+0x3a58>
   14e68:	ldr	r5, [r0, #4]
   14e6c:	sub	r3, r5, #1
   14e70:	cmp	r3, #254	; 0xfe
   14e74:	bhi	14e94 <__assert_fail@plt+0x3a58>
   14e78:	bl	112a4 <__ctype_b_loc@plt>
   14e7c:	ldr	r2, [r0]
   14e80:	lsl	r3, r5, #1
   14e84:	ldrh	r3, [r2, r3]
   14e88:	and	r3, r3, #16384	; 0x4000
   14e8c:	cmp	r3, #0
   14e90:	movne	r4, r5
   14e94:	mov	r0, r4
   14e98:	ldrd	r4, [sp]
   14e9c:	ldr	r6, [sp, #8]
   14ea0:	add	sp, sp, #12
   14ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea8:	strd	r4, [sp, #-16]!
   14eac:	str	r6, [sp, #8]
   14eb0:	str	lr, [sp, #12]
   14eb4:	mov	r4, r0
   14eb8:	mov	r5, r1
   14ebc:	ldr	r3, [r0, #28]
   14ec0:	ldr	r2, [r0, #24]
   14ec4:	sub	r3, r3, r2
   14ec8:	ldr	r2, [r0, #16]
   14ecc:	cmp	r3, r2
   14ed0:	bhi	14f20 <__assert_fail@plt+0x3ae4>
   14ed4:	ldr	r3, [r4, #20]
   14ed8:	cmp	r3, #0
   14edc:	addge	r5, r5, r3
   14ee0:	ldr	r3, [r4, #8]
   14ee4:	cmp	r5, r3
   14ee8:	bcc	14f40 <__assert_fail@plt+0x3b04>
   14eec:	ldr	r2, [r4, #28]
   14ef0:	ldr	r3, [r4, #32]
   14ef4:	cmp	r2, r3
   14ef8:	bcs	14f28 <__assert_fail@plt+0x3aec>
   14efc:	ldr	r3, [r4, #28]
   14f00:	add	r2, r3, #1
   14f04:	str	r2, [r4, #28]
   14f08:	mov	r2, #10
   14f0c:	strb	r2, [r3]
   14f10:	ldrd	r4, [sp]
   14f14:	ldr	r6, [sp, #8]
   14f18:	add	sp, sp, #12
   14f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f20:	bl	19ba0 <argp_parse@@Base+0x1978>
   14f24:	b	14ed4 <__assert_fail@plt+0x3a98>
   14f28:	mov	r1, #1
   14f2c:	mov	r0, r4
   14f30:	bl	1a118 <argp_parse@@Base+0x1ef0>
   14f34:	cmp	r0, #0
   14f38:	bne	14efc <__assert_fail@plt+0x3ac0>
   14f3c:	b	14f10 <__assert_fail@plt+0x3ad4>
   14f40:	ldr	r2, [r4, #28]
   14f44:	ldr	r3, [r4, #32]
   14f48:	cmp	r2, r3
   14f4c:	bcs	14f68 <__assert_fail@plt+0x3b2c>
   14f50:	ldr	r3, [r4, #28]
   14f54:	add	r2, r3, #1
   14f58:	str	r2, [r4, #28]
   14f5c:	mov	r2, #32
   14f60:	strb	r2, [r3]
   14f64:	b	14f10 <__assert_fail@plt+0x3ad4>
   14f68:	mov	r1, #1
   14f6c:	mov	r0, r4
   14f70:	bl	1a118 <argp_parse@@Base+0x1ef0>
   14f74:	cmp	r0, #0
   14f78:	bne	14f50 <__assert_fail@plt+0x3b14>
   14f7c:	b	14f10 <__assert_fail@plt+0x3ad4>
   14f80:	strd	r4, [sp, #-16]!
   14f84:	str	r6, [sp, #8]
   14f88:	str	lr, [sp, #12]
   14f8c:	ldr	r5, [r0, #8]
   14f90:	cmp	r5, #0
   14f94:	beq	14fd8 <__assert_fail@plt+0x3b9c>
   14f98:	ldr	r2, [r0, #12]
   14f9c:	ldr	r1, [r1, #12]
   14fa0:	orr	r2, r2, r1
   14fa4:	tst	r2, #16
   14fa8:	bne	14fe4 <__assert_fail@plt+0x3ba8>
   14fac:	mov	r6, r3
   14fb0:	mov	r4, r0
   14fb4:	tst	r2, #1
   14fb8:	beq	14ff8 <__assert_fail@plt+0x3bbc>
   14fbc:	mov	r3, r5
   14fc0:	ldr	r2, [r0, #4]
   14fc4:	movw	r1, #49132	; 0xbfec
   14fc8:	movt	r1, #1
   14fcc:	mov	r0, r6
   14fd0:	bl	1a218 <argp_parse@@Base+0x1ff0>
   14fd4:	b	14fe4 <__assert_fail@plt+0x3ba8>
   14fd8:	ldr	r5, [r1, #8]
   14fdc:	cmp	r5, #0
   14fe0:	bne	14f98 <__assert_fail@plt+0x3b5c>
   14fe4:	mov	r0, #0
   14fe8:	ldrd	r4, [sp]
   14fec:	ldr	r6, [sp, #8]
   14ff0:	add	sp, sp, #12
   14ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff8:	mov	r0, r5
   14ffc:	bl	112d4 <strlen@plt>
   15000:	add	r1, r0, #6
   15004:	mov	r0, r6
   15008:	bl	14ea8 <__assert_fail@plt+0x3a6c>
   1500c:	mov	r3, r5
   15010:	ldr	r2, [r4, #4]
   15014:	movw	r1, #49144	; 0xbff8
   15018:	movt	r1, #1
   1501c:	mov	r0, r6
   15020:	bl	1a218 <argp_parse@@Base+0x1ff0>
   15024:	b	14fe4 <__assert_fail@plt+0x3ba8>
   15028:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1502c:	strd	r6, [sp, #8]
   15030:	strd	r8, [sp, #16]
   15034:	strd	sl, [sp, #24]
   15038:	str	lr, [sp, #32]
   1503c:	sub	sp, sp, #28
   15040:	str	r1, [sp, #8]
   15044:	mov	sl, r2
   15048:	mov	r4, r3
   1504c:	ldr	r9, [sp, #64]	; 0x40
   15050:	ldr	r6, [r2]
   15054:	str	r6, [sp, #20]
   15058:	ldr	r7, [r0, #16]
   1505c:	ldr	r2, [r0, #8]
   15060:	mov	ip, r2
   15064:	str	r2, [sp, #16]
   15068:	mov	r3, r1
   1506c:	mov	r2, r0
   15070:	mov	r1, #6
   15074:	movt	r1, #512	; 0x200
   15078:	mov	r0, ip
   1507c:	bl	14a54 <__assert_fail@plt+0x3618>
   15080:	cmp	r0, #0
   15084:	str	r0, [sp, #12]
   15088:	beq	15218 <__assert_fail@plt+0x3ddc>
   1508c:	mov	r1, #10
   15090:	bl	11154 <strchrnul@plt>
   15094:	mov	r5, r0
   15098:	ldrb	r3, [r0]
   1509c:	cmp	r3, #0
   150a0:	beq	151e8 <__assert_fail@plt+0x3dac>
   150a4:	ldrb	fp, [r6]
   150a8:	cmp	fp, #0
   150ac:	ble	151e0 <__assert_fail@plt+0x3da4>
   150b0:	mov	r6, #0
   150b4:	add	r8, r0, #1
   150b8:	mov	r1, #10
   150bc:	mov	r0, r8
   150c0:	bl	11154 <strchrnul@plt>
   150c4:	add	r6, r6, #1
   150c8:	cmp	r6, fp
   150cc:	bne	150b4 <__assert_fail@plt+0x3c78>
   150d0:	mov	r5, r0
   150d4:	ldr	r3, [sl]
   150d8:	add	r3, r3, #1
   150dc:	str	r3, [sl]
   150e0:	mov	fp, #1
   150e4:	add	r1, r5, #1
   150e8:	sub	r1, r1, r8
   150ec:	mov	r0, r9
   150f0:	bl	14ea8 <__assert_fail@plt+0x3a6c>
   150f4:	sub	r6, r5, r8
   150f8:	ldr	r3, [r9, #28]
   150fc:	add	r3, r3, r6
   15100:	ldr	r2, [r9, #32]
   15104:	cmp	r2, r3
   15108:	bcs	15120 <__assert_fail@plt+0x3ce4>
   1510c:	mov	r1, r6
   15110:	mov	r0, r9
   15114:	bl	1a118 <argp_parse@@Base+0x1ef0>
   15118:	cmp	r0, #0
   1511c:	beq	1513c <__assert_fail@plt+0x3d00>
   15120:	mov	r2, r6
   15124:	mov	r1, r8
   15128:	ldr	r0, [r9, #28]
   1512c:	bl	11184 <memcpy@plt>
   15130:	ldr	r3, [r9, #28]
   15134:	add	r6, r3, r6
   15138:	str	r6, [r9, #28]
   1513c:	ldr	r2, [sp, #16]
   15140:	ldr	r3, [sp, #12]
   15144:	cmp	r2, r3
   15148:	bne	151f4 <__assert_fail@plt+0x3db8>
   1514c:	cmp	r7, #0
   15150:	beq	1518c <__assert_fail@plt+0x3d50>
   15154:	ldr	r0, [r7]
   15158:	cmp	r0, #0
   1515c:	beq	1518c <__assert_fail@plt+0x3d50>
   15160:	mov	r3, r4
   15164:	str	r9, [sp]
   15168:	mov	r2, sl
   1516c:	ldr	r1, [sp, #8]
   15170:	bl	15028 <__assert_fail@plt+0x3bec>
   15174:	clz	r3, r0
   15178:	lsr	r3, r3, #5
   1517c:	ldr	r0, [r7, #16]!
   15180:	cmp	r0, #0
   15184:	bne	15164 <__assert_fail@plt+0x3d28>
   15188:	mov	r4, r3
   1518c:	cmp	r4, #0
   15190:	moveq	fp, #0
   15194:	cmp	fp, #0
   15198:	beq	151bc <__assert_fail@plt+0x3d80>
   1519c:	ldrb	r3, [r5]
   151a0:	cmp	r3, #0
   151a4:	beq	15200 <__assert_fail@plt+0x3dc4>
   151a8:	ldr	r2, [sp, #20]
   151ac:	ldrb	r3, [r2]
   151b0:	add	r3, r3, #1
   151b4:	strb	r3, [r2]
   151b8:	mov	r4, #0
   151bc:	clz	r0, r4
   151c0:	lsr	r0, r0, #5
   151c4:	add	sp, sp, #28
   151c8:	ldrd	r4, [sp]
   151cc:	ldrd	r6, [sp, #8]
   151d0:	ldrd	r8, [sp, #16]
   151d4:	ldrd	sl, [sp, #24]
   151d8:	add	sp, sp, #32
   151dc:	pop	{pc}		; (ldr pc, [sp], #4)
   151e0:	ldr	r8, [sp, #12]
   151e4:	b	150d4 <__assert_fail@plt+0x3c98>
   151e8:	ldr	r8, [sp, #12]
   151ec:	mov	fp, #0
   151f0:	b	150e4 <__assert_fail@plt+0x3ca8>
   151f4:	mov	r0, r3
   151f8:	bl	18f00 <argp_parse@@Base+0xcd8>
   151fc:	b	1514c <__assert_fail@plt+0x3d10>
   15200:	ldr	r2, [sp, #20]
   15204:	ldrb	r3, [r2]
   15208:	cmp	r3, #0
   1520c:	movne	r3, #0
   15210:	strbne	r3, [r2]
   15214:	b	151bc <__assert_fail@plt+0x3d80>
   15218:	cmp	r7, #0
   1521c:	beq	151bc <__assert_fail@plt+0x3d80>
   15220:	ldr	r5, [sp, #12]
   15224:	mov	fp, #0
   15228:	b	15154 <__assert_fail@plt+0x3d18>
   1522c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15230:	strd	r6, [sp, #8]
   15234:	str	r8, [sp, #16]
   15238:	str	lr, [sp, #20]
   1523c:	mov	r6, r0
   15240:	mov	r4, r2
   15244:	ldr	r3, [r2, #16]
   15248:	mov	r2, r1
   1524c:	mov	r1, #3
   15250:	movt	r1, #512	; 0x200
   15254:	bl	14a54 <__assert_fail@plt+0x3618>
   15258:	subs	r5, r0, #0
   1525c:	beq	15370 <__assert_fail@plt+0x3f34>
   15260:	ldrb	r3, [r5]
   15264:	cmp	r3, #0
   15268:	beq	15364 <__assert_fail@plt+0x3f28>
   1526c:	ldr	r3, [r4, #8]
   15270:	ldr	r3, [r3]
   15274:	cmp	r3, #0
   15278:	beq	152a4 <__assert_fail@plt+0x3e68>
   1527c:	ldr	r7, [r4, #4]
   15280:	ldr	r2, [r7, #28]
   15284:	ldr	r3, [r7, #32]
   15288:	cmp	r2, r3
   1528c:	bcs	15394 <__assert_fail@plt+0x3f58>
   15290:	ldr	r3, [r7, #28]
   15294:	add	r2, r3, #1
   15298:	str	r2, [r7, #28]
   1529c:	mov	r2, #10
   152a0:	strb	r2, [r3]
   152a4:	movw	r8, #54752	; 0xd5e0
   152a8:	movt	r8, #2
   152ac:	ldr	r1, [r8, #24]
   152b0:	ldr	r0, [r4, #4]
   152b4:	bl	14da4 <__assert_fail@plt+0x3968>
   152b8:	ldr	r7, [r4, #4]
   152bc:	ldr	r8, [r8, #24]
   152c0:	ldr	r3, [r7, #28]
   152c4:	ldr	r2, [r7, #24]
   152c8:	sub	r3, r3, r2
   152cc:	ldr	r2, [r7, #16]
   152d0:	cmp	r3, r2
   152d4:	bhi	153ac <__assert_fail@plt+0x3f70>
   152d8:	str	r8, [r7, #4]
   152dc:	ldr	r7, [r4, #4]
   152e0:	movw	r3, #54752	; 0xd5e0
   152e4:	movt	r3, #2
   152e8:	ldr	r8, [r3, #24]
   152ec:	ldr	r3, [r7, #28]
   152f0:	ldr	r2, [r7, #24]
   152f4:	sub	r3, r3, r2
   152f8:	ldr	r2, [r7, #16]
   152fc:	cmp	r3, r2
   15300:	bhi	153b8 <__assert_fail@plt+0x3f7c>
   15304:	str	r8, [r7, #12]
   15308:	mov	r0, r5
   1530c:	bl	112d4 <strlen@plt>
   15310:	subs	r7, r0, #0
   15314:	bne	153c4 <__assert_fail@plt+0x3f88>
   15318:	ldr	r7, [r4, #4]
   1531c:	ldr	r3, [r7, #28]
   15320:	ldr	r2, [r7, #24]
   15324:	sub	r3, r3, r2
   15328:	ldr	r2, [r7, #16]
   1532c:	cmp	r3, r2
   15330:	bhi	15410 <__assert_fail@plt+0x3fd4>
   15334:	mov	r3, #0
   15338:	str	r3, [r7, #4]
   1533c:	ldr	r7, [r4, #4]
   15340:	ldr	r2, [r7, #28]
   15344:	ldr	r3, [r7, #32]
   15348:	cmp	r2, r3
   1534c:	bcs	1541c <__assert_fail@plt+0x3fe0>
   15350:	ldr	r3, [r7, #28]
   15354:	add	r2, r3, #1
   15358:	str	r2, [r7, #28]
   1535c:	mov	r2, #10
   15360:	strb	r2, [r3]
   15364:	ldr	r3, [r4, #8]
   15368:	mov	r2, #1
   1536c:	str	r2, [r3, #4]
   15370:	cmp	r6, r5
   15374:	beq	15380 <__assert_fail@plt+0x3f44>
   15378:	mov	r0, r5
   1537c:	bl	18f00 <argp_parse@@Base+0xcd8>
   15380:	ldrd	r4, [sp]
   15384:	ldrd	r6, [sp, #8]
   15388:	ldr	r8, [sp, #16]
   1538c:	add	sp, sp, #20
   15390:	pop	{pc}		; (ldr pc, [sp], #4)
   15394:	mov	r1, #1
   15398:	mov	r0, r7
   1539c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   153a0:	cmp	r0, #0
   153a4:	bne	15290 <__assert_fail@plt+0x3e54>
   153a8:	b	152a4 <__assert_fail@plt+0x3e68>
   153ac:	mov	r0, r7
   153b0:	bl	19ba0 <argp_parse@@Base+0x1978>
   153b4:	b	152d8 <__assert_fail@plt+0x3e9c>
   153b8:	mov	r0, r7
   153bc:	bl	19ba0 <argp_parse@@Base+0x1978>
   153c0:	b	15304 <__assert_fail@plt+0x3ec8>
   153c4:	ldr	r8, [r4, #4]
   153c8:	ldr	r3, [r8, #28]
   153cc:	add	r3, r3, r7
   153d0:	ldr	r2, [r8, #32]
   153d4:	cmp	r2, r3
   153d8:	bcs	153f0 <__assert_fail@plt+0x3fb4>
   153dc:	mov	r1, r7
   153e0:	mov	r0, r8
   153e4:	bl	1a118 <argp_parse@@Base+0x1ef0>
   153e8:	cmp	r0, #0
   153ec:	beq	15318 <__assert_fail@plt+0x3edc>
   153f0:	mov	r2, r7
   153f4:	mov	r1, r5
   153f8:	ldr	r0, [r8, #28]
   153fc:	bl	11184 <memcpy@plt>
   15400:	ldr	r3, [r8, #28]
   15404:	add	r7, r3, r7
   15408:	str	r7, [r8, #28]
   1540c:	b	15318 <__assert_fail@plt+0x3edc>
   15410:	mov	r0, r7
   15414:	bl	19ba0 <argp_parse@@Base+0x1978>
   15418:	b	15334 <__assert_fail@plt+0x3ef8>
   1541c:	mov	r1, #1
   15420:	mov	r0, r7
   15424:	bl	1a118 <argp_parse@@Base+0x1ef0>
   15428:	cmp	r0, #0
   1542c:	bne	15350 <__assert_fail@plt+0x3f14>
   15430:	b	15364 <__assert_fail@plt+0x3f28>
   15434:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15438:	strd	r6, [sp, #8]
   1543c:	str	r8, [sp, #16]
   15440:	str	lr, [sp, #20]
   15444:	mov	r6, r0
   15448:	mov	r4, r1
   1544c:	ldr	r3, [r1, #12]
   15450:	cmp	r3, #0
   15454:	beq	15588 <__assert_fail@plt+0x414c>
   15458:	ldr	r3, [r1, #8]
   1545c:	ldr	r7, [r3]
   15460:	ldr	r2, [r1]
   15464:	ldr	r5, [r2, #16]
   15468:	ldr	r3, [r3, #4]
   1546c:	cmp	r3, #0
   15470:	cmpne	r7, #0
   15474:	bne	15528 <__assert_fail@plt+0x40ec>
   15478:	cmp	r5, #0
   1547c:	beq	15500 <__assert_fail@plt+0x40c4>
   15480:	ldr	r0, [r5]
   15484:	cmp	r0, #0
   15488:	beq	15500 <__assert_fail@plt+0x40c4>
   1548c:	ldrb	r3, [r0]
   15490:	cmp	r3, #0
   15494:	beq	15500 <__assert_fail@plt+0x40c4>
   15498:	cmp	r7, #0
   1549c:	beq	154cc <__assert_fail@plt+0x4090>
   154a0:	ldr	r3, [r7, #16]
   154a4:	cmp	r3, r5
   154a8:	beq	15500 <__assert_fail@plt+0x40c4>
   154ac:	cmp	r3, #0
   154b0:	beq	154cc <__assert_fail@plt+0x4090>
   154b4:	ldr	r3, [r3, #12]
   154b8:	cmp	r3, #0
   154bc:	cmpne	r5, r3
   154c0:	bne	154b4 <__assert_fail@plt+0x4078>
   154c4:	cmp	r5, r3
   154c8:	beq	15500 <__assert_fail@plt+0x40c4>
   154cc:	ldr	r3, [r4, #4]
   154d0:	ldr	r7, [r3, #12]
   154d4:	mov	r2, r4
   154d8:	ldr	r1, [r5, #16]
   154dc:	bl	1522c <__assert_fail@plt+0x3df0>
   154e0:	ldr	r5, [r4, #4]
   154e4:	ldr	r3, [r5, #28]
   154e8:	ldr	r2, [r5, #24]
   154ec:	sub	r3, r3, r2
   154f0:	ldr	r2, [r5, #16]
   154f4:	cmp	r3, r2
   154f8:	bhi	1557c <__assert_fail@plt+0x4140>
   154fc:	str	r7, [r5, #12]
   15500:	mov	r3, #0
   15504:	str	r3, [r4, #12]
   15508:	mov	r1, r6
   1550c:	ldr	r0, [r4, #4]
   15510:	bl	14da4 <__assert_fail@plt+0x3968>
   15514:	ldrd	r4, [sp]
   15518:	ldrd	r6, [sp, #8]
   1551c:	ldr	r8, [sp, #16]
   15520:	add	sp, sp, #20
   15524:	pop	{pc}		; (ldr pc, [sp], #4)
   15528:	ldr	r2, [r2, #12]
   1552c:	ldr	r3, [r7, #12]
   15530:	cmp	r2, r3
   15534:	beq	15478 <__assert_fail@plt+0x403c>
   15538:	ldr	r8, [r1, #4]
   1553c:	ldr	r2, [r8, #28]
   15540:	ldr	r3, [r8, #32]
   15544:	cmp	r2, r3
   15548:	bcs	15564 <__assert_fail@plt+0x4128>
   1554c:	ldr	r3, [r8, #28]
   15550:	add	r2, r3, #1
   15554:	str	r2, [r8, #28]
   15558:	mov	r2, #10
   1555c:	strb	r2, [r3]
   15560:	b	15478 <__assert_fail@plt+0x403c>
   15564:	mov	r1, #1
   15568:	mov	r0, r8
   1556c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   15570:	cmp	r0, #0
   15574:	bne	1554c <__assert_fail@plt+0x4110>
   15578:	b	15478 <__assert_fail@plt+0x403c>
   1557c:	mov	r0, r5
   15580:	bl	19ba0 <argp_parse@@Base+0x1978>
   15584:	b	154fc <__assert_fail@plt+0x40c0>
   15588:	ldr	r5, [r1, #4]
   1558c:	ldr	r3, [r5, #28]
   15590:	add	r3, r3, #2
   15594:	ldr	r2, [r5, #32]
   15598:	cmp	r2, r3
   1559c:	bcs	155b4 <__assert_fail@plt+0x4178>
   155a0:	mov	r1, #2
   155a4:	mov	r0, r5
   155a8:	bl	1a118 <argp_parse@@Base+0x1ef0>
   155ac:	cmp	r0, #0
   155b0:	beq	15508 <__assert_fail@plt+0x40cc>
   155b4:	ldr	r2, [r5, #28]
   155b8:	movw	r3, #45612	; 0xb22c
   155bc:	movt	r3, #1
   155c0:	ldrh	r3, [r3]
   155c4:	strh	r3, [r2]
   155c8:	ldr	r3, [r5, #28]
   155cc:	add	r3, r3, #2
   155d0:	str	r3, [r5, #28]
   155d4:	b	15508 <__assert_fail@plt+0x40cc>
   155d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   155dc:	strd	r6, [sp, #8]
   155e0:	strd	r8, [sp, #16]
   155e4:	strd	sl, [sp, #24]
   155e8:	str	lr, [sp, #32]
   155ec:	sub	sp, sp, #28
   155f0:	mov	r8, r0
   155f4:	str	r1, [sp, #12]
   155f8:	str	r2, [sp, #8]
   155fc:	mov	fp, r3
   15600:	ldr	sl, [sp, #64]	; 0x40
   15604:	ldr	r4, [sp, #68]	; 0x44
   15608:	ldr	r6, [r0, #12]
   1560c:	ldr	r9, [r0, #16]
   15610:	cmp	r6, #0
   15614:	beq	15a90 <__assert_fail@plt+0x4654>
   15618:	mov	r5, r2
   1561c:	mov	r1, #11
   15620:	mov	r0, r6
   15624:	bl	112e0 <strchr@plt>
   15628:	cmp	r5, #0
   1562c:	beq	1566c <__assert_fail@plt+0x4230>
   15630:	cmp	r0, #0
   15634:	addne	r6, r0, #1
   15638:	beq	15ad8 <__assert_fail@plt+0x469c>
   1563c:	ldr	r3, [r8, #20]
   15640:	cmp	r3, #0
   15644:	beq	15ae0 <__assert_fail@plt+0x46a4>
   15648:	ldr	r1, [sp, #12]
   1564c:	mov	r0, r8
   15650:	bl	18d7c <argp_parse@@Base+0xb54>
   15654:	str	r0, [sp, #16]
   15658:	ldr	r3, [r8, #20]
   1565c:	mov	r7, #0
   15660:	mov	r0, #2
   15664:	movt	r0, #512	; 0x200
   15668:	b	156b8 <__assert_fail@plt+0x427c>
   1566c:	cmp	r0, #0
   15670:	beq	15afc <__assert_fail@plt+0x46c0>
   15674:	sub	r7, r0, r6
   15678:	ldr	r3, [r8, #20]
   1567c:	cmp	r3, #0
   15680:	beq	158a0 <__assert_fail@plt+0x4464>
   15684:	cmp	r7, #0
   15688:	beq	1569c <__assert_fail@plt+0x4260>
   1568c:	mov	r1, r7
   15690:	mov	r0, r6
   15694:	bl	11178 <strndup@plt>
   15698:	mov	r6, r0
   1569c:	ldr	r1, [sp, #12]
   156a0:	mov	r0, r8
   156a4:	bl	18d7c <argp_parse@@Base+0xb54>
   156a8:	str	r0, [sp, #16]
   156ac:	ldr	r3, [r8, #20]
   156b0:	mov	r0, #1
   156b4:	movt	r0, #512	; 0x200
   156b8:	ldr	r2, [sp, #16]
   156bc:	mov	r1, r6
   156c0:	blx	r3
   156c4:	subs	r5, r0, #0
   156c8:	beq	159ac <__assert_fail@plt+0x4570>
   156cc:	cmp	fp, #0
   156d0:	bne	158b0 <__assert_fail@plt+0x4474>
   156d4:	cmp	r5, r6
   156d8:	movne	r3, #0
   156dc:	moveq	r3, #1
   156e0:	cmp	r7, #0
   156e4:	moveq	r3, #0
   156e8:	cmp	r3, #0
   156ec:	beq	158f0 <__assert_fail@plt+0x44b4>
   156f0:	ldr	r3, [r4, #28]
   156f4:	add	r3, r3, r7
   156f8:	ldr	r2, [r4, #32]
   156fc:	cmp	r2, r3
   15700:	bcs	15718 <__assert_fail@plt+0x42dc>
   15704:	mov	r1, r7
   15708:	mov	r0, r4
   1570c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   15710:	cmp	r0, #0
   15714:	beq	15734 <__assert_fail@plt+0x42f8>
   15718:	mov	r2, r7
   1571c:	mov	r1, r6
   15720:	ldr	r0, [r4, #28]
   15724:	bl	11184 <memcpy@plt>
   15728:	ldr	r3, [r4, #28]
   1572c:	add	r3, r3, r7
   15730:	str	r3, [r4, #28]
   15734:	ldr	r3, [r4, #28]
   15738:	ldr	r2, [r4, #24]
   1573c:	sub	r3, r3, r2
   15740:	ldr	r2, [r4, #16]
   15744:	cmp	r3, r2
   15748:	bhi	15950 <__assert_fail@plt+0x4514>
   1574c:	ldr	r3, [r4, #20]
   15750:	bic	r3, r3, r3, asr #31
   15754:	ldr	r2, [r4, #4]
   15758:	cmp	r2, r3
   1575c:	bcc	1595c <__assert_fail@plt+0x4520>
   15760:	cmp	r5, r6
   15764:	moveq	r5, #1
   15768:	bne	1599c <__assert_fail@plt+0x4560>
   1576c:	cmp	r6, #0
   15770:	cmpne	r7, #0
   15774:	beq	1578c <__assert_fail@plt+0x4350>
   15778:	ldr	r3, [r8, #20]
   1577c:	cmp	r3, #0
   15780:	beq	15810 <__assert_fail@plt+0x43d4>
   15784:	mov	r0, r6
   15788:	bl	18f00 <argp_parse@@Base+0xcd8>
   1578c:	ldr	r3, [sp, #8]
   15790:	cmp	r3, #0
   15794:	beq	15810 <__assert_fail@plt+0x43d4>
   15798:	ldr	r3, [r8, #20]
   1579c:	cmp	r3, #0
   157a0:	beq	15810 <__assert_fail@plt+0x43d4>
   157a4:	ldr	r2, [sp, #16]
   157a8:	mov	r1, #0
   157ac:	mov	r0, #4
   157b0:	movt	r0, #512	; 0x200
   157b4:	blx	r3
   157b8:	subs	r6, r0, #0
   157bc:	beq	15810 <__assert_fail@plt+0x43d4>
   157c0:	orrs	r3, fp, r5
   157c4:	bne	159b4 <__assert_fail@plt+0x4578>
   157c8:	mov	r0, r6
   157cc:	bl	112d4 <strlen@plt>
   157d0:	subs	r5, r0, #0
   157d4:	bne	159f4 <__assert_fail@plt+0x45b8>
   157d8:	mov	r0, r6
   157dc:	bl	18f00 <argp_parse@@Base+0xcd8>
   157e0:	ldr	r3, [r4, #28]
   157e4:	ldr	r2, [r4, #24]
   157e8:	sub	r3, r3, r2
   157ec:	ldr	r2, [r4, #16]
   157f0:	cmp	r3, r2
   157f4:	bhi	15a3c <__assert_fail@plt+0x4600>
   157f8:	ldr	r3, [r4, #20]
   157fc:	bic	r3, r3, r3, asr #31
   15800:	ldr	r2, [r4, #4]
   15804:	cmp	r2, r3
   15808:	movcs	r5, #1
   1580c:	bcc	15a48 <__assert_fail@plt+0x460c>
   15810:	cmp	r9, #0
   15814:	beq	15880 <__assert_fail@plt+0x4444>
   15818:	ldr	r0, [r9]
   1581c:	cmp	r0, #0
   15820:	beq	15880 <__assert_fail@plt+0x4444>
   15824:	clz	r6, sl
   15828:	lsr	r6, r6, #5
   1582c:	cmp	sl, #0
   15830:	cmpne	r5, #0
   15834:	bne	15880 <__assert_fail@plt+0x4444>
   15838:	orrs	r3, fp, r5
   1583c:	str	r4, [sp, #4]
   15840:	str	sl, [sp]
   15844:	movne	r3, #1
   15848:	moveq	r3, #0
   1584c:	ldr	r2, [sp, #8]
   15850:	ldr	r1, [sp, #12]
   15854:	bl	155d8 <__assert_fail@plt+0x419c>
   15858:	orr	r5, r5, r0
   1585c:	ldr	r0, [r9, #16]
   15860:	cmp	r0, #0
   15864:	beq	15880 <__assert_fail@plt+0x4444>
   15868:	add	r9, r9, #16
   1586c:	cmp	r5, #0
   15870:	movne	r3, r6
   15874:	moveq	r3, #1
   15878:	cmp	r3, #0
   1587c:	bne	15838 <__assert_fail@plt+0x43fc>
   15880:	mov	r0, r5
   15884:	add	sp, sp, #28
   15888:	ldrd	r4, [sp]
   1588c:	ldrd	r6, [sp, #8]
   15890:	ldrd	r8, [sp, #16]
   15894:	ldrd	sl, [sp, #24]
   15898:	add	sp, sp, #32
   1589c:	pop	{pc}		; (ldr pc, [sp], #4)
   158a0:	mov	r5, r6
   158a4:	mov	r3, #0
   158a8:	str	r3, [sp, #16]
   158ac:	b	156cc <__assert_fail@plt+0x4290>
   158b0:	ldr	r2, [r4, #28]
   158b4:	ldr	r3, [r4, #32]
   158b8:	cmp	r2, r3
   158bc:	bcs	158d8 <__assert_fail@plt+0x449c>
   158c0:	ldr	r3, [r4, #28]
   158c4:	add	r2, r3, #1
   158c8:	str	r2, [r4, #28]
   158cc:	mov	r2, #10
   158d0:	strb	r2, [r3]
   158d4:	b	156d4 <__assert_fail@plt+0x4298>
   158d8:	mov	r1, #1
   158dc:	mov	r0, r4
   158e0:	bl	1a118 <argp_parse@@Base+0x1ef0>
   158e4:	cmp	r0, #0
   158e8:	bne	158c0 <__assert_fail@plt+0x4484>
   158ec:	b	156d4 <__assert_fail@plt+0x4298>
   158f0:	mov	r0, r5
   158f4:	bl	112d4 <strlen@plt>
   158f8:	subs	r3, r0, #0
   158fc:	str	r3, [sp, #20]
   15900:	beq	15734 <__assert_fail@plt+0x42f8>
   15904:	ldr	r3, [r4, #28]
   15908:	mov	r1, r0
   1590c:	add	r3, r3, r0
   15910:	ldr	r2, [r4, #32]
   15914:	cmp	r2, r3
   15918:	bcs	1592c <__assert_fail@plt+0x44f0>
   1591c:	mov	r0, r4
   15920:	bl	1a118 <argp_parse@@Base+0x1ef0>
   15924:	cmp	r0, #0
   15928:	beq	15734 <__assert_fail@plt+0x42f8>
   1592c:	ldr	r2, [sp, #20]
   15930:	mov	r1, r5
   15934:	ldr	r0, [r4, #28]
   15938:	bl	11184 <memcpy@plt>
   1593c:	ldr	r3, [r4, #28]
   15940:	ldr	r2, [sp, #20]
   15944:	add	r3, r3, r2
   15948:	str	r3, [r4, #28]
   1594c:	b	15734 <__assert_fail@plt+0x42f8>
   15950:	mov	r0, r4
   15954:	bl	19ba0 <argp_parse@@Base+0x1978>
   15958:	b	1574c <__assert_fail@plt+0x4310>
   1595c:	ldr	r2, [r4, #28]
   15960:	ldr	r3, [r4, #32]
   15964:	cmp	r2, r3
   15968:	bcs	15984 <__assert_fail@plt+0x4548>
   1596c:	ldr	r3, [r4, #28]
   15970:	add	r2, r3, #1
   15974:	str	r2, [r4, #28]
   15978:	mov	r2, #10
   1597c:	strb	r2, [r3]
   15980:	b	15760 <__assert_fail@plt+0x4324>
   15984:	mov	r1, #1
   15988:	mov	r0, r4
   1598c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   15990:	cmp	r0, #0
   15994:	bne	1596c <__assert_fail@plt+0x4530>
   15998:	b	15760 <__assert_fail@plt+0x4324>
   1599c:	mov	r0, r5
   159a0:	bl	18f00 <argp_parse@@Base+0xcd8>
   159a4:	mov	r5, #1
   159a8:	b	1576c <__assert_fail@plt+0x4330>
   159ac:	mov	r5, #0
   159b0:	b	1576c <__assert_fail@plt+0x4330>
   159b4:	ldr	r2, [r4, #28]
   159b8:	ldr	r3, [r4, #32]
   159bc:	cmp	r2, r3
   159c0:	bcs	159dc <__assert_fail@plt+0x45a0>
   159c4:	ldr	r3, [r4, #28]
   159c8:	add	r2, r3, #1
   159cc:	str	r2, [r4, #28]
   159d0:	mov	r2, #10
   159d4:	strb	r2, [r3]
   159d8:	b	157c8 <__assert_fail@plt+0x438c>
   159dc:	mov	r1, #1
   159e0:	mov	r0, r4
   159e4:	bl	1a118 <argp_parse@@Base+0x1ef0>
   159e8:	cmp	r0, #0
   159ec:	bne	159c4 <__assert_fail@plt+0x4588>
   159f0:	b	157c8 <__assert_fail@plt+0x438c>
   159f4:	ldr	r3, [r4, #28]
   159f8:	add	r3, r3, r5
   159fc:	ldr	r2, [r4, #32]
   15a00:	cmp	r2, r3
   15a04:	bcs	15a1c <__assert_fail@plt+0x45e0>
   15a08:	mov	r1, r5
   15a0c:	mov	r0, r4
   15a10:	bl	1a118 <argp_parse@@Base+0x1ef0>
   15a14:	cmp	r0, #0
   15a18:	beq	157d8 <__assert_fail@plt+0x439c>
   15a1c:	mov	r2, r5
   15a20:	mov	r1, r6
   15a24:	ldr	r0, [r4, #28]
   15a28:	bl	11184 <memcpy@plt>
   15a2c:	ldr	r3, [r4, #28]
   15a30:	add	r5, r3, r5
   15a34:	str	r5, [r4, #28]
   15a38:	b	157d8 <__assert_fail@plt+0x439c>
   15a3c:	mov	r0, r4
   15a40:	bl	19ba0 <argp_parse@@Base+0x1978>
   15a44:	b	157f8 <__assert_fail@plt+0x43bc>
   15a48:	ldr	r2, [r4, #28]
   15a4c:	ldr	r3, [r4, #32]
   15a50:	cmp	r2, r3
   15a54:	bcs	15a74 <__assert_fail@plt+0x4638>
   15a58:	ldr	r3, [r4, #28]
   15a5c:	add	r2, r3, #1
   15a60:	str	r2, [r4, #28]
   15a64:	mov	r2, #10
   15a68:	strb	r2, [r3]
   15a6c:	mov	r5, #1
   15a70:	b	15810 <__assert_fail@plt+0x43d4>
   15a74:	mov	r1, #1
   15a78:	mov	r0, r4
   15a7c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   15a80:	cmp	r0, #0
   15a84:	bne	15a58 <__assert_fail@plt+0x461c>
   15a88:	mov	r5, #1
   15a8c:	b	15810 <__assert_fail@plt+0x43d4>
   15a90:	ldr	r3, [r0, #20]
   15a94:	cmp	r3, #0
   15a98:	moveq	r5, r6
   15a9c:	beq	15ae4 <__assert_fail@plt+0x46a8>
   15aa0:	ldr	r1, [sp, #12]
   15aa4:	mov	r0, r8
   15aa8:	bl	18d7c <argp_parse@@Base+0xb54>
   15aac:	str	r0, [sp, #16]
   15ab0:	ldr	r3, [r8, #20]
   15ab4:	mov	r7, #0
   15ab8:	mov	r0, #2
   15abc:	movt	r0, #512	; 0x200
   15ac0:	mov	r2, #1
   15ac4:	movt	r2, #512	; 0x200
   15ac8:	ldr	r1, [sp, #8]
   15acc:	cmp	r1, r7
   15ad0:	moveq	r0, r2
   15ad4:	b	156b8 <__assert_fail@plt+0x427c>
   15ad8:	mov	r6, r0
   15adc:	b	1563c <__assert_fail@plt+0x4200>
   15ae0:	mov	r5, r6
   15ae4:	cmp	r5, #0
   15ae8:	streq	r5, [sp, #16]
   15aec:	beq	1578c <__assert_fail@plt+0x4350>
   15af0:	mov	r7, #0
   15af4:	str	r7, [sp, #16]
   15af8:	b	156cc <__assert_fail@plt+0x4290>
   15afc:	ldr	r3, [r8, #20]
   15b00:	cmp	r3, #0
   15b04:	moveq	r5, r6
   15b08:	beq	15ae4 <__assert_fail@plt+0x46a8>
   15b0c:	ldr	r1, [sp, #12]
   15b10:	mov	r0, r8
   15b14:	bl	18d7c <argp_parse@@Base+0xb54>
   15b18:	str	r0, [sp, #16]
   15b1c:	ldr	r3, [r8, #20]
   15b20:	mov	r7, #0
   15b24:	mov	r0, #1
   15b28:	movt	r0, #512	; 0x200
   15b2c:	b	156b8 <__assert_fail@plt+0x427c>
   15b30:	ldr	r3, [r0, #12]
   15b34:	ldr	r2, [r1, #12]
   15b38:	cmp	r3, r2
   15b3c:	beq	15bac <__assert_fail@plt+0x4770>
   15b40:	strd	r4, [sp, #-16]!
   15b44:	str	r6, [sp, #8]
   15b48:	str	lr, [sp, #12]
   15b4c:	mov	r5, r1
   15b50:	mov	r4, r0
   15b54:	mov	r1, r2
   15b58:	mov	r0, r3
   15b5c:	bl	15b30 <__assert_fail@plt+0x46f4>
   15b60:	subs	r3, r0, #0
   15b64:	bne	15b98 <__assert_fail@plt+0x475c>
   15b68:	ldr	r0, [r4, #8]
   15b6c:	ldr	r3, [r5, #8]
   15b70:	mvn	r2, r3
   15b74:	lsr	r2, r2, #31
   15b78:	cmp	r2, r0, lsr #31
   15b7c:	subne	r3, r0, r3
   15b80:	subeq	r3, r3, r0
   15b84:	cmp	r3, #0
   15b88:	bne	15b98 <__assert_fail@plt+0x475c>
   15b8c:	ldr	r3, [r5, #4]
   15b90:	ldr	r0, [r4, #4]
   15b94:	sub	r3, r3, r0
   15b98:	mov	r0, r3
   15b9c:	ldrd	r4, [sp]
   15ba0:	ldr	r6, [sp, #8]
   15ba4:	add	sp, sp, #12
   15ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bac:	ldr	r2, [r0, #8]
   15bb0:	ldr	r3, [r1, #8]
   15bb4:	mvn	ip, r3
   15bb8:	lsr	ip, ip, #31
   15bbc:	cmp	ip, r2, lsr #31
   15bc0:	subne	r3, r2, r3
   15bc4:	subeq	r3, r3, r2
   15bc8:	cmp	r3, #0
   15bcc:	bne	15bdc <__assert_fail@plt+0x47a0>
   15bd0:	ldr	r3, [r1, #4]
   15bd4:	ldr	r0, [r0, #4]
   15bd8:	sub	r3, r3, r0
   15bdc:	mov	r0, r3
   15be0:	bx	lr
   15be4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15be8:	strd	r6, [sp, #8]
   15bec:	str	r8, [sp, #16]
   15bf0:	str	lr, [sp, #20]
   15bf4:	sub	sp, sp, #8
   15bf8:	ldr	lr, [r0, #16]
   15bfc:	cmp	lr, #0
   15c00:	movne	r3, lr
   15c04:	bne	15c14 <__assert_fail@plt+0x47d8>
   15c08:	ldr	ip, [r0, #12]
   15c0c:	b	15c24 <__assert_fail@plt+0x47e8>
   15c10:	mov	r3, r2
   15c14:	ldr	r2, [r3, #12]
   15c18:	cmp	r2, #0
   15c1c:	bne	15c10 <__assert_fail@plt+0x47d4>
   15c20:	ldr	ip, [r3, #8]
   15c24:	ldr	r5, [r1, #16]
   15c28:	cmp	r5, #0
   15c2c:	movne	r3, r5
   15c30:	bne	15c40 <__assert_fail@plt+0x4804>
   15c34:	ldr	r4, [r1, #12]
   15c38:	b	15c50 <__assert_fail@plt+0x4814>
   15c3c:	mov	r3, r2
   15c40:	ldr	r2, [r3, #12]
   15c44:	cmp	r2, #0
   15c48:	bne	15c3c <__assert_fail@plt+0x4800>
   15c4c:	ldr	r4, [r3, #8]
   15c50:	mvn	r3, r4
   15c54:	lsr	r3, r3, #31
   15c58:	cmp	r3, ip, lsr #31
   15c5c:	subne	r4, ip, r4
   15c60:	subeq	r4, r4, ip
   15c64:	cmp	r4, #0
   15c68:	bne	15da8 <__assert_fail@plt+0x496c>
   15c6c:	adds	r4, r5, #0
   15c70:	movne	r4, #1
   15c74:	cmp	lr, #0
   15c78:	rsbeq	r4, r4, #0
   15c7c:	rsbne	r4, r4, #1
   15c80:	cmp	r4, #0
   15c84:	bne	15da8 <__assert_fail@plt+0x496c>
   15c88:	mov	r7, r1
   15c8c:	mov	r6, r0
   15c90:	cmp	lr, #0
   15c94:	beq	15d14 <__assert_fail@plt+0x48d8>
   15c98:	ldr	r1, [lr, #20]
   15c9c:	ldr	r2, [r5, #20]
   15ca0:	cmp	r1, r2
   15ca4:	ble	15cd0 <__assert_fail@plt+0x4894>
   15ca8:	ldr	lr, [lr, #12]
   15cac:	ldr	r3, [lr, #20]
   15cb0:	cmp	r2, r3
   15cb4:	blt	15ca8 <__assert_fail@plt+0x486c>
   15cb8:	mov	r1, r5
   15cbc:	mov	r0, lr
   15cc0:	bl	15b30 <__assert_fail@plt+0x46f4>
   15cc4:	subs	r4, r0, #0
   15cc8:	moveq	r4, #1
   15ccc:	b	15da8 <__assert_fail@plt+0x496c>
   15cd0:	cmp	r1, r2
   15cd4:	bge	15d00 <__assert_fail@plt+0x48c4>
   15cd8:	ldr	r5, [r5, #12]
   15cdc:	ldr	r3, [r5, #20]
   15ce0:	cmp	r1, r3
   15ce4:	blt	15cd8 <__assert_fail@plt+0x489c>
   15ce8:	mov	r1, r5
   15cec:	mov	r0, lr
   15cf0:	bl	15b30 <__assert_fail@plt+0x46f4>
   15cf4:	subs	r4, r0, #0
   15cf8:	mvneq	r4, #0
   15cfc:	b	15da8 <__assert_fail@plt+0x496c>
   15d00:	mov	r1, r5
   15d04:	mov	r0, lr
   15d08:	bl	15b30 <__assert_fail@plt+0x46f4>
   15d0c:	subs	r4, r0, #0
   15d10:	bne	15da8 <__assert_fail@plt+0x496c>
   15d14:	ldr	r3, [r6, #12]
   15d18:	ldr	r4, [r7, #12]
   15d1c:	mvn	r2, r4
   15d20:	lsr	r2, r2, #31
   15d24:	cmp	r2, r3, lsr #31
   15d28:	subne	r4, r3, r4
   15d2c:	subeq	r4, r4, r3
   15d30:	cmp	r4, #0
   15d34:	bne	15da8 <__assert_fail@plt+0x496c>
   15d38:	mov	r0, r6
   15d3c:	bl	147a8 <__assert_fail@plt+0x336c>
   15d40:	mov	r5, r0
   15d44:	str	r0, [sp]
   15d48:	mov	r0, r7
   15d4c:	bl	147a8 <__assert_fail@plt+0x336c>
   15d50:	str	r0, [sp, #4]
   15d54:	ldr	r3, [r6]
   15d58:	ldr	r0, [r3, #12]
   15d5c:	ubfx	r0, r0, #3, #1
   15d60:	cmp	r5, #0
   15d64:	moveq	r0, #0
   15d68:	cmp	r0, #0
   15d6c:	bne	15dc4 <__assert_fail@plt+0x4988>
   15d70:	ldr	r3, [r7]
   15d74:	ldr	r3, [r3, #12]
   15d78:	tst	r3, #8
   15d7c:	beq	15dfc <__assert_fail@plt+0x49c0>
   15d80:	ldr	r3, [sp, #4]
   15d84:	cmp	r3, #0
   15d88:	beq	15dfc <__assert_fail@plt+0x49c0>
   15d8c:	add	r0, sp, #4
   15d90:	bl	14844 <__assert_fail@plt+0x3408>
   15d94:	adds	r3, r0, #0
   15d98:	movne	r3, #1
   15d9c:	mov	r0, r4
   15da0:	subs	r4, r0, r3
   15da4:	beq	15dfc <__assert_fail@plt+0x49c0>
   15da8:	mov	r0, r4
   15dac:	add	sp, sp, #8
   15db0:	ldrd	r4, [sp]
   15db4:	ldrd	r6, [sp, #8]
   15db8:	ldr	r8, [sp, #16]
   15dbc:	add	sp, sp, #20
   15dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc4:	mov	r0, sp
   15dc8:	bl	14844 <__assert_fail@plt+0x3408>
   15dcc:	adds	r0, r0, #0
   15dd0:	movne	r0, #1
   15dd4:	ldr	r3, [r7]
   15dd8:	ldr	r3, [r3, #12]
   15ddc:	ands	r3, r3, #8
   15de0:	beq	15da0 <__assert_fail@plt+0x4964>
   15de4:	ldr	r3, [sp, #4]
   15de8:	cmp	r3, #0
   15dec:	moveq	r3, r4
   15df0:	beq	15da0 <__assert_fail@plt+0x4964>
   15df4:	mov	r4, r0
   15df8:	b	15d8c <__assert_fail@plt+0x4950>
   15dfc:	ldr	r2, [r6, #20]
   15e00:	movw	r4, #20044	; 0x4e4c
   15e04:	movt	r4, #1
   15e08:	mov	r3, #0
   15e0c:	ldr	r2, [r2, #24]
   15e10:	mov	r1, r4
   15e14:	mov	r0, r6
   15e18:	bl	14ab4 <__assert_fail@plt+0x3678>
   15e1c:	mov	r5, r0
   15e20:	uxtb	r8, r0
   15e24:	ldr	r2, [r7, #20]
   15e28:	mov	r3, #0
   15e2c:	ldr	r2, [r2, #24]
   15e30:	mov	r1, r4
   15e34:	mov	r0, r7
   15e38:	bl	14ab4 <__assert_fail@plt+0x3678>
   15e3c:	uxtb	r7, r0
   15e40:	cmp	r8, #0
   15e44:	movne	r5, r8
   15e48:	bne	15e5c <__assert_fail@plt+0x4a20>
   15e4c:	ldr	r3, [sp]
   15e50:	cmp	r3, #0
   15e54:	ldrbne	r5, [r3]
   15e58:	moveq	r5, #0
   15e5c:	cmp	r7, #0
   15e60:	uxtbne	r6, r0
   15e64:	bne	15e78 <__assert_fail@plt+0x4a3c>
   15e68:	ldr	r3, [sp, #4]
   15e6c:	cmp	r3, #0
   15e70:	ldrbne	r6, [r3]
   15e74:	moveq	r6, #0
   15e78:	bl	11280 <__ctype_tolower_loc@plt>
   15e7c:	ldr	r3, [r0]
   15e80:	ldr	r4, [r3, r5, lsl #2]
   15e84:	ldr	r3, [r3, r6, lsl #2]
   15e88:	subs	r4, r4, r3
   15e8c:	bne	15da8 <__assert_fail@plt+0x496c>
   15e90:	subs	r4, r6, r5
   15e94:	bne	15da8 <__assert_fail@plt+0x496c>
   15e98:	adds	r4, r7, #0
   15e9c:	movne	r4, #1
   15ea0:	cmp	r8, #0
   15ea4:	rsbeq	r4, r4, #0
   15ea8:	rsbne	r4, r4, #1
   15eac:	cmp	r4, #0
   15eb0:	bne	15da8 <__assert_fail@plt+0x496c>
   15eb4:	cmp	r8, #0
   15eb8:	bne	15da8 <__assert_fail@plt+0x496c>
   15ebc:	ldr	r0, [sp]
   15ec0:	ldr	r1, [sp, #4]
   15ec4:	adds	r4, r1, #0
   15ec8:	movne	r4, #1
   15ecc:	cmp	r0, #0
   15ed0:	rsbeq	r4, r4, #0
   15ed4:	rsbne	r4, r4, #1
   15ed8:	cmp	r4, #0
   15edc:	bne	15da8 <__assert_fail@plt+0x496c>
   15ee0:	cmp	r0, #0
   15ee4:	beq	15da8 <__assert_fail@plt+0x496c>
   15ee8:	bl	11208 <strcasecmp@plt>
   15eec:	mov	r4, r0
   15ef0:	b	15da8 <__assert_fail@plt+0x496c>
   15ef4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ef8:	strd	r6, [sp, #8]
   15efc:	strd	r8, [sp, #16]
   15f00:	strd	sl, [sp, #24]
   15f04:	str	lr, [sp, #32]
   15f08:	sub	sp, sp, #52	; 0x34
   15f0c:	str	r0, [sp, #12]
   15f10:	str	r1, [sp, #4]
   15f14:	ldr	fp, [r0, #16]
   15f18:	ldr	r4, [r0]
   15f1c:	mov	r0, #16
   15f20:	bl	19a70 <argp_parse@@Base+0x1848>
   15f24:	subs	sl, r0, #0
   15f28:	beq	15f58 <__assert_fail@plt+0x4b1c>
   15f2c:	mov	r3, #0
   15f30:	str	r3, [sl, #4]
   15f34:	str	r3, [sl, #12]
   15f38:	cmp	r4, r3
   15f3c:	beq	16164 <__assert_fail@plt+0x4d28>
   15f40:	ldr	r3, [r4, #12]
   15f44:	tst	r3, #4
   15f48:	bne	15f78 <__assert_fail@plt+0x4b3c>
   15f4c:	add	r5, r4, #24
   15f50:	mov	r6, #0
   15f54:	b	15f9c <__assert_fail@plt+0x4b60>
   15f58:	movw	r3, #48920	; 0xbf18
   15f5c:	movt	r3, #1
   15f60:	movw	r2, #450	; 0x1c2
   15f64:	movw	r1, #49156	; 0xc004
   15f68:	movt	r1, #1
   15f6c:	movw	r0, #49168	; 0xc010
   15f70:	movt	r0, #1
   15f74:	bl	1143c <__assert_fail@plt>
   15f78:	movw	r3, #48920	; 0xbf18
   15f7c:	movt	r3, #1
   15f80:	mov	r2, #460	; 0x1cc
   15f84:	movw	r1, #49156	; 0xc004
   15f88:	movt	r1, #1
   15f8c:	movw	r0, #49172	; 0xc014
   15f90:	movt	r0, #1
   15f94:	bl	1143c <__assert_fail@plt>
   15f98:	add	r5, r5, #24
   15f9c:	mov	r3, r5
   15fa0:	ldr	r2, [r5, #-20]	; 0xffffffec
   15fa4:	cmp	r2, #0
   15fa8:	bne	15fb8 <__assert_fail@plt+0x4b7c>
   15fac:	ldr	r2, [r5, #-24]	; 0xffffffe8
   15fb0:	cmp	r2, #0
   15fb4:	beq	16008 <__assert_fail@plt+0x4bcc>
   15fb8:	ldr	r2, [r3, #-12]
   15fbc:	tst	r2, #4
   15fc0:	bne	15fd0 <__assert_fail@plt+0x4b94>
   15fc4:	ldr	r2, [sl, #4]
   15fc8:	add	r2, r2, #1
   15fcc:	str	r2, [sl, #4]
   15fd0:	ldr	r2, [r3, #-12]
   15fd4:	tst	r2, #8
   15fd8:	bne	15f98 <__assert_fail@plt+0x4b5c>
   15fdc:	ldr	r7, [r3, #-20]	; 0xffffffec
   15fe0:	sub	r3, r7, #1
   15fe4:	cmp	r3, #254	; 0xfe
   15fe8:	bhi	15f98 <__assert_fail@plt+0x4b5c>
   15fec:	bl	112a4 <__ctype_b_loc@plt>
   15ff0:	ldr	r3, [r0]
   15ff4:	lsl	r7, r7, #1
   15ff8:	ldrh	r3, [r3, r7]
   15ffc:	tst	r3, #16384	; 0x4000
   16000:	addne	r6, r6, #1
   16004:	b	15f98 <__assert_fail@plt+0x4b5c>
   16008:	ldr	r2, [r5, #-8]
   1600c:	cmp	r2, #0
   16010:	bne	15fb8 <__assert_fail@plt+0x4b7c>
   16014:	ldr	r9, [r5, #-4]
   16018:	cmp	r9, #0
   1601c:	bne	15fb8 <__assert_fail@plt+0x4b7c>
   16020:	ldr	r0, [sl, #4]
   16024:	rsb	r0, r0, r0, lsl #3
   16028:	lsl	r0, r0, #2
   1602c:	bl	19a70 <argp_parse@@Base+0x1848>
   16030:	str	r0, [sl]
   16034:	add	r0, r6, #1
   16038:	bl	19a70 <argp_parse@@Base+0x1848>
   1603c:	mov	r5, r0
   16040:	str	r0, [sl, #8]
   16044:	ldr	r7, [sl]
   16048:	cmp	r0, #0
   1604c:	cmpne	r7, #0
   16050:	beq	16078 <__assert_fail@plt+0x4c3c>
   16054:	movw	r3, #37449	; 0x9249
   16058:	movt	r3, #2340	; 0x924
   1605c:	ldr	r2, [sl, #4]
   16060:	cmp	r2, r3
   16064:	bhi	16098 <__assert_fail@plt+0x4c5c>
   16068:	add	r7, r7, #28
   1606c:	str	fp, [sp, #8]
   16070:	ldr	fp, [sp, #12]
   16074:	b	160e4 <__assert_fail@plt+0x4ca8>
   16078:	movw	r3, #48920	; 0xbf18
   1607c:	movt	r3, #1
   16080:	movw	r2, #474	; 0x1da
   16084:	movw	r1, #49156	; 0xc004
   16088:	movt	r1, #1
   1608c:	movw	r0, #49188	; 0xc024
   16090:	movt	r0, #1
   16094:	bl	1143c <__assert_fail@plt>
   16098:	movw	r3, #48920	; 0xbf18
   1609c:	movt	r3, #1
   160a0:	mov	r2, #476	; 0x1dc
   160a4:	movw	r1, #49156	; 0xc004
   160a8:	movt	r1, #1
   160ac:	movw	r0, #49224	; 0xc048
   160b0:	movt	r0, #1
   160b4:	bl	1143c <__assert_fail@plt>
   160b8:	ldr	r3, [r4, #4]
   160bc:	cmp	r3, #0
   160c0:	addeq	r9, r9, #1
   160c4:	b	1612c <__assert_fail@plt+0x4cf0>
   160c8:	ldr	r3, [r4, #16]
   160cc:	cmp	r3, #0
   160d0:	bne	16504 <__assert_fail@plt+0x50c8>
   160d4:	ldr	r3, [r4, #20]
   160d8:	cmp	r3, #0
   160dc:	bne	16504 <__assert_fail@plt+0x50c8>
   160e0:	add	r7, r7, #28
   160e4:	ldr	r3, [r4, #4]
   160e8:	cmp	r3, #0
   160ec:	bne	160fc <__assert_fail@plt+0x4cc0>
   160f0:	ldr	r3, [r4]
   160f4:	cmp	r3, #0
   160f8:	beq	16140 <__assert_fail@plt+0x4d04>
   160fc:	mov	r8, r7
   16100:	str	r4, [r7, #-28]	; 0xffffffe4
   16104:	mov	r3, #0
   16108:	str	r3, [r7, #-24]	; 0xffffffe8
   1610c:	str	r5, [r7, #-20]	; 0xffffffec
   16110:	ldr	r3, [r4, #20]
   16114:	cmp	r3, #0
   16118:	movne	r9, r3
   1611c:	bne	1612c <__assert_fail@plt+0x4cf0>
   16120:	ldr	r3, [r4]
   16124:	cmp	r3, #0
   16128:	beq	160b8 <__assert_fail@plt+0x4c7c>
   1612c:	str	r9, [r8, #-16]
   16130:	ldr	r3, [sp, #4]
   16134:	str	r3, [r8, #-12]
   16138:	str	fp, [r8, #-8]
   1613c:	b	16510 <__assert_fail@plt+0x50d4>
   16140:	ldr	r3, [r4, #16]
   16144:	cmp	r3, #0
   16148:	bne	160fc <__assert_fail@plt+0x4cc0>
   1614c:	ldr	r3, [r4, #20]
   16150:	cmp	r3, #0
   16154:	bne	160fc <__assert_fail@plt+0x4cc0>
   16158:	ldr	fp, [sp, #8]
   1615c:	mov	r3, #0
   16160:	strb	r3, [r5]
   16164:	cmp	fp, #0
   16168:	beq	16588 <__assert_fail@plt+0x514c>
   1616c:	ldr	r3, [fp]
   16170:	cmp	r3, #0
   16174:	beq	16588 <__assert_fail@plt+0x514c>
   16178:	movw	r3, #37449	; 0x9249
   1617c:	movt	r3, #2340	; 0x924
   16180:	str	r3, [sp, #32]
   16184:	b	161f8 <__assert_fail@plt+0x4dbc>
   16188:	ldr	r1, [sp, #4]
   1618c:	b	16270 <__assert_fail@plt+0x4e34>
   16190:	mov	r3, r2
   16194:	ldr	r2, [r3, #24]
   16198:	cmp	r2, #0
   1619c:	bne	16190 <__assert_fail@plt+0x4d54>
   161a0:	add	r3, r3, #24
   161a4:	ldr	r2, [r5, #12]
   161a8:	str	r2, [r3]
   161ac:	mov	r1, #0
   161b0:	str	r1, [r5, #12]
   161b4:	ldr	r3, [r5, #4]
   161b8:	cmp	r3, r1
   161bc:	beq	161e4 <__assert_fail@plt+0x4da8>
   161c0:	ldr	r2, [sl, #4]
   161c4:	cmp	r2, r1
   161c8:	bne	16290 <__assert_fail@plt+0x4e54>
   161cc:	str	r3, [sl, #4]
   161d0:	ldr	r3, [r5]
   161d4:	str	r3, [sl]
   161d8:	ldr	r3, [r5, #8]
   161dc:	str	r3, [sl, #8]
   161e0:	str	r1, [r5, #4]
   161e4:	mov	r0, r5
   161e8:	bl	148cc <__assert_fail@plt+0x3490>
   161ec:	ldr	r3, [fp, #16]!
   161f0:	cmp	r3, #0
   161f4:	beq	16588 <__assert_fail@plt+0x514c>
   161f8:	mov	r5, fp
   161fc:	ldr	r6, [fp, #12]
   16200:	cmp	r6, #0
   16204:	bne	16214 <__assert_fail@plt+0x4dd8>
   16208:	ldr	r3, [fp, #8]
   1620c:	cmp	r3, #0
   16210:	beq	16188 <__assert_fail@plt+0x4d4c>
   16214:	ldr	r7, [r5, #8]
   16218:	ldr	r8, [sp, #12]
   1621c:	ldr	r4, [r8, #16]
   16220:	mov	r0, #28
   16224:	bl	19a70 <argp_parse@@Base+0x1848>
   16228:	subs	r1, r0, #0
   1622c:	beq	16270 <__assert_fail@plt+0x4e34>
   16230:	str	r6, [r1, #8]
   16234:	str	r7, [r1]
   16238:	sub	r4, r5, r4
   1623c:	asr	r4, r4, #4
   16240:	str	r4, [r1, #4]
   16244:	ldr	r3, [sp, #4]
   16248:	str	r3, [r1, #12]
   1624c:	str	r8, [r1, #16]
   16250:	cmp	r3, #0
   16254:	ldrne	r3, [r3, #20]
   16258:	addne	r3, r3, #1
   1625c:	moveq	r3, #0
   16260:	str	r3, [r1, #20]
   16264:	ldr	r3, [sl, #12]
   16268:	str	r3, [r1, #24]
   1626c:	str	r1, [sl, #12]
   16270:	ldr	r0, [r5]
   16274:	bl	15ef4 <__assert_fail@plt+0x4ab8>
   16278:	mov	r5, r0
   1627c:	ldr	r3, [sl, #12]
   16280:	cmp	r3, #0
   16284:	bne	16194 <__assert_fail@plt+0x4d58>
   16288:	add	r3, sl, #12
   1628c:	b	161a4 <__assert_fail@plt+0x4d68>
   16290:	add	r3, r3, r2
   16294:	str	r3, [sp, #24]
   16298:	rsb	r0, r3, r3, lsl #3
   1629c:	lsl	r0, r0, #2
   162a0:	bl	19a70 <argp_parse@@Base+0x1848>
   162a4:	mov	r4, r0
   162a8:	str	r0, [sp, #20]
   162ac:	ldr	r0, [sl, #8]
   162b0:	bl	112d4 <strlen@plt>
   162b4:	mov	r7, r0
   162b8:	ldr	r0, [r5, #8]
   162bc:	bl	112d4 <strlen@plt>
   162c0:	add	r0, r7, r0
   162c4:	add	r0, r0, #1
   162c8:	bl	19a70 <argp_parse@@Base+0x1848>
   162cc:	mov	r9, r0
   162d0:	cmp	r4, #0
   162d4:	cmpne	r0, #0
   162d8:	beq	163a4 <__assert_fail@plt+0x4f68>
   162dc:	ldr	r3, [sp, #24]
   162e0:	ldr	r2, [sp, #32]
   162e4:	cmp	r3, r2
   162e8:	bhi	163c0 <__assert_fail@plt+0x4f84>
   162ec:	ldr	r1, [sl]
   162f0:	str	r1, [sp, #28]
   162f4:	ldr	r4, [sl, #4]
   162f8:	rsb	r8, r4, r4, lsl #3
   162fc:	lsl	r8, r8, #2
   16300:	mov	r2, r8
   16304:	ldr	r0, [sp, #20]
   16308:	bl	11298 <mempcpy@plt>
   1630c:	ldr	r3, [r5, #4]
   16310:	str	r3, [sp, #16]
   16314:	rsb	r2, r3, r3, lsl #3
   16318:	lsl	r2, r2, #2
   1631c:	ldr	r1, [r5]
   16320:	bl	11184 <memcpy@plt>
   16324:	ldr	r6, [sl, #8]
   16328:	mov	r2, r7
   1632c:	mov	r1, r6
   16330:	mov	r0, r9
   16334:	bl	11184 <memcpy@plt>
   16338:	cmp	r4, #0
   1633c:	beq	163dc <__assert_fail@plt+0x4fa0>
   16340:	ldr	r2, [sp, #20]
   16344:	ldr	r3, [r2, #8]
   16348:	sub	r3, r3, r6
   1634c:	add	r3, r9, r3
   16350:	str	r3, [r2, #8]
   16354:	add	r2, r2, #28
   16358:	subs	r4, r4, #1
   1635c:	bne	16344 <__assert_fail@plt+0x4f08>
   16360:	ldr	r3, [sp, #20]
   16364:	add	r4, r3, r8
   16368:	add	r3, r9, r7
   1636c:	str	r3, [sp, #8]
   16370:	ldr	r1, [r5, #8]
   16374:	ldr	r8, [sp, #16]
   16378:	cmp	r8, #0
   1637c:	beq	16480 <__assert_fail@plt+0x5044>
   16380:	add	r4, r4, #28
   16384:	sub	r2, r3, #1
   16388:	str	r2, [sp, #16]
   1638c:	str	r5, [sp, #36]	; 0x24
   16390:	str	fp, [sp, #40]	; 0x28
   16394:	mov	fp, r3
   16398:	str	sl, [sp, #44]	; 0x2c
   1639c:	mov	sl, r1
   163a0:	b	16428 <__assert_fail@plt+0x4fec>
   163a4:	ldr	r3, [pc, #508]	; 165a8 <__assert_fail@plt+0x516c>
   163a8:	movw	r2, #970	; 0x3ca
   163ac:	movw	r1, #49156	; 0xc004
   163b0:	movt	r1, #1
   163b4:	movw	r0, #49284	; 0xc084
   163b8:	movt	r0, #1
   163bc:	bl	1143c <__assert_fail@plt>
   163c0:	ldr	r3, [pc, #480]	; 165a8 <__assert_fail@plt+0x516c>
   163c4:	mov	r2, #972	; 0x3cc
   163c8:	movw	r1, #49156	; 0xc004
   163cc:	movt	r1, #1
   163d0:	movw	r0, #49312	; 0xc0a0
   163d4:	movt	r0, #1
   163d8:	bl	1143c <__assert_fail@plt>
   163dc:	ldr	r4, [sp, #20]
   163e0:	b	16368 <__assert_fail@plt+0x4f2c>
   163e4:	ldr	r2, [sp, #8]
   163e8:	cmp	r9, r2
   163ec:	bcs	16488 <__assert_fail@plt+0x504c>
   163f0:	ldrb	r2, [r9]
   163f4:	cmp	r2, r3
   163f8:	beq	1648c <__assert_fail@plt+0x5050>
   163fc:	mov	r2, r9
   16400:	ldr	r1, [sp, #16]
   16404:	cmp	r1, r2
   16408:	beq	16488 <__assert_fail@plt+0x504c>
   1640c:	ldrb	r1, [r2, #1]!
   16410:	cmp	r1, r3
   16414:	bne	16400 <__assert_fail@plt+0x4fc4>
   16418:	b	1648c <__assert_fail@plt+0x5050>
   1641c:	add	r4, r4, #28
   16420:	subs	r8, r8, #1
   16424:	beq	16440 <__assert_fail@plt+0x5004>
   16428:	str	fp, [r4, #-20]	; 0xffffffec
   1642c:	ldr	r5, [r4, #-24]	; 0xffffffe8
   16430:	ldr	r6, [r4, #-28]	; 0xffffffe4
   16434:	cmp	r5, #0
   16438:	bne	164ac <__assert_fail@plt+0x5070>
   1643c:	b	1641c <__assert_fail@plt+0x4fe0>
   16440:	ldr	r5, [sp, #36]	; 0x24
   16444:	mov	r3, fp
   16448:	ldr	fp, [sp, #40]	; 0x28
   1644c:	ldr	sl, [sp, #44]	; 0x2c
   16450:	mov	r2, #0
   16454:	strb	r2, [r3]
   16458:	ldr	r0, [sp, #28]
   1645c:	bl	18f00 <argp_parse@@Base+0xcd8>
   16460:	ldr	r0, [sl, #8]
   16464:	bl	18f00 <argp_parse@@Base+0xcd8>
   16468:	ldr	r3, [sp, #20]
   1646c:	str	r3, [sl]
   16470:	ldr	r3, [sp, #24]
   16474:	str	r3, [sl, #4]
   16478:	str	r9, [sl, #8]
   1647c:	b	161e4 <__assert_fail@plt+0x4da8>
   16480:	ldr	r3, [sp, #8]
   16484:	b	16450 <__assert_fail@plt+0x5014>
   16488:	strb	r3, [fp], #1
   1648c:	add	sl, sl, #1
   16490:	b	164a0 <__assert_fail@plt+0x5064>
   16494:	ldrb	r3, [sl]
   16498:	cmp	r3, r7
   1649c:	beq	163e4 <__assert_fail@plt+0x4fa8>
   164a0:	add	r6, r6, #24
   164a4:	subs	r5, r5, #1
   164a8:	beq	1641c <__assert_fail@plt+0x4fe0>
   164ac:	ldr	r3, [r6, #12]
   164b0:	tst	r3, #8
   164b4:	bne	164a0 <__assert_fail@plt+0x5064>
   164b8:	ldr	r7, [r6, #4]
   164bc:	sub	r3, r7, #1
   164c0:	cmp	r3, #254	; 0xfe
   164c4:	bhi	164a0 <__assert_fail@plt+0x5064>
   164c8:	bl	112a4 <__ctype_b_loc@plt>
   164cc:	ldr	r2, [r0]
   164d0:	lsl	r3, r7, #1
   164d4:	ldrh	r3, [r2, r3]
   164d8:	tst	r3, #16384	; 0x4000
   164dc:	bne	16494 <__assert_fail@plt+0x5058>
   164e0:	b	164a0 <__assert_fail@plt+0x5064>
   164e4:	strb	r6, [r5], #1
   164e8:	add	r4, r4, #24
   164ec:	ldr	r3, [r4, #4]
   164f0:	cmp	r3, #0
   164f4:	bne	16504 <__assert_fail@plt+0x50c8>
   164f8:	ldr	r3, [r4]
   164fc:	cmp	r3, #0
   16500:	beq	160c8 <__assert_fail@plt+0x4c8c>
   16504:	ldr	r3, [r4, #12]
   16508:	tst	r3, #4
   1650c:	beq	160e0 <__assert_fail@plt+0x4ca4>
   16510:	ldr	r3, [r8, #-24]	; 0xffffffe8
   16514:	add	r3, r3, #1
   16518:	str	r3, [r8, #-24]	; 0xffffffe8
   1651c:	ldr	r3, [r4, #12]
   16520:	tst	r3, #8
   16524:	bne	164e8 <__assert_fail@plt+0x50ac>
   16528:	ldr	r6, [r4, #4]
   1652c:	sub	r3, r6, #1
   16530:	cmp	r3, #254	; 0xfe
   16534:	bhi	164e8 <__assert_fail@plt+0x50ac>
   16538:	bl	112a4 <__ctype_b_loc@plt>
   1653c:	ldr	r2, [r0]
   16540:	lsl	r3, r6, #1
   16544:	ldrh	r3, [r2, r3]
   16548:	tst	r3, #16384	; 0x4000
   1654c:	beq	164e8 <__assert_fail@plt+0x50ac>
   16550:	uxtb	r6, r6
   16554:	ldr	r3, [sl, #8]
   16558:	cmp	r3, r5
   1655c:	bcs	164e4 <__assert_fail@plt+0x50a8>
   16560:	ldrb	r2, [r3]
   16564:	cmp	r2, r6
   16568:	beq	164e8 <__assert_fail@plt+0x50ac>
   1656c:	sub	r2, r5, #1
   16570:	cmp	r3, r2
   16574:	beq	164e4 <__assert_fail@plt+0x50a8>
   16578:	ldrb	r1, [r3, #1]!
   1657c:	cmp	r1, r6
   16580:	bne	16570 <__assert_fail@plt+0x5134>
   16584:	b	164e8 <__assert_fail@plt+0x50ac>
   16588:	mov	r0, sl
   1658c:	add	sp, sp, #52	; 0x34
   16590:	ldrd	r4, [sp]
   16594:	ldrd	r6, [sp, #8]
   16598:	ldrd	r8, [sp, #16]
   1659c:	ldrd	sl, [sp, #24]
   165a0:	add	sp, sp, #32
   165a4:	pop	{pc}		; (ldr pc, [sp], #4)
   165a8:	andeq	fp, r1, r4, lsr #30

000165ac <argp_failure@@Base>:
   165ac:	push	{r3}		; (str r3, [sp, #-4]!)
   165b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   165b4:	strd	r6, [sp, #8]
   165b8:	str	lr, [sp, #16]
   165bc:	sub	sp, sp, #200	; 0xc8
   165c0:	mov	r7, r1
   165c4:	mov	r6, r2
   165c8:	subs	r5, r0, #0
   165cc:	beq	16728 <argp_failure@@Base+0x17c>
   165d0:	ldr	r3, [r5, #16]
   165d4:	tst	r3, #2
   165d8:	bne	1670c <argp_failure@@Base+0x160>
   165dc:	ldr	r4, [r5, #44]	; 0x2c
   165e0:	cmp	r4, #0
   165e4:	beq	1670c <argp_failure@@Base+0x160>
   165e8:	mov	r0, r4
   165ec:	bl	113d0 <flockfile@plt>
   165f0:	ldr	r0, [r5, #40]	; 0x28
   165f4:	mov	r1, r4
   165f8:	bl	110e8 <fputs_unlocked@plt>
   165fc:	ldr	r3, [sp, #220]	; 0xdc
   16600:	cmp	r3, #0
   16604:	beq	16660 <argp_failure@@Base+0xb4>
   16608:	add	r3, sp, #224	; 0xe0
   1660c:	str	r3, [sp]
   16610:	ldr	r3, [r4, #20]
   16614:	ldr	r2, [r4, #24]
   16618:	cmp	r3, r2
   1661c:	addcc	r2, r3, #1
   16620:	strcc	r2, [r4, #20]
   16624:	movcc	r2, #58	; 0x3a
   16628:	strbcc	r2, [r3]
   1662c:	bcs	16754 <argp_failure@@Base+0x1a8>
   16630:	ldr	r3, [r4, #20]
   16634:	ldr	r2, [r4, #24]
   16638:	cmp	r3, r2
   1663c:	addcc	r2, r3, #1
   16640:	strcc	r2, [r4, #20]
   16644:	movcc	r2, #32
   16648:	strbcc	r2, [r3]
   1664c:	bcs	16764 <argp_failure@@Base+0x1b8>
   16650:	ldr	r2, [sp]
   16654:	ldr	r1, [sp, #220]	; 0xdc
   16658:	mov	r0, r4
   1665c:	bl	11394 <vfprintf@plt>
   16660:	cmp	r6, #0
   16664:	beq	166c8 <argp_failure@@Base+0x11c>
   16668:	ldr	r3, [r4, #20]
   1666c:	ldr	r2, [r4, #24]
   16670:	cmp	r3, r2
   16674:	addcc	r2, r3, #1
   16678:	strcc	r2, [r4, #20]
   1667c:	movcc	r2, #58	; 0x3a
   16680:	strbcc	r2, [r3]
   16684:	bcs	16774 <argp_failure@@Base+0x1c8>
   16688:	ldr	r3, [r4, #20]
   1668c:	ldr	r2, [r4, #24]
   16690:	cmp	r3, r2
   16694:	addcc	r2, r3, #1
   16698:	strcc	r2, [r4, #20]
   1669c:	movcc	r2, #32
   166a0:	strbcc	r2, [r3]
   166a4:	bcs	16784 <argp_failure@@Base+0x1d8>
   166a8:	mov	r2, #200	; 0xc8
   166ac:	mov	r1, sp
   166b0:	mov	r0, r6
   166b4:	bl	11310 <strerror_r@plt>
   166b8:	cmp	r0, #0
   166bc:	beq	16794 <argp_failure@@Base+0x1e8>
   166c0:	mov	r1, r4
   166c4:	bl	110e8 <fputs_unlocked@plt>
   166c8:	ldr	r3, [r4, #20]
   166cc:	ldr	r2, [r4, #24]
   166d0:	cmp	r3, r2
   166d4:	addcc	r2, r3, #1
   166d8:	strcc	r2, [r4, #20]
   166dc:	movcc	r2, #10
   166e0:	strbcc	r2, [r3]
   166e4:	bcs	167b0 <argp_failure@@Base+0x204>
   166e8:	mov	r0, r4
   166ec:	bl	11214 <funlockfile@plt>
   166f0:	cmp	r7, #0
   166f4:	beq	1670c <argp_failure@@Base+0x160>
   166f8:	cmp	r5, #0
   166fc:	beq	167c0 <argp_failure@@Base+0x214>
   16700:	ldr	r3, [r5, #16]
   16704:	tst	r3, #32
   16708:	beq	167c0 <argp_failure@@Base+0x214>
   1670c:	add	sp, sp, #200	; 0xc8
   16710:	ldrd	r4, [sp]
   16714:	ldrd	r6, [sp, #8]
   16718:	ldr	lr, [sp, #16]
   1671c:	add	sp, sp, #20
   16720:	add	sp, sp, #4
   16724:	bx	lr
   16728:	movw	r3, #54824	; 0xd628
   1672c:	movt	r3, #2
   16730:	ldr	r4, [r3]
   16734:	cmp	r4, #0
   16738:	beq	1670c <argp_failure@@Base+0x160>
   1673c:	mov	r0, r4
   16740:	bl	113d0 <flockfile@plt>
   16744:	movw	r3, #54816	; 0xd620
   16748:	movt	r3, #2
   1674c:	ldr	r0, [r3]
   16750:	b	165f4 <argp_failure@@Base+0x48>
   16754:	mov	r1, #58	; 0x3a
   16758:	mov	r0, r4
   1675c:	bl	11364 <__overflow@plt>
   16760:	b	16630 <argp_failure@@Base+0x84>
   16764:	mov	r1, #32
   16768:	mov	r0, r4
   1676c:	bl	11364 <__overflow@plt>
   16770:	b	16650 <argp_failure@@Base+0xa4>
   16774:	mov	r1, #58	; 0x3a
   16778:	mov	r0, r4
   1677c:	bl	11364 <__overflow@plt>
   16780:	b	16688 <argp_failure@@Base+0xdc>
   16784:	mov	r1, #32
   16788:	mov	r0, r4
   1678c:	bl	11364 <__overflow@plt>
   16790:	b	166a8 <argp_failure@@Base+0xfc>
   16794:	mov	r0, r6
   16798:	bl	11274 <strerror@plt>
   1679c:	movw	r3, #49364	; 0xc0d4
   167a0:	movt	r3, #1
   167a4:	cmp	r0, #0
   167a8:	moveq	r0, r3
   167ac:	b	166c0 <argp_failure@@Base+0x114>
   167b0:	mov	r1, #10
   167b4:	mov	r0, r4
   167b8:	bl	11364 <__overflow@plt>
   167bc:	b	166e8 <argp_failure@@Base+0x13c>
   167c0:	mov	r0, r7
   167c4:	bl	112bc <exit@plt>
   167c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   167cc:	strd	r6, [sp, #8]
   167d0:	strd	r8, [sp, #16]
   167d4:	strd	sl, [sp, #24]
   167d8:	str	lr, [sp, #32]
   167dc:	add	fp, sp, #32
   167e0:	sub	sp, sp, #124	; 0x7c
   167e4:	str	r0, [fp, #-108]	; 0xffffff94
   167e8:	str	r1, [fp, #-104]	; 0xffffff98
   167ec:	str	r3, [fp, #-100]	; 0xffffff9c
   167f0:	subs	r3, r2, #0
   167f4:	str	r3, [fp, #-132]	; 0xffffff7c
   167f8:	beq	177e0 <argp_failure@@Base+0x1234>
   167fc:	mov	r0, r3
   16800:	bl	113d0 <flockfile@plt>
   16804:	movw	r3, #54752	; 0xd5e0
   16808:	movt	r3, #2
   1680c:	ldr	r9, [r3, #36]	; 0x24
   16810:	cmp	r9, #0
   16814:	beq	168ec <argp_failure@@Base+0x340>
   16818:	movw	r2, #54752	; 0xd5e0
   1681c:	movt	r2, #2
   16820:	mov	r3, #0
   16824:	ldr	r2, [r2, #32]
   16828:	mov	r1, r3
   1682c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16830:	bl	19b08 <argp_parse@@Base+0x18e0>
   16834:	subs	sl, r0, #0
   16838:	beq	16cc8 <argp_failure@@Base+0x71c>
   1683c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16840:	tst	r3, #11
   16844:	moveq	r3, #0
   16848:	streq	r3, [fp, #-128]	; 0xffffff80
   1684c:	bne	16cd4 <argp_failure@@Base+0x728>
   16850:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16854:	tst	r3, #3
   16858:	moveq	r4, #0
   1685c:	bne	16d64 <argp_failure@@Base+0x7b8>
   16860:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16864:	tst	r3, #16
   16868:	bne	16f88 <argp_failure@@Base+0x9dc>
   1686c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16870:	tst	r3, #4
   16874:	bne	16fb0 <argp_failure@@Base+0xa04>
   16878:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1687c:	tst	r3, #8
   16880:	beq	1776c <argp_failure@@Base+0x11c0>
   16884:	ldr	r3, [fp, #-128]	; 0xffffff80
   16888:	ldr	r3, [r3, #4]
   1688c:	cmp	r3, #0
   16890:	beq	1776c <argp_failure@@Base+0x11c0>
   16894:	cmp	r4, #0
   16898:	bne	16fd0 <argp_failure@@Base+0xa24>
   1689c:	mov	r3, #0
   168a0:	str	r3, [fp, #-88]	; 0xffffffa8
   168a4:	str	r3, [fp, #-84]	; 0xffffffac
   168a8:	str	r3, [fp, #-80]	; 0xffffffb0
   168ac:	ldr	r3, [fp, #-128]	; 0xffffff80
   168b0:	ldr	r9, [r3]
   168b4:	ldr	r3, [r3, #4]
   168b8:	str	r3, [fp, #-116]	; 0xffffff8c
   168bc:	cmp	r3, #0
   168c0:	beq	17768 <argp_failure@@Base+0x11bc>
   168c4:	movw	r3, #54752	; 0xd5e0
   168c8:	movt	r3, #2
   168cc:	str	r3, [fp, #-96]	; 0xffffffa0
   168d0:	movw	r3, #49696	; 0xc220
   168d4:	movt	r3, #1
   168d8:	str	r3, [fp, #-140]	; 0xffffff74
   168dc:	movw	r3, #50200	; 0xc418
   168e0:	movt	r3, #1
   168e4:	str	r3, [fp, #-144]	; 0xffffff70
   168e8:	b	175e8 <argp_failure@@Base+0x103c>
   168ec:	movw	r0, #49388	; 0xc0ec
   168f0:	movt	r0, #1
   168f4:	bl	11244 <getenv@plt>
   168f8:	movw	r1, #54752	; 0xd5e0
   168fc:	movt	r1, #2
   16900:	ldrd	r2, [r1]
   16904:	strd	r2, [fp, #-76]	; 0xffffffb4
   16908:	ldrd	r2, [r1, #8]
   1690c:	strd	r2, [fp, #-68]	; 0xffffffbc
   16910:	ldrd	r2, [r1, #16]
   16914:	strd	r2, [fp, #-60]	; 0xffffffc4
   16918:	ldrd	r2, [r1, #24]
   1691c:	strd	r2, [fp, #-52]	; 0xffffffcc
   16920:	ldrd	r2, [r1, #32]
   16924:	strd	r2, [fp, #-44]	; 0xffffffd4
   16928:	subs	r6, r0, #0
   1692c:	beq	16818 <argp_failure@@Base+0x26c>
   16930:	movw	sl, #48920	; 0xbf18
   16934:	movt	sl, #1
   16938:	add	r8, sl, #168	; 0xa8
   1693c:	b	16b98 <argp_failure@@Base+0x5ec>
   16940:	cmp	r0, #45	; 0x2d
   16944:	cmpne	r0, #95	; 0x5f
   16948:	moveq	r3, #1
   1694c:	movne	r3, #0
   16950:	ubfx	r1, r1, #3, #1
   16954:	orrs	r3, r3, r1
   16958:	beq	17944 <argp_failure@@Base+0x1398>
   1695c:	mov	r4, r6
   16960:	ldrb	r3, [r4, #1]!
   16964:	lsl	r1, r3, #1
   16968:	ldrh	r1, [r2, r1]
   1696c:	ubfx	r1, r1, #3, #1
   16970:	cmp	r3, #95	; 0x5f
   16974:	cmpne	r3, #45	; 0x2d
   16978:	moveq	r3, #1
   1697c:	movne	r3, #0
   16980:	orrs	r3, r1, r3
   16984:	bne	16960 <argp_failure@@Base+0x3b4>
   16988:	sub	r7, r4, r6
   1698c:	ldrb	r3, [r4]
   16990:	lsl	r1, r3, #1
   16994:	ldrh	r1, [r2, r1]
   16998:	tst	r1, #8192	; 0x2000
   1699c:	beq	169b4 <argp_failure@@Base+0x408>
   169a0:	ldrb	r3, [r4, #1]!
   169a4:	lsl	r1, r3, #1
   169a8:	ldrh	r1, [r2, r1]
   169ac:	tst	r1, #8192	; 0x2000
   169b0:	bne	169a0 <argp_failure@@Base+0x3f4>
   169b4:	cmp	r3, #44	; 0x2c
   169b8:	cmpne	r3, #0
   169bc:	beq	16a20 <argp_failure@@Base+0x474>
   169c0:	cmp	r3, #61	; 0x3d
   169c4:	beq	169ec <argp_failure@@Base+0x440>
   169c8:	ldrb	r3, [r4]
   169cc:	lsl	r3, r3, #1
   169d0:	ldrh	r3, [r2, r3]
   169d4:	tst	r3, #2048	; 0x800
   169d8:	streq	r9, [fp, #-96]	; 0xffffffa0
   169dc:	streq	r9, [fp, #-112]	; 0xffffff90
   169e0:	bne	16a84 <argp_failure@@Base+0x4d8>
   169e4:	add	r5, sl, #24
   169e8:	b	16b2c <argp_failure@@Base+0x580>
   169ec:	add	r1, r4, #1
   169f0:	ldrb	r3, [r4, #1]
   169f4:	lsl	r3, r3, #1
   169f8:	ldrh	r3, [r2, r3]
   169fc:	tst	r3, #8192	; 0x2000
   16a00:	beq	16a7c <argp_failure@@Base+0x4d0>
   16a04:	ldrb	r3, [r1, #1]!
   16a08:	lsl	r3, r3, #1
   16a0c:	ldrh	r3, [r2, r3]
   16a10:	tst	r3, #8192	; 0x2000
   16a14:	bne	16a04 <argp_failure@@Base+0x458>
   16a18:	mov	r4, r1
   16a1c:	b	169c8 <argp_failure@@Base+0x41c>
   16a20:	cmp	r0, #110	; 0x6e
   16a24:	movne	r3, #1
   16a28:	strne	r3, [fp, #-96]	; 0xffffffa0
   16a2c:	strne	r3, [fp, #-112]	; 0xffffff90
   16a30:	bne	169e4 <argp_failure@@Base+0x438>
   16a34:	ldrb	r3, [r6, #1]
   16a38:	cmp	r3, #111	; 0x6f
   16a3c:	movne	r3, #1
   16a40:	strne	r3, [fp, #-96]	; 0xffffffa0
   16a44:	strne	r3, [fp, #-112]	; 0xffffff90
   16a48:	bne	169e4 <argp_failure@@Base+0x438>
   16a4c:	ldrb	r3, [r6, #2]
   16a50:	cmp	r3, #45	; 0x2d
   16a54:	movne	r3, #1
   16a58:	strne	r3, [fp, #-96]	; 0xffffffa0
   16a5c:	strne	r3, [fp, #-112]	; 0xffffff90
   16a60:	bne	169e4 <argp_failure@@Base+0x438>
   16a64:	add	r6, r6, #3
   16a68:	sub	r7, r7, #3
   16a6c:	str	r9, [fp, #-112]	; 0xffffff90
   16a70:	mov	r3, #1
   16a74:	str	r3, [fp, #-96]	; 0xffffffa0
   16a78:	b	169e4 <argp_failure@@Base+0x438>
   16a7c:	mov	r4, r1
   16a80:	b	169c8 <argp_failure@@Base+0x41c>
   16a84:	mov	r2, #10
   16a88:	mov	r1, #0
   16a8c:	mov	r0, r4
   16a90:	bl	11100 <strtol@plt>
   16a94:	str	r0, [fp, #-112]	; 0xffffff90
   16a98:	ldr	r2, [r5]
   16a9c:	ldrb	r3, [r4]
   16aa0:	lsl	r3, r3, #1
   16aa4:	ldrh	r3, [r2, r3]
   16aa8:	tst	r3, #2048	; 0x800
   16aac:	beq	16ac4 <argp_failure@@Base+0x518>
   16ab0:	ldrb	r3, [r4, #1]!
   16ab4:	lsl	r3, r3, #1
   16ab8:	ldrh	r3, [r2, r3]
   16abc:	tst	r3, #2048	; 0x800
   16ac0:	bne	16ab0 <argp_failure@@Base+0x504>
   16ac4:	ldrb	r3, [r4]
   16ac8:	lsl	r3, r3, #1
   16acc:	ldrh	r3, [r2, r3]
   16ad0:	tst	r3, #8192	; 0x2000
   16ad4:	beq	16af4 <argp_failure@@Base+0x548>
   16ad8:	ldrb	r3, [r4, #1]!
   16adc:	lsl	r3, r3, #1
   16ae0:	ldrh	r3, [r2, r3]
   16ae4:	tst	r3, #8192	; 0x2000
   16ae8:	bne	16ad8 <argp_failure@@Base+0x52c>
   16aec:	str	r9, [fp, #-96]	; 0xffffffa0
   16af0:	b	169e4 <argp_failure@@Base+0x438>
   16af4:	str	r9, [fp, #-96]	; 0xffffffa0
   16af8:	b	169e4 <argp_failure@@Base+0x438>
   16afc:	str	r6, [sp, #4]
   16b00:	str	r7, [sp]
   16b04:	movw	r3, #49404	; 0xc0fc
   16b08:	movt	r3, #1
   16b0c:	mov	r2, #0
   16b10:	mov	r1, r2
   16b14:	ldr	r0, [fp, #-104]	; 0xffffff98
   16b18:	bl	165ac <argp_failure@@Base>
   16b1c:	b	16b80 <argp_failure@@Base+0x5d4>
   16b20:	add	r5, r5, #16
   16b24:	cmp	r5, r8
   16b28:	beq	16c68 <argp_failure@@Base+0x6bc>
   16b2c:	mov	r0, r5
   16b30:	bl	112d4 <strlen@plt>
   16b34:	cmp	r0, r7
   16b38:	bne	16b20 <argp_failure@@Base+0x574>
   16b3c:	mov	r2, r7
   16b40:	mov	r1, r5
   16b44:	mov	r0, r6
   16b48:	bl	11418 <strncmp@plt>
   16b4c:	cmp	r0, #0
   16b50:	bne	16b20 <argp_failure@@Base+0x574>
   16b54:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16b58:	cmp	r3, #0
   16b5c:	beq	16b6c <argp_failure@@Base+0x5c0>
   16b60:	ldrb	r3, [r5, #14]
   16b64:	cmp	r3, #0
   16b68:	beq	16afc <argp_failure@@Base+0x550>
   16b6c:	ldrb	r3, [r5, #15]
   16b70:	sub	r2, fp, #36	; 0x24
   16b74:	add	r3, r2, r3
   16b78:	ldr	r2, [fp, #-112]	; 0xffffff90
   16b7c:	str	r2, [r3, #-40]	; 0xffffffd8
   16b80:	cmp	r5, r8
   16b84:	beq	16c68 <argp_failure@@Base+0x6bc>
   16b88:	ldrb	r3, [r4]
   16b8c:	cmp	r3, #44	; 0x2c
   16b90:	addeq	r6, r4, #1
   16b94:	movne	r6, r4
   16b98:	ldrb	r3, [r6]
   16b9c:	cmp	r3, #0
   16ba0:	beq	16bf8 <argp_failure@@Base+0x64c>
   16ba4:	bl	112a4 <__ctype_b_loc@plt>
   16ba8:	mov	r5, r0
   16bac:	ldr	r2, [r0]
   16bb0:	mov	r3, r6
   16bb4:	mov	r6, r3
   16bb8:	ldrb	r0, [r3], #1
   16bbc:	lsl	r1, r0, #1
   16bc0:	ldrh	r1, [r2, r1]
   16bc4:	tst	r1, #8192	; 0x2000
   16bc8:	bne	16bb4 <argp_failure@@Base+0x608>
   16bcc:	tst	r1, #1024	; 0x400
   16bd0:	bne	16940 <argp_failure@@Base+0x394>
   16bd4:	cmp	r0, #0
   16bd8:	beq	16b98 <argp_failure@@Base+0x5ec>
   16bdc:	str	r6, [sp]
   16be0:	movw	r3, #49492	; 0xc154
   16be4:	movt	r3, #1
   16be8:	mov	r2, #0
   16bec:	mov	r1, r2
   16bf0:	ldr	r0, [fp, #-104]	; 0xffffff98
   16bf4:	bl	165ac <argp_failure@@Base>
   16bf8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16bfc:	ldr	r3, [pc, #3488]	; 179a4 <argp_failure@@Base+0x13f8>
   16c00:	add	r1, r3, #144	; 0x90
   16c04:	add	r3, r3, #16
   16c08:	cmp	r3, r1
   16c0c:	beq	16c8c <argp_failure@@Base+0x6e0>
   16c10:	ldrb	r2, [r3, #14]
   16c14:	cmp	r2, #0
   16c18:	bne	16c04 <argp_failure@@Base+0x658>
   16c1c:	ldrb	r2, [r3, #15]
   16c20:	cmp	r2, #32
   16c24:	beq	16c04 <argp_failure@@Base+0x658>
   16c28:	sub	ip, fp, #36	; 0x24
   16c2c:	add	r2, ip, r2
   16c30:	ldr	r2, [r2, #-40]	; 0xffffffd8
   16c34:	cmp	r2, r0
   16c38:	blt	16c04 <argp_failure@@Base+0x658>
   16c3c:	str	r3, [sp, #4]
   16c40:	movw	r3, #49576	; 0xc1a8
   16c44:	movt	r3, #1
   16c48:	str	r3, [sp]
   16c4c:	movw	r3, #49524	; 0xc174
   16c50:	movt	r3, #1
   16c54:	mov	r2, #0
   16c58:	mov	r1, r2
   16c5c:	ldr	r0, [fp, #-104]	; 0xffffff98
   16c60:	bl	165ac <argp_failure@@Base>
   16c64:	b	16818 <argp_failure@@Base+0x26c>
   16c68:	str	r6, [sp, #4]
   16c6c:	str	r7, [sp]
   16c70:	movw	r3, #49452	; 0xc12c
   16c74:	movt	r3, #1
   16c78:	mov	r2, #0
   16c7c:	mov	r1, r2
   16c80:	ldr	r0, [fp, #-104]	; 0xffffff98
   16c84:	bl	165ac <argp_failure@@Base>
   16c88:	b	16b88 <argp_failure@@Base+0x5dc>
   16c8c:	movw	r1, #54752	; 0xd5e0
   16c90:	movt	r1, #2
   16c94:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   16c98:	strd	r2, [r1]
   16c9c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   16ca0:	strd	r2, [r1, #8]
   16ca4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   16ca8:	strd	r2, [r1, #16]
   16cac:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   16cb0:	strd	r2, [r1, #24]
   16cb4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16cb8:	strd	r2, [r1, #32]
   16cbc:	mov	r3, #1
   16cc0:	str	r3, [r1, #36]	; 0x24
   16cc4:	b	16818 <argp_failure@@Base+0x26c>
   16cc8:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16ccc:	bl	11214 <funlockfile@plt>
   16cd0:	b	177e0 <argp_failure@@Base+0x1234>
   16cd4:	mov	r1, #0
   16cd8:	ldr	r0, [fp, #-108]	; 0xffffff94
   16cdc:	bl	15ef4 <__assert_fail@plt+0x4ab8>
   16ce0:	str	r0, [fp, #-128]	; 0xffffff80
   16ce4:	movw	r1, #49584	; 0xc1b0
   16ce8:	movt	r1, #1
   16cec:	bl	14934 <__assert_fail@plt+0x34f8>
   16cf0:	cmp	r0, #0
   16cf4:	mvnne	r3, #0
   16cf8:	strne	r3, [r0, #12]
   16cfc:	movw	r1, #49592	; 0xc1b8
   16d00:	movt	r1, #1
   16d04:	ldr	r0, [fp, #-128]	; 0xffffff80
   16d08:	bl	14934 <__assert_fail@plt+0x34f8>
   16d0c:	cmp	r0, #0
   16d10:	mvnne	r3, #0
   16d14:	strne	r3, [r0, #12]
   16d18:	ldr	r0, [fp, #-128]	; 0xffffff80
   16d1c:	ldr	r3, [r0, #4]
   16d20:	cmp	r3, #0
   16d24:	beq	16850 <argp_failure@@Base+0x2a4>
   16d28:	ldr	r2, [r0]
   16d2c:	mov	r3, #0
   16d30:	str	r3, [r2, #24]
   16d34:	add	r3, r3, #1
   16d38:	add	r2, r2, #28
   16d3c:	ldr	r1, [r0, #4]
   16d40:	cmp	r3, r1
   16d44:	bcc	16d30 <argp_failure@@Base+0x784>
   16d48:	movw	r3, #23524	; 0x5be4
   16d4c:	movt	r3, #1
   16d50:	mov	r2, #28
   16d54:	ldr	r0, [fp, #-128]	; 0xffffff80
   16d58:	ldr	r0, [r0]
   16d5c:	bl	113e8 <qsort@plt>
   16d60:	b	16850 <argp_failure@@Base+0x2a4>
   16d64:	ldr	r0, [fp, #-108]	; 0xffffff94
   16d68:	bl	149e8 <__assert_fail@plt+0x35ac>
   16d6c:	mov	r2, r0
   16d70:	add	r3, r0, #7
   16d74:	bic	r3, r3, #7
   16d78:	sub	sp, sp, r3
   16d7c:	add	r9, sp, #8
   16d80:	mov	r1, #0
   16d84:	mov	r0, r9
   16d88:	bl	11328 <memset@plt>
   16d8c:	mov	r5, #1
   16d90:	movw	r4, #54752	; 0xd5e0
   16d94:	movt	r4, #2
   16d98:	movw	r3, #49616	; 0xc1d0
   16d9c:	movt	r3, #1
   16da0:	str	r3, [fp, #-116]	; 0xffffff8c
   16da4:	movw	r8, #49608	; 0xc1c8
   16da8:	movt	r8, #1
   16dac:	str	r9, [fp, #-96]	; 0xffffffa0
   16db0:	ldr	r9, [fp, #-128]	; 0xffffff80
   16db4:	str	r8, [fp, #-112]	; 0xffffff90
   16db8:	ldr	r8, [fp, #-100]	; 0xffffff9c
   16dbc:	b	16e6c <argp_failure@@Base+0x8c0>
   16dc0:	mov	r0, sl
   16dc4:	bl	19ba0 <argp_parse@@Base+0x1978>
   16dc8:	b	16e88 <argp_failure@@Base+0x8dc>
   16dcc:	mov	r0, sl
   16dd0:	bl	19ba0 <argp_parse@@Base+0x1978>
   16dd4:	b	16ed4 <argp_failure@@Base+0x928>
   16dd8:	mov	r1, sl
   16ddc:	mov	r0, r9
   16de0:	bl	14bbc <__assert_fail@plt+0x3780>
   16de4:	orr	r8, r8, #2
   16de8:	str	sl, [sp]
   16dec:	mov	r3, #1
   16df0:	sub	r2, fp, #76	; 0x4c
   16df4:	ldr	r1, [fp, #-104]	; 0xffffff98
   16df8:	ldr	r0, [fp, #-108]	; 0xffffff94
   16dfc:	bl	15028 <__assert_fail@plt+0x3bec>
   16e00:	mov	r6, r0
   16e04:	ldr	r3, [sl, #28]
   16e08:	ldr	r2, [sl, #24]
   16e0c:	sub	r3, r3, r2
   16e10:	ldr	r2, [sl, #16]
   16e14:	cmp	r3, r2
   16e18:	bhi	16f4c <argp_failure@@Base+0x9a0>
   16e1c:	str	r7, [sl, #12]
   16e20:	ldr	r3, [sl, #28]
   16e24:	ldr	r2, [sl, #24]
   16e28:	sub	r3, r3, r2
   16e2c:	ldr	r2, [sl, #16]
   16e30:	cmp	r3, r2
   16e34:	bhi	16f58 <argp_failure@@Base+0x9ac>
   16e38:	str	r5, [sl, #4]
   16e3c:	ldr	r2, [sl, #28]
   16e40:	ldr	r3, [sl, #32]
   16e44:	cmp	r2, r3
   16e48:	bcs	16f64 <argp_failure@@Base+0x9b8>
   16e4c:	ldr	r3, [sl, #28]
   16e50:	add	r2, r3, #1
   16e54:	str	r2, [sl, #28]
   16e58:	mov	r2, #10
   16e5c:	strb	r2, [r3]
   16e60:	mov	r5, #0
   16e64:	cmp	r6, r5
   16e68:	beq	16f7c <argp_failure@@Base+0x9d0>
   16e6c:	ldr	r6, [r4, #28]
   16e70:	ldr	r3, [sl, #28]
   16e74:	ldr	r2, [sl, #24]
   16e78:	sub	r3, r3, r2
   16e7c:	ldr	r2, [sl, #16]
   16e80:	cmp	r3, r2
   16e84:	bhi	16dc0 <argp_failure@@Base+0x814>
   16e88:	ldr	r7, [sl, #12]
   16e8c:	str	r6, [sl, #12]
   16e90:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16e94:	str	r3, [fp, #-76]	; 0xffffffb4
   16e98:	cmp	r5, #0
   16e9c:	ldr	r3, [fp, #4]
   16ea0:	movwne	r2, #49600	; 0xc1c0
   16ea4:	movtne	r2, #1
   16ea8:	ldreq	r2, [fp, #-116]	; 0xffffff8c
   16eac:	ldr	r1, [fp, #-112]	; 0xffffff90
   16eb0:	mov	r0, sl
   16eb4:	bl	1a218 <argp_parse@@Base+0x1ff0>
   16eb8:	ldr	r6, [r4, #28]
   16ebc:	ldr	r3, [sl, #28]
   16ec0:	ldr	r2, [sl, #24]
   16ec4:	sub	r3, r3, r2
   16ec8:	ldr	r2, [sl, #16]
   16ecc:	cmp	r3, r2
   16ed0:	bhi	16dcc <argp_failure@@Base+0x820>
   16ed4:	ldr	r5, [sl, #4]
   16ed8:	str	r6, [sl, #4]
   16edc:	tst	r8, #2
   16ee0:	beq	16dd8 <argp_failure@@Base+0x82c>
   16ee4:	ldr	r3, [r9, #4]
   16ee8:	cmp	r3, #0
   16eec:	beq	16de8 <argp_failure@@Base+0x83c>
   16ef0:	ldr	r3, [sl, #28]
   16ef4:	add	r3, r3, #12
   16ef8:	ldr	r2, [sl, #32]
   16efc:	cmp	r2, r3
   16f00:	bcs	16f18 <argp_failure@@Base+0x96c>
   16f04:	mov	r1, #12
   16f08:	mov	r0, sl
   16f0c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   16f10:	cmp	r0, #0
   16f14:	beq	16de8 <argp_failure@@Base+0x83c>
   16f18:	ldr	r2, [sl, #28]
   16f1c:	movw	r3, #49624	; 0xc1d8
   16f20:	movt	r3, #1
   16f24:	ldr	r0, [r3]
   16f28:	ldr	r1, [r3, #4]
   16f2c:	str	r0, [r2]
   16f30:	str	r1, [r2, #4]
   16f34:	ldr	r3, [r3, #8]
   16f38:	str	r3, [r2, #8]
   16f3c:	ldr	r3, [sl, #28]
   16f40:	add	r3, r3, #12
   16f44:	str	r3, [sl, #28]
   16f48:	b	16de8 <argp_failure@@Base+0x83c>
   16f4c:	mov	r0, sl
   16f50:	bl	19ba0 <argp_parse@@Base+0x1978>
   16f54:	b	16e1c <argp_failure@@Base+0x870>
   16f58:	mov	r0, sl
   16f5c:	bl	19ba0 <argp_parse@@Base+0x1978>
   16f60:	b	16e38 <argp_failure@@Base+0x88c>
   16f64:	mov	r1, #1
   16f68:	mov	r0, sl
   16f6c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   16f70:	cmp	r0, #0
   16f74:	bne	16e4c <argp_failure@@Base+0x8a0>
   16f78:	b	16e60 <argp_failure@@Base+0x8b4>
   16f7c:	str	r8, [fp, #-100]	; 0xffffff9c
   16f80:	mov	r4, #1
   16f84:	b	16860 <argp_failure@@Base+0x2b4>
   16f88:	str	sl, [sp, #4]
   16f8c:	mov	r3, #1
   16f90:	str	r3, [sp]
   16f94:	mov	r3, #0
   16f98:	mov	r2, r3
   16f9c:	ldr	r1, [fp, #-104]	; 0xffffff98
   16fa0:	ldr	r0, [fp, #-108]	; 0xffffff94
   16fa4:	bl	155d8 <__assert_fail@plt+0x419c>
   16fa8:	orr	r4, r4, r0
   16fac:	b	1686c <argp_failure@@Base+0x2c0>
   16fb0:	ldr	r3, [fp, #4]
   16fb4:	mov	r2, r3
   16fb8:	movw	r1, #49640	; 0xc1e8
   16fbc:	movt	r1, #1
   16fc0:	mov	r0, sl
   16fc4:	bl	1a218 <argp_parse@@Base+0x1ff0>
   16fc8:	mov	r4, #1
   16fcc:	b	16878 <argp_failure@@Base+0x2cc>
   16fd0:	ldr	r2, [sl, #28]
   16fd4:	ldr	r3, [sl, #32]
   16fd8:	cmp	r2, r3
   16fdc:	bcs	16ff8 <argp_failure@@Base+0xa4c>
   16fe0:	ldr	r3, [sl, #28]
   16fe4:	add	r2, r3, #1
   16fe8:	str	r2, [sl, #28]
   16fec:	mov	r2, #10
   16ff0:	strb	r2, [r3]
   16ff4:	b	1689c <argp_failure@@Base+0x2f0>
   16ff8:	mov	r1, #1
   16ffc:	mov	r0, sl
   17000:	bl	1a118 <argp_parse@@Base+0x1ef0>
   17004:	cmp	r0, #0
   17008:	bne	16fe0 <argp_failure@@Base+0xa34>
   1700c:	b	1689c <argp_failure@@Base+0x2f0>
   17010:	mov	r0, sl
   17014:	bl	19ba0 <argp_parse@@Base+0x1978>
   17018:	b	17608 <argp_failure@@Base+0x105c>
   1701c:	add	r3, r3, #24
   17020:	subs	r2, r2, #1
   17024:	beq	17048 <argp_failure@@Base+0xa9c>
   17028:	ldr	r1, [r3, #-24]	; 0xffffffe8
   1702c:	cmp	r1, #0
   17030:	beq	1701c <argp_failure@@Base+0xa70>
   17034:	ldr	r1, [r3, #-12]
   17038:	tst	r1, #2
   1703c:	bne	1701c <argp_failure@@Base+0xa70>
   17040:	mov	r3, #1
   17044:	str	r3, [fp, #-112]	; 0xffffff90
   17048:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1704c:	ldr	r5, [r3, #8]
   17050:	ldr	r3, [sl, #28]
   17054:	ldr	r2, [sl, #24]
   17058:	sub	r3, r3, r2
   1705c:	ldr	r2, [sl, #16]
   17060:	cmp	r3, r2
   17064:	bhi	17084 <argp_failure@@Base+0xad8>
   17068:	str	r5, [sl, #12]
   1706c:	ldr	r6, [r9, #4]
   17070:	cmp	r6, #0
   17074:	beq	17184 <argp_failure@@Base+0xbd8>
   17078:	mov	r5, r4
   1707c:	str	r9, [fp, #-136]	; 0xffffff78
   17080:	b	1796c <argp_failure@@Base+0x13c0>
   17084:	mov	r0, sl
   17088:	bl	19ba0 <argp_parse@@Base+0x1978>
   1708c:	b	17068 <argp_failure@@Base+0xabc>
   17090:	tst	r9, #2
   17094:	beq	170a0 <argp_failure@@Base+0xaf4>
   17098:	add	r8, r8, #1
   1709c:	b	17960 <argp_failure@@Base+0x13b4>
   170a0:	sub	r1, fp, #76	; 0x4c
   170a4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   170a8:	ldr	r0, [r3, #8]
   170ac:	bl	15434 <__assert_fail@plt+0x3ff8>
   170b0:	ldr	r2, [sl, #28]
   170b4:	ldr	r3, [sl, #32]
   170b8:	cmp	r2, r3
   170bc:	bcs	1713c <argp_failure@@Base+0xb90>
   170c0:	ldr	r3, [sl, #28]
   170c4:	add	r2, r3, #1
   170c8:	str	r2, [sl, #28]
   170cc:	mov	r2, #45	; 0x2d
   170d0:	strb	r2, [r3]
   170d4:	ldrb	r7, [r8]
   170d8:	ldr	r2, [sl, #28]
   170dc:	ldr	r3, [sl, #32]
   170e0:	cmp	r2, r3
   170e4:	bcs	17154 <argp_failure@@Base+0xba8>
   170e8:	ldr	r3, [sl, #28]
   170ec:	add	r2, r3, #1
   170f0:	str	r2, [sl, #28]
   170f4:	strb	r7, [r3]
   170f8:	ldr	r3, [fp, #-112]	; 0xffffff90
   170fc:	cmp	r3, #0
   17100:	beq	17114 <argp_failure@@Base+0xb68>
   17104:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17108:	ldr	r3, [r3]
   1710c:	cmp	r3, #0
   17110:	beq	1716c <argp_failure@@Base+0xbc0>
   17114:	ldr	r2, [r4, #8]
   17118:	cmp	r2, #0
   1711c:	beq	17098 <argp_failure@@Base+0xaec>
   17120:	ldr	r3, [r4, #12]
   17124:	tst	r3, #1
   17128:	ldrne	r1, [fp, #-140]	; 0xffffff74
   1712c:	ldreq	r1, [fp, #-144]	; 0xffffff70
   17130:	mov	r0, sl
   17134:	bl	1a218 <argp_parse@@Base+0x1ff0>
   17138:	b	17098 <argp_failure@@Base+0xaec>
   1713c:	mov	r1, #1
   17140:	mov	r0, sl
   17144:	bl	1a118 <argp_parse@@Base+0x1ef0>
   17148:	cmp	r0, #0
   1714c:	bne	170c0 <argp_failure@@Base+0xb14>
   17150:	b	170d4 <argp_failure@@Base+0xb28>
   17154:	mov	r1, #1
   17158:	mov	r0, sl
   1715c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   17160:	cmp	r0, #0
   17164:	bne	170e8 <argp_failure@@Base+0xb3c>
   17168:	b	170f8 <argp_failure@@Base+0xb4c>
   1716c:	ldr	r3, [r4, #8]
   17170:	cmp	r3, #0
   17174:	movne	r3, #1
   17178:	strne	r3, [fp, #-80]	; 0xffffffb0
   1717c:	b	17098 <argp_failure@@Base+0xaec>
   17180:	ldr	r9, [fp, #-136]	; 0xffffff78
   17184:	ldr	r3, [r4, #12]
   17188:	tst	r3, #8
   1718c:	beq	17264 <argp_failure@@Base+0xcb8>
   17190:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17194:	ldr	r5, [r3, #16]
   17198:	ldr	r3, [sl, #28]
   1719c:	ldr	r2, [sl, #24]
   171a0:	sub	r3, r3, r2
   171a4:	ldr	r2, [sl, #16]
   171a8:	cmp	r3, r2
   171ac:	bhi	171c8 <argp_failure@@Base+0xc1c>
   171b0:	str	r5, [sl, #12]
   171b4:	ldr	r6, [r9, #4]
   171b8:	cmp	r6, #0
   171bc:	beq	1732c <argp_failure@@Base+0xd80>
   171c0:	add	r5, r4, #24
   171c4:	b	171fc <argp_failure@@Base+0xc50>
   171c8:	mov	r0, sl
   171cc:	bl	19ba0 <argp_parse@@Base+0x1978>
   171d0:	b	171b0 <argp_failure@@Base+0xc04>
   171d4:	mov	r2, r8
   171d8:	mov	r1, r7
   171dc:	ldr	r0, [sl, #28]
   171e0:	bl	11184 <memcpy@plt>
   171e4:	ldr	r3, [sl, #28]
   171e8:	add	r8, r3, r8
   171ec:	str	r8, [sl, #28]
   171f0:	add	r5, r5, #24
   171f4:	subs	r6, r6, #1
   171f8:	beq	1732c <argp_failure@@Base+0xd80>
   171fc:	ldr	r3, [r5, #-24]	; 0xffffffe8
   17200:	cmp	r3, #0
   17204:	beq	171f0 <argp_failure@@Base+0xc44>
   17208:	ldr	r3, [r5, #-12]
   1720c:	tst	r3, #2
   17210:	bne	171f0 <argp_failure@@Base+0xc44>
   17214:	sub	r1, fp, #76	; 0x4c
   17218:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1721c:	ldr	r0, [r3, #16]
   17220:	bl	15434 <__assert_fail@plt+0x3ff8>
   17224:	ldr	r7, [r5, #-24]	; 0xffffffe8
   17228:	mov	r0, r7
   1722c:	bl	112d4 <strlen@plt>
   17230:	subs	r8, r0, #0
   17234:	beq	171f0 <argp_failure@@Base+0xc44>
   17238:	ldr	r3, [sl, #28]
   1723c:	add	r3, r3, r8
   17240:	ldr	r2, [sl, #32]
   17244:	cmp	r2, r3
   17248:	bcs	171d4 <argp_failure@@Base+0xc28>
   1724c:	mov	r1, r8
   17250:	mov	r0, sl
   17254:	bl	1a118 <argp_parse@@Base+0x1ef0>
   17258:	cmp	r0, #0
   1725c:	beq	171f0 <argp_failure@@Base+0xc44>
   17260:	b	171d4 <argp_failure@@Base+0xc28>
   17264:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17268:	ldr	r5, [r3, #12]
   1726c:	ldr	r3, [sl, #28]
   17270:	ldr	r2, [sl, #24]
   17274:	sub	r3, r3, r2
   17278:	ldr	r2, [sl, #16]
   1727c:	cmp	r3, r2
   17280:	bhi	172b0 <argp_failure@@Base+0xd04>
   17284:	str	r5, [sl, #12]
   17288:	ldr	r6, [r9, #4]
   1728c:	cmp	r6, #0
   17290:	beq	1732c <argp_failure@@Base+0xd80>
   17294:	add	r5, r4, #24
   17298:	movw	r8, #49704	; 0xc228
   1729c:	movt	r8, #1
   172a0:	movw	r7, #49720	; 0xc238
   172a4:	movt	r7, #1
   172a8:	str	r7, [fp, #-112]	; 0xffffff90
   172ac:	b	172c8 <argp_failure@@Base+0xd1c>
   172b0:	mov	r0, sl
   172b4:	bl	19ba0 <argp_parse@@Base+0x1978>
   172b8:	b	17284 <argp_failure@@Base+0xcd8>
   172bc:	add	r5, r5, #24
   172c0:	subs	r6, r6, #1
   172c4:	beq	1732c <argp_failure@@Base+0xd80>
   172c8:	ldr	r3, [r5, #-24]	; 0xffffffe8
   172cc:	cmp	r3, #0
   172d0:	beq	172bc <argp_failure@@Base+0xd10>
   172d4:	ldr	r3, [r5, #-12]
   172d8:	tst	r3, #2
   172dc:	bne	172bc <argp_failure@@Base+0xd10>
   172e0:	sub	r1, fp, #76	; 0x4c
   172e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   172e8:	ldr	r0, [r3, #12]
   172ec:	bl	15434 <__assert_fail@plt+0x3ff8>
   172f0:	ldr	r2, [r5, #-24]	; 0xffffffe8
   172f4:	mov	r1, r8
   172f8:	mov	r0, sl
   172fc:	bl	1a218 <argp_parse@@Base+0x1ff0>
   17300:	ldr	r2, [r4, #8]
   17304:	cmp	r2, #0
   17308:	beq	172bc <argp_failure@@Base+0xd10>
   1730c:	ldr	r3, [r4, #12]
   17310:	tst	r3, #1
   17314:	movwne	r1, #49712	; 0xc230
   17318:	movtne	r1, #1
   1731c:	ldreq	r1, [fp, #-112]	; 0xffffff90
   17320:	mov	r0, sl
   17324:	bl	1a218 <argp_parse@@Base+0x1ff0>
   17328:	b	172bc <argp_failure@@Base+0xd10>
   1732c:	ldr	r3, [sl, #28]
   17330:	ldr	r2, [sl, #24]
   17334:	sub	r3, r3, r2
   17338:	ldr	r2, [sl, #16]
   1733c:	cmp	r3, r2
   17340:	bhi	173ac <argp_failure@@Base+0xe00>
   17344:	mov	r3, #0
   17348:	str	r3, [sl, #4]
   1734c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17350:	cmp	r3, #0
   17354:	beq	173b8 <argp_failure@@Base+0xe0c>
   17358:	ldr	r3, [r4, #12]
   1735c:	tst	r3, #8
   17360:	bne	1738c <argp_failure@@Base+0xde0>
   17364:	ldr	r5, [r4, #4]
   17368:	sub	r3, r5, #1
   1736c:	cmp	r3, #254	; 0xfe
   17370:	bhi	1738c <argp_failure@@Base+0xde0>
   17374:	bl	112a4 <__ctype_b_loc@plt>
   17378:	ldr	r3, [r0]
   1737c:	lsl	r5, r5, #1
   17380:	ldrh	r3, [r3, r5]
   17384:	tst	r3, #16384	; 0x4000
   17388:	bne	17594 <argp_failure@@Base+0xfe8>
   1738c:	ldr	r3, [r4]
   17390:	cmp	r3, #0
   17394:	bne	17594 <argp_failure@@Base+0xfe8>
   17398:	sub	r2, fp, #76	; 0x4c
   1739c:	ldr	r1, [r9, #20]
   173a0:	ldr	r0, [r4, #16]
   173a4:	bl	1522c <__assert_fail@plt+0x3df0>
   173a8:	b	17590 <argp_failure@@Base+0xfe4>
   173ac:	mov	r0, sl
   173b0:	bl	19ba0 <argp_parse@@Base+0x1978>
   173b4:	b	17344 <argp_failure@@Base+0xd98>
   173b8:	ldr	r5, [r4, #16]
   173bc:	ldr	r3, [fp, #-104]	; 0xffffff98
   173c0:	ldr	r2, [r9, #20]
   173c4:	ldr	r1, [r4, #4]
   173c8:	mov	r0, r5
   173cc:	bl	14a54 <__assert_fail@plt+0x3618>
   173d0:	subs	r4, r0, #0
   173d4:	beq	1754c <argp_failure@@Base+0xfa0>
   173d8:	ldrb	r3, [r4]
   173dc:	cmp	r3, #0
   173e0:	beq	17544 <argp_failure@@Base+0xf98>
   173e4:	ldr	r3, [sl, #28]
   173e8:	ldr	r2, [sl, #24]
   173ec:	sub	r3, r3, r2
   173f0:	ldr	r2, [sl, #16]
   173f4:	cmp	r3, r2
   173f8:	bhi	174a4 <argp_failure@@Base+0xef8>
   173fc:	ldr	r6, [sl, #20]
   17400:	bic	r6, r6, r6, asr #31
   17404:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17408:	ldr	r7, [r3, #20]
   1740c:	str	r7, [sl, #4]
   17410:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17414:	ldr	r7, [r3, #20]
   17418:	ldr	r3, [sl, #28]
   1741c:	ldr	r2, [sl, #24]
   17420:	sub	r3, r3, r2
   17424:	ldr	r2, [sl, #16]
   17428:	cmp	r3, r2
   1742c:	bhi	174e0 <argp_failure@@Base+0xf34>
   17430:	str	r7, [sl, #12]
   17434:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17438:	ldr	r1, [r3, #20]
   1743c:	add	r3, r1, #3
   17440:	cmp	r6, r3
   17444:	bhi	174ec <argp_failure@@Base+0xf40>
   17448:	cmp	r6, r1
   1744c:	bcc	1752c <argp_failure@@Base+0xf80>
   17450:	ldr	r3, [sl, #28]
   17454:	add	r3, r3, #3
   17458:	ldr	r2, [sl, #32]
   1745c:	cmp	r2, r3
   17460:	bcs	17478 <argp_failure@@Base+0xecc>
   17464:	mov	r1, #3
   17468:	mov	r0, sl
   1746c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   17470:	cmp	r0, #0
   17474:	beq	17534 <argp_failure@@Base+0xf88>
   17478:	ldr	r2, [sl, #28]
   1747c:	movw	r3, #49724	; 0xc23c
   17480:	movt	r3, #1
   17484:	ldrh	r1, [r3]
   17488:	strh	r1, [r2]
   1748c:	ldrb	r3, [r3, #2]
   17490:	strb	r3, [r2, #2]
   17494:	ldr	r3, [sl, #28]
   17498:	add	r3, r3, #3
   1749c:	str	r3, [sl, #28]
   174a0:	b	17534 <argp_failure@@Base+0xf88>
   174a4:	mov	r0, sl
   174a8:	bl	19ba0 <argp_parse@@Base+0x1978>
   174ac:	ldr	r6, [sl, #20]
   174b0:	bic	r6, r6, r6, asr #31
   174b4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   174b8:	ldr	r7, [r3, #20]
   174bc:	ldr	r3, [sl, #28]
   174c0:	ldr	r2, [sl, #24]
   174c4:	sub	r3, r3, r2
   174c8:	ldr	r2, [sl, #16]
   174cc:	cmp	r3, r2
   174d0:	bls	1740c <argp_failure@@Base+0xe60>
   174d4:	mov	r0, sl
   174d8:	bl	19ba0 <argp_parse@@Base+0x1978>
   174dc:	b	1740c <argp_failure@@Base+0xe60>
   174e0:	mov	r0, sl
   174e4:	bl	19ba0 <argp_parse@@Base+0x1978>
   174e8:	b	17430 <argp_failure@@Base+0xe84>
   174ec:	ldr	r2, [sl, #28]
   174f0:	ldr	r3, [sl, #32]
   174f4:	cmp	r2, r3
   174f8:	bcs	17514 <argp_failure@@Base+0xf68>
   174fc:	ldr	r3, [sl, #28]
   17500:	add	r2, r3, #1
   17504:	str	r2, [sl, #28]
   17508:	mov	r2, #10
   1750c:	strb	r2, [r3]
   17510:	b	17534 <argp_failure@@Base+0xf88>
   17514:	mov	r1, #1
   17518:	mov	r0, sl
   1751c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   17520:	cmp	r0, #0
   17524:	bne	174fc <argp_failure@@Base+0xf50>
   17528:	b	17534 <argp_failure@@Base+0xf88>
   1752c:	mov	r0, sl
   17530:	bl	14da4 <__assert_fail@plt+0x3968>
   17534:	mov	r0, r4
   17538:	bl	112d4 <strlen@plt>
   1753c:	subs	r6, r0, #0
   17540:	bne	1766c <argp_failure@@Base+0x10c0>
   17544:	cmp	r5, r4
   17548:	bne	176b4 <argp_failure@@Base+0x1108>
   1754c:	ldr	r3, [sl, #28]
   17550:	ldr	r2, [sl, #24]
   17554:	sub	r3, r3, r2
   17558:	ldr	r2, [sl, #16]
   1755c:	cmp	r3, r2
   17560:	bhi	176c0 <argp_failure@@Base+0x1114>
   17564:	mov	r3, #0
   17568:	str	r3, [sl, #4]
   1756c:	ldr	r2, [sl, #28]
   17570:	ldr	r3, [sl, #32]
   17574:	cmp	r2, r3
   17578:	bcs	176cc <argp_failure@@Base+0x1120>
   1757c:	ldr	r3, [sl, #28]
   17580:	add	r2, r3, #1
   17584:	str	r2, [sl, #28]
   17588:	mov	r2, #10
   1758c:	strb	r2, [r3]
   17590:	str	r9, [fp, #-88]	; 0xffffffa8
   17594:	ldr	r3, [sl, #28]
   17598:	ldr	r2, [sl, #24]
   1759c:	sub	r3, r3, r2
   175a0:	ldr	r2, [sl, #16]
   175a4:	cmp	r3, r2
   175a8:	bhi	176e4 <argp_failure@@Base+0x1138>
   175ac:	ldr	r3, [fp, #-120]	; 0xffffff88
   175b0:	str	r3, [sl, #4]
   175b4:	ldr	r3, [sl, #28]
   175b8:	ldr	r2, [sl, #24]
   175bc:	sub	r3, r3, r2
   175c0:	ldr	r2, [sl, #16]
   175c4:	cmp	r3, r2
   175c8:	bhi	176f0 <argp_failure@@Base+0x1144>
   175cc:	ldr	r3, [fp, #-124]	; 0xffffff84
   175d0:	str	r3, [sl, #12]
   175d4:	add	r9, r9, #28
   175d8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   175dc:	subs	r3, r3, #1
   175e0:	str	r3, [fp, #-116]	; 0xffffff8c
   175e4:	beq	176fc <argp_failure@@Base+0x1150>
   175e8:	ldr	r4, [r9]
   175ec:	ldr	r8, [r9, #8]
   175f0:	ldr	r3, [sl, #28]
   175f4:	ldr	r2, [sl, #24]
   175f8:	sub	r3, r3, r2
   175fc:	ldr	r2, [sl, #16]
   17600:	cmp	r3, r2
   17604:	bhi	17010 <argp_failure@@Base+0xa64>
   17608:	ldr	r3, [sl, #4]
   1760c:	str	r3, [fp, #-120]	; 0xffffff88
   17610:	mov	r3, #0
   17614:	str	r3, [sl, #4]
   17618:	ldr	r3, [sl, #12]
   1761c:	str	r3, [fp, #-124]	; 0xffffff84
   17620:	str	r9, [fp, #-76]	; 0xffffffb4
   17624:	str	sl, [fp, #-72]	; 0xffffffb8
   17628:	sub	r3, fp, #88	; 0x58
   1762c:	str	r3, [fp, #-68]	; 0xffffffbc
   17630:	mov	r3, #1
   17634:	str	r3, [fp, #-64]	; 0xffffffc0
   17638:	ldr	r3, [fp, #-104]	; 0xffffff98
   1763c:	str	r3, [fp, #-60]	; 0xffffffc4
   17640:	ldr	r3, [r4, #12]
   17644:	ands	r3, r3, #8
   17648:	str	r3, [fp, #-112]	; 0xffffff90
   1764c:	movne	r3, #0
   17650:	strne	r3, [fp, #-112]	; 0xffffff90
   17654:	bne	17048 <argp_failure@@Base+0xa9c>
   17658:	ldr	r2, [r9, #4]
   1765c:	cmp	r2, #0
   17660:	beq	17048 <argp_failure@@Base+0xa9c>
   17664:	add	r3, r4, #24
   17668:	b	17028 <argp_failure@@Base+0xa7c>
   1766c:	ldr	r3, [sl, #28]
   17670:	add	r3, r3, r6
   17674:	ldr	r2, [sl, #32]
   17678:	cmp	r2, r3
   1767c:	bcs	17694 <argp_failure@@Base+0x10e8>
   17680:	mov	r1, r6
   17684:	mov	r0, sl
   17688:	bl	1a118 <argp_parse@@Base+0x1ef0>
   1768c:	cmp	r0, #0
   17690:	beq	17544 <argp_failure@@Base+0xf98>
   17694:	mov	r2, r6
   17698:	mov	r1, r4
   1769c:	ldr	r0, [sl, #28]
   176a0:	bl	11184 <memcpy@plt>
   176a4:	ldr	r3, [sl, #28]
   176a8:	add	r6, r3, r6
   176ac:	str	r6, [sl, #28]
   176b0:	b	17544 <argp_failure@@Base+0xf98>
   176b4:	mov	r0, r4
   176b8:	bl	18f00 <argp_parse@@Base+0xcd8>
   176bc:	b	1754c <argp_failure@@Base+0xfa0>
   176c0:	mov	r0, sl
   176c4:	bl	19ba0 <argp_parse@@Base+0x1978>
   176c8:	b	17564 <argp_failure@@Base+0xfb8>
   176cc:	mov	r1, #1
   176d0:	mov	r0, sl
   176d4:	bl	1a118 <argp_parse@@Base+0x1ef0>
   176d8:	cmp	r0, #0
   176dc:	bne	1757c <argp_failure@@Base+0xfd0>
   176e0:	b	17590 <argp_failure@@Base+0xfe4>
   176e4:	mov	r0, sl
   176e8:	bl	19ba0 <argp_parse@@Base+0x1978>
   176ec:	b	175ac <argp_failure@@Base+0x1000>
   176f0:	mov	r0, sl
   176f4:	bl	19ba0 <argp_parse@@Base+0x1978>
   176f8:	b	175cc <argp_failure@@Base+0x1020>
   176fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17700:	cmp	r3, #0
   17704:	beq	17768 <argp_failure@@Base+0x11bc>
   17708:	movw	r3, #54752	; 0xd5e0
   1770c:	movt	r3, #2
   17710:	ldr	r3, [r3, #4]
   17714:	cmp	r3, #0
   17718:	beq	17768 <argp_failure@@Base+0x11bc>
   1771c:	ldr	r3, [fp, #-104]	; 0xffffff98
   17720:	cmp	r3, #0
   17724:	ldrne	r2, [r3]
   17728:	ldreq	r2, [fp, #-104]	; 0xffffff98
   1772c:	ldr	r3, [fp, #-104]	; 0xffffff98
   17730:	mov	r1, #5
   17734:	movt	r1, #512	; 0x200
   17738:	movw	r0, #49728	; 0xc240
   1773c:	movt	r0, #1
   17740:	bl	14a54 <__assert_fail@plt+0x3618>
   17744:	subs	r4, r0, #0
   17748:	beq	17768 <argp_failure@@Base+0x11bc>
   1774c:	ldrb	r3, [r4]
   17750:	cmp	r3, #0
   17754:	bne	177fc <argp_failure@@Base+0x1250>
   17758:	movw	r3, #49728	; 0xc240
   1775c:	movt	r3, #1
   17760:	cmp	r4, r3
   17764:	bne	178d0 <argp_failure@@Base+0x1324>
   17768:	mov	r4, #1
   1776c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17770:	tst	r3, #32
   17774:	bne	178dc <argp_failure@@Base+0x1330>
   17778:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1777c:	tst	r3, #64	; 0x40
   17780:	beq	177bc <argp_failure@@Base+0x1210>
   17784:	movw	r3, #55004	; 0xd6dc
   17788:	movt	r3, #2
   1778c:	ldr	r3, [r3]
   17790:	cmp	r3, #0
   17794:	beq	177bc <argp_failure@@Base+0x1210>
   17798:	cmp	r4, #0
   1779c:	bne	17904 <argp_failure@@Base+0x1358>
   177a0:	movw	r3, #55004	; 0xd6dc
   177a4:	movt	r3, #2
   177a8:	ldr	r2, [r3]
   177ac:	movw	r1, #49844	; 0xc2b4
   177b0:	movt	r1, #1
   177b4:	mov	r0, sl
   177b8:	bl	1a218 <argp_parse@@Base+0x1ff0>
   177bc:	ldr	r0, [fp, #-132]	; 0xffffff7c
   177c0:	bl	11214 <funlockfile@plt>
   177c4:	ldr	r3, [fp, #-128]	; 0xffffff80
   177c8:	cmp	r3, #0
   177cc:	beq	177d8 <argp_failure@@Base+0x122c>
   177d0:	mov	r0, r3
   177d4:	bl	148cc <__assert_fail@plt+0x3490>
   177d8:	mov	r0, sl
   177dc:	bl	1a0cc <argp_parse@@Base+0x1ea4>
   177e0:	sub	sp, fp, #32
   177e4:	ldrd	r4, [sp]
   177e8:	ldrd	r6, [sp, #8]
   177ec:	ldrd	r8, [sp, #16]
   177f0:	ldrd	sl, [sp, #24]
   177f4:	add	sp, sp, #32
   177f8:	pop	{pc}		; (ldr pc, [sp], #4)
   177fc:	ldr	r2, [sl, #28]
   17800:	ldr	r3, [sl, #32]
   17804:	cmp	r2, r3
   17808:	bcs	17858 <argp_failure@@Base+0x12ac>
   1780c:	ldr	r3, [sl, #28]
   17810:	add	r2, r3, #1
   17814:	str	r2, [sl, #28]
   17818:	mov	r2, #10
   1781c:	strb	r2, [r3]
   17820:	mov	r0, r4
   17824:	bl	112d4 <strlen@plt>
   17828:	subs	r5, r0, #0
   1782c:	bne	17870 <argp_failure@@Base+0x12c4>
   17830:	ldr	r2, [sl, #28]
   17834:	ldr	r3, [sl, #32]
   17838:	cmp	r2, r3
   1783c:	bcs	178b8 <argp_failure@@Base+0x130c>
   17840:	ldr	r3, [sl, #28]
   17844:	add	r2, r3, #1
   17848:	str	r2, [sl, #28]
   1784c:	mov	r2, #10
   17850:	strb	r2, [r3]
   17854:	b	17758 <argp_failure@@Base+0x11ac>
   17858:	mov	r1, #1
   1785c:	mov	r0, sl
   17860:	bl	1a118 <argp_parse@@Base+0x1ef0>
   17864:	cmp	r0, #0
   17868:	bne	1780c <argp_failure@@Base+0x1260>
   1786c:	b	17820 <argp_failure@@Base+0x1274>
   17870:	ldr	r3, [sl, #28]
   17874:	add	r3, r3, r5
   17878:	ldr	r2, [sl, #32]
   1787c:	cmp	r2, r3
   17880:	bcs	17898 <argp_failure@@Base+0x12ec>
   17884:	mov	r1, r5
   17888:	mov	r0, sl
   1788c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   17890:	cmp	r0, #0
   17894:	beq	17830 <argp_failure@@Base+0x1284>
   17898:	mov	r2, r5
   1789c:	mov	r1, r4
   178a0:	ldr	r0, [sl, #28]
   178a4:	bl	11184 <memcpy@plt>
   178a8:	ldr	r3, [sl, #28]
   178ac:	add	r5, r3, r5
   178b0:	str	r5, [sl, #28]
   178b4:	b	17830 <argp_failure@@Base+0x1284>
   178b8:	mov	r1, #1
   178bc:	mov	r0, sl
   178c0:	bl	1a118 <argp_parse@@Base+0x1ef0>
   178c4:	cmp	r0, #0
   178c8:	bne	17840 <argp_failure@@Base+0x1294>
   178cc:	b	17758 <argp_failure@@Base+0x11ac>
   178d0:	mov	r0, r4
   178d4:	bl	18f00 <argp_parse@@Base+0xcd8>
   178d8:	b	17768 <argp_failure@@Base+0x11bc>
   178dc:	str	sl, [sp, #4]
   178e0:	mov	r3, #0
   178e4:	str	r3, [sp]
   178e8:	mov	r3, r4
   178ec:	mov	r2, #1
   178f0:	ldr	r1, [fp, #-104]	; 0xffffff98
   178f4:	ldr	r0, [fp, #-108]	; 0xffffff94
   178f8:	bl	155d8 <__assert_fail@plt+0x419c>
   178fc:	orr	r4, r4, r0
   17900:	b	17778 <argp_failure@@Base+0x11cc>
   17904:	ldr	r2, [sl, #28]
   17908:	ldr	r3, [sl, #32]
   1790c:	cmp	r2, r3
   17910:	bcs	1792c <argp_failure@@Base+0x1380>
   17914:	ldr	r3, [sl, #28]
   17918:	add	r2, r3, #1
   1791c:	str	r2, [sl, #28]
   17920:	mov	r2, #10
   17924:	strb	r2, [r3]
   17928:	b	177a0 <argp_failure@@Base+0x11f4>
   1792c:	mov	r1, #1
   17930:	mov	r0, sl
   17934:	bl	1a118 <argp_parse@@Base+0x1ef0>
   17938:	cmp	r0, #0
   1793c:	bne	17914 <argp_failure@@Base+0x1368>
   17940:	b	177a0 <argp_failure@@Base+0x11f4>
   17944:	ldrb	r3, [r6]
   17948:	mov	r4, r6
   1794c:	mov	r7, #0
   17950:	b	169b4 <argp_failure@@Base+0x408>
   17954:	ldrb	r3, [r8]
   17958:	cmp	r3, r7
   1795c:	beq	17090 <argp_failure@@Base+0xae4>
   17960:	add	r5, r5, #24
   17964:	subs	r6, r6, #1
   17968:	beq	17180 <argp_failure@@Base+0xbd4>
   1796c:	ldr	r9, [r5, #12]
   17970:	tst	r9, #8
   17974:	bne	17960 <argp_failure@@Base+0x13b4>
   17978:	ldr	r7, [r5, #4]
   1797c:	sub	r3, r7, #1
   17980:	cmp	r3, #254	; 0xfe
   17984:	bhi	17960 <argp_failure@@Base+0x13b4>
   17988:	bl	112a4 <__ctype_b_loc@plt>
   1798c:	ldr	r2, [r0]
   17990:	lsl	r3, r7, #1
   17994:	ldrh	r3, [r2, r3]
   17998:	tst	r3, #16384	; 0x4000
   1799c:	bne	17954 <argp_failure@@Base+0x13a8>
   179a0:	b	17960 <argp_failure@@Base+0x13b4>
   179a4:	andeq	fp, r1, r0, lsr pc

000179a8 <argp_help@@Base>:
   179a8:	push	{lr}		; (str lr, [sp, #-4]!)
   179ac:	sub	sp, sp, #12
   179b0:	str	r3, [sp]
   179b4:	mov	r3, r2
   179b8:	mov	r2, r1
   179bc:	mov	r1, #0
   179c0:	bl	167c8 <argp_failure@@Base+0x21c>
   179c4:	add	sp, sp, #12
   179c8:	pop	{pc}		; (ldr pc, [sp], #4)

000179cc <argp_state_help@@Base>:
   179cc:	strd	r4, [sp, #-12]!
   179d0:	str	lr, [sp, #8]
   179d4:	sub	sp, sp, #12
   179d8:	mov	r5, r2
   179dc:	subs	r4, r0, #0
   179e0:	beq	17a00 <argp_state_help@@Base+0x34>
   179e4:	ldr	r3, [r4, #16]
   179e8:	tst	r3, #2
   179ec:	beq	17a40 <argp_state_help@@Base+0x74>
   179f0:	add	sp, sp, #12
   179f4:	ldrd	r4, [sp]
   179f8:	add	sp, sp, #8
   179fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17a00:	cmp	r1, #0
   17a04:	beq	179f0 <argp_state_help@@Base+0x24>
   17a08:	movw	r3, #54816	; 0xd620
   17a0c:	movt	r3, #2
   17a10:	ldr	r3, [r3]
   17a14:	str	r3, [sp]
   17a18:	mov	r3, r2
   17a1c:	mov	r2, r1
   17a20:	mov	r1, #0
   17a24:	mov	r0, r1
   17a28:	bl	167c8 <argp_failure@@Base+0x21c>
   17a2c:	b	17a7c <argp_state_help@@Base+0xb0>
   17a30:	movw	r3, #54792	; 0xd608
   17a34:	movt	r3, #2
   17a38:	ldr	r0, [r3]
   17a3c:	bl	112bc <exit@plt>
   17a40:	cmp	r1, #0
   17a44:	beq	179f0 <argp_state_help@@Base+0x24>
   17a48:	ldr	r3, [r4, #16]
   17a4c:	tst	r3, #64	; 0x40
   17a50:	orrne	r5, r5, #128	; 0x80
   17a54:	ldr	r3, [r4, #40]	; 0x28
   17a58:	str	r3, [sp]
   17a5c:	mov	r3, r5
   17a60:	mov	r2, r1
   17a64:	mov	r1, r4
   17a68:	ldr	r0, [r4]
   17a6c:	bl	167c8 <argp_failure@@Base+0x21c>
   17a70:	ldr	r3, [r4, #16]
   17a74:	tst	r3, #32
   17a78:	bne	179f0 <argp_state_help@@Base+0x24>
   17a7c:	tst	r5, #256	; 0x100
   17a80:	bne	17a30 <argp_state_help@@Base+0x64>
   17a84:	tst	r5, #512	; 0x200
   17a88:	beq	179f0 <argp_state_help@@Base+0x24>
   17a8c:	mov	r0, #0
   17a90:	bl	112bc <exit@plt>

00017a94 <argp_error@@Base>:
   17a94:	push	{r1, r2, r3}
   17a98:	strd	r4, [sp, #-12]!
   17a9c:	str	lr, [sp, #8]
   17aa0:	sub	sp, sp, #8
   17aa4:	subs	r5, r0, #0
   17aa8:	beq	17b80 <argp_error@@Base+0xec>
   17aac:	ldr	r3, [r5, #16]
   17ab0:	tst	r3, #2
   17ab4:	bne	17b68 <argp_error@@Base+0xd4>
   17ab8:	ldr	r4, [r5, #44]	; 0x2c
   17abc:	cmp	r4, #0
   17ac0:	beq	17b68 <argp_error@@Base+0xd4>
   17ac4:	mov	r0, r4
   17ac8:	bl	113d0 <flockfile@plt>
   17acc:	add	r3, sp, #24
   17ad0:	str	r3, [sp, #4]
   17ad4:	ldr	r0, [r5, #40]	; 0x28
   17ad8:	mov	r1, r4
   17adc:	bl	110e8 <fputs_unlocked@plt>
   17ae0:	ldr	r3, [r4, #20]
   17ae4:	ldr	r2, [r4, #24]
   17ae8:	cmp	r3, r2
   17aec:	addcc	r2, r3, #1
   17af0:	strcc	r2, [r4, #20]
   17af4:	movcc	r2, #58	; 0x3a
   17af8:	strbcc	r2, [r3]
   17afc:	bcs	17bb4 <argp_error@@Base+0x120>
   17b00:	ldr	r3, [r4, #20]
   17b04:	ldr	r2, [r4, #24]
   17b08:	cmp	r3, r2
   17b0c:	addcc	r2, r3, #1
   17b10:	strcc	r2, [r4, #20]
   17b14:	movcc	r2, #32
   17b18:	strbcc	r2, [r3]
   17b1c:	bcs	17bc4 <argp_error@@Base+0x130>
   17b20:	ldr	r2, [sp, #4]
   17b24:	ldr	r1, [sp, #20]
   17b28:	mov	r0, r4
   17b2c:	bl	11394 <vfprintf@plt>
   17b30:	ldr	r3, [r4, #20]
   17b34:	ldr	r2, [r4, #24]
   17b38:	cmp	r3, r2
   17b3c:	addcc	r2, r3, #1
   17b40:	strcc	r2, [r4, #20]
   17b44:	movcc	r2, #10
   17b48:	strbcc	r2, [r3]
   17b4c:	bcs	17bd4 <argp_error@@Base+0x140>
   17b50:	mov	r2, #260	; 0x104
   17b54:	mov	r1, r4
   17b58:	mov	r0, r5
   17b5c:	bl	179cc <argp_state_help@@Base>
   17b60:	mov	r0, r4
   17b64:	bl	11214 <funlockfile@plt>
   17b68:	add	sp, sp, #8
   17b6c:	ldrd	r4, [sp]
   17b70:	ldr	lr, [sp, #8]
   17b74:	add	sp, sp, #12
   17b78:	add	sp, sp, #12
   17b7c:	bx	lr
   17b80:	movw	r3, #54824	; 0xd628
   17b84:	movt	r3, #2
   17b88:	ldr	r4, [r3]
   17b8c:	cmp	r4, #0
   17b90:	beq	17b68 <argp_error@@Base+0xd4>
   17b94:	mov	r0, r4
   17b98:	bl	113d0 <flockfile@plt>
   17b9c:	add	r3, sp, #24
   17ba0:	str	r3, [sp, #4]
   17ba4:	movw	r3, #54816	; 0xd620
   17ba8:	movt	r3, #2
   17bac:	ldr	r0, [r3]
   17bb0:	b	17ad8 <argp_error@@Base+0x44>
   17bb4:	mov	r1, #58	; 0x3a
   17bb8:	mov	r0, r4
   17bbc:	bl	11364 <__overflow@plt>
   17bc0:	b	17b00 <argp_error@@Base+0x6c>
   17bc4:	mov	r1, #32
   17bc8:	mov	r0, r4
   17bcc:	bl	11364 <__overflow@plt>
   17bd0:	b	17b20 <argp_error@@Base+0x8c>
   17bd4:	mov	r1, #10
   17bd8:	mov	r0, r4
   17bdc:	bl	11364 <__overflow@plt>
   17be0:	b	17b50 <argp_error@@Base+0xbc>
   17be4:	ldr	ip, [r0]
   17be8:	cmp	ip, #0
   17bec:	beq	17c54 <argp_error@@Base+0x1c0>
   17bf0:	strd	r4, [sp, #-16]!
   17bf4:	str	r6, [sp, #8]
   17bf8:	str	lr, [sp, #12]
   17bfc:	mov	ip, r2
   17c00:	mov	r5, r1
   17c04:	mov	r4, r0
   17c08:	ldr	r2, [r0, #32]
   17c0c:	str	r2, [r1, #36]	; 0x24
   17c10:	ldr	r2, [r0, #24]
   17c14:	str	r2, [r1, #28]
   17c18:	ldr	r2, [r0, #28]
   17c1c:	str	r2, [r1, #32]
   17c20:	ldr	r2, [r0, #12]
   17c24:	str	r2, [r1, #20]
   17c28:	ldr	r6, [r0]
   17c2c:	mov	r2, r1
   17c30:	mov	r1, r3
   17c34:	mov	r0, ip
   17c38:	blx	r6
   17c3c:	ldr	r3, [r5, #36]	; 0x24
   17c40:	str	r3, [r4, #32]
   17c44:	ldrd	r4, [sp]
   17c48:	ldr	r6, [sp, #8]
   17c4c:	add	sp, sp, #12
   17c50:	pop	{pc}		; (ldr pc, [sp], #4)
   17c54:	mov	r0, #7
   17c58:	bx	lr
   17c5c:	strd	r4, [sp, #-16]!
   17c60:	str	r6, [sp, #8]
   17c64:	str	lr, [sp, #12]
   17c68:	ldr	r5, [r0, #16]
   17c6c:	ldr	r3, [r0]
   17c70:	cmp	r3, #0
   17c74:	beq	17c8c <argp_error@@Base+0x1f8>
   17c78:	ldr	r2, [r1, #8]
   17c7c:	add	r2, r2, #1
   17c80:	str	r2, [r1, #8]
   17c84:	mov	r2, #0
   17c88:	b	17cac <argp_error@@Base+0x218>
   17c8c:	ldr	r3, [r0, #4]
   17c90:	cmp	r3, #0
   17c94:	beq	17cfc <argp_error@@Base+0x268>
   17c98:	ldr	r3, [r1, #8]
   17c9c:	add	r3, r3, #1
   17ca0:	str	r3, [r1, #8]
   17ca4:	b	17cfc <argp_error@@Base+0x268>
   17ca8:	add	r2, r2, #1
   17cac:	add	r3, r3, #24
   17cb0:	ldr	r0, [r3, #-20]	; 0xffffffec
   17cb4:	cmp	r0, #0
   17cb8:	bne	17ca8 <argp_error@@Base+0x214>
   17cbc:	ldr	r0, [r3, #-24]	; 0xffffffe8
   17cc0:	cmp	r0, #0
   17cc4:	bne	17ca8 <argp_error@@Base+0x214>
   17cc8:	ldr	r0, [r3, #-8]
   17ccc:	cmp	r0, #0
   17cd0:	bne	17ca8 <argp_error@@Base+0x214>
   17cd4:	ldr	r0, [r3, #-4]
   17cd8:	cmp	r0, #0
   17cdc:	bne	17ca8 <argp_error@@Base+0x214>
   17ce0:	add	r0, r2, r2, lsl #1
   17ce4:	ldr	r3, [r1]
   17ce8:	add	r3, r3, r0
   17cec:	str	r3, [r1]
   17cf0:	ldr	r3, [r1, #4]
   17cf4:	add	r2, r3, r2
   17cf8:	str	r2, [r1, #4]
   17cfc:	cmp	r5, #0
   17d00:	beq	17d34 <argp_error@@Base+0x2a0>
   17d04:	ldr	r0, [r5]
   17d08:	cmp	r0, #0
   17d0c:	beq	17d34 <argp_error@@Base+0x2a0>
   17d10:	mov	r4, r1
   17d14:	mov	r1, r4
   17d18:	bl	17c5c <argp_error@@Base+0x1c8>
   17d1c:	ldr	r3, [r4, #12]
   17d20:	add	r3, r3, #1
   17d24:	str	r3, [r4, #12]
   17d28:	ldr	r0, [r5, #16]!
   17d2c:	cmp	r0, #0
   17d30:	bne	17d14 <argp_error@@Base+0x280>
   17d34:	ldrd	r4, [sp]
   17d38:	ldr	r6, [sp, #8]
   17d3c:	add	sp, sp, #12
   17d40:	pop	{pc}		; (ldr pc, [sp], #4)
   17d44:	cmp	r0, #86	; 0x56
   17d48:	beq	17d54 <argp_error@@Base+0x2c0>
   17d4c:	mov	r0, #7
   17d50:	bx	lr
   17d54:	str	r4, [sp, #-8]!
   17d58:	str	lr, [sp, #4]
   17d5c:	mov	r4, r2
   17d60:	movw	r3, #54924	; 0xd68c
   17d64:	movt	r3, #2
   17d68:	ldr	r3, [r3]
   17d6c:	cmp	r3, #0
   17d70:	beq	17d9c <argp_error@@Base+0x308>
   17d74:	mov	r1, r2
   17d78:	ldr	r0, [r2, #48]	; 0x30
   17d7c:	blx	r3
   17d80:	ldr	r3, [r4, #16]
   17d84:	tst	r3, #32
   17d88:	beq	17de0 <argp_error@@Base+0x34c>
   17d8c:	mov	r0, #0
   17d90:	ldr	r4, [sp]
   17d94:	add	sp, sp, #4
   17d98:	pop	{pc}		; (ldr pc, [sp], #4)
   17d9c:	movw	r3, #55008	; 0xd6e0
   17da0:	movt	r3, #2
   17da4:	ldr	r2, [r3]
   17da8:	cmp	r2, #0
   17dac:	beq	17dc4 <argp_error@@Base+0x330>
   17db0:	movw	r1, #50540	; 0xc56c
   17db4:	movt	r1, #1
   17db8:	ldr	r0, [r4, #48]	; 0x30
   17dbc:	bl	112ec <fprintf@plt>
   17dc0:	b	17d80 <argp_error@@Base+0x2ec>
   17dc4:	movw	r2, #50144	; 0xc3e0
   17dc8:	movt	r2, #1
   17dcc:	movw	r1, #45492	; 0xb1b4
   17dd0:	movt	r1, #1
   17dd4:	mov	r0, r4
   17dd8:	bl	17a94 <argp_error@@Base>
   17ddc:	b	17d80 <argp_error@@Base+0x2ec>
   17de0:	mov	r0, #0
   17de4:	bl	112bc <exit@plt>
   17de8:	strd	r4, [sp, #-16]!
   17dec:	str	r6, [sp, #8]
   17df0:	str	lr, [sp, #12]
   17df4:	mov	r4, r2
   17df8:	cmn	r0, #3
   17dfc:	beq	17eb4 <argp_error@@Base+0x420>
   17e00:	mov	r5, r1
   17e04:	ble	17e40 <argp_error@@Base+0x3ac>
   17e08:	cmn	r0, #2
   17e0c:	beq	17ecc <argp_error@@Base+0x438>
   17e10:	cmp	r0, #63	; 0x3f
   17e14:	movne	r0, #7
   17e18:	bne	17e30 <argp_error@@Base+0x39c>
   17e1c:	movw	r2, #634	; 0x27a
   17e20:	ldr	r1, [r4, #48]	; 0x30
   17e24:	mov	r0, r4
   17e28:	bl	179cc <argp_state_help@@Base>
   17e2c:	mov	r0, #0
   17e30:	ldrd	r4, [sp]
   17e34:	ldr	r6, [sp, #8]
   17e38:	add	sp, sp, #12
   17e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e40:	cmn	r0, #4
   17e44:	movne	r0, #7
   17e48:	bne	17e30 <argp_error@@Base+0x39c>
   17e4c:	movw	r0, #50180	; 0xc404
   17e50:	movt	r0, #1
   17e54:	mov	r2, #10
   17e58:	mov	r1, #0
   17e5c:	cmp	r5, r1
   17e60:	movne	r0, r5
   17e64:	bl	11100 <strtol@plt>
   17e68:	movw	r3, #54920	; 0xd688
   17e6c:	movt	r3, #2
   17e70:	str	r0, [r3]
   17e74:	ldr	r2, [r3]
   17e78:	sub	r1, r2, #1
   17e7c:	str	r1, [r3]
   17e80:	cmp	r2, #0
   17e84:	ble	17f14 <argp_error@@Base+0x480>
   17e88:	mov	r5, #1
   17e8c:	mov	r4, r3
   17e90:	mov	r0, r5
   17e94:	bl	111cc <sleep@plt>
   17e98:	ldr	r3, [r4]
   17e9c:	sub	r2, r3, #1
   17ea0:	str	r2, [r4]
   17ea4:	cmp	r3, #0
   17ea8:	bgt	17e90 <argp_error@@Base+0x3fc>
   17eac:	mov	r0, #0
   17eb0:	b	17e30 <argp_error@@Base+0x39c>
   17eb4:	movw	r2, #513	; 0x201
   17eb8:	ldr	r1, [r4, #48]	; 0x30
   17ebc:	mov	r0, r4
   17ec0:	bl	179cc <argp_state_help@@Base>
   17ec4:	mov	r0, #0
   17ec8:	b	17e30 <argp_error@@Base+0x39c>
   17ecc:	movw	r3, #54820	; 0xd624
   17ed0:	movt	r3, #2
   17ed4:	str	r1, [r3]
   17ed8:	mov	r0, r1
   17edc:	bl	18e3c <argp_parse@@Base+0xc14>
   17ee0:	str	r0, [r4, #40]	; 0x28
   17ee4:	movw	r3, #54816	; 0xd620
   17ee8:	movt	r3, #2
   17eec:	str	r0, [r3]
   17ef0:	ldr	r3, [r4, #16]
   17ef4:	and	r3, r3, #3
   17ef8:	cmp	r3, #1
   17efc:	movne	r0, #0
   17f00:	bne	17e30 <argp_error@@Base+0x39c>
   17f04:	ldr	r3, [r4, #8]
   17f08:	str	r5, [r3]
   17f0c:	mov	r0, #0
   17f10:	b	17e30 <argp_error@@Base+0x39c>
   17f14:	mov	r0, #0
   17f18:	b	17e30 <argp_error@@Base+0x39c>
   17f1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17f20:	strd	r6, [sp, #8]
   17f24:	strd	r8, [sp, #16]
   17f28:	strd	sl, [sp, #24]
   17f2c:	str	lr, [sp, #32]
   17f30:	sub	sp, sp, #36	; 0x24
   17f34:	str	r0, [sp, #16]
   17f38:	str	r1, [sp, #20]
   17f3c:	str	r2, [sp, #24]
   17f40:	str	r3, [sp, #8]
   17f44:	ldr	r8, [sp, #72]	; 0x48
   17f48:	ldr	r6, [r0]
   17f4c:	ldr	sl, [r0, #16]
   17f50:	cmp	r6, #0
   17f54:	beq	17f70 <argp_error@@Base+0x4dc>
   17f58:	mov	r4, r6
   17f5c:	movw	r3, #36409	; 0x8e39
   17f60:	movt	r3, #14563	; 0x38e3
   17f64:	str	r3, [sp, #12]
   17f68:	str	sl, [sp, #28]
   17f6c:	b	17fb4 <argp_error@@Base+0x520>
   17f70:	ldr	r3, [r0, #4]
   17f74:	cmp	r3, #0
   17f78:	bne	18140 <argp_error@@Base+0x6ac>
   17f7c:	ldr	r0, [sp, #8]
   17f80:	str	r6, [sp, #8]
   17f84:	b	181c4 <argp_error@@Base+0x730>
   17f88:	ldr	r0, [r7, #16]!
   17f8c:	cmp	r0, #0
   17f90:	beq	18094 <argp_error@@Base+0x600>
   17f94:	mov	r1, r9
   17f98:	bl	110f4 <strcmp@plt>
   17f9c:	cmp	r0, #0
   17fa0:	bne	17f88 <argp_error@@Base+0x4f4>
   17fa4:	sub	sl, r7, fp
   17fa8:	cmp	sl, #0
   17fac:	blt	18094 <argp_error@@Base+0x600>
   17fb0:	add	r4, r4, #24
   17fb4:	ldr	r7, [r4, #4]
   17fb8:	cmp	r7, #0
   17fbc:	bne	17fcc <argp_error@@Base+0x538>
   17fc0:	ldr	r3, [r4]
   17fc4:	cmp	r3, #0
   17fc8:	beq	18124 <argp_error@@Base+0x690>
   17fcc:	ldr	r3, [r4, #12]
   17fd0:	and	r2, r3, #4
   17fd4:	cmp	r2, #0
   17fd8:	moveq	r6, r4
   17fdc:	ldr	r5, [r6, #12]
   17fe0:	ands	r5, r5, #8
   17fe4:	bne	17fb0 <argp_error@@Base+0x51c>
   17fe8:	tst	r3, #8
   17fec:	bne	1806c <argp_error@@Base+0x5d8>
   17ff0:	sub	r3, r7, #1
   17ff4:	cmp	r3, #254	; 0xfe
   17ff8:	bhi	1806c <argp_error@@Base+0x5d8>
   17ffc:	bl	112a4 <__ctype_b_loc@plt>
   18000:	ldr	r2, [r0]
   18004:	lsl	r3, r7, #1
   18008:	ldrh	r3, [r2, r3]
   1800c:	tst	r3, #16384	; 0x4000
   18010:	beq	1806c <argp_error@@Base+0x5d8>
   18014:	ldr	r3, [r8, #4]
   18018:	add	r2, r3, #1
   1801c:	str	r2, [r8, #4]
   18020:	strb	r7, [r3]
   18024:	ldr	r3, [r6, #8]
   18028:	cmp	r3, #0
   1802c:	beq	18060 <argp_error@@Base+0x5cc>
   18030:	ldr	r3, [r8, #4]
   18034:	add	r2, r3, #1
   18038:	str	r2, [r8, #4]
   1803c:	mov	r1, #58	; 0x3a
   18040:	strb	r1, [r3]
   18044:	ldr	r3, [r6, #12]
   18048:	tst	r3, #1
   1804c:	beq	18060 <argp_error@@Base+0x5cc>
   18050:	ldr	r3, [r8, #4]
   18054:	add	r2, r3, #1
   18058:	str	r2, [r8, #4]
   1805c:	strb	r1, [r3]
   18060:	ldr	r3, [r8, #4]
   18064:	mov	r2, #0
   18068:	strb	r2, [r3]
   1806c:	ldr	r9, [r4]
   18070:	cmp	r9, #0
   18074:	beq	17fb0 <argp_error@@Base+0x51c>
   18078:	ldr	r3, [r8]
   1807c:	ldr	fp, [r3, #8]
   18080:	ldr	r0, [fp]
   18084:	cmp	r0, #0
   18088:	beq	18094 <argp_error@@Base+0x600>
   1808c:	mov	r7, fp
   18090:	b	17f94 <argp_error@@Base+0x500>
   18094:	ldr	r3, [r8, #8]
   18098:	str	r9, [r3]
   1809c:	ldr	r3, [r6, #8]
   180a0:	cmp	r3, #0
   180a4:	beq	180bc <argp_error@@Base+0x628>
   180a8:	ldr	r3, [r6, #12]
   180ac:	and	r3, r3, #1
   180b0:	cmp	r3, #0
   180b4:	movne	r5, #2
   180b8:	moveq	r5, #1
   180bc:	ldr	r3, [r8, #8]
   180c0:	str	r5, [r3, #4]
   180c4:	ldr	r3, [r8, #8]
   180c8:	mov	r2, #0
   180cc:	str	r2, [r3, #8]
   180d0:	ldr	r3, [r4, #4]
   180d4:	cmp	r3, r2
   180d8:	ldreq	r3, [r6, #4]
   180dc:	bic	r2, r3, #-16777216	; 0xff000000
   180e0:	ldr	r1, [r8, #8]
   180e4:	ldr	r3, [r8]
   180e8:	ldr	r3, [r3, #48]	; 0x30
   180ec:	ldr	r0, [sp, #8]
   180f0:	sub	r3, r0, r3
   180f4:	asr	r3, r3, #2
   180f8:	ldr	r0, [sp, #12]
   180fc:	mul	r3, r0, r3
   18100:	add	r3, r3, #1
   18104:	add	r3, r2, r3, lsl #24
   18108:	str	r3, [r1, #12]
   1810c:	ldr	r3, [r8, #8]
   18110:	add	r2, r3, #16
   18114:	str	r2, [r8, #8]
   18118:	mov	r2, #0
   1811c:	str	r2, [r3, #16]
   18120:	b	17fb0 <argp_error@@Base+0x51c>
   18124:	ldr	r3, [r4, #16]
   18128:	cmp	r3, #0
   1812c:	bne	17fcc <argp_error@@Base+0x538>
   18130:	ldr	r3, [r4, #20]
   18134:	cmp	r3, #0
   18138:	bne	17fcc <argp_error@@Base+0x538>
   1813c:	ldr	sl, [sp, #28]
   18140:	ldr	r1, [sp, #16]
   18144:	ldr	r3, [r1, #4]
   18148:	ldr	r2, [sp, #8]
   1814c:	str	r3, [r2]
   18150:	str	r1, [r2, #4]
   18154:	ldr	r3, [r8, #4]
   18158:	str	r3, [r2, #8]
   1815c:	mov	r3, #0
   18160:	str	r3, [r2, #12]
   18164:	ldr	r1, [sp, #20]
   18168:	str	r1, [r2, #16]
   1816c:	ldr	r1, [sp, #24]
   18170:	str	r1, [r2, #20]
   18174:	str	r3, [r2, #24]
   18178:	str	r3, [r2, #32]
   1817c:	str	r3, [r2, #28]
   18180:	cmp	sl, r3
   18184:	beq	181bc <argp_error@@Base+0x728>
   18188:	ldr	r3, [sl]
   1818c:	cmp	r3, #0
   18190:	beq	18220 <argp_error@@Base+0x78c>
   18194:	mov	r3, #0
   18198:	add	r3, r3, #1
   1819c:	ldr	r2, [sl, r3, lsl #4]
   181a0:	cmp	r2, #0
   181a4:	bne	18198 <argp_error@@Base+0x704>
   181a8:	ldr	r2, [r8, #12]
   181ac:	ldr	r1, [sp, #8]
   181b0:	str	r2, [r1, #28]
   181b4:	add	r3, r2, r3, lsl #2
   181b8:	str	r3, [r8, #12]
   181bc:	ldr	r3, [sp, #8]
   181c0:	add	r0, r3, #36	; 0x24
   181c4:	cmp	sl, #0
   181c8:	beq	18204 <argp_error@@Base+0x770>
   181cc:	ldr	ip, [sl]
   181d0:	cmp	ip, #0
   181d4:	beq	18204 <argp_error@@Base+0x770>
   181d8:	mov	r2, #0
   181dc:	add	r4, r2, #1
   181e0:	str	r8, [sp]
   181e4:	mov	r3, r0
   181e8:	ldr	r1, [sp, #8]
   181ec:	mov	r0, ip
   181f0:	bl	17f1c <argp_error@@Base+0x488>
   181f4:	ldr	ip, [sl, r4, lsl #4]
   181f8:	mov	r2, r4
   181fc:	cmp	ip, #0
   18200:	bne	181dc <argp_error@@Base+0x748>
   18204:	add	sp, sp, #36	; 0x24
   18208:	ldrd	r4, [sp]
   1820c:	ldrd	r6, [sp, #8]
   18210:	ldrd	r8, [sp, #16]
   18214:	ldrd	sl, [sp, #24]
   18218:	add	sp, sp, #32
   1821c:	pop	{pc}		; (ldr pc, [sp], #4)
   18220:	mov	r3, #0
   18224:	b	181a8 <argp_error@@Base+0x714>

00018228 <argp_parse@@Base>:
   18228:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1822c:	strd	r6, [sp, #8]
   18230:	strd	r8, [sp, #16]
   18234:	strd	sl, [sp, #24]
   18238:	str	lr, [sp, #32]
   1823c:	add	fp, sp, #32
   18240:	sub	sp, sp, #228	; 0xe4
   18244:	mov	r8, r0
   18248:	str	r1, [fp, #-240]	; 0xffffff10
   1824c:	str	r2, [fp, #-232]	; 0xffffff18
   18250:	mov	r7, r3
   18254:	tst	r3, #1
   18258:	bne	18284 <argp_parse@@Base+0x5c>
   1825c:	movw	r3, #54820	; 0xd624
   18260:	movt	r3, #2
   18264:	ldr	r3, [r3]
   18268:	cmp	r3, #0
   1826c:	beq	182dc <argp_parse@@Base+0xb4>
   18270:	movw	r3, #54816	; 0xd620
   18274:	movt	r3, #2
   18278:	ldr	r3, [r3]
   1827c:	cmp	r3, #0
   18280:	beq	182f0 <argp_parse@@Base+0xc8>
   18284:	tst	r7, #16
   18288:	beq	1830c <argp_parse@@Base+0xe4>
   1828c:	str	r7, [fp, #-244]	; 0xffffff0c
   18290:	mov	r3, #0
   18294:	str	r3, [fp, #-188]	; 0xffffff44
   18298:	str	r3, [fp, #-184]	; 0xffffff48
   1829c:	str	r3, [fp, #-180]	; 0xffffff4c
   182a0:	str	r3, [fp, #-176]	; 0xffffff50
   182a4:	str	r3, [fp, #-172]	; 0xffffff54
   182a8:	str	r3, [fp, #-168]	; 0xffffff58
   182ac:	str	r3, [fp, #-164]	; 0xffffff5c
   182b0:	ands	r2, r7, #4
   182b4:	str	r2, [fp, #-248]	; 0xffffff08
   182b8:	moveq	r2, #1
   182bc:	movne	r2, r3
   182c0:	str	r2, [fp, #-228]	; 0xffffff1c
   182c4:	str	r3, [fp, #-224]	; 0xffffff20
   182c8:	str	r3, [fp, #-220]	; 0xffffff24
   182cc:	str	r3, [fp, #-216]	; 0xffffff28
   182d0:	cmp	r8, r3
   182d4:	beq	183d8 <argp_parse@@Base+0x1b0>
   182d8:	b	183cc <argp_parse@@Base+0x1a4>
   182dc:	ldr	r2, [r2]
   182e0:	movw	r3, #54820	; 0xd624
   182e4:	movt	r3, #2
   182e8:	str	r2, [r3]
   182ec:	b	18270 <argp_parse@@Base+0x48>
   182f0:	ldr	r3, [fp, #-232]	; 0xffffff18
   182f4:	ldr	r0, [r3]
   182f8:	bl	18e3c <argp_parse@@Base+0xc14>
   182fc:	movw	r3, #54816	; 0xd620
   18300:	movt	r3, #2
   18304:	str	r0, [r3]
   18308:	b	18284 <argp_parse@@Base+0x5c>
   1830c:	sub	sp, sp, #64	; 0x40
   18310:	add	r5, sp, #8
   18314:	sub	sp, sp, #32
   18318:	add	r4, sp, #8
   1831c:	mov	r1, #0
   18320:	str	r1, [r4]
   18324:	str	r1, [r4, #4]
   18328:	str	r1, [r4, #8]
   1832c:	str	r1, [r4, #12]
   18330:	str	r1, [r4, #20]
   18334:	str	r1, [r4, #24]
   18338:	str	r5, [r4, #16]
   1833c:	mov	r2, #64	; 0x40
   18340:	mov	r0, r5
   18344:	bl	11328 <memset@plt>
   18348:	cmp	r8, #0
   1834c:	mov	r0, r5
   18350:	strne	r8, [r0], #16
   18354:	movw	r3, #49864	; 0xc2c8
   18358:	movt	r3, #1
   1835c:	str	r3, [r0]
   18360:	movw	r3, #55008	; 0xd6e0
   18364:	movt	r3, #2
   18368:	ldr	r3, [r3]
   1836c:	cmp	r3, #0
   18370:	beq	18598 <argp_parse@@Base+0x370>
   18374:	add	r2, r0, #32
   18378:	ldr	r3, [pc, #2548]	; 18d74 <argp_parse@@Base+0xb4c>
   1837c:	str	r3, [r0, #16]
   18380:	mov	r3, #0
   18384:	str	r3, [r2]
   18388:	str	r7, [fp, #-244]	; 0xffffff0c
   1838c:	str	r3, [fp, #-188]	; 0xffffff44
   18390:	str	r3, [fp, #-184]	; 0xffffff48
   18394:	str	r3, [fp, #-180]	; 0xffffff4c
   18398:	str	r3, [fp, #-176]	; 0xffffff50
   1839c:	str	r3, [fp, #-172]	; 0xffffff54
   183a0:	str	r3, [fp, #-168]	; 0xffffff58
   183a4:	str	r3, [fp, #-164]	; 0xffffff5c
   183a8:	ands	r2, r7, #4
   183ac:	str	r2, [fp, #-248]	; 0xffffff08
   183b0:	moveq	r2, #1
   183b4:	movne	r2, r3
   183b8:	str	r2, [fp, #-228]	; 0xffffff1c
   183bc:	str	r3, [fp, #-224]	; 0xffffff20
   183c0:	str	r3, [fp, #-220]	; 0xffffff24
   183c4:	str	r3, [fp, #-216]	; 0xffffff28
   183c8:	mov	r8, r4
   183cc:	sub	r1, fp, #228	; 0xe4
   183d0:	mov	r0, r8
   183d4:	bl	17c5c <argp_error@@Base+0x1c8>
   183d8:	ldr	r4, [fp, #-220]	; 0xffffff24
   183dc:	add	r4, r4, #1
   183e0:	add	r4, r4, r4, lsl #3
   183e4:	lsl	r4, r4, #2
   183e8:	ldr	r3, [fp, #-216]	; 0xffffff28
   183ec:	lsl	r3, r3, #2
   183f0:	str	r3, [fp, #-236]	; 0xffffff14
   183f4:	add	r9, r3, r4
   183f8:	ldr	r5, [fp, #-224]	; 0xffffff20
   183fc:	add	r5, r5, #1
   18400:	add	r5, r9, r5, lsl #4
   18404:	ldr	r0, [fp, #-228]	; 0xffffff1c
   18408:	add	r0, r0, #1
   1840c:	add	r0, r0, r5
   18410:	bl	19a70 <argp_parse@@Base+0x1848>
   18414:	mov	r6, r0
   18418:	str	r0, [fp, #-40]	; 0xffffffd8
   1841c:	cmp	r0, #0
   18420:	moveq	r4, #12
   18424:	beq	18b94 <argp_parse@@Base+0x96c>
   18428:	str	r0, [fp, #-112]	; 0xffffff90
   1842c:	add	r4, r0, r4
   18430:	str	r4, [fp, #-104]	; 0xffffff98
   18434:	add	r9, r0, r9
   18438:	str	r9, [fp, #-152]	; 0xffffff68
   1843c:	add	sl, r0, r5
   18440:	str	sl, [fp, #-156]	; 0xffffff64
   18444:	mov	r3, #1
   18448:	str	r3, [fp, #-196]	; 0xffffff3c
   1844c:	str	r3, [fp, #-192]	; 0xffffff40
   18450:	ldrd	r2, [fp, #-196]	; 0xffffff3c
   18454:	strd	r2, [fp, #-148]	; 0xffffff6c
   18458:	ldrd	r2, [fp, #-188]	; 0xffffff44
   1845c:	strd	r2, [fp, #-140]	; 0xffffff74
   18460:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   18464:	strd	r2, [fp, #-132]	; 0xffffff7c
   18468:	ldrd	r2, [fp, #-172]	; 0xffffff54
   1846c:	strd	r2, [fp, #-124]	; 0xffffff84
   18470:	ldr	r3, [fp, #-164]	; 0xffffff5c
   18474:	str	r3, [fp, #-116]	; 0xffffff8c
   18478:	ldr	r2, [fp, #-236]	; 0xffffff14
   1847c:	mov	r1, #0
   18480:	mov	r0, r4
   18484:	bl	11328 <memset@plt>
   18488:	sub	r3, fp, #160	; 0xa0
   1848c:	str	r3, [fp, #-212]	; 0xffffff2c
   18490:	str	sl, [fp, #-208]	; 0xffffff30
   18494:	str	r9, [fp, #-204]	; 0xffffff34
   18498:	str	r4, [fp, #-200]	; 0xffffff38
   1849c:	ldr	r3, [fp, #-244]	; 0xffffff0c
   184a0:	tst	r3, #8
   184a4:	beq	185b4 <argp_parse@@Base+0x38c>
   184a8:	add	sl, sl, #1
   184ac:	str	sl, [fp, #-208]	; 0xffffff30
   184b0:	mov	r3, #45	; 0x2d
   184b4:	strb	r3, [r6, r5]
   184b8:	mov	r3, #0
   184bc:	ldr	r2, [fp, #-208]	; 0xffffff30
   184c0:	strb	r3, [r2]
   184c4:	ldr	r2, [fp, #-204]	; 0xffffff34
   184c8:	str	r3, [r2]
   184cc:	str	r8, [fp, #-160]	; 0xffffff60
   184d0:	cmp	r8, r3
   184d4:	beq	185d4 <argp_parse@@Base+0x3ac>
   184d8:	sub	r3, fp, #212	; 0xd4
   184dc:	str	r3, [sp]
   184e0:	ldr	r3, [fp, #-112]	; 0xffffff90
   184e4:	mov	r2, #0
   184e8:	mov	r1, r2
   184ec:	mov	r0, r8
   184f0:	bl	17f1c <argp_error@@Base+0x488>
   184f4:	str	r0, [fp, #-108]	; 0xffffff94
   184f8:	mov	r2, #0
   184fc:	mov	r3, #0
   18500:	strd	r2, [fp, #-76]	; 0xffffffb4
   18504:	strd	r2, [fp, #-68]	; 0xffffffbc
   18508:	strd	r2, [fp, #-60]	; 0xffffffc4
   1850c:	ldr	r3, [fp, #-160]	; 0xffffff60
   18510:	str	r3, [fp, #-96]	; 0xffffffa0
   18514:	ldr	r3, [fp, #-240]	; 0xffffff10
   18518:	str	r3, [fp, #-92]	; 0xffffffa4
   1851c:	ldr	r3, [fp, #-232]	; 0xffffff18
   18520:	str	r3, [fp, #-88]	; 0xffffffa8
   18524:	str	r7, [fp, #-80]	; 0xffffffb0
   18528:	movw	r3, #54824	; 0xd628
   1852c:	movt	r3, #2
   18530:	ldr	r3, [r3]
   18534:	str	r3, [fp, #-52]	; 0xffffffcc
   18538:	movw	r3, #54828	; 0xd62c
   1853c:	movt	r3, #2
   18540:	ldr	r3, [r3]
   18544:	str	r3, [fp, #-48]	; 0xffffffd0
   18548:	mov	r3, #0
   1854c:	str	r3, [fp, #-84]	; 0xffffffac
   18550:	sub	r3, fp, #160	; 0xa0
   18554:	str	r3, [fp, #-44]	; 0xffffffd4
   18558:	mov	r3, #1
   1855c:	str	r3, [fp, #-100]	; 0xffffff9c
   18560:	ldr	r3, [fp, #-112]	; 0xffffff90
   18564:	ldr	r2, [fp, #-108]	; 0xffffff94
   18568:	cmp	r3, r2
   1856c:	bcs	18680 <argp_parse@@Base+0x458>
   18570:	ldr	r2, [fp, #8]
   18574:	str	r2, [r3, #24]
   18578:	ldr	r5, [fp, #-112]	; 0xffffff90
   1857c:	ldr	r3, [fp, #-108]	; 0xffffff94
   18580:	cmp	r5, r3
   18584:	bcs	18680 <argp_parse@@Base+0x458>
   18588:	mov	r6, #3
   1858c:	movt	r6, #256	; 0x100
   18590:	mov	r7, #0
   18594:	b	1861c <argp_parse@@Base+0x3f4>
   18598:	movw	r3, #54924	; 0xd68c
   1859c:	movt	r3, #2
   185a0:	ldr	r3, [r3]
   185a4:	cmp	r3, #0
   185a8:	addeq	r2, r0, #16
   185ac:	bne	18374 <argp_parse@@Base+0x14c>
   185b0:	b	18380 <argp_parse@@Base+0x158>
   185b4:	ldr	r3, [fp, #-248]	; 0xffffff08
   185b8:	cmp	r3, #0
   185bc:	beq	184b8 <argp_parse@@Base+0x290>
   185c0:	add	sl, sl, #1
   185c4:	str	sl, [fp, #-208]	; 0xffffff30
   185c8:	mov	r3, #43	; 0x2b
   185cc:	strb	r3, [r6, r5]
   185d0:	b	184b8 <argp_parse@@Base+0x290>
   185d4:	ldr	r3, [fp, #-112]	; 0xffffff90
   185d8:	str	r3, [fp, #-108]	; 0xffffff94
   185dc:	b	184f8 <argp_parse@@Base+0x2d0>
   185e0:	ldr	r3, [r5]
   185e4:	cmp	r3, #0
   185e8:	beq	1863c <argp_parse@@Base+0x414>
   185ec:	mov	r3, r7
   185f0:	mov	r2, r6
   185f4:	sub	r1, fp, #96	; 0x60
   185f8:	mov	r0, r5
   185fc:	bl	17be4 <argp_error@@Base+0x150>
   18600:	add	r5, r5, #36	; 0x24
   18604:	ldr	r3, [fp, #-108]	; 0xffffff94
   18608:	cmp	r5, r3
   1860c:	bcs	18670 <argp_parse@@Base+0x448>
   18610:	cmp	r0, #7
   18614:	cmpne	r0, #0
   18618:	bne	18668 <argp_parse@@Base+0x440>
   1861c:	ldr	r3, [r5, #16]
   18620:	cmp	r3, #0
   18624:	beq	185e0 <argp_parse@@Base+0x3b8>
   18628:	ldr	r2, [r5, #20]
   1862c:	ldr	r3, [r3, #28]
   18630:	ldr	r3, [r3, r2, lsl #2]
   18634:	str	r3, [r5, #24]
   18638:	b	185e0 <argp_parse@@Base+0x3b8>
   1863c:	ldr	r3, [r5, #4]
   18640:	ldr	r3, [r3, #16]
   18644:	cmp	r3, #0
   18648:	beq	185ec <argp_parse@@Base+0x3c4>
   1864c:	ldr	r3, [r3]
   18650:	cmp	r3, #0
   18654:	beq	185ec <argp_parse@@Base+0x3c4>
   18658:	ldr	r3, [r5, #28]
   1865c:	ldr	r2, [r5, #24]
   18660:	str	r2, [r3]
   18664:	b	185ec <argp_parse@@Base+0x3c4>
   18668:	mov	r4, r0
   1866c:	b	18b94 <argp_parse@@Base+0x96c>
   18670:	mov	r4, r0
   18674:	cmp	r0, #7
   18678:	cmpne	r0, #0
   1867c:	bne	18b94 <argp_parse@@Base+0x96c>
   18680:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18684:	tst	r3, #2
   18688:	moveq	r3, #1
   1868c:	streq	r3, [fp, #-144]	; 0xffffff70
   18690:	beq	186bc <argp_parse@@Base+0x494>
   18694:	mov	r2, #0
   18698:	str	r2, [fp, #-144]	; 0xffffff70
   1869c:	tst	r3, #1
   186a0:	beq	186bc <argp_parse@@Base+0x494>
   186a4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   186a8:	sub	r3, r3, #4
   186ac:	str	r3, [fp, #-88]	; 0xffffffa8
   186b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   186b4:	add	r3, r3, #1
   186b8:	str	r3, [fp, #-92]	; 0xffffffa4
   186bc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   186c0:	ldr	r2, [fp, #-232]	; 0xffffff18
   186c4:	cmp	r2, r3
   186c8:	beq	186f0 <argp_parse@@Base+0x4c8>
   186cc:	movw	r3, #54816	; 0xd620
   186d0:	movt	r3, #2
   186d4:	ldr	r3, [r3]
   186d8:	str	r3, [fp, #-56]	; 0xffffffc8
   186dc:	movw	sl, #50192	; 0xc410
   186e0:	movt	sl, #1
   186e4:	mov	r9, #6
   186e8:	movt	r9, #256	; 0x100
   186ec:	b	187b8 <argp_parse@@Base+0x590>
   186f0:	ldr	r0, [r2]
   186f4:	cmp	r0, #0
   186f8:	beq	186cc <argp_parse@@Base+0x4a4>
   186fc:	bl	18e3c <argp_parse@@Base+0xc14>
   18700:	str	r0, [fp, #-56]	; 0xffffffc8
   18704:	b	186dc <argp_parse@@Base+0x4b4>
   18708:	ldr	r3, [fp, #-84]	; 0xffffffac
   1870c:	str	r3, [fp, #-148]	; 0xffffff6c
   18710:	mvn	r3, #0
   18714:	str	r3, [fp, #-140]	; 0xffffff74
   18718:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1871c:	tst	r3, #64	; 0x40
   18720:	beq	1883c <argp_parse@@Base+0x614>
   18724:	sub	r3, fp, #148	; 0x94
   18728:	str	r3, [sp, #4]
   1872c:	mov	r3, #0
   18730:	str	r3, [sp]
   18734:	ldr	r3, [fp, #-152]	; 0xffffff68
   18738:	ldr	r2, [fp, #-156]	; 0xffffff64
   1873c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18740:	ldr	r0, [fp, #-92]	; 0xffffffa4
   18744:	bl	18fe4 <argp_parse@@Base+0xdbc>
   18748:	mov	r5, r0
   1874c:	ldr	r4, [fp, #-148]	; 0xffffff6c
   18750:	str	r4, [fp, #-84]	; 0xffffffac
   18754:	cmn	r5, #1
   18758:	beq	18868 <argp_parse@@Base+0x640>
   1875c:	cmp	r5, #63	; 0x3f
   18760:	beq	18898 <argp_parse@@Base+0x670>
   18764:	cmp	r5, #1
   18768:	beq	18814 <argp_parse@@Base+0x5ec>
   1876c:	ldr	r4, [fp, #-136]	; 0xffffff78
   18770:	asrs	r3, r5, #24
   18774:	beq	188a8 <argp_parse@@Base+0x680>
   18778:	ands	r1, r5, #8388608	; 0x800000
   1877c:	movne	r1, #-16777216	; 0xff000000
   18780:	bic	r2, r5, #-16777216	; 0xff000000
   18784:	add	r0, r3, r3, lsl #3
   18788:	lsl	r0, r0, #2
   1878c:	sub	r0, r0, #36	; 0x24
   18790:	mov	r3, r4
   18794:	orr	r2, r2, r1
   18798:	sub	r1, fp, #96	; 0x60
   1879c:	ldr	ip, [fp, #-112]	; 0xffffff90
   187a0:	add	r0, ip, r0
   187a4:	bl	17be4 <argp_error@@Base+0x150>
   187a8:	cmp	r0, #7
   187ac:	beq	18a70 <argp_parse@@Base+0x848>
   187b0:	cmp	r0, #0
   187b4:	bne	18af4 <argp_parse@@Base+0x8cc>
   187b8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   187bc:	cmp	r3, #0
   187c0:	beq	187d8 <argp_parse@@Base+0x5b0>
   187c4:	ldr	r2, [fp, #-84]	; 0xffffffac
   187c8:	cmp	r3, r2
   187cc:	movgt	r3, #0
   187d0:	strgt	r3, [fp, #-72]	; 0xffffffb8
   187d4:	ble	187e4 <argp_parse@@Base+0x5bc>
   187d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   187dc:	cmp	r3, #0
   187e0:	bne	18708 <argp_parse@@Base+0x4e0>
   187e4:	ldr	r3, [fp, #-84]	; 0xffffffac
   187e8:	ldr	r2, [fp, #-92]	; 0xffffffa4
   187ec:	cmp	r3, r2
   187f0:	bge	18d64 <argp_parse@@Base+0xb3c>
   187f4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   187f8:	tst	r2, #4
   187fc:	bne	18d6c <argp_parse@@Base+0xb44>
   18800:	add	r2, r3, #1
   18804:	str	r2, [fp, #-84]	; 0xffffffac
   18808:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1880c:	ldr	r3, [r2, r3, lsl #2]
   18810:	str	r3, [fp, #-136]	; 0xffffff78
   18814:	ldr	r7, [fp, #-136]	; 0xffffff78
   18818:	ldr	r4, [fp, #-84]	; 0xffffffac
   1881c:	sub	r4, r4, #1
   18820:	str	r4, [fp, #-84]	; 0xffffffac
   18824:	ldr	r5, [fp, #-112]	; 0xffffff90
   18828:	ldr	r3, [fp, #-108]	; 0xffffff94
   1882c:	cmp	r3, r5
   18830:	bls	18aec <argp_parse@@Base+0x8c4>
   18834:	mov	r6, #0
   18838:	b	18968 <argp_parse@@Base+0x740>
   1883c:	sub	r3, fp, #148	; 0x94
   18840:	str	r3, [sp, #4]
   18844:	mov	r3, #0
   18848:	str	r3, [sp]
   1884c:	ldr	r3, [fp, #-152]	; 0xffffff68
   18850:	ldr	r2, [fp, #-156]	; 0xffffff64
   18854:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18858:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1885c:	bl	18f88 <argp_parse@@Base+0xd60>
   18860:	mov	r5, r0
   18864:	b	1874c <argp_parse@@Base+0x524>
   18868:	mov	r3, #0
   1886c:	str	r3, [fp, #-100]	; 0xffffff9c
   18870:	cmp	r4, #1
   18874:	ble	187e4 <argp_parse@@Base+0x5bc>
   18878:	sub	r3, r4, #-1073741823	; 0xc0000001
   1887c:	mov	r1, sl
   18880:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18884:	ldr	r0, [r2, r3, lsl #2]
   18888:	bl	110f4 <strcmp@plt>
   1888c:	cmp	r0, #0
   18890:	streq	r4, [fp, #-72]	; 0xffffffb8
   18894:	b	187e4 <argp_parse@@Base+0x5bc>
   18898:	ldr	r3, [fp, #-140]	; 0xffffff74
   1889c:	cmn	r3, #1
   188a0:	bne	18d5c <argp_parse@@Base+0xb34>
   188a4:	ldr	r4, [fp, #-136]	; 0xffffff78
   188a8:	mov	r1, r5
   188ac:	ldr	r0, [fp, #-156]	; 0xffffff64
   188b0:	bl	112e0 <strchr@plt>
   188b4:	subs	r1, r0, #0
   188b8:	beq	18908 <argp_parse@@Base+0x6e0>
   188bc:	ldr	r0, [fp, #-112]	; 0xffffff90
   188c0:	ldr	r2, [fp, #-108]	; 0xffffff94
   188c4:	cmp	r2, r0
   188c8:	bls	18908 <argp_parse@@Base+0x6e0>
   188cc:	ldr	r3, [r0, #8]
   188d0:	cmp	r1, r3
   188d4:	bcc	188f0 <argp_parse@@Base+0x6c8>
   188d8:	add	r0, r0, #36	; 0x24
   188dc:	cmp	r2, r0
   188e0:	bls	18908 <argp_parse@@Base+0x6e0>
   188e4:	ldr	r3, [r0, #8]
   188e8:	cmp	r1, r3
   188ec:	bcs	188d8 <argp_parse@@Base+0x6b0>
   188f0:	mov	r3, r4
   188f4:	mov	r2, r5
   188f8:	sub	r1, fp, #96	; 0x60
   188fc:	bl	17be4 <argp_error@@Base+0x150>
   18900:	cmp	r0, #7
   18904:	bne	187b0 <argp_parse@@Base+0x588>
   18908:	ldr	r3, [pc, #1128]	; 18d78 <argp_parse@@Base+0xb50>
   1890c:	mov	r2, r5
   18910:	movw	r1, #50196	; 0xc414
   18914:	movt	r1, #1
   18918:	sub	r0, fp, #96	; 0x60
   1891c:	bl	17a94 <argp_error@@Base>
   18920:	b	189a8 <argp_parse@@Base+0x780>
   18924:	ldr	r3, [fp, #-84]	; 0xffffffac
   18928:	sub	r3, r3, #1
   1892c:	str	r3, [fp, #-84]	; 0xffffffac
   18930:	mov	r3, r6
   18934:	mov	r2, r9
   18938:	sub	r1, fp, #96	; 0x60
   1893c:	mov	r0, r5
   18940:	bl	17be4 <argp_error@@Base+0x150>
   18944:	add	r5, r5, #36	; 0x24
   18948:	ldr	r2, [fp, #-108]	; 0xffffff94
   1894c:	cmp	r5, r2
   18950:	movcs	r3, #0
   18954:	movcc	r3, #1
   18958:	cmp	r0, #7
   1895c:	movne	r3, #0
   18960:	cmp	r3, #0
   18964:	beq	18a38 <argp_parse@@Base+0x810>
   18968:	ldr	r3, [fp, #-84]	; 0xffffffac
   1896c:	add	r3, r3, #1
   18970:	str	r3, [fp, #-84]	; 0xffffffac
   18974:	mov	r3, r7
   18978:	mov	r2, r6
   1897c:	sub	r1, fp, #96	; 0x60
   18980:	mov	r0, r5
   18984:	bl	17be4 <argp_error@@Base+0x150>
   18988:	cmp	r0, #7
   1898c:	beq	18924 <argp_parse@@Base+0x6fc>
   18990:	add	r5, r5, #36	; 0x24
   18994:	cmp	r0, #0
   18998:	beq	18a48 <argp_parse@@Base+0x820>
   1899c:	cmp	r0, #7
   189a0:	bne	187b0 <argp_parse@@Base+0x588>
   189a4:	mov	r5, #1
   189a8:	add	r5, r5, #1
   189ac:	bics	r3, r5, #2
   189b0:	moveq	r3, #1
   189b4:	movne	r3, #0
   189b8:	cmp	r3, #0
   189bc:	beq	18d00 <argp_parse@@Base+0xad8>
   189c0:	ldr	r3, [fp, #-84]	; 0xffffffac
   189c4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   189c8:	cmp	r3, r2
   189cc:	beq	18bb4 <argp_parse@@Base+0x98c>
   189d0:	ldr	r2, [fp, #4]
   189d4:	cmp	r2, #0
   189d8:	strne	r3, [r2]
   189dc:	beq	18cd8 <argp_parse@@Base+0xab0>
   189e0:	ldr	r5, [fp, #-108]	; 0xffffff94
   189e4:	sub	r5, r5, #36	; 0x24
   189e8:	ldr	r3, [fp, #-112]	; 0xffffff90
   189ec:	cmp	r5, r3
   189f0:	bcc	18d40 <argp_parse@@Base+0xb18>
   189f4:	mov	r6, #4
   189f8:	movt	r6, #256	; 0x100
   189fc:	mov	r7, #0
   18a00:	mov	r3, r7
   18a04:	mov	r2, r6
   18a08:	sub	r1, fp, #96	; 0x60
   18a0c:	mov	r0, r5
   18a10:	bl	17be4 <argp_error@@Base+0x150>
   18a14:	sub	r5, r5, #36	; 0x24
   18a18:	ldr	r3, [fp, #-112]	; 0xffffff90
   18a1c:	cmp	r5, r3
   18a20:	bcc	18d18 <argp_parse@@Base+0xaf0>
   18a24:	cmp	r0, #7
   18a28:	cmpne	r0, #0
   18a2c:	beq	18a00 <argp_parse@@Base+0x7d8>
   18a30:	mov	r4, r0
   18a34:	b	18d28 <argp_parse@@Base+0xb00>
   18a38:	cmp	r0, #0
   18a3c:	bne	1899c <argp_parse@@Base+0x774>
   18a40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18a44:	str	r3, [fp, #-84]	; 0xffffffac
   18a48:	ldr	r3, [fp, #-84]	; 0xffffffac
   18a4c:	cmp	r4, r3
   18a50:	movge	r3, #1
   18a54:	strge	r3, [fp, #-100]	; 0xffffff9c
   18a58:	bge	187b8 <argp_parse@@Base+0x590>
   18a5c:	sub	r4, r3, r4
   18a60:	ldr	r3, [r5, #-24]	; 0xffffffe8
   18a64:	add	r4, r3, r4
   18a68:	str	r4, [r5, #-24]	; 0xffffffe8
   18a6c:	b	187b8 <argp_parse@@Base+0x590>
   18a70:	ldr	r3, [fp, #-152]	; 0xffffff68
   18a74:	ldr	r2, [r3, #12]
   18a78:	cmp	r2, r5
   18a7c:	beq	18ab4 <argp_parse@@Base+0x88c>
   18a80:	ldr	r2, [r3]
   18a84:	cmp	r2, #0
   18a88:	beq	18ae0 <argp_parse@@Base+0x8b8>
   18a8c:	add	r3, r3, #16
   18a90:	ldr	r2, [r3, #12]
   18a94:	cmp	r5, r2
   18a98:	beq	18ab4 <argp_parse@@Base+0x88c>
   18a9c:	ldr	r2, [r3]
   18aa0:	cmp	r2, #0
   18aa4:	bne	18a8c <argp_parse@@Base+0x864>
   18aa8:	movw	r2, #50188	; 0xc40c
   18aac:	movt	r2, #1
   18ab0:	b	18ac8 <argp_parse@@Base+0x8a0>
   18ab4:	ldr	r2, [r3]
   18ab8:	movw	r3, #50188	; 0xc40c
   18abc:	movt	r3, #1
   18ac0:	cmp	r2, #0
   18ac4:	moveq	r2, r3
   18ac8:	ldr	r3, [pc, #680]	; 18d78 <argp_parse@@Base+0xb50>
   18acc:	movw	r1, #50204	; 0xc41c
   18ad0:	movt	r1, #1
   18ad4:	sub	r0, fp, #96	; 0x60
   18ad8:	bl	17a94 <argp_error@@Base>
   18adc:	b	189a8 <argp_parse@@Base+0x780>
   18ae0:	movw	r2, #50188	; 0xc40c
   18ae4:	movt	r2, #1
   18ae8:	b	18ac8 <argp_parse@@Base+0x8a0>
   18aec:	mov	r5, #1
   18af0:	b	189a8 <argp_parse@@Base+0x780>
   18af4:	mov	r4, r0
   18af8:	cmp	r4, #7
   18afc:	beq	18d00 <argp_parse@@Base+0xad8>
   18b00:	ldr	r5, [fp, #-112]	; 0xffffff90
   18b04:	ldr	r3, [fp, #-108]	; 0xffffff94
   18b08:	cmp	r5, r3
   18b0c:	bcs	18b40 <argp_parse@@Base+0x918>
   18b10:	mov	r6, #5
   18b14:	movt	r6, #256	; 0x100
   18b18:	mov	r7, #0
   18b1c:	mov	r3, r7
   18b20:	mov	r2, r6
   18b24:	sub	r1, fp, #96	; 0x60
   18b28:	mov	r0, r5
   18b2c:	bl	17be4 <argp_error@@Base+0x150>
   18b30:	add	r5, r5, #36	; 0x24
   18b34:	ldr	r3, [fp, #-108]	; 0xffffff94
   18b38:	cmp	r5, r3
   18b3c:	bcc	18b1c <argp_parse@@Base+0x8f4>
   18b40:	ldr	r5, [fp, #-108]	; 0xffffff94
   18b44:	sub	r5, r5, #36	; 0x24
   18b48:	ldr	r3, [fp, #-112]	; 0xffffff90
   18b4c:	cmp	r3, r5
   18b50:	bhi	18b84 <argp_parse@@Base+0x95c>
   18b54:	mov	r6, #7
   18b58:	movt	r6, #256	; 0x100
   18b5c:	mov	r7, #0
   18b60:	mov	r3, r7
   18b64:	mov	r2, r6
   18b68:	sub	r1, fp, #96	; 0x60
   18b6c:	mov	r0, r5
   18b70:	bl	17be4 <argp_error@@Base+0x150>
   18b74:	sub	r5, r5, #36	; 0x24
   18b78:	ldr	r3, [fp, #-112]	; 0xffffff90
   18b7c:	cmp	r5, r3
   18b80:	bcs	18b60 <argp_parse@@Base+0x938>
   18b84:	cmp	r4, #7
   18b88:	moveq	r4, #22
   18b8c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18b90:	bl	18f00 <argp_parse@@Base+0xcd8>
   18b94:	mov	r0, r4
   18b98:	sub	sp, fp, #32
   18b9c:	ldrd	r4, [sp]
   18ba0:	ldrd	r6, [sp, #8]
   18ba4:	ldrd	r8, [sp, #16]
   18ba8:	ldrd	sl, [sp, #24]
   18bac:	add	sp, sp, #32
   18bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bb4:	ldr	r6, [fp, #-112]	; 0xffffff90
   18bb8:	ldr	r5, [fp, #-108]	; 0xffffff94
   18bbc:	cmp	r5, r6
   18bc0:	bls	18d48 <argp_parse@@Base+0xb20>
   18bc4:	mov	r4, #0
   18bc8:	mov	r7, #2
   18bcc:	movt	r7, #256	; 0x100
   18bd0:	mov	r8, r4
   18bd4:	mov	r0, r4
   18bd8:	b	18bf8 <argp_parse@@Base+0x9d0>
   18bdc:	add	r6, r6, #36	; 0x24
   18be0:	ldr	r5, [fp, #-108]	; 0xffffff94
   18be4:	cmp	r6, r5
   18be8:	bcs	18c34 <argp_parse@@Base+0xa0c>
   18bec:	cmp	r0, #7
   18bf0:	cmpne	r0, #0
   18bf4:	bne	18c1c <argp_parse@@Base+0x9f4>
   18bf8:	ldr	r3, [r6, #12]
   18bfc:	cmp	r3, #0
   18c00:	bne	18bdc <argp_parse@@Base+0x9b4>
   18c04:	mov	r3, r8
   18c08:	mov	r2, r7
   18c0c:	sub	r1, fp, #96	; 0x60
   18c10:	mov	r0, r6
   18c14:	bl	17be4 <argp_error@@Base+0x150>
   18c18:	b	18bdc <argp_parse@@Base+0x9b4>
   18c1c:	mov	r4, r0
   18c20:	sub	r5, r5, #36	; 0x24
   18c24:	ldr	r3, [fp, #-112]	; 0xffffff90
   18c28:	cmp	r3, r5
   18c2c:	bls	18c48 <argp_parse@@Base+0xa20>
   18c30:	b	18c94 <argp_parse@@Base+0xa6c>
   18c34:	mov	r4, r0
   18c38:	sub	r5, r5, #36	; 0x24
   18c3c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18c40:	cmp	r3, r5
   18c44:	bhi	18cbc <argp_parse@@Base+0xa94>
   18c48:	cmp	r4, #7
   18c4c:	cmpne	r4, #0
   18c50:	bne	18c94 <argp_parse@@Base+0xa6c>
   18c54:	mov	r6, #1
   18c58:	movt	r6, #256	; 0x100
   18c5c:	mov	r7, #0
   18c60:	mov	r3, r7
   18c64:	mov	r2, r6
   18c68:	sub	r1, fp, #96	; 0x60
   18c6c:	mov	r0, r5
   18c70:	bl	17be4 <argp_error@@Base+0x150>
   18c74:	sub	r5, r5, #36	; 0x24
   18c78:	ldr	r3, [fp, #-112]	; 0xffffff90
   18c7c:	cmp	r5, r3
   18c80:	bcc	18cb8 <argp_parse@@Base+0xa90>
   18c84:	cmp	r0, #7
   18c88:	cmpne	r0, #0
   18c8c:	beq	18c60 <argp_parse@@Base+0xa38>
   18c90:	mov	r4, r0
   18c94:	ldr	r3, [fp, #4]
   18c98:	cmp	r3, #0
   18c9c:	beq	18cac <argp_parse@@Base+0xa84>
   18ca0:	ldr	r3, [fp, #-84]	; 0xffffffac
   18ca4:	ldr	r2, [fp, #4]
   18ca8:	str	r3, [r2]
   18cac:	cmp	r4, #0
   18cb0:	beq	189e0 <argp_parse@@Base+0x7b8>
   18cb4:	b	18af8 <argp_parse@@Base+0x8d0>
   18cb8:	mov	r4, r0
   18cbc:	cmp	r4, #7
   18cc0:	bne	18c94 <argp_parse@@Base+0xa6c>
   18cc4:	ldr	r3, [fp, #4]
   18cc8:	cmp	r3, #0
   18ccc:	movne	r4, #0
   18cd0:	bne	18ca0 <argp_parse@@Base+0xa78>
   18cd4:	b	189e0 <argp_parse@@Base+0x7b8>
   18cd8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18cdc:	tst	r3, #2
   18ce0:	bne	18d00 <argp_parse@@Base+0xad8>
   18ce4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18ce8:	cmp	r0, #0
   18cec:	beq	18d00 <argp_parse@@Base+0xad8>
   18cf0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18cf4:	movw	r1, #50216	; 0xc428
   18cf8:	movt	r1, #1
   18cfc:	bl	112ec <fprintf@plt>
   18d00:	mov	r2, #260	; 0x104
   18d04:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18d08:	sub	r0, fp, #96	; 0x60
   18d0c:	bl	179cc <argp_state_help@@Base>
   18d10:	mov	r4, #7
   18d14:	b	18b00 <argp_parse@@Base+0x8d8>
   18d18:	mov	r4, r0
   18d1c:	cmp	r0, #7
   18d20:	movne	r4, r0
   18d24:	moveq	r4, #0
   18d28:	ldr	r5, [fp, #-108]	; 0xffffff94
   18d2c:	sub	r5, r5, #36	; 0x24
   18d30:	ldr	r3, [fp, #-112]	; 0xffffff90
   18d34:	cmp	r3, r5
   18d38:	bls	18b54 <argp_parse@@Base+0x92c>
   18d3c:	b	18b8c <argp_parse@@Base+0x964>
   18d40:	mov	r4, #0
   18d44:	b	18b8c <argp_parse@@Base+0x964>
   18d48:	sub	r5, r5, #36	; 0x24
   18d4c:	cmp	r5, r6
   18d50:	movcc	r4, #0
   18d54:	bcs	18c54 <argp_parse@@Base+0xa2c>
   18d58:	b	18c94 <argp_parse@@Base+0xa6c>
   18d5c:	mov	r3, #0
   18d60:	b	189b8 <argp_parse@@Base+0x790>
   18d64:	mov	r3, #1
   18d68:	b	189b8 <argp_parse@@Base+0x790>
   18d6c:	mov	r3, #1
   18d70:	b	189b8 <argp_parse@@Base+0x790>
   18d74:	andeq	ip, r1, r4, ror #5
   18d78:	andeq	ip, r1, r0, lsl #6
   18d7c:	cmp	r1, #0
   18d80:	beq	18dcc <argp_parse@@Base+0xba4>
   18d84:	ldr	r2, [r1, #52]	; 0x34
   18d88:	ldr	r3, [r2, #48]	; 0x30
   18d8c:	ldr	r1, [r2, #52]	; 0x34
   18d90:	cmp	r3, r1
   18d94:	bcs	18dd4 <argp_parse@@Base+0xbac>
   18d98:	ldr	r2, [r3, #4]
   18d9c:	cmp	r0, r2
   18da0:	beq	18dbc <argp_parse@@Base+0xb94>
   18da4:	add	r3, r3, #36	; 0x24
   18da8:	cmp	r3, r1
   18dac:	bcs	18dc4 <argp_parse@@Base+0xb9c>
   18db0:	ldr	r2, [r3, #4]
   18db4:	cmp	r2, r0
   18db8:	bne	18da4 <argp_parse@@Base+0xb7c>
   18dbc:	ldr	r0, [r3, #24]
   18dc0:	bx	lr
   18dc4:	mov	r0, #0
   18dc8:	bx	lr
   18dcc:	mov	r0, r1
   18dd0:	bx	lr
   18dd4:	mov	r0, #0
   18dd8:	bx	lr
   18ddc:	push	{lr}		; (str lr, [sp, #-4]!)
   18de0:	sub	sp, sp, #12
   18de4:	movw	r1, #54928	; 0xd690
   18de8:	movt	r1, #2
   18dec:	ldr	r3, [r1, #4]
   18df0:	str	r3, [sp]
   18df4:	movw	r3, #50432	; 0xc500
   18df8:	movt	r3, #1
   18dfc:	movw	r2, #50448	; 0xc510
   18e00:	movt	r2, #1
   18e04:	ldr	r1, [r1]
   18e08:	bl	193f0 <argp_parse@@Base+0x11c8>
   18e0c:	add	sp, sp, #12
   18e10:	pop	{pc}		; (ldr pc, [sp], #4)
   18e14:	movw	r3, #54924	; 0xd68c
   18e18:	movt	r3, #2
   18e1c:	movw	r2, #36316	; 0x8ddc
   18e20:	movt	r2, #1
   18e24:	str	r2, [r3]
   18e28:	movw	r3, #54928	; 0xd690
   18e2c:	movt	r3, #2
   18e30:	str	r0, [r3]
   18e34:	str	r1, [r3, #4]
   18e38:	bx	lr
   18e3c:	ldrb	r3, [r0]
   18e40:	cmp	r3, #47	; 0x2f
   18e44:	bne	18e54 <argp_parse@@Base+0xc2c>
   18e48:	ldrb	r3, [r0, #1]!
   18e4c:	cmp	r3, #47	; 0x2f
   18e50:	beq	18e48 <argp_parse@@Base+0xc20>
   18e54:	ldrb	r2, [r0]
   18e58:	cmp	r2, #0
   18e5c:	bxeq	lr
   18e60:	push	{lr}		; (str lr, [sp, #-4]!)
   18e64:	mov	r1, r0
   18e68:	mov	r3, #0
   18e6c:	mov	lr, #1
   18e70:	mov	ip, r3
   18e74:	b	18e90 <argp_parse@@Base+0xc68>
   18e78:	cmp	r3, #0
   18e7c:	movne	r0, r1
   18e80:	movne	r3, ip
   18e84:	ldrb	r2, [r1, #1]!
   18e88:	cmp	r2, #0
   18e8c:	beq	18ea0 <argp_parse@@Base+0xc78>
   18e90:	cmp	r2, #47	; 0x2f
   18e94:	moveq	r3, lr
   18e98:	bne	18e78 <argp_parse@@Base+0xc50>
   18e9c:	b	18e84 <argp_parse@@Base+0xc5c>
   18ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ea4:	str	r4, [sp, #-8]!
   18ea8:	str	lr, [sp, #4]
   18eac:	mov	r4, r0
   18eb0:	bl	112d4 <strlen@plt>
   18eb4:	cmp	r0, #1
   18eb8:	bls	18ed8 <argp_parse@@Base+0xcb0>
   18ebc:	add	r3, r4, r0
   18ec0:	ldrb	r3, [r3, #-1]
   18ec4:	cmp	r3, #47	; 0x2f
   18ec8:	subeq	r0, r0, #2
   18ecc:	addeq	r3, r4, r0
   18ed0:	rsbeq	r1, r4, #1
   18ed4:	beq	18ee4 <argp_parse@@Base+0xcbc>
   18ed8:	ldr	r4, [sp]
   18edc:	add	sp, sp, #4
   18ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ee4:	add	r0, r1, r3
   18ee8:	cmp	r3, r4
   18eec:	beq	18ed8 <argp_parse@@Base+0xcb0>
   18ef0:	ldrb	r2, [r3], #-1
   18ef4:	cmp	r2, #47	; 0x2f
   18ef8:	bne	18ed8 <argp_parse@@Base+0xcb0>
   18efc:	b	18ee4 <argp_parse@@Base+0xcbc>
   18f00:	strd	r4, [sp, #-12]!
   18f04:	str	lr, [sp, #8]
   18f08:	sub	sp, sp, #12
   18f0c:	mov	r5, r0
   18f10:	bl	112f8 <__errno_location@plt>
   18f14:	mov	r4, r0
   18f18:	ldr	r3, [r0]
   18f1c:	str	r3, [sp]
   18f20:	str	r3, [sp, #4]
   18f24:	mov	r3, #0
   18f28:	str	r3, [r0]
   18f2c:	mov	r0, r5
   18f30:	bl	11160 <free@plt>
   18f34:	ldr	r3, [r4]
   18f38:	clz	r3, r3
   18f3c:	lsr	r3, r3, #5
   18f40:	add	r2, sp, #8
   18f44:	add	r3, r2, r3, lsl #2
   18f48:	ldr	r3, [r3, #-8]
   18f4c:	str	r3, [r4]
   18f50:	add	sp, sp, #12
   18f54:	ldrd	r4, [sp]
   18f58:	add	sp, sp, #8
   18f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f60:	push	{lr}		; (str lr, [sp, #-4]!)
   18f64:	sub	sp, sp, #20
   18f68:	mov	ip, #0
   18f6c:	str	ip, [sp, #8]
   18f70:	str	ip, [sp, #4]
   18f74:	ldr	ip, [sp, #24]
   18f78:	str	ip, [sp]
   18f7c:	bl	1aeb8 <argp_parse@@Base+0x2c90>
   18f80:	add	sp, sp, #20
   18f84:	pop	{pc}		; (ldr pc, [sp], #4)
   18f88:	push	{lr}		; (str lr, [sp, #-4]!)
   18f8c:	sub	sp, sp, #20
   18f90:	mov	ip, #0
   18f94:	str	ip, [sp, #12]
   18f98:	ldr	lr, [sp, #28]
   18f9c:	str	lr, [sp, #8]
   18fa0:	str	ip, [sp, #4]
   18fa4:	ldr	ip, [sp, #24]
   18fa8:	str	ip, [sp]
   18fac:	bl	1a8fc <argp_parse@@Base+0x26d4>
   18fb0:	add	sp, sp, #20
   18fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   18fb8:	push	{lr}		; (str lr, [sp, #-4]!)
   18fbc:	sub	sp, sp, #20
   18fc0:	mov	ip, #0
   18fc4:	str	ip, [sp, #8]
   18fc8:	mov	ip, #1
   18fcc:	str	ip, [sp, #4]
   18fd0:	ldr	ip, [sp, #24]
   18fd4:	str	ip, [sp]
   18fd8:	bl	1aeb8 <argp_parse@@Base+0x2c90>
   18fdc:	add	sp, sp, #20
   18fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   18fe4:	push	{lr}		; (str lr, [sp, #-4]!)
   18fe8:	sub	sp, sp, #20
   18fec:	mov	ip, #0
   18ff0:	str	ip, [sp, #12]
   18ff4:	ldr	ip, [sp, #28]
   18ff8:	str	ip, [sp, #8]
   18ffc:	mov	ip, #1
   19000:	str	ip, [sp, #4]
   19004:	ldr	ip, [sp, #24]
   19008:	str	ip, [sp]
   1900c:	bl	1a8fc <argp_parse@@Base+0x26d4>
   19010:	add	sp, sp, #20
   19014:	pop	{pc}		; (ldr pc, [sp], #4)
   19018:	strd	r4, [sp, #-16]!
   1901c:	str	r6, [sp, #8]
   19020:	str	lr, [sp, #12]
   19024:	subs	r4, r0, #0
   19028:	beq	190c4 <argp_parse@@Base+0xe9c>
   1902c:	mov	r1, #47	; 0x2f
   19030:	mov	r0, r4
   19034:	bl	11388 <strrchr@plt>
   19038:	subs	r5, r0, #0
   1903c:	beq	1909c <argp_parse@@Base+0xe74>
   19040:	add	r6, r5, #1
   19044:	sub	r3, r6, r4
   19048:	cmp	r3, #6
   1904c:	ble	1909c <argp_parse@@Base+0xe74>
   19050:	mov	r2, #7
   19054:	movw	r1, #50520	; 0xc558
   19058:	movt	r1, #1
   1905c:	sub	r0, r5, #6
   19060:	bl	11418 <strncmp@plt>
   19064:	cmp	r0, #0
   19068:	bne	1909c <argp_parse@@Base+0xe74>
   1906c:	mov	r2, #3
   19070:	movw	r1, #50528	; 0xc560
   19074:	movt	r1, #1
   19078:	mov	r0, r6
   1907c:	bl	11418 <strncmp@plt>
   19080:	cmp	r0, #0
   19084:	movne	r4, r6
   19088:	bne	1909c <argp_parse@@Base+0xe74>
   1908c:	add	r4, r5, #4
   19090:	movw	r3, #54816	; 0xd620
   19094:	movt	r3, #2
   19098:	str	r4, [r3]
   1909c:	movw	r3, #54936	; 0xd698
   190a0:	movt	r3, #2
   190a4:	str	r4, [r3]
   190a8:	movw	r3, #54820	; 0xd624
   190ac:	movt	r3, #2
   190b0:	str	r4, [r3]
   190b4:	ldrd	r4, [sp]
   190b8:	ldr	r6, [sp, #8]
   190bc:	add	sp, sp, #12
   190c0:	pop	{pc}		; (ldr pc, [sp], #4)
   190c4:	movw	r3, #54824	; 0xd628
   190c8:	movt	r3, #2
   190cc:	ldr	r3, [r3]
   190d0:	mov	r2, #55	; 0x37
   190d4:	mov	r1, #1
   190d8:	movw	r0, #50464	; 0xc520
   190dc:	movt	r0, #1
   190e0:	bl	11220 <fwrite@plt>
   190e4:	bl	11424 <abort@plt>
   190e8:	strd	r4, [sp, #-16]!
   190ec:	str	r6, [sp, #8]
   190f0:	str	lr, [sp, #12]
   190f4:	sub	sp, sp, #32
   190f8:	mov	r4, r0
   190fc:	ldr	r5, [sp, #48]	; 0x30
   19100:	ldr	r6, [sp, #52]	; 0x34
   19104:	cmp	r1, #0
   19108:	beq	191a4 <argp_parse@@Base+0xf7c>
   1910c:	str	r3, [sp]
   19110:	mov	r3, r2
   19114:	mov	r2, r1
   19118:	movw	r1, #50532	; 0xc564
   1911c:	movt	r1, #1
   19120:	bl	112ec <fprintf@plt>
   19124:	movw	r3, #2022	; 0x7e6
   19128:	movw	r2, #50552	; 0xc578
   1912c:	movt	r2, #1
   19130:	movw	r1, #51320	; 0xc878
   19134:	movt	r1, #1
   19138:	mov	r0, r4
   1913c:	bl	112ec <fprintf@plt>
   19140:	mov	r1, r4
   19144:	mov	r0, #10
   19148:	bl	113a0 <fputc@plt>
   1914c:	movw	r2, #50556	; 0xc57c
   19150:	movt	r2, #1
   19154:	movw	r1, #50592	; 0xc5a0
   19158:	movt	r1, #1
   1915c:	mov	r0, r4
   19160:	bl	112ec <fprintf@plt>
   19164:	mov	r1, r4
   19168:	mov	r0, #10
   1916c:	bl	113a0 <fputc@plt>
   19170:	cmp	r6, #9
   19174:	ldrls	pc, [pc, r6, lsl #2]
   19178:	b	1939c <argp_parse@@Base+0x1174>
   1917c:	andeq	r9, r1, r8, asr #3
   19180:			; <UNDEFINED> instruction: 0x000191b4
   19184:	ldrdeq	r9, [r1], -ip
   19188:	strdeq	r9, [r1], -r8
   1918c:	andeq	r9, r1, ip, lsl r2
   19190:	andeq	r9, r1, r8, asr #4
   19194:	andeq	r9, r1, ip, ror r2
   19198:			; <UNDEFINED> instruction: 0x000192b8
   1919c:	strdeq	r9, [r1], -ip
   191a0:	andeq	r9, r1, r8, asr #6
   191a4:	movw	r1, #50544	; 0xc570
   191a8:	movt	r1, #1
   191ac:	bl	112ec <fprintf@plt>
   191b0:	b	19124 <argp_parse@@Base+0xefc>
   191b4:	ldr	r2, [r5]
   191b8:	movw	r1, #50764	; 0xc64c
   191bc:	movt	r1, #1
   191c0:	mov	r0, r4
   191c4:	bl	112ec <fprintf@plt>
   191c8:	add	sp, sp, #32
   191cc:	ldrd	r4, [sp]
   191d0:	ldr	r6, [sp, #8]
   191d4:	add	sp, sp, #12
   191d8:	pop	{pc}		; (ldr pc, [sp], #4)
   191dc:	ldr	r3, [r5, #4]
   191e0:	ldr	r2, [r5]
   191e4:	movw	r1, #50780	; 0xc65c
   191e8:	movt	r1, #1
   191ec:	mov	r0, r4
   191f0:	bl	112ec <fprintf@plt>
   191f4:	b	191c8 <argp_parse@@Base+0xfa0>
   191f8:	ldr	r3, [r5, #8]
   191fc:	str	r3, [sp]
   19200:	ldr	r3, [r5, #4]
   19204:	ldr	r2, [r5]
   19208:	movw	r1, #50804	; 0xc674
   1920c:	movt	r1, #1
   19210:	mov	r0, r4
   19214:	bl	112ec <fprintf@plt>
   19218:	b	191c8 <argp_parse@@Base+0xfa0>
   1921c:	ldr	r3, [r5, #12]
   19220:	str	r3, [sp, #4]
   19224:	ldr	r3, [r5, #8]
   19228:	str	r3, [sp]
   1922c:	ldr	r3, [r5, #4]
   19230:	ldr	r2, [r5]
   19234:	movw	r1, #50832	; 0xc690
   19238:	movt	r1, #1
   1923c:	mov	r0, r4
   19240:	bl	112ec <fprintf@plt>
   19244:	b	191c8 <argp_parse@@Base+0xfa0>
   19248:	ldr	r3, [r5, #16]
   1924c:	str	r3, [sp, #8]
   19250:	ldr	r3, [r5, #12]
   19254:	str	r3, [sp, #4]
   19258:	ldr	r3, [r5, #8]
   1925c:	str	r3, [sp]
   19260:	ldr	r3, [r5, #4]
   19264:	ldr	r2, [r5]
   19268:	movw	r1, #50864	; 0xc6b0
   1926c:	movt	r1, #1
   19270:	mov	r0, r4
   19274:	bl	112ec <fprintf@plt>
   19278:	b	191c8 <argp_parse@@Base+0xfa0>
   1927c:	ldr	r3, [r5, #20]
   19280:	str	r3, [sp, #12]
   19284:	ldr	r3, [r5, #16]
   19288:	str	r3, [sp, #8]
   1928c:	ldr	r3, [r5, #12]
   19290:	str	r3, [sp, #4]
   19294:	ldr	r3, [r5, #8]
   19298:	str	r3, [sp]
   1929c:	ldr	r3, [r5, #4]
   192a0:	ldr	r2, [r5]
   192a4:	movw	r1, #50900	; 0xc6d4
   192a8:	movt	r1, #1
   192ac:	mov	r0, r4
   192b0:	bl	112ec <fprintf@plt>
   192b4:	b	191c8 <argp_parse@@Base+0xfa0>
   192b8:	ldr	r3, [r5, #24]
   192bc:	str	r3, [sp, #16]
   192c0:	ldr	r3, [r5, #20]
   192c4:	str	r3, [sp, #12]
   192c8:	ldr	r3, [r5, #16]
   192cc:	str	r3, [sp, #8]
   192d0:	ldr	r3, [r5, #12]
   192d4:	str	r3, [sp, #4]
   192d8:	ldr	r3, [r5, #8]
   192dc:	str	r3, [sp]
   192e0:	ldr	r3, [r5, #4]
   192e4:	ldr	r2, [r5]
   192e8:	movw	r1, #50940	; 0xc6fc
   192ec:	movt	r1, #1
   192f0:	mov	r0, r4
   192f4:	bl	112ec <fprintf@plt>
   192f8:	b	191c8 <argp_parse@@Base+0xfa0>
   192fc:	ldr	r3, [r5, #28]
   19300:	str	r3, [sp, #20]
   19304:	ldr	r3, [r5, #24]
   19308:	str	r3, [sp, #16]
   1930c:	ldr	r3, [r5, #20]
   19310:	str	r3, [sp, #12]
   19314:	ldr	r3, [r5, #16]
   19318:	str	r3, [sp, #8]
   1931c:	ldr	r3, [r5, #12]
   19320:	str	r3, [sp, #4]
   19324:	ldr	r3, [r5, #8]
   19328:	str	r3, [sp]
   1932c:	ldr	r3, [r5, #4]
   19330:	ldr	r2, [r5]
   19334:	movw	r1, #50984	; 0xc728
   19338:	movt	r1, #1
   1933c:	mov	r0, r4
   19340:	bl	112ec <fprintf@plt>
   19344:	b	191c8 <argp_parse@@Base+0xfa0>
   19348:	ldr	r3, [r5, #32]
   1934c:	str	r3, [sp, #24]
   19350:	ldr	r3, [r5, #28]
   19354:	str	r3, [sp, #20]
   19358:	ldr	r3, [r5, #24]
   1935c:	str	r3, [sp, #16]
   19360:	ldr	r3, [r5, #20]
   19364:	str	r3, [sp, #12]
   19368:	ldr	r3, [r5, #16]
   1936c:	str	r3, [sp, #8]
   19370:	ldr	r3, [r5, #12]
   19374:	str	r3, [sp, #4]
   19378:	ldr	r3, [r5, #8]
   1937c:	str	r3, [sp]
   19380:	ldr	r3, [r5, #4]
   19384:	ldr	r2, [r5]
   19388:	movw	r1, #51032	; 0xc758
   1938c:	movt	r1, #1
   19390:	mov	r0, r4
   19394:	bl	112ec <fprintf@plt>
   19398:	b	191c8 <argp_parse@@Base+0xfa0>
   1939c:	ldr	r3, [r5, #32]
   193a0:	str	r3, [sp, #24]
   193a4:	ldr	r3, [r5, #28]
   193a8:	str	r3, [sp, #20]
   193ac:	ldr	r3, [r5, #24]
   193b0:	str	r3, [sp, #16]
   193b4:	ldr	r3, [r5, #20]
   193b8:	str	r3, [sp, #12]
   193bc:	ldr	r3, [r5, #16]
   193c0:	str	r3, [sp, #8]
   193c4:	ldr	r3, [r5, #12]
   193c8:	str	r3, [sp, #4]
   193cc:	ldr	r3, [r5, #8]
   193d0:	str	r3, [sp]
   193d4:	ldr	r3, [r5, #4]
   193d8:	ldr	r2, [r5]
   193dc:	movw	r1, #51084	; 0xc78c
   193e0:	movt	r1, #1
   193e4:	mov	r0, r4
   193e8:	bl	112ec <fprintf@plt>
   193ec:	b	191c8 <argp_parse@@Base+0xfa0>
   193f0:	strd	r4, [sp, #-12]!
   193f4:	str	lr, [sp, #8]
   193f8:	sub	sp, sp, #12
   193fc:	ldr	r5, [sp, #24]
   19400:	ldr	ip, [r5]
   19404:	cmp	ip, #0
   19408:	beq	19440 <argp_parse@@Base+0x1218>
   1940c:	mov	lr, r5
   19410:	mov	ip, #0
   19414:	add	ip, ip, #1
   19418:	ldr	r4, [lr, #4]!
   1941c:	cmp	r4, #0
   19420:	bne	19414 <argp_parse@@Base+0x11ec>
   19424:	str	ip, [sp, #4]
   19428:	str	r5, [sp]
   1942c:	bl	190e8 <argp_parse@@Base+0xec0>
   19430:	add	sp, sp, #12
   19434:	ldrd	r4, [sp]
   19438:	add	sp, sp, #8
   1943c:	pop	{pc}		; (ldr pc, [sp], #4)
   19440:	mov	ip, #0
   19444:	b	19424 <argp_parse@@Base+0x11fc>
   19448:	strd	r4, [sp, #-12]!
   1944c:	str	lr, [sp, #8]
   19450:	sub	sp, sp, #52	; 0x34
   19454:	ldr	r5, [sp, #64]	; 0x40
   19458:	add	r4, sp, #8
   1945c:	mov	ip, #0
   19460:	ldr	lr, [r5], #4
   19464:	str	lr, [r4], #4
   19468:	cmp	lr, #0
   1946c:	beq	1947c <argp_parse@@Base+0x1254>
   19470:	add	ip, ip, #1
   19474:	cmp	ip, #10
   19478:	bne	19460 <argp_parse@@Base+0x1238>
   1947c:	str	ip, [sp, #4]
   19480:	add	ip, sp, #8
   19484:	str	ip, [sp]
   19488:	bl	190e8 <argp_parse@@Base+0xec0>
   1948c:	add	sp, sp, #52	; 0x34
   19490:	ldrd	r4, [sp]
   19494:	add	sp, sp, #8
   19498:	pop	{pc}		; (ldr pc, [sp], #4)
   1949c:	push	{r3}		; (str r3, [sp, #-4]!)
   194a0:	push	{lr}		; (str lr, [sp, #-4]!)
   194a4:	sub	sp, sp, #16
   194a8:	add	r3, sp, #24
   194ac:	str	r3, [sp, #12]
   194b0:	str	r3, [sp]
   194b4:	ldr	r3, [sp, #20]
   194b8:	bl	19448 <argp_parse@@Base+0x1220>
   194bc:	add	sp, sp, #16
   194c0:	pop	{lr}		; (ldr lr, [sp], #4)
   194c4:	add	sp, sp, #4
   194c8:	bx	lr
   194cc:	str	r4, [sp, #-8]!
   194d0:	str	lr, [sp, #4]
   194d4:	movw	r3, #54828	; 0xd62c
   194d8:	movt	r3, #2
   194dc:	ldr	r1, [r3]
   194e0:	mov	r0, #10
   194e4:	bl	113a0 <fputc@plt>
   194e8:	movw	r1, #51144	; 0xc7c8
   194ec:	movt	r1, #1
   194f0:	movw	r0, #51168	; 0xc7e0
   194f4:	movt	r0, #1
   194f8:	bl	11118 <printf@plt>
   194fc:	movw	r2, #51188	; 0xc7f4
   19500:	movt	r2, #1
   19504:	movw	r1, #50448	; 0xc510
   19508:	movt	r1, #1
   1950c:	movw	r0, #51228	; 0xc81c
   19510:	movt	r0, #1
   19514:	bl	11118 <printf@plt>
   19518:	movw	r1, #51248	; 0xc830
   1951c:	movt	r1, #1
   19520:	movw	r0, #51280	; 0xc850
   19524:	movt	r0, #1
   19528:	bl	11118 <printf@plt>
   1952c:	ldr	r4, [sp]
   19530:	add	sp, sp, #4
   19534:	pop	{pc}		; (ldr pc, [sp], #4)
   19538:	str	r4, [sp, #-8]!
   1953c:	str	lr, [sp, #4]
   19540:	bl	19a70 <argp_parse@@Base+0x1848>
   19544:	cmp	r0, #0
   19548:	beq	19558 <argp_parse@@Base+0x1330>
   1954c:	ldr	r4, [sp]
   19550:	add	sp, sp, #4
   19554:	pop	{pc}		; (ldr pc, [sp], #4)
   19558:	bl	199cc <argp_parse@@Base+0x17a4>
   1955c:	str	r4, [sp, #-8]!
   19560:	str	lr, [sp, #4]
   19564:	bl	19a70 <argp_parse@@Base+0x1848>
   19568:	cmp	r0, #0
   1956c:	beq	1957c <argp_parse@@Base+0x1354>
   19570:	ldr	r4, [sp]
   19574:	add	sp, sp, #4
   19578:	pop	{pc}		; (ldr pc, [sp], #4)
   1957c:	bl	199cc <argp_parse@@Base+0x17a4>
   19580:	str	r4, [sp, #-8]!
   19584:	str	lr, [sp, #4]
   19588:	bl	19538 <argp_parse@@Base+0x1310>
   1958c:	ldr	r4, [sp]
   19590:	add	sp, sp, #4
   19594:	pop	{pc}		; (ldr pc, [sp], #4)
   19598:	strd	r4, [sp, #-16]!
   1959c:	str	r6, [sp, #8]
   195a0:	str	lr, [sp, #12]
   195a4:	mov	r5, r0
   195a8:	mov	r4, r1
   195ac:	bl	19aac <argp_parse@@Base+0x1884>
   195b0:	cmp	r0, #0
   195b4:	beq	195c8 <argp_parse@@Base+0x13a0>
   195b8:	ldrd	r4, [sp]
   195bc:	ldr	r6, [sp, #8]
   195c0:	add	sp, sp, #12
   195c4:	pop	{pc}		; (ldr pc, [sp], #4)
   195c8:	adds	r4, r4, #0
   195cc:	movne	r4, #1
   195d0:	cmp	r5, #0
   195d4:	moveq	r4, #1
   195d8:	cmp	r4, #0
   195dc:	beq	195b8 <argp_parse@@Base+0x1390>
   195e0:	bl	199cc <argp_parse@@Base+0x17a4>
   195e4:	str	r4, [sp, #-8]!
   195e8:	str	lr, [sp, #4]
   195ec:	cmp	r1, #0
   195f0:	orreq	r1, r1, #1
   195f4:	bl	19aac <argp_parse@@Base+0x1884>
   195f8:	cmp	r0, #0
   195fc:	beq	1960c <argp_parse@@Base+0x13e4>
   19600:	ldr	r4, [sp]
   19604:	add	sp, sp, #4
   19608:	pop	{pc}		; (ldr pc, [sp], #4)
   1960c:	bl	199cc <argp_parse@@Base+0x17a4>
   19610:	strd	r4, [sp, #-16]!
   19614:	str	r6, [sp, #8]
   19618:	str	lr, [sp, #12]
   1961c:	mov	r4, r0
   19620:	mov	r6, r1
   19624:	mov	r5, r2
   19628:	bl	1af5c <argp_parse@@Base+0x2d34>
   1962c:	cmp	r0, #0
   19630:	beq	19644 <argp_parse@@Base+0x141c>
   19634:	ldrd	r4, [sp]
   19638:	ldr	r6, [sp, #8]
   1963c:	add	sp, sp, #12
   19640:	pop	{pc}		; (ldr pc, [sp], #4)
   19644:	cmp	r4, #0
   19648:	beq	19658 <argp_parse@@Base+0x1430>
   1964c:	cmp	r6, #0
   19650:	cmpne	r5, #0
   19654:	beq	19634 <argp_parse@@Base+0x140c>
   19658:	bl	199cc <argp_parse@@Base+0x17a4>
   1965c:	str	r4, [sp, #-8]!
   19660:	str	lr, [sp, #4]
   19664:	bl	19610 <argp_parse@@Base+0x13e8>
   19668:	ldr	r4, [sp]
   1966c:	add	sp, sp, #4
   19670:	pop	{pc}		; (ldr pc, [sp], #4)
   19674:	str	r4, [sp, #-8]!
   19678:	str	lr, [sp, #4]
   1967c:	mov	ip, r1
   19680:	mov	r3, r2
   19684:	cmp	r2, #0
   19688:	cmpne	r1, #0
   1968c:	moveq	r3, #1
   19690:	moveq	ip, r3
   19694:	mov	r2, r3
   19698:	mov	r1, ip
   1969c:	bl	1af5c <argp_parse@@Base+0x2d34>
   196a0:	cmp	r0, #0
   196a4:	beq	196b4 <argp_parse@@Base+0x148c>
   196a8:	ldr	r4, [sp]
   196ac:	add	sp, sp, #4
   196b0:	pop	{pc}		; (ldr pc, [sp], #4)
   196b4:	bl	199cc <argp_parse@@Base+0x17a4>
   196b8:	str	r4, [sp, #-8]!
   196bc:	str	lr, [sp, #4]
   196c0:	mov	r2, r1
   196c4:	mov	r1, r0
   196c8:	mov	r0, #0
   196cc:	bl	19610 <argp_parse@@Base+0x13e8>
   196d0:	ldr	r4, [sp]
   196d4:	add	sp, sp, #4
   196d8:	pop	{pc}		; (ldr pc, [sp], #4)
   196dc:	str	r4, [sp, #-8]!
   196e0:	str	lr, [sp, #4]
   196e4:	mov	r2, r1
   196e8:	mov	r1, r0
   196ec:	mov	r0, #0
   196f0:	bl	19674 <argp_parse@@Base+0x144c>
   196f4:	ldr	r4, [sp]
   196f8:	add	sp, sp, #4
   196fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19700:	strd	r4, [sp, #-16]!
   19704:	str	r6, [sp, #8]
   19708:	str	lr, [sp, #12]
   1970c:	mov	r5, r1
   19710:	ldr	r4, [r1]
   19714:	cmp	r0, #0
   19718:	beq	19748 <argp_parse@@Base+0x1520>
   1971c:	lsr	r3, r4, #1
   19720:	add	r3, r3, #1
   19724:	adds	r4, r4, r3
   19728:	bcs	19764 <argp_parse@@Base+0x153c>
   1972c:	mov	r1, r4
   19730:	bl	19610 <argp_parse@@Base+0x13e8>
   19734:	str	r4, [r5]
   19738:	ldrd	r4, [sp]
   1973c:	ldr	r6, [sp, #8]
   19740:	add	sp, sp, #12
   19744:	pop	{pc}		; (ldr pc, [sp], #4)
   19748:	cmp	r4, #0
   1974c:	bne	1972c <argp_parse@@Base+0x1504>
   19750:	mov	r4, #64	; 0x40
   19754:	udiv	r4, r4, r2
   19758:	cmp	r2, #64	; 0x40
   1975c:	addhi	r4, r4, #1
   19760:	b	1972c <argp_parse@@Base+0x1504>
   19764:	bl	199cc <argp_parse@@Base+0x17a4>
   19768:	str	r4, [sp, #-8]!
   1976c:	str	lr, [sp, #4]
   19770:	mov	r2, #1
   19774:	bl	19700 <argp_parse@@Base+0x14d8>
   19778:	ldr	r4, [sp]
   1977c:	add	sp, sp, #4
   19780:	pop	{pc}		; (ldr pc, [sp], #4)
   19784:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19788:	strd	r6, [sp, #8]
   1978c:	str	r8, [sp, #16]
   19790:	str	lr, [sp, #20]
   19794:	mov	r5, r1
   19798:	ldr	lr, [sp, #24]
   1979c:	ldr	ip, [r1]
   197a0:	asr	r4, ip, #1
   197a4:	adds	r4, ip, r4
   197a8:	movvs	r1, #1
   197ac:	movvc	r1, #0
   197b0:	cmp	r1, #0
   197b4:	mvnne	r4, #-2147483648	; 0x80000000
   197b8:	mvn	r8, r3
   197bc:	lsr	r8, r8, #31
   197c0:	cmp	r3, r4
   197c4:	movge	r1, #0
   197c8:	andlt	r1, r8, #1
   197cc:	cmp	r1, #0
   197d0:	movne	r4, r3
   197d4:	smull	r6, r7, r4, lr
   197d8:	asr	r1, r6, #31
   197dc:	cmp	r1, r7
   197e0:	bne	197f8 <argp_parse@@Base+0x15d0>
   197e4:	mov	r1, r6
   197e8:	cmp	r6, #63	; 0x3f
   197ec:	movle	r1, #64	; 0x40
   197f0:	ble	197fc <argp_parse@@Base+0x15d4>
   197f4:	b	19808 <argp_parse@@Base+0x15e0>
   197f8:	mvn	r1, #-2147483648	; 0x80000000
   197fc:	sdiv	r4, r1, lr
   19800:	mls	r6, lr, r4, r1
   19804:	sub	r1, r1, r6
   19808:	cmp	r0, #0
   1980c:	moveq	r6, #0
   19810:	streq	r6, [r5]
   19814:	sub	r6, r4, ip
   19818:	cmp	r6, r2
   1981c:	bge	19854 <argp_parse@@Base+0x162c>
   19820:	adds	r2, ip, r2
   19824:	mov	r4, r2
   19828:	bvs	19870 <argp_parse@@Base+0x1648>
   1982c:	cmp	r2, r3
   19830:	movle	r3, #0
   19834:	andgt	r3, r8, #1
   19838:	cmp	r3, #0
   1983c:	bne	19870 <argp_parse@@Base+0x1648>
   19840:	smull	r2, r3, r2, lr
   19844:	asr	ip, r2, #31
   19848:	mov	r1, r2
   1984c:	cmp	ip, r3
   19850:	bne	19870 <argp_parse@@Base+0x1648>
   19854:	bl	19598 <argp_parse@@Base+0x1370>
   19858:	str	r4, [r5]
   1985c:	ldrd	r4, [sp]
   19860:	ldrd	r6, [sp, #8]
   19864:	ldr	r8, [sp, #16]
   19868:	add	sp, sp, #20
   1986c:	pop	{pc}		; (ldr pc, [sp], #4)
   19870:	bl	199cc <argp_parse@@Base+0x17a4>
   19874:	str	r4, [sp, #-8]!
   19878:	str	lr, [sp, #4]
   1987c:	bl	199fc <argp_parse@@Base+0x17d4>
   19880:	cmp	r0, #0
   19884:	beq	19894 <argp_parse@@Base+0x166c>
   19888:	ldr	r4, [sp]
   1988c:	add	sp, sp, #4
   19890:	pop	{pc}		; (ldr pc, [sp], #4)
   19894:	bl	199cc <argp_parse@@Base+0x17a4>
   19898:	str	r4, [sp, #-8]!
   1989c:	str	lr, [sp, #4]
   198a0:	mov	r1, #1
   198a4:	bl	19874 <argp_parse@@Base+0x164c>
   198a8:	ldr	r4, [sp]
   198ac:	add	sp, sp, #4
   198b0:	pop	{pc}		; (ldr pc, [sp], #4)
   198b4:	str	r4, [sp, #-8]!
   198b8:	str	lr, [sp, #4]
   198bc:	bl	199fc <argp_parse@@Base+0x17d4>
   198c0:	cmp	r0, #0
   198c4:	beq	198d4 <argp_parse@@Base+0x16ac>
   198c8:	ldr	r4, [sp]
   198cc:	add	sp, sp, #4
   198d0:	pop	{pc}		; (ldr pc, [sp], #4)
   198d4:	bl	199cc <argp_parse@@Base+0x17a4>
   198d8:	str	r4, [sp, #-8]!
   198dc:	str	lr, [sp, #4]
   198e0:	mov	r1, #1
   198e4:	bl	198b4 <argp_parse@@Base+0x168c>
   198e8:	ldr	r4, [sp]
   198ec:	add	sp, sp, #4
   198f0:	pop	{pc}		; (ldr pc, [sp], #4)
   198f4:	strd	r4, [sp, #-16]!
   198f8:	str	r6, [sp, #8]
   198fc:	str	lr, [sp, #12]
   19900:	mov	r5, r0
   19904:	mov	r4, r1
   19908:	mov	r0, r1
   1990c:	bl	19538 <argp_parse@@Base+0x1310>
   19910:	mov	r2, r4
   19914:	mov	r1, r5
   19918:	bl	11184 <memcpy@plt>
   1991c:	ldrd	r4, [sp]
   19920:	ldr	r6, [sp, #8]
   19924:	add	sp, sp, #12
   19928:	pop	{pc}		; (ldr pc, [sp], #4)
   1992c:	strd	r4, [sp, #-16]!
   19930:	str	r6, [sp, #8]
   19934:	str	lr, [sp, #12]
   19938:	mov	r5, r0
   1993c:	mov	r4, r1
   19940:	mov	r0, r1
   19944:	bl	1955c <argp_parse@@Base+0x1334>
   19948:	mov	r2, r4
   1994c:	mov	r1, r5
   19950:	bl	11184 <memcpy@plt>
   19954:	ldrd	r4, [sp]
   19958:	ldr	r6, [sp, #8]
   1995c:	add	sp, sp, #12
   19960:	pop	{pc}		; (ldr pc, [sp], #4)
   19964:	strd	r4, [sp, #-16]!
   19968:	str	r6, [sp, #8]
   1996c:	str	lr, [sp, #12]
   19970:	mov	r5, r0
   19974:	mov	r4, r1
   19978:	add	r0, r1, #1
   1997c:	bl	1955c <argp_parse@@Base+0x1334>
   19980:	mov	r2, #0
   19984:	strb	r2, [r0, r4]
   19988:	mov	r2, r4
   1998c:	mov	r1, r5
   19990:	bl	11184 <memcpy@plt>
   19994:	ldrd	r4, [sp]
   19998:	ldr	r6, [sp, #8]
   1999c:	add	sp, sp, #12
   199a0:	pop	{pc}		; (ldr pc, [sp], #4)
   199a4:	str	r4, [sp, #-8]!
   199a8:	str	lr, [sp, #4]
   199ac:	mov	r4, r0
   199b0:	bl	112d4 <strlen@plt>
   199b4:	add	r1, r0, #1
   199b8:	mov	r0, r4
   199bc:	bl	198f4 <argp_parse@@Base+0x16cc>
   199c0:	ldr	r4, [sp]
   199c4:	add	sp, sp, #4
   199c8:	pop	{pc}		; (ldr pc, [sp], #4)
   199cc:	str	r4, [sp, #-8]!
   199d0:	str	lr, [sp, #4]
   199d4:	movw	r3, #54796	; 0xd60c
   199d8:	movt	r3, #2
   199dc:	ldr	r0, [r3]
   199e0:	movw	r3, #51368	; 0xc8a8
   199e4:	movt	r3, #1
   199e8:	movw	r2, #45492	; 0xb1b4
   199ec:	movt	r2, #1
   199f0:	mov	r1, #0
   199f4:	bl	11238 <error@plt>
   199f8:	bl	11424 <abort@plt>
   199fc:	strd	r4, [sp, #-16]!
   19a00:	str	r6, [sp, #8]
   19a04:	str	lr, [sp, #12]
   19a08:	cmp	r1, #0
   19a0c:	cmpne	r0, #0
   19a10:	beq	19a4c <argp_parse@@Base+0x1824>
   19a14:	mov	r2, r0
   19a18:	mov	r3, r1
   19a1c:	umull	r4, r5, r0, r1
   19a20:	adds	r1, r5, #0
   19a24:	movne	r1, #1
   19a28:	cmp	r4, #0
   19a2c:	movlt	r1, #1
   19a30:	cmp	r1, #0
   19a34:	beq	19a54 <argp_parse@@Base+0x182c>
   19a38:	bl	112f8 <__errno_location@plt>
   19a3c:	mov	r3, #12
   19a40:	str	r3, [r0]
   19a44:	mov	r0, #0
   19a48:	b	19a60 <argp_parse@@Base+0x1838>
   19a4c:	mov	r3, #1
   19a50:	mov	r2, r3
   19a54:	mov	r1, r3
   19a58:	mov	r0, r2
   19a5c:	bl	110dc <calloc@plt>
   19a60:	ldrd	r4, [sp]
   19a64:	ldr	r6, [sp, #8]
   19a68:	add	sp, sp, #12
   19a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   19a70:	str	r4, [sp, #-8]!
   19a74:	str	lr, [sp, #4]
   19a78:	cmp	r0, #0
   19a7c:	beq	19a98 <argp_parse@@Base+0x1870>
   19a80:	bge	19a9c <argp_parse@@Base+0x1874>
   19a84:	bl	112f8 <__errno_location@plt>
   19a88:	mov	r3, #12
   19a8c:	str	r3, [r0]
   19a90:	mov	r0, #0
   19a94:	b	19aa0 <argp_parse@@Base+0x1878>
   19a98:	mov	r0, #1
   19a9c:	bl	1125c <malloc@plt>
   19aa0:	ldr	r4, [sp]
   19aa4:	add	sp, sp, #4
   19aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   19aac:	str	r4, [sp, #-8]!
   19ab0:	str	lr, [sp, #4]
   19ab4:	cmp	r0, #0
   19ab8:	beq	19adc <argp_parse@@Base+0x18b4>
   19abc:	cmp	r1, #0
   19ac0:	beq	19ae8 <argp_parse@@Base+0x18c0>
   19ac4:	cmp	r1, #0
   19ac8:	blt	19af4 <argp_parse@@Base+0x18cc>
   19acc:	bl	111fc <realloc@plt>
   19ad0:	ldr	r4, [sp]
   19ad4:	add	sp, sp, #4
   19ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   19adc:	mov	r0, r1
   19ae0:	bl	19a70 <argp_parse@@Base+0x1848>
   19ae4:	b	19ad0 <argp_parse@@Base+0x18a8>
   19ae8:	bl	18f00 <argp_parse@@Base+0xcd8>
   19aec:	mov	r0, #0
   19af0:	b	19ad0 <argp_parse@@Base+0x18a8>
   19af4:	bl	112f8 <__errno_location@plt>
   19af8:	mov	r3, #12
   19afc:	str	r3, [r0]
   19b00:	mov	r0, #0
   19b04:	b	19ad0 <argp_parse@@Base+0x18a8>
   19b08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19b0c:	strd	r6, [sp, #8]
   19b10:	str	r8, [sp, #16]
   19b14:	str	lr, [sp, #20]
   19b18:	mov	r8, r0
   19b1c:	mov	r7, r1
   19b20:	mov	r6, r2
   19b24:	mov	r5, r3
   19b28:	mov	r0, #36	; 0x24
   19b2c:	bl	19a70 <argp_parse@@Base+0x1848>
   19b30:	subs	r4, r0, #0
   19b34:	beq	19b78 <argp_parse@@Base+0x1950>
   19b38:	str	r8, [r4]
   19b3c:	str	r7, [r4, #4]
   19b40:	str	r6, [r4, #8]
   19b44:	str	r5, [r4, #12]
   19b48:	mov	r3, #0
   19b4c:	str	r3, [r4, #20]
   19b50:	str	r3, [r4, #16]
   19b54:	mov	r0, #200	; 0xc8
   19b58:	bl	19a70 <argp_parse@@Base+0x1848>
   19b5c:	mov	r5, r0
   19b60:	str	r0, [r4, #24]
   19b64:	cmp	r0, #0
   19b68:	strne	r0, [r4, #28]
   19b6c:	addne	r5, r0, #200	; 0xc8
   19b70:	strne	r5, [r4, #32]
   19b74:	beq	19b90 <argp_parse@@Base+0x1968>
   19b78:	mov	r0, r4
   19b7c:	ldrd	r4, [sp]
   19b80:	ldrd	r6, [sp, #8]
   19b84:	ldr	r8, [sp, #16]
   19b88:	add	sp, sp, #20
   19b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b90:	mov	r0, r4
   19b94:	bl	18f00 <argp_parse@@Base+0xcd8>
   19b98:	mov	r4, r5
   19b9c:	b	19b78 <argp_parse@@Base+0x1950>
   19ba0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19ba4:	strd	r6, [sp, #8]
   19ba8:	strd	r8, [sp, #16]
   19bac:	strd	sl, [sp, #24]
   19bb0:	str	lr, [sp, #32]
   19bb4:	sub	sp, sp, #20
   19bb8:	mov	r4, r0
   19bbc:	ldr	r5, [r0, #24]
   19bc0:	ldr	r3, [r0, #16]
   19bc4:	add	r5, r5, r3
   19bc8:	mov	sl, #32
   19bcc:	str	sl, [sp, #8]
   19bd0:	b	19cb8 <argp_parse@@Base+0x1a90>
   19bd4:	mov	r7, #0
   19bd8:	ldr	r0, [r4]
   19bdc:	ldr	r3, [r0, #20]
   19be0:	ldr	r2, [r0, #24]
   19be4:	cmp	r3, r2
   19be8:	addcc	r2, r3, #1
   19bec:	strcc	r2, [r0, #20]
   19bf0:	strbcc	sl, [r3]
   19bf4:	bcs	19d24 <argp_parse@@Base+0x1afc>
   19bf8:	add	r7, r7, #1
   19bfc:	cmp	r6, r7
   19c00:	bne	19bd8 <argp_parse@@Base+0x19b0>
   19c04:	str	r6, [r4, #20]
   19c08:	ldr	r8, [r4, #28]
   19c0c:	sub	fp, r8, r5
   19c10:	mov	r2, fp
   19c14:	mov	r1, #10
   19c18:	mov	r0, r5
   19c1c:	bl	1134c <memchr@plt>
   19c20:	mov	r6, r0
   19c24:	ldr	r3, [r4, #20]
   19c28:	cmp	r3, #0
   19c2c:	movlt	r3, #0
   19c30:	strlt	r3, [r4, #20]
   19c34:	cmp	r6, #0
   19c38:	beq	19d30 <argp_parse@@Base+0x1b08>
   19c3c:	ldr	r0, [r4, #20]
   19c40:	ldr	r9, [r4, #8]
   19c44:	sub	r3, r6, r5
   19c48:	add	r3, r3, r0
   19c4c:	cmp	r3, r9
   19c50:	movlt	r3, #0
   19c54:	strlt	r3, [r4, #20]
   19c58:	addlt	r5, r6, #1
   19c5c:	blt	19cb8 <argp_parse@@Base+0x1a90>
   19c60:	sub	r7, r9, #1
   19c64:	ldr	r3, [r4, #12]
   19c68:	str	r3, [sp, #4]
   19c6c:	cmp	r3, #0
   19c70:	bge	19d5c <argp_parse@@Base+0x1b34>
   19c74:	cmp	r8, r6
   19c78:	bls	19dec <argp_parse@@Base+0x1bc4>
   19c7c:	sub	r0, r7, r0
   19c80:	sub	r2, r8, r6
   19c84:	mov	r1, r6
   19c88:	add	r0, r5, r0
   19c8c:	bl	11148 <memmove@plt>
   19c90:	ldr	r3, [r4, #20]
   19c94:	sub	r7, r7, r3
   19c98:	add	r7, r5, r7
   19c9c:	sub	r6, r7, r6
   19ca0:	ldr	r3, [r4, #28]
   19ca4:	sub	r6, r3, r6
   19ca8:	str	r6, [r4, #28]
   19cac:	mov	r3, #0
   19cb0:	str	r3, [r4, #20]
   19cb4:	add	r5, r5, r9
   19cb8:	ldr	r8, [r4, #28]
   19cbc:	cmp	r8, r5
   19cc0:	bls	19e04 <argp_parse@@Base+0x1bdc>
   19cc4:	ldr	r3, [r4, #20]
   19cc8:	cmp	r3, #0
   19ccc:	bne	19c08 <argp_parse@@Base+0x19e0>
   19cd0:	ldr	r6, [r4, #4]
   19cd4:	cmp	r6, #0
   19cd8:	beq	1a0b0 <argp_parse@@Base+0x1e88>
   19cdc:	add	r3, r8, r6
   19ce0:	ldr	r2, [r4, #32]
   19ce4:	cmp	r2, r3
   19ce8:	bls	19bd4 <argp_parse@@Base+0x19ac>
   19cec:	add	r7, r5, r6
   19cf0:	sub	r2, r8, r5
   19cf4:	mov	r1, r5
   19cf8:	mov	r0, r7
   19cfc:	bl	11148 <memmove@plt>
   19d00:	ldr	r3, [r4, #28]
   19d04:	add	r3, r3, r6
   19d08:	str	r3, [r4, #28]
   19d0c:	mov	r2, r6
   19d10:	mov	r1, sl
   19d14:	mov	r0, r5
   19d18:	bl	11328 <memset@plt>
   19d1c:	mov	r5, r7
   19d20:	b	19c04 <argp_parse@@Base+0x19dc>
   19d24:	ldr	r1, [sp, #8]
   19d28:	bl	11364 <__overflow@plt>
   19d2c:	b	19bf8 <argp_parse@@Base+0x19d0>
   19d30:	ldr	r3, [r4, #20]
   19d34:	add	r3, fp, r3
   19d38:	ldr	r7, [r4, #8]
   19d3c:	cmp	r3, r7
   19d40:	bcc	19de4 <argp_parse@@Base+0x1bbc>
   19d44:	sub	r7, r7, #1
   19d48:	ldr	r3, [r4, #12]
   19d4c:	str	r3, [sp, #4]
   19d50:	cmp	r3, #0
   19d54:	blt	19dec <argp_parse@@Base+0x1bc4>
   19d58:	mov	r6, r8
   19d5c:	ldr	r3, [r4, #20]
   19d60:	rsb	r3, r3, #1
   19d64:	add	r7, r3, r7
   19d68:	adds	r7, r5, r7
   19d6c:	bcs	1a0a8 <argp_parse@@Base+0x1e80>
   19d70:	bl	112a4 <__ctype_b_loc@plt>
   19d74:	ldr	r0, [r0]
   19d78:	mov	r3, r7
   19d7c:	mov	r1, r3
   19d80:	sub	r3, r3, #1
   19d84:	ldrb	r2, [r1]
   19d88:	lsl	r2, r2, #1
   19d8c:	ldrh	r2, [r0, r2]
   19d90:	tst	r2, #1
   19d94:	bne	19e30 <argp_parse@@Base+0x1c08>
   19d98:	mov	r1, r3
   19d9c:	cmp	r3, r5
   19da0:	bcs	19d7c <argp_parse@@Base+0x1b54>
   19da4:	add	r9, r1, #1
   19da8:	cmp	r9, r5
   19dac:	bhi	19e6c <argp_parse@@Base+0x1c44>
   19db0:	cmp	r6, r7
   19db4:	bhi	19f08 <argp_parse@@Base+0x1ce0>
   19db8:	cmp	r7, r6
   19dbc:	beq	19f48 <argp_parse@@Base+0x1d20>
   19dc0:	bl	112a4 <__ctype_b_loc@plt>
   19dc4:	ldr	r2, [r0]
   19dc8:	mov	r9, r7
   19dcc:	ldrb	r3, [r9, #1]!
   19dd0:	lsl	r3, r3, #1
   19dd4:	ldrh	r3, [r2, r3]
   19dd8:	tst	r3, #1
   19ddc:	bne	19dcc <argp_parse@@Base+0x1ba4>
   19de0:	b	19e70 <argp_parse@@Base+0x1c48>
   19de4:	str	r3, [r4, #20]
   19de8:	b	19e04 <argp_parse@@Base+0x1bdc>
   19dec:	ldr	r3, [r4, #20]
   19df0:	add	r3, fp, r3
   19df4:	str	r3, [r4, #20]
   19df8:	sub	r3, r7, r3
   19dfc:	add	r8, r8, r3
   19e00:	str	r8, [r4, #28]
   19e04:	ldr	r3, [r4, #28]
   19e08:	ldr	r2, [r4, #24]
   19e0c:	sub	r3, r3, r2
   19e10:	str	r3, [r4, #16]
   19e14:	add	sp, sp, #20
   19e18:	ldrd	r4, [sp]
   19e1c:	ldrd	r6, [sp, #8]
   19e20:	ldrd	r8, [sp, #16]
   19e24:	ldrd	sl, [sp, #24]
   19e28:	add	sp, sp, #32
   19e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e30:	add	r9, r1, #1
   19e34:	cmp	r9, r5
   19e38:	bls	19db0 <argp_parse@@Base+0x1b88>
   19e3c:	cmp	r5, r1
   19e40:	bhi	19e6c <argp_parse@@Base+0x1c44>
   19e44:	sub	ip, r5, #1
   19e48:	mov	r1, r3
   19e4c:	cmp	r3, ip
   19e50:	beq	19e6c <argp_parse@@Base+0x1c44>
   19e54:	sub	r3, r3, #1
   19e58:	ldrb	r2, [r1]
   19e5c:	lsl	r2, r2, #1
   19e60:	ldrh	r2, [r0, r2]
   19e64:	tst	r2, #1
   19e68:	bne	19e48 <argp_parse@@Base+0x1c20>
   19e6c:	add	r7, r1, #1
   19e70:	add	r3, fp, #1
   19e74:	add	r3, r5, r3
   19e78:	cmp	r9, r3
   19e7c:	beq	19f58 <argp_parse@@Base+0x1d30>
   19e80:	add	r3, r7, #1
   19e84:	sub	r3, r9, r3
   19e88:	ldr	r2, [sp, #4]
   19e8c:	cmp	r3, r2
   19e90:	bge	19f6c <argp_parse@@Base+0x1d44>
   19e94:	cmp	r9, r8
   19e98:	bcs	19f6c <argp_parse@@Base+0x1d44>
   19e9c:	ldr	r3, [r4, #32]
   19ea0:	sub	r3, r3, r8
   19ea4:	ldr	r2, [sp, #4]
   19ea8:	add	r2, r2, #1
   19eac:	cmp	r3, r2
   19eb0:	bgt	1a014 <argp_parse@@Base+0x1dec>
   19eb4:	ldr	r0, [r4, #24]
   19eb8:	cmp	r0, r7
   19ebc:	bcs	19ed0 <argp_parse@@Base+0x1ca8>
   19ec0:	ldr	r3, [r4]
   19ec4:	sub	r2, r7, r0
   19ec8:	mov	r1, #1
   19ecc:	bl	1119c <fwrite_unlocked@plt>
   19ed0:	ldr	r0, [r4]
   19ed4:	ldr	r3, [r0, #20]
   19ed8:	ldr	r2, [r0, #24]
   19edc:	cmp	r3, r2
   19ee0:	addcc	r2, r3, #1
   19ee4:	strcc	r2, [r0, #20]
   19ee8:	movcc	r2, #10
   19eec:	strbcc	r2, [r3]
   19ef0:	bcs	1a054 <argp_parse@@Base+0x1e2c>
   19ef4:	ldr	r8, [r4, #24]
   19ef8:	sub	r5, r5, r8
   19efc:	add	fp, fp, r5
   19f00:	mov	r5, r8
   19f04:	b	19f7c <argp_parse@@Base+0x1d54>
   19f08:	add	r9, r7, #1
   19f0c:	str	r6, [sp, #12]
   19f10:	mov	r7, r9
   19f14:	cmp	r9, r6
   19f18:	beq	19f40 <argp_parse@@Base+0x1d18>
   19f1c:	bl	112a4 <__ctype_b_loc@plt>
   19f20:	add	r9, r9, #1
   19f24:	ldrb	r3, [r7]
   19f28:	ldr	r2, [r0]
   19f2c:	lsl	r3, r3, #1
   19f30:	ldrh	r3, [r2, r3]
   19f34:	tst	r3, #1
   19f38:	beq	19f10 <argp_parse@@Base+0x1ce8>
   19f3c:	b	19dc0 <argp_parse@@Base+0x1b98>
   19f40:	ldr	r6, [sp, #12]
   19f44:	b	19db8 <argp_parse@@Base+0x1b90>
   19f48:	mov	r3, #0
   19f4c:	str	r3, [r4, #20]
   19f50:	add	r5, r6, #1
   19f54:	b	19cb8 <argp_parse@@Base+0x1a90>
   19f58:	ldr	r3, [r4, #32]
   19f5c:	sub	r3, r3, r7
   19f60:	ldr	r2, [sp, #4]
   19f64:	cmp	r3, r2
   19f68:	ble	19e94 <argp_parse@@Base+0x1c6c>
   19f6c:	mov	r3, #10
   19f70:	strb	r3, [r7], #1
   19f74:	mov	r8, r5
   19f78:	mov	r5, r7
   19f7c:	ldr	r3, [r4, #12]
   19f80:	sub	r2, r9, r5
   19f84:	cmp	r2, r3
   19f88:	bge	1a060 <argp_parse@@Base+0x1e38>
   19f8c:	add	r2, fp, #1
   19f90:	add	r2, r8, r2
   19f94:	cmp	r9, r2
   19f98:	bne	19fac <argp_parse@@Base+0x1d84>
   19f9c:	ldr	r2, [r4, #32]
   19fa0:	sub	r2, r2, r9
   19fa4:	cmp	r3, r2
   19fa8:	ble	1a060 <argp_parse@@Base+0x1e38>
   19fac:	cmp	r3, #0
   19fb0:	movgt	r6, #0
   19fb4:	ble	19fe8 <argp_parse@@Base+0x1dc0>
   19fb8:	ldr	r0, [r4]
   19fbc:	ldr	r3, [r0, #20]
   19fc0:	ldr	r2, [r0, #24]
   19fc4:	cmp	r3, r2
   19fc8:	addcc	r2, r3, #1
   19fcc:	strcc	r2, [r0, #20]
   19fd0:	strbcc	sl, [r3]
   19fd4:	bcs	1a084 <argp_parse@@Base+0x1e5c>
   19fd8:	add	r6, r6, #1
   19fdc:	ldr	r3, [r4, #12]
   19fe0:	cmp	r3, r6
   19fe4:	bgt	19fb8 <argp_parse@@Base+0x1d90>
   19fe8:	cmp	r5, r9
   19fec:	bcc	1a090 <argp_parse@@Base+0x1e68>
   19ff0:	sub	r9, r9, r8
   19ff4:	sub	fp, fp, r9
   19ff8:	add	fp, r5, fp
   19ffc:	str	fp, [r4, #28]
   1a000:	ldr	r3, [r4, #12]
   1a004:	cmp	r3, #0
   1a008:	mvneq	r3, #0
   1a00c:	str	r3, [r4, #20]
   1a010:	b	19cb8 <argp_parse@@Base+0x1a90>
   1a014:	sub	r8, r8, r9
   1a018:	mov	r0, r2
   1a01c:	mov	r2, r8
   1a020:	mov	r1, r9
   1a024:	add	r0, r7, r0
   1a028:	bl	11148 <memmove@plt>
   1a02c:	ldr	r9, [r4, #12]
   1a030:	add	r9, r9, #1
   1a034:	add	r9, r7, r9
   1a038:	add	r8, r9, r8
   1a03c:	sub	fp, r8, r5
   1a040:	mov	r3, #10
   1a044:	strb	r3, [r7], #1
   1a048:	mov	r8, r5
   1a04c:	mov	r5, r7
   1a050:	b	19f7c <argp_parse@@Base+0x1d54>
   1a054:	mov	r1, #10
   1a058:	bl	11364 <__overflow@plt>
   1a05c:	b	19ef4 <argp_parse@@Base+0x1ccc>
   1a060:	cmp	r3, #0
   1a064:	movgt	r3, #0
   1a068:	ble	19fe8 <argp_parse@@Base+0x1dc0>
   1a06c:	strb	sl, [r5], #1
   1a070:	add	r3, r3, #1
   1a074:	ldr	r2, [r4, #12]
   1a078:	cmp	r2, r3
   1a07c:	bgt	1a06c <argp_parse@@Base+0x1e44>
   1a080:	b	19fe8 <argp_parse@@Base+0x1dc0>
   1a084:	ldr	r1, [sp, #8]
   1a088:	bl	11364 <__overflow@plt>
   1a08c:	b	19fd8 <argp_parse@@Base+0x1db0>
   1a090:	add	r2, r8, fp
   1a094:	sub	r2, r2, r9
   1a098:	mov	r1, r9
   1a09c:	mov	r0, r5
   1a0a0:	bl	11148 <memmove@plt>
   1a0a4:	b	19ff0 <argp_parse@@Base+0x1dc8>
   1a0a8:	mov	r1, r7
   1a0ac:	b	19da4 <argp_parse@@Base+0x1b7c>
   1a0b0:	sub	fp, r8, r5
   1a0b4:	mov	r2, fp
   1a0b8:	mov	r1, #10
   1a0bc:	mov	r0, r5
   1a0c0:	bl	1134c <memchr@plt>
   1a0c4:	mov	r6, r0
   1a0c8:	b	19c34 <argp_parse@@Base+0x1a0c>
   1a0cc:	str	r4, [sp, #-8]!
   1a0d0:	str	lr, [sp, #4]
   1a0d4:	mov	r4, r0
   1a0d8:	bl	19ba0 <argp_parse@@Base+0x1978>
   1a0dc:	ldr	r2, [r4, #28]
   1a0e0:	ldr	r0, [r4, #24]
   1a0e4:	cmp	r2, r0
   1a0e8:	bls	1a0fc <argp_parse@@Base+0x1ed4>
   1a0ec:	ldr	r3, [r4]
   1a0f0:	sub	r2, r2, r0
   1a0f4:	mov	r1, #1
   1a0f8:	bl	1119c <fwrite_unlocked@plt>
   1a0fc:	ldr	r0, [r4, #24]
   1a100:	bl	18f00 <argp_parse@@Base+0xcd8>
   1a104:	mov	r0, r4
   1a108:	bl	18f00 <argp_parse@@Base+0xcd8>
   1a10c:	ldr	r4, [sp]
   1a110:	add	sp, sp, #4
   1a114:	pop	{pc}		; (ldr pc, [sp], #4)
   1a118:	ldr	r3, [r0, #32]
   1a11c:	ldr	r2, [r0, #28]
   1a120:	sub	r3, r3, r2
   1a124:	cmp	r3, r1
   1a128:	bcc	1a134 <argp_parse@@Base+0x1f0c>
   1a12c:	mov	r0, #1
   1a130:	bx	lr
   1a134:	strd	r4, [sp, #-16]!
   1a138:	str	r6, [sp, #8]
   1a13c:	str	lr, [sp, #12]
   1a140:	mov	r5, r1
   1a144:	mov	r4, r0
   1a148:	bl	19ba0 <argp_parse@@Base+0x1978>
   1a14c:	ldr	r0, [r4, #24]
   1a150:	ldr	r2, [r4, #28]
   1a154:	ldr	r3, [r4]
   1a158:	sub	r2, r2, r0
   1a15c:	mov	r1, #1
   1a160:	bl	1119c <fwrite_unlocked@plt>
   1a164:	ldr	r2, [r4, #28]
   1a168:	ldr	r3, [r4, #24]
   1a16c:	sub	r1, r2, r3
   1a170:	cmp	r1, r0
   1a174:	bne	1a1b4 <argp_parse@@Base+0x1f8c>
   1a178:	str	r3, [r4, #28]
   1a17c:	mov	r2, #0
   1a180:	str	r2, [r4, #16]
   1a184:	ldr	r1, [r4, #32]
   1a188:	sub	r1, r1, r3
   1a18c:	cmp	r1, r5
   1a190:	movcs	r0, #1
   1a194:	bcs	1a1dc <argp_parse@@Base+0x1fb4>
   1a198:	adds	r5, r1, r5
   1a19c:	bcc	1a1ec <argp_parse@@Base+0x1fc4>
   1a1a0:	bl	112f8 <__errno_location@plt>
   1a1a4:	mov	r3, #12
   1a1a8:	str	r3, [r0]
   1a1ac:	mov	r0, #0
   1a1b0:	b	1a1dc <argp_parse@@Base+0x1fb4>
   1a1b4:	sub	r2, r2, r0
   1a1b8:	str	r2, [r4, #28]
   1a1bc:	ldr	r1, [r4, #16]
   1a1c0:	sub	r1, r1, r0
   1a1c4:	str	r1, [r4, #16]
   1a1c8:	sub	r2, r2, r3
   1a1cc:	add	r1, r3, r0
   1a1d0:	mov	r0, r3
   1a1d4:	bl	11148 <memmove@plt>
   1a1d8:	mov	r0, #0
   1a1dc:	ldrd	r4, [sp]
   1a1e0:	ldr	r6, [sp, #8]
   1a1e4:	add	sp, sp, #12
   1a1e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1ec:	mov	r1, r5
   1a1f0:	mov	r0, r3
   1a1f4:	bl	19aac <argp_parse@@Base+0x1884>
   1a1f8:	cmp	r0, #0
   1a1fc:	beq	1a1a0 <argp_parse@@Base+0x1f78>
   1a200:	str	r0, [r4, #24]
   1a204:	add	r5, r0, r5
   1a208:	str	r5, [r4, #32]
   1a20c:	str	r0, [r4, #28]
   1a210:	mov	r0, #1
   1a214:	b	1a1dc <argp_parse@@Base+0x1fb4>
   1a218:	push	{r1, r2, r3}
   1a21c:	strd	r4, [sp, #-16]!
   1a220:	str	r6, [sp, #8]
   1a224:	str	lr, [sp, #12]
   1a228:	sub	sp, sp, #12
   1a22c:	mov	r5, r0
   1a230:	mov	r1, #150	; 0x96
   1a234:	add	r6, sp, #32
   1a238:	mov	r0, r5
   1a23c:	bl	1a118 <argp_parse@@Base+0x1ef0>
   1a240:	cmp	r0, #0
   1a244:	beq	1a278 <argp_parse@@Base+0x2050>
   1a248:	str	r6, [sp, #4]
   1a24c:	ldr	r0, [r5, #28]
   1a250:	ldr	r4, [r5, #32]
   1a254:	sub	r4, r4, r0
   1a258:	mov	r3, r6
   1a25c:	ldr	r2, [sp, #28]
   1a260:	mov	r1, r4
   1a264:	bl	113dc <vsnprintf@plt>
   1a268:	cmp	r0, r4
   1a26c:	bcc	1a298 <argp_parse@@Base+0x2070>
   1a270:	add	r1, r0, #1
   1a274:	b	1a238 <argp_parse@@Base+0x2010>
   1a278:	mvn	r0, #0
   1a27c:	add	sp, sp, #12
   1a280:	ldrd	r4, [sp]
   1a284:	ldr	r6, [sp, #8]
   1a288:	ldr	lr, [sp, #12]
   1a28c:	add	sp, sp, #16
   1a290:	add	sp, sp, #12
   1a294:	bx	lr
   1a298:	ldr	r2, [r5, #28]
   1a29c:	add	r3, r2, r0
   1a2a0:	str	r3, [r5, #28]
   1a2a4:	b	1a27c <argp_parse@@Base+0x2054>
   1a2a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a2ac:	strd	r6, [sp, #8]
   1a2b0:	strd	r8, [sp, #16]
   1a2b4:	str	lr, [sp, #24]
   1a2b8:	ldr	r5, [r1, #28]
   1a2bc:	ldr	r6, [r1, #32]
   1a2c0:	ldr	r8, [r1]
   1a2c4:	add	r7, r0, r6, lsl #2
   1a2c8:	b	1a2f8 <argp_parse@@Base+0x20d0>
   1a2cc:	add	r3, r0, r5, lsl #2
   1a2d0:	add	r4, r9, r5
   1a2d4:	add	r4, r0, r4, lsl #2
   1a2d8:	mov	r2, r7
   1a2dc:	ldr	ip, [r3]
   1a2e0:	ldr	lr, [r2]
   1a2e4:	str	lr, [r3], #4
   1a2e8:	str	ip, [r2], #4
   1a2ec:	cmp	r3, r4
   1a2f0:	bne	1a2dc <argp_parse@@Base+0x20b4>
   1a2f4:	add	r5, r5, r9
   1a2f8:	cmp	r8, r6
   1a2fc:	movle	r3, #0
   1a300:	movgt	r3, #1
   1a304:	cmp	r5, r6
   1a308:	movge	r3, #0
   1a30c:	cmp	r3, #0
   1a310:	beq	1a354 <argp_parse@@Base+0x212c>
   1a314:	sub	r9, r8, r6
   1a318:	sub	r3, r6, r5
   1a31c:	cmp	r9, r3
   1a320:	ble	1a2cc <argp_parse@@Base+0x20a4>
   1a324:	add	r2, r0, r5, lsl #2
   1a328:	sub	r9, r8, r3
   1a32c:	add	r3, r0, r9, lsl #2
   1a330:	add	r4, r0, r8, lsl #2
   1a334:	ldr	ip, [r2]
   1a338:	ldr	lr, [r3]
   1a33c:	str	lr, [r2], #4
   1a340:	str	ip, [r3], #4
   1a344:	cmp	r3, r4
   1a348:	bne	1a334 <argp_parse@@Base+0x210c>
   1a34c:	mov	r8, r9
   1a350:	b	1a2f8 <argp_parse@@Base+0x20d0>
   1a354:	ldr	r0, [r1]
   1a358:	ldr	r3, [r1, #32]
   1a35c:	sub	r2, r0, r3
   1a360:	ldr	r3, [r1, #28]
   1a364:	add	r3, r3, r2
   1a368:	str	r3, [r1, #28]
   1a36c:	str	r0, [r1, #32]
   1a370:	ldrd	r4, [sp]
   1a374:	ldrd	r6, [sp, #8]
   1a378:	ldrd	r8, [sp, #16]
   1a37c:	add	sp, sp, #24
   1a380:	pop	{pc}		; (ldr pc, [sp], #4)
   1a384:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a388:	strd	r6, [sp, #8]
   1a38c:	strd	r8, [sp, #16]
   1a390:	strd	sl, [sp, #24]
   1a394:	str	lr, [sp, #32]
   1a398:	sub	sp, sp, #52	; 0x34
   1a39c:	str	r0, [sp, #32]
   1a3a0:	str	r1, [sp, #20]
   1a3a4:	str	r2, [sp, #28]
   1a3a8:	str	r3, [sp, #16]
   1a3ac:	ldr	fp, [sp, #96]	; 0x60
   1a3b0:	ldr	r9, [fp, #20]
   1a3b4:	ldrb	r3, [r9]
   1a3b8:	cmp	r3, #0
   1a3bc:	cmpne	r3, #61	; 0x3d
   1a3c0:	beq	1a3f8 <argp_parse@@Base+0x21d0>
   1a3c4:	mov	r8, r9
   1a3c8:	ldrb	r3, [r8, #1]!
   1a3cc:	cmp	r3, #0
   1a3d0:	cmpne	r3, #61	; 0x3d
   1a3d4:	bne	1a3c8 <argp_parse@@Base+0x21a0>
   1a3d8:	sub	r7, r8, r9
   1a3dc:	ldr	r5, [sp, #16]
   1a3e0:	ldr	sl, [r5]
   1a3e4:	cmp	sl, #0
   1a3e8:	beq	1a8bc <argp_parse@@Base+0x2694>
   1a3ec:	mov	r4, sl
   1a3f0:	mov	r6, #0
   1a3f4:	b	1a410 <argp_parse@@Base+0x21e8>
   1a3f8:	mov	r8, r9
   1a3fc:	b	1a3d8 <argp_parse@@Base+0x21b0>
   1a400:	add	r6, r6, #1
   1a404:	ldr	r4, [r5, #16]!
   1a408:	cmp	r4, #0
   1a40c:	beq	1a8c0 <argp_parse@@Base+0x2698>
   1a410:	str	r5, [sp, #12]
   1a414:	mov	r2, r7
   1a418:	mov	r1, r9
   1a41c:	mov	r0, r4
   1a420:	bl	11418 <strncmp@plt>
   1a424:	cmp	r0, #0
   1a428:	bne	1a400 <argp_parse@@Base+0x21d8>
   1a42c:	mov	r0, r4
   1a430:	bl	112d4 <strlen@plt>
   1a434:	cmp	r0, r7
   1a438:	bne	1a400 <argp_parse@@Base+0x21d8>
   1a43c:	cmp	r5, #0
   1a440:	beq	1a8c8 <argp_parse@@Base+0x26a0>
   1a444:	ldr	r3, [fp]
   1a448:	add	r2, r3, #1
   1a44c:	str	r2, [fp]
   1a450:	mov	r1, #0
   1a454:	str	r1, [fp, #20]
   1a458:	ldrb	r1, [r8]
   1a45c:	cmp	r1, #0
   1a460:	beq	1a810 <argp_parse@@Base+0x25e8>
   1a464:	ldr	r3, [sp, #12]
   1a468:	ldr	r3, [r3, #4]
   1a46c:	cmp	r3, #0
   1a470:	beq	1a7bc <argp_parse@@Base+0x2594>
   1a474:	add	r8, r8, #1
   1a478:	str	r8, [fp, #12]
   1a47c:	ldr	r3, [sp, #88]	; 0x58
   1a480:	cmp	r3, #0
   1a484:	strne	r6, [r3]
   1a488:	ldr	r2, [sp, #12]
   1a48c:	ldr	r3, [r2, #8]
   1a490:	cmp	r3, #0
   1a494:	beq	1a8a8 <argp_parse@@Base+0x2680>
   1a498:	ldr	r2, [r2, #12]
   1a49c:	str	r2, [r3]
   1a4a0:	mov	r0, #0
   1a4a4:	add	sp, sp, #52	; 0x34
   1a4a8:	ldrd	r4, [sp]
   1a4ac:	ldrd	r6, [sp, #8]
   1a4b0:	ldrd	r8, [sp, #16]
   1a4b4:	ldrd	sl, [sp, #24]
   1a4b8:	add	sp, sp, #32
   1a4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4c0:	ldr	r2, [sl, #8]
   1a4c4:	ldr	r3, [r9, #8]
   1a4c8:	cmp	r2, r3
   1a4cc:	bne	1a58c <argp_parse@@Base+0x2364>
   1a4d0:	ldr	r2, [sl, #12]
   1a4d4:	ldr	r3, [r9, #12]
   1a4d8:	cmp	r2, r3
   1a4dc:	bne	1a58c <argp_parse@@Base+0x2364>
   1a4e0:	b	1a544 <argp_parse@@Base+0x231c>
   1a4e4:	mov	r0, r6
   1a4e8:	bl	19a70 <argp_parse@@Base+0x1848>
   1a4ec:	subs	r3, r0, #0
   1a4f0:	str	r3, [sp, #24]
   1a4f4:	beq	1a5bc <argp_parse@@Base+0x2394>
   1a4f8:	mov	r2, r6
   1a4fc:	mov	r1, #0
   1a500:	ldr	r7, [sp, #24]
   1a504:	mov	r0, r7
   1a508:	bl	11328 <memset@plt>
   1a50c:	ldr	r2, [sp, #36]	; 0x24
   1a510:	mov	r1, #1
   1a514:	strb	r1, [r7, r2]
   1a518:	ldr	r3, [sp, #44]	; 0x2c
   1a51c:	str	r3, [sp, #40]	; 0x28
   1a520:	b	1a5ac <argp_parse@@Base+0x2384>
   1a524:	ldr	r3, [sp, #24]
   1a528:	cmp	r3, #0
   1a52c:	moveq	r5, #1
   1a530:	beq	1a544 <argp_parse@@Base+0x231c>
   1a534:	mov	r5, #1
   1a538:	b	1a5ac <argp_parse@@Base+0x2384>
   1a53c:	str	r4, [sp, #36]	; 0x24
   1a540:	mov	sl, r9
   1a544:	add	r4, r4, #1
   1a548:	ldr	r0, [r9, #16]!
   1a54c:	cmp	r0, #0
   1a550:	beq	1a5c4 <argp_parse@@Base+0x239c>
   1a554:	ldr	r2, [sp, #12]
   1a558:	ldr	r1, [fp, #20]
   1a55c:	bl	11418 <strncmp@plt>
   1a560:	cmp	r0, #0
   1a564:	bne	1a544 <argp_parse@@Base+0x231c>
   1a568:	cmp	sl, #0
   1a56c:	beq	1a53c <argp_parse@@Base+0x2314>
   1a570:	ldr	r3, [sp, #92]	; 0x5c
   1a574:	cmp	r3, #0
   1a578:	bne	1a58c <argp_parse@@Base+0x2364>
   1a57c:	ldr	r2, [sl, #4]
   1a580:	ldr	r3, [r9, #4]
   1a584:	cmp	r2, r3
   1a588:	beq	1a4c0 <argp_parse@@Base+0x2298>
   1a58c:	cmp	r5, #0
   1a590:	bne	1a544 <argp_parse@@Base+0x231c>
   1a594:	ldr	r3, [sp, #100]	; 0x64
   1a598:	cmp	r3, #0
   1a59c:	beq	1a524 <argp_parse@@Base+0x22fc>
   1a5a0:	ldr	r3, [sp, #24]
   1a5a4:	cmp	r3, #0
   1a5a8:	beq	1a4e4 <argp_parse@@Base+0x22bc>
   1a5ac:	ldr	r3, [sp, #24]
   1a5b0:	mov	r2, #1
   1a5b4:	strb	r2, [r3, r4]
   1a5b8:	b	1a544 <argp_parse@@Base+0x231c>
   1a5bc:	mov	r5, #1
   1a5c0:	b	1a544 <argp_parse@@Base+0x231c>
   1a5c4:	str	sl, [sp, #12]
   1a5c8:	ldr	r3, [sp, #24]
   1a5cc:	orrs	r3, r3, r5
   1a5d0:	bne	1a648 <argp_parse@@Base+0x2420>
   1a5d4:	ldr	r3, [sp, #12]
   1a5d8:	cmp	r3, #0
   1a5dc:	bne	1a7b4 <argp_parse@@Base+0x258c>
   1a5e0:	ldr	r3, [sp, #92]	; 0x5c
   1a5e4:	cmp	r3, #0
   1a5e8:	beq	1a61c <argp_parse@@Base+0x23f4>
   1a5ec:	ldr	r3, [fp]
   1a5f0:	ldr	r2, [sp, #20]
   1a5f4:	ldr	r3, [r2, r3, lsl #2]
   1a5f8:	ldrb	r3, [r3, #1]
   1a5fc:	cmp	r3, #45	; 0x2d
   1a600:	beq	1a61c <argp_parse@@Base+0x23f4>
   1a604:	ldr	r3, [fp, #20]
   1a608:	ldrb	r1, [r3]
   1a60c:	ldr	r0, [sp, #28]
   1a610:	bl	112e0 <strchr@plt>
   1a614:	cmp	r0, #0
   1a618:	bne	1a8b4 <argp_parse@@Base+0x268c>
   1a61c:	ldr	r3, [sp, #100]	; 0x64
   1a620:	cmp	r3, #0
   1a624:	bne	1a784 <argp_parse@@Base+0x255c>
   1a628:	mov	r2, #0
   1a62c:	str	r2, [fp, #20]
   1a630:	ldr	r3, [fp]
   1a634:	add	r3, r3, #1
   1a638:	str	r3, [fp]
   1a63c:	str	r2, [fp, #8]
   1a640:	mov	r0, #63	; 0x3f
   1a644:	b	1a4a4 <argp_parse@@Base+0x227c>
   1a648:	ldr	r3, [sp, #100]	; 0x64
   1a64c:	cmp	r3, #0
   1a650:	beq	1a688 <argp_parse@@Base+0x2460>
   1a654:	cmp	r5, #0
   1a658:	beq	1a6c4 <argp_parse@@Base+0x249c>
   1a65c:	movw	r0, #54824	; 0xd628
   1a660:	movt	r0, #2
   1a664:	ldr	r3, [fp, #20]
   1a668:	str	r3, [sp]
   1a66c:	ldr	r3, [sp, #104]	; 0x68
   1a670:	ldr	r2, [sp, #20]
   1a674:	ldr	r2, [r2]
   1a678:	movw	r1, #51388	; 0xc8bc
   1a67c:	movt	r1, #1
   1a680:	ldr	r0, [r0]
   1a684:	bl	112ec <fprintf@plt>
   1a688:	ldr	r3, [sp, #40]	; 0x28
   1a68c:	cmp	r3, #0
   1a690:	bne	1a778 <argp_parse@@Base+0x2550>
   1a694:	ldr	r4, [fp, #20]
   1a698:	mov	r0, r4
   1a69c:	bl	112d4 <strlen@plt>
   1a6a0:	add	r0, r4, r0
   1a6a4:	str	r0, [fp, #20]
   1a6a8:	ldr	r3, [fp]
   1a6ac:	add	r3, r3, #1
   1a6b0:	str	r3, [fp]
   1a6b4:	mov	r3, #0
   1a6b8:	str	r3, [fp, #8]
   1a6bc:	mov	r0, #63	; 0x3f
   1a6c0:	b	1a4a4 <argp_parse@@Base+0x227c>
   1a6c4:	movw	r4, #54824	; 0xd628
   1a6c8:	movt	r4, #2
   1a6cc:	ldr	r0, [r4]
   1a6d0:	bl	113d0 <flockfile@plt>
   1a6d4:	ldr	r3, [fp, #20]
   1a6d8:	str	r3, [sp]
   1a6dc:	ldr	r3, [sp, #104]	; 0x68
   1a6e0:	ldr	r2, [sp, #20]
   1a6e4:	ldr	r2, [r2]
   1a6e8:	movw	r1, #51420	; 0xc8dc
   1a6ec:	movt	r1, #1
   1a6f0:	ldr	r0, [r4]
   1a6f4:	bl	112ec <fprintf@plt>
   1a6f8:	cmp	r6, #0
   1a6fc:	ble	1a758 <argp_parse@@Base+0x2530>
   1a700:	ldr	r2, [sp, #24]
   1a704:	sub	r4, r2, #1
   1a708:	sub	r3, r6, #1
   1a70c:	add	r8, r2, r3
   1a710:	movw	r7, #51468	; 0xc90c
   1a714:	movt	r7, #1
   1a718:	movw	r6, #54824	; 0xd628
   1a71c:	movt	r6, #2
   1a720:	ldr	r9, [sp, #16]
   1a724:	b	1a734 <argp_parse@@Base+0x250c>
   1a728:	add	r5, r5, #1
   1a72c:	cmp	r8, r4
   1a730:	beq	1a758 <argp_parse@@Base+0x2530>
   1a734:	ldrb	r3, [r4, #1]!
   1a738:	cmp	r3, #0
   1a73c:	beq	1a728 <argp_parse@@Base+0x2500>
   1a740:	ldr	r3, [r9, r5, lsl #4]
   1a744:	ldr	r2, [sp, #104]	; 0x68
   1a748:	mov	r1, r7
   1a74c:	ldr	r0, [r6]
   1a750:	bl	112ec <fprintf@plt>
   1a754:	b	1a728 <argp_parse@@Base+0x2500>
   1a758:	movw	r4, #54824	; 0xd628
   1a75c:	movt	r4, #2
   1a760:	ldr	r1, [r4]
   1a764:	mov	r0, #10
   1a768:	bl	113a0 <fputc@plt>
   1a76c:	ldr	r0, [r4]
   1a770:	bl	11214 <funlockfile@plt>
   1a774:	b	1a688 <argp_parse@@Base+0x2460>
   1a778:	ldr	r0, [sp, #24]
   1a77c:	bl	18f00 <argp_parse@@Base+0xcd8>
   1a780:	b	1a694 <argp_parse@@Base+0x246c>
   1a784:	movw	r0, #54824	; 0xd628
   1a788:	movt	r0, #2
   1a78c:	ldr	r3, [fp, #20]
   1a790:	str	r3, [sp]
   1a794:	ldr	r3, [sp, #104]	; 0x68
   1a798:	ldr	r2, [sp, #20]
   1a79c:	ldr	r2, [r2]
   1a7a0:	movw	r1, #51476	; 0xc914
   1a7a4:	movt	r1, #1
   1a7a8:	ldr	r0, [r0]
   1a7ac:	bl	112ec <fprintf@plt>
   1a7b0:	b	1a628 <argp_parse@@Base+0x2400>
   1a7b4:	ldr	r6, [sp, #36]	; 0x24
   1a7b8:	b	1a444 <argp_parse@@Base+0x221c>
   1a7bc:	ldr	r3, [sp, #100]	; 0x64
   1a7c0:	cmp	r3, #0
   1a7c4:	bne	1a7dc <argp_parse@@Base+0x25b4>
   1a7c8:	ldr	r3, [sp, #12]
   1a7cc:	ldr	r3, [r3, #12]
   1a7d0:	str	r3, [fp, #8]
   1a7d4:	mov	r0, #63	; 0x3f
   1a7d8:	b	1a4a4 <argp_parse@@Base+0x227c>
   1a7dc:	movw	r0, #54824	; 0xd628
   1a7e0:	movt	r0, #2
   1a7e4:	ldr	r3, [sp, #12]
   1a7e8:	ldr	r3, [r3]
   1a7ec:	str	r3, [sp]
   1a7f0:	ldr	r3, [sp, #104]	; 0x68
   1a7f4:	ldr	r2, [sp, #20]
   1a7f8:	ldr	r2, [r2]
   1a7fc:	movw	r1, #51508	; 0xc934
   1a800:	movt	r1, #1
   1a804:	ldr	r0, [r0]
   1a808:	bl	112ec <fprintf@plt>
   1a80c:	b	1a7c8 <argp_parse@@Base+0x25a0>
   1a810:	ldr	r1, [sp, #12]
   1a814:	ldr	r1, [r1, #4]
   1a818:	cmp	r1, #1
   1a81c:	bne	1a47c <argp_parse@@Base+0x2254>
   1a820:	ldr	r1, [sp, #32]
   1a824:	cmp	r2, r1
   1a828:	bge	1a844 <argp_parse@@Base+0x261c>
   1a82c:	add	r3, r3, #2
   1a830:	str	r3, [fp]
   1a834:	ldr	r3, [sp, #20]
   1a838:	ldr	r3, [r3, r2, lsl #2]
   1a83c:	str	r3, [fp, #12]
   1a840:	b	1a47c <argp_parse@@Base+0x2254>
   1a844:	ldr	r3, [sp, #100]	; 0x64
   1a848:	cmp	r3, #0
   1a84c:	bne	1a874 <argp_parse@@Base+0x264c>
   1a850:	ldr	r3, [sp, #12]
   1a854:	ldr	r3, [r3, #12]
   1a858:	str	r3, [fp, #8]
   1a85c:	ldr	r3, [sp, #28]
   1a860:	ldrb	r3, [r3]
   1a864:	cmp	r3, #58	; 0x3a
   1a868:	moveq	r0, #58	; 0x3a
   1a86c:	movne	r0, #63	; 0x3f
   1a870:	b	1a4a4 <argp_parse@@Base+0x227c>
   1a874:	movw	r0, #54824	; 0xd628
   1a878:	movt	r0, #2
   1a87c:	ldr	r3, [sp, #12]
   1a880:	ldr	r3, [r3]
   1a884:	str	r3, [sp]
   1a888:	ldr	r3, [sp, #104]	; 0x68
   1a88c:	ldr	r2, [sp, #20]
   1a890:	ldr	r2, [r2]
   1a894:	movw	r1, #51556	; 0xc964
   1a898:	movt	r1, #1
   1a89c:	ldr	r0, [r0]
   1a8a0:	bl	112ec <fprintf@plt>
   1a8a4:	b	1a850 <argp_parse@@Base+0x2628>
   1a8a8:	ldr	r3, [sp, #12]
   1a8ac:	ldr	r0, [r3, #12]
   1a8b0:	b	1a4a4 <argp_parse@@Base+0x227c>
   1a8b4:	mvn	r0, #0
   1a8b8:	b	1a4a4 <argp_parse@@Base+0x227c>
   1a8bc:	mov	r6, #0
   1a8c0:	cmp	sl, #0
   1a8c4:	beq	1a5e0 <argp_parse@@Base+0x23b8>
   1a8c8:	ldr	r9, [sp, #16]
   1a8cc:	mvn	r3, #0
   1a8d0:	str	r3, [sp, #36]	; 0x24
   1a8d4:	mov	r5, #0
   1a8d8:	str	r5, [sp, #40]	; 0x28
   1a8dc:	str	r5, [sp, #24]
   1a8e0:	mov	r4, r5
   1a8e4:	mov	r3, #1
   1a8e8:	str	r3, [sp, #44]	; 0x2c
   1a8ec:	mov	r0, sl
   1a8f0:	mov	sl, r5
   1a8f4:	str	r7, [sp, #12]
   1a8f8:	b	1a554 <argp_parse@@Base+0x232c>
   1a8fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a900:	strd	r6, [sp, #8]
   1a904:	strd	r8, [sp, #16]
   1a908:	strd	sl, [sp, #24]
   1a90c:	str	lr, [sp, #32]
   1a910:	sub	sp, sp, #36	; 0x24
   1a914:	str	r3, [sp, #24]
   1a918:	ldr	r4, [sp, #80]	; 0x50
   1a91c:	ldr	r8, [r4, #4]
   1a920:	subs	r5, r0, #0
   1a924:	ble	1ae60 <argp_parse@@Base+0x2c38>
   1a928:	mov	r9, r1
   1a92c:	mov	r6, r2
   1a930:	mov	r3, #0
   1a934:	str	r3, [r4, #12]
   1a938:	ldr	r3, [r4]
   1a93c:	cmp	r3, #0
   1a940:	beq	1a964 <argp_parse@@Base+0x273c>
   1a944:	ldr	r3, [r4, #16]
   1a948:	cmp	r3, #0
   1a94c:	beq	1a96c <argp_parse@@Base+0x2744>
   1a950:	ldrb	r3, [r2]
   1a954:	sub	r3, r3, #43	; 0x2b
   1a958:	tst	r3, #253	; 0xfd
   1a95c:	addeq	r6, r2, #1
   1a960:	b	1a9c8 <argp_parse@@Base+0x27a0>
   1a964:	mov	r3, #1
   1a968:	str	r3, [r4]
   1a96c:	ldr	r3, [r4]
   1a970:	str	r3, [r4, #32]
   1a974:	str	r3, [r4, #28]
   1a978:	mov	r3, #0
   1a97c:	str	r3, [r4, #20]
   1a980:	ldrb	r3, [r6]
   1a984:	cmp	r3, #45	; 0x2d
   1a988:	moveq	r3, #2
   1a98c:	streq	r3, [r4, #24]
   1a990:	addeq	r6, r6, #1
   1a994:	beq	1a9c0 <argp_parse@@Base+0x2798>
   1a998:	cmp	r3, #43	; 0x2b
   1a99c:	moveq	r3, #0
   1a9a0:	streq	r3, [r4, #24]
   1a9a4:	addeq	r6, r6, #1
   1a9a8:	beq	1a9c0 <argp_parse@@Base+0x2798>
   1a9ac:	ldr	r3, [sp, #84]	; 0x54
   1a9b0:	cmp	r3, #0
   1a9b4:	beq	1aa88 <argp_parse@@Base+0x2860>
   1a9b8:	mov	r3, #0
   1a9bc:	str	r3, [r4, #24]
   1a9c0:	mov	r3, #1
   1a9c4:	str	r3, [r4, #16]
   1a9c8:	ldrb	r3, [r6]
   1a9cc:	cmp	r3, #58	; 0x3a
   1a9d0:	moveq	r8, #0
   1a9d4:	ldr	r3, [r4, #20]
   1a9d8:	cmp	r3, #0
   1a9dc:	beq	1a9ec <argp_parse@@Base+0x27c4>
   1a9e0:	ldrb	r3, [r3]
   1a9e4:	cmp	r3, #0
   1a9e8:	bne	1ab8c <argp_parse@@Base+0x2964>
   1a9ec:	ldr	r3, [r4]
   1a9f0:	ldr	r2, [r4, #32]
   1a9f4:	cmp	r2, r3
   1a9f8:	strgt	r3, [r4, #32]
   1a9fc:	ldr	r2, [r4, #28]
   1aa00:	cmp	r3, r2
   1aa04:	strlt	r3, [r4, #28]
   1aa08:	ldr	r2, [r4, #24]
   1aa0c:	cmp	r2, #1
   1aa10:	beq	1aaa8 <argp_parse@@Base+0x2880>
   1aa14:	ldr	r7, [r4]
   1aa18:	cmp	r7, r5
   1aa1c:	beq	1aa68 <argp_parse@@Base+0x2840>
   1aa20:	ldr	sl, [r9, r7, lsl #2]
   1aa24:	movw	r1, #50192	; 0xc410
   1aa28:	movt	r1, #1
   1aa2c:	mov	r0, sl
   1aa30:	bl	110f4 <strcmp@plt>
   1aa34:	cmp	r0, #0
   1aa38:	bne	1ae70 <argp_parse@@Base+0x2c48>
   1aa3c:	add	r7, r7, #1
   1aa40:	str	r7, [r4]
   1aa44:	ldr	r2, [r4, #28]
   1aa48:	ldr	r3, [r4, #32]
   1aa4c:	cmp	r2, r3
   1aa50:	cmpne	r7, r3
   1aa54:	bne	1ab24 <argp_parse@@Base+0x28fc>
   1aa58:	cmp	r2, r3
   1aa5c:	streq	r7, [r4, #28]
   1aa60:	str	r5, [r4, #32]
   1aa64:	str	r5, [r4]
   1aa68:	ldr	r3, [r4, #28]
   1aa6c:	ldr	r2, [r4, #32]
   1aa70:	cmp	r3, r2
   1aa74:	mvneq	r0, #0
   1aa78:	beq	1ae9c <argp_parse@@Base+0x2c74>
   1aa7c:	str	r3, [r4]
   1aa80:	mvn	r0, #0
   1aa84:	b	1ae9c <argp_parse@@Base+0x2c74>
   1aa88:	movw	r0, #51596	; 0xc98c
   1aa8c:	movt	r0, #1
   1aa90:	bl	11244 <getenv@plt>
   1aa94:	cmp	r0, #0
   1aa98:	bne	1a9b8 <argp_parse@@Base+0x2790>
   1aa9c:	mov	r3, #1
   1aaa0:	str	r3, [r4, #24]
   1aaa4:	b	1a9c0 <argp_parse@@Base+0x2798>
   1aaa8:	ldr	r2, [r4, #32]
   1aaac:	ldr	r1, [r4, #28]
   1aab0:	cmp	r1, r2
   1aab4:	cmpne	r3, r2
   1aab8:	bne	1aad8 <argp_parse@@Base+0x28b0>
   1aabc:	cmp	r3, r2
   1aac0:	strne	r3, [r4, #28]
   1aac4:	ldr	r3, [r4]
   1aac8:	cmp	r5, r3
   1aacc:	ble	1ab1c <argp_parse@@Base+0x28f4>
   1aad0:	add	r1, r9, r3, lsl #2
   1aad4:	b	1aaf8 <argp_parse@@Base+0x28d0>
   1aad8:	mov	r1, r4
   1aadc:	mov	r0, r9
   1aae0:	bl	1a2a8 <argp_parse@@Base+0x2080>
   1aae4:	b	1aac4 <argp_parse@@Base+0x289c>
   1aae8:	add	r3, r3, #1
   1aaec:	str	r3, [r4]
   1aaf0:	cmp	r3, r5
   1aaf4:	beq	1ab18 <argp_parse@@Base+0x28f0>
   1aaf8:	ldr	r2, [r1], #4
   1aafc:	ldrb	r0, [r2]
   1ab00:	cmp	r0, #45	; 0x2d
   1ab04:	bne	1aae8 <argp_parse@@Base+0x28c0>
   1ab08:	ldrb	r2, [r2, #1]
   1ab0c:	cmp	r2, #0
   1ab10:	beq	1aae8 <argp_parse@@Base+0x28c0>
   1ab14:	b	1ab1c <argp_parse@@Base+0x28f4>
   1ab18:	mov	r3, r5
   1ab1c:	str	r3, [r4, #32]
   1ab20:	b	1aa14 <argp_parse@@Base+0x27ec>
   1ab24:	mov	r1, r4
   1ab28:	mov	r0, r9
   1ab2c:	bl	1a2a8 <argp_parse@@Base+0x2080>
   1ab30:	b	1aa60 <argp_parse@@Base+0x2838>
   1ab34:	ldrb	r1, [sl, #1]
   1ab38:	cmp	r1, #0
   1ab3c:	beq	1ae7c <argp_parse@@Base+0x2c54>
   1ab40:	ldr	r3, [sp, #24]
   1ab44:	cmp	r3, #0
   1ab48:	beq	1ab7c <argp_parse@@Base+0x2954>
   1ab4c:	cmp	r1, #45	; 0x2d
   1ab50:	beq	1abf8 <argp_parse@@Base+0x29d0>
   1ab54:	ldr	r3, [sp, #76]	; 0x4c
   1ab58:	cmp	r3, #0
   1ab5c:	beq	1ab7c <argp_parse@@Base+0x2954>
   1ab60:	ldrb	r3, [sl, #2]
   1ab64:	cmp	r3, #0
   1ab68:	bne	1ac3c <argp_parse@@Base+0x2a14>
   1ab6c:	mov	r0, r6
   1ab70:	bl	112e0 <strchr@plt>
   1ab74:	cmp	r0, #0
   1ab78:	beq	1ac3c <argp_parse@@Base+0x2a14>
   1ab7c:	ldr	r3, [r4]
   1ab80:	ldr	r3, [r9, r3, lsl #2]
   1ab84:	add	r3, r3, #1
   1ab88:	str	r3, [r4, #20]
   1ab8c:	ldr	sl, [r4, #20]
   1ab90:	add	fp, sl, #1
   1ab94:	str	fp, [r4, #20]
   1ab98:	ldrb	r7, [sl]
   1ab9c:	str	r7, [sp, #28]
   1aba0:	mov	r1, r7
   1aba4:	mov	r0, r6
   1aba8:	bl	112e0 <strchr@plt>
   1abac:	ldrb	r3, [sl, #1]
   1abb0:	cmp	r3, #0
   1abb4:	bne	1abc4 <argp_parse@@Base+0x299c>
   1abb8:	ldr	r3, [r4]
   1abbc:	add	r3, r3, #1
   1abc0:	str	r3, [r4]
   1abc4:	sub	r3, r7, #58	; 0x3a
   1abc8:	uxtb	r3, r3
   1abcc:	cmp	r0, #0
   1abd0:	cmpne	r3, #1
   1abd4:	bls	1ac88 <argp_parse@@Base+0x2a60>
   1abd8:	ldrb	r3, [r0]
   1abdc:	cmp	r3, #87	; 0x57
   1abe0:	beq	1acc4 <argp_parse@@Base+0x2a9c>
   1abe4:	ldrb	r3, [r0, #1]
   1abe8:	cmp	r3, #58	; 0x3a
   1abec:	beq	1ad98 <argp_parse@@Base+0x2b70>
   1abf0:	mov	r0, r7
   1abf4:	b	1ae9c <argp_parse@@Base+0x2c74>
   1abf8:	add	sl, sl, #2
   1abfc:	str	sl, [r4, #20]
   1ac00:	movw	r3, #50192	; 0xc410
   1ac04:	movt	r3, #1
   1ac08:	str	r3, [sp, #16]
   1ac0c:	str	r8, [sp, #12]
   1ac10:	str	r4, [sp, #8]
   1ac14:	ldr	r3, [sp, #76]	; 0x4c
   1ac18:	str	r3, [sp, #4]
   1ac1c:	ldr	r3, [sp, #72]	; 0x48
   1ac20:	str	r3, [sp]
   1ac24:	ldr	r3, [sp, #24]
   1ac28:	mov	r2, r6
   1ac2c:	mov	r1, r9
   1ac30:	mov	r0, r5
   1ac34:	bl	1a384 <argp_parse@@Base+0x215c>
   1ac38:	b	1ae9c <argp_parse@@Base+0x2c74>
   1ac3c:	add	sl, sl, #1
   1ac40:	str	sl, [r4, #20]
   1ac44:	movw	r3, #51612	; 0xc99c
   1ac48:	movt	r3, #1
   1ac4c:	str	r3, [sp, #16]
   1ac50:	str	r8, [sp, #12]
   1ac54:	str	r4, [sp, #8]
   1ac58:	ldr	r3, [sp, #76]	; 0x4c
   1ac5c:	str	r3, [sp, #4]
   1ac60:	ldr	r3, [sp, #72]	; 0x48
   1ac64:	str	r3, [sp]
   1ac68:	ldr	r3, [sp, #24]
   1ac6c:	mov	r2, r6
   1ac70:	mov	r1, r9
   1ac74:	mov	r0, r5
   1ac78:	bl	1a384 <argp_parse@@Base+0x215c>
   1ac7c:	cmn	r0, #1
   1ac80:	bne	1ae9c <argp_parse@@Base+0x2c74>
   1ac84:	b	1ab7c <argp_parse@@Base+0x2954>
   1ac88:	cmp	r8, #0
   1ac8c:	bne	1aca0 <argp_parse@@Base+0x2a78>
   1ac90:	ldr	r3, [sp, #28]
   1ac94:	str	r3, [r4, #8]
   1ac98:	mov	r0, #63	; 0x3f
   1ac9c:	b	1ae9c <argp_parse@@Base+0x2c74>
   1aca0:	movw	r0, #54824	; 0xd628
   1aca4:	movt	r0, #2
   1aca8:	ldr	r3, [sp, #28]
   1acac:	ldr	r2, [r9]
   1acb0:	movw	r1, #51616	; 0xc9a0
   1acb4:	movt	r1, #1
   1acb8:	ldr	r0, [r0]
   1acbc:	bl	112ec <fprintf@plt>
   1acc0:	b	1ac90 <argp_parse@@Base+0x2a68>
   1acc4:	ldrb	r1, [r0, #1]
   1acc8:	ldr	r2, [sp, #24]
   1accc:	cmp	r1, #59	; 0x3b
   1acd0:	movne	r3, #0
   1acd4:	moveq	r3, #1
   1acd8:	cmp	r2, #0
   1acdc:	moveq	r3, #0
   1ace0:	cmp	r3, #0
   1ace4:	beq	1abe4 <argp_parse@@Base+0x29bc>
   1ace8:	ldrb	r3, [sl, #1]
   1acec:	cmp	r3, #0
   1acf0:	strne	fp, [r4, #12]
   1acf4:	bne	1ad0c <argp_parse@@Base+0x2ae4>
   1acf8:	ldr	r3, [r4]
   1acfc:	cmp	r3, r5
   1ad00:	beq	1ad54 <argp_parse@@Base+0x2b2c>
   1ad04:	ldr	r3, [r9, r3, lsl #2]
   1ad08:	str	r3, [r4, #12]
   1ad0c:	ldr	r3, [r4, #12]
   1ad10:	str	r3, [r4, #20]
   1ad14:	mov	r2, #0
   1ad18:	str	r2, [r4, #12]
   1ad1c:	movw	r3, #51688	; 0xc9e8
   1ad20:	movt	r3, #1
   1ad24:	str	r3, [sp, #16]
   1ad28:	str	r8, [sp, #12]
   1ad2c:	str	r4, [sp, #8]
   1ad30:	str	r2, [sp, #4]
   1ad34:	ldr	r3, [sp, #72]	; 0x48
   1ad38:	str	r3, [sp]
   1ad3c:	ldr	r3, [sp, #24]
   1ad40:	mov	r2, r6
   1ad44:	mov	r1, r9
   1ad48:	mov	r0, r5
   1ad4c:	bl	1a384 <argp_parse@@Base+0x215c>
   1ad50:	b	1ae9c <argp_parse@@Base+0x2c74>
   1ad54:	cmp	r8, #0
   1ad58:	bne	1ad74 <argp_parse@@Base+0x2b4c>
   1ad5c:	ldr	r3, [sp, #28]
   1ad60:	str	r3, [r4, #8]
   1ad64:	ldrb	r0, [r6]
   1ad68:	cmp	r0, #58	; 0x3a
   1ad6c:	movne	r0, #63	; 0x3f
   1ad70:	b	1ae9c <argp_parse@@Base+0x2c74>
   1ad74:	movw	r0, #54824	; 0xd628
   1ad78:	movt	r0, #2
   1ad7c:	ldr	r3, [sp, #28]
   1ad80:	ldr	r2, [r9]
   1ad84:	movw	r1, #51644	; 0xc9bc
   1ad88:	movt	r1, #1
   1ad8c:	ldr	r0, [r0]
   1ad90:	bl	112ec <fprintf@plt>
   1ad94:	b	1ad5c <argp_parse@@Base+0x2b34>
   1ad98:	ldrb	r3, [r0, #2]
   1ad9c:	cmp	r3, #58	; 0x3a
   1ada0:	beq	1adcc <argp_parse@@Base+0x2ba4>
   1ada4:	ldrb	r3, [sl, #1]
   1ada8:	cmp	r3, #0
   1adac:	beq	1adfc <argp_parse@@Base+0x2bd4>
   1adb0:	str	fp, [r4, #12]
   1adb4:	ldr	r3, [r4]
   1adb8:	add	r3, r3, #1
   1adbc:	str	r3, [r4]
   1adc0:	mov	r3, #0
   1adc4:	str	r3, [r4, #20]
   1adc8:	b	1abf0 <argp_parse@@Base+0x29c8>
   1adcc:	ldrb	r3, [sl, #1]
   1add0:	cmp	r3, #0
   1add4:	moveq	r3, #0
   1add8:	streq	r3, [r4, #12]
   1addc:	beq	1adf0 <argp_parse@@Base+0x2bc8>
   1ade0:	str	fp, [r4, #12]
   1ade4:	ldr	r3, [r4]
   1ade8:	add	r3, r3, #1
   1adec:	str	r3, [r4]
   1adf0:	mov	r3, #0
   1adf4:	str	r3, [r4, #20]
   1adf8:	b	1abf0 <argp_parse@@Base+0x29c8>
   1adfc:	ldr	r3, [r4]
   1ae00:	cmp	r3, r5
   1ae04:	beq	1ae1c <argp_parse@@Base+0x2bf4>
   1ae08:	add	r2, r3, #1
   1ae0c:	str	r2, [r4]
   1ae10:	ldr	r3, [r9, r3, lsl #2]
   1ae14:	str	r3, [r4, #12]
   1ae18:	b	1adc0 <argp_parse@@Base+0x2b98>
   1ae1c:	cmp	r8, #0
   1ae20:	bne	1ae3c <argp_parse@@Base+0x2c14>
   1ae24:	ldr	r3, [sp, #28]
   1ae28:	str	r3, [r4, #8]
   1ae2c:	ldrb	r7, [r6]
   1ae30:	cmp	r7, #58	; 0x3a
   1ae34:	movne	r7, #63	; 0x3f
   1ae38:	b	1adc0 <argp_parse@@Base+0x2b98>
   1ae3c:	movw	r0, #54824	; 0xd628
   1ae40:	movt	r0, #2
   1ae44:	ldr	r3, [sp, #28]
   1ae48:	ldr	r2, [r9]
   1ae4c:	movw	r1, #51644	; 0xc9bc
   1ae50:	movt	r1, #1
   1ae54:	ldr	r0, [r0]
   1ae58:	bl	112ec <fprintf@plt>
   1ae5c:	b	1ae24 <argp_parse@@Base+0x2bfc>
   1ae60:	mvn	r0, #0
   1ae64:	b	1ae9c <argp_parse@@Base+0x2c74>
   1ae68:	mvn	r0, #0
   1ae6c:	b	1ae9c <argp_parse@@Base+0x2c74>
   1ae70:	ldrb	r3, [sl]
   1ae74:	cmp	r3, #45	; 0x2d
   1ae78:	beq	1ab34 <argp_parse@@Base+0x290c>
   1ae7c:	ldr	r3, [r4, #24]
   1ae80:	cmp	r3, #0
   1ae84:	beq	1ae68 <argp_parse@@Base+0x2c40>
   1ae88:	add	r3, r7, #1
   1ae8c:	str	r3, [r4]
   1ae90:	ldr	r3, [r9, r7, lsl #2]
   1ae94:	str	r3, [r4, #12]
   1ae98:	mov	r0, #1
   1ae9c:	add	sp, sp, #36	; 0x24
   1aea0:	ldrd	r4, [sp]
   1aea4:	ldrd	r6, [sp, #8]
   1aea8:	ldrd	r8, [sp, #16]
   1aeac:	ldrd	sl, [sp, #24]
   1aeb0:	add	sp, sp, #32
   1aeb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aeb8:	strd	r4, [sp, #-12]!
   1aebc:	str	lr, [sp, #8]
   1aec0:	sub	sp, sp, #20
   1aec4:	movw	r4, #54940	; 0xd69c
   1aec8:	movt	r4, #2
   1aecc:	movw	r5, #54800	; 0xd610
   1aed0:	movt	r5, #2
   1aed4:	ldr	ip, [r5]
   1aed8:	str	ip, [r4]
   1aedc:	ldr	ip, [r5, #4]
   1aee0:	str	ip, [r4, #4]
   1aee4:	ldr	ip, [sp, #40]	; 0x28
   1aee8:	str	ip, [sp, #12]
   1aeec:	str	r4, [sp, #8]
   1aef0:	ldr	ip, [sp, #36]	; 0x24
   1aef4:	str	ip, [sp, #4]
   1aef8:	ldr	ip, [sp, #32]
   1aefc:	str	ip, [sp]
   1af00:	bl	1a8fc <argp_parse@@Base+0x26d4>
   1af04:	ldr	r3, [r4]
   1af08:	str	r3, [r5]
   1af0c:	movw	r3, #55012	; 0xd6e4
   1af10:	movt	r3, #2
   1af14:	ldr	r2, [r4, #12]
   1af18:	str	r2, [r3]
   1af1c:	ldr	r3, [r4, #8]
   1af20:	str	r3, [r5, #8]
   1af24:	add	sp, sp, #20
   1af28:	ldrd	r4, [sp]
   1af2c:	add	sp, sp, #8
   1af30:	pop	{pc}		; (ldr pc, [sp], #4)
   1af34:	push	{lr}		; (str lr, [sp, #-4]!)
   1af38:	sub	sp, sp, #20
   1af3c:	mov	r3, #1
   1af40:	str	r3, [sp, #8]
   1af44:	mov	r3, #0
   1af48:	str	r3, [sp, #4]
   1af4c:	str	r3, [sp]
   1af50:	bl	1aeb8 <argp_parse@@Base+0x2c90>
   1af54:	add	sp, sp, #20
   1af58:	pop	{pc}		; (ldr pc, [sp], #4)
   1af5c:	str	r4, [sp, #-8]!
   1af60:	str	lr, [sp, #4]
   1af64:	umull	r2, r3, r1, r2
   1af68:	cmp	r3, #0
   1af6c:	bne	1af84 <argp_parse@@Base+0x2d5c>
   1af70:	mov	r1, r2
   1af74:	bl	19aac <argp_parse@@Base+0x1884>
   1af78:	ldr	r4, [sp]
   1af7c:	add	sp, sp, #4
   1af80:	pop	{pc}		; (ldr pc, [sp], #4)
   1af84:	bl	112f8 <__errno_location@plt>
   1af88:	mov	r3, #12
   1af8c:	str	r3, [r0]
   1af90:	mov	r0, #0
   1af94:	b	1af78 <argp_parse@@Base+0x2d50>
   1af98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1af9c:	mov	r7, r0
   1afa0:	ldr	r6, [pc, #72]	; 1aff0 <argp_parse@@Base+0x2dc8>
   1afa4:	ldr	r5, [pc, #72]	; 1aff4 <argp_parse@@Base+0x2dcc>
   1afa8:	add	r6, pc, r6
   1afac:	add	r5, pc, r5
   1afb0:	sub	r6, r6, r5
   1afb4:	mov	r8, r1
   1afb8:	mov	r9, r2
   1afbc:	bl	110bc <calloc@plt-0x20>
   1afc0:	asrs	r6, r6, #2
   1afc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1afc8:	mov	r4, #0
   1afcc:	add	r4, r4, #1
   1afd0:	ldr	r3, [r5], #4
   1afd4:	mov	r2, r9
   1afd8:	mov	r1, r8
   1afdc:	mov	r0, r7
   1afe0:	blx	r3
   1afe4:	cmp	r6, r4
   1afe8:	bne	1afcc <argp_parse@@Base+0x2da4>
   1afec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aff0:	andeq	r1, r1, r4, ror #30
   1aff4:	andeq	r1, r1, ip, asr pc
   1aff8:	bx	lr

Disassembly of section .fini:

0001affc <.fini>:
   1affc:	push	{r3, lr}
   1b000:	pop	{r3, pc}
