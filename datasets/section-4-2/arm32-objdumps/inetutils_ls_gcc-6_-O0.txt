
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010b3c <.init>:
   10b3c:	push	{r3, lr}
   10b40:	bl	10e24 <__assert_fail@plt+0x4c>
   10b44:	pop	{r3, pc}

Disassembly of section .plt:

00010b48 <fstatfs64@plt-0x14>:
   10b48:	push	{lr}		; (str lr, [sp, #-4]!)
   10b4c:	ldr	lr, [pc, #4]	; 10b58 <fstatfs64@plt-0x4>
   10b50:	add	lr, pc, lr
   10b54:	ldr	pc, [lr, #8]!
   10b58:	andeq	fp, r1, r8, lsr #9

00010b5c <fstatfs64@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #110592	; 0x1b000
   10b64:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b68 <calloc@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #110592	; 0x1b000
   10b70:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b74 <raise@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #110592	; 0x1b000
   10b7c:	ldr	pc, [ip, #1176]!	; 0x498

00010b80 <strcmp@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #110592	; 0x1b000
   10b88:	ldr	pc, [ip, #1168]!	; 0x490

00010b8c <getpwuid@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #110592	; 0x1b000
   10b94:	ldr	pc, [ip, #1160]!	; 0x488

00010b98 <printf@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #110592	; 0x1b000
   10ba0:	ldr	pc, [ip, #1152]!	; 0x480

00010ba4 <getuid@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #110592	; 0x1b000
   10bac:	ldr	pc, [ip, #1144]!	; 0x478

00010bb0 <memmove@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #110592	; 0x1b000
   10bb8:	ldr	pc, [ip, #1136]!	; 0x470

00010bbc <free@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #110592	; 0x1b000
   10bc4:	ldr	pc, [ip, #1128]!	; 0x468

00010bc8 <memcpy@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #110592	; 0x1b000
   10bd0:	ldr	pc, [ip, #1120]!	; 0x460

00010bd4 <time@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #110592	; 0x1b000
   10bdc:	ldr	pc, [ip, #1112]!	; 0x458

00010be0 <ctime@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #110592	; 0x1b000
   10be8:	ldr	pc, [ip, #1104]!	; 0x450

00010bec <realloc@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #110592	; 0x1b000
   10bf4:	ldr	pc, [ip, #1096]!	; 0x448

00010bf8 <funlockfile@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #110592	; 0x1b000
   10c00:	ldr	pc, [ip, #1088]!	; 0x440

00010c04 <__fxstatat64@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #110592	; 0x1b000
   10c0c:	ldr	pc, [ip, #1080]!	; 0x438

00010c10 <__fxstat64@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #110592	; 0x1b000
   10c18:	ldr	pc, [ip, #1072]!	; 0x430

00010c1c <readlink@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #110592	; 0x1b000
   10c24:	ldr	pc, [ip, #1064]!	; 0x428

00010c28 <fwrite@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #110592	; 0x1b000
   10c30:	ldr	pc, [ip, #1056]!	; 0x420

00010c34 <ioctl@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #110592	; 0x1b000
   10c3c:	ldr	pc, [ip, #1048]!	; 0x418

00010c40 <strcpy@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #110592	; 0x1b000
   10c48:	ldr	pc, [ip, #1040]!	; 0x410

00010c4c <open64@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #110592	; 0x1b000
   10c54:	ldr	pc, [ip, #1032]!	; 0x408

00010c58 <getenv@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #110592	; 0x1b000
   10c60:	ldr	pc, [ip, #1024]!	; 0x400

00010c64 <malloc@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #110592	; 0x1b000
   10c6c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c70 <__libc_start_main@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #110592	; 0x1b000
   10c78:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c7c <strerror@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #110592	; 0x1b000
   10c84:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c88 <__gmon_start__@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #110592	; 0x1b000
   10c90:	ldr	pc, [ip, #992]!	; 0x3e0

00010c94 <__ctype_b_loc@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #110592	; 0x1b000
   10c9c:	ldr	pc, [ip, #984]!	; 0x3d8

00010ca0 <strlen@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #110592	; 0x1b000
   10ca8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cac <strchr@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #110592	; 0x1b000
   10cb4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cb8 <openat64@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #110592	; 0x1b000
   10cc0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cc4 <fprintf@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #110592	; 0x1b000
   10ccc:	ldr	pc, [ip, #952]!	; 0x3b8

00010cd0 <__errno_location@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #110592	; 0x1b000
   10cd8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cdc <snprintf@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #110592	; 0x1b000
   10ce4:	ldr	pc, [ip, #936]!	; 0x3a8

00010ce8 <memset@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #110592	; 0x1b000
   10cf0:	ldr	pc, [ip, #928]!	; 0x3a0

00010cf4 <putchar@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #110592	; 0x1b000
   10cfc:	ldr	pc, [ip, #920]!	; 0x398

00010d00 <fcntl64@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #110592	; 0x1b000
   10d08:	ldr	pc, [ip, #912]!	; 0x390

00010d0c <strrchr@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #110592	; 0x1b000
   10d14:	ldr	pc, [ip, #904]!	; 0x388

00010d18 <fputc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #110592	; 0x1b000
   10d20:	ldr	pc, [ip, #896]!	; 0x380

00010d24 <readdir64@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #110592	; 0x1b000
   10d2c:	ldr	pc, [ip, #888]!	; 0x378

00010d30 <fdopendir@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #110592	; 0x1b000
   10d38:	ldr	pc, [ip, #880]!	; 0x370

00010d3c <dirfd@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #110592	; 0x1b000
   10d44:	ldr	pc, [ip, #872]!	; 0x368

00010d48 <flockfile@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #110592	; 0x1b000
   10d50:	ldr	pc, [ip, #864]!	; 0x360

00010d54 <atoi@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #110592	; 0x1b000
   10d5c:	ldr	pc, [ip, #856]!	; 0x358

00010d60 <fchdir@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #110592	; 0x1b000
   10d68:	ldr	pc, [ip, #848]!	; 0x350

00010d6c <qsort@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #110592	; 0x1b000
   10d74:	ldr	pc, [ip, #840]!	; 0x348

00010d78 <__xstat64@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #110592	; 0x1b000
   10d80:	ldr	pc, [ip, #832]!	; 0x340

00010d84 <isatty@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #110592	; 0x1b000
   10d8c:	ldr	pc, [ip, #824]!	; 0x338

00010d90 <strncmp@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #110592	; 0x1b000
   10d98:	ldr	pc, [ip, #816]!	; 0x330

00010d9c <abort@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #110592	; 0x1b000
   10da4:	ldr	pc, [ip, #808]!	; 0x328

00010da8 <close@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #110592	; 0x1b000
   10db0:	ldr	pc, [ip, #800]!	; 0x320

00010db4 <__lxstat64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #110592	; 0x1b000
   10dbc:	ldr	pc, [ip, #792]!	; 0x318

00010dc0 <closedir@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #110592	; 0x1b000
   10dc8:	ldr	pc, [ip, #784]!	; 0x310

00010dcc <getgrgid@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #110592	; 0x1b000
   10dd4:	ldr	pc, [ip, #776]!	; 0x308

00010dd8 <__assert_fail@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #110592	; 0x1b000
   10de0:	ldr	pc, [ip, #768]!	; 0x300

Disassembly of section .text:

00010de8 <.text>:
   10de8:	mov	fp, #0
   10dec:	mov	lr, #0
   10df0:	pop	{r1}		; (ldr r1, [sp], #4)
   10df4:	mov	r2, sp
   10df8:	push	{r2}		; (str r2, [sp, #-4]!)
   10dfc:	push	{r0}		; (str r0, [sp, #-4]!)
   10e00:	ldr	ip, [pc, #16]	; 10e18 <__assert_fail@plt+0x40>
   10e04:	push	{ip}		; (str ip, [sp, #-4]!)
   10e08:	ldr	r0, [pc, #12]	; 10e1c <__assert_fail@plt+0x44>
   10e0c:	ldr	r3, [pc, #12]	; 10e20 <__assert_fail@plt+0x48>
   10e10:	bl	10c70 <__libc_start_main@plt>
   10e14:	bl	10d9c <abort@plt>
   10e18:	andeq	fp, r1, ip, asr #17
   10e1c:	andeq	r0, r1, r0, lsl pc
   10e20:	andeq	fp, r1, ip, ror #16
   10e24:	ldr	r3, [pc, #20]	; 10e40 <__assert_fail@plt+0x68>
   10e28:	ldr	r2, [pc, #20]	; 10e44 <__assert_fail@plt+0x6c>
   10e2c:	add	r3, pc, r3
   10e30:	ldr	r2, [r3, r2]
   10e34:	cmp	r2, #0
   10e38:	bxeq	lr
   10e3c:	b	10c88 <__gmon_start__@plt>
   10e40:	andeq	fp, r1, ip, asr #3
   10e44:	andeq	r0, r0, r4, ror #1
   10e48:	ldr	r3, [pc, #28]	; 10e6c <__assert_fail@plt+0x94>
   10e4c:	ldr	r0, [pc, #28]	; 10e70 <__assert_fail@plt+0x98>
   10e50:	sub	r3, r3, r0
   10e54:	cmp	r3, #6
   10e58:	bxls	lr
   10e5c:	ldr	r3, [pc, #16]	; 10e74 <__assert_fail@plt+0x9c>
   10e60:	cmp	r3, #0
   10e64:	bxeq	lr
   10e68:	bx	r3
   10e6c:	andeq	ip, r2, r3, lsl r1
   10e70:	andeq	ip, r2, r0, lsl r1
   10e74:	andeq	r0, r0, r0
   10e78:	ldr	r1, [pc, #36]	; 10ea4 <__assert_fail@plt+0xcc>
   10e7c:	ldr	r0, [pc, #36]	; 10ea8 <__assert_fail@plt+0xd0>
   10e80:	sub	r1, r1, r0
   10e84:	asr	r1, r1, #2
   10e88:	add	r1, r1, r1, lsr #31
   10e8c:	asrs	r1, r1, #1
   10e90:	bxeq	lr
   10e94:	ldr	r3, [pc, #16]	; 10eac <__assert_fail@plt+0xd4>
   10e98:	cmp	r3, #0
   10e9c:	bxeq	lr
   10ea0:	bx	r3
   10ea4:	andeq	ip, r2, r0, lsl r1
   10ea8:	andeq	ip, r2, r0, lsl r1
   10eac:	andeq	r0, r0, r0
   10eb0:	push	{r4, lr}
   10eb4:	ldr	r4, [pc, #24]	; 10ed4 <__assert_fail@plt+0xfc>
   10eb8:	ldrb	r3, [r4]
   10ebc:	cmp	r3, #0
   10ec0:	popne	{r4, pc}
   10ec4:	bl	10e48 <__assert_fail@plt+0x70>
   10ec8:	mov	r3, #1
   10ecc:	strb	r3, [r4]
   10ed0:	pop	{r4, pc}
   10ed4:	andeq	ip, r2, r4, lsl r1
   10ed8:	ldr	r0, [pc, #40]	; 10f08 <__assert_fail@plt+0x130>
   10edc:	ldr	r3, [r0]
   10ee0:	cmp	r3, #0
   10ee4:	bne	10eec <__assert_fail@plt+0x114>
   10ee8:	b	10e78 <__assert_fail@plt+0xa0>
   10eec:	ldr	r3, [pc, #24]	; 10f0c <__assert_fail@plt+0x134>
   10ef0:	cmp	r3, #0
   10ef4:	beq	10ee8 <__assert_fail@plt+0x110>
   10ef8:	push	{r4, lr}
   10efc:	blx	r3
   10f00:	pop	{r4, lr}
   10f04:	b	10e78 <__assert_fail@plt+0xa0>
   10f08:	andeq	fp, r2, r4, lsl pc
   10f0c:	andeq	r0, r0, r0
   10f10:	push	{fp, lr}
   10f14:	add	fp, sp, #4
   10f18:	sub	sp, sp, #8
   10f1c:	str	r0, [fp, #-8]
   10f20:	str	r1, [fp, #-12]
   10f24:	ldr	r1, [fp, #-12]
   10f28:	ldr	r0, [fp, #-8]
   10f2c:	bl	10f40 <__assert_fail@plt+0x168>
   10f30:	mov	r3, r0
   10f34:	mov	r0, r3
   10f38:	sub	sp, fp, #4
   10f3c:	pop	{fp, pc}
   10f40:	push	{fp, lr}
   10f44:	add	fp, sp, #4
   10f48:	sub	sp, sp, #32
   10f4c:	str	r0, [fp, #-32]	; 0xffffffe0
   10f50:	str	r1, [fp, #-36]	; 0xffffffdc
   10f54:	ldr	r3, [pc, #2612]	; 11990 <__assert_fail@plt+0xbb8>
   10f58:	mov	r2, #0
   10f5c:	str	r2, [r3]
   10f60:	ldr	r3, [pc, #2604]	; 11994 <__assert_fail@plt+0xbbc>
   10f64:	mov	r2, #0
   10f68:	str	r2, [r3]
   10f6c:	ldr	r3, [pc, #2592]	; 11994 <__assert_fail@plt+0xbbc>
   10f70:	ldr	r3, [r3]
   10f74:	ldr	r2, [pc, #2588]	; 11998 <__assert_fail@plt+0xbc0>
   10f78:	str	r3, [r2]
   10f7c:	ldr	r3, [pc, #2580]	; 11998 <__assert_fail@plt+0xbc0>
   10f80:	ldr	r3, [r3]
   10f84:	ldr	r2, [pc, #2576]	; 1199c <__assert_fail@plt+0xbc4>
   10f88:	str	r3, [r2]
   10f8c:	ldr	r3, [pc, #2568]	; 1199c <__assert_fail@plt+0xbc4>
   10f90:	ldr	r3, [r3]
   10f94:	ldr	r2, [pc, #2564]	; 119a0 <__assert_fail@plt+0xbc8>
   10f98:	str	r3, [r2]
   10f9c:	ldr	r3, [pc, #2556]	; 119a0 <__assert_fail@plt+0xbc8>
   10fa0:	ldr	r3, [r3]
   10fa4:	ldr	r2, [pc, #2552]	; 119a4 <__assert_fail@plt+0xbcc>
   10fa8:	str	r3, [r2]
   10fac:	ldr	r3, [pc, #2548]	; 119a8 <__assert_fail@plt+0xbd0>
   10fb0:	mov	r2, #0
   10fb4:	str	r2, [r3]
   10fb8:	ldr	r3, [pc, #2536]	; 119a8 <__assert_fail@plt+0xbd0>
   10fbc:	ldr	r3, [r3]
   10fc0:	ldr	r2, [pc, #2532]	; 119ac <__assert_fail@plt+0xbd4>
   10fc4:	str	r3, [r2]
   10fc8:	ldr	r3, [pc, #2524]	; 119ac <__assert_fail@plt+0xbd4>
   10fcc:	ldr	r3, [r3]
   10fd0:	ldr	r2, [pc, #2520]	; 119b0 <__assert_fail@plt+0xbd8>
   10fd4:	str	r3, [r2]
   10fd8:	ldr	r3, [pc, #2512]	; 119b0 <__assert_fail@plt+0xbd8>
   10fdc:	ldr	r3, [r3]
   10fe0:	ldr	r2, [pc, #2508]	; 119b4 <__assert_fail@plt+0xbdc>
   10fe4:	str	r3, [r2]
   10fe8:	ldr	r3, [pc, #2504]	; 119b8 <__assert_fail@plt+0xbe0>
   10fec:	mov	r2, #0
   10ff0:	str	r2, [r3]
   10ff4:	ldr	r3, [pc, #2492]	; 119b8 <__assert_fail@plt+0xbe0>
   10ff8:	ldr	r3, [r3]
   10ffc:	ldr	r2, [pc, #2488]	; 119bc <__assert_fail@plt+0xbe4>
   11000:	str	r3, [r2]
   11004:	ldr	r3, [pc, #2480]	; 119bc <__assert_fail@plt+0xbe4>
   11008:	ldr	r3, [r3]
   1100c:	ldr	r2, [pc, #2476]	; 119c0 <__assert_fail@plt+0xbe8>
   11010:	str	r3, [r2]
   11014:	ldr	r3, [pc, #2472]	; 119c4 <__assert_fail@plt+0xbec>
   11018:	mov	r2, #0
   1101c:	str	r2, [r3]
   11020:	ldr	r3, [pc, #2460]	; 119c4 <__assert_fail@plt+0xbec>
   11024:	ldr	r3, [r3]
   11028:	ldr	r2, [pc, #2456]	; 119c8 <__assert_fail@plt+0xbf0>
   1102c:	str	r3, [r2]
   11030:	ldr	r3, [pc, #2448]	; 119c8 <__assert_fail@plt+0xbf0>
   11034:	ldr	r3, [r3]
   11038:	ldr	r2, [pc, #2444]	; 119cc <__assert_fail@plt+0xbf4>
   1103c:	str	r3, [r2]
   11040:	ldr	r3, [pc, #2436]	; 119cc <__assert_fail@plt+0xbf4>
   11044:	ldr	r3, [r3]
   11048:	ldr	r2, [pc, #2432]	; 119d0 <__assert_fail@plt+0xbf8>
   1104c:	str	r3, [r2]
   11050:	ldr	r3, [pc, #2428]	; 119d4 <__assert_fail@plt+0xbfc>
   11054:	mov	r2, #0
   11058:	str	r2, [r3]
   1105c:	ldr	r3, [pc, #2416]	; 119d4 <__assert_fail@plt+0xbfc>
   11060:	ldr	r3, [r3]
   11064:	ldr	r2, [pc, #2412]	; 119d8 <__assert_fail@plt+0xc00>
   11068:	str	r3, [r2]
   1106c:	ldr	r3, [pc, #2404]	; 119d8 <__assert_fail@plt+0xc00>
   11070:	ldr	r3, [r3]
   11074:	ldr	r2, [pc, #2400]	; 119dc <__assert_fail@plt+0xc04>
   11078:	str	r3, [r2]
   1107c:	ldr	r3, [pc, #2392]	; 119dc <__assert_fail@plt+0xc04>
   11080:	ldr	r3, [r3]
   11084:	ldr	r2, [pc, #2388]	; 119e0 <__assert_fail@plt+0xc08>
   11088:	str	r3, [r2]
   1108c:	ldr	r3, [pc, #2384]	; 119e4 <__assert_fail@plt+0xc0c>
   11090:	mov	r2, #0
   11094:	str	r2, [r3]
   11098:	ldr	r3, [pc, #2372]	; 119e4 <__assert_fail@plt+0xc0c>
   1109c:	ldr	r3, [r3]
   110a0:	ldr	r2, [pc, #2368]	; 119e8 <__assert_fail@plt+0xc10>
   110a4:	str	r3, [r2]
   110a8:	ldr	r3, [pc, #2360]	; 119e8 <__assert_fail@plt+0xc10>
   110ac:	ldr	r3, [r3]
   110b0:	ldr	r2, [pc, #2356]	; 119ec <__assert_fail@plt+0xc14>
   110b4:	str	r3, [r2]
   110b8:	mov	r0, #1
   110bc:	bl	10d84 <isatty@plt>
   110c0:	mov	r3, r0
   110c4:	cmp	r3, #0
   110c8:	beq	11158 <__assert_fail@plt+0x380>
   110cc:	ldr	r0, [pc, #2332]	; 119f0 <__assert_fail@plt+0xc18>
   110d0:	bl	10c58 <getenv@plt>
   110d4:	str	r0, [fp, #-12]
   110d8:	ldr	r3, [fp, #-12]
   110dc:	cmp	r3, #0
   110e0:	beq	110fc <__assert_fail@plt+0x324>
   110e4:	ldr	r0, [fp, #-12]
   110e8:	bl	10d54 <atoi@plt>
   110ec:	mov	r2, r0
   110f0:	ldr	r3, [pc, #2300]	; 119f4 <__assert_fail@plt+0xc1c>
   110f4:	str	r2, [r3]
   110f8:	b	11138 <__assert_fail@plt+0x360>
   110fc:	sub	r3, fp, #24
   11100:	mov	r2, r3
   11104:	ldr	r1, [pc, #2284]	; 119f8 <__assert_fail@plt+0xc20>
   11108:	mov	r0, #1
   1110c:	bl	1a4b0 <__assert_fail@plt+0x96d8>
   11110:	mov	r3, r0
   11114:	cmp	r3, #0
   11118:	bne	11138 <__assert_fail@plt+0x360>
   1111c:	ldrh	r3, [fp, #-22]	; 0xffffffea
   11120:	cmp	r3, #0
   11124:	beq	11138 <__assert_fail@plt+0x360>
   11128:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1112c:	mov	r2, r3
   11130:	ldr	r3, [pc, #2236]	; 119f4 <__assert_fail@plt+0xc1c>
   11134:	str	r2, [r3]
   11138:	ldr	r3, [pc, #2176]	; 119c0 <__assert_fail@plt+0xbe8>
   1113c:	mov	r2, #1
   11140:	str	r2, [r3]
   11144:	ldr	r3, [pc, #2164]	; 119c0 <__assert_fail@plt+0xbe8>
   11148:	ldr	r3, [r3]
   1114c:	ldr	r2, [pc, #2124]	; 119a0 <__assert_fail@plt+0xbc8>
   11150:	str	r3, [r2]
   11154:	b	11164 <__assert_fail@plt+0x38c>
   11158:	ldr	r3, [pc, #2148]	; 119c4 <__assert_fail@plt+0xbec>
   1115c:	mov	r2, #1
   11160:	str	r2, [r3]
   11164:	bl	10ba4 <getuid@plt>
   11168:	mov	r3, r0
   1116c:	cmp	r3, #0
   11170:	bne	11180 <__assert_fail@plt+0x3a8>
   11174:	ldr	r3, [pc, #2100]	; 119b0 <__assert_fail@plt+0xbd8>
   11178:	mov	r2, #1
   1117c:	str	r2, [r3]
   11180:	ldr	r3, [pc, #2164]	; 119fc <__assert_fail@plt+0xc24>
   11184:	mov	r2, #1
   11188:	str	r2, [r3]
   1118c:	mov	r3, #20
   11190:	str	r3, [fp, #-8]
   11194:	b	11624 <__assert_fail@plt+0x84c>
   11198:	ldr	r3, [fp, #-16]
   1119c:	sub	r3, r3, #49	; 0x31
   111a0:	cmp	r3, #71	; 0x47
   111a4:	ldrls	pc, [pc, r3, lsl #2]
   111a8:	b	11618 <__assert_fail@plt+0x840>
   111ac:	andeq	r1, r1, ip, asr #5
   111b0:	andeq	r1, r1, r8, lsl r6
   111b4:	andeq	r1, r1, r8, lsl r6
   111b8:	andeq	r1, r1, r8, lsl r6
   111bc:	andeq	r1, r1, r8, lsl r6
   111c0:	andeq	r1, r1, r8, lsl r6
   111c4:	andeq	r1, r1, r8, lsl r6
   111c8:	andeq	r1, r1, r8, lsl r6
   111cc:	andeq	r1, r1, r8, lsl r6
   111d0:	andeq	r1, r1, r8, lsl r6
   111d4:	andeq	r1, r1, r8, lsl r6
   111d8:	andeq	r1, r1, r8, lsl r6
   111dc:	andeq	r1, r1, r8, lsl r6
   111e0:	andeq	r1, r1, r8, lsl r6
   111e4:	andeq	r1, r1, r8, lsl r6
   111e8:	andeq	r1, r1, r8, lsl r6
   111ec:	andeq	r1, r1, ip, lsr #10
   111f0:	andeq	r1, r1, r8, lsl r6
   111f4:	andeq	r1, r1, r8, lsl r3
   111f8:	andeq	r1, r1, r8, lsl r6
   111fc:	andeq	r1, r1, r8, lsl r6
   11200:	andeq	r1, r1, r4, ror #9
   11204:	andeq	r1, r1, r8, lsl r6
   11208:	andeq	r1, r1, r8, lsl r6
   1120c:	andeq	r1, r1, r8, lsl r6
   11210:	andeq	r1, r1, r8, lsl r6
   11214:	andeq	r1, r1, r8, lsl r6
   11218:	strdeq	r1, [r1], -r4
   1121c:	andeq	r1, r1, r8, lsl r6
   11220:	andeq	r1, r1, r8, lsl r6
   11224:	andeq	r1, r1, r8, lsl r6
   11228:	andeq	r1, r1, r8, lsl r6
   1122c:	andeq	r1, r1, r8, lsl r6
   11230:	andeq	r1, r1, r0, lsl r5
   11234:	andeq	r1, r1, r8, asr #11
   11238:	andeq	r1, r1, r8, ror #11
   1123c:	andeq	r1, r1, r8, lsl r6
   11240:	andeq	r1, r1, r8, lsl r6
   11244:	andeq	r1, r1, r8, lsl #12
   11248:	andeq	r1, r1, r8, lsl r6
   1124c:	andeq	r1, r1, r8, lsl r6
   11250:	andeq	r1, r1, r8, lsl r6
   11254:	andeq	r1, r1, r8, lsl r6
   11258:	andeq	r1, r1, r8, lsl r6
   1125c:	andeq	r1, r1, r8, lsl r6
   11260:	andeq	r1, r1, r8, lsl r6
   11264:	andeq	r1, r1, r8, lsl r6
   11268:	andeq	r1, r1, r8, lsl r6
   1126c:	andeq	r1, r1, r0, lsr #10
   11270:	andeq	r1, r1, r8, lsl r6
   11274:	andeq	r1, r1, ip, lsr #9
   11278:	andeq	r1, r1, ip, lsr r5
   1127c:	andeq	r1, r1, r8, lsl r6
   11280:	andeq	r1, r1, r8, asr r5
   11284:	andeq	r1, r1, r4, lsr #12
   11288:	andeq	r1, r1, r8, lsl r6
   1128c:	andeq	r1, r1, r8, ror #10
   11290:	andeq	r1, r1, r8, lsl r6
   11294:	andeq	r1, r1, r8, ror r5
   11298:	andeq	r1, r1, r4, ror #6
   1129c:			; <UNDEFINED> instruction: 0x000113bc
   112a0:	andeq	r1, r1, r4, asr r4
   112a4:	andeq	r1, r1, r8, lsl #11
   112a8:	muleq	r1, r8, r5
   112ac:	andeq	r1, r1, r8, lsr #11
   112b0:			; <UNDEFINED> instruction: 0x000115b8
   112b4:	ldrdeq	r1, [r1], -r8
   112b8:	strdeq	r1, [r1], -r8
   112bc:	andeq	r1, r1, r8, asr #9
   112c0:	andeq	r1, r1, r8, lsl r6
   112c4:	andeq	r1, r1, r8, lsl r6
   112c8:	andeq	r1, r1, r8, lsl #8
   112cc:	ldr	r3, [pc, #1776]	; 119c4 <__assert_fail@plt+0xbec>
   112d0:	mov	r2, #1
   112d4:	str	r2, [r3]
   112d8:	ldr	r3, [pc, #1784]	; 119d8 <__assert_fail@plt+0xc00>
   112dc:	mov	r2, #0
   112e0:	str	r2, [r3]
   112e4:	ldr	r3, [pc, #1772]	; 119d8 <__assert_fail@plt+0xc00>
   112e8:	ldr	r3, [r3]
   112ec:	ldr	r2, [pc, #1720]	; 119ac <__assert_fail@plt+0xbd4>
   112f0:	str	r3, [r2]
   112f4:	ldr	r3, [pc, #1712]	; 119ac <__assert_fail@plt+0xbd4>
   112f8:	ldr	r3, [r3]
   112fc:	ldr	r2, [pc, #1688]	; 1199c <__assert_fail@plt+0xbc4>
   11300:	str	r3, [r2]
   11304:	ldr	r3, [pc, #1680]	; 1199c <__assert_fail@plt+0xbc4>
   11308:	ldr	r3, [r3]
   1130c:	ldr	r2, [pc, #1676]	; 119a0 <__assert_fail@plt+0xbc8>
   11310:	str	r3, [r2]
   11314:	b	11624 <__assert_fail@plt+0x84c>
   11318:	ldr	r3, [pc, #1664]	; 119a0 <__assert_fail@plt+0xbc8>
   1131c:	mov	r2, #1
   11320:	str	r2, [r3]
   11324:	ldr	r3, [pc, #1708]	; 119d8 <__assert_fail@plt+0xc00>
   11328:	mov	r2, #0
   1132c:	str	r2, [r3]
   11330:	ldr	r3, [pc, #1696]	; 119d8 <__assert_fail@plt+0xc00>
   11334:	ldr	r3, [r3]
   11338:	ldr	r2, [pc, #1668]	; 119c4 <__assert_fail@plt+0xbec>
   1133c:	str	r3, [r2]
   11340:	ldr	r3, [pc, #1660]	; 119c4 <__assert_fail@plt+0xbec>
   11344:	ldr	r3, [r3]
   11348:	ldr	r2, [pc, #1612]	; 1199c <__assert_fail@plt+0xbc4>
   1134c:	str	r3, [r2]
   11350:	ldr	r3, [pc, #1604]	; 1199c <__assert_fail@plt+0xbc4>
   11354:	ldr	r3, [r3]
   11358:	ldr	r2, [pc, #1612]	; 119ac <__assert_fail@plt+0xbd4>
   1135c:	str	r3, [r2]
   11360:	b	11624 <__assert_fail@plt+0x84c>
   11364:	ldr	r3, [pc, #1600]	; 119ac <__assert_fail@plt+0xbd4>
   11368:	mov	r2, #1
   1136c:	str	r2, [r3]
   11370:	ldr	r3, [pc, #1600]	; 119b8 <__assert_fail@plt+0xbe0>
   11374:	mov	r2, #0
   11378:	str	r2, [r3]
   1137c:	ldr	r3, [pc, #1620]	; 119d8 <__assert_fail@plt+0xc00>
   11380:	mov	r2, #0
   11384:	str	r2, [r3]
   11388:	ldr	r3, [pc, #1608]	; 119d8 <__assert_fail@plt+0xc00>
   1138c:	ldr	r3, [r3]
   11390:	ldr	r2, [pc, #1580]	; 119c4 <__assert_fail@plt+0xbec>
   11394:	str	r3, [r2]
   11398:	ldr	r3, [pc, #1572]	; 119c4 <__assert_fail@plt+0xbec>
   1139c:	ldr	r3, [r3]
   113a0:	ldr	r2, [pc, #1524]	; 1199c <__assert_fail@plt+0xbc4>
   113a4:	str	r3, [r2]
   113a8:	ldr	r3, [pc, #1516]	; 1199c <__assert_fail@plt+0xbc4>
   113ac:	ldr	r3, [r3]
   113b0:	ldr	r2, [pc, #1512]	; 119a0 <__assert_fail@plt+0xbc8>
   113b4:	str	r3, [r2]
   113b8:	b	11624 <__assert_fail@plt+0x84c>
   113bc:	ldr	r3, [pc, #1556]	; 119d8 <__assert_fail@plt+0xc00>
   113c0:	mov	r2, #1
   113c4:	str	r2, [r3]
   113c8:	ldr	r3, [pc, #1524]	; 119c4 <__assert_fail@plt+0xbec>
   113cc:	mov	r2, #0
   113d0:	str	r2, [r3]
   113d4:	ldr	r3, [pc, #1512]	; 119c4 <__assert_fail@plt+0xbec>
   113d8:	ldr	r3, [r3]
   113dc:	ldr	r2, [pc, #1480]	; 119ac <__assert_fail@plt+0xbd4>
   113e0:	str	r3, [r2]
   113e4:	ldr	r3, [pc, #1472]	; 119ac <__assert_fail@plt+0xbd4>
   113e8:	ldr	r3, [r3]
   113ec:	ldr	r2, [pc, #1448]	; 1199c <__assert_fail@plt+0xbc4>
   113f0:	str	r3, [r2]
   113f4:	ldr	r3, [pc, #1440]	; 1199c <__assert_fail@plt+0xbc4>
   113f8:	ldr	r3, [r3]
   113fc:	ldr	r2, [pc, #1436]	; 119a0 <__assert_fail@plt+0xbc8>
   11400:	str	r3, [r2]
   11404:	b	11624 <__assert_fail@plt+0x84c>
   11408:	ldr	r3, [pc, #1420]	; 1199c <__assert_fail@plt+0xbc4>
   1140c:	mov	r2, #1
   11410:	str	r2, [r3]
   11414:	ldr	r3, [pc, #1468]	; 119d8 <__assert_fail@plt+0xc00>
   11418:	mov	r2, #0
   1141c:	str	r2, [r3]
   11420:	ldr	r3, [pc, #1456]	; 119d8 <__assert_fail@plt+0xc00>
   11424:	ldr	r3, [r3]
   11428:	ldr	r2, [pc, #1428]	; 119c4 <__assert_fail@plt+0xbec>
   1142c:	str	r3, [r2]
   11430:	ldr	r3, [pc, #1420]	; 119c4 <__assert_fail@plt+0xbec>
   11434:	ldr	r3, [r3]
   11438:	ldr	r2, [pc, #1388]	; 119ac <__assert_fail@plt+0xbd4>
   1143c:	str	r3, [r2]
   11440:	ldr	r3, [pc, #1380]	; 119ac <__assert_fail@plt+0xbd4>
   11444:	ldr	r3, [r3]
   11448:	ldr	r2, [pc, #1360]	; 119a0 <__assert_fail@plt+0xbc8>
   1144c:	str	r3, [r2]
   11450:	b	11624 <__assert_fail@plt+0x84c>
   11454:	ldr	r3, [pc, #1360]	; 119ac <__assert_fail@plt+0xbd4>
   11458:	mov	r2, #1
   1145c:	str	r2, [r3]
   11460:	ldr	r3, [pc, #1360]	; 119b8 <__assert_fail@plt+0xbe0>
   11464:	mov	r2, #1
   11468:	str	r2, [r3]
   1146c:	ldr	r3, [pc, #1380]	; 119d8 <__assert_fail@plt+0xc00>
   11470:	mov	r2, #0
   11474:	str	r2, [r3]
   11478:	ldr	r3, [pc, #1368]	; 119d8 <__assert_fail@plt+0xc00>
   1147c:	ldr	r3, [r3]
   11480:	ldr	r2, [pc, #1340]	; 119c4 <__assert_fail@plt+0xbec>
   11484:	str	r3, [r2]
   11488:	ldr	r3, [pc, #1332]	; 119c4 <__assert_fail@plt+0xbec>
   1148c:	ldr	r3, [r3]
   11490:	ldr	r2, [pc, #1284]	; 1199c <__assert_fail@plt+0xbc4>
   11494:	str	r3, [r2]
   11498:	ldr	r3, [pc, #1276]	; 1199c <__assert_fail@plt+0xbc4>
   1149c:	ldr	r3, [r3]
   114a0:	ldr	r2, [pc, #1272]	; 119a0 <__assert_fail@plt+0xbc8>
   114a4:	str	r3, [r2]
   114a8:	b	11624 <__assert_fail@plt+0x84c>
   114ac:	ldr	r3, [pc, #1320]	; 119dc <__assert_fail@plt+0xc04>
   114b0:	mov	r2, #1
   114b4:	str	r2, [r3]
   114b8:	ldr	r3, [pc, #1252]	; 119a4 <__assert_fail@plt+0xbcc>
   114bc:	mov	r2, #0
   114c0:	str	r2, [r3]
   114c4:	b	11624 <__assert_fail@plt+0x84c>
   114c8:	ldr	r3, [pc, #1236]	; 119a4 <__assert_fail@plt+0xbcc>
   114cc:	mov	r2, #1
   114d0:	str	r2, [r3]
   114d4:	ldr	r3, [pc, #1280]	; 119dc <__assert_fail@plt+0xc04>
   114d8:	mov	r2, #0
   114dc:	str	r2, [r3]
   114e0:	b	11624 <__assert_fail@plt+0x84c>
   114e4:	ldr	r3, [pc, #1280]	; 119ec <__assert_fail@plt+0xc14>
   114e8:	mov	r2, #1
   114ec:	str	r2, [r3]
   114f0:	b	11624 <__assert_fail@plt+0x84c>
   114f4:	ldr	r3, [fp, #-8]
   114f8:	bic	r3, r3, #16
   114fc:	str	r3, [fp, #-8]
   11500:	ldr	r3, [fp, #-8]
   11504:	orr	r3, r3, #2
   11508:	str	r3, [fp, #-8]
   1150c:	b	11624 <__assert_fail@plt+0x84c>
   11510:	ldr	r3, [pc, #1208]	; 119d0 <__assert_fail@plt+0xbf8>
   11514:	mov	r2, #1
   11518:	str	r2, [r3]
   1151c:	b	11624 <__assert_fail@plt+0x84c>
   11520:	ldr	r3, [fp, #-8]
   11524:	orr	r3, r3, #32
   11528:	str	r3, [fp, #-8]
   1152c:	ldr	r3, [pc, #1148]	; 119b0 <__assert_fail@plt+0xbd8>
   11530:	mov	r2, #1
   11534:	str	r2, [r3]
   11538:	b	11624 <__assert_fail@plt+0x84c>
   1153c:	ldr	r3, [pc, #1136]	; 119b4 <__assert_fail@plt+0xbdc>
   11540:	mov	r2, #1
   11544:	str	r2, [r3]
   11548:	ldr	r3, [pc, #1152]	; 119d0 <__assert_fail@plt+0xbf8>
   1154c:	mov	r2, #0
   11550:	str	r2, [r3]
   11554:	b	11624 <__assert_fail@plt+0x84c>
   11558:	ldr	r3, [pc, #1116]	; 119bc <__assert_fail@plt+0xbe4>
   1155c:	mov	r2, #1
   11560:	str	r2, [r3]
   11564:	b	11624 <__assert_fail@plt+0x84c>
   11568:	ldr	r3, [pc, #1060]	; 11994 <__assert_fail@plt+0xbbc>
   1156c:	mov	r2, #1
   11570:	str	r2, [r3]
   11574:	b	11624 <__assert_fail@plt+0x84c>
   11578:	ldr	r3, [pc, #1152]	; 11a00 <__assert_fail@plt+0xc28>
   1157c:	mov	r2, #1024	; 0x400
   11580:	str	r2, [r3]
   11584:	b	11624 <__assert_fail@plt+0x84c>
   11588:	ldr	r3, [pc, #1032]	; 11998 <__assert_fail@plt+0xbc0>
   1158c:	mov	r2, #1
   11590:	str	r2, [r3]
   11594:	b	11624 <__assert_fail@plt+0x84c>
   11598:	ldr	r3, [pc, #1096]	; 119e8 <__assert_fail@plt+0xc10>
   1159c:	mov	r2, #1
   115a0:	str	r2, [r3]
   115a4:	b	11624 <__assert_fail@plt+0x84c>
   115a8:	ldr	r3, [pc, #1040]	; 119c0 <__assert_fail@plt+0xbe8>
   115ac:	mov	r2, #1
   115b0:	str	r2, [r3]
   115b4:	b	11624 <__assert_fail@plt+0x84c>
   115b8:	ldr	r3, [pc, #1036]	; 119cc <__assert_fail@plt+0xbf4>
   115bc:	mov	r2, #1
   115c0:	str	r2, [r3]
   115c4:	b	11624 <__assert_fail@plt+0x84c>
   115c8:	ldr	r3, [pc, #1076]	; 11a04 <__assert_fail@plt+0xc2c>
   115cc:	mov	r2, #1
   115d0:	str	r2, [r3]
   115d4:	b	11624 <__assert_fail@plt+0x84c>
   115d8:	ldr	r3, [pc, #1024]	; 119e0 <__assert_fail@plt+0xc08>
   115dc:	mov	r2, #1
   115e0:	str	r2, [r3]
   115e4:	b	11624 <__assert_fail@plt+0x84c>
   115e8:	ldr	r3, [pc, #984]	; 119c8 <__assert_fail@plt+0xbf0>
   115ec:	mov	r2, #1
   115f0:	str	r2, [r3]
   115f4:	b	11624 <__assert_fail@plt+0x84c>
   115f8:	ldr	r3, [pc, #1028]	; 11a04 <__assert_fail@plt+0xc2c>
   115fc:	mov	r2, #2
   11600:	str	r2, [r3]
   11604:	b	11624 <__assert_fail@plt+0x84c>
   11608:	ldr	r3, [pc, #980]	; 119e4 <__assert_fail@plt+0xc0c>
   1160c:	mov	r2, #1
   11610:	str	r2, [r3]
   11614:	b	11624 <__assert_fail@plt+0x84c>
   11618:	bl	137a0 <__assert_fail@plt+0x29c8>
   1161c:	mov	r3, r0
   11620:	b	11984 <__assert_fail@plt+0xbac>
   11624:	ldr	r2, [pc, #988]	; 11a08 <__assert_fail@plt+0xc30>
   11628:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1162c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11630:	bl	18654 <__assert_fail@plt+0x787c>
   11634:	str	r0, [fp, #-16]
   11638:	ldr	r3, [fp, #-16]
   1163c:	cmn	r3, #1
   11640:	bne	11198 <__assert_fail@plt+0x3c0>
   11644:	ldr	r3, [pc, #944]	; 119fc <__assert_fail@plt+0xc24>
   11648:	ldr	r3, [r3]
   1164c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11650:	sub	r3, r2, r3
   11654:	str	r3, [fp, #-32]	; 0xffffffe0
   11658:	ldr	r3, [pc, #924]	; 119fc <__assert_fail@plt+0xc24>
   1165c:	ldr	r3, [r3]
   11660:	lsl	r3, r3, #2
   11664:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11668:	add	r3, r2, r3
   1166c:	str	r3, [fp, #-36]	; 0xffffffdc
   11670:	ldr	r3, [pc, #820]	; 119ac <__assert_fail@plt+0xbd4>
   11674:	ldr	r3, [r3]
   11678:	cmp	r3, #0
   1167c:	bne	116dc <__assert_fail@plt+0x904>
   11680:	ldr	r3, [pc, #780]	; 11994 <__assert_fail@plt+0xbbc>
   11684:	ldr	r3, [r3]
   11688:	cmp	r3, #0
   1168c:	bne	116dc <__assert_fail@plt+0x904>
   11690:	ldr	r3, [pc, #840]	; 119e0 <__assert_fail@plt+0xc08>
   11694:	ldr	r3, [r3]
   11698:	cmp	r3, #0
   1169c:	bne	116dc <__assert_fail@plt+0x904>
   116a0:	ldr	r3, [pc, #836]	; 119ec <__assert_fail@plt+0xc14>
   116a4:	ldr	r3, [r3]
   116a8:	cmp	r3, #0
   116ac:	bne	116dc <__assert_fail@plt+0x904>
   116b0:	ldr	r3, [pc, #816]	; 119e8 <__assert_fail@plt+0xc10>
   116b4:	ldr	r3, [r3]
   116b8:	cmp	r3, #0
   116bc:	bne	116dc <__assert_fail@plt+0x904>
   116c0:	ldr	r3, [pc, #828]	; 11a04 <__assert_fail@plt+0xc2c>
   116c4:	ldr	r3, [r3]
   116c8:	cmp	r3, #0
   116cc:	bne	116dc <__assert_fail@plt+0x904>
   116d0:	ldr	r3, [fp, #-8]
   116d4:	orr	r3, r3, #8
   116d8:	str	r3, [fp, #-8]
   116dc:	ldr	r3, [pc, #712]	; 119ac <__assert_fail@plt+0xbd4>
   116e0:	ldr	r3, [r3]
   116e4:	cmp	r3, #0
   116e8:	bne	11718 <__assert_fail@plt+0x940>
   116ec:	ldr	r3, [pc, #704]	; 119b4 <__assert_fail@plt+0xbdc>
   116f0:	ldr	r3, [r3]
   116f4:	cmp	r3, #0
   116f8:	bne	11718 <__assert_fail@plt+0x940>
   116fc:	ldr	r3, [pc, #744]	; 119ec <__assert_fail@plt+0xc14>
   11700:	ldr	r3, [r3]
   11704:	cmp	r3, #0
   11708:	bne	11718 <__assert_fail@plt+0x940>
   1170c:	ldr	r3, [fp, #-8]
   11710:	orr	r3, r3, #1
   11714:	str	r3, [fp, #-8]
   11718:	ldr	r3, [pc, #708]	; 119e4 <__assert_fail@plt+0xc0c>
   1171c:	ldr	r3, [r3]
   11720:	cmp	r3, #0
   11724:	beq	11734 <__assert_fail@plt+0x95c>
   11728:	ldr	r3, [fp, #-8]
   1172c:	orr	r3, r3, #128	; 0x80
   11730:	str	r3, [fp, #-8]
   11734:	ldr	r3, [pc, #624]	; 119ac <__assert_fail@plt+0xbd4>
   11738:	ldr	r3, [r3]
   1173c:	cmp	r3, #0
   11740:	bne	11754 <__assert_fail@plt+0x97c>
   11744:	ldr	r3, [pc, #660]	; 119e0 <__assert_fail@plt+0xc08>
   11748:	ldr	r3, [r3]
   1174c:	cmp	r3, #0
   11750:	beq	1178c <__assert_fail@plt+0x9b4>
   11754:	ldr	r3, [pc, #676]	; 11a00 <__assert_fail@plt+0xc28>
   11758:	mov	r2, #1024	; 0x400
   1175c:	str	r2, [r3]
   11760:	ldr	r3, [pc, #664]	; 11a00 <__assert_fail@plt+0xc28>
   11764:	ldr	r3, [r3]
   11768:	add	r2, r3, #508	; 0x1fc
   1176c:	add	r2, r2, #3
   11770:	cmp	r3, #0
   11774:	movlt	r3, r2
   11778:	movge	r3, r3
   1177c:	asr	r3, r3, #9
   11780:	mov	r2, r3
   11784:	ldr	r3, [pc, #628]	; 11a00 <__assert_fail@plt+0xc28>
   11788:	str	r2, [r3]
   1178c:	ldr	r3, [pc, #568]	; 119cc <__assert_fail@plt+0xbf4>
   11790:	ldr	r3, [r3]
   11794:	cmp	r3, #0
   11798:	beq	11830 <__assert_fail@plt+0xa58>
   1179c:	ldr	r3, [pc, #608]	; 11a04 <__assert_fail@plt+0xc2c>
   117a0:	ldr	r3, [r3]
   117a4:	cmp	r3, #1
   117a8:	beq	117cc <__assert_fail@plt+0x9f4>
   117ac:	cmp	r3, #2
   117b0:	beq	117dc <__assert_fail@plt+0xa04>
   117b4:	cmp	r3, #0
   117b8:	bne	118c0 <__assert_fail@plt+0xae8>
   117bc:	ldr	r3, [pc, #584]	; 11a0c <__assert_fail@plt+0xc34>
   117c0:	ldr	r2, [pc, #584]	; 11a10 <__assert_fail@plt+0xc38>
   117c4:	str	r2, [r3]
   117c8:	b	118c0 <__assert_fail@plt+0xae8>
   117cc:	ldr	r3, [pc, #568]	; 11a0c <__assert_fail@plt+0xc34>
   117d0:	ldr	r2, [pc, #572]	; 11a14 <__assert_fail@plt+0xc3c>
   117d4:	str	r2, [r3]
   117d8:	b	118c0 <__assert_fail@plt+0xae8>
   117dc:	ldr	r3, [pc, #448]	; 119a4 <__assert_fail@plt+0xbcc>
   117e0:	ldr	r3, [r3]
   117e4:	cmp	r3, #0
   117e8:	beq	117fc <__assert_fail@plt+0xa24>
   117ec:	ldr	r3, [pc, #536]	; 11a0c <__assert_fail@plt+0xc34>
   117f0:	ldr	r2, [pc, #544]	; 11a18 <__assert_fail@plt+0xc40>
   117f4:	str	r2, [r3]
   117f8:	b	118c0 <__assert_fail@plt+0xae8>
   117fc:	ldr	r3, [pc, #472]	; 119dc <__assert_fail@plt+0xc04>
   11800:	ldr	r3, [r3]
   11804:	cmp	r3, #0
   11808:	beq	1181c <__assert_fail@plt+0xa44>
   1180c:	ldr	r3, [pc, #504]	; 11a0c <__assert_fail@plt+0xc34>
   11810:	ldr	r2, [pc, #516]	; 11a1c <__assert_fail@plt+0xc44>
   11814:	str	r2, [r3]
   11818:	b	118c0 <__assert_fail@plt+0xae8>
   1181c:	ldr	r3, [pc, #488]	; 11a0c <__assert_fail@plt+0xc34>
   11820:	ldr	r2, [pc, #504]	; 11a20 <__assert_fail@plt+0xc48>
   11824:	str	r2, [r3]
   11828:	nop			; (mov r0, r0)
   1182c:	b	118c0 <__assert_fail@plt+0xae8>
   11830:	ldr	r3, [pc, #460]	; 11a04 <__assert_fail@plt+0xc2c>
   11834:	ldr	r3, [r3]
   11838:	cmp	r3, #1
   1183c:	beq	11860 <__assert_fail@plt+0xa88>
   11840:	cmp	r3, #2
   11844:	beq	11870 <__assert_fail@plt+0xa98>
   11848:	cmp	r3, #0
   1184c:	bne	118c0 <__assert_fail@plt+0xae8>
   11850:	ldr	r3, [pc, #436]	; 11a0c <__assert_fail@plt+0xc34>
   11854:	ldr	r2, [pc, #456]	; 11a24 <__assert_fail@plt+0xc4c>
   11858:	str	r2, [r3]
   1185c:	b	118c0 <__assert_fail@plt+0xae8>
   11860:	ldr	r3, [pc, #420]	; 11a0c <__assert_fail@plt+0xc34>
   11864:	ldr	r2, [pc, #444]	; 11a28 <__assert_fail@plt+0xc50>
   11868:	str	r2, [r3]
   1186c:	b	118c0 <__assert_fail@plt+0xae8>
   11870:	ldr	r3, [pc, #300]	; 119a4 <__assert_fail@plt+0xbcc>
   11874:	ldr	r3, [r3]
   11878:	cmp	r3, #0
   1187c:	beq	11890 <__assert_fail@plt+0xab8>
   11880:	ldr	r3, [pc, #388]	; 11a0c <__assert_fail@plt+0xc34>
   11884:	ldr	r2, [pc, #416]	; 11a2c <__assert_fail@plt+0xc54>
   11888:	str	r2, [r3]
   1188c:	b	118bc <__assert_fail@plt+0xae4>
   11890:	ldr	r3, [pc, #324]	; 119dc <__assert_fail@plt+0xc04>
   11894:	ldr	r3, [r3]
   11898:	cmp	r3, #0
   1189c:	beq	118b0 <__assert_fail@plt+0xad8>
   118a0:	ldr	r3, [pc, #356]	; 11a0c <__assert_fail@plt+0xc34>
   118a4:	ldr	r2, [pc, #388]	; 11a30 <__assert_fail@plt+0xc58>
   118a8:	str	r2, [r3]
   118ac:	b	118bc <__assert_fail@plt+0xae4>
   118b0:	ldr	r3, [pc, #340]	; 11a0c <__assert_fail@plt+0xc34>
   118b4:	ldr	r2, [pc, #376]	; 11a34 <__assert_fail@plt+0xc5c>
   118b8:	str	r2, [r3]
   118bc:	nop			; (mov r0, r0)
   118c0:	ldr	r3, [pc, #252]	; 119c4 <__assert_fail@plt+0xbec>
   118c4:	ldr	r3, [r3]
   118c8:	cmp	r3, #0
   118cc:	beq	118e0 <__assert_fail@plt+0xb08>
   118d0:	ldr	r3, [pc, #352]	; 11a38 <__assert_fail@plt+0xc60>
   118d4:	ldr	r2, [pc, #352]	; 11a3c <__assert_fail@plt+0xc64>
   118d8:	str	r2, [r3]
   118dc:	b	1194c <__assert_fail@plt+0xb74>
   118e0:	ldr	r3, [pc, #180]	; 1199c <__assert_fail@plt+0xbc4>
   118e4:	ldr	r3, [r3]
   118e8:	cmp	r3, #0
   118ec:	beq	11900 <__assert_fail@plt+0xb28>
   118f0:	ldr	r3, [pc, #320]	; 11a38 <__assert_fail@plt+0xc60>
   118f4:	ldr	r2, [pc, #324]	; 11a40 <__assert_fail@plt+0xc68>
   118f8:	str	r2, [r3]
   118fc:	b	1194c <__assert_fail@plt+0xb74>
   11900:	ldr	r3, [pc, #164]	; 119ac <__assert_fail@plt+0xbd4>
   11904:	ldr	r3, [r3]
   11908:	cmp	r3, #0
   1190c:	beq	11920 <__assert_fail@plt+0xb48>
   11910:	ldr	r3, [pc, #288]	; 11a38 <__assert_fail@plt+0xc60>
   11914:	ldr	r2, [pc, #296]	; 11a44 <__assert_fail@plt+0xc6c>
   11918:	str	r2, [r3]
   1191c:	b	1194c <__assert_fail@plt+0xb74>
   11920:	ldr	r3, [pc, #176]	; 119d8 <__assert_fail@plt+0xc00>
   11924:	ldr	r3, [r3]
   11928:	cmp	r3, #0
   1192c:	beq	11940 <__assert_fail@plt+0xb68>
   11930:	ldr	r3, [pc, #256]	; 11a38 <__assert_fail@plt+0xc60>
   11934:	ldr	r2, [pc, #268]	; 11a48 <__assert_fail@plt+0xc70>
   11938:	str	r2, [r3]
   1193c:	b	1194c <__assert_fail@plt+0xb74>
   11940:	ldr	r3, [pc, #240]	; 11a38 <__assert_fail@plt+0xc60>
   11944:	ldr	r2, [pc, #256]	; 11a4c <__assert_fail@plt+0xc74>
   11948:	str	r2, [r3]
   1194c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11950:	cmp	r3, #0
   11954:	beq	1196c <__assert_fail@plt+0xb94>
   11958:	ldr	r2, [fp, #-8]
   1195c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11960:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11964:	bl	11a58 <__assert_fail@plt+0xc80>
   11968:	b	1197c <__assert_fail@plt+0xba4>
   1196c:	ldr	r2, [fp, #-8]
   11970:	ldr	r1, [pc, #216]	; 11a50 <__assert_fail@plt+0xc78>
   11974:	mov	r0, #1
   11978:	bl	11a58 <__assert_fail@plt+0xc80>
   1197c:	ldr	r3, [pc, #208]	; 11a54 <__assert_fail@plt+0xc7c>
   11980:	ldr	r3, [r3]
   11984:	mov	r0, r3
   11988:	sub	sp, fp, #4
   1198c:	pop	{fp, pc}
   11990:	andeq	ip, r2, r4, lsr #2
   11994:	andeq	ip, r2, ip, ror #2
   11998:	andeq	ip, r2, r4, ror #2
   1199c:	muleq	r2, r8, r1
   119a0:	andeq	ip, r2, r0, ror #2
   119a4:	andeq	ip, r2, r4, ror r1
   119a8:	andeq	ip, r2, r8, lsr #3
   119ac:	andeq	ip, r2, r8, lsl #3
   119b0:	andeq	ip, r2, ip, lsr #3
   119b4:	muleq	r2, ip, r1
   119b8:	muleq	r2, r4, r1
   119bc:	andeq	ip, r2, r8, ror r1
   119c0:			; <UNDEFINED> instruction: 0x0002c1b0
   119c4:	andeq	ip, r2, ip, asr r1
   119c8:	muleq	r2, r0, r1
   119cc:	andeq	ip, r2, r0, ror r1
   119d0:	andeq	ip, r2, r8, ror #2
   119d4:	andeq	ip, r2, r8, asr r1
   119d8:			; <UNDEFINED> instruction: 0x0002c1b4
   119dc:	andeq	ip, r2, r0, lsr #3
   119e0:	andeq	ip, r2, r4, asr r1
   119e4:	andeq	ip, r2, r0, lsl #3
   119e8:	andeq	ip, r2, ip, lsl #3
   119ec:	andeq	ip, r2, ip, ror r1
   119f0:	andeq	fp, r1, r4, lsr r9
   119f4:	strdeq	ip, [r2], -r0
   119f8:	andeq	r5, r0, r3, lsl r4
   119fc:	andeq	ip, r2, r4, lsl #2
   11a00:	andeq	ip, r2, r4, lsr #3
   11a04:	andeq	ip, r2, r8, lsl r1
   11a08:	andeq	fp, r1, ip, lsr r9
   11a0c:	andeq	ip, r2, r0, lsr #2
   11a10:	andeq	r3, r1, r4, lsl r8
   11a14:	ldrdeq	r3, [r1], -r8
   11a18:	andeq	r3, r1, r8, lsr #20
   11a1c:	andeq	r3, r1, ip, lsr #22
   11a20:	andeq	r3, r1, r4, lsr #18
   11a24:	ldrdeq	r3, [r1], -r4
   11a28:	andeq	r3, r1, r0, ror #22
   11a2c:	andeq	r3, r1, r8, asr r9
   11a30:	andeq	r3, r1, ip, asr sl
   11a34:	andeq	r3, r1, r4, asr r8
   11a38:	andeq	ip, r2, ip, lsl r1
   11a3c:	andeq	r2, r1, r4, lsr #12
   11a40:	muleq	r1, ip, r1
   11a44:	andeq	r2, r1, r8, lsr #13
   11a48:	andeq	r3, r1, r4, lsr r3
   11a4c:			; <UNDEFINED> instruction: 0x00012bbc
   11a50:	strdeq	ip, [r2], -r4
   11a54:	andeq	ip, r2, r4, lsl #3
   11a58:	push	{r4, r5, fp, lr}
   11a5c:	add	fp, sp, #12
   11a60:	sub	sp, sp, #32
   11a64:	str	r0, [fp, #-32]	; 0xffffffe0
   11a68:	str	r1, [fp, #-36]	; 0xffffffdc
   11a6c:	str	r2, [fp, #-40]	; 0xffffffd8
   11a70:	ldr	r3, [pc, #708]	; 11d3c <__assert_fail@plt+0xf64>
   11a74:	ldr	r3, [r3]
   11a78:	cmp	r3, #0
   11a7c:	bne	11a88 <__assert_fail@plt+0xcb0>
   11a80:	ldr	r3, [pc, #696]	; 11d40 <__assert_fail@plt+0xf68>
   11a84:	b	11a8c <__assert_fail@plt+0xcb4>
   11a88:	mov	r3, #0
   11a8c:	mov	r2, r3
   11a90:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11a94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11a98:	bl	14754 <__assert_fail@plt+0x397c>
   11a9c:	str	r0, [fp, #-16]
   11aa0:	ldr	r3, [fp, #-16]
   11aa4:	cmp	r3, #0
   11aa8:	bne	11af4 <__assert_fail@plt+0xd1c>
   11aac:	ldr	r3, [pc, #656]	; 11d44 <__assert_fail@plt+0xf6c>
   11ab0:	ldr	r4, [r3]
   11ab4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11ab8:	ldr	r5, [r3]
   11abc:	bl	10cd0 <__errno_location@plt>
   11ac0:	mov	r3, r0
   11ac4:	ldr	r3, [r3]
   11ac8:	mov	r0, r3
   11acc:	bl	10c7c <strerror@plt>
   11ad0:	mov	r3, r0
   11ad4:	mov	r2, r5
   11ad8:	ldr	r1, [pc, #616]	; 11d48 <__assert_fail@plt+0xf70>
   11adc:	mov	r0, r4
   11ae0:	bl	10cc4 <fprintf@plt>
   11ae4:	ldr	r3, [pc, #608]	; 11d4c <__assert_fail@plt+0xf74>
   11ae8:	mov	r2, #1
   11aec:	str	r2, [r3]
   11af0:	b	11d34 <__assert_fail@plt+0xf5c>
   11af4:	mov	r1, #0
   11af8:	ldr	r0, [fp, #-16]
   11afc:	bl	159b0 <__assert_fail@plt+0x4bd8>
   11b00:	mov	r3, r0
   11b04:	mov	r1, r3
   11b08:	mov	r0, #0
   11b0c:	bl	11d74 <__assert_fail@plt+0xf9c>
   11b10:	ldr	r3, [pc, #568]	; 11d50 <__assert_fail@plt+0xf78>
   11b14:	ldr	r3, [r3]
   11b18:	cmp	r3, #0
   11b1c:	bne	11d30 <__assert_fail@plt+0xf58>
   11b20:	ldr	r3, [pc, #556]	; 11d54 <__assert_fail@plt+0xf7c>
   11b24:	ldr	r3, [r3]
   11b28:	cmp	r3, #0
   11b2c:	bne	11b48 <__assert_fail@plt+0xd70>
   11b30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11b34:	and	r3, r3, #8
   11b38:	cmp	r3, #0
   11b3c:	beq	11b48 <__assert_fail@plt+0xd70>
   11b40:	mov	r3, #4096	; 0x1000
   11b44:	b	11b4c <__assert_fail@plt+0xd74>
   11b48:	mov	r3, #0
   11b4c:	str	r3, [fp, #-20]	; 0xffffffec
   11b50:	b	11cc0 <__assert_fail@plt+0xee8>
   11b54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b58:	ldrh	r3, [r3, #56]	; 0x38
   11b5c:	sub	r3, r3, #1
   11b60:	cmp	r3, #6
   11b64:	ldrls	pc, [pc, r3, lsl #2]
   11b68:	b	11cc0 <__assert_fail@plt+0xee8>
   11b6c:	andeq	r1, r1, r8, lsl #23
   11b70:	andeq	r1, r1, ip, asr ip
   11b74:	andeq	r1, r1, r0, asr #25
   11b78:	andeq	r1, r1, ip, ror ip
   11b7c:	andeq	r1, r1, r0, asr #25
   11b80:	andeq	r1, r1, r0, asr #25
   11b84:	andeq	r1, r1, ip, ror ip
   11b88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b8c:	ldrb	r3, [r3, #168]	; 0xa8
   11b90:	cmp	r3, #46	; 0x2e
   11b94:	bne	11bbc <__assert_fail@plt+0xde4>
   11b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b9c:	ldr	r3, [r3, #48]	; 0x30
   11ba0:	cmp	r3, #0
   11ba4:	beq	11bbc <__assert_fail@plt+0xde4>
   11ba8:	ldr	r3, [pc, #424]	; 11d58 <__assert_fail@plt+0xf80>
   11bac:	ldr	r3, [r3]
   11bb0:	cmp	r3, #0
   11bb4:	bne	11bbc <__assert_fail@plt+0xde4>
   11bb8:	b	11cc0 <__assert_fail@plt+0xee8>
   11bbc:	ldr	r3, [pc, #408]	; 11d5c <__assert_fail@plt+0xf84>
   11bc0:	ldr	r3, [r3]
   11bc4:	cmp	r3, #0
   11bc8:	beq	11be4 <__assert_fail@plt+0xe0c>
   11bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bd0:	ldr	r3, [r3, #28]
   11bd4:	mov	r1, r3
   11bd8:	ldr	r0, [pc, #384]	; 11d60 <__assert_fail@plt+0xf88>
   11bdc:	bl	10b98 <printf@plt>
   11be0:	b	11c10 <__assert_fail@plt+0xe38>
   11be4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11be8:	cmp	r3, #1
   11bec:	ble	11c10 <__assert_fail@plt+0xe38>
   11bf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bf4:	ldr	r3, [r3, #28]
   11bf8:	mov	r1, r3
   11bfc:	ldr	r0, [pc, #352]	; 11d64 <__assert_fail@plt+0xf8c>
   11c00:	bl	10b98 <printf@plt>
   11c04:	ldr	r3, [pc, #336]	; 11d5c <__assert_fail@plt+0xf84>
   11c08:	mov	r2, #1
   11c0c:	str	r2, [r3]
   11c10:	ldr	r1, [fp, #-20]	; 0xffffffec
   11c14:	ldr	r0, [fp, #-16]
   11c18:	bl	159b0 <__assert_fail@plt+0x4bd8>
   11c1c:	str	r0, [fp, #-28]	; 0xffffffe4
   11c20:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11c24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11c28:	bl	11d74 <__assert_fail@plt+0xf9c>
   11c2c:	ldr	r3, [pc, #288]	; 11d54 <__assert_fail@plt+0xf7c>
   11c30:	ldr	r3, [r3]
   11c34:	cmp	r3, #0
   11c38:	bne	11cc0 <__assert_fail@plt+0xee8>
   11c3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11c40:	cmp	r3, #0
   11c44:	beq	11cc0 <__assert_fail@plt+0xee8>
   11c48:	mov	r2, #4
   11c4c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11c50:	ldr	r0, [fp, #-16]
   11c54:	bl	15924 <__assert_fail@plt+0x4b4c>
   11c58:	b	11cc0 <__assert_fail@plt+0xee8>
   11c5c:	ldr	r3, [pc, #224]	; 11d44 <__assert_fail@plt+0xf6c>
   11c60:	ldr	r0, [r3]
   11c64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c68:	add	r3, r3, #168	; 0xa8
   11c6c:	mov	r2, r3
   11c70:	ldr	r1, [pc, #240]	; 11d68 <__assert_fail@plt+0xf90>
   11c74:	bl	10cc4 <fprintf@plt>
   11c78:	b	11cc0 <__assert_fail@plt+0xee8>
   11c7c:	ldr	r3, [pc, #192]	; 11d44 <__assert_fail@plt+0xf6c>
   11c80:	ldr	r4, [r3]
   11c84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c88:	add	r5, r3, #168	; 0xa8
   11c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c90:	ldr	r3, [r3, #32]
   11c94:	mov	r0, r3
   11c98:	bl	10c7c <strerror@plt>
   11c9c:	mov	r3, r0
   11ca0:	mov	r2, r5
   11ca4:	ldr	r1, [pc, #192]	; 11d6c <__assert_fail@plt+0xf94>
   11ca8:	mov	r0, r4
   11cac:	bl	10cc4 <fprintf@plt>
   11cb0:	ldr	r3, [pc, #148]	; 11d4c <__assert_fail@plt+0xf74>
   11cb4:	mov	r2, #1
   11cb8:	str	r2, [r3]
   11cbc:	nop			; (mov r0, r0)
   11cc0:	ldr	r0, [fp, #-16]
   11cc4:	bl	151b0 <__assert_fail@plt+0x43d8>
   11cc8:	str	r0, [fp, #-24]	; 0xffffffe8
   11ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11cd0:	cmp	r3, #0
   11cd4:	bne	11b54 <__assert_fail@plt+0xd7c>
   11cd8:	bl	10cd0 <__errno_location@plt>
   11cdc:	mov	r3, r0
   11ce0:	ldr	r3, [r3]
   11ce4:	cmp	r3, #0
   11ce8:	beq	11d34 <__assert_fail@plt+0xf5c>
   11cec:	ldr	r3, [pc, #80]	; 11d44 <__assert_fail@plt+0xf6c>
   11cf0:	ldr	r4, [r3]
   11cf4:	bl	10cd0 <__errno_location@plt>
   11cf8:	mov	r3, r0
   11cfc:	ldr	r3, [r3]
   11d00:	mov	r0, r3
   11d04:	bl	10c7c <strerror@plt>
   11d08:	mov	r3, r0
   11d0c:	mov	r2, r3
   11d10:	ldr	r1, [pc, #88]	; 11d70 <__assert_fail@plt+0xf98>
   11d14:	mov	r0, r4
   11d18:	bl	10cc4 <fprintf@plt>
   11d1c:	ldr	r3, [pc, #40]	; 11d4c <__assert_fail@plt+0xf74>
   11d20:	mov	r2, #1
   11d24:	str	r2, [r3]
   11d28:	nop			; (mov r0, r0)
   11d2c:	b	11d34 <__assert_fail@plt+0xf5c>
   11d30:	nop			; (mov r0, r0)
   11d34:	sub	sp, fp, #12
   11d38:	pop	{r4, r5, fp, pc}
   11d3c:	andeq	ip, r2, r8, ror r1
   11d40:	ldrdeq	r2, [r1], -r0
   11d44:	andeq	ip, r2, r0, lsl r1
   11d48:	andeq	fp, r1, r8, asr r9
   11d4c:	andeq	ip, r2, r4, lsl #3
   11d50:	muleq	r2, ip, r1
   11d54:	andeq	ip, r2, r8, ror #2
   11d58:	andeq	ip, r2, ip, lsr #3
   11d5c:	andeq	ip, r2, r4, lsr #2
   11d60:	andeq	fp, r1, ip, ror #18
   11d64:	andeq	fp, r1, r4, ror r9
   11d68:	andeq	fp, r1, ip, ror r9
   11d6c:	muleq	r1, ip, r9
   11d70:	andeq	fp, r1, r4, lsr #19
   11d74:	push	{r4, r5, fp, lr}
   11d78:	add	fp, sp, #12
   11d7c:	sub	sp, sp, #232	; 0xe8
   11d80:	str	r0, [fp, #-240]	; 0xffffff10
   11d84:	str	r1, [fp, #-244]	; 0xffffff0c
   11d88:	mov	r3, #0
   11d8c:	str	r3, [fp, #-76]	; 0xffffffb4
   11d90:	mov	r3, #0
   11d94:	str	r3, [fp, #-80]	; 0xffffffb0
   11d98:	mov	r3, #0
   11d9c:	str	r3, [fp, #-84]	; 0xffffffac
   11da0:	ldr	r3, [fp, #-244]	; 0xffffff0c
   11da4:	cmp	r3, #0
   11da8:	beq	12484 <__assert_fail@plt+0x16ac>
   11dac:	ldr	r3, [pc, #1764]	; 12498 <__assert_fail@plt+0x16c0>
   11db0:	ldr	r3, [r3]
   11db4:	cmp	r3, #0
   11db8:	bne	11ddc <__assert_fail@plt+0x1004>
   11dbc:	ldr	r3, [pc, #1752]	; 1249c <__assert_fail@plt+0x16c4>
   11dc0:	ldr	r3, [r3]
   11dc4:	cmp	r3, #0
   11dc8:	bne	11ddc <__assert_fail@plt+0x1004>
   11dcc:	ldr	r3, [pc, #1740]	; 124a0 <__assert_fail@plt+0x16c8>
   11dd0:	ldr	r3, [r3]
   11dd4:	cmp	r3, #0
   11dd8:	beq	11de4 <__assert_fail@plt+0x100c>
   11ddc:	mov	r3, #1
   11de0:	b	11de8 <__assert_fail@plt+0x1010>
   11de4:	mov	r3, #0
   11de8:	str	r3, [fp, #-88]	; 0xffffffa8
   11dec:	mov	r3, #0
   11df0:	str	r3, [fp, #-56]	; 0xffffffc8
   11df4:	mov	r3, #0
   11df8:	str	r3, [fp, #-44]	; 0xffffffd4
   11dfc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11e00:	str	r3, [fp, #-40]	; 0xffffffd8
   11e04:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e08:	str	r3, [fp, #-36]	; 0xffffffdc
   11e0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11e10:	str	r3, [fp, #-48]	; 0xffffffd0
   11e14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11e18:	str	r3, [fp, #-32]	; 0xffffffe0
   11e1c:	mov	r3, #0
   11e20:	str	r3, [fp, #-52]	; 0xffffffcc
   11e24:	mov	r3, #0
   11e28:	str	r3, [fp, #-60]	; 0xffffffc4
   11e2c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e30:	str	r3, [fp, #-64]	; 0xffffffc0
   11e34:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11e38:	str	r3, [fp, #-68]	; 0xffffffbc
   11e3c:	mov	r2, #0
   11e40:	mov	r3, #0
   11e44:	strd	r2, [fp, #-28]	; 0xffffffe4
   11e48:	ldr	r3, [fp, #-244]	; 0xffffff0c
   11e4c:	str	r3, [fp, #-16]
   11e50:	mov	r3, #0
   11e54:	str	r3, [fp, #-72]	; 0xffffffb8
   11e58:	b	12310 <__assert_fail@plt+0x1538>
   11e5c:	ldr	r3, [fp, #-16]
   11e60:	ldrh	r3, [r3, #56]	; 0x38
   11e64:	cmp	r3, #7
   11e68:	beq	11e7c <__assert_fail@plt+0x10a4>
   11e6c:	ldr	r3, [fp, #-16]
   11e70:	ldrh	r3, [r3, #56]	; 0x38
   11e74:	cmp	r3, #10
   11e78:	bne	11ecc <__assert_fail@plt+0x10f4>
   11e7c:	ldr	r3, [pc, #1568]	; 124a4 <__assert_fail@plt+0x16cc>
   11e80:	ldr	r4, [r3]
   11e84:	ldr	r3, [fp, #-16]
   11e88:	add	r5, r3, #168	; 0xa8
   11e8c:	ldr	r3, [fp, #-16]
   11e90:	ldr	r3, [r3, #32]
   11e94:	mov	r0, r3
   11e98:	bl	10c7c <strerror@plt>
   11e9c:	mov	r3, r0
   11ea0:	mov	r2, r5
   11ea4:	ldr	r1, [pc, #1532]	; 124a8 <__assert_fail@plt+0x16d0>
   11ea8:	mov	r0, r4
   11eac:	bl	10cc4 <fprintf@plt>
   11eb0:	ldr	r3, [fp, #-16]
   11eb4:	mov	r2, #1
   11eb8:	str	r2, [r3, #16]
   11ebc:	ldr	r3, [pc, #1512]	; 124ac <__assert_fail@plt+0x16d4>
   11ec0:	mov	r2, #1
   11ec4:	str	r2, [r3]
   11ec8:	b	12304 <__assert_fail@plt+0x152c>
   11ecc:	ldr	r3, [fp, #-240]	; 0xffffff10
   11ed0:	cmp	r3, #0
   11ed4:	bne	11f08 <__assert_fail@plt+0x1130>
   11ed8:	ldr	r3, [fp, #-16]
   11edc:	ldrh	r3, [r3, #56]	; 0x38
   11ee0:	cmp	r3, #1
   11ee4:	bne	11f38 <__assert_fail@plt+0x1160>
   11ee8:	ldr	r3, [pc, #1472]	; 124b0 <__assert_fail@plt+0x16d8>
   11eec:	ldr	r3, [r3]
   11ef0:	cmp	r3, #0
   11ef4:	bne	11f38 <__assert_fail@plt+0x1160>
   11ef8:	ldr	r3, [fp, #-16]
   11efc:	mov	r2, #1
   11f00:	str	r2, [r3, #16]
   11f04:	b	12304 <__assert_fail@plt+0x152c>
   11f08:	ldr	r3, [fp, #-16]
   11f0c:	ldrb	r3, [r3, #168]	; 0xa8
   11f10:	cmp	r3, #46	; 0x2e
   11f14:	bne	11f38 <__assert_fail@plt+0x1160>
   11f18:	ldr	r3, [pc, #1428]	; 124b4 <__assert_fail@plt+0x16dc>
   11f1c:	ldr	r3, [r3]
   11f20:	cmp	r3, #0
   11f24:	bne	11f38 <__assert_fail@plt+0x1160>
   11f28:	ldr	r3, [fp, #-16]
   11f2c:	mov	r2, #1
   11f30:	str	r2, [r3, #16]
   11f34:	b	12304 <__assert_fail@plt+0x152c>
   11f38:	ldr	r3, [fp, #-16]
   11f3c:	ldr	r2, [r3, #52]	; 0x34
   11f40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11f44:	cmp	r2, r3
   11f48:	bls	11f58 <__assert_fail@plt+0x1180>
   11f4c:	ldr	r3, [fp, #-16]
   11f50:	ldr	r3, [r3, #52]	; 0x34
   11f54:	str	r3, [fp, #-40]	; 0xffffffd8
   11f58:	ldr	r3, [fp, #-88]	; 0xffffffa8
   11f5c:	cmp	r3, #0
   11f60:	beq	122f8 <__assert_fail@plt+0x1520>
   11f64:	ldr	r3, [fp, #-16]
   11f68:	add	r3, r3, #64	; 0x40
   11f6c:	str	r3, [fp, #-92]	; 0xffffffa4
   11f70:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11f74:	ldrd	r2, [r3, #64]	; 0x40
   11f78:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11f7c:	mov	r0, r1
   11f80:	asr	r1, r0, #31
   11f84:	cmp	r0, r2
   11f88:	sbcs	r3, r1, r3
   11f8c:	bge	11fa0 <__assert_fail@plt+0x11c8>
   11f90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11f94:	ldrd	r2, [r3, #64]	; 0x40
   11f98:	mov	r3, r2
   11f9c:	str	r3, [fp, #-48]	; 0xffffffd0
   11fa0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11fa4:	ldrd	r0, [r3, #96]	; 0x60
   11fa8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11fac:	mov	r2, r3
   11fb0:	mov	r3, #0
   11fb4:	cmp	r1, r3
   11fb8:	cmpeq	r0, r2
   11fbc:	bls	11fd0 <__assert_fail@plt+0x11f8>
   11fc0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11fc4:	ldrd	r2, [r3, #96]	; 0x60
   11fc8:	mov	r3, r2
   11fcc:	str	r3, [fp, #-36]	; 0xffffffdc
   11fd0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11fd4:	ldr	r2, [r3, #20]
   11fd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11fdc:	cmp	r2, r3
   11fe0:	bls	11ff0 <__assert_fail@plt+0x1218>
   11fe4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11fe8:	ldr	r3, [r3, #20]
   11fec:	str	r3, [fp, #-44]	; 0xffffffd4
   11ff0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11ff4:	ldrd	r2, [r3, #48]	; 0x30
   11ff8:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   11ffc:	cmp	r0, r2
   12000:	sbcs	r3, r1, r3
   12004:	bge	12014 <__assert_fail@plt+0x123c>
   12008:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1200c:	ldrd	r2, [r3, #48]	; 0x30
   12010:	strd	r2, [fp, #-28]	; 0xffffffe4
   12014:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12018:	ldrd	r2, [r3, #64]	; 0x40
   1201c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12020:	add	r3, r3, r2
   12024:	str	r3, [fp, #-32]	; 0xffffffe0
   12028:	ldr	r3, [pc, #1132]	; 1249c <__assert_fail@plt+0x16c4>
   1202c:	ldr	r3, [r3]
   12030:	cmp	r3, #0
   12034:	beq	122f8 <__assert_fail@plt+0x1520>
   12038:	mov	r3, #0
   1203c:	str	r3, [fp, #-80]	; 0xffffffb0
   12040:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12044:	str	r3, [fp, #-76]	; 0xffffffb4
   12048:	ldr	r3, [pc, #1128]	; 124b8 <__assert_fail@plt+0x16e0>
   1204c:	ldr	r3, [r3]
   12050:	cmp	r3, #0
   12054:	bne	120b0 <__assert_fail@plt+0x12d8>
   12058:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1205c:	ldr	r3, [r3, #24]
   12060:	mov	r0, r3
   12064:	bl	10b8c <getpwuid@plt>
   12068:	str	r0, [fp, #-96]	; 0xffffffa0
   1206c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12070:	cmp	r3, #0
   12074:	beq	12084 <__assert_fail@plt+0x12ac>
   12078:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1207c:	ldr	r3, [r3]
   12080:	str	r3, [fp, #-76]	; 0xffffffb4
   12084:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12088:	ldr	r3, [r3, #28]
   1208c:	mov	r0, r3
   12090:	bl	10dcc <getgrgid@plt>
   12094:	str	r0, [fp, #-100]	; 0xffffff9c
   12098:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1209c:	cmp	r3, #0
   120a0:	beq	120b0 <__assert_fail@plt+0x12d8>
   120a4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   120a8:	ldr	r3, [r3]
   120ac:	str	r3, [fp, #-80]	; 0xffffffb0
   120b0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   120b4:	cmp	r3, #0
   120b8:	bne	120dc <__assert_fail@plt+0x1304>
   120bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   120c0:	ldr	r3, [r3, #24]
   120c4:	mov	r0, r3
   120c8:	mov	r1, #0
   120cc:	sub	r3, fp, #208	; 0xd0
   120d0:	mov	r2, r3
   120d4:	bl	1a41c <__assert_fail@plt+0x9644>
   120d8:	str	r0, [fp, #-76]	; 0xffffffb4
   120dc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   120e0:	cmp	r3, #0
   120e4:	bne	12108 <__assert_fail@plt+0x1330>
   120e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   120ec:	ldr	r3, [r3, #28]
   120f0:	mov	r0, r3
   120f4:	mov	r1, #0
   120f8:	sub	r3, fp, #232	; 0xe8
   120fc:	mov	r2, r3
   12100:	bl	1a41c <__assert_fail@plt+0x9644>
   12104:	str	r0, [fp, #-80]	; 0xffffffb0
   12108:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1210c:	bl	10ca0 <strlen@plt>
   12110:	mov	r3, r0
   12114:	str	r3, [fp, #-104]	; 0xffffff98
   12118:	ldr	r2, [fp, #-104]	; 0xffffff98
   1211c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12120:	cmp	r2, r3
   12124:	ble	12130 <__assert_fail@plt+0x1358>
   12128:	ldr	r3, [fp, #-104]	; 0xffffff98
   1212c:	str	r3, [fp, #-68]	; 0xffffffbc
   12130:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12134:	bl	10ca0 <strlen@plt>
   12138:	mov	r3, r0
   1213c:	str	r3, [fp, #-108]	; 0xffffff94
   12140:	ldr	r2, [fp, #-108]	; 0xffffff94
   12144:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12148:	cmp	r2, r3
   1214c:	ble	12158 <__assert_fail@plt+0x1380>
   12150:	ldr	r3, [fp, #-108]	; 0xffffff94
   12154:	str	r3, [fp, #-64]	; 0xffffffc0
   12158:	ldr	r3, [pc, #860]	; 124bc <__assert_fail@plt+0x16e4>
   1215c:	ldr	r3, [r3]
   12160:	cmp	r3, #0
   12164:	beq	1219c <__assert_fail@plt+0x13c4>
   12168:	ldr	r3, [pc, #848]	; 124c0 <__assert_fail@plt+0x16e8>
   1216c:	str	r3, [fp, #-84]	; 0xffffffac
   12170:	ldr	r0, [fp, #-84]	; 0xffffffac
   12174:	bl	10ca0 <strlen@plt>
   12178:	mov	r3, r0
   1217c:	str	r3, [fp, #-56]	; 0xffffffc8
   12180:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12184:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12188:	cmp	r2, r3
   1218c:	ble	121a4 <__assert_fail@plt+0x13cc>
   12190:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12194:	str	r3, [fp, #-60]	; 0xffffffc4
   12198:	b	121a4 <__assert_fail@plt+0x13cc>
   1219c:	mov	r3, #0
   121a0:	str	r3, [fp, #-56]	; 0xffffffc8
   121a4:	ldr	r2, [fp, #-104]	; 0xffffff98
   121a8:	ldr	r3, [fp, #-108]	; 0xffffff94
   121ac:	add	r2, r2, r3
   121b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   121b4:	add	r3, r2, r3
   121b8:	add	r3, r3, #19
   121bc:	mov	r0, r3
   121c0:	bl	1a77c <__assert_fail@plt+0x99a4>
   121c4:	mov	r3, r0
   121c8:	str	r3, [fp, #-112]	; 0xffffff90
   121cc:	ldr	r3, [fp, #-112]	; 0xffffff90
   121d0:	cmp	r3, #0
   121d4:	bne	12218 <__assert_fail@plt+0x1440>
   121d8:	ldr	r3, [pc, #708]	; 124a4 <__assert_fail@plt+0x16cc>
   121dc:	ldr	r4, [r3]
   121e0:	bl	10cd0 <__errno_location@plt>
   121e4:	mov	r3, r0
   121e8:	ldr	r3, [r3]
   121ec:	mov	r0, r3
   121f0:	bl	10c7c <strerror@plt>
   121f4:	mov	r3, r0
   121f8:	mov	r2, r3
   121fc:	ldr	r1, [pc, #704]	; 124c4 <__assert_fail@plt+0x16ec>
   12200:	mov	r0, r4
   12204:	bl	10cc4 <fprintf@plt>
   12208:	ldr	r3, [pc, #668]	; 124ac <__assert_fail@plt+0x16d4>
   1220c:	mov	r2, #1
   12210:	str	r2, [r3]
   12214:	b	12490 <__assert_fail@plt+0x16b8>
   12218:	ldr	r3, [fp, #-112]	; 0xffffff90
   1221c:	add	r2, r3, #12
   12220:	ldr	r3, [fp, #-112]	; 0xffffff90
   12224:	str	r2, [r3]
   12228:	ldr	r3, [fp, #-112]	; 0xffffff90
   1222c:	ldr	r3, [r3]
   12230:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12234:	mov	r0, r3
   12238:	bl	10c40 <strcpy@plt>
   1223c:	ldr	r3, [fp, #-104]	; 0xffffff98
   12240:	add	r3, r3, #1
   12244:	add	r3, r3, #8
   12248:	ldr	r2, [fp, #-112]	; 0xffffff90
   1224c:	add	r3, r2, r3
   12250:	add	r2, r3, #4
   12254:	ldr	r3, [fp, #-112]	; 0xffffff90
   12258:	str	r2, [r3, #4]
   1225c:	ldr	r3, [fp, #-112]	; 0xffffff90
   12260:	ldr	r3, [r3, #4]
   12264:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12268:	mov	r0, r3
   1226c:	bl	10c40 <strcpy@plt>
   12270:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12274:	ldr	r3, [r3, #16]
   12278:	and	r3, r3, #61440	; 0xf000
   1227c:	cmp	r3, #8192	; 0x2000
   12280:	beq	12298 <__assert_fail@plt+0x14c0>
   12284:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12288:	ldr	r3, [r3, #16]
   1228c:	and	r3, r3, #61440	; 0xf000
   12290:	cmp	r3, #24576	; 0x6000
   12294:	bne	122a0 <__assert_fail@plt+0x14c8>
   12298:	mov	r3, #1
   1229c:	str	r3, [fp, #-52]	; 0xffffffcc
   122a0:	ldr	r3, [pc, #532]	; 124bc <__assert_fail@plt+0x16e4>
   122a4:	ldr	r3, [r3]
   122a8:	cmp	r3, #0
   122ac:	beq	122ec <__assert_fail@plt+0x1514>
   122b0:	ldr	r2, [fp, #-104]	; 0xffffff98
   122b4:	ldr	r3, [fp, #-108]	; 0xffffff94
   122b8:	add	r3, r2, r3
   122bc:	add	r3, r3, #2
   122c0:	add	r3, r3, #8
   122c4:	ldr	r2, [fp, #-112]	; 0xffffff90
   122c8:	add	r3, r2, r3
   122cc:	add	r2, r3, #4
   122d0:	ldr	r3, [fp, #-112]	; 0xffffff90
   122d4:	str	r2, [r3, #8]
   122d8:	ldr	r3, [fp, #-112]	; 0xffffff90
   122dc:	ldr	r3, [r3, #8]
   122e0:	ldr	r1, [fp, #-84]	; 0xffffffac
   122e4:	mov	r0, r3
   122e8:	bl	10c40 <strcpy@plt>
   122ec:	ldr	r3, [fp, #-16]
   122f0:	ldr	r2, [fp, #-112]	; 0xffffff90
   122f4:	str	r2, [r3, #20]
   122f8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   122fc:	add	r3, r3, #1
   12300:	str	r3, [fp, #-72]	; 0xffffffb8
   12304:	ldr	r3, [fp, #-16]
   12308:	ldr	r3, [r3, #8]
   1230c:	str	r3, [fp, #-16]
   12310:	ldr	r3, [fp, #-16]
   12314:	cmp	r3, #0
   12318:	bne	11e5c <__assert_fail@plt+0x1084>
   1231c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12320:	cmp	r3, #0
   12324:	beq	1248c <__assert_fail@plt+0x16b4>
   12328:	ldr	r3, [fp, #-244]	; 0xffffff0c
   1232c:	str	r3, [fp, #-160]	; 0xffffff60
   12330:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12334:	str	r3, [fp, #-148]	; 0xffffff6c
   12338:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1233c:	str	r3, [fp, #-144]	; 0xffffff70
   12340:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12344:	cmp	r3, #0
   12348:	beq	1241c <__assert_fail@plt+0x1644>
   1234c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12350:	str	r3, [fp, #-152]	; 0xffffff68
   12354:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12358:	str	r3, [fp, #-156]	; 0xffffff64
   1235c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12360:	mov	r0, r3
   12364:	asr	r1, r0, #31
   12368:	sub	r3, fp, #184	; 0xb8
   1236c:	mov	r2, r3
   12370:	bl	1a41c <__assert_fail@plt+0x9644>
   12374:	mov	r3, r0
   12378:	mov	r0, r3
   1237c:	bl	10ca0 <strlen@plt>
   12380:	mov	r3, r0
   12384:	str	r3, [fp, #-140]	; 0xffffff74
   12388:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1238c:	str	r3, [fp, #-136]	; 0xffffff78
   12390:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12394:	str	r3, [fp, #-132]	; 0xffffff7c
   12398:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1239c:	mov	r0, r3
   123a0:	mov	r1, #0
   123a4:	sub	r3, fp, #184	; 0xb8
   123a8:	mov	r2, r3
   123ac:	bl	1a41c <__assert_fail@plt+0x9644>
   123b0:	mov	r3, r0
   123b4:	mov	r0, r3
   123b8:	bl	10ca0 <strlen@plt>
   123bc:	mov	r3, r0
   123c0:	str	r3, [fp, #-128]	; 0xffffff80
   123c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   123c8:	mov	r0, r3
   123cc:	mov	r1, #0
   123d0:	sub	r3, fp, #184	; 0xb8
   123d4:	mov	r2, r3
   123d8:	bl	1a41c <__assert_fail@plt+0x9644>
   123dc:	mov	r3, r0
   123e0:	mov	r0, r3
   123e4:	bl	10ca0 <strlen@plt>
   123e8:	mov	r3, r0
   123ec:	str	r3, [fp, #-124]	; 0xffffff84
   123f0:	sub	r3, fp, #184	; 0xb8
   123f4:	mov	r2, r3
   123f8:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   123fc:	bl	1a41c <__assert_fail@plt+0x9644>
   12400:	mov	r3, r0
   12404:	mov	r0, r3
   12408:	bl	10ca0 <strlen@plt>
   1240c:	mov	r3, r0
   12410:	str	r3, [fp, #-120]	; 0xffffff88
   12414:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12418:	str	r3, [fp, #-116]	; 0xffffff8c
   1241c:	ldr	r3, [pc, #164]	; 124c8 <__assert_fail@plt+0x16f0>
   12420:	ldr	r3, [r3]
   12424:	sub	r2, fp, #160	; 0xa0
   12428:	mov	r0, r2
   1242c:	blx	r3
   12430:	ldr	r3, [pc, #148]	; 124cc <__assert_fail@plt+0x16f4>
   12434:	mov	r2, #1
   12438:	str	r2, [r3]
   1243c:	ldr	r3, [pc, #88]	; 1249c <__assert_fail@plt+0x16c4>
   12440:	ldr	r3, [r3]
   12444:	cmp	r3, #0
   12448:	beq	12490 <__assert_fail@plt+0x16b8>
   1244c:	ldr	r3, [fp, #-244]	; 0xffffff0c
   12450:	str	r3, [fp, #-16]
   12454:	b	12474 <__assert_fail@plt+0x169c>
   12458:	ldr	r3, [fp, #-16]
   1245c:	ldr	r3, [r3, #20]
   12460:	mov	r0, r3
   12464:	bl	13f5c <__assert_fail@plt+0x3184>
   12468:	ldr	r3, [fp, #-16]
   1246c:	ldr	r3, [r3, #8]
   12470:	str	r3, [fp, #-16]
   12474:	ldr	r3, [fp, #-16]
   12478:	cmp	r3, #0
   1247c:	bne	12458 <__assert_fail@plt+0x1680>
   12480:	b	12490 <__assert_fail@plt+0x16b8>
   12484:	nop			; (mov r0, r0)
   12488:	b	12490 <__assert_fail@plt+0x16b8>
   1248c:	nop			; (mov r0, r0)
   12490:	sub	sp, fp, #12
   12494:	pop	{r4, r5, fp, pc}
   12498:	andeq	ip, r2, ip, ror #2
   1249c:	andeq	ip, r2, r8, lsl #3
   124a0:	andeq	ip, r2, r4, asr r1
   124a4:	andeq	ip, r2, r0, lsl r1
   124a8:	muleq	r1, ip, r9
   124ac:	andeq	ip, r2, r4, lsl #3
   124b0:	muleq	r2, ip, r1
   124b4:	andeq	ip, r2, ip, lsr #3
   124b8:	muleq	r2, r4, r1
   124bc:	andeq	ip, r2, r4, ror #2
   124c0:			; <UNDEFINED> instruction: 0x0001b9b4
   124c4:			; <UNDEFINED> instruction: 0x0001b9b8
   124c8:	andeq	ip, r2, ip, lsl r1
   124cc:	andeq	ip, r2, r4, lsr #2
   124d0:	push	{fp, lr}
   124d4:	add	fp, sp, #4
   124d8:	sub	sp, sp, #16
   124dc:	str	r0, [fp, #-16]
   124e0:	str	r1, [fp, #-20]	; 0xffffffec
   124e4:	ldr	r3, [fp, #-16]
   124e8:	ldr	r3, [r3]
   124ec:	ldrh	r3, [r3, #56]	; 0x38
   124f0:	str	r3, [fp, #-8]
   124f4:	ldr	r3, [fp, #-8]
   124f8:	cmp	r3, #7
   124fc:	bne	12508 <__assert_fail@plt+0x1730>
   12500:	mov	r3, #0
   12504:	b	12610 <__assert_fail@plt+0x1838>
   12508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1250c:	ldr	r3, [r3]
   12510:	ldrh	r3, [r3, #56]	; 0x38
   12514:	str	r3, [fp, #-12]
   12518:	ldr	r3, [fp, #-12]
   1251c:	cmp	r3, #7
   12520:	bne	1252c <__assert_fail@plt+0x1754>
   12524:	mov	r3, #0
   12528:	b	12610 <__assert_fail@plt+0x1838>
   1252c:	ldr	r3, [fp, #-8]
   12530:	cmp	r3, #10
   12534:	beq	12544 <__assert_fail@plt+0x176c>
   12538:	ldr	r3, [fp, #-12]
   1253c:	cmp	r3, #10
   12540:	bne	12590 <__assert_fail@plt+0x17b8>
   12544:	ldr	r3, [fp, #-12]
   12548:	cmp	r3, #10
   1254c:	beq	12558 <__assert_fail@plt+0x1780>
   12550:	mov	r3, #1
   12554:	b	12610 <__assert_fail@plt+0x1838>
   12558:	ldr	r3, [fp, #-8]
   1255c:	cmp	r3, #10
   12560:	beq	1256c <__assert_fail@plt+0x1794>
   12564:	mvn	r3, #0
   12568:	b	12610 <__assert_fail@plt+0x1838>
   1256c:	ldr	r3, [fp, #-16]
   12570:	ldr	r2, [r3]
   12574:	ldr	r3, [fp, #-20]	; 0xffffffec
   12578:	ldr	r3, [r3]
   1257c:	mov	r1, r3
   12580:	mov	r0, r2
   12584:	bl	137d4 <__assert_fail@plt+0x29fc>
   12588:	mov	r3, r0
   1258c:	b	12610 <__assert_fail@plt+0x1838>
   12590:	ldr	r2, [fp, #-8]
   12594:	ldr	r3, [fp, #-12]
   12598:	cmp	r2, r3
   1259c:	beq	125ec <__assert_fail@plt+0x1814>
   125a0:	ldr	r3, [fp, #-16]
   125a4:	ldr	r3, [r3]
   125a8:	ldr	r3, [r3, #48]	; 0x30
   125ac:	cmp	r3, #0
   125b0:	bne	125ec <__assert_fail@plt+0x1814>
   125b4:	ldr	r3, [pc, #96]	; 1261c <__assert_fail@plt+0x1844>
   125b8:	ldr	r3, [r3]
   125bc:	cmp	r3, #0
   125c0:	bne	125ec <__assert_fail@plt+0x1814>
   125c4:	ldr	r3, [fp, #-8]
   125c8:	cmp	r3, #1
   125cc:	bne	125d8 <__assert_fail@plt+0x1800>
   125d0:	mov	r3, #1
   125d4:	b	12610 <__assert_fail@plt+0x1838>
   125d8:	ldr	r3, [fp, #-12]
   125dc:	cmp	r3, #1
   125e0:	bne	125ec <__assert_fail@plt+0x1814>
   125e4:	mvn	r3, #0
   125e8:	b	12610 <__assert_fail@plt+0x1838>
   125ec:	ldr	r3, [pc, #44]	; 12620 <__assert_fail@plt+0x1848>
   125f0:	ldr	r3, [r3]
   125f4:	ldr	r2, [fp, #-16]
   125f8:	ldr	r0, [r2]
   125fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12600:	ldr	r2, [r2]
   12604:	mov	r1, r2
   12608:	blx	r3
   1260c:	mov	r3, r0
   12610:	mov	r0, r3
   12614:	sub	sp, fp, #4
   12618:	pop	{fp, pc}
   1261c:	muleq	r2, ip, r1
   12620:	andeq	ip, r2, r0, lsr #2
   12624:	push	{fp, lr}
   12628:	add	fp, sp, #4
   1262c:	sub	sp, sp, #16
   12630:	str	r0, [fp, #-16]
   12634:	ldr	r3, [fp, #-16]
   12638:	ldr	r3, [r3]
   1263c:	str	r3, [fp, #-8]
   12640:	b	12690 <__assert_fail@plt+0x18b8>
   12644:	ldr	r3, [fp, #-8]
   12648:	ldr	r3, [r3, #16]
   1264c:	cmp	r3, #1
   12650:	beq	12680 <__assert_fail@plt+0x18a8>
   12654:	ldr	r3, [fp, #-16]
   12658:	ldr	r3, [r3, #32]
   1265c:	mov	r1, r3
   12660:	ldr	r3, [fp, #-16]
   12664:	ldr	r3, [r3, #20]
   12668:	mov	r2, r3
   1266c:	ldr	r0, [fp, #-8]
   12670:	bl	12ebc <__assert_fail@plt+0x20e4>
   12674:	mov	r0, #10
   12678:	bl	10cf4 <putchar@plt>
   1267c:	b	12684 <__assert_fail@plt+0x18ac>
   12680:	nop			; (mov r0, r0)
   12684:	ldr	r3, [fp, #-8]
   12688:	ldr	r3, [r3, #8]
   1268c:	str	r3, [fp, #-8]
   12690:	ldr	r3, [fp, #-8]
   12694:	cmp	r3, #0
   12698:	bne	12644 <__assert_fail@plt+0x186c>
   1269c:	nop			; (mov r0, r0)
   126a0:	sub	sp, fp, #4
   126a4:	pop	{fp, pc}
   126a8:	push	{r4, fp, lr}
   126ac:	add	fp, sp, #8
   126b0:	sub	sp, sp, #60	; 0x3c
   126b4:	str	r0, [fp, #-48]	; 0xffffffd0
   126b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   126bc:	ldr	r3, [r3]
   126c0:	ldr	r3, [r3, #48]	; 0x30
   126c4:	cmp	r3, #0
   126c8:	beq	12728 <__assert_fail@plt+0x1950>
   126cc:	ldr	r3, [pc, #884]	; 12a48 <__assert_fail@plt+0x1c70>
   126d0:	ldr	r3, [r3]
   126d4:	cmp	r3, #0
   126d8:	bne	126ec <__assert_fail@plt+0x1914>
   126dc:	ldr	r3, [pc, #872]	; 12a4c <__assert_fail@plt+0x1c74>
   126e0:	ldr	r3, [r3]
   126e4:	cmp	r3, #0
   126e8:	beq	12728 <__assert_fail@plt+0x1950>
   126ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   126f0:	ldr	r3, [r3, #4]
   126f4:	ldr	r2, [pc, #852]	; 12a50 <__assert_fail@plt+0x1c78>
   126f8:	ldr	r2, [r2]
   126fc:	add	r3, r3, r2
   12700:	sub	r2, r3, #1
   12704:	ldr	r3, [pc, #836]	; 12a50 <__assert_fail@plt+0x1c78>
   12708:	ldr	r3, [r3]
   1270c:	mov	r1, r3
   12710:	mov	r0, r2
   12714:	bl	1b1d8 <__assert_fail@plt+0xa400>
   12718:	mov	r3, r0
   1271c:	mov	r1, r3
   12720:	ldr	r0, [pc, #812]	; 12a54 <__assert_fail@plt+0x1c7c>
   12724:	bl	10b98 <printf@plt>
   12728:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1272c:	ldr	r3, [r3]
   12730:	str	r3, [fp, #-16]
   12734:	b	12a30 <__assert_fail@plt+0x1c58>
   12738:	ldr	r3, [fp, #-16]
   1273c:	ldr	r3, [r3, #16]
   12740:	cmp	r3, #1
   12744:	beq	12a20 <__assert_fail@plt+0x1c48>
   12748:	ldr	r3, [fp, #-16]
   1274c:	add	r3, r3, #64	; 0x40
   12750:	str	r3, [fp, #-20]	; 0xffffffec
   12754:	ldr	r3, [pc, #764]	; 12a58 <__assert_fail@plt+0x1c80>
   12758:	ldr	r3, [r3]
   1275c:	cmp	r3, #0
   12760:	beq	12784 <__assert_fail@plt+0x19ac>
   12764:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12768:	ldr	r1, [r3, #32]
   1276c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12770:	ldrd	r2, [r3, #96]	; 0x60
   12774:	mov	r3, r2
   12778:	mov	r2, r3
   1277c:	ldr	r0, [pc, #728]	; 12a5c <__assert_fail@plt+0x1c84>
   12780:	bl	10b98 <printf@plt>
   12784:	ldr	r3, [pc, #704]	; 12a4c <__assert_fail@plt+0x1c74>
   12788:	ldr	r3, [r3]
   1278c:	cmp	r3, #0
   12790:	beq	127e8 <__assert_fail@plt+0x1a10>
   12794:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12798:	ldr	r4, [r3, #20]
   1279c:	ldr	r3, [fp, #-20]	; 0xffffffec
   127a0:	ldrd	r0, [r3, #64]	; 0x40
   127a4:	ldr	r3, [pc, #676]	; 12a50 <__assert_fail@plt+0x1c78>
   127a8:	ldr	r3, [r3]
   127ac:	sub	r3, r3, #1
   127b0:	mov	r2, r3
   127b4:	asr	r3, r2, #31
   127b8:	adds	r0, r0, r2
   127bc:	adc	r1, r1, r3
   127c0:	ldr	r3, [pc, #648]	; 12a50 <__assert_fail@plt+0x1c78>
   127c4:	ldr	r3, [r3]
   127c8:	mov	r2, r3
   127cc:	asr	r3, r2, #31
   127d0:	bl	1b624 <__assert_fail@plt+0xa84c>
   127d4:	mov	r2, r0
   127d8:	mov	r3, r1
   127dc:	mov	r1, r4
   127e0:	ldr	r0, [pc, #632]	; 12a60 <__assert_fail@plt+0x1c88>
   127e4:	bl	10b98 <printf@plt>
   127e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   127ec:	ldr	r3, [r3, #16]
   127f0:	sub	r2, fp, #44	; 0x2c
   127f4:	mov	r1, r2
   127f8:	mov	r0, r3
   127fc:	bl	13cd8 <__assert_fail@plt+0x2f00>
   12800:	ldr	r3, [fp, #-16]
   12804:	ldr	r3, [r3, #20]
   12808:	str	r3, [fp, #-24]	; 0xffffffe8
   1280c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12810:	ldr	lr, [r3, #36]	; 0x24
   12814:	ldr	r3, [fp, #-20]	; 0xffffffec
   12818:	ldr	r3, [r3, #20]
   1281c:	mov	r4, r3
   12820:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12824:	ldr	r3, [r3, #44]	; 0x2c
   12828:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1282c:	ldr	r2, [r2]
   12830:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12834:	ldr	r1, [r1, #28]
   12838:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1283c:	ldr	r0, [r0, #4]
   12840:	sub	ip, fp, #44	; 0x2c
   12844:	str	r0, [sp, #12]
   12848:	str	r1, [sp, #8]
   1284c:	str	r2, [sp, #4]
   12850:	str	r3, [sp]
   12854:	mov	r3, r4
   12858:	mov	r2, lr
   1285c:	mov	r1, ip
   12860:	ldr	r0, [pc, #508]	; 12a64 <__assert_fail@plt+0x1c8c>
   12864:	bl	10b98 <printf@plt>
   12868:	ldr	r3, [pc, #504]	; 12a68 <__assert_fail@plt+0x1c90>
   1286c:	ldr	r3, [r3]
   12870:	cmp	r3, #0
   12874:	beq	12894 <__assert_fail@plt+0x1abc>
   12878:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1287c:	ldr	r1, [r3, #24]
   12880:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12884:	ldr	r3, [r3, #8]
   12888:	mov	r2, r3
   1288c:	ldr	r0, [pc, #472]	; 12a6c <__assert_fail@plt+0x1c94>
   12890:	bl	10b98 <printf@plt>
   12894:	ldr	r3, [fp, #-20]	; 0xffffffec
   12898:	ldr	r3, [r3, #16]
   1289c:	and	r3, r3, #61440	; 0xf000
   128a0:	cmp	r3, #8192	; 0x2000
   128a4:	beq	128bc <__assert_fail@plt+0x1ae4>
   128a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   128ac:	ldr	r3, [r3, #16]
   128b0:	and	r3, r3, #61440	; 0xf000
   128b4:	cmp	r3, #24576	; 0x6000
   128b8:	bne	128f0 <__assert_fail@plt+0x1b18>
   128bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   128c0:	ldrd	r2, [r3, #32]
   128c4:	mov	r3, r2
   128c8:	lsr	r3, r3, #8
   128cc:	uxtb	r1, r3
   128d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   128d4:	ldrd	r2, [r3, #32]
   128d8:	mov	r3, r2
   128dc:	uxtb	r3, r3
   128e0:	mov	r2, r3
   128e4:	ldr	r0, [pc, #388]	; 12a70 <__assert_fail@plt+0x1c98>
   128e8:	bl	10b98 <printf@plt>
   128ec:	b	1294c <__assert_fail@plt+0x1b74>
   128f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   128f4:	ldr	r3, [r3, #8]
   128f8:	cmp	r3, #0
   128fc:	beq	12934 <__assert_fail@plt+0x1b5c>
   12900:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12904:	ldr	r3, [r3, #40]	; 0x28
   12908:	rsb	r1, r3, #8
   1290c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12910:	ldr	r0, [r3, #40]	; 0x28
   12914:	ldr	r3, [fp, #-20]	; 0xffffffec
   12918:	ldrd	r2, [r3, #48]	; 0x30
   1291c:	strd	r2, [sp]
   12920:	mov	r3, r0
   12924:	ldr	r2, [pc, #328]	; 12a74 <__assert_fail@plt+0x1c9c>
   12928:	ldr	r0, [pc, #328]	; 12a78 <__assert_fail@plt+0x1ca0>
   1292c:	bl	10b98 <printf@plt>
   12930:	b	1294c <__assert_fail@plt+0x1b74>
   12934:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12938:	ldr	r1, [r3, #40]	; 0x28
   1293c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12940:	ldrd	r2, [r3, #48]	; 0x30
   12944:	ldr	r0, [pc, #276]	; 12a60 <__assert_fail@plt+0x1c88>
   12948:	bl	10b98 <printf@plt>
   1294c:	ldr	r3, [pc, #296]	; 12a7c <__assert_fail@plt+0x1ca4>
   12950:	ldr	r3, [r3]
   12954:	cmp	r3, #0
   12958:	beq	12970 <__assert_fail@plt+0x1b98>
   1295c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12960:	ldr	r3, [r3, #72]	; 0x48
   12964:	mov	r0, r3
   12968:	bl	13034 <__assert_fail@plt+0x225c>
   1296c:	b	129a4 <__assert_fail@plt+0x1bcc>
   12970:	ldr	r3, [pc, #264]	; 12a80 <__assert_fail@plt+0x1ca8>
   12974:	ldr	r3, [r3]
   12978:	cmp	r3, #0
   1297c:	beq	12994 <__assert_fail@plt+0x1bbc>
   12980:	ldr	r3, [fp, #-20]	; 0xffffffec
   12984:	ldr	r3, [r3, #88]	; 0x58
   12988:	mov	r0, r3
   1298c:	bl	13034 <__assert_fail@plt+0x225c>
   12990:	b	129a4 <__assert_fail@plt+0x1bcc>
   12994:	ldr	r3, [fp, #-20]	; 0xffffffec
   12998:	ldr	r3, [r3, #80]	; 0x50
   1299c:	mov	r0, r3
   129a0:	bl	13034 <__assert_fail@plt+0x225c>
   129a4:	ldr	r3, [fp, #-16]
   129a8:	add	r3, r3, #168	; 0xa8
   129ac:	mov	r0, r3
   129b0:	bl	136f4 <__assert_fail@plt+0x291c>
   129b4:	ldr	r3, [pc, #200]	; 12a84 <__assert_fail@plt+0x1cac>
   129b8:	ldr	r3, [r3]
   129bc:	cmp	r3, #0
   129c0:	bne	129e8 <__assert_fail@plt+0x1c10>
   129c4:	ldr	r3, [pc, #188]	; 12a88 <__assert_fail@plt+0x1cb0>
   129c8:	ldr	r3, [r3]
   129cc:	cmp	r3, #0
   129d0:	beq	129f8 <__assert_fail@plt+0x1c20>
   129d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   129d8:	ldr	r3, [r3, #16]
   129dc:	and	r3, r3, #61440	; 0xf000
   129e0:	cmp	r3, #16384	; 0x4000
   129e4:	bne	129f8 <__assert_fail@plt+0x1c20>
   129e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   129ec:	ldr	r3, [r3, #16]
   129f0:	mov	r0, r3
   129f4:	bl	134cc <__assert_fail@plt+0x26f4>
   129f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   129fc:	ldr	r3, [r3, #16]
   12a00:	and	r3, r3, #61440	; 0xf000
   12a04:	cmp	r3, #40960	; 0xa000
   12a08:	bne	12a14 <__assert_fail@plt+0x1c3c>
   12a0c:	ldr	r0, [fp, #-16]
   12a10:	bl	13584 <__assert_fail@plt+0x27ac>
   12a14:	mov	r0, #10
   12a18:	bl	10cf4 <putchar@plt>
   12a1c:	b	12a24 <__assert_fail@plt+0x1c4c>
   12a20:	nop			; (mov r0, r0)
   12a24:	ldr	r3, [fp, #-16]
   12a28:	ldr	r3, [r3, #8]
   12a2c:	str	r3, [fp, #-16]
   12a30:	ldr	r3, [fp, #-16]
   12a34:	cmp	r3, #0
   12a38:	bne	12738 <__assert_fail@plt+0x1960>
   12a3c:	nop			; (mov r0, r0)
   12a40:	sub	sp, fp, #8
   12a44:	pop	{r4, fp, pc}
   12a48:	andeq	ip, r2, r8, lsl #3
   12a4c:	andeq	ip, r2, r4, asr r1
   12a50:	andeq	ip, r2, r4, lsr #3
   12a54:	andeq	fp, r1, r4, asr #19
   12a58:	andeq	ip, r2, ip, ror #2
   12a5c:	ldrdeq	fp, [r1], -r0
   12a60:	ldrdeq	fp, [r1], -r8
   12a64:	andeq	fp, r1, r0, ror #19
   12a68:	andeq	ip, r2, r4, ror #2
   12a6c:	strdeq	fp, [r1], -r4
   12a70:	strdeq	fp, [r1], -ip
   12a74:	andeq	fp, r1, r8, lsl #20
   12a78:	andeq	fp, r1, ip, lsl #20
   12a7c:	andeq	ip, r2, r4, ror r1
   12a80:	andeq	ip, r2, r0, lsr #3
   12a84:	andeq	ip, r2, ip, ror r1
   12a88:	andeq	ip, r2, ip, lsl #3
   12a8c:	push	{fp, lr}
   12a90:	add	fp, sp, #4
   12a94:	sub	sp, sp, #16
   12a98:	str	r0, [fp, #-16]
   12a9c:	str	r1, [fp, #-20]	; 0xffffffec
   12aa0:	ldr	r3, [fp, #-16]
   12aa4:	ldr	r3, [r3, #16]
   12aa8:	str	r3, [fp, #-8]
   12aac:	ldr	r3, [pc, #244]	; 12ba8 <__assert_fail@plt+0x1dd0>
   12ab0:	ldr	r3, [r3]
   12ab4:	cmp	r3, #0
   12ab8:	beq	12ad4 <__assert_fail@plt+0x1cfc>
   12abc:	ldr	r3, [fp, #-16]
   12ac0:	ldr	r3, [r3, #32]
   12ac4:	add	r3, r3, #1
   12ac8:	ldr	r2, [fp, #-8]
   12acc:	add	r3, r2, r3
   12ad0:	str	r3, [fp, #-8]
   12ad4:	ldr	r3, [pc, #208]	; 12bac <__assert_fail@plt+0x1dd4>
   12ad8:	ldr	r3, [r3]
   12adc:	cmp	r3, #0
   12ae0:	beq	12afc <__assert_fail@plt+0x1d24>
   12ae4:	ldr	r3, [fp, #-16]
   12ae8:	ldr	r3, [r3, #20]
   12aec:	add	r3, r3, #1
   12af0:	ldr	r2, [fp, #-8]
   12af4:	add	r3, r2, r3
   12af8:	str	r3, [fp, #-8]
   12afc:	ldr	r3, [pc, #172]	; 12bb0 <__assert_fail@plt+0x1dd8>
   12b00:	ldr	r3, [r3]
   12b04:	cmp	r3, #0
   12b08:	bne	12b1c <__assert_fail@plt+0x1d44>
   12b0c:	ldr	r3, [pc, #160]	; 12bb4 <__assert_fail@plt+0x1ddc>
   12b10:	ldr	r3, [r3]
   12b14:	cmp	r3, #0
   12b18:	beq	12b28 <__assert_fail@plt+0x1d50>
   12b1c:	ldr	r3, [fp, #-8]
   12b20:	add	r3, r3, #1
   12b24:	str	r3, [fp, #-8]
   12b28:	ldr	r3, [fp, #-8]
   12b2c:	add	r3, r3, #1
   12b30:	str	r3, [fp, #-8]
   12b34:	ldr	r3, [pc, #124]	; 12bb8 <__assert_fail@plt+0x1de0>
   12b38:	ldr	r3, [r3]
   12b3c:	add	r3, r3, #1
   12b40:	str	r3, [fp, #-12]
   12b44:	ldr	r3, [fp, #-8]
   12b48:	lsl	r2, r3, #1
   12b4c:	ldr	r3, [fp, #-12]
   12b50:	cmp	r2, r3
   12b54:	ble	12b68 <__assert_fail@plt+0x1d90>
   12b58:	ldr	r0, [fp, #-16]
   12b5c:	bl	12624 <__assert_fail@plt+0x184c>
   12b60:	mov	r3, #0
   12b64:	b	12b9c <__assert_fail@plt+0x1dc4>
   12b68:	ldr	r1, [fp, #-8]
   12b6c:	ldr	r0, [fp, #-12]
   12b70:	bl	1b3e4 <__assert_fail@plt+0xa60c>
   12b74:	mov	r3, r0
   12b78:	mov	r2, r3
   12b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b80:	str	r2, [r3]
   12b84:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b88:	ldr	r3, [r3]
   12b8c:	mov	r1, r3
   12b90:	ldr	r0, [fp, #-12]
   12b94:	bl	1b3e4 <__assert_fail@plt+0xa60c>
   12b98:	mov	r3, r0
   12b9c:	mov	r0, r3
   12ba0:	sub	sp, fp, #4
   12ba4:	pop	{fp, pc}
   12ba8:	andeq	ip, r2, ip, ror #2
   12bac:	andeq	ip, r2, r4, asr r1
   12bb0:	andeq	ip, r2, ip, ror r1
   12bb4:	andeq	ip, r2, ip, lsl #3
   12bb8:	strdeq	ip, [r2], -r0
   12bbc:	push	{r4, fp, lr}
   12bc0:	add	fp, sp, #8
   12bc4:	sub	sp, sp, #52	; 0x34
   12bc8:	str	r0, [fp, #-56]	; 0xffffffc8
   12bcc:	sub	r3, fp, #52	; 0x34
   12bd0:	mov	r1, r3
   12bd4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12bd8:	bl	12a8c <__assert_fail@plt+0x1cb4>
   12bdc:	str	r0, [fp, #-44]	; 0xffffffd4
   12be0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12be4:	cmp	r3, #0
   12be8:	beq	12e90 <__assert_fail@plt+0x20b8>
   12bec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12bf0:	ldr	r2, [r3, #12]
   12bf4:	ldr	r3, [pc, #672]	; 12e9c <__assert_fail@plt+0x20c4>
   12bf8:	ldr	r3, [r3]
   12bfc:	cmp	r2, r3
   12c00:	ble	12c8c <__assert_fail@plt+0x1eb4>
   12c04:	ldr	r3, [pc, #660]	; 12ea0 <__assert_fail@plt+0x20c8>
   12c08:	ldr	r2, [r3]
   12c0c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c10:	ldr	r3, [r3, #12]
   12c14:	lsl	r3, r3, #2
   12c18:	mov	r1, r3
   12c1c:	mov	r0, r2
   12c20:	bl	1a824 <__assert_fail@plt+0x9a4c>
   12c24:	str	r0, [fp, #-48]	; 0xffffffd0
   12c28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c2c:	cmp	r3, #0
   12c30:	bne	12c70 <__assert_fail@plt+0x1e98>
   12c34:	ldr	r3, [pc, #616]	; 12ea4 <__assert_fail@plt+0x20cc>
   12c38:	ldr	r4, [r3]
   12c3c:	bl	10cd0 <__errno_location@plt>
   12c40:	mov	r3, r0
   12c44:	ldr	r3, [r3]
   12c48:	mov	r0, r3
   12c4c:	bl	10c7c <strerror@plt>
   12c50:	mov	r3, r0
   12c54:	mov	r2, r3
   12c58:	ldr	r1, [pc, #584]	; 12ea8 <__assert_fail@plt+0x20d0>
   12c5c:	mov	r0, r4
   12c60:	bl	10cc4 <fprintf@plt>
   12c64:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12c68:	bl	12624 <__assert_fail@plt+0x184c>
   12c6c:	b	12e94 <__assert_fail@plt+0x20bc>
   12c70:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c74:	ldr	r3, [r3, #12]
   12c78:	ldr	r2, [pc, #540]	; 12e9c <__assert_fail@plt+0x20c4>
   12c7c:	str	r3, [r2]
   12c80:	ldr	r2, [pc, #536]	; 12ea0 <__assert_fail@plt+0x20c8>
   12c84:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c88:	str	r3, [r2]
   12c8c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c90:	ldr	r3, [r3]
   12c94:	str	r3, [fp, #-16]
   12c98:	mov	r3, #0
   12c9c:	str	r3, [fp, #-32]	; 0xffffffe0
   12ca0:	b	12ce4 <__assert_fail@plt+0x1f0c>
   12ca4:	ldr	r3, [fp, #-16]
   12ca8:	ldr	r3, [r3, #16]
   12cac:	cmp	r3, #1
   12cb0:	beq	12cd8 <__assert_fail@plt+0x1f00>
   12cb4:	ldr	r3, [pc, #484]	; 12ea0 <__assert_fail@plt+0x20c8>
   12cb8:	ldr	r2, [r3]
   12cbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12cc0:	add	r1, r3, #1
   12cc4:	str	r1, [fp, #-32]	; 0xffffffe0
   12cc8:	lsl	r3, r3, #2
   12ccc:	add	r3, r2, r3
   12cd0:	ldr	r2, [fp, #-16]
   12cd4:	str	r2, [r3]
   12cd8:	ldr	r3, [fp, #-16]
   12cdc:	ldr	r3, [r3, #8]
   12ce0:	str	r3, [fp, #-16]
   12ce4:	ldr	r3, [fp, #-16]
   12ce8:	cmp	r3, #0
   12cec:	bne	12ca4 <__assert_fail@plt+0x1ecc>
   12cf0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12cf4:	mov	r1, r3
   12cf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12cfc:	bl	1b3e4 <__assert_fail@plt+0xa60c>
   12d00:	mov	r3, r0
   12d04:	str	r3, [fp, #-36]	; 0xffffffdc
   12d08:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12d0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12d10:	mov	r1, r2
   12d14:	mov	r0, r3
   12d18:	bl	1b604 <__assert_fail@plt+0xa82c>
   12d1c:	mov	r3, r1
   12d20:	cmp	r3, #0
   12d24:	beq	12d34 <__assert_fail@plt+0x1f5c>
   12d28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d2c:	add	r3, r3, #1
   12d30:	str	r3, [fp, #-36]	; 0xffffffdc
   12d34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12d38:	ldr	r3, [r3]
   12d3c:	ldr	r3, [r3, #48]	; 0x30
   12d40:	cmp	r3, #0
   12d44:	beq	12da4 <__assert_fail@plt+0x1fcc>
   12d48:	ldr	r3, [pc, #348]	; 12eac <__assert_fail@plt+0x20d4>
   12d4c:	ldr	r3, [r3]
   12d50:	cmp	r3, #0
   12d54:	bne	12d68 <__assert_fail@plt+0x1f90>
   12d58:	ldr	r3, [pc, #336]	; 12eb0 <__assert_fail@plt+0x20d8>
   12d5c:	ldr	r3, [r3]
   12d60:	cmp	r3, #0
   12d64:	beq	12da4 <__assert_fail@plt+0x1fcc>
   12d68:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12d6c:	ldr	r3, [r3, #4]
   12d70:	ldr	r2, [pc, #316]	; 12eb4 <__assert_fail@plt+0x20dc>
   12d74:	ldr	r2, [r2]
   12d78:	add	r3, r3, r2
   12d7c:	sub	r2, r3, #1
   12d80:	ldr	r3, [pc, #300]	; 12eb4 <__assert_fail@plt+0x20dc>
   12d84:	ldr	r3, [r3]
   12d88:	mov	r1, r3
   12d8c:	mov	r0, r2
   12d90:	bl	1b1d8 <__assert_fail@plt+0xa400>
   12d94:	mov	r3, r0
   12d98:	mov	r1, r3
   12d9c:	ldr	r0, [pc, #276]	; 12eb8 <__assert_fail@plt+0x20e0>
   12da0:	bl	10b98 <printf@plt>
   12da4:	mov	r3, #0
   12da8:	str	r3, [fp, #-40]	; 0xffffffd8
   12dac:	b	12e7c <__assert_fail@plt+0x20a4>
   12db0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12db4:	str	r3, [fp, #-20]	; 0xffffffec
   12db8:	mov	r3, #0
   12dbc:	str	r3, [fp, #-28]	; 0xffffffe4
   12dc0:	ldr	r3, [pc, #216]	; 12ea0 <__assert_fail@plt+0x20c8>
   12dc4:	ldr	r2, [r3]
   12dc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dcc:	lsl	r3, r3, #2
   12dd0:	add	r3, r2, r3
   12dd4:	ldr	r0, [r3]
   12dd8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12ddc:	ldr	r3, [r3, #32]
   12de0:	mov	r1, r3
   12de4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12de8:	ldr	r3, [r3, #20]
   12dec:	mov	r2, r3
   12df0:	bl	12ebc <__assert_fail@plt+0x20e4>
   12df4:	str	r0, [fp, #-24]	; 0xffffffe8
   12df8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12dfc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e00:	add	r3, r2, r3
   12e04:	str	r3, [fp, #-20]	; 0xffffffec
   12e08:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e10:	cmp	r2, r3
   12e14:	bge	12e5c <__assert_fail@plt+0x2084>
   12e18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12e1c:	add	r3, r3, #1
   12e20:	str	r3, [fp, #-28]	; 0xffffffe4
   12e24:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12e28:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12e2c:	cmp	r2, r3
   12e30:	beq	12e64 <__assert_fail@plt+0x208c>
   12e34:	b	12e40 <__assert_fail@plt+0x2068>
   12e38:	mov	r0, #32
   12e3c:	bl	10cf4 <putchar@plt>
   12e40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e44:	add	r2, r3, #1
   12e48:	str	r2, [fp, #-24]	; 0xffffffe8
   12e4c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12e50:	cmp	r3, r2
   12e54:	blt	12e38 <__assert_fail@plt+0x2060>
   12e58:	b	12dc0 <__assert_fail@plt+0x1fe8>
   12e5c:	nop			; (mov r0, r0)
   12e60:	b	12e68 <__assert_fail@plt+0x2090>
   12e64:	nop			; (mov r0, r0)
   12e68:	mov	r0, #10
   12e6c:	bl	10cf4 <putchar@plt>
   12e70:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12e74:	add	r3, r3, #1
   12e78:	str	r3, [fp, #-40]	; 0xffffffd8
   12e7c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12e80:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e84:	cmp	r2, r3
   12e88:	blt	12db0 <__assert_fail@plt+0x1fd8>
   12e8c:	b	12e94 <__assert_fail@plt+0x20bc>
   12e90:	nop			; (mov r0, r0)
   12e94:	sub	sp, fp, #8
   12e98:	pop	{r4, fp, pc}
   12e9c:	andeq	ip, r2, r0, lsl #2
   12ea0:	andeq	ip, r2, r8, lsr #2
   12ea4:	andeq	ip, r2, r0, lsl r1
   12ea8:	andeq	fp, r1, r8, lsl sl
   12eac:	andeq	ip, r2, r8, lsl #3
   12eb0:	andeq	ip, r2, r4, asr r1
   12eb4:	andeq	ip, r2, r4, lsr #3
   12eb8:	andeq	fp, r1, r4, asr #19
   12ebc:	push	{r4, fp, lr}
   12ec0:	add	fp, sp, #8
   12ec4:	sub	sp, sp, #28
   12ec8:	str	r0, [fp, #-24]	; 0xffffffe8
   12ecc:	str	r1, [fp, #-28]	; 0xffffffe4
   12ed0:	str	r2, [fp, #-32]	; 0xffffffe0
   12ed4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ed8:	add	r3, r3, #64	; 0x40
   12edc:	str	r3, [fp, #-20]	; 0xffffffec
   12ee0:	mov	r3, #0
   12ee4:	str	r3, [fp, #-16]
   12ee8:	ldr	r3, [pc, #296]	; 13018 <__assert_fail@plt+0x2240>
   12eec:	ldr	r3, [r3]
   12ef0:	cmp	r3, #0
   12ef4:	beq	12f24 <__assert_fail@plt+0x214c>
   12ef8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f00:	ldrd	r2, [r3, #96]	; 0x60
   12f04:	mov	r3, r2
   12f08:	mov	r2, r3
   12f0c:	ldr	r0, [pc, #264]	; 1301c <__assert_fail@plt+0x2244>
   12f10:	bl	10b98 <printf@plt>
   12f14:	mov	r2, r0
   12f18:	ldr	r3, [fp, #-16]
   12f1c:	add	r3, r3, r2
   12f20:	str	r3, [fp, #-16]
   12f24:	ldr	r3, [pc, #244]	; 13020 <__assert_fail@plt+0x2248>
   12f28:	ldr	r3, [r3]
   12f2c:	cmp	r3, #0
   12f30:	beq	12f94 <__assert_fail@plt+0x21bc>
   12f34:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12f38:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f3c:	ldrd	r0, [r3, #64]	; 0x40
   12f40:	ldr	r3, [pc, #220]	; 13024 <__assert_fail@plt+0x224c>
   12f44:	ldr	r3, [r3]
   12f48:	sub	r3, r3, #1
   12f4c:	mov	r2, r3
   12f50:	asr	r3, r2, #31
   12f54:	adds	r0, r0, r2
   12f58:	adc	r1, r1, r3
   12f5c:	ldr	r3, [pc, #192]	; 13024 <__assert_fail@plt+0x224c>
   12f60:	ldr	r3, [r3]
   12f64:	mov	r2, r3
   12f68:	asr	r3, r2, #31
   12f6c:	bl	1b624 <__assert_fail@plt+0xa84c>
   12f70:	mov	r2, r0
   12f74:	mov	r3, r1
   12f78:	mov	r1, r4
   12f7c:	ldr	r0, [pc, #164]	; 13028 <__assert_fail@plt+0x2250>
   12f80:	bl	10b98 <printf@plt>
   12f84:	mov	r2, r0
   12f88:	ldr	r3, [fp, #-16]
   12f8c:	add	r3, r3, r2
   12f90:	str	r3, [fp, #-16]
   12f94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f98:	add	r3, r3, #168	; 0xa8
   12f9c:	mov	r0, r3
   12fa0:	bl	136f4 <__assert_fail@plt+0x291c>
   12fa4:	mov	r2, r0
   12fa8:	ldr	r3, [fp, #-16]
   12fac:	add	r3, r3, r2
   12fb0:	str	r3, [fp, #-16]
   12fb4:	ldr	r3, [pc, #112]	; 1302c <__assert_fail@plt+0x2254>
   12fb8:	ldr	r3, [r3]
   12fbc:	cmp	r3, #0
   12fc0:	bne	12fe8 <__assert_fail@plt+0x2210>
   12fc4:	ldr	r3, [pc, #100]	; 13030 <__assert_fail@plt+0x2258>
   12fc8:	ldr	r3, [r3]
   12fcc:	cmp	r3, #0
   12fd0:	beq	13008 <__assert_fail@plt+0x2230>
   12fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fd8:	ldr	r3, [r3, #16]
   12fdc:	and	r3, r3, #61440	; 0xf000
   12fe0:	cmp	r3, #16384	; 0x4000
   12fe4:	bne	13008 <__assert_fail@plt+0x2230>
   12fe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fec:	ldr	r3, [r3, #16]
   12ff0:	mov	r0, r3
   12ff4:	bl	134cc <__assert_fail@plt+0x26f4>
   12ff8:	mov	r2, r0
   12ffc:	ldr	r3, [fp, #-16]
   13000:	add	r3, r3, r2
   13004:	str	r3, [fp, #-16]
   13008:	ldr	r3, [fp, #-16]
   1300c:	mov	r0, r3
   13010:	sub	sp, fp, #8
   13014:	pop	{r4, fp, pc}
   13018:	andeq	ip, r2, ip, ror #2
   1301c:	ldrdeq	fp, [r1], -r0
   13020:	andeq	ip, r2, r4, asr r1
   13024:	andeq	ip, r2, r4, lsr #3
   13028:	ldrdeq	fp, [r1], -r8
   1302c:	andeq	ip, r2, ip, ror r1
   13030:	andeq	ip, r2, ip, lsl #3
   13034:	push	{r4, fp, lr}
   13038:	add	fp, sp, #8
   1303c:	sub	sp, sp, #20
   13040:	str	r0, [fp, #-24]	; 0xffffffe8
   13044:	sub	r3, fp, #24
   13048:	mov	r0, r3
   1304c:	bl	10be0 <ctime@plt>
   13050:	str	r0, [fp, #-20]	; 0xffffffec
   13054:	mov	r3, #4
   13058:	str	r3, [fp, #-16]
   1305c:	b	13084 <__assert_fail@plt+0x22ac>
   13060:	ldr	r3, [fp, #-16]
   13064:	ldr	r2, [fp, #-20]	; 0xffffffec
   13068:	add	r3, r2, r3
   1306c:	ldrb	r3, [r3]
   13070:	mov	r0, r3
   13074:	bl	10cf4 <putchar@plt>
   13078:	ldr	r3, [fp, #-16]
   1307c:	add	r3, r3, #1
   13080:	str	r3, [fp, #-16]
   13084:	ldr	r3, [fp, #-16]
   13088:	cmp	r3, #10
   1308c:	ble	13060 <__assert_fail@plt+0x2288>
   13090:	ldr	r3, [pc, #256]	; 13198 <__assert_fail@plt+0x23c0>
   13094:	ldr	r3, [r3]
   13098:	cmp	r3, #0
   1309c:	beq	130e0 <__assert_fail@plt+0x2308>
   130a0:	mov	r3, #11
   130a4:	str	r3, [fp, #-16]
   130a8:	b	130d0 <__assert_fail@plt+0x22f8>
   130ac:	ldr	r3, [fp, #-16]
   130b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   130b4:	add	r3, r2, r3
   130b8:	ldrb	r3, [r3]
   130bc:	mov	r0, r3
   130c0:	bl	10cf4 <putchar@plt>
   130c4:	ldr	r3, [fp, #-16]
   130c8:	add	r3, r3, #1
   130cc:	str	r3, [fp, #-16]
   130d0:	ldr	r3, [fp, #-16]
   130d4:	cmp	r3, #23
   130d8:	ble	130ac <__assert_fail@plt+0x22d4>
   130dc:	b	13184 <__assert_fail@plt+0x23ac>
   130e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130e4:	add	r4, r3, #15663104	; 0xef0000
   130e8:	add	r4, r4, #61696	; 0xf100
   130ec:	mov	r0, #0
   130f0:	bl	10bd4 <time@plt>
   130f4:	mov	r3, r0
   130f8:	cmp	r4, r3
   130fc:	ble	13140 <__assert_fail@plt+0x2368>
   13100:	mov	r3, #11
   13104:	str	r3, [fp, #-16]
   13108:	b	13130 <__assert_fail@plt+0x2358>
   1310c:	ldr	r3, [fp, #-16]
   13110:	ldr	r2, [fp, #-20]	; 0xffffffec
   13114:	add	r3, r2, r3
   13118:	ldrb	r3, [r3]
   1311c:	mov	r0, r3
   13120:	bl	10cf4 <putchar@plt>
   13124:	ldr	r3, [fp, #-16]
   13128:	add	r3, r3, #1
   1312c:	str	r3, [fp, #-16]
   13130:	ldr	r3, [fp, #-16]
   13134:	cmp	r3, #15
   13138:	ble	1310c <__assert_fail@plt+0x2334>
   1313c:	b	13184 <__assert_fail@plt+0x23ac>
   13140:	mov	r0, #32
   13144:	bl	10cf4 <putchar@plt>
   13148:	mov	r3, #20
   1314c:	str	r3, [fp, #-16]
   13150:	b	13178 <__assert_fail@plt+0x23a0>
   13154:	ldr	r3, [fp, #-16]
   13158:	ldr	r2, [fp, #-20]	; 0xffffffec
   1315c:	add	r3, r2, r3
   13160:	ldrb	r3, [r3]
   13164:	mov	r0, r3
   13168:	bl	10cf4 <putchar@plt>
   1316c:	ldr	r3, [fp, #-16]
   13170:	add	r3, r3, #1
   13174:	str	r3, [fp, #-16]
   13178:	ldr	r3, [fp, #-16]
   1317c:	cmp	r3, #23
   13180:	ble	13154 <__assert_fail@plt+0x237c>
   13184:	mov	r0, #32
   13188:	bl	10cf4 <putchar@plt>
   1318c:	nop			; (mov r0, r0)
   13190:	sub	sp, fp, #8
   13194:	pop	{r4, fp, pc}
   13198:	muleq	r2, r0, r1
   1319c:	push	{fp, lr}
   131a0:	add	fp, sp, #4
   131a4:	sub	sp, sp, #32
   131a8:	str	r0, [fp, #-32]	; 0xffffffe0
   131ac:	sub	r3, fp, #24
   131b0:	mov	r1, r3
   131b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   131b8:	bl	12a8c <__assert_fail@plt+0x1cb4>
   131bc:	str	r0, [fp, #-20]	; 0xffffffec
   131c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   131c4:	cmp	r3, #0
   131c8:	beq	13318 <__assert_fail@plt+0x2540>
   131cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   131d0:	ldr	r3, [r3]
   131d4:	ldr	r3, [r3, #48]	; 0x30
   131d8:	cmp	r3, #0
   131dc:	beq	13240 <__assert_fail@plt+0x2468>
   131e0:	ldr	r3, [pc, #316]	; 13324 <__assert_fail@plt+0x254c>
   131e4:	ldr	r3, [r3]
   131e8:	cmp	r3, #0
   131ec:	bne	13200 <__assert_fail@plt+0x2428>
   131f0:	ldr	r3, [pc, #304]	; 13328 <__assert_fail@plt+0x2550>
   131f4:	ldr	r3, [r3]
   131f8:	cmp	r3, #0
   131fc:	beq	13240 <__assert_fail@plt+0x2468>
   13200:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13204:	ldr	r3, [r3, #4]
   13208:	ldr	r2, [pc, #284]	; 1332c <__assert_fail@plt+0x2554>
   1320c:	ldr	r2, [r2]
   13210:	add	r3, r3, r2
   13214:	sub	r2, r3, #1
   13218:	ldr	r3, [pc, #268]	; 1332c <__assert_fail@plt+0x2554>
   1321c:	ldr	r3, [r3]
   13220:	mov	r1, r3
   13224:	mov	r0, r2
   13228:	bl	1b1d8 <__assert_fail@plt+0xa400>
   1322c:	mov	r3, r0
   13230:	mov	r2, r3
   13234:	mov	r3, #0
   13238:	ldr	r0, [pc, #240]	; 13330 <__assert_fail@plt+0x2558>
   1323c:	bl	10b98 <printf@plt>
   13240:	mov	r3, #0
   13244:	str	r3, [fp, #-16]
   13248:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1324c:	ldr	r3, [r3]
   13250:	str	r3, [fp, #-8]
   13254:	b	13300 <__assert_fail@plt+0x2528>
   13258:	ldr	r3, [fp, #-8]
   1325c:	ldr	r3, [r3, #16]
   13260:	cmp	r3, #1
   13264:	beq	132f0 <__assert_fail@plt+0x2518>
   13268:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1326c:	ldr	r2, [fp, #-16]
   13270:	cmp	r2, r3
   13274:	blt	13288 <__assert_fail@plt+0x24b0>
   13278:	mov	r3, #0
   1327c:	str	r3, [fp, #-16]
   13280:	mov	r0, #10
   13284:	bl	10cf4 <putchar@plt>
   13288:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1328c:	ldr	r3, [r3, #32]
   13290:	mov	r1, r3
   13294:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13298:	ldr	r3, [r3, #20]
   1329c:	mov	r2, r3
   132a0:	ldr	r0, [fp, #-8]
   132a4:	bl	12ebc <__assert_fail@plt+0x20e4>
   132a8:	str	r0, [fp, #-12]
   132ac:	ldr	r3, [fp, #-16]
   132b0:	add	r3, r3, #1
   132b4:	str	r3, [fp, #-16]
   132b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   132bc:	ldr	r2, [fp, #-16]
   132c0:	cmp	r2, r3
   132c4:	bge	132f4 <__assert_fail@plt+0x251c>
   132c8:	b	132d4 <__assert_fail@plt+0x24fc>
   132cc:	mov	r0, #32
   132d0:	bl	10cf4 <putchar@plt>
   132d4:	ldr	r3, [fp, #-12]
   132d8:	add	r2, r3, #1
   132dc:	str	r2, [fp, #-12]
   132e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   132e4:	cmp	r3, r2
   132e8:	blt	132cc <__assert_fail@plt+0x24f4>
   132ec:	b	132f4 <__assert_fail@plt+0x251c>
   132f0:	nop			; (mov r0, r0)
   132f4:	ldr	r3, [fp, #-8]
   132f8:	ldr	r3, [r3, #8]
   132fc:	str	r3, [fp, #-8]
   13300:	ldr	r3, [fp, #-8]
   13304:	cmp	r3, #0
   13308:	bne	13258 <__assert_fail@plt+0x2480>
   1330c:	mov	r0, #10
   13310:	bl	10cf4 <putchar@plt>
   13314:	b	1331c <__assert_fail@plt+0x2544>
   13318:	nop			; (mov r0, r0)
   1331c:	sub	sp, fp, #4
   13320:	pop	{fp, pc}
   13324:	andeq	ip, r2, r8, lsl #3
   13328:	andeq	ip, r2, r4, asr r1
   1332c:	andeq	ip, r2, r4, lsr #3
   13330:	andeq	fp, r1, r8, lsr #20
   13334:	push	{fp, lr}
   13338:	add	fp, sp, #4
   1333c:	sub	sp, sp, #24
   13340:	str	r0, [fp, #-24]	; 0xffffffe8
   13344:	mov	r3, #0
   13348:	str	r3, [fp, #-16]
   1334c:	ldr	r3, [pc, #360]	; 134bc <__assert_fail@plt+0x26e4>
   13350:	ldr	r3, [r3]
   13354:	cmp	r3, #0
   13358:	beq	13374 <__assert_fail@plt+0x259c>
   1335c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13360:	ldr	r3, [r3, #32]
   13364:	add	r3, r3, #1
   13368:	ldr	r2, [fp, #-16]
   1336c:	add	r3, r2, r3
   13370:	str	r3, [fp, #-16]
   13374:	ldr	r3, [pc, #324]	; 134c0 <__assert_fail@plt+0x26e8>
   13378:	ldr	r3, [r3]
   1337c:	cmp	r3, #0
   13380:	beq	1339c <__assert_fail@plt+0x25c4>
   13384:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13388:	ldr	r3, [r3, #20]
   1338c:	add	r3, r3, #1
   13390:	ldr	r2, [fp, #-16]
   13394:	add	r3, r2, r3
   13398:	str	r3, [fp, #-16]
   1339c:	ldr	r3, [pc, #288]	; 134c4 <__assert_fail@plt+0x26ec>
   133a0:	ldr	r3, [r3]
   133a4:	cmp	r3, #0
   133a8:	beq	133b8 <__assert_fail@plt+0x25e0>
   133ac:	ldr	r3, [fp, #-16]
   133b0:	add	r3, r3, #1
   133b4:	str	r3, [fp, #-16]
   133b8:	mov	r3, #0
   133bc:	str	r3, [fp, #-12]
   133c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   133c4:	ldr	r3, [r3]
   133c8:	str	r3, [fp, #-8]
   133cc:	b	1349c <__assert_fail@plt+0x26c4>
   133d0:	ldr	r3, [fp, #-8]
   133d4:	ldr	r3, [r3, #16]
   133d8:	cmp	r3, #1
   133dc:	beq	1348c <__assert_fail@plt+0x26b4>
   133e0:	ldr	r3, [fp, #-12]
   133e4:	cmp	r3, #0
   133e8:	ble	13458 <__assert_fail@plt+0x2680>
   133ec:	mov	r0, #44	; 0x2c
   133f0:	bl	10cf4 <putchar@plt>
   133f4:	ldr	r3, [fp, #-12]
   133f8:	add	r3, r3, #1
   133fc:	str	r3, [fp, #-12]
   13400:	ldr	r3, [fp, #-12]
   13404:	add	r2, r3, #1
   13408:	ldr	r3, [fp, #-16]
   1340c:	add	r3, r2, r3
   13410:	mov	r2, r3
   13414:	ldr	r3, [fp, #-8]
   13418:	ldr	r3, [r3, #52]	; 0x34
   1341c:	add	r3, r2, r3
   13420:	ldr	r2, [pc, #160]	; 134c8 <__assert_fail@plt+0x26f0>
   13424:	ldr	r2, [r2]
   13428:	cmp	r3, r2
   1342c:	bcc	13444 <__assert_fail@plt+0x266c>
   13430:	mov	r0, #10
   13434:	bl	10cf4 <putchar@plt>
   13438:	mov	r3, #0
   1343c:	str	r3, [fp, #-12]
   13440:	b	13458 <__assert_fail@plt+0x2680>
   13444:	mov	r0, #32
   13448:	bl	10cf4 <putchar@plt>
   1344c:	ldr	r3, [fp, #-12]
   13450:	add	r3, r3, #1
   13454:	str	r3, [fp, #-12]
   13458:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1345c:	ldr	r3, [r3, #32]
   13460:	mov	r1, r3
   13464:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13468:	ldr	r3, [r3, #20]
   1346c:	mov	r2, r3
   13470:	ldr	r0, [fp, #-8]
   13474:	bl	12ebc <__assert_fail@plt+0x20e4>
   13478:	mov	r2, r0
   1347c:	ldr	r3, [fp, #-12]
   13480:	add	r3, r3, r2
   13484:	str	r3, [fp, #-12]
   13488:	b	13490 <__assert_fail@plt+0x26b8>
   1348c:	nop			; (mov r0, r0)
   13490:	ldr	r3, [fp, #-8]
   13494:	ldr	r3, [r3, #8]
   13498:	str	r3, [fp, #-8]
   1349c:	ldr	r3, [fp, #-8]
   134a0:	cmp	r3, #0
   134a4:	bne	133d0 <__assert_fail@plt+0x25f8>
   134a8:	mov	r0, #10
   134ac:	bl	10cf4 <putchar@plt>
   134b0:	nop			; (mov r0, r0)
   134b4:	sub	sp, fp, #4
   134b8:	pop	{fp, pc}
   134bc:	andeq	ip, r2, ip, ror #2
   134c0:	andeq	ip, r2, r4, asr r1
   134c4:	andeq	ip, r2, ip, ror r1
   134c8:	strdeq	ip, [r2], -r0
   134cc:	push	{fp, lr}
   134d0:	add	fp, sp, #4
   134d4:	sub	sp, sp, #8
   134d8:	str	r0, [fp, #-8]
   134dc:	ldr	r3, [fp, #-8]
   134e0:	and	r3, r3, #61440	; 0xf000
   134e4:	cmp	r3, #16384	; 0x4000
   134e8:	beq	13514 <__assert_fail@plt+0x273c>
   134ec:	cmp	r3, #16384	; 0x4000
   134f0:	bhi	13500 <__assert_fail@plt+0x2728>
   134f4:	cmp	r3, #4096	; 0x1000
   134f8:	beq	13524 <__assert_fail@plt+0x274c>
   134fc:	b	13554 <__assert_fail@plt+0x277c>
   13500:	cmp	r3, #40960	; 0xa000
   13504:	beq	13534 <__assert_fail@plt+0x275c>
   13508:	cmp	r3, #49152	; 0xc000
   1350c:	beq	13544 <__assert_fail@plt+0x276c>
   13510:	b	13554 <__assert_fail@plt+0x277c>
   13514:	mov	r0, #47	; 0x2f
   13518:	bl	10cf4 <putchar@plt>
   1351c:	mov	r3, #1
   13520:	b	13578 <__assert_fail@plt+0x27a0>
   13524:	mov	r0, #124	; 0x7c
   13528:	bl	10cf4 <putchar@plt>
   1352c:	mov	r3, #1
   13530:	b	13578 <__assert_fail@plt+0x27a0>
   13534:	mov	r0, #64	; 0x40
   13538:	bl	10cf4 <putchar@plt>
   1353c:	mov	r3, #1
   13540:	b	13578 <__assert_fail@plt+0x27a0>
   13544:	mov	r0, #61	; 0x3d
   13548:	bl	10cf4 <putchar@plt>
   1354c:	mov	r3, #1
   13550:	b	13578 <__assert_fail@plt+0x27a0>
   13554:	ldr	r3, [fp, #-8]
   13558:	and	r3, r3, #73	; 0x49
   1355c:	cmp	r3, #0
   13560:	beq	13574 <__assert_fail@plt+0x279c>
   13564:	mov	r0, #42	; 0x2a
   13568:	bl	10cf4 <putchar@plt>
   1356c:	mov	r3, #1
   13570:	b	13578 <__assert_fail@plt+0x27a0>
   13574:	mov	r3, #0
   13578:	mov	r0, r3
   1357c:	sub	sp, fp, #4
   13580:	pop	{fp, pc}
   13584:	push	{r4, fp, lr}
   13588:	add	fp, sp, #8
   1358c:	sub	sp, sp, #8192	; 0x2000
   13590:	sub	sp, sp, #28
   13594:	sub	r3, fp, #8192	; 0x2000
   13598:	sub	r3, r3, #12
   1359c:	str	r0, [r3, #-12]
   135a0:	sub	r3, fp, #8192	; 0x2000
   135a4:	sub	r3, r3, #12
   135a8:	ldr	r3, [r3, #-12]
   135ac:	ldr	r3, [r3, #48]	; 0x30
   135b0:	cmp	r3, #0
   135b4:	bne	135e4 <__assert_fail@plt+0x280c>
   135b8:	sub	r3, fp, #8192	; 0x2000
   135bc:	sub	r3, r3, #12
   135c0:	ldr	r3, [r3, #-12]
   135c4:	add	r3, r3, #168	; 0xa8
   135c8:	sub	r0, fp, #4096	; 0x1000
   135cc:	sub	r0, r0, #12
   135d0:	sub	r0, r0, #4
   135d4:	ldr	r2, [pc, #256]	; 136dc <__assert_fail@plt+0x2904>
   135d8:	mov	r1, #4096	; 0x1000
   135dc:	bl	10cdc <snprintf@plt>
   135e0:	b	13628 <__assert_fail@plt+0x2850>
   135e4:	sub	r3, fp, #8192	; 0x2000
   135e8:	sub	r3, r3, #12
   135ec:	ldr	r3, [r3, #-12]
   135f0:	ldr	r3, [r3, #4]
   135f4:	ldr	r2, [r3, #24]
   135f8:	sub	r3, fp, #8192	; 0x2000
   135fc:	sub	r3, r3, #12
   13600:	ldr	r3, [r3, #-12]
   13604:	add	r3, r3, #168	; 0xa8
   13608:	sub	r0, fp, #4096	; 0x1000
   1360c:	sub	r0, r0, #12
   13610:	sub	r0, r0, #4
   13614:	str	r3, [sp]
   13618:	mov	r3, r2
   1361c:	ldr	r2, [pc, #188]	; 136e0 <__assert_fail@plt+0x2908>
   13620:	mov	r1, #4096	; 0x1000
   13624:	bl	10cdc <snprintf@plt>
   13628:	sub	r1, fp, #8192	; 0x2000
   1362c:	sub	r1, r1, #12
   13630:	sub	r1, r1, #4
   13634:	sub	r3, fp, #4096	; 0x1000
   13638:	sub	r3, r3, #12
   1363c:	sub	r3, r3, #4
   13640:	ldr	r2, [pc, #156]	; 136e4 <__assert_fail@plt+0x290c>
   13644:	mov	r0, r3
   13648:	bl	10c1c <readlink@plt>
   1364c:	str	r0, [fp, #-16]
   13650:	ldr	r3, [fp, #-16]
   13654:	cmn	r3, #1
   13658:	bne	13698 <__assert_fail@plt+0x28c0>
   1365c:	ldr	r3, [pc, #132]	; 136e8 <__assert_fail@plt+0x2910>
   13660:	ldr	r4, [r3]
   13664:	bl	10cd0 <__errno_location@plt>
   13668:	mov	r3, r0
   1366c:	ldr	r3, [r3]
   13670:	mov	r0, r3
   13674:	bl	10c7c <strerror@plt>
   13678:	mov	r3, r0
   1367c:	sub	r2, fp, #4096	; 0x1000
   13680:	sub	r2, r2, #12
   13684:	sub	r2, r2, #4
   13688:	ldr	r1, [pc, #92]	; 136ec <__assert_fail@plt+0x2914>
   1368c:	mov	r0, r4
   13690:	bl	10cc4 <fprintf@plt>
   13694:	b	136d4 <__assert_fail@plt+0x28fc>
   13698:	sub	r3, fp, #8192	; 0x2000
   1369c:	sub	r3, r3, #12
   136a0:	mov	r2, r3
   136a4:	ldr	r3, [fp, #-16]
   136a8:	add	r3, r2, r3
   136ac:	sub	r3, r3, #4
   136b0:	mov	r2, #0
   136b4:	strb	r2, [r3]
   136b8:	ldr	r0, [pc, #48]	; 136f0 <__assert_fail@plt+0x2918>
   136bc:	bl	10b98 <printf@plt>
   136c0:	sub	r3, fp, #8192	; 0x2000
   136c4:	sub	r3, r3, #12
   136c8:	sub	r3, r3, #4
   136cc:	mov	r0, r3
   136d0:	bl	136f4 <__assert_fail@plt+0x291c>
   136d4:	sub	sp, fp, #8
   136d8:	pop	{r4, fp, pc}
   136dc:	andeq	fp, r1, r4, lsr sl
   136e0:	andeq	fp, r1, r8, lsr sl
   136e4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   136e8:	andeq	ip, r2, r0, lsl r1
   136ec:	andeq	fp, r1, r0, asr #20
   136f0:	andeq	fp, r1, r0, asr sl
   136f4:	push	{fp, lr}
   136f8:	add	fp, sp, #4
   136fc:	sub	sp, sp, #16
   13700:	str	r0, [fp, #-16]
   13704:	mov	r3, #0
   13708:	str	r3, [fp, #-8]
   1370c:	b	1377c <__assert_fail@plt+0x29a4>
   13710:	bl	10c94 <__ctype_b_loc@plt>
   13714:	mov	r3, r0
   13718:	ldr	r2, [r3]
   1371c:	ldr	r3, [fp, #-16]
   13720:	ldrb	r3, [r3]
   13724:	lsl	r3, r3, #1
   13728:	add	r3, r2, r3
   1372c:	ldrh	r3, [r3]
   13730:	and	r3, r3, #16384	; 0x4000
   13734:	cmp	r3, #0
   13738:	bne	1374c <__assert_fail@plt+0x2974>
   1373c:	ldr	r3, [pc, #88]	; 1379c <__assert_fail@plt+0x29c4>
   13740:	ldr	r3, [r3]
   13744:	cmp	r3, #0
   13748:	bne	13758 <__assert_fail@plt+0x2980>
   1374c:	ldr	r3, [fp, #-16]
   13750:	ldrb	r3, [r3]
   13754:	b	1375c <__assert_fail@plt+0x2984>
   13758:	mov	r3, #63	; 0x3f
   1375c:	mov	r0, r3
   13760:	bl	10cf4 <putchar@plt>
   13764:	ldr	r3, [fp, #-8]
   13768:	add	r3, r3, #1
   1376c:	str	r3, [fp, #-8]
   13770:	ldr	r3, [fp, #-16]
   13774:	add	r3, r3, #1
   13778:	str	r3, [fp, #-16]
   1377c:	ldr	r3, [fp, #-16]
   13780:	ldrb	r3, [r3]
   13784:	cmp	r3, #0
   13788:	bne	13710 <__assert_fail@plt+0x2938>
   1378c:	ldr	r3, [fp, #-8]
   13790:	mov	r0, r3
   13794:	sub	sp, fp, #4
   13798:	pop	{fp, pc}
   1379c:			; <UNDEFINED> instruction: 0x0002c1b0
   137a0:	push	{fp, lr}
   137a4:	add	fp, sp, #4
   137a8:	ldr	r3, [pc, #28]	; 137cc <__assert_fail@plt+0x29f4>
   137ac:	ldr	r3, [r3]
   137b0:	mov	r2, #51	; 0x33
   137b4:	mov	r1, #1
   137b8:	ldr	r0, [pc, #16]	; 137d0 <__assert_fail@plt+0x29f8>
   137bc:	bl	10c28 <fwrite@plt>
   137c0:	mov	r3, #1
   137c4:	mov	r0, r3
   137c8:	pop	{fp, pc}
   137cc:	andeq	ip, r2, r0, lsl r1
   137d0:	andeq	fp, r1, r8, asr sl
   137d4:	push	{fp, lr}
   137d8:	add	fp, sp, #4
   137dc:	sub	sp, sp, #8
   137e0:	str	r0, [fp, #-8]
   137e4:	str	r1, [fp, #-12]
   137e8:	ldr	r3, [fp, #-8]
   137ec:	add	r2, r3, #168	; 0xa8
   137f0:	ldr	r3, [fp, #-12]
   137f4:	add	r3, r3, #168	; 0xa8
   137f8:	mov	r1, r3
   137fc:	mov	r0, r2
   13800:	bl	10b80 <strcmp@plt>
   13804:	mov	r3, r0
   13808:	mov	r0, r3
   1380c:	sub	sp, fp, #4
   13810:	pop	{fp, pc}
   13814:	push	{fp, lr}
   13818:	add	fp, sp, #4
   1381c:	sub	sp, sp, #8
   13820:	str	r0, [fp, #-8]
   13824:	str	r1, [fp, #-12]
   13828:	ldr	r3, [fp, #-12]
   1382c:	add	r2, r3, #168	; 0xa8
   13830:	ldr	r3, [fp, #-8]
   13834:	add	r3, r3, #168	; 0xa8
   13838:	mov	r1, r3
   1383c:	mov	r0, r2
   13840:	bl	10b80 <strcmp@plt>
   13844:	mov	r3, r0
   13848:	mov	r0, r3
   1384c:	sub	sp, fp, #4
   13850:	pop	{fp, pc}
   13854:	push	{fp, lr}
   13858:	add	fp, sp, #4
   1385c:	sub	sp, sp, #8
   13860:	str	r0, [fp, #-8]
   13864:	str	r1, [fp, #-12]
   13868:	ldr	r3, [fp, #-12]
   1386c:	ldr	r2, [r3, #144]	; 0x90
   13870:	ldr	r3, [fp, #-8]
   13874:	ldr	r3, [r3, #144]	; 0x90
   13878:	cmp	r2, r3
   1387c:	bgt	138b0 <__assert_fail@plt+0x2ad8>
   13880:	ldr	r3, [fp, #-12]
   13884:	ldr	r2, [r3, #144]	; 0x90
   13888:	ldr	r3, [fp, #-8]
   1388c:	ldr	r3, [r3, #144]	; 0x90
   13890:	cmp	r2, r3
   13894:	bne	138b8 <__assert_fail@plt+0x2ae0>
   13898:	ldr	r3, [fp, #-12]
   1389c:	ldr	r2, [r3, #148]	; 0x94
   138a0:	ldr	r3, [fp, #-8]
   138a4:	ldr	r3, [r3, #148]	; 0x94
   138a8:	cmp	r2, r3
   138ac:	ble	138b8 <__assert_fail@plt+0x2ae0>
   138b0:	mov	r3, #1
   138b4:	b	13918 <__assert_fail@plt+0x2b40>
   138b8:	ldr	r3, [fp, #-12]
   138bc:	ldr	r2, [r3, #144]	; 0x90
   138c0:	ldr	r3, [fp, #-8]
   138c4:	ldr	r3, [r3, #144]	; 0x90
   138c8:	cmp	r2, r3
   138cc:	blt	13900 <__assert_fail@plt+0x2b28>
   138d0:	ldr	r3, [fp, #-12]
   138d4:	ldr	r2, [r3, #144]	; 0x90
   138d8:	ldr	r3, [fp, #-8]
   138dc:	ldr	r3, [r3, #144]	; 0x90
   138e0:	cmp	r2, r3
   138e4:	bne	13908 <__assert_fail@plt+0x2b30>
   138e8:	ldr	r3, [fp, #-12]
   138ec:	ldr	r2, [r3, #148]	; 0x94
   138f0:	ldr	r3, [fp, #-8]
   138f4:	ldr	r3, [r3, #148]	; 0x94
   138f8:	cmp	r2, r3
   138fc:	bge	13908 <__assert_fail@plt+0x2b30>
   13900:	mvn	r3, #0
   13904:	b	13918 <__assert_fail@plt+0x2b40>
   13908:	ldr	r1, [fp, #-12]
   1390c:	ldr	r0, [fp, #-8]
   13910:	bl	137d4 <__assert_fail@plt+0x29fc>
   13914:	mov	r3, r0
   13918:	mov	r0, r3
   1391c:	sub	sp, fp, #4
   13920:	pop	{fp, pc}
   13924:	push	{fp, lr}
   13928:	add	fp, sp, #4
   1392c:	sub	sp, sp, #8
   13930:	str	r0, [fp, #-8]
   13934:	str	r1, [fp, #-12]
   13938:	ldr	r1, [fp, #-12]
   1393c:	ldr	r0, [fp, #-8]
   13940:	bl	13854 <__assert_fail@plt+0x2a7c>
   13944:	mov	r3, r0
   13948:	rsb	r3, r3, #0
   1394c:	mov	r0, r3
   13950:	sub	sp, fp, #4
   13954:	pop	{fp, pc}
   13958:	push	{fp, lr}
   1395c:	add	fp, sp, #4
   13960:	sub	sp, sp, #8
   13964:	str	r0, [fp, #-8]
   13968:	str	r1, [fp, #-12]
   1396c:	ldr	r3, [fp, #-12]
   13970:	ldr	r2, [r3, #136]	; 0x88
   13974:	ldr	r3, [fp, #-8]
   13978:	ldr	r3, [r3, #136]	; 0x88
   1397c:	cmp	r2, r3
   13980:	bgt	139b4 <__assert_fail@plt+0x2bdc>
   13984:	ldr	r3, [fp, #-12]
   13988:	ldr	r2, [r3, #136]	; 0x88
   1398c:	ldr	r3, [fp, #-8]
   13990:	ldr	r3, [r3, #136]	; 0x88
   13994:	cmp	r2, r3
   13998:	bne	139bc <__assert_fail@plt+0x2be4>
   1399c:	ldr	r3, [fp, #-12]
   139a0:	ldr	r2, [r3, #140]	; 0x8c
   139a4:	ldr	r3, [fp, #-8]
   139a8:	ldr	r3, [r3, #140]	; 0x8c
   139ac:	cmp	r2, r3
   139b0:	ble	139bc <__assert_fail@plt+0x2be4>
   139b4:	mov	r3, #1
   139b8:	b	13a1c <__assert_fail@plt+0x2c44>
   139bc:	ldr	r3, [fp, #-12]
   139c0:	ldr	r2, [r3, #136]	; 0x88
   139c4:	ldr	r3, [fp, #-8]
   139c8:	ldr	r3, [r3, #136]	; 0x88
   139cc:	cmp	r2, r3
   139d0:	blt	13a04 <__assert_fail@plt+0x2c2c>
   139d4:	ldr	r3, [fp, #-12]
   139d8:	ldr	r2, [r3, #136]	; 0x88
   139dc:	ldr	r3, [fp, #-8]
   139e0:	ldr	r3, [r3, #136]	; 0x88
   139e4:	cmp	r2, r3
   139e8:	bne	13a0c <__assert_fail@plt+0x2c34>
   139ec:	ldr	r3, [fp, #-12]
   139f0:	ldr	r2, [r3, #140]	; 0x8c
   139f4:	ldr	r3, [fp, #-8]
   139f8:	ldr	r3, [r3, #140]	; 0x8c
   139fc:	cmp	r2, r3
   13a00:	bge	13a0c <__assert_fail@plt+0x2c34>
   13a04:	mvn	r3, #0
   13a08:	b	13a1c <__assert_fail@plt+0x2c44>
   13a0c:	ldr	r1, [fp, #-12]
   13a10:	ldr	r0, [fp, #-8]
   13a14:	bl	137d4 <__assert_fail@plt+0x29fc>
   13a18:	mov	r3, r0
   13a1c:	mov	r0, r3
   13a20:	sub	sp, fp, #4
   13a24:	pop	{fp, pc}
   13a28:	push	{fp, lr}
   13a2c:	add	fp, sp, #4
   13a30:	sub	sp, sp, #8
   13a34:	str	r0, [fp, #-8]
   13a38:	str	r1, [fp, #-12]
   13a3c:	ldr	r1, [fp, #-12]
   13a40:	ldr	r0, [fp, #-8]
   13a44:	bl	13958 <__assert_fail@plt+0x2b80>
   13a48:	mov	r3, r0
   13a4c:	rsb	r3, r3, #0
   13a50:	mov	r0, r3
   13a54:	sub	sp, fp, #4
   13a58:	pop	{fp, pc}
   13a5c:	push	{fp, lr}
   13a60:	add	fp, sp, #4
   13a64:	sub	sp, sp, #8
   13a68:	str	r0, [fp, #-8]
   13a6c:	str	r1, [fp, #-12]
   13a70:	ldr	r3, [fp, #-12]
   13a74:	ldr	r2, [r3, #152]	; 0x98
   13a78:	ldr	r3, [fp, #-8]
   13a7c:	ldr	r3, [r3, #152]	; 0x98
   13a80:	cmp	r2, r3
   13a84:	bgt	13ab8 <__assert_fail@plt+0x2ce0>
   13a88:	ldr	r3, [fp, #-12]
   13a8c:	ldr	r2, [r3, #152]	; 0x98
   13a90:	ldr	r3, [fp, #-8]
   13a94:	ldr	r3, [r3, #152]	; 0x98
   13a98:	cmp	r2, r3
   13a9c:	bne	13ac0 <__assert_fail@plt+0x2ce8>
   13aa0:	ldr	r3, [fp, #-12]
   13aa4:	ldr	r2, [r3, #156]	; 0x9c
   13aa8:	ldr	r3, [fp, #-8]
   13aac:	ldr	r3, [r3, #156]	; 0x9c
   13ab0:	cmp	r2, r3
   13ab4:	ble	13ac0 <__assert_fail@plt+0x2ce8>
   13ab8:	mov	r3, #1
   13abc:	b	13b20 <__assert_fail@plt+0x2d48>
   13ac0:	ldr	r3, [fp, #-12]
   13ac4:	ldr	r2, [r3, #152]	; 0x98
   13ac8:	ldr	r3, [fp, #-8]
   13acc:	ldr	r3, [r3, #152]	; 0x98
   13ad0:	cmp	r2, r3
   13ad4:	blt	13b08 <__assert_fail@plt+0x2d30>
   13ad8:	ldr	r3, [fp, #-12]
   13adc:	ldr	r2, [r3, #152]	; 0x98
   13ae0:	ldr	r3, [fp, #-8]
   13ae4:	ldr	r3, [r3, #152]	; 0x98
   13ae8:	cmp	r2, r3
   13aec:	bne	13b10 <__assert_fail@plt+0x2d38>
   13af0:	ldr	r3, [fp, #-12]
   13af4:	ldr	r2, [r3, #156]	; 0x9c
   13af8:	ldr	r3, [fp, #-8]
   13afc:	ldr	r3, [r3, #156]	; 0x9c
   13b00:	cmp	r2, r3
   13b04:	bge	13b10 <__assert_fail@plt+0x2d38>
   13b08:	mvn	r3, #0
   13b0c:	b	13b20 <__assert_fail@plt+0x2d48>
   13b10:	ldr	r1, [fp, #-12]
   13b14:	ldr	r0, [fp, #-8]
   13b18:	bl	137d4 <__assert_fail@plt+0x29fc>
   13b1c:	mov	r3, r0
   13b20:	mov	r0, r3
   13b24:	sub	sp, fp, #4
   13b28:	pop	{fp, pc}
   13b2c:	push	{fp, lr}
   13b30:	add	fp, sp, #4
   13b34:	sub	sp, sp, #8
   13b38:	str	r0, [fp, #-8]
   13b3c:	str	r1, [fp, #-12]
   13b40:	ldr	r1, [fp, #-12]
   13b44:	ldr	r0, [fp, #-8]
   13b48:	bl	13a5c <__assert_fail@plt+0x2c84>
   13b4c:	mov	r3, r0
   13b50:	rsb	r3, r3, #0
   13b54:	mov	r0, r3
   13b58:	sub	sp, fp, #4
   13b5c:	pop	{fp, pc}
   13b60:	push	{fp, lr}
   13b64:	add	fp, sp, #4
   13b68:	sub	sp, sp, #8
   13b6c:	str	r0, [fp, #-8]
   13b70:	str	r1, [fp, #-12]
   13b74:	ldr	r3, [fp, #-12]
   13b78:	ldrd	r2, [r3, #112]	; 0x70
   13b7c:	ldr	r1, [fp, #-8]
   13b80:	ldrd	r0, [r1, #112]	; 0x70
   13b84:	cmp	r0, r2
   13b88:	sbcs	r3, r1, r3
   13b8c:	bge	13b98 <__assert_fail@plt+0x2dc0>
   13b90:	mov	r3, #1
   13b94:	b	13bcc <__assert_fail@plt+0x2df4>
   13b98:	ldr	r3, [fp, #-12]
   13b9c:	ldrd	r0, [r3, #112]	; 0x70
   13ba0:	ldr	r3, [fp, #-8]
   13ba4:	ldrd	r2, [r3, #112]	; 0x70
   13ba8:	cmp	r0, r2
   13bac:	sbcs	r3, r1, r3
   13bb0:	bge	13bbc <__assert_fail@plt+0x2de4>
   13bb4:	mvn	r3, #0
   13bb8:	b	13bcc <__assert_fail@plt+0x2df4>
   13bbc:	ldr	r1, [fp, #-12]
   13bc0:	ldr	r0, [fp, #-8]
   13bc4:	bl	137d4 <__assert_fail@plt+0x29fc>
   13bc8:	mov	r3, r0
   13bcc:	mov	r0, r3
   13bd0:	sub	sp, fp, #4
   13bd4:	pop	{fp, pc}
   13bd8:	push	{fp, lr}
   13bdc:	add	fp, sp, #4
   13be0:	sub	sp, sp, #8
   13be4:	str	r0, [fp, #-8]
   13be8:	str	r1, [fp, #-12]
   13bec:	ldr	r1, [fp, #-12]
   13bf0:	ldr	r0, [fp, #-8]
   13bf4:	bl	13b60 <__assert_fail@plt+0x2d88>
   13bf8:	mov	r3, r0
   13bfc:	rsb	r3, r3, #0
   13c00:	mov	r0, r3
   13c04:	sub	sp, fp, #4
   13c08:	pop	{fp, pc}
   13c0c:	push	{fp}		; (str fp, [sp, #-4]!)
   13c10:	add	fp, sp, #0
   13c14:	sub	sp, sp, #12
   13c18:	str	r0, [fp, #-8]
   13c1c:	ldr	r3, [fp, #-8]
   13c20:	and	r3, r3, #61440	; 0xf000
   13c24:	cmp	r3, #32768	; 0x8000
   13c28:	bne	13c34 <__assert_fail@plt+0x2e5c>
   13c2c:	mov	r3, #45	; 0x2d
   13c30:	b	13cc8 <__assert_fail@plt+0x2ef0>
   13c34:	ldr	r3, [fp, #-8]
   13c38:	and	r3, r3, #61440	; 0xf000
   13c3c:	cmp	r3, #16384	; 0x4000
   13c40:	bne	13c4c <__assert_fail@plt+0x2e74>
   13c44:	mov	r3, #100	; 0x64
   13c48:	b	13cc8 <__assert_fail@plt+0x2ef0>
   13c4c:	ldr	r3, [fp, #-8]
   13c50:	and	r3, r3, #61440	; 0xf000
   13c54:	cmp	r3, #24576	; 0x6000
   13c58:	bne	13c64 <__assert_fail@plt+0x2e8c>
   13c5c:	mov	r3, #98	; 0x62
   13c60:	b	13cc8 <__assert_fail@plt+0x2ef0>
   13c64:	ldr	r3, [fp, #-8]
   13c68:	and	r3, r3, #61440	; 0xf000
   13c6c:	cmp	r3, #8192	; 0x2000
   13c70:	bne	13c7c <__assert_fail@plt+0x2ea4>
   13c74:	mov	r3, #99	; 0x63
   13c78:	b	13cc8 <__assert_fail@plt+0x2ef0>
   13c7c:	ldr	r3, [fp, #-8]
   13c80:	and	r3, r3, #61440	; 0xf000
   13c84:	cmp	r3, #40960	; 0xa000
   13c88:	bne	13c94 <__assert_fail@plt+0x2ebc>
   13c8c:	mov	r3, #108	; 0x6c
   13c90:	b	13cc8 <__assert_fail@plt+0x2ef0>
   13c94:	ldr	r3, [fp, #-8]
   13c98:	and	r3, r3, #61440	; 0xf000
   13c9c:	cmp	r3, #4096	; 0x1000
   13ca0:	bne	13cac <__assert_fail@plt+0x2ed4>
   13ca4:	mov	r3, #112	; 0x70
   13ca8:	b	13cc8 <__assert_fail@plt+0x2ef0>
   13cac:	ldr	r3, [fp, #-8]
   13cb0:	and	r3, r3, #61440	; 0xf000
   13cb4:	cmp	r3, #49152	; 0xc000
   13cb8:	bne	13cc4 <__assert_fail@plt+0x2eec>
   13cbc:	mov	r3, #115	; 0x73
   13cc0:	b	13cc8 <__assert_fail@plt+0x2ef0>
   13cc4:	mov	r3, #63	; 0x3f
   13cc8:	mov	r0, r3
   13ccc:	add	sp, fp, #0
   13cd0:	pop	{fp}		; (ldr fp, [sp], #4)
   13cd4:	bx	lr
   13cd8:	push	{fp, lr}
   13cdc:	add	fp, sp, #4
   13ce0:	sub	sp, sp, #8
   13ce4:	str	r0, [fp, #-8]
   13ce8:	str	r1, [fp, #-12]
   13cec:	ldr	r0, [fp, #-8]
   13cf0:	bl	13c0c <__assert_fail@plt+0x2e34>
   13cf4:	mov	r3, r0
   13cf8:	mov	r2, r3
   13cfc:	ldr	r3, [fp, #-12]
   13d00:	strb	r2, [r3]
   13d04:	ldr	r3, [fp, #-12]
   13d08:	add	r3, r3, #1
   13d0c:	ldr	r2, [fp, #-8]
   13d10:	and	r2, r2, #256	; 0x100
   13d14:	cmp	r2, #0
   13d18:	beq	13d24 <__assert_fail@plt+0x2f4c>
   13d1c:	mov	r2, #114	; 0x72
   13d20:	b	13d28 <__assert_fail@plt+0x2f50>
   13d24:	mov	r2, #45	; 0x2d
   13d28:	strb	r2, [r3]
   13d2c:	ldr	r3, [fp, #-12]
   13d30:	add	r3, r3, #2
   13d34:	ldr	r2, [fp, #-8]
   13d38:	and	r2, r2, #128	; 0x80
   13d3c:	cmp	r2, #0
   13d40:	beq	13d4c <__assert_fail@plt+0x2f74>
   13d44:	mov	r2, #119	; 0x77
   13d48:	b	13d50 <__assert_fail@plt+0x2f78>
   13d4c:	mov	r2, #45	; 0x2d
   13d50:	strb	r2, [r3]
   13d54:	ldr	r3, [fp, #-12]
   13d58:	add	r2, r3, #3
   13d5c:	ldr	r3, [fp, #-8]
   13d60:	and	r3, r3, #2048	; 0x800
   13d64:	cmp	r3, #0
   13d68:	beq	13d8c <__assert_fail@plt+0x2fb4>
   13d6c:	ldr	r3, [fp, #-8]
   13d70:	and	r3, r3, #64	; 0x40
   13d74:	cmp	r3, #0
   13d78:	beq	13d84 <__assert_fail@plt+0x2fac>
   13d7c:	mov	r3, #115	; 0x73
   13d80:	b	13da8 <__assert_fail@plt+0x2fd0>
   13d84:	mov	r3, #83	; 0x53
   13d88:	b	13da8 <__assert_fail@plt+0x2fd0>
   13d8c:	ldr	r3, [fp, #-8]
   13d90:	and	r3, r3, #64	; 0x40
   13d94:	cmp	r3, #0
   13d98:	beq	13da4 <__assert_fail@plt+0x2fcc>
   13d9c:	mov	r3, #120	; 0x78
   13da0:	b	13da8 <__assert_fail@plt+0x2fd0>
   13da4:	mov	r3, #45	; 0x2d
   13da8:	strb	r3, [r2]
   13dac:	ldr	r3, [fp, #-12]
   13db0:	add	r3, r3, #4
   13db4:	ldr	r2, [fp, #-8]
   13db8:	and	r2, r2, #32
   13dbc:	cmp	r2, #0
   13dc0:	beq	13dcc <__assert_fail@plt+0x2ff4>
   13dc4:	mov	r2, #114	; 0x72
   13dc8:	b	13dd0 <__assert_fail@plt+0x2ff8>
   13dcc:	mov	r2, #45	; 0x2d
   13dd0:	strb	r2, [r3]
   13dd4:	ldr	r3, [fp, #-12]
   13dd8:	add	r3, r3, #5
   13ddc:	ldr	r2, [fp, #-8]
   13de0:	and	r2, r2, #16
   13de4:	cmp	r2, #0
   13de8:	beq	13df4 <__assert_fail@plt+0x301c>
   13dec:	mov	r2, #119	; 0x77
   13df0:	b	13df8 <__assert_fail@plt+0x3020>
   13df4:	mov	r2, #45	; 0x2d
   13df8:	strb	r2, [r3]
   13dfc:	ldr	r3, [fp, #-12]
   13e00:	add	r2, r3, #6
   13e04:	ldr	r3, [fp, #-8]
   13e08:	and	r3, r3, #1024	; 0x400
   13e0c:	cmp	r3, #0
   13e10:	beq	13e34 <__assert_fail@plt+0x305c>
   13e14:	ldr	r3, [fp, #-8]
   13e18:	and	r3, r3, #8
   13e1c:	cmp	r3, #0
   13e20:	beq	13e2c <__assert_fail@plt+0x3054>
   13e24:	mov	r3, #115	; 0x73
   13e28:	b	13e50 <__assert_fail@plt+0x3078>
   13e2c:	mov	r3, #83	; 0x53
   13e30:	b	13e50 <__assert_fail@plt+0x3078>
   13e34:	ldr	r3, [fp, #-8]
   13e38:	and	r3, r3, #8
   13e3c:	cmp	r3, #0
   13e40:	beq	13e4c <__assert_fail@plt+0x3074>
   13e44:	mov	r3, #120	; 0x78
   13e48:	b	13e50 <__assert_fail@plt+0x3078>
   13e4c:	mov	r3, #45	; 0x2d
   13e50:	strb	r3, [r2]
   13e54:	ldr	r3, [fp, #-12]
   13e58:	add	r3, r3, #7
   13e5c:	ldr	r2, [fp, #-8]
   13e60:	and	r2, r2, #4
   13e64:	cmp	r2, #0
   13e68:	beq	13e74 <__assert_fail@plt+0x309c>
   13e6c:	mov	r2, #114	; 0x72
   13e70:	b	13e78 <__assert_fail@plt+0x30a0>
   13e74:	mov	r2, #45	; 0x2d
   13e78:	strb	r2, [r3]
   13e7c:	ldr	r3, [fp, #-12]
   13e80:	add	r3, r3, #8
   13e84:	ldr	r2, [fp, #-8]
   13e88:	and	r2, r2, #2
   13e8c:	cmp	r2, #0
   13e90:	beq	13e9c <__assert_fail@plt+0x30c4>
   13e94:	mov	r2, #119	; 0x77
   13e98:	b	13ea0 <__assert_fail@plt+0x30c8>
   13e9c:	mov	r2, #45	; 0x2d
   13ea0:	strb	r2, [r3]
   13ea4:	ldr	r3, [fp, #-12]
   13ea8:	add	r2, r3, #9
   13eac:	ldr	r3, [fp, #-8]
   13eb0:	and	r3, r3, #512	; 0x200
   13eb4:	cmp	r3, #0
   13eb8:	beq	13edc <__assert_fail@plt+0x3104>
   13ebc:	ldr	r3, [fp, #-8]
   13ec0:	and	r3, r3, #1
   13ec4:	cmp	r3, #0
   13ec8:	beq	13ed4 <__assert_fail@plt+0x30fc>
   13ecc:	mov	r3, #116	; 0x74
   13ed0:	b	13ef8 <__assert_fail@plt+0x3120>
   13ed4:	mov	r3, #84	; 0x54
   13ed8:	b	13ef8 <__assert_fail@plt+0x3120>
   13edc:	ldr	r3, [fp, #-8]
   13ee0:	and	r3, r3, #1
   13ee4:	cmp	r3, #0
   13ee8:	beq	13ef4 <__assert_fail@plt+0x311c>
   13eec:	mov	r3, #120	; 0x78
   13ef0:	b	13ef8 <__assert_fail@plt+0x3120>
   13ef4:	mov	r3, #45	; 0x2d
   13ef8:	strb	r3, [r2]
   13efc:	ldr	r3, [fp, #-12]
   13f00:	add	r3, r3, #10
   13f04:	mov	r2, #32
   13f08:	strb	r2, [r3]
   13f0c:	ldr	r3, [fp, #-12]
   13f10:	add	r3, r3, #11
   13f14:	mov	r2, #0
   13f18:	strb	r2, [r3]
   13f1c:	nop			; (mov r0, r0)
   13f20:	sub	sp, fp, #4
   13f24:	pop	{fp, pc}
   13f28:	push	{fp, lr}
   13f2c:	add	fp, sp, #4
   13f30:	sub	sp, sp, #8
   13f34:	str	r0, [fp, #-8]
   13f38:	str	r1, [fp, #-12]
   13f3c:	ldr	r3, [fp, #-8]
   13f40:	ldr	r3, [r3, #16]
   13f44:	ldr	r1, [fp, #-12]
   13f48:	mov	r0, r3
   13f4c:	bl	13cd8 <__assert_fail@plt+0x2f00>
   13f50:	nop			; (mov r0, r0)
   13f54:	sub	sp, fp, #4
   13f58:	pop	{fp, pc}
   13f5c:	push	{r4, fp, lr}
   13f60:	add	fp, sp, #8
   13f64:	sub	sp, sp, #20
   13f68:	str	r0, [fp, #-24]	; 0xffffffe8
   13f6c:	bl	10cd0 <__errno_location@plt>
   13f70:	mov	r3, r0
   13f74:	ldr	r3, [r3]
   13f78:	str	r3, [fp, #-20]	; 0xffffffec
   13f7c:	bl	10cd0 <__errno_location@plt>
   13f80:	mov	r3, r0
   13f84:	ldr	r3, [r3]
   13f88:	str	r3, [fp, #-16]
   13f8c:	bl	10cd0 <__errno_location@plt>
   13f90:	mov	r2, r0
   13f94:	mov	r3, #0
   13f98:	str	r3, [r2]
   13f9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13fa0:	bl	10bbc <free@plt>
   13fa4:	bl	10cd0 <__errno_location@plt>
   13fa8:	mov	r4, r0
   13fac:	bl	10cd0 <__errno_location@plt>
   13fb0:	mov	r3, r0
   13fb4:	ldr	r3, [r3]
   13fb8:	cmp	r3, #0
   13fbc:	moveq	r3, #1
   13fc0:	movne	r3, #0
   13fc4:	uxtb	r3, r3
   13fc8:	lsl	r3, r3, #2
   13fcc:	sub	r2, fp, #12
   13fd0:	add	r3, r2, r3
   13fd4:	ldr	r3, [r3, #-8]
   13fd8:	str	r3, [r4]
   13fdc:	nop			; (mov r0, r0)
   13fe0:	sub	sp, fp, #8
   13fe4:	pop	{r4, fp, pc}
   13fe8:	push	{fp}		; (str fp, [sp, #-4]!)
   13fec:	add	fp, sp, #0
   13ff0:	sub	sp, sp, #20
   13ff4:	str	r0, [fp, #-16]
   13ff8:	str	r1, [fp, #-20]	; 0xffffffec
   13ffc:	ldr	r3, [fp, #-16]
   14000:	str	r3, [fp, #-8]
   14004:	ldr	r3, [fp, #-20]	; 0xffffffec
   14008:	str	r3, [fp, #-12]
   1400c:	ldr	r3, [fp, #-8]
   14010:	ldrd	r0, [r3, #8]
   14014:	ldr	r3, [fp, #-12]
   14018:	ldrd	r2, [r3, #8]
   1401c:	cmp	r1, r3
   14020:	cmpeq	r0, r2
   14024:	bne	1404c <__assert_fail@plt+0x3274>
   14028:	ldr	r3, [fp, #-8]
   1402c:	ldrd	r0, [r3]
   14030:	ldr	r3, [fp, #-12]
   14034:	ldrd	r2, [r3]
   14038:	cmp	r1, r3
   1403c:	cmpeq	r0, r2
   14040:	bne	1404c <__assert_fail@plt+0x3274>
   14044:	mov	r3, #1
   14048:	b	14050 <__assert_fail@plt+0x3278>
   1404c:	mov	r3, #0
   14050:	and	r3, r3, #1
   14054:	uxtb	r3, r3
   14058:	mov	r0, r3
   1405c:	add	sp, fp, #0
   14060:	pop	{fp}		; (ldr fp, [sp], #4)
   14064:	bx	lr
   14068:	push	{fp, lr}
   1406c:	add	fp, sp, #4
   14070:	sub	sp, sp, #16
   14074:	str	r0, [fp, #-16]
   14078:	str	r1, [fp, #-20]	; 0xffffffec
   1407c:	ldr	r3, [fp, #-16]
   14080:	str	r3, [fp, #-8]
   14084:	ldr	r3, [fp, #-8]
   14088:	ldrd	r0, [r3, #8]
   1408c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14090:	mov	r2, r3
   14094:	mov	r3, #0
   14098:	bl	1b6f8 <__assert_fail@plt+0xa920>
   1409c:	mov	r3, r2
   140a0:	mov	r0, r3
   140a4:	sub	sp, fp, #4
   140a8:	pop	{fp, pc}
   140ac:	push	{fp, lr}
   140b0:	add	fp, sp, #4
   140b4:	sub	sp, sp, #16
   140b8:	str	r0, [fp, #-8]
   140bc:	ldr	r3, [fp, #-8]
   140c0:	ldr	r2, [r3, #48]	; 0x30
   140c4:	ldr	r3, [pc, #156]	; 14168 <__assert_fail@plt+0x3390>
   140c8:	and	r3, r3, r2
   140cc:	cmp	r3, #0
   140d0:	beq	14118 <__assert_fail@plt+0x3340>
   140d4:	ldr	r3, [pc, #144]	; 1416c <__assert_fail@plt+0x3394>
   140d8:	str	r3, [sp]
   140dc:	ldr	r3, [pc, #140]	; 14170 <__assert_fail@plt+0x3398>
   140e0:	ldr	r2, [pc, #140]	; 14174 <__assert_fail@plt+0x339c>
   140e4:	mov	r1, #0
   140e8:	mov	r0, #31
   140ec:	bl	19250 <__assert_fail@plt+0x8478>
   140f0:	mov	r3, r0
   140f4:	mov	r2, r3
   140f8:	ldr	r3, [fp, #-8]
   140fc:	str	r2, [r3, #56]	; 0x38
   14100:	ldr	r3, [fp, #-8]
   14104:	ldr	r3, [r3, #56]	; 0x38
   14108:	cmp	r3, #0
   1410c:	bne	14158 <__assert_fail@plt+0x3380>
   14110:	mov	r3, #0
   14114:	b	1415c <__assert_fail@plt+0x3384>
   14118:	mov	r0, #32
   1411c:	bl	1a77c <__assert_fail@plt+0x99a4>
   14120:	mov	r3, r0
   14124:	mov	r2, r3
   14128:	ldr	r3, [fp, #-8]
   1412c:	str	r2, [r3, #56]	; 0x38
   14130:	ldr	r3, [fp, #-8]
   14134:	ldr	r3, [r3, #56]	; 0x38
   14138:	cmp	r3, #0
   1413c:	bne	14148 <__assert_fail@plt+0x3370>
   14140:	mov	r3, #0
   14144:	b	1415c <__assert_fail@plt+0x3384>
   14148:	ldr	r3, [fp, #-8]
   1414c:	ldr	r3, [r3, #56]	; 0x38
   14150:	mov	r0, r3
   14154:	bl	1ac50 <__assert_fail@plt+0x9e78>
   14158:	mov	r3, #1
   1415c:	mov	r0, r3
   14160:	sub	sp, fp, #4
   14164:	pop	{fp, pc}
   14168:	andeq	r0, r0, r2, lsl #2
   1416c:	andeq	r3, r1, ip, asr pc
   14170:	andeq	r3, r1, r8, ror #31
   14174:	andeq	r4, r1, r8, rrx
   14178:	push	{fp, lr}
   1417c:	add	fp, sp, #4
   14180:	sub	sp, sp, #24
   14184:	str	r0, [fp, #-24]	; 0xffffffe8
   14188:	str	r1, [fp, #-28]	; 0xffffffe4
   1418c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14190:	ldr	r2, [r3, #48]	; 0x30
   14194:	ldr	r3, [pc, #280]	; 142b4 <__assert_fail@plt+0x34dc>
   14198:	and	r3, r3, r2
   1419c:	cmp	r3, #0
   141a0:	beq	14264 <__assert_fail@plt+0x348c>
   141a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   141a8:	add	r3, r3, #64	; 0x40
   141ac:	str	r3, [fp, #-8]
   141b0:	mov	r0, #24
   141b4:	bl	1a77c <__assert_fail@plt+0x99a4>
   141b8:	mov	r3, r0
   141bc:	str	r3, [fp, #-12]
   141c0:	ldr	r3, [fp, #-12]
   141c4:	cmp	r3, #0
   141c8:	bne	141d4 <__assert_fail@plt+0x33fc>
   141cc:	mov	r3, #0
   141d0:	b	142a8 <__assert_fail@plt+0x34d0>
   141d4:	ldr	r3, [fp, #-8]
   141d8:	ldrd	r2, [r3]
   141dc:	ldr	r1, [fp, #-12]
   141e0:	strd	r2, [r1]
   141e4:	ldr	r3, [fp, #-8]
   141e8:	ldrd	r2, [r3, #96]	; 0x60
   141ec:	ldr	r1, [fp, #-12]
   141f0:	strd	r2, [r1, #8]
   141f4:	ldr	r3, [fp, #-12]
   141f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   141fc:	str	r2, [r3, #16]
   14200:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14204:	ldr	r3, [r3, #56]	; 0x38
   14208:	ldr	r1, [fp, #-12]
   1420c:	mov	r0, r3
   14210:	bl	19f98 <__assert_fail@plt+0x91c0>
   14214:	str	r0, [fp, #-16]
   14218:	ldr	r2, [fp, #-16]
   1421c:	ldr	r3, [fp, #-12]
   14220:	cmp	r2, r3
   14224:	beq	142a4 <__assert_fail@plt+0x34cc>
   14228:	ldr	r0, [fp, #-12]
   1422c:	bl	13f5c <__assert_fail@plt+0x3184>
   14230:	ldr	r3, [fp, #-16]
   14234:	cmp	r3, #0
   14238:	bne	14244 <__assert_fail@plt+0x346c>
   1423c:	mov	r3, #0
   14240:	b	142a8 <__assert_fail@plt+0x34d0>
   14244:	ldr	r3, [fp, #-16]
   14248:	ldr	r2, [r3, #16]
   1424c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14250:	str	r2, [r3]
   14254:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14258:	mov	r2, #2
   1425c:	strh	r2, [r3, #56]	; 0x38
   14260:	b	142a4 <__assert_fail@plt+0x34cc>
   14264:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14268:	ldr	r2, [r3, #56]	; 0x38
   1426c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14270:	add	r3, r3, #64	; 0x40
   14274:	mov	r1, r3
   14278:	mov	r0, r2
   1427c:	bl	1ac90 <__assert_fail@plt+0x9eb8>
   14280:	mov	r3, r0
   14284:	cmp	r3, #0
   14288:	beq	142a4 <__assert_fail@plt+0x34cc>
   1428c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14290:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14294:	str	r2, [r3]
   14298:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1429c:	mov	r2, #2
   142a0:	strh	r2, [r3, #56]	; 0x38
   142a4:	mov	r3, #1
   142a8:	mov	r0, r3
   142ac:	sub	sp, fp, #4
   142b0:	pop	{fp, pc}
   142b4:	andeq	r0, r0, r2, lsl #2
   142b8:	push	{fp, lr}
   142bc:	add	fp, sp, #4
   142c0:	sub	sp, sp, #48	; 0x30
   142c4:	str	r0, [fp, #-48]	; 0xffffffd0
   142c8:	str	r1, [fp, #-52]	; 0xffffffcc
   142cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   142d0:	add	r3, r3, #64	; 0x40
   142d4:	str	r3, [fp, #-8]
   142d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   142dc:	ldr	r2, [r3, #48]	; 0x30
   142e0:	ldr	r3, [pc, #268]	; 143f4 <__assert_fail@plt+0x361c>
   142e4:	and	r3, r3, r2
   142e8:	cmp	r3, #0
   142ec:	beq	14340 <__assert_fail@plt+0x3568>
   142f0:	ldr	r3, [fp, #-8]
   142f4:	ldrd	r2, [r3]
   142f8:	strd	r2, [fp, #-44]	; 0xffffffd4
   142fc:	ldr	r3, [fp, #-8]
   14300:	ldrd	r2, [r3, #96]	; 0x60
   14304:	strd	r2, [fp, #-36]	; 0xffffffdc
   14308:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1430c:	ldr	r3, [r3, #56]	; 0x38
   14310:	sub	r2, fp, #44	; 0x2c
   14314:	mov	r1, r2
   14318:	mov	r0, r3
   1431c:	bl	19ffc <__assert_fail@plt+0x9224>
   14320:	str	r0, [fp, #-12]
   14324:	ldr	r3, [fp, #-12]
   14328:	cmp	r3, #0
   1432c:	bne	14334 <__assert_fail@plt+0x355c>
   14330:	bl	10d9c <abort@plt>
   14334:	ldr	r0, [fp, #-12]
   14338:	bl	13f5c <__assert_fail@plt+0x3184>
   1433c:	b	143e8 <__assert_fail@plt+0x3610>
   14340:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14344:	ldr	r3, [r3, #4]
   14348:	str	r3, [fp, #-16]
   1434c:	ldr	r3, [fp, #-16]
   14350:	cmp	r3, #0
   14354:	beq	143e8 <__assert_fail@plt+0x3610>
   14358:	ldr	r3, [fp, #-16]
   1435c:	ldr	r3, [r3, #48]	; 0x30
   14360:	cmp	r3, #0
   14364:	blt	143e8 <__assert_fail@plt+0x3610>
   14368:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1436c:	ldr	r3, [r3, #56]	; 0x38
   14370:	ldrd	r2, [r3, #16]
   14374:	orrs	r3, r2, r3
   14378:	bne	14380 <__assert_fail@plt+0x35a8>
   1437c:	bl	10d9c <abort@plt>
   14380:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14384:	ldr	r3, [r3, #56]	; 0x38
   14388:	ldrd	r0, [r3]
   1438c:	ldr	r3, [fp, #-8]
   14390:	ldrd	r2, [r3, #96]	; 0x60
   14394:	cmp	r1, r3
   14398:	cmpeq	r0, r2
   1439c:	bne	143e8 <__assert_fail@plt+0x3610>
   143a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143a4:	ldr	r3, [r3, #56]	; 0x38
   143a8:	ldrd	r0, [r3, #8]
   143ac:	ldr	r3, [fp, #-8]
   143b0:	ldrd	r2, [r3]
   143b4:	cmp	r1, r3
   143b8:	cmpeq	r0, r2
   143bc:	bne	143e8 <__assert_fail@plt+0x3610>
   143c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143c4:	ldr	r1, [r3, #56]	; 0x38
   143c8:	ldr	r3, [fp, #-16]
   143cc:	ldrd	r2, [r3, #64]	; 0x40
   143d0:	strd	r2, [r1, #8]
   143d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143d8:	ldr	r1, [r3, #56]	; 0x38
   143dc:	ldr	r3, [fp, #-16]
   143e0:	ldrd	r2, [r3, #160]	; 0xa0
   143e4:	strd	r2, [r1]
   143e8:	nop			; (mov r0, r0)
   143ec:	sub	sp, fp, #4
   143f0:	pop	{fp, pc}
   143f4:	andeq	r0, r0, r2, lsl #2
   143f8:	push	{fp, lr}
   143fc:	add	fp, sp, #4
   14400:	sub	sp, sp, #8
   14404:	str	r0, [fp, #-8]
   14408:	ldr	r3, [fp, #-8]
   1440c:	ldr	r2, [r3, #48]	; 0x30
   14410:	ldr	r3, [pc, #72]	; 14460 <__assert_fail@plt+0x3688>
   14414:	and	r3, r3, r2
   14418:	cmp	r3, #0
   1441c:	beq	14444 <__assert_fail@plt+0x366c>
   14420:	ldr	r3, [fp, #-8]
   14424:	ldr	r3, [r3, #56]	; 0x38
   14428:	cmp	r3, #0
   1442c:	beq	14454 <__assert_fail@plt+0x367c>
   14430:	ldr	r3, [fp, #-8]
   14434:	ldr	r3, [r3, #56]	; 0x38
   14438:	mov	r0, r3
   1443c:	bl	1952c <__assert_fail@plt+0x8754>
   14440:	b	14454 <__assert_fail@plt+0x367c>
   14444:	ldr	r3, [fp, #-8]
   14448:	ldr	r3, [r3, #56]	; 0x38
   1444c:	mov	r0, r3
   14450:	bl	13f5c <__assert_fail@plt+0x3184>
   14454:	nop			; (mov r0, r0)
   14458:	sub	sp, fp, #4
   1445c:	pop	{fp, pc}
   14460:	andeq	r0, r0, r2, lsl #2
   14464:	push	{fp, lr}
   14468:	add	fp, sp, #4
   1446c:	sub	sp, sp, #16
   14470:	str	r0, [fp, #-16]
   14474:	b	14498 <__assert_fail@plt+0x36c0>
   14478:	ldr	r0, [fp, #-16]
   1447c:	bl	1a378 <__assert_fail@plt+0x95a0>
   14480:	str	r0, [fp, #-8]
   14484:	ldr	r3, [fp, #-8]
   14488:	cmp	r3, #0
   1448c:	blt	14498 <__assert_fail@plt+0x36c0>
   14490:	ldr	r0, [fp, #-8]
   14494:	bl	10da8 <close@plt>
   14498:	ldr	r0, [fp, #-16]
   1449c:	bl	1a290 <__assert_fail@plt+0x94b8>
   144a0:	mov	r3, r0
   144a4:	eor	r3, r3, #1
   144a8:	uxtb	r3, r3
   144ac:	cmp	r3, #0
   144b0:	bne	14478 <__assert_fail@plt+0x36a0>
   144b4:	nop			; (mov r0, r0)
   144b8:	sub	sp, fp, #4
   144bc:	pop	{fp, pc}
   144c0:	push	{fp, lr}
   144c4:	add	fp, sp, #4
   144c8:	sub	sp, sp, #8
   144cc:	str	r0, [fp, #-8]
   144d0:	mov	r3, r1
   144d4:	strb	r3, [fp, #-9]
   144d8:	ldr	r3, [fp, #-8]
   144dc:	ldrh	r3, [r3, #56]	; 0x38
   144e0:	cmp	r3, #11
   144e4:	beq	144ec <__assert_fail@plt+0x3714>
   144e8:	bl	10d9c <abort@plt>
   144ec:	ldrb	r3, [fp, #-9]
   144f0:	cmp	r3, #0
   144f4:	beq	14504 <__assert_fail@plt+0x372c>
   144f8:	mov	r2, #2
   144fc:	mov	r3, #0
   14500:	b	1450c <__assert_fail@plt+0x3734>
   14504:	mov	r2, #1
   14508:	mov	r3, #0
   1450c:	ldr	r1, [fp, #-8]
   14510:	strd	r2, [r1, #112]	; 0x70
   14514:	nop			; (mov r0, r0)
   14518:	sub	sp, fp, #4
   1451c:	pop	{fp, pc}
   14520:	push	{fp, lr}
   14524:	add	fp, sp, #4
   14528:	sub	sp, sp, #24
   1452c:	str	r0, [fp, #-16]
   14530:	str	r1, [fp, #-20]	; 0xffffffec
   14534:	mov	r3, r2
   14538:	strb	r3, [fp, #-21]	; 0xffffffeb
   1453c:	ldr	r3, [fp, #-16]
   14540:	ldr	r3, [r3, #32]
   14544:	str	r3, [fp, #-8]
   14548:	ldr	r2, [fp, #-8]
   1454c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14550:	cmp	r2, r3
   14554:	bne	14568 <__assert_fail@plt+0x3790>
   14558:	ldr	r3, [fp, #-8]
   1455c:	cmn	r3, #100	; 0x64
   14560:	beq	14568 <__assert_fail@plt+0x3790>
   14564:	bl	10d9c <abort@plt>
   14568:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1456c:	cmp	r3, #0
   14570:	beq	145a4 <__assert_fail@plt+0x37cc>
   14574:	ldr	r3, [fp, #-16]
   14578:	add	r3, r3, #60	; 0x3c
   1457c:	ldr	r1, [fp, #-8]
   14580:	mov	r0, r3
   14584:	bl	1a2b8 <__assert_fail@plt+0x94e0>
   14588:	str	r0, [fp, #-12]
   1458c:	ldr	r3, [fp, #-12]
   14590:	cmp	r3, #0
   14594:	blt	145cc <__assert_fail@plt+0x37f4>
   14598:	ldr	r0, [fp, #-12]
   1459c:	bl	10da8 <close@plt>
   145a0:	b	145cc <__assert_fail@plt+0x37f4>
   145a4:	ldr	r3, [fp, #-16]
   145a8:	ldr	r3, [r3, #48]	; 0x30
   145ac:	and	r3, r3, #4
   145b0:	cmp	r3, #0
   145b4:	bne	145cc <__assert_fail@plt+0x37f4>
   145b8:	ldr	r3, [fp, #-8]
   145bc:	cmp	r3, #0
   145c0:	blt	145cc <__assert_fail@plt+0x37f4>
   145c4:	ldr	r0, [fp, #-8]
   145c8:	bl	10da8 <close@plt>
   145cc:	ldr	r3, [fp, #-16]
   145d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   145d4:	str	r2, [r3, #32]
   145d8:	nop			; (mov r0, r0)
   145dc:	sub	sp, fp, #4
   145e0:	pop	{fp, pc}
   145e4:	push	{fp, lr}
   145e8:	add	fp, sp, #4
   145ec:	sub	sp, sp, #16
   145f0:	str	r0, [fp, #-16]
   145f4:	ldr	r3, [fp, #-16]
   145f8:	ldr	r3, [r3, #48]	; 0x30
   145fc:	and	r3, r3, #4
   14600:	cmp	r3, #0
   14604:	bne	14694 <__assert_fail@plt+0x38bc>
   14608:	ldr	r3, [fp, #-16]
   1460c:	ldr	r3, [r3, #48]	; 0x30
   14610:	and	r3, r3, #512	; 0x200
   14614:	cmp	r3, #0
   14618:	beq	14654 <__assert_fail@plt+0x387c>
   1461c:	ldr	r3, [fp, #-16]
   14620:	ldr	r3, [r3, #48]	; 0x30
   14624:	and	r3, r3, #512	; 0x200
   14628:	cmp	r3, #0
   1462c:	bne	1463c <__assert_fail@plt+0x3864>
   14630:	ldr	r3, [fp, #-16]
   14634:	ldr	r3, [r3, #28]
   14638:	b	14640 <__assert_fail@plt+0x3868>
   1463c:	mvn	r3, #99	; 0x63
   14640:	mov	r2, #1
   14644:	mov	r1, r3
   14648:	ldr	r0, [fp, #-16]
   1464c:	bl	14520 <__assert_fail@plt+0x3748>
   14650:	b	14694 <__assert_fail@plt+0x38bc>
   14654:	ldr	r3, [fp, #-16]
   14658:	ldr	r3, [r3, #48]	; 0x30
   1465c:	and	r3, r3, #512	; 0x200
   14660:	cmp	r3, #0
   14664:	bne	14674 <__assert_fail@plt+0x389c>
   14668:	ldr	r3, [fp, #-16]
   1466c:	ldr	r3, [r3, #28]
   14670:	b	14678 <__assert_fail@plt+0x38a0>
   14674:	mvn	r3, #99	; 0x63
   14678:	mov	r0, r3
   1467c:	bl	10d60 <fchdir@plt>
   14680:	mov	r3, r0
   14684:	cmp	r3, #0
   14688:	beq	14694 <__assert_fail@plt+0x38bc>
   1468c:	mov	r3, #1
   14690:	b	14698 <__assert_fail@plt+0x38c0>
   14694:	mov	r3, #0
   14698:	str	r3, [fp, #-8]
   1469c:	ldr	r3, [fp, #-16]
   146a0:	add	r3, r3, #60	; 0x3c
   146a4:	mov	r0, r3
   146a8:	bl	14464 <__assert_fail@plt+0x368c>
   146ac:	ldr	r3, [fp, #-8]
   146b0:	mov	r0, r3
   146b4:	sub	sp, fp, #4
   146b8:	pop	{fp, pc}
   146bc:	push	{fp, lr}
   146c0:	add	fp, sp, #4
   146c4:	sub	sp, sp, #16
   146c8:	str	r0, [fp, #-16]
   146cc:	str	r1, [fp, #-20]	; 0xffffffec
   146d0:	ldr	r3, [fp, #-16]
   146d4:	ldr	r3, [r3, #48]	; 0x30
   146d8:	and	r3, r3, #16
   146dc:	cmp	r3, #0
   146e0:	beq	146ec <__assert_fail@plt+0x3914>
   146e4:	ldr	r3, [pc, #96]	; 1474c <__assert_fail@plt+0x3974>
   146e8:	b	146f0 <__assert_fail@plt+0x3918>
   146ec:	ldr	r3, [pc, #92]	; 14750 <__assert_fail@plt+0x3978>
   146f0:	str	r3, [fp, #-8]
   146f4:	ldr	r3, [fp, #-16]
   146f8:	ldr	r3, [r3, #48]	; 0x30
   146fc:	and	r3, r3, #512	; 0x200
   14700:	cmp	r3, #0
   14704:	beq	14728 <__assert_fail@plt+0x3950>
   14708:	ldr	r3, [fp, #-16]
   1470c:	ldr	r3, [r3, #32]
   14710:	ldr	r2, [fp, #-8]
   14714:	ldr	r1, [fp, #-20]	; 0xffffffec
   14718:	mov	r0, r3
   1471c:	bl	1a50c <__assert_fail@plt+0x9734>
   14720:	mov	r3, r0
   14724:	b	14738 <__assert_fail@plt+0x3960>
   14728:	ldr	r1, [fp, #-8]
   1472c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14730:	bl	1b12c <__assert_fail@plt+0xa354>
   14734:	mov	r3, r0
   14738:	str	r3, [fp, #-12]
   1473c:	ldr	r3, [fp, #-12]
   14740:	mov	r0, r3
   14744:	sub	sp, fp, #4
   14748:	pop	{fp, pc}
   1474c:	andeq	ip, r8, r0, lsl #18
   14750:	andeq	r4, r8, r0, lsl #18
   14754:	push	{r4, r5, r6, r7, r8, fp, lr}
   14758:	add	fp, sp, #24
   1475c:	sub	sp, sp, #36	; 0x24
   14760:	str	r0, [fp, #-56]	; 0xffffffc8
   14764:	mov	r7, r1
   14768:	str	r2, [fp, #-60]	; 0xffffffc4
   1476c:	mov	r3, #0
   14770:	str	r3, [fp, #-32]	; 0xffffffe0
   14774:	mov	r3, #0
   14778:	str	r3, [fp, #-36]	; 0xffffffdc
   1477c:	bic	r3, r7, #4080	; 0xff0
   14780:	bic	r3, r3, #15
   14784:	cmp	r3, #0
   14788:	beq	147a4 <__assert_fail@plt+0x39cc>
   1478c:	bl	10cd0 <__errno_location@plt>
   14790:	mov	r2, r0
   14794:	mov	r3, #22
   14798:	str	r3, [r2]
   1479c:	mov	r3, #0
   147a0:	b	14bb8 <__assert_fail@plt+0x3de0>
   147a4:	and	r3, r7, #4
   147a8:	cmp	r3, #0
   147ac:	beq	147d4 <__assert_fail@plt+0x39fc>
   147b0:	and	r3, r7, #512	; 0x200
   147b4:	cmp	r3, #0
   147b8:	beq	147d4 <__assert_fail@plt+0x39fc>
   147bc:	bl	10cd0 <__errno_location@plt>
   147c0:	mov	r2, r0
   147c4:	mov	r3, #22
   147c8:	str	r3, [r2]
   147cc:	mov	r3, #0
   147d0:	b	14bb8 <__assert_fail@plt+0x3de0>
   147d4:	and	r3, r7, #18
   147d8:	cmp	r3, #0
   147dc:	bne	147f8 <__assert_fail@plt+0x3a20>
   147e0:	bl	10cd0 <__errno_location@plt>
   147e4:	mov	r2, r0
   147e8:	mov	r3, #22
   147ec:	str	r3, [r2]
   147f0:	mov	r3, #0
   147f4:	b	14bb8 <__assert_fail@plt+0x3de0>
   147f8:	mov	r1, #96	; 0x60
   147fc:	mov	r0, #1
   14800:	bl	1a6b8 <__assert_fail@plt+0x98e0>
   14804:	mov	r3, r0
   14808:	mov	r4, r3
   1480c:	cmp	r4, #0
   14810:	bne	1481c <__assert_fail@plt+0x3a44>
   14814:	mov	r3, #0
   14818:	b	14bb8 <__assert_fail@plt+0x3de0>
   1481c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14820:	str	r3, [r4, #44]	; 0x2c
   14824:	str	r7, [r4, #48]	; 0x30
   14828:	ldr	r3, [r4, #48]	; 0x30
   1482c:	and	r3, r3, #2
   14830:	cmp	r3, #0
   14834:	beq	14850 <__assert_fail@plt+0x3a78>
   14838:	ldr	r3, [r4, #48]	; 0x30
   1483c:	orr	r3, r3, #4
   14840:	str	r3, [r4, #48]	; 0x30
   14844:	ldr	r3, [r4, #48]	; 0x30
   14848:	bic	r3, r3, #512	; 0x200
   1484c:	str	r3, [r4, #48]	; 0x30
   14850:	mvn	r3, #99	; 0x63
   14854:	str	r3, [r4, #32]
   14858:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1485c:	bl	16ec8 <__assert_fail@plt+0x60f0>
   14860:	str	r0, [fp, #-44]	; 0xffffffd4
   14864:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14868:	cmp	r3, #4096	; 0x1000
   1486c:	movcs	r3, r3
   14870:	movcc	r3, #4096	; 0x1000
   14874:	mov	r1, r3
   14878:	mov	r0, r4
   1487c:	bl	16ca0 <__assert_fail@plt+0x5ec8>
   14880:	mov	r3, r0
   14884:	eor	r3, r3, #1
   14888:	uxtb	r3, r3
   1488c:	cmp	r3, #0
   14890:	bne	14ba8 <__assert_fail@plt+0x3dd0>
   14894:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14898:	ldr	r3, [r3]
   1489c:	cmp	r3, #0
   148a0:	beq	148d0 <__assert_fail@plt+0x3af8>
   148a4:	mov	r2, #0
   148a8:	ldr	r1, [pc, #788]	; 14bc4 <__assert_fail@plt+0x3dec>
   148ac:	mov	r0, r4
   148b0:	bl	16b9c <__assert_fail@plt+0x5dc4>
   148b4:	str	r0, [fp, #-32]	; 0xffffffe0
   148b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   148bc:	cmp	r3, #0
   148c0:	beq	14b94 <__assert_fail@plt+0x3dbc>
   148c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   148c8:	mvn	r2, #0
   148cc:	str	r2, [r3, #48]	; 0x30
   148d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   148d4:	cmp	r3, #0
   148d8:	beq	148ec <__assert_fail@plt+0x3b14>
   148dc:	ldr	r3, [r4, #48]	; 0x30
   148e0:	and	r3, r3, #1024	; 0x400
   148e4:	cmp	r3, #0
   148e8:	beq	148f4 <__assert_fail@plt+0x3b1c>
   148ec:	mov	r3, #1
   148f0:	b	148f8 <__assert_fail@plt+0x3b20>
   148f4:	mov	r3, #0
   148f8:	strb	r3, [fp, #-45]	; 0xffffffd3
   148fc:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   14900:	and	r3, r3, #1
   14904:	strb	r3, [fp, #-45]	; 0xffffffd3
   14908:	mov	r6, #0
   1490c:	mov	r8, #0
   14910:	b	14a70 <__assert_fail@plt+0x3c98>
   14914:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14918:	ldr	r3, [r3]
   1491c:	mov	r0, r3
   14920:	bl	10ca0 <strlen@plt>
   14924:	str	r0, [fp, #-40]	; 0xffffffd8
   14928:	and	r3, r7, #2048	; 0x800
   1492c:	cmp	r3, #0
   14930:	bne	149a0 <__assert_fail@plt+0x3bc8>
   14934:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14938:	ldr	r3, [r3]
   1493c:	str	r3, [fp, #-52]	; 0xffffffcc
   14940:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14944:	cmp	r3, #2
   14948:	bls	149a0 <__assert_fail@plt+0x3bc8>
   1494c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14950:	sub	r3, r3, #1
   14954:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14958:	add	r3, r2, r3
   1495c:	ldrb	r3, [r3]
   14960:	cmp	r3, #47	; 0x2f
   14964:	bne	149a0 <__assert_fail@plt+0x3bc8>
   14968:	b	14978 <__assert_fail@plt+0x3ba0>
   1496c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14970:	sub	r3, r3, #1
   14974:	str	r3, [fp, #-40]	; 0xffffffd8
   14978:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1497c:	cmp	r3, #1
   14980:	bls	149a0 <__assert_fail@plt+0x3bc8>
   14984:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14988:	sub	r3, r3, #2
   1498c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14990:	add	r3, r2, r3
   14994:	ldrb	r3, [r3]
   14998:	cmp	r3, #47	; 0x2f
   1499c:	beq	1496c <__assert_fail@plt+0x3b94>
   149a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   149a4:	ldr	r3, [r3]
   149a8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   149ac:	mov	r1, r3
   149b0:	mov	r0, r4
   149b4:	bl	16b9c <__assert_fail@plt+0x5dc4>
   149b8:	mov	r5, r0
   149bc:	cmp	r5, #0
   149c0:	beq	14b6c <__assert_fail@plt+0x3d94>
   149c4:	mov	r3, #0
   149c8:	str	r3, [r5, #48]	; 0x30
   149cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   149d0:	str	r3, [r5, #4]
   149d4:	add	r3, r5, #168	; 0xa8
   149d8:	str	r3, [r5, #24]
   149dc:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   149e0:	cmp	r3, #0
   149e4:	beq	14a08 <__assert_fail@plt+0x3c30>
   149e8:	cmp	r6, #0
   149ec:	beq	14a08 <__assert_fail@plt+0x3c30>
   149f0:	mov	r3, #11
   149f4:	strh	r3, [r5, #56]	; 0x38
   149f8:	mov	r1, #1
   149fc:	mov	r0, r5
   14a00:	bl	144c0 <__assert_fail@plt+0x36e8>
   14a04:	b	14a20 <__assert_fail@plt+0x3c48>
   14a08:	mov	r2, #0
   14a0c:	mov	r1, r5
   14a10:	mov	r0, r4
   14a14:	bl	16824 <__assert_fail@plt+0x5a4c>
   14a18:	mov	r3, r0
   14a1c:	strh	r3, [r5, #56]	; 0x38
   14a20:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14a24:	cmp	r3, #0
   14a28:	beq	14a38 <__assert_fail@plt+0x3c60>
   14a2c:	str	r6, [r5, #8]
   14a30:	mov	r6, r5
   14a34:	b	14a60 <__assert_fail@plt+0x3c88>
   14a38:	mov	r3, #0
   14a3c:	str	r3, [r5, #8]
   14a40:	cmp	r6, #0
   14a44:	bne	14a54 <__assert_fail@plt+0x3c7c>
   14a48:	mov	r6, r5
   14a4c:	str	r6, [fp, #-36]	; 0xffffffdc
   14a50:	b	14a60 <__assert_fail@plt+0x3c88>
   14a54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14a58:	str	r5, [r3, #8]
   14a5c:	str	r5, [fp, #-36]	; 0xffffffdc
   14a60:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14a64:	add	r3, r3, #4
   14a68:	str	r3, [fp, #-56]	; 0xffffffc8
   14a6c:	add	r8, r8, #1
   14a70:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14a74:	ldr	r3, [r3]
   14a78:	cmp	r3, #0
   14a7c:	bne	14914 <__assert_fail@plt+0x3b3c>
   14a80:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14a84:	cmp	r3, #0
   14a88:	beq	14aa8 <__assert_fail@plt+0x3cd0>
   14a8c:	cmp	r8, #1
   14a90:	bls	14aa8 <__assert_fail@plt+0x3cd0>
   14a94:	mov	r2, r8
   14a98:	mov	r1, r6
   14a9c:	mov	r0, r4
   14aa0:	bl	16a54 <__assert_fail@plt+0x5c7c>
   14aa4:	mov	r6, r0
   14aa8:	mov	r2, #0
   14aac:	ldr	r1, [pc, #272]	; 14bc4 <__assert_fail@plt+0x3dec>
   14ab0:	mov	r0, r4
   14ab4:	bl	16b9c <__assert_fail@plt+0x5dc4>
   14ab8:	mov	r3, r0
   14abc:	str	r3, [r4]
   14ac0:	ldr	r3, [r4]
   14ac4:	cmp	r3, #0
   14ac8:	beq	14b74 <__assert_fail@plt+0x3d9c>
   14acc:	ldr	r3, [r4]
   14ad0:	str	r6, [r3, #8]
   14ad4:	ldr	r3, [r4]
   14ad8:	mov	r2, #9
   14adc:	strh	r2, [r3, #56]	; 0x38
   14ae0:	ldr	r3, [r4]
   14ae4:	mov	r2, #1
   14ae8:	str	r2, [r3, #48]	; 0x30
   14aec:	mov	r0, r4
   14af0:	bl	140ac <__assert_fail@plt+0x32d4>
   14af4:	mov	r3, r0
   14af8:	eor	r3, r3, #1
   14afc:	uxtb	r3, r3
   14b00:	cmp	r3, #0
   14b04:	bne	14b7c <__assert_fail@plt+0x3da4>
   14b08:	ldr	r3, [r4, #48]	; 0x30
   14b0c:	and	r3, r3, #4
   14b10:	cmp	r3, #0
   14b14:	bne	14b54 <__assert_fail@plt+0x3d7c>
   14b18:	ldr	r3, [r4, #48]	; 0x30
   14b1c:	and	r3, r3, #512	; 0x200
   14b20:	cmp	r3, #0
   14b24:	bne	14b54 <__assert_fail@plt+0x3d7c>
   14b28:	ldr	r1, [pc, #152]	; 14bc8 <__assert_fail@plt+0x3df0>
   14b2c:	mov	r0, r4
   14b30:	bl	146bc <__assert_fail@plt+0x38e4>
   14b34:	mov	r3, r0
   14b38:	str	r3, [r4, #28]
   14b3c:	ldr	r3, [r4, #28]
   14b40:	cmp	r3, #0
   14b44:	bge	14b54 <__assert_fail@plt+0x3d7c>
   14b48:	ldr	r3, [r4, #48]	; 0x30
   14b4c:	orr	r3, r3, #4
   14b50:	str	r3, [r4, #48]	; 0x30
   14b54:	add	r3, r4, #60	; 0x3c
   14b58:	mvn	r1, #0
   14b5c:	mov	r0, r3
   14b60:	bl	1a208 <__assert_fail@plt+0x9430>
   14b64:	mov	r3, r4
   14b68:	b	14bb8 <__assert_fail@plt+0x3de0>
   14b6c:	nop			; (mov r0, r0)
   14b70:	b	14b80 <__assert_fail@plt+0x3da8>
   14b74:	nop			; (mov r0, r0)
   14b78:	b	14b80 <__assert_fail@plt+0x3da8>
   14b7c:	nop			; (mov r0, r0)
   14b80:	mov	r0, r6
   14b84:	bl	16c58 <__assert_fail@plt+0x5e80>
   14b88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14b8c:	bl	13f5c <__assert_fail@plt+0x3184>
   14b90:	b	14b98 <__assert_fail@plt+0x3dc0>
   14b94:	nop			; (mov r0, r0)
   14b98:	ldr	r3, [r4, #24]
   14b9c:	mov	r0, r3
   14ba0:	bl	13f5c <__assert_fail@plt+0x3184>
   14ba4:	b	14bac <__assert_fail@plt+0x3dd4>
   14ba8:	nop			; (mov r0, r0)
   14bac:	mov	r0, r4
   14bb0:	bl	13f5c <__assert_fail@plt+0x3184>
   14bb4:	mov	r3, #0
   14bb8:	mov	r0, r3
   14bbc:	sub	sp, fp, #24
   14bc0:	pop	{r4, r5, r6, r7, r8, fp, pc}
   14bc4:	andeq	fp, r1, ip, lsl #21
   14bc8:	muleq	r1, r0, sl
   14bcc:	push	{r4, r5, r6, fp, lr}
   14bd0:	add	fp, sp, #16
   14bd4:	sub	sp, sp, #12
   14bd8:	str	r0, [fp, #-24]	; 0xffffffe8
   14bdc:	mov	r4, r1
   14be0:	ldr	r3, [r4, #52]	; 0x34
   14be4:	str	r3, [r4, #40]	; 0x28
   14be8:	ldr	r6, [r4, #40]	; 0x28
   14bec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bf0:	ldr	r3, [r3, #24]
   14bf4:	add	r1, r4, #168	; 0xa8
   14bf8:	add	r2, r6, #1
   14bfc:	mov	r0, r3
   14c00:	bl	10bb0 <memmove@plt>
   14c04:	add	r3, r4, #168	; 0xa8
   14c08:	mov	r1, #47	; 0x2f
   14c0c:	mov	r0, r3
   14c10:	bl	10d0c <strrchr@plt>
   14c14:	mov	r5, r0
   14c18:	cmp	r5, #0
   14c1c:	beq	14c64 <__assert_fail@plt+0x3e8c>
   14c20:	add	r3, r4, #168	; 0xa8
   14c24:	cmp	r3, r5
   14c28:	bne	14c3c <__assert_fail@plt+0x3e64>
   14c2c:	add	r3, r5, #1
   14c30:	ldrb	r3, [r3]
   14c34:	cmp	r3, #0
   14c38:	beq	14c64 <__assert_fail@plt+0x3e8c>
   14c3c:	add	r5, r5, #1
   14c40:	mov	r0, r5
   14c44:	bl	10ca0 <strlen@plt>
   14c48:	mov	r6, r0
   14c4c:	add	r3, r4, #168	; 0xa8
   14c50:	add	r2, r6, #1
   14c54:	mov	r1, r5
   14c58:	mov	r0, r3
   14c5c:	bl	10bb0 <memmove@plt>
   14c60:	str	r6, [r4, #52]	; 0x34
   14c64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c68:	ldr	r3, [r3, #24]
   14c6c:	str	r3, [r4, #28]
   14c70:	ldr	r3, [r4, #28]
   14c74:	str	r3, [r4, #24]
   14c78:	nop			; (mov r0, r0)
   14c7c:	sub	sp, fp, #16
   14c80:	pop	{r4, r5, r6, fp, pc}
   14c84:	push	{r4, r5, fp, lr}
   14c88:	add	fp, sp, #12
   14c8c:	sub	sp, sp, #16
   14c90:	str	r0, [fp, #-24]	; 0xffffffe8
   14c94:	mov	r3, #0
   14c98:	str	r3, [fp, #-16]
   14c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ca0:	ldr	r3, [r3]
   14ca4:	cmp	r3, #0
   14ca8:	beq	14cf4 <__assert_fail@plt+0x3f1c>
   14cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cb0:	ldr	r4, [r3]
   14cb4:	b	14ce0 <__assert_fail@plt+0x3f08>
   14cb8:	mov	r5, r4
   14cbc:	ldr	r3, [r4, #8]
   14cc0:	cmp	r3, #0
   14cc4:	beq	14cd0 <__assert_fail@plt+0x3ef8>
   14cc8:	ldr	r3, [r4, #8]
   14ccc:	b	14cd4 <__assert_fail@plt+0x3efc>
   14cd0:	ldr	r3, [r4, #4]
   14cd4:	mov	r4, r3
   14cd8:	mov	r0, r5
   14cdc:	bl	13f5c <__assert_fail@plt+0x3184>
   14ce0:	ldr	r3, [r4, #48]	; 0x30
   14ce4:	cmp	r3, #0
   14ce8:	bge	14cb8 <__assert_fail@plt+0x3ee0>
   14cec:	mov	r0, r4
   14cf0:	bl	13f5c <__assert_fail@plt+0x3184>
   14cf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cf8:	ldr	r3, [r3, #4]
   14cfc:	cmp	r3, #0
   14d00:	beq	14d14 <__assert_fail@plt+0x3f3c>
   14d04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d08:	ldr	r3, [r3, #4]
   14d0c:	mov	r0, r3
   14d10:	bl	16c58 <__assert_fail@plt+0x5e80>
   14d14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d18:	ldr	r3, [r3, #8]
   14d1c:	mov	r0, r3
   14d20:	bl	13f5c <__assert_fail@plt+0x3184>
   14d24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d28:	ldr	r3, [r3, #24]
   14d2c:	mov	r0, r3
   14d30:	bl	13f5c <__assert_fail@plt+0x3184>
   14d34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d38:	ldr	r3, [r3, #48]	; 0x30
   14d3c:	and	r3, r3, #512	; 0x200
   14d40:	cmp	r3, #0
   14d44:	beq	14d88 <__assert_fail@plt+0x3fb0>
   14d48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d4c:	ldr	r3, [r3, #32]
   14d50:	cmp	r3, #0
   14d54:	blt	14e00 <__assert_fail@plt+0x4028>
   14d58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d5c:	ldr	r3, [r3, #32]
   14d60:	mov	r0, r3
   14d64:	bl	10da8 <close@plt>
   14d68:	mov	r3, r0
   14d6c:	cmp	r3, #0
   14d70:	beq	14e00 <__assert_fail@plt+0x4028>
   14d74:	bl	10cd0 <__errno_location@plt>
   14d78:	mov	r3, r0
   14d7c:	ldr	r3, [r3]
   14d80:	str	r3, [fp, #-16]
   14d84:	b	14e00 <__assert_fail@plt+0x4028>
   14d88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d8c:	ldr	r3, [r3, #48]	; 0x30
   14d90:	and	r3, r3, #4
   14d94:	cmp	r3, #0
   14d98:	bne	14e00 <__assert_fail@plt+0x4028>
   14d9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14da0:	ldr	r3, [r3, #28]
   14da4:	mov	r0, r3
   14da8:	bl	10d60 <fchdir@plt>
   14dac:	mov	r3, r0
   14db0:	cmp	r3, #0
   14db4:	beq	14dc8 <__assert_fail@plt+0x3ff0>
   14db8:	bl	10cd0 <__errno_location@plt>
   14dbc:	mov	r3, r0
   14dc0:	ldr	r3, [r3]
   14dc4:	str	r3, [fp, #-16]
   14dc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14dcc:	ldr	r3, [r3, #28]
   14dd0:	mov	r0, r3
   14dd4:	bl	10da8 <close@plt>
   14dd8:	mov	r3, r0
   14ddc:	cmp	r3, #0
   14de0:	beq	14e00 <__assert_fail@plt+0x4028>
   14de4:	ldr	r3, [fp, #-16]
   14de8:	cmp	r3, #0
   14dec:	bne	14e00 <__assert_fail@plt+0x4028>
   14df0:	bl	10cd0 <__errno_location@plt>
   14df4:	mov	r3, r0
   14df8:	ldr	r3, [r3]
   14dfc:	str	r3, [fp, #-16]
   14e00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e04:	add	r3, r3, #60	; 0x3c
   14e08:	mov	r0, r3
   14e0c:	bl	14464 <__assert_fail@plt+0x368c>
   14e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e14:	ldr	r3, [r3, #52]	; 0x34
   14e18:	cmp	r3, #0
   14e1c:	beq	14e30 <__assert_fail@plt+0x4058>
   14e20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e24:	ldr	r3, [r3, #52]	; 0x34
   14e28:	mov	r0, r3
   14e2c:	bl	1952c <__assert_fail@plt+0x8754>
   14e30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e34:	bl	143f8 <__assert_fail@plt+0x3620>
   14e38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e3c:	bl	13f5c <__assert_fail@plt+0x3184>
   14e40:	ldr	r3, [fp, #-16]
   14e44:	cmp	r3, #0
   14e48:	beq	14e64 <__assert_fail@plt+0x408c>
   14e4c:	bl	10cd0 <__errno_location@plt>
   14e50:	mov	r2, r0
   14e54:	ldr	r3, [fp, #-16]
   14e58:	str	r3, [r2]
   14e5c:	mvn	r3, #0
   14e60:	b	14e68 <__assert_fail@plt+0x4090>
   14e64:	mov	r3, #0
   14e68:	mov	r0, r3
   14e6c:	sub	sp, fp, #12
   14e70:	pop	{r4, r5, fp, pc}
   14e74:	push	{fp, lr}
   14e78:	add	fp, sp, #4
   14e7c:	sub	sp, sp, #24
   14e80:	str	r0, [fp, #-24]	; 0xffffffe8
   14e84:	str	r1, [fp, #-28]	; 0xffffffe4
   14e88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e8c:	str	r3, [fp, #-8]
   14e90:	ldr	r3, [fp, #-8]
   14e94:	ldrd	r2, [r3]
   14e98:	strd	r2, [fp, #-20]	; 0xffffffec
   14e9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ea0:	mov	r2, r3
   14ea4:	mov	r3, #0
   14ea8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14eac:	bl	1b6f8 <__assert_fail@plt+0xa920>
   14eb0:	mov	r3, r2
   14eb4:	mov	r0, r3
   14eb8:	sub	sp, fp, #4
   14ebc:	pop	{fp, pc}
   14ec0:	push	{fp}		; (str fp, [sp, #-4]!)
   14ec4:	add	fp, sp, #0
   14ec8:	sub	sp, sp, #20
   14ecc:	str	r0, [fp, #-16]
   14ed0:	str	r1, [fp, #-20]	; 0xffffffec
   14ed4:	ldr	r3, [fp, #-16]
   14ed8:	str	r3, [fp, #-8]
   14edc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ee0:	str	r3, [fp, #-12]
   14ee4:	ldr	r3, [fp, #-8]
   14ee8:	ldrd	r0, [r3]
   14eec:	ldr	r3, [fp, #-12]
   14ef0:	ldrd	r2, [r3]
   14ef4:	cmp	r1, r3
   14ef8:	cmpeq	r0, r2
   14efc:	moveq	r3, #1
   14f00:	movne	r3, #0
   14f04:	uxtb	r3, r3
   14f08:	mov	r0, r3
   14f0c:	add	sp, fp, #0
   14f10:	pop	{fp}		; (ldr fp, [sp], #4)
   14f14:	bx	lr
   14f18:	push	{fp, lr}
   14f1c:	add	fp, sp, #4
   14f20:	sub	sp, sp, #136	; 0x88
   14f24:	str	r0, [fp, #-128]	; 0xffffff80
   14f28:	str	r1, [fp, #-132]	; 0xffffff7c
   14f2c:	ldr	r3, [fp, #-128]	; 0xffffff80
   14f30:	ldr	r3, [r3, #44]	; 0x2c
   14f34:	str	r3, [fp, #-12]
   14f38:	ldr	r3, [fp, #-12]
   14f3c:	ldr	r3, [r3, #52]	; 0x34
   14f40:	str	r3, [fp, #-8]
   14f44:	ldr	r3, [fp, #-12]
   14f48:	ldr	r3, [r3, #48]	; 0x30
   14f4c:	and	r3, r3, #512	; 0x200
   14f50:	cmp	r3, #0
   14f54:	bne	14f60 <__assert_fail@plt+0x4188>
   14f58:	mov	r3, #0
   14f5c:	b	15098 <__assert_fail@plt+0x42c0>
   14f60:	ldr	r3, [fp, #-8]
   14f64:	cmp	r3, #0
   14f68:	bne	14fa4 <__assert_fail@plt+0x41cc>
   14f6c:	ldr	r3, [pc, #304]	; 150a4 <__assert_fail@plt+0x42cc>
   14f70:	str	r3, [sp]
   14f74:	ldr	r3, [pc, #300]	; 150a8 <__assert_fail@plt+0x42d0>
   14f78:	ldr	r2, [pc, #300]	; 150ac <__assert_fail@plt+0x42d4>
   14f7c:	mov	r1, #0
   14f80:	mov	r0, #13
   14f84:	bl	19250 <__assert_fail@plt+0x8478>
   14f88:	mov	r3, r0
   14f8c:	mov	r2, r3
   14f90:	ldr	r3, [fp, #-12]
   14f94:	str	r2, [r3, #52]	; 0x34
   14f98:	ldr	r3, [fp, #-12]
   14f9c:	ldr	r3, [r3, #52]	; 0x34
   14fa0:	str	r3, [fp, #-8]
   14fa4:	ldr	r3, [fp, #-8]
   14fa8:	cmp	r3, #0
   14fac:	beq	14fe8 <__assert_fail@plt+0x4210>
   14fb0:	ldr	r3, [fp, #-128]	; 0xffffff80
   14fb4:	ldrd	r2, [r3, #64]	; 0x40
   14fb8:	strd	r2, [fp, #-124]	; 0xffffff84
   14fbc:	sub	r3, fp, #124	; 0x7c
   14fc0:	mov	r1, r3
   14fc4:	ldr	r0, [fp, #-8]
   14fc8:	bl	18a04 <__assert_fail@plt+0x7c2c>
   14fcc:	str	r0, [fp, #-16]
   14fd0:	ldr	r3, [fp, #-16]
   14fd4:	cmp	r3, #0
   14fd8:	beq	14fe8 <__assert_fail@plt+0x4210>
   14fdc:	ldr	r3, [fp, #-16]
   14fe0:	ldr	r3, [r3, #8]
   14fe4:	b	15098 <__assert_fail@plt+0x42c0>
   14fe8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   14fec:	cmp	r3, #0
   14ff0:	blt	15010 <__assert_fail@plt+0x4238>
   14ff4:	sub	r3, fp, #108	; 0x6c
   14ff8:	mov	r1, r3
   14ffc:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15000:	bl	10b5c <fstatfs64@plt>
   15004:	mov	r3, r0
   15008:	cmp	r3, #0
   1500c:	beq	15018 <__assert_fail@plt+0x4240>
   15010:	mov	r3, #0
   15014:	b	15098 <__assert_fail@plt+0x42c0>
   15018:	ldr	r3, [fp, #-8]
   1501c:	cmp	r3, #0
   15020:	beq	15094 <__assert_fail@plt+0x42bc>
   15024:	mov	r0, #16
   15028:	bl	1a77c <__assert_fail@plt+0x99a4>
   1502c:	mov	r3, r0
   15030:	str	r3, [fp, #-20]	; 0xffffffec
   15034:	ldr	r3, [fp, #-20]	; 0xffffffec
   15038:	cmp	r3, #0
   1503c:	beq	15094 <__assert_fail@plt+0x42bc>
   15040:	ldr	r3, [fp, #-128]	; 0xffffff80
   15044:	ldrd	r2, [r3, #64]	; 0x40
   15048:	ldr	r1, [fp, #-20]	; 0xffffffec
   1504c:	strd	r2, [r1]
   15050:	ldr	r2, [fp, #-108]	; 0xffffff94
   15054:	ldr	r3, [fp, #-20]	; 0xffffffec
   15058:	str	r2, [r3, #8]
   1505c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15060:	ldr	r0, [fp, #-8]
   15064:	bl	19f98 <__assert_fail@plt+0x91c0>
   15068:	str	r0, [fp, #-16]
   1506c:	ldr	r3, [fp, #-16]
   15070:	cmp	r3, #0
   15074:	beq	1508c <__assert_fail@plt+0x42b4>
   15078:	ldr	r2, [fp, #-16]
   1507c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15080:	cmp	r2, r3
   15084:	beq	15094 <__assert_fail@plt+0x42bc>
   15088:	bl	10d9c <abort@plt>
   1508c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15090:	bl	13f5c <__assert_fail@plt+0x3184>
   15094:	ldr	r3, [fp, #-108]	; 0xffffff94
   15098:	mov	r0, r3
   1509c:	sub	sp, fp, #4
   150a0:	pop	{fp, pc}
   150a4:	andeq	r3, r1, ip, asr pc
   150a8:	andeq	r4, r1, r0, asr #29
   150ac:	andeq	r4, r1, r4, ror lr
   150b0:	push	{fp, lr}
   150b4:	add	fp, sp, #4
   150b8:	sub	sp, sp, #8
   150bc:	str	r0, [fp, #-8]
   150c0:	str	r1, [fp, #-12]
   150c4:	ldr	r1, [fp, #-12]
   150c8:	ldr	r0, [fp, #-8]
   150cc:	bl	14f18 <__assert_fail@plt+0x4140>
   150d0:	mov	r3, r0
   150d4:	ldr	r2, [pc, #52]	; 15110 <__assert_fail@plt+0x4338>
   150d8:	cmp	r3, r2
   150dc:	beq	150f8 <__assert_fail@plt+0x4320>
   150e0:	ldr	r2, [pc, #44]	; 15114 <__assert_fail@plt+0x433c>
   150e4:	cmp	r3, r2
   150e8:	beq	150f8 <__assert_fail@plt+0x4320>
   150ec:	ldr	r2, [pc, #36]	; 15118 <__assert_fail@plt+0x4340>
   150f0:	cmp	r3, r2
   150f4:	bne	15100 <__assert_fail@plt+0x4328>
   150f8:	mov	r3, #0
   150fc:	b	15104 <__assert_fail@plt+0x432c>
   15100:	mov	r3, #1
   15104:	mov	r0, r3
   15108:	sub	sp, fp, #4
   1510c:	pop	{fp, pc}
   15110:	andeq	r6, r0, r9, ror #18
   15114:			; <UNDEFINED> instruction: 0x01021994
   15118:			; <UNDEFINED> instruction: 0xff534d42
   1511c:	push	{fp, lr}
   15120:	add	fp, sp, #4
   15124:	sub	sp, sp, #8
   15128:	str	r0, [fp, #-8]
   1512c:	str	r1, [fp, #-12]
   15130:	ldr	r1, [fp, #-12]
   15134:	ldr	r0, [fp, #-8]
   15138:	bl	14f18 <__assert_fail@plt+0x4140>
   1513c:	mov	r3, r0
   15140:	ldr	r2, [pc, #88]	; 151a0 <__assert_fail@plt+0x43c8>
   15144:	cmp	r3, r2
   15148:	beq	15188 <__assert_fail@plt+0x43b0>
   1514c:	ldr	r2, [pc, #76]	; 151a0 <__assert_fail@plt+0x43c8>
   15150:	cmp	r3, r2
   15154:	bgt	15170 <__assert_fail@plt+0x4398>
   15158:	ldr	r2, [pc, #68]	; 151a4 <__assert_fail@plt+0x43cc>
   1515c:	cmp	r3, r2
   15160:	beq	15188 <__assert_fail@plt+0x43b0>
   15164:	cmp	r3, #0
   15168:	beq	15188 <__assert_fail@plt+0x43b0>
   1516c:	b	15190 <__assert_fail@plt+0x43b8>
   15170:	ldr	r2, [pc, #48]	; 151a8 <__assert_fail@plt+0x43d0>
   15174:	cmp	r3, r2
   15178:	beq	15188 <__assert_fail@plt+0x43b0>
   1517c:	ldr	r2, [pc, #40]	; 151ac <__assert_fail@plt+0x43d4>
   15180:	cmp	r3, r2
   15184:	bne	15190 <__assert_fail@plt+0x43b8>
   15188:	mov	r3, #0
   1518c:	b	15194 <__assert_fail@plt+0x43bc>
   15190:	mov	r3, #1
   15194:	mov	r0, r3
   15198:	sub	sp, fp, #4
   1519c:	pop	{fp, pc}
   151a0:	andeq	r6, r0, r9, ror #18
   151a4:			; <UNDEFINED> instruction: 0xff534d42
   151a8:	andeq	r9, r0, r0, lsr #31
   151ac:	movtpl	r4, #24911	; 0x614f
   151b0:	push	{r4, r5, r6, r7, fp, lr}
   151b4:	add	fp, sp, #20
   151b8:	mov	r5, r0
   151bc:	ldr	r3, [r5]
   151c0:	cmp	r3, #0
   151c4:	beq	151d8 <__assert_fail@plt+0x4400>
   151c8:	ldr	r3, [r5, #48]	; 0x30
   151cc:	and	r3, r3, #8192	; 0x2000
   151d0:	cmp	r3, #0
   151d4:	beq	151e0 <__assert_fail@plt+0x4408>
   151d8:	mov	r3, #0
   151dc:	b	15914 <__assert_fail@plt+0x4b3c>
   151e0:	ldr	r4, [r5]
   151e4:	ldrh	r6, [r4, #60]	; 0x3c
   151e8:	mov	r3, #3
   151ec:	strh	r3, [r4, #60]	; 0x3c
   151f0:	cmp	r6, #1
   151f4:	bne	15218 <__assert_fail@plt+0x4440>
   151f8:	mov	r2, #0
   151fc:	mov	r1, r4
   15200:	mov	r0, r5
   15204:	bl	16824 <__assert_fail@plt+0x5a4c>
   15208:	mov	r3, r0
   1520c:	strh	r3, [r4, #56]	; 0x38
   15210:	mov	r3, r4
   15214:	b	15914 <__assert_fail@plt+0x4b3c>
   15218:	cmp	r6, #2
   1521c:	bne	152bc <__assert_fail@plt+0x44e4>
   15220:	ldrh	r3, [r4, #56]	; 0x38
   15224:	cmp	r3, #12
   15228:	beq	15238 <__assert_fail@plt+0x4460>
   1522c:	ldrh	r3, [r4, #56]	; 0x38
   15230:	cmp	r3, #13
   15234:	bne	152bc <__assert_fail@plt+0x44e4>
   15238:	mov	r2, #1
   1523c:	mov	r1, r4
   15240:	mov	r0, r5
   15244:	bl	16824 <__assert_fail@plt+0x5a4c>
   15248:	mov	r3, r0
   1524c:	strh	r3, [r4, #56]	; 0x38
   15250:	ldrh	r3, [r4, #56]	; 0x38
   15254:	cmp	r3, #1
   15258:	bne	1566c <__assert_fail@plt+0x4894>
   1525c:	ldr	r3, [r5, #48]	; 0x30
   15260:	and	r3, r3, #4
   15264:	cmp	r3, #0
   15268:	bne	1566c <__assert_fail@plt+0x4894>
   1526c:	ldr	r1, [pc, #1704]	; 1591c <__assert_fail@plt+0x4b44>
   15270:	mov	r0, r5
   15274:	bl	146bc <__assert_fail@plt+0x38e4>
   15278:	mov	r3, r0
   1527c:	str	r3, [r4, #36]	; 0x24
   15280:	ldr	r3, [r4, #36]	; 0x24
   15284:	cmp	r3, #0
   15288:	bge	152a8 <__assert_fail@plt+0x44d0>
   1528c:	bl	10cd0 <__errno_location@plt>
   15290:	mov	r3, r0
   15294:	ldr	r3, [r3]
   15298:	str	r3, [r4, #32]
   1529c:	mov	r3, #7
   152a0:	strh	r3, [r4, #56]	; 0x38
   152a4:	b	1566c <__assert_fail@plt+0x4894>
   152a8:	ldrh	r3, [r4, #58]	; 0x3a
   152ac:	orr	r3, r3, #2
   152b0:	uxth	r3, r3
   152b4:	strh	r3, [r4, #58]	; 0x3a
   152b8:	b	1566c <__assert_fail@plt+0x4894>
   152bc:	ldrh	r3, [r4, #56]	; 0x38
   152c0:	cmp	r3, #1
   152c4:	bne	15474 <__assert_fail@plt+0x469c>
   152c8:	cmp	r6, #4
   152cc:	beq	152f4 <__assert_fail@plt+0x451c>
   152d0:	ldr	r3, [r5, #48]	; 0x30
   152d4:	and	r3, r3, #64	; 0x40
   152d8:	cmp	r3, #0
   152dc:	beq	1534c <__assert_fail@plt+0x4574>
   152e0:	ldrd	r0, [r4, #64]	; 0x40
   152e4:	ldrd	r2, [r5, #16]
   152e8:	cmp	r1, r3
   152ec:	cmpeq	r0, r2
   152f0:	beq	1534c <__assert_fail@plt+0x4574>
   152f4:	ldrh	r3, [r4, #58]	; 0x3a
   152f8:	and	r3, r3, #2
   152fc:	cmp	r3, #0
   15300:	beq	15310 <__assert_fail@plt+0x4538>
   15304:	ldr	r3, [r4, #36]	; 0x24
   15308:	mov	r0, r3
   1530c:	bl	10da8 <close@plt>
   15310:	ldr	r3, [r5, #4]
   15314:	cmp	r3, #0
   15318:	beq	15330 <__assert_fail@plt+0x4558>
   1531c:	ldr	r3, [r5, #4]
   15320:	mov	r0, r3
   15324:	bl	16c58 <__assert_fail@plt+0x5e80>
   15328:	mov	r3, #0
   1532c:	str	r3, [r5, #4]
   15330:	mov	r3, #6
   15334:	strh	r3, [r4, #56]	; 0x38
   15338:	mov	r1, r4
   1533c:	mov	r0, r5
   15340:	bl	142b8 <__assert_fail@plt+0x34e0>
   15344:	mov	r3, r4
   15348:	b	15914 <__assert_fail@plt+0x4b3c>
   1534c:	ldr	r3, [r5, #4]
   15350:	cmp	r3, #0
   15354:	beq	15388 <__assert_fail@plt+0x45b0>
   15358:	ldr	r3, [r5, #48]	; 0x30
   1535c:	and	r3, r3, #4096	; 0x1000
   15360:	cmp	r3, #0
   15364:	beq	15388 <__assert_fail@plt+0x45b0>
   15368:	ldr	r3, [r5, #48]	; 0x30
   1536c:	bic	r3, r3, #4096	; 0x1000
   15370:	str	r3, [r5, #48]	; 0x30
   15374:	ldr	r3, [r5, #4]
   15378:	mov	r0, r3
   1537c:	bl	16c58 <__assert_fail@plt+0x5e80>
   15380:	mov	r3, #0
   15384:	str	r3, [r5, #4]
   15388:	ldr	r3, [r5, #4]
   1538c:	cmp	r3, #0
   15390:	beq	153f8 <__assert_fail@plt+0x4620>
   15394:	ldr	r3, [r4, #24]
   15398:	mvn	r2, #0
   1539c:	mov	r1, r4
   153a0:	mov	r0, r5
   153a4:	bl	16f40 <__assert_fail@plt+0x6168>
   153a8:	mov	r3, r0
   153ac:	cmp	r3, #0
   153b0:	beq	15464 <__assert_fail@plt+0x468c>
   153b4:	bl	10cd0 <__errno_location@plt>
   153b8:	mov	r3, r0
   153bc:	ldr	r3, [r3]
   153c0:	str	r3, [r4, #32]
   153c4:	ldrh	r3, [r4, #58]	; 0x3a
   153c8:	orr	r3, r3, #1
   153cc:	uxth	r3, r3
   153d0:	strh	r3, [r4, #58]	; 0x3a
   153d4:	ldr	r4, [r5, #4]
   153d8:	b	153ec <__assert_fail@plt+0x4614>
   153dc:	ldr	r3, [r4, #4]
   153e0:	ldr	r3, [r3, #24]
   153e4:	str	r3, [r4, #24]
   153e8:	ldr	r4, [r4, #8]
   153ec:	cmp	r4, #0
   153f0:	bne	153dc <__assert_fail@plt+0x4604>
   153f4:	b	15464 <__assert_fail@plt+0x468c>
   153f8:	mov	r1, #3
   153fc:	mov	r0, r5
   15400:	bl	15cec <__assert_fail@plt+0x4f14>
   15404:	mov	r3, r0
   15408:	str	r3, [r5, #4]
   1540c:	ldr	r3, [r5, #4]
   15410:	cmp	r3, #0
   15414:	bne	15464 <__assert_fail@plt+0x468c>
   15418:	ldr	r3, [r5, #48]	; 0x30
   1541c:	and	r3, r3, #8192	; 0x2000
   15420:	cmp	r3, #0
   15424:	beq	15430 <__assert_fail@plt+0x4658>
   15428:	mov	r3, #0
   1542c:	b	15914 <__assert_fail@plt+0x4b3c>
   15430:	ldr	r3, [r4, #32]
   15434:	cmp	r3, #0
   15438:	beq	15450 <__assert_fail@plt+0x4678>
   1543c:	ldrh	r3, [r4, #56]	; 0x38
   15440:	cmp	r3, #4
   15444:	beq	15450 <__assert_fail@plt+0x4678>
   15448:	mov	r3, #7
   1544c:	strh	r3, [r4, #56]	; 0x38
   15450:	mov	r1, r4
   15454:	mov	r0, r5
   15458:	bl	142b8 <__assert_fail@plt+0x34e0>
   1545c:	mov	r3, r4
   15460:	b	15914 <__assert_fail@plt+0x4b3c>
   15464:	ldr	r4, [r5, #4]
   15468:	mov	r3, #0
   1546c:	str	r3, [r5, #4]
   15470:	b	155fc <__assert_fail@plt+0x4824>
   15474:	mov	r6, r4
   15478:	ldr	r3, [r4, #8]
   1547c:	cmp	r3, #0
   15480:	bne	154ec <__assert_fail@plt+0x4714>
   15484:	ldr	r3, [r4, #4]
   15488:	ldr	r3, [r3, #12]
   1548c:	cmp	r3, #0
   15490:	beq	154ec <__assert_fail@plt+0x4714>
   15494:	ldr	r4, [r6, #4]
   15498:	str	r4, [r5]
   1549c:	ldr	r2, [r5, #24]
   154a0:	ldr	r3, [r4, #40]	; 0x28
   154a4:	add	r3, r2, r3
   154a8:	mov	r2, #0
   154ac:	strb	r2, [r3]
   154b0:	mov	r1, #3
   154b4:	mov	r0, r5
   154b8:	bl	15cec <__assert_fail@plt+0x4f14>
   154bc:	mov	r4, r0
   154c0:	cmp	r4, #0
   154c4:	bne	154e0 <__assert_fail@plt+0x4708>
   154c8:	ldr	r3, [r5, #48]	; 0x30
   154cc:	and	r3, r3, #8192	; 0x2000
   154d0:	cmp	r3, #0
   154d4:	beq	15720 <__assert_fail@plt+0x4948>
   154d8:	mov	r3, #0
   154dc:	b	15914 <__assert_fail@plt+0x4b3c>
   154e0:	mov	r0, r6
   154e4:	bl	13f5c <__assert_fail@plt+0x3184>
   154e8:	b	155fc <__assert_fail@plt+0x4824>
   154ec:	ldr	r4, [r4, #8]
   154f0:	cmp	r4, #0
   154f4:	beq	15724 <__assert_fail@plt+0x494c>
   154f8:	str	r4, [r5]
   154fc:	mov	r0, r6
   15500:	bl	13f5c <__assert_fail@plt+0x3184>
   15504:	ldr	r3, [r4, #48]	; 0x30
   15508:	cmp	r3, #0
   1550c:	bne	15558 <__assert_fail@plt+0x4780>
   15510:	mov	r0, r5
   15514:	bl	145e4 <__assert_fail@plt+0x380c>
   15518:	mov	r3, r0
   1551c:	cmp	r3, #0
   15520:	beq	15538 <__assert_fail@plt+0x4760>
   15524:	ldr	r3, [r5, #48]	; 0x30
   15528:	orr	r3, r3, #8192	; 0x2000
   1552c:	str	r3, [r5, #48]	; 0x30
   15530:	mov	r3, #0
   15534:	b	15914 <__assert_fail@plt+0x4b3c>
   15538:	mov	r0, r5
   1553c:	bl	143f8 <__assert_fail@plt+0x3620>
   15540:	mov	r1, r4
   15544:	mov	r0, r5
   15548:	bl	14bcc <__assert_fail@plt+0x3df4>
   1554c:	mov	r0, r5
   15550:	bl	140ac <__assert_fail@plt+0x32d4>
   15554:	b	15670 <__assert_fail@plt+0x4898>
   15558:	ldrh	r3, [r4, #60]	; 0x3c
   1555c:	cmp	r3, #4
   15560:	bne	15568 <__assert_fail@plt+0x4790>
   15564:	b	15474 <__assert_fail@plt+0x469c>
   15568:	ldrh	r3, [r4, #60]	; 0x3c
   1556c:	cmp	r3, #2
   15570:	bne	155fc <__assert_fail@plt+0x4824>
   15574:	mov	r2, #1
   15578:	mov	r1, r4
   1557c:	mov	r0, r5
   15580:	bl	16824 <__assert_fail@plt+0x5a4c>
   15584:	mov	r3, r0
   15588:	strh	r3, [r4, #56]	; 0x38
   1558c:	ldrh	r3, [r4, #56]	; 0x38
   15590:	cmp	r3, #1
   15594:	bne	155f4 <__assert_fail@plt+0x481c>
   15598:	ldr	r3, [r5, #48]	; 0x30
   1559c:	and	r3, r3, #4
   155a0:	cmp	r3, #0
   155a4:	bne	155f4 <__assert_fail@plt+0x481c>
   155a8:	ldr	r1, [pc, #876]	; 1591c <__assert_fail@plt+0x4b44>
   155ac:	mov	r0, r5
   155b0:	bl	146bc <__assert_fail@plt+0x38e4>
   155b4:	mov	r3, r0
   155b8:	str	r3, [r4, #36]	; 0x24
   155bc:	ldr	r3, [r4, #36]	; 0x24
   155c0:	cmp	r3, #0
   155c4:	bge	155e4 <__assert_fail@plt+0x480c>
   155c8:	bl	10cd0 <__errno_location@plt>
   155cc:	mov	r3, r0
   155d0:	ldr	r3, [r3]
   155d4:	str	r3, [r4, #32]
   155d8:	mov	r3, #7
   155dc:	strh	r3, [r4, #56]	; 0x38
   155e0:	b	155f4 <__assert_fail@plt+0x481c>
   155e4:	ldrh	r3, [r4, #58]	; 0x3a
   155e8:	orr	r3, r3, #2
   155ec:	uxth	r3, r3
   155f0:	strh	r3, [r4, #58]	; 0x3a
   155f4:	mov	r3, #3
   155f8:	strh	r3, [r4, #60]	; 0x3c
   155fc:	ldr	r2, [r5, #24]
   15600:	ldr	r3, [r4, #4]
   15604:	ldr	r1, [r3, #28]
   15608:	ldr	r3, [r4, #4]
   1560c:	ldr	r3, [r3, #40]	; 0x28
   15610:	sub	r3, r3, #1
   15614:	add	r3, r1, r3
   15618:	ldrb	r3, [r3]
   1561c:	cmp	r3, #47	; 0x2f
   15620:	bne	15634 <__assert_fail@plt+0x485c>
   15624:	ldr	r3, [r4, #4]
   15628:	ldr	r3, [r3, #40]	; 0x28
   1562c:	sub	r3, r3, #1
   15630:	b	1563c <__assert_fail@plt+0x4864>
   15634:	ldr	r3, [r4, #4]
   15638:	ldr	r3, [r3, #40]	; 0x28
   1563c:	add	r6, r2, r3
   15640:	mov	r3, r6
   15644:	add	r6, r3, #1
   15648:	mov	r2, #47	; 0x2f
   1564c:	strb	r2, [r3]
   15650:	add	r1, r4, #168	; 0xa8
   15654:	ldr	r3, [r4, #52]	; 0x34
   15658:	add	r3, r3, #1
   1565c:	mov	r2, r3
   15660:	mov	r0, r6
   15664:	bl	10bb0 <memmove@plt>
   15668:	b	15670 <__assert_fail@plt+0x4898>
   1566c:	nop			; (mov r0, r0)
   15670:	str	r4, [r5]
   15674:	ldrh	r3, [r4, #56]	; 0x38
   15678:	cmp	r3, #11
   1567c:	bne	156c0 <__assert_fail@plt+0x48e8>
   15680:	ldrd	r2, [r4, #112]	; 0x70
   15684:	cmp	r3, #0
   15688:	cmpeq	r2, #2
   1568c:	bne	156ac <__assert_fail@plt+0x48d4>
   15690:	mov	r2, #0
   15694:	mov	r1, r4
   15698:	mov	r0, r5
   1569c:	bl	16824 <__assert_fail@plt+0x5a4c>
   156a0:	mov	r3, r0
   156a4:	strh	r3, [r4, #56]	; 0x38
   156a8:	b	156c0 <__assert_fail@plt+0x48e8>
   156ac:	ldrd	r2, [r4, #112]	; 0x70
   156b0:	cmp	r3, #0
   156b4:	cmpeq	r2, #1
   156b8:	beq	156c0 <__assert_fail@plt+0x48e8>
   156bc:	bl	10d9c <abort@plt>
   156c0:	ldrh	r3, [r4, #56]	; 0x38
   156c4:	cmp	r3, #1
   156c8:	bne	15718 <__assert_fail@plt+0x4940>
   156cc:	ldr	r3, [r4, #48]	; 0x30
   156d0:	cmp	r3, #0
   156d4:	bne	156e0 <__assert_fail@plt+0x4908>
   156d8:	ldrd	r2, [r4, #64]	; 0x40
   156dc:	strd	r2, [r5, #16]
   156e0:	mov	r1, r4
   156e4:	mov	r0, r5
   156e8:	bl	14178 <__assert_fail@plt+0x33a0>
   156ec:	mov	r3, r0
   156f0:	eor	r3, r3, #1
   156f4:	uxtb	r3, r3
   156f8:	cmp	r3, #0
   156fc:	beq	15718 <__assert_fail@plt+0x4940>
   15700:	bl	10cd0 <__errno_location@plt>
   15704:	mov	r2, r0
   15708:	mov	r3, #12
   1570c:	str	r3, [r2]
   15710:	mov	r3, #0
   15714:	b	15914 <__assert_fail@plt+0x4b3c>
   15718:	mov	r3, r4
   1571c:	b	15914 <__assert_fail@plt+0x4b3c>
   15720:	nop			; (mov r0, r0)
   15724:	ldr	r4, [r6, #4]
   15728:	str	r4, [r5]
   1572c:	mov	r0, r6
   15730:	bl	13f5c <__assert_fail@plt+0x3184>
   15734:	ldr	r3, [r4, #48]	; 0x30
   15738:	cmn	r3, #1
   1573c:	bne	15768 <__assert_fail@plt+0x4990>
   15740:	mov	r0, r4
   15744:	bl	13f5c <__assert_fail@plt+0x3184>
   15748:	bl	10cd0 <__errno_location@plt>
   1574c:	mov	r2, r0
   15750:	mov	r3, #0
   15754:	str	r3, [r2]
   15758:	mov	r3, #0
   1575c:	str	r3, [r5]
   15760:	mov	r3, #0
   15764:	b	15914 <__assert_fail@plt+0x4b3c>
   15768:	ldrh	r3, [r4, #56]	; 0x38
   1576c:	cmp	r3, #11
   15770:	bne	15778 <__assert_fail@plt+0x49a0>
   15774:	bl	10d9c <abort@plt>
   15778:	ldr	r2, [r5, #24]
   1577c:	ldr	r3, [r4, #40]	; 0x28
   15780:	add	r3, r2, r3
   15784:	mov	r2, #0
   15788:	strb	r2, [r3]
   1578c:	ldr	r3, [r4, #48]	; 0x30
   15790:	cmp	r3, #0
   15794:	bne	157cc <__assert_fail@plt+0x49f4>
   15798:	mov	r0, r5
   1579c:	bl	145e4 <__assert_fail@plt+0x380c>
   157a0:	mov	r3, r0
   157a4:	cmp	r3, #0
   157a8:	beq	158b8 <__assert_fail@plt+0x4ae0>
   157ac:	bl	10cd0 <__errno_location@plt>
   157b0:	mov	r3, r0
   157b4:	ldr	r3, [r3]
   157b8:	str	r3, [r4, #32]
   157bc:	ldr	r3, [r5, #48]	; 0x30
   157c0:	orr	r3, r3, #8192	; 0x2000
   157c4:	str	r3, [r5, #48]	; 0x30
   157c8:	b	158b8 <__assert_fail@plt+0x4ae0>
   157cc:	ldrh	r3, [r4, #58]	; 0x3a
   157d0:	and	r3, r3, #2
   157d4:	cmp	r3, #0
   157d8:	beq	1586c <__assert_fail@plt+0x4a94>
   157dc:	ldr	r3, [r5, #48]	; 0x30
   157e0:	and	r3, r3, #4
   157e4:	cmp	r3, #0
   157e8:	bne	1585c <__assert_fail@plt+0x4a84>
   157ec:	ldr	r3, [r5, #48]	; 0x30
   157f0:	and	r3, r3, #512	; 0x200
   157f4:	cmp	r3, #0
   157f8:	beq	15818 <__assert_fail@plt+0x4a40>
   157fc:	ldr	r3, [r4, #36]	; 0x24
   15800:	mov	r2, #1
   15804:	mov	r1, r3
   15808:	mov	r0, r5
   1580c:	bl	14520 <__assert_fail@plt+0x3748>
   15810:	mov	r3, #0
   15814:	b	15838 <__assert_fail@plt+0x4a60>
   15818:	ldr	r3, [r4, #36]	; 0x24
   1581c:	mov	r0, r3
   15820:	bl	10d60 <fchdir@plt>
   15824:	mov	r3, r0
   15828:	cmp	r3, #0
   1582c:	movne	r3, #1
   15830:	moveq	r3, #0
   15834:	uxtb	r3, r3
   15838:	cmp	r3, #0
   1583c:	beq	1585c <__assert_fail@plt+0x4a84>
   15840:	bl	10cd0 <__errno_location@plt>
   15844:	mov	r3, r0
   15848:	ldr	r3, [r3]
   1584c:	str	r3, [r4, #32]
   15850:	ldr	r3, [r5, #48]	; 0x30
   15854:	orr	r3, r3, #8192	; 0x2000
   15858:	str	r3, [r5, #48]	; 0x30
   1585c:	ldr	r3, [r4, #36]	; 0x24
   15860:	mov	r0, r3
   15864:	bl	10da8 <close@plt>
   15868:	b	158b8 <__assert_fail@plt+0x4ae0>
   1586c:	ldrh	r3, [r4, #58]	; 0x3a
   15870:	and	r3, r3, #1
   15874:	cmp	r3, #0
   15878:	bne	158b8 <__assert_fail@plt+0x4ae0>
   1587c:	ldr	r1, [r4, #4]
   15880:	ldr	r3, [pc, #152]	; 15920 <__assert_fail@plt+0x4b48>
   15884:	mvn	r2, #0
   15888:	mov	r0, r5
   1588c:	bl	16f40 <__assert_fail@plt+0x6168>
   15890:	mov	r3, r0
   15894:	cmp	r3, #0
   15898:	beq	158b8 <__assert_fail@plt+0x4ae0>
   1589c:	bl	10cd0 <__errno_location@plt>
   158a0:	mov	r3, r0
   158a4:	ldr	r3, [r3]
   158a8:	str	r3, [r4, #32]
   158ac:	ldr	r3, [r5, #48]	; 0x30
   158b0:	orr	r3, r3, #8192	; 0x2000
   158b4:	str	r3, [r5, #48]	; 0x30
   158b8:	ldrh	r3, [r4, #56]	; 0x38
   158bc:	cmp	r3, #2
   158c0:	beq	158f8 <__assert_fail@plt+0x4b20>
   158c4:	ldr	r3, [r4, #32]
   158c8:	cmp	r3, #0
   158cc:	beq	158d8 <__assert_fail@plt+0x4b00>
   158d0:	mov	r3, #7
   158d4:	b	158dc <__assert_fail@plt+0x4b04>
   158d8:	mov	r3, #6
   158dc:	strh	r3, [r4, #56]	; 0x38
   158e0:	ldr	r3, [r4, #32]
   158e4:	cmp	r3, #0
   158e8:	bne	158f8 <__assert_fail@plt+0x4b20>
   158ec:	mov	r1, r4
   158f0:	mov	r0, r5
   158f4:	bl	142b8 <__assert_fail@plt+0x34e0>
   158f8:	ldr	r3, [r5, #48]	; 0x30
   158fc:	and	r3, r3, #8192	; 0x2000
   15900:	cmp	r3, #0
   15904:	bne	15910 <__assert_fail@plt+0x4b38>
   15908:	mov	r3, r4
   1590c:	b	15914 <__assert_fail@plt+0x4b3c>
   15910:	mov	r3, #0
   15914:	mov	r0, r3
   15918:	pop	{r4, r5, r6, r7, fp, pc}
   1591c:	muleq	r1, r0, sl
   15920:	muleq	r1, r4, sl
   15924:	push	{fp, lr}
   15928:	add	fp, sp, #4
   1592c:	sub	sp, sp, #16
   15930:	str	r0, [fp, #-8]
   15934:	str	r1, [fp, #-12]
   15938:	str	r2, [fp, #-16]
   1593c:	ldr	r3, [fp, #-16]
   15940:	cmp	r3, #0
   15944:	beq	15990 <__assert_fail@plt+0x4bb8>
   15948:	ldr	r3, [fp, #-16]
   1594c:	cmp	r3, #1
   15950:	beq	15990 <__assert_fail@plt+0x4bb8>
   15954:	ldr	r3, [fp, #-16]
   15958:	cmp	r3, #2
   1595c:	beq	15990 <__assert_fail@plt+0x4bb8>
   15960:	ldr	r3, [fp, #-16]
   15964:	cmp	r3, #3
   15968:	beq	15990 <__assert_fail@plt+0x4bb8>
   1596c:	ldr	r3, [fp, #-16]
   15970:	cmp	r3, #4
   15974:	beq	15990 <__assert_fail@plt+0x4bb8>
   15978:	bl	10cd0 <__errno_location@plt>
   1597c:	mov	r2, r0
   15980:	mov	r3, #22
   15984:	str	r3, [r2]
   15988:	mov	r3, #1
   1598c:	b	159a4 <__assert_fail@plt+0x4bcc>
   15990:	ldr	r3, [fp, #-16]
   15994:	uxth	r2, r3
   15998:	ldr	r3, [fp, #-12]
   1599c:	strh	r2, [r3, #60]	; 0x3c
   159a0:	mov	r3, #0
   159a4:	mov	r0, r3
   159a8:	sub	sp, fp, #4
   159ac:	pop	{fp, pc}
   159b0:	push	{r4, r5, fp, lr}
   159b4:	add	fp, sp, #12
   159b8:	sub	sp, sp, #16
   159bc:	mov	r4, r0
   159c0:	str	r1, [fp, #-24]	; 0xffffffe8
   159c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159c8:	cmp	r3, #0
   159cc:	beq	159f4 <__assert_fail@plt+0x4c1c>
   159d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159d4:	cmp	r3, #4096	; 0x1000
   159d8:	beq	159f4 <__assert_fail@plt+0x4c1c>
   159dc:	bl	10cd0 <__errno_location@plt>
   159e0:	mov	r2, r0
   159e4:	mov	r3, #22
   159e8:	str	r3, [r2]
   159ec:	mov	r3, #0
   159f0:	b	15b88 <__assert_fail@plt+0x4db0>
   159f4:	ldr	r5, [r4]
   159f8:	bl	10cd0 <__errno_location@plt>
   159fc:	mov	r2, r0
   15a00:	mov	r3, #0
   15a04:	str	r3, [r2]
   15a08:	ldr	r3, [r4, #48]	; 0x30
   15a0c:	and	r3, r3, #8192	; 0x2000
   15a10:	cmp	r3, #0
   15a14:	beq	15a20 <__assert_fail@plt+0x4c48>
   15a18:	mov	r3, #0
   15a1c:	b	15b88 <__assert_fail@plt+0x4db0>
   15a20:	ldrh	r3, [r5, #56]	; 0x38
   15a24:	cmp	r3, #9
   15a28:	bne	15a34 <__assert_fail@plt+0x4c5c>
   15a2c:	ldr	r3, [r5, #8]
   15a30:	b	15b88 <__assert_fail@plt+0x4db0>
   15a34:	ldrh	r3, [r5, #56]	; 0x38
   15a38:	cmp	r3, #1
   15a3c:	beq	15a48 <__assert_fail@plt+0x4c70>
   15a40:	mov	r3, #0
   15a44:	b	15b88 <__assert_fail@plt+0x4db0>
   15a48:	ldr	r3, [r4, #4]
   15a4c:	cmp	r3, #0
   15a50:	beq	15a60 <__assert_fail@plt+0x4c88>
   15a54:	ldr	r3, [r4, #4]
   15a58:	mov	r0, r3
   15a5c:	bl	16c58 <__assert_fail@plt+0x5e80>
   15a60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a64:	cmp	r3, #4096	; 0x1000
   15a68:	bne	15a84 <__assert_fail@plt+0x4cac>
   15a6c:	ldr	r3, [r4, #48]	; 0x30
   15a70:	orr	r3, r3, #4096	; 0x1000
   15a74:	str	r3, [r4, #48]	; 0x30
   15a78:	mov	r3, #2
   15a7c:	str	r3, [fp, #-24]	; 0xffffffe8
   15a80:	b	15a8c <__assert_fail@plt+0x4cb4>
   15a84:	mov	r3, #1
   15a88:	str	r3, [fp, #-24]	; 0xffffffe8
   15a8c:	ldr	r3, [r5, #48]	; 0x30
   15a90:	cmp	r3, #0
   15a94:	bne	15ab8 <__assert_fail@plt+0x4ce0>
   15a98:	ldr	r3, [r5, #24]
   15a9c:	ldrb	r3, [r3]
   15aa0:	cmp	r3, #47	; 0x2f
   15aa4:	beq	15ab8 <__assert_fail@plt+0x4ce0>
   15aa8:	ldr	r3, [r4, #48]	; 0x30
   15aac:	and	r3, r3, #4
   15ab0:	cmp	r3, #0
   15ab4:	beq	15ad4 <__assert_fail@plt+0x4cfc>
   15ab8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15abc:	mov	r0, r4
   15ac0:	bl	15cec <__assert_fail@plt+0x4f14>
   15ac4:	mov	r3, r0
   15ac8:	str	r3, [r4, #4]
   15acc:	ldr	r3, [r4, #4]
   15ad0:	b	15b88 <__assert_fail@plt+0x4db0>
   15ad4:	ldr	r1, [pc, #184]	; 15b94 <__assert_fail@plt+0x4dbc>
   15ad8:	mov	r0, r4
   15adc:	bl	146bc <__assert_fail@plt+0x38e4>
   15ae0:	str	r0, [fp, #-16]
   15ae4:	ldr	r3, [fp, #-16]
   15ae8:	cmp	r3, #0
   15aec:	bge	15b00 <__assert_fail@plt+0x4d28>
   15af0:	mov	r3, #0
   15af4:	str	r3, [r4, #4]
   15af8:	mov	r3, #0
   15afc:	b	15b88 <__assert_fail@plt+0x4db0>
   15b00:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15b04:	mov	r0, r4
   15b08:	bl	15cec <__assert_fail@plt+0x4f14>
   15b0c:	mov	r3, r0
   15b10:	str	r3, [r4, #4]
   15b14:	ldr	r3, [r4, #48]	; 0x30
   15b18:	and	r3, r3, #512	; 0x200
   15b1c:	cmp	r3, #0
   15b20:	beq	15b38 <__assert_fail@plt+0x4d60>
   15b24:	mov	r2, #1
   15b28:	ldr	r1, [fp, #-16]
   15b2c:	mov	r0, r4
   15b30:	bl	14520 <__assert_fail@plt+0x3748>
   15b34:	b	15b84 <__assert_fail@plt+0x4dac>
   15b38:	ldr	r0, [fp, #-16]
   15b3c:	bl	10d60 <fchdir@plt>
   15b40:	mov	r3, r0
   15b44:	cmp	r3, #0
   15b48:	beq	15b7c <__assert_fail@plt+0x4da4>
   15b4c:	bl	10cd0 <__errno_location@plt>
   15b50:	mov	r3, r0
   15b54:	ldr	r3, [r3]
   15b58:	str	r3, [fp, #-20]	; 0xffffffec
   15b5c:	ldr	r0, [fp, #-16]
   15b60:	bl	10da8 <close@plt>
   15b64:	bl	10cd0 <__errno_location@plt>
   15b68:	mov	r2, r0
   15b6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b70:	str	r3, [r2]
   15b74:	mov	r3, #0
   15b78:	b	15b88 <__assert_fail@plt+0x4db0>
   15b7c:	ldr	r0, [fp, #-16]
   15b80:	bl	10da8 <close@plt>
   15b84:	ldr	r3, [r4, #4]
   15b88:	mov	r0, r3
   15b8c:	sub	sp, fp, #12
   15b90:	pop	{r4, r5, fp, pc}
   15b94:	muleq	r1, r0, sl
   15b98:	push	{fp}		; (str fp, [sp, #-4]!)
   15b9c:	add	fp, sp, #0
   15ba0:	sub	sp, sp, #12
   15ba4:	str	r0, [fp, #-8]
   15ba8:	str	r1, [fp, #-12]
   15bac:	ldr	r3, [fp, #-8]
   15bb0:	ldr	r3, [r3]
   15bb4:	ldrd	r0, [r3, #160]	; 0xa0
   15bb8:	ldr	r3, [fp, #-12]
   15bbc:	ldr	r3, [r3]
   15bc0:	ldrd	r2, [r3, #160]	; 0xa0
   15bc4:	cmp	r1, r3
   15bc8:	cmpeq	r0, r2
   15bcc:	movhi	r3, #1
   15bd0:	movls	r3, #0
   15bd4:	uxtb	r3, r3
   15bd8:	mov	ip, r3
   15bdc:	ldr	r3, [fp, #-8]
   15be0:	ldr	r3, [r3]
   15be4:	ldrd	r0, [r3, #160]	; 0xa0
   15be8:	ldr	r3, [fp, #-12]
   15bec:	ldr	r3, [r3]
   15bf0:	ldrd	r2, [r3, #160]	; 0xa0
   15bf4:	cmp	r1, r3
   15bf8:	cmpeq	r0, r2
   15bfc:	movcc	r3, #1
   15c00:	movcs	r3, #0
   15c04:	uxtb	r3, r3
   15c08:	sub	r3, ip, r3
   15c0c:	mov	r0, r3
   15c10:	add	sp, fp, #0
   15c14:	pop	{fp}		; (ldr fp, [sp], #4)
   15c18:	bx	lr
   15c1c:	push	{fp}		; (str fp, [sp, #-4]!)
   15c20:	add	fp, sp, #0
   15c24:	sub	sp, sp, #20
   15c28:	str	r0, [fp, #-16]
   15c2c:	str	r1, [fp, #-20]	; 0xffffffec
   15c30:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c34:	sub	r3, r3, #1
   15c38:	cmp	r3, #11
   15c3c:	ldrls	pc, [pc, r3, lsl #2]
   15c40:	b	15cc8 <__assert_fail@plt+0x4ef0>
   15c44:	muleq	r1, r8, ip
   15c48:	andeq	r5, r1, r0, lsl #25
   15c4c:	andeq	r5, r1, r8, asr #25
   15c50:	andeq	r5, r1, ip, lsl #25
   15c54:	andeq	r5, r1, r8, asr #25
   15c58:	andeq	r5, r1, r4, ror ip
   15c5c:	andeq	r5, r1, r8, asr #25
   15c60:			; <UNDEFINED> instruction: 0x00015cb0
   15c64:	andeq	r5, r1, r8, asr #25
   15c68:	andeq	r5, r1, r4, lsr #25
   15c6c:	andeq	r5, r1, r8, asr #25
   15c70:			; <UNDEFINED> instruction: 0x00015cbc
   15c74:	mov	r3, #24576	; 0x6000
   15c78:	str	r3, [fp, #-8]
   15c7c:	b	15cd0 <__assert_fail@plt+0x4ef8>
   15c80:	mov	r3, #8192	; 0x2000
   15c84:	str	r3, [fp, #-8]
   15c88:	b	15cd0 <__assert_fail@plt+0x4ef8>
   15c8c:	mov	r3, #16384	; 0x4000
   15c90:	str	r3, [fp, #-8]
   15c94:	b	15cd0 <__assert_fail@plt+0x4ef8>
   15c98:	mov	r3, #4096	; 0x1000
   15c9c:	str	r3, [fp, #-8]
   15ca0:	b	15cd0 <__assert_fail@plt+0x4ef8>
   15ca4:	mov	r3, #40960	; 0xa000
   15ca8:	str	r3, [fp, #-8]
   15cac:	b	15cd0 <__assert_fail@plt+0x4ef8>
   15cb0:	mov	r3, #32768	; 0x8000
   15cb4:	str	r3, [fp, #-8]
   15cb8:	b	15cd0 <__assert_fail@plt+0x4ef8>
   15cbc:	mov	r3, #49152	; 0xc000
   15cc0:	str	r3, [fp, #-8]
   15cc4:	b	15cd0 <__assert_fail@plt+0x4ef8>
   15cc8:	mov	r3, #0
   15ccc:	str	r3, [fp, #-8]
   15cd0:	ldr	r3, [fp, #-16]
   15cd4:	ldr	r2, [fp, #-8]
   15cd8:	str	r2, [r3, #16]
   15cdc:	nop			; (mov r0, r0)
   15ce0:	add	sp, fp, #0
   15ce4:	pop	{fp}		; (ldr fp, [sp], #4)
   15ce8:	bx	lr
   15cec:	push	{r4, r5, r6, r7, fp, lr}
   15cf0:	add	fp, sp, #20
   15cf4:	sub	sp, sp, #80	; 0x50
   15cf8:	mov	r4, r0
   15cfc:	str	r1, [fp, #-96]	; 0xffffffa0
   15d00:	ldr	r3, [r4]
   15d04:	str	r3, [fp, #-44]	; 0xffffffd4
   15d08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d0c:	ldr	r3, [r3, #12]
   15d10:	cmp	r3, #0
   15d14:	movne	r3, #1
   15d18:	moveq	r3, #0
   15d1c:	strb	r3, [fp, #-45]	; 0xffffffd3
   15d20:	mov	r3, #0
   15d24:	strb	r3, [fp, #-37]	; 0xffffffdb
   15d28:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15d2c:	cmp	r3, #0
   15d30:	beq	15dac <__assert_fail@plt+0x4fd4>
   15d34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d38:	ldr	r3, [r3, #12]
   15d3c:	str	r3, [fp, #-52]	; 0xffffffcc
   15d40:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15d44:	bl	10d3c <dirfd@plt>
   15d48:	mov	r3, r0
   15d4c:	str	r3, [fp, #-92]	; 0xffffffa4
   15d50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15d54:	cmp	r3, #0
   15d58:	bge	15f10 <__assert_fail@plt+0x5138>
   15d5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d60:	ldr	r3, [r3, #12]
   15d64:	mov	r0, r3
   15d68:	bl	10dc0 <closedir@plt>
   15d6c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d70:	mov	r2, #0
   15d74:	str	r2, [r3, #12]
   15d78:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15d7c:	cmp	r3, #3
   15d80:	bne	15da4 <__assert_fail@plt+0x4fcc>
   15d84:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15d88:	mov	r2, #4
   15d8c:	strh	r2, [r3, #56]	; 0x38
   15d90:	bl	10cd0 <__errno_location@plt>
   15d94:	mov	r3, r0
   15d98:	ldr	r2, [r3]
   15d9c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15da0:	str	r2, [r3, #32]
   15da4:	mov	r3, #0
   15da8:	b	16804 <__assert_fail@plt+0x5a2c>
   15dac:	ldr	r3, [r4, #48]	; 0x30
   15db0:	and	r3, r3, #4
   15db4:	cmp	r3, #0
   15db8:	bne	15dd4 <__assert_fail@plt+0x4ffc>
   15dbc:	ldr	r3, [r4, #48]	; 0x30
   15dc0:	and	r3, r3, #512	; 0x200
   15dc4:	cmp	r3, #0
   15dc8:	beq	15dd4 <__assert_fail@plt+0x4ffc>
   15dcc:	ldr	r0, [r4, #32]
   15dd0:	b	15dd8 <__assert_fail@plt+0x5000>
   15dd4:	mvn	r0, #99	; 0x63
   15dd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15ddc:	ldr	r1, [r3, #24]
   15de0:	ldr	r3, [r4, #48]	; 0x30
   15de4:	and	r3, r3, #16
   15de8:	cmp	r3, #0
   15dec:	beq	15e18 <__assert_fail@plt+0x5040>
   15df0:	ldr	r3, [r4, #48]	; 0x30
   15df4:	and	r3, r3, #1
   15df8:	cmp	r3, #0
   15dfc:	beq	15e10 <__assert_fail@plt+0x5038>
   15e00:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e04:	ldr	r3, [r3, #48]	; 0x30
   15e08:	cmp	r3, #0
   15e0c:	beq	15e18 <__assert_fail@plt+0x5040>
   15e10:	mov	r2, #32768	; 0x8000
   15e14:	b	15e1c <__assert_fail@plt+0x5044>
   15e18:	mov	r2, #0
   15e1c:	sub	r3, fp, #92	; 0x5c
   15e20:	bl	1a590 <__assert_fail@plt+0x97b8>
   15e24:	mov	r3, r0
   15e28:	mov	r2, r3
   15e2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e30:	str	r2, [r3, #12]
   15e34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e38:	ldr	r3, [r3, #12]
   15e3c:	cmp	r3, #0
   15e40:	bne	15e78 <__assert_fail@plt+0x50a0>
   15e44:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15e48:	cmp	r3, #3
   15e4c:	bne	15e70 <__assert_fail@plt+0x5098>
   15e50:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e54:	mov	r2, #4
   15e58:	strh	r2, [r3, #56]	; 0x38
   15e5c:	bl	10cd0 <__errno_location@plt>
   15e60:	mov	r3, r0
   15e64:	ldr	r2, [r3]
   15e68:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e6c:	str	r2, [r3, #32]
   15e70:	mov	r3, #0
   15e74:	b	16804 <__assert_fail@plt+0x5a2c>
   15e78:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15e7c:	ldrh	r3, [r3, #56]	; 0x38
   15e80:	cmp	r3, #11
   15e84:	bne	15eac <__assert_fail@plt+0x50d4>
   15e88:	mov	r2, #0
   15e8c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15e90:	mov	r0, r4
   15e94:	bl	16824 <__assert_fail@plt+0x5a4c>
   15e98:	mov	r3, r0
   15e9c:	mov	r2, r3
   15ea0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15ea4:	strh	r2, [r3, #56]	; 0x38
   15ea8:	b	15f10 <__assert_fail@plt+0x5138>
   15eac:	ldr	r3, [r4, #48]	; 0x30
   15eb0:	and	r3, r3, #256	; 0x100
   15eb4:	cmp	r3, #0
   15eb8:	beq	15f10 <__assert_fail@plt+0x5138>
   15ebc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15ec0:	mov	r0, r4
   15ec4:	bl	142b8 <__assert_fail@plt+0x34e0>
   15ec8:	mov	r2, #0
   15ecc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15ed0:	mov	r0, r4
   15ed4:	bl	16824 <__assert_fail@plt+0x5a4c>
   15ed8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15edc:	mov	r0, r4
   15ee0:	bl	14178 <__assert_fail@plt+0x33a0>
   15ee4:	mov	r3, r0
   15ee8:	eor	r3, r3, #1
   15eec:	uxtb	r3, r3
   15ef0:	cmp	r3, #0
   15ef4:	beq	15f10 <__assert_fail@plt+0x5138>
   15ef8:	bl	10cd0 <__errno_location@plt>
   15efc:	mov	r2, r0
   15f00:	mov	r3, #12
   15f04:	str	r3, [r2]
   15f08:	mov	r3, #0
   15f0c:	b	16804 <__assert_fail@plt+0x5a2c>
   15f10:	ldr	r3, [r4, #44]	; 0x2c
   15f14:	cmp	r3, #0
   15f18:	beq	15f24 <__assert_fail@plt+0x514c>
   15f1c:	mvn	r3, #0
   15f20:	b	15f28 <__assert_fail@plt+0x5150>
   15f24:	ldr	r3, [pc, #2276]	; 16810 <__assert_fail@plt+0x5a38>
   15f28:	str	r3, [fp, #-56]	; 0xffffffc8
   15f2c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15f30:	cmp	r3, #0
   15f34:	beq	15f44 <__assert_fail@plt+0x516c>
   15f38:	mov	r3, #1
   15f3c:	strb	r3, [fp, #-25]	; 0xffffffe7
   15f40:	b	160e0 <__assert_fail@plt+0x5308>
   15f44:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15f48:	cmp	r3, #2
   15f4c:	beq	15fb4 <__assert_fail@plt+0x51dc>
   15f50:	ldr	r3, [r4, #48]	; 0x30
   15f54:	and	r3, r3, #8
   15f58:	cmp	r3, #0
   15f5c:	beq	15fac <__assert_fail@plt+0x51d4>
   15f60:	ldr	r3, [r4, #48]	; 0x30
   15f64:	and	r3, r3, #16
   15f68:	cmp	r3, #0
   15f6c:	beq	15fac <__assert_fail@plt+0x51d4>
   15f70:	ldr	r3, [r4, #48]	; 0x30
   15f74:	and	r3, r3, #32
   15f78:	cmp	r3, #0
   15f7c:	bne	15fac <__assert_fail@plt+0x51d4>
   15f80:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15f84:	ldr	r3, [r3, #84]	; 0x54
   15f88:	cmp	r3, #2
   15f8c:	bne	15fac <__assert_fail@plt+0x51d4>
   15f90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15f94:	mov	r1, r3
   15f98:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15f9c:	bl	1511c <__assert_fail@plt+0x4344>
   15fa0:	mov	r3, r0
   15fa4:	cmp	r3, #0
   15fa8:	bne	15fb4 <__assert_fail@plt+0x51dc>
   15fac:	mov	r3, #1
   15fb0:	b	15fb8 <__assert_fail@plt+0x51e0>
   15fb4:	mov	r3, #0
   15fb8:	strb	r3, [fp, #-25]	; 0xffffffe7
   15fbc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15fc0:	and	r3, r3, #1
   15fc4:	strb	r3, [fp, #-25]	; 0xffffffe7
   15fc8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15fcc:	cmp	r3, #0
   15fd0:	bne	15fe0 <__assert_fail@plt+0x5208>
   15fd4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15fd8:	cmp	r3, #3
   15fdc:	bne	160e0 <__assert_fail@plt+0x5308>
   15fe0:	ldr	r3, [r4, #48]	; 0x30
   15fe4:	and	r3, r3, #512	; 0x200
   15fe8:	cmp	r3, #0
   15fec:	beq	1600c <__assert_fail@plt+0x5234>
   15ff0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15ff4:	mov	r2, #3
   15ff8:	ldr	r1, [pc, #2068]	; 16814 <__assert_fail@plt+0x5a3c>
   15ffc:	mov	r0, r3
   16000:	bl	1adac <__assert_fail@plt+0x9fd4>
   16004:	mov	r3, r0
   16008:	str	r3, [fp, #-92]	; 0xffffffa4
   1600c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16010:	cmp	r3, #0
   16014:	blt	16038 <__assert_fail@plt+0x5260>
   16018:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1601c:	mov	r3, #0
   16020:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16024:	mov	r0, r4
   16028:	bl	16f40 <__assert_fail@plt+0x6168>
   1602c:	mov	r3, r0
   16030:	cmp	r3, #0
   16034:	beq	160d8 <__assert_fail@plt+0x5300>
   16038:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1603c:	cmp	r3, #0
   16040:	beq	16064 <__assert_fail@plt+0x528c>
   16044:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16048:	cmp	r3, #3
   1604c:	bne	16064 <__assert_fail@plt+0x528c>
   16050:	bl	10cd0 <__errno_location@plt>
   16054:	mov	r3, r0
   16058:	ldr	r2, [r3]
   1605c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16060:	str	r2, [r3, #32]
   16064:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16068:	ldrh	r3, [r3, #58]	; 0x3a
   1606c:	orr	r3, r3, #1
   16070:	uxth	r2, r3
   16074:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16078:	strh	r2, [r3, #58]	; 0x3a
   1607c:	mov	r3, #0
   16080:	strb	r3, [fp, #-25]	; 0xffffffe7
   16084:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16088:	ldr	r3, [r3, #12]
   1608c:	mov	r0, r3
   16090:	bl	10dc0 <closedir@plt>
   16094:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16098:	mov	r2, #0
   1609c:	str	r2, [r3, #12]
   160a0:	ldr	r3, [r4, #48]	; 0x30
   160a4:	and	r3, r3, #512	; 0x200
   160a8:	cmp	r3, #0
   160ac:	beq	160c8 <__assert_fail@plt+0x52f0>
   160b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   160b4:	cmp	r3, #0
   160b8:	blt	160c8 <__assert_fail@plt+0x52f0>
   160bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   160c0:	mov	r0, r3
   160c4:	bl	10da8 <close@plt>
   160c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   160cc:	mov	r2, #0
   160d0:	str	r2, [r3, #12]
   160d4:	b	160e0 <__assert_fail@plt+0x5308>
   160d8:	mov	r3, #1
   160dc:	strb	r3, [fp, #-25]	; 0xffffffe7
   160e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   160e4:	ldr	r2, [r3, #28]
   160e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   160ec:	ldr	r3, [r3, #40]	; 0x28
   160f0:	sub	r3, r3, #1
   160f4:	add	r3, r2, r3
   160f8:	ldrb	r3, [r3]
   160fc:	cmp	r3, #47	; 0x2f
   16100:	bne	16114 <__assert_fail@plt+0x533c>
   16104:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16108:	ldr	r3, [r3, #40]	; 0x28
   1610c:	sub	r3, r3, #1
   16110:	b	1611c <__assert_fail@plt+0x5344>
   16114:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16118:	ldr	r3, [r3, #40]	; 0x28
   1611c:	str	r3, [fp, #-60]	; 0xffffffc4
   16120:	ldr	r3, [r4, #48]	; 0x30
   16124:	and	r3, r3, #4
   16128:	cmp	r3, #0
   1612c:	beq	16158 <__assert_fail@plt+0x5380>
   16130:	ldr	r2, [r4, #24]
   16134:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16138:	add	r3, r2, r3
   1613c:	str	r3, [fp, #-36]	; 0xffffffdc
   16140:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16144:	add	r2, r3, #1
   16148:	str	r2, [fp, #-36]	; 0xffffffdc
   1614c:	mov	r2, #47	; 0x2f
   16150:	strb	r2, [r3]
   16154:	b	16160 <__assert_fail@plt+0x5388>
   16158:	mov	r3, #0
   1615c:	str	r3, [fp, #-36]	; 0xffffffdc
   16160:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16164:	add	r3, r3, #1
   16168:	str	r3, [fp, #-60]	; 0xffffffc4
   1616c:	ldr	r2, [r4, #36]	; 0x24
   16170:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16174:	sub	r3, r2, r3
   16178:	str	r3, [fp, #-32]	; 0xffffffe0
   1617c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16180:	ldr	r3, [r3, #48]	; 0x30
   16184:	add	r3, r3, #1
   16188:	str	r3, [fp, #-64]	; 0xffffffc0
   1618c:	mov	r3, #0
   16190:	strb	r3, [fp, #-26]	; 0xffffffe6
   16194:	mov	r7, #0
   16198:	mov	r3, #0
   1619c:	str	r3, [fp, #-24]	; 0xffffffe8
   161a0:	mov	r6, #0
   161a4:	b	165f4 <__assert_fail@plt+0x581c>
   161a8:	bl	10cd0 <__errno_location@plt>
   161ac:	mov	r2, r0
   161b0:	mov	r3, #0
   161b4:	str	r3, [r2]
   161b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   161bc:	ldr	r3, [r3, #12]
   161c0:	mov	r0, r3
   161c4:	bl	10d24 <readdir64@plt>
   161c8:	str	r0, [fp, #-68]	; 0xffffffbc
   161cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   161d0:	cmp	r3, #0
   161d4:	bne	1622c <__assert_fail@plt+0x5454>
   161d8:	bl	10cd0 <__errno_location@plt>
   161dc:	mov	r3, r0
   161e0:	ldr	r3, [r3]
   161e4:	cmp	r3, #0
   161e8:	beq	16608 <__assert_fail@plt+0x5830>
   161ec:	bl	10cd0 <__errno_location@plt>
   161f0:	mov	r3, r0
   161f4:	ldr	r2, [r3]
   161f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   161fc:	str	r2, [r3, #32]
   16200:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   16204:	cmp	r3, #0
   16208:	bne	16214 <__assert_fail@plt+0x543c>
   1620c:	cmp	r6, #0
   16210:	beq	1621c <__assert_fail@plt+0x5444>
   16214:	mov	r2, #7
   16218:	b	16220 <__assert_fail@plt+0x5448>
   1621c:	mov	r2, #4
   16220:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16224:	strh	r2, [r3, #56]	; 0x38
   16228:	b	16608 <__assert_fail@plt+0x5830>
   1622c:	ldr	r3, [r4, #48]	; 0x30
   16230:	and	r3, r3, #32
   16234:	cmp	r3, #0
   16238:	bne	16280 <__assert_fail@plt+0x54a8>
   1623c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16240:	ldrb	r3, [r3, #19]
   16244:	cmp	r3, #46	; 0x2e
   16248:	bne	16280 <__assert_fail@plt+0x54a8>
   1624c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16250:	ldrb	r3, [r3, #20]
   16254:	cmp	r3, #0
   16258:	beq	165f4 <__assert_fail@plt+0x581c>
   1625c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16260:	ldrb	r3, [r3, #20]
   16264:	cmp	r3, #46	; 0x2e
   16268:	bne	16280 <__assert_fail@plt+0x54a8>
   1626c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16270:	ldrb	r3, [r3, #21]
   16274:	cmp	r3, #0
   16278:	bne	16280 <__assert_fail@plt+0x54a8>
   1627c:	b	165f4 <__assert_fail@plt+0x581c>
   16280:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16284:	add	r3, r3, #19
   16288:	mov	r0, r3
   1628c:	bl	10ca0 <strlen@plt>
   16290:	str	r0, [fp, #-72]	; 0xffffffb8
   16294:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16298:	add	r3, r3, #19
   1629c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   162a0:	mov	r1, r3
   162a4:	mov	r0, r4
   162a8:	bl	16b9c <__assert_fail@plt+0x5dc4>
   162ac:	mov	r5, r0
   162b0:	cmp	r5, #0
   162b4:	beq	16304 <__assert_fail@plt+0x552c>
   162b8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   162bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162c0:	cmp	r2, r3
   162c4:	bcc	163bc <__assert_fail@plt+0x55e4>
   162c8:	ldr	r3, [r4, #24]
   162cc:	str	r3, [fp, #-76]	; 0xffffffb4
   162d0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   162d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   162d8:	add	r3, r2, r3
   162dc:	add	r3, r3, #1
   162e0:	mov	r1, r3
   162e4:	mov	r0, r4
   162e8:	bl	16ca0 <__assert_fail@plt+0x5ec8>
   162ec:	mov	r3, r0
   162f0:	eor	r3, r3, #1
   162f4:	uxtb	r3, r3
   162f8:	cmp	r3, #0
   162fc:	beq	16374 <__assert_fail@plt+0x559c>
   16300:	b	16308 <__assert_fail@plt+0x5530>
   16304:	nop			; (mov r0, r0)
   16308:	bl	10cd0 <__errno_location@plt>
   1630c:	mov	r3, r0
   16310:	ldr	r3, [r3]
   16314:	str	r3, [fp, #-88]	; 0xffffffa8
   16318:	mov	r0, r5
   1631c:	bl	13f5c <__assert_fail@plt+0x3184>
   16320:	mov	r0, r7
   16324:	bl	16c58 <__assert_fail@plt+0x5e80>
   16328:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1632c:	ldr	r3, [r3, #12]
   16330:	mov	r0, r3
   16334:	bl	10dc0 <closedir@plt>
   16338:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1633c:	mov	r2, #0
   16340:	str	r2, [r3, #12]
   16344:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16348:	mov	r2, #7
   1634c:	strh	r2, [r3, #56]	; 0x38
   16350:	ldr	r3, [r4, #48]	; 0x30
   16354:	orr	r3, r3, #8192	; 0x2000
   16358:	str	r3, [r4, #48]	; 0x30
   1635c:	bl	10cd0 <__errno_location@plt>
   16360:	mov	r2, r0
   16364:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16368:	str	r3, [r2]
   1636c:	mov	r3, #0
   16370:	b	16804 <__assert_fail@plt+0x5a2c>
   16374:	ldr	r2, [r4, #24]
   16378:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1637c:	cmp	r2, r3
   16380:	beq	163ac <__assert_fail@plt+0x55d4>
   16384:	mov	r3, #1
   16388:	strb	r3, [fp, #-26]	; 0xffffffe6
   1638c:	ldr	r3, [r4, #48]	; 0x30
   16390:	and	r3, r3, #4
   16394:	cmp	r3, #0
   16398:	beq	163ac <__assert_fail@plt+0x55d4>
   1639c:	ldr	r2, [r4, #24]
   163a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   163a4:	add	r3, r2, r3
   163a8:	str	r3, [fp, #-36]	; 0xffffffdc
   163ac:	ldr	r2, [r4, #36]	; 0x24
   163b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   163b4:	sub	r3, r2, r3
   163b8:	str	r3, [fp, #-32]	; 0xffffffe0
   163bc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   163c0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   163c4:	add	r3, r2, r3
   163c8:	str	r3, [fp, #-80]	; 0xffffffb0
   163cc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   163d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   163d4:	cmp	r2, r3
   163d8:	bcs	16438 <__assert_fail@plt+0x5660>
   163dc:	mov	r0, r5
   163e0:	bl	13f5c <__assert_fail@plt+0x3184>
   163e4:	mov	r0, r7
   163e8:	bl	16c58 <__assert_fail@plt+0x5e80>
   163ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   163f0:	ldr	r3, [r3, #12]
   163f4:	mov	r0, r3
   163f8:	bl	10dc0 <closedir@plt>
   163fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16400:	mov	r2, #0
   16404:	str	r2, [r3, #12]
   16408:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1640c:	mov	r2, #7
   16410:	strh	r2, [r3, #56]	; 0x38
   16414:	ldr	r3, [r4, #48]	; 0x30
   16418:	orr	r3, r3, #8192	; 0x2000
   1641c:	str	r3, [r4, #48]	; 0x30
   16420:	bl	10cd0 <__errno_location@plt>
   16424:	mov	r2, r0
   16428:	mov	r3, #36	; 0x24
   1642c:	str	r3, [r2]
   16430:	mov	r3, #0
   16434:	b	16804 <__assert_fail@plt+0x5a2c>
   16438:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1643c:	str	r3, [r5, #48]	; 0x30
   16440:	ldr	r3, [r4]
   16444:	str	r3, [r5, #4]
   16448:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1644c:	str	r3, [r5, #40]	; 0x28
   16450:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16454:	ldrd	r2, [r3]
   16458:	strd	r2, [r5, #160]	; 0xa0
   1645c:	ldr	r3, [r4, #48]	; 0x30
   16460:	and	r3, r3, #4
   16464:	cmp	r3, #0
   16468:	beq	16490 <__assert_fail@plt+0x56b8>
   1646c:	ldr	r3, [r5, #28]
   16470:	str	r3, [r5, #24]
   16474:	add	r1, r5, #168	; 0xa8
   16478:	ldr	r3, [r5, #52]	; 0x34
   1647c:	add	r3, r3, #1
   16480:	mov	r2, r3
   16484:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16488:	bl	10bb0 <memmove@plt>
   1648c:	b	16498 <__assert_fail@plt+0x56c0>
   16490:	add	r3, r5, #168	; 0xa8
   16494:	str	r3, [r5, #24]
   16498:	ldr	r3, [r4, #44]	; 0x2c
   1649c:	cmp	r3, #0
   164a0:	beq	164b4 <__assert_fail@plt+0x56dc>
   164a4:	ldr	r3, [r4, #48]	; 0x30
   164a8:	and	r3, r3, #1024	; 0x400
   164ac:	cmp	r3, #0
   164b0:	beq	16574 <__assert_fail@plt+0x579c>
   164b4:	ldr	r3, [r4, #48]	; 0x30
   164b8:	and	r3, r3, #8
   164bc:	cmp	r3, #0
   164c0:	beq	1650c <__assert_fail@plt+0x5734>
   164c4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   164c8:	ldrb	r3, [r3, #18]
   164cc:	cmp	r3, #0
   164d0:	beq	1650c <__assert_fail@plt+0x5734>
   164d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   164d8:	ldrb	r3, [r3, #18]
   164dc:	cmp	r3, #4
   164e0:	beq	1650c <__assert_fail@plt+0x5734>
   164e4:	ldr	r3, [r4, #48]	; 0x30
   164e8:	and	r3, r3, #16
   164ec:	cmp	r3, #0
   164f0:	bne	16504 <__assert_fail@plt+0x572c>
   164f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   164f8:	ldrb	r3, [r3, #18]
   164fc:	cmp	r3, #10
   16500:	beq	1650c <__assert_fail@plt+0x5734>
   16504:	mov	r3, #1
   16508:	b	16510 <__assert_fail@plt+0x5738>
   1650c:	mov	r3, #0
   16510:	strb	r3, [fp, #-81]	; 0xffffffaf
   16514:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   16518:	and	r3, r3, #1
   1651c:	strb	r3, [fp, #-81]	; 0xffffffaf
   16520:	mov	r3, #11
   16524:	strh	r3, [r5, #56]	; 0x38
   16528:	add	r2, r5, #64	; 0x40
   1652c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16530:	ldrb	r3, [r3, #18]
   16534:	mov	r1, r3
   16538:	mov	r0, r2
   1653c:	bl	15c1c <__assert_fail@plt+0x4e44>
   16540:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   16544:	cmp	r3, #0
   16548:	movne	r3, #1
   1654c:	moveq	r3, #0
   16550:	uxtb	r3, r3
   16554:	eor	r3, r3, #1
   16558:	uxtb	r3, r3
   1655c:	and	r3, r3, #1
   16560:	uxtb	r3, r3
   16564:	mov	r1, r3
   16568:	mov	r0, r5
   1656c:	bl	144c0 <__assert_fail@plt+0x36e8>
   16570:	b	1658c <__assert_fail@plt+0x57b4>
   16574:	mov	r2, #0
   16578:	mov	r1, r5
   1657c:	mov	r0, r4
   16580:	bl	16824 <__assert_fail@plt+0x5a4c>
   16584:	mov	r3, r0
   16588:	strh	r3, [r5, #56]	; 0x38
   1658c:	mov	r3, #0
   16590:	str	r3, [r5, #8]
   16594:	cmp	r7, #0
   16598:	bne	165a8 <__assert_fail@plt+0x57d0>
   1659c:	str	r5, [fp, #-24]	; 0xffffffe8
   165a0:	ldr	r7, [fp, #-24]	; 0xffffffe8
   165a4:	b	165b4 <__assert_fail@plt+0x57dc>
   165a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165ac:	str	r5, [r3, #8]
   165b0:	str	r5, [fp, #-24]	; 0xffffffe8
   165b4:	ldr	r3, [pc, #604]	; 16818 <__assert_fail@plt+0x5a40>
   165b8:	cmp	r6, r3
   165bc:	bne	165e4 <__assert_fail@plt+0x580c>
   165c0:	ldr	r3, [r4, #44]	; 0x2c
   165c4:	cmp	r3, #0
   165c8:	bne	165e4 <__assert_fail@plt+0x580c>
   165cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   165d0:	mov	r1, r3
   165d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   165d8:	bl	150b0 <__assert_fail@plt+0x42d8>
   165dc:	mov	r3, r0
   165e0:	strb	r3, [fp, #-37]	; 0xffffffdb
   165e4:	add	r6, r6, #1
   165e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   165ec:	cmp	r3, r6
   165f0:	bls	1663c <__assert_fail@plt+0x5864>
   165f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   165f8:	ldr	r3, [r3, #12]
   165fc:	cmp	r3, #0
   16600:	bne	161a8 <__assert_fail@plt+0x53d0>
   16604:	b	1660c <__assert_fail@plt+0x5834>
   16608:	nop			; (mov r0, r0)
   1660c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16610:	ldr	r3, [r3, #12]
   16614:	cmp	r3, #0
   16618:	beq	16640 <__assert_fail@plt+0x5868>
   1661c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16620:	ldr	r3, [r3, #12]
   16624:	mov	r0, r3
   16628:	bl	10dc0 <closedir@plt>
   1662c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16630:	mov	r2, #0
   16634:	str	r2, [r3, #12]
   16638:	b	16640 <__assert_fail@plt+0x5868>
   1663c:	nop			; (mov r0, r0)
   16640:	ldrb	r3, [fp, #-26]	; 0xffffffe6
   16644:	cmp	r3, #0
   16648:	beq	16658 <__assert_fail@plt+0x5880>
   1664c:	mov	r1, r7
   16650:	mov	r0, r4
   16654:	bl	16d8c <__assert_fail@plt+0x5fb4>
   16658:	ldr	r3, [r4, #48]	; 0x30
   1665c:	and	r3, r3, #4
   16660:	cmp	r3, #0
   16664:	beq	16698 <__assert_fail@plt+0x58c0>
   16668:	ldr	r2, [r4, #36]	; 0x24
   1666c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16670:	cmp	r2, r3
   16674:	beq	16680 <__assert_fail@plt+0x58a8>
   16678:	cmp	r6, #0
   1667c:	bne	1668c <__assert_fail@plt+0x58b4>
   16680:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16684:	sub	r3, r3, #1
   16688:	str	r3, [fp, #-36]	; 0xffffffdc
   1668c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16690:	mov	r2, #0
   16694:	strb	r2, [r3]
   16698:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   1669c:	eor	r3, r3, #1
   166a0:	uxtb	r3, r3
   166a4:	cmp	r3, #0
   166a8:	beq	16758 <__assert_fail@plt+0x5980>
   166ac:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   166b0:	cmp	r3, #0
   166b4:	beq	16758 <__assert_fail@plt+0x5980>
   166b8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   166bc:	cmp	r3, #1
   166c0:	beq	166cc <__assert_fail@plt+0x58f4>
   166c4:	cmp	r6, #0
   166c8:	bne	16758 <__assert_fail@plt+0x5980>
   166cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   166d0:	ldr	r3, [r3, #48]	; 0x30
   166d4:	cmp	r3, #0
   166d8:	bne	166fc <__assert_fail@plt+0x5924>
   166dc:	mov	r0, r4
   166e0:	bl	145e4 <__assert_fail@plt+0x380c>
   166e4:	mov	r3, r0
   166e8:	cmp	r3, #0
   166ec:	movne	r3, #1
   166f0:	moveq	r3, #0
   166f4:	uxtb	r3, r3
   166f8:	b	16728 <__assert_fail@plt+0x5950>
   166fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16700:	ldr	r1, [r3, #4]
   16704:	ldr	r3, [pc, #272]	; 1681c <__assert_fail@plt+0x5a44>
   16708:	mvn	r2, #0
   1670c:	mov	r0, r4
   16710:	bl	16f40 <__assert_fail@plt+0x6168>
   16714:	mov	r3, r0
   16718:	cmp	r3, #0
   1671c:	movne	r3, #1
   16720:	moveq	r3, #0
   16724:	uxtb	r3, r3
   16728:	cmp	r3, #0
   1672c:	beq	16758 <__assert_fail@plt+0x5980>
   16730:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16734:	mov	r2, #7
   16738:	strh	r2, [r3, #56]	; 0x38
   1673c:	ldr	r3, [r4, #48]	; 0x30
   16740:	orr	r3, r3, #8192	; 0x2000
   16744:	str	r3, [r4, #48]	; 0x30
   16748:	mov	r0, r7
   1674c:	bl	16c58 <__assert_fail@plt+0x5e80>
   16750:	mov	r3, #0
   16754:	b	16804 <__assert_fail@plt+0x5a2c>
   16758:	cmp	r6, #0
   1675c:	bne	167a8 <__assert_fail@plt+0x59d0>
   16760:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16764:	cmp	r3, #3
   16768:	bne	16798 <__assert_fail@plt+0x59c0>
   1676c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16770:	ldrh	r3, [r3, #56]	; 0x38
   16774:	cmp	r3, #4
   16778:	beq	16798 <__assert_fail@plt+0x59c0>
   1677c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16780:	ldrh	r3, [r3, #56]	; 0x38
   16784:	cmp	r3, #7
   16788:	beq	16798 <__assert_fail@plt+0x59c0>
   1678c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16790:	mov	r2, #6
   16794:	strh	r2, [r3, #56]	; 0x38
   16798:	mov	r0, r7
   1679c:	bl	16c58 <__assert_fail@plt+0x5e80>
   167a0:	mov	r3, #0
   167a4:	b	16804 <__assert_fail@plt+0x5a2c>
   167a8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   167ac:	cmp	r3, #0
   167b0:	beq	167d8 <__assert_fail@plt+0x5a00>
   167b4:	ldr	r3, [pc, #100]	; 16820 <__assert_fail@plt+0x5a48>
   167b8:	str	r3, [r4, #44]	; 0x2c
   167bc:	mov	r2, r6
   167c0:	mov	r1, r7
   167c4:	mov	r0, r4
   167c8:	bl	16a54 <__assert_fail@plt+0x5c7c>
   167cc:	mov	r7, r0
   167d0:	mov	r3, #0
   167d4:	str	r3, [r4, #44]	; 0x2c
   167d8:	ldr	r3, [r4, #44]	; 0x2c
   167dc:	cmp	r3, #0
   167e0:	beq	16800 <__assert_fail@plt+0x5a28>
   167e4:	cmp	r6, #1
   167e8:	bls	16800 <__assert_fail@plt+0x5a28>
   167ec:	mov	r2, r6
   167f0:	mov	r1, r7
   167f4:	mov	r0, r4
   167f8:	bl	16a54 <__assert_fail@plt+0x5c7c>
   167fc:	mov	r7, r0
   16800:	mov	r3, r7
   16804:	mov	r0, r3
   16808:	sub	sp, fp, #20
   1680c:	pop	{r4, r5, r6, r7, fp, pc}
   16810:	andeq	r8, r1, r0, lsr #13
   16814:	andeq	r0, r0, r6, lsl #8
   16818:	andeq	r2, r0, r0, lsl r7
   1681c:	muleq	r1, r4, sl
   16820:	muleq	r1, r8, fp
   16824:	push	{r4, fp, lr}
   16828:	add	fp, sp, #8
   1682c:	sub	sp, sp, #20
   16830:	str	r0, [fp, #-24]	; 0xffffffe8
   16834:	mov	r4, r1
   16838:	mov	r3, r2
   1683c:	strb	r3, [fp, #-25]	; 0xffffffe7
   16840:	add	r3, r4, #64	; 0x40
   16844:	str	r3, [fp, #-16]
   16848:	ldr	r3, [r4, #48]	; 0x30
   1684c:	cmp	r3, #0
   16850:	bne	16870 <__assert_fail@plt+0x5a98>
   16854:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16858:	ldr	r3, [r3, #48]	; 0x30
   1685c:	and	r3, r3, #1
   16860:	cmp	r3, #0
   16864:	beq	16870 <__assert_fail@plt+0x5a98>
   16868:	mov	r3, #1
   1686c:	strb	r3, [fp, #-25]	; 0xffffffe7
   16870:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16874:	ldr	r3, [r3, #48]	; 0x30
   16878:	and	r3, r3, #2
   1687c:	cmp	r3, #0
   16880:	bne	16890 <__assert_fail@plt+0x5ab8>
   16884:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   16888:	cmp	r3, #0
   1688c:	beq	16908 <__assert_fail@plt+0x5b30>
   16890:	ldr	r3, [r4, #24]
   16894:	ldr	r1, [fp, #-16]
   16898:	mov	r0, r3
   1689c:	bl	1b8d0 <__assert_fail@plt+0xaaf8>
   168a0:	mov	r3, r0
   168a4:	cmp	r3, #0
   168a8:	beq	16954 <__assert_fail@plt+0x5b7c>
   168ac:	bl	10cd0 <__errno_location@plt>
   168b0:	mov	r3, r0
   168b4:	ldr	r3, [r3]
   168b8:	cmp	r3, #2
   168bc:	bne	168f4 <__assert_fail@plt+0x5b1c>
   168c0:	ldr	r3, [r4, #24]
   168c4:	ldr	r1, [fp, #-16]
   168c8:	mov	r0, r3
   168cc:	bl	1b8f0 <__assert_fail@plt+0xab18>
   168d0:	mov	r3, r0
   168d4:	cmp	r3, #0
   168d8:	bne	168f4 <__assert_fail@plt+0x5b1c>
   168dc:	bl	10cd0 <__errno_location@plt>
   168e0:	mov	r2, r0
   168e4:	mov	r3, #0
   168e8:	str	r3, [r2]
   168ec:	mov	r3, #13
   168f0:	b	169f8 <__assert_fail@plt+0x5c20>
   168f4:	bl	10cd0 <__errno_location@plt>
   168f8:	mov	r3, r0
   168fc:	ldr	r3, [r3]
   16900:	str	r3, [r4, #32]
   16904:	b	1693c <__assert_fail@plt+0x5b64>
   16908:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1690c:	ldr	r0, [r3, #32]
   16910:	ldr	r1, [r4, #24]
   16914:	mov	r3, #256	; 0x100
   16918:	ldr	r2, [fp, #-16]
   1691c:	bl	1b900 <__assert_fail@plt+0xab28>
   16920:	mov	r3, r0
   16924:	cmp	r3, #0
   16928:	beq	16954 <__assert_fail@plt+0x5b7c>
   1692c:	bl	10cd0 <__errno_location@plt>
   16930:	mov	r3, r0
   16934:	ldr	r3, [r3]
   16938:	str	r3, [r4, #32]
   1693c:	mov	r2, #104	; 0x68
   16940:	mov	r1, #0
   16944:	ldr	r0, [fp, #-16]
   16948:	bl	10ce8 <memset@plt>
   1694c:	mov	r3, #10
   16950:	b	169f8 <__assert_fail@plt+0x5c20>
   16954:	ldr	r3, [fp, #-16]
   16958:	ldr	r3, [r3, #16]
   1695c:	and	r3, r3, #61440	; 0xf000
   16960:	cmp	r3, #16384	; 0x4000
   16964:	bne	169bc <__assert_fail@plt+0x5be4>
   16968:	ldrb	r3, [r4, #168]	; 0xa8
   1696c:	cmp	r3, #46	; 0x2e
   16970:	bne	169b4 <__assert_fail@plt+0x5bdc>
   16974:	ldrb	r3, [r4, #169]	; 0xa9
   16978:	cmp	r3, #0
   1697c:	beq	16998 <__assert_fail@plt+0x5bc0>
   16980:	ldrb	r3, [r4, #169]	; 0xa9
   16984:	cmp	r3, #46	; 0x2e
   16988:	bne	169b4 <__assert_fail@plt+0x5bdc>
   1698c:	ldrb	r3, [r4, #170]	; 0xaa
   16990:	cmp	r3, #0
   16994:	bne	169b4 <__assert_fail@plt+0x5bdc>
   16998:	ldr	r3, [r4, #48]	; 0x30
   1699c:	cmp	r3, #0
   169a0:	bne	169ac <__assert_fail@plt+0x5bd4>
   169a4:	mov	r3, #1
   169a8:	b	169f8 <__assert_fail@plt+0x5c20>
   169ac:	mov	r3, #5
   169b0:	b	169f8 <__assert_fail@plt+0x5c20>
   169b4:	mov	r3, #1
   169b8:	b	169f8 <__assert_fail@plt+0x5c20>
   169bc:	ldr	r3, [fp, #-16]
   169c0:	ldr	r3, [r3, #16]
   169c4:	and	r3, r3, #61440	; 0xf000
   169c8:	cmp	r3, #40960	; 0xa000
   169cc:	bne	169d8 <__assert_fail@plt+0x5c00>
   169d0:	mov	r3, #12
   169d4:	b	169f8 <__assert_fail@plt+0x5c20>
   169d8:	ldr	r3, [fp, #-16]
   169dc:	ldr	r3, [r3, #16]
   169e0:	and	r3, r3, #61440	; 0xf000
   169e4:	cmp	r3, #32768	; 0x8000
   169e8:	bne	169f4 <__assert_fail@plt+0x5c1c>
   169ec:	mov	r3, #8
   169f0:	b	169f8 <__assert_fail@plt+0x5c20>
   169f4:	mov	r3, #3
   169f8:	mov	r0, r3
   169fc:	sub	sp, fp, #8
   16a00:	pop	{r4, fp, pc}
   16a04:	push	{fp, lr}
   16a08:	add	fp, sp, #4
   16a0c:	sub	sp, sp, #16
   16a10:	str	r0, [fp, #-16]
   16a14:	str	r1, [fp, #-20]	; 0xffffffec
   16a18:	ldr	r3, [fp, #-16]
   16a1c:	str	r3, [fp, #-8]
   16a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a24:	str	r3, [fp, #-12]
   16a28:	ldr	r3, [fp, #-8]
   16a2c:	ldr	r3, [r3]
   16a30:	ldr	r3, [r3, #44]	; 0x2c
   16a34:	ldr	r3, [r3, #44]	; 0x2c
   16a38:	ldr	r1, [fp, #-12]
   16a3c:	ldr	r0, [fp, #-8]
   16a40:	blx	r3
   16a44:	mov	r3, r0
   16a48:	mov	r0, r3
   16a4c:	sub	sp, fp, #4
   16a50:	pop	{fp, pc}
   16a54:	push	{r4, r5, r6, fp, lr}
   16a58:	add	fp, sp, #16
   16a5c:	sub	sp, sp, #28
   16a60:	str	r0, [fp, #-40]	; 0xffffffd8
   16a64:	str	r1, [fp, #-44]	; 0xffffffd4
   16a68:	mov	r5, r2
   16a6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16a70:	ldr	r3, [r3, #44]	; 0x2c
   16a74:	str	r3, [fp, #-24]	; 0xffffffe8
   16a78:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16a7c:	ldr	r3, [r3, #40]	; 0x28
   16a80:	cmp	r3, r5
   16a84:	bcs	16b10 <__assert_fail@plt+0x5d38>
   16a88:	add	r2, r5, #40	; 0x28
   16a8c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16a90:	str	r2, [r3, #40]	; 0x28
   16a94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16a98:	ldr	r3, [r3, #40]	; 0x28
   16a9c:	cmn	r3, #-1073741823	; 0xc0000001
   16aa0:	bhi	16ad4 <__assert_fail@plt+0x5cfc>
   16aa4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16aa8:	ldr	r2, [r3, #8]
   16aac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16ab0:	ldr	r3, [r3, #40]	; 0x28
   16ab4:	lsl	r3, r3, #2
   16ab8:	mov	r1, r3
   16abc:	mov	r0, r2
   16ac0:	bl	1a824 <__assert_fail@plt+0x9a4c>
   16ac4:	str	r0, [fp, #-28]	; 0xffffffe4
   16ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16acc:	cmp	r3, #0
   16ad0:	bne	16b04 <__assert_fail@plt+0x5d2c>
   16ad4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16ad8:	ldr	r3, [r3, #8]
   16adc:	mov	r0, r3
   16ae0:	bl	13f5c <__assert_fail@plt+0x3184>
   16ae4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16ae8:	mov	r2, #0
   16aec:	str	r2, [r3, #8]
   16af0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16af4:	mov	r2, #0
   16af8:	str	r2, [r3, #40]	; 0x28
   16afc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16b00:	b	16b90 <__assert_fail@plt+0x5db8>
   16b04:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16b08:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16b0c:	str	r2, [r3, #8]
   16b10:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16b14:	ldr	r4, [r3, #8]
   16b18:	ldr	r6, [fp, #-44]	; 0xffffffd4
   16b1c:	b	16b30 <__assert_fail@plt+0x5d58>
   16b20:	mov	r3, r4
   16b24:	add	r4, r3, #4
   16b28:	str	r6, [r3]
   16b2c:	ldr	r6, [r6, #8]
   16b30:	cmp	r6, #0
   16b34:	bne	16b20 <__assert_fail@plt+0x5d48>
   16b38:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16b3c:	ldr	r0, [r3, #8]
   16b40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b44:	mov	r2, #4
   16b48:	mov	r1, r5
   16b4c:	bl	10d6c <qsort@plt>
   16b50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16b54:	ldr	r4, [r3, #8]
   16b58:	ldr	r3, [r4]
   16b5c:	str	r3, [fp, #-44]	; 0xffffffd4
   16b60:	b	16b74 <__assert_fail@plt+0x5d9c>
   16b64:	ldr	r3, [r4]
   16b68:	ldr	r2, [r4, #4]
   16b6c:	str	r2, [r3, #8]
   16b70:	add	r4, r4, #4
   16b74:	sub	r5, r5, #1
   16b78:	cmp	r5, #0
   16b7c:	bne	16b64 <__assert_fail@plt+0x5d8c>
   16b80:	ldr	r3, [r4]
   16b84:	mov	r2, #0
   16b88:	str	r2, [r3, #8]
   16b8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16b90:	mov	r0, r3
   16b94:	sub	sp, fp, #16
   16b98:	pop	{r4, r5, r6, fp, pc}
   16b9c:	push	{r4, r5, fp, lr}
   16ba0:	add	fp, sp, #12
   16ba4:	sub	sp, sp, #16
   16ba8:	str	r0, [fp, #-24]	; 0xffffffe8
   16bac:	str	r1, [fp, #-28]	; 0xffffffe4
   16bb0:	mov	r5, r2
   16bb4:	add	r3, r5, #176	; 0xb0
   16bb8:	bic	r3, r3, #7
   16bbc:	str	r3, [fp, #-16]
   16bc0:	ldr	r0, [fp, #-16]
   16bc4:	bl	1a77c <__assert_fail@plt+0x99a4>
   16bc8:	mov	r3, r0
   16bcc:	mov	r4, r3
   16bd0:	cmp	r4, #0
   16bd4:	bne	16be0 <__assert_fail@plt+0x5e08>
   16bd8:	mov	r3, #0
   16bdc:	b	16c4c <__assert_fail@plt+0x5e74>
   16be0:	add	r3, r4, #168	; 0xa8
   16be4:	mov	r2, r5
   16be8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16bec:	mov	r0, r3
   16bf0:	bl	10bc8 <memcpy@plt>
   16bf4:	add	r3, r4, r5
   16bf8:	mov	r2, #0
   16bfc:	strb	r2, [r3, #168]	; 0xa8
   16c00:	str	r5, [r4, #52]	; 0x34
   16c04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c08:	str	r3, [r4, #44]	; 0x2c
   16c0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c10:	ldr	r3, [r3, #24]
   16c14:	str	r3, [r4, #28]
   16c18:	mov	r3, #0
   16c1c:	str	r3, [r4, #32]
   16c20:	mov	r3, #0
   16c24:	str	r3, [r4, #12]
   16c28:	mov	r3, #0
   16c2c:	strh	r3, [r4, #58]	; 0x3a
   16c30:	mov	r3, #3
   16c34:	strh	r3, [r4, #60]	; 0x3c
   16c38:	mov	r3, #0
   16c3c:	str	r3, [r4, #16]
   16c40:	mov	r3, #0
   16c44:	str	r3, [r4, #20]
   16c48:	mov	r3, r4
   16c4c:	mov	r0, r3
   16c50:	sub	sp, fp, #12
   16c54:	pop	{r4, r5, fp, pc}
   16c58:	push	{r4, r5, fp, lr}
   16c5c:	add	fp, sp, #12
   16c60:	mov	r5, r0
   16c64:	b	16c8c <__assert_fail@plt+0x5eb4>
   16c68:	ldr	r5, [r5, #8]
   16c6c:	ldr	r3, [r4, #12]
   16c70:	cmp	r3, #0
   16c74:	beq	16c84 <__assert_fail@plt+0x5eac>
   16c78:	ldr	r3, [r4, #12]
   16c7c:	mov	r0, r3
   16c80:	bl	10dc0 <closedir@plt>
   16c84:	mov	r0, r4
   16c88:	bl	13f5c <__assert_fail@plt+0x3184>
   16c8c:	mov	r4, r5
   16c90:	cmp	r4, #0
   16c94:	bne	16c68 <__assert_fail@plt+0x5e90>
   16c98:	nop			; (mov r0, r0)
   16c9c:	pop	{r4, r5, fp, pc}
   16ca0:	push	{fp, lr}
   16ca4:	add	fp, sp, #4
   16ca8:	sub	sp, sp, #16
   16cac:	str	r0, [fp, #-16]
   16cb0:	str	r1, [fp, #-20]	; 0xffffffec
   16cb4:	ldr	r3, [fp, #-16]
   16cb8:	ldr	r2, [r3, #36]	; 0x24
   16cbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cc0:	add	r3, r2, r3
   16cc4:	add	r3, r3, #256	; 0x100
   16cc8:	str	r3, [fp, #-8]
   16ccc:	ldr	r3, [fp, #-16]
   16cd0:	ldr	r2, [r3, #36]	; 0x24
   16cd4:	ldr	r3, [fp, #-8]
   16cd8:	cmp	r2, r3
   16cdc:	bls	16d14 <__assert_fail@plt+0x5f3c>
   16ce0:	ldr	r3, [fp, #-16]
   16ce4:	ldr	r3, [r3, #24]
   16ce8:	mov	r0, r3
   16cec:	bl	13f5c <__assert_fail@plt+0x3184>
   16cf0:	ldr	r3, [fp, #-16]
   16cf4:	mov	r2, #0
   16cf8:	str	r2, [r3, #24]
   16cfc:	bl	10cd0 <__errno_location@plt>
   16d00:	mov	r2, r0
   16d04:	mov	r3, #36	; 0x24
   16d08:	str	r3, [r2]
   16d0c:	mov	r3, #0
   16d10:	b	16d80 <__assert_fail@plt+0x5fa8>
   16d14:	ldr	r3, [fp, #-16]
   16d18:	ldr	r2, [fp, #-8]
   16d1c:	str	r2, [r3, #36]	; 0x24
   16d20:	ldr	r3, [fp, #-16]
   16d24:	ldr	r2, [r3, #24]
   16d28:	ldr	r3, [fp, #-16]
   16d2c:	ldr	r3, [r3, #36]	; 0x24
   16d30:	mov	r1, r3
   16d34:	mov	r0, r2
   16d38:	bl	1a824 <__assert_fail@plt+0x9a4c>
   16d3c:	str	r0, [fp, #-12]
   16d40:	ldr	r3, [fp, #-12]
   16d44:	cmp	r3, #0
   16d48:	bne	16d70 <__assert_fail@plt+0x5f98>
   16d4c:	ldr	r3, [fp, #-16]
   16d50:	ldr	r3, [r3, #24]
   16d54:	mov	r0, r3
   16d58:	bl	13f5c <__assert_fail@plt+0x3184>
   16d5c:	ldr	r3, [fp, #-16]
   16d60:	mov	r2, #0
   16d64:	str	r2, [r3, #24]
   16d68:	mov	r3, #0
   16d6c:	b	16d80 <__assert_fail@plt+0x5fa8>
   16d70:	ldr	r3, [fp, #-16]
   16d74:	ldr	r2, [fp, #-12]
   16d78:	str	r2, [r3, #24]
   16d7c:	mov	r3, #1
   16d80:	mov	r0, r3
   16d84:	sub	sp, fp, #4
   16d88:	pop	{fp, pc}
   16d8c:	push	{fp}		; (str fp, [sp, #-4]!)
   16d90:	add	fp, sp, #0
   16d94:	sub	sp, sp, #20
   16d98:	str	r0, [fp, #-16]
   16d9c:	str	r1, [fp, #-20]	; 0xffffffec
   16da0:	ldr	r3, [fp, #-16]
   16da4:	ldr	r3, [r3, #24]
   16da8:	str	r3, [fp, #-12]
   16dac:	ldr	r3, [fp, #-16]
   16db0:	ldr	r3, [r3, #4]
   16db4:	str	r3, [fp, #-8]
   16db8:	b	16e18 <__assert_fail@plt+0x6040>
   16dbc:	ldr	r3, [fp, #-8]
   16dc0:	ldr	r2, [r3, #24]
   16dc4:	ldr	r3, [fp, #-8]
   16dc8:	add	r3, r3, #168	; 0xa8
   16dcc:	cmp	r2, r3
   16dd0:	beq	16e00 <__assert_fail@plt+0x6028>
   16dd4:	ldr	r3, [fp, #-8]
   16dd8:	ldr	r3, [r3, #24]
   16ddc:	mov	r2, r3
   16de0:	ldr	r3, [fp, #-8]
   16de4:	ldr	r3, [r3, #28]
   16de8:	sub	r3, r2, r3
   16dec:	mov	r2, r3
   16df0:	ldr	r3, [fp, #-12]
   16df4:	add	r2, r3, r2
   16df8:	ldr	r3, [fp, #-8]
   16dfc:	str	r2, [r3, #24]
   16e00:	ldr	r3, [fp, #-8]
   16e04:	ldr	r2, [fp, #-12]
   16e08:	str	r2, [r3, #28]
   16e0c:	ldr	r3, [fp, #-8]
   16e10:	ldr	r3, [r3, #8]
   16e14:	str	r3, [fp, #-8]
   16e18:	ldr	r3, [fp, #-8]
   16e1c:	cmp	r3, #0
   16e20:	bne	16dbc <__assert_fail@plt+0x5fe4>
   16e24:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e28:	str	r3, [fp, #-8]
   16e2c:	b	16ea8 <__assert_fail@plt+0x60d0>
   16e30:	ldr	r3, [fp, #-8]
   16e34:	ldr	r2, [r3, #24]
   16e38:	ldr	r3, [fp, #-8]
   16e3c:	add	r3, r3, #168	; 0xa8
   16e40:	cmp	r2, r3
   16e44:	beq	16e74 <__assert_fail@plt+0x609c>
   16e48:	ldr	r3, [fp, #-8]
   16e4c:	ldr	r3, [r3, #24]
   16e50:	mov	r2, r3
   16e54:	ldr	r3, [fp, #-8]
   16e58:	ldr	r3, [r3, #28]
   16e5c:	sub	r3, r2, r3
   16e60:	mov	r2, r3
   16e64:	ldr	r3, [fp, #-12]
   16e68:	add	r2, r3, r2
   16e6c:	ldr	r3, [fp, #-8]
   16e70:	str	r2, [r3, #24]
   16e74:	ldr	r3, [fp, #-8]
   16e78:	ldr	r2, [fp, #-12]
   16e7c:	str	r2, [r3, #28]
   16e80:	ldr	r3, [fp, #-8]
   16e84:	ldr	r3, [r3, #8]
   16e88:	cmp	r3, #0
   16e8c:	beq	16e9c <__assert_fail@plt+0x60c4>
   16e90:	ldr	r3, [fp, #-8]
   16e94:	ldr	r3, [r3, #8]
   16e98:	b	16ea4 <__assert_fail@plt+0x60cc>
   16e9c:	ldr	r3, [fp, #-8]
   16ea0:	ldr	r3, [r3, #4]
   16ea4:	str	r3, [fp, #-8]
   16ea8:	ldr	r3, [fp, #-8]
   16eac:	ldr	r3, [r3, #48]	; 0x30
   16eb0:	cmp	r3, #0
   16eb4:	bge	16e30 <__assert_fail@plt+0x6058>
   16eb8:	nop			; (mov r0, r0)
   16ebc:	add	sp, fp, #0
   16ec0:	pop	{fp}		; (ldr fp, [sp], #4)
   16ec4:	bx	lr
   16ec8:	push	{fp, lr}
   16ecc:	add	fp, sp, #4
   16ed0:	sub	sp, sp, #16
   16ed4:	str	r0, [fp, #-16]
   16ed8:	mov	r3, #0
   16edc:	str	r3, [fp, #-8]
   16ee0:	b	16f1c <__assert_fail@plt+0x6144>
   16ee4:	ldr	r3, [fp, #-16]
   16ee8:	ldr	r3, [r3]
   16eec:	mov	r0, r3
   16ef0:	bl	10ca0 <strlen@plt>
   16ef4:	str	r0, [fp, #-12]
   16ef8:	ldr	r2, [fp, #-12]
   16efc:	ldr	r3, [fp, #-8]
   16f00:	cmp	r2, r3
   16f04:	bls	16f10 <__assert_fail@plt+0x6138>
   16f08:	ldr	r3, [fp, #-12]
   16f0c:	str	r3, [fp, #-8]
   16f10:	ldr	r3, [fp, #-16]
   16f14:	add	r3, r3, #4
   16f18:	str	r3, [fp, #-16]
   16f1c:	ldr	r3, [fp, #-16]
   16f20:	ldr	r3, [r3]
   16f24:	cmp	r3, #0
   16f28:	bne	16ee4 <__assert_fail@plt+0x610c>
   16f2c:	ldr	r3, [fp, #-8]
   16f30:	add	r3, r3, #1
   16f34:	mov	r0, r3
   16f38:	sub	sp, fp, #4
   16f3c:	pop	{fp, pc}
   16f40:	push	{fp, lr}
   16f44:	add	fp, sp, #4
   16f48:	sub	sp, sp, #144	; 0x90
   16f4c:	str	r0, [fp, #-136]	; 0xffffff78
   16f50:	str	r1, [fp, #-140]	; 0xffffff74
   16f54:	str	r2, [fp, #-144]	; 0xffffff70
   16f58:	str	r3, [fp, #-148]	; 0xffffff6c
   16f5c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16f60:	cmp	r3, #0
   16f64:	beq	16f88 <__assert_fail@plt+0x61b0>
   16f68:	ldr	r1, [pc, #632]	; 171e8 <__assert_fail@plt+0x6410>
   16f6c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16f70:	bl	10b80 <strcmp@plt>
   16f74:	mov	r3, r0
   16f78:	cmp	r3, #0
   16f7c:	bne	16f88 <__assert_fail@plt+0x61b0>
   16f80:	mov	r3, #1
   16f84:	b	16f8c <__assert_fail@plt+0x61b4>
   16f88:	mov	r3, #0
   16f8c:	strb	r3, [fp, #-13]
   16f90:	ldrb	r3, [fp, #-13]
   16f94:	and	r3, r3, #1
   16f98:	strb	r3, [fp, #-13]
   16f9c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16fa0:	ldr	r3, [r3, #48]	; 0x30
   16fa4:	and	r3, r3, #4
   16fa8:	cmp	r3, #0
   16fac:	beq	16fe0 <__assert_fail@plt+0x6208>
   16fb0:	ldr	r3, [fp, #-136]	; 0xffffff78
   16fb4:	ldr	r3, [r3, #48]	; 0x30
   16fb8:	and	r3, r3, #512	; 0x200
   16fbc:	cmp	r3, #0
   16fc0:	beq	16fd8 <__assert_fail@plt+0x6200>
   16fc4:	ldr	r3, [fp, #-144]	; 0xffffff70
   16fc8:	cmp	r3, #0
   16fcc:	blt	16fd8 <__assert_fail@plt+0x6200>
   16fd0:	ldr	r0, [fp, #-144]	; 0xffffff70
   16fd4:	bl	10da8 <close@plt>
   16fd8:	mov	r3, #0
   16fdc:	b	171dc <__assert_fail@plt+0x6404>
   16fe0:	ldr	r3, [fp, #-144]	; 0xffffff70
   16fe4:	cmp	r3, #0
   16fe8:	bge	17060 <__assert_fail@plt+0x6288>
   16fec:	ldrb	r3, [fp, #-13]
   16ff0:	cmp	r3, #0
   16ff4:	beq	17060 <__assert_fail@plt+0x6288>
   16ff8:	ldr	r3, [fp, #-136]	; 0xffffff78
   16ffc:	ldr	r3, [r3, #48]	; 0x30
   17000:	and	r3, r3, #512	; 0x200
   17004:	cmp	r3, #0
   17008:	beq	17060 <__assert_fail@plt+0x6288>
   1700c:	ldr	r3, [fp, #-136]	; 0xffffff78
   17010:	add	r3, r3, #60	; 0x3c
   17014:	mov	r0, r3
   17018:	bl	1a290 <__assert_fail@plt+0x94b8>
   1701c:	mov	r3, r0
   17020:	eor	r3, r3, #1
   17024:	uxtb	r3, r3
   17028:	cmp	r3, #0
   1702c:	beq	17060 <__assert_fail@plt+0x6288>
   17030:	ldr	r3, [fp, #-136]	; 0xffffff78
   17034:	add	r3, r3, #60	; 0x3c
   17038:	mov	r0, r3
   1703c:	bl	1a378 <__assert_fail@plt+0x95a0>
   17040:	str	r0, [fp, #-20]	; 0xffffffec
   17044:	ldr	r3, [fp, #-20]	; 0xffffffec
   17048:	cmp	r3, #0
   1704c:	blt	17060 <__assert_fail@plt+0x6288>
   17050:	ldr	r3, [fp, #-20]	; 0xffffffec
   17054:	str	r3, [fp, #-144]	; 0xffffff70
   17058:	mov	r3, #0
   1705c:	str	r3, [fp, #-148]	; 0xffffff6c
   17060:	ldr	r3, [fp, #-144]	; 0xffffff70
   17064:	str	r3, [fp, #-12]
   17068:	ldr	r3, [fp, #-144]	; 0xffffff70
   1706c:	cmp	r3, #0
   17070:	bge	17098 <__assert_fail@plt+0x62c0>
   17074:	ldr	r1, [fp, #-148]	; 0xffffff6c
   17078:	ldr	r0, [fp, #-136]	; 0xffffff78
   1707c:	bl	146bc <__assert_fail@plt+0x38e4>
   17080:	str	r0, [fp, #-12]
   17084:	ldr	r3, [fp, #-12]
   17088:	cmp	r3, #0
   1708c:	bge	17098 <__assert_fail@plt+0x62c0>
   17090:	mvn	r3, #0
   17094:	b	171dc <__assert_fail@plt+0x6404>
   17098:	ldr	r3, [fp, #-136]	; 0xffffff78
   1709c:	ldr	r3, [r3, #48]	; 0x30
   170a0:	and	r3, r3, #2
   170a4:	cmp	r3, #0
   170a8:	bne	170d0 <__assert_fail@plt+0x62f8>
   170ac:	ldr	r3, [fp, #-148]	; 0xffffff6c
   170b0:	cmp	r3, #0
   170b4:	beq	17148 <__assert_fail@plt+0x6370>
   170b8:	ldr	r1, [pc, #296]	; 171e8 <__assert_fail@plt+0x6410>
   170bc:	ldr	r0, [fp, #-148]	; 0xffffff6c
   170c0:	bl	10b80 <strcmp@plt>
   170c4:	mov	r3, r0
   170c8:	cmp	r3, #0
   170cc:	bne	17148 <__assert_fail@plt+0x6370>
   170d0:	sub	r3, fp, #132	; 0x84
   170d4:	mov	r1, r3
   170d8:	ldr	r0, [fp, #-12]
   170dc:	bl	1b8e0 <__assert_fail@plt+0xab08>
   170e0:	mov	r3, r0
   170e4:	cmp	r3, #0
   170e8:	beq	170f8 <__assert_fail@plt+0x6320>
   170ec:	mvn	r3, #0
   170f0:	str	r3, [fp, #-8]
   170f4:	b	171a4 <__assert_fail@plt+0x63cc>
   170f8:	ldr	r3, [fp, #-140]	; 0xffffff74
   170fc:	ldrd	r0, [r3, #64]	; 0x40
   17100:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   17104:	cmp	r1, r3
   17108:	cmpeq	r0, r2
   1710c:	bne	17128 <__assert_fail@plt+0x6350>
   17110:	ldr	r3, [fp, #-140]	; 0xffffff74
   17114:	ldrd	r0, [r3, #160]	; 0xa0
   17118:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1711c:	cmp	r1, r3
   17120:	cmpeq	r0, r2
   17124:	beq	17148 <__assert_fail@plt+0x6370>
   17128:	bl	10cd0 <__errno_location@plt>
   1712c:	mov	r2, r0
   17130:	mov	r3, #2
   17134:	str	r3, [r2]
   17138:	mvn	r3, #0
   1713c:	str	r3, [fp, #-8]
   17140:	nop			; (mov r0, r0)
   17144:	b	171a4 <__assert_fail@plt+0x63cc>
   17148:	ldr	r3, [fp, #-136]	; 0xffffff78
   1714c:	ldr	r3, [r3, #48]	; 0x30
   17150:	and	r3, r3, #512	; 0x200
   17154:	cmp	r3, #0
   17158:	beq	17198 <__assert_fail@plt+0x63c0>
   1715c:	ldrb	r3, [fp, #-13]
   17160:	cmp	r3, #0
   17164:	movne	r3, #1
   17168:	moveq	r3, #0
   1716c:	uxtb	r3, r3
   17170:	eor	r3, r3, #1
   17174:	uxtb	r3, r3
   17178:	and	r3, r3, #1
   1717c:	uxtb	r3, r3
   17180:	mov	r2, r3
   17184:	ldr	r1, [fp, #-12]
   17188:	ldr	r0, [fp, #-136]	; 0xffffff78
   1718c:	bl	14520 <__assert_fail@plt+0x3748>
   17190:	mov	r3, #0
   17194:	b	171dc <__assert_fail@plt+0x6404>
   17198:	ldr	r0, [fp, #-12]
   1719c:	bl	10d60 <fchdir@plt>
   171a0:	str	r0, [fp, #-8]
   171a4:	ldr	r3, [fp, #-144]	; 0xffffff70
   171a8:	cmp	r3, #0
   171ac:	bge	171d8 <__assert_fail@plt+0x6400>
   171b0:	bl	10cd0 <__errno_location@plt>
   171b4:	mov	r3, r0
   171b8:	ldr	r3, [r3]
   171bc:	str	r3, [fp, #-24]	; 0xffffffe8
   171c0:	ldr	r0, [fp, #-12]
   171c4:	bl	10da8 <close@plt>
   171c8:	bl	10cd0 <__errno_location@plt>
   171cc:	mov	r2, r0
   171d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171d4:	str	r3, [r2]
   171d8:	ldr	r3, [fp, #-8]
   171dc:	mov	r0, r3
   171e0:	sub	sp, fp, #4
   171e4:	pop	{fp, pc}
   171e8:	muleq	r1, r4, sl
   171ec:	push	{fp}		; (str fp, [sp, #-4]!)
   171f0:	add	fp, sp, #0
   171f4:	sub	sp, sp, #44	; 0x2c
   171f8:	str	r0, [fp, #-40]	; 0xffffffd8
   171fc:	str	r1, [fp, #-44]	; 0xffffffd4
   17200:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17204:	ldr	r3, [r3, #28]
   17208:	str	r3, [fp, #-8]
   1720c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17210:	ldr	r3, [r3, #32]
   17214:	str	r3, [fp, #-24]	; 0xffffffe8
   17218:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1721c:	ldr	r3, [r3]
   17220:	str	r3, [fp, #-12]
   17224:	b	173ec <__assert_fail@plt+0x6614>
   17228:	ldr	r2, [fp, #-12]
   1722c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17230:	sub	r2, r2, r3
   17234:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17238:	ldr	r3, [fp, #-8]
   1723c:	sub	r3, r1, r3
   17240:	cmp	r2, r3
   17244:	ble	1732c <__assert_fail@plt+0x6554>
   17248:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1724c:	ldr	r3, [fp, #-8]
   17250:	sub	r3, r2, r3
   17254:	str	r3, [fp, #-28]	; 0xffffffe4
   17258:	mov	r3, #0
   1725c:	str	r3, [fp, #-16]
   17260:	b	17308 <__assert_fail@plt+0x6530>
   17264:	ldr	r2, [fp, #-8]
   17268:	ldr	r3, [fp, #-16]
   1726c:	add	r3, r2, r3
   17270:	lsl	r3, r3, #2
   17274:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17278:	add	r3, r2, r3
   1727c:	ldr	r3, [r3]
   17280:	str	r3, [fp, #-32]	; 0xffffffe0
   17284:	ldr	r2, [fp, #-8]
   17288:	ldr	r3, [fp, #-16]
   1728c:	add	r3, r2, r3
   17290:	lsl	r3, r3, #2
   17294:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17298:	add	r3, r2, r3
   1729c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   172a0:	ldr	r2, [fp, #-8]
   172a4:	sub	r2, r1, r2
   172a8:	ldr	r1, [fp, #-12]
   172ac:	sub	r1, r1, r2
   172b0:	ldr	r2, [fp, #-16]
   172b4:	add	r2, r1, r2
   172b8:	lsl	r2, r2, #2
   172bc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   172c0:	add	r2, r1, r2
   172c4:	ldr	r2, [r2]
   172c8:	str	r2, [r3]
   172cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   172d0:	ldr	r3, [fp, #-8]
   172d4:	sub	r3, r2, r3
   172d8:	ldr	r2, [fp, #-12]
   172dc:	sub	r2, r2, r3
   172e0:	ldr	r3, [fp, #-16]
   172e4:	add	r3, r2, r3
   172e8:	lsl	r3, r3, #2
   172ec:	ldr	r2, [fp, #-40]	; 0xffffffd8
   172f0:	add	r3, r2, r3
   172f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   172f8:	str	r2, [r3]
   172fc:	ldr	r3, [fp, #-16]
   17300:	add	r3, r3, #1
   17304:	str	r3, [fp, #-16]
   17308:	ldr	r2, [fp, #-16]
   1730c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17310:	cmp	r2, r3
   17314:	blt	17264 <__assert_fail@plt+0x648c>
   17318:	ldr	r2, [fp, #-12]
   1731c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17320:	sub	r3, r2, r3
   17324:	str	r3, [fp, #-12]
   17328:	b	173ec <__assert_fail@plt+0x6614>
   1732c:	ldr	r2, [fp, #-12]
   17330:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17334:	sub	r3, r2, r3
   17338:	str	r3, [fp, #-36]	; 0xffffffdc
   1733c:	mov	r3, #0
   17340:	str	r3, [fp, #-20]	; 0xffffffec
   17344:	b	173cc <__assert_fail@plt+0x65f4>
   17348:	ldr	r2, [fp, #-8]
   1734c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17350:	add	r3, r2, r3
   17354:	lsl	r3, r3, #2
   17358:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1735c:	add	r3, r2, r3
   17360:	ldr	r3, [r3]
   17364:	str	r3, [fp, #-32]	; 0xffffffe0
   17368:	ldr	r2, [fp, #-8]
   1736c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17370:	add	r3, r2, r3
   17374:	lsl	r3, r3, #2
   17378:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1737c:	add	r3, r2, r3
   17380:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17384:	ldr	r2, [fp, #-20]	; 0xffffffec
   17388:	add	r2, r1, r2
   1738c:	lsl	r2, r2, #2
   17390:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17394:	add	r2, r1, r2
   17398:	ldr	r2, [r2]
   1739c:	str	r2, [r3]
   173a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   173a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   173a8:	add	r3, r2, r3
   173ac:	lsl	r3, r3, #2
   173b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   173b4:	add	r3, r2, r3
   173b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   173bc:	str	r2, [r3]
   173c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   173c4:	add	r3, r3, #1
   173c8:	str	r3, [fp, #-20]	; 0xffffffec
   173cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   173d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   173d4:	cmp	r2, r3
   173d8:	blt	17348 <__assert_fail@plt+0x6570>
   173dc:	ldr	r2, [fp, #-8]
   173e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   173e4:	add	r3, r2, r3
   173e8:	str	r3, [fp, #-8]
   173ec:	ldr	r2, [fp, #-12]
   173f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173f4:	cmp	r2, r3
   173f8:	ble	1740c <__assert_fail@plt+0x6634>
   173fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17400:	ldr	r3, [fp, #-8]
   17404:	cmp	r2, r3
   17408:	bgt	17228 <__assert_fail@plt+0x6450>
   1740c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17410:	ldr	r2, [r3, #28]
   17414:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17418:	ldr	r1, [r3]
   1741c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17420:	ldr	r3, [r3, #32]
   17424:	sub	r3, r1, r3
   17428:	add	r2, r2, r3
   1742c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17430:	str	r2, [r3, #28]
   17434:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17438:	ldr	r2, [r3]
   1743c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17440:	str	r2, [r3, #32]
   17444:	nop			; (mov r0, r0)
   17448:	add	sp, fp, #0
   1744c:	pop	{fp}		; (ldr fp, [sp], #4)
   17450:	bx	lr
   17454:	push	{r4, fp, lr}
   17458:	add	fp, sp, #8
   1745c:	sub	sp, sp, #68	; 0x44
   17460:	str	r0, [fp, #-56]	; 0xffffffc8
   17464:	str	r1, [fp, #-60]	; 0xffffffc4
   17468:	str	r2, [fp, #-64]	; 0xffffffc0
   1746c:	str	r3, [fp, #-68]	; 0xffffffbc
   17470:	mov	r3, #0
   17474:	str	r3, [fp, #-24]	; 0xffffffe8
   17478:	ldr	r3, [fp, #12]
   1747c:	ldr	r3, [r3, #20]
   17480:	str	r3, [fp, #-16]
   17484:	b	17494 <__assert_fail@plt+0x66bc>
   17488:	ldr	r3, [fp, #-16]
   1748c:	add	r3, r3, #1
   17490:	str	r3, [fp, #-16]
   17494:	ldr	r3, [fp, #-16]
   17498:	ldrb	r3, [r3]
   1749c:	cmp	r3, #0
   174a0:	beq	174b4 <__assert_fail@plt+0x66dc>
   174a4:	ldr	r3, [fp, #-16]
   174a8:	ldrb	r3, [r3]
   174ac:	cmp	r3, #61	; 0x3d
   174b0:	bne	17488 <__assert_fail@plt+0x66b0>
   174b4:	ldr	r3, [fp, #-16]
   174b8:	ldr	r2, [fp, #12]
   174bc:	ldr	r2, [r2, #20]
   174c0:	sub	r3, r3, r2
   174c4:	str	r3, [fp, #-52]	; 0xffffffcc
   174c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   174cc:	str	r3, [fp, #-20]	; 0xffffffec
   174d0:	mov	r3, #0
   174d4:	str	r3, [fp, #-28]	; 0xffffffe4
   174d8:	b	17550 <__assert_fail@plt+0x6778>
   174dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   174e0:	ldr	r0, [r3]
   174e4:	ldr	r3, [fp, #12]
   174e8:	ldr	r3, [r3, #20]
   174ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   174f0:	mov	r1, r3
   174f4:	bl	10d90 <strncmp@plt>
   174f8:	mov	r3, r0
   174fc:	cmp	r3, #0
   17500:	bne	17538 <__assert_fail@plt+0x6760>
   17504:	ldr	r3, [fp, #-20]	; 0xffffffec
   17508:	ldr	r3, [r3]
   1750c:	mov	r0, r3
   17510:	bl	10ca0 <strlen@plt>
   17514:	mov	r2, r0
   17518:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1751c:	cmp	r2, r3
   17520:	bne	17538 <__assert_fail@plt+0x6760>
   17524:	ldr	r3, [fp, #-20]	; 0xffffffec
   17528:	str	r3, [fp, #-24]	; 0xffffffe8
   1752c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17530:	str	r3, [fp, #-32]	; 0xffffffe0
   17534:	b	17560 <__assert_fail@plt+0x6788>
   17538:	ldr	r3, [fp, #-20]	; 0xffffffec
   1753c:	add	r3, r3, #16
   17540:	str	r3, [fp, #-20]	; 0xffffffec
   17544:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17548:	add	r3, r3, #1
   1754c:	str	r3, [fp, #-28]	; 0xffffffe4
   17550:	ldr	r3, [fp, #-20]	; 0xffffffec
   17554:	ldr	r3, [r3]
   17558:	cmp	r3, #0
   1755c:	bne	174dc <__assert_fail@plt+0x6704>
   17560:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17564:	cmp	r3, #0
   17568:	bne	178a8 <__assert_fail@plt+0x6ad0>
   1756c:	mov	r3, #0
   17570:	str	r3, [fp, #-36]	; 0xffffffdc
   17574:	mov	r3, #0
   17578:	str	r3, [fp, #-40]	; 0xffffffd8
   1757c:	mov	r3, #0
   17580:	str	r3, [fp, #-44]	; 0xffffffd4
   17584:	mvn	r3, #0
   17588:	str	r3, [fp, #-48]	; 0xffffffd0
   1758c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17590:	str	r3, [fp, #-20]	; 0xffffffec
   17594:	mov	r3, #0
   17598:	str	r3, [fp, #-32]	; 0xffffffe0
   1759c:	b	1770c <__assert_fail@plt+0x6934>
   175a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   175a4:	ldr	r0, [r3]
   175a8:	ldr	r3, [fp, #12]
   175ac:	ldr	r3, [r3, #20]
   175b0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   175b4:	mov	r1, r3
   175b8:	bl	10d90 <strncmp@plt>
   175bc:	mov	r3, r0
   175c0:	cmp	r3, #0
   175c4:	bne	176f4 <__assert_fail@plt+0x691c>
   175c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175cc:	cmp	r3, #0
   175d0:	bne	175e8 <__assert_fail@plt+0x6810>
   175d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   175d8:	str	r3, [fp, #-24]	; 0xffffffe8
   175dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   175e0:	str	r3, [fp, #-48]	; 0xffffffd0
   175e4:	b	176f4 <__assert_fail@plt+0x691c>
   175e8:	ldr	r3, [fp, #8]
   175ec:	cmp	r3, #0
   175f0:	bne	1763c <__assert_fail@plt+0x6864>
   175f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175f8:	ldr	r2, [r3, #4]
   175fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17600:	ldr	r3, [r3, #4]
   17604:	cmp	r2, r3
   17608:	bne	1763c <__assert_fail@plt+0x6864>
   1760c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17610:	ldr	r2, [r3, #8]
   17614:	ldr	r3, [fp, #-20]	; 0xffffffec
   17618:	ldr	r3, [r3, #8]
   1761c:	cmp	r2, r3
   17620:	bne	1763c <__assert_fail@plt+0x6864>
   17624:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17628:	ldr	r2, [r3, #12]
   1762c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17630:	ldr	r3, [r3, #12]
   17634:	cmp	r2, r3
   17638:	beq	176f4 <__assert_fail@plt+0x691c>
   1763c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17640:	cmp	r3, #0
   17644:	bne	176f4 <__assert_fail@plt+0x691c>
   17648:	ldr	r3, [fp, #16]
   1764c:	cmp	r3, #0
   17650:	bne	17660 <__assert_fail@plt+0x6888>
   17654:	mov	r3, #1
   17658:	str	r3, [fp, #-44]	; 0xffffffd4
   1765c:	b	176d4 <__assert_fail@plt+0x68fc>
   17660:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17664:	cmp	r3, #0
   17668:	bne	176d4 <__assert_fail@plt+0x68fc>
   1766c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17670:	mov	r0, r3
   17674:	bl	1a77c <__assert_fail@plt+0x99a4>
   17678:	mov	r3, r0
   1767c:	str	r3, [fp, #-36]	; 0xffffffdc
   17680:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17684:	cmp	r3, #0
   17688:	bne	17698 <__assert_fail@plt+0x68c0>
   1768c:	mov	r3, #1
   17690:	str	r3, [fp, #-44]	; 0xffffffd4
   17694:	b	176a0 <__assert_fail@plt+0x68c8>
   17698:	mov	r3, #1
   1769c:	str	r3, [fp, #-40]	; 0xffffffd8
   176a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   176a4:	cmp	r3, #0
   176a8:	beq	176d4 <__assert_fail@plt+0x68fc>
   176ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   176b0:	mov	r2, r3
   176b4:	mov	r1, #0
   176b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   176bc:	bl	10ce8 <memset@plt>
   176c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   176c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   176c8:	add	r3, r2, r3
   176cc:	mov	r2, #1
   176d0:	strb	r2, [r3]
   176d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   176d8:	cmp	r3, #0
   176dc:	beq	176f4 <__assert_fail@plt+0x691c>
   176e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   176e4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   176e8:	add	r3, r2, r3
   176ec:	mov	r2, #1
   176f0:	strb	r2, [r3]
   176f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   176f8:	add	r3, r3, #16
   176fc:	str	r3, [fp, #-20]	; 0xffffffec
   17700:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17704:	add	r3, r3, #1
   17708:	str	r3, [fp, #-32]	; 0xffffffe0
   1770c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17710:	ldr	r3, [r3]
   17714:	cmp	r3, #0
   17718:	bne	175a0 <__assert_fail@plt+0x67c8>
   1771c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17720:	cmp	r3, #0
   17724:	bne	17734 <__assert_fail@plt+0x695c>
   17728:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1772c:	cmp	r3, #0
   17730:	beq	178a0 <__assert_fail@plt+0x6ac8>
   17734:	ldr	r3, [fp, #16]
   17738:	cmp	r3, #0
   1773c:	beq	1783c <__assert_fail@plt+0x6a64>
   17740:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17744:	cmp	r3, #0
   17748:	beq	17778 <__assert_fail@plt+0x69a0>
   1774c:	ldr	r3, [pc, #984]	; 17b2c <__assert_fail@plt+0x6d54>
   17750:	ldr	r0, [r3]
   17754:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17758:	ldr	r2, [r3]
   1775c:	ldr	r3, [fp, #12]
   17760:	ldr	r3, [r3, #20]
   17764:	str	r3, [sp]
   17768:	ldr	r3, [fp, #20]
   1776c:	ldr	r1, [pc, #956]	; 17b30 <__assert_fail@plt+0x6d58>
   17770:	bl	10cc4 <fprintf@plt>
   17774:	b	1783c <__assert_fail@plt+0x6a64>
   17778:	ldr	r3, [pc, #940]	; 17b2c <__assert_fail@plt+0x6d54>
   1777c:	ldr	r3, [r3]
   17780:	mov	r0, r3
   17784:	bl	10d48 <flockfile@plt>
   17788:	ldr	r3, [pc, #924]	; 17b2c <__assert_fail@plt+0x6d54>
   1778c:	ldr	r0, [r3]
   17790:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17794:	ldr	r2, [r3]
   17798:	ldr	r3, [fp, #12]
   1779c:	ldr	r3, [r3, #20]
   177a0:	str	r3, [sp]
   177a4:	ldr	r3, [fp, #20]
   177a8:	ldr	r1, [pc, #900]	; 17b34 <__assert_fail@plt+0x6d5c>
   177ac:	bl	10cc4 <fprintf@plt>
   177b0:	mov	r3, #0
   177b4:	str	r3, [fp, #-32]	; 0xffffffe0
   177b8:	b	17808 <__assert_fail@plt+0x6a30>
   177bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177c0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   177c4:	add	r3, r2, r3
   177c8:	ldrb	r3, [r3]
   177cc:	cmp	r3, #0
   177d0:	beq	177fc <__assert_fail@plt+0x6a24>
   177d4:	ldr	r3, [pc, #848]	; 17b2c <__assert_fail@plt+0x6d54>
   177d8:	ldr	r0, [r3]
   177dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177e0:	lsl	r3, r3, #4
   177e4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   177e8:	add	r3, r2, r3
   177ec:	ldr	r3, [r3]
   177f0:	ldr	r2, [fp, #20]
   177f4:	ldr	r1, [pc, #828]	; 17b38 <__assert_fail@plt+0x6d60>
   177f8:	bl	10cc4 <fprintf@plt>
   177fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17800:	add	r3, r3, #1
   17804:	str	r3, [fp, #-32]	; 0xffffffe0
   17808:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1780c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17810:	cmp	r2, r3
   17814:	blt	177bc <__assert_fail@plt+0x69e4>
   17818:	ldr	r3, [pc, #780]	; 17b2c <__assert_fail@plt+0x6d54>
   1781c:	ldr	r3, [r3]
   17820:	mov	r1, r3
   17824:	mov	r0, #10
   17828:	bl	10d18 <fputc@plt>
   1782c:	ldr	r3, [pc, #760]	; 17b2c <__assert_fail@plt+0x6d54>
   17830:	ldr	r3, [r3]
   17834:	mov	r0, r3
   17838:	bl	10bf8 <funlockfile@plt>
   1783c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17840:	cmp	r3, #0
   17844:	beq	17850 <__assert_fail@plt+0x6a78>
   17848:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1784c:	bl	13f5c <__assert_fail@plt+0x3184>
   17850:	ldr	r3, [fp, #12]
   17854:	ldr	r4, [r3, #20]
   17858:	ldr	r3, [fp, #12]
   1785c:	ldr	r3, [r3, #20]
   17860:	mov	r0, r3
   17864:	bl	10ca0 <strlen@plt>
   17868:	mov	r3, r0
   1786c:	add	r2, r4, r3
   17870:	ldr	r3, [fp, #12]
   17874:	str	r2, [r3, #20]
   17878:	ldr	r3, [fp, #12]
   1787c:	ldr	r3, [r3]
   17880:	add	r2, r3, #1
   17884:	ldr	r3, [fp, #12]
   17888:	str	r2, [r3]
   1788c:	ldr	r3, [fp, #12]
   17890:	mov	r2, #0
   17894:	str	r2, [r3, #8]
   17898:	mov	r3, #63	; 0x3f
   1789c:	b	17b20 <__assert_fail@plt+0x6d48>
   178a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   178a4:	str	r3, [fp, #-32]	; 0xffffffe0
   178a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178ac:	cmp	r3, #0
   178b0:	bne	1797c <__assert_fail@plt+0x6ba4>
   178b4:	ldr	r3, [fp, #8]
   178b8:	cmp	r3, #0
   178bc:	beq	1790c <__assert_fail@plt+0x6b34>
   178c0:	ldr	r3, [fp, #12]
   178c4:	ldr	r3, [r3]
   178c8:	lsl	r3, r3, #2
   178cc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   178d0:	add	r3, r2, r3
   178d4:	ldr	r3, [r3]
   178d8:	add	r3, r3, #1
   178dc:	ldrb	r3, [r3]
   178e0:	cmp	r3, #45	; 0x2d
   178e4:	beq	1790c <__assert_fail@plt+0x6b34>
   178e8:	ldr	r3, [fp, #12]
   178ec:	ldr	r3, [r3, #20]
   178f0:	ldrb	r3, [r3]
   178f4:	mov	r1, r3
   178f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   178fc:	bl	10cac <strchr@plt>
   17900:	mov	r3, r0
   17904:	cmp	r3, #0
   17908:	bne	17974 <__assert_fail@plt+0x6b9c>
   1790c:	ldr	r3, [fp, #16]
   17910:	cmp	r3, #0
   17914:	beq	17940 <__assert_fail@plt+0x6b68>
   17918:	ldr	r3, [pc, #524]	; 17b2c <__assert_fail@plt+0x6d54>
   1791c:	ldr	r0, [r3]
   17920:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17924:	ldr	r2, [r3]
   17928:	ldr	r3, [fp, #12]
   1792c:	ldr	r3, [r3, #20]
   17930:	str	r3, [sp]
   17934:	ldr	r3, [fp, #20]
   17938:	ldr	r1, [pc, #508]	; 17b3c <__assert_fail@plt+0x6d64>
   1793c:	bl	10cc4 <fprintf@plt>
   17940:	ldr	r3, [fp, #12]
   17944:	mov	r2, #0
   17948:	str	r2, [r3, #20]
   1794c:	ldr	r3, [fp, #12]
   17950:	ldr	r3, [r3]
   17954:	add	r2, r3, #1
   17958:	ldr	r3, [fp, #12]
   1795c:	str	r2, [r3]
   17960:	ldr	r3, [fp, #12]
   17964:	mov	r2, #0
   17968:	str	r2, [r3, #8]
   1796c:	mov	r3, #63	; 0x3f
   17970:	b	17b20 <__assert_fail@plt+0x6d48>
   17974:	mvn	r3, #0
   17978:	b	17b20 <__assert_fail@plt+0x6d48>
   1797c:	ldr	r3, [fp, #12]
   17980:	ldr	r3, [r3]
   17984:	add	r2, r3, #1
   17988:	ldr	r3, [fp, #12]
   1798c:	str	r2, [r3]
   17990:	ldr	r3, [fp, #12]
   17994:	mov	r2, #0
   17998:	str	r2, [r3, #20]
   1799c:	ldr	r3, [fp, #-16]
   179a0:	ldrb	r3, [r3]
   179a4:	cmp	r3, #0
   179a8:	beq	17a1c <__assert_fail@plt+0x6c44>
   179ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179b0:	ldr	r3, [r3, #4]
   179b4:	cmp	r3, #0
   179b8:	beq	179d0 <__assert_fail@plt+0x6bf8>
   179bc:	ldr	r3, [fp, #-16]
   179c0:	add	r2, r3, #1
   179c4:	ldr	r3, [fp, #12]
   179c8:	str	r2, [r3, #12]
   179cc:	b	17ad4 <__assert_fail@plt+0x6cfc>
   179d0:	ldr	r3, [fp, #16]
   179d4:	cmp	r3, #0
   179d8:	beq	17a04 <__assert_fail@plt+0x6c2c>
   179dc:	ldr	r3, [pc, #328]	; 17b2c <__assert_fail@plt+0x6d54>
   179e0:	ldr	r0, [r3]
   179e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   179e8:	ldr	r2, [r3]
   179ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179f0:	ldr	r3, [r3]
   179f4:	str	r3, [sp]
   179f8:	ldr	r3, [fp, #20]
   179fc:	ldr	r1, [pc, #316]	; 17b40 <__assert_fail@plt+0x6d68>
   17a00:	bl	10cc4 <fprintf@plt>
   17a04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a08:	ldr	r2, [r3, #12]
   17a0c:	ldr	r3, [fp, #12]
   17a10:	str	r2, [r3, #8]
   17a14:	mov	r3, #63	; 0x3f
   17a18:	b	17b20 <__assert_fail@plt+0x6d48>
   17a1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a20:	ldr	r3, [r3, #4]
   17a24:	cmp	r3, #1
   17a28:	bne	17ad4 <__assert_fail@plt+0x6cfc>
   17a2c:	ldr	r3, [fp, #12]
   17a30:	ldr	r2, [r3]
   17a34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a38:	cmp	r2, r3
   17a3c:	bge	17a70 <__assert_fail@plt+0x6c98>
   17a40:	ldr	r3, [fp, #12]
   17a44:	ldr	r3, [r3]
   17a48:	add	r1, r3, #1
   17a4c:	ldr	r2, [fp, #12]
   17a50:	str	r1, [r2]
   17a54:	lsl	r3, r3, #2
   17a58:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17a5c:	add	r3, r2, r3
   17a60:	ldr	r2, [r3]
   17a64:	ldr	r3, [fp, #12]
   17a68:	str	r2, [r3, #12]
   17a6c:	b	17ad4 <__assert_fail@plt+0x6cfc>
   17a70:	ldr	r3, [fp, #16]
   17a74:	cmp	r3, #0
   17a78:	beq	17aa4 <__assert_fail@plt+0x6ccc>
   17a7c:	ldr	r3, [pc, #168]	; 17b2c <__assert_fail@plt+0x6d54>
   17a80:	ldr	r0, [r3]
   17a84:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17a88:	ldr	r2, [r3]
   17a8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a90:	ldr	r3, [r3]
   17a94:	str	r3, [sp]
   17a98:	ldr	r3, [fp, #20]
   17a9c:	ldr	r1, [pc, #160]	; 17b44 <__assert_fail@plt+0x6d6c>
   17aa0:	bl	10cc4 <fprintf@plt>
   17aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17aa8:	ldr	r2, [r3, #12]
   17aac:	ldr	r3, [fp, #12]
   17ab0:	str	r2, [r3, #8]
   17ab4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17ab8:	ldrb	r3, [r3]
   17abc:	cmp	r3, #58	; 0x3a
   17ac0:	bne	17acc <__assert_fail@plt+0x6cf4>
   17ac4:	mov	r3, #58	; 0x3a
   17ac8:	b	17b20 <__assert_fail@plt+0x6d48>
   17acc:	mov	r3, #63	; 0x3f
   17ad0:	b	17b20 <__assert_fail@plt+0x6d48>
   17ad4:	ldr	r3, [fp, #4]
   17ad8:	cmp	r3, #0
   17adc:	beq	17aec <__assert_fail@plt+0x6d14>
   17ae0:	ldr	r3, [fp, #4]
   17ae4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17ae8:	str	r2, [r3]
   17aec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17af0:	ldr	r3, [r3, #8]
   17af4:	cmp	r3, #0
   17af8:	beq	17b18 <__assert_fail@plt+0x6d40>
   17afc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b00:	ldr	r3, [r3, #8]
   17b04:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17b08:	ldr	r2, [r2, #12]
   17b0c:	str	r2, [r3]
   17b10:	mov	r3, #0
   17b14:	b	17b20 <__assert_fail@plt+0x6d48>
   17b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b1c:	ldr	r3, [r3, #12]
   17b20:	mov	r0, r3
   17b24:	sub	sp, fp, #8
   17b28:	pop	{r4, fp, pc}
   17b2c:	andeq	ip, r2, r0, lsl r1
   17b30:	muleq	r1, r8, sl
   17b34:			; <UNDEFINED> instruction: 0x0001bab8
   17b38:	andeq	fp, r1, r8, ror #21
   17b3c:	strdeq	fp, [r1], -r0
   17b40:	andeq	fp, r1, r0, lsl fp
   17b44:	andeq	fp, r1, r0, asr #22
   17b48:	push	{fp, lr}
   17b4c:	add	fp, sp, #4
   17b50:	sub	sp, sp, #16
   17b54:	str	r0, [fp, #-8]
   17b58:	str	r1, [fp, #-12]
   17b5c:	str	r2, [fp, #-16]
   17b60:	str	r3, [fp, #-20]	; 0xffffffec
   17b64:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b68:	ldr	r3, [r3]
   17b6c:	cmp	r3, #0
   17b70:	bne	17b80 <__assert_fail@plt+0x6da8>
   17b74:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b78:	mov	r2, #1
   17b7c:	str	r2, [r3]
   17b80:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b84:	ldr	r2, [r3]
   17b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b8c:	str	r2, [r3, #32]
   17b90:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b94:	ldr	r2, [r3, #32]
   17b98:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b9c:	str	r2, [r3, #28]
   17ba0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ba4:	mov	r2, #0
   17ba8:	str	r2, [r3, #20]
   17bac:	ldr	r3, [fp, #-16]
   17bb0:	ldrb	r3, [r3]
   17bb4:	cmp	r3, #45	; 0x2d
   17bb8:	bne	17bd8 <__assert_fail@plt+0x6e00>
   17bbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17bc0:	mov	r2, #2
   17bc4:	str	r2, [r3, #24]
   17bc8:	ldr	r3, [fp, #-16]
   17bcc:	add	r3, r3, #1
   17bd0:	str	r3, [fp, #-16]
   17bd4:	b	17c40 <__assert_fail@plt+0x6e68>
   17bd8:	ldr	r3, [fp, #-16]
   17bdc:	ldrb	r3, [r3]
   17be0:	cmp	r3, #43	; 0x2b
   17be4:	bne	17c04 <__assert_fail@plt+0x6e2c>
   17be8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17bec:	mov	r2, #0
   17bf0:	str	r2, [r3, #24]
   17bf4:	ldr	r3, [fp, #-16]
   17bf8:	add	r3, r3, #1
   17bfc:	str	r3, [fp, #-16]
   17c00:	b	17c40 <__assert_fail@plt+0x6e68>
   17c04:	ldr	r3, [fp, #4]
   17c08:	cmp	r3, #0
   17c0c:	bne	17c24 <__assert_fail@plt+0x6e4c>
   17c10:	ldr	r0, [pc, #68]	; 17c5c <__assert_fail@plt+0x6e84>
   17c14:	bl	10c58 <getenv@plt>
   17c18:	mov	r3, r0
   17c1c:	cmp	r3, #0
   17c20:	beq	17c34 <__assert_fail@plt+0x6e5c>
   17c24:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c28:	mov	r2, #0
   17c2c:	str	r2, [r3, #24]
   17c30:	b	17c40 <__assert_fail@plt+0x6e68>
   17c34:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c38:	mov	r2, #1
   17c3c:	str	r2, [r3, #24]
   17c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c44:	mov	r2, #1
   17c48:	str	r2, [r3, #16]
   17c4c:	ldr	r3, [fp, #-16]
   17c50:	mov	r0, r3
   17c54:	sub	sp, fp, #4
   17c58:	pop	{fp, pc}
   17c5c:	andeq	fp, r1, r8, ror #22
   17c60:	push	{fp, lr}
   17c64:	add	fp, sp, #4
   17c68:	sub	sp, sp, #56	; 0x38
   17c6c:	str	r0, [fp, #-24]	; 0xffffffe8
   17c70:	str	r1, [fp, #-28]	; 0xffffffe4
   17c74:	str	r2, [fp, #-32]	; 0xffffffe0
   17c78:	str	r3, [fp, #-36]	; 0xffffffdc
   17c7c:	ldr	r3, [fp, #12]
   17c80:	ldr	r3, [r3, #4]
   17c84:	str	r3, [fp, #-8]
   17c88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c8c:	cmp	r3, #0
   17c90:	bgt	17c9c <__assert_fail@plt+0x6ec4>
   17c94:	mvn	r3, #0
   17c98:	b	18568 <__assert_fail@plt+0x7790>
   17c9c:	ldr	r3, [fp, #12]
   17ca0:	mov	r2, #0
   17ca4:	str	r2, [r3, #12]
   17ca8:	ldr	r3, [fp, #12]
   17cac:	ldr	r3, [r3]
   17cb0:	cmp	r3, #0
   17cb4:	beq	17cc8 <__assert_fail@plt+0x6ef0>
   17cb8:	ldr	r3, [fp, #12]
   17cbc:	ldr	r3, [r3, #16]
   17cc0:	cmp	r3, #0
   17cc4:	bne	17cec <__assert_fail@plt+0x6f14>
   17cc8:	ldr	r3, [fp, #16]
   17ccc:	str	r3, [sp]
   17cd0:	ldr	r3, [fp, #12]
   17cd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17cd8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17cdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ce0:	bl	17b48 <__assert_fail@plt+0x6d70>
   17ce4:	str	r0, [fp, #-32]	; 0xffffffe0
   17ce8:	b	17d18 <__assert_fail@plt+0x6f40>
   17cec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17cf0:	ldrb	r3, [r3]
   17cf4:	cmp	r3, #45	; 0x2d
   17cf8:	beq	17d0c <__assert_fail@plt+0x6f34>
   17cfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d00:	ldrb	r3, [r3]
   17d04:	cmp	r3, #43	; 0x2b
   17d08:	bne	17d18 <__assert_fail@plt+0x6f40>
   17d0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d10:	add	r3, r3, #1
   17d14:	str	r3, [fp, #-32]	; 0xffffffe0
   17d18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d1c:	ldrb	r3, [r3]
   17d20:	cmp	r3, #58	; 0x3a
   17d24:	bne	17d30 <__assert_fail@plt+0x6f58>
   17d28:	mov	r3, #0
   17d2c:	str	r3, [fp, #-8]
   17d30:	ldr	r3, [fp, #12]
   17d34:	ldr	r3, [r3, #20]
   17d38:	cmp	r3, #0
   17d3c:	beq	17d54 <__assert_fail@plt+0x6f7c>
   17d40:	ldr	r3, [fp, #12]
   17d44:	ldr	r3, [r3, #20]
   17d48:	ldrb	r3, [r3]
   17d4c:	cmp	r3, #0
   17d50:	bne	181fc <__assert_fail@plt+0x7424>
   17d54:	ldr	r3, [fp, #12]
   17d58:	ldr	r2, [r3, #32]
   17d5c:	ldr	r3, [fp, #12]
   17d60:	ldr	r3, [r3]
   17d64:	cmp	r2, r3
   17d68:	ble	17d7c <__assert_fail@plt+0x6fa4>
   17d6c:	ldr	r3, [fp, #12]
   17d70:	ldr	r2, [r3]
   17d74:	ldr	r3, [fp, #12]
   17d78:	str	r2, [r3, #32]
   17d7c:	ldr	r3, [fp, #12]
   17d80:	ldr	r2, [r3, #28]
   17d84:	ldr	r3, [fp, #12]
   17d88:	ldr	r3, [r3]
   17d8c:	cmp	r2, r3
   17d90:	ble	17da4 <__assert_fail@plt+0x6fcc>
   17d94:	ldr	r3, [fp, #12]
   17d98:	ldr	r2, [r3]
   17d9c:	ldr	r3, [fp, #12]
   17da0:	str	r2, [r3, #28]
   17da4:	ldr	r3, [fp, #12]
   17da8:	ldr	r3, [r3, #24]
   17dac:	cmp	r3, #1
   17db0:	bne	17ea4 <__assert_fail@plt+0x70cc>
   17db4:	ldr	r3, [fp, #12]
   17db8:	ldr	r2, [r3, #28]
   17dbc:	ldr	r3, [fp, #12]
   17dc0:	ldr	r3, [r3, #32]
   17dc4:	cmp	r2, r3
   17dc8:	beq	17df4 <__assert_fail@plt+0x701c>
   17dcc:	ldr	r3, [fp, #12]
   17dd0:	ldr	r2, [r3, #32]
   17dd4:	ldr	r3, [fp, #12]
   17dd8:	ldr	r3, [r3]
   17ddc:	cmp	r2, r3
   17de0:	beq	17df4 <__assert_fail@plt+0x701c>
   17de4:	ldr	r1, [fp, #12]
   17de8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17dec:	bl	171ec <__assert_fail@plt+0x6414>
   17df0:	b	17e1c <__assert_fail@plt+0x7044>
   17df4:	ldr	r3, [fp, #12]
   17df8:	ldr	r2, [r3, #32]
   17dfc:	ldr	r3, [fp, #12]
   17e00:	ldr	r3, [r3]
   17e04:	cmp	r2, r3
   17e08:	beq	17e34 <__assert_fail@plt+0x705c>
   17e0c:	ldr	r3, [fp, #12]
   17e10:	ldr	r2, [r3]
   17e14:	ldr	r3, [fp, #12]
   17e18:	str	r2, [r3, #28]
   17e1c:	b	17e34 <__assert_fail@plt+0x705c>
   17e20:	ldr	r3, [fp, #12]
   17e24:	ldr	r3, [r3]
   17e28:	add	r2, r3, #1
   17e2c:	ldr	r3, [fp, #12]
   17e30:	str	r2, [r3]
   17e34:	ldr	r3, [fp, #12]
   17e38:	ldr	r2, [r3]
   17e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e40:	cmp	r2, r3
   17e44:	bge	17e94 <__assert_fail@plt+0x70bc>
   17e48:	ldr	r3, [fp, #12]
   17e4c:	ldr	r3, [r3]
   17e50:	lsl	r3, r3, #2
   17e54:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17e58:	add	r3, r2, r3
   17e5c:	ldr	r3, [r3]
   17e60:	ldrb	r3, [r3]
   17e64:	cmp	r3, #45	; 0x2d
   17e68:	bne	17e20 <__assert_fail@plt+0x7048>
   17e6c:	ldr	r3, [fp, #12]
   17e70:	ldr	r3, [r3]
   17e74:	lsl	r3, r3, #2
   17e78:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17e7c:	add	r3, r2, r3
   17e80:	ldr	r3, [r3]
   17e84:	add	r3, r3, #1
   17e88:	ldrb	r3, [r3]
   17e8c:	cmp	r3, #0
   17e90:	beq	17e20 <__assert_fail@plt+0x7048>
   17e94:	ldr	r3, [fp, #12]
   17e98:	ldr	r2, [r3]
   17e9c:	ldr	r3, [fp, #12]
   17ea0:	str	r2, [r3, #32]
   17ea4:	ldr	r3, [fp, #12]
   17ea8:	ldr	r2, [r3]
   17eac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17eb0:	cmp	r2, r3
   17eb4:	beq	17f7c <__assert_fail@plt+0x71a4>
   17eb8:	ldr	r3, [fp, #12]
   17ebc:	ldr	r3, [r3]
   17ec0:	lsl	r3, r3, #2
   17ec4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17ec8:	add	r3, r2, r3
   17ecc:	ldr	r3, [r3]
   17ed0:	ldr	r1, [pc, #1692]	; 18574 <__assert_fail@plt+0x779c>
   17ed4:	mov	r0, r3
   17ed8:	bl	10b80 <strcmp@plt>
   17edc:	mov	r3, r0
   17ee0:	cmp	r3, #0
   17ee4:	bne	17f7c <__assert_fail@plt+0x71a4>
   17ee8:	ldr	r3, [fp, #12]
   17eec:	ldr	r3, [r3]
   17ef0:	add	r2, r3, #1
   17ef4:	ldr	r3, [fp, #12]
   17ef8:	str	r2, [r3]
   17efc:	ldr	r3, [fp, #12]
   17f00:	ldr	r2, [r3, #28]
   17f04:	ldr	r3, [fp, #12]
   17f08:	ldr	r3, [r3, #32]
   17f0c:	cmp	r2, r3
   17f10:	beq	17f3c <__assert_fail@plt+0x7164>
   17f14:	ldr	r3, [fp, #12]
   17f18:	ldr	r2, [r3, #32]
   17f1c:	ldr	r3, [fp, #12]
   17f20:	ldr	r3, [r3]
   17f24:	cmp	r2, r3
   17f28:	beq	17f3c <__assert_fail@plt+0x7164>
   17f2c:	ldr	r1, [fp, #12]
   17f30:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17f34:	bl	171ec <__assert_fail@plt+0x6414>
   17f38:	b	17f64 <__assert_fail@plt+0x718c>
   17f3c:	ldr	r3, [fp, #12]
   17f40:	ldr	r2, [r3, #28]
   17f44:	ldr	r3, [fp, #12]
   17f48:	ldr	r3, [r3, #32]
   17f4c:	cmp	r2, r3
   17f50:	bne	17f64 <__assert_fail@plt+0x718c>
   17f54:	ldr	r3, [fp, #12]
   17f58:	ldr	r2, [r3]
   17f5c:	ldr	r3, [fp, #12]
   17f60:	str	r2, [r3, #28]
   17f64:	ldr	r3, [fp, #12]
   17f68:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17f6c:	str	r2, [r3, #32]
   17f70:	ldr	r3, [fp, #12]
   17f74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17f78:	str	r2, [r3]
   17f7c:	ldr	r3, [fp, #12]
   17f80:	ldr	r2, [r3]
   17f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f88:	cmp	r2, r3
   17f8c:	bne	17fc0 <__assert_fail@plt+0x71e8>
   17f90:	ldr	r3, [fp, #12]
   17f94:	ldr	r2, [r3, #28]
   17f98:	ldr	r3, [fp, #12]
   17f9c:	ldr	r3, [r3, #32]
   17fa0:	cmp	r2, r3
   17fa4:	beq	17fb8 <__assert_fail@plt+0x71e0>
   17fa8:	ldr	r3, [fp, #12]
   17fac:	ldr	r2, [r3, #28]
   17fb0:	ldr	r3, [fp, #12]
   17fb4:	str	r2, [r3]
   17fb8:	mvn	r3, #0
   17fbc:	b	18568 <__assert_fail@plt+0x7790>
   17fc0:	ldr	r3, [fp, #12]
   17fc4:	ldr	r3, [r3]
   17fc8:	lsl	r3, r3, #2
   17fcc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17fd0:	add	r3, r2, r3
   17fd4:	ldr	r3, [r3]
   17fd8:	ldrb	r3, [r3]
   17fdc:	cmp	r3, #45	; 0x2d
   17fe0:	bne	1800c <__assert_fail@plt+0x7234>
   17fe4:	ldr	r3, [fp, #12]
   17fe8:	ldr	r3, [r3]
   17fec:	lsl	r3, r3, #2
   17ff0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17ff4:	add	r3, r2, r3
   17ff8:	ldr	r3, [r3]
   17ffc:	add	r3, r3, #1
   18000:	ldrb	r3, [r3]
   18004:	cmp	r3, #0
   18008:	bne	18058 <__assert_fail@plt+0x7280>
   1800c:	ldr	r3, [fp, #12]
   18010:	ldr	r3, [r3, #24]
   18014:	cmp	r3, #0
   18018:	bne	18024 <__assert_fail@plt+0x724c>
   1801c:	mvn	r3, #0
   18020:	b	18568 <__assert_fail@plt+0x7790>
   18024:	ldr	r3, [fp, #12]
   18028:	ldr	r3, [r3]
   1802c:	add	r1, r3, #1
   18030:	ldr	r2, [fp, #12]
   18034:	str	r1, [r2]
   18038:	lsl	r3, r3, #2
   1803c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18040:	add	r3, r2, r3
   18044:	ldr	r2, [r3]
   18048:	ldr	r3, [fp, #12]
   1804c:	str	r2, [r3, #12]
   18050:	mov	r3, #1
   18054:	b	18568 <__assert_fail@plt+0x7790>
   18058:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1805c:	cmp	r3, #0
   18060:	beq	181d8 <__assert_fail@plt+0x7400>
   18064:	ldr	r3, [fp, #12]
   18068:	ldr	r3, [r3]
   1806c:	lsl	r3, r3, #2
   18070:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18074:	add	r3, r2, r3
   18078:	ldr	r3, [r3]
   1807c:	add	r3, r3, #1
   18080:	ldrb	r3, [r3]
   18084:	cmp	r3, #45	; 0x2d
   18088:	bne	180f4 <__assert_fail@plt+0x731c>
   1808c:	ldr	r3, [fp, #12]
   18090:	ldr	r3, [r3]
   18094:	lsl	r3, r3, #2
   18098:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1809c:	add	r3, r2, r3
   180a0:	ldr	r3, [r3]
   180a4:	add	r2, r3, #2
   180a8:	ldr	r3, [fp, #12]
   180ac:	str	r2, [r3, #20]
   180b0:	ldr	r3, [pc, #1212]	; 18574 <__assert_fail@plt+0x779c>
   180b4:	str	r3, [sp, #16]
   180b8:	ldr	r3, [fp, #-8]
   180bc:	str	r3, [sp, #12]
   180c0:	ldr	r3, [fp, #12]
   180c4:	str	r3, [sp, #8]
   180c8:	ldr	r3, [fp, #8]
   180cc:	str	r3, [sp, #4]
   180d0:	ldr	r3, [fp, #4]
   180d4:	str	r3, [sp]
   180d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   180e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   180e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   180e8:	bl	17454 <__assert_fail@plt+0x667c>
   180ec:	mov	r3, r0
   180f0:	b	18568 <__assert_fail@plt+0x7790>
   180f4:	ldr	r3, [fp, #8]
   180f8:	cmp	r3, #0
   180fc:	beq	181d8 <__assert_fail@plt+0x7400>
   18100:	ldr	r3, [fp, #12]
   18104:	ldr	r3, [r3]
   18108:	lsl	r3, r3, #2
   1810c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18110:	add	r3, r2, r3
   18114:	ldr	r3, [r3]
   18118:	add	r3, r3, #2
   1811c:	ldrb	r3, [r3]
   18120:	cmp	r3, #0
   18124:	bne	18160 <__assert_fail@plt+0x7388>
   18128:	ldr	r3, [fp, #12]
   1812c:	ldr	r3, [r3]
   18130:	lsl	r3, r3, #2
   18134:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18138:	add	r3, r2, r3
   1813c:	ldr	r3, [r3]
   18140:	add	r3, r3, #1
   18144:	ldrb	r3, [r3]
   18148:	mov	r1, r3
   1814c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18150:	bl	10cac <strchr@plt>
   18154:	mov	r3, r0
   18158:	cmp	r3, #0
   1815c:	bne	181d8 <__assert_fail@plt+0x7400>
   18160:	ldr	r3, [fp, #12]
   18164:	ldr	r3, [r3]
   18168:	lsl	r3, r3, #2
   1816c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18170:	add	r3, r2, r3
   18174:	ldr	r3, [r3]
   18178:	add	r2, r3, #1
   1817c:	ldr	r3, [fp, #12]
   18180:	str	r2, [r3, #20]
   18184:	ldr	r3, [pc, #1004]	; 18578 <__assert_fail@plt+0x77a0>
   18188:	str	r3, [sp, #16]
   1818c:	ldr	r3, [fp, #-8]
   18190:	str	r3, [sp, #12]
   18194:	ldr	r3, [fp, #12]
   18198:	str	r3, [sp, #8]
   1819c:	ldr	r3, [fp, #8]
   181a0:	str	r3, [sp, #4]
   181a4:	ldr	r3, [fp, #4]
   181a8:	str	r3, [sp]
   181ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   181b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   181b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   181b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   181bc:	bl	17454 <__assert_fail@plt+0x667c>
   181c0:	str	r0, [fp, #-16]
   181c4:	ldr	r3, [fp, #-16]
   181c8:	cmn	r3, #1
   181cc:	beq	181d8 <__assert_fail@plt+0x7400>
   181d0:	ldr	r3, [fp, #-16]
   181d4:	b	18568 <__assert_fail@plt+0x7790>
   181d8:	ldr	r3, [fp, #12]
   181dc:	ldr	r3, [r3]
   181e0:	lsl	r3, r3, #2
   181e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   181e8:	add	r3, r2, r3
   181ec:	ldr	r3, [r3]
   181f0:	add	r2, r3, #1
   181f4:	ldr	r3, [fp, #12]
   181f8:	str	r2, [r3, #20]
   181fc:	ldr	r3, [fp, #12]
   18200:	ldr	r3, [r3, #20]
   18204:	add	r1, r3, #1
   18208:	ldr	r2, [fp, #12]
   1820c:	str	r1, [r2, #20]
   18210:	ldrb	r3, [r3]
   18214:	strb	r3, [fp, #-9]
   18218:	ldrb	r3, [fp, #-9]
   1821c:	mov	r1, r3
   18220:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18224:	bl	10cac <strchr@plt>
   18228:	str	r0, [fp, #-20]	; 0xffffffec
   1822c:	ldr	r3, [fp, #12]
   18230:	ldr	r3, [r3, #20]
   18234:	ldrb	r3, [r3]
   18238:	cmp	r3, #0
   1823c:	bne	18254 <__assert_fail@plt+0x747c>
   18240:	ldr	r3, [fp, #12]
   18244:	ldr	r3, [r3]
   18248:	add	r2, r3, #1
   1824c:	ldr	r3, [fp, #12]
   18250:	str	r2, [r3]
   18254:	ldr	r3, [fp, #-20]	; 0xffffffec
   18258:	cmp	r3, #0
   1825c:	beq	18278 <__assert_fail@plt+0x74a0>
   18260:	ldrb	r3, [fp, #-9]
   18264:	cmp	r3, #58	; 0x3a
   18268:	beq	18278 <__assert_fail@plt+0x74a0>
   1826c:	ldrb	r3, [fp, #-9]
   18270:	cmp	r3, #59	; 0x3b
   18274:	bne	182b4 <__assert_fail@plt+0x74dc>
   18278:	ldr	r3, [fp, #-8]
   1827c:	cmp	r3, #0
   18280:	beq	182a0 <__assert_fail@plt+0x74c8>
   18284:	ldr	r3, [pc, #752]	; 1857c <__assert_fail@plt+0x77a4>
   18288:	ldr	r0, [r3]
   1828c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18290:	ldr	r2, [r3]
   18294:	ldrb	r3, [fp, #-9]
   18298:	ldr	r1, [pc, #736]	; 18580 <__assert_fail@plt+0x77a8>
   1829c:	bl	10cc4 <fprintf@plt>
   182a0:	ldrb	r2, [fp, #-9]
   182a4:	ldr	r3, [fp, #12]
   182a8:	str	r2, [r3, #8]
   182ac:	mov	r3, #63	; 0x3f
   182b0:	b	18568 <__assert_fail@plt+0x7790>
   182b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   182b8:	ldrb	r3, [r3]
   182bc:	cmp	r3, #87	; 0x57
   182c0:	bne	18400 <__assert_fail@plt+0x7628>
   182c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   182c8:	add	r3, r3, #1
   182cc:	ldrb	r3, [r3]
   182d0:	cmp	r3, #59	; 0x3b
   182d4:	bne	18400 <__assert_fail@plt+0x7628>
   182d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   182dc:	cmp	r3, #0
   182e0:	beq	18400 <__assert_fail@plt+0x7628>
   182e4:	ldr	r3, [fp, #12]
   182e8:	ldr	r3, [r3, #20]
   182ec:	ldrb	r3, [r3]
   182f0:	cmp	r3, #0
   182f4:	beq	1830c <__assert_fail@plt+0x7534>
   182f8:	ldr	r3, [fp, #12]
   182fc:	ldr	r2, [r3, #20]
   18300:	ldr	r3, [fp, #12]
   18304:	str	r2, [r3, #12]
   18308:	b	183a0 <__assert_fail@plt+0x75c8>
   1830c:	ldr	r3, [fp, #12]
   18310:	ldr	r2, [r3]
   18314:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18318:	cmp	r2, r3
   1831c:	bne	18380 <__assert_fail@plt+0x75a8>
   18320:	ldr	r3, [fp, #-8]
   18324:	cmp	r3, #0
   18328:	beq	18348 <__assert_fail@plt+0x7570>
   1832c:	ldr	r3, [pc, #584]	; 1857c <__assert_fail@plt+0x77a4>
   18330:	ldr	r0, [r3]
   18334:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18338:	ldr	r2, [r3]
   1833c:	ldrb	r3, [fp, #-9]
   18340:	ldr	r1, [pc, #572]	; 18584 <__assert_fail@plt+0x77ac>
   18344:	bl	10cc4 <fprintf@plt>
   18348:	ldrb	r2, [fp, #-9]
   1834c:	ldr	r3, [fp, #12]
   18350:	str	r2, [r3, #8]
   18354:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18358:	ldrb	r3, [r3]
   1835c:	cmp	r3, #58	; 0x3a
   18360:	bne	18370 <__assert_fail@plt+0x7598>
   18364:	mov	r3, #58	; 0x3a
   18368:	strb	r3, [fp, #-9]
   1836c:	b	18378 <__assert_fail@plt+0x75a0>
   18370:	mov	r3, #63	; 0x3f
   18374:	strb	r3, [fp, #-9]
   18378:	ldrb	r3, [fp, #-9]
   1837c:	b	18568 <__assert_fail@plt+0x7790>
   18380:	ldr	r3, [fp, #12]
   18384:	ldr	r3, [r3]
   18388:	lsl	r3, r3, #2
   1838c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18390:	add	r3, r2, r3
   18394:	ldr	r2, [r3]
   18398:	ldr	r3, [fp, #12]
   1839c:	str	r2, [r3, #12]
   183a0:	ldr	r3, [fp, #12]
   183a4:	ldr	r2, [r3, #12]
   183a8:	ldr	r3, [fp, #12]
   183ac:	str	r2, [r3, #20]
   183b0:	ldr	r3, [fp, #12]
   183b4:	mov	r2, #0
   183b8:	str	r2, [r3, #12]
   183bc:	ldr	r3, [pc, #452]	; 18588 <__assert_fail@plt+0x77b0>
   183c0:	str	r3, [sp, #16]
   183c4:	ldr	r3, [fp, #-8]
   183c8:	str	r3, [sp, #12]
   183cc:	ldr	r3, [fp, #12]
   183d0:	str	r3, [sp, #8]
   183d4:	mov	r3, #0
   183d8:	str	r3, [sp, #4]
   183dc:	ldr	r3, [fp, #4]
   183e0:	str	r3, [sp]
   183e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   183e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   183ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
   183f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   183f4:	bl	17454 <__assert_fail@plt+0x667c>
   183f8:	mov	r3, r0
   183fc:	b	18568 <__assert_fail@plt+0x7790>
   18400:	ldr	r3, [fp, #-20]	; 0xffffffec
   18404:	add	r3, r3, #1
   18408:	ldrb	r3, [r3]
   1840c:	cmp	r3, #58	; 0x3a
   18410:	bne	18564 <__assert_fail@plt+0x778c>
   18414:	ldr	r3, [fp, #-20]	; 0xffffffec
   18418:	add	r3, r3, #2
   1841c:	ldrb	r3, [r3]
   18420:	cmp	r3, #58	; 0x3a
   18424:	bne	18480 <__assert_fail@plt+0x76a8>
   18428:	ldr	r3, [fp, #12]
   1842c:	ldr	r3, [r3, #20]
   18430:	ldrb	r3, [r3]
   18434:	cmp	r3, #0
   18438:	beq	18464 <__assert_fail@plt+0x768c>
   1843c:	ldr	r3, [fp, #12]
   18440:	ldr	r2, [r3, #20]
   18444:	ldr	r3, [fp, #12]
   18448:	str	r2, [r3, #12]
   1844c:	ldr	r3, [fp, #12]
   18450:	ldr	r3, [r3]
   18454:	add	r2, r3, #1
   18458:	ldr	r3, [fp, #12]
   1845c:	str	r2, [r3]
   18460:	b	18470 <__assert_fail@plt+0x7698>
   18464:	ldr	r3, [fp, #12]
   18468:	mov	r2, #0
   1846c:	str	r2, [r3, #12]
   18470:	ldr	r3, [fp, #12]
   18474:	mov	r2, #0
   18478:	str	r2, [r3, #20]
   1847c:	b	18564 <__assert_fail@plt+0x778c>
   18480:	ldr	r3, [fp, #12]
   18484:	ldr	r3, [r3, #20]
   18488:	ldrb	r3, [r3]
   1848c:	cmp	r3, #0
   18490:	beq	184bc <__assert_fail@plt+0x76e4>
   18494:	ldr	r3, [fp, #12]
   18498:	ldr	r2, [r3, #20]
   1849c:	ldr	r3, [fp, #12]
   184a0:	str	r2, [r3, #12]
   184a4:	ldr	r3, [fp, #12]
   184a8:	ldr	r3, [r3]
   184ac:	add	r2, r3, #1
   184b0:	ldr	r3, [fp, #12]
   184b4:	str	r2, [r3]
   184b8:	b	18558 <__assert_fail@plt+0x7780>
   184bc:	ldr	r3, [fp, #12]
   184c0:	ldr	r2, [r3]
   184c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184c8:	cmp	r2, r3
   184cc:	bne	1852c <__assert_fail@plt+0x7754>
   184d0:	ldr	r3, [fp, #-8]
   184d4:	cmp	r3, #0
   184d8:	beq	184f8 <__assert_fail@plt+0x7720>
   184dc:	ldr	r3, [pc, #152]	; 1857c <__assert_fail@plt+0x77a4>
   184e0:	ldr	r0, [r3]
   184e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   184e8:	ldr	r2, [r3]
   184ec:	ldrb	r3, [fp, #-9]
   184f0:	ldr	r1, [pc, #140]	; 18584 <__assert_fail@plt+0x77ac>
   184f4:	bl	10cc4 <fprintf@plt>
   184f8:	ldrb	r2, [fp, #-9]
   184fc:	ldr	r3, [fp, #12]
   18500:	str	r2, [r3, #8]
   18504:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18508:	ldrb	r3, [r3]
   1850c:	cmp	r3, #58	; 0x3a
   18510:	bne	18520 <__assert_fail@plt+0x7748>
   18514:	mov	r3, #58	; 0x3a
   18518:	strb	r3, [fp, #-9]
   1851c:	b	18558 <__assert_fail@plt+0x7780>
   18520:	mov	r3, #63	; 0x3f
   18524:	strb	r3, [fp, #-9]
   18528:	b	18558 <__assert_fail@plt+0x7780>
   1852c:	ldr	r3, [fp, #12]
   18530:	ldr	r3, [r3]
   18534:	add	r1, r3, #1
   18538:	ldr	r2, [fp, #12]
   1853c:	str	r1, [r2]
   18540:	lsl	r3, r3, #2
   18544:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18548:	add	r3, r2, r3
   1854c:	ldr	r2, [r3]
   18550:	ldr	r3, [fp, #12]
   18554:	str	r2, [r3, #12]
   18558:	ldr	r3, [fp, #12]
   1855c:	mov	r2, #0
   18560:	str	r2, [r3, #20]
   18564:	ldrb	r3, [fp, #-9]
   18568:	mov	r0, r3
   1856c:	sub	sp, fp, #4
   18570:	pop	{fp, pc}
   18574:	andeq	fp, r1, r8, ror fp
   18578:	andeq	fp, r1, ip, ror fp
   1857c:	andeq	ip, r2, r0, lsl r1
   18580:	andeq	fp, r1, r0, lsl #23
   18584:	muleq	r1, ip, fp
   18588:	andeq	fp, r1, r8, asr #23
   1858c:	push	{fp, lr}
   18590:	add	fp, sp, #4
   18594:	sub	sp, sp, #40	; 0x28
   18598:	str	r0, [fp, #-16]
   1859c:	str	r1, [fp, #-20]	; 0xffffffec
   185a0:	str	r2, [fp, #-24]	; 0xffffffe8
   185a4:	str	r3, [fp, #-28]	; 0xffffffe4
   185a8:	ldr	r3, [pc, #144]	; 18640 <__assert_fail@plt+0x7868>
   185ac:	ldr	r3, [r3]
   185b0:	ldr	r2, [pc, #140]	; 18644 <__assert_fail@plt+0x786c>
   185b4:	str	r3, [r2]
   185b8:	ldr	r3, [pc, #136]	; 18648 <__assert_fail@plt+0x7870>
   185bc:	ldr	r3, [r3]
   185c0:	ldr	r2, [pc, #124]	; 18644 <__assert_fail@plt+0x786c>
   185c4:	str	r3, [r2, #4]
   185c8:	ldr	r3, [fp, #12]
   185cc:	str	r3, [sp, #12]
   185d0:	ldr	r3, [pc, #108]	; 18644 <__assert_fail@plt+0x786c>
   185d4:	str	r3, [sp, #8]
   185d8:	ldr	r3, [fp, #8]
   185dc:	str	r3, [sp, #4]
   185e0:	ldr	r3, [fp, #4]
   185e4:	str	r3, [sp]
   185e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   185ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   185f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   185f4:	ldr	r0, [fp, #-16]
   185f8:	bl	17c60 <__assert_fail@plt+0x6e88>
   185fc:	str	r0, [fp, #-8]
   18600:	ldr	r3, [pc, #60]	; 18644 <__assert_fail@plt+0x786c>
   18604:	ldr	r3, [r3]
   18608:	ldr	r2, [pc, #48]	; 18640 <__assert_fail@plt+0x7868>
   1860c:	str	r3, [r2]
   18610:	ldr	r3, [pc, #44]	; 18644 <__assert_fail@plt+0x786c>
   18614:	ldr	r3, [r3, #12]
   18618:	ldr	r2, [pc, #44]	; 1864c <__assert_fail@plt+0x7874>
   1861c:	str	r3, [r2]
   18620:	ldr	r3, [pc, #28]	; 18644 <__assert_fail@plt+0x786c>
   18624:	ldr	r3, [r3, #8]
   18628:	ldr	r2, [pc, #32]	; 18650 <__assert_fail@plt+0x7878>
   1862c:	str	r3, [r2]
   18630:	ldr	r3, [fp, #-8]
   18634:	mov	r0, r3
   18638:	sub	sp, fp, #4
   1863c:	pop	{fp, pc}
   18640:	andeq	ip, r2, r4, lsl #2
   18644:	andeq	ip, r2, ip, lsr #2
   18648:	andeq	ip, r2, r8, lsl #2
   1864c:			; <UNDEFINED> instruction: 0x0002c1b8
   18650:	andeq	ip, r2, ip, lsl #2
   18654:	push	{fp, lr}
   18658:	add	fp, sp, #4
   1865c:	sub	sp, sp, #32
   18660:	str	r0, [fp, #-8]
   18664:	str	r1, [fp, #-12]
   18668:	str	r2, [fp, #-16]
   1866c:	mov	r3, #1
   18670:	str	r3, [sp, #8]
   18674:	mov	r3, #0
   18678:	str	r3, [sp, #4]
   1867c:	mov	r3, #0
   18680:	str	r3, [sp]
   18684:	mov	r3, #0
   18688:	ldr	r2, [fp, #-16]
   1868c:	ldr	r1, [fp, #-12]
   18690:	ldr	r0, [fp, #-8]
   18694:	bl	1858c <__assert_fail@plt+0x77b4>
   18698:	mov	r3, r0
   1869c:	mov	r0, r3
   186a0:	sub	sp, fp, #4
   186a4:	pop	{fp, pc}
   186a8:	push	{fp}		; (str fp, [sp, #-4]!)
   186ac:	add	fp, sp, #0
   186b0:	sub	sp, sp, #12
   186b4:	str	r0, [fp, #-8]
   186b8:	ldr	r3, [fp, #-8]
   186bc:	ldr	r3, [r3, #8]
   186c0:	mov	r0, r3
   186c4:	add	sp, fp, #0
   186c8:	pop	{fp}		; (ldr fp, [sp], #4)
   186cc:	bx	lr
   186d0:	push	{fp}		; (str fp, [sp, #-4]!)
   186d4:	add	fp, sp, #0
   186d8:	sub	sp, sp, #12
   186dc:	str	r0, [fp, #-8]
   186e0:	ldr	r3, [fp, #-8]
   186e4:	ldr	r3, [r3, #12]
   186e8:	mov	r0, r3
   186ec:	add	sp, fp, #0
   186f0:	pop	{fp}		; (ldr fp, [sp], #4)
   186f4:	bx	lr
   186f8:	push	{fp}		; (str fp, [sp, #-4]!)
   186fc:	add	fp, sp, #0
   18700:	sub	sp, sp, #12
   18704:	str	r0, [fp, #-8]
   18708:	ldr	r3, [fp, #-8]
   1870c:	ldr	r3, [r3, #16]
   18710:	mov	r0, r3
   18714:	add	sp, fp, #0
   18718:	pop	{fp}		; (ldr fp, [sp], #4)
   1871c:	bx	lr
   18720:	push	{fp}		; (str fp, [sp, #-4]!)
   18724:	add	fp, sp, #0
   18728:	sub	sp, sp, #28
   1872c:	str	r0, [fp, #-24]	; 0xffffffe8
   18730:	mov	r3, #0
   18734:	str	r3, [fp, #-12]
   18738:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1873c:	ldr	r3, [r3]
   18740:	str	r3, [fp, #-8]
   18744:	b	187b4 <__assert_fail@plt+0x79dc>
   18748:	ldr	r3, [fp, #-8]
   1874c:	ldr	r3, [r3]
   18750:	cmp	r3, #0
   18754:	beq	187a8 <__assert_fail@plt+0x79d0>
   18758:	ldr	r3, [fp, #-8]
   1875c:	str	r3, [fp, #-16]
   18760:	mov	r3, #1
   18764:	str	r3, [fp, #-20]	; 0xffffffec
   18768:	b	18778 <__assert_fail@plt+0x79a0>
   1876c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18770:	add	r3, r3, #1
   18774:	str	r3, [fp, #-20]	; 0xffffffec
   18778:	ldr	r3, [fp, #-16]
   1877c:	ldr	r3, [r3, #4]
   18780:	str	r3, [fp, #-16]
   18784:	ldr	r3, [fp, #-16]
   18788:	cmp	r3, #0
   1878c:	bne	1876c <__assert_fail@plt+0x7994>
   18790:	ldr	r2, [fp, #-20]	; 0xffffffec
   18794:	ldr	r3, [fp, #-12]
   18798:	cmp	r2, r3
   1879c:	bls	187a8 <__assert_fail@plt+0x79d0>
   187a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   187a4:	str	r3, [fp, #-12]
   187a8:	ldr	r3, [fp, #-8]
   187ac:	add	r3, r3, #8
   187b0:	str	r3, [fp, #-8]
   187b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187b8:	ldr	r2, [r3, #4]
   187bc:	ldr	r3, [fp, #-8]
   187c0:	cmp	r2, r3
   187c4:	bhi	18748 <__assert_fail@plt+0x7970>
   187c8:	ldr	r3, [fp, #-12]
   187cc:	mov	r0, r3
   187d0:	add	sp, fp, #0
   187d4:	pop	{fp}		; (ldr fp, [sp], #4)
   187d8:	bx	lr
   187dc:	push	{fp}		; (str fp, [sp, #-4]!)
   187e0:	add	fp, sp, #0
   187e4:	sub	sp, sp, #28
   187e8:	str	r0, [fp, #-24]	; 0xffffffe8
   187ec:	mov	r3, #0
   187f0:	str	r3, [fp, #-12]
   187f4:	mov	r3, #0
   187f8:	str	r3, [fp, #-16]
   187fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18800:	ldr	r3, [r3]
   18804:	str	r3, [fp, #-8]
   18808:	b	18870 <__assert_fail@plt+0x7a98>
   1880c:	ldr	r3, [fp, #-8]
   18810:	ldr	r3, [r3]
   18814:	cmp	r3, #0
   18818:	beq	18864 <__assert_fail@plt+0x7a8c>
   1881c:	ldr	r3, [fp, #-8]
   18820:	str	r3, [fp, #-20]	; 0xffffffec
   18824:	ldr	r3, [fp, #-12]
   18828:	add	r3, r3, #1
   1882c:	str	r3, [fp, #-12]
   18830:	ldr	r3, [fp, #-16]
   18834:	add	r3, r3, #1
   18838:	str	r3, [fp, #-16]
   1883c:	b	1884c <__assert_fail@plt+0x7a74>
   18840:	ldr	r3, [fp, #-16]
   18844:	add	r3, r3, #1
   18848:	str	r3, [fp, #-16]
   1884c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18850:	ldr	r3, [r3, #4]
   18854:	str	r3, [fp, #-20]	; 0xffffffec
   18858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1885c:	cmp	r3, #0
   18860:	bne	18840 <__assert_fail@plt+0x7a68>
   18864:	ldr	r3, [fp, #-8]
   18868:	add	r3, r3, #8
   1886c:	str	r3, [fp, #-8]
   18870:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18874:	ldr	r2, [r3, #4]
   18878:	ldr	r3, [fp, #-8]
   1887c:	cmp	r2, r3
   18880:	bhi	1880c <__assert_fail@plt+0x7a34>
   18884:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18888:	ldr	r2, [r3, #12]
   1888c:	ldr	r3, [fp, #-12]
   18890:	cmp	r2, r3
   18894:	bne	188b4 <__assert_fail@plt+0x7adc>
   18898:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1889c:	ldr	r2, [r3, #16]
   188a0:	ldr	r3, [fp, #-16]
   188a4:	cmp	r2, r3
   188a8:	bne	188b4 <__assert_fail@plt+0x7adc>
   188ac:	mov	r3, #1
   188b0:	b	188b8 <__assert_fail@plt+0x7ae0>
   188b4:	mov	r3, #0
   188b8:	mov	r0, r3
   188bc:	add	sp, fp, #0
   188c0:	pop	{fp}		; (ldr fp, [sp], #4)
   188c4:	bx	lr
   188c8:	push	{fp, lr}
   188cc:	add	fp, sp, #4
   188d0:	sub	sp, sp, #32
   188d4:	str	r0, [fp, #-24]	; 0xffffffe8
   188d8:	str	r1, [fp, #-28]	; 0xffffffe4
   188dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   188e0:	bl	186f8 <__assert_fail@plt+0x7920>
   188e4:	str	r0, [fp, #-8]
   188e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   188ec:	bl	186a8 <__assert_fail@plt+0x78d0>
   188f0:	str	r0, [fp, #-12]
   188f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   188f8:	bl	186d0 <__assert_fail@plt+0x78f8>
   188fc:	str	r0, [fp, #-16]
   18900:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18904:	bl	18720 <__assert_fail@plt+0x7948>
   18908:	str	r0, [fp, #-20]	; 0xffffffec
   1890c:	ldr	r2, [fp, #-8]
   18910:	ldr	r1, [pc, #112]	; 18988 <__assert_fail@plt+0x7bb0>
   18914:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18918:	bl	10cc4 <fprintf@plt>
   1891c:	ldr	r2, [fp, #-12]
   18920:	ldr	r1, [pc, #100]	; 1898c <__assert_fail@plt+0x7bb4>
   18924:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18928:	bl	10cc4 <fprintf@plt>
   1892c:	ldr	r3, [fp, #-16]
   18930:	vmov	s15, r3
   18934:	vcvt.f64.u32	d7, s15
   18938:	vldr	d6, [pc, #64]	; 18980 <__assert_fail@plt+0x7ba8>
   1893c:	vmul.f64	d5, d7, d6
   18940:	ldr	r3, [fp, #-12]
   18944:	vmov	s15, r3
   18948:	vcvt.f64.u32	d6, s15
   1894c:	vdiv.f64	d7, d5, d6
   18950:	vstr	d7, [sp]
   18954:	ldr	r2, [fp, #-16]
   18958:	ldr	r1, [pc, #48]	; 18990 <__assert_fail@plt+0x7bb8>
   1895c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18960:	bl	10cc4 <fprintf@plt>
   18964:	ldr	r2, [fp, #-20]	; 0xffffffec
   18968:	ldr	r1, [pc, #36]	; 18994 <__assert_fail@plt+0x7bbc>
   1896c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18970:	bl	10cc4 <fprintf@plt>
   18974:	nop			; (mov r0, r0)
   18978:	sub	sp, fp, #4
   1897c:	pop	{fp, pc}
   18980:	andeq	r0, r0, r0
   18984:	subsmi	r0, r9, r0
   18988:	andeq	fp, r1, r0, ror #23
   1898c:	strdeq	fp, [r1], -r8
   18990:	andeq	fp, r1, r0, lsl ip
   18994:	andeq	fp, r1, r4, lsr ip
   18998:	push	{fp, lr}
   1899c:	add	fp, sp, #4
   189a0:	sub	sp, sp, #16
   189a4:	str	r0, [fp, #-16]
   189a8:	str	r1, [fp, #-20]	; 0xffffffec
   189ac:	ldr	r3, [fp, #-16]
   189b0:	ldr	r3, [r3, #24]
   189b4:	ldr	r2, [fp, #-16]
   189b8:	ldr	r2, [r2, #8]
   189bc:	mov	r1, r2
   189c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   189c4:	blx	r3
   189c8:	str	r0, [fp, #-8]
   189cc:	ldr	r3, [fp, #-16]
   189d0:	ldr	r2, [r3, #8]
   189d4:	ldr	r3, [fp, #-8]
   189d8:	cmp	r2, r3
   189dc:	bhi	189e4 <__assert_fail@plt+0x7c0c>
   189e0:	bl	10d9c <abort@plt>
   189e4:	ldr	r3, [fp, #-16]
   189e8:	ldr	r2, [r3]
   189ec:	ldr	r3, [fp, #-8]
   189f0:	lsl	r3, r3, #3
   189f4:	add	r3, r2, r3
   189f8:	mov	r0, r3
   189fc:	sub	sp, fp, #4
   18a00:	pop	{fp, pc}
   18a04:	push	{fp, lr}
   18a08:	add	fp, sp, #4
   18a0c:	sub	sp, sp, #16
   18a10:	str	r0, [fp, #-16]
   18a14:	str	r1, [fp, #-20]	; 0xffffffec
   18a18:	ldr	r1, [fp, #-20]	; 0xffffffec
   18a1c:	ldr	r0, [fp, #-16]
   18a20:	bl	18998 <__assert_fail@plt+0x7bc0>
   18a24:	str	r0, [fp, #-12]
   18a28:	ldr	r3, [fp, #-12]
   18a2c:	ldr	r3, [r3]
   18a30:	cmp	r3, #0
   18a34:	bne	18a40 <__assert_fail@plt+0x7c68>
   18a38:	mov	r3, #0
   18a3c:	b	18ab0 <__assert_fail@plt+0x7cd8>
   18a40:	ldr	r3, [fp, #-12]
   18a44:	str	r3, [fp, #-8]
   18a48:	b	18aa0 <__assert_fail@plt+0x7cc8>
   18a4c:	ldr	r3, [fp, #-8]
   18a50:	ldr	r2, [r3]
   18a54:	ldr	r3, [fp, #-20]	; 0xffffffec
   18a58:	cmp	r2, r3
   18a5c:	beq	18a88 <__assert_fail@plt+0x7cb0>
   18a60:	ldr	r3, [fp, #-16]
   18a64:	ldr	r3, [r3, #28]
   18a68:	ldr	r2, [fp, #-8]
   18a6c:	ldr	r2, [r2]
   18a70:	mov	r1, r2
   18a74:	ldr	r0, [fp, #-20]	; 0xffffffec
   18a78:	blx	r3
   18a7c:	mov	r3, r0
   18a80:	cmp	r3, #0
   18a84:	beq	18a94 <__assert_fail@plt+0x7cbc>
   18a88:	ldr	r3, [fp, #-8]
   18a8c:	ldr	r3, [r3]
   18a90:	b	18ab0 <__assert_fail@plt+0x7cd8>
   18a94:	ldr	r3, [fp, #-8]
   18a98:	ldr	r3, [r3, #4]
   18a9c:	str	r3, [fp, #-8]
   18aa0:	ldr	r3, [fp, #-8]
   18aa4:	cmp	r3, #0
   18aa8:	bne	18a4c <__assert_fail@plt+0x7c74>
   18aac:	mov	r3, #0
   18ab0:	mov	r0, r3
   18ab4:	sub	sp, fp, #4
   18ab8:	pop	{fp, pc}
   18abc:	push	{fp, lr}
   18ac0:	add	fp, sp, #4
   18ac4:	sub	sp, sp, #16
   18ac8:	str	r0, [fp, #-16]
   18acc:	ldr	r3, [fp, #-16]
   18ad0:	ldr	r3, [r3, #16]
   18ad4:	cmp	r3, #0
   18ad8:	bne	18ae4 <__assert_fail@plt+0x7d0c>
   18adc:	mov	r3, #0
   18ae0:	b	18b34 <__assert_fail@plt+0x7d5c>
   18ae4:	ldr	r3, [fp, #-16]
   18ae8:	ldr	r3, [r3]
   18aec:	str	r3, [fp, #-8]
   18af0:	ldr	r3, [fp, #-16]
   18af4:	ldr	r2, [r3, #4]
   18af8:	ldr	r3, [fp, #-8]
   18afc:	cmp	r2, r3
   18b00:	bhi	18b08 <__assert_fail@plt+0x7d30>
   18b04:	bl	10d9c <abort@plt>
   18b08:	ldr	r3, [fp, #-8]
   18b0c:	ldr	r3, [r3]
   18b10:	cmp	r3, #0
   18b14:	beq	18b24 <__assert_fail@plt+0x7d4c>
   18b18:	ldr	r3, [fp, #-8]
   18b1c:	ldr	r3, [r3]
   18b20:	b	18b34 <__assert_fail@plt+0x7d5c>
   18b24:	ldr	r3, [fp, #-8]
   18b28:	add	r3, r3, #8
   18b2c:	str	r3, [fp, #-8]
   18b30:	b	18af0 <__assert_fail@plt+0x7d18>
   18b34:	mov	r0, r3
   18b38:	sub	sp, fp, #4
   18b3c:	pop	{fp, pc}
   18b40:	push	{fp, lr}
   18b44:	add	fp, sp, #4
   18b48:	sub	sp, sp, #16
   18b4c:	str	r0, [fp, #-16]
   18b50:	str	r1, [fp, #-20]	; 0xffffffec
   18b54:	ldr	r1, [fp, #-20]	; 0xffffffec
   18b58:	ldr	r0, [fp, #-16]
   18b5c:	bl	18998 <__assert_fail@plt+0x7bc0>
   18b60:	str	r0, [fp, #-8]
   18b64:	ldr	r3, [fp, #-8]
   18b68:	str	r3, [fp, #-12]
   18b6c:	ldr	r3, [fp, #-12]
   18b70:	ldr	r2, [r3]
   18b74:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b78:	cmp	r2, r3
   18b7c:	bne	18ba0 <__assert_fail@plt+0x7dc8>
   18b80:	ldr	r3, [fp, #-12]
   18b84:	ldr	r3, [r3, #4]
   18b88:	cmp	r3, #0
   18b8c:	beq	18ba0 <__assert_fail@plt+0x7dc8>
   18b90:	ldr	r3, [fp, #-12]
   18b94:	ldr	r3, [r3, #4]
   18b98:	ldr	r3, [r3]
   18b9c:	b	18bfc <__assert_fail@plt+0x7e24>
   18ba0:	ldr	r3, [fp, #-12]
   18ba4:	ldr	r3, [r3, #4]
   18ba8:	str	r3, [fp, #-12]
   18bac:	ldr	r3, [fp, #-12]
   18bb0:	cmp	r3, #0
   18bb4:	bne	18b6c <__assert_fail@plt+0x7d94>
   18bb8:	b	18bd8 <__assert_fail@plt+0x7e00>
   18bbc:	ldr	r3, [fp, #-8]
   18bc0:	ldr	r3, [r3]
   18bc4:	cmp	r3, #0
   18bc8:	beq	18bd8 <__assert_fail@plt+0x7e00>
   18bcc:	ldr	r3, [fp, #-8]
   18bd0:	ldr	r3, [r3]
   18bd4:	b	18bfc <__assert_fail@plt+0x7e24>
   18bd8:	ldr	r3, [fp, #-8]
   18bdc:	add	r3, r3, #8
   18be0:	str	r3, [fp, #-8]
   18be4:	ldr	r3, [fp, #-16]
   18be8:	ldr	r3, [r3, #4]
   18bec:	ldr	r2, [fp, #-8]
   18bf0:	cmp	r2, r3
   18bf4:	bcc	18bbc <__assert_fail@plt+0x7de4>
   18bf8:	mov	r3, #0
   18bfc:	mov	r0, r3
   18c00:	sub	sp, fp, #4
   18c04:	pop	{fp, pc}
   18c08:	push	{fp}		; (str fp, [sp, #-4]!)
   18c0c:	add	fp, sp, #0
   18c10:	sub	sp, sp, #36	; 0x24
   18c14:	str	r0, [fp, #-24]	; 0xffffffe8
   18c18:	str	r1, [fp, #-28]	; 0xffffffe4
   18c1c:	str	r2, [fp, #-32]	; 0xffffffe0
   18c20:	mov	r3, #0
   18c24:	str	r3, [fp, #-8]
   18c28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c2c:	ldr	r3, [r3]
   18c30:	str	r3, [fp, #-12]
   18c34:	b	18cb4 <__assert_fail@plt+0x7edc>
   18c38:	ldr	r3, [fp, #-12]
   18c3c:	ldr	r3, [r3]
   18c40:	cmp	r3, #0
   18c44:	beq	18ca8 <__assert_fail@plt+0x7ed0>
   18c48:	ldr	r3, [fp, #-12]
   18c4c:	str	r3, [fp, #-16]
   18c50:	b	18c9c <__assert_fail@plt+0x7ec4>
   18c54:	ldr	r2, [fp, #-8]
   18c58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18c5c:	cmp	r2, r3
   18c60:	bcc	18c6c <__assert_fail@plt+0x7e94>
   18c64:	ldr	r3, [fp, #-8]
   18c68:	b	18ccc <__assert_fail@plt+0x7ef4>
   18c6c:	ldr	r3, [fp, #-8]
   18c70:	add	r2, r3, #1
   18c74:	str	r2, [fp, #-8]
   18c78:	lsl	r3, r3, #2
   18c7c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18c80:	add	r3, r2, r3
   18c84:	ldr	r2, [fp, #-16]
   18c88:	ldr	r2, [r2]
   18c8c:	str	r2, [r3]
   18c90:	ldr	r3, [fp, #-16]
   18c94:	ldr	r3, [r3, #4]
   18c98:	str	r3, [fp, #-16]
   18c9c:	ldr	r3, [fp, #-16]
   18ca0:	cmp	r3, #0
   18ca4:	bne	18c54 <__assert_fail@plt+0x7e7c>
   18ca8:	ldr	r3, [fp, #-12]
   18cac:	add	r3, r3, #8
   18cb0:	str	r3, [fp, #-12]
   18cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18cb8:	ldr	r2, [r3, #4]
   18cbc:	ldr	r3, [fp, #-12]
   18cc0:	cmp	r2, r3
   18cc4:	bhi	18c38 <__assert_fail@plt+0x7e60>
   18cc8:	ldr	r3, [fp, #-8]
   18ccc:	mov	r0, r3
   18cd0:	add	sp, fp, #0
   18cd4:	pop	{fp}		; (ldr fp, [sp], #4)
   18cd8:	bx	lr
   18cdc:	push	{fp, lr}
   18ce0:	add	fp, sp, #4
   18ce4:	sub	sp, sp, #32
   18ce8:	str	r0, [fp, #-24]	; 0xffffffe8
   18cec:	str	r1, [fp, #-28]	; 0xffffffe4
   18cf0:	str	r2, [fp, #-32]	; 0xffffffe0
   18cf4:	mov	r3, #0
   18cf8:	str	r3, [fp, #-8]
   18cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d00:	ldr	r3, [r3]
   18d04:	str	r3, [fp, #-12]
   18d08:	b	18d8c <__assert_fail@plt+0x7fb4>
   18d0c:	ldr	r3, [fp, #-12]
   18d10:	ldr	r3, [r3]
   18d14:	cmp	r3, #0
   18d18:	beq	18d80 <__assert_fail@plt+0x7fa8>
   18d1c:	ldr	r3, [fp, #-12]
   18d20:	str	r3, [fp, #-16]
   18d24:	b	18d74 <__assert_fail@plt+0x7f9c>
   18d28:	ldr	r3, [fp, #-16]
   18d2c:	ldr	r2, [r3]
   18d30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d34:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18d38:	mov	r0, r2
   18d3c:	blx	r3
   18d40:	mov	r3, r0
   18d44:	eor	r3, r3, #1
   18d48:	uxtb	r3, r3
   18d4c:	cmp	r3, #0
   18d50:	beq	18d5c <__assert_fail@plt+0x7f84>
   18d54:	ldr	r3, [fp, #-8]
   18d58:	b	18da4 <__assert_fail@plt+0x7fcc>
   18d5c:	ldr	r3, [fp, #-8]
   18d60:	add	r3, r3, #1
   18d64:	str	r3, [fp, #-8]
   18d68:	ldr	r3, [fp, #-16]
   18d6c:	ldr	r3, [r3, #4]
   18d70:	str	r3, [fp, #-16]
   18d74:	ldr	r3, [fp, #-16]
   18d78:	cmp	r3, #0
   18d7c:	bne	18d28 <__assert_fail@plt+0x7f50>
   18d80:	ldr	r3, [fp, #-12]
   18d84:	add	r3, r3, #8
   18d88:	str	r3, [fp, #-12]
   18d8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d90:	ldr	r2, [r3, #4]
   18d94:	ldr	r3, [fp, #-12]
   18d98:	cmp	r2, r3
   18d9c:	bhi	18d0c <__assert_fail@plt+0x7f34>
   18da0:	ldr	r3, [fp, #-8]
   18da4:	mov	r0, r3
   18da8:	sub	sp, fp, #4
   18dac:	pop	{fp, pc}
   18db0:	push	{fp, lr}
   18db4:	add	fp, sp, #4
   18db8:	sub	sp, sp, #16
   18dbc:	str	r0, [fp, #-16]
   18dc0:	str	r1, [fp, #-20]	; 0xffffffec
   18dc4:	mov	r3, #0
   18dc8:	str	r3, [fp, #-8]
   18dcc:	b	18e08 <__assert_fail@plt+0x8030>
   18dd0:	ldr	r2, [fp, #-8]
   18dd4:	mov	r3, r2
   18dd8:	lsl	r3, r3, #5
   18ddc:	sub	r2, r3, r2
   18de0:	ldrb	r3, [fp, #-9]
   18de4:	add	r3, r2, r3
   18de8:	ldr	r1, [fp, #-20]	; 0xffffffec
   18dec:	mov	r0, r3
   18df0:	bl	1b3c4 <__assert_fail@plt+0xa5ec>
   18df4:	mov	r3, r1
   18df8:	str	r3, [fp, #-8]
   18dfc:	ldr	r3, [fp, #-16]
   18e00:	add	r3, r3, #1
   18e04:	str	r3, [fp, #-16]
   18e08:	ldr	r3, [fp, #-16]
   18e0c:	ldrb	r3, [r3]
   18e10:	strb	r3, [fp, #-9]
   18e14:	ldrb	r3, [fp, #-9]
   18e18:	cmp	r3, #0
   18e1c:	bne	18dd0 <__assert_fail@plt+0x7ff8>
   18e20:	ldr	r3, [fp, #-8]
   18e24:	mov	r0, r3
   18e28:	sub	sp, fp, #4
   18e2c:	pop	{fp, pc}
   18e30:	push	{fp, lr}
   18e34:	add	fp, sp, #4
   18e38:	sub	sp, sp, #16
   18e3c:	str	r0, [fp, #-16]
   18e40:	mov	r3, #3
   18e44:	str	r3, [fp, #-8]
   18e48:	ldr	r3, [fp, #-8]
   18e4c:	ldr	r2, [fp, #-8]
   18e50:	mul	r3, r2, r3
   18e54:	str	r3, [fp, #-12]
   18e58:	b	18e88 <__assert_fail@plt+0x80b0>
   18e5c:	ldr	r3, [fp, #-8]
   18e60:	add	r3, r3, #1
   18e64:	str	r3, [fp, #-8]
   18e68:	ldr	r3, [fp, #-8]
   18e6c:	lsl	r3, r3, #2
   18e70:	ldr	r2, [fp, #-12]
   18e74:	add	r3, r2, r3
   18e78:	str	r3, [fp, #-12]
   18e7c:	ldr	r3, [fp, #-8]
   18e80:	add	r3, r3, #1
   18e84:	str	r3, [fp, #-8]
   18e88:	ldr	r2, [fp, #-12]
   18e8c:	ldr	r3, [fp, #-16]
   18e90:	cmp	r2, r3
   18e94:	bcs	18eb4 <__assert_fail@plt+0x80dc>
   18e98:	ldr	r3, [fp, #-16]
   18e9c:	ldr	r1, [fp, #-8]
   18ea0:	mov	r0, r3
   18ea4:	bl	1b3c4 <__assert_fail@plt+0xa5ec>
   18ea8:	mov	r3, r1
   18eac:	cmp	r3, #0
   18eb0:	bne	18e5c <__assert_fail@plt+0x8084>
   18eb4:	ldr	r3, [fp, #-16]
   18eb8:	ldr	r1, [fp, #-8]
   18ebc:	mov	r0, r3
   18ec0:	bl	1b3c4 <__assert_fail@plt+0xa5ec>
   18ec4:	mov	r3, r1
   18ec8:	cmp	r3, #0
   18ecc:	movne	r3, #1
   18ed0:	moveq	r3, #0
   18ed4:	uxtb	r3, r3
   18ed8:	mov	r0, r3
   18edc:	sub	sp, fp, #4
   18ee0:	pop	{fp, pc}
   18ee4:	push	{fp, lr}
   18ee8:	add	fp, sp, #4
   18eec:	sub	sp, sp, #8
   18ef0:	str	r0, [fp, #-8]
   18ef4:	ldr	r3, [fp, #-8]
   18ef8:	cmp	r3, #9
   18efc:	bhi	18f08 <__assert_fail@plt+0x8130>
   18f00:	mov	r3, #10
   18f04:	str	r3, [fp, #-8]
   18f08:	ldr	r3, [fp, #-8]
   18f0c:	orr	r3, r3, #1
   18f10:	str	r3, [fp, #-8]
   18f14:	b	18f24 <__assert_fail@plt+0x814c>
   18f18:	ldr	r3, [fp, #-8]
   18f1c:	add	r3, r3, #2
   18f20:	str	r3, [fp, #-8]
   18f24:	ldr	r3, [fp, #-8]
   18f28:	cmn	r3, #1
   18f2c:	beq	18f4c <__assert_fail@plt+0x8174>
   18f30:	ldr	r0, [fp, #-8]
   18f34:	bl	18e30 <__assert_fail@plt+0x8058>
   18f38:	mov	r3, r0
   18f3c:	eor	r3, r3, #1
   18f40:	uxtb	r3, r3
   18f44:	cmp	r3, #0
   18f48:	bne	18f18 <__assert_fail@plt+0x8140>
   18f4c:	ldr	r3, [fp, #-8]
   18f50:	mov	r0, r3
   18f54:	sub	sp, fp, #4
   18f58:	pop	{fp, pc}
   18f5c:	push	{fp, lr}
   18f60:	add	fp, sp, #4
   18f64:	sub	sp, sp, #8
   18f68:	str	r0, [fp, #-8]
   18f6c:	ldr	r3, [fp, #-8]
   18f70:	ldr	r2, [pc, #32]	; 18f98 <__assert_fail@plt+0x81c0>
   18f74:	mov	ip, r3
   18f78:	mov	lr, r2
   18f7c:	ldm	lr!, {r0, r1, r2, r3}
   18f80:	stmia	ip!, {r0, r1, r2, r3}
   18f84:	ldr	r3, [lr]
   18f88:	str	r3, [ip]
   18f8c:	nop			; (mov r0, r0)
   18f90:	sub	sp, fp, #4
   18f94:	pop	{fp, pc}
   18f98:	andeq	fp, r1, ip, asr #23
   18f9c:	push	{fp, lr}
   18fa0:	add	fp, sp, #4
   18fa4:	sub	sp, sp, #16
   18fa8:	str	r0, [fp, #-16]
   18fac:	str	r1, [fp, #-20]	; 0xffffffec
   18fb0:	ldr	r3, [fp, #-16]
   18fb4:	mov	r1, #3
   18fb8:	mov	r0, r3
   18fbc:	bl	1aa84 <__assert_fail@plt+0x9cac>
   18fc0:	str	r0, [fp, #-8]
   18fc4:	ldr	r3, [fp, #-8]
   18fc8:	ldr	r1, [fp, #-20]	; 0xffffffec
   18fcc:	mov	r0, r3
   18fd0:	bl	1b3c4 <__assert_fail@plt+0xa5ec>
   18fd4:	mov	r3, r1
   18fd8:	mov	r0, r3
   18fdc:	sub	sp, fp, #4
   18fe0:	pop	{fp, pc}
   18fe4:	push	{fp}		; (str fp, [sp, #-4]!)
   18fe8:	add	fp, sp, #0
   18fec:	sub	sp, sp, #12
   18ff0:	str	r0, [fp, #-8]
   18ff4:	str	r1, [fp, #-12]
   18ff8:	ldr	r2, [fp, #-8]
   18ffc:	ldr	r3, [fp, #-12]
   19000:	cmp	r2, r3
   19004:	moveq	r3, #1
   19008:	movne	r3, #0
   1900c:	uxtb	r3, r3
   19010:	mov	r0, r3
   19014:	add	sp, fp, #0
   19018:	pop	{fp}		; (ldr fp, [sp], #4)
   1901c:	bx	lr
   19020:	push	{fp}		; (str fp, [sp, #-4]!)
   19024:	add	fp, sp, #0
   19028:	sub	sp, sp, #20
   1902c:	str	r0, [fp, #-16]
   19030:	ldr	r3, [fp, #-16]
   19034:	ldr	r3, [r3, #20]
   19038:	str	r3, [fp, #-8]
   1903c:	ldr	r3, [fp, #-8]
   19040:	ldr	r2, [pc, #268]	; 19154 <__assert_fail@plt+0x837c>
   19044:	cmp	r3, r2
   19048:	bne	19054 <__assert_fail@plt+0x827c>
   1904c:	mov	r3, #1
   19050:	b	19140 <__assert_fail@plt+0x8368>
   19054:	ldr	r3, [pc, #252]	; 19158 <__assert_fail@plt+0x8380>
   19058:	str	r3, [fp, #-12]
   1905c:	ldr	r3, [fp, #-8]
   19060:	vldr	s14, [r3, #8]
   19064:	vldr	s15, [fp, #-12]
   19068:	vcmpe.f32	s14, s15
   1906c:	vmrs	APSR_nzcv, fpscr
   19070:	ble	19130 <__assert_fail@plt+0x8358>
   19074:	ldr	r3, [fp, #-8]
   19078:	vldr	s14, [r3, #8]
   1907c:	vldr	s13, [pc, #204]	; 19150 <__assert_fail@plt+0x8378>
   19080:	vldr	s15, [fp, #-12]
   19084:	vsub.f32	s15, s13, s15
   19088:	vcmpe.f32	s14, s15
   1908c:	vmrs	APSR_nzcv, fpscr
   19090:	bpl	19130 <__assert_fail@plt+0x8358>
   19094:	vldr	s15, [fp, #-12]
   19098:	vldr	s14, [pc, #176]	; 19150 <__assert_fail@plt+0x8378>
   1909c:	vadd.f32	s14, s15, s14
   190a0:	ldr	r3, [fp, #-8]
   190a4:	vldr	s15, [r3, #12]
   190a8:	vcmpe.f32	s14, s15
   190ac:	vmrs	APSR_nzcv, fpscr
   190b0:	bpl	19130 <__assert_fail@plt+0x8358>
   190b4:	ldr	r3, [fp, #-8]
   190b8:	vldr	s15, [r3]
   190bc:	vcmpe.f32	s15, #0.0
   190c0:	vmrs	APSR_nzcv, fpscr
   190c4:	blt	19130 <__assert_fail@plt+0x8358>
   190c8:	ldr	r3, [fp, #-8]
   190cc:	vldr	s14, [r3]
   190d0:	vldr	s15, [fp, #-12]
   190d4:	vadd.f32	s14, s14, s15
   190d8:	ldr	r3, [fp, #-8]
   190dc:	vldr	s15, [r3, #4]
   190e0:	vcmpe.f32	s14, s15
   190e4:	vmrs	APSR_nzcv, fpscr
   190e8:	bpl	19130 <__assert_fail@plt+0x8358>
   190ec:	ldr	r3, [fp, #-8]
   190f0:	vldr	s15, [r3, #4]
   190f4:	vldr	s14, [pc, #84]	; 19150 <__assert_fail@plt+0x8378>
   190f8:	vcmpe.f32	s15, s14
   190fc:	vmrs	APSR_nzcv, fpscr
   19100:	bhi	19130 <__assert_fail@plt+0x8358>
   19104:	ldr	r3, [fp, #-8]
   19108:	vldr	s14, [r3]
   1910c:	vldr	s15, [fp, #-12]
   19110:	vadd.f32	s14, s14, s15
   19114:	ldr	r3, [fp, #-8]
   19118:	vldr	s15, [r3, #8]
   1911c:	vcmpe.f32	s14, s15
   19120:	vmrs	APSR_nzcv, fpscr
   19124:	bpl	19130 <__assert_fail@plt+0x8358>
   19128:	mov	r3, #1
   1912c:	b	19140 <__assert_fail@plt+0x8368>
   19130:	ldr	r3, [fp, #-16]
   19134:	ldr	r2, [pc, #24]	; 19154 <__assert_fail@plt+0x837c>
   19138:	str	r2, [r3, #20]
   1913c:	mov	r3, #0
   19140:	mov	r0, r3
   19144:	add	sp, fp, #0
   19148:	pop	{fp}		; (ldr fp, [sp], #4)
   1914c:	bx	lr
   19150:	svccc	0x00800000
   19154:	andeq	fp, r1, ip, asr #23
   19158:	stclcc	12, cr12, [ip, #820]	; 0x334
   1915c:	push	{r4, r5, r6, r7, fp, lr}
   19160:	add	fp, sp, #20
   19164:	sub	sp, sp, #16
   19168:	str	r0, [fp, #-32]	; 0xffffffe0
   1916c:	str	r1, [fp, #-36]	; 0xffffffdc
   19170:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19174:	ldrb	r3, [r3, #16]
   19178:	eor	r3, r3, #1
   1917c:	uxtb	r3, r3
   19180:	cmp	r3, #0
   19184:	beq	191d0 <__assert_fail@plt+0x83f8>
   19188:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1918c:	vmov	s15, r3
   19190:	vcvt.f32.u32	s13, s15
   19194:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19198:	vldr	s14, [r3, #8]
   1919c:	vdiv.f32	s15, s13, s14
   191a0:	vstr	s15, [fp, #-24]	; 0xffffffe8
   191a4:	vldr	s15, [fp, #-24]	; 0xffffffe8
   191a8:	vldr	s14, [pc, #156]	; 1924c <__assert_fail@plt+0x8474>
   191ac:	vcmpe.f32	s15, s14
   191b0:	vmrs	APSR_nzcv, fpscr
   191b4:	blt	191c0 <__assert_fail@plt+0x83e8>
   191b8:	mov	r3, #0
   191bc:	b	19240 <__assert_fail@plt+0x8468>
   191c0:	vldr	s15, [fp, #-24]	; 0xffffffe8
   191c4:	vcvt.u32.f32	s15, s15
   191c8:	vmov	r3, s15
   191cc:	str	r3, [fp, #-32]	; 0xffffffe0
   191d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   191d4:	bl	18ee4 <__assert_fail@plt+0x810c>
   191d8:	str	r0, [fp, #-32]	; 0xffffffe0
   191dc:	mov	r1, #0
   191e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   191e4:	mov	r2, r3
   191e8:	mov	r3, #0
   191ec:	lsl	r5, r3, #2
   191f0:	orr	r5, r5, r2, lsr #30
   191f4:	lsl	r4, r2, #2
   191f8:	mov	r6, r5
   191fc:	mov	r7, #0
   19200:	cmp	r6, #0
   19204:	beq	1920c <__assert_fail@plt+0x8434>
   19208:	mov	r1, #1
   1920c:	cmp	r4, #0
   19210:	bge	19218 <__assert_fail@plt+0x8440>
   19214:	mov	r1, #1
   19218:	mov	r3, r4
   1921c:	str	r3, [fp, #-28]	; 0xffffffe4
   19220:	mov	r3, r1
   19224:	and	r3, r3, #1
   19228:	uxtb	r3, r3
   1922c:	cmp	r3, #0
   19230:	beq	1923c <__assert_fail@plt+0x8464>
   19234:	mov	r3, #0
   19238:	b	19240 <__assert_fail@plt+0x8468>
   1923c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19240:	mov	r0, r3
   19244:	sub	sp, fp, #20
   19248:	pop	{r4, r5, r6, r7, fp, pc}
   1924c:	svcmi	0x00800000
   19250:	push	{fp, lr}
   19254:	add	fp, sp, #4
   19258:	sub	sp, sp, #24
   1925c:	str	r0, [fp, #-16]
   19260:	str	r1, [fp, #-20]	; 0xffffffec
   19264:	str	r2, [fp, #-24]	; 0xffffffe8
   19268:	str	r3, [fp, #-28]	; 0xffffffe4
   1926c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19270:	cmp	r3, #0
   19274:	bne	19280 <__assert_fail@plt+0x84a8>
   19278:	ldr	r3, [pc, #364]	; 193ec <__assert_fail@plt+0x8614>
   1927c:	str	r3, [fp, #-24]	; 0xffffffe8
   19280:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19284:	cmp	r3, #0
   19288:	bne	19294 <__assert_fail@plt+0x84bc>
   1928c:	ldr	r3, [pc, #348]	; 193f0 <__assert_fail@plt+0x8618>
   19290:	str	r3, [fp, #-28]	; 0xffffffe4
   19294:	mov	r0, #40	; 0x28
   19298:	bl	1a77c <__assert_fail@plt+0x99a4>
   1929c:	mov	r3, r0
   192a0:	str	r3, [fp, #-8]
   192a4:	ldr	r3, [fp, #-8]
   192a8:	cmp	r3, #0
   192ac:	bne	192b8 <__assert_fail@plt+0x84e0>
   192b0:	mov	r3, #0
   192b4:	b	193e0 <__assert_fail@plt+0x8608>
   192b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   192bc:	cmp	r3, #0
   192c0:	bne	192cc <__assert_fail@plt+0x84f4>
   192c4:	ldr	r3, [pc, #296]	; 193f4 <__assert_fail@plt+0x861c>
   192c8:	str	r3, [fp, #-20]	; 0xffffffec
   192cc:	ldr	r3, [fp, #-8]
   192d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   192d4:	str	r2, [r3, #20]
   192d8:	ldr	r0, [fp, #-8]
   192dc:	bl	19020 <__assert_fail@plt+0x8248>
   192e0:	mov	r3, r0
   192e4:	eor	r3, r3, #1
   192e8:	uxtb	r3, r3
   192ec:	cmp	r3, #0
   192f0:	bne	193c0 <__assert_fail@plt+0x85e8>
   192f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   192f8:	ldr	r0, [fp, #-16]
   192fc:	bl	1915c <__assert_fail@plt+0x8384>
   19300:	mov	r2, r0
   19304:	ldr	r3, [fp, #-8]
   19308:	str	r2, [r3, #8]
   1930c:	ldr	r3, [fp, #-8]
   19310:	ldr	r3, [r3, #8]
   19314:	cmp	r3, #0
   19318:	beq	193c8 <__assert_fail@plt+0x85f0>
   1931c:	ldr	r3, [fp, #-8]
   19320:	ldr	r3, [r3, #8]
   19324:	mov	r1, #8
   19328:	mov	r0, r3
   1932c:	bl	1a6b8 <__assert_fail@plt+0x98e0>
   19330:	mov	r3, r0
   19334:	mov	r2, r3
   19338:	ldr	r3, [fp, #-8]
   1933c:	str	r2, [r3]
   19340:	ldr	r3, [fp, #-8]
   19344:	ldr	r3, [r3]
   19348:	cmp	r3, #0
   1934c:	beq	193d0 <__assert_fail@plt+0x85f8>
   19350:	ldr	r3, [fp, #-8]
   19354:	ldr	r2, [r3]
   19358:	ldr	r3, [fp, #-8]
   1935c:	ldr	r3, [r3, #8]
   19360:	lsl	r3, r3, #3
   19364:	add	r2, r2, r3
   19368:	ldr	r3, [fp, #-8]
   1936c:	str	r2, [r3, #4]
   19370:	ldr	r3, [fp, #-8]
   19374:	mov	r2, #0
   19378:	str	r2, [r3, #12]
   1937c:	ldr	r3, [fp, #-8]
   19380:	mov	r2, #0
   19384:	str	r2, [r3, #16]
   19388:	ldr	r3, [fp, #-8]
   1938c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19390:	str	r2, [r3, #24]
   19394:	ldr	r3, [fp, #-8]
   19398:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1939c:	str	r2, [r3, #28]
   193a0:	ldr	r3, [fp, #-8]
   193a4:	ldr	r2, [fp, #4]
   193a8:	str	r2, [r3, #32]
   193ac:	ldr	r3, [fp, #-8]
   193b0:	mov	r2, #0
   193b4:	str	r2, [r3, #36]	; 0x24
   193b8:	ldr	r3, [fp, #-8]
   193bc:	b	193e0 <__assert_fail@plt+0x8608>
   193c0:	nop			; (mov r0, r0)
   193c4:	b	193d4 <__assert_fail@plt+0x85fc>
   193c8:	nop			; (mov r0, r0)
   193cc:	b	193d4 <__assert_fail@plt+0x85fc>
   193d0:	nop			; (mov r0, r0)
   193d4:	ldr	r0, [fp, #-8]
   193d8:	bl	13f5c <__assert_fail@plt+0x3184>
   193dc:	mov	r3, #0
   193e0:	mov	r0, r3
   193e4:	sub	sp, fp, #4
   193e8:	pop	{fp, pc}
   193ec:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   193f0:	andeq	r8, r1, r4, ror #31
   193f4:	andeq	fp, r1, ip, asr #23
   193f8:	push	{fp, lr}
   193fc:	add	fp, sp, #4
   19400:	sub	sp, sp, #24
   19404:	str	r0, [fp, #-24]	; 0xffffffe8
   19408:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1940c:	ldr	r3, [r3]
   19410:	str	r3, [fp, #-8]
   19414:	b	194f4 <__assert_fail@plt+0x871c>
   19418:	ldr	r3, [fp, #-8]
   1941c:	ldr	r3, [r3]
   19420:	cmp	r3, #0
   19424:	beq	194e8 <__assert_fail@plt+0x8710>
   19428:	ldr	r3, [fp, #-8]
   1942c:	ldr	r3, [r3, #4]
   19430:	str	r3, [fp, #-12]
   19434:	b	1949c <__assert_fail@plt+0x86c4>
   19438:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1943c:	ldr	r3, [r3, #32]
   19440:	cmp	r3, #0
   19444:	beq	19460 <__assert_fail@plt+0x8688>
   19448:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1944c:	ldr	r3, [r3, #32]
   19450:	ldr	r2, [fp, #-12]
   19454:	ldr	r2, [r2]
   19458:	mov	r0, r2
   1945c:	blx	r3
   19460:	ldr	r3, [fp, #-12]
   19464:	mov	r2, #0
   19468:	str	r2, [r3]
   1946c:	ldr	r3, [fp, #-12]
   19470:	ldr	r3, [r3, #4]
   19474:	str	r3, [fp, #-16]
   19478:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1947c:	ldr	r2, [r3, #36]	; 0x24
   19480:	ldr	r3, [fp, #-12]
   19484:	str	r2, [r3, #4]
   19488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1948c:	ldr	r2, [fp, #-12]
   19490:	str	r2, [r3, #36]	; 0x24
   19494:	ldr	r3, [fp, #-16]
   19498:	str	r3, [fp, #-12]
   1949c:	ldr	r3, [fp, #-12]
   194a0:	cmp	r3, #0
   194a4:	bne	19438 <__assert_fail@plt+0x8660>
   194a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   194ac:	ldr	r3, [r3, #32]
   194b0:	cmp	r3, #0
   194b4:	beq	194d0 <__assert_fail@plt+0x86f8>
   194b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   194bc:	ldr	r3, [r3, #32]
   194c0:	ldr	r2, [fp, #-8]
   194c4:	ldr	r2, [r2]
   194c8:	mov	r0, r2
   194cc:	blx	r3
   194d0:	ldr	r3, [fp, #-8]
   194d4:	mov	r2, #0
   194d8:	str	r2, [r3]
   194dc:	ldr	r3, [fp, #-8]
   194e0:	mov	r2, #0
   194e4:	str	r2, [r3, #4]
   194e8:	ldr	r3, [fp, #-8]
   194ec:	add	r3, r3, #8
   194f0:	str	r3, [fp, #-8]
   194f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   194f8:	ldr	r2, [r3, #4]
   194fc:	ldr	r3, [fp, #-8]
   19500:	cmp	r2, r3
   19504:	bhi	19418 <__assert_fail@plt+0x8640>
   19508:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1950c:	mov	r2, #0
   19510:	str	r2, [r3, #12]
   19514:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19518:	mov	r2, #0
   1951c:	str	r2, [r3, #16]
   19520:	nop			; (mov r0, r0)
   19524:	sub	sp, fp, #4
   19528:	pop	{fp, pc}
   1952c:	push	{fp, lr}
   19530:	add	fp, sp, #4
   19534:	sub	sp, sp, #24
   19538:	str	r0, [fp, #-24]	; 0xffffffe8
   1953c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19540:	ldr	r3, [r3, #32]
   19544:	cmp	r3, #0
   19548:	beq	195d8 <__assert_fail@plt+0x8800>
   1954c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19550:	ldr	r3, [r3, #16]
   19554:	cmp	r3, #0
   19558:	beq	195d8 <__assert_fail@plt+0x8800>
   1955c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19560:	ldr	r3, [r3]
   19564:	str	r3, [fp, #-8]
   19568:	b	195c4 <__assert_fail@plt+0x87ec>
   1956c:	ldr	r3, [fp, #-8]
   19570:	ldr	r3, [r3]
   19574:	cmp	r3, #0
   19578:	beq	195b8 <__assert_fail@plt+0x87e0>
   1957c:	ldr	r3, [fp, #-8]
   19580:	str	r3, [fp, #-12]
   19584:	b	195ac <__assert_fail@plt+0x87d4>
   19588:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1958c:	ldr	r3, [r3, #32]
   19590:	ldr	r2, [fp, #-12]
   19594:	ldr	r2, [r2]
   19598:	mov	r0, r2
   1959c:	blx	r3
   195a0:	ldr	r3, [fp, #-12]
   195a4:	ldr	r3, [r3, #4]
   195a8:	str	r3, [fp, #-12]
   195ac:	ldr	r3, [fp, #-12]
   195b0:	cmp	r3, #0
   195b4:	bne	19588 <__assert_fail@plt+0x87b0>
   195b8:	ldr	r3, [fp, #-8]
   195bc:	add	r3, r3, #8
   195c0:	str	r3, [fp, #-8]
   195c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   195c8:	ldr	r2, [r3, #4]
   195cc:	ldr	r3, [fp, #-8]
   195d0:	cmp	r2, r3
   195d4:	bhi	1956c <__assert_fail@plt+0x8794>
   195d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   195dc:	ldr	r3, [r3]
   195e0:	str	r3, [fp, #-8]
   195e4:	b	1962c <__assert_fail@plt+0x8854>
   195e8:	ldr	r3, [fp, #-8]
   195ec:	ldr	r3, [r3, #4]
   195f0:	str	r3, [fp, #-12]
   195f4:	b	19614 <__assert_fail@plt+0x883c>
   195f8:	ldr	r3, [fp, #-12]
   195fc:	ldr	r3, [r3, #4]
   19600:	str	r3, [fp, #-16]
   19604:	ldr	r0, [fp, #-12]
   19608:	bl	13f5c <__assert_fail@plt+0x3184>
   1960c:	ldr	r3, [fp, #-16]
   19610:	str	r3, [fp, #-12]
   19614:	ldr	r3, [fp, #-12]
   19618:	cmp	r3, #0
   1961c:	bne	195f8 <__assert_fail@plt+0x8820>
   19620:	ldr	r3, [fp, #-8]
   19624:	add	r3, r3, #8
   19628:	str	r3, [fp, #-8]
   1962c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19630:	ldr	r2, [r3, #4]
   19634:	ldr	r3, [fp, #-8]
   19638:	cmp	r2, r3
   1963c:	bhi	195e8 <__assert_fail@plt+0x8810>
   19640:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19644:	ldr	r3, [r3, #36]	; 0x24
   19648:	str	r3, [fp, #-12]
   1964c:	b	1966c <__assert_fail@plt+0x8894>
   19650:	ldr	r3, [fp, #-12]
   19654:	ldr	r3, [r3, #4]
   19658:	str	r3, [fp, #-16]
   1965c:	ldr	r0, [fp, #-12]
   19660:	bl	13f5c <__assert_fail@plt+0x3184>
   19664:	ldr	r3, [fp, #-16]
   19668:	str	r3, [fp, #-12]
   1966c:	ldr	r3, [fp, #-12]
   19670:	cmp	r3, #0
   19674:	bne	19650 <__assert_fail@plt+0x8878>
   19678:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1967c:	ldr	r3, [r3]
   19680:	mov	r0, r3
   19684:	bl	13f5c <__assert_fail@plt+0x3184>
   19688:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1968c:	bl	13f5c <__assert_fail@plt+0x3184>
   19690:	nop			; (mov r0, r0)
   19694:	sub	sp, fp, #4
   19698:	pop	{fp, pc}
   1969c:	push	{fp, lr}
   196a0:	add	fp, sp, #4
   196a4:	sub	sp, sp, #16
   196a8:	str	r0, [fp, #-16]
   196ac:	ldr	r3, [fp, #-16]
   196b0:	ldr	r3, [r3, #36]	; 0x24
   196b4:	cmp	r3, #0
   196b8:	beq	196dc <__assert_fail@plt+0x8904>
   196bc:	ldr	r3, [fp, #-16]
   196c0:	ldr	r3, [r3, #36]	; 0x24
   196c4:	str	r3, [fp, #-8]
   196c8:	ldr	r3, [fp, #-8]
   196cc:	ldr	r2, [r3, #4]
   196d0:	ldr	r3, [fp, #-16]
   196d4:	str	r2, [r3, #36]	; 0x24
   196d8:	b	196ec <__assert_fail@plt+0x8914>
   196dc:	mov	r0, #8
   196e0:	bl	1a77c <__assert_fail@plt+0x99a4>
   196e4:	mov	r3, r0
   196e8:	str	r3, [fp, #-8]
   196ec:	ldr	r3, [fp, #-8]
   196f0:	mov	r0, r3
   196f4:	sub	sp, fp, #4
   196f8:	pop	{fp, pc}
   196fc:	push	{fp}		; (str fp, [sp, #-4]!)
   19700:	add	fp, sp, #0
   19704:	sub	sp, sp, #12
   19708:	str	r0, [fp, #-8]
   1970c:	str	r1, [fp, #-12]
   19710:	ldr	r3, [fp, #-12]
   19714:	mov	r2, #0
   19718:	str	r2, [r3]
   1971c:	ldr	r3, [fp, #-8]
   19720:	ldr	r2, [r3, #36]	; 0x24
   19724:	ldr	r3, [fp, #-12]
   19728:	str	r2, [r3, #4]
   1972c:	ldr	r3, [fp, #-8]
   19730:	ldr	r2, [fp, #-12]
   19734:	str	r2, [r3, #36]	; 0x24
   19738:	nop			; (mov r0, r0)
   1973c:	add	sp, fp, #0
   19740:	pop	{fp}		; (ldr fp, [sp], #4)
   19744:	bx	lr
   19748:	push	{fp, lr}
   1974c:	add	fp, sp, #4
   19750:	sub	sp, sp, #40	; 0x28
   19754:	str	r0, [fp, #-32]	; 0xffffffe0
   19758:	str	r1, [fp, #-36]	; 0xffffffdc
   1975c:	str	r2, [fp, #-40]	; 0xffffffd8
   19760:	strb	r3, [fp, #-41]	; 0xffffffd7
   19764:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19768:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1976c:	bl	18998 <__assert_fail@plt+0x7bc0>
   19770:	str	r0, [fp, #-12]
   19774:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19778:	ldr	r2, [fp, #-12]
   1977c:	str	r2, [r3]
   19780:	ldr	r3, [fp, #-12]
   19784:	ldr	r3, [r3]
   19788:	cmp	r3, #0
   1978c:	bne	19798 <__assert_fail@plt+0x89c0>
   19790:	mov	r3, #0
   19794:	b	198f8 <__assert_fail@plt+0x8b20>
   19798:	ldr	r3, [fp, #-12]
   1979c:	ldr	r2, [r3]
   197a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   197a4:	cmp	r2, r3
   197a8:	beq	197d4 <__assert_fail@plt+0x89fc>
   197ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   197b0:	ldr	r3, [r3, #28]
   197b4:	ldr	r2, [fp, #-12]
   197b8:	ldr	r2, [r2]
   197bc:	mov	r1, r2
   197c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   197c4:	blx	r3
   197c8:	mov	r3, r0
   197cc:	cmp	r3, #0
   197d0:	beq	1983c <__assert_fail@plt+0x8a64>
   197d4:	ldr	r3, [fp, #-12]
   197d8:	ldr	r3, [r3]
   197dc:	str	r3, [fp, #-24]	; 0xffffffe8
   197e0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   197e4:	cmp	r3, #0
   197e8:	beq	19834 <__assert_fail@plt+0x8a5c>
   197ec:	ldr	r3, [fp, #-12]
   197f0:	ldr	r3, [r3, #4]
   197f4:	cmp	r3, #0
   197f8:	beq	19828 <__assert_fail@plt+0x8a50>
   197fc:	ldr	r3, [fp, #-12]
   19800:	ldr	r3, [r3, #4]
   19804:	str	r3, [fp, #-28]	; 0xffffffe4
   19808:	ldr	r3, [fp, #-12]
   1980c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19810:	ldm	r2, {r0, r1}
   19814:	stm	r3, {r0, r1}
   19818:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1981c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19820:	bl	196fc <__assert_fail@plt+0x8924>
   19824:	b	19834 <__assert_fail@plt+0x8a5c>
   19828:	ldr	r3, [fp, #-12]
   1982c:	mov	r2, #0
   19830:	str	r2, [r3]
   19834:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19838:	b	198f8 <__assert_fail@plt+0x8b20>
   1983c:	ldr	r3, [fp, #-12]
   19840:	str	r3, [fp, #-8]
   19844:	b	198e4 <__assert_fail@plt+0x8b0c>
   19848:	ldr	r3, [fp, #-8]
   1984c:	ldr	r3, [r3, #4]
   19850:	ldr	r2, [r3]
   19854:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19858:	cmp	r2, r3
   1985c:	beq	1988c <__assert_fail@plt+0x8ab4>
   19860:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19864:	ldr	r3, [r3, #28]
   19868:	ldr	r2, [fp, #-8]
   1986c:	ldr	r2, [r2, #4]
   19870:	ldr	r2, [r2]
   19874:	mov	r1, r2
   19878:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1987c:	blx	r3
   19880:	mov	r3, r0
   19884:	cmp	r3, #0
   19888:	beq	198d8 <__assert_fail@plt+0x8b00>
   1988c:	ldr	r3, [fp, #-8]
   19890:	ldr	r3, [r3, #4]
   19894:	ldr	r3, [r3]
   19898:	str	r3, [fp, #-16]
   1989c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   198a0:	cmp	r3, #0
   198a4:	beq	198d0 <__assert_fail@plt+0x8af8>
   198a8:	ldr	r3, [fp, #-8]
   198ac:	ldr	r3, [r3, #4]
   198b0:	str	r3, [fp, #-20]	; 0xffffffec
   198b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   198b8:	ldr	r2, [r3, #4]
   198bc:	ldr	r3, [fp, #-8]
   198c0:	str	r2, [r3, #4]
   198c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   198c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   198cc:	bl	196fc <__assert_fail@plt+0x8924>
   198d0:	ldr	r3, [fp, #-16]
   198d4:	b	198f8 <__assert_fail@plt+0x8b20>
   198d8:	ldr	r3, [fp, #-8]
   198dc:	ldr	r3, [r3, #4]
   198e0:	str	r3, [fp, #-8]
   198e4:	ldr	r3, [fp, #-8]
   198e8:	ldr	r3, [r3, #4]
   198ec:	cmp	r3, #0
   198f0:	bne	19848 <__assert_fail@plt+0x8a70>
   198f4:	mov	r3, #0
   198f8:	mov	r0, r3
   198fc:	sub	sp, fp, #4
   19900:	pop	{fp, pc}
   19904:	push	{fp, lr}
   19908:	add	fp, sp, #4
   1990c:	sub	sp, sp, #40	; 0x28
   19910:	str	r0, [fp, #-32]	; 0xffffffe0
   19914:	str	r1, [fp, #-36]	; 0xffffffdc
   19918:	mov	r3, r2
   1991c:	strb	r3, [fp, #-37]	; 0xffffffdb
   19920:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19924:	ldr	r3, [r3]
   19928:	str	r3, [fp, #-8]
   1992c:	b	19acc <__assert_fail@plt+0x8cf4>
   19930:	ldr	r3, [fp, #-8]
   19934:	ldr	r3, [r3]
   19938:	cmp	r3, #0
   1993c:	beq	19ac0 <__assert_fail@plt+0x8ce8>
   19940:	ldr	r3, [fp, #-8]
   19944:	ldr	r3, [r3, #4]
   19948:	str	r3, [fp, #-12]
   1994c:	b	199dc <__assert_fail@plt+0x8c04>
   19950:	ldr	r3, [fp, #-12]
   19954:	ldr	r3, [r3]
   19958:	str	r3, [fp, #-16]
   1995c:	ldr	r1, [fp, #-16]
   19960:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19964:	bl	18998 <__assert_fail@plt+0x7bc0>
   19968:	str	r0, [fp, #-20]	; 0xffffffec
   1996c:	ldr	r3, [fp, #-12]
   19970:	ldr	r3, [r3, #4]
   19974:	str	r3, [fp, #-24]	; 0xffffffe8
   19978:	ldr	r3, [fp, #-20]	; 0xffffffec
   1997c:	ldr	r3, [r3]
   19980:	cmp	r3, #0
   19984:	beq	199a8 <__assert_fail@plt+0x8bd0>
   19988:	ldr	r3, [fp, #-20]	; 0xffffffec
   1998c:	ldr	r2, [r3, #4]
   19990:	ldr	r3, [fp, #-12]
   19994:	str	r2, [r3, #4]
   19998:	ldr	r3, [fp, #-20]	; 0xffffffec
   1999c:	ldr	r2, [fp, #-12]
   199a0:	str	r2, [r3, #4]
   199a4:	b	199d4 <__assert_fail@plt+0x8bfc>
   199a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   199ac:	ldr	r2, [fp, #-16]
   199b0:	str	r2, [r3]
   199b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   199b8:	ldr	r3, [r3, #12]
   199bc:	add	r2, r3, #1
   199c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   199c4:	str	r2, [r3, #12]
   199c8:	ldr	r1, [fp, #-12]
   199cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   199d0:	bl	196fc <__assert_fail@plt+0x8924>
   199d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   199d8:	str	r3, [fp, #-12]
   199dc:	ldr	r3, [fp, #-12]
   199e0:	cmp	r3, #0
   199e4:	bne	19950 <__assert_fail@plt+0x8b78>
   199e8:	ldr	r3, [fp, #-8]
   199ec:	ldr	r3, [r3]
   199f0:	str	r3, [fp, #-16]
   199f4:	ldr	r3, [fp, #-8]
   199f8:	mov	r2, #0
   199fc:	str	r2, [r3, #4]
   19a00:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   19a04:	cmp	r3, #0
   19a08:	bne	19abc <__assert_fail@plt+0x8ce4>
   19a0c:	ldr	r1, [fp, #-16]
   19a10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19a14:	bl	18998 <__assert_fail@plt+0x7bc0>
   19a18:	str	r0, [fp, #-20]	; 0xffffffec
   19a1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a20:	ldr	r3, [r3]
   19a24:	cmp	r3, #0
   19a28:	beq	19a78 <__assert_fail@plt+0x8ca0>
   19a2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19a30:	bl	1969c <__assert_fail@plt+0x88c4>
   19a34:	str	r0, [fp, #-28]	; 0xffffffe4
   19a38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19a3c:	cmp	r3, #0
   19a40:	bne	19a4c <__assert_fail@plt+0x8c74>
   19a44:	mov	r3, #0
   19a48:	b	19ae4 <__assert_fail@plt+0x8d0c>
   19a4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19a50:	ldr	r2, [fp, #-16]
   19a54:	str	r2, [r3]
   19a58:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a5c:	ldr	r2, [r3, #4]
   19a60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19a64:	str	r2, [r3, #4]
   19a68:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a6c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19a70:	str	r2, [r3, #4]
   19a74:	b	19a98 <__assert_fail@plt+0x8cc0>
   19a78:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a7c:	ldr	r2, [fp, #-16]
   19a80:	str	r2, [r3]
   19a84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19a88:	ldr	r3, [r3, #12]
   19a8c:	add	r2, r3, #1
   19a90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19a94:	str	r2, [r3, #12]
   19a98:	ldr	r3, [fp, #-8]
   19a9c:	mov	r2, #0
   19aa0:	str	r2, [r3]
   19aa4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19aa8:	ldr	r3, [r3, #12]
   19aac:	sub	r2, r3, #1
   19ab0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19ab4:	str	r2, [r3, #12]
   19ab8:	b	19ac0 <__assert_fail@plt+0x8ce8>
   19abc:	nop			; (mov r0, r0)
   19ac0:	ldr	r3, [fp, #-8]
   19ac4:	add	r3, r3, #8
   19ac8:	str	r3, [fp, #-8]
   19acc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19ad0:	ldr	r2, [r3, #4]
   19ad4:	ldr	r3, [fp, #-8]
   19ad8:	cmp	r2, r3
   19adc:	bhi	19930 <__assert_fail@plt+0x8b58>
   19ae0:	mov	r3, #1
   19ae4:	mov	r0, r3
   19ae8:	sub	sp, fp, #4
   19aec:	pop	{fp, pc}
   19af0:	push	{fp, lr}
   19af4:	add	fp, sp, #4
   19af8:	sub	sp, sp, #56	; 0x38
   19afc:	str	r0, [fp, #-56]	; 0xffffffc8
   19b00:	str	r1, [fp, #-60]	; 0xffffffc4
   19b04:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19b08:	ldr	r3, [r3, #20]
   19b0c:	mov	r1, r3
   19b10:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19b14:	bl	1915c <__assert_fail@plt+0x8384>
   19b18:	str	r0, [fp, #-8]
   19b1c:	ldr	r3, [fp, #-8]
   19b20:	cmp	r3, #0
   19b24:	bne	19b30 <__assert_fail@plt+0x8d58>
   19b28:	mov	r3, #0
   19b2c:	b	19d0c <__assert_fail@plt+0x8f34>
   19b30:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19b34:	ldr	r2, [r3, #8]
   19b38:	ldr	r3, [fp, #-8]
   19b3c:	cmp	r2, r3
   19b40:	bne	19b4c <__assert_fail@plt+0x8d74>
   19b44:	mov	r3, #1
   19b48:	b	19d0c <__assert_fail@plt+0x8f34>
   19b4c:	sub	r3, fp, #52	; 0x34
   19b50:	str	r3, [fp, #-12]
   19b54:	mov	r1, #8
   19b58:	ldr	r0, [fp, #-8]
   19b5c:	bl	1a6b8 <__assert_fail@plt+0x98e0>
   19b60:	mov	r3, r0
   19b64:	mov	r2, r3
   19b68:	ldr	r3, [fp, #-12]
   19b6c:	str	r2, [r3]
   19b70:	ldr	r3, [fp, #-12]
   19b74:	ldr	r3, [r3]
   19b78:	cmp	r3, #0
   19b7c:	bne	19b88 <__assert_fail@plt+0x8db0>
   19b80:	mov	r3, #0
   19b84:	b	19d0c <__assert_fail@plt+0x8f34>
   19b88:	ldr	r3, [fp, #-12]
   19b8c:	ldr	r2, [fp, #-8]
   19b90:	str	r2, [r3, #8]
   19b94:	ldr	r3, [fp, #-12]
   19b98:	ldr	r2, [r3]
   19b9c:	ldr	r3, [fp, #-8]
   19ba0:	lsl	r3, r3, #3
   19ba4:	add	r2, r2, r3
   19ba8:	ldr	r3, [fp, #-12]
   19bac:	str	r2, [r3, #4]
   19bb0:	ldr	r3, [fp, #-12]
   19bb4:	mov	r2, #0
   19bb8:	str	r2, [r3, #12]
   19bbc:	ldr	r3, [fp, #-12]
   19bc0:	mov	r2, #0
   19bc4:	str	r2, [r3, #16]
   19bc8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19bcc:	ldr	r2, [r3, #20]
   19bd0:	ldr	r3, [fp, #-12]
   19bd4:	str	r2, [r3, #20]
   19bd8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19bdc:	ldr	r2, [r3, #24]
   19be0:	ldr	r3, [fp, #-12]
   19be4:	str	r2, [r3, #24]
   19be8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19bec:	ldr	r2, [r3, #28]
   19bf0:	ldr	r3, [fp, #-12]
   19bf4:	str	r2, [r3, #28]
   19bf8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19bfc:	ldr	r2, [r3, #32]
   19c00:	ldr	r3, [fp, #-12]
   19c04:	str	r2, [r3, #32]
   19c08:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19c0c:	ldr	r2, [r3, #36]	; 0x24
   19c10:	ldr	r3, [fp, #-12]
   19c14:	str	r2, [r3, #36]	; 0x24
   19c18:	mov	r2, #0
   19c1c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   19c20:	ldr	r0, [fp, #-12]
   19c24:	bl	19904 <__assert_fail@plt+0x8b2c>
   19c28:	mov	r3, r0
   19c2c:	cmp	r3, #0
   19c30:	beq	19c9c <__assert_fail@plt+0x8ec4>
   19c34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19c38:	ldr	r3, [r3]
   19c3c:	mov	r0, r3
   19c40:	bl	13f5c <__assert_fail@plt+0x3184>
   19c44:	ldr	r3, [fp, #-12]
   19c48:	ldr	r2, [r3]
   19c4c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19c50:	str	r2, [r3]
   19c54:	ldr	r3, [fp, #-12]
   19c58:	ldr	r2, [r3, #4]
   19c5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19c60:	str	r2, [r3, #4]
   19c64:	ldr	r3, [fp, #-12]
   19c68:	ldr	r2, [r3, #8]
   19c6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19c70:	str	r2, [r3, #8]
   19c74:	ldr	r3, [fp, #-12]
   19c78:	ldr	r2, [r3, #12]
   19c7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19c80:	str	r2, [r3, #12]
   19c84:	ldr	r3, [fp, #-12]
   19c88:	ldr	r2, [r3, #36]	; 0x24
   19c8c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19c90:	str	r2, [r3, #36]	; 0x24
   19c94:	mov	r3, #1
   19c98:	b	19d0c <__assert_fail@plt+0x8f34>
   19c9c:	ldr	r3, [fp, #-12]
   19ca0:	ldr	r2, [r3, #36]	; 0x24
   19ca4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19ca8:	str	r2, [r3, #36]	; 0x24
   19cac:	mov	r2, #1
   19cb0:	ldr	r1, [fp, #-12]
   19cb4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19cb8:	bl	19904 <__assert_fail@plt+0x8b2c>
   19cbc:	mov	r3, r0
   19cc0:	eor	r3, r3, #1
   19cc4:	uxtb	r3, r3
   19cc8:	cmp	r3, #0
   19ccc:	bne	19cf4 <__assert_fail@plt+0x8f1c>
   19cd0:	mov	r2, #0
   19cd4:	ldr	r1, [fp, #-12]
   19cd8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19cdc:	bl	19904 <__assert_fail@plt+0x8b2c>
   19ce0:	mov	r3, r0
   19ce4:	eor	r3, r3, #1
   19ce8:	uxtb	r3, r3
   19cec:	cmp	r3, #0
   19cf0:	beq	19cf8 <__assert_fail@plt+0x8f20>
   19cf4:	bl	10d9c <abort@plt>
   19cf8:	ldr	r3, [fp, #-12]
   19cfc:	ldr	r3, [r3]
   19d00:	mov	r0, r3
   19d04:	bl	13f5c <__assert_fail@plt+0x3184>
   19d08:	mov	r3, #0
   19d0c:	mov	r0, r3
   19d10:	sub	sp, fp, #4
   19d14:	pop	{fp, pc}
   19d18:	push	{fp, lr}
   19d1c:	add	fp, sp, #4
   19d20:	sub	sp, sp, #40	; 0x28
   19d24:	str	r0, [fp, #-32]	; 0xffffffe0
   19d28:	str	r1, [fp, #-36]	; 0xffffffdc
   19d2c:	str	r2, [fp, #-40]	; 0xffffffd8
   19d30:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19d34:	cmp	r3, #0
   19d38:	bne	19d40 <__assert_fail@plt+0x8f68>
   19d3c:	bl	10d9c <abort@plt>
   19d40:	sub	r2, fp, #24
   19d44:	mov	r3, #0
   19d48:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19d4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19d50:	bl	19748 <__assert_fail@plt+0x8970>
   19d54:	str	r0, [fp, #-8]
   19d58:	ldr	r3, [fp, #-8]
   19d5c:	cmp	r3, #0
   19d60:	beq	19d84 <__assert_fail@plt+0x8fac>
   19d64:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19d68:	cmp	r3, #0
   19d6c:	beq	19d7c <__assert_fail@plt+0x8fa4>
   19d70:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19d74:	ldr	r2, [fp, #-8]
   19d78:	str	r2, [r3]
   19d7c:	mov	r3, #0
   19d80:	b	19f88 <__assert_fail@plt+0x91b0>
   19d84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d88:	ldr	r3, [r3, #12]
   19d8c:	vmov	s15, r3
   19d90:	vcvt.f32.u32	s14, s15
   19d94:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d98:	ldr	r3, [r3, #20]
   19d9c:	vldr	s13, [r3, #8]
   19da0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19da4:	ldr	r3, [r3, #8]
   19da8:	vmov	s15, r3
   19dac:	vcvt.f32.u32	s15, s15
   19db0:	vmul.f32	s15, s13, s15
   19db4:	vcmpe.f32	s14, s15
   19db8:	vmrs	APSR_nzcv, fpscr
   19dbc:	ble	19edc <__assert_fail@plt+0x9104>
   19dc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19dc4:	bl	19020 <__assert_fail@plt+0x8248>
   19dc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19dcc:	ldr	r3, [r3, #12]
   19dd0:	vmov	s15, r3
   19dd4:	vcvt.f32.u32	s14, s15
   19dd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19ddc:	ldr	r3, [r3, #20]
   19de0:	vldr	s13, [r3, #8]
   19de4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19de8:	ldr	r3, [r3, #8]
   19dec:	vmov	s15, r3
   19df0:	vcvt.f32.u32	s15, s15
   19df4:	vmul.f32	s15, s13, s15
   19df8:	vcmpe.f32	s14, s15
   19dfc:	vmrs	APSR_nzcv, fpscr
   19e00:	ble	19edc <__assert_fail@plt+0x9104>
   19e04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19e08:	ldr	r3, [r3, #20]
   19e0c:	str	r3, [fp, #-12]
   19e10:	ldr	r3, [fp, #-12]
   19e14:	ldrb	r3, [r3, #16]
   19e18:	cmp	r3, #0
   19e1c:	beq	19e40 <__assert_fail@plt+0x9068>
   19e20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19e24:	ldr	r3, [r3, #8]
   19e28:	vmov	s15, r3
   19e2c:	vcvt.f32.u32	s14, s15
   19e30:	ldr	r3, [fp, #-12]
   19e34:	vldr	s15, [r3, #12]
   19e38:	vmul.f32	s15, s14, s15
   19e3c:	b	19e68 <__assert_fail@plt+0x9090>
   19e40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19e44:	ldr	r3, [r3, #8]
   19e48:	vmov	s15, r3
   19e4c:	vcvt.f32.u32	s14, s15
   19e50:	ldr	r3, [fp, #-12]
   19e54:	vldr	s15, [r3, #12]
   19e58:	vmul.f32	s14, s14, s15
   19e5c:	ldr	r3, [fp, #-12]
   19e60:	vldr	s15, [r3, #8]
   19e64:	vmul.f32	s15, s14, s15
   19e68:	vstr	s15, [fp, #-16]
   19e6c:	vldr	s15, [fp, #-16]
   19e70:	vldr	s14, [pc, #284]	; 19f94 <__assert_fail@plt+0x91bc>
   19e74:	vcmpe.f32	s15, s14
   19e78:	vmrs	APSR_nzcv, fpscr
   19e7c:	blt	19e88 <__assert_fail@plt+0x90b0>
   19e80:	mvn	r3, #0
   19e84:	b	19f88 <__assert_fail@plt+0x91b0>
   19e88:	vldr	s15, [fp, #-16]
   19e8c:	vcvt.u32.f32	s15, s15
   19e90:	vmov	r1, s15
   19e94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19e98:	bl	19af0 <__assert_fail@plt+0x8d18>
   19e9c:	mov	r3, r0
   19ea0:	eor	r3, r3, #1
   19ea4:	uxtb	r3, r3
   19ea8:	cmp	r3, #0
   19eac:	beq	19eb8 <__assert_fail@plt+0x90e0>
   19eb0:	mvn	r3, #0
   19eb4:	b	19f88 <__assert_fail@plt+0x91b0>
   19eb8:	sub	r2, fp, #24
   19ebc:	mov	r3, #0
   19ec0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19ec4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19ec8:	bl	19748 <__assert_fail@plt+0x8970>
   19ecc:	mov	r3, r0
   19ed0:	cmp	r3, #0
   19ed4:	beq	19edc <__assert_fail@plt+0x9104>
   19ed8:	bl	10d9c <abort@plt>
   19edc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19ee0:	ldr	r3, [r3]
   19ee4:	cmp	r3, #0
   19ee8:	beq	19f50 <__assert_fail@plt+0x9178>
   19eec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19ef0:	bl	1969c <__assert_fail@plt+0x88c4>
   19ef4:	str	r0, [fp, #-20]	; 0xffffffec
   19ef8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19efc:	cmp	r3, #0
   19f00:	bne	19f0c <__assert_fail@plt+0x9134>
   19f04:	mvn	r3, #0
   19f08:	b	19f88 <__assert_fail@plt+0x91b0>
   19f0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f10:	ldr	r2, [fp, #-36]	; 0xffffffdc
   19f14:	str	r2, [r3]
   19f18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f1c:	ldr	r2, [r3, #4]
   19f20:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f24:	str	r2, [r3, #4]
   19f28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19f30:	str	r2, [r3, #4]
   19f34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f38:	ldr	r3, [r3, #16]
   19f3c:	add	r2, r3, #1
   19f40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f44:	str	r2, [r3, #16]
   19f48:	mov	r3, #1
   19f4c:	b	19f88 <__assert_fail@plt+0x91b0>
   19f50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f54:	ldr	r2, [fp, #-36]	; 0xffffffdc
   19f58:	str	r2, [r3]
   19f5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f60:	ldr	r3, [r3, #16]
   19f64:	add	r2, r3, #1
   19f68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f6c:	str	r2, [r3, #16]
   19f70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f74:	ldr	r3, [r3, #12]
   19f78:	add	r2, r3, #1
   19f7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f80:	str	r2, [r3, #12]
   19f84:	mov	r3, #1
   19f88:	mov	r0, r3
   19f8c:	sub	sp, fp, #4
   19f90:	pop	{fp, pc}
   19f94:	svcmi	0x00800000
   19f98:	push	{fp, lr}
   19f9c:	add	fp, sp, #4
   19fa0:	sub	sp, sp, #16
   19fa4:	str	r0, [fp, #-16]
   19fa8:	str	r1, [fp, #-20]	; 0xffffffec
   19fac:	sub	r3, fp, #12
   19fb0:	mov	r2, r3
   19fb4:	ldr	r1, [fp, #-20]	; 0xffffffec
   19fb8:	ldr	r0, [fp, #-16]
   19fbc:	bl	19d18 <__assert_fail@plt+0x8f40>
   19fc0:	str	r0, [fp, #-8]
   19fc4:	ldr	r3, [fp, #-8]
   19fc8:	cmn	r3, #1
   19fcc:	beq	19fec <__assert_fail@plt+0x9214>
   19fd0:	ldr	r3, [fp, #-8]
   19fd4:	cmp	r3, #0
   19fd8:	bne	19fe4 <__assert_fail@plt+0x920c>
   19fdc:	ldr	r3, [fp, #-12]
   19fe0:	b	19ff0 <__assert_fail@plt+0x9218>
   19fe4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19fe8:	b	19ff0 <__assert_fail@plt+0x9218>
   19fec:	mov	r3, #0
   19ff0:	mov	r0, r3
   19ff4:	sub	sp, fp, #4
   19ff8:	pop	{fp, pc}
   19ffc:	push	{fp, lr}
   1a000:	add	fp, sp, #4
   1a004:	sub	sp, sp, #32
   1a008:	str	r0, [fp, #-32]	; 0xffffffe0
   1a00c:	str	r1, [fp, #-36]	; 0xffffffdc
   1a010:	sub	r2, fp, #28
   1a014:	mov	r3, #1
   1a018:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a01c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a020:	bl	19748 <__assert_fail@plt+0x8970>
   1a024:	str	r0, [fp, #-12]
   1a028:	ldr	r3, [fp, #-12]
   1a02c:	cmp	r3, #0
   1a030:	bne	1a03c <__assert_fail@plt+0x9264>
   1a034:	mov	r3, #0
   1a038:	b	1a1cc <__assert_fail@plt+0x93f4>
   1a03c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a040:	ldr	r3, [r3, #16]
   1a044:	sub	r2, r3, #1
   1a048:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a04c:	str	r2, [r3, #16]
   1a050:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a054:	ldr	r3, [r3]
   1a058:	cmp	r3, #0
   1a05c:	bne	1a1c8 <__assert_fail@plt+0x93f0>
   1a060:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a064:	ldr	r3, [r3, #12]
   1a068:	sub	r2, r3, #1
   1a06c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a070:	str	r2, [r3, #12]
   1a074:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a078:	ldr	r3, [r3, #12]
   1a07c:	vmov	s15, r3
   1a080:	vcvt.f32.u32	s14, s15
   1a084:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a088:	ldr	r3, [r3, #20]
   1a08c:	vldr	s13, [r3]
   1a090:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a094:	ldr	r3, [r3, #8]
   1a098:	vmov	s15, r3
   1a09c:	vcvt.f32.u32	s15, s15
   1a0a0:	vmul.f32	s15, s13, s15
   1a0a4:	vcmpe.f32	s14, s15
   1a0a8:	vmrs	APSR_nzcv, fpscr
   1a0ac:	bpl	1a1c8 <__assert_fail@plt+0x93f0>
   1a0b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a0b4:	bl	19020 <__assert_fail@plt+0x8248>
   1a0b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a0bc:	ldr	r3, [r3, #12]
   1a0c0:	vmov	s15, r3
   1a0c4:	vcvt.f32.u32	s14, s15
   1a0c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a0cc:	ldr	r3, [r3, #20]
   1a0d0:	vldr	s13, [r3]
   1a0d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a0d8:	ldr	r3, [r3, #8]
   1a0dc:	vmov	s15, r3
   1a0e0:	vcvt.f32.u32	s15, s15
   1a0e4:	vmul.f32	s15, s13, s15
   1a0e8:	vcmpe.f32	s14, s15
   1a0ec:	vmrs	APSR_nzcv, fpscr
   1a0f0:	bpl	1a1c8 <__assert_fail@plt+0x93f0>
   1a0f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a0f8:	ldr	r3, [r3, #20]
   1a0fc:	str	r3, [fp, #-16]
   1a100:	ldr	r3, [fp, #-16]
   1a104:	ldrb	r3, [r3, #16]
   1a108:	cmp	r3, #0
   1a10c:	beq	1a134 <__assert_fail@plt+0x935c>
   1a110:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a114:	ldr	r3, [r3, #8]
   1a118:	vmov	s15, r3
   1a11c:	vcvt.f32.u32	s14, s15
   1a120:	ldr	r3, [fp, #-16]
   1a124:	vldr	s15, [r3, #4]
   1a128:	vmul.f32	s15, s14, s15
   1a12c:	vcvt.u32.f32	s15, s15
   1a130:	b	1a160 <__assert_fail@plt+0x9388>
   1a134:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a138:	ldr	r3, [r3, #8]
   1a13c:	vmov	s15, r3
   1a140:	vcvt.f32.u32	s14, s15
   1a144:	ldr	r3, [fp, #-16]
   1a148:	vldr	s15, [r3, #4]
   1a14c:	vmul.f32	s14, s14, s15
   1a150:	ldr	r3, [fp, #-16]
   1a154:	vldr	s15, [r3, #8]
   1a158:	vmul.f32	s15, s14, s15
   1a15c:	vcvt.u32.f32	s15, s15
   1a160:	vstr	s15, [fp, #-20]	; 0xffffffec
   1a164:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a168:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a16c:	bl	19af0 <__assert_fail@plt+0x8d18>
   1a170:	mov	r3, r0
   1a174:	eor	r3, r3, #1
   1a178:	uxtb	r3, r3
   1a17c:	cmp	r3, #0
   1a180:	beq	1a1c8 <__assert_fail@plt+0x93f0>
   1a184:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a188:	ldr	r3, [r3, #36]	; 0x24
   1a18c:	str	r3, [fp, #-8]
   1a190:	b	1a1b0 <__assert_fail@plt+0x93d8>
   1a194:	ldr	r3, [fp, #-8]
   1a198:	ldr	r3, [r3, #4]
   1a19c:	str	r3, [fp, #-24]	; 0xffffffe8
   1a1a0:	ldr	r0, [fp, #-8]
   1a1a4:	bl	13f5c <__assert_fail@plt+0x3184>
   1a1a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a1ac:	str	r3, [fp, #-8]
   1a1b0:	ldr	r3, [fp, #-8]
   1a1b4:	cmp	r3, #0
   1a1b8:	bne	1a194 <__assert_fail@plt+0x93bc>
   1a1bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a1c0:	mov	r2, #0
   1a1c4:	str	r2, [r3, #36]	; 0x24
   1a1c8:	ldr	r3, [fp, #-12]
   1a1cc:	mov	r0, r3
   1a1d0:	sub	sp, fp, #4
   1a1d4:	pop	{fp, pc}
   1a1d8:	push	{fp, lr}
   1a1dc:	add	fp, sp, #4
   1a1e0:	sub	sp, sp, #8
   1a1e4:	str	r0, [fp, #-8]
   1a1e8:	str	r1, [fp, #-12]
   1a1ec:	ldr	r1, [fp, #-12]
   1a1f0:	ldr	r0, [fp, #-8]
   1a1f4:	bl	19ffc <__assert_fail@plt+0x9224>
   1a1f8:	mov	r3, r0
   1a1fc:	mov	r0, r3
   1a200:	sub	sp, fp, #4
   1a204:	pop	{fp, pc}
   1a208:	push	{fp}		; (str fp, [sp, #-4]!)
   1a20c:	add	fp, sp, #0
   1a210:	sub	sp, sp, #20
   1a214:	str	r0, [fp, #-16]
   1a218:	str	r1, [fp, #-20]	; 0xffffffec
   1a21c:	ldr	r3, [fp, #-16]
   1a220:	mov	r2, #1
   1a224:	strb	r2, [r3, #28]
   1a228:	ldr	r3, [fp, #-16]
   1a22c:	mov	r2, #0
   1a230:	str	r2, [r3, #20]
   1a234:	ldr	r3, [fp, #-16]
   1a238:	mov	r2, #0
   1a23c:	str	r2, [r3, #24]
   1a240:	mov	r3, #0
   1a244:	str	r3, [fp, #-8]
   1a248:	b	1a268 <__assert_fail@plt+0x9490>
   1a24c:	ldr	r3, [fp, #-16]
   1a250:	ldr	r2, [fp, #-8]
   1a254:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a258:	str	r1, [r3, r2, lsl #2]
   1a25c:	ldr	r3, [fp, #-8]
   1a260:	add	r3, r3, #1
   1a264:	str	r3, [fp, #-8]
   1a268:	ldr	r3, [fp, #-8]
   1a26c:	cmp	r3, #3
   1a270:	ble	1a24c <__assert_fail@plt+0x9474>
   1a274:	ldr	r3, [fp, #-16]
   1a278:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a27c:	str	r2, [r3, #16]
   1a280:	nop			; (mov r0, r0)
   1a284:	add	sp, fp, #0
   1a288:	pop	{fp}		; (ldr fp, [sp], #4)
   1a28c:	bx	lr
   1a290:	push	{fp}		; (str fp, [sp, #-4]!)
   1a294:	add	fp, sp, #0
   1a298:	sub	sp, sp, #12
   1a29c:	str	r0, [fp, #-8]
   1a2a0:	ldr	r3, [fp, #-8]
   1a2a4:	ldrb	r3, [r3, #28]
   1a2a8:	mov	r0, r3
   1a2ac:	add	sp, fp, #0
   1a2b0:	pop	{fp}		; (ldr fp, [sp], #4)
   1a2b4:	bx	lr
   1a2b8:	push	{fp}		; (str fp, [sp, #-4]!)
   1a2bc:	add	fp, sp, #0
   1a2c0:	sub	sp, sp, #20
   1a2c4:	str	r0, [fp, #-16]
   1a2c8:	str	r1, [fp, #-20]	; 0xffffffec
   1a2cc:	ldr	r3, [fp, #-16]
   1a2d0:	ldr	r3, [r3, #20]
   1a2d4:	ldr	r2, [fp, #-16]
   1a2d8:	ldrb	r2, [r2, #28]
   1a2dc:	eor	r2, r2, #1
   1a2e0:	uxtb	r2, r2
   1a2e4:	add	r3, r3, r2
   1a2e8:	and	r3, r3, #3
   1a2ec:	str	r3, [fp, #-8]
   1a2f0:	ldr	r3, [fp, #-16]
   1a2f4:	ldr	r2, [fp, #-8]
   1a2f8:	ldr	r3, [r3, r2, lsl #2]
   1a2fc:	str	r3, [fp, #-12]
   1a300:	ldr	r3, [fp, #-16]
   1a304:	ldr	r2, [fp, #-8]
   1a308:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a30c:	str	r1, [r3, r2, lsl #2]
   1a310:	ldr	r3, [fp, #-16]
   1a314:	ldr	r2, [fp, #-8]
   1a318:	str	r2, [r3, #20]
   1a31c:	ldr	r3, [fp, #-16]
   1a320:	ldr	r2, [r3, #24]
   1a324:	ldr	r3, [fp, #-8]
   1a328:	cmp	r2, r3
   1a32c:	bne	1a358 <__assert_fail@plt+0x9580>
   1a330:	ldr	r3, [fp, #-16]
   1a334:	ldr	r3, [r3, #24]
   1a338:	ldr	r2, [fp, #-16]
   1a33c:	ldrb	r2, [r2, #28]
   1a340:	eor	r2, r2, #1
   1a344:	uxtb	r2, r2
   1a348:	add	r3, r3, r2
   1a34c:	and	r2, r3, #3
   1a350:	ldr	r3, [fp, #-16]
   1a354:	str	r2, [r3, #24]
   1a358:	ldr	r3, [fp, #-16]
   1a35c:	mov	r2, #0
   1a360:	strb	r2, [r3, #28]
   1a364:	ldr	r3, [fp, #-12]
   1a368:	mov	r0, r3
   1a36c:	add	sp, fp, #0
   1a370:	pop	{fp}		; (ldr fp, [sp], #4)
   1a374:	bx	lr
   1a378:	push	{fp, lr}
   1a37c:	add	fp, sp, #4
   1a380:	sub	sp, sp, #16
   1a384:	str	r0, [fp, #-16]
   1a388:	ldr	r0, [fp, #-16]
   1a38c:	bl	1a290 <__assert_fail@plt+0x94b8>
   1a390:	mov	r3, r0
   1a394:	cmp	r3, #0
   1a398:	beq	1a3a0 <__assert_fail@plt+0x95c8>
   1a39c:	bl	10d9c <abort@plt>
   1a3a0:	ldr	r3, [fp, #-16]
   1a3a4:	ldr	r2, [r3, #20]
   1a3a8:	ldr	r3, [fp, #-16]
   1a3ac:	ldr	r3, [r3, r2, lsl #2]
   1a3b0:	str	r3, [fp, #-8]
   1a3b4:	ldr	r3, [fp, #-16]
   1a3b8:	ldr	r2, [r3, #20]
   1a3bc:	ldr	r3, [fp, #-16]
   1a3c0:	ldr	r1, [r3, #16]
   1a3c4:	ldr	r3, [fp, #-16]
   1a3c8:	str	r1, [r3, r2, lsl #2]
   1a3cc:	ldr	r3, [fp, #-16]
   1a3d0:	ldr	r2, [r3, #20]
   1a3d4:	ldr	r3, [fp, #-16]
   1a3d8:	ldr	r3, [r3, #24]
   1a3dc:	cmp	r2, r3
   1a3e0:	bne	1a3f4 <__assert_fail@plt+0x961c>
   1a3e4:	ldr	r3, [fp, #-16]
   1a3e8:	mov	r2, #1
   1a3ec:	strb	r2, [r3, #28]
   1a3f0:	b	1a40c <__assert_fail@plt+0x9634>
   1a3f4:	ldr	r3, [fp, #-16]
   1a3f8:	ldr	r3, [r3, #20]
   1a3fc:	add	r3, r3, #3
   1a400:	and	r2, r3, #3
   1a404:	ldr	r3, [fp, #-16]
   1a408:	str	r2, [r3, #20]
   1a40c:	ldr	r3, [fp, #-8]
   1a410:	mov	r0, r3
   1a414:	sub	sp, fp, #4
   1a418:	pop	{fp, pc}
   1a41c:	push	{fp, lr}
   1a420:	add	fp, sp, #4
   1a424:	sub	sp, sp, #24
   1a428:	strd	r0, [fp, #-20]	; 0xffffffec
   1a42c:	str	r2, [fp, #-24]	; 0xffffffe8
   1a430:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a434:	add	r3, r3, #20
   1a438:	str	r3, [fp, #-8]
   1a43c:	ldr	r3, [fp, #-8]
   1a440:	mov	r2, #0
   1a444:	strb	r2, [r3]
   1a448:	ldr	r3, [fp, #-8]
   1a44c:	sub	r3, r3, #1
   1a450:	str	r3, [fp, #-8]
   1a454:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1a458:	mov	r2, #10
   1a45c:	mov	r3, #0
   1a460:	bl	1b6f8 <__assert_fail@plt+0xa920>
   1a464:	uxtb	r3, r2
   1a468:	add	r3, r3, #48	; 0x30
   1a46c:	uxtb	r2, r3
   1a470:	ldr	r3, [fp, #-8]
   1a474:	strb	r2, [r3]
   1a478:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1a47c:	mov	r2, #10
   1a480:	mov	r3, #0
   1a484:	bl	1b6f8 <__assert_fail@plt+0xa920>
   1a488:	mov	r2, r0
   1a48c:	mov	r3, r1
   1a490:	strd	r2, [fp, #-20]	; 0xffffffec
   1a494:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1a498:	orrs	r3, r2, r3
   1a49c:	bne	1a448 <__assert_fail@plt+0x9670>
   1a4a0:	ldr	r3, [fp, #-8]
   1a4a4:	mov	r0, r3
   1a4a8:	sub	sp, fp, #4
   1a4ac:	pop	{fp, pc}
   1a4b0:	push	{r1, r2, r3}
   1a4b4:	push	{fp, lr}
   1a4b8:	add	fp, sp, #4
   1a4bc:	sub	sp, sp, #20
   1a4c0:	str	r0, [fp, #-20]	; 0xffffffec
   1a4c4:	add	r3, fp, #8
   1a4c8:	str	r3, [fp, #-16]
   1a4cc:	ldr	r3, [fp, #-16]
   1a4d0:	add	r2, r3, #4
   1a4d4:	str	r2, [fp, #-16]
   1a4d8:	ldr	r3, [r3]
   1a4dc:	str	r3, [fp, #-12]
   1a4e0:	ldr	r3, [fp, #4]
   1a4e4:	ldr	r2, [fp, #-12]
   1a4e8:	mov	r1, r3
   1a4ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a4f0:	bl	10c34 <ioctl@plt>
   1a4f4:	mov	r3, r0
   1a4f8:	mov	r0, r3
   1a4fc:	sub	sp, fp, #4
   1a500:	pop	{fp, lr}
   1a504:	add	sp, sp, #12
   1a508:	bx	lr
   1a50c:	push	{r2, r3}
   1a510:	push	{fp, lr}
   1a514:	add	fp, sp, #4
   1a518:	sub	sp, sp, #16
   1a51c:	str	r0, [fp, #-16]
   1a520:	str	r1, [fp, #-20]	; 0xffffffec
   1a524:	mov	r3, #0
   1a528:	str	r3, [fp, #-8]
   1a52c:	ldr	r3, [fp, #4]
   1a530:	and	r3, r3, #64	; 0x40
   1a534:	cmp	r3, #0
   1a538:	beq	1a558 <__assert_fail@plt+0x9780>
   1a53c:	add	r3, fp, #8
   1a540:	str	r3, [fp, #-12]
   1a544:	ldr	r3, [fp, #-12]
   1a548:	add	r2, r3, #4
   1a54c:	str	r2, [fp, #-12]
   1a550:	ldr	r3, [r3]
   1a554:	str	r3, [fp, #-8]
   1a558:	ldr	r3, [fp, #-8]
   1a55c:	ldr	r2, [fp, #4]
   1a560:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a564:	ldr	r0, [fp, #-16]
   1a568:	bl	10cb8 <openat64@plt>
   1a56c:	mov	r3, r0
   1a570:	mov	r0, r3
   1a574:	bl	1a644 <__assert_fail@plt+0x986c>
   1a578:	mov	r3, r0
   1a57c:	mov	r0, r3
   1a580:	sub	sp, fp, #4
   1a584:	pop	{fp, lr}
   1a588:	add	sp, sp, #8
   1a58c:	bx	lr
   1a590:	push	{fp, lr}
   1a594:	add	fp, sp, #4
   1a598:	sub	sp, sp, #32
   1a59c:	str	r0, [fp, #-24]	; 0xffffffe8
   1a5a0:	str	r1, [fp, #-28]	; 0xffffffe4
   1a5a4:	str	r2, [fp, #-32]	; 0xffffffe0
   1a5a8:	str	r3, [fp, #-36]	; 0xffffffdc
   1a5ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a5b0:	orr	r3, r3, #540672	; 0x84000
   1a5b4:	orr	r3, r3, #2304	; 0x900
   1a5b8:	str	r3, [fp, #-8]
   1a5bc:	ldr	r2, [fp, #-8]
   1a5c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a5c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a5c8:	bl	1a50c <__assert_fail@plt+0x9734>
   1a5cc:	str	r0, [fp, #-12]
   1a5d0:	ldr	r3, [fp, #-12]
   1a5d4:	cmp	r3, #0
   1a5d8:	bge	1a5e4 <__assert_fail@plt+0x980c>
   1a5dc:	mov	r3, #0
   1a5e0:	b	1a638 <__assert_fail@plt+0x9860>
   1a5e4:	ldr	r0, [fp, #-12]
   1a5e8:	bl	10d30 <fdopendir@plt>
   1a5ec:	str	r0, [fp, #-16]
   1a5f0:	ldr	r3, [fp, #-16]
   1a5f4:	cmp	r3, #0
   1a5f8:	beq	1a60c <__assert_fail@plt+0x9834>
   1a5fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a600:	ldr	r2, [fp, #-12]
   1a604:	str	r2, [r3]
   1a608:	b	1a634 <__assert_fail@plt+0x985c>
   1a60c:	bl	10cd0 <__errno_location@plt>
   1a610:	mov	r3, r0
   1a614:	ldr	r3, [r3]
   1a618:	str	r3, [fp, #-20]	; 0xffffffec
   1a61c:	ldr	r0, [fp, #-12]
   1a620:	bl	10da8 <close@plt>
   1a624:	bl	10cd0 <__errno_location@plt>
   1a628:	mov	r2, r0
   1a62c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a630:	str	r3, [r2]
   1a634:	ldr	r3, [fp, #-16]
   1a638:	mov	r0, r3
   1a63c:	sub	sp, fp, #4
   1a640:	pop	{fp, pc}
   1a644:	push	{fp, lr}
   1a648:	add	fp, sp, #4
   1a64c:	sub	sp, sp, #16
   1a650:	str	r0, [fp, #-16]
   1a654:	ldr	r3, [fp, #-16]
   1a658:	cmp	r3, #0
   1a65c:	blt	1a6a8 <__assert_fail@plt+0x98d0>
   1a660:	ldr	r3, [fp, #-16]
   1a664:	cmp	r3, #2
   1a668:	bgt	1a6a8 <__assert_fail@plt+0x98d0>
   1a66c:	ldr	r0, [fp, #-16]
   1a670:	bl	1b1a8 <__assert_fail@plt+0xa3d0>
   1a674:	str	r0, [fp, #-8]
   1a678:	bl	10cd0 <__errno_location@plt>
   1a67c:	mov	r3, r0
   1a680:	ldr	r3, [r3]
   1a684:	str	r3, [fp, #-12]
   1a688:	ldr	r0, [fp, #-16]
   1a68c:	bl	10da8 <close@plt>
   1a690:	bl	10cd0 <__errno_location@plt>
   1a694:	mov	r2, r0
   1a698:	ldr	r3, [fp, #-12]
   1a69c:	str	r3, [r2]
   1a6a0:	ldr	r3, [fp, #-8]
   1a6a4:	str	r3, [fp, #-16]
   1a6a8:	ldr	r3, [fp, #-16]
   1a6ac:	mov	r0, r3
   1a6b0:	sub	sp, fp, #4
   1a6b4:	pop	{fp, pc}
   1a6b8:	push	{r4, r5, fp, lr}
   1a6bc:	add	fp, sp, #12
   1a6c0:	sub	sp, sp, #16
   1a6c4:	str	r0, [fp, #-24]	; 0xffffffe8
   1a6c8:	str	r1, [fp, #-28]	; 0xffffffe4
   1a6cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a6d0:	cmp	r3, #0
   1a6d4:	beq	1a6e4 <__assert_fail@plt+0x990c>
   1a6d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a6dc:	cmp	r3, #0
   1a6e0:	bne	1a6f4 <__assert_fail@plt+0x991c>
   1a6e4:	mov	r3, #1
   1a6e8:	str	r3, [fp, #-28]	; 0xffffffe4
   1a6ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a6f0:	str	r3, [fp, #-24]	; 0xffffffe8
   1a6f4:	mov	r1, #0
   1a6f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a6fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a700:	umull	r2, r3, r2, r3
   1a704:	mov	r4, r3
   1a708:	mov	r5, #0
   1a70c:	cmp	r4, #0
   1a710:	beq	1a718 <__assert_fail@plt+0x9940>
   1a714:	mov	r1, #1
   1a718:	cmp	r2, #0
   1a71c:	bge	1a724 <__assert_fail@plt+0x994c>
   1a720:	mov	r1, #1
   1a724:	mov	r3, r2
   1a728:	str	r3, [fp, #-20]	; 0xffffffec
   1a72c:	mov	r3, r1
   1a730:	and	r3, r3, #1
   1a734:	uxtb	r3, r3
   1a738:	cmp	r3, #0
   1a73c:	beq	1a758 <__assert_fail@plt+0x9980>
   1a740:	bl	10cd0 <__errno_location@plt>
   1a744:	mov	r2, r0
   1a748:	mov	r3, #12
   1a74c:	str	r3, [r2]
   1a750:	mov	r3, #0
   1a754:	b	1a770 <__assert_fail@plt+0x9998>
   1a758:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a75c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a760:	bl	10b68 <calloc@plt>
   1a764:	mov	r3, r0
   1a768:	str	r3, [fp, #-16]
   1a76c:	ldr	r3, [fp, #-16]
   1a770:	mov	r0, r3
   1a774:	sub	sp, fp, #12
   1a778:	pop	{r4, r5, fp, pc}
   1a77c:	push	{r4, r5, fp, lr}
   1a780:	add	fp, sp, #12
   1a784:	sub	sp, sp, #16
   1a788:	str	r0, [fp, #-24]	; 0xffffffe8
   1a78c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a790:	cmp	r3, #0
   1a794:	bne	1a7a0 <__assert_fail@plt+0x99c8>
   1a798:	mov	r3, #1
   1a79c:	str	r3, [fp, #-24]	; 0xffffffe8
   1a7a0:	mov	r1, #0
   1a7a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a7a8:	mov	r2, r3
   1a7ac:	mov	r3, #0
   1a7b0:	mov	r4, r3
   1a7b4:	mov	r5, #0
   1a7b8:	cmp	r4, #0
   1a7bc:	beq	1a7c4 <__assert_fail@plt+0x99ec>
   1a7c0:	mov	r1, #1
   1a7c4:	cmp	r2, #0
   1a7c8:	bge	1a7d0 <__assert_fail@plt+0x99f8>
   1a7cc:	mov	r1, #1
   1a7d0:	mov	r3, r2
   1a7d4:	str	r3, [fp, #-20]	; 0xffffffec
   1a7d8:	mov	r3, r1
   1a7dc:	and	r3, r3, #1
   1a7e0:	uxtb	r3, r3
   1a7e4:	cmp	r3, #0
   1a7e8:	beq	1a804 <__assert_fail@plt+0x9a2c>
   1a7ec:	bl	10cd0 <__errno_location@plt>
   1a7f0:	mov	r2, r0
   1a7f4:	mov	r3, #12
   1a7f8:	str	r3, [r2]
   1a7fc:	mov	r3, #0
   1a800:	b	1a818 <__assert_fail@plt+0x9a40>
   1a804:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a808:	bl	10c64 <malloc@plt>
   1a80c:	mov	r3, r0
   1a810:	str	r3, [fp, #-16]
   1a814:	ldr	r3, [fp, #-16]
   1a818:	mov	r0, r3
   1a81c:	sub	sp, fp, #12
   1a820:	pop	{r4, r5, fp, pc}
   1a824:	push	{r4, r5, fp, lr}
   1a828:	add	fp, sp, #12
   1a82c:	sub	sp, sp, #16
   1a830:	str	r0, [fp, #-24]	; 0xffffffe8
   1a834:	str	r1, [fp, #-28]	; 0xffffffe4
   1a838:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a83c:	cmp	r3, #0
   1a840:	bne	1a854 <__assert_fail@plt+0x9a7c>
   1a844:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a848:	bl	1a77c <__assert_fail@plt+0x99a4>
   1a84c:	mov	r3, r0
   1a850:	b	1a8e8 <__assert_fail@plt+0x9b10>
   1a854:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a858:	cmp	r3, #0
   1a85c:	bne	1a870 <__assert_fail@plt+0x9a98>
   1a860:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a864:	bl	13f5c <__assert_fail@plt+0x3184>
   1a868:	mov	r3, #0
   1a86c:	b	1a8e8 <__assert_fail@plt+0x9b10>
   1a870:	mov	r1, #0
   1a874:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a878:	mov	r2, r3
   1a87c:	mov	r3, #0
   1a880:	mov	r4, r3
   1a884:	mov	r5, #0
   1a888:	cmp	r4, #0
   1a88c:	beq	1a894 <__assert_fail@plt+0x9abc>
   1a890:	mov	r1, #1
   1a894:	cmp	r2, #0
   1a898:	bge	1a8a0 <__assert_fail@plt+0x9ac8>
   1a89c:	mov	r1, #1
   1a8a0:	mov	r3, r2
   1a8a4:	str	r3, [fp, #-20]	; 0xffffffec
   1a8a8:	mov	r3, r1
   1a8ac:	and	r3, r3, #1
   1a8b0:	uxtb	r3, r3
   1a8b4:	cmp	r3, #0
   1a8b8:	beq	1a8d4 <__assert_fail@plt+0x9afc>
   1a8bc:	bl	10cd0 <__errno_location@plt>
   1a8c0:	mov	r2, r0
   1a8c4:	mov	r3, #12
   1a8c8:	str	r3, [r2]
   1a8cc:	mov	r3, #0
   1a8d0:	b	1a8e8 <__assert_fail@plt+0x9b10>
   1a8d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a8d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a8dc:	bl	10bec <realloc@plt>
   1a8e0:	str	r0, [fp, #-16]
   1a8e4:	ldr	r3, [fp, #-16]
   1a8e8:	mov	r0, r3
   1a8ec:	sub	sp, fp, #12
   1a8f0:	pop	{r4, r5, fp, pc}
   1a8f4:	push	{r4, r5, r6, r7, fp}
   1a8f8:	add	fp, sp, #16
   1a8fc:	sub	sp, sp, #20
   1a900:	strd	r0, [fp, #-28]	; 0xffffffe4
   1a904:	str	r2, [fp, #-32]	; 0xffffffe0
   1a908:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1a90c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a910:	sub	ip, r1, #32
   1a914:	rsb	r0, r1, #32
   1a918:	lsl	r7, r3, r1
   1a91c:	orr	r7, r7, r2, lsl ip
   1a920:	orr	r7, r7, r2, lsr r0
   1a924:	lsl	r6, r2, r1
   1a928:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a92c:	rsb	r1, r1, #0
   1a930:	and	r1, r1, #63	; 0x3f
   1a934:	rsb	ip, r1, #32
   1a938:	sub	r0, r1, #32
   1a93c:	lsr	r4, r2, r1
   1a940:	orr	r4, r4, r3, lsl ip
   1a944:	orr	r4, r4, r3, lsr r0
   1a948:	lsr	r5, r3, r1
   1a94c:	orr	r4, r4, r6
   1a950:	orr	r5, r5, r7
   1a954:	mov	r2, r4
   1a958:	mov	r3, r5
   1a95c:	mov	r0, r2
   1a960:	mov	r1, r3
   1a964:	sub	sp, fp, #16
   1a968:	pop	{r4, r5, r6, r7, fp}
   1a96c:	bx	lr
   1a970:	push	{r4, r5, r6, r7, fp}
   1a974:	add	fp, sp, #16
   1a978:	sub	sp, sp, #20
   1a97c:	strd	r0, [fp, #-28]	; 0xffffffe4
   1a980:	str	r2, [fp, #-32]	; 0xffffffe0
   1a984:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1a988:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a98c:	rsb	ip, r1, #32
   1a990:	sub	r0, r1, #32
   1a994:	lsr	r6, r2, r1
   1a998:	orr	r6, r6, r3, lsl ip
   1a99c:	orr	r6, r6, r3, lsr r0
   1a9a0:	lsr	r7, r3, r1
   1a9a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a9a8:	rsb	r1, r1, #0
   1a9ac:	and	r1, r1, #63	; 0x3f
   1a9b0:	sub	ip, r1, #32
   1a9b4:	rsb	r0, r1, #32
   1a9b8:	lsl	r5, r3, r1
   1a9bc:	orr	r5, r5, r2, lsl ip
   1a9c0:	orr	r5, r5, r2, lsr r0
   1a9c4:	lsl	r4, r2, r1
   1a9c8:	orr	r4, r4, r6
   1a9cc:	orr	r5, r5, r7
   1a9d0:	mov	r2, r4
   1a9d4:	mov	r3, r5
   1a9d8:	mov	r0, r2
   1a9dc:	mov	r1, r3
   1a9e0:	sub	sp, fp, #16
   1a9e4:	pop	{r4, r5, r6, r7, fp}
   1a9e8:	bx	lr
   1a9ec:	push	{fp}		; (str fp, [sp, #-4]!)
   1a9f0:	add	fp, sp, #0
   1a9f4:	sub	sp, sp, #12
   1a9f8:	str	r0, [fp, #-8]
   1a9fc:	str	r1, [fp, #-12]
   1aa00:	ldr	r2, [fp, #-8]
   1aa04:	ldr	r3, [fp, #-12]
   1aa08:	rsb	r3, r3, #32
   1aa0c:	ror	r3, r2, r3
   1aa10:	mov	r0, r3
   1aa14:	add	sp, fp, #0
   1aa18:	pop	{fp}		; (ldr fp, [sp], #4)
   1aa1c:	bx	lr
   1aa20:	push	{fp}		; (str fp, [sp, #-4]!)
   1aa24:	add	fp, sp, #0
   1aa28:	sub	sp, sp, #12
   1aa2c:	str	r0, [fp, #-8]
   1aa30:	str	r1, [fp, #-12]
   1aa34:	ldr	r2, [fp, #-8]
   1aa38:	ldr	r3, [fp, #-12]
   1aa3c:	ror	r3, r2, r3
   1aa40:	mov	r0, r3
   1aa44:	add	sp, fp, #0
   1aa48:	pop	{fp}		; (ldr fp, [sp], #4)
   1aa4c:	bx	lr
   1aa50:	push	{fp}		; (str fp, [sp, #-4]!)
   1aa54:	add	fp, sp, #0
   1aa58:	sub	sp, sp, #12
   1aa5c:	str	r0, [fp, #-8]
   1aa60:	str	r1, [fp, #-12]
   1aa64:	ldr	r2, [fp, #-8]
   1aa68:	ldr	r3, [fp, #-12]
   1aa6c:	rsb	r3, r3, #32
   1aa70:	ror	r3, r2, r3
   1aa74:	mov	r0, r3
   1aa78:	add	sp, fp, #0
   1aa7c:	pop	{fp}		; (ldr fp, [sp], #4)
   1aa80:	bx	lr
   1aa84:	push	{fp}		; (str fp, [sp, #-4]!)
   1aa88:	add	fp, sp, #0
   1aa8c:	sub	sp, sp, #12
   1aa90:	str	r0, [fp, #-8]
   1aa94:	str	r1, [fp, #-12]
   1aa98:	ldr	r2, [fp, #-8]
   1aa9c:	ldr	r3, [fp, #-12]
   1aaa0:	ror	r3, r2, r3
   1aaa4:	mov	r0, r3
   1aaa8:	add	sp, fp, #0
   1aaac:	pop	{fp}		; (ldr fp, [sp], #4)
   1aab0:	bx	lr
   1aab4:	push	{fp}		; (str fp, [sp, #-4]!)
   1aab8:	add	fp, sp, #0
   1aabc:	sub	sp, sp, #12
   1aac0:	mov	r3, r0
   1aac4:	str	r1, [fp, #-12]
   1aac8:	strh	r3, [fp, #-6]
   1aacc:	ldrh	r2, [fp, #-6]
   1aad0:	ldr	r3, [fp, #-12]
   1aad4:	lsl	r3, r2, r3
   1aad8:	uxth	r2, r3
   1aadc:	ldrh	r1, [fp, #-6]
   1aae0:	ldr	r3, [fp, #-12]
   1aae4:	rsb	r3, r3, #16
   1aae8:	lsr	r3, r1, r3
   1aaec:	uxth	r3, r3
   1aaf0:	orr	r3, r2, r3
   1aaf4:	uxth	r3, r3
   1aaf8:	mov	r0, r3
   1aafc:	add	sp, fp, #0
   1ab00:	pop	{fp}		; (ldr fp, [sp], #4)
   1ab04:	bx	lr
   1ab08:	push	{fp}		; (str fp, [sp, #-4]!)
   1ab0c:	add	fp, sp, #0
   1ab10:	sub	sp, sp, #12
   1ab14:	mov	r3, r0
   1ab18:	str	r1, [fp, #-12]
   1ab1c:	strh	r3, [fp, #-6]
   1ab20:	ldrh	r2, [fp, #-6]
   1ab24:	ldr	r3, [fp, #-12]
   1ab28:	lsr	r3, r2, r3
   1ab2c:	uxth	r2, r3
   1ab30:	ldrh	r1, [fp, #-6]
   1ab34:	ldr	r3, [fp, #-12]
   1ab38:	rsb	r3, r3, #16
   1ab3c:	lsl	r3, r1, r3
   1ab40:	uxth	r3, r3
   1ab44:	orr	r3, r2, r3
   1ab48:	uxth	r3, r3
   1ab4c:	mov	r0, r3
   1ab50:	add	sp, fp, #0
   1ab54:	pop	{fp}		; (ldr fp, [sp], #4)
   1ab58:	bx	lr
   1ab5c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ab60:	add	fp, sp, #0
   1ab64:	sub	sp, sp, #12
   1ab68:	mov	r3, r0
   1ab6c:	str	r1, [fp, #-12]
   1ab70:	strb	r3, [fp, #-5]
   1ab74:	ldrb	r2, [fp, #-5]
   1ab78:	ldr	r3, [fp, #-12]
   1ab7c:	lsl	r3, r2, r3
   1ab80:	uxtb	r2, r3
   1ab84:	ldrb	r1, [fp, #-5]
   1ab88:	ldr	r3, [fp, #-12]
   1ab8c:	rsb	r3, r3, #8
   1ab90:	lsr	r3, r1, r3
   1ab94:	uxtb	r3, r3
   1ab98:	orr	r3, r2, r3
   1ab9c:	uxtb	r3, r3
   1aba0:	mov	r0, r3
   1aba4:	add	sp, fp, #0
   1aba8:	pop	{fp}		; (ldr fp, [sp], #4)
   1abac:	bx	lr
   1abb0:	push	{fp}		; (str fp, [sp, #-4]!)
   1abb4:	add	fp, sp, #0
   1abb8:	sub	sp, sp, #12
   1abbc:	mov	r3, r0
   1abc0:	str	r1, [fp, #-12]
   1abc4:	strb	r3, [fp, #-5]
   1abc8:	ldrb	r2, [fp, #-5]
   1abcc:	ldr	r3, [fp, #-12]
   1abd0:	lsr	r3, r2, r3
   1abd4:	uxtb	r2, r3
   1abd8:	ldrb	r1, [fp, #-5]
   1abdc:	ldr	r3, [fp, #-12]
   1abe0:	rsb	r3, r3, #8
   1abe4:	lsl	r3, r1, r3
   1abe8:	uxtb	r3, r3
   1abec:	orr	r3, r2, r3
   1abf0:	uxtb	r3, r3
   1abf4:	mov	r0, r3
   1abf8:	add	sp, fp, #0
   1abfc:	pop	{fp}		; (ldr fp, [sp], #4)
   1ac00:	bx	lr
   1ac04:	push	{fp}		; (str fp, [sp, #-4]!)
   1ac08:	add	fp, sp, #0
   1ac0c:	sub	sp, sp, #12
   1ac10:	strd	r0, [fp, #-12]
   1ac14:	ldrd	r2, [fp, #-12]
   1ac18:	subs	r0, r2, #1
   1ac1c:	sbc	r1, r3, #0
   1ac20:	ldrd	r2, [fp, #-12]
   1ac24:	and	r2, r2, r0
   1ac28:	and	r3, r3, r1
   1ac2c:	orr	r3, r2, r3
   1ac30:	cmp	r3, #0
   1ac34:	moveq	r3, #1
   1ac38:	movne	r3, #0
   1ac3c:	uxtb	r3, r3
   1ac40:	mov	r0, r3
   1ac44:	add	sp, fp, #0
   1ac48:	pop	{fp}		; (ldr fp, [sp], #4)
   1ac4c:	bx	lr
   1ac50:	push	{fp}		; (str fp, [sp, #-4]!)
   1ac54:	add	fp, sp, #0
   1ac58:	sub	sp, sp, #12
   1ac5c:	str	r0, [fp, #-8]
   1ac60:	ldr	r1, [fp, #-8]
   1ac64:	mov	r2, #0
   1ac68:	mov	r3, #0
   1ac6c:	strd	r2, [r1, #16]
   1ac70:	ldr	r3, [fp, #-8]
   1ac74:	ldr	r2, [pc, #16]	; 1ac8c <__assert_fail@plt+0x9eb4>
   1ac78:	str	r2, [r3, #24]
   1ac7c:	nop			; (mov r0, r0)
   1ac80:	add	sp, fp, #0
   1ac84:	pop	{fp}		; (ldr fp, [sp], #4)
   1ac88:	bx	lr
   1ac8c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1ac90:	push	{fp, lr}
   1ac94:	add	fp, sp, #4
   1ac98:	sub	sp, sp, #8
   1ac9c:	str	r0, [fp, #-8]
   1aca0:	str	r1, [fp, #-12]
   1aca4:	ldr	r3, [fp, #-8]
   1aca8:	ldr	r3, [r3, #24]
   1acac:	ldr	r2, [pc, #232]	; 1ad9c <__assert_fail@plt+0x9fc4>
   1acb0:	cmp	r3, r2
   1acb4:	beq	1accc <__assert_fail@plt+0x9ef4>
   1acb8:	ldr	r3, [pc, #224]	; 1ada0 <__assert_fail@plt+0x9fc8>
   1acbc:	mov	r2, #60	; 0x3c
   1acc0:	ldr	r1, [pc, #220]	; 1ada4 <__assert_fail@plt+0x9fcc>
   1acc4:	ldr	r0, [pc, #220]	; 1ada8 <__assert_fail@plt+0x9fd0>
   1acc8:	bl	10dd8 <__assert_fail@plt>
   1accc:	ldr	r3, [fp, #-8]
   1acd0:	ldrd	r2, [r3, #16]
   1acd4:	orrs	r3, r2, r3
   1acd8:	beq	1ad1c <__assert_fail@plt+0x9f44>
   1acdc:	ldr	r3, [fp, #-12]
   1ace0:	ldrd	r0, [r3, #96]	; 0x60
   1ace4:	ldr	r3, [fp, #-8]
   1ace8:	ldrd	r2, [r3]
   1acec:	cmp	r1, r3
   1acf0:	cmpeq	r0, r2
   1acf4:	bne	1ad1c <__assert_fail@plt+0x9f44>
   1acf8:	ldr	r3, [fp, #-12]
   1acfc:	ldrd	r0, [r3]
   1ad00:	ldr	r3, [fp, #-8]
   1ad04:	ldrd	r2, [r3, #8]
   1ad08:	cmp	r1, r3
   1ad0c:	cmpeq	r0, r2
   1ad10:	bne	1ad1c <__assert_fail@plt+0x9f44>
   1ad14:	mov	r3, #1
   1ad18:	b	1ad90 <__assert_fail@plt+0x9fb8>
   1ad1c:	ldr	r3, [fp, #-8]
   1ad20:	ldrd	r2, [r3, #16]
   1ad24:	adds	r2, r2, #1
   1ad28:	adc	r3, r3, #0
   1ad2c:	ldr	r1, [fp, #-8]
   1ad30:	strd	r2, [r1, #16]
   1ad34:	ldr	r3, [fp, #-8]
   1ad38:	ldrd	r2, [r3, #16]
   1ad3c:	mov	r0, r2
   1ad40:	mov	r1, r3
   1ad44:	bl	1ac04 <__assert_fail@plt+0x9e2c>
   1ad48:	mov	r3, r0
   1ad4c:	cmp	r3, #0
   1ad50:	beq	1ad8c <__assert_fail@plt+0x9fb4>
   1ad54:	ldr	r3, [fp, #-8]
   1ad58:	ldrd	r2, [r3, #16]
   1ad5c:	orrs	r3, r2, r3
   1ad60:	bne	1ad6c <__assert_fail@plt+0x9f94>
   1ad64:	mov	r3, #1
   1ad68:	b	1ad90 <__assert_fail@plt+0x9fb8>
   1ad6c:	ldr	r3, [fp, #-12]
   1ad70:	ldrd	r2, [r3]
   1ad74:	ldr	r1, [fp, #-8]
   1ad78:	strd	r2, [r1, #8]
   1ad7c:	ldr	r3, [fp, #-12]
   1ad80:	ldrd	r2, [r3, #96]	; 0x60
   1ad84:	ldr	r1, [fp, #-8]
   1ad88:	strd	r2, [r1]
   1ad8c:	mov	r3, #0
   1ad90:	mov	r0, r3
   1ad94:	sub	sp, fp, #4
   1ad98:	pop	{fp, pc}
   1ad9c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1ada0:	andeq	fp, r1, r4, ror ip
   1ada4:	andeq	fp, r1, ip, asr #24
   1ada8:	andeq	fp, r1, ip, asr ip
   1adac:	push	{r1, r2, r3}
   1adb0:	push	{fp, lr}
   1adb4:	add	fp, sp, #4
   1adb8:	sub	sp, sp, #36	; 0x24
   1adbc:	str	r0, [fp, #-36]	; 0xffffffdc
   1adc0:	mvn	r3, #0
   1adc4:	str	r3, [fp, #-12]
   1adc8:	add	r3, fp, #8
   1adcc:	str	r3, [fp, #-32]	; 0xffffffe0
   1add0:	ldr	r3, [fp, #4]
   1add4:	cmp	r3, #0
   1add8:	beq	1adec <__assert_fail@plt+0xa014>
   1addc:	ldr	r2, [pc, #432]	; 1af94 <__assert_fail@plt+0xa1bc>
   1ade0:	cmp	r3, r2
   1ade4:	beq	1ae14 <__assert_fail@plt+0xa03c>
   1ade8:	b	1ae3c <__assert_fail@plt+0xa064>
   1adec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1adf0:	add	r2, r3, #4
   1adf4:	str	r2, [fp, #-32]	; 0xffffffe0
   1adf8:	ldr	r3, [r3]
   1adfc:	str	r3, [fp, #-16]
   1ae00:	ldr	r1, [fp, #-16]
   1ae04:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ae08:	bl	1afac <__assert_fail@plt+0xa1d4>
   1ae0c:	str	r0, [fp, #-12]
   1ae10:	b	1af7c <__assert_fail@plt+0xa1a4>
   1ae14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ae18:	add	r2, r3, #4
   1ae1c:	str	r2, [fp, #-32]	; 0xffffffe0
   1ae20:	ldr	r3, [r3]
   1ae24:	str	r3, [fp, #-20]	; 0xffffffec
   1ae28:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ae2c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ae30:	bl	1afe4 <__assert_fail@plt+0xa20c>
   1ae34:	str	r0, [fp, #-12]
   1ae38:	b	1af7c <__assert_fail@plt+0xa1a4>
   1ae3c:	ldr	r3, [fp, #4]
   1ae40:	cmp	r3, #11
   1ae44:	beq	1af0c <__assert_fail@plt+0xa134>
   1ae48:	cmp	r3, #11
   1ae4c:	bgt	1aeac <__assert_fail@plt+0xa0d4>
   1ae50:	cmp	r3, #3
   1ae54:	beq	1af0c <__assert_fail@plt+0xa134>
   1ae58:	cmp	r3, #3
   1ae5c:	bgt	1ae7c <__assert_fail@plt+0xa0a4>
   1ae60:	cmp	r3, #1
   1ae64:	beq	1af0c <__assert_fail@plt+0xa134>
   1ae68:	cmp	r3, #1
   1ae6c:	bgt	1af20 <__assert_fail@plt+0xa148>
   1ae70:	cmp	r3, #0
   1ae74:	beq	1af20 <__assert_fail@plt+0xa148>
   1ae78:	b	1af4c <__assert_fail@plt+0xa174>
   1ae7c:	cmp	r3, #8
   1ae80:	beq	1af20 <__assert_fail@plt+0xa148>
   1ae84:	cmp	r3, #8
   1ae88:	bgt	1ae98 <__assert_fail@plt+0xa0c0>
   1ae8c:	cmp	r3, #4
   1ae90:	beq	1af20 <__assert_fail@plt+0xa148>
   1ae94:	b	1af4c <__assert_fail@plt+0xa174>
   1ae98:	cmp	r3, #9
   1ae9c:	beq	1af0c <__assert_fail@plt+0xa134>
   1aea0:	cmp	r3, #10
   1aea4:	beq	1af20 <__assert_fail@plt+0xa148>
   1aea8:	b	1af4c <__assert_fail@plt+0xa174>
   1aeac:	ldr	r2, [pc, #228]	; 1af98 <__assert_fail@plt+0xa1c0>
   1aeb0:	cmp	r3, r2
   1aeb4:	bgt	1aee8 <__assert_fail@plt+0xa110>
   1aeb8:	ldr	r2, [pc, #212]	; 1af94 <__assert_fail@plt+0xa1bc>
   1aebc:	cmp	r3, r2
   1aec0:	bge	1af20 <__assert_fail@plt+0xa148>
   1aec4:	ldr	r2, [pc, #208]	; 1af9c <__assert_fail@plt+0xa1c4>
   1aec8:	cmp	r3, r2
   1aecc:	beq	1af0c <__assert_fail@plt+0xa134>
   1aed0:	ldr	r2, [pc, #200]	; 1afa0 <__assert_fail@plt+0xa1c8>
   1aed4:	cmp	r3, r2
   1aed8:	beq	1af20 <__assert_fail@plt+0xa148>
   1aedc:	cmp	r3, #1024	; 0x400
   1aee0:	beq	1af20 <__assert_fail@plt+0xa148>
   1aee4:	b	1af4c <__assert_fail@plt+0xa174>
   1aee8:	ldr	r2, [pc, #180]	; 1afa4 <__assert_fail@plt+0xa1cc>
   1aeec:	cmp	r3, r2
   1aef0:	beq	1af20 <__assert_fail@plt+0xa148>
   1aef4:	ldr	r2, [pc, #168]	; 1afa4 <__assert_fail@plt+0xa1cc>
   1aef8:	cmp	r3, r2
   1aefc:	blt	1af0c <__assert_fail@plt+0xa134>
   1af00:	ldr	r2, [pc, #160]	; 1afa8 <__assert_fail@plt+0xa1d0>
   1af04:	cmp	r3, r2
   1af08:	bne	1af4c <__assert_fail@plt+0xa174>
   1af0c:	ldr	r1, [fp, #4]
   1af10:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1af14:	bl	10d00 <fcntl64@plt>
   1af18:	str	r0, [fp, #-12]
   1af1c:	b	1af78 <__assert_fail@plt+0xa1a0>
   1af20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1af24:	add	r2, r3, #4
   1af28:	str	r2, [fp, #-32]	; 0xffffffe0
   1af2c:	ldr	r3, [r3]
   1af30:	str	r3, [fp, #-24]	; 0xffffffe8
   1af34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1af38:	ldr	r1, [fp, #4]
   1af3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1af40:	bl	10d00 <fcntl64@plt>
   1af44:	str	r0, [fp, #-12]
   1af48:	b	1af78 <__assert_fail@plt+0xa1a0>
   1af4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1af50:	add	r2, r3, #4
   1af54:	str	r2, [fp, #-32]	; 0xffffffe0
   1af58:	ldr	r3, [r3]
   1af5c:	str	r3, [fp, #-28]	; 0xffffffe4
   1af60:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1af64:	ldr	r1, [fp, #4]
   1af68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1af6c:	bl	10d00 <fcntl64@plt>
   1af70:	str	r0, [fp, #-12]
   1af74:	nop			; (mov r0, r0)
   1af78:	nop			; (mov r0, r0)
   1af7c:	ldr	r3, [fp, #-12]
   1af80:	mov	r0, r3
   1af84:	sub	sp, fp, #4
   1af88:	pop	{fp, lr}
   1af8c:	add	sp, sp, #12
   1af90:	bx	lr
   1af94:	andeq	r0, r0, r6, lsl #8
   1af98:	andeq	r0, r0, r7, lsl #8
   1af9c:	andeq	r0, r0, r1, lsl #8
   1afa0:	andeq	r0, r0, r2, lsl #8
   1afa4:	andeq	r0, r0, r9, lsl #8
   1afa8:	andeq	r0, r0, sl, lsl #8
   1afac:	push	{fp, lr}
   1afb0:	add	fp, sp, #4
   1afb4:	sub	sp, sp, #16
   1afb8:	str	r0, [fp, #-16]
   1afbc:	str	r1, [fp, #-20]	; 0xffffffec
   1afc0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1afc4:	mov	r1, #0
   1afc8:	ldr	r0, [fp, #-16]
   1afcc:	bl	10d00 <fcntl64@plt>
   1afd0:	str	r0, [fp, #-8]
   1afd4:	ldr	r3, [fp, #-8]
   1afd8:	mov	r0, r3
   1afdc:	sub	sp, fp, #4
   1afe0:	pop	{fp, pc}
   1afe4:	push	{fp, lr}
   1afe8:	add	fp, sp, #4
   1afec:	sub	sp, sp, #24
   1aff0:	str	r0, [fp, #-24]	; 0xffffffe8
   1aff4:	str	r1, [fp, #-28]	; 0xffffffe4
   1aff8:	ldr	r3, [pc, #292]	; 1b124 <__assert_fail@plt+0xa34c>
   1affc:	ldr	r3, [r3]
   1b000:	cmp	r3, #0
   1b004:	blt	1b078 <__assert_fail@plt+0xa2a0>
   1b008:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b00c:	ldr	r1, [pc, #276]	; 1b128 <__assert_fail@plt+0xa350>
   1b010:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b014:	bl	10d00 <fcntl64@plt>
   1b018:	str	r0, [fp, #-8]
   1b01c:	ldr	r3, [fp, #-8]
   1b020:	cmp	r3, #0
   1b024:	bge	1b03c <__assert_fail@plt+0xa264>
   1b028:	bl	10cd0 <__errno_location@plt>
   1b02c:	mov	r3, r0
   1b030:	ldr	r3, [r3]
   1b034:	cmp	r3, #22
   1b038:	beq	1b04c <__assert_fail@plt+0xa274>
   1b03c:	ldr	r3, [pc, #224]	; 1b124 <__assert_fail@plt+0xa34c>
   1b040:	mov	r2, #1
   1b044:	str	r2, [r3]
   1b048:	b	1b088 <__assert_fail@plt+0xa2b0>
   1b04c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b050:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b054:	bl	1afac <__assert_fail@plt+0xa1d4>
   1b058:	str	r0, [fp, #-8]
   1b05c:	ldr	r3, [fp, #-8]
   1b060:	cmp	r3, #0
   1b064:	blt	1b088 <__assert_fail@plt+0xa2b0>
   1b068:	ldr	r3, [pc, #180]	; 1b124 <__assert_fail@plt+0xa34c>
   1b06c:	mvn	r2, #0
   1b070:	str	r2, [r3]
   1b074:	b	1b088 <__assert_fail@plt+0xa2b0>
   1b078:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b07c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b080:	bl	1afac <__assert_fail@plt+0xa1d4>
   1b084:	str	r0, [fp, #-8]
   1b088:	ldr	r3, [fp, #-8]
   1b08c:	cmp	r3, #0
   1b090:	blt	1b114 <__assert_fail@plt+0xa33c>
   1b094:	ldr	r3, [pc, #136]	; 1b124 <__assert_fail@plt+0xa34c>
   1b098:	ldr	r3, [r3]
   1b09c:	cmn	r3, #1
   1b0a0:	bne	1b114 <__assert_fail@plt+0xa33c>
   1b0a4:	mov	r1, #1
   1b0a8:	ldr	r0, [fp, #-8]
   1b0ac:	bl	10d00 <fcntl64@plt>
   1b0b0:	str	r0, [fp, #-12]
   1b0b4:	ldr	r3, [fp, #-12]
   1b0b8:	cmp	r3, #0
   1b0bc:	blt	1b0e4 <__assert_fail@plt+0xa30c>
   1b0c0:	ldr	r3, [fp, #-12]
   1b0c4:	orr	r3, r3, #1
   1b0c8:	mov	r2, r3
   1b0cc:	mov	r1, #2
   1b0d0:	ldr	r0, [fp, #-8]
   1b0d4:	bl	10d00 <fcntl64@plt>
   1b0d8:	mov	r3, r0
   1b0dc:	cmn	r3, #1
   1b0e0:	bne	1b114 <__assert_fail@plt+0xa33c>
   1b0e4:	bl	10cd0 <__errno_location@plt>
   1b0e8:	mov	r3, r0
   1b0ec:	ldr	r3, [r3]
   1b0f0:	str	r3, [fp, #-16]
   1b0f4:	ldr	r0, [fp, #-8]
   1b0f8:	bl	10da8 <close@plt>
   1b0fc:	bl	10cd0 <__errno_location@plt>
   1b100:	mov	r2, r0
   1b104:	ldr	r3, [fp, #-16]
   1b108:	str	r3, [r2]
   1b10c:	mvn	r3, #0
   1b110:	str	r3, [fp, #-8]
   1b114:	ldr	r3, [fp, #-8]
   1b118:	mov	r0, r3
   1b11c:	sub	sp, fp, #4
   1b120:	pop	{fp, pc}
   1b124:	andeq	ip, r2, r0, asr r1
   1b128:	andeq	r0, r0, r6, lsl #8
   1b12c:	push	{r1, r2, r3}
   1b130:	push	{fp, lr}
   1b134:	add	fp, sp, #4
   1b138:	sub	sp, sp, #20
   1b13c:	str	r0, [fp, #-20]	; 0xffffffec
   1b140:	mov	r3, #0
   1b144:	str	r3, [fp, #-12]
   1b148:	ldr	r3, [fp, #4]
   1b14c:	and	r3, r3, #64	; 0x40
   1b150:	cmp	r3, #0
   1b154:	beq	1b174 <__assert_fail@plt+0xa39c>
   1b158:	add	r3, fp, #8
   1b15c:	str	r3, [fp, #-16]
   1b160:	ldr	r3, [fp, #-16]
   1b164:	add	r2, r3, #4
   1b168:	str	r2, [fp, #-16]
   1b16c:	ldr	r3, [r3]
   1b170:	str	r3, [fp, #-12]
   1b174:	ldr	r2, [fp, #-12]
   1b178:	ldr	r1, [fp, #4]
   1b17c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b180:	bl	10c4c <open64@plt>
   1b184:	mov	r3, r0
   1b188:	mov	r0, r3
   1b18c:	bl	1a644 <__assert_fail@plt+0x986c>
   1b190:	mov	r3, r0
   1b194:	mov	r0, r3
   1b198:	sub	sp, fp, #4
   1b19c:	pop	{fp, lr}
   1b1a0:	add	sp, sp, #12
   1b1a4:	bx	lr
   1b1a8:	push	{fp, lr}
   1b1ac:	add	fp, sp, #4
   1b1b0:	sub	sp, sp, #8
   1b1b4:	str	r0, [fp, #-8]
   1b1b8:	mov	r2, #3
   1b1bc:	mov	r1, #0
   1b1c0:	ldr	r0, [fp, #-8]
   1b1c4:	bl	1adac <__assert_fail@plt+0x9fd4>
   1b1c8:	mov	r3, r0
   1b1cc:	mov	r0, r3
   1b1d0:	sub	sp, fp, #4
   1b1d4:	pop	{fp, pc}
   1b1d8:	subs	r2, r1, #1
   1b1dc:	bxeq	lr
   1b1e0:	bcc	1b3b8 <__assert_fail@plt+0xa5e0>
   1b1e4:	cmp	r0, r1
   1b1e8:	bls	1b39c <__assert_fail@plt+0xa5c4>
   1b1ec:	tst	r1, r2
   1b1f0:	beq	1b3a8 <__assert_fail@plt+0xa5d0>
   1b1f4:	clz	r3, r0
   1b1f8:	clz	r2, r1
   1b1fc:	sub	r3, r2, r3
   1b200:	rsbs	r3, r3, #31
   1b204:	addne	r3, r3, r3, lsl #1
   1b208:	mov	r2, #0
   1b20c:	addne	pc, pc, r3, lsl #2
   1b210:	nop			; (mov r0, r0)
   1b214:	cmp	r0, r1, lsl #31
   1b218:	adc	r2, r2, r2
   1b21c:	subcs	r0, r0, r1, lsl #31
   1b220:	cmp	r0, r1, lsl #30
   1b224:	adc	r2, r2, r2
   1b228:	subcs	r0, r0, r1, lsl #30
   1b22c:	cmp	r0, r1, lsl #29
   1b230:	adc	r2, r2, r2
   1b234:	subcs	r0, r0, r1, lsl #29
   1b238:	cmp	r0, r1, lsl #28
   1b23c:	adc	r2, r2, r2
   1b240:	subcs	r0, r0, r1, lsl #28
   1b244:	cmp	r0, r1, lsl #27
   1b248:	adc	r2, r2, r2
   1b24c:	subcs	r0, r0, r1, lsl #27
   1b250:	cmp	r0, r1, lsl #26
   1b254:	adc	r2, r2, r2
   1b258:	subcs	r0, r0, r1, lsl #26
   1b25c:	cmp	r0, r1, lsl #25
   1b260:	adc	r2, r2, r2
   1b264:	subcs	r0, r0, r1, lsl #25
   1b268:	cmp	r0, r1, lsl #24
   1b26c:	adc	r2, r2, r2
   1b270:	subcs	r0, r0, r1, lsl #24
   1b274:	cmp	r0, r1, lsl #23
   1b278:	adc	r2, r2, r2
   1b27c:	subcs	r0, r0, r1, lsl #23
   1b280:	cmp	r0, r1, lsl #22
   1b284:	adc	r2, r2, r2
   1b288:	subcs	r0, r0, r1, lsl #22
   1b28c:	cmp	r0, r1, lsl #21
   1b290:	adc	r2, r2, r2
   1b294:	subcs	r0, r0, r1, lsl #21
   1b298:	cmp	r0, r1, lsl #20
   1b29c:	adc	r2, r2, r2
   1b2a0:	subcs	r0, r0, r1, lsl #20
   1b2a4:	cmp	r0, r1, lsl #19
   1b2a8:	adc	r2, r2, r2
   1b2ac:	subcs	r0, r0, r1, lsl #19
   1b2b0:	cmp	r0, r1, lsl #18
   1b2b4:	adc	r2, r2, r2
   1b2b8:	subcs	r0, r0, r1, lsl #18
   1b2bc:	cmp	r0, r1, lsl #17
   1b2c0:	adc	r2, r2, r2
   1b2c4:	subcs	r0, r0, r1, lsl #17
   1b2c8:	cmp	r0, r1, lsl #16
   1b2cc:	adc	r2, r2, r2
   1b2d0:	subcs	r0, r0, r1, lsl #16
   1b2d4:	cmp	r0, r1, lsl #15
   1b2d8:	adc	r2, r2, r2
   1b2dc:	subcs	r0, r0, r1, lsl #15
   1b2e0:	cmp	r0, r1, lsl #14
   1b2e4:	adc	r2, r2, r2
   1b2e8:	subcs	r0, r0, r1, lsl #14
   1b2ec:	cmp	r0, r1, lsl #13
   1b2f0:	adc	r2, r2, r2
   1b2f4:	subcs	r0, r0, r1, lsl #13
   1b2f8:	cmp	r0, r1, lsl #12
   1b2fc:	adc	r2, r2, r2
   1b300:	subcs	r0, r0, r1, lsl #12
   1b304:	cmp	r0, r1, lsl #11
   1b308:	adc	r2, r2, r2
   1b30c:	subcs	r0, r0, r1, lsl #11
   1b310:	cmp	r0, r1, lsl #10
   1b314:	adc	r2, r2, r2
   1b318:	subcs	r0, r0, r1, lsl #10
   1b31c:	cmp	r0, r1, lsl #9
   1b320:	adc	r2, r2, r2
   1b324:	subcs	r0, r0, r1, lsl #9
   1b328:	cmp	r0, r1, lsl #8
   1b32c:	adc	r2, r2, r2
   1b330:	subcs	r0, r0, r1, lsl #8
   1b334:	cmp	r0, r1, lsl #7
   1b338:	adc	r2, r2, r2
   1b33c:	subcs	r0, r0, r1, lsl #7
   1b340:	cmp	r0, r1, lsl #6
   1b344:	adc	r2, r2, r2
   1b348:	subcs	r0, r0, r1, lsl #6
   1b34c:	cmp	r0, r1, lsl #5
   1b350:	adc	r2, r2, r2
   1b354:	subcs	r0, r0, r1, lsl #5
   1b358:	cmp	r0, r1, lsl #4
   1b35c:	adc	r2, r2, r2
   1b360:	subcs	r0, r0, r1, lsl #4
   1b364:	cmp	r0, r1, lsl #3
   1b368:	adc	r2, r2, r2
   1b36c:	subcs	r0, r0, r1, lsl #3
   1b370:	cmp	r0, r1, lsl #2
   1b374:	adc	r2, r2, r2
   1b378:	subcs	r0, r0, r1, lsl #2
   1b37c:	cmp	r0, r1, lsl #1
   1b380:	adc	r2, r2, r2
   1b384:	subcs	r0, r0, r1, lsl #1
   1b388:	cmp	r0, r1
   1b38c:	adc	r2, r2, r2
   1b390:	subcs	r0, r0, r1
   1b394:	mov	r0, r2
   1b398:	bx	lr
   1b39c:	moveq	r0, #1
   1b3a0:	movne	r0, #0
   1b3a4:	bx	lr
   1b3a8:	clz	r2, r1
   1b3ac:	rsb	r2, r2, #31
   1b3b0:	lsr	r0, r0, r2
   1b3b4:	bx	lr
   1b3b8:	cmp	r0, #0
   1b3bc:	mvnne	r0, #0
   1b3c0:	b	1b734 <__assert_fail@plt+0xa95c>
   1b3c4:	cmp	r1, #0
   1b3c8:	beq	1b3b8 <__assert_fail@plt+0xa5e0>
   1b3cc:	push	{r0, r1, lr}
   1b3d0:	bl	1b1d8 <__assert_fail@plt+0xa400>
   1b3d4:	pop	{r1, r2, lr}
   1b3d8:	mul	r3, r2, r0
   1b3dc:	sub	r1, r1, r3
   1b3e0:	bx	lr
   1b3e4:	cmp	r1, #0
   1b3e8:	beq	1b5f4 <__assert_fail@plt+0xa81c>
   1b3ec:	eor	ip, r0, r1
   1b3f0:	rsbmi	r1, r1, #0
   1b3f4:	subs	r2, r1, #1
   1b3f8:	beq	1b5c0 <__assert_fail@plt+0xa7e8>
   1b3fc:	movs	r3, r0
   1b400:	rsbmi	r3, r0, #0
   1b404:	cmp	r3, r1
   1b408:	bls	1b5cc <__assert_fail@plt+0xa7f4>
   1b40c:	tst	r1, r2
   1b410:	beq	1b5dc <__assert_fail@plt+0xa804>
   1b414:	clz	r2, r3
   1b418:	clz	r0, r1
   1b41c:	sub	r2, r0, r2
   1b420:	rsbs	r2, r2, #31
   1b424:	addne	r2, r2, r2, lsl #1
   1b428:	mov	r0, #0
   1b42c:	addne	pc, pc, r2, lsl #2
   1b430:	nop			; (mov r0, r0)
   1b434:	cmp	r3, r1, lsl #31
   1b438:	adc	r0, r0, r0
   1b43c:	subcs	r3, r3, r1, lsl #31
   1b440:	cmp	r3, r1, lsl #30
   1b444:	adc	r0, r0, r0
   1b448:	subcs	r3, r3, r1, lsl #30
   1b44c:	cmp	r3, r1, lsl #29
   1b450:	adc	r0, r0, r0
   1b454:	subcs	r3, r3, r1, lsl #29
   1b458:	cmp	r3, r1, lsl #28
   1b45c:	adc	r0, r0, r0
   1b460:	subcs	r3, r3, r1, lsl #28
   1b464:	cmp	r3, r1, lsl #27
   1b468:	adc	r0, r0, r0
   1b46c:	subcs	r3, r3, r1, lsl #27
   1b470:	cmp	r3, r1, lsl #26
   1b474:	adc	r0, r0, r0
   1b478:	subcs	r3, r3, r1, lsl #26
   1b47c:	cmp	r3, r1, lsl #25
   1b480:	adc	r0, r0, r0
   1b484:	subcs	r3, r3, r1, lsl #25
   1b488:	cmp	r3, r1, lsl #24
   1b48c:	adc	r0, r0, r0
   1b490:	subcs	r3, r3, r1, lsl #24
   1b494:	cmp	r3, r1, lsl #23
   1b498:	adc	r0, r0, r0
   1b49c:	subcs	r3, r3, r1, lsl #23
   1b4a0:	cmp	r3, r1, lsl #22
   1b4a4:	adc	r0, r0, r0
   1b4a8:	subcs	r3, r3, r1, lsl #22
   1b4ac:	cmp	r3, r1, lsl #21
   1b4b0:	adc	r0, r0, r0
   1b4b4:	subcs	r3, r3, r1, lsl #21
   1b4b8:	cmp	r3, r1, lsl #20
   1b4bc:	adc	r0, r0, r0
   1b4c0:	subcs	r3, r3, r1, lsl #20
   1b4c4:	cmp	r3, r1, lsl #19
   1b4c8:	adc	r0, r0, r0
   1b4cc:	subcs	r3, r3, r1, lsl #19
   1b4d0:	cmp	r3, r1, lsl #18
   1b4d4:	adc	r0, r0, r0
   1b4d8:	subcs	r3, r3, r1, lsl #18
   1b4dc:	cmp	r3, r1, lsl #17
   1b4e0:	adc	r0, r0, r0
   1b4e4:	subcs	r3, r3, r1, lsl #17
   1b4e8:	cmp	r3, r1, lsl #16
   1b4ec:	adc	r0, r0, r0
   1b4f0:	subcs	r3, r3, r1, lsl #16
   1b4f4:	cmp	r3, r1, lsl #15
   1b4f8:	adc	r0, r0, r0
   1b4fc:	subcs	r3, r3, r1, lsl #15
   1b500:	cmp	r3, r1, lsl #14
   1b504:	adc	r0, r0, r0
   1b508:	subcs	r3, r3, r1, lsl #14
   1b50c:	cmp	r3, r1, lsl #13
   1b510:	adc	r0, r0, r0
   1b514:	subcs	r3, r3, r1, lsl #13
   1b518:	cmp	r3, r1, lsl #12
   1b51c:	adc	r0, r0, r0
   1b520:	subcs	r3, r3, r1, lsl #12
   1b524:	cmp	r3, r1, lsl #11
   1b528:	adc	r0, r0, r0
   1b52c:	subcs	r3, r3, r1, lsl #11
   1b530:	cmp	r3, r1, lsl #10
   1b534:	adc	r0, r0, r0
   1b538:	subcs	r3, r3, r1, lsl #10
   1b53c:	cmp	r3, r1, lsl #9
   1b540:	adc	r0, r0, r0
   1b544:	subcs	r3, r3, r1, lsl #9
   1b548:	cmp	r3, r1, lsl #8
   1b54c:	adc	r0, r0, r0
   1b550:	subcs	r3, r3, r1, lsl #8
   1b554:	cmp	r3, r1, lsl #7
   1b558:	adc	r0, r0, r0
   1b55c:	subcs	r3, r3, r1, lsl #7
   1b560:	cmp	r3, r1, lsl #6
   1b564:	adc	r0, r0, r0
   1b568:	subcs	r3, r3, r1, lsl #6
   1b56c:	cmp	r3, r1, lsl #5
   1b570:	adc	r0, r0, r0
   1b574:	subcs	r3, r3, r1, lsl #5
   1b578:	cmp	r3, r1, lsl #4
   1b57c:	adc	r0, r0, r0
   1b580:	subcs	r3, r3, r1, lsl #4
   1b584:	cmp	r3, r1, lsl #3
   1b588:	adc	r0, r0, r0
   1b58c:	subcs	r3, r3, r1, lsl #3
   1b590:	cmp	r3, r1, lsl #2
   1b594:	adc	r0, r0, r0
   1b598:	subcs	r3, r3, r1, lsl #2
   1b59c:	cmp	r3, r1, lsl #1
   1b5a0:	adc	r0, r0, r0
   1b5a4:	subcs	r3, r3, r1, lsl #1
   1b5a8:	cmp	r3, r1
   1b5ac:	adc	r0, r0, r0
   1b5b0:	subcs	r3, r3, r1
   1b5b4:	cmp	ip, #0
   1b5b8:	rsbmi	r0, r0, #0
   1b5bc:	bx	lr
   1b5c0:	teq	ip, r0
   1b5c4:	rsbmi	r0, r0, #0
   1b5c8:	bx	lr
   1b5cc:	movcc	r0, #0
   1b5d0:	asreq	r0, ip, #31
   1b5d4:	orreq	r0, r0, #1
   1b5d8:	bx	lr
   1b5dc:	clz	r2, r1
   1b5e0:	rsb	r2, r2, #31
   1b5e4:	cmp	ip, #0
   1b5e8:	lsr	r0, r3, r2
   1b5ec:	rsbmi	r0, r0, #0
   1b5f0:	bx	lr
   1b5f4:	cmp	r0, #0
   1b5f8:	mvngt	r0, #-2147483648	; 0x80000000
   1b5fc:	movlt	r0, #-2147483648	; 0x80000000
   1b600:	b	1b734 <__assert_fail@plt+0xa95c>
   1b604:	cmp	r1, #0
   1b608:	beq	1b5f4 <__assert_fail@plt+0xa81c>
   1b60c:	push	{r0, r1, lr}
   1b610:	bl	1b3ec <__assert_fail@plt+0xa614>
   1b614:	pop	{r1, r2, lr}
   1b618:	mul	r3, r2, r0
   1b61c:	sub	r1, r1, r3
   1b620:	bx	lr
   1b624:	cmp	r3, #0
   1b628:	cmpeq	r2, #0
   1b62c:	bne	1b650 <__assert_fail@plt+0xa878>
   1b630:	cmp	r1, #0
   1b634:	movlt	r1, #-2147483648	; 0x80000000
   1b638:	movlt	r0, #0
   1b63c:	blt	1b64c <__assert_fail@plt+0xa874>
   1b640:	cmpeq	r0, #0
   1b644:	mvnne	r1, #-2147483648	; 0x80000000
   1b648:	mvnne	r0, #0
   1b64c:	b	1b734 <__assert_fail@plt+0xa95c>
   1b650:	sub	sp, sp, #8
   1b654:	push	{sp, lr}
   1b658:	cmp	r1, #0
   1b65c:	blt	1b67c <__assert_fail@plt+0xa8a4>
   1b660:	cmp	r3, #0
   1b664:	blt	1b6b0 <__assert_fail@plt+0xa8d8>
   1b668:	bl	1b744 <__assert_fail@plt+0xa96c>
   1b66c:	ldr	lr, [sp, #4]
   1b670:	add	sp, sp, #8
   1b674:	pop	{r2, r3}
   1b678:	bx	lr
   1b67c:	rsbs	r0, r0, #0
   1b680:	sbc	r1, r1, r1, lsl #1
   1b684:	cmp	r3, #0
   1b688:	blt	1b6d4 <__assert_fail@plt+0xa8fc>
   1b68c:	bl	1b744 <__assert_fail@plt+0xa96c>
   1b690:	ldr	lr, [sp, #4]
   1b694:	add	sp, sp, #8
   1b698:	pop	{r2, r3}
   1b69c:	rsbs	r0, r0, #0
   1b6a0:	sbc	r1, r1, r1, lsl #1
   1b6a4:	rsbs	r2, r2, #0
   1b6a8:	sbc	r3, r3, r3, lsl #1
   1b6ac:	bx	lr
   1b6b0:	rsbs	r2, r2, #0
   1b6b4:	sbc	r3, r3, r3, lsl #1
   1b6b8:	bl	1b744 <__assert_fail@plt+0xa96c>
   1b6bc:	ldr	lr, [sp, #4]
   1b6c0:	add	sp, sp, #8
   1b6c4:	pop	{r2, r3}
   1b6c8:	rsbs	r0, r0, #0
   1b6cc:	sbc	r1, r1, r1, lsl #1
   1b6d0:	bx	lr
   1b6d4:	rsbs	r2, r2, #0
   1b6d8:	sbc	r3, r3, r3, lsl #1
   1b6dc:	bl	1b744 <__assert_fail@plt+0xa96c>
   1b6e0:	ldr	lr, [sp, #4]
   1b6e4:	add	sp, sp, #8
   1b6e8:	pop	{r2, r3}
   1b6ec:	rsbs	r2, r2, #0
   1b6f0:	sbc	r3, r3, r3, lsl #1
   1b6f4:	bx	lr
   1b6f8:	cmp	r3, #0
   1b6fc:	cmpeq	r2, #0
   1b700:	bne	1b718 <__assert_fail@plt+0xa940>
   1b704:	cmp	r1, #0
   1b708:	cmpeq	r0, #0
   1b70c:	mvnne	r1, #0
   1b710:	mvnne	r0, #0
   1b714:	b	1b734 <__assert_fail@plt+0xa95c>
   1b718:	sub	sp, sp, #8
   1b71c:	push	{sp, lr}
   1b720:	bl	1b744 <__assert_fail@plt+0xa96c>
   1b724:	ldr	lr, [sp, #4]
   1b728:	add	sp, sp, #8
   1b72c:	pop	{r2, r3}
   1b730:	bx	lr
   1b734:	push	{r1, lr}
   1b738:	mov	r0, #8
   1b73c:	bl	10b74 <raise@plt>
   1b740:	pop	{r1, pc}
   1b744:	cmp	r1, r3
   1b748:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b74c:	cmpeq	r0, r2
   1b750:	mov	r4, r0
   1b754:	mov	r5, r1
   1b758:	ldr	r9, [sp, #28]
   1b75c:	movcc	r0, #0
   1b760:	movcc	r1, #0
   1b764:	bcc	1b85c <__assert_fail@plt+0xaa84>
   1b768:	cmp	r3, #0
   1b76c:	clzeq	ip, r2
   1b770:	clzne	ip, r3
   1b774:	addeq	ip, ip, #32
   1b778:	cmp	r5, #0
   1b77c:	clzeq	r1, r4
   1b780:	addeq	r1, r1, #32
   1b784:	clzne	r1, r5
   1b788:	sub	ip, ip, r1
   1b78c:	sub	lr, ip, #32
   1b790:	lsl	r7, r3, ip
   1b794:	rsb	r8, ip, #32
   1b798:	orr	r7, r7, r2, lsl lr
   1b79c:	orr	r7, r7, r2, lsr r8
   1b7a0:	lsl	r6, r2, ip
   1b7a4:	cmp	r5, r7
   1b7a8:	cmpeq	r4, r6
   1b7ac:	movcc	r0, #0
   1b7b0:	movcc	r1, #0
   1b7b4:	bcc	1b7d0 <__assert_fail@plt+0xa9f8>
   1b7b8:	mov	r3, #1
   1b7bc:	subs	r4, r4, r6
   1b7c0:	lsl	r1, r3, lr
   1b7c4:	lsl	r0, r3, ip
   1b7c8:	orr	r1, r1, r3, lsr r8
   1b7cc:	sbc	r5, r5, r7
   1b7d0:	cmp	ip, #0
   1b7d4:	beq	1b85c <__assert_fail@plt+0xaa84>
   1b7d8:	lsrs	r3, r7, #1
   1b7dc:	rrx	r2, r6
   1b7e0:	mov	r6, ip
   1b7e4:	b	1b808 <__assert_fail@plt+0xaa30>
   1b7e8:	subs	r4, r4, r2
   1b7ec:	sbc	r5, r5, r3
   1b7f0:	adds	r4, r4, r4
   1b7f4:	adc	r5, r5, r5
   1b7f8:	adds	r4, r4, #1
   1b7fc:	adc	r5, r5, #0
   1b800:	subs	r6, r6, #1
   1b804:	beq	1b824 <__assert_fail@plt+0xaa4c>
   1b808:	cmp	r5, r3
   1b80c:	cmpeq	r4, r2
   1b810:	bcs	1b7e8 <__assert_fail@plt+0xaa10>
   1b814:	adds	r4, r4, r4
   1b818:	adc	r5, r5, r5
   1b81c:	subs	r6, r6, #1
   1b820:	bne	1b808 <__assert_fail@plt+0xaa30>
   1b824:	lsr	r6, r4, ip
   1b828:	lsr	r7, r5, ip
   1b82c:	orr	r6, r6, r5, lsl r8
   1b830:	adds	r2, r0, r4
   1b834:	orr	r6, r6, r5, lsr lr
   1b838:	adc	r3, r1, r5
   1b83c:	lsl	r1, r7, ip
   1b840:	orr	r1, r1, r6, lsl lr
   1b844:	lsl	r0, r6, ip
   1b848:	orr	r1, r1, r6, lsr r8
   1b84c:	subs	r0, r2, r0
   1b850:	mov	r4, r6
   1b854:	mov	r5, r7
   1b858:	sbc	r1, r3, r1
   1b85c:	cmp	r9, #0
   1b860:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1b864:	strd	r4, [r9]
   1b868:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b86c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b870:	mov	r7, r0
   1b874:	ldr	r6, [pc, #72]	; 1b8c4 <__assert_fail@plt+0xaaec>
   1b878:	ldr	r5, [pc, #72]	; 1b8c8 <__assert_fail@plt+0xaaf0>
   1b87c:	add	r6, pc, r6
   1b880:	add	r5, pc, r5
   1b884:	sub	r6, r6, r5
   1b888:	mov	r8, r1
   1b88c:	mov	r9, r2
   1b890:	bl	10b3c <fstatfs64@plt-0x20>
   1b894:	asrs	r6, r6, #2
   1b898:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b89c:	mov	r4, #0
   1b8a0:	add	r4, r4, #1
   1b8a4:	ldr	r3, [r5], #4
   1b8a8:	mov	r2, r9
   1b8ac:	mov	r1, r8
   1b8b0:	mov	r0, r7
   1b8b4:	blx	r3
   1b8b8:	cmp	r6, r4
   1b8bc:	bne	1b8a0 <__assert_fail@plt+0xaac8>
   1b8c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b8c4:	andeq	r0, r1, ip, lsl #13
   1b8c8:	andeq	r0, r1, r4, lsl #13
   1b8cc:	bx	lr
   1b8d0:	mov	r2, r1
   1b8d4:	mov	r1, r0
   1b8d8:	mov	r0, #3
   1b8dc:	b	10d78 <__xstat64@plt>
   1b8e0:	mov	r2, r1
   1b8e4:	mov	r1, r0
   1b8e8:	mov	r0, #3
   1b8ec:	b	10c10 <__fxstat64@plt>
   1b8f0:	mov	r2, r1
   1b8f4:	mov	r1, r0
   1b8f8:	mov	r0, #3
   1b8fc:	b	10db4 <__lxstat64@plt>
   1b900:	push	{lr}		; (str lr, [sp, #-4]!)
   1b904:	sub	sp, sp, #12
   1b908:	str	r3, [sp]
   1b90c:	mov	r3, r2
   1b910:	mov	r2, r1
   1b914:	mov	r1, r0
   1b918:	mov	r0, #3
   1b91c:	bl	10c04 <__fxstatat64@plt>
   1b920:	add	sp, sp, #12
   1b924:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001b928 <.fini>:
   1b928:	push	{r3, lr}
   1b92c:	pop	{r3, pc}
