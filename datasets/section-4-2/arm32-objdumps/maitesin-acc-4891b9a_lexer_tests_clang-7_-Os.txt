
../repos/maitesin-acc-4891b9a/bin/lexer_tests:     file format elf32-littlearm


Disassembly of section .init:

000125d8 <.init>:
   125d8:	push	{r3, lr}
   125dc:	bl	12824 <_start@@Base+0x3c>
   125e0:	pop	{r3, pc}

Disassembly of section .plt:

000125e4 <fdopen@plt-0x14>:
   125e4:	push	{lr}		; (str lr, [sp, #-4]!)
   125e8:	ldr	lr, [pc, #4]	; 125f4 <fdopen@plt-0x4>
   125ec:	add	lr, pc, lr
   125f0:	ldr	pc, [lr, #8]!
   125f4:	andeq	ip, r1, ip, lsl #20

000125f8 <fdopen@plt>:
   125f8:	add	ip, pc, #0, 12
   125fc:	add	ip, ip, #28, 20	; 0x1c000
   12600:	ldr	pc, [ip, #2572]!	; 0xa0c

00012604 <strtol@plt>:
   12604:	add	ip, pc, #0, 12
   12608:	add	ip, ip, #28, 20	; 0x1c000
   1260c:	ldr	pc, [ip, #2564]!	; 0xa04

00012610 <longjmp@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #28, 20	; 0x1c000
   12618:	ldr	pc, [ip, #2556]!	; 0x9fc

0001261c <fflush@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #28, 20	; 0x1c000
   12624:	ldr	pc, [ip, #2548]!	; 0x9f4

00012628 <_setjmp@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #28, 20	; 0x1c000
   12630:	ldr	pc, [ip, #2540]!	; 0x9ec

00012634 <free@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #28, 20	; 0x1c000
   1263c:	ldr	pc, [ip, #2532]!	; 0x9e4

00012640 <__isnanf@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #28, 20	; 0x1c000
   12648:	ldr	pc, [ip, #2524]!	; 0x9dc

0001264c <memcpy@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #28, 20	; 0x1c000
   12654:	ldr	pc, [ip, #2516]!	; 0x9d4

00012658 <mmap64@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #28, 20	; 0x1c000
   12660:	ldr	pc, [ip, #2508]!	; 0x9cc

00012664 <ftell@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #28, 20	; 0x1c000
   1266c:	ldr	pc, [ip, #2500]!	; 0x9c4

00012670 <uname@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #28, 20	; 0x1c000
   12678:	ldr	pc, [ip, #2492]!	; 0x9bc

0001267c <strdup@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #28, 20	; 0x1c000
   12684:	ldr	pc, [ip, #2484]!	; 0x9b4

00012688 <__isinff@plt>:
   12688:	add	ip, pc, #0, 12
   1268c:	add	ip, ip, #28, 20	; 0x1c000
   12690:	ldr	pc, [ip, #2476]!	; 0x9ac

00012694 <realloc@plt>:
   12694:	add	ip, pc, #0, 12
   12698:	add	ip, ip, #28, 20	; 0x1c000
   1269c:	ldr	pc, [ip, #2468]!	; 0x9a4

000126a0 <fwrite@plt>:
   126a0:	add	ip, pc, #0, 12
   126a4:	add	ip, ip, #28, 20	; 0x1c000
   126a8:	ldr	pc, [ip, #2460]!	; 0x99c

000126ac <open64@plt>:
   126ac:	add	ip, pc, #0, 12
   126b0:	add	ip, ip, #28, 20	; 0x1c000
   126b4:	ldr	pc, [ip, #2452]!	; 0x994

000126b8 <getenv@plt>:
   126b8:	add	ip, pc, #0, 12
   126bc:	add	ip, ip, #28, 20	; 0x1c000
   126c0:	ldr	pc, [ip, #2444]!	; 0x98c

000126c4 <malloc@plt>:
   126c4:	add	ip, pc, #0, 12
   126c8:	add	ip, ip, #28, 20	; 0x1c000
   126cc:	ldr	pc, [ip, #2436]!	; 0x984

000126d0 <__libc_start_main@plt>:
   126d0:	add	ip, pc, #0, 12
   126d4:	add	ip, ip, #28, 20	; 0x1c000
   126d8:	ldr	pc, [ip, #2428]!	; 0x97c

000126dc <strerror@plt>:
   126dc:	add	ip, pc, #0, 12
   126e0:	add	ip, ip, #28, 20	; 0x1c000
   126e4:	ldr	pc, [ip, #2420]!	; 0x974

000126e8 <__gmon_start__@plt>:
   126e8:	add	ip, pc, #0, 12
   126ec:	add	ip, ip, #28, 20	; 0x1c000
   126f0:	ldr	pc, [ip, #2412]!	; 0x96c

000126f4 <getpid@plt>:
   126f4:	add	ip, pc, #0, 12
   126f8:	add	ip, ip, #28, 20	; 0x1c000
   126fc:	ldr	pc, [ip, #2404]!	; 0x964

00012700 <exit@plt>:
   12700:	add	ip, pc, #0, 12
   12704:	add	ip, ip, #28, 20	; 0x1c000
   12708:	ldr	pc, [ip, #2396]!	; 0x95c

0001270c <strlen@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #28, 20	; 0x1c000
   12714:	ldr	pc, [ip, #2388]!	; 0x954

00012718 <strchr@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #28, 20	; 0x1c000
   12720:	ldr	pc, [ip, #2380]!	; 0x94c

00012724 <fprintf@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #28, 20	; 0x1c000
   1272c:	ldr	pc, [ip, #2372]!	; 0x944

00012730 <__errno_location@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #28, 20	; 0x1c000
   12738:	ldr	pc, [ip, #2364]!	; 0x93c

0001273c <__cxa_atexit@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #28, 20	; 0x1c000
   12744:	ldr	pc, [ip, #2356]!	; 0x934

00012748 <mkdir@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #28, 20	; 0x1c000
   12750:	ldr	pc, [ip, #2348]!	; 0x92c

00012754 <memset@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #28, 20	; 0x1c000
   1275c:	ldr	pc, [ip, #2340]!	; 0x924

00012760 <putchar@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #28, 20	; 0x1c000
   12768:	ldr	pc, [ip, #2332]!	; 0x91c

0001276c <strncpy@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #28, 20	; 0x1c000
   12774:	ldr	pc, [ip, #2324]!	; 0x914

00012778 <prctl@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #28, 20	; 0x1c000
   12780:	ldr	pc, [ip, #2316]!	; 0x90c

00012784 <fclose@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #28, 20	; 0x1c000
   1278c:	ldr	pc, [ip, #2308]!	; 0x904

00012790 <munmap@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #28, 20	; 0x1c000
   12798:	ldr	pc, [ip, #2300]!	; 0x8fc

0001279c <fcntl64@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #28, 20	; 0x1c000
   127a4:	ldr	pc, [ip, #2292]!	; 0x8f4

000127a8 <strrchr@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #28, 20	; 0x1c000
   127b0:	ldr	pc, [ip, #2284]!	; 0x8ec

000127b4 <msync@plt>:
   127b4:	add	ip, pc, #0, 12
   127b8:	add	ip, ip, #28, 20	; 0x1c000
   127bc:	ldr	pc, [ip, #2276]!	; 0x8e4

000127c0 <atoi@plt>:
   127c0:	add	ip, pc, #0, 12
   127c4:	add	ip, ip, #28, 20	; 0x1c000
   127c8:	ldr	pc, [ip, #2268]!	; 0x8dc

000127cc <fseek@plt>:
   127cc:	add	ip, pc, #0, 12
   127d0:	add	ip, ip, #28, 20	; 0x1c000
   127d4:	ldr	pc, [ip, #2260]!	; 0x8d4

000127d8 <abort@plt>:
   127d8:	add	ip, pc, #0, 12
   127dc:	add	ip, ip, #28, 20	; 0x1c000
   127e0:	ldr	pc, [ip, #2252]!	; 0x8cc

Disassembly of section .text:

000127e8 <_start@@Base>:
   127e8:	mov	fp, #0
   127ec:	mov	lr, #0
   127f0:	pop	{r1}		; (ldr r1, [sp], #4)
   127f4:	mov	r2, sp
   127f8:	push	{r2}		; (str r2, [sp, #-4]!)
   127fc:	push	{r0}		; (str r0, [sp, #-4]!)
   12800:	ldr	ip, [pc, #16]	; 12818 <_start@@Base+0x30>
   12804:	push	{ip}		; (str ip, [sp, #-4]!)
   12808:	ldr	r0, [pc, #12]	; 1281c <_start@@Base+0x34>
   1280c:	ldr	r3, [pc, #12]	; 12820 <_start@@Base+0x38>
   12810:	bl	126d0 <__libc_start_main@plt>
   12814:	bl	127d8 <abort@plt>
   12818:	andeq	sp, r1, ip, ror #1
   1281c:	ldrdeq	r3, [r1], -r0
   12820:	andeq	sp, r1, ip, lsl #1
   12824:	ldr	r3, [pc, #20]	; 12840 <_start@@Base+0x58>
   12828:	ldr	r2, [pc, #20]	; 12844 <_start@@Base+0x5c>
   1282c:	add	r3, pc, r3
   12830:	ldr	r2, [r3, r2]
   12834:	cmp	r2, #0
   12838:	bxeq	lr
   1283c:	b	126e8 <__gmon_start__@plt>
   12840:	andeq	ip, r1, ip, asr #15
   12844:	andeq	r0, r0, r0, asr #1
   12848:	ldr	r0, [pc, #24]	; 12868 <_start@@Base+0x80>
   1284c:	ldr	r3, [pc, #24]	; 1286c <_start@@Base+0x84>
   12850:	cmp	r3, r0
   12854:	bxeq	lr
   12858:	ldr	r3, [pc, #16]	; 12870 <_start@@Base+0x88>
   1285c:	cmp	r3, #0
   12860:	bxeq	lr
   12864:	bx	r3
   12868:	andeq	pc, r2, r0, ror #1
   1286c:	andeq	pc, r2, r0, ror #1
   12870:	andeq	r0, r0, r0
   12874:	ldr	r0, [pc, #36]	; 128a0 <_start@@Base+0xb8>
   12878:	ldr	r1, [pc, #36]	; 128a4 <_start@@Base+0xbc>
   1287c:	sub	r1, r1, r0
   12880:	asr	r1, r1, #2
   12884:	add	r1, r1, r1, lsr #31
   12888:	asrs	r1, r1, #1
   1288c:	bxeq	lr
   12890:	ldr	r3, [pc, #16]	; 128a8 <_start@@Base+0xc0>
   12894:	cmp	r3, #0
   12898:	bxeq	lr
   1289c:	bx	r3
   128a0:	andeq	pc, r2, r0, ror #1
   128a4:	andeq	pc, r2, r0, ror #1
   128a8:	andeq	r0, r0, r0
   128ac:	push	{r4, lr}
   128b0:	ldr	r4, [pc, #24]	; 128d0 <_start@@Base+0xe8>
   128b4:	ldrb	r3, [r4]
   128b8:	cmp	r3, #0
   128bc:	popne	{r4, pc}
   128c0:	bl	12848 <_start@@Base+0x60>
   128c4:	mov	r3, #1
   128c8:	strb	r3, [r4]
   128cc:	pop	{r4, pc}
   128d0:	andeq	pc, r2, r4, ror #1
   128d4:	b	12874 <_start@@Base+0x8c>

000128d8 <simple_file_only_main@@Base>:
   128d8:	push	{r4, r5, fp, lr}
   128dc:	add	fp, sp, #8
   128e0:	sub	sp, sp, #16
   128e4:	movw	r0, #61680	; 0xf0f0
   128e8:	add	r1, pc, #376	; 0x178
   128ec:	add	r4, sp, #4
   128f0:	movt	r0, #2
   128f4:	vld1.64	{d16-d17}, [r1]
   128f8:	movw	r1, #53524	; 0xd114
   128fc:	vld1.64	{d18-d19}, [r0 :128]
   12900:	movt	r1, #1
   12904:	vadd.i64	q8, q9, q8
   12908:	vst1.64	{d16-d17}, [r0 :128]
   1290c:	mov	r0, r4
   12910:	bl	187c0 <init_lexer@@Base>
   12914:	mov	r0, r4
   12918:	bl	18a50 <next@@Base>
   1291c:	ldr	r1, [r0]
   12920:	mov	r5, #148	; 0x94
   12924:	mov	r0, #0
   12928:	mov	r2, #0
   1292c:	mov	r3, #23
   12930:	str	r5, [sp]
   12934:	bl	15298 <UnityAssertEqualNumber@@Base>
   12938:	mov	r0, r4
   1293c:	bl	18a50 <next@@Base>
   12940:	ldr	r1, [r0]
   12944:	mov	r0, #2
   12948:	mov	r2, #0
   1294c:	mov	r3, #25
   12950:	str	r5, [sp]
   12954:	bl	15298 <UnityAssertEqualNumber@@Base>
   12958:	mov	r0, r4
   1295c:	bl	18a50 <next@@Base>
   12960:	ldr	r1, [r0]
   12964:	mov	r0, #3
   12968:	mov	r2, #0
   1296c:	mov	r3, #27
   12970:	str	r5, [sp]
   12974:	bl	15298 <UnityAssertEqualNumber@@Base>
   12978:	mov	r0, r4
   1297c:	bl	18a50 <next@@Base>
   12980:	ldr	r1, [r0]
   12984:	mov	r0, #4
   12988:	mov	r2, #0
   1298c:	mov	r3, #29
   12990:	str	r5, [sp]
   12994:	bl	15298 <UnityAssertEqualNumber@@Base>
   12998:	mov	r0, r4
   1299c:	bl	18a50 <next@@Base>
   129a0:	ldr	r1, [r0]
   129a4:	mov	r0, #5
   129a8:	mov	r2, #0
   129ac:	mov	r3, #31
   129b0:	str	r5, [sp]
   129b4:	bl	15298 <UnityAssertEqualNumber@@Base>
   129b8:	mov	r0, r4
   129bc:	bl	18a50 <next@@Base>
   129c0:	ldr	r1, [r0]
   129c4:	mov	r0, #7
   129c8:	mov	r2, #0
   129cc:	mov	r3, #33	; 0x21
   129d0:	str	r5, [sp]
   129d4:	bl	15298 <UnityAssertEqualNumber@@Base>
   129d8:	mov	r0, r4
   129dc:	bl	18a50 <next@@Base>
   129e0:	ldr	r1, [r0]
   129e4:	mov	r0, #1
   129e8:	mov	r2, #0
   129ec:	mov	r3, #35	; 0x23
   129f0:	str	r5, [sp]
   129f4:	bl	15298 <UnityAssertEqualNumber@@Base>
   129f8:	mov	r0, r4
   129fc:	bl	18a50 <next@@Base>
   12a00:	ldr	r1, [r0]
   12a04:	mov	r0, #8
   12a08:	mov	r2, #0
   12a0c:	mov	r3, #37	; 0x25
   12a10:	str	r5, [sp]
   12a14:	bl	15298 <UnityAssertEqualNumber@@Base>
   12a18:	mov	r0, r4
   12a1c:	bl	18a50 <next@@Base>
   12a20:	ldr	r1, [r0]
   12a24:	mov	r0, #6
   12a28:	mov	r2, #0
   12a2c:	mov	r3, #39	; 0x27
   12a30:	str	r5, [sp]
   12a34:	bl	15298 <UnityAssertEqualNumber@@Base>
   12a38:	mov	r0, r4
   12a3c:	bl	18a50 <next@@Base>
   12a40:	ldr	r1, [r0]
   12a44:	mov	r0, #9
   12a48:	mov	r2, #0
   12a4c:	mov	r3, #41	; 0x29
   12a50:	str	r5, [sp]
   12a54:	bl	15298 <UnityAssertEqualNumber@@Base>
   12a58:	mov	r0, r4
   12a5c:	bl	18800 <destroy_lexer@@Base>
   12a60:	sub	sp, fp, #8
   12a64:	pop	{r4, r5, fp, pc}
   12a68:	andeq	r0, r0, r1
   12a6c:	andeq	r0, r0, r0
   12a70:	andeq	r0, r0, r1
   12a74:	andeq	r0, r0, r0

00012a78 <push_token_to_stack@@Base>:
   12a78:	push	{r4, r5, fp, lr}
   12a7c:	add	fp, sp, #8
   12a80:	sub	sp, sp, #16
   12a84:	movw	r0, #61696	; 0xf100
   12a88:	add	r1, pc, #120	; 0x78
   12a8c:	add	r4, sp, #4
   12a90:	movt	r0, #2
   12a94:	vld1.64	{d16-d17}, [r1]
   12a98:	movw	r1, #53524	; 0xd114
   12a9c:	vld1.64	{d18-d19}, [r0 :128]
   12aa0:	movt	r1, #1
   12aa4:	vadd.i64	q8, q9, q8
   12aa8:	vst1.64	{d16-d17}, [r0 :128]
   12aac:	mov	r0, r4
   12ab0:	bl	187c0 <init_lexer@@Base>
   12ab4:	mov	r0, #8
   12ab8:	bl	126c4 <malloc@plt>
   12abc:	mov	r5, r0
   12ac0:	mov	r0, r4
   12ac4:	mov	r1, r5
   12ac8:	bl	188d8 <push_back@@Base>
   12acc:	ldr	r0, [sp, #8]
   12ad0:	mov	r1, #148	; 0x94
   12ad4:	mov	r2, #0
   12ad8:	mov	r3, #62	; 0x3e
   12adc:	ldr	r0, [r0, #4]
   12ae0:	str	r1, [sp]
   12ae4:	mov	r1, r5
   12ae8:	bl	15298 <UnityAssertEqualNumber@@Base>
   12aec:	mov	r0, r4
   12af0:	bl	18800 <destroy_lexer@@Base>
   12af4:	mov	r0, r5
   12af8:	bl	12634 <free@plt>
   12afc:	sub	sp, fp, #8
   12b00:	pop	{r4, r5, fp, pc}
   12b04:	nop	{0}
   12b08:	andeq	r0, r0, r1
   12b0c:	andeq	r0, r0, r0
   12b10:	andeq	r0, r0, r1
   12b14:	andeq	r0, r0, r0

00012b18 <push_two_tokens_to_stack@@Base>:
   12b18:	push	{r4, r5, r6, r7, fp, lr}
   12b1c:	add	fp, sp, #16
   12b20:	sub	sp, sp, #16
   12b24:	movw	r0, #61712	; 0xf110
   12b28:	add	r1, pc, #176	; 0xb0
   12b2c:	add	r4, sp, #4
   12b30:	movt	r0, #2
   12b34:	vld1.64	{d16-d17}, [r1]
   12b38:	movw	r1, #53524	; 0xd114
   12b3c:	vld1.64	{d18-d19}, [r0 :128]
   12b40:	movt	r1, #1
   12b44:	vadd.i64	q8, q9, q8
   12b48:	vst1.64	{d16-d17}, [r0 :128]
   12b4c:	mov	r0, r4
   12b50:	bl	187c0 <init_lexer@@Base>
   12b54:	mov	r0, #8
   12b58:	bl	126c4 <malloc@plt>
   12b5c:	mov	r5, r0
   12b60:	mov	r0, #8
   12b64:	bl	126c4 <malloc@plt>
   12b68:	mov	r6, r0
   12b6c:	mov	r0, r4
   12b70:	mov	r1, r5
   12b74:	bl	188d8 <push_back@@Base>
   12b78:	ldr	r0, [sp, #8]
   12b7c:	mov	r7, #148	; 0x94
   12b80:	mov	r1, r5
   12b84:	mov	r2, #0
   12b88:	mov	r3, #86	; 0x56
   12b8c:	ldr	r0, [r0, #4]
   12b90:	str	r7, [sp]
   12b94:	bl	15298 <UnityAssertEqualNumber@@Base>
   12b98:	mov	r0, r4
   12b9c:	mov	r1, r6
   12ba0:	bl	188d8 <push_back@@Base>
   12ba4:	ldr	r0, [sp, #8]
   12ba8:	mov	r1, r6
   12bac:	mov	r2, #0
   12bb0:	mov	r3, #88	; 0x58
   12bb4:	ldr	r0, [r0, #4]
   12bb8:	str	r7, [sp]
   12bbc:	bl	15298 <UnityAssertEqualNumber@@Base>
   12bc0:	mov	r0, r4
   12bc4:	bl	18800 <destroy_lexer@@Base>
   12bc8:	mov	r0, r5
   12bcc:	bl	12634 <free@plt>
   12bd0:	mov	r0, r6
   12bd4:	bl	12634 <free@plt>
   12bd8:	sub	sp, fp, #16
   12bdc:	pop	{r4, r5, r6, r7, fp, pc}
   12be0:	andeq	r0, r0, r1
   12be4:	andeq	r0, r0, r0
   12be8:	andeq	r0, r0, r1
   12bec:	andeq	r0, r0, r0

00012bf0 <push_token_and_call_next@@Base>:
   12bf0:	push	{r4, r5, fp, lr}
   12bf4:	add	fp, sp, #8
   12bf8:	sub	sp, sp, #16
   12bfc:	movw	r0, #61728	; 0xf120
   12c00:	add	r1, pc, #120	; 0x78
   12c04:	add	r4, sp, #4
   12c08:	movt	r0, #2
   12c0c:	vld1.64	{d16-d17}, [r1]
   12c10:	movw	r1, #53524	; 0xd114
   12c14:	vld1.64	{d18-d19}, [r0 :128]
   12c18:	movt	r1, #1
   12c1c:	vadd.i64	q8, q9, q8
   12c20:	vst1.64	{d16-d17}, [r0 :128]
   12c24:	mov	r0, r4
   12c28:	bl	187c0 <init_lexer@@Base>
   12c2c:	mov	r0, #8
   12c30:	bl	126c4 <malloc@plt>
   12c34:	mov	r5, r0
   12c38:	mov	r0, r4
   12c3c:	mov	r1, r5
   12c40:	bl	188d8 <push_back@@Base>
   12c44:	mov	r0, r4
   12c48:	bl	18a50 <next@@Base>
   12c4c:	mov	r1, r0
   12c50:	mov	r0, #148	; 0x94
   12c54:	mov	r2, #0
   12c58:	mov	r3, #113	; 0x71
   12c5c:	str	r0, [sp]
   12c60:	mov	r0, r5
   12c64:	bl	15298 <UnityAssertEqualNumber@@Base>
   12c68:	mov	r0, r4
   12c6c:	bl	18800 <destroy_lexer@@Base>
   12c70:	mov	r0, r5
   12c74:	bl	12634 <free@plt>
   12c78:	sub	sp, fp, #8
   12c7c:	pop	{r4, r5, fp, pc}
   12c80:	andeq	r0, r0, r1
   12c84:	andeq	r0, r0, r0
   12c88:	andeq	r0, r0, r1
   12c8c:	andeq	r0, r0, r0

00012c90 <if_without_else@@Base>:
   12c90:	push	{r4, r5, fp, lr}
   12c94:	add	fp, sp, #8
   12c98:	sub	sp, sp, #16
   12c9c:	movw	r0, #61744	; 0xf130
   12ca0:	add	r1, pc, #728	; 0x2d8
   12ca4:	add	r4, sp, #4
   12ca8:	movt	r0, #2
   12cac:	vld1.64	{d16-d17}, [r1]
   12cb0:	movw	r1, #53550	; 0xd12e
   12cb4:	vld1.64	{d18-d19}, [r0 :128]
   12cb8:	movt	r1, #1
   12cbc:	vadd.i64	q8, q9, q8
   12cc0:	vst1.64	{d16-d17}, [r0 :128]
   12cc4:	mov	r0, r4
   12cc8:	bl	187c0 <init_lexer@@Base>
   12ccc:	mov	r0, r4
   12cd0:	bl	18a50 <next@@Base>
   12cd4:	ldr	r1, [r0]
   12cd8:	mov	r5, #148	; 0x94
   12cdc:	mov	r0, #0
   12ce0:	mov	r2, #0
   12ce4:	mov	r3, #140	; 0x8c
   12ce8:	str	r5, [sp]
   12cec:	bl	15298 <UnityAssertEqualNumber@@Base>
   12cf0:	mov	r0, r4
   12cf4:	bl	18a50 <next@@Base>
   12cf8:	ldr	r1, [r0]
   12cfc:	mov	r0, #2
   12d00:	mov	r2, #0
   12d04:	mov	r3, #142	; 0x8e
   12d08:	str	r5, [sp]
   12d0c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12d10:	mov	r0, r4
   12d14:	bl	18a50 <next@@Base>
   12d18:	ldr	r1, [r0]
   12d1c:	mov	r0, #3
   12d20:	mov	r2, #0
   12d24:	mov	r3, #144	; 0x90
   12d28:	str	r5, [sp]
   12d2c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12d30:	mov	r0, r4
   12d34:	bl	18a50 <next@@Base>
   12d38:	ldr	r1, [r0]
   12d3c:	mov	r0, #4
   12d40:	mov	r2, #0
   12d44:	mov	r3, #146	; 0x92
   12d48:	str	r5, [sp]
   12d4c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12d50:	mov	r0, r4
   12d54:	bl	18a50 <next@@Base>
   12d58:	ldr	r1, [r0]
   12d5c:	mov	r0, #5
   12d60:	mov	r2, #0
   12d64:	mov	r3, #148	; 0x94
   12d68:	str	r5, [sp]
   12d6c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12d70:	mov	r0, r4
   12d74:	bl	18a50 <next@@Base>
   12d78:	ldr	r1, [r0]
   12d7c:	mov	r0, #10
   12d80:	mov	r2, #0
   12d84:	mov	r3, #150	; 0x96
   12d88:	str	r5, [sp]
   12d8c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12d90:	mov	r0, r4
   12d94:	bl	18a50 <next@@Base>
   12d98:	ldr	r1, [r0]
   12d9c:	mov	r0, #3
   12da0:	mov	r2, #0
   12da4:	mov	r3, #152	; 0x98
   12da8:	str	r5, [sp]
   12dac:	bl	15298 <UnityAssertEqualNumber@@Base>
   12db0:	mov	r0, r4
   12db4:	bl	18a50 <next@@Base>
   12db8:	ldr	r1, [r0]
   12dbc:	mov	r0, #1
   12dc0:	mov	r2, #0
   12dc4:	mov	r3, #154	; 0x9a
   12dc8:	str	r5, [sp]
   12dcc:	bl	15298 <UnityAssertEqualNumber@@Base>
   12dd0:	mov	r0, r4
   12dd4:	bl	18a50 <next@@Base>
   12dd8:	ldr	r1, [r0]
   12ddc:	mov	r0, #12
   12de0:	mov	r2, #0
   12de4:	mov	r3, #156	; 0x9c
   12de8:	str	r5, [sp]
   12dec:	bl	15298 <UnityAssertEqualNumber@@Base>
   12df0:	mov	r0, r4
   12df4:	bl	18a50 <next@@Base>
   12df8:	ldr	r1, [r0]
   12dfc:	mov	r0, #1
   12e00:	mov	r2, #0
   12e04:	mov	r3, #158	; 0x9e
   12e08:	str	r5, [sp]
   12e0c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12e10:	mov	r0, r4
   12e14:	bl	18a50 <next@@Base>
   12e18:	ldr	r1, [r0]
   12e1c:	mov	r0, #4
   12e20:	mov	r2, #0
   12e24:	mov	r3, #160	; 0xa0
   12e28:	str	r5, [sp]
   12e2c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12e30:	mov	r0, r4
   12e34:	bl	18a50 <next@@Base>
   12e38:	ldr	r1, [r0]
   12e3c:	mov	r0, #5
   12e40:	mov	r2, #0
   12e44:	mov	r3, #162	; 0xa2
   12e48:	str	r5, [sp]
   12e4c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12e50:	mov	r0, r4
   12e54:	bl	18a50 <next@@Base>
   12e58:	ldr	r1, [r0]
   12e5c:	mov	r0, #7
   12e60:	mov	r2, #0
   12e64:	mov	r3, #164	; 0xa4
   12e68:	str	r5, [sp]
   12e6c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12e70:	mov	r0, r4
   12e74:	bl	18a50 <next@@Base>
   12e78:	ldr	r1, [r0]
   12e7c:	mov	r0, #1
   12e80:	mov	r2, #0
   12e84:	mov	r3, #166	; 0xa6
   12e88:	str	r5, [sp]
   12e8c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12e90:	mov	r0, r4
   12e94:	bl	18a50 <next@@Base>
   12e98:	ldr	r1, [r0]
   12e9c:	mov	r0, #8
   12ea0:	mov	r2, #0
   12ea4:	mov	r3, #168	; 0xa8
   12ea8:	str	r5, [sp]
   12eac:	bl	15298 <UnityAssertEqualNumber@@Base>
   12eb0:	mov	r0, r4
   12eb4:	bl	18a50 <next@@Base>
   12eb8:	ldr	r1, [r0]
   12ebc:	mov	r0, #6
   12ec0:	mov	r2, #0
   12ec4:	mov	r3, #170	; 0xaa
   12ec8:	str	r5, [sp]
   12ecc:	bl	15298 <UnityAssertEqualNumber@@Base>
   12ed0:	mov	r0, r4
   12ed4:	bl	18a50 <next@@Base>
   12ed8:	ldr	r1, [r0]
   12edc:	mov	r0, #7
   12ee0:	mov	r2, #0
   12ee4:	mov	r3, #172	; 0xac
   12ee8:	str	r5, [sp]
   12eec:	bl	15298 <UnityAssertEqualNumber@@Base>
   12ef0:	mov	r0, r4
   12ef4:	bl	18a50 <next@@Base>
   12ef8:	ldr	r1, [r0]
   12efc:	mov	r0, #1
   12f00:	mov	r2, #0
   12f04:	mov	r3, #174	; 0xae
   12f08:	str	r5, [sp]
   12f0c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12f10:	mov	r0, r4
   12f14:	bl	18a50 <next@@Base>
   12f18:	ldr	r1, [r0]
   12f1c:	mov	r0, #8
   12f20:	mov	r2, #0
   12f24:	mov	r3, #176	; 0xb0
   12f28:	str	r5, [sp]
   12f2c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12f30:	mov	r0, r4
   12f34:	bl	18a50 <next@@Base>
   12f38:	ldr	r1, [r0]
   12f3c:	mov	r0, #6
   12f40:	mov	r2, #0
   12f44:	mov	r3, #178	; 0xb2
   12f48:	str	r5, [sp]
   12f4c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12f50:	mov	r0, r4
   12f54:	bl	18a50 <next@@Base>
   12f58:	ldr	r1, [r0]
   12f5c:	mov	r0, #9
   12f60:	mov	r2, #0
   12f64:	mov	r3, #180	; 0xb4
   12f68:	str	r5, [sp]
   12f6c:	bl	15298 <UnityAssertEqualNumber@@Base>
   12f70:	mov	r0, r4
   12f74:	bl	18800 <destroy_lexer@@Base>
   12f78:	sub	sp, fp, #8
   12f7c:	pop	{r4, r5, fp, pc}
   12f80:	andeq	r0, r0, r1
   12f84:	andeq	r0, r0, r0
   12f88:	andeq	r0, r0, r1
   12f8c:	andeq	r0, r0, r0

00012f90 <if_with_else@@Base>:
   12f90:	push	{r4, r5, fp, lr}
   12f94:	add	fp, sp, #8
   12f98:	sub	sp, sp, #16
   12f9c:	movw	r0, #61760	; 0xf140
   12fa0:	add	r1, pc, #920	; 0x398
   12fa4:	add	r4, sp, #4
   12fa8:	movt	r0, #2
   12fac:	vld1.64	{d16-d17}, [r1]
   12fb0:	movw	r1, #53607	; 0xd167
   12fb4:	vld1.64	{d18-d19}, [r0 :128]
   12fb8:	movt	r1, #1
   12fbc:	vadd.i64	q8, q9, q8
   12fc0:	vst1.64	{d16-d17}, [r0 :128]
   12fc4:	mov	r0, r4
   12fc8:	bl	187c0 <init_lexer@@Base>
   12fcc:	mov	r0, r4
   12fd0:	bl	18a50 <next@@Base>
   12fd4:	ldr	r1, [r0]
   12fd8:	mov	r5, #148	; 0x94
   12fdc:	mov	r0, #0
   12fe0:	mov	r2, #0
   12fe4:	mov	r3, #210	; 0xd2
   12fe8:	str	r5, [sp]
   12fec:	bl	15298 <UnityAssertEqualNumber@@Base>
   12ff0:	mov	r0, r4
   12ff4:	bl	18a50 <next@@Base>
   12ff8:	ldr	r1, [r0]
   12ffc:	mov	r0, #2
   13000:	mov	r2, #0
   13004:	mov	r3, #212	; 0xd4
   13008:	str	r5, [sp]
   1300c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13010:	mov	r0, r4
   13014:	bl	18a50 <next@@Base>
   13018:	ldr	r1, [r0]
   1301c:	mov	r0, #3
   13020:	mov	r2, #0
   13024:	mov	r3, #214	; 0xd6
   13028:	str	r5, [sp]
   1302c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13030:	mov	r0, r4
   13034:	bl	18a50 <next@@Base>
   13038:	ldr	r1, [r0]
   1303c:	mov	r0, #4
   13040:	mov	r2, #0
   13044:	mov	r3, #216	; 0xd8
   13048:	str	r5, [sp]
   1304c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13050:	mov	r0, r4
   13054:	bl	18a50 <next@@Base>
   13058:	ldr	r1, [r0]
   1305c:	mov	r0, #5
   13060:	mov	r2, #0
   13064:	mov	r3, #218	; 0xda
   13068:	str	r5, [sp]
   1306c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13070:	mov	r0, r4
   13074:	bl	18a50 <next@@Base>
   13078:	ldr	r1, [r0]
   1307c:	mov	r0, #10
   13080:	mov	r2, #0
   13084:	mov	r3, #220	; 0xdc
   13088:	str	r5, [sp]
   1308c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13090:	mov	r0, r4
   13094:	bl	18a50 <next@@Base>
   13098:	ldr	r1, [r0]
   1309c:	mov	r0, #3
   130a0:	mov	r2, #0
   130a4:	mov	r3, #222	; 0xde
   130a8:	str	r5, [sp]
   130ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   130b0:	mov	r0, r4
   130b4:	bl	18a50 <next@@Base>
   130b8:	ldr	r1, [r0]
   130bc:	mov	r0, #1
   130c0:	mov	r2, #0
   130c4:	mov	r3, #224	; 0xe0
   130c8:	str	r5, [sp]
   130cc:	bl	15298 <UnityAssertEqualNumber@@Base>
   130d0:	mov	r0, r4
   130d4:	bl	18a50 <next@@Base>
   130d8:	ldr	r1, [r0]
   130dc:	mov	r0, #12
   130e0:	mov	r2, #0
   130e4:	mov	r3, #226	; 0xe2
   130e8:	str	r5, [sp]
   130ec:	bl	15298 <UnityAssertEqualNumber@@Base>
   130f0:	mov	r0, r4
   130f4:	bl	18a50 <next@@Base>
   130f8:	ldr	r1, [r0]
   130fc:	mov	r0, #1
   13100:	mov	r2, #0
   13104:	mov	r3, #228	; 0xe4
   13108:	str	r5, [sp]
   1310c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13110:	mov	r0, r4
   13114:	bl	18a50 <next@@Base>
   13118:	ldr	r1, [r0]
   1311c:	mov	r0, #4
   13120:	mov	r2, #0
   13124:	mov	r3, #230	; 0xe6
   13128:	str	r5, [sp]
   1312c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13130:	mov	r0, r4
   13134:	bl	18a50 <next@@Base>
   13138:	ldr	r1, [r0]
   1313c:	mov	r0, #5
   13140:	mov	r2, #0
   13144:	mov	r3, #232	; 0xe8
   13148:	str	r5, [sp]
   1314c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13150:	mov	r0, r4
   13154:	bl	18a50 <next@@Base>
   13158:	ldr	r1, [r0]
   1315c:	mov	r0, #7
   13160:	mov	r2, #0
   13164:	mov	r3, #234	; 0xea
   13168:	str	r5, [sp]
   1316c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13170:	mov	r0, r4
   13174:	bl	18a50 <next@@Base>
   13178:	ldr	r1, [r0]
   1317c:	mov	r0, #1
   13180:	mov	r2, #0
   13184:	mov	r3, #236	; 0xec
   13188:	str	r5, [sp]
   1318c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13190:	mov	r0, r4
   13194:	bl	18a50 <next@@Base>
   13198:	ldr	r1, [r0]
   1319c:	mov	r0, #8
   131a0:	mov	r2, #0
   131a4:	mov	r3, #238	; 0xee
   131a8:	str	r5, [sp]
   131ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   131b0:	mov	r0, r4
   131b4:	bl	18a50 <next@@Base>
   131b8:	ldr	r1, [r0]
   131bc:	mov	r0, #6
   131c0:	mov	r2, #0
   131c4:	mov	r3, #240	; 0xf0
   131c8:	str	r5, [sp]
   131cc:	bl	15298 <UnityAssertEqualNumber@@Base>
   131d0:	mov	r0, r4
   131d4:	bl	18a50 <next@@Base>
   131d8:	ldr	r1, [r0]
   131dc:	mov	r0, #11
   131e0:	mov	r2, #0
   131e4:	mov	r3, #242	; 0xf2
   131e8:	str	r5, [sp]
   131ec:	bl	15298 <UnityAssertEqualNumber@@Base>
   131f0:	mov	r0, r4
   131f4:	bl	18a50 <next@@Base>
   131f8:	ldr	r1, [r0]
   131fc:	mov	r0, #5
   13200:	mov	r2, #0
   13204:	mov	r3, #244	; 0xf4
   13208:	str	r5, [sp]
   1320c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13210:	mov	r0, r4
   13214:	bl	18a50 <next@@Base>
   13218:	ldr	r1, [r0]
   1321c:	mov	r0, #7
   13220:	mov	r2, #0
   13224:	mov	r3, #246	; 0xf6
   13228:	str	r5, [sp]
   1322c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13230:	mov	r0, r4
   13234:	bl	18a50 <next@@Base>
   13238:	ldr	r1, [r0]
   1323c:	mov	r0, #1
   13240:	mov	r2, #0
   13244:	mov	r3, #248	; 0xf8
   13248:	str	r5, [sp]
   1324c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13250:	mov	r0, r4
   13254:	bl	18a50 <next@@Base>
   13258:	ldr	r1, [r0]
   1325c:	mov	r0, #8
   13260:	mov	r2, #0
   13264:	mov	r3, #250	; 0xfa
   13268:	str	r5, [sp]
   1326c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13270:	mov	r0, r4
   13274:	bl	18a50 <next@@Base>
   13278:	ldr	r1, [r0]
   1327c:	mov	r0, #6
   13280:	mov	r2, #0
   13284:	mov	r3, #252	; 0xfc
   13288:	str	r5, [sp]
   1328c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13290:	mov	r0, r4
   13294:	bl	18a50 <next@@Base>
   13298:	ldr	r1, [r0]
   1329c:	mov	r0, #7
   132a0:	mov	r2, #0
   132a4:	mov	r3, #254	; 0xfe
   132a8:	str	r5, [sp]
   132ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   132b0:	mov	r0, r4
   132b4:	bl	18a50 <next@@Base>
   132b8:	ldr	r1, [r0]
   132bc:	mov	r0, #1
   132c0:	mov	r2, #0
   132c4:	mov	r3, #256	; 0x100
   132c8:	str	r5, [sp]
   132cc:	bl	15298 <UnityAssertEqualNumber@@Base>
   132d0:	mov	r0, r4
   132d4:	bl	18a50 <next@@Base>
   132d8:	ldr	r1, [r0]
   132dc:	mov	r0, #8
   132e0:	mov	r2, #0
   132e4:	movw	r3, #258	; 0x102
   132e8:	str	r5, [sp]
   132ec:	bl	15298 <UnityAssertEqualNumber@@Base>
   132f0:	mov	r0, r4
   132f4:	bl	18a50 <next@@Base>
   132f8:	ldr	r1, [r0]
   132fc:	mov	r0, #6
   13300:	mov	r2, #0
   13304:	mov	r3, #260	; 0x104
   13308:	str	r5, [sp]
   1330c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13310:	mov	r0, r4
   13314:	bl	18a50 <next@@Base>
   13318:	ldr	r1, [r0]
   1331c:	mov	r0, #9
   13320:	mov	r2, #0
   13324:	movw	r3, #262	; 0x106
   13328:	str	r5, [sp]
   1332c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13330:	mov	r0, r4
   13334:	bl	18800 <destroy_lexer@@Base>
   13338:	sub	sp, fp, #8
   1333c:	pop	{r4, r5, fp, pc}
   13340:	andeq	r0, r0, r1
   13344:	andeq	r0, r0, r0
   13348:	andeq	r0, r0, r1
   1334c:	andeq	r0, r0, r0

00013350 <read_token_int_type@@Base>:
   13350:	push	{r4, sl, fp, lr}
   13354:	add	fp, sp, #8
   13358:	sub	sp, sp, #16
   1335c:	movw	r0, #61776	; 0xf150
   13360:	add	r1, pc, #88	; 0x58
   13364:	add	r4, sp, #4
   13368:	movt	r0, #2
   1336c:	vld1.64	{d16-d17}, [r1]
   13370:	movw	r1, #57739	; 0xe18b
   13374:	vld1.64	{d18-d19}, [r0 :128]
   13378:	movt	r1, #1
   1337c:	vadd.i64	q8, q9, q8
   13380:	vst1.64	{d16-d17}, [r0 :128]
   13384:	mov	r0, r4
   13388:	bl	187c0 <init_lexer@@Base>
   1338c:	mov	r0, r4
   13390:	bl	18a50 <next@@Base>
   13394:	ldr	r1, [r0]
   13398:	mov	r0, #148	; 0x94
   1339c:	mov	r2, #0
   133a0:	movw	r3, #279	; 0x117
   133a4:	str	r0, [sp]
   133a8:	mov	r0, #0
   133ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   133b0:	mov	r0, r4
   133b4:	bl	18800 <destroy_lexer@@Base>
   133b8:	sub	sp, fp, #8
   133bc:	pop	{r4, sl, fp, pc}
   133c0:	andeq	r0, r0, r1
   133c4:	andeq	r0, r0, r0
   133c8:	andeq	r0, r0, r1
   133cc:	andeq	r0, r0, r0

000133d0 <read_token_int_value@@Base>:
   133d0:	push	{r4, sl, fp, lr}
   133d4:	add	fp, sp, #8
   133d8:	sub	sp, sp, #16
   133dc:	movw	r0, #61792	; 0xf160
   133e0:	add	r1, pc, #88	; 0x58
   133e4:	add	r4, sp, #4
   133e8:	movt	r0, #2
   133ec:	vld1.64	{d16-d17}, [r1]
   133f0:	movw	r1, #53688	; 0xd1b8
   133f4:	vld1.64	{d18-d19}, [r0 :128]
   133f8:	movt	r1, #1
   133fc:	vadd.i64	q8, q9, q8
   13400:	vst1.64	{d16-d17}, [r0 :128]
   13404:	mov	r0, r4
   13408:	bl	187c0 <init_lexer@@Base>
   1340c:	mov	r0, r4
   13410:	bl	18a50 <next@@Base>
   13414:	ldr	r1, [r0]
   13418:	mov	r0, #148	; 0x94
   1341c:	mov	r2, #0
   13420:	mov	r3, #296	; 0x128
   13424:	str	r0, [sp]
   13428:	mov	r0, #1
   1342c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13430:	mov	r0, r4
   13434:	bl	18800 <destroy_lexer@@Base>
   13438:	sub	sp, fp, #8
   1343c:	pop	{r4, sl, fp, pc}
   13440:	andeq	r0, r0, r1
   13444:	andeq	r0, r0, r0
   13448:	andeq	r0, r0, r1
   1344c:	andeq	r0, r0, r0

00013450 <read_token_function@@Base>:
   13450:	push	{r4, sl, fp, lr}
   13454:	add	fp, sp, #8
   13458:	sub	sp, sp, #16
   1345c:	movw	r0, #61808	; 0xf170
   13460:	add	r1, pc, #88	; 0x58
   13464:	add	r4, sp, #4
   13468:	movt	r0, #2
   1346c:	vld1.64	{d16-d17}, [r1]
   13470:	movw	r1, #53972	; 0xd2d4
   13474:	vld1.64	{d18-d19}, [r0 :128]
   13478:	movt	r1, #1
   1347c:	vadd.i64	q8, q9, q8
   13480:	vst1.64	{d16-d17}, [r0 :128]
   13484:	mov	r0, r4
   13488:	bl	187c0 <init_lexer@@Base>
   1348c:	mov	r0, r4
   13490:	bl	18a50 <next@@Base>
   13494:	ldr	r1, [r0]
   13498:	mov	r0, #148	; 0x94
   1349c:	mov	r2, #0
   134a0:	movw	r3, #313	; 0x139
   134a4:	str	r0, [sp]
   134a8:	mov	r0, #2
   134ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   134b0:	mov	r0, r4
   134b4:	bl	18800 <destroy_lexer@@Base>
   134b8:	sub	sp, fp, #8
   134bc:	pop	{r4, sl, fp, pc}
   134c0:	andeq	r0, r0, r1
   134c4:	andeq	r0, r0, r0
   134c8:	andeq	r0, r0, r1
   134cc:	andeq	r0, r0, r0

000134d0 <read_token_opar@@Base>:
   134d0:	push	{r4, sl, fp, lr}
   134d4:	add	fp, sp, #8
   134d8:	sub	sp, sp, #16
   134dc:	movw	r0, #61824	; 0xf180
   134e0:	add	r1, pc, #88	; 0x58
   134e4:	add	r4, sp, #4
   134e8:	movt	r0, #2
   134ec:	vld1.64	{d16-d17}, [r1]
   134f0:	movw	r1, #53693	; 0xd1bd
   134f4:	vld1.64	{d18-d19}, [r0 :128]
   134f8:	movt	r1, #1
   134fc:	vadd.i64	q8, q9, q8
   13500:	vst1.64	{d16-d17}, [r0 :128]
   13504:	mov	r0, r4
   13508:	bl	187c0 <init_lexer@@Base>
   1350c:	mov	r0, r4
   13510:	bl	18a50 <next@@Base>
   13514:	ldr	r1, [r0]
   13518:	mov	r0, #148	; 0x94
   1351c:	mov	r2, #0
   13520:	movw	r3, #330	; 0x14a
   13524:	str	r0, [sp]
   13528:	mov	r0, #3
   1352c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13530:	mov	r0, r4
   13534:	bl	18800 <destroy_lexer@@Base>
   13538:	sub	sp, fp, #8
   1353c:	pop	{r4, sl, fp, pc}
   13540:	andeq	r0, r0, r1
   13544:	andeq	r0, r0, r0
   13548:	andeq	r0, r0, r1
   1354c:	andeq	r0, r0, r0

00013550 <read_token_cpar@@Base>:
   13550:	push	{r4, sl, fp, lr}
   13554:	add	fp, sp, #8
   13558:	sub	sp, sp, #16
   1355c:	movw	r0, #61840	; 0xf190
   13560:	add	r1, pc, #88	; 0x58
   13564:	add	r4, sp, #4
   13568:	movt	r0, #2
   1356c:	vld1.64	{d16-d17}, [r1]
   13570:	movw	r1, #53695	; 0xd1bf
   13574:	vld1.64	{d18-d19}, [r0 :128]
   13578:	movt	r1, #1
   1357c:	vadd.i64	q8, q9, q8
   13580:	vst1.64	{d16-d17}, [r0 :128]
   13584:	mov	r0, r4
   13588:	bl	187c0 <init_lexer@@Base>
   1358c:	mov	r0, r4
   13590:	bl	18a50 <next@@Base>
   13594:	ldr	r1, [r0]
   13598:	mov	r0, #148	; 0x94
   1359c:	mov	r2, #0
   135a0:	movw	r3, #347	; 0x15b
   135a4:	str	r0, [sp]
   135a8:	mov	r0, #4
   135ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   135b0:	mov	r0, r4
   135b4:	bl	18800 <destroy_lexer@@Base>
   135b8:	sub	sp, fp, #8
   135bc:	pop	{r4, sl, fp, pc}
   135c0:	andeq	r0, r0, r1
   135c4:	andeq	r0, r0, r0
   135c8:	andeq	r0, r0, r1
   135cc:	andeq	r0, r0, r0

000135d0 <read_token_obra@@Base>:
   135d0:	push	{r4, sl, fp, lr}
   135d4:	add	fp, sp, #8
   135d8:	sub	sp, sp, #16
   135dc:	movw	r0, #61856	; 0xf1a0
   135e0:	add	r1, pc, #88	; 0x58
   135e4:	add	r4, sp, #4
   135e8:	movt	r0, #2
   135ec:	vld1.64	{d16-d17}, [r1]
   135f0:	movw	r1, #53697	; 0xd1c1
   135f4:	vld1.64	{d18-d19}, [r0 :128]
   135f8:	movt	r1, #1
   135fc:	vadd.i64	q8, q9, q8
   13600:	vst1.64	{d16-d17}, [r0 :128]
   13604:	mov	r0, r4
   13608:	bl	187c0 <init_lexer@@Base>
   1360c:	mov	r0, r4
   13610:	bl	18a50 <next@@Base>
   13614:	ldr	r1, [r0]
   13618:	mov	r0, #148	; 0x94
   1361c:	mov	r2, #0
   13620:	mov	r3, #364	; 0x16c
   13624:	str	r0, [sp]
   13628:	mov	r0, #5
   1362c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13630:	mov	r0, r4
   13634:	bl	18800 <destroy_lexer@@Base>
   13638:	sub	sp, fp, #8
   1363c:	pop	{r4, sl, fp, pc}
   13640:	andeq	r0, r0, r1
   13644:	andeq	r0, r0, r0
   13648:	andeq	r0, r0, r1
   1364c:	andeq	r0, r0, r0

00013650 <read_token_cbra@@Base>:
   13650:	push	{r4, sl, fp, lr}
   13654:	add	fp, sp, #8
   13658:	sub	sp, sp, #16
   1365c:	movw	r0, #61872	; 0xf1b0
   13660:	add	r1, pc, #88	; 0x58
   13664:	add	r4, sp, #4
   13668:	movt	r0, #2
   1366c:	vld1.64	{d16-d17}, [r1]
   13670:	movw	r1, #53548	; 0xd12c
   13674:	vld1.64	{d18-d19}, [r0 :128]
   13678:	movt	r1, #1
   1367c:	vadd.i64	q8, q9, q8
   13680:	vst1.64	{d16-d17}, [r0 :128]
   13684:	mov	r0, r4
   13688:	bl	187c0 <init_lexer@@Base>
   1368c:	mov	r0, r4
   13690:	bl	18a50 <next@@Base>
   13694:	ldr	r1, [r0]
   13698:	mov	r0, #148	; 0x94
   1369c:	mov	r2, #0
   136a0:	movw	r3, #382	; 0x17e
   136a4:	str	r0, [sp]
   136a8:	mov	r0, #6
   136ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   136b0:	mov	r0, r4
   136b4:	bl	18800 <destroy_lexer@@Base>
   136b8:	sub	sp, fp, #8
   136bc:	pop	{r4, sl, fp, pc}
   136c0:	andeq	r0, r0, r1
   136c4:	andeq	r0, r0, r0
   136c8:	andeq	r0, r0, r1
   136cc:	andeq	r0, r0, r0

000136d0 <read_token_return@@Base>:
   136d0:	push	{r4, sl, fp, lr}
   136d4:	add	fp, sp, #8
   136d8:	sub	sp, sp, #16
   136dc:	movw	r0, #61888	; 0xf1c0
   136e0:	add	r1, pc, #88	; 0x58
   136e4:	add	r4, sp, #4
   136e8:	movt	r0, #2
   136ec:	vld1.64	{d16-d17}, [r1]
   136f0:	movw	r1, #53699	; 0xd1c3
   136f4:	vld1.64	{d18-d19}, [r0 :128]
   136f8:	movt	r1, #1
   136fc:	vadd.i64	q8, q9, q8
   13700:	vst1.64	{d16-d17}, [r0 :128]
   13704:	mov	r0, r4
   13708:	bl	187c0 <init_lexer@@Base>
   1370c:	mov	r0, r4
   13710:	bl	18a50 <next@@Base>
   13714:	ldr	r1, [r0]
   13718:	mov	r0, #148	; 0x94
   1371c:	mov	r2, #0
   13720:	movw	r3, #399	; 0x18f
   13724:	str	r0, [sp]
   13728:	mov	r0, #7
   1372c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13730:	mov	r0, r4
   13734:	bl	18800 <destroy_lexer@@Base>
   13738:	sub	sp, fp, #8
   1373c:	pop	{r4, sl, fp, pc}
   13740:	andeq	r0, r0, r1
   13744:	andeq	r0, r0, r0
   13748:	andeq	r0, r0, r1
   1374c:	andeq	r0, r0, r0

00013750 <read_token_semicolon@@Base>:
   13750:	push	{r4, sl, fp, lr}
   13754:	add	fp, sp, #8
   13758:	sub	sp, sp, #16
   1375c:	movw	r0, #61904	; 0xf1d0
   13760:	add	r1, pc, #88	; 0x58
   13764:	add	r4, sp, #4
   13768:	movt	r0, #2
   1376c:	vld1.64	{d16-d17}, [r1]
   13770:	movw	r1, #53706	; 0xd1ca
   13774:	vld1.64	{d18-d19}, [r0 :128]
   13778:	movt	r1, #1
   1377c:	vadd.i64	q8, q9, q8
   13780:	vst1.64	{d16-d17}, [r0 :128]
   13784:	mov	r0, r4
   13788:	bl	187c0 <init_lexer@@Base>
   1378c:	mov	r0, r4
   13790:	bl	18a50 <next@@Base>
   13794:	ldr	r1, [r0]
   13798:	mov	r0, #148	; 0x94
   1379c:	mov	r2, #0
   137a0:	mov	r3, #416	; 0x1a0
   137a4:	str	r0, [sp]
   137a8:	mov	r0, #8
   137ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   137b0:	mov	r0, r4
   137b4:	bl	18800 <destroy_lexer@@Base>
   137b8:	sub	sp, fp, #8
   137bc:	pop	{r4, sl, fp, pc}
   137c0:	andeq	r0, r0, r1
   137c4:	andeq	r0, r0, r0
   137c8:	andeq	r0, r0, r1
   137cc:	andeq	r0, r0, r0

000137d0 <read_token_eof@@Base>:
   137d0:	push	{r4, sl, fp, lr}
   137d4:	add	fp, sp, #8
   137d8:	sub	sp, sp, #16
   137dc:	movw	r0, #61920	; 0xf1e0
   137e0:	add	r1, pc, #88	; 0x58
   137e4:	add	r4, sp, #4
   137e8:	movt	r0, #2
   137ec:	vld1.64	{d16-d17}, [r1]
   137f0:	movw	r1, #60257	; 0xeb61
   137f4:	vld1.64	{d18-d19}, [r0 :128]
   137f8:	movt	r1, #1
   137fc:	vadd.i64	q8, q9, q8
   13800:	vst1.64	{d16-d17}, [r0 :128]
   13804:	mov	r0, r4
   13808:	bl	187c0 <init_lexer@@Base>
   1380c:	mov	r0, r4
   13810:	bl	18a50 <next@@Base>
   13814:	ldr	r1, [r0]
   13818:	mov	r0, #148	; 0x94
   1381c:	mov	r2, #0
   13820:	movw	r3, #433	; 0x1b1
   13824:	str	r0, [sp]
   13828:	mov	r0, #9
   1382c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13830:	mov	r0, r4
   13834:	bl	18800 <destroy_lexer@@Base>
   13838:	sub	sp, fp, #8
   1383c:	pop	{r4, sl, fp, pc}
   13840:	andeq	r0, r0, r1
   13844:	andeq	r0, r0, r0
   13848:	andeq	r0, r0, r1
   1384c:	andeq	r0, r0, r0

00013850 <read_token_if@@Base>:
   13850:	push	{r4, sl, fp, lr}
   13854:	add	fp, sp, #8
   13858:	sub	sp, sp, #16
   1385c:	movw	r0, #61936	; 0xf1f0
   13860:	add	r1, pc, #88	; 0x58
   13864:	add	r4, sp, #4
   13868:	movt	r0, #2
   1386c:	vld1.64	{d16-d17}, [r1]
   13870:	movw	r1, #53922	; 0xd2a2
   13874:	vld1.64	{d18-d19}, [r0 :128]
   13878:	movt	r1, #1
   1387c:	vadd.i64	q8, q9, q8
   13880:	vst1.64	{d16-d17}, [r0 :128]
   13884:	mov	r0, r4
   13888:	bl	187c0 <init_lexer@@Base>
   1388c:	mov	r0, r4
   13890:	bl	18a50 <next@@Base>
   13894:	ldr	r1, [r0]
   13898:	mov	r0, #148	; 0x94
   1389c:	mov	r2, #0
   138a0:	movw	r3, #450	; 0x1c2
   138a4:	str	r0, [sp]
   138a8:	mov	r0, #10
   138ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   138b0:	mov	r0, r4
   138b4:	bl	18800 <destroy_lexer@@Base>
   138b8:	sub	sp, fp, #8
   138bc:	pop	{r4, sl, fp, pc}
   138c0:	andeq	r0, r0, r1
   138c4:	andeq	r0, r0, r0
   138c8:	andeq	r0, r0, r1
   138cc:	andeq	r0, r0, r0

000138d0 <read_token_else@@Base>:
   138d0:	push	{r4, sl, fp, lr}
   138d4:	add	fp, sp, #8
   138d8:	sub	sp, sp, #16
   138dc:	movw	r0, #61952	; 0xf200
   138e0:	add	r1, pc, #88	; 0x58
   138e4:	add	r4, sp, #4
   138e8:	movt	r0, #2
   138ec:	vld1.64	{d16-d17}, [r1]
   138f0:	movw	r1, #53827	; 0xd243
   138f4:	vld1.64	{d18-d19}, [r0 :128]
   138f8:	movt	r1, #1
   138fc:	vadd.i64	q8, q9, q8
   13900:	vst1.64	{d16-d17}, [r0 :128]
   13904:	mov	r0, r4
   13908:	bl	187c0 <init_lexer@@Base>
   1390c:	mov	r0, r4
   13910:	bl	18a50 <next@@Base>
   13914:	ldr	r1, [r0]
   13918:	mov	r0, #148	; 0x94
   1391c:	mov	r2, #0
   13920:	movw	r3, #467	; 0x1d3
   13924:	str	r0, [sp]
   13928:	mov	r0, #11
   1392c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13930:	mov	r0, r4
   13934:	bl	18800 <destroy_lexer@@Base>
   13938:	sub	sp, fp, #8
   1393c:	pop	{r4, sl, fp, pc}
   13940:	andeq	r0, r0, r1
   13944:	andeq	r0, r0, r0
   13948:	andeq	r0, r0, r1
   1394c:	andeq	r0, r0, r0

00013950 <read_token_equalequal@@Base>:
   13950:	push	{r4, sl, fp, lr}
   13954:	add	fp, sp, #8
   13958:	sub	sp, sp, #16
   1395c:	movw	r0, #61968	; 0xf210
   13960:	add	r1, pc, #88	; 0x58
   13964:	add	r4, sp, #4
   13968:	movt	r0, #2
   1396c:	vld1.64	{d16-d17}, [r1]
   13970:	movw	r1, #53708	; 0xd1cc
   13974:	vld1.64	{d18-d19}, [r0 :128]
   13978:	movt	r1, #1
   1397c:	vadd.i64	q8, q9, q8
   13980:	vst1.64	{d16-d17}, [r0 :128]
   13984:	mov	r0, r4
   13988:	bl	187c0 <init_lexer@@Base>
   1398c:	mov	r0, r4
   13990:	bl	18a50 <next@@Base>
   13994:	ldr	r1, [r0]
   13998:	mov	r0, #148	; 0x94
   1399c:	mov	r2, #0
   139a0:	mov	r3, #484	; 0x1e4
   139a4:	str	r0, [sp]
   139a8:	mov	r0, #12
   139ac:	bl	15298 <UnityAssertEqualNumber@@Base>
   139b0:	mov	r0, r4
   139b4:	bl	18800 <destroy_lexer@@Base>
   139b8:	sub	sp, fp, #8
   139bc:	pop	{r4, sl, fp, pc}
   139c0:	andeq	r0, r0, r1
   139c4:	andeq	r0, r0, r0
   139c8:	andeq	r0, r0, r1
   139cc:	andeq	r0, r0, r0

000139d0 <read_token_notequal@@Base>:
   139d0:	push	{r4, sl, fp, lr}
   139d4:	add	fp, sp, #8
   139d8:	sub	sp, sp, #16
   139dc:	movw	r0, #61984	; 0xf220
   139e0:	add	r1, pc, #88	; 0x58
   139e4:	add	r4, sp, #4
   139e8:	movt	r0, #2
   139ec:	vld1.64	{d16-d17}, [r1]
   139f0:	movw	r1, #53711	; 0xd1cf
   139f4:	vld1.64	{d18-d19}, [r0 :128]
   139f8:	movt	r1, #1
   139fc:	vadd.i64	q8, q9, q8
   13a00:	vst1.64	{d16-d17}, [r0 :128]
   13a04:	mov	r0, r4
   13a08:	bl	187c0 <init_lexer@@Base>
   13a0c:	mov	r0, r4
   13a10:	bl	18a50 <next@@Base>
   13a14:	ldr	r1, [r0]
   13a18:	mov	r0, #148	; 0x94
   13a1c:	mov	r2, #0
   13a20:	movw	r3, #501	; 0x1f5
   13a24:	str	r0, [sp]
   13a28:	mov	r0, #12
   13a2c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13a30:	mov	r0, r4
   13a34:	bl	18800 <destroy_lexer@@Base>
   13a38:	sub	sp, fp, #8
   13a3c:	pop	{r4, sl, fp, pc}
   13a40:	andeq	r0, r0, r1
   13a44:	andeq	r0, r0, r0
   13a48:	andeq	r0, r0, r1
   13a4c:	andeq	r0, r0, r0

00013a50 <read_token_lessequalthan@@Base>:
   13a50:	push	{r4, sl, fp, lr}
   13a54:	add	fp, sp, #8
   13a58:	sub	sp, sp, #16
   13a5c:	movw	r0, #62000	; 0xf230
   13a60:	add	r1, pc, #88	; 0x58
   13a64:	add	r4, sp, #4
   13a68:	movt	r0, #2
   13a6c:	vld1.64	{d16-d17}, [r1]
   13a70:	movw	r1, #53714	; 0xd1d2
   13a74:	vld1.64	{d18-d19}, [r0 :128]
   13a78:	movt	r1, #1
   13a7c:	vadd.i64	q8, q9, q8
   13a80:	vst1.64	{d16-d17}, [r0 :128]
   13a84:	mov	r0, r4
   13a88:	bl	187c0 <init_lexer@@Base>
   13a8c:	mov	r0, r4
   13a90:	bl	18a50 <next@@Base>
   13a94:	ldr	r1, [r0]
   13a98:	mov	r0, #148	; 0x94
   13a9c:	mov	r2, #0
   13aa0:	movw	r3, #518	; 0x206
   13aa4:	str	r0, [sp]
   13aa8:	mov	r0, #12
   13aac:	bl	15298 <UnityAssertEqualNumber@@Base>
   13ab0:	mov	r0, r4
   13ab4:	bl	18800 <destroy_lexer@@Base>
   13ab8:	sub	sp, fp, #8
   13abc:	pop	{r4, sl, fp, pc}
   13ac0:	andeq	r0, r0, r1
   13ac4:	andeq	r0, r0, r0
   13ac8:	andeq	r0, r0, r1
   13acc:	andeq	r0, r0, r0

00013ad0 <read_token_oror@@Base>:
   13ad0:	push	{r4, sl, fp, lr}
   13ad4:	add	fp, sp, #8
   13ad8:	sub	sp, sp, #16
   13adc:	movw	r0, #62016	; 0xf240
   13ae0:	add	r1, pc, #88	; 0x58
   13ae4:	add	r4, sp, #4
   13ae8:	movt	r0, #2
   13aec:	vld1.64	{d16-d17}, [r1]
   13af0:	movw	r1, #53717	; 0xd1d5
   13af4:	vld1.64	{d18-d19}, [r0 :128]
   13af8:	movt	r1, #1
   13afc:	vadd.i64	q8, q9, q8
   13b00:	vst1.64	{d16-d17}, [r0 :128]
   13b04:	mov	r0, r4
   13b08:	bl	187c0 <init_lexer@@Base>
   13b0c:	mov	r0, r4
   13b10:	bl	18a50 <next@@Base>
   13b14:	ldr	r1, [r0]
   13b18:	mov	r0, #148	; 0x94
   13b1c:	mov	r2, #0
   13b20:	movw	r3, #535	; 0x217
   13b24:	str	r0, [sp]
   13b28:	mov	r0, #12
   13b2c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13b30:	mov	r0, r4
   13b34:	bl	18800 <destroy_lexer@@Base>
   13b38:	sub	sp, fp, #8
   13b3c:	pop	{r4, sl, fp, pc}
   13b40:	andeq	r0, r0, r1
   13b44:	andeq	r0, r0, r0
   13b48:	andeq	r0, r0, r1
   13b4c:	andeq	r0, r0, r0

00013b50 <read_token_andand@@Base>:
   13b50:	push	{r4, sl, fp, lr}
   13b54:	add	fp, sp, #8
   13b58:	sub	sp, sp, #16
   13b5c:	movw	r0, #62032	; 0xf250
   13b60:	add	r1, pc, #88	; 0x58
   13b64:	add	r4, sp, #4
   13b68:	movt	r0, #2
   13b6c:	vld1.64	{d16-d17}, [r1]
   13b70:	movw	r1, #53720	; 0xd1d8
   13b74:	vld1.64	{d18-d19}, [r0 :128]
   13b78:	movt	r1, #1
   13b7c:	vadd.i64	q8, q9, q8
   13b80:	vst1.64	{d16-d17}, [r0 :128]
   13b84:	mov	r0, r4
   13b88:	bl	187c0 <init_lexer@@Base>
   13b8c:	mov	r0, r4
   13b90:	bl	18a50 <next@@Base>
   13b94:	ldr	r1, [r0]
   13b98:	mov	r0, #148	; 0x94
   13b9c:	mov	r2, #0
   13ba0:	mov	r3, #552	; 0x228
   13ba4:	str	r0, [sp]
   13ba8:	mov	r0, #12
   13bac:	bl	15298 <UnityAssertEqualNumber@@Base>
   13bb0:	mov	r0, r4
   13bb4:	bl	18800 <destroy_lexer@@Base>
   13bb8:	sub	sp, fp, #8
   13bbc:	pop	{r4, sl, fp, pc}
   13bc0:	andeq	r0, r0, r1
   13bc4:	andeq	r0, r0, r0
   13bc8:	andeq	r0, r0, r1
   13bcc:	andeq	r0, r0, r0

00013bd0 <read_token_greaterequalthan@@Base>:
   13bd0:	push	{r4, sl, fp, lr}
   13bd4:	add	fp, sp, #8
   13bd8:	sub	sp, sp, #16
   13bdc:	movw	r0, #62048	; 0xf260
   13be0:	add	r1, pc, #88	; 0x58
   13be4:	add	r4, sp, #4
   13be8:	movt	r0, #2
   13bec:	vld1.64	{d16-d17}, [r1]
   13bf0:	movw	r1, #53723	; 0xd1db
   13bf4:	vld1.64	{d18-d19}, [r0 :128]
   13bf8:	movt	r1, #1
   13bfc:	vadd.i64	q8, q9, q8
   13c00:	vst1.64	{d16-d17}, [r0 :128]
   13c04:	mov	r0, r4
   13c08:	bl	187c0 <init_lexer@@Base>
   13c0c:	mov	r0, r4
   13c10:	bl	18a50 <next@@Base>
   13c14:	ldr	r1, [r0]
   13c18:	mov	r0, #148	; 0x94
   13c1c:	mov	r2, #0
   13c20:	movw	r3, #569	; 0x239
   13c24:	str	r0, [sp]
   13c28:	mov	r0, #12
   13c2c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13c30:	mov	r0, r4
   13c34:	bl	18800 <destroy_lexer@@Base>
   13c38:	sub	sp, fp, #8
   13c3c:	pop	{r4, sl, fp, pc}
   13c40:	andeq	r0, r0, r1
   13c44:	andeq	r0, r0, r0
   13c48:	andeq	r0, r0, r1
   13c4c:	andeq	r0, r0, r0

00013c50 <read_token_lessthan@@Base>:
   13c50:	push	{r4, sl, fp, lr}
   13c54:	add	fp, sp, #8
   13c58:	sub	sp, sp, #16
   13c5c:	movw	r0, #62064	; 0xf270
   13c60:	add	r1, pc, #88	; 0x58
   13c64:	add	r4, sp, #4
   13c68:	movt	r0, #2
   13c6c:	vld1.64	{d16-d17}, [r1]
   13c70:	movw	r1, #53726	; 0xd1de
   13c74:	vld1.64	{d18-d19}, [r0 :128]
   13c78:	movt	r1, #1
   13c7c:	vadd.i64	q8, q9, q8
   13c80:	vst1.64	{d16-d17}, [r0 :128]
   13c84:	mov	r0, r4
   13c88:	bl	187c0 <init_lexer@@Base>
   13c8c:	mov	r0, r4
   13c90:	bl	18a50 <next@@Base>
   13c94:	ldr	r1, [r0]
   13c98:	mov	r0, #148	; 0x94
   13c9c:	mov	r2, #0
   13ca0:	movw	r3, #586	; 0x24a
   13ca4:	str	r0, [sp]
   13ca8:	mov	r0, #12
   13cac:	bl	15298 <UnityAssertEqualNumber@@Base>
   13cb0:	mov	r0, r4
   13cb4:	bl	18800 <destroy_lexer@@Base>
   13cb8:	sub	sp, fp, #8
   13cbc:	pop	{r4, sl, fp, pc}
   13cc0:	andeq	r0, r0, r1
   13cc4:	andeq	r0, r0, r0
   13cc8:	andeq	r0, r0, r1
   13ccc:	andeq	r0, r0, r0

00013cd0 <read_token_greaterthan@@Base>:
   13cd0:	push	{r4, sl, fp, lr}
   13cd4:	add	fp, sp, #8
   13cd8:	sub	sp, sp, #16
   13cdc:	movw	r0, #62080	; 0xf280
   13ce0:	add	r1, pc, #88	; 0x58
   13ce4:	add	r4, sp, #4
   13ce8:	movt	r0, #2
   13cec:	vld1.64	{d16-d17}, [r1]
   13cf0:	movw	r1, #53728	; 0xd1e0
   13cf4:	vld1.64	{d18-d19}, [r0 :128]
   13cf8:	movt	r1, #1
   13cfc:	vadd.i64	q8, q9, q8
   13d00:	vst1.64	{d16-d17}, [r0 :128]
   13d04:	mov	r0, r4
   13d08:	bl	187c0 <init_lexer@@Base>
   13d0c:	mov	r0, r4
   13d10:	bl	18a50 <next@@Base>
   13d14:	ldr	r1, [r0]
   13d18:	mov	r0, #148	; 0x94
   13d1c:	mov	r2, #0
   13d20:	movw	r3, #603	; 0x25b
   13d24:	str	r0, [sp]
   13d28:	mov	r0, #12
   13d2c:	bl	15298 <UnityAssertEqualNumber@@Base>
   13d30:	mov	r0, r4
   13d34:	bl	18800 <destroy_lexer@@Base>
   13d38:	sub	sp, fp, #8
   13d3c:	pop	{r4, sl, fp, pc}
   13d40:	andeq	r0, r0, r1
   13d44:	andeq	r0, r0, r0
   13d48:	andeq	r0, r0, r1
   13d4c:	andeq	r0, r0, r0

00013d50 <read_token_not@@Base>:
   13d50:	push	{r4, sl, fp, lr}
   13d54:	add	fp, sp, #8
   13d58:	sub	sp, sp, #16
   13d5c:	movw	r0, #62096	; 0xf290
   13d60:	add	r1, pc, #88	; 0x58
   13d64:	add	r4, sp, #4
   13d68:	movt	r0, #2
   13d6c:	vld1.64	{d16-d17}, [r1]
   13d70:	movw	r1, #53730	; 0xd1e2
   13d74:	vld1.64	{d18-d19}, [r0 :128]
   13d78:	movt	r1, #1
   13d7c:	vadd.i64	q8, q9, q8
   13d80:	vst1.64	{d16-d17}, [r0 :128]
   13d84:	mov	r0, r4
   13d88:	bl	187c0 <init_lexer@@Base>
   13d8c:	mov	r0, r4
   13d90:	bl	18a50 <next@@Base>
   13d94:	ldr	r1, [r0]
   13d98:	mov	r0, #148	; 0x94
   13d9c:	mov	r2, #0
   13da0:	mov	r3, #620	; 0x26c
   13da4:	str	r0, [sp]
   13da8:	mov	r0, #12
   13dac:	bl	15298 <UnityAssertEqualNumber@@Base>
   13db0:	mov	r0, r4
   13db4:	bl	18800 <destroy_lexer@@Base>
   13db8:	sub	sp, fp, #8
   13dbc:	pop	{r4, sl, fp, pc}
   13dc0:	andeq	r0, r0, r1
   13dc4:	andeq	r0, r0, r0
   13dc8:	andeq	r0, r0, r1
   13dcc:	andeq	r0, r0, r0

00013dd0 <main@@Base>:
   13dd0:	push	{fp, lr}
   13dd4:	mov	fp, sp
   13dd8:	movw	r0, #62112	; 0xf2a0
   13ddc:	add	r1, pc, #684	; 0x2ac
   13de0:	movt	r0, #2
   13de4:	vld1.64	{d16-d17}, [r1]
   13de8:	vld1.64	{d18-d19}, [r0 :128]
   13dec:	vadd.i64	q8, q9, q8
   13df0:	vst1.64	{d16-d17}, [r0 :128]
   13df4:	movw	r0, #53732	; 0xd1e4
   13df8:	movt	r0, #1
   13dfc:	bl	17920 <UnityBegin@@Base>
   13e00:	movw	r0, #10456	; 0x28d8
   13e04:	movw	r1, #54096	; 0xd350
   13e08:	movw	r2, #629	; 0x275
   13e0c:	movt	r0, #1
   13e10:	movt	r1, #1
   13e14:	bl	17818 <UnityDefaultTestRun@@Base>
   13e18:	movw	r0, #10872	; 0x2a78
   13e1c:	movw	r1, #54128	; 0xd370
   13e20:	movw	r2, #630	; 0x276
   13e24:	movt	r0, #1
   13e28:	movt	r1, #1
   13e2c:	bl	17818 <UnityDefaultTestRun@@Base>
   13e30:	movw	r0, #11032	; 0x2b18
   13e34:	movw	r1, #54160	; 0xd390
   13e38:	movw	r2, #631	; 0x277
   13e3c:	movt	r0, #1
   13e40:	movt	r1, #1
   13e44:	bl	17818 <UnityDefaultTestRun@@Base>
   13e48:	movw	r0, #11248	; 0x2bf0
   13e4c:	movw	r1, #54192	; 0xd3b0
   13e50:	mov	r2, #632	; 0x278
   13e54:	movt	r0, #1
   13e58:	movt	r1, #1
   13e5c:	bl	17818 <UnityDefaultTestRun@@Base>
   13e60:	movw	r0, #11408	; 0x2c90
   13e64:	movw	r1, #53803	; 0xd22b
   13e68:	movw	r2, #633	; 0x279
   13e6c:	movt	r0, #1
   13e70:	movt	r1, #1
   13e74:	bl	17818 <UnityDefaultTestRun@@Base>
   13e78:	movw	r0, #12176	; 0x2f90
   13e7c:	movw	r1, #53819	; 0xd23b
   13e80:	movw	r2, #634	; 0x27a
   13e84:	movt	r0, #1
   13e88:	movt	r1, #1
   13e8c:	bl	17818 <UnityDefaultTestRun@@Base>
   13e90:	movw	r0, #13136	; 0x3350
   13e94:	movw	r1, #54224	; 0xd3d0
   13e98:	movw	r2, #635	; 0x27b
   13e9c:	movt	r0, #1
   13ea0:	movt	r1, #1
   13ea4:	bl	17818 <UnityDefaultTestRun@@Base>
   13ea8:	movw	r0, #13264	; 0x33d0
   13eac:	movw	r1, #54256	; 0xd3f0
   13eb0:	mov	r2, #636	; 0x27c
   13eb4:	movt	r0, #1
   13eb8:	movt	r1, #1
   13ebc:	bl	17818 <UnityDefaultTestRun@@Base>
   13ec0:	movw	r0, #13392	; 0x3450
   13ec4:	movw	r1, #54288	; 0xd410
   13ec8:	movw	r2, #637	; 0x27d
   13ecc:	movt	r0, #1
   13ed0:	movt	r1, #1
   13ed4:	bl	17818 <UnityDefaultTestRun@@Base>
   13ed8:	movw	r0, #13520	; 0x34d0
   13edc:	movw	r1, #53832	; 0xd248
   13ee0:	movw	r2, #638	; 0x27e
   13ee4:	movt	r0, #1
   13ee8:	movt	r1, #1
   13eec:	bl	17818 <UnityDefaultTestRun@@Base>
   13ef0:	movw	r0, #13648	; 0x3550
   13ef4:	movw	r1, #53848	; 0xd258
   13ef8:	movw	r2, #639	; 0x27f
   13efc:	movt	r0, #1
   13f00:	movt	r1, #1
   13f04:	bl	17818 <UnityDefaultTestRun@@Base>
   13f08:	movw	r0, #13776	; 0x35d0
   13f0c:	movw	r1, #53864	; 0xd268
   13f10:	mov	r2, #640	; 0x280
   13f14:	movt	r0, #1
   13f18:	movt	r1, #1
   13f1c:	bl	17818 <UnityDefaultTestRun@@Base>
   13f20:	movw	r0, #13904	; 0x3650
   13f24:	movw	r1, #53880	; 0xd278
   13f28:	movw	r2, #641	; 0x281
   13f2c:	movt	r0, #1
   13f30:	movt	r1, #1
   13f34:	bl	17818 <UnityDefaultTestRun@@Base>
   13f38:	movw	r0, #14032	; 0x36d0
   13f3c:	movw	r1, #54320	; 0xd430
   13f40:	movw	r2, #642	; 0x282
   13f44:	movt	r0, #1
   13f48:	movt	r1, #1
   13f4c:	bl	17818 <UnityDefaultTestRun@@Base>
   13f50:	movw	r0, #14160	; 0x3750
   13f54:	movw	r1, #54352	; 0xd450
   13f58:	movw	r2, #643	; 0x283
   13f5c:	movt	r0, #1
   13f60:	movt	r1, #1
   13f64:	bl	17818 <UnityDefaultTestRun@@Base>
   13f68:	movw	r0, #14288	; 0x37d0
   13f6c:	movw	r1, #53896	; 0xd288
   13f70:	mov	r2, #644	; 0x284
   13f74:	movt	r0, #1
   13f78:	movt	r1, #1
   13f7c:	bl	17818 <UnityDefaultTestRun@@Base>
   13f80:	movw	r0, #14416	; 0x3850
   13f84:	movw	r1, #53911	; 0xd297
   13f88:	movw	r2, #645	; 0x285
   13f8c:	movt	r0, #1
   13f90:	movt	r1, #1
   13f94:	bl	17818 <UnityDefaultTestRun@@Base>
   13f98:	movw	r0, #14544	; 0x38d0
   13f9c:	movw	r1, #53925	; 0xd2a5
   13fa0:	movw	r2, #646	; 0x286
   13fa4:	movt	r0, #1
   13fa8:	movt	r1, #1
   13fac:	bl	17818 <UnityDefaultTestRun@@Base>
   13fb0:	movw	r0, #14672	; 0x3950
   13fb4:	movw	r1, #54384	; 0xd470
   13fb8:	movw	r2, #647	; 0x287
   13fbc:	movt	r0, #1
   13fc0:	movt	r1, #1
   13fc4:	bl	17818 <UnityDefaultTestRun@@Base>
   13fc8:	movw	r0, #14800	; 0x39d0
   13fcc:	movw	r1, #54416	; 0xd490
   13fd0:	mov	r2, #648	; 0x288
   13fd4:	movt	r0, #1
   13fd8:	movt	r1, #1
   13fdc:	bl	17818 <UnityDefaultTestRun@@Base>
   13fe0:	movw	r0, #14928	; 0x3a50
   13fe4:	movw	r1, #54448	; 0xd4b0
   13fe8:	movw	r2, #649	; 0x289
   13fec:	movt	r0, #1
   13ff0:	movt	r1, #1
   13ff4:	bl	17818 <UnityDefaultTestRun@@Base>
   13ff8:	movw	r0, #15312	; 0x3bd0
   13ffc:	movw	r1, #54512	; 0xd4f0
   14000:	movw	r2, #650	; 0x28a
   14004:	movt	r0, #1
   14008:	movt	r1, #1
   1400c:	bl	17818 <UnityDefaultTestRun@@Base>
   14010:	movw	r0, #15056	; 0x3ad0
   14014:	movw	r1, #53941	; 0xd2b5
   14018:	movw	r2, #651	; 0x28b
   1401c:	movt	r0, #1
   14020:	movt	r1, #1
   14024:	bl	17818 <UnityDefaultTestRun@@Base>
   14028:	movw	r0, #15184	; 0x3b50
   1402c:	movw	r1, #54480	; 0xd4d0
   14030:	mov	r2, #652	; 0x28c
   14034:	movt	r0, #1
   14038:	movt	r1, #1
   1403c:	bl	17818 <UnityDefaultTestRun@@Base>
   14040:	movw	r0, #15440	; 0x3c50
   14044:	movw	r1, #54544	; 0xd510
   14048:	movw	r2, #653	; 0x28d
   1404c:	movt	r0, #1
   14050:	movt	r1, #1
   14054:	bl	17818 <UnityDefaultTestRun@@Base>
   14058:	movw	r0, #15568	; 0x3cd0
   1405c:	movw	r1, #54576	; 0xd530
   14060:	movw	r2, #654	; 0x28e
   14064:	movt	r0, #1
   14068:	movt	r1, #1
   1406c:	bl	17818 <UnityDefaultTestRun@@Base>
   14070:	movw	r0, #15696	; 0x3d50
   14074:	movw	r1, #53957	; 0xd2c5
   14078:	movw	r2, #655	; 0x28f
   1407c:	movt	r0, #1
   14080:	movt	r1, #1
   14084:	bl	17818 <UnityDefaultTestRun@@Base>
   14088:	pop	{fp, lr}
   1408c:	b	17978 <UnityEnd@@Base>
   14090:	andeq	r0, r0, r1
   14094:	andeq	r0, r0, r0
   14098:	andeq	r0, r0, r1
   1409c:	andeq	r0, r0, r0
   140a0:	push	{r4, r5, r6, lr}
   140a4:	sub	sp, sp, #8
   140a8:	movw	r0, #53984	; 0xd2e0
   140ac:	movw	r1, #53798	; 0xd226
   140b0:	movw	r2, #42282	; 0xa52a
   140b4:	movt	r0, #1
   140b8:	movt	r1, #1
   140bc:	movt	r2, #15831	; 0x3dd7
   140c0:	bl	1a18c <next@@Base+0x173c>
   140c4:	movw	r0, #55168	; 0xd780
   140c8:	movw	r6, #54608	; 0xd550
   140cc:	mov	r5, #0
   140d0:	movt	r0, #1
   140d4:	movt	r6, #1
   140d8:	add	r4, r0, #4
   140dc:	mov	r3, r6
   140e0:	ldr	r0, [r3, r5]!
   140e4:	ldr	r1, [r3, #16]
   140e8:	str	r1, [sp]
   140ec:	ldmib	r3, {r1, r2}
   140f0:	ldrb	r3, [r3, #12]
   140f4:	bl	1a8f0 <next@@Base+0x1ea0>
   140f8:	ldrd	r0, [r4, #-4]
   140fc:	bl	1b1a4 <next@@Base+0x2754>
   14100:	add	r5, r5, #20
   14104:	add	r4, r4, #8
   14108:	cmp	r5, #560	; 0x230
   1410c:	bne	140dc <main@@Base+0x30c>
   14110:	bl	1b920 <next@@Base+0x2ed0>
   14114:	add	sp, sp, #8
   14118:	pop	{r4, r5, r6, lr}
   1411c:	b	1c68c <next@@Base+0x3c3c>
   14120:	push	{fp, lr}
   14124:	bl	140a0 <main@@Base+0x2d0>
   14128:	movw	r0, #61696	; 0xf100
   1412c:	vmov.i32	q8, #0	; 0x00000000
   14130:	movt	r0, #2
   14134:	vst1.64	{d16-d17}, [r0 :128]
   14138:	movw	r0, #61680	; 0xf0f0
   1413c:	movt	r0, #2
   14140:	vst1.64	{d16-d17}, [r0 :128]
   14144:	movw	r0, #61712	; 0xf110
   14148:	movt	r0, #2
   1414c:	vst1.64	{d16-d17}, [r0 :128]
   14150:	movw	r0, #61728	; 0xf120
   14154:	movt	r0, #2
   14158:	vst1.64	{d16-d17}, [r0 :128]
   1415c:	movw	r0, #61744	; 0xf130
   14160:	movt	r0, #2
   14164:	vst1.64	{d16-d17}, [r0 :128]
   14168:	movw	r0, #61760	; 0xf140
   1416c:	movt	r0, #2
   14170:	vst1.64	{d16-d17}, [r0 :128]
   14174:	movw	r0, #61776	; 0xf150
   14178:	movt	r0, #2
   1417c:	vst1.64	{d16-d17}, [r0 :128]
   14180:	movw	r0, #61792	; 0xf160
   14184:	movt	r0, #2
   14188:	vst1.64	{d16-d17}, [r0 :128]
   1418c:	movw	r0, #61808	; 0xf170
   14190:	movt	r0, #2
   14194:	vst1.64	{d16-d17}, [r0 :128]
   14198:	movw	r0, #61824	; 0xf180
   1419c:	movt	r0, #2
   141a0:	vst1.64	{d16-d17}, [r0 :128]
   141a4:	movw	r0, #61840	; 0xf190
   141a8:	movt	r0, #2
   141ac:	vst1.64	{d16-d17}, [r0 :128]
   141b0:	movw	r0, #61856	; 0xf1a0
   141b4:	movt	r0, #2
   141b8:	vst1.64	{d16-d17}, [r0 :128]
   141bc:	movw	r0, #61872	; 0xf1b0
   141c0:	movt	r0, #2
   141c4:	vst1.64	{d16-d17}, [r0 :128]
   141c8:	movw	r0, #61888	; 0xf1c0
   141cc:	movt	r0, #2
   141d0:	vst1.64	{d16-d17}, [r0 :128]
   141d4:	movw	r0, #61904	; 0xf1d0
   141d8:	movt	r0, #2
   141dc:	vst1.64	{d16-d17}, [r0 :128]
   141e0:	movw	r0, #61920	; 0xf1e0
   141e4:	movt	r0, #2
   141e8:	vst1.64	{d16-d17}, [r0 :128]
   141ec:	movw	r0, #61936	; 0xf1f0
   141f0:	movt	r0, #2
   141f4:	vst1.64	{d16-d17}, [r0 :128]
   141f8:	movw	r0, #61952	; 0xf200
   141fc:	movt	r0, #2
   14200:	vst1.64	{d16-d17}, [r0 :128]
   14204:	movw	r0, #61968	; 0xf210
   14208:	movt	r0, #2
   1420c:	vst1.64	{d16-d17}, [r0 :128]
   14210:	movw	r0, #61984	; 0xf220
   14214:	movt	r0, #2
   14218:	vst1.64	{d16-d17}, [r0 :128]
   1421c:	movw	r0, #62000	; 0xf230
   14220:	movt	r0, #2
   14224:	vst1.64	{d16-d17}, [r0 :128]
   14228:	movw	r0, #62016	; 0xf240
   1422c:	movt	r0, #2
   14230:	vst1.64	{d16-d17}, [r0 :128]
   14234:	movw	r0, #62032	; 0xf250
   14238:	movt	r0, #2
   1423c:	vst1.64	{d16-d17}, [r0 :128]
   14240:	movw	r0, #62048	; 0xf260
   14244:	movt	r0, #2
   14248:	vst1.64	{d16-d17}, [r0 :128]
   1424c:	movw	r0, #62064	; 0xf270
   14250:	movt	r0, #2
   14254:	vst1.64	{d16-d17}, [r0 :128]
   14258:	movw	r0, #62080	; 0xf280
   1425c:	movt	r0, #2
   14260:	vst1.64	{d16-d17}, [r0 :128]
   14264:	movw	r0, #62096	; 0xf290
   14268:	movt	r0, #2
   1426c:	vst1.64	{d16-d17}, [r0 :128]
   14270:	movw	r0, #62112	; 0xf2a0
   14274:	movt	r0, #2
   14278:	vst1.64	{d16-d17}, [r0 :128]
   1427c:	pop	{fp, pc}
   14280:	movw	r0, #16544	; 0x40a0
   14284:	movw	r1, #16672	; 0x4120
   14288:	movt	r0, #1
   1428c:	movt	r1, #1
   14290:	b	1cb3c <__gcov_flush@@Base+0xb4>
   14294:	andeq	r0, r0, r0

00014298 <UnityPrint@@Base>:
   14298:	push	{r4, r5, r6, sl, fp, lr}
   1429c:	add	fp, sp, #16
   142a0:	movw	r4, #62128	; 0xf2b0
   142a4:	mov	r1, #16
   142a8:	movt	r4, #2
   142ac:	ldrd	r2, [r4]
   142b0:	adds	r2, r2, #1
   142b4:	adc	r3, r3, #0
   142b8:	cmp	r0, #0
   142bc:	strd	r2, [r4]
   142c0:	movwne	r1, #8
   142c4:	mov	r2, r4
   142c8:	ldr	r1, [r2, r1]!
   142cc:	adds	r1, r1, #1
   142d0:	str	r1, [r2]
   142d4:	ldr	r1, [r2, #4]
   142d8:	adc	r1, r1, #0
   142dc:	cmp	r0, #0
   142e0:	str	r1, [r2, #4]
   142e4:	beq	144a4 <UnityPrint@@Base+0x20c>
   142e8:	ldrb	r1, [r0]
   142ec:	mov	r2, #32
   142f0:	mov	r3, r4
   142f4:	cmp	r1, #0
   142f8:	movwne	r2, #24
   142fc:	ldr	r2, [r3, r2]!
   14300:	adds	r2, r2, #1
   14304:	str	r2, [r3]
   14308:	ldr	r2, [r3, #4]
   1430c:	adc	r2, r2, #0
   14310:	cmp	r1, #0
   14314:	str	r2, [r3, #4]
   14318:	beq	144a4 <UnityPrint@@Base+0x20c>
   1431c:	add	r5, r0, #1
   14320:	b	14344 <UnityPrint@@Base+0xac>
   14324:	ldrd	r0, [r4, #128]	; 0x80
   14328:	adds	r0, r0, #1
   1432c:	adc	r1, r1, #0
   14330:	strd	r0, [r4, #128]	; 0x80
   14334:	mov	r1, #2
   14338:	ldrb	r0, [r5, #-1]
   1433c:	bl	144b8 <UnityPrintNumberHex@@Base>
   14340:	b	14460 <UnityPrint@@Base+0x1c8>
   14344:	uxtb	r0, r1
   14348:	mov	r1, #48	; 0x30
   1434c:	mov	r2, r4
   14350:	cmp	r0, #127	; 0x7f
   14354:	movwcc	r1, #40	; 0x28
   14358:	ldr	r1, [r2, r1]!
   1435c:	adds	r1, r1, #1
   14360:	str	r1, [r2]
   14364:	ldr	r1, [r2, #4]
   14368:	adc	r1, r1, #0
   1436c:	cmp	r0, #126	; 0x7e
   14370:	str	r1, [r2, #4]
   14374:	bhi	143bc <UnityPrint@@Base+0x124>
   14378:	cmp	r0, #31
   1437c:	mov	r1, #64	; 0x40
   14380:	mov	r2, r4
   14384:	movwhi	r1, #56	; 0x38
   14388:	ldr	r1, [r2, r1]!
   1438c:	adds	r1, r1, #1
   14390:	str	r1, [r2]
   14394:	ldr	r1, [r2, #4]
   14398:	adc	r1, r1, #0
   1439c:	cmp	r0, #32
   143a0:	str	r1, [r2, #4]
   143a4:	bcc	143bc <UnityPrint@@Base+0x124>
   143a8:	ldrd	r2, [r4, #72]	; 0x48
   143ac:	adds	r2, r2, #1
   143b0:	adc	r3, r3, #0
   143b4:	strd	r2, [r4, #72]	; 0x48
   143b8:	b	1445c <UnityPrint@@Base+0x1c4>
   143bc:	ldrb	r6, [r5, #-1]
   143c0:	mov	r0, #88	; 0x58
   143c4:	mov	r1, r4
   143c8:	cmp	r6, #13
   143cc:	movweq	r0, #80	; 0x50
   143d0:	ldr	r0, [r1, r0]!
   143d4:	adds	r0, r0, #1
   143d8:	str	r0, [r1]
   143dc:	ldr	r0, [r1, #4]
   143e0:	adc	r0, r0, #0
   143e4:	cmp	r6, #13
   143e8:	str	r0, [r1, #4]
   143ec:	bne	14410 <UnityPrint@@Base+0x178>
   143f0:	ldrd	r0, [r4, #96]	; 0x60
   143f4:	adds	r0, r0, #1
   143f8:	adc	r1, r1, #0
   143fc:	strd	r0, [r4, #96]	; 0x60
   14400:	mov	r0, #92	; 0x5c
   14404:	bl	12760 <putchar@plt>
   14408:	mov	r0, #114	; 0x72
   1440c:	b	1445c <UnityPrint@@Base+0x1c4>
   14410:	mov	r0, #92	; 0x5c
   14414:	bl	12760 <putchar@plt>
   14418:	cmp	r6, #10
   1441c:	mov	r0, #112	; 0x70
   14420:	mov	r1, r4
   14424:	movweq	r0, #104	; 0x68
   14428:	ldr	r0, [r1, r0]!
   1442c:	adds	r0, r0, #1
   14430:	str	r0, [r1]
   14434:	ldr	r0, [r1, #4]
   14438:	adc	r0, r0, #0
   1443c:	cmp	r6, #10
   14440:	str	r0, [r1, #4]
   14444:	bne	14324 <UnityPrint@@Base+0x8c>
   14448:	ldrd	r0, [r4, #120]	; 0x78
   1444c:	adds	r0, r0, #1
   14450:	adc	r1, r1, #0
   14454:	strd	r0, [r4, #120]	; 0x78
   14458:	mov	r0, #110	; 0x6e
   1445c:	bl	12760 <putchar@plt>
   14460:	ldrd	r0, [r4, #136]	; 0x88
   14464:	mov	r2, r4
   14468:	adds	r0, r0, #1
   1446c:	adc	r1, r1, #0
   14470:	strd	r0, [r4, #136]	; 0x88
   14474:	mov	r0, #32
   14478:	ldrb	r1, [r5], #1
   1447c:	cmp	r1, #0
   14480:	movwne	r0, #24
   14484:	ldr	r0, [r2, r0]!
   14488:	adds	r0, r0, #1
   1448c:	str	r0, [r2]
   14490:	ldr	r0, [r2, #4]
   14494:	adc	r0, r0, #0
   14498:	cmp	r1, #0
   1449c:	str	r0, [r2, #4]
   144a0:	bne	14344 <UnityPrint@@Base+0xac>
   144a4:	ldrd	r0, [r4, #144]	; 0x90
   144a8:	adds	r0, r0, #1
   144ac:	adc	r1, r1, #0
   144b0:	strd	r0, [r4, #144]	; 0x90
   144b4:	pop	{r4, r5, r6, sl, fp, pc}

000144b8 <UnityPrintNumberHex@@Base>:
   144b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   144bc:	add	fp, sp, #24
   144c0:	movw	r6, #62288	; 0xf350
   144c4:	mov	r5, r0
   144c8:	add	r0, pc, #280	; 0x118
   144cc:	cmp	r1, #0
   144d0:	mov	r4, r1
   144d4:	movt	r6, #2
   144d8:	vld1.64	{d16-d17}, [r0]
   144dc:	mov	r0, #24
   144e0:	vld1.64	{d18-d19}, [r6 :128]
   144e4:	movwne	r0, #16
   144e8:	mov	r7, r6
   144ec:	vadd.i64	q8, q9, q8
   144f0:	vst1.64	{d16-d17}, [r7 :128], r0
   144f4:	mov	r0, #48	; 0x30
   144f8:	bl	12760 <putchar@plt>
   144fc:	mov	r0, #120	; 0x78
   14500:	bl	12760 <putchar@plt>
   14504:	ldrd	r0, [r7]
   14508:	adds	r0, r0, #1
   1450c:	adc	r1, r1, #0
   14510:	cmp	r4, #0
   14514:	strd	r0, [r7]
   14518:	beq	145d0 <UnityPrintNumberHex@@Base+0x118>
   1451c:	mov	r8, #15
   14520:	sub	r4, r4, #1
   14524:	mov	r1, #40	; 0x28
   14528:	mov	r2, r6
   1452c:	uxtb	r7, r4
   14530:	lsl	r0, r7, #2
   14534:	and	r0, r8, r5, lsr r0
   14538:	cmp	r0, #10
   1453c:	movwcc	r1, #32
   14540:	ldr	r1, [r2, r1]!
   14544:	adds	r1, r1, #1
   14548:	str	r1, [r2]
   1454c:	ldr	r1, [r2, #4]
   14550:	adc	r1, r1, #0
   14554:	cmp	r0, #9
   14558:	str	r1, [r2, #4]
   1455c:	bhi	14578 <UnityPrintNumberHex@@Base+0xc0>
   14560:	ldrd	r2, [r6, #48]	; 0x30
   14564:	orr	r0, r0, #48	; 0x30
   14568:	adds	r2, r2, #1
   1456c:	adc	r3, r3, #0
   14570:	strd	r2, [r6, #48]	; 0x30
   14574:	b	1458c <UnityPrintNumberHex@@Base+0xd4>
   14578:	ldrd	r2, [r6, #56]	; 0x38
   1457c:	add	r0, r0, #55	; 0x37
   14580:	adds	r2, r2, #1
   14584:	adc	r3, r3, #0
   14588:	strd	r2, [r6, #56]	; 0x38
   1458c:	bl	12760 <putchar@plt>
   14590:	ldrd	r0, [r6, #64]	; 0x40
   14594:	adds	r0, r0, #1
   14598:	adc	r1, r1, #0
   1459c:	cmp	r7, #0
   145a0:	strd	r0, [r6, #64]	; 0x40
   145a4:	mov	r0, #24
   145a8:	mov	r1, r6
   145ac:	movwne	r0, #16
   145b0:	ldr	r0, [r1, r0]!
   145b4:	adds	r0, r0, #1
   145b8:	str	r0, [r1]
   145bc:	ldr	r0, [r1, #4]
   145c0:	adc	r0, r0, #0
   145c4:	cmp	r7, #0
   145c8:	str	r0, [r1, #4]
   145cc:	bne	14520 <UnityPrintNumberHex@@Base+0x68>
   145d0:	ldrd	r0, [r6, #72]	; 0x48
   145d4:	adds	r0, r0, #1
   145d8:	adc	r1, r1, #0
   145dc:	strd	r0, [r6, #72]	; 0x48
   145e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145e4:	nop	{0}
   145e8:	andeq	r0, r0, r1
   145ec:	andeq	r0, r0, r0
   145f0:	andeq	r0, r0, r1
   145f4:	andeq	r0, r0, r0

000145f8 <UnityPrintLen@@Base>:
   145f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145fc:	add	fp, sp, #24
   14600:	movw	r6, #62368	; 0xf3a0
   14604:	mov	r4, r1
   14608:	mov	r8, r0
   1460c:	movt	r6, #2
   14610:	ldrd	r0, [r6]
   14614:	adds	r0, r0, #1
   14618:	adc	r1, r1, #0
   1461c:	cmp	r8, #0
   14620:	strd	r0, [r6]
   14624:	mov	r0, #16
   14628:	mov	r1, r6
   1462c:	movwne	r0, #8
   14630:	ldr	r0, [r1, r0]!
   14634:	adds	r0, r0, #1
   14638:	str	r0, [r1]
   1463c:	ldr	r0, [r1, #4]
   14640:	adc	r0, r0, #0
   14644:	cmp	r8, #0
   14648:	str	r0, [r1, #4]
   1464c:	beq	14840 <UnityPrintLen@@Base+0x248>
   14650:	ldrb	r0, [r8]
   14654:	mov	r1, #32
   14658:	mov	r2, r6
   1465c:	cmp	r0, #0
   14660:	movwne	r1, #24
   14664:	ldr	r1, [r2, r1]!
   14668:	adds	r1, r1, #1
   1466c:	str	r1, [r2]
   14670:	ldr	r1, [r2, #4]
   14674:	adc	r1, r1, #0
   14678:	cmp	r0, #0
   1467c:	str	r1, [r2, #4]
   14680:	beq	14840 <UnityPrintLen@@Base+0x248>
   14684:	mov	r7, r8
   14688:	sub	r1, r7, r8
   1468c:	mov	r2, #48	; 0x30
   14690:	mov	r3, r6
   14694:	cmp	r1, r4
   14698:	movwcc	r2, #40	; 0x28
   1469c:	ldr	r2, [r3, r2]!
   146a0:	adds	r2, r2, #1
   146a4:	str	r2, [r3]
   146a8:	ldr	r2, [r3, #4]
   146ac:	adc	r2, r2, #0
   146b0:	cmp	r1, r4
   146b4:	str	r2, [r3, #4]
   146b8:	bcs	14840 <UnityPrintLen@@Base+0x248>
   146bc:	uxtb	r0, r0
   146c0:	mov	r1, #64	; 0x40
   146c4:	mov	r2, r6
   146c8:	cmp	r0, #127	; 0x7f
   146cc:	movwcc	r1, #56	; 0x38
   146d0:	ldr	r1, [r2, r1]!
   146d4:	adds	r1, r1, #1
   146d8:	str	r1, [r2]
   146dc:	ldr	r1, [r2, #4]
   146e0:	adc	r1, r1, #0
   146e4:	cmp	r0, #126	; 0x7e
   146e8:	str	r1, [r2, #4]
   146ec:	bhi	14734 <UnityPrintLen@@Base+0x13c>
   146f0:	cmp	r0, #31
   146f4:	mov	r1, #80	; 0x50
   146f8:	mov	r2, r6
   146fc:	movwhi	r1, #72	; 0x48
   14700:	ldr	r1, [r2, r1]!
   14704:	adds	r1, r1, #1
   14708:	str	r1, [r2]
   1470c:	ldr	r1, [r2, #4]
   14710:	adc	r1, r1, #0
   14714:	cmp	r0, #32
   14718:	str	r1, [r2, #4]
   1471c:	bcc	14734 <UnityPrintLen@@Base+0x13c>
   14720:	ldrd	r2, [r6, #88]	; 0x58
   14724:	adds	r2, r2, #1
   14728:	adc	r3, r3, #0
   1472c:	strd	r2, [r6, #88]	; 0x58
   14730:	b	147d4 <UnityPrintLen@@Base+0x1dc>
   14734:	ldrb	r5, [r7]
   14738:	mov	r0, #104	; 0x68
   1473c:	mov	r1, r6
   14740:	cmp	r5, #13
   14744:	movweq	r0, #96	; 0x60
   14748:	ldr	r0, [r1, r0]!
   1474c:	adds	r0, r0, #1
   14750:	str	r0, [r1]
   14754:	ldr	r0, [r1, #4]
   14758:	adc	r0, r0, #0
   1475c:	cmp	r5, #13
   14760:	str	r0, [r1, #4]
   14764:	bne	14788 <UnityPrintLen@@Base+0x190>
   14768:	ldrd	r0, [r6, #112]	; 0x70
   1476c:	adds	r0, r0, #1
   14770:	adc	r1, r1, #0
   14774:	strd	r0, [r6, #112]	; 0x70
   14778:	mov	r0, #92	; 0x5c
   1477c:	bl	12760 <putchar@plt>
   14780:	mov	r0, #114	; 0x72
   14784:	b	147d4 <UnityPrintLen@@Base+0x1dc>
   14788:	mov	r0, #92	; 0x5c
   1478c:	bl	12760 <putchar@plt>
   14790:	cmp	r5, #10
   14794:	mov	r0, #128	; 0x80
   14798:	mov	r1, r6
   1479c:	movweq	r0, #120	; 0x78
   147a0:	ldr	r0, [r1, r0]!
   147a4:	adds	r0, r0, #1
   147a8:	str	r0, [r1]
   147ac:	ldr	r0, [r1, #4]
   147b0:	adc	r0, r0, #0
   147b4:	cmp	r5, #10
   147b8:	str	r0, [r1, #4]
   147bc:	bne	14820 <UnityPrintLen@@Base+0x228>
   147c0:	ldrd	r0, [r6, #136]	; 0x88
   147c4:	adds	r0, r0, #1
   147c8:	adc	r1, r1, #0
   147cc:	strd	r0, [r6, #136]	; 0x88
   147d0:	mov	r0, #110	; 0x6e
   147d4:	bl	12760 <putchar@plt>
   147d8:	ldrd	r0, [r6, #152]	; 0x98
   147dc:	mov	r2, r6
   147e0:	adds	r0, r0, #1
   147e4:	adc	r1, r1, #0
   147e8:	strd	r0, [r6, #152]	; 0x98
   147ec:	mov	r1, #32
   147f0:	ldrb	r0, [r7, #1]!
   147f4:	cmp	r0, #0
   147f8:	movwne	r1, #24
   147fc:	ldr	r1, [r2, r1]!
   14800:	adds	r1, r1, #1
   14804:	str	r1, [r2]
   14808:	ldr	r1, [r2, #4]
   1480c:	adc	r1, r1, #0
   14810:	cmp	r0, #0
   14814:	str	r1, [r2, #4]
   14818:	bne	14688 <UnityPrintLen@@Base+0x90>
   1481c:	b	14840 <UnityPrintLen@@Base+0x248>
   14820:	ldrd	r0, [r6, #144]	; 0x90
   14824:	adds	r0, r0, #1
   14828:	adc	r1, r1, #0
   1482c:	strd	r0, [r6, #144]	; 0x90
   14830:	mov	r1, #2
   14834:	ldrb	r0, [r7]
   14838:	bl	144b8 <UnityPrintNumberHex@@Base>
   1483c:	b	147d8 <UnityPrintLen@@Base+0x1e0>
   14840:	ldrd	r0, [r6, #160]	; 0xa0
   14844:	adds	r0, r0, #1
   14848:	adc	r1, r1, #0
   1484c:	strd	r0, [r6, #160]	; 0xa0
   14850:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014854 <UnityPrintNumberByStyle@@Base>:
   14854:	push	{r4, r5, r6, sl, fp, lr}
   14858:	add	fp, sp, #16
   1485c:	movw	r6, #62544	; 0xf450
   14860:	movt	r6, #2
   14864:	ldrd	r2, [r6]
   14868:	mov	r4, r6
   1486c:	adds	r2, r2, #1
   14870:	adc	r3, r3, #0
   14874:	strd	r2, [r6]
   14878:	ands	r2, r1, #16
   1487c:	mov	r3, #16
   14880:	movwne	r3, #8
   14884:	ldr	r3, [r4, r3]!
   14888:	adds	r3, r3, #1
   1488c:	str	r3, [r4]
   14890:	ldr	r3, [r4, #4]
   14894:	adc	r3, r3, #0
   14898:	cmp	r2, #0
   1489c:	str	r3, [r4, #4]
   148a0:	beq	148bc <UnityPrintNumberByStyle@@Base+0x68>
   148a4:	ldrd	r2, [r6, #24]
   148a8:	adds	r2, r2, #1
   148ac:	adc	r3, r3, #0
   148b0:	strd	r2, [r6, #24]
   148b4:	bl	14948 <UnityPrintNumber@@Base>
   148b8:	b	14934 <UnityPrintNumberByStyle@@Base+0xe0>
   148bc:	ands	r2, r1, #32
   148c0:	mov	r3, #40	; 0x28
   148c4:	mov	r5, r6
   148c8:	and	r1, r1, #15
   148cc:	movwne	r3, #32
   148d0:	ldr	r3, [r5, r3]!
   148d4:	adds	r3, r3, #1
   148d8:	str	r3, [r5]
   148dc:	ldr	r3, [r5, #4]
   148e0:	adc	r3, r3, #0
   148e4:	cmp	r2, #0
   148e8:	str	r3, [r5, #4]
   148ec:	beq	1491c <UnityPrintNumberByStyle@@Base+0xc8>
   148f0:	ldrd	r2, [r6, #48]	; 0x30
   148f4:	adds	r2, r2, #1
   148f8:	adc	r3, r3, #0
   148fc:	strd	r2, [r6, #48]	; 0x30
   14900:	movw	r2, #55848	; 0xda28
   14904:	movt	r2, #1
   14908:	add	r1, r2, r1, lsl #2
   1490c:	ldr	r1, [r1, #-4]
   14910:	and	r0, r1, r0
   14914:	bl	14b18 <UnityPrintNumberUnsigned@@Base>
   14918:	b	14934 <UnityPrintNumberByStyle@@Base+0xe0>
   1491c:	ldrd	r2, [r6, #56]	; 0x38
   14920:	lsl	r1, r1, #1
   14924:	adds	r2, r2, #1
   14928:	adc	r3, r3, #0
   1492c:	strd	r2, [r6, #56]	; 0x38
   14930:	bl	144b8 <UnityPrintNumberHex@@Base>
   14934:	ldrd	r0, [r6, #64]	; 0x40
   14938:	adds	r0, r0, #1
   1493c:	adc	r1, r1, #0
   14940:	strd	r0, [r6, #64]	; 0x40
   14944:	pop	{r4, r5, r6, sl, fp, pc}

00014948 <UnityPrintNumber@@Base>:
   14948:	push	{r4, r5, r6, r7, fp, lr}
   1494c:	add	fp, sp, #16
   14950:	movw	r5, #62624	; 0xf4a0
   14954:	mov	r4, r0
   14958:	movt	r5, #2
   1495c:	ldrd	r0, [r5]
   14960:	adds	r0, r0, #1
   14964:	adc	r1, r1, #0
   14968:	cmp	r4, #0
   1496c:	strd	r0, [r5]
   14970:	mov	r0, #16
   14974:	mov	r1, r5
   14978:	movwlt	r0, #8
   1497c:	ldr	r0, [r1, r0]!
   14980:	adds	r0, r0, #1
   14984:	str	r0, [r1]
   14988:	ldr	r0, [r1, #4]
   1498c:	adc	r0, r0, #0
   14990:	cmn	r4, #1
   14994:	str	r0, [r1, #4]
   14998:	ble	149b0 <UnityPrintNumber@@Base+0x68>
   1499c:	ldrd	r0, [r5, #32]
   149a0:	adds	r0, r0, #1
   149a4:	adc	r1, r1, #0
   149a8:	strd	r0, [r5, #32]
   149ac:	b	149cc <UnityPrintNumber@@Base+0x84>
   149b0:	ldrd	r0, [r5, #24]
   149b4:	adds	r0, r0, #1
   149b8:	adc	r1, r1, #0
   149bc:	strd	r0, [r5, #24]
   149c0:	mov	r0, #45	; 0x2d
   149c4:	bl	12760 <putchar@plt>
   149c8:	rsb	r4, r4, #0
   149cc:	ldrd	r0, [r5, #40]	; 0x28
   149d0:	mov	r6, #1
   149d4:	adds	r0, r0, #1
   149d8:	adc	r1, r1, #0
   149dc:	cmp	r4, #9
   149e0:	strd	r0, [r5, #40]	; 0x28
   149e4:	mov	r0, #56	; 0x38
   149e8:	mov	r1, r5
   149ec:	movwhi	r0, #48	; 0x30
   149f0:	ldr	r0, [r1, r0]!
   149f4:	adds	r0, r0, #1
   149f8:	str	r0, [r1]
   149fc:	ldr	r0, [r1, #4]
   14a00:	adc	r0, r0, #0
   14a04:	cmp	r4, #10
   14a08:	str	r0, [r1, #4]
   14a0c:	bcc	14a90 <UnityPrintNumber@@Base+0x148>
   14a10:	mov	r6, #1
   14a14:	add	r0, r6, r6, lsl #2
   14a18:	mov	r1, #72	; 0x48
   14a1c:	mov	r2, r5
   14a20:	cmp	r6, r0, lsl #1
   14a24:	movwcc	r1, #64	; 0x40
   14a28:	ldr	r1, [r2, r1]!
   14a2c:	adds	r1, r1, #1
   14a30:	str	r1, [r2]
   14a34:	ldr	r1, [r2, #4]
   14a38:	adc	r1, r1, #0
   14a3c:	cmp	r6, r0, lsl #1
   14a40:	str	r1, [r2, #4]
   14a44:	bcs	14a90 <UnityPrintNumber@@Base+0x148>
   14a48:	lsl	r6, r0, #1
   14a4c:	ldrd	r0, [r5, #80]	; 0x50
   14a50:	mov	r2, r5
   14a54:	adds	r0, r0, #1
   14a58:	adc	r1, r1, #0
   14a5c:	strd	r0, [r5, #80]	; 0x50
   14a60:	udiv	r0, r4, r6
   14a64:	mov	r1, #56	; 0x38
   14a68:	cmp	r0, #9
   14a6c:	movwhi	r1, #48	; 0x30
   14a70:	ldr	r1, [r2, r1]!
   14a74:	adds	r1, r1, #1
   14a78:	str	r1, [r2]
   14a7c:	ldr	r1, [r2, #4]
   14a80:	adc	r1, r1, #0
   14a84:	cmp	r0, #9
   14a88:	str	r1, [r2, #4]
   14a8c:	bhi	14a14 <UnityPrintNumber@@Base+0xcc>
   14a90:	ldrd	r0, [r5, #88]	; 0x58
   14a94:	movw	r7, #52429	; 0xcccd
   14a98:	movt	r7, #52428	; 0xcccc
   14a9c:	adds	r0, r0, #1
   14aa0:	adc	r1, r1, #0
   14aa4:	strd	r0, [r5, #88]	; 0x58
   14aa8:	udiv	r0, r4, r6
   14aac:	umull	r1, r2, r0, r7
   14ab0:	lsr	r1, r2, #3
   14ab4:	add	r1, r1, r1, lsl #2
   14ab8:	sub	r0, r0, r1, lsl #1
   14abc:	orr	r0, r0, #48	; 0x30
   14ac0:	bl	12760 <putchar@plt>
   14ac4:	cmp	r6, #9
   14ac8:	mov	r0, #104	; 0x68
   14acc:	mov	r1, r5
   14ad0:	movwhi	r0, #96	; 0x60
   14ad4:	ldr	r0, [r1, r0]!
   14ad8:	adds	r0, r0, #1
   14adc:	str	r0, [r1]
   14ae0:	ldr	r0, [r1, #4]
   14ae4:	adc	r0, r0, #0
   14ae8:	cmp	r6, #9
   14aec:	str	r0, [r1, #4]
   14af0:	umull	r0, r1, r6, r7
   14af4:	lsr	r0, r1, #3
   14af8:	mov	r6, r0
   14afc:	bhi	14aa8 <UnityPrintNumber@@Base+0x160>
   14b00:	ldrd	r0, [r5, #112]	; 0x70
   14b04:	adds	r0, r0, #1
   14b08:	adc	r1, r1, #0
   14b0c:	strd	r0, [r5, #112]	; 0x70
   14b10:	pop	{r4, r5, r6, r7, fp, pc}
   14b14:	nop	{0}

00014b18 <UnityPrintNumberUnsigned@@Base>:
   14b18:	push	{r4, r5, r6, r7, fp, lr}
   14b1c:	add	fp, sp, #16
   14b20:	movw	r5, #62752	; 0xf520
   14b24:	mov	r4, r0
   14b28:	add	r0, pc, #320	; 0x140
   14b2c:	mov	r6, #1
   14b30:	movt	r5, #2
   14b34:	vld1.64	{d16-d17}, [r0]
   14b38:	mov	r0, #24
   14b3c:	cmp	r4, #9
   14b40:	vld1.64	{d18-d19}, [r5 :128]
   14b44:	movwhi	r0, #16
   14b48:	mov	r1, r5
   14b4c:	vadd.i64	q8, q9, q8
   14b50:	vst1.64	{d16-d17}, [r1 :128], r0
   14b54:	ldm	r1, {r0, r3}
   14b58:	adds	r0, r0, #1
   14b5c:	adc	r3, r3, #0
   14b60:	cmp	r4, #10
   14b64:	stm	r1, {r0, r3}
   14b68:	bcc	14bec <UnityPrintNumberUnsigned@@Base+0xd4>
   14b6c:	mov	r6, #1
   14b70:	add	r0, r6, r6, lsl #2
   14b74:	mov	r1, #40	; 0x28
   14b78:	mov	r2, r5
   14b7c:	cmp	r6, r0, lsl #1
   14b80:	movwcc	r1, #32
   14b84:	ldr	r1, [r2, r1]!
   14b88:	adds	r1, r1, #1
   14b8c:	str	r1, [r2]
   14b90:	ldr	r1, [r2, #4]
   14b94:	adc	r1, r1, #0
   14b98:	cmp	r6, r0, lsl #1
   14b9c:	str	r1, [r2, #4]
   14ba0:	bcs	14bec <UnityPrintNumberUnsigned@@Base+0xd4>
   14ba4:	lsl	r6, r0, #1
   14ba8:	ldrd	r0, [r5, #48]	; 0x30
   14bac:	mov	r2, r5
   14bb0:	adds	r0, r0, #1
   14bb4:	adc	r1, r1, #0
   14bb8:	strd	r0, [r5, #48]	; 0x30
   14bbc:	udiv	r0, r4, r6
   14bc0:	mov	r1, #24
   14bc4:	cmp	r0, #9
   14bc8:	movwhi	r1, #16
   14bcc:	ldr	r1, [r2, r1]!
   14bd0:	adds	r1, r1, #1
   14bd4:	str	r1, [r2]
   14bd8:	ldr	r1, [r2, #4]
   14bdc:	adc	r1, r1, #0
   14be0:	cmp	r0, #9
   14be4:	str	r1, [r2, #4]
   14be8:	bhi	14b70 <UnityPrintNumberUnsigned@@Base+0x58>
   14bec:	ldrd	r0, [r5, #56]	; 0x38
   14bf0:	movw	r7, #52429	; 0xcccd
   14bf4:	movt	r7, #52428	; 0xcccc
   14bf8:	adds	r0, r0, #1
   14bfc:	adc	r1, r1, #0
   14c00:	strd	r0, [r5, #56]	; 0x38
   14c04:	udiv	r0, r4, r6
   14c08:	umull	r1, r2, r0, r7
   14c0c:	lsr	r1, r2, #3
   14c10:	add	r1, r1, r1, lsl #2
   14c14:	sub	r0, r0, r1, lsl #1
   14c18:	orr	r0, r0, #48	; 0x30
   14c1c:	bl	12760 <putchar@plt>
   14c20:	cmp	r6, #9
   14c24:	mov	r0, #72	; 0x48
   14c28:	mov	r1, r5
   14c2c:	movwhi	r0, #64	; 0x40
   14c30:	ldr	r0, [r1, r0]!
   14c34:	adds	r0, r0, #1
   14c38:	str	r0, [r1]
   14c3c:	ldr	r0, [r1, #4]
   14c40:	adc	r0, r0, #0
   14c44:	cmp	r6, #9
   14c48:	str	r0, [r1, #4]
   14c4c:	umull	r0, r1, r6, r7
   14c50:	lsr	r0, r1, #3
   14c54:	mov	r6, r0
   14c58:	bhi	14c04 <UnityPrintNumberUnsigned@@Base+0xec>
   14c5c:	ldrd	r0, [r5, #80]	; 0x50
   14c60:	adds	r0, r0, #1
   14c64:	adc	r1, r1, #0
   14c68:	strd	r0, [r5, #80]	; 0x50
   14c6c:	pop	{r4, r5, r6, r7, fp, pc}
   14c70:	andeq	r0, r0, r1
   14c74:	andeq	r0, r0, r0
   14c78:	andeq	r0, r0, r1
   14c7c:	andeq	r0, r0, r0

00014c80 <UnityPrintMask@@Base>:
   14c80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c84:	add	fp, sp, #24
   14c88:	movw	r6, #62848	; 0xf580
   14c8c:	mov	r5, r0
   14c90:	add	r0, pc, #312	; 0x138
   14c94:	mov	r8, r1
   14c98:	mov	r7, #-2147483648	; 0x80000000
   14c9c:	mov	r4, #1
   14ca0:	movt	r6, #2
   14ca4:	vld1.64	{d16-d17}, [r0]
   14ca8:	vld1.64	{d18-d19}, [r6 :128]
   14cac:	mov	r0, r6
   14cb0:	vadd.i64	q8, q9, q8
   14cb4:	vst1.64	{d16-d17}, [r0 :128]!
   14cb8:	ldrd	r2, [r0]
   14cbc:	adds	r2, r2, #1
   14cc0:	adc	r3, r3, #0
   14cc4:	strd	r2, [r0]
   14cc8:	ands	r0, r7, r5
   14ccc:	mov	r1, #40	; 0x28
   14cd0:	mov	r2, r6
   14cd4:	movwne	r1, #32
   14cd8:	ldr	r1, [r2, r1]!
   14cdc:	adds	r1, r1, #1
   14ce0:	str	r1, [r2]
   14ce4:	ldr	r1, [r2, #4]
   14ce8:	adc	r1, r1, #0
   14cec:	cmp	r0, #0
   14cf0:	str	r1, [r2, #4]
   14cf4:	beq	14d40 <UnityPrintMask@@Base+0xc0>
   14cf8:	ands	r0, r7, r8
   14cfc:	mov	r1, #56	; 0x38
   14d00:	mov	r2, r6
   14d04:	movwne	r1, #48	; 0x30
   14d08:	ldr	r1, [r2, r1]!
   14d0c:	adds	r1, r1, #1
   14d10:	str	r1, [r2]
   14d14:	ldr	r1, [r2, #4]
   14d18:	adc	r1, r1, #0
   14d1c:	cmp	r0, #0
   14d20:	str	r1, [r2, #4]
   14d24:	beq	14d58 <UnityPrintMask@@Base+0xd8>
   14d28:	ldrd	r0, [r6, #64]	; 0x40
   14d2c:	adds	r0, r0, #1
   14d30:	adc	r1, r1, #0
   14d34:	strd	r0, [r6, #64]	; 0x40
   14d38:	mov	r0, #49	; 0x31
   14d3c:	b	14d6c <UnityPrintMask@@Base+0xec>
   14d40:	ldrd	r0, [r6, #80]	; 0x50
   14d44:	adds	r0, r0, #1
   14d48:	adc	r1, r1, #0
   14d4c:	strd	r0, [r6, #80]	; 0x50
   14d50:	mov	r0, #88	; 0x58
   14d54:	b	14d6c <UnityPrintMask@@Base+0xec>
   14d58:	ldrd	r0, [r6, #72]	; 0x48
   14d5c:	adds	r0, r0, #1
   14d60:	adc	r1, r1, #0
   14d64:	strd	r0, [r6, #72]	; 0x48
   14d68:	mov	r0, #48	; 0x30
   14d6c:	bl	12760 <putchar@plt>
   14d70:	ldrd	r0, [r6, #88]	; 0x58
   14d74:	lsr	r7, r7, #1
   14d78:	adds	r0, r0, #1
   14d7c:	adc	r1, r1, #0
   14d80:	cmp	r4, #32
   14d84:	add	r4, r4, #1
   14d88:	strd	r0, [r6, #88]	; 0x58
   14d8c:	mov	r0, #24
   14d90:	mov	r1, r6
   14d94:	movwcc	r0, #16
   14d98:	ldr	r0, [r1, r0]!
   14d9c:	adds	r0, r0, #1
   14da0:	str	r0, [r1]
   14da4:	ldr	r0, [r1, #4]
   14da8:	adc	r0, r0, #0
   14dac:	cmp	r4, #33	; 0x21
   14db0:	str	r0, [r1, #4]
   14db4:	bne	14cc8 <UnityPrintMask@@Base+0x48>
   14db8:	ldrd	r0, [r6, #96]	; 0x60
   14dbc:	adds	r0, r0, #1
   14dc0:	adc	r1, r1, #0
   14dc4:	strd	r0, [r6, #96]	; 0x60
   14dc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14dcc:	nop	{0}
   14dd0:	andeq	r0, r0, r1
   14dd4:	andeq	r0, r0, r0
   14dd8:	andeq	r0, r0, r1
   14ddc:	andeq	r0, r0, r0

00014de0 <UnityPrintFail@@Base>:
   14de0:	movw	r0, #62960	; 0xf5f0
   14de4:	add	r1, pc, #28
   14de8:	movt	r0, #2
   14dec:	vld1.64	{d16-d17}, [r1]
   14df0:	vld1.64	{d18-d19}, [r0 :128]
   14df4:	vadd.i64	q8, q9, q8
   14df8:	vst1.64	{d16-d17}, [r0 :128]
   14dfc:	movw	r0, #55400	; 0xd868
   14e00:	movt	r0, #1
   14e04:	b	14298 <UnityPrint@@Base>
   14e08:	andeq	r0, r0, r1
   14e0c:	andeq	r0, r0, r0
   14e10:	andeq	r0, r0, r1
   14e14:	andeq	r0, r0, r0

00014e18 <UnityPrintOk@@Base>:
   14e18:	movw	r0, #62976	; 0xf600
   14e1c:	add	r1, pc, #28
   14e20:	movt	r0, #2
   14e24:	vld1.64	{d16-d17}, [r1]
   14e28:	vld1.64	{d18-d19}, [r0 :128]
   14e2c:	vadd.i64	q8, q9, q8
   14e30:	vst1.64	{d16-d17}, [r0 :128]
   14e34:	movw	r0, #55392	; 0xd860
   14e38:	movt	r0, #1
   14e3c:	b	14298 <UnityPrint@@Base>
   14e40:	andeq	r0, r0, r1
   14e44:	andeq	r0, r0, r0
   14e48:	andeq	r0, r0, r1
   14e4c:	andeq	r0, r0, r0

00014e50 <UnityConcludeTest@@Base>:
   14e50:	push	{r4, r5, fp, lr}
   14e54:	add	fp, sp, #8
   14e58:	movw	r4, #62992	; 0xf610
   14e5c:	movw	r5, #1832	; 0x728
   14e60:	movt	r4, #2
   14e64:	movt	r5, #3
   14e68:	ldrd	r0, [r4]
   14e6c:	mov	r2, r4
   14e70:	adds	r0, r0, #1
   14e74:	adc	r1, r1, #0
   14e78:	strd	r0, [r4]
   14e7c:	ldr	r0, [r5, #36]	; 0x24
   14e80:	mov	r1, #16
   14e84:	cmp	r0, #0
   14e88:	movwne	r1, #8
   14e8c:	ldr	r1, [r2, r1]!
   14e90:	adds	r1, r1, #1
   14e94:	str	r1, [r2]
   14e98:	ldr	r1, [r2, #4]
   14e9c:	adc	r1, r1, #0
   14ea0:	cmp	r0, #0
   14ea4:	str	r1, [r2, #4]
   14ea8:	beq	14ecc <UnityConcludeTest@@Base+0x7c>
   14eac:	ldrd	r0, [r4, #24]
   14eb0:	ldr	r2, [r5, #28]
   14eb4:	adds	r0, r0, #1
   14eb8:	add	r2, r2, #1
   14ebc:	adc	r1, r1, #0
   14ec0:	str	r2, [r5, #28]
   14ec4:	strd	r0, [r4, #24]
   14ec8:	b	14f48 <UnityConcludeTest@@Base+0xf8>
   14ecc:	ldr	r0, [r5, #32]
   14ed0:	mov	r1, #40	; 0x28
   14ed4:	mov	r2, r4
   14ed8:	cmp	r0, #0
   14edc:	movwne	r1, #32
   14ee0:	ldr	r1, [r2, r1]!
   14ee4:	adds	r1, r1, #1
   14ee8:	str	r1, [r2]
   14eec:	ldr	r1, [r2, #4]
   14ef0:	adc	r1, r1, #0
   14ef4:	cmp	r0, #0
   14ef8:	str	r1, [r2, #4]
   14efc:	beq	14f20 <UnityConcludeTest@@Base+0xd0>
   14f00:	ldrd	r0, [r4, #56]	; 0x38
   14f04:	ldr	r2, [r5, #24]
   14f08:	adds	r0, r0, #1
   14f0c:	add	r2, r2, #1
   14f10:	adc	r1, r1, #0
   14f14:	str	r2, [r5, #24]
   14f18:	strd	r0, [r4, #56]	; 0x38
   14f1c:	b	14f48 <UnityConcludeTest@@Base+0xf8>
   14f20:	ldrd	r0, [r4, #48]	; 0x30
   14f24:	adds	r0, r0, #1
   14f28:	adc	r1, r1, #0
   14f2c:	strd	r0, [r4, #48]	; 0x30
   14f30:	ldr	r0, [r5]
   14f34:	ldr	r1, [r5, #16]
   14f38:	bl	14f70 <UnityConcludeTest@@Base+0x120>
   14f3c:	movw	r0, #55395	; 0xd863
   14f40:	movt	r0, #1
   14f44:	bl	14298 <UnityPrint@@Base>
   14f48:	mov	r0, #0
   14f4c:	str	r0, [r5, #32]
   14f50:	str	r0, [r5, #36]	; 0x24
   14f54:	ldrd	r0, [r4, #64]	; 0x40
   14f58:	adds	r0, r0, #1
   14f5c:	adc	r1, r1, #0
   14f60:	strd	r0, [r4, #64]	; 0x40
   14f64:	mov	r0, #10
   14f68:	pop	{r4, r5, fp, lr}
   14f6c:	b	12760 <putchar@plt>
   14f70:	push	{r4, sl, fp, lr}
   14f74:	add	fp, sp, #8
   14f78:	mov	r4, r1
   14f7c:	movw	r1, #63072	; 0xf660
   14f80:	add	r2, pc, #72	; 0x48
   14f84:	movt	r1, #2
   14f88:	vld1.64	{d16-d17}, [r2]
   14f8c:	vld1.64	{d18-d19}, [r1 :128]
   14f90:	vadd.i64	q8, q9, q8
   14f94:	vst1.64	{d16-d17}, [r1 :128]
   14f98:	bl	14298 <UnityPrint@@Base>
   14f9c:	mov	r0, #58	; 0x3a
   14fa0:	bl	12760 <putchar@plt>
   14fa4:	mov	r0, r4
   14fa8:	bl	14948 <UnityPrintNumber@@Base>
   14fac:	mov	r0, #58	; 0x3a
   14fb0:	bl	12760 <putchar@plt>
   14fb4:	movw	r0, #1832	; 0x728
   14fb8:	movt	r0, #3
   14fbc:	ldr	r0, [r0, #4]
   14fc0:	bl	14298 <UnityPrint@@Base>
   14fc4:	mov	r0, #58	; 0x3a
   14fc8:	pop	{r4, sl, fp, lr}
   14fcc:	b	12760 <putchar@plt>
   14fd0:	andeq	r0, r0, r1
   14fd4:	andeq	r0, r0, r0
   14fd8:	andeq	r0, r0, r1
   14fdc:	andeq	r0, r0, r0

00014fe0 <UnityAssertBits@@Base>:
   14fe0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fe4:	add	fp, sp, #24
   14fe8:	mov	r6, r0
   14fec:	movw	r0, #63088	; 0xf670
   14ff0:	mov	r8, r3
   14ff4:	mov	r5, r2
   14ff8:	movw	r4, #1832	; 0x728
   14ffc:	mov	r7, r1
   15000:	movt	r0, #2
   15004:	movt	r4, #3
   15008:	ldrd	r2, [r0]
   1500c:	adds	r2, r2, #1
   15010:	adc	r3, r3, #0
   15014:	strd	r2, [r0]
   15018:	ldrd	r2, [r4, #32]
   1501c:	orrs	r1, r3, r2
   15020:	mov	r2, #16
   15024:	mov	r3, r0
   15028:	movwne	r2, #8
   1502c:	ldr	r2, [r3, r2]!
   15030:	adds	r2, r2, #1
   15034:	str	r2, [r3]
   15038:	ldr	r2, [r3, #4]
   1503c:	adc	r2, r2, #0
   15040:	cmp	r1, #0
   15044:	str	r2, [r3, #4]
   15048:	bne	15080 <UnityAssertBits@@Base+0xa0>
   1504c:	eor	r1, r5, r7
   15050:	mov	r2, #32
   15054:	mov	r3, r0
   15058:	ands	r1, r1, r6
   1505c:	movwne	r2, #24
   15060:	ldr	r2, [r3, r2]!
   15064:	adds	r2, r2, #1
   15068:	str	r2, [r3]
   1506c:	ldr	r2, [r3, #4]
   15070:	adc	r2, r2, #0
   15074:	cmp	r1, #0
   15078:	str	r2, [r3, #4]
   1507c:	bne	15094 <UnityAssertBits@@Base+0xb4>
   15080:	ldrd	r2, [r0, #40]	; 0x28
   15084:	adds	r2, r2, #1
   15088:	adc	r3, r3, #0
   1508c:	strd	r2, [r0, #40]	; 0x28
   15090:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15094:	ldr	r0, [fp, #8]
   15098:	bl	150e8 <UnityAssertBits@@Base+0x108>
   1509c:	movw	r0, #55420	; 0xd87c
   150a0:	movt	r0, #1
   150a4:	bl	14298 <UnityPrint@@Base>
   150a8:	mov	r0, r6
   150ac:	mov	r1, r7
   150b0:	bl	14c80 <UnityPrintMask@@Base>
   150b4:	movw	r0, #55431	; 0xd887
   150b8:	movt	r0, #1
   150bc:	bl	14298 <UnityPrint@@Base>
   150c0:	mov	r0, r6
   150c4:	mov	r1, r5
   150c8:	bl	14c80 <UnityPrintMask@@Base>
   150cc:	mov	r0, r8
   150d0:	bl	15148 <UnityAssertBits@@Base+0x168>
   150d4:	mov	r0, #1
   150d8:	mov	r1, #1
   150dc:	str	r0, [r4, #32]
   150e0:	add	r0, r4, #40	; 0x28
   150e4:	bl	12610 <longjmp@plt>
   150e8:	push	{fp, lr}
   150ec:	mov	fp, sp
   150f0:	mov	r1, r0
   150f4:	movw	r0, #63136	; 0xf6a0
   150f8:	add	r2, pc, #56	; 0x38
   150fc:	movt	r0, #2
   15100:	vld1.64	{d16-d17}, [r2]
   15104:	vld1.64	{d18-d19}, [r0 :128]
   15108:	vadd.i64	q8, q9, q8
   1510c:	vst1.64	{d16-d17}, [r0 :128]
   15110:	movw	r0, #1832	; 0x728
   15114:	movt	r0, #3
   15118:	ldr	r0, [r0]
   1511c:	bl	14f70 <UnityConcludeTest@@Base+0x120>
   15120:	movw	r0, #55400	; 0xd868
   15124:	movt	r0, #1
   15128:	bl	14298 <UnityPrint@@Base>
   1512c:	mov	r0, #58	; 0x3a
   15130:	pop	{fp, lr}
   15134:	b	12760 <putchar@plt>
   15138:	andeq	r0, r0, r1
   1513c:	andeq	r0, r0, r0
   15140:	andeq	r0, r0, r1
   15144:	andeq	r0, r0, r0
   15148:	push	{r4, r5, r6, sl, fp, lr}
   1514c:	add	fp, sp, #16
   15150:	movw	r5, #63152	; 0xf6b0
   15154:	mov	r4, r0
   15158:	movt	r5, #2
   1515c:	ldrd	r0, [r5]
   15160:	adds	r0, r0, #1
   15164:	adc	r1, r1, #0
   15168:	cmp	r4, #0
   1516c:	strd	r0, [r5]
   15170:	mov	r0, #16
   15174:	mov	r1, r5
   15178:	movwne	r0, #8
   1517c:	ldr	r0, [r1, r0]!
   15180:	adds	r0, r0, #1
   15184:	str	r0, [r1]
   15188:	ldr	r0, [r1, #4]
   1518c:	adc	r0, r0, #0
   15190:	cmp	r4, #0
   15194:	str	r0, [r1, #4]
   15198:	beq	15284 <UnityAssertBits@@Base+0x2a4>
   1519c:	movw	r0, #55417	; 0xd879
   151a0:	movt	r0, #1
   151a4:	bl	14298 <UnityPrint@@Base>
   151a8:	movw	r6, #1832	; 0x728
   151ac:	mov	r1, #32
   151b0:	mov	r2, r5
   151b4:	movt	r6, #3
   151b8:	ldr	r0, [r6, #8]
   151bc:	cmp	r0, #0
   151c0:	movwne	r1, #24
   151c4:	ldr	r1, [r2, r1]!
   151c8:	adds	r1, r1, #1
   151cc:	str	r1, [r2]
   151d0:	ldr	r1, [r2, #4]
   151d4:	adc	r1, r1, #0
   151d8:	cmp	r0, #0
   151dc:	str	r1, [r2, #4]
   151e0:	beq	1526c <UnityAssertBits@@Base+0x28c>
   151e4:	movw	r0, #55825	; 0xda11
   151e8:	movt	r0, #1
   151ec:	bl	14298 <UnityPrint@@Base>
   151f0:	ldr	r0, [r6, #8]
   151f4:	bl	14298 <UnityPrint@@Base>
   151f8:	ldr	r0, [r6, #12]
   151fc:	mov	r1, #48	; 0x30
   15200:	mov	r2, r5
   15204:	cmp	r0, #0
   15208:	movwne	r1, #40	; 0x28
   1520c:	ldr	r1, [r2, r1]!
   15210:	adds	r1, r1, #1
   15214:	str	r1, [r2]
   15218:	ldr	r1, [r2, #4]
   1521c:	adc	r1, r1, #0
   15220:	cmp	r0, #0
   15224:	str	r1, [r2, #4]
   15228:	beq	15250 <UnityAssertBits@@Base+0x270>
   1522c:	ldrd	r0, [r5, #56]	; 0x38
   15230:	adds	r0, r0, #1
   15234:	adc	r1, r1, #0
   15238:	strd	r0, [r5, #56]	; 0x38
   1523c:	movw	r0, #55835	; 0xda1b
   15240:	movt	r0, #1
   15244:	bl	14298 <UnityPrint@@Base>
   15248:	ldr	r0, [r6, #12]
   1524c:	bl	14298 <UnityPrint@@Base>
   15250:	ldrd	r0, [r5, #64]	; 0x40
   15254:	adds	r0, r0, #1
   15258:	adc	r1, r1, #0
   1525c:	strd	r0, [r5, #64]	; 0x40
   15260:	movw	r0, #55417	; 0xd879
   15264:	movt	r0, #1
   15268:	bl	14298 <UnityPrint@@Base>
   1526c:	ldrd	r0, [r5, #72]	; 0x48
   15270:	adds	r0, r0, #1
   15274:	adc	r1, r1, #0
   15278:	strd	r0, [r5, #72]	; 0x48
   1527c:	mov	r0, r4
   15280:	bl	14298 <UnityPrint@@Base>
   15284:	ldrd	r0, [r5, #80]	; 0x50
   15288:	adds	r0, r0, #1
   1528c:	adc	r1, r1, #0
   15290:	strd	r0, [r5, #80]	; 0x50
   15294:	pop	{r4, r5, r6, sl, fp, pc}

00015298 <UnityAssertEqualNumber@@Base>:
   15298:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1529c:	add	fp, sp, #24
   152a0:	movw	r4, #63248	; 0xf710
   152a4:	mov	r9, r2
   152a8:	mov	r5, r1
   152ac:	movw	r7, #1832	; 0x728
   152b0:	mov	r6, r0
   152b4:	movt	r4, #2
   152b8:	movt	r7, #3
   152bc:	ldr	r2, [r4]
   152c0:	ldr	r1, [r4, #4]
   152c4:	mov	r0, r4
   152c8:	adds	r2, r2, #1
   152cc:	adc	r1, r1, #0
   152d0:	str	r2, [r4]
   152d4:	str	r1, [r4, #4]
   152d8:	ldr	r2, [r7, #32]
   152dc:	ldr	r1, [r7, #36]	; 0x24
   152e0:	orrs	r1, r1, r2
   152e4:	mov	r2, #16
   152e8:	movwne	r2, #8
   152ec:	ldr	r2, [r0, r2]!
   152f0:	adds	r2, r2, #1
   152f4:	str	r2, [r0]
   152f8:	ldr	r2, [r0, #4]
   152fc:	adc	r2, r2, #0
   15300:	cmp	r1, #0
   15304:	str	r2, [r0, #4]
   15308:	bne	1533c <UnityAssertEqualNumber@@Base+0xa4>
   1530c:	mov	r0, #32
   15310:	cmp	r6, r5
   15314:	mov	r1, r4
   15318:	movwne	r0, #24
   1531c:	ldr	r0, [r1, r0]!
   15320:	adds	r0, r0, #1
   15324:	str	r0, [r1]
   15328:	ldr	r0, [r1, #4]
   1532c:	adc	r0, r0, #0
   15330:	cmp	r6, r5
   15334:	str	r0, [r1, #4]
   15338:	bne	15350 <UnityAssertEqualNumber@@Base+0xb8>
   1533c:	ldrd	r0, [r4, #40]	; 0x28
   15340:	adds	r0, r0, #1
   15344:	adc	r1, r1, #0
   15348:	strd	r0, [r4, #40]	; 0x28
   1534c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15350:	ldr	r8, [fp, #8]
   15354:	mov	r0, r3
   15358:	bl	150e8 <UnityAssertBits@@Base+0x108>
   1535c:	movw	r0, #55420	; 0xd87c
   15360:	movt	r0, #1
   15364:	bl	14298 <UnityPrint@@Base>
   15368:	mov	r0, r6
   1536c:	mov	r1, r8
   15370:	bl	14854 <UnityPrintNumberByStyle@@Base>
   15374:	movw	r0, #55431	; 0xd887
   15378:	movt	r0, #1
   1537c:	bl	14298 <UnityPrint@@Base>
   15380:	mov	r0, r5
   15384:	mov	r1, r8
   15388:	bl	14854 <UnityPrintNumberByStyle@@Base>
   1538c:	mov	r0, r9
   15390:	bl	15148 <UnityAssertBits@@Base+0x168>
   15394:	mov	r0, #1
   15398:	mov	r1, #1
   1539c:	str	r0, [r7, #32]
   153a0:	add	r0, r7, #40	; 0x28
   153a4:	bl	12610 <longjmp@plt>

000153a8 <UnityAssertEqualIntArray@@Base>:
   153a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153ac:	add	fp, sp, #28
   153b0:	sub	sp, sp, #4
   153b4:	movw	sl, #63296	; 0xf740
   153b8:	mov	r5, r1
   153bc:	mov	r6, r0
   153c0:	movw	r4, #1832	; 0x728
   153c4:	mov	r9, r2
   153c8:	movt	sl, #2
   153cc:	movt	r4, #3
   153d0:	ldrd	r0, [sl]
   153d4:	mov	r2, sl
   153d8:	adds	r0, r0, #1
   153dc:	adc	r1, r1, #0
   153e0:	strd	r0, [sl]
   153e4:	ldrd	r0, [r4, #32]
   153e8:	orrs	r0, r1, r0
   153ec:	mov	r1, #16
   153f0:	movwne	r1, #8
   153f4:	ldr	r1, [r2, r1]!
   153f8:	adds	r1, r1, #1
   153fc:	str	r1, [r2]
   15400:	ldr	r1, [r2, #4]
   15404:	adc	r1, r1, #0
   15408:	cmp	r0, #0
   1540c:	str	r1, [r2, #4]
   15410:	beq	15428 <UnityAssertEqualIntArray@@Base+0x80>
   15414:	ldrd	r0, [sl, #24]
   15418:	adds	r0, r0, #1
   1541c:	adc	r1, r1, #0
   15420:	strd	r0, [sl, #24]
   15424:	b	15770 <UnityAssertEqualIntArray@@Base+0x3c8>
   15428:	mov	r0, #40	; 0x28
   1542c:	cmp	r9, #0
   15430:	mov	r1, sl
   15434:	ldr	r2, [fp, #8]
   15438:	mov	r7, r3
   1543c:	movweq	r0, #32
   15440:	ldr	r0, [r1, r0]!
   15444:	adds	r0, r0, #1
   15448:	str	r0, [r1]
   1544c:	ldr	r0, [r1, #4]
   15450:	adc	r0, r0, #0
   15454:	cmp	r9, #0
   15458:	str	r0, [r1, #4]
   1545c:	beq	1589c <UnityAssertEqualIntArray@@Base+0x4f4>
   15460:	mov	r0, r6
   15464:	mov	r1, r5
   15468:	mov	r3, r7
   1546c:	bl	158e0 <UnityAssertEqualIntArray@@Base+0x538>
   15470:	mov	r1, #56	; 0x38
   15474:	cmp	r0, #1
   15478:	mov	r2, sl
   1547c:	movweq	r1, #48	; 0x30
   15480:	ldr	r1, [r2, r1]!
   15484:	adds	r1, r1, #1
   15488:	str	r1, [r2]
   1548c:	ldr	r1, [r2, #4]
   15490:	adc	r1, r1, #0
   15494:	cmp	r0, #1
   15498:	str	r1, [r2, #4]
   1549c:	bne	154b4 <UnityAssertEqualIntArray@@Base+0x10c>
   154a0:	ldrd	r0, [sl, #64]	; 0x40
   154a4:	adds	r0, r0, #1
   154a8:	adc	r1, r1, #0
   154ac:	strd	r0, [sl, #64]	; 0x40
   154b0:	b	15770 <UnityAssertEqualIntArray@@Base+0x3c8>
   154b4:	ldr	r2, [fp, #12]
   154b8:	movw	r0, #61644	; 0xf0cc
   154bc:	mov	r1, #0
   154c0:	str	r7, [sp]
   154c4:	movt	r0, #2
   154c8:	str	r1, [r0]
   154cc:	bic	r0, r2, #128	; 0x80
   154d0:	cmp	r0, #33	; 0x21
   154d4:	bgt	154f4 <UnityAssertEqualIntArray@@Base+0x14c>
   154d8:	cmp	r0, #17
   154dc:	beq	155cc <UnityAssertEqualIntArray@@Base+0x224>
   154e0:	cmp	r0, #18
   154e4:	beq	1550c <UnityAssertEqualIntArray@@Base+0x164>
   154e8:	cmp	r0, #33	; 0x21
   154ec:	beq	155cc <UnityAssertEqualIntArray@@Base+0x224>
   154f0:	b	1568c <UnityAssertEqualIntArray@@Base+0x2e4>
   154f4:	cmp	r0, #34	; 0x22
   154f8:	beq	1550c <UnityAssertEqualIntArray@@Base+0x164>
   154fc:	cmp	r0, #65	; 0x41
   15500:	beq	155cc <UnityAssertEqualIntArray@@Base+0x224>
   15504:	cmp	r0, #66	; 0x42
   15508:	bne	1568c <UnityAssertEqualIntArray@@Base+0x2e4>
   1550c:	movw	r0, #55896	; 0xda58
   15510:	movt	r0, #1
   15514:	add	r1, r0, #8
   15518:	movw	r0, #61644	; 0xf0cc
   1551c:	movt	r0, #2
   15520:	bl	17ad8 <UnityEnd@@Base+0x160>
   15524:	add	r1, pc, #932	; 0x3a4
   15528:	add	r0, sl, #176	; 0xb0
   1552c:	mov	r4, #0
   15530:	vld1.64	{d16-d17}, [r1]
   15534:	vld1.64	{d18-d19}, [r0 :128]
   15538:	vadd.i64	q8, q9, q8
   1553c:	vst1.64	{d16-d17}, [r0 :128]
   15540:	sub	r0, r9, #1
   15544:	ldrh	r1, [r5]
   15548:	ldrh	r2, [r6]
   1554c:	mov	r3, #208	; 0xd0
   15550:	mov	r7, sl
   15554:	cmp	r2, r1
   15558:	movwne	r3, #200	; 0xc8
   1555c:	ldr	r3, [r7, r3]!
   15560:	adds	r3, r3, #1
   15564:	str	r3, [r7]
   15568:	ldr	r3, [r7, #4]
   1556c:	adc	r3, r3, #0
   15570:	cmp	r2, r1
   15574:	str	r3, [r7, #4]
   15578:	bne	15790 <UnityAssertEqualIntArray@@Base+0x3e8>
   1557c:	ldrd	r2, [sl, #216]	; 0xd8
   15580:	mov	r1, #192	; 0xc0
   15584:	add	r5, r5, #2
   15588:	add	r6, r6, #2
   1558c:	adds	r2, r2, #1
   15590:	adc	r3, r3, #0
   15594:	cmp	r0, r4
   15598:	add	r4, r4, #1
   1559c:	strd	r2, [sl, #216]	; 0xd8
   155a0:	movwne	r1, #184	; 0xb8
   155a4:	mov	r2, sl
   155a8:	ldr	r1, [r2, r1]!
   155ac:	adds	r1, r1, #1
   155b0:	str	r1, [r2]
   155b4:	ldr	r1, [r2, #4]
   155b8:	adc	r1, r1, #0
   155bc:	cmp	r9, r4
   155c0:	str	r1, [r2, #4]
   155c4:	bne	15544 <UnityAssertEqualIntArray@@Base+0x19c>
   155c8:	b	15758 <UnityAssertEqualIntArray@@Base+0x3b0>
   155cc:	movw	r0, #55896	; 0xda58
   155d0:	movt	r0, #1
   155d4:	add	r1, r0, #4
   155d8:	movw	r0, #61644	; 0xf0cc
   155dc:	movt	r0, #2
   155e0:	bl	17ad8 <UnityEnd@@Base+0x160>
   155e4:	add	r1, pc, #740	; 0x2e4
   155e8:	add	r0, sl, #128	; 0x80
   155ec:	mov	r4, #0
   155f0:	vld1.64	{d16-d17}, [r1]
   155f4:	vld1.64	{d18-d19}, [r0 :128]
   155f8:	vadd.i64	q8, q9, q8
   155fc:	vst1.64	{d16-d17}, [r0 :128]
   15600:	sub	r0, r9, #1
   15604:	ldrb	r1, [r5]
   15608:	ldrb	r2, [r6]
   1560c:	mov	r3, #160	; 0xa0
   15610:	mov	r7, sl
   15614:	cmp	r2, r1
   15618:	movwne	r3, #152	; 0x98
   1561c:	ldr	r3, [r7, r3]!
   15620:	adds	r3, r3, #1
   15624:	str	r3, [r7]
   15628:	ldr	r3, [r7, #4]
   1562c:	adc	r3, r3, #0
   15630:	cmp	r2, r1
   15634:	str	r3, [r7, #4]
   15638:	bne	157dc <UnityAssertEqualIntArray@@Base+0x434>
   1563c:	ldrd	r2, [sl, #168]	; 0xa8
   15640:	mov	r1, #144	; 0x90
   15644:	add	r5, r5, #1
   15648:	add	r6, r6, #1
   1564c:	adds	r2, r2, #1
   15650:	adc	r3, r3, #0
   15654:	cmp	r0, r4
   15658:	add	r4, r4, #1
   1565c:	strd	r2, [sl, #168]	; 0xa8
   15660:	movwne	r1, #136	; 0x88
   15664:	mov	r2, sl
   15668:	ldr	r1, [r2, r1]!
   1566c:	adds	r1, r1, #1
   15670:	str	r1, [r2]
   15674:	ldr	r1, [r2, #4]
   15678:	adc	r1, r1, #0
   1567c:	cmp	r9, r4
   15680:	str	r1, [r2, #4]
   15684:	bne	15604 <UnityAssertEqualIntArray@@Base+0x25c>
   15688:	b	15758 <UnityAssertEqualIntArray@@Base+0x3b0>
   1568c:	movw	r7, #55896	; 0xda58
   15690:	movw	r0, #61644	; 0xf0cc
   15694:	movt	r7, #1
   15698:	movt	r0, #2
   1569c:	mov	r1, r7
   156a0:	bl	17ad8 <UnityEnd@@Base+0x160>
   156a4:	ldrd	r0, [sl, #224]	; 0xe0
   156a8:	sub	r8, r9, #1
   156ac:	mov	r4, #0
   156b0:	adds	r0, r0, #1
   156b4:	adc	r1, r1, #0
   156b8:	strd	r0, [sl, #224]	; 0xe0
   156bc:	ldr	r0, [r5]
   156c0:	ldr	r1, [r6]
   156c4:	mov	r2, #248	; 0xf8
   156c8:	mov	r3, sl
   156cc:	cmp	r1, r0
   156d0:	movwne	r2, #240	; 0xf0
   156d4:	ldr	r2, [r3, r2]!
   156d8:	adds	r2, r2, #1
   156dc:	str	r2, [r3]
   156e0:	ldr	r2, [r3, #4]
   156e4:	adc	r2, r2, #0
   156e8:	cmp	r1, r0
   156ec:	str	r2, [r3, #4]
   156f0:	bne	15828 <UnityAssertEqualIntArray@@Base+0x480>
   156f4:	ldr	r0, [sl, #256]	; 0x100
   156f8:	ldr	r1, [sl, #260]	; 0x104
   156fc:	adds	r0, r0, #1
   15700:	adc	r1, r1, #0
   15704:	str	r0, [sl, #256]	; 0x100
   15708:	movw	r0, #61644	; 0xf0cc
   1570c:	str	r1, [sl, #260]	; 0x104
   15710:	movt	r0, #2
   15714:	mov	r1, r7
   15718:	bl	17ad8 <UnityEnd@@Base+0x160>
   1571c:	cmp	r8, r4
   15720:	mov	r0, #232	; 0xe8
   15724:	mov	r1, sl
   15728:	add	r4, r4, #1
   1572c:	add	r5, r5, #4
   15730:	add	r6, r6, #4
   15734:	movwne	r0, #224	; 0xe0
   15738:	ldr	r0, [r1, r0]!
   1573c:	adds	r0, r0, #1
   15740:	str	r0, [r1]
   15744:	ldr	r0, [r1, #4]
   15748:	adc	r0, r0, #0
   1574c:	cmp	r9, r4
   15750:	str	r0, [r1, #4]
   15754:	bne	156bc <UnityAssertEqualIntArray@@Base+0x314>
   15758:	ldr	r0, [sl, #264]	; 0x108
   1575c:	ldr	r1, [sl, #268]	; 0x10c
   15760:	adds	r0, r0, #1
   15764:	adc	r1, r1, #0
   15768:	str	r0, [sl, #264]	; 0x108
   1576c:	str	r1, [sl, #268]	; 0x10c
   15770:	ldr	r0, [sl, #272]	; 0x110
   15774:	ldr	r1, [sl, #276]	; 0x114
   15778:	adds	r0, r0, #1
   1577c:	adc	r1, r1, #0
   15780:	str	r0, [sl, #272]	; 0x110
   15784:	str	r1, [sl, #276]	; 0x114
   15788:	sub	sp, fp, #28
   1578c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15790:	ldr	r0, [fp, #8]
   15794:	bl	150e8 <UnityAssertBits@@Base+0x108>
   15798:	movw	r0, #55442	; 0xd892
   1579c:	movt	r0, #1
   157a0:	bl	14298 <UnityPrint@@Base>
   157a4:	mov	r0, r4
   157a8:	bl	14b18 <UnityPrintNumberUnsigned@@Base>
   157ac:	movw	r0, #55420	; 0xd87c
   157b0:	movt	r0, #1
   157b4:	bl	14298 <UnityPrint@@Base>
   157b8:	ldr	r4, [fp, #12]
   157bc:	ldrsh	r0, [r6]
   157c0:	mov	r1, r4
   157c4:	bl	14854 <UnityPrintNumberByStyle@@Base>
   157c8:	movw	r0, #55431	; 0xd887
   157cc:	movt	r0, #1
   157d0:	bl	14298 <UnityPrint@@Base>
   157d4:	ldrsh	r0, [r5]
   157d8:	b	15870 <UnityAssertEqualIntArray@@Base+0x4c8>
   157dc:	ldr	r0, [fp, #8]
   157e0:	bl	150e8 <UnityAssertBits@@Base+0x108>
   157e4:	movw	r0, #55442	; 0xd892
   157e8:	movt	r0, #1
   157ec:	bl	14298 <UnityPrint@@Base>
   157f0:	mov	r0, r4
   157f4:	bl	14b18 <UnityPrintNumberUnsigned@@Base>
   157f8:	movw	r0, #55420	; 0xd87c
   157fc:	movt	r0, #1
   15800:	bl	14298 <UnityPrint@@Base>
   15804:	ldr	r4, [fp, #12]
   15808:	ldrsb	r0, [r6]
   1580c:	mov	r1, r4
   15810:	bl	14854 <UnityPrintNumberByStyle@@Base>
   15814:	movw	r0, #55431	; 0xd887
   15818:	movt	r0, #1
   1581c:	bl	14298 <UnityPrint@@Base>
   15820:	ldrsb	r0, [r5]
   15824:	b	15870 <UnityAssertEqualIntArray@@Base+0x4c8>
   15828:	ldr	r0, [fp, #8]
   1582c:	bl	150e8 <UnityAssertBits@@Base+0x108>
   15830:	movw	r0, #55442	; 0xd892
   15834:	movt	r0, #1
   15838:	bl	14298 <UnityPrint@@Base>
   1583c:	mov	r0, r4
   15840:	bl	14b18 <UnityPrintNumberUnsigned@@Base>
   15844:	movw	r0, #55420	; 0xd87c
   15848:	movt	r0, #1
   1584c:	bl	14298 <UnityPrint@@Base>
   15850:	ldr	r4, [fp, #12]
   15854:	ldr	r0, [r6]
   15858:	mov	r1, r4
   1585c:	bl	14854 <UnityPrintNumberByStyle@@Base>
   15860:	movw	r0, #55431	; 0xd887
   15864:	movt	r0, #1
   15868:	bl	14298 <UnityPrint@@Base>
   1586c:	ldr	r0, [r5]
   15870:	mov	r1, r4
   15874:	bl	14854 <UnityPrintNumberByStyle@@Base>
   15878:	ldr	r0, [sp]
   1587c:	bl	15148 <UnityAssertBits@@Base+0x168>
   15880:	movw	r1, #1832	; 0x728
   15884:	mov	r0, #1
   15888:	movt	r1, #3
   1588c:	str	r0, [r1, #32]
   15890:	add	r0, r1, #40	; 0x28
   15894:	mov	r1, #1
   15898:	bl	12610 <longjmp@plt>
   1589c:	mov	r0, r2
   158a0:	bl	150e8 <UnityAssertBits@@Base+0x108>
   158a4:	movw	r0, #55503	; 0xd8cf
   158a8:	movt	r0, #1
   158ac:	bl	14298 <UnityPrint@@Base>
   158b0:	mov	r0, r7
   158b4:	bl	15148 <UnityAssertBits@@Base+0x168>
   158b8:	mov	r0, #1
   158bc:	mov	r1, #1
   158c0:	str	r0, [r4, #32]
   158c4:	add	r0, r4, #40	; 0x28
   158c8:	bl	12610 <longjmp@plt>
   158cc:	nop	{0}
   158d0:	andeq	r0, r0, r1
   158d4:	andeq	r0, r0, r0
   158d8:	andeq	r0, r0, r1
   158dc:	andeq	r0, r0, r0
   158e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   158e4:	add	fp, sp, #24
   158e8:	movw	r5, #63584	; 0xf860
   158ec:	mov	r8, r3
   158f0:	movt	r5, #2
   158f4:	ldrd	r6, [r5]
   158f8:	mov	r3, r5
   158fc:	adds	r6, r6, #1
   15900:	adc	r7, r7, #0
   15904:	strd	r6, [r5]
   15908:	orrs	r7, r0, r1
   1590c:	mov	r6, #16
   15910:	movweq	r6, #8
   15914:	ldr	r6, [r3, r6]!
   15918:	adds	r6, r6, #1
   1591c:	str	r6, [r3]
   15920:	ldr	r6, [r3, #4]
   15924:	adc	r6, r6, #0
   15928:	cmp	r7, #0
   1592c:	str	r6, [r3, #4]
   15930:	bne	1594c <UnityAssertEqualIntArray@@Base+0x5a4>
   15934:	ldrd	r0, [r5, #24]
   15938:	adds	r0, r0, #1
   1593c:	adc	r1, r1, #0
   15940:	strd	r0, [r5, #24]
   15944:	mov	r0, #1
   15948:	b	159c0 <UnityAssertEqualIntArray@@Base+0x618>
   1594c:	mov	r3, #40	; 0x28
   15950:	cmp	r0, #0
   15954:	mov	r4, r5
   15958:	movweq	r3, #32
   1595c:	ldr	r3, [r4, r3]!
   15960:	adds	r3, r3, #1
   15964:	str	r3, [r4]
   15968:	ldr	r3, [r4, #4]
   1596c:	adc	r3, r3, #0
   15970:	cmp	r0, #0
   15974:	str	r3, [r4, #4]
   15978:	beq	159d4 <UnityAssertEqualIntArray@@Base+0x62c>
   1597c:	mov	r0, #56	; 0x38
   15980:	cmp	r1, #0
   15984:	mov	r3, r5
   15988:	movweq	r0, #48	; 0x30
   1598c:	ldr	r0, [r3, r0]!
   15990:	adds	r0, r0, #1
   15994:	str	r0, [r3]
   15998:	ldr	r0, [r3, #4]
   1599c:	adc	r0, r0, #0
   159a0:	cmp	r1, #0
   159a4:	str	r0, [r3, #4]
   159a8:	beq	159e8 <UnityAssertEqualIntArray@@Base+0x640>
   159ac:	ldrd	r0, [r5, #64]	; 0x40
   159b0:	adds	r0, r0, #1
   159b4:	adc	r1, r1, #0
   159b8:	strd	r0, [r5, #64]	; 0x40
   159bc:	mov	r0, #0
   159c0:	ldrd	r2, [r5, #72]	; 0x48
   159c4:	adds	r2, r2, #1
   159c8:	adc	r3, r3, #0
   159cc:	strd	r2, [r5, #72]	; 0x48
   159d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159d4:	mov	r0, r2
   159d8:	bl	150e8 <UnityAssertBits@@Base+0x108>
   159dc:	movw	r0, #55558	; 0xd906
   159e0:	movt	r0, #1
   159e4:	b	159f8 <UnityAssertEqualIntArray@@Base+0x650>
   159e8:	mov	r0, r2
   159ec:	bl	150e8 <UnityAssertBits@@Base+0x108>
   159f0:	movw	r0, #55587	; 0xd923
   159f4:	movt	r0, #1
   159f8:	bl	14298 <UnityPrint@@Base>
   159fc:	mov	r0, r8
   15a00:	bl	15148 <UnityAssertBits@@Base+0x168>
   15a04:	movw	r0, #1832	; 0x728
   15a08:	mov	r1, #1
   15a0c:	movt	r0, #3
   15a10:	str	r1, [r0, #32]
   15a14:	add	r0, r0, #40	; 0x28
   15a18:	mov	r1, #1
   15a1c:	bl	12610 <longjmp@plt>

00015a20 <UnityAssertEqualFloatArray@@Base>:
   15a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a24:	add	fp, sp, #28
   15a28:	sub	sp, sp, #4
   15a2c:	movw	r8, #63664	; 0xf8b0
   15a30:	mov	r6, r1
   15a34:	mov	r7, r0
   15a38:	movw	r5, #1832	; 0x728
   15a3c:	mov	sl, r2
   15a40:	movt	r8, #2
   15a44:	movt	r5, #3
   15a48:	ldrd	r0, [r8]
   15a4c:	mov	r2, r8
   15a50:	adds	r0, r0, #1
   15a54:	adc	r1, r1, #0
   15a58:	strd	r0, [r8]
   15a5c:	ldrd	r0, [r5, #32]
   15a60:	orrs	r0, r1, r0
   15a64:	mov	r1, #16
   15a68:	movwne	r1, #8
   15a6c:	ldr	r1, [r2, r1]!
   15a70:	adds	r1, r1, #1
   15a74:	str	r1, [r2]
   15a78:	ldr	r1, [r2, #4]
   15a7c:	adc	r1, r1, #0
   15a80:	cmp	r0, #0
   15a84:	str	r1, [r2, #4]
   15a88:	beq	15aa0 <UnityAssertEqualFloatArray@@Base+0x80>
   15a8c:	ldrd	r0, [r8, #24]
   15a90:	adds	r0, r0, #1
   15a94:	adc	r1, r1, #0
   15a98:	strd	r0, [r8, #24]
   15a9c:	b	15cd8 <UnityAssertEqualFloatArray@@Base+0x2b8>
   15aa0:	mov	r0, #40	; 0x28
   15aa4:	cmp	sl, #0
   15aa8:	mov	r1, r8
   15aac:	ldr	r4, [fp, #8]
   15ab0:	mov	r9, r3
   15ab4:	movweq	r0, #32
   15ab8:	ldr	r0, [r1, r0]!
   15abc:	adds	r0, r0, #1
   15ac0:	str	r0, [r1]
   15ac4:	ldr	r0, [r1, #4]
   15ac8:	adc	r0, r0, #0
   15acc:	cmp	sl, #0
   15ad0:	str	r0, [r1, #4]
   15ad4:	beq	15d38 <UnityAssertEqualFloatArray@@Base+0x318>
   15ad8:	mov	r0, r7
   15adc:	mov	r1, r6
   15ae0:	mov	r2, r4
   15ae4:	mov	r3, r9
   15ae8:	bl	158e0 <UnityAssertEqualIntArray@@Base+0x538>
   15aec:	mov	r1, #56	; 0x38
   15af0:	cmp	r0, #1
   15af4:	mov	r2, r8
   15af8:	movweq	r1, #48	; 0x30
   15afc:	ldr	r1, [r2, r1]!
   15b00:	adds	r1, r1, #1
   15b04:	str	r1, [r2]
   15b08:	ldr	r1, [r2, #4]
   15b0c:	adc	r1, r1, #0
   15b10:	cmp	r0, #1
   15b14:	str	r1, [r2, #4]
   15b18:	bne	15b30 <UnityAssertEqualFloatArray@@Base+0x110>
   15b1c:	ldrd	r0, [r8, #64]	; 0x40
   15b20:	adds	r0, r0, #1
   15b24:	adc	r1, r1, #0
   15b28:	strd	r0, [r8, #64]	; 0x40
   15b2c:	b	15cd8 <UnityAssertEqualFloatArray@@Base+0x2b8>
   15b30:	ldr	r2, [r8, #72]	; 0x48
   15b34:	ldr	r1, [r8, #76]	; 0x4c
   15b38:	vldr	s0, [pc, #552]	; 15d68 <UnityAssertEqualFloatArray@@Base+0x348>
   15b3c:	vldr	s2, [pc, #552]	; 15d6c <UnityAssertEqualFloatArray@@Base+0x34c>
   15b40:	mov	r0, r4
   15b44:	sub	r5, sl, #1
   15b48:	mov	r4, #0
   15b4c:	adds	r2, r2, #1
   15b50:	adc	r1, r1, #0
   15b54:	str	r2, [r8, #72]	; 0x48
   15b58:	str	r1, [r8, #76]	; 0x4c
   15b5c:	vldr	s4, [r6]
   15b60:	vldr	s6, [r7]
   15b64:	mov	r1, #96	; 0x60
   15b68:	mov	r2, r8
   15b6c:	vsub.f32	s4, s6, s4
   15b70:	vcmpe.f32	s4, #0.0
   15b74:	vmrs	APSR_nzcv, fpscr
   15b78:	vcmpe.f32	s4, #0.0
   15b7c:	movwmi	r1, #88	; 0x58
   15b80:	ldr	r1, [r2, r1]!
   15b84:	adds	r1, r1, #1
   15b88:	str	r1, [r2]
   15b8c:	ldr	r1, [r2, #4]
   15b90:	adc	r1, r1, #0
   15b94:	vmrs	APSR_nzcv, fpscr
   15b98:	str	r1, [r2, #4]
   15b9c:	bpl	15bb4 <UnityAssertEqualFloatArray@@Base+0x194>
   15ba0:	ldrd	r2, [r8, #104]	; 0x68
   15ba4:	vsub.f32	s4, s0, s4
   15ba8:	adds	r2, r2, #1
   15bac:	adc	r3, r3, #0
   15bb0:	strd	r2, [r8, #104]	; 0x68
   15bb4:	vldr	s6, [r7]
   15bb8:	mov	r1, #120	; 0x78
   15bbc:	mov	r2, r8
   15bc0:	vmul.f32	s6, s6, s2
   15bc4:	vcmpe.f32	s6, #0.0
   15bc8:	vmrs	APSR_nzcv, fpscr
   15bcc:	vcmpe.f32	s6, #0.0
   15bd0:	movwmi	r1, #112	; 0x70
   15bd4:	ldr	r1, [r2, r1]!
   15bd8:	adds	r1, r1, #1
   15bdc:	str	r1, [r2]
   15be0:	ldr	r1, [r2, #4]
   15be4:	adc	r1, r1, #0
   15be8:	vmrs	APSR_nzcv, fpscr
   15bec:	str	r1, [r2, #4]
   15bf0:	bpl	15c08 <UnityAssertEqualFloatArray@@Base+0x1e8>
   15bf4:	ldrd	r2, [r8, #128]	; 0x80
   15bf8:	vsub.f32	s6, s0, s6
   15bfc:	adds	r2, r2, #1
   15c00:	adc	r3, r3, #0
   15c04:	strd	r2, [r8, #128]	; 0x80
   15c08:	vmul.f32	s8, s4, s0
   15c0c:	mov	r1, #144	; 0x90
   15c10:	mov	r2, r8
   15c14:	vcmp.f32	s8, #0.0
   15c18:	vmrs	APSR_nzcv, fpscr
   15c1c:	vcmp.f32	s8, #0.0
   15c20:	movwne	r1, #136	; 0x88
   15c24:	ldr	r1, [r2, r1]!
   15c28:	adds	r1, r1, #1
   15c2c:	str	r1, [r2]
   15c30:	ldr	r1, [r2, #4]
   15c34:	adc	r1, r1, #0
   15c38:	vmrs	APSR_nzcv, fpscr
   15c3c:	str	r1, [r2, #4]
   15c40:	bne	15cf0 <UnityAssertEqualFloatArray@@Base+0x2d0>
   15c44:	vcmpe.f32	s4, s6
   15c48:	mov	r1, #160	; 0xa0
   15c4c:	mov	r2, r8
   15c50:	vmrs	APSR_nzcv, fpscr
   15c54:	vcmpe.f32	s4, s6
   15c58:	movwgt	r1, #152	; 0x98
   15c5c:	ldr	r1, [r2, r1]!
   15c60:	adds	r1, r1, #1
   15c64:	str	r1, [r2]
   15c68:	ldr	r1, [r2, #4]
   15c6c:	adc	r1, r1, #0
   15c70:	vmrs	APSR_nzcv, fpscr
   15c74:	str	r1, [r2, #4]
   15c78:	bgt	15cf0 <UnityAssertEqualFloatArray@@Base+0x2d0>
   15c7c:	ldrd	r2, [r8, #168]	; 0xa8
   15c80:	mov	r1, #80	; 0x50
   15c84:	add	r6, r6, #4
   15c88:	add	r7, r7, #4
   15c8c:	adds	r2, r2, #1
   15c90:	adc	r3, r3, #0
   15c94:	cmp	r5, r4
   15c98:	add	r4, r4, #1
   15c9c:	strd	r2, [r8, #168]	; 0xa8
   15ca0:	movwne	r1, #72	; 0x48
   15ca4:	mov	r2, r8
   15ca8:	ldr	r1, [r2, r1]!
   15cac:	adds	r1, r1, #1
   15cb0:	str	r1, [r2]
   15cb4:	ldr	r1, [r2, #4]
   15cb8:	adc	r1, r1, #0
   15cbc:	cmp	sl, r4
   15cc0:	str	r1, [r2, #4]
   15cc4:	bne	15b5c <UnityAssertEqualFloatArray@@Base+0x13c>
   15cc8:	ldrd	r0, [r8, #176]	; 0xb0
   15ccc:	adds	r0, r0, #1
   15cd0:	adc	r1, r1, #0
   15cd4:	strd	r0, [r8, #176]	; 0xb0
   15cd8:	ldrd	r0, [r8, #184]	; 0xb8
   15cdc:	adds	r0, r0, #1
   15ce0:	adc	r1, r1, #0
   15ce4:	strd	r0, [r8, #184]	; 0xb8
   15ce8:	sub	sp, fp, #28
   15cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cf0:	bl	150e8 <UnityAssertBits@@Base+0x108>
   15cf4:	movw	r0, #55442	; 0xd892
   15cf8:	movt	r0, #1
   15cfc:	bl	14298 <UnityPrint@@Base>
   15d00:	mov	r0, r4
   15d04:	bl	14b18 <UnityPrintNumberUnsigned@@Base>
   15d08:	movw	r0, #55477	; 0xd8b5
   15d0c:	movt	r0, #1
   15d10:	bl	14298 <UnityPrint@@Base>
   15d14:	mov	r0, r9
   15d18:	bl	15148 <UnityAssertBits@@Base+0x168>
   15d1c:	movw	r1, #1832	; 0x728
   15d20:	mov	r0, #1
   15d24:	movt	r1, #3
   15d28:	str	r0, [r1, #32]
   15d2c:	add	r0, r1, #40	; 0x28
   15d30:	mov	r1, #1
   15d34:	bl	12610 <longjmp@plt>
   15d38:	mov	r0, r4
   15d3c:	bl	150e8 <UnityAssertBits@@Base+0x108>
   15d40:	movw	r0, #55503	; 0xd8cf
   15d44:	movt	r0, #1
   15d48:	bl	14298 <UnityPrint@@Base>
   15d4c:	mov	r0, r9
   15d50:	bl	15148 <UnityAssertBits@@Base+0x168>
   15d54:	mov	r0, #1
   15d58:	mov	r1, #1
   15d5c:	str	r0, [r5, #32]
   15d60:	add	r0, r5, #40	; 0x28
   15d64:	bl	12610 <longjmp@plt>
   15d68:	andeq	r0, r0, r0
   15d6c:	strcc	ip, [r7, -ip, lsr #11]!

00015d70 <UnityAssertFloatsWithin@@Base>:
   15d70:	push	{r4, r5, r6, sl, fp, lr}
   15d74:	add	fp, sp, #16
   15d78:	movw	r4, #63856	; 0xf970
   15d7c:	movw	r5, #1832	; 0x728
   15d80:	mov	r6, r0
   15d84:	movt	r4, #2
   15d88:	movt	r5, #3
   15d8c:	ldrd	r2, [r4]
   15d90:	mov	r0, r4
   15d94:	adds	r2, r2, #1
   15d98:	adc	r3, r3, #0
   15d9c:	strd	r2, [r4]
   15da0:	ldrd	r2, [r5, #32]
   15da4:	orrs	r2, r3, r2
   15da8:	mov	r3, #16
   15dac:	movwne	r3, #8
   15db0:	ldr	r3, [r0, r3]!
   15db4:	adds	r3, r3, #1
   15db8:	str	r3, [r0]
   15dbc:	ldr	r3, [r0, #4]
   15dc0:	adc	r3, r3, #0
   15dc4:	cmp	r2, #0
   15dc8:	str	r3, [r0, #4]
   15dcc:	beq	15de4 <UnityAssertFloatsWithin@@Base+0x74>
   15dd0:	ldrd	r0, [r4, #24]
   15dd4:	adds	r0, r0, #1
   15dd8:	adc	r1, r1, #0
   15ddc:	strd	r0, [r4, #24]
   15de0:	b	15f20 <UnityAssertFloatsWithin@@Base+0x1b0>
   15de4:	vsub.f32	s2, s2, s1
   15de8:	mov	r0, #40	; 0x28
   15dec:	mov	r2, r4
   15df0:	vcmpe.f32	s2, #0.0
   15df4:	vmrs	APSR_nzcv, fpscr
   15df8:	vcmpe.f32	s2, #0.0
   15dfc:	movwmi	r0, #32
   15e00:	ldr	r0, [r2, r0]!
   15e04:	adds	r0, r0, #1
   15e08:	str	r0, [r2]
   15e0c:	ldr	r0, [r2, #4]
   15e10:	adc	r0, r0, #0
   15e14:	vmrs	APSR_nzcv, fpscr
   15e18:	str	r0, [r2, #4]
   15e1c:	bpl	15e40 <UnityAssertFloatsWithin@@Base+0xd0>
   15e20:	ldr	r0, [r4, #48]	; 0x30
   15e24:	vldr	s4, [pc, #312]	; 15f64 <UnityAssertFloatsWithin@@Base+0x1f4>
   15e28:	ldr	r3, [r4, #52]	; 0x34
   15e2c:	adds	r0, r0, #1
   15e30:	vsub.f32	s2, s4, s2
   15e34:	adc	r3, r3, #0
   15e38:	str	r0, [r4, #48]	; 0x30
   15e3c:	str	r3, [r4, #52]	; 0x34
   15e40:	vcmpe.f32	s0, #0.0
   15e44:	mov	r0, #64	; 0x40
   15e48:	mov	r2, r4
   15e4c:	vmrs	APSR_nzcv, fpscr
   15e50:	vcmpe.f32	s0, #0.0
   15e54:	movwmi	r0, #56	; 0x38
   15e58:	ldr	r0, [r2, r0]!
   15e5c:	adds	r0, r0, #1
   15e60:	str	r0, [r2]
   15e64:	ldr	r0, [r2, #4]
   15e68:	adc	r0, r0, #0
   15e6c:	vmrs	APSR_nzcv, fpscr
   15e70:	str	r0, [r2, #4]
   15e74:	bpl	15e98 <UnityAssertFloatsWithin@@Base+0x128>
   15e78:	ldr	r0, [r4, #72]	; 0x48
   15e7c:	vldr	s4, [pc, #224]	; 15f64 <UnityAssertFloatsWithin@@Base+0x1f4>
   15e80:	ldr	r3, [r4, #76]	; 0x4c
   15e84:	adds	r0, r0, #1
   15e88:	vsub.f32	s0, s4, s0
   15e8c:	adc	r3, r3, #0
   15e90:	str	r0, [r4, #72]	; 0x48
   15e94:	str	r3, [r4, #76]	; 0x4c
   15e98:	vldr	s4, [pc, #196]	; 15f64 <UnityAssertFloatsWithin@@Base+0x1f4>
   15e9c:	mov	r0, #88	; 0x58
   15ea0:	mov	r2, r4
   15ea4:	vmul.f32	s4, s2, s4
   15ea8:	vcmp.f32	s4, #0.0
   15eac:	vmrs	APSR_nzcv, fpscr
   15eb0:	vcmp.f32	s4, #0.0
   15eb4:	movwne	r0, #80	; 0x50
   15eb8:	ldr	r0, [r2, r0]!
   15ebc:	adds	r0, r0, #1
   15ec0:	str	r0, [r2]
   15ec4:	ldr	r0, [r2, #4]
   15ec8:	adc	r0, r0, #0
   15ecc:	vmrs	APSR_nzcv, fpscr
   15ed0:	str	r0, [r2, #4]
   15ed4:	bne	15f34 <UnityAssertFloatsWithin@@Base+0x1c4>
   15ed8:	vcmpe.f32	s0, s2
   15edc:	mov	r0, #104	; 0x68
   15ee0:	mov	r2, r4
   15ee4:	vmrs	APSR_nzcv, fpscr
   15ee8:	vcmpe.f32	s0, s2
   15eec:	movwmi	r0, #96	; 0x60
   15ef0:	ldr	r0, [r2, r0]!
   15ef4:	adds	r0, r0, #1
   15ef8:	str	r0, [r2]
   15efc:	ldr	r0, [r2, #4]
   15f00:	adc	r0, r0, #0
   15f04:	vmrs	APSR_nzcv, fpscr
   15f08:	str	r0, [r2, #4]
   15f0c:	bmi	15f34 <UnityAssertFloatsWithin@@Base+0x1c4>
   15f10:	ldrd	r0, [r4, #112]	; 0x70
   15f14:	adds	r0, r0, #1
   15f18:	adc	r1, r1, #0
   15f1c:	strd	r0, [r4, #112]	; 0x70
   15f20:	ldrd	r0, [r4, #120]	; 0x78
   15f24:	adds	r0, r0, #1
   15f28:	adc	r1, r1, #0
   15f2c:	strd	r0, [r4, #120]	; 0x78
   15f30:	pop	{r4, r5, r6, sl, fp, pc}
   15f34:	mov	r0, r1
   15f38:	bl	150e8 <UnityAssertBits@@Base+0x108>
   15f3c:	movw	r0, #55477	; 0xd8b5
   15f40:	movt	r0, #1
   15f44:	bl	14298 <UnityPrint@@Base>
   15f48:	mov	r0, r6
   15f4c:	bl	15148 <UnityAssertBits@@Base+0x168>
   15f50:	mov	r0, #1
   15f54:	mov	r1, #1
   15f58:	str	r0, [r5, #32]
   15f5c:	add	r0, r5, #40	; 0x28
   15f60:	bl	12610 <longjmp@plt>
   15f64:	andeq	r0, r0, r0

00015f68 <UnityAssertFloatSpecial@@Base>:
   15f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f6c:	add	fp, sp, #28
   15f70:	sub	sp, sp, #4
   15f74:	vpush	{d8}
   15f78:	sub	sp, sp, #24
   15f7c:	movw	r7, #63984	; 0xf9f0
   15f80:	mov	r5, r1
   15f84:	movw	r9, #1832	; 0x728
   15f88:	add	sl, sp, #8
   15f8c:	movt	r7, #2
   15f90:	movt	r9, #3
   15f94:	ldr	r4, [r7]
   15f98:	ldr	r1, [r7, #4]
   15f9c:	mov	r3, r7
   15fa0:	adds	r4, r4, #1
   15fa4:	adc	r1, r1, #0
   15fa8:	str	r4, [r7]
   15fac:	str	r1, [r7, #4]
   15fb0:	movw	r1, #55880	; 0xda48
   15fb4:	movt	r1, #1
   15fb8:	vld1.64	{d16-d17}, [r1]
   15fbc:	vst1.64	{d16-d17}, [sl]
   15fc0:	ldr	r4, [r9, #32]
   15fc4:	ldr	r1, [r9, #36]	; 0x24
   15fc8:	orrs	r6, r1, r4
   15fcc:	mov	r1, #16
   15fd0:	movwne	r1, #8
   15fd4:	ldr	r1, [r3, r1]!
   15fd8:	adds	r1, r1, #1
   15fdc:	str	r1, [r3]
   15fe0:	ldr	r1, [r3, #4]
   15fe4:	adc	r1, r1, #0
   15fe8:	cmp	r6, #0
   15fec:	str	r1, [r3, #4]
   15ff0:	beq	15ffc <UnityAssertFloatSpecial@@Base+0x94>
   15ff4:	add	r0, r7, #24
   15ff8:	b	16218 <UnityAssertFloatSpecial@@Base+0x2b0>
   15ffc:	movw	r1, #61648	; 0xf0d0
   16000:	and	r4, r2, #1
   16004:	mov	r8, #0
   16008:	cmp	r2, #7
   1600c:	str	r0, [sp, #4]
   16010:	movt	r1, #2
   16014:	str	r8, [r1]
   16018:	bhi	16194 <UnityAssertFloatSpecial@@Base+0x22c>
   1601c:	add	r0, pc, #4
   16020:	vmov.f32	s16, s0
   16024:	ldr	pc, [r0, r2, lsl #2]
   16028:	andeq	r6, r1, r8, asr #32
   1602c:	andeq	r6, r1, r8, asr #32
   16030:	andeq	r6, r1, r8, asr #2
   16034:	andeq	r6, r1, r8, asr #2
   16038:	muleq	r1, r4, r0
   1603c:	muleq	r1, r4, r0
   16040:	ldrdeq	r6, [r1], -r0
   16044:	ldrdeq	r6, [r1], -r0
   16048:	movw	r0, #55920	; 0xda70
   1604c:	movt	r0, #1
   16050:	add	r1, r0, #4
   16054:	movw	r0, #61648	; 0xf0d0
   16058:	movt	r0, #2
   1605c:	bl	17ad8 <UnityEnd@@Base+0x160>
   16060:	ldrd	r0, [r7, #104]	; 0x68
   16064:	vcmpe.f32	s16, #0.0
   16068:	vmov.f32	s0, s16
   1606c:	mov	r6, #0
   16070:	mov	r8, #0
   16074:	adds	r0, r0, #1
   16078:	adc	r1, r1, #0
   1607c:	vmrs	APSR_nzcv, fpscr
   16080:	strd	r0, [r7, #104]	; 0x68
   16084:	movwgt	r6, #1
   16088:	bl	12688 <__isinff@plt>
   1608c:	and	r6, r0, r6
   16090:	b	161e4 <UnityAssertFloatSpecial@@Base+0x27c>
   16094:	movw	r0, #55920	; 0xda70
   16098:	movt	r0, #1
   1609c:	add	r1, r0, #12
   160a0:	movw	r0, #61648	; 0xf0d0
   160a4:	movt	r0, #2
   160a8:	bl	17ad8 <UnityEnd@@Base+0x160>
   160ac:	ldrd	r0, [r7, #120]	; 0x78
   160b0:	vmov.f32	s0, s16
   160b4:	adds	r0, r0, #1
   160b8:	adc	r1, r1, #0
   160bc:	strd	r0, [r7, #120]	; 0x78
   160c0:	bl	12640 <__isnanf@plt>
   160c4:	mov	r6, r0
   160c8:	mov	r8, #2
   160cc:	b	161e4 <UnityAssertFloatSpecial@@Base+0x27c>
   160d0:	movw	r0, #55920	; 0xda70
   160d4:	movt	r0, #1
   160d8:	add	r1, r0, #16
   160dc:	movw	r0, #61648	; 0xf0d0
   160e0:	movt	r0, #2
   160e4:	bl	17ad8 <UnityEnd@@Base+0x160>
   160e8:	vmov.f32	s0, s16
   160ec:	bl	12688 <__isinff@plt>
   160f0:	vmov.f32	s0, s16
   160f4:	mov	r6, r0
   160f8:	bl	12640 <__isnanf@plt>
   160fc:	orrs	r0, r0, r6
   16100:	mov	r1, #136	; 0x88
   16104:	mov	r2, r7
   16108:	movwne	r1, #128	; 0x80
   1610c:	ldr	r1, [r2, r1]!
   16110:	adds	r1, r1, #1
   16114:	str	r1, [r2]
   16118:	ldr	r1, [r2, #4]
   1611c:	adc	r1, r1, #0
   16120:	cmp	r0, #0
   16124:	str	r1, [r2, #4]
   16128:	beq	161cc <UnityAssertFloatSpecial@@Base+0x264>
   1612c:	ldrd	r0, [r7, #144]	; 0x90
   16130:	mov	r8, #3
   16134:	mov	r6, #0
   16138:	adds	r0, r0, #1
   1613c:	adc	r1, r1, #0
   16140:	strd	r0, [r7, #144]	; 0x90
   16144:	b	161e4 <UnityAssertFloatSpecial@@Base+0x27c>
   16148:	movw	r0, #55920	; 0xda70
   1614c:	movt	r0, #1
   16150:	add	r1, r0, #8
   16154:	movw	r0, #61648	; 0xf0d0
   16158:	movt	r0, #2
   1615c:	bl	17ad8 <UnityEnd@@Base+0x160>
   16160:	ldrd	r0, [r7, #112]	; 0x70
   16164:	vcmpe.f32	s16, #0.0
   16168:	vmov.f32	s0, s16
   1616c:	mov	r6, #0
   16170:	adds	r0, r0, #1
   16174:	adc	r1, r1, #0
   16178:	vmrs	APSR_nzcv, fpscr
   1617c:	strd	r0, [r7, #112]	; 0x70
   16180:	movwmi	r6, #1
   16184:	bl	12688 <__isinff@plt>
   16188:	and	r6, r0, r6
   1618c:	mov	r8, #1
   16190:	b	161e4 <UnityAssertFloatSpecial@@Base+0x27c>
   16194:	movw	r0, #61648	; 0xf0d0
   16198:	movw	r1, #55920	; 0xda70
   1619c:	eor	r6, r4, #1
   161a0:	movt	r0, #2
   161a4:	movt	r1, #1
   161a8:	bl	17ad8 <UnityEnd@@Base+0x160>
   161ac:	ldrd	r0, [r7, #160]	; 0xa0
   161b0:	adds	r0, r0, #1
   161b4:	adc	r1, r1, #0
   161b8:	strd	r0, [r7, #160]	; 0xa0
   161bc:	movw	r0, #55660	; 0xd96c
   161c0:	movt	r0, #1
   161c4:	str	r0, [sp, #8]
   161c8:	b	161e4 <UnityAssertFloatSpecial@@Base+0x27c>
   161cc:	ldrd	r0, [r7, #152]	; 0x98
   161d0:	mov	r8, #3
   161d4:	mov	r6, #1
   161d8:	adds	r0, r0, #1
   161dc:	adc	r1, r1, #0
   161e0:	strd	r0, [r7, #152]	; 0x98
   161e4:	mov	r0, #176	; 0xb0
   161e8:	cmp	r6, r4
   161ec:	mov	r1, r7
   161f0:	movwne	r0, #168	; 0xa8
   161f4:	ldr	r0, [r1, r0]!
   161f8:	adds	r0, r0, #1
   161fc:	str	r0, [r1]
   16200:	ldr	r0, [r1, #4]
   16204:	adc	r0, r0, #0
   16208:	cmp	r6, r4
   1620c:	str	r0, [r1, #4]
   16210:	bne	16248 <UnityAssertFloatSpecial@@Base+0x2e0>
   16214:	add	r0, r7, #232	; 0xe8
   16218:	ldrd	r2, [r0]
   1621c:	adds	r2, r2, #1
   16220:	adc	r3, r3, #0
   16224:	strd	r2, [r0]
   16228:	ldrd	r0, [r7, #240]	; 0xf0
   1622c:	adds	r0, r0, #1
   16230:	adc	r1, r1, #0
   16234:	strd	r0, [r7, #240]	; 0xf0
   16238:	sub	sp, fp, #40	; 0x28
   1623c:	vpop	{d8}
   16240:	add	sp, sp, #4
   16244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16248:	mov	r0, r5
   1624c:	bl	150e8 <UnityAssertBits@@Base+0x108>
   16250:	movw	r0, #55420	; 0xd87c
   16254:	movt	r0, #1
   16258:	bl	14298 <UnityPrint@@Base>
   1625c:	mov	r0, #192	; 0xc0
   16260:	cmp	r4, #0
   16264:	mov	r1, r7
   16268:	movwne	r0, #184	; 0xb8
   1626c:	ldr	r0, [r1, r0]!
   16270:	adds	r0, r0, #1
   16274:	str	r0, [r1]
   16278:	ldr	r0, [r1, #4]
   1627c:	adc	r0, r0, #0
   16280:	cmp	r4, #0
   16284:	str	r0, [r1, #4]
   16288:	bne	162a8 <UnityAssertFloatSpecial@@Base+0x340>
   1628c:	ldrd	r0, [r7, #200]	; 0xc8
   16290:	adds	r0, r0, #1
   16294:	adc	r1, r1, #0
   16298:	strd	r0, [r7, #200]	; 0xc8
   1629c:	movw	r0, #55612	; 0xd93c
   162a0:	movt	r0, #1
   162a4:	bl	14298 <UnityPrint@@Base>
   162a8:	ldr	r5, [sl, r8, lsl #2]
   162ac:	mov	r0, r5
   162b0:	bl	14298 <UnityPrint@@Base>
   162b4:	movw	r0, #55431	; 0xd887
   162b8:	movt	r0, #1
   162bc:	bl	14298 <UnityPrint@@Base>
   162c0:	eor	r0, r4, #27
   162c4:	mov	r1, r7
   162c8:	ldr	r0, [r1, r0, lsl #3]!
   162cc:	adds	r0, r0, #1
   162d0:	str	r0, [r1]
   162d4:	ldr	r0, [r1, #4]
   162d8:	adc	r0, r0, #0
   162dc:	cmp	r4, #0
   162e0:	str	r0, [r1, #4]
   162e4:	beq	16304 <UnityAssertFloatSpecial@@Base+0x39c>
   162e8:	ldrd	r0, [r7, #224]	; 0xe0
   162ec:	adds	r0, r0, #1
   162f0:	adc	r1, r1, #0
   162f4:	strd	r0, [r7, #224]	; 0xe0
   162f8:	movw	r0, #55612	; 0xd93c
   162fc:	movt	r0, #1
   16300:	bl	14298 <UnityPrint@@Base>
   16304:	mov	r0, r5
   16308:	bl	14298 <UnityPrint@@Base>
   1630c:	ldr	r0, [sp, #4]
   16310:	bl	15148 <UnityAssertBits@@Base+0x168>
   16314:	mov	r0, #1
   16318:	mov	r1, #1
   1631c:	str	r0, [r9, #32]
   16320:	add	r0, r9, #40	; 0x28
   16324:	bl	12610 <longjmp@plt>

00016328 <UnityAssertNumbersWithin@@Base>:
   16328:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1632c:	add	fp, sp, #24
   16330:	mov	r7, r0
   16334:	movw	r0, #64240	; 0xfaf0
   16338:	mov	r9, r3
   1633c:	mov	r5, r2
   16340:	movw	r4, #1832	; 0x728
   16344:	mov	r6, r1
   16348:	movt	r0, #2
   1634c:	movt	r4, #3
   16350:	ldrd	r2, [r0]
   16354:	adds	r2, r2, #1
   16358:	adc	r3, r3, #0
   1635c:	strd	r2, [r0]
   16360:	ldrd	r2, [r4, #32]
   16364:	orrs	r1, r3, r2
   16368:	mov	r2, #16
   1636c:	mov	r3, r0
   16370:	movwne	r2, #8
   16374:	ldr	r2, [r3, r2]!
   16378:	adds	r2, r2, #1
   1637c:	str	r2, [r3]
   16380:	ldr	r2, [r3, #4]
   16384:	adc	r2, r2, #0
   16388:	cmp	r1, #0
   1638c:	str	r2, [r3, #4]
   16390:	bne	164bc <UnityAssertNumbersWithin@@Base+0x194>
   16394:	ldr	r8, [fp, #12]
   16398:	mov	r2, #32
   1639c:	mov	r3, r0
   163a0:	ands	r1, r8, #16
   163a4:	movwne	r2, #24
   163a8:	ldr	r2, [r3, r2]!
   163ac:	adds	r2, r2, #1
   163b0:	str	r2, [r3]
   163b4:	ldr	r2, [r3, #4]
   163b8:	adc	r2, r2, #0
   163bc:	cmp	r1, #0
   163c0:	str	r2, [r3, #4]
   163c4:	beq	16410 <UnityAssertNumbersWithin@@Base+0xe8>
   163c8:	mov	r1, #48	; 0x30
   163cc:	cmp	r5, r6
   163d0:	mov	r2, r0
   163d4:	movwgt	r1, #40	; 0x28
   163d8:	ldr	r1, [r2, r1]!
   163dc:	adds	r1, r1, #1
   163e0:	str	r1, [r2]
   163e4:	ldr	r1, [r2, #4]
   163e8:	adc	r1, r1, #0
   163ec:	cmp	r5, r6
   163f0:	str	r1, [r2, #4]
   163f4:	ble	16458 <UnityAssertNumbersWithin@@Base+0x130>
   163f8:	ldrd	r2, [r0, #56]	; 0x38
   163fc:	sub	r1, r5, r6
   16400:	adds	r2, r2, #1
   16404:	adc	r3, r3, #0
   16408:	strd	r2, [r0, #56]	; 0x38
   1640c:	b	16480 <UnityAssertNumbersWithin@@Base+0x158>
   16410:	mov	r1, #80	; 0x50
   16414:	cmp	r5, r6
   16418:	mov	r2, r0
   1641c:	movwhi	r1, #72	; 0x48
   16420:	ldr	r1, [r2, r1]!
   16424:	adds	r1, r1, #1
   16428:	str	r1, [r2]
   1642c:	ldr	r1, [r2, #4]
   16430:	adc	r1, r1, #0
   16434:	cmp	r5, r6
   16438:	str	r1, [r2, #4]
   1643c:	bls	1646c <UnityAssertNumbersWithin@@Base+0x144>
   16440:	ldrd	r2, [r0, #88]	; 0x58
   16444:	sub	r1, r5, r6
   16448:	adds	r2, r2, #1
   1644c:	adc	r3, r3, #0
   16450:	strd	r2, [r0, #88]	; 0x58
   16454:	b	16480 <UnityAssertNumbersWithin@@Base+0x158>
   16458:	ldrd	r2, [r0, #64]	; 0x40
   1645c:	adds	r2, r2, #1
   16460:	adc	r3, r3, #0
   16464:	strd	r2, [r0, #64]	; 0x40
   16468:	b	1647c <UnityAssertNumbersWithin@@Base+0x154>
   1646c:	ldrd	r2, [r0, #96]	; 0x60
   16470:	adds	r2, r2, #1
   16474:	adc	r3, r3, #0
   16478:	strd	r2, [r0, #96]	; 0x60
   1647c:	sub	r1, r6, r5
   16480:	mov	r2, #0
   16484:	cmp	r1, r7
   16488:	mov	r3, r0
   1648c:	movwhi	r2, #1
   16490:	str	r2, [r4, #32]
   16494:	mov	r2, #112	; 0x70
   16498:	movwhi	r2, #104	; 0x68
   1649c:	ldr	r2, [r3, r2]!
   164a0:	adds	r2, r2, #1
   164a4:	str	r2, [r3]
   164a8:	ldr	r2, [r3, #4]
   164ac:	adc	r2, r2, #0
   164b0:	cmp	r1, r7
   164b4:	str	r2, [r3, #4]
   164b8:	bhi	164d0 <UnityAssertNumbersWithin@@Base+0x1a8>
   164bc:	ldrd	r2, [r0, #120]	; 0x78
   164c0:	adds	r2, r2, #1
   164c4:	adc	r3, r3, #0
   164c8:	strd	r2, [r0, #120]	; 0x78
   164cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   164d0:	ldr	r0, [fp, #8]
   164d4:	bl	150e8 <UnityAssertBits@@Base+0x108>
   164d8:	movw	r0, #55477	; 0xd8b5
   164dc:	movt	r0, #1
   164e0:	bl	14298 <UnityPrint@@Base>
   164e4:	mov	r0, r7
   164e8:	mov	r1, r8
   164ec:	bl	14854 <UnityPrintNumberByStyle@@Base>
   164f0:	movw	r0, #55420	; 0xd87c
   164f4:	movt	r0, #1
   164f8:	bl	14298 <UnityPrint@@Base>
   164fc:	mov	r0, r6
   16500:	mov	r1, r8
   16504:	bl	14854 <UnityPrintNumberByStyle@@Base>
   16508:	movw	r0, #55431	; 0xd887
   1650c:	movt	r0, #1
   16510:	bl	14298 <UnityPrint@@Base>
   16514:	mov	r0, r5
   16518:	mov	r1, r8
   1651c:	bl	14854 <UnityPrintNumberByStyle@@Base>
   16520:	mov	r0, r9
   16524:	bl	15148 <UnityAssertBits@@Base+0x168>
   16528:	mov	r0, #1
   1652c:	mov	r1, #1
   16530:	str	r0, [r4, #32]
   16534:	add	r0, r4, #40	; 0x28
   16538:	bl	12610 <longjmp@plt>

0001653c <UnityAssertEqualString@@Base>:
   1653c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16540:	add	fp, sp, #28
   16544:	sub	sp, sp, #4
   16548:	movw	lr, #64368	; 0xfb70
   1654c:	mov	sl, r1
   16550:	mov	r9, r0
   16554:	mov	r6, #16
   16558:	movt	lr, #2
   1655c:	ldrd	r0, [lr]
   16560:	mov	r5, lr
   16564:	adds	r0, r0, #1
   16568:	adc	r1, r1, #0
   1656c:	strd	r0, [lr]
   16570:	movw	r0, #1832	; 0x728
   16574:	movt	r0, #3
   16578:	ldr	r8, [r0, #32]
   1657c:	ldr	r1, [r0, #36]	; 0x24
   16580:	orrs	r1, r1, r8
   16584:	movwne	r6, #8
   16588:	ldr	r6, [r5, r6]!
   1658c:	adds	r6, r6, #1
   16590:	str	r6, [r5]
   16594:	ldr	r6, [r5, #4]
   16598:	adc	r6, r6, #0
   1659c:	cmp	r1, #0
   165a0:	str	r6, [r5, #4]
   165a4:	beq	165bc <UnityAssertEqualString@@Base+0x80>
   165a8:	ldrd	r2, [lr, #24]
   165ac:	adds	r2, r2, #1
   165b0:	adc	r3, r3, #0
   165b4:	strd	r2, [lr, #24]
   165b8:	b	16754 <UnityAssertEqualString@@Base+0x218>
   165bc:	cmp	sl, #0
   165c0:	mov	r1, sl
   165c4:	mov	r4, r9
   165c8:	mov	r6, #40	; 0x28
   165cc:	mov	r5, lr
   165d0:	str	r2, [sp]
   165d4:	movwne	r1, #1
   165d8:	cmp	r9, #0
   165dc:	movwne	r4, #1
   165e0:	ands	r1, r4, r1
   165e4:	movwne	r6, #32
   165e8:	ldr	r6, [r5, r6]!
   165ec:	adds	r6, r6, #1
   165f0:	str	r6, [r5]
   165f4:	ldr	r6, [r5, #4]
   165f8:	adc	r6, r6, #0
   165fc:	cmp	r1, #1
   16600:	str	r6, [r5, #4]
   16604:	bne	166e4 <UnityAssertEqualString@@Base+0x1a8>
   16608:	ldrd	r4, [lr, #48]	; 0x30
   1660c:	add	ip, lr, #104	; 0x68
   16610:	mov	r6, r9
   16614:	adds	r4, r4, #1
   16618:	adc	r5, r5, #0
   1661c:	strd	r4, [lr, #48]	; 0x30
   16620:	mov	r5, sl
   16624:	b	16678 <UnityAssertEqualString@@Base+0x13c>
   16628:	ldrb	r0, [r5]
   1662c:	ldrb	r1, [r6]
   16630:	mov	r4, #96	; 0x60
   16634:	mov	r7, lr
   16638:	cmp	r1, r0
   1663c:	movwne	r4, #88	; 0x58
   16640:	ldr	r4, [r7, r4]!
   16644:	adds	r4, r4, #1
   16648:	str	r4, [r7]
   1664c:	ldr	r4, [r7, #4]
   16650:	adc	r4, r4, #0
   16654:	cmp	r1, r0
   16658:	str	r4, [r7, #4]
   1665c:	bne	16770 <UnityAssertEqualString@@Base+0x234>
   16660:	ldrd	r0, [lr, #112]	; 0x70
   16664:	add	r6, r6, #1
   16668:	add	r5, r5, #1
   1666c:	adds	r0, r0, #1
   16670:	adc	r1, r1, #0
   16674:	strd	r0, [lr, #112]	; 0x70
   16678:	ldrb	r4, [r6]
   1667c:	mov	r1, #64	; 0x40
   16680:	mov	r0, lr
   16684:	cmp	r4, #0
   16688:	movwne	r1, #56	; 0x38
   1668c:	ldr	r1, [r0, r1]!
   16690:	adds	r1, r1, #1
   16694:	str	r1, [r0]
   16698:	ldr	r1, [r0, #4]
   1669c:	adc	r1, r1, #0
   166a0:	cmp	r4, #0
   166a4:	str	r1, [r0, #4]
   166a8:	bne	16628 <UnityAssertEqualString@@Base+0xec>
   166ac:	ldrb	r0, [r5]
   166b0:	mov	r1, #80	; 0x50
   166b4:	mov	r7, lr
   166b8:	cmp	r0, #0
   166bc:	movwne	r1, #72	; 0x48
   166c0:	ldr	r1, [r7, r1]!
   166c4:	adds	r1, r1, #1
   166c8:	str	r1, [r7]
   166cc:	ldr	r1, [r7, #4]
   166d0:	adc	r1, r1, #0
   166d4:	cmp	r0, #0
   166d8:	str	r1, [r7, #4]
   166dc:	bne	16628 <UnityAssertEqualString@@Base+0xec>
   166e0:	b	16714 <UnityAssertEqualString@@Base+0x1d8>
   166e4:	mov	r0, #128	; 0x80
   166e8:	cmp	r9, sl
   166ec:	mov	r1, lr
   166f0:	movwne	r0, #120	; 0x78
   166f4:	ldr	r0, [r1, r0]!
   166f8:	adds	r0, r0, #1
   166fc:	str	r0, [r1]
   16700:	ldr	r0, [r1, #4]
   16704:	adc	r0, r0, #0
   16708:	cmp	r9, sl
   1670c:	str	r0, [r1, #4]
   16710:	bne	1676c <UnityAssertEqualString@@Base+0x230>
   16714:	mov	r0, #152	; 0x98
   16718:	cmp	r8, #0
   1671c:	mov	r1, lr
   16720:	movwne	r0, #144	; 0x90
   16724:	ldr	r0, [r1, r0]!
   16728:	adds	r0, r0, #1
   1672c:	str	r0, [r1]
   16730:	ldr	r0, [r1, #4]
   16734:	adc	r0, r0, #0
   16738:	cmp	r8, #0
   1673c:	str	r0, [r1, #4]
   16740:	bne	167a0 <UnityAssertEqualString@@Base+0x264>
   16744:	ldrd	r0, [lr, #160]	; 0xa0
   16748:	adds	r0, r0, #1
   1674c:	adc	r1, r1, #0
   16750:	strd	r0, [lr, #160]	; 0xa0
   16754:	ldrd	r0, [lr, #168]	; 0xa8
   16758:	adds	r0, r0, #1
   1675c:	adc	r1, r1, #0
   16760:	strd	r0, [lr, #168]	; 0xa8
   16764:	sub	sp, fp, #28
   16768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1676c:	add	ip, lr, #136	; 0x88
   16770:	ldrd	r0, [ip]
   16774:	adds	r0, r0, #1
   16778:	adc	r1, r1, #0
   1677c:	strd	r0, [ip]
   16780:	movw	r1, #1832	; 0x728
   16784:	mov	r0, #1
   16788:	movt	r1, #3
   1678c:	str	r0, [r1, #32]
   16790:	ldrd	r0, [lr, #144]	; 0x90
   16794:	adds	r0, r0, #1
   16798:	adc	r1, r1, #0
   1679c:	strd	r0, [lr, #144]	; 0x90
   167a0:	mov	r0, r3
   167a4:	bl	150e8 <UnityAssertBits@@Base+0x108>
   167a8:	mov	r0, r9
   167ac:	mov	r1, sl
   167b0:	bl	167d8 <UnityAssertEqualString@@Base+0x29c>
   167b4:	ldr	r0, [sp]
   167b8:	bl	15148 <UnityAssertBits@@Base+0x168>
   167bc:	movw	r1, #1832	; 0x728
   167c0:	mov	r0, #1
   167c4:	movt	r1, #3
   167c8:	str	r0, [r1, #32]
   167cc:	add	r0, r1, #40	; 0x28
   167d0:	mov	r1, #1
   167d4:	bl	12610 <longjmp@plt>
   167d8:	push	{r4, r5, r6, sl, fp, lr}
   167dc:	add	fp, sp, #16
   167e0:	movw	r6, #64544	; 0xfc20
   167e4:	mov	r4, r1
   167e8:	mov	r5, r0
   167ec:	movt	r6, #2
   167f0:	ldrd	r0, [r6]
   167f4:	adds	r0, r0, #1
   167f8:	adc	r1, r1, #0
   167fc:	strd	r0, [r6]
   16800:	movw	r0, #55420	; 0xd87c
   16804:	movt	r0, #1
   16808:	bl	14298 <UnityPrint@@Base>
   1680c:	mov	r0, #16
   16810:	cmp	r5, #0
   16814:	mov	r1, r6
   16818:	movwne	r0, #8
   1681c:	ldr	r0, [r1, r0]!
   16820:	adds	r0, r0, #1
   16824:	str	r0, [r1]
   16828:	ldr	r0, [r1, #4]
   1682c:	adc	r0, r0, #0
   16830:	cmp	r5, #0
   16834:	str	r0, [r1, #4]
   16838:	beq	16868 <UnityAssertEqualString@@Base+0x32c>
   1683c:	ldrd	r0, [r6, #24]
   16840:	adds	r0, r0, #1
   16844:	adc	r1, r1, #0
   16848:	strd	r0, [r6, #24]
   1684c:	mov	r0, #39	; 0x27
   16850:	bl	12760 <putchar@plt>
   16854:	mov	r0, r5
   16858:	bl	14298 <UnityPrint@@Base>
   1685c:	mov	r0, #39	; 0x27
   16860:	bl	12760 <putchar@plt>
   16864:	b	16884 <UnityAssertEqualString@@Base+0x348>
   16868:	ldrd	r0, [r6, #32]
   1686c:	adds	r0, r0, #1
   16870:	adc	r1, r1, #0
   16874:	strd	r0, [r6, #32]
   16878:	movw	r0, #55412	; 0xd874
   1687c:	movt	r0, #1
   16880:	bl	14298 <UnityPrint@@Base>
   16884:	movw	r0, #55431	; 0xd887
   16888:	movt	r0, #1
   1688c:	bl	14298 <UnityPrint@@Base>
   16890:	mov	r0, #48	; 0x30
   16894:	cmp	r4, #0
   16898:	mov	r1, r6
   1689c:	movwne	r0, #40	; 0x28
   168a0:	ldr	r0, [r1, r0]!
   168a4:	adds	r0, r0, #1
   168a8:	str	r0, [r1]
   168ac:	ldr	r0, [r1, #4]
   168b0:	adc	r0, r0, #0
   168b4:	cmp	r4, #0
   168b8:	str	r0, [r1, #4]
   168bc:	beq	168ec <UnityAssertEqualString@@Base+0x3b0>
   168c0:	ldrd	r0, [r6, #56]	; 0x38
   168c4:	adds	r0, r0, #1
   168c8:	adc	r1, r1, #0
   168cc:	strd	r0, [r6, #56]	; 0x38
   168d0:	mov	r0, #39	; 0x27
   168d4:	bl	12760 <putchar@plt>
   168d8:	mov	r0, r4
   168dc:	bl	14298 <UnityPrint@@Base>
   168e0:	mov	r0, #39	; 0x27
   168e4:	bl	12760 <putchar@plt>
   168e8:	b	16908 <UnityAssertEqualString@@Base+0x3cc>
   168ec:	ldrd	r0, [r6, #64]	; 0x40
   168f0:	adds	r0, r0, #1
   168f4:	adc	r1, r1, #0
   168f8:	strd	r0, [r6, #64]	; 0x40
   168fc:	movw	r0, #55412	; 0xd874
   16900:	movt	r0, #1
   16904:	bl	14298 <UnityPrint@@Base>
   16908:	ldrd	r0, [r6, #72]	; 0x48
   1690c:	adds	r0, r0, #1
   16910:	adc	r1, r1, #0
   16914:	strd	r0, [r6, #72]	; 0x48
   16918:	pop	{r4, r5, r6, sl, fp, pc}

0001691c <UnityAssertEqualStringLen@@Base>:
   1691c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16920:	add	fp, sp, #28
   16924:	sub	sp, sp, #4
   16928:	movw	r7, #64624	; 0xfc70
   1692c:	mov	lr, r3
   16930:	mov	r8, r2
   16934:	mov	r9, r0
   16938:	movw	r0, #1832	; 0x728
   1693c:	mov	sl, r1
   16940:	movt	r7, #2
   16944:	movt	r0, #3
   16948:	ldrd	r2, [r7]
   1694c:	adds	r2, r2, #1
   16950:	adc	r3, r3, #0
   16954:	strd	r2, [r7]
   16958:	ldrd	r2, [r0, #32]
   1695c:	mov	r0, r7
   16960:	orrs	r1, r3, r2
   16964:	mov	r3, #16
   16968:	movwne	r3, #8
   1696c:	ldr	r3, [r0, r3]!
   16970:	adds	r3, r3, #1
   16974:	str	r3, [r0]
   16978:	ldr	r3, [r0, #4]
   1697c:	adc	r3, r3, #0
   16980:	cmp	r1, #0
   16984:	str	r3, [r0, #4]
   16988:	beq	169a0 <UnityAssertEqualStringLen@@Base+0x84>
   1698c:	ldrd	r0, [r7, #24]
   16990:	adds	r0, r0, #1
   16994:	adc	r1, r1, #0
   16998:	strd	r0, [r7, #24]
   1699c:	b	16b5c <UnityAssertEqualStringLen@@Base+0x240>
   169a0:	cmp	sl, #0
   169a4:	mov	r0, sl
   169a8:	mov	r1, r9
   169ac:	mov	r3, r7
   169b0:	movwne	r0, #1
   169b4:	cmp	r9, #0
   169b8:	movwne	r1, #1
   169bc:	ands	r0, r1, r0
   169c0:	mov	r1, #40	; 0x28
   169c4:	movwne	r1, #32
   169c8:	ldr	r1, [r3, r1]!
   169cc:	adds	r1, r1, #1
   169d0:	str	r1, [r3]
   169d4:	ldr	r1, [r3, #4]
   169d8:	adc	r1, r1, #0
   169dc:	cmp	r0, #1
   169e0:	str	r1, [r3, #4]
   169e4:	bne	16aec <UnityAssertEqualStringLen@@Base+0x1d0>
   169e8:	ldrd	r0, [r7, #48]	; 0x30
   169ec:	mov	r3, #0
   169f0:	add	ip, r7, #120	; 0x78
   169f4:	adds	r0, r0, #1
   169f8:	adc	r1, r1, #0
   169fc:	strd	r0, [r7, #48]	; 0x30
   16a00:	b	16a50 <UnityAssertEqualStringLen@@Base+0x134>
   16a04:	ldrb	r0, [sl, r3]
   16a08:	ldrb	r1, [r9, r3]
   16a0c:	mov	r6, #112	; 0x70
   16a10:	mov	r5, r7
   16a14:	cmp	r1, r0
   16a18:	movwne	r6, #104	; 0x68
   16a1c:	ldr	r6, [r5, r6]!
   16a20:	adds	r6, r6, #1
   16a24:	str	r6, [r5]
   16a28:	ldr	r6, [r5, #4]
   16a2c:	adc	r6, r6, #0
   16a30:	cmp	r1, r0
   16a34:	str	r6, [r5, #4]
   16a38:	bne	16b78 <UnityAssertEqualStringLen@@Base+0x25c>
   16a3c:	ldrd	r0, [r7, #128]	; 0x80
   16a40:	add	r3, r3, #1
   16a44:	adds	r0, r0, #1
   16a48:	adc	r1, r1, #0
   16a4c:	strd	r0, [r7, #128]	; 0x80
   16a50:	ldrb	r0, [r9, r3]
   16a54:	mov	r1, #64	; 0x40
   16a58:	mov	r4, r7
   16a5c:	cmp	r0, #0
   16a60:	movwne	r1, #56	; 0x38
   16a64:	ldr	r1, [r4, r1]!
   16a68:	adds	r1, r1, #1
   16a6c:	str	r1, [r4]
   16a70:	ldr	r1, [r4, #4]
   16a74:	adc	r1, r1, #0
   16a78:	cmp	r0, #0
   16a7c:	str	r1, [r4, #4]
   16a80:	bne	16ab8 <UnityAssertEqualStringLen@@Base+0x19c>
   16a84:	ldrb	r0, [sl, r3]
   16a88:	mov	r1, #80	; 0x50
   16a8c:	mov	r6, r7
   16a90:	cmp	r0, #0
   16a94:	movwne	r1, #72	; 0x48
   16a98:	ldr	r1, [r6, r1]!
   16a9c:	adds	r1, r1, #1
   16aa0:	str	r1, [r6]
   16aa4:	ldr	r1, [r6, #4]
   16aa8:	adc	r1, r1, #0
   16aac:	cmp	r0, #0
   16ab0:	str	r1, [r6, #4]
   16ab4:	beq	16b1c <UnityAssertEqualStringLen@@Base+0x200>
   16ab8:	cmp	r3, r8
   16abc:	mov	r0, #96	; 0x60
   16ac0:	mov	r1, r7
   16ac4:	movwcc	r0, #88	; 0x58
   16ac8:	ldr	r0, [r1, r0]!
   16acc:	adds	r0, r0, #1
   16ad0:	str	r0, [r1]
   16ad4:	ldr	r0, [r1, #4]
   16ad8:	adc	r0, r0, #0
   16adc:	cmp	r3, r8
   16ae0:	str	r0, [r1, #4]
   16ae4:	bcc	16a04 <UnityAssertEqualStringLen@@Base+0xe8>
   16ae8:	b	16b1c <UnityAssertEqualStringLen@@Base+0x200>
   16aec:	mov	r0, #144	; 0x90
   16af0:	cmp	r9, sl
   16af4:	mov	r1, r7
   16af8:	movwne	r0, #136	; 0x88
   16afc:	ldr	r0, [r1, r0]!
   16b00:	adds	r0, r0, #1
   16b04:	str	r0, [r1]
   16b08:	ldr	r0, [r1, #4]
   16b0c:	adc	r0, r0, #0
   16b10:	cmp	r9, sl
   16b14:	str	r0, [r1, #4]
   16b18:	bne	16b74 <UnityAssertEqualStringLen@@Base+0x258>
   16b1c:	mov	r0, #168	; 0xa8
   16b20:	cmp	r2, #0
   16b24:	mov	r1, r7
   16b28:	movwne	r0, #160	; 0xa0
   16b2c:	ldr	r0, [r1, r0]!
   16b30:	adds	r0, r0, #1
   16b34:	str	r0, [r1]
   16b38:	ldr	r0, [r1, #4]
   16b3c:	adc	r0, r0, #0
   16b40:	cmp	r2, #0
   16b44:	str	r0, [r1, #4]
   16b48:	bne	16ba8 <UnityAssertEqualStringLen@@Base+0x28c>
   16b4c:	ldrd	r0, [r7, #176]	; 0xb0
   16b50:	adds	r0, r0, #1
   16b54:	adc	r1, r1, #0
   16b58:	strd	r0, [r7, #176]	; 0xb0
   16b5c:	ldrd	r0, [r7, #184]	; 0xb8
   16b60:	adds	r0, r0, #1
   16b64:	adc	r1, r1, #0
   16b68:	strd	r0, [r7, #184]	; 0xb8
   16b6c:	sub	sp, fp, #28
   16b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b74:	add	ip, r7, #152	; 0x98
   16b78:	ldrd	r0, [ip]
   16b7c:	adds	r0, r0, #1
   16b80:	adc	r1, r1, #0
   16b84:	strd	r0, [ip]
   16b88:	movw	r1, #1832	; 0x728
   16b8c:	mov	r0, #1
   16b90:	movt	r1, #3
   16b94:	str	r0, [r1, #32]
   16b98:	ldrd	r0, [r7, #160]	; 0xa0
   16b9c:	adds	r0, r0, #1
   16ba0:	adc	r1, r1, #0
   16ba4:	strd	r0, [r7, #160]	; 0xa0
   16ba8:	ldr	r0, [fp, #8]
   16bac:	mov	r4, lr
   16bb0:	bl	150e8 <UnityAssertBits@@Base+0x108>
   16bb4:	mov	r0, r9
   16bb8:	mov	r1, sl
   16bbc:	mov	r2, r8
   16bc0:	bl	16be8 <UnityAssertEqualStringLen@@Base+0x2cc>
   16bc4:	mov	r0, r4
   16bc8:	bl	15148 <UnityAssertBits@@Base+0x168>
   16bcc:	movw	r1, #1832	; 0x728
   16bd0:	mov	r0, #1
   16bd4:	movt	r1, #3
   16bd8:	str	r0, [r1, #32]
   16bdc:	add	r0, r1, #40	; 0x28
   16be0:	mov	r1, #1
   16be4:	bl	12610 <longjmp@plt>
   16be8:	push	{r4, r5, r6, r7, fp, lr}
   16bec:	add	fp, sp, #16
   16bf0:	movw	r7, #64816	; 0xfd30
   16bf4:	mov	r5, r1
   16bf8:	mov	r6, r0
   16bfc:	mov	r4, r2
   16c00:	movt	r7, #2
   16c04:	ldrd	r0, [r7]
   16c08:	adds	r0, r0, #1
   16c0c:	adc	r1, r1, #0
   16c10:	strd	r0, [r7]
   16c14:	movw	r0, #55420	; 0xd87c
   16c18:	movt	r0, #1
   16c1c:	bl	14298 <UnityPrint@@Base>
   16c20:	mov	r0, #16
   16c24:	cmp	r6, #0
   16c28:	mov	r1, r7
   16c2c:	movwne	r0, #8
   16c30:	ldr	r0, [r1, r0]!
   16c34:	adds	r0, r0, #1
   16c38:	str	r0, [r1]
   16c3c:	ldr	r0, [r1, #4]
   16c40:	adc	r0, r0, #0
   16c44:	cmp	r6, #0
   16c48:	str	r0, [r1, #4]
   16c4c:	beq	16c80 <UnityAssertEqualStringLen@@Base+0x364>
   16c50:	ldrd	r0, [r7, #24]
   16c54:	adds	r0, r0, #1
   16c58:	adc	r1, r1, #0
   16c5c:	strd	r0, [r7, #24]
   16c60:	mov	r0, #39	; 0x27
   16c64:	bl	12760 <putchar@plt>
   16c68:	mov	r0, r6
   16c6c:	mov	r1, r4
   16c70:	bl	145f8 <UnityPrintLen@@Base>
   16c74:	mov	r0, #39	; 0x27
   16c78:	bl	12760 <putchar@plt>
   16c7c:	b	16c9c <UnityAssertEqualStringLen@@Base+0x380>
   16c80:	ldrd	r0, [r7, #32]
   16c84:	adds	r0, r0, #1
   16c88:	adc	r1, r1, #0
   16c8c:	strd	r0, [r7, #32]
   16c90:	movw	r0, #55412	; 0xd874
   16c94:	movt	r0, #1
   16c98:	bl	14298 <UnityPrint@@Base>
   16c9c:	movw	r0, #55431	; 0xd887
   16ca0:	movt	r0, #1
   16ca4:	bl	14298 <UnityPrint@@Base>
   16ca8:	mov	r0, #48	; 0x30
   16cac:	cmp	r5, #0
   16cb0:	mov	r1, r7
   16cb4:	movwne	r0, #40	; 0x28
   16cb8:	ldr	r0, [r1, r0]!
   16cbc:	adds	r0, r0, #1
   16cc0:	str	r0, [r1]
   16cc4:	ldr	r0, [r1, #4]
   16cc8:	adc	r0, r0, #0
   16ccc:	cmp	r5, #0
   16cd0:	str	r0, [r1, #4]
   16cd4:	beq	16d08 <UnityAssertEqualStringLen@@Base+0x3ec>
   16cd8:	ldrd	r0, [r7, #56]	; 0x38
   16cdc:	adds	r0, r0, #1
   16ce0:	adc	r1, r1, #0
   16ce4:	strd	r0, [r7, #56]	; 0x38
   16ce8:	mov	r0, #39	; 0x27
   16cec:	bl	12760 <putchar@plt>
   16cf0:	mov	r0, r5
   16cf4:	mov	r1, r4
   16cf8:	bl	145f8 <UnityPrintLen@@Base>
   16cfc:	mov	r0, #39	; 0x27
   16d00:	bl	12760 <putchar@plt>
   16d04:	b	16d24 <UnityAssertEqualStringLen@@Base+0x408>
   16d08:	ldrd	r0, [r7, #64]	; 0x40
   16d0c:	adds	r0, r0, #1
   16d10:	adc	r1, r1, #0
   16d14:	strd	r0, [r7, #64]	; 0x40
   16d18:	movw	r0, #55412	; 0xd874
   16d1c:	movt	r0, #1
   16d20:	bl	14298 <UnityPrint@@Base>
   16d24:	ldrd	r0, [r7, #72]	; 0x48
   16d28:	adds	r0, r0, #1
   16d2c:	adc	r1, r1, #0
   16d30:	strd	r0, [r7, #72]	; 0x48
   16d34:	pop	{r4, r5, r6, r7, fp, pc}

00016d38 <UnityAssertEqualStringArray@@Base>:
   16d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d3c:	add	fp, sp, #28
   16d40:	sub	sp, sp, #4
   16d44:	movw	r8, #64896	; 0xfd80
   16d48:	mov	r6, r1
   16d4c:	mov	r5, r0
   16d50:	movw	sl, #1832	; 0x728
   16d54:	mov	r9, r2
   16d58:	movt	r8, #2
   16d5c:	movt	sl, #3
   16d60:	ldrd	r0, [r8]
   16d64:	mov	r2, r8
   16d68:	adds	r0, r0, #1
   16d6c:	adc	r1, r1, #0
   16d70:	strd	r0, [r8]
   16d74:	ldrd	r0, [sl, #32]
   16d78:	orrs	r0, r1, r0
   16d7c:	mov	r1, #16
   16d80:	movwne	r1, #8
   16d84:	ldr	r1, [r2, r1]!
   16d88:	adds	r1, r1, #1
   16d8c:	str	r1, [r2]
   16d90:	ldr	r1, [r2, #4]
   16d94:	adc	r1, r1, #0
   16d98:	cmp	r0, #0
   16d9c:	str	r1, [r2, #4]
   16da0:	beq	16db8 <UnityAssertEqualStringArray@@Base+0x80>
   16da4:	ldrd	r0, [r8, #24]
   16da8:	adds	r0, r0, #1
   16dac:	adc	r1, r1, #0
   16db0:	strd	r0, [r8, #24]
   16db4:	b	1704c <UnityAssertEqualStringArray@@Base+0x314>
   16db8:	mov	r0, #40	; 0x28
   16dbc:	cmp	r9, #0
   16dc0:	mov	r1, r8
   16dc4:	ldr	r2, [fp, #8]
   16dc8:	mov	r4, r3
   16dcc:	movweq	r0, #32
   16dd0:	ldr	r0, [r1, r0]!
   16dd4:	adds	r0, r0, #1
   16dd8:	str	r0, [r1]
   16ddc:	ldr	r0, [r1, #4]
   16de0:	adc	r0, r0, #0
   16de4:	cmp	r9, #0
   16de8:	str	r0, [r1, #4]
   16dec:	beq	17124 <UnityAssertEqualStringArray@@Base+0x3ec>
   16df0:	mov	r0, r5
   16df4:	mov	r1, r6
   16df8:	mov	r3, r4
   16dfc:	bl	158e0 <UnityAssertEqualIntArray@@Base+0x538>
   16e00:	mov	r1, #56	; 0x38
   16e04:	cmp	r0, #1
   16e08:	mov	r2, r8
   16e0c:	movweq	r1, #48	; 0x30
   16e10:	ldr	r1, [r2, r1]!
   16e14:	adds	r1, r1, #1
   16e18:	str	r1, [r2]
   16e1c:	ldr	r1, [r2, #4]
   16e20:	adc	r1, r1, #0
   16e24:	cmp	r0, #1
   16e28:	str	r1, [r2, #4]
   16e2c:	bne	16e44 <UnityAssertEqualStringArray@@Base+0x10c>
   16e30:	ldrd	r0, [r8, #64]	; 0x40
   16e34:	adds	r0, r0, #1
   16e38:	adc	r1, r1, #0
   16e3c:	strd	r0, [r8, #64]	; 0x40
   16e40:	b	1704c <UnityAssertEqualStringArray@@Base+0x314>
   16e44:	str	r4, [sp]
   16e48:	mov	r4, #0
   16e4c:	ldr	r0, [r5, r4, lsl #2]
   16e50:	mov	r1, #80	; 0x50
   16e54:	mov	r2, r8
   16e58:	cmp	r0, #0
   16e5c:	movwne	r1, #72	; 0x48
   16e60:	ldr	r1, [r2, r1]!
   16e64:	adds	r1, r1, #1
   16e68:	str	r1, [r2]
   16e6c:	ldr	r1, [r2, #4]
   16e70:	adc	r1, r1, #0
   16e74:	cmp	r0, #0
   16e78:	str	r1, [r2, #4]
   16e7c:	beq	16f94 <UnityAssertEqualStringArray@@Base+0x25c>
   16e80:	ldr	r0, [r6, r4, lsl #2]
   16e84:	mov	r1, #96	; 0x60
   16e88:	mov	r2, r8
   16e8c:	cmp	r0, #0
   16e90:	movwne	r1, #88	; 0x58
   16e94:	ldr	r1, [r2, r1]!
   16e98:	adds	r1, r1, #1
   16e9c:	str	r1, [r2]
   16ea0:	ldr	r1, [r2, #4]
   16ea4:	adc	r1, r1, #0
   16ea8:	cmp	r0, #0
   16eac:	str	r1, [r2, #4]
   16eb0:	beq	16f94 <UnityAssertEqualStringArray@@Base+0x25c>
   16eb4:	ldrd	r0, [r8, #104]	; 0x68
   16eb8:	adds	r0, r0, #1
   16ebc:	adc	r1, r1, #0
   16ec0:	strd	r0, [r8, #104]	; 0x68
   16ec4:	mov	r0, #0
   16ec8:	b	16f20 <UnityAssertEqualStringArray@@Base+0x1e8>
   16ecc:	ldr	r1, [r6, r4, lsl #2]
   16ed0:	ldr	r2, [r5, r4, lsl #2]
   16ed4:	mov	r3, #152	; 0x98
   16ed8:	mov	r7, r8
   16edc:	ldrb	r1, [r1, r0]
   16ee0:	ldrb	r2, [r2, r0]
   16ee4:	cmp	r2, r1
   16ee8:	movwne	r3, #144	; 0x90
   16eec:	ldr	r3, [r7, r3]!
   16ef0:	adds	r3, r3, #1
   16ef4:	str	r3, [r7]
   16ef8:	ldr	r3, [r7, #4]
   16efc:	adc	r3, r3, #0
   16f00:	cmp	r2, r1
   16f04:	str	r3, [r7, #4]
   16f08:	bne	1706c <UnityAssertEqualStringArray@@Base+0x334>
   16f0c:	ldrd	r2, [r8, #168]	; 0xa8
   16f10:	add	r0, r0, #1
   16f14:	adds	r2, r2, #1
   16f18:	adc	r3, r3, #0
   16f1c:	strd	r2, [r8, #168]	; 0xa8
   16f20:	ldr	r1, [r5, r4, lsl #2]
   16f24:	mov	r2, #120	; 0x78
   16f28:	mov	r3, r8
   16f2c:	ldrb	r1, [r1, r0]
   16f30:	cmp	r1, #0
   16f34:	movwne	r2, #112	; 0x70
   16f38:	ldr	r2, [r3, r2]!
   16f3c:	adds	r2, r2, #1
   16f40:	str	r2, [r3]
   16f44:	ldr	r2, [r3, #4]
   16f48:	adc	r2, r2, #0
   16f4c:	cmp	r1, #0
   16f50:	str	r2, [r3, #4]
   16f54:	bne	16ecc <UnityAssertEqualStringArray@@Base+0x194>
   16f58:	ldr	r1, [r6, r4, lsl #2]
   16f5c:	mov	r2, #136	; 0x88
   16f60:	mov	r3, r8
   16f64:	ldrb	r1, [r1, r0]
   16f68:	cmp	r1, #0
   16f6c:	movwne	r2, #128	; 0x80
   16f70:	ldr	r2, [r3, r2]!
   16f74:	adds	r2, r2, #1
   16f78:	str	r2, [r3]
   16f7c:	ldr	r2, [r3, #4]
   16f80:	adc	r2, r2, #0
   16f84:	cmp	r1, #0
   16f88:	str	r2, [r3, #4]
   16f8c:	bne	16ecc <UnityAssertEqualStringArray@@Base+0x194>
   16f90:	b	16fcc <UnityAssertEqualStringArray@@Base+0x294>
   16f94:	ldr	r0, [r6, r4, lsl #2]
   16f98:	ldr	r1, [r5, r4, lsl #2]
   16f9c:	mov	r2, #184	; 0xb8
   16fa0:	mov	r3, r8
   16fa4:	cmp	r1, r0
   16fa8:	movwne	r2, #176	; 0xb0
   16fac:	ldr	r2, [r3, r2]!
   16fb0:	adds	r2, r2, #1
   16fb4:	str	r2, [r3]
   16fb8:	ldr	r2, [r3, #4]
   16fbc:	adc	r2, r2, #0
   16fc0:	cmp	r1, r0
   16fc4:	str	r2, [r3, #4]
   16fc8:	bne	1711c <UnityAssertEqualStringArray@@Base+0x3e4>
   16fcc:	ldr	r0, [sl, #32]
   16fd0:	mov	r1, #208	; 0xd0
   16fd4:	mov	r2, r8
   16fd8:	cmp	r0, #0
   16fdc:	movwne	r1, #200	; 0xc8
   16fe0:	ldr	r1, [r2, r1]!
   16fe4:	adds	r1, r1, #1
   16fe8:	str	r1, [r2]
   16fec:	ldr	r1, [r2, #4]
   16ff0:	adc	r1, r1, #0
   16ff4:	cmp	r0, #0
   16ff8:	str	r1, [r2, #4]
   16ffc:	bne	17098 <UnityAssertEqualStringArray@@Base+0x360>
   17000:	add	r4, r4, #1
   17004:	mov	r0, #248	; 0xf8
   17008:	mov	r1, r8
   1700c:	cmp	r4, r9
   17010:	movwcc	r0, #240	; 0xf0
   17014:	ldr	r0, [r1, r0]!
   17018:	adds	r0, r0, #1
   1701c:	str	r0, [r1]
   17020:	ldr	r0, [r1, #4]
   17024:	adc	r0, r0, #0
   17028:	cmp	r4, r9
   1702c:	str	r0, [r1, #4]
   17030:	bcc	16e4c <UnityAssertEqualStringArray@@Base+0x114>
   17034:	ldr	r0, [r8, #256]	; 0x100
   17038:	ldr	r1, [r8, #260]	; 0x104
   1703c:	adds	r0, r0, #1
   17040:	adc	r1, r1, #0
   17044:	str	r0, [r8, #256]	; 0x100
   17048:	str	r1, [r8, #260]	; 0x104
   1704c:	ldr	r0, [r8, #264]	; 0x108
   17050:	ldr	r1, [r8, #268]	; 0x10c
   17054:	adds	r0, r0, #1
   17058:	adc	r1, r1, #0
   1705c:	str	r0, [r8, #264]	; 0x108
   17060:	str	r1, [r8, #268]	; 0x10c
   17064:	sub	sp, fp, #28
   17068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1706c:	add	r0, r8, #160	; 0xa0
   17070:	ldrd	r2, [r0]
   17074:	adds	r2, r2, #1
   17078:	adc	r3, r3, #0
   1707c:	strd	r2, [r0]
   17080:	mov	r0, #1
   17084:	str	r0, [sl, #32]
   17088:	ldrd	r0, [r8, #200]	; 0xc8
   1708c:	adds	r0, r0, #1
   17090:	adc	r1, r1, #0
   17094:	strd	r0, [r8, #200]	; 0xc8
   17098:	ldr	r0, [fp, #8]
   1709c:	bl	150e8 <UnityAssertBits@@Base+0x108>
   170a0:	mov	r0, #224	; 0xe0
   170a4:	cmp	r9, #1
   170a8:	mov	r1, r8
   170ac:	movwhi	r0, #216	; 0xd8
   170b0:	ldr	r0, [r1, r0]!
   170b4:	adds	r0, r0, #1
   170b8:	str	r0, [r1]
   170bc:	ldr	r0, [r1, #4]
   170c0:	adc	r0, r0, #0
   170c4:	cmp	r9, #2
   170c8:	str	r0, [r1, #4]
   170cc:	bcc	170f4 <UnityAssertEqualStringArray@@Base+0x3bc>
   170d0:	ldrd	r0, [r8, #232]	; 0xe8
   170d4:	adds	r0, r0, #1
   170d8:	adc	r1, r1, #0
   170dc:	strd	r0, [r8, #232]	; 0xe8
   170e0:	movw	r0, #55442	; 0xd892
   170e4:	movt	r0, #1
   170e8:	bl	14298 <UnityPrint@@Base>
   170ec:	mov	r0, r4
   170f0:	bl	14b18 <UnityPrintNumberUnsigned@@Base>
   170f4:	ldr	r1, [r6, r4, lsl #2]
   170f8:	ldr	r0, [r5, r4, lsl #2]
   170fc:	bl	167d8 <UnityAssertEqualString@@Base+0x29c>
   17100:	ldr	r0, [sp]
   17104:	bl	15148 <UnityAssertBits@@Base+0x168>
   17108:	mov	r0, #1
   1710c:	mov	r1, #1
   17110:	str	r0, [sl, #32]
   17114:	add	r0, sl, #40	; 0x28
   17118:	bl	12610 <longjmp@plt>
   1711c:	add	r0, r8, #192	; 0xc0
   17120:	b	17070 <UnityAssertEqualStringArray@@Base+0x338>
   17124:	mov	r0, r2
   17128:	bl	150e8 <UnityAssertBits@@Base+0x108>
   1712c:	movw	r0, #55503	; 0xd8cf
   17130:	movt	r0, #1
   17134:	bl	14298 <UnityPrint@@Base>
   17138:	mov	r0, r4
   1713c:	b	17104 <UnityAssertEqualStringArray@@Base+0x3cc>

00017140 <UnityAssertEqualMemory@@Base>:
   17140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17144:	add	fp, sp, #28
   17148:	sub	sp, sp, #4
   1714c:	movw	sl, #65168	; 0xfe90
   17150:	mov	r4, r1
   17154:	mov	r6, r0
   17158:	movw	r9, #1832	; 0x728
   1715c:	mov	r5, r2
   17160:	movt	sl, #2
   17164:	movt	r9, #3
   17168:	ldrd	r0, [sl]
   1716c:	mov	r2, sl
   17170:	adds	r0, r0, #1
   17174:	adc	r1, r1, #0
   17178:	strd	r0, [sl]
   1717c:	ldrd	r0, [r9, #32]
   17180:	orrs	r0, r1, r0
   17184:	mov	r1, #16
   17188:	movwne	r1, #8
   1718c:	ldr	r1, [r2, r1]!
   17190:	adds	r1, r1, #1
   17194:	str	r1, [r2]
   17198:	ldr	r1, [r2, #4]
   1719c:	adc	r1, r1, #0
   171a0:	cmp	r0, #0
   171a4:	str	r1, [r2, #4]
   171a8:	beq	171c0 <UnityAssertEqualMemory@@Base+0x80>
   171ac:	ldrd	r0, [sl, #24]
   171b0:	adds	r0, r0, #1
   171b4:	adc	r1, r1, #0
   171b8:	strd	r0, [sl, #24]
   171bc:	b	17364 <UnityAssertEqualMemory@@Base+0x224>
   171c0:	clz	r0, r3
   171c4:	clz	r1, r5
   171c8:	mov	r7, r3
   171cc:	mov	r3, sl
   171d0:	ldr	r2, [fp, #12]
   171d4:	ldr	r8, [fp, #8]
   171d8:	lsr	r0, r0, #5
   171dc:	lsr	r1, r1, #5
   171e0:	orrs	r0, r1, r0
   171e4:	mov	r1, #40	; 0x28
   171e8:	movwne	r1, #32
   171ec:	ldr	r1, [r3, r1]!
   171f0:	adds	r1, r1, #1
   171f4:	str	r1, [r3]
   171f8:	ldr	r1, [r3, #4]
   171fc:	adc	r1, r1, #0
   17200:	cmp	r0, #1
   17204:	str	r1, [r3, #4]
   17208:	beq	17454 <UnityAssertEqualMemory@@Base+0x314>
   1720c:	mov	r0, r6
   17210:	mov	r1, r4
   17214:	mov	r3, r8
   17218:	bl	158e0 <UnityAssertEqualIntArray@@Base+0x538>
   1721c:	mov	r1, #56	; 0x38
   17220:	cmp	r0, #1
   17224:	mov	r2, sl
   17228:	movweq	r1, #48	; 0x30
   1722c:	ldr	r1, [r2, r1]!
   17230:	adds	r1, r1, #1
   17234:	str	r1, [r2]
   17238:	ldr	r1, [r2, #4]
   1723c:	adc	r1, r1, #0
   17240:	cmp	r0, #1
   17244:	str	r1, [r2, #4]
   17248:	bne	17260 <UnityAssertEqualMemory@@Base+0x120>
   1724c:	ldrd	r0, [sl, #64]	; 0x40
   17250:	adds	r0, r0, #1
   17254:	adc	r1, r1, #0
   17258:	strd	r0, [sl, #64]	; 0x40
   1725c:	b	17364 <UnityAssertEqualMemory@@Base+0x224>
   17260:	ldrd	r0, [sl, #72]	; 0x48
   17264:	add	ip, sl, #88	; 0x58
   17268:	str	r7, [sp]
   1726c:	mov	lr, r7
   17270:	adds	r0, r0, #1
   17274:	adc	r1, r1, #0
   17278:	strd	r0, [sl, #72]	; 0x48
   1727c:	sub	r0, r5, #1
   17280:	add	r2, pc, #512	; 0x200
   17284:	vld1.64	{d18-d19}, [ip]
   17288:	mov	r8, lr
   1728c:	sub	lr, lr, #1
   17290:	mov	r7, #0
   17294:	vld1.64	{d16-d17}, [r2]
   17298:	vadd.i64	q8, q9, q8
   1729c:	vst1.64	{d16-d17}, [ip]
   172a0:	ldrb	r3, [r4]
   172a4:	ldrb	r1, [r6]
   172a8:	mov	r2, #120	; 0x78
   172ac:	mov	r9, sl
   172b0:	cmp	r1, r3
   172b4:	movwne	r2, #112	; 0x70
   172b8:	ldr	r2, [r9, r2]!
   172bc:	adds	r2, r2, #1
   172c0:	str	r2, [r9]
   172c4:	ldr	r2, [r9, #4]
   172c8:	adc	r2, r2, #0
   172cc:	cmp	r1, r3
   172d0:	str	r2, [r9, #4]
   172d4:	bne	1737c <UnityAssertEqualMemory@@Base+0x23c>
   172d8:	ldrd	r2, [sl, #152]	; 0x98
   172dc:	mov	r1, #104	; 0x68
   172e0:	add	r4, r4, #1
   172e4:	add	r6, r6, #1
   172e8:	adds	r2, r2, #1
   172ec:	adc	r3, r3, #0
   172f0:	cmp	r0, r7
   172f4:	add	r7, r7, #1
   172f8:	strd	r2, [sl, #152]	; 0x98
   172fc:	movwne	r1, #96	; 0x60
   17300:	mov	r2, sl
   17304:	ldr	r1, [r2, r1]!
   17308:	adds	r1, r1, #1
   1730c:	str	r1, [r2]
   17310:	ldr	r1, [r2, #4]
   17314:	adc	r1, r1, #0
   17318:	cmp	r5, r7
   1731c:	str	r1, [r2, #4]
   17320:	bne	172a0 <UnityAssertEqualMemory@@Base+0x160>
   17324:	cmp	lr, #0
   17328:	mov	r3, #80	; 0x50
   1732c:	mov	r7, sl
   17330:	movwne	r3, #72	; 0x48
   17334:	ldr	r3, [r7, r3]!
   17338:	adds	r3, r3, #1
   1733c:	str	r3, [r7]
   17340:	ldr	r3, [r7, #4]
   17344:	adc	r3, r3, #0
   17348:	cmp	lr, #0
   1734c:	str	r3, [r7, #4]
   17350:	bne	17280 <UnityAssertEqualMemory@@Base+0x140>
   17354:	ldrd	r0, [sl, #160]	; 0xa0
   17358:	adds	r0, r0, #1
   1735c:	adc	r1, r1, #0
   17360:	strd	r0, [sl, #160]	; 0xa0
   17364:	ldrd	r0, [sl, #168]	; 0xa8
   17368:	adds	r0, r0, #1
   1736c:	adc	r1, r1, #0
   17370:	strd	r0, [sl, #168]	; 0xa8
   17374:	sub	sp, fp, #28
   17378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1737c:	ldr	r0, [fp, #12]
   17380:	bl	150e8 <UnityAssertBits@@Base+0x108>
   17384:	movw	r0, #55459	; 0xd8a3
   17388:	movt	r0, #1
   1738c:	bl	14298 <UnityPrint@@Base>
   17390:	ldr	r2, [sp]
   17394:	mov	r0, #136	; 0x88
   17398:	mov	r1, sl
   1739c:	cmp	r2, #1
   173a0:	movwhi	r0, #128	; 0x80
   173a4:	ldr	r0, [r1, r0]!
   173a8:	adds	r0, r0, #1
   173ac:	str	r0, [r1]
   173b0:	ldr	r0, [r1, #4]
   173b4:	adc	r0, r0, #0
   173b8:	cmp	r2, #2
   173bc:	str	r0, [r1, #4]
   173c0:	bcc	173ec <UnityAssertEqualMemory@@Base+0x2ac>
   173c4:	ldrd	r0, [sl, #144]	; 0x90
   173c8:	adds	r0, r0, #1
   173cc:	adc	r1, r1, #0
   173d0:	strd	r0, [sl, #144]	; 0x90
   173d4:	movw	r0, #55442	; 0xd892
   173d8:	movt	r0, #1
   173dc:	bl	14298 <UnityPrint@@Base>
   173e0:	ldr	r0, [sp]
   173e4:	sub	r0, r0, r8
   173e8:	bl	14b18 <UnityPrintNumberUnsigned@@Base>
   173ec:	movw	r0, #55452	; 0xd89c
   173f0:	movt	r0, #1
   173f4:	bl	14298 <UnityPrint@@Base>
   173f8:	mov	r0, r7
   173fc:	bl	14b18 <UnityPrintNumberUnsigned@@Base>
   17400:	movw	r0, #55420	; 0xd87c
   17404:	movt	r0, #1
   17408:	bl	14298 <UnityPrint@@Base>
   1740c:	ldrb	r0, [r6]
   17410:	mov	r1, #65	; 0x41
   17414:	bl	14854 <UnityPrintNumberByStyle@@Base>
   17418:	movw	r0, #55431	; 0xd887
   1741c:	movt	r0, #1
   17420:	bl	14298 <UnityPrint@@Base>
   17424:	ldrb	r0, [r4]
   17428:	mov	r1, #65	; 0x41
   1742c:	bl	14854 <UnityPrintNumberByStyle@@Base>
   17430:	ldr	r0, [fp, #8]
   17434:	bl	15148 <UnityAssertBits@@Base+0x168>
   17438:	movw	r1, #1832	; 0x728
   1743c:	mov	r0, #1
   17440:	movt	r1, #3
   17444:	str	r0, [r1, #32]
   17448:	add	r0, r1, #40	; 0x28
   1744c:	mov	r1, #1
   17450:	bl	12610 <longjmp@plt>
   17454:	mov	r0, r2
   17458:	bl	150e8 <UnityAssertBits@@Base+0x108>
   1745c:	movw	r0, #55503	; 0xd8cf
   17460:	movt	r0, #1
   17464:	bl	14298 <UnityPrint@@Base>
   17468:	mov	r0, r8
   1746c:	bl	15148 <UnityAssertBits@@Base+0x168>
   17470:	mov	r0, #1
   17474:	mov	r1, #1
   17478:	str	r0, [r9, #32]
   1747c:	add	r0, r9, #40	; 0x28
   17480:	bl	12610 <longjmp@plt>
   17484:	nop	{0}
   17488:	andeq	r0, r0, r1
   1748c:	andeq	r0, r0, r0
   17490:	andeq	r0, r0, r1
   17494:	andeq	r0, r0, r0

00017498 <UnityFail@@Base>:
   17498:	push	{r4, r5, r6, sl, fp, lr}
   1749c:	add	fp, sp, #16
   174a0:	movw	r5, #65344	; 0xff40
   174a4:	mov	r4, r0
   174a8:	movw	r6, #1832	; 0x728
   174ac:	mov	r2, #16
   174b0:	movt	r5, #2
   174b4:	movt	r6, #3
   174b8:	ldm	r5, {r0, r3}
   174bc:	adds	r0, r0, #1
   174c0:	adc	r3, r3, #0
   174c4:	stm	r5, {r0, r3}
   174c8:	ldr	r0, [r6, #32]
   174cc:	ldr	r3, [r6, #36]	; 0x24
   174d0:	orrs	r0, r3, r0
   174d4:	mov	r3, r5
   174d8:	movwne	r2, #8
   174dc:	ldr	r2, [r3, r2]!
   174e0:	adds	r2, r2, #1
   174e4:	str	r2, [r3]
   174e8:	ldr	r2, [r3, #4]
   174ec:	adc	r2, r2, #0
   174f0:	cmp	r0, #0
   174f4:	str	r2, [r3, #4]
   174f8:	beq	17510 <UnityFail@@Base+0x78>
   174fc:	ldrd	r0, [r5, #24]
   17500:	adds	r0, r0, #1
   17504:	adc	r1, r1, #0
   17508:	strd	r0, [r5, #24]
   1750c:	pop	{r4, r5, r6, sl, fp, pc}
   17510:	ldr	r0, [r6]
   17514:	bl	14f70 <UnityConcludeTest@@Base+0x120>
   17518:	movw	r0, #62960	; 0xf5f0
   1751c:	add	r1, pc, #396	; 0x18c
   17520:	movt	r0, #2
   17524:	vld1.64	{d16-d17}, [r1]
   17528:	vld1.64	{d18-d19}, [r0 :128]
   1752c:	vadd.i64	q8, q9, q8
   17530:	vst1.64	{d16-d17}, [r0 :128]
   17534:	movw	r0, #55400	; 0xd868
   17538:	movt	r0, #1
   1753c:	bl	14298 <UnityPrint@@Base>
   17540:	mov	r0, #40	; 0x28
   17544:	cmp	r4, #0
   17548:	mov	r1, r5
   1754c:	movwne	r0, #32
   17550:	ldr	r0, [r1, r0]!
   17554:	adds	r0, r0, #1
   17558:	str	r0, [r1]
   1755c:	ldr	r0, [r1, #4]
   17560:	adc	r0, r0, #0
   17564:	cmp	r4, #0
   17568:	str	r0, [r1, #4]
   1756c:	beq	17698 <UnityFail@@Base+0x200>
   17570:	mov	r0, #58	; 0x3a
   17574:	bl	12760 <putchar@plt>
   17578:	ldr	r0, [r6, #8]
   1757c:	mov	r1, #56	; 0x38
   17580:	mov	r2, r5
   17584:	cmp	r0, #0
   17588:	movwne	r1, #48	; 0x30
   1758c:	ldr	r1, [r2, r1]!
   17590:	adds	r1, r1, #1
   17594:	str	r1, [r2]
   17598:	ldr	r1, [r2, #4]
   1759c:	adc	r1, r1, #0
   175a0:	cmp	r0, #0
   175a4:	str	r1, [r2, #4]
   175a8:	beq	17634 <UnityFail@@Base+0x19c>
   175ac:	movw	r0, #55825	; 0xda11
   175b0:	movt	r0, #1
   175b4:	bl	14298 <UnityPrint@@Base>
   175b8:	ldr	r0, [r6, #8]
   175bc:	bl	14298 <UnityPrint@@Base>
   175c0:	ldr	r0, [r6, #12]
   175c4:	mov	r1, #72	; 0x48
   175c8:	mov	r2, r5
   175cc:	cmp	r0, #0
   175d0:	movwne	r1, #64	; 0x40
   175d4:	ldr	r1, [r2, r1]!
   175d8:	adds	r1, r1, #1
   175dc:	str	r1, [r2]
   175e0:	ldr	r1, [r2, #4]
   175e4:	adc	r1, r1, #0
   175e8:	cmp	r0, #0
   175ec:	str	r1, [r2, #4]
   175f0:	beq	17618 <UnityFail@@Base+0x180>
   175f4:	ldrd	r0, [r5, #80]	; 0x50
   175f8:	adds	r0, r0, #1
   175fc:	adc	r1, r1, #0
   17600:	strd	r0, [r5, #80]	; 0x50
   17604:	movw	r0, #55835	; 0xda1b
   17608:	movt	r0, #1
   1760c:	bl	14298 <UnityPrint@@Base>
   17610:	ldr	r0, [r6, #12]
   17614:	bl	14298 <UnityPrint@@Base>
   17618:	ldrd	r0, [r5, #88]	; 0x58
   1761c:	adds	r0, r0, #1
   17620:	adc	r1, r1, #0
   17624:	strd	r0, [r5, #88]	; 0x58
   17628:	movw	r0, #55417	; 0xd879
   1762c:	movt	r0, #1
   17630:	bl	14298 <UnityPrint@@Base>
   17634:	ldrb	r0, [r4]
   17638:	mov	r1, #104	; 0x68
   1763c:	mov	r2, r5
   17640:	cmp	r0, #32
   17644:	movwne	r1, #96	; 0x60
   17648:	ldr	r1, [r2, r1]!
   1764c:	adds	r1, r1, #1
   17650:	str	r1, [r2]
   17654:	ldr	r1, [r2, #4]
   17658:	adc	r1, r1, #0
   1765c:	cmp	r0, #32
   17660:	str	r1, [r2, #4]
   17664:	beq	17680 <UnityFail@@Base+0x1e8>
   17668:	ldrd	r0, [r5, #112]	; 0x70
   1766c:	adds	r0, r0, #1
   17670:	adc	r1, r1, #0
   17674:	strd	r0, [r5, #112]	; 0x70
   17678:	mov	r0, #32
   1767c:	bl	12760 <putchar@plt>
   17680:	ldrd	r0, [r5, #120]	; 0x78
   17684:	adds	r0, r0, #1
   17688:	adc	r1, r1, #0
   1768c:	strd	r0, [r5, #120]	; 0x78
   17690:	mov	r0, r4
   17694:	bl	14298 <UnityPrint@@Base>
   17698:	mov	r0, #1
   1769c:	mov	r1, #1
   176a0:	str	r0, [r6, #32]
   176a4:	add	r0, r6, #40	; 0x28
   176a8:	bl	12610 <longjmp@plt>
   176ac:	nop	{0}
   176b0:	andeq	r0, r0, r1
   176b4:	andeq	r0, r0, r0
   176b8:	andeq	r0, r0, r1
   176bc:	andeq	r0, r0, r0

000176c0 <UnityIgnore@@Base>:
   176c0:	push	{r4, r5, r6, sl, fp, lr}
   176c4:	add	fp, sp, #16
   176c8:	movw	r6, #65472	; 0xffc0
   176cc:	mov	r4, r0
   176d0:	movw	r5, #1832	; 0x728
   176d4:	mov	r2, #16
   176d8:	movt	r6, #2
   176dc:	movt	r5, #3
   176e0:	ldm	r6, {r0, r3}
   176e4:	adds	r0, r0, #1
   176e8:	adc	r3, r3, #0
   176ec:	stm	r6, {r0, r3}
   176f0:	ldr	r0, [r5, #32]
   176f4:	ldr	r3, [r5, #36]	; 0x24
   176f8:	orrs	r0, r3, r0
   176fc:	mov	r3, r6
   17700:	movwne	r2, #8
   17704:	ldr	r2, [r3, r2]!
   17708:	adds	r2, r2, #1
   1770c:	str	r2, [r3]
   17710:	ldr	r2, [r3, #4]
   17714:	adc	r2, r2, #0
   17718:	cmp	r0, #0
   1771c:	str	r2, [r3, #4]
   17720:	beq	17738 <UnityIgnore@@Base+0x78>
   17724:	ldrd	r0, [r6, #24]
   17728:	adds	r0, r0, #1
   1772c:	adc	r1, r1, #0
   17730:	strd	r0, [r6, #24]
   17734:	pop	{r4, r5, r6, sl, fp, pc}
   17738:	ldr	r0, [r5]
   1773c:	bl	14f70 <UnityConcludeTest@@Base+0x120>
   17740:	movw	r0, #55405	; 0xd86d
   17744:	movt	r0, #1
   17748:	bl	14298 <UnityPrint@@Base>
   1774c:	mov	r0, #40	; 0x28
   17750:	cmp	r4, #0
   17754:	mov	r1, r6
   17758:	movwne	r0, #32
   1775c:	ldr	r0, [r1, r0]!
   17760:	adds	r0, r0, #1
   17764:	str	r0, [r1]
   17768:	ldr	r0, [r1, #4]
   1776c:	adc	r0, r0, #0
   17770:	cmp	r4, #0
   17774:	str	r0, [r1, #4]
   17778:	beq	177a4 <UnityIgnore@@Base+0xe4>
   1777c:	ldrd	r0, [r6, #48]	; 0x30
   17780:	adds	r0, r0, #1
   17784:	adc	r1, r1, #0
   17788:	strd	r0, [r6, #48]	; 0x30
   1778c:	mov	r0, #58	; 0x3a
   17790:	bl	12760 <putchar@plt>
   17794:	mov	r0, #32
   17798:	bl	12760 <putchar@plt>
   1779c:	mov	r0, r4
   177a0:	bl	14298 <UnityPrint@@Base>
   177a4:	mov	r0, #1
   177a8:	mov	r1, #1
   177ac:	str	r0, [r5, #36]	; 0x24
   177b0:	add	r0, r5, #40	; 0x28
   177b4:	bl	12610 <longjmp@plt>

000177b8 <setUp@@Base>:
   177b8:	movw	r0, #0
   177bc:	add	r1, pc, #20
   177c0:	movt	r0, #3
   177c4:	vld1.64	{d16-d17}, [r1]
   177c8:	vld1.64	{d18-d19}, [r0 :128]
   177cc:	vadd.i64	q8, q9, q8
   177d0:	vst1.64	{d16-d17}, [r0 :128]
   177d4:	bx	lr
   177d8:	andeq	r0, r0, r1
   177dc:	andeq	r0, r0, r0
   177e0:	andeq	r0, r0, r1
   177e4:	andeq	r0, r0, r0

000177e8 <tearDown@@Base>:
   177e8:	movw	r0, #16
   177ec:	add	r1, pc, #20
   177f0:	movt	r0, #3
   177f4:	vld1.64	{d16-d17}, [r1]
   177f8:	vld1.64	{d18-d19}, [r0 :128]
   177fc:	vadd.i64	q8, q9, q8
   17800:	vst1.64	{d16-d17}, [r0 :128]
   17804:	bx	lr
   17808:	andeq	r0, r0, r1
   1780c:	andeq	r0, r0, r0
   17810:	andeq	r0, r0, r1
   17814:	andeq	r0, r0, r0

00017818 <UnityDefaultTestRun@@Base>:
   17818:	push	{r4, r5, r6, r7, fp, lr}
   1781c:	add	fp, sp, #16
   17820:	movw	r7, #1832	; 0x728
   17824:	movw	r6, #32
   17828:	mov	r4, r0
   1782c:	mov	r0, #0
   17830:	movt	r7, #3
   17834:	movt	r6, #3
   17838:	str	r1, [r7, #4]
   1783c:	str	r2, [r7, #16]
   17840:	str	r0, [r7, #8]
   17844:	str	r0, [r7, #12]
   17848:	ldrd	r0, [r6]
   1784c:	add	r5, r7, #40	; 0x28
   17850:	ldr	r2, [r7, #20]
   17854:	adds	r0, r0, #1
   17858:	adc	r1, r1, #0
   1785c:	add	r2, r2, #1
   17860:	strd	r0, [r6]
   17864:	mov	r0, r5
   17868:	str	r2, [r7, #20]
   1786c:	bl	12628 <_setjmp@plt>
   17870:	mov	r1, #16
   17874:	cmp	r0, #0
   17878:	mov	r2, r6
   1787c:	movweq	r1, #8
   17880:	ldr	r1, [r2, r1]!
   17884:	adds	r1, r1, #1
   17888:	str	r1, [r2]
   1788c:	ldr	r1, [r2, #4]
   17890:	adc	r1, r1, #0
   17894:	cmp	r0, #0
   17898:	str	r1, [r2, #4]
   1789c:	bne	178b8 <UnityDefaultTestRun@@Base+0xa0>
   178a0:	ldrd	r0, [r6, #24]
   178a4:	adds	r0, r0, #1
   178a8:	adc	r1, r1, #0
   178ac:	strd	r0, [r6, #24]
   178b0:	bl	177b8 <setUp@@Base>
   178b4:	blx	r4
   178b8:	mov	r0, r5
   178bc:	bl	12628 <_setjmp@plt>
   178c0:	ldr	r1, [r7, #36]	; 0x24
   178c4:	mov	r2, r6
   178c8:	orrs	r0, r1, r0
   178cc:	mov	r1, #40	; 0x28
   178d0:	movwne	r1, #32
   178d4:	ldr	r1, [r2, r1]!
   178d8:	adds	r1, r1, #1
   178dc:	str	r1, [r2]
   178e0:	ldr	r1, [r2, #4]
   178e4:	adc	r1, r1, #0
   178e8:	cmp	r0, #0
   178ec:	str	r1, [r2, #4]
   178f0:	bne	17908 <UnityDefaultTestRun@@Base+0xf0>
   178f4:	ldrd	r0, [r6, #48]	; 0x30
   178f8:	adds	r0, r0, #1
   178fc:	adc	r1, r1, #0
   17900:	strd	r0, [r6, #48]	; 0x30
   17904:	bl	177e8 <tearDown@@Base>
   17908:	ldrd	r0, [r6, #56]	; 0x38
   1790c:	adds	r0, r0, #1
   17910:	adc	r1, r1, #0
   17914:	strd	r0, [r6, #56]	; 0x38
   17918:	bl	14e50 <UnityConcludeTest@@Base>
   1791c:	pop	{r4, r5, r6, r7, fp, pc}

00017920 <UnityBegin@@Base>:
   17920:	movw	r1, #96	; 0x60
   17924:	add	r2, pc, #60	; 0x3c
   17928:	vmov.i32	q10, #0	; 0x00000000
   1792c:	movt	r1, #3
   17930:	vld1.64	{d16-d17}, [r2]
   17934:	movw	r2, #1832	; 0x728
   17938:	vld1.64	{d18-d19}, [r1 :128]
   1793c:	movt	r2, #3
   17940:	str	r0, [r2]
   17944:	mov	r0, #0
   17948:	str	r0, [r2, #36]	; 0x24
   1794c:	add	r0, r2, #20
   17950:	vst1.32	{d20-d21}, [r0]
   17954:	add	r0, r2, #4
   17958:	vadd.i64	q8, q9, q8
   1795c:	vst1.32	{d20-d21}, [r0]
   17960:	vst1.64	{d16-d17}, [r1 :128]
   17964:	bx	lr
   17968:	andeq	r0, r0, r1
   1796c:	andeq	r0, r0, r0
   17970:	andeq	r0, r0, r1
   17974:	andeq	r0, r0, r0

00017978 <UnityEnd@@Base>:
   17978:	push	{r4, r5, fp, lr}
   1797c:	add	fp, sp, #8
   17980:	movw	r4, #112	; 0x70
   17984:	movt	r4, #3
   17988:	ldrd	r0, [r4]
   1798c:	adds	r0, r0, #1
   17990:	adc	r1, r1, #0
   17994:	strd	r0, [r4]
   17998:	mov	r0, #10
   1799c:	bl	12760 <putchar@plt>
   179a0:	movw	r0, #55772	; 0xd9dc
   179a4:	movt	r0, #1
   179a8:	bl	14298 <UnityPrint@@Base>
   179ac:	mov	r0, #10
   179b0:	bl	12760 <putchar@plt>
   179b4:	movw	r5, #1832	; 0x728
   179b8:	movt	r5, #3
   179bc:	ldr	r0, [r5, #20]
   179c0:	bl	14948 <UnityPrintNumber@@Base>
   179c4:	movw	r0, #55796	; 0xd9f4
   179c8:	movt	r0, #1
   179cc:	bl	14298 <UnityPrint@@Base>
   179d0:	ldr	r0, [r5, #24]
   179d4:	bl	14948 <UnityPrintNumber@@Base>
   179d8:	movw	r0, #55804	; 0xd9fc
   179dc:	movt	r0, #1
   179e0:	bl	14298 <UnityPrint@@Base>
   179e4:	ldr	r0, [r5, #28]
   179e8:	bl	14948 <UnityPrintNumber@@Base>
   179ec:	movw	r0, #55815	; 0xda07
   179f0:	movt	r0, #1
   179f4:	bl	14298 <UnityPrint@@Base>
   179f8:	mov	r0, #10
   179fc:	bl	12760 <putchar@plt>
   17a00:	ldr	r0, [r5, #24]
   17a04:	mov	r1, #16
   17a08:	mov	r2, r4
   17a0c:	cmp	r0, #0
   17a10:	movweq	r1, #8
   17a14:	ldr	r1, [r2, r1]!
   17a18:	adds	r1, r1, #1
   17a1c:	str	r1, [r2]
   17a20:	ldr	r1, [r2, #4]
   17a24:	adc	r1, r1, #0
   17a28:	cmp	r0, #0
   17a2c:	str	r1, [r2, #4]
   17a30:	beq	17a6c <UnityEnd@@Base+0xf4>
   17a34:	movw	r0, #62960	; 0xf5f0
   17a38:	add	r1, pc, #136	; 0x88
   17a3c:	ldrd	r2, [r4, #32]
   17a40:	movt	r0, #2
   17a44:	vld1.64	{d16-d17}, [r1]
   17a48:	vld1.64	{d18-d19}, [r0 :128]
   17a4c:	adds	r2, r2, #1
   17a50:	adc	r3, r3, #0
   17a54:	vadd.i64	q8, q9, q8
   17a58:	strd	r2, [r4, #32]
   17a5c:	vst1.64	{d16-d17}, [r0 :128]
   17a60:	movw	r0, #55400	; 0xd868
   17a64:	movt	r0, #1
   17a68:	b	17aa0 <UnityEnd@@Base+0x128>
   17a6c:	movw	r0, #62976	; 0xf600
   17a70:	add	r1, pc, #80	; 0x50
   17a74:	ldrd	r2, [r4, #24]
   17a78:	movt	r0, #2
   17a7c:	vld1.64	{d16-d17}, [r1]
   17a80:	vld1.64	{d18-d19}, [r0 :128]
   17a84:	adds	r2, r2, #1
   17a88:	adc	r3, r3, #0
   17a8c:	vadd.i64	q8, q9, q8
   17a90:	strd	r2, [r4, #24]
   17a94:	vst1.64	{d16-d17}, [r0 :128]
   17a98:	movw	r0, #55392	; 0xd860
   17a9c:	movt	r0, #1
   17aa0:	bl	14298 <UnityPrint@@Base>
   17aa4:	ldrd	r0, [r4, #40]	; 0x28
   17aa8:	adds	r0, r0, #1
   17aac:	adc	r1, r1, #0
   17ab0:	strd	r0, [r4, #40]	; 0x28
   17ab4:	mov	r0, #10
   17ab8:	bl	12760 <putchar@plt>
   17abc:	ldr	r0, [r5, #24]
   17ac0:	pop	{r4, r5, fp, pc}
   17ac4:	nop	{0}
   17ac8:	andeq	r0, r0, r1
   17acc:	andeq	r0, r0, r0
   17ad0:	andeq	r0, r0, r1
   17ad4:	andeq	r0, r0, r0
   17ad8:	ldr	r0, [r0]
   17adc:	cmn	r0, #1
   17ae0:	ldrne	r0, [r1, r0, lsl #2]
   17ae4:	cmpne	r0, #0
   17ae8:	bne	17af0 <UnityEnd@@Base+0x178>
   17aec:	bx	lr
   17af0:	ldrd	r2, [r0]
   17af4:	adds	r2, r2, #1
   17af8:	adc	r3, r3, #0
   17afc:	strd	r2, [r0]
   17b00:	bx	lr
   17b04:	push	{r4, r5, r6, lr}
   17b08:	sub	sp, sp, #8
   17b0c:	movw	r0, #56912	; 0xde50
   17b10:	movw	r1, #53798	; 0xd226
   17b14:	movw	r2, #5833	; 0x16c9
   17b18:	movt	r0, #1
   17b1c:	movt	r1, #1
   17b20:	movt	r2, #63618	; 0xf882
   17b24:	bl	1a18c <next@@Base+0x173c>
   17b28:	movw	r0, #56640	; 0xdd40
   17b2c:	movw	r6, #55952	; 0xda90
   17b30:	mov	r5, #0
   17b34:	movt	r0, #1
   17b38:	movt	r6, #1
   17b3c:	add	r4, r0, #4
   17b40:	mov	r3, r6
   17b44:	ldr	r0, [r3, r5]!
   17b48:	ldr	r1, [r3, #16]
   17b4c:	str	r1, [sp]
   17b50:	ldmib	r3, {r1, r2}
   17b54:	ldrb	r3, [r3, #12]
   17b58:	bl	1a8f0 <next@@Base+0x1ea0>
   17b5c:	ldrd	r0, [r4, #-4]
   17b60:	bl	1b1a4 <next@@Base+0x2754>
   17b64:	add	r5, r5, #20
   17b68:	add	r4, r4, #8
   17b6c:	cmp	r5, #680	; 0x2a8
   17b70:	bne	17b40 <UnityEnd@@Base+0x1c8>
   17b74:	bl	1b920 <next@@Base+0x2ed0>
   17b78:	add	sp, sp, #8
   17b7c:	pop	{r4, r5, r6, lr}
   17b80:	b	1c68c <next@@Base+0x3c3c>
   17b84:	push	{r4, r5, r6, r7, fp, lr}
   17b88:	vpush	{d8-d9}
   17b8c:	bl	17b04 <UnityEnd@@Base+0x18c>
   17b90:	movw	r0, #62128	; 0xf2b0
   17b94:	mov	r1, #0
   17b98:	mov	r2, #152	; 0x98
   17b9c:	mov	r4, #0
   17ba0:	movt	r0, #2
   17ba4:	bl	12754 <memset@plt>
   17ba8:	movw	r0, #62288	; 0xf350
   17bac:	vmov.i32	q4, #0	; 0x00000000
   17bb0:	mov	r5, #64	; 0x40
   17bb4:	mov	r2, #168	; 0xa8
   17bb8:	movt	r0, #2
   17bbc:	add	r1, r0, #48	; 0x30
   17bc0:	vst1.64	{d8-d9}, [r1 :128]
   17bc4:	add	r1, r0, #32
   17bc8:	vst1.64	{d8-d9}, [r1 :128]
   17bcc:	add	r1, r0, #16
   17bd0:	vst1.64	{d8-d9}, [r0 :128], r5
   17bd4:	vst1.64	{d8-d9}, [r0 :128]
   17bd8:	movw	r0, #62368	; 0xf3a0
   17bdc:	vst1.64	{d8-d9}, [r1 :128]
   17be0:	mov	r1, #0
   17be4:	movt	r0, #2
   17be8:	bl	12754 <memset@plt>
   17bec:	movw	r1, #62752	; 0xf520
   17bf0:	movw	r3, #62544	; 0xf450
   17bf4:	mov	r6, #32
   17bf8:	movt	r1, #2
   17bfc:	movt	r3, #2
   17c00:	add	r0, r1, #64	; 0x40
   17c04:	str	r4, [r1, #80]	; 0x50
   17c08:	str	r4, [r3, #64]	; 0x40
   17c0c:	vst1.64	{d8-d9}, [r0 :128]
   17c10:	add	r0, r1, #48	; 0x30
   17c14:	vst1.64	{d8-d9}, [r0 :128]
   17c18:	add	r0, r1, #32
   17c1c:	vst1.64	{d8-d9}, [r0 :128]
   17c20:	add	r0, r1, #16
   17c24:	vst1.64	{d8-d9}, [r0 :128]
   17c28:	movw	r0, #62624	; 0xf4a0
   17c2c:	movt	r0, #2
   17c30:	add	r2, r0, #96	; 0x60
   17c34:	str	r4, [r0, #112]	; 0x70
   17c38:	vst1.64	{d8-d9}, [r2 :128]
   17c3c:	add	r2, r0, #80	; 0x50
   17c40:	vst1.64	{d8-d9}, [r2 :128]
   17c44:	add	r2, r0, #64	; 0x40
   17c48:	vst1.64	{d8-d9}, [r2 :128]
   17c4c:	add	r2, r0, #48	; 0x30
   17c50:	vst1.64	{d8-d9}, [r2 :128]
   17c54:	add	r2, r0, #32
   17c58:	vst1.64	{d8-d9}, [r2 :128]
   17c5c:	add	r2, r0, #16
   17c60:	vst1.64	{d8-d9}, [r2 :128]
   17c64:	add	r2, r3, #48	; 0x30
   17c68:	vst1.64	{d8-d9}, [r2 :128]
   17c6c:	add	r2, r3, #32
   17c70:	vst1.64	{d8-d9}, [r2 :128]
   17c74:	add	r2, r3, #16
   17c78:	vst1.64	{d8-d9}, [r2 :128]
   17c7c:	mov	r2, #116	; 0x74
   17c80:	vst1.64	{d8-d9}, [r0 :128], r2
   17c84:	mov	r2, #68	; 0x44
   17c88:	str	r4, [r0]
   17c8c:	mov	r0, #84	; 0x54
   17c90:	vst1.64	{d8-d9}, [r3 :128], r2
   17c94:	vst1.64	{d8-d9}, [r1 :128], r0
   17c98:	str	r4, [r3]
   17c9c:	str	r4, [r1]
   17ca0:	movw	r1, #62848	; 0xf580
   17ca4:	movt	r1, #2
   17ca8:	add	r3, r1, #80	; 0x50
   17cac:	str	r4, [r1, #96]	; 0x60
   17cb0:	vst1.64	{d8-d9}, [r3 :128]
   17cb4:	add	r3, r1, #64	; 0x40
   17cb8:	vst1.64	{d8-d9}, [r3 :128]
   17cbc:	add	r3, r1, #48	; 0x30
   17cc0:	vst1.64	{d8-d9}, [r3 :128]
   17cc4:	add	r3, r1, #32
   17cc8:	vst1.64	{d8-d9}, [r3 :128]
   17ccc:	add	r3, r1, #16
   17cd0:	vst1.64	{d8-d9}, [r3 :128]
   17cd4:	mov	r3, #100	; 0x64
   17cd8:	vst1.64	{d8-d9}, [r1 :128], r3
   17cdc:	str	r4, [r1]
   17ce0:	movw	r1, #62960	; 0xf5f0
   17ce4:	movt	r1, #2
   17ce8:	vst1.64	{d8-d9}, [r1 :128]
   17cec:	movw	r1, #62976	; 0xf600
   17cf0:	movt	r1, #2
   17cf4:	vst1.64	{d8-d9}, [r1 :128]
   17cf8:	movw	r1, #62992	; 0xf610
   17cfc:	movt	r1, #2
   17d00:	add	r3, r1, #48	; 0x30
   17d04:	str	r4, [r1, #64]	; 0x40
   17d08:	vst1.64	{d8-d9}, [r3 :128]
   17d0c:	add	r3, r1, #32
   17d10:	vst1.64	{d8-d9}, [r3 :128]
   17d14:	add	r3, r1, #16
   17d18:	vst1.64	{d8-d9}, [r1 :128], r2
   17d1c:	str	r4, [r1]
   17d20:	movw	r1, #63072	; 0xf660
   17d24:	vst1.64	{d8-d9}, [r3 :128]
   17d28:	movt	r1, #2
   17d2c:	vst1.64	{d8-d9}, [r1 :128]
   17d30:	movw	r1, #63088	; 0xf670
   17d34:	movt	r1, #2
   17d38:	add	r2, r1, #16
   17d3c:	vst1.64	{d8-d9}, [r1 :128], r6
   17d40:	vst1.64	{d8-d9}, [r1 :128]
   17d44:	movw	r1, #63136	; 0xf6a0
   17d48:	vst1.64	{d8-d9}, [r2 :128]
   17d4c:	movt	r1, #2
   17d50:	vst1.64	{d8-d9}, [r1 :128]
   17d54:	movw	r1, #63152	; 0xf6b0
   17d58:	movt	r1, #2
   17d5c:	add	r2, r1, #64	; 0x40
   17d60:	str	r4, [r1, #80]	; 0x50
   17d64:	vst1.64	{d8-d9}, [r2 :128]
   17d68:	add	r2, r1, #48	; 0x30
   17d6c:	vst1.64	{d8-d9}, [r2 :128]
   17d70:	add	r2, r1, #32
   17d74:	vst1.64	{d8-d9}, [r2 :128]
   17d78:	add	r2, r1, #16
   17d7c:	vst1.64	{d8-d9}, [r1 :128], r0
   17d80:	movw	r0, #63248	; 0xf710
   17d84:	movt	r0, #2
   17d88:	str	r4, [r1]
   17d8c:	vst1.64	{d8-d9}, [r2 :128]
   17d90:	mov	r2, #280	; 0x118
   17d94:	add	r1, r0, #16
   17d98:	vst1.64	{d8-d9}, [r0 :128], r6
   17d9c:	vst1.64	{d8-d9}, [r0 :128]
   17da0:	movw	r0, #63296	; 0xf740
   17da4:	vst1.64	{d8-d9}, [r1 :128]
   17da8:	mov	r1, #0
   17dac:	movt	r0, #2
   17db0:	bl	12754 <memset@plt>
   17db4:	movw	r0, #63584	; 0xf860
   17db8:	mov	r2, #192	; 0xc0
   17dbc:	movt	r0, #2
   17dc0:	add	r1, r0, #48	; 0x30
   17dc4:	vst1.64	{d8-d9}, [r1 :128]
   17dc8:	add	r1, r0, #32
   17dcc:	vst1.64	{d8-d9}, [r1 :128]
   17dd0:	add	r1, r0, #16
   17dd4:	vst1.64	{d8-d9}, [r0 :128], r5
   17dd8:	vst1.64	{d8-d9}, [r0 :128]
   17ddc:	movw	r0, #63664	; 0xf8b0
   17de0:	vst1.64	{d8-d9}, [r1 :128]
   17de4:	mov	r1, #0
   17de8:	movt	r0, #2
   17dec:	bl	12754 <memset@plt>
   17df0:	movw	r0, #63856	; 0xf970
   17df4:	mov	r7, #112	; 0x70
   17df8:	mov	r2, #248	; 0xf8
   17dfc:	movt	r0, #2
   17e00:	add	r1, r0, #96	; 0x60
   17e04:	vst1.64	{d8-d9}, [r1 :128]
   17e08:	add	r1, r0, #80	; 0x50
   17e0c:	vst1.64	{d8-d9}, [r1 :128]
   17e10:	add	r1, r0, #64	; 0x40
   17e14:	vst1.64	{d8-d9}, [r1 :128]
   17e18:	add	r1, r0, #48	; 0x30
   17e1c:	vst1.64	{d8-d9}, [r1 :128]
   17e20:	add	r1, r0, #32
   17e24:	vst1.64	{d8-d9}, [r1 :128]
   17e28:	add	r1, r0, #16
   17e2c:	vst1.64	{d8-d9}, [r0 :128], r7
   17e30:	vst1.64	{d8-d9}, [r0 :128]
   17e34:	movw	r0, #63984	; 0xf9f0
   17e38:	vst1.64	{d8-d9}, [r1 :128]
   17e3c:	mov	r1, #0
   17e40:	movt	r0, #2
   17e44:	bl	12754 <memset@plt>
   17e48:	movw	r0, #64240	; 0xfaf0
   17e4c:	mov	r2, #176	; 0xb0
   17e50:	movt	r0, #2
   17e54:	add	r1, r0, #96	; 0x60
   17e58:	vst1.64	{d8-d9}, [r1 :128]
   17e5c:	add	r1, r0, #80	; 0x50
   17e60:	vst1.64	{d8-d9}, [r1 :128]
   17e64:	add	r1, r0, #64	; 0x40
   17e68:	vst1.64	{d8-d9}, [r1 :128]
   17e6c:	add	r1, r0, #48	; 0x30
   17e70:	vst1.64	{d8-d9}, [r1 :128]
   17e74:	add	r1, r0, #32
   17e78:	vst1.64	{d8-d9}, [r1 :128]
   17e7c:	add	r1, r0, #16
   17e80:	vst1.64	{d8-d9}, [r0 :128], r7
   17e84:	vst1.64	{d8-d9}, [r0 :128]
   17e88:	movw	r0, #64368	; 0xfb70
   17e8c:	vst1.64	{d8-d9}, [r1 :128]
   17e90:	mov	r1, #0
   17e94:	movt	r0, #2
   17e98:	bl	12754 <memset@plt>
   17e9c:	movw	r0, #64544	; 0xfc20
   17ea0:	mov	r2, #192	; 0xc0
   17ea4:	movt	r0, #2
   17ea8:	add	r1, r0, #48	; 0x30
   17eac:	vst1.64	{d8-d9}, [r1 :128]
   17eb0:	add	r1, r0, #32
   17eb4:	vst1.64	{d8-d9}, [r1 :128]
   17eb8:	add	r1, r0, #16
   17ebc:	vst1.64	{d8-d9}, [r0 :128], r5
   17ec0:	vst1.64	{d8-d9}, [r0 :128]
   17ec4:	movw	r0, #64624	; 0xfc70
   17ec8:	vst1.64	{d8-d9}, [r1 :128]
   17ecc:	mov	r1, #0
   17ed0:	movt	r0, #2
   17ed4:	bl	12754 <memset@plt>
   17ed8:	movw	r0, #64816	; 0xfd30
   17edc:	mov	r2, #272	; 0x110
   17ee0:	movt	r0, #2
   17ee4:	add	r1, r0, #48	; 0x30
   17ee8:	vst1.64	{d8-d9}, [r1 :128]
   17eec:	add	r1, r0, #32
   17ef0:	vst1.64	{d8-d9}, [r1 :128]
   17ef4:	add	r1, r0, #16
   17ef8:	vst1.64	{d8-d9}, [r0 :128], r5
   17efc:	vst1.64	{d8-d9}, [r0 :128]
   17f00:	movw	r0, #64896	; 0xfd80
   17f04:	vst1.64	{d8-d9}, [r1 :128]
   17f08:	mov	r1, #0
   17f0c:	movt	r0, #2
   17f10:	bl	12754 <memset@plt>
   17f14:	movw	r0, #65168	; 0xfe90
   17f18:	mov	r1, #0
   17f1c:	mov	r2, #176	; 0xb0
   17f20:	movt	r0, #2
   17f24:	bl	12754 <memset@plt>
   17f28:	movw	r0, #32
   17f2c:	movt	r0, #3
   17f30:	add	r1, r0, #32
   17f34:	vst1.64	{d8-d9}, [r1 :128]
   17f38:	add	r1, r0, #16
   17f3c:	vst1.64	{d8-d9}, [r1 :128]
   17f40:	movw	r1, #65472	; 0xffc0
   17f44:	movt	r1, #2
   17f48:	add	r2, r1, #32
   17f4c:	str	r4, [r1, #48]	; 0x30
   17f50:	vst1.64	{d8-d9}, [r2 :128]
   17f54:	add	r2, r1, #16
   17f58:	vst1.64	{d8-d9}, [r2 :128]
   17f5c:	movw	r2, #65344	; 0xff40
   17f60:	movt	r2, #2
   17f64:	add	r3, r2, #96	; 0x60
   17f68:	vst1.64	{d8-d9}, [r3 :128]
   17f6c:	add	r3, r2, #80	; 0x50
   17f70:	vst1.64	{d8-d9}, [r3 :128]
   17f74:	add	r3, r2, #64	; 0x40
   17f78:	vst1.64	{d8-d9}, [r3 :128]
   17f7c:	add	r3, r2, #48	; 0x30
   17f80:	vst1.64	{d8-d9}, [r3 :128]
   17f84:	add	r3, r2, #32
   17f88:	vst1.64	{d8-d9}, [r3 :128]
   17f8c:	add	r3, r2, #16
   17f90:	vst1.64	{d8-d9}, [r2 :128], r7
   17f94:	vst1.64	{d8-d9}, [r3 :128]
   17f98:	movw	r3, #0
   17f9c:	vst1.64	{d8-d9}, [r2 :128]
   17fa0:	movt	r3, #3
   17fa4:	vst1.64	{d8-d9}, [r3 :128]
   17fa8:	movw	r3, #16
   17fac:	movt	r3, #3
   17fb0:	vst1.64	{d8-d9}, [r3 :128]
   17fb4:	mov	r3, #48	; 0x30
   17fb8:	vst1.64	{d8-d9}, [r0 :128], r3
   17fbc:	vst1.64	{d8-d9}, [r0 :128]
   17fc0:	mov	r0, #52	; 0x34
   17fc4:	vst1.64	{d8-d9}, [r1 :128], r0
   17fc8:	movw	r0, #96	; 0x60
   17fcc:	movt	r0, #3
   17fd0:	str	r4, [r1]
   17fd4:	vst1.64	{d8-d9}, [r0 :128]
   17fd8:	movw	r0, #112	; 0x70
   17fdc:	movt	r0, #3
   17fe0:	add	r1, r0, #16
   17fe4:	vst1.64	{d8-d9}, [r0 :128], r6
   17fe8:	vst1.64	{d8-d9}, [r1 :128]
   17fec:	vst1.64	{d8-d9}, [r0 :128]
   17ff0:	vpop	{d8-d9}
   17ff4:	pop	{r4, r5, r6, r7, fp, pc}
   17ff8:	movw	r0, #31492	; 0x7b04
   17ffc:	movw	r1, #31620	; 0x7b84
   18000:	movt	r0, #1
   18004:	movt	r1, #1
   18008:	b	1cb3c <__gcov_flush@@Base+0xb4>
   1800c:	andeq	r0, r0, r0

00018010 <init_token_int_type@@Base>:
   18010:	movw	r1, #160	; 0xa0
   18014:	add	r2, pc, #28
   18018:	movt	r1, #3
   1801c:	vld1.64	{d16-d17}, [r2]
   18020:	vld1.64	{d18-d19}, [r1 :128]
   18024:	vadd.i64	q8, q9, q8
   18028:	vst1.64	{d16-d17}, [r1 :128]
   1802c:	mov	r1, #0
   18030:	str	r1, [r0]
   18034:	bx	lr
   18038:	andeq	r0, r0, r1
   1803c:	andeq	r0, r0, r0
   18040:	andeq	r0, r0, r1
   18044:	andeq	r0, r0, r0

00018048 <init_token_int_value@@Base>:
   18048:	movw	r2, #176	; 0xb0
   1804c:	add	r3, pc, #36	; 0x24
   18050:	movt	r2, #3
   18054:	vld1.64	{d16-d17}, [r3]
   18058:	vld1.64	{d18-d19}, [r2 :128]
   1805c:	vadd.i64	q8, q9, q8
   18060:	vst1.64	{d16-d17}, [r2 :128]
   18064:	mov	r2, #1
   18068:	str	r2, [r0]
   1806c:	str	r1, [r0, #4]
   18070:	bx	lr
   18074:	nop	{0}
   18078:	andeq	r0, r0, r1
   1807c:	andeq	r0, r0, r0
   18080:	andeq	r0, r0, r1
   18084:	andeq	r0, r0, r0

00018088 <init_token_function@@Base>:
   18088:	movw	r2, #192	; 0xc0
   1808c:	add	r3, pc, #36	; 0x24
   18090:	movt	r2, #3
   18094:	vld1.64	{d16-d17}, [r3]
   18098:	vld1.64	{d18-d19}, [r2 :128]
   1809c:	vadd.i64	q8, q9, q8
   180a0:	vst1.64	{d16-d17}, [r2 :128]
   180a4:	mov	r2, #2
   180a8:	str	r2, [r0]
   180ac:	str	r1, [r0, #4]
   180b0:	bx	lr
   180b4:	nop	{0}
   180b8:	andeq	r0, r0, r1
   180bc:	andeq	r0, r0, r0
   180c0:	andeq	r0, r0, r1
   180c4:	andeq	r0, r0, r0

000180c8 <init_token_opar@@Base>:
   180c8:	movw	r1, #208	; 0xd0
   180cc:	add	r2, pc, #28
   180d0:	movt	r1, #3
   180d4:	vld1.64	{d16-d17}, [r2]
   180d8:	vld1.64	{d18-d19}, [r1 :128]
   180dc:	vadd.i64	q8, q9, q8
   180e0:	vst1.64	{d16-d17}, [r1 :128]
   180e4:	mov	r1, #3
   180e8:	str	r1, [r0]
   180ec:	bx	lr
   180f0:	andeq	r0, r0, r1
   180f4:	andeq	r0, r0, r0
   180f8:	andeq	r0, r0, r1
   180fc:	andeq	r0, r0, r0

00018100 <init_token_cpar@@Base>:
   18100:	movw	r1, #224	; 0xe0
   18104:	add	r2, pc, #28
   18108:	movt	r1, #3
   1810c:	vld1.64	{d16-d17}, [r2]
   18110:	vld1.64	{d18-d19}, [r1 :128]
   18114:	vadd.i64	q8, q9, q8
   18118:	vst1.64	{d16-d17}, [r1 :128]
   1811c:	mov	r1, #4
   18120:	str	r1, [r0]
   18124:	bx	lr
   18128:	andeq	r0, r0, r1
   1812c:	andeq	r0, r0, r0
   18130:	andeq	r0, r0, r1
   18134:	andeq	r0, r0, r0

00018138 <init_token_obra@@Base>:
   18138:	movw	r1, #240	; 0xf0
   1813c:	add	r2, pc, #28
   18140:	movt	r1, #3
   18144:	vld1.64	{d16-d17}, [r2]
   18148:	vld1.64	{d18-d19}, [r1 :128]
   1814c:	vadd.i64	q8, q9, q8
   18150:	vst1.64	{d16-d17}, [r1 :128]
   18154:	mov	r1, #5
   18158:	str	r1, [r0]
   1815c:	bx	lr
   18160:	andeq	r0, r0, r1
   18164:	andeq	r0, r0, r0
   18168:	andeq	r0, r0, r1
   1816c:	andeq	r0, r0, r0

00018170 <init_token_cbra@@Base>:
   18170:	movw	r1, #256	; 0x100
   18174:	add	r2, pc, #28
   18178:	movt	r1, #3
   1817c:	vld1.64	{d16-d17}, [r2]
   18180:	vld1.64	{d18-d19}, [r1 :128]
   18184:	vadd.i64	q8, q9, q8
   18188:	vst1.64	{d16-d17}, [r1 :128]
   1818c:	mov	r1, #6
   18190:	str	r1, [r0]
   18194:	bx	lr
   18198:	andeq	r0, r0, r1
   1819c:	andeq	r0, r0, r0
   181a0:	andeq	r0, r0, r1
   181a4:	andeq	r0, r0, r0

000181a8 <init_token_return@@Base>:
   181a8:	movw	r1, #272	; 0x110
   181ac:	add	r2, pc, #28
   181b0:	movt	r1, #3
   181b4:	vld1.64	{d16-d17}, [r2]
   181b8:	vld1.64	{d18-d19}, [r1 :128]
   181bc:	vadd.i64	q8, q9, q8
   181c0:	vst1.64	{d16-d17}, [r1 :128]
   181c4:	mov	r1, #7
   181c8:	str	r1, [r0]
   181cc:	bx	lr
   181d0:	andeq	r0, r0, r1
   181d4:	andeq	r0, r0, r0
   181d8:	andeq	r0, r0, r1
   181dc:	andeq	r0, r0, r0

000181e0 <init_token_semicolon@@Base>:
   181e0:	movw	r1, #288	; 0x120
   181e4:	add	r2, pc, #28
   181e8:	movt	r1, #3
   181ec:	vld1.64	{d16-d17}, [r2]
   181f0:	vld1.64	{d18-d19}, [r1 :128]
   181f4:	vadd.i64	q8, q9, q8
   181f8:	vst1.64	{d16-d17}, [r1 :128]
   181fc:	mov	r1, #8
   18200:	str	r1, [r0]
   18204:	bx	lr
   18208:	andeq	r0, r0, r1
   1820c:	andeq	r0, r0, r0
   18210:	andeq	r0, r0, r1
   18214:	andeq	r0, r0, r0

00018218 <init_token_eof@@Base>:
   18218:	movw	r1, #304	; 0x130
   1821c:	add	r2, pc, #28
   18220:	movt	r1, #3
   18224:	vld1.64	{d16-d17}, [r2]
   18228:	vld1.64	{d18-d19}, [r1 :128]
   1822c:	vadd.i64	q8, q9, q8
   18230:	vst1.64	{d16-d17}, [r1 :128]
   18234:	mov	r1, #9
   18238:	str	r1, [r0]
   1823c:	bx	lr
   18240:	andeq	r0, r0, r1
   18244:	andeq	r0, r0, r0
   18248:	andeq	r0, r0, r1
   1824c:	andeq	r0, r0, r0

00018250 <init_token_if@@Base>:
   18250:	movw	r1, #320	; 0x140
   18254:	add	r2, pc, #28
   18258:	movt	r1, #3
   1825c:	vld1.64	{d16-d17}, [r2]
   18260:	vld1.64	{d18-d19}, [r1 :128]
   18264:	vadd.i64	q8, q9, q8
   18268:	vst1.64	{d16-d17}, [r1 :128]
   1826c:	mov	r1, #10
   18270:	str	r1, [r0]
   18274:	bx	lr
   18278:	andeq	r0, r0, r1
   1827c:	andeq	r0, r0, r0
   18280:	andeq	r0, r0, r1
   18284:	andeq	r0, r0, r0

00018288 <init_token_else@@Base>:
   18288:	movw	r1, #336	; 0x150
   1828c:	add	r2, pc, #28
   18290:	movt	r1, #3
   18294:	vld1.64	{d16-d17}, [r2]
   18298:	vld1.64	{d18-d19}, [r1 :128]
   1829c:	vadd.i64	q8, q9, q8
   182a0:	vst1.64	{d16-d17}, [r1 :128]
   182a4:	mov	r1, #11
   182a8:	str	r1, [r0]
   182ac:	bx	lr
   182b0:	andeq	r0, r0, r1
   182b4:	andeq	r0, r0, r0
   182b8:	andeq	r0, r0, r1
   182bc:	andeq	r0, r0, r0

000182c0 <init_token_boolean_op@@Base>:
   182c0:	movw	r2, #352	; 0x160
   182c4:	add	r3, pc, #36	; 0x24
   182c8:	movt	r2, #3
   182cc:	vld1.64	{d16-d17}, [r3]
   182d0:	vld1.64	{d18-d19}, [r2 :128]
   182d4:	vadd.i64	q8, q9, q8
   182d8:	vst1.64	{d16-d17}, [r2 :128]
   182dc:	mov	r2, #12
   182e0:	str	r2, [r0]
   182e4:	str	r1, [r0, #4]
   182e8:	bx	lr
   182ec:	nop	{0}
   182f0:	andeq	r0, r0, r1
   182f4:	andeq	r0, r0, r0
   182f8:	andeq	r0, r0, r1
   182fc:	andeq	r0, r0, r0

00018300 <free_token_int_type@@Base>:
   18300:	movw	r1, #368	; 0x170
   18304:	add	r2, pc, #20
   18308:	movt	r1, #3
   1830c:	vld1.64	{d16-d17}, [r2]
   18310:	vld1.64	{d18-d19}, [r1 :128]
   18314:	vadd.i64	q8, q9, q8
   18318:	vst1.64	{d16-d17}, [r1 :128]
   1831c:	b	12634 <free@plt>
   18320:	andeq	r0, r0, r1
   18324:	andeq	r0, r0, r0
   18328:	andeq	r0, r0, r1
   1832c:	andeq	r0, r0, r0

00018330 <free_token_int_value@@Base>:
   18330:	movw	r1, #384	; 0x180
   18334:	add	r2, pc, #20
   18338:	movt	r1, #3
   1833c:	vld1.64	{d16-d17}, [r2]
   18340:	vld1.64	{d18-d19}, [r1 :128]
   18344:	vadd.i64	q8, q9, q8
   18348:	vst1.64	{d16-d17}, [r1 :128]
   1834c:	b	12634 <free@plt>
   18350:	andeq	r0, r0, r1
   18354:	andeq	r0, r0, r0
   18358:	andeq	r0, r0, r1
   1835c:	andeq	r0, r0, r0

00018360 <free_token_function@@Base>:
   18360:	movw	r1, #400	; 0x190
   18364:	add	r2, pc, #20
   18368:	movt	r1, #3
   1836c:	vld1.64	{d16-d17}, [r2]
   18370:	vld1.64	{d18-d19}, [r1 :128]
   18374:	vadd.i64	q8, q9, q8
   18378:	vst1.64	{d16-d17}, [r1 :128]
   1837c:	b	12634 <free@plt>
   18380:	andeq	r0, r0, r1
   18384:	andeq	r0, r0, r0
   18388:	andeq	r0, r0, r1
   1838c:	andeq	r0, r0, r0

00018390 <free_token_opar@@Base>:
   18390:	movw	r1, #416	; 0x1a0
   18394:	add	r2, pc, #20
   18398:	movt	r1, #3
   1839c:	vld1.64	{d16-d17}, [r2]
   183a0:	vld1.64	{d18-d19}, [r1 :128]
   183a4:	vadd.i64	q8, q9, q8
   183a8:	vst1.64	{d16-d17}, [r1 :128]
   183ac:	b	12634 <free@plt>
   183b0:	andeq	r0, r0, r1
   183b4:	andeq	r0, r0, r0
   183b8:	andeq	r0, r0, r1
   183bc:	andeq	r0, r0, r0

000183c0 <free_token_cpar@@Base>:
   183c0:	movw	r1, #432	; 0x1b0
   183c4:	add	r2, pc, #20
   183c8:	movt	r1, #3
   183cc:	vld1.64	{d16-d17}, [r2]
   183d0:	vld1.64	{d18-d19}, [r1 :128]
   183d4:	vadd.i64	q8, q9, q8
   183d8:	vst1.64	{d16-d17}, [r1 :128]
   183dc:	b	12634 <free@plt>
   183e0:	andeq	r0, r0, r1
   183e4:	andeq	r0, r0, r0
   183e8:	andeq	r0, r0, r1
   183ec:	andeq	r0, r0, r0

000183f0 <free_token_obra@@Base>:
   183f0:	movw	r1, #448	; 0x1c0
   183f4:	add	r2, pc, #20
   183f8:	movt	r1, #3
   183fc:	vld1.64	{d16-d17}, [r2]
   18400:	vld1.64	{d18-d19}, [r1 :128]
   18404:	vadd.i64	q8, q9, q8
   18408:	vst1.64	{d16-d17}, [r1 :128]
   1840c:	b	12634 <free@plt>
   18410:	andeq	r0, r0, r1
   18414:	andeq	r0, r0, r0
   18418:	andeq	r0, r0, r1
   1841c:	andeq	r0, r0, r0

00018420 <free_token_cbra@@Base>:
   18420:	movw	r1, #464	; 0x1d0
   18424:	add	r2, pc, #20
   18428:	movt	r1, #3
   1842c:	vld1.64	{d16-d17}, [r2]
   18430:	vld1.64	{d18-d19}, [r1 :128]
   18434:	vadd.i64	q8, q9, q8
   18438:	vst1.64	{d16-d17}, [r1 :128]
   1843c:	b	12634 <free@plt>
   18440:	andeq	r0, r0, r1
   18444:	andeq	r0, r0, r0
   18448:	andeq	r0, r0, r1
   1844c:	andeq	r0, r0, r0

00018450 <free_token_return@@Base>:
   18450:	movw	r1, #480	; 0x1e0
   18454:	add	r2, pc, #20
   18458:	movt	r1, #3
   1845c:	vld1.64	{d16-d17}, [r2]
   18460:	vld1.64	{d18-d19}, [r1 :128]
   18464:	vadd.i64	q8, q9, q8
   18468:	vst1.64	{d16-d17}, [r1 :128]
   1846c:	b	12634 <free@plt>
   18470:	andeq	r0, r0, r1
   18474:	andeq	r0, r0, r0
   18478:	andeq	r0, r0, r1
   1847c:	andeq	r0, r0, r0

00018480 <free_token_semicolon@@Base>:
   18480:	movw	r1, #496	; 0x1f0
   18484:	add	r2, pc, #20
   18488:	movt	r1, #3
   1848c:	vld1.64	{d16-d17}, [r2]
   18490:	vld1.64	{d18-d19}, [r1 :128]
   18494:	vadd.i64	q8, q9, q8
   18498:	vst1.64	{d16-d17}, [r1 :128]
   1849c:	b	12634 <free@plt>
   184a0:	andeq	r0, r0, r1
   184a4:	andeq	r0, r0, r0
   184a8:	andeq	r0, r0, r1
   184ac:	andeq	r0, r0, r0

000184b0 <free_token_eof@@Base>:
   184b0:	movw	r1, #512	; 0x200
   184b4:	add	r2, pc, #20
   184b8:	movt	r1, #3
   184bc:	vld1.64	{d16-d17}, [r2]
   184c0:	vld1.64	{d18-d19}, [r1 :128]
   184c4:	vadd.i64	q8, q9, q8
   184c8:	vst1.64	{d16-d17}, [r1 :128]
   184cc:	b	12634 <free@plt>
   184d0:	andeq	r0, r0, r1
   184d4:	andeq	r0, r0, r0
   184d8:	andeq	r0, r0, r1
   184dc:	andeq	r0, r0, r0

000184e0 <free_token_if@@Base>:
   184e0:	movw	r1, #528	; 0x210
   184e4:	add	r2, pc, #20
   184e8:	movt	r1, #3
   184ec:	vld1.64	{d16-d17}, [r2]
   184f0:	vld1.64	{d18-d19}, [r1 :128]
   184f4:	vadd.i64	q8, q9, q8
   184f8:	vst1.64	{d16-d17}, [r1 :128]
   184fc:	b	12634 <free@plt>
   18500:	andeq	r0, r0, r1
   18504:	andeq	r0, r0, r0
   18508:	andeq	r0, r0, r1
   1850c:	andeq	r0, r0, r0

00018510 <free_token_else@@Base>:
   18510:	movw	r1, #544	; 0x220
   18514:	add	r2, pc, #20
   18518:	movt	r1, #3
   1851c:	vld1.64	{d16-d17}, [r2]
   18520:	vld1.64	{d18-d19}, [r1 :128]
   18524:	vadd.i64	q8, q9, q8
   18528:	vst1.64	{d16-d17}, [r1 :128]
   1852c:	b	12634 <free@plt>
   18530:	andeq	r0, r0, r1
   18534:	andeq	r0, r0, r0
   18538:	andeq	r0, r0, r1
   1853c:	andeq	r0, r0, r0

00018540 <free_token_boolean_op@@Base>:
   18540:	push	{r4, r5, fp, lr}
   18544:	add	fp, sp, #8
   18548:	movw	r5, #560	; 0x230
   1854c:	mov	r4, r0
   18550:	movt	r5, #3
   18554:	ldrd	r0, [r5]
   18558:	mov	r2, r5
   1855c:	adds	r0, r0, #1
   18560:	adc	r1, r1, #0
   18564:	strd	r0, [r5]
   18568:	mov	r1, #16
   1856c:	ldr	r0, [r4, #4]
   18570:	cmp	r0, #0
   18574:	movwne	r1, #8
   18578:	ldr	r1, [r2, r1]!
   1857c:	adds	r1, r1, #1
   18580:	str	r1, [r2]
   18584:	ldr	r1, [r2, #4]
   18588:	adc	r1, r1, #0
   1858c:	cmp	r0, #0
   18590:	str	r1, [r2, #4]
   18594:	beq	185ac <free_token_boolean_op@@Base+0x6c>
   18598:	ldrd	r2, [r5, #24]
   1859c:	adds	r2, r2, #1
   185a0:	adc	r3, r3, #0
   185a4:	strd	r2, [r5, #24]
   185a8:	bl	12634 <free@plt>
   185ac:	ldrd	r0, [r5, #32]
   185b0:	adds	r0, r0, #1
   185b4:	adc	r1, r1, #0
   185b8:	strd	r0, [r5, #32]
   185bc:	mov	r0, r4
   185c0:	pop	{r4, r5, fp, lr}
   185c4:	b	12634 <free@plt>
   185c8:	push	{r4, r5, r6, lr}
   185cc:	sub	sp, sp, #8
   185d0:	movw	r0, #57888	; 0xe220
   185d4:	movw	r1, #53798	; 0xd226
   185d8:	movw	r2, #10327	; 0x2857
   185dc:	movt	r0, #1
   185e0:	movt	r1, #1
   185e4:	movt	r2, #23326	; 0x5b1e
   185e8:	bl	1a18c <next@@Base+0x173c>
   185ec:	movw	r0, #59104	; 0xe6e0
   185f0:	movw	r6, #58576	; 0xe4d0
   185f4:	mov	r5, #0
   185f8:	movt	r0, #1
   185fc:	movt	r6, #1
   18600:	add	r4, r0, #4
   18604:	mov	r3, r6
   18608:	ldr	r0, [r3, r5]!
   1860c:	ldr	r1, [r3, #16]
   18610:	str	r1, [sp]
   18614:	ldmib	r3, {r1, r2}
   18618:	ldrb	r3, [r3, #12]
   1861c:	bl	1a8f0 <next@@Base+0x1ea0>
   18620:	ldrd	r0, [r4, #-4]
   18624:	bl	1b1a4 <next@@Base+0x2754>
   18628:	add	r5, r5, #20
   1862c:	add	r4, r4, #8
   18630:	cmp	r5, #520	; 0x208
   18634:	bne	18604 <free_token_boolean_op@@Base+0xc4>
   18638:	bl	1b920 <next@@Base+0x2ed0>
   1863c:	add	sp, sp, #8
   18640:	pop	{r4, r5, r6, lr}
   18644:	b	1c68c <next@@Base+0x3c3c>
   18648:	push	{fp, lr}
   1864c:	bl	185c8 <free_token_boolean_op@@Base+0x88>
   18650:	movw	r0, #176	; 0xb0
   18654:	vmov.i32	q8, #0	; 0x00000000
   18658:	mov	r1, #0
   1865c:	movt	r0, #3
   18660:	vst1.64	{d16-d17}, [r0 :128]
   18664:	movw	r0, #160	; 0xa0
   18668:	movt	r0, #3
   1866c:	vst1.64	{d16-d17}, [r0 :128]
   18670:	movw	r0, #192	; 0xc0
   18674:	movt	r0, #3
   18678:	vst1.64	{d16-d17}, [r0 :128]
   1867c:	movw	r0, #208	; 0xd0
   18680:	movt	r0, #3
   18684:	vst1.64	{d16-d17}, [r0 :128]
   18688:	movw	r0, #224	; 0xe0
   1868c:	movt	r0, #3
   18690:	vst1.64	{d16-d17}, [r0 :128]
   18694:	movw	r0, #240	; 0xf0
   18698:	movt	r0, #3
   1869c:	vst1.64	{d16-d17}, [r0 :128]
   186a0:	movw	r0, #256	; 0x100
   186a4:	movt	r0, #3
   186a8:	vst1.64	{d16-d17}, [r0 :128]
   186ac:	movw	r0, #272	; 0x110
   186b0:	movt	r0, #3
   186b4:	vst1.64	{d16-d17}, [r0 :128]
   186b8:	movw	r0, #288	; 0x120
   186bc:	movt	r0, #3
   186c0:	vst1.64	{d16-d17}, [r0 :128]
   186c4:	movw	r0, #304	; 0x130
   186c8:	movt	r0, #3
   186cc:	vst1.64	{d16-d17}, [r0 :128]
   186d0:	movw	r0, #320	; 0x140
   186d4:	movt	r0, #3
   186d8:	vst1.64	{d16-d17}, [r0 :128]
   186dc:	movw	r0, #336	; 0x150
   186e0:	movt	r0, #3
   186e4:	vst1.64	{d16-d17}, [r0 :128]
   186e8:	movw	r0, #352	; 0x160
   186ec:	movt	r0, #3
   186f0:	vst1.64	{d16-d17}, [r0 :128]
   186f4:	movw	r0, #368	; 0x170
   186f8:	movt	r0, #3
   186fc:	vst1.64	{d16-d17}, [r0 :128]
   18700:	movw	r0, #384	; 0x180
   18704:	movt	r0, #3
   18708:	vst1.64	{d16-d17}, [r0 :128]
   1870c:	movw	r0, #400	; 0x190
   18710:	movt	r0, #3
   18714:	vst1.64	{d16-d17}, [r0 :128]
   18718:	movw	r0, #416	; 0x1a0
   1871c:	movt	r0, #3
   18720:	vst1.64	{d16-d17}, [r0 :128]
   18724:	movw	r0, #432	; 0x1b0
   18728:	movt	r0, #3
   1872c:	vst1.64	{d16-d17}, [r0 :128]
   18730:	movw	r0, #448	; 0x1c0
   18734:	movt	r0, #3
   18738:	vst1.64	{d16-d17}, [r0 :128]
   1873c:	movw	r0, #464	; 0x1d0
   18740:	movt	r0, #3
   18744:	vst1.64	{d16-d17}, [r0 :128]
   18748:	movw	r0, #480	; 0x1e0
   1874c:	movt	r0, #3
   18750:	vst1.64	{d16-d17}, [r0 :128]
   18754:	movw	r0, #496	; 0x1f0
   18758:	movt	r0, #3
   1875c:	vst1.64	{d16-d17}, [r0 :128]
   18760:	movw	r0, #512	; 0x200
   18764:	movt	r0, #3
   18768:	vst1.64	{d16-d17}, [r0 :128]
   1876c:	movw	r0, #528	; 0x210
   18770:	movt	r0, #3
   18774:	vst1.64	{d16-d17}, [r0 :128]
   18778:	movw	r0, #544	; 0x220
   1877c:	movt	r0, #3
   18780:	vst1.64	{d16-d17}, [r0 :128]
   18784:	movw	r0, #560	; 0x230
   18788:	movt	r0, #3
   1878c:	add	r2, r0, #16
   18790:	str	r1, [r0, #32]
   18794:	vst1.64	{d16-d17}, [r2 :128]
   18798:	mov	r2, #36	; 0x24
   1879c:	vst1.64	{d16-d17}, [r0 :128], r2
   187a0:	str	r1, [r0]
   187a4:	pop	{fp, pc}
   187a8:	movw	r0, #34248	; 0x85c8
   187ac:	movw	r1, #34376	; 0x8648
   187b0:	movt	r0, #1
   187b4:	movt	r1, #1
   187b8:	b	1cb3c <__gcov_flush@@Base+0xb4>
   187bc:	andeq	r0, r0, r0

000187c0 <init_lexer@@Base>:
   187c0:	movw	r2, #608	; 0x260
   187c4:	add	r3, pc, #36	; 0x24
   187c8:	movt	r2, #3
   187cc:	vld1.64	{d16-d17}, [r3]
   187d0:	vld1.64	{d18-d19}, [r2 :128]
   187d4:	vadd.i64	q8, q9, q8
   187d8:	vst1.64	{d16-d17}, [r2 :128]
   187dc:	mov	r2, #0
   187e0:	stm	r0, {r1, r2}
   187e4:	str	r2, [r0, #8]
   187e8:	bx	lr
   187ec:	nop	{0}
   187f0:	andeq	r0, r0, r1
   187f4:	andeq	r0, r0, r0
   187f8:	andeq	r0, r0, r1
   187fc:	andeq	r0, r0, r0

00018800 <destroy_lexer@@Base>:
   18800:	push	{r4, sl, fp, lr}
   18804:	add	fp, sp, #8
   18808:	movw	r4, #624	; 0x270
   1880c:	mov	r1, #16
   18810:	movt	r4, #3
   18814:	ldrd	r2, [r4]
   18818:	adds	r2, r2, #1
   1881c:	adc	r3, r3, #0
   18820:	strd	r2, [r4]
   18824:	mov	r2, r4
   18828:	ldr	r0, [r0, #4]
   1882c:	cmp	r0, #0
   18830:	movwne	r1, #8
   18834:	ldr	r1, [r2, r1]!
   18838:	adds	r1, r1, #1
   1883c:	str	r1, [r2]
   18840:	ldr	r1, [r2, #4]
   18844:	adc	r1, r1, #0
   18848:	cmp	r0, #0
   1884c:	str	r1, [r2, #4]
   18850:	beq	18884 <destroy_lexer@@Base+0x84>
   18854:	movw	r1, #672	; 0x2a0
   18858:	add	r2, pc, #56	; 0x38
   1885c:	movt	r1, #3
   18860:	vld1.64	{d16-d17}, [r2]
   18864:	ldrd	r2, [r4, #24]
   18868:	vld1.64	{d18-d19}, [r1 :128]
   1886c:	adds	r2, r2, #1
   18870:	vadd.i64	q8, q9, q8
   18874:	adc	r3, r3, #0
   18878:	vst1.64	{d16-d17}, [r1 :128]
   1887c:	strd	r2, [r4, #24]
   18880:	bl	12634 <free@plt>
   18884:	ldrd	r0, [r4, #32]
   18888:	adds	r0, r0, #1
   1888c:	adc	r1, r1, #0
   18890:	strd	r0, [r4, #32]
   18894:	pop	{r4, sl, fp, pc}
   18898:	andeq	r0, r0, r1
   1889c:	andeq	r0, r0, r0
   188a0:	andeq	r0, r0, r1
   188a4:	andeq	r0, r0, r0

000188a8 <free_stack_base@@Base>:
   188a8:	movw	r1, #672	; 0x2a0
   188ac:	add	r2, pc, #20
   188b0:	movt	r1, #3
   188b4:	vld1.64	{d16-d17}, [r2]
   188b8:	vld1.64	{d18-d19}, [r1 :128]
   188bc:	vadd.i64	q8, q9, q8
   188c0:	vst1.64	{d16-d17}, [r1 :128]
   188c4:	b	12634 <free@plt>
   188c8:	andeq	r0, r0, r1
   188cc:	andeq	r0, r0, r0
   188d0:	andeq	r0, r0, r1
   188d4:	andeq	r0, r0, r0

000188d8 <push_back@@Base>:
   188d8:	push	{r4, r5, fp, lr}
   188dc:	add	fp, sp, #8
   188e0:	mov	r5, r0
   188e4:	movw	r0, #688	; 0x2b0
   188e8:	mov	r4, r1
   188ec:	add	r1, pc, #44	; 0x2c
   188f0:	movt	r0, #3
   188f4:	vld1.64	{d16-d17}, [r1]
   188f8:	vld1.64	{d18-d19}, [r0 :128]
   188fc:	vadd.i64	q8, q9, q8
   18900:	vst1.64	{d16-d17}, [r0 :128]
   18904:	mov	r0, #8
   18908:	bl	126c4 <malloc@plt>
   1890c:	ldr	r1, [r5, #4]
   18910:	stm	r0, {r1, r4}
   18914:	str	r0, [r5, #4]
   18918:	pop	{r4, r5, fp, pc}
   1891c:	nop	{0}
   18920:	andeq	r0, r0, r1
   18924:	andeq	r0, r0, r0
   18928:	andeq	r0, r0, r1
   1892c:	andeq	r0, r0, r0

00018930 <get_char@@Base>:
   18930:	movw	r1, #704	; 0x2c0
   18934:	add	r2, pc, #44	; 0x2c
   18938:	movt	r1, #3
   1893c:	vld1.64	{d16-d17}, [r2]
   18940:	vld1.64	{d18-d19}, [r1 :128]
   18944:	vadd.i64	q8, q9, q8
   18948:	vst1.64	{d16-d17}, [r1 :128]
   1894c:	ldr	r2, [r0, #8]
   18950:	ldr	r1, [r0]
   18954:	add	r3, r2, #1
   18958:	str	r3, [r0, #8]
   1895c:	ldrb	r0, [r1, r2]
   18960:	bx	lr
   18964:	nop	{0}
   18968:	andeq	r0, r0, r1
   1896c:	andeq	r0, r0, r0
   18970:	andeq	r0, r0, r1
   18974:	andeq	r0, r0, r0

00018978 <push_back_chars@@Base>:
   18978:	push	{r4, r5, fp, lr}
   1897c:	add	fp, sp, #8
   18980:	movw	ip, #720	; 0x2d0
   18984:	movt	ip, #3
   18988:	ldrd	r4, [ip]
   1898c:	mov	r2, ip
   18990:	adds	r4, r4, #1
   18994:	adc	r5, r5, #0
   18998:	strd	r4, [ip]
   1899c:	mov	r5, #16
   189a0:	ldr	r3, [r0, #8]
   189a4:	cmp	r3, r1
   189a8:	movwcs	r5, #8
   189ac:	ldr	r5, [r2, r5]!
   189b0:	adds	r5, r5, #1
   189b4:	str	r5, [r2]
   189b8:	ldr	r5, [r2, #4]
   189bc:	adc	r5, r5, #0
   189c0:	cmp	r3, r1
   189c4:	str	r5, [r2, #4]
   189c8:	bcc	189f0 <push_back_chars@@Base+0x78>
   189cc:	ldr	r2, [ip, #24]
   189d0:	ldr	r5, [ip, #28]
   189d4:	sub	r1, r3, r1
   189d8:	adds	r2, r2, #1
   189dc:	adc	r5, r5, #0
   189e0:	str	r2, [ip, #24]
   189e4:	str	r5, [ip, #28]
   189e8:	str	r1, [r0, #8]
   189ec:	pop	{r4, r5, fp, pc}
   189f0:	movw	r0, #61664	; 0xf0e0
   189f4:	mov	r1, #32
   189f8:	mov	r2, #1
   189fc:	movt	r0, #2
   18a00:	ldr	r3, [r0]
   18a04:	movw	r0, #59312	; 0xe7b0
   18a08:	movt	r0, #1
   18a0c:	bl	126a0 <fwrite@plt>
   18a10:	mov	r0, #1
   18a14:	bl	12700 <exit@plt>

00018a18 <push_back_one_char@@Base>:
   18a18:	movw	r1, #752	; 0x2f0
   18a1c:	add	r2, pc, #28
   18a20:	movt	r1, #3
   18a24:	vld1.64	{d16-d17}, [r2]
   18a28:	vld1.64	{d18-d19}, [r1 :128]
   18a2c:	vadd.i64	q8, q9, q8
   18a30:	vst1.64	{d16-d17}, [r1 :128]
   18a34:	mov	r1, #1
   18a38:	b	18978 <push_back_chars@@Base>
   18a3c:	nop	{0}
   18a40:	andeq	r0, r0, r1
   18a44:	andeq	r0, r0, r0
   18a48:	andeq	r0, r0, r1
   18a4c:	andeq	r0, r0, r0

00018a50 <next@@Base>:
   18a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a54:	add	fp, sp, #28
   18a58:	sub	sp, sp, #524	; 0x20c
   18a5c:	movw	r7, #768	; 0x300
   18a60:	mov	r4, r0
   18a64:	movt	r7, #3
   18a68:	ldrd	r0, [r7]
   18a6c:	mov	r2, r7
   18a70:	adds	r0, r0, #1
   18a74:	adc	r1, r1, #0
   18a78:	strd	r0, [r7]
   18a7c:	mov	r1, #16
   18a80:	ldr	r0, [r4, #4]
   18a84:	cmp	r0, #0
   18a88:	movwne	r1, #8
   18a8c:	ldr	r1, [r2, r1]!
   18a90:	adds	r1, r1, #1
   18a94:	str	r1, [r2]
   18a98:	ldr	r1, [r2, #4]
   18a9c:	adc	r1, r1, #0
   18aa0:	cmp	r0, #0
   18aa4:	str	r1, [r2, #4]
   18aa8:	beq	18af4 <next@@Base+0xa4>
   18aac:	ldrd	r2, [r7, #24]
   18ab0:	adds	r2, r2, #1
   18ab4:	adc	r3, r3, #0
   18ab8:	strd	r2, [r7, #24]
   18abc:	ldr	r1, [r0]
   18ac0:	str	r1, [r4, #4]
   18ac4:	mov	r1, #0
   18ac8:	ldr	r6, [r0, #4]
   18acc:	str	r1, [r0, #4]
   18ad0:	movw	r1, #672	; 0x2a0
   18ad4:	add	r2, pc, #924	; 0x39c
   18ad8:	movt	r1, #3
   18adc:	vld1.64	{d16-d17}, [r2]
   18ae0:	vld1.64	{d18-d19}, [r1 :128]
   18ae4:	vadd.i64	q8, q9, q8
   18ae8:	vst1.64	{d16-d17}, [r1 :128]
   18aec:	bl	12634 <free@plt>
   18af0:	b	1908c <next@@Base+0x63c>
   18af4:	movw	r5, #704	; 0x2c0
   18af8:	add	r0, pc, #888	; 0x378
   18afc:	movt	r5, #3
   18b00:	vld1.64	{d16-d17}, [r0]
   18b04:	ldrd	r0, [r7, #32]
   18b08:	vld1.64	{d18-d19}, [r5 :128]
   18b0c:	adds	r0, r0, #1
   18b10:	vadd.i64	q8, q9, q8
   18b14:	adc	r1, r1, #0
   18b18:	vst1.64	{d16-d17}, [r5 :128]
   18b1c:	strd	r0, [r7, #32]
   18b20:	ldr	r1, [r4, #8]
   18b24:	ldr	r0, [r4]
   18b28:	add	r2, r1, #1
   18b2c:	str	r2, [r4, #8]
   18b30:	ldrb	r8, [r0, r1]
   18b34:	mov	r0, #48	; 0x30
   18b38:	mov	r1, r7
   18b3c:	cmp	r8, #0
   18b40:	movwne	r0, #40	; 0x28
   18b44:	ldr	r0, [r1, r0]!
   18b48:	adds	r0, r0, #1
   18b4c:	str	r0, [r1]
   18b50:	ldr	r0, [r1, #4]
   18b54:	adc	r0, r0, #0
   18b58:	cmp	r8, #0
   18b5c:	str	r0, [r1, #4]
   18b60:	beq	19064 <next@@Base+0x614>
   18b64:	movw	r6, #59472	; 0xe850
   18b68:	mov	r0, #0
   18b6c:	mov	r9, #0
   18b70:	mov	sl, #0
   18b74:	movt	r6, #1
   18b78:	str	r0, [sp, #4]
   18b7c:	b	18f00 <next@@Base+0x4b0>
   18b80:	cmp	r2, #48	; 0x30
   18b84:	mov	r0, #176	; 0xb0
   18b88:	mov	r1, r7
   18b8c:	movweq	r0, #168	; 0xa8
   18b90:	ldr	r0, [r1, r0]!
   18b94:	adds	r0, r0, #1
   18b98:	str	r0, [r1]
   18b9c:	ldr	r0, [r1, #4]
   18ba0:	adc	r0, r0, #0
   18ba4:	cmp	r2, #48	; 0x30
   18ba8:	str	r0, [r1, #4]
   18bac:	beq	19818 <next@@Base+0xdc8>
   18bb0:	mov	r0, #200	; 0xc8
   18bb4:	mov	r1, r7
   18bb8:	movwhi	r0, #192	; 0xc0
   18bbc:	ldr	r0, [r1, r0]!
   18bc0:	adds	r0, r0, #1
   18bc4:	str	r0, [r1]
   18bc8:	ldr	r0, [r1, #4]
   18bcc:	adc	r0, r0, #0
   18bd0:	cmp	r2, #49	; 0x31
   18bd4:	str	r0, [r1, #4]
   18bd8:	bcc	19840 <next@@Base+0xdf0>
   18bdc:	cmp	r2, #58	; 0x3a
   18be0:	mov	r0, #216	; 0xd8
   18be4:	mov	r1, r7
   18be8:	ldr	lr, [sp, #4]
   18bec:	movwcc	r0, #208	; 0xd0
   18bf0:	ldr	r0, [r1, r0]!
   18bf4:	adds	r0, r0, #1
   18bf8:	str	r0, [r1]
   18bfc:	ldr	r0, [r1, #4]
   18c00:	adc	r0, r0, #0
   18c04:	cmp	r2, #57	; 0x39
   18c08:	str	r0, [r1, #4]
   18c0c:	bhi	18c4c <next@@Base+0x1fc>
   18c10:	add	r0, pc, #608	; 0x260
   18c14:	vld1.64	{d18-d19}, [r5 :128]
   18c18:	mov	sl, #1
   18c1c:	vld1.64	{d16-d17}, [r0]
   18c20:	add	r0, sp, #8
   18c24:	strb	r8, [r0, lr]
   18c28:	ldrd	r0, [r7, #224]	; 0xe0
   18c2c:	add	lr, lr, #1
   18c30:	str	lr, [sp, #4]
   18c34:	vadd.i64	q8, q9, q8
   18c38:	adds	r0, r0, #1
   18c3c:	vst1.64	{d16-d17}, [r5 :128]
   18c40:	adc	r1, r1, #0
   18c44:	strd	r0, [r7, #224]	; 0xe0
   18c48:	b	18ff8 <next@@Base+0x5a8>
   18c4c:	ldrd	r0, [r7, #240]	; 0xf0
   18c50:	ldr	r3, [r7, #264]	; 0x108
   18c54:	mov	ip, r5
   18c58:	ldr	r5, [r7, #268]	; 0x10c
   18c5c:	adds	r0, r0, #1
   18c60:	adc	r1, r1, #0
   18c64:	adds	r3, r3, #1
   18c68:	str	r3, [r7, #264]	; 0x108
   18c6c:	strd	r0, [r7, #240]	; 0xf0
   18c70:	adc	r0, r5, #0
   18c74:	cmp	r2, #123	; 0x7b
   18c78:	mov	r1, r7
   18c7c:	str	r0, [r7, #268]	; 0x10c
   18c80:	mov	r0, #288	; 0x120
   18c84:	movweq	r0, #280	; 0x118
   18c88:	ldr	r0, [r1, r0]!
   18c8c:	adds	r0, r0, #1
   18c90:	str	r0, [r1]
   18c94:	ldr	r0, [r1, #4]
   18c98:	adc	r0, r0, #0
   18c9c:	cmp	r2, #123	; 0x7b
   18ca0:	str	r0, [r1, #4]
   18ca4:	beq	198f4 <next@@Base+0xea4>
   18ca8:	cmp	r2, #125	; 0x7d
   18cac:	mov	r0, #312	; 0x138
   18cb0:	mov	r1, r7
   18cb4:	movweq	r0, #304	; 0x130
   18cb8:	ldr	r0, [r1, r0]!
   18cbc:	adds	r0, r0, #1
   18cc0:	str	r0, [r1]
   18cc4:	ldr	r0, [r1, #4]
   18cc8:	adc	r0, r0, #0
   18ccc:	cmp	r2, #125	; 0x7d
   18cd0:	str	r0, [r1, #4]
   18cd4:	beq	19920 <next@@Base+0xed0>
   18cd8:	cmp	r2, #59	; 0x3b
   18cdc:	mov	r0, #336	; 0x150
   18ce0:	mov	r1, r7
   18ce4:	movweq	r0, #328	; 0x148
   18ce8:	ldr	r0, [r1, r0]!
   18cec:	adds	r0, r0, #1
   18cf0:	str	r0, [r1]
   18cf4:	ldr	r0, [r1, #4]
   18cf8:	adc	r0, r0, #0
   18cfc:	cmp	r2, #59	; 0x3b
   18d00:	str	r0, [r1, #4]
   18d04:	beq	1994c <next@@Base+0xefc>
   18d08:	cmp	r2, #101	; 0x65
   18d0c:	mov	r0, #360	; 0x168
   18d10:	mov	r1, r7
   18d14:	movweq	r0, #352	; 0x160
   18d18:	ldr	r0, [r1, r0]!
   18d1c:	adds	r0, r0, #1
   18d20:	str	r0, [r1]
   18d24:	ldr	r0, [r1, #4]
   18d28:	adc	r0, r0, #0
   18d2c:	cmp	r2, #101	; 0x65
   18d30:	str	r0, [r1, #4]
   18d34:	bne	18d84 <next@@Base+0x334>
   18d38:	add	r0, pc, #312	; 0x138
   18d3c:	mov	r1, #101	; 0x65
   18d40:	vld1.64	{d18-d19}, [ip :128]
   18d44:	mov	r5, ip
   18d48:	mov	sl, #5
   18d4c:	vld1.64	{d16-d17}, [r0]
   18d50:	add	r0, sp, #8
   18d54:	strb	r1, [r0, lr]
   18d58:	ldr	r0, [r7, #368]	; 0x170
   18d5c:	ldr	r1, [r7, #372]	; 0x174
   18d60:	add	lr, lr, #1
   18d64:	str	lr, [sp, #4]
   18d68:	vadd.i64	q8, q9, q8
   18d6c:	adds	r0, r0, #1
   18d70:	vst1.64	{d16-d17}, [r5 :128]
   18d74:	adc	r1, r1, #0
   18d78:	str	r0, [r7, #368]	; 0x170
   18d7c:	str	r1, [r7, #372]	; 0x174
   18d80:	b	18ff8 <next@@Base+0x5a8>
   18d84:	cmp	r2, #105	; 0x69
   18d88:	mov	r0, #384	; 0x180
   18d8c:	mov	r1, r7
   18d90:	mov	r5, ip
   18d94:	movweq	r0, #376	; 0x178
   18d98:	ldr	r0, [r1, r0]!
   18d9c:	adds	r0, r0, #1
   18da0:	str	r0, [r1]
   18da4:	ldr	r0, [r1, #4]
   18da8:	adc	r0, r0, #0
   18dac:	cmp	r2, #105	; 0x69
   18db0:	str	r0, [r1, #4]
   18db4:	bne	18e00 <next@@Base+0x3b0>
   18db8:	add	r0, pc, #184	; 0xb8
   18dbc:	mov	r1, #105	; 0x69
   18dc0:	vld1.64	{d18-d19}, [r5 :128]
   18dc4:	mov	sl, #2
   18dc8:	vld1.64	{d16-d17}, [r0]
   18dcc:	add	r0, sp, #8
   18dd0:	strb	r1, [r0, lr]
   18dd4:	ldr	r0, [r7, #392]	; 0x188
   18dd8:	ldr	r1, [r7, #396]	; 0x18c
   18ddc:	add	lr, lr, #1
   18de0:	str	lr, [sp, #4]
   18de4:	vadd.i64	q8, q9, q8
   18de8:	adds	r0, r0, #1
   18dec:	vst1.64	{d16-d17}, [r5 :128]
   18df0:	adc	r1, r1, #0
   18df4:	str	r0, [r7, #392]	; 0x188
   18df8:	str	r1, [r7, #396]	; 0x18c
   18dfc:	b	18ff8 <next@@Base+0x5a8>
   18e00:	cmp	r2, #109	; 0x6d
   18e04:	mov	r0, #408	; 0x198
   18e08:	mov	r1, r7
   18e0c:	movweq	r0, #400	; 0x190
   18e10:	ldr	r0, [r1, r0]!
   18e14:	adds	r0, r0, #1
   18e18:	str	r0, [r1]
   18e1c:	ldr	r0, [r1, #4]
   18e20:	adc	r0, r0, #0
   18e24:	cmp	r2, #109	; 0x6d
   18e28:	str	r0, [r1, #4]
   18e2c:	bne	18e88 <next@@Base+0x438>
   18e30:	add	r0, pc, #64	; 0x40
   18e34:	mov	r1, #109	; 0x6d
   18e38:	vld1.64	{d18-d19}, [r5 :128]
   18e3c:	mov	sl, #3
   18e40:	vld1.64	{d16-d17}, [r0]
   18e44:	add	r0, sp, #8
   18e48:	strb	r1, [r0, lr]
   18e4c:	ldr	r0, [r7, #416]	; 0x1a0
   18e50:	ldr	r1, [r7, #420]	; 0x1a4
   18e54:	add	lr, lr, #1
   18e58:	str	lr, [sp, #4]
   18e5c:	vadd.i64	q8, q9, q8
   18e60:	adds	r0, r0, #1
   18e64:	vst1.64	{d16-d17}, [r5 :128]
   18e68:	adc	r1, r1, #0
   18e6c:	str	r0, [r7, #416]	; 0x1a0
   18e70:	str	r1, [r7, #420]	; 0x1a4
   18e74:	b	18ff8 <next@@Base+0x5a8>
   18e78:	andeq	r0, r0, r1
   18e7c:	andeq	r0, r0, r0
   18e80:	andeq	r0, r0, r1
   18e84:	andeq	r0, r0, r0
   18e88:	cmp	r2, #114	; 0x72
   18e8c:	mov	r0, #432	; 0x1b0
   18e90:	mov	r1, r7
   18e94:	movweq	r0, #424	; 0x1a8
   18e98:	ldr	r0, [r1, r0]!
   18e9c:	adds	r0, r0, #1
   18ea0:	str	r0, [r1]
   18ea4:	ldr	r0, [r1, #4]
   18ea8:	adc	r0, r0, #0
   18eac:	cmp	r2, #114	; 0x72
   18eb0:	str	r0, [r1, #4]
   18eb4:	bne	19cac <next@@Base+0x125c>
   18eb8:	sub	r0, pc, #72	; 0x48
   18ebc:	mov	r1, #114	; 0x72
   18ec0:	vld1.64	{d18-d19}, [r5 :128]
   18ec4:	mov	sl, #4
   18ec8:	vld1.64	{d16-d17}, [r0]
   18ecc:	add	r0, sp, #8
   18ed0:	strb	r1, [r0, lr]
   18ed4:	ldr	r0, [r7, #440]	; 0x1b8
   18ed8:	ldr	r1, [r7, #444]	; 0x1bc
   18edc:	add	lr, lr, #1
   18ee0:	str	lr, [sp, #4]
   18ee4:	vadd.i64	q8, q9, q8
   18ee8:	adds	r0, r0, #1
   18eec:	vst1.64	{d16-d17}, [r5 :128]
   18ef0:	adc	r1, r1, #0
   18ef4:	str	r0, [r7, #440]	; 0x1b8
   18ef8:	str	r1, [r7, #444]	; 0x1bc
   18efc:	b	18ff8 <next@@Base+0x5a8>
   18f00:	movw	r0, #61652	; 0xf0d4
   18f04:	cmp	sl, #5
   18f08:	movt	r0, #2
   18f0c:	str	r9, [r0]
   18f10:	bhi	19010 <next@@Base+0x5c0>
   18f14:	add	r0, pc, #0
   18f18:	ldr	pc, [r0, sl, lsl #2]
   18f1c:	andeq	r8, r1, r4, lsr pc
   18f20:	strheq	r9, [r1], -r0
   18f24:	andeq	r9, r1, r0, asr #10
   18f28:	andeq	r9, r1, r8, lsl #3
   18f2c:	andeq	r9, r1, r4, lsl #6
   18f30:	andeq	r9, r1, r8, lsl r6
   18f34:	add	r0, r6, #8
   18f38:	bl	1a030 <next@@Base+0x15e0>
   18f3c:	uxtb	r2, r8
   18f40:	mov	r0, #120	; 0x78
   18f44:	mov	r1, r7
   18f48:	cmp	r2, #9
   18f4c:	movweq	r0, #112	; 0x70
   18f50:	ldr	r0, [r1, r0]!
   18f54:	adds	r0, r0, #1
   18f58:	str	r0, [r1]
   18f5c:	ldr	r0, [r1, #4]
   18f60:	adc	r0, r0, #0
   18f64:	cmp	r2, #9
   18f68:	str	r0, [r1, #4]
   18f6c:	beq	18fd0 <next@@Base+0x580>
   18f70:	cmp	r2, #32
   18f74:	mov	r0, #136	; 0x88
   18f78:	mov	r1, r7
   18f7c:	movweq	r0, #128	; 0x80
   18f80:	ldr	r0, [r1, r0]!
   18f84:	adds	r0, r0, #1
   18f88:	str	r0, [r1]
   18f8c:	ldr	r0, [r1, #4]
   18f90:	adc	r0, r0, #0
   18f94:	cmp	r2, #32
   18f98:	str	r0, [r1, #4]
   18f9c:	beq	18fd0 <next@@Base+0x580>
   18fa0:	cmp	r2, #10
   18fa4:	mov	r0, #152	; 0x98
   18fa8:	mov	r1, r7
   18fac:	movweq	r0, #144	; 0x90
   18fb0:	ldr	r0, [r1, r0]!
   18fb4:	adds	r0, r0, #1
   18fb8:	str	r0, [r1]
   18fbc:	ldr	r0, [r1, #4]
   18fc0:	adc	r0, r0, #0
   18fc4:	cmp	r2, #10
   18fc8:	str	r0, [r1, #4]
   18fcc:	bne	18b80 <next@@Base+0x130>
   18fd0:	sub	r0, pc, #352	; 0x160
   18fd4:	vld1.64	{d18-d19}, [r5 :128]
   18fd8:	mov	sl, #0
   18fdc:	vld1.64	{d16-d17}, [r0]
   18fe0:	ldrd	r0, [r7, #160]	; 0xa0
   18fe4:	adds	r0, r0, #1
   18fe8:	vadd.i64	q8, q9, q8
   18fec:	adc	r1, r1, #0
   18ff0:	vst1.64	{d16-d17}, [r5 :128]
   18ff4:	strd	r0, [r7, #160]	; 0xa0
   18ff8:	ldr	r1, [r4, #8]
   18ffc:	ldr	r0, [r4]
   19000:	add	r2, r1, #1
   19004:	add	r0, r0, r1
   19008:	str	r2, [r4, #8]
   1900c:	ldrb	r8, [r0]
   19010:	mov	r0, r6
   19014:	bl	1a030 <next@@Base+0x15e0>
   19018:	ldr	r0, [r7, #984]	; 0x3d8
   1901c:	ldr	r1, [r7, #988]	; 0x3dc
   19020:	mov	r2, r7
   19024:	adds	r0, r0, #1
   19028:	adc	r1, r1, #0
   1902c:	str	r0, [r7, #984]	; 0x3d8
   19030:	uxtb	r0, r8
   19034:	str	r1, [r7, #988]	; 0x3dc
   19038:	cmp	r0, #0
   1903c:	mov	r1, #48	; 0x30
   19040:	movwne	r1, #40	; 0x28
   19044:	ldr	r1, [r2, r1]!
   19048:	adds	r1, r1, #1
   1904c:	str	r1, [r2]
   19050:	ldr	r1, [r2, #4]
   19054:	adc	r1, r1, #0
   19058:	cmp	r0, #0
   1905c:	str	r1, [r2, #4]
   19060:	bne	18f00 <next@@Base+0x4b0>
   19064:	ldr	r0, [r7, #992]	; 0x3e0
   19068:	ldr	r1, [r7, #996]	; 0x3e4
   1906c:	adds	r0, r0, #1
   19070:	adc	r1, r1, #0
   19074:	str	r0, [r7, #992]	; 0x3e0
   19078:	mov	r0, #4
   1907c:	str	r1, [r7, #996]	; 0x3e4
   19080:	bl	126c4 <malloc@plt>
   19084:	mov	r6, r0
   19088:	bl	18218 <init_token_eof@@Base>
   1908c:	ldr	r0, [r7, #1000]	; 0x3e8
   19090:	ldr	r1, [r7, #1004]	; 0x3ec
   19094:	adds	r0, r0, #1
   19098:	adc	r1, r1, #0
   1909c:	str	r0, [r7, #1000]	; 0x3e8
   190a0:	mov	r0, r6
   190a4:	str	r1, [r7, #1004]	; 0x3ec
   190a8:	sub	sp, fp, #28
   190ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190b0:	add	sl, r6, #16
   190b4:	mov	r0, sl
   190b8:	bl	1a030 <next@@Base+0x15e0>
   190bc:	sub	r0, r8, #48	; 0x30
   190c0:	mov	r1, #704	; 0x2c0
   190c4:	mov	r2, r7
   190c8:	add	r9, sp, #8
   190cc:	uxtb	r0, r0
   190d0:	cmp	r0, #10
   190d4:	movwcc	r1, #696	; 0x2b8
   190d8:	ldr	r1, [r2, r1]!
   190dc:	adds	r1, r1, #1
   190e0:	str	r1, [r2]
   190e4:	ldr	r1, [r2, #4]
   190e8:	adc	r1, r1, #0
   190ec:	cmp	r0, #9
   190f0:	str	r1, [r2, #4]
   190f4:	bhi	19764 <next@@Base+0xd14>
   190f8:	ldr	r6, [sp, #4]
   190fc:	sub	r0, pc, #652	; 0x28c
   19100:	vld1.64	{d18-d19}, [r5 :128]
   19104:	ldr	r1, [r7, #716]	; 0x2cc
   19108:	strb	r8, [r9, r6]
   1910c:	vld1.64	{d16-d17}, [r0]
   19110:	ldr	r0, [r7, #712]	; 0x2c8
   19114:	adds	r0, r0, #1
   19118:	vadd.i64	q8, q9, q8
   1911c:	adc	r1, r1, #0
   19120:	vst1.64	{d16-d17}, [r5 :128]
   19124:	str	r0, [r7, #712]	; 0x2c8
   19128:	str	r1, [r7, #716]	; 0x2cc
   1912c:	ldr	r1, [r4, #8]
   19130:	ldr	r0, [r4]
   19134:	add	r2, r1, #1
   19138:	str	r2, [r4, #8]
   1913c:	ldrb	r8, [r0, r1]
   19140:	mov	r0, sl
   19144:	bl	1a030 <next@@Base+0x15e0>
   19148:	sub	r0, r8, #48	; 0x30
   1914c:	mov	r1, #704	; 0x2c0
   19150:	mov	r2, r7
   19154:	add	r6, r6, #1
   19158:	uxtb	r0, r0
   1915c:	cmp	r0, #10
   19160:	movwcc	r1, #696	; 0x2b8
   19164:	ldr	r1, [r2, r1]!
   19168:	adds	r1, r1, #1
   1916c:	str	r1, [r2]
   19170:	ldr	r1, [r2, #4]
   19174:	adc	r1, r1, #0
   19178:	cmp	r0, #10
   1917c:	str	r1, [r2, #4]
   19180:	bcc	190fc <next@@Base+0x6ac>
   19184:	b	19768 <next@@Base+0xd18>
   19188:	add	r0, r6, #32
   1918c:	bl	1a030 <next@@Base+0x15e0>
   19190:	uxtb	r0, r8
   19194:	mov	r1, #792	; 0x318
   19198:	mov	r2, r7
   1919c:	cmp	r0, #97	; 0x61
   191a0:	movwne	r1, #784	; 0x310
   191a4:	ldr	r1, [r2, r1]!
   191a8:	adds	r1, r1, #1
   191ac:	str	r1, [r2]
   191b0:	ldr	r1, [r2, #4]
   191b4:	adc	r1, r1, #0
   191b8:	cmp	r0, #97	; 0x61
   191bc:	str	r1, [r2, #4]
   191c0:	bne	19fe4 <next@@Base+0x1594>
   191c4:	sub	r0, pc, #852	; 0x354
   191c8:	vld1.64	{d16-d17}, [r5 :128]
   191cc:	ldr	r6, [sp, #4]
   191d0:	add	r8, sp, #8
   191d4:	vld1.64	{d18-d19}, [r0]
   191d8:	mov	r0, #97	; 0x61
   191dc:	strb	r0, [r8, r6]
   191e0:	vadd.i64	q9, q8, q9
   191e4:	vst1.64	{d18-d19}, [r5 :128]
   191e8:	ldr	r1, [r4, #8]
   191ec:	ldr	r0, [r4]
   191f0:	add	r2, r1, #1
   191f4:	str	r2, [r4, #8]
   191f8:	mov	r2, r7
   191fc:	ldrb	r0, [r0, r1]
   19200:	mov	r1, #808	; 0x328
   19204:	cmp	r0, #105	; 0x69
   19208:	movwne	r1, #800	; 0x320
   1920c:	ldr	r1, [r2, r1]!
   19210:	adds	r1, r1, #1
   19214:	str	r1, [r2]
   19218:	ldr	r1, [r2, #4]
   1921c:	adc	r1, r1, #0
   19220:	cmp	r0, #105	; 0x69
   19224:	str	r1, [r2, #4]
   19228:	bne	19fe4 <next@@Base+0x1594>
   1922c:	add	r0, r8, r6
   19230:	mov	r1, #105	; 0x69
   19234:	strb	r1, [r0, #1]
   19238:	vmov.32	r1, d16[0]
   1923c:	adds	r1, r1, #2
   19240:	str	r1, [r5]
   19244:	vmov.32	r1, d16[1]
   19248:	adc	r1, r1, #0
   1924c:	str	r1, [r5, #4]
   19250:	ldrd	r2, [r5, #8]
   19254:	adds	r1, r2, #1
   19258:	str	r1, [r5, #8]
   1925c:	adc	r1, r3, #0
   19260:	str	r1, [r5, #12]
   19264:	ldr	r2, [r4, #8]
   19268:	ldr	r1, [r4]
   1926c:	add	r3, r2, #1
   19270:	str	r3, [r4, #8]
   19274:	mov	r3, r7
   19278:	ldrb	r1, [r1, r2]
   1927c:	mov	r2, #824	; 0x338
   19280:	cmp	r1, #110	; 0x6e
   19284:	movwne	r2, #816	; 0x330
   19288:	ldr	r2, [r3, r2]!
   1928c:	adds	r2, r2, #1
   19290:	str	r2, [r3]
   19294:	ldr	r2, [r3, #4]
   19298:	adc	r2, r2, #0
   1929c:	cmp	r1, #110	; 0x6e
   192a0:	str	r2, [r3, #4]
   192a4:	bne	19fe4 <next@@Base+0x1594>
   192a8:	mov	r1, #110	; 0x6e
   192ac:	strh	r1, [r0, #2]
   192b0:	ldr	r0, [r7, #832]	; 0x340
   192b4:	ldr	r1, [r7, #836]	; 0x344
   192b8:	adds	r0, r0, #1
   192bc:	adc	r1, r1, #0
   192c0:	str	r0, [r7, #832]	; 0x340
   192c4:	add	r0, r6, #4
   192c8:	str	r1, [r7, #836]	; 0x344
   192cc:	bl	126c4 <malloc@plt>
   192d0:	add	r6, r6, #3
   192d4:	mov	r1, r8
   192d8:	mov	r4, r0
   192dc:	mov	r2, r6
   192e0:	bl	1276c <strncpy@plt>
   192e4:	mov	r0, #0
   192e8:	strb	r0, [r4, r6]
   192ec:	mov	r0, #8
   192f0:	bl	126c4 <malloc@plt>
   192f4:	mov	r1, r4
   192f8:	mov	r6, r0
   192fc:	bl	18088 <init_token_function@@Base>
   19300:	b	1908c <next@@Base+0x63c>
   19304:	add	r0, r6, #40	; 0x28
   19308:	bl	1a030 <next@@Base+0x15e0>
   1930c:	uxtb	r0, r8
   19310:	mov	r1, #848	; 0x350
   19314:	mov	r2, r7
   19318:	cmp	r0, #101	; 0x65
   1931c:	movwne	r1, #840	; 0x348
   19320:	ldr	r1, [r2, r1]!
   19324:	adds	r1, r1, #1
   19328:	str	r1, [r2]
   1932c:	ldr	r1, [r2, #4]
   19330:	adc	r1, r1, #0
   19334:	cmp	r0, #101	; 0x65
   19338:	str	r1, [r2, #4]
   1933c:	bne	19fe4 <next@@Base+0x1594>
   19340:	add	r0, pc, #704	; 0x2c0
   19344:	vld1.64	{d16-d17}, [r5 :128]
   19348:	ldr	r6, [sp, #4]
   1934c:	add	r3, sp, #8
   19350:	vld1.64	{d18-d19}, [r0]
   19354:	mov	r0, #101	; 0x65
   19358:	strb	r0, [r3, r6]
   1935c:	vadd.i64	q9, q8, q9
   19360:	vst1.64	{d18-d19}, [r5 :128]
   19364:	ldr	r1, [r4, #8]
   19368:	ldr	r0, [r4]
   1936c:	add	r2, r1, #1
   19370:	str	r2, [r4, #8]
   19374:	mov	r2, r7
   19378:	ldrb	r0, [r0, r1]
   1937c:	mov	r1, #864	; 0x360
   19380:	cmp	r0, #116	; 0x74
   19384:	movwne	r1, #856	; 0x358
   19388:	ldr	r1, [r2, r1]!
   1938c:	adds	r1, r1, #1
   19390:	str	r1, [r2]
   19394:	ldr	r1, [r2, #4]
   19398:	adc	r1, r1, #0
   1939c:	cmp	r0, #116	; 0x74
   193a0:	str	r1, [r2, #4]
   193a4:	bne	19fe4 <next@@Base+0x1594>
   193a8:	add	ip, r3, r6
   193ac:	mov	r1, #116	; 0x74
   193b0:	vmov.32	r2, d16[0]
   193b4:	vmov.32	r0, d16[1]
   193b8:	strb	r1, [ip, #1]
   193bc:	adds	r1, r2, #2
   193c0:	adc	r3, r0, #0
   193c4:	str	r1, [r5]
   193c8:	mov	r1, r5
   193cc:	str	r3, [r5, #4]
   193d0:	ldr	r6, [r5, #8]
   193d4:	ldr	r3, [r5, #12]
   193d8:	adds	r6, r6, #1
   193dc:	adc	r3, r3, #0
   193e0:	str	r6, [r5, #8]
   193e4:	str	r3, [r5, #12]
   193e8:	ldr	r6, [r4, #8]
   193ec:	ldr	r3, [r4]
   193f0:	add	r5, r6, #1
   193f4:	str	r5, [r4, #8]
   193f8:	mov	r5, r7
   193fc:	ldrb	r3, [r3, r6]
   19400:	mov	r6, #880	; 0x370
   19404:	cmp	r3, #117	; 0x75
   19408:	movwne	r6, #872	; 0x368
   1940c:	ldr	r6, [r5, r6]!
   19410:	adds	r6, r6, #1
   19414:	str	r6, [r5]
   19418:	ldr	r6, [r5, #4]
   1941c:	adc	r6, r6, #0
   19420:	cmp	r3, #117	; 0x75
   19424:	str	r6, [r5, #4]
   19428:	bne	19fe4 <next@@Base+0x1594>
   1942c:	adds	r3, r2, #3
   19430:	str	r3, [r1]
   19434:	mov	r3, #117	; 0x75
   19438:	strb	r3, [ip, #2]
   1943c:	adc	r3, r0, #0
   19440:	str	r3, [r1, #4]
   19444:	ldr	r6, [r1, #8]
   19448:	ldr	r3, [r1, #12]
   1944c:	adds	r6, r6, #1
   19450:	adc	r3, r3, #0
   19454:	str	r6, [r1, #8]
   19458:	str	r3, [r1, #12]
   1945c:	ldr	r6, [r4, #8]
   19460:	ldr	r3, [r4]
   19464:	add	r5, r6, #1
   19468:	str	r5, [r4, #8]
   1946c:	mov	r5, r7
   19470:	ldrb	r3, [r3, r6]
   19474:	mov	r6, #896	; 0x380
   19478:	cmp	r3, #114	; 0x72
   1947c:	movwne	r6, #888	; 0x378
   19480:	ldr	r6, [r5, r6]!
   19484:	adds	r6, r6, #1
   19488:	str	r6, [r5]
   1948c:	ldr	r6, [r5, #4]
   19490:	adc	r6, r6, #0
   19494:	cmp	r3, #114	; 0x72
   19498:	str	r6, [r5, #4]
   1949c:	bne	19fe4 <next@@Base+0x1594>
   194a0:	adds	r2, r2, #4
   194a4:	str	r2, [r1]
   194a8:	mov	r2, #114	; 0x72
   194ac:	adc	r0, r0, #0
   194b0:	strb	r2, [ip, #3]
   194b4:	str	r0, [r1, #4]
   194b8:	ldr	r0, [r1, #8]
   194bc:	ldr	r3, [r1, #12]
   194c0:	adds	r0, r0, #1
   194c4:	str	r0, [r1, #8]
   194c8:	adc	r0, r3, #0
   194cc:	str	r0, [r1, #12]
   194d0:	ldr	r1, [r4, #8]
   194d4:	ldr	r0, [r4]
   194d8:	add	r2, r1, #1
   194dc:	str	r2, [r4, #8]
   194e0:	mov	r2, r7
   194e4:	ldrb	r0, [r0, r1]
   194e8:	mov	r1, #912	; 0x390
   194ec:	cmp	r0, #110	; 0x6e
   194f0:	movwne	r1, #904	; 0x388
   194f4:	ldr	r1, [r2, r1]!
   194f8:	adds	r1, r1, #1
   194fc:	str	r1, [r2]
   19500:	ldr	r1, [r2, #4]
   19504:	adc	r1, r1, #0
   19508:	cmp	r0, #110	; 0x6e
   1950c:	str	r1, [r2, #4]
   19510:	bne	19fe4 <next@@Base+0x1594>
   19514:	ldr	r0, [r7, #920]	; 0x398
   19518:	ldr	r1, [r7, #924]	; 0x39c
   1951c:	adds	r0, r0, #1
   19520:	adc	r1, r1, #0
   19524:	str	r0, [r7, #920]	; 0x398
   19528:	mov	r0, #4
   1952c:	str	r1, [r7, #924]	; 0x39c
   19530:	bl	126c4 <malloc@plt>
   19534:	mov	r6, r0
   19538:	bl	181a8 <init_token_return@@Base>
   1953c:	b	1908c <next@@Base+0x63c>
   19540:	add	r0, r6, #24
   19544:	bl	1a030 <next@@Base+0x15e0>
   19548:	movw	r1, #61652	; 0xf0d4
   1954c:	mov	r0, #1
   19550:	movt	r1, #2
   19554:	str	r0, [r1]
   19558:	uxtb	r0, r8
   1955c:	cmp	r0, #102	; 0x66
   19560:	beq	197d0 <next@@Base+0xd80>
   19564:	ldr	r9, [sp, #4]
   19568:	cmp	r0, #110	; 0x6e
   1956c:	add	r8, sp, #8
   19570:	bne	19fdc <next@@Base+0x158c>
   19574:	add	r0, r6, #64	; 0x40
   19578:	bl	1a030 <next@@Base+0x15e0>
   1957c:	add	r0, pc, #132	; 0x84
   19580:	vld1.64	{d18-d19}, [r5 :128]
   19584:	vld1.64	{d16-d17}, [r0]
   19588:	mov	r0, #110	; 0x6e
   1958c:	strb	r0, [r8, r9]
   19590:	vadd.i64	q8, q9, q8
   19594:	vst1.64	{d16-d17}, [r5 :128]
   19598:	ldr	r1, [r4, #8]
   1959c:	ldr	r0, [r4]
   195a0:	add	r2, r1, #1
   195a4:	str	r2, [r4, #8]
   195a8:	mov	r2, r7
   195ac:	ldrb	r0, [r0, r1]
   195b0:	mov	r1, #760	; 0x2f8
   195b4:	cmp	r0, #116	; 0x74
   195b8:	movwne	r1, #752	; 0x2f0
   195bc:	ldr	r1, [r2, r1]!
   195c0:	adds	r1, r1, #1
   195c4:	str	r1, [r2]
   195c8:	ldr	r1, [r2, #4]
   195cc:	adc	r1, r1, #0
   195d0:	cmp	r0, #116	; 0x74
   195d4:	str	r1, [r2, #4]
   195d8:	bne	19fe4 <next@@Base+0x1594>
   195dc:	ldr	r0, [r7, #768]	; 0x300
   195e0:	ldr	r1, [r7, #772]	; 0x304
   195e4:	adds	r0, r0, #1
   195e8:	adc	r1, r1, #0
   195ec:	str	r0, [r7, #768]	; 0x300
   195f0:	mov	r0, #4
   195f4:	str	r1, [r7, #772]	; 0x304
   195f8:	bl	126c4 <malloc@plt>
   195fc:	mov	r6, r0
   19600:	bl	18010 <init_token_int_type@@Base>
   19604:	b	1908c <next@@Base+0x63c>
   19608:	andeq	r0, r0, r1
   1960c:	andeq	r0, r0, r0
   19610:	andeq	r0, r0, r1
   19614:	andeq	r0, r0, r0
   19618:	add	r0, r6, #48	; 0x30
   1961c:	bl	1a030 <next@@Base+0x15e0>
   19620:	uxtb	r0, r8
   19624:	mov	r1, #936	; 0x3a8
   19628:	mov	r2, r7
   1962c:	cmp	r0, #108	; 0x6c
   19630:	movwne	r1, #928	; 0x3a0
   19634:	ldr	r1, [r2, r1]!
   19638:	adds	r1, r1, #1
   1963c:	str	r1, [r2]
   19640:	ldr	r1, [r2, #4]
   19644:	adc	r1, r1, #0
   19648:	cmp	r0, #108	; 0x6c
   1964c:	str	r1, [r2, #4]
   19650:	bne	19fe4 <next@@Base+0x1594>
   19654:	sub	r0, pc, #84	; 0x54
   19658:	vld1.64	{d16-d17}, [r5 :128]
   1965c:	ldr	r6, [sp, #4]
   19660:	add	r3, sp, #8
   19664:	vld1.64	{d18-d19}, [r0]
   19668:	mov	r0, #108	; 0x6c
   1966c:	strb	r0, [r3, r6]
   19670:	vadd.i64	q9, q8, q9
   19674:	vst1.64	{d18-d19}, [r5 :128]
   19678:	ldr	r1, [r4, #8]
   1967c:	ldr	r0, [r4]
   19680:	add	r2, r1, #1
   19684:	str	r2, [r4, #8]
   19688:	mov	r2, r7
   1968c:	ldrb	r0, [r0, r1]
   19690:	mov	r1, #952	; 0x3b8
   19694:	cmp	r0, #115	; 0x73
   19698:	movwne	r1, #944	; 0x3b0
   1969c:	ldr	r1, [r2, r1]!
   196a0:	adds	r1, r1, #1
   196a4:	str	r1, [r2]
   196a8:	ldr	r1, [r2, #4]
   196ac:	adc	r1, r1, #0
   196b0:	cmp	r0, #115	; 0x73
   196b4:	str	r1, [r2, #4]
   196b8:	bne	19fe4 <next@@Base+0x1594>
   196bc:	add	r0, r3, r6
   196c0:	mov	r1, #115	; 0x73
   196c4:	strb	r1, [r0, #1]
   196c8:	vmov.32	r0, d16[0]
   196cc:	adds	r0, r0, #2
   196d0:	str	r0, [r5]
   196d4:	vmov.32	r0, d16[1]
   196d8:	adc	r0, r0, #0
   196dc:	str	r0, [r5, #4]
   196e0:	ldrd	r0, [r5, #8]
   196e4:	adds	r0, r0, #1
   196e8:	str	r0, [r5, #8]
   196ec:	adc	r0, r1, #0
   196f0:	str	r0, [r5, #12]
   196f4:	ldr	r1, [r4, #8]
   196f8:	ldr	r0, [r4]
   196fc:	add	r2, r1, #1
   19700:	str	r2, [r4, #8]
   19704:	mov	r2, r7
   19708:	ldrb	r0, [r0, r1]
   1970c:	mov	r1, #968	; 0x3c8
   19710:	cmp	r0, #101	; 0x65
   19714:	movwne	r1, #960	; 0x3c0
   19718:	ldr	r1, [r2, r1]!
   1971c:	adds	r1, r1, #1
   19720:	str	r1, [r2]
   19724:	ldr	r1, [r2, #4]
   19728:	adc	r1, r1, #0
   1972c:	cmp	r0, #101	; 0x65
   19730:	str	r1, [r2, #4]
   19734:	bne	19fe4 <next@@Base+0x1594>
   19738:	ldr	r0, [r7, #976]	; 0x3d0
   1973c:	ldr	r1, [r7, #980]	; 0x3d4
   19740:	adds	r0, r0, #1
   19744:	adc	r1, r1, #0
   19748:	str	r0, [r7, #976]	; 0x3d0
   1974c:	mov	r0, #4
   19750:	str	r1, [r7, #980]	; 0x3d4
   19754:	bl	126c4 <malloc@plt>
   19758:	mov	r6, r0
   1975c:	bl	18288 <init_token_else@@Base>
   19760:	b	1908c <next@@Base+0x63c>
   19764:	ldr	r6, [sp, #4]
   19768:	movw	r0, #752	; 0x2f0
   1976c:	sub	r1, pc, #364	; 0x16c
   19770:	ldr	r2, [r7, #724]	; 0x2d4
   19774:	movt	r0, #3
   19778:	vld1.64	{d16-d17}, [r1]
   1977c:	ldr	r1, [r7, #720]	; 0x2d0
   19780:	vld1.64	{d18-d19}, [r0 :128]
   19784:	adds	r1, r1, #1
   19788:	vadd.i64	q8, q9, q8
   1978c:	str	r1, [r7, #720]	; 0x2d0
   19790:	mov	r1, #1
   19794:	vst1.64	{d16-d17}, [r0 :128]
   19798:	adc	r0, r2, #0
   1979c:	str	r0, [r7, #724]	; 0x2d4
   197a0:	mov	r0, r4
   197a4:	bl	18978 <push_back_chars@@Base>
   197a8:	mov	r0, #0
   197ac:	strb	r0, [r9, r6]
   197b0:	mov	r0, #8
   197b4:	bl	126c4 <malloc@plt>
   197b8:	mov	r6, r0
   197bc:	mov	r0, r9
   197c0:	bl	127c0 <atoi@plt>
   197c4:	mov	r1, r0
   197c8:	mov	r0, r6
   197cc:	b	19838 <next@@Base+0xde8>
   197d0:	add	r0, r6, #72	; 0x48
   197d4:	bl	1a030 <next@@Base+0x15e0>
   197d8:	ldr	r1, [sp, #4]
   197dc:	add	r0, sp, #8
   197e0:	add	r0, r0, r1
   197e4:	mov	r1, #102	; 0x66
   197e8:	strh	r1, [r0]
   197ec:	ldr	r0, [r7, #776]	; 0x308
   197f0:	ldr	r1, [r7, #780]	; 0x30c
   197f4:	adds	r0, r0, #1
   197f8:	adc	r1, r1, #0
   197fc:	str	r0, [r7, #776]	; 0x308
   19800:	mov	r0, #4
   19804:	str	r1, [r7, #780]	; 0x30c
   19808:	bl	126c4 <malloc@plt>
   1980c:	mov	r6, r0
   19810:	bl	18250 <init_token_if@@Base>
   19814:	b	1908c <next@@Base+0x63c>
   19818:	ldrd	r0, [r7, #184]	; 0xb8
   1981c:	adds	r0, r0, #1
   19820:	adc	r1, r1, #0
   19824:	strd	r0, [r7, #184]	; 0xb8
   19828:	mov	r0, #8
   1982c:	bl	126c4 <malloc@plt>
   19830:	mov	r1, #0
   19834:	mov	r6, r0
   19838:	bl	18048 <init_token_int_value@@Base>
   1983c:	b	1908c <next@@Base+0x63c>
   19840:	mov	r0, #240	; 0xf0
   19844:	cmp	r2, #40	; 0x28
   19848:	mov	r1, r7
   1984c:	ldr	sl, [sp, #4]
   19850:	movweq	r0, #232	; 0xe8
   19854:	ldr	r0, [r1, r0]!
   19858:	adds	r0, r0, #1
   1985c:	str	r0, [r1]
   19860:	ldr	r0, [r1, #4]
   19864:	adc	r0, r0, #0
   19868:	cmp	r2, #40	; 0x28
   1986c:	str	r0, [r1, #4]
   19870:	bne	19898 <next@@Base+0xe48>
   19874:	ldrd	r0, [r7, #248]	; 0xf8
   19878:	adds	r0, r0, #1
   1987c:	adc	r1, r1, #0
   19880:	strd	r0, [r7, #248]	; 0xf8
   19884:	mov	r0, #4
   19888:	bl	126c4 <malloc@plt>
   1988c:	mov	r6, r0
   19890:	bl	180c8 <init_token_opar@@Base>
   19894:	b	1908c <next@@Base+0x63c>
   19898:	mov	r0, #264	; 0x108
   1989c:	cmp	r2, #41	; 0x29
   198a0:	mov	r1, r7
   198a4:	movweq	r0, #256	; 0x100
   198a8:	ldr	r0, [r1, r0]!
   198ac:	adds	r0, r0, #1
   198b0:	str	r0, [r1]
   198b4:	ldr	r0, [r1, #4]
   198b8:	adc	r0, r0, #0
   198bc:	cmp	r2, #41	; 0x29
   198c0:	str	r0, [r1, #4]
   198c4:	bne	19978 <next@@Base+0xf28>
   198c8:	ldr	r0, [r7, #272]	; 0x110
   198cc:	ldr	r1, [r7, #276]	; 0x114
   198d0:	adds	r0, r0, #1
   198d4:	adc	r1, r1, #0
   198d8:	str	r0, [r7, #272]	; 0x110
   198dc:	mov	r0, #4
   198e0:	str	r1, [r7, #276]	; 0x114
   198e4:	bl	126c4 <malloc@plt>
   198e8:	mov	r6, r0
   198ec:	bl	18100 <init_token_cpar@@Base>
   198f0:	b	1908c <next@@Base+0x63c>
   198f4:	ldr	r0, [r7, #296]	; 0x128
   198f8:	ldr	r1, [r7, #300]	; 0x12c
   198fc:	adds	r0, r0, #1
   19900:	adc	r1, r1, #0
   19904:	str	r0, [r7, #296]	; 0x128
   19908:	mov	r0, #4
   1990c:	str	r1, [r7, #300]	; 0x12c
   19910:	bl	126c4 <malloc@plt>
   19914:	mov	r6, r0
   19918:	bl	18138 <init_token_obra@@Base>
   1991c:	b	1908c <next@@Base+0x63c>
   19920:	ldr	r0, [r7, #320]	; 0x140
   19924:	ldr	r1, [r7, #324]	; 0x144
   19928:	adds	r0, r0, #1
   1992c:	adc	r1, r1, #0
   19930:	str	r0, [r7, #320]	; 0x140
   19934:	mov	r0, #4
   19938:	str	r1, [r7, #324]	; 0x144
   1993c:	bl	126c4 <malloc@plt>
   19940:	mov	r6, r0
   19944:	bl	18170 <init_token_cbra@@Base>
   19948:	b	1908c <next@@Base+0x63c>
   1994c:	ldr	r0, [r7, #344]	; 0x158
   19950:	ldr	r1, [r7, #348]	; 0x15c
   19954:	adds	r0, r0, #1
   19958:	adc	r1, r1, #0
   1995c:	str	r0, [r7, #344]	; 0x158
   19960:	mov	r0, #4
   19964:	str	r1, [r7, #348]	; 0x15c
   19968:	bl	126c4 <malloc@plt>
   1996c:	mov	r6, r0
   19970:	bl	181e0 <init_token_semicolon@@Base>
   19974:	b	1908c <next@@Base+0x63c>
   19978:	ldr	r0, [r7, #408]	; 0x198
   1997c:	ldr	r1, [r7, #412]	; 0x19c
   19980:	ldr	r6, [r7, #388]	; 0x184
   19984:	mov	r9, r5
   19988:	ldr	r5, [r7, #360]	; 0x168
   1998c:	adds	r3, r0, #1
   19990:	ldr	r0, [r7, #364]	; 0x16c
   19994:	adc	ip, r1, #0
   19998:	ldr	r1, [r7, #384]	; 0x180
   1999c:	adds	r1, r1, #1
   199a0:	adc	lr, r6, #0
   199a4:	ldr	r6, [r7, #336]	; 0x150
   199a8:	adds	r5, r5, #1
   199ac:	adc	r8, r0, #0
   199b0:	adds	r6, r6, #1
   199b4:	str	r6, [r7, #336]	; 0x150
   199b8:	str	r5, [r7, #360]	; 0x168
   199bc:	str	r1, [r7, #384]	; 0x180
   199c0:	str	r3, [r7, #408]	; 0x198
   199c4:	ldr	r1, [r7, #340]	; 0x154
   199c8:	ldr	r6, [r7, #312]	; 0x138
   199cc:	ldr	r3, [r7, #288]	; 0x120
   199d0:	ldr	r5, [r7, #292]	; 0x124
   199d4:	ldr	r0, [r7, #316]	; 0x13c
   199d8:	adc	r1, r1, #0
   199dc:	adds	r6, r6, #1
   199e0:	str	r6, [r7, #312]	; 0x138
   199e4:	adc	r0, r0, #0
   199e8:	adds	r3, r3, #1
   199ec:	ldr	r6, [r7, #432]	; 0x1b0
   199f0:	adc	r5, r5, #0
   199f4:	adds	r6, r6, #1
   199f8:	str	r6, [r7, #432]	; 0x1b0
   199fc:	str	r3, [r7, #288]	; 0x120
   19a00:	str	r5, [r7, #292]	; 0x124
   19a04:	str	r0, [r7, #316]	; 0x13c
   19a08:	str	r1, [r7, #340]	; 0x154
   19a0c:	str	r8, [r7, #364]	; 0x16c
   19a10:	str	lr, [r7, #388]	; 0x184
   19a14:	str	ip, [r7, #412]	; 0x19c
   19a18:	mov	r1, r7
   19a1c:	ldr	r0, [r7, #436]	; 0x1b4
   19a20:	adc	r0, r0, #0
   19a24:	cmp	r2, #33	; 0x21
   19a28:	str	r0, [r7, #436]	; 0x1b4
   19a2c:	mov	r0, #456	; 0x1c8
   19a30:	movweq	r0, #448	; 0x1c0
   19a34:	ldr	r0, [r1, r0]!
   19a38:	adds	r0, r0, #1
   19a3c:	str	r0, [r1]
   19a40:	ldr	r0, [r1, #4]
   19a44:	adc	r0, r0, #0
   19a48:	cmp	r2, #33	; 0x21
   19a4c:	str	r0, [r1, #4]
   19a50:	bne	19b1c <next@@Base+0x10cc>
   19a54:	add	r0, pc, #1012	; 0x3f4
   19a58:	vld1.64	{d18-d19}, [r9 :128]
   19a5c:	add	r1, sp, #8
   19a60:	mov	r5, #472	; 0x1d8
   19a64:	vld1.64	{d16-d17}, [r0]
   19a68:	mov	r0, #33	; 0x21
   19a6c:	strb	r0, [r1, sl]
   19a70:	vadd.i64	q8, q9, q8
   19a74:	vst1.64	{d16-d17}, [r9 :128]
   19a78:	ldr	r1, [r4, #8]
   19a7c:	ldr	r0, [r4]
   19a80:	add	r2, r1, #1
   19a84:	str	r2, [r4, #8]
   19a88:	ldrb	r8, [r0, r1]
   19a8c:	mov	r0, #8
   19a90:	cmp	r8, #61	; 0x3d
   19a94:	movwne	r5, #464	; 0x1d0
   19a98:	bl	126c4 <malloc@plt>
   19a9c:	mov	r6, r0
   19aa0:	mov	r0, r7
   19aa4:	ldr	r1, [r0, r5]!
   19aa8:	adds	r1, r1, #1
   19aac:	str	r1, [r0]
   19ab0:	ldr	r1, [r0, #4]
   19ab4:	adc	r1, r1, #0
   19ab8:	cmp	r8, #61	; 0x3d
   19abc:	str	r1, [r0, #4]
   19ac0:	beq	19c50 <next@@Base+0x1200>
   19ac4:	movw	r0, #752	; 0x2f0
   19ac8:	add	r1, pc, #896	; 0x380
   19acc:	ldr	r2, [r7, #484]	; 0x1e4
   19ad0:	movt	r0, #3
   19ad4:	vld1.64	{d16-d17}, [r1]
   19ad8:	ldr	r1, [r7, #480]	; 0x1e0
   19adc:	vld1.64	{d18-d19}, [r0 :128]
   19ae0:	adds	r1, r1, #1
   19ae4:	vadd.i64	q8, q9, q8
   19ae8:	str	r1, [r7, #480]	; 0x1e0
   19aec:	mov	r1, #1
   19af0:	vst1.64	{d16-d17}, [r0 :128]
   19af4:	adc	r0, r2, #0
   19af8:	str	r0, [r7, #484]	; 0x1e4
   19afc:	mov	r0, r4
   19b00:	bl	18978 <push_back_chars@@Base>
   19b04:	mov	r0, #2
   19b08:	bl	126c4 <malloc@plt>
   19b0c:	ldrb	r2, [sp, #8]
   19b10:	mov	r1, r0
   19b14:	strb	r2, [r0], #1
   19b18:	b	19c88 <next@@Base+0x1238>
   19b1c:	ldr	r0, [r7, #584]	; 0x248
   19b20:	ldr	r1, [r7, #588]	; 0x24c
   19b24:	ldr	r5, [r7, #528]	; 0x210
   19b28:	ldr	r3, [r7, #512]	; 0x200
   19b2c:	ldr	r6, [r7, #516]	; 0x204
   19b30:	adds	ip, r0, #1
   19b34:	ldr	r0, [r7, #532]	; 0x214
   19b38:	adc	lr, r1, #0
   19b3c:	ldr	r1, [r7, #624]	; 0x270
   19b40:	adds	r5, r5, #1
   19b44:	adc	r0, r0, #0
   19b48:	adds	r3, r3, #1
   19b4c:	adc	r6, r6, #0
   19b50:	adds	r1, r1, #1
   19b54:	str	r1, [r7, #624]	; 0x270
   19b58:	str	r3, [r7, #512]	; 0x200
   19b5c:	str	r6, [r7, #516]	; 0x204
   19b60:	str	r5, [r7, #528]	; 0x210
   19b64:	str	r0, [r7, #532]	; 0x214
   19b68:	str	ip, [r7, #584]	; 0x248
   19b6c:	str	lr, [r7, #588]	; 0x24c
   19b70:	mov	r1, r7
   19b74:	ldr	r0, [r7, #628]	; 0x274
   19b78:	adc	r0, r0, #0
   19b7c:	cmp	r2, #38	; 0x26
   19b80:	str	r0, [r7, #628]	; 0x274
   19b84:	mov	r0, #664	; 0x298
   19b88:	movweq	r0, #656	; 0x290
   19b8c:	ldr	r0, [r1, r0]!
   19b90:	adds	r0, r0, #1
   19b94:	str	r0, [r1]
   19b98:	ldr	r0, [r1, #4]
   19b9c:	adc	r0, r0, #0
   19ba0:	cmp	r2, #38	; 0x26
   19ba4:	str	r0, [r1, #4]
   19ba8:	bne	1a004 <next@@Base+0x15b4>
   19bac:	add	r0, pc, #668	; 0x29c
   19bb0:	vld1.64	{d18-d19}, [r9 :128]
   19bb4:	mov	r8, #38	; 0x26
   19bb8:	mov	r5, #680	; 0x2a8
   19bbc:	vld1.64	{d16-d17}, [r0]
   19bc0:	add	r0, sp, #8
   19bc4:	strb	r8, [r0, sl]
   19bc8:	vadd.i64	q8, q9, q8
   19bcc:	vst1.64	{d16-d17}, [r9 :128]
   19bd0:	ldr	r1, [r4, #8]
   19bd4:	ldr	r0, [r4]
   19bd8:	add	r2, r1, #1
   19bdc:	str	r2, [r4, #8]
   19be0:	ldrb	r4, [r0, r1]
   19be4:	mov	r0, #8
   19be8:	cmp	r4, #38	; 0x26
   19bec:	movwne	r5, #672	; 0x2a0
   19bf0:	bl	126c4 <malloc@plt>
   19bf4:	mov	r6, r0
   19bf8:	mov	r0, r7
   19bfc:	ldr	r1, [r0, r5]!
   19c00:	adds	r1, r1, #1
   19c04:	str	r1, [r0]
   19c08:	ldr	r1, [r0, #4]
   19c0c:	adc	r1, r1, #0
   19c10:	cmp	r4, #38	; 0x26
   19c14:	str	r1, [r0, #4]
   19c18:	bne	19fe4 <next@@Base+0x1594>
   19c1c:	ldr	r0, [r7, #688]	; 0x2b0
   19c20:	ldr	r1, [r7, #692]	; 0x2b4
   19c24:	adds	r0, r0, #1
   19c28:	adc	r1, r1, #0
   19c2c:	str	r0, [r7, #688]	; 0x2b0
   19c30:	str	r1, [r7, #692]	; 0x2b4
   19c34:	mov	r0, #3
   19c38:	bl	126c4 <malloc@plt>
   19c3c:	mov	r1, r0
   19c40:	ldrb	r0, [sp, #8]
   19c44:	strh	r8, [r1, #1]
   19c48:	strb	r0, [r1]
   19c4c:	b	19e40 <next@@Base+0x13f0>
   19c50:	ldr	r0, [r7, #488]	; 0x1e8
   19c54:	ldr	r1, [r7, #492]	; 0x1ec
   19c58:	adds	r0, r0, #1
   19c5c:	adc	r1, r1, #0
   19c60:	str	r0, [r7, #488]	; 0x1e8
   19c64:	mov	r0, #3
   19c68:	str	r1, [r7, #492]	; 0x1ec
   19c6c:	bl	126c4 <malloc@plt>
   19c70:	mov	r1, r0
   19c74:	ldrb	r0, [sp, #8]
   19c78:	mov	r2, #61	; 0x3d
   19c7c:	strb	r2, [r1, #1]
   19c80:	strb	r0, [r1]
   19c84:	add	r0, r1, #2
   19c88:	mov	r2, #0
   19c8c:	strb	r2, [r0]
   19c90:	ldr	r0, [r7, #496]	; 0x1f0
   19c94:	ldr	r2, [r7, #500]	; 0x1f4
   19c98:	adds	r0, r0, #1
   19c9c:	adc	r2, r2, #0
   19ca0:	str	r0, [r7, #496]	; 0x1f0
   19ca4:	str	r2, [r7, #500]	; 0x1f4
   19ca8:	b	19e40 <next@@Base+0x13f0>
   19cac:	ldr	r0, [r7, #456]	; 0x1c8
   19cb0:	ldr	r1, [r7, #460]	; 0x1cc
   19cb4:	adds	r0, r0, #1
   19cb8:	adc	r1, r1, #0
   19cbc:	str	r0, [r7, #456]	; 0x1c8
   19cc0:	mov	r0, #512	; 0x200
   19cc4:	cmp	r2, #60	; 0x3c
   19cc8:	str	r1, [r7, #460]	; 0x1cc
   19ccc:	movweq	r0, #504	; 0x1f8
   19cd0:	mov	r1, r7
   19cd4:	ldr	r0, [r1, r0]!
   19cd8:	adds	r0, r0, #1
   19cdc:	str	r0, [r1]
   19ce0:	ldr	r0, [r1, #4]
   19ce4:	adc	r0, r0, #0
   19ce8:	cmp	r2, #60	; 0x3c
   19cec:	str	r0, [r1, #4]
   19cf0:	beq	19d24 <next@@Base+0x12d4>
   19cf4:	mov	r0, #528	; 0x210
   19cf8:	cmp	r2, #62	; 0x3e
   19cfc:	mov	r1, r7
   19d00:	movweq	r0, #520	; 0x208
   19d04:	ldr	r0, [r1, r0]!
   19d08:	adds	r0, r0, #1
   19d0c:	str	r0, [r1]
   19d10:	ldr	r0, [r1, #4]
   19d14:	adc	r0, r0, #0
   19d18:	cmp	r2, #62	; 0x3e
   19d1c:	str	r0, [r1, #4]
   19d20:	bne	19e60 <next@@Base+0x1410>
   19d24:	add	r0, pc, #756	; 0x2f4
   19d28:	vld1.64	{d18-d19}, [r5 :128]
   19d2c:	vld1.64	{d16-d17}, [r0]
   19d30:	add	r0, sp, #8
   19d34:	strb	r8, [r0, lr]
   19d38:	vadd.i64	q8, q9, q8
   19d3c:	vst1.64	{d16-d17}, [r5 :128]
   19d40:	mov	r5, #544	; 0x220
   19d44:	ldr	r1, [r4, #8]
   19d48:	ldr	r0, [r4]
   19d4c:	add	r2, r1, #1
   19d50:	str	r2, [r4, #8]
   19d54:	ldrb	r8, [r0, r1]
   19d58:	mov	r0, #8
   19d5c:	cmp	r8, #61	; 0x3d
   19d60:	movwne	r5, #536	; 0x218
   19d64:	bl	126c4 <malloc@plt>
   19d68:	mov	r6, r0
   19d6c:	mov	r0, r7
   19d70:	ldr	r1, [r0, r5]!
   19d74:	adds	r1, r1, #1
   19d78:	str	r1, [r0]
   19d7c:	ldr	r1, [r0, #4]
   19d80:	adc	r1, r1, #0
   19d84:	cmp	r8, #61	; 0x3d
   19d88:	str	r1, [r0, #4]
   19d8c:	beq	19de8 <next@@Base+0x1398>
   19d90:	movw	r0, #752	; 0x2f0
   19d94:	add	r1, pc, #644	; 0x284
   19d98:	ldr	r2, [r7, #556]	; 0x22c
   19d9c:	movt	r0, #3
   19da0:	vld1.64	{d16-d17}, [r1]
   19da4:	ldr	r1, [r7, #552]	; 0x228
   19da8:	vld1.64	{d18-d19}, [r0 :128]
   19dac:	adds	r1, r1, #1
   19db0:	vadd.i64	q8, q9, q8
   19db4:	str	r1, [r7, #552]	; 0x228
   19db8:	mov	r1, #1
   19dbc:	vst1.64	{d16-d17}, [r0 :128]
   19dc0:	adc	r0, r2, #0
   19dc4:	str	r0, [r7, #556]	; 0x22c
   19dc8:	mov	r0, r4
   19dcc:	bl	18978 <push_back_chars@@Base>
   19dd0:	mov	r0, #2
   19dd4:	bl	126c4 <malloc@plt>
   19dd8:	ldrb	r2, [sp, #8]
   19ddc:	mov	r1, r0
   19de0:	strb	r2, [r0], #1
   19de4:	b	19e20 <next@@Base+0x13d0>
   19de8:	ldr	r0, [r7, #560]	; 0x230
   19dec:	ldr	r1, [r7, #564]	; 0x234
   19df0:	adds	r0, r0, #1
   19df4:	adc	r1, r1, #0
   19df8:	str	r0, [r7, #560]	; 0x230
   19dfc:	mov	r0, #3
   19e00:	str	r1, [r7, #564]	; 0x234
   19e04:	bl	126c4 <malloc@plt>
   19e08:	mov	r1, r0
   19e0c:	ldrb	r0, [sp, #8]
   19e10:	mov	r2, #61	; 0x3d
   19e14:	strb	r2, [r1, #1]
   19e18:	strb	r0, [r1]
   19e1c:	add	r0, r1, #2
   19e20:	mov	r2, #0
   19e24:	strb	r2, [r0]
   19e28:	ldr	r0, [r7, #568]	; 0x238
   19e2c:	ldr	r2, [r7, #572]	; 0x23c
   19e30:	adds	r0, r0, #1
   19e34:	adc	r2, r2, #0
   19e38:	str	r0, [r7, #568]	; 0x238
   19e3c:	str	r2, [r7, #572]	; 0x23c
   19e40:	mov	r0, r6
   19e44:	bl	182c0 <init_token_boolean_op@@Base>
   19e48:	b	1908c <next@@Base+0x63c>
   19e4c:	nop	{0}
   19e50:	andeq	r0, r0, r1
   19e54:	andeq	r0, r0, r0
   19e58:	andeq	r0, r0, r1
   19e5c:	andeq	r0, r0, r0
   19e60:	mov	r0, #584	; 0x248
   19e64:	cmp	r2, #61	; 0x3d
   19e68:	mov	r1, r7
   19e6c:	movweq	r0, #576	; 0x240
   19e70:	ldr	r0, [r1, r0]!
   19e74:	adds	r0, r0, #1
   19e78:	str	r0, [r1]
   19e7c:	ldr	r0, [r1, #4]
   19e80:	adc	r0, r0, #0
   19e84:	cmp	r2, #61	; 0x3d
   19e88:	str	r0, [r1, #4]
   19e8c:	bne	19f1c <next@@Base+0x14cc>
   19e90:	add	r0, pc, #392	; 0x188
   19e94:	vld1.64	{d18-d19}, [r5 :128]
   19e98:	mov	r8, #61	; 0x3d
   19e9c:	vld1.64	{d16-d17}, [r0]
   19ea0:	add	r0, sp, #8
   19ea4:	strb	r8, [r0, lr]
   19ea8:	vadd.i64	q8, q9, q8
   19eac:	vst1.64	{d16-d17}, [r5 :128]
   19eb0:	mov	r5, #600	; 0x258
   19eb4:	ldr	r1, [r4, #8]
   19eb8:	ldr	r0, [r4]
   19ebc:	add	r2, r1, #1
   19ec0:	str	r2, [r4, #8]
   19ec4:	ldrb	r4, [r0, r1]
   19ec8:	mov	r0, #8
   19ecc:	cmp	r4, #61	; 0x3d
   19ed0:	movwne	r5, #592	; 0x250
   19ed4:	bl	126c4 <malloc@plt>
   19ed8:	mov	r6, r0
   19edc:	mov	r0, r7
   19ee0:	ldr	r1, [r0, r5]!
   19ee4:	adds	r1, r1, #1
   19ee8:	str	r1, [r0]
   19eec:	ldr	r1, [r0, #4]
   19ef0:	adc	r1, r1, #0
   19ef4:	cmp	r4, #61	; 0x3d
   19ef8:	str	r1, [r0, #4]
   19efc:	bne	19fe4 <next@@Base+0x1594>
   19f00:	ldr	r0, [r7, #608]	; 0x260
   19f04:	ldr	r1, [r7, #612]	; 0x264
   19f08:	adds	r0, r0, #1
   19f0c:	adc	r1, r1, #0
   19f10:	str	r0, [r7, #608]	; 0x260
   19f14:	str	r1, [r7, #612]	; 0x264
   19f18:	b	19c34 <next@@Base+0x11e4>
   19f1c:	mov	r0, #624	; 0x270
   19f20:	cmp	r2, #124	; 0x7c
   19f24:	mov	r1, r7
   19f28:	movweq	r0, #616	; 0x268
   19f2c:	ldr	r0, [r1, r0]!
   19f30:	adds	r0, r0, #1
   19f34:	str	r0, [r1]
   19f38:	ldr	r0, [r1, #4]
   19f3c:	adc	r0, r0, #0
   19f40:	cmp	r2, #124	; 0x7c
   19f44:	str	r0, [r1, #4]
   19f48:	bne	19fec <next@@Base+0x159c>
   19f4c:	add	r0, pc, #204	; 0xcc
   19f50:	vld1.64	{d18-d19}, [ip :128]
   19f54:	ldr	r1, [sp, #4]
   19f58:	mov	r8, #124	; 0x7c
   19f5c:	mov	r5, #640	; 0x280
   19f60:	vld1.64	{d16-d17}, [r0]
   19f64:	add	r0, sp, #8
   19f68:	strb	r8, [r0, r1]
   19f6c:	vadd.i64	q8, q9, q8
   19f70:	vst1.64	{d16-d17}, [ip :128]
   19f74:	ldr	r1, [r4, #8]
   19f78:	ldr	r0, [r4]
   19f7c:	add	r2, r1, #1
   19f80:	str	r2, [r4, #8]
   19f84:	ldrb	r4, [r0, r1]
   19f88:	mov	r0, #8
   19f8c:	cmp	r4, #124	; 0x7c
   19f90:	movwne	r5, #632	; 0x278
   19f94:	bl	126c4 <malloc@plt>
   19f98:	mov	r6, r0
   19f9c:	mov	r0, r7
   19fa0:	ldr	r1, [r0, r5]!
   19fa4:	adds	r1, r1, #1
   19fa8:	str	r1, [r0]
   19fac:	ldr	r1, [r0, #4]
   19fb0:	adc	r1, r1, #0
   19fb4:	cmp	r4, #124	; 0x7c
   19fb8:	str	r1, [r0, #4]
   19fbc:	bne	19fe4 <next@@Base+0x1594>
   19fc0:	ldr	r0, [r7, #648]	; 0x288
   19fc4:	ldr	r1, [r7, #652]	; 0x28c
   19fc8:	adds	r0, r0, #1
   19fcc:	adc	r1, r1, #0
   19fd0:	str	r0, [r7, #648]	; 0x288
   19fd4:	str	r1, [r7, #652]	; 0x28c
   19fd8:	b	19c34 <next@@Base+0x11e4>
   19fdc:	add	r0, r6, #56	; 0x38
   19fe0:	bl	1a030 <next@@Base+0x15e0>
   19fe4:	mov	r0, #1
   19fe8:	bl	12700 <exit@plt>
   19fec:	ldr	r0, [r7, #664]	; 0x298
   19ff0:	ldr	r1, [r7, #668]	; 0x29c
   19ff4:	adds	r0, r0, #1
   19ff8:	adc	r1, r1, #0
   19ffc:	str	r0, [r7, #664]	; 0x298
   1a000:	str	r1, [r7, #668]	; 0x29c
   1a004:	movw	r0, #61664	; 0xf0e0
   1a008:	movw	r1, #59345	; 0xe7d1
   1a00c:	movt	r0, #2
   1a010:	movt	r1, #1
   1a014:	ldr	r0, [r0]
   1a018:	bl	12724 <fprintf@plt>
   1a01c:	b	19fe4 <next@@Base+0x1594>
   1a020:	andeq	r0, r0, r1
   1a024:	andeq	r0, r0, r0
   1a028:	andeq	r0, r0, r1
   1a02c:	andeq	r0, r0, r0
   1a030:	movw	r1, #61652	; 0xf0d4
   1a034:	movt	r1, #2
   1a038:	ldr	r1, [r1]
   1a03c:	cmn	r1, #1
   1a040:	ldrne	r0, [r0, r1, lsl #2]
   1a044:	cmpne	r0, #0
   1a048:	bne	1a050 <next@@Base+0x1600>
   1a04c:	bx	lr
   1a050:	ldrd	r2, [r0]
   1a054:	adds	r2, r2, #1
   1a058:	adc	r3, r3, #0
   1a05c:	strd	r2, [r0]
   1a060:	bx	lr
   1a064:	push	{r4, r5, r6, lr}
   1a068:	sub	sp, sp, #8
   1a06c:	movw	r0, #59776	; 0xe980
   1a070:	movw	r1, #53798	; 0xd226
   1a074:	movw	r2, #28949	; 0x7115
   1a078:	movt	r0, #1
   1a07c:	movt	r1, #1
   1a080:	movt	r2, #62686	; 0xf4de
   1a084:	bl	1a18c <next@@Base+0x173c>
   1a088:	movw	r0, #59712	; 0xe940
   1a08c:	movw	r6, #59552	; 0xe8a0
   1a090:	mov	r5, #0
   1a094:	movt	r0, #1
   1a098:	movt	r6, #1
   1a09c:	add	r4, r0, #4
   1a0a0:	mov	r3, r6
   1a0a4:	ldr	r0, [r3, r5]!
   1a0a8:	ldr	r1, [r3, #16]
   1a0ac:	str	r1, [sp]
   1a0b0:	ldmib	r3, {r1, r2}
   1a0b4:	ldrb	r3, [r3, #12]
   1a0b8:	bl	1a8f0 <next@@Base+0x1ea0>
   1a0bc:	ldrd	r0, [r4, #-4]
   1a0c0:	bl	1b1a4 <next@@Base+0x2754>
   1a0c4:	add	r5, r5, #20
   1a0c8:	add	r4, r4, #8
   1a0cc:	cmp	r5, #160	; 0xa0
   1a0d0:	bne	1a0a0 <next@@Base+0x1650>
   1a0d4:	bl	1b920 <next@@Base+0x2ed0>
   1a0d8:	add	sp, sp, #8
   1a0dc:	pop	{r4, r5, r6, lr}
   1a0e0:	b	1c68c <next@@Base+0x3c3c>
   1a0e4:	push	{fp, lr}
   1a0e8:	bl	1a064 <next@@Base+0x1614>
   1a0ec:	movw	r2, #672	; 0x2a0
   1a0f0:	vmov.i32	q8, #0	; 0x00000000
   1a0f4:	movw	r0, #624	; 0x270
   1a0f8:	movt	r2, #3
   1a0fc:	movt	r0, #3
   1a100:	vst1.64	{d16-d17}, [r2 :128]
   1a104:	movw	r2, #688	; 0x2b0
   1a108:	add	r1, r0, #16
   1a10c:	movt	r2, #3
   1a110:	vst1.64	{d16-d17}, [r1 :128]
   1a114:	movw	r1, #608	; 0x260
   1a118:	vst1.64	{d16-d17}, [r2 :128]
   1a11c:	movw	r2, #704	; 0x2c0
   1a120:	movt	r1, #3
   1a124:	movt	r2, #3
   1a128:	vst1.64	{d16-d17}, [r1 :128]
   1a12c:	mov	r1, #0
   1a130:	vst1.64	{d16-d17}, [r2 :128]
   1a134:	movw	r2, #752	; 0x2f0
   1a138:	str	r1, [r0, #32]
   1a13c:	movt	r2, #3
   1a140:	vst1.64	{d16-d17}, [r2 :128]
   1a144:	mov	r2, #36	; 0x24
   1a148:	vst1.64	{d16-d17}, [r0 :128], r2
   1a14c:	mov	r2, #1008	; 0x3f0
   1a150:	str	r1, [r0]
   1a154:	movw	r0, #720	; 0x2d0
   1a158:	mov	r1, #0
   1a15c:	movt	r0, #3
   1a160:	vst1.64	{d16-d17}, [r0 :128]!
   1a164:	vst1.64	{d16-d17}, [r0 :128]
   1a168:	movw	r0, #768	; 0x300
   1a16c:	movt	r0, #3
   1a170:	bl	12754 <memset@plt>
   1a174:	pop	{fp, pc}
   1a178:	movw	r0, #41060	; 0xa064
   1a17c:	movw	r1, #41188	; 0xa0e4
   1a180:	movt	r0, #1
   1a184:	movt	r1, #1
   1a188:	b	1cb3c <__gcov_flush@@Base+0xb4>
   1a18c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a190:	add	fp, sp, #28
   1a194:	sub	sp, sp, #36	; 0x24
   1a198:	mov	r9, r1
   1a19c:	mov	r6, r0
   1a1a0:	add	r0, sp, #28
   1a1a4:	add	r1, sp, #32
   1a1a8:	mov	r8, r2
   1a1ac:	bl	1cee8 <__gcov_flush@@Base+0x460>
   1a1b0:	cmp	r0, #0
   1a1b4:	beq	1a1f8 <next@@Base+0x17a8>
   1a1b8:	mov	r4, r0
   1a1bc:	mov	r0, r6
   1a1c0:	ldr	r5, [sp, #32]
   1a1c4:	bl	1270c <strlen@plt>
   1a1c8:	add	r0, r5, r0
   1a1cc:	add	r0, r0, #2
   1a1d0:	bl	126c4 <malloc@plt>
   1a1d4:	mov	r7, r0
   1a1d8:	ldr	r0, [sp, #28]
   1a1dc:	mov	r1, r6
   1a1e0:	mov	r2, r4
   1a1e4:	str	r0, [sp]
   1a1e8:	mov	r0, r7
   1a1ec:	mov	r3, r5
   1a1f0:	bl	1cf7c <__gcov_flush@@Base+0x4f4>
   1a1f4:	b	1a204 <next@@Base+0x17b4>
   1a1f8:	mov	r0, r6
   1a1fc:	bl	1267c <strdup@plt>
   1a200:	mov	r7, r0
   1a204:	ldr	r0, [pc, #1548]	; 1a818 <next@@Base+0x1dc8>
   1a208:	ldr	r6, [pc, #1548]	; 1a81c <next@@Base+0x1dcc>
   1a20c:	mov	r1, #2
   1a210:	add	r0, pc, r0
   1a214:	add	r6, pc, r6
   1a218:	str	r7, [r0]
   1a21c:	mov	r0, r7
   1a220:	mov	r4, #0
   1a224:	strb	r4, [r6]
   1a228:	bl	126ac <open64@plt>
   1a22c:	ldr	r5, [pc, #1516]	; 1a820 <next@@Base+0x1dd0>
   1a230:	cmn	r0, #1
   1a234:	add	r5, pc, r5
   1a238:	str	r0, [r5]
   1a23c:	beq	1a24c <next@@Base+0x17fc>
   1a240:	ldr	r6, [pc, #1500]	; 1a824 <next@@Base+0x1dd4>
   1a244:	add	r6, pc, r6
   1a248:	b	1a2a8 <next@@Base+0x1858>
   1a24c:	mov	r0, #1
   1a250:	strb	r0, [r6]
   1a254:	ldr	r0, [pc, #1508]	; 1a840 <next@@Base+0x1df0>
   1a258:	mov	r1, #66	; 0x42
   1a25c:	mov	r2, #420	; 0x1a4
   1a260:	ldr	r0, [pc, r0]
   1a264:	bl	126ac <open64@plt>
   1a268:	ldr	r6, [pc, #1492]	; 1a844 <next@@Base+0x1df4>
   1a26c:	cmn	r0, #1
   1a270:	str	r0, [r5]
   1a274:	add	r6, pc, r6
   1a278:	bne	1a2a8 <next@@Base+0x1858>
   1a27c:	ldr	r0, [pc, #1476]	; 1a848 <next@@Base+0x1df8>
   1a280:	ldr	r0, [pc, r0]
   1a284:	bl	1cc50 <__gcov_flush@@Base+0x1c8>
   1a288:	ldr	r0, [pc, #1468]	; 1a84c <next@@Base+0x1dfc>
   1a28c:	mov	r1, #66	; 0x42
   1a290:	mov	r2, #420	; 0x1a4
   1a294:	ldr	r0, [pc, r0]
   1a298:	bl	126ac <open64@plt>
   1a29c:	cmn	r0, #1
   1a2a0:	str	r0, [r5]
   1a2a4:	beq	1a7d0 <next@@Base+0x1d80>
   1a2a8:	str	r9, [sp, #20]
   1a2ac:	bl	1cd1c <__gcov_flush@@Base+0x294>
   1a2b0:	ldr	r0, [pc, #1392]	; 1a828 <next@@Base+0x1dd8>
   1a2b4:	mov	r1, r6
   1a2b8:	ldr	r0, [pc, r0]
   1a2bc:	bl	125f8 <fdopen@plt>
   1a2c0:	ldr	r5, [pc, #1380]	; 1a82c <next@@Base+0x1ddc>
   1a2c4:	ldr	r9, [pc, #1380]	; 1a830 <next@@Base+0x1de0>
   1a2c8:	ldr	r1, [pc, #1380]	; 1a834 <next@@Base+0x1de4>
   1a2cc:	ldr	sl, [pc, #1380]	; 1a838 <next@@Base+0x1de8>
   1a2d0:	add	r5, pc, r5
   1a2d4:	add	r9, pc, r9
   1a2d8:	add	r1, pc, r1
   1a2dc:	add	sl, pc, sl
   1a2e0:	str	r4, [r5]
   1a2e4:	str	r4, [r5, #4]
   1a2e8:	str	r4, [r9]
   1a2ec:	str	r4, [r9, #4]
   1a2f0:	str	r0, [r1]
   1a2f4:	str	r4, [sl]
   1a2f8:	ldr	r6, [pc, #1340]	; 1a83c <next@@Base+0x1dec>
   1a2fc:	ldr	r2, [pc, #1292]	; 1a810 <next@@Base+0x1dc0>
   1a300:	str	r8, [sp, #24]
   1a304:	add	r6, pc, r6
   1a308:	ldrb	r1, [r6]
   1a30c:	mov	r6, r2
   1a310:	cmp	r1, #1
   1a314:	bne	1a33c <next@@Base+0x18ec>
   1a318:	mov	r0, #131072	; 0x20000
   1a31c:	mov	r4, #131072	; 0x20000
   1a320:	bl	126c4 <malloc@plt>
   1a324:	mov	r1, #0
   1a328:	str	r4, [r5]
   1a32c:	str	r1, [r5, #4]
   1a330:	mov	r8, r0
   1a334:	str	r0, [sl]
   1a338:	b	1a4cc <next@@Base+0x1a7c>
   1a33c:	mov	r1, #0
   1a340:	mov	r2, #2
   1a344:	mov	r8, #0
   1a348:	bl	127cc <fseek@plt>
   1a34c:	ldr	r0, [pc, #1288]	; 1a85c <next@@Base+0x1e0c>
   1a350:	ldr	r0, [pc, r0]
   1a354:	bl	12664 <ftell@plt>
   1a358:	mov	r2, r0
   1a35c:	ldr	r0, [pc, #1276]	; 1a860 <next@@Base+0x1e10>
   1a360:	asr	r3, r2, #31
   1a364:	add	r0, pc, r0
   1a368:	cmp	r2, #0
   1a36c:	strd	r2, [r0]
   1a370:	beq	1a440 <next@@Base+0x19f0>
   1a374:	ldr	r0, [pc, #1256]	; 1a864 <next@@Base+0x1e14>
   1a378:	mov	r1, r2
   1a37c:	mov	r2, #3
   1a380:	mov	r3, #1
   1a384:	ldr	r0, [pc, r0]
   1a388:	str	r8, [sp, #8]
   1a38c:	str	r8, [sp, #12]
   1a390:	str	r0, [sp]
   1a394:	mov	r0, #0
   1a398:	bl	12658 <mmap64@plt>
   1a39c:	ldr	r1, [pc, #1220]	; 1a868 <next@@Base+0x1e18>
   1a3a0:	cmn	r0, #1
   1a3a4:	add	r1, pc, r1
   1a3a8:	str	r0, [r1]
   1a3ac:	beq	1a408 <next@@Base+0x19b8>
   1a3b0:	ldr	r1, [pc, #1232]	; 1a888 <next@@Base+0x1e38>
   1a3b4:	add	r1, pc, r1
   1a3b8:	ldrb	r1, [r1]
   1a3bc:	cmp	r1, #0
   1a3c0:	beq	1a3cc <next@@Base+0x197c>
   1a3c4:	mov	r8, r0
   1a3c8:	b	1a4d8 <next@@Base+0x1a88>
   1a3cc:	ldr	ip, [r9, #4]
   1a3d0:	ldr	r5, [pc, #1236]	; 1a8ac <next@@Base+0x1e5c>
   1a3d4:	mov	r4, r0
   1a3d8:	lsr	r2, r6, #16
   1a3dc:	ldr	r5, [pc, r5]
   1a3e0:	lsr	r1, r6, #24
   1a3e4:	lsr	r3, r6, #8
   1a3e8:	strb	r6, [r4, r5]!
   1a3ec:	strb	r2, [r4, #2]
   1a3f0:	adds	r2, r5, #4
   1a3f4:	adc	ip, ip, #0
   1a3f8:	strb	r1, [r4, #3]
   1a3fc:	strb	r3, [r4, #1]
   1a400:	stm	r9, {r2, ip}
   1a404:	b	1a5a0 <next@@Base+0x1b50>
   1a408:	bl	12730 <__errno_location@plt>
   1a40c:	ldr	r1, [pc, #1112]	; 1a86c <next@@Base+0x1e1c>
   1a410:	ldr	r1, [pc, r1]
   1a414:	ldr	r0, [r0]
   1a418:	ldr	r4, [r1]
   1a41c:	ldr	r7, [pc, #1100]	; 1a870 <next@@Base+0x1e20>
   1a420:	ldr	r7, [pc, r7]
   1a424:	bl	126dc <strerror@plt>
   1a428:	ldr	r1, [pc, #1092]	; 1a874 <next@@Base+0x1e24>
   1a42c:	mov	r3, r0
   1a430:	mov	r0, r4
   1a434:	add	r1, pc, r1
   1a438:	mov	r2, r7
   1a43c:	bl	12724 <fprintf@plt>
   1a440:	str	r8, [r5]
   1a444:	str	r8, [r5, #4]
   1a448:	ldr	r0, [pc, #1064]	; 1a878 <next@@Base+0x1e28>
   1a44c:	mov	r2, #16646144	; 0xfe0000
   1a450:	orr	r2, r2, #-16777216	; 0xff000000
   1a454:	add	r0, pc, r0
   1a458:	mvn	r3, #0
   1a45c:	str	r8, [r0]
   1a460:	ldr	r1, [pc, #1044]	; 1a87c <next@@Base+0x1e2c>
   1a464:	mov	r0, #1
   1a468:	add	r1, pc, r1
   1a46c:	strb	r0, [r1]
   1a470:	ldr	r0, [r9, #4]
   1a474:	ldr	r1, [pc, #1028]	; 1a880 <next@@Base+0x1e30>
   1a478:	eor	r3, r0, r3
   1a47c:	ldr	r1, [pc, r1]
   1a480:	eor	r2, r1, r2
   1a484:	orrs	r2, r2, r3
   1a488:	beq	1a4c8 <next@@Base+0x1a78>
   1a48c:	ldr	r2, [pc, #896]	; 1a814 <next@@Base+0x1dc4>
   1a490:	adds	r1, r1, r2
   1a494:	adc	r0, r0, #0
   1a498:	mvn	r2, #0
   1a49c:	and	r7, r0, r2
   1a4a0:	mov	r0, #16646144	; 0xfe0000
   1a4a4:	orr	r0, r0, #-16777216	; 0xff000000
   1a4a8:	and	r4, r1, r0
   1a4ac:	mov	r0, r4
   1a4b0:	bl	126c4 <malloc@plt>
   1a4b4:	stm	r5, {r4, r7}
   1a4b8:	mov	r8, r0
   1a4bc:	ldr	r0, [pc, #960]	; 1a884 <next@@Base+0x1e34>
   1a4c0:	add	r0, pc, r0
   1a4c4:	str	r8, [r0]
   1a4c8:	mov	r0, r8
   1a4cc:	mov	r1, #0
   1a4d0:	mov	r2, #131072	; 0x20000
   1a4d4:	bl	12754 <memset@plt>
   1a4d8:	ldr	r0, [r9, #4]
   1a4dc:	ldr	r1, [pc, #936]	; 1a88c <next@@Base+0x1e3c>
   1a4e0:	mov	sl, r5
   1a4e4:	mov	r7, #7
   1a4e8:	orr	r7, r7, #131072	; 0x20000
   1a4ec:	ldr	r1, [pc, r1]
   1a4f0:	ldr	r4, [r5, #4]
   1a4f4:	ldr	r5, [pc, #916]	; 1a890 <next@@Base+0x1e40>
   1a4f8:	adds	r2, r1, #4
   1a4fc:	adc	r3, r0, #0
   1a500:	ldr	r5, [pc, r5]
   1a504:	subs	r2, r5, r2
   1a508:	sbcs	r2, r4, r3
   1a50c:	bcs	1a5e4 <next@@Base+0x1b94>
   1a510:	adds	r1, r1, r7
   1a514:	adc	r0, r0, #0
   1a518:	subs	r1, r1, #4
   1a51c:	sbc	r0, r0, #0
   1a520:	mvn	r2, #0
   1a524:	and	r5, r0, r2
   1a528:	mov	r0, #16646144	; 0xfe0000
   1a52c:	orr	r0, r0, #-16777216	; 0xff000000
   1a530:	and	r4, r1, r0
   1a534:	mov	r0, r8
   1a538:	mov	r1, r4
   1a53c:	bl	12694 <realloc@plt>
   1a540:	strd	r4, [sl]
   1a544:	ldr	r1, [pc, #844]	; 1a898 <next@@Base+0x1e48>
   1a548:	mov	r7, r6
   1a54c:	lsr	r2, r6, #24
   1a550:	add	r1, pc, r1
   1a554:	mov	r3, r0
   1a558:	str	r0, [r1]
   1a55c:	ldr	r6, [pc, #824]	; 1a89c <next@@Base+0x1e4c>
   1a560:	ldr	r1, [r9, #4]
   1a564:	lsr	r5, r7, #16
   1a568:	add	r6, pc, r6
   1a56c:	ldrb	r6, [r6]
   1a570:	ldr	r4, [pc, #808]	; 1a8a0 <next@@Base+0x1e50>
   1a574:	ldr	r4, [pc, r4]
   1a578:	strb	r7, [r3, r4]!
   1a57c:	strb	r2, [r3, #3]
   1a580:	lsr	r2, r7, #8
   1a584:	strb	r2, [r3, #1]
   1a588:	adds	r2, r4, #4
   1a58c:	adc	ip, r1, #0
   1a590:	cmp	r6, #1
   1a594:	strb	r5, [r3, #2]
   1a598:	stm	r9, {r2, ip}
   1a59c:	beq	1a624 <next@@Base+0x1bd4>
   1a5a0:	ldr	r4, [sp, #20]
   1a5a4:	mov	r5, r0
   1a5a8:	mov	lr, r9
   1a5ac:	ldrb	r1, [r4]
   1a5b0:	ldrb	r3, [r4, #1]
   1a5b4:	ldrb	r7, [r4, #2]
   1a5b8:	ldrb	r6, [r4, #3]
   1a5bc:	strb	r1, [r5, r2]!
   1a5c0:	adds	r4, r2, #4
   1a5c4:	adc	r1, ip, #0
   1a5c8:	strb	r6, [r5, #3]
   1a5cc:	strb	r7, [r5, #2]
   1a5d0:	strb	r3, [r5, #1]
   1a5d4:	str	r4, [lr]
   1a5d8:	str	r1, [lr, #4]
   1a5dc:	ldr	r6, [sp, #24]
   1a5e0:	b	1a7a0 <next@@Base+0x1d50>
   1a5e4:	ldr	r1, [r9, #4]
   1a5e8:	ldr	r4, [pc, #676]	; 1a894 <next@@Base+0x1e44>
   1a5ec:	mov	r5, r6
   1a5f0:	lsr	r0, r6, #24
   1a5f4:	ldr	r4, [pc, r4]
   1a5f8:	lsr	r2, r6, #16
   1a5fc:	lsr	r3, r6, #8
   1a600:	mov	r6, r8
   1a604:	strb	r5, [r6, r4]!
   1a608:	strb	r2, [r6, #2]
   1a60c:	adds	r2, r4, #4
   1a610:	adc	ip, r1, #0
   1a614:	strb	r0, [r6, #3]
   1a618:	strb	r3, [r6, #1]
   1a61c:	stm	r9, {r2, ip}
   1a620:	mov	r0, r8
   1a624:	ldr	r7, [sl, #4]
   1a628:	ldr	r3, [pc, #628]	; 1a8a4 <next@@Base+0x1e54>
   1a62c:	adds	r6, r4, #8
   1a630:	mov	r8, r9
   1a634:	adc	r5, r1, #0
   1a638:	ldr	r3, [pc, r3]
   1a63c:	mov	r9, sl
   1a640:	subs	r3, r3, r6
   1a644:	sbcs	r3, r7, r5
   1a648:	bcs	1a6ec <next@@Base+0x1c9c>
   1a64c:	mov	r2, #7
   1a650:	orr	r2, r2, #131072	; 0x20000
   1a654:	adds	r2, r4, r2
   1a658:	adc	r4, r1, #0
   1a65c:	mov	r1, #16646144	; 0xfe0000
   1a660:	orr	r1, r1, #-16777216	; 0xff000000
   1a664:	and	r6, r2, r1
   1a668:	mov	r1, r6
   1a66c:	bl	12694 <realloc@plt>
   1a670:	ldr	sl, [pc, #568]	; 1a8b0 <next@@Base+0x1e60>
   1a674:	mvn	r1, #0
   1a678:	and	r7, r4, r1
   1a67c:	add	sl, pc, sl
   1a680:	strd	r6, [r9]
   1a684:	str	r0, [sl]
   1a688:	ldr	r1, [pc, #548]	; 1a8b4 <next@@Base+0x1e64>
   1a68c:	ldr	r2, [sp, #20]
   1a690:	ldr	ip, [r8, #4]
   1a694:	add	r1, pc, r1
   1a698:	mov	lr, r8
   1a69c:	ldrb	r3, [r1]
   1a6a0:	ldrb	r1, [r2]
   1a6a4:	ldrb	r7, [r2, #1]
   1a6a8:	ldrb	r6, [r2, #2]
   1a6ac:	ldrb	r5, [r2, #3]
   1a6b0:	ldr	r2, [pc, #512]	; 1a8b8 <next@@Base+0x1e68>
   1a6b4:	ldr	r2, [pc, r2]
   1a6b8:	adds	r4, r2, #4
   1a6bc:	strb	r1, [r0, r2]
   1a6c0:	add	r1, r0, r2
   1a6c4:	strb	r5, [r1, #3]
   1a6c8:	strb	r6, [r1, #2]
   1a6cc:	strb	r7, [r1, #1]
   1a6d0:	adc	r1, ip, #0
   1a6d4:	str	r4, [lr]
   1a6d8:	str	r1, [lr, #4]
   1a6dc:	ldr	r6, [sp, #24]
   1a6e0:	cmp	r3, #1
   1a6e4:	beq	1a734 <next@@Base+0x1ce4>
   1a6e8:	b	1a7a0 <next@@Base+0x1d50>
   1a6ec:	ldr	r6, [sp, #20]
   1a6f0:	mov	r5, r0
   1a6f4:	adds	r4, r2, #4
   1a6f8:	ldrb	r1, [r6]
   1a6fc:	ldrb	r3, [r6, #1]
   1a700:	ldrb	r7, [r6, #2]
   1a704:	ldrb	r6, [r6, #3]
   1a708:	strb	r1, [r5, r2]!
   1a70c:	adc	r1, ip, #0
   1a710:	strb	r3, [r5, #1]
   1a714:	mov	r3, r8
   1a718:	strb	r6, [r5, #3]
   1a71c:	strb	r7, [r5, #2]
   1a720:	str	r4, [r3]
   1a724:	str	r1, [r3, #4]
   1a728:	ldr	r6, [sp, #24]
   1a72c:	ldr	sl, [pc, #372]	; 1a8a8 <next@@Base+0x1e58>
   1a730:	add	sl, pc, sl
   1a734:	ldr	r7, [r9, #4]
   1a738:	ldr	r5, [pc, #380]	; 1a8bc <next@@Base+0x1e6c>
   1a73c:	adds	r3, r2, #8
   1a740:	adc	lr, ip, #0
   1a744:	ldr	r5, [pc, r5]
   1a748:	subs	r3, r5, r3
   1a74c:	sbcs	r3, r7, lr
   1a750:	bcs	1a79c <next@@Base+0x1d4c>
   1a754:	mov	r1, #7
   1a758:	orr	r1, r1, #131072	; 0x20000
   1a75c:	adds	r1, r2, r1
   1a760:	adc	r2, ip, #0
   1a764:	mvn	r3, #0
   1a768:	and	r5, r2, r3
   1a76c:	mov	r2, #16646144	; 0xfe0000
   1a770:	orr	r2, r2, #-16777216	; 0xff000000
   1a774:	and	r4, r1, r2
   1a778:	mov	r1, r4
   1a77c:	bl	12694 <realloc@plt>
   1a780:	strd	r4, [r9]
   1a784:	str	r0, [sl]
   1a788:	ldr	r1, [r8, #4]
   1a78c:	ldr	r4, [pc, #300]	; 1a8c0 <next@@Base+0x1e70>
   1a790:	mov	lr, r8
   1a794:	ldr	r4, [pc, r4]
   1a798:	b	1a7a0 <next@@Base+0x1d50>
   1a79c:	mov	lr, r8
   1a7a0:	lsr	r2, r6, #24
   1a7a4:	strb	r6, [r0, r4]!
   1a7a8:	lsr	r3, r6, #16
   1a7ac:	lsr	r7, r6, #8
   1a7b0:	strb	r2, [r0, #3]
   1a7b4:	strb	r3, [r0, #2]
   1a7b8:	strb	r7, [r0, #1]
   1a7bc:	adds	r0, r4, #4
   1a7c0:	adc	r1, r1, #0
   1a7c4:	strd	r0, [lr]
   1a7c8:	sub	sp, fp, #28
   1a7cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7d0:	bl	12730 <__errno_location@plt>
   1a7d4:	ldr	r1, [pc, #116]	; 1a850 <next@@Base+0x1e00>
   1a7d8:	ldr	r1, [pc, r1]
   1a7dc:	ldr	r0, [r0]
   1a7e0:	ldr	r4, [r1]
   1a7e4:	ldr	r5, [pc, #104]	; 1a854 <next@@Base+0x1e04>
   1a7e8:	ldr	r5, [pc, r5]
   1a7ec:	bl	126dc <strerror@plt>
   1a7f0:	ldr	r1, [pc, #96]	; 1a858 <next@@Base+0x1e08>
   1a7f4:	mov	r3, r0
   1a7f8:	mov	r0, r4
   1a7fc:	add	r1, pc, r1
   1a800:	mov	r2, r5
   1a804:	bl	12724 <fprintf@plt>
   1a808:	sub	sp, fp, #28
   1a80c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a810:	strbvs	r6, [r3, -r1, ror #8]!
   1a814:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1a818:	ldrdeq	r6, [r1], -r8
   1a81c:	ldrdeq	r6, [r1], -r8
   1a820:	muleq	r1, ip, lr
   1a824:			; <UNDEFINED> instruction: 0x000047b4
   1a828:	andeq	r4, r1, r8, lsl lr
   1a82c:	andeq	r6, r1, r8, lsr #8
   1a830:	andeq	r6, r1, ip, lsr #8
   1a834:	andeq	r6, r1, r8, lsl r4
   1a838:	andeq	r6, r1, r8, lsl r4
   1a83c:	andeq	r6, r1, r8, ror #7
   1a840:	andeq	r6, r1, r8, lsl #9
   1a844:	andeq	r4, r0, r8, lsl #15
   1a848:	andeq	r6, r1, r8, ror #8
   1a84c:	andeq	r6, r1, r4, asr r4
   1a850:	ldrdeq	r4, [r1], -ip
   1a854:	andeq	r5, r1, r0, lsl #30
   1a858:	andeq	r4, r0, r4, lsl #4
   1a85c:	andeq	r6, r1, r0, lsr #7
   1a860:			; <UNDEFINED> instruction: 0x000163b4
   1a864:	andeq	r4, r1, ip, asr #26
   1a868:	andeq	r6, r1, r0, asr r3
   1a86c:	andeq	r4, r1, r4, lsr #25
   1a870:	andeq	r6, r1, r8, asr #5
   1a874:	andeq	r4, r0, r6, lsr #14
   1a878:	andeq	r6, r1, r0, lsr #5
   1a87c:	andeq	r6, r1, r4, lsl #5
   1a880:	andeq	r6, r1, r4, lsl #5
   1a884:	andeq	r6, r1, r4, lsr r2
   1a888:	andeq	r6, r1, r8, lsr r3
   1a88c:	andeq	r6, r1, r4, lsl r2
   1a890:	strdeq	r6, [r1], -r8
   1a894:	andeq	r6, r1, ip, lsl #2
   1a898:	andeq	r6, r1, r4, lsr #3
   1a89c:	andeq	r6, r1, r4, lsl #3
   1a8a0:	andeq	r6, r1, ip, lsl #3
   1a8a4:	andeq	r6, r1, r0, asr #1
   1a8a8:	andeq	r5, r1, r4, asr #31
   1a8ac:	andeq	r6, r1, r4, lsr #6
   1a8b0:	andeq	r6, r1, r8, ror r0
   1a8b4:	andeq	r6, r1, r8, asr r0
   1a8b8:	andeq	r6, r1, ip, asr #32
   1a8bc:			; <UNDEFINED> instruction: 0x00015fb4
   1a8c0:	andeq	r5, r1, ip, ror #30
   1a8c4:	ldr	r0, [r0]
   1a8c8:	cmn	r0, #1
   1a8cc:	beq	1a8ec <next@@Base+0x1e9c>
   1a8d0:	ldr	r0, [r1, r0, lsl #2]
   1a8d4:	cmp	r0, #0
   1a8d8:	bxeq	lr
   1a8dc:	ldrd	r2, [r0]
   1a8e0:	adds	r2, r2, #1
   1a8e4:	adc	r3, r3, #0
   1a8e8:	strd	r2, [r0]
   1a8ec:	bx	lr
   1a8f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8f4:	add	fp, sp, #28
   1a8f8:	sub	sp, sp, #12
   1a8fc:	mov	r9, r0
   1a900:	ldr	r0, [pc, #2000]	; 1b0d8 <next@@Base+0x2688>
   1a904:	mov	sl, #2
   1a908:	cmp	r3, #0
   1a90c:	movne	sl, #3
   1a910:	ldr	r0, [pc, r0]
   1a914:	cmp	r0, #0
   1a918:	beq	1b0d0 <next@@Base+0x2680>
   1a91c:	stm	sp, {r2, r3}
   1a920:	ldr	r0, [pc, #1972]	; 1b0dc <next@@Base+0x268c>
   1a924:	str	r1, [sp, #8]
   1a928:	add	r0, pc, r0
   1a92c:	ldrb	r0, [r0]
   1a930:	cmp	r0, #1
   1a934:	bne	1a9c4 <next@@Base+0x1f74>
   1a938:	ldr	r0, [pc, #1952]	; 1b0e0 <next@@Base+0x2690>
   1a93c:	ldr	r4, [pc, #1952]	; 1b0e4 <next@@Base+0x2694>
   1a940:	add	r0, pc, r0
   1a944:	add	r4, pc, r4
   1a948:	ldr	r0, [r0, #4]
   1a94c:	ldr	r5, [pc, #1940]	; 1b0e8 <next@@Base+0x2698>
   1a950:	ldr	r5, [pc, r5]
   1a954:	ldr	r7, [r4, #4]
   1a958:	ldr	r6, [pc, #1932]	; 1b0ec <next@@Base+0x269c>
   1a95c:	adds	r2, r5, #4
   1a960:	adc	r3, r0, #0
   1a964:	ldr	r6, [pc, r6]
   1a968:	subs	r2, r6, r2
   1a96c:	sbcs	r2, r7, r3
   1a970:	bcs	1a9c4 <next@@Base+0x1f74>
   1a974:	mov	r2, #7
   1a978:	orr	r2, r2, #131072	; 0x20000
   1a97c:	adds	r1, r5, r2
   1a980:	adc	r0, r0, #0
   1a984:	subs	r1, r1, #4
   1a988:	sbc	r0, r0, #0
   1a98c:	mvn	r2, #0
   1a990:	and	r7, r0, r2
   1a994:	mov	r0, #16646144	; 0xfe0000
   1a998:	orr	r0, r0, #-16777216	; 0xff000000
   1a99c:	ldr	r8, [pc, #1868]	; 1b0f0 <next@@Base+0x26a0>
   1a9a0:	and	r6, r1, r0
   1a9a4:	ldr	r0, [pc, #1864]	; 1b0f4 <next@@Base+0x26a4>
   1a9a8:	mov	r1, r6
   1a9ac:	add	r8, pc, r8
   1a9b0:	ldr	r0, [pc, r0]
   1a9b4:	bl	12694 <realloc@plt>
   1a9b8:	ldr	r1, [sp, #8]
   1a9bc:	strd	r6, [r4]
   1a9c0:	str	r0, [r8]
   1a9c4:	ldr	r3, [pc, #1836]	; 1b0f8 <next@@Base+0x26a8>
   1a9c8:	ldr	r7, [pc, #1836]	; 1b0fc <next@@Base+0x26ac>
   1a9cc:	mov	r0, #0
   1a9d0:	add	r3, pc, r3
   1a9d4:	mov	r2, #1
   1a9d8:	ldr	r7, [pc, r7]
   1a9dc:	ldr	r8, [pc, #1820]	; 1b100 <next@@Base+0x26b0>
   1a9e0:	adds	r4, r7, #4
   1a9e4:	ldr	r8, [pc, r8]
   1a9e8:	ldr	r6, [r3, #4]
   1a9ec:	mov	r5, r8
   1a9f0:	strb	r0, [r5, r7]!
   1a9f4:	strb	r2, [r5, #3]
   1a9f8:	strb	r0, [r5, #2]
   1a9fc:	strb	r0, [r5, #1]
   1aa00:	adc	r5, r6, #0
   1aa04:	cmp	r1, #0
   1aa08:	strd	r4, [r3]
   1aa0c:	beq	1aa20 <next@@Base+0x1fd0>
   1aa10:	mov	r0, r1
   1aa14:	bl	1270c <strlen@plt>
   1aa18:	add	r0, sl, r0, lsr #2
   1aa1c:	add	sl, r0, #2
   1aa20:	ldr	r0, [pc, #1756]	; 1b104 <next@@Base+0x26b4>
   1aa24:	add	r0, pc, r0
   1aa28:	ldrb	r0, [r0]
   1aa2c:	cmp	r0, #0
   1aa30:	beq	1ab10 <next@@Base+0x20c0>
   1aa34:	ldr	lr, [pc, #1744]	; 1b10c <next@@Base+0x26bc>
   1aa38:	adds	r0, r7, #8
   1aa3c:	adc	r1, r6, #0
   1aa40:	add	lr, pc, lr
   1aa44:	ldr	r2, [lr, #4]
   1aa48:	ldr	r3, [pc, #1728]	; 1b110 <next@@Base+0x26c0>
   1aa4c:	ldr	r3, [pc, r3]
   1aa50:	subs	r0, r3, r0
   1aa54:	sbcs	r0, r2, r1
   1aa58:	bcs	1ad60 <next@@Base+0x2310>
   1aa5c:	mov	r0, #7
   1aa60:	orr	r0, r0, #131072	; 0x20000
   1aa64:	adds	r0, r7, r0
   1aa68:	adc	r1, r6, #0
   1aa6c:	mvn	r2, #0
   1aa70:	and	r5, r1, r2
   1aa74:	mov	r1, #16646144	; 0xfe0000
   1aa78:	orr	r1, r1, #-16777216	; 0xff000000
   1aa7c:	and	r6, r0, r1
   1aa80:	ldr	r4, [pc, #1680]	; 1b118 <next@@Base+0x26c8>
   1aa84:	mov	r0, r8
   1aa88:	mov	r1, r6
   1aa8c:	add	r4, pc, r4
   1aa90:	mov	r7, lr
   1aa94:	bl	12694 <realloc@plt>
   1aa98:	mov	lr, r7
   1aa9c:	mov	r8, r0
   1aaa0:	str	r6, [lr]
   1aaa4:	str	r5, [lr, #4]
   1aaa8:	str	r8, [r4]
   1aaac:	ldr	r1, [pc, #1640]	; 1b11c <next@@Base+0x26cc>
   1aab0:	lsr	r0, sl, #24
   1aab4:	add	r1, pc, r1
   1aab8:	lsr	r3, sl, #16
   1aabc:	ldrb	r2, [r1]
   1aac0:	ldr	r1, [pc, #1624]	; 1b120 <next@@Base+0x26d0>
   1aac4:	add	r1, pc, r1
   1aac8:	mov	r7, r1
   1aacc:	ldr	r5, [r1, #4]
   1aad0:	ldr	r4, [pc, #1612]	; 1b124 <next@@Base+0x26d4>
   1aad4:	mov	r1, r8
   1aad8:	ldr	r4, [pc, r4]
   1aadc:	strb	sl, [r1, r4]!
   1aae0:	ldr	ip, [sp, #8]
   1aae4:	strb	r0, [r1, #3]
   1aae8:	lsr	r0, sl, #8
   1aaec:	strb	r0, [r1, #1]
   1aaf0:	adds	r0, r4, #4
   1aaf4:	strb	r3, [r1, #2]
   1aaf8:	adc	r1, r5, #0
   1aafc:	mov	sl, r7
   1ab00:	cmp	r2, #1
   1ab04:	strd	r0, [sl]
   1ab08:	bne	1ab48 <next@@Base+0x20f8>
   1ab0c:	b	1ad98 <next@@Base+0x2348>
   1ab10:	mov	r3, r8
   1ab14:	lsr	r0, sl, #24
   1ab18:	strb	sl, [r3, r4]!
   1ab1c:	lsr	r1, sl, #16
   1ab20:	lsr	r2, sl, #8
   1ab24:	strb	r0, [r3, #3]
   1ab28:	strb	r1, [r3, #2]
   1ab2c:	strb	r2, [r3, #1]
   1ab30:	ldr	sl, [pc, #1488]	; 1b108 <next@@Base+0x26b8>
   1ab34:	ldr	ip, [sp, #8]
   1ab38:	adds	r0, r7, #8
   1ab3c:	adc	r1, r6, #0
   1ab40:	add	sl, pc, sl
   1ab44:	strd	r0, [sl]
   1ab48:	mov	r6, r8
   1ab4c:	lsr	r2, r9, #24
   1ab50:	strb	r9, [r6, r0]!
   1ab54:	lsr	r3, r9, #16
   1ab58:	strb	r2, [r6, #3]
   1ab5c:	adds	r2, r0, #4
   1ab60:	lsr	r7, r9, #8
   1ab64:	strb	r3, [r6, #2]
   1ab68:	adc	r3, r1, #0
   1ab6c:	strb	r7, [r6, #1]
   1ab70:	strd	r2, [sl]
   1ab74:	ldr	r5, [sp]
   1ab78:	mov	r6, r8
   1ab7c:	adds	r4, r2, #4
   1ab80:	lsr	r7, r5, #8
   1ab84:	strb	r5, [r6, r2]!
   1ab88:	lsr	r0, r5, #24
   1ab8c:	lsr	r1, r5, #16
   1ab90:	strb	r7, [r6, #1]
   1ab94:	adc	r7, r3, #0
   1ab98:	strb	r0, [r6, #3]
   1ab9c:	strb	r1, [r6, #2]
   1aba0:	stm	sl, {r4, r7}
   1aba4:	ldr	r0, [sp, #4]
   1aba8:	cmp	r0, #0
   1abac:	beq	1ac84 <next@@Base+0x2234>
   1abb0:	ldr	r0, [pc, #1420]	; 1b144 <next@@Base+0x26f4>
   1abb4:	ldr	sl, [fp, #8]
   1abb8:	add	r0, pc, r0
   1abbc:	ldrb	r0, [r0]
   1abc0:	cmp	r0, #1
   1abc4:	bne	1ac50 <next@@Base+0x2200>
   1abc8:	ldr	r9, [pc, #1400]	; 1b148 <next@@Base+0x26f8>
   1abcc:	adds	r0, r2, #8
   1abd0:	adc	r1, r3, #0
   1abd4:	add	r9, pc, r9
   1abd8:	ldr	r6, [r9, #4]
   1abdc:	ldr	r5, [pc, #1384]	; 1b14c <next@@Base+0x26fc>
   1abe0:	ldr	r5, [pc, r5]
   1abe4:	subs	r0, r5, r0
   1abe8:	sbcs	r0, r6, r1
   1abec:	bcs	1ac50 <next@@Base+0x2200>
   1abf0:	mov	r0, #7
   1abf4:	orr	r0, r0, #131072	; 0x20000
   1abf8:	adds	r0, r2, r0
   1abfc:	adc	r1, r3, #0
   1ac00:	mvn	r2, #0
   1ac04:	and	r5, r1, r2
   1ac08:	mov	r1, #16646144	; 0xfe0000
   1ac0c:	orr	r1, r1, #-16777216	; 0xff000000
   1ac10:	and	r6, r0, r1
   1ac14:	ldr	r4, [pc, #1332]	; 1b150 <next@@Base+0x2700>
   1ac18:	mov	r0, r8
   1ac1c:	mov	r1, r6
   1ac20:	add	r4, pc, r4
   1ac24:	bl	12694 <realloc@plt>
   1ac28:	ldr	ip, [sp, #8]
   1ac2c:	str	r6, [r9]
   1ac30:	str	r5, [r9, #4]
   1ac34:	mov	r8, r0
   1ac38:	ldr	r0, [pc, #1300]	; 1b154 <next@@Base+0x2704>
   1ac3c:	str	r8, [r4]
   1ac40:	add	r0, pc, r0
   1ac44:	ldr	r7, [r0, #4]
   1ac48:	ldr	r4, [pc, #1288]	; 1b158 <next@@Base+0x2708>
   1ac4c:	ldr	r4, [pc, r4]
   1ac50:	mov	r3, r8
   1ac54:	lsr	r0, sl, #24
   1ac58:	strb	sl, [r3, r4]!
   1ac5c:	lsr	r1, sl, #16
   1ac60:	lsr	r2, sl, #8
   1ac64:	strb	r0, [r3, #3]
   1ac68:	strb	r1, [r3, #2]
   1ac6c:	strb	r2, [r3, #1]
   1ac70:	ldr	sl, [pc, #1252]	; 1b15c <next@@Base+0x270c>
   1ac74:	adds	r4, r4, #4
   1ac78:	adc	r7, r7, #0
   1ac7c:	add	sl, pc, sl
   1ac80:	stm	sl, {r4, r7}
   1ac84:	cmp	ip, #0
   1ac88:	beq	1b0d0 <next@@Base+0x2680>
   1ac8c:	mov	r0, ip
   1ac90:	bl	1270c <strlen@plt>
   1ac94:	mov	r9, #1
   1ac98:	add	r5, r9, r0, lsr #2
   1ac9c:	ldr	r0, [pc, #1212]	; 1b160 <next@@Base+0x2710>
   1aca0:	add	r0, pc, r0
   1aca4:	ldrb	r0, [r0]
   1aca8:	cmp	r0, #1
   1acac:	bne	1ad50 <next@@Base+0x2300>
   1acb0:	ldr	sl, [pc, #1196]	; 1b164 <next@@Base+0x2714>
   1acb4:	adds	r0, r4, #4
   1acb8:	adc	r1, r7, #0
   1acbc:	add	sl, pc, sl
   1acc0:	ldr	r2, [sl, #4]
   1acc4:	ldr	r3, [pc, #1180]	; 1b168 <next@@Base+0x2718>
   1acc8:	ldr	r3, [pc, r3]
   1accc:	subs	r0, r3, r0
   1acd0:	sbcs	r0, r2, r1
   1acd4:	bcs	1af04 <next@@Base+0x24b4>
   1acd8:	mov	r0, #0
   1acdc:	str	r0, [sp, #4]
   1ace0:	mov	r0, #7
   1ace4:	orr	r0, r0, #131072	; 0x20000
   1ace8:	adds	r0, r4, r0
   1acec:	adc	r1, r7, #0
   1acf0:	subs	r0, r0, #4
   1acf4:	sbc	r1, r1, #0
   1acf8:	mvn	r2, #0
   1acfc:	and	r7, r1, r2
   1ad00:	mov	r1, #16646144	; 0xfe0000
   1ad04:	orr	r1, r1, #-16777216	; 0xff000000
   1ad08:	and	r4, r0, r1
   1ad0c:	ldr	r6, [pc, #1116]	; 1b170 <next@@Base+0x2720>
   1ad10:	mov	r0, r8
   1ad14:	mov	r1, r4
   1ad18:	add	r6, pc, r6
   1ad1c:	bl	12694 <realloc@plt>
   1ad20:	stm	sl, {r4, r7}
   1ad24:	str	r0, [r6]
   1ad28:	ldr	sl, [pc, #1092]	; 1b174 <next@@Base+0x2724>
   1ad2c:	mov	r8, r0
   1ad30:	add	sl, pc, sl
   1ad34:	ldr	r7, [sl, #4]
   1ad38:	ldr	r0, [pc, #1080]	; 1b178 <next@@Base+0x2728>
   1ad3c:	add	r0, pc, r0
   1ad40:	ldrb	r9, [r0]
   1ad44:	ldr	r4, [pc, #1072]	; 1b17c <next@@Base+0x272c>
   1ad48:	ldr	r4, [pc, r4]
   1ad4c:	b	1af14 <next@@Base+0x24c4>
   1ad50:	mov	r0, #0
   1ad54:	str	r0, [sp, #4]
   1ad58:	mov	r9, #0
   1ad5c:	b	1af14 <next@@Base+0x24c4>
   1ad60:	mov	r3, r8
   1ad64:	lsr	r0, sl, #24
   1ad68:	strb	sl, [r3, r4]!
   1ad6c:	lsr	r1, sl, #16
   1ad70:	lsr	r2, sl, #8
   1ad74:	strb	r0, [r3, #3]
   1ad78:	strb	r1, [r3, #2]
   1ad7c:	strb	r2, [r3, #1]
   1ad80:	ldr	sl, [pc, #908]	; 1b114 <next@@Base+0x26c4>
   1ad84:	adds	r0, r7, #8
   1ad88:	adc	r1, r6, #0
   1ad8c:	add	sl, pc, sl
   1ad90:	ldr	ip, [sp, #8]
   1ad94:	strd	r0, [sl]
   1ad98:	ldr	r7, [lr, #4]
   1ad9c:	ldr	r6, [pc, #900]	; 1b128 <next@@Base+0x26d8>
   1ada0:	adds	r2, r4, #8
   1ada4:	adc	r3, r5, #0
   1ada8:	ldr	r6, [pc, r6]
   1adac:	subs	r2, r6, r2
   1adb0:	sbcs	r2, r7, r3
   1adb4:	bcs	1ae58 <next@@Base+0x2408>
   1adb8:	mov	r0, #7
   1adbc:	orr	r0, r0, #131072	; 0x20000
   1adc0:	adds	r0, r4, r0
   1adc4:	adc	r1, r5, #0
   1adc8:	mvn	r2, #0
   1adcc:	and	r5, r1, r2
   1add0:	mov	r1, #16646144	; 0xfe0000
   1add4:	orr	r1, r1, #-16777216	; 0xff000000
   1add8:	and	r4, r0, r1
   1addc:	ldr	r6, [pc, #840]	; 1b12c <next@@Base+0x26dc>
   1ade0:	mov	r0, r8
   1ade4:	mov	r1, r4
   1ade8:	add	r6, pc, r6
   1adec:	mov	r7, lr
   1adf0:	bl	12694 <realloc@plt>
   1adf4:	mov	lr, r7
   1adf8:	str	r0, [r6]
   1adfc:	strd	r4, [lr]
   1ae00:	mov	r8, r0
   1ae04:	ldr	ip, [sp, #8]
   1ae08:	ldr	r0, [pc, #800]	; 1b130 <next@@Base+0x26e0>
   1ae0c:	ldr	r1, [sl, #4]
   1ae10:	mov	r3, r8
   1ae14:	add	r0, pc, r0
   1ae18:	lsr	r2, r9, #24
   1ae1c:	ldrb	r7, [r0]
   1ae20:	ldr	r0, [pc, #780]	; 1b134 <next@@Base+0x26e4>
   1ae24:	lsr	r6, r9, #16
   1ae28:	ldr	r0, [pc, r0]
   1ae2c:	strb	r9, [r3, r0]!
   1ae30:	strb	r2, [r3, #3]
   1ae34:	lsr	r2, r9, #8
   1ae38:	strb	r2, [r3, #1]
   1ae3c:	adds	r2, r0, #4
   1ae40:	strb	r6, [r3, #2]
   1ae44:	adc	r3, r1, #0
   1ae48:	cmp	r7, #1
   1ae4c:	strd	r2, [sl]
   1ae50:	bne	1ab74 <next@@Base+0x2124>
   1ae54:	b	1ae84 <next@@Base+0x2434>
   1ae58:	mov	r6, r8
   1ae5c:	lsr	r2, r9, #24
   1ae60:	strb	r9, [r6, r0]!
   1ae64:	lsr	r3, r9, #16
   1ae68:	strb	r2, [r6, #3]
   1ae6c:	adds	r2, r0, #4
   1ae70:	lsr	r7, r9, #8
   1ae74:	strb	r3, [r6, #2]
   1ae78:	adc	r3, r1, #0
   1ae7c:	strb	r7, [r6, #1]
   1ae80:	strd	r2, [sl]
   1ae84:	ldr	r5, [lr, #4]
   1ae88:	ldr	r4, [pc, #680]	; 1b138 <next@@Base+0x26e8>
   1ae8c:	adds	r7, r0, #8
   1ae90:	adc	r6, r1, #0
   1ae94:	ldr	r4, [pc, r4]
   1ae98:	subs	r7, r4, r7
   1ae9c:	sbcs	r7, r5, r6
   1aea0:	bcs	1ab74 <next@@Base+0x2124>
   1aea4:	mov	r2, #7
   1aea8:	orr	r2, r2, #131072	; 0x20000
   1aeac:	adds	r0, r0, r2
   1aeb0:	adc	r1, r1, #0
   1aeb4:	mvn	r2, #0
   1aeb8:	and	r5, r1, r2
   1aebc:	mov	r1, #16646144	; 0xfe0000
   1aec0:	orr	r1, r1, #-16777216	; 0xff000000
   1aec4:	and	r6, r0, r1
   1aec8:	ldr	r4, [pc, #620]	; 1b13c <next@@Base+0x26ec>
   1aecc:	mov	r0, r8
   1aed0:	mov	r1, r6
   1aed4:	add	r4, pc, r4
   1aed8:	mov	r7, lr
   1aedc:	bl	12694 <realloc@plt>
   1aee0:	ldr	ip, [sp, #8]
   1aee4:	str	r6, [r7]
   1aee8:	str	r5, [r7, #4]
   1aeec:	str	r0, [r4]
   1aef0:	ldr	r3, [sl, #4]
   1aef4:	ldr	r2, [pc, #580]	; 1b140 <next@@Base+0x26f0>
   1aef8:	mov	r8, r0
   1aefc:	ldr	r2, [pc, r2]
   1af00:	b	1ab74 <next@@Base+0x2124>
   1af04:	mov	r0, #0
   1af08:	str	r0, [sp, #4]
   1af0c:	ldr	sl, [pc, #600]	; 1b16c <next@@Base+0x271c>
   1af10:	add	sl, pc, sl
   1af14:	mov	r3, r8
   1af18:	ldr	r0, [sp, #8]
   1af1c:	strb	r5, [r3, r4]!
   1af20:	adds	r4, r4, #4
   1af24:	lsr	r6, r5, #24
   1af28:	lsr	r1, r5, #16
   1af2c:	lsr	r2, r5, #8
   1af30:	adc	r5, r7, #0
   1af34:	strb	r6, [r3, #3]
   1af38:	strb	r1, [r3, #2]
   1af3c:	strb	r2, [r3, #1]
   1af40:	strd	r4, [sl]
   1af44:	bl	1270c <strlen@plt>
   1af48:	mov	r7, r0
   1af4c:	cmp	r9, #0
   1af50:	beq	1aff0 <next@@Base+0x25a0>
   1af54:	ldr	r6, [pc, #548]	; 1b180 <next@@Base+0x2730>
   1af58:	adds	r0, r4, r7
   1af5c:	adc	r1, r5, #0
   1af60:	add	r6, pc, r6
   1af64:	ldr	r2, [r6, #4]
   1af68:	ldr	r3, [pc, #532]	; 1b184 <next@@Base+0x2734>
   1af6c:	ldr	r3, [pc, r3]
   1af70:	subs	r3, r3, r0
   1af74:	sbcs	r2, r2, r1
   1af78:	bcs	1afe8 <next@@Base+0x2598>
   1af7c:	mov	r2, #7
   1af80:	orr	r2, r2, #131072	; 0x20000
   1af84:	adds	r0, r0, r2
   1af88:	adc	r1, r1, #0
   1af8c:	subs	r0, r0, #8
   1af90:	sbc	r1, r1, #0
   1af94:	mvn	r2, #0
   1af98:	and	r5, r1, r2
   1af9c:	mov	r1, #16646144	; 0xfe0000
   1afa0:	orr	r1, r1, #-16777216	; 0xff000000
   1afa4:	and	r4, r0, r1
   1afa8:	ldr	r9, [pc, #472]	; 1b188 <next@@Base+0x2738>
   1afac:	mov	r0, r8
   1afb0:	mov	r1, r4
   1afb4:	add	r9, pc, r9
   1afb8:	bl	12694 <realloc@plt>
   1afbc:	strd	r4, [r6]
   1afc0:	str	r0, [r9]
   1afc4:	mov	r8, r0
   1afc8:	ldr	r5, [sl, #4]
   1afcc:	ldr	r0, [pc, #440]	; 1b18c <next@@Base+0x273c>
   1afd0:	add	r0, pc, r0
   1afd4:	ldrb	r0, [r0]
   1afd8:	str	r0, [sp, #4]
   1afdc:	ldr	r4, [pc, #428]	; 1b190 <next@@Base+0x2740>
   1afe0:	ldr	r4, [pc, r4]
   1afe4:	b	1aff0 <next@@Base+0x25a0>
   1afe8:	mov	r0, #1
   1afec:	str	r0, [sp, #4]
   1aff0:	ldr	r9, [sp, #8]
   1aff4:	add	r0, r8, r4
   1aff8:	mov	r2, r7
   1affc:	mov	r1, r9
   1b000:	bl	1264c <memcpy@plt>
   1b004:	adds	r6, r4, r7
   1b008:	mov	r0, r9
   1b00c:	adc	r5, r5, #0
   1b010:	str	r6, [sl]
   1b014:	str	r5, [sl, #4]
   1b018:	bl	1270c <strlen@plt>
   1b01c:	and	r0, r0, #3
   1b020:	rsb	r4, r0, #4
   1b024:	ldr	r0, [sp, #4]
   1b028:	cmp	r0, #0
   1b02c:	beq	1b0b4 <next@@Base+0x2664>
   1b030:	ldr	r7, [pc, #348]	; 1b194 <next@@Base+0x2744>
   1b034:	adds	r0, r6, r4
   1b038:	adc	r1, r5, #0
   1b03c:	add	r7, pc, r7
   1b040:	ldr	r2, [r7, #4]
   1b044:	ldr	r3, [pc, #332]	; 1b198 <next@@Base+0x2748>
   1b048:	ldr	r3, [pc, r3]
   1b04c:	subs	r3, r3, r0
   1b050:	sbcs	r2, r2, r1
   1b054:	bcs	1b0b4 <next@@Base+0x2664>
   1b058:	mov	r2, #7
   1b05c:	orr	r2, r2, #131072	; 0x20000
   1b060:	adds	r0, r0, r2
   1b064:	adc	r1, r1, #0
   1b068:	subs	r0, r0, #8
   1b06c:	sbc	r1, r1, #0
   1b070:	mvn	r2, #0
   1b074:	and	r5, r1, r2
   1b078:	mov	r1, #16646144	; 0xfe0000
   1b07c:	orr	r1, r1, #-16777216	; 0xff000000
   1b080:	and	r6, r0, r1
   1b084:	ldr	r9, [pc, #272]	; 1b19c <next@@Base+0x274c>
   1b088:	mov	r0, r8
   1b08c:	mov	r1, r6
   1b090:	add	r9, pc, r9
   1b094:	bl	12694 <realloc@plt>
   1b098:	str	r6, [r7]
   1b09c:	str	r5, [r7, #4]
   1b0a0:	str	r0, [r9]
   1b0a4:	ldr	r5, [sl, #4]
   1b0a8:	ldr	r6, [pc, #240]	; 1b1a0 <next@@Base+0x2750>
   1b0ac:	mov	r8, r0
   1b0b0:	ldr	r6, [pc, r6]
   1b0b4:	add	r0, r8, r6
   1b0b8:	mov	r1, #0
   1b0bc:	mov	r2, r4
   1b0c0:	bl	12754 <memset@plt>
   1b0c4:	adds	r0, r6, r4
   1b0c8:	adc	r1, r5, #0
   1b0cc:	strd	r0, [sl]
   1b0d0:	sub	sp, fp, #28
   1b0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0d8:	andeq	r5, r1, r0, ror #27
   1b0dc:	andeq	r5, r1, r4, asr #27
   1b0e0:	andeq	r5, r1, r0, asr #27
   1b0e4:			; <UNDEFINED> instruction: 0x00015db4
   1b0e8:			; <UNDEFINED> instruction: 0x00015db0
   1b0ec:	muleq	r1, r4, sp
   1b0f0:	andeq	r5, r1, r8, asr #26
   1b0f4:	andeq	r5, r1, r4, asr #26
   1b0f8:	andeq	r5, r1, r0, lsr sp
   1b0fc:	andeq	r5, r1, r8, lsr #26
   1b100:	andeq	r5, r1, r0, lsl sp
   1b104:	andeq	r5, r1, r8, asr #25
   1b108:	andeq	r5, r1, r0, asr #23
   1b10c:			; <UNDEFINED> instruction: 0x00015cb8
   1b110:	andeq	r5, r1, ip, lsr #25
   1b114:	andeq	r5, r1, r4, ror r9
   1b118:	andeq	r5, r1, r8, ror #24
   1b11c:	andeq	r5, r1, r8, lsr ip
   1b120:	andeq	r5, r1, ip, lsr ip
   1b124:	andeq	r5, r1, r8, lsr #24
   1b128:	andeq	r5, r1, r0, asr r9
   1b12c:	andeq	r5, r1, ip, lsl #18
   1b130:	ldrdeq	r5, [r1], -r8
   1b134:	ldrdeq	r5, [r1], -r8
   1b138:	andeq	r5, r1, r4, ror #16
   1b13c:	andeq	r5, r1, r0, lsr #16
   1b140:	andeq	r5, r1, r4, lsl #16
   1b144:	andeq	r5, r1, r4, lsr fp
   1b148:	andeq	r5, r1, r4, lsr #22
   1b14c:	andeq	r5, r1, r8, lsl fp
   1b150:	ldrdeq	r5, [r1], -r4
   1b154:	andeq	r5, r1, r0, asr #21
   1b158:			; <UNDEFINED> instruction: 0x00015ab4
   1b15c:	andeq	r5, r1, r4, lsl #21
   1b160:	andeq	r5, r1, ip, asr #20
   1b164:	andeq	r5, r1, ip, lsr sl
   1b168:	andeq	r5, r1, r0, lsr sl
   1b16c:	strdeq	r5, [r1], -r0
   1b170:	ldrdeq	r5, [r1], -ip
   1b174:	ldrdeq	r5, [r1], -r0
   1b178:			; <UNDEFINED> instruction: 0x000159b0
   1b17c:			; <UNDEFINED> instruction: 0x000159b8
   1b180:	muleq	r1, r8, r7
   1b184:	andeq	r5, r1, ip, lsl #15
   1b188:	andeq	r5, r1, r0, asr #14
   1b18c:	andeq	r5, r1, ip, lsl r7
   1b190:	andeq	r5, r1, r0, lsr #14
   1b194:			; <UNDEFINED> instruction: 0x000156bc
   1b198:			; <UNDEFINED> instruction: 0x000156b0
   1b19c:	andeq	r5, r1, r4, ror #12
   1b1a0:	andeq	r5, r1, r0, asr r6
   1b1a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1a8:	add	fp, sp, #28
   1b1ac:	sub	sp, sp, #28
   1b1b0:	mov	ip, r0
   1b1b4:	ldr	r0, [pc, #1728]	; 1b87c <next@@Base+0x2e2c>
   1b1b8:	ldr	r0, [pc, r0]
   1b1bc:	cmp	r0, #0
   1b1c0:	beq	1b2dc <next@@Base+0x288c>
   1b1c4:	ldr	r2, [pc, #1716]	; 1b880 <next@@Base+0x2e30>
   1b1c8:	mov	sl, r1
   1b1cc:	add	r2, pc, r2
   1b1d0:	ldr	r3, [r2, #4]
   1b1d4:	ldr	r4, [pc, #1704]	; 1b884 <next@@Base+0x2e34>
   1b1d8:	ldr	r4, [pc, r4]
   1b1dc:	ldr	r6, [pc, #1700]	; 1b888 <next@@Base+0x2e38>
   1b1e0:	add	r6, pc, r6
   1b1e4:	ldrb	r0, [r6]
   1b1e8:	cmp	r0, #0
   1b1ec:	beq	1b2e4 <next@@Base+0x2894>
   1b1f0:	ldr	r8, [pc, #1720]	; 1b8b0 <next@@Base+0x2e60>
   1b1f4:	mov	r5, #10551296	; 0xa10000
   1b1f8:	adds	r9, r4, #4
   1b1fc:	add	r8, pc, r8
   1b200:	adc	r2, r3, #0
   1b204:	ldr	r0, [r8, #4]
   1b208:	ldr	r1, [pc, #1700]	; 1b8b4 <next@@Base+0x2e64>
   1b20c:	orr	r5, r5, #16777216	; 0x1000000
   1b210:	ldr	r1, [pc, r1]
   1b214:	subs	r1, r1, r9
   1b218:	sbcs	r0, r0, r2
   1b21c:	bcs	1b3f4 <next@@Base+0x29a4>
   1b220:	mov	r0, #3
   1b224:	orr	r0, r0, #131072	; 0x20000
   1b228:	adds	r0, r4, r0
   1b22c:	adc	r1, r3, #0
   1b230:	mvn	r2, #0
   1b234:	and	r9, r1, r2
   1b238:	mov	r1, #16646144	; 0xfe0000
   1b23c:	orr	r1, r1, #-16777216	; 0xff000000
   1b240:	and	r4, r0, r1
   1b244:	ldr	r0, [pc, #1652]	; 1b8c0 <next@@Base+0x2e70>
   1b248:	mov	r1, r4
   1b24c:	mov	r7, ip
   1b250:	ldr	r0, [pc, r0]
   1b254:	bl	12694 <realloc@plt>
   1b258:	ldr	ip, [pc, #1636]	; 1b8c4 <next@@Base+0x2e74>
   1b25c:	ldr	lr, [pc, #1636]	; 1b8c8 <next@@Base+0x2e78>
   1b260:	stm	r8, {r4, r9}
   1b264:	ldr	r1, [pc, #1632]	; 1b8cc <next@@Base+0x2e7c>
   1b268:	add	ip, pc, ip
   1b26c:	add	lr, pc, lr
   1b270:	add	r1, pc, r1
   1b274:	mov	r2, r0
   1b278:	str	r2, [r1]
   1b27c:	mov	r6, ip
   1b280:	ldrb	ip, [ip]
   1b284:	ldr	r3, [lr, #4]
   1b288:	ldr	r4, [pc, #1600]	; 1b8d0 <next@@Base+0x2e80>
   1b28c:	lsr	r0, r5, #24
   1b290:	mov	r1, r8
   1b294:	ldr	r4, [pc, r4]
   1b298:	str	r2, [sp, #20]
   1b29c:	lsl	r8, r7, #1
   1b2a0:	strb	r5, [r2, r4]!
   1b2a4:	adds	r9, r4, #4
   1b2a8:	strb	r0, [r2, #3]
   1b2ac:	lsr	r0, r5, #16
   1b2b0:	strb	r0, [r2, #2]
   1b2b4:	lsr	r0, r5, #8
   1b2b8:	strb	r0, [r2, #1]
   1b2bc:	adc	r5, r3, #0
   1b2c0:	mov	r0, #0
   1b2c4:	cmp	ip, #1
   1b2c8:	str	r3, [sp, #16]
   1b2cc:	str	r9, [lr]
   1b2d0:	str	r5, [lr, #4]
   1b2d4:	beq	1b448 <next@@Base+0x29f8>
   1b2d8:	b	1b598 <next@@Base+0x2b48>
   1b2dc:	sub	sp, fp, #28
   1b2e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2e4:	ldr	r0, [pc, #1440]	; 1b88c <next@@Base+0x2e3c>
   1b2e8:	mov	r7, r3
   1b2ec:	adds	r9, r4, #4
   1b2f0:	mov	lr, r2
   1b2f4:	ldr	r0, [pc, r0]
   1b2f8:	str	r0, [sp, #20]
   1b2fc:	ldrb	r1, [r0, r4]!
   1b300:	str	r7, [sp, #16]
   1b304:	ldrb	r5, [r0, #1]
   1b308:	ldrb	r3, [r0, #2]
   1b30c:	ldrb	r0, [r0, #3]
   1b310:	orr	r1, r1, r5, lsl #8
   1b314:	orr	r1, r1, r3, lsl #16
   1b318:	orr	r3, r1, r0, lsl #24
   1b31c:	adc	r5, r7, #0
   1b320:	mov	r7, #0
   1b324:	cmn	r3, #1
   1b328:	str	r9, [r2]
   1b32c:	str	r5, [r2, #4]
   1b330:	beq	1b4f4 <next@@Base+0x2aa4>
   1b334:	mov	r0, #10551296	; 0xa10000
   1b338:	orr	r0, r0, #16777216	; 0x1000000
   1b33c:	cmp	r3, r0
   1b340:	bne	1b500 <next@@Base+0x2ab0>
   1b344:	str	r5, [sp, #8]
   1b348:	ldr	r0, [sp, #20]
   1b34c:	str	r4, [sp, #4]
   1b350:	adds	r5, r4, #8
   1b354:	ldr	r3, [r0, r9]
   1b358:	ldr	r0, [sp, #16]
   1b35c:	mov	r1, r9
   1b360:	adc	r9, r0, #0
   1b364:	cmn	r3, #1
   1b368:	stm	lr, {r5, r9}
   1b36c:	beq	1b50c <next@@Base+0x2abc>
   1b370:	lsr	r0, r3, #1
   1b374:	mov	r7, ip
   1b378:	cmp	r0, ip
   1b37c:	bne	1b50c <next@@Base+0x2abc>
   1b380:	lsl	r0, r7, #3
   1b384:	mov	r4, r1
   1b388:	bl	126c4 <malloc@plt>
   1b38c:	mov	r1, r0
   1b390:	cmp	r7, #0
   1b394:	beq	1b534 <next@@Base+0x2ae4>
   1b398:	mov	r0, r7
   1b39c:	str	r7, [sp, #24]
   1b3a0:	str	r1, [sp, #12]
   1b3a4:	ldr	r2, [sp, #20]
   1b3a8:	ldr	r3, [r2, r5]!
   1b3ac:	adds	r5, r5, #8
   1b3b0:	ldr	r2, [r2, #4]
   1b3b4:	str	r3, [r1]
   1b3b8:	adc	r9, r9, #0
   1b3bc:	str	r2, [r1, #4]
   1b3c0:	subs	r0, r0, #1
   1b3c4:	add	r1, r1, #8
   1b3c8:	bne	1b3a4 <next@@Base+0x2954>
   1b3cc:	ldr	lr, [pc, #1236]	; 1b8a8 <next@@Base+0x2e58>
   1b3d0:	add	lr, pc, lr
   1b3d4:	mov	r0, lr
   1b3d8:	stm	r0, {r5, r9}
   1b3dc:	ldr	ip, [pc, #1224]	; 1b8ac <next@@Base+0x2e5c>
   1b3e0:	ldr	r0, [sp, #12]
   1b3e4:	add	ip, pc, ip
   1b3e8:	mov	r6, ip
   1b3ec:	ldr	ip, [sp, #24]
   1b3f0:	b	1b550 <next@@Base+0x2b00>
   1b3f4:	str	r3, [sp, #16]
   1b3f8:	ldr	r3, [pc, #1208]	; 1b8b8 <next@@Base+0x2e68>
   1b3fc:	mov	lr, r5
   1b400:	mov	r7, ip
   1b404:	lsr	ip, r5, #16
   1b408:	ldr	r3, [pc, r3]
   1b40c:	lsr	r1, r5, #8
   1b410:	str	r3, [sp, #20]
   1b414:	strb	lr, [r3, r4]!
   1b418:	lsr	r0, lr, #24
   1b41c:	strb	r1, [r3, #1]
   1b420:	strb	r0, [r3, #3]
   1b424:	strb	ip, [r3, #2]
   1b428:	ldr	lr, [pc, #1164]	; 1b8bc <next@@Base+0x2e6c>
   1b42c:	lsl	r5, r7, #1
   1b430:	add	lr, pc, lr
   1b434:	mov	r1, r8
   1b438:	mov	r8, r5
   1b43c:	str	r9, [lr]
   1b440:	str	r2, [lr, #4]
   1b444:	mov	r5, r2
   1b448:	str	r8, [sp, #24]
   1b44c:	mov	r8, r1
   1b450:	ldr	r0, [sp, #16]
   1b454:	ldr	r2, [r8, #4]
   1b458:	ldr	r3, [pc, #1140]	; 1b8d4 <next@@Base+0x2e84>
   1b45c:	adds	ip, r4, #8
   1b460:	adc	r1, r0, #0
   1b464:	mov	r0, #0
   1b468:	ldr	r3, [pc, r3]
   1b46c:	subs	r3, r3, ip
   1b470:	sbcs	r1, r2, r1
   1b474:	bcs	1b4ec <next@@Base+0x2a9c>
   1b478:	ldr	r5, [pc, #1112]	; 1b8d8 <next@@Base+0x2e88>
   1b47c:	mov	r0, #3
   1b480:	ldr	r1, [sp, #16]
   1b484:	orr	r0, r0, #131072	; 0x20000
   1b488:	adds	r0, r4, r0
   1b48c:	adc	r1, r1, #0
   1b490:	adds	r0, r0, #4
   1b494:	adc	r1, r1, #0
   1b498:	mvn	r2, #0
   1b49c:	and	r9, r1, r2
   1b4a0:	mov	r1, #16646144	; 0xfe0000
   1b4a4:	orr	r1, r1, #-16777216	; 0xff000000
   1b4a8:	and	r4, r0, r1
   1b4ac:	ldr	r0, [sp, #20]
   1b4b0:	mov	r1, r4
   1b4b4:	add	r5, pc, r5
   1b4b8:	bl	12694 <realloc@plt>
   1b4bc:	ldr	ip, [pc, #1048]	; 1b8dc <next@@Base+0x2e8c>
   1b4c0:	ldr	lr, [pc, #1048]	; 1b8e0 <next@@Base+0x2e90>
   1b4c4:	stm	r8, {r4, r9}
   1b4c8:	add	lr, pc, lr
   1b4cc:	str	r0, [r5]
   1b4d0:	str	r0, [sp, #20]
   1b4d4:	ldr	r5, [lr, #4]
   1b4d8:	ldr	r9, [pc, #1028]	; 1b8e4 <next@@Base+0x2e94>
   1b4dc:	add	ip, pc, ip
   1b4e0:	mov	r6, ip
   1b4e4:	mov	r0, #0
   1b4e8:	ldr	r9, [pc, r9]
   1b4ec:	ldr	r8, [sp, #24]
   1b4f0:	b	1b598 <next@@Base+0x2b48>
   1b4f4:	ldr	r1, [sp, #16]
   1b4f8:	mov	r0, #0
   1b4fc:	b	1b564 <next@@Base+0x2b14>
   1b500:	ldr	r1, [pc, #904]	; 1b890 <next@@Base+0x2e40>
   1b504:	add	r1, pc, r1
   1b508:	b	1b514 <next@@Base+0x2ac4>
   1b50c:	ldr	r1, [pc, #904]	; 1b89c <next@@Base+0x2e4c>
   1b510:	add	r1, pc, r1
   1b514:	ldr	r0, [pc, #888]	; 1b894 <next@@Base+0x2e44>
   1b518:	ldr	r0, [pc, r0]
   1b51c:	ldr	r0, [r0]
   1b520:	ldr	r2, [pc, #880]	; 1b898 <next@@Base+0x2e48>
   1b524:	ldr	r2, [pc, r2]
   1b528:	sub	sp, fp, #28
   1b52c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b530:	b	12724 <fprintf@plt>
   1b534:	ldr	lr, [pc, #868]	; 1b8a0 <next@@Base+0x2e50>
   1b538:	ldr	ip, [pc, #868]	; 1b8a4 <next@@Base+0x2e54>
   1b53c:	mov	r0, r1
   1b540:	add	lr, pc, lr
   1b544:	add	ip, pc, ip
   1b548:	mov	r6, ip
   1b54c:	mov	ip, r7
   1b550:	mov	r9, r4
   1b554:	ldr	r5, [sp, #8]
   1b558:	ldr	r4, [sp, #4]
   1b55c:	ldr	r1, [sp, #16]
   1b560:	mov	r7, #0
   1b564:	str	r4, [lr]
   1b568:	str	r1, [lr, #4]
   1b56c:	ldr	r2, [sp, #20]
   1b570:	mov	r1, #1
   1b574:	lsl	r8, ip, #1
   1b578:	strb	r7, [r2, r4]!
   1b57c:	strb	r1, [r2, #3]
   1b580:	mov	r1, #161	; 0xa1
   1b584:	strb	r7, [r2, #1]
   1b588:	strb	r1, [r2, #2]
   1b58c:	str	r9, [lr]
   1b590:	str	r5, [lr, #4]
   1b594:	mov	r7, ip
   1b598:	ldr	r3, [sp, #20]
   1b59c:	lsr	r1, r8, #16
   1b5a0:	mov	ip, r3
   1b5a4:	strb	r8, [r3, r9]!
   1b5a8:	lsr	r4, r8, #24
   1b5ac:	lsr	r2, r8, #8
   1b5b0:	adds	r8, r9, #4
   1b5b4:	strb	r1, [r3, #2]
   1b5b8:	adc	r1, r5, #0
   1b5bc:	cmp	r7, #0
   1b5c0:	strb	r4, [r3, #3]
   1b5c4:	strb	r2, [r3, #1]
   1b5c8:	str	r8, [lr]
   1b5cc:	str	r1, [lr, #4]
   1b5d0:	str	r7, [sp, #24]
   1b5d4:	beq	1b870 <next@@Base+0x2e20>
   1b5d8:	ldr	r7, [pc, #776]	; 1b8e8 <next@@Base+0x2e98>
   1b5dc:	mov	r4, lr
   1b5e0:	mov	r2, r0
   1b5e4:	add	r7, pc, r7
   1b5e8:	str	r0, [sp, #12]
   1b5ec:	cmp	r0, #0
   1b5f0:	mov	r0, r4
   1b5f4:	str	r2, [sp, #16]
   1b5f8:	beq	1b604 <next@@Base+0x2bb4>
   1b5fc:	ldrd	r2, [r2]
   1b600:	b	1b60c <next@@Base+0x2bbc>
   1b604:	mov	r2, #0
   1b608:	mov	r3, #0
   1b60c:	ldrd	r4, [sl]
   1b610:	adds	r4, r4, r2
   1b614:	adc	r5, r5, r3
   1b618:	strd	r4, [sl]
   1b61c:	ldrb	r2, [r6]
   1b620:	str	sl, [sp, #20]
   1b624:	cmp	r2, #0
   1b628:	beq	1b6f4 <next@@Base+0x2ca4>
   1b62c:	ldr	r3, [r7, #4]
   1b630:	ldr	r6, [pc, #692]	; 1b8ec <next@@Base+0x2e9c>
   1b634:	adds	r2, r8, #4
   1b638:	adc	r9, r1, #0
   1b63c:	ldr	r6, [pc, r6]
   1b640:	subs	r2, r6, r2
   1b644:	sbcs	r2, r3, r9
   1b648:	bcs	1b730 <next@@Base+0x2ce0>
   1b64c:	mov	r2, #3
   1b650:	orr	r2, r2, #131072	; 0x20000
   1b654:	adds	r0, r8, r2
   1b658:	adc	r1, r1, #0
   1b65c:	mvn	r2, #0
   1b660:	and	r8, r1, r2
   1b664:	mov	r1, #16646144	; 0xfe0000
   1b668:	orr	r1, r1, #-16777216	; 0xff000000
   1b66c:	and	r6, r0, r1
   1b670:	mov	r0, ip
   1b674:	mov	r1, r6
   1b678:	bl	12694 <realloc@plt>
   1b67c:	ldr	ip, [pc, #620]	; 1b8f0 <next@@Base+0x2ea0>
   1b680:	ldr	lr, [pc, #620]	; 1b8f4 <next@@Base+0x2ea4>
   1b684:	stm	r7, {r6, r8}
   1b688:	mov	r3, r0
   1b68c:	ldr	r0, [pc, #612]	; 1b8f8 <next@@Base+0x2ea8>
   1b690:	add	lr, pc, lr
   1b694:	mov	r9, lr
   1b698:	add	r0, pc, r0
   1b69c:	add	ip, pc, ip
   1b6a0:	str	r3, [r0]
   1b6a4:	mov	lr, ip
   1b6a8:	ldrb	ip, [ip]
   1b6ac:	ldr	r1, [r9, #4]
   1b6b0:	ldr	r8, [pc, #580]	; 1b8fc <next@@Base+0x2eac>
   1b6b4:	mov	r7, r3
   1b6b8:	lsr	r2, r4, #24
   1b6bc:	ldr	r8, [pc, r8]
   1b6c0:	lsr	r6, r4, #16
   1b6c4:	strb	r4, [r7, r8]!
   1b6c8:	strb	r2, [r7, #3]
   1b6cc:	lsr	r2, r4, #8
   1b6d0:	strb	r2, [r7, #1]
   1b6d4:	adds	r2, r8, #4
   1b6d8:	mov	r4, r9
   1b6dc:	adc	r9, r1, #0
   1b6e0:	cmp	ip, #1
   1b6e4:	strb	r6, [r7, #2]
   1b6e8:	stm	r4, {r2, r9}
   1b6ec:	beq	1b764 <next@@Base+0x2d14>
   1b6f0:	b	1b810 <next@@Base+0x2dc0>
   1b6f4:	mov	r7, ip
   1b6f8:	lsr	r2, r4, #24
   1b6fc:	strb	r4, [r7, r8]!
   1b700:	lsr	r9, r4, #16
   1b704:	strb	r2, [r7, #3]
   1b708:	adds	r2, r8, #4
   1b70c:	mov	lr, r6
   1b710:	lsr	r6, r4, #8
   1b714:	strb	r9, [r7, #2]
   1b718:	adc	r9, r1, #0
   1b71c:	mov	r4, r0
   1b720:	strb	r6, [r7, #1]
   1b724:	mov	r3, ip
   1b728:	stm	r4, {r2, r9}
   1b72c:	b	1b810 <next@@Base+0x2dc0>
   1b730:	mov	r6, ip
   1b734:	lsr	r2, r4, #24
   1b738:	strb	r4, [r6, r8]!
   1b73c:	lsr	r9, r4, #16
   1b740:	strb	r2, [r6, #3]
   1b744:	adds	r2, r8, #4
   1b748:	lsr	r7, r4, #8
   1b74c:	strb	r9, [r6, #2]
   1b750:	adc	r9, r1, #0
   1b754:	mov	r4, r0
   1b758:	strb	r7, [r6, #1]
   1b75c:	mov	r3, ip
   1b760:	stm	r4, {r2, r9}
   1b764:	ldr	lr, [pc, #404]	; 1b900 <next@@Base+0x2eb0>
   1b768:	mov	r0, r4
   1b76c:	adds	r7, r8, #8
   1b770:	add	lr, pc, lr
   1b774:	adc	ip, r1, #0
   1b778:	ldr	r4, [lr, #4]
   1b77c:	ldr	r6, [pc, #384]	; 1b904 <next@@Base+0x2eb4>
   1b780:	ldr	r6, [pc, r6]
   1b784:	subs	r7, r6, r7
   1b788:	sbcs	r7, r4, ip
   1b78c:	bcs	1b804 <next@@Base+0x2db4>
   1b790:	mov	r2, #3
   1b794:	orr	r2, r2, #131072	; 0x20000
   1b798:	adds	r0, r8, r2
   1b79c:	adc	r1, r1, #0
   1b7a0:	adds	r0, r0, #4
   1b7a4:	adc	r1, r1, #0
   1b7a8:	mvn	r2, #0
   1b7ac:	and	r7, r1, r2
   1b7b0:	mov	r1, #16646144	; 0xfe0000
   1b7b4:	orr	r1, r1, #-16777216	; 0xff000000
   1b7b8:	and	r6, r0, r1
   1b7bc:	mov	r0, r3
   1b7c0:	mov	r1, r6
   1b7c4:	mov	r8, lr
   1b7c8:	bl	12694 <realloc@plt>
   1b7cc:	ldr	lr, [pc, #312]	; 1b90c <next@@Base+0x2ebc>
   1b7d0:	strd	r6, [r8]
   1b7d4:	mov	r3, r0
   1b7d8:	add	lr, pc, lr
   1b7dc:	mov	r4, lr
   1b7e0:	ldr	r9, [lr, #4]
   1b7e4:	ldr	r0, [pc, #292]	; 1b910 <next@@Base+0x2ec0>
   1b7e8:	add	r0, pc, r0
   1b7ec:	str	r3, [r0]
   1b7f0:	ldr	r2, [pc, #284]	; 1b914 <next@@Base+0x2ec4>
   1b7f4:	ldr	r2, [pc, r2]
   1b7f8:	ldr	lr, [pc, #280]	; 1b918 <next@@Base+0x2ec8>
   1b7fc:	add	lr, pc, lr
   1b800:	b	1b810 <next@@Base+0x2dc0>
   1b804:	ldr	lr, [pc, #252]	; 1b908 <next@@Base+0x2eb8>
   1b808:	mov	r4, r0
   1b80c:	add	lr, pc, lr
   1b810:	mov	ip, r3
   1b814:	lsr	r1, r5, #16
   1b818:	strb	r5, [r3, r2]!
   1b81c:	lsr	r0, r5, #24
   1b820:	lsr	r7, r5, #8
   1b824:	adds	r8, r2, #4
   1b828:	strb	r1, [r3, #2]
   1b82c:	adc	r1, r9, #0
   1b830:	strb	r0, [r3, #3]
   1b834:	strb	r7, [r3, #1]
   1b838:	str	r8, [r4]
   1b83c:	str	r1, [r4, #4]
   1b840:	ldr	r0, [sp, #24]
   1b844:	mov	r6, lr
   1b848:	subs	r0, r0, #1
   1b84c:	str	r0, [sp, #24]
   1b850:	ldr	sl, [sp, #20]
   1b854:	ldr	r2, [sp, #16]
   1b858:	ldr	r0, [sp, #12]
   1b85c:	ldr	r7, [pc, #184]	; 1b91c <next@@Base+0x2ecc>
   1b860:	add	sl, sl, #8
   1b864:	add	r2, r2, #8
   1b868:	add	r7, pc, r7
   1b86c:	bne	1b5ec <next@@Base+0x2b9c>
   1b870:	sub	sp, fp, #28
   1b874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b878:	b	12634 <free@plt>
   1b87c:	andeq	r5, r1, r8, lsr r5
   1b880:	andeq	r5, r1, r4, lsr r5
   1b884:	andeq	r5, r1, r8, lsr #10
   1b888:	andeq	r5, r1, ip, lsl #10
   1b88c:	andeq	r5, r1, r0, lsl #8
   1b890:	andeq	r3, r0, ip, lsl r5
   1b894:	muleq	r1, ip, fp
   1b898:	andeq	r5, r1, r4, asr #3
   1b89c:	andeq	r3, r0, sl, asr r5
   1b8a0:	andeq	r5, r1, r0, asr #3
   1b8a4:	andeq	r5, r1, r8, lsr #3
   1b8a8:	andeq	r5, r1, r0, lsr r3
   1b8ac:	andeq	r5, r1, r8, lsl #6
   1b8b0:	strdeq	r5, [r1], -ip
   1b8b4:	andeq	r5, r1, r8, ror #9
   1b8b8:	andeq	r5, r1, ip, ror #5
   1b8bc:	ldrdeq	r5, [r1], -r0
   1b8c0:	andeq	r5, r1, r4, lsr #9
   1b8c4:	andeq	r5, r1, r4, lsl #9
   1b8c8:	muleq	r1, r4, r4
   1b8cc:	andeq	r5, r1, r4, lsl #9
   1b8d0:	andeq	r5, r1, ip, ror #8
   1b8d4:	muleq	r1, r0, r2
   1b8d8:	andeq	r5, r1, r0, asr #4
   1b8dc:	andeq	r5, r1, r0, lsl r2
   1b8e0:	andeq	r5, r1, r8, lsr r2
   1b8e4:	andeq	r5, r1, r8, lsl r2
   1b8e8:	andeq	r5, r1, r4, lsl r1
   1b8ec:	strheq	r5, [r1], -ip
   1b8f0:	andeq	r5, r1, r0, asr r0
   1b8f4:	andeq	r5, r1, r0, ror r0
   1b8f8:	andeq	r5, r1, ip, asr r0
   1b8fc:	andeq	r5, r1, r4, asr #32
   1b900:	andeq	r4, r1, r8, lsl #31
   1b904:	andeq	r4, r1, r8, ror pc
   1b908:	andeq	r4, r1, r0, ror #29
   1b90c:	andeq	r4, r1, r8, lsr #30
   1b910:	andeq	r4, r1, ip, lsl #30
   1b914:	andeq	r4, r1, ip, lsl #30
   1b918:	strdeq	r4, [r1], -r0
   1b91c:	muleq	r1, r0, lr
   1b920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b924:	add	fp, sp, #28
   1b928:	sub	sp, sp, #4
   1b92c:	ldr	r0, [pc, #3180]	; 1c5a0 <next@@Base+0x3b50>
   1b930:	ldr	r0, [pc, r0]
   1b934:	cmp	r0, #0
   1b938:	beq	1bf94 <next@@Base+0x3544>
   1b93c:	ldr	sl, [pc, #3168]	; 1c5a4 <next@@Base+0x3b54>
   1b940:	add	sl, pc, sl
   1b944:	ldr	r6, [sl, #4]
   1b948:	ldr	r5, [pc, #3160]	; 1c5a8 <next@@Base+0x3b58>
   1b94c:	ldr	r5, [pc, r5]
   1b950:	ldr	r8, [pc, #3156]	; 1c5ac <next@@Base+0x3b5c>
   1b954:	add	r8, pc, r8
   1b958:	ldrb	r0, [r8]
   1b95c:	cmp	r0, #0
   1b960:	beq	1ba24 <next@@Base+0x2fd4>
   1b964:	ldr	r9, [pc, #3164]	; 1c5c8 <next@@Base+0x3b78>
   1b968:	adds	r2, r5, #4
   1b96c:	adc	ip, r6, #0
   1b970:	add	r9, pc, r9
   1b974:	ldr	r0, [r9, #4]
   1b978:	ldr	r3, [pc, #3148]	; 1c5cc <next@@Base+0x3b7c>
   1b97c:	ldr	r3, [pc, r3]
   1b980:	subs	r3, r3, r2
   1b984:	sbcs	r0, r0, ip
   1b988:	bcs	1ba78 <next@@Base+0x3028>
   1b98c:	mov	r0, #7
   1b990:	orr	r0, r0, #131072	; 0x20000
   1b994:	adds	r0, r5, r0
   1b998:	adc	r1, r6, #0
   1b99c:	subs	r0, r0, #4
   1b9a0:	sbc	r1, r1, #0
   1b9a4:	mvn	r2, #0
   1b9a8:	and	r5, r1, r2
   1b9ac:	mov	r1, #16646144	; 0xfe0000
   1b9b0:	orr	r1, r1, #-16777216	; 0xff000000
   1b9b4:	ldr	r4, [pc, #3096]	; 1c5d4 <next@@Base+0x3b84>
   1b9b8:	and	r6, r0, r1
   1b9bc:	ldr	r0, [pc, #3092]	; 1c5d8 <next@@Base+0x3b88>
   1b9c0:	mov	r1, r6
   1b9c4:	add	r4, pc, r4
   1b9c8:	ldr	r0, [pc, r0]
   1b9cc:	bl	12694 <realloc@plt>
   1b9d0:	str	r6, [r9]
   1b9d4:	str	r5, [r9, #4]
   1b9d8:	str	r0, [r4]
   1b9dc:	ldrb	r3, [r8]
   1b9e0:	ldr	r6, [sl, #4]
   1b9e4:	ldr	r5, [pc, #3056]	; 1c5dc <next@@Base+0x3b8c>
   1b9e8:	mov	r2, r0
   1b9ec:	mov	r1, #0
   1b9f0:	mov	r7, #161	; 0xa1
   1b9f4:	ldr	r5, [pc, r5]
   1b9f8:	strb	r1, [r2, r5]!
   1b9fc:	strb	r7, [r2, #3]
   1ba00:	strb	r1, [r2, #2]
   1ba04:	strb	r1, [r2, #1]
   1ba08:	adds	r2, r5, #4
   1ba0c:	adc	ip, r6, #0
   1ba10:	mov	r7, #1
   1ba14:	cmp	r3, #1
   1ba18:	stm	sl, {r2, ip}
   1ba1c:	beq	1baa0 <next@@Base+0x3050>
   1ba20:	b	1bc78 <next@@Base+0x3228>
   1ba24:	ldr	r0, [pc, #2948]	; 1c5b0 <next@@Base+0x3b60>
   1ba28:	ldr	r0, [pc, r0]
   1ba2c:	mov	r1, r0
   1ba30:	ldrb	r2, [r1, r5]!
   1ba34:	ldrb	r3, [r1, #1]
   1ba38:	ldrb	r7, [r1, #2]
   1ba3c:	ldrb	r1, [r1, #3]
   1ba40:	orr	r2, r2, r3, lsl #8
   1ba44:	orr	r2, r2, r7, lsl #16
   1ba48:	orr	r3, r2, r1, lsl #24
   1ba4c:	adds	r2, r5, #4
   1ba50:	adc	ip, r6, #0
   1ba54:	cmp	r3, #-1593835520	; 0xa1000000
   1ba58:	stm	sl, {r2, ip}
   1ba5c:	beq	1bc18 <next@@Base+0x31c8>
   1ba60:	mov	r7, #1
   1ba64:	cmn	r3, #1
   1ba68:	beq	1bc58 <next@@Base+0x3208>
   1ba6c:	ldr	r1, [pc, #2880]	; 1c5b4 <next@@Base+0x3b64>
   1ba70:	add	r1, pc, r1
   1ba74:	b	1c358 <next@@Base+0x3908>
   1ba78:	ldr	r0, [pc, #2896]	; 1c5d0 <next@@Base+0x3b80>
   1ba7c:	mov	r3, #0
   1ba80:	mov	r4, #161	; 0xa1
   1ba84:	ldr	r0, [pc, r0]
   1ba88:	mov	r7, r0
   1ba8c:	strb	r3, [r7, r5]!
   1ba90:	strb	r4, [r7, #3]
   1ba94:	strb	r3, [r7, #2]
   1ba98:	strb	r3, [r7, #1]
   1ba9c:	stm	sl, {r2, ip}
   1baa0:	ldr	r4, [r9, #4]
   1baa4:	ldr	r1, [pc, #2868]	; 1c5e0 <next@@Base+0x3b90>
   1baa8:	adds	r3, r5, #8
   1baac:	adc	r7, r6, #0
   1bab0:	ldr	r1, [pc, r1]
   1bab4:	subs	r1, r1, r3
   1bab8:	sbcs	r1, r4, r7
   1babc:	bcs	1bb48 <next@@Base+0x30f8>
   1bac0:	mov	r1, #7
   1bac4:	orr	r1, r1, #131072	; 0x20000
   1bac8:	adds	r1, r5, r1
   1bacc:	adc	r2, r6, #0
   1bad0:	mvn	r3, #0
   1bad4:	and	r5, r2, r3
   1bad8:	mov	r2, #16646144	; 0xfe0000
   1badc:	orr	r2, r2, #-16777216	; 0xff000000
   1bae0:	ldr	r4, [pc, #2812]	; 1c5e4 <next@@Base+0x3b94>
   1bae4:	and	r6, r1, r2
   1bae8:	mov	r1, r6
   1baec:	add	r4, pc, r4
   1baf0:	bl	12694 <realloc@plt>
   1baf4:	str	r6, [r9]
   1baf8:	str	r5, [r9, #4]
   1bafc:	str	r0, [r4]
   1bb00:	ldrb	r1, [r8]
   1bb04:	ldr	ip, [sl, #4]
   1bb08:	ldr	r2, [pc, #2776]	; 1c5e8 <next@@Base+0x3b98>
   1bb0c:	mov	r7, r0
   1bb10:	mov	r3, #9
   1bb14:	ldr	r2, [pc, r2]
   1bb18:	strb	r3, [r7, r2]!
   1bb1c:	mov	r3, #0
   1bb20:	strb	r3, [r7, #3]
   1bb24:	strb	r3, [r7, #2]
   1bb28:	strb	r3, [r7, #1]
   1bb2c:	adds	r3, r2, #4
   1bb30:	adc	r5, ip, #0
   1bb34:	mov	r7, #1
   1bb38:	cmp	r1, #1
   1bb3c:	stm	sl, {r3, r5}
   1bb40:	beq	1bb70 <next@@Base+0x3120>
   1bb44:	b	1bca0 <next@@Base+0x3250>
   1bb48:	mov	r3, r0
   1bb4c:	mov	r1, #9
   1bb50:	strb	r1, [r3, r2]!
   1bb54:	mov	r1, #0
   1bb58:	strb	r1, [r3, #3]
   1bb5c:	strb	r1, [r3, #2]
   1bb60:	strb	r1, [r3, #1]
   1bb64:	adds	r3, r2, #4
   1bb68:	adc	r5, ip, #0
   1bb6c:	stm	sl, {r3, r5}
   1bb70:	ldr	r6, [r9, #4]
   1bb74:	ldr	r4, [pc, #2672]	; 1c5ec <next@@Base+0x3b9c>
   1bb78:	adds	r1, r2, #8
   1bb7c:	adc	r7, ip, #0
   1bb80:	ldr	r4, [pc, r4]
   1bb84:	subs	r1, r4, r1
   1bb88:	sbcs	r1, r6, r7
   1bb8c:	bcs	1c064 <next@@Base+0x3614>
   1bb90:	mov	r1, #7
   1bb94:	orr	r1, r1, #131072	; 0x20000
   1bb98:	adds	r1, r2, r1
   1bb9c:	adc	r2, ip, #0
   1bba0:	mvn	r3, #0
   1bba4:	and	r5, r2, r3
   1bba8:	mov	r2, #16646144	; 0xfe0000
   1bbac:	orr	r2, r2, #-16777216	; 0xff000000
   1bbb0:	ldr	r4, [pc, #2616]	; 1c5f0 <next@@Base+0x3ba0>
   1bbb4:	and	r6, r1, r2
   1bbb8:	mov	r1, r6
   1bbbc:	add	r4, pc, r4
   1bbc0:	bl	12694 <realloc@plt>
   1bbc4:	str	r6, [r9]
   1bbc8:	str	r5, [r9, #4]
   1bbcc:	str	r0, [r4]
   1bbd0:	ldrb	r2, [r8]
   1bbd4:	ldr	r5, [sl, #4]
   1bbd8:	ldr	r3, [pc, #2580]	; 1c5f4 <next@@Base+0x3ba4>
   1bbdc:	mov	r7, r0
   1bbe0:	mov	r1, #0
   1bbe4:	ldr	r3, [pc, r3]
   1bbe8:	adds	r6, r3, #4
   1bbec:	strb	r1, [r7, r3]!
   1bbf0:	strb	r1, [r7, #3]
   1bbf4:	strb	r1, [r7, #2]
   1bbf8:	strb	r1, [r7, #1]
   1bbfc:	adc	r1, r5, #0
   1bc00:	mov	r7, #1
   1bc04:	cmp	r2, #1
   1bc08:	str	r6, [sl]
   1bc0c:	str	r1, [sl, #4]
   1bc10:	bne	1bcc8 <next@@Base+0x3278>
   1bc14:	b	1c08c <next@@Base+0x363c>
   1bc18:	ldr	r3, [r0, r2]
   1bc1c:	adds	r4, r5, #8
   1bc20:	adc	r7, r6, #0
   1bc24:	cmp	r3, #9
   1bc28:	stm	sl, {r4, r7}
   1bc2c:	bne	1c350 <next@@Base+0x3900>
   1bc30:	ldr	r3, [pc, #2444]	; 1c5c4 <next@@Base+0x3b74>
   1bc34:	adds	r4, r5, #20
   1bc38:	adc	r7, r6, #0
   1bc3c:	add	r3, pc, r3
   1bc40:	add	r6, r0, r5
   1bc44:	ldrb	r3, [r3]
   1bc48:	ldr	r6, [r6, #16]
   1bc4c:	stm	sl, {r4, r7}
   1bc50:	eor	r3, r3, #1
   1bc54:	add	r7, r6, r3
   1bc58:	mov	r6, r0
   1bc5c:	mov	r3, #0
   1bc60:	strb	r3, [r6, r5]!
   1bc64:	mov	r5, #161	; 0xa1
   1bc68:	strb	r5, [r6, #3]
   1bc6c:	strb	r3, [r6, #2]
   1bc70:	strb	r3, [r6, #1]
   1bc74:	stm	sl, {r2, ip}
   1bc78:	mov	r3, r0
   1bc7c:	mov	r1, #9
   1bc80:	strb	r1, [r3, r2]!
   1bc84:	mov	r1, #0
   1bc88:	strb	r1, [r3, #3]
   1bc8c:	strb	r1, [r3, #2]
   1bc90:	strb	r1, [r3, #1]
   1bc94:	adds	r3, r2, #4
   1bc98:	adc	r5, ip, #0
   1bc9c:	stm	sl, {r3, r5}
   1bca0:	mov	r2, r0
   1bca4:	mov	r1, #0
   1bca8:	strb	r1, [r2, r3]!
   1bcac:	adds	r6, r3, #4
   1bcb0:	strb	r1, [r2, #3]
   1bcb4:	strb	r1, [r2, #2]
   1bcb8:	strb	r1, [r2, #1]
   1bcbc:	adc	r1, r5, #0
   1bcc0:	str	r6, [sl]
   1bcc4:	str	r1, [sl, #4]
   1bcc8:	mov	r3, r0
   1bccc:	mov	r2, #0
   1bcd0:	strb	r2, [r3, r6]!
   1bcd4:	strb	r2, [r3, #3]
   1bcd8:	strb	r2, [r3, #2]
   1bcdc:	strb	r2, [r3, #1]
   1bce0:	adds	r2, r6, #4
   1bce4:	adc	r3, r1, #0
   1bce8:	strd	r2, [sl]
   1bcec:	lsr	r1, r7, #24
   1bcf0:	strb	r7, [r0, r2]!
   1bcf4:	lsr	r6, r7, #16
   1bcf8:	lsr	r5, r7, #8
   1bcfc:	strb	r1, [r0, #3]
   1bd00:	strb	r6, [r0, #2]
   1bd04:	strb	r5, [r0, #1]
   1bd08:	ldrb	r0, [r8]
   1bd0c:	adds	r4, r2, #4
   1bd10:	adc	r5, r3, #0
   1bd14:	cmp	r0, #0
   1bd18:	strd	r4, [sl]
   1bd1c:	beq	1bdd0 <next@@Base+0x3380>
   1bd20:	ldr	r9, [pc, #2284]	; 1c614 <next@@Base+0x3bc4>
   1bd24:	adds	r0, r2, #8
   1bd28:	adc	r1, r3, #0
   1bd2c:	add	r9, pc, r9
   1bd30:	ldr	r7, [r9, #4]
   1bd34:	ldr	r6, [pc, #2268]	; 1c618 <next@@Base+0x3bc8>
   1bd38:	ldr	r6, [pc, r6]
   1bd3c:	subs	r0, r6, r0
   1bd40:	sbcs	r0, r7, r1
   1bd44:	bcs	1bf9c <next@@Base+0x354c>
   1bd48:	mov	r0, #7
   1bd4c:	orr	r0, r0, #131072	; 0x20000
   1bd50:	adds	r0, r2, r0
   1bd54:	adc	r1, r3, #0
   1bd58:	mvn	r2, #0
   1bd5c:	and	r5, r1, r2
   1bd60:	mov	r1, #16646144	; 0xfe0000
   1bd64:	orr	r1, r1, #-16777216	; 0xff000000
   1bd68:	ldr	r4, [pc, #2268]	; 1c64c <next@@Base+0x3bfc>
   1bd6c:	and	r6, r0, r1
   1bd70:	ldr	r0, [pc, #2264]	; 1c650 <next@@Base+0x3c00>
   1bd74:	mov	r1, r6
   1bd78:	add	r4, pc, r4
   1bd7c:	ldr	r0, [pc, r0]
   1bd80:	bl	12694 <realloc@plt>
   1bd84:	str	r6, [r9]
   1bd88:	str	r5, [r9, #4]
   1bd8c:	str	r0, [r4]
   1bd90:	ldrb	r1, [r8]
   1bd94:	ldr	r5, [sl, #4]
   1bd98:	ldr	r4, [pc, #2228]	; 1c654 <next@@Base+0x3c04>
   1bd9c:	mov	r3, r0
   1bda0:	mov	r2, #0
   1bda4:	ldr	r4, [pc, r4]
   1bda8:	strb	r2, [r3, r4]!
   1bdac:	strb	r2, [r3, #3]
   1bdb0:	strb	r2, [r3, #2]
   1bdb4:	strb	r2, [r3, #1]
   1bdb8:	adds	r2, r4, #4
   1bdbc:	adc	r3, r5, #0
   1bdc0:	cmp	r1, #0
   1bdc4:	strd	r2, [sl]
   1bdc8:	beq	1bdfc <next@@Base+0x33ac>
   1bdcc:	b	1bfc8 <next@@Base+0x3578>
   1bdd0:	ldr	r0, [pc, #2104]	; 1c610 <next@@Base+0x3bc0>
   1bdd4:	adds	r2, r2, #8
   1bdd8:	mov	r1, #0
   1bddc:	adc	r3, r3, #0
   1bde0:	ldr	r0, [pc, r0]
   1bde4:	mov	r7, r0
   1bde8:	strb	r1, [r7, r4]!
   1bdec:	strb	r1, [r7, #3]
   1bdf0:	strb	r1, [r7, #2]
   1bdf4:	strb	r1, [r7, #1]
   1bdf8:	strd	r2, [sl]
   1bdfc:	mov	r7, r0
   1be00:	mov	r1, #0
   1be04:	strb	r1, [r7, r2]!
   1be08:	strb	r1, [r7, #3]
   1be0c:	strb	r1, [r7, #2]
   1be10:	strb	r1, [r7, #1]
   1be14:	adds	r1, r2, #4
   1be18:	adc	r5, r3, #0
   1be1c:	stm	sl, {r1, r5}
   1be20:	mov	r3, r0
   1be24:	mov	r2, #0
   1be28:	strb	r2, [r3, r1]!
   1be2c:	strb	r2, [r3, #3]
   1be30:	strb	r2, [r3, #2]
   1be34:	strb	r2, [r3, #1]
   1be38:	adds	r2, r1, #4
   1be3c:	adc	r3, r5, #0
   1be40:	strd	r2, [sl]
   1be44:	mov	r7, r0
   1be48:	mov	r1, #0
   1be4c:	strb	r1, [r7, r2]!
   1be50:	strb	r1, [r7, #3]
   1be54:	strb	r1, [r7, #2]
   1be58:	strb	r1, [r7, #1]
   1be5c:	adds	r1, r2, #4
   1be60:	adc	r5, r3, #0
   1be64:	stm	sl, {r1, r5}
   1be68:	mov	r3, r0
   1be6c:	mov	r2, #0
   1be70:	strb	r2, [r3, r1]!
   1be74:	adds	r4, r1, #4
   1be78:	strb	r2, [r3, #3]
   1be7c:	strb	r2, [r3, #2]
   1be80:	strb	r2, [r3, #1]
   1be84:	adc	r3, r5, #0
   1be88:	str	r4, [sl]
   1be8c:	str	r3, [sl, #4]
   1be90:	mov	r2, r0
   1be94:	mov	r1, #0
   1be98:	strb	r1, [r2, r4]!
   1be9c:	strb	r1, [r2, #3]
   1bea0:	strb	r1, [r2, #2]
   1bea4:	strb	r1, [r2, #1]
   1bea8:	adds	r2, r4, #4
   1beac:	adc	r1, r3, #0
   1beb0:	str	r2, [sl]
   1beb4:	str	r1, [sl, #4]
   1beb8:	mov	r3, r0
   1bebc:	mov	r4, #0
   1bec0:	strb	r4, [r3, r2]!
   1bec4:	mov	r7, #163	; 0xa3
   1bec8:	strb	r7, [r3, #3]
   1becc:	strb	r4, [r3, #2]
   1bed0:	strb	r4, [r3, #1]
   1bed4:	ldrb	r7, [r8]
   1bed8:	adds	r6, r2, #4
   1bedc:	adc	r3, r1, #0
   1bee0:	cmp	r7, #1
   1bee4:	str	r6, [sl]
   1bee8:	str	r3, [sl, #4]
   1beec:	bne	1bf60 <next@@Base+0x3510>
   1bef0:	ldr	r8, [pc, #1852]	; 1c634 <next@@Base+0x3be4>
   1bef4:	adds	lr, r2, #8
   1bef8:	adc	ip, r1, #0
   1befc:	add	r8, pc, r8
   1bf00:	ldr	r5, [r8, #4]
   1bf04:	ldr	r7, [pc, #1836]	; 1c638 <next@@Base+0x3be8>
   1bf08:	ldr	r7, [pc, r7]
   1bf0c:	subs	r7, r7, lr
   1bf10:	sbcs	r7, r5, ip
   1bf14:	bcs	1bf60 <next@@Base+0x3510>
   1bf18:	mov	r3, #7
   1bf1c:	orr	r3, r3, #131072	; 0x20000
   1bf20:	adds	r2, r2, r3
   1bf24:	adc	r1, r1, #0
   1bf28:	mvn	r3, #0
   1bf2c:	and	r7, r1, r3
   1bf30:	mov	r1, #16646144	; 0xfe0000
   1bf34:	orr	r1, r1, #-16777216	; 0xff000000
   1bf38:	ldr	r5, [pc, #1788]	; 1c63c <next@@Base+0x3bec>
   1bf3c:	and	r6, r2, r1
   1bf40:	mov	r1, r6
   1bf44:	add	r5, pc, r5
   1bf48:	bl	12694 <realloc@plt>
   1bf4c:	strd	r6, [r8]
   1bf50:	str	r0, [r5]
   1bf54:	ldr	r3, [sl, #4]
   1bf58:	ldr	r6, [pc, #1760]	; 1c640 <next@@Base+0x3bf0>
   1bf5c:	ldr	r6, [pc, r6]
   1bf60:	ldr	r0, [pc, #1756]	; 1c644 <next@@Base+0x3bf4>
   1bf64:	ldr	r1, [pc, #1756]	; 1c648 <next@@Base+0x3bf8>
   1bf68:	adds	r2, r6, #4
   1bf6c:	add	r0, pc, r0
   1bf70:	adc	r3, r3, #0
   1bf74:	ldr	r1, [pc, r1]
   1bf78:	strb	r4, [r1, r6]!
   1bf7c:	strb	r4, [r1, #3]
   1bf80:	strb	r4, [r1, #2]
   1bf84:	strb	r4, [r1, #1]
   1bf88:	mov	r1, #1
   1bf8c:	strd	r2, [sl]
   1bf90:	strb	r1, [r0]
   1bf94:	sub	sp, fp, #28
   1bf98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf9c:	ldr	r0, [pc, #1656]	; 1c61c <next@@Base+0x3bcc>
   1bfa0:	adds	r2, r2, #8
   1bfa4:	mov	r1, #0
   1bfa8:	adc	r3, r3, #0
   1bfac:	ldr	r0, [pc, r0]
   1bfb0:	mov	r7, r0
   1bfb4:	strb	r1, [r7, r4]!
   1bfb8:	strb	r1, [r7, #3]
   1bfbc:	strb	r1, [r7, #2]
   1bfc0:	strb	r1, [r7, #1]
   1bfc4:	strd	r2, [sl]
   1bfc8:	ldr	r6, [r9, #4]
   1bfcc:	ldr	r1, [pc, #1668]	; 1c658 <next@@Base+0x3c08>
   1bfd0:	adds	ip, r4, #8
   1bfd4:	adc	r7, r5, #0
   1bfd8:	ldr	r1, [pc, r1]
   1bfdc:	subs	r1, r1, ip
   1bfe0:	sbcs	r1, r6, r7
   1bfe4:	bcs	1c130 <next@@Base+0x36e0>
   1bfe8:	mov	r1, #7
   1bfec:	orr	r1, r1, #131072	; 0x20000
   1bff0:	adds	r1, r4, r1
   1bff4:	adc	r2, r5, #0
   1bff8:	mvn	r3, #0
   1bffc:	and	r5, r2, r3
   1c000:	mov	r2, #16646144	; 0xfe0000
   1c004:	orr	r2, r2, #-16777216	; 0xff000000
   1c008:	ldr	r6, [pc, #1612]	; 1c65c <next@@Base+0x3c0c>
   1c00c:	and	r4, r1, r2
   1c010:	mov	r1, r4
   1c014:	add	r6, pc, r6
   1c018:	bl	12694 <realloc@plt>
   1c01c:	str	r0, [r6]
   1c020:	strd	r4, [r9]
   1c024:	ldrb	r7, [r8]
   1c028:	ldr	r3, [sl, #4]
   1c02c:	ldr	r2, [pc, #1580]	; 1c660 <next@@Base+0x3c10>
   1c030:	mov	r6, r0
   1c034:	mov	r1, #0
   1c038:	ldr	r2, [pc, r2]
   1c03c:	strb	r1, [r6, r2]!
   1c040:	strb	r1, [r6, #3]
   1c044:	strb	r1, [r6, #2]
   1c048:	strb	r1, [r6, #1]
   1c04c:	adds	r1, r2, #4
   1c050:	adc	r5, r3, #0
   1c054:	cmp	r7, #1
   1c058:	stm	sl, {r1, r5}
   1c05c:	bne	1be20 <next@@Base+0x33d0>
   1c060:	b	1c154 <next@@Base+0x3704>
   1c064:	mov	r2, r0
   1c068:	mov	r1, #0
   1c06c:	strb	r1, [r2, r3]!
   1c070:	adds	r6, r3, #4
   1c074:	strb	r1, [r2, #3]
   1c078:	strb	r1, [r2, #2]
   1c07c:	strb	r1, [r2, #1]
   1c080:	adc	r1, r5, #0
   1c084:	str	r6, [sl]
   1c088:	str	r1, [sl, #4]
   1c08c:	ldr	r4, [r9, #4]
   1c090:	ldr	r2, [pc, #1376]	; 1c5f8 <next@@Base+0x3ba8>
   1c094:	adds	ip, r3, #8
   1c098:	adc	r7, r5, #0
   1c09c:	ldr	r2, [pc, r2]
   1c0a0:	subs	r2, r2, ip
   1c0a4:	sbcs	r2, r4, r7
   1c0a8:	bcs	1c1f4 <next@@Base+0x37a4>
   1c0ac:	mov	r1, #7
   1c0b0:	orr	r1, r1, #131072	; 0x20000
   1c0b4:	adds	r1, r3, r1
   1c0b8:	adc	r2, r5, #0
   1c0bc:	mvn	r3, #0
   1c0c0:	and	r5, r2, r3
   1c0c4:	mov	r2, #16646144	; 0xfe0000
   1c0c8:	orr	r2, r2, #-16777216	; 0xff000000
   1c0cc:	ldr	r4, [pc, #1320]	; 1c5fc <next@@Base+0x3bac>
   1c0d0:	and	r6, r1, r2
   1c0d4:	mov	r1, r6
   1c0d8:	add	r4, pc, r4
   1c0dc:	bl	12694 <realloc@plt>
   1c0e0:	str	r6, [r9]
   1c0e4:	str	r5, [r9, #4]
   1c0e8:	str	r0, [r4]
   1c0ec:	ldrb	r5, [r8]
   1c0f0:	ldr	r1, [sl, #4]
   1c0f4:	ldr	r6, [pc, #1284]	; 1c600 <next@@Base+0x3bb0>
   1c0f8:	mov	r3, r0
   1c0fc:	mov	r2, #0
   1c100:	mov	r7, #1
   1c104:	ldr	r6, [pc, r6]
   1c108:	strb	r2, [r3, r6]!
   1c10c:	strb	r2, [r3, #3]
   1c110:	strb	r2, [r3, #2]
   1c114:	strb	r2, [r3, #1]
   1c118:	adds	r2, r6, #4
   1c11c:	adc	r3, r1, #0
   1c120:	cmp	r5, #1
   1c124:	strd	r2, [sl]
   1c128:	bne	1bcec <next@@Base+0x329c>
   1c12c:	b	1c218 <next@@Base+0x37c8>
   1c130:	mov	r7, r0
   1c134:	mov	r1, #0
   1c138:	strb	r1, [r7, r2]!
   1c13c:	strb	r1, [r7, #3]
   1c140:	strb	r1, [r7, #2]
   1c144:	strb	r1, [r7, #1]
   1c148:	adds	r1, r2, #4
   1c14c:	adc	r5, r3, #0
   1c150:	stm	sl, {r1, r5}
   1c154:	ldr	r4, [r9, #4]
   1c158:	ldr	r6, [pc, #1284]	; 1c664 <next@@Base+0x3c14>
   1c15c:	adds	r7, r2, #8
   1c160:	adc	ip, r3, #0
   1c164:	ldr	r6, [pc, r6]
   1c168:	subs	r7, r6, r7
   1c16c:	sbcs	r7, r4, ip
   1c170:	bcs	1c28c <next@@Base+0x383c>
   1c174:	mov	r1, #7
   1c178:	orr	r1, r1, #131072	; 0x20000
   1c17c:	adds	r1, r2, r1
   1c180:	adc	r2, r3, #0
   1c184:	mvn	r3, #0
   1c188:	and	r5, r2, r3
   1c18c:	mov	r2, #16646144	; 0xfe0000
   1c190:	orr	r2, r2, #-16777216	; 0xff000000
   1c194:	ldr	r4, [pc, #1228]	; 1c668 <next@@Base+0x3c18>
   1c198:	and	r6, r1, r2
   1c19c:	mov	r1, r6
   1c1a0:	add	r4, pc, r4
   1c1a4:	bl	12694 <realloc@plt>
   1c1a8:	str	r6, [r9]
   1c1ac:	str	r5, [r9, #4]
   1c1b0:	str	r0, [r4]
   1c1b4:	ldrb	r7, [r8]
   1c1b8:	ldr	r5, [sl, #4]
   1c1bc:	ldr	r1, [pc, #1192]	; 1c66c <next@@Base+0x3c1c>
   1c1c0:	mov	r3, r0
   1c1c4:	mov	r2, #0
   1c1c8:	ldr	r1, [pc, r1]
   1c1cc:	strb	r2, [r3, r1]!
   1c1d0:	strb	r2, [r3, #3]
   1c1d4:	strb	r2, [r3, #2]
   1c1d8:	strb	r2, [r3, #1]
   1c1dc:	adds	r2, r1, #4
   1c1e0:	adc	r3, r5, #0
   1c1e4:	cmp	r7, #1
   1c1e8:	strd	r2, [sl]
   1c1ec:	bne	1be44 <next@@Base+0x33f4>
   1c1f0:	b	1c2b0 <next@@Base+0x3860>
   1c1f4:	mov	r3, r0
   1c1f8:	mov	r2, #0
   1c1fc:	strb	r2, [r3, r6]!
   1c200:	strb	r2, [r3, #3]
   1c204:	strb	r2, [r3, #2]
   1c208:	strb	r2, [r3, #1]
   1c20c:	adds	r2, r6, #4
   1c210:	adc	r3, r1, #0
   1c214:	strd	r2, [sl]
   1c218:	ldr	r4, [r9, #4]
   1c21c:	ldr	r5, [pc, #992]	; 1c604 <next@@Base+0x3bb4>
   1c220:	adds	lr, r6, #8
   1c224:	adc	ip, r1, #0
   1c228:	mov	r7, #1
   1c22c:	ldr	r5, [pc, r5]
   1c230:	subs	r5, r5, lr
   1c234:	sbcs	r5, r4, ip
   1c238:	bcs	1bcec <next@@Base+0x329c>
   1c23c:	mov	r2, #7
   1c240:	orr	r2, r2, #131072	; 0x20000
   1c244:	adds	r2, r6, r2
   1c248:	adc	r1, r1, #0
   1c24c:	mvn	r3, #0
   1c250:	and	r5, r1, r3
   1c254:	mov	r1, #16646144	; 0xfe0000
   1c258:	orr	r1, r1, #-16777216	; 0xff000000
   1c25c:	ldr	r4, [pc, #932]	; 1c608 <next@@Base+0x3bb8>
   1c260:	and	r6, r2, r1
   1c264:	mov	r1, r6
   1c268:	add	r4, pc, r4
   1c26c:	bl	12694 <realloc@plt>
   1c270:	str	r6, [r9]
   1c274:	str	r5, [r9, #4]
   1c278:	str	r0, [r4]
   1c27c:	ldr	r3, [sl, #4]
   1c280:	ldr	r2, [pc, #900]	; 1c60c <next@@Base+0x3bbc>
   1c284:	ldr	r2, [pc, r2]
   1c288:	b	1bcec <next@@Base+0x329c>
   1c28c:	mov	r3, r0
   1c290:	mov	r2, #0
   1c294:	strb	r2, [r3, r1]!
   1c298:	strb	r2, [r3, #3]
   1c29c:	strb	r2, [r3, #2]
   1c2a0:	strb	r2, [r3, #1]
   1c2a4:	adds	r2, r1, #4
   1c2a8:	adc	r3, r5, #0
   1c2ac:	strd	r2, [sl]
   1c2b0:	ldr	r4, [r9, #4]
   1c2b4:	ldr	r6, [pc, #948]	; 1c670 <next@@Base+0x3c20>
   1c2b8:	adds	r7, r1, #8
   1c2bc:	adc	ip, r5, #0
   1c2c0:	ldr	r6, [pc, r6]
   1c2c4:	subs	r7, r6, r7
   1c2c8:	sbcs	r7, r4, ip
   1c2cc:	bcs	1c378 <next@@Base+0x3928>
   1c2d0:	mov	r2, #7
   1c2d4:	orr	r2, r2, #131072	; 0x20000
   1c2d8:	adds	r1, r1, r2
   1c2dc:	adc	r2, r5, #0
   1c2e0:	mvn	r3, #0
   1c2e4:	and	r5, r2, r3
   1c2e8:	mov	r2, #16646144	; 0xfe0000
   1c2ec:	orr	r2, r2, #-16777216	; 0xff000000
   1c2f0:	ldr	r4, [pc, #892]	; 1c674 <next@@Base+0x3c24>
   1c2f4:	and	r6, r1, r2
   1c2f8:	mov	r1, r6
   1c2fc:	add	r4, pc, r4
   1c300:	bl	12694 <realloc@plt>
   1c304:	str	r6, [r9]
   1c308:	str	r5, [r9, #4]
   1c30c:	str	r0, [r4]
   1c310:	ldrb	r7, [r8]
   1c314:	ldr	r3, [sl, #4]
   1c318:	ldr	r2, [pc, #856]	; 1c678 <next@@Base+0x3c28>
   1c31c:	mov	r6, r0
   1c320:	mov	r1, #0
   1c324:	ldr	r2, [pc, r2]
   1c328:	strb	r1, [r6, r2]!
   1c32c:	strb	r1, [r6, #3]
   1c330:	strb	r1, [r6, #2]
   1c334:	strb	r1, [r6, #1]
   1c338:	adds	r1, r2, #4
   1c33c:	adc	r5, r3, #0
   1c340:	cmp	r7, #1
   1c344:	stm	sl, {r1, r5}
   1c348:	bne	1be68 <next@@Base+0x3418>
   1c34c:	b	1c39c <next@@Base+0x394c>
   1c350:	ldr	r1, [pc, #616]	; 1c5c0 <next@@Base+0x3b70>
   1c354:	add	r1, pc, r1
   1c358:	ldr	r0, [pc, #600]	; 1c5b8 <next@@Base+0x3b68>
   1c35c:	ldr	r0, [pc, r0]
   1c360:	ldr	r0, [r0]
   1c364:	ldr	r2, [pc, #592]	; 1c5bc <next@@Base+0x3b6c>
   1c368:	ldr	r2, [pc, r2]
   1c36c:	sub	sp, fp, #28
   1c370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c374:	b	12724 <fprintf@plt>
   1c378:	mov	r7, r0
   1c37c:	mov	r1, #0
   1c380:	strb	r1, [r7, r2]!
   1c384:	strb	r1, [r7, #3]
   1c388:	strb	r1, [r7, #2]
   1c38c:	strb	r1, [r7, #1]
   1c390:	adds	r1, r2, #4
   1c394:	adc	r5, r3, #0
   1c398:	stm	sl, {r1, r5}
   1c39c:	ldr	r4, [r9, #4]
   1c3a0:	ldr	r6, [pc, #724]	; 1c67c <next@@Base+0x3c2c>
   1c3a4:	adds	r7, r2, #8
   1c3a8:	adc	ip, r3, #0
   1c3ac:	ldr	r6, [pc, r6]
   1c3b0:	subs	r7, r6, r7
   1c3b4:	sbcs	r7, r4, ip
   1c3b8:	bcs	1c440 <next@@Base+0x39f0>
   1c3bc:	mov	r1, #7
   1c3c0:	orr	r1, r1, #131072	; 0x20000
   1c3c4:	adds	r1, r2, r1
   1c3c8:	adc	r2, r3, #0
   1c3cc:	mvn	r3, #0
   1c3d0:	and	r5, r2, r3
   1c3d4:	mov	r2, #16646144	; 0xfe0000
   1c3d8:	orr	r2, r2, #-16777216	; 0xff000000
   1c3dc:	ldr	r4, [pc, #668]	; 1c680 <next@@Base+0x3c30>
   1c3e0:	and	r6, r1, r2
   1c3e4:	mov	r1, r6
   1c3e8:	add	r4, pc, r4
   1c3ec:	bl	12694 <realloc@plt>
   1c3f0:	str	r6, [r9]
   1c3f4:	str	r5, [r9, #4]
   1c3f8:	str	r0, [r4]
   1c3fc:	ldrb	r2, [r8]
   1c400:	ldr	r5, [sl, #4]
   1c404:	ldr	r1, [pc, #632]	; 1c684 <next@@Base+0x3c34>
   1c408:	mov	r7, r0
   1c40c:	mov	r3, #0
   1c410:	ldr	r1, [pc, r1]
   1c414:	adds	r4, r1, #4
   1c418:	strb	r3, [r7, r1]!
   1c41c:	strb	r3, [r7, #3]
   1c420:	strb	r3, [r7, #2]
   1c424:	strb	r3, [r7, #1]
   1c428:	adc	r3, r5, #0
   1c42c:	cmp	r2, #1
   1c430:	str	r4, [sl]
   1c434:	str	r3, [sl, #4]
   1c438:	bne	1be90 <next@@Base+0x3440>
   1c43c:	b	1c468 <next@@Base+0x3a18>
   1c440:	mov	r3, r0
   1c444:	mov	r2, #0
   1c448:	strb	r2, [r3, r1]!
   1c44c:	adds	r4, r1, #4
   1c450:	strb	r2, [r3, #3]
   1c454:	strb	r2, [r3, #2]
   1c458:	strb	r2, [r3, #1]
   1c45c:	adc	r3, r5, #0
   1c460:	str	r4, [sl]
   1c464:	str	r3, [sl, #4]
   1c468:	ldr	r6, [r9, #4]
   1c46c:	ldr	r2, [pc, #532]	; 1c688 <next@@Base+0x3c38>
   1c470:	adds	ip, r1, #8
   1c474:	adc	r7, r5, #0
   1c478:	ldr	r2, [pc, r2]
   1c47c:	subs	r2, r2, ip
   1c480:	sbcs	r2, r6, r7
   1c484:	bcs	1c50c <next@@Base+0x3abc>
   1c488:	mov	r2, #7
   1c48c:	orr	r2, r2, #131072	; 0x20000
   1c490:	adds	r1, r1, r2
   1c494:	adc	r2, r5, #0
   1c498:	mvn	r3, #0
   1c49c:	and	r5, r2, r3
   1c4a0:	mov	r2, #16646144	; 0xfe0000
   1c4a4:	orr	r2, r2, #-16777216	; 0xff000000
   1c4a8:	ldr	r4, [pc, #368]	; 1c620 <next@@Base+0x3bd0>
   1c4ac:	and	r6, r1, r2
   1c4b0:	mov	r1, r6
   1c4b4:	add	r4, pc, r4
   1c4b8:	bl	12694 <realloc@plt>
   1c4bc:	str	r6, [r9]
   1c4c0:	str	r5, [r9, #4]
   1c4c4:	str	r0, [r4]
   1c4c8:	ldrb	r7, [r8]
   1c4cc:	ldr	r3, [sl, #4]
   1c4d0:	ldr	r4, [pc, #332]	; 1c624 <next@@Base+0x3bd4>
   1c4d4:	mov	r2, r0
   1c4d8:	mov	r1, #0
   1c4dc:	ldr	r4, [pc, r4]
   1c4e0:	strb	r1, [r2, r4]!
   1c4e4:	strb	r1, [r2, #3]
   1c4e8:	strb	r1, [r2, #2]
   1c4ec:	strb	r1, [r2, #1]
   1c4f0:	adds	r2, r4, #4
   1c4f4:	adc	r1, r3, #0
   1c4f8:	cmp	r7, #0
   1c4fc:	str	r2, [sl]
   1c500:	str	r1, [sl, #4]
   1c504:	beq	1beb8 <next@@Base+0x3468>
   1c508:	b	1c534 <next@@Base+0x3ae4>
   1c50c:	mov	r2, r0
   1c510:	mov	r1, #0
   1c514:	strb	r1, [r2, r4]!
   1c518:	strb	r1, [r2, #3]
   1c51c:	strb	r1, [r2, #2]
   1c520:	strb	r1, [r2, #1]
   1c524:	adds	r2, r4, #4
   1c528:	adc	r1, r3, #0
   1c52c:	str	r2, [sl]
   1c530:	str	r1, [sl, #4]
   1c534:	ldr	r5, [r9, #4]
   1c538:	ldr	r6, [pc, #232]	; 1c628 <next@@Base+0x3bd8>
   1c53c:	adds	r7, r4, #8
   1c540:	adc	ip, r3, #0
   1c544:	ldr	r6, [pc, r6]
   1c548:	subs	r7, r6, r7
   1c54c:	sbcs	r7, r5, ip
   1c550:	bcs	1beb8 <next@@Base+0x3468>
   1c554:	mov	r1, #7
   1c558:	orr	r1, r1, #131072	; 0x20000
   1c55c:	adds	r1, r4, r1
   1c560:	adc	r2, r3, #0
   1c564:	mvn	r3, #0
   1c568:	and	r7, r2, r3
   1c56c:	mov	r2, #16646144	; 0xfe0000
   1c570:	orr	r2, r2, #-16777216	; 0xff000000
   1c574:	ldr	r5, [pc, #176]	; 1c62c <next@@Base+0x3bdc>
   1c578:	and	r6, r1, r2
   1c57c:	mov	r1, r6
   1c580:	add	r5, pc, r5
   1c584:	bl	12694 <realloc@plt>
   1c588:	strd	r6, [r9]
   1c58c:	str	r0, [r5]
   1c590:	ldr	r1, [sl, #4]
   1c594:	ldr	r2, [pc, #148]	; 1c630 <next@@Base+0x3be0>
   1c598:	ldr	r2, [pc, r2]
   1c59c:	b	1beb8 <next@@Base+0x3468>
   1c5a0:	andeq	r4, r1, r0, asr #27
   1c5a4:	andeq	r4, r1, r0, asr #27
   1c5a8:			; <UNDEFINED> instruction: 0x00014db4
   1c5ac:	muleq	r1, r8, sp
   1c5b0:	andeq	r4, r1, ip, asr #25
   1c5b4:	andeq	r3, r0, lr, asr #32
   1c5b8:	andeq	r2, r1, r8, asr sp
   1c5bc:	andeq	r4, r1, r0, lsl #7
   1c5c0:			; <UNDEFINED> instruction: 0x000027b7
   1c5c4:	andeq	r4, r1, ip, asr #21
   1c5c8:	andeq	r4, r1, r8, lsl #27
   1c5cc:	andeq	r4, r1, ip, ror sp
   1c5d0:	andeq	r4, r1, r0, ror ip
   1c5d4:	andeq	r4, r1, r0, lsr sp
   1c5d8:	andeq	r4, r1, ip, lsr #26
   1c5dc:	andeq	r4, r1, ip, lsl #26
   1c5e0:	andeq	r4, r1, r8, asr #24
   1c5e4:	andeq	r4, r1, r8, lsl #24
   1c5e8:	andeq	r4, r1, ip, ror #23
   1c5ec:	andeq	r4, r1, r8, ror fp
   1c5f0:	andeq	r4, r1, r8, lsr fp
   1c5f4:	andeq	r4, r1, ip, lsl fp
   1c5f8:	andeq	r4, r1, ip, asr r6
   1c5fc:	andeq	r4, r1, ip, lsl r6
   1c600:	strdeq	r4, [r1], -ip
   1c604:	andeq	r4, r1, ip, asr #9
   1c608:	andeq	r4, r1, ip, lsl #9
   1c60c:	andeq	r4, r1, ip, ror r4
   1c610:	andeq	r4, r1, r4, lsl r9
   1c614:	andeq	r4, r1, ip, asr #19
   1c618:	andeq	r4, r1, r0, asr #19
   1c61c:	andeq	r4, r1, r8, asr #14
   1c620:	andeq	r4, r1, r0, asr #4
   1c624:	andeq	r4, r1, r4, lsr #4
   1c628:			; <UNDEFINED> instruction: 0x000141b4
   1c62c:	andeq	r4, r1, r4, ror r1
   1c630:	andeq	r4, r1, r8, ror #2
   1c634:	strdeq	r4, [r1], -ip
   1c638:	strdeq	r4, [r1], -r0
   1c63c:			; <UNDEFINED> instruction: 0x000147b0
   1c640:	andeq	r4, r1, r4, lsr #15
   1c644:	muleq	r1, ip, r7
   1c648:	andeq	r4, r1, r0, lsl #15
   1c64c:	andeq	r4, r1, ip, ror r9
   1c650:	andeq	r4, r1, r8, ror r9
   1c654:	andeq	r4, r1, ip, asr r9
   1c658:	andeq	r4, r1, r0, lsr #14
   1c65c:	andeq	r4, r1, r0, ror #13
   1c660:	andeq	r4, r1, r8, asr #13
   1c664:	muleq	r1, r4, r5
   1c668:	andeq	r4, r1, r4, asr r5
   1c66c:	andeq	r4, r1, r8, lsr r5
   1c670:	andeq	r4, r1, r8, lsr r4
   1c674:	strdeq	r4, [r1], -r8
   1c678:	ldrdeq	r4, [r1], -ip
   1c67c:	andeq	r4, r1, ip, asr #6
   1c680:	andeq	r4, r1, ip, lsl #6
   1c684:	strdeq	r4, [r1], -r0
   1c688:	andeq	r4, r1, r0, lsl #5
   1c68c:	ldr	r0, [pc, #508]	; 1c890 <next@@Base+0x3e40>
   1c690:	ldr	r0, [pc, r0]
   1c694:	cmp	r0, #0
   1c698:	beq	1c848 <next@@Base+0x3df8>
   1c69c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c6a0:	add	fp, sp, #24
   1c6a4:	ldr	r9, [pc, #488]	; 1c894 <next@@Base+0x3e44>
   1c6a8:	mov	r4, #0
   1c6ac:	mov	r1, #0
   1c6b0:	add	r9, pc, r9
   1c6b4:	ldrb	r0, [r9]
   1c6b8:	cmp	r0, #1
   1c6bc:	bne	1c740 <next@@Base+0x3cf0>
   1c6c0:	ldr	r0, [pc, #464]	; 1c898 <next@@Base+0x3e48>
   1c6c4:	ldr	r8, [pc, #464]	; 1c89c <next@@Base+0x3e4c>
   1c6c8:	mov	r1, #1
   1c6cc:	add	r0, pc, r0
   1c6d0:	add	r8, pc, r8
   1c6d4:	ldr	r0, [r0, #4]
   1c6d8:	ldr	r2, [pc, #448]	; 1c8a0 <next@@Base+0x3e50>
   1c6dc:	ldr	r2, [pc, r2]
   1c6e0:	ldr	r7, [r8, #4]
   1c6e4:	ldr	r5, [pc, #440]	; 1c8a4 <next@@Base+0x3e54>
   1c6e8:	adds	r3, r2, #8
   1c6ec:	adc	r6, r0, #0
   1c6f0:	ldr	r5, [pc, r5]
   1c6f4:	subs	r3, r5, r3
   1c6f8:	sbcs	r3, r7, r6
   1c6fc:	bcs	1c740 <next@@Base+0x3cf0>
   1c700:	mov	r1, #7
   1c704:	orr	r1, r1, #131072	; 0x20000
   1c708:	adds	r1, r2, r1
   1c70c:	adc	r7, r0, #0
   1c710:	mov	r0, #16646144	; 0xfe0000
   1c714:	orr	r0, r0, #-16777216	; 0xff000000
   1c718:	ldr	r5, [pc, #392]	; 1c8a8 <next@@Base+0x3e58>
   1c71c:	and	r6, r1, r0
   1c720:	ldr	r0, [pc, #388]	; 1c8ac <next@@Base+0x3e5c>
   1c724:	mov	r1, r6
   1c728:	add	r5, pc, r5
   1c72c:	ldr	r0, [pc, r0]
   1c730:	bl	12694 <realloc@plt>
   1c734:	ldrb	r1, [r9]
   1c738:	strd	r6, [r8]
   1c73c:	str	r0, [r5]
   1c740:	ldr	r3, [pc, #360]	; 1c8b0 <next@@Base+0x3e60>
   1c744:	ldr	r2, [pc, #360]	; 1c8b4 <next@@Base+0x3e64>
   1c748:	add	r3, pc, r3
   1c74c:	ldr	r2, [pc, r2]
   1c750:	ldr	r0, [pc, #352]	; 1c8b8 <next@@Base+0x3e68>
   1c754:	ldr	r0, [pc, r0]
   1c758:	ldr	r7, [r3, #4]
   1c75c:	mov	r6, r0
   1c760:	strb	r4, [r6, r2]!
   1c764:	adds	r2, r2, #8
   1c768:	adc	r5, r7, #0
   1c76c:	strb	r4, [r6, #5]
   1c770:	strb	r4, [r6, #3]
   1c774:	strb	r4, [r6, #2]
   1c778:	strb	r4, [r6, #1]
   1c77c:	strb	r4, [r6, #4]!
   1c780:	cmp	r1, #0
   1c784:	strb	r4, [r6, #3]
   1c788:	strb	r4, [r6, #2]
   1c78c:	stm	r3, {r2, r5}
   1c790:	beq	1c7b8 <next@@Base+0x3d68>
   1c794:	ldr	r3, [pc, #288]	; 1c8bc <next@@Base+0x3e6c>
   1c798:	mov	r1, r2
   1c79c:	mov	r2, #1
   1c7a0:	ldr	r3, [pc, r3]
   1c7a4:	bl	126a0 <fwrite@plt>
   1c7a8:	ldr	r0, [pc, #272]	; 1c8c0 <next@@Base+0x3e70>
   1c7ac:	ldr	r0, [pc, r0]
   1c7b0:	bl	12634 <free@plt>
   1c7b4:	b	1c804 <next@@Base+0x3db4>
   1c7b8:	ldr	r1, [pc, #260]	; 1c8c4 <next@@Base+0x3e74>
   1c7bc:	mov	r2, #4
   1c7c0:	ldr	r1, [pc, r1]
   1c7c4:	bl	127b4 <msync@plt>
   1c7c8:	cmn	r0, #1
   1c7cc:	beq	1c854 <next@@Base+0x3e04>
   1c7d0:	ldr	r1, [pc, #252]	; 1c8d4 <next@@Base+0x3e84>
   1c7d4:	ldr	r1, [pc, r1]
   1c7d8:	ldr	r0, [pc, #248]	; 1c8d8 <next@@Base+0x3e88>
   1c7dc:	ldr	r0, [pc, r0]
   1c7e0:	bl	12790 <munmap@plt>
   1c7e4:	ldr	r0, [pc, #240]	; 1c8dc <next@@Base+0x3e8c>
   1c7e8:	ldr	r1, [pc, #240]	; 1c8e0 <next@@Base+0x3e90>
   1c7ec:	mov	r2, #0
   1c7f0:	add	r0, pc, r0
   1c7f4:	add	r1, pc, r1
   1c7f8:	str	r2, [r0]
   1c7fc:	str	r2, [r0, #4]
   1c800:	str	r2, [r1]
   1c804:	ldr	r0, [pc, #216]	; 1c8e4 <next@@Base+0x3e94>
   1c808:	ldr	r0, [pc, r0]
   1c80c:	bl	1261c <fflush@plt>
   1c810:	ldr	r0, [pc, #208]	; 1c8e8 <next@@Base+0x3e98>
   1c814:	ldr	r0, [pc, r0]
   1c818:	bl	1cd94 <__gcov_flush@@Base+0x30c>
   1c81c:	ldr	r0, [pc, #200]	; 1c8ec <next@@Base+0x3e9c>
   1c820:	ldr	r0, [pc, r0]
   1c824:	bl	12784 <fclose@plt>
   1c828:	ldr	r0, [pc, #192]	; 1c8f0 <next@@Base+0x3ea0>
   1c82c:	ldr	r1, [pc, #192]	; 1c8f4 <next@@Base+0x3ea4>
   1c830:	mov	r2, #0
   1c834:	add	r0, pc, r0
   1c838:	add	r1, pc, r1
   1c83c:	str	r2, [r0]
   1c840:	str	r2, [r1]
   1c844:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c848:	ldr	r0, [pc, #168]	; 1c8f8 <next@@Base+0x3ea8>
   1c84c:	ldr	r0, [pc, r0]
   1c850:	b	12634 <free@plt>
   1c854:	bl	12730 <__errno_location@plt>
   1c858:	ldr	r1, [pc, #104]	; 1c8c8 <next@@Base+0x3e78>
   1c85c:	ldr	r1, [pc, r1]
   1c860:	ldr	r0, [r0]
   1c864:	ldr	r4, [r1]
   1c868:	ldr	r5, [pc, #92]	; 1c8cc <next@@Base+0x3e7c>
   1c86c:	ldr	r5, [pc, r5]
   1c870:	bl	126dc <strerror@plt>
   1c874:	ldr	r1, [pc, #84]	; 1c8d0 <next@@Base+0x3e80>
   1c878:	mov	r3, r0
   1c87c:	mov	r0, r4
   1c880:	add	r1, pc, r1
   1c884:	mov	r2, r5
   1c888:	bl	12724 <fprintf@plt>
   1c88c:	b	1c7d0 <next@@Base+0x3d80>
   1c890:	andeq	r4, r1, r0, rrx
   1c894:	andeq	r4, r1, ip, lsr r0
   1c898:	andeq	r4, r1, r4, lsr r0
   1c89c:	andeq	r4, r1, r8, lsr #32
   1c8a0:	andeq	r4, r1, r4, lsr #32
   1c8a4:	andeq	r4, r1, r8
   1c8a8:	andeq	r3, r1, ip, asr #31
   1c8ac:	andeq	r3, r1, r8, asr #31
   1c8b0:			; <UNDEFINED> instruction: 0x00013fb8
   1c8b4:			; <UNDEFINED> instruction: 0x00013fb4
   1c8b8:	andeq	r3, r1, r0, lsr #31
   1c8bc:	andeq	r3, r1, r0, asr pc
   1c8c0:	andeq	r3, r1, r8, asr #30
   1c8c4:	andeq	r3, r1, r8, asr pc
   1c8c8:	andeq	r2, r1, r8, asr r8
   1c8cc:	andeq	r3, r1, ip, ror lr
   1c8d0:	strdeq	r2, [r0], -r9
   1c8d4:	andeq	r3, r1, r4, asr #30
   1c8d8:	andeq	r3, r1, r8, lsl pc
   1c8dc:	andeq	r3, r1, r8, lsr #30
   1c8e0:	andeq	r3, r1, r0, lsl #30
   1c8e4:	andeq	r3, r1, r8, ror #29
   1c8e8:			; <UNDEFINED> instruction: 0x000128bc
   1c8ec:	ldrdeq	r3, [r1], -r0
   1c8f0:			; <UNDEFINED> instruction: 0x00013ebc
   1c8f4:			; <UNDEFINED> instruction: 0x00013ebc
   1c8f8:	muleq	r1, ip, lr
   1c8fc:	push	{r4, sl, fp, lr}
   1c900:	add	fp, sp, #8
   1c904:	mov	r4, r0
   1c908:	mov	r0, #12
   1c90c:	bl	126c4 <malloc@plt>
   1c910:	ldr	r1, [pc, #60]	; 1c954 <next@@Base+0x3f04>
   1c914:	mov	r2, #0
   1c918:	add	r1, pc, r1
   1c91c:	stm	r0, {r1, r4}
   1c920:	str	r2, [r0, #8]
   1c924:	ldr	r1, [pc, #44]	; 1c958 <next@@Base+0x3f08>
   1c928:	ldr	r1, [pc, r1]
   1c92c:	mov	r2, r1
   1c930:	ldr	r3, [r2], #4
   1c934:	ldr	r4, [r2]
   1c938:	cmp	r3, #0
   1c93c:	mov	r3, r2
   1c940:	addne	r3, r4, #8
   1c944:	moveq	r2, r1
   1c948:	str	r0, [r3]
   1c94c:	str	r0, [r2]
   1c950:	pop	{r4, sl, fp, pc}
   1c954:	strdeq	r3, [r1], -r4
   1c958:	andeq	r2, r1, r8, lsl #15
   1c95c:	push	{r4, r5, fp, lr}
   1c960:	add	fp, sp, #8
   1c964:	ldr	r0, [pc, #56]	; 1c9a4 <next@@Base+0x3f54>
   1c968:	ldr	r0, [pc, r0]
   1c96c:	ldr	r4, [r0]
   1c970:	cmp	r4, #0
   1c974:	beq	1c9a0 <next@@Base+0x3f50>
   1c978:	ldr	r5, [pc, #40]	; 1c9a8 <next@@Base+0x3f58>
   1c97c:	add	r5, pc, r5
   1c980:	ldr	r0, [r4]
   1c984:	cmp	r0, r5
   1c988:	bne	1c994 <next@@Base+0x3f44>
   1c98c:	ldr	r0, [r4, #4]
   1c990:	blx	r0
   1c994:	ldr	r4, [r4, #8]
   1c998:	cmp	r4, #0
   1c99c:	bne	1c980 <next@@Base+0x3f30>
   1c9a0:	pop	{r4, r5, fp, pc}
   1c9a4:	andeq	r2, r1, r8, asr #14
   1c9a8:	muleq	r1, r0, sp
   1c9ac:	push	{r4, r5, r6, r7, fp, lr}
   1c9b0:	add	fp, sp, #16
   1c9b4:	ldr	r4, [pc, #100]	; 1ca20 <next@@Base+0x3fd0>
   1c9b8:	ldr	r4, [pc, r4]
   1c9bc:	ldr	r0, [r4]
   1c9c0:	cmp	r0, #0
   1c9c4:	beq	1ca1c <next@@Base+0x3fcc>
   1c9c8:	ldr	r5, [pc, #84]	; 1ca24 <next@@Base+0x3fd4>
   1c9cc:	mov	r6, #0
   1c9d0:	add	r5, pc, r5
   1c9d4:	ldr	r1, [r0]
   1c9d8:	ldr	r7, [r0, #8]
   1c9dc:	cmp	r1, r5
   1c9e0:	beq	1c9ec <next@@Base+0x3f9c>
   1c9e4:	mov	r6, r0
   1c9e8:	b	1ca10 <next@@Base+0x3fc0>
   1c9ec:	ldr	r1, [r4]
   1c9f0:	cmp	r0, r1
   1c9f4:	streq	r7, [r4]
   1c9f8:	ldr	r1, [r4, #4]
   1c9fc:	cmp	r0, r1
   1ca00:	streq	r6, [r4, #4]
   1ca04:	cmp	r6, #0
   1ca08:	strne	r7, [r6, #8]
   1ca0c:	bl	12634 <free@plt>
   1ca10:	mov	r0, r7
   1ca14:	cmp	r7, #0
   1ca18:	bne	1c9d4 <next@@Base+0x3f84>
   1ca1c:	pop	{r4, r5, r6, r7, fp, pc}
   1ca20:	strdeq	r2, [r1], -r8
   1ca24:	andeq	r3, r1, ip, lsr sp
   1ca28:	push	{r4, sl, fp, lr}
   1ca2c:	add	fp, sp, #8
   1ca30:	mov	r4, r0
   1ca34:	mov	r0, #12
   1ca38:	bl	126c4 <malloc@plt>
   1ca3c:	ldr	r1, [pc, #60]	; 1ca80 <next@@Base+0x4030>
   1ca40:	mov	r2, #0
   1ca44:	add	r1, pc, r1
   1ca48:	stm	r0, {r1, r4}
   1ca4c:	str	r2, [r0, #8]
   1ca50:	ldr	r1, [pc, #44]	; 1ca84 <next@@Base+0x4034>
   1ca54:	ldr	r1, [pc, r1]
   1ca58:	mov	r2, r1
   1ca5c:	ldr	r3, [r2], #4
   1ca60:	ldr	r4, [r2]
   1ca64:	cmp	r3, #0
   1ca68:	mov	r3, r2
   1ca6c:	addne	r3, r4, #8
   1ca70:	moveq	r2, r1
   1ca74:	str	r0, [r3]
   1ca78:	str	r0, [r2]
   1ca7c:	pop	{r4, sl, fp, pc}
   1ca80:	andeq	r3, r1, r8, asr #25
   1ca84:	andeq	r2, r1, r8, asr r6

0001ca88 <__gcov_flush@@Base>:
   1ca88:	push	{r4, sl, fp, lr}
   1ca8c:	add	fp, sp, #8
   1ca90:	ldr	r0, [pc, #36]	; 1cabc <__gcov_flush@@Base+0x34>
   1ca94:	ldr	r0, [pc, r0]
   1ca98:	ldr	r4, [r0]
   1ca9c:	cmp	r4, #0
   1caa0:	beq	1cab8 <__gcov_flush@@Base+0x30>
   1caa4:	ldr	r0, [r4, #4]
   1caa8:	blx	r0
   1caac:	ldr	r4, [r4, #8]
   1cab0:	cmp	r4, #0
   1cab4:	bne	1caa4 <__gcov_flush@@Base+0x1c>
   1cab8:	pop	{r4, sl, fp, pc}
   1cabc:	andeq	r2, r1, r8, lsl r6
   1cac0:	push	{r4, r5, r6, r7, fp, lr}
   1cac4:	add	fp, sp, #16
   1cac8:	ldr	r4, [pc, #100]	; 1cb34 <__gcov_flush@@Base+0xac>
   1cacc:	ldr	r4, [pc, r4]
   1cad0:	ldr	r0, [r4]
   1cad4:	cmp	r0, #0
   1cad8:	beq	1cb30 <__gcov_flush@@Base+0xa8>
   1cadc:	ldr	r5, [pc, #84]	; 1cb38 <__gcov_flush@@Base+0xb0>
   1cae0:	mov	r6, #0
   1cae4:	add	r5, pc, r5
   1cae8:	ldr	r1, [r0]
   1caec:	ldr	r7, [r0, #8]
   1caf0:	cmp	r1, r5
   1caf4:	beq	1cb00 <__gcov_flush@@Base+0x78>
   1caf8:	mov	r6, r0
   1cafc:	b	1cb24 <__gcov_flush@@Base+0x9c>
   1cb00:	ldr	r1, [r4]
   1cb04:	cmp	r0, r1
   1cb08:	streq	r7, [r4]
   1cb0c:	ldr	r1, [r4, #4]
   1cb10:	cmp	r0, r1
   1cb14:	streq	r6, [r4, #4]
   1cb18:	cmp	r6, #0
   1cb1c:	strne	r7, [r6, #8]
   1cb20:	bl	12634 <free@plt>
   1cb24:	mov	r0, r7
   1cb28:	cmp	r7, #0
   1cb2c:	bne	1cae8 <__gcov_flush@@Base+0x60>
   1cb30:	pop	{r4, r5, r6, r7, fp, pc}
   1cb34:	andeq	r2, r1, r0, ror #11
   1cb38:	andeq	r3, r1, r8, lsr #24
   1cb3c:	push	{r4, r5, fp, lr}
   1cb40:	add	fp, sp, #8
   1cb44:	mov	r4, r1
   1cb48:	cmp	r0, #0
   1cb4c:	beq	1cb9c <__gcov_flush@@Base+0x114>
   1cb50:	mov	r5, r0
   1cb54:	mov	r0, #12
   1cb58:	bl	126c4 <malloc@plt>
   1cb5c:	ldr	r1, [pc, #204]	; 1cc30 <__gcov_flush@@Base+0x1a8>
   1cb60:	mov	r2, #0
   1cb64:	add	r1, pc, r1
   1cb68:	stm	r0, {r1, r5}
   1cb6c:	str	r2, [r0, #8]
   1cb70:	ldr	r1, [pc, #188]	; 1cc34 <__gcov_flush@@Base+0x1ac>
   1cb74:	ldr	r1, [pc, r1]
   1cb78:	mov	r2, r1
   1cb7c:	ldr	r3, [r2], #4
   1cb80:	ldr	r5, [r2]
   1cb84:	cmp	r3, #0
   1cb88:	mov	r3, r2
   1cb8c:	addne	r3, r5, #8
   1cb90:	moveq	r2, r1
   1cb94:	str	r0, [r3]
   1cb98:	str	r0, [r2]
   1cb9c:	cmp	r4, #0
   1cba0:	beq	1cbec <__gcov_flush@@Base+0x164>
   1cba4:	mov	r0, #12
   1cba8:	bl	126c4 <malloc@plt>
   1cbac:	ldr	r1, [pc, #132]	; 1cc38 <__gcov_flush@@Base+0x1b0>
   1cbb0:	mov	r2, #0
   1cbb4:	add	r1, pc, r1
   1cbb8:	stm	r0, {r1, r4}
   1cbbc:	str	r2, [r0, #8]
   1cbc0:	ldr	r1, [pc, #116]	; 1cc3c <__gcov_flush@@Base+0x1b4>
   1cbc4:	ldr	r1, [pc, r1]
   1cbc8:	mov	r2, r1
   1cbcc:	ldr	r3, [r2], #4
   1cbd0:	ldr	r5, [r2]
   1cbd4:	cmp	r3, #0
   1cbd8:	mov	r3, r2
   1cbdc:	addne	r3, r5, #8
   1cbe0:	moveq	r2, r1
   1cbe4:	str	r0, [r3]
   1cbe8:	str	r0, [r2]
   1cbec:	ldr	r1, [pc, #76]	; 1cc40 <__gcov_flush@@Base+0x1b8>
   1cbf0:	add	r1, pc, r1
   1cbf4:	ldrb	r0, [r1]
   1cbf8:	cmp	r0, #0
   1cbfc:	popne	{r4, r5, fp, pc}
   1cc00:	ldr	r0, [pc, #60]	; 1cc44 <__gcov_flush@@Base+0x1bc>
   1cc04:	mov	r2, #1
   1cc08:	strb	r2, [r1]
   1cc0c:	add	r0, pc, r0
   1cc10:	bl	1d0f0 <__libc_csu_fini@@Base+0x4>
   1cc14:	ldr	r0, [pc, #44]	; 1cc48 <__gcov_flush@@Base+0x1c0>
   1cc18:	add	r0, pc, r0
   1cc1c:	bl	1d0f0 <__libc_csu_fini@@Base+0x4>
   1cc20:	ldr	r0, [pc, #36]	; 1cc4c <__gcov_flush@@Base+0x1c4>
   1cc24:	add	r0, pc, r0
   1cc28:	pop	{r4, r5, fp, lr}
   1cc2c:	b	1d0f0 <__libc_csu_fini@@Base+0x4>
   1cc30:	andeq	r3, r1, r8, lsr #23
   1cc34:	andeq	r2, r1, ip, lsr r5
   1cc38:	andeq	r3, r1, r8, asr fp
   1cc3c:	andeq	r2, r1, r8, ror #9
   1cc40:	andeq	r3, r1, r0, lsr #22
   1cc44:			; <UNDEFINED> instruction: 0xfffffeac
   1cc48:			; <UNDEFINED> instruction: 0xfffffd8c
   1cc4c:			; <UNDEFINED> instruction: 0xfffffd30
   1cc50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cc54:	add	fp, sp, #24
   1cc58:	ldr	r7, [pc, #76]	; 1ccac <__gcov_flush@@Base+0x224>
   1cc5c:	mov	r4, r0
   1cc60:	mov	r5, #1
   1cc64:	mov	r8, #0
   1cc68:	ldr	r7, [pc, r7]
   1cc6c:	mov	r6, #47	; 0x2f
   1cc70:	b	1cc78 <__gcov_flush@@Base+0x1f0>
   1cc74:	add	r5, r5, #1
   1cc78:	ldrb	r0, [r4, r5]
   1cc7c:	cmp	r0, #47	; 0x2f
   1cc80:	beq	1cc90 <__gcov_flush@@Base+0x208>
   1cc84:	cmp	r0, #0
   1cc88:	bne	1cc74 <__gcov_flush@@Base+0x1ec>
   1cc8c:	b	1cca8 <__gcov_flush@@Base+0x220>
   1cc90:	strb	r8, [r4, r5]
   1cc94:	ldr	r1, [r7]
   1cc98:	mov	r0, r4
   1cc9c:	bl	12748 <mkdir@plt>
   1cca0:	strb	r6, [r4, r5]
   1cca4:	b	1cc74 <__gcov_flush@@Base+0x1ec>
   1cca8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ccac:	andeq	r2, r1, r0, asr #8
   1ccb0:	ldr	r0, [pc, #8]	; 1ccc0 <__gcov_flush@@Base+0x238>
   1ccb4:	ldr	r0, [pc, r0]
   1ccb8:	ldr	r0, [r0]
   1ccbc:	bx	lr
   1ccc0:	strdeq	r2, [r1], -r4
   1ccc4:	ldr	r1, [pc, #8]	; 1ccd4 <__gcov_flush@@Base+0x24c>
   1ccc8:	ldr	r1, [pc, r1]
   1cccc:	str	r0, [r1]
   1ccd0:	bx	lr
   1ccd4:	andeq	r2, r1, r0, ror #7
   1ccd8:	push	{r4, r5, r6, sl, fp, lr}
   1ccdc:	add	fp, sp, #16
   1cce0:	sub	sp, sp, #392	; 0x188
   1cce4:	mov	r6, sp
   1cce8:	mov	r5, r0
   1ccec:	mov	r0, r6
   1ccf0:	mov	r4, r1
   1ccf4:	bl	12670 <uname@plt>
   1ccf8:	cmp	r0, #0
   1ccfc:	blt	1cd14 <__gcov_flush@@Base+0x28c>
   1cd00:	add	r1, r6, #65	; 0x41
   1cd04:	mov	r0, r5
   1cd08:	mov	r2, r4
   1cd0c:	bl	1276c <strncpy@plt>
   1cd10:	mov	r0, #0
   1cd14:	sub	sp, fp, #16
   1cd18:	pop	{r4, r5, r6, sl, fp, pc}
   1cd1c:	push	{r4, r5, r6, sl, fp, lr}
   1cd20:	add	fp, sp, #16
   1cd24:	sub	sp, sp, #32
   1cd28:	mov	r4, #0
   1cd2c:	mov	r5, r0
   1cd30:	str	r4, [sp, #20]
   1cd34:	str	r4, [sp, #16]
   1cd38:	str	r4, [sp, #12]
   1cd3c:	str	r4, [sp, #8]
   1cd40:	strh	r4, [sp, #2]
   1cd44:	bl	126f4 <getpid@plt>
   1cd48:	mov	r6, sp
   1cd4c:	str	r0, [sp, #24]
   1cd50:	mov	r0, #1
   1cd54:	strh	r0, [sp]
   1cd58:	mov	r0, r5
   1cd5c:	mov	r1, #14
   1cd60:	mov	r2, r6
   1cd64:	bl	1279c <fcntl64@plt>
   1cd68:	cmn	r0, #1
   1cd6c:	bne	1cd88 <__gcov_flush@@Base+0x300>
   1cd70:	bl	12730 <__errno_location@plt>
   1cd74:	ldr	r0, [r0]
   1cd78:	cmp	r0, #4
   1cd7c:	beq	1cd58 <__gcov_flush@@Base+0x2d0>
   1cd80:	cmp	r0, #37	; 0x25
   1cd84:	mvneq	r4, #0
   1cd88:	mov	r0, r4
   1cd8c:	sub	sp, fp, #16
   1cd90:	pop	{r4, r5, r6, sl, fp, pc}
   1cd94:	push	{r4, r5, r6, sl, fp, lr}
   1cd98:	add	fp, sp, #16
   1cd9c:	sub	sp, sp, #32
   1cda0:	mov	r4, #0
   1cda4:	mov	r5, r0
   1cda8:	str	r4, [sp, #20]
   1cdac:	str	r4, [sp, #16]
   1cdb0:	str	r4, [sp, #12]
   1cdb4:	str	r4, [sp, #8]
   1cdb8:	strh	r4, [sp, #2]
   1cdbc:	bl	126f4 <getpid@plt>
   1cdc0:	mov	r6, sp
   1cdc4:	str	r0, [sp, #24]
   1cdc8:	mov	r0, #2
   1cdcc:	strh	r0, [sp]
   1cdd0:	mov	r0, r5
   1cdd4:	mov	r1, #14
   1cdd8:	mov	r2, r6
   1cddc:	bl	1279c <fcntl64@plt>
   1cde0:	cmn	r0, #1
   1cde4:	bne	1ce00 <__gcov_flush@@Base+0x378>
   1cde8:	bl	12730 <__errno_location@plt>
   1cdec:	ldr	r0, [r0]
   1cdf0:	cmp	r0, #4
   1cdf4:	beq	1cdd0 <__gcov_flush@@Base+0x348>
   1cdf8:	cmp	r0, #37	; 0x25
   1cdfc:	mvneq	r4, #0
   1ce00:	mov	r0, r4
   1ce04:	sub	sp, fp, #16
   1ce08:	pop	{r4, r5, r6, sl, fp, pc}
   1ce0c:	push	{r4, r5, fp, lr}
   1ce10:	add	fp, sp, #8
   1ce14:	sub	sp, sp, #32
   1ce18:	mov	r2, #182	; 0xb6
   1ce1c:	orr	r2, r2, #256	; 0x100
   1ce20:	mov	r1, #66	; 0x42
   1ce24:	bl	126ac <open64@plt>
   1ce28:	cmp	r0, #0
   1ce2c:	blt	1cea8 <__gcov_flush@@Base+0x420>
   1ce30:	mov	r4, r0
   1ce34:	mov	r0, #0
   1ce38:	str	r0, [sp, #20]
   1ce3c:	str	r0, [sp, #16]
   1ce40:	str	r0, [sp, #12]
   1ce44:	str	r0, [sp, #8]
   1ce48:	strh	r0, [sp, #2]
   1ce4c:	bl	126f4 <getpid@plt>
   1ce50:	mov	r5, sp
   1ce54:	str	r0, [sp, #24]
   1ce58:	mov	r0, #1
   1ce5c:	strh	r0, [sp]
   1ce60:	mov	r0, r4
   1ce64:	mov	r1, #14
   1ce68:	mov	r2, r5
   1ce6c:	bl	1279c <fcntl64@plt>
   1ce70:	cmn	r0, #1
   1ce74:	bne	1ce90 <__gcov_flush@@Base+0x408>
   1ce78:	bl	12730 <__errno_location@plt>
   1ce7c:	ldr	r0, [r0]
   1ce80:	cmp	r0, #4
   1ce84:	beq	1ce60 <__gcov_flush@@Base+0x3d8>
   1ce88:	cmp	r0, #37	; 0x25
   1ce8c:	beq	1ceb4 <__gcov_flush@@Base+0x42c>
   1ce90:	ldr	r1, [pc, #76]	; 1cee4 <__gcov_flush@@Base+0x45c>
   1ce94:	mov	r0, r4
   1ce98:	add	r1, pc, r1
   1ce9c:	bl	125f8 <fdopen@plt>
   1cea0:	sub	sp, fp, #8
   1cea4:	pop	{r4, r5, fp, pc}
   1cea8:	mov	r0, #0
   1ceac:	sub	sp, fp, #8
   1ceb0:	pop	{r4, r5, fp, pc}
   1ceb4:	ldr	r1, [pc, #28]	; 1ced8 <__gcov_flush@@Base+0x450>
   1ceb8:	ldr	r2, [pc, #28]	; 1cedc <__gcov_flush@@Base+0x454>
   1cebc:	ldr	r0, [pc, #28]	; 1cee0 <__gcov_flush@@Base+0x458>
   1cec0:	add	r1, pc, r1
   1cec4:	add	r2, pc, r2
   1cec8:	ldr	r0, [pc, r0]
   1cecc:	ldr	r0, [r0]
   1ced0:	bl	12724 <fprintf@plt>
   1ced4:	b	1ce90 <__gcov_flush@@Base+0x408>
   1ced8:	ldrdeq	r1, [r0], -sl
   1cedc:	andeq	r1, r0, pc, lsl sp
   1cee0:	andeq	r2, r1, ip, ror #3
   1cee4:	andeq	r1, r0, r0, ror #22
   1cee8:	push	{r4, r5, r6, sl, fp, lr}
   1ceec:	add	fp, sp, #16
   1cef0:	mov	r6, r0
   1cef4:	ldr	r0, [pc, #120]	; 1cf74 <__gcov_flush@@Base+0x4ec>
   1cef8:	mov	r4, r1
   1cefc:	add	r0, pc, r0
   1cf00:	bl	126b8 <getenv@plt>
   1cf04:	mov	r5, r0
   1cf08:	ldr	r0, [pc, #104]	; 1cf78 <__gcov_flush@@Base+0x4f0>
   1cf0c:	add	r0, pc, r0
   1cf10:	bl	126b8 <getenv@plt>
   1cf14:	mov	r1, #0
   1cf18:	str	r1, [r4]
   1cf1c:	str	r1, [r6]
   1cf20:	cmp	r5, #0
   1cf24:	ldrbne	r2, [r5]
   1cf28:	cmpne	r2, #0
   1cf2c:	bne	1cf38 <__gcov_flush@@Base+0x4b0>
   1cf30:	mov	r0, r1
   1cf34:	pop	{r4, r5, r6, sl, fp, pc}
   1cf38:	cmp	r0, #0
   1cf3c:	beq	1cf54 <__gcov_flush@@Base+0x4cc>
   1cf40:	mov	r1, #0
   1cf44:	mov	r2, #10
   1cf48:	bl	12604 <strtol@plt>
   1cf4c:	bic	r0, r0, r0, asr #31
   1cf50:	b	1cf58 <__gcov_flush@@Base+0x4d0>
   1cf54:	mov	r0, #0
   1cf58:	str	r0, [r6]
   1cf5c:	mov	r0, r5
   1cf60:	bl	1270c <strlen@plt>
   1cf64:	mov	r1, r5
   1cf68:	str	r0, [r4]
   1cf6c:	mov	r0, r1
   1cf70:	pop	{r4, r5, r6, sl, fp, pc}
   1cf74:	andeq	r1, r0, r5, lsl sp
   1cf78:	andeq	r1, r0, r1, lsl sp
   1cf7c:	push	{r4, r5, r6, r7, fp, lr}
   1cf80:	add	fp, sp, #16
   1cf84:	mov	r6, r0
   1cf88:	ldr	r0, [fp, #8]
   1cf8c:	mov	r5, r3
   1cf90:	mov	r7, r2
   1cf94:	mov	r4, r1
   1cf98:	cmp	r0, #1
   1cf9c:	blt	1cfd4 <__gcov_flush@@Base+0x54c>
   1cfa0:	add	r1, r4, #1
   1cfa4:	mov	r2, #0
   1cfa8:	ldrb	r3, [r1]
   1cfac:	cmp	r3, #47	; 0x2f
   1cfb0:	beq	1cfc0 <__gcov_flush@@Base+0x538>
   1cfb4:	cmp	r3, #0
   1cfb8:	bne	1cfc8 <__gcov_flush@@Base+0x540>
   1cfbc:	b	1cfd4 <__gcov_flush@@Base+0x54c>
   1cfc0:	add	r2, r2, #1
   1cfc4:	mov	r4, r1
   1cfc8:	add	r1, r1, #1
   1cfcc:	cmp	r2, r0
   1cfd0:	blt	1cfa8 <__gcov_flush@@Base+0x520>
   1cfd4:	mov	r0, r6
   1cfd8:	mov	r1, r7
   1cfdc:	mov	r2, r5
   1cfe0:	bl	1264c <memcpy@plt>
   1cfe4:	add	r0, r7, r5
   1cfe8:	ldrb	r0, [r0, #-1]
   1cfec:	cmp	r0, #47	; 0x2f
   1cff0:	movne	r0, #47	; 0x2f
   1cff4:	strbne	r0, [r6, r5]
   1cff8:	mov	r0, r4
   1cffc:	addne	r5, r5, #1
   1d000:	add	r5, r6, r5
   1d004:	bl	1270c <strlen@plt>
   1d008:	add	r2, r0, #1
   1d00c:	mov	r0, r5
   1d010:	mov	r1, r4
   1d014:	pop	{r4, r5, r6, r7, fp, lr}
   1d018:	b	1264c <memcpy@plt>
   1d01c:	mov	r1, #47	; 0x2f
   1d020:	b	12718 <strchr@plt>
   1d024:	mov	r1, #47	; 0x2f
   1d028:	b	127a8 <strrchr@plt>
   1d02c:	push	{fp, lr}
   1d030:	mov	fp, sp
   1d034:	sub	sp, sp, #8
   1d038:	mov	r0, #0
   1d03c:	str	r0, [sp, #4]
   1d040:	add	r1, sp, #4
   1d044:	mov	r0, #2
   1d048:	bl	12778 <prctl@plt>
   1d04c:	ldr	r1, [sp, #4]
   1d050:	cmp	r0, #0
   1d054:	cmpeq	r1, #9
   1d058:	bne	1d06c <__gcov_flush@@Base+0x5e4>
   1d05c:	mov	r0, #1
   1d060:	mov	r1, #0
   1d064:	bl	12778 <prctl@plt>
   1d068:	ldr	r1, [sp, #4]
   1d06c:	sub	r0, r1, #9
   1d070:	clz	r0, r0
   1d074:	lsr	r0, r0, #5
   1d078:	mov	sp, fp
   1d07c:	pop	{fp, pc}
   1d080:	mov	r0, #1
   1d084:	mov	r1, #9
   1d088:	b	12778 <prctl@plt>

0001d08c <__libc_csu_init@@Base>:
   1d08c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d090:	mov	r7, r0
   1d094:	ldr	r6, [pc, #72]	; 1d0e4 <__libc_csu_init@@Base+0x58>
   1d098:	ldr	r5, [pc, #72]	; 1d0e8 <__libc_csu_init@@Base+0x5c>
   1d09c:	add	r6, pc, r6
   1d0a0:	add	r5, pc, r5
   1d0a4:	sub	r6, r6, r5
   1d0a8:	mov	r8, r1
   1d0ac:	mov	r9, r2
   1d0b0:	bl	125d8 <fdopen@plt-0x20>
   1d0b4:	asrs	r6, r6, #2
   1d0b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d0bc:	mov	r4, #0
   1d0c0:	add	r4, r4, #1
   1d0c4:	ldr	r3, [r5], #4
   1d0c8:	mov	r2, r9
   1d0cc:	mov	r1, r8
   1d0d0:	mov	r0, r7
   1d0d4:	blx	r3
   1d0d8:	cmp	r6, r4
   1d0dc:	bne	1d0c0 <__libc_csu_init@@Base+0x34>
   1d0e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d0e4:	andeq	r1, r1, r0, ror #28
   1d0e8:	andeq	r1, r1, r8, asr #28

0001d0ec <__libc_csu_fini@@Base>:
   1d0ec:	bx	lr
   1d0f0:	ldr	r3, [pc, #12]	; 1d104 <__libc_csu_fini@@Base+0x18>
   1d0f4:	mov	r1, #0
   1d0f8:	add	r3, pc, r3
   1d0fc:	ldr	r2, [r3]
   1d100:	b	1273c <__cxa_atexit@plt>
   1d104:	andeq	r1, r1, r8, asr #31

Disassembly of section .fini:

0001d108 <.fini>:
   1d108:	push	{r3, lr}
   1d10c:	pop	{r3, pc}
