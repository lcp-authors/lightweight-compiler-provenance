
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011358 <.init>:
   11358:	push	{r3, lr}
   1135c:	bl	1175c <__assert_fail@plt+0x48>
   11360:	pop	{r3, pc}

Disassembly of section .plt:

00011364 <fdopen@plt-0x14>:
   11364:	push	{lr}		; (str lr, [sp, #-4]!)
   11368:	ldr	lr, [pc, #4]	; 11374 <fdopen@plt-0x4>
   1136c:	add	lr, pc, lr
   11370:	ldr	pc, [lr, #8]!
   11374:	andeq	sl, r1, ip, lsl #25

00011378 <fdopen@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3212]!	; 0xc8c

00011384 <calloc@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3204]!	; 0xc84

00011390 <fputs_unlocked@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3196]!	; 0xc7c

0001139c <raise@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3188]!	; 0xc74

000113a8 <strcmp@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3180]!	; 0xc6c

000113b4 <strtol@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3172]!	; 0xc64

000113c0 <read@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3164]!	; 0xc5c

000113cc <fflush@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3156]!	; 0xc54

000113d8 <sigprocmask@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113e4 <memmove@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3140]!	; 0xc44

000113f0 <free@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3132]!	; 0xc3c

000113fc <_exit@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3124]!	; 0xc34

00011408 <memcpy@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3116]!	; 0xc2c

00011414 <__strtoull_internal@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3108]!	; 0xc24

00011420 <mbsinit@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3100]!	; 0xc1c

0001142c <ftruncate64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3092]!	; 0xc14

00011438 <fwrite_unlocked@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3084]!	; 0xc0c

00011444 <dcgettext@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3076]!	; 0xc04

00011450 <dup2@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3068]!	; 0xbfc

0001145c <realloc@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3060]!	; 0xbf4

00011468 <textdomain@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3052]!	; 0xbec

00011474 <rawmemchr@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011480 <iswprint@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3036]!	; 0xbdc

0001148c <__fxstat64@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3028]!	; 0xbd4

00011498 <sigaction@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3020]!	; 0xbcc

000114a4 <fwrite@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3012]!	; 0xbc4

000114b0 <lseek64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3004]!	; 0xbbc

000114bc <waitpid@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114c8 <__ctype_get_mb_cur_max@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #2988]!	; 0xbac

000114d4 <strcpy@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #2980]!	; 0xba4

000114e0 <__fpending@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114ec <mbrtowc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #2964]!	; 0xb94

000114f8 <error@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2956]!	; 0xb8c

00011504 <open64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2948]!	; 0xb84

00011510 <getenv@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2940]!	; 0xb7c

0001151c <malloc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2932]!	; 0xb74

00011528 <sigaddset@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2924]!	; 0xb6c

00011534 <__libc_start_main@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2916]!	; 0xb64

00011540 <__freading@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2908]!	; 0xb5c

0001154c <__gmon_start__@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2900]!	; 0xb54

00011558 <getopt_long@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2892]!	; 0xb4c

00011564 <__ctype_b_loc@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2884]!	; 0xb44

00011570 <exit@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2876]!	; 0xb3c

0001157c <bcmp@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2868]!	; 0xb34

00011588 <strlen@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2860]!	; 0xb2c

00011594 <__libc_current_sigrtmax@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2852]!	; 0xb24

000115a0 <strchr@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2844]!	; 0xb1c

000115ac <setenv@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2836]!	; 0xb14

000115b8 <memrchr@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115c4 <getpagesize@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2820]!	; 0xb04

000115d0 <__errno_location@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2812]!	; 0xafc

000115dc <__sprintf_chk@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115e8 <__cxa_atexit@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2796]!	; 0xaec

000115f4 <memset@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2788]!	; 0xae4

00011600 <__printf_chk@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2780]!	; 0xadc

0001160c <write@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2772]!	; 0xad4

00011618 <fileno@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2764]!	; 0xacc

00011624 <__fprintf_chk@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2756]!	; 0xac4

00011630 <memchr@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2748]!	; 0xabc

0001163c <fclose@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2740]!	; 0xab4

00011648 <pipe@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2732]!	; 0xaac

00011654 <fseeko64@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011660 <fcntl64@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2716]!	; 0xa9c

0001166c <setlocale@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2708]!	; 0xa94

00011678 <sigemptyset@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2700]!	; 0xa8c

00011684 <fork@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2692]!	; 0xa84

00011690 <execl@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2684]!	; 0xa7c

0001169c <strrchr@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2676]!	; 0xa74

000116a8 <nl_langinfo@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2668]!	; 0xa6c

000116b4 <clearerr_unlocked@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2660]!	; 0xa64

000116c0 <bindtextdomain@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2652]!	; 0xa5c

000116cc <aligned_alloc@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2644]!	; 0xa54

000116d8 <__libc_current_sigrtmin@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #106496	; 0x1a000
   116e0:	ldr	pc, [ip, #2636]!	; 0xa4c

000116e4 <strncmp@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #106496	; 0x1a000
   116ec:	ldr	pc, [ip, #2628]!	; 0xa44

000116f0 <abort@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #106496	; 0x1a000
   116f8:	ldr	pc, [ip, #2620]!	; 0xa3c

000116fc <close@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #106496	; 0x1a000
   11704:	ldr	pc, [ip, #2612]!	; 0xa34

00011708 <strspn@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #106496	; 0x1a000
   11710:	ldr	pc, [ip, #2604]!	; 0xa2c

00011714 <__assert_fail@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #106496	; 0x1a000
   1171c:	ldr	pc, [ip, #2596]!	; 0xa24

Disassembly of section .text:

00011720 <.text>:
   11720:	mov	fp, #0
   11724:	mov	lr, #0
   11728:	pop	{r1}		; (ldr r1, [sp], #4)
   1172c:	mov	r2, sp
   11730:	push	{r2}		; (str r2, [sp, #-4]!)
   11734:	push	{r0}		; (str r0, [sp, #-4]!)
   11738:	ldr	ip, [pc, #16]	; 11750 <__assert_fail@plt+0x3c>
   1173c:	push	{ip}		; (str ip, [sp, #-4]!)
   11740:	ldr	r0, [pc, #12]	; 11754 <__assert_fail@plt+0x40>
   11744:	ldr	r3, [pc, #12]	; 11758 <__assert_fail@plt+0x44>
   11748:	bl	11534 <__libc_start_main@plt>
   1174c:	bl	116f0 <abort@plt>
   11750:	andeq	r9, r1, r0, asr #31
   11754:	andeq	r1, r1, ip, lsl #22
   11758:	andeq	r9, r1, r0, ror #30
   1175c:	ldr	r3, [pc, #20]	; 11778 <__assert_fail@plt+0x64>
   11760:	ldr	r2, [pc, #20]	; 1177c <__assert_fail@plt+0x68>
   11764:	add	r3, pc, r3
   11768:	ldr	r2, [r3, r2]
   1176c:	cmp	r2, #0
   11770:	bxeq	lr
   11774:	b	1154c <__gmon_start__@plt>
   11778:	muleq	r1, r4, r8
   1177c:	andeq	r0, r0, r4, asr #2
   11780:	ldr	r0, [pc, #24]	; 117a0 <__assert_fail@plt+0x8c>
   11784:	ldr	r3, [pc, #24]	; 117a4 <__assert_fail@plt+0x90>
   11788:	cmp	r3, r0
   1178c:	bxeq	lr
   11790:	ldr	r3, [pc, #16]	; 117a8 <__assert_fail@plt+0x94>
   11794:	cmp	r3, #0
   11798:	bxeq	lr
   1179c:	bx	r3
   117a0:	andeq	ip, r2, ip, asr #6
   117a4:	andeq	ip, r2, ip, asr #6
   117a8:	andeq	r0, r0, r0
   117ac:	ldr	r0, [pc, #36]	; 117d8 <__assert_fail@plt+0xc4>
   117b0:	ldr	r1, [pc, #36]	; 117dc <__assert_fail@plt+0xc8>
   117b4:	sub	r1, r1, r0
   117b8:	asr	r1, r1, #2
   117bc:	add	r1, r1, r1, lsr #31
   117c0:	asrs	r1, r1, #1
   117c4:	bxeq	lr
   117c8:	ldr	r3, [pc, #16]	; 117e0 <__assert_fail@plt+0xcc>
   117cc:	cmp	r3, #0
   117d0:	bxeq	lr
   117d4:	bx	r3
   117d8:	andeq	ip, r2, ip, asr #6
   117dc:	andeq	ip, r2, ip, asr #6
   117e0:	andeq	r0, r0, r0
   117e4:	push	{r4, lr}
   117e8:	ldr	r4, [pc, #24]	; 11808 <__assert_fail@plt+0xf4>
   117ec:	ldrb	r3, [r4]
   117f0:	cmp	r3, #0
   117f4:	popne	{r4, pc}
   117f8:	bl	11780 <__assert_fail@plt+0x6c>
   117fc:	mov	r3, #1
   11800:	strb	r3, [r4]
   11804:	pop	{r4, pc}
   11808:	andeq	ip, r2, ip, ror #6
   1180c:	b	117ac <__assert_fail@plt+0x98>
   11810:	push	{fp, lr}
   11814:	mov	fp, sp
   11818:	sub	sp, sp, #56	; 0x38
   1181c:	mov	r4, r0
   11820:	cmp	r0, #0
   11824:	bne	11ac8 <__assert_fail@plt+0x3b4>
   11828:	movw	r1, #40979	; 0xa013
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	movt	r1, #1
   11838:	bl	11444 <dcgettext@plt>
   1183c:	mov	r1, r0
   11840:	movw	r0, #50468	; 0xc524
   11844:	movt	r0, #2
   11848:	ldr	r2, [r0]
   1184c:	mov	r0, #1
   11850:	bl	11600 <__printf_chk@plt>
   11854:	movw	r1, #41018	; 0xa03a
   11858:	mov	r0, #0
   1185c:	mov	r2, #5
   11860:	movt	r1, #1
   11864:	bl	11444 <dcgettext@plt>
   11868:	movw	r7, #50020	; 0xc364
   1186c:	movt	r7, #2
   11870:	ldr	r1, [r7]
   11874:	bl	11390 <fputs_unlocked@plt>
   11878:	movw	r1, #43535	; 0xaa0f
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	movt	r1, #1
   11888:	bl	11444 <dcgettext@plt>
   1188c:	ldr	r1, [r7]
   11890:	bl	11390 <fputs_unlocked@plt>
   11894:	movw	r1, #43591	; 0xaa47
   11898:	mov	r0, #0
   1189c:	mov	r2, #5
   118a0:	movt	r1, #1
   118a4:	bl	11444 <dcgettext@plt>
   118a8:	ldr	r1, [r7]
   118ac:	bl	11390 <fputs_unlocked@plt>
   118b0:	movw	r1, #41124	; 0xa0a4
   118b4:	ldr	r5, [r7]
   118b8:	mov	r0, #0
   118bc:	mov	r2, #5
   118c0:	movt	r1, #1
   118c4:	bl	11444 <dcgettext@plt>
   118c8:	mov	r2, r0
   118cc:	mov	r0, r5
   118d0:	mov	r1, #1
   118d4:	mov	r3, #2
   118d8:	bl	11624 <__fprintf_chk@plt>
   118dc:	movw	r1, #42214	; 0xa4e6
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11444 <dcgettext@plt>
   118f0:	ldr	r1, [r7]
   118f4:	bl	11390 <fputs_unlocked@plt>
   118f8:	movw	r1, #42327	; 0xa557
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	11444 <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	11390 <fputs_unlocked@plt>
   11914:	movw	r1, #42372	; 0xa584
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	11444 <dcgettext@plt>
   11928:	ldr	r1, [r7]
   1192c:	bl	11390 <fputs_unlocked@plt>
   11930:	movw	r1, #43666	; 0xaa92
   11934:	mov	r0, #0
   11938:	mov	r2, #5
   1193c:	movt	r1, #1
   11940:	bl	11444 <dcgettext@plt>
   11944:	ldr	r1, [r7]
   11948:	bl	11390 <fputs_unlocked@plt>
   1194c:	movw	r1, #42426	; 0xa5ba
   11950:	mov	r0, #0
   11954:	mov	r2, #5
   11958:	movt	r1, #1
   1195c:	bl	11444 <dcgettext@plt>
   11960:	ldr	r1, [r7]
   11964:	bl	11390 <fputs_unlocked@plt>
   11968:	movw	r0, #45496	; 0xb1b8
   1196c:	mov	r2, #48	; 0x30
   11970:	mov	r6, sp
   11974:	movw	r5, #42766	; 0xa70e
   11978:	movt	r0, #1
   1197c:	movt	r5, #1
   11980:	add	r1, r0, #32
   11984:	add	r3, r0, #16
   11988:	vld1.64	{d18-d19}, [r0], r2
   1198c:	vld1.64	{d16-d17}, [r1]
   11990:	vld1.64	{d20-d21}, [r3]
   11994:	vldr	d22, [r0]
   11998:	add	r1, r6, #32
   1199c:	add	r0, r6, #16
   119a0:	vst1.64	{d16-d17}, [r1]
   119a4:	movw	r1, #43878	; 0xab66
   119a8:	vst1.64	{d20-d21}, [r0]
   119ac:	mov	r0, r6
   119b0:	movt	r1, #1
   119b4:	vst1.64	{d18-d19}, [r0], r2
   119b8:	vstr	d22, [r0]
   119bc:	mov	r0, r5
   119c0:	bl	113a8 <strcmp@plt>
   119c4:	cmp	r0, #0
   119c8:	ldrne	r1, [r6, #8]!
   119cc:	cmpne	r1, #0
   119d0:	bne	119bc <__assert_fail@plt+0x2a8>
   119d4:	movw	r1, #43973	; 0xabc5
   119d8:	ldr	r6, [r6, #4]
   119dc:	mov	r0, #0
   119e0:	mov	r2, #5
   119e4:	movt	r1, #1
   119e8:	bl	11444 <dcgettext@plt>
   119ec:	movw	r2, #43283	; 0xa913
   119f0:	movw	r3, #43996	; 0xabdc
   119f4:	mov	r1, r0
   119f8:	mov	r0, #1
   119fc:	movt	r2, #1
   11a00:	movt	r3, #1
   11a04:	bl	11600 <__printf_chk@plt>
   11a08:	cmp	r6, #0
   11a0c:	mov	r0, #5
   11a10:	mov	r1, #0
   11a14:	moveq	r6, r5
   11a18:	bl	1166c <setlocale@plt>
   11a1c:	cmp	r0, #0
   11a20:	beq	11a58 <__assert_fail@plt+0x344>
   11a24:	movw	r1, #44036	; 0xac04
   11a28:	mov	r2, #3
   11a2c:	movt	r1, #1
   11a30:	bl	116e4 <strncmp@plt>
   11a34:	cmp	r0, #0
   11a38:	beq	11a58 <__assert_fail@plt+0x344>
   11a3c:	movw	r1, #44040	; 0xac08
   11a40:	mov	r0, #0
   11a44:	mov	r2, #5
   11a48:	movt	r1, #1
   11a4c:	bl	11444 <dcgettext@plt>
   11a50:	ldr	r1, [r7]
   11a54:	bl	11390 <fputs_unlocked@plt>
   11a58:	movw	r1, #44111	; 0xac4f
   11a5c:	mov	r0, #0
   11a60:	mov	r2, #5
   11a64:	movt	r1, #1
   11a68:	bl	11444 <dcgettext@plt>
   11a6c:	movw	r2, #43996	; 0xabdc
   11a70:	mov	r1, r0
   11a74:	mov	r0, #1
   11a78:	mov	r3, r5
   11a7c:	movt	r2, #1
   11a80:	bl	11600 <__printf_chk@plt>
   11a84:	movw	r1, #44138	; 0xac6a
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	11444 <dcgettext@plt>
   11a98:	mov	r1, r0
   11a9c:	movw	r0, #43906	; 0xab82
   11aa0:	movw	r3, #42213	; 0xa4e5
   11aa4:	cmp	r6, r5
   11aa8:	mov	r2, r6
   11aac:	movt	r0, #1
   11ab0:	movt	r3, #1
   11ab4:	moveq	r3, r0
   11ab8:	mov	r0, #1
   11abc:	bl	11600 <__printf_chk@plt>
   11ac0:	mov	r0, r4
   11ac4:	bl	11570 <exit@plt>
   11ac8:	movw	r0, #50016	; 0xc360
   11acc:	movw	r1, #40940	; 0x9fec
   11ad0:	mov	r2, #5
   11ad4:	movt	r0, #2
   11ad8:	movt	r1, #1
   11adc:	ldr	r5, [r0]
   11ae0:	mov	r0, #0
   11ae4:	bl	11444 <dcgettext@plt>
   11ae8:	mov	r2, r0
   11aec:	movw	r0, #50468	; 0xc524
   11af0:	mov	r1, #1
   11af4:	movt	r0, #2
   11af8:	ldr	r3, [r0]
   11afc:	mov	r0, r5
   11b00:	bl	11624 <__fprintf_chk@plt>
   11b04:	mov	r0, r4
   11b08:	bl	11570 <exit@plt>
   11b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b10:	add	fp, sp, #28
   11b14:	sub	sp, sp, #252	; 0xfc
   11b18:	mov	r4, r1
   11b1c:	str	r0, [sp, #92]	; 0x5c
   11b20:	bl	115c4 <getpagesize@plt>
   11b24:	str	r0, [sp, #76]	; 0x4c
   11b28:	ldr	r0, [r4]
   11b2c:	str	r4, [sp, #88]	; 0x58
   11b30:	bl	15574 <__assert_fail@plt+0x3e60>
   11b34:	movw	r1, #42213	; 0xa4e5
   11b38:	mov	r0, #6
   11b3c:	movt	r1, #1
   11b40:	bl	1166c <setlocale@plt>
   11b44:	movw	r5, #43287	; 0xa917
   11b48:	movw	r1, #42772	; 0xa714
   11b4c:	movt	r5, #1
   11b50:	movt	r1, #1
   11b54:	mov	r0, r5
   11b58:	bl	116c0 <bindtextdomain@plt>
   11b5c:	mov	r0, r5
   11b60:	bl	11468 <textdomain@plt>
   11b64:	movw	r0, #20808	; 0x5148
   11b68:	movt	r0, #1
   11b6c:	bl	19fc4 <__assert_fail@plt+0x88b0>
   11b70:	movw	r2, #50392	; 0xc4d8
   11b74:	movw	r0, #43212	; 0xa8cc
   11b78:	movw	r1, #45633	; 0xb241
   11b7c:	mov	r9, #0
   11b80:	mov	sl, #0
   11b84:	movt	r2, #2
   11b88:	movt	r1, #1
   11b8c:	movt	r0, #1
   11b90:	str	r1, [r2, #4]
   11b94:	str	r0, [r2, #8]
   11b98:	mov	r0, #0
   11b9c:	str	r0, [sp, #100]	; 0x64
   11ba0:	mov	r0, #0
   11ba4:	str	r0, [sp, #72]	; 0x48
   11ba8:	mov	r0, #0
   11bac:	str	r0, [sp, #68]	; 0x44
   11bb0:	mov	r0, #0
   11bb4:	str	r0, [sp, #80]	; 0x50
   11bb8:	mov	r0, #0
   11bbc:	str	r0, [sp, #84]	; 0x54
   11bc0:	b	11bd4 <__assert_fail@plt+0x4c0>
   11bc4:	sub	r0, r7, #48	; 0x30
   11bc8:	mov	sl, r4
   11bcc:	str	r0, [sp, #100]	; 0x64
   11bd0:	asr	r9, r0, #31
   11bd4:	movw	r0, #50008	; 0xc358
   11bd8:	ldr	r1, [sp, #88]	; 0x58
   11bdc:	movw	r2, #42796	; 0xa72c
   11be0:	movw	r3, #45224	; 0xb0a8
   11be4:	movt	r0, #2
   11be8:	movt	r2, #1
   11bec:	movt	r3, #1
   11bf0:	ldr	r4, [r0]
   11bf4:	mov	r0, #0
   11bf8:	str	r0, [sp]
   11bfc:	ldr	r0, [sp, #92]	; 0x5c
   11c00:	bl	11558 <getopt_long@plt>
   11c04:	cmp	r4, #0
   11c08:	mov	r7, r0
   11c0c:	add	r0, r0, #3
   11c10:	movw	r1, #262	; 0x106
   11c14:	movweq	r4, #1
   11c18:	cmp	r0, r1
   11c1c:	bhi	13cf4 <__assert_fail@plt+0x25e0>
   11c20:	add	r1, pc, #0
   11c24:	ldr	pc, [r1, r0, lsl #2]
   11c28:	strdeq	r3, [r1], -ip
   11c2c:	andeq	r3, r1, r0, asr sp
   11c30:	andeq	r2, r1, r0, asr r6
   11c34:	strdeq	r3, [r1], -r4
   11c38:	strdeq	r3, [r1], -r4
   11c3c:	strdeq	r3, [r1], -r4
   11c40:	strdeq	r3, [r1], -r4
   11c44:	strdeq	r3, [r1], -r4
   11c48:	strdeq	r3, [r1], -r4
   11c4c:	strdeq	r3, [r1], -r4
   11c50:	strdeq	r3, [r1], -r4
   11c54:	strdeq	r3, [r1], -r4
   11c58:	strdeq	r3, [r1], -r4
   11c5c:	strdeq	r3, [r1], -r4
   11c60:	strdeq	r3, [r1], -r4
   11c64:	strdeq	r3, [r1], -r4
   11c68:	strdeq	r3, [r1], -r4
   11c6c:	strdeq	r3, [r1], -r4
   11c70:	strdeq	r3, [r1], -r4
   11c74:	strdeq	r3, [r1], -r4
   11c78:	strdeq	r3, [r1], -r4
   11c7c:	strdeq	r3, [r1], -r4
   11c80:	strdeq	r3, [r1], -r4
   11c84:	strdeq	r3, [r1], -r4
   11c88:	strdeq	r3, [r1], -r4
   11c8c:	strdeq	r3, [r1], -r4
   11c90:	strdeq	r3, [r1], -r4
   11c94:	strdeq	r3, [r1], -r4
   11c98:	strdeq	r3, [r1], -r4
   11c9c:	strdeq	r3, [r1], -r4
   11ca0:	strdeq	r3, [r1], -r4
   11ca4:	strdeq	r3, [r1], -r4
   11ca8:	strdeq	r3, [r1], -r4
   11cac:	strdeq	r3, [r1], -r4
   11cb0:	strdeq	r3, [r1], -r4
   11cb4:	strdeq	r3, [r1], -r4
   11cb8:	strdeq	r3, [r1], -r4
   11cbc:	strdeq	r3, [r1], -r4
   11cc0:	strdeq	r3, [r1], -r4
   11cc4:	strdeq	r3, [r1], -r4
   11cc8:	strdeq	r3, [r1], -r4
   11ccc:	strdeq	r3, [r1], -r4
   11cd0:	strdeq	r3, [r1], -r4
   11cd4:	strdeq	r3, [r1], -r4
   11cd8:	strdeq	r3, [r1], -r4
   11cdc:	strdeq	r3, [r1], -r4
   11ce0:	strdeq	r3, [r1], -r4
   11ce4:	strdeq	r3, [r1], -r4
   11ce8:	strdeq	r3, [r1], -r4
   11cec:	strdeq	r3, [r1], -r4
   11cf0:	strdeq	r3, [r1], -r4
   11cf4:	andeq	r2, r1, r4, asr #32
   11cf8:	andeq	r2, r1, r4, asr #32
   11cfc:	andeq	r2, r1, r4, asr #32
   11d00:	andeq	r2, r1, r4, asr #32
   11d04:	andeq	r2, r1, r4, asr #32
   11d08:	andeq	r2, r1, r4, asr #32
   11d0c:	andeq	r2, r1, r4, asr #32
   11d10:	andeq	r2, r1, r4, asr #32
   11d14:	andeq	r2, r1, r4, asr #32
   11d18:	andeq	r2, r1, r4, asr #32
   11d1c:	strdeq	r3, [r1], -r4
   11d20:	strdeq	r3, [r1], -r4
   11d24:	strdeq	r3, [r1], -r4
   11d28:	strdeq	r3, [r1], -r4
   11d2c:	strdeq	r3, [r1], -r4
   11d30:	strdeq	r3, [r1], -r4
   11d34:	strdeq	r3, [r1], -r4
   11d38:	strdeq	r3, [r1], -r4
   11d3c:	strdeq	r3, [r1], -r4
   11d40:	andeq	r2, r1, r0, ror r5
   11d44:	strdeq	r3, [r1], -r4
   11d48:	strdeq	r3, [r1], -r4
   11d4c:	strdeq	r3, [r1], -r4
   11d50:	strdeq	r3, [r1], -r4
   11d54:	strdeq	r3, [r1], -r4
   11d58:	strdeq	r3, [r1], -r4
   11d5c:	strdeq	r3, [r1], -r4
   11d60:	strdeq	r3, [r1], -r4
   11d64:	strdeq	r3, [r1], -r4
   11d68:	strdeq	r3, [r1], -r4
   11d6c:	strdeq	r3, [r1], -r4
   11d70:	strdeq	r3, [r1], -r4
   11d74:	strdeq	r3, [r1], -r4
   11d78:	strdeq	r3, [r1], -r4
   11d7c:	strdeq	r3, [r1], -r4
   11d80:	strdeq	r3, [r1], -r4
   11d84:	strdeq	r3, [r1], -r4
   11d88:	strdeq	r3, [r1], -r4
   11d8c:	strdeq	r3, [r1], -r4
   11d90:	strdeq	r3, [r1], -r4
   11d94:	strdeq	r3, [r1], -r4
   11d98:	strdeq	r3, [r1], -r4
   11d9c:	strdeq	r3, [r1], -r4
   11da0:	strdeq	r3, [r1], -r4
   11da4:	strdeq	r3, [r1], -r4
   11da8:	strdeq	r3, [r1], -r4
   11dac:	strdeq	r3, [r1], -r4
   11db0:	strdeq	r3, [r1], -r4
   11db4:	strdeq	r3, [r1], -r4
   11db8:	muleq	r1, r8, r1
   11dbc:	andeq	r2, r1, r8, lsr #4
   11dc0:	strdeq	r3, [r1], -r4
   11dc4:	andeq	r2, r1, r4, ror #1
   11dc8:	andeq	r2, r1, r4, lsl #3
   11dcc:	strdeq	r3, [r1], -r4
   11dd0:	strdeq	r3, [r1], -r4
   11dd4:	strdeq	r3, [r1], -r4
   11dd8:	strdeq	r3, [r1], -r4
   11ddc:	strdeq	r3, [r1], -r4
   11de0:	strdeq	r3, [r1], -r4
   11de4:	andeq	r2, r1, r0, ror #11
   11de8:	strdeq	r3, [r1], -r4
   11dec:	andeq	r2, r1, ip, lsr #5
   11df0:	strdeq	r3, [r1], -r4
   11df4:	strdeq	r3, [r1], -r4
   11df8:	strdeq	r3, [r1], -r4
   11dfc:	strdeq	r3, [r1], -r4
   11e00:	strdeq	r3, [r1], -r4
   11e04:	andeq	r2, r1, r4, ror #6
   11e08:	andeq	r2, r1, r4, lsl #5
   11e0c:	strdeq	r3, [r1], -r4
   11e10:	strdeq	r3, [r1], -r4
   11e14:	andeq	r2, r1, r4, ror #1
   11e18:	strdeq	r3, [r1], -r4
   11e1c:	strdeq	r3, [r1], -r4
   11e20:	strdeq	r3, [r1], -r4
   11e24:	strdeq	r3, [r1], -r4
   11e28:	strdeq	r3, [r1], -r4
   11e2c:	strdeq	r3, [r1], -r4
   11e30:	strdeq	r3, [r1], -r4
   11e34:	strdeq	r3, [r1], -r4
   11e38:	strdeq	r3, [r1], -r4
   11e3c:	strdeq	r3, [r1], -r4
   11e40:	strdeq	r3, [r1], -r4
   11e44:	strdeq	r3, [r1], -r4
   11e48:	strdeq	r3, [r1], -r4
   11e4c:	strdeq	r3, [r1], -r4
   11e50:	strdeq	r3, [r1], -r4
   11e54:	strdeq	r3, [r1], -r4
   11e58:	strdeq	r3, [r1], -r4
   11e5c:	strdeq	r3, [r1], -r4
   11e60:	strdeq	r3, [r1], -r4
   11e64:	strdeq	r3, [r1], -r4
   11e68:	strdeq	r3, [r1], -r4
   11e6c:	strdeq	r3, [r1], -r4
   11e70:	strdeq	r3, [r1], -r4
   11e74:	strdeq	r3, [r1], -r4
   11e78:	strdeq	r3, [r1], -r4
   11e7c:	strdeq	r3, [r1], -r4
   11e80:	strdeq	r3, [r1], -r4
   11e84:	strdeq	r3, [r1], -r4
   11e88:	strdeq	r3, [r1], -r4
   11e8c:	strdeq	r3, [r1], -r4
   11e90:	strdeq	r3, [r1], -r4
   11e94:	strdeq	r3, [r1], -r4
   11e98:	strdeq	r3, [r1], -r4
   11e9c:	strdeq	r3, [r1], -r4
   11ea0:	strdeq	r3, [r1], -r4
   11ea4:	strdeq	r3, [r1], -r4
   11ea8:	strdeq	r3, [r1], -r4
   11eac:	strdeq	r3, [r1], -r4
   11eb0:	strdeq	r3, [r1], -r4
   11eb4:	strdeq	r3, [r1], -r4
   11eb8:	strdeq	r3, [r1], -r4
   11ebc:	strdeq	r3, [r1], -r4
   11ec0:	strdeq	r3, [r1], -r4
   11ec4:	strdeq	r3, [r1], -r4
   11ec8:	strdeq	r3, [r1], -r4
   11ecc:	strdeq	r3, [r1], -r4
   11ed0:	strdeq	r3, [r1], -r4
   11ed4:	strdeq	r3, [r1], -r4
   11ed8:	strdeq	r3, [r1], -r4
   11edc:	strdeq	r3, [r1], -r4
   11ee0:	strdeq	r3, [r1], -r4
   11ee4:	strdeq	r3, [r1], -r4
   11ee8:	strdeq	r3, [r1], -r4
   11eec:	strdeq	r3, [r1], -r4
   11ef0:	strdeq	r3, [r1], -r4
   11ef4:	strdeq	r3, [r1], -r4
   11ef8:	strdeq	r3, [r1], -r4
   11efc:	strdeq	r3, [r1], -r4
   11f00:	strdeq	r3, [r1], -r4
   11f04:	strdeq	r3, [r1], -r4
   11f08:	strdeq	r3, [r1], -r4
   11f0c:	strdeq	r3, [r1], -r4
   11f10:	strdeq	r3, [r1], -r4
   11f14:	strdeq	r3, [r1], -r4
   11f18:	strdeq	r3, [r1], -r4
   11f1c:	strdeq	r3, [r1], -r4
   11f20:	strdeq	r3, [r1], -r4
   11f24:	strdeq	r3, [r1], -r4
   11f28:	strdeq	r3, [r1], -r4
   11f2c:	strdeq	r3, [r1], -r4
   11f30:	strdeq	r3, [r1], -r4
   11f34:	strdeq	r3, [r1], -r4
   11f38:	strdeq	r3, [r1], -r4
   11f3c:	strdeq	r3, [r1], -r4
   11f40:	strdeq	r3, [r1], -r4
   11f44:	strdeq	r3, [r1], -r4
   11f48:	strdeq	r3, [r1], -r4
   11f4c:	strdeq	r3, [r1], -r4
   11f50:	strdeq	r3, [r1], -r4
   11f54:	strdeq	r3, [r1], -r4
   11f58:	strdeq	r3, [r1], -r4
   11f5c:	strdeq	r3, [r1], -r4
   11f60:	strdeq	r3, [r1], -r4
   11f64:	strdeq	r3, [r1], -r4
   11f68:	strdeq	r3, [r1], -r4
   11f6c:	strdeq	r3, [r1], -r4
   11f70:	strdeq	r3, [r1], -r4
   11f74:	strdeq	r3, [r1], -r4
   11f78:	strdeq	r3, [r1], -r4
   11f7c:	strdeq	r3, [r1], -r4
   11f80:	strdeq	r3, [r1], -r4
   11f84:	strdeq	r3, [r1], -r4
   11f88:	strdeq	r3, [r1], -r4
   11f8c:	strdeq	r3, [r1], -r4
   11f90:	strdeq	r3, [r1], -r4
   11f94:	strdeq	r3, [r1], -r4
   11f98:	strdeq	r3, [r1], -r4
   11f9c:	strdeq	r3, [r1], -r4
   11fa0:	strdeq	r3, [r1], -r4
   11fa4:	strdeq	r3, [r1], -r4
   11fa8:	strdeq	r3, [r1], -r4
   11fac:	strdeq	r3, [r1], -r4
   11fb0:	strdeq	r3, [r1], -r4
   11fb4:	strdeq	r3, [r1], -r4
   11fb8:	strdeq	r3, [r1], -r4
   11fbc:	strdeq	r3, [r1], -r4
   11fc0:	strdeq	r3, [r1], -r4
   11fc4:	strdeq	r3, [r1], -r4
   11fc8:	strdeq	r3, [r1], -r4
   11fcc:	strdeq	r3, [r1], -r4
   11fd0:	strdeq	r3, [r1], -r4
   11fd4:	strdeq	r3, [r1], -r4
   11fd8:	strdeq	r3, [r1], -r4
   11fdc:	strdeq	r3, [r1], -r4
   11fe0:	strdeq	r3, [r1], -r4
   11fe4:	strdeq	r3, [r1], -r4
   11fe8:	strdeq	r3, [r1], -r4
   11fec:	strdeq	r3, [r1], -r4
   11ff0:	strdeq	r3, [r1], -r4
   11ff4:	strdeq	r3, [r1], -r4
   11ff8:	strdeq	r3, [r1], -r4
   11ffc:	strdeq	r3, [r1], -r4
   12000:	strdeq	r3, [r1], -r4
   12004:	strdeq	r3, [r1], -r4
   12008:	strdeq	r3, [r1], -r4
   1200c:	strdeq	r3, [r1], -r4
   12010:	strdeq	r3, [r1], -r4
   12014:	strdeq	r3, [r1], -r4
   12018:	strdeq	r3, [r1], -r4
   1201c:	strdeq	r3, [r1], -r4
   12020:	strdeq	r3, [r1], -r4
   12024:	strdeq	r3, [r1], -r4
   12028:	strdeq	r3, [r1], -r4
   1202c:	strdeq	r3, [r1], -r4
   12030:	strdeq	r3, [r1], -r4
   12034:	muleq	r1, r8, r2
   12038:	andeq	r2, r1, r8, asr #6
   1203c:	andeq	r2, r1, ip, asr #7
   12040:	strdeq	r2, [r1], -ip
   12044:	ldr	r0, [sp, #84]	; 0x54
   12048:	cmp	r0, #0
   1204c:	beq	12074 <__assert_fail@plt+0x960>
   12050:	ldr	r5, [sp, #100]	; 0x64
   12054:	mvn	r1, #4
   12058:	mov	r8, r9
   1205c:	tst	r0, r1
   12060:	bne	13dd0 <__assert_fail@plt+0x26bc>
   12064:	cmp	sl, #0
   12068:	cmpne	sl, r4
   1206c:	beq	12090 <__assert_fail@plt+0x97c>
   12070:	b	11bc4 <__assert_fail@plt+0x4b0>
   12074:	mov	r0, #4
   12078:	mov	r5, #0
   1207c:	mov	r8, #0
   12080:	str	r0, [sp, #84]	; 0x54
   12084:	cmp	sl, #0
   12088:	cmpne	sl, r4
   1208c:	bne	11bc4 <__assert_fail@plt+0x4b0>
   12090:	movw	r0, #39321	; 0x9999
   12094:	movt	r0, #39321	; 0x9999
   12098:	subs	r0, r0, r5
   1209c:	movw	r0, #39321	; 0x9999
   120a0:	movt	r0, #6553	; 0x1999
   120a4:	sbcs	r0, r0, r8
   120a8:	bcc	13d58 <__assert_fail@plt+0x2644>
   120ac:	mov	r0, #10
   120b0:	add	r2, r8, r8, lsl #2
   120b4:	mov	sl, r4
   120b8:	umull	r0, r1, r5, r0
   120bc:	add	r1, r1, r2, lsl #1
   120c0:	sub	r2, r7, #48	; 0x30
   120c4:	adds	r0, r0, r2
   120c8:	adc	r1, r1, r2, asr #31
   120cc:	str	r0, [sp, #100]	; 0x64
   120d0:	subs	r0, r0, r5
   120d4:	mov	r9, r1
   120d8:	sbcs	r0, r1, r8
   120dc:	bcs	11bd4 <__assert_fail@plt+0x4c0>
   120e0:	b	13d58 <__assert_fail@plt+0x2644>
   120e4:	movw	r0, #43141	; 0xa885
   120e8:	movw	r6, #43152	; 0xa890
   120ec:	cmp	r7, #100	; 0x64
   120f0:	movt	r0, #1
   120f4:	movt	r6, #1
   120f8:	moveq	r6, r0
   120fc:	movw	r0, #49488	; 0xc150
   12100:	movt	r0, #2
   12104:	str	r6, [r0, #4]
   12108:	movw	r0, #50024	; 0xc368
   1210c:	movt	r0, #2
   12110:	ldr	r5, [r0]
   12114:	cmp	r5, #0
   12118:	beq	11bd4 <__assert_fail@plt+0x4c0>
   1211c:	mov	r0, r5
   12120:	bl	11588 <strlen@plt>
   12124:	mov	r4, r0
   12128:	mov	r0, r5
   1212c:	mov	r1, r6
   12130:	bl	11708 <strspn@plt>
   12134:	cmp	r4, r0
   12138:	bne	13dfc <__assert_fail@plt+0x26e8>
   1213c:	ldrb	r0, [r5]
   12140:	cmp	r0, #48	; 0x30
   12144:	bne	12428 <__assert_fail@plt+0xd14>
   12148:	movw	r2, #50392	; 0xc4d8
   1214c:	movw	r3, #50024	; 0xc368
   12150:	add	r0, r5, #1
   12154:	movt	r2, #2
   12158:	movt	r3, #2
   1215c:	ldrb	r1, [r0]
   12160:	cmp	r1, #0
   12164:	beq	12178 <__assert_fail@plt+0xa64>
   12168:	str	r0, [r3]
   1216c:	ldrb	r1, [r0], #1
   12170:	cmp	r1, #48	; 0x30
   12174:	beq	1215c <__assert_fail@plt+0xa48>
   12178:	sub	r5, r0, #1
   1217c:	str	r5, [r2, #20]
   12180:	b	11bd4 <__assert_fail@plt+0x4c0>
   12184:	movw	r0, #50392	; 0xc4d8
   12188:	mov	r1, #1
   1218c:	movt	r0, #2
   12190:	strb	r1, [r0, #1]
   12194:	b	11bd4 <__assert_fail@plt+0x4c0>
   12198:	movw	r0, #50024	; 0xc368
   1219c:	movw	r1, #42823	; 0xa747
   121a0:	mov	r2, #5
   121a4:	movt	r0, #2
   121a8:	movt	r1, #1
   121ac:	ldr	r5, [r0]
   121b0:	mov	r0, #0
   121b4:	bl	11444 <dcgettext@plt>
   121b8:	mvn	r1, #-1073741824	; 0xc0000000
   121bc:	mov	r2, #0
   121c0:	str	r0, [sp, #12]
   121c4:	mov	r0, r5
   121c8:	mov	r3, #0
   121cc:	str	r1, [sp]
   121d0:	movw	r1, #42213	; 0xa4e5
   121d4:	str	r2, [sp, #4]
   121d8:	str	r2, [sp, #16]
   121dc:	mov	r2, #0
   121e0:	movt	r1, #1
   121e4:	str	r1, [sp, #8]
   121e8:	bl	18c04 <__assert_fail@plt+0x74f0>
   121ec:	movw	r1, #50392	; 0xc4d8
   121f0:	movt	r1, #2
   121f4:	str	r0, [r1, #12]
   121f8:	b	11bd4 <__assert_fail@plt+0x4c0>
   121fc:	movw	r0, #50024	; 0xc368
   12200:	movt	r0, #2
   12204:	ldr	r5, [r0]
   12208:	mov	r0, r5
   1220c:	bl	15090 <__assert_fail@plt+0x397c>
   12210:	cmp	r0, r5
   12214:	bne	13e18 <__assert_fail@plt+0x2704>
   12218:	movw	r0, #50392	; 0xc4d8
   1221c:	movt	r0, #2
   12220:	str	r5, [r0, #16]
   12224:	b	11bd4 <__assert_fail@plt+0x4c0>
   12228:	ldr	r0, [sp, #84]	; 0x54
   1222c:	cmp	r0, #0
   12230:	bne	13dd0 <__assert_fail@plt+0x26bc>
   12234:	movw	r0, #50024	; 0xc368
   12238:	movw	r1, #42927	; 0xa7af
   1223c:	mov	r2, #5
   12240:	movt	r0, #2
   12244:	movt	r1, #1
   12248:	ldr	r5, [r0]
   1224c:	mov	r0, #0
   12250:	bl	11444 <dcgettext@plt>
   12254:	mvn	r1, #0
   12258:	str	r0, [sp, #12]
   1225c:	mov	r0, #0
   12260:	str	r1, [sp]
   12264:	mvn	r1, #-2147483648	; 0x80000000
   12268:	str	r0, [sp, #16]
   1226c:	mov	r0, #1
   12270:	str	r1, [sp, #4]
   12274:	movw	r1, #45208	; 0xb098
   12278:	str	r0, [sp, #84]	; 0x54
   1227c:	movt	r1, #1
   12280:	b	12550 <__assert_fail@plt+0xe3c>
   12284:	movw	r0, #50392	; 0xc4d8
   12288:	mov	r1, #1
   1228c:	movt	r0, #2
   12290:	strb	r1, [r0]
   12294:	b	11bd4 <__assert_fail@plt+0x4c0>
   12298:	movw	r0, #50392	; 0xc4d8
   1229c:	mov	r1, #1
   122a0:	movt	r0, #2
   122a4:	strb	r1, [r0, #2]
   122a8:	b	11bd4 <__assert_fail@plt+0x4c0>
   122ac:	ldr	r0, [sp, #84]	; 0x54
   122b0:	cmp	r0, #0
   122b4:	bne	13dd0 <__assert_fail@plt+0x26bc>
   122b8:	bl	11564 <__ctype_b_loc@plt>
   122bc:	movw	r4, #50024	; 0xc368
   122c0:	ldr	r1, [r0]
   122c4:	movt	r4, #2
   122c8:	ldr	r5, [r4]
   122cc:	ldrb	r2, [r5]
   122d0:	add	r1, r1, r2, lsl #1
   122d4:	ldrb	r1, [r1, #1]
   122d8:	tst	r1, #32
   122dc:	beq	12304 <__assert_fail@plt+0xbf0>
   122e0:	add	r1, r5, #1
   122e4:	str	r1, [r4]
   122e8:	ldrb	r2, [r1], #1
   122ec:	ldr	r3, [r0]
   122f0:	add	r2, r3, r2, lsl #1
   122f4:	ldrb	r2, [r2, #1]
   122f8:	tst	r2, #32
   122fc:	bne	122e4 <__assert_fail@plt+0xbd0>
   12300:	sub	r5, r1, #1
   12304:	movw	r1, #42975	; 0xa7df
   12308:	mov	r0, r5
   1230c:	mov	r2, #2
   12310:	movt	r1, #1
   12314:	bl	116e4 <strncmp@plt>
   12318:	cmp	r0, #0
   1231c:	beq	12438 <__assert_fail@plt+0xd24>
   12320:	movw	r1, #42978	; 0xa7e2
   12324:	mov	r0, r5
   12328:	mov	r2, #2
   1232c:	movt	r1, #1
   12330:	bl	116e4 <strncmp@plt>
   12334:	mov	r1, #5
   12338:	cmp	r0, #0
   1233c:	bne	12444 <__assert_fail@plt+0xd30>
   12340:	mov	r1, #6
   12344:	b	1243c <__assert_fail@plt+0xd28>
   12348:	movw	r0, #50024	; 0xc368
   1234c:	movw	r1, #50392	; 0xc4d8
   12350:	movt	r0, #2
   12354:	movt	r1, #2
   12358:	ldr	r0, [r0]
   1235c:	str	r0, [r1, #24]
   12360:	b	11bd4 <__assert_fail@plt+0x4c0>
   12364:	movw	r0, #50024	; 0xc368
   12368:	movt	r0, #2
   1236c:	ldr	r0, [r0]
   12370:	ldrb	r1, [r0]
   12374:	cmp	r1, #0
   12378:	beq	13e5c <__assert_fail@plt+0x2748>
   1237c:	ldrb	r2, [r0, #1]
   12380:	cmp	r2, #0
   12384:	beq	123a0 <__assert_fail@plt+0xc8c>
   12388:	movw	r1, #43029	; 0xa815
   1238c:	movt	r1, #1
   12390:	bl	113a8 <strcmp@plt>
   12394:	mov	r1, #0
   12398:	cmp	r0, #0
   1239c:	bne	13e68 <__assert_fail@plt+0x2754>
   123a0:	movw	r0, #49488	; 0xc150
   123a4:	movt	r0, #2
   123a8:	ldr	r0, [r0]
   123ac:	cmp	r0, #0
   123b0:	bmi	123bc <__assert_fail@plt+0xca8>
   123b4:	cmp	r0, r1
   123b8:	bne	13ea4 <__assert_fail@plt+0x2790>
   123bc:	movw	r0, #49488	; 0xc150
   123c0:	movt	r0, #2
   123c4:	str	r1, [r0]
   123c8:	b	11bd4 <__assert_fail@plt+0x4c0>
   123cc:	movw	r0, #50024	; 0xc368
   123d0:	movw	r1, #43261	; 0xa8fd
   123d4:	mov	r2, #5
   123d8:	movt	r0, #2
   123dc:	movt	r1, #1
   123e0:	ldr	r4, [r0]
   123e4:	mov	r0, #0
   123e8:	bl	11444 <dcgettext@plt>
   123ec:	movw	r2, #45208	; 0xb098
   123f0:	mvn	r1, #-2147483647	; 0x80000001
   123f4:	str	r0, [sp, #12]
   123f8:	mov	r0, r4
   123fc:	mov	r3, #0
   12400:	movt	r2, #1
   12404:	str	r1, [sp]
   12408:	mov	r1, #0
   1240c:	str	r1, [sp, #4]
   12410:	str	r1, [sp, #16]
   12414:	str	r2, [sp, #8]
   12418:	mov	r2, #1
   1241c:	bl	18c04 <__assert_fail@plt+0x74f0>
   12420:	str	r0, [sp, #80]	; 0x50
   12424:	b	11bd4 <__assert_fail@plt+0x4c0>
   12428:	movw	r2, #50392	; 0xc4d8
   1242c:	movt	r2, #2
   12430:	str	r5, [r2, #20]
   12434:	b	11bd4 <__assert_fail@plt+0x4c0>
   12438:	mov	r1, #7
   1243c:	add	r5, r5, #2
   12440:	str	r5, [r4]
   12444:	str	r1, [sp, #84]	; 0x54
   12448:	mov	r0, r5
   1244c:	mov	r1, #47	; 0x2f
   12450:	bl	115a0 <strchr@plt>
   12454:	cmp	r0, #0
   12458:	beq	1251c <__assert_fail@plt+0xe08>
   1245c:	movw	r1, #42981	; 0xa7e5
   12460:	mov	r7, r0
   12464:	mov	r0, #0
   12468:	mov	r2, #5
   1246c:	movt	r1, #1
   12470:	bl	11444 <dcgettext@plt>
   12474:	mvn	r1, #0
   12478:	str	r0, [sp, #12]
   1247c:	mov	r0, #0
   12480:	mov	r2, #1
   12484:	mov	r3, #0
   12488:	str	r1, [sp]
   1248c:	str	r1, [sp, #4]
   12490:	movw	r1, #42213	; 0xa4e5
   12494:	str	r0, [sp, #16]
   12498:	add	r0, r7, #1
   1249c:	movt	r1, #1
   124a0:	str	r1, [sp, #8]
   124a4:	bl	18c04 <__assert_fail@plt+0x74f0>
   124a8:	str	r0, [sp, #100]	; 0x64
   124ac:	ldr	r0, [r4]
   124b0:	mov	r9, r1
   124b4:	cmp	r0, r7
   124b8:	beq	11bd4 <__assert_fail@plt+0x4c0>
   124bc:	movw	r0, #50024	; 0xc368
   124c0:	mov	r4, #0
   124c4:	movw	r1, #44331	; 0xad2b
   124c8:	mov	r2, #5
   124cc:	movt	r0, #2
   124d0:	strb	r4, [r7]
   124d4:	movt	r1, #1
   124d8:	ldr	r5, [r0]
   124dc:	mov	r0, #0
   124e0:	bl	11444 <dcgettext@plt>
   124e4:	ldr	r1, [sp, #100]	; 0x64
   124e8:	mov	r2, #1
   124ec:	mov	r3, #0
   124f0:	stm	sp, {r1, r9}
   124f4:	movw	r1, #42213	; 0xa4e5
   124f8:	str	r0, [sp, #12]
   124fc:	mov	r0, r5
   12500:	str	r4, [sp, #16]
   12504:	movt	r1, #1
   12508:	str	r1, [sp, #8]
   1250c:	bl	18c04 <__assert_fail@plt+0x74f0>
   12510:	str	r0, [sp, #72]	; 0x48
   12514:	str	r1, [sp, #68]	; 0x44
   12518:	b	11bd4 <__assert_fail@plt+0x4c0>
   1251c:	movw	r1, #42981	; 0xa7e5
   12520:	mov	r0, #0
   12524:	mov	r2, #5
   12528:	movt	r1, #1
   1252c:	bl	11444 <dcgettext@plt>
   12530:	mvn	r1, #0
   12534:	str	r0, [sp, #12]
   12538:	mov	r0, #0
   1253c:	str	r1, [sp]
   12540:	str	r1, [sp, #4]
   12544:	movw	r1, #42213	; 0xa4e5
   12548:	str	r0, [sp, #16]
   1254c:	movt	r1, #1
   12550:	str	r1, [sp, #8]
   12554:	mov	r0, r5
   12558:	mov	r2, #1
   1255c:	mov	r3, #0
   12560:	bl	18c04 <__assert_fail@plt+0x74f0>
   12564:	str	r0, [sp, #100]	; 0x64
   12568:	mov	r9, r1
   1256c:	b	11bd4 <__assert_fail@plt+0x4c0>
   12570:	ldr	r0, [sp, #84]	; 0x54
   12574:	cmp	r0, #0
   12578:	bne	13dd0 <__assert_fail@plt+0x26bc>
   1257c:	movw	r0, #50024	; 0xc368
   12580:	movw	r1, #42927	; 0xa7af
   12584:	mov	r2, #5
   12588:	movt	r0, #2
   1258c:	movt	r1, #1
   12590:	ldr	r5, [r0]
   12594:	mov	r0, #0
   12598:	bl	11444 <dcgettext@plt>
   1259c:	movw	r2, #45208	; 0xb098
   125a0:	mvn	r1, #0
   125a4:	str	r0, [sp, #12]
   125a8:	mov	r0, r5
   125ac:	mov	r3, #0
   125b0:	movt	r2, #1
   125b4:	str	r1, [sp]
   125b8:	mov	r1, #0
   125bc:	str	r1, [sp, #4]
   125c0:	str	r1, [sp, #16]
   125c4:	str	r2, [sp, #8]
   125c8:	mov	r2, #1
   125cc:	bl	18c04 <__assert_fail@plt+0x74f0>
   125d0:	str	r0, [sp, #100]	; 0x64
   125d4:	mov	r9, r1
   125d8:	mov	r0, #2
   125dc:	b	11bbc <__assert_fail@plt+0x4a8>
   125e0:	ldr	r0, [sp, #84]	; 0x54
   125e4:	cmp	r0, #0
   125e8:	bne	13dd0 <__assert_fail@plt+0x26bc>
   125ec:	movw	r0, #50024	; 0xc368
   125f0:	movw	r1, #42951	; 0xa7c7
   125f4:	mov	r2, #5
   125f8:	movt	r0, #2
   125fc:	movt	r1, #1
   12600:	ldr	r5, [r0]
   12604:	mov	r0, #0
   12608:	bl	11444 <dcgettext@plt>
   1260c:	mvn	r1, #0
   12610:	str	r0, [sp, #12]
   12614:	mov	r0, #0
   12618:	mov	r2, #1
   1261c:	mov	r3, #0
   12620:	str	r1, [sp]
   12624:	str	r1, [sp, #4]
   12628:	movw	r1, #42213	; 0xa4e5
   1262c:	str	r0, [sp, #16]
   12630:	mov	r0, r5
   12634:	movt	r1, #1
   12638:	str	r1, [sp, #8]
   1263c:	bl	18c04 <__assert_fail@plt+0x74f0>
   12640:	str	r0, [sp, #100]	; 0x64
   12644:	mov	r9, r1
   12648:	mov	r0, #3
   1264c:	b	11bbc <__assert_fail@plt+0x4a8>
   12650:	ldr	r0, [sp, #72]	; 0x48
   12654:	ldr	r1, [sp, #68]	; 0x44
   12658:	movw	r6, #50392	; 0xc4d8
   1265c:	movt	r6, #2
   12660:	mov	sl, r6
   12664:	orrs	r0, r0, r1
   12668:	str	r0, [sp, #64]	; 0x40
   1266c:	beq	1267c <__assert_fail@plt+0xf68>
   12670:	ldr	r0, [sl, #24]
   12674:	cmp	r0, #0
   12678:	bne	13f0c <__assert_fail@plt+0x27f8>
   1267c:	ldr	r2, [sp, #84]	; 0x54
   12680:	cmp	r2, #0
   12684:	beq	126dc <__assert_fail@plt+0xfc8>
   12688:	ldr	r0, [sp, #100]	; 0x64
   1268c:	orrs	r0, r0, r9
   12690:	bne	126ec <__assert_fail@plt+0xfd8>
   12694:	movw	r1, #42951	; 0xa7c7
   12698:	mov	r0, #0
   1269c:	mov	r2, #5
   126a0:	movt	r1, #1
   126a4:	bl	11444 <dcgettext@plt>
   126a8:	mov	r4, r0
   126ac:	movw	r0, #43030	; 0xa816
   126b0:	movt	r0, #1
   126b4:	bl	17538 <__assert_fail@plt+0x5e24>
   126b8:	movw	r2, #43389	; 0xa97d
   126bc:	str	r0, [sp]
   126c0:	mov	r0, #0
   126c4:	mov	r1, #0
   126c8:	mov	r3, r4
   126cc:	movt	r2, #1
   126d0:	bl	114f8 <error@plt>
   126d4:	mov	r0, #1
   126d8:	bl	11810 <__assert_fail@plt+0xfc>
   126dc:	mov	r0, #1000	; 0x3e8
   126e0:	mov	r9, #0
   126e4:	mov	r2, #3
   126e8:	str	r0, [sp, #100]	; 0x64
   126ec:	movw	r0, #49488	; 0xc150
   126f0:	movt	r0, #2
   126f4:	ldr	r0, [r0]
   126f8:	cmn	r0, #1
   126fc:	bgt	12710 <__assert_fail@plt+0xffc>
   12700:	movw	r1, #49488	; 0xc150
   12704:	mov	r0, #10
   12708:	movt	r1, #2
   1270c:	str	r0, [r1]
   12710:	ldr	r0, [sl, #20]
   12714:	str	r9, [sp, #96]	; 0x60
   12718:	ldr	r9, [sp, #72]	; 0x48
   1271c:	sub	r8, r2, #5
   12720:	mov	r4, #0
   12724:	mov	r7, #0
   12728:	str	r2, [sp, #84]	; 0x54
   1272c:	cmp	r0, #0
   12730:	movne	r1, #1
   12734:	strbne	r1, [sl, #3]
   12738:	cmp	r8, #2
   1273c:	bhi	12838 <__assert_fail@plt+0x1124>
   12740:	ldr	r6, [sp, #100]	; 0x64
   12744:	ldr	r1, [sp, #96]	; 0x60
   12748:	subs	r4, r6, #1
   1274c:	sbc	r7, r1, #0
   12750:	cmp	r0, #0
   12754:	beq	12780 <__assert_fail@plt+0x106c>
   12758:	movw	r1, #42213	; 0xa4e5
   1275c:	add	r3, sp, #104	; 0x68
   12760:	mov	r2, #10
   12764:	mov	r5, #0
   12768:	movt	r1, #1
   1276c:	str	r1, [sp]
   12770:	mov	r1, #0
   12774:	bl	18c0c <__assert_fail@plt+0x74f8>
   12778:	cmp	r0, #0
   1277c:	beq	1278c <__assert_fail@plt+0x1078>
   12780:	mov	r6, r4
   12784:	mov	r5, r7
   12788:	b	127d4 <__assert_fail@plt+0x10c0>
   1278c:	ldr	r0, [sp, #104]	; 0x68
   12790:	ldr	r1, [sp, #108]	; 0x6c
   12794:	ldr	r3, [sp, #96]	; 0x60
   12798:	subs	r2, r0, r6
   1279c:	mvn	r6, r6
   127a0:	sbcs	r2, r1, r3
   127a4:	mov	r2, #0
   127a8:	mvn	r3, r3
   127ac:	movwcc	r2, #1
   127b0:	subs	r6, r6, r0
   127b4:	sbcs	r3, r3, r1
   127b8:	movwcs	r5, #1
   127bc:	adds	r6, r4, r0
   127c0:	and	r2, r5, r2
   127c4:	adc	r5, r7, r1
   127c8:	cmp	r2, #0
   127cc:	moveq	r5, r7
   127d0:	moveq	r6, r4
   127d4:	movw	r0, #49488	; 0xc150
   127d8:	movt	r0, #2
   127dc:	ldr	r0, [r0, #4]
   127e0:	bl	11588 <strlen@plt>
   127e4:	mov	r9, r0
   127e8:	mov	r4, #0
   127ec:	mov	r7, #0
   127f0:	mov	r0, r6
   127f4:	mov	r1, r5
   127f8:	mov	r2, r9
   127fc:	mov	r3, #0
   12800:	bl	19dec <__assert_fail@plt+0x86d8>
   12804:	adds	r4, r4, #1
   12808:	adc	r7, r7, #0
   1280c:	subs	r2, r6, r9
   12810:	mov	r6, r0
   12814:	sbcs	r2, r5, #0
   12818:	mov	r5, r1
   1281c:	bcs	127f0 <__assert_fail@plt+0x10dc>
   12820:	movw	r9, #50392	; 0xc4d8
   12824:	mov	r0, #1
   12828:	movt	r9, #2
   1282c:	mov	sl, r9
   12830:	strb	r0, [r9, #3]
   12834:	ldr	r9, [sp, #72]	; 0x48
   12838:	ldr	r5, [sl, #12]
   1283c:	cmp	r5, #0
   12840:	beq	1285c <__assert_fail@plt+0x1148>
   12844:	subs	r0, r5, r4
   12848:	rscs	r0, r7, #0
   1284c:	bcc	13f60 <__assert_fail@plt+0x284c>
   12850:	mov	r0, #1
   12854:	strb	r0, [sl, #3]
   12858:	b	12870 <__assert_fail@plt+0x115c>
   1285c:	rsbs	r0, r4, #2
   12860:	rscs	r0, r7, #0
   12864:	movcs	r4, #2
   12868:	mov	r5, r4
   1286c:	str	r4, [sl, #12]
   12870:	movw	r7, #50008	; 0xc358
   12874:	ldr	r0, [sp, #92]	; 0x5c
   12878:	movt	r7, #2
   1287c:	ldr	r1, [r7]
   12880:	cmp	r1, r0
   12884:	bge	128e0 <__assert_fail@plt+0x11cc>
   12888:	ldr	r2, [sp, #88]	; 0x58
   1288c:	add	r0, r1, #1
   12890:	str	r0, [r7]
   12894:	ldr	r1, [r2, r1, lsl #2]
   12898:	str	r1, [sl, #4]
   1289c:	ldr	r1, [sp, #92]	; 0x5c
   128a0:	cmp	r0, r1
   128a4:	blt	128f0 <__assert_fail@plt+0x11dc>
   128a8:	mov	r1, r0
   128ac:	ldr	r0, [sp, #92]	; 0x5c
   128b0:	cmp	r1, r0
   128b4:	bge	12910 <__assert_fail@plt+0x11fc>
   128b8:	movw	r1, #43396	; 0xa984
   128bc:	mov	r0, #0
   128c0:	mov	r2, #5
   128c4:	movt	r1, #1
   128c8:	bl	11444 <dcgettext@plt>
   128cc:	mov	r4, r0
   128d0:	ldr	r0, [r7]
   128d4:	ldr	r1, [sp, #88]	; 0x58
   128d8:	ldr	r0, [r1, r0, lsl #2]
   128dc:	b	13e3c <__assert_fail@plt+0x2728>
   128e0:	mov	r0, r1
   128e4:	ldr	r1, [sp, #92]	; 0x5c
   128e8:	cmp	r0, r1
   128ec:	bge	128a8 <__assert_fail@plt+0x1194>
   128f0:	ldr	r2, [sp, #88]	; 0x58
   128f4:	add	r1, r0, #1
   128f8:	str	r1, [r7]
   128fc:	ldr	r0, [r2, r0, lsl #2]
   12900:	str	r0, [sl, #8]
   12904:	ldr	r0, [sp, #92]	; 0x5c
   12908:	cmp	r1, r0
   1290c:	blt	128b8 <__assert_fail@plt+0x11a4>
   12910:	ldr	r0, [sl, #20]
   12914:	cmp	r0, #0
   12918:	beq	12928 <__assert_fail@plt+0x1214>
   1291c:	bl	11588 <strlen@plt>
   12920:	cmp	r0, r5
   12924:	bhi	13f88 <__assert_fail@plt+0x2874>
   12928:	ldr	r4, [sl, #4]
   1292c:	movw	r1, #45633	; 0xb241
   12930:	movt	r1, #1
   12934:	mov	r0, r4
   12938:	bl	113a8 <strcmp@plt>
   1293c:	cmp	r0, #0
   12940:	beq	12960 <__assert_fail@plt+0x124c>
   12944:	mov	r0, #0
   12948:	mov	r1, r4
   1294c:	mov	r2, #0
   12950:	mov	r3, #0
   12954:	bl	1530c <__assert_fail@plt+0x3bf8>
   12958:	cmn	r0, #1
   1295c:	ble	13f94 <__assert_fail@plt+0x2880>
   12960:	movw	r4, #50032	; 0xc370
   12964:	mov	r0, #3
   12968:	mov	r1, #0
   1296c:	movt	r4, #2
   12970:	mov	r2, r4
   12974:	bl	1148c <__fxstat64@plt>
   12978:	cmp	r0, #0
   1297c:	bne	13ecc <__assert_fail@plt+0x27b8>
   12980:	ldr	r1, [sp, #80]	; 0x50
   12984:	cmp	r1, #0
   12988:	bne	129c0 <__assert_fail@plt+0x12ac>
   1298c:	ldr	r0, [r4, #56]	; 0x38
   12990:	mov	r2, #0
   12994:	mov	r1, #0
   12998:	cmp	r0, #536870913	; 0x20000001
   1299c:	movwcc	r2, #1
   129a0:	cmp	r0, #0
   129a4:	movwgt	r1, #1
   129a8:	ands	r1, r1, r2
   129ac:	mov	r1, r0
   129b0:	moveq	r1, #512	; 0x200
   129b4:	moveq	r1, #131072	; 0x20000
   129b8:	cmp	r0, #131072	; 0x20000
   129bc:	movlt	r1, #131072	; 0x20000
   129c0:	ldr	r0, [sp, #76]	; 0x4c
   129c4:	str	r1, [sp, #80]	; 0x50
   129c8:	add	r1, r1, #1
   129cc:	str	r9, [sp, #72]	; 0x48
   129d0:	bl	18500 <__assert_fail@plt+0x6dec>
   129d4:	cmp	r8, #1
   129d8:	str	r0, [sp, #76]	; 0x4c
   129dc:	bhi	12bb0 <__assert_fail@plt+0x149c>
   129e0:	mov	r0, #1
   129e4:	mov	r2, #0
   129e8:	mov	r3, #0
   129ec:	mov	sl, r4
   129f0:	str	r0, [sp]
   129f4:	mov	r0, #0
   129f8:	bl	114b0 <lseek64@plt>
   129fc:	cmp	r1, #0
   12a00:	bmi	13fc4 <__assert_fail@plt+0x28b0>
   12a04:	ldr	r7, [sp, #96]	; 0x60
   12a08:	ldr	r4, [sp, #80]	; 0x50
   12a0c:	mov	r9, r0
   12a10:	mov	r6, r1
   12a14:	mov	r5, #0
   12a18:	mov	r2, #0
   12a1c:	ldr	r0, [sp, #76]	; 0x4c
   12a20:	mov	r8, r2
   12a24:	add	r1, r0, r2
   12a28:	sub	r2, r4, r2
   12a2c:	mov	r0, #0
   12a30:	bl	17550 <__assert_fail@plt+0x5e3c>
   12a34:	cmp	r0, #0
   12a38:	beq	12b58 <__assert_fail@plt+0x1444>
   12a3c:	cmn	r0, #1
   12a40:	beq	13fd8 <__assert_fail@plt+0x28c4>
   12a44:	mov	r2, r8
   12a48:	adds	r2, r8, r0
   12a4c:	adc	r5, r5, #0
   12a50:	subs	r0, r2, r4
   12a54:	sbcs	r0, r5, #0
   12a58:	bcc	12a1c <__assert_fail@plt+0x1308>
   12a5c:	ldrd	r0, [sl, #48]	; 0x30
   12a60:	str	r2, [sp, #36]	; 0x24
   12a64:	orrs	r2, r0, r1
   12a68:	beq	140ac <__assert_fail@plt+0x2998>
   12a6c:	ldr	r2, [sp, #36]	; 0x24
   12a70:	str	r5, [sp, #32]
   12a74:	adds	r8, r2, r9
   12a78:	ldr	r2, [sl, #16]
   12a7c:	adc	r6, r5, r6
   12a80:	and	r2, r2, #53248	; 0xd000
   12a84:	orr	r2, r2, #8192	; 0x2000
   12a88:	cmp	r2, #40960	; 0xa000
   12a8c:	bne	12a9c <__assert_fail@plt+0x1388>
   12a90:	subs	r2, r0, r8
   12a94:	sbcs	r2, r1, r6
   12a98:	bge	12b1c <__assert_fail@plt+0x1408>
   12a9c:	mov	r0, #2
   12aa0:	mov	r2, #0
   12aa4:	mov	r3, #0
   12aa8:	str	r0, [sp]
   12aac:	mov	r0, #0
   12ab0:	bl	114b0 <lseek64@plt>
   12ab4:	cmp	r1, #0
   12ab8:	bmi	13fd8 <__assert_fail@plt+0x28c4>
   12abc:	mov	sl, r0
   12ac0:	mov	r5, r1
   12ac4:	eor	r0, r0, r8
   12ac8:	eor	r1, r1, r6
   12acc:	orrs	r0, r0, r1
   12ad0:	mov	r0, r8
   12ad4:	mov	r1, r6
   12ad8:	beq	12b1c <__assert_fail@plt+0x1408>
   12adc:	mov	r9, #0
   12ae0:	mov	r0, #0
   12ae4:	mov	r2, r8
   12ae8:	mov	r3, r6
   12aec:	str	r9, [sp]
   12af0:	bl	114b0 <lseek64@plt>
   12af4:	cmp	r1, #0
   12af8:	bmi	13fd8 <__assert_fail@plt+0x28c4>
   12afc:	subs	r0, sl, r8
   12b00:	sbcs	r0, r5, r6
   12b04:	movwlt	r9, #1
   12b08:	cmp	r9, #0
   12b0c:	movne	r5, r6
   12b10:	movne	sl, r8
   12b14:	mov	r0, sl
   12b18:	mov	r1, r5
   12b1c:	ldr	r3, [sp, #36]	; 0x24
   12b20:	ldr	r2, [sp, #32]
   12b24:	subs	r0, r0, r8
   12b28:	sbc	r1, r1, r6
   12b2c:	adds	r3, r0, r3
   12b30:	mvn	r0, #-2147483648	; 0x80000000
   12b34:	adc	r2, r1, r2
   12b38:	mvn	r1, r3
   12b3c:	eor	r0, r2, r0
   12b40:	orrs	r0, r1, r0
   12b44:	beq	140ac <__assert_fail@plt+0x2998>
   12b48:	mov	r8, r3
   12b4c:	mov	r5, r2
   12b50:	cmn	r2, #1
   12b54:	ble	13fd8 <__assert_fail@plt+0x28c4>
   12b58:	cmn	r7, #1
   12b5c:	ble	14024 <__assert_fail@plt+0x2910>
   12b60:	ldr	r2, [sp, #100]	; 0x64
   12b64:	subs	r0, r8, r4
   12b68:	mov	r9, r4
   12b6c:	movw	r6, #50392	; 0xc4d8
   12b70:	sbcs	r0, r5, r4, asr #31
   12b74:	movt	r6, #2
   12b78:	mov	r0, #0
   12b7c:	movlt	r9, r8
   12b80:	mov	sl, r6
   12b84:	subs	r1, r2, r8
   12b88:	sbcs	r1, r7, r5
   12b8c:	movwcc	r0, #1
   12b90:	cmp	r0, #0
   12b94:	moveq	r5, r7
   12b98:	moveq	r8, r2
   12b9c:	ldr	r0, [sl, #24]
   12ba0:	ldr	r4, [sp, #84]	; 0x54
   12ba4:	cmp	r0, #0
   12ba8:	bne	12bd0 <__assert_fail@plt+0x14bc>
   12bac:	b	12c20 <__assert_fail@plt+0x150c>
   12bb0:	ldr	r7, [sp, #96]	; 0x60
   12bb4:	mvn	r5, #-2147483648	; 0x80000000
   12bb8:	mvn	r8, #0
   12bbc:	mvn	r9, #0
   12bc0:	ldr	r0, [sl, #24]
   12bc4:	ldr	r4, [sp, #84]	; 0x54
   12bc8:	cmp	r0, #0
   12bcc:	beq	12c20 <__assert_fail@plt+0x150c>
   12bd0:	movw	r0, #50136	; 0xc3d8
   12bd4:	movt	r0, #2
   12bd8:	bl	11678 <sigemptyset@plt>
   12bdc:	add	r2, sp, #104	; 0x68
   12be0:	mov	r0, #13
   12be4:	mov	r1, #0
   12be8:	bl	11498 <sigaction@plt>
   12bec:	ldr	r0, [sp, #104]	; 0x68
   12bf0:	cmp	r0, #1
   12bf4:	beq	12c08 <__assert_fail@plt+0x14f4>
   12bf8:	movw	r0, #50136	; 0xc3d8
   12bfc:	mov	r1, #13
   12c00:	movt	r0, #2
   12c04:	bl	11528 <sigaddset@plt>
   12c08:	movw	r1, #50136	; 0xc3d8
   12c0c:	movw	r2, #50264	; 0xc458
   12c10:	mov	r0, #0
   12c14:	movt	r1, #2
   12c18:	movt	r2, #2
   12c1c:	bl	113d8 <sigprocmask@plt>
   12c20:	sub	r0, r4, #1
   12c24:	cmp	r0, #6
   12c28:	bhi	13f18 <__assert_fail@plt+0x2804>
   12c2c:	add	r1, pc, #4
   12c30:	ldr	r3, [sp, #80]	; 0x50
   12c34:	ldr	pc, [r1, r0, lsl #2]
   12c38:	andeq	r2, r1, r0, asr #26
   12c3c:	andeq	r2, r1, r4, ror #26
   12c40:	andeq	r2, r1, r4, asr ip
   12c44:	andeq	r2, r1, r4, asr ip
   12c48:	andeq	r3, r1, r4, asr #3
   12c4c:	strdeq	r3, [r1], -r0
   12c50:			; <UNDEFINED> instruction: 0x000131b4
   12c54:	mov	r4, #0
   12c58:	mov	r9, #1
   12c5c:	mov	r7, #0
   12c60:	b	12c70 <__assert_fail@plt+0x155c>
   12c64:	ldr	r0, [sp, #92]	; 0x5c
   12c68:	cmp	r0, #0
   12c6c:	beq	13cb4 <__assert_fail@plt+0x25a0>
   12c70:	ldr	sl, [sp, #76]	; 0x4c
   12c74:	ldr	r2, [sp, #80]	; 0x50
   12c78:	mov	r0, #0
   12c7c:	mov	r1, sl
   12c80:	bl	17550 <__assert_fail@plt+0x5e3c>
   12c84:	cmn	r0, #1
   12c88:	beq	13d98 <__assert_fail@plt+0x2684>
   12c8c:	mov	r1, r0
   12c90:	movw	r0, #49488	; 0xc150
   12c94:	mov	r8, sl
   12c98:	movt	r0, #2
   12c9c:	str	r1, [sp, #92]	; 0x5c
   12ca0:	ldr	r6, [r0]
   12ca4:	mov	r0, sl
   12ca8:	strb	r6, [r8, r1]!
   12cac:	mov	r1, r6
   12cb0:	bl	11474 <rawmemchr@plt>
   12cb4:	cmp	r0, r8
   12cb8:	bne	12cf0 <__assert_fail@plt+0x15dc>
   12cbc:	cmp	r8, sl
   12cc0:	beq	12c64 <__assert_fail@plt+0x1550>
   12cc4:	sub	r2, r8, sl
   12cc8:	and	r0, r9, #1
   12ccc:	mov	r1, sl
   12cd0:	bl	145c4 <__assert_fail@plt+0x2eb0>
   12cd4:	mov	r9, #0
   12cd8:	b	12c64 <__assert_fail@plt+0x1550>
   12cdc:	mov	r0, r5
   12ce0:	mov	r1, r6
   12ce4:	bl	11474 <rawmemchr@plt>
   12ce8:	cmp	r0, r8
   12cec:	beq	12cbc <__assert_fail@plt+0x15a8>
   12cf0:	add	r5, r0, #1
   12cf4:	ldr	r0, [sp, #100]	; 0x64
   12cf8:	adds	r4, r4, #1
   12cfc:	adc	r7, r7, #0
   12d00:	subs	r0, r4, r0
   12d04:	ldr	r0, [sp, #96]	; 0x60
   12d08:	sbcs	r0, r7, r0
   12d0c:	bcc	12cdc <__assert_fail@plt+0x15c8>
   12d10:	sub	r2, r5, sl
   12d14:	and	r0, r9, #1
   12d18:	mov	r1, sl
   12d1c:	bl	145c4 <__assert_fail@plt+0x2eb0>
   12d20:	movw	r0, #49488	; 0xc150
   12d24:	mov	r4, #0
   12d28:	mov	r9, #1
   12d2c:	mov	sl, r5
   12d30:	mov	r7, #0
   12d34:	movt	r0, #2
   12d38:	ldr	r6, [r0]
   12d3c:	b	12cdc <__assert_fail@plt+0x15c8>
   12d40:	mov	r0, #0
   12d44:	ldr	r2, [sp, #76]	; 0x4c
   12d48:	mov	r1, r7
   12d4c:	str	r0, [sp, #8]
   12d50:	str	r0, [sp, #12]
   12d54:	mvn	r0, #0
   12d58:	str	r0, [sp]
   12d5c:	ldr	r0, [sp, #100]	; 0x64
   12d60:	b	13780 <__assert_fail@plt+0x206c>
   12d64:	mvn	r0, r3
   12d68:	mov	r5, #0
   12d6c:	mov	r6, #0
   12d70:	mov	r8, #0
   12d74:	mov	sl, #0
   12d78:	mov	r2, r3
   12d7c:	str	r0, [sp, #48]	; 0x30
   12d80:	mov	r0, #0
   12d84:	str	r0, [sp, #56]	; 0x38
   12d88:	mov	r0, #0
   12d8c:	str	r0, [sp, #52]	; 0x34
   12d90:	ldr	r4, [sp, #76]	; 0x4c
   12d94:	mov	r0, #0
   12d98:	mov	r1, r4
   12d9c:	bl	17550 <__assert_fail@plt+0x5e3c>
   12da0:	cmp	r0, #0
   12da4:	beq	130c0 <__assert_fail@plt+0x19ac>
   12da8:	ldr	r9, [sp, #100]	; 0x64
   12dac:	str	r4, [sp, #88]	; 0x58
   12db0:	cmn	r0, #1
   12db4:	mov	r3, r0
   12db8:	mov	r4, r8
   12dbc:	mov	r2, sl
   12dc0:	str	r0, [sp, #44]	; 0x2c
   12dc4:	bne	12e0c <__assert_fail@plt+0x16f8>
   12dc8:	b	13d98 <__assert_fail@plt+0x2684>
   12dcc:	ldr	r9, [sp, #100]	; 0x64
   12dd0:	ldr	r5, [sp, #68]	; 0x44
   12dd4:	str	ip, [sp, #88]	; 0x58
   12dd8:	mov	r3, r4
   12ddc:	clz	r0, r7
   12de0:	cmp	r7, #0
   12de4:	ldr	r7, [sp, #96]	; 0x60
   12de8:	ldr	r4, [sp, #72]	; 0x48
   12dec:	ldr	r2, [sp, #92]	; 0x5c
   12df0:	lsr	r0, r0, #5
   12df4:	movwne	r4, #0
   12df8:	movwne	r2, #0
   12dfc:	cmp	r3, #0
   12e00:	and	r0, sl, r0
   12e04:	str	r0, [sp, #56]	; 0x38
   12e08:	beq	130a8 <__assert_fail@plt+0x1994>
   12e0c:	subs	r0, r9, r4
   12e10:	str	r5, [sp, #68]	; 0x44
   12e14:	mov	r5, r2
   12e18:	str	r3, [sp, #64]	; 0x40
   12e1c:	sbc	r1, r7, r2
   12e20:	subs	r9, r0, r6
   12e24:	ldr	r7, [sp, #88]	; 0x58
   12e28:	sbc	r1, r1, #0
   12e2c:	subs	r0, r3, r9
   12e30:	mov	r2, r9
   12e34:	mov	r8, r9
   12e38:	rscs	r0, r1, #0
   12e3c:	mov	r0, #0
   12e40:	str	r1, [sp, #60]	; 0x3c
   12e44:	movwcc	r0, #1
   12e48:	cmp	r0, #0
   12e4c:	movw	r0, #49488	; 0xc150
   12e50:	add	r1, r7, r9
   12e54:	movt	r0, #2
   12e58:	sub	r1, r1, #1
   12e5c:	movwne	r1, #0
   12e60:	movne	r2, r3
   12e64:	movwne	r8, #0
   12e68:	str	r1, [sp, #84]	; 0x54
   12e6c:	ldr	r1, [r0]
   12e70:	mov	r0, r7
   12e74:	bl	115b8 <memrchr@plt>
   12e78:	mov	sl, r0
   12e7c:	cmp	r6, #0
   12e80:	str	r5, [sp, #92]	; 0x5c
   12e84:	beq	12ef0 <__assert_fail@plt+0x17dc>
   12e88:	orrs	r0, r4, r5
   12e8c:	beq	12ea0 <__assert_fail@plt+0x178c>
   12e90:	cmp	sl, #0
   12e94:	bne	12ea0 <__assert_fail@plt+0x178c>
   12e98:	mov	ip, r7
   12e9c:	b	12f64 <__assert_fail@plt+0x1850>
   12ea0:	ldr	r5, [sp, #52]	; 0x34
   12ea4:	clz	r0, r0
   12ea8:	mov	r2, r6
   12eac:	lsr	r0, r0, #5
   12eb0:	mov	r1, r5
   12eb4:	bl	145c4 <__assert_fail@plt+0x2eb0>
   12eb8:	adds	r4, r4, r6
   12ebc:	ldr	r0, [sp, #92]	; 0x5c
   12ec0:	str	r4, [sp, #72]	; 0x48
   12ec4:	ldr	r4, [sp, #80]	; 0x50
   12ec8:	adc	r0, r0, #0
   12ecc:	cmp	r6, r4
   12ed0:	str	r0, [sp, #92]	; 0x5c
   12ed4:	bls	12ee8 <__assert_fail@plt+0x17d4>
   12ed8:	mov	r0, r5
   12edc:	mov	r1, r4
   12ee0:	bl	185d8 <__assert_fail@plt+0x6ec4>
   12ee4:	str	r0, [sp, #52]	; 0x34
   12ee8:	str	r4, [sp, #68]	; 0x44
   12eec:	ldr	r4, [sp, #72]	; 0x48
   12ef0:	cmp	sl, #0
   12ef4:	beq	12f5c <__assert_fail@plt+0x1848>
   12ef8:	ldr	r6, [sp, #92]	; 0x5c
   12efc:	sub	r0, sl, r7
   12f00:	mov	r1, r7
   12f04:	add	r5, r0, #1
   12f08:	mov	r2, r5
   12f0c:	orr	r0, r4, r6
   12f10:	clz	r0, r0
   12f14:	lsr	r0, r0, #5
   12f18:	bl	145c4 <__assert_fail@plt+0x2eb0>
   12f1c:	ldr	r1, [sp, #64]	; 0x40
   12f20:	ldr	r2, [sp, #60]	; 0x3c
   12f24:	ldr	r7, [sp, #84]	; 0x54
   12f28:	add	ip, sl, #1
   12f2c:	mov	sl, #1
   12f30:	subs	r0, r1, r9
   12f34:	rscs	r0, r2, #0
   12f38:	mov	r0, r4
   12f3c:	sub	r4, r1, r5
   12f40:	subcs	r8, r8, r5
   12f44:	adds	r0, r0, r5
   12f48:	adc	r6, r6, #0
   12f4c:	str	r0, [sp, #72]	; 0x48
   12f50:	str	r6, [sp, #92]	; 0x5c
   12f54:	mov	r6, #0
   12f58:	b	12ff0 <__assert_fail@plt+0x18dc>
   12f5c:	mov	ip, r7
   12f60:	mov	r6, #0
   12f64:	ldr	r0, [sp, #56]	; 0x38
   12f68:	ldr	r7, [sp, #84]	; 0x54
   12f6c:	ldr	r1, [sp, #64]	; 0x40
   12f70:	mov	sl, #1
   12f74:	tst	r0, #1
   12f78:	beq	12f88 <__assert_fail@plt+0x1874>
   12f7c:	str	r4, [sp, #72]	; 0x48
   12f80:	mov	r4, r1
   12f84:	b	12fec <__assert_fail@plt+0x18d8>
   12f88:	ldr	sl, [sp, #92]	; 0x5c
   12f8c:	mov	r5, r1
   12f90:	ldr	r1, [sp, #88]	; 0x58
   12f94:	cmp	r7, #0
   12f98:	movne	r5, r8
   12f9c:	mov	r2, r5
   12fa0:	orr	r0, r4, sl
   12fa4:	clz	r0, r0
   12fa8:	lsr	r0, r0, #5
   12fac:	bl	145c4 <__assert_fail@plt+0x2eb0>
   12fb0:	ldr	r0, [sp, #88]	; 0x58
   12fb4:	ldr	r7, [sp, #84]	; 0x54
   12fb8:	ldr	r1, [sp, #64]	; 0x40
   12fbc:	add	r0, r0, r5
   12fc0:	str	r0, [sp, #88]	; 0x58
   12fc4:	mov	r0, r4
   12fc8:	sub	r4, r1, r5
   12fcc:	ldr	ip, [sp, #88]	; 0x58
   12fd0:	adds	r0, r0, r5
   12fd4:	adc	sl, sl, #0
   12fd8:	cmp	r7, #0
   12fdc:	str	r0, [sp, #72]	; 0x48
   12fe0:	str	sl, [sp, #92]	; 0x5c
   12fe4:	movwne	r8, #0
   12fe8:	mov	sl, #0
   12fec:	ldr	r2, [sp, #60]	; 0x3c
   12ff0:	subs	r0, r1, r9
   12ff4:	mov	r1, r4
   12ff8:	mov	r3, r7
   12ffc:	rscs	r0, r2, #0
   13000:	mov	r0, #0
   13004:	mov	r2, r8
   13008:	movwcc	r0, #1
   1300c:	cmp	r4, #0
   13010:	movwne	r1, #1
   13014:	cmp	r8, #0
   13018:	movwne	r2, #1
   1301c:	cmp	r7, #0
   13020:	movwne	r3, #1
   13024:	tst	r3, r2
   13028:	andseq	r0, r0, r1
   1302c:	beq	12dcc <__assert_fail@plt+0x16b8>
   13030:	ldr	r5, [sp, #68]	; 0x44
   13034:	ldr	r9, [sp, #100]	; 0x64
   13038:	cmp	r7, #0
   1303c:	moveq	r8, r4
   13040:	sub	r0, r5, r6
   13044:	cmp	r0, r8
   13048:	bcs	13074 <__assert_fail@plt+0x1960>
   1304c:	ldr	r0, [sp, #48]	; 0x30
   13050:	cmp	r5, r0
   13054:	bhi	13ec8 <__assert_fail@plt+0x27b4>
   13058:	ldr	r0, [sp, #80]	; 0x50
   1305c:	mov	r7, ip
   13060:	add	r5, r5, r0
   13064:	ldr	r0, [sp, #52]	; 0x34
   13068:	mov	r1, r5
   1306c:	bl	185d8 <__assert_fail@plt+0x6ec4>
   13070:	b	1307c <__assert_fail@plt+0x1968>
   13074:	ldr	r0, [sp, #52]	; 0x34
   13078:	mov	r7, ip
   1307c:	str	r0, [sp, #52]	; 0x34
   13080:	add	r0, r0, r6
   13084:	mov	r1, r7
   13088:	mov	r2, r8
   1308c:	bl	11408 <memcpy@plt>
   13090:	add	r7, r7, r8
   13094:	sub	r3, r4, r8
   13098:	add	r6, r8, r6
   1309c:	str	r7, [sp, #88]	; 0x58
   130a0:	ldr	r7, [sp, #84]	; 0x54
   130a4:	b	12ddc <__assert_fail@plt+0x16c8>
   130a8:	ldr	r0, [sp, #44]	; 0x2c
   130ac:	mov	sl, r2
   130b0:	ldr	r2, [sp, #80]	; 0x50
   130b4:	mov	r8, r4
   130b8:	cmp	r0, #0
   130bc:	bne	12d90 <__assert_fail@plt+0x167c>
   130c0:	ldr	r4, [sp, #52]	; 0x34
   130c4:	cmp	r6, #0
   130c8:	beq	130e4 <__assert_fail@plt+0x19d0>
   130cc:	orr	r0, r8, sl
   130d0:	mov	r1, r4
   130d4:	mov	r2, r6
   130d8:	clz	r0, r0
   130dc:	lsr	r0, r0, #5
   130e0:	bl	145c4 <__assert_fail@plt+0x2eb0>
   130e4:	mov	r0, r4
   130e8:	bl	153d0 <__assert_fail@plt+0x3cbc>
   130ec:	b	13cb4 <__assert_fail@plt+0x25a0>
   130f0:	ldr	r2, [sp, #100]	; 0x64
   130f4:	ldr	r3, [sp, #72]	; 0x48
   130f8:	subs	r0, r2, #1
   130fc:	sbc	r1, r7, #0
   13100:	subs	r3, r2, r3
   13104:	ldr	r3, [sp, #68]	; 0x44
   13108:	sbcs	r3, r7, r3
   1310c:	bcc	1406c <__assert_fail@plt+0x2958>
   13110:	subs	r0, r0, r8
   13114:	sbcs	r0, r1, r5
   13118:	bcs	1406c <__assert_fail@plt+0x2958>
   1311c:	mov	r0, r8
   13120:	mov	r1, r5
   13124:	mov	r3, r7
   13128:	str	r9, [sp, #92]	; 0x5c
   1312c:	str	r8, [sp, #36]	; 0x24
   13130:	str	r5, [sp, #32]
   13134:	bl	19dec <__assert_fail@plt+0x86d8>
   13138:	ldr	r6, [sp, #72]	; 0x48
   1313c:	subs	r4, r0, #1
   13140:	mov	r8, #0
   13144:	str	r0, [sp, #56]	; 0x38
   13148:	str	r1, [sp, #52]	; 0x34
   1314c:	sbc	r7, r1, #0
   13150:	subs	r2, r6, #2
   13154:	ldr	r2, [sp, #68]	; 0x44
   13158:	sbcs	r3, r2, #0
   1315c:	bcc	13330 <__assert_fail@plt+0x1c1c>
   13160:	subs	r9, r6, #1
   13164:	umull	r3, r7, r0, r9
   13168:	sbc	sl, r2, #0
   1316c:	ldr	r2, [sp, #92]	; 0x5c
   13170:	mla	r0, r0, sl, r7
   13174:	mla	r1, r1, r9, r0
   13178:	subs	r5, r3, #1
   1317c:	sbc	r3, r1, #0
   13180:	subs	r0, r5, r2
   13184:	sbcs	r0, r3, #0
   13188:	bge	137bc <__assert_fail@plt+0x20a8>
   1318c:	ldr	r0, [sp, #76]	; 0x4c
   13190:	sub	r2, r2, r5
   13194:	mov	r4, r3
   13198:	str	r2, [sp, #92]	; 0x5c
   1319c:	add	r1, r0, r5
   131a0:	bl	113e4 <memmove@plt>
   131a4:	mov	r3, r4
   131a8:	mov	r4, r5
   131ac:	mov	r7, r3
   131b0:	b	137f4 <__assert_fail@plt+0x20e0>
   131b4:	ldr	r0, [sp, #64]	; 0x40
   131b8:	cmp	r0, #0
   131bc:	beq	13344 <__assert_fail@plt+0x1c30>
   131c0:	b	133a8 <__assert_fail@plt+0x1c94>
   131c4:	ldr	r0, [sp, #64]	; 0x40
   131c8:	cmp	r0, #0
   131cc:	beq	13754 <__assert_fail@plt+0x2040>
   131d0:	ldr	r0, [sp, #72]	; 0x48
   131d4:	ldr	r6, [sp, #100]	; 0x64
   131d8:	subs	sl, r0, #1
   131dc:	ldr	r0, [sp, #68]	; 0x44
   131e0:	sbc	r1, r0, #0
   131e4:	subs	r0, sl, r6
   131e8:	mov	r0, r1
   131ec:	sbcs	r0, r1, r7
   131f0:	str	r1, [sp, #96]	; 0x60
   131f4:	bcs	1408c <__assert_fail@plt+0x2978>
   131f8:	subs	r0, r8, r6
   131fc:	sbcs	r0, r5, r7
   13200:	bcc	1408c <__assert_fail@plt+0x2978>
   13204:	mov	r0, r8
   13208:	mov	r1, r5
   1320c:	mov	r2, r6
   13210:	mov	r3, r7
   13214:	bl	19dec <__assert_fail@plt+0x86d8>
   13218:	ldr	r4, [sp, #72]	; 0x48
   1321c:	ldr	r3, [sp, #68]	; 0x44
   13220:	mov	ip, r8
   13224:	umull	r8, r2, r0, r4
   13228:	eor	r6, r4, r6
   1322c:	eor	r7, r3, r7
   13230:	mla	r2, r0, r3, r2
   13234:	orrs	r3, r6, r7
   13238:	ldr	r3, [sp, #96]	; 0x60
   1323c:	mlane	r5, r1, r4, r2
   13240:	umull	r7, r2, r0, sl
   13244:	moveq	r8, ip
   13248:	mla	r0, r0, r3, r2
   1324c:	mov	r6, r5
   13250:	mla	r4, r1, sl, r0
   13254:	subs	r0, r7, r9
   13258:	sbcs	r0, r4, #0
   1325c:	bge	13788 <__assert_fail@plt+0x2074>
   13260:	ldr	r0, [sp, #76]	; 0x4c
   13264:	sub	r5, r9, r7
   13268:	mov	r2, r5
   1326c:	add	r1, r0, r7
   13270:	bl	113e4 <memmove@plt>
   13274:	subs	r0, r7, r8
   13278:	sbcs	r0, r4, r6
   1327c:	bge	13cb4 <__assert_fail@plt+0x25a0>
   13280:	mov	r9, r6
   13284:	cmn	r5, #1
   13288:	bne	132cc <__assert_fail@plt+0x1bb8>
   1328c:	b	132b0 <__assert_fail@plt+0x1b9c>
   13290:	adds	r7, r7, r6
   13294:	mvn	r5, #0
   13298:	adc	r4, r4, #0
   1329c:	subs	r0, r7, r8
   132a0:	sbcs	r0, r4, r9
   132a4:	bge	13cb4 <__assert_fail@plt+0x25a0>
   132a8:	cmn	r5, #1
   132ac:	bne	132cc <__assert_fail@plt+0x1bb8>
   132b0:	ldr	r1, [sp, #76]	; 0x4c
   132b4:	ldr	r2, [sp, #80]	; 0x50
   132b8:	mov	r0, #0
   132bc:	bl	17550 <__assert_fail@plt+0x5e3c>
   132c0:	mov	r5, r0
   132c4:	cmn	r0, #1
   132c8:	beq	13d98 <__assert_fail@plt+0x2684>
   132cc:	cmp	r5, #0
   132d0:	beq	13cb4 <__assert_fail@plt+0x25a0>
   132d4:	subs	r6, r8, r7
   132d8:	sbc	r0, r9, r4
   132dc:	subs	r1, r5, r6
   132e0:	ldr	r1, [sp, #76]	; 0x4c
   132e4:	rscs	r0, r0, #0
   132e8:	mov	r0, #1
   132ec:	movlt	r6, r5
   132f0:	mov	r2, r6
   132f4:	bl	154a0 <__assert_fail@plt+0x3d8c>
   132f8:	cmp	r0, r6
   132fc:	beq	13290 <__assert_fail@plt+0x1b7c>
   13300:	bl	115d0 <__errno_location@plt>
   13304:	ldr	r5, [r0]
   13308:	cmp	r5, #32
   1330c:	bne	13324 <__assert_fail@plt+0x1c10>
   13310:	movw	r0, #50392	; 0xc4d8
   13314:	movt	r0, #2
   13318:	ldr	r0, [r0, #24]
   1331c:	cmp	r0, #0
   13320:	bne	13290 <__assert_fail@plt+0x1b7c>
   13324:	movw	r2, #45633	; 0xb241
   13328:	movt	r2, #1
   1332c:	b	13ee8 <__assert_fail@plt+0x27d4>
   13330:	mov	r9, #1
   13334:	mov	r5, #0
   13338:	mov	r3, #0
   1333c:	mov	sl, #0
   13340:	b	137f4 <__assert_fail@plt+0x20e0>
   13344:	cmp	r7, #0
   13348:	bne	13ec8 <__assert_fail@plt+0x27b4>
   1334c:	ldr	r5, [sp, #100]	; 0x64
   13350:	mov	r1, #16
   13354:	mov	r9, sl
   13358:	mov	r0, r5
   1335c:	bl	18660 <__assert_fail@plt+0x6f4c>
   13360:	mov	sl, r0
   13364:	mov	r4, #0
   13368:	mvn	r8, #0
   1336c:	mov	r6, #0
   13370:	bl	146cc <__assert_fail@plt+0x2fb8>
   13374:	ldr	r0, [r9, #32]
   13378:	bl	18a94 <__assert_fail@plt+0x7380>
   1337c:	mov	r1, sl
   13380:	str	r0, [r1, r6, lsl #4]!
   13384:	add	r6, r6, #1
   13388:	subs	r0, r6, r5
   1338c:	rscs	r0, r7, #0
   13390:	str	r8, [r1, #4]
   13394:	str	r4, [r1, #8]
   13398:	str	r4, [r1, #12]
   1339c:	bcc	13370 <__assert_fail@plt+0x1c5c>
   133a0:	str	sl, [sp, #44]	; 0x2c
   133a4:	mov	sl, r9
   133a8:	mov	r0, #0
   133ac:	ldr	r9, [sp, #72]	; 0x48
   133b0:	mov	r6, #1
   133b4:	str	r0, [sp, #92]	; 0x5c
   133b8:	mov	r0, #0
   133bc:	str	r0, [sp, #88]	; 0x58
   133c0:	mov	r0, #0
   133c4:	str	r0, [sp, #60]	; 0x3c
   133c8:	mov	r0, #0
   133cc:	str	r0, [sp, #56]	; 0x38
   133d0:	mov	r0, #0
   133d4:	str	r0, [sp, #40]	; 0x28
   133d8:	ldr	r8, [sp, #76]	; 0x4c
   133dc:	ldr	r2, [sp, #80]	; 0x50
   133e0:	mov	r0, #0
   133e4:	mov	r1, r8
   133e8:	bl	17550 <__assert_fail@plt+0x5e3c>
   133ec:	cmp	r0, #0
   133f0:	beq	136a4 <__assert_fail@plt+0x1f90>
   133f4:	cmn	r0, #1
   133f8:	beq	13ecc <__assert_fail@plt+0x27b8>
   133fc:	add	r5, r8, r0
   13400:	str	r5, [sp, #84]	; 0x54
   13404:	b	13464 <__assert_fail@plt+0x1d50>
   13408:	mov	r0, #1
   1340c:	mov	r1, r7
   13410:	mov	r2, r5
   13414:	bl	154a0 <__assert_fail@plt+0x3d8c>
   13418:	cmp	r0, r5
   1341c:	bne	13f2c <__assert_fail@plt+0x2818>
   13420:	cmp	r4, #0
   13424:	beq	1353c <__assert_fail@plt+0x1e28>
   13428:	ldr	r0, [sp, #100]	; 0x64
   1342c:	ldr	r1, [sp, #96]	; 0x60
   13430:	ldr	r2, [sp, #92]	; 0x5c
   13434:	ldr	r5, [sp, #84]	; 0x54
   13438:	eor	r0, r6, r0
   1343c:	eor	r1, r2, r1
   13440:	adds	r6, r6, #1
   13444:	orr	r0, r0, r1
   13448:	adc	r2, r2, #0
   1344c:	cmp	r0, #0
   13450:	moveq	r2, r0
   13454:	movweq	r6, #1
   13458:	str	r2, [sp, #92]	; 0x5c
   1345c:	cmp	r8, r5
   13460:	beq	133d8 <__assert_fail@plt+0x1cc4>
   13464:	movw	r0, #49488	; 0xc150
   13468:	sub	r2, r5, r8
   1346c:	mov	r7, r8
   13470:	movt	r0, #2
   13474:	ldr	r1, [r0]
   13478:	mov	r0, r8
   1347c:	bl	11630 <memchr@plt>
   13480:	cmp	r0, #0
   13484:	mov	r8, r5
   13488:	mov	r4, r0
   1348c:	addne	r8, r0, #1
   13490:	ldr	r0, [sp, #64]	; 0x40
   13494:	sub	r5, r8, r7
   13498:	cmp	r0, #0
   1349c:	beq	134ec <__assert_fail@plt+0x1dd8>
   134a0:	ldr	r1, [sp, #68]	; 0x44
   134a4:	ldr	r2, [sp, #92]	; 0x5c
   134a8:	eor	r0, r6, r9
   134ac:	eor	r1, r2, r1
   134b0:	orrs	r0, r0, r1
   134b4:	bne	13420 <__assert_fail@plt+0x1d0c>
   134b8:	ldrb	r0, [sl]
   134bc:	cmp	r0, #1
   134c0:	beq	13408 <__assert_fail@plt+0x1cf4>
   134c4:	movw	r0, #50020	; 0xc364
   134c8:	mov	r1, r5
   134cc:	mov	r2, #1
   134d0:	movt	r0, #2
   134d4:	ldr	r3, [r0]
   134d8:	mov	r0, r7
   134dc:	bl	11438 <fwrite_unlocked@plt>
   134e0:	cmp	r0, #1
   134e4:	beq	13420 <__assert_fail@plt+0x1d0c>
   134e8:	b	13f1c <__assert_fail@plt+0x2808>
   134ec:	str	r6, [sp, #52]	; 0x34
   134f0:	ldr	r6, [sp, #44]	; 0x2c
   134f4:	ldr	r9, [sp, #88]	; 0x58
   134f8:	ldr	r2, [sp, #100]	; 0x64
   134fc:	mov	r0, r6
   13500:	mov	r1, r9
   13504:	bl	14efc <__assert_fail@plt+0x37e8>
   13508:	str	r0, [sp, #48]	; 0x30
   1350c:	ldrb	r0, [sl]
   13510:	mov	r1, sl
   13514:	cmp	r0, #1
   13518:	bne	1354c <__assert_fail@plt+0x1e38>
   1351c:	add	r0, r6, r9, lsl #4
   13520:	mov	r1, r7
   13524:	mov	r2, r5
   13528:	ldr	r0, [r0, #4]
   1352c:	bl	154a0 <__assert_fail@plt+0x3d8c>
   13530:	cmp	r0, r5
   13534:	bne	1356c <__assert_fail@plt+0x1e58>
   13538:	b	13588 <__assert_fail@plt+0x1e74>
   1353c:	ldr	r5, [sp, #84]	; 0x54
   13540:	cmp	r8, r5
   13544:	bne	13464 <__assert_fail@plt+0x1d50>
   13548:	b	133d8 <__assert_fail@plt+0x1cc4>
   1354c:	add	r0, r6, r9, lsl #4
   13550:	mov	r1, r5
   13554:	mov	r2, #1
   13558:	ldr	r3, [r0, #8]
   1355c:	mov	r0, r7
   13560:	bl	11438 <fwrite_unlocked@plt>
   13564:	cmp	r0, #1
   13568:	beq	13588 <__assert_fail@plt+0x1e74>
   1356c:	bl	115d0 <__errno_location@plt>
   13570:	ldr	r5, [r0]
   13574:	cmp	r5, #32
   13578:	bne	13edc <__assert_fail@plt+0x27c8>
   1357c:	ldr	r0, [sl, #24]
   13580:	cmp	r0, #0
   13584:	beq	13edc <__assert_fail@plt+0x27c8>
   13588:	ldr	r5, [sp, #60]	; 0x3c
   1358c:	ldr	r0, [sp, #48]	; 0x30
   13590:	orr	r5, r5, r0
   13594:	bl	115d0 <__errno_location@plt>
   13598:	mov	r9, r0
   1359c:	ldr	r0, [r0]
   135a0:	ldr	r7, [sl, #24]
   135a4:	mov	r1, sl
   135a8:	str	r5, [sp, #60]	; 0x3c
   135ac:	subs	r6, r0, #32
   135b0:	movwne	r6, #1
   135b4:	tst	r5, #1
   135b8:	beq	135ec <__assert_fail@plt+0x1ed8>
   135bc:	ldr	r0, [sp, #44]	; 0x2c
   135c0:	ldr	r1, [sp, #88]	; 0x58
   135c4:	add	sl, r0, r1, lsl #4
   135c8:	mov	r5, sl
   135cc:	ldr	r0, [r5, #8]!
   135d0:	bl	15234 <__assert_fail@plt+0x3b20>
   135d4:	cmp	r0, #0
   135d8:	bne	13f4c <__assert_fail@plt+0x2838>
   135dc:	mov	r0, #0
   135e0:	str	r0, [r5]
   135e4:	mvn	r0, #1
   135e8:	str	r0, [sl, #4]
   135ec:	ldr	r2, [sp, #56]	; 0x38
   135f0:	clz	r0, r7
   135f4:	cmp	r4, #0
   135f8:	lsr	r0, r0, #5
   135fc:	orr	r0, r6, r0
   13600:	orr	r2, r2, r0
   13604:	beq	13660 <__assert_fail@plt+0x1f4c>
   13608:	ldr	r0, [sp, #88]	; 0x58
   1360c:	ldr	r1, [sp, #96]	; 0x60
   13610:	movw	r9, #50392	; 0xc4d8
   13614:	ldr	r6, [sp, #52]	; 0x34
   13618:	ldr	r5, [sp, #84]	; 0x54
   1361c:	movt	r9, #2
   13620:	mov	sl, r9
   13624:	add	r3, r0, #1
   13628:	ldr	r0, [sp, #100]	; 0x64
   1362c:	eor	r0, r0, r3
   13630:	orrs	r0, r0, r1
   13634:	bne	13688 <__assert_fail@plt+0x1f74>
   13638:	ldr	r9, [sp, #72]	; 0x48
   1363c:	mov	r0, #1
   13640:	tst	r2, #1
   13644:	str	r0, [sp, #40]	; 0x28
   13648:	mov	r0, #0
   1364c:	str	r0, [sp, #88]	; 0x58
   13650:	mov	r0, #0
   13654:	str	r0, [sp, #56]	; 0x38
   13658:	bne	1345c <__assert_fail@plt+0x1d48>
   1365c:	b	136ac <__assert_fail@plt+0x1f98>
   13660:	movw	r9, #50392	; 0xc4d8
   13664:	ldr	r6, [sp, #52]	; 0x34
   13668:	ldr	r5, [sp, #84]	; 0x54
   1366c:	str	r2, [sp, #56]	; 0x38
   13670:	movt	r9, #2
   13674:	mov	sl, r9
   13678:	ldr	r9, [sp, #72]	; 0x48
   1367c:	cmp	r8, r5
   13680:	bne	13464 <__assert_fail@plt+0x1d50>
   13684:	b	133d8 <__assert_fail@plt+0x1cc4>
   13688:	ldr	r9, [sp, #72]	; 0x48
   1368c:	str	r2, [sp, #56]	; 0x38
   13690:	mov	r0, r3
   13694:	str	r3, [sp, #88]	; 0x58
   13698:	cmp	r8, r5
   1369c:	bne	13464 <__assert_fail@plt+0x1d50>
   136a0:	b	133d8 <__assert_fail@plt+0x1cc4>
   136a4:	ldr	r0, [sp, #88]	; 0x58
   136a8:	mov	r3, r0
   136ac:	ldr	r0, [sp, #64]	; 0x40
   136b0:	ldr	r5, [sp, #44]	; 0x2c
   136b4:	cmp	r0, #0
   136b8:	bne	13cb4 <__assert_fail@plt+0x25a0>
   136bc:	ldr	r0, [sp, #40]	; 0x28
   136c0:	ldr	r6, [sp, #100]	; 0x64
   136c4:	mov	r9, r3
   136c8:	mov	r4, #0
   136cc:	mvn	r8, #1
   136d0:	tst	r0, #1
   136d4:	ldr	r0, [sp, #100]	; 0x64
   136d8:	movne	r9, r0
   136dc:	cmp	r4, r9
   136e0:	bcc	1372c <__assert_fail@plt+0x2018>
   136e4:	b	13708 <__assert_fail@plt+0x1ff4>
   136e8:	add	r4, r4, #1
   136ec:	str	r8, [r7, #4]
   136f0:	subs	r0, r4, r6
   136f4:	ldr	r0, [sp, #96]	; 0x60
   136f8:	rscs	r0, r0, #0
   136fc:	bcs	13cb4 <__assert_fail@plt+0x25a0>
   13700:	cmp	r4, r9
   13704:	bcc	1372c <__assert_fail@plt+0x2018>
   13708:	movw	r0, #50392	; 0xc4d8
   1370c:	movt	r0, #2
   13710:	ldrb	r0, [r0, #1]
   13714:	cmp	r0, #0
   13718:	bne	1372c <__assert_fail@plt+0x2018>
   1371c:	mov	r0, r5
   13720:	mov	r1, r4
   13724:	mov	r2, r6
   13728:	bl	14efc <__assert_fail@plt+0x37e8>
   1372c:	add	r7, r5, r4, lsl #4
   13730:	ldr	r1, [r7, #4]
   13734:	cmp	r1, #0
   13738:	bmi	136e8 <__assert_fail@plt+0x1fd4>
   1373c:	mov	r2, r5
   13740:	ldr	r3, [r2, r4, lsl #4]!
   13744:	ldr	r0, [r2, #8]
   13748:	ldr	r2, [r2, #12]
   1374c:	bl	14358 <__assert_fail@plt+0x2c44>
   13750:	b	136e8 <__assert_fail@plt+0x1fd4>
   13754:	ldr	r4, [sp, #100]	; 0x64
   13758:	mov	r0, r8
   1375c:	mov	r1, r5
   13760:	mov	r3, r7
   13764:	mov	r2, r4
   13768:	bl	19dec <__assert_fail@plt+0x86d8>
   1376c:	ldr	r2, [sp, #76]	; 0x4c
   13770:	ldr	r3, [sp, #80]	; 0x50
   13774:	str	r4, [sp, #8]
   13778:	str	r7, [sp, #12]
   1377c:	str	r9, [sp]
   13780:	bl	140bc <__assert_fail@plt+0x29a8>
   13784:	b	13cb4 <__assert_fail@plt+0x25a0>
   13788:	mov	r0, #1
   1378c:	subs	r2, r7, r9
   13790:	str	r0, [sp]
   13794:	sbc	r3, r4, #0
   13798:	mov	r0, #0
   1379c:	bl	114b0 <lseek64@plt>
   137a0:	mvn	r5, #0
   137a4:	cmn	r1, #1
   137a8:	ble	13d98 <__assert_fail@plt+0x2684>
   137ac:	subs	r0, r7, r8
   137b0:	sbcs	r0, r4, r6
   137b4:	bge	13cb4 <__assert_fail@plt+0x25a0>
   137b8:	b	13280 <__assert_fail@plt+0x1b6c>
   137bc:	mov	r0, #1
   137c0:	subs	r2, r5, r2
   137c4:	mov	r4, r3
   137c8:	str	r0, [sp]
   137cc:	sbc	r3, r3, #0
   137d0:	mov	r0, #0
   137d4:	bl	114b0 <lseek64@plt>
   137d8:	mov	r3, r4
   137dc:	mvn	r0, #0
   137e0:	cmn	r1, #1
   137e4:	mov	r4, r5
   137e8:	mov	r7, r3
   137ec:	str	r0, [sp, #92]	; 0x5c
   137f0:	ble	13d98 <__assert_fail@plt+0x2684>
   137f4:	ldr	r2, [sp, #36]	; 0x24
   137f8:	ldr	r1, [sp, #32]
   137fc:	subs	r0, r5, r2
   13800:	sbcs	r0, r3, r1
   13804:	bge	13c6c <__assert_fail@plt+0x2558>
   13808:	subs	r0, r2, #1
   1380c:	ldr	r2, [sp, #92]	; 0x5c
   13810:	mov	r8, #0
   13814:	mov	ip, #1
   13818:	str	r0, [sp, #88]	; 0x58
   1381c:	sbc	r0, r1, #0
   13820:	str	r0, [sp, #84]	; 0x54
   13824:	mov	r0, #0
   13828:	cmn	r2, #1
   1382c:	bne	1386c <__assert_fail@plt+0x2158>
   13830:	ldr	r1, [sp, #76]	; 0x4c
   13834:	ldr	r2, [sp, #80]	; 0x50
   13838:	str	r0, [sp, #92]	; 0x5c
   1383c:	mov	r0, #0
   13840:	str	r8, [sp, #60]	; 0x3c
   13844:	mov	r6, ip
   13848:	mov	r8, r3
   1384c:	bl	17550 <__assert_fail@plt+0x5e3c>
   13850:	mov	r2, r0
   13854:	mov	r3, r8
   13858:	ldr	r8, [sp, #60]	; 0x3c
   1385c:	ldr	r0, [sp, #92]	; 0x5c
   13860:	mov	ip, r6
   13864:	cmn	r2, #1
   13868:	beq	13d98 <__assert_fail@plt+0x2684>
   1386c:	cmp	r2, #0
   13870:	beq	13c70 <__assert_fail@plt+0x255c>
   13874:	ldr	r0, [sp, #36]	; 0x24
   13878:	str	r5, [sp, #60]	; 0x3c
   1387c:	subs	r5, r0, r5
   13880:	ldr	r0, [sp, #32]
   13884:	sbc	r0, r0, r3
   13888:	subs	r1, r2, r5
   1388c:	rscs	r0, r0, #0
   13890:	movlt	r5, r2
   13894:	cmp	r5, #0
   13898:	beq	13c38 <__assert_fail@plt+0x2524>
   1389c:	ldr	r0, [sp, #76]	; 0x4c
   138a0:	mov	r1, #0
   138a4:	str	r1, [sp, #20]
   138a8:	add	r8, r0, r5
   138ac:	mov	r6, r0
   138b0:	str	r8, [sp, #28]
   138b4:	b	138d4 <__assert_fail@plt+0x21c0>
   138b8:	str	r5, [sp, #40]	; 0x28
   138bc:	ldr	r8, [sp, #28]
   138c0:	ldr	r5, [sp, #44]	; 0x2c
   138c4:	ldr	r0, [sp, #40]	; 0x28
   138c8:	sub	r5, r5, r0
   138cc:	cmp	r6, r8
   138d0:	beq	13c40 <__assert_fail@plt+0x252c>
   138d4:	ldr	r0, [sp, #60]	; 0x3c
   138d8:	str	ip, [sp, #40]	; 0x28
   138dc:	str	r3, [sp, #92]	; 0x5c
   138e0:	str	r5, [sp, #44]	; 0x2c
   138e4:	subs	r0, r4, r0
   138e8:	sbc	r1, r7, r3
   138ec:	rsbs	r2, r0, #0
   138f0:	rscs	r2, r1, #0
   138f4:	mov	r2, #0
   138f8:	movwlt	r2, #1
   138fc:	cmp	r2, #0
   13900:	moveq	r1, r2
   13904:	movne	r2, r0
   13908:	subs	r0, r5, r2
   1390c:	rscs	r0, r1, #0
   13910:	movw	r1, #49488	; 0xc150
   13914:	movt	r1, #2
   13918:	movlt	r2, r5
   1391c:	add	r0, r6, r2
   13920:	sub	r2, r5, r2
   13924:	ldr	r1, [r1]
   13928:	bl	11630 <memchr@plt>
   1392c:	cmp	r0, #0
   13930:	mov	r2, r6
   13934:	mov	r6, r8
   13938:	ldr	r1, [sp, #68]	; 0x44
   1393c:	addne	r6, r0, #1
   13940:	movwne	r0, #1
   13944:	str	r0, [sp, #48]	; 0x30
   13948:	ldr	r0, [sp, #72]	; 0x48
   1394c:	sub	r5, r6, r2
   13950:	eor	r1, sl, r1
   13954:	eor	r0, r9, r0
   13958:	orrs	r0, r0, r1
   1395c:	bne	1397c <__assert_fail@plt+0x2268>
   13960:	mov	r1, r2
   13964:	mov	r0, #1
   13968:	mov	r2, r5
   1396c:	bl	154a0 <__assert_fail@plt+0x3d8c>
   13970:	cmp	r0, r5
   13974:	beq	1399c <__assert_fail@plt+0x2288>
   13978:	b	13f2c <__assert_fail@plt+0x2818>
   1397c:	ldr	r0, [sp, #64]	; 0x40
   13980:	cmp	r0, #0
   13984:	bne	1399c <__assert_fail@plt+0x2288>
   13988:	ldr	r0, [sp, #40]	; 0x28
   1398c:	mov	r1, r2
   13990:	mov	r2, r5
   13994:	and	r0, r0, #1
   13998:	bl	145c4 <__assert_fail@plt+0x2eb0>
   1399c:	ldr	r0, [sp, #60]	; 0x3c
   139a0:	ldr	r3, [sp, #92]	; 0x5c
   139a4:	ldr	ip, [sp, #48]	; 0x30
   139a8:	adds	r0, r0, r5
   139ac:	eor	r1, ip, #1
   139b0:	adc	r3, r3, #0
   139b4:	str	r0, [sp, #60]	; 0x3c
   139b8:	subs	r0, r4, r0
   139bc:	sbcs	r0, r7, r3
   139c0:	mov	r0, #0
   139c4:	movwge	r0, #1
   139c8:	tst	r0, r1
   139cc:	bne	138b8 <__assert_fail@plt+0x21a4>
   139d0:	ldr	ip, [sp, #56]	; 0x38
   139d4:	ldr	lr, [sp, #52]	; 0x34
   139d8:	cmp	r6, r8
   139dc:	str	r6, [sp, #24]
   139e0:	str	r3, [sp, #92]	; 0x5c
   139e4:	beq	13a5c <__assert_fail@plt+0x2348>
   139e8:	ldr	r0, [sp, #64]	; 0x40
   139ec:	ldr	r8, [sp, #100]	; 0x64
   139f0:	ldr	r6, [sp, #60]	; 0x3c
   139f4:	cmp	r0, #0
   139f8:	beq	13ae4 <__assert_fail@plt+0x23d0>
   139fc:	ldr	r2, [sp, #72]	; 0x48
   13a00:	ldr	r3, [sp, #68]	; 0x44
   13a04:	adds	r9, r9, #1
   13a08:	adc	sl, sl, #0
   13a0c:	subs	r0, r2, r9
   13a10:	sbcs	r0, r3, sl
   13a14:	bcc	13cb4 <__assert_fail@plt+0x25a0>
   13a18:	ldr	r0, [sp, #100]	; 0x64
   13a1c:	ldr	r1, [sp, #96]	; 0x60
   13a20:	adds	r4, r4, ip
   13a24:	adc	r7, r7, lr
   13a28:	eor	r0, r9, r0
   13a2c:	eor	r1, sl, r1
   13a30:	orr	r0, r0, r1
   13a34:	cmp	r0, #0
   13a38:	ldr	r0, [sp, #84]	; 0x54
   13a3c:	moveq	r7, r0
   13a40:	ldr	r0, [sp, #88]	; 0x58
   13a44:	moveq	r4, r0
   13a48:	subs	r0, r4, r6
   13a4c:	ldr	r0, [sp, #92]	; 0x5c
   13a50:	sbcs	r0, r7, r0
   13a54:	blt	13a04 <__assert_fail@plt+0x22f0>
   13a58:	b	13adc <__assert_fail@plt+0x23c8>
   13a5c:	ldr	r0, [sp, #64]	; 0x40
   13a60:	ldr	r6, [sp, #100]	; 0x64
   13a64:	ldr	r8, [sp, #60]	; 0x3c
   13a68:	cmp	r0, #0
   13a6c:	beq	13b7c <__assert_fail@plt+0x2468>
   13a70:	ldr	r0, [sp, #48]	; 0x30
   13a74:	ldr	r2, [sp, #72]	; 0x48
   13a78:	ldr	r3, [sp, #68]	; 0x44
   13a7c:	tst	r0, #1
   13a80:	beq	13c08 <__assert_fail@plt+0x24f4>
   13a84:	adds	r9, r9, #1
   13a88:	adc	sl, sl, #0
   13a8c:	subs	r0, r2, r9
   13a90:	sbcs	r0, r3, sl
   13a94:	bcc	13cb4 <__assert_fail@plt+0x25a0>
   13a98:	ldr	r0, [sp, #100]	; 0x64
   13a9c:	ldr	r1, [sp, #96]	; 0x60
   13aa0:	adds	r4, r4, ip
   13aa4:	adc	r7, r7, lr
   13aa8:	eor	r0, r9, r0
   13aac:	eor	r1, sl, r1
   13ab0:	orr	r0, r0, r1
   13ab4:	cmp	r0, #0
   13ab8:	ldr	r0, [sp, #84]	; 0x54
   13abc:	moveq	r7, r0
   13ac0:	ldr	r0, [sp, #88]	; 0x58
   13ac4:	moveq	r4, r0
   13ac8:	mov	r0, #1
   13acc:	subs	r1, r4, r8
   13ad0:	ldr	r1, [sp, #92]	; 0x5c
   13ad4:	sbcs	r1, r7, r1
   13ad8:	blt	13a7c <__assert_fail@plt+0x2368>
   13adc:	str	r5, [sp, #40]	; 0x28
   13ae0:	b	13c14 <__assert_fail@plt+0x2500>
   13ae4:	str	r5, [sp, #40]	; 0x28
   13ae8:	ldr	r5, [sp, #48]	; 0x30
   13aec:	b	13b08 <__assert_fail@plt+0x23f4>
   13af0:	and	r5, r5, r0
   13af4:	subs	r0, r4, r6
   13af8:	sbcs	r0, r7, r3
   13afc:	blt	13b08 <__assert_fail@plt+0x23f4>
   13b00:	tst	r5, #1
   13b04:	beq	13c2c <__assert_fail@plt+0x2518>
   13b08:	ldr	r1, [sp, #96]	; 0x60
   13b0c:	adds	r9, r9, #1
   13b10:	adc	sl, sl, #0
   13b14:	eor	r0, r9, r8
   13b18:	adds	r4, r4, ip
   13b1c:	adc	r7, r7, lr
   13b20:	eor	r1, sl, r1
   13b24:	orr	r0, r0, r1
   13b28:	cmp	r0, #0
   13b2c:	ldr	r0, [sp, #84]	; 0x54
   13b30:	moveq	r7, r0
   13b34:	ldr	r0, [sp, #88]	; 0x58
   13b38:	moveq	r4, r0
   13b3c:	subs	r0, r4, r6
   13b40:	sbcs	r0, r7, r3
   13b44:	mov	r0, #0
   13b48:	movwlt	r0, #1
   13b4c:	bge	13af0 <__assert_fail@plt+0x23dc>
   13b50:	mov	r0, #1
   13b54:	mov	r1, #0
   13b58:	mov	r2, #0
   13b5c:	bl	145c4 <__assert_fail@plt+0x2eb0>
   13b60:	ldr	r3, [sp, #92]	; 0x5c
   13b64:	ldr	lr, [sp, #52]	; 0x34
   13b68:	ldr	ip, [sp, #56]	; 0x38
   13b6c:	subs	r0, r4, r6
   13b70:	sbcs	r0, r7, r3
   13b74:	bge	13b00 <__assert_fail@plt+0x23ec>
   13b78:	b	13b08 <__assert_fail@plt+0x23f4>
   13b7c:	str	r5, [sp, #40]	; 0x28
   13b80:	ldr	r5, [sp, #48]	; 0x30
   13b84:	tst	r5, #1
   13b88:	beq	13c24 <__assert_fail@plt+0x2510>
   13b8c:	ldr	r1, [sp, #96]	; 0x60
   13b90:	adds	r9, r9, #1
   13b94:	mov	r5, #0
   13b98:	adc	sl, sl, #0
   13b9c:	eor	r0, r9, r6
   13ba0:	adds	r4, r4, ip
   13ba4:	adc	r7, r7, lr
   13ba8:	eor	r1, sl, r1
   13bac:	orr	r0, r0, r1
   13bb0:	cmp	r0, #0
   13bb4:	ldr	r0, [sp, #84]	; 0x54
   13bb8:	moveq	r7, r0
   13bbc:	ldr	r0, [sp, #88]	; 0x58
   13bc0:	moveq	r4, r0
   13bc4:	subs	r0, r4, r8
   13bc8:	sbcs	r0, r7, r3
   13bcc:	bge	13bf0 <__assert_fail@plt+0x24dc>
   13bd0:	mov	r0, #1
   13bd4:	mov	r1, #0
   13bd8:	mov	r2, #0
   13bdc:	mov	r5, #1
   13be0:	bl	145c4 <__assert_fail@plt+0x2eb0>
   13be4:	ldr	r3, [sp, #92]	; 0x5c
   13be8:	ldr	lr, [sp, #52]	; 0x34
   13bec:	ldr	ip, [sp, #56]	; 0x38
   13bf0:	subs	r0, r4, r8
   13bf4:	sbcs	r0, r7, r3
   13bf8:	blt	13b84 <__assert_fail@plt+0x2470>
   13bfc:	cmp	r5, #0
   13c00:	bne	13b84 <__assert_fail@plt+0x2470>
   13c04:	b	13c2c <__assert_fail@plt+0x2518>
   13c08:	mov	r0, #1
   13c0c:	str	r5, [sp, #40]	; 0x28
   13c10:	str	r0, [sp, #20]
   13c14:	ldr	r3, [sp, #92]	; 0x5c
   13c18:	ldr	r6, [sp, #24]
   13c1c:	ldr	ip, [sp, #48]	; 0x30
   13c20:	b	138bc <__assert_fail@plt+0x21a8>
   13c24:	mov	r0, #1
   13c28:	str	r0, [sp, #20]
   13c2c:	ldr	ip, [sp, #48]	; 0x30
   13c30:	ldr	r6, [sp, #24]
   13c34:	b	138bc <__assert_fail@plt+0x21a8>
   13c38:	mov	r0, #0
   13c3c:	str	r0, [sp, #20]
   13c40:	ldr	r0, [sp, #20]
   13c44:	ldr	r5, [sp, #60]	; 0x3c
   13c48:	mvn	r2, #0
   13c4c:	and	r8, r0, #1
   13c50:	ldr	r0, [sp, #36]	; 0x24
   13c54:	subs	r0, r5, r0
   13c58:	ldr	r0, [sp, #32]
   13c5c:	sbcs	r0, r3, r0
   13c60:	mov	r0, #0
   13c64:	blt	13828 <__assert_fail@plt+0x2114>
   13c68:	b	13c70 <__assert_fail@plt+0x255c>
   13c6c:	mov	r0, #0
   13c70:	adds	r4, r9, r8
   13c74:	adc	r5, sl, r0
   13c78:	ldr	r0, [sp, #64]	; 0x40
   13c7c:	cmp	r0, #0
   13c80:	bne	13cb4 <__assert_fail@plt+0x25a0>
   13c84:	ldr	r0, [sp, #100]	; 0x64
   13c88:	subs	r0, r0, r4
   13c8c:	ldr	r0, [sp, #96]	; 0x60
   13c90:	sbcs	r0, r0, r5
   13c94:	bcc	13cb4 <__assert_fail@plt+0x25a0>
   13c98:	mov	r0, #1
   13c9c:	mov	r1, #0
   13ca0:	mov	r2, #0
   13ca4:	bl	145c4 <__assert_fail@plt+0x2eb0>
   13ca8:	adds	r4, r4, #1
   13cac:	adc	r5, r5, #0
   13cb0:	b	13c84 <__assert_fail@plt+0x2570>
   13cb4:	mov	r0, #0
   13cb8:	bl	116fc <close@plt>
   13cbc:	cmp	r0, #0
   13cc0:	bne	13d98 <__assert_fail@plt+0x2684>
   13cc4:	movw	r0, #50392	; 0xc4d8
   13cc8:	movt	r0, #2
   13ccc:	ldr	r2, [r0, #28]
   13cd0:	ldr	r3, [r0, #32]
   13cd4:	movw	r0, #49488	; 0xc150
   13cd8:	movt	r0, #2
   13cdc:	ldr	r1, [r0, #8]
   13ce0:	mov	r0, #0
   13ce4:	bl	14358 <__assert_fail@plt+0x2c44>
   13ce8:	mov	r0, #0
   13cec:	sub	sp, fp, #28
   13cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf4:	mov	r0, #1
   13cf8:	bl	11810 <__assert_fail@plt+0xfc>
   13cfc:	movw	r0, #49500	; 0xc15c
   13d00:	movw	r2, #43315	; 0xa933
   13d04:	mov	r1, #0
   13d08:	movw	r7, #43297	; 0xa921
   13d0c:	movt	r0, #2
   13d10:	movt	r2, #1
   13d14:	str	r1, [sp, #8]
   13d18:	movw	r1, #42766	; 0xa70e
   13d1c:	movt	r7, #1
   13d20:	movt	r1, #1
   13d24:	ldr	r3, [r0]
   13d28:	movw	r0, #50020	; 0xc364
   13d2c:	str	r2, [sp, #4]
   13d30:	movw	r2, #43283	; 0xa913
   13d34:	str	r7, [sp]
   13d38:	movt	r0, #2
   13d3c:	movt	r2, #1
   13d40:	ldr	r0, [r0]
   13d44:	bl	18344 <__assert_fail@plt+0x6c30>
   13d48:	mov	r0, #0
   13d4c:	bl	11570 <exit@plt>
   13d50:	mov	r0, #0
   13d54:	bl	11810 <__assert_fail@plt+0xfc>
   13d58:	movw	r1, #43101	; 0xa85d
   13d5c:	mov	r0, #0
   13d60:	mov	r2, #5
   13d64:	movt	r1, #1
   13d68:	bl	11444 <dcgettext@plt>
   13d6c:	mov	r4, r0
   13d70:	add	r2, sp, #104	; 0x68
   13d74:	mov	r0, r5
   13d78:	mov	r1, r8
   13d7c:	bl	15518 <__assert_fail@plt+0x3e04>
   13d80:	mov	r3, r0
   13d84:	str	r7, [sp]
   13d88:	mov	r0, #1
   13d8c:	mov	r1, #0
   13d90:	mov	r2, r4
   13d94:	bl	114f8 <error@plt>
   13d98:	bl	115d0 <__errno_location@plt>
   13d9c:	ldr	r4, [r0]
   13da0:	movw	r0, #50392	; 0xc4d8
   13da4:	movt	r0, #2
   13da8:	ldr	r2, [r0, #4]
   13dac:	mov	r0, #0
   13db0:	mov	r1, #3
   13db4:	bl	1728c <__assert_fail@plt+0x5b78>
   13db8:	movw	r2, #45170	; 0xb072
   13dbc:	mov	r3, r0
   13dc0:	mov	r0, #1
   13dc4:	mov	r1, r4
   13dc8:	movt	r2, #1
   13dcc:	bl	114f8 <error@plt>
   13dd0:	movw	r1, #42893	; 0xa78d
   13dd4:	movt	r1, #1
   13dd8:	mov	r0, #0
   13ddc:	mov	r2, #5
   13de0:	bl	11444 <dcgettext@plt>
   13de4:	mov	r2, r0
   13de8:	mov	r0, #0
   13dec:	mov	r1, #0
   13df0:	bl	114f8 <error@plt>
   13df4:	mov	r0, #1
   13df8:	bl	11810 <__assert_fail@plt+0xfc>
   13dfc:	movw	r0, #43169	; 0xa8a1
   13e00:	movw	r1, #43214	; 0xa8ce
   13e04:	cmp	r7, #100	; 0x64
   13e08:	movt	r0, #1
   13e0c:	movt	r1, #1
   13e10:	moveq	r1, r0
   13e14:	b	13e20 <__assert_fail@plt+0x270c>
   13e18:	movw	r1, #42845	; 0xa75d
   13e1c:	movt	r1, #1
   13e20:	mov	r0, #0
   13e24:	mov	r2, #5
   13e28:	bl	11444 <dcgettext@plt>
   13e2c:	mov	r4, r0
   13e30:	movw	r0, #50024	; 0xc368
   13e34:	movt	r0, #2
   13e38:	ldr	r0, [r0]
   13e3c:	bl	17538 <__assert_fail@plt+0x5e24>
   13e40:	mov	r3, r0
   13e44:	mov	r0, #0
   13e48:	mov	r1, #0
   13e4c:	mov	r2, r4
   13e50:	bl	114f8 <error@plt>
   13e54:	mov	r0, #1
   13e58:	bl	11810 <__assert_fail@plt+0xfc>
   13e5c:	movw	r1, #43006	; 0xa7fe
   13e60:	movt	r1, #1
   13e64:	b	13eac <__assert_fail@plt+0x2798>
   13e68:	movw	r1, #43032	; 0xa818
   13e6c:	mov	r0, #0
   13e70:	mov	r2, #5
   13e74:	movt	r1, #1
   13e78:	bl	11444 <dcgettext@plt>
   13e7c:	mov	r4, r0
   13e80:	movw	r0, #50024	; 0xc368
   13e84:	movt	r0, #2
   13e88:	ldr	r0, [r0]
   13e8c:	bl	17538 <__assert_fail@plt+0x5e24>
   13e90:	mov	r3, r0
   13e94:	mov	r0, #1
   13e98:	mov	r1, #0
   13e9c:	mov	r2, r4
   13ea0:	bl	114f8 <error@plt>
   13ea4:	movw	r1, #43061	; 0xa835
   13ea8:	movt	r1, #1
   13eac:	mov	r0, #0
   13eb0:	mov	r2, #5
   13eb4:	bl	11444 <dcgettext@plt>
   13eb8:	mov	r2, r0
   13ebc:	mov	r0, #1
   13ec0:	mov	r1, #0
   13ec4:	bl	114f8 <error@plt>
   13ec8:	bl	18acc <__assert_fail@plt+0x73b8>
   13ecc:	bl	115d0 <__errno_location@plt>
   13ed0:	ldr	r4, [r0]
   13ed4:	ldr	r2, [sl, #4]
   13ed8:	b	13dac <__assert_fail@plt+0x2698>
   13edc:	ldr	r0, [sp, #44]	; 0x2c
   13ee0:	ldr	r1, [sp, #88]	; 0x58
   13ee4:	ldr	r2, [r0, r1, lsl #4]
   13ee8:	mov	r0, #0
   13eec:	mov	r1, #3
   13ef0:	bl	1728c <__assert_fail@plt+0x5b78>
   13ef4:	movw	r2, #45170	; 0xb072
   13ef8:	mov	r3, r0
   13efc:	mov	r0, #1
   13f00:	mov	r1, r5
   13f04:	movt	r2, #1
   13f08:	bl	114f8 <error@plt>
   13f0c:	movw	r1, #43335	; 0xa947
   13f10:	movt	r1, #1
   13f14:	b	13dd8 <__assert_fail@plt+0x26c4>
   13f18:	bl	116f0 <abort@plt>
   13f1c:	movw	r0, #50020	; 0xc364
   13f20:	movt	r0, #2
   13f24:	ldr	r0, [r0]
   13f28:	bl	116b4 <clearerr_unlocked@plt>
   13f2c:	bl	115d0 <__errno_location@plt>
   13f30:	movw	r1, #45050	; 0xaffa
   13f34:	ldr	r4, [r0]
   13f38:	mov	r0, #0
   13f3c:	mov	r2, #5
   13f40:	movt	r1, #1
   13f44:	bl	11444 <dcgettext@plt>
   13f48:	b	13db8 <__assert_fail@plt+0x26a4>
   13f4c:	ldr	r0, [sp, #44]	; 0x2c
   13f50:	ldr	r1, [sp, #88]	; 0x58
   13f54:	ldr	r4, [r9]
   13f58:	ldr	r2, [r0, r1, lsl #4]
   13f5c:	b	13dac <__assert_fail@plt+0x2698>
   13f60:	movw	r1, #44379	; 0xad5b
   13f64:	mov	r0, #0
   13f68:	mov	r2, #5
   13f6c:	movt	r1, #1
   13f70:	bl	11444 <dcgettext@plt>
   13f74:	mov	r2, r0
   13f78:	stm	sp, {r4, r7}
   13f7c:	mov	r0, #1
   13f80:	mov	r1, #0
   13f84:	bl	114f8 <error@plt>
   13f88:	movw	r1, #43413	; 0xa995
   13f8c:	movt	r1, #1
   13f90:	b	13dd8 <__assert_fail@plt+0x26c4>
   13f94:	bl	115d0 <__errno_location@plt>
   13f98:	movw	r1, #43477	; 0xa9d5
   13f9c:	ldr	r4, [r0]
   13fa0:	mov	r0, #0
   13fa4:	mov	r2, #5
   13fa8:	movt	r1, #1
   13fac:	bl	11444 <dcgettext@plt>
   13fb0:	ldr	r1, [sl, #4]
   13fb4:	mov	r5, r0
   13fb8:	mov	r0, #4
   13fbc:	bl	17010 <__assert_fail@plt+0x58fc>
   13fc0:	b	14010 <__assert_fail@plt+0x28fc>
   13fc4:	bl	115d0 <__errno_location@plt>
   13fc8:	ldr	r1, [r0]
   13fcc:	cmp	r1, #29
   13fd0:	moveq	r1, #0
   13fd4:	streq	r1, [r0]
   13fd8:	bl	115d0 <__errno_location@plt>
   13fdc:	movw	r1, #43504	; 0xa9f0
   13fe0:	ldr	r4, [r0]
   13fe4:	mov	r0, #0
   13fe8:	mov	r2, #5
   13fec:	movt	r1, #1
   13ff0:	bl	11444 <dcgettext@plt>
   13ff4:	mov	r5, r0
   13ff8:	movw	r0, #50392	; 0xc4d8
   13ffc:	mov	r1, #3
   14000:	movt	r0, #2
   14004:	ldr	r2, [r0, #4]
   14008:	mov	r0, #0
   1400c:	bl	1728c <__assert_fail@plt+0x5b78>
   14010:	mov	r3, r0
   14014:	mov	r0, #1
   14018:	mov	r1, r4
   1401c:	mov	r2, r5
   14020:	bl	114f8 <error@plt>
   14024:	movw	r1, #42981	; 0xa7e5
   14028:	mov	r0, #0
   1402c:	mov	r2, #5
   14030:	movt	r1, #1
   14034:	bl	11444 <dcgettext@plt>
   14038:	mov	r4, r0
   1403c:	ldr	r0, [sp, #100]	; 0x64
   14040:	add	r2, sp, #104	; 0x68
   14044:	mov	r1, r7
   14048:	bl	15518 <__assert_fail@plt+0x3e04>
   1404c:	bl	17538 <__assert_fail@plt+0x5e24>
   14050:	movw	r2, #43389	; 0xa97d
   14054:	str	r0, [sp]
   14058:	mov	r0, #1
   1405c:	mov	r1, #75	; 0x4b
   14060:	mov	r3, r4
   14064:	movt	r2, #1
   14068:	bl	114f8 <error@plt>
   1406c:	movw	r0, #44866	; 0xaf42
   14070:	movw	r1, #44431	; 0xad8f
   14074:	movw	r3, #44974	; 0xafae
   14078:	movw	r2, #867	; 0x363
   1407c:	movt	r0, #1
   14080:	movt	r1, #1
   14084:	movt	r3, #1
   14088:	bl	11714 <__assert_fail@plt>
   1408c:	movw	r0, #44861	; 0xaf3d
   14090:	movw	r1, #44431	; 0xad8f
   14094:	movw	r3, #44896	; 0xaf60
   14098:	mov	r2, #996	; 0x3e4
   1409c:	movt	r0, #1
   140a0:	movt	r1, #1
   140a4:	movt	r3, #1
   140a8:	bl	11714 <__assert_fail@plt>
   140ac:	bl	115d0 <__errno_location@plt>
   140b0:	mov	r1, #75	; 0x4b
   140b4:	str	r1, [r0]
   140b8:	b	13fd8 <__assert_fail@plt+0x28c4>
   140bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140c0:	add	fp, sp, #28
   140c4:	sub	sp, sp, #36	; 0x24
   140c8:	str	r2, [sp, #12]
   140cc:	ldr	r2, [fp, #16]
   140d0:	mov	r7, r0
   140d4:	ldr	r0, [fp, #20]
   140d8:	ldr	r6, [fp, #8]
   140dc:	str	r3, [sp, #8]
   140e0:	mov	r8, #0
   140e4:	mov	r4, #1
   140e8:	mov	r5, #1
   140ec:	mov	r3, r1
   140f0:	mov	sl, #0
   140f4:	str	r1, [sp, #32]
   140f8:	str	r7, [sp, #28]
   140fc:	subs	r2, r2, #1
   14100:	sbc	r0, r0, #0
   14104:	str	r2, [sp, #24]
   14108:	str	r0, [sp, #20]
   1410c:	cmn	r6, #1
   14110:	beq	141b4 <__assert_fail@plt+0x2aa0>
   14114:	ldr	r0, [sp, #8]
   14118:	cmp	r6, r0
   1411c:	mov	r0, #0
   14120:	movwcc	r0, #1
   14124:	str	r0, [sp, #16]
   14128:	subs	r0, r6, r7
   1412c:	rscs	r0, r3, #0
   14130:	bcs	14240 <__assert_fail@plt+0x2b2c>
   14134:	ldr	r9, [sp, #12]
   14138:	cmp	r6, #0
   1413c:	beq	142c8 <__assert_fail@plt+0x2bb4>
   14140:	orr	r0, r4, r5
   14144:	mov	r5, #0
   14148:	tst	r0, #1
   1414c:	beq	1416c <__assert_fail@plt+0x2a58>
   14150:	and	r0, r4, #1
   14154:	mov	r1, r9
   14158:	mov	r2, r6
   1415c:	mov	r5, r3
   14160:	bl	145c4 <__assert_fail@plt+0x2eb0>
   14164:	mov	r3, r5
   14168:	mov	r5, r0
   1416c:	ldr	r9, [fp, #16]
   14170:	ldr	r1, [fp, #20]
   14174:	and	r0, r4, #1
   14178:	adds	r8, r8, r0
   1417c:	adc	sl, sl, #0
   14180:	eor	r0, r8, r9
   14184:	eor	r1, sl, r1
   14188:	orrs	r0, r0, r1
   1418c:	cmpeq	r5, #0
   14190:	beq	14318 <__assert_fail@plt+0x2c04>
   14194:	subs	r7, r7, r6
   14198:	mov	r4, #0
   1419c:	sbc	r3, r3, #0
   141a0:	ldr	r0, [sp, #16]
   141a4:	mvn	r6, #0
   141a8:	cmp	r0, #0
   141ac:	beq	1410c <__assert_fail@plt+0x29f8>
   141b0:	b	142e4 <__assert_fail@plt+0x2bd0>
   141b4:	tst	r5, #1
   141b8:	beq	141c4 <__assert_fail@plt+0x2ab0>
   141bc:	mov	r9, r3
   141c0:	b	14208 <__assert_fail@plt+0x2af4>
   141c4:	mov	r0, #1
   141c8:	mov	r2, r7
   141cc:	mov	r6, r3
   141d0:	str	r0, [sp]
   141d4:	mov	r0, #0
   141d8:	bl	114b0 <lseek64@plt>
   141dc:	and	r0, r0, r1
   141e0:	mvn	r1, #0
   141e4:	subs	r1, r0, r1
   141e8:	movwne	r1, #1
   141ec:	cmn	r0, #1
   141f0:	ldr	r0, [sp, #32]
   141f4:	orr	r4, r4, r1
   141f8:	movne	r6, r0
   141fc:	ldr	r0, [sp, #28]
   14200:	mov	r9, r6
   14204:	movne	r7, r0
   14208:	ldr	r1, [sp, #12]
   1420c:	ldr	r2, [sp, #8]
   14210:	mov	r0, #0
   14214:	bl	17550 <__assert_fail@plt+0x5e3c>
   14218:	cmn	r0, #1
   1421c:	beq	14320 <__assert_fail@plt+0x2c0c>
   14220:	mov	r6, r0
   14224:	clz	r0, r0
   14228:	mov	r3, r9
   1422c:	lsr	r0, r0, #5
   14230:	str	r0, [sp, #16]
   14234:	subs	r0, r6, r7
   14238:	rscs	r0, r3, #0
   1423c:	bcc	14134 <__assert_fail@plt+0x2a20>
   14240:	ldr	r9, [sp, #12]
   14244:	tst	r4, #1
   14248:	bne	14258 <__assert_fail@plt+0x2b44>
   1424c:	tst	r5, #1
   14250:	mov	r5, #0
   14254:	beq	1426c <__assert_fail@plt+0x2b58>
   14258:	and	r0, r4, #1
   1425c:	mov	r1, r9
   14260:	mov	r2, r7
   14264:	bl	145c4 <__assert_fail@plt+0x2eb0>
   14268:	mov	r5, r0
   1426c:	and	r0, r4, #1
   14270:	mov	r4, #0
   14274:	adds	r8, r8, r0
   14278:	ldr	r0, [sp, #24]
   1427c:	adc	sl, sl, #0
   14280:	subs	r0, r0, r8
   14284:	ldr	r0, [sp, #20]
   14288:	sbcs	r0, r0, sl
   1428c:	movwcs	r4, #1
   14290:	cmp	r4, #0
   14294:	cmpeq	r5, #0
   14298:	beq	142e0 <__assert_fail@plt+0x2bcc>
   1429c:	add	r9, r9, r7
   142a0:	sub	r6, r6, r7
   142a4:	ldr	r7, [sp, #28]
   142a8:	subs	r0, r6, r7
   142ac:	ldr	r0, [sp, #32]
   142b0:	rscs	r0, r0, #0
   142b4:	bcs	14244 <__assert_fail@plt+0x2b30>
   142b8:	ldr	r7, [sp, #28]
   142bc:	ldr	r3, [sp, #32]
   142c0:	cmp	r6, #0
   142c4:	bne	14140 <__assert_fail@plt+0x2a2c>
   142c8:	ldr	r9, [fp, #16]
   142cc:	ldr	r0, [sp, #16]
   142d0:	mvn	r6, #0
   142d4:	cmp	r0, #0
   142d8:	beq	1410c <__assert_fail@plt+0x29f8>
   142dc:	b	142e4 <__assert_fail@plt+0x2bd0>
   142e0:	ldr	r9, [fp, #16]
   142e4:	ldr	r4, [fp, #20]
   142e8:	subs	r0, r8, r9
   142ec:	sbcs	r0, sl, r4
   142f0:	bcs	14318 <__assert_fail@plt+0x2c04>
   142f4:	mov	r0, #1
   142f8:	mov	r1, #0
   142fc:	mov	r2, #0
   14300:	bl	145c4 <__assert_fail@plt+0x2eb0>
   14304:	adds	r8, r8, #1
   14308:	adc	sl, sl, #0
   1430c:	subs	r0, r8, r9
   14310:	sbcs	r0, sl, r4
   14314:	bcc	142f4 <__assert_fail@plt+0x2be0>
   14318:	sub	sp, fp, #28
   1431c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14320:	bl	115d0 <__errno_location@plt>
   14324:	ldr	r4, [r0]
   14328:	movw	r0, #50392	; 0xc4d8
   1432c:	mov	r1, #3
   14330:	movt	r0, #2
   14334:	ldr	r2, [r0, #4]
   14338:	mov	r0, #0
   1433c:	bl	1728c <__assert_fail@plt+0x5b78>
   14340:	movw	r2, #45170	; 0xb072
   14344:	mov	r3, r0
   14348:	mov	r0, #1
   1434c:	mov	r1, r4
   14350:	movt	r2, #1
   14354:	bl	114f8 <error@plt>
   14358:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1435c:	add	fp, sp, #24
   14360:	sub	sp, sp, #32
   14364:	movw	r9, #50392	; 0xc4d8
   14368:	mov	r8, r3
   1436c:	mov	r5, r2
   14370:	mov	r6, r1
   14374:	mov	r7, r0
   14378:	cmp	r0, #0
   1437c:	movt	r9, #2
   14380:	beq	143b0 <__assert_fail@plt+0x2c9c>
   14384:	mov	r0, r7
   14388:	bl	15234 <__assert_fail@plt+0x3b20>
   1438c:	cmp	r0, #0
   14390:	beq	143b0 <__assert_fail@plt+0x2c9c>
   14394:	bl	115d0 <__errno_location@plt>
   14398:	ldr	r4, [r0]
   1439c:	cmp	r4, #32
   143a0:	bne	14578 <__assert_fail@plt+0x2e64>
   143a4:	ldr	r0, [r9, #24]
   143a8:	cmp	r0, #0
   143ac:	beq	14578 <__assert_fail@plt+0x2e64>
   143b0:	cmp	r6, #0
   143b4:	bmi	143fc <__assert_fail@plt+0x2ce8>
   143b8:	cmp	r7, #0
   143bc:	bne	143d0 <__assert_fail@plt+0x2cbc>
   143c0:	mov	r0, r6
   143c4:	bl	116fc <close@plt>
   143c8:	cmn	r0, #1
   143cc:	ble	14570 <__assert_fail@plt+0x2e5c>
   143d0:	ldr	r0, [r9, #56]	; 0x38
   143d4:	cmp	r0, #0
   143d8:	beq	143fc <__assert_fail@plt+0x2ce8>
   143dc:	ldr	r1, [r9, #60]	; 0x3c
   143e0:	mov	r2, #0
   143e4:	ldr	r3, [r1, r2, lsl #2]
   143e8:	cmp	r3, r6
   143ec:	beq	1452c <__assert_fail@plt+0x2e18>
   143f0:	add	r2, r2, #1
   143f4:	cmp	r2, r0
   143f8:	bcc	143e4 <__assert_fail@plt+0x2cd0>
   143fc:	cmp	r5, #1
   14400:	blt	14524 <__assert_fail@plt+0x2e10>
   14404:	mov	r0, #0
   14408:	add	r1, sp, #28
   1440c:	mov	r2, #0
   14410:	str	r0, [sp, #28]
   14414:	mov	r0, r5
   14418:	bl	114bc <waitpid@plt>
   1441c:	cmn	r0, #1
   14420:	bne	14434 <__assert_fail@plt+0x2d20>
   14424:	bl	115d0 <__errno_location@plt>
   14428:	ldr	r4, [r0]
   1442c:	cmp	r4, #10
   14430:	bne	145a0 <__assert_fail@plt+0x2e8c>
   14434:	ldr	r0, [sp, #28]
   14438:	mov	r1, #16777216	; 0x1000000
   1443c:	and	r5, r0, #127	; 0x7f
   14440:	add	r1, r1, r5, lsl #24
   14444:	cmp	r1, #33554432	; 0x2000000
   14448:	blt	144c8 <__assert_fail@plt+0x2db4>
   1444c:	cmp	r5, #13
   14450:	beq	14524 <__assert_fail@plt+0x2e10>
   14454:	add	r6, sp, #9
   14458:	mov	r0, r5
   1445c:	mov	r1, r6
   14460:	bl	17b5c <__assert_fail@plt+0x6448>
   14464:	cmp	r0, #0
   14468:	beq	14488 <__assert_fail@plt+0x2d74>
   1446c:	movw	r3, #45090	; 0xb022
   14470:	add	r0, sp, #9
   14474:	mov	r1, #1
   14478:	mov	r2, #19
   1447c:	str	r5, [sp]
   14480:	movt	r3, #1
   14484:	bl	115dc <__sprintf_chk@plt>
   14488:	movw	r1, #45093	; 0xb025
   1448c:	mov	r0, #0
   14490:	mov	r2, #5
   14494:	movt	r1, #1
   14498:	bl	11444 <dcgettext@plt>
   1449c:	mov	r4, r0
   144a0:	mov	r0, #0
   144a4:	mov	r1, #3
   144a8:	mov	r2, r8
   144ac:	bl	1728c <__assert_fail@plt+0x5b78>
   144b0:	mov	r3, r0
   144b4:	ldr	r0, [r9, #24]
   144b8:	str	r6, [sp]
   144bc:	str	r0, [sp, #4]
   144c0:	orr	r0, r5, #128	; 0x80
   144c4:	b	14518 <__assert_fail@plt+0x2e04>
   144c8:	cmp	r5, #0
   144cc:	bne	14548 <__assert_fail@plt+0x2e34>
   144d0:	ubfx	r5, r0, #8, #8
   144d4:	cmp	r5, #0
   144d8:	beq	14524 <__assert_fail@plt+0x2e10>
   144dc:	movw	r1, #45134	; 0xb04e
   144e0:	mov	r0, #0
   144e4:	mov	r2, #5
   144e8:	movt	r1, #1
   144ec:	bl	11444 <dcgettext@plt>
   144f0:	mov	r4, r0
   144f4:	mov	r0, #0
   144f8:	mov	r1, #3
   144fc:	mov	r2, r8
   14500:	bl	1728c <__assert_fail@plt+0x5b78>
   14504:	mov	r3, r0
   14508:	ldr	r0, [r9, #24]
   1450c:	str	r5, [sp]
   14510:	str	r0, [sp, #4]
   14514:	mov	r0, r5
   14518:	mov	r1, #0
   1451c:	mov	r2, r4
   14520:	bl	114f8 <error@plt>
   14524:	sub	sp, fp, #24
   14528:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1452c:	sub	r0, r0, #1
   14530:	str	r0, [r9, #56]	; 0x38
   14534:	ldr	r0, [r1, r0, lsl #2]
   14538:	str	r0, [r1, r2, lsl #2]
   1453c:	cmp	r5, #1
   14540:	bge	14404 <__assert_fail@plt+0x2cf0>
   14544:	b	14524 <__assert_fail@plt+0x2e10>
   14548:	movw	r1, #45173	; 0xb075
   1454c:	mov	r0, #0
   14550:	mov	r2, #5
   14554:	movt	r1, #1
   14558:	bl	11444 <dcgettext@plt>
   1455c:	ldr	r3, [sp, #28]
   14560:	mov	r2, r0
   14564:	mov	r0, #1
   14568:	mov	r1, #0
   1456c:	bl	114f8 <error@plt>
   14570:	bl	115d0 <__errno_location@plt>
   14574:	ldr	r4, [r0]
   14578:	mov	r0, #0
   1457c:	mov	r1, #3
   14580:	mov	r2, r8
   14584:	bl	1728c <__assert_fail@plt+0x5b78>
   14588:	movw	r2, #45170	; 0xb072
   1458c:	mov	r3, r0
   14590:	mov	r0, #1
   14594:	mov	r1, r4
   14598:	movt	r2, #1
   1459c:	bl	114f8 <error@plt>
   145a0:	movw	r1, #45064	; 0xb008
   145a4:	mov	r0, #0
   145a8:	mov	r2, #5
   145ac:	movt	r1, #1
   145b0:	bl	11444 <dcgettext@plt>
   145b4:	mov	r2, r0
   145b8:	mov	r0, #1
   145bc:	mov	r1, r4
   145c0:	bl	114f8 <error@plt>
   145c4:	push	{r4, r5, r6, r7, fp, lr}
   145c8:	add	fp, sp, #16
   145cc:	mov	r4, r2
   145d0:	mov	r5, r1
   145d4:	cmp	r0, #0
   145d8:	beq	14634 <__assert_fail@plt+0x2f20>
   145dc:	cmp	r5, #0
   145e0:	cmpeq	r4, #0
   145e4:	beq	146b0 <__assert_fail@plt+0x2f9c>
   145e8:	movw	r6, #50392	; 0xc4d8
   145ec:	movw	r7, #49488	; 0xc150
   145f0:	mov	r0, #0
   145f4:	movt	r6, #2
   145f8:	movt	r7, #2
   145fc:	ldr	r2, [r6, #28]
   14600:	ldr	r3, [r6, #32]
   14604:	ldr	r1, [r7, #8]
   14608:	bl	14358 <__assert_fail@plt+0x2c44>
   1460c:	bl	146cc <__assert_fail@plt+0x2fb8>
   14610:	ldr	r0, [r6, #32]
   14614:	bl	14a7c <__assert_fail@plt+0x3368>
   14618:	cmn	r0, #1
   1461c:	str	r0, [r7, #8]
   14620:	bgt	14640 <__assert_fail@plt+0x2f2c>
   14624:	bl	115d0 <__errno_location@plt>
   14628:	ldr	r4, [r0]
   1462c:	ldr	r2, [r6, #32]
   14630:	b	1468c <__assert_fail@plt+0x2f78>
   14634:	movw	r0, #49488	; 0xc150
   14638:	movt	r0, #2
   1463c:	ldr	r0, [r0, #8]
   14640:	mov	r1, r5
   14644:	mov	r2, r4
   14648:	bl	154a0 <__assert_fail@plt+0x3d8c>
   1464c:	mov	r1, r0
   14650:	mov	r0, #1
   14654:	cmp	r1, r4
   14658:	bne	14660 <__assert_fail@plt+0x2f4c>
   1465c:	pop	{r4, r5, r6, r7, fp, pc}
   14660:	bl	115d0 <__errno_location@plt>
   14664:	ldr	r4, [r0]
   14668:	movw	r1, #50392	; 0xc4d8
   1466c:	movt	r1, #2
   14670:	cmp	r4, #32
   14674:	bne	14688 <__assert_fail@plt+0x2f74>
   14678:	ldr	r2, [r1, #24]
   1467c:	mov	r0, #0
   14680:	cmp	r2, #0
   14684:	popne	{r4, r5, r6, r7, fp, pc}
   14688:	ldr	r2, [r1, #32]
   1468c:	mov	r0, #0
   14690:	mov	r1, #3
   14694:	bl	1728c <__assert_fail@plt+0x5b78>
   14698:	movw	r2, #45170	; 0xb072
   1469c:	mov	r3, r0
   146a0:	mov	r0, #1
   146a4:	mov	r1, r4
   146a8:	movt	r2, #1
   146ac:	bl	114f8 <error@plt>
   146b0:	movw	r0, #50392	; 0xc4d8
   146b4:	movt	r0, #2
   146b8:	ldrb	r1, [r0, #1]
   146bc:	mov	r0, #1
   146c0:	cmp	r1, #0
   146c4:	beq	145e8 <__assert_fail@plt+0x2ed4>
   146c8:	b	1465c <__assert_fail@plt+0x2f48>
   146cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   146d0:	add	fp, sp, #24
   146d4:	sub	sp, sp, #8
   146d8:	movw	r7, #50392	; 0xc4d8
   146dc:	movt	r7, #2
   146e0:	ldr	r9, [r7, #32]
   146e4:	cmp	r9, #0
   146e8:	beq	147d8 <__assert_fail@plt+0x30c4>
   146ec:	ldr	r3, [r7, #12]
   146f0:	cmp	r3, #0
   146f4:	beq	147b4 <__assert_fail@plt+0x30a0>
   146f8:	movw	r0, #49488	; 0xc150
   146fc:	ldrb	r6, [r7, #3]
   14700:	ldr	r1, [r7, #52]	; 0x34
   14704:	ldr	r2, [r7, #36]	; 0x24
   14708:	movt	r0, #2
   1470c:	ldr	r0, [r0, #4]
   14710:	cmp	r6, #0
   14714:	beq	14758 <__assert_fail@plt+0x3044>
   14718:	sub	r1, r1, #1
   1471c:	sub	r2, r2, #4
   14720:	mov	r7, #0
   14724:	ldr	r6, [r2, r3, lsl #2]
   14728:	add	r6, r6, #1
   1472c:	str	r6, [r2, r3, lsl #2]
   14730:	ldrb	r6, [r0, r6]
   14734:	cmp	r6, #0
   14738:	strb	r6, [r1, r3]
   1473c:	bne	14a2c <__assert_fail@plt+0x3318>
   14740:	str	r7, [r2, r3, lsl #2]
   14744:	ldrb	r6, [r0]
   14748:	strb	r6, [r1, r3]
   1474c:	subs	r3, r3, #1
   14750:	bne	14724 <__assert_fail@plt+0x3010>
   14754:	b	147b4 <__assert_fail@plt+0x30a0>
   14758:	rsb	r3, r3, #1
   1475c:	mov	r6, #0
   14760:	ldr	r5, [r2, -r3, lsl #2]
   14764:	cmp	r3, #0
   14768:	add	r5, r5, #1
   1476c:	str	r5, [r2, -r3, lsl #2]
   14770:	bne	14788 <__assert_fail@plt+0x3074>
   14774:	ldr	r4, [r2]
   14778:	add	r4, r4, r0
   1477c:	ldrb	r4, [r4, #1]
   14780:	cmp	r4, #0
   14784:	beq	147d8 <__assert_fail@plt+0x30c4>
   14788:	ldrb	r5, [r0, r5]
   1478c:	cmp	r5, #0
   14790:	strb	r5, [r1, -r3]
   14794:	bne	14a2c <__assert_fail@plt+0x3318>
   14798:	rsb	r5, r3, #0
   1479c:	str	r6, [r2, r5, lsl #2]
   147a0:	ldrb	r5, [r0]
   147a4:	strb	r5, [r1, -r3]
   147a8:	add	r3, r3, #1
   147ac:	cmp	r3, #1
   147b0:	bne	14760 <__assert_fail@plt+0x304c>
   147b4:	movw	r1, #44469	; 0xadb5
   147b8:	mov	r0, #0
   147bc:	mov	r2, #5
   147c0:	movt	r1, #1
   147c4:	bl	11444 <dcgettext@plt>
   147c8:	mov	r2, r0
   147cc:	mov	r0, #1
   147d0:	mov	r1, #0
   147d4:	bl	114f8 <error@plt>
   147d8:	ldr	r8, [r7, #44]	; 0x2c
   147dc:	cmp	r8, #0
   147e0:	beq	1484c <__assert_fail@plt+0x3138>
   147e4:	add	r1, r8, #2
   147e8:	str	r1, [r7, #44]	; 0x2c
   147ec:	ldr	r0, [r7, #12]
   147f0:	ldr	r5, [r7, #40]	; 0x28
   147f4:	add	r0, r0, #1
   147f8:	str	r0, [r7, #12]
   147fc:	add	r1, r1, #1
   14800:	cmp	r1, r5
   14804:	bcc	14a58 <__assert_fail@plt+0x3344>
   14808:	mov	r0, r9
   1480c:	bl	185d8 <__assert_fail@plt+0x6ec4>
   14810:	mov	r4, r0
   14814:	cmp	r8, #0
   14818:	str	r0, [r7, #32]
   1481c:	beq	14870 <__assert_fail@plt+0x315c>
   14820:	ldr	r1, [r7, #36]	; 0x24
   14824:	movw	r0, #49488	; 0xc150
   14828:	ldr	r2, [r7, #40]	; 0x28
   1482c:	movt	r0, #2
   14830:	ldr	r0, [r0, #4]
   14834:	ldr	r1, [r1]
   14838:	add	r5, r2, #1
   1483c:	ldrb	r1, [r0, r1]
   14840:	strb	r1, [r4, r2]
   14844:	str	r5, [r7, #40]	; 0x28
   14848:	b	14890 <__assert_fail@plt+0x317c>
   1484c:	ldr	r0, [r7, #8]
   14850:	bl	11588 <strlen@plt>
   14854:	str	r0, [r7, #40]	; 0x28
   14858:	mov	r5, r0
   1485c:	ldr	r0, [r7, #16]
   14860:	cmp	r0, #0
   14864:	beq	14a34 <__assert_fail@plt+0x3320>
   14868:	bl	11588 <strlen@plt>
   1486c:	b	14a38 <__assert_fail@plt+0x3324>
   14870:	ldr	r5, [r7, #40]	; 0x28
   14874:	ldr	r1, [r7, #8]
   14878:	mov	r0, r4
   1487c:	mov	r2, r5
   14880:	bl	11408 <memcpy@plt>
   14884:	movw	r0, #49488	; 0xc150
   14888:	movt	r0, #2
   1488c:	ldr	r0, [r0, #4]
   14890:	add	r5, r4, r5
   14894:	str	r5, [r7, #52]	; 0x34
   14898:	ldr	r6, [r7, #12]
   1489c:	ldrb	r1, [r0]
   148a0:	mov	r0, r5
   148a4:	mov	r2, r6
   148a8:	bl	115f4 <memset@plt>
   148ac:	ldr	r1, [r7, #16]
   148b0:	cmp	r1, #0
   148b4:	beq	148c4 <__assert_fail@plt+0x31b0>
   148b8:	ldr	r2, [r7, #48]	; 0x30
   148bc:	add	r0, r5, r6
   148c0:	bl	11408 <memcpy@plt>
   148c4:	ldr	r0, [r7, #44]	; 0x2c
   148c8:	mov	r1, #0
   148cc:	strb	r1, [r4, r0]
   148d0:	ldr	r0, [r7, #36]	; 0x24
   148d4:	bl	153d0 <__assert_fail@plt+0x3cbc>
   148d8:	ldr	r0, [r7, #12]
   148dc:	mov	r1, #4
   148e0:	bl	189a4 <__assert_fail@plt+0x7290>
   148e4:	str	r0, [r7, #36]	; 0x24
   148e8:	ldr	r9, [r7, #20]
   148ec:	cmp	r9, #0
   148f0:	beq	14a2c <__assert_fail@plt+0x3318>
   148f4:	cmp	r8, #0
   148f8:	bne	14a5c <__assert_fail@plt+0x3348>
   148fc:	mov	r6, r0
   14900:	mov	r0, r9
   14904:	bl	11588 <strlen@plt>
   14908:	mov	r5, r0
   1490c:	ldr	r4, [r7, #12]
   14910:	ldr	r0, [r7, #52]	; 0x34
   14914:	mov	r1, r9
   14918:	mov	r2, r5
   1491c:	add	r0, r0, r4
   14920:	sub	r0, r0, r5
   14924:	bl	11408 <memcpy@plt>
   14928:	cmp	r5, #0
   1492c:	beq	14a2c <__assert_fail@plt+0x3318>
   14930:	add	lr, r6, r4, lsl #2
   14934:	cmp	r5, #4
   14938:	bcc	149d8 <__assert_fail@plt+0x32c4>
   1493c:	lsl	r1, r4, #2
   14940:	add	r0, r6, r4, lsl #2
   14944:	add	r2, r9, r5
   14948:	sub	r1, r1, r5, lsl #2
   1494c:	add	r1, r6, r1
   14950:	cmp	r1, r2
   14954:	cmpcc	r9, r0
   14958:	bcc	149d8 <__assert_fail@plt+0x32c4>
   1495c:	bic	ip, r5, #3
   14960:	vmov.i32	q8, #255	; 0x000000ff
   14964:	vmvn.i32	q9, #47	; 0x0000002f
   14968:	sub	r3, r0, #16
   1496c:	sub	r7, r2, #4
   14970:	add	r6, sp, #4
   14974:	mvn	r2, #15
   14978:	sub	lr, lr, ip, lsl #2
   1497c:	sub	r1, r5, ip
   14980:	mov	r0, ip
   14984:	ldr	r4, [r7], #-4
   14988:	subs	r0, r0, #4
   1498c:	str	r4, [sp, #4]
   14990:	vld1.32	{d20[0]}, [r6 :32]
   14994:	vmovl.u8	q10, d20
   14998:	vrev64.16	d20, d20
   1499c:	vmovl.u16	q10, d20
   149a0:	vand	q10, q10, q8
   149a4:	vadd.i32	q10, q10, q9
   149a8:	vrev64.32	q10, q10
   149ac:	vext.8	q10, q10, q10, #8
   149b0:	vst1.32	{d20-d21}, [r3], r2
   149b4:	bne	14984 <__assert_fail@plt+0x3270>
   149b8:	cmp	r5, ip
   149bc:	beq	14a2c <__assert_fail@plt+0x3318>
   149c0:	tst	r1, #1
   149c4:	bne	149e4 <__assert_fail@plt+0x32d0>
   149c8:	mov	r2, r1
   149cc:	cmp	r1, #1
   149d0:	bne	149fc <__assert_fail@plt+0x32e8>
   149d4:	b	14a2c <__assert_fail@plt+0x3318>
   149d8:	mov	r1, r5
   149dc:	tst	r1, #1
   149e0:	beq	149c8 <__assert_fail@plt+0x32b4>
   149e4:	sub	r2, r1, #1
   149e8:	ldrb	r0, [r9, r2]
   149ec:	sub	r0, r0, #48	; 0x30
   149f0:	str	r0, [lr, #-4]!
   149f4:	cmp	r1, #1
   149f8:	beq	14a2c <__assert_fail@plt+0x3318>
   149fc:	sub	r0, lr, #4
   14a00:	sub	r1, r9, #2
   14a04:	add	r3, r1, r2
   14a08:	ldrb	r3, [r3, #1]
   14a0c:	sub	r3, r3, #48	; 0x30
   14a10:	str	r3, [r0]
   14a14:	ldrb	r3, [r1, r2]
   14a18:	subs	r2, r2, #2
   14a1c:	sub	r3, r3, #48	; 0x30
   14a20:	str	r3, [r0, #-4]
   14a24:	sub	r0, r0, #8
   14a28:	bne	14a04 <__assert_fail@plt+0x32f0>
   14a2c:	sub	sp, fp, #24
   14a30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a34:	mov	r0, #0
   14a38:	ldr	r2, [r7, #12]
   14a3c:	add	r1, r0, r5
   14a40:	add	r1, r1, r2
   14a44:	str	r1, [r7, #44]	; 0x2c
   14a48:	str	r0, [r7, #48]	; 0x30
   14a4c:	add	r1, r1, #1
   14a50:	cmp	r1, r5
   14a54:	bcs	14808 <__assert_fail@plt+0x30f4>
   14a58:	bl	18acc <__assert_fail@plt+0x73b8>
   14a5c:	movw	r0, #44423	; 0xad87
   14a60:	movw	r1, #44431	; 0xad8f
   14a64:	movw	r3, #44443	; 0xad9b
   14a68:	movw	r2, #409	; 0x199
   14a6c:	movt	r0, #1
   14a70:	movt	r1, #1
   14a74:	movt	r3, #1
   14a78:	bl	11714 <__assert_fail@plt>
   14a7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a80:	add	fp, sp, #24
   14a84:	sub	sp, sp, #112	; 0x70
   14a88:	movw	r5, #50392	; 0xc4d8
   14a8c:	mov	r4, r0
   14a90:	movt	r5, #2
   14a94:	ldr	r0, [r5, #24]
   14a98:	cmp	r0, #0
   14a9c:	beq	14b98 <__assert_fail@plt+0x3484>
   14aa0:	movw	r0, #44592	; 0xae30
   14aa4:	movt	r0, #1
   14aa8:	bl	11510 <getenv@plt>
   14aac:	mov	r6, r0
   14ab0:	movw	r0, #44606	; 0xae3e
   14ab4:	mov	r1, r4
   14ab8:	mov	r2, #1
   14abc:	movt	r0, #1
   14ac0:	bl	115ac <setenv@plt>
   14ac4:	movw	r8, #44598	; 0xae36
   14ac8:	cmp	r6, #0
   14acc:	movt	r8, #1
   14ad0:	movne	r8, r6
   14ad4:	cmp	r0, #0
   14ad8:	bne	14e00 <__assert_fail@plt+0x36ec>
   14adc:	ldrb	r0, [r5, #2]
   14ae0:	cmp	r0, #1
   14ae4:	bne	14b30 <__assert_fail@plt+0x341c>
   14ae8:	movw	r0, #50020	; 0xc364
   14aec:	movw	r1, #44651	; 0xae6b
   14af0:	mov	r2, #5
   14af4:	movt	r0, #2
   14af8:	movt	r1, #1
   14afc:	ldr	r6, [r0]
   14b00:	mov	r0, #0
   14b04:	bl	11444 <dcgettext@plt>
   14b08:	mov	r7, r0
   14b0c:	mov	r0, #0
   14b10:	mov	r1, #3
   14b14:	mov	r2, r4
   14b18:	bl	1728c <__assert_fail@plt+0x5b78>
   14b1c:	mov	r3, r0
   14b20:	mov	r0, r6
   14b24:	mov	r1, #1
   14b28:	mov	r2, r7
   14b2c:	bl	11624 <__fprintf_chk@plt>
   14b30:	add	r0, sp, #8
   14b34:	bl	11648 <pipe@plt>
   14b38:	cmp	r0, #0
   14b3c:	bne	14e14 <__assert_fail@plt+0x3700>
   14b40:	bl	11684 <fork@plt>
   14b44:	cmp	r0, #0
   14b48:	beq	14c90 <__assert_fail@plt+0x357c>
   14b4c:	mov	r4, r0
   14b50:	cmn	r0, #1
   14b54:	beq	14e28 <__assert_fail@plt+0x3714>
   14b58:	ldr	r0, [sp, #8]
   14b5c:	bl	116fc <close@plt>
   14b60:	cmp	r0, #0
   14b64:	bne	14e3c <__assert_fail@plt+0x3728>
   14b68:	str	r4, [r5, #28]
   14b6c:	ldr	r1, [r5, #56]	; 0x38
   14b70:	ldr	r0, [r5, #64]	; 0x40
   14b74:	cmp	r1, r0
   14b78:	bne	14d54 <__assert_fail@plt+0x3640>
   14b7c:	ldr	r0, [r5, #60]	; 0x3c
   14b80:	add	r1, r5, #64	; 0x40
   14b84:	mov	r2, #4
   14b88:	bl	1873c <__assert_fail@plt+0x7028>
   14b8c:	str	r0, [r5, #60]	; 0x3c
   14b90:	ldr	r1, [r5, #56]	; 0x38
   14b94:	b	14d58 <__assert_fail@plt+0x3644>
   14b98:	ldrb	r0, [r5, #2]
   14b9c:	cmp	r0, #1
   14ba0:	bne	14be8 <__assert_fail@plt+0x34d4>
   14ba4:	movw	r0, #50020	; 0xc364
   14ba8:	movw	r1, #44500	; 0xadd4
   14bac:	mov	r2, #5
   14bb0:	movt	r0, #2
   14bb4:	movt	r1, #1
   14bb8:	ldr	r5, [r0]
   14bbc:	mov	r0, #0
   14bc0:	bl	11444 <dcgettext@plt>
   14bc4:	mov	r6, r0
   14bc8:	mov	r0, #4
   14bcc:	mov	r1, r4
   14bd0:	bl	17010 <__assert_fail@plt+0x58fc>
   14bd4:	mov	r3, r0
   14bd8:	mov	r0, r5
   14bdc:	mov	r1, #1
   14be0:	mov	r2, r6
   14be4:	bl	11624 <__fprintf_chk@plt>
   14be8:	mov	r0, r4
   14bec:	mov	r1, #65	; 0x41
   14bf0:	movw	r2, #438	; 0x1b6
   14bf4:	bl	152d0 <__assert_fail@plt+0x3bbc>
   14bf8:	mov	r5, r0
   14bfc:	cmp	r0, #0
   14c00:	bmi	14c84 <__assert_fail@plt+0x3570>
   14c04:	add	r2, sp, #8
   14c08:	mov	r0, #3
   14c0c:	mov	r1, r5
   14c10:	bl	1148c <__fxstat64@plt>
   14c14:	cmp	r0, #0
   14c18:	bne	14e50 <__assert_fail@plt+0x373c>
   14c1c:	movw	r0, #50032	; 0xc370
   14c20:	ldr	r1, [sp, #104]	; 0x68
   14c24:	ldr	r7, [sp, #108]	; 0x6c
   14c28:	movt	r0, #2
   14c2c:	ldrd	r2, [r0, #96]	; 0x60
   14c30:	eor	r3, r3, r7
   14c34:	eor	r1, r2, r1
   14c38:	orrs	r1, r1, r3
   14c3c:	bne	14c5c <__assert_fail@plt+0x3548>
   14c40:	ldrd	r0, [r0]
   14c44:	ldr	r2, [sp, #8]
   14c48:	ldr	r3, [sp, #12]
   14c4c:	eor	r1, r1, r3
   14c50:	eor	r0, r0, r2
   14c54:	orrs	r0, r0, r1
   14c58:	beq	14e80 <__assert_fail@plt+0x376c>
   14c5c:	mov	r0, r5
   14c60:	mov	r2, #0
   14c64:	mov	r3, #0
   14c68:	bl	1142c <ftruncate64@plt>
   14c6c:	cmp	r0, #0
   14c70:	beq	14c84 <__assert_fail@plt+0x3570>
   14c74:	ldr	r0, [sp, #24]
   14c78:	and	r0, r0, #61440	; 0xf000
   14c7c:	cmp	r0, #32768	; 0x8000
   14c80:	beq	14eb8 <__assert_fail@plt+0x37a4>
   14c84:	mov	r0, r5
   14c88:	sub	sp, fp, #24
   14c8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c90:	ldr	r0, [r5, #56]	; 0x38
   14c94:	cmp	r0, #0
   14c98:	beq	14cc4 <__assert_fail@plt+0x35b0>
   14c9c:	mov	r4, #0
   14ca0:	ldr	r0, [r5, #60]	; 0x3c
   14ca4:	ldr	r0, [r0, r4, lsl #2]
   14ca8:	bl	116fc <close@plt>
   14cac:	cmp	r0, #0
   14cb0:	bne	14d78 <__assert_fail@plt+0x3664>
   14cb4:	ldr	r0, [r5, #56]	; 0x38
   14cb8:	add	r4, r4, #1
   14cbc:	cmp	r4, r0
   14cc0:	bcc	14ca0 <__assert_fail@plt+0x358c>
   14cc4:	ldr	r0, [sp, #12]
   14cc8:	bl	116fc <close@plt>
   14ccc:	cmp	r0, #0
   14cd0:	bne	14d8c <__assert_fail@plt+0x3678>
   14cd4:	ldr	r0, [sp, #8]
   14cd8:	cmp	r0, #0
   14cdc:	bne	14db8 <__assert_fail@plt+0x36a4>
   14ce0:	movw	r1, #50264	; 0xc458
   14ce4:	mov	r0, #2
   14ce8:	mov	r2, #0
   14cec:	mov	r4, #0
   14cf0:	movt	r1, #2
   14cf4:	bl	113d8 <sigprocmask@plt>
   14cf8:	mov	r0, r8
   14cfc:	bl	15090 <__assert_fail@plt+0x397c>
   14d00:	ldr	r3, [r5, #24]
   14d04:	movw	r2, #44773	; 0xaee5
   14d08:	mov	r1, r0
   14d0c:	mov	r0, r8
   14d10:	str	r4, [sp]
   14d14:	movt	r2, #1
   14d18:	bl	11690 <execl@plt>
   14d1c:	bl	115d0 <__errno_location@plt>
   14d20:	movw	r1, #44776	; 0xaee8
   14d24:	ldr	r4, [r0]
   14d28:	mov	r0, #0
   14d2c:	mov	r2, #5
   14d30:	movt	r1, #1
   14d34:	bl	11444 <dcgettext@plt>
   14d38:	mov	r2, r0
   14d3c:	ldr	r0, [r5, #24]
   14d40:	mov	r1, r4
   14d44:	mov	r3, r8
   14d48:	str	r0, [sp]
   14d4c:	mov	r0, #1
   14d50:	bl	114f8 <error@plt>
   14d54:	ldr	r0, [r5, #60]	; 0x3c
   14d58:	add	r2, r1, #1
   14d5c:	str	r2, [r5, #56]	; 0x38
   14d60:	ldr	r2, [sp, #12]
   14d64:	str	r2, [r0, r1, lsl #2]
   14d68:	ldr	r5, [sp, #12]
   14d6c:	mov	r0, r5
   14d70:	sub	sp, fp, #24
   14d74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d78:	bl	115d0 <__errno_location@plt>
   14d7c:	ldr	r4, [r0]
   14d80:	movw	r1, #44697	; 0xae99
   14d84:	movt	r1, #1
   14d88:	b	14d9c <__assert_fail@plt+0x3688>
   14d8c:	bl	115d0 <__errno_location@plt>
   14d90:	ldr	r4, [r0]
   14d94:	movw	r1, #44716	; 0xaeac
   14d98:	movt	r1, #1
   14d9c:	mov	r0, #0
   14da0:	mov	r2, #5
   14da4:	bl	11444 <dcgettext@plt>
   14da8:	mov	r2, r0
   14dac:	mov	r0, #1
   14db0:	mov	r1, r4
   14db4:	bl	114f8 <error@plt>
   14db8:	mov	r1, #0
   14dbc:	bl	11450 <dup2@plt>
   14dc0:	cmp	r0, #0
   14dc4:	bne	14dec <__assert_fail@plt+0x36d8>
   14dc8:	ldr	r0, [sp, #8]
   14dcc:	bl	116fc <close@plt>
   14dd0:	cmp	r0, #0
   14dd4:	beq	14ce0 <__assert_fail@plt+0x35cc>
   14dd8:	bl	115d0 <__errno_location@plt>
   14ddc:	ldr	r4, [r0]
   14de0:	movw	r1, #44754	; 0xaed2
   14de4:	movt	r1, #1
   14de8:	b	14d9c <__assert_fail@plt+0x3688>
   14dec:	bl	115d0 <__errno_location@plt>
   14df0:	ldr	r4, [r0]
   14df4:	movw	r1, #44736	; 0xaec0
   14df8:	movt	r1, #1
   14dfc:	b	14d9c <__assert_fail@plt+0x3688>
   14e00:	bl	115d0 <__errno_location@plt>
   14e04:	ldr	r4, [r0]
   14e08:	movw	r1, #44611	; 0xae43
   14e0c:	movt	r1, #1
   14e10:	b	14d9c <__assert_fail@plt+0x3688>
   14e14:	bl	115d0 <__errno_location@plt>
   14e18:	ldr	r4, [r0]
   14e1c:	movw	r1, #44675	; 0xae83
   14e20:	movt	r1, #1
   14e24:	b	14d9c <__assert_fail@plt+0x3688>
   14e28:	bl	115d0 <__errno_location@plt>
   14e2c:	ldr	r4, [r0]
   14e30:	movw	r1, #44810	; 0xaf0a
   14e34:	movt	r1, #1
   14e38:	b	14d9c <__assert_fail@plt+0x3688>
   14e3c:	bl	115d0 <__errno_location@plt>
   14e40:	ldr	r4, [r0]
   14e44:	movw	r1, #44834	; 0xaf22
   14e48:	movt	r1, #1
   14e4c:	b	14d9c <__assert_fail@plt+0x3688>
   14e50:	bl	115d0 <__errno_location@plt>
   14e54:	movw	r1, #44518	; 0xade6
   14e58:	ldr	r5, [r0]
   14e5c:	mov	r0, #0
   14e60:	mov	r2, #5
   14e64:	movt	r1, #1
   14e68:	bl	11444 <dcgettext@plt>
   14e6c:	mov	r6, r0
   14e70:	mov	r0, #4
   14e74:	mov	r1, r4
   14e78:	bl	17010 <__assert_fail@plt+0x58fc>
   14e7c:	b	14ee8 <__assert_fail@plt+0x37d4>
   14e80:	movw	r1, #44536	; 0xadf8
   14e84:	mov	r0, #0
   14e88:	mov	r2, #5
   14e8c:	movt	r1, #1
   14e90:	bl	11444 <dcgettext@plt>
   14e94:	mov	r5, r0
   14e98:	mov	r0, #4
   14e9c:	mov	r1, r4
   14ea0:	bl	17010 <__assert_fail@plt+0x58fc>
   14ea4:	mov	r3, r0
   14ea8:	mov	r0, #1
   14eac:	mov	r1, #0
   14eb0:	mov	r2, r5
   14eb4:	bl	114f8 <error@plt>
   14eb8:	bl	115d0 <__errno_location@plt>
   14ebc:	movw	r1, #44571	; 0xae1b
   14ec0:	ldr	r5, [r0]
   14ec4:	mov	r0, #0
   14ec8:	mov	r2, #5
   14ecc:	movt	r1, #1
   14ed0:	bl	11444 <dcgettext@plt>
   14ed4:	mov	r6, r0
   14ed8:	mov	r0, #0
   14edc:	mov	r1, #3
   14ee0:	mov	r2, r4
   14ee4:	bl	1728c <__assert_fail@plt+0x5b78>
   14ee8:	mov	r3, r0
   14eec:	mov	r0, #1
   14ef0:	mov	r1, r5
   14ef4:	mov	r2, r6
   14ef8:	bl	114f8 <error@plt>
   14efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f00:	add	fp, sp, #28
   14f04:	sub	sp, sp, #12
   14f08:	mov	r4, r0
   14f0c:	add	r0, r0, r1, lsl #4
   14f10:	mov	r5, r1
   14f14:	mov	r9, #0
   14f18:	mov	r7, r0
   14f1c:	ldr	r1, [r7, #4]!
   14f20:	cmn	r1, #1
   14f24:	ble	14f34 <__assert_fail@plt+0x3820>
   14f28:	and	r0, r9, #1
   14f2c:	sub	sp, fp, #28
   14f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f34:	sub	r8, r2, #1
   14f38:	cmp	r5, #0
   14f3c:	mov	r9, #0
   14f40:	str	r0, [sp, #4]
   14f44:	str	r7, [sp, #8]
   14f48:	mov	r6, r8
   14f4c:	subne	r6, r5, #1
   14f50:	ldr	r0, [r4, r5, lsl #4]
   14f54:	cmn	r1, #1
   14f58:	beq	14f70 <__assert_fail@plt+0x385c>
   14f5c:	movw	r1, #3073	; 0xc01
   14f60:	bl	152d0 <__assert_fail@plt+0x3bbc>
   14f64:	cmn	r0, #1
   14f68:	ble	14f7c <__assert_fail@plt+0x3868>
   14f6c:	b	15000 <__assert_fail@plt+0x38ec>
   14f70:	bl	14a7c <__assert_fail@plt+0x3368>
   14f74:	cmn	r0, #1
   14f78:	bgt	15000 <__assert_fail@plt+0x38ec>
   14f7c:	bl	115d0 <__errno_location@plt>
   14f80:	ldr	r1, [r0]
   14f84:	mov	r7, r0
   14f88:	sub	r0, r1, #23
   14f8c:	cmp	r0, #1
   14f90:	bhi	15044 <__assert_fail@plt+0x3930>
   14f94:	add	sl, r4, r6, lsl #4
   14f98:	mov	r9, sl
   14f9c:	ldr	r0, [r9, #4]!
   14fa0:	cmn	r0, #1
   14fa4:	bgt	14fc4 <__assert_fail@plt+0x38b0>
   14fa8:	cmp	r6, #0
   14fac:	mov	r0, r8
   14fb0:	subne	r0, r6, #1
   14fb4:	cmp	r0, r5
   14fb8:	mov	r6, r0
   14fbc:	bne	14f94 <__assert_fail@plt+0x3880>
   14fc0:	b	15044 <__assert_fail@plt+0x3930>
   14fc4:	ldr	r0, [sl, #8]!
   14fc8:	bl	15234 <__assert_fail@plt+0x3b20>
   14fcc:	cmp	r0, #0
   14fd0:	bne	15070 <__assert_fail@plt+0x395c>
   14fd4:	ldr	r7, [sp, #8]
   14fd8:	mov	r0, #0
   14fdc:	str	r0, [sl]
   14fe0:	mvn	r0, #1
   14fe4:	str	r0, [r9]
   14fe8:	mov	r9, #1
   14fec:	ldr	r1, [r7]
   14ff0:	ldr	r0, [r4, r5, lsl #4]
   14ff4:	cmn	r1, #1
   14ff8:	bne	14f5c <__assert_fail@plt+0x3848>
   14ffc:	b	14f70 <__assert_fail@plt+0x385c>
   15000:	movw	r1, #45062	; 0xb006
   15004:	str	r0, [r7]
   15008:	movt	r1, #1
   1500c:	bl	11378 <fdopen@plt>
   15010:	ldr	r2, [sp, #4]
   15014:	cmp	r0, #0
   15018:	str	r0, [r2, #8]
   1501c:	beq	15080 <__assert_fail@plt+0x396c>
   15020:	movw	r0, #50392	; 0xc4d8
   15024:	movt	r0, #2
   15028:	ldr	r1, [r0, #28]
   1502c:	str	r1, [r2, #12]
   15030:	mov	r1, #0
   15034:	str	r1, [r0, #28]
   15038:	and	r0, r9, #1
   1503c:	sub	sp, fp, #28
   15040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15044:	ldr	r2, [r4, r5, lsl #4]
   15048:	mov	r0, #0
   1504c:	mov	r4, r1
   15050:	mov	r1, #3
   15054:	bl	1728c <__assert_fail@plt+0x5b78>
   15058:	movw	r2, #45170	; 0xb072
   1505c:	mov	r3, r0
   15060:	mov	r0, #1
   15064:	mov	r1, r4
   15068:	movt	r2, #1
   1506c:	bl	114f8 <error@plt>
   15070:	ldr	r2, [r4, r6, lsl #4]
   15074:	ldr	r4, [r7]
   15078:	mov	r0, #0
   1507c:	b	15050 <__assert_fail@plt+0x393c>
   15080:	bl	115d0 <__errno_location@plt>
   15084:	ldr	r2, [r4, r5, lsl #4]
   15088:	ldr	r4, [r0]
   1508c:	b	15078 <__assert_fail@plt+0x3964>
   15090:	sub	r0, r0, #1
   15094:	ldrb	r3, [r0, #1]!
   15098:	cmp	r3, #47	; 0x2f
   1509c:	beq	15094 <__assert_fail@plt+0x3980>
   150a0:	mov	r2, #0
   150a4:	mov	r1, r0
   150a8:	uxtb	r3, r3
   150ac:	cmp	r3, #47	; 0x2f
   150b0:	bne	150c8 <__assert_fail@plt+0x39b4>
   150b4:	ldrb	r3, [r1, #1]!
   150b8:	mov	r2, #1
   150bc:	uxtb	r3, r3
   150c0:	cmp	r3, #47	; 0x2f
   150c4:	beq	150b4 <__assert_fail@plt+0x39a0>
   150c8:	cmp	r3, #0
   150cc:	bxeq	lr
   150d0:	tst	r2, #1
   150d4:	mov	r2, #0
   150d8:	movne	r0, r1
   150dc:	ldrb	r3, [r1, #1]!
   150e0:	uxtb	r3, r3
   150e4:	cmp	r3, #47	; 0x2f
   150e8:	bne	150c8 <__assert_fail@plt+0x39b4>
   150ec:	b	150b4 <__assert_fail@plt+0x39a0>
   150f0:	push	{r4, sl, fp, lr}
   150f4:	add	fp, sp, #8
   150f8:	mov	r4, r0
   150fc:	bl	11588 <strlen@plt>
   15100:	mov	r1, r0
   15104:	sub	r2, r4, #1
   15108:	mov	r0, r1
   1510c:	cmp	r1, #2
   15110:	bcc	15124 <__assert_fail@plt+0x3a10>
   15114:	ldrb	r3, [r2, r0]
   15118:	sub	r1, r0, #1
   1511c:	cmp	r3, #47	; 0x2f
   15120:	beq	15108 <__assert_fail@plt+0x39f4>
   15124:	pop	{r4, sl, fp, pc}
   15128:	movw	r1, #50460	; 0xc51c
   1512c:	movt	r1, #2
   15130:	str	r0, [r1, #4]
   15134:	bx	lr
   15138:	movw	r1, #50460	; 0xc51c
   1513c:	movt	r1, #2
   15140:	strb	r0, [r1]
   15144:	bx	lr
   15148:	push	{r4, r5, r6, sl, fp, lr}
   1514c:	add	fp, sp, #16
   15150:	sub	sp, sp, #8
   15154:	movw	r0, #50020	; 0xc364
   15158:	movt	r0, #2
   1515c:	ldr	r0, [r0]
   15160:	bl	19998 <__assert_fail@plt+0x8284>
   15164:	cmp	r0, #0
   15168:	beq	15190 <__assert_fail@plt+0x3a7c>
   1516c:	movw	r5, #50460	; 0xc51c
   15170:	movt	r5, #2
   15174:	ldrb	r0, [r5]
   15178:	cmp	r0, #0
   1517c:	beq	151bc <__assert_fail@plt+0x3aa8>
   15180:	bl	115d0 <__errno_location@plt>
   15184:	ldr	r0, [r0]
   15188:	cmp	r0, #32
   1518c:	bne	151bc <__assert_fail@plt+0x3aa8>
   15190:	movw	r0, #50016	; 0xc360
   15194:	movt	r0, #2
   15198:	ldr	r0, [r0]
   1519c:	bl	19998 <__assert_fail@plt+0x8284>
   151a0:	cmp	r0, #0
   151a4:	subeq	sp, fp, #16
   151a8:	popeq	{r4, r5, r6, sl, fp, pc}
   151ac:	movw	r0, #49504	; 0xc160
   151b0:	movt	r0, #2
   151b4:	ldr	r0, [r0]
   151b8:	bl	113fc <_exit@plt>
   151bc:	movw	r1, #45050	; 0xaffa
   151c0:	mov	r0, #0
   151c4:	mov	r2, #5
   151c8:	movt	r1, #1
   151cc:	bl	11444 <dcgettext@plt>
   151d0:	ldr	r6, [r5, #4]
   151d4:	mov	r4, r0
   151d8:	bl	115d0 <__errno_location@plt>
   151dc:	ldr	r5, [r0]
   151e0:	cmp	r6, #0
   151e4:	bne	15200 <__assert_fail@plt+0x3aec>
   151e8:	movw	r2, #45170	; 0xb072
   151ec:	mov	r0, #0
   151f0:	mov	r1, r5
   151f4:	mov	r3, r4
   151f8:	movt	r2, #1
   151fc:	b	15220 <__assert_fail@plt+0x3b0c>
   15200:	mov	r0, r6
   15204:	bl	171b0 <__assert_fail@plt+0x5a9c>
   15208:	movw	r2, #43389	; 0xa97d
   1520c:	mov	r3, r0
   15210:	str	r4, [sp]
   15214:	mov	r0, #0
   15218:	mov	r1, r5
   1521c:	movt	r2, #1
   15220:	bl	114f8 <error@plt>
   15224:	movw	r0, #49504	; 0xc160
   15228:	movt	r0, #2
   1522c:	ldr	r0, [r0]
   15230:	bl	113fc <_exit@plt>
   15234:	push	{r4, r5, r6, sl, fp, lr}
   15238:	add	fp, sp, #16
   1523c:	sub	sp, sp, #8
   15240:	mov	r4, r0
   15244:	bl	11618 <fileno@plt>
   15248:	cmn	r0, #1
   1524c:	ble	152c0 <__assert_fail@plt+0x3bac>
   15250:	mov	r0, r4
   15254:	bl	11540 <__freading@plt>
   15258:	cmp	r0, #0
   1525c:	beq	15288 <__assert_fail@plt+0x3b74>
   15260:	mov	r0, r4
   15264:	bl	11618 <fileno@plt>
   15268:	mov	r1, #1
   1526c:	mov	r2, #0
   15270:	mov	r3, #0
   15274:	str	r1, [sp]
   15278:	bl	114b0 <lseek64@plt>
   1527c:	and	r0, r0, r1
   15280:	cmn	r0, #1
   15284:	beq	152c0 <__assert_fail@plt+0x3bac>
   15288:	mov	r0, r4
   1528c:	bl	15374 <__assert_fail@plt+0x3c60>
   15290:	cmp	r0, #0
   15294:	beq	152c0 <__assert_fail@plt+0x3bac>
   15298:	bl	115d0 <__errno_location@plt>
   1529c:	ldr	r6, [r0]
   152a0:	mov	r5, r0
   152a4:	mov	r0, r4
   152a8:	bl	1163c <fclose@plt>
   152ac:	cmp	r6, #0
   152b0:	strne	r6, [r5]
   152b4:	mvnne	r0, #0
   152b8:	sub	sp, fp, #16
   152bc:	pop	{r4, r5, r6, sl, fp, pc}
   152c0:	mov	r0, r4
   152c4:	sub	sp, fp, #16
   152c8:	pop	{r4, r5, r6, sl, fp, lr}
   152cc:	b	1163c <fclose@plt>
   152d0:	sub	sp, sp, #8
   152d4:	push	{fp, lr}
   152d8:	mov	fp, sp
   152dc:	sub	sp, sp, #8
   152e0:	str	r2, [fp, #8]
   152e4:	str	r3, [fp, #12]
   152e8:	tst	r1, #64	; 0x40
   152ec:	mov	r2, #0
   152f0:	ldrne	r2, [fp, #8]
   152f4:	bl	11504 <open64@plt>
   152f8:	bl	17e70 <__assert_fail@plt+0x675c>
   152fc:	mov	sp, fp
   15300:	pop	{fp, lr}
   15304:	add	sp, sp, #8
   15308:	bx	lr
   1530c:	push	{r4, r5, r6, r7, fp, lr}
   15310:	add	fp, sp, #16
   15314:	mov	r5, r0
   15318:	mov	r0, r1
   1531c:	mov	r1, r2
   15320:	mov	r2, r3
   15324:	bl	11504 <open64@plt>
   15328:	mov	r4, r0
   1532c:	cmp	r0, r5
   15330:	beq	1536c <__assert_fail@plt+0x3c58>
   15334:	cmp	r4, #0
   15338:	bmi	1536c <__assert_fail@plt+0x3c58>
   1533c:	mov	r0, r4
   15340:	mov	r1, r5
   15344:	bl	11450 <dup2@plt>
   15348:	mov	r5, r0
   1534c:	bl	115d0 <__errno_location@plt>
   15350:	ldr	r7, [r0]
   15354:	mov	r6, r0
   15358:	mov	r0, r4
   1535c:	bl	116fc <close@plt>
   15360:	mov	r0, r5
   15364:	str	r7, [r6]
   15368:	pop	{r4, r5, r6, r7, fp, pc}
   1536c:	mov	r0, r4
   15370:	pop	{r4, r5, r6, r7, fp, pc}
   15374:	push	{r4, sl, fp, lr}
   15378:	add	fp, sp, #8
   1537c:	sub	sp, sp, #8
   15380:	mov	r4, r0
   15384:	cmp	r0, #0
   15388:	beq	153c0 <__assert_fail@plt+0x3cac>
   1538c:	mov	r0, r4
   15390:	bl	11540 <__freading@plt>
   15394:	cmp	r0, #0
   15398:	beq	153c0 <__assert_fail@plt+0x3cac>
   1539c:	ldrb	r0, [r4, #1]
   153a0:	tst	r0, #1
   153a4:	beq	153c0 <__assert_fail@plt+0x3cac>
   153a8:	mov	r0, #1
   153ac:	mov	r2, #0
   153b0:	mov	r3, #0
   153b4:	str	r0, [sp]
   153b8:	mov	r0, r4
   153bc:	bl	153f8 <__assert_fail@plt+0x3ce4>
   153c0:	mov	r0, r4
   153c4:	sub	sp, fp, #8
   153c8:	pop	{r4, sl, fp, lr}
   153cc:	b	113cc <fflush@plt>
   153d0:	push	{r4, r5, r6, sl, fp, lr}
   153d4:	add	fp, sp, #16
   153d8:	mov	r4, r0
   153dc:	bl	115d0 <__errno_location@plt>
   153e0:	ldr	r6, [r0]
   153e4:	mov	r5, r0
   153e8:	mov	r0, r4
   153ec:	bl	113f0 <free@plt>
   153f0:	str	r6, [r5]
   153f4:	pop	{r4, r5, r6, sl, fp, pc}
   153f8:	push	{r4, r5, r6, r7, fp, lr}
   153fc:	add	fp, sp, #16
   15400:	sub	sp, sp, #8
   15404:	mov	r4, r0
   15408:	ldr	r0, [r0, #4]
   1540c:	mov	r5, r3
   15410:	mov	r6, r2
   15414:	ldr	r1, [r4, #8]
   15418:	cmp	r1, r0
   1541c:	bne	15438 <__assert_fail@plt+0x3d24>
   15420:	ldrd	r0, [r4, #16]
   15424:	cmp	r1, r0
   15428:	bne	15438 <__assert_fail@plt+0x3d24>
   1542c:	ldr	r0, [r4, #36]	; 0x24
   15430:	cmp	r0, #0
   15434:	beq	15450 <__assert_fail@plt+0x3d3c>
   15438:	mov	r0, r4
   1543c:	mov	r2, r6
   15440:	mov	r3, r5
   15444:	sub	sp, fp, #16
   15448:	pop	{r4, r5, r6, r7, fp, lr}
   1544c:	b	11654 <fseeko64@plt>
   15450:	ldr	r7, [fp, #8]
   15454:	mov	r0, r4
   15458:	bl	11618 <fileno@plt>
   1545c:	mov	r2, r6
   15460:	mov	r3, r5
   15464:	str	r7, [sp]
   15468:	bl	114b0 <lseek64@plt>
   1546c:	and	r2, r0, r1
   15470:	cmn	r2, #1
   15474:	beq	15494 <__assert_fail@plt+0x3d80>
   15478:	strd	r0, [r4, #80]	; 0x50
   1547c:	ldr	r0, [r4]
   15480:	bic	r0, r0, #16
   15484:	str	r0, [r4]
   15488:	mov	r0, #0
   1548c:	sub	sp, fp, #16
   15490:	pop	{r4, r5, r6, r7, fp, pc}
   15494:	mvn	r0, #0
   15498:	sub	sp, fp, #16
   1549c:	pop	{r4, r5, r6, r7, fp, pc}
   154a0:	push	{r4, r5, r6, r7, fp, lr}
   154a4:	add	fp, sp, #16
   154a8:	cmp	r2, #0
   154ac:	beq	154f8 <__assert_fail@plt+0x3de4>
   154b0:	mov	r5, r2
   154b4:	mov	r6, r1
   154b8:	mov	r7, r0
   154bc:	mov	r4, #0
   154c0:	mov	r0, r7
   154c4:	mov	r1, r6
   154c8:	mov	r2, r5
   154cc:	bl	175b4 <__assert_fail@plt+0x5ea0>
   154d0:	cmn	r0, #1
   154d4:	beq	154f0 <__assert_fail@plt+0x3ddc>
   154d8:	cmp	r0, #0
   154dc:	beq	15504 <__assert_fail@plt+0x3df0>
   154e0:	subs	r5, r5, r0
   154e4:	add	r6, r6, r0
   154e8:	add	r4, r0, r4
   154ec:	bne	154c0 <__assert_fail@plt+0x3dac>
   154f0:	mov	r0, r4
   154f4:	pop	{r4, r5, r6, r7, fp, pc}
   154f8:	mov	r4, #0
   154fc:	mov	r0, r4
   15500:	pop	{r4, r5, r6, r7, fp, pc}
   15504:	bl	115d0 <__errno_location@plt>
   15508:	mov	r1, #28
   1550c:	str	r1, [r0]
   15510:	mov	r0, r4
   15514:	pop	{r4, r5, r6, r7, fp, pc}
   15518:	push	{r4, r5, r6, sl, fp, lr}
   1551c:	add	fp, sp, #16
   15520:	mov	r5, r0
   15524:	mov	r0, #0
   15528:	mov	r4, r1
   1552c:	add	r6, r2, #19
   15530:	strb	r0, [r2, #20]
   15534:	mov	r0, r5
   15538:	mov	r1, r4
   1553c:	mov	r2, #10
   15540:	mov	r3, #0
   15544:	bl	19dec <__assert_fail@plt+0x86d8>
   15548:	add	r2, r0, r0, lsl #2
   1554c:	sub	r2, r5, r2, lsl #1
   15550:	orr	r2, r2, #48	; 0x30
   15554:	strb	r2, [r6], #-1
   15558:	rsbs	r2, r5, #9
   1555c:	mov	r5, r0
   15560:	rscs	r2, r4, #0
   15564:	mov	r4, r1
   15568:	bcc	15534 <__assert_fail@plt+0x3e20>
   1556c:	add	r0, r6, #1
   15570:	pop	{r4, r5, r6, sl, fp, pc}
   15574:	push	{r4, r5, fp, lr}
   15578:	add	fp, sp, #8
   1557c:	cmp	r0, #0
   15580:	beq	15614 <__assert_fail@plt+0x3f00>
   15584:	mov	r1, #47	; 0x2f
   15588:	mov	r4, r0
   1558c:	bl	1169c <strrchr@plt>
   15590:	cmp	r0, #0
   15594:	mov	r5, r4
   15598:	addne	r5, r0, #1
   1559c:	sub	r0, r5, r4
   155a0:	cmp	r0, #7
   155a4:	blt	155f8 <__assert_fail@plt+0x3ee4>
   155a8:	movw	r1, #45623	; 0xb237
   155ac:	sub	r0, r5, #7
   155b0:	mov	r2, #7
   155b4:	movt	r1, #1
   155b8:	bl	116e4 <strncmp@plt>
   155bc:	cmp	r0, #0
   155c0:	bne	155f8 <__assert_fail@plt+0x3ee4>
   155c4:	movw	r1, #45631	; 0xb23f
   155c8:	mov	r0, r5
   155cc:	mov	r2, #3
   155d0:	movt	r1, #1
   155d4:	bl	116e4 <strncmp@plt>
   155d8:	cmp	r0, #0
   155dc:	beq	155e8 <__assert_fail@plt+0x3ed4>
   155e0:	mov	r4, r5
   155e4:	b	155f8 <__assert_fail@plt+0x3ee4>
   155e8:	movw	r0, #50000	; 0xc350
   155ec:	add	r4, r5, #3
   155f0:	movt	r0, #2
   155f4:	str	r4, [r0]
   155f8:	movw	r0, #50004	; 0xc354
   155fc:	movt	r0, #2
   15600:	str	r4, [r0]
   15604:	movw	r0, #50468	; 0xc524
   15608:	movt	r0, #2
   1560c:	str	r4, [r0]
   15610:	pop	{r4, r5, fp, pc}
   15614:	movw	r0, #50016	; 0xc360
   15618:	mov	r1, #55	; 0x37
   1561c:	mov	r2, #1
   15620:	movt	r0, #2
   15624:	ldr	r3, [r0]
   15628:	movw	r0, #45567	; 0xb1ff
   1562c:	movt	r0, #1
   15630:	bl	114a4 <fwrite@plt>
   15634:	bl	116f0 <abort@plt>
   15638:	push	{r4, r5, r6, sl, fp, lr}
   1563c:	add	fp, sp, #16
   15640:	mov	r4, r0
   15644:	movw	r0, #50472	; 0xc528
   15648:	movt	r0, #2
   1564c:	cmp	r4, #0
   15650:	moveq	r4, r0
   15654:	bl	115d0 <__errno_location@plt>
   15658:	ldr	r6, [r0]
   1565c:	mov	r5, r0
   15660:	mov	r0, r4
   15664:	mov	r1, #48	; 0x30
   15668:	bl	189f0 <__assert_fail@plt+0x72dc>
   1566c:	str	r6, [r5]
   15670:	pop	{r4, r5, r6, sl, fp, pc}
   15674:	movw	r1, #50472	; 0xc528
   15678:	cmp	r0, #0
   1567c:	movt	r1, #2
   15680:	movne	r1, r0
   15684:	ldr	r0, [r1]
   15688:	bx	lr
   1568c:	movw	r2, #50472	; 0xc528
   15690:	cmp	r0, #0
   15694:	movt	r2, #2
   15698:	movne	r2, r0
   1569c:	str	r1, [r2]
   156a0:	bx	lr
   156a4:	movw	r3, #50472	; 0xc528
   156a8:	cmp	r0, #0
   156ac:	and	r2, r2, #1
   156b0:	movt	r3, #2
   156b4:	movne	r3, r0
   156b8:	ubfx	r0, r1, #5, #3
   156bc:	and	r1, r1, #31
   156c0:	add	ip, r3, r0, lsl #2
   156c4:	mov	r0, #1
   156c8:	ldr	r3, [ip, #8]
   156cc:	and	r0, r0, r3, lsr r1
   156d0:	eor	r2, r0, r2
   156d4:	eor	r1, r3, r2, lsl r1
   156d8:	str	r1, [ip, #8]
   156dc:	bx	lr
   156e0:	movw	r2, #50472	; 0xc528
   156e4:	cmp	r0, #0
   156e8:	movt	r2, #2
   156ec:	movne	r2, r0
   156f0:	ldr	r0, [r2, #4]
   156f4:	str	r1, [r2, #4]
   156f8:	bx	lr
   156fc:	push	{fp, lr}
   15700:	mov	fp, sp
   15704:	movw	r3, #50472	; 0xc528
   15708:	cmp	r0, #0
   1570c:	movt	r3, #2
   15710:	movne	r3, r0
   15714:	cmp	r1, #0
   15718:	mov	r0, #10
   1571c:	cmpne	r2, #0
   15720:	str	r0, [r3]
   15724:	bne	1572c <__assert_fail@plt+0x4018>
   15728:	bl	116f0 <abort@plt>
   1572c:	str	r1, [r3, #40]	; 0x28
   15730:	str	r2, [r3, #44]	; 0x2c
   15734:	pop	{fp, pc}
   15738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1573c:	add	fp, sp, #28
   15740:	sub	sp, sp, #20
   15744:	mov	r7, r0
   15748:	ldr	r0, [fp, #8]
   1574c:	movw	r5, #50472	; 0xc528
   15750:	mov	r8, r3
   15754:	mov	r9, r2
   15758:	mov	sl, r1
   1575c:	movt	r5, #2
   15760:	cmp	r0, #0
   15764:	movne	r5, r0
   15768:	bl	115d0 <__errno_location@plt>
   1576c:	ldr	r2, [r5, #40]	; 0x28
   15770:	ldr	r3, [r5, #44]	; 0x2c
   15774:	mov	r4, r0
   15778:	ldm	r5, {r0, r1}
   1577c:	add	r5, r5, #8
   15780:	ldr	r6, [r4]
   15784:	stm	sp, {r0, r1, r5}
   15788:	mov	r0, r7
   1578c:	mov	r1, sl
   15790:	str	r2, [sp, #12]
   15794:	str	r3, [sp, #16]
   15798:	mov	r2, r9
   1579c:	mov	r3, r8
   157a0:	bl	157b0 <__assert_fail@plt+0x409c>
   157a4:	str	r6, [r4]
   157a8:	sub	sp, fp, #28
   157ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157b4:	add	fp, sp, #28
   157b8:	sub	sp, sp, #156	; 0x9c
   157bc:	str	r0, [fp, #-84]	; 0xffffffac
   157c0:	add	r0, r2, #1
   157c4:	mov	r6, r1
   157c8:	mov	r7, r3
   157cc:	str	r2, [fp, #-80]	; 0xffffffb0
   157d0:	str	r0, [sp, #80]	; 0x50
   157d4:	ldr	r0, [fp, #12]
   157d8:	and	r1, r0, #1
   157dc:	str	r1, [sp, #36]	; 0x24
   157e0:	and	r1, r0, #4
   157e4:	str	r1, [sp, #32]
   157e8:	ubfx	r8, r0, #1, #1
   157ec:	bl	114c8 <__ctype_get_mb_cur_max@plt>
   157f0:	str	r0, [sp, #40]	; 0x28
   157f4:	ldr	r0, [fp, #24]
   157f8:	ldr	r4, [fp, #8]
   157fc:	mov	r1, #0
   15800:	str	r1, [fp, #-52]	; 0xffffffcc
   15804:	mov	r1, #0
   15808:	str	r1, [sp, #60]	; 0x3c
   1580c:	mov	r1, #1
   15810:	str	r1, [sp, #84]	; 0x54
   15814:	str	r0, [sp, #76]	; 0x4c
   15818:	ldr	r0, [fp, #20]
   1581c:	str	r0, [sp, #72]	; 0x48
   15820:	mov	r0, #0
   15824:	str	r0, [sp, #56]	; 0x38
   15828:	mov	r0, #0
   1582c:	str	r0, [fp, #-88]	; 0xffffffa8
   15830:	mov	r0, #0
   15834:	str	r0, [fp, #-72]	; 0xffffffb8
   15838:	mov	r0, #0
   1583c:	cmp	r4, #10
   15840:	bhi	16b5c <__assert_fail@plt+0x5448>
   15844:	add	r1, pc, #24
   15848:	ldr	ip, [fp, #-84]	; 0xffffffac
   1584c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15850:	mov	r5, r6
   15854:	mov	r9, #0
   15858:	mov	r2, #1
   1585c:	mov	r3, #0
   15860:	ldr	pc, [r1, r4, lsl #2]
   15864:	andeq	r5, r1, ip, lsr #18
   15868:	andeq	r5, r1, r8, ror #18
   1586c:	andeq	r5, r1, ip, lsr r9
   15870:	andeq	r5, r1, r4, lsr #18
   15874:	andeq	r5, r1, ip, asr r9
   15878:	andeq	r5, r1, r0, asr #19
   1587c:	andeq	r5, r1, ip, asr #18
   15880:	andeq	r5, r1, r8, lsr ip
   15884:	muleq	r1, r0, r8
   15888:	muleq	r1, r0, r8
   1588c:	andeq	r5, r1, r8, asr #21
   15890:	movw	r6, #45711	; 0xb28f
   15894:	mov	r0, #0
   15898:	mov	r2, #5
   1589c:	movt	r6, #1
   158a0:	mov	r1, r6
   158a4:	bl	11444 <dcgettext@plt>
   158a8:	cmp	r0, r6
   158ac:	str	r0, [sp, #72]	; 0x48
   158b0:	bne	15aa0 <__assert_fail@plt+0x438c>
   158b4:	bl	19a1c <__assert_fail@plt+0x8308>
   158b8:	ldrb	r1, [r0]
   158bc:	and	r1, r1, #223	; 0xdf
   158c0:	cmp	r1, #71	; 0x47
   158c4:	beq	15a20 <__assert_fail@plt+0x430c>
   158c8:	cmp	r1, #85	; 0x55
   158cc:	bne	15a84 <__assert_fail@plt+0x4370>
   158d0:	ldrb	r1, [r0, #1]
   158d4:	and	r1, r1, #223	; 0xdf
   158d8:	cmp	r1, #84	; 0x54
   158dc:	bne	15a84 <__assert_fail@plt+0x4370>
   158e0:	ldrb	r1, [r0, #2]
   158e4:	and	r1, r1, #223	; 0xdf
   158e8:	cmp	r1, #70	; 0x46
   158ec:	bne	15a84 <__assert_fail@plt+0x4370>
   158f0:	ldrb	r1, [r0, #3]
   158f4:	cmp	r1, #45	; 0x2d
   158f8:	bne	15a84 <__assert_fail@plt+0x4370>
   158fc:	ldrb	r1, [r0, #4]
   15900:	cmp	r1, #56	; 0x38
   15904:	bne	15a84 <__assert_fail@plt+0x4370>
   15908:	ldrb	r0, [r0, #5]
   1590c:	cmp	r0, #0
   15910:	movw	r0, #45715	; 0xb293
   15914:	movt	r0, #1
   15918:	str	r0, [sp, #72]	; 0x48
   1591c:	bne	15a84 <__assert_fail@plt+0x4370>
   15920:	b	15aa0 <__assert_fail@plt+0x438c>
   15924:	mov	r0, #1
   15928:	b	15968 <__assert_fail@plt+0x4254>
   1592c:	mov	r4, #0
   15930:	mov	r9, #0
   15934:	mov	r2, r0
   15938:	b	159b8 <__assert_fail@plt+0x42a4>
   1593c:	tst	r8, #1
   15940:	bne	15968 <__assert_fail@plt+0x4254>
   15944:	mov	r2, r0
   15948:	b	15990 <__assert_fail@plt+0x427c>
   1594c:	mov	r0, #1
   15950:	mov	r9, #0
   15954:	mov	r4, #5
   15958:	b	159d4 <__assert_fail@plt+0x42c0>
   1595c:	mov	r2, #1
   15960:	tst	r8, #1
   15964:	beq	15990 <__assert_fail@plt+0x427c>
   15968:	mov	r1, #1
   1596c:	mov	r9, #0
   15970:	mov	r4, #2
   15974:	mov	r2, r0
   15978:	mov	r3, #1
   1597c:	str	r1, [fp, #-72]	; 0xffffffb8
   15980:	movw	r1, #45713	; 0xb291
   15984:	movt	r1, #1
   15988:	str	r1, [fp, #-88]	; 0xffffffa8
   1598c:	b	15c38 <__assert_fail@plt+0x4524>
   15990:	cmp	r5, #0
   15994:	mov	r9, #1
   15998:	mov	r4, #2
   1599c:	movne	r0, #39	; 0x27
   159a0:	strbne	r0, [ip]
   159a4:	movw	r0, #45713	; 0xb291
   159a8:	movt	r0, #1
   159ac:	str	r0, [fp, #-88]	; 0xffffffa8
   159b0:	mov	r0, #1
   159b4:	str	r0, [fp, #-72]	; 0xffffffb8
   159b8:	mov	r3, #0
   159bc:	b	15c38 <__assert_fail@plt+0x4524>
   159c0:	mov	r4, #5
   159c4:	tst	r8, #1
   159c8:	beq	159f0 <__assert_fail@plt+0x42dc>
   159cc:	mov	r0, #1
   159d0:	mov	r9, #0
   159d4:	str	r0, [fp, #-72]	; 0xffffffb8
   159d8:	movw	r0, #44808	; 0xaf08
   159dc:	mov	r2, #1
   159e0:	mov	r3, #1
   159e4:	movt	r0, #1
   159e8:	str	r0, [fp, #-88]	; 0xffffffa8
   159ec:	b	15c38 <__assert_fail@plt+0x4524>
   159f0:	cmp	r5, #0
   159f4:	mov	r3, #0
   159f8:	mov	r9, #1
   159fc:	mov	r2, #1
   15a00:	movne	r0, #34	; 0x22
   15a04:	strbne	r0, [ip]
   15a08:	movw	r0, #44808	; 0xaf08
   15a0c:	movt	r0, #1
   15a10:	str	r0, [fp, #-88]	; 0xffffffa8
   15a14:	mov	r0, #1
   15a18:	str	r0, [fp, #-72]	; 0xffffffb8
   15a1c:	b	15c38 <__assert_fail@plt+0x4524>
   15a20:	ldrb	r1, [r0, #1]
   15a24:	and	r1, r1, #223	; 0xdf
   15a28:	cmp	r1, #66	; 0x42
   15a2c:	bne	15a84 <__assert_fail@plt+0x4370>
   15a30:	ldrb	r1, [r0, #2]
   15a34:	cmp	r1, #49	; 0x31
   15a38:	bne	15a84 <__assert_fail@plt+0x4370>
   15a3c:	ldrb	r1, [r0, #3]
   15a40:	cmp	r1, #56	; 0x38
   15a44:	bne	15a84 <__assert_fail@plt+0x4370>
   15a48:	ldrb	r1, [r0, #4]
   15a4c:	cmp	r1, #48	; 0x30
   15a50:	bne	15a84 <__assert_fail@plt+0x4370>
   15a54:	ldrb	r1, [r0, #5]
   15a58:	cmp	r1, #51	; 0x33
   15a5c:	bne	15a84 <__assert_fail@plt+0x4370>
   15a60:	ldrb	r1, [r0, #6]
   15a64:	cmp	r1, #48	; 0x30
   15a68:	bne	15a84 <__assert_fail@plt+0x4370>
   15a6c:	ldrb	r0, [r0, #7]
   15a70:	cmp	r0, #0
   15a74:	movw	r0, #45723	; 0xb29b
   15a78:	movt	r0, #1
   15a7c:	str	r0, [sp, #72]	; 0x48
   15a80:	beq	15aa0 <__assert_fail@plt+0x438c>
   15a84:	movw	r1, #44808	; 0xaf08
   15a88:	movw	r0, #45713	; 0xb291
   15a8c:	cmp	r4, #9
   15a90:	movt	r1, #1
   15a94:	movt	r0, #1
   15a98:	moveq	r0, r1
   15a9c:	str	r0, [sp, #72]	; 0x48
   15aa0:	movw	r6, #45713	; 0xb291
   15aa4:	mov	r0, #0
   15aa8:	mov	r2, #5
   15aac:	movt	r6, #1
   15ab0:	mov	r1, r6
   15ab4:	bl	11444 <dcgettext@plt>
   15ab8:	cmp	r0, r6
   15abc:	str	r0, [sp, #76]	; 0x4c
   15ac0:	beq	15b0c <__assert_fail@plt+0x43f8>
   15ac4:	ldr	ip, [fp, #-84]	; 0xffffffac
   15ac8:	mov	r9, #0
   15acc:	tst	r8, #1
   15ad0:	bne	15c14 <__assert_fail@plt+0x4500>
   15ad4:	ldr	r0, [sp, #72]	; 0x48
   15ad8:	ldrb	r0, [r0]
   15adc:	cmp	r0, #0
   15ae0:	beq	15c14 <__assert_fail@plt+0x4500>
   15ae4:	ldr	r1, [sp, #72]	; 0x48
   15ae8:	mov	r9, #0
   15aec:	add	r1, r1, #1
   15af0:	cmp	r9, r5
   15af4:	strbcc	r0, [ip, r9]
   15af8:	ldrb	r0, [r1, r9]
   15afc:	add	r9, r9, #1
   15b00:	cmp	r0, #0
   15b04:	bne	15af0 <__assert_fail@plt+0x43dc>
   15b08:	b	15c14 <__assert_fail@plt+0x4500>
   15b0c:	bl	19a1c <__assert_fail@plt+0x8308>
   15b10:	ldrb	r1, [r0]
   15b14:	and	r1, r1, #223	; 0xdf
   15b18:	cmp	r1, #71	; 0x47
   15b1c:	beq	15b8c <__assert_fail@plt+0x4478>
   15b20:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b24:	cmp	r1, #85	; 0x55
   15b28:	bne	15be8 <__assert_fail@plt+0x44d4>
   15b2c:	ldrb	r1, [r0, #1]
   15b30:	and	r1, r1, #223	; 0xdf
   15b34:	cmp	r1, #84	; 0x54
   15b38:	bne	15be8 <__assert_fail@plt+0x44d4>
   15b3c:	ldrb	r1, [r0, #2]
   15b40:	and	r1, r1, #223	; 0xdf
   15b44:	cmp	r1, #70	; 0x46
   15b48:	bne	15be8 <__assert_fail@plt+0x44d4>
   15b4c:	ldrb	r1, [r0, #3]
   15b50:	cmp	r1, #45	; 0x2d
   15b54:	bne	15be8 <__assert_fail@plt+0x44d4>
   15b58:	ldrb	r1, [r0, #4]
   15b5c:	cmp	r1, #56	; 0x38
   15b60:	bne	15be8 <__assert_fail@plt+0x44d4>
   15b64:	ldrb	r0, [r0, #5]
   15b68:	cmp	r0, #0
   15b6c:	bne	15be8 <__assert_fail@plt+0x44d4>
   15b70:	movw	r0, #45719	; 0xb297
   15b74:	movt	r0, #1
   15b78:	str	r0, [sp, #76]	; 0x4c
   15b7c:	mov	r9, #0
   15b80:	tst	r8, #1
   15b84:	beq	15ad4 <__assert_fail@plt+0x43c0>
   15b88:	b	15c14 <__assert_fail@plt+0x4500>
   15b8c:	ldrb	r1, [r0, #1]
   15b90:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b94:	and	r1, r1, #223	; 0xdf
   15b98:	cmp	r1, #66	; 0x42
   15b9c:	bne	15be8 <__assert_fail@plt+0x44d4>
   15ba0:	ldrb	r1, [r0, #2]
   15ba4:	cmp	r1, #49	; 0x31
   15ba8:	bne	15be8 <__assert_fail@plt+0x44d4>
   15bac:	ldrb	r1, [r0, #3]
   15bb0:	cmp	r1, #56	; 0x38
   15bb4:	bne	15be8 <__assert_fail@plt+0x44d4>
   15bb8:	ldrb	r1, [r0, #4]
   15bbc:	cmp	r1, #48	; 0x30
   15bc0:	bne	15be8 <__assert_fail@plt+0x44d4>
   15bc4:	ldrb	r1, [r0, #5]
   15bc8:	cmp	r1, #51	; 0x33
   15bcc:	bne	15be8 <__assert_fail@plt+0x44d4>
   15bd0:	ldrb	r1, [r0, #6]
   15bd4:	cmp	r1, #48	; 0x30
   15bd8:	bne	15be8 <__assert_fail@plt+0x44d4>
   15bdc:	ldrb	r0, [r0, #7]
   15be0:	cmp	r0, #0
   15be4:	beq	169fc <__assert_fail@plt+0x52e8>
   15be8:	movw	r0, #45713	; 0xb291
   15bec:	cmp	r4, #9
   15bf0:	movt	r0, #1
   15bf4:	mov	r1, r0
   15bf8:	movw	r0, #44808	; 0xaf08
   15bfc:	movt	r0, #1
   15c00:	moveq	r1, r0
   15c04:	str	r1, [sp, #76]	; 0x4c
   15c08:	mov	r9, #0
   15c0c:	tst	r8, #1
   15c10:	beq	15ad4 <__assert_fail@plt+0x43c0>
   15c14:	ldr	r6, [sp, #76]	; 0x4c
   15c18:	mov	r0, r6
   15c1c:	bl	11588 <strlen@plt>
   15c20:	ldr	ip, [fp, #-84]	; 0xffffffac
   15c24:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15c28:	str	r0, [fp, #-72]	; 0xffffffb8
   15c2c:	str	r6, [fp, #-88]	; 0xffffffa8
   15c30:	mov	r2, #1
   15c34:	mov	r3, r8
   15c38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c3c:	str	r4, [fp, #-64]	; 0xffffffc0
   15c40:	mov	sl, #0
   15c44:	str	r3, [fp, #-76]	; 0xffffffb4
   15c48:	str	r2, [sp, #88]	; 0x58
   15c4c:	cmp	r0, #0
   15c50:	movwne	r0, #1
   15c54:	and	r1, r0, r3
   15c58:	and	r1, r2, r1
   15c5c:	str	r1, [sp, #48]	; 0x30
   15c60:	sub	r1, r4, #2
   15c64:	clz	r1, r1
   15c68:	lsr	r1, r1, #5
   15c6c:	and	r1, r1, r3
   15c70:	str	r1, [sp, #44]	; 0x2c
   15c74:	subs	r1, r4, #2
   15c78:	eor	r4, r3, #1
   15c7c:	movwne	r1, #1
   15c80:	str	r4, [sp, #92]	; 0x5c
   15c84:	orr	r4, r1, r4
   15c88:	and	r1, r1, r2
   15c8c:	and	r0, r0, r1
   15c90:	str	r4, [sp, #64]	; 0x40
   15c94:	ldr	r4, [sp, #84]	; 0x54
   15c98:	str	r0, [fp, #-60]	; 0xffffffc4
   15c9c:	orr	r0, r1, r3
   15ca0:	ldr	r1, [fp, #16]
   15ca4:	eor	r0, r0, #1
   15ca8:	clz	r1, r1
   15cac:	lsr	r1, r1, #5
   15cb0:	orr	r0, r1, r0
   15cb4:	str	r0, [fp, #-68]	; 0xffffffbc
   15cb8:	eor	r0, r2, #1
   15cbc:	str	r0, [sp, #52]	; 0x34
   15cc0:	cmn	r7, #1
   15cc4:	beq	15cd4 <__assert_fail@plt+0x45c0>
   15cc8:	cmp	sl, r7
   15ccc:	bne	15ce0 <__assert_fail@plt+0x45cc>
   15cd0:	b	16974 <__assert_fail@plt+0x5260>
   15cd4:	ldrb	r0, [lr, sl]
   15cd8:	cmp	r0, #0
   15cdc:	beq	1697c <__assert_fail@plt+0x5268>
   15ce0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15ce4:	cmp	r0, #0
   15ce8:	beq	15d48 <__assert_fail@plt+0x4634>
   15cec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15cf0:	mov	r6, r5
   15cf4:	add	r5, sl, r0
   15cf8:	cmp	r0, #2
   15cfc:	bcc	15d68 <__assert_fail@plt+0x4654>
   15d00:	mov	r0, #0
   15d04:	cmn	r7, #1
   15d08:	str	r0, [fp, #-56]	; 0xffffffc8
   15d0c:	bne	15d24 <__assert_fail@plt+0x4610>
   15d10:	mov	r0, lr
   15d14:	bl	11588 <strlen@plt>
   15d18:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15d1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15d20:	mov	r7, r0
   15d24:	cmp	r5, r7
   15d28:	bls	15d78 <__assert_fail@plt+0x4664>
   15d2c:	mov	r0, #0
   15d30:	mov	r5, r6
   15d34:	str	r0, [fp, #-48]	; 0xffffffd0
   15d38:	ldrb	r6, [lr, sl]
   15d3c:	cmp	r6, #126	; 0x7e
   15d40:	bls	15dc8 <__assert_fail@plt+0x46b4>
   15d44:	b	16324 <__assert_fail@plt+0x4c10>
   15d48:	mov	r0, #0
   15d4c:	str	r0, [fp, #-56]	; 0xffffffc8
   15d50:	mov	r0, #0
   15d54:	str	r0, [fp, #-48]	; 0xffffffd0
   15d58:	ldrb	r6, [lr, sl]
   15d5c:	cmp	r6, #126	; 0x7e
   15d60:	bls	15dc8 <__assert_fail@plt+0x46b4>
   15d64:	b	16324 <__assert_fail@plt+0x4c10>
   15d68:	mov	r0, #0
   15d6c:	str	r0, [fp, #-56]	; 0xffffffc8
   15d70:	cmp	r5, r7
   15d74:	bhi	15d2c <__assert_fail@plt+0x4618>
   15d78:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15d7c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15d80:	add	r0, lr, sl
   15d84:	bl	1157c <bcmp@plt>
   15d88:	ldr	r2, [sp, #92]	; 0x5c
   15d8c:	cmp	r0, #0
   15d90:	mov	r1, r0
   15d94:	mov	r5, r6
   15d98:	movwne	r1, #1
   15d9c:	orr	r1, r1, r2
   15da0:	tst	r1, #1
   15da4:	beq	16a3c <__assert_fail@plt+0x5328>
   15da8:	ldr	ip, [fp, #-84]	; 0xffffffac
   15dac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15db0:	clz	r0, r0
   15db4:	lsr	r0, r0, #5
   15db8:	str	r0, [fp, #-48]	; 0xffffffd0
   15dbc:	ldrb	r6, [lr, sl]
   15dc0:	cmp	r6, #126	; 0x7e
   15dc4:	bhi	16324 <__assert_fail@plt+0x4c10>
   15dc8:	add	r3, pc, #16
   15dcc:	mov	r8, #1
   15dd0:	mov	r2, #110	; 0x6e
   15dd4:	mov	r0, #97	; 0x61
   15dd8:	mov	r1, #0
   15ddc:	ldr	pc, [r3, r6, lsl #2]
   15de0:	ldrdeq	r6, [r1], -ip
   15de4:	andeq	r6, r1, r4, lsr #6
   15de8:	andeq	r6, r1, r4, lsr #6
   15dec:	andeq	r6, r1, r4, lsr #6
   15df0:	andeq	r6, r1, r4, lsr #6
   15df4:	andeq	r6, r1, r4, lsr #6
   15df8:	andeq	r6, r1, r4, lsr #6
   15dfc:	ldrdeq	r6, [r1], -r8
   15e00:	strheq	r6, [r1], -ip
   15e04:	strheq	r6, [r1], -r4
   15e08:	andeq	r6, r1, r8, asr #1
   15e0c:	strdeq	r6, [r1], -r8
   15e10:	andeq	r6, r1, ip, lsr #1
   15e14:	andeq	r6, r1, r4, asr #1
   15e18:	andeq	r6, r1, r4, lsr #6
   15e1c:	andeq	r6, r1, r4, lsr #6
   15e20:	andeq	r6, r1, r4, lsr #6
   15e24:	andeq	r6, r1, r4, lsr #6
   15e28:	andeq	r6, r1, r4, lsr #6
   15e2c:	andeq	r6, r1, r4, lsr #6
   15e30:	andeq	r6, r1, r4, lsr #6
   15e34:	andeq	r6, r1, r4, lsr #6
   15e38:	andeq	r6, r1, r4, lsr #6
   15e3c:	andeq	r6, r1, r4, lsr #6
   15e40:	andeq	r6, r1, r4, lsr #6
   15e44:	andeq	r6, r1, r4, lsr #6
   15e48:	andeq	r6, r1, r4, lsr #6
   15e4c:	andeq	r6, r1, r4, lsr #6
   15e50:	andeq	r6, r1, r4, lsr #6
   15e54:	andeq	r6, r1, r4, lsr #6
   15e58:	andeq	r6, r1, r4, lsr #6
   15e5c:	andeq	r6, r1, r4, lsr #6
   15e60:	andeq	r6, r1, r0, asr r0
   15e64:	andeq	r6, r1, r4, asr r0
   15e68:	andeq	r6, r1, r4, asr r0
   15e6c:	andeq	r6, r1, r4, asr #32
   15e70:	andeq	r6, r1, r4, asr r0
   15e74:	ldrdeq	r5, [r1], -ip
   15e78:	andeq	r6, r1, r4, asr r0
   15e7c:	andeq	r6, r1, r0, lsl #4
   15e80:	andeq	r6, r1, r4, asr r0
   15e84:	andeq	r6, r1, r4, asr r0
   15e88:	andeq	r6, r1, r4, asr r0
   15e8c:	ldrdeq	r5, [r1], -ip
   15e90:	ldrdeq	r5, [r1], -ip
   15e94:	ldrdeq	r5, [r1], -ip
   15e98:	ldrdeq	r5, [r1], -ip
   15e9c:	ldrdeq	r5, [r1], -ip
   15ea0:	ldrdeq	r5, [r1], -ip
   15ea4:	ldrdeq	r5, [r1], -ip
   15ea8:	ldrdeq	r5, [r1], -ip
   15eac:	ldrdeq	r5, [r1], -ip
   15eb0:	ldrdeq	r5, [r1], -ip
   15eb4:	ldrdeq	r5, [r1], -ip
   15eb8:	ldrdeq	r5, [r1], -ip
   15ebc:	ldrdeq	r5, [r1], -ip
   15ec0:	ldrdeq	r5, [r1], -ip
   15ec4:	ldrdeq	r5, [r1], -ip
   15ec8:	ldrdeq	r5, [r1], -ip
   15ecc:	andeq	r6, r1, r4, asr r0
   15ed0:	andeq	r6, r1, r4, asr r0
   15ed4:	andeq	r6, r1, r4, asr r0
   15ed8:	andeq	r6, r1, r4, asr r0
   15edc:	andeq	r6, r1, r4, asr #3
   15ee0:	andeq	r6, r1, r4, lsr #6
   15ee4:	ldrdeq	r5, [r1], -ip
   15ee8:	ldrdeq	r5, [r1], -ip
   15eec:	ldrdeq	r5, [r1], -ip
   15ef0:	ldrdeq	r5, [r1], -ip
   15ef4:	ldrdeq	r5, [r1], -ip
   15ef8:	ldrdeq	r5, [r1], -ip
   15efc:	ldrdeq	r5, [r1], -ip
   15f00:	ldrdeq	r5, [r1], -ip
   15f04:	ldrdeq	r5, [r1], -ip
   15f08:	ldrdeq	r5, [r1], -ip
   15f0c:	ldrdeq	r5, [r1], -ip
   15f10:	ldrdeq	r5, [r1], -ip
   15f14:	ldrdeq	r5, [r1], -ip
   15f18:	ldrdeq	r5, [r1], -ip
   15f1c:	ldrdeq	r5, [r1], -ip
   15f20:	ldrdeq	r5, [r1], -ip
   15f24:	ldrdeq	r5, [r1], -ip
   15f28:	ldrdeq	r5, [r1], -ip
   15f2c:	ldrdeq	r5, [r1], -ip
   15f30:	ldrdeq	r5, [r1], -ip
   15f34:	ldrdeq	r5, [r1], -ip
   15f38:	ldrdeq	r5, [r1], -ip
   15f3c:	ldrdeq	r5, [r1], -ip
   15f40:	ldrdeq	r5, [r1], -ip
   15f44:	ldrdeq	r5, [r1], -ip
   15f48:	ldrdeq	r5, [r1], -ip
   15f4c:	andeq	r6, r1, r4, asr r0
   15f50:	andeq	r6, r1, r8, lsl #1
   15f54:	ldrdeq	r5, [r1], -ip
   15f58:	andeq	r6, r1, r4, asr r0
   15f5c:	ldrdeq	r5, [r1], -ip
   15f60:	andeq	r6, r1, r4, asr r0
   15f64:	ldrdeq	r5, [r1], -ip
   15f68:	ldrdeq	r5, [r1], -ip
   15f6c:	ldrdeq	r5, [r1], -ip
   15f70:	ldrdeq	r5, [r1], -ip
   15f74:	ldrdeq	r5, [r1], -ip
   15f78:	ldrdeq	r5, [r1], -ip
   15f7c:	ldrdeq	r5, [r1], -ip
   15f80:	ldrdeq	r5, [r1], -ip
   15f84:	ldrdeq	r5, [r1], -ip
   15f88:	ldrdeq	r5, [r1], -ip
   15f8c:	ldrdeq	r5, [r1], -ip
   15f90:	ldrdeq	r5, [r1], -ip
   15f94:	ldrdeq	r5, [r1], -ip
   15f98:	ldrdeq	r5, [r1], -ip
   15f9c:	ldrdeq	r5, [r1], -ip
   15fa0:	ldrdeq	r5, [r1], -ip
   15fa4:	ldrdeq	r5, [r1], -ip
   15fa8:	ldrdeq	r5, [r1], -ip
   15fac:	ldrdeq	r5, [r1], -ip
   15fb0:	ldrdeq	r5, [r1], -ip
   15fb4:	ldrdeq	r5, [r1], -ip
   15fb8:	ldrdeq	r5, [r1], -ip
   15fbc:	ldrdeq	r5, [r1], -ip
   15fc0:	ldrdeq	r5, [r1], -ip
   15fc4:	ldrdeq	r5, [r1], -ip
   15fc8:	ldrdeq	r5, [r1], -ip
   15fcc:	andeq	r6, r1, ip, lsl r0
   15fd0:	andeq	r6, r1, r4, asr r0
   15fd4:	andeq	r6, r1, ip, lsl r0
   15fd8:	andeq	r6, r1, r4, asr #32
   15fdc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15fe0:	tst	r0, #1
   15fe4:	bne	1629c <__assert_fail@plt+0x4b88>
   15fe8:	ldr	r1, [fp, #16]
   15fec:	ubfx	r0, r6, #5, #3
   15ff0:	mov	r2, #1
   15ff4:	ldr	r0, [r1, r0, lsl #2]
   15ff8:	and	r1, r6, #31
   15ffc:	tst	r0, r2, lsl r1
   16000:	beq	1629c <__assert_fail@plt+0x4b88>
   16004:	mov	r0, r6
   16008:	mov	r1, r8
   1600c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16010:	tst	r2, #1
   16014:	beq	162bc <__assert_fail@plt+0x4ba8>
   16018:	b	16a18 <__assert_fail@plt+0x5304>
   1601c:	cmp	r7, #1
   16020:	beq	16044 <__assert_fail@plt+0x4930>
   16024:	mov	r8, #0
   16028:	cmn	r7, #1
   1602c:	bne	16288 <__assert_fail@plt+0x4b74>
   16030:	ldrb	r0, [lr, #1]
   16034:	cmp	r0, #0
   16038:	beq	16044 <__assert_fail@plt+0x4930>
   1603c:	mvn	r7, #0
   16040:	b	16288 <__assert_fail@plt+0x4b74>
   16044:	mov	r8, #0
   16048:	cmp	sl, #0
   1604c:	bne	16288 <__assert_fail@plt+0x4b74>
   16050:	mov	r1, #1
   16054:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16058:	cmp	r0, #2
   1605c:	bne	16074 <__assert_fail@plt+0x4960>
   16060:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16064:	mov	r8, r1
   16068:	tst	r0, #1
   1606c:	beq	15fdc <__assert_fail@plt+0x48c8>
   16070:	b	16a18 <__assert_fail@plt+0x5304>
   16074:	mov	r8, r1
   16078:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1607c:	tst	r0, #1
   16080:	beq	15fe8 <__assert_fail@plt+0x48d4>
   16084:	b	1629c <__assert_fail@plt+0x4b88>
   16088:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1608c:	cmp	r0, #2
   16090:	bne	16350 <__assert_fail@plt+0x4c3c>
   16094:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16098:	tst	r0, #1
   1609c:	bne	16a18 <__assert_fail@plt+0x5304>
   160a0:	mov	r0, #0
   160a4:	str	r0, [fp, #-56]	; 0xffffffc8
   160a8:	b	16368 <__assert_fail@plt+0x4c54>
   160ac:	mov	r0, #102	; 0x66
   160b0:	b	163d8 <__assert_fail@plt+0x4cc4>
   160b4:	mov	r2, #116	; 0x74
   160b8:	b	160c8 <__assert_fail@plt+0x49b4>
   160bc:	mov	r0, #98	; 0x62
   160c0:	b	163d8 <__assert_fail@plt+0x4cc4>
   160c4:	mov	r2, #114	; 0x72
   160c8:	ldr	r0, [sp, #64]	; 0x40
   160cc:	tst	r0, #1
   160d0:	mov	r0, r2
   160d4:	bne	163d8 <__assert_fail@plt+0x4cc4>
   160d8:	b	16a18 <__assert_fail@plt+0x5304>
   160dc:	ldr	r0, [sp, #88]	; 0x58
   160e0:	tst	r0, #1
   160e4:	beq	163f8 <__assert_fail@plt+0x4ce4>
   160e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   160ec:	tst	r0, #1
   160f0:	bne	16b54 <__assert_fail@plt+0x5440>
   160f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   160f8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   160fc:	subs	r0, r0, #2
   16100:	movwne	r0, #1
   16104:	orr	r0, r0, r1
   16108:	tst	r0, #1
   1610c:	bne	16148 <__assert_fail@plt+0x4a34>
   16110:	cmp	r9, r5
   16114:	movcc	r0, #39	; 0x27
   16118:	strbcc	r0, [ip, r9]
   1611c:	add	r0, r9, #1
   16120:	cmp	r0, r5
   16124:	movcc	r1, #36	; 0x24
   16128:	strbcc	r1, [ip, r0]
   1612c:	add	r0, r9, #2
   16130:	add	r9, r9, #3
   16134:	cmp	r0, r5
   16138:	movcc	r1, #39	; 0x27
   1613c:	strbcc	r1, [ip, r0]
   16140:	mov	r0, #1
   16144:	str	r0, [fp, #-52]	; 0xffffffcc
   16148:	mov	r1, #1
   1614c:	cmp	r9, r5
   16150:	mov	r8, #0
   16154:	mov	r6, #48	; 0x30
   16158:	str	r1, [fp, #-56]	; 0xffffffc8
   1615c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16160:	movcc	r0, #92	; 0x5c
   16164:	strbcc	r0, [ip, r9]
   16168:	add	r0, r9, #1
   1616c:	cmp	r1, #2
   16170:	beq	165c4 <__assert_fail@plt+0x4eb0>
   16174:	add	r1, sl, #1
   16178:	cmp	r1, r7
   1617c:	bcs	165c4 <__assert_fail@plt+0x4eb0>
   16180:	ldrb	r1, [lr, r1]
   16184:	sub	r1, r1, #48	; 0x30
   16188:	uxtb	r1, r1
   1618c:	cmp	r1, #9
   16190:	bhi	165c4 <__assert_fail@plt+0x4eb0>
   16194:	cmp	r0, r5
   16198:	movcc	r1, #48	; 0x30
   1619c:	strbcc	r1, [ip, r0]
   161a0:	add	r0, r9, #2
   161a4:	add	r9, r9, #3
   161a8:	cmp	r0, r5
   161ac:	movcc	r1, #48	; 0x30
   161b0:	strbcc	r1, [ip, r0]
   161b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   161b8:	tst	r0, #1
   161bc:	beq	15fe8 <__assert_fail@plt+0x48d4>
   161c0:	b	1629c <__assert_fail@plt+0x4b88>
   161c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   161c8:	mov	r6, #63	; 0x3f
   161cc:	cmp	r0, #5
   161d0:	beq	165d8 <__assert_fail@plt+0x4ec4>
   161d4:	mov	r1, #0
   161d8:	cmp	r0, #2
   161dc:	str	r1, [fp, #-56]	; 0xffffffc8
   161e0:	bne	166a0 <__assert_fail@plt+0x4f8c>
   161e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   161e8:	mov	r8, #0
   161ec:	tst	r0, #1
   161f0:	beq	15fdc <__assert_fail@plt+0x48c8>
   161f4:	b	16a18 <__assert_fail@plt+0x5304>
   161f8:	mov	r0, #118	; 0x76
   161fc:	b	163d8 <__assert_fail@plt+0x4cc4>
   16200:	mov	r0, #1
   16204:	mov	r6, #39	; 0x27
   16208:	str	r0, [sp, #60]	; 0x3c
   1620c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16210:	cmp	r0, #2
   16214:	bne	16418 <__assert_fail@plt+0x4d04>
   16218:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1621c:	tst	r0, #1
   16220:	bne	16a18 <__assert_fail@plt+0x5304>
   16224:	ldr	r2, [sp, #56]	; 0x38
   16228:	clz	r1, r5
   1622c:	mov	r8, #1
   16230:	lsr	r1, r1, #5
   16234:	cmp	r2, #0
   16238:	mov	r0, r2
   1623c:	movwne	r0, #1
   16240:	orrs	r0, r0, r1
   16244:	moveq	r2, r5
   16248:	moveq	r5, r0
   1624c:	cmp	r9, r5
   16250:	str	r2, [sp, #56]	; 0x38
   16254:	movcc	r0, #39	; 0x27
   16258:	strbcc	r0, [ip, r9]
   1625c:	add	r0, r9, #1
   16260:	cmp	r0, r5
   16264:	movcc	r1, #92	; 0x5c
   16268:	strbcc	r1, [ip, r0]
   1626c:	add	r0, r9, #2
   16270:	add	r9, r9, #3
   16274:	cmp	r0, r5
   16278:	movcc	r1, #39	; 0x27
   1627c:	strbcc	r1, [ip, r0]
   16280:	mov	r0, #0
   16284:	str	r0, [fp, #-52]	; 0xffffffcc
   16288:	mov	r0, #0
   1628c:	str	r0, [fp, #-56]	; 0xffffffc8
   16290:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16294:	tst	r0, #1
   16298:	beq	15fe8 <__assert_fail@plt+0x48d4>
   1629c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   162a0:	mov	r1, r8
   162a4:	cmp	r0, #0
   162a8:	mov	r0, r6
   162ac:	beq	16370 <__assert_fail@plt+0x4c5c>
   162b0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   162b4:	tst	r2, #1
   162b8:	bne	16a18 <__assert_fail@plt+0x5304>
   162bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   162c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   162c4:	subs	r2, r2, #2
   162c8:	movwne	r2, #1
   162cc:	orr	r2, r2, r3
   162d0:	tst	r2, #1
   162d4:	bne	16310 <__assert_fail@plt+0x4bfc>
   162d8:	cmp	r9, r5
   162dc:	movcc	r2, #39	; 0x27
   162e0:	strbcc	r2, [ip, r9]
   162e4:	add	r2, r9, #1
   162e8:	cmp	r2, r5
   162ec:	movcc	r3, #36	; 0x24
   162f0:	strbcc	r3, [ip, r2]
   162f4:	add	r2, r9, #2
   162f8:	add	r9, r9, #3
   162fc:	cmp	r2, r5
   16300:	movcc	r3, #39	; 0x27
   16304:	strbcc	r3, [ip, r2]
   16308:	mov	r2, #1
   1630c:	str	r2, [fp, #-52]	; 0xffffffcc
   16310:	cmp	r9, r5
   16314:	movcc	r2, #92	; 0x5c
   16318:	strbcc	r2, [ip, r9]
   1631c:	add	r9, r9, #1
   16320:	b	163b8 <__assert_fail@plt+0x4ca4>
   16324:	ldr	r0, [sp, #40]	; 0x28
   16328:	cmp	r0, #1
   1632c:	bne	1642c <__assert_fail@plt+0x4d18>
   16330:	bl	11564 <__ctype_b_loc@plt>
   16334:	ldr	r0, [r0]
   16338:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1633c:	mov	r1, #1
   16340:	add	r0, r0, r6, lsl #1
   16344:	ldrb	r0, [r0, #1]
   16348:	ubfx	r8, r0, #6, #1
   1634c:	b	16784 <__assert_fail@plt+0x5070>
   16350:	ldr	r1, [sp, #48]	; 0x30
   16354:	mov	r0, #0
   16358:	str	r0, [fp, #-56]	; 0xffffffc8
   1635c:	mov	r0, #92	; 0x5c
   16360:	cmp	r1, #0
   16364:	beq	163d8 <__assert_fail@plt+0x4cc4>
   16368:	mov	r6, #92	; 0x5c
   1636c:	mov	r8, #0
   16370:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16374:	cmp	r0, #0
   16378:	bne	163b0 <__assert_fail@plt+0x4c9c>
   1637c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16380:	tst	r0, #1
   16384:	beq	163b0 <__assert_fail@plt+0x4c9c>
   16388:	cmp	r9, r5
   1638c:	movcc	r0, #39	; 0x27
   16390:	strbcc	r0, [ip, r9]
   16394:	add	r0, r9, #1
   16398:	add	r9, r9, #2
   1639c:	cmp	r0, r5
   163a0:	movcc	r1, #39	; 0x27
   163a4:	strbcc	r1, [ip, r0]
   163a8:	mov	r0, #0
   163ac:	str	r0, [fp, #-52]	; 0xffffffcc
   163b0:	mov	r1, r8
   163b4:	mov	r0, r6
   163b8:	cmp	r9, r5
   163bc:	and	r4, r4, r1
   163c0:	strbcc	r0, [ip, r9]
   163c4:	add	r9, r9, #1
   163c8:	add	sl, sl, #1
   163cc:	cmn	r7, #1
   163d0:	bne	15cc8 <__assert_fail@plt+0x45b4>
   163d4:	b	15cd4 <__assert_fail@plt+0x45c0>
   163d8:	mov	r1, #0
   163dc:	mov	r8, #0
   163e0:	str	r1, [fp, #-56]	; 0xffffffc8
   163e4:	ldr	r1, [sp, #88]	; 0x58
   163e8:	tst	r1, #1
   163ec:	mov	r1, #0
   163f0:	beq	15fdc <__assert_fail@plt+0x48c8>
   163f4:	b	162b0 <__assert_fail@plt+0x4b9c>
   163f8:	ldr	r0, [sp, #36]	; 0x24
   163fc:	mov	r6, #0
   16400:	mov	r8, #0
   16404:	cmp	r0, #0
   16408:	mov	r0, #0
   1640c:	str	r0, [fp, #-56]	; 0xffffffc8
   16410:	bne	163c8 <__assert_fail@plt+0x4cb4>
   16414:	b	15fdc <__assert_fail@plt+0x48c8>
   16418:	mov	r8, #1
   1641c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16420:	tst	r0, #1
   16424:	beq	15fe8 <__assert_fail@plt+0x48d4>
   16428:	b	1629c <__assert_fail@plt+0x4b88>
   1642c:	mov	r0, #0
   16430:	cmn	r7, #1
   16434:	str	r0, [fp, #-36]	; 0xffffffdc
   16438:	str	r0, [fp, #-40]	; 0xffffffd8
   1643c:	bne	16450 <__assert_fail@plt+0x4d3c>
   16440:	mov	r0, lr
   16444:	bl	11588 <strlen@plt>
   16448:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1644c:	mov	r7, r0
   16450:	ldr	r0, [sp, #44]	; 0x2c
   16454:	str	r4, [sp, #84]	; 0x54
   16458:	str	r5, [sp, #28]
   1645c:	cmp	r0, #0
   16460:	beq	166b4 <__assert_fail@plt+0x4fa0>
   16464:	ldr	r0, [sp, #80]	; 0x50
   16468:	mov	r8, #1
   1646c:	mov	r5, #0
   16470:	add	r0, r0, sl
   16474:	str	r0, [sp, #24]
   16478:	sub	r0, fp, #40	; 0x28
   1647c:	mov	r3, r0
   16480:	b	164bc <__assert_fail@plt+0x4da8>
   16484:	ldr	r5, [sp, #68]	; 0x44
   16488:	add	r5, r0, r5
   1648c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16490:	bl	11480 <iswprint@plt>
   16494:	cmp	r0, #0
   16498:	sub	r4, fp, #40	; 0x28
   1649c:	movwne	r0, #1
   164a0:	and	r8, r8, r0
   164a4:	mov	r0, r4
   164a8:	bl	11420 <mbsinit@plt>
   164ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   164b0:	mov	r3, r4
   164b4:	cmp	r0, #0
   164b8:	bne	16778 <__assert_fail@plt+0x5064>
   164bc:	str	r5, [sp, #68]	; 0x44
   164c0:	add	r5, r5, sl
   164c4:	sub	r0, fp, #44	; 0x2c
   164c8:	add	r1, lr, r5
   164cc:	sub	r2, r7, r5
   164d0:	bl	19a54 <__assert_fail@plt+0x8340>
   164d4:	cmn	r0, #2
   164d8:	beq	16738 <__assert_fail@plt+0x5024>
   164dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   164e0:	cmn	r0, #1
   164e4:	beq	1672c <__assert_fail@plt+0x5018>
   164e8:	cmp	r0, #0
   164ec:	beq	16730 <__assert_fail@plt+0x501c>
   164f0:	cmp	r0, #2
   164f4:	bcc	16484 <__assert_fail@plt+0x4d70>
   164f8:	ldr	r1, [sp, #68]	; 0x44
   164fc:	ldr	r2, [sp, #24]
   16500:	add	r1, r2, r1
   16504:	sub	r2, r0, #1
   16508:	ldrb	r3, [r1]
   1650c:	sub	r3, r3, #91	; 0x5b
   16510:	cmp	r3, #33	; 0x21
   16514:	bls	16534 <__assert_fail@plt+0x4e20>
   16518:	add	r1, r1, #1
   1651c:	subs	r2, r2, #1
   16520:	beq	16484 <__assert_fail@plt+0x4d70>
   16524:	ldrb	r3, [r1]
   16528:	sub	r3, r3, #91	; 0x5b
   1652c:	cmp	r3, #33	; 0x21
   16530:	bhi	16518 <__assert_fail@plt+0x4e04>
   16534:	add	r5, pc, #0
   16538:	ldr	pc, [r5, r3, lsl #2]
   1653c:	andeq	r6, r1, r0, asr sl
   16540:	andeq	r6, r1, r0, asr sl
   16544:	andeq	r6, r1, r8, lsl r5
   16548:	andeq	r6, r1, r0, asr sl
   1654c:	andeq	r6, r1, r8, lsl r5
   16550:	andeq	r6, r1, r0, asr sl
   16554:	andeq	r6, r1, r8, lsl r5
   16558:	andeq	r6, r1, r8, lsl r5
   1655c:	andeq	r6, r1, r8, lsl r5
   16560:	andeq	r6, r1, r8, lsl r5
   16564:	andeq	r6, r1, r8, lsl r5
   16568:	andeq	r6, r1, r8, lsl r5
   1656c:	andeq	r6, r1, r8, lsl r5
   16570:	andeq	r6, r1, r8, lsl r5
   16574:	andeq	r6, r1, r8, lsl r5
   16578:	andeq	r6, r1, r8, lsl r5
   1657c:	andeq	r6, r1, r8, lsl r5
   16580:	andeq	r6, r1, r8, lsl r5
   16584:	andeq	r6, r1, r8, lsl r5
   16588:	andeq	r6, r1, r8, lsl r5
   1658c:	andeq	r6, r1, r8, lsl r5
   16590:	andeq	r6, r1, r8, lsl r5
   16594:	andeq	r6, r1, r8, lsl r5
   16598:	andeq	r6, r1, r8, lsl r5
   1659c:	andeq	r6, r1, r8, lsl r5
   165a0:	andeq	r6, r1, r8, lsl r5
   165a4:	andeq	r6, r1, r8, lsl r5
   165a8:	andeq	r6, r1, r8, lsl r5
   165ac:	andeq	r6, r1, r8, lsl r5
   165b0:	andeq	r6, r1, r8, lsl r5
   165b4:	andeq	r6, r1, r8, lsl r5
   165b8:	andeq	r6, r1, r8, lsl r5
   165bc:	andeq	r6, r1, r8, lsl r5
   165c0:	andeq	r6, r1, r0, asr sl
   165c4:	mov	r9, r0
   165c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   165cc:	tst	r0, #1
   165d0:	beq	15fe8 <__assert_fail@plt+0x48d4>
   165d4:	b	1629c <__assert_fail@plt+0x4b88>
   165d8:	mov	r0, #0
   165dc:	str	r0, [fp, #-56]	; 0xffffffc8
   165e0:	ldr	r0, [sp, #32]
   165e4:	cmp	r0, #0
   165e8:	beq	166a0 <__assert_fail@plt+0x4f8c>
   165ec:	add	r0, sl, #2
   165f0:	mov	r1, r7
   165f4:	cmp	r0, r7
   165f8:	bcs	166a0 <__assert_fail@plt+0x4f8c>
   165fc:	add	r1, sl, lr
   16600:	ldrb	r1, [r1, #1]
   16604:	cmp	r1, #63	; 0x3f
   16608:	bne	166a0 <__assert_fail@plt+0x4f8c>
   1660c:	ldrb	r8, [lr, r0]
   16610:	sub	r2, r8, #33	; 0x21
   16614:	cmp	r2, #29
   16618:	bhi	166a0 <__assert_fail@plt+0x4f8c>
   1661c:	mov	r1, r4
   16620:	movw	r4, #20929	; 0x51c1
   16624:	mov	r3, #1
   16628:	movt	r4, #14336	; 0x3800
   1662c:	tst	r4, r3, lsl r2
   16630:	beq	1695c <__assert_fail@plt+0x5248>
   16634:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16638:	tst	r2, #1
   1663c:	bne	16a18 <__assert_fail@plt+0x5304>
   16640:	cmp	r9, r5
   16644:	mov	r6, r8
   16648:	mov	r4, r1
   1664c:	mov	sl, r0
   16650:	mov	r8, #0
   16654:	movcc	r2, #63	; 0x3f
   16658:	strbcc	r2, [ip, r9]
   1665c:	add	r2, r9, #1
   16660:	cmp	r2, r5
   16664:	movcc	r3, #34	; 0x22
   16668:	strbcc	r3, [ip, r2]
   1666c:	add	r2, r9, #2
   16670:	cmp	r2, r5
   16674:	movcc	r3, #34	; 0x22
   16678:	strbcc	r3, [ip, r2]
   1667c:	add	r2, r9, #3
   16680:	add	r9, r9, #4
   16684:	cmp	r2, r5
   16688:	movcc	r3, #63	; 0x3f
   1668c:	strbcc	r3, [ip, r2]
   16690:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16694:	tst	r0, #1
   16698:	beq	15fe8 <__assert_fail@plt+0x48d4>
   1669c:	b	1629c <__assert_fail@plt+0x4b88>
   166a0:	mov	r8, #0
   166a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   166a8:	tst	r0, #1
   166ac:	beq	15fe8 <__assert_fail@plt+0x48d4>
   166b0:	b	1629c <__assert_fail@plt+0x4b88>
   166b4:	mov	r8, #1
   166b8:	mov	r5, #0
   166bc:	sub	r4, fp, #40	; 0x28
   166c0:	str	r5, [sp, #68]	; 0x44
   166c4:	add	r5, r5, sl
   166c8:	sub	r0, fp, #44	; 0x2c
   166cc:	mov	r3, r4
   166d0:	add	r1, lr, r5
   166d4:	sub	r2, r7, r5
   166d8:	bl	19a54 <__assert_fail@plt+0x8340>
   166dc:	cmn	r0, #2
   166e0:	beq	16738 <__assert_fail@plt+0x5024>
   166e4:	cmn	r0, #1
   166e8:	beq	1672c <__assert_fail@plt+0x5018>
   166ec:	ldr	r5, [sp, #68]	; 0x44
   166f0:	cmp	r0, #0
   166f4:	beq	16774 <__assert_fail@plt+0x5060>
   166f8:	add	r5, r0, r5
   166fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16700:	bl	11480 <iswprint@plt>
   16704:	cmp	r0, #0
   16708:	sub	r4, fp, #40	; 0x28
   1670c:	movwne	r0, #1
   16710:	and	r8, r8, r0
   16714:	mov	r0, r4
   16718:	bl	11420 <mbsinit@plt>
   1671c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16720:	cmp	r0, #0
   16724:	beq	166c0 <__assert_fail@plt+0x4fac>
   16728:	b	16778 <__assert_fail@plt+0x5064>
   1672c:	mov	r8, #0
   16730:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16734:	b	1676c <__assert_fail@plt+0x5058>
   16738:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1673c:	mov	r8, #0
   16740:	cmp	r5, r7
   16744:	bcs	1676c <__assert_fail@plt+0x5058>
   16748:	ldrb	r0, [lr, r5]
   1674c:	cmp	r0, #0
   16750:	beq	1676c <__assert_fail@plt+0x5058>
   16754:	ldr	r0, [sp, #68]	; 0x44
   16758:	add	r0, r0, #1
   1675c:	add	r5, r0, sl
   16760:	str	r0, [sp, #68]	; 0x44
   16764:	cmp	r5, r7
   16768:	bcc	16748 <__assert_fail@plt+0x5034>
   1676c:	ldr	r5, [sp, #68]	; 0x44
   16770:	b	16778 <__assert_fail@plt+0x5064>
   16774:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16778:	mov	r1, r5
   1677c:	ldr	r5, [sp, #28]
   16780:	ldr	r4, [sp, #84]	; 0x54
   16784:	ldr	r0, [sp, #52]	; 0x34
   16788:	ldr	ip, [fp, #-84]	; 0xffffffac
   1678c:	cmp	r1, #1
   16790:	orr	r2, r8, r0
   16794:	mov	r0, r1
   16798:	bhi	167a4 <__assert_fail@plt+0x5090>
   1679c:	tst	r2, #1
   167a0:	bne	15fdc <__assert_fail@plt+0x48c8>
   167a4:	add	r0, r0, sl
   167a8:	str	r2, [sp, #84]	; 0x54
   167ac:	str	r0, [fp, #-56]	; 0xffffffc8
   167b0:	mov	r0, #0
   167b4:	tst	r2, #1
   167b8:	bne	16898 <__assert_fail@plt+0x5184>
   167bc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   167c0:	tst	r1, #1
   167c4:	bne	16a18 <__assert_fail@plt+0x5304>
   167c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   167cc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   167d0:	subs	r2, r1, #2
   167d4:	movwne	r2, #1
   167d8:	orr	r2, r2, r0
   167dc:	tst	r2, #1
   167e0:	bne	1681c <__assert_fail@plt+0x5108>
   167e4:	cmp	r9, r5
   167e8:	add	r2, r9, #1
   167ec:	mov	r0, #1
   167f0:	movcc	r1, #39	; 0x27
   167f4:	str	r0, [fp, #-52]	; 0xffffffcc
   167f8:	strbcc	r1, [ip, r9]
   167fc:	cmp	r2, r5
   16800:	movcc	r1, #36	; 0x24
   16804:	strbcc	r1, [ip, r2]
   16808:	add	r2, r9, #2
   1680c:	add	r9, r9, #3
   16810:	cmp	r2, r5
   16814:	movcc	r1, #39	; 0x27
   16818:	strbcc	r1, [ip, r2]
   1681c:	cmp	r9, r5
   16820:	add	r2, r9, #1
   16824:	movcc	r1, #92	; 0x5c
   16828:	strbcc	r1, [ip, r9]
   1682c:	cmp	r2, r5
   16830:	bcs	16844 <__assert_fail@plt+0x5130>
   16834:	uxtb	r3, r6
   16838:	mov	r1, #48	; 0x30
   1683c:	orr	r3, r1, r3, lsr #6
   16840:	strb	r3, [ip, r2]
   16844:	add	r2, r9, #2
   16848:	add	r9, r9, #3
   1684c:	cmp	r2, r5
   16850:	lsrcc	r3, r6, #3
   16854:	movcc	r1, #6
   16858:	bficc	r3, r1, #3, #29
   1685c:	mov	r1, #6
   16860:	bfi	r6, r1, #3, #29
   16864:	strbcc	r3, [ip, r2]
   16868:	mov	r2, #1
   1686c:	b	168cc <__assert_fail@plt+0x51b8>
   16870:	ldr	r1, [sp, #80]	; 0x50
   16874:	cmp	r9, r2
   16878:	mov	r5, r2
   1687c:	ldr	r2, [sp, #84]	; 0x54
   16880:	strbcc	r6, [ip, r9]
   16884:	add	r9, r9, #1
   16888:	ldrb	r6, [r1, sl]
   1688c:	mov	sl, r3
   16890:	tst	r2, #1
   16894:	beq	167bc <__assert_fail@plt+0x50a8>
   16898:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1689c:	tst	r1, #1
   168a0:	beq	168c0 <__assert_fail@plt+0x51ac>
   168a4:	cmp	r9, r5
   168a8:	mov	r2, r0
   168ac:	movcc	r1, #92	; 0x5c
   168b0:	strbcc	r1, [ip, r9]
   168b4:	add	r9, r9, #1
   168b8:	mov	r1, #0
   168bc:	b	168c8 <__assert_fail@plt+0x51b4>
   168c0:	mov	r1, #0
   168c4:	mov	r2, r0
   168c8:	str	r1, [fp, #-48]	; 0xffffffd0
   168cc:	mov	r0, r2
   168d0:	and	r1, r2, #1
   168d4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   168d8:	add	r3, sl, #1
   168dc:	cmp	r2, r3
   168e0:	bls	16940 <__assert_fail@plt+0x522c>
   168e4:	mov	r2, r5
   168e8:	ldr	r5, [fp, #-52]	; 0xffffffcc
   168ec:	cmp	r1, #0
   168f0:	movwne	r1, #1
   168f4:	mvn	r5, r5
   168f8:	orr	r5, r5, r1
   168fc:	tst	r5, #1
   16900:	bne	16870 <__assert_fail@plt+0x515c>
   16904:	cmp	r9, r2
   16908:	movcc	r5, r4
   1690c:	movcc	r4, #39	; 0x27
   16910:	strbcc	r4, [ip, r9]
   16914:	movcc	r4, r5
   16918:	add	r5, r9, #1
   1691c:	add	r9, r9, #2
   16920:	cmp	r5, r2
   16924:	movcc	r1, r4
   16928:	movcc	r4, #39	; 0x27
   1692c:	strbcc	r4, [ip, r5]
   16930:	movcc	r4, r1
   16934:	mov	r1, #0
   16938:	str	r1, [fp, #-52]	; 0xffffffcc
   1693c:	b	16870 <__assert_fail@plt+0x515c>
   16940:	cmp	r1, #0
   16944:	movwne	r1, #1
   16948:	str	r1, [fp, #-56]	; 0xffffffc8
   1694c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16950:	cmp	r0, #0
   16954:	beq	1637c <__assert_fail@plt+0x4c68>
   16958:	b	163b0 <__assert_fail@plt+0x4c9c>
   1695c:	mov	r8, #0
   16960:	mov	r4, r1
   16964:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16968:	tst	r0, #1
   1696c:	beq	15fe8 <__assert_fail@plt+0x48d4>
   16970:	b	1629c <__assert_fail@plt+0x4b88>
   16974:	mov	r7, sl
   16978:	b	16980 <__assert_fail@plt+0x526c>
   1697c:	mvn	r7, #0
   16980:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16984:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16988:	ldr	r2, [sp, #88]	; 0x58
   1698c:	eor	r0, r1, #2
   16990:	orr	r0, r0, r9
   16994:	clz	r0, r0
   16998:	lsr	r0, r0, #5
   1699c:	tst	r3, r0
   169a0:	bne	16a18 <__assert_fail@plt+0x5304>
   169a4:	subs	r0, r1, #2
   169a8:	movwne	r0, #1
   169ac:	orr	r0, r3, r0
   169b0:	tst	r0, #1
   169b4:	ldreq	r0, [sp, #60]	; 0x3c
   169b8:	eoreq	r0, r0, #1
   169bc:	tsteq	r0, #1
   169c0:	bne	16af4 <__assert_fail@plt+0x53e0>
   169c4:	tst	r4, #1
   169c8:	bne	16ab8 <__assert_fail@plt+0x53a4>
   169cc:	ldr	r6, [sp, #56]	; 0x38
   169d0:	mov	r8, #0
   169d4:	cmp	r6, #0
   169d8:	beq	16af0 <__assert_fail@plt+0x53dc>
   169dc:	mov	r1, #0
   169e0:	mov	r4, #2
   169e4:	cmp	r5, #0
   169e8:	mov	r0, r2
   169ec:	mov	r3, #0
   169f0:	str	r1, [sp, #84]	; 0x54
   169f4:	beq	1583c <__assert_fail@plt+0x4128>
   169f8:	b	16af4 <__assert_fail@plt+0x53e0>
   169fc:	movw	r0, #45727	; 0xb29f
   16a00:	movt	r0, #1
   16a04:	str	r0, [sp, #76]	; 0x4c
   16a08:	mov	r9, #0
   16a0c:	tst	r8, #1
   16a10:	beq	15ad4 <__assert_fail@plt+0x43c0>
   16a14:	b	15c14 <__assert_fail@plt+0x4500>
   16a18:	ldr	r1, [sp, #88]	; 0x58
   16a1c:	mov	r0, #2
   16a20:	tst	r1, #1
   16a24:	movwne	r0, #4
   16a28:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16a2c:	ldr	r1, [fp, #12]
   16a30:	cmp	r2, #2
   16a34:	moveq	r2, r0
   16a38:	b	16a70 <__assert_fail@plt+0x535c>
   16a3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16a40:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16a44:	ldr	r1, [fp, #12]
   16a48:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16a4c:	b	16a70 <__assert_fail@plt+0x535c>
   16a50:	ldr	r1, [sp, #88]	; 0x58
   16a54:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16a58:	ldr	r5, [sp, #28]
   16a5c:	mov	r0, #2
   16a60:	tst	r1, #1
   16a64:	ldr	r1, [fp, #12]
   16a68:	movwne	r0, #4
   16a6c:	mov	r2, r0
   16a70:	mov	r0, #0
   16a74:	bic	r1, r1, #2
   16a78:	str	r2, [sp]
   16a7c:	mov	r2, lr
   16a80:	str	r0, [sp, #8]
   16a84:	ldr	r0, [sp, #72]	; 0x48
   16a88:	str	r1, [sp, #4]
   16a8c:	mov	r1, r5
   16a90:	str	r0, [sp, #12]
   16a94:	ldr	r0, [sp, #76]	; 0x4c
   16a98:	str	r0, [sp, #16]
   16a9c:	mov	r0, ip
   16aa0:	mov	r3, r7
   16aa4:	bl	157b0 <__assert_fail@plt+0x409c>
   16aa8:	mov	r9, r0
   16aac:	mov	r0, r9
   16ab0:	sub	sp, fp, #28
   16ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ab8:	mov	r0, #5
   16abc:	ldr	r1, [sp, #56]	; 0x38
   16ac0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16ac4:	str	r0, [sp]
   16ac8:	ldr	r0, [fp, #12]
   16acc:	str	r0, [sp, #4]
   16ad0:	ldr	r0, [fp, #16]
   16ad4:	str	r0, [sp, #8]
   16ad8:	ldr	r0, [sp, #72]	; 0x48
   16adc:	str	r0, [sp, #12]
   16ae0:	ldr	r0, [sp, #76]	; 0x4c
   16ae4:	str	r0, [sp, #16]
   16ae8:	ldr	r0, [fp, #-84]	; 0xffffffac
   16aec:	b	16aa0 <__assert_fail@plt+0x538c>
   16af0:	mov	r3, #0
   16af4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16af8:	cmp	r1, #0
   16afc:	beq	16b38 <__assert_fail@plt+0x5424>
   16b00:	ldr	r2, [fp, #-84]	; 0xffffffac
   16b04:	tst	r3, #1
   16b08:	bne	16b3c <__assert_fail@plt+0x5428>
   16b0c:	ldrb	r0, [r1]
   16b10:	cmp	r0, #0
   16b14:	beq	16b3c <__assert_fail@plt+0x5428>
   16b18:	add	r1, r1, #1
   16b1c:	cmp	r9, r5
   16b20:	strbcc	r0, [r2, r9]
   16b24:	add	r9, r9, #1
   16b28:	ldrb	r0, [r1], #1
   16b2c:	cmp	r0, #0
   16b30:	bne	16b1c <__assert_fail@plt+0x5408>
   16b34:	b	16b3c <__assert_fail@plt+0x5428>
   16b38:	ldr	r2, [fp, #-84]	; 0xffffffac
   16b3c:	cmp	r9, r5
   16b40:	movcc	r0, #0
   16b44:	strbcc	r0, [r2, r9]
   16b48:	mov	r0, r9
   16b4c:	sub	sp, fp, #28
   16b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b54:	mov	r0, #4
   16b58:	b	16a28 <__assert_fail@plt+0x5314>
   16b5c:	bl	116f0 <abort@plt>
   16b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b64:	add	fp, sp, #28
   16b68:	sub	sp, sp, #28
   16b6c:	movw	r5, #50472	; 0xc528
   16b70:	cmp	r2, #0
   16b74:	mov	r4, r1
   16b78:	mov	r7, r0
   16b7c:	str	r0, [sp, #20]
   16b80:	movt	r5, #2
   16b84:	movne	r5, r2
   16b88:	bl	115d0 <__errno_location@plt>
   16b8c:	mov	sl, r0
   16b90:	ldr	r2, [r5, #40]	; 0x28
   16b94:	ldr	r3, [r5, #44]	; 0x2c
   16b98:	ldm	r5, {r0, r1}
   16b9c:	orr	r8, r1, #1
   16ba0:	add	r9, r5, #8
   16ba4:	mov	r1, #0
   16ba8:	ldr	r6, [sl]
   16bac:	stm	sp, {r0, r8, r9}
   16bb0:	mov	r0, #0
   16bb4:	str	r2, [sp, #12]
   16bb8:	str	r3, [sp, #16]
   16bbc:	mov	r2, r7
   16bc0:	mov	r3, r4
   16bc4:	str	r6, [sp, #24]
   16bc8:	mov	r6, r4
   16bcc:	bl	157b0 <__assert_fail@plt+0x409c>
   16bd0:	add	r7, r0, #1
   16bd4:	mov	r0, r7
   16bd8:	bl	185c0 <__assert_fail@plt+0x6eac>
   16bdc:	mov	r4, r0
   16be0:	ldr	r0, [r5]
   16be4:	ldr	r2, [r5, #44]	; 0x2c
   16be8:	ldr	r1, [r5, #40]	; 0x28
   16bec:	mov	r3, r6
   16bf0:	stm	sp, {r0, r8, r9}
   16bf4:	str	r2, [sp, #16]
   16bf8:	ldr	r2, [sp, #20]
   16bfc:	str	r1, [sp, #12]
   16c00:	mov	r0, r4
   16c04:	mov	r1, r7
   16c08:	bl	157b0 <__assert_fail@plt+0x409c>
   16c0c:	ldr	r0, [sp, #24]
   16c10:	str	r0, [sl]
   16c14:	mov	r0, r4
   16c18:	sub	sp, fp, #28
   16c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c24:	add	fp, sp, #28
   16c28:	sub	sp, sp, #36	; 0x24
   16c2c:	movw	r8, #50472	; 0xc528
   16c30:	cmp	r3, #0
   16c34:	mov	r4, r2
   16c38:	str	r2, [sp, #24]
   16c3c:	mov	r5, r1
   16c40:	mov	r6, r0
   16c44:	str	r0, [sp, #20]
   16c48:	movt	r8, #2
   16c4c:	movne	r8, r3
   16c50:	bl	115d0 <__errno_location@plt>
   16c54:	str	r0, [sp, #28]
   16c58:	ldr	r1, [r8, #40]	; 0x28
   16c5c:	ldr	r2, [r8, #44]	; 0x2c
   16c60:	ldr	r7, [r0]
   16c64:	cmp	r4, #0
   16c68:	add	sl, r8, #8
   16c6c:	mov	r0, #0
   16c70:	ldm	r8, {r3, r9}
   16c74:	orreq	r9, r9, #1
   16c78:	stm	sp, {r3, r9, sl}
   16c7c:	str	r1, [sp, #12]
   16c80:	str	r2, [sp, #16]
   16c84:	mov	r1, #0
   16c88:	mov	r2, r6
   16c8c:	mov	r3, r5
   16c90:	str	r7, [sp, #32]
   16c94:	mov	r7, r5
   16c98:	bl	157b0 <__assert_fail@plt+0x409c>
   16c9c:	add	r4, r0, #1
   16ca0:	mov	r5, r0
   16ca4:	mov	r0, r4
   16ca8:	bl	185c0 <__assert_fail@plt+0x6eac>
   16cac:	mov	r6, r0
   16cb0:	ldr	r0, [r8]
   16cb4:	ldr	r2, [r8, #44]	; 0x2c
   16cb8:	ldr	r1, [r8, #40]	; 0x28
   16cbc:	mov	r3, r7
   16cc0:	stm	sp, {r0, r9, sl}
   16cc4:	str	r2, [sp, #16]
   16cc8:	ldr	r2, [sp, #20]
   16ccc:	str	r1, [sp, #12]
   16cd0:	mov	r0, r6
   16cd4:	mov	r1, r4
   16cd8:	bl	157b0 <__assert_fail@plt+0x409c>
   16cdc:	ldr	r0, [sp, #24]
   16ce0:	ldr	r1, [sp, #32]
   16ce4:	ldr	r2, [sp, #28]
   16ce8:	cmp	r0, #0
   16cec:	str	r1, [r2]
   16cf0:	strne	r5, [r0]
   16cf4:	mov	r0, r6
   16cf8:	sub	sp, fp, #28
   16cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d00:	push	{r4, r5, r6, r7, fp, lr}
   16d04:	add	fp, sp, #16
   16d08:	movw	r4, #49560	; 0xc198
   16d0c:	movt	r4, #2
   16d10:	ldrd	r6, [r4]
   16d14:	cmp	r7, #2
   16d18:	blt	16d44 <__assert_fail@plt+0x5630>
   16d1c:	add	r5, r6, #12
   16d20:	mov	r7, #0
   16d24:	ldr	r0, [r5, r7, lsl #3]
   16d28:	bl	153d0 <__assert_fail@plt+0x3cbc>
   16d2c:	ldr	r1, [r4, #4]
   16d30:	add	r2, r7, #2
   16d34:	add	r0, r7, #1
   16d38:	mov	r7, r0
   16d3c:	cmp	r2, r1
   16d40:	blt	16d24 <__assert_fail@plt+0x5610>
   16d44:	ldr	r0, [r6, #4]
   16d48:	movw	r5, #50520	; 0xc558
   16d4c:	movt	r5, #2
   16d50:	cmp	r0, r5
   16d54:	beq	16d68 <__assert_fail@plt+0x5654>
   16d58:	bl	153d0 <__assert_fail@plt+0x3cbc>
   16d5c:	mov	r0, #256	; 0x100
   16d60:	str	r0, [r4, #8]
   16d64:	str	r5, [r4, #12]
   16d68:	add	r5, r4, #8
   16d6c:	cmp	r6, r5
   16d70:	beq	16d80 <__assert_fail@plt+0x566c>
   16d74:	mov	r0, r6
   16d78:	bl	153d0 <__assert_fail@plt+0x3cbc>
   16d7c:	str	r5, [r4]
   16d80:	mov	r0, #1
   16d84:	str	r0, [r4, #4]
   16d88:	pop	{r4, r5, r6, r7, fp, pc}
   16d8c:	movw	r3, #50472	; 0xc528
   16d90:	mvn	r2, #0
   16d94:	movt	r3, #2
   16d98:	b	16d9c <__assert_fail@plt+0x5688>
   16d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da0:	add	fp, sp, #28
   16da4:	sub	sp, sp, #44	; 0x2c
   16da8:	mov	r7, r3
   16dac:	str	r2, [sp, #36]	; 0x24
   16db0:	str	r1, [sp, #32]
   16db4:	mov	r5, r0
   16db8:	bl	115d0 <__errno_location@plt>
   16dbc:	cmp	r5, #0
   16dc0:	bmi	16f28 <__assert_fail@plt+0x5814>
   16dc4:	cmn	r5, #-2147483647	; 0x80000001
   16dc8:	beq	16f28 <__assert_fail@plt+0x5814>
   16dcc:	movw	r8, #49560	; 0xc198
   16dd0:	mov	r4, r0
   16dd4:	ldr	r0, [r0]
   16dd8:	movt	r8, #2
   16ddc:	str	r4, [sp, #28]
   16de0:	ldr	r1, [r8, #4]
   16de4:	ldr	r6, [r8]
   16de8:	str	r0, [sp, #24]
   16dec:	cmp	r1, r5
   16df0:	ble	16dfc <__assert_fail@plt+0x56e8>
   16df4:	mov	sl, r6
   16df8:	b	16e64 <__assert_fail@plt+0x5750>
   16dfc:	mov	r0, #8
   16e00:	add	r9, r8, #8
   16e04:	str	r1, [fp, #-32]	; 0xffffffe0
   16e08:	sub	r1, r5, r1
   16e0c:	mvn	r3, #-2147483648	; 0x80000000
   16e10:	str	r0, [sp]
   16e14:	subs	r0, r6, r9
   16e18:	add	r2, r1, #1
   16e1c:	sub	r1, fp, #32
   16e20:	movne	r0, r6
   16e24:	bl	187c0 <__assert_fail@plt+0x70ac>
   16e28:	mov	sl, r0
   16e2c:	cmp	r6, r9
   16e30:	str	r0, [r8]
   16e34:	bne	16e40 <__assert_fail@plt+0x572c>
   16e38:	ldrd	r0, [r8, #8]
   16e3c:	stm	sl, {r0, r1}
   16e40:	ldr	r1, [r8, #4]
   16e44:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16e48:	add	r0, sl, r1, lsl #3
   16e4c:	sub	r1, r2, r1
   16e50:	lsl	r2, r1, #3
   16e54:	mov	r1, #0
   16e58:	bl	115f4 <memset@plt>
   16e5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16e60:	str	r0, [r8, #4]
   16e64:	mov	r9, sl
   16e68:	ldm	r7, {r0, r1}
   16e6c:	orr	r8, r1, #1
   16e70:	add	r1, r7, #8
   16e74:	ldr	r2, [r7, #40]	; 0x28
   16e78:	ldr	r3, [r7, #44]	; 0x2c
   16e7c:	ldr	r6, [r9, r5, lsl #3]!
   16e80:	str	r1, [sp, #20]
   16e84:	ldr	r4, [r9, #4]!
   16e88:	stm	sp, {r0, r8}
   16e8c:	add	r0, sp, #8
   16e90:	stm	r0, {r1, r2, r3}
   16e94:	ldr	r2, [sp, #32]
   16e98:	ldr	r3, [sp, #36]	; 0x24
   16e9c:	mov	r1, r6
   16ea0:	mov	r0, r4
   16ea4:	bl	157b0 <__assert_fail@plt+0x409c>
   16ea8:	cmp	r6, r0
   16eac:	bhi	16f10 <__assert_fail@plt+0x57fc>
   16eb0:	add	r6, r0, #1
   16eb4:	movw	r0, #50520	; 0xc558
   16eb8:	movt	r0, #2
   16ebc:	str	r6, [sl, r5, lsl #3]
   16ec0:	cmp	r4, r0
   16ec4:	beq	16ed0 <__assert_fail@plt+0x57bc>
   16ec8:	mov	r0, r4
   16ecc:	bl	153d0 <__assert_fail@plt+0x3cbc>
   16ed0:	mov	r0, r6
   16ed4:	bl	185c0 <__assert_fail@plt+0x6eac>
   16ed8:	str	r0, [r9]
   16edc:	mov	r4, r0
   16ee0:	add	r3, sp, #8
   16ee4:	ldr	r0, [r7]
   16ee8:	ldr	r1, [r7, #40]	; 0x28
   16eec:	ldr	r2, [r7, #44]	; 0x2c
   16ef0:	stm	sp, {r0, r8}
   16ef4:	ldr	r0, [sp, #20]
   16ef8:	stm	r3, {r0, r1, r2}
   16efc:	ldr	r2, [sp, #32]
   16f00:	ldr	r3, [sp, #36]	; 0x24
   16f04:	mov	r0, r4
   16f08:	mov	r1, r6
   16f0c:	bl	157b0 <__assert_fail@plt+0x409c>
   16f10:	ldr	r1, [sp, #24]
   16f14:	ldr	r0, [sp, #28]
   16f18:	str	r1, [r0]
   16f1c:	mov	r0, r4
   16f20:	sub	sp, fp, #28
   16f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f28:	bl	116f0 <abort@plt>
   16f2c:	movw	r3, #50472	; 0xc528
   16f30:	movt	r3, #2
   16f34:	b	16d9c <__assert_fail@plt+0x5688>
   16f38:	movw	r3, #50472	; 0xc528
   16f3c:	mov	r1, r0
   16f40:	mov	r0, #0
   16f44:	mvn	r2, #0
   16f48:	movt	r3, #2
   16f4c:	b	16d9c <__assert_fail@plt+0x5688>
   16f50:	movw	r3, #50472	; 0xc528
   16f54:	mov	r2, r1
   16f58:	mov	r1, r0
   16f5c:	mov	r0, #0
   16f60:	movt	r3, #2
   16f64:	b	16d9c <__assert_fail@plt+0x5688>
   16f68:	push	{fp, lr}
   16f6c:	mov	fp, sp
   16f70:	sub	sp, sp, #48	; 0x30
   16f74:	vmov.i32	q8, #0	; 0x00000000
   16f78:	mov	ip, #32
   16f7c:	mov	r3, sp
   16f80:	mov	lr, r2
   16f84:	cmp	r1, #10
   16f88:	add	r2, r3, #16
   16f8c:	vst1.64	{d16-d17}, [r3], ip
   16f90:	vst1.64	{d16-d17}, [r2]
   16f94:	vst1.64	{d16-d17}, [r3]
   16f98:	beq	16fb8 <__assert_fail@plt+0x58a4>
   16f9c:	str	r1, [sp]
   16fa0:	mov	r3, sp
   16fa4:	mov	r1, lr
   16fa8:	mvn	r2, #0
   16fac:	bl	16d9c <__assert_fail@plt+0x5688>
   16fb0:	mov	sp, fp
   16fb4:	pop	{fp, pc}
   16fb8:	bl	116f0 <abort@plt>
   16fbc:	push	{r4, sl, fp, lr}
   16fc0:	add	fp, sp, #8
   16fc4:	sub	sp, sp, #48	; 0x30
   16fc8:	vmov.i32	q8, #0	; 0x00000000
   16fcc:	mov	ip, r3
   16fd0:	mov	r3, sp
   16fd4:	mov	lr, #32
   16fd8:	cmp	r1, #10
   16fdc:	add	r4, r3, #16
   16fe0:	vst1.64	{d16-d17}, [r3], lr
   16fe4:	vst1.64	{d16-d17}, [r4]
   16fe8:	vst1.64	{d16-d17}, [r3]
   16fec:	beq	1700c <__assert_fail@plt+0x58f8>
   16ff0:	str	r1, [sp]
   16ff4:	mov	r1, r2
   16ff8:	mov	r3, sp
   16ffc:	mov	r2, ip
   17000:	bl	16d9c <__assert_fail@plt+0x5688>
   17004:	sub	sp, fp, #8
   17008:	pop	{r4, sl, fp, pc}
   1700c:	bl	116f0 <abort@plt>
   17010:	push	{fp, lr}
   17014:	mov	fp, sp
   17018:	sub	sp, sp, #48	; 0x30
   1701c:	vmov.i32	q8, #0	; 0x00000000
   17020:	mov	r3, sp
   17024:	mov	ip, #32
   17028:	cmp	r0, #10
   1702c:	add	r2, r3, #16
   17030:	vst1.64	{d16-d17}, [r3], ip
   17034:	vst1.64	{d16-d17}, [r2]
   17038:	vst1.64	{d16-d17}, [r3]
   1703c:	beq	1705c <__assert_fail@plt+0x5948>
   17040:	str	r0, [sp]
   17044:	mov	r3, sp
   17048:	mov	r0, #0
   1704c:	mvn	r2, #0
   17050:	bl	16d9c <__assert_fail@plt+0x5688>
   17054:	mov	sp, fp
   17058:	pop	{fp, pc}
   1705c:	bl	116f0 <abort@plt>
   17060:	push	{fp, lr}
   17064:	mov	fp, sp
   17068:	sub	sp, sp, #48	; 0x30
   1706c:	vmov.i32	q8, #0	; 0x00000000
   17070:	mov	r3, sp
   17074:	mov	ip, #32
   17078:	cmp	r0, #10
   1707c:	add	lr, r3, #16
   17080:	vst1.64	{d16-d17}, [r3], ip
   17084:	vst1.64	{d16-d17}, [lr]
   17088:	vst1.64	{d16-d17}, [r3]
   1708c:	beq	170a8 <__assert_fail@plt+0x5994>
   17090:	str	r0, [sp]
   17094:	mov	r3, sp
   17098:	mov	r0, #0
   1709c:	bl	16d9c <__assert_fail@plt+0x5688>
   170a0:	mov	sp, fp
   170a4:	pop	{fp, pc}
   170a8:	bl	116f0 <abort@plt>
   170ac:	push	{r4, sl, fp, lr}
   170b0:	add	fp, sp, #8
   170b4:	sub	sp, sp, #48	; 0x30
   170b8:	mov	lr, r0
   170bc:	movw	r0, #50472	; 0xc528
   170c0:	mov	ip, r1
   170c4:	mov	r1, #32
   170c8:	mov	r4, #1
   170cc:	movt	r0, #2
   170d0:	add	r3, r0, #16
   170d4:	vld1.64	{d16-d17}, [r0], r1
   170d8:	vld1.64	{d20-d21}, [r0]
   170dc:	vld1.64	{d18-d19}, [r3]
   170e0:	mov	r3, sp
   170e4:	add	r0, r3, #32
   170e8:	add	r1, r3, #16
   170ec:	vst1.64	{d20-d21}, [r0]
   170f0:	mov	r0, #28
   170f4:	vst1.64	{d18-d19}, [r1]
   170f8:	mov	r1, r3
   170fc:	and	r0, r0, r2, lsr #3
   17100:	and	r2, r2, #31
   17104:	vst1.64	{d16-d17}, [r1], r0
   17108:	ldr	r0, [r1, #8]
   1710c:	bic	r4, r4, r0, lsr r2
   17110:	eor	r0, r0, r4, lsl r2
   17114:	mov	r2, ip
   17118:	str	r0, [r1, #8]
   1711c:	mov	r0, #0
   17120:	mov	r1, lr
   17124:	bl	16d9c <__assert_fail@plt+0x5688>
   17128:	sub	sp, fp, #8
   1712c:	pop	{r4, sl, fp, pc}
   17130:	push	{fp, lr}
   17134:	mov	fp, sp
   17138:	sub	sp, sp, #48	; 0x30
   1713c:	mov	ip, r0
   17140:	movw	r0, #50472	; 0xc528
   17144:	mov	r2, #32
   17148:	movt	r0, #2
   1714c:	add	r3, r0, #16
   17150:	vld1.64	{d16-d17}, [r0], r2
   17154:	vld1.64	{d20-d21}, [r0]
   17158:	vld1.64	{d18-d19}, [r3]
   1715c:	mov	r3, sp
   17160:	add	r0, r3, #32
   17164:	add	r2, r3, #16
   17168:	vst1.64	{d20-d21}, [r0]
   1716c:	mov	r0, #28
   17170:	vst1.64	{d18-d19}, [r2]
   17174:	mov	r2, r3
   17178:	and	r0, r0, r1, lsr #3
   1717c:	and	r1, r1, #31
   17180:	vst1.64	{d16-d17}, [r2], r0
   17184:	mov	r0, #1
   17188:	ldr	lr, [r2, #8]
   1718c:	bic	r0, r0, lr, lsr r1
   17190:	eor	r0, lr, r0, lsl r1
   17194:	mov	r1, ip
   17198:	str	r0, [r2, #8]
   1719c:	mov	r0, #0
   171a0:	mvn	r2, #0
   171a4:	bl	16d9c <__assert_fail@plt+0x5688>
   171a8:	mov	sp, fp
   171ac:	pop	{fp, pc}
   171b0:	push	{fp, lr}
   171b4:	mov	fp, sp
   171b8:	sub	sp, sp, #48	; 0x30
   171bc:	mov	r1, r0
   171c0:	movw	r0, #50472	; 0xc528
   171c4:	mov	r3, #32
   171c8:	movt	r0, #2
   171cc:	add	r2, r0, #16
   171d0:	vld1.64	{d16-d17}, [r0], r3
   171d4:	mov	r3, sp
   171d8:	vld1.64	{d18-d19}, [r2]
   171dc:	vld1.64	{d20-d21}, [r0]
   171e0:	add	r2, r3, #16
   171e4:	add	r0, r3, #32
   171e8:	vst1.64	{d18-d19}, [r2]
   171ec:	vst1.64	{d20-d21}, [r0]
   171f0:	mov	r0, #12
   171f4:	mov	r2, r3
   171f8:	vst1.64	{d16-d17}, [r2], r0
   171fc:	ldr	r0, [r2]
   17200:	orr	r0, r0, #67108864	; 0x4000000
   17204:	str	r0, [r2]
   17208:	mov	r0, #0
   1720c:	mvn	r2, #0
   17210:	bl	16d9c <__assert_fail@plt+0x5688>
   17214:	mov	sp, fp
   17218:	pop	{fp, pc}
   1721c:	push	{fp, lr}
   17220:	mov	fp, sp
   17224:	sub	sp, sp, #48	; 0x30
   17228:	mov	ip, r1
   1722c:	mov	r1, r0
   17230:	movw	r0, #50472	; 0xc528
   17234:	mov	r2, #32
   17238:	movt	r0, #2
   1723c:	add	r3, r0, #16
   17240:	vld1.64	{d16-d17}, [r0], r2
   17244:	vld1.64	{d18-d19}, [r3]
   17248:	vld1.64	{d20-d21}, [r0]
   1724c:	mov	r3, sp
   17250:	add	r2, r3, #16
   17254:	add	r0, r3, #32
   17258:	vst1.64	{d18-d19}, [r2]
   1725c:	vst1.64	{d20-d21}, [r0]
   17260:	mov	r0, #12
   17264:	mov	r2, r3
   17268:	vst1.64	{d16-d17}, [r2], r0
   1726c:	ldr	r0, [r2]
   17270:	orr	r0, r0, #67108864	; 0x4000000
   17274:	str	r0, [r2]
   17278:	mov	r0, #0
   1727c:	mov	r2, ip
   17280:	bl	16d9c <__assert_fail@plt+0x5688>
   17284:	mov	sp, fp
   17288:	pop	{fp, pc}
   1728c:	push	{r4, sl, fp, lr}
   17290:	add	fp, sp, #8
   17294:	sub	sp, sp, #96	; 0x60
   17298:	vmov.i32	q8, #0	; 0x00000000
   1729c:	mov	ip, r2
   172a0:	mov	r2, sp
   172a4:	mov	r4, #28
   172a8:	cmp	r1, #10
   172ac:	mov	r3, r2
   172b0:	add	lr, r2, #16
   172b4:	vst1.64	{d16-d17}, [r3], r4
   172b8:	vst1.64	{d16-d17}, [lr]
   172bc:	vst1.32	{d16-d17}, [r3]
   172c0:	beq	17310 <__assert_fail@plt+0x5bfc>
   172c4:	vld1.64	{d16-d17}, [r2], r4
   172c8:	vld1.64	{d18-d19}, [lr]
   172cc:	add	r3, sp, #48	; 0x30
   172d0:	vld1.32	{d20-d21}, [r2]
   172d4:	add	r2, r3, #20
   172d8:	add	r4, r3, #4
   172dc:	vst1.32	{d18-d19}, [r2]
   172e0:	add	r2, r3, #32
   172e4:	vst1.32	{d16-d17}, [r4]
   172e8:	vst1.32	{d20-d21}, [r2]
   172ec:	str	r1, [sp, #48]	; 0x30
   172f0:	mvn	r2, #0
   172f4:	ldr	r1, [sp, #60]	; 0x3c
   172f8:	orr	r1, r1, #67108864	; 0x4000000
   172fc:	str	r1, [sp, #60]	; 0x3c
   17300:	mov	r1, ip
   17304:	bl	16d9c <__assert_fail@plt+0x5688>
   17308:	sub	sp, fp, #8
   1730c:	pop	{r4, sl, fp, pc}
   17310:	bl	116f0 <abort@plt>
   17314:	push	{r4, r5, r6, sl, fp, lr}
   17318:	add	fp, sp, #16
   1731c:	sub	sp, sp, #48	; 0x30
   17320:	mov	ip, r3
   17324:	movw	r3, #50472	; 0xc528
   17328:	mov	r6, #32
   1732c:	cmp	r1, #0
   17330:	mov	r4, sp
   17334:	movt	r3, #2
   17338:	cmpne	r2, #0
   1733c:	add	r5, r4, #16
   17340:	add	lr, r3, #16
   17344:	vld1.64	{d16-d17}, [r3], r6
   17348:	vld1.64	{d18-d19}, [lr]
   1734c:	vld1.64	{d20-d21}, [r3]
   17350:	mov	r3, #10
   17354:	vst1.64	{d16-d17}, [r4], r6
   17358:	vst1.64	{d18-d19}, [r5]
   1735c:	vst1.64	{d20-d21}, [r4]
   17360:	str	r3, [sp]
   17364:	bne	1736c <__assert_fail@plt+0x5c58>
   17368:	bl	116f0 <abort@plt>
   1736c:	str	r2, [sp, #44]	; 0x2c
   17370:	str	r1, [sp, #40]	; 0x28
   17374:	mov	r3, sp
   17378:	mov	r1, ip
   1737c:	mvn	r2, #0
   17380:	bl	16d9c <__assert_fail@plt+0x5688>
   17384:	sub	sp, fp, #16
   17388:	pop	{r4, r5, r6, sl, fp, pc}
   1738c:	push	{r4, r5, r6, sl, fp, lr}
   17390:	add	fp, sp, #16
   17394:	sub	sp, sp, #48	; 0x30
   17398:	mov	lr, r3
   1739c:	movw	r3, #50472	; 0xc528
   173a0:	mov	r6, #32
   173a4:	cmp	r1, #0
   173a8:	mov	r4, sp
   173ac:	movt	r3, #2
   173b0:	cmpne	r2, #0
   173b4:	add	r5, r4, #16
   173b8:	add	ip, r3, #16
   173bc:	vld1.64	{d16-d17}, [r3], r6
   173c0:	vld1.64	{d18-d19}, [ip]
   173c4:	vld1.64	{d20-d21}, [r3]
   173c8:	mov	r3, #10
   173cc:	vst1.64	{d16-d17}, [r4], r6
   173d0:	vst1.64	{d18-d19}, [r5]
   173d4:	vst1.64	{d20-d21}, [r4]
   173d8:	str	r3, [sp]
   173dc:	bne	173e4 <__assert_fail@plt+0x5cd0>
   173e0:	bl	116f0 <abort@plt>
   173e4:	ldr	ip, [fp, #8]
   173e8:	str	r2, [sp, #44]	; 0x2c
   173ec:	str	r1, [sp, #40]	; 0x28
   173f0:	mov	r3, sp
   173f4:	mov	r1, lr
   173f8:	mov	r2, ip
   173fc:	bl	16d9c <__assert_fail@plt+0x5688>
   17400:	sub	sp, fp, #16
   17404:	pop	{r4, r5, r6, sl, fp, pc}
   17408:	push	{r4, sl, fp, lr}
   1740c:	add	fp, sp, #8
   17410:	sub	sp, sp, #48	; 0x30
   17414:	movw	r3, #50472	; 0xc528
   17418:	mov	lr, #32
   1741c:	mov	ip, r2
   17420:	cmp	r0, #0
   17424:	movt	r3, #2
   17428:	cmpne	r1, #0
   1742c:	add	r2, r3, #16
   17430:	vld1.64	{d16-d17}, [r3], lr
   17434:	vld1.64	{d20-d21}, [r3]
   17438:	vld1.64	{d18-d19}, [r2]
   1743c:	mov	r2, sp
   17440:	add	r4, r2, #16
   17444:	vst1.64	{d16-d17}, [r2], lr
   17448:	vst1.64	{d20-d21}, [r2]
   1744c:	mov	r2, #10
   17450:	vst1.64	{d18-d19}, [r4]
   17454:	str	r2, [sp]
   17458:	bne	17460 <__assert_fail@plt+0x5d4c>
   1745c:	bl	116f0 <abort@plt>
   17460:	str	r1, [sp, #44]	; 0x2c
   17464:	str	r0, [sp, #40]	; 0x28
   17468:	mov	r3, sp
   1746c:	mov	r0, #0
   17470:	mov	r1, ip
   17474:	mvn	r2, #0
   17478:	bl	16d9c <__assert_fail@plt+0x5688>
   1747c:	sub	sp, fp, #8
   17480:	pop	{r4, sl, fp, pc}
   17484:	push	{r4, r5, fp, lr}
   17488:	add	fp, sp, #8
   1748c:	sub	sp, sp, #48	; 0x30
   17490:	mov	ip, r3
   17494:	movw	r3, #50472	; 0xc528
   17498:	mov	r4, #32
   1749c:	mov	lr, r2
   174a0:	cmp	r0, #0
   174a4:	movt	r3, #2
   174a8:	cmpne	r1, #0
   174ac:	add	r2, r3, #16
   174b0:	vld1.64	{d16-d17}, [r3], r4
   174b4:	vld1.64	{d20-d21}, [r3]
   174b8:	vld1.64	{d18-d19}, [r2]
   174bc:	mov	r2, sp
   174c0:	add	r5, r2, #16
   174c4:	vst1.64	{d16-d17}, [r2], r4
   174c8:	vst1.64	{d20-d21}, [r2]
   174cc:	mov	r2, #10
   174d0:	vst1.64	{d18-d19}, [r5]
   174d4:	str	r2, [sp]
   174d8:	bne	174e0 <__assert_fail@plt+0x5dcc>
   174dc:	bl	116f0 <abort@plt>
   174e0:	str	r1, [sp, #44]	; 0x2c
   174e4:	str	r0, [sp, #40]	; 0x28
   174e8:	mov	r3, sp
   174ec:	mov	r0, #0
   174f0:	mov	r1, lr
   174f4:	mov	r2, ip
   174f8:	bl	16d9c <__assert_fail@plt+0x5688>
   174fc:	sub	sp, fp, #8
   17500:	pop	{r4, r5, fp, pc}
   17504:	movw	r3, #49512	; 0xc168
   17508:	movt	r3, #2
   1750c:	b	16d9c <__assert_fail@plt+0x5688>
   17510:	movw	r3, #49512	; 0xc168
   17514:	mov	r2, r1
   17518:	mov	r1, r0
   1751c:	mov	r0, #0
   17520:	movt	r3, #2
   17524:	b	16d9c <__assert_fail@plt+0x5688>
   17528:	movw	r3, #49512	; 0xc168
   1752c:	mvn	r2, #0
   17530:	movt	r3, #2
   17534:	b	16d9c <__assert_fail@plt+0x5688>
   17538:	movw	r3, #49512	; 0xc168
   1753c:	mov	r1, r0
   17540:	mov	r0, #0
   17544:	mvn	r2, #0
   17548:	movt	r3, #2
   1754c:	b	16d9c <__assert_fail@plt+0x5688>
   17550:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17554:	add	fp, sp, #24
   17558:	movw	r8, #0
   1755c:	mov	r6, r2
   17560:	mov	r4, r1
   17564:	mov	r5, r0
   17568:	movt	r8, #32752	; 0x7ff0
   1756c:	mov	r0, r5
   17570:	mov	r1, r4
   17574:	mov	r2, r6
   17578:	bl	113c0 <read@plt>
   1757c:	mov	r7, r0
   17580:	cmn	r0, #1
   17584:	bgt	175ac <__assert_fail@plt+0x5e98>
   17588:	bl	115d0 <__errno_location@plt>
   1758c:	ldr	r0, [r0]
   17590:	cmp	r0, #4
   17594:	beq	1756c <__assert_fail@plt+0x5e58>
   17598:	cmp	r6, r8
   1759c:	bls	175ac <__assert_fail@plt+0x5e98>
   175a0:	cmp	r0, #22
   175a4:	mov	r6, r8
   175a8:	beq	1756c <__assert_fail@plt+0x5e58>
   175ac:	mov	r0, r7
   175b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   175b8:	add	fp, sp, #24
   175bc:	movw	r8, #0
   175c0:	mov	r6, r2
   175c4:	mov	r4, r1
   175c8:	mov	r5, r0
   175cc:	movt	r8, #32752	; 0x7ff0
   175d0:	mov	r0, r5
   175d4:	mov	r1, r4
   175d8:	mov	r2, r6
   175dc:	bl	1160c <write@plt>
   175e0:	mov	r7, r0
   175e4:	cmn	r0, #1
   175e8:	bgt	17610 <__assert_fail@plt+0x5efc>
   175ec:	bl	115d0 <__errno_location@plt>
   175f0:	ldr	r0, [r0]
   175f4:	cmp	r0, #4
   175f8:	beq	175d0 <__assert_fail@plt+0x5ebc>
   175fc:	cmp	r6, r8
   17600:	bls	17610 <__assert_fail@plt+0x5efc>
   17604:	cmp	r0, #22
   17608:	mov	r6, r8
   1760c:	beq	175d0 <__assert_fail@plt+0x5ebc>
   17610:	mov	r0, r7
   17614:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17618:	push	{r4, r5, r6, r7, fp, lr}
   1761c:	add	fp, sp, #16
   17620:	sub	sp, sp, #8
   17624:	mov	r5, r0
   17628:	ldrb	r0, [r0]
   1762c:	mov	r4, r1
   17630:	sub	r0, r0, #48	; 0x30
   17634:	cmp	r0, #10
   17638:	bcs	17674 <__assert_fail@plt+0x5f60>
   1763c:	add	r1, sp, #4
   17640:	mov	r0, r5
   17644:	mov	r2, #10
   17648:	bl	113b4 <strtol@plt>
   1764c:	cmp	r0, #64	; 0x40
   17650:	bgt	17b48 <__assert_fail@plt+0x6434>
   17654:	ldr	r1, [sp, #4]
   17658:	ldrb	r1, [r1]
   1765c:	cmp	r1, #0
   17660:	mvnne	r0, #0
   17664:	str	r0, [r4]
   17668:	asr	r0, r0, #31
   1766c:	sub	sp, fp, #16
   17670:	pop	{r4, r5, r6, r7, fp, pc}
   17674:	movw	r6, #49576	; 0xc1a8
   17678:	mov	r1, r5
   1767c:	movt	r6, #2
   17680:	add	r0, r6, #4
   17684:	bl	113a8 <strcmp@plt>
   17688:	cmp	r0, #0
   1768c:	beq	179d4 <__assert_fail@plt+0x62c0>
   17690:	add	r0, r6, #16
   17694:	mov	r1, r5
   17698:	bl	113a8 <strcmp@plt>
   1769c:	cmp	r0, #0
   176a0:	beq	179dc <__assert_fail@plt+0x62c8>
   176a4:	add	r0, r6, #28
   176a8:	mov	r1, r5
   176ac:	bl	113a8 <strcmp@plt>
   176b0:	cmp	r0, #0
   176b4:	beq	179e4 <__assert_fail@plt+0x62d0>
   176b8:	add	r0, r6, #40	; 0x28
   176bc:	mov	r1, r5
   176c0:	bl	113a8 <strcmp@plt>
   176c4:	cmp	r0, #0
   176c8:	beq	179ec <__assert_fail@plt+0x62d8>
   176cc:	add	r0, r6, #52	; 0x34
   176d0:	mov	r1, r5
   176d4:	bl	113a8 <strcmp@plt>
   176d8:	cmp	r0, #0
   176dc:	beq	179f4 <__assert_fail@plt+0x62e0>
   176e0:	add	r0, r6, #64	; 0x40
   176e4:	mov	r1, r5
   176e8:	bl	113a8 <strcmp@plt>
   176ec:	cmp	r0, #0
   176f0:	beq	179fc <__assert_fail@plt+0x62e8>
   176f4:	add	r0, r6, #76	; 0x4c
   176f8:	mov	r1, r5
   176fc:	bl	113a8 <strcmp@plt>
   17700:	cmp	r0, #0
   17704:	beq	17a04 <__assert_fail@plt+0x62f0>
   17708:	add	r0, r6, #88	; 0x58
   1770c:	mov	r1, r5
   17710:	bl	113a8 <strcmp@plt>
   17714:	cmp	r0, #0
   17718:	beq	17a0c <__assert_fail@plt+0x62f8>
   1771c:	add	r0, r6, #100	; 0x64
   17720:	mov	r1, r5
   17724:	bl	113a8 <strcmp@plt>
   17728:	cmp	r0, #0
   1772c:	beq	17a14 <__assert_fail@plt+0x6300>
   17730:	add	r0, r6, #112	; 0x70
   17734:	mov	r1, r5
   17738:	bl	113a8 <strcmp@plt>
   1773c:	cmp	r0, #0
   17740:	beq	17a1c <__assert_fail@plt+0x6308>
   17744:	add	r0, r6, #124	; 0x7c
   17748:	mov	r1, r5
   1774c:	bl	113a8 <strcmp@plt>
   17750:	cmp	r0, #0
   17754:	beq	17a24 <__assert_fail@plt+0x6310>
   17758:	add	r0, r6, #136	; 0x88
   1775c:	mov	r1, r5
   17760:	bl	113a8 <strcmp@plt>
   17764:	cmp	r0, #0
   17768:	beq	17a2c <__assert_fail@plt+0x6318>
   1776c:	add	r0, r6, #148	; 0x94
   17770:	mov	r1, r5
   17774:	bl	113a8 <strcmp@plt>
   17778:	cmp	r0, #0
   1777c:	beq	17a34 <__assert_fail@plt+0x6320>
   17780:	add	r0, r6, #160	; 0xa0
   17784:	mov	r1, r5
   17788:	bl	113a8 <strcmp@plt>
   1778c:	cmp	r0, #0
   17790:	beq	17a3c <__assert_fail@plt+0x6328>
   17794:	add	r0, r6, #172	; 0xac
   17798:	mov	r1, r5
   1779c:	bl	113a8 <strcmp@plt>
   177a0:	cmp	r0, #0
   177a4:	beq	17a44 <__assert_fail@plt+0x6330>
   177a8:	add	r0, r6, #184	; 0xb8
   177ac:	mov	r1, r5
   177b0:	bl	113a8 <strcmp@plt>
   177b4:	cmp	r0, #0
   177b8:	beq	17a4c <__assert_fail@plt+0x6338>
   177bc:	add	r0, r6, #196	; 0xc4
   177c0:	mov	r1, r5
   177c4:	bl	113a8 <strcmp@plt>
   177c8:	cmp	r0, #0
   177cc:	beq	17a54 <__assert_fail@plt+0x6340>
   177d0:	add	r0, r6, #208	; 0xd0
   177d4:	mov	r1, r5
   177d8:	bl	113a8 <strcmp@plt>
   177dc:	cmp	r0, #0
   177e0:	beq	17a5c <__assert_fail@plt+0x6348>
   177e4:	add	r0, r6, #220	; 0xdc
   177e8:	mov	r1, r5
   177ec:	bl	113a8 <strcmp@plt>
   177f0:	cmp	r0, #0
   177f4:	beq	17a64 <__assert_fail@plt+0x6350>
   177f8:	add	r0, r6, #232	; 0xe8
   177fc:	mov	r1, r5
   17800:	bl	113a8 <strcmp@plt>
   17804:	cmp	r0, #0
   17808:	beq	17a6c <__assert_fail@plt+0x6358>
   1780c:	add	r0, r6, #244	; 0xf4
   17810:	mov	r1, r5
   17814:	bl	113a8 <strcmp@plt>
   17818:	cmp	r0, #0
   1781c:	beq	17a74 <__assert_fail@plt+0x6360>
   17820:	add	r0, r6, #256	; 0x100
   17824:	mov	r1, r5
   17828:	bl	113a8 <strcmp@plt>
   1782c:	cmp	r0, #0
   17830:	beq	17a7c <__assert_fail@plt+0x6368>
   17834:	add	r0, r6, #268	; 0x10c
   17838:	mov	r1, r5
   1783c:	bl	113a8 <strcmp@plt>
   17840:	cmp	r0, #0
   17844:	beq	17a84 <__assert_fail@plt+0x6370>
   17848:	add	r0, r6, #280	; 0x118
   1784c:	mov	r1, r5
   17850:	bl	113a8 <strcmp@plt>
   17854:	cmp	r0, #0
   17858:	beq	17a8c <__assert_fail@plt+0x6378>
   1785c:	add	r0, r6, #292	; 0x124
   17860:	mov	r1, r5
   17864:	bl	113a8 <strcmp@plt>
   17868:	cmp	r0, #0
   1786c:	beq	17a94 <__assert_fail@plt+0x6380>
   17870:	add	r0, r6, #304	; 0x130
   17874:	mov	r1, r5
   17878:	bl	113a8 <strcmp@plt>
   1787c:	cmp	r0, #0
   17880:	beq	17a9c <__assert_fail@plt+0x6388>
   17884:	add	r0, r6, #316	; 0x13c
   17888:	mov	r1, r5
   1788c:	bl	113a8 <strcmp@plt>
   17890:	cmp	r0, #0
   17894:	beq	17aa4 <__assert_fail@plt+0x6390>
   17898:	add	r0, r6, #328	; 0x148
   1789c:	mov	r1, r5
   178a0:	bl	113a8 <strcmp@plt>
   178a4:	cmp	r0, #0
   178a8:	beq	17aac <__assert_fail@plt+0x6398>
   178ac:	add	r0, r6, #340	; 0x154
   178b0:	mov	r1, r5
   178b4:	bl	113a8 <strcmp@plt>
   178b8:	cmp	r0, #0
   178bc:	beq	17ab4 <__assert_fail@plt+0x63a0>
   178c0:	add	r0, r6, #352	; 0x160
   178c4:	mov	r1, r5
   178c8:	bl	113a8 <strcmp@plt>
   178cc:	cmp	r0, #0
   178d0:	beq	17abc <__assert_fail@plt+0x63a8>
   178d4:	add	r0, r6, #364	; 0x16c
   178d8:	mov	r1, r5
   178dc:	bl	113a8 <strcmp@plt>
   178e0:	cmp	r0, #0
   178e4:	beq	17ac4 <__assert_fail@plt+0x63b0>
   178e8:	add	r0, r6, #376	; 0x178
   178ec:	mov	r1, r5
   178f0:	bl	113a8 <strcmp@plt>
   178f4:	cmp	r0, #0
   178f8:	beq	17acc <__assert_fail@plt+0x63b8>
   178fc:	add	r0, r6, #388	; 0x184
   17900:	mov	r1, r5
   17904:	bl	113a8 <strcmp@plt>
   17908:	cmp	r0, #0
   1790c:	beq	17ad4 <__assert_fail@plt+0x63c0>
   17910:	add	r0, r6, #400	; 0x190
   17914:	mov	r1, r5
   17918:	bl	113a8 <strcmp@plt>
   1791c:	cmp	r0, #0
   17920:	beq	17adc <__assert_fail@plt+0x63c8>
   17924:	add	r0, r6, #412	; 0x19c
   17928:	mov	r1, r5
   1792c:	bl	113a8 <strcmp@plt>
   17930:	cmp	r0, #0
   17934:	beq	17ae4 <__assert_fail@plt+0x63d0>
   17938:	bl	116d8 <__libc_current_sigrtmin@plt>
   1793c:	mov	r6, r0
   17940:	bl	11594 <__libc_current_sigrtmax@plt>
   17944:	mov	r7, r0
   17948:	cmp	r6, #0
   1794c:	ble	1796c <__assert_fail@plt+0x6258>
   17950:	movw	r1, #45816	; 0xb2f8
   17954:	mov	r0, r5
   17958:	mov	r2, #5
   1795c:	movt	r1, #1
   17960:	bl	116e4 <strncmp@plt>
   17964:	cmp	r0, #0
   17968:	beq	17b00 <__assert_fail@plt+0x63ec>
   1796c:	cmp	r7, #1
   17970:	blt	17b48 <__assert_fail@plt+0x6434>
   17974:	movw	r1, #45822	; 0xb2fe
   17978:	mov	r0, r5
   1797c:	mov	r2, #5
   17980:	movt	r1, #1
   17984:	bl	116e4 <strncmp@plt>
   17988:	cmp	r0, #0
   1798c:	bne	17b48 <__assert_fail@plt+0x6434>
   17990:	add	r0, r5, #5
   17994:	mov	r1, sp
   17998:	mov	r2, #10
   1799c:	bl	113b4 <strtol@plt>
   179a0:	ldr	r1, [sp]
   179a4:	ldrb	r1, [r1]
   179a8:	cmp	r1, #0
   179ac:	bne	17b48 <__assert_fail@plt+0x6434>
   179b0:	sub	r1, r6, r7
   179b4:	cmp	r1, r0
   179b8:	cmple	r0, #0
   179bc:	bgt	17b48 <__assert_fail@plt+0x6434>
   179c0:	add	r0, r0, r7
   179c4:	str	r0, [r4]
   179c8:	asr	r0, r0, #31
   179cc:	sub	sp, fp, #16
   179d0:	pop	{r4, r5, r6, r7, fp, pc}
   179d4:	mov	r0, #0
   179d8:	b	17ae8 <__assert_fail@plt+0x63d4>
   179dc:	mov	r0, #1
   179e0:	b	17ae8 <__assert_fail@plt+0x63d4>
   179e4:	mov	r0, #2
   179e8:	b	17ae8 <__assert_fail@plt+0x63d4>
   179ec:	mov	r0, #3
   179f0:	b	17ae8 <__assert_fail@plt+0x63d4>
   179f4:	mov	r0, #4
   179f8:	b	17ae8 <__assert_fail@plt+0x63d4>
   179fc:	mov	r0, #5
   17a00:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a04:	mov	r0, #6
   17a08:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a0c:	mov	r0, #7
   17a10:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a14:	mov	r0, #8
   17a18:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a1c:	mov	r0, #9
   17a20:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a24:	mov	r0, #10
   17a28:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a2c:	mov	r0, #11
   17a30:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a34:	mov	r0, #12
   17a38:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a3c:	mov	r0, #13
   17a40:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a44:	mov	r0, #14
   17a48:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a4c:	mov	r0, #15
   17a50:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a54:	mov	r0, #16
   17a58:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a5c:	mov	r0, #17
   17a60:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a64:	mov	r0, #18
   17a68:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a6c:	mov	r0, #19
   17a70:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a74:	mov	r0, #20
   17a78:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a7c:	mov	r0, #21
   17a80:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a84:	mov	r0, #22
   17a88:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a8c:	mov	r0, #23
   17a90:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a94:	mov	r0, #24
   17a98:	b	17ae8 <__assert_fail@plt+0x63d4>
   17a9c:	mov	r0, #25
   17aa0:	b	17ae8 <__assert_fail@plt+0x63d4>
   17aa4:	mov	r0, #26
   17aa8:	b	17ae8 <__assert_fail@plt+0x63d4>
   17aac:	mov	r0, #27
   17ab0:	b	17ae8 <__assert_fail@plt+0x63d4>
   17ab4:	mov	r0, #28
   17ab8:	b	17ae8 <__assert_fail@plt+0x63d4>
   17abc:	mov	r0, #29
   17ac0:	b	17ae8 <__assert_fail@plt+0x63d4>
   17ac4:	mov	r0, #30
   17ac8:	b	17ae8 <__assert_fail@plt+0x63d4>
   17acc:	mov	r0, #31
   17ad0:	b	17ae8 <__assert_fail@plt+0x63d4>
   17ad4:	mov	r0, #32
   17ad8:	b	17ae8 <__assert_fail@plt+0x63d4>
   17adc:	mov	r0, #33	; 0x21
   17ae0:	b	17ae8 <__assert_fail@plt+0x63d4>
   17ae4:	mov	r0, #34	; 0x22
   17ae8:	add	r0, r0, r0, lsl #1
   17aec:	ldr	r0, [r6, r0, lsl #2]
   17af0:	str	r0, [r4]
   17af4:	asr	r0, r0, #31
   17af8:	sub	sp, fp, #16
   17afc:	pop	{r4, r5, r6, r7, fp, pc}
   17b00:	add	r0, r5, #5
   17b04:	mov	r1, sp
   17b08:	mov	r2, #10
   17b0c:	bl	113b4 <strtol@plt>
   17b10:	sub	r1, r7, r6
   17b14:	cmp	r0, r1
   17b18:	bgt	17b48 <__assert_fail@plt+0x6434>
   17b1c:	cmp	r0, #0
   17b20:	bmi	17b48 <__assert_fail@plt+0x6434>
   17b24:	ldr	r1, [sp]
   17b28:	ldrb	r1, [r1]
   17b2c:	cmp	r1, #0
   17b30:	bne	17b48 <__assert_fail@plt+0x6434>
   17b34:	add	r0, r0, r6
   17b38:	str	r0, [r4]
   17b3c:	asr	r0, r0, #31
   17b40:	sub	sp, fp, #16
   17b44:	pop	{r4, r5, r6, r7, fp, pc}
   17b48:	mvn	r0, #0
   17b4c:	str	r0, [r4]
   17b50:	asr	r0, r0, #31
   17b54:	sub	sp, fp, #16
   17b58:	pop	{r4, r5, r6, r7, fp, pc}
   17b5c:	push	{r4, r5, r6, r7, fp, lr}
   17b60:	add	fp, sp, #16
   17b64:	sub	sp, sp, #8
   17b68:	mov	r6, r0
   17b6c:	movw	r0, #49576	; 0xc1a8
   17b70:	mov	r4, r1
   17b74:	mov	r5, #0
   17b78:	movt	r0, #2
   17b7c:	ldr	r1, [r0]
   17b80:	cmp	r1, r6
   17b84:	mov	r1, #0
   17b88:	beq	17dac <__assert_fail@plt+0x6698>
   17b8c:	ldr	r2, [r0, #12]
   17b90:	mov	r1, #1
   17b94:	cmp	r2, r6
   17b98:	beq	17dac <__assert_fail@plt+0x6698>
   17b9c:	ldr	r2, [r0, #24]
   17ba0:	mov	r1, #2
   17ba4:	cmp	r2, r6
   17ba8:	beq	17dac <__assert_fail@plt+0x6698>
   17bac:	ldr	r2, [r0, #36]	; 0x24
   17bb0:	mov	r1, #3
   17bb4:	cmp	r2, r6
   17bb8:	beq	17dac <__assert_fail@plt+0x6698>
   17bbc:	ldr	r2, [r0, #48]	; 0x30
   17bc0:	mov	r1, #4
   17bc4:	cmp	r2, r6
   17bc8:	beq	17dac <__assert_fail@plt+0x6698>
   17bcc:	ldr	r2, [r0, #60]	; 0x3c
   17bd0:	mov	r1, #5
   17bd4:	cmp	r2, r6
   17bd8:	beq	17dac <__assert_fail@plt+0x6698>
   17bdc:	ldr	r2, [r0, #72]	; 0x48
   17be0:	mov	r1, #6
   17be4:	cmp	r2, r6
   17be8:	beq	17dac <__assert_fail@plt+0x6698>
   17bec:	ldr	r2, [r0, #84]	; 0x54
   17bf0:	mov	r1, #7
   17bf4:	cmp	r2, r6
   17bf8:	beq	17dac <__assert_fail@plt+0x6698>
   17bfc:	ldr	r2, [r0, #96]	; 0x60
   17c00:	mov	r1, #8
   17c04:	cmp	r2, r6
   17c08:	beq	17dac <__assert_fail@plt+0x6698>
   17c0c:	ldr	r2, [r0, #108]	; 0x6c
   17c10:	mov	r1, #9
   17c14:	cmp	r2, r6
   17c18:	beq	17dac <__assert_fail@plt+0x6698>
   17c1c:	ldr	r2, [r0, #120]	; 0x78
   17c20:	mov	r1, #10
   17c24:	cmp	r2, r6
   17c28:	beq	17dac <__assert_fail@plt+0x6698>
   17c2c:	ldr	r2, [r0, #132]	; 0x84
   17c30:	mov	r1, #11
   17c34:	cmp	r2, r6
   17c38:	beq	17dac <__assert_fail@plt+0x6698>
   17c3c:	ldr	r2, [r0, #144]	; 0x90
   17c40:	mov	r1, #12
   17c44:	cmp	r2, r6
   17c48:	beq	17dac <__assert_fail@plt+0x6698>
   17c4c:	ldr	r2, [r0, #156]	; 0x9c
   17c50:	mov	r1, #13
   17c54:	cmp	r2, r6
   17c58:	beq	17dac <__assert_fail@plt+0x6698>
   17c5c:	ldr	r2, [r0, #168]	; 0xa8
   17c60:	mov	r1, #14
   17c64:	cmp	r2, r6
   17c68:	beq	17dac <__assert_fail@plt+0x6698>
   17c6c:	ldr	r2, [r0, #180]	; 0xb4
   17c70:	mov	r1, #15
   17c74:	cmp	r2, r6
   17c78:	beq	17dac <__assert_fail@plt+0x6698>
   17c7c:	ldr	r2, [r0, #192]	; 0xc0
   17c80:	mov	r1, #16
   17c84:	cmp	r2, r6
   17c88:	beq	17dac <__assert_fail@plt+0x6698>
   17c8c:	ldr	r2, [r0, #204]	; 0xcc
   17c90:	mov	r1, #17
   17c94:	cmp	r2, r6
   17c98:	beq	17dac <__assert_fail@plt+0x6698>
   17c9c:	ldr	r2, [r0, #216]	; 0xd8
   17ca0:	mov	r1, #18
   17ca4:	cmp	r2, r6
   17ca8:	beq	17dac <__assert_fail@plt+0x6698>
   17cac:	ldr	r2, [r0, #228]	; 0xe4
   17cb0:	mov	r1, #19
   17cb4:	cmp	r2, r6
   17cb8:	beq	17dac <__assert_fail@plt+0x6698>
   17cbc:	ldr	r2, [r0, #240]	; 0xf0
   17cc0:	mov	r1, #20
   17cc4:	cmp	r2, r6
   17cc8:	beq	17dac <__assert_fail@plt+0x6698>
   17ccc:	ldr	r2, [r0, #252]	; 0xfc
   17cd0:	mov	r1, #21
   17cd4:	cmp	r2, r6
   17cd8:	beq	17dac <__assert_fail@plt+0x6698>
   17cdc:	ldr	r2, [r0, #264]	; 0x108
   17ce0:	mov	r1, #22
   17ce4:	cmp	r2, r6
   17ce8:	beq	17dac <__assert_fail@plt+0x6698>
   17cec:	ldr	r2, [r0, #276]	; 0x114
   17cf0:	mov	r1, #23
   17cf4:	cmp	r2, r6
   17cf8:	beq	17dac <__assert_fail@plt+0x6698>
   17cfc:	ldr	r2, [r0, #288]	; 0x120
   17d00:	mov	r1, #24
   17d04:	cmp	r2, r6
   17d08:	beq	17dac <__assert_fail@plt+0x6698>
   17d0c:	ldr	r2, [r0, #300]	; 0x12c
   17d10:	mov	r1, #25
   17d14:	cmp	r2, r6
   17d18:	beq	17dac <__assert_fail@plt+0x6698>
   17d1c:	ldr	r2, [r0, #312]	; 0x138
   17d20:	mov	r1, #26
   17d24:	cmp	r2, r6
   17d28:	beq	17dac <__assert_fail@plt+0x6698>
   17d2c:	ldr	r2, [r0, #324]	; 0x144
   17d30:	mov	r1, #27
   17d34:	cmp	r2, r6
   17d38:	beq	17dac <__assert_fail@plt+0x6698>
   17d3c:	ldr	r2, [r0, #336]	; 0x150
   17d40:	mov	r1, #28
   17d44:	cmp	r2, r6
   17d48:	beq	17dac <__assert_fail@plt+0x6698>
   17d4c:	ldr	r2, [r0, #348]	; 0x15c
   17d50:	mov	r1, #29
   17d54:	cmp	r2, r6
   17d58:	beq	17dac <__assert_fail@plt+0x6698>
   17d5c:	ldr	r2, [r0, #360]	; 0x168
   17d60:	mov	r1, #30
   17d64:	cmp	r2, r6
   17d68:	beq	17dac <__assert_fail@plt+0x6698>
   17d6c:	ldr	r2, [r0, #372]	; 0x174
   17d70:	mov	r1, #31
   17d74:	cmp	r2, r6
   17d78:	beq	17dac <__assert_fail@plt+0x6698>
   17d7c:	ldr	r2, [r0, #384]	; 0x180
   17d80:	mov	r1, #32
   17d84:	cmp	r2, r6
   17d88:	beq	17dac <__assert_fail@plt+0x6698>
   17d8c:	ldr	r2, [r0, #396]	; 0x18c
   17d90:	mov	r1, #33	; 0x21
   17d94:	cmp	r2, r6
   17d98:	beq	17dac <__assert_fail@plt+0x6698>
   17d9c:	ldr	r2, [r0, #408]	; 0x198
   17da0:	mov	r1, #34	; 0x22
   17da4:	cmp	r2, r6
   17da8:	bne	17dcc <__assert_fail@plt+0x66b8>
   17dac:	add	r1, r1, r1, lsl #1
   17db0:	add	r0, r0, r1, lsl #2
   17db4:	add	r1, r0, #4
   17db8:	mov	r0, r4
   17dbc:	bl	114d4 <strcpy@plt>
   17dc0:	mov	r0, r5
   17dc4:	sub	sp, fp, #16
   17dc8:	pop	{r4, r5, r6, r7, fp, pc}
   17dcc:	bl	116d8 <__libc_current_sigrtmin@plt>
   17dd0:	mov	r7, r0
   17dd4:	mvn	r5, #0
   17dd8:	bl	11594 <__libc_current_sigrtmax@plt>
   17ddc:	cmp	r7, r6
   17de0:	bgt	17dc0 <__assert_fail@plt+0x66ac>
   17de4:	cmp	r0, r6
   17de8:	blt	17dc0 <__assert_fail@plt+0x66ac>
   17dec:	sub	r1, r0, r7
   17df0:	add	r1, r1, r1, lsr #31
   17df4:	add	r1, r7, r1, asr #1
   17df8:	cmp	r1, r6
   17dfc:	bge	17e28 <__assert_fail@plt+0x6714>
   17e00:	mov	r1, #88	; 0x58
   17e04:	mov	r7, r0
   17e08:	strh	r1, [r4, #4]
   17e0c:	movw	r1, #21586	; 0x5452
   17e10:	movt	r1, #16717	; 0x414d
   17e14:	str	r1, [r4]
   17e18:	subs	r0, r6, r7
   17e1c:	mov	r5, #0
   17e20:	bne	17e48 <__assert_fail@plt+0x6734>
   17e24:	b	17dc0 <__assert_fail@plt+0x66ac>
   17e28:	mov	r0, #78	; 0x4e
   17e2c:	strh	r0, [r4, #4]
   17e30:	movw	r0, #21586	; 0x5452
   17e34:	movt	r0, #18765	; 0x494d
   17e38:	str	r0, [r4]
   17e3c:	subs	r0, r6, r7
   17e40:	mov	r5, #0
   17e44:	beq	17dc0 <__assert_fail@plt+0x66ac>
   17e48:	movw	r3, #45828	; 0xb304
   17e4c:	str	r0, [sp]
   17e50:	add	r0, r4, #5
   17e54:	mov	r1, #1
   17e58:	mvn	r2, #0
   17e5c:	movt	r3, #1
   17e60:	bl	115dc <__sprintf_chk@plt>
   17e64:	mov	r0, r5
   17e68:	sub	sp, fp, #16
   17e6c:	pop	{r4, r5, r6, r7, fp, pc}
   17e70:	push	{r4, r5, r6, r7, fp, lr}
   17e74:	add	fp, sp, #16
   17e78:	mov	r4, r0
   17e7c:	cmp	r0, #2
   17e80:	bhi	17eb0 <__assert_fail@plt+0x679c>
   17e84:	mov	r0, r4
   17e88:	bl	19af4 <__assert_fail@plt+0x83e0>
   17e8c:	mov	r5, r0
   17e90:	bl	115d0 <__errno_location@plt>
   17e94:	ldr	r7, [r0]
   17e98:	mov	r6, r0
   17e9c:	mov	r0, r4
   17ea0:	bl	116fc <close@plt>
   17ea4:	mov	r0, r5
   17ea8:	str	r7, [r6]
   17eac:	pop	{r4, r5, r6, r7, fp, pc}
   17eb0:	mov	r0, r4
   17eb4:	pop	{r4, r5, r6, r7, fp, pc}
   17eb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17ebc:	add	fp, sp, #24
   17ec0:	sub	sp, sp, #32
   17ec4:	ldr	r6, [fp, #12]
   17ec8:	ldr	r7, [fp, #8]
   17ecc:	mov	r4, r2
   17ed0:	mov	r8, r0
   17ed4:	cmp	r1, #0
   17ed8:	beq	17f00 <__assert_fail@plt+0x67ec>
   17edc:	movw	r2, #45832	; 0xb308
   17ee0:	mov	r5, r1
   17ee4:	str	r3, [sp, #4]
   17ee8:	str	r4, [sp]
   17eec:	mov	r0, r8
   17ef0:	mov	r1, #1
   17ef4:	movt	r2, #1
   17ef8:	mov	r3, r5
   17efc:	b	17f18 <__assert_fail@plt+0x6804>
   17f00:	movw	r2, #45844	; 0xb314
   17f04:	str	r3, [sp]
   17f08:	mov	r0, r8
   17f0c:	mov	r1, #1
   17f10:	mov	r3, r4
   17f14:	movt	r2, #1
   17f18:	bl	11624 <__fprintf_chk@plt>
   17f1c:	movw	r1, #45851	; 0xb31b
   17f20:	mov	r0, #0
   17f24:	mov	r2, #5
   17f28:	movt	r1, #1
   17f2c:	bl	11444 <dcgettext@plt>
   17f30:	movw	r2, #46569	; 0xb5e9
   17f34:	mov	r3, r0
   17f38:	movw	r0, #2022	; 0x7e6
   17f3c:	mov	r1, #1
   17f40:	movt	r2, #1
   17f44:	str	r0, [sp]
   17f48:	mov	r0, r8
   17f4c:	bl	11624 <__fprintf_chk@plt>
   17f50:	movw	r4, #42212	; 0xa4e4
   17f54:	mov	r1, r8
   17f58:	movt	r4, #1
   17f5c:	mov	r0, r4
   17f60:	bl	11390 <fputs_unlocked@plt>
   17f64:	movw	r1, #45855	; 0xb31f
   17f68:	mov	r0, #0
   17f6c:	mov	r2, #5
   17f70:	movt	r1, #1
   17f74:	bl	11444 <dcgettext@plt>
   17f78:	movw	r3, #46026	; 0xb3ca
   17f7c:	mov	r2, r0
   17f80:	mov	r0, r8
   17f84:	mov	r1, #1
   17f88:	movt	r3, #1
   17f8c:	bl	11624 <__fprintf_chk@plt>
   17f90:	mov	r0, r4
   17f94:	mov	r1, r8
   17f98:	bl	11390 <fputs_unlocked@plt>
   17f9c:	cmp	r6, #9
   17fa0:	bhi	17fdc <__assert_fail@plt+0x68c8>
   17fa4:	add	r0, pc, #0
   17fa8:	ldr	pc, [r0, r6, lsl #2]
   17fac:	ldrdeq	r7, [r1], -r4
   17fb0:	andeq	r7, r1, r8, ror #31
   17fb4:	andeq	r8, r1, r8, lsl r0
   17fb8:	andeq	r8, r1, r0, asr #32
   17fbc:	andeq	r8, r1, r8, rrx
   17fc0:	muleq	r1, r0, r0
   17fc4:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fc8:	strdeq	r8, [r1], -r0
   17fcc:	muleq	r1, r8, r1
   17fd0:	andeq	r8, r1, r0, asr #2
   17fd4:	sub	sp, fp, #24
   17fd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17fdc:	movw	r1, #46379	; 0xb52b
   17fe0:	movt	r1, #1
   17fe4:	b	18148 <__assert_fail@plt+0x6a34>
   17fe8:	movw	r1, #46060	; 0xb3ec
   17fec:	mov	r0, #0
   17ff0:	mov	r2, #5
   17ff4:	movt	r1, #1
   17ff8:	bl	11444 <dcgettext@plt>
   17ffc:	ldr	r3, [r7]
   18000:	mov	r2, r0
   18004:	mov	r0, r8
   18008:	mov	r1, #1
   1800c:	sub	sp, fp, #24
   18010:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18014:	b	11624 <__fprintf_chk@plt>
   18018:	movw	r1, #46076	; 0xb3fc
   1801c:	mov	r0, #0
   18020:	mov	r2, #5
   18024:	movt	r1, #1
   18028:	bl	11444 <dcgettext@plt>
   1802c:	mov	r2, r0
   18030:	ldr	r3, [r7]
   18034:	ldr	r0, [r7, #4]
   18038:	str	r0, [sp]
   1803c:	b	1812c <__assert_fail@plt+0x6a18>
   18040:	movw	r1, #46099	; 0xb413
   18044:	mov	r0, #0
   18048:	mov	r2, #5
   1804c:	movt	r1, #1
   18050:	bl	11444 <dcgettext@plt>
   18054:	mov	r2, r0
   18058:	ldr	r3, [r7]
   1805c:	ldmib	r7, {r0, r1}
   18060:	stm	sp, {r0, r1}
   18064:	b	1812c <__assert_fail@plt+0x6a18>
   18068:	movw	r1, #46127	; 0xb42f
   1806c:	mov	r0, #0
   18070:	mov	r2, #5
   18074:	movt	r1, #1
   18078:	bl	11444 <dcgettext@plt>
   1807c:	ldr	r3, [r7]
   18080:	mov	r2, r0
   18084:	ldmib	r7, {r0, r1, r7}
   18088:	stm	sp, {r0, r1, r7}
   1808c:	b	1812c <__assert_fail@plt+0x6a18>
   18090:	movw	r1, #46159	; 0xb44f
   18094:	mov	r0, #0
   18098:	mov	r2, #5
   1809c:	movt	r1, #1
   180a0:	bl	11444 <dcgettext@plt>
   180a4:	ldr	r3, [r7]
   180a8:	mov	r2, r0
   180ac:	ldmib	r7, {r0, r1, r6, r7}
   180b0:	stm	sp, {r0, r1, r6, r7}
   180b4:	b	1812c <__assert_fail@plt+0x6a18>
   180b8:	movw	r1, #46195	; 0xb473
   180bc:	mov	r0, #0
   180c0:	mov	r2, #5
   180c4:	movt	r1, #1
   180c8:	bl	11444 <dcgettext@plt>
   180cc:	mov	r2, r0
   180d0:	ldr	r3, [r7]
   180d4:	ldmib	r7, {r0, r1, r6}
   180d8:	ldr	r5, [r7, #16]
   180dc:	ldr	r7, [r7, #20]
   180e0:	stm	sp, {r0, r1, r6}
   180e4:	str	r5, [sp, #12]
   180e8:	str	r7, [sp, #16]
   180ec:	b	1812c <__assert_fail@plt+0x6a18>
   180f0:	movw	r1, #46235	; 0xb49b
   180f4:	mov	r0, #0
   180f8:	mov	r2, #5
   180fc:	movt	r1, #1
   18100:	bl	11444 <dcgettext@plt>
   18104:	mov	r2, r0
   18108:	ldr	r3, [r7]
   1810c:	ldmib	r7, {r0, r1, r6}
   18110:	ldr	r5, [r7, #16]
   18114:	ldr	r4, [r7, #20]
   18118:	ldr	r7, [r7, #24]
   1811c:	stm	sp, {r0, r1, r6}
   18120:	str	r5, [sp, #12]
   18124:	str	r4, [sp, #16]
   18128:	str	r7, [sp, #20]
   1812c:	mov	r0, r8
   18130:	mov	r1, #1
   18134:	bl	11624 <__fprintf_chk@plt>
   18138:	sub	sp, fp, #24
   1813c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18140:	movw	r1, #46327	; 0xb4f7
   18144:	movt	r1, #1
   18148:	mov	r0, #0
   1814c:	mov	r2, #5
   18150:	bl	11444 <dcgettext@plt>
   18154:	mov	ip, r0
   18158:	ldr	r3, [r7]
   1815c:	ldr	r0, [r7, #4]
   18160:	ldr	r1, [r7, #8]
   18164:	ldr	r6, [r7, #12]
   18168:	ldr	r5, [r7, #16]
   1816c:	ldr	r4, [r7, #20]
   18170:	ldr	r2, [r7, #24]
   18174:	ldr	lr, [r7, #28]
   18178:	ldr	r7, [r7, #32]
   1817c:	stm	sp, {r0, r1, r6}
   18180:	str	r5, [sp, #12]
   18184:	str	r4, [sp, #16]
   18188:	str	r2, [sp, #20]
   1818c:	str	lr, [sp, #24]
   18190:	str	r7, [sp, #28]
   18194:	b	181dc <__assert_fail@plt+0x6ac8>
   18198:	movw	r1, #46279	; 0xb4c7
   1819c:	mov	r0, #0
   181a0:	mov	r2, #5
   181a4:	movt	r1, #1
   181a8:	bl	11444 <dcgettext@plt>
   181ac:	mov	ip, r0
   181b0:	ldr	r3, [r7]
   181b4:	ldmib	r7, {r0, r1, r6}
   181b8:	ldr	r5, [r7, #16]
   181bc:	ldr	r4, [r7, #20]
   181c0:	ldr	r2, [r7, #24]
   181c4:	ldr	r7, [r7, #28]
   181c8:	stm	sp, {r0, r1, r6}
   181cc:	str	r5, [sp, #12]
   181d0:	str	r4, [sp, #16]
   181d4:	str	r2, [sp, #20]
   181d8:	str	r7, [sp, #24]
   181dc:	mov	r0, r8
   181e0:	mov	r1, #1
   181e4:	mov	r2, ip
   181e8:	bl	11624 <__fprintf_chk@plt>
   181ec:	sub	sp, fp, #24
   181f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   181f4:	push	{r4, sl, fp, lr}
   181f8:	add	fp, sp, #8
   181fc:	sub	sp, sp, #8
   18200:	ldr	ip, [fp, #8]
   18204:	mov	lr, #0
   18208:	ldr	r4, [ip, lr, lsl #2]
   1820c:	add	lr, lr, #1
   18210:	cmp	r4, #0
   18214:	bne	18208 <__assert_fail@plt+0x6af4>
   18218:	sub	r4, lr, #1
   1821c:	str	ip, [sp]
   18220:	str	r4, [sp, #4]
   18224:	bl	17eb8 <__assert_fail@plt+0x67a4>
   18228:	sub	sp, fp, #8
   1822c:	pop	{r4, sl, fp, pc}
   18230:	push	{fp, lr}
   18234:	mov	fp, sp
   18238:	sub	sp, sp, #48	; 0x30
   1823c:	ldr	ip, [fp, #8]
   18240:	ldr	lr, [ip]
   18244:	cmp	lr, #0
   18248:	str	lr, [sp, #8]
   1824c:	beq	182e8 <__assert_fail@plt+0x6bd4>
   18250:	ldr	lr, [ip, #4]
   18254:	cmp	lr, #0
   18258:	str	lr, [sp, #12]
   1825c:	beq	182f0 <__assert_fail@plt+0x6bdc>
   18260:	ldr	lr, [ip, #8]
   18264:	cmp	lr, #0
   18268:	str	lr, [sp, #16]
   1826c:	beq	182f8 <__assert_fail@plt+0x6be4>
   18270:	ldr	lr, [ip, #12]
   18274:	cmp	lr, #0
   18278:	str	lr, [sp, #20]
   1827c:	beq	18300 <__assert_fail@plt+0x6bec>
   18280:	ldr	lr, [ip, #16]
   18284:	cmp	lr, #0
   18288:	str	lr, [sp, #24]
   1828c:	beq	18308 <__assert_fail@plt+0x6bf4>
   18290:	ldr	lr, [ip, #20]
   18294:	cmp	lr, #0
   18298:	str	lr, [sp, #28]
   1829c:	beq	18310 <__assert_fail@plt+0x6bfc>
   182a0:	ldr	lr, [ip, #24]
   182a4:	cmp	lr, #0
   182a8:	str	lr, [sp, #32]
   182ac:	beq	18318 <__assert_fail@plt+0x6c04>
   182b0:	ldr	lr, [ip, #28]
   182b4:	cmp	lr, #0
   182b8:	str	lr, [sp, #36]	; 0x24
   182bc:	beq	18320 <__assert_fail@plt+0x6c0c>
   182c0:	ldr	lr, [ip, #32]
   182c4:	cmp	lr, #0
   182c8:	str	lr, [sp, #40]	; 0x28
   182cc:	beq	18328 <__assert_fail@plt+0x6c14>
   182d0:	ldr	lr, [ip, #36]	; 0x24
   182d4:	mov	ip, #10
   182d8:	cmp	lr, #0
   182dc:	str	lr, [sp, #44]	; 0x2c
   182e0:	movweq	ip, #9
   182e4:	b	1832c <__assert_fail@plt+0x6c18>
   182e8:	mov	ip, #0
   182ec:	b	1832c <__assert_fail@plt+0x6c18>
   182f0:	mov	ip, #1
   182f4:	b	1832c <__assert_fail@plt+0x6c18>
   182f8:	mov	ip, #2
   182fc:	b	1832c <__assert_fail@plt+0x6c18>
   18300:	mov	ip, #3
   18304:	b	1832c <__assert_fail@plt+0x6c18>
   18308:	mov	ip, #4
   1830c:	b	1832c <__assert_fail@plt+0x6c18>
   18310:	mov	ip, #5
   18314:	b	1832c <__assert_fail@plt+0x6c18>
   18318:	mov	ip, #6
   1831c:	b	1832c <__assert_fail@plt+0x6c18>
   18320:	mov	ip, #7
   18324:	b	1832c <__assert_fail@plt+0x6c18>
   18328:	mov	ip, #8
   1832c:	add	lr, sp, #8
   18330:	str	ip, [sp, #4]
   18334:	str	lr, [sp]
   18338:	bl	17eb8 <__assert_fail@plt+0x67a4>
   1833c:	mov	sp, fp
   18340:	pop	{fp, pc}
   18344:	push	{fp, lr}
   18348:	mov	fp, sp
   1834c:	sub	sp, sp, #56	; 0x38
   18350:	add	ip, fp, #8
   18354:	str	ip, [sp, #12]
   18358:	ldr	lr, [fp, #8]
   1835c:	cmp	lr, #0
   18360:	str	lr, [sp, #16]
   18364:	beq	18400 <__assert_fail@plt+0x6cec>
   18368:	ldr	lr, [ip, #4]
   1836c:	cmp	lr, #0
   18370:	str	lr, [sp, #20]
   18374:	beq	18408 <__assert_fail@plt+0x6cf4>
   18378:	ldr	lr, [ip, #8]
   1837c:	cmp	lr, #0
   18380:	str	lr, [sp, #24]
   18384:	beq	18410 <__assert_fail@plt+0x6cfc>
   18388:	ldr	lr, [ip, #12]
   1838c:	cmp	lr, #0
   18390:	str	lr, [sp, #28]
   18394:	beq	18418 <__assert_fail@plt+0x6d04>
   18398:	ldr	lr, [ip, #16]
   1839c:	cmp	lr, #0
   183a0:	str	lr, [sp, #32]
   183a4:	beq	18420 <__assert_fail@plt+0x6d0c>
   183a8:	ldr	lr, [ip, #20]
   183ac:	cmp	lr, #0
   183b0:	str	lr, [sp, #36]	; 0x24
   183b4:	beq	18428 <__assert_fail@plt+0x6d14>
   183b8:	ldr	lr, [ip, #24]
   183bc:	cmp	lr, #0
   183c0:	str	lr, [sp, #40]	; 0x28
   183c4:	beq	18430 <__assert_fail@plt+0x6d1c>
   183c8:	ldr	lr, [ip, #28]
   183cc:	cmp	lr, #0
   183d0:	str	lr, [sp, #44]	; 0x2c
   183d4:	beq	18438 <__assert_fail@plt+0x6d24>
   183d8:	ldr	lr, [ip, #32]
   183dc:	cmp	lr, #0
   183e0:	str	lr, [sp, #48]	; 0x30
   183e4:	beq	18440 <__assert_fail@plt+0x6d2c>
   183e8:	ldr	lr, [ip, #36]	; 0x24
   183ec:	mov	ip, #10
   183f0:	cmp	lr, #0
   183f4:	str	lr, [sp, #52]	; 0x34
   183f8:	movweq	ip, #9
   183fc:	b	18444 <__assert_fail@plt+0x6d30>
   18400:	mov	ip, #0
   18404:	b	18444 <__assert_fail@plt+0x6d30>
   18408:	mov	ip, #1
   1840c:	b	18444 <__assert_fail@plt+0x6d30>
   18410:	mov	ip, #2
   18414:	b	18444 <__assert_fail@plt+0x6d30>
   18418:	mov	ip, #3
   1841c:	b	18444 <__assert_fail@plt+0x6d30>
   18420:	mov	ip, #4
   18424:	b	18444 <__assert_fail@plt+0x6d30>
   18428:	mov	ip, #5
   1842c:	b	18444 <__assert_fail@plt+0x6d30>
   18430:	mov	ip, #6
   18434:	b	18444 <__assert_fail@plt+0x6d30>
   18438:	mov	ip, #7
   1843c:	b	18444 <__assert_fail@plt+0x6d30>
   18440:	mov	ip, #8
   18444:	add	lr, sp, #16
   18448:	str	ip, [sp, #4]
   1844c:	str	lr, [sp]
   18450:	bl	17eb8 <__assert_fail@plt+0x67a4>
   18454:	mov	sp, fp
   18458:	pop	{fp, pc}
   1845c:	push	{fp, lr}
   18460:	mov	fp, sp
   18464:	movw	r0, #50020	; 0xc364
   18468:	movt	r0, #2
   1846c:	ldr	r1, [r0]
   18470:	movw	r0, #42212	; 0xa4e4
   18474:	movt	r0, #1
   18478:	bl	11390 <fputs_unlocked@plt>
   1847c:	movw	r1, #46439	; 0xb567
   18480:	mov	r0, #0
   18484:	mov	r2, #5
   18488:	movt	r1, #1
   1848c:	bl	11444 <dcgettext@plt>
   18490:	movw	r2, #46459	; 0xb57b
   18494:	mov	r1, r0
   18498:	mov	r0, #1
   1849c:	movt	r2, #1
   184a0:	bl	11600 <__printf_chk@plt>
   184a4:	movw	r1, #46481	; 0xb591
   184a8:	mov	r0, #0
   184ac:	mov	r2, #5
   184b0:	movt	r1, #1
   184b4:	bl	11444 <dcgettext@plt>
   184b8:	movw	r2, #43283	; 0xa913
   184bc:	movw	r3, #43996	; 0xabdc
   184c0:	mov	r1, r0
   184c4:	mov	r0, #1
   184c8:	movt	r2, #1
   184cc:	movt	r3, #1
   184d0:	bl	11600 <__printf_chk@plt>
   184d4:	movw	r1, #46501	; 0xb5a5
   184d8:	mov	r0, #0
   184dc:	mov	r2, #5
   184e0:	movt	r1, #1
   184e4:	bl	11444 <dcgettext@plt>
   184e8:	movw	r2, #46540	; 0xb5cc
   184ec:	mov	r1, r0
   184f0:	mov	r0, #1
   184f4:	movt	r2, #1
   184f8:	pop	{fp, lr}
   184fc:	b	11600 <__printf_chk@plt>
   18500:	push	{fp, lr}
   18504:	mov	fp, sp
   18508:	bl	116cc <aligned_alloc@plt>
   1850c:	cmp	r0, #0
   18510:	popne	{fp, pc}
   18514:	bl	18acc <__assert_fail@plt+0x73b8>
   18518:	push	{r4, r5, r6, sl, fp, lr}
   1851c:	add	fp, sp, #16
   18520:	mov	r4, r2
   18524:	mov	r5, r1
   18528:	mov	r6, r0
   1852c:	bl	19ab8 <__assert_fail@plt+0x83a4>
   18530:	cmp	r0, #0
   18534:	popne	{r4, r5, r6, sl, fp, pc}
   18538:	cmp	r6, #0
   1853c:	beq	18550 <__assert_fail@plt+0x6e3c>
   18540:	cmp	r5, #0
   18544:	cmpne	r4, #0
   18548:	bne	18550 <__assert_fail@plt+0x6e3c>
   1854c:	pop	{r4, r5, r6, sl, fp, pc}
   18550:	bl	18acc <__assert_fail@plt+0x73b8>
   18554:	push	{r4, r5, r6, sl, fp, lr}
   18558:	add	fp, sp, #16
   1855c:	mov	r4, r2
   18560:	mov	r5, r1
   18564:	mov	r6, r0
   18568:	bl	19ab8 <__assert_fail@plt+0x83a4>
   1856c:	cmp	r0, #0
   18570:	popne	{r4, r5, r6, sl, fp, pc}
   18574:	cmp	r6, #0
   18578:	beq	1858c <__assert_fail@plt+0x6e78>
   1857c:	cmp	r5, #0
   18580:	cmpne	r4, #0
   18584:	bne	1858c <__assert_fail@plt+0x6e78>
   18588:	pop	{r4, r5, r6, sl, fp, pc}
   1858c:	bl	18acc <__assert_fail@plt+0x73b8>
   18590:	push	{fp, lr}
   18594:	mov	fp, sp
   18598:	bl	19914 <__assert_fail@plt+0x8200>
   1859c:	cmp	r0, #0
   185a0:	popne	{fp, pc}
   185a4:	bl	18acc <__assert_fail@plt+0x73b8>
   185a8:	push	{fp, lr}
   185ac:	mov	fp, sp
   185b0:	bl	19914 <__assert_fail@plt+0x8200>
   185b4:	cmp	r0, #0
   185b8:	popne	{fp, pc}
   185bc:	bl	18acc <__assert_fail@plt+0x73b8>
   185c0:	push	{fp, lr}
   185c4:	mov	fp, sp
   185c8:	bl	19914 <__assert_fail@plt+0x8200>
   185cc:	cmp	r0, #0
   185d0:	popne	{fp, pc}
   185d4:	bl	18acc <__assert_fail@plt+0x73b8>
   185d8:	push	{r4, r5, fp, lr}
   185dc:	add	fp, sp, #8
   185e0:	mov	r4, r1
   185e4:	mov	r5, r0
   185e8:	bl	19944 <__assert_fail@plt+0x8230>
   185ec:	cmp	r0, #0
   185f0:	popne	{r4, r5, fp, pc}
   185f4:	cmp	r5, #0
   185f8:	beq	18608 <__assert_fail@plt+0x6ef4>
   185fc:	cmp	r4, #0
   18600:	bne	18608 <__assert_fail@plt+0x6ef4>
   18604:	pop	{r4, r5, fp, pc}
   18608:	bl	18acc <__assert_fail@plt+0x73b8>
   1860c:	push	{fp, lr}
   18610:	mov	fp, sp
   18614:	cmp	r1, #0
   18618:	orreq	r1, r1, #1
   1861c:	bl	19944 <__assert_fail@plt+0x8230>
   18620:	cmp	r0, #0
   18624:	popne	{fp, pc}
   18628:	bl	18acc <__assert_fail@plt+0x73b8>
   1862c:	push	{fp, lr}
   18630:	mov	fp, sp
   18634:	clz	r3, r2
   18638:	lsr	ip, r3, #5
   1863c:	clz	r3, r1
   18640:	lsr	r3, r3, #5
   18644:	orrs	r3, r3, ip
   18648:	movwne	r1, #1
   1864c:	movwne	r2, #1
   18650:	bl	19ab8 <__assert_fail@plt+0x83a4>
   18654:	cmp	r0, #0
   18658:	popne	{fp, pc}
   1865c:	bl	18acc <__assert_fail@plt+0x73b8>
   18660:	push	{fp, lr}
   18664:	mov	fp, sp
   18668:	mov	r2, r1
   1866c:	mov	r1, r0
   18670:	mov	r0, #0
   18674:	bl	19ab8 <__assert_fail@plt+0x83a4>
   18678:	cmp	r0, #0
   1867c:	popne	{fp, pc}
   18680:	bl	18acc <__assert_fail@plt+0x73b8>
   18684:	push	{fp, lr}
   18688:	mov	fp, sp
   1868c:	mov	r2, r1
   18690:	mov	r1, r0
   18694:	clz	r0, r2
   18698:	clz	r3, r1
   1869c:	lsr	r0, r0, #5
   186a0:	lsr	r3, r3, #5
   186a4:	orrs	r0, r3, r0
   186a8:	mov	r0, #0
   186ac:	movwne	r1, #1
   186b0:	movwne	r2, #1
   186b4:	bl	19ab8 <__assert_fail@plt+0x83a4>
   186b8:	cmp	r0, #0
   186bc:	popne	{fp, pc}
   186c0:	bl	18acc <__assert_fail@plt+0x73b8>
   186c4:	push	{r4, r5, r6, sl, fp, lr}
   186c8:	add	fp, sp, #16
   186cc:	ldr	r5, [r1]
   186d0:	mov	r4, r1
   186d4:	mov	r6, r0
   186d8:	cmp	r0, #0
   186dc:	beq	186f4 <__assert_fail@plt+0x6fe0>
   186e0:	mov	r0, #1
   186e4:	add	r0, r0, r5, lsr #1
   186e8:	adds	r5, r5, r0
   186ec:	bcc	186fc <__assert_fail@plt+0x6fe8>
   186f0:	b	18738 <__assert_fail@plt+0x7024>
   186f4:	cmp	r5, #0
   186f8:	movweq	r5, #64	; 0x40
   186fc:	mov	r0, r6
   18700:	mov	r1, r5
   18704:	mov	r2, #1
   18708:	bl	19ab8 <__assert_fail@plt+0x83a4>
   1870c:	cmp	r5, #0
   18710:	mov	r1, r5
   18714:	movwne	r1, #1
   18718:	cmp	r0, #0
   1871c:	bne	18730 <__assert_fail@plt+0x701c>
   18720:	clz	r2, r6
   18724:	lsr	r2, r2, #5
   18728:	orrs	r1, r2, r1
   1872c:	bne	18738 <__assert_fail@plt+0x7024>
   18730:	str	r5, [r4]
   18734:	pop	{r4, r5, r6, sl, fp, pc}
   18738:	bl	18acc <__assert_fail@plt+0x73b8>
   1873c:	push	{r4, r5, r6, r7, fp, lr}
   18740:	add	fp, sp, #16
   18744:	ldr	r5, [r1]
   18748:	mov	r6, r2
   1874c:	mov	r4, r1
   18750:	mov	r7, r0
   18754:	cmp	r0, #0
   18758:	beq	18770 <__assert_fail@plt+0x705c>
   1875c:	mov	r0, #1
   18760:	add	r0, r0, r5, lsr #1
   18764:	adds	r5, r5, r0
   18768:	bcc	18788 <__assert_fail@plt+0x7074>
   1876c:	b	187bc <__assert_fail@plt+0x70a8>
   18770:	cmp	r5, #0
   18774:	bne	18788 <__assert_fail@plt+0x7074>
   18778:	mov	r0, #64	; 0x40
   1877c:	cmp	r6, #64	; 0x40
   18780:	udiv	r5, r0, r6
   18784:	addhi	r5, r5, #1
   18788:	mov	r0, r7
   1878c:	mov	r1, r5
   18790:	mov	r2, r6
   18794:	bl	19ab8 <__assert_fail@plt+0x83a4>
   18798:	cmp	r0, #0
   1879c:	bne	187b4 <__assert_fail@plt+0x70a0>
   187a0:	cmp	r7, #0
   187a4:	beq	187bc <__assert_fail@plt+0x70a8>
   187a8:	cmp	r6, #0
   187ac:	cmpne	r5, #0
   187b0:	bne	187bc <__assert_fail@plt+0x70a8>
   187b4:	str	r5, [r4]
   187b8:	pop	{r4, r5, r6, r7, fp, pc}
   187bc:	bl	18acc <__assert_fail@plt+0x73b8>
   187c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   187c4:	add	fp, sp, #24
   187c8:	mov	r8, r1
   187cc:	ldr	r1, [r1]
   187d0:	mov	r5, r0
   187d4:	add	r0, r1, r1, asr #1
   187d8:	cmp	r0, r1
   187dc:	mvnvs	r0, #-2147483648	; 0x80000000
   187e0:	cmp	r0, r3
   187e4:	mov	r7, r0
   187e8:	movgt	r7, r3
   187ec:	cmn	r3, #1
   187f0:	movle	r7, r0
   187f4:	ldr	r0, [fp, #8]
   187f8:	cmn	r0, #1
   187fc:	ble	18824 <__assert_fail@plt+0x7110>
   18800:	cmp	r0, #0
   18804:	beq	18878 <__assert_fail@plt+0x7164>
   18808:	cmn	r7, #1
   1880c:	ble	1884c <__assert_fail@plt+0x7138>
   18810:	mvn	r4, #-2147483648	; 0x80000000
   18814:	udiv	r6, r4, r0
   18818:	cmp	r6, r7
   1881c:	bge	18878 <__assert_fail@plt+0x7164>
   18820:	b	18888 <__assert_fail@plt+0x7174>
   18824:	cmn	r7, #1
   18828:	ble	18868 <__assert_fail@plt+0x7154>
   1882c:	cmn	r0, #1
   18830:	beq	18878 <__assert_fail@plt+0x7164>
   18834:	mov	r6, #-2147483648	; 0x80000000
   18838:	mvn	r4, #-2147483648	; 0x80000000
   1883c:	sdiv	r6, r6, r0
   18840:	cmp	r6, r7
   18844:	bge	18878 <__assert_fail@plt+0x7164>
   18848:	b	18888 <__assert_fail@plt+0x7174>
   1884c:	beq	18878 <__assert_fail@plt+0x7164>
   18850:	mov	r6, #-2147483648	; 0x80000000
   18854:	mvn	r4, #-2147483648	; 0x80000000
   18858:	sdiv	r6, r6, r7
   1885c:	cmp	r6, r0
   18860:	bge	18878 <__assert_fail@plt+0x7164>
   18864:	b	18888 <__assert_fail@plt+0x7174>
   18868:	mvn	r4, #-2147483648	; 0x80000000
   1886c:	sdiv	r6, r4, r0
   18870:	cmp	r7, r6
   18874:	blt	18888 <__assert_fail@plt+0x7174>
   18878:	mul	r6, r7, r0
   1887c:	mov	r4, #64	; 0x40
   18880:	cmp	r6, #63	; 0x3f
   18884:	bgt	18890 <__assert_fail@plt+0x717c>
   18888:	sdiv	r7, r4, r0
   1888c:	mul	r6, r7, r0
   18890:	cmp	r5, #0
   18894:	moveq	r4, #0
   18898:	streq	r4, [r8]
   1889c:	sub	r4, r7, r1
   188a0:	cmp	r4, r2
   188a4:	bge	18950 <__assert_fail@plt+0x723c>
   188a8:	add	r7, r1, r2
   188ac:	mov	r6, #0
   188b0:	mov	r2, #0
   188b4:	cmp	r7, r3
   188b8:	movwgt	r6, #1
   188bc:	cmn	r3, #1
   188c0:	movwgt	r2, #1
   188c4:	cmp	r7, r1
   188c8:	bvs	18984 <__assert_fail@plt+0x7270>
   188cc:	ands	r1, r2, r6
   188d0:	bne	18984 <__assert_fail@plt+0x7270>
   188d4:	cmn	r0, #1
   188d8:	ble	18900 <__assert_fail@plt+0x71ec>
   188dc:	cmp	r0, #0
   188e0:	beq	1894c <__assert_fail@plt+0x7238>
   188e4:	cmn	r7, #1
   188e8:	ble	18924 <__assert_fail@plt+0x7210>
   188ec:	mvn	r1, #-2147483648	; 0x80000000
   188f0:	udiv	r1, r1, r0
   188f4:	cmp	r1, r7
   188f8:	bge	1894c <__assert_fail@plt+0x7238>
   188fc:	b	18984 <__assert_fail@plt+0x7270>
   18900:	cmn	r7, #1
   18904:	ble	1893c <__assert_fail@plt+0x7228>
   18908:	cmn	r0, #1
   1890c:	beq	1894c <__assert_fail@plt+0x7238>
   18910:	mov	r1, #-2147483648	; 0x80000000
   18914:	sdiv	r1, r1, r0
   18918:	cmp	r1, r7
   1891c:	bge	1894c <__assert_fail@plt+0x7238>
   18920:	b	18984 <__assert_fail@plt+0x7270>
   18924:	beq	1894c <__assert_fail@plt+0x7238>
   18928:	mov	r1, #-2147483648	; 0x80000000
   1892c:	sdiv	r1, r1, r7
   18930:	cmp	r1, r0
   18934:	bge	1894c <__assert_fail@plt+0x7238>
   18938:	b	18984 <__assert_fail@plt+0x7270>
   1893c:	mvn	r1, #-2147483648	; 0x80000000
   18940:	sdiv	r1, r1, r0
   18944:	cmp	r7, r1
   18948:	blt	18984 <__assert_fail@plt+0x7270>
   1894c:	mul	r6, r7, r0
   18950:	mov	r0, r5
   18954:	mov	r1, r6
   18958:	bl	19944 <__assert_fail@plt+0x8230>
   1895c:	cmp	r6, #0
   18960:	movwne	r6, #1
   18964:	cmp	r0, #0
   18968:	bne	1897c <__assert_fail@plt+0x7268>
   1896c:	clz	r1, r5
   18970:	lsr	r1, r1, #5
   18974:	orrs	r1, r1, r6
   18978:	bne	18984 <__assert_fail@plt+0x7270>
   1897c:	str	r7, [r8]
   18980:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18984:	bl	18acc <__assert_fail@plt+0x73b8>
   18988:	push	{fp, lr}
   1898c:	mov	fp, sp
   18990:	mov	r1, #1
   18994:	bl	198c0 <__assert_fail@plt+0x81ac>
   18998:	cmp	r0, #0
   1899c:	popne	{fp, pc}
   189a0:	bl	18acc <__assert_fail@plt+0x73b8>
   189a4:	push	{fp, lr}
   189a8:	mov	fp, sp
   189ac:	bl	198c0 <__assert_fail@plt+0x81ac>
   189b0:	cmp	r0, #0
   189b4:	popne	{fp, pc}
   189b8:	bl	18acc <__assert_fail@plt+0x73b8>
   189bc:	push	{fp, lr}
   189c0:	mov	fp, sp
   189c4:	mov	r1, #1
   189c8:	bl	198c0 <__assert_fail@plt+0x81ac>
   189cc:	cmp	r0, #0
   189d0:	popne	{fp, pc}
   189d4:	bl	18acc <__assert_fail@plt+0x73b8>
   189d8:	push	{fp, lr}
   189dc:	mov	fp, sp
   189e0:	bl	198c0 <__assert_fail@plt+0x81ac>
   189e4:	cmp	r0, #0
   189e8:	popne	{fp, pc}
   189ec:	bl	18acc <__assert_fail@plt+0x73b8>
   189f0:	push	{r4, r5, fp, lr}
   189f4:	add	fp, sp, #8
   189f8:	mov	r5, r0
   189fc:	mov	r0, r1
   18a00:	mov	r4, r1
   18a04:	bl	19914 <__assert_fail@plt+0x8200>
   18a08:	cmp	r0, #0
   18a0c:	beq	18a20 <__assert_fail@plt+0x730c>
   18a10:	mov	r1, r5
   18a14:	mov	r2, r4
   18a18:	pop	{r4, r5, fp, lr}
   18a1c:	b	11408 <memcpy@plt>
   18a20:	bl	18acc <__assert_fail@plt+0x73b8>
   18a24:	push	{r4, r5, fp, lr}
   18a28:	add	fp, sp, #8
   18a2c:	mov	r5, r0
   18a30:	mov	r0, r1
   18a34:	mov	r4, r1
   18a38:	bl	19914 <__assert_fail@plt+0x8200>
   18a3c:	cmp	r0, #0
   18a40:	beq	18a54 <__assert_fail@plt+0x7340>
   18a44:	mov	r1, r5
   18a48:	mov	r2, r4
   18a4c:	pop	{r4, r5, fp, lr}
   18a50:	b	11408 <memcpy@plt>
   18a54:	bl	18acc <__assert_fail@plt+0x73b8>
   18a58:	push	{r4, r5, fp, lr}
   18a5c:	add	fp, sp, #8
   18a60:	mov	r5, r0
   18a64:	add	r0, r1, #1
   18a68:	mov	r4, r1
   18a6c:	bl	19914 <__assert_fail@plt+0x8200>
   18a70:	cmp	r0, #0
   18a74:	beq	18a90 <__assert_fail@plt+0x737c>
   18a78:	mov	r1, #0
   18a7c:	mov	r2, r4
   18a80:	strb	r1, [r0, r4]
   18a84:	mov	r1, r5
   18a88:	pop	{r4, r5, fp, lr}
   18a8c:	b	11408 <memcpy@plt>
   18a90:	bl	18acc <__assert_fail@plt+0x73b8>
   18a94:	push	{r4, r5, fp, lr}
   18a98:	add	fp, sp, #8
   18a9c:	mov	r4, r0
   18aa0:	bl	11588 <strlen@plt>
   18aa4:	add	r5, r0, #1
   18aa8:	mov	r0, r5
   18aac:	bl	19914 <__assert_fail@plt+0x8200>
   18ab0:	cmp	r0, #0
   18ab4:	beq	18ac8 <__assert_fail@plt+0x73b4>
   18ab8:	mov	r1, r4
   18abc:	mov	r2, r5
   18ac0:	pop	{r4, r5, fp, lr}
   18ac4:	b	11408 <memcpy@plt>
   18ac8:	bl	18acc <__assert_fail@plt+0x73b8>
   18acc:	push	{fp, lr}
   18ad0:	mov	fp, sp
   18ad4:	movw	r0, #49504	; 0xc160
   18ad8:	movw	r1, #46616	; 0xb618
   18adc:	mov	r2, #5
   18ae0:	movt	r0, #2
   18ae4:	movt	r1, #1
   18ae8:	ldr	r4, [r0]
   18aec:	mov	r0, #0
   18af0:	bl	11444 <dcgettext@plt>
   18af4:	movw	r2, #45170	; 0xb072
   18af8:	mov	r3, r0
   18afc:	mov	r0, r4
   18b00:	mov	r1, #0
   18b04:	movt	r2, #1
   18b08:	bl	114f8 <error@plt>
   18b0c:	bl	116f0 <abort@plt>
   18b10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b14:	add	fp, sp, #24
   18b18:	sub	sp, sp, #16
   18b1c:	mov	r8, r0
   18b20:	ldr	r0, [fp, #16]
   18b24:	mov	r5, r3
   18b28:	mov	r6, r2
   18b2c:	mov	r2, r1
   18b30:	add	r3, sp, #8
   18b34:	mov	r1, #0
   18b38:	str	r0, [sp]
   18b3c:	mov	r0, r8
   18b40:	bl	18c0c <__assert_fail@plt+0x74f8>
   18b44:	cmp	r0, #0
   18b48:	bne	18bd4 <__assert_fail@plt+0x74c0>
   18b4c:	ldr	r4, [sp, #8]
   18b50:	ldr	r7, [sp, #12]
   18b54:	subs	r0, r4, r6
   18b58:	sbcs	r0, r7, r5
   18b5c:	bcc	18b80 <__assert_fail@plt+0x746c>
   18b60:	ldr	r1, [fp, #8]
   18b64:	ldr	r0, [fp, #12]
   18b68:	subs	r1, r1, r4
   18b6c:	sbcs	r0, r0, r7
   18b70:	movcs	r0, r4
   18b74:	movcs	r1, r7
   18b78:	subcs	sp, fp, #24
   18b7c:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b80:	bl	115d0 <__errno_location@plt>
   18b84:	subs	r1, r4, #1073741824	; 0x40000000
   18b88:	sbcs	r1, r7, #0
   18b8c:	movcc	r1, #34	; 0x22
   18b90:	movcs	r1, #75	; 0x4b
   18b94:	str	r1, [r0]
   18b98:	ldr	r6, [r0]
   18b9c:	ldr	r4, [fp, #24]
   18ba0:	ldr	r5, [fp, #20]
   18ba4:	mov	r0, r8
   18ba8:	bl	17538 <__assert_fail@plt+0x5e24>
   18bac:	subs	r1, r6, #22
   18bb0:	movw	r2, #43389	; 0xa97d
   18bb4:	str	r0, [sp]
   18bb8:	mov	r3, r5
   18bbc:	movne	r1, r6
   18bc0:	cmp	r4, #0
   18bc4:	movt	r2, #1
   18bc8:	movweq	r4, #1
   18bcc:	mov	r0, r4
   18bd0:	bl	114f8 <error@plt>
   18bd4:	cmp	r0, #1
   18bd8:	beq	18bf0 <__assert_fail@plt+0x74dc>
   18bdc:	cmp	r0, #3
   18be0:	bne	18bfc <__assert_fail@plt+0x74e8>
   18be4:	bl	115d0 <__errno_location@plt>
   18be8:	mov	r1, #0
   18bec:	b	18b94 <__assert_fail@plt+0x7480>
   18bf0:	bl	115d0 <__errno_location@plt>
   18bf4:	mov	r1, #75	; 0x4b
   18bf8:	b	18b94 <__assert_fail@plt+0x7480>
   18bfc:	bl	115d0 <__errno_location@plt>
   18c00:	b	18b98 <__assert_fail@plt+0x7484>
   18c04:	mov	r1, #10
   18c08:	b	18b10 <__assert_fail@plt+0x73fc>
   18c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c10:	add	fp, sp, #28
   18c14:	sub	sp, sp, #44	; 0x2c
   18c18:	cmp	r2, #37	; 0x25
   18c1c:	bcs	198a0 <__assert_fail@plt+0x818c>
   18c20:	ldr	sl, [fp, #8]
   18c24:	mov	r6, r2
   18c28:	mov	r7, r1
   18c2c:	mov	r4, r0
   18c30:	str	r3, [sp, #36]	; 0x24
   18c34:	bl	115d0 <__errno_location@plt>
   18c38:	mov	r5, r0
   18c3c:	mov	r0, #0
   18c40:	str	r0, [r5]
   18c44:	bl	11564 <__ctype_b_loc@plt>
   18c48:	ldr	r1, [r0]
   18c4c:	mov	r2, r4
   18c50:	ldrb	r0, [r2], #1
   18c54:	add	r3, r1, r0, lsl #1
   18c58:	ldrb	r3, [r3, #1]
   18c5c:	tst	r3, #32
   18c60:	bne	18c50 <__assert_fail@plt+0x753c>
   18c64:	cmp	r7, #0
   18c68:	sub	r9, fp, #32
   18c6c:	mov	r8, #4
   18c70:	movne	r9, r7
   18c74:	cmp	r0, #45	; 0x2d
   18c78:	beq	19038 <__assert_fail@plt+0x7924>
   18c7c:	mov	r0, r4
   18c80:	mov	r1, r9
   18c84:	mov	r2, r6
   18c88:	mov	r3, #0
   18c8c:	bl	11414 <__strtoull_internal@plt>
   18c90:	mov	r7, r1
   18c94:	ldr	r1, [r9]
   18c98:	cmp	r1, r4
   18c9c:	beq	18cd4 <__assert_fail@plt+0x75c0>
   18ca0:	mov	r6, r0
   18ca4:	ldr	r0, [r5]
   18ca8:	cmp	r0, #0
   18cac:	beq	18ff0 <__assert_fail@plt+0x78dc>
   18cb0:	cmp	r0, #34	; 0x22
   18cb4:	bne	19038 <__assert_fail@plt+0x7924>
   18cb8:	mov	r8, #1
   18cbc:	cmp	sl, #0
   18cc0:	beq	1988c <__assert_fail@plt+0x8178>
   18cc4:	ldrb	r4, [r1]
   18cc8:	cmp	r4, #0
   18ccc:	bne	18d18 <__assert_fail@plt+0x7604>
   18cd0:	b	1988c <__assert_fail@plt+0x8178>
   18cd4:	cmp	sl, #0
   18cd8:	beq	19038 <__assert_fail@plt+0x7924>
   18cdc:	mov	r5, r1
   18ce0:	ldrb	r1, [r4]
   18ce4:	cmp	r1, #0
   18ce8:	beq	19038 <__assert_fail@plt+0x7924>
   18cec:	mov	r0, sl
   18cf0:	bl	115a0 <strchr@plt>
   18cf4:	cmp	r0, #0
   18cf8:	beq	19038 <__assert_fail@plt+0x7924>
   18cfc:	mov	r1, r5
   18d00:	mov	r8, #0
   18d04:	mov	r6, #1
   18d08:	mov	r7, #0
   18d0c:	ldrb	r4, [r1]
   18d10:	cmp	r4, #0
   18d14:	beq	1988c <__assert_fail@plt+0x8178>
   18d18:	str	r1, [sp, #32]
   18d1c:	mov	r0, sl
   18d20:	mov	r1, r4
   18d24:	bl	115a0 <strchr@plt>
   18d28:	cmp	r0, #0
   18d2c:	beq	1902c <__assert_fail@plt+0x7918>
   18d30:	sub	r0, r4, #69	; 0x45
   18d34:	mov	r1, #1
   18d38:	mov	r3, #0
   18d3c:	mov	r5, #1024	; 0x400
   18d40:	cmp	r0, #47	; 0x2f
   18d44:	str	r1, [sp, #28]
   18d48:	bhi	18e4c <__assert_fail@plt+0x7738>
   18d4c:	add	r1, pc, #0
   18d50:	ldr	pc, [r1, r0, lsl #2]
   18d54:	andeq	r8, r1, r4, lsl lr
   18d58:	andeq	r8, r1, ip, asr #28
   18d5c:	andeq	r8, r1, r4, lsl lr
   18d60:	andeq	r8, r1, ip, asr #28
   18d64:	andeq	r8, r1, ip, asr #28
   18d68:	andeq	r8, r1, ip, asr #28
   18d6c:	andeq	r8, r1, r4, lsl lr
   18d70:	andeq	r8, r1, ip, asr #28
   18d74:	andeq	r8, r1, r4, lsl lr
   18d78:	andeq	r8, r1, ip, asr #28
   18d7c:	andeq	r8, r1, ip, asr #28
   18d80:	andeq	r8, r1, r4, lsl lr
   18d84:	andeq	r8, r1, ip, asr #28
   18d88:	andeq	r8, r1, ip, asr #28
   18d8c:	andeq	r8, r1, ip, asr #28
   18d90:	andeq	r8, r1, r4, lsl lr
   18d94:	andeq	r8, r1, ip, asr #28
   18d98:	andeq	r8, r1, ip, asr #28
   18d9c:	andeq	r8, r1, ip, asr #28
   18da0:	andeq	r8, r1, ip, asr #28
   18da4:	andeq	r8, r1, r4, lsl lr
   18da8:	andeq	r8, r1, r4, lsl lr
   18dac:	andeq	r8, r1, ip, asr #28
   18db0:	andeq	r8, r1, ip, asr #28
   18db4:	andeq	r8, r1, ip, asr #28
   18db8:	andeq	r8, r1, ip, asr #28
   18dbc:	andeq	r8, r1, ip, asr #28
   18dc0:	andeq	r8, r1, ip, asr #28
   18dc4:	andeq	r8, r1, ip, asr #28
   18dc8:	andeq	r8, r1, ip, asr #28
   18dcc:	andeq	r8, r1, ip, asr #28
   18dd0:	andeq	r8, r1, ip, asr #28
   18dd4:	andeq	r8, r1, ip, asr #28
   18dd8:	andeq	r8, r1, ip, asr #28
   18ddc:	andeq	r8, r1, r4, lsl lr
   18de0:	andeq	r8, r1, ip, asr #28
   18de4:	andeq	r8, r1, ip, asr #28
   18de8:	andeq	r8, r1, ip, asr #28
   18dec:	andeq	r8, r1, r4, lsl lr
   18df0:	andeq	r8, r1, ip, asr #28
   18df4:	andeq	r8, r1, r4, lsl lr
   18df8:	andeq	r8, r1, ip, asr #28
   18dfc:	andeq	r8, r1, ip, asr #28
   18e00:	andeq	r8, r1, ip, asr #28
   18e04:	andeq	r8, r1, ip, asr #28
   18e08:	andeq	r8, r1, ip, asr #28
   18e0c:	andeq	r8, r1, ip, asr #28
   18e10:	andeq	r8, r1, r4, lsl lr
   18e14:	mov	r0, sl
   18e18:	mov	r1, #48	; 0x30
   18e1c:	bl	115a0 <strchr@plt>
   18e20:	cmp	r0, #0
   18e24:	beq	18e48 <__assert_fail@plt+0x7734>
   18e28:	ldr	r1, [sp, #32]
   18e2c:	ldrb	r0, [r1, #1]
   18e30:	cmp	r0, #66	; 0x42
   18e34:	cmpne	r0, #68	; 0x44
   18e38:	bne	19000 <__assert_fail@plt+0x78ec>
   18e3c:	mov	r5, #1000	; 0x3e8
   18e40:	mov	r0, #2
   18e44:	str	r0, [sp, #28]
   18e48:	mov	r3, #0
   18e4c:	sub	r0, r4, #66	; 0x42
   18e50:	cmp	r0, #53	; 0x35
   18e54:	bhi	1902c <__assert_fail@plt+0x7918>
   18e58:	add	r1, pc, #0
   18e5c:	ldr	pc, [r1, r0, lsl #2]
   18e60:	muleq	r1, ip, r3
   18e64:	andeq	r9, r1, ip, lsr #32
   18e68:	andeq	r9, r1, ip, lsr #32
   18e6c:	andeq	r9, r1, r4, asr #7
   18e70:	andeq	r9, r1, ip, lsr #32
   18e74:	andeq	r8, r1, r8, lsr pc
   18e78:	andeq	r9, r1, ip, lsr #32
   18e7c:	andeq	r9, r1, ip, lsr #32
   18e80:	andeq	r9, r1, ip, lsr #32
   18e84:	andeq	r9, r1, r4, asr #32
   18e88:	andeq	r9, r1, ip, lsr #32
   18e8c:	andeq	r9, r1, ip, lsl #1
   18e90:	andeq	r9, r1, ip, lsr #32
   18e94:	andeq	r9, r1, ip, lsr #32
   18e98:	andeq	r9, r1, r8, lsl r5
   18e9c:	andeq	r9, r1, ip, lsr #32
   18ea0:	andeq	r9, r1, ip, lsr #32
   18ea4:	andeq	r9, r1, ip, lsr #32
   18ea8:	andeq	r9, r1, r8, lsl r1
   18eac:	andeq	r9, r1, ip, lsr #32
   18eb0:	andeq	r9, r1, ip, lsr #32
   18eb4:	andeq	r9, r1, ip, lsr #32
   18eb8:	andeq	r9, r1, ip, lsr #32
   18ebc:	andeq	r9, r1, r0, asr #12
   18ec0:	andeq	r9, r1, r0, lsl #4
   18ec4:	andeq	r9, r1, ip, lsr #32
   18ec8:	andeq	r9, r1, ip, lsr #32
   18ecc:	andeq	r9, r1, ip, lsr #32
   18ed0:	andeq	r9, r1, ip, lsr #32
   18ed4:	andeq	r9, r1, ip, lsr #32
   18ed8:	andeq	r9, r1, ip, lsr #32
   18edc:	andeq	r9, r1, ip, lsr #32
   18ee0:	andeq	r9, r1, r4, lsl r8
   18ee4:	andeq	r9, r1, ip, ror #16
   18ee8:	andeq	r9, r1, ip, lsr #32
   18eec:	andeq	r9, r1, ip, lsr #32
   18ef0:	andeq	r9, r1, ip, lsr #32
   18ef4:	andeq	r8, r1, r8, lsr pc
   18ef8:	andeq	r9, r1, ip, lsr #32
   18efc:	andeq	r9, r1, ip, lsr #32
   18f00:	andeq	r9, r1, ip, lsr #32
   18f04:	andeq	r9, r1, r4, asr #32
   18f08:	andeq	r9, r1, ip, lsr #32
   18f0c:	andeq	r9, r1, ip, lsl #1
   18f10:	andeq	r9, r1, ip, lsr #32
   18f14:	andeq	r9, r1, ip, lsr #32
   18f18:	andeq	r9, r1, ip, lsr #32
   18f1c:	andeq	r9, r1, ip, lsr #32
   18f20:	andeq	r9, r1, ip, lsr #32
   18f24:	andeq	r9, r1, ip, lsr #32
   18f28:	andeq	r9, r1, r8, lsl r1
   18f2c:	andeq	r9, r1, ip, lsr #32
   18f30:	andeq	r9, r1, ip, lsr #32
   18f34:	andeq	r9, r1, r8, asr #16
   18f38:	mvn	r0, #0
   18f3c:	mvn	r1, #0
   18f40:	mov	r2, r5
   18f44:	mov	sl, r3
   18f48:	bl	19dec <__assert_fail@plt+0x86d8>
   18f4c:	subs	r3, r0, r6
   18f50:	umull	r4, r2, r6, r5
   18f54:	mov	lr, #0
   18f58:	str	r1, [sp, #20]
   18f5c:	sbcs	r3, r1, r7
   18f60:	movwcc	lr, #1
   18f64:	mla	ip, r6, sl, r2
   18f68:	mov	r2, r1
   18f6c:	mov	r2, #0
   18f70:	cmp	lr, #0
   18f74:	mla	r7, r7, r5, ip
   18f78:	mvnne	r4, #0
   18f7c:	mvnne	r7, #0
   18f80:	subs	r6, r0, r4
   18f84:	sbcs	r6, r1, r7
   18f88:	umull	r3, r6, r4, r5
   18f8c:	movwcc	r2, #1
   18f90:	cmp	r2, #0
   18f94:	mvnne	r3, #0
   18f98:	cmp	r2, #0
   18f9c:	str	r6, [sp, #16]
   18fa0:	umull	r6, ip, r3, r5
   18fa4:	mla	r1, r3, sl, ip
   18fa8:	ldr	ip, [sp, #16]
   18fac:	str	r1, [sp, #12]
   18fb0:	mla	r4, r4, sl, ip
   18fb4:	mla	r4, r7, r5, r4
   18fb8:	mvnne	r4, #0
   18fbc:	subs	r0, r0, r3
   18fc0:	ldr	r0, [sp, #20]
   18fc4:	ldr	r7, [sp, #12]
   18fc8:	sbcs	r0, r0, r4
   18fcc:	mov	r0, #0
   18fd0:	mla	r7, r4, r5, r7
   18fd4:	movwcc	r0, #1
   18fd8:	cmp	r0, #0
   18fdc:	mov	r1, r0
   18fe0:	orr	r0, lr, r2
   18fe4:	mvnne	r7, #0
   18fe8:	mvnne	r6, #0
   18fec:	b	19638 <__assert_fail@plt+0x7f24>
   18ff0:	mov	r8, r0
   18ff4:	cmp	sl, #0
   18ff8:	bne	18cc4 <__assert_fail@plt+0x75b0>
   18ffc:	b	1988c <__assert_fail@plt+0x8178>
   19000:	cmp	r0, #105	; 0x69
   19004:	mov	r3, #0
   19008:	bne	18e4c <__assert_fail@plt+0x7738>
   1900c:	ldrb	r0, [r1, #2]
   19010:	mov	r1, #1
   19014:	cmp	r0, #66	; 0x42
   19018:	movweq	r1, #3
   1901c:	str	r1, [sp, #28]
   19020:	sub	r0, r4, #66	; 0x42
   19024:	cmp	r0, #53	; 0x35
   19028:	bls	18e58 <__assert_fail@plt+0x7744>
   1902c:	ldr	r0, [sp, #36]	; 0x24
   19030:	orr	r8, r8, #2
   19034:	strd	r6, [r0]
   19038:	mov	r0, r8
   1903c:	sub	sp, fp, #28
   19040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19044:	mvn	r0, #0
   19048:	mvn	r1, #0
   1904c:	mov	r2, r5
   19050:	mov	r4, r3
   19054:	bl	19dec <__assert_fail@plt+0x86d8>
   19058:	subs	r0, r0, r6
   1905c:	mov	r2, #0
   19060:	sbcs	r0, r1, r7
   19064:	umull	r0, r1, r6, r5
   19068:	movwcc	r2, #1
   1906c:	cmp	r2, #0
   19070:	mla	r1, r6, r4, r1
   19074:	mov	r3, r2
   19078:	mvnne	r0, #0
   1907c:	mla	r7, r7, r5, r1
   19080:	mvnne	r7, #0
   19084:	mov	r6, r0
   19088:	b	1986c <__assert_fail@plt+0x8158>
   1908c:	mvn	r0, #0
   19090:	mvn	r1, #0
   19094:	mov	r2, r5
   19098:	str	r3, [sp, #24]
   1909c:	bl	19dec <__assert_fail@plt+0x86d8>
   190a0:	subs	r3, r0, r6
   190a4:	mov	ip, r0
   190a8:	umull	r4, r0, r6, r5
   190ac:	mov	sl, #0
   190b0:	sbcs	r3, r1, r7
   190b4:	mov	r3, #0
   190b8:	movwcc	r3, #1
   190bc:	cmp	r3, #0
   190c0:	str	r0, [sp, #20]
   190c4:	ldr	r0, [sp, #24]
   190c8:	mvnne	r4, #0
   190cc:	cmp	r3, #0
   190d0:	umull	lr, r2, r4, r5
   190d4:	mla	r2, r4, r0, r2
   190d8:	str	r2, [sp, #16]
   190dc:	ldr	r2, [sp, #20]
   190e0:	mla	r6, r6, r0, r2
   190e4:	ldr	r0, [sp, #16]
   190e8:	mla	r6, r7, r5, r6
   190ec:	mvnne	r6, #0
   190f0:	mla	r7, r6, r5, r0
   190f4:	subs	r0, ip, r4
   190f8:	sbcs	r0, r1, r6
   190fc:	movwcc	sl, #1
   19100:	cmp	sl, #0
   19104:	orr	r3, r3, sl
   19108:	mvnne	lr, #0
   1910c:	mvnne	r7, #0
   19110:	mov	r6, lr
   19114:	b	1986c <__assert_fail@plt+0x8158>
   19118:	mvn	r0, #0
   1911c:	mvn	r1, #0
   19120:	mov	r2, r5
   19124:	mov	sl, r3
   19128:	bl	19dec <__assert_fail@plt+0x86d8>
   1912c:	subs	r3, r0, r6
   19130:	mov	ip, r1
   19134:	umull	r2, lr, r6, r5
   19138:	str	r0, [sp, #20]
   1913c:	sbcs	r3, r1, r7
   19140:	mov	r1, #0
   19144:	str	ip, [sp, #16]
   19148:	movwcc	r1, #1
   1914c:	mla	r6, r6, sl, lr
   19150:	mov	lr, #0
   19154:	cmp	r1, #0
   19158:	mla	r7, r7, r5, r6
   1915c:	mvnne	r2, #0
   19160:	cmp	r1, #0
   19164:	umull	r3, r4, r2, r5
   19168:	mvnne	r7, #0
   1916c:	mla	r4, r2, sl, r4
   19170:	subs	r2, r0, r2
   19174:	sbcs	r2, ip, r7
   19178:	mla	r4, r7, r5, r4
   1917c:	mov	r2, #0
   19180:	movwcc	lr, #1
   19184:	cmp	lr, #0
   19188:	mvnne	r3, #0
   1918c:	mvnne	r4, #0
   19190:	subs	r7, r0, r3
   19194:	mov	r0, r5
   19198:	sbcs	r7, ip, r4
   1919c:	umull	r5, r7, r3, r5
   191a0:	movwcc	r2, #1
   191a4:	cmp	r2, #0
   191a8:	mla	r3, r3, sl, r7
   191ac:	mvnne	r5, #0
   191b0:	cmp	r2, #0
   191b4:	mla	r3, r4, r0, r3
   191b8:	umull	r6, ip, r5, r0
   191bc:	mvnne	r3, #0
   191c0:	mla	ip, r5, sl, ip
   191c4:	mla	r7, r3, r0, ip
   191c8:	ldr	r0, [sp, #20]
   191cc:	subs	r0, r0, r5
   191d0:	ldr	r0, [sp, #16]
   191d4:	sbcs	r0, r0, r3
   191d8:	mov	r0, #0
   191dc:	movwcc	r0, #1
   191e0:	cmp	r0, #0
   191e4:	mov	r3, r0
   191e8:	orr	r0, r1, lr
   191ec:	orr	r0, r0, r2
   191f0:	mvnne	r7, #0
   191f4:	mvnne	r6, #0
   191f8:	orr	r3, r0, r3
   191fc:	b	1986c <__assert_fail@plt+0x8158>
   19200:	mvn	r0, #0
   19204:	mvn	r1, #0
   19208:	mov	r2, r5
   1920c:	mov	r4, r3
   19210:	str	r3, [sp, #24]
   19214:	bl	19dec <__assert_fail@plt+0x86d8>
   19218:	umull	r3, r2, r6, r5
   1921c:	mla	r2, r6, r4, r2
   19220:	subs	r6, r0, r6
   19224:	sbcs	r6, r1, r7
   19228:	mov	r6, #0
   1922c:	mla	r2, r7, r5, r2
   19230:	mov	r7, #0
   19234:	movwcc	r6, #1
   19238:	cmp	r6, #0
   1923c:	str	r6, [sp, #20]
   19240:	mvnne	r3, #0
   19244:	mvnne	r2, #0
   19248:	subs	r4, r0, r3
   1924c:	umull	r6, ip, r3, r5
   19250:	sbcs	r4, r1, r2
   19254:	ldr	r4, [sp, #24]
   19258:	movwcc	r7, #1
   1925c:	cmp	r7, #0
   19260:	mov	lr, r7
   19264:	str	r7, [sp, #16]
   19268:	mvnne	r6, #0
   1926c:	cmp	lr, #0
   19270:	mov	lr, #0
   19274:	umull	sl, r7, r6, r5
   19278:	mla	r3, r3, r4, ip
   1927c:	mla	r2, r2, r5, r3
   19280:	mvnne	r2, #0
   19284:	subs	r3, r0, r6
   19288:	mla	r7, r6, r4, r7
   1928c:	mov	r4, r0
   19290:	mov	r0, #0
   19294:	mla	r7, r2, r5, r7
   19298:	sbcs	r2, r1, r2
   1929c:	mov	r3, r4
   192a0:	movwcc	r0, #1
   192a4:	str	r3, [sp, #4]
   192a8:	cmp	r0, #0
   192ac:	str	r0, [sp, #12]
   192b0:	mov	r0, r1
   192b4:	mvnne	sl, #0
   192b8:	mvnne	r7, #0
   192bc:	str	r0, [sp, #8]
   192c0:	subs	r2, r4, sl
   192c4:	ldr	r4, [sp, #24]
   192c8:	sbcs	r2, r1, r7
   192cc:	umull	r6, r2, sl, r5
   192d0:	movwcc	lr, #1
   192d4:	cmp	lr, #0
   192d8:	mvnne	r6, #0
   192dc:	mla	r2, sl, r4, r2
   192e0:	cmp	lr, #0
   192e4:	umull	r1, ip, r6, r5
   192e8:	mla	r2, r7, r5, r2
   192ec:	mvnne	r2, #0
   192f0:	mla	ip, r6, r4, ip
   192f4:	subs	r6, r3, r6
   192f8:	mla	r7, r2, r5, ip
   192fc:	sbcs	r2, r0, r2
   19300:	mov	ip, #0
   19304:	mov	r2, #0
   19308:	movwcc	ip, #1
   1930c:	cmp	ip, #0
   19310:	mvnne	r1, #0
   19314:	mvnne	r7, #0
   19318:	subs	r6, r3, r1
   1931c:	ldr	r3, [sp, #24]
   19320:	sbcs	r6, r0, r7
   19324:	umull	r0, sl, r1, r5
   19328:	movwcc	r2, #1
   1932c:	cmp	r2, #0
   19330:	mvnne	r0, #0
   19334:	mla	r1, r1, r3, sl
   19338:	cmp	r2, #0
   1933c:	umull	r6, r4, r0, r5
   19340:	mla	r1, r7, r5, r1
   19344:	mvnne	r1, #0
   19348:	mla	r4, r0, r3, r4
   1934c:	ldr	r3, [sp, #4]
   19350:	mla	r7, r1, r5, r4
   19354:	ldr	r5, [sp, #16]
   19358:	subs	r0, r3, r0
   1935c:	ldr	r0, [sp, #8]
   19360:	sbcs	r0, r0, r1
   19364:	mov	r0, #0
   19368:	movwcc	r0, #1
   1936c:	cmp	r0, #0
   19370:	mov	r1, r0
   19374:	ldr	r0, [sp, #20]
   19378:	mvnne	r7, #0
   1937c:	mvnne	r6, #0
   19380:	orr	r0, r0, r5
   19384:	ldr	r5, [sp, #12]
   19388:	orr	r0, r0, r5
   1938c:	orr	r0, r0, lr
   19390:	orr	r0, r0, ip
   19394:	orr	r0, r0, r2
   19398:	b	19808 <__assert_fail@plt+0x80f4>
   1939c:	mov	r1, #0
   193a0:	lsl	r2, r7, #10
   193a4:	lsl	r0, r6, #10
   193a8:	lsr	r3, r7, #22
   193ac:	cmp	r1, r7, lsr #22
   193b0:	orr	r2, r2, r6, lsr #22
   193b4:	mvnne	r0, #0
   193b8:	movwne	r3, #1
   193bc:	cmp	r1, r7, lsr #22
   193c0:	b	19838 <__assert_fail@plt+0x8124>
   193c4:	mvn	r0, #0
   193c8:	mvn	r1, #0
   193cc:	mov	r2, r5
   193d0:	mov	sl, r3
   193d4:	bl	19dec <__assert_fail@plt+0x86d8>
   193d8:	subs	r2, r0, r6
   193dc:	mov	ip, r0
   193e0:	mov	r0, #0
   193e4:	sbcs	r2, r1, r7
   193e8:	umull	r4, r2, r6, r5
   193ec:	movwcc	r0, #1
   193f0:	cmp	r0, #0
   193f4:	mla	r2, r6, sl, r2
   193f8:	str	r0, [sp, #20]
   193fc:	mvnne	r4, #0
   19400:	cmp	r0, #0
   19404:	mla	r2, r7, r5, r2
   19408:	mov	r0, #0
   1940c:	umull	lr, r3, r4, r5
   19410:	mvnne	r2, #0
   19414:	mla	r3, r4, sl, r3
   19418:	mla	r6, r2, r5, r3
   1941c:	subs	r3, ip, r4
   19420:	mov	r3, r1
   19424:	sbcs	r2, r1, r2
   19428:	str	r3, [sp, #8]
   1942c:	movwcc	r0, #1
   19430:	cmp	r0, #0
   19434:	str	r0, [sp, #16]
   19438:	mov	r0, ip
   1943c:	mvnne	lr, #0
   19440:	mvnne	r6, #0
   19444:	str	r0, [sp, #12]
   19448:	subs	r2, ip, lr
   1944c:	umull	r7, r4, lr, r5
   19450:	sbcs	r2, r1, r6
   19454:	mov	r2, #0
   19458:	movwcc	r2, #1
   1945c:	mla	r4, lr, sl, r4
   19460:	cmp	r2, #0
   19464:	mla	r6, r6, r5, r4
   19468:	mov	r4, #0
   1946c:	mvnne	r7, #0
   19470:	cmp	r2, #0
   19474:	umull	r1, ip, r7, r5
   19478:	mvnne	r6, #0
   1947c:	mla	ip, r7, sl, ip
   19480:	subs	r7, r0, r7
   19484:	sbcs	r7, r3, r6
   19488:	mla	lr, r6, r5, ip
   1948c:	mov	ip, #0
   19490:	movwcc	ip, #1
   19494:	cmp	ip, #0
   19498:	mvnne	r1, #0
   1949c:	mvnne	lr, #0
   194a0:	subs	r7, r0, r1
   194a4:	sbcs	r7, r3, lr
   194a8:	umull	r0, r7, r1, r5
   194ac:	movwcc	r4, #1
   194b0:	cmp	r4, #0
   194b4:	mla	r1, r1, sl, r7
   194b8:	mvnne	r0, #0
   194bc:	cmp	r4, #0
   194c0:	mla	r1, lr, r5, r1
   194c4:	umull	r6, r3, r0, r5
   194c8:	mvnne	r1, #0
   194cc:	mla	r3, r0, sl, r3
   194d0:	mla	r7, r1, r5, r3
   194d4:	ldr	r3, [sp, #12]
   194d8:	subs	r0, r3, r0
   194dc:	ldr	r0, [sp, #8]
   194e0:	ldr	r3, [sp, #16]
   194e4:	sbcs	r0, r0, r1
   194e8:	mov	r0, #0
   194ec:	movwcc	r0, #1
   194f0:	cmp	r0, #0
   194f4:	mov	r1, r0
   194f8:	ldr	r0, [sp, #20]
   194fc:	mvnne	r7, #0
   19500:	mvnne	r6, #0
   19504:	orr	r0, r0, r3
   19508:	orr	r0, r0, r2
   1950c:	orr	r0, r0, ip
   19510:	orr	r0, r0, r4
   19514:	b	19638 <__assert_fail@plt+0x7f24>
   19518:	mvn	r0, #0
   1951c:	mvn	r1, #0
   19520:	mov	r2, r5
   19524:	mov	sl, r3
   19528:	bl	19dec <__assert_fail@plt+0x86d8>
   1952c:	umull	r3, r2, r6, r5
   19530:	mov	lr, r1
   19534:	mov	r1, r0
   19538:	mla	r2, r6, sl, r2
   1953c:	subs	r6, r0, r6
   19540:	mov	r0, #0
   19544:	sbcs	r6, lr, r7
   19548:	mla	r2, r7, r5, r2
   1954c:	movwcc	r0, #1
   19550:	cmp	r0, #0
   19554:	str	r0, [sp, #20]
   19558:	mov	r0, r1
   1955c:	mvnne	r3, #0
   19560:	mvnne	r2, #0
   19564:	str	r0, [sp, #16]
   19568:	subs	r4, r1, r3
   1956c:	umull	r7, ip, r3, r5
   19570:	sbcs	r4, lr, r2
   19574:	mov	r4, #0
   19578:	movwcc	r4, #1
   1957c:	mla	r3, r3, sl, ip
   19580:	mov	ip, #0
   19584:	cmp	r4, #0
   19588:	mla	r2, r2, r5, r3
   1958c:	mvnne	r7, #0
   19590:	cmp	r4, #0
   19594:	umull	r1, r6, r7, r5
   19598:	mvnne	r2, #0
   1959c:	mla	r6, r7, sl, r6
   195a0:	mla	r3, r2, r5, r6
   195a4:	subs	r6, r0, r7
   195a8:	sbcs	r2, lr, r2
   195ac:	mov	r2, #0
   195b0:	movwcc	ip, #1
   195b4:	cmp	ip, #0
   195b8:	mvnne	r1, #0
   195bc:	mvnne	r3, #0
   195c0:	subs	r6, r0, r1
   195c4:	sbcs	r6, lr, r3
   195c8:	umull	r0, r6, r1, r5
   195cc:	movwcc	r2, #1
   195d0:	cmp	r2, #0
   195d4:	mvnne	r0, #0
   195d8:	cmp	r2, #0
   195dc:	str	r6, [sp, #12]
   195e0:	umull	r6, r7, r0, r5
   195e4:	mla	r7, r0, sl, r7
   195e8:	str	r7, [sp, #8]
   195ec:	ldr	r7, [sp, #12]
   195f0:	mla	r1, r1, sl, r7
   195f4:	mla	r1, r3, r5, r1
   195f8:	ldr	r3, [sp, #8]
   195fc:	mvnne	r1, #0
   19600:	mla	r7, r1, r5, r3
   19604:	ldr	r3, [sp, #16]
   19608:	subs	r0, r3, r0
   1960c:	sbcs	r0, lr, r1
   19610:	mov	r0, #0
   19614:	movwcc	r0, #1
   19618:	cmp	r0, #0
   1961c:	mov	r1, r0
   19620:	ldr	r0, [sp, #20]
   19624:	mvnne	r7, #0
   19628:	mvnne	r6, #0
   1962c:	orr	r0, r0, r4
   19630:	orr	r0, r0, ip
   19634:	orr	r0, r0, r2
   19638:	orr	r3, r0, r1
   1963c:	b	1986c <__assert_fail@plt+0x8158>
   19640:	mvn	r0, #0
   19644:	mvn	r1, #0
   19648:	mov	r2, r5
   1964c:	mov	sl, r3
   19650:	bl	19dec <__assert_fail@plt+0x86d8>
   19654:	mov	ip, r1
   19658:	subs	r1, r0, r6
   1965c:	umull	r3, lr, r6, r5
   19660:	mov	r2, r5
   19664:	sbcs	r1, ip, r7
   19668:	mov	r1, #0
   1966c:	str	ip, [sp, #4]
   19670:	movwcc	r1, #1
   19674:	mla	r6, r6, sl, lr
   19678:	cmp	r1, #0
   1967c:	mla	r7, r7, r2, r6
   19680:	str	r1, [sp, #20]
   19684:	mvnne	r3, #0
   19688:	cmp	r1, #0
   1968c:	mov	r1, r0
   19690:	umull	r4, r5, r3, r5
   19694:	mvnne	r7, #0
   19698:	mov	lr, r1
   1969c:	mla	r5, r3, sl, r5
   196a0:	subs	r3, r0, r3
   196a4:	sbcs	r0, ip, r7
   196a8:	mov	r0, #0
   196ac:	mla	r5, r7, r2, r5
   196b0:	movwcc	r0, #1
   196b4:	cmp	r0, #0
   196b8:	str	r0, [sp, #16]
   196bc:	mvnne	r4, #0
   196c0:	mvnne	r5, #0
   196c4:	subs	r0, r1, r4
   196c8:	mov	r1, #0
   196cc:	sbcs	r0, ip, r5
   196d0:	umull	r3, r0, r4, r2
   196d4:	movwcc	r1, #1
   196d8:	cmp	r1, #0
   196dc:	mla	r0, r4, sl, r0
   196e0:	mov	r4, lr
   196e4:	str	r1, [sp, #12]
   196e8:	mvnne	r3, #0
   196ec:	cmp	r1, #0
   196f0:	mla	r0, r5, r2, r0
   196f4:	str	r4, [sp]
   196f8:	umull	r7, r6, r3, r2
   196fc:	mvnne	r0, #0
   19700:	mla	r6, r3, sl, r6
   19704:	subs	r3, lr, r3
   19708:	mov	r3, #0
   1970c:	mla	r5, r0, r2, r6
   19710:	sbcs	r0, ip, r0
   19714:	mov	r0, #0
   19718:	movwcc	r0, #1
   1971c:	cmp	r0, #0
   19720:	str	r0, [sp, #8]
   19724:	mvnne	r7, #0
   19728:	mvnne	r5, #0
   1972c:	subs	r0, lr, r7
   19730:	sbcs	r0, ip, r5
   19734:	umull	r6, r0, r7, r2
   19738:	movwcc	r3, #1
   1973c:	cmp	r3, #0
   19740:	mla	r7, r7, sl, r0
   19744:	mov	r0, ip
   19748:	mvnne	r6, #0
   1974c:	cmp	r3, #0
   19750:	mla	r7, r5, r2, r7
   19754:	mov	r5, #0
   19758:	umull	r1, lr, r6, r2
   1975c:	mvnne	r7, #0
   19760:	mla	lr, r6, sl, lr
   19764:	subs	r6, r4, r6
   19768:	mla	lr, r7, r2, lr
   1976c:	sbcs	r7, ip, r7
   19770:	mov	ip, #0
   19774:	movwcc	ip, #1
   19778:	cmp	ip, #0
   1977c:	mvnne	r1, #0
   19780:	mvnne	lr, #0
   19784:	subs	r7, r4, r1
   19788:	sbcs	r7, r0, lr
   1978c:	umull	r0, r7, r1, r2
   19790:	movwcc	r5, #1
   19794:	cmp	r5, #0
   19798:	mla	r1, r1, sl, r7
   1979c:	mvnne	r0, #0
   197a0:	cmp	r5, #0
   197a4:	mla	r1, lr, r2, r1
   197a8:	umull	r6, r4, r0, r2
   197ac:	mvnne	r1, #0
   197b0:	mla	r4, r0, sl, r4
   197b4:	mla	r7, r1, r2, r4
   197b8:	ldr	r2, [sp]
   197bc:	subs	r0, r2, r0
   197c0:	ldr	r0, [sp, #4]
   197c4:	ldr	r2, [sp, #16]
   197c8:	sbcs	r0, r0, r1
   197cc:	mov	r0, #0
   197d0:	movwcc	r0, #1
   197d4:	cmp	r0, #0
   197d8:	mov	r1, r0
   197dc:	ldr	r0, [sp, #20]
   197e0:	mvnne	r7, #0
   197e4:	mvnne	r6, #0
   197e8:	orr	r0, r0, r2
   197ec:	ldr	r2, [sp, #12]
   197f0:	orr	r0, r0, r2
   197f4:	ldr	r2, [sp, #8]
   197f8:	orr	r0, r0, r2
   197fc:	orr	r0, r0, r3
   19800:	orr	r0, r0, ip
   19804:	orr	r0, r0, r5
   19808:	orr	r0, r0, r1
   1980c:	and	r3, r0, #1
   19810:	b	1986c <__assert_fail@plt+0x8158>
   19814:	mov	r1, #0
   19818:	lsl	r2, r7, #9
   1981c:	lsl	r0, r6, #9
   19820:	lsr	r3, r7, #23
   19824:	cmp	r1, r7, lsr #23
   19828:	orr	r2, r2, r6, lsr #23
   1982c:	mvnne	r0, #0
   19830:	movwne	r3, #1
   19834:	cmp	r1, r7, lsr #23
   19838:	mvnne	r2, #0
   1983c:	mov	r6, r0
   19840:	mov	r7, r2
   19844:	b	1986c <__assert_fail@plt+0x8158>
   19848:	lsl	r1, r7, #1
   1984c:	cmp	r7, #0
   19850:	lsl	r0, r6, #1
   19854:	lsr	r3, r7, #31
   19858:	orr	r1, r1, r6, lsr #31
   1985c:	mvnmi	r0, #0
   19860:	mvnmi	r1, #0
   19864:	mov	r6, r0
   19868:	mov	r7, r1
   1986c:	ldr	r1, [sp, #32]
   19870:	ldr	r2, [sp, #28]
   19874:	orr	r8, r3, r8
   19878:	add	r0, r1, r2
   1987c:	str	r0, [r9]
   19880:	ldrb	r0, [r1, r2]
   19884:	cmp	r0, #0
   19888:	orrne	r8, r8, #2
   1988c:	ldr	r0, [sp, #36]	; 0x24
   19890:	strd	r6, [r0]
   19894:	mov	r0, r8
   19898:	sub	sp, fp, #28
   1989c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198a0:	movw	r0, #46633	; 0xb629
   198a4:	movw	r1, #46671	; 0xb64f
   198a8:	movw	r3, #46687	; 0xb65f
   198ac:	mov	r2, #85	; 0x55
   198b0:	movt	r0, #1
   198b4:	movt	r1, #1
   198b8:	movt	r3, #1
   198bc:	bl	11714 <__assert_fail@plt>
   198c0:	clz	r2, r1
   198c4:	clz	r3, r0
   198c8:	lsr	r2, r2, #5
   198cc:	lsr	r3, r3, #5
   198d0:	orrs	r2, r3, r2
   198d4:	movwne	r1, #1
   198d8:	movwne	r0, #1
   198dc:	cmp	r1, #0
   198e0:	beq	19910 <__assert_fail@plt+0x81fc>
   198e4:	mvn	r2, #-2147483648	; 0x80000000
   198e8:	udiv	r2, r2, r1
   198ec:	cmp	r2, r0
   198f0:	bcs	19910 <__assert_fail@plt+0x81fc>
   198f4:	push	{fp, lr}
   198f8:	mov	fp, sp
   198fc:	bl	115d0 <__errno_location@plt>
   19900:	mov	r1, #12
   19904:	str	r1, [r0]
   19908:	mov	r0, #0
   1990c:	pop	{fp, pc}
   19910:	b	11384 <calloc@plt>
   19914:	cmp	r0, #0
   19918:	movweq	r0, #1
   1991c:	cmn	r0, #1
   19920:	ble	19928 <__assert_fail@plt+0x8214>
   19924:	b	1151c <malloc@plt>
   19928:	push	{fp, lr}
   1992c:	mov	fp, sp
   19930:	bl	115d0 <__errno_location@plt>
   19934:	mov	r1, #12
   19938:	str	r1, [r0]
   1993c:	mov	r0, #0
   19940:	pop	{fp, pc}
   19944:	push	{fp, lr}
   19948:	mov	fp, sp
   1994c:	cmp	r0, #0
   19950:	beq	1996c <__assert_fail@plt+0x8258>
   19954:	cmp	r1, #0
   19958:	beq	19978 <__assert_fail@plt+0x8264>
   1995c:	cmn	r1, #1
   19960:	ble	19984 <__assert_fail@plt+0x8270>
   19964:	pop	{fp, lr}
   19968:	b	1145c <realloc@plt>
   1996c:	mov	r0, r1
   19970:	pop	{fp, lr}
   19974:	b	19914 <__assert_fail@plt+0x8200>
   19978:	bl	153d0 <__assert_fail@plt+0x3cbc>
   1997c:	mov	r0, #0
   19980:	pop	{fp, pc}
   19984:	bl	115d0 <__errno_location@plt>
   19988:	mov	r1, #12
   1998c:	str	r1, [r0]
   19990:	mov	r0, #0
   19994:	pop	{fp, pc}
   19998:	push	{r4, r5, r6, sl, fp, lr}
   1999c:	add	fp, sp, #16
   199a0:	mov	r4, r0
   199a4:	bl	114e0 <__fpending@plt>
   199a8:	ldr	r6, [r4]
   199ac:	mov	r5, r0
   199b0:	mov	r0, r4
   199b4:	bl	15234 <__assert_fail@plt+0x3b20>
   199b8:	tst	r6, #32
   199bc:	bne	199f4 <__assert_fail@plt+0x82e0>
   199c0:	cmp	r0, #0
   199c4:	mov	r4, r0
   199c8:	mvnne	r4, #0
   199cc:	cmp	r5, #0
   199d0:	bne	19a00 <__assert_fail@plt+0x82ec>
   199d4:	cmp	r0, #0
   199d8:	beq	19a00 <__assert_fail@plt+0x82ec>
   199dc:	bl	115d0 <__errno_location@plt>
   199e0:	ldr	r0, [r0]
   199e4:	subs	r4, r0, #9
   199e8:	mvnne	r4, #0
   199ec:	mov	r0, r4
   199f0:	pop	{r4, r5, r6, sl, fp, pc}
   199f4:	mvn	r4, #0
   199f8:	cmp	r0, #0
   199fc:	beq	19a08 <__assert_fail@plt+0x82f4>
   19a00:	mov	r0, r4
   19a04:	pop	{r4, r5, r6, sl, fp, pc}
   19a08:	bl	115d0 <__errno_location@plt>
   19a0c:	mov	r1, #0
   19a10:	str	r1, [r0]
   19a14:	mov	r0, r4
   19a18:	pop	{r4, r5, r6, sl, fp, pc}
   19a1c:	push	{fp, lr}
   19a20:	mov	fp, sp
   19a24:	mov	r0, #14
   19a28:	bl	116a8 <nl_langinfo@plt>
   19a2c:	movw	r1, #42213	; 0xa4e5
   19a30:	cmp	r0, #0
   19a34:	movt	r1, #1
   19a38:	movne	r1, r0
   19a3c:	movw	r0, #46766	; 0xb6ae
   19a40:	ldrb	r2, [r1]
   19a44:	movt	r0, #1
   19a48:	cmp	r2, #0
   19a4c:	movne	r0, r1
   19a50:	pop	{fp, pc}
   19a54:	push	{r4, r5, r6, r7, fp, lr}
   19a58:	add	fp, sp, #16
   19a5c:	sub	sp, sp, #8
   19a60:	cmp	r0, #0
   19a64:	add	r5, sp, #4
   19a68:	mov	r7, r2
   19a6c:	mov	r4, r1
   19a70:	movne	r5, r0
   19a74:	mov	r0, r5
   19a78:	bl	114ec <mbrtowc@plt>
   19a7c:	mov	r6, r0
   19a80:	cmp	r7, #0
   19a84:	beq	19aac <__assert_fail@plt+0x8398>
   19a88:	cmn	r6, #2
   19a8c:	bcc	19aac <__assert_fail@plt+0x8398>
   19a90:	mov	r0, #0
   19a94:	bl	19ce0 <__assert_fail@plt+0x85cc>
   19a98:	cmp	r0, #0
   19a9c:	bne	19aac <__assert_fail@plt+0x8398>
   19aa0:	ldrb	r0, [r4]
   19aa4:	mov	r6, #1
   19aa8:	str	r0, [r5]
   19aac:	mov	r0, r6
   19ab0:	sub	sp, fp, #16
   19ab4:	pop	{r4, r5, r6, r7, fp, pc}
   19ab8:	cmp	r2, #0
   19abc:	beq	19aec <__assert_fail@plt+0x83d8>
   19ac0:	mvn	r3, #0
   19ac4:	udiv	r3, r3, r2
   19ac8:	cmp	r3, r1
   19acc:	bcs	19aec <__assert_fail@plt+0x83d8>
   19ad0:	push	{fp, lr}
   19ad4:	mov	fp, sp
   19ad8:	bl	115d0 <__errno_location@plt>
   19adc:	mov	r1, #12
   19ae0:	str	r1, [r0]
   19ae4:	mov	r0, #0
   19ae8:	pop	{fp, pc}
   19aec:	mul	r1, r2, r1
   19af0:	b	19944 <__assert_fail@plt+0x8230>
   19af4:	mov	r1, #0
   19af8:	mov	r2, #3
   19afc:	b	19b00 <__assert_fail@plt+0x83ec>
   19b00:	sub	sp, sp, #8
   19b04:	push	{r4, r5, r6, r7, fp, lr}
   19b08:	add	fp, sp, #16
   19b0c:	sub	sp, sp, #8
   19b10:	mov	r5, r0
   19b14:	add	r0, fp, #8
   19b18:	cmp	r1, #11
   19b1c:	str	r2, [fp, #8]
   19b20:	str	r3, [fp, #12]
   19b24:	str	r0, [sp, #4]
   19b28:	bhi	19b64 <__assert_fail@plt+0x8450>
   19b2c:	mov	r0, #1
   19b30:	movw	r2, #1300	; 0x514
   19b34:	tst	r2, r0, lsl r1
   19b38:	bne	19c24 <__assert_fail@plt+0x8510>
   19b3c:	movw	r2, #2570	; 0xa0a
   19b40:	tst	r2, r0, lsl r1
   19b44:	bne	19b8c <__assert_fail@plt+0x8478>
   19b48:	cmp	r1, #0
   19b4c:	bne	19b64 <__assert_fail@plt+0x8450>
   19b50:	ldr	r0, [sp, #4]
   19b54:	add	r1, r0, #4
   19b58:	str	r1, [sp, #4]
   19b5c:	mov	r1, #0
   19b60:	b	19c30 <__assert_fail@plt+0x851c>
   19b64:	sub	r0, r1, #1024	; 0x400
   19b68:	cmp	r0, #10
   19b6c:	bhi	19c24 <__assert_fail@plt+0x8510>
   19b70:	mov	r2, #1
   19b74:	movw	r3, #645	; 0x285
   19b78:	tst	r3, r2, lsl r0
   19b7c:	bne	19c24 <__assert_fail@plt+0x8510>
   19b80:	movw	r3, #1282	; 0x502
   19b84:	tst	r3, r2, lsl r0
   19b88:	beq	19b98 <__assert_fail@plt+0x8484>
   19b8c:	mov	r0, r5
   19b90:	bl	11660 <fcntl64@plt>
   19b94:	b	19c3c <__assert_fail@plt+0x8528>
   19b98:	cmp	r0, #6
   19b9c:	bne	19c24 <__assert_fail@plt+0x8510>
   19ba0:	ldr	r0, [sp, #4]
   19ba4:	movw	r7, #50776	; 0xc658
   19ba8:	movt	r7, #2
   19bac:	add	r1, r0, #4
   19bb0:	str	r1, [sp, #4]
   19bb4:	ldr	r6, [r0]
   19bb8:	ldr	r0, [r7]
   19bbc:	cmp	r0, #0
   19bc0:	bmi	19c60 <__assert_fail@plt+0x854c>
   19bc4:	mov	r0, r5
   19bc8:	movw	r1, #1030	; 0x406
   19bcc:	mov	r2, r6
   19bd0:	bl	11660 <fcntl64@plt>
   19bd4:	mov	r4, r0
   19bd8:	cmn	r0, #1
   19bdc:	bgt	19c54 <__assert_fail@plt+0x8540>
   19be0:	bl	115d0 <__errno_location@plt>
   19be4:	ldr	r0, [r0]
   19be8:	cmp	r0, #22
   19bec:	bne	19c54 <__assert_fail@plt+0x8540>
   19bf0:	mov	r0, r5
   19bf4:	mov	r1, #0
   19bf8:	mov	r2, r6
   19bfc:	bl	11660 <fcntl64@plt>
   19c00:	mov	r4, r0
   19c04:	cmp	r0, #0
   19c08:	bmi	19c40 <__assert_fail@plt+0x852c>
   19c0c:	mvn	r0, #0
   19c10:	str	r0, [r7]
   19c14:	mov	r0, #1
   19c18:	cmp	r0, #0
   19c1c:	bne	19c8c <__assert_fail@plt+0x8578>
   19c20:	b	19c40 <__assert_fail@plt+0x852c>
   19c24:	ldr	r0, [sp, #4]
   19c28:	add	r2, r0, #4
   19c2c:	str	r2, [sp, #4]
   19c30:	ldr	r2, [r0]
   19c34:	mov	r0, r5
   19c38:	bl	11660 <fcntl64@plt>
   19c3c:	mov	r4, r0
   19c40:	mov	r0, r4
   19c44:	sub	sp, fp, #16
   19c48:	pop	{r4, r5, r6, r7, fp, lr}
   19c4c:	add	sp, sp, #8
   19c50:	bx	lr
   19c54:	mov	r0, #1
   19c58:	str	r0, [r7]
   19c5c:	b	19c40 <__assert_fail@plt+0x852c>
   19c60:	mov	r0, r5
   19c64:	mov	r1, #0
   19c68:	mov	r2, r6
   19c6c:	bl	11660 <fcntl64@plt>
   19c70:	mov	r4, r0
   19c74:	ldr	r0, [r7]
   19c78:	add	r0, r0, #1
   19c7c:	clz	r0, r0
   19c80:	lsr	r0, r0, #5
   19c84:	cmp	r0, #0
   19c88:	beq	19c40 <__assert_fail@plt+0x852c>
   19c8c:	cmp	r4, #0
   19c90:	bmi	19c40 <__assert_fail@plt+0x852c>
   19c94:	mov	r0, r4
   19c98:	mov	r1, #1
   19c9c:	bl	11660 <fcntl64@plt>
   19ca0:	cmp	r0, #0
   19ca4:	bmi	19cc0 <__assert_fail@plt+0x85ac>
   19ca8:	orr	r2, r0, #1
   19cac:	mov	r0, r4
   19cb0:	mov	r1, #2
   19cb4:	bl	11660 <fcntl64@plt>
   19cb8:	cmn	r0, #1
   19cbc:	bne	19c40 <__assert_fail@plt+0x852c>
   19cc0:	bl	115d0 <__errno_location@plt>
   19cc4:	ldr	r6, [r0]
   19cc8:	mov	r5, r0
   19ccc:	mov	r0, r4
   19cd0:	bl	116fc <close@plt>
   19cd4:	str	r6, [r5]
   19cd8:	mvn	r4, #0
   19cdc:	b	19c40 <__assert_fail@plt+0x852c>
   19ce0:	push	{r4, sl, fp, lr}
   19ce4:	add	fp, sp, #8
   19ce8:	sub	sp, sp, #264	; 0x108
   19cec:	add	r1, sp, #7
   19cf0:	movw	r2, #257	; 0x101
   19cf4:	bl	19d4c <__assert_fail@plt+0x8638>
   19cf8:	mov	r4, #0
   19cfc:	cmp	r0, #0
   19d00:	bne	19d40 <__assert_fail@plt+0x862c>
   19d04:	movw	r1, #46772	; 0xb6b4
   19d08:	add	r0, sp, #7
   19d0c:	mov	r2, #2
   19d10:	movt	r1, #1
   19d14:	bl	1157c <bcmp@plt>
   19d18:	cmp	r0, #0
   19d1c:	beq	19d40 <__assert_fail@plt+0x862c>
   19d20:	movw	r1, #46774	; 0xb6b6
   19d24:	add	r0, sp, #7
   19d28:	mov	r2, #6
   19d2c:	movt	r1, #1
   19d30:	bl	1157c <bcmp@plt>
   19d34:	cmp	r0, #0
   19d38:	mov	r4, r0
   19d3c:	movwne	r4, #1
   19d40:	mov	r0, r4
   19d44:	sub	sp, fp, #8
   19d48:	pop	{r4, sl, fp, pc}
   19d4c:	push	{r4, r5, r6, r7, fp, lr}
   19d50:	add	fp, sp, #16
   19d54:	mov	r4, r1
   19d58:	mov	r1, #0
   19d5c:	mov	r6, r2
   19d60:	bl	1166c <setlocale@plt>
   19d64:	cmp	r0, #0
   19d68:	beq	19d98 <__assert_fail@plt+0x8684>
   19d6c:	mov	r7, r0
   19d70:	bl	11588 <strlen@plt>
   19d74:	cmp	r0, r6
   19d78:	bcs	19db4 <__assert_fail@plt+0x86a0>
   19d7c:	add	r2, r0, #1
   19d80:	mov	r0, r4
   19d84:	mov	r1, r7
   19d88:	bl	11408 <memcpy@plt>
   19d8c:	mov	r5, #0
   19d90:	mov	r0, r5
   19d94:	pop	{r4, r5, r6, r7, fp, pc}
   19d98:	mov	r5, #22
   19d9c:	cmp	r6, #0
   19da0:	beq	19ddc <__assert_fail@plt+0x86c8>
   19da4:	mov	r0, #0
   19da8:	strb	r0, [r4]
   19dac:	mov	r0, r5
   19db0:	pop	{r4, r5, r6, r7, fp, pc}
   19db4:	mov	r5, #34	; 0x22
   19db8:	cmp	r6, #0
   19dbc:	beq	19ddc <__assert_fail@plt+0x86c8>
   19dc0:	sub	r6, r6, #1
   19dc4:	mov	r0, r4
   19dc8:	mov	r1, r7
   19dcc:	mov	r2, r6
   19dd0:	bl	11408 <memcpy@plt>
   19dd4:	mov	r0, #0
   19dd8:	strb	r0, [r4, r6]
   19ddc:	mov	r0, r5
   19de0:	pop	{r4, r5, r6, r7, fp, pc}
   19de4:	mov	r1, #0
   19de8:	b	1166c <setlocale@plt>
   19dec:	cmp	r3, #0
   19df0:	cmpeq	r2, #0
   19df4:	bne	19e0c <__assert_fail@plt+0x86f8>
   19df8:	cmp	r1, #0
   19dfc:	cmpeq	r0, #0
   19e00:	mvnne	r1, #0
   19e04:	mvnne	r0, #0
   19e08:	b	19e28 <__assert_fail@plt+0x8714>
   19e0c:	sub	sp, sp, #8
   19e10:	push	{sp, lr}
   19e14:	bl	19e38 <__assert_fail@plt+0x8724>
   19e18:	ldr	lr, [sp, #4]
   19e1c:	add	sp, sp, #8
   19e20:	pop	{r2, r3}
   19e24:	bx	lr
   19e28:	push	{r1, lr}
   19e2c:	mov	r0, #8
   19e30:	bl	1139c <raise@plt>
   19e34:	pop	{r1, pc}
   19e38:	cmp	r1, r3
   19e3c:	cmpeq	r0, r2
   19e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e44:	mov	r4, r0
   19e48:	movcc	r0, #0
   19e4c:	mov	r5, r1
   19e50:	ldr	lr, [sp, #36]	; 0x24
   19e54:	movcc	r1, r0
   19e58:	bcc	19f54 <__assert_fail@plt+0x8840>
   19e5c:	cmp	r3, #0
   19e60:	clzeq	ip, r2
   19e64:	clzne	ip, r3
   19e68:	addeq	ip, ip, #32
   19e6c:	cmp	r5, #0
   19e70:	clzeq	r1, r4
   19e74:	addeq	r1, r1, #32
   19e78:	clzne	r1, r5
   19e7c:	sub	ip, ip, r1
   19e80:	sub	sl, ip, #32
   19e84:	lsl	r9, r3, ip
   19e88:	rsb	fp, ip, #32
   19e8c:	orr	r9, r9, r2, lsl sl
   19e90:	orr	r9, r9, r2, lsr fp
   19e94:	lsl	r8, r2, ip
   19e98:	cmp	r5, r9
   19e9c:	cmpeq	r4, r8
   19ea0:	movcc	r0, #0
   19ea4:	movcc	r1, r0
   19ea8:	bcc	19ec4 <__assert_fail@plt+0x87b0>
   19eac:	mov	r0, #1
   19eb0:	subs	r4, r4, r8
   19eb4:	lsl	r1, r0, sl
   19eb8:	orr	r1, r1, r0, lsr fp
   19ebc:	lsl	r0, r0, ip
   19ec0:	sbc	r5, r5, r9
   19ec4:	cmp	ip, #0
   19ec8:	beq	19f54 <__assert_fail@plt+0x8840>
   19ecc:	lsr	r6, r8, #1
   19ed0:	orr	r6, r6, r9, lsl #31
   19ed4:	lsr	r7, r9, #1
   19ed8:	mov	r2, ip
   19edc:	b	19f00 <__assert_fail@plt+0x87ec>
   19ee0:	subs	r3, r4, r6
   19ee4:	sbc	r8, r5, r7
   19ee8:	adds	r3, r3, r3
   19eec:	adc	r8, r8, r8
   19ef0:	adds	r4, r3, #1
   19ef4:	adc	r5, r8, #0
   19ef8:	subs	r2, r2, #1
   19efc:	beq	19f1c <__assert_fail@plt+0x8808>
   19f00:	cmp	r5, r7
   19f04:	cmpeq	r4, r6
   19f08:	bcs	19ee0 <__assert_fail@plt+0x87cc>
   19f0c:	adds	r4, r4, r4
   19f10:	adc	r5, r5, r5
   19f14:	subs	r2, r2, #1
   19f18:	bne	19f00 <__assert_fail@plt+0x87ec>
   19f1c:	lsr	r3, r4, ip
   19f20:	orr	r3, r3, r5, lsl fp
   19f24:	lsr	r2, r5, ip
   19f28:	orr	r3, r3, r5, lsr sl
   19f2c:	adds	r0, r0, r4
   19f30:	mov	r4, r3
   19f34:	lsl	r3, r2, ip
   19f38:	orr	r3, r3, r4, lsl sl
   19f3c:	lsl	ip, r4, ip
   19f40:	orr	r3, r3, r4, lsr fp
   19f44:	adc	r1, r1, r5
   19f48:	subs	r0, r0, ip
   19f4c:	mov	r5, r2
   19f50:	sbc	r1, r1, r3
   19f54:	cmp	lr, #0
   19f58:	strdne	r4, [lr]
   19f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f64:	mov	r7, r0
   19f68:	ldr	r6, [pc, #72]	; 19fb8 <__assert_fail@plt+0x88a4>
   19f6c:	ldr	r5, [pc, #72]	; 19fbc <__assert_fail@plt+0x88a8>
   19f70:	add	r6, pc, r6
   19f74:	add	r5, pc, r5
   19f78:	sub	r6, r6, r5
   19f7c:	mov	r8, r1
   19f80:	mov	r9, r2
   19f84:	bl	11358 <fdopen@plt-0x20>
   19f88:	asrs	r6, r6, #2
   19f8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f90:	mov	r4, #0
   19f94:	add	r4, r4, #1
   19f98:	ldr	r3, [r5], #4
   19f9c:	mov	r2, r9
   19fa0:	mov	r1, r8
   19fa4:	mov	r0, r7
   19fa8:	blx	r3
   19fac:	cmp	r6, r4
   19fb0:	bne	19f94 <__assert_fail@plt+0x8880>
   19fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fb8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   19fbc:	andeq	r1, r1, ip, lsl #31
   19fc0:	bx	lr
   19fc4:	ldr	r3, [pc, #12]	; 19fd8 <__assert_fail@plt+0x88c4>
   19fc8:	mov	r1, #0
   19fcc:	add	r3, pc, r3
   19fd0:	ldr	r2, [r3]
   19fd4:	b	115e8 <__cxa_atexit@plt>
   19fd8:	andeq	r2, r1, r8, ror r1

Disassembly of section .fini:

00019fdc <.fini>:
   19fdc:	push	{r3, lr}
   19fe0:	pop	{r3, pc}
