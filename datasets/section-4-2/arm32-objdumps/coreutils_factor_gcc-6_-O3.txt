
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011320 <.init>:
   11320:	push	{r3, lr}
   11324:	bl	11a00 <__assert_fail@plt+0x2ac>
   11328:	pop	{r3, pc}

Disassembly of section .plt:

0001132c <calloc@plt-0x14>:
   1132c:	push	{lr}		; (str lr, [sp, #-4]!)
   11330:	ldr	lr, [pc, #4]	; 1133c <calloc@plt-0x4>
   11334:	add	lr, pc, lr
   11338:	ldr	pc, [lr, #8]!
   1133c:	andeq	r5, r2, r4, asr #25

00011340 <calloc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #151552	; 0x25000
   11348:	ldr	pc, [ip, #3268]!	; 0xcc4

0001134c <fputs_unlocked@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #151552	; 0x25000
   11354:	ldr	pc, [ip, #3260]!	; 0xcbc

00011358 <raise@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #151552	; 0x25000
   11360:	ldr	pc, [ip, #3252]!	; 0xcb4

00011364 <__gmpz_scan1@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #151552	; 0x25000
   1136c:	ldr	pc, [ip, #3244]!	; 0xcac

00011370 <iconv_close@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #151552	; 0x25000
   11378:	ldr	pc, [ip, #3236]!	; 0xca4

0001137c <iconv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #151552	; 0x25000
   11384:	ldr	pc, [ip, #3228]!	; 0xc9c

00011388 <strcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #151552	; 0x25000
   11390:	ldr	pc, [ip, #3220]!	; 0xc94

00011394 <fflush@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #151552	; 0x25000
   1139c:	ldr	pc, [ip, #3212]!	; 0xc8c

000113a0 <__gmpz_sub_ui@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #151552	; 0x25000
   113a8:	ldr	pc, [ip, #3204]!	; 0xc84

000113ac <__gmpz_clears@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #151552	; 0x25000
   113b4:	ldr	pc, [ip, #3196]!	; 0xc7c

000113b8 <wcwidth@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #151552	; 0x25000
   113c0:	ldr	pc, [ip, #3188]!	; 0xc74

000113c4 <memmove@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #151552	; 0x25000
   113cc:	ldr	pc, [ip, #3180]!	; 0xc6c

000113d0 <__gmpz_set_ui@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #151552	; 0x25000
   113d8:	ldr	pc, [ip, #3172]!	; 0xc64

000113dc <free@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #151552	; 0x25000
   113e4:	ldr	pc, [ip, #3164]!	; 0xc5c

000113e8 <_exit@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #151552	; 0x25000
   113f0:	ldr	pc, [ip, #3156]!	; 0xc54

000113f4 <memcpy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #151552	; 0x25000
   113fc:	ldr	pc, [ip, #3148]!	; 0xc4c

00011400 <__gmpz_sub@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #151552	; 0x25000
   11408:	ldr	pc, [ip, #3140]!	; 0xc44

0001140c <mbsinit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #151552	; 0x25000
   11414:	ldr	pc, [ip, #3132]!	; 0xc3c

00011418 <memcmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #151552	; 0x25000
   11420:	ldr	pc, [ip, #3124]!	; 0xc34

00011424 <fputc_unlocked@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #151552	; 0x25000
   1142c:	ldr	pc, [ip, #3116]!	; 0xc2c

00011430 <dcgettext@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #151552	; 0x25000
   11438:	ldr	pc, [ip, #3108]!	; 0xc24

0001143c <__gmpz_powm@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #151552	; 0x25000
   11444:	ldr	pc, [ip, #3100]!	; 0xc1c

00011448 <strdup@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #151552	; 0x25000
   11450:	ldr	pc, [ip, #3092]!	; 0xc14

00011454 <__gmpz_divexact@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #151552	; 0x25000
   1145c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011460 <__gmpz_inits@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #151552	; 0x25000
   11468:	ldr	pc, [ip, #3076]!	; 0xc04

0001146c <__gmpz_set@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #151552	; 0x25000
   11474:	ldr	pc, [ip, #3068]!	; 0xbfc

00011478 <realloc@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #151552	; 0x25000
   11480:	ldr	pc, [ip, #3060]!	; 0xbf4

00011484 <__gmpz_mul@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #151552	; 0x25000
   1148c:	ldr	pc, [ip, #3052]!	; 0xbec

00011490 <__gmpz_tdiv_q_ui@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #151552	; 0x25000
   11498:	ldr	pc, [ip, #3044]!	; 0xbe4

0001149c <textdomain@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #151552	; 0x25000
   114a4:	ldr	pc, [ip, #3036]!	; 0xbdc

000114a8 <iswcntrl@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #151552	; 0x25000
   114b0:	ldr	pc, [ip, #3028]!	; 0xbd4

000114b4 <__gmpz_out_str@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #151552	; 0x25000
   114bc:	ldr	pc, [ip, #3020]!	; 0xbcc

000114c0 <fflush_unlocked@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #151552	; 0x25000
   114c8:	ldr	pc, [ip, #3012]!	; 0xbc4

000114cc <iswprint@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #151552	; 0x25000
   114d4:	ldr	pc, [ip, #3004]!	; 0xbbc

000114d8 <fwrite@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #151552	; 0x25000
   114e0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114e4 <lseek64@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #151552	; 0x25000
   114ec:	ldr	pc, [ip, #2988]!	; 0xbac

000114f0 <__gmpz_fdiv_q_2exp@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #151552	; 0x25000
   114f8:	ldr	pc, [ip, #2980]!	; 0xba4

000114fc <__ctype_get_mb_cur_max@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #151552	; 0x25000
   11504:	ldr	pc, [ip, #2972]!	; 0xb9c

00011508 <__fpending@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #151552	; 0x25000
   11510:	ldr	pc, [ip, #2964]!	; 0xb94

00011514 <mbrtowc@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #151552	; 0x25000
   1151c:	ldr	pc, [ip, #2956]!	; 0xb8c

00011520 <error@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #151552	; 0x25000
   11528:	ldr	pc, [ip, #2948]!	; 0xb84

0001152c <malloc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #151552	; 0x25000
   11534:	ldr	pc, [ip, #2940]!	; 0xb7c

00011538 <iconv_open@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #151552	; 0x25000
   11540:	ldr	pc, [ip, #2932]!	; 0xb74

00011544 <__libc_start_main@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #151552	; 0x25000
   1154c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011550 <__freading@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #151552	; 0x25000
   11558:	ldr	pc, [ip, #2916]!	; 0xb64

0001155c <__gmpz_init_set_si@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #151552	; 0x25000
   11564:	ldr	pc, [ip, #2908]!	; 0xb5c

00011568 <__gmpz_add_ui@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #151552	; 0x25000
   11570:	ldr	pc, [ip, #2900]!	; 0xb54

00011574 <__gmon_start__@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #151552	; 0x25000
   1157c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011580 <getopt_long@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #151552	; 0x25000
   11588:	ldr	pc, [ip, #2884]!	; 0xb44

0001158c <__ctype_b_loc@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #151552	; 0x25000
   11594:	ldr	pc, [ip, #2876]!	; 0xb3c

00011598 <exit@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #151552	; 0x25000
   115a0:	ldr	pc, [ip, #2868]!	; 0xb34

000115a4 <iswspace@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #151552	; 0x25000
   115ac:	ldr	pc, [ip, #2860]!	; 0xb2c

000115b0 <strlen@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #151552	; 0x25000
   115b8:	ldr	pc, [ip, #2852]!	; 0xb24

000115bc <strchr@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #151552	; 0x25000
   115c4:	ldr	pc, [ip, #2844]!	; 0xb1c

000115c8 <__gmpz_divisible_ui_p@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #151552	; 0x25000
   115d0:	ldr	pc, [ip, #2836]!	; 0xb14

000115d4 <__gmpz_clear@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #151552	; 0x25000
   115dc:	ldr	pc, [ip, #2828]!	; 0xb0c

000115e0 <__errno_location@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #151552	; 0x25000
   115e8:	ldr	pc, [ip, #2820]!	; 0xb04

000115ec <iswalnum@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #151552	; 0x25000
   115f4:	ldr	pc, [ip, #2812]!	; 0xafc

000115f8 <__sprintf_chk@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #151552	; 0x25000
   11600:	ldr	pc, [ip, #2804]!	; 0xaf4

00011604 <__cxa_atexit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #151552	; 0x25000
   1160c:	ldr	pc, [ip, #2796]!	; 0xaec

00011610 <memset@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #151552	; 0x25000
   11618:	ldr	pc, [ip, #2788]!	; 0xae4

0001161c <__gmpz_tdiv_q_2exp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #151552	; 0x25000
   11624:	ldr	pc, [ip, #2780]!	; 0xadc

00011628 <__printf_chk@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #151552	; 0x25000
   11630:	ldr	pc, [ip, #2772]!	; 0xad4

00011634 <write@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #151552	; 0x25000
   1163c:	ldr	pc, [ip, #2764]!	; 0xacc

00011640 <fileno@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #151552	; 0x25000
   11648:	ldr	pc, [ip, #2756]!	; 0xac4

0001164c <__fprintf_chk@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #151552	; 0x25000
   11654:	ldr	pc, [ip, #2748]!	; 0xabc

00011658 <memchr@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #151552	; 0x25000
   11660:	ldr	pc, [ip, #2740]!	; 0xab4

00011664 <fclose@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #151552	; 0x25000
   1166c:	ldr	pc, [ip, #2732]!	; 0xaac

00011670 <strnlen@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #151552	; 0x25000
   11678:	ldr	pc, [ip, #2724]!	; 0xaa4

0001167c <fseeko64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #151552	; 0x25000
   11684:	ldr	pc, [ip, #2716]!	; 0xa9c

00011688 <__gmpz_mod@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #151552	; 0x25000
   11690:	ldr	pc, [ip, #2708]!	; 0xa94

00011694 <__gmpz_init_set_ui@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #151552	; 0x25000
   1169c:	ldr	pc, [ip, #2700]!	; 0xa8c

000116a0 <__gmpz_cmp@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #151552	; 0x25000
   116a8:	ldr	pc, [ip, #2692]!	; 0xa84

000116ac <__uflow@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #151552	; 0x25000
   116b4:	ldr	pc, [ip, #2684]!	; 0xa7c

000116b8 <__overflow@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #151552	; 0x25000
   116c0:	ldr	pc, [ip, #2676]!	; 0xa74

000116c4 <setlocale@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #151552	; 0x25000
   116cc:	ldr	pc, [ip, #2668]!	; 0xa6c

000116d0 <strrchr@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #151552	; 0x25000
   116d8:	ldr	pc, [ip, #2660]!	; 0xa64

000116dc <nl_langinfo@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #151552	; 0x25000
   116e4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116e8 <__gmpz_gcd@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #151552	; 0x25000
   116f0:	ldr	pc, [ip, #2644]!	; 0xa54

000116f4 <__gmpz_init_set_str@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #151552	; 0x25000
   116fc:	ldr	pc, [ip, #2636]!	; 0xa4c

00011700 <bindtextdomain@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #151552	; 0x25000
   11708:	ldr	pc, [ip, #2628]!	; 0xa44

0001170c <__gmpz_cmp_ui@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #151552	; 0x25000
   11714:	ldr	pc, [ip, #2620]!	; 0xa3c

00011718 <__gmpz_init@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #151552	; 0x25000
   11720:	ldr	pc, [ip, #2612]!	; 0xa34

00011724 <__gmpz_powm_ui@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #151552	; 0x25000
   1172c:	ldr	pc, [ip, #2604]!	; 0xa2c

00011730 <isatty@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #151552	; 0x25000
   11738:	ldr	pc, [ip, #2596]!	; 0xa24

0001173c <strncmp@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #151552	; 0x25000
   11744:	ldr	pc, [ip, #2588]!	; 0xa1c

00011748 <abort@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #151552	; 0x25000
   11750:	ldr	pc, [ip, #2580]!	; 0xa14

00011754 <__assert_fail@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #151552	; 0x25000
   1175c:	ldr	pc, [ip, #2572]!	; 0xa0c

Disassembly of section .text:

00011760 <.text>:
   11760:	push	{r4, lr}
   11764:	bl	115e0 <__errno_location@plt>
   11768:	mov	r2, #5
   1176c:	ldr	r1, [pc, #28]	; 11790 <__assert_fail@plt+0x3c>
   11770:	ldr	r4, [r0]
   11774:	mov	r0, #0
   11778:	bl	11430 <dcgettext@plt>
   1177c:	mov	r1, r4
   11780:	ldr	r2, [pc, #12]	; 11794 <__assert_fail@plt+0x40>
   11784:	mov	r3, r0
   11788:	mov	r0, #1
   1178c:	bl	11520 <error@plt>
   11790:	andeq	r5, r2, r0, lsl #28
   11794:	muleq	r2, ip, r2
   11798:	push	{r4, lr}
   1179c:	ldr	r3, [pc, #12]	; 117b0 <__assert_fail@plt+0x5c>
   117a0:	ldr	r2, [pc, #12]	; 117b4 <__assert_fail@plt+0x60>
   117a4:	ldr	r1, [pc, #12]	; 117b8 <__assert_fail@plt+0x64>
   117a8:	ldr	r0, [pc, #12]	; 117bc <__assert_fail@plt+0x68>
   117ac:	bl	11754 <__assert_fail@plt>
   117b0:	ldrdeq	r2, [r2], -ip
   117b4:	andeq	r0, r0, lr, lsr #4
   117b8:	muleq	r2, r0, sp
   117bc:	andeq	r5, r2, ip, lsl #28
   117c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117c4:	mov	r6, r0
   117c8:	sub	sp, sp, #24
   117cc:	ldr	r0, [r1]
   117d0:	mov	r4, r1
   117d4:	ldr	r7, [pc, #412]	; 11978 <__assert_fail@plt+0x224>
   117d8:	bl	19e34 <__assert_fail@plt+0x86e0>
   117dc:	ldr	r1, [pc, #408]	; 1197c <__assert_fail@plt+0x228>
   117e0:	mov	r0, #6
   117e4:	bl	116c4 <setlocale@plt>
   117e8:	ldr	r1, [pc, #400]	; 11980 <__assert_fail@plt+0x22c>
   117ec:	ldr	r0, [pc, #400]	; 11984 <__assert_fail@plt+0x230>
   117f0:	bl	11700 <bindtextdomain@plt>
   117f4:	ldr	r0, [pc, #392]	; 11984 <__assert_fail@plt+0x230>
   117f8:	bl	1149c <textdomain@plt>
   117fc:	ldr	r3, [r7]
   11800:	cmp	r3, #0
   11804:	beq	118d4 <__assert_fail@plt+0x180>
   11808:	ldr	r0, [pc, #376]	; 11988 <__assert_fail@plt+0x234>
   1180c:	bl	22ca8 <__assert_fail@plt+0x11554>
   11810:	ldr	r0, [pc, #372]	; 1198c <__assert_fail@plt+0x238>
   11814:	bl	22ca8 <__assert_fail@plt+0x11554>
   11818:	ldr	r9, [pc, #368]	; 11990 <__assert_fail@plt+0x23c>
   1181c:	ldr	r8, [pc, #344]	; 1197c <__assert_fail@plt+0x228>
   11820:	mov	r5, #0
   11824:	mov	sl, #1
   11828:	str	r5, [sp]
   1182c:	mov	r3, r9
   11830:	mov	r2, r8
   11834:	mov	r1, r4
   11838:	mov	r0, r6
   1183c:	bl	11580 <getopt_long@plt>
   11840:	cmn	r0, #1
   11844:	beq	118e8 <__assert_fail@plt+0x194>
   11848:	cmn	r0, #2
   1184c:	beq	118cc <__assert_fail@plt+0x178>
   11850:	cmp	r0, #256	; 0x100
   11854:	beq	118c4 <__assert_fail@plt+0x170>
   11858:	cmn	r0, #3
   1185c:	beq	11868 <__assert_fail@plt+0x114>
   11860:	mov	r0, #1
   11864:	bl	19934 <__assert_fail@plt+0x81e0>
   11868:	ldr	r2, [pc, #292]	; 11994 <__assert_fail@plt+0x240>
   1186c:	ldr	r3, [pc, #292]	; 11998 <__assert_fail@plt+0x244>
   11870:	ldr	r1, [pc, #292]	; 1199c <__assert_fail@plt+0x248>
   11874:	ldr	r0, [pc, #292]	; 119a0 <__assert_fail@plt+0x24c>
   11878:	ldr	r4, [r2]
   1187c:	ldr	r6, [r3]
   11880:	bl	1a778 <__assert_fail@plt+0x9024>
   11884:	ldr	r1, [pc, #280]	; 119a4 <__assert_fail@plt+0x250>
   11888:	mov	r7, r0
   1188c:	ldr	r0, [pc, #276]	; 119a8 <__assert_fail@plt+0x254>
   11890:	bl	1a778 <__assert_fail@plt+0x9024>
   11894:	ldr	r2, [pc, #272]	; 119ac <__assert_fail@plt+0x258>
   11898:	str	r7, [sp, #4]
   1189c:	str	r2, [sp]
   118a0:	mov	r3, r6
   118a4:	str	r5, [sp, #12]
   118a8:	ldr	r2, [pc, #256]	; 119b0 <__assert_fail@plt+0x25c>
   118ac:	ldr	r1, [pc, #256]	; 119b4 <__assert_fail@plt+0x260>
   118b0:	str	r0, [sp, #8]
   118b4:	mov	r0, r4
   118b8:	bl	1faa8 <__assert_fail@plt+0xe354>
   118bc:	mov	r0, #0
   118c0:	bl	11598 <exit@plt>
   118c4:	strb	sl, [r7, #8]
   118c8:	b	11828 <__assert_fail@plt+0xd4>
   118cc:	mov	r0, #0
   118d0:	bl	19934 <__assert_fail@plt+0x81e0>
   118d4:	mov	r0, #1024	; 0x400
   118d8:	bl	1fc90 <__assert_fail@plt+0xe53c>
   118dc:	str	r0, [r7]
   118e0:	str	r0, [r7, #4]
   118e4:	b	11808 <__assert_fail@plt+0xb4>
   118e8:	ldr	r3, [pc, #200]	; 119b8 <__assert_fail@plt+0x264>
   118ec:	ldr	r5, [r3]
   118f0:	cmp	r6, r5
   118f4:	movgt	r7, #1
   118f8:	ble	11928 <__assert_fail@plt+0x1d4>
   118fc:	ldr	r0, [r4, r5, lsl #2]
   11900:	bl	193b0 <__assert_fail@plt+0x7c5c>
   11904:	add	r5, r5, #1
   11908:	cmp	r0, #0
   1190c:	moveq	r7, #0
   11910:	cmp	r6, r5
   11914:	bne	118fc <__assert_fail@plt+0x1a8>
   11918:	eor	r0, r7, #1
   1191c:	uxtb	r0, r0
   11920:	add	sp, sp, #24
   11924:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11928:	add	r0, sp, #16
   1192c:	bl	1e9b0 <__assert_fail@plt+0xd25c>
   11930:	ldr	r6, [pc, #132]	; 119bc <__assert_fail@plt+0x268>
   11934:	ldr	r5, [pc, #132]	; 119c0 <__assert_fail@plt+0x26c>
   11938:	mov	r7, #1
   1193c:	mov	r4, #3
   11940:	b	11950 <__assert_fail@plt+0x1fc>
   11944:	bl	193b0 <__assert_fail@plt+0x7c5c>
   11948:	and	r7, r7, r0
   1194c:	uxtb	r7, r7
   11950:	add	r3, sp, #16
   11954:	mov	r2, r4
   11958:	mov	r1, r5
   1195c:	ldr	r0, [r6]
   11960:	bl	1e9c0 <__assert_fail@plt+0xd26c>
   11964:	cmn	r0, #1
   11968:	ldr	r0, [sp, #20]
   1196c:	bne	11944 <__assert_fail@plt+0x1f0>
   11970:	bl	19d04 <__assert_fail@plt+0x85b0>
   11974:	b	11918 <__assert_fail@plt+0x1c4>
   11978:	andeq	r7, r3, ip, ror #3
   1197c:	andeq	r6, r2, ip, rrx
   11980:	muleq	r2, r4, r1
   11984:	andeq	r6, r2, ip, ror #1
   11988:	andeq	r9, r1, r0, lsr #24
   1198c:	muleq	r1, r8, r6
   11990:	andeq	r5, r2, r0, asr sp
   11994:	andeq	r7, r3, r4, ror #3
   11998:	andeq	r7, r3, ip, ror r1
   1199c:	andeq	r6, r2, ip, lsr #3
   119a0:	andeq	r6, r2, r0, asr #3
   119a4:	ldrdeq	r6, [r2], -r4
   119a8:	andeq	r6, r2, r4, ror #3
   119ac:	strdeq	r6, [r2], -r4
   119b0:	andeq	r6, r2, r8, ror #1
   119b4:	andeq	r5, r2, r0, ror #30
   119b8:	ldrdeq	r7, [r3], -r0
   119bc:	andeq	r7, r3, r0, ror #3
   119c0:	andeq	r6, r2, r0, lsl #4
   119c4:	mov	fp, #0
   119c8:	mov	lr, #0
   119cc:	pop	{r1}		; (ldr r1, [sp], #4)
   119d0:	mov	r2, sp
   119d4:	push	{r2}		; (str r2, [sp, #-4]!)
   119d8:	push	{r0}		; (str r0, [sp, #-4]!)
   119dc:	ldr	ip, [pc, #16]	; 119f4 <__assert_fail@plt+0x2a0>
   119e0:	push	{ip}		; (str ip, [sp, #-4]!)
   119e4:	ldr	r0, [pc, #12]	; 119f8 <__assert_fail@plt+0x2a4>
   119e8:	ldr	r3, [pc, #12]	; 119fc <__assert_fail@plt+0x2a8>
   119ec:	bl	11544 <__libc_start_main@plt>
   119f0:	bl	11748 <abort@plt>
   119f4:	andeq	r2, r2, r4, lsr #25
   119f8:	andeq	r1, r1, r0, asr #15
   119fc:	andeq	r2, r2, r4, asr #24
   11a00:	ldr	r3, [pc, #20]	; 11a1c <__assert_fail@plt+0x2c8>
   11a04:	ldr	r2, [pc, #20]	; 11a20 <__assert_fail@plt+0x2cc>
   11a08:	add	r3, pc, r3
   11a0c:	ldr	r2, [r3, r2]
   11a10:	cmp	r2, #0
   11a14:	bxeq	lr
   11a18:	b	11574 <__gmon_start__@plt>
   11a1c:	strdeq	r5, [r2], -r0
   11a20:	andeq	r0, r0, ip, ror #2
   11a24:	ldr	r3, [pc, #28]	; 11a48 <__assert_fail@plt+0x2f4>
   11a28:	ldr	r0, [pc, #28]	; 11a4c <__assert_fail@plt+0x2f8>
   11a2c:	sub	r3, r3, r0
   11a30:	cmp	r3, #6
   11a34:	bxls	lr
   11a38:	ldr	r3, [pc, #16]	; 11a50 <__assert_fail@plt+0x2fc>
   11a3c:	cmp	r3, #0
   11a40:	bxeq	lr
   11a44:	bx	r3
   11a48:	andeq	r7, r3, r7, asr #3
   11a4c:	andeq	r7, r3, r4, asr #3
   11a50:	andeq	r0, r0, r0
   11a54:	ldr	r1, [pc, #36]	; 11a80 <__assert_fail@plt+0x32c>
   11a58:	ldr	r0, [pc, #36]	; 11a84 <__assert_fail@plt+0x330>
   11a5c:	sub	r1, r1, r0
   11a60:	asr	r1, r1, #2
   11a64:	add	r1, r1, r1, lsr #31
   11a68:	asrs	r1, r1, #1
   11a6c:	bxeq	lr
   11a70:	ldr	r3, [pc, #16]	; 11a88 <__assert_fail@plt+0x334>
   11a74:	cmp	r3, #0
   11a78:	bxeq	lr
   11a7c:	bx	r3
   11a80:	andeq	r7, r3, r4, asr #3
   11a84:	andeq	r7, r3, r4, asr #3
   11a88:	andeq	r0, r0, r0
   11a8c:	push	{r4, lr}
   11a90:	ldr	r4, [pc, #24]	; 11ab0 <__assert_fail@plt+0x35c>
   11a94:	ldrb	r3, [r4]
   11a98:	cmp	r3, #0
   11a9c:	popne	{r4, pc}
   11aa0:	bl	11a24 <__assert_fail@plt+0x2d0>
   11aa4:	mov	r3, #1
   11aa8:	strb	r3, [r4]
   11aac:	pop	{r4, pc}
   11ab0:	andeq	r7, r3, r8, ror #3
   11ab4:	ldr	r0, [pc, #40]	; 11ae4 <__assert_fail@plt+0x390>
   11ab8:	ldr	r3, [r0]
   11abc:	cmp	r3, #0
   11ac0:	bne	11ac8 <__assert_fail@plt+0x374>
   11ac4:	b	11a54 <__assert_fail@plt+0x300>
   11ac8:	ldr	r3, [pc, #24]	; 11ae8 <__assert_fail@plt+0x394>
   11acc:	cmp	r3, #0
   11ad0:	beq	11ac4 <__assert_fail@plt+0x370>
   11ad4:	push	{r4, lr}
   11ad8:	blx	r3
   11adc:	pop	{r4, lr}
   11ae0:	b	11a54 <__assert_fail@plt+0x300>
   11ae4:	andeq	r6, r3, ip, lsl #30
	...
   11af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11af4:	sub	sp, sp, #172	; 0xac
   11af8:	ldrd	r4, [sp, #248]	; 0xf8
   11afc:	strd	r2, [sp]
   11b00:	str	r0, [sp, #124]	; 0x7c
   11b04:	rsbs	r4, r4, #0
   11b08:	rsc	r5, r5, #0
   11b0c:	cmp	r2, #0
   11b10:	sbcs	r3, r3, #0
   11b14:	strd	r4, [sp, #80]	; 0x50
   11b18:	ldrd	sl, [sp, #208]	; 0xd0
   11b1c:	blt	124b0 <__assert_fail@plt+0xd5c>
   11b20:	ldrd	r2, [sp, #216]	; 0xd8
   11b24:	cmp	r2, #0
   11b28:	sbcs	r3, r3, #0
   11b2c:	blt	1249c <__assert_fail@plt+0xd48>
   11b30:	ldrd	r2, [sp, #232]	; 0xe8
   11b34:	cmp	r2, #0
   11b38:	sbcs	r3, r3, #0
   11b3c:	blt	12488 <__assert_fail@plt+0xd34>
   11b40:	ldrd	r0, [sp, #224]	; 0xe0
   11b44:	ldr	ip, [sp, #228]	; 0xe4
   11b48:	mov	r1, #0
   11b4c:	umull	r6, r7, r0, fp
   11b50:	umull	r4, r5, sl, ip
   11b54:	mul	ip, sl, r1
   11b58:	mla	r7, fp, r1, r7
   11b5c:	mov	r3, #0
   11b60:	strd	r0, [sp, #72]	; 0x48
   11b64:	ldr	r1, [sp, #228]	; 0xe4
   11b68:	umull	r8, r9, sl, r0
   11b6c:	mla	ip, r0, r3, ip
   11b70:	mla	r5, r1, r3, r5
   11b74:	add	ip, ip, r9
   11b78:	adds	r4, r4, r6
   11b7c:	adc	r5, r5, r7
   11b80:	strd	r8, [sp, #48]	; 0x30
   11b84:	adds	r8, ip, r4
   11b88:	ldr	ip, [sp, #228]	; 0xe4
   11b8c:	mov	r1, #0
   11b90:	adc	r9, r1, r5
   11b94:	umull	r4, r5, fp, ip
   11b98:	strd	r8, [sp, #8]
   11b9c:	cmp	r7, r9
   11ba0:	cmpeq	r6, r8
   11ba4:	mov	r2, sl
   11ba8:	strd	r4, [sp, #40]	; 0x28
   11bac:	bls	11bbc <__assert_fail@plt+0x468>
   11bb0:	adds	r4, r4, #0
   11bb4:	adc	r5, r5, #1
   11bb8:	strd	r4, [sp, #40]	; 0x28
   11bbc:	ldr	ip, [sp, #220]	; 0xdc
   11bc0:	ldrd	r4, [sp, #216]	; 0xd8
   11bc4:	mov	r5, #0
   11bc8:	umull	r6, r7, r2, ip
   11bcc:	ldr	lr, [sp, #220]	; 0xdc
   11bd0:	mov	r0, r4
   11bd4:	mov	r1, r5
   11bd8:	strd	r6, [sp, #24]
   11bdc:	mul	ip, r2, r5
   11be0:	strd	r0, [sp, #128]	; 0x80
   11be4:	ldr	r1, [sp, #28]
   11be8:	umull	r6, r7, r2, r4
   11bec:	mla	ip, r4, r3, ip
   11bf0:	mla	r3, lr, r3, r1
   11bf4:	umull	r8, r9, fp, r4
   11bf8:	str	r3, [sp, #28]
   11bfc:	add	ip, ip, r7
   11c00:	strd	r6, [sp, #56]	; 0x38
   11c04:	ldrd	r6, [sp, #24]
   11c08:	mla	r9, fp, r5, r9
   11c0c:	ldrd	r2, [sp, #40]	; 0x28
   11c10:	adds	r6, r6, r8
   11c14:	ldr	r1, [sp, #8]
   11c18:	ldr	r4, [sp, #12]
   11c1c:	mov	r5, #0
   11c20:	adc	r7, r7, r9
   11c24:	adds	r0, ip, r6
   11c28:	str	r1, [sp, #20]
   11c2c:	adc	r1, r5, r7
   11c30:	adds	r2, r2, r4
   11c34:	adc	r3, r3, r5
   11c38:	str	r5, [sp, #16]
   11c3c:	strd	r2, [sp, #88]	; 0x58
   11c40:	ldrd	r2, [sp, #16]
   11c44:	ldr	ip, [sp, #48]	; 0x30
   11c48:	strd	r0, [sp, #32]
   11c4c:	adds	r2, r2, ip
   11c50:	adc	r3, r3, #0
   11c54:	cmp	r9, r1
   11c58:	strd	r2, [sp, #16]
   11c5c:	umull	r2, r3, fp, lr
   11c60:	str	r5, [sp, #96]	; 0x60
   11c64:	cmpeq	r8, r0
   11c68:	strd	r2, [sp, #104]	; 0x68
   11c6c:	bls	11c7c <__assert_fail@plt+0x528>
   11c70:	adds	r2, r2, #0
   11c74:	adc	r3, r3, #1
   11c78:	strd	r2, [sp, #104]	; 0x68
   11c7c:	ldrd	r0, [sp, #80]	; 0x50
   11c80:	ldrd	r2, [sp, #16]
   11c84:	ldr	lr, [sp, #56]	; 0x38
   11c88:	mul	ip, r0, r3
   11c8c:	umull	r6, r7, r0, r2
   11c90:	mla	ip, r2, r1, ip
   11c94:	ldrd	r2, [sp, #240]	; 0xf0
   11c98:	add	ip, ip, r7
   11c9c:	mov	r3, #0
   11ca0:	mov	r8, r2
   11ca4:	mov	r2, r6
   11ca8:	umull	r0, r1, ip, r8
   11cac:	umull	sl, fp, r2, r8
   11cb0:	strd	r0, [sp, #8]
   11cb4:	ldr	r1, [sp, #244]	; 0xf4
   11cb8:	mov	r9, r3
   11cbc:	ldr	r0, [sp, #12]
   11cc0:	umull	r4, r5, r1, r2
   11cc4:	ldr	r1, [sp, #244]	; 0xf4
   11cc8:	mov	r3, #0
   11ccc:	mul	r6, r6, r9
   11cd0:	mla	r5, r1, r3, r5
   11cd4:	mla	r1, ip, r9, r0
   11cd8:	mla	r6, r8, r3, r6
   11cdc:	str	r1, [sp, #12]
   11ce0:	ldr	r1, [sp, #36]	; 0x24
   11ce4:	strd	r8, [sp, #136]	; 0x88
   11ce8:	add	r8, r6, fp
   11cec:	ldrd	sl, [sp, #8]
   11cf0:	str	r1, [sp, #24]
   11cf4:	mov	r1, #0
   11cf8:	str	r1, [sp, #28]
   11cfc:	ldrd	r0, [sp, #24]
   11d00:	adds	sl, sl, r4
   11d04:	adc	fp, fp, r5
   11d08:	mov	r5, fp
   11d0c:	adds	r4, sl, r8
   11d10:	ldr	fp, [sp, #32]
   11d14:	adc	r5, r5, r1
   11d18:	adds	r0, r1, lr
   11d1c:	mov	r9, r1
   11d20:	adc	r1, fp, #0
   11d24:	strd	r0, [sp, #112]	; 0x70
   11d28:	ldrd	r0, [sp, #8]
   11d2c:	str	r9, [sp, #8]
   11d30:	cmp	r1, r5
   11d34:	ldr	r1, [sp, #244]	; 0xf4
   11d38:	cmpeq	r0, r4
   11d3c:	umull	r0, r1, ip, r1
   11d40:	mov	r6, r0
   11d44:	mov	r7, r1
   11d48:	strd	r6, [sp, #64]	; 0x40
   11d4c:	bls	11d5c <__assert_fail@plt+0x608>
   11d50:	adds	r6, r0, #0
   11d54:	adc	r7, r1, #1
   11d58:	strd	r6, [sp, #64]	; 0x40
   11d5c:	ldr	r0, [sp, #236]	; 0xec
   11d60:	ldrd	r6, [sp, #232]	; 0xe8
   11d64:	mov	r7, #0
   11d68:	umull	r8, r9, r0, r2
   11d6c:	mul	r4, r2, r7
   11d70:	mov	sl, r6
   11d74:	mov	fp, r7
   11d78:	mul	r0, ip, r7
   11d7c:	ldr	lr, [sp, #236]	; 0xec
   11d80:	umull	r6, r7, r2, r6
   11d84:	ldr	r1, [sp, #8]
   11d88:	mla	r4, sl, r3, r4
   11d8c:	mla	r9, lr, r3, r9
   11d90:	umull	r2, r3, ip, sl
   11d94:	mla	r0, r1, sl, r0
   11d98:	strd	r6, [sp, #48]	; 0x30
   11d9c:	ldr	lr, [sp, #52]	; 0x34
   11da0:	add	r3, r0, r3
   11da4:	ldr	r0, [sp, #236]	; 0xec
   11da8:	add	r4, r4, lr
   11dac:	adds	r8, r8, r2
   11db0:	strd	sl, [sp, #160]	; 0xa0
   11db4:	mov	sl, r4
   11db8:	adc	r9, r9, r3
   11dbc:	mov	r6, r5
   11dc0:	mov	r7, #0
   11dc4:	umull	r4, r5, ip, r0
   11dc8:	adds	r0, sl, r8
   11dcc:	adc	r1, r7, r9
   11dd0:	cmp	r3, r1
   11dd4:	strd	r0, [sp, #56]	; 0x38
   11dd8:	ldr	r3, [sp, #236]	; 0xec
   11ddc:	ldr	r1, [sp, #8]
   11de0:	cmpeq	r2, r0
   11de4:	strd	r4, [sp, #40]	; 0x28
   11de8:	mla	r3, r1, r3, r5
   11dec:	str	r3, [sp, #44]	; 0x2c
   11df0:	bls	11e04 <__assert_fail@plt+0x6b0>
   11df4:	ldrd	r2, [sp, #40]	; 0x28
   11df8:	adds	r2, r2, #0
   11dfc:	adc	r3, r3, #1
   11e00:	strd	r2, [sp, #40]	; 0x28
   11e04:	ldrd	r0, [sp, #16]
   11e08:	ldrd	r8, [sp]
   11e0c:	ldrd	sl, [sp, #72]	; 0x48
   11e10:	mov	ip, r0
   11e14:	ldr	r0, [sp, #228]	; 0xe4
   11e18:	mov	r3, #0
   11e1c:	orrs	r1, ip, r1
   11e20:	umull	r4, r5, r0, r8
   11e24:	mul	ip, sl, r3
   11e28:	mov	r2, r8
   11e2c:	strd	r4, [sp, #32]
   11e30:	mov	r1, sl
   11e34:	umull	r8, r9, sl, r9
   11e38:	mla	r0, r2, fp, ip
   11e3c:	mov	r5, fp
   11e40:	mov	r4, sl
   11e44:	ldrd	sl, [sp, #112]	; 0x70
   11e48:	movne	r1, #1
   11e4c:	moveq	r1, #0
   11e50:	adds	sl, sl, r1
   11e54:	str	r0, [sp, #72]	; 0x48
   11e58:	adc	fp, fp, #0
   11e5c:	adds	r0, sl, r6
   11e60:	adc	r1, fp, r7
   11e64:	mov	r7, r1
   11e68:	ldr	r1, [sp, #60]	; 0x3c
   11e6c:	mov	r6, r0
   11e70:	str	r1, [sp, #8]
   11e74:	ldrd	r0, [sp, #64]	; 0x40
   11e78:	ldr	ip, [sp, #228]	; 0xe4
   11e7c:	ldr	lr, [sp, #36]	; 0x24
   11e80:	adds	r0, r0, r6
   11e84:	adc	r1, r1, r7
   11e88:	mla	ip, ip, r3, lr
   11e8c:	mov	r7, r1
   11e90:	ldr	lr, [sp, #4]
   11e94:	mov	r1, #0
   11e98:	str	r1, [sp, #12]
   11e9c:	ldr	r1, [sp, #56]	; 0x38
   11ea0:	str	ip, [sp, #36]	; 0x24
   11ea4:	mov	ip, #0
   11ea8:	mov	r6, r0
   11eac:	mla	r9, lr, r5, r9
   11eb0:	str	r1, [sp, #20]
   11eb4:	str	ip, [sp, #16]
   11eb8:	umull	r0, r1, r4, r2
   11ebc:	ldr	lr, [sp, #48]	; 0x30
   11ec0:	mov	ip, r5
   11ec4:	ldrd	r4, [sp, #88]	; 0x58
   11ec8:	cmp	fp, r7
   11ecc:	cmpeq	sl, r6
   11ed0:	movhi	ip, #1
   11ed4:	movls	ip, #0
   11ed8:	adds	r4, r4, r6
   11edc:	adc	r5, r5, r7
   11ee0:	strd	r0, [sp, #152]	; 0x98
   11ee4:	cmp	r7, r5
   11ee8:	ldr	r0, [sp, #72]	; 0x48
   11eec:	cmpeq	r6, r4
   11ef0:	str	ip, [sp, #56]	; 0x38
   11ef4:	add	ip, r0, r1
   11ef8:	movhi	r1, #1
   11efc:	movls	r1, #0
   11f00:	str	r1, [sp, #64]	; 0x40
   11f04:	ldrd	r0, [sp, #16]
   11f08:	adds	r0, r0, lr
   11f0c:	adc	r1, r1, #0
   11f10:	adds	sl, r0, r4
   11f14:	adc	fp, r1, r5
   11f18:	cmp	r5, fp
   11f1c:	cmpeq	r4, sl
   11f20:	movhi	r1, #1
   11f24:	movls	r1, #0
   11f28:	str	r1, [sp, #72]	; 0x48
   11f2c:	ldrd	r0, [sp, #32]
   11f30:	ldrd	r4, [sp, #8]
   11f34:	strd	sl, [sp, #144]	; 0x90
   11f38:	adds	r0, r0, r8
   11f3c:	adc	r1, r1, r9
   11f40:	adds	sl, ip, r0
   11f44:	adc	fp, r5, r1
   11f48:	cmp	r9, fp
   11f4c:	strd	sl, [sp, #16]
   11f50:	ldr	r1, [sp, #228]	; 0xe4
   11f54:	ldr	r0, [sp, #4]
   11f58:	cmpeq	r8, sl
   11f5c:	str	r5, [sp, #60]	; 0x3c
   11f60:	umull	r0, r1, r1, r0
   11f64:	str	r5, [sp, #68]	; 0x44
   11f68:	str	r5, [sp, #76]	; 0x4c
   11f6c:	strd	r0, [sp, #112]	; 0x70
   11f70:	mov	ip, r5
   11f74:	bls	11f84 <__assert_fail@plt+0x830>
   11f78:	adds	r0, r0, #0
   11f7c:	adc	r1, r1, #1
   11f80:	strd	r0, [sp, #112]	; 0x70
   11f84:	ldrd	r0, [sp, #128]	; 0x80
   11f88:	ldr	lr, [sp, #220]	; 0xdc
   11f8c:	umull	sl, fp, r0, r2
   11f90:	mul	r4, r0, r3
   11f94:	mul	r9, r0, ip
   11f98:	strd	sl, [sp, #88]	; 0x58
   11f9c:	ldrd	sl, [sp]
   11fa0:	mla	r4, r2, r1, r4
   11fa4:	mla	r9, fp, r1, r9
   11fa8:	mov	r1, r0
   11fac:	mul	r8, lr, r3
   11fb0:	umull	r0, r1, r1, fp
   11fb4:	mov	r7, r1
   11fb8:	ldr	r1, [sp, #96]	; 0x60
   11fbc:	mov	r6, r0
   11fc0:	ldr	r0, [sp, #20]
   11fc4:	mla	r8, r1, r2, r8
   11fc8:	ldr	r1, [sp, #220]	; 0xdc
   11fcc:	strd	r6, [sp]
   11fd0:	ldr	r6, [sp, #96]	; 0x60
   11fd4:	umull	r2, r3, r1, r2
   11fd8:	mul	ip, ip, r1
   11fdc:	ldr	r1, [sp, #92]	; 0x5c
   11fe0:	str	r0, [sp, #32]
   11fe4:	add	r1, r4, r1
   11fe8:	add	r0, r9, r7
   11fec:	mov	r4, r1
   11ff0:	str	r0, [sp, #4]
   11ff4:	mov	r1, #0
   11ff8:	mla	lr, r6, fp, ip
   11ffc:	str	r1, [sp, #36]	; 0x24
   12000:	ldrd	r6, [sp]
   12004:	ldr	r1, [sp, #220]	; 0xdc
   12008:	add	r3, r8, r3
   1200c:	adds	r6, r6, r2
   12010:	umull	r0, r1, r1, fp
   12014:	ldrd	sl, [sp, #32]
   12018:	adc	r7, r7, r3
   1201c:	ldr	ip, [sp, #152]	; 0x98
   12020:	adds	r2, r6, r4
   12024:	ldrd	r4, [sp]
   12028:	ldr	r9, [sp, #16]
   1202c:	adc	r3, r7, fp
   12030:	adds	r8, fp, ip
   12034:	adc	r9, r9, #0
   12038:	cmp	r5, r3
   1203c:	strd	r0, [sp, #48]	; 0x30
   12040:	cmpeq	r4, r2
   12044:	add	r1, lr, r1
   12048:	str	r1, [sp, #52]	; 0x34
   1204c:	bls	12060 <__assert_fail@plt+0x90c>
   12050:	ldrd	r0, [sp, #48]	; 0x30
   12054:	adds	r0, r0, #0
   12058:	adc	r1, r1, #1
   1205c:	strd	r0, [sp, #48]	; 0x30
   12060:	ldrd	r0, [sp, #144]	; 0x90
   12064:	mov	lr, #0
   12068:	str	lr, [sp, #20]
   1206c:	adds	r0, r0, r8
   12070:	adc	r1, r1, r9
   12074:	mov	r6, r0
   12078:	mov	r7, r1
   1207c:	ldrd	r0, [sp, #80]	; 0x50
   12080:	str	r3, [sp, #16]
   12084:	strd	r6, [sp, #96]	; 0x60
   12088:	mul	ip, r0, r7
   1208c:	mla	ip, r6, r1, ip
   12090:	mov	r1, r0
   12094:	umull	r0, r1, r1, r6
   12098:	mov	r4, r0
   1209c:	mov	r0, lr
   120a0:	ldr	lr, [sp, #88]	; 0x58
   120a4:	add	ip, ip, r1
   120a8:	adds	sl, r0, lr
   120ac:	mov	r5, r1
   120b0:	mov	r1, r2
   120b4:	adc	fp, r1, #0
   120b8:	cmp	r9, r7
   120bc:	cmpeq	r8, r6
   120c0:	mov	r1, r7
   120c4:	movhi	r1, #1
   120c8:	movls	r1, #0
   120cc:	strd	r4, [sp]
   120d0:	str	r1, [sp, #128]	; 0x80
   120d4:	str	ip, [sp, #4]
   120d8:	ldr	r1, [sp, #244]	; 0xf4
   120dc:	ldrd	r2, [sp]
   120e0:	mov	r3, #0
   120e4:	mov	r4, #0
   120e8:	mul	r5, r1, r3
   120ec:	ldrd	r8, [sp, #24]
   120f0:	mla	r5, r4, r2, r5
   120f4:	ldrd	r6, [sp, #8]
   120f8:	adds	r8, r8, sl
   120fc:	mov	r0, r8
   12100:	str	r5, [sp, #8]
   12104:	ldrd	r4, [sp, #104]	; 0x68
   12108:	adc	r9, r9, fp
   1210c:	adds	r6, r6, r0
   12110:	mov	r1, r9
   12114:	mov	r0, r6
   12118:	adc	r7, r7, r1
   1211c:	adds	r4, r4, r0
   12120:	mov	r0, r4
   12124:	ldr	r4, [sp, #244]	; 0xf4
   12128:	mov	r1, r7
   1212c:	adc	r5, r5, r1
   12130:	mov	r1, r5
   12134:	umull	r4, r5, r4, r2
   12138:	ldrd	r8, [sp, #136]	; 0x88
   1213c:	strd	r4, [sp, #88]	; 0x58
   12140:	ldrd	r4, [sp, #56]	; 0x38
   12144:	umull	r6, r7, r8, ip
   12148:	mul	lr, r8, r3
   1214c:	adds	r4, r4, r0
   12150:	adc	r5, r5, r1
   12154:	mov	r0, r4
   12158:	mov	r1, r5
   1215c:	umull	r4, r5, r8, r2
   12160:	mla	lr, r2, r9, lr
   12164:	strd	r4, [sp, #24]
   12168:	mov	r5, r9
   1216c:	ldrd	r8, [sp]
   12170:	strd	r6, [sp, #80]	; 0x50
   12174:	mov	r6, r7
   12178:	mla	r5, r9, r5, r6
   1217c:	ldrd	r6, [sp, #40]	; 0x28
   12180:	str	r5, [sp, #84]	; 0x54
   12184:	ldrd	r4, [sp, #64]	; 0x40
   12188:	adds	r4, r4, r0
   1218c:	adc	r5, r5, r1
   12190:	mov	r0, r4
   12194:	mov	r1, r5
   12198:	ldrd	r4, [sp, #72]	; 0x48
   1219c:	adds	r4, r4, r0
   121a0:	adc	r5, r5, r1
   121a4:	adds	r6, r6, r4
   121a8:	adc	r7, r7, r5
   121ac:	ldrd	r4, [sp, #32]
   121b0:	ldr	r1, [sp, #128]	; 0x80
   121b4:	strd	r6, [sp, #40]	; 0x28
   121b8:	adds	r4, r4, r1
   121bc:	adc	r5, r5, #0
   121c0:	mov	r0, r4
   121c4:	mov	r1, r5
   121c8:	ldr	r4, [sp, #92]	; 0x5c
   121cc:	ldr	r5, [sp, #8]
   121d0:	add	r4, r5, r4
   121d4:	str	r4, [sp, #92]	; 0x5c
   121d8:	ldr	r5, [sp, #244]	; 0xf4
   121dc:	ldr	r8, [sp, #28]
   121e0:	add	lr, lr, r8
   121e4:	umull	r4, r5, r5, r9
   121e8:	ldrd	r8, [sp, #112]	; 0x70
   121ec:	str	lr, [sp, #56]	; 0x38
   121f0:	strd	r4, [sp, #8]
   121f4:	adds	r8, r8, r0
   121f8:	adc	r9, r9, r1
   121fc:	cmp	fp, r7
   12200:	cmpeq	sl, r6
   12204:	ldrd	r0, [sp, #16]
   12208:	ldrd	r6, [sp, #80]	; 0x50
   1220c:	ldrd	sl, [sp, #88]	; 0x58
   12210:	movhi	lr, #1
   12214:	movls	lr, #0
   12218:	str	r1, [sp, #60]	; 0x3c
   1221c:	adds	sl, sl, r6
   12220:	adc	fp, fp, r7
   12224:	ldrd	r6, [sp, #56]	; 0x38
   12228:	strd	r8, [sp, #32]
   1222c:	str	lr, [sp, #24]
   12230:	adds	r6, r6, sl
   12234:	adc	r7, r7, fp
   12238:	mov	r8, r6
   1223c:	mov	r9, r7
   12240:	mov	lr, #0
   12244:	ldrd	r6, [sp, #80]	; 0x50
   12248:	mov	r4, r5
   1224c:	mla	lr, lr, ip, r4
   12250:	cmp	r7, r9
   12254:	cmpeq	r6, r8
   12258:	str	lr, [sp, #12]
   1225c:	str	r1, [sp, #28]
   12260:	mov	lr, r1
   12264:	bls	12278 <__assert_fail@plt+0xb24>
   12268:	ldrd	r0, [sp, #8]
   1226c:	adds	r0, r0, #0
   12270:	adc	r1, r1, #1
   12274:	strd	r0, [sp, #8]
   12278:	ldr	r6, [sp, #236]	; 0xec
   1227c:	ldrd	r0, [sp, #160]	; 0xa0
   12280:	mov	r7, #0
   12284:	mul	r8, r6, r3
   12288:	mov	r6, #0
   1228c:	mul	fp, r0, r3
   12290:	mla	r8, r6, r2, r8
   12294:	ldr	r6, [sp, #236]	; 0xec
   12298:	mul	sl, r0, lr
   1229c:	umull	r4, r5, r0, r2
   122a0:	mla	fp, r2, r1, fp
   122a4:	umull	r2, r3, r6, r2
   122a8:	mla	sl, ip, r1, sl
   122ac:	umull	r0, r1, r0, ip
   122b0:	mul	lr, lr, r6
   122b4:	add	r3, r8, r3
   122b8:	ldr	r8, [sp, #236]	; 0xec
   122bc:	add	r1, sl, r1
   122c0:	adds	r2, r2, r0
   122c4:	add	fp, fp, r5
   122c8:	adc	r3, r3, r1
   122cc:	mov	r6, r9
   122d0:	adds	r2, r2, fp
   122d4:	umull	r8, r9, r8, ip
   122d8:	mla	ip, ip, r7, lr
   122dc:	adc	r3, r3, r7
   122e0:	cmp	r1, r3
   122e4:	cmpeq	r0, r2
   122e8:	strd	r4, [sp]
   122ec:	add	r9, ip, r9
   122f0:	bls	122fc <__assert_fail@plt+0xba8>
   122f4:	adds	r8, r8, #0
   122f8:	adc	r9, r9, #1
   122fc:	ldrd	r0, [sp, #96]	; 0x60
   12300:	ldrd	sl, [sp, #40]	; 0x28
   12304:	mov	r4, r3
   12308:	mov	ip, r0
   1230c:	orrs	r1, ip, r1
   12310:	movne	ip, #1
   12314:	moveq	ip, #0
   12318:	adds	sl, sl, ip
   1231c:	adc	fp, fp, #0
   12320:	mov	r1, r2
   12324:	adds	r2, sl, r6
   12328:	adc	r3, fp, r7
   1232c:	mov	r6, r2
   12330:	mov	r7, r3
   12334:	ldrd	r2, [sp, #8]
   12338:	mov	r0, #0
   1233c:	ldr	ip, [sp]
   12340:	adds	r2, r2, r6
   12344:	adc	r3, r3, r7
   12348:	mov	r6, r2
   1234c:	mov	r7, r3
   12350:	ldrd	r2, [sp, #16]
   12354:	strd	sl, [sp, #40]	; 0x28
   12358:	ldrd	sl, [sp, #24]
   1235c:	adds	r2, r2, r4
   12360:	adc	r3, r3, r0
   12364:	mov	r4, r2
   12368:	mov	r5, r3
   1236c:	ldrd	r2, [sp, #32]
   12370:	adds	r2, r2, r6
   12374:	adc	r3, r3, r7
   12378:	adds	r0, r0, ip
   1237c:	adc	r1, r1, #0
   12380:	adds	sl, sl, r4
   12384:	adc	fp, fp, r5
   12388:	mov	r4, sl
   1238c:	mov	r5, fp
   12390:	ldrd	sl, [sp, #48]	; 0x30
   12394:	adds	r0, r0, r2
   12398:	adc	r1, r1, r3
   1239c:	adds	sl, sl, r4
   123a0:	adc	fp, fp, r5
   123a4:	mov	r4, sl
   123a8:	mov	r5, fp
   123ac:	ldrd	sl, [sp, #40]	; 0x28
   123b0:	cmp	fp, r7
   123b4:	cmpeq	sl, r6
   123b8:	movhi	ip, #1
   123bc:	movls	ip, #0
   123c0:	adds	r4, r4, ip
   123c4:	adc	r5, r5, #0
   123c8:	cmp	r7, r3
   123cc:	cmpeq	r6, r2
   123d0:	movhi	ip, #1
   123d4:	movls	ip, #0
   123d8:	adds	r4, r4, ip
   123dc:	adc	r5, r5, #0
   123e0:	cmp	r3, r1
   123e4:	cmpeq	r2, r0
   123e8:	movhi	r3, #1
   123ec:	movls	r3, #0
   123f0:	adds	r4, r4, r3
   123f4:	ldrd	r2, [sp, #232]	; 0xe8
   123f8:	adc	r5, r5, #0
   123fc:	adds	r8, r8, r4
   12400:	adc	r9, r9, r5
   12404:	cmp	r3, r9
   12408:	cmpeq	r2, r8
   1240c:	bcs	12460 <__assert_fail@plt+0xd0c>
   12410:	ldrd	r2, [sp, #240]	; 0xf0
   12414:	ldrd	r4, [sp, #232]	; 0xe8
   12418:	cmp	r3, r1
   1241c:	cmpeq	r2, r0
   12420:	movhi	r2, #1
   12424:	movls	r2, #0
   12428:	subs	r4, r8, r4
   1242c:	mov	r3, #0
   12430:	sbc	r5, r9, r5
   12434:	subs	r8, r4, r2
   12438:	sbc	r9, r5, r3
   1243c:	ldrd	r2, [sp, #240]	; 0xf0
   12440:	subs	r2, r0, r2
   12444:	sbc	r3, r1, r3
   12448:	mov	r0, r2
   1244c:	mov	r1, r3
   12450:	ldr	r3, [sp, #124]	; 0x7c
   12454:	strd	r8, [r3]
   12458:	add	sp, sp, #172	; 0xac
   1245c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12460:	ldrd	r4, [sp, #240]	; 0xf0
   12464:	moveq	r3, #1
   12468:	movne	r3, #0
   1246c:	cmp	r5, r1
   12470:	cmpeq	r4, r0
   12474:	movhi	r3, #0
   12478:	andls	r3, r3, #1
   1247c:	cmp	r3, #0
   12480:	bne	12410 <__assert_fail@plt+0xcbc>
   12484:	b	12450 <__assert_fail@plt+0xcfc>
   12488:	ldr	r3, [pc, #52]	; 124c4 <__assert_fail@plt+0xd70>
   1248c:	ldr	r2, [pc, #52]	; 124c8 <__assert_fail@plt+0xd74>
   12490:	ldr	r1, [pc, #52]	; 124cc <__assert_fail@plt+0xd78>
   12494:	ldr	r0, [pc, #52]	; 124d0 <__assert_fail@plt+0xd7c>
   12498:	bl	11754 <__assert_fail@plt>
   1249c:	ldr	r3, [pc, #32]	; 124c4 <__assert_fail@plt+0xd70>
   124a0:	ldr	r2, [pc, #44]	; 124d4 <__assert_fail@plt+0xd80>
   124a4:	ldr	r1, [pc, #32]	; 124cc <__assert_fail@plt+0xd78>
   124a8:	ldr	r0, [pc, #40]	; 124d8 <__assert_fail@plt+0xd84>
   124ac:	bl	11754 <__assert_fail@plt>
   124b0:	ldr	r3, [pc, #12]	; 124c4 <__assert_fail@plt+0xd70>
   124b4:	ldr	r2, [pc, #32]	; 124dc <__assert_fail@plt+0xd88>
   124b8:	ldr	r1, [pc, #12]	; 124cc <__assert_fail@plt+0xd78>
   124bc:	ldr	r0, [pc, #28]	; 124e0 <__assert_fail@plt+0xd8c>
   124c0:	bl	11754 <__assert_fail@plt>
   124c4:	ldrdeq	r2, [r2], -r0
   124c8:	andeq	r0, r0, r3, ror #7
   124cc:	muleq	r2, r0, sp
   124d0:	andeq	r5, r2, r0, ror #27
   124d4:	andeq	r0, r0, r2, ror #7
   124d8:	andeq	r5, r2, r0, asr #27
   124dc:	andeq	r0, r0, r1, ror #7
   124e0:	andeq	r5, r2, r0, lsr #27
   124e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124e8:	sub	sp, sp, #12
   124ec:	ldr	r7, [r0, #8]
   124f0:	ldr	r3, [r0]
   124f4:	subs	r5, r7, #1
   124f8:	mov	r8, r0
   124fc:	mov	r6, r1
   12500:	str	r3, [sp]
   12504:	ldr	fp, [r0, #4]
   12508:	bmi	12650 <__assert_fail@plt+0xefc>
   1250c:	add	r4, r7, r7, lsl #1
   12510:	mov	r9, r5
   12514:	lsl	r4, r4, #2
   12518:	sub	sl, r4, #12
   1251c:	add	sl, r3, sl
   12520:	b	1252c <__assert_fail@plt+0xdd8>
   12524:	subs	r9, r9, #1
   12528:	bcc	1255c <__assert_fail@plt+0xe08>
   1252c:	mov	r0, sl
   12530:	mov	r1, r6
   12534:	bl	116a0 <__gmpz_cmp@plt>
   12538:	sub	sl, sl, #12
   1253c:	cmp	r0, #0
   12540:	bgt	12524 <__assert_fail@plt+0xdd0>
   12544:	bne	12600 <__assert_fail@plt+0xeac>
   12548:	ldr	r2, [fp, r9, lsl #2]
   1254c:	add	r2, r2, #1
   12550:	str	r2, [fp, r9, lsl #2]
   12554:	add	sp, sp, #12
   12558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1255c:	add	r3, r7, #1
   12560:	add	r1, r4, #12
   12564:	ldr	r0, [sp]
   12568:	mov	r7, r3
   1256c:	str	r3, [sp, #4]
   12570:	bl	1fccc <__assert_fail@plt+0xe578>
   12574:	lsl	r7, r7, #2
   12578:	mov	r1, r7
   1257c:	mov	sl, r0
   12580:	mov	r0, fp
   12584:	bl	1fccc <__assert_fail@plt+0xe578>
   12588:	add	r4, sl, r4
   1258c:	mov	fp, r0
   12590:	mov	r0, r4
   12594:	bl	11718 <__gmpz_init@plt>
   12598:	str	r9, [sp]
   1259c:	sub	r2, r7, #4
   125a0:	add	r7, fp, r2
   125a4:	mov	r0, r4
   125a8:	sub	r4, r0, #12
   125ac:	mov	r1, r4
   125b0:	bl	1146c <__gmpz_set@plt>
   125b4:	sub	r5, r5, #1
   125b8:	ldr	r1, [r7, #-4]
   125bc:	cmp	r5, r9
   125c0:	mov	r0, r4
   125c4:	str	r1, [r7], #-4
   125c8:	bgt	125a8 <__assert_fail@plt+0xe54>
   125cc:	ldr	r3, [sp]
   125d0:	add	r9, r3, #1
   125d4:	mov	r1, r6
   125d8:	add	r0, r9, r9, lsl #1
   125dc:	add	r0, sl, r0, lsl #2
   125e0:	bl	1146c <__gmpz_set@plt>
   125e4:	mov	r3, #1
   125e8:	str	r3, [fp, r9, lsl #2]
   125ec:	ldr	r3, [sp, #4]
   125f0:	stm	r8, {sl, fp}
   125f4:	str	r3, [r8, #8]
   125f8:	add	sp, sp, #12
   125fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12600:	add	r3, r7, #1
   12604:	add	r1, r4, #12
   12608:	ldr	r0, [sp]
   1260c:	mov	r7, r3
   12610:	str	r3, [sp, #4]
   12614:	bl	1fccc <__assert_fail@plt+0xe578>
   12618:	lsl	r7, r7, #2
   1261c:	mov	r1, r7
   12620:	mov	sl, r0
   12624:	mov	r0, fp
   12628:	bl	1fccc <__assert_fail@plt+0xe578>
   1262c:	add	r4, sl, r4
   12630:	mov	fp, r0
   12634:	mov	r0, r4
   12638:	bl	11718 <__gmpz_init@plt>
   1263c:	cmp	r5, r9
   12640:	str	r9, [sp]
   12644:	bgt	1259c <__assert_fail@plt+0xe48>
   12648:	mov	r3, r9
   1264c:	b	125d0 <__assert_fail@plt+0xe7c>
   12650:	mov	r0, r3
   12654:	add	r3, r7, #1
   12658:	mov	r7, r3
   1265c:	add	r4, r3, r3, lsl #1
   12660:	str	r3, [sp, #4]
   12664:	lsl	r4, r4, #2
   12668:	mov	r1, r4
   1266c:	str	r5, [sp]
   12670:	bl	1fccc <__assert_fail@plt+0xe578>
   12674:	lsl	r1, r7, #2
   12678:	mov	sl, r0
   1267c:	mov	r0, fp
   12680:	bl	1fccc <__assert_fail@plt+0xe578>
   12684:	mov	fp, r0
   12688:	sub	r0, r4, #12
   1268c:	add	r0, sl, r0
   12690:	bl	11718 <__gmpz_init@plt>
   12694:	b	125cc <__assert_fail@plt+0xe78>
   12698:	push	{r4, r5, r6, lr}
   1269c:	mov	r0, #1
   126a0:	ldr	r5, [pc, #40]	; 126d0 <__assert_fail@plt+0xf7c>
   126a4:	ldm	r5, {r3, r4}
   126a8:	sub	r4, r4, r3
   126ac:	mov	r1, r3
   126b0:	mov	r2, r4
   126b4:	bl	19d5c <__assert_fail@plt+0x8608>
   126b8:	cmp	r4, r0
   126bc:	bne	126cc <__assert_fail@plt+0xf78>
   126c0:	ldr	r3, [r5]
   126c4:	str	r3, [r5, #4]
   126c8:	pop	{r4, r5, r6, pc}
   126cc:	bl	11760 <__assert_fail@plt+0xc>
   126d0:	andeq	r7, r3, ip, ror #3
   126d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126d8:	sub	sp, sp, #44	; 0x2c
   126dc:	mov	r1, #0
   126e0:	ldrd	r4, [sp, #80]	; 0x50
   126e4:	str	r0, [sp, #28]
   126e8:	ldrd	sl, [sp, #88]	; 0x58
   126ec:	and	r0, r4, #1
   126f0:	orrs	ip, r0, r1
   126f4:	ldrd	r6, [sp, #96]	; 0x60
   126f8:	bne	12740 <__assert_fail@plt+0xfec>
   126fc:	lsl	r1, r2, #31
   12700:	str	r1, [sp, #12]
   12704:	mov	r1, #0
   12708:	str	r1, [sp, #8]
   1270c:	ldrd	r0, [sp, #8]
   12710:	lsrs	r5, r5, #1
   12714:	rrx	r4, r4
   12718:	lsrs	r3, r3, #1
   1271c:	rrx	r2, r2
   12720:	orr	r0, r0, r4
   12724:	orr	r1, r1, r5
   12728:	mov	r4, r0
   1272c:	mov	r5, r1
   12730:	and	r0, r0, #1
   12734:	mov	r1, #0
   12738:	orrs	ip, r0, r1
   1273c:	beq	126fc <__assert_fail@plt+0xfa8>
   12740:	strd	r0, [sp, #8]
   12744:	orr	r0, r2, sl
   12748:	orr	r1, r3, fp
   1274c:	strd	r0, [sp, #16]
   12750:	orrs	r1, r0, r1
   12754:	beq	12878 <__assert_fail@plt+0x1124>
   12758:	cmp	r3, fp
   1275c:	cmpeq	r2, sl
   12760:	bhi	12818 <__assert_fail@plt+0x10c4>
   12764:	moveq	ip, #1
   12768:	movne	ip, #0
   1276c:	cmp	r5, r7
   12770:	cmpeq	r4, r6
   12774:	movhi	lr, #1
   12778:	movls	lr, #0
   1277c:	tst	ip, lr
   12780:	bne	12818 <__assert_fail@plt+0x10c4>
   12784:	cmp	r3, fp
   12788:	cmpeq	r2, sl
   1278c:	bcc	127a8 <__assert_fail@plt+0x1054>
   12790:	cmp	r5, r7
   12794:	cmpeq	r4, r6
   12798:	movcs	ip, #0
   1279c:	andcc	ip, ip, #1
   127a0:	cmp	ip, #0
   127a4:	beq	12940 <__assert_fail@plt+0x11ec>
   127a8:	subs	sl, sl, r2
   127ac:	sbc	fp, fp, r3
   127b0:	subs	sl, sl, lr
   127b4:	sbc	fp, fp, #0
   127b8:	ldrd	r0, [sp, #8]
   127bc:	subs	r6, r6, r4
   127c0:	sbc	r7, r7, r5
   127c4:	strd	r2, [sp, #16]
   127c8:	lsl	r3, sl, #31
   127cc:	str	r3, [sp, #4]
   127d0:	mov	r3, #0
   127d4:	str	r3, [sp]
   127d8:	ldrd	r2, [sp]
   127dc:	lsrs	r7, r7, #1
   127e0:	rrx	r6, r6
   127e4:	lsrs	fp, fp, #1
   127e8:	rrx	sl, sl
   127ec:	orr	r2, r2, r6
   127f0:	orr	r3, r3, r7
   127f4:	mov	r6, r2
   127f8:	mov	r7, r3
   127fc:	and	r2, r2, #1
   12800:	mov	r3, #0
   12804:	orrs	r3, r2, r3
   12808:	beq	127c8 <__assert_fail@plt+0x1074>
   1280c:	ldrd	r2, [sp, #16]
   12810:	strd	r0, [sp, #8]
   12814:	b	12744 <__assert_fail@plt+0xff0>
   12818:	cmp	r5, r7
   1281c:	cmpeq	r4, r6
   12820:	movcc	r0, #1
   12824:	movcs	r0, #0
   12828:	subs	r2, r2, sl
   1282c:	sbc	r3, r3, fp
   12830:	mov	r1, #0
   12834:	subs	r2, r2, r0
   12838:	sbc	r3, r3, r1
   1283c:	subs	r4, r4, r6
   12840:	sbc	r5, r5, r7
   12844:	lsrs	r5, r5, #1
   12848:	rrx	r4, r4
   1284c:	mov	r8, #0
   12850:	orr	r4, r4, r8
   12854:	and	r0, r4, #1
   12858:	mov	r1, #0
   1285c:	lsl	r9, r2, #31
   12860:	lsrs	r3, r3, #1
   12864:	rrx	r2, r2
   12868:	orrs	ip, r0, r1
   1286c:	orr	r5, r5, r9
   12870:	beq	12844 <__assert_fail@plt+0x10f0>
   12874:	b	12740 <__assert_fail@plt+0xfec>
   12878:	ldrd	r0, [sp, #8]
   1287c:	ldr	ip, [sp, #28]
   12880:	orrs	r3, r0, r1
   12884:	ldrd	r2, [sp, #16]
   12888:	strd	r2, [ip]
   1288c:	bne	1290c <__assert_fail@plt+0x11b8>
   12890:	lsrs	r7, r7, #1
   12894:	rrx	r6, r6
   12898:	b	128e8 <__assert_fail@plt+0x1194>
   1289c:	lsrs	r3, r5, #1
   128a0:	rrx	r2, r4
   128a4:	subs	r2, r2, r6
   128a8:	sbc	r3, r3, r7
   128ac:	orrs	r1, r2, r3
   128b0:	asr	r8, r3, #31
   128b4:	and	r0, r2, r8
   128b8:	and	r1, r3, r8
   128bc:	eor	r2, r2, r8
   128c0:	eor	r3, r3, r8
   128c4:	beq	128fc <__assert_fail@plt+0x11a8>
   128c8:	adds	r6, r6, r0
   128cc:	adc	r7, r7, r1
   128d0:	subs	r2, r2, r8
   128d4:	sbc	r3, r3, r8
   128d8:	mov	r4, r2
   128dc:	mov	r5, r3
   128e0:	and	r0, r4, #1
   128e4:	mov	r1, #0
   128e8:	orrs	r3, r0, r1
   128ec:	bne	1289c <__assert_fail@plt+0x1148>
   128f0:	lsrs	r5, r5, #1
   128f4:	rrx	r4, r4
   128f8:	b	128e0 <__assert_fail@plt+0x118c>
   128fc:	orr	r0, r4, #1
   12900:	mov	r1, r5
   12904:	add	sp, sp, #44	; 0x2c
   12908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1290c:	orrs	r3, r6, r7
   12910:	moveq	r0, r4
   12914:	moveq	r1, r5
   12918:	beq	12904 <__assert_fail@plt+0x11b0>
   1291c:	mov	r2, r4
   12920:	mov	r3, r5
   12924:	mov	r4, r6
   12928:	mov	r5, r7
   1292c:	mov	r6, r2
   12930:	mov	r7, r3
   12934:	and	r0, r4, #1
   12938:	mov	r1, #0
   1293c:	b	12890 <__assert_fail@plt+0x113c>
   12940:	ldr	r1, [sp, #28]
   12944:	mov	r0, r4
   12948:	strd	r2, [r1]
   1294c:	mov	r1, r5
   12950:	add	sp, sp, #44	; 0x2c
   12954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1295c:	mov	r6, r2
   12960:	ldrb	r2, [r0, #250]	; 0xfa
   12964:	mov	r7, r3
   12968:	add	lr, r0, #16
   1296c:	subs	ip, r2, #1
   12970:	add	r8, r0, #224	; 0xe0
   12974:	bcc	12a38 <__assert_fail@plt+0x12e4>
   12978:	lsl	r3, ip, #3
   1297c:	ldrd	r4, [lr, r3]
   12980:	cmp	r7, r5
   12984:	cmpeq	r6, r4
   12988:	subcc	r1, r2, #-536870911	; 0xe0000001
   1298c:	movcc	r3, ip
   12990:	addcc	r1, lr, r1, lsl #3
   12994:	bcc	129b0 <__assert_fail@plt+0x125c>
   12998:	b	12a18 <__assert_fail@plt+0x12c4>
   1299c:	ldrd	r4, [r1, #-8]!
   129a0:	mov	r9, r3
   129a4:	cmp	r5, r7
   129a8:	cmpeq	r4, r6
   129ac:	bls	129c4 <__assert_fail@plt+0x1270>
   129b0:	subs	r3, r3, #1
   129b4:	bcs	1299c <__assert_fail@plt+0x1248>
   129b8:	mov	fp, #0
   129bc:	mov	sl, fp
   129c0:	b	129d8 <__assert_fail@plt+0x1284>
   129c4:	beq	12a28 <__assert_fail@plt+0x12d4>
   129c8:	add	sl, r3, #1
   129cc:	cmp	ip, r3
   129d0:	lsl	fp, sl, #3
   129d4:	ble	12a00 <__assert_fail@plt+0x12ac>
   129d8:	add	ip, lr, r2, lsl #3
   129dc:	add	r1, r8, r2
   129e0:	mvn	r9, r8
   129e4:	ldrd	r4, [ip, #-8]
   129e8:	strd	r4, [ip], #-8
   129ec:	ldrb	r4, [r1, #-1]
   129f0:	strb	r4, [r1], #-1
   129f4:	add	r4, r9, r1
   129f8:	cmp	r4, r3
   129fc:	bgt	129e4 <__assert_fail@plt+0x1290>
   12a00:	add	r2, r2, #1
   12a04:	mov	r3, #1
   12a08:	strd	r6, [lr, fp]
   12a0c:	strb	r3, [r8, sl]
   12a10:	strb	r2, [r0, #250]	; 0xfa
   12a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a18:	mov	r9, ip
   12a1c:	movne	sl, r2
   12a20:	lslne	fp, r2, #3
   12a24:	bne	12a00 <__assert_fail@plt+0x12ac>
   12a28:	ldrb	r3, [r8, r9]
   12a2c:	add	r3, r3, #1
   12a30:	strb	r3, [r8, r9]
   12a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a38:	mov	fp, #0
   12a3c:	mov	sl, fp
   12a40:	b	12a00 <__assert_fail@plt+0x12ac>
   12a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a48:	mov	r4, r0
   12a4c:	sub	sp, sp, #60	; 0x3c
   12a50:	mov	r5, r1
   12a54:	orrs	ip, r4, r5
   12a58:	strd	r2, [sp, #8]
   12a5c:	beq	12be8 <__assert_fail@plt+0x1494>
   12a60:	add	r3, pc, #432	; 0x1b0
   12a64:	ldrd	r2, [r3]
   12a68:	bl	22ad0 <__assert_fail@plt+0x1137c>
   12a6c:	add	r3, pc, #420	; 0x1a4
   12a70:	ldrd	r2, [r3]
   12a74:	mov	r8, #0
   12a78:	mov	r9, #0
   12a7c:	strd	r0, [sp, #24]
   12a80:	mov	r0, r4
   12a84:	mov	r1, r5
   12a88:	bl	22ad0 <__assert_fail@plt+0x1137c>
   12a8c:	add	r5, pc, #388	; 0x184
   12a90:	ldrd	r4, [r5]
   12a94:	mov	r0, r8
   12a98:	mov	r1, r9
   12a9c:	mov	lr, #0
   12aa0:	mov	ip, #64	; 0x40
   12aa4:	str	ip, [sp, #20]
   12aa8:	strd	sl, [sp]
   12aac:	mov	r6, r2
   12ab0:	mov	r7, r3
   12ab4:	lsl	r3, r4, #31
   12ab8:	str	r3, [sp, #4]
   12abc:	mov	r3, #0
   12ac0:	lsrs	r1, r1, #1
   12ac4:	rrx	r0, r0
   12ac8:	lsrs	r5, r5, #1
   12acc:	rrx	r4, r4
   12ad0:	str	r3, [sp]
   12ad4:	adds	r2, r8, r8
   12ad8:	adc	r3, r9, r9
   12adc:	ldrd	r8, [sp]
   12ae0:	cmp	r5, r7
   12ae4:	cmpeq	r4, r6
   12ae8:	orr	r8, r8, r0
   12aec:	orr	r9, r9, r1
   12af0:	mov	r0, r8
   12af4:	mov	r1, r9
   12af8:	moveq	ip, #1
   12afc:	movne	ip, #0
   12b00:	mov	r8, r2
   12b04:	mov	r9, r3
   12b08:	bcc	12b28 <__assert_fail@plt+0x13d4>
   12b0c:	ldrd	sl, [sp, #8]
   12b10:	cmp	r1, fp
   12b14:	cmpeq	r0, sl
   12b18:	movhi	ip, #0
   12b1c:	andls	ip, ip, #1
   12b20:	cmp	ip, #0
   12b24:	beq	12b60 <__assert_fail@plt+0x140c>
   12b28:	ldrd	sl, [sp, #8]
   12b2c:	adds	r8, r2, #1
   12b30:	adc	r9, r3, #0
   12b34:	cmp	r1, fp
   12b38:	cmpeq	r0, sl
   12b3c:	movhi	r2, #1
   12b40:	movls	r2, #0
   12b44:	subs	r6, r6, r4
   12b48:	sbc	r7, r7, r5
   12b4c:	subs	r6, r6, r2
   12b50:	sbc	r7, r7, lr
   12b54:	subs	r2, sl, r0
   12b58:	sbc	r3, fp, r1
   12b5c:	strd	r2, [sp, #8]
   12b60:	ldr	r3, [sp, #20]
   12b64:	subs	r3, r3, #1
   12b68:	str	r3, [sp, #20]
   12b6c:	bne	12ab4 <__assert_fail@plt+0x1360>
   12b70:	mov	r3, r9
   12b74:	mov	r2, r8
   12b78:	ldrd	r0, [sp, #24]
   12b7c:	add	r4, sp, #32
   12b80:	bl	12a44 <__assert_fail@plt+0x12f0>
   12b84:	mov	r2, r4
   12b88:	ldrd	r0, [sp, #8]
   12b8c:	bl	19dcc <__assert_fail@plt+0x8678>
   12b90:	ldr	r5, [pc, #136]	; 12c20 <__assert_fail@plt+0x14cc>
   12b94:	sub	r4, r0, r4
   12b98:	rsb	r4, r4, #20
   12b9c:	cmp	r4, #8
   12ba0:	mov	r6, r0
   12ba4:	ldrhi	r3, [r5, #4]
   12ba8:	bhi	12bc8 <__assert_fail@plt+0x1474>
   12bac:	ldr	r3, [r5, #4]
   12bb0:	rsb	r7, r4, #9
   12bb4:	mov	r0, r3
   12bb8:	mov	r2, r7
   12bbc:	mov	r1, #48	; 0x30
   12bc0:	bl	11610 <memset@plt>
   12bc4:	add	r3, r0, r7
   12bc8:	mov	r1, r6
   12bcc:	mov	r2, r4
   12bd0:	mov	r0, r3
   12bd4:	bl	113f4 <memcpy@plt>
   12bd8:	add	r3, r0, r4
   12bdc:	str	r3, [r5, #4]
   12be0:	add	sp, sp, #60	; 0x3c
   12be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be8:	add	r4, sp, #32
   12bec:	mov	r1, r3
   12bf0:	mov	r0, r2
   12bf4:	mov	r2, r4
   12bf8:	bl	19dcc <__assert_fail@plt+0x8678>
   12bfc:	ldr	r5, [pc, #28]	; 12c20 <__assert_fail@plt+0x14cc>
   12c00:	ldr	r3, [r5, #4]
   12c04:	sub	r4, r0, r4
   12c08:	mov	r1, r0
   12c0c:	rsb	r4, r4, #20
   12c10:	b	12bcc <__assert_fail@plt+0x1478>
   12c14:	nop			; (mov r0, r0)
   12c18:	blcc	fe6c5420 <stdout@@GLIBC_2.4+0xfe68e23c>
   12c1c:	andeq	r0, r0, r0
   12c20:	andeq	r7, r3, ip, ror #3
   12c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c28:	sub	sp, sp, #180	; 0xb4
   12c2c:	strd	r0, [sp, #120]	; 0x78
   12c30:	ldrd	r0, [sp, #224]	; 0xe0
   12c34:	ldrd	r8, [sp, #216]	; 0xd8
   12c38:	mov	r1, #0
   12c3c:	and	r0, r0, #1
   12c40:	str	r2, [sp, #128]	; 0x80
   12c44:	orrs	r2, r0, r1
   12c48:	str	r3, [sp, #76]	; 0x4c
   12c4c:	movne	sl, r8
   12c50:	movne	fp, r9
   12c54:	bne	12c68 <__assert_fail@plt+0x1514>
   12c58:	ldrd	r2, [sp, #224]	; 0xe0
   12c5c:	orrs	r3, r2, r3
   12c60:	beq	131d0 <__assert_fail@plt+0x1a7c>
   12c64:	ldrd	sl, [sp, #240]	; 0xf0
   12c68:	mov	r3, #0
   12c6c:	str	r3, [sp, #132]	; 0x84
   12c70:	ldrd	r2, [sp, #120]	; 0x78
   12c74:	mov	r4, r8
   12c78:	mov	r5, #0
   12c7c:	mov	lr, r3
   12c80:	mov	r3, #0
   12c84:	strd	sl, [sp, #56]	; 0x38
   12c88:	strd	r2, [sp]
   12c8c:	mul	ip, r4, r5
   12c90:	umull	r0, r1, r4, r4
   12c94:	umull	r2, r3, r9, r4
   12c98:	add	ip, r1, ip, lsl #1
   12c9c:	str	ip, [sp, #16]
   12ca0:	ldr	ip, [sp, #132]	; 0x84
   12ca4:	mla	r3, r9, r5, r3
   12ca8:	str	ip, [sp, #20]
   12cac:	ldrd	r6, [sp, #16]
   12cb0:	adds	r4, r2, r2
   12cb4:	adc	r5, r3, r3
   12cb8:	adds	r6, r6, r4
   12cbc:	adc	r7, r7, r5
   12cc0:	cmp	r3, r7
   12cc4:	cmpeq	r2, r6
   12cc8:	mov	r4, r6
   12ccc:	mov	r5, r7
   12cd0:	umull	r2, r3, r9, r9
   12cd4:	bls	12ce0 <__assert_fail@plt+0x158c>
   12cd8:	adds	r2, r2, #0
   12cdc:	adc	r3, r3, #1
   12ce0:	mov	ip, #0
   12ce4:	str	r5, [sp, #24]
   12ce8:	str	ip, [sp, #28]
   12cec:	ldrd	sl, [sp, #24]
   12cf0:	str	r4, [sp, #36]	; 0x24
   12cf4:	ldrd	r8, [sp]
   12cf8:	str	fp, [sp, #32]
   12cfc:	ldrd	r4, [sp, #32]
   12d00:	str	fp, [sp, #44]	; 0x2c
   12d04:	adds	r4, r4, r0
   12d08:	adc	r5, r5, #0
   12d0c:	adds	r0, sl, r2
   12d10:	adc	r1, fp, r3
   12d14:	ldr	r3, [sp, #76]	; 0x4c
   12d18:	strd	r0, [sp, #112]	; 0x70
   12d1c:	mul	r2, r4, r3
   12d20:	ldr	r3, [sp, #128]	; 0x80
   12d24:	umull	r0, r1, r4, r3
   12d28:	mla	r2, r3, r5, r2
   12d2c:	mov	r4, r8
   12d30:	add	ip, r2, r1
   12d34:	mov	r2, r0
   12d38:	mov	r3, #0
   12d3c:	mul	r6, r2, r9
   12d40:	umull	r4, r5, r2, r4
   12d44:	mla	r4, r8, r3, r6
   12d48:	umull	r6, r7, r2, lr
   12d4c:	umull	r0, r1, ip, r8
   12d50:	mla	r7, lr, r3, r7
   12d54:	add	r3, r4, r5
   12d58:	str	r3, [sp, #40]	; 0x28
   12d5c:	mla	r1, ip, r9, r1
   12d60:	ldrd	r2, [sp, #40]	; 0x28
   12d64:	adds	r6, r6, r0
   12d68:	adc	r7, r7, r1
   12d6c:	adds	r2, r2, r6
   12d70:	adc	r3, r3, r7
   12d74:	cmp	r1, r3
   12d78:	cmpeq	r0, r2
   12d7c:	mov	r7, r3
   12d80:	umull	r2, r3, ip, lr
   12d84:	bls	12d90 <__assert_fail@plt+0x163c>
   12d88:	adds	r2, r2, #0
   12d8c:	adc	r3, r3, #1
   12d90:	mov	r1, #0
   12d94:	str	r7, [sp, #48]	; 0x30
   12d98:	str	r1, [sp, #52]	; 0x34
   12d9c:	ldrd	r0, [sp, #48]	; 0x30
   12da0:	adds	r0, r0, r2
   12da4:	adc	r1, r1, r3
   12da8:	mov	r2, r0
   12dac:	mov	r3, r1
   12db0:	ldrd	r0, [sp, #112]	; 0x70
   12db4:	subs	r8, r0, r2
   12db8:	sbc	r9, r1, r3
   12dbc:	cmp	r1, r3
   12dc0:	cmpeq	r0, r2
   12dc4:	bcs	12ddc <__assert_fail@plt+0x1688>
   12dc8:	ldrd	r2, [sp, #120]	; 0x78
   12dcc:	adds	r2, r2, r8
   12dd0:	adc	r3, r3, r9
   12dd4:	mov	r8, r2
   12dd8:	mov	r9, r3
   12ddc:	ldrd	r2, [sp, #224]	; 0xe0
   12de0:	lsrs	r3, r3, #1
   12de4:	rrx	r2, r2
   12de8:	strd	r2, [sp, #224]	; 0xe0
   12dec:	and	r2, r2, #1
   12df0:	mov	r3, #0
   12df4:	orrs	r3, r2, r3
   12df8:	beq	12fb8 <__assert_fail@plt+0x1864>
   12dfc:	ldrd	r0, [sp, #56]	; 0x38
   12e00:	mov	r5, #0
   12e04:	mov	r7, #0
   12e08:	umull	r2, r3, r9, r0
   12e0c:	mul	ip, r0, r5
   12e10:	mov	r6, r0
   12e14:	umull	r0, r1, r1, r8
   12e18:	strd	r2, [sp, #112]	; 0x70
   12e1c:	ldr	r3, [sp, #60]	; 0x3c
   12e20:	umull	sl, fp, r6, r8
   12e24:	mla	r1, r3, r5, r1
   12e28:	mla	ip, r8, r7, ip
   12e2c:	ldr	r3, [sp, #116]	; 0x74
   12e30:	add	ip, ip, fp
   12e34:	mla	r3, r9, r7, r3
   12e38:	str	ip, [sp, #136]	; 0x88
   12e3c:	ldr	ip, [sp, #132]	; 0x84
   12e40:	str	r3, [sp, #116]	; 0x74
   12e44:	ldrd	r2, [sp, #112]	; 0x70
   12e48:	str	ip, [sp, #140]	; 0x8c
   12e4c:	ldrd	r6, [sp, #136]	; 0x88
   12e50:	adds	r2, r2, r0
   12e54:	adc	r3, r3, r1
   12e58:	adds	r6, r6, r2
   12e5c:	adc	r7, r7, r3
   12e60:	cmp	r1, r7
   12e64:	ldr	r1, [sp, #60]	; 0x3c
   12e68:	cmpeq	r0, r6
   12e6c:	mov	r2, r6
   12e70:	mov	r3, r7
   12e74:	mov	r4, r8
   12e78:	strd	sl, [sp, #168]	; 0xa8
   12e7c:	umull	r6, r7, r1, r9
   12e80:	bls	12e8c <__assert_fail@plt+0x1738>
   12e84:	adds	r6, r6, #0
   12e88:	adc	r7, r7, #1
   12e8c:	mov	r1, #0
   12e90:	str	r1, [sp, #68]	; 0x44
   12e94:	str	r3, [sp, #64]	; 0x40
   12e98:	str	r2, [sp, #148]	; 0x94
   12e9c:	ldrd	r2, [sp, #64]	; 0x40
   12ea0:	ldr	r1, [sp, #168]	; 0xa8
   12ea4:	str	r3, [sp, #144]	; 0x90
   12ea8:	ldrd	sl, [sp, #144]	; 0x90
   12eac:	adds	sl, sl, r1
   12eb0:	adc	fp, fp, #0
   12eb4:	adds	r2, r2, r6
   12eb8:	adc	r3, r3, r7
   12ebc:	ldrd	r6, [sp]
   12ec0:	strd	r2, [sp, #56]	; 0x38
   12ec4:	ldr	r3, [sp, #76]	; 0x4c
   12ec8:	mul	r2, sl, r3
   12ecc:	ldr	r3, [sp, #128]	; 0x80
   12ed0:	umull	r0, r1, sl, r3
   12ed4:	mla	r2, r3, fp, r2
   12ed8:	mov	r3, #0
   12edc:	add	ip, r2, r1
   12ee0:	mov	r2, r0
   12ee4:	umull	sl, fp, ip, r6
   12ee8:	mul	r1, r2, r7
   12eec:	mla	fp, ip, r7, fp
   12ef0:	str	r1, [sp, #112]	; 0x70
   12ef4:	umull	r0, r1, r2, r6
   12ef8:	strd	r0, [sp, #168]	; 0xa8
   12efc:	ldr	r1, [sp, #112]	; 0x70
   12f00:	mla	r1, r6, r3, r1
   12f04:	str	r1, [sp, #112]	; 0x70
   12f08:	umull	r0, r1, r2, lr
   12f0c:	ldr	r2, [sp, #112]	; 0x70
   12f10:	mla	r1, lr, r3, r1
   12f14:	ldr	r3, [sp, #172]	; 0xac
   12f18:	adds	r0, r0, sl
   12f1c:	add	r3, r2, r3
   12f20:	str	r3, [sp, #152]	; 0x98
   12f24:	mov	r3, #0
   12f28:	str	r3, [sp, #156]	; 0x9c
   12f2c:	ldrd	r2, [sp, #152]	; 0x98
   12f30:	adc	r1, r1, fp
   12f34:	adds	r2, r2, r0
   12f38:	adc	r3, r3, r1
   12f3c:	cmp	fp, r3
   12f40:	cmpeq	sl, r2
   12f44:	mov	r1, r3
   12f48:	umull	r2, r3, ip, lr
   12f4c:	bls	12f58 <__assert_fail@plt+0x1804>
   12f50:	adds	r2, r2, #0
   12f54:	adc	r3, r3, #1
   12f58:	str	r1, [sp, #160]	; 0xa0
   12f5c:	mov	r1, #0
   12f60:	str	r1, [sp, #164]	; 0xa4
   12f64:	ldrd	r0, [sp, #160]	; 0xa0
   12f68:	adds	r0, r0, r2
   12f6c:	adc	r1, r1, r3
   12f70:	mov	r2, r0
   12f74:	mov	r3, r1
   12f78:	ldrd	r0, [sp, #56]	; 0x38
   12f7c:	subs	sl, r0, r2
   12f80:	sbc	fp, r1, r3
   12f84:	mov	r6, sl
   12f88:	mov	r7, fp
   12f8c:	cmp	r1, r3
   12f90:	cmpeq	r0, r2
   12f94:	strd	r6, [sp, #56]	; 0x38
   12f98:	bcs	12c8c <__assert_fail@plt+0x1538>
   12f9c:	ldrd	sl, [sp, #120]	; 0x78
   12fa0:	adds	r2, r6, sl
   12fa4:	adc	r3, r7, fp
   12fa8:	mov	sl, r2
   12fac:	mov	fp, r3
   12fb0:	strd	sl, [sp, #56]	; 0x38
   12fb4:	b	12c8c <__assert_fail@plt+0x1538>
   12fb8:	ldrd	r2, [sp, #224]	; 0xe0
   12fbc:	orrs	r3, r2, r3
   12fc0:	movne	r4, r8
   12fc4:	movne	r5, #0
   12fc8:	bne	12c8c <__assert_fail@plt+0x1538>
   12fcc:	ldrd	r0, [sp, #240]	; 0xf0
   12fd0:	ldrd	r6, [sp, #120]	; 0x78
   12fd4:	ldrd	sl, [sp, #56]	; 0x38
   12fd8:	subs	r2, r6, r0
   12fdc:	sbc	r3, r7, r1
   12fe0:	cmp	r1, fp
   12fe4:	cmpeq	r0, sl
   12fe8:	moveq	r0, #1
   12fec:	movne	r0, #0
   12ff0:	cmp	r3, fp
   12ff4:	cmpeq	r2, sl
   12ff8:	mov	r4, r2
   12ffc:	mov	r5, r3
   13000:	movne	r8, r0
   13004:	orreq	r8, r0, #1
   13008:	cmp	r8, #0
   1300c:	strd	r4, [sp, #40]	; 0x28
   13010:	bne	131d4 <__assert_fail@plt+0x1a80>
   13014:	ldr	r3, [sp, #232]	; 0xe8
   13018:	cmp	r3, #1
   1301c:	bls	131d4 <__assert_fail@plt+0x1a80>
   13020:	mov	r9, #1
   13024:	mov	lr, r7
   13028:	str	r9, [sp, #16]
   1302c:	str	r8, [sp, #24]
   13030:	ldr	r6, [sp, #128]	; 0x80
   13034:	b	13058 <__assert_fail@plt+0x1904>
   13038:	ldrd	r2, [sp, #240]	; 0xf0
   1303c:	cmp	r3, fp
   13040:	cmpeq	r2, sl
   13044:	beq	131e0 <__assert_fail@plt+0x1a8c>
   13048:	ldr	r3, [sp, #232]	; 0xe8
   1304c:	ldr	r2, [sp, #16]
   13050:	cmp	r3, r2
   13054:	beq	131e0 <__assert_fail@plt+0x1a8c>
   13058:	ldr	r3, [sp, #16]
   1305c:	mov	r1, #0
   13060:	add	r3, r3, #1
   13064:	umull	r4, r5, fp, sl
   13068:	mul	ip, sl, r1
   1306c:	str	r3, [sp, #16]
   13070:	umull	r2, r3, sl, sl
   13074:	mla	r5, fp, r1, r5
   13078:	add	ip, r3, ip, lsl #1
   1307c:	mov	r1, #0
   13080:	str	ip, [sp, #80]	; 0x50
   13084:	str	r1, [sp, #84]	; 0x54
   13088:	ldrd	r8, [sp, #80]	; 0x50
   1308c:	adds	r0, r4, r4
   13090:	adc	r1, r5, r5
   13094:	adds	r8, r8, r0
   13098:	adc	r9, r9, r1
   1309c:	cmp	r5, r9
   130a0:	mov	ip, #0
   130a4:	cmpeq	r4, r8
   130a8:	str	r9, [sp, #8]
   130ac:	str	ip, [sp, #12]
   130b0:	str	r8, [sp, #92]	; 0x5c
   130b4:	str	ip, [sp, #88]	; 0x58
   130b8:	umull	r4, r5, fp, fp
   130bc:	bls	130c8 <__assert_fail@plt+0x1974>
   130c0:	adds	r4, r4, #0
   130c4:	adc	r5, r5, #1
   130c8:	ldrd	r0, [sp, #88]	; 0x58
   130cc:	ldr	r3, [sp, #76]	; 0x4c
   130d0:	ldrd	r8, [sp]
   130d4:	adds	r0, r0, r2
   130d8:	adc	r1, r1, #0
   130dc:	mul	ip, r0, r3
   130e0:	umull	r2, r3, r0, r6
   130e4:	mla	ip, r6, r1, ip
   130e8:	ldr	r7, [sp, #24]
   130ec:	ldrd	r0, [sp, #8]
   130f0:	add	ip, ip, r3
   130f4:	mul	sl, r7, r2
   130f8:	ldr	fp, [sp]
   130fc:	mul	r7, r2, r9
   13100:	adds	r0, r0, r4
   13104:	mov	r3, #0
   13108:	adc	r1, r1, r5
   1310c:	umull	r4, r5, ip, r8
   13110:	umull	r8, r9, r2, r8
   13114:	mla	r7, fp, r3, r7
   13118:	mla	sl, lr, r3, sl
   1311c:	ldr	r3, [sp, #4]
   13120:	strd	r0, [sp, #32]
   13124:	umull	r0, r1, r2, lr
   13128:	mla	r5, ip, r3, r5
   1312c:	add	r3, r7, r9
   13130:	ldr	r7, [sp, #12]
   13134:	str	r3, [sp, #96]	; 0x60
   13138:	str	r7, [sp, #100]	; 0x64
   1313c:	ldrd	r8, [sp, #96]	; 0x60
   13140:	adds	r0, r0, r4
   13144:	add	r1, sl, r1
   13148:	adc	r1, r1, r5
   1314c:	mov	r7, #0
   13150:	adds	r8, r8, r0
   13154:	umull	r2, r3, ip, lr
   13158:	str	r7, [sp, #108]	; 0x6c
   1315c:	adc	r9, r9, r1
   13160:	ldr	r7, [sp, #24]
   13164:	cmp	r5, r9
   13168:	cmpeq	r4, r8
   1316c:	str	r9, [sp, #104]	; 0x68
   13170:	mla	r3, ip, r7, r3
   13174:	bls	13180 <__assert_fail@plt+0x1a2c>
   13178:	adds	r2, r2, #0
   1317c:	adc	r3, r3, #1
   13180:	ldrd	r0, [sp, #104]	; 0x68
   13184:	adds	r0, r0, r2
   13188:	adc	r1, r1, r3
   1318c:	mov	r2, r0
   13190:	mov	r3, r1
   13194:	ldrd	r0, [sp, #32]
   13198:	subs	sl, r0, r2
   1319c:	sbc	fp, r1, r3
   131a0:	cmp	r1, r3
   131a4:	cmpeq	r0, r2
   131a8:	bcs	131c0 <__assert_fail@plt+0x1a6c>
   131ac:	ldrd	r2, [sp, #120]	; 0x78
   131b0:	adds	r2, r2, sl
   131b4:	adc	r3, r3, fp
   131b8:	mov	sl, r2
   131bc:	mov	fp, r3
   131c0:	ldrd	r2, [sp, #40]	; 0x28
   131c4:	cmp	r3, fp
   131c8:	cmpeq	r2, sl
   131cc:	bne	13038 <__assert_fail@plt+0x18e4>
   131d0:	mov	r8, #1
   131d4:	mov	r0, r8
   131d8:	add	sp, sp, #180	; 0xb4
   131dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e0:	ldr	r8, [sp, #24]
   131e4:	mov	r0, r8
   131e8:	add	sp, sp, #180	; 0xb4
   131ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131f0:	ldr	r3, [pc, #908]	; 13584 <__assert_fail@plt+0x1e30>
   131f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131f8:	sub	sp, sp, #108	; 0x6c
   131fc:	ldrb	r3, [r3, #8]
   13200:	mov	r5, r0
   13204:	mov	sl, r1
   13208:	cmp	r3, #0
   1320c:	str	r2, [sp, #24]
   13210:	bne	13568 <__assert_fail@plt+0x1e14>
   13214:	mov	r2, #0
   13218:	add	r1, sp, #92	; 0x5c
   1321c:	add	r0, sp, #80	; 0x50
   13220:	add	fp, sp, #56	; 0x38
   13224:	bl	11460 <__gmpz_inits@plt>
   13228:	add	r4, sp, #32
   1322c:	mov	r0, fp
   13230:	mov	r1, #2
   13234:	bl	1155c <__gmpz_init_set_si@plt>
   13238:	mov	r0, r4
   1323c:	mov	r1, #2
   13240:	bl	1155c <__gmpz_init_set_si@plt>
   13244:	mov	r8, #1
   13248:	add	r0, sp, #44	; 0x2c
   1324c:	mov	r1, #2
   13250:	mov	r9, #0
   13254:	bl	1155c <__gmpz_init_set_si@plt>
   13258:	mov	r6, r8
   1325c:	add	r0, sp, #68	; 0x44
   13260:	mov	r1, #1
   13264:	mov	r7, r9
   13268:	bl	11694 <__gmpz_init_set_ui@plt>
   1326c:	add	r3, sl, #1
   13270:	str	r3, [sp, #28]
   13274:	mov	r1, #1
   13278:	mov	r0, r5
   1327c:	bl	1170c <__gmpz_cmp_ui@plt>
   13280:	cmp	r0, #0
   13284:	bne	1329c <__assert_fail@plt+0x1b48>
   13288:	b	13524 <__assert_fail@plt+0x1dd0>
   1328c:	subs	r6, r6, #1
   13290:	sbc	r7, r7, #0
   13294:	orrs	r3, r6, r7
   13298:	beq	13350 <__assert_fail@plt+0x1bfc>
   1329c:	mov	r2, r4
   132a0:	mov	r1, r4
   132a4:	add	r0, sp, #80	; 0x50
   132a8:	bl	11484 <__gmpz_mul@plt>
   132ac:	mov	r2, r5
   132b0:	add	r1, sp, #80	; 0x50
   132b4:	mov	r0, r4
   132b8:	bl	11688 <__gmpz_mod@plt>
   132bc:	mov	r2, sl
   132c0:	mov	r1, r4
   132c4:	mov	r0, r4
   132c8:	bl	11568 <__gmpz_add_ui@plt>
   132cc:	mov	r2, r4
   132d0:	add	r1, sp, #44	; 0x2c
   132d4:	add	r0, sp, #80	; 0x50
   132d8:	bl	11400 <__gmpz_sub@plt>
   132dc:	add	r2, sp, #80	; 0x50
   132e0:	add	r1, sp, #68	; 0x44
   132e4:	add	r0, sp, #92	; 0x5c
   132e8:	bl	11484 <__gmpz_mul@plt>
   132ec:	mov	r2, r5
   132f0:	add	r1, sp, #92	; 0x5c
   132f4:	add	r0, sp, #68	; 0x44
   132f8:	bl	11688 <__gmpz_mod@plt>
   132fc:	mov	r3, #0
   13300:	and	r2, r6, #31
   13304:	cmp	r3, #0
   13308:	cmpeq	r2, #1
   1330c:	bne	1328c <__assert_fail@plt+0x1b38>
   13310:	mov	r2, r5
   13314:	add	r1, sp, #68	; 0x44
   13318:	add	r0, sp, #80	; 0x50
   1331c:	bl	116e8 <__gmpz_gcd@plt>
   13320:	mov	r1, #1
   13324:	add	r0, sp, #80	; 0x50
   13328:	bl	1170c <__gmpz_cmp_ui@plt>
   1332c:	cmp	r0, #0
   13330:	bne	133d0 <__assert_fail@plt+0x1c7c>
   13334:	mov	r1, r4
   13338:	mov	r0, fp
   1333c:	bl	1146c <__gmpz_set@plt>
   13340:	subs	r6, r6, #1
   13344:	sbc	r7, r7, #0
   13348:	orrs	r3, r6, r7
   1334c:	bne	1329c <__assert_fail@plt+0x1b48>
   13350:	mov	r1, r4
   13354:	add	r0, sp, #44	; 0x2c
   13358:	bl	1146c <__gmpz_set@plt>
   1335c:	adds	r2, r8, r8
   13360:	adc	r3, r9, r9
   13364:	strd	r2, [sp, #16]
   13368:	orrs	r3, r8, r9
   1336c:	beq	133b4 <__assert_fail@plt+0x1c60>
   13370:	mov	r2, r4
   13374:	mov	r1, r4
   13378:	add	r0, sp, #80	; 0x50
   1337c:	bl	11484 <__gmpz_mul@plt>
   13380:	adds	r6, r6, #1
   13384:	mov	r2, r5
   13388:	add	r1, sp, #80	; 0x50
   1338c:	mov	r0, r4
   13390:	adc	r7, r7, #0
   13394:	bl	11688 <__gmpz_mod@plt>
   13398:	mov	r2, sl
   1339c:	mov	r1, r4
   133a0:	mov	r0, r4
   133a4:	bl	11568 <__gmpz_add_ui@plt>
   133a8:	cmp	r9, r7
   133ac:	cmpeq	r8, r6
   133b0:	bne	13370 <__assert_fail@plt+0x1c1c>
   133b4:	mov	r1, r4
   133b8:	mov	r0, fp
   133bc:	mov	r6, r8
   133c0:	mov	r7, r9
   133c4:	bl	1146c <__gmpz_set@plt>
   133c8:	ldrd	r8, [sp, #16]
   133cc:	b	1329c <__assert_fail@plt+0x1b48>
   133d0:	mov	r2, fp
   133d4:	mov	r1, fp
   133d8:	add	r0, sp, #80	; 0x50
   133dc:	bl	11484 <__gmpz_mul@plt>
   133e0:	mov	r2, r5
   133e4:	add	r1, sp, #80	; 0x50
   133e8:	mov	r0, fp
   133ec:	bl	11688 <__gmpz_mod@plt>
   133f0:	mov	r2, sl
   133f4:	mov	r1, fp
   133f8:	mov	r0, fp
   133fc:	bl	11568 <__gmpz_add_ui@plt>
   13400:	mov	r2, fp
   13404:	add	r1, sp, #44	; 0x2c
   13408:	add	r0, sp, #80	; 0x50
   1340c:	bl	11400 <__gmpz_sub@plt>
   13410:	add	r1, sp, #80	; 0x50
   13414:	mov	r0, r1
   13418:	mov	r2, r5
   1341c:	bl	116e8 <__gmpz_gcd@plt>
   13420:	mov	r1, #1
   13424:	add	r0, sp, #80	; 0x50
   13428:	bl	1170c <__gmpz_cmp_ui@plt>
   1342c:	cmp	r0, #0
   13430:	beq	133d0 <__assert_fail@plt+0x1c7c>
   13434:	add	r2, sp, #80	; 0x50
   13438:	mov	r1, r5
   1343c:	mov	r0, r5
   13440:	bl	11454 <__gmpz_divexact@plt>
   13444:	mov	r1, #1
   13448:	add	r0, sp, #80	; 0x50
   1344c:	bl	1170c <__gmpz_cmp_ui@plt>
   13450:	cmp	r0, #0
   13454:	ble	1347c <__assert_fail@plt+0x1d28>
   13458:	ldr	r1, [pc, #296]	; 13588 <__assert_fail@plt+0x1e34>
   1345c:	add	r0, sp, #80	; 0x50
   13460:	bl	1170c <__gmpz_cmp_ui@plt>
   13464:	cmp	r0, #0
   13468:	blt	13508 <__assert_fail@plt+0x1db4>
   1346c:	add	r0, sp, #80	; 0x50
   13470:	bl	13794 <__assert_fail@plt+0x2040>
   13474:	cmp	r0, #0
   13478:	bne	13508 <__assert_fail@plt+0x1db4>
   1347c:	ldr	r3, [pc, #256]	; 13584 <__assert_fail@plt+0x1e30>
   13480:	ldrb	r3, [r3, #8]
   13484:	cmp	r3, #0
   13488:	bne	1354c <__assert_fail@plt+0x1df8>
   1348c:	ldr	r2, [sp, #24]
   13490:	ldr	r1, [sp, #28]
   13494:	add	r0, sp, #80	; 0x50
   13498:	bl	131f0 <__assert_fail@plt+0x1a9c>
   1349c:	mov	r1, #1
   134a0:	mov	r0, r5
   134a4:	bl	1170c <__gmpz_cmp_ui@plt>
   134a8:	cmp	r0, #0
   134ac:	ble	134d4 <__assert_fail@plt+0x1d80>
   134b0:	ldr	r1, [pc, #208]	; 13588 <__assert_fail@plt+0x1e34>
   134b4:	mov	r0, r5
   134b8:	bl	1170c <__gmpz_cmp_ui@plt>
   134bc:	cmp	r0, #0
   134c0:	blt	13518 <__assert_fail@plt+0x1dc4>
   134c4:	mov	r0, r5
   134c8:	bl	13794 <__assert_fail@plt+0x2040>
   134cc:	cmp	r0, #0
   134d0:	bne	13518 <__assert_fail@plt+0x1dc4>
   134d4:	mov	r2, r5
   134d8:	mov	r1, r4
   134dc:	mov	r0, r4
   134e0:	bl	11688 <__gmpz_mod@plt>
   134e4:	add	r1, sp, #44	; 0x2c
   134e8:	mov	r2, r5
   134ec:	mov	r0, r1
   134f0:	bl	11688 <__gmpz_mod@plt>
   134f4:	mov	r2, r5
   134f8:	mov	r1, fp
   134fc:	mov	r0, fp
   13500:	bl	11688 <__gmpz_mod@plt>
   13504:	b	13274 <__assert_fail@plt+0x1b20>
   13508:	add	r1, sp, #80	; 0x50
   1350c:	ldr	r0, [sp, #24]
   13510:	bl	124e4 <__assert_fail@plt+0xd90>
   13514:	b	1349c <__assert_fail@plt+0x1d48>
   13518:	mov	r1, r5
   1351c:	ldr	r0, [sp, #24]
   13520:	bl	124e4 <__assert_fail@plt+0xd90>
   13524:	mov	ip, #0
   13528:	stm	sp, {r4, fp}
   1352c:	add	r3, sp, #44	; 0x2c
   13530:	add	r2, sp, #80	; 0x50
   13534:	add	r1, sp, #92	; 0x5c
   13538:	add	r0, sp, #68	; 0x44
   1353c:	str	ip, [sp, #8]
   13540:	bl	113ac <__gmpz_clears@plt>
   13544:	add	sp, sp, #108	; 0x6c
   13548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1354c:	ldr	r3, [pc, #56]	; 1358c <__assert_fail@plt+0x1e38>
   13550:	mov	r2, #43	; 0x2b
   13554:	mov	r1, #1
   13558:	ldr	r3, [r3]
   1355c:	ldr	r0, [pc, #44]	; 13590 <__assert_fail@plt+0x1e3c>
   13560:	bl	114d8 <fwrite@plt>
   13564:	b	1348c <__assert_fail@plt+0x1d38>
   13568:	ldr	r1, [pc, #28]	; 1358c <__assert_fail@plt+0x1e38>
   1356c:	mov	r3, sl
   13570:	ldr	r2, [pc, #28]	; 13594 <__assert_fail@plt+0x1e40>
   13574:	ldr	r0, [r1]
   13578:	mov	r1, #1
   1357c:	bl	1164c <__fprintf_chk@plt>
   13580:	b	13214 <__assert_fail@plt+0x1ac0>
   13584:	andeq	r7, r3, ip, ror #3
   13588:	cmneq	sp, r9, ror sp
   1358c:	ldrdeq	r7, [r3], -r8
   13590:	andeq	r5, r2, ip, lsr lr
   13594:	andeq	r5, r2, r4, lsr #28
   13598:	ldr	r2, [r0, #4]
   1359c:	mov	r3, #0
   135a0:	cmp	r2, r3
   135a4:	str	r3, [r1]
   135a8:	str	r3, [r1, #4]
   135ac:	str	r3, [r1, #8]
   135b0:	bxeq	lr
   135b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   135b8:	mov	r7, r1
   135bc:	ldr	r8, [pc, #440]	; 1377c <__assert_fail@plt+0x2028>
   135c0:	sub	sp, sp, #28
   135c4:	mov	r6, r0
   135c8:	ldrb	r3, [r8, #8]
   135cc:	cmp	r3, #0
   135d0:	bne	13750 <__assert_fail@plt+0x1ffc>
   135d4:	mov	r0, sp
   135d8:	bl	11718 <__gmpz_init@plt>
   135dc:	mov	r1, #0
   135e0:	mov	r0, r6
   135e4:	bl	11364 <__gmpz_scan1@plt>
   135e8:	mov	r1, r6
   135ec:	mov	r4, r0
   135f0:	mov	r2, r0
   135f4:	mov	r0, r6
   135f8:	bl	114f0 <__gmpz_fdiv_q_2exp@plt>
   135fc:	cmp	r4, #0
   13600:	movne	r5, #2
   13604:	beq	13630 <__assert_fail@plt+0x1edc>
   13608:	mov	r1, r5
   1360c:	add	r0, sp, #12
   13610:	bl	11694 <__gmpz_init_set_ui@plt>
   13614:	add	r1, sp, #12
   13618:	mov	r0, r7
   1361c:	bl	124e4 <__assert_fail@plt+0xd90>
   13620:	add	r0, sp, #12
   13624:	bl	115d4 <__gmpz_clear@plt>
   13628:	subs	r4, r4, #1
   1362c:	bne	13608 <__assert_fail@plt+0x1eb4>
   13630:	mov	r5, #1
   13634:	mov	r4, #3
   13638:	ldr	r9, [pc, #320]	; 13780 <__assert_fail@plt+0x202c>
   1363c:	b	13664 <__assert_fail@plt+0x1f10>
   13640:	ldrb	r2, [r2, #32]
   13644:	mov	r5, r3
   13648:	add	r4, r4, r2
   1364c:	mul	r1, r4, r4
   13650:	bl	1170c <__gmpz_cmp_ui@plt>
   13654:	cmp	r0, #0
   13658:	blt	136bc <__assert_fail@plt+0x1f68>
   1365c:	cmp	r5, #668	; 0x29c
   13660:	bhi	136bc <__assert_fail@plt+0x1f68>
   13664:	mov	r1, r4
   13668:	mov	r0, r6
   1366c:	bl	115c8 <__gmpz_divisible_ui_p@plt>
   13670:	add	r2, r9, r5
   13674:	add	r3, r5, #1
   13678:	cmp	r0, #0
   1367c:	mov	r0, r6
   13680:	beq	13640 <__assert_fail@plt+0x1eec>
   13684:	mov	r2, r4
   13688:	mov	r1, r6
   1368c:	mov	r0, r6
   13690:	bl	11490 <__gmpz_tdiv_q_ui@plt>
   13694:	mov	r1, r4
   13698:	add	r0, sp, #12
   1369c:	bl	11694 <__gmpz_init_set_ui@plt>
   136a0:	add	r1, sp, #12
   136a4:	mov	r0, r7
   136a8:	bl	124e4 <__assert_fail@plt+0xd90>
   136ac:	add	r0, sp, #12
   136b0:	bl	115d4 <__gmpz_clear@plt>
   136b4:	cmp	r5, #668	; 0x29c
   136b8:	bls	13664 <__assert_fail@plt+0x1f10>
   136bc:	mov	r0, sp
   136c0:	bl	115d4 <__gmpz_clear@plt>
   136c4:	mov	r1, #1
   136c8:	mov	r0, r6
   136cc:	bl	1170c <__gmpz_cmp_ui@plt>
   136d0:	cmp	r0, #0
   136d4:	beq	13720 <__assert_fail@plt+0x1fcc>
   136d8:	ldrb	r3, [r8, #8]
   136dc:	cmp	r3, #0
   136e0:	bne	13728 <__assert_fail@plt+0x1fd4>
   136e4:	cmp	r0, #0
   136e8:	ble	13710 <__assert_fail@plt+0x1fbc>
   136ec:	ldr	r1, [pc, #144]	; 13784 <__assert_fail@plt+0x2030>
   136f0:	mov	r0, r6
   136f4:	bl	1170c <__gmpz_cmp_ui@plt>
   136f8:	cmp	r0, #0
   136fc:	blt	1376c <__assert_fail@plt+0x2018>
   13700:	mov	r0, r6
   13704:	bl	13794 <__assert_fail@plt+0x2040>
   13708:	cmp	r0, #0
   1370c:	bne	1376c <__assert_fail@plt+0x2018>
   13710:	mov	r2, r7
   13714:	mov	r0, r6
   13718:	mov	r1, #1
   1371c:	bl	131f0 <__assert_fail@plt+0x1a9c>
   13720:	add	sp, sp, #28
   13724:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13728:	ldr	r3, [pc, #88]	; 13788 <__assert_fail@plt+0x2034>
   1372c:	mov	r2, #19
   13730:	mov	r1, #1
   13734:	ldr	r3, [r3]
   13738:	ldr	r0, [pc, #76]	; 1378c <__assert_fail@plt+0x2038>
   1373c:	bl	114d8 <fwrite@plt>
   13740:	mov	r1, #1
   13744:	mov	r0, r6
   13748:	bl	1170c <__gmpz_cmp_ui@plt>
   1374c:	b	136e4 <__assert_fail@plt+0x1f90>
   13750:	ldr	r3, [pc, #48]	; 13788 <__assert_fail@plt+0x2034>
   13754:	mov	r2, #17
   13758:	mov	r1, #1
   1375c:	ldr	r3, [r3]
   13760:	ldr	r0, [pc, #40]	; 13790 <__assert_fail@plt+0x203c>
   13764:	bl	114d8 <fwrite@plt>
   13768:	b	135d4 <__assert_fail@plt+0x1e80>
   1376c:	mov	r1, r6
   13770:	mov	r0, r7
   13774:	bl	124e4 <__assert_fail@plt+0xd90>
   13778:	b	13720 <__assert_fail@plt+0x1fcc>
   1377c:	andeq	r7, r3, ip, ror #3
   13780:	ldrdeq	r2, [r2], -r0
   13784:	cmneq	sp, r9, ror sp
   13788:	ldrdeq	r7, [r3], -r8
   1378c:	andeq	r5, r2, ip, ror lr
   13790:	andeq	r5, r2, r8, ror #28
   13794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13798:	sub	sp, sp, #76	; 0x4c
   1379c:	mov	r4, #0
   137a0:	add	r3, sp, #48	; 0x30
   137a4:	mov	r6, r0
   137a8:	add	r2, sp, #36	; 0x24
   137ac:	add	r1, sp, #24
   137b0:	add	r0, sp, #12
   137b4:	str	r4, [sp]
   137b8:	bl	11460 <__gmpz_inits@plt>
   137bc:	mov	r2, #1
   137c0:	mov	r1, r6
   137c4:	add	r0, sp, #36	; 0x24
   137c8:	bl	113a0 <__gmpz_sub_ui@plt>
   137cc:	mov	r1, r4
   137d0:	add	r0, sp, #36	; 0x24
   137d4:	bl	11364 <__gmpz_scan1@plt>
   137d8:	add	r1, sp, #36	; 0x24
   137dc:	mov	r2, r0
   137e0:	mov	r8, r0
   137e4:	add	r0, sp, #12
   137e8:	bl	1161c <__gmpz_tdiv_q_2exp@plt>
   137ec:	add	r0, sp, #24
   137f0:	mov	r1, #2
   137f4:	bl	113d0 <__gmpz_set_ui@plt>
   137f8:	mov	r3, r6
   137fc:	add	r2, sp, #12
   13800:	add	r1, sp, #24
   13804:	add	r0, sp, #48	; 0x30
   13808:	bl	1143c <__gmpz_powm@plt>
   1380c:	add	r0, sp, #48	; 0x30
   13810:	mov	r1, #1
   13814:	bl	1170c <__gmpz_cmp_ui@plt>
   13818:	cmp	r0, r4
   1381c:	beq	13894 <__assert_fail@plt+0x2140>
   13820:	add	r1, sp, #36	; 0x24
   13824:	add	r0, sp, #48	; 0x30
   13828:	bl	116a0 <__gmpz_cmp@plt>
   1382c:	cmp	r0, r4
   13830:	beq	13894 <__assert_fail@plt+0x2140>
   13834:	cmp	r8, #1
   13838:	movhi	r4, #1
   1383c:	movhi	r7, r4
   13840:	movhi	r5, #2
   13844:	bhi	1386c <__assert_fail@plt+0x2118>
   13848:	b	13a7c <__assert_fail@plt+0x2328>
   1384c:	mov	r1, r7
   13850:	add	r0, sp, #48	; 0x30
   13854:	bl	1170c <__gmpz_cmp_ui@plt>
   13858:	cmp	r0, #0
   1385c:	beq	13a7c <__assert_fail@plt+0x2328>
   13860:	add	r4, r4, #1
   13864:	cmp	r8, r4
   13868:	beq	13a7c <__assert_fail@plt+0x2328>
   1386c:	add	r1, sp, #48	; 0x30
   13870:	mov	r0, r1
   13874:	mov	r3, r6
   13878:	mov	r2, r5
   1387c:	bl	11724 <__gmpz_powm_ui@plt>
   13880:	add	r1, sp, #36	; 0x24
   13884:	add	r0, sp, #48	; 0x30
   13888:	bl	116a0 <__gmpz_cmp@plt>
   1388c:	cmp	r0, #0
   13890:	bne	1384c <__assert_fail@plt+0x20f8>
   13894:	add	r1, sp, #36	; 0x24
   13898:	add	r0, sp, #48	; 0x30
   1389c:	bl	1146c <__gmpz_set@plt>
   138a0:	add	r1, sp, #60	; 0x3c
   138a4:	add	r0, sp, #48	; 0x30
   138a8:	bl	13598 <__assert_fail@plt+0x1e44>
   138ac:	ldr	sl, [pc, #464]	; 13a84 <__assert_fail@plt+0x2330>
   138b0:	mov	r7, #1
   138b4:	add	fp, sl, #668	; 0x29c
   138b8:	mov	r9, #2
   138bc:	ldr	r3, [sp, #68]	; 0x44
   138c0:	cmp	r3, #0
   138c4:	beq	13a6c <__assert_fail@plt+0x2318>
   138c8:	mov	r5, #0
   138cc:	mov	r4, r5
   138d0:	b	138e0 <__assert_fail@plt+0x218c>
   138d4:	cmp	r0, #0
   138d8:	add	r5, r5, #12
   138dc:	beq	1392c <__assert_fail@plt+0x21d8>
   138e0:	ldr	r2, [sp, #60]	; 0x3c
   138e4:	add	r1, sp, #36	; 0x24
   138e8:	add	r2, r2, r5
   138ec:	add	r0, sp, #48	; 0x30
   138f0:	bl	11454 <__gmpz_divexact@plt>
   138f4:	add	r2, sp, #48	; 0x30
   138f8:	mov	r3, r6
   138fc:	mov	r0, r2
   13900:	add	r1, sp, #24
   13904:	bl	1143c <__gmpz_powm@plt>
   13908:	mov	r1, r7
   1390c:	add	r0, sp, #48	; 0x30
   13910:	bl	1170c <__gmpz_cmp_ui@plt>
   13914:	ldr	r3, [sp, #68]	; 0x44
   13918:	add	r4, r4, #1
   1391c:	cmp	r4, r3
   13920:	bcc	138d4 <__assert_fail@plt+0x2180>
   13924:	cmp	r0, #0
   13928:	bne	13a74 <__assert_fail@plt+0x2320>
   1392c:	add	r1, sp, #24
   13930:	mov	r0, r1
   13934:	ldrb	r2, [sl, #1]!
   13938:	bl	11568 <__gmpz_add_ui@plt>
   1393c:	mov	r3, r6
   13940:	add	r2, sp, #12
   13944:	add	r1, sp, #24
   13948:	add	r0, sp, #48	; 0x30
   1394c:	bl	1143c <__gmpz_powm@plt>
   13950:	mov	r1, r7
   13954:	add	r0, sp, #48	; 0x30
   13958:	bl	1170c <__gmpz_cmp_ui@plt>
   1395c:	cmp	r0, #0
   13960:	beq	139d0 <__assert_fail@plt+0x227c>
   13964:	add	r1, sp, #36	; 0x24
   13968:	add	r0, sp, #48	; 0x30
   1396c:	bl	116a0 <__gmpz_cmp@plt>
   13970:	cmp	r0, #0
   13974:	beq	139d0 <__assert_fail@plt+0x227c>
   13978:	cmp	r8, #1
   1397c:	bls	139fc <__assert_fail@plt+0x22a8>
   13980:	mov	r4, #1
   13984:	b	139a8 <__assert_fail@plt+0x2254>
   13988:	mov	r1, r7
   1398c:	add	r0, sp, #48	; 0x30
   13990:	bl	1170c <__gmpz_cmp_ui@plt>
   13994:	cmp	r0, #0
   13998:	beq	139fc <__assert_fail@plt+0x22a8>
   1399c:	add	r4, r4, #1
   139a0:	cmp	r8, r4
   139a4:	beq	139fc <__assert_fail@plt+0x22a8>
   139a8:	add	r1, sp, #48	; 0x30
   139ac:	mov	r0, r1
   139b0:	mov	r3, r6
   139b4:	mov	r2, r9
   139b8:	bl	11724 <__gmpz_powm_ui@plt>
   139bc:	add	r1, sp, #36	; 0x24
   139c0:	add	r0, sp, #48	; 0x30
   139c4:	bl	116a0 <__gmpz_cmp@plt>
   139c8:	cmp	r0, #0
   139cc:	bne	13988 <__assert_fail@plt+0x2234>
   139d0:	cmp	fp, sl
   139d4:	bne	138bc <__assert_fail@plt+0x2168>
   139d8:	mov	r2, #5
   139dc:	ldr	r1, [pc, #164]	; 13a88 <__assert_fail@plt+0x2334>
   139e0:	mov	r0, #0
   139e4:	bl	11430 <dcgettext@plt>
   139e8:	mov	r1, #0
   139ec:	mov	r2, r0
   139f0:	mov	r0, r1
   139f4:	bl	11520 <error@plt>
   139f8:	bl	11748 <abort@plt>
   139fc:	ldr	r3, [sp, #68]	; 0x44
   13a00:	mov	r6, #0
   13a04:	cmp	r3, #0
   13a08:	movne	r4, #0
   13a0c:	movne	r5, r4
   13a10:	beq	13a34 <__assert_fail@plt+0x22e0>
   13a14:	ldr	r0, [sp, #60]	; 0x3c
   13a18:	add	r5, r5, #1
   13a1c:	add	r0, r0, r4
   13a20:	bl	115d4 <__gmpz_clear@plt>
   13a24:	ldr	r3, [sp, #68]	; 0x44
   13a28:	add	r4, r4, #12
   13a2c:	cmp	r5, r3
   13a30:	bcc	13a14 <__assert_fail@plt+0x22c0>
   13a34:	ldr	r0, [sp, #60]	; 0x3c
   13a38:	bl	19d04 <__assert_fail@plt+0x85b0>
   13a3c:	ldr	r0, [sp, #64]	; 0x40
   13a40:	bl	19d04 <__assert_fail@plt+0x85b0>
   13a44:	mov	ip, #0
   13a48:	add	r0, sp, #12
   13a4c:	add	r3, sp, #48	; 0x30
   13a50:	add	r2, sp, #36	; 0x24
   13a54:	add	r1, sp, #24
   13a58:	str	ip, [sp]
   13a5c:	bl	113ac <__gmpz_clears@plt>
   13a60:	mov	r0, r6
   13a64:	add	sp, sp, #76	; 0x4c
   13a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a6c:	mov	r6, #1
   13a70:	b	13a34 <__assert_fail@plt+0x22e0>
   13a74:	mov	r6, #1
   13a78:	b	13a04 <__assert_fail@plt+0x22b0>
   13a7c:	mov	r6, #0
   13a80:	b	13a44 <__assert_fail@plt+0x22f0>
   13a84:	andeq	r2, r2, pc, ror #25
   13a88:	muleq	r2, r0, lr
   13a8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a90:	sub	sp, sp, #388	; 0x184
   13a94:	ldrd	r4, [r3]
   13a98:	ldrd	r6, [r3, #8]
   13a9c:	ldr	ip, [sp, #432]	; 0x1b0
   13aa0:	str	r2, [sp, #380]	; 0x17c
   13aa4:	ldrd	r2, [r2]
   13aa8:	ldrd	r8, [r1]
   13aac:	ldrd	sl, [r1, #8]
   13ab0:	strd	r2, [sp, #176]	; 0xb0
   13ab4:	ldrd	r2, [ip]
   13ab8:	add	r1, sp, #368	; 0x170
   13abc:	str	r0, [sp, #376]	; 0x178
   13ac0:	strd	r2, [r1]
   13ac4:	ldrd	r2, [ip, #8]
   13ac8:	add	r1, sp, #360	; 0x168
   13acc:	add	lr, sp, #352	; 0x160
   13ad0:	strd	r2, [r1]
   13ad4:	add	r2, sp, #424	; 0x1a8
   13ad8:	mov	r3, #0
   13adc:	ldrd	r0, [r2]
   13ae0:	strd	r4, [lr]
   13ae4:	strd	r6, [sp, #168]	; 0xa8
   13ae8:	rsbs	r0, r0, #0
   13aec:	str	r5, [sp, #324]	; 0x144
   13af0:	str	r7, [sp, #328]	; 0x148
   13af4:	mov	r5, #0
   13af8:	mov	r7, #0
   13afc:	rsc	r1, r1, #0
   13b00:	add	r2, sp, #312	; 0x138
   13b04:	str	r3, [sp, #348]	; 0x15c
   13b08:	mov	r3, #64	; 0x40
   13b0c:	strd	r4, [sp, #48]	; 0x30
   13b10:	strd	r6, [sp, #80]	; 0x50
   13b14:	strd	r0, [r2]
   13b18:	str	r3, [sp, #320]	; 0x140
   13b1c:	b	14274 <__assert_fail@plt+0x2b20>
   13b20:	adds	r2, r2, #0
   13b24:	adc	r3, r3, #1
   13b28:	add	r1, sp, #336	; 0x150
   13b2c:	strd	r2, [r1]
   13b30:	add	r2, sp, #312	; 0x138
   13b34:	ldrd	r4, [sp, #120]	; 0x78
   13b38:	ldrd	r0, [r2]
   13b3c:	mul	r2, r4, r1
   13b40:	umull	r6, r7, r4, r0
   13b44:	mla	r2, r0, r5, r2
   13b48:	ldrd	r4, [sp, #48]	; 0x30
   13b4c:	add	r3, r2, r7
   13b50:	mov	r7, r3
   13b54:	str	r3, [sp, #332]	; 0x14c
   13b58:	mov	r3, #0
   13b5c:	mov	r9, r3
   13b60:	mov	r3, r4
   13b64:	mul	ip, r6, r5
   13b68:	mov	r5, r9
   13b6c:	umull	r8, r9, r6, r3
   13b70:	ldr	r3, [sp, #324]	; 0x144
   13b74:	umull	sl, fp, r7, r4
   13b78:	ldr	r2, [sp, #48]	; 0x30
   13b7c:	mov	r4, r6
   13b80:	ldrd	r0, [sp, #152]	; 0x98
   13b84:	strd	r4, [sp, #56]	; 0x38
   13b88:	umull	r4, r5, r3, r6
   13b8c:	str	r1, [sp, #64]	; 0x40
   13b90:	str	r0, [sp, #228]	; 0xe4
   13b94:	strd	r4, [sp, #112]	; 0x70
   13b98:	ldr	r5, [sp, #60]	; 0x3c
   13b9c:	ldr	r4, [sp, #116]	; 0x74
   13ba0:	mla	ip, r2, r5, ip
   13ba4:	mla	r2, r3, r5, r4
   13ba8:	str	r2, [sp, #116]	; 0x74
   13bac:	ldr	r2, [sp, #52]	; 0x34
   13bb0:	ldrd	r4, [sp, #112]	; 0x70
   13bb4:	mla	fp, r7, r2, fp
   13bb8:	mov	r2, #0
   13bbc:	str	r2, [sp, #68]	; 0x44
   13bc0:	add	r2, ip, r9
   13bc4:	ldrd	r8, [sp, #64]	; 0x40
   13bc8:	str	r2, [sp, #232]	; 0xe8
   13bcc:	adds	r4, r4, sl
   13bd0:	str	r9, [sp, #236]	; 0xec
   13bd4:	ldrd	r0, [sp, #232]	; 0xe8
   13bd8:	adc	r5, r5, fp
   13bdc:	str	r9, [sp, #224]	; 0xe0
   13be0:	adds	r0, r0, r4
   13be4:	adc	r1, r1, r5
   13be8:	mov	r4, r0
   13bec:	mov	r5, r1
   13bf0:	ldrd	r0, [sp, #224]	; 0xe0
   13bf4:	ldr	r2, [sp, #144]	; 0x90
   13bf8:	mov	ip, r9
   13bfc:	adds	r0, r0, r2
   13c00:	umull	r2, r3, r7, r3
   13c04:	adc	r1, r1, #0
   13c08:	cmp	fp, r5
   13c0c:	cmpeq	sl, r4
   13c10:	strd	r0, [sp, #184]	; 0xb8
   13c14:	strd	r2, [sp, #112]	; 0x70
   13c18:	bls	13c28 <__assert_fail@plt+0x24d4>
   13c1c:	adds	r2, r2, #0
   13c20:	adc	r3, r3, #1
   13c24:	strd	r2, [sp, #112]	; 0x70
   13c28:	ldrd	sl, [sp, #80]	; 0x50
   13c2c:	ldrd	r0, [sp, #56]	; 0x38
   13c30:	ldr	r9, [sp, #328]	; 0x148
   13c34:	ldr	r2, [sp, #332]	; 0x14c
   13c38:	mul	r4, r0, fp
   13c3c:	umull	r6, r7, r0, r9
   13c40:	mla	r4, sl, r1, r4
   13c44:	mov	r0, sl
   13c48:	ldr	sl, [sp, #56]	; 0x38
   13c4c:	mul	r8, r2, fp
   13c50:	umull	sl, fp, sl, r0
   13c54:	ldr	r3, [sp, #60]	; 0x3c
   13c58:	mla	r8, ip, r0, r8
   13c5c:	umull	r0, r1, r2, r0
   13c60:	mla	r7, r9, r3, r7
   13c64:	add	r4, r4, fp
   13c68:	mov	r3, #0
   13c6c:	str	r4, [sp, #240]	; 0xf0
   13c70:	str	r3, [sp, #244]	; 0xf4
   13c74:	add	r1, r8, r1
   13c78:	mov	r4, r9
   13c7c:	str	r3, [sp, #100]	; 0x64
   13c80:	umull	r8, r9, r2, r9
   13c84:	ldrd	r2, [sp, #240]	; 0xf0
   13c88:	adds	r6, r6, r0
   13c8c:	adc	r7, r7, r1
   13c90:	adds	r2, r2, r6
   13c94:	adc	r3, r3, r7
   13c98:	cmp	r1, r3
   13c9c:	mov	r7, r3
   13ca0:	mla	r3, r4, ip, r9
   13ca4:	cmpeq	r0, r2
   13ca8:	strd	r8, [sp, #144]	; 0x90
   13cac:	str	r5, [sp, #96]	; 0x60
   13cb0:	mov	r6, r2
   13cb4:	str	r3, [sp, #148]	; 0x94
   13cb8:	bls	13ccc <__assert_fail@plt+0x2578>
   13cbc:	ldrd	r2, [sp, #144]	; 0x90
   13cc0:	adds	r2, r2, #0
   13cc4:	adc	r3, r3, #1
   13cc8:	strd	r2, [sp, #144]	; 0x90
   13ccc:	ldrd	r2, [sp, #120]	; 0x78
   13cd0:	ldrd	r4, [sp, #184]	; 0xb8
   13cd4:	str	r7, [sp, #104]	; 0x68
   13cd8:	mov	r1, r2
   13cdc:	orrs	r3, r1, r3
   13ce0:	movne	r2, #1
   13ce4:	moveq	r2, #0
   13ce8:	mov	r3, #0
   13cec:	ldrd	r0, [sp, #96]	; 0x60
   13cf0:	adds	r4, r4, r2
   13cf4:	str	r3, [sp, #108]	; 0x6c
   13cf8:	ldrd	r2, [sp, #112]	; 0x70
   13cfc:	adc	r5, r5, #0
   13d00:	adds	r0, r0, r4
   13d04:	adc	r1, r1, r5
   13d08:	adds	r2, r2, r0
   13d0c:	adc	r3, r3, r1
   13d10:	mov	r1, r3
   13d14:	cmp	r5, r1
   13d18:	ldrd	r8, [sp, #104]	; 0x68
   13d1c:	cmpeq	r4, r2
   13d20:	ldrd	r4, [sp, #128]	; 0x80
   13d24:	mov	r3, r9
   13d28:	str	r6, [sp, #252]	; 0xfc
   13d2c:	movhi	r3, #1
   13d30:	movls	r3, #0
   13d34:	str	r9, [sp, #248]	; 0xf8
   13d38:	adds	r4, r4, r2
   13d3c:	adc	r5, r5, r1
   13d40:	ldrd	r6, [sp, #248]	; 0xf8
   13d44:	cmp	r1, r5
   13d48:	cmpeq	r2, r4
   13d4c:	str	r3, [sp, #112]	; 0x70
   13d50:	movhi	r3, #1
   13d54:	movls	r3, #0
   13d58:	adds	r6, r6, sl
   13d5c:	adc	r7, r7, #0
   13d60:	adds	r6, r6, r4
   13d64:	adc	r7, r7, r5
   13d68:	cmp	r5, r7
   13d6c:	cmpeq	r4, r6
   13d70:	str	r3, [sp, #120]	; 0x78
   13d74:	movhi	r3, #1
   13d78:	movls	r3, #0
   13d7c:	ldrd	r4, [sp, #152]	; 0x98
   13d80:	str	r3, [sp, #128]	; 0x80
   13d84:	ldrd	r2, [sp, #88]	; 0x58
   13d88:	str	r9, [sp, #116]	; 0x74
   13d8c:	str	r9, [sp, #124]	; 0x7c
   13d90:	cmp	r3, r5
   13d94:	cmpeq	r2, r4
   13d98:	str	r9, [sp, #132]	; 0x84
   13d9c:	bls	13db0 <__assert_fail@plt+0x265c>
   13da0:	ldrd	r2, [sp, #160]	; 0xa0
   13da4:	adds	r2, r2, #0
   13da8:	adc	r3, r3, #1
   13dac:	strd	r2, [sp, #160]	; 0xa0
   13db0:	add	r3, sp, #272	; 0x110
   13db4:	ldr	r8, [sp, #344]	; 0x158
   13db8:	ldrd	sl, [r3]
   13dbc:	mul	ip, r8, fp
   13dc0:	umull	r4, r5, r8, sl
   13dc4:	mla	ip, lr, sl, ip
   13dc8:	mul	r2, sl, fp
   13dcc:	umull	r0, r1, sl, sl
   13dd0:	mul	lr, r8, lr
   13dd4:	add	r5, ip, r5
   13dd8:	mov	ip, #0
   13ddc:	str	ip, [sp, #260]	; 0x104
   13de0:	add	ip, sp, #256	; 0x100
   13de4:	add	r2, r1, r2, lsl #1
   13de8:	umull	sl, fp, r8, r8
   13dec:	str	r2, [sp, #256]	; 0x100
   13df0:	ldrd	r8, [ip]
   13df4:	adds	r2, r4, r4
   13df8:	adc	r3, r5, r5
   13dfc:	adds	r8, r8, r2
   13e00:	adc	r9, r9, r3
   13e04:	cmp	r5, r9
   13e08:	add	ip, fp, lr, lsl #1
   13e0c:	cmpeq	r4, r8
   13e10:	strd	sl, [sp, #152]	; 0x98
   13e14:	mov	r2, r8
   13e18:	mov	r3, r9
   13e1c:	str	ip, [sp, #156]	; 0x9c
   13e20:	bls	13e34 <__assert_fail@plt+0x26e0>
   13e24:	ldrd	r4, [sp, #152]	; 0x98
   13e28:	adds	r4, r4, #0
   13e2c:	adc	r5, r5, #1
   13e30:	strd	r4, [sp, #152]	; 0x98
   13e34:	ldrd	r8, [sp, #184]	; 0xb8
   13e38:	str	r3, [sp, #72]	; 0x48
   13e3c:	add	ip, sp, #312	; 0x138
   13e40:	mov	r3, #0
   13e44:	adds	r4, r8, r6
   13e48:	str	r3, [sp, #264]	; 0x108
   13e4c:	add	r3, sp, #264	; 0x108
   13e50:	adc	r5, r9, r7
   13e54:	ldrd	r6, [ip]
   13e58:	str	r2, [sp, #268]	; 0x10c
   13e5c:	ldrd	r2, [r3]
   13e60:	mul	sl, r4, r7
   13e64:	adds	r2, r2, r0
   13e68:	strd	r4, [sp, #184]	; 0xb8
   13e6c:	adc	r3, r3, #0
   13e70:	mla	sl, r6, r5, sl
   13e74:	mov	r7, r3
   13e78:	umull	r4, r5, r4, r6
   13e7c:	mov	r6, r2
   13e80:	ldrd	r2, [sp, #184]	; 0xb8
   13e84:	mov	ip, #0
   13e88:	str	ip, [sp, #76]	; 0x4c
   13e8c:	cmp	r9, r3
   13e90:	cmpeq	r8, r2
   13e94:	ldrd	r2, [sp, #64]	; 0x40
   13e98:	add	ip, sl, r5
   13e9c:	mov	r5, ip
   13ea0:	str	ip, [sp, #56]	; 0x38
   13ea4:	movhi	ip, #1
   13ea8:	movls	ip, #0
   13eac:	adds	r2, r2, r6
   13eb0:	adc	r3, r3, r7
   13eb4:	strd	r6, [sp, #88]	; 0x58
   13eb8:	ldrd	r6, [sp, #104]	; 0x68
   13ebc:	add	r1, sp, #336	; 0x150
   13ec0:	ldrd	r8, [sp, #48]	; 0x30
   13ec4:	adds	r6, r6, r2
   13ec8:	adc	r7, r7, r3
   13ecc:	mov	r2, r6
   13ed0:	mov	r3, r7
   13ed4:	ldrd	r6, [r1]
   13ed8:	mov	r1, #0
   13edc:	mov	r0, r4
   13ee0:	adds	r6, r6, r2
   13ee4:	adc	r7, r7, r3
   13ee8:	mov	r2, r6
   13eec:	mov	r3, r7
   13ef0:	ldrd	r6, [sp, #112]	; 0x70
   13ef4:	mul	lr, r8, r1
   13ef8:	adds	r6, r6, r2
   13efc:	mov	r2, r6
   13f00:	ldr	r6, [sp, #324]	; 0x144
   13f04:	adc	r7, r7, r3
   13f08:	mov	r3, r7
   13f0c:	umull	sl, fp, r6, r4
   13f10:	mla	lr, r4, r9, lr
   13f14:	add	r7, sp, #272	; 0x110
   13f18:	ldrd	r8, [sp, #120]	; 0x78
   13f1c:	strd	sl, [r7]
   13f20:	ldr	r7, [sp, #48]	; 0x30
   13f24:	adds	r8, r8, r2
   13f28:	adc	r9, r9, r3
   13f2c:	mov	r2, r8
   13f30:	mov	r3, r9
   13f34:	umull	r8, r9, r7, r5
   13f38:	mla	r7, r6, r1, fp
   13f3c:	ldrd	sl, [sp, #48]	; 0x30
   13f40:	strd	r8, [sp, #112]	; 0x70
   13f44:	str	r7, [sp, #276]	; 0x114
   13f48:	mla	r7, r5, fp, r9
   13f4c:	ldrd	r8, [sp, #128]	; 0x80
   13f50:	str	r7, [sp, #116]	; 0x74
   13f54:	umull	r6, r7, r6, r5
   13f58:	adds	r8, r8, r2
   13f5c:	adc	r9, r9, r3
   13f60:	mov	r2, r8
   13f64:	mov	r3, r9
   13f68:	umull	r8, r9, sl, r4
   13f6c:	ldrd	r4, [sp, #144]	; 0x90
   13f70:	mov	sl, r6
   13f74:	mov	fp, r7
   13f78:	adds	r4, r4, r2
   13f7c:	adc	r5, r5, r3
   13f80:	ldrd	r2, [sp, #64]	; 0x40
   13f84:	mov	r6, r4
   13f88:	mov	r7, r5
   13f8c:	adds	r2, r2, ip
   13f90:	add	ip, lr, r9
   13f94:	ldrd	r8, [sp, #160]	; 0xa0
   13f98:	adc	r3, r3, #0
   13f9c:	strd	r6, [sp, #144]	; 0x90
   13fa0:	adds	r8, r8, r2
   13fa4:	adc	r9, r9, r3
   13fa8:	str	ip, [sp, #280]	; 0x118
   13fac:	strd	r8, [sp, #128]	; 0x80
   13fb0:	strd	sl, [sp, #120]	; 0x78
   13fb4:	ldrd	r2, [sp, #72]	; 0x48
   13fb8:	ldrd	r4, [sp, #88]	; 0x58
   13fbc:	mov	ip, r3
   13fc0:	cmp	r5, r7
   13fc4:	cmpeq	r4, r6
   13fc8:	movhi	ip, #1
   13fcc:	movls	ip, #0
   13fd0:	str	ip, [sp, #88]	; 0x58
   13fd4:	add	ip, sp, #272	; 0x110
   13fd8:	ldrd	r4, [sp, #112]	; 0x70
   13fdc:	ldrd	r6, [ip]
   13fe0:	add	ip, sp, #280	; 0x118
   13fe4:	str	r3, [sp, #284]	; 0x11c
   13fe8:	adds	r6, r6, r4
   13fec:	adc	r7, r7, r5
   13ff0:	mov	r9, r7
   13ff4:	mov	r8, r6
   13ff8:	ldrd	r6, [ip]
   13ffc:	str	r3, [sp, #92]	; 0x5c
   14000:	mov	ip, r3
   14004:	adds	r6, r6, r8
   14008:	adc	r7, r7, r9
   1400c:	cmp	r5, r7
   14010:	cmpeq	r4, r6
   14014:	mov	r9, r7
   14018:	bls	14028 <__assert_fail@plt+0x28d4>
   1401c:	adds	r6, sl, #0
   14020:	adc	r7, fp, #1
   14024:	strd	r6, [sp, #120]	; 0x78
   14028:	ldr	fp, [sp, #328]	; 0x148
   1402c:	ldrd	r4, [sp, #80]	; 0x50
   14030:	str	r9, [sp, #136]	; 0x88
   14034:	umull	r2, r3, fp, r0
   14038:	mul	lr, r4, r1
   1403c:	mov	r7, r5
   14040:	mov	r6, r7
   14044:	mul	r8, r4, ip
   14048:	ldr	r7, [sp, #56]	; 0x38
   1404c:	mla	lr, r0, r5, lr
   14050:	mla	r3, fp, r1, r3
   14054:	umull	r4, r5, r4, r0
   14058:	ldr	r1, [sp, #80]	; 0x50
   1405c:	mla	r8, r7, r6, r8
   14060:	mov	r6, #0
   14064:	str	r6, [sp, #140]	; 0x8c
   14068:	mov	r6, #0
   1406c:	umull	r0, r1, r1, r7
   14070:	str	r6, [sp, #292]	; 0x124
   14074:	add	r6, sp, #288	; 0x120
   14078:	add	lr, lr, r5
   1407c:	str	lr, [sp, #288]	; 0x120
   14080:	mov	lr, fp
   14084:	umull	sl, fp, fp, r7
   14088:	ldrd	r6, [r6]
   1408c:	adds	r2, r2, r0
   14090:	add	r1, r8, r1
   14094:	adc	r3, r3, r1
   14098:	adds	r6, r6, r2
   1409c:	adc	r7, r7, r3
   140a0:	cmp	r1, r7
   140a4:	cmpeq	r0, r6
   140a8:	mov	r2, r6
   140ac:	mov	r3, r7
   140b0:	mla	fp, lr, ip, fp
   140b4:	bls	140c0 <__assert_fail@plt+0x296c>
   140b8:	adds	sl, sl, #0
   140bc:	adc	fp, fp, #1
   140c0:	ldrd	r0, [sp, #184]	; 0xb8
   140c4:	str	r3, [sp, #304]	; 0x130
   140c8:	add	r3, sp, #296	; 0x128
   140cc:	mov	ip, r0
   140d0:	orrs	r1, ip, r1
   140d4:	mov	r1, #0
   140d8:	str	r1, [sp, #296]	; 0x128
   140dc:	ldrd	r0, [sp, #144]	; 0x90
   140e0:	str	r2, [sp, #300]	; 0x12c
   140e4:	ldrd	r6, [sp, #136]	; 0x88
   140e8:	movne	r2, #1
   140ec:	moveq	r2, #0
   140f0:	adds	r0, r0, r2
   140f4:	ldrd	r8, [r3]
   140f8:	ldrd	r2, [sp, #120]	; 0x78
   140fc:	adc	r1, r1, #0
   14100:	adds	r6, r6, r0
   14104:	adc	r7, r7, r1
   14108:	adds	r2, r2, r6
   1410c:	adc	r3, r3, r7
   14110:	mov	r7, r3
   14114:	add	r3, sp, #304	; 0x130
   14118:	mov	r6, r2
   1411c:	str	r8, [sp, #308]	; 0x134
   14120:	strd	r0, [sp, #56]	; 0x38
   14124:	ldrd	r2, [r3]
   14128:	ldrd	r0, [sp, #72]	; 0x48
   1412c:	adds	r2, r2, r0
   14130:	adc	r3, r3, r1
   14134:	adds	r8, r8, r4
   14138:	ldrd	r4, [sp, #128]	; 0x80
   1413c:	adc	r9, r9, #0
   14140:	adds	r4, r4, r6
   14144:	adc	r5, r5, r7
   14148:	mov	r1, r5
   1414c:	mov	r0, r4
   14150:	ldrd	r4, [sp, #88]	; 0x58
   14154:	adds	r4, r4, r2
   14158:	adc	r5, r5, r3
   1415c:	mov	r2, r4
   14160:	mov	r3, r5
   14164:	ldrd	r4, [sp, #152]	; 0x98
   14168:	adds	r8, r8, r0
   1416c:	adc	r9, r9, r1
   14170:	adds	r4, r4, r2
   14174:	adc	r5, r5, r3
   14178:	mov	r2, r4
   1417c:	mov	r3, r5
   14180:	ldrd	r4, [sp, #56]	; 0x38
   14184:	cmp	r5, r7
   14188:	cmpeq	r4, r6
   1418c:	movhi	ip, #1
   14190:	movls	ip, #0
   14194:	adds	r2, r2, ip
   14198:	adc	r3, r3, #0
   1419c:	cmp	r7, r1
   141a0:	cmpeq	r6, r0
   141a4:	movhi	ip, #1
   141a8:	movls	ip, #0
   141ac:	adds	r2, r2, ip
   141b0:	adc	r3, r3, #0
   141b4:	cmp	r1, r9
   141b8:	cmpeq	r0, r8
   141bc:	movhi	r1, #1
   141c0:	movls	r1, #0
   141c4:	adds	r2, r2, r1
   141c8:	adc	r3, r3, #0
   141cc:	adds	sl, sl, r2
   141d0:	adc	fp, fp, r3
   141d4:	ldrd	r2, [sp, #168]	; 0xa8
   141d8:	cmp	r3, fp
   141dc:	cmpeq	r2, sl
   141e0:	bcc	1420c <__assert_fail@plt+0x2ab8>
   141e4:	add	r2, sp, #352	; 0x160
   141e8:	moveq	r3, #1
   141ec:	ldrd	r0, [r2]
   141f0:	movne	r3, #0
   141f4:	cmp	r1, r9
   141f8:	cmpeq	r0, r8
   141fc:	movhi	r3, #0
   14200:	andls	r3, r3, #1
   14204:	cmp	r3, #0
   14208:	beq	1424c <__assert_fail@plt+0x2af8>
   1420c:	add	r3, sp, #352	; 0x160
   14210:	ldrd	r4, [sp, #168]	; 0xa8
   14214:	ldrd	r0, [r3]
   14218:	cmp	r1, r9
   1421c:	cmpeq	r0, r8
   14220:	movhi	r2, #1
   14224:	movls	r2, #0
   14228:	ldr	r3, [sp, #348]	; 0x15c
   1422c:	subs	r4, sl, r4
   14230:	sbc	r5, fp, r5
   14234:	subs	sl, r4, r2
   14238:	sbc	fp, r5, r3
   1423c:	subs	r2, r8, r0
   14240:	sbc	r3, r9, r1
   14244:	mov	r8, r2
   14248:	mov	r9, r3
   1424c:	ldrd	r2, [sp, #176]	; 0xb0
   14250:	lsrs	r3, r3, #1
   14254:	rrx	r2, r2
   14258:	strd	r2, [sp, #176]	; 0xb0
   1425c:	ldr	r3, [sp, #320]	; 0x140
   14260:	subs	r3, r3, #1
   14264:	str	r3, [sp, #320]	; 0x140
   14268:	ldr	r3, [sp, #376]	; 0x178
   1426c:	strd	sl, [r3]
   14270:	beq	14454 <__assert_fail@plt+0x2d00>
   14274:	ldrd	r2, [sp, #176]	; 0xb0
   14278:	mov	r3, #0
   1427c:	and	r2, r2, #1
   14280:	orrs	r3, r2, r3
   14284:	bne	143f4 <__assert_fail@plt+0x2ca0>
   14288:	cmp	sl, #0
   1428c:	sbcs	r3, fp, #0
   14290:	blt	14550 <__assert_fail@plt+0x2dfc>
   14294:	ldrd	r2, [sp, #168]	; 0xa8
   14298:	cmp	r2, #0
   1429c:	sbcs	r3, r3, #0
   142a0:	blt	14564 <__assert_fail@plt+0x2e10>
   142a4:	mov	r3, #0
   142a8:	umull	r6, r7, r8, r8
   142ac:	mul	r1, r8, r3
   142b0:	umull	r4, r5, r9, r8
   142b4:	strd	r6, [sp, #120]	; 0x78
   142b8:	add	r1, r7, r1, lsl #1
   142bc:	str	r1, [sp, #192]	; 0xc0
   142c0:	ldr	r1, [sp, #348]	; 0x15c
   142c4:	mla	r5, r9, r3, r5
   142c8:	str	r1, [sp, #196]	; 0xc4
   142cc:	ldrd	r6, [sp, #192]	; 0xc0
   142d0:	adds	r0, r4, r4
   142d4:	adc	r1, r5, r5
   142d8:	adds	r6, r6, r0
   142dc:	adc	r7, r7, r1
   142e0:	cmp	r5, r7
   142e4:	cmpeq	r4, r6
   142e8:	umull	r4, r5, r9, r9
   142ec:	mov	r2, r8
   142f0:	mov	ip, r9
   142f4:	mov	r0, r6
   142f8:	mov	r1, r7
   142fc:	strd	r4, [sp, #112]	; 0x70
   14300:	bls	14310 <__assert_fail@plt+0x2bbc>
   14304:	adds	r4, r4, #0
   14308:	adc	r5, r5, #1
   1430c:	strd	r4, [sp, #112]	; 0x70
   14310:	mov	r9, #0
   14314:	mov	r5, r9
   14318:	mov	r4, sl
   1431c:	add	lr, sp, #272	; 0x110
   14320:	umull	r6, r7, r2, fp
   14324:	strd	r4, [lr]
   14328:	mul	lr, r2, r9
   1432c:	umull	r8, r9, ip, sl
   14330:	mla	lr, sl, r3, lr
   14334:	mla	r3, fp, r3, r7
   14338:	strd	r8, [sp, #56]	; 0x38
   1433c:	mov	r4, r5
   14340:	ldr	r5, [sp, #60]	; 0x3c
   14344:	umull	r8, r9, r2, sl
   14348:	strd	r6, [sp, #88]	; 0x58
   1434c:	str	r3, [sp, #92]	; 0x5c
   14350:	mov	r3, #0
   14354:	mla	r4, ip, r4, r5
   14358:	str	r3, [sp, #204]	; 0xcc
   1435c:	str	r1, [sp, #200]	; 0xc8
   14360:	str	r0, [sp, #212]	; 0xd4
   14364:	ldrd	r0, [sp, #200]	; 0xc8
   14368:	add	lr, lr, r9
   1436c:	str	r4, [sp, #60]	; 0x3c
   14370:	ldrd	r2, [sp, #88]	; 0x58
   14374:	str	lr, [sp, #216]	; 0xd8
   14378:	strd	r8, [sp, #144]	; 0x90
   1437c:	str	r1, [sp, #220]	; 0xdc
   14380:	ldrd	r8, [sp, #56]	; 0x38
   14384:	ldrd	r6, [sp, #216]	; 0xd8
   14388:	str	r1, [sp, #208]	; 0xd0
   1438c:	adds	r4, r8, r2
   14390:	adc	r5, r9, r3
   14394:	adds	r6, r6, r4
   14398:	adc	r7, r7, r5
   1439c:	ldrd	r4, [sp, #112]	; 0x70
   143a0:	ldr	lr, [sp, #120]	; 0x78
   143a4:	strd	r6, [sp, #152]	; 0x98
   143a8:	adds	r4, r4, r0
   143ac:	adc	r5, r5, r1
   143b0:	mov	r2, r4
   143b4:	mov	r3, r5
   143b8:	str	fp, [sp, #344]	; 0x158
   143bc:	strd	r2, [sp, #128]	; 0x80
   143c0:	ldrd	r2, [sp, #208]	; 0xd0
   143c4:	adds	r2, r2, lr
   143c8:	adc	r3, r3, #0
   143cc:	cmp	r9, r7
   143d0:	strd	r2, [sp, #120]	; 0x78
   143d4:	umull	r2, r3, ip, fp
   143d8:	cmpeq	r8, r6
   143dc:	mov	lr, r1
   143e0:	strd	r2, [sp, #160]	; 0xa0
   143e4:	bhi	13b20 <__assert_fail@plt+0x23cc>
   143e8:	add	r1, sp, #336	; 0x150
   143ec:	strd	r2, [r1]
   143f0:	b	13b30 <__assert_fail@plt+0x23dc>
   143f4:	add	r3, sp, #424	; 0x1a8
   143f8:	ldr	r4, [sp, #376]	; 0x178
   143fc:	ldrd	r2, [r3]
   14400:	mov	r0, r4
   14404:	strd	r2, [sp, #40]	; 0x28
   14408:	add	r3, sp, #352	; 0x160
   1440c:	ldrd	r2, [r3]
   14410:	strd	r8, [sp, #16]
   14414:	strd	sl, [sp, #8]
   14418:	strd	r2, [sp, #32]
   1441c:	ldrd	r2, [sp, #168]	; 0xa8
   14420:	strd	r2, [sp, #24]
   14424:	add	r3, sp, #368	; 0x170
   14428:	ldrd	r2, [r3]
   1442c:	strd	r2, [sp]
   14430:	add	r3, sp, #360	; 0x168
   14434:	ldrd	r2, [r3]
   14438:	bl	11af0 <__assert_fail@plt+0x39c>
   1443c:	add	r3, sp, #368	; 0x170
   14440:	strd	r0, [r3]
   14444:	ldrd	r2, [r4]
   14448:	add	r1, sp, #360	; 0x168
   1444c:	strd	r2, [r1]
   14450:	b	14288 <__assert_fail@plt+0x2b34>
   14454:	ldr	r3, [sp, #380]	; 0x17c
   14458:	ldrd	r4, [r3, #8]
   1445c:	orrs	r3, r4, r5
   14460:	beq	14530 <__assert_fail@plt+0x2ddc>
   14464:	ldr	r6, [sp, #376]	; 0x178
   14468:	b	144c4 <__assert_fail@plt+0x2d70>
   1446c:	add	r3, sp, #424	; 0x1a8
   14470:	mov	r0, r6
   14474:	ldrd	r2, [r3]
   14478:	lsrs	r5, r5, #1
   1447c:	rrx	r4, r4
   14480:	strd	r2, [sp, #40]	; 0x28
   14484:	add	r3, sp, #352	; 0x160
   14488:	ldrd	r2, [r3]
   1448c:	strd	r8, [sp, #16]
   14490:	strd	r8, [sp]
   14494:	strd	r2, [sp, #32]
   14498:	ldrd	r2, [sp, #168]	; 0xa8
   1449c:	strd	sl, [sp, #8]
   144a0:	strd	r2, [sp, #24]
   144a4:	mov	r3, fp
   144a8:	mov	r2, sl
   144ac:	bl	11af0 <__assert_fail@plt+0x39c>
   144b0:	orrs	r3, r4, r5
   144b4:	ldrd	sl, [r6]
   144b8:	mov	r8, r0
   144bc:	mov	r9, r1
   144c0:	beq	14530 <__assert_fail@plt+0x2ddc>
   144c4:	and	r2, r4, #1
   144c8:	mov	r3, #0
   144cc:	orrs	r3, r2, r3
   144d0:	beq	1446c <__assert_fail@plt+0x2d18>
   144d4:	add	r3, sp, #424	; 0x1a8
   144d8:	mov	r0, r6
   144dc:	ldrd	r2, [r3]
   144e0:	strd	r2, [sp, #40]	; 0x28
   144e4:	add	r3, sp, #352	; 0x160
   144e8:	ldrd	r2, [r3]
   144ec:	strd	r8, [sp, #16]
   144f0:	strd	sl, [sp, #8]
   144f4:	strd	r2, [sp, #32]
   144f8:	ldrd	r2, [sp, #168]	; 0xa8
   144fc:	strd	r2, [sp, #24]
   14500:	add	r3, sp, #368	; 0x170
   14504:	ldrd	r2, [r3]
   14508:	strd	r2, [sp]
   1450c:	add	r3, sp, #360	; 0x168
   14510:	ldrd	r2, [r3]
   14514:	bl	11af0 <__assert_fail@plt+0x39c>
   14518:	add	r3, sp, #368	; 0x170
   1451c:	strd	r0, [r3]
   14520:	ldrd	r2, [r6]
   14524:	add	r1, sp, #360	; 0x168
   14528:	strd	r2, [r1]
   1452c:	b	1446c <__assert_fail@plt+0x2d18>
   14530:	add	r3, sp, #360	; 0x168
   14534:	ldr	r1, [sp, #376]	; 0x178
   14538:	ldrd	r2, [r3]
   1453c:	strd	r2, [r1]
   14540:	add	r3, sp, #368	; 0x170
   14544:	ldrd	r0, [r3]
   14548:	add	sp, sp, #388	; 0x184
   1454c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14550:	ldr	r3, [pc, #32]	; 14578 <__assert_fail@plt+0x2e24>
   14554:	ldr	r2, [pc, #32]	; 1457c <__assert_fail@plt+0x2e28>
   14558:	ldr	r1, [pc, #32]	; 14580 <__assert_fail@plt+0x2e2c>
   1455c:	ldr	r0, [pc, #32]	; 14584 <__assert_fail@plt+0x2e30>
   14560:	bl	11754 <__assert_fail@plt>
   14564:	ldr	r3, [pc, #12]	; 14578 <__assert_fail@plt+0x2e24>
   14568:	ldr	r2, [pc, #24]	; 14588 <__assert_fail@plt+0x2e34>
   1456c:	ldr	r1, [pc, #12]	; 14580 <__assert_fail@plt+0x2e2c>
   14570:	ldr	r0, [pc, #20]	; 1458c <__assert_fail@plt+0x2e38>
   14574:	bl	11754 <__assert_fail@plt>
   14578:	ldrdeq	r2, [r2], -r0
   1457c:	andeq	r0, r0, r1, ror #7
   14580:	muleq	r2, r0, sp
   14584:	andeq	r5, r2, r0, lsr #27
   14588:	andeq	r0, r0, r3, ror #7
   1458c:	andeq	r5, r2, r0, ror #27
   14590:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14594:	sub	sp, sp, #372	; 0x174
   14598:	mov	r6, r2
   1459c:	ldr	r4, [sp, #420]	; 0x1a4
   145a0:	mov	r7, r3
   145a4:	ldr	r2, [sp, #412]	; 0x19c
   145a8:	mov	r3, r0
   145ac:	mov	r5, r0
   145b0:	strd	r6, [sp]
   145b4:	str	r4, [sp, #8]
   145b8:	ldr	r1, [sp, #408]	; 0x198
   145bc:	add	r0, sp, #360	; 0x168
   145c0:	bl	13a8c <__assert_fail@plt+0x2338>
   145c4:	ldrd	r2, [r4]
   145c8:	mov	fp, r1
   145cc:	add	r1, sp, #344	; 0x158
   145d0:	cmp	fp, r3
   145d4:	strd	r2, [r1]
   145d8:	mov	sl, r0
   145dc:	add	r1, sp, #360	; 0x168
   145e0:	cmpeq	sl, r2
   145e4:	ldrd	r2, [r4, #8]
   145e8:	ldrd	r8, [r1]
   145ec:	add	r1, sp, #352	; 0x160
   145f0:	strd	r2, [r1]
   145f4:	beq	150b0 <__assert_fail@plt+0x395c>
   145f8:	ldrd	r2, [r5]
   145fc:	add	r1, sp, #320	; 0x140
   14600:	add	ip, sp, #320	; 0x140
   14604:	strd	r2, [r1]
   14608:	ldrd	r0, [r5, #8]
   1460c:	add	r3, sp, #288	; 0x120
   14610:	ldrd	r4, [ip]
   14614:	strd	r0, [r3]
   14618:	add	r3, sp, #344	; 0x158
   1461c:	add	ip, sp, #328	; 0x148
   14620:	ldrd	r2, [r3]
   14624:	subs	r2, r4, r2
   14628:	sbc	r3, r5, r3
   1462c:	strd	r2, [ip]
   14630:	add	r3, sp, #352	; 0x160
   14634:	add	ip, sp, #320	; 0x140
   14638:	ldrd	r4, [r3]
   1463c:	subs	r4, r0, r4
   14640:	sbc	r5, r1, r5
   14644:	add	r1, sp, #344	; 0x158
   14648:	mov	r2, r4
   1464c:	ldrd	r0, [r1]
   14650:	mov	r3, r5
   14654:	ldrd	r4, [ip]
   14658:	cmp	r1, r5
   1465c:	cmpeq	r0, r4
   14660:	movhi	r1, #1
   14664:	movls	r1, #0
   14668:	subs	r4, r2, r1
   1466c:	sbc	r5, r3, #0
   14670:	add	r3, sp, #336	; 0x150
   14674:	strd	r4, [r3]
   14678:	add	r3, sp, #328	; 0x148
   1467c:	ldrd	r2, [r3]
   14680:	cmp	fp, r3
   14684:	cmpeq	sl, r2
   14688:	moveq	r0, #1
   1468c:	movne	r0, #0
   14690:	cmp	r9, r5
   14694:	cmpeq	r8, r4
   14698:	movne	r0, #0
   1469c:	andeq	r0, r0, #1
   146a0:	cmp	r0, #0
   146a4:	bne	150c0 <__assert_fail@plt+0x396c>
   146a8:	ldr	r3, [sp, #416]	; 0x1a0
   146ac:	cmp	r3, #1
   146b0:	bls	150c0 <__assert_fail@plt+0x396c>
   146b4:	rsbs	r6, r6, #0
   146b8:	rsc	r7, r7, #0
   146bc:	add	r3, sp, #272	; 0x110
   146c0:	cmp	r8, #0
   146c4:	strd	r6, [r3]
   146c8:	sbcs	r3, r9, #0
   146cc:	blt	150d0 <__assert_fail@plt+0x397c>
   146d0:	add	r3, sp, #288	; 0x120
   146d4:	ldrd	r2, [r3]
   146d8:	cmp	r2, #0
   146dc:	sbcs	r3, r3, #0
   146e0:	blt	150e4 <__assert_fail@plt+0x3990>
   146e4:	add	r3, sp, #320	; 0x140
   146e8:	str	r0, [sp, #76]	; 0x4c
   146ec:	ldrd	r2, [r3]
   146f0:	str	r3, [sp, #284]	; 0x11c
   146f4:	mov	r3, #0
   146f8:	strd	r2, [sp, #24]
   146fc:	add	r3, sp, #288	; 0x120
   14700:	ldrd	r2, [r3]
   14704:	str	r3, [sp, #280]	; 0x118
   14708:	mov	r3, #0
   1470c:	strd	r2, [sp, #32]
   14710:	mov	r3, #1
   14714:	str	r3, [sp, #316]	; 0x13c
   14718:	b	14f68 <__assert_fail@plt+0x3814>
   1471c:	adds	r2, r2, #0
   14720:	adc	r3, r3, #1
   14724:	add	r1, sp, #304	; 0x130
   14728:	mov	r8, sl
   1472c:	mov	r9, fp
   14730:	strd	r2, [r1]
   14734:	add	r3, sp, #272	; 0x110
   14738:	ldrd	r4, [sp, #112]	; 0x70
   1473c:	ldrd	r2, [r3]
   14740:	ldr	sl, [sp, #284]	; 0x11c
   14744:	str	r9, [sp, #40]	; 0x28
   14748:	mul	r0, r4, r3
   1474c:	umull	r6, r7, r4, r2
   14750:	mla	r0, r2, r5, r0
   14754:	ldrd	r4, [sp, #24]
   14758:	add	r3, r0, r7
   1475c:	mov	r7, r3
   14760:	mov	r2, r6
   14764:	umull	r0, r1, r7, r4
   14768:	mul	ip, r2, r5
   1476c:	strd	r0, [sp, #16]
   14770:	ldr	r1, [sp, #76]	; 0x4c
   14774:	str	r3, [sp, #64]	; 0x40
   14778:	mov	r3, #0
   1477c:	mul	r6, r6, r1
   14780:	umull	r0, r1, r2, sl
   14784:	mla	ip, r4, r3, ip
   14788:	strd	r0, [sp, #88]	; 0x58
   1478c:	mov	r0, r4
   14790:	ldr	r4, [sp, #20]
   14794:	mla	r6, sl, r3, r6
   14798:	mla	fp, r7, r5, r4
   1479c:	umull	r0, r1, r2, r0
   147a0:	str	fp, [sp, #20]
   147a4:	mov	fp, #0
   147a8:	str	fp, [sp, #44]	; 0x2c
   147ac:	umull	sl, fp, r7, sl
   147b0:	ldr	r4, [sp, #92]	; 0x5c
   147b4:	add	r0, ip, r1
   147b8:	add	r4, r6, r4
   147bc:	str	r4, [sp, #92]	; 0x5c
   147c0:	strd	sl, [sp, #48]	; 0x30
   147c4:	str	r0, [sp, #200]	; 0xc8
   147c8:	ldrd	sl, [sp, #40]	; 0x28
   147cc:	ldrd	r0, [sp, #88]	; 0x58
   147d0:	str	r8, [sp, #196]	; 0xc4
   147d4:	ldrd	r8, [sp, #16]
   147d8:	str	fp, [sp, #204]	; 0xcc
   147dc:	str	fp, [sp, #192]	; 0xc0
   147e0:	adds	r0, r0, r8
   147e4:	adc	r1, r1, r9
   147e8:	ldrd	r8, [sp, #200]	; 0xc8
   147ec:	mov	r4, r0
   147f0:	ldr	r0, [sp, #296]	; 0x128
   147f4:	adds	r8, r8, r4
   147f8:	adc	r9, r9, r1
   147fc:	mov	r4, r8
   14800:	mov	r5, r9
   14804:	ldrd	r8, [sp, #192]	; 0xc0
   14808:	mov	r6, fp
   1480c:	adds	r8, r8, r0
   14810:	ldrd	r0, [sp, #16]
   14814:	adc	r9, r9, #0
   14818:	cmp	r1, r5
   1481c:	ldr	r1, [sp, #76]	; 0x4c
   14820:	cmpeq	r0, r4
   14824:	ldr	r0, [sp, #52]	; 0x34
   14828:	strd	r8, [sp, #88]	; 0x58
   1482c:	mla	r1, r1, r7, r0
   14830:	str	r1, [sp, #52]	; 0x34
   14834:	bls	14848 <__assert_fail@plt+0x30f4>
   14838:	ldrd	r0, [sp, #48]	; 0x30
   1483c:	adds	r0, r0, #0
   14840:	adc	r1, r1, #1
   14844:	strd	r0, [sp, #48]	; 0x30
   14848:	ldrd	sl, [sp, #32]
   1484c:	ldr	r9, [sp, #64]	; 0x40
   14850:	mov	r1, #0
   14854:	mul	ip, r2, fp
   14858:	mul	r8, r9, fp
   1485c:	mul	r7, r2, r1
   14860:	ldr	r9, [sp, #64]	; 0x40
   14864:	ldr	r1, [sp, #32]
   14868:	str	r5, [sp, #96]	; 0x60
   1486c:	mla	ip, sl, r3, ip
   14870:	umull	r4, r5, r9, r1
   14874:	mla	r8, r6, r1, r8
   14878:	mov	r1, #0
   1487c:	umull	sl, fp, r2, sl
   14880:	mul	r9, r9, r1
   14884:	mov	r1, #0
   14888:	ldr	r0, [sp, #280]	; 0x118
   1488c:	str	r1, [sp, #100]	; 0x64
   14890:	ldr	r1, [sp, #64]	; 0x40
   14894:	mla	r7, r0, r3, r7
   14898:	add	ip, ip, fp
   1489c:	umull	r2, r3, r2, r0
   148a0:	strd	sl, [sp, #16]
   148a4:	umull	sl, fp, r1, r0
   148a8:	str	ip, [sp, #208]	; 0xd0
   148ac:	mov	r1, #0
   148b0:	str	r1, [sp, #212]	; 0xd4
   148b4:	add	r5, r8, r5
   148b8:	mla	r6, r0, r6, r9
   148bc:	ldrd	r8, [sp, #208]	; 0xd0
   148c0:	adds	r2, r2, r4
   148c4:	add	r3, r7, r3
   148c8:	adc	r3, r3, r5
   148cc:	adds	r8, r8, r2
   148d0:	adc	r9, r9, r3
   148d4:	cmp	r5, r9
   148d8:	add	r1, r6, fp
   148dc:	cmpeq	r4, r8
   148e0:	strd	sl, [sp, #64]	; 0x40
   148e4:	mov	r2, r8
   148e8:	mov	r3, r9
   148ec:	str	r1, [sp, #68]	; 0x44
   148f0:	bls	14904 <__assert_fail@plt+0x31b0>
   148f4:	ldrd	r0, [sp, #64]	; 0x40
   148f8:	adds	r0, r0, #0
   148fc:	adc	r1, r1, #1
   14900:	strd	r0, [sp, #64]	; 0x40
   14904:	ldrd	r4, [sp, #112]	; 0x70
   14908:	str	r3, [sp, #104]	; 0x68
   1490c:	str	r2, [sp, #220]	; 0xdc
   14910:	mov	r1, r4
   14914:	mov	r0, r5
   14918:	orrs	r1, r1, r5
   1491c:	ldrd	r4, [sp, #88]	; 0x58
   14920:	ldrd	r2, [sp, #96]	; 0x60
   14924:	ldrd	r6, [sp, #48]	; 0x30
   14928:	movne	r0, #1
   1492c:	moveq	r0, #0
   14930:	adds	r4, r4, r0
   14934:	adc	r5, r5, #0
   14938:	adds	r2, r2, r4
   1493c:	adc	r3, r3, r5
   14940:	adds	r6, r6, r2
   14944:	adc	r7, r7, r3
   14948:	mov	r1, #0
   1494c:	cmp	r5, r7
   14950:	str	r1, [sp, #108]	; 0x6c
   14954:	ldrd	r8, [sp, #104]	; 0x68
   14958:	cmpeq	r4, r6
   1495c:	ldrd	r4, [sp, #120]	; 0x78
   14960:	mov	r1, r9
   14964:	movhi	r1, #1
   14968:	movls	r1, #0
   1496c:	adds	r4, r4, r6
   14970:	adc	r5, r5, r7
   14974:	cmp	r7, r5
   14978:	cmpeq	r6, r4
   1497c:	str	r9, [sp, #216]	; 0xd8
   14980:	mov	r3, r7
   14984:	movhi	r3, #1
   14988:	movls	r3, #0
   1498c:	ldrd	r6, [sp, #216]	; 0xd8
   14990:	str	r3, [sp, #112]	; 0x70
   14994:	ldr	r3, [sp, #16]
   14998:	str	r1, [sp, #48]	; 0x30
   1499c:	adds	r6, r6, r3
   149a0:	adc	r7, r7, #0
   149a4:	adds	r6, r6, r4
   149a8:	adc	r7, r7, r5
   149ac:	cmp	r5, r7
   149b0:	cmpeq	r4, r6
   149b4:	movhi	r3, #1
   149b8:	movls	r3, #0
   149bc:	ldrd	r0, [sp, #152]	; 0x98
   149c0:	str	r3, [sp, #120]	; 0x78
   149c4:	ldrd	r2, [sp, #80]	; 0x50
   149c8:	str	r9, [sp, #52]	; 0x34
   149cc:	str	r9, [sp, #116]	; 0x74
   149d0:	cmp	r3, r1
   149d4:	cmpeq	r2, r0
   149d8:	str	r9, [sp, #124]	; 0x7c
   149dc:	bls	149f0 <__assert_fail@plt+0x329c>
   149e0:	ldrd	r2, [sp, #136]	; 0x88
   149e4:	adds	r2, r2, #0
   149e8:	adc	r3, r3, #1
   149ec:	strd	r2, [sp, #136]	; 0x88
   149f0:	ldrd	r8, [sp, #144]	; 0x90
   149f4:	ldr	r1, [sp, #312]	; 0x138
   149f8:	mul	r0, r8, r9
   149fc:	mul	ip, r1, r9
   14a00:	umull	r2, r3, r8, r8
   14a04:	umull	r4, r5, r1, r8
   14a08:	mla	sl, lr, r8, ip
   14a0c:	add	r0, r3, r0, lsl #1
   14a10:	mov	ip, #0
   14a14:	str	r0, [sp, #224]	; 0xe0
   14a18:	str	ip, [sp, #228]	; 0xe4
   14a1c:	add	r5, sl, r5
   14a20:	ldrd	sl, [sp, #224]	; 0xe0
   14a24:	umull	r8, r9, r1, r1
   14a28:	mul	lr, r1, lr
   14a2c:	adds	r0, r4, r4
   14a30:	adc	r1, r5, r5
   14a34:	adds	sl, sl, r0
   14a38:	adc	fp, fp, r1
   14a3c:	cmp	r5, fp
   14a40:	add	ip, r9, lr, lsl #1
   14a44:	cmpeq	r4, sl
   14a48:	strd	r8, [sp, #80]	; 0x50
   14a4c:	mov	r0, sl
   14a50:	mov	r1, fp
   14a54:	str	ip, [sp, #84]	; 0x54
   14a58:	bls	14a6c <__assert_fail@plt+0x3318>
   14a5c:	ldrd	r4, [sp, #80]	; 0x50
   14a60:	adds	r4, r4, #0
   14a64:	adc	r5, r5, #1
   14a68:	strd	r4, [sp, #80]	; 0x50
   14a6c:	ldrd	r4, [sp, #88]	; 0x58
   14a70:	add	lr, sp, #272	; 0x110
   14a74:	str	r1, [sp, #56]	; 0x38
   14a78:	ldrd	sl, [lr]
   14a7c:	adds	r4, r4, r6
   14a80:	adc	r5, r5, r7
   14a84:	mul	r8, r4, fp
   14a88:	mov	r6, r4
   14a8c:	mov	r7, r5
   14a90:	mla	r8, sl, r5, r8
   14a94:	mov	r1, #0
   14a98:	umull	r4, r5, r4, sl
   14a9c:	str	r0, [sp, #236]	; 0xec
   14aa0:	str	r1, [sp, #232]	; 0xe8
   14aa4:	ldrd	r0, [sp, #232]	; 0xe8
   14aa8:	add	ip, sp, #296	; 0x128
   14aac:	strd	r4, [sp, #16]
   14ab0:	strd	r6, [ip]
   14ab4:	mov	ip, #0
   14ab8:	adds	r0, r0, r2
   14abc:	str	ip, [sp, #60]	; 0x3c
   14ac0:	add	ip, r8, r5
   14ac4:	ldrd	r4, [sp, #88]	; 0x58
   14ac8:	adc	r1, r1, #0
   14acc:	mov	r8, r0
   14ad0:	mov	r9, r1
   14ad4:	ldrd	r0, [sp, #40]	; 0x28
   14ad8:	cmp	r5, r7
   14adc:	ldrd	r2, [sp, #104]	; 0x68
   14ae0:	cmpeq	r4, r6
   14ae4:	movhi	fp, #1
   14ae8:	movls	fp, #0
   14aec:	adds	r0, r0, r8
   14af0:	adc	r1, r1, r9
   14af4:	adds	r2, r2, r0
   14af8:	adc	r3, r3, r1
   14afc:	mov	r1, r3
   14b00:	add	r3, sp, #304	; 0x130
   14b04:	mov	r0, r2
   14b08:	ldrd	r2, [r3]
   14b0c:	ldrd	r4, [sp, #48]	; 0x30
   14b10:	str	ip, [sp, #20]
   14b14:	adds	r2, r2, r0
   14b18:	adc	r3, r3, r1
   14b1c:	mov	r0, r2
   14b20:	adds	r4, r4, r0
   14b24:	mov	r1, r3
   14b28:	adc	r5, r5, r1
   14b2c:	ldrd	r6, [sp, #16]
   14b30:	mov	r0, r4
   14b34:	mov	r1, r5
   14b38:	ldrd	r4, [sp, #24]
   14b3c:	strd	r8, [sp, #152]	; 0x98
   14b40:	str	ip, [sp, #144]	; 0x90
   14b44:	umull	r8, r9, r7, r4
   14b48:	ldr	ip, [sp, #76]	; 0x4c
   14b4c:	mov	r2, r6
   14b50:	mov	r7, r9
   14b54:	mul	lr, r6, ip
   14b58:	mov	r6, r8
   14b5c:	ldrd	r8, [sp, #112]	; 0x70
   14b60:	ldr	sl, [sp, #284]	; 0x11c
   14b64:	mul	ip, r2, r5
   14b68:	adds	r8, r8, r0
   14b6c:	adc	r9, r9, r1
   14b70:	mov	r1, r9
   14b74:	ldr	r9, [sp, #20]
   14b78:	mov	r0, r8
   14b7c:	mov	r3, #0
   14b80:	mla	r8, r9, r5, r7
   14b84:	strd	r6, [sp, #88]	; 0x58
   14b88:	mla	ip, r4, r3, ip
   14b8c:	str	r8, [sp, #92]	; 0x5c
   14b90:	umull	r4, r5, r2, sl
   14b94:	ldrd	r8, [sp, #120]	; 0x78
   14b98:	mov	r6, r4
   14b9c:	ldr	r4, [sp, #24]
   14ba0:	adds	r8, r8, r0
   14ba4:	adc	r9, r9, r1
   14ba8:	mov	r0, r8
   14bac:	mov	r1, r9
   14bb0:	ldrd	r8, [sp, #64]	; 0x40
   14bb4:	mov	r7, r5
   14bb8:	mla	lr, sl, r3, lr
   14bbc:	umull	r4, r5, r2, r4
   14bc0:	strd	r6, [sp, #112]	; 0x70
   14bc4:	adds	r8, r8, r0
   14bc8:	adc	r9, r9, r1
   14bcc:	add	r1, sp, #304	; 0x130
   14bd0:	add	lr, lr, r7
   14bd4:	strd	r8, [r1]
   14bd8:	str	lr, [sp, #116]	; 0x74
   14bdc:	ldrd	r0, [sp, #40]	; 0x28
   14be0:	add	lr, ip, r5
   14be4:	str	lr, [sp, #240]	; 0xf0
   14be8:	ldrd	r4, [sp, #136]	; 0x88
   14bec:	adds	r0, r0, fp
   14bf0:	adc	r1, r1, #0
   14bf4:	ldrd	r6, [sp, #152]	; 0x98
   14bf8:	adds	r4, r4, r0
   14bfc:	adc	r5, r5, r1
   14c00:	ldrd	r0, [sp, #56]	; 0x38
   14c04:	cmp	r7, r9
   14c08:	cmpeq	r6, r8
   14c0c:	strd	r4, [sp, #120]	; 0x78
   14c10:	ldrd	r8, [sp, #88]	; 0x58
   14c14:	ldrd	r4, [sp, #112]	; 0x70
   14c18:	str	r1, [sp, #244]	; 0xf4
   14c1c:	ldr	ip, [sp, #20]
   14c20:	ldrd	r6, [sp, #240]	; 0xf0
   14c24:	mov	lr, r1
   14c28:	movhi	lr, #1
   14c2c:	movls	lr, #0
   14c30:	adds	r4, r4, r8
   14c34:	umull	sl, fp, ip, sl
   14c38:	ldr	ip, [sp, #76]	; 0x4c
   14c3c:	adc	r5, r5, r9
   14c40:	adds	r6, r6, r4
   14c44:	mov	r4, r6
   14c48:	ldr	r6, [sp, #20]
   14c4c:	adc	r7, r7, r5
   14c50:	mov	r5, r7
   14c54:	mla	ip, ip, r6, fp
   14c58:	cmp	r9, r5
   14c5c:	cmpeq	r8, r4
   14c60:	strd	sl, [sp, #64]	; 0x40
   14c64:	str	lr, [sp, #48]	; 0x30
   14c68:	str	r1, [sp, #52]	; 0x34
   14c6c:	str	ip, [sp, #68]	; 0x44
   14c70:	mov	lr, r1
   14c74:	bls	14c88 <__assert_fail@plt+0x3534>
   14c78:	ldrd	r0, [sp, #64]	; 0x40
   14c7c:	adds	r0, r0, #0
   14c80:	adc	r1, r1, #1
   14c84:	strd	r0, [sp, #64]	; 0x40
   14c88:	ldrd	sl, [sp, #32]
   14c8c:	ldr	r0, [sp, #144]	; 0x90
   14c90:	mov	r1, #0
   14c94:	mul	ip, r2, fp
   14c98:	mul	r6, r0, fp
   14c9c:	mul	r7, r2, r1
   14ca0:	umull	r0, r1, r2, sl
   14ca4:	mla	r6, lr, sl, r6
   14ca8:	mla	ip, sl, r3, ip
   14cac:	mov	r8, sl
   14cb0:	ldr	r9, [sp, #280]	; 0x118
   14cb4:	ldr	sl, [sp, #144]	; 0x90
   14cb8:	add	ip, ip, r1
   14cbc:	mla	r7, r9, r3, r7
   14cc0:	str	r5, [sp, #128]	; 0x80
   14cc4:	umull	r2, r3, r2, r9
   14cc8:	umull	r4, r5, sl, r8
   14ccc:	str	ip, [sp, #248]	; 0xf8
   14cd0:	ldr	ip, [sp, #280]	; 0x118
   14cd4:	add	r5, r6, r5
   14cd8:	add	r3, r7, r3
   14cdc:	umull	r6, r7, sl, ip
   14ce0:	mov	r8, #0
   14ce4:	str	r8, [sp, #252]	; 0xfc
   14ce8:	mov	fp, r7
   14cec:	mul	r9, sl, r8
   14cf0:	mov	sl, r6
   14cf4:	ldrd	r6, [sp, #248]	; 0xf8
   14cf8:	adds	r2, r2, r4
   14cfc:	adc	r3, r3, r5
   14d00:	mla	lr, ip, lr, r9
   14d04:	adds	r6, r6, r2
   14d08:	adc	r7, r7, r3
   14d0c:	cmp	r5, r7
   14d10:	add	ip, lr, fp
   14d14:	cmpeq	r4, r6
   14d18:	strd	sl, [sp, #16]
   14d1c:	str	r8, [sp, #132]	; 0x84
   14d20:	mov	r2, r6
   14d24:	mov	r3, r7
   14d28:	str	ip, [sp, #20]
   14d2c:	bls	14d40 <__assert_fail@plt+0x35ec>
   14d30:	ldrd	r4, [sp, #16]
   14d34:	adds	r4, r4, #0
   14d38:	adc	r5, r5, #1
   14d3c:	strd	r4, [sp, #16]
   14d40:	add	ip, sp, #296	; 0x128
   14d44:	str	r3, [sp, #264]	; 0x108
   14d48:	ldrd	r4, [ip]
   14d4c:	add	r3, sp, #304	; 0x130
   14d50:	str	r2, [sp, #260]	; 0x104
   14d54:	mov	ip, r4
   14d58:	ldrd	r8, [r3]
   14d5c:	orrs	ip, ip, r5
   14d60:	add	r3, sp, #256	; 0x100
   14d64:	mov	ip, #0
   14d68:	movne	r2, #1
   14d6c:	moveq	r2, #0
   14d70:	mov	lr, r5
   14d74:	ldrd	r4, [sp, #128]	; 0x80
   14d78:	adds	r8, r8, r2
   14d7c:	str	ip, [sp, #256]	; 0x100
   14d80:	ldrd	sl, [r3]
   14d84:	ldrd	r2, [sp, #64]	; 0x40
   14d88:	adc	r9, r9, #0
   14d8c:	adds	r4, r4, r8
   14d90:	adc	r5, r5, r9
   14d94:	adds	r2, r2, r4
   14d98:	adc	r3, r3, r5
   14d9c:	mov	r5, r3
   14da0:	add	r3, sp, #264	; 0x108
   14da4:	mov	r4, r2
   14da8:	ldrd	r6, [sp, #56]	; 0x38
   14dac:	str	sl, [sp, #268]	; 0x10c
   14db0:	ldrd	r2, [r3]
   14db4:	adds	r2, r2, r6
   14db8:	adc	r3, r3, r7
   14dbc:	adds	sl, sl, r0
   14dc0:	ldrd	r0, [sp, #120]	; 0x78
   14dc4:	ldrd	r6, [sp, #48]	; 0x30
   14dc8:	adc	fp, fp, #0
   14dcc:	adds	r0, r0, r4
   14dd0:	adc	r1, r1, r5
   14dd4:	adds	r6, r6, r2
   14dd8:	adc	r7, r7, r3
   14ddc:	mov	r3, r7
   14de0:	mov	r2, r6
   14de4:	ldrd	r6, [sp, #80]	; 0x50
   14de8:	adds	sl, sl, r0
   14dec:	adc	fp, fp, r1
   14df0:	adds	r6, r6, r2
   14df4:	adc	r7, r7, r3
   14df8:	cmp	r9, r5
   14dfc:	cmpeq	r8, r4
   14e00:	movhi	r3, #1
   14e04:	movls	r3, ip
   14e08:	adds	r8, r6, r3
   14e0c:	adc	r9, r7, #0
   14e10:	cmp	r5, r1
   14e14:	cmpeq	r4, r0
   14e18:	movhi	r3, #1
   14e1c:	movls	r3, ip
   14e20:	adds	r8, r8, r3
   14e24:	adc	r9, r9, #0
   14e28:	cmp	r1, fp
   14e2c:	cmpeq	r0, sl
   14e30:	movhi	r3, #1
   14e34:	movls	r3, ip
   14e38:	adds	r8, r8, r3
   14e3c:	ldrd	r2, [sp, #16]
   14e40:	adc	r9, r9, #0
   14e44:	adds	r2, r2, r8
   14e48:	adc	r3, r3, r9
   14e4c:	mov	r9, r3
   14e50:	add	r3, sp, #288	; 0x120
   14e54:	mov	r8, r2
   14e58:	ldrd	r2, [r3]
   14e5c:	cmp	r3, r9
   14e60:	cmpeq	r2, r8
   14e64:	bcc	14e90 <__assert_fail@plt+0x373c>
   14e68:	add	r2, sp, #320	; 0x140
   14e6c:	moveq	r3, #1
   14e70:	ldrd	r0, [r2]
   14e74:	movne	r3, ip
   14e78:	cmp	r1, fp
   14e7c:	cmpeq	r0, sl
   14e80:	movhi	r3, #0
   14e84:	andls	r3, r3, #1
   14e88:	cmp	r3, ip
   14e8c:	beq	14ed4 <__assert_fail@plt+0x3780>
   14e90:	add	r3, sp, #320	; 0x140
   14e94:	add	ip, sp, #288	; 0x120
   14e98:	ldrd	r0, [r3]
   14e9c:	ldrd	r4, [ip]
   14ea0:	cmp	r1, fp
   14ea4:	cmpeq	r0, sl
   14ea8:	movhi	r2, #1
   14eac:	movls	r2, #0
   14eb0:	subs	r4, r8, r4
   14eb4:	mov	r3, #0
   14eb8:	sbc	r5, r9, r5
   14ebc:	subs	r8, r4, r2
   14ec0:	sbc	r9, r5, r3
   14ec4:	subs	r2, sl, r0
   14ec8:	sbc	r3, fp, r1
   14ecc:	mov	sl, r2
   14ed0:	mov	fp, r3
   14ed4:	add	r3, sp, #328	; 0x148
   14ed8:	ldrd	r2, [r3]
   14edc:	cmp	r3, fp
   14ee0:	add	r3, sp, #336	; 0x150
   14ee4:	cmpeq	r2, sl
   14ee8:	ldrd	r2, [r3]
   14eec:	moveq	r0, #1
   14ef0:	movne	r0, #0
   14ef4:	cmp	r3, r9
   14ef8:	cmpeq	r2, r8
   14efc:	movne	r0, #0
   14f00:	andeq	r0, r0, #1
   14f04:	cmp	r0, #0
   14f08:	bne	150c0 <__assert_fail@plt+0x396c>
   14f0c:	add	r3, sp, #352	; 0x160
   14f10:	ldrd	r2, [r3]
   14f14:	cmp	r9, r3
   14f18:	cmpeq	r8, r2
   14f1c:	add	r2, sp, #344	; 0x158
   14f20:	moveq	r3, #1
   14f24:	ldrd	r4, [r2]
   14f28:	movne	r3, #0
   14f2c:	cmp	r5, fp
   14f30:	cmpeq	r4, sl
   14f34:	movne	r3, #0
   14f38:	andeq	r3, r3, #1
   14f3c:	cmp	r3, #0
   14f40:	bne	150c0 <__assert_fail@plt+0x396c>
   14f44:	ldr	r3, [sp, #316]	; 0x13c
   14f48:	ldr	r2, [sp, #416]	; 0x1a0
   14f4c:	add	r3, r3, #1
   14f50:	cmp	r2, r3
   14f54:	str	r3, [sp, #316]	; 0x13c
   14f58:	beq	150c0 <__assert_fail@plt+0x396c>
   14f5c:	cmp	r8, #0
   14f60:	sbcs	r3, r9, #0
   14f64:	blt	150c8 <__assert_fail@plt+0x3974>
   14f68:	mov	r3, #0
   14f6c:	umull	r6, r7, sl, sl
   14f70:	mul	r1, sl, r3
   14f74:	umull	r4, r5, fp, sl
   14f78:	strd	r6, [sp, #64]	; 0x40
   14f7c:	add	r1, r7, r1, lsl #1
   14f80:	str	r1, [sp, #160]	; 0xa0
   14f84:	mov	r1, #0
   14f88:	str	r1, [sp, #164]	; 0xa4
   14f8c:	mla	r5, fp, r3, r5
   14f90:	ldrd	r6, [sp, #160]	; 0xa0
   14f94:	adds	r0, r4, r4
   14f98:	adc	r1, r5, r5
   14f9c:	adds	r6, r6, r0
   14fa0:	adc	r7, r7, r1
   14fa4:	cmp	r5, r7
   14fa8:	cmpeq	r4, r6
   14fac:	umull	r4, r5, fp, fp
   14fb0:	mov	r2, sl
   14fb4:	mov	ip, fp
   14fb8:	mov	r0, r6
   14fbc:	mov	r1, r7
   14fc0:	strd	r4, [sp, #48]	; 0x30
   14fc4:	bls	14fd4 <__assert_fail@plt+0x3880>
   14fc8:	adds	r4, r4, #0
   14fcc:	adc	r5, r5, #1
   14fd0:	strd	r4, [sp, #48]	; 0x30
   14fd4:	mov	r5, #0
   14fd8:	mov	fp, r5
   14fdc:	mov	sl, r8
   14fe0:	umull	r4, r5, r2, r9
   14fe4:	mul	lr, r2, fp
   14fe8:	strd	sl, [sp, #144]	; 0x90
   14fec:	umull	sl, fp, r2, r8
   14ff0:	strd	r4, [sp, #80]	; 0x50
   14ff4:	add	r6, sp, #296	; 0x128
   14ff8:	strd	r4, [sp, #16]
   14ffc:	umull	r4, r5, ip, r8
   15000:	strd	sl, [r6]
   15004:	ldr	r6, [sp, #148]	; 0x94
   15008:	mla	lr, r8, r3, lr
   1500c:	mla	r5, ip, r6, r5
   15010:	ldr	r6, [sp, #20]
   15014:	str	r1, [sp, #168]	; 0xa8
   15018:	mla	r3, r9, r3, r6
   1501c:	str	r0, [sp, #180]	; 0xb4
   15020:	str	r3, [sp, #84]	; 0x54
   15024:	mov	r3, #0
   15028:	str	r3, [sp, #172]	; 0xac
   1502c:	ldrd	r0, [sp, #168]	; 0xa8
   15030:	add	lr, lr, fp
   15034:	str	lr, [sp, #184]	; 0xb8
   15038:	ldrd	r2, [sp, #80]	; 0x50
   1503c:	str	r1, [sp, #188]	; 0xbc
   15040:	ldrd	sl, [sp, #184]	; 0xb8
   15044:	ldrd	r6, [sp, #48]	; 0x30
   15048:	adds	r2, r2, r4
   1504c:	adc	r3, r3, r5
   15050:	adds	sl, sl, r2
   15054:	adc	fp, fp, r3
   15058:	adds	r2, r0, r6
   1505c:	adc	r3, r1, r7
   15060:	str	r1, [sp, #176]	; 0xb0
   15064:	strd	r2, [sp, #120]	; 0x78
   15068:	ldrd	r2, [sp, #176]	; 0xb0
   1506c:	ldr	lr, [sp, #64]	; 0x40
   15070:	strd	sl, [sp, #152]	; 0x98
   15074:	adds	r2, r2, lr
   15078:	adc	r3, r3, #0
   1507c:	cmp	r5, fp
   15080:	strd	r2, [sp, #112]	; 0x70
   15084:	umull	r2, r3, ip, r9
   15088:	str	r9, [sp, #312]	; 0x138
   1508c:	cmpeq	r4, sl
   15090:	mov	lr, r1
   15094:	strd	r2, [sp, #136]	; 0x88
   15098:	bhi	1471c <__assert_fail@plt+0x2fc8>
   1509c:	add	r1, sp, #304	; 0x130
   150a0:	mov	r8, sl
   150a4:	strd	r2, [r1]
   150a8:	mov	r9, fp
   150ac:	b	14734 <__assert_fail@plt+0x2fe0>
   150b0:	cmp	r9, r3
   150b4:	cmpeq	r8, r2
   150b8:	bne	145f8 <__assert_fail@plt+0x2ea4>
   150bc:	mov	r0, #1
   150c0:	add	sp, sp, #372	; 0x174
   150c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150c8:	add	r3, sp, #360	; 0x168
   150cc:	strd	r8, [r3]
   150d0:	ldr	r3, [pc, #32]	; 150f8 <__assert_fail@plt+0x39a4>
   150d4:	ldr	r2, [pc, #32]	; 150fc <__assert_fail@plt+0x39a8>
   150d8:	ldr	r1, [pc, #32]	; 15100 <__assert_fail@plt+0x39ac>
   150dc:	ldr	r0, [pc, #32]	; 15104 <__assert_fail@plt+0x39b0>
   150e0:	bl	11754 <__assert_fail@plt>
   150e4:	ldr	r3, [pc, #12]	; 150f8 <__assert_fail@plt+0x39a4>
   150e8:	ldr	r2, [pc, #24]	; 15108 <__assert_fail@plt+0x39b4>
   150ec:	ldr	r1, [pc, #12]	; 15100 <__assert_fail@plt+0x39ac>
   150f0:	ldr	r0, [pc, #20]	; 1510c <__assert_fail@plt+0x39b8>
   150f4:	bl	11754 <__assert_fail@plt>
   150f8:	ldrdeq	r2, [r2], -r0
   150fc:	andeq	r0, r0, r1, ror #7
   15100:	muleq	r2, r0, sp
   15104:	andeq	r5, r2, r0, lsr #27
   15108:	andeq	r0, r0, r3, ror #7
   1510c:	andeq	r5, r2, r0, ror #27
   15110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15114:	mov	r5, r3
   15118:	sub	sp, sp, #516	; 0x204
   1511c:	mov	r3, r2
   15120:	mov	r4, r2
   15124:	orrs	r3, r3, r5
   15128:	moveq	r3, #1
   1512c:	movne	r3, #0
   15130:	strd	r4, [sp, #16]
   15134:	subs	r4, r2, #1
   15138:	sbc	r5, r5, #0
   1513c:	strd	r0, [sp, #24]
   15140:	subs	r0, r0, r3
   15144:	sbc	r1, r1, #0
   15148:	orrs	r3, r4, r5
   1514c:	strd	r4, [sp, #88]	; 0x58
   15150:	strd	r0, [sp, #64]	; 0x40
   15154:	beq	15220 <__assert_fail@plt+0x3acc>
   15158:	and	r2, r4, #1
   1515c:	mov	r3, #0
   15160:	orrs	r3, r2, r3
   15164:	bne	15b80 <__assert_fail@plt+0x442c>
   15168:	ldrd	sl, [sp, #32]
   1516c:	mov	r2, r4
   15170:	mov	r3, r5
   15174:	mov	r1, #0
   15178:	lsrs	r3, r3, #1
   1517c:	rrx	r2, r2
   15180:	and	r4, r2, #1
   15184:	mov	r5, #0
   15188:	orrs	r0, r4, r5
   1518c:	add	r1, r1, #1
   15190:	beq	15178 <__assert_fail@plt+0x3a24>
   15194:	str	r1, [sp, #132]	; 0x84
   15198:	ldrd	r6, [sp, #64]	; 0x40
   1519c:	ldr	ip, [sp, #132]	; 0x84
   151a0:	rsb	r3, r1, #64	; 0x40
   151a4:	strd	sl, [sp, #32]
   151a8:	ldr	lr, [sp, #88]	; 0x58
   151ac:	sub	r2, r3, #32
   151b0:	lsl	r1, r7, r3
   151b4:	ldr	sl, [sp, #92]	; 0x5c
   151b8:	lsr	r4, lr, ip
   151bc:	orr	r1, r1, r6, lsl r2
   151c0:	mov	lr, ip
   151c4:	rsb	r2, r3, #32
   151c8:	rsb	ip, ip, #32
   151cc:	lsl	r0, r6, r3
   151d0:	ldr	r3, [sp, #92]	; 0x5c
   151d4:	orr	r4, r4, sl, lsl ip
   151d8:	orr	r1, r1, r6, lsr r2
   151dc:	sub	r2, lr, #32
   151e0:	ldr	sl, [sp, #92]	; 0x5c
   151e4:	orr	r4, r4, r3, lsr r2
   151e8:	lsr	r3, r6, lr
   151ec:	lsr	r5, sl, lr
   151f0:	orr	r3, r3, r7, lsl ip
   151f4:	add	ip, sp, #160	; 0xa0
   151f8:	mov	sl, ip
   151fc:	orr	r3, r3, r7, lsr r2
   15200:	orr	r0, r0, r4
   15204:	orr	r1, r1, r5
   15208:	lsr	r2, r7, lr
   1520c:	str	ip, [sp, #152]	; 0x98
   15210:	strd	r0, [sl]
   15214:	str	r3, [sl, #8]
   15218:	str	r2, [sl, #12]
   1521c:	b	152ac <__assert_fail@plt+0x3b58>
   15220:	and	r2, r0, #1
   15224:	mov	r3, #0
   15228:	orrs	r3, r2, r3
   1522c:	bne	15b9c <__assert_fail@plt+0x4448>
   15230:	mov	r2, r0
   15234:	mov	r3, r1
   15238:	mov	ip, #0
   1523c:	ldrd	sl, [sp, #32]
   15240:	b	15248 <__assert_fail@plt+0x3af4>
   15244:	mov	ip, r1
   15248:	lsrs	r3, r3, #1
   1524c:	rrx	r2, r2
   15250:	mov	r1, #0
   15254:	and	r0, r2, #1
   15258:	orrs	r1, r0, r1
   1525c:	add	r1, ip, #1
   15260:	beq	15244 <__assert_fail@plt+0x3af0>
   15264:	add	r3, ip, #65	; 0x41
   15268:	strd	sl, [sp, #32]
   1526c:	str	r3, [sp, #132]	; 0x84
   15270:	ldrd	r4, [sp, #64]	; 0x40
   15274:	rsb	r3, r1, #32
   15278:	mov	r2, #0
   1527c:	lsr	r0, r4, r1
   15280:	orr	r0, r0, r5, lsl r3
   15284:	sub	r3, r1, #32
   15288:	lsr	r1, r5, r1
   1528c:	orr	r0, r0, r5, lsr r3
   15290:	add	r3, sp, #160	; 0xa0
   15294:	mov	ip, r3
   15298:	str	r3, [sp, #152]	; 0x98
   1529c:	mov	r3, #0
   152a0:	str	r0, [sp, #160]	; 0xa0
   152a4:	str	r1, [ip, #4]
   152a8:	strd	r2, [ip, #8]
   152ac:	ldrd	r6, [sp, #16]
   152b0:	ldr	r1, [pc, #2292]	; 15bac <__assert_fail@plt+0x4458>
   152b4:	mov	r5, #0
   152b8:	mov	r2, r6
   152bc:	mov	r3, r7
   152c0:	lsrs	r3, r3, #1
   152c4:	rrx	r2, r2
   152c8:	and	r2, r2, #127	; 0x7f
   152cc:	add	r2, r1, r2
   152d0:	mov	lr, r6
   152d4:	ldrb	r2, [r2, #708]	; 0x2c4
   152d8:	mov	r4, r2
   152dc:	umull	r2, r3, r2, r2
   152e0:	adds	r4, r4, r4
   152e4:	mul	ip, r2, r7
   152e8:	umull	r0, r1, r2, r6
   152ec:	mla	r3, r6, r3, ip
   152f0:	adc	r5, r5, r5
   152f4:	add	r1, r3, r1
   152f8:	subs	r0, r4, r0
   152fc:	sbc	r1, r5, r1
   15300:	adds	r4, r0, r0
   15304:	adc	r5, r1, r1
   15308:	mul	r3, r0, r1
   1530c:	umull	r0, r1, r0, r0
   15310:	add	r1, r1, r3, lsl #1
   15314:	mul	ip, r0, r7
   15318:	umull	r2, r3, r0, r6
   1531c:	mla	r1, r6, r1, ip
   15320:	subs	r2, r4, r2
   15324:	add	r3, r1, r3
   15328:	sbc	r3, r5, r3
   1532c:	adds	r4, r2, r2
   15330:	adc	r5, r3, r3
   15334:	mul	r1, r2, r3
   15338:	umull	r2, r3, r2, r2
   1533c:	add	r3, r3, r1, lsl #1
   15340:	mul	ip, r2, r7
   15344:	umull	r0, r1, r2, r6
   15348:	mla	r3, r6, r3, ip
   1534c:	subs	r4, r4, r0
   15350:	add	r1, r3, r1
   15354:	ldrd	r2, [sp, #24]
   15358:	sbc	r5, r5, r1
   1535c:	mov	r7, #0
   15360:	cmp	r3, #0
   15364:	cmpeq	r2, #1
   15368:	strd	r4, [sp, #56]	; 0x38
   1536c:	movhi	r0, #64	; 0x40
   15370:	movhi	r1, #0
   15374:	movhi	r4, #0
   15378:	movhi	r5, #0
   1537c:	movhi	r6, #1
   15380:	movls	r0, #128	; 0x80
   15384:	movls	r1, #0
   15388:	movls	r4, #1
   1538c:	movls	r5, #0
   15390:	movls	r6, #0
   15394:	mov	ip, #0
   15398:	subs	r0, r0, #1
   1539c:	sbc	r1, r1, #0
   153a0:	mvn	r3, #0
   153a4:	mvn	r2, #0
   153a8:	cmp	r1, r3
   153ac:	cmpeq	r0, r2
   153b0:	beq	15448 <__assert_fail@plt+0x3cf4>
   153b4:	adds	r6, r6, r6
   153b8:	adc	r7, r7, r7
   153bc:	adds	r2, r4, r4
   153c0:	adc	r3, r5, r5
   153c4:	lsr	r8, r5, #31
   153c8:	ldrd	r4, [sp, #24]
   153cc:	mov	r9, #0
   153d0:	orr	r7, r7, r9
   153d4:	cmp	r5, r7
   153d8:	orr	r6, r6, r8
   153dc:	cmpeq	r4, r6
   153e0:	mov	r5, r3
   153e4:	mov	r4, r2
   153e8:	bcc	15410 <__assert_fail@plt+0x3cbc>
   153ec:	ldrd	sl, [sp, #16]
   153f0:	moveq	lr, #1
   153f4:	movne	lr, r9
   153f8:	cmp	fp, r3
   153fc:	cmpeq	sl, r2
   15400:	movhi	lr, #0
   15404:	andls	lr, lr, #1
   15408:	cmp	lr, r9
   1540c:	beq	15398 <__assert_fail@plt+0x3c44>
   15410:	ldrd	r4, [sp, #16]
   15414:	ldrd	sl, [sp, #24]
   15418:	cmp	r5, r3
   1541c:	cmpeq	r4, r2
   15420:	movhi	r4, #1
   15424:	movls	r4, #0
   15428:	subs	sl, r6, sl
   1542c:	sbc	fp, r7, fp
   15430:	subs	r6, sl, r4
   15434:	ldrd	r4, [sp, #16]
   15438:	sbc	r7, fp, ip
   1543c:	subs	r4, r2, r4
   15440:	sbc	r5, r3, r5
   15444:	b	15398 <__assert_fail@plt+0x3c44>
   15448:	adds	r8, r4, r4
   1544c:	adc	r9, r5, r5
   15450:	adds	r2, r6, r6
   15454:	adc	r3, r7, r7
   15458:	cmp	r5, r9
   1545c:	cmpeq	r4, r8
   15460:	ldrd	sl, [sp, #24]
   15464:	movhi	r1, #1
   15468:	movls	r1, #0
   1546c:	adds	r2, r2, r1
   15470:	adc	r3, r3, #0
   15474:	cmp	fp, r3
   15478:	cmpeq	sl, r2
   1547c:	mov	r1, fp
   15480:	strd	r2, [sp, #184]	; 0xb8
   15484:	strd	r6, [sp, #200]	; 0xc8
   15488:	strd	r4, [sp, #192]	; 0xc0
   1548c:	bcc	154bc <__assert_fail@plt+0x3d68>
   15490:	ldrd	r6, [sp, #16]
   15494:	cmp	r7, r9
   15498:	cmpeq	r6, r8
   1549c:	movls	r1, #1
   154a0:	movhi	r1, #0
   154a4:	cmp	fp, r3
   154a8:	cmpeq	sl, r2
   154ac:	movne	r1, #0
   154b0:	andeq	r1, r1, #1
   154b4:	cmp	r1, #0
   154b8:	beq	15b70 <__assert_fail@plt+0x441c>
   154bc:	ldrd	r0, [sp, #24]
   154c0:	ldrd	r4, [sp, #16]
   154c4:	subs	r0, r2, r0
   154c8:	sbc	r1, r3, r1
   154cc:	mov	r2, r0
   154d0:	subs	r0, r8, r4
   154d4:	mov	r3, r1
   154d8:	sbc	r1, r9, r5
   154dc:	cmp	r5, r9
   154e0:	cmpeq	r4, r8
   154e4:	movhi	ip, #1
   154e8:	movls	ip, #0
   154ec:	subs	r2, r2, ip
   154f0:	sbc	r3, r3, #0
   154f4:	strd	r0, [sp, #176]	; 0xb0
   154f8:	strd	r2, [sp, #184]	; 0xb8
   154fc:	add	r3, sp, #192	; 0xc0
   15500:	str	r3, [sp, #12]
   15504:	ldr	r3, [sp, #132]	; 0x84
   15508:	ldrd	r6, [sp, #24]
   1550c:	str	r3, [sp, #8]
   15510:	ldr	r3, [sp, #152]	; 0x98
   15514:	add	r0, sp, #208	; 0xd0
   15518:	str	r3, [sp, #4]
   1551c:	add	r3, sp, #176	; 0xb0
   15520:	str	r3, [sp]
   15524:	ldrd	r2, [sp, #56]	; 0x38
   15528:	strd	r4, [sp, #208]	; 0xd0
   1552c:	strd	r6, [sp, #216]	; 0xd8
   15530:	bl	14590 <__assert_fail@plt+0x2e3c>
   15534:	subs	r3, r0, #0
   15538:	str	r3, [sp, #156]	; 0x9c
   1553c:	beq	159f8 <__assert_fail@plt+0x42a4>
   15540:	ldrd	r8, [sp, #64]	; 0x40
   15544:	ldrd	r6, [sp, #88]	; 0x58
   15548:	add	r3, sp, #256	; 0x100
   1554c:	mov	r0, r8
   15550:	mov	r2, r6
   15554:	mov	r1, r9
   15558:	str	r3, [sp]
   1555c:	mov	r3, r7
   15560:	bl	17164 <__assert_fail@plt+0x5a10>
   15564:	ldr	r1, [pc, #1604]	; 15bb0 <__assert_fail@plt+0x445c>
   15568:	mov	r0, r6
   1556c:	str	r1, [sp, #128]	; 0x80
   15570:	mov	r1, r7
   15574:	mov	r2, #0
   15578:	lsl	r3, r8, #31
   1557c:	lsrs	r1, r1, #1
   15580:	rrx	r0, r0
   15584:	orr	r6, r2, r0
   15588:	orr	r7, r3, r1
   1558c:	str	r2, [sp, #44]	; 0x2c
   15590:	mov	r3, r9
   15594:	mov	r2, r8
   15598:	lsrs	r3, r3, #1
   1559c:	rrx	r2, r2
   155a0:	ldrd	sl, [sp, #32]
   155a4:	strd	r2, [sp, #120]	; 0x78
   155a8:	mov	r8, r4
   155ac:	mov	r2, #2
   155b0:	mov	r3, #0
   155b4:	mov	r9, r5
   155b8:	strd	r6, [sp, #112]	; 0x70
   155bc:	strd	r2, [sp, #104]	; 0x68
   155c0:	add	r3, sp, #264	; 0x108
   155c4:	ldrd	r2, [r3]
   155c8:	orrs	r3, r2, r3
   155cc:	bne	15a04 <__assert_fail@plt+0x42b0>
   155d0:	ldrb	r3, [sp, #506]	; 0x1fa
   155d4:	cmp	r3, #0
   155d8:	beq	159f8 <__assert_fail@plt+0x42a4>
   155dc:	add	r3, sp, #264	; 0x108
   155e0:	mov	r2, #1
   155e4:	strd	r8, [sp, #136]	; 0x88
   155e8:	str	r3, [sp, #32]
   155ec:	strd	sl, [sp, #144]	; 0x90
   155f0:	str	r2, [sp, #16]
   155f4:	ldr	r1, [sp, #32]
   155f8:	ldrd	r2, [r1, #8]!
   155fc:	cmp	r3, #0
   15600:	cmpeq	r2, #2
   15604:	str	r1, [sp, #32]
   15608:	beq	157f8 <__assert_fail@plt+0x40a4>
   1560c:	lsrs	r1, r3, #1
   15610:	rrx	r0, r2
   15614:	ldr	ip, [pc, #1424]	; 15bac <__assert_fail@plt+0x4458>
   15618:	and	r0, r0, #127	; 0x7f
   1561c:	add	r0, ip, r0
   15620:	mov	r7, #0
   15624:	ldrb	r0, [r0, #708]	; 0x2c4
   15628:	mov	r6, r0
   1562c:	umull	r0, r1, r0, r0
   15630:	adds	r6, r6, r6
   15634:	mul	ip, r0, r3
   15638:	umull	r4, r5, r0, r2
   1563c:	mla	r1, r2, r1, ip
   15640:	adc	r7, r7, r7
   15644:	add	r5, r1, r5
   15648:	subs	r4, r6, r4
   1564c:	sbc	r5, r7, r5
   15650:	adds	r6, r4, r4
   15654:	adc	r7, r5, r5
   15658:	mul	r1, r4, r5
   1565c:	umull	r4, r5, r4, r4
   15660:	add	r5, r5, r1, lsl #1
   15664:	mul	ip, r4, r3
   15668:	umull	r0, r1, r4, r2
   1566c:	mla	ip, r2, r5, ip
   15670:	subs	r0, r6, r0
   15674:	add	r1, ip, r1
   15678:	sbc	r1, r7, r1
   1567c:	adds	r6, r0, r0
   15680:	adc	r7, r1, r1
   15684:	mul	ip, r0, r1
   15688:	umull	r0, r1, r0, r0
   1568c:	add	r1, r1, ip, lsl #1
   15690:	mul	ip, r0, r3
   15694:	umull	r4, r5, r0, r2
   15698:	mla	r1, r2, r1, ip
   1569c:	subs	r4, r6, r4
   156a0:	add	r5, r1, r5
   156a4:	ldrd	r0, [sp, #64]	; 0x40
   156a8:	sbc	r5, r7, r5
   156ac:	cmp	r1, r3
   156b0:	cmpeq	r0, r2
   156b4:	ldrd	r0, [sp, #88]	; 0x58
   156b8:	mul	ip, r0, r5
   156bc:	umull	r6, r7, r0, r4
   156c0:	mla	ip, r4, r1, ip
   156c4:	add	ip, ip, r7
   156c8:	mov	r7, ip
   156cc:	bcc	157e4 <__assert_fail@plt+0x4090>
   156d0:	umull	sl, fp, r3, r6
   156d4:	mov	r8, r2
   156d8:	strd	sl, [sp, #48]	; 0x30
   156dc:	mov	r9, #0
   156e0:	umull	sl, fp, r6, r8
   156e4:	mul	r2, r6, r9
   156e8:	mov	r1, #0
   156ec:	ldr	lr, [sp, #52]	; 0x34
   156f0:	mla	r2, r8, r1, r2
   156f4:	strd	sl, [sp, #96]	; 0x60
   156f8:	mla	r1, r3, r1, lr
   156fc:	umull	sl, fp, ip, r3
   15700:	ldr	r3, [sp, #100]	; 0x64
   15704:	str	r1, [sp, #52]	; 0x34
   15708:	add	r3, r2, r3
   1570c:	umull	r0, r1, ip, r8
   15710:	str	r3, [sp, #72]	; 0x48
   15714:	ldr	r3, [sp, #44]	; 0x2c
   15718:	mla	r1, ip, r9, r1
   1571c:	str	r3, [sp, #76]	; 0x4c
   15720:	ldrd	r2, [sp, #48]	; 0x30
   15724:	ldrd	r8, [sp, #72]	; 0x48
   15728:	adds	r2, r2, r0
   1572c:	adc	r3, r3, r1
   15730:	adds	r8, r8, r2
   15734:	adc	r9, r9, r3
   15738:	cmp	r1, r9
   1573c:	cmpeq	r0, r8
   15740:	mov	r3, r9
   15744:	bls	15750 <__assert_fail@plt+0x3ffc>
   15748:	adds	sl, sl, #0
   1574c:	adc	fp, fp, #1
   15750:	str	r3, [sp, #80]	; 0x50
   15754:	mov	r3, #0
   15758:	str	r3, [sp, #84]	; 0x54
   1575c:	ldrd	r0, [sp, #80]	; 0x50
   15760:	ldrd	r2, [sp, #64]	; 0x40
   15764:	strd	r6, [sp, #224]	; 0xe0
   15768:	subs	r2, r2, r0
   1576c:	sbc	r3, r3, r1
   15770:	subs	r0, r2, sl
   15774:	sbc	r1, r3, fp
   15778:	mul	ip, r0, r5
   1577c:	mov	r3, r1
   15780:	umull	r0, r1, r0, r4
   15784:	mla	r4, r4, r3, ip
   15788:	add	r1, r4, r1
   1578c:	strd	r0, [sp, #232]	; 0xe8
   15790:	add	r3, sp, #192	; 0xc0
   15794:	str	r3, [sp, #8]
   15798:	ldrd	r2, [sp, #56]	; 0x38
   1579c:	add	r1, sp, #176	; 0xb0
   157a0:	add	r0, sp, #248	; 0xf8
   157a4:	strd	r2, [sp]
   157a8:	add	r3, sp, #208	; 0xd0
   157ac:	add	r2, sp, #224	; 0xe0
   157b0:	bl	13a8c <__assert_fail@plt+0x2338>
   157b4:	ldrd	r2, [sp, #192]	; 0xc0
   157b8:	cmp	r1, r3
   157bc:	cmpeq	r0, r2
   157c0:	strd	r0, [sp, #240]	; 0xf0
   157c4:	beq	1580c <__assert_fail@plt+0x40b8>
   157c8:	ldrb	r3, [sp, #506]	; 0x1fa
   157cc:	ldr	r2, [sp, #16]
   157d0:	cmp	r3, r2
   157d4:	bls	159f8 <__assert_fail@plt+0x42a4>
   157d8:	add	r3, r2, #1
   157dc:	str	r3, [sp, #16]
   157e0:	b	155f4 <__assert_fail@plt+0x3ea0>
   157e4:	mov	r3, #0
   157e8:	strd	r6, [sp, #224]	; 0xe0
   157ec:	str	r3, [sp, #232]	; 0xe8
   157f0:	str	r3, [sp, #236]	; 0xec
   157f4:	b	15790 <__assert_fail@plt+0x403c>
   157f8:	ldrd	r2, [sp, #112]	; 0x70
   157fc:	strd	r2, [sp, #224]	; 0xe0
   15800:	ldrd	r2, [sp, #120]	; 0x78
   15804:	strd	r2, [sp, #232]	; 0xe8
   15808:	b	15790 <__assert_fail@plt+0x403c>
   1580c:	ldrd	r0, [sp, #248]	; 0xf8
   15810:	ldrd	r2, [sp, #200]	; 0xc8
   15814:	ldrb	lr, [sp, #506]	; 0x1fa
   15818:	ldr	r4, [sp, #16]
   1581c:	cmp	r1, r3
   15820:	cmpeq	r0, r2
   15824:	movne	ip, #1
   15828:	moveq	ip, #0
   1582c:	cmp	lr, r4
   15830:	bls	159e8 <__assert_fail@plt+0x4294>
   15834:	cmp	r1, r3
   15838:	ldr	r3, [sp, #16]
   1583c:	cmpeq	r0, r2
   15840:	add	r3, r3, #1
   15844:	str	r3, [sp, #16]
   15848:	bne	155f4 <__assert_fail@plt+0x3ea0>
   1584c:	ldrd	r8, [sp, #136]	; 0x88
   15850:	ldrd	sl, [sp, #144]	; 0x90
   15854:	ldr	r1, [sp, #128]	; 0x80
   15858:	mov	r3, #0
   1585c:	ldrb	r2, [r1, #1]!
   15860:	str	r1, [sp, #128]	; 0x80
   15864:	ldrd	r0, [sp, #104]	; 0x68
   15868:	adds	r0, r0, r2
   1586c:	adc	r1, r1, r3
   15870:	ldrd	r2, [sp, #24]
   15874:	strd	r0, [sp, #104]	; 0x68
   15878:	cmp	r3, r1
   1587c:	cmpeq	r2, r0
   15880:	bls	159c8 <__assert_fail@plt+0x4274>
   15884:	mov	r4, #0
   15888:	mov	r5, r4
   1588c:	mov	r2, r0
   15890:	mov	r3, r1
   15894:	mov	r6, #64	; 0x40
   15898:	mov	r7, #0
   1589c:	strd	r8, [sp, #16]
   158a0:	subs	r6, r6, #1
   158a4:	sbc	r7, r7, #0
   158a8:	mvn	r1, #0
   158ac:	mvn	r0, #0
   158b0:	cmp	r7, r1
   158b4:	cmpeq	r6, r0
   158b8:	beq	15954 <__assert_fail@plt+0x4200>
   158bc:	adds	r2, r2, r2
   158c0:	adc	r3, r3, r3
   158c4:	adds	r0, r4, r4
   158c8:	adc	r1, r5, r5
   158cc:	lsr	sl, r5, #31
   158d0:	ldrd	r4, [sp, #24]
   158d4:	mov	fp, #0
   158d8:	orr	r3, r3, fp
   158dc:	cmp	r5, r3
   158e0:	orr	r2, r2, sl
   158e4:	cmpeq	r4, r2
   158e8:	mov	r5, r1
   158ec:	mov	r4, r0
   158f0:	bcc	15918 <__assert_fail@plt+0x41c4>
   158f4:	ldrd	r8, [sp, #16]
   158f8:	moveq	ip, #1
   158fc:	movne	ip, fp
   15900:	cmp	r9, r1
   15904:	cmpeq	r8, r0
   15908:	movhi	ip, #0
   1590c:	andls	ip, ip, #1
   15910:	cmp	ip, fp
   15914:	beq	158a0 <__assert_fail@plt+0x414c>
   15918:	ldrd	r4, [sp, #16]
   1591c:	ldrd	r8, [sp, #24]
   15920:	cmp	r5, r1
   15924:	cmpeq	r4, r0
   15928:	movhi	r4, #1
   1592c:	movls	r4, #0
   15930:	ldr	r5, [sp, #44]	; 0x2c
   15934:	subs	r8, r2, r8
   15938:	sbc	r9, r3, r9
   1593c:	subs	r2, r8, r4
   15940:	sbc	r3, r9, r5
   15944:	ldrd	r4, [sp, #16]
   15948:	subs	r4, r0, r4
   1594c:	sbc	r5, r1, r5
   15950:	b	158a0 <__assert_fail@plt+0x414c>
   15954:	add	r1, sp, #192	; 0xc0
   15958:	str	r1, [sp, #12]
   1595c:	ldr	r1, [sp, #132]	; 0x84
   15960:	strd	r2, [sp, #184]	; 0xb8
   15964:	str	r1, [sp, #8]
   15968:	ldr	r1, [sp, #152]	; 0x98
   1596c:	add	r0, sp, #208	; 0xd0
   15970:	str	r1, [sp, #4]
   15974:	add	r1, sp, #176	; 0xb0
   15978:	str	r1, [sp]
   1597c:	ldrd	r2, [sp, #56]	; 0x38
   15980:	strd	r4, [sp, #176]	; 0xb0
   15984:	bl	14590 <__assert_fail@plt+0x2e3c>
   15988:	ldrd	r8, [sp, #16]
   1598c:	cmp	r0, #0
   15990:	beq	15b60 <__assert_fail@plt+0x440c>
   15994:	ldr	r3, [pc, #536]	; 15bb4 <__assert_fail@plt+0x4460>
   15998:	ldr	r2, [sp, #128]	; 0x80
   1599c:	cmp	r3, r2
   159a0:	bne	155c0 <__assert_fail@plt+0x3e6c>
   159a4:	mov	r2, #5
   159a8:	ldr	r1, [pc, #520]	; 15bb8 <__assert_fail@plt+0x4464>
   159ac:	mov	r0, #0
   159b0:	bl	11430 <dcgettext@plt>
   159b4:	mov	r1, #0
   159b8:	mov	r2, r0
   159bc:	mov	r0, r1
   159c0:	bl	11520 <error@plt>
   159c4:	bl	11748 <abort@plt>
   159c8:	mov	r2, #0
   159cc:	mov	r4, r0
   159d0:	mov	r5, r1
   159d4:	mov	r3, r2
   159d8:	mov	r6, #128	; 0x80
   159dc:	mov	r7, #0
   159e0:	strd	r8, [sp, #16]
   159e4:	b	158a0 <__assert_fail@plt+0x414c>
   159e8:	ldrd	r8, [sp, #136]	; 0x88
   159ec:	ldrd	sl, [sp, #144]	; 0x90
   159f0:	cmp	ip, #0
   159f4:	beq	15854 <__assert_fail@plt+0x4100>
   159f8:	ldr	r0, [sp, #156]	; 0x9c
   159fc:	add	sp, sp, #516	; 0x204
   15a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a04:	add	r3, sp, #256	; 0x100
   15a08:	ldr	r1, [pc, #412]	; 15bac <__assert_fail@plt+0x4458>
   15a0c:	ldrd	r6, [r3]
   15a10:	add	r3, sp, #192	; 0xc0
   15a14:	str	r3, [sp, #8]
   15a18:	ldrd	r2, [sp, #56]	; 0x38
   15a1c:	mov	r5, #0
   15a20:	strd	r2, [sp]
   15a24:	lsrs	r3, r7, #1
   15a28:	rrx	r2, r6
   15a2c:	and	r2, r2, #127	; 0x7f
   15a30:	add	r2, r1, r2
   15a34:	mov	r3, #0
   15a38:	ldrb	r0, [r2, #708]	; 0x2c4
   15a3c:	str	r3, [sp, #232]	; 0xe8
   15a40:	str	r3, [sp, #236]	; 0xec
   15a44:	mov	r4, r0
   15a48:	umull	r0, r1, r0, r0
   15a4c:	add	r3, sp, #208	; 0xd0
   15a50:	strd	r0, [sp, #16]
   15a54:	adds	r0, r4, r4
   15a58:	adc	r1, r5, r5
   15a5c:	ldrd	r4, [sp, #16]
   15a60:	ldr	ip, [sp, #20]
   15a64:	mul	r2, r4, r7
   15a68:	umull	r4, r5, r4, r6
   15a6c:	mla	r2, r6, ip, r2
   15a70:	subs	r0, r0, r4
   15a74:	add	r5, r2, r5
   15a78:	sbc	r1, r1, r5
   15a7c:	adds	r4, r0, r0
   15a80:	adc	r5, r1, r1
   15a84:	mul	r2, r0, r1
   15a88:	umull	r0, r1, r0, r0
   15a8c:	strd	r4, [sp, #16]
   15a90:	add	r1, r1, r2, lsl #1
   15a94:	mul	r2, r0, r7
   15a98:	umull	r4, r5, r0, r6
   15a9c:	mla	r2, r6, r1, r2
   15aa0:	ldrd	r0, [sp, #16]
   15aa4:	add	r5, r2, r5
   15aa8:	subs	r0, r0, r4
   15aac:	sbc	r1, r1, r5
   15ab0:	adds	r4, r0, r0
   15ab4:	adc	r5, r1, r1
   15ab8:	mul	r2, r0, r1
   15abc:	umull	r0, r1, r0, r0
   15ac0:	strd	r4, [sp, #16]
   15ac4:	add	r1, r1, r2, lsl #1
   15ac8:	mul	r2, r0, r7
   15acc:	umull	r4, r5, r0, r6
   15ad0:	mla	r6, r6, r1, r2
   15ad4:	ldrd	r0, [sp, #16]
   15ad8:	add	r5, r6, r5
   15adc:	ldrd	r6, [sp, #88]	; 0x58
   15ae0:	subs	r0, r0, r4
   15ae4:	mov	r4, r0
   15ae8:	sbc	r1, r1, r5
   15aec:	ldr	r0, [sp, #88]	; 0x58
   15af0:	mul	ip, r4, r7
   15af4:	mov	r5, r1
   15af8:	umull	r6, r7, r4, r6
   15afc:	mla	ip, r0, r5, ip
   15b00:	add	r2, sp, #224	; 0xe0
   15b04:	add	r7, ip, r7
   15b08:	add	r1, sp, #176	; 0xb0
   15b0c:	add	r0, sp, #248	; 0xf8
   15b10:	strd	r6, [sp, #224]	; 0xe0
   15b14:	bl	13a8c <__assert_fail@plt+0x2338>
   15b18:	ldrd	r2, [sp, #192]	; 0xc0
   15b1c:	cmp	r1, r3
   15b20:	cmpeq	r0, r2
   15b24:	strd	r0, [sp, #240]	; 0xf0
   15b28:	bne	155d0 <__assert_fail@plt+0x3e7c>
   15b2c:	ldrd	r0, [sp, #248]	; 0xf8
   15b30:	ldrd	r2, [sp, #200]	; 0xc8
   15b34:	ldrb	lr, [sp, #506]	; 0x1fa
   15b38:	cmp	r1, r3
   15b3c:	cmpeq	r0, r2
   15b40:	movne	ip, #1
   15b44:	moveq	ip, #0
   15b48:	cmp	lr, #0
   15b4c:	beq	159f0 <__assert_fail@plt+0x429c>
   15b50:	cmp	r1, r3
   15b54:	cmpeq	r0, r2
   15b58:	bne	155dc <__assert_fail@plt+0x3e88>
   15b5c:	b	15854 <__assert_fail@plt+0x4100>
   15b60:	str	r0, [sp, #156]	; 0x9c
   15b64:	ldr	r0, [sp, #156]	; 0x9c
   15b68:	add	sp, sp, #516	; 0x204
   15b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b70:	strd	r8, [sp, #176]	; 0xb0
   15b74:	mov	r4, r6
   15b78:	mov	r5, r7
   15b7c:	b	154fc <__assert_fail@plt+0x3da8>
   15b80:	mov	r2, #0
   15b84:	mov	r3, #64	; 0x40
   15b88:	str	r2, [sp, #132]	; 0x84
   15b8c:	mov	r6, r0
   15b90:	mov	r7, r1
   15b94:	mov	ip, r2
   15b98:	b	151a8 <__assert_fail@plt+0x3a54>
   15b9c:	mov	r3, #64	; 0x40
   15ba0:	str	r3, [sp, #132]	; 0x84
   15ba4:	mov	r1, #0
   15ba8:	b	15270 <__assert_fail@plt+0x3b1c>
   15bac:	ldrdeq	r2, [r2], -r0
   15bb0:	andeq	r2, r2, pc, ror #25
   15bb4:	andeq	r2, r2, fp, lsl #31
   15bb8:	muleq	r2, r0, lr
   15bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc0:	subs	r9, r1, #0
   15bc4:	sub	sp, sp, #292	; 0x124
   15bc8:	cmpeq	r0, #1
   15bcc:	mov	r8, r0
   15bd0:	strd	r2, [sp, #48]	; 0x30
   15bd4:	bls	17098 <__assert_fail@plt+0x5944>
   15bd8:	mov	r2, #0
   15bdc:	mov	r3, #0
   15be0:	mov	r6, #64	; 0x40
   15be4:	strd	r2, [sp, #104]	; 0x68
   15be8:	mov	r7, #0
   15bec:	mov	r2, #1
   15bf0:	mov	r3, #0
   15bf4:	strd	r2, [sp, #96]	; 0x60
   15bf8:	ldrd	r4, [sp, #104]	; 0x68
   15bfc:	ldrd	sl, [sp, #48]	; 0x30
   15c00:	mov	ip, #0
   15c04:	subs	r6, r6, #1
   15c08:	sbc	r7, r7, #0
   15c0c:	mvn	r3, #0
   15c10:	mvn	r2, #0
   15c14:	cmp	r7, r3
   15c18:	cmpeq	r6, r2
   15c1c:	beq	15cc8 <__assert_fail@plt+0x4574>
   15c20:	lsr	r3, r5, #31
   15c24:	str	r3, [sp, #56]	; 0x38
   15c28:	mov	r3, #0
   15c2c:	str	r3, [sp, #60]	; 0x3c
   15c30:	ldrd	r2, [sp, #96]	; 0x60
   15c34:	adds	r0, r2, r2
   15c38:	adc	r1, r3, r3
   15c3c:	ldrd	r2, [sp, #56]	; 0x38
   15c40:	orr	r2, r2, r0
   15c44:	orr	r3, r3, r1
   15c48:	mov	r0, r2
   15c4c:	mov	r1, r3
   15c50:	adds	r2, r4, r4
   15c54:	adc	r3, r5, r5
   15c58:	cmp	r9, r1
   15c5c:	cmpeq	r8, r0
   15c60:	strd	r0, [sp, #96]	; 0x60
   15c64:	mov	r4, r2
   15c68:	mov	r5, r3
   15c6c:	bcc	15c90 <__assert_fail@plt+0x453c>
   15c70:	moveq	lr, #1
   15c74:	movne	lr, #0
   15c78:	cmp	r3, fp
   15c7c:	cmpeq	r2, sl
   15c80:	movcc	lr, #0
   15c84:	andcs	lr, lr, #1
   15c88:	cmp	lr, #0
   15c8c:	beq	15c04 <__assert_fail@plt+0x44b0>
   15c90:	cmp	r3, fp
   15c94:	cmpeq	r2, sl
   15c98:	movcc	r4, #1
   15c9c:	movcs	r4, #0
   15ca0:	subs	r0, r0, r8
   15ca4:	sbc	r1, r1, r9
   15ca8:	subs	r0, r0, r4
   15cac:	sbc	r1, r1, ip
   15cb0:	subs	r2, r2, sl
   15cb4:	sbc	r3, r3, fp
   15cb8:	strd	r0, [sp, #96]	; 0x60
   15cbc:	mov	r4, r2
   15cc0:	mov	r5, r3
   15cc4:	b	15c04 <__assert_fail@plt+0x44b0>
   15cc8:	ldrd	r0, [sp, #96]	; 0x60
   15ccc:	adds	r2, r4, r4
   15cd0:	adc	r3, r5, r5
   15cd4:	mov	r7, r5
   15cd8:	mov	r6, r4
   15cdc:	adds	r4, r0, r0
   15ce0:	adc	r5, r1, r1
   15ce4:	mov	r1, r7
   15ce8:	cmp	r1, r3
   15cec:	mov	r0, r6
   15cf0:	cmpeq	r0, r2
   15cf4:	strd	r2, [sp, #72]	; 0x48
   15cf8:	strd	r6, [sp, #104]	; 0x68
   15cfc:	mov	r7, r3
   15d00:	movhi	r3, #1
   15d04:	movls	r3, #0
   15d08:	adds	r0, r4, r3
   15d0c:	adc	r1, r5, #0
   15d10:	cmp	r9, r1
   15d14:	cmpeq	r8, r0
   15d18:	strd	sl, [sp, #48]	; 0x30
   15d1c:	strd	r0, [sp, #64]	; 0x40
   15d20:	bcc	16134 <__assert_fail@plt+0x49e0>
   15d24:	moveq	r3, #1
   15d28:	movne	r3, #0
   15d2c:	cmp	fp, r7
   15d30:	cmpeq	sl, r2
   15d34:	movhi	r3, #0
   15d38:	andls	r3, r3, #1
   15d3c:	cmp	r3, #0
   15d40:	bne	16134 <__assert_fail@plt+0x49e0>
   15d44:	mov	r3, #1
   15d48:	str	r3, [sp, #88]	; 0x58
   15d4c:	str	r3, [sp, #92]	; 0x5c
   15d50:	ldrd	r2, [sp, #64]	; 0x40
   15d54:	mov	r6, r2
   15d58:	mov	r7, r3
   15d5c:	strd	r2, [sp, #112]	; 0x70
   15d60:	ldrd	r2, [sp, #72]	; 0x48
   15d64:	strd	r2, [sp, #120]	; 0x78
   15d68:	mov	r4, r2
   15d6c:	ldr	r2, [sp, #328]	; 0x148
   15d70:	mov	r5, r3
   15d74:	mov	r3, #0
   15d78:	strd	r2, [sp, #80]	; 0x50
   15d7c:	orrs	r3, r8, r9
   15d80:	movne	r3, #1
   15d84:	moveq	r3, #0
   15d88:	cmp	fp, #0
   15d8c:	cmpeq	sl, #1
   15d90:	orrne	r3, r3, #1
   15d94:	cmp	r3, #0
   15d98:	beq	1659c <__assert_fail@plt+0x4e48>
   15d9c:	lsrs	r1, fp, #1
   15da0:	rrx	r0, sl
   15da4:	ldr	r1, [pc, #2164]	; 16620 <__assert_fail@plt+0x4ecc>
   15da8:	and	r2, r0, #127	; 0x7f
   15dac:	add	r2, r1, r2
   15db0:	mov	r3, #0
   15db4:	ldrb	r0, [r2, #708]	; 0x2c4
   15db8:	and	r2, sl, #1
   15dbc:	strd	r4, [sp, #136]	; 0x88
   15dc0:	strd	r2, [sp, #200]	; 0xc8
   15dc4:	mov	r2, r0
   15dc8:	umull	r0, r1, r0, r0
   15dcc:	strd	r6, [sp, #144]	; 0x90
   15dd0:	mov	r3, #0
   15dd4:	strd	r0, [sp, #56]	; 0x38
   15dd8:	adds	r0, r2, r2
   15ddc:	adc	r1, r3, r3
   15de0:	strd	r0, [sp, #48]	; 0x30
   15de4:	ldrd	r0, [sp, #56]	; 0x38
   15de8:	mul	ip, r0, fp
   15dec:	umull	r2, r3, r0, sl
   15df0:	mla	r1, sl, r1, ip
   15df4:	add	r3, r1, r3
   15df8:	ldrd	r0, [sp, #48]	; 0x30
   15dfc:	subs	r0, r0, r2
   15e00:	sbc	r1, r1, r3
   15e04:	mov	r2, r0
   15e08:	adds	r0, r0, r0
   15e0c:	mov	r3, r1
   15e10:	adc	r1, r1, r1
   15e14:	strd	r0, [sp, #48]	; 0x30
   15e18:	mul	r1, r2, r3
   15e1c:	umull	r2, r3, r2, r2
   15e20:	add	r3, r3, r1, lsl #1
   15e24:	mul	ip, r2, fp
   15e28:	umull	r0, r1, r2, sl
   15e2c:	mla	r3, sl, r3, ip
   15e30:	add	r1, r3, r1
   15e34:	ldrd	r2, [sp, #48]	; 0x30
   15e38:	subs	r2, r2, r0
   15e3c:	sbc	r3, r3, r1
   15e40:	mov	r0, r2
   15e44:	adds	r2, r2, r2
   15e48:	mov	r1, r3
   15e4c:	adc	r3, r3, r3
   15e50:	strd	r2, [sp, #48]	; 0x30
   15e54:	mul	r3, r0, r1
   15e58:	umull	r0, r1, r0, r0
   15e5c:	add	r1, r1, r3, lsl #1
   15e60:	mul	ip, r0, fp
   15e64:	umull	r2, r3, r0, sl
   15e68:	mla	r1, sl, r1, ip
   15e6c:	add	r3, r1, r3
   15e70:	ldrd	r0, [sp, #48]	; 0x30
   15e74:	subs	r0, r0, r2
   15e78:	sbc	r1, r1, r3
   15e7c:	strd	r0, [sp, #56]	; 0x38
   15e80:	ldrd	r0, [sp, #72]	; 0x48
   15e84:	ldrd	r2, [sp, #56]	; 0x38
   15e88:	strd	sl, [sp, #32]
   15e8c:	strd	r0, [sp]
   15e90:	strd	r2, [sp, #40]	; 0x28
   15e94:	mov	r2, r0
   15e98:	mov	r3, r1
   15e9c:	strd	r8, [sp, #24]
   15ea0:	strd	r2, [sp, #16]
   15ea4:	ldrd	r2, [sp, #64]	; 0x40
   15ea8:	add	r0, sp, #280	; 0x118
   15eac:	strd	r2, [sp, #8]
   15eb0:	bl	11af0 <__assert_fail@plt+0x39c>
   15eb4:	ldrd	r2, [sp, #80]	; 0x50
   15eb8:	adds	r2, r2, r0
   15ebc:	adc	r3, r3, r1
   15ec0:	mov	r5, r3
   15ec4:	add	r3, sp, #280	; 0x118
   15ec8:	cmp	r1, r5
   15ecc:	ldrd	r6, [r3]
   15ed0:	cmpeq	r0, r2
   15ed4:	movhi	r1, #1
   15ed8:	movls	r1, #0
   15edc:	mov	r4, r2
   15ee0:	adds	r2, r6, r1
   15ee4:	adc	r3, r7, #0
   15ee8:	cmp	r9, r3
   15eec:	cmpeq	r8, r2
   15ef0:	strd	r4, [sp, #72]	; 0x48
   15ef4:	strd	r2, [sp, #64]	; 0x40
   15ef8:	bcc	15f1c <__assert_fail@plt+0x47c8>
   15efc:	moveq	r3, #1
   15f00:	movne	r3, #0
   15f04:	cmp	fp, r5
   15f08:	cmpeq	sl, r4
   15f0c:	movhi	r3, #0
   15f10:	andls	r3, r3, #1
   15f14:	cmp	r3, #0
   15f18:	beq	15f5c <__assert_fail@plt+0x4808>
   15f1c:	ldrd	r0, [sp, #64]	; 0x40
   15f20:	cmp	fp, r5
   15f24:	cmpeq	sl, r4
   15f28:	movhi	r2, #1
   15f2c:	movls	r2, #0
   15f30:	subs	r0, r0, r8
   15f34:	mov	r3, #0
   15f38:	sbc	r1, r1, r9
   15f3c:	subs	r0, r0, r2
   15f40:	sbc	r1, r1, r3
   15f44:	subs	r2, r4, sl
   15f48:	sbc	r3, r5, fp
   15f4c:	mov	r4, r2
   15f50:	mov	r5, r3
   15f54:	strd	r0, [sp, #64]	; 0x40
   15f58:	strd	r2, [sp, #72]	; 0x48
   15f5c:	ldrd	r0, [sp, #120]	; 0x78
   15f60:	ldrd	r6, [sp, #64]	; 0x40
   15f64:	subs	r2, r0, r4
   15f68:	sbc	r3, r1, r5
   15f6c:	strd	r2, [sp, #48]	; 0x30
   15f70:	ldrd	r2, [sp, #112]	; 0x70
   15f74:	subs	r2, r2, r6
   15f78:	sbc	r3, r3, r7
   15f7c:	cmp	r5, r1
   15f80:	cmpeq	r4, r0
   15f84:	movhi	r1, #1
   15f88:	movls	r1, #0
   15f8c:	subs	r6, r2, r1
   15f90:	sbc	r7, r3, #0
   15f94:	cmp	r6, #0
   15f98:	sbcs	r3, r7, #0
   15f9c:	blt	16208 <__assert_fail@plt+0x4ab4>
   15fa0:	ldrd	r2, [sp, #56]	; 0x38
   15fa4:	strd	sl, [sp, #32]
   15fa8:	strd	r8, [sp, #24]
   15fac:	strd	r2, [sp, #40]	; 0x28
   15fb0:	ldrd	r2, [sp, #48]	; 0x30
   15fb4:	strd	r6, [sp, #8]
   15fb8:	add	r0, sp, #280	; 0x118
   15fbc:	strd	r2, [sp, #16]
   15fc0:	ldrd	r2, [sp, #104]	; 0x68
   15fc4:	strd	r2, [sp]
   15fc8:	ldrd	r2, [sp, #96]	; 0x60
   15fcc:	bl	11af0 <__assert_fail@plt+0x39c>
   15fd0:	ldr	r3, [sp, #92]	; 0x5c
   15fd4:	and	r3, r3, #31
   15fd8:	cmp	r3, #1
   15fdc:	add	r3, sp, #280	; 0x118
   15fe0:	ldrd	r2, [r3]
   15fe4:	strd	r2, [sp, #96]	; 0x60
   15fe8:	strd	r0, [sp, #104]	; 0x68
   15fec:	beq	16190 <__assert_fail@plt+0x4a3c>
   15ff0:	ldr	r3, [sp, #92]	; 0x5c
   15ff4:	subs	r3, r3, #1
   15ff8:	str	r3, [sp, #92]	; 0x5c
   15ffc:	bne	15e80 <__assert_fail@plt+0x472c>
   16000:	ldr	r2, [sp, #88]	; 0x58
   16004:	cmp	r2, #0
   16008:	lsl	r2, r2, #1
   1600c:	str	r2, [sp, #128]	; 0x80
   16010:	beq	165ec <__assert_fail@plt+0x4e98>
   16014:	ldrd	r0, [sp, #64]	; 0x40
   16018:	ldrd	r4, [sp, #72]	; 0x48
   1601c:	strd	r8, [sp, #48]	; 0x30
   16020:	mov	r9, r3
   16024:	ldrd	r2, [sp, #56]	; 0x38
   16028:	strd	r4, [sp, #16]
   1602c:	strd	r0, [sp, #8]
   16030:	strd	r2, [sp, #40]	; 0x28
   16034:	ldrd	r2, [sp, #48]	; 0x30
   16038:	strd	r4, [sp]
   1603c:	strd	sl, [sp, #32]
   16040:	strd	r2, [sp, #24]
   16044:	mov	r2, r0
   16048:	mov	r3, r1
   1604c:	add	r0, sp, #280	; 0x118
   16050:	bl	11af0 <__assert_fail@plt+0x39c>
   16054:	ldrd	r4, [sp, #80]	; 0x50
   16058:	add	r3, sp, #280	; 0x118
   1605c:	ldrd	r6, [r3]
   16060:	adds	r4, r4, r0
   16064:	adc	r5, r5, r1
   16068:	cmp	r1, r5
   1606c:	cmpeq	r0, r4
   16070:	movhi	r3, #1
   16074:	movls	r3, #0
   16078:	adds	r0, r6, r3
   1607c:	ldrd	r2, [sp, #48]	; 0x30
   16080:	adc	r1, r7, #0
   16084:	cmp	r3, r1
   16088:	cmpeq	r2, r0
   1608c:	bcc	160b0 <__assert_fail@plt+0x495c>
   16090:	moveq	r3, #1
   16094:	movne	r3, #0
   16098:	cmp	fp, r5
   1609c:	cmpeq	sl, r4
   160a0:	movhi	r3, #0
   160a4:	andls	r3, r3, #1
   160a8:	cmp	r3, #0
   160ac:	beq	160e0 <__assert_fail@plt+0x498c>
   160b0:	ldrd	r6, [sp, #48]	; 0x30
   160b4:	cmp	fp, r5
   160b8:	cmpeq	sl, r4
   160bc:	movhi	r2, #1
   160c0:	movls	r2, #0
   160c4:	subs	r6, r0, r6
   160c8:	sbc	r7, r1, r7
   160cc:	mov	r3, #0
   160d0:	subs	r0, r6, r2
   160d4:	sbc	r1, r7, r3
   160d8:	subs	r4, r4, sl
   160dc:	sbc	r5, r5, fp
   160e0:	ldr	r3, [sp, #88]	; 0x58
   160e4:	add	r9, r9, #1
   160e8:	cmp	r3, r9
   160ec:	bne	16024 <__assert_fail@plt+0x48d0>
   160f0:	ldrd	r2, [sp, #64]	; 0x40
   160f4:	str	r9, [sp, #92]	; 0x5c
   160f8:	strd	r4, [sp, #136]	; 0x88
   160fc:	strd	r2, [sp, #112]	; 0x70
   16100:	ldrd	r2, [sp, #72]	; 0x48
   16104:	strd	r0, [sp, #144]	; 0x90
   16108:	ldrd	r8, [sp, #48]	; 0x30
   1610c:	strd	r2, [sp, #120]	; 0x78
   16110:	ldr	r3, [sp, #128]	; 0x80
   16114:	mov	r2, r0
   16118:	str	r3, [sp, #88]	; 0x58
   1611c:	mov	r3, r1
   16120:	strd	r2, [sp, #64]	; 0x40
   16124:	mov	r2, r4
   16128:	mov	r3, r5
   1612c:	strd	r2, [sp, #72]	; 0x48
   16130:	b	15e80 <__assert_fail@plt+0x472c>
   16134:	ldrd	r0, [sp, #72]	; 0x48
   16138:	ldrd	r4, [sp, #48]	; 0x30
   1613c:	ldrd	sl, [sp, #48]	; 0x30
   16140:	cmp	r5, r1
   16144:	cmpeq	r4, r0
   16148:	ldrd	r4, [sp, #64]	; 0x40
   1614c:	movhi	r2, #1
   16150:	movls	r2, #0
   16154:	subs	r4, r4, r8
   16158:	mov	r3, #0
   1615c:	sbc	r5, r5, r9
   16160:	subs	r4, r4, r2
   16164:	sbc	r5, r5, r3
   16168:	mov	r2, r0
   1616c:	mov	r3, r1
   16170:	ldrd	r0, [sp, #48]	; 0x30
   16174:	strd	r4, [sp, #64]	; 0x40
   16178:	subs	r0, r2, r0
   1617c:	sbc	r1, r3, r1
   16180:	mov	r2, r0
   16184:	mov	r3, r1
   16188:	strd	r2, [sp, #72]	; 0x48
   1618c:	b	15d44 <__assert_fail@plt+0x45f0>
   16190:	ldrd	r2, [sp, #200]	; 0xc8
   16194:	orrs	r3, r2, r3
   16198:	beq	17150 <__assert_fail@plt+0x59fc>
   1619c:	ldrd	r4, [sp, #96]	; 0x60
   161a0:	orr	r2, r0, r4
   161a4:	orr	r3, r1, r5
   161a8:	orrs	ip, r2, r3
   161ac:	beq	1623c <__assert_fail@plt+0x4ae8>
   161b0:	strd	r0, [sp]
   161b4:	mov	r2, r4
   161b8:	mov	r3, r5
   161bc:	strd	sl, [sp, #16]
   161c0:	strd	r8, [sp, #8]
   161c4:	add	r0, sp, #272	; 0x110
   161c8:	bl	126d4 <__assert_fail@plt+0xf80>
   161cc:	ldr	r3, [sp, #276]	; 0x114
   161d0:	ldr	r2, [sp, #272]	; 0x110
   161d4:	orrs	r3, r2, r3
   161d8:	movne	r3, #1
   161dc:	moveq	r3, #0
   161e0:	cmp	r1, #0
   161e4:	cmpeq	r0, #1
   161e8:	orrne	r3, r3, #1
   161ec:	cmp	r3, #0
   161f0:	bne	17134 <__assert_fail@plt+0x59e0>
   161f4:	ldrd	r2, [sp, #64]	; 0x40
   161f8:	strd	r2, [sp, #144]	; 0x90
   161fc:	ldrd	r2, [sp, #72]	; 0x48
   16200:	strd	r2, [sp, #136]	; 0x88
   16204:	b	15ff0 <__assert_fail@plt+0x489c>
   16208:	ldrd	r4, [sp, #48]	; 0x30
   1620c:	adds	r0, r4, sl
   16210:	adc	r1, r5, fp
   16214:	adds	r2, r6, r8
   16218:	adc	r3, r7, r9
   1621c:	cmp	r5, r1
   16220:	cmpeq	r4, r0
   16224:	movhi	ip, #1
   16228:	movls	ip, #0
   1622c:	adds	r6, r2, ip
   16230:	strd	r0, [sp, #48]	; 0x30
   16234:	adc	r7, r3, #0
   16238:	b	15fa0 <__assert_fail@plt+0x484c>
   1623c:	ldrd	r6, [sp, #144]	; 0x90
   16240:	add	r1, sp, #272	; 0x110
   16244:	ldrd	r4, [sp, #136]	; 0x88
   16248:	strd	r2, [sp, #128]	; 0x80
   1624c:	strd	r8, [r1]
   16250:	strd	r2, [sp, #96]	; 0x60
   16254:	strd	r6, [sp, #104]	; 0x68
   16258:	strd	sl, [sp, #48]	; 0x30
   1625c:	b	162ac <__assert_fail@plt+0x4b58>
   16260:	ldrd	r0, [sp, #48]	; 0x30
   16264:	strd	r8, [sp, #8]
   16268:	strd	r0, [sp, #16]
   1626c:	mov	r0, r2
   16270:	mov	r1, r3
   16274:	mov	r2, sl
   16278:	strd	r0, [sp]
   1627c:	mov	r3, fp
   16280:	add	r0, sp, #272	; 0x110
   16284:	bl	126d4 <__assert_fail@plt+0xf80>
   16288:	mov	r3, r1
   1628c:	add	r1, sp, #272	; 0x110
   16290:	mov	r2, r0
   16294:	ldrd	r0, [r1]
   16298:	orrs	ip, r0, r1
   1629c:	bne	1640c <__assert_fail@plt+0x4cb8>
   162a0:	cmp	r3, #0
   162a4:	cmpeq	r2, #1
   162a8:	bne	16624 <__assert_fail@plt+0x4ed0>
   162ac:	ldrd	r2, [sp, #56]	; 0x38
   162b0:	strd	r4, [sp, #16]
   162b4:	strd	r4, [sp]
   162b8:	strd	r2, [sp, #40]	; 0x28
   162bc:	ldrd	r2, [sp, #48]	; 0x30
   162c0:	strd	r8, [sp, #24]
   162c4:	add	r0, sp, #280	; 0x118
   162c8:	strd	r2, [sp, #32]
   162cc:	ldrd	r2, [sp, #104]	; 0x68
   162d0:	strd	r2, [sp, #8]
   162d4:	bl	11af0 <__assert_fail@plt+0x39c>
   162d8:	ldrd	r4, [sp, #80]	; 0x50
   162dc:	add	r3, sp, #280	; 0x118
   162e0:	ldrd	r6, [r3]
   162e4:	adds	r4, r4, r0
   162e8:	adc	r5, r5, r1
   162ec:	cmp	r1, r5
   162f0:	cmpeq	r0, r4
   162f4:	movhi	r3, #1
   162f8:	movls	r3, #0
   162fc:	adds	r0, r6, r3
   16300:	adc	r1, r7, #0
   16304:	mov	r2, r0
   16308:	mov	r3, r1
   1630c:	cmp	r9, r1
   16310:	cmpeq	r8, r0
   16314:	strd	r2, [sp, #104]	; 0x68
   16318:	bcc	16340 <__assert_fail@plt+0x4bec>
   1631c:	ldrd	r0, [sp, #48]	; 0x30
   16320:	moveq	r3, #1
   16324:	movne	r3, #0
   16328:	cmp	r1, r5
   1632c:	cmpeq	r0, r4
   16330:	movhi	r3, #0
   16334:	andls	r3, r3, #1
   16338:	cmp	r3, #0
   1633c:	beq	16384 <__assert_fail@plt+0x4c30>
   16340:	ldrd	r2, [sp, #48]	; 0x30
   16344:	ldrd	r6, [sp, #104]	; 0x68
   16348:	cmp	r3, r5
   1634c:	cmpeq	r2, r4
   16350:	movhi	r2, #1
   16354:	movls	r2, #0
   16358:	subs	r6, r6, r8
   1635c:	mov	r3, #0
   16360:	sbc	r7, r7, r9
   16364:	subs	r6, r6, r2
   16368:	sbc	r7, r7, r3
   1636c:	ldrd	r2, [sp, #48]	; 0x30
   16370:	strd	r6, [sp, #104]	; 0x68
   16374:	subs	r2, r4, r2
   16378:	sbc	r3, r5, r3
   1637c:	mov	r4, r2
   16380:	mov	r5, r3
   16384:	ldrd	r0, [sp, #120]	; 0x78
   16388:	ldrd	sl, [sp, #104]	; 0x68
   1638c:	subs	r2, r0, r4
   16390:	sbc	r3, r1, r5
   16394:	mov	r6, r2
   16398:	mov	r7, r3
   1639c:	ldrd	r2, [sp, #112]	; 0x70
   163a0:	subs	sl, r2, sl
   163a4:	sbc	fp, r3, fp
   163a8:	cmp	r1, r5
   163ac:	cmpeq	r0, r4
   163b0:	movcc	r1, #1
   163b4:	movcs	r1, #0
   163b8:	subs	sl, sl, r1
   163bc:	sbc	fp, fp, #0
   163c0:	mov	r3, fp
   163c4:	cmp	sl, #0
   163c8:	sbcs	r3, r3, #0
   163cc:	blt	165a4 <__assert_fail@plt+0x4e50>
   163d0:	mov	r2, r6
   163d4:	mov	r3, r7
   163d8:	orr	r6, sl, r2
   163dc:	orr	r7, fp, r3
   163e0:	mov	r0, r6
   163e4:	mov	r1, r7
   163e8:	orrs	r1, r0, r1
   163ec:	bne	16260 <__assert_fail@plt+0x4b0c>
   163f0:	add	ip, sp, #272	; 0x110
   163f4:	mov	r0, r8
   163f8:	mov	r1, r9
   163fc:	strd	r8, [ip]
   16400:	orrs	ip, r0, r1
   16404:	ldrd	r2, [sp, #48]	; 0x30
   16408:	beq	162a0 <__assert_fail@plt+0x4b4c>
   1640c:	ldrd	r6, [sp, #48]	; 0x30
   16410:	cmp	r9, r1
   16414:	mov	r5, r3
   16418:	cmpeq	r8, r0
   1641c:	moveq	r3, #1
   16420:	movne	r3, #0
   16424:	cmp	r7, r5
   16428:	cmpeq	r6, r2
   1642c:	movne	r3, #0
   16430:	andeq	r3, r3, #1
   16434:	cmp	r3, #0
   16438:	mov	sl, r2
   1643c:	bne	17104 <__assert_fail@plt+0x59b0>
   16440:	mov	r3, r5
   16444:	mov	r8, r2
   16448:	ldr	ip, [pc, #464]	; 16620 <__assert_fail@plt+0x4ecc>
   1644c:	lsrs	r3, r3, #1
   16450:	rrx	r2, r2
   16454:	and	r2, r2, #127	; 0x7f
   16458:	add	r3, ip, r2
   1645c:	mov	r9, r5
   16460:	ldrb	r4, [r3, #708]	; 0x2c4
   16464:	mov	r3, r5
   16468:	mov	r2, sl
   1646c:	mov	r6, r4
   16470:	umull	r4, r5, r4, r4
   16474:	ldr	lr, [sp, #52]	; 0x34
   16478:	mov	sl, r8
   1647c:	mul	ip, r4, r9
   16480:	mov	fp, r9
   16484:	umull	r8, r9, r4, r8
   16488:	mla	ip, r2, r5, ip
   1648c:	adds	r6, r6, r6
   16490:	mov	r7, #0
   16494:	adc	r7, r7, r7
   16498:	add	r9, ip, r9
   1649c:	subs	r4, r6, r8
   164a0:	sbc	r5, r7, r9
   164a4:	adds	r6, r4, r4
   164a8:	adc	r7, r5, r5
   164ac:	mul	ip, r4, r5
   164b0:	umull	r4, r5, r4, r4
   164b4:	add	r5, r5, ip, lsl #1
   164b8:	mul	ip, r4, r3
   164bc:	umull	r8, r9, r4, r2
   164c0:	mla	ip, r2, r5, ip
   164c4:	subs	r4, r6, r8
   164c8:	add	r9, ip, r9
   164cc:	sbc	r5, r7, r9
   164d0:	adds	r6, r4, r4
   164d4:	adc	r7, r5, r5
   164d8:	mul	ip, r4, r5
   164dc:	umull	r4, r5, r4, r4
   164e0:	add	r5, r5, ip, lsl #1
   164e4:	mul	ip, r4, r3
   164e8:	umull	r8, r9, r4, r2
   164ec:	mla	ip, r2, r5, ip
   164f0:	subs	r4, r6, r8
   164f4:	add	r9, ip, r9
   164f8:	ldr	ip, [sp, #48]	; 0x30
   164fc:	sbc	r5, r7, r9
   16500:	mul	ip, ip, r5
   16504:	mla	ip, r4, lr, ip
   16508:	ldr	lr, [sp, #48]	; 0x30
   1650c:	umull	r4, r5, lr, r4
   16510:	strd	r4, [sp, #48]	; 0x30
   16514:	ldr	lr, [sp, #52]	; 0x34
   16518:	add	ip, ip, lr
   1651c:	str	ip, [sp, #52]	; 0x34
   16520:	bl	15110 <__assert_fail@plt+0x39bc>
   16524:	add	r3, sp, #272	; 0x110
   16528:	cmp	r0, #0
   1652c:	ldrd	r0, [r3]
   16530:	bne	1704c <__assert_fail@plt+0x58f8>
   16534:	ldr	r3, [sp, #328]	; 0x148
   16538:	mov	r2, sl
   1653c:	add	ip, r3, #1
   16540:	ldr	r3, [sp, #332]	; 0x14c
   16544:	str	ip, [sp]
   16548:	str	r3, [sp, #4]
   1654c:	mov	r3, fp
   16550:	bl	15bbc <__assert_fail@plt+0x4468>
   16554:	ldrd	r2, [sp, #48]	; 0x30
   16558:	cmp	r3, #0
   1655c:	cmpeq	r2, #1
   16560:	bls	1658c <__assert_fail@plt+0x4e38>
   16564:	mov	r0, r2
   16568:	mov	r1, r3
   1656c:	add	r3, pc, #164	; 0xa4
   16570:	ldrd	r2, [r3]
   16574:	cmp	r1, r3
   16578:	cmpeq	r0, r2
   1657c:	bls	170ec <__assert_fail@plt+0x5998>
   16580:	bl	17c54 <__assert_fail@plt+0x6500>
   16584:	cmp	r0, #0
   16588:	bne	170ec <__assert_fail@plt+0x5998>
   1658c:	ldr	r3, [sp, #332]	; 0x14c
   16590:	ldr	r2, [sp, #328]	; 0x148
   16594:	ldrd	r0, [sp, #48]	; 0x30
   16598:	bl	185d4 <__assert_fail@plt+0x6e80>
   1659c:	add	sp, sp, #292	; 0x124
   165a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165a4:	ldrd	r2, [sp, #48]	; 0x30
   165a8:	adds	r2, r2, r6
   165ac:	adc	r3, r3, r7
   165b0:	mov	r0, r2
   165b4:	mov	r1, r3
   165b8:	adds	r2, sl, r8
   165bc:	adc	r3, fp, r9
   165c0:	cmp	r7, r1
   165c4:	cmpeq	r6, r0
   165c8:	movhi	ip, #1
   165cc:	movls	ip, #0
   165d0:	mov	r6, r0
   165d4:	adds	r0, r2, ip
   165d8:	mov	r7, r1
   165dc:	adc	r1, r3, #0
   165e0:	mov	sl, r0
   165e4:	mov	fp, r1
   165e8:	b	163d0 <__assert_fail@plt+0x4c7c>
   165ec:	ldr	r3, [sp, #88]	; 0x58
   165f0:	mov	r1, r2
   165f4:	str	r3, [sp, #92]	; 0x5c
   165f8:	ldrd	r2, [sp, #64]	; 0x40
   165fc:	str	r1, [sp, #88]	; 0x58
   16600:	strd	r2, [sp, #144]	; 0x90
   16604:	strd	r2, [sp, #112]	; 0x70
   16608:	ldrd	r2, [sp, #72]	; 0x48
   1660c:	strd	r2, [sp, #136]	; 0x88
   16610:	strd	r2, [sp, #120]	; 0x78
   16614:	b	15e80 <__assert_fail@plt+0x472c>
   16618:	cmneq	sp, r8, ror sp
   1661c:	andeq	r0, r0, r0
   16620:	ldrdeq	r2, [r2], -r0
   16624:	strd	r2, [sp, #56]	; 0x38
   16628:	strd	r0, [sp, #144]	; 0x90
   1662c:	lsrs	r3, r3, #1
   16630:	rrx	r2, r2
   16634:	ldr	r1, [pc, #-28]	; 16620 <__assert_fail@plt+0x4ecc>
   16638:	and	r2, r2, #127	; 0x7f
   1663c:	add	ip, r1, r2
   16640:	ldrd	sl, [sp, #48]	; 0x30
   16644:	ldrb	ip, [ip, #708]	; 0x2c4
   16648:	mov	r3, #0
   1664c:	ldrd	r6, [sp, #104]	; 0x68
   16650:	ldr	lr, [sp, #56]	; 0x38
   16654:	umull	r0, r1, ip, ip
   16658:	strd	r0, [sp, #48]	; 0x30
   1665c:	adds	r0, ip, ip
   16660:	adc	r1, r3, r3
   16664:	ldr	ip, [sp, #60]	; 0x3c
   16668:	strd	r0, [sp, #104]	; 0x68
   1666c:	ldrd	r0, [sp, #48]	; 0x30
   16670:	mul	ip, r0, ip
   16674:	umull	r2, r3, r0, lr
   16678:	mla	ip, lr, r1, ip
   1667c:	strd	r2, [sp, #48]	; 0x30
   16680:	add	r3, ip, r3
   16684:	str	r3, [sp, #52]	; 0x34
   16688:	ldrd	r0, [sp, #48]	; 0x30
   1668c:	ldrd	r2, [sp, #104]	; 0x68
   16690:	subs	r2, r2, r0
   16694:	sbc	r3, r3, r1
   16698:	mov	r0, r2
   1669c:	mov	r1, r3
   166a0:	adds	r2, r2, r2
   166a4:	mul	ip, r0, r1
   166a8:	umull	r0, r1, r0, r0
   166ac:	adc	r3, r3, r3
   166b0:	strd	r0, [sp, #48]	; 0x30
   166b4:	strd	r2, [sp, #104]	; 0x68
   166b8:	add	r3, r1, ip, lsl #1
   166bc:	str	r3, [sp, #52]	; 0x34
   166c0:	ldrd	r0, [sp, #48]	; 0x30
   166c4:	ldr	ip, [sp, #60]	; 0x3c
   166c8:	mov	r3, r0
   166cc:	mul	ip, r0, ip
   166d0:	umull	r0, r1, r3, lr
   166d4:	ldr	r3, [sp, #52]	; 0x34
   166d8:	mla	ip, lr, r3, ip
   166dc:	add	r3, ip, r1
   166e0:	mov	r1, r3
   166e4:	ldrd	r2, [sp, #104]	; 0x68
   166e8:	subs	r2, r2, r0
   166ec:	sbc	r3, r3, r1
   166f0:	adds	r0, r2, r2
   166f4:	adc	r1, r3, r3
   166f8:	strd	r0, [sp, #104]	; 0x68
   166fc:	mov	r1, r3
   16700:	mul	ip, r2, r1
   16704:	umull	r0, r1, r2, r2
   16708:	ldr	r2, [sp, #60]	; 0x3c
   1670c:	add	r3, r1, ip, lsl #1
   16710:	mov	r1, r3
   16714:	mul	ip, r0, r2
   16718:	umull	r2, r3, r0, lr
   1671c:	mla	ip, lr, r1, ip
   16720:	strd	r2, [sp, #48]	; 0x30
   16724:	add	r3, ip, r3
   16728:	str	r3, [sp, #52]	; 0x34
   1672c:	ldrd	r0, [sp, #48]	; 0x30
   16730:	ldrd	r2, [sp, #104]	; 0x68
   16734:	subs	r2, r2, r0
   16738:	sbc	r3, r3, r1
   1673c:	ldrd	r0, [sp, #56]	; 0x38
   16740:	mul	ip, sl, r3
   16744:	cmp	r9, r1
   16748:	mla	ip, r2, fp, ip
   1674c:	umull	sl, fp, sl, r2
   16750:	strd	r2, [sp, #136]	; 0x88
   16754:	add	ip, ip, fp
   16758:	cmpeq	r8, r0
   1675c:	mov	fp, ip
   16760:	bcs	16f48 <__assert_fail@plt+0x57f4>
   16764:	ldrd	r8, [sp, #144]	; 0x90
   16768:	ldrd	r2, [sp, #56]	; 0x38
   1676c:	cmp	r3, #0
   16770:	cmpeq	r2, #1
   16774:	bls	167a0 <__assert_fail@plt+0x504c>
   16778:	mov	r0, r2
   1677c:	mov	r1, r3
   16780:	add	r3, pc, #896	; 0x380
   16784:	ldrd	r2, [r3]
   16788:	cmp	r1, r3
   1678c:	cmpeq	r0, r2
   16790:	bls	16f24 <__assert_fail@plt+0x57d0>
   16794:	bl	17c54 <__assert_fail@plt+0x6500>
   16798:	cmp	r0, #0
   1679c:	bne	16f24 <__assert_fail@plt+0x57d0>
   167a0:	ldr	r2, [sp, #328]	; 0x148
   167a4:	ldr	r3, [sp, #332]	; 0x14c
   167a8:	ldrd	r0, [sp, #56]	; 0x38
   167ac:	add	r2, r2, #1
   167b0:	bl	185d4 <__assert_fail@plt+0x6e80>
   167b4:	orrs	r3, r8, r9
   167b8:	beq	16f38 <__assert_fail@plt+0x57e4>
   167bc:	mov	r2, sl
   167c0:	mov	r3, fp
   167c4:	mov	r0, r8
   167c8:	mov	r1, r9
   167cc:	bl	15110 <__assert_fail@plt+0x39bc>
   167d0:	subs	lr, r0, #0
   167d4:	bne	170bc <__assert_fail@plt+0x5968>
   167d8:	ldrd	r2, [sp, #64]	; 0x40
   167dc:	orrs	r3, r2, r3
   167e0:	beq	16a3c <__assert_fail@plt+0x52e8>
   167e4:	mov	r2, #0
   167e8:	and	r3, r9, #-16777216	; 0xff000000
   167ec:	orrs	r3, r2, r3
   167f0:	mov	r2, r8
   167f4:	mov	r3, r9
   167f8:	bne	16824 <__assert_fail@plt+0x50d0>
   167fc:	lsl	r1, r3, #8
   16800:	orr	r1, r1, r2, lsr #24
   16804:	lsl	r0, r2, #8
   16808:	mov	r2, r0
   1680c:	mov	r3, r1
   16810:	mov	r0, #0
   16814:	and	r1, r1, #-16777216	; 0xff000000
   16818:	orrs	r1, r0, r1
   1681c:	add	lr, lr, #8
   16820:	beq	167fc <__assert_fail@plt+0x50a8>
   16824:	cmp	r2, #0
   16828:	sbcs	r1, r3, #0
   1682c:	blt	16848 <__assert_fail@plt+0x50f4>
   16830:	adds	r2, r2, r2
   16834:	adc	r3, r3, r3
   16838:	cmp	r2, #0
   1683c:	sbcs	r1, r3, #0
   16840:	add	lr, lr, #1
   16844:	bge	16830 <__assert_fail@plt+0x50dc>
   16848:	ldrd	r0, [sp, #64]	; 0x40
   1684c:	mov	r2, #0
   16850:	mov	ip, #0
   16854:	and	r3, r1, #-16777216	; 0xff000000
   16858:	orrs	r3, r2, r3
   1685c:	mov	r2, r0
   16860:	mov	r3, r1
   16864:	bne	16890 <__assert_fail@plt+0x513c>
   16868:	lsl	r1, r3, #8
   1686c:	orr	r1, r1, r2, lsr #24
   16870:	lsl	r0, r2, #8
   16874:	mov	r2, r0
   16878:	mov	r3, r1
   1687c:	mov	r0, #0
   16880:	and	r1, r1, #-16777216	; 0xff000000
   16884:	orrs	r1, r0, r1
   16888:	add	ip, ip, #8
   1688c:	beq	16868 <__assert_fail@plt+0x5114>
   16890:	cmp	r2, #0
   16894:	sbcs	r1, r3, #0
   16898:	blt	168b4 <__assert_fail@plt+0x5160>
   1689c:	adds	r2, r2, r2
   168a0:	adc	r3, r3, r3
   168a4:	cmp	r2, #0
   168a8:	sbcs	r1, r3, #0
   168ac:	add	ip, ip, #1
   168b0:	bge	1689c <__assert_fail@plt+0x5148>
   168b4:	sub	ip, lr, ip
   168b8:	rsb	r3, ip, #64	; 0x40
   168bc:	lsl	r2, r9, ip
   168c0:	str	r2, [sp, #220]	; 0xdc
   168c4:	lsr	r2, sl, r3
   168c8:	lsl	r0, fp, ip
   168cc:	str	r2, [sp, #208]	; 0xd0
   168d0:	str	r0, [sp, #156]	; 0x9c
   168d4:	rsb	r2, r3, #32
   168d8:	ldr	r0, [sp, #208]	; 0xd0
   168dc:	sub	r1, ip, #32
   168e0:	orr	r2, r0, fp, lsl r2
   168e4:	ldr	r0, [sp, #220]	; 0xdc
   168e8:	str	r2, [sp, #208]	; 0xd0
   168ec:	orr	r0, r0, r8, lsl r1
   168f0:	sub	r2, r3, #32
   168f4:	str	r0, [sp, #220]	; 0xdc
   168f8:	ldr	r0, [sp, #208]	; 0xd0
   168fc:	lsr	r3, fp, r3
   16900:	orr	r2, r0, fp, lsr r2
   16904:	ldr	r0, [sp, #156]	; 0x9c
   16908:	str	r3, [sp, #212]	; 0xd4
   1690c:	orr	r1, r0, sl, lsl r1
   16910:	lsl	r3, r8, ip
   16914:	str	r1, [sp, #156]	; 0x9c
   16918:	str	r2, [sp, #208]	; 0xd0
   1691c:	str	r3, [sp, #216]	; 0xd8
   16920:	rsb	r2, ip, #32
   16924:	ldr	r3, [sp, #156]	; 0x9c
   16928:	ldr	r1, [sp, #220]	; 0xdc
   1692c:	orr	r3, r3, sl, lsr r2
   16930:	orr	r1, r1, r8, lsr r2
   16934:	str	r3, [sp, #156]	; 0x9c
   16938:	lsl	r3, sl, ip
   1693c:	str	r1, [sp, #220]	; 0xdc
   16940:	str	r3, [sp, #152]	; 0x98
   16944:	ldrd	r0, [sp, #208]	; 0xd0
   16948:	ldrd	r2, [sp, #216]	; 0xd8
   1694c:	cmp	ip, #0
   16950:	orr	r0, r0, r2
   16954:	orr	r1, r1, r3
   16958:	ble	16a3c <__assert_fail@plt+0x52e8>
   1695c:	mov	lr, #0
   16960:	strd	r4, [sp, #48]	; 0x30
   16964:	strd	r6, [sp, #56]	; 0x38
   16968:	ldrd	r2, [sp, #64]	; 0x40
   1696c:	cmp	r1, r3
   16970:	cmpeq	r0, r2
   16974:	bcc	169a0 <__assert_fail@plt+0x524c>
   16978:	ldrd	r2, [sp, #72]	; 0x48
   1697c:	ldrd	r6, [sp, #152]	; 0x98
   16980:	moveq	r5, #1
   16984:	movne	r5, #0
   16988:	cmp	r7, r3
   1698c:	cmpeq	r6, r2
   16990:	movhi	r5, #0
   16994:	andls	r5, r5, #1
   16998:	cmp	r5, #0
   1699c:	beq	169f4 <__assert_fail@plt+0x52a0>
   169a0:	ldrd	r2, [sp, #72]	; 0x48
   169a4:	ldrd	r4, [sp, #152]	; 0x98
   169a8:	cmp	r5, r3
   169ac:	cmpeq	r4, r2
   169b0:	movhi	r4, #1
   169b4:	movls	r4, #0
   169b8:	mov	r6, r4
   169bc:	mov	r4, #0
   169c0:	mov	r7, r4
   169c4:	ldrd	r4, [sp, #64]	; 0x40
   169c8:	subs	r4, r4, r0
   169cc:	sbc	r5, r5, r1
   169d0:	subs	r6, r4, r6
   169d4:	sbc	r7, r5, r7
   169d8:	ldrd	r4, [sp, #152]	; 0x98
   169dc:	strd	r6, [sp, #64]	; 0x40
   169e0:	subs	r4, r2, r4
   169e4:	sbc	r5, r3, r5
   169e8:	mov	r2, r4
   169ec:	mov	r3, r5
   169f0:	strd	r2, [sp, #72]	; 0x48
   169f4:	lsl	r3, r0, #31
   169f8:	str	r3, [sp, #180]	; 0xb4
   169fc:	mov	r3, #0
   16a00:	str	r3, [sp, #176]	; 0xb0
   16a04:	ldrd	r2, [sp, #152]	; 0x98
   16a08:	ldrd	r4, [sp, #176]	; 0xb0
   16a0c:	add	lr, lr, #1
   16a10:	lsrs	r3, r3, #1
   16a14:	rrx	r2, r2
   16a18:	orr	r4, r4, r2
   16a1c:	orr	r5, r5, r3
   16a20:	lsrs	r1, r1, #1
   16a24:	rrx	r0, r0
   16a28:	cmp	ip, lr
   16a2c:	strd	r4, [sp, #152]	; 0x98
   16a30:	bne	16968 <__assert_fail@plt+0x5214>
   16a34:	ldrd	r4, [sp, #48]	; 0x30
   16a38:	ldrd	r6, [sp, #56]	; 0x38
   16a3c:	ldrd	r2, [sp, #112]	; 0x70
   16a40:	orrs	r3, r2, r3
   16a44:	beq	16cbc <__assert_fail@plt+0x5568>
   16a48:	mov	r2, #0
   16a4c:	and	r3, r9, #-16777216	; 0xff000000
   16a50:	orrs	r3, r2, r3
   16a54:	mov	lr, #0
   16a58:	mov	r2, r8
   16a5c:	mov	r3, r9
   16a60:	bne	16a8c <__assert_fail@plt+0x5338>
   16a64:	lsl	r1, r3, #8
   16a68:	orr	r1, r1, r2, lsr #24
   16a6c:	lsl	r0, r2, #8
   16a70:	mov	r2, r0
   16a74:	mov	r3, r1
   16a78:	mov	r0, #0
   16a7c:	and	r1, r1, #-16777216	; 0xff000000
   16a80:	orrs	r1, r0, r1
   16a84:	add	lr, lr, #8
   16a88:	beq	16a64 <__assert_fail@plt+0x5310>
   16a8c:	cmp	r2, #0
   16a90:	sbcs	r1, r3, #0
   16a94:	blt	16ab0 <__assert_fail@plt+0x535c>
   16a98:	adds	r2, r2, r2
   16a9c:	adc	r3, r3, r3
   16aa0:	cmp	r2, #0
   16aa4:	sbcs	r1, r3, #0
   16aa8:	add	lr, lr, #1
   16aac:	bge	16a98 <__assert_fail@plt+0x5344>
   16ab0:	ldrd	r0, [sp, #112]	; 0x70
   16ab4:	mov	r2, #0
   16ab8:	mov	ip, #0
   16abc:	and	r3, r1, #-16777216	; 0xff000000
   16ac0:	orrs	r3, r2, r3
   16ac4:	mov	r2, r0
   16ac8:	mov	r3, r1
   16acc:	bne	16af8 <__assert_fail@plt+0x53a4>
   16ad0:	lsl	r1, r3, #8
   16ad4:	orr	r1, r1, r2, lsr #24
   16ad8:	lsl	r0, r2, #8
   16adc:	mov	r2, r0
   16ae0:	mov	r3, r1
   16ae4:	mov	r0, #0
   16ae8:	and	r1, r1, #-16777216	; 0xff000000
   16aec:	orrs	r1, r0, r1
   16af0:	add	ip, ip, #8
   16af4:	beq	16ad0 <__assert_fail@plt+0x537c>
   16af8:	cmp	r2, #0
   16afc:	sbcs	r1, r3, #0
   16b00:	blt	16b34 <__assert_fail@plt+0x53e0>
   16b04:	b	16b1c <__assert_fail@plt+0x53c8>
   16b08:	cmneq	sp, r8, ror sp
   16b0c:	andeq	r0, r0, r0
   16b10:	andeq	r3, r2, r4, lsl r0
   16b14:	muleq	r2, r0, sp
   16b18:	andeq	r5, r2, r4, asr #29
   16b1c:	adds	r2, r2, r2
   16b20:	adc	r3, r3, r3
   16b24:	cmp	r2, #0
   16b28:	sbcs	r1, r3, #0
   16b2c:	add	ip, ip, #1
   16b30:	bge	16b1c <__assert_fail@plt+0x53c8>
   16b34:	sub	ip, lr, ip
   16b38:	rsb	r3, ip, #64	; 0x40
   16b3c:	lsl	r2, r9, ip
   16b40:	str	r2, [sp, #236]	; 0xec
   16b44:	lsr	r2, sl, r3
   16b48:	lsl	r0, fp, ip
   16b4c:	str	r2, [sp, #224]	; 0xe0
   16b50:	str	r0, [sp, #164]	; 0xa4
   16b54:	rsb	r2, r3, #32
   16b58:	ldr	r0, [sp, #224]	; 0xe0
   16b5c:	sub	r1, ip, #32
   16b60:	orr	r2, r0, fp, lsl r2
   16b64:	ldr	r0, [sp, #236]	; 0xec
   16b68:	str	r2, [sp, #224]	; 0xe0
   16b6c:	orr	r0, r0, r8, lsl r1
   16b70:	sub	r2, r3, #32
   16b74:	str	r0, [sp, #236]	; 0xec
   16b78:	ldr	r0, [sp, #224]	; 0xe0
   16b7c:	lsr	r3, fp, r3
   16b80:	orr	r2, r0, fp, lsr r2
   16b84:	ldr	r0, [sp, #164]	; 0xa4
   16b88:	str	r3, [sp, #228]	; 0xe4
   16b8c:	orr	r1, r0, sl, lsl r1
   16b90:	lsl	r3, r8, ip
   16b94:	str	r1, [sp, #164]	; 0xa4
   16b98:	str	r2, [sp, #224]	; 0xe0
   16b9c:	str	r3, [sp, #232]	; 0xe8
   16ba0:	rsb	r2, ip, #32
   16ba4:	ldr	r3, [sp, #164]	; 0xa4
   16ba8:	ldr	r1, [sp, #236]	; 0xec
   16bac:	orr	r3, r3, sl, lsr r2
   16bb0:	orr	r1, r1, r8, lsr r2
   16bb4:	str	r3, [sp, #164]	; 0xa4
   16bb8:	lsl	r3, sl, ip
   16bbc:	str	r1, [sp, #236]	; 0xec
   16bc0:	str	r3, [sp, #160]	; 0xa0
   16bc4:	ldrd	r0, [sp, #224]	; 0xe0
   16bc8:	ldrd	r2, [sp, #232]	; 0xe8
   16bcc:	cmp	ip, #0
   16bd0:	orr	r0, r0, r2
   16bd4:	orr	r1, r1, r3
   16bd8:	ble	16cbc <__assert_fail@plt+0x5568>
   16bdc:	mov	lr, #0
   16be0:	strd	r4, [sp, #48]	; 0x30
   16be4:	strd	r6, [sp, #56]	; 0x38
   16be8:	ldrd	r2, [sp, #112]	; 0x70
   16bec:	cmp	r1, r3
   16bf0:	cmpeq	r0, r2
   16bf4:	bcc	16c20 <__assert_fail@plt+0x54cc>
   16bf8:	ldrd	r2, [sp, #120]	; 0x78
   16bfc:	ldrd	r6, [sp, #160]	; 0xa0
   16c00:	moveq	r5, #1
   16c04:	movne	r5, #0
   16c08:	cmp	r7, r3
   16c0c:	cmpeq	r6, r2
   16c10:	movhi	r5, #0
   16c14:	andls	r5, r5, #1
   16c18:	cmp	r5, #0
   16c1c:	beq	16c74 <__assert_fail@plt+0x5520>
   16c20:	ldrd	r2, [sp, #120]	; 0x78
   16c24:	ldrd	r4, [sp, #160]	; 0xa0
   16c28:	cmp	r5, r3
   16c2c:	cmpeq	r4, r2
   16c30:	movhi	r4, #1
   16c34:	movls	r4, #0
   16c38:	mov	r6, r4
   16c3c:	mov	r4, #0
   16c40:	mov	r7, r4
   16c44:	ldrd	r4, [sp, #112]	; 0x70
   16c48:	subs	r4, r4, r0
   16c4c:	sbc	r5, r5, r1
   16c50:	subs	r6, r4, r6
   16c54:	sbc	r7, r5, r7
   16c58:	ldrd	r4, [sp, #160]	; 0xa0
   16c5c:	strd	r6, [sp, #112]	; 0x70
   16c60:	subs	r4, r2, r4
   16c64:	sbc	r5, r3, r5
   16c68:	mov	r2, r4
   16c6c:	mov	r3, r5
   16c70:	strd	r2, [sp, #120]	; 0x78
   16c74:	lsl	r3, r0, #31
   16c78:	str	r3, [sp, #188]	; 0xbc
   16c7c:	mov	r3, #0
   16c80:	str	r3, [sp, #184]	; 0xb8
   16c84:	ldrd	r2, [sp, #160]	; 0xa0
   16c88:	ldrd	r4, [sp, #184]	; 0xb8
   16c8c:	add	lr, lr, #1
   16c90:	lsrs	r3, r3, #1
   16c94:	rrx	r2, r2
   16c98:	orr	r4, r4, r2
   16c9c:	orr	r5, r5, r3
   16ca0:	lsrs	r1, r1, #1
   16ca4:	rrx	r0, r0
   16ca8:	cmp	ip, lr
   16cac:	strd	r4, [sp, #160]	; 0xa0
   16cb0:	bne	16be8 <__assert_fail@plt+0x5494>
   16cb4:	ldrd	r4, [sp, #48]	; 0x30
   16cb8:	ldrd	r6, [sp, #56]	; 0x38
   16cbc:	orrs	r3, r6, r7
   16cc0:	beq	16f18 <__assert_fail@plt+0x57c4>
   16cc4:	mov	r2, #0
   16cc8:	and	r3, r9, #-16777216	; 0xff000000
   16ccc:	orrs	r3, r2, r3
   16cd0:	mov	lr, #0
   16cd4:	mov	r2, r8
   16cd8:	mov	r3, r9
   16cdc:	bne	16d08 <__assert_fail@plt+0x55b4>
   16ce0:	lsl	r1, r3, #8
   16ce4:	orr	r1, r1, r2, lsr #24
   16ce8:	lsl	r0, r2, #8
   16cec:	mov	r2, r0
   16cf0:	mov	r3, r1
   16cf4:	mov	r0, #0
   16cf8:	and	r1, r1, #-16777216	; 0xff000000
   16cfc:	orrs	r1, r0, r1
   16d00:	add	lr, lr, #8
   16d04:	beq	16ce0 <__assert_fail@plt+0x558c>
   16d08:	cmp	r2, #0
   16d0c:	sbcs	r1, r3, #0
   16d10:	blt	16d2c <__assert_fail@plt+0x55d8>
   16d14:	adds	r2, r2, r2
   16d18:	adc	r3, r3, r3
   16d1c:	cmp	r2, #0
   16d20:	sbcs	r1, r3, #0
   16d24:	add	lr, lr, #1
   16d28:	bge	16d14 <__assert_fail@plt+0x55c0>
   16d2c:	mov	r2, #0
   16d30:	and	r3, r7, #-16777216	; 0xff000000
   16d34:	orrs	r3, r2, r3
   16d38:	mov	ip, #0
   16d3c:	mov	r2, r6
   16d40:	mov	r3, r7
   16d44:	bne	16d70 <__assert_fail@plt+0x561c>
   16d48:	lsl	r1, r3, #8
   16d4c:	orr	r1, r1, r2, lsr #24
   16d50:	lsl	r0, r2, #8
   16d54:	mov	r2, r0
   16d58:	mov	r3, r1
   16d5c:	mov	r0, #0
   16d60:	and	r1, r1, #-16777216	; 0xff000000
   16d64:	orrs	r1, r0, r1
   16d68:	add	ip, ip, #8
   16d6c:	beq	16d48 <__assert_fail@plt+0x55f4>
   16d70:	cmp	r2, #0
   16d74:	sbcs	r1, r3, #0
   16d78:	blt	16d94 <__assert_fail@plt+0x5640>
   16d7c:	adds	r2, r2, r2
   16d80:	adc	r3, r3, r3
   16d84:	cmp	r2, #0
   16d88:	sbcs	r1, r3, #0
   16d8c:	add	ip, ip, #1
   16d90:	bge	16d7c <__assert_fail@plt+0x5628>
   16d94:	sub	ip, lr, ip
   16d98:	rsb	r3, ip, #64	; 0x40
   16d9c:	lsl	r2, r9, ip
   16da0:	str	r2, [sp, #252]	; 0xfc
   16da4:	lsr	r2, sl, r3
   16da8:	lsl	r1, fp, ip
   16dac:	str	r2, [sp, #240]	; 0xf0
   16db0:	str	r1, [sp, #172]	; 0xac
   16db4:	rsb	r2, r3, #32
   16db8:	ldr	r1, [sp, #240]	; 0xf0
   16dbc:	sub	r0, ip, #32
   16dc0:	orr	r2, r1, fp, lsl r2
   16dc4:	ldr	r1, [sp, #252]	; 0xfc
   16dc8:	str	r2, [sp, #240]	; 0xf0
   16dcc:	orr	r1, r1, r8, lsl r0
   16dd0:	sub	r2, r3, #32
   16dd4:	str	r1, [sp, #252]	; 0xfc
   16dd8:	ldr	r1, [sp, #240]	; 0xf0
   16ddc:	lsr	r3, fp, r3
   16de0:	orr	r2, r1, fp, lsr r2
   16de4:	ldr	r1, [sp, #172]	; 0xac
   16de8:	str	r3, [sp, #244]	; 0xf4
   16dec:	orr	r1, r1, sl, lsl r0
   16df0:	lsl	r3, r8, ip
   16df4:	str	r1, [sp, #172]	; 0xac
   16df8:	str	r2, [sp, #240]	; 0xf0
   16dfc:	str	r3, [sp, #248]	; 0xf8
   16e00:	rsb	r2, ip, #32
   16e04:	ldr	r3, [sp, #172]	; 0xac
   16e08:	ldr	r1, [sp, #252]	; 0xfc
   16e0c:	orr	r3, r3, sl, lsr r2
   16e10:	orr	r1, r1, r8, lsr r2
   16e14:	str	r3, [sp, #172]	; 0xac
   16e18:	lsl	r3, sl, ip
   16e1c:	str	r1, [sp, #252]	; 0xfc
   16e20:	str	r3, [sp, #168]	; 0xa8
   16e24:	ldrd	r0, [sp, #240]	; 0xf0
   16e28:	ldrd	r2, [sp, #248]	; 0xf8
   16e2c:	cmp	ip, #0
   16e30:	orr	r0, r0, r2
   16e34:	orr	r1, r1, r3
   16e38:	ble	16f18 <__assert_fail@plt+0x57c4>
   16e3c:	strd	r8, [sp, #104]	; 0x68
   16e40:	mov	lr, #0
   16e44:	mov	r9, ip
   16e48:	strd	r6, [sp, #56]	; 0x38
   16e4c:	ldrd	r2, [sp, #56]	; 0x38
   16e50:	cmp	r1, r3
   16e54:	cmpeq	r0, r2
   16e58:	bcc	16e80 <__assert_fail@plt+0x572c>
   16e5c:	ldrd	r2, [sp, #168]	; 0xa8
   16e60:	moveq	ip, #1
   16e64:	movne	ip, #0
   16e68:	cmp	r3, r5
   16e6c:	cmpeq	r2, r4
   16e70:	movhi	ip, #0
   16e74:	andls	ip, ip, #1
   16e78:	cmp	ip, #0
   16e7c:	beq	16ed0 <__assert_fail@plt+0x577c>
   16e80:	ldrd	r2, [sp, #168]	; 0xa8
   16e84:	ldrd	r6, [sp, #56]	; 0x38
   16e88:	cmp	r3, r5
   16e8c:	cmpeq	r2, r4
   16e90:	movhi	r3, #1
   16e94:	movls	r3, #0
   16e98:	str	r3, [sp, #48]	; 0x30
   16e9c:	mov	r3, #0
   16ea0:	str	r3, [sp, #52]	; 0x34
   16ea4:	ldrd	r2, [sp, #48]	; 0x30
   16ea8:	subs	r6, r6, r0
   16eac:	sbc	r7, r7, r1
   16eb0:	subs	r2, r6, r2
   16eb4:	sbc	r3, r7, r3
   16eb8:	strd	r2, [sp, #56]	; 0x38
   16ebc:	ldrd	r2, [sp, #168]	; 0xa8
   16ec0:	subs	r2, r4, r2
   16ec4:	sbc	r3, r5, r3
   16ec8:	mov	r4, r2
   16ecc:	mov	r5, r3
   16ed0:	lsl	r3, r0, #31
   16ed4:	str	r3, [sp, #196]	; 0xc4
   16ed8:	mov	r3, #0
   16edc:	str	r3, [sp, #192]	; 0xc0
   16ee0:	ldrd	r2, [sp, #168]	; 0xa8
   16ee4:	ldrd	r6, [sp, #192]	; 0xc0
   16ee8:	add	lr, lr, #1
   16eec:	lsrs	r3, r3, #1
   16ef0:	rrx	r2, r2
   16ef4:	orr	r6, r6, r2
   16ef8:	orr	r7, r7, r3
   16efc:	lsrs	r1, r1, #1
   16f00:	rrx	r0, r0
   16f04:	cmp	r9, lr
   16f08:	strd	r6, [sp, #168]	; 0xa8
   16f0c:	bne	16e4c <__assert_fail@plt+0x56f8>
   16f10:	ldrd	r6, [sp, #56]	; 0x38
   16f14:	ldrd	r8, [sp, #104]	; 0x68
   16f18:	ldrd	r2, [sp, #128]	; 0x80
   16f1c:	strd	r2, [sp, #104]	; 0x68
   16f20:	b	15d7c <__assert_fail@plt+0x4628>
   16f24:	ldrd	r2, [sp, #56]	; 0x38
   16f28:	ldr	r0, [sp, #332]	; 0x14c
   16f2c:	bl	12958 <__assert_fail@plt+0x1204>
   16f30:	orrs	r3, r8, r9
   16f34:	bne	167bc <__assert_fail@plt+0x5068>
   16f38:	strd	sl, [sp, #48]	; 0x30
   16f3c:	mov	r2, sl
   16f40:	mov	r3, fp
   16f44:	b	16558 <__assert_fail@plt+0x4e04>
   16f48:	mov	r0, sl
   16f4c:	mov	r1, #0
   16f50:	strd	r0, [sp, #48]	; 0x30
   16f54:	ldrd	r0, [sp, #56]	; 0x38
   16f58:	ldr	lr, [sp, #48]	; 0x30
   16f5c:	umull	r2, r3, sl, r1
   16f60:	strd	r2, [sp, #104]	; 0x68
   16f64:	mov	r2, r0
   16f68:	ldr	r0, [sp, #48]	; 0x30
   16f6c:	mov	r3, #0
   16f70:	umull	r0, r1, r0, r2
   16f74:	strd	r2, [sp, #144]	; 0x90
   16f78:	mul	lr, lr, r3
   16f7c:	strd	r0, [sp, #200]	; 0xc8
   16f80:	ldrd	r2, [sp, #48]	; 0x30
   16f84:	ldr	r1, [sp, #144]	; 0x90
   16f88:	mov	r0, r3
   16f8c:	mla	lr, r1, r3, lr
   16f90:	ldr	r3, [sp, #60]	; 0x3c
   16f94:	ldr	r1, [sp, #108]	; 0x6c
   16f98:	mla	r1, r3, r0, r1
   16f9c:	ldrd	r2, [sp, #144]	; 0x90
   16fa0:	str	r1, [sp, #108]	; 0x6c
   16fa4:	umull	r0, r1, r2, ip
   16fa8:	mla	r3, ip, r3, r1
   16fac:	strd	r0, [sp, #48]	; 0x30
   16fb0:	str	r3, [sp, #52]	; 0x34
   16fb4:	ldr	r3, [sp, #204]	; 0xcc
   16fb8:	ldrd	r0, [sp, #104]	; 0x68
   16fbc:	add	r3, lr, r3
   16fc0:	str	r3, [sp, #256]	; 0x100
   16fc4:	mov	r3, #0
   16fc8:	str	r3, [sp, #260]	; 0x104
   16fcc:	ldrd	r2, [sp, #48]	; 0x30
   16fd0:	adds	r0, r0, r2
   16fd4:	adc	r1, r1, r3
   16fd8:	add	r3, sp, #256	; 0x100
   16fdc:	ldrd	r2, [r3]
   16fe0:	adds	r2, r2, r0
   16fe4:	adc	r3, r3, r1
   16fe8:	ldrd	r0, [sp, #48]	; 0x30
   16fec:	cmp	r1, r3
   16ff0:	ldr	r1, [sp, #60]	; 0x3c
   16ff4:	cmpeq	r0, r2
   16ff8:	umull	r0, r1, ip, r1
   16ffc:	bls	17008 <__assert_fail@plt+0x58b4>
   17000:	adds	r0, r0, #0
   17004:	adc	r1, r1, #1
   17008:	str	r3, [sp, #264]	; 0x108
   1700c:	mov	r3, #0
   17010:	str	r3, [sp, #268]	; 0x10c
   17014:	add	r3, sp, #264	; 0x108
   17018:	ldrd	r2, [r3]
   1701c:	subs	r2, r8, r2
   17020:	sbc	r3, r9, r3
   17024:	subs	r8, r2, r0
   17028:	sbc	r9, r3, r1
   1702c:	ldrd	r2, [sp, #136]	; 0x88
   17030:	strd	r8, [sp, #48]	; 0x30
   17034:	mul	r1, r2, r9
   17038:	umull	r8, r9, r2, r8
   1703c:	ldr	r2, [sp, #48]	; 0x30
   17040:	mla	r1, r2, r3, r1
   17044:	add	r9, r1, r9
   17048:	b	16768 <__assert_fail@plt+0x5014>
   1704c:	orrs	r3, r0, r1
   17050:	beq	17080 <__assert_fail@plt+0x592c>
   17054:	ldr	r3, [sp, #332]	; 0x14c
   17058:	ldrd	r2, [r3, #8]
   1705c:	orrs	r3, r2, r3
   17060:	bne	17100 <__assert_fail@plt+0x59ac>
   17064:	ldr	ip, [sp, #332]	; 0x14c
   17068:	mov	r2, sl
   1706c:	mov	r3, fp
   17070:	strd	r0, [ip, #8]
   17074:	strd	r2, [ip]
   17078:	ldrd	r2, [sp, #48]	; 0x30
   1707c:	b	16558 <__assert_fail@plt+0x4e04>
   17080:	mov	r2, sl
   17084:	mov	r3, fp
   17088:	ldr	r0, [sp, #332]	; 0x14c
   1708c:	bl	12958 <__assert_fail@plt+0x1204>
   17090:	ldrd	r2, [sp, #48]	; 0x30
   17094:	b	16558 <__assert_fail@plt+0x4e04>
   17098:	mov	r2, #1
   1709c:	mov	r3, #0
   170a0:	mov	r6, #128	; 0x80
   170a4:	strd	r2, [sp, #104]	; 0x68
   170a8:	mov	r2, #0
   170ac:	mov	r3, #0
   170b0:	mov	r7, #0
   170b4:	strd	r2, [sp, #96]	; 0x60
   170b8:	b	15bf8 <__assert_fail@plt+0x44a4>
   170bc:	ldr	r3, [sp, #332]	; 0x14c
   170c0:	strd	sl, [sp, #48]	; 0x30
   170c4:	ldrd	r2, [r3, #8]
   170c8:	orrs	r3, r2, r3
   170cc:	bne	17100 <__assert_fail@plt+0x59ac>
   170d0:	ldr	r3, [sp, #332]	; 0x14c
   170d4:	mov	r0, sl
   170d8:	mov	r1, fp
   170dc:	strd	r8, [r3, #8]
   170e0:	strd	r0, [r3]
   170e4:	add	sp, sp, #292	; 0x124
   170e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170ec:	ldrd	r2, [sp, #48]	; 0x30
   170f0:	ldr	r0, [sp, #332]	; 0x14c
   170f4:	bl	12958 <__assert_fail@plt+0x1204>
   170f8:	add	sp, sp, #292	; 0x124
   170fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17100:	bl	11798 <__assert_fail@plt+0x44>
   17104:	ldr	r3, [sp, #328]	; 0x148
   17108:	mov	r2, r6
   1710c:	add	r3, r3, #1
   17110:	str	r3, [sp]
   17114:	ldr	r3, [sp, #332]	; 0x14c
   17118:	mov	r0, r8
   1711c:	str	r3, [sp, #4]
   17120:	mov	r1, r9
   17124:	mov	r3, r7
   17128:	bl	15bbc <__assert_fail@plt+0x4468>
   1712c:	add	sp, sp, #292	; 0x124
   17130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17134:	ldrd	r2, [sp, #104]	; 0x68
   17138:	ldrd	r6, [sp, #144]	; 0x90
   1713c:	ldrd	r4, [sp, #136]	; 0x88
   17140:	strd	r2, [sp, #128]	; 0x80
   17144:	strd	r6, [sp, #104]	; 0x68
   17148:	strd	sl, [sp, #48]	; 0x30
   1714c:	b	162ac <__assert_fail@plt+0x4b58>
   17150:	ldr	r3, [pc, #-1608]	; 16b10 <__assert_fail@plt+0x53bc>
   17154:	mov	r2, #476	; 0x1dc
   17158:	ldr	r1, [pc, #-1612]	; 16b14 <__assert_fail@plt+0x53c0>
   1715c:	ldr	r0, [pc, #-1612]	; 16b18 <__assert_fail@plt+0x53c4>
   17160:	bl	11754 <__assert_fail@plt>
   17164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17168:	sub	sp, sp, #84	; 0x54
   1716c:	mov	ip, r0
   17170:	strd	r0, [sp, #40]	; 0x28
   17174:	orrs	r1, r0, r1
   17178:	moveq	ip, #1
   1717c:	movne	ip, #0
   17180:	cmp	r3, #0
   17184:	cmpeq	r2, #1
   17188:	ldr	r0, [sp, #120]	; 0x78
   1718c:	mov	r6, r2
   17190:	mov	r7, r3
   17194:	movhi	ip, #0
   17198:	andls	ip, ip, #1
   1719c:	mov	r2, #0
   171a0:	mov	r3, #0
   171a4:	mov	r1, #0
   171a8:	cmp	ip, #0
   171ac:	str	r0, [sp, #72]	; 0x48
   171b0:	strb	r1, [r0, #250]	; 0xfa
   171b4:	strd	r2, [r0, #8]
   171b8:	beq	171c4 <__assert_fail@plt+0x5a70>
   171bc:	add	sp, sp, #84	; 0x54
   171c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c4:	and	r2, r6, #1
   171c8:	mov	r3, #0
   171cc:	orrs	r3, r2, r3
   171d0:	bne	172ec <__assert_fail@plt+0x5b98>
   171d4:	orrs	r3, r6, r7
   171d8:	bne	17250 <__assert_fail@plt+0x5afc>
   171dc:	ldrd	r0, [sp, #40]	; 0x28
   171e0:	mov	r3, #0
   171e4:	and	r2, r0, #1
   171e8:	orrs	r3, r2, r3
   171ec:	bne	17c08 <__assert_fail@plt+0x64b4>
   171f0:	mov	r2, r0
   171f4:	mov	r3, r1
   171f8:	b	17200 <__assert_fail@plt+0x5aac>
   171fc:	mov	ip, r1
   17200:	lsrs	r3, r3, #1
   17204:	rrx	r2, r2
   17208:	mov	r1, #0
   1720c:	and	r0, r2, #1
   17210:	orrs	r1, r0, r1
   17214:	add	r1, ip, #1
   17218:	beq	171fc <__assert_fail@plt+0x5aa8>
   1721c:	add	ip, ip, #65	; 0x41
   17220:	uxtb	ip, ip
   17224:	ldrd	r4, [sp, #40]	; 0x28
   17228:	rsb	r3, r1, #32
   1722c:	sub	r0, r1, #32
   17230:	lsr	r2, r4, r1
   17234:	orr	r2, r2, r5, lsl r3
   17238:	lsr	r3, r5, r1
   1723c:	orr	r2, r2, r5, lsr r0
   17240:	strd	r6, [sp, #40]	; 0x28
   17244:	mov	r6, r2
   17248:	mov	r7, r3
   1724c:	b	172d0 <__assert_fail@plt+0x5b7c>
   17250:	mov	r2, r6
   17254:	mov	r3, r7
   17258:	lsrs	r3, r3, #1
   1725c:	rrx	r2, r2
   17260:	and	r0, r2, #1
   17264:	mov	r1, #0
   17268:	orrs	r1, r0, r1
   1726c:	add	ip, ip, #1
   17270:	beq	17258 <__assert_fail@plt+0x5b04>
   17274:	ldrd	sl, [sp, #40]	; 0x28
   17278:	rsb	r2, ip, #64	; 0x40
   1727c:	sub	r3, r2, #32
   17280:	lsl	r5, fp, r2
   17284:	lsr	r8, r6, ip
   17288:	rsb	r0, ip, #32
   1728c:	orr	r5, r5, sl, lsl r3
   17290:	rsb	r3, r2, #32
   17294:	sub	r1, ip, #32
   17298:	orr	r8, r8, r7, lsl r0
   1729c:	orr	r5, r5, sl, lsr r3
   172a0:	lsr	r3, sl, ip
   172a4:	orr	r8, r8, r7, lsr r1
   172a8:	lsl	r4, sl, r2
   172ac:	lsr	r9, r7, ip
   172b0:	orr	r3, r3, fp, lsl r0
   172b4:	lsr	r2, fp, ip
   172b8:	orr	r3, r3, fp, lsr r1
   172bc:	orr	r6, r4, r8
   172c0:	orr	r7, r5, r9
   172c4:	uxtb	ip, ip
   172c8:	str	r3, [sp, #40]	; 0x28
   172cc:	str	r2, [sp, #44]	; 0x2c
   172d0:	ldr	r0, [sp, #72]	; 0x48
   172d4:	mov	r2, #2
   172d8:	mov	r3, #0
   172dc:	mov	r1, #1
   172e0:	strb	ip, [r0, #224]	; 0xe0
   172e4:	strd	r2, [r0, #16]
   172e8:	strb	r1, [r0, #250]	; 0xfa
   172ec:	ldrd	r2, [sp, #40]	; 0x28
   172f0:	orrs	r3, r2, r3
   172f4:	ldr	r3, [pc, #2380]	; 17c48 <__assert_fail@plt+0x64f4>
   172f8:	beq	17c14 <__assert_fail@plt+0x64c0>
   172fc:	mov	r2, #0
   17300:	mov	sl, r3
   17304:	str	r3, [sp, #76]	; 0x4c
   17308:	sub	r3, r3, #816	; 0x330
   1730c:	str	r2, [sp, #64]	; 0x40
   17310:	str	r3, [sp, #68]	; 0x44
   17314:	mov	r2, #3
   17318:	mov	r3, #0
   1731c:	strd	r6, [sp, #56]	; 0x38
   17320:	strd	r2, [sp, #8]
   17324:	mov	r7, sl
   17328:	mov	r4, r2
   1732c:	mov	r5, r3
   17330:	b	17388 <__assert_fail@plt+0x5c34>
   17334:	ldr	r3, [sp, #64]	; 0x40
   17338:	ldr	r0, [pc, #2316]	; 17c4c <__assert_fail@plt+0x64f8>
   1733c:	add	ip, r3, #1
   17340:	ldrd	r2, [sp, #40]	; 0x28
   17344:	ldrd	r4, [sp, #8]
   17348:	cmp	ip, r0
   1734c:	orr	r1, r2, r3
   17350:	ldr	r3, [sp, #68]	; 0x44
   17354:	movhi	r0, #0
   17358:	movls	r0, #1
   1735c:	ldrb	r2, [r3, ip]
   17360:	cmp	r1, #0
   17364:	moveq	r0, #0
   17368:	mov	r3, #0
   1736c:	adds	r4, r4, r2
   17370:	adc	r5, r5, r3
   17374:	cmp	r0, #0
   17378:	str	ip, [sp, #64]	; 0x40
   1737c:	strd	r4, [sp, #8]
   17380:	add	r7, r8, #16
   17384:	beq	17494 <__assert_fail@plt+0x5d40>
   17388:	mov	r9, r5
   1738c:	mov	r8, r7
   17390:	mov	r5, #0
   17394:	ldrd	r0, [sp, #56]	; 0x38
   17398:	ldm	r8, {r2, ip}
   1739c:	mul	r3, r2, r1
   173a0:	umull	r6, r7, r2, r0
   173a4:	mla	r3, ip, r0, r3
   173a8:	strd	r6, [sp, #16]
   173ac:	add	r3, r3, r7
   173b0:	str	r3, [sp, #20]
   173b4:	ldrd	r6, [sp, #16]
   173b8:	mov	r7, #0
   173bc:	umull	sl, fp, r3, r4
   173c0:	umull	r0, r1, r6, r4
   173c4:	mul	lr, r6, r5
   173c8:	strd	r0, [sp, #48]	; 0x30
   173cc:	mla	lr, r4, r7, lr
   173d0:	umull	r0, r1, r6, r9
   173d4:	ldr	r6, [sp, #52]	; 0x34
   173d8:	mla	fp, r3, r5, fp
   173dc:	add	lr, lr, r6
   173e0:	str	lr, [sp, #24]
   173e4:	mov	lr, #0
   173e8:	str	lr, [sp, #28]
   173ec:	mla	r1, r9, r7, r1
   173f0:	ldrd	r6, [sp, #24]
   173f4:	adds	r0, r0, sl
   173f8:	adc	r1, r1, fp
   173fc:	adds	r6, r6, r0
   17400:	adc	r7, r7, r1
   17404:	cmp	fp, r7
   17408:	cmpeq	sl, r6
   1740c:	mov	r1, r7
   17410:	umull	r6, r7, r3, r9
   17414:	bls	17420 <__assert_fail@plt+0x5ccc>
   17418:	adds	r6, r6, #0
   1741c:	adc	r7, r7, #1
   17420:	mov	r3, #0
   17424:	str	r1, [sp, #32]
   17428:	str	r3, [sp, #36]	; 0x24
   1742c:	ldrd	r0, [sp, #32]
   17430:	adds	r0, r0, r6
   17434:	adc	r1, r1, r7
   17438:	mov	r6, r0
   1743c:	mov	r7, r1
   17440:	ldrd	r0, [sp, #40]	; 0x28
   17444:	cmp	r7, r1
   17448:	cmpeq	r6, r0
   1744c:	bhi	17334 <__assert_fail@plt+0x5be0>
   17450:	subs	r0, r0, r6
   17454:	sbc	r1, r1, r7
   17458:	mul	ip, r0, ip
   1745c:	umull	r6, r7, r0, r2
   17460:	mla	ip, r2, r1, ip
   17464:	ldrd	r2, [r8, #8]
   17468:	add	r7, ip, r7
   1746c:	cmp	r7, r3
   17470:	cmpeq	r6, r2
   17474:	bhi	17334 <__assert_fail@plt+0x5be0>
   17478:	strd	r6, [sp, #40]	; 0x28
   1747c:	ldrd	r6, [sp, #16]
   17480:	ldrd	r2, [sp, #8]
   17484:	ldr	r0, [sp, #72]	; 0x48
   17488:	strd	r6, [sp, #56]	; 0x38
   1748c:	bl	12958 <__assert_fail@plt+0x1204>
   17490:	b	17394 <__assert_fail@plt+0x5c40>
   17494:	ldr	r2, [pc, #1968]	; 17c4c <__assert_fail@plt+0x64f8>
   17498:	ldrd	r6, [sp, #56]	; 0x38
   1749c:	cmp	ip, r2
   174a0:	bhi	17abc <__assert_fail@plt+0x6368>
   174a4:	ldr	r5, [sp, #64]	; 0x40
   174a8:	ldr	r3, [sp, #76]	; 0x4c
   174ac:	add	r4, r3, r5, lsl #4
   174b0:	ldr	r3, [sp, #68]	; 0x44
   174b4:	add	r9, r3, r5
   174b8:	b	17628 <__assert_fail@plt+0x5ed4>
   174bc:	ldr	lr, [r4, #20]
   174c0:	ldr	ip, [r4, #16]
   174c4:	ldrd	r0, [r4, #24]
   174c8:	mul	lr, r6, lr
   174cc:	umull	r2, r3, ip, r6
   174d0:	mla	ip, ip, r7, lr
   174d4:	add	r3, ip, r3
   174d8:	cmp	r3, r1
   174dc:	cmpeq	r2, r0
   174e0:	bls	17a64 <__assert_fail@plt+0x6310>
   174e4:	ldr	lr, [r4, #36]	; 0x24
   174e8:	ldr	ip, [r4, #32]
   174ec:	ldrd	r0, [r4, #40]	; 0x28
   174f0:	mul	lr, r6, lr
   174f4:	umull	r2, r3, ip, r6
   174f8:	mla	ip, ip, r7, lr
   174fc:	add	r3, ip, r3
   17500:	cmp	r3, r1
   17504:	cmpeq	r2, r0
   17508:	bls	179fc <__assert_fail@plt+0x62a8>
   1750c:	ldr	lr, [r4, #52]	; 0x34
   17510:	ldr	ip, [r4, #48]	; 0x30
   17514:	ldrd	r0, [r4, #56]	; 0x38
   17518:	mul	lr, r6, lr
   1751c:	umull	r2, r3, ip, r6
   17520:	mla	ip, ip, r7, lr
   17524:	add	r3, ip, r3
   17528:	cmp	r3, r1
   1752c:	cmpeq	r2, r0
   17530:	bls	17970 <__assert_fail@plt+0x621c>
   17534:	ldr	lr, [r4, #68]	; 0x44
   17538:	ldr	ip, [r4, #64]	; 0x40
   1753c:	ldrd	r0, [r4, #72]	; 0x48
   17540:	mul	lr, r6, lr
   17544:	umull	r2, r3, ip, r6
   17548:	mla	ip, ip, r7, lr
   1754c:	add	r3, ip, r3
   17550:	cmp	r3, r1
   17554:	cmpeq	r2, r0
   17558:	bls	178d4 <__assert_fail@plt+0x6180>
   1755c:	ldr	lr, [r4, #84]	; 0x54
   17560:	ldr	ip, [r4, #80]	; 0x50
   17564:	ldrd	r0, [r4, #88]	; 0x58
   17568:	mul	lr, r6, lr
   1756c:	umull	r2, r3, ip, r6
   17570:	mla	ip, ip, r7, lr
   17574:	add	r3, ip, r3
   17578:	cmp	r1, r3
   1757c:	cmpeq	r0, r2
   17580:	bcs	17828 <__assert_fail@plt+0x60d4>
   17584:	ldr	lr, [r4, #100]	; 0x64
   17588:	ldr	ip, [r4, #96]	; 0x60
   1758c:	ldrd	r0, [r4, #104]	; 0x68
   17590:	mul	lr, r6, lr
   17594:	umull	r2, r3, ip, r6
   17598:	mla	ip, ip, r7, lr
   1759c:	add	r3, ip, r3
   175a0:	cmp	r3, r1
   175a4:	cmpeq	r2, r0
   175a8:	bls	1776c <__assert_fail@plt+0x6018>
   175ac:	ldr	lr, [r4, #116]	; 0x74
   175b0:	ldr	ip, [r4, #112]	; 0x70
   175b4:	ldrd	r0, [r4, #120]	; 0x78
   175b8:	mul	lr, r6, lr
   175bc:	umull	r2, r3, ip, r6
   175c0:	mla	ip, ip, r7, lr
   175c4:	add	r3, ip, r3
   175c8:	cmp	r3, r1
   175cc:	cmpeq	r2, r0
   175d0:	bls	176a0 <__assert_fail@plt+0x5f4c>
   175d4:	ldr	r3, [pc, #1652]	; 17c50 <__assert_fail@plt+0x64fc>
   175d8:	ldrd	r0, [sp, #8]
   175dc:	ldrb	r2, [r5, r3]
   175e0:	mov	r3, #0
   175e4:	adds	r0, r0, r2
   175e8:	adc	r1, r1, r3
   175ec:	mov	r2, r0
   175f0:	mov	r3, r1
   175f4:	mul	r1, r2, r3
   175f8:	strd	r2, [sp, #8]
   175fc:	umull	r2, r3, r2, r2
   17600:	add	r3, r3, r1, lsl #1
   17604:	cmp	r3, r7
   17608:	cmpeq	r2, r6
   1760c:	bhi	17abc <__assert_fail@plt+0x6368>
   17610:	ldr	r3, [pc, #1588]	; 17c4c <__assert_fail@plt+0x64f8>
   17614:	add	r5, r5, #8
   17618:	cmp	r5, r3
   1761c:	add	r4, r4, #128	; 0x80
   17620:	add	r9, r9, #8
   17624:	bhi	17abc <__assert_fail@plt+0x6368>
   17628:	ldr	r8, [r4]
   1762c:	ldrd	r2, [r4, #8]
   17630:	ldr	r1, [r4, #4]
   17634:	mul	r0, r8, r7
   17638:	mov	sl, r2
   1763c:	mov	fp, r3
   17640:	umull	r2, r3, r8, r6
   17644:	mla	r0, r1, r6, r0
   17648:	strd	sl, [sp, #16]
   1764c:	add	r3, r0, r3
   17650:	cmp	r3, fp
   17654:	cmpeq	r2, sl
   17658:	bhi	174bc <__assert_fail@plt+0x5d68>
   1765c:	mov	r6, r2
   17660:	mov	r7, r3
   17664:	mov	fp, r1
   17668:	ldrd	r2, [sp, #8]
   1766c:	ldr	r0, [sp, #72]	; 0x48
   17670:	bl	12958 <__assert_fail@plt+0x1204>
   17674:	mul	r0, r8, r7
   17678:	umull	r2, r3, r8, r6
   1767c:	mla	r0, fp, r6, r0
   17680:	add	r3, r0, r3
   17684:	ldrd	r0, [sp, #16]
   17688:	cmp	r3, r1
   1768c:	cmpeq	r2, r0
   17690:	bhi	174bc <__assert_fail@plt+0x5d68>
   17694:	mov	r6, r2
   17698:	mov	r7, r3
   1769c:	b	17668 <__assert_fail@plt+0x5f14>
   176a0:	ldrb	r6, [r9, #7]
   176a4:	ldrb	r0, [r9, #1]
   176a8:	mov	r7, #0
   176ac:	mov	r1, #0
   176b0:	adds	r0, r0, r6
   176b4:	adc	r1, r1, r7
   176b8:	ldrd	r6, [sp, #8]
   176bc:	adds	r6, r6, r0
   176c0:	mov	r0, r6
   176c4:	ldrb	r6, [r9, #6]
   176c8:	adc	r7, r7, r1
   176cc:	mov	r1, r7
   176d0:	adds	r6, r6, r0
   176d4:	ldrb	r0, [r9, #5]
   176d8:	mov	r7, #0
   176dc:	adc	r7, r7, r1
   176e0:	adds	r6, r6, r0
   176e4:	ldrb	r0, [r9, #4]
   176e8:	mov	r1, #0
   176ec:	adc	r7, r7, r1
   176f0:	adds	r0, r0, r6
   176f4:	ldrb	r6, [r9, #3]
   176f8:	mov	r1, #0
   176fc:	adc	r1, r1, r7
   17700:	adds	r0, r0, r6
   17704:	ldrb	r6, [r9, #2]
   17708:	mov	r7, #0
   1770c:	adc	r1, r1, r7
   17710:	mov	sl, r6
   17714:	mov	r7, #0
   17718:	mov	fp, r7
   1771c:	mov	r6, r2
   17720:	adds	r2, sl, r0
   17724:	mov	r7, r3
   17728:	adc	r3, fp, r1
   1772c:	ldrd	sl, [sp, #8]
   17730:	strd	r2, [sp, #16]
   17734:	ldr	r0, [sp, #72]	; 0x48
   17738:	bl	12958 <__assert_fail@plt+0x1204>
   1773c:	ldr	lr, [r4, #116]	; 0x74
   17740:	ldr	ip, [r4, #112]	; 0x70
   17744:	ldrd	r0, [r4, #120]	; 0x78
   17748:	mul	lr, r6, lr
   1774c:	umull	r2, r3, ip, r6
   17750:	mla	ip, ip, r7, lr
   17754:	add	r3, ip, r3
   17758:	cmp	r3, r1
   1775c:	cmpeq	r2, r0
   17760:	bls	17b68 <__assert_fail@plt+0x6414>
   17764:	strd	sl, [sp, #8]
   17768:	b	175d4 <__assert_fail@plt+0x5e80>
   1776c:	ldrb	r6, [r9, #6]
   17770:	ldrb	r0, [r9, #1]
   17774:	mov	r7, #0
   17778:	mov	r1, #0
   1777c:	adds	r0, r0, r6
   17780:	adc	r1, r1, r7
   17784:	ldrd	r6, [sp, #8]
   17788:	adds	r6, r6, r0
   1778c:	mov	r0, r6
   17790:	ldrb	r6, [r9, #5]
   17794:	adc	r7, r7, r1
   17798:	mov	r1, r7
   1779c:	adds	r6, r6, r0
   177a0:	ldrb	r0, [r9, #4]
   177a4:	mov	r7, #0
   177a8:	adc	r7, r7, r1
   177ac:	adds	r0, r0, r6
   177b0:	ldrb	r6, [r9, #3]
   177b4:	mov	r1, #0
   177b8:	adc	r1, r1, r7
   177bc:	adds	r0, r0, r6
   177c0:	ldrb	r6, [r9, #2]
   177c4:	mov	r7, #0
   177c8:	adc	r1, r1, r7
   177cc:	mov	sl, r6
   177d0:	mov	r7, #0
   177d4:	mov	fp, r7
   177d8:	mov	r6, r2
   177dc:	adds	r2, sl, r0
   177e0:	mov	r7, r3
   177e4:	adc	r3, fp, r1
   177e8:	ldrd	sl, [sp, #8]
   177ec:	strd	r2, [sp, #16]
   177f0:	ldr	r0, [sp, #72]	; 0x48
   177f4:	bl	12958 <__assert_fail@plt+0x1204>
   177f8:	ldr	lr, [r4, #100]	; 0x64
   177fc:	ldr	ip, [r4, #96]	; 0x60
   17800:	ldrd	r0, [r4, #104]	; 0x68
   17804:	mul	lr, r6, lr
   17808:	umull	r2, r3, ip, r6
   1780c:	mla	ip, ip, r7, lr
   17810:	add	r3, ip, r3
   17814:	cmp	r3, r1
   17818:	cmpeq	r2, r0
   1781c:	bls	17b88 <__assert_fail@plt+0x6434>
   17820:	strd	sl, [sp, #8]
   17824:	b	175ac <__assert_fail@plt+0x5e58>
   17828:	ldrb	r0, [r9, #1]
   1782c:	ldrb	r6, [r9, #5]
   17830:	mov	r1, #0
   17834:	mov	r7, #0
   17838:	adds	r6, r6, r0
   1783c:	adc	r7, r7, r1
   17840:	ldrd	r0, [sp, #8]
   17844:	adds	r0, r0, r6
   17848:	mov	r6, r0
   1784c:	ldrb	r0, [r9, #4]
   17850:	adc	r1, r1, r7
   17854:	mov	r7, r1
   17858:	adds	r0, r0, r6
   1785c:	ldrb	r6, [r9, #3]
   17860:	mov	r1, #0
   17864:	adc	r1, r1, r7
   17868:	adds	r0, r0, r6
   1786c:	ldrb	r6, [r9, #2]
   17870:	mov	r7, #0
   17874:	adc	r1, r1, r7
   17878:	mov	sl, r6
   1787c:	mov	r7, #0
   17880:	mov	fp, r7
   17884:	mov	r6, r2
   17888:	adds	r2, sl, r0
   1788c:	mov	r7, r3
   17890:	adc	r3, fp, r1
   17894:	ldrd	sl, [sp, #8]
   17898:	strd	r2, [sp, #16]
   1789c:	ldr	r0, [sp, #72]	; 0x48
   178a0:	bl	12958 <__assert_fail@plt+0x1204>
   178a4:	ldr	lr, [r4, #84]	; 0x54
   178a8:	ldr	ip, [r4, #80]	; 0x50
   178ac:	ldrd	r0, [r4, #88]	; 0x58
   178b0:	mul	lr, r6, lr
   178b4:	umull	r2, r3, ip, r6
   178b8:	mla	ip, ip, r7, lr
   178bc:	add	r3, ip, r3
   178c0:	cmp	r3, r1
   178c4:	cmpeq	r2, r0
   178c8:	bls	17b78 <__assert_fail@plt+0x6424>
   178cc:	strd	sl, [sp, #8]
   178d0:	b	17584 <__assert_fail@plt+0x5e30>
   178d4:	ldrb	r6, [r9, #4]
   178d8:	ldrb	r0, [r9, #1]
   178dc:	mov	r7, #0
   178e0:	mov	r1, #0
   178e4:	adds	r0, r0, r6
   178e8:	adc	r1, r1, r7
   178ec:	ldrd	r6, [sp, #8]
   178f0:	adds	r6, r6, r0
   178f4:	mov	r0, r6
   178f8:	ldrb	r6, [r9, #3]
   178fc:	adc	r7, r7, r1
   17900:	mov	r1, r7
   17904:	adds	r0, r0, r6
   17908:	ldrb	r6, [r9, #2]
   1790c:	mov	r7, #0
   17910:	adc	r1, r1, r7
   17914:	mov	sl, r6
   17918:	mov	r7, #0
   1791c:	mov	fp, r7
   17920:	mov	r6, r2
   17924:	adds	r2, sl, r0
   17928:	mov	r7, r3
   1792c:	adc	r3, fp, r1
   17930:	ldrd	sl, [sp, #8]
   17934:	strd	r2, [sp, #16]
   17938:	ldr	r0, [sp, #72]	; 0x48
   1793c:	bl	12958 <__assert_fail@plt+0x1204>
   17940:	ldr	lr, [r4, #68]	; 0x44
   17944:	ldr	ip, [r4, #64]	; 0x40
   17948:	ldrd	r0, [r4, #72]	; 0x48
   1794c:	mul	lr, r6, lr
   17950:	umull	r2, r3, ip, r6
   17954:	mla	ip, ip, r7, lr
   17958:	add	r3, ip, r3
   1795c:	cmp	r3, r1
   17960:	cmpeq	r2, r0
   17964:	bls	17bc8 <__assert_fail@plt+0x6474>
   17968:	strd	sl, [sp, #8]
   1796c:	b	1755c <__assert_fail@plt+0x5e08>
   17970:	ldrb	r6, [r9, #1]
   17974:	ldrb	r0, [r9, #3]
   17978:	mov	r7, #0
   1797c:	mov	r1, #0
   17980:	adds	r0, r0, r6
   17984:	adc	r1, r1, r7
   17988:	ldrd	r6, [sp, #8]
   1798c:	adds	r6, r6, r0
   17990:	mov	r0, r6
   17994:	ldrb	r6, [r9, #2]
   17998:	adc	r7, r7, r1
   1799c:	mov	r1, r7
   179a0:	mov	sl, r6
   179a4:	mov	r7, #0
   179a8:	mov	fp, r7
   179ac:	mov	r6, r2
   179b0:	adds	r2, sl, r0
   179b4:	mov	r7, r3
   179b8:	adc	r3, fp, r1
   179bc:	ldrd	sl, [sp, #8]
   179c0:	strd	r2, [sp, #16]
   179c4:	ldr	r0, [sp, #72]	; 0x48
   179c8:	bl	12958 <__assert_fail@plt+0x1204>
   179cc:	ldr	lr, [r4, #52]	; 0x34
   179d0:	ldr	ip, [r4, #48]	; 0x30
   179d4:	ldrd	r0, [r4, #56]	; 0x38
   179d8:	mul	lr, r6, lr
   179dc:	umull	r2, r3, ip, r6
   179e0:	mla	ip, ip, r7, lr
   179e4:	add	r3, ip, r3
   179e8:	cmp	r3, r1
   179ec:	cmpeq	r2, r0
   179f0:	bls	17bb8 <__assert_fail@plt+0x6464>
   179f4:	strd	sl, [sp, #8]
   179f8:	b	17534 <__assert_fail@plt+0x5de0>
   179fc:	ldrb	r6, [r9, #1]
   17a00:	ldrb	r0, [r9, #2]
   17a04:	ldrd	sl, [sp, #8]
   17a08:	mov	r7, #0
   17a0c:	adds	r0, r0, r6
   17a10:	mov	r1, #0
   17a14:	adc	r1, r1, r7
   17a18:	mov	r6, r2
   17a1c:	adds	r2, sl, r0
   17a20:	mov	r7, r3
   17a24:	adc	r3, fp, r1
   17a28:	strd	r2, [sp, #8]
   17a2c:	ldr	r0, [sp, #72]	; 0x48
   17a30:	bl	12958 <__assert_fail@plt+0x1204>
   17a34:	ldr	lr, [r4, #36]	; 0x24
   17a38:	ldr	ip, [r4, #32]
   17a3c:	ldrd	r0, [r4, #40]	; 0x28
   17a40:	mul	lr, r6, lr
   17a44:	umull	r2, r3, ip, r6
   17a48:	mla	ip, ip, r7, lr
   17a4c:	add	r3, ip, r3
   17a50:	cmp	r3, r1
   17a54:	cmpeq	r2, r0
   17a58:	bls	17ba8 <__assert_fail@plt+0x6454>
   17a5c:	strd	sl, [sp, #8]
   17a60:	b	1750c <__assert_fail@plt+0x5db8>
   17a64:	ldrd	sl, [sp, #8]
   17a68:	ldrb	r0, [r9, #1]
   17a6c:	mov	r1, #0
   17a70:	mov	r6, r2
   17a74:	adds	r2, sl, r0
   17a78:	mov	r7, r3
   17a7c:	adc	r3, fp, r1
   17a80:	strd	r2, [sp, #8]
   17a84:	ldr	r0, [sp, #72]	; 0x48
   17a88:	bl	12958 <__assert_fail@plt+0x1204>
   17a8c:	ldr	lr, [r4, #20]
   17a90:	ldr	ip, [r4, #16]
   17a94:	ldrd	r0, [r4, #24]
   17a98:	mul	lr, r6, lr
   17a9c:	umull	r2, r3, ip, r6
   17aa0:	mla	ip, ip, r7, lr
   17aa4:	add	r3, ip, r3
   17aa8:	cmp	r3, r1
   17aac:	cmpeq	r2, r0
   17ab0:	bls	17b98 <__assert_fail@plt+0x6444>
   17ab4:	strd	sl, [sp, #8]
   17ab8:	b	174e4 <__assert_fail@plt+0x5d90>
   17abc:	ldrd	r2, [sp, #40]	; 0x28
   17ac0:	orrs	r3, r2, r3
   17ac4:	bne	17b00 <__assert_fail@plt+0x63ac>
   17ac8:	cmp	r7, #0
   17acc:	cmpeq	r6, #1
   17ad0:	bls	171bc <__assert_fail@plt+0x5a68>
   17ad4:	add	r3, pc, #356	; 0x164
   17ad8:	ldrd	r2, [r3]
   17adc:	cmp	r7, r3
   17ae0:	cmpeq	r6, r2
   17ae4:	bhi	17bd8 <__assert_fail@plt+0x6484>
   17ae8:	mov	r2, r6
   17aec:	mov	r3, r7
   17af0:	ldr	r0, [sp, #72]	; 0x48
   17af4:	add	sp, sp, #84	; 0x54
   17af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17afc:	b	12958 <__assert_fail@plt+0x1204>
   17b00:	mov	r2, r6
   17b04:	mov	r3, r7
   17b08:	ldrd	r0, [sp, #40]	; 0x28
   17b0c:	bl	15110 <__assert_fail@plt+0x39bc>
   17b10:	cmp	r0, #0
   17b14:	bne	17b40 <__assert_fail@plt+0x63ec>
   17b18:	ldr	r3, [sp, #72]	; 0x48
   17b1c:	mov	ip, #1
   17b20:	str	r3, [sp, #4]
   17b24:	mov	r2, r6
   17b28:	mov	r3, r7
   17b2c:	ldrd	r0, [sp, #40]	; 0x28
   17b30:	str	ip, [sp]
   17b34:	bl	15bbc <__assert_fail@plt+0x4468>
   17b38:	add	sp, sp, #84	; 0x54
   17b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b40:	ldr	r3, [sp, #72]	; 0x48
   17b44:	ldrd	r2, [r3, #8]
   17b48:	orrs	r3, r2, r3
   17b4c:	bne	17c3c <__assert_fail@plt+0x64e8>
   17b50:	ldr	r3, [sp, #72]	; 0x48
   17b54:	mov	r1, r3
   17b58:	strd	r6, [r3]
   17b5c:	ldrd	r2, [sp, #40]	; 0x28
   17b60:	strd	r2, [r1, #8]
   17b64:	b	171bc <__assert_fail@plt+0x5a68>
   17b68:	mov	r6, r2
   17b6c:	mov	r7, r3
   17b70:	ldrd	r2, [sp, #16]
   17b74:	b	17734 <__assert_fail@plt+0x5fe0>
   17b78:	mov	r6, r2
   17b7c:	mov	r7, r3
   17b80:	ldrd	r2, [sp, #16]
   17b84:	b	1789c <__assert_fail@plt+0x6148>
   17b88:	mov	r6, r2
   17b8c:	mov	r7, r3
   17b90:	ldrd	r2, [sp, #16]
   17b94:	b	177f0 <__assert_fail@plt+0x609c>
   17b98:	mov	r6, r2
   17b9c:	mov	r7, r3
   17ba0:	ldrd	r2, [sp, #8]
   17ba4:	b	17a84 <__assert_fail@plt+0x6330>
   17ba8:	mov	r6, r2
   17bac:	mov	r7, r3
   17bb0:	ldrd	r2, [sp, #8]
   17bb4:	b	17a2c <__assert_fail@plt+0x62d8>
   17bb8:	mov	r6, r2
   17bbc:	mov	r7, r3
   17bc0:	ldrd	r2, [sp, #16]
   17bc4:	b	179c4 <__assert_fail@plt+0x6270>
   17bc8:	mov	r6, r2
   17bcc:	mov	r7, r3
   17bd0:	ldrd	r2, [sp, #16]
   17bd4:	b	17938 <__assert_fail@plt+0x61e4>
   17bd8:	mov	r0, r6
   17bdc:	mov	r1, r7
   17be0:	bl	17c54 <__assert_fail@plt+0x6500>
   17be4:	cmp	r0, #0
   17be8:	bne	17ae8 <__assert_fail@plt+0x6394>
   17bec:	ldr	r3, [sp, #72]	; 0x48
   17bf0:	mov	r0, r6
   17bf4:	mov	r1, r7
   17bf8:	mov	r2, #1
   17bfc:	add	sp, sp, #84	; 0x54
   17c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c04:	b	185d4 <__assert_fail@plt+0x6e80>
   17c08:	mov	r1, ip
   17c0c:	mov	ip, #64	; 0x40
   17c10:	b	17224 <__assert_fail@plt+0x5ad0>
   17c14:	mov	r1, r3
   17c18:	str	r3, [sp, #76]	; 0x4c
   17c1c:	mov	r2, #3
   17c20:	mov	r3, #0
   17c24:	strd	r2, [sp, #8]
   17c28:	sub	r3, r1, #816	; 0x330
   17c2c:	str	r3, [sp, #68]	; 0x44
   17c30:	mov	r3, #0
   17c34:	str	r3, [sp, #64]	; 0x40
   17c38:	b	174a4 <__assert_fail@plt+0x5d50>
   17c3c:	bl	11798 <__assert_fail@plt+0x44>
   17c40:	cmneq	sp, r8, ror sp
   17c44:	andeq	r0, r0, r0
   17c48:	andeq	r3, r2, r0, lsr #32
   17c4c:	muleq	r0, fp, r2
   17c50:	andeq	r5, r2, r0, asr sl
   17c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c58:	mov	r2, r0
   17c5c:	mov	r3, r1
   17c60:	sub	sp, sp, #556	; 0x22c
   17c64:	strd	r2, [sp, #160]	; 0xa0
   17c68:	subs	r2, r0, #1
   17c6c:	sbc	r3, r1, #0
   17c70:	mov	r0, r2
   17c74:	mov	r1, r3
   17c78:	and	r2, r2, #1
   17c7c:	mov	r3, #0
   17c80:	orrs	r3, r2, r3
   17c84:	strd	r0, [sp, #208]	; 0xd0
   17c88:	mov	r2, r0
   17c8c:	mov	r3, r1
   17c90:	bne	18590 <__assert_fail@plt+0x6e3c>
   17c94:	mov	r1, #0
   17c98:	lsrs	r3, r3, #1
   17c9c:	rrx	r2, r2
   17ca0:	and	r4, r2, #1
   17ca4:	mov	r5, #0
   17ca8:	orrs	r0, r4, r5
   17cac:	add	r1, r1, #1
   17cb0:	beq	17c98 <__assert_fail@plt+0x6544>
   17cb4:	strd	r2, [sp, #248]	; 0xf8
   17cb8:	str	r1, [sp, #260]	; 0x104
   17cbc:	ldrd	r6, [sp, #160]	; 0xa0
   17cc0:	ldr	r1, [pc, #2284]	; 185b4 <__assert_fail@plt+0x6e60>
   17cc4:	ldr	lr, [sp, #160]	; 0xa0
   17cc8:	mov	r2, r6
   17ccc:	mov	r3, r7
   17cd0:	lsrs	r3, r3, #1
   17cd4:	rrx	r2, r2
   17cd8:	and	r2, r2, #127	; 0x7f
   17cdc:	add	r3, r1, r2
   17ce0:	mov	r0, #0
   17ce4:	ldrb	r2, [r3, #708]	; 0x2c4
   17ce8:	mov	r1, #0
   17cec:	mov	r4, r0
   17cf0:	mov	sl, r2
   17cf4:	umull	r2, r3, r2, r2
   17cf8:	strd	r0, [sp, #184]	; 0xb8
   17cfc:	mov	r5, r1
   17d00:	mul	ip, r2, r7
   17d04:	umull	r0, r1, r2, r6
   17d08:	mla	r3, lr, r3, ip
   17d0c:	adds	sl, sl, sl
   17d10:	mov	fp, #0
   17d14:	adc	fp, fp, fp
   17d18:	add	r1, r3, r1
   17d1c:	subs	r2, sl, r0
   17d20:	sbc	r3, fp, r1
   17d24:	adds	sl, r2, r2
   17d28:	adc	fp, r3, r3
   17d2c:	mul	r1, r2, r3
   17d30:	umull	r2, r3, r2, r2
   17d34:	add	r3, r3, r1, lsl #1
   17d38:	mul	ip, r2, r7
   17d3c:	umull	r0, r1, r2, r6
   17d40:	mla	r3, lr, r3, ip
   17d44:	subs	r2, sl, r0
   17d48:	add	r1, r3, r1
   17d4c:	sbc	r3, fp, r1
   17d50:	adds	sl, r2, r2
   17d54:	adc	fp, r3, r3
   17d58:	mul	r1, r2, r3
   17d5c:	umull	r2, r3, r2, r2
   17d60:	add	r3, r3, r1, lsl #1
   17d64:	mul	ip, r2, r7
   17d68:	umull	r0, r1, r2, r6
   17d6c:	mla	r3, lr, r3, ip
   17d70:	mov	r2, #64	; 0x40
   17d74:	mov	lr, r2
   17d78:	add	r1, r3, r1
   17d7c:	subs	r2, sl, r0
   17d80:	sbc	r3, fp, r1
   17d84:	mov	ip, #0
   17d88:	strd	r2, [sp, #112]	; 0x70
   17d8c:	mov	sl, r4
   17d90:	mov	r2, #1
   17d94:	mov	r3, #0
   17d98:	mov	fp, r5
   17d9c:	lsl	r9, r6, #31
   17da0:	lsrs	r7, r7, #1
   17da4:	rrx	r6, r6
   17da8:	lsrs	r5, r5, #1
   17dac:	rrx	r4, r4
   17db0:	cmp	r7, r3
   17db4:	mov	r8, #0
   17db8:	cmpeq	r6, r2
   17dbc:	orr	r4, r4, r8
   17dc0:	orr	r5, r5, r9
   17dc4:	bcc	17de8 <__assert_fail@plt+0x6694>
   17dc8:	moveq	r1, #1
   17dcc:	movne	r1, r8
   17dd0:	cmp	r5, fp
   17dd4:	cmpeq	r4, sl
   17dd8:	movhi	r1, #0
   17ddc:	andls	r1, r1, #1
   17de0:	cmp	r1, r8
   17de4:	beq	17e14 <__assert_fail@plt+0x66c0>
   17de8:	cmp	r5, fp
   17dec:	cmpeq	r4, sl
   17df0:	movhi	r0, #1
   17df4:	movls	r0, #0
   17df8:	subs	r2, r2, r6
   17dfc:	sbc	r3, r3, r7
   17e00:	subs	r2, r2, r0
   17e04:	sbc	r3, r3, ip
   17e08:	subs	sl, sl, r4
   17e0c:	mov	r1, ip
   17e10:	sbc	fp, fp, r5
   17e14:	subs	lr, lr, #1
   17e18:	bne	17d9c <__assert_fail@plt+0x6648>
   17e1c:	ldrd	r8, [sp, #160]	; 0xa0
   17e20:	strd	sl, [sp, #184]	; 0xb8
   17e24:	str	lr, [sp, #52]	; 0x34
   17e28:	subs	r2, r8, sl
   17e2c:	sbc	r3, r9, fp
   17e30:	cmp	r3, fp
   17e34:	cmpeq	r2, sl
   17e38:	movhi	r2, #1
   17e3c:	movls	r2, #0
   17e40:	rsbs	r2, r2, #0
   17e44:	sbc	r3, r3, r3
   17e48:	mov	r4, r8
   17e4c:	adds	r6, sl, sl
   17e50:	adc	r7, fp, fp
   17e54:	mov	r0, r6
   17e58:	mov	r5, r9
   17e5c:	and	r4, r4, r2
   17e60:	subs	r6, r0, r8
   17e64:	mov	r2, r4
   17e68:	mov	r1, r7
   17e6c:	and	r5, r5, r3
   17e70:	sbc	r7, r1, r9
   17e74:	mov	r3, r5
   17e78:	mov	r4, r8
   17e7c:	adds	r8, r2, r6
   17e80:	mov	r0, sl
   17e84:	mov	r1, fp
   17e88:	mov	r5, r9
   17e8c:	mov	r6, sl
   17e90:	adc	r9, r3, r7
   17e94:	mov	r7, fp
   17e98:	ldrd	sl, [sp, #248]	; 0xf8
   17e9c:	ldr	r3, [sp, #260]	; 0x104
   17ea0:	strd	r0, [sp, #24]
   17ea4:	str	r3, [sp, #16]
   17ea8:	strd	sl, [sp, #8]
   17eac:	ldrd	r2, [sp, #112]	; 0x70
   17eb0:	strd	r8, [sp]
   17eb4:	mov	r0, r4
   17eb8:	mov	r1, r5
   17ebc:	strd	r8, [sp, #176]	; 0xb0
   17ec0:	bl	12c24 <__assert_fail@plt+0x14d0>
   17ec4:	subs	r3, r0, #0
   17ec8:	str	r3, [sp, #284]	; 0x11c
   17ecc:	beq	1857c <__assert_fail@plt+0x6e28>
   17ed0:	ldr	r2, [pc, #1760]	; 185b8 <__assert_fail@plt+0x6e64>
   17ed4:	add	r3, sp, #296	; 0x128
   17ed8:	str	r2, [sp, #256]	; 0x100
   17edc:	str	r3, [sp]
   17ee0:	mov	r0, #0
   17ee4:	ldrd	r2, [sp, #208]	; 0xd0
   17ee8:	mov	r1, #0
   17eec:	bl	17164 <__assert_fail@plt+0x5a10>
   17ef0:	ldrb	r3, [sp, #546]	; 0x222
   17ef4:	add	r1, sp, #272	; 0x110
   17ef8:	mov	r2, r4
   17efc:	str	r3, [sp, #196]	; 0xc4
   17f00:	mov	r3, #0
   17f04:	mov	r8, #2
   17f08:	strd	r2, [r1]
   17f0c:	mov	r9, #0
   17f10:	mov	r0, r6
   17f14:	mov	r1, #0
   17f18:	add	r3, sp, #264	; 0x108
   17f1c:	str	r5, [sp, #168]	; 0xa8
   17f20:	str	r7, [sp, #280]	; 0x118
   17f24:	strd	r8, [sp, #240]	; 0xf0
   17f28:	strd	r0, [r3]
   17f2c:	ldr	r3, [sp, #196]	; 0xc4
   17f30:	cmp	r3, #0
   17f34:	beq	184b8 <__assert_fail@plt+0x6d64>
   17f38:	add	r3, sp, #304	; 0x130
   17f3c:	str	r3, [sp, #192]	; 0xc0
   17f40:	ldr	r3, [sp, #52]	; 0x34
   17f44:	str	r3, [sp, #172]	; 0xac
   17f48:	ldrd	r2, [sp, #176]	; 0xb0
   17f4c:	mov	r3, #0
   17f50:	strd	r2, [sp, #200]	; 0xc8
   17f54:	add	r3, sp, #272	; 0x110
   17f58:	ldrd	r8, [r3]
   17f5c:	ldr	r1, [sp, #192]	; 0xc0
   17f60:	ldrd	r2, [r1, #8]!
   17f64:	str	r1, [sp, #192]	; 0xc0
   17f68:	ldrd	r0, [sp, #208]	; 0xd0
   17f6c:	bl	22ad0 <__assert_fail@plt+0x1137c>
   17f70:	mov	r3, #0
   17f74:	and	r2, r0, #1
   17f78:	orrs	r3, r2, r3
   17f7c:	strd	r0, [sp, #96]	; 0x60
   17f80:	bne	1849c <__assert_fail@plt+0x6d48>
   17f84:	mov	r2, r0
   17f88:	mov	r3, r1
   17f8c:	orrs	r3, r2, r3
   17f90:	ldrd	r2, [sp, #184]	; 0xb8
   17f94:	strd	r2, [sp, #56]	; 0x38
   17f98:	beq	18308 <__assert_fail@plt+0x6bb4>
   17f9c:	ldrd	sl, [sp, #176]	; 0xb0
   17fa0:	ldrd	r6, [sp, #200]	; 0xc8
   17fa4:	mul	r3, r6, r7
   17fa8:	umull	r4, r5, r6, r6
   17fac:	umull	r0, r1, fp, r6
   17fb0:	add	r3, r5, r3, lsl #1
   17fb4:	str	r3, [sp, #64]	; 0x40
   17fb8:	mov	r3, #0
   17fbc:	str	r3, [sp, #68]	; 0x44
   17fc0:	mla	r1, fp, r7, r1
   17fc4:	ldrd	r6, [sp, #64]	; 0x40
   17fc8:	adds	r2, r0, r0
   17fcc:	adc	r3, r1, r1
   17fd0:	adds	r6, r6, r2
   17fd4:	adc	r7, r7, r3
   17fd8:	cmp	r1, r7
   17fdc:	cmpeq	r0, r6
   17fe0:	mov	r2, r6
   17fe4:	mov	r3, r7
   17fe8:	umull	r6, r7, fp, fp
   17fec:	bls	17ff8 <__assert_fail@plt+0x68a4>
   17ff0:	adds	r6, r6, #0
   17ff4:	adc	r7, r7, #1
   17ff8:	mov	r1, #0
   17ffc:	str	r1, [sp, #36]	; 0x24
   18000:	str	r3, [sp, #32]
   18004:	str	r2, [sp, #76]	; 0x4c
   18008:	ldrd	r2, [sp, #32]
   1800c:	ldr	fp, [sp, #168]	; 0xa8
   18010:	str	r3, [sp, #72]	; 0x48
   18014:	ldrd	r0, [sp, #72]	; 0x48
   18018:	adds	r0, r0, r4
   1801c:	ldrd	r4, [sp, #112]	; 0x70
   18020:	adc	r1, r1, #0
   18024:	adds	r2, r2, r6
   18028:	adc	r3, r3, r7
   1802c:	mul	ip, r0, r5
   18030:	mov	r6, r2
   18034:	mov	r7, r3
   18038:	umull	r2, r3, r0, r4
   1803c:	mla	ip, r4, r1, ip
   18040:	ldr	r1, [sp, #52]	; 0x34
   18044:	add	ip, ip, r3
   18048:	mul	lr, r2, r9
   1804c:	mul	sl, r1, r2
   18050:	umull	r0, r1, r2, fp
   18054:	umull	r4, r5, ip, r8
   18058:	strd	r0, [sp, #40]	; 0x28
   1805c:	mov	r3, #0
   18060:	umull	r0, r1, r2, r8
   18064:	mla	sl, fp, r3, sl
   18068:	mla	lr, r8, r3, lr
   1806c:	ldr	r3, [sp, #44]	; 0x2c
   18070:	mla	r5, ip, r9, r5
   18074:	add	r3, sl, r3
   18078:	str	r3, [sp, #44]	; 0x2c
   1807c:	mov	sl, #0
   18080:	add	r3, lr, r1
   18084:	str	r3, [sp, #80]	; 0x50
   18088:	ldrd	r0, [sp, #40]	; 0x28
   1808c:	str	sl, [sp, #84]	; 0x54
   18090:	umull	r2, r3, ip, fp
   18094:	ldrd	sl, [sp, #80]	; 0x50
   18098:	adds	r0, r0, r4
   1809c:	adc	r1, r1, r5
   180a0:	adds	sl, sl, r0
   180a4:	adc	fp, fp, r1
   180a8:	ldr	lr, [sp, #52]	; 0x34
   180ac:	cmp	r5, fp
   180b0:	cmpeq	r4, sl
   180b4:	mov	r1, fp
   180b8:	mla	r3, ip, lr, r3
   180bc:	bls	180c8 <__assert_fail@plt+0x6974>
   180c0:	adds	r2, r2, #0
   180c4:	adc	r3, r3, #1
   180c8:	str	r1, [sp, #88]	; 0x58
   180cc:	mov	r1, #0
   180d0:	str	r1, [sp, #92]	; 0x5c
   180d4:	ldrd	r0, [sp, #88]	; 0x58
   180d8:	adds	r0, r0, r2
   180dc:	adc	r1, r1, r3
   180e0:	subs	sl, r6, r0
   180e4:	sbc	fp, r7, r1
   180e8:	cmp	r7, r1
   180ec:	cmpeq	r6, r0
   180f0:	bcs	18108 <__assert_fail@plt+0x69b4>
   180f4:	ldrd	r2, [sp, #160]	; 0xa0
   180f8:	adds	r2, r2, sl
   180fc:	adc	r3, r3, fp
   18100:	mov	sl, r2
   18104:	mov	fp, r3
   18108:	ldrd	r2, [sp, #96]	; 0x60
   1810c:	lsrs	r3, r3, #1
   18110:	rrx	r2, r2
   18114:	strd	r2, [sp, #96]	; 0x60
   18118:	and	r2, r2, #1
   1811c:	mov	r3, #0
   18120:	orrs	r3, r2, r3
   18124:	beq	182f4 <__assert_fail@plt+0x6ba0>
   18128:	ldrd	r4, [sp, #56]	; 0x38
   1812c:	mov	r7, #0
   18130:	mov	r1, #0
   18134:	umull	r2, r3, fp, r4
   18138:	mul	ip, r4, r7
   1813c:	mov	r0, r4
   18140:	umull	r4, r5, r5, sl
   18144:	strd	r2, [sp, #40]	; 0x28
   18148:	umull	r2, r3, r0, sl
   1814c:	mla	r0, sl, r1, ip
   18150:	ldr	ip, [sp, #60]	; 0x3c
   18154:	strd	r2, [sp, #152]	; 0x98
   18158:	mov	r6, sl
   1815c:	mla	r5, ip, r7, r5
   18160:	ldr	ip, [sp, #44]	; 0x2c
   18164:	mla	r1, fp, r1, ip
   18168:	str	r1, [sp, #44]	; 0x2c
   1816c:	add	r1, r0, r3
   18170:	mov	r3, #0
   18174:	str	r3, [sp, #124]	; 0x7c
   18178:	str	r1, [sp, #120]	; 0x78
   1817c:	ldrd	r2, [sp, #40]	; 0x28
   18180:	ldrd	r0, [sp, #120]	; 0x78
   18184:	adds	r2, r2, r4
   18188:	adc	r3, r3, r5
   1818c:	adds	r0, r0, r2
   18190:	adc	r1, r1, r3
   18194:	cmp	r5, r1
   18198:	mov	r3, r1
   1819c:	ldr	r1, [sp, #60]	; 0x3c
   181a0:	cmpeq	r4, r0
   181a4:	mov	r2, r0
   181a8:	umull	r0, r1, r1, fp
   181ac:	bls	181b8 <__assert_fail@plt+0x6a64>
   181b0:	adds	r0, r0, #0
   181b4:	adc	r1, r1, #1
   181b8:	mov	ip, #0
   181bc:	str	r3, [sp, #104]	; 0x68
   181c0:	str	ip, [sp, #108]	; 0x6c
   181c4:	ldrd	r4, [sp, #104]	; 0x68
   181c8:	str	r2, [sp, #132]	; 0x84
   181cc:	ldr	ip, [sp, #152]	; 0x98
   181d0:	str	r5, [sp, #128]	; 0x80
   181d4:	ldrd	r2, [sp, #128]	; 0x80
   181d8:	adds	r2, r2, ip
   181dc:	adc	r3, r3, #0
   181e0:	adds	r4, r4, r0
   181e4:	adc	r5, r5, r1
   181e8:	strd	r4, [sp, #152]	; 0x98
   181ec:	ldrd	r4, [sp, #112]	; 0x70
   181f0:	mul	ip, r2, r5
   181f4:	umull	r0, r1, r2, r4
   181f8:	mla	ip, r4, r3, ip
   181fc:	mov	r2, r0
   18200:	add	ip, ip, r1
   18204:	mov	r3, #0
   18208:	umull	r0, r1, ip, r8
   1820c:	mul	lr, r2, r9
   18210:	strd	r0, [sp, #40]	; 0x28
   18214:	ldr	r1, [sp, #52]	; 0x34
   18218:	mul	r0, r1, r2
   1821c:	ldr	r1, [sp, #168]	; 0xa8
   18220:	umull	r4, r5, r2, r1
   18224:	strd	r4, [sp, #56]	; 0x38
   18228:	umull	r4, r5, r2, r8
   1822c:	mla	r2, r1, r3, r0
   18230:	ldr	r0, [sp, #44]	; 0x2c
   18234:	mla	r3, r8, r3, lr
   18238:	mla	r0, ip, r9, r0
   1823c:	add	r3, r3, r5
   18240:	str	r0, [sp, #44]	; 0x2c
   18244:	ldr	r0, [sp, #60]	; 0x3c
   18248:	ldrd	r4, [sp, #40]	; 0x28
   1824c:	add	r2, r2, r0
   18250:	str	r2, [sp, #60]	; 0x3c
   18254:	str	r3, [sp, #136]	; 0x88
   18258:	umull	r2, r3, ip, r1
   1825c:	ldrd	r0, [sp, #56]	; 0x38
   18260:	ldr	lr, [sp, #52]	; 0x34
   18264:	adds	r0, r0, r4
   18268:	mov	r4, #0
   1826c:	str	r4, [sp, #140]	; 0x8c
   18270:	adc	r1, r1, r5
   18274:	ldrd	r4, [sp, #136]	; 0x88
   18278:	mla	r3, ip, lr, r3
   1827c:	adds	r4, r4, r0
   18280:	adc	r5, r5, r1
   18284:	mov	r0, r4
   18288:	mov	r1, r5
   1828c:	ldrd	r4, [sp, #40]	; 0x28
   18290:	cmp	r5, r1
   18294:	cmpeq	r4, r0
   18298:	bls	182a4 <__assert_fail@plt+0x6b50>
   1829c:	adds	r2, r2, #0
   182a0:	adc	r3, r3, #1
   182a4:	str	r1, [sp, #144]	; 0x90
   182a8:	mov	r1, #0
   182ac:	str	r1, [sp, #148]	; 0x94
   182b0:	ldrd	r0, [sp, #144]	; 0x90
   182b4:	ldrd	r4, [sp, #152]	; 0x98
   182b8:	adds	r0, r0, r2
   182bc:	adc	r1, r1, r3
   182c0:	mov	r2, r0
   182c4:	subs	r0, r4, r2
   182c8:	mov	r3, r1
   182cc:	sbc	r1, r5, r3
   182d0:	cmp	r5, r3
   182d4:	cmpeq	r4, r2
   182d8:	strd	r0, [sp, #56]	; 0x38
   182dc:	bcs	17fa4 <__assert_fail@plt+0x6850>
   182e0:	ldrd	r2, [sp, #160]	; 0xa0
   182e4:	adds	r2, r2, r0
   182e8:	adc	r3, r3, r1
   182ec:	strd	r2, [sp, #56]	; 0x38
   182f0:	b	17fa4 <__assert_fail@plt+0x6850>
   182f4:	ldrd	r2, [sp, #96]	; 0x60
   182f8:	orrs	r3, r2, r3
   182fc:	movne	r6, sl
   18300:	movne	r7, #0
   18304:	bne	17fa4 <__assert_fail@plt+0x6850>
   18308:	ldr	r3, [sp, #172]	; 0xac
   1830c:	ldr	r2, [sp, #196]	; 0xc4
   18310:	add	r3, r3, #1
   18314:	cmp	r3, r2
   18318:	str	r3, [sp, #172]	; 0xac
   1831c:	ldrd	r0, [sp, #184]	; 0xb8
   18320:	ldrd	r2, [sp, #56]	; 0x38
   18324:	beq	184ac <__assert_fail@plt+0x6d58>
   18328:	cmp	r3, r1
   1832c:	cmpeq	r2, r0
   18330:	bne	17f5c <__assert_fail@plt+0x6808>
   18334:	ldr	r1, [sp, #256]	; 0x100
   18338:	mov	r3, #0
   1833c:	mov	r5, #0
   18340:	ldrb	r2, [r1, #1]!
   18344:	str	r1, [sp, #256]	; 0x100
   18348:	ldrd	r0, [sp, #240]	; 0xf0
   1834c:	adds	r0, r0, r2
   18350:	adc	r1, r1, r3
   18354:	add	r3, sp, #264	; 0x108
   18358:	mov	r8, r0
   1835c:	ldrd	sl, [r3]
   18360:	ldr	r0, [sp, #280]	; 0x118
   18364:	mov	r9, r1
   18368:	mul	lr, sl, r5
   1836c:	umull	r2, r3, r1, sl
   18370:	mul	ip, r0, r5
   18374:	mla	r1, r8, fp, lr
   18378:	ldr	lr, [sp, #52]	; 0x34
   1837c:	umull	r4, r5, r0, r8
   18380:	umull	r6, r7, sl, r8
   18384:	mla	ip, lr, r8, ip
   18388:	mov	sl, fp
   1838c:	add	r5, ip, r5
   18390:	add	r1, r1, r7
   18394:	mov	ip, #0
   18398:	str	r1, [sp, #216]	; 0xd8
   1839c:	str	ip, [sp, #220]	; 0xdc
   183a0:	mla	r3, r9, sl, r3
   183a4:	ldrd	sl, [sp, #216]	; 0xd8
   183a8:	adds	r2, r2, r4
   183ac:	adc	r3, r3, r5
   183b0:	umull	r0, r1, r0, r9
   183b4:	strd	r8, [sp, #240]	; 0xf0
   183b8:	adds	sl, sl, r2
   183bc:	adc	fp, fp, r3
   183c0:	cmp	r5, fp
   183c4:	cmpeq	r4, sl
   183c8:	mov	r2, sl
   183cc:	mov	r3, fp
   183d0:	mla	r1, lr, r9, r1
   183d4:	bls	183e0 <__assert_fail@plt+0x6c8c>
   183d8:	adds	r0, r0, #0
   183dc:	adc	r1, r1, #1
   183e0:	mov	ip, #0
   183e4:	str	r3, [sp, #224]	; 0xe0
   183e8:	str	ip, [sp, #228]	; 0xe4
   183ec:	ldrd	r4, [sp, #224]	; 0xe0
   183f0:	str	r2, [sp, #236]	; 0xec
   183f4:	adds	r2, r4, r0
   183f8:	adc	r3, r5, r1
   183fc:	str	r5, [sp, #232]	; 0xe8
   18400:	mov	r0, r2
   18404:	mov	r1, r3
   18408:	ldrd	r2, [sp, #232]	; 0xe8
   1840c:	adds	r2, r2, r6
   18410:	adc	r3, r3, #0
   18414:	orrs	ip, r0, r1
   18418:	strd	r2, [sp, #176]	; 0xb0
   1841c:	bne	184c4 <__assert_fail@plt+0x6d70>
   18420:	mov	r0, r2
   18424:	mov	r1, r3
   18428:	ldrd	r2, [sp, #160]	; 0xa0
   1842c:	bl	22ad0 <__assert_fail@plt+0x1137c>
   18430:	strd	r2, [sp, #176]	; 0xb0
   18434:	ldrd	r2, [sp, #184]	; 0xb8
   18438:	ldrd	r0, [sp, #160]	; 0xa0
   1843c:	strd	r2, [sp, #24]
   18440:	ldr	r3, [sp, #260]	; 0x104
   18444:	str	r3, [sp, #16]
   18448:	ldrd	r2, [sp, #248]	; 0xf8
   1844c:	strd	r2, [sp, #8]
   18450:	ldrd	r2, [sp, #176]	; 0xb0
   18454:	strd	r2, [sp]
   18458:	ldrd	r2, [sp, #112]	; 0x70
   1845c:	bl	12c24 <__assert_fail@plt+0x14d0>
   18460:	cmp	r0, #0
   18464:	beq	1857c <__assert_fail@plt+0x6e28>
   18468:	ldr	r3, [pc, #332]	; 185bc <__assert_fail@plt+0x6e68>
   1846c:	ldr	r2, [sp, #256]	; 0x100
   18470:	cmp	r3, r2
   18474:	bne	17f2c <__assert_fail@plt+0x67d8>
   18478:	mov	r2, #5
   1847c:	ldr	r1, [pc, #316]	; 185c0 <__assert_fail@plt+0x6e6c>
   18480:	mov	r0, #0
   18484:	bl	11430 <dcgettext@plt>
   18488:	mov	r1, #0
   1848c:	mov	r2, r0
   18490:	mov	r0, r1
   18494:	bl	11520 <error@plt>
   18498:	bl	11748 <abort@plt>
   1849c:	ldrd	r2, [sp, #176]	; 0xb0
   184a0:	strd	r2, [sp, #56]	; 0x38
   184a4:	mov	fp, r3
   184a8:	b	17fa0 <__assert_fail@plt+0x684c>
   184ac:	cmp	r3, r1
   184b0:	cmpeq	r2, r0
   184b4:	beq	18334 <__assert_fail@plt+0x6be0>
   184b8:	ldr	r0, [sp, #284]	; 0x11c
   184bc:	add	sp, sp, #556	; 0x22c
   184c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184c4:	ldrd	r2, [sp, #160]	; 0xa0
   184c8:	cmp	r3, r1
   184cc:	cmpeq	r2, r0
   184d0:	bls	185a0 <__assert_fail@plt+0x6e4c>
   184d4:	mov	r4, #0
   184d8:	ldrd	sl, [sp, #176]	; 0xb0
   184dc:	mov	r6, r2
   184e0:	mov	r7, r3
   184e4:	mov	r5, r4
   184e8:	mov	ip, #64	; 0x40
   184ec:	lsl	r3, r6, #31
   184f0:	lsrs	r7, r7, #1
   184f4:	rrx	r6, r6
   184f8:	lsrs	r5, r5, #1
   184fc:	rrx	r4, r4
   18500:	cmp	r7, r1
   18504:	mov	r2, #0
   18508:	cmpeq	r6, r0
   1850c:	orr	r4, r4, r2
   18510:	orr	r5, r5, r3
   18514:	bcc	18538 <__assert_fail@plt+0x6de4>
   18518:	moveq	lr, #1
   1851c:	movne	lr, r2
   18520:	cmp	r5, fp
   18524:	cmpeq	r4, sl
   18528:	movhi	lr, #0
   1852c:	andls	lr, lr, #1
   18530:	cmp	lr, r2
   18534:	beq	18564 <__assert_fail@plt+0x6e10>
   18538:	cmp	r5, fp
   1853c:	cmpeq	r4, sl
   18540:	movhi	r8, #1
   18544:	movls	r8, #0
   18548:	subs	r0, r0, r6
   1854c:	sbc	r1, r1, r7
   18550:	mov	r9, #0
   18554:	subs	r0, r0, r8
   18558:	sbc	r1, r1, r9
   1855c:	subs	sl, sl, r4
   18560:	sbc	fp, fp, r5
   18564:	subs	ip, ip, #1
   18568:	bne	184ec <__assert_fail@plt+0x6d98>
   1856c:	add	r1, sp, #288	; 0x120
   18570:	strd	sl, [sp, #176]	; 0xb0
   18574:	strd	r2, [r1]
   18578:	b	18434 <__assert_fail@plt+0x6ce0>
   1857c:	mov	r3, #0
   18580:	str	r3, [sp, #284]	; 0x11c
   18584:	ldr	r0, [sp, #284]	; 0x11c
   18588:	add	sp, sp, #556	; 0x22c
   1858c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18590:	strd	r2, [sp, #248]	; 0xf8
   18594:	mov	r3, #0
   18598:	str	r3, [sp, #260]	; 0x104
   1859c:	b	17cbc <__assert_fail@plt+0x6568>
   185a0:	ldr	r3, [pc, #28]	; 185c4 <__assert_fail@plt+0x6e70>
   185a4:	ldr	r2, [pc, #28]	; 185c8 <__assert_fail@plt+0x6e74>
   185a8:	ldr	r1, [pc, #28]	; 185cc <__assert_fail@plt+0x6e78>
   185ac:	ldr	r0, [pc, #28]	; 185d0 <__assert_fail@plt+0x6e7c>
   185b0:	bl	11754 <__assert_fail@plt>
   185b4:	ldrdeq	r2, [r2], -r0
   185b8:	andeq	r2, r2, pc, ror #25
   185bc:	andeq	r2, r2, fp, lsl #31
   185c0:	muleq	r2, r0, lr
   185c4:	strdeq	r5, [r2], -r4
   185c8:	andeq	r0, r0, lr, ror #9
   185cc:	muleq	r2, r0, sp
   185d0:	andeq	r5, r2, ip, asr #29
   185d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185d8:	cmp	r1, #0
   185dc:	sub	sp, sp, #324	; 0x144
   185e0:	cmpeq	r0, #1
   185e4:	strd	r0, [sp, #48]	; 0x30
   185e8:	str	r2, [sp, #300]	; 0x12c
   185ec:	str	r3, [sp, #304]	; 0x130
   185f0:	bls	192f4 <__assert_fail@plt+0x7ba0>
   185f4:	mov	r2, #0
   185f8:	mov	r3, #0
   185fc:	ldrd	r6, [sp, #48]	; 0x30
   18600:	mov	r0, #1
   18604:	mov	r1, #0
   18608:	mov	r4, r2
   1860c:	mov	r5, r3
   18610:	mov	ip, #64	; 0x40
   18614:	mov	sl, r2
   18618:	mov	fp, r3
   1861c:	strd	r8, [sp]
   18620:	lsl	r3, r6, #31
   18624:	lsrs	r7, r7, #1
   18628:	rrx	r6, r6
   1862c:	lsrs	r5, r5, #1
   18630:	rrx	r4, r4
   18634:	cmp	r7, r1
   18638:	mov	r2, #0
   1863c:	cmpeq	r6, r0
   18640:	orr	r4, r4, r2
   18644:	orr	r5, r5, r3
   18648:	bcc	1866c <__assert_fail@plt+0x6f18>
   1864c:	moveq	lr, #1
   18650:	movne	lr, r2
   18654:	cmp	r5, fp
   18658:	cmpeq	r4, sl
   1865c:	movhi	lr, #0
   18660:	andls	lr, lr, #1
   18664:	cmp	lr, r2
   18668:	beq	186a4 <__assert_fail@plt+0x6f50>
   1866c:	cmp	r5, fp
   18670:	cmpeq	r4, sl
   18674:	movhi	lr, #1
   18678:	movls	lr, #0
   1867c:	mov	r8, lr
   18680:	subs	r0, r0, r6
   18684:	sbc	r1, r1, r7
   18688:	mov	lr, #0
   1868c:	subs	r8, r0, r8
   18690:	sbc	r9, r1, lr
   18694:	subs	sl, sl, r4
   18698:	mov	r0, r8
   1869c:	mov	r1, r9
   186a0:	sbc	fp, fp, r5
   186a4:	subs	ip, ip, #1
   186a8:	bne	18620 <__assert_fail@plt+0x6ecc>
   186ac:	add	r1, sp, #312	; 0x138
   186b0:	mov	r4, sl
   186b4:	strd	r2, [r1]
   186b8:	ldrd	r0, [sp, #48]	; 0x30
   186bc:	mov	r5, fp
   186c0:	ldrd	r8, [sp]
   186c4:	subs	r2, r0, sl
   186c8:	sbc	r3, r1, fp
   186cc:	cmp	fp, r3
   186d0:	cmpeq	sl, r2
   186d4:	movcc	r2, #1
   186d8:	movcs	r2, #0
   186dc:	rsbs	r2, r2, #0
   186e0:	sbc	r3, r3, r3
   186e4:	adds	r6, sl, sl
   186e8:	adc	r7, fp, fp
   186ec:	strd	r4, [sp, #112]	; 0x70
   186f0:	mov	r4, r6
   186f4:	mov	r6, r0
   186f8:	and	r0, r0, r2
   186fc:	mov	r2, r0
   18700:	mov	r5, r7
   18704:	subs	r0, r4, r6
   18708:	mov	r7, r1
   1870c:	and	r1, r1, r3
   18710:	mov	r3, r1
   18714:	sbc	r1, r5, r7
   18718:	adds	r0, r2, r0
   1871c:	adc	r1, r3, r1
   18720:	mov	fp, r1
   18724:	strd	r0, [sp, #120]	; 0x78
   18728:	strd	r0, [sp, #216]	; 0xd8
   1872c:	ldr	r1, [sp, #300]	; 0x12c
   18730:	mov	r3, #0
   18734:	mov	r2, r1
   18738:	mov	sl, r0
   1873c:	add	r0, sp, #288	; 0x120
   18740:	strd	r2, [r0]
   18744:	mov	r3, #1
   18748:	str	r3, [sp, #108]	; 0x6c
   1874c:	str	r3, [sp]
   18750:	add	r3, r1, #1
   18754:	str	r3, [sp, #308]	; 0x134
   18758:	ldrd	r2, [sp, #48]	; 0x30
   1875c:	add	r1, sp, #288	; 0x120
   18760:	ldrd	r0, [r1]
   18764:	cmp	r3, r1
   18768:	cmpeq	r2, r0
   1876c:	bls	19378 <__assert_fail@plt+0x7c24>
   18770:	mov	r6, r2
   18774:	mov	r7, r3
   18778:	add	r1, sp, #280	; 0x118
   1877c:	lsrs	r3, r3, #1
   18780:	rrx	r2, r2
   18784:	ldr	ip, [pc, #3084]	; 19398 <__assert_fail@plt+0x7c44>
   18788:	strd	r2, [r1]
   1878c:	add	r3, sp, #288	; 0x120
   18790:	and	r2, r2, #127	; 0x7f
   18794:	ldrd	r4, [r3]
   18798:	add	r2, ip, r2
   1879c:	ldr	lr, [sp, #48]	; 0x30
   187a0:	subs	r0, r6, r4
   187a4:	sbc	r1, r7, r5
   187a8:	ldrb	r2, [r2, #708]	; 0x2c4
   187ac:	strd	r0, [sp, #88]	; 0x58
   187b0:	mov	r0, r6
   187b4:	mov	r1, r7
   187b8:	ldrd	r6, [r3]
   187bc:	mov	ip, r1
   187c0:	strd	sl, [sp, #232]	; 0xe8
   187c4:	subs	r4, r6, r0
   187c8:	mov	r6, r2
   187cc:	umull	r2, r3, r2, r2
   187d0:	strd	r8, [sp, #208]	; 0xd0
   187d4:	sbc	r5, r7, r1
   187d8:	mul	r1, r2, r1
   187dc:	strd	r4, [sp, #96]	; 0x60
   187e0:	umull	r4, r5, r2, r0
   187e4:	mla	r1, lr, r3, r1
   187e8:	adds	r6, r6, r6
   187ec:	mov	r7, #0
   187f0:	adc	r7, r7, r7
   187f4:	add	r5, r1, r5
   187f8:	subs	r2, r6, r4
   187fc:	sbc	r3, r7, r5
   18800:	adds	r6, r2, r2
   18804:	adc	r7, r3, r3
   18808:	mul	r1, r2, r3
   1880c:	umull	r2, r3, r2, r2
   18810:	ldrd	r4, [sp, #48]	; 0x30
   18814:	add	r3, r3, r1, lsl #1
   18818:	ldr	lr, [sp, #48]	; 0x30
   1881c:	mul	r1, r2, r5
   18820:	umull	r4, r5, r2, r4
   18824:	mla	r1, lr, r3, r1
   18828:	subs	r2, r6, r4
   1882c:	add	r5, r1, r5
   18830:	sbc	r3, r7, r5
   18834:	adds	r6, r2, r2
   18838:	adc	r7, r3, r3
   1883c:	mul	r1, r2, r3
   18840:	umull	r2, r3, r2, r2
   18844:	ldrd	r4, [sp, #48]	; 0x30
   18848:	add	r3, r3, r1, lsl #1
   1884c:	ldr	lr, [sp, #48]	; 0x30
   18850:	mul	r1, r2, r5
   18854:	umull	r4, r5, r2, r4
   18858:	mla	r3, lr, r3, r1
   1885c:	ldrd	r0, [sp, #48]	; 0x30
   18860:	mov	r1, #0
   18864:	add	r5, r3, r5
   18868:	strd	r0, [sp, #8]
   1886c:	ldrd	r0, [sp, #48]	; 0x30
   18870:	subs	r6, r6, r4
   18874:	sbc	r7, r7, r5
   18878:	and	r0, r0, #1
   1887c:	mov	r1, #0
   18880:	add	r3, sp, #272	; 0x110
   18884:	strd	r6, [sp, #80]	; 0x50
   18888:	strd	r0, [r3]
   1888c:	ldrd	r6, [sp, #120]	; 0x78
   18890:	mov	r3, #0
   18894:	umull	r4, r5, r7, r6
   18898:	mul	lr, r6, r3
   1889c:	umull	r0, r1, r6, r6
   188a0:	mla	r5, r7, r3, r5
   188a4:	add	lr, r1, lr, lsl #1
   188a8:	mov	r3, #0
   188ac:	str	r3, [sp, #132]	; 0x84
   188b0:	str	lr, [sp, #128]	; 0x80
   188b4:	ldrd	r8, [sp, #128]	; 0x80
   188b8:	adds	r2, r4, r4
   188bc:	adc	r3, r5, r5
   188c0:	adds	r8, r8, r2
   188c4:	adc	r9, r9, r3
   188c8:	cmp	r5, r9
   188cc:	cmpeq	r4, r8
   188d0:	mov	r2, r8
   188d4:	mov	r3, r9
   188d8:	umull	r6, r7, r7, r7
   188dc:	bls	188e8 <__assert_fail@plt+0x7194>
   188e0:	adds	r6, r6, #0
   188e4:	adc	r7, r7, #1
   188e8:	mov	lr, #0
   188ec:	str	r3, [sp, #136]	; 0x88
   188f0:	str	lr, [sp, #140]	; 0x8c
   188f4:	ldrd	sl, [sp, #136]	; 0x88
   188f8:	str	r2, [sp, #148]	; 0x94
   188fc:	ldrd	r8, [sp, #8]
   18900:	str	fp, [sp, #144]	; 0x90
   18904:	ldrd	r4, [sp, #144]	; 0x90
   18908:	str	fp, [sp, #156]	; 0x9c
   1890c:	adds	r4, r4, r0
   18910:	adc	r5, r5, #0
   18914:	adds	r2, sl, r6
   18918:	adc	r3, fp, r7
   1891c:	ldrd	r6, [sp, #80]	; 0x50
   18920:	strd	r2, [sp, #56]	; 0x38
   18924:	mov	r3, #0
   18928:	mul	r2, r4, r7
   1892c:	umull	r0, r1, r4, r6
   18930:	mla	r2, r6, r5, r2
   18934:	add	lr, r2, r1
   18938:	mov	r2, r0
   1893c:	umull	r6, r7, lr, r8
   18940:	mul	r1, r2, r9
   18944:	umull	r4, r5, r2, r8
   18948:	mla	r4, r8, r3, r1
   1894c:	umull	r0, r1, r2, ip
   18950:	mla	r7, lr, r9, r7
   18954:	mla	r1, ip, r3, r1
   18958:	add	r3, r4, r5
   1895c:	str	r3, [sp, #152]	; 0x98
   18960:	ldrd	r2, [sp, #152]	; 0x98
   18964:	adds	r0, r0, r6
   18968:	adc	r1, r1, r7
   1896c:	adds	r2, r2, r0
   18970:	adc	r3, r3, r1
   18974:	cmp	r7, r3
   18978:	cmpeq	r6, r2
   1897c:	mov	r1, r3
   18980:	umull	r2, r3, lr, ip
   18984:	bls	18990 <__assert_fail@plt+0x723c>
   18988:	adds	r2, r2, #0
   1898c:	adc	r3, r3, #1
   18990:	str	r1, [sp, #160]	; 0xa0
   18994:	mov	r1, #0
   18998:	str	r1, [sp, #164]	; 0xa4
   1899c:	ldrd	r0, [sp, #160]	; 0xa0
   189a0:	ldrd	r4, [sp, #56]	; 0x38
   189a4:	adds	r0, r0, r2
   189a8:	adc	r1, r1, r3
   189ac:	mov	r2, r0
   189b0:	mov	r3, r1
   189b4:	subs	r0, r4, r2
   189b8:	sbc	r1, r5, r3
   189bc:	cmp	r5, r3
   189c0:	cmpeq	r4, r2
   189c4:	bcs	189dc <__assert_fail@plt+0x7288>
   189c8:	ldrd	r2, [sp, #48]	; 0x30
   189cc:	adds	r2, r2, r0
   189d0:	adc	r3, r3, r1
   189d4:	mov	r0, r2
   189d8:	mov	r1, r3
   189dc:	ldrd	r2, [sp, #88]	; 0x58
   189e0:	ldrd	r4, [sp, #96]	; 0x60
   189e4:	ldrd	r6, [sp, #48]	; 0x30
   189e8:	cmp	r1, r3
   189ec:	cmpeq	r0, r2
   189f0:	movcc	r2, #1
   189f4:	movcs	r2, #0
   189f8:	rsbs	r2, r2, #0
   189fc:	sbc	r3, r3, r3
   18a00:	adds	r4, r4, r0
   18a04:	adc	r5, r5, r1
   18a08:	mov	r0, r4
   18a0c:	mov	r4, r6
   18a10:	ldrd	r8, [sp, #216]	; 0xd8
   18a14:	mov	r1, r5
   18a18:	and	r4, r4, r2
   18a1c:	mov	r5, r7
   18a20:	adds	r4, r4, r0
   18a24:	and	r5, r5, r3
   18a28:	adc	r5, r5, r1
   18a2c:	cmp	r9, r5
   18a30:	cmpeq	r8, r4
   18a34:	mov	r2, r8
   18a38:	movcc	r2, #1
   18a3c:	movcs	r2, #0
   18a40:	mov	r0, r4
   18a44:	mov	r1, r5
   18a48:	rsbs	r2, r2, #0
   18a4c:	mov	r4, r6
   18a50:	sbc	r3, r9, r9
   18a54:	and	r4, r4, r2
   18a58:	subs	r6, r8, r0
   18a5c:	mov	r5, r7
   18a60:	mov	r2, r4
   18a64:	sbc	r7, r9, r1
   18a68:	strd	r0, [sp, #120]	; 0x78
   18a6c:	ldrd	r0, [sp, #112]	; 0x70
   18a70:	adds	r2, r2, r6
   18a74:	and	r5, r5, r3
   18a78:	umull	r8, r9, r1, r2
   18a7c:	ldr	lr, [sp, #116]	; 0x74
   18a80:	mov	r3, r5
   18a84:	adc	r3, r3, r7
   18a88:	mov	r6, r2
   18a8c:	mov	r7, #0
   18a90:	umull	sl, fp, r0, r6
   18a94:	mul	r2, r0, r7
   18a98:	mla	lr, lr, r7, r9
   18a9c:	umull	r0, r1, r3, r0
   18aa0:	strd	r8, [sp, #56]	; 0x38
   18aa4:	mov	r5, #0
   18aa8:	str	lr, [sp, #60]	; 0x3c
   18aac:	mla	r1, r3, r5, r1
   18ab0:	mla	r2, r6, r5, r2
   18ab4:	ldrd	r4, [sp, #56]	; 0x38
   18ab8:	add	r2, r2, fp
   18abc:	mov	lr, #0
   18ac0:	adds	r6, r4, r0
   18ac4:	adc	r7, r5, r1
   18ac8:	str	r2, [sp, #168]	; 0xa8
   18acc:	str	lr, [sp, #172]	; 0xac
   18ad0:	mov	r0, r6
   18ad4:	mov	r1, r7
   18ad8:	ldrd	r6, [sp, #168]	; 0xa8
   18adc:	ldr	lr, [sp, #116]	; 0x74
   18ae0:	adds	r6, r6, r0
   18ae4:	adc	r7, r7, r1
   18ae8:	mov	r1, r7
   18aec:	mov	r0, r6
   18af0:	cmp	r5, r1
   18af4:	cmpeq	r4, r0
   18af8:	umull	r2, r3, lr, r3
   18afc:	bls	18b08 <__assert_fail@plt+0x73b4>
   18b00:	adds	r2, r2, #0
   18b04:	adc	r3, r3, #1
   18b08:	mov	lr, #0
   18b0c:	str	r1, [sp, #176]	; 0xb0
   18b10:	str	lr, [sp, #180]	; 0xb4
   18b14:	ldrd	r4, [sp, #176]	; 0xb0
   18b18:	str	r0, [sp, #188]	; 0xbc
   18b1c:	ldrd	r6, [sp, #80]	; 0x50
   18b20:	str	r5, [sp, #184]	; 0xb8
   18b24:	ldrd	r0, [sp, #184]	; 0xb8
   18b28:	mov	fp, r5
   18b2c:	ldrd	r8, [sp, #8]
   18b30:	adds	r0, r0, sl
   18b34:	adc	r1, r1, #0
   18b38:	adds	r4, r4, r2
   18b3c:	adc	r5, r5, r3
   18b40:	mul	r2, r0, r7
   18b44:	strd	r4, [sp, #56]	; 0x38
   18b48:	umull	r4, r5, r0, r6
   18b4c:	mla	r2, r6, r1, r2
   18b50:	mul	r1, r4, r9
   18b54:	add	lr, r2, r5
   18b58:	mov	r3, #0
   18b5c:	mov	r2, r4
   18b60:	umull	r6, r7, lr, r8
   18b64:	umull	r4, r5, r2, r8
   18b68:	mla	r4, r8, r3, r1
   18b6c:	umull	r0, r1, r2, ip
   18b70:	str	fp, [sp, #196]	; 0xc4
   18b74:	mla	r1, ip, r3, r1
   18b78:	add	r3, r4, r5
   18b7c:	str	r3, [sp, #192]	; 0xc0
   18b80:	mla	r7, lr, r9, r7
   18b84:	ldrd	r2, [sp, #192]	; 0xc0
   18b88:	adds	r0, r0, r6
   18b8c:	adc	r1, r1, r7
   18b90:	adds	r2, r2, r0
   18b94:	adc	r3, r3, r1
   18b98:	cmp	r7, r3
   18b9c:	cmpeq	r6, r2
   18ba0:	mov	r1, r3
   18ba4:	umull	r2, r3, lr, ip
   18ba8:	bls	18bb4 <__assert_fail@plt+0x7460>
   18bac:	adds	r2, r2, #0
   18bb0:	adc	r3, r3, #1
   18bb4:	str	r1, [sp, #200]	; 0xc8
   18bb8:	mov	r1, #0
   18bbc:	str	r1, [sp, #204]	; 0xcc
   18bc0:	ldrd	r0, [sp, #200]	; 0xc8
   18bc4:	ldrd	r4, [sp, #56]	; 0x38
   18bc8:	adds	r0, r0, r2
   18bcc:	adc	r1, r1, r3
   18bd0:	mov	r2, r0
   18bd4:	subs	r0, r4, r2
   18bd8:	mov	r3, r1
   18bdc:	sbc	r1, r5, r3
   18be0:	cmp	r5, r3
   18be4:	cmpeq	r4, r2
   18be8:	strd	r0, [sp, #112]	; 0x70
   18bec:	bcs	18c00 <__assert_fail@plt+0x74ac>
   18bf0:	ldrd	r2, [sp, #48]	; 0x30
   18bf4:	adds	r2, r2, r0
   18bf8:	adc	r3, r3, r1
   18bfc:	strd	r2, [sp, #112]	; 0x70
   18c00:	ldr	r3, [sp]
   18c04:	and	r3, r3, #31
   18c08:	cmp	r3, #1
   18c0c:	beq	18e2c <__assert_fail@plt+0x76d8>
   18c10:	ldr	r3, [sp]
   18c14:	subs	lr, r3, #1
   18c18:	str	lr, [sp]
   18c1c:	bne	1888c <__assert_fail@plt+0x7138>
   18c20:	ldr	r3, [sp, #108]	; 0x6c
   18c24:	cmp	r3, #0
   18c28:	lsl	r3, r3, #1
   18c2c:	str	r3, [sp, #296]	; 0x128
   18c30:	beq	192b8 <__assert_fail@plt+0x7b64>
   18c34:	ldrd	r2, [sp, #120]	; 0x78
   18c38:	mov	sl, r2
   18c3c:	mov	fp, r3
   18c40:	umull	r0, r1, fp, fp
   18c44:	umull	r4, r5, sl, sl
   18c48:	strd	r0, [sp]
   18c4c:	mov	r3, #0
   18c50:	umull	r0, r1, fp, sl
   18c54:	mul	r6, sl, r3
   18c58:	mla	r1, fp, r3, r1
   18c5c:	add	r6, r5, r6, lsl #1
   18c60:	mov	r3, #0
   18c64:	str	r3, [sp, #20]
   18c68:	str	r6, [sp, #16]
   18c6c:	ldrd	r6, [sp, #16]
   18c70:	ldrd	sl, [sp]
   18c74:	adds	r2, r0, r0
   18c78:	adc	r3, r1, r1
   18c7c:	adds	r6, r6, r2
   18c80:	adc	r7, r7, r3
   18c84:	mov	r2, r6
   18c88:	mov	r3, r7
   18c8c:	adds	r6, sl, #0
   18c90:	str	r7, [sp, #24]
   18c94:	adc	r7, fp, #1
   18c98:	cmp	r1, r3
   18c9c:	cmpeq	r0, r2
   18ca0:	mov	r8, #0
   18ca4:	mov	r1, #0
   18ca8:	movls	r6, sl
   18cac:	movls	r7, fp
   18cb0:	str	r1, [sp, #28]
   18cb4:	adds	r0, r8, r4
   18cb8:	adc	r1, r2, #0
   18cbc:	mov	r9, r2
   18cc0:	ldrd	r2, [sp, #24]
   18cc4:	ldrd	r4, [sp, #80]	; 0x50
   18cc8:	str	r8, [sp, #36]	; 0x24
   18ccc:	adds	r2, r2, r6
   18cd0:	umull	sl, fp, r0, r4
   18cd4:	str	r8, [sp, #44]	; 0x2c
   18cd8:	adc	r3, r3, r7
   18cdc:	ldrd	r6, [sp, #8]
   18ce0:	strd	r2, [sp, #56]	; 0x38
   18ce4:	mul	r2, r0, r5
   18ce8:	mul	r3, sl, r7
   18cec:	mla	r2, r4, r1, r2
   18cf0:	umull	r0, r1, sl, ip
   18cf4:	add	r2, r2, fp
   18cf8:	strd	r0, [sp]
   18cfc:	mov	fp, #0
   18d00:	mov	r0, r6
   18d04:	mov	r7, r6
   18d08:	umull	r4, r5, r2, r6
   18d0c:	umull	r6, r7, sl, r7
   18d10:	mla	r6, r0, fp, r3
   18d14:	ldr	r3, [sp, #4]
   18d18:	add	r1, r6, r7
   18d1c:	mla	r3, ip, fp, r3
   18d20:	str	r1, [sp, #32]
   18d24:	str	r3, [sp, #4]
   18d28:	ldr	r3, [sp, #12]
   18d2c:	ldrd	r0, [sp]
   18d30:	ldrd	r6, [sp, #32]
   18d34:	mla	r5, r2, r3, r5
   18d38:	umull	r2, r3, r2, ip
   18d3c:	ldrd	sl, [sp, #48]	; 0x30
   18d40:	adds	r0, r0, r4
   18d44:	adc	r1, r1, r5
   18d48:	adds	r6, r6, r0
   18d4c:	adc	r7, r7, r1
   18d50:	mov	r0, r6
   18d54:	mov	r1, r7
   18d58:	adds	r6, r2, #0
   18d5c:	str	r7, [sp, #40]	; 0x28
   18d60:	adc	r7, r3, #1
   18d64:	cmp	r5, r1
   18d68:	cmpeq	r4, r0
   18d6c:	ldrd	r0, [sp, #40]	; 0x28
   18d70:	ldrd	r4, [sp, #56]	; 0x38
   18d74:	movhi	r2, r6
   18d78:	movhi	r3, r7
   18d7c:	adds	r0, r0, r2
   18d80:	adc	r1, r1, r3
   18d84:	mov	r2, r0
   18d88:	subs	r0, r4, r2
   18d8c:	mov	r3, r1
   18d90:	sbc	r1, r5, r3
   18d94:	adds	sl, sl, r0
   18d98:	adc	fp, fp, r1
   18d9c:	cmp	r5, r3
   18da0:	cmpeq	r4, r2
   18da4:	ldrd	r2, [sp, #88]	; 0x58
   18da8:	movcs	fp, r1
   18dac:	movcs	sl, r0
   18db0:	cmp	fp, r3
   18db4:	cmpeq	sl, r2
   18db8:	ldrd	r0, [sp, #96]	; 0x60
   18dbc:	movcc	r2, #1
   18dc0:	movcs	r2, #0
   18dc4:	rsbs	r2, r2, #0
   18dc8:	sbc	r3, r3, r3
   18dcc:	adds	r0, r0, sl
   18dd0:	adc	r1, r1, fp
   18dd4:	mov	sl, r0
   18dd8:	mov	fp, r1
   18ddc:	ldrd	r0, [sp, #48]	; 0x30
   18de0:	add	lr, lr, #1
   18de4:	and	r1, r1, r3
   18de8:	and	r0, r0, r2
   18dec:	ldr	r3, [sp, #108]	; 0x6c
   18df0:	adds	sl, sl, r0
   18df4:	adc	fp, fp, r1
   18df8:	cmp	r3, lr
   18dfc:	bne	18c40 <__assert_fail@plt+0x74ec>
   18e00:	ldrd	r2, [sp, #120]	; 0x78
   18e04:	strd	sl, [sp, #232]	; 0xe8
   18e08:	str	lr, [sp]
   18e0c:	strd	r2, [sp, #216]	; 0xd8
   18e10:	ldr	r3, [sp, #296]	; 0x128
   18e14:	mov	r2, sl
   18e18:	str	r3, [sp, #108]	; 0x6c
   18e1c:	mov	r3, fp
   18e20:	strd	r8, [sp, #208]	; 0xd0
   18e24:	strd	r2, [sp, #120]	; 0x78
   18e28:	b	1888c <__assert_fail@plt+0x7138>
   18e2c:	add	r3, sp, #272	; 0x110
   18e30:	ldrd	r2, [r3]
   18e34:	orrs	r3, r2, r3
   18e38:	bne	19298 <__assert_fail@plt+0x7b44>
   18e3c:	ldrd	r6, [sp, #112]	; 0x70
   18e40:	ldrd	r2, [sp, #48]	; 0x30
   18e44:	ldrd	sl, [sp, #232]	; 0xe8
   18e48:	ldrd	r8, [sp, #208]	; 0xd0
   18e4c:	lsrs	r7, r7, #1
   18e50:	rrx	r6, r6
   18e54:	and	r0, r2, #1
   18e58:	mov	r1, #0
   18e5c:	orrs	r1, r0, r1
   18e60:	beq	18ed0 <__assert_fail@plt+0x777c>
   18e64:	lsrs	r5, r3, #1
   18e68:	rrx	r4, r2
   18e6c:	subs	r4, r4, r6
   18e70:	sbc	r5, r5, r7
   18e74:	orrs	r1, r4, r5
   18e78:	beq	18edc <__assert_fail@plt+0x7788>
   18e7c:	asr	r3, r5, #31
   18e80:	str	r3, [sp, #64]	; 0x40
   18e84:	str	r3, [sp, #68]	; 0x44
   18e88:	ldrd	r2, [sp, #64]	; 0x40
   18e8c:	mov	r0, r2
   18e90:	mov	r1, r3
   18e94:	and	r0, r0, r4
   18e98:	adds	r6, r6, r0
   18e9c:	and	r1, r1, r5
   18ea0:	adc	r7, r7, r1
   18ea4:	ldrd	r0, [sp, #64]	; 0x40
   18ea8:	eor	r2, r2, r4
   18eac:	eor	r3, r3, r5
   18eb0:	subs	r0, r2, r0
   18eb4:	sbc	r1, r3, r1
   18eb8:	mov	r2, r0
   18ebc:	mov	r3, r1
   18ec0:	and	r0, r2, #1
   18ec4:	mov	r1, #0
   18ec8:	orrs	r1, r0, r1
   18ecc:	bne	18e64 <__assert_fail@plt+0x7710>
   18ed0:	lsrs	r3, r3, #1
   18ed4:	rrx	r2, r2
   18ed8:	b	18e54 <__assert_fail@plt+0x7700>
   18edc:	bic	r2, r2, #1
   18ee0:	orrs	r3, r2, r3
   18ee4:	strd	sl, [sp, #232]	; 0xe8
   18ee8:	strd	r8, [sp, #208]	; 0xd0
   18eec:	bne	18f00 <__assert_fail@plt+0x77ac>
   18ef0:	ldrd	r2, [sp, #120]	; 0x78
   18ef4:	strd	r2, [sp, #232]	; 0xe8
   18ef8:	b	18c10 <__assert_fail@plt+0x74bc>
   18efc:	ldrd	sl, [sp, #232]	; 0xe8
   18f00:	mov	r3, #0
   18f04:	umull	r4, r5, fp, sl
   18f08:	mul	lr, sl, r3
   18f0c:	umull	r0, r1, sl, sl
   18f10:	mla	r5, fp, r3, r5
   18f14:	add	r3, r1, lr, lsl #1
   18f18:	str	r3, [sp, #240]	; 0xf0
   18f1c:	mov	r3, #0
   18f20:	str	r3, [sp, #244]	; 0xf4
   18f24:	ldrd	r6, [sp, #240]	; 0xf0
   18f28:	adds	r2, r4, r4
   18f2c:	adc	r3, r5, r5
   18f30:	adds	r6, r6, r2
   18f34:	adc	r7, r7, r3
   18f38:	cmp	r5, r7
   18f3c:	cmpeq	r4, r6
   18f40:	mov	r2, r6
   18f44:	mov	r3, r7
   18f48:	umull	sl, fp, fp, fp
   18f4c:	bls	18f58 <__assert_fail@plt+0x7804>
   18f50:	adds	sl, sl, #0
   18f54:	adc	fp, fp, #1
   18f58:	mov	lr, #0
   18f5c:	str	lr, [sp, #228]	; 0xe4
   18f60:	str	r3, [sp, #224]	; 0xe0
   18f64:	str	r2, [sp, #252]	; 0xfc
   18f68:	ldrd	r2, [sp, #224]	; 0xe0
   18f6c:	ldrd	r4, [sp, #80]	; 0x50
   18f70:	ldrd	r8, [sp, #8]
   18f74:	str	r3, [sp, #248]	; 0xf8
   18f78:	ldrd	r6, [sp, #248]	; 0xf8
   18f7c:	adds	r6, r6, r0
   18f80:	adc	r7, r7, #0
   18f84:	adds	r2, r2, sl
   18f88:	mov	sl, r2
   18f8c:	mul	r2, r6, r5
   18f90:	umull	r0, r1, r6, r4
   18f94:	mla	r2, r4, r7, r2
   18f98:	adc	r3, r3, fp
   18f9c:	add	lr, r2, r1
   18fa0:	mov	r2, r0
   18fa4:	mov	fp, r3
   18fa8:	mul	r1, r2, r9
   18fac:	mov	r3, #0
   18fb0:	umull	r4, r5, r2, r8
   18fb4:	mla	r4, r8, r3, r1
   18fb8:	umull	r0, r1, r2, ip
   18fbc:	umull	r6, r7, lr, r8
   18fc0:	mla	r1, ip, r3, r1
   18fc4:	add	r3, r4, r5
   18fc8:	str	r3, [sp, #256]	; 0x100
   18fcc:	mov	r3, #0
   18fd0:	str	r3, [sp, #260]	; 0x104
   18fd4:	add	r3, sp, #256	; 0x100
   18fd8:	mla	r7, lr, r9, r7
   18fdc:	ldrd	r2, [r3]
   18fe0:	adds	r0, r0, r6
   18fe4:	adc	r1, r1, r7
   18fe8:	adds	r2, r2, r0
   18fec:	adc	r3, r3, r1
   18ff0:	cmp	r7, r3
   18ff4:	cmpeq	r6, r2
   18ff8:	mov	r1, r3
   18ffc:	umull	r2, r3, lr, ip
   19000:	bls	1900c <__assert_fail@plt+0x78b8>
   19004:	adds	r2, r2, #0
   19008:	adc	r3, r3, #1
   1900c:	str	r1, [sp, #264]	; 0x108
   19010:	mov	r1, #0
   19014:	str	r1, [sp, #268]	; 0x10c
   19018:	add	r1, sp, #264	; 0x108
   1901c:	ldrd	r0, [r1]
   19020:	adds	r0, r0, r2
   19024:	adc	r1, r1, r3
   19028:	mov	r2, r0
   1902c:	mov	r3, r1
   19030:	subs	r0, sl, r2
   19034:	sbc	r1, fp, r3
   19038:	cmp	fp, r3
   1903c:	cmpeq	sl, r2
   19040:	bcs	19058 <__assert_fail@plt+0x7904>
   19044:	ldrd	r2, [sp, #48]	; 0x30
   19048:	adds	r2, r2, r0
   1904c:	adc	r3, r3, r1
   19050:	mov	r0, r2
   19054:	mov	r1, r3
   19058:	ldrd	r2, [sp, #88]	; 0x58
   1905c:	ldrd	r4, [sp, #96]	; 0x60
   19060:	ldrd	r6, [sp, #48]	; 0x30
   19064:	cmp	r1, r3
   19068:	cmpeq	r0, r2
   1906c:	movcc	r2, #1
   19070:	movcs	r2, #0
   19074:	rsbs	r2, r2, #0
   19078:	sbc	r3, r3, r3
   1907c:	adds	r4, r4, r0
   19080:	adc	r5, r5, r1
   19084:	mov	r0, r4
   19088:	mov	r4, r6
   1908c:	and	r4, r4, r2
   19090:	mov	r1, r5
   19094:	mov	r5, r7
   19098:	adds	sl, r4, r0
   1909c:	and	r5, r5, r3
   190a0:	adc	fp, r5, r1
   190a4:	ldrd	r0, [sp, #216]	; 0xd8
   190a8:	mov	r2, r6
   190ac:	mov	r3, r7
   190b0:	cmp	r1, fp
   190b4:	cmpeq	r0, sl
   190b8:	movcc	r4, #1
   190bc:	movcs	r4, #0
   190c0:	rsbs	r4, r4, #0
   190c4:	sbc	r5, r5, r5
   190c8:	and	r2, r2, r4
   190cc:	and	r3, r3, r5
   190d0:	mov	r4, r2
   190d4:	subs	r2, r0, sl
   190d8:	mov	r5, r3
   190dc:	sbc	r3, r1, fp
   190e0:	adds	r4, r4, r2
   190e4:	adc	r5, r5, r3
   190e8:	add	r3, sp, #272	; 0x110
   190ec:	ldrd	r2, [r3]
   190f0:	orrs	r3, r2, r3
   190f4:	bne	19280 <__assert_fail@plt+0x7b2c>
   190f8:	ldrd	r8, [sp, #208]	; 0xd0
   190fc:	lsrs	r3, r5, #1
   19100:	rrx	r2, r4
   19104:	mov	r4, r6
   19108:	mov	r5, r7
   1910c:	and	r0, r4, #1
   19110:	mov	r1, #0
   19114:	orrs	r1, r0, r1
   19118:	beq	19188 <__assert_fail@plt+0x7a34>
   1911c:	lsrs	r7, r5, #1
   19120:	rrx	r6, r4
   19124:	subs	r6, r6, r2
   19128:	sbc	r7, r7, r3
   1912c:	orrs	r1, r6, r7
   19130:	beq	19194 <__assert_fail@plt+0x7a40>
   19134:	asr	r1, r7, #31
   19138:	str	r1, [sp, #72]	; 0x48
   1913c:	str	r1, [sp, #76]	; 0x4c
   19140:	ldrd	r4, [sp, #72]	; 0x48
   19144:	mov	r0, r4
   19148:	mov	r1, r5
   1914c:	and	r0, r0, r6
   19150:	adds	r2, r2, r0
   19154:	and	r1, r1, r7
   19158:	adc	r3, r3, r1
   1915c:	ldrd	r0, [sp, #72]	; 0x48
   19160:	eor	r4, r4, r6
   19164:	eor	r5, r5, r7
   19168:	subs	r0, r4, r0
   1916c:	sbc	r1, r5, r1
   19170:	mov	r4, r0
   19174:	mov	r5, r1
   19178:	and	r0, r4, #1
   1917c:	mov	r1, #0
   19180:	orrs	r1, r0, r1
   19184:	bne	1911c <__assert_fail@plt+0x79c8>
   19188:	lsrs	r5, r5, #1
   1918c:	rrx	r4, r4
   19190:	b	1910c <__assert_fail@plt+0x79b8>
   19194:	orr	r4, r4, #1
   19198:	cmp	r5, #0
   1919c:	cmpeq	r4, #1
   191a0:	strd	r8, [sp, #208]	; 0xd0
   191a4:	beq	18f00 <__assert_fail@plt+0x77ac>
   191a8:	ldrd	r2, [sp, #48]	; 0x30
   191ac:	cmp	r5, r3
   191b0:	cmpeq	r4, r2
   191b4:	beq	19368 <__assert_fail@plt+0x7c14>
   191b8:	mov	r0, r2
   191bc:	mov	r1, r3
   191c0:	mov	r2, r4
   191c4:	mov	r3, r5
   191c8:	bl	22ad0 <__assert_fail@plt+0x1137c>
   191cc:	add	r3, pc, #444	; 0x1bc
   191d0:	ldrd	r2, [r3]
   191d4:	cmp	r5, r3
   191d8:	cmpeq	r4, r2
   191dc:	strd	r0, [sp, #48]	; 0x30
   191e0:	bhi	19320 <__assert_fail@plt+0x7bcc>
   191e4:	mov	r2, r4
   191e8:	mov	r3, r5
   191ec:	ldr	r0, [sp, #304]	; 0x130
   191f0:	bl	12958 <__assert_fail@plt+0x1204>
   191f4:	ldrd	r2, [sp, #48]	; 0x30
   191f8:	cmp	r3, #0
   191fc:	cmpeq	r2, #1
   19200:	bls	19308 <__assert_fail@plt+0x7bb4>
   19204:	add	r1, pc, #388	; 0x184
   19208:	ldrd	r0, [r1]
   1920c:	cmp	r3, r1
   19210:	cmpeq	r2, r0
   19214:	bls	19350 <__assert_fail@plt+0x7bfc>
   19218:	mov	r0, r2
   1921c:	mov	r1, r3
   19220:	bl	17c54 <__assert_fail@plt+0x6500>
   19224:	cmp	r0, #0
   19228:	bne	1934c <__assert_fail@plt+0x7bf8>
   1922c:	ldrd	r4, [sp, #48]	; 0x30
   19230:	ldrd	r0, [sp, #120]	; 0x78
   19234:	mov	r2, r4
   19238:	mov	r3, r5
   1923c:	bl	22ad0 <__assert_fail@plt+0x1137c>
   19240:	ldrd	r0, [sp, #216]	; 0xd8
   19244:	strd	r2, [sp, #120]	; 0x78
   19248:	mov	r2, r4
   1924c:	mov	r3, r5
   19250:	bl	22ad0 <__assert_fail@plt+0x1137c>
   19254:	mov	r0, sl
   19258:	mov	r1, fp
   1925c:	strd	r2, [sp, #216]	; 0xd8
   19260:	mov	r2, r4
   19264:	mov	r3, r5
   19268:	bl	22ad0 <__assert_fail@plt+0x1137c>
   1926c:	mov	sl, r2
   19270:	mov	fp, r3
   19274:	mov	r2, r4
   19278:	mov	r3, r5
   1927c:	b	1875c <__assert_fail@plt+0x7008>
   19280:	orrs	r3, r4, r5
   19284:	beq	192d8 <__assert_fail@plt+0x7b84>
   19288:	add	r3, sp, #280	; 0x118
   1928c:	ldrd	r8, [sp, #208]	; 0xd0
   19290:	ldrd	r2, [r3]
   19294:	b	1910c <__assert_fail@plt+0x79b8>
   19298:	ldrd	r2, [sp, #112]	; 0x70
   1929c:	orrs	r1, r2, r3
   192a0:	beq	18efc <__assert_fail@plt+0x77a8>
   192a4:	add	r1, sp, #280	; 0x118
   192a8:	ldrd	sl, [sp, #232]	; 0xe8
   192ac:	ldrd	r6, [r1]
   192b0:	ldrd	r8, [sp, #208]	; 0xd0
   192b4:	b	18e54 <__assert_fail@plt+0x7700>
   192b8:	mov	r1, r3
   192bc:	ldr	r3, [sp, #108]	; 0x6c
   192c0:	str	r1, [sp, #108]	; 0x6c
   192c4:	str	r3, [sp]
   192c8:	ldrd	r2, [sp, #120]	; 0x78
   192cc:	strd	r2, [sp, #232]	; 0xe8
   192d0:	strd	r2, [sp, #216]	; 0xd8
   192d4:	b	1888c <__assert_fail@plt+0x7138>
   192d8:	ldr	r3, [sp, #300]	; 0x12c
   192dc:	cmp	r7, #0
   192e0:	add	r3, r3, #1
   192e4:	cmpeq	r6, #1
   192e8:	ldrd	r8, [sp, #208]	; 0xd0
   192ec:	str	r3, [sp, #300]	; 0x12c
   192f0:	bne	185f4 <__assert_fail@plt+0x6ea0>
   192f4:	ldr	r3, [pc, #160]	; 1939c <__assert_fail@plt+0x7c48>
   192f8:	ldr	r2, [pc, #160]	; 193a0 <__assert_fail@plt+0x7c4c>
   192fc:	ldr	r1, [pc, #160]	; 193a4 <__assert_fail@plt+0x7c50>
   19300:	ldr	r0, [pc, #160]	; 193a8 <__assert_fail@plt+0x7c54>
   19304:	bl	11754 <__assert_fail@plt>
   19308:	beq	19360 <__assert_fail@plt+0x7c0c>
   1930c:	mov	sl, r6
   19310:	mov	fp, r7
   19314:	strd	sl, [sp, #216]	; 0xd8
   19318:	strd	sl, [sp, #120]	; 0x78
   1931c:	b	1875c <__assert_fail@plt+0x7008>
   19320:	mov	r0, r4
   19324:	mov	r1, r5
   19328:	bl	17c54 <__assert_fail@plt+0x6500>
   1932c:	cmp	r0, #0
   19330:	bne	191e4 <__assert_fail@plt+0x7a90>
   19334:	mov	r0, r4
   19338:	mov	r1, r5
   1933c:	ldr	r3, [sp, #304]	; 0x130
   19340:	ldr	r2, [sp, #308]	; 0x134
   19344:	bl	185d4 <__assert_fail@plt+0x6e80>
   19348:	b	191f4 <__assert_fail@plt+0x7aa0>
   1934c:	ldrd	r2, [sp, #48]	; 0x30
   19350:	ldr	r0, [sp, #304]	; 0x130
   19354:	add	sp, sp, #324	; 0x144
   19358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1935c:	b	12958 <__assert_fail@plt+0x1204>
   19360:	add	sp, sp, #324	; 0x144
   19364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19368:	ldr	r3, [sp, #300]	; 0x12c
   1936c:	add	r3, r3, #1
   19370:	str	r3, [sp, #300]	; 0x12c
   19374:	b	185f4 <__assert_fail@plt+0x6ea0>
   19378:	ldr	r3, [pc, #28]	; 1939c <__assert_fail@plt+0x7c48>
   1937c:	mov	r2, #1472	; 0x5c0
   19380:	ldr	r1, [pc, #28]	; 193a4 <__assert_fail@plt+0x7c50>
   19384:	ldr	r0, [pc, #32]	; 193ac <__assert_fail@plt+0x7c58>
   19388:	bl	11754 <__assert_fail@plt>
   1938c:	nop			; (mov r0, r0)
   19390:	cmneq	sp, r8, ror sp
   19394:	andeq	r0, r0, r0
   19398:	ldrdeq	r2, [r2], -r0
   1939c:	strdeq	r5, [r2], -ip
   193a0:			; <UNDEFINED> instruction: 0x000005ba
   193a4:	muleq	r2, r0, sp
   193a8:	ldrdeq	r5, [r2], -r8
   193ac:	andeq	r5, r2, r4, ror #29
   193b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193b4:	mov	r2, r0
   193b8:	ldrb	r3, [r0]
   193bc:	sub	sp, sp, #300	; 0x12c
   193c0:	mov	r4, r0
   193c4:	cmp	r3, #32
   193c8:	bne	193d8 <__assert_fail@plt+0x7c84>
   193cc:	ldrb	r3, [r2, #1]!
   193d0:	cmp	r3, #32
   193d4:	beq	193cc <__assert_fail@plt+0x7c78>
   193d8:	cmp	r3, #43	; 0x2b
   193dc:	addeq	r2, r2, #1
   193e0:	mov	r3, r2
   193e4:	str	r2, [sp, #8]
   193e8:	mov	r1, #0
   193ec:	mov	r2, #4
   193f0:	ldrb	r5, [r3], #1
   193f4:	cmp	r5, #0
   193f8:	beq	19448 <__assert_fail@plt+0x7cf4>
   193fc:	sub	r5, r5, #48	; 0x30
   19400:	cmp	r5, #9
   19404:	mov	r2, r1
   19408:	bls	193f0 <__assert_fail@plt+0x7c9c>
   1940c:	mov	r2, #5
   19410:	ldr	r1, [pc, #1216]	; 198d8 <__assert_fail@plt+0x8184>
   19414:	mov	r0, #0
   19418:	bl	11430 <dcgettext@plt>
   1941c:	mov	r5, r0
   19420:	mov	r0, r4
   19424:	bl	1e830 <__assert_fail@plt+0xd0dc>
   19428:	mov	r1, #0
   1942c:	mov	r2, r5
   19430:	mov	r3, r0
   19434:	mov	r0, r1
   19438:	bl	11520 <error@plt>
   1943c:	mov	r0, #0
   19440:	add	sp, sp, #300	; 0x12c
   19444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19448:	cmp	r2, #0
   1944c:	bne	19928 <__assert_fail@plt+0x81d4>
   19450:	ldr	r3, [sp, #8]
   19454:	mov	r8, #0
   19458:	add	r4, r3, #1
   1945c:	ldrb	r2, [r3]
   19460:	mov	r9, #0
   19464:	cmp	r2, #0
   19468:	beq	1991c <__assert_fail@plt+0x81c8>
   1946c:	sub	r2, r2, #48	; 0x30
   19470:	mov	sl, r8
   19474:	mov	fp, r9
   19478:	mov	ip, #10
   1947c:	str	r5, [sp, #12]
   19480:	umull	r6, r7, r8, ip
   19484:	mla	r7, ip, r9, r7
   19488:	adds	r0, r8, r8
   1948c:	adc	r1, r9, r9
   19490:	cmp	r7, r1
   19494:	cmpeq	r6, r0
   19498:	lsr	r3, r9, #31
   1949c:	add	r5, r3, r9, lsr #29
   194a0:	umull	r0, r1, sl, ip
   194a4:	mov	r3, #0
   194a8:	movcc	lr, #1
   194ac:	movcs	lr, #0
   194b0:	adds	r8, r6, r2
   194b4:	adc	r9, r7, r3
   194b8:	cmp	r3, r9
   194bc:	cmpeq	r2, r8
   194c0:	add	r3, lr, r5
   194c4:	movhi	r2, #1
   194c8:	movls	r2, #0
   194cc:	mla	r1, ip, fp, r1
   194d0:	add	r2, r2, r3
   194d4:	adds	sl, r0, r2
   194d8:	mov	r3, #0
   194dc:	adc	fp, r1, r3
   194e0:	cmp	r3, fp
   194e4:	cmpeq	r2, sl
   194e8:	bhi	19510 <__assert_fail@plt+0x7dbc>
   194ec:	ldrb	r2, [r4], #1
   194f0:	cmp	r2, #0
   194f4:	beq	196a4 <__assert_fail@plt+0x7f50>
   194f8:	add	r1, pc, #976	; 0x3d0
   194fc:	ldrd	r0, [r1]
   19500:	sub	r2, r2, #48	; 0x30
   19504:	cmp	fp, r1
   19508:	cmpeq	sl, r0
   1950c:	bls	19480 <__assert_fail@plt+0x7d2c>
   19510:	ldr	r5, [sp, #12]
   19514:	ldr	r3, [pc, #960]	; 198dc <__assert_fail@plt+0x8188>
   19518:	ldrb	r3, [r3, #8]
   1951c:	cmp	r3, #0
   19520:	bne	19878 <__assert_fail@plt+0x8124>
   19524:	ldr	r6, [pc, #948]	; 198e0 <__assert_fail@plt+0x818c>
   19528:	ldr	r1, [sp, #8]
   1952c:	mov	r2, #10
   19530:	add	r0, sp, #16
   19534:	bl	116f4 <__gmpz_init_set_str@plt>
   19538:	mov	r1, #10
   1953c:	add	r2, sp, #16
   19540:	ldr	r0, [r6]
   19544:	bl	114b4 <__gmpz_out_str@plt>
   19548:	ldr	r0, [r6]
   1954c:	ldr	r3, [r0, #20]
   19550:	ldr	r2, [r0, #24]
   19554:	cmp	r3, r2
   19558:	addcc	r1, r3, #1
   1955c:	movcc	r2, #58	; 0x3a
   19560:	strcc	r1, [r0, #20]
   19564:	strbcc	r2, [r3]
   19568:	bcs	198a0 <__assert_fail@plt+0x814c>
   1956c:	add	r1, sp, #40	; 0x28
   19570:	add	r0, sp, #16
   19574:	bl	13598 <__assert_fail@plt+0x1e44>
   19578:	ldr	r2, [sp, #48]	; 0x30
   1957c:	cmp	r2, #0
   19580:	beq	19654 <__assert_fail@plt+0x7f00>
   19584:	ldr	r3, [sp, #44]	; 0x2c
   19588:	mov	fp, r5
   1958c:	mov	sl, r5
   19590:	mov	r9, #32
   19594:	mov	r8, #10
   19598:	ldr	r1, [r3, fp]
   1959c:	cmp	r1, #0
   195a0:	beq	19618 <__assert_fail@plt+0x7ec4>
   195a4:	add	r7, fp, fp, lsl #1
   195a8:	mov	r4, r5
   195ac:	b	195e4 <__assert_fail@plt+0x7e90>
   195b0:	add	r2, r3, #1
   195b4:	str	r2, [r0, #20]
   195b8:	strb	r9, [r3]
   195bc:	ldr	r2, [sp, #40]	; 0x28
   195c0:	ldr	r0, [r6]
   195c4:	add	r2, r2, r7
   195c8:	mov	r1, r8
   195cc:	bl	114b4 <__gmpz_out_str@plt>
   195d0:	ldr	r3, [sp, #44]	; 0x2c
   195d4:	add	r4, r4, #1
   195d8:	ldr	r2, [r3, fp]
   195dc:	cmp	r2, r4
   195e0:	bls	19614 <__assert_fail@plt+0x7ec0>
   195e4:	ldr	r0, [r6]
   195e8:	ldr	r3, [r0, #20]
   195ec:	ldr	r2, [r0, #24]
   195f0:	cmp	r3, r2
   195f4:	bcc	195b0 <__assert_fail@plt+0x7e5c>
   195f8:	mov	r1, r9
   195fc:	bl	116b8 <__overflow@plt>
   19600:	ldr	r2, [sp, #40]	; 0x28
   19604:	mov	r1, r8
   19608:	add	r2, r2, r7
   1960c:	ldr	r0, [r6]
   19610:	b	195cc <__assert_fail@plt+0x7e78>
   19614:	ldr	r2, [sp, #48]	; 0x30
   19618:	add	sl, sl, #1
   1961c:	cmp	sl, r2
   19620:	add	fp, fp, #4
   19624:	bcc	19598 <__assert_fail@plt+0x7e44>
   19628:	cmp	r2, #0
   1962c:	beq	19654 <__assert_fail@plt+0x7f00>
   19630:	mov	r4, r5
   19634:	ldr	r0, [sp, #40]	; 0x28
   19638:	add	r5, r5, #1
   1963c:	add	r0, r0, r4
   19640:	bl	115d4 <__gmpz_clear@plt>
   19644:	ldr	r3, [sp, #48]	; 0x30
   19648:	add	r4, r4, #12
   1964c:	cmp	r5, r3
   19650:	bcc	19634 <__assert_fail@plt+0x7ee0>
   19654:	ldr	r0, [sp, #40]	; 0x28
   19658:	bl	19d04 <__assert_fail@plt+0x85b0>
   1965c:	ldr	r0, [sp, #44]	; 0x2c
   19660:	bl	19d04 <__assert_fail@plt+0x85b0>
   19664:	add	r0, sp, #16
   19668:	bl	115d4 <__gmpz_clear@plt>
   1966c:	ldr	r0, [r6]
   19670:	ldr	r3, [r0, #20]
   19674:	ldr	r2, [r0, #24]
   19678:	cmp	r3, r2
   1967c:	addcc	r1, r3, #1
   19680:	movcc	r2, #10
   19684:	strcc	r1, [r0, #20]
   19688:	strbcc	r2, [r3]
   1968c:	bcs	19894 <__assert_fail@plt+0x8140>
   19690:	ldr	r0, [r6]
   19694:	bl	114c0 <fflush_unlocked@plt>
   19698:	mov	r0, #1
   1969c:	add	sp, sp, #300	; 0x12c
   196a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196a4:	cmp	sl, #0
   196a8:	sbcs	r3, fp, #0
   196ac:	ldr	r5, [sp, #12]
   196b0:	blt	19514 <__assert_fail@plt+0x7dc0>
   196b4:	ldr	r6, [pc, #544]	; 198dc <__assert_fail@plt+0x8188>
   196b8:	ldrb	r3, [r6, #8]
   196bc:	cmp	r3, #0
   196c0:	beq	196dc <__assert_fail@plt+0x7f88>
   196c4:	ldr	r3, [pc, #536]	; 198e4 <__assert_fail@plt+0x8190>
   196c8:	mov	r2, #36	; 0x24
   196cc:	mov	r1, #1
   196d0:	ldr	r3, [r3]
   196d4:	ldr	r0, [pc, #524]	; 198e8 <__assert_fail@plt+0x8194>
   196d8:	bl	114d8 <fwrite@plt>
   196dc:	mov	r2, r8
   196e0:	mov	r3, r9
   196e4:	mov	r0, sl
   196e8:	mov	r1, fp
   196ec:	bl	12a44 <__assert_fail@plt+0x12f0>
   196f0:	ldr	ip, [r6, #4]
   196f4:	mov	lr, #58	; 0x3a
   196f8:	add	ip, ip, #1
   196fc:	strb	lr, [ip, #-1]
   19700:	add	lr, sp, #40	; 0x28
   19704:	mov	r2, r8
   19708:	str	lr, [sp]
   1970c:	mov	r3, r9
   19710:	mov	r0, sl
   19714:	mov	r1, fp
   19718:	str	ip, [r6, #4]
   1971c:	bl	17164 <__assert_fail@plt+0x5a10>
   19720:	ldrb	r2, [sp, #290]	; 0x122
   19724:	ldr	r4, [r6, #4]
   19728:	cmp	r2, #0
   1972c:	beq	197b4 <__assert_fail@plt+0x8060>
   19730:	add	r8, sp, #264	; 0x108
   19734:	add	r9, sp, #56	; 0x38
   19738:	add	r7, sp, #16
   1973c:	mov	sl, #32
   19740:	str	r5, [sp, #8]
   19744:	ldrb	r3, [r8]
   19748:	cmp	r3, #0
   1974c:	beq	197a0 <__assert_fail@plt+0x804c>
   19750:	ldr	fp, [sp, #8]
   19754:	add	r3, r4, #1
   19758:	strb	sl, [r4]
   1975c:	mov	r2, r7
   19760:	ldrd	r0, [r9]
   19764:	str	r3, [r6, #4]
   19768:	bl	19dcc <__assert_fail@plt+0x8678>
   1976c:	ldr	r3, [r6, #4]
   19770:	add	fp, fp, #1
   19774:	sub	r4, r0, r7
   19778:	rsb	r4, r4, #20
   1977c:	mov	r2, r4
   19780:	mov	r1, r0
   19784:	mov	r0, r3
   19788:	bl	113f4 <memcpy@plt>
   1978c:	ldrb	r2, [r8]
   19790:	cmp	fp, r2
   19794:	add	r4, r0, r4
   19798:	bcc	19754 <__assert_fail@plt+0x8000>
   1979c:	ldrb	r2, [sp, #290]	; 0x122
   197a0:	add	r5, r5, #1
   197a4:	cmp	r5, r2
   197a8:	add	r8, r8, #1
   197ac:	add	r9, r9, #8
   197b0:	bcc	19744 <__assert_fail@plt+0x7ff0>
   197b4:	ldrd	r2, [sp, #48]	; 0x30
   197b8:	orrs	r3, r2, r3
   197bc:	beq	197e0 <__assert_fail@plt+0x808c>
   197c0:	mov	r3, #32
   197c4:	strb	r3, [r4]
   197c8:	ldrd	r2, [sp, #40]	; 0x28
   197cc:	add	r4, r4, #1
   197d0:	ldrd	r0, [sp, #48]	; 0x30
   197d4:	str	r4, [r6, #4]
   197d8:	bl	12a44 <__assert_fail@plt+0x12f0>
   197dc:	ldr	r4, [r6, #4]
   197e0:	ldr	r9, [pc, #260]	; 198ec <__assert_fail@plt+0x8198>
   197e4:	ldr	r7, [r6]
   197e8:	add	r5, r4, #1
   197ec:	ldr	r0, [r9]
   197f0:	mov	r3, #10
   197f4:	cmn	r0, #1
   197f8:	str	r5, [r6, #4]
   197fc:	sub	r8, r5, r7
   19800:	strb	r3, [r4]
   19804:	beq	198f4 <__assert_fail@plt+0x81a0>
   19808:	cmp	r0, #0
   1980c:	bne	198ac <__assert_fail@plt+0x8158>
   19810:	cmp	r8, #512	; 0x200
   19814:	addcs	r4, r7, #512	; 0x200
   19818:	bcs	19824 <__assert_fail@plt+0x80d0>
   1981c:	b	19698 <__assert_fail@plt+0x7f44>
   19820:	mov	r4, r2
   19824:	ldrb	r3, [r4, #-1]
   19828:	sub	r2, r4, #1
   1982c:	cmp	r3, #10
   19830:	bne	19820 <__assert_fail@plt+0x80cc>
   19834:	sub	r8, r4, r7
   19838:	mov	r1, r7
   1983c:	mov	r2, r8
   19840:	mov	r0, #1
   19844:	str	r4, [r6, #4]
   19848:	bl	19d5c <__assert_fail@plt+0x8608>
   1984c:	cmp	r8, r0
   19850:	bne	198cc <__assert_fail@plt+0x8178>
   19854:	ldr	r3, [r6]
   19858:	sub	r5, r5, r4
   1985c:	mov	r2, r5
   19860:	mov	r1, r4
   19864:	mov	r0, r3
   19868:	bl	113f4 <memcpy@plt>
   1986c:	add	r5, r0, r5
   19870:	str	r5, [r6, #4]
   19874:	b	19698 <__assert_fail@plt+0x7f44>
   19878:	ldr	r3, [pc, #100]	; 198e4 <__assert_fail@plt+0x8190>
   1987c:	mov	r2, #39	; 0x27
   19880:	mov	r1, #1
   19884:	ldr	r3, [r3]
   19888:	ldr	r0, [pc, #96]	; 198f0 <__assert_fail@plt+0x819c>
   1988c:	bl	114d8 <fwrite@plt>
   19890:	b	19524 <__assert_fail@plt+0x7dd0>
   19894:	mov	r1, #10
   19898:	bl	116b8 <__overflow@plt>
   1989c:	b	19690 <__assert_fail@plt+0x7f3c>
   198a0:	mov	r1, #58	; 0x3a
   198a4:	bl	116b8 <__overflow@plt>
   198a8:	b	1956c <__assert_fail@plt+0x7e18>
   198ac:	mov	r1, r7
   198b0:	mov	r2, r8
   198b4:	mov	r0, #1
   198b8:	bl	19d5c <__assert_fail@plt+0x8608>
   198bc:	cmp	r8, r0
   198c0:	ldreq	r3, [r6]
   198c4:	streq	r3, [r6, #4]
   198c8:	beq	19698 <__assert_fail@plt+0x7f44>
   198cc:	bl	11760 <__assert_fail@plt+0xc>
   198d0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   198d4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   198d8:	andeq	r5, r2, r4, lsl pc
   198dc:	andeq	r7, r3, ip, ror #3
   198e0:	andeq	r7, r3, r4, ror #3
   198e4:	ldrdeq	r7, [r3], -r8
   198e8:	andeq	r5, r2, ip, ror #29
   198ec:	andeq	r7, r3, r8, ror r1
   198f0:	andeq	r5, r2, r8, lsr pc
   198f4:	mov	r0, #0
   198f8:	bl	11730 <isatty@plt>
   198fc:	cmp	r0, #0
   19900:	mov	r0, #1
   19904:	bne	19914 <__assert_fail@plt+0x81c0>
   19908:	bl	11730 <isatty@plt>
   1990c:	adds	r0, r0, #0
   19910:	movne	r0, #1
   19914:	str	r0, [r9]
   19918:	b	19808 <__assert_fail@plt+0x80b4>
   1991c:	mov	sl, r8
   19920:	mov	fp, r9
   19924:	b	196b4 <__assert_fail@plt+0x7f60>
   19928:	cmp	r2, #1
   1992c:	bne	1940c <__assert_fail@plt+0x7cb8>
   19930:	b	19514 <__assert_fail@plt+0x7dc0>
   19934:	subs	r6, r0, #0
   19938:	push	{r7, lr}
   1993c:	sub	sp, sp, #56	; 0x38
   19940:	beq	1997c <__assert_fail@plt+0x8228>
   19944:	ldr	r3, [pc, #616]	; 19bb4 <__assert_fail@plt+0x8460>
   19948:	mov	r2, #5
   1994c:	ldr	r1, [pc, #612]	; 19bb8 <__assert_fail@plt+0x8464>
   19950:	mov	r0, #0
   19954:	ldr	r4, [r3]
   19958:	bl	11430 <dcgettext@plt>
   1995c:	ldr	r3, [pc, #600]	; 19bbc <__assert_fail@plt+0x8468>
   19960:	mov	r1, #1
   19964:	ldr	r3, [r3]
   19968:	mov	r2, r0
   1996c:	mov	r0, r4
   19970:	bl	1164c <__fprintf_chk@plt>
   19974:	mov	r0, r6
   19978:	bl	11598 <exit@plt>
   1997c:	mov	r2, #5
   19980:	ldr	r1, [pc, #568]	; 19bc0 <__assert_fail@plt+0x846c>
   19984:	bl	11430 <dcgettext@plt>
   19988:	ldr	r3, [pc, #556]	; 19bbc <__assert_fail@plt+0x8468>
   1998c:	ldr	r7, [pc, #560]	; 19bc4 <__assert_fail@plt+0x8470>
   19990:	ldr	r4, [pc, #560]	; 19bc8 <__assert_fail@plt+0x8474>
   19994:	ldr	r3, [r3]
   19998:	mov	r2, r3
   1999c:	mov	r1, r0
   199a0:	mov	r0, #1
   199a4:	bl	11628 <__printf_chk@plt>
   199a8:	mov	r2, #5
   199ac:	ldr	r1, [pc, #536]	; 19bcc <__assert_fail@plt+0x8478>
   199b0:	mov	r0, r6
   199b4:	bl	11430 <dcgettext@plt>
   199b8:	ldr	r1, [r7]
   199bc:	bl	1134c <fputs_unlocked@plt>
   199c0:	mov	r2, #5
   199c4:	ldr	r1, [pc, #516]	; 19bd0 <__assert_fail@plt+0x847c>
   199c8:	mov	r0, r6
   199cc:	bl	11430 <dcgettext@plt>
   199d0:	ldr	r1, [r7]
   199d4:	bl	1134c <fputs_unlocked@plt>
   199d8:	mov	r2, #5
   199dc:	ldr	r1, [pc, #496]	; 19bd4 <__assert_fail@plt+0x8480>
   199e0:	mov	r0, r6
   199e4:	bl	11430 <dcgettext@plt>
   199e8:	ldr	r1, [r7]
   199ec:	bl	1134c <fputs_unlocked@plt>
   199f0:	ldm	r4!, {r0, r1, r2, r3}
   199f4:	mov	lr, sp
   199f8:	stmia	lr!, {r0, r1, r2, r3}
   199fc:	ldm	r4!, {r0, r1, r2, r3}
   19a00:	ldr	ip, [sp]
   19a04:	stmia	lr!, {r0, r1, r2, r3}
   19a08:	cmp	ip, #0
   19a0c:	ldm	r4!, {r0, r1, r2, r3}
   19a10:	stmia	lr!, {r0, r1, r2, r3}
   19a14:	ldm	r4, {r0, r1}
   19a18:	moveq	r4, sp
   19a1c:	stm	lr, {r0, r1}
   19a20:	beq	19a50 <__assert_fail@plt+0x82fc>
   19a24:	ldr	r5, [pc, #428]	; 19bd8 <__assert_fail@plt+0x8484>
   19a28:	mov	r4, sp
   19a2c:	b	19a3c <__assert_fail@plt+0x82e8>
   19a30:	ldr	ip, [r4, #8]!
   19a34:	cmp	ip, #0
   19a38:	beq	19a50 <__assert_fail@plt+0x82fc>
   19a3c:	mov	r1, ip
   19a40:	mov	r0, r5
   19a44:	bl	11388 <strcmp@plt>
   19a48:	cmp	r0, #0
   19a4c:	bne	19a30 <__assert_fail@plt+0x82dc>
   19a50:	ldr	r4, [r4, #4]
   19a54:	mov	r2, #5
   19a58:	cmp	r4, #0
   19a5c:	ldr	r1, [pc, #376]	; 19bdc <__assert_fail@plt+0x8488>
   19a60:	beq	19b08 <__assert_fail@plt+0x83b4>
   19a64:	mov	r0, #0
   19a68:	bl	11430 <dcgettext@plt>
   19a6c:	ldr	r3, [pc, #364]	; 19be0 <__assert_fail@plt+0x848c>
   19a70:	ldr	r2, [pc, #364]	; 19be4 <__assert_fail@plt+0x8490>
   19a74:	mov	r1, r0
   19a78:	mov	r0, #1
   19a7c:	bl	11628 <__printf_chk@plt>
   19a80:	mov	r1, #0
   19a84:	mov	r0, #5
   19a88:	bl	116c4 <setlocale@plt>
   19a8c:	cmp	r0, #0
   19a90:	ldreq	r5, [pc, #320]	; 19bd8 <__assert_fail@plt+0x8484>
   19a94:	beq	19ab0 <__assert_fail@plt+0x835c>
   19a98:	mov	r2, #3
   19a9c:	ldr	r1, [pc, #324]	; 19be8 <__assert_fail@plt+0x8494>
   19aa0:	bl	1173c <strncmp@plt>
   19aa4:	ldr	r5, [pc, #300]	; 19bd8 <__assert_fail@plt+0x8484>
   19aa8:	cmp	r0, #0
   19aac:	bne	19b98 <__assert_fail@plt+0x8444>
   19ab0:	mov	r2, #5
   19ab4:	ldr	r1, [pc, #304]	; 19bec <__assert_fail@plt+0x8498>
   19ab8:	mov	r0, #0
   19abc:	bl	11430 <dcgettext@plt>
   19ac0:	ldr	r3, [pc, #272]	; 19bd8 <__assert_fail@plt+0x8484>
   19ac4:	ldr	r2, [pc, #276]	; 19be0 <__assert_fail@plt+0x848c>
   19ac8:	mov	r1, r0
   19acc:	mov	r0, #1
   19ad0:	bl	11628 <__printf_chk@plt>
   19ad4:	mov	r2, #5
   19ad8:	ldr	r1, [pc, #272]	; 19bf0 <__assert_fail@plt+0x849c>
   19adc:	mov	r0, #0
   19ae0:	bl	11430 <dcgettext@plt>
   19ae4:	ldr	r2, [pc, #264]	; 19bf4 <__assert_fail@plt+0x84a0>
   19ae8:	cmp	r4, r5
   19aec:	ldr	r3, [pc, #260]	; 19bf8 <__assert_fail@plt+0x84a4>
   19af0:	movne	r3, r2
   19af4:	mov	r1, r0
   19af8:	mov	r2, r4
   19afc:	mov	r0, #1
   19b00:	bl	11628 <__printf_chk@plt>
   19b04:	b	19974 <__assert_fail@plt+0x8220>
   19b08:	mov	r0, r4
   19b0c:	bl	11430 <dcgettext@plt>
   19b10:	ldr	r3, [pc, #200]	; 19be0 <__assert_fail@plt+0x848c>
   19b14:	ldr	r2, [pc, #200]	; 19be4 <__assert_fail@plt+0x8490>
   19b18:	mov	r1, r0
   19b1c:	mov	r0, #1
   19b20:	bl	11628 <__printf_chk@plt>
   19b24:	mov	r1, r4
   19b28:	mov	r0, #5
   19b2c:	bl	116c4 <setlocale@plt>
   19b30:	cmp	r0, #0
   19b34:	beq	19b4c <__assert_fail@plt+0x83f8>
   19b38:	mov	r2, #3
   19b3c:	ldr	r1, [pc, #164]	; 19be8 <__assert_fail@plt+0x8494>
   19b40:	bl	1173c <strncmp@plt>
   19b44:	cmp	r0, #0
   19b48:	bne	19b90 <__assert_fail@plt+0x843c>
   19b4c:	mov	r2, #5
   19b50:	ldr	r1, [pc, #148]	; 19bec <__assert_fail@plt+0x8498>
   19b54:	mov	r0, #0
   19b58:	bl	11430 <dcgettext@plt>
   19b5c:	ldr	r3, [pc, #116]	; 19bd8 <__assert_fail@plt+0x8484>
   19b60:	ldr	r2, [pc, #120]	; 19be0 <__assert_fail@plt+0x848c>
   19b64:	mov	r4, r3
   19b68:	mov	r1, r0
   19b6c:	mov	r0, #1
   19b70:	bl	11628 <__printf_chk@plt>
   19b74:	ldr	r1, [pc, #116]	; 19bf0 <__assert_fail@plt+0x849c>
   19b78:	mov	r2, #5
   19b7c:	mov	r0, #0
   19b80:	bl	11430 <dcgettext@plt>
   19b84:	ldr	r3, [pc, #108]	; 19bf8 <__assert_fail@plt+0x84a4>
   19b88:	mov	r1, r0
   19b8c:	b	19af8 <__assert_fail@plt+0x83a4>
   19b90:	ldr	r5, [pc, #64]	; 19bd8 <__assert_fail@plt+0x8484>
   19b94:	mov	r4, r5
   19b98:	mov	r2, #5
   19b9c:	ldr	r1, [pc, #88]	; 19bfc <__assert_fail@plt+0x84a8>
   19ba0:	mov	r0, #0
   19ba4:	bl	11430 <dcgettext@plt>
   19ba8:	ldr	r1, [r7]
   19bac:	bl	1134c <fputs_unlocked@plt>
   19bb0:	b	19ab0 <__assert_fail@plt+0x835c>
   19bb4:	ldrdeq	r7, [r3], -r8
   19bb8:	andeq	r5, r2, r8, ror #30
   19bbc:	andeq	r7, r3, r0, lsl #4
   19bc0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   19bc4:	andeq	r7, r3, r4, ror #3
   19bc8:	andeq	r5, r2, r8, lsl sp
   19bcc:			; <UNDEFINED> instruction: 0x00025fb8
   19bd0:	andeq	r6, r2, r0, asr #32
   19bd4:	andeq	r6, r2, r0, ror r0
   19bd8:	andeq	r5, r2, r0, ror #30
   19bdc:	andeq	r6, r2, r8, lsr #1
   19be0:	andeq	r6, r2, r0, asr #1
   19be4:	andeq	r6, r2, r8, ror #1
   19be8:	strdeq	r6, [r2], -r8
   19bec:	andeq	r6, r2, r4, asr #2
   19bf0:	andeq	r6, r2, r0, ror #2
   19bf4:	andeq	r6, r2, ip, rrx
   19bf8:	andeq	r6, r2, ip, lsl #4
   19bfc:	strdeq	r6, [r2], -ip
   19c00:	ldr	r3, [pc, #4]	; 19c0c <__assert_fail@plt+0x84b8>
   19c04:	str	r0, [r3]
   19c08:	bx	lr
   19c0c:	strdeq	r7, [r3], -r8
   19c10:	ldr	r3, [pc, #4]	; 19c1c <__assert_fail@plt+0x84c8>
   19c14:	strb	r0, [r3, #4]
   19c18:	bx	lr
   19c1c:	strdeq	r7, [r3], -r8
   19c20:	ldr	r3, [pc, #192]	; 19ce8 <__assert_fail@plt+0x8594>
   19c24:	push	{r4, r5, r6, lr}
   19c28:	sub	sp, sp, #8
   19c2c:	ldr	r0, [r3]
   19c30:	bl	204d8 <__assert_fail@plt+0xed84>
   19c34:	cmp	r0, #0
   19c38:	beq	19c5c <__assert_fail@plt+0x8508>
   19c3c:	ldr	r4, [pc, #168]	; 19cec <__assert_fail@plt+0x8598>
   19c40:	ldrb	r3, [r4, #4]
   19c44:	cmp	r3, #0
   19c48:	beq	19c78 <__assert_fail@plt+0x8524>
   19c4c:	bl	115e0 <__errno_location@plt>
   19c50:	ldr	r3, [r0]
   19c54:	cmp	r3, #32
   19c58:	bne	19c78 <__assert_fail@plt+0x8524>
   19c5c:	ldr	r3, [pc, #140]	; 19cf0 <__assert_fail@plt+0x859c>
   19c60:	ldr	r0, [r3]
   19c64:	bl	204d8 <__assert_fail@plt+0xed84>
   19c68:	cmp	r0, #0
   19c6c:	bne	19cc0 <__assert_fail@plt+0x856c>
   19c70:	add	sp, sp, #8
   19c74:	pop	{r4, r5, r6, pc}
   19c78:	mov	r2, #5
   19c7c:	ldr	r1, [pc, #112]	; 19cf4 <__assert_fail@plt+0x85a0>
   19c80:	mov	r0, #0
   19c84:	bl	11430 <dcgettext@plt>
   19c88:	ldr	r4, [r4]
   19c8c:	cmp	r4, #0
   19c90:	mov	r5, r0
   19c94:	beq	19ccc <__assert_fail@plt+0x8578>
   19c98:	bl	115e0 <__errno_location@plt>
   19c9c:	ldr	r6, [r0]
   19ca0:	mov	r0, r4
   19ca4:	bl	1d5d0 <__assert_fail@plt+0xbe7c>
   19ca8:	mov	r1, r6
   19cac:	str	r5, [sp]
   19cb0:	ldr	r2, [pc, #64]	; 19cf8 <__assert_fail@plt+0x85a4>
   19cb4:	mov	r3, r0
   19cb8:	mov	r0, #0
   19cbc:	bl	11520 <error@plt>
   19cc0:	ldr	r3, [pc, #52]	; 19cfc <__assert_fail@plt+0x85a8>
   19cc4:	ldr	r0, [r3]
   19cc8:	bl	113e8 <_exit@plt>
   19ccc:	bl	115e0 <__errno_location@plt>
   19cd0:	mov	r3, r5
   19cd4:	ldr	r2, [pc, #36]	; 19d00 <__assert_fail@plt+0x85ac>
   19cd8:	ldr	r1, [r0]
   19cdc:	mov	r0, r4
   19ce0:	bl	11520 <error@plt>
   19ce4:	b	19cc0 <__assert_fail@plt+0x856c>
   19ce8:	andeq	r7, r3, r4, ror #3
   19cec:	strdeq	r7, [r3], -r8
   19cf0:	ldrdeq	r7, [r3], -r8
   19cf4:	andeq	r5, r2, r0, lsl #28
   19cf8:	muleq	r2, r8, r2
   19cfc:	andeq	r7, r3, r0, lsl #3
   19d00:	muleq	r2, ip, r2
   19d04:	push	{r4, r5, lr}
   19d08:	sub	sp, sp, #12
   19d0c:	mov	r5, r0
   19d10:	bl	115e0 <__errno_location@plt>
   19d14:	mov	r2, #0
   19d18:	mov	r4, r0
   19d1c:	ldr	r3, [r0]
   19d20:	str	r2, [r4]
   19d24:	mov	r0, r5
   19d28:	str	r3, [sp]
   19d2c:	str	r3, [sp, #4]
   19d30:	bl	113dc <free@plt>
   19d34:	ldr	r3, [r4]
   19d38:	add	r2, sp, #8
   19d3c:	cmp	r3, #0
   19d40:	moveq	r3, #4
   19d44:	movne	r3, #0
   19d48:	add	r3, r2, r3
   19d4c:	ldr	r3, [r3, #-8]
   19d50:	str	r3, [r4]
   19d54:	add	sp, sp, #12
   19d58:	pop	{r4, r5, pc}
   19d5c:	push	{r4, r5, r6, r7, r8, lr}
   19d60:	subs	r4, r2, #0
   19d64:	beq	19dc4 <__assert_fail@plt+0x8670>
   19d68:	mov	r7, r0
   19d6c:	mov	r5, r1
   19d70:	mov	r6, #0
   19d74:	b	19d90 <__assert_fail@plt+0x863c>
   19d78:	cmp	r0, #0
   19d7c:	beq	19db0 <__assert_fail@plt+0x865c>
   19d80:	subs	r4, r4, r0
   19d84:	add	r6, r6, r0
   19d88:	add	r5, r5, r0
   19d8c:	beq	19da8 <__assert_fail@plt+0x8654>
   19d90:	mov	r2, r4
   19d94:	mov	r1, r5
   19d98:	mov	r0, r7
   19d9c:	bl	1ecec <__assert_fail@plt+0xd598>
   19da0:	cmn	r0, #1
   19da4:	bne	19d78 <__assert_fail@plt+0x8624>
   19da8:	mov	r0, r6
   19dac:	pop	{r4, r5, r6, r7, r8, pc}
   19db0:	bl	115e0 <__errno_location@plt>
   19db4:	mov	r3, #28
   19db8:	str	r3, [r0]
   19dbc:	mov	r0, r6
   19dc0:	pop	{r4, r5, r6, r7, r8, pc}
   19dc4:	mov	r6, r4
   19dc8:	b	19da8 <__assert_fail@plt+0x8654>
   19dcc:	push	{r4, r5, r6, r8, r9, lr}
   19dd0:	mov	r4, r0
   19dd4:	mov	r5, r1
   19dd8:	add	r6, r2, #20
   19ddc:	mov	r8, #10
   19de0:	mov	r9, #0
   19de4:	mov	r3, #0
   19de8:	strb	r3, [r2, #20]
   19dec:	mov	r0, r4
   19df0:	mov	r1, r5
   19df4:	mov	r2, r8
   19df8:	mov	r3, r9
   19dfc:	bl	22ad0 <__assert_fail@plt+0x1137c>
   19e00:	mov	r0, r4
   19e04:	mov	r1, r5
   19e08:	mov	r3, r9
   19e0c:	add	r2, r2, #48	; 0x30
   19e10:	strb	r2, [r6, #-1]!
   19e14:	mov	r2, r8
   19e18:	bl	22ad0 <__assert_fail@plt+0x1137c>
   19e1c:	mov	r4, r0
   19e20:	mov	r5, r1
   19e24:	orrs	r3, r4, r5
   19e28:	bne	19dec <__assert_fail@plt+0x8698>
   19e2c:	mov	r0, r6
   19e30:	pop	{r4, r5, r6, r8, r9, pc}
   19e34:	push	{r4, r5, r6, lr}
   19e38:	subs	r4, r0, #0
   19e3c:	beq	19eb0 <__assert_fail@plt+0x875c>
   19e40:	mov	r1, #47	; 0x2f
   19e44:	bl	116d0 <strrchr@plt>
   19e48:	subs	r5, r0, #0
   19e4c:	beq	19e9c <__assert_fail@plt+0x8748>
   19e50:	add	r6, r5, #1
   19e54:	sub	r3, r6, r4
   19e58:	cmp	r3, #6
   19e5c:	ble	19e9c <__assert_fail@plt+0x8748>
   19e60:	mov	r2, #7
   19e64:	ldr	r1, [pc, #96]	; 19ecc <__assert_fail@plt+0x8778>
   19e68:	sub	r0, r5, #6
   19e6c:	bl	1173c <strncmp@plt>
   19e70:	cmp	r0, #0
   19e74:	bne	19e9c <__assert_fail@plt+0x8748>
   19e78:	mov	r2, #3
   19e7c:	ldr	r1, [pc, #76]	; 19ed0 <__assert_fail@plt+0x877c>
   19e80:	mov	r0, r6
   19e84:	bl	1173c <strncmp@plt>
   19e88:	cmp	r0, #0
   19e8c:	movne	r4, r6
   19e90:	ldreq	r3, [pc, #60]	; 19ed4 <__assert_fail@plt+0x8780>
   19e94:	addeq	r4, r5, #4
   19e98:	streq	r4, [r3]
   19e9c:	ldr	r2, [pc, #52]	; 19ed8 <__assert_fail@plt+0x8784>
   19ea0:	ldr	r3, [pc, #52]	; 19edc <__assert_fail@plt+0x8788>
   19ea4:	str	r4, [r2]
   19ea8:	str	r4, [r3]
   19eac:	pop	{r4, r5, r6, pc}
   19eb0:	ldr	r3, [pc, #40]	; 19ee0 <__assert_fail@plt+0x878c>
   19eb4:	mov	r2, #55	; 0x37
   19eb8:	mov	r1, #1
   19ebc:	ldr	r3, [r3]
   19ec0:	ldr	r0, [pc, #28]	; 19ee4 <__assert_fail@plt+0x8790>
   19ec4:	bl	114d8 <fwrite@plt>
   19ec8:	bl	11748 <abort@plt>
   19ecc:	ldrdeq	r6, [r2], -r8
   19ed0:	andeq	r6, r2, r0, ror #5
   19ed4:	andeq	r7, r3, r8, asr #3
   19ed8:	andeq	r7, r3, r0, lsl #4
   19edc:	andeq	r7, r3, ip, asr #3
   19ee0:	ldrdeq	r7, [r3], -r8
   19ee4:	andeq	r6, r2, r0, lsr #5
   19ee8:	mov	r3, r1
   19eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ef0:	mov	r1, #2
   19ef4:	sub	sp, sp, #116	; 0x74
   19ef8:	mov	r4, r0
   19efc:	mov	r0, r3
   19f00:	bl	1ed80 <__assert_fail@plt+0xd62c>
   19f04:	ldr	r7, [pc, #1984]	; 1a6cc <__assert_fail@plt+0x8f78>
   19f08:	mov	r6, #0
   19f0c:	mov	r5, #1
   19f10:	mov	r9, r0
   19f14:	ldrb	r3, [r4]
   19f18:	cmp	r3, #0
   19f1c:	beq	1a41c <__assert_fail@plt+0x8cc8>
   19f20:	mov	r1, r9
   19f24:	mov	r0, r4
   19f28:	bl	211e4 <__assert_fail@plt+0xfa90>
   19f2c:	subs	r8, r0, #0
   19f30:	beq	1a41c <__assert_fail@plt+0x8cc8>
   19f34:	bl	114fc <__ctype_get_mb_cur_max@plt>
   19f38:	cmp	r0, #1
   19f3c:	bls	1a0b0 <__assert_fail@plt+0x895c>
   19f40:	cmp	r4, r8
   19f44:	str	r4, [sp, #16]
   19f48:	strb	r6, [sp]
   19f4c:	str	r6, [sp, #4]
   19f50:	str	r6, [sp, #8]
   19f54:	strb	r6, [sp, #12]
   19f58:	bcc	19fb8 <__assert_fail@plt+0x8864>
   19f5c:	b	1a54c <__assert_fail@plt+0x8df8>
   19f60:	ldrb	r3, [r4]
   19f64:	and	r2, r3, #31
   19f68:	lsr	r3, r3, #5
   19f6c:	ldr	r3, [r7, r3, lsl #2]
   19f70:	lsr	r3, r3, r2
   19f74:	tst	r3, #1
   19f78:	beq	1a040 <__assert_fail@plt+0x88ec>
   19f7c:	str	r5, [sp, #20]
   19f80:	ldrb	sl, [r4]
   19f84:	strb	r5, [sp, #24]
   19f88:	str	sl, [sp, #28]
   19f8c:	cmp	sl, #0
   19f90:	strb	r5, [sp, #12]
   19f94:	beq	1a03c <__assert_fail@plt+0x88e8>
   19f98:	ldr	r4, [sp, #16]
   19f9c:	ldr	r3, [sp, #20]
   19fa0:	add	r4, r4, r3
   19fa4:	cmp	r8, r4
   19fa8:	strb	r6, [sp, #12]
   19fac:	str	r4, [sp, #16]
   19fb0:	ldrb	r3, [sp, #24]
   19fb4:	bls	1a100 <__assert_fail@plt+0x89ac>
   19fb8:	ldrb	r3, [sp]
   19fbc:	cmp	r3, #0
   19fc0:	beq	19f60 <__assert_fail@plt+0x880c>
   19fc4:	bl	114fc <__ctype_get_mb_cur_max@plt>
   19fc8:	mov	r1, r0
   19fcc:	mov	r0, r4
   19fd0:	bl	1ed54 <__assert_fail@plt+0xd600>
   19fd4:	add	r3, sp, #4
   19fd8:	mov	r1, r4
   19fdc:	mov	r2, r0
   19fe0:	add	r0, sp, #28
   19fe4:	bl	207c8 <__assert_fail@plt+0xf074>
   19fe8:	cmn	r0, #1
   19fec:	str	r0, [sp, #20]
   19ff0:	beq	1a058 <__assert_fail@plt+0x8904>
   19ff4:	cmn	r0, #2
   19ff8:	beq	1a090 <__assert_fail@plt+0x893c>
   19ffc:	cmp	r0, #0
   1a000:	bne	1a070 <__assert_fail@plt+0x891c>
   1a004:	ldr	r4, [sp, #16]
   1a008:	str	r5, [sp, #20]
   1a00c:	ldrb	r3, [r4]
   1a010:	cmp	r3, #0
   1a014:	bne	1a6b8 <__assert_fail@plt+0x8f64>
   1a018:	ldr	sl, [sp, #28]
   1a01c:	cmp	sl, #0
   1a020:	bne	1a4e4 <__assert_fail@plt+0x8d90>
   1a024:	add	r0, sp, #4
   1a028:	strb	r5, [sp, #24]
   1a02c:	bl	1140c <mbsinit@plt>
   1a030:	cmp	r0, #0
   1a034:	bne	1a088 <__assert_fail@plt+0x8934>
   1a038:	strb	r5, [sp, #12]
   1a03c:	bl	11748 <abort@plt>
   1a040:	add	r0, sp, #4
   1a044:	bl	1140c <mbsinit@plt>
   1a048:	cmp	r0, #0
   1a04c:	beq	1a690 <__assert_fail@plt+0x8f3c>
   1a050:	strb	r5, [sp]
   1a054:	b	19fc4 <__assert_fail@plt+0x8870>
   1a058:	str	r5, [sp, #20]
   1a05c:	strb	r6, [sp, #24]
   1a060:	ldr	sl, [sp, #28]
   1a064:	ldr	r4, [sp, #16]
   1a068:	mov	r3, r5
   1a06c:	b	19fa0 <__assert_fail@plt+0x884c>
   1a070:	add	r0, sp, #4
   1a074:	strb	r5, [sp, #24]
   1a078:	bl	1140c <mbsinit@plt>
   1a07c:	ldr	sl, [sp, #28]
   1a080:	cmp	r0, #0
   1a084:	beq	19f8c <__assert_fail@plt+0x8838>
   1a088:	strb	r6, [sp]
   1a08c:	b	19f8c <__assert_fail@plt+0x8838>
   1a090:	ldr	r4, [sp, #16]
   1a094:	mov	r0, r4
   1a098:	bl	115b0 <strlen@plt>
   1a09c:	strb	r6, [sp, #24]
   1a0a0:	ldr	sl, [sp, #28]
   1a0a4:	str	r0, [sp, #20]
   1a0a8:	mov	r3, r0
   1a0ac:	b	19fa0 <__assert_fail@plt+0x884c>
   1a0b0:	cmp	r4, r8
   1a0b4:	bcs	1a5c8 <__assert_fail@plt+0x8e74>
   1a0b8:	bl	1158c <__ctype_b_loc@plt>
   1a0bc:	ldrb	r3, [r8, #-1]
   1a0c0:	lsl	r3, r3, #1
   1a0c4:	ldr	sl, [r0]
   1a0c8:	mov	r0, r9
   1a0cc:	ldrh	r4, [sl, r3]
   1a0d0:	bl	115b0 <strlen@plt>
   1a0d4:	and	r4, r4, #8
   1a0d8:	ldrb	r3, [r8, r0]
   1a0dc:	cmp	r3, #0
   1a0e0:	bne	1a6a4 <__assert_fail@plt+0x8f50>
   1a0e4:	cmp	r4, #0
   1a0e8:	beq	1a5f4 <__assert_fail@plt+0x8ea0>
   1a0ec:	ldrb	r3, [r8]
   1a0f0:	cmp	r3, #0
   1a0f4:	beq	1a41c <__assert_fail@plt+0x8cc8>
   1a0f8:	add	r4, r8, #1
   1a0fc:	b	19f14 <__assert_fail@plt+0x87c0>
   1a100:	cmp	r3, #0
   1a104:	beq	1a54c <__assert_fail@plt+0x8df8>
   1a108:	mov	r0, sl
   1a10c:	bl	115ec <iswalnum@plt>
   1a110:	clz	sl, r0
   1a114:	lsr	sl, sl, #5
   1a118:	strb	r6, [sp, #56]	; 0x38
   1a11c:	ldrb	r3, [sp, #56]	; 0x38
   1a120:	str	r8, [sp, #16]
   1a124:	strb	r6, [sp]
   1a128:	cmp	r3, #0
   1a12c:	str	r6, [sp, #4]
   1a130:	str	r6, [sp, #8]
   1a134:	strb	r6, [sp, #12]
   1a138:	str	r9, [sp, #72]	; 0x48
   1a13c:	str	r6, [sp, #60]	; 0x3c
   1a140:	str	r6, [sp, #64]	; 0x40
   1a144:	strb	r6, [sp, #68]	; 0x44
   1a148:	mov	fp, r9
   1a14c:	bne	1a320 <__assert_fail@plt+0x8bcc>
   1a150:	ldrb	r3, [fp]
   1a154:	and	r2, r3, #31
   1a158:	lsr	r3, r3, #5
   1a15c:	ldr	r3, [r7, r3, lsl #2]
   1a160:	lsr	r3, r3, r2
   1a164:	tst	r3, #1
   1a168:	beq	1a47c <__assert_fail@plt+0x8d28>
   1a16c:	str	r5, [sp, #76]	; 0x4c
   1a170:	ldrb	r3, [fp]
   1a174:	strb	r5, [sp, #80]	; 0x50
   1a178:	strb	r5, [sp, #68]	; 0x44
   1a17c:	cmp	r3, #0
   1a180:	str	r3, [sp, #84]	; 0x54
   1a184:	bne	1a248 <__assert_fail@plt+0x8af4>
   1a188:	ldrb	r3, [sp]
   1a18c:	ldr	r4, [sp, #16]
   1a190:	cmp	r3, #0
   1a194:	bne	1a1c8 <__assert_fail@plt+0x8a74>
   1a198:	ldrb	r3, [r4]
   1a19c:	and	r2, r3, #31
   1a1a0:	lsr	r3, r3, #5
   1a1a4:	ldr	r3, [r7, r3, lsl #2]
   1a1a8:	lsr	r3, r3, r2
   1a1ac:	tst	r3, #1
   1a1b0:	bne	1a5fc <__assert_fail@plt+0x8ea8>
   1a1b4:	add	r0, sp, #4
   1a1b8:	bl	1140c <mbsinit@plt>
   1a1bc:	cmp	r0, #0
   1a1c0:	beq	1a690 <__assert_fail@plt+0x8f3c>
   1a1c4:	strb	r5, [sp]
   1a1c8:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1a1cc:	mov	r1, r0
   1a1d0:	mov	r0, r4
   1a1d4:	bl	1ed54 <__assert_fail@plt+0xd600>
   1a1d8:	add	r3, sp, #4
   1a1dc:	mov	r1, r4
   1a1e0:	mov	r2, r0
   1a1e4:	add	r0, sp, #28
   1a1e8:	bl	207c8 <__assert_fail@plt+0xf074>
   1a1ec:	cmn	r0, #1
   1a1f0:	str	r0, [sp, #20]
   1a1f4:	beq	1a614 <__assert_fail@plt+0x8ec0>
   1a1f8:	cmn	r0, #2
   1a1fc:	beq	1a628 <__assert_fail@plt+0x8ed4>
   1a200:	cmp	r0, #0
   1a204:	bne	1a668 <__assert_fail@plt+0x8f14>
   1a208:	ldr	r3, [sp, #16]
   1a20c:	str	r5, [sp, #20]
   1a210:	ldrb	r3, [r3]
   1a214:	cmp	r3, #0
   1a218:	bne	1a6b8 <__assert_fail@plt+0x8f64>
   1a21c:	ldr	r4, [sp, #28]
   1a220:	cmp	r4, #0
   1a224:	bne	1a4e4 <__assert_fail@plt+0x8d90>
   1a228:	add	r0, sp, #4
   1a22c:	strb	r5, [sp, #24]
   1a230:	bl	1140c <mbsinit@plt>
   1a234:	cmp	r0, #0
   1a238:	strbne	r4, [sp]
   1a23c:	strbne	r5, [sp, #12]
   1a240:	bne	1a3c4 <__assert_fail@plt+0x8c70>
   1a244:	b	1a688 <__assert_fail@plt+0x8f34>
   1a248:	ldrb	r3, [sp]
   1a24c:	ldr	r4, [sp, #16]
   1a250:	cmp	r3, #0
   1a254:	bne	1a288 <__assert_fail@plt+0x8b34>
   1a258:	ldrb	r3, [r4]
   1a25c:	and	r2, r3, #31
   1a260:	lsr	r3, r3, #5
   1a264:	ldr	r3, [r7, r3, lsl #2]
   1a268:	lsr	r3, r3, r2
   1a26c:	tst	r3, #1
   1a270:	bne	1a434 <__assert_fail@plt+0x8ce0>
   1a274:	add	r0, sp, #4
   1a278:	bl	1140c <mbsinit@plt>
   1a27c:	cmp	r0, #0
   1a280:	beq	1a690 <__assert_fail@plt+0x8f3c>
   1a284:	strb	r5, [sp]
   1a288:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1a28c:	mov	r1, r0
   1a290:	mov	r0, r4
   1a294:	bl	1ed54 <__assert_fail@plt+0xd600>
   1a298:	add	r3, sp, #4
   1a29c:	mov	r1, r4
   1a2a0:	mov	r2, r0
   1a2a4:	add	r0, sp, #28
   1a2a8:	bl	207c8 <__assert_fail@plt+0xf074>
   1a2ac:	cmn	r0, #1
   1a2b0:	str	r0, [sp, #20]
   1a2b4:	beq	1a494 <__assert_fail@plt+0x8d40>
   1a2b8:	cmn	r0, #2
   1a2bc:	beq	1a4a8 <__assert_fail@plt+0x8d54>
   1a2c0:	cmp	r0, #0
   1a2c4:	beq	1a4f8 <__assert_fail@plt+0x8da4>
   1a2c8:	ldr	r4, [sp, #28]
   1a2cc:	add	r0, sp, #4
   1a2d0:	strb	r5, [sp, #24]
   1a2d4:	bl	1140c <mbsinit@plt>
   1a2d8:	strb	r5, [sp, #12]
   1a2dc:	cmp	r0, #0
   1a2e0:	strbne	r6, [sp]
   1a2e4:	cmp	r4, #0
   1a2e8:	beq	1a03c <__assert_fail@plt+0x88e8>
   1a2ec:	ldr	r4, [sp, #16]
   1a2f0:	ldr	r2, [sp, #20]
   1a2f4:	ldr	fp, [sp, #72]	; 0x48
   1a2f8:	ldr	r3, [sp, #76]	; 0x4c
   1a2fc:	add	r4, r4, r2
   1a300:	add	fp, fp, r3
   1a304:	ldrb	r3, [sp, #56]	; 0x38
   1a308:	strb	r6, [sp, #12]
   1a30c:	strb	r6, [sp, #68]	; 0x44
   1a310:	cmp	r3, #0
   1a314:	str	r4, [sp, #16]
   1a318:	str	fp, [sp, #72]	; 0x48
   1a31c:	beq	1a150 <__assert_fail@plt+0x89fc>
   1a320:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1a324:	mov	r1, r0
   1a328:	mov	r0, fp
   1a32c:	bl	1ed54 <__assert_fail@plt+0xd600>
   1a330:	add	r3, sp, #60	; 0x3c
   1a334:	mov	r1, fp
   1a338:	mov	r2, r0
   1a33c:	add	r0, sp, #84	; 0x54
   1a340:	bl	207c8 <__assert_fail@plt+0xf074>
   1a344:	cmn	r0, #1
   1a348:	str	r0, [sp, #76]	; 0x4c
   1a34c:	beq	1a450 <__assert_fail@plt+0x8cfc>
   1a350:	cmn	r0, #2
   1a354:	beq	1a51c <__assert_fail@plt+0x8dc8>
   1a358:	cmp	r0, #0
   1a35c:	beq	1a4c4 <__assert_fail@plt+0x8d70>
   1a360:	ldr	r4, [sp, #84]	; 0x54
   1a364:	add	r0, sp, #60	; 0x3c
   1a368:	strb	r5, [sp, #80]	; 0x50
   1a36c:	bl	1140c <mbsinit@plt>
   1a370:	ldrb	r3, [sp, #12]
   1a374:	strb	r5, [sp, #68]	; 0x44
   1a378:	cmp	r0, #0
   1a37c:	strbne	r6, [sp, #56]	; 0x38
   1a380:	cmp	r4, #0
   1a384:	bne	1a460 <__assert_fail@plt+0x8d0c>
   1a388:	cmp	r3, #0
   1a38c:	beq	1a188 <__assert_fail@plt+0x8a34>
   1a390:	ldrb	r3, [sp, #24]
   1a394:	ldr	r4, [sp, #28]
   1a398:	cmp	r3, #0
   1a39c:	beq	1a3a8 <__assert_fail@plt+0x8c54>
   1a3a0:	cmp	r4, #0
   1a3a4:	beq	1a3c4 <__assert_fail@plt+0x8c70>
   1a3a8:	ldrb	r3, [sp, #24]
   1a3ac:	cmp	r3, #0
   1a3b0:	beq	1a3c4 <__assert_fail@plt+0x8c70>
   1a3b4:	mov	r0, r4
   1a3b8:	bl	115ec <iswalnum@plt>
   1a3bc:	cmp	r0, #0
   1a3c0:	bne	1a3cc <__assert_fail@plt+0x8c78>
   1a3c4:	cmp	sl, #0
   1a3c8:	bne	1a420 <__assert_fail@plt+0x8ccc>
   1a3cc:	str	r8, [sp, #16]
   1a3d0:	strb	r6, [sp]
   1a3d4:	str	r6, [sp, #4]
   1a3d8:	str	r6, [sp, #8]
   1a3dc:	strb	r6, [sp, #12]
   1a3e0:	ldrb	r3, [r8]
   1a3e4:	and	r2, r3, #31
   1a3e8:	lsr	r3, r3, #5
   1a3ec:	ldr	r3, [r7, r3, lsl #2]
   1a3f0:	lsr	r3, r3, r2
   1a3f4:	tst	r3, #1
   1a3f8:	beq	1a554 <__assert_fail@plt+0x8e00>
   1a3fc:	str	r5, [sp, #20]
   1a400:	ldrb	r3, [r8]
   1a404:	strb	r5, [sp, #24]
   1a408:	mov	r4, r3
   1a40c:	str	r3, [sp, #28]
   1a410:	cmp	r4, #0
   1a414:	strb	r5, [sp, #12]
   1a418:	bne	1a540 <__assert_fail@plt+0x8dec>
   1a41c:	mov	sl, #0
   1a420:	mov	r0, r9
   1a424:	bl	19d04 <__assert_fail@plt+0x85b0>
   1a428:	mov	r0, sl
   1a42c:	add	sp, sp, #116	; 0x74
   1a430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a434:	str	r5, [sp, #20]
   1a438:	ldrb	r3, [r4]
   1a43c:	strb	r5, [sp, #24]
   1a440:	strb	r5, [sp, #12]
   1a444:	str	r3, [sp, #28]
   1a448:	mov	r4, r3
   1a44c:	b	1a2e4 <__assert_fail@plt+0x8b90>
   1a450:	ldrb	r3, [sp, #12]
   1a454:	str	r5, [sp, #76]	; 0x4c
   1a458:	strb	r6, [sp, #80]	; 0x50
   1a45c:	strb	r5, [sp, #68]	; 0x44
   1a460:	cmp	r3, #0
   1a464:	beq	1a248 <__assert_fail@plt+0x8af4>
   1a468:	ldrb	r3, [sp, #24]
   1a46c:	cmp	r3, #0
   1a470:	ldrne	r4, [sp, #28]
   1a474:	beq	1a2ec <__assert_fail@plt+0x8b98>
   1a478:	b	1a2e4 <__assert_fail@plt+0x8b90>
   1a47c:	add	r0, sp, #60	; 0x3c
   1a480:	bl	1140c <mbsinit@plt>
   1a484:	cmp	r0, #0
   1a488:	beq	1a690 <__assert_fail@plt+0x8f3c>
   1a48c:	strb	r5, [sp, #56]	; 0x38
   1a490:	b	1a320 <__assert_fail@plt+0x8bcc>
   1a494:	str	r5, [sp, #20]
   1a498:	strb	r6, [sp, #24]
   1a49c:	ldr	r4, [sp, #16]
   1a4a0:	mov	r2, r5
   1a4a4:	b	1a2f4 <__assert_fail@plt+0x8ba0>
   1a4a8:	ldr	r4, [sp, #16]
   1a4ac:	mov	r0, r4
   1a4b0:	bl	115b0 <strlen@plt>
   1a4b4:	strb	r6, [sp, #24]
   1a4b8:	str	r0, [sp, #20]
   1a4bc:	mov	r2, r0
   1a4c0:	b	1a2f4 <__assert_fail@plt+0x8ba0>
   1a4c4:	ldr	r3, [sp, #72]	; 0x48
   1a4c8:	str	r5, [sp, #76]	; 0x4c
   1a4cc:	ldrb	r3, [r3]
   1a4d0:	cmp	r3, #0
   1a4d4:	bne	1a6b8 <__assert_fail@plt+0x8f64>
   1a4d8:	ldr	r4, [sp, #84]	; 0x54
   1a4dc:	cmp	r4, #0
   1a4e0:	beq	1a364 <__assert_fail@plt+0x8c10>
   1a4e4:	ldr	r3, [pc, #484]	; 1a6d0 <__assert_fail@plt+0x8f7c>
   1a4e8:	mov	r2, #172	; 0xac
   1a4ec:	ldr	r1, [pc, #480]	; 1a6d4 <__assert_fail@plt+0x8f80>
   1a4f0:	ldr	r0, [pc, #480]	; 1a6d8 <__assert_fail@plt+0x8f84>
   1a4f4:	bl	11754 <__assert_fail@plt>
   1a4f8:	ldr	r4, [sp, #16]
   1a4fc:	str	r5, [sp, #20]
   1a500:	ldrb	r3, [r4]
   1a504:	cmp	r3, #0
   1a508:	bne	1a6b8 <__assert_fail@plt+0x8f64>
   1a50c:	ldr	r4, [sp, #28]
   1a510:	cmp	r4, #0
   1a514:	beq	1a2cc <__assert_fail@plt+0x8b78>
   1a518:	b	1a4e4 <__assert_fail@plt+0x8d90>
   1a51c:	ldr	r0, [sp, #72]	; 0x48
   1a520:	bl	115b0 <strlen@plt>
   1a524:	strb	r6, [sp, #80]	; 0x50
   1a528:	ldrb	r3, [sp, #12]
   1a52c:	str	r0, [sp, #76]	; 0x4c
   1a530:	b	1a45c <__assert_fail@plt+0x8d08>
   1a534:	ldr	r0, [sp, #16]
   1a538:	bl	115b0 <strlen@plt>
   1a53c:	str	r0, [sp, #20]
   1a540:	ldr	r4, [sp, #20]
   1a544:	add	r4, r8, r4
   1a548:	b	19f14 <__assert_fail@plt+0x87c0>
   1a54c:	mov	sl, r5
   1a550:	b	1a118 <__assert_fail@plt+0x89c4>
   1a554:	add	r0, sp, #4
   1a558:	bl	1140c <mbsinit@plt>
   1a55c:	cmp	r0, #0
   1a560:	beq	1a690 <__assert_fail@plt+0x8f3c>
   1a564:	strb	r5, [sp]
   1a568:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1a56c:	mov	r1, r0
   1a570:	mov	r0, r8
   1a574:	bl	1ed54 <__assert_fail@plt+0xd600>
   1a578:	add	r3, sp, #4
   1a57c:	mov	r1, r8
   1a580:	mov	r2, r0
   1a584:	add	r0, sp, #28
   1a588:	bl	207c8 <__assert_fail@plt+0xf074>
   1a58c:	cmn	r0, #1
   1a590:	str	r0, [sp, #20]
   1a594:	streq	r5, [sp, #20]
   1a598:	beq	1a540 <__assert_fail@plt+0x8dec>
   1a59c:	cmn	r0, #2
   1a5a0:	beq	1a534 <__assert_fail@plt+0x8de0>
   1a5a4:	cmp	r0, #0
   1a5a8:	beq	1a644 <__assert_fail@plt+0x8ef0>
   1a5ac:	ldr	r4, [sp, #28]
   1a5b0:	add	r0, sp, #4
   1a5b4:	strb	r5, [sp, #24]
   1a5b8:	bl	1140c <mbsinit@plt>
   1a5bc:	cmp	r0, #0
   1a5c0:	strbne	r6, [sp]
   1a5c4:	b	1a410 <__assert_fail@plt+0x8cbc>
   1a5c8:	mov	r0, r9
   1a5cc:	bl	115b0 <strlen@plt>
   1a5d0:	ldrb	r4, [r8, r0]
   1a5d4:	cmp	r4, #0
   1a5d8:	beq	1a5f4 <__assert_fail@plt+0x8ea0>
   1a5dc:	bl	1158c <__ctype_b_loc@plt>
   1a5e0:	lsl	r4, r4, #1
   1a5e4:	ldr	r3, [r0]
   1a5e8:	ldrh	r3, [r3, r4]
   1a5ec:	tst	r3, #8
   1a5f0:	bne	1a0ec <__assert_fail@plt+0x8998>
   1a5f4:	mov	sl, #1
   1a5f8:	b	1a420 <__assert_fail@plt+0x8ccc>
   1a5fc:	str	r5, [sp, #20]
   1a600:	ldrb	r4, [r4]
   1a604:	strb	r5, [sp, #24]
   1a608:	strb	r5, [sp, #12]
   1a60c:	str	r4, [sp, #28]
   1a610:	b	1a3a0 <__assert_fail@plt+0x8c4c>
   1a614:	str	r5, [sp, #20]
   1a618:	strb	r6, [sp, #24]
   1a61c:	strb	r5, [sp, #12]
   1a620:	ldr	r4, [sp, #28]
   1a624:	b	1a3a8 <__assert_fail@plt+0x8c54>
   1a628:	ldr	r0, [sp, #16]
   1a62c:	bl	115b0 <strlen@plt>
   1a630:	strb	r6, [sp, #24]
   1a634:	strb	r5, [sp, #12]
   1a638:	ldr	r4, [sp, #28]
   1a63c:	str	r0, [sp, #20]
   1a640:	b	1a3a8 <__assert_fail@plt+0x8c54>
   1a644:	ldr	r3, [sp, #16]
   1a648:	str	r5, [sp, #20]
   1a64c:	ldrb	r3, [r3]
   1a650:	cmp	r3, #0
   1a654:	bne	1a6b8 <__assert_fail@plt+0x8f64>
   1a658:	ldr	r4, [sp, #28]
   1a65c:	cmp	r4, #0
   1a660:	beq	1a5b0 <__assert_fail@plt+0x8e5c>
   1a664:	b	1a4e4 <__assert_fail@plt+0x8d90>
   1a668:	add	r0, sp, #4
   1a66c:	strb	r5, [sp, #24]
   1a670:	bl	1140c <mbsinit@plt>
   1a674:	ldr	r4, [sp, #28]
   1a678:	cmp	r0, #0
   1a67c:	strbne	r6, [sp]
   1a680:	strbne	r5, [sp, #12]
   1a684:	bne	1a3a0 <__assert_fail@plt+0x8c4c>
   1a688:	strb	r5, [sp, #12]
   1a68c:	b	1a3a0 <__assert_fail@plt+0x8c4c>
   1a690:	ldr	r3, [pc, #56]	; 1a6d0 <__assert_fail@plt+0x8f7c>
   1a694:	mov	r2, #143	; 0x8f
   1a698:	ldr	r1, [pc, #52]	; 1a6d4 <__assert_fail@plt+0x8f80>
   1a69c:	ldr	r0, [pc, #56]	; 1a6dc <__assert_fail@plt+0x8f88>
   1a6a0:	bl	11754 <__assert_fail@plt>
   1a6a4:	lsl	r3, r3, #1
   1a6a8:	ldrh	r3, [sl, r3]
   1a6ac:	tst	r3, #8
   1a6b0:	beq	1a0e4 <__assert_fail@plt+0x8990>
   1a6b4:	b	1a0ec <__assert_fail@plt+0x8998>
   1a6b8:	ldr	r3, [pc, #16]	; 1a6d0 <__assert_fail@plt+0x8f7c>
   1a6bc:	mov	r2, #171	; 0xab
   1a6c0:	ldr	r1, [pc, #12]	; 1a6d4 <__assert_fail@plt+0x8f80>
   1a6c4:	ldr	r0, [pc, #20]	; 1a6e0 <__assert_fail@plt+0x8f8c>
   1a6c8:	bl	11754 <__assert_fail@plt>
   1a6cc:	muleq	r2, ip, r7
   1a6d0:	andeq	r6, r2, r4, ror #5
   1a6d4:	strdeq	r6, [r2], -r8
   1a6d8:	andeq	r6, r2, r8, lsr r3
   1a6dc:	andeq	r6, r2, r8, lsl #6
   1a6e0:	andeq	r6, r2, r0, lsr #6
   1a6e4:	push	{r4, r5, r6, lr}
   1a6e8:	mov	r1, r0
   1a6ec:	mov	r4, r0
   1a6f0:	sub	sp, sp, #8
   1a6f4:	mov	r2, #5
   1a6f8:	mov	r0, #0
   1a6fc:	bl	11430 <dcgettext@plt>
   1a700:	cmp	r4, r0
   1a704:	mov	r5, r0
   1a708:	beq	1a71c <__assert_fail@plt+0x8fc8>
   1a70c:	mov	r1, r4
   1a710:	bl	19ee8 <__assert_fail@plt+0x8794>
   1a714:	cmp	r0, #0
   1a718:	beq	1a728 <__assert_fail@plt+0x8fd4>
   1a71c:	mov	r0, r5
   1a720:	add	sp, sp, #8
   1a724:	pop	{r4, r5, r6, pc}
   1a728:	mov	r0, r5
   1a72c:	bl	115b0 <strlen@plt>
   1a730:	mov	r6, r0
   1a734:	mov	r0, r4
   1a738:	bl	115b0 <strlen@plt>
   1a73c:	add	r0, r6, r0
   1a740:	add	r0, r0, #4
   1a744:	bl	1fc90 <__assert_fail@plt+0xe53c>
   1a748:	str	r5, [sp]
   1a74c:	str	r4, [sp, #4]
   1a750:	ldr	r3, [pc, #28]	; 1a774 <__assert_fail@plt+0x9020>
   1a754:	mvn	r2, #0
   1a758:	mov	r1, #1
   1a75c:	mov	r6, r0
   1a760:	bl	115f8 <__sprintf_chk@plt>
   1a764:	mov	r5, r6
   1a768:	mov	r0, r5
   1a76c:	add	sp, sp, #8
   1a770:	pop	{r4, r5, r6, pc}
   1a774:	andeq	r6, r2, ip, asr #6
   1a778:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a77c:	mov	r2, #5
   1a780:	sub	sp, sp, #8
   1a784:	mov	r8, r0
   1a788:	mov	r6, r1
   1a78c:	mov	r1, r0
   1a790:	mov	r0, #0
   1a794:	bl	11430 <dcgettext@plt>
   1a798:	mov	r7, r0
   1a79c:	bl	206f4 <__assert_fail@plt+0xefa0>
   1a7a0:	ldr	r1, [pc, #612]	; 1aa0c <__assert_fail@plt+0x92b8>
   1a7a4:	mov	r5, r0
   1a7a8:	bl	2047c <__assert_fail@plt+0xed28>
   1a7ac:	subs	r4, r0, #0
   1a7b0:	bne	1a888 <__assert_fail@plt+0x9134>
   1a7b4:	cmp	r6, #0
   1a7b8:	movne	r9, r4
   1a7bc:	movne	r5, r6
   1a7c0:	movne	sl, r6
   1a7c4:	beq	1a9e8 <__assert_fail@plt+0x9294>
   1a7c8:	mov	r1, r8
   1a7cc:	mov	r0, r7
   1a7d0:	bl	11388 <strcmp@plt>
   1a7d4:	cmp	r0, #0
   1a7d8:	bne	1a810 <__assert_fail@plt+0x90bc>
   1a7dc:	cmp	r4, r6
   1a7e0:	cmpne	r4, #0
   1a7e4:	moveq	r7, r6
   1a7e8:	bne	1a7f8 <__assert_fail@plt+0x90a4>
   1a7ec:	mov	r0, r7
   1a7f0:	add	sp, sp, #8
   1a7f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7f8:	mov	r0, r4
   1a7fc:	bl	19d04 <__assert_fail@plt+0x85b0>
   1a800:	mov	r7, r6
   1a804:	mov	r0, r7
   1a808:	add	sp, sp, #8
   1a80c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a810:	mov	r1, r8
   1a814:	mov	r0, r7
   1a818:	bl	19ee8 <__assert_fail@plt+0x8794>
   1a81c:	cmp	r0, #0
   1a820:	bne	1a85c <__assert_fail@plt+0x9108>
   1a824:	cmp	sl, #0
   1a828:	beq	1a840 <__assert_fail@plt+0x90ec>
   1a82c:	mov	r1, sl
   1a830:	mov	r0, r7
   1a834:	bl	19ee8 <__assert_fail@plt+0x8794>
   1a838:	cmp	r0, #0
   1a83c:	bne	1a85c <__assert_fail@plt+0x9108>
   1a840:	cmp	r5, #0
   1a844:	beq	1a980 <__assert_fail@plt+0x922c>
   1a848:	mov	r1, r5
   1a84c:	mov	r0, r7
   1a850:	bl	19ee8 <__assert_fail@plt+0x8794>
   1a854:	cmp	r0, #0
   1a858:	beq	1a980 <__assert_fail@plt+0x922c>
   1a85c:	cmp	r9, #0
   1a860:	beq	1a86c <__assert_fail@plt+0x9118>
   1a864:	mov	r0, r9
   1a868:	bl	19d04 <__assert_fail@plt+0x85b0>
   1a86c:	cmp	r4, #0
   1a870:	beq	1a7ec <__assert_fail@plt+0x9098>
   1a874:	mov	r0, r4
   1a878:	bl	19d04 <__assert_fail@plt+0x85b0>
   1a87c:	mov	r0, r7
   1a880:	add	sp, sp, #8
   1a884:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a888:	mov	r2, r5
   1a88c:	ldr	r1, [pc, #376]	; 1aa0c <__assert_fail@plt+0x92b8>
   1a890:	mov	r0, r6
   1a894:	bl	20380 <__assert_fail@plt+0xec2c>
   1a898:	mov	r9, r0
   1a89c:	mov	r0, r5
   1a8a0:	bl	115b0 <strlen@plt>
   1a8a4:	mov	r4, r0
   1a8a8:	add	r0, r0, #11
   1a8ac:	bl	1fc90 <__assert_fail@plt+0xe53c>
   1a8b0:	mov	r2, r4
   1a8b4:	mov	r1, r5
   1a8b8:	mov	sl, r0
   1a8bc:	bl	113f4 <memcpy@plt>
   1a8c0:	ldr	r3, [pc, #328]	; 1aa10 <__assert_fail@plt+0x92bc>
   1a8c4:	add	ip, sl, r4
   1a8c8:	mov	r2, sl
   1a8cc:	ldm	r3!, {r0, r1}
   1a8d0:	ldrh	lr, [r3]
   1a8d4:	ldrb	r3, [r3, #2]
   1a8d8:	str	r0, [sl, r4]
   1a8dc:	str	r1, [ip, #4]
   1a8e0:	strh	lr, [ip, #8]
   1a8e4:	ldr	r1, [pc, #288]	; 1aa0c <__assert_fail@plt+0x92b8>
   1a8e8:	strb	r3, [ip, #10]
   1a8ec:	mov	r0, r6
   1a8f0:	bl	20380 <__assert_fail@plt+0xec2c>
   1a8f4:	mov	r4, r0
   1a8f8:	mov	r0, sl
   1a8fc:	bl	19d04 <__assert_fail@plt+0x85b0>
   1a900:	cmp	r4, #0
   1a904:	beq	1a924 <__assert_fail@plt+0x91d0>
   1a908:	mov	r1, #63	; 0x3f
   1a90c:	mov	r0, r4
   1a910:	bl	115bc <strchr@plt>
   1a914:	cmp	r0, #0
   1a918:	beq	1a94c <__assert_fail@plt+0x91f8>
   1a91c:	mov	r0, r4
   1a920:	bl	19d04 <__assert_fail@plt+0x85b0>
   1a924:	cmp	r9, #0
   1a928:	moveq	sl, r9
   1a92c:	moveq	r6, r8
   1a930:	moveq	r5, r9
   1a934:	moveq	r4, r9
   1a938:	movne	r5, #0
   1a93c:	movne	r4, r5
   1a940:	movne	sl, r9
   1a944:	movne	r6, r9
   1a948:	b	1a7c8 <__assert_fail@plt+0x9074>
   1a94c:	subs	sl, r9, #0
   1a950:	mov	r5, r4
   1a954:	moveq	r6, r4
   1a958:	movne	r6, r9
   1a95c:	b	1a7c8 <__assert_fail@plt+0x9074>
   1a960:	mov	r1, r8
   1a964:	mov	r0, r7
   1a968:	bl	19ee8 <__assert_fail@plt+0x8794>
   1a96c:	cmp	r0, #0
   1a970:	bne	1a7ec <__assert_fail@plt+0x9098>
   1a974:	mov	r9, r0
   1a978:	mov	r6, r8
   1a97c:	mov	r4, r0
   1a980:	mov	r0, r7
   1a984:	bl	115b0 <strlen@plt>
   1a988:	mov	r5, r0
   1a98c:	mov	r0, r6
   1a990:	bl	115b0 <strlen@plt>
   1a994:	add	r0, r5, r0
   1a998:	add	r0, r0, #4
   1a99c:	bl	1fc90 <__assert_fail@plt+0xe53c>
   1a9a0:	str	r6, [sp, #4]
   1a9a4:	str	r7, [sp]
   1a9a8:	ldr	r3, [pc, #100]	; 1aa14 <__assert_fail@plt+0x92c0>
   1a9ac:	mvn	r2, #0
   1a9b0:	mov	r1, #1
   1a9b4:	mov	r5, r0
   1a9b8:	bl	115f8 <__sprintf_chk@plt>
   1a9bc:	cmp	r9, #0
   1a9c0:	beq	1a9cc <__assert_fail@plt+0x9278>
   1a9c4:	mov	r0, r9
   1a9c8:	bl	19d04 <__assert_fail@plt+0x85b0>
   1a9cc:	cmp	r4, #0
   1a9d0:	moveq	r7, r5
   1a9d4:	beq	1a7ec <__assert_fail@plt+0x9098>
   1a9d8:	mov	r0, r4
   1a9dc:	bl	19d04 <__assert_fail@plt+0x85b0>
   1a9e0:	mov	r7, r5
   1a9e4:	b	1a7ec <__assert_fail@plt+0x9098>
   1a9e8:	mov	r1, r8
   1a9ec:	mov	r0, r7
   1a9f0:	bl	11388 <strcmp@plt>
   1a9f4:	cmp	r0, #0
   1a9f8:	bne	1a960 <__assert_fail@plt+0x920c>
   1a9fc:	mov	r7, r8
   1aa00:	mov	r0, r7
   1aa04:	add	sp, sp, #8
   1aa08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa0c:	andeq	r6, r2, r4, asr r3
   1aa10:	andeq	r6, r2, ip, asr r3
   1aa14:	andeq	r6, r2, ip, asr #6
   1aa18:	push	{r4, r5, r6, lr}
   1aa1c:	mov	r4, r0
   1aa20:	mov	r5, r1
   1aa24:	bl	206f4 <__assert_fail@plt+0xefa0>
   1aa28:	ldrb	r3, [r0]
   1aa2c:	bic	r3, r3, #32
   1aa30:	cmp	r3, #85	; 0x55
   1aa34:	bne	1aa94 <__assert_fail@plt+0x9340>
   1aa38:	ldrb	r3, [r0, #1]
   1aa3c:	bic	r3, r3, #32
   1aa40:	cmp	r3, #84	; 0x54
   1aa44:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aa48:	ldrb	r3, [r0, #2]
   1aa4c:	bic	r3, r3, #32
   1aa50:	cmp	r3, #70	; 0x46
   1aa54:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aa58:	ldrb	r3, [r0, #3]
   1aa5c:	cmp	r3, #45	; 0x2d
   1aa60:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aa64:	ldrb	r3, [r0, #4]
   1aa68:	cmp	r3, #56	; 0x38
   1aa6c:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aa70:	ldrb	r3, [r0, #5]
   1aa74:	cmp	r3, #0
   1aa78:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aa7c:	ldrb	r2, [r4]
   1aa80:	ldr	r3, [pc, #152]	; 1ab20 <__assert_fail@plt+0x93cc>
   1aa84:	ldr	r0, [pc, #152]	; 1ab24 <__assert_fail@plt+0x93d0>
   1aa88:	cmp	r2, #96	; 0x60
   1aa8c:	movne	r0, r3
   1aa90:	pop	{r4, r5, r6, pc}
   1aa94:	cmp	r3, #71	; 0x47
   1aa98:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aa9c:	ldrb	r3, [r0, #1]
   1aaa0:	bic	r3, r3, #32
   1aaa4:	cmp	r3, #66	; 0x42
   1aaa8:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aaac:	ldrb	r3, [r0, #2]
   1aab0:	cmp	r3, #49	; 0x31
   1aab4:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aab8:	ldrb	r3, [r0, #3]
   1aabc:	cmp	r3, #56	; 0x38
   1aac0:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aac4:	ldrb	r3, [r0, #4]
   1aac8:	cmp	r3, #48	; 0x30
   1aacc:	beq	1aae4 <__assert_fail@plt+0x9390>
   1aad0:	ldr	r3, [pc, #80]	; 1ab28 <__assert_fail@plt+0x93d4>
   1aad4:	cmp	r5, #9
   1aad8:	ldr	r0, [pc, #76]	; 1ab2c <__assert_fail@plt+0x93d8>
   1aadc:	movne	r0, r3
   1aae0:	pop	{r4, r5, r6, pc}
   1aae4:	ldrb	r3, [r0, #5]
   1aae8:	cmp	r3, #51	; 0x33
   1aaec:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aaf0:	ldrb	r3, [r0, #6]
   1aaf4:	cmp	r3, #48	; 0x30
   1aaf8:	bne	1aad0 <__assert_fail@plt+0x937c>
   1aafc:	ldrb	r3, [r0, #7]
   1ab00:	cmp	r3, #0
   1ab04:	bne	1aad0 <__assert_fail@plt+0x937c>
   1ab08:	ldrb	r2, [r4]
   1ab0c:	ldr	r3, [pc, #28]	; 1ab30 <__assert_fail@plt+0x93dc>
   1ab10:	ldr	r0, [pc, #28]	; 1ab34 <__assert_fail@plt+0x93e0>
   1ab14:	cmp	r2, #96	; 0x60
   1ab18:	movne	r0, r3
   1ab1c:	pop	{r4, r5, r6, pc}
   1ab20:	andeq	r6, r2, r0, asr #7
   1ab24:			; <UNDEFINED> instruction: 0x000263bc
   1ab28:	ldrdeq	r6, [r2], -r0
   1ab2c:	andeq	r6, r2, ip, asr #7
   1ab30:	andeq	r6, r2, r8, asr #7
   1ab34:	andeq	r6, r2, r4, asr #7
   1ab38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab3c:	sub	sp, sp, #140	; 0x8c
   1ab40:	mov	r9, r1
   1ab44:	str	r3, [sp, #24]
   1ab48:	mov	r3, #1
   1ab4c:	mov	sl, r0
   1ab50:	str	r2, [sp, #44]	; 0x2c
   1ab54:	str	r3, [sp, #28]
   1ab58:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1ab5c:	ldr	r3, [sp, #180]	; 0xb4
   1ab60:	mov	fp, r9
   1ab64:	mov	r9, sl
   1ab68:	lsr	r3, r3, #1
   1ab6c:	and	r3, r3, #1
   1ab70:	str	r3, [sp, #40]	; 0x28
   1ab74:	ldr	r3, [sp, #180]	; 0xb4
   1ab78:	mov	r2, #0
   1ab7c:	and	r3, r3, #4
   1ab80:	str	r3, [sp, #100]	; 0x64
   1ab84:	ldr	r3, [sp, #180]	; 0xb4
   1ab88:	str	r2, [sp, #76]	; 0x4c
   1ab8c:	and	r3, r3, #1
   1ab90:	str	r3, [sp, #96]	; 0x60
   1ab94:	str	r2, [sp, #36]	; 0x24
   1ab98:	str	r2, [sp, #56]	; 0x38
   1ab9c:	str	r2, [sp, #68]	; 0x44
   1aba0:	str	r2, [sp, #72]	; 0x48
   1aba4:	str	r2, [sp, #84]	; 0x54
   1aba8:	str	r0, [sp, #80]	; 0x50
   1abac:	ldr	r3, [sp, #176]	; 0xb0
   1abb0:	cmp	r3, #10
   1abb4:	ldrls	pc, [pc, r3, lsl #2]
   1abb8:	b	1bd90 <__assert_fail@plt+0xa63c>
   1abbc:	andeq	sl, r1, r8, ror #23
   1abc0:	andeq	sl, r1, r8, lsl #30
   1abc4:	andeq	fp, r1, r0, rrx
   1abc8:	andeq	sl, r1, ip, lsr pc
   1abcc:	strheq	fp, [r1], -r4
   1abd0:	muleq	r1, r4, r0
   1abd4:	andeq	sl, r1, ip, asr pc
   1abd8:	andeq	sl, r1, r0, lsl #31
   1abdc:	andeq	sl, r1, r8, lsr #31
   1abe0:	andeq	sl, r1, r8, lsr #31
   1abe4:	andeq	sl, r1, r8, lsr #31
   1abe8:	mov	r3, #0
   1abec:	ldr	r1, [sp, #56]	; 0x38
   1abf0:	ldr	r2, [sp, #176]	; 0xb0
   1abf4:	ldr	lr, [sp, #176]	; 0xb0
   1abf8:	mov	r8, r3
   1abfc:	mov	ip, r3
   1ac00:	str	r3, [sp, #40]	; 0x28
   1ac04:	mov	r3, r1
   1ac08:	cmp	r2, #2
   1ac0c:	moveq	r3, #0
   1ac10:	andne	r3, r3, #1
   1ac14:	mov	r0, r3
   1ac18:	str	r3, [sp, #92]	; 0x5c
   1ac1c:	ldr	r3, [sp, #68]	; 0x44
   1ac20:	sub	lr, lr, #2
   1ac24:	adds	r2, r3, #0
   1ac28:	movne	r2, #1
   1ac2c:	and	r3, r1, ip
   1ac30:	and	r3, r2, r3
   1ac34:	clz	lr, lr
   1ac38:	str	r3, [sp, #88]	; 0x58
   1ac3c:	lsr	lr, lr, #5
   1ac40:	mov	r3, ip
   1ac44:	and	r3, r3, lr
   1ac48:	mov	sl, #0
   1ac4c:	and	r0, r2, r0
   1ac50:	str	r3, [sp, #64]	; 0x40
   1ac54:	eor	r3, r1, #1
   1ac58:	str	lr, [sp, #52]	; 0x34
   1ac5c:	str	r0, [sp, #48]	; 0x30
   1ac60:	str	r3, [sp, #60]	; 0x3c
   1ac64:	ldr	r3, [sp, #24]
   1ac68:	cmn	r3, #1
   1ac6c:	beq	1b19c <__assert_fail@plt+0x9a48>
   1ac70:	subs	r7, r3, sl
   1ac74:	movne	r7, #1
   1ac78:	cmp	r7, #0
   1ac7c:	beq	1b1b4 <__assert_fail@plt+0x9a60>
   1ac80:	ldr	r3, [sp, #48]	; 0x30
   1ac84:	cmp	r3, #0
   1ac88:	beq	1b520 <__assert_fail@plt+0x9dcc>
   1ac8c:	ldr	r2, [sp, #68]	; 0x44
   1ac90:	ldr	r1, [sp, #24]
   1ac94:	cmp	r2, #1
   1ac98:	mov	r3, r2
   1ac9c:	movls	r3, #0
   1aca0:	movhi	r3, #1
   1aca4:	cmn	r1, #1
   1aca8:	movne	r3, #0
   1acac:	cmp	r3, #0
   1acb0:	add	r4, sl, r2
   1acb4:	beq	1acc4 <__assert_fail@plt+0x9570>
   1acb8:	ldr	r0, [sp, #44]	; 0x2c
   1acbc:	bl	115b0 <strlen@plt>
   1acc0:	str	r0, [sp, #24]
   1acc4:	ldr	r3, [sp, #24]
   1acc8:	cmp	r3, r4
   1accc:	ldr	r3, [sp, #44]	; 0x2c
   1acd0:	add	r5, r3, sl
   1acd4:	bcc	1b528 <__assert_fail@plt+0x9dd4>
   1acd8:	mov	r0, r5
   1acdc:	ldr	r2, [sp, #68]	; 0x44
   1ace0:	ldr	r1, [sp, #72]	; 0x48
   1ace4:	bl	11418 <memcmp@plt>
   1ace8:	cmp	r0, #0
   1acec:	bne	1b528 <__assert_fail@plt+0x9dd4>
   1acf0:	ldr	r3, [sp, #40]	; 0x28
   1acf4:	cmp	r3, #0
   1acf8:	bne	1bee4 <__assert_fail@plt+0xa790>
   1acfc:	ldrb	r4, [r5]
   1ad00:	cmp	r4, #126	; 0x7e
   1ad04:	ldrls	pc, [pc, r4, lsl #2]
   1ad08:	b	1be20 <__assert_fail@plt+0xa6cc>
   1ad0c:	andeq	fp, r1, r0, ror #7
   1ad10:	andeq	fp, r1, r0, lsr #28
   1ad14:	andeq	fp, r1, r0, lsr #28
   1ad18:	andeq	fp, r1, r0, lsr #28
   1ad1c:	andeq	fp, r1, r0, lsr #28
   1ad20:	andeq	fp, r1, r0, lsr #28
   1ad24:	andeq	fp, r1, r0, lsr #28
   1ad28:	andeq	fp, r1, ip, asr #7
   1ad2c:			; <UNDEFINED> instruction: 0x0001b3b8
   1ad30:	muleq	r1, r4, r3
   1ad34:	andeq	fp, r1, r4, ror r3
   1ad38:	andeq	fp, r1, r4, lsr #7
   1ad3c:	ldrdeq	fp, [r1], -ip
   1ad40:	andeq	fp, r1, r0, lsl r5
   1ad44:	andeq	fp, r1, r0, lsr #28
   1ad48:	andeq	fp, r1, r0, lsr #28
   1ad4c:	andeq	fp, r1, r0, lsr #28
   1ad50:	andeq	fp, r1, r0, lsr #28
   1ad54:	andeq	fp, r1, r0, lsr #28
   1ad58:	andeq	fp, r1, r0, lsr #28
   1ad5c:	andeq	fp, r1, r0, lsr #28
   1ad60:	andeq	fp, r1, r0, lsr #28
   1ad64:	andeq	fp, r1, r0, lsr #28
   1ad68:	andeq	fp, r1, r0, lsr #28
   1ad6c:	andeq	fp, r1, r0, lsr #28
   1ad70:	andeq	fp, r1, r0, lsr #28
   1ad74:	andeq	fp, r1, r0, lsr #28
   1ad78:	andeq	fp, r1, r0, lsr #28
   1ad7c:	andeq	fp, r1, r0, lsr #28
   1ad80:	andeq	fp, r1, r0, lsr #28
   1ad84:	andeq	fp, r1, r0, lsr #28
   1ad88:	andeq	fp, r1, r0, lsr #28
   1ad8c:	andeq	fp, r1, r0, lsl #10
   1ad90:	andeq	fp, r1, r0, ror #9
   1ad94:	andeq	fp, r1, r0, ror #9
   1ad98:	andeq	fp, r1, r0, asr #9
   1ad9c:	andeq	fp, r1, r0, ror #9
   1ada0:	andeq	fp, r1, ip, asr #5
   1ada4:	andeq	fp, r1, r0, ror #9
   1ada8:	andeq	fp, r1, r8, lsr #5
   1adac:	andeq	fp, r1, r0, ror #9
   1adb0:	andeq	fp, r1, r0, ror #9
   1adb4:	andeq	fp, r1, r0, ror #9
   1adb8:	andeq	fp, r1, ip, asr #5
   1adbc:	andeq	fp, r1, ip, asr #5
   1adc0:	andeq	fp, r1, ip, asr #5
   1adc4:	andeq	fp, r1, ip, asr #5
   1adc8:	andeq	fp, r1, ip, asr #5
   1adcc:	andeq	fp, r1, ip, asr #5
   1add0:	andeq	fp, r1, ip, asr #5
   1add4:	andeq	fp, r1, ip, asr #5
   1add8:	andeq	fp, r1, ip, asr #5
   1addc:	andeq	fp, r1, ip, asr #5
   1ade0:	andeq	fp, r1, ip, asr #5
   1ade4:	andeq	fp, r1, ip, asr #5
   1ade8:	andeq	fp, r1, ip, asr #5
   1adec:	andeq	fp, r1, ip, asr #5
   1adf0:	andeq	fp, r1, ip, asr #5
   1adf4:	andeq	fp, r1, ip, asr #5
   1adf8:	andeq	fp, r1, r0, ror #9
   1adfc:	andeq	fp, r1, r0, ror #9
   1ae00:	andeq	fp, r1, r0, ror #9
   1ae04:	andeq	fp, r1, r0, ror #9
   1ae08:	andeq	fp, r1, r8, asr r2
   1ae0c:	andeq	fp, r1, r0, lsr #28
   1ae10:	andeq	fp, r1, ip, asr #5
   1ae14:	andeq	fp, r1, ip, asr #5
   1ae18:	andeq	fp, r1, ip, asr #5
   1ae1c:	andeq	fp, r1, ip, asr #5
   1ae20:	andeq	fp, r1, ip, asr #5
   1ae24:	andeq	fp, r1, ip, asr #5
   1ae28:	andeq	fp, r1, ip, asr #5
   1ae2c:	andeq	fp, r1, ip, asr #5
   1ae30:	andeq	fp, r1, ip, asr #5
   1ae34:	andeq	fp, r1, ip, asr #5
   1ae38:	andeq	fp, r1, ip, asr #5
   1ae3c:	andeq	fp, r1, ip, asr #5
   1ae40:	andeq	fp, r1, ip, asr #5
   1ae44:	andeq	fp, r1, ip, asr #5
   1ae48:	andeq	fp, r1, ip, asr #5
   1ae4c:	andeq	fp, r1, ip, asr #5
   1ae50:	andeq	fp, r1, ip, asr #5
   1ae54:	andeq	fp, r1, ip, asr #5
   1ae58:	andeq	fp, r1, ip, asr #5
   1ae5c:	andeq	fp, r1, ip, asr #5
   1ae60:	andeq	fp, r1, ip, asr #5
   1ae64:	andeq	fp, r1, ip, asr #5
   1ae68:	andeq	fp, r1, ip, asr #5
   1ae6c:	andeq	fp, r1, ip, asr #5
   1ae70:	andeq	fp, r1, ip, asr #5
   1ae74:	andeq	fp, r1, ip, asr #5
   1ae78:	andeq	fp, r1, r0, ror #9
   1ae7c:	andeq	fp, r1, r4, lsr #4
   1ae80:	andeq	fp, r1, ip, asr #5
   1ae84:	andeq	fp, r1, r0, ror #9
   1ae88:	andeq	fp, r1, ip, asr #5
   1ae8c:	andeq	fp, r1, r0, ror #9
   1ae90:	andeq	fp, r1, ip, asr #5
   1ae94:	andeq	fp, r1, ip, asr #5
   1ae98:	andeq	fp, r1, ip, asr #5
   1ae9c:	andeq	fp, r1, ip, asr #5
   1aea0:	andeq	fp, r1, ip, asr #5
   1aea4:	andeq	fp, r1, ip, asr #5
   1aea8:	andeq	fp, r1, ip, asr #5
   1aeac:	andeq	fp, r1, ip, asr #5
   1aeb0:	andeq	fp, r1, ip, asr #5
   1aeb4:	andeq	fp, r1, ip, asr #5
   1aeb8:	andeq	fp, r1, ip, asr #5
   1aebc:	andeq	fp, r1, ip, asr #5
   1aec0:	andeq	fp, r1, ip, asr #5
   1aec4:	andeq	fp, r1, ip, asr #5
   1aec8:	andeq	fp, r1, ip, asr #5
   1aecc:	andeq	fp, r1, ip, asr #5
   1aed0:	andeq	fp, r1, ip, asr #5
   1aed4:	andeq	fp, r1, ip, asr #5
   1aed8:	andeq	fp, r1, ip, asr #5
   1aedc:	andeq	fp, r1, ip, asr #5
   1aee0:	andeq	fp, r1, ip, asr #5
   1aee4:	andeq	fp, r1, ip, asr #5
   1aee8:	andeq	fp, r1, ip, asr #5
   1aeec:	andeq	fp, r1, ip, asr #5
   1aef0:	andeq	fp, r1, ip, asr #5
   1aef4:	andeq	fp, r1, ip, asr #5
   1aef8:	ldrdeq	fp, [r1], -ip
   1aefc:	andeq	fp, r1, r0, ror #9
   1af00:	ldrdeq	fp, [r1], -ip
   1af04:	andeq	fp, r1, r0, asr #9
   1af08:	mov	r3, #1
   1af0c:	str	r3, [sp, #40]	; 0x28
   1af10:	str	r3, [sp, #68]	; 0x44
   1af14:	mov	r8, #0
   1af18:	ldr	r3, [pc, #4056]	; 1bef8 <__assert_fail@plt+0xa7a4>
   1af1c:	str	r3, [sp, #72]	; 0x48
   1af20:	mov	r3, #2
   1af24:	str	r3, [sp, #176]	; 0xb0
   1af28:	ldr	r1, [sp, #56]	; 0x38
   1af2c:	mov	r2, r3
   1af30:	ldr	ip, [sp, #40]	; 0x28
   1af34:	mov	lr, r3
   1af38:	b	1ac04 <__assert_fail@plt+0x94b0>
   1af3c:	mov	r3, #1
   1af40:	str	r3, [sp, #56]	; 0x38
   1af44:	str	r3, [sp, #68]	; 0x44
   1af48:	str	r3, [sp, #40]	; 0x28
   1af4c:	ldr	r3, [pc, #4004]	; 1bef8 <__assert_fail@plt+0xa7a4>
   1af50:	mov	r8, #0
   1af54:	str	r3, [sp, #72]	; 0x48
   1af58:	b	1af20 <__assert_fail@plt+0x97cc>
   1af5c:	mov	r3, #1
   1af60:	str	r3, [sp, #56]	; 0x38
   1af64:	str	r3, [sp, #68]	; 0x44
   1af68:	str	r3, [sp, #40]	; 0x28
   1af6c:	ldr	r3, [pc, #3976]	; 1befc <__assert_fail@plt+0xa7a8>
   1af70:	mov	r8, #0
   1af74:	str	r3, [sp, #72]	; 0x48
   1af78:	mov	r3, #5
   1af7c:	b	1af24 <__assert_fail@plt+0x97d0>
   1af80:	mov	r3, #0
   1af84:	str	r3, [sp, #40]	; 0x28
   1af88:	mov	r3, #1
   1af8c:	str	r3, [sp, #56]	; 0x38
   1af90:	mov	r8, #0
   1af94:	mov	r1, r3
   1af98:	ldr	r2, [sp, #176]	; 0xb0
   1af9c:	ldr	ip, [sp, #40]	; 0x28
   1afa0:	ldr	lr, [sp, #176]	; 0xb0
   1afa4:	b	1ac04 <__assert_fail@plt+0x94b0>
   1afa8:	ldr	r3, [sp, #176]	; 0xb0
   1afac:	cmp	r3, #10
   1afb0:	beq	1aff4 <__assert_fail@plt+0x98a0>
   1afb4:	mov	r2, #5
   1afb8:	ldr	r1, [pc, #3904]	; 1bf00 <__assert_fail@plt+0xa7ac>
   1afbc:	mov	r0, #0
   1afc0:	bl	11430 <dcgettext@plt>
   1afc4:	ldr	r2, [pc, #3892]	; 1bf00 <__assert_fail@plt+0xa7ac>
   1afc8:	cmp	r0, r2
   1afcc:	str	r0, [sp, #188]	; 0xbc
   1afd0:	beq	1c08c <__assert_fail@plt+0xa938>
   1afd4:	mov	r2, #5
   1afd8:	ldr	r1, [pc, #3864]	; 1bef8 <__assert_fail@plt+0xa7a4>
   1afdc:	mov	r0, #0
   1afe0:	bl	11430 <dcgettext@plt>
   1afe4:	ldr	r2, [pc, #3852]	; 1bef8 <__assert_fail@plt+0xa7a4>
   1afe8:	cmp	r0, r2
   1afec:	str	r0, [sp, #192]	; 0xc0
   1aff0:	beq	1c07c <__assert_fail@plt+0xa928>
   1aff4:	ldr	r8, [sp, #40]	; 0x28
   1aff8:	cmp	r8, #0
   1affc:	movne	r8, #0
   1b000:	bne	1b030 <__assert_fail@plt+0x98dc>
   1b004:	ldr	r3, [sp, #188]	; 0xbc
   1b008:	ldrb	r3, [r3]
   1b00c:	cmp	r3, #0
   1b010:	beq	1b030 <__assert_fail@plt+0x98dc>
   1b014:	ldr	r2, [sp, #188]	; 0xbc
   1b018:	cmp	fp, r8
   1b01c:	strbhi	r3, [r9, r8]
   1b020:	ldrb	r3, [r2, #1]!
   1b024:	add	r8, r8, #1
   1b028:	cmp	r3, #0
   1b02c:	bne	1b018 <__assert_fail@plt+0x98c4>
   1b030:	ldr	r0, [sp, #192]	; 0xc0
   1b034:	bl	115b0 <strlen@plt>
   1b038:	ldr	r3, [sp, #192]	; 0xc0
   1b03c:	ldr	r2, [sp, #176]	; 0xb0
   1b040:	str	r3, [sp, #72]	; 0x48
   1b044:	mov	r3, #1
   1b048:	str	r3, [sp, #56]	; 0x38
   1b04c:	mov	r1, r3
   1b050:	ldr	ip, [sp, #40]	; 0x28
   1b054:	ldr	lr, [sp, #176]	; 0xb0
   1b058:	str	r0, [sp, #68]	; 0x44
   1b05c:	b	1ac04 <__assert_fail@plt+0x94b0>
   1b060:	ldr	r3, [sp, #40]	; 0x28
   1b064:	cmp	r3, #0
   1b068:	beq	1bd10 <__assert_fail@plt+0xa5bc>
   1b06c:	mov	r3, #1
   1b070:	str	r3, [sp, #68]	; 0x44
   1b074:	ldr	r3, [pc, #3708]	; 1bef8 <__assert_fail@plt+0xa7a4>
   1b078:	str	r3, [sp, #72]	; 0x48
   1b07c:	mov	r8, #0
   1b080:	ldr	r1, [sp, #56]	; 0x38
   1b084:	ldr	r2, [sp, #176]	; 0xb0
   1b088:	ldr	ip, [sp, #40]	; 0x28
   1b08c:	ldr	lr, [sp, #176]	; 0xb0
   1b090:	b	1ac04 <__assert_fail@plt+0x94b0>
   1b094:	ldr	r3, [sp, #40]	; 0x28
   1b098:	cmp	r3, #0
   1b09c:	beq	1bd94 <__assert_fail@plt+0xa640>
   1b0a0:	str	r3, [sp, #56]	; 0x38
   1b0a4:	mov	r3, #1
   1b0a8:	str	r3, [sp, #68]	; 0x44
   1b0ac:	ldr	r3, [pc, #3656]	; 1befc <__assert_fail@plt+0xa7a8>
   1b0b0:	b	1b078 <__assert_fail@plt+0x9924>
   1b0b4:	ldr	r3, [sp, #40]	; 0x28
   1b0b8:	cmp	r3, #0
   1b0bc:	mov	r3, #1
   1b0c0:	streq	r3, [sp, #56]	; 0x38
   1b0c4:	beq	1bd10 <__assert_fail@plt+0xa5bc>
   1b0c8:	str	r3, [sp, #68]	; 0x44
   1b0cc:	ldr	r3, [pc, #3620]	; 1bef8 <__assert_fail@plt+0xa7a4>
   1b0d0:	mov	r8, #0
   1b0d4:	str	r3, [sp, #72]	; 0x48
   1b0d8:	b	1af20 <__assert_fail@plt+0x97cc>
   1b0dc:	ldr	r3, [sp, #24]
   1b0e0:	ldr	r6, [sp, #48]	; 0x30
   1b0e4:	cmn	r3, #1
   1b0e8:	beq	1b744 <__assert_fail@plt+0x9ff0>
   1b0ec:	subs	r3, r3, #1
   1b0f0:	movne	r3, #1
   1b0f4:	cmp	r3, #0
   1b0f8:	beq	1b4c4 <__assert_fail@plt+0x9d70>
   1b0fc:	ldr	r1, [sp, #52]	; 0x34
   1b100:	mov	r7, r3
   1b104:	mov	r3, #0
   1b108:	str	r3, [sp, #32]
   1b10c:	ldr	r3, [sp, #60]	; 0x3c
   1b110:	orr	r2, r1, r3
   1b114:	ldr	r3, [sp, #40]	; 0x28
   1b118:	eor	r2, r2, #1
   1b11c:	orr	r2, r3, r2
   1b120:	tst	r2, #255	; 0xff
   1b124:	bne	1ba48 <__assert_fail@plt+0xa2f4>
   1b128:	cmp	r6, #0
   1b12c:	bne	1b308 <__assert_fail@plt+0x9bb4>
   1b130:	ldr	r3, [sp, #36]	; 0x24
   1b134:	add	sl, sl, #1
   1b138:	and	r3, r3, r7
   1b13c:	uxtb	r6, r3
   1b140:	cmp	r6, #0
   1b144:	beq	1b170 <__assert_fail@plt+0x9a1c>
   1b148:	cmp	fp, r8
   1b14c:	movhi	r3, #39	; 0x27
   1b150:	strbhi	r3, [r9, r8]
   1b154:	add	r3, r8, #1
   1b158:	cmp	fp, r3
   1b15c:	movhi	r2, #39	; 0x27
   1b160:	add	r8, r8, #2
   1b164:	strbhi	r2, [r9, r3]
   1b168:	mov	r3, #0
   1b16c:	str	r3, [sp, #36]	; 0x24
   1b170:	ldr	r2, [sp, #32]
   1b174:	cmp	r8, fp
   1b178:	ldr	r3, [sp, #28]
   1b17c:	strbcc	r4, [r9, r8]
   1b180:	cmp	r2, #0
   1b184:	moveq	r3, #0
   1b188:	str	r3, [sp, #28]
   1b18c:	ldr	r3, [sp, #24]
   1b190:	add	r8, r8, #1
   1b194:	cmn	r3, #1
   1b198:	bne	1ac70 <__assert_fail@plt+0x951c>
   1b19c:	ldr	r3, [sp, #44]	; 0x2c
   1b1a0:	ldrb	r3, [r3, sl]
   1b1a4:	adds	r7, r3, #0
   1b1a8:	movne	r7, #1
   1b1ac:	cmp	r7, #0
   1b1b0:	bne	1ac80 <__assert_fail@plt+0x952c>
   1b1b4:	ldr	r3, [sp, #64]	; 0x40
   1b1b8:	cmp	r8, #0
   1b1bc:	movne	r3, #0
   1b1c0:	andeq	r3, r3, #1
   1b1c4:	cmp	r3, #0
   1b1c8:	str	r3, [sp, #64]	; 0x40
   1b1cc:	bne	1bc70 <__assert_fail@plt+0xa51c>
   1b1d0:	ldr	r3, [sp, #40]	; 0x28
   1b1d4:	ldr	r2, [sp, #52]	; 0x34
   1b1d8:	eor	r3, r3, #1
   1b1dc:	ands	r2, r2, r3
   1b1e0:	beq	1c09c <__assert_fail@plt+0xa948>
   1b1e4:	ldr	r3, [sp, #76]	; 0x4c
   1b1e8:	cmp	r3, #0
   1b1ec:	beq	1c06c <__assert_fail@plt+0xa918>
   1b1f0:	ldr	r3, [sp, #28]
   1b1f4:	cmp	r3, #0
   1b1f8:	bne	1c028 <__assert_fail@plt+0xa8d4>
   1b1fc:	ldr	r2, [sp, #84]	; 0x54
   1b200:	clz	r3, fp
   1b204:	cmp	r2, #0
   1b208:	lsr	r3, r3, #5
   1b20c:	moveq	r3, #0
   1b210:	cmp	r3, #0
   1b214:	beq	1bfc8 <__assert_fail@plt+0xa874>
   1b218:	mov	fp, r2
   1b21c:	str	r3, [sp, #76]	; 0x4c
   1b220:	b	1abac <__assert_fail@plt+0x9458>
   1b224:	ldr	r3, [sp, #176]	; 0xb0
   1b228:	ldr	r6, [sp, #48]	; 0x30
   1b22c:	cmp	r3, #2
   1b230:	beq	1b768 <__assert_fail@plt+0xa014>
   1b234:	ldr	r3, [sp, #88]	; 0x58
   1b238:	cmp	r3, #0
   1b23c:	beq	1bcec <__assert_fail@plt+0xa598>
   1b240:	mov	r3, #0
   1b244:	add	sl, sl, #1
   1b248:	ldr	r6, [sp, #36]	; 0x24
   1b24c:	str	r3, [sp, #32]
   1b250:	mov	r4, #92	; 0x5c
   1b254:	b	1b140 <__assert_fail@plt+0x99ec>
   1b258:	ldr	r3, [sp, #176]	; 0xb0
   1b25c:	ldr	r6, [sp, #48]	; 0x30
   1b260:	cmp	r3, #2
   1b264:	beq	1b798 <__assert_fail@plt+0xa044>
   1b268:	cmp	r3, #5
   1b26c:	bne	1bcfc <__assert_fail@plt+0xa5a8>
   1b270:	ldr	r3, [sp, #100]	; 0x64
   1b274:	cmp	r3, #0
   1b278:	beq	1bd60 <__assert_fail@plt+0xa60c>
   1b27c:	ldr	r2, [sp, #24]
   1b280:	add	r3, sl, #2
   1b284:	cmp	r2, r3
   1b288:	bls	1b298 <__assert_fail@plt+0x9b44>
   1b28c:	ldrb	r4, [r5, #1]
   1b290:	cmp	r4, #63	; 0x3f
   1b294:	beq	1bf08 <__assert_fail@plt+0xa7b4>
   1b298:	mov	r1, #0
   1b29c:	str	r1, [sp, #32]
   1b2a0:	mov	r4, #63	; 0x3f
   1b2a4:	b	1b10c <__assert_fail@plt+0x99b8>
   1b2a8:	ldr	r3, [sp, #176]	; 0xb0
   1b2ac:	ldr	r6, [sp, #48]	; 0x30
   1b2b0:	cmp	r3, #2
   1b2b4:	beq	1b7c4 <__assert_fail@plt+0xa070>
   1b2b8:	str	r7, [sp, #32]
   1b2bc:	str	r7, [sp, #76]	; 0x4c
   1b2c0:	mov	r1, #0
   1b2c4:	mov	r4, #39	; 0x27
   1b2c8:	b	1b10c <__assert_fail@plt+0x99b8>
   1b2cc:	ldr	r6, [sp, #48]	; 0x30
   1b2d0:	ldr	r1, [sp, #52]	; 0x34
   1b2d4:	str	r7, [sp, #32]
   1b2d8:	b	1b10c <__assert_fail@plt+0x99b8>
   1b2dc:	ldr	r6, [sp, #48]	; 0x30
   1b2e0:	ldr	r1, [sp, #52]	; 0x34
   1b2e4:	mov	r4, #12
   1b2e8:	mov	r3, #102	; 0x66
   1b2ec:	ldr	r2, [sp, #56]	; 0x38
   1b2f0:	cmp	r2, #0
   1b2f4:	streq	r2, [sp, #32]
   1b2f8:	beq	1b10c <__assert_fail@plt+0x99b8>
   1b2fc:	mov	r4, r3
   1b300:	mov	r3, #0
   1b304:	str	r3, [sp, #32]
   1b308:	ldr	r3, [sp, #40]	; 0x28
   1b30c:	cmp	r3, #0
   1b310:	bne	1ba80 <__assert_fail@plt+0xa32c>
   1b314:	ldr	r3, [sp, #36]	; 0x24
   1b318:	eor	r3, r3, #1
   1b31c:	and	r3, r3, r1
   1b320:	ands	r3, r3, #255	; 0xff
   1b324:	beq	1b35c <__assert_fail@plt+0x9c08>
   1b328:	cmp	fp, r8
   1b32c:	movhi	r2, #39	; 0x27
   1b330:	strbhi	r2, [r9, r8]
   1b334:	add	r2, r8, #1
   1b338:	cmp	fp, r2
   1b33c:	movhi	r1, #36	; 0x24
   1b340:	strbhi	r1, [r9, r2]
   1b344:	add	r2, r8, #2
   1b348:	cmp	fp, r2
   1b34c:	add	r8, r8, #3
   1b350:	movhi	r1, #39	; 0x27
   1b354:	strbhi	r1, [r9, r2]
   1b358:	str	r3, [sp, #36]	; 0x24
   1b35c:	cmp	fp, r8
   1b360:	movhi	r3, #92	; 0x5c
   1b364:	strbhi	r3, [r9, r8]
   1b368:	add	sl, sl, #1
   1b36c:	add	r8, r8, #1
   1b370:	b	1b170 <__assert_fail@plt+0x9a1c>
   1b374:	ldr	r6, [sp, #48]	; 0x30
   1b378:	mov	r4, #10
   1b37c:	mov	r3, #110	; 0x6e
   1b380:	ldr	r2, [sp, #64]	; 0x40
   1b384:	cmp	r2, #0
   1b388:	bne	1be08 <__assert_fail@plt+0xa6b4>
   1b38c:	ldr	r1, [sp, #52]	; 0x34
   1b390:	b	1b2ec <__assert_fail@plt+0x9b98>
   1b394:	ldr	r6, [sp, #48]	; 0x30
   1b398:	ldr	r1, [sp, #52]	; 0x34
   1b39c:	mov	r3, #116	; 0x74
   1b3a0:	b	1b2ec <__assert_fail@plt+0x9b98>
   1b3a4:	ldr	r6, [sp, #48]	; 0x30
   1b3a8:	ldr	r1, [sp, #52]	; 0x34
   1b3ac:	mov	r4, #11
   1b3b0:	mov	r3, #118	; 0x76
   1b3b4:	b	1b2ec <__assert_fail@plt+0x9b98>
   1b3b8:	ldr	r6, [sp, #48]	; 0x30
   1b3bc:	ldr	r1, [sp, #52]	; 0x34
   1b3c0:	mov	r4, #8
   1b3c4:	mov	r3, #98	; 0x62
   1b3c8:	b	1b2ec <__assert_fail@plt+0x9b98>
   1b3cc:	ldr	r6, [sp, #48]	; 0x30
   1b3d0:	ldr	r1, [sp, #52]	; 0x34
   1b3d4:	mov	r4, #7
   1b3d8:	mov	r3, #97	; 0x61
   1b3dc:	b	1b2ec <__assert_fail@plt+0x9b98>
   1b3e0:	ldr	r3, [sp, #56]	; 0x38
   1b3e4:	ldr	r6, [sp, #48]	; 0x30
   1b3e8:	cmp	r3, #0
   1b3ec:	beq	1b8b0 <__assert_fail@plt+0xa15c>
   1b3f0:	ldr	r3, [sp, #40]	; 0x28
   1b3f4:	cmp	r3, #0
   1b3f8:	bne	1bee4 <__assert_fail@plt+0xa790>
   1b3fc:	ldr	r3, [sp, #36]	; 0x24
   1b400:	ldr	r2, [sp, #52]	; 0x34
   1b404:	eor	r3, r3, #1
   1b408:	ands	r3, r2, r3
   1b40c:	moveq	r2, r8
   1b410:	beq	1b448 <__assert_fail@plt+0x9cf4>
   1b414:	cmp	fp, r8
   1b418:	movhi	r2, #39	; 0x27
   1b41c:	strbhi	r2, [r9, r8]
   1b420:	add	r2, r8, #1
   1b424:	cmp	fp, r2
   1b428:	movhi	r1, #36	; 0x24
   1b42c:	strbhi	r1, [r9, r2]
   1b430:	add	r2, r8, #2
   1b434:	cmp	fp, r2
   1b438:	movhi	r1, #39	; 0x27
   1b43c:	strbhi	r1, [r9, r2]
   1b440:	add	r2, r8, #3
   1b444:	str	r3, [sp, #36]	; 0x24
   1b448:	cmp	fp, r2
   1b44c:	movhi	r3, #92	; 0x5c
   1b450:	strbhi	r3, [r9, r2]
   1b454:	ldr	r3, [sp, #92]	; 0x5c
   1b458:	add	r8, r2, #1
   1b45c:	cmp	r3, #0
   1b460:	beq	1bde4 <__assert_fail@plt+0xa690>
   1b464:	ldr	r1, [sp, #24]
   1b468:	add	r3, sl, #1
   1b46c:	cmp	r1, r3
   1b470:	bls	1b4a8 <__assert_fail@plt+0x9d54>
   1b474:	ldr	r1, [sp, #44]	; 0x2c
   1b478:	ldrb	r3, [r1, r3]
   1b47c:	sub	r3, r3, #48	; 0x30
   1b480:	cmp	r3, #9
   1b484:	bhi	1b4a8 <__assert_fail@plt+0x9d54>
   1b488:	cmp	fp, r8
   1b48c:	movhi	r3, #48	; 0x30
   1b490:	strbhi	r3, [r9, r8]
   1b494:	add	r3, r2, #2
   1b498:	cmp	fp, r3
   1b49c:	add	r8, r2, #3
   1b4a0:	movhi	r1, #48	; 0x30
   1b4a4:	strbhi	r1, [r9, r3]
   1b4a8:	ldr	r3, [sp, #40]	; 0x28
   1b4ac:	ldr	r1, [sp, #52]	; 0x34
   1b4b0:	mov	r7, r3
   1b4b4:	str	r3, [sp, #32]
   1b4b8:	mov	r4, #48	; 0x30
   1b4bc:	b	1b10c <__assert_fail@plt+0x99b8>
   1b4c0:	ldr	r6, [sp, #48]	; 0x30
   1b4c4:	cmp	sl, #0
   1b4c8:	streq	r7, [sp, #32]
   1b4cc:	beq	1b4ec <__assert_fail@plt+0x9d98>
   1b4d0:	mov	r3, #0
   1b4d4:	ldr	r1, [sp, #52]	; 0x34
   1b4d8:	str	r3, [sp, #32]
   1b4dc:	b	1b10c <__assert_fail@plt+0x99b8>
   1b4e0:	ldr	r6, [sp, #48]	; 0x30
   1b4e4:	mov	r3, #0
   1b4e8:	str	r3, [sp, #32]
   1b4ec:	ldr	r3, [sp, #64]	; 0x40
   1b4f0:	cmp	r3, #0
   1b4f4:	bne	1bc70 <__assert_fail@plt+0xa51c>
   1b4f8:	ldr	r1, [sp, #52]	; 0x34
   1b4fc:	b	1b10c <__assert_fail@plt+0x99b8>
   1b500:	ldr	r3, [sp, #48]	; 0x30
   1b504:	mov	r6, r3
   1b508:	str	r3, [sp, #32]
   1b50c:	b	1b4ec <__assert_fail@plt+0x9d98>
   1b510:	ldr	r6, [sp, #48]	; 0x30
   1b514:	mov	r4, #13
   1b518:	mov	r3, #114	; 0x72
   1b51c:	b	1b380 <__assert_fail@plt+0x9c2c>
   1b520:	ldr	r3, [sp, #44]	; 0x2c
   1b524:	add	r5, r3, sl
   1b528:	ldrb	r4, [r5]
   1b52c:	cmp	r4, #126	; 0x7e
   1b530:	ldrls	pc, [pc, r4, lsl #2]
   1b534:	b	1b8d0 <__assert_fail@plt+0xa17c>
   1b538:	andeq	fp, r1, r0, lsr #17
   1b53c:	ldrdeq	fp, [r1], -r0
   1b540:	ldrdeq	fp, [r1], -r0
   1b544:	ldrdeq	fp, [r1], -r0
   1b548:	ldrdeq	fp, [r1], -r0
   1b54c:	ldrdeq	fp, [r1], -r0
   1b550:	ldrdeq	fp, [r1], -r0
   1b554:	muleq	r1, r8, r8
   1b558:	muleq	r1, r0, r8
   1b55c:	andeq	fp, r1, r4, lsl #17
   1b560:	andeq	fp, r1, ip, ror r8
   1b564:	andeq	fp, r1, r4, ror r8
   1b568:	andeq	fp, r1, ip, ror #16
   1b56c:	andeq	fp, r1, r4, ror #16
   1b570:	ldrdeq	fp, [r1], -r0
   1b574:	ldrdeq	fp, [r1], -r0
   1b578:	ldrdeq	fp, [r1], -r0
   1b57c:	ldrdeq	fp, [r1], -r0
   1b580:	ldrdeq	fp, [r1], -r0
   1b584:	ldrdeq	fp, [r1], -r0
   1b588:	ldrdeq	fp, [r1], -r0
   1b58c:	ldrdeq	fp, [r1], -r0
   1b590:	ldrdeq	fp, [r1], -r0
   1b594:	ldrdeq	fp, [r1], -r0
   1b598:	ldrdeq	fp, [r1], -r0
   1b59c:	ldrdeq	fp, [r1], -r0
   1b5a0:	ldrdeq	fp, [r1], -r0
   1b5a4:	ldrdeq	fp, [r1], -r0
   1b5a8:	ldrdeq	fp, [r1], -r0
   1b5ac:	ldrdeq	fp, [r1], -r0
   1b5b0:	ldrdeq	fp, [r1], -r0
   1b5b4:	ldrdeq	fp, [r1], -r0
   1b5b8:	andeq	fp, r1, r8, asr r8
   1b5bc:	andeq	fp, r1, r0, asr r8
   1b5c0:	andeq	fp, r1, r0, asr r8
   1b5c4:	andeq	fp, r1, r8, asr #16
   1b5c8:	andeq	fp, r1, r0, asr r8
   1b5cc:	andeq	fp, r1, r0, asr #16
   1b5d0:	andeq	fp, r1, r0, asr r8
   1b5d4:			; <UNDEFINED> instruction: 0x0001b7b4
   1b5d8:	andeq	fp, r1, r0, asr r8
   1b5dc:	andeq	fp, r1, r0, asr r8
   1b5e0:	andeq	fp, r1, r0, asr r8
   1b5e4:	andeq	fp, r1, r0, asr #16
   1b5e8:	andeq	fp, r1, r0, asr #16
   1b5ec:	andeq	fp, r1, r0, asr #16
   1b5f0:	andeq	fp, r1, r0, asr #16
   1b5f4:	andeq	fp, r1, r0, asr #16
   1b5f8:	andeq	fp, r1, r0, asr #16
   1b5fc:	andeq	fp, r1, r0, asr #16
   1b600:	andeq	fp, r1, r0, asr #16
   1b604:	andeq	fp, r1, r0, asr #16
   1b608:	andeq	fp, r1, r0, asr #16
   1b60c:	andeq	fp, r1, r0, asr #16
   1b610:	andeq	fp, r1, r0, asr #16
   1b614:	andeq	fp, r1, r0, asr #16
   1b618:	andeq	fp, r1, r0, asr #16
   1b61c:	andeq	fp, r1, r0, asr #16
   1b620:	andeq	fp, r1, r0, asr #16
   1b624:	andeq	fp, r1, r0, asr r8
   1b628:	andeq	fp, r1, r0, asr r8
   1b62c:	andeq	fp, r1, r0, asr r8
   1b630:	andeq	fp, r1, r0, asr r8
   1b634:	andeq	fp, r1, r8, lsl #15
   1b638:	ldrdeq	fp, [r1], -r0
   1b63c:	andeq	fp, r1, r0, asr #16
   1b640:	andeq	fp, r1, r0, asr #16
   1b644:	andeq	fp, r1, r0, asr #16
   1b648:	andeq	fp, r1, r0, asr #16
   1b64c:	andeq	fp, r1, r0, asr #16
   1b650:	andeq	fp, r1, r0, asr #16
   1b654:	andeq	fp, r1, r0, asr #16
   1b658:	andeq	fp, r1, r0, asr #16
   1b65c:	andeq	fp, r1, r0, asr #16
   1b660:	andeq	fp, r1, r0, asr #16
   1b664:	andeq	fp, r1, r0, asr #16
   1b668:	andeq	fp, r1, r0, asr #16
   1b66c:	andeq	fp, r1, r0, asr #16
   1b670:	andeq	fp, r1, r0, asr #16
   1b674:	andeq	fp, r1, r0, asr #16
   1b678:	andeq	fp, r1, r0, asr #16
   1b67c:	andeq	fp, r1, r0, asr #16
   1b680:	andeq	fp, r1, r0, asr #16
   1b684:	andeq	fp, r1, r0, asr #16
   1b688:	andeq	fp, r1, r0, asr #16
   1b68c:	andeq	fp, r1, r0, asr #16
   1b690:	andeq	fp, r1, r0, asr #16
   1b694:	andeq	fp, r1, r0, asr #16
   1b698:	andeq	fp, r1, r0, asr #16
   1b69c:	andeq	fp, r1, r0, asr #16
   1b6a0:	andeq	fp, r1, r0, asr #16
   1b6a4:	andeq	fp, r1, r0, asr r8
   1b6a8:	andeq	fp, r1, r8, asr r7
   1b6ac:	andeq	fp, r1, r0, asr #16
   1b6b0:	andeq	fp, r1, r0, asr r8
   1b6b4:	andeq	fp, r1, r0, asr #16
   1b6b8:	andeq	fp, r1, r0, asr r8
   1b6bc:	andeq	fp, r1, r0, asr #16
   1b6c0:	andeq	fp, r1, r0, asr #16
   1b6c4:	andeq	fp, r1, r0, asr #16
   1b6c8:	andeq	fp, r1, r0, asr #16
   1b6cc:	andeq	fp, r1, r0, asr #16
   1b6d0:	andeq	fp, r1, r0, asr #16
   1b6d4:	andeq	fp, r1, r0, asr #16
   1b6d8:	andeq	fp, r1, r0, asr #16
   1b6dc:	andeq	fp, r1, r0, asr #16
   1b6e0:	andeq	fp, r1, r0, asr #16
   1b6e4:	andeq	fp, r1, r0, asr #16
   1b6e8:	andeq	fp, r1, r0, asr #16
   1b6ec:	andeq	fp, r1, r0, asr #16
   1b6f0:	andeq	fp, r1, r0, asr #16
   1b6f4:	andeq	fp, r1, r0, asr #16
   1b6f8:	andeq	fp, r1, r0, asr #16
   1b6fc:	andeq	fp, r1, r0, asr #16
   1b700:	andeq	fp, r1, r0, asr #16
   1b704:	andeq	fp, r1, r0, asr #16
   1b708:	andeq	fp, r1, r0, asr #16
   1b70c:	andeq	fp, r1, r0, asr #16
   1b710:	andeq	fp, r1, r0, asr #16
   1b714:	andeq	fp, r1, r0, asr #16
   1b718:	andeq	fp, r1, r0, asr #16
   1b71c:	andeq	fp, r1, r0, asr #16
   1b720:	andeq	fp, r1, r0, asr #16
   1b724:	andeq	fp, r1, r4, lsr r7
   1b728:	andeq	fp, r1, r0, asr r8
   1b72c:	andeq	fp, r1, r4, lsr r7
   1b730:	andeq	fp, r1, r8, asr #16
   1b734:	ldr	r3, [sp, #24]
   1b738:	mov	r6, #0
   1b73c:	cmn	r3, #1
   1b740:	bne	1b0ec <__assert_fail@plt+0x9998>
   1b744:	ldr	r3, [sp, #44]	; 0x2c
   1b748:	ldrb	r3, [r3, #1]
   1b74c:	adds	r3, r3, #0
   1b750:	movne	r3, #1
   1b754:	b	1b0f4 <__assert_fail@plt+0x99a0>
   1b758:	ldr	r3, [sp, #176]	; 0xb0
   1b75c:	mov	r6, #0
   1b760:	cmp	r3, #2
   1b764:	bne	1b234 <__assert_fail@plt+0x9ae0>
   1b768:	ldr	r3, [sp, #64]	; 0x40
   1b76c:	cmp	r3, #0
   1b770:	bne	1bfa8 <__assert_fail@plt+0xa854>
   1b774:	add	sl, sl, #1
   1b778:	ldr	r6, [sp, #36]	; 0x24
   1b77c:	str	r3, [sp, #32]
   1b780:	mov	r4, #92	; 0x5c
   1b784:	b	1b140 <__assert_fail@plt+0x99ec>
   1b788:	ldr	r3, [sp, #176]	; 0xb0
   1b78c:	mov	r6, #0
   1b790:	cmp	r3, #2
   1b794:	bne	1b268 <__assert_fail@plt+0x9b14>
   1b798:	ldr	r3, [sp, #40]	; 0x28
   1b79c:	cmp	r3, #0
   1b7a0:	bne	1ba84 <__assert_fail@plt+0xa330>
   1b7a4:	mov	r1, r7
   1b7a8:	str	r3, [sp, #32]
   1b7ac:	mov	r4, #63	; 0x3f
   1b7b0:	b	1b10c <__assert_fail@plt+0x99b8>
   1b7b4:	ldr	r3, [sp, #176]	; 0xb0
   1b7b8:	mov	r6, #0
   1b7bc:	cmp	r3, #2
   1b7c0:	bne	1b2b8 <__assert_fail@plt+0x9b64>
   1b7c4:	ldr	r3, [sp, #64]	; 0x40
   1b7c8:	cmp	r3, #0
   1b7cc:	bne	1bfa8 <__assert_fail@plt+0xa854>
   1b7d0:	ldr	r2, [sp, #84]	; 0x54
   1b7d4:	adds	r3, fp, #0
   1b7d8:	movne	r3, #1
   1b7dc:	cmp	r2, #0
   1b7e0:	movne	r3, #0
   1b7e4:	cmp	r3, #0
   1b7e8:	strne	fp, [sp, #84]	; 0x54
   1b7ec:	movne	fp, #0
   1b7f0:	bne	1b820 <__assert_fail@plt+0xa0cc>
   1b7f4:	cmp	fp, r8
   1b7f8:	movhi	r3, #39	; 0x27
   1b7fc:	strbhi	r3, [r9, r8]
   1b800:	add	r3, r8, #1
   1b804:	cmp	fp, r3
   1b808:	movhi	r2, #92	; 0x5c
   1b80c:	strbhi	r2, [r9, r3]
   1b810:	add	r3, r8, #2
   1b814:	cmp	fp, r3
   1b818:	movhi	r2, #39	; 0x27
   1b81c:	strbhi	r2, [r9, r3]
   1b820:	ldr	r3, [sp, #64]	; 0x40
   1b824:	add	r8, r8, #3
   1b828:	mov	r1, r7
   1b82c:	str	r7, [sp, #32]
   1b830:	str	r7, [sp, #76]	; 0x4c
   1b834:	str	r3, [sp, #36]	; 0x24
   1b838:	mov	r4, #39	; 0x27
   1b83c:	b	1b10c <__assert_fail@plt+0x99b8>
   1b840:	mov	r6, #0
   1b844:	b	1b2d0 <__assert_fail@plt+0x9b7c>
   1b848:	mov	r6, #0
   1b84c:	b	1b4c4 <__assert_fail@plt+0x9d70>
   1b850:	mov	r6, #0
   1b854:	b	1b4e4 <__assert_fail@plt+0x9d90>
   1b858:	str	r7, [sp, #32]
   1b85c:	mov	r6, #0
   1b860:	b	1b4ec <__assert_fail@plt+0x9d98>
   1b864:	mov	r6, #0
   1b868:	b	1b514 <__assert_fail@plt+0x9dc0>
   1b86c:	mov	r6, #0
   1b870:	b	1b2e0 <__assert_fail@plt+0x9b8c>
   1b874:	mov	r6, #0
   1b878:	b	1b3a8 <__assert_fail@plt+0x9c54>
   1b87c:	mov	r6, #0
   1b880:	b	1b378 <__assert_fail@plt+0x9c24>
   1b884:	mov	r6, #0
   1b888:	mov	r3, #116	; 0x74
   1b88c:	b	1b380 <__assert_fail@plt+0x9c2c>
   1b890:	mov	r6, #0
   1b894:	b	1b3bc <__assert_fail@plt+0x9c68>
   1b898:	mov	r6, #0
   1b89c:	b	1b3d0 <__assert_fail@plt+0x9c7c>
   1b8a0:	ldr	r3, [sp, #56]	; 0x38
   1b8a4:	mov	r6, #0
   1b8a8:	cmp	r3, #0
   1b8ac:	bne	1b3f0 <__assert_fail@plt+0x9c9c>
   1b8b0:	ldr	r3, [sp, #96]	; 0x60
   1b8b4:	cmp	r3, #0
   1b8b8:	addne	sl, sl, #1
   1b8bc:	bne	1ac64 <__assert_fail@plt+0x9510>
   1b8c0:	ldr	r1, [sp, #52]	; 0x34
   1b8c4:	str	r3, [sp, #32]
   1b8c8:	mov	r4, r3
   1b8cc:	b	1b10c <__assert_fail@plt+0x99b8>
   1b8d0:	mov	r6, #0
   1b8d4:	ldr	r3, [sp, #80]	; 0x50
   1b8d8:	cmp	r3, #1
   1b8dc:	bne	1bacc <__assert_fail@plt+0xa378>
   1b8e0:	bl	1158c <__ctype_b_loc@plt>
   1b8e4:	ldr	r2, [sp, #80]	; 0x50
   1b8e8:	sxth	r3, r4
   1b8ec:	mov	r1, r2
   1b8f0:	lsl	r3, r3, #1
   1b8f4:	ldr	r2, [r0]
   1b8f8:	ldrh	r3, [r2, r3]
   1b8fc:	and	r3, r3, #16384	; 0x4000
   1b900:	cmp	r3, #0
   1b904:	movne	r3, #1
   1b908:	moveq	r3, #0
   1b90c:	str	r3, [sp, #32]
   1b910:	moveq	r3, #1
   1b914:	movne	r3, #0
   1b918:	ldr	r2, [sp, #56]	; 0x38
   1b91c:	and	r3, r3, r2
   1b920:	ands	r3, r3, #255	; 0xff
   1b924:	beq	1b4f8 <__assert_fail@plt+0x9da4>
   1b928:	add	r1, sl, r1
   1b92c:	mov	r0, #0
   1b930:	ldr	r7, [sp, #40]	; 0x28
   1b934:	ldr	r2, [sp, #36]	; 0x24
   1b938:	ldr	lr, [sp, #52]	; 0x34
   1b93c:	b	1b9ec <__assert_fail@plt+0xa298>
   1b940:	cmp	r7, #0
   1b944:	bne	1bd40 <__assert_fail@plt+0xa5ec>
   1b948:	eor	r0, r2, #1
   1b94c:	ands	r0, lr, r0
   1b950:	beq	1b988 <__assert_fail@plt+0xa234>
   1b954:	cmp	fp, r8
   1b958:	movhi	r2, #39	; 0x27
   1b95c:	strbhi	r2, [r9, r8]
   1b960:	add	r2, r8, #1
   1b964:	cmp	fp, r2
   1b968:	movhi	ip, #36	; 0x24
   1b96c:	strbhi	ip, [r9, r2]
   1b970:	add	r2, r8, #2
   1b974:	cmp	fp, r2
   1b978:	movhi	ip, #39	; 0x27
   1b97c:	strbhi	ip, [r9, r2]
   1b980:	add	r8, r8, #3
   1b984:	mov	r2, r0
   1b988:	cmp	fp, r8
   1b98c:	movhi	r0, #92	; 0x5c
   1b990:	strbhi	r0, [r9, r8]
   1b994:	add	r0, r8, #1
   1b998:	cmp	fp, r0
   1b99c:	lsrhi	ip, r4, #6
   1b9a0:	addhi	ip, ip, #48	; 0x30
   1b9a4:	strbhi	ip, [r9, r0]
   1b9a8:	add	ip, r8, #2
   1b9ac:	cmp	fp, ip
   1b9b0:	lsrhi	r0, r4, #3
   1b9b4:	andhi	r0, r0, #7
   1b9b8:	addhi	r0, r0, #48	; 0x30
   1b9bc:	add	sl, sl, #1
   1b9c0:	strbhi	r0, [r9, ip]
   1b9c4:	and	r4, r4, #7
   1b9c8:	cmp	sl, r1
   1b9cc:	add	r4, r4, #48	; 0x30
   1b9d0:	add	r8, r8, #3
   1b9d4:	bcs	1bd58 <__assert_fail@plt+0xa604>
   1b9d8:	mov	r0, r3
   1b9dc:	cmp	fp, r8
   1b9e0:	strbhi	r4, [r9, r8]
   1b9e4:	ldrb	r4, [r5, #1]!
   1b9e8:	add	r8, r8, #1
   1b9ec:	cmp	r3, #0
   1b9f0:	bne	1b940 <__assert_fail@plt+0xa1ec>
   1b9f4:	cmp	r6, #0
   1b9f8:	bne	1ba9c <__assert_fail@plt+0xa348>
   1b9fc:	eor	r6, r0, #1
   1ba00:	and	r6, r6, r2
   1ba04:	add	sl, sl, #1
   1ba08:	cmp	r1, sl
   1ba0c:	uxtb	r6, r6
   1ba10:	bls	1bac4 <__assert_fail@plt+0xa370>
   1ba14:	cmp	r6, #0
   1ba18:	beq	1b9dc <__assert_fail@plt+0xa288>
   1ba1c:	cmp	fp, r8
   1ba20:	movhi	r2, #39	; 0x27
   1ba24:	strbhi	r2, [r9, r8]
   1ba28:	add	r2, r8, #1
   1ba2c:	cmp	fp, r2
   1ba30:	movhi	ip, #39	; 0x27
   1ba34:	strbhi	ip, [r9, r2]
   1ba38:	add	r8, r8, #2
   1ba3c:	mov	r6, r3
   1ba40:	mov	r2, r3
   1ba44:	b	1b9dc <__assert_fail@plt+0xa288>
   1ba48:	ldr	r3, [sp, #184]	; 0xb8
   1ba4c:	cmp	r3, #0
   1ba50:	beq	1b128 <__assert_fail@plt+0x99d4>
   1ba54:	lsr	r2, r4, #5
   1ba58:	mov	r0, r3
   1ba5c:	uxtb	r2, r2
   1ba60:	and	r3, r4, #31
   1ba64:	ldr	r2, [r0, r2, lsl #2]
   1ba68:	lsr	r3, r2, r3
   1ba6c:	tst	r3, #1
   1ba70:	beq	1b128 <__assert_fail@plt+0x99d4>
   1ba74:	ldr	r3, [sp, #40]	; 0x28
   1ba78:	cmp	r3, #0
   1ba7c:	beq	1b314 <__assert_fail@plt+0x9bc0>
   1ba80:	mov	r3, r1
   1ba84:	str	r3, [sp, #64]	; 0x40
   1ba88:	mov	sl, r9
   1ba8c:	ldr	r3, [sp, #56]	; 0x38
   1ba90:	mov	r9, fp
   1ba94:	ldr	r2, [sp, #64]	; 0x40
   1ba98:	b	1bc88 <__assert_fail@plt+0xa534>
   1ba9c:	cmp	fp, r8
   1baa0:	eor	r6, r0, #1
   1baa4:	movhi	ip, #92	; 0x5c
   1baa8:	and	r6, r6, r2
   1baac:	add	sl, sl, #1
   1bab0:	strbhi	ip, [r9, r8]
   1bab4:	cmp	r1, sl
   1bab8:	add	r8, r8, #1
   1babc:	uxtb	r6, r6
   1bac0:	bhi	1ba14 <__assert_fail@plt+0xa2c0>
   1bac4:	str	r2, [sp, #36]	; 0x24
   1bac8:	b	1b140 <__assert_fail@plt+0x99ec>
   1bacc:	ldr	r3, [sp, #24]
   1bad0:	cmn	r3, #1
   1bad4:	mov	r3, #0
   1bad8:	str	r3, [sp, #128]	; 0x80
   1badc:	str	r3, [sp, #132]	; 0x84
   1bae0:	beq	1bdd4 <__assert_fail@plt+0xa680>
   1bae4:	mov	r2, r7
   1bae8:	mov	r3, #0
   1baec:	str	r7, [sp, #104]	; 0x68
   1baf0:	str	r5, [sp, #116]	; 0x74
   1baf4:	mov	r7, r3
   1baf8:	mov	r5, r2
   1bafc:	str	r4, [sp, #32]
   1bb00:	str	r6, [sp, #108]	; 0x6c
   1bb04:	str	r8, [sp, #112]	; 0x70
   1bb08:	ldr	r3, [sp, #44]	; 0x2c
   1bb0c:	add	r6, sl, r7
   1bb10:	add	r4, r3, r6
   1bb14:	ldr	r3, [sp, #24]
   1bb18:	mov	r1, r4
   1bb1c:	sub	r2, r3, r6
   1bb20:	add	r0, sp, #124	; 0x7c
   1bb24:	add	r3, sp, #128	; 0x80
   1bb28:	bl	207c8 <__assert_fail@plt+0xf074>
   1bb2c:	subs	r8, r0, #0
   1bb30:	beq	1beb8 <__assert_fail@plt+0xa764>
   1bb34:	cmn	r8, #1
   1bb38:	beq	1be90 <__assert_fail@plt+0xa73c>
   1bb3c:	cmn	r8, #2
   1bb40:	beq	1be28 <__assert_fail@plt+0xa6d4>
   1bb44:	ldr	r3, [sp, #64]	; 0x40
   1bb48:	cmp	r3, #0
   1bb4c:	beq	1bc0c <__assert_fail@plt+0xa4b8>
   1bb50:	cmp	r8, #1
   1bb54:	beq	1bc0c <__assert_fail@plt+0xa4b8>
   1bb58:	sub	r3, r8, #1
   1bb5c:	add	r6, r3, r6
   1bb60:	ldr	r3, [sp, #44]	; 0x2c
   1bb64:	add	r6, r3, r6
   1bb68:	ldrb	r3, [r4, #1]!
   1bb6c:	sub	r3, r3, #91	; 0x5b
   1bb70:	cmp	r3, #33	; 0x21
   1bb74:	ldrls	pc, [pc, r3, lsl #2]
   1bb78:	b	1bc04 <__assert_fail@plt+0xa4b0>
   1bb7c:	andeq	fp, r1, r0, ror ip
   1bb80:	andeq	fp, r1, r0, ror ip
   1bb84:	andeq	fp, r1, r4, lsl #24
   1bb88:	andeq	fp, r1, r0, ror ip
   1bb8c:	andeq	fp, r1, r4, lsl #24
   1bb90:	andeq	fp, r1, r0, ror ip
   1bb94:	andeq	fp, r1, r4, lsl #24
   1bb98:	andeq	fp, r1, r4, lsl #24
   1bb9c:	andeq	fp, r1, r4, lsl #24
   1bba0:	andeq	fp, r1, r4, lsl #24
   1bba4:	andeq	fp, r1, r4, lsl #24
   1bba8:	andeq	fp, r1, r4, lsl #24
   1bbac:	andeq	fp, r1, r4, lsl #24
   1bbb0:	andeq	fp, r1, r4, lsl #24
   1bbb4:	andeq	fp, r1, r4, lsl #24
   1bbb8:	andeq	fp, r1, r4, lsl #24
   1bbbc:	andeq	fp, r1, r4, lsl #24
   1bbc0:	andeq	fp, r1, r4, lsl #24
   1bbc4:	andeq	fp, r1, r4, lsl #24
   1bbc8:	andeq	fp, r1, r4, lsl #24
   1bbcc:	andeq	fp, r1, r4, lsl #24
   1bbd0:	andeq	fp, r1, r4, lsl #24
   1bbd4:	andeq	fp, r1, r4, lsl #24
   1bbd8:	andeq	fp, r1, r4, lsl #24
   1bbdc:	andeq	fp, r1, r4, lsl #24
   1bbe0:	andeq	fp, r1, r4, lsl #24
   1bbe4:	andeq	fp, r1, r4, lsl #24
   1bbe8:	andeq	fp, r1, r4, lsl #24
   1bbec:	andeq	fp, r1, r4, lsl #24
   1bbf0:	andeq	fp, r1, r4, lsl #24
   1bbf4:	andeq	fp, r1, r4, lsl #24
   1bbf8:	andeq	fp, r1, r4, lsl #24
   1bbfc:	andeq	fp, r1, r4, lsl #24
   1bc00:	andeq	fp, r1, r0, ror ip
   1bc04:	cmp	r6, r4
   1bc08:	bne	1bb68 <__assert_fail@plt+0xa414>
   1bc0c:	ldr	r0, [sp, #124]	; 0x7c
   1bc10:	bl	114cc <iswprint@plt>
   1bc14:	add	r7, r7, r8
   1bc18:	cmp	r0, #0
   1bc1c:	add	r0, sp, #128	; 0x80
   1bc20:	moveq	r5, #0
   1bc24:	bl	1140c <mbsinit@plt>
   1bc28:	cmp	r0, #0
   1bc2c:	beq	1bb08 <__assert_fail@plt+0xa3b4>
   1bc30:	ldr	r4, [sp, #32]
   1bc34:	str	r5, [sp, #32]
   1bc38:	ldr	r3, [sp, #32]
   1bc3c:	mov	r1, r7
   1bc40:	eor	r3, r3, #1
   1bc44:	ldr	r7, [sp, #104]	; 0x68
   1bc48:	ldr	r6, [sp, #108]	; 0x6c
   1bc4c:	ldr	r8, [sp, #112]	; 0x70
   1bc50:	ldr	r5, [sp, #116]	; 0x74
   1bc54:	uxtb	r3, r3
   1bc58:	cmp	r1, #1
   1bc5c:	bls	1b918 <__assert_fail@plt+0xa1c4>
   1bc60:	ldr	r2, [sp, #56]	; 0x38
   1bc64:	and	r3, r3, r2
   1bc68:	uxtb	r3, r3
   1bc6c:	b	1b928 <__assert_fail@plt+0xa1d4>
   1bc70:	mov	r3, #2
   1bc74:	str	r3, [sp, #176]	; 0xb0
   1bc78:	ldr	r2, [sp, #64]	; 0x40
   1bc7c:	ldr	r3, [sp, #56]	; 0x38
   1bc80:	mov	sl, r9
   1bc84:	mov	r9, fp
   1bc88:	and	r3, r3, r2
   1bc8c:	tst	r3, #255	; 0xff
   1bc90:	ldr	r3, [sp, #176]	; 0xb0
   1bc94:	movne	r3, #4
   1bc98:	str	r3, [sp, #176]	; 0xb0
   1bc9c:	ldr	r3, [sp, #180]	; 0xb4
   1bca0:	mov	ip, #0
   1bca4:	bic	r3, r3, #2
   1bca8:	str	r3, [sp, #4]
   1bcac:	ldr	r3, [sp, #192]	; 0xc0
   1bcb0:	ldr	r2, [sp, #44]	; 0x2c
   1bcb4:	str	r3, [sp, #16]
   1bcb8:	ldr	r3, [sp, #188]	; 0xbc
   1bcbc:	mov	r1, r9
   1bcc0:	str	r3, [sp, #12]
   1bcc4:	ldr	r3, [sp, #176]	; 0xb0
   1bcc8:	mov	r0, sl
   1bccc:	str	r3, [sp]
   1bcd0:	str	ip, [sp, #8]
   1bcd4:	ldr	r3, [sp, #24]
   1bcd8:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1bcdc:	mov	fp, r0
   1bce0:	mov	r0, fp
   1bce4:	add	sp, sp, #140	; 0x8c
   1bce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcec:	mov	r4, #92	; 0x5c
   1bcf0:	mov	r1, #0
   1bcf4:	mov	r3, r4
   1bcf8:	b	1b2ec <__assert_fail@plt+0x9b98>
   1bcfc:	mov	r3, #0
   1bd00:	ldr	r1, [sp, #52]	; 0x34
   1bd04:	str	r3, [sp, #32]
   1bd08:	mov	r4, #63	; 0x3f
   1bd0c:	b	1b10c <__assert_fail@plt+0x99b8>
   1bd10:	cmp	fp, #0
   1bd14:	beq	1bd70 <__assert_fail@plt+0xa61c>
   1bd18:	mov	r3, #39	; 0x27
   1bd1c:	strb	r3, [r9]
   1bd20:	mov	r3, #0
   1bd24:	str	r3, [sp, #40]	; 0x28
   1bd28:	mov	r3, #1
   1bd2c:	str	r3, [sp, #68]	; 0x44
   1bd30:	ldr	r3, [pc, #448]	; 1bef8 <__assert_fail@plt+0xa7a4>
   1bd34:	mov	r8, #1
   1bd38:	str	r3, [sp, #72]	; 0x48
   1bd3c:	b	1af20 <__assert_fail@plt+0x97cc>
   1bd40:	ldr	r3, [sp, #40]	; 0x28
   1bd44:	mov	sl, r9
   1bd48:	str	r3, [sp, #56]	; 0x38
   1bd4c:	mov	r9, fp
   1bd50:	ldr	r2, [sp, #64]	; 0x40
   1bd54:	b	1bc88 <__assert_fail@plt+0xa534>
   1bd58:	str	r2, [sp, #36]	; 0x24
   1bd5c:	b	1b170 <__assert_fail@plt+0x9a1c>
   1bd60:	mov	r1, #0
   1bd64:	str	r3, [sp, #32]
   1bd68:	mov	r4, #63	; 0x3f
   1bd6c:	b	1b10c <__assert_fail@plt+0x99b8>
   1bd70:	ldr	r3, [pc, #384]	; 1bef8 <__assert_fail@plt+0xa7a4>
   1bd74:	str	r3, [sp, #72]	; 0x48
   1bd78:	mov	r3, #0
   1bd7c:	str	r3, [sp, #40]	; 0x28
   1bd80:	mov	r3, #1
   1bd84:	str	r3, [sp, #68]	; 0x44
   1bd88:	mov	r8, r3
   1bd8c:	b	1af20 <__assert_fail@plt+0x97cc>
   1bd90:	bl	11748 <abort@plt>
   1bd94:	cmp	fp, #0
   1bd98:	beq	1bdf8 <__assert_fail@plt+0xa6a4>
   1bd9c:	mov	r2, #1
   1bda0:	mov	r3, #34	; 0x22
   1bda4:	strb	r3, [r9]
   1bda8:	mov	r8, r2
   1bdac:	mov	r3, r2
   1bdb0:	str	r2, [sp, #68]	; 0x44
   1bdb4:	str	r3, [sp, #56]	; 0x38
   1bdb8:	ldr	r3, [pc, #316]	; 1befc <__assert_fail@plt+0xa7a8>
   1bdbc:	ldr	r1, [sp, #56]	; 0x38
   1bdc0:	str	r3, [sp, #72]	; 0x48
   1bdc4:	ldr	r2, [sp, #176]	; 0xb0
   1bdc8:	ldr	ip, [sp, #40]	; 0x28
   1bdcc:	ldr	lr, [sp, #176]	; 0xb0
   1bdd0:	b	1ac04 <__assert_fail@plt+0x94b0>
   1bdd4:	ldr	r0, [sp, #44]	; 0x2c
   1bdd8:	bl	115b0 <strlen@plt>
   1bddc:	str	r0, [sp, #24]
   1bde0:	b	1bae4 <__assert_fail@plt+0xa390>
   1bde4:	mov	r7, #0
   1bde8:	ldr	r1, [sp, #52]	; 0x34
   1bdec:	str	r3, [sp, #32]
   1bdf0:	mov	r4, #48	; 0x30
   1bdf4:	b	1b10c <__assert_fail@plt+0x99b8>
   1bdf8:	mov	r3, #1
   1bdfc:	str	r3, [sp, #68]	; 0x44
   1be00:	mov	r8, r3
   1be04:	b	1bdb4 <__assert_fail@plt+0xa660>
   1be08:	mov	r3, #2
   1be0c:	mov	sl, r9
   1be10:	str	r3, [sp, #176]	; 0xb0
   1be14:	mov	r9, fp
   1be18:	ldr	r3, [sp, #56]	; 0x38
   1be1c:	b	1bc88 <__assert_fail@plt+0xa534>
   1be20:	ldr	r6, [sp, #48]	; 0x30
   1be24:	b	1b8d4 <__assert_fail@plt+0xa180>
   1be28:	ldr	r0, [sp, #24]
   1be2c:	mov	ip, r6
   1be30:	cmp	r0, ip
   1be34:	mov	r1, r7
   1be38:	mov	r2, r4
   1be3c:	ldr	r7, [sp, #104]	; 0x68
   1be40:	ldr	r4, [sp, #32]
   1be44:	ldr	r6, [sp, #108]	; 0x6c
   1be48:	ldr	r8, [sp, #112]	; 0x70
   1be4c:	ldr	r5, [sp, #116]	; 0x74
   1be50:	bls	1be80 <__assert_fail@plt+0xa72c>
   1be54:	ldrb	r3, [r2]
   1be58:	cmp	r3, #0
   1be5c:	bne	1be70 <__assert_fail@plt+0xa71c>
   1be60:	b	1bf90 <__assert_fail@plt+0xa83c>
   1be64:	ldrb	r3, [r2, #1]!
   1be68:	cmp	r3, #0
   1be6c:	beq	1bf90 <__assert_fail@plt+0xa83c>
   1be70:	add	r1, r1, #1
   1be74:	add	r3, sl, r1
   1be78:	cmp	r0, r3
   1be7c:	bhi	1be64 <__assert_fail@plt+0xa710>
   1be80:	mov	r2, #0
   1be84:	mov	r3, r7
   1be88:	str	r2, [sp, #32]
   1be8c:	b	1bc58 <__assert_fail@plt+0xa504>
   1be90:	mov	r1, r7
   1be94:	ldr	r7, [sp, #104]	; 0x68
   1be98:	mov	r2, #0
   1be9c:	ldr	r4, [sp, #32]
   1bea0:	ldr	r6, [sp, #108]	; 0x6c
   1bea4:	ldr	r8, [sp, #112]	; 0x70
   1bea8:	ldr	r5, [sp, #116]	; 0x74
   1beac:	mov	r3, r7
   1beb0:	str	r2, [sp, #32]
   1beb4:	b	1bc58 <__assert_fail@plt+0xa504>
   1beb8:	mov	r3, r5
   1bebc:	eor	r3, r3, #1
   1bec0:	ldr	r4, [sp, #32]
   1bec4:	mov	r1, r7
   1bec8:	str	r5, [sp, #32]
   1becc:	ldr	r7, [sp, #104]	; 0x68
   1bed0:	ldr	r6, [sp, #108]	; 0x6c
   1bed4:	ldr	r8, [sp, #112]	; 0x70
   1bed8:	ldr	r5, [sp, #116]	; 0x74
   1bedc:	uxtb	r3, r3
   1bee0:	b	1bc58 <__assert_fail@plt+0xa504>
   1bee4:	mov	sl, r9
   1bee8:	str	r3, [sp, #56]	; 0x38
   1beec:	mov	r9, fp
   1bef0:	ldr	r2, [sp, #64]	; 0x40
   1bef4:	b	1bc88 <__assert_fail@plt+0xa534>
   1bef8:	ldrdeq	r6, [r2], -r0
   1befc:	andeq	r6, r2, ip, asr #7
   1bf00:	ldrdeq	r6, [r2], -r4
   1bf04:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1bf08:	ldr	r2, [sp, #44]	; 0x2c
   1bf0c:	ldrb	r1, [r2, r3]
   1bf10:	sub	r2, r1, #33	; 0x21
   1bf14:	uxtb	r2, r2
   1bf18:	cmp	r2, #29
   1bf1c:	bhi	1bf9c <__assert_fail@plt+0xa848>
   1bf20:	ldr	r0, [pc, #-36]	; 1bf04 <__assert_fail@plt+0xa7b0>
   1bf24:	mov	ip, #1
   1bf28:	ands	r2, r0, ip, lsl r2
   1bf2c:	beq	1bfbc <__assert_fail@plt+0xa868>
   1bf30:	ldr	r2, [sp, #40]	; 0x28
   1bf34:	cmp	r2, #0
   1bf38:	bne	1c0b0 <__assert_fail@plt+0xa95c>
   1bf3c:	add	r2, r8, #1
   1bf40:	cmp	fp, r8
   1bf44:	strbhi	r4, [r9, r8]
   1bf48:	cmp	fp, r2
   1bf4c:	movhi	r0, #34	; 0x22
   1bf50:	strbhi	r0, [r9, r2]
   1bf54:	add	r2, r8, #2
   1bf58:	cmp	fp, r2
   1bf5c:	movhi	r0, #34	; 0x22
   1bf60:	strbhi	r0, [r9, r2]
   1bf64:	add	r2, r8, #3
   1bf68:	cmp	fp, r2
   1bf6c:	mov	sl, r3
   1bf70:	ldr	r3, [sp, #40]	; 0x28
   1bf74:	movhi	r0, #63	; 0x3f
   1bf78:	mov	r4, r1
   1bf7c:	strbhi	r0, [r9, r2]
   1bf80:	add	r8, r8, #4
   1bf84:	mov	r1, r3
   1bf88:	str	r3, [sp, #32]
   1bf8c:	b	1b10c <__assert_fail@plt+0x99b8>
   1bf90:	str	r3, [sp, #32]
   1bf94:	mov	r3, r7
   1bf98:	b	1bc58 <__assert_fail@plt+0xa504>
   1bf9c:	mov	r1, #0
   1bfa0:	str	r1, [sp, #32]
   1bfa4:	b	1b10c <__assert_fail@plt+0x99b8>
   1bfa8:	mov	sl, r9
   1bfac:	ldr	r3, [sp, #56]	; 0x38
   1bfb0:	mov	r9, fp
   1bfb4:	ldr	r2, [sp, #64]	; 0x40
   1bfb8:	b	1bc88 <__assert_fail@plt+0xa534>
   1bfbc:	str	r2, [sp, #32]
   1bfc0:	mov	r1, #0
   1bfc4:	b	1b10c <__assert_fail@plt+0x99b8>
   1bfc8:	ldr	r2, [sp, #76]	; 0x4c
   1bfcc:	mov	sl, r9
   1bfd0:	mov	r9, fp
   1bfd4:	mov	fp, r8
   1bfd8:	ldr	r1, [sp, #72]	; 0x48
   1bfdc:	cmp	r1, #0
   1bfe0:	moveq	r3, #0
   1bfe4:	andne	r3, r2, #1
   1bfe8:	cmp	r3, #0
   1bfec:	beq	1c018 <__assert_fail@plt+0xa8c4>
   1bff0:	ldrb	r3, [r1]
   1bff4:	cmp	r3, #0
   1bff8:	beq	1c018 <__assert_fail@plt+0xa8c4>
   1bffc:	mov	r2, r1
   1c000:	cmp	r9, fp
   1c004:	strbhi	r3, [sl, fp]
   1c008:	ldrb	r3, [r2, #1]!
   1c00c:	add	fp, fp, #1
   1c010:	cmp	r3, #0
   1c014:	bne	1c000 <__assert_fail@plt+0xa8ac>
   1c018:	cmp	r9, fp
   1c01c:	movhi	r3, #0
   1c020:	strbhi	r3, [sl, fp]
   1c024:	b	1bce0 <__assert_fail@plt+0xa58c>
   1c028:	ldr	r3, [sp, #192]	; 0xc0
   1c02c:	mov	ip, #5
   1c030:	str	r3, [sp, #16]
   1c034:	ldr	r3, [sp, #188]	; 0xbc
   1c038:	ldr	r2, [sp, #44]	; 0x2c
   1c03c:	str	r3, [sp, #12]
   1c040:	ldr	r3, [sp, #184]	; 0xb8
   1c044:	ldr	r1, [sp, #84]	; 0x54
   1c048:	str	r3, [sp, #8]
   1c04c:	ldr	r3, [sp, #180]	; 0xb4
   1c050:	mov	r0, r9
   1c054:	str	r3, [sp, #4]
   1c058:	str	ip, [sp]
   1c05c:	ldr	r3, [sp, #24]
   1c060:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c064:	mov	fp, r0
   1c068:	b	1bce0 <__assert_fail@plt+0xa58c>
   1c06c:	mov	sl, r9
   1c070:	mov	r9, fp
   1c074:	mov	fp, r8
   1c078:	b	1bfd8 <__assert_fail@plt+0xa884>
   1c07c:	ldr	r1, [sp, #176]	; 0xb0
   1c080:	bl	1aa18 <__assert_fail@plt+0x92c4>
   1c084:	str	r0, [sp, #192]	; 0xc0
   1c088:	b	1aff4 <__assert_fail@plt+0x98a0>
   1c08c:	ldr	r1, [sp, #176]	; 0xb0
   1c090:	bl	1aa18 <__assert_fail@plt+0x92c4>
   1c094:	str	r0, [sp, #188]	; 0xbc
   1c098:	b	1afd4 <__assert_fail@plt+0x9880>
   1c09c:	mov	sl, r9
   1c0a0:	mov	r2, r3
   1c0a4:	mov	r9, fp
   1c0a8:	mov	fp, r8
   1c0ac:	b	1bfd8 <__assert_fail@plt+0xa884>
   1c0b0:	mov	sl, r9
   1c0b4:	mov	r9, fp
   1c0b8:	b	1bc9c <__assert_fail@plt+0xa548>
   1c0bc:	push	{r4, r5, r6, lr}
   1c0c0:	mov	r5, r0
   1c0c4:	bl	115e0 <__errno_location@plt>
   1c0c8:	cmp	r5, #0
   1c0cc:	mov	r1, #48	; 0x30
   1c0d0:	mov	r4, r0
   1c0d4:	ldr	r0, [pc, #16]	; 1c0ec <__assert_fail@plt+0xa998>
   1c0d8:	ldr	r6, [r4]
   1c0dc:	movne	r0, r5
   1c0e0:	bl	201fc <__assert_fail@plt+0xeaa8>
   1c0e4:	str	r6, [r4]
   1c0e8:	pop	{r4, r5, r6, pc}
   1c0ec:	andeq	r7, r3, r4, lsl #4
   1c0f0:	ldr	r3, [pc, #12]	; 1c104 <__assert_fail@plt+0xa9b0>
   1c0f4:	cmp	r0, #0
   1c0f8:	moveq	r0, r3
   1c0fc:	ldr	r0, [r0]
   1c100:	bx	lr
   1c104:	andeq	r7, r3, r4, lsl #4
   1c108:	ldr	r3, [pc, #12]	; 1c11c <__assert_fail@plt+0xa9c8>
   1c10c:	cmp	r0, #0
   1c110:	moveq	r0, r3
   1c114:	str	r1, [r0]
   1c118:	bx	lr
   1c11c:	andeq	r7, r3, r4, lsl #4
   1c120:	ldr	r3, [pc, #52]	; 1c15c <__assert_fail@plt+0xaa08>
   1c124:	cmp	r0, #0
   1c128:	moveq	r0, r3
   1c12c:	add	r3, r0, #8
   1c130:	push	{lr}		; (str lr, [sp, #-4]!)
   1c134:	lsr	lr, r1, #5
   1c138:	and	r1, r1, #31
   1c13c:	ldr	ip, [r3, lr, lsl #2]
   1c140:	lsr	r0, ip, r1
   1c144:	eor	r2, r2, r0
   1c148:	and	r2, r2, #1
   1c14c:	and	r0, r0, #1
   1c150:	eor	r1, ip, r2, lsl r1
   1c154:	str	r1, [r3, lr, lsl #2]
   1c158:	pop	{pc}		; (ldr pc, [sp], #4)
   1c15c:	andeq	r7, r3, r4, lsl #4
   1c160:	ldr	r3, [pc, #16]	; 1c178 <__assert_fail@plt+0xaa24>
   1c164:	cmp	r0, #0
   1c168:	movne	r3, r0
   1c16c:	ldr	r0, [r3, #4]
   1c170:	str	r1, [r3, #4]
   1c174:	bx	lr
   1c178:	andeq	r7, r3, r4, lsl #4
   1c17c:	ldr	r3, [pc, #44]	; 1c1b0 <__assert_fail@plt+0xaa5c>
   1c180:	cmp	r0, #0
   1c184:	moveq	r0, r3
   1c188:	mov	ip, #10
   1c18c:	cmp	r2, #0
   1c190:	cmpne	r1, #0
   1c194:	str	ip, [r0]
   1c198:	beq	1c1a8 <__assert_fail@plt+0xaa54>
   1c19c:	str	r1, [r0, #40]	; 0x28
   1c1a0:	str	r2, [r0, #44]	; 0x2c
   1c1a4:	bx	lr
   1c1a8:	push	{r4, lr}
   1c1ac:	bl	11748 <abort@plt>
   1c1b0:	andeq	r7, r3, r4, lsl #4
   1c1b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c1b8:	sub	sp, sp, #24
   1c1bc:	ldr	ip, [pc, #108]	; 1c230 <__assert_fail@plt+0xaadc>
   1c1c0:	ldr	r4, [sp, #56]	; 0x38
   1c1c4:	mov	r9, r2
   1c1c8:	cmp	r4, #0
   1c1cc:	moveq	r4, ip
   1c1d0:	mov	sl, r3
   1c1d4:	mov	r7, r0
   1c1d8:	mov	r8, r1
   1c1dc:	bl	115e0 <__errno_location@plt>
   1c1e0:	ldr	r3, [r4, #44]	; 0x2c
   1c1e4:	mov	r1, r8
   1c1e8:	ldr	r6, [r0]
   1c1ec:	str	r3, [sp, #16]
   1c1f0:	ldr	r2, [r4, #40]	; 0x28
   1c1f4:	add	r3, r4, #8
   1c1f8:	str	r3, [sp, #8]
   1c1fc:	str	r2, [sp, #12]
   1c200:	ldr	r2, [r4, #4]
   1c204:	mov	r5, r0
   1c208:	str	r2, [sp, #4]
   1c20c:	ldr	ip, [r4]
   1c210:	mov	r3, sl
   1c214:	mov	r2, r9
   1c218:	mov	r0, r7
   1c21c:	str	ip, [sp]
   1c220:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c224:	str	r6, [r5]
   1c228:	add	sp, sp, #24
   1c22c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c230:	andeq	r7, r3, r4, lsl #4
   1c234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c238:	cmp	r2, #0
   1c23c:	sub	sp, sp, #36	; 0x24
   1c240:	ldr	r4, [pc, #164]	; 1c2ec <__assert_fail@plt+0xab98>
   1c244:	mov	r8, r1
   1c248:	movne	r4, r2
   1c24c:	mov	r7, r0
   1c250:	bl	115e0 <__errno_location@plt>
   1c254:	ldr	r3, [r4, #44]	; 0x2c
   1c258:	ldr	r5, [r4, #4]
   1c25c:	add	r9, r4, #8
   1c260:	orr	r5, r5, #1
   1c264:	mov	r1, #0
   1c268:	mov	r2, r7
   1c26c:	ldr	fp, [r0]
   1c270:	str	r3, [sp, #16]
   1c274:	ldr	r3, [r4, #40]	; 0x28
   1c278:	stmib	sp, {r5, r9}
   1c27c:	str	r3, [sp, #12]
   1c280:	ldr	r3, [r4]
   1c284:	mov	r6, r0
   1c288:	str	r3, [sp]
   1c28c:	mov	r0, r1
   1c290:	mov	r3, r8
   1c294:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c298:	add	r1, r0, #1
   1c29c:	mov	r0, r1
   1c2a0:	str	r1, [sp, #28]
   1c2a4:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1c2a8:	ldr	r3, [r4, #44]	; 0x2c
   1c2ac:	ldr	r1, [sp, #28]
   1c2b0:	str	r3, [sp, #16]
   1c2b4:	ldr	r3, [r4, #40]	; 0x28
   1c2b8:	str	r5, [sp, #4]
   1c2bc:	str	r3, [sp, #12]
   1c2c0:	str	r9, [sp, #8]
   1c2c4:	ldr	ip, [r4]
   1c2c8:	mov	r3, r8
   1c2cc:	mov	r2, r7
   1c2d0:	str	ip, [sp]
   1c2d4:	mov	sl, r0
   1c2d8:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c2dc:	mov	r0, sl
   1c2e0:	str	fp, [r6]
   1c2e4:	add	sp, sp, #36	; 0x24
   1c2e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2ec:	andeq	r7, r3, r4, lsl #4
   1c2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2f4:	cmp	r3, #0
   1c2f8:	sub	sp, sp, #44	; 0x2c
   1c2fc:	ldr	r4, [pc, #192]	; 1c3c4 <__assert_fail@plt+0xac70>
   1c300:	mov	r6, r2
   1c304:	movne	r4, r3
   1c308:	mov	r9, r1
   1c30c:	mov	r8, r0
   1c310:	bl	115e0 <__errno_location@plt>
   1c314:	ldr	r3, [r4, #44]	; 0x2c
   1c318:	ldr	r5, [r4, #4]
   1c31c:	add	sl, r4, #8
   1c320:	cmp	r6, #0
   1c324:	orreq	r5, r5, #1
   1c328:	mov	r1, #0
   1c32c:	ldr	r2, [r0]
   1c330:	str	r3, [sp, #16]
   1c334:	ldr	r3, [r4, #40]	; 0x28
   1c338:	stmib	sp, {r5, sl}
   1c33c:	str	r3, [sp, #12]
   1c340:	ldr	r3, [r4]
   1c344:	mov	r7, r0
   1c348:	str	r2, [sp, #28]
   1c34c:	str	r3, [sp]
   1c350:	mov	r2, r8
   1c354:	mov	r3, r9
   1c358:	mov	r0, r1
   1c35c:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c360:	add	r1, r0, #1
   1c364:	mov	fp, r0
   1c368:	mov	r0, r1
   1c36c:	str	r1, [sp, #36]	; 0x24
   1c370:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1c374:	ldr	r3, [r4, #44]	; 0x2c
   1c378:	mov	r2, r8
   1c37c:	str	r3, [sp, #16]
   1c380:	ldr	r3, [r4, #40]	; 0x28
   1c384:	str	r5, [sp, #4]
   1c388:	str	r3, [sp, #12]
   1c38c:	str	sl, [sp, #8]
   1c390:	ldr	ip, [r4]
   1c394:	ldr	r1, [sp, #36]	; 0x24
   1c398:	mov	r3, r9
   1c39c:	str	ip, [sp]
   1c3a0:	str	r0, [sp, #32]
   1c3a4:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c3a8:	ldr	r2, [sp, #28]
   1c3ac:	cmp	r6, #0
   1c3b0:	str	r2, [r7]
   1c3b4:	ldr	r0, [sp, #32]
   1c3b8:	strne	fp, [r6]
   1c3bc:	add	sp, sp, #44	; 0x2c
   1c3c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3c4:	andeq	r7, r3, r4, lsl #4
   1c3c8:	push	{r4, r5, r6, r7, r8, lr}
   1c3cc:	ldr	r6, [pc, #116]	; 1c448 <__assert_fail@plt+0xacf4>
   1c3d0:	ldr	r3, [r6, #4]
   1c3d4:	ldr	r7, [r6]
   1c3d8:	cmp	r3, #1
   1c3dc:	movgt	r5, r7
   1c3e0:	movgt	r4, #1
   1c3e4:	ble	1c404 <__assert_fail@plt+0xacb0>
   1c3e8:	ldr	r0, [r5, #12]
   1c3ec:	bl	19d04 <__assert_fail@plt+0x85b0>
   1c3f0:	ldr	r3, [r6, #4]
   1c3f4:	add	r4, r4, #1
   1c3f8:	cmp	r3, r4
   1c3fc:	add	r5, r5, #8
   1c400:	bgt	1c3e8 <__assert_fail@plt+0xac94>
   1c404:	ldr	r0, [r7, #4]
   1c408:	ldr	r4, [pc, #60]	; 1c44c <__assert_fail@plt+0xacf8>
   1c40c:	cmp	r0, r4
   1c410:	beq	1c424 <__assert_fail@plt+0xacd0>
   1c414:	bl	19d04 <__assert_fail@plt+0x85b0>
   1c418:	mov	r3, #256	; 0x100
   1c41c:	str	r4, [r6, #12]
   1c420:	str	r3, [r6, #8]
   1c424:	ldr	r4, [pc, #36]	; 1c450 <__assert_fail@plt+0xacfc>
   1c428:	cmp	r7, r4
   1c42c:	beq	1c43c <__assert_fail@plt+0xace8>
   1c430:	mov	r0, r7
   1c434:	bl	19d04 <__assert_fail@plt+0x85b0>
   1c438:	str	r4, [r6]
   1c43c:	mov	r3, #1
   1c440:	str	r3, [r6, #4]
   1c444:	pop	{r4, r5, r6, r7, r8, pc}
   1c448:	andeq	r7, r3, r4, lsl #3
   1c44c:	andeq	r7, r3, r4, lsr r2
   1c450:	andeq	r7, r3, ip, lsl #3
   1c454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c458:	sub	sp, sp, #44	; 0x2c
   1c45c:	mov	r5, r0
   1c460:	mov	sl, r1
   1c464:	bl	115e0 <__errno_location@plt>
   1c468:	ldr	r4, [pc, #400]	; 1c600 <__assert_fail@plt+0xaeac>
   1c46c:	cmn	r5, #-2147483647	; 0x80000001
   1c470:	ldr	r6, [r4]
   1c474:	mov	r8, r0
   1c478:	movne	r0, #0
   1c47c:	moveq	r0, #1
   1c480:	ldr	r3, [r8]
   1c484:	orrs	r0, r0, r5, lsr #31
   1c488:	str	r3, [sp, #24]
   1c48c:	bne	1c5fc <__assert_fail@plt+0xaea8>
   1c490:	ldr	r2, [r4, #4]
   1c494:	cmp	r5, r2
   1c498:	blt	1c4f8 <__assert_fail@plt+0xada4>
   1c49c:	add	r7, r4, #8
   1c4a0:	cmp	r6, r7
   1c4a4:	str	r2, [sp, #36]	; 0x24
   1c4a8:	beq	1c5cc <__assert_fail@plt+0xae78>
   1c4ac:	mov	r3, #8
   1c4b0:	sub	r2, r5, r2
   1c4b4:	mov	r0, r6
   1c4b8:	str	r3, [sp]
   1c4bc:	add	r2, r2, #1
   1c4c0:	mvn	r3, #-2147483648	; 0x80000000
   1c4c4:	add	r1, sp, #36	; 0x24
   1c4c8:	bl	1fed4 <__assert_fail@plt+0xe780>
   1c4cc:	mov	r6, r0
   1c4d0:	str	r0, [r4]
   1c4d4:	ldr	r0, [r4, #4]
   1c4d8:	ldr	r2, [sp, #36]	; 0x24
   1c4dc:	mov	r1, #0
   1c4e0:	sub	r2, r2, r0
   1c4e4:	add	r0, r6, r0, lsl #3
   1c4e8:	lsl	r2, r2, #3
   1c4ec:	bl	11610 <memset@plt>
   1c4f0:	ldr	r3, [sp, #36]	; 0x24
   1c4f4:	str	r3, [r4, #4]
   1c4f8:	ldr	r4, [pc, #260]	; 1c604 <__assert_fail@plt+0xaeb0>
   1c4fc:	add	fp, r6, r5, lsl #3
   1c500:	ldr	r9, [r6, r5, lsl #3]
   1c504:	ldr	r0, [r4, #4]
   1c508:	ldr	r3, [r4]
   1c50c:	ldr	r7, [fp, #4]
   1c510:	ldr	r1, [r4, #44]	; 0x2c
   1c514:	ldr	r2, [r4, #40]	; 0x28
   1c518:	orr	r0, r0, #1
   1c51c:	str	r3, [sp]
   1c520:	add	r3, r4, #8
   1c524:	str	r0, [sp, #28]
   1c528:	str	r0, [sp, #4]
   1c52c:	str	r1, [sp, #16]
   1c530:	str	r2, [sp, #12]
   1c534:	str	r3, [sp, #8]
   1c538:	mov	r0, r7
   1c53c:	mov	r1, r9
   1c540:	mvn	r3, #0
   1c544:	mov	r2, sl
   1c548:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c54c:	cmp	r9, r0
   1c550:	bhi	1c5b8 <__assert_fail@plt+0xae64>
   1c554:	add	r3, r4, #48	; 0x30
   1c558:	add	r9, r0, #1
   1c55c:	cmp	r7, r3
   1c560:	str	r9, [r6, r5, lsl #3]
   1c564:	beq	1c570 <__assert_fail@plt+0xae1c>
   1c568:	mov	r0, r7
   1c56c:	bl	19d04 <__assert_fail@plt+0x85b0>
   1c570:	mov	r0, r9
   1c574:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1c578:	ldr	ip, [r4, #44]	; 0x2c
   1c57c:	ldr	r3, [r4]
   1c580:	ldr	lr, [r4, #40]	; 0x28
   1c584:	ldr	r4, [pc, #124]	; 1c608 <__assert_fail@plt+0xaeb4>
   1c588:	mov	r2, sl
   1c58c:	mov	r1, r9
   1c590:	str	r0, [fp, #4]
   1c594:	str	r4, [sp, #8]
   1c598:	ldr	r4, [sp, #28]
   1c59c:	str	r3, [sp]
   1c5a0:	str	r4, [sp, #4]
   1c5a4:	str	ip, [sp, #16]
   1c5a8:	str	lr, [sp, #12]
   1c5ac:	mvn	r3, #0
   1c5b0:	mov	r7, r0
   1c5b4:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c5b8:	ldr	r3, [sp, #24]
   1c5bc:	mov	r0, r7
   1c5c0:	str	r3, [r8]
   1c5c4:	add	sp, sp, #44	; 0x2c
   1c5c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5cc:	mov	r3, #8
   1c5d0:	sub	r2, r5, r2
   1c5d4:	str	r3, [sp]
   1c5d8:	add	r1, sp, #36	; 0x24
   1c5dc:	add	r2, r2, #1
   1c5e0:	mvn	r3, #-2147483648	; 0x80000000
   1c5e4:	bl	1fed4 <__assert_fail@plt+0xe780>
   1c5e8:	mov	r6, r0
   1c5ec:	ldm	r7, {r0, r1}
   1c5f0:	str	r6, [r4]
   1c5f4:	stm	r6, {r0, r1}
   1c5f8:	b	1c4d4 <__assert_fail@plt+0xad80>
   1c5fc:	bl	11748 <abort@plt>
   1c600:	andeq	r7, r3, r4, lsl #3
   1c604:	andeq	r7, r3, r4, lsl #4
   1c608:	andeq	r7, r3, ip, lsl #4
   1c60c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c610:	sub	sp, sp, #52	; 0x34
   1c614:	mov	r5, r0
   1c618:	mov	sl, r1
   1c61c:	mov	fp, r2
   1c620:	bl	115e0 <__errno_location@plt>
   1c624:	ldr	r4, [pc, #408]	; 1c7c4 <__assert_fail@plt+0xb070>
   1c628:	cmn	r5, #-2147483647	; 0x80000001
   1c62c:	ldr	r6, [r4]
   1c630:	mov	r8, r0
   1c634:	movne	r0, #0
   1c638:	moveq	r0, #1
   1c63c:	ldr	r3, [r8]
   1c640:	orrs	r0, r0, r5, lsr #31
   1c644:	str	r3, [sp, #28]
   1c648:	bne	1c7c0 <__assert_fail@plt+0xb06c>
   1c64c:	ldr	r2, [r4, #4]
   1c650:	cmp	r5, r2
   1c654:	blt	1c6b4 <__assert_fail@plt+0xaf60>
   1c658:	add	r7, r4, #8
   1c65c:	cmp	r6, r7
   1c660:	str	r2, [sp, #44]	; 0x2c
   1c664:	beq	1c790 <__assert_fail@plt+0xb03c>
   1c668:	mov	r3, #8
   1c66c:	sub	r2, r5, r2
   1c670:	mov	r0, r6
   1c674:	str	r3, [sp]
   1c678:	add	r2, r2, #1
   1c67c:	mvn	r3, #-2147483648	; 0x80000000
   1c680:	add	r1, sp, #44	; 0x2c
   1c684:	bl	1fed4 <__assert_fail@plt+0xe780>
   1c688:	mov	r6, r0
   1c68c:	str	r0, [r4]
   1c690:	ldr	r0, [r4, #4]
   1c694:	ldr	r2, [sp, #44]	; 0x2c
   1c698:	mov	r1, #0
   1c69c:	sub	r2, r2, r0
   1c6a0:	add	r0, r6, r0, lsl #3
   1c6a4:	lsl	r2, r2, #3
   1c6a8:	bl	11610 <memset@plt>
   1c6ac:	ldr	r3, [sp, #44]	; 0x2c
   1c6b0:	str	r3, [r4, #4]
   1c6b4:	ldr	r4, [pc, #268]	; 1c7c8 <__assert_fail@plt+0xb074>
   1c6b8:	add	r3, r6, r5, lsl #3
   1c6bc:	str	r3, [sp, #32]
   1c6c0:	ldr	r7, [r3, #4]
   1c6c4:	ldr	r0, [r4, #4]
   1c6c8:	ldr	r3, [r4]
   1c6cc:	ldr	r9, [r6, r5, lsl #3]
   1c6d0:	ldr	r1, [r4, #44]	; 0x2c
   1c6d4:	ldr	r2, [r4, #40]	; 0x28
   1c6d8:	orr	r0, r0, #1
   1c6dc:	str	r3, [sp]
   1c6e0:	add	r3, r4, #8
   1c6e4:	str	r0, [sp, #36]	; 0x24
   1c6e8:	str	r0, [sp, #4]
   1c6ec:	str	r1, [sp, #16]
   1c6f0:	str	r2, [sp, #12]
   1c6f4:	str	r3, [sp, #8]
   1c6f8:	mov	r0, r7
   1c6fc:	mov	r1, r9
   1c700:	mov	r3, fp
   1c704:	mov	r2, sl
   1c708:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c70c:	cmp	r9, r0
   1c710:	bhi	1c77c <__assert_fail@plt+0xb028>
   1c714:	add	r3, r4, #48	; 0x30
   1c718:	add	r9, r0, #1
   1c71c:	cmp	r7, r3
   1c720:	str	r9, [r6, r5, lsl #3]
   1c724:	beq	1c730 <__assert_fail@plt+0xafdc>
   1c728:	mov	r0, r7
   1c72c:	bl	19d04 <__assert_fail@plt+0x85b0>
   1c730:	mov	r0, r9
   1c734:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1c738:	ldr	ip, [sp, #32]
   1c73c:	ldr	lr, [r4, #44]	; 0x2c
   1c740:	ldr	r5, [r4, #40]	; 0x28
   1c744:	mov	r3, fp
   1c748:	mov	r2, sl
   1c74c:	mov	r1, r9
   1c750:	str	r0, [ip, #4]
   1c754:	ldr	ip, [r4]
   1c758:	ldr	r4, [pc, #108]	; 1c7cc <__assert_fail@plt+0xb078>
   1c75c:	str	lr, [sp, #16]
   1c760:	str	r4, [sp, #8]
   1c764:	ldr	r4, [sp, #36]	; 0x24
   1c768:	str	r5, [sp, #12]
   1c76c:	str	r4, [sp, #4]
   1c770:	str	ip, [sp]
   1c774:	mov	r7, r0
   1c778:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c77c:	ldr	r3, [sp, #28]
   1c780:	mov	r0, r7
   1c784:	str	r3, [r8]
   1c788:	add	sp, sp, #52	; 0x34
   1c78c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c790:	mov	r3, #8
   1c794:	sub	r2, r5, r2
   1c798:	str	r3, [sp]
   1c79c:	add	r1, sp, #44	; 0x2c
   1c7a0:	add	r2, r2, #1
   1c7a4:	mvn	r3, #-2147483648	; 0x80000000
   1c7a8:	bl	1fed4 <__assert_fail@plt+0xe780>
   1c7ac:	mov	r6, r0
   1c7b0:	ldm	r7, {r0, r1}
   1c7b4:	str	r6, [r4]
   1c7b8:	stm	r6, {r0, r1}
   1c7bc:	b	1c690 <__assert_fail@plt+0xaf3c>
   1c7c0:	bl	11748 <abort@plt>
   1c7c4:	andeq	r7, r3, r4, lsl #3
   1c7c8:	andeq	r7, r3, r4, lsl #4
   1c7cc:	andeq	r7, r3, ip, lsl #4
   1c7d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7d4:	sub	sp, sp, #44	; 0x2c
   1c7d8:	mov	sl, r0
   1c7dc:	bl	115e0 <__errno_location@plt>
   1c7e0:	ldr	r4, [pc, #352]	; 1c948 <__assert_fail@plt+0xb1f4>
   1c7e4:	ldr	r2, [r4, #4]
   1c7e8:	ldr	r5, [r4]
   1c7ec:	cmp	r2, #0
   1c7f0:	ldr	r3, [r0]
   1c7f4:	mov	r8, r0
   1c7f8:	str	r3, [sp, #28]
   1c7fc:	bgt	1c858 <__assert_fail@plt+0xb104>
   1c800:	add	r6, r4, #8
   1c804:	cmp	r5, r6
   1c808:	str	r2, [sp, #36]	; 0x24
   1c80c:	beq	1c918 <__assert_fail@plt+0xb1c4>
   1c810:	mov	r3, #8
   1c814:	mov	r0, r5
   1c818:	str	r3, [sp]
   1c81c:	rsb	r2, r2, #1
   1c820:	mvn	r3, #-2147483648	; 0x80000000
   1c824:	add	r1, sp, #36	; 0x24
   1c828:	bl	1fed4 <__assert_fail@plt+0xe780>
   1c82c:	mov	r5, r0
   1c830:	str	r0, [r4]
   1c834:	ldr	r0, [r4, #4]
   1c838:	ldr	r2, [sp, #36]	; 0x24
   1c83c:	mov	r1, #0
   1c840:	sub	r2, r2, r0
   1c844:	add	r0, r5, r0, lsl #3
   1c848:	lsl	r2, r2, #3
   1c84c:	bl	11610 <memset@plt>
   1c850:	ldr	r3, [sp, #36]	; 0x24
   1c854:	str	r3, [r4, #4]
   1c858:	ldr	r4, [pc, #236]	; 1c94c <__assert_fail@plt+0xb1f8>
   1c85c:	ldr	r9, [r5]
   1c860:	ldr	r6, [r5, #4]
   1c864:	ldr	r7, [r4, #4]
   1c868:	ldr	r1, [r4, #44]	; 0x2c
   1c86c:	ldr	r2, [r4, #40]	; 0x28
   1c870:	ldr	r3, [r4]
   1c874:	orr	r7, r7, #1
   1c878:	add	fp, r4, #8
   1c87c:	str	r1, [sp, #16]
   1c880:	str	r2, [sp, #12]
   1c884:	str	r3, [sp]
   1c888:	str	r7, [sp, #4]
   1c88c:	str	fp, [sp, #8]
   1c890:	mov	r1, r9
   1c894:	mov	r0, r6
   1c898:	mvn	r3, #0
   1c89c:	mov	r2, sl
   1c8a0:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c8a4:	cmp	r9, r0
   1c8a8:	bhi	1c904 <__assert_fail@plt+0xb1b0>
   1c8ac:	add	r3, r4, #48	; 0x30
   1c8b0:	add	r9, r0, #1
   1c8b4:	cmp	r6, r3
   1c8b8:	str	r9, [r5]
   1c8bc:	beq	1c8c8 <__assert_fail@plt+0xb174>
   1c8c0:	mov	r0, r6
   1c8c4:	bl	19d04 <__assert_fail@plt+0x85b0>
   1c8c8:	mov	r0, r9
   1c8cc:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1c8d0:	ldr	ip, [r4, #44]	; 0x2c
   1c8d4:	ldr	r3, [r4]
   1c8d8:	ldr	lr, [r4, #40]	; 0x28
   1c8dc:	mov	r2, sl
   1c8e0:	mov	r1, r9
   1c8e4:	str	r0, [r5, #4]
   1c8e8:	str	r3, [sp]
   1c8ec:	stmib	sp, {r7, fp}
   1c8f0:	str	ip, [sp, #16]
   1c8f4:	str	lr, [sp, #12]
   1c8f8:	mvn	r3, #0
   1c8fc:	mov	r6, r0
   1c900:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1c904:	ldr	r3, [sp, #28]
   1c908:	mov	r0, r6
   1c90c:	str	r3, [r8]
   1c910:	add	sp, sp, #44	; 0x2c
   1c914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c918:	mov	r3, #8
   1c91c:	str	r3, [sp]
   1c920:	add	r1, sp, #36	; 0x24
   1c924:	rsb	r2, r2, #1
   1c928:	mvn	r3, #-2147483648	; 0x80000000
   1c92c:	mov	r0, #0
   1c930:	bl	1fed4 <__assert_fail@plt+0xe780>
   1c934:	mov	r5, r0
   1c938:	ldm	r6, {r0, r1}
   1c93c:	str	r5, [r4]
   1c940:	stm	r5, {r0, r1}
   1c944:	b	1c834 <__assert_fail@plt+0xb0e0>
   1c948:	andeq	r7, r3, r4, lsl #3
   1c94c:	andeq	r7, r3, r4, lsl #4
   1c950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c954:	sub	sp, sp, #44	; 0x2c
   1c958:	mov	r9, r0
   1c95c:	mov	sl, r1
   1c960:	bl	115e0 <__errno_location@plt>
   1c964:	ldr	r4, [pc, #364]	; 1cad8 <__assert_fail@plt+0xb384>
   1c968:	ldr	r2, [r4, #4]
   1c96c:	ldr	r5, [r4]
   1c970:	cmp	r2, #0
   1c974:	ldr	r3, [r0]
   1c978:	mov	r7, r0
   1c97c:	str	r3, [sp, #24]
   1c980:	bgt	1c9dc <__assert_fail@plt+0xb288>
   1c984:	add	r6, r4, #8
   1c988:	cmp	r5, r6
   1c98c:	str	r2, [sp, #36]	; 0x24
   1c990:	beq	1caa8 <__assert_fail@plt+0xb354>
   1c994:	mov	r3, #8
   1c998:	mov	r0, r5
   1c99c:	str	r3, [sp]
   1c9a0:	rsb	r2, r2, #1
   1c9a4:	mvn	r3, #-2147483648	; 0x80000000
   1c9a8:	add	r1, sp, #36	; 0x24
   1c9ac:	bl	1fed4 <__assert_fail@plt+0xe780>
   1c9b0:	mov	r5, r0
   1c9b4:	str	r0, [r4]
   1c9b8:	ldr	r0, [r4, #4]
   1c9bc:	ldr	r2, [sp, #36]	; 0x24
   1c9c0:	mov	r1, #0
   1c9c4:	sub	r2, r2, r0
   1c9c8:	add	r0, r5, r0, lsl #3
   1c9cc:	lsl	r2, r2, #3
   1c9d0:	bl	11610 <memset@plt>
   1c9d4:	ldr	r3, [sp, #36]	; 0x24
   1c9d8:	str	r3, [r4, #4]
   1c9dc:	ldr	r4, [pc, #248]	; 1cadc <__assert_fail@plt+0xb388>
   1c9e0:	ldr	r8, [r5]
   1c9e4:	ldr	r6, [r5, #4]
   1c9e8:	ldr	r0, [r4, #4]
   1c9ec:	ldr	r1, [r4, #44]	; 0x2c
   1c9f0:	ldr	r2, [r4, #40]	; 0x28
   1c9f4:	ldr	r3, [r4]
   1c9f8:	orr	r0, r0, #1
   1c9fc:	add	fp, r4, #8
   1ca00:	str	r0, [sp, #28]
   1ca04:	str	r0, [sp, #4]
   1ca08:	str	r1, [sp, #16]
   1ca0c:	str	r2, [sp, #12]
   1ca10:	str	r3, [sp]
   1ca14:	str	fp, [sp, #8]
   1ca18:	mov	r1, r8
   1ca1c:	mov	r0, r6
   1ca20:	mov	r3, sl
   1ca24:	mov	r2, r9
   1ca28:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1ca2c:	cmp	r8, r0
   1ca30:	bhi	1ca94 <__assert_fail@plt+0xb340>
   1ca34:	add	r3, r4, #48	; 0x30
   1ca38:	add	r8, r0, #1
   1ca3c:	cmp	r6, r3
   1ca40:	str	r8, [r5]
   1ca44:	beq	1ca50 <__assert_fail@plt+0xb2fc>
   1ca48:	mov	r0, r6
   1ca4c:	bl	19d04 <__assert_fail@plt+0x85b0>
   1ca50:	mov	r0, r8
   1ca54:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1ca58:	ldr	lr, [r4, #44]	; 0x2c
   1ca5c:	ldr	ip, [r4]
   1ca60:	mov	r3, sl
   1ca64:	mov	r2, r9
   1ca68:	mov	r1, r8
   1ca6c:	str	r0, [r5, #4]
   1ca70:	ldr	r5, [r4, #40]	; 0x28
   1ca74:	ldr	r4, [sp, #28]
   1ca78:	str	fp, [sp, #8]
   1ca7c:	str	r4, [sp, #4]
   1ca80:	str	lr, [sp, #16]
   1ca84:	str	r5, [sp, #12]
   1ca88:	str	ip, [sp]
   1ca8c:	mov	r6, r0
   1ca90:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1ca94:	ldr	r3, [sp, #24]
   1ca98:	mov	r0, r6
   1ca9c:	str	r3, [r7]
   1caa0:	add	sp, sp, #44	; 0x2c
   1caa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1caa8:	mov	r3, #8
   1caac:	str	r3, [sp]
   1cab0:	add	r1, sp, #36	; 0x24
   1cab4:	rsb	r2, r2, #1
   1cab8:	mvn	r3, #-2147483648	; 0x80000000
   1cabc:	mov	r0, #0
   1cac0:	bl	1fed4 <__assert_fail@plt+0xe780>
   1cac4:	mov	r5, r0
   1cac8:	ldm	r6, {r0, r1}
   1cacc:	str	r5, [r4]
   1cad0:	stm	r5, {r0, r1}
   1cad4:	b	1c9b8 <__assert_fail@plt+0xb264>
   1cad8:	andeq	r7, r3, r4, lsl #3
   1cadc:	andeq	r7, r3, r4, lsl #4
   1cae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cae4:	sub	sp, sp, #132	; 0x84
   1cae8:	mov	r5, r1
   1caec:	mov	r4, r0
   1caf0:	mov	r9, r2
   1caf4:	add	r0, sp, #80	; 0x50
   1caf8:	mov	r2, #48	; 0x30
   1cafc:	mov	r1, #0
   1cb00:	bl	11610 <memset@plt>
   1cb04:	cmp	r5, #10
   1cb08:	beq	1ccc0 <__assert_fail@plt+0xb56c>
   1cb0c:	add	lr, sp, #80	; 0x50
   1cb10:	str	r5, [sp, #80]	; 0x50
   1cb14:	ldm	lr!, {r0, r1, r2, r3}
   1cb18:	add	ip, sp, #32
   1cb1c:	ldr	r6, [pc, #416]	; 1ccc4 <__assert_fail@plt+0xb570>
   1cb20:	stmia	ip!, {r0, r1, r2, r3}
   1cb24:	ldm	lr!, {r0, r1, r2, r3}
   1cb28:	stmia	ip!, {r0, r1, r2, r3}
   1cb2c:	ldm	lr, {r0, r1, r2, r3}
   1cb30:	stm	ip, {r0, r1, r2, r3}
   1cb34:	bl	115e0 <__errno_location@plt>
   1cb38:	cmn	r4, #-2147483647	; 0x80000001
   1cb3c:	ldr	r5, [r6]
   1cb40:	mov	r7, r0
   1cb44:	movne	r0, #0
   1cb48:	moveq	r0, #1
   1cb4c:	ldr	r3, [r7]
   1cb50:	orrs	r0, r0, r4, lsr #31
   1cb54:	str	r3, [sp, #24]
   1cb58:	bne	1ccc0 <__assert_fail@plt+0xb56c>
   1cb5c:	ldr	r2, [r6, #4]
   1cb60:	cmp	r4, r2
   1cb64:	blt	1cbc4 <__assert_fail@plt+0xb470>
   1cb68:	add	r8, r6, #8
   1cb6c:	cmp	r5, r8
   1cb70:	str	r2, [sp, #80]	; 0x50
   1cb74:	beq	1cc90 <__assert_fail@plt+0xb53c>
   1cb78:	mov	r3, #8
   1cb7c:	sub	r2, r4, r2
   1cb80:	mov	r0, r5
   1cb84:	str	r3, [sp]
   1cb88:	add	r2, r2, #1
   1cb8c:	add	r1, sp, #80	; 0x50
   1cb90:	mvn	r3, #-2147483648	; 0x80000000
   1cb94:	bl	1fed4 <__assert_fail@plt+0xe780>
   1cb98:	mov	r5, r0
   1cb9c:	str	r0, [r6]
   1cba0:	ldr	r0, [r6, #4]
   1cba4:	ldr	r2, [sp, #80]	; 0x50
   1cba8:	mov	r1, #0
   1cbac:	sub	r2, r2, r0
   1cbb0:	add	r0, r5, r0, lsl #3
   1cbb4:	lsl	r2, r2, #3
   1cbb8:	bl	11610 <memset@plt>
   1cbbc:	ldr	r3, [sp, #80]	; 0x50
   1cbc0:	str	r3, [r6, #4]
   1cbc4:	add	fp, r5, r4, lsl #3
   1cbc8:	ldr	r1, [sp, #36]	; 0x24
   1cbcc:	ldr	r8, [r5, r4, lsl #3]
   1cbd0:	ldr	r6, [fp, #4]
   1cbd4:	ldr	r2, [sp, #72]	; 0x48
   1cbd8:	ldr	r3, [sp, #32]
   1cbdc:	ldr	ip, [sp, #76]	; 0x4c
   1cbe0:	orr	r1, r1, #1
   1cbe4:	add	sl, sp, #40	; 0x28
   1cbe8:	str	r1, [sp, #28]
   1cbec:	str	r1, [sp, #4]
   1cbf0:	str	r2, [sp, #12]
   1cbf4:	str	r3, [sp]
   1cbf8:	mov	r0, r6
   1cbfc:	mov	r1, r8
   1cc00:	str	ip, [sp, #16]
   1cc04:	str	sl, [sp, #8]
   1cc08:	mvn	r3, #0
   1cc0c:	mov	r2, r9
   1cc10:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1cc14:	cmp	r8, r0
   1cc18:	bhi	1cc7c <__assert_fail@plt+0xb528>
   1cc1c:	ldr	r3, [pc, #164]	; 1ccc8 <__assert_fail@plt+0xb574>
   1cc20:	add	r8, r0, #1
   1cc24:	cmp	r6, r3
   1cc28:	str	r8, [r5, r4, lsl #3]
   1cc2c:	beq	1cc38 <__assert_fail@plt+0xb4e4>
   1cc30:	mov	r0, r6
   1cc34:	bl	19d04 <__assert_fail@plt+0x85b0>
   1cc38:	mov	r0, r8
   1cc3c:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1cc40:	ldr	lr, [sp, #76]	; 0x4c
   1cc44:	ldr	r3, [sp, #32]
   1cc48:	ldr	ip, [sp, #72]	; 0x48
   1cc4c:	ldr	r4, [sp, #28]
   1cc50:	mov	r2, r9
   1cc54:	mov	r1, r8
   1cc58:	str	r0, [fp, #4]
   1cc5c:	str	r3, [sp]
   1cc60:	str	sl, [sp, #8]
   1cc64:	str	r4, [sp, #4]
   1cc68:	str	lr, [sp, #16]
   1cc6c:	str	ip, [sp, #12]
   1cc70:	mvn	r3, #0
   1cc74:	mov	r6, r0
   1cc78:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1cc7c:	ldr	r3, [sp, #24]
   1cc80:	mov	r0, r6
   1cc84:	str	r3, [r7]
   1cc88:	add	sp, sp, #132	; 0x84
   1cc8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc90:	mov	r3, #8
   1cc94:	sub	r2, r4, r2
   1cc98:	add	r1, sp, #80	; 0x50
   1cc9c:	str	r3, [sp]
   1cca0:	add	r2, r2, #1
   1cca4:	mvn	r3, #-2147483648	; 0x80000000
   1cca8:	bl	1fed4 <__assert_fail@plt+0xe780>
   1ccac:	mov	r5, r0
   1ccb0:	ldm	r8, {r0, r1}
   1ccb4:	str	r5, [r6]
   1ccb8:	stm	r5, {r0, r1}
   1ccbc:	b	1cba0 <__assert_fail@plt+0xb44c>
   1ccc0:	bl	11748 <abort@plt>
   1ccc4:	andeq	r7, r3, r4, lsl #3
   1ccc8:	andeq	r7, r3, r4, lsr r2
   1cccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccd0:	sub	sp, sp, #132	; 0x84
   1ccd4:	mov	r5, r1
   1ccd8:	mov	r4, r0
   1ccdc:	mov	r9, r2
   1cce0:	add	r0, sp, #80	; 0x50
   1cce4:	mov	r2, #48	; 0x30
   1cce8:	mov	r1, #0
   1ccec:	mov	sl, r3
   1ccf0:	bl	11610 <memset@plt>
   1ccf4:	cmp	r5, #10
   1ccf8:	beq	1ceb4 <__assert_fail@plt+0xb760>
   1ccfc:	add	lr, sp, #80	; 0x50
   1cd00:	str	r5, [sp, #80]	; 0x50
   1cd04:	ldm	lr!, {r0, r1, r2, r3}
   1cd08:	add	ip, sp, #32
   1cd0c:	ldr	r6, [pc, #420]	; 1ceb8 <__assert_fail@plt+0xb764>
   1cd10:	stmia	ip!, {r0, r1, r2, r3}
   1cd14:	ldm	lr!, {r0, r1, r2, r3}
   1cd18:	stmia	ip!, {r0, r1, r2, r3}
   1cd1c:	ldm	lr, {r0, r1, r2, r3}
   1cd20:	stm	ip, {r0, r1, r2, r3}
   1cd24:	bl	115e0 <__errno_location@plt>
   1cd28:	cmn	r4, #-2147483647	; 0x80000001
   1cd2c:	ldr	r5, [r6]
   1cd30:	mov	r7, r0
   1cd34:	movne	r0, #0
   1cd38:	moveq	r0, #1
   1cd3c:	ldr	r3, [r7]
   1cd40:	orrs	r0, r0, r4, lsr #31
   1cd44:	str	r3, [sp, #24]
   1cd48:	bne	1ceb4 <__assert_fail@plt+0xb760>
   1cd4c:	ldr	r2, [r6, #4]
   1cd50:	cmp	r4, r2
   1cd54:	blt	1cdb4 <__assert_fail@plt+0xb660>
   1cd58:	add	r8, r6, #8
   1cd5c:	cmp	r5, r8
   1cd60:	str	r2, [sp, #80]	; 0x50
   1cd64:	beq	1ce84 <__assert_fail@plt+0xb730>
   1cd68:	mov	r3, #8
   1cd6c:	sub	r2, r4, r2
   1cd70:	mov	r0, r5
   1cd74:	str	r3, [sp]
   1cd78:	add	r2, r2, #1
   1cd7c:	add	r1, sp, #80	; 0x50
   1cd80:	mvn	r3, #-2147483648	; 0x80000000
   1cd84:	bl	1fed4 <__assert_fail@plt+0xe780>
   1cd88:	mov	r5, r0
   1cd8c:	str	r0, [r6]
   1cd90:	ldr	r0, [r6, #4]
   1cd94:	ldr	r2, [sp, #80]	; 0x50
   1cd98:	mov	r1, #0
   1cd9c:	sub	r2, r2, r0
   1cda0:	add	r0, r5, r0, lsl #3
   1cda4:	lsl	r2, r2, #3
   1cda8:	bl	11610 <memset@plt>
   1cdac:	ldr	r3, [sp, #80]	; 0x50
   1cdb0:	str	r3, [r6, #4]
   1cdb4:	add	fp, r5, r4, lsl #3
   1cdb8:	ldr	r3, [sp, #32]
   1cdbc:	ldr	r1, [sp, #36]	; 0x24
   1cdc0:	ldr	r8, [r5, r4, lsl #3]
   1cdc4:	ldr	r6, [fp, #4]
   1cdc8:	ldr	r2, [sp, #72]	; 0x48
   1cdcc:	ldr	ip, [sp, #76]	; 0x4c
   1cdd0:	orr	r1, r1, #1
   1cdd4:	str	r3, [sp]
   1cdd8:	add	r3, sp, #40	; 0x28
   1cddc:	str	r1, [sp, #28]
   1cde0:	str	r1, [sp, #4]
   1cde4:	str	r2, [sp, #12]
   1cde8:	str	r3, [sp, #8]
   1cdec:	mov	r0, r6
   1cdf0:	mov	r1, r8
   1cdf4:	str	ip, [sp, #16]
   1cdf8:	mov	r3, sl
   1cdfc:	mov	r2, r9
   1ce00:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1ce04:	cmp	r8, r0
   1ce08:	bhi	1ce70 <__assert_fail@plt+0xb71c>
   1ce0c:	ldr	r3, [pc, #168]	; 1cebc <__assert_fail@plt+0xb768>
   1ce10:	add	r8, r0, #1
   1ce14:	cmp	r6, r3
   1ce18:	str	r8, [r5, r4, lsl #3]
   1ce1c:	beq	1ce28 <__assert_fail@plt+0xb6d4>
   1ce20:	mov	r0, r6
   1ce24:	bl	19d04 <__assert_fail@plt+0x85b0>
   1ce28:	mov	r0, r8
   1ce2c:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1ce30:	add	lr, sp, #40	; 0x28
   1ce34:	ldr	ip, [sp, #76]	; 0x4c
   1ce38:	ldr	r4, [sp, #72]	; 0x48
   1ce3c:	ldr	r5, [sp, #28]
   1ce40:	mov	r3, sl
   1ce44:	mov	r2, r9
   1ce48:	mov	r1, r8
   1ce4c:	str	r0, [fp, #4]
   1ce50:	str	lr, [sp, #8]
   1ce54:	ldr	lr, [sp, #32]
   1ce58:	str	r5, [sp, #4]
   1ce5c:	str	ip, [sp, #16]
   1ce60:	str	r4, [sp, #12]
   1ce64:	str	lr, [sp]
   1ce68:	mov	r6, r0
   1ce6c:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1ce70:	ldr	r3, [sp, #24]
   1ce74:	mov	r0, r6
   1ce78:	str	r3, [r7]
   1ce7c:	add	sp, sp, #132	; 0x84
   1ce80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce84:	mov	r3, #8
   1ce88:	sub	r2, r4, r2
   1ce8c:	add	r1, sp, #80	; 0x50
   1ce90:	str	r3, [sp]
   1ce94:	add	r2, r2, #1
   1ce98:	mvn	r3, #-2147483648	; 0x80000000
   1ce9c:	bl	1fed4 <__assert_fail@plt+0xe780>
   1cea0:	mov	r5, r0
   1cea4:	ldm	r8, {r0, r1}
   1cea8:	str	r5, [r6]
   1ceac:	stm	r5, {r0, r1}
   1ceb0:	b	1cd90 <__assert_fail@plt+0xb63c>
   1ceb4:	bl	11748 <abort@plt>
   1ceb8:	andeq	r7, r3, r4, lsl #3
   1cebc:	andeq	r7, r3, r4, lsr r2
   1cec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cec4:	sub	sp, sp, #124	; 0x7c
   1cec8:	mov	r4, r0
   1cecc:	mov	r9, r1
   1ced0:	add	r0, sp, #72	; 0x48
   1ced4:	mov	r2, #48	; 0x30
   1ced8:	mov	r1, #0
   1cedc:	bl	11610 <memset@plt>
   1cee0:	cmp	r4, #10
   1cee4:	beq	1d070 <__assert_fail@plt+0xb91c>
   1cee8:	add	lr, sp, #72	; 0x48
   1ceec:	str	r4, [sp, #72]	; 0x48
   1cef0:	ldm	lr!, {r0, r1, r2, r3}
   1cef4:	add	ip, sp, #24
   1cef8:	ldr	r5, [pc, #372]	; 1d074 <__assert_fail@plt+0xb920>
   1cefc:	stmia	ip!, {r0, r1, r2, r3}
   1cf00:	ldm	lr!, {r0, r1, r2, r3}
   1cf04:	stmia	ip!, {r0, r1, r2, r3}
   1cf08:	ldm	lr, {r0, r1, r2, r3}
   1cf0c:	stm	ip, {r0, r1, r2, r3}
   1cf10:	bl	115e0 <__errno_location@plt>
   1cf14:	ldr	r2, [r5, #4]
   1cf18:	ldr	r4, [r5]
   1cf1c:	cmp	r2, #0
   1cf20:	mov	r7, r0
   1cf24:	ldr	fp, [r0]
   1cf28:	bgt	1cf84 <__assert_fail@plt+0xb830>
   1cf2c:	add	r6, r5, #8
   1cf30:	cmp	r4, r6
   1cf34:	str	r2, [sp, #72]	; 0x48
   1cf38:	beq	1d040 <__assert_fail@plt+0xb8ec>
   1cf3c:	mov	r3, #8
   1cf40:	mov	r0, r4
   1cf44:	str	r3, [sp]
   1cf48:	rsb	r2, r2, #1
   1cf4c:	add	r1, sp, #72	; 0x48
   1cf50:	mvn	r3, #-2147483648	; 0x80000000
   1cf54:	bl	1fed4 <__assert_fail@plt+0xe780>
   1cf58:	mov	r4, r0
   1cf5c:	str	r0, [r5]
   1cf60:	ldr	r0, [r5, #4]
   1cf64:	ldr	r2, [sp, #72]	; 0x48
   1cf68:	mov	r1, #0
   1cf6c:	sub	r2, r2, r0
   1cf70:	add	r0, r4, r0, lsl #3
   1cf74:	lsl	r2, r2, #3
   1cf78:	bl	11610 <memset@plt>
   1cf7c:	ldr	r3, [sp, #72]	; 0x48
   1cf80:	str	r3, [r5, #4]
   1cf84:	ldr	r6, [sp, #28]
   1cf88:	ldr	r8, [r4]
   1cf8c:	ldr	r5, [r4, #4]
   1cf90:	ldr	r2, [sp, #64]	; 0x40
   1cf94:	ldr	r3, [sp, #24]
   1cf98:	ldr	ip, [sp, #68]	; 0x44
   1cf9c:	orr	r6, r6, #1
   1cfa0:	add	sl, sp, #32
   1cfa4:	str	r2, [sp, #12]
   1cfa8:	str	r3, [sp]
   1cfac:	str	r6, [sp, #4]
   1cfb0:	mov	r1, r8
   1cfb4:	mov	r0, r5
   1cfb8:	str	ip, [sp, #16]
   1cfbc:	str	sl, [sp, #8]
   1cfc0:	mvn	r3, #0
   1cfc4:	mov	r2, r9
   1cfc8:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1cfcc:	cmp	r8, r0
   1cfd0:	bhi	1d030 <__assert_fail@plt+0xb8dc>
   1cfd4:	ldr	r3, [pc, #156]	; 1d078 <__assert_fail@plt+0xb924>
   1cfd8:	add	r8, r0, #1
   1cfdc:	cmp	r5, r3
   1cfe0:	str	r8, [r4]
   1cfe4:	beq	1cff0 <__assert_fail@plt+0xb89c>
   1cfe8:	mov	r0, r5
   1cfec:	bl	19d04 <__assert_fail@plt+0x85b0>
   1cff0:	mov	r0, r8
   1cff4:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1cff8:	ldr	lr, [sp, #68]	; 0x44
   1cffc:	ldr	r3, [sp, #24]
   1d000:	ldr	ip, [sp, #64]	; 0x40
   1d004:	mov	r2, r9
   1d008:	mov	r1, r8
   1d00c:	str	r0, [r4, #4]
   1d010:	str	r3, [sp]
   1d014:	str	sl, [sp, #8]
   1d018:	str	r6, [sp, #4]
   1d01c:	str	lr, [sp, #16]
   1d020:	str	ip, [sp, #12]
   1d024:	mvn	r3, #0
   1d028:	mov	r5, r0
   1d02c:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d030:	mov	r0, r5
   1d034:	str	fp, [r7]
   1d038:	add	sp, sp, #124	; 0x7c
   1d03c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d040:	mov	r3, #8
   1d044:	add	r1, sp, #72	; 0x48
   1d048:	str	r3, [sp]
   1d04c:	rsb	r2, r2, #1
   1d050:	mvn	r3, #-2147483648	; 0x80000000
   1d054:	mov	r0, #0
   1d058:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d05c:	mov	r4, r0
   1d060:	ldm	r6, {r0, r1}
   1d064:	str	r4, [r5]
   1d068:	stm	r4, {r0, r1}
   1d06c:	b	1cf60 <__assert_fail@plt+0xb80c>
   1d070:	bl	11748 <abort@plt>
   1d074:	andeq	r7, r3, r4, lsl #3
   1d078:	andeq	r7, r3, r4, lsr r2
   1d07c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d080:	sub	sp, sp, #132	; 0x84
   1d084:	mov	r4, r0
   1d088:	mov	r9, r1
   1d08c:	mov	sl, r2
   1d090:	add	r0, sp, #80	; 0x50
   1d094:	mov	r2, #48	; 0x30
   1d098:	mov	r1, #0
   1d09c:	bl	11610 <memset@plt>
   1d0a0:	cmp	r4, #10
   1d0a4:	beq	1d238 <__assert_fail@plt+0xbae4>
   1d0a8:	add	lr, sp, #80	; 0x50
   1d0ac:	str	r4, [sp, #80]	; 0x50
   1d0b0:	ldm	lr!, {r0, r1, r2, r3}
   1d0b4:	add	ip, sp, #32
   1d0b8:	ldr	r5, [pc, #380]	; 1d23c <__assert_fail@plt+0xbae8>
   1d0bc:	stmia	ip!, {r0, r1, r2, r3}
   1d0c0:	ldm	lr!, {r0, r1, r2, r3}
   1d0c4:	stmia	ip!, {r0, r1, r2, r3}
   1d0c8:	ldm	lr, {r0, r1, r2, r3}
   1d0cc:	stm	ip, {r0, r1, r2, r3}
   1d0d0:	bl	115e0 <__errno_location@plt>
   1d0d4:	ldr	r2, [r5, #4]
   1d0d8:	ldr	r4, [r5]
   1d0dc:	cmp	r2, #0
   1d0e0:	ldr	r3, [r0]
   1d0e4:	mov	r7, r0
   1d0e8:	str	r3, [sp, #28]
   1d0ec:	bgt	1d148 <__assert_fail@plt+0xb9f4>
   1d0f0:	add	r6, r5, #8
   1d0f4:	cmp	r4, r6
   1d0f8:	str	r2, [sp, #80]	; 0x50
   1d0fc:	beq	1d208 <__assert_fail@plt+0xbab4>
   1d100:	mov	r3, #8
   1d104:	mov	r0, r4
   1d108:	str	r3, [sp]
   1d10c:	rsb	r2, r2, #1
   1d110:	add	r1, sp, #80	; 0x50
   1d114:	mvn	r3, #-2147483648	; 0x80000000
   1d118:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d11c:	mov	r4, r0
   1d120:	str	r0, [r5]
   1d124:	ldr	r0, [r5, #4]
   1d128:	ldr	r2, [sp, #80]	; 0x50
   1d12c:	mov	r1, #0
   1d130:	sub	r2, r2, r0
   1d134:	add	r0, r4, r0, lsl #3
   1d138:	lsl	r2, r2, #3
   1d13c:	bl	11610 <memset@plt>
   1d140:	ldr	r3, [sp, #80]	; 0x50
   1d144:	str	r3, [r5, #4]
   1d148:	ldr	r6, [sp, #36]	; 0x24
   1d14c:	ldr	r8, [r4]
   1d150:	ldr	r5, [r4, #4]
   1d154:	ldr	r2, [sp, #72]	; 0x48
   1d158:	ldr	r3, [sp, #32]
   1d15c:	ldr	ip, [sp, #76]	; 0x4c
   1d160:	orr	r6, r6, #1
   1d164:	add	fp, sp, #40	; 0x28
   1d168:	str	r2, [sp, #12]
   1d16c:	str	r3, [sp]
   1d170:	str	r6, [sp, #4]
   1d174:	mov	r1, r8
   1d178:	mov	r0, r5
   1d17c:	str	ip, [sp, #16]
   1d180:	str	fp, [sp, #8]
   1d184:	mov	r3, sl
   1d188:	mov	r2, r9
   1d18c:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d190:	cmp	r8, r0
   1d194:	bhi	1d1f4 <__assert_fail@plt+0xbaa0>
   1d198:	ldr	r3, [pc, #160]	; 1d240 <__assert_fail@plt+0xbaec>
   1d19c:	add	r8, r0, #1
   1d1a0:	cmp	r5, r3
   1d1a4:	str	r8, [r4]
   1d1a8:	beq	1d1b4 <__assert_fail@plt+0xba60>
   1d1ac:	mov	r0, r5
   1d1b0:	bl	19d04 <__assert_fail@plt+0x85b0>
   1d1b4:	mov	r0, r8
   1d1b8:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1d1bc:	ldr	ip, [sp, #76]	; 0x4c
   1d1c0:	ldr	lr, [sp, #32]
   1d1c4:	mov	r3, sl
   1d1c8:	mov	r2, r9
   1d1cc:	mov	r1, r8
   1d1d0:	str	r0, [r4, #4]
   1d1d4:	ldr	r4, [sp, #72]	; 0x48
   1d1d8:	str	fp, [sp, #8]
   1d1dc:	str	r6, [sp, #4]
   1d1e0:	str	ip, [sp, #16]
   1d1e4:	str	r4, [sp, #12]
   1d1e8:	str	lr, [sp]
   1d1ec:	mov	r5, r0
   1d1f0:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d1f4:	ldr	r3, [sp, #28]
   1d1f8:	mov	r0, r5
   1d1fc:	str	r3, [r7]
   1d200:	add	sp, sp, #132	; 0x84
   1d204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d208:	mov	r3, #8
   1d20c:	add	r1, sp, #80	; 0x50
   1d210:	str	r3, [sp]
   1d214:	rsb	r2, r2, #1
   1d218:	mvn	r3, #-2147483648	; 0x80000000
   1d21c:	mov	r0, #0
   1d220:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d224:	mov	r4, r0
   1d228:	ldm	r6, {r0, r1}
   1d22c:	str	r4, [r5]
   1d230:	stm	r4, {r0, r1}
   1d234:	b	1d124 <__assert_fail@plt+0xb9d0>
   1d238:	bl	11748 <abort@plt>
   1d23c:	andeq	r7, r3, r4, lsl #3
   1d240:	andeq	r7, r3, r4, lsr r2
   1d244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d248:	mov	r4, r2
   1d24c:	ldr	lr, [pc, #432]	; 1d404 <__assert_fail@plt+0xbcb0>
   1d250:	mov	sl, r0
   1d254:	mov	fp, r1
   1d258:	ldm	lr!, {r0, r1, r2, r3}
   1d25c:	sub	sp, sp, #92	; 0x5c
   1d260:	add	ip, sp, #40	; 0x28
   1d264:	lsr	r7, r4, #5
   1d268:	stmia	ip!, {r0, r1, r2, r3}
   1d26c:	add	r6, sp, #48	; 0x30
   1d270:	ldm	lr!, {r0, r1, r2, r3}
   1d274:	and	r4, r4, #31
   1d278:	ldr	r5, [pc, #392]	; 1d408 <__assert_fail@plt+0xbcb4>
   1d27c:	stmia	ip!, {r0, r1, r2, r3}
   1d280:	ldm	lr, {r0, r1, r2, r3}
   1d284:	stm	ip, {r0, r1, r2, r3}
   1d288:	ldr	r2, [r6, r7, lsl #2]
   1d28c:	lsr	r3, r2, r4
   1d290:	eor	r3, r3, #1
   1d294:	and	r3, r3, #1
   1d298:	eor	r4, r2, r3, lsl r4
   1d29c:	str	r4, [r6, r7, lsl #2]
   1d2a0:	bl	115e0 <__errno_location@plt>
   1d2a4:	ldr	r2, [r5, #4]
   1d2a8:	ldr	r4, [r5]
   1d2ac:	cmp	r2, #0
   1d2b0:	ldr	r3, [r0]
   1d2b4:	mov	r8, r0
   1d2b8:	str	r3, [sp, #28]
   1d2bc:	bgt	1d318 <__assert_fail@plt+0xbbc4>
   1d2c0:	add	r7, r5, #8
   1d2c4:	cmp	r4, r7
   1d2c8:	str	r2, [sp, #36]	; 0x24
   1d2cc:	beq	1d3d4 <__assert_fail@plt+0xbc80>
   1d2d0:	mov	r3, #8
   1d2d4:	mov	r0, r4
   1d2d8:	str	r3, [sp]
   1d2dc:	rsb	r2, r2, #1
   1d2e0:	mvn	r3, #-2147483648	; 0x80000000
   1d2e4:	add	r1, sp, #36	; 0x24
   1d2e8:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d2ec:	mov	r4, r0
   1d2f0:	str	r0, [r5]
   1d2f4:	ldr	r0, [r5, #4]
   1d2f8:	ldr	r2, [sp, #36]	; 0x24
   1d2fc:	mov	r1, #0
   1d300:	sub	r2, r2, r0
   1d304:	add	r0, r4, r0, lsl #3
   1d308:	lsl	r2, r2, #3
   1d30c:	bl	11610 <memset@plt>
   1d310:	ldr	r3, [sp, #36]	; 0x24
   1d314:	str	r3, [r5, #4]
   1d318:	ldr	r7, [sp, #44]	; 0x2c
   1d31c:	ldr	r9, [r4]
   1d320:	ldr	r5, [r4, #4]
   1d324:	ldr	r2, [sp, #80]	; 0x50
   1d328:	ldr	r3, [sp, #40]	; 0x28
   1d32c:	ldr	ip, [sp, #84]	; 0x54
   1d330:	orr	r7, r7, #1
   1d334:	str	r2, [sp, #12]
   1d338:	str	r3, [sp]
   1d33c:	str	r7, [sp, #4]
   1d340:	str	r6, [sp, #8]
   1d344:	mov	r1, r9
   1d348:	mov	r0, r5
   1d34c:	str	ip, [sp, #16]
   1d350:	mov	r3, fp
   1d354:	mov	r2, sl
   1d358:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d35c:	cmp	r9, r0
   1d360:	bhi	1d3c0 <__assert_fail@plt+0xbc6c>
   1d364:	ldr	r3, [pc, #160]	; 1d40c <__assert_fail@plt+0xbcb8>
   1d368:	add	r9, r0, #1
   1d36c:	cmp	r5, r3
   1d370:	str	r9, [r4]
   1d374:	beq	1d380 <__assert_fail@plt+0xbc2c>
   1d378:	mov	r0, r5
   1d37c:	bl	19d04 <__assert_fail@plt+0x85b0>
   1d380:	mov	r0, r9
   1d384:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1d388:	ldr	ip, [sp, #84]	; 0x54
   1d38c:	ldr	lr, [sp, #40]	; 0x28
   1d390:	mov	r3, fp
   1d394:	mov	r2, sl
   1d398:	mov	r1, r9
   1d39c:	str	r0, [r4, #4]
   1d3a0:	ldr	r4, [sp, #80]	; 0x50
   1d3a4:	str	r6, [sp, #8]
   1d3a8:	str	r7, [sp, #4]
   1d3ac:	str	ip, [sp, #16]
   1d3b0:	str	r4, [sp, #12]
   1d3b4:	str	lr, [sp]
   1d3b8:	mov	r5, r0
   1d3bc:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d3c0:	ldr	r3, [sp, #28]
   1d3c4:	mov	r0, r5
   1d3c8:	str	r3, [r8]
   1d3cc:	add	sp, sp, #92	; 0x5c
   1d3d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3d4:	mov	r3, #8
   1d3d8:	str	r3, [sp]
   1d3dc:	add	r1, sp, #36	; 0x24
   1d3e0:	rsb	r2, r2, #1
   1d3e4:	mvn	r3, #-2147483648	; 0x80000000
   1d3e8:	mov	r0, #0
   1d3ec:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d3f0:	mov	r4, r0
   1d3f4:	ldm	r7, {r0, r1}
   1d3f8:	str	r4, [r5]
   1d3fc:	stm	r4, {r0, r1}
   1d400:	b	1d2f4 <__assert_fail@plt+0xbba0>
   1d404:	andeq	r7, r3, r4, lsl #4
   1d408:	andeq	r7, r3, r4, lsl #3
   1d40c:	andeq	r7, r3, r4, lsr r2
   1d410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d414:	mov	r4, r1
   1d418:	ldr	lr, [pc, #420]	; 1d5c4 <__assert_fail@plt+0xbe70>
   1d41c:	mov	r6, r0
   1d420:	sub	sp, sp, #84	; 0x54
   1d424:	ldm	lr!, {r0, r1, r2, r3}
   1d428:	add	ip, sp, #32
   1d42c:	lsr	r8, r4, #5
   1d430:	add	r5, sp, #40	; 0x28
   1d434:	stmia	ip!, {r0, r1, r2, r3}
   1d438:	and	r4, r4, #31
   1d43c:	ldm	lr!, {r0, r1, r2, r3}
   1d440:	ldr	r7, [pc, #384]	; 1d5c8 <__assert_fail@plt+0xbe74>
   1d444:	stmia	ip!, {r0, r1, r2, r3}
   1d448:	ldm	lr, {r0, r1, r2, r3}
   1d44c:	stm	ip, {r0, r1, r2, r3}
   1d450:	ldr	r2, [r5, r8, lsl #2]
   1d454:	lsr	r3, r2, r4
   1d458:	eor	r3, r3, #1
   1d45c:	and	r3, r3, #1
   1d460:	eor	r4, r2, r3, lsl r4
   1d464:	str	r4, [r5, r8, lsl #2]
   1d468:	bl	115e0 <__errno_location@plt>
   1d46c:	ldr	r2, [r7, #4]
   1d470:	ldr	r4, [r7]
   1d474:	cmp	r2, #0
   1d478:	mov	r9, r0
   1d47c:	ldr	sl, [r0]
   1d480:	bgt	1d4dc <__assert_fail@plt+0xbd88>
   1d484:	add	r8, r7, #8
   1d488:	cmp	r4, r8
   1d48c:	str	r2, [sp, #28]
   1d490:	beq	1d594 <__assert_fail@plt+0xbe40>
   1d494:	mov	r3, #8
   1d498:	mov	r0, r4
   1d49c:	str	r3, [sp]
   1d4a0:	rsb	r2, r2, #1
   1d4a4:	mvn	r3, #-2147483648	; 0x80000000
   1d4a8:	add	r1, sp, #28
   1d4ac:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d4b0:	mov	r4, r0
   1d4b4:	str	r0, [r7]
   1d4b8:	ldr	r0, [r7, #4]
   1d4bc:	ldr	r2, [sp, #28]
   1d4c0:	mov	r1, #0
   1d4c4:	sub	r2, r2, r0
   1d4c8:	add	r0, r4, r0, lsl #3
   1d4cc:	lsl	r2, r2, #3
   1d4d0:	bl	11610 <memset@plt>
   1d4d4:	ldr	r3, [sp, #28]
   1d4d8:	str	r3, [r7, #4]
   1d4dc:	ldr	r8, [sp, #36]	; 0x24
   1d4e0:	ldr	fp, [r4]
   1d4e4:	ldr	r7, [r4, #4]
   1d4e8:	ldr	r2, [sp, #72]	; 0x48
   1d4ec:	ldr	r3, [sp, #32]
   1d4f0:	ldr	ip, [sp, #76]	; 0x4c
   1d4f4:	orr	r8, r8, #1
   1d4f8:	str	r2, [sp, #12]
   1d4fc:	str	r3, [sp]
   1d500:	str	r8, [sp, #4]
   1d504:	str	r5, [sp, #8]
   1d508:	mov	r1, fp
   1d50c:	mov	r0, r7
   1d510:	str	ip, [sp, #16]
   1d514:	mvn	r3, #0
   1d518:	mov	r2, r6
   1d51c:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d520:	cmp	fp, r0
   1d524:	bhi	1d584 <__assert_fail@plt+0xbe30>
   1d528:	ldr	r3, [pc, #156]	; 1d5cc <__assert_fail@plt+0xbe78>
   1d52c:	add	fp, r0, #1
   1d530:	cmp	r7, r3
   1d534:	str	fp, [r4]
   1d538:	beq	1d544 <__assert_fail@plt+0xbdf0>
   1d53c:	mov	r0, r7
   1d540:	bl	19d04 <__assert_fail@plt+0x85b0>
   1d544:	mov	r0, fp
   1d548:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1d54c:	ldr	lr, [sp, #76]	; 0x4c
   1d550:	ldr	r3, [sp, #32]
   1d554:	ldr	ip, [sp, #72]	; 0x48
   1d558:	mov	r2, r6
   1d55c:	mov	r1, fp
   1d560:	str	r0, [r4, #4]
   1d564:	str	r3, [sp]
   1d568:	str	r5, [sp, #8]
   1d56c:	str	r8, [sp, #4]
   1d570:	str	lr, [sp, #16]
   1d574:	str	ip, [sp, #12]
   1d578:	mvn	r3, #0
   1d57c:	mov	r7, r0
   1d580:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d584:	mov	r0, r7
   1d588:	str	sl, [r9]
   1d58c:	add	sp, sp, #84	; 0x54
   1d590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d594:	mov	r3, #8
   1d598:	str	r3, [sp]
   1d59c:	add	r1, sp, #28
   1d5a0:	rsb	r2, r2, #1
   1d5a4:	mvn	r3, #-2147483648	; 0x80000000
   1d5a8:	mov	r0, #0
   1d5ac:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d5b0:	mov	r4, r0
   1d5b4:	ldm	r8, {r0, r1}
   1d5b8:	str	r4, [r7]
   1d5bc:	stm	r4, {r0, r1}
   1d5c0:	b	1d4b8 <__assert_fail@plt+0xbd64>
   1d5c4:	andeq	r7, r3, r4, lsl #4
   1d5c8:	andeq	r7, r3, r4, lsl #3
   1d5cc:	andeq	r7, r3, r4, lsr r2
   1d5d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5d4:	mov	r6, r0
   1d5d8:	ldr	lr, [pc, #404]	; 1d774 <__assert_fail@plt+0xc020>
   1d5dc:	sub	sp, sp, #84	; 0x54
   1d5e0:	add	ip, sp, #32
   1d5e4:	ldm	lr!, {r0, r1, r2, r3}
   1d5e8:	ldr	r5, [pc, #392]	; 1d778 <__assert_fail@plt+0xc024>
   1d5ec:	stmia	ip!, {r0, r1, r2, r3}
   1d5f0:	ldm	lr!, {r0, r1, r2, r3}
   1d5f4:	ldr	r4, [sp, #44]	; 0x2c
   1d5f8:	stmia	ip!, {r0, r1, r2, r3}
   1d5fc:	ldm	lr, {r0, r1, r2, r3}
   1d600:	mvn	lr, r4
   1d604:	and	lr, lr, #67108864	; 0x4000000
   1d608:	eor	lr, lr, r4
   1d60c:	stm	ip, {r0, r1, r2, r3}
   1d610:	str	lr, [sp, #44]	; 0x2c
   1d614:	bl	115e0 <__errno_location@plt>
   1d618:	ldr	r2, [r5, #4]
   1d61c:	ldr	r4, [r5]
   1d620:	cmp	r2, #0
   1d624:	mov	r8, r0
   1d628:	ldr	sl, [r0]
   1d62c:	bgt	1d688 <__assert_fail@plt+0xbf34>
   1d630:	add	r7, r5, #8
   1d634:	cmp	r4, r7
   1d638:	str	r2, [sp, #28]
   1d63c:	beq	1d744 <__assert_fail@plt+0xbff0>
   1d640:	mov	r3, #8
   1d644:	mov	r0, r4
   1d648:	str	r3, [sp]
   1d64c:	rsb	r2, r2, #1
   1d650:	mvn	r3, #-2147483648	; 0x80000000
   1d654:	add	r1, sp, #28
   1d658:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d65c:	mov	r4, r0
   1d660:	str	r0, [r5]
   1d664:	ldr	r0, [r5, #4]
   1d668:	ldr	r2, [sp, #28]
   1d66c:	mov	r1, #0
   1d670:	sub	r2, r2, r0
   1d674:	add	r0, r4, r0, lsl #3
   1d678:	lsl	r2, r2, #3
   1d67c:	bl	11610 <memset@plt>
   1d680:	ldr	r3, [sp, #28]
   1d684:	str	r3, [r5, #4]
   1d688:	ldr	r7, [sp, #36]	; 0x24
   1d68c:	ldr	r9, [r4]
   1d690:	ldr	r5, [r4, #4]
   1d694:	ldr	r2, [sp, #72]	; 0x48
   1d698:	ldr	r3, [sp, #32]
   1d69c:	ldr	ip, [sp, #76]	; 0x4c
   1d6a0:	orr	r7, r7, #1
   1d6a4:	add	fp, sp, #40	; 0x28
   1d6a8:	str	r2, [sp, #12]
   1d6ac:	str	r3, [sp]
   1d6b0:	str	r7, [sp, #4]
   1d6b4:	mov	r1, r9
   1d6b8:	mov	r0, r5
   1d6bc:	str	ip, [sp, #16]
   1d6c0:	str	fp, [sp, #8]
   1d6c4:	mvn	r3, #0
   1d6c8:	mov	r2, r6
   1d6cc:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d6d0:	cmp	r9, r0
   1d6d4:	bhi	1d734 <__assert_fail@plt+0xbfe0>
   1d6d8:	ldr	r3, [pc, #156]	; 1d77c <__assert_fail@plt+0xc028>
   1d6dc:	add	r9, r0, #1
   1d6e0:	cmp	r5, r3
   1d6e4:	str	r9, [r4]
   1d6e8:	beq	1d6f4 <__assert_fail@plt+0xbfa0>
   1d6ec:	mov	r0, r5
   1d6f0:	bl	19d04 <__assert_fail@plt+0x85b0>
   1d6f4:	mov	r0, r9
   1d6f8:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1d6fc:	ldr	lr, [sp, #76]	; 0x4c
   1d700:	ldr	r3, [sp, #32]
   1d704:	ldr	ip, [sp, #72]	; 0x48
   1d708:	mov	r2, r6
   1d70c:	mov	r1, r9
   1d710:	str	r0, [r4, #4]
   1d714:	str	r3, [sp]
   1d718:	str	fp, [sp, #8]
   1d71c:	str	r7, [sp, #4]
   1d720:	str	lr, [sp, #16]
   1d724:	str	ip, [sp, #12]
   1d728:	mvn	r3, #0
   1d72c:	mov	r5, r0
   1d730:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d734:	mov	r0, r5
   1d738:	str	sl, [r8]
   1d73c:	add	sp, sp, #84	; 0x54
   1d740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d744:	mov	r3, #8
   1d748:	str	r3, [sp]
   1d74c:	add	r1, sp, #28
   1d750:	rsb	r2, r2, #1
   1d754:	mvn	r3, #-2147483648	; 0x80000000
   1d758:	mov	r0, #0
   1d75c:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d760:	mov	r4, r0
   1d764:	ldm	r7, {r0, r1}
   1d768:	str	r4, [r5]
   1d76c:	stm	r4, {r0, r1}
   1d770:	b	1d664 <__assert_fail@plt+0xbf10>
   1d774:	andeq	r7, r3, r4, lsl #4
   1d778:	andeq	r7, r3, r4, lsl #3
   1d77c:	andeq	r7, r3, r4, lsr r2
   1d780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d784:	mov	r9, r0
   1d788:	ldr	lr, [pc, #416]	; 1d930 <__assert_fail@plt+0xc1dc>
   1d78c:	mov	sl, r1
   1d790:	sub	sp, sp, #92	; 0x5c
   1d794:	ldm	lr!, {r0, r1, r2, r3}
   1d798:	add	ip, sp, #40	; 0x28
   1d79c:	ldr	r5, [pc, #400]	; 1d934 <__assert_fail@plt+0xc1e0>
   1d7a0:	stmia	ip!, {r0, r1, r2, r3}
   1d7a4:	ldm	lr!, {r0, r1, r2, r3}
   1d7a8:	ldr	r4, [sp, #52]	; 0x34
   1d7ac:	stmia	ip!, {r0, r1, r2, r3}
   1d7b0:	ldm	lr, {r0, r1, r2, r3}
   1d7b4:	mvn	lr, r4
   1d7b8:	and	lr, lr, #67108864	; 0x4000000
   1d7bc:	eor	lr, lr, r4
   1d7c0:	stm	ip, {r0, r1, r2, r3}
   1d7c4:	str	lr, [sp, #52]	; 0x34
   1d7c8:	bl	115e0 <__errno_location@plt>
   1d7cc:	ldr	r2, [r5, #4]
   1d7d0:	ldr	r4, [r5]
   1d7d4:	cmp	r2, #0
   1d7d8:	ldr	r3, [r0]
   1d7dc:	mov	r7, r0
   1d7e0:	str	r3, [sp, #28]
   1d7e4:	bgt	1d840 <__assert_fail@plt+0xc0ec>
   1d7e8:	add	r6, r5, #8
   1d7ec:	cmp	r4, r6
   1d7f0:	str	r2, [sp, #36]	; 0x24
   1d7f4:	beq	1d900 <__assert_fail@plt+0xc1ac>
   1d7f8:	mov	r3, #8
   1d7fc:	mov	r0, r4
   1d800:	str	r3, [sp]
   1d804:	rsb	r2, r2, #1
   1d808:	mvn	r3, #-2147483648	; 0x80000000
   1d80c:	add	r1, sp, #36	; 0x24
   1d810:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d814:	mov	r4, r0
   1d818:	str	r0, [r5]
   1d81c:	ldr	r0, [r5, #4]
   1d820:	ldr	r2, [sp, #36]	; 0x24
   1d824:	mov	r1, #0
   1d828:	sub	r2, r2, r0
   1d82c:	add	r0, r4, r0, lsl #3
   1d830:	lsl	r2, r2, #3
   1d834:	bl	11610 <memset@plt>
   1d838:	ldr	r3, [sp, #36]	; 0x24
   1d83c:	str	r3, [r5, #4]
   1d840:	ldr	r6, [sp, #44]	; 0x2c
   1d844:	ldr	r8, [r4]
   1d848:	ldr	r5, [r4, #4]
   1d84c:	ldr	r2, [sp, #80]	; 0x50
   1d850:	ldr	r3, [sp, #40]	; 0x28
   1d854:	ldr	ip, [sp, #84]	; 0x54
   1d858:	orr	r6, r6, #1
   1d85c:	add	fp, sp, #48	; 0x30
   1d860:	str	r2, [sp, #12]
   1d864:	str	r3, [sp]
   1d868:	str	r6, [sp, #4]
   1d86c:	mov	r1, r8
   1d870:	mov	r0, r5
   1d874:	str	ip, [sp, #16]
   1d878:	str	fp, [sp, #8]
   1d87c:	mov	r3, sl
   1d880:	mov	r2, r9
   1d884:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d888:	cmp	r8, r0
   1d88c:	bhi	1d8ec <__assert_fail@plt+0xc198>
   1d890:	ldr	r3, [pc, #160]	; 1d938 <__assert_fail@plt+0xc1e4>
   1d894:	add	r8, r0, #1
   1d898:	cmp	r5, r3
   1d89c:	str	r8, [r4]
   1d8a0:	beq	1d8ac <__assert_fail@plt+0xc158>
   1d8a4:	mov	r0, r5
   1d8a8:	bl	19d04 <__assert_fail@plt+0x85b0>
   1d8ac:	mov	r0, r8
   1d8b0:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1d8b4:	ldr	ip, [sp, #84]	; 0x54
   1d8b8:	ldr	lr, [sp, #40]	; 0x28
   1d8bc:	mov	r3, sl
   1d8c0:	mov	r2, r9
   1d8c4:	mov	r1, r8
   1d8c8:	str	r0, [r4, #4]
   1d8cc:	ldr	r4, [sp, #80]	; 0x50
   1d8d0:	str	fp, [sp, #8]
   1d8d4:	str	r6, [sp, #4]
   1d8d8:	str	ip, [sp, #16]
   1d8dc:	str	r4, [sp, #12]
   1d8e0:	str	lr, [sp]
   1d8e4:	mov	r5, r0
   1d8e8:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1d8ec:	ldr	r3, [sp, #28]
   1d8f0:	mov	r0, r5
   1d8f4:	str	r3, [r7]
   1d8f8:	add	sp, sp, #92	; 0x5c
   1d8fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d900:	mov	r3, #8
   1d904:	str	r3, [sp]
   1d908:	add	r1, sp, #36	; 0x24
   1d90c:	rsb	r2, r2, #1
   1d910:	mvn	r3, #-2147483648	; 0x80000000
   1d914:	mov	r0, #0
   1d918:	bl	1fed4 <__assert_fail@plt+0xe780>
   1d91c:	mov	r4, r0
   1d920:	ldm	r6, {r0, r1}
   1d924:	str	r4, [r5]
   1d928:	stm	r4, {r0, r1}
   1d92c:	b	1d81c <__assert_fail@plt+0xc0c8>
   1d930:	andeq	r7, r3, r4, lsl #4
   1d934:	andeq	r7, r3, r4, lsl #3
   1d938:	andeq	r7, r3, r4, lsr r2
   1d93c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d940:	sub	sp, sp, #180	; 0xb4
   1d944:	mov	r6, r1
   1d948:	mov	r4, r0
   1d94c:	mov	r9, r2
   1d950:	add	r0, sp, #80	; 0x50
   1d954:	mov	r2, #48	; 0x30
   1d958:	mov	r1, #0
   1d95c:	bl	11610 <memset@plt>
   1d960:	cmp	r6, #10
   1d964:	beq	1db44 <__assert_fail@plt+0xc3f0>
   1d968:	add	r5, sp, #80	; 0x50
   1d96c:	str	r6, [sp, #80]	; 0x50
   1d970:	ldm	r5!, {r0, r1, r2, r3}
   1d974:	add	ip, sp, #128	; 0x80
   1d978:	mov	r7, ip
   1d97c:	add	lr, sp, #32
   1d980:	stmia	ip!, {r0, r1, r2, r3}
   1d984:	mov	r8, #67108864	; 0x4000000
   1d988:	ldm	r5!, {r0, r1, r2, r3}
   1d98c:	ldr	r6, [pc, #436]	; 1db48 <__assert_fail@plt+0xc3f4>
   1d990:	stmia	ip!, {r0, r1, r2, r3}
   1d994:	ldm	r5, {r0, r1, r2, r3}
   1d998:	stm	ip, {r0, r1, r2, r3}
   1d99c:	ldm	r7!, {r0, r1, r2, r3}
   1d9a0:	stmia	lr!, {r0, r1, r2, r3}
   1d9a4:	ldm	r7!, {r0, r1, r2, r3}
   1d9a8:	str	r8, [sp, #44]	; 0x2c
   1d9ac:	stmia	lr!, {r0, r1, r2, r3}
   1d9b0:	ldm	ip, {r0, r1, r2, r3}
   1d9b4:	stm	lr, {r0, r1, r2, r3}
   1d9b8:	bl	115e0 <__errno_location@plt>
   1d9bc:	cmn	r4, #-2147483647	; 0x80000001
   1d9c0:	ldr	r5, [r6]
   1d9c4:	mov	r7, r0
   1d9c8:	movne	r0, #0
   1d9cc:	moveq	r0, #1
   1d9d0:	ldr	r3, [r7]
   1d9d4:	orrs	r0, r0, r4, lsr #31
   1d9d8:	str	r3, [sp, #24]
   1d9dc:	bne	1db44 <__assert_fail@plt+0xc3f0>
   1d9e0:	ldr	r2, [r6, #4]
   1d9e4:	cmp	r4, r2
   1d9e8:	blt	1da48 <__assert_fail@plt+0xc2f4>
   1d9ec:	add	r8, r6, #8
   1d9f0:	cmp	r5, r8
   1d9f4:	str	r2, [sp, #80]	; 0x50
   1d9f8:	beq	1db14 <__assert_fail@plt+0xc3c0>
   1d9fc:	mov	r3, #8
   1da00:	sub	r2, r4, r2
   1da04:	mov	r0, r5
   1da08:	str	r3, [sp]
   1da0c:	add	r2, r2, #1
   1da10:	add	r1, sp, #80	; 0x50
   1da14:	mvn	r3, #-2147483648	; 0x80000000
   1da18:	bl	1fed4 <__assert_fail@plt+0xe780>
   1da1c:	mov	r5, r0
   1da20:	str	r0, [r6]
   1da24:	ldr	r0, [r6, #4]
   1da28:	ldr	r2, [sp, #80]	; 0x50
   1da2c:	mov	r1, #0
   1da30:	sub	r2, r2, r0
   1da34:	add	r0, r5, r0, lsl #3
   1da38:	lsl	r2, r2, #3
   1da3c:	bl	11610 <memset@plt>
   1da40:	ldr	r3, [sp, #80]	; 0x50
   1da44:	str	r3, [r6, #4]
   1da48:	add	fp, r5, r4, lsl #3
   1da4c:	ldr	r1, [sp, #36]	; 0x24
   1da50:	ldr	r8, [r5, r4, lsl #3]
   1da54:	ldr	r6, [fp, #4]
   1da58:	ldr	r2, [sp, #72]	; 0x48
   1da5c:	ldr	r3, [sp, #32]
   1da60:	ldr	ip, [sp, #76]	; 0x4c
   1da64:	orr	r1, r1, #1
   1da68:	add	sl, sp, #40	; 0x28
   1da6c:	str	r1, [sp, #28]
   1da70:	str	r1, [sp, #4]
   1da74:	str	r2, [sp, #12]
   1da78:	str	r3, [sp]
   1da7c:	mov	r0, r6
   1da80:	mov	r1, r8
   1da84:	str	ip, [sp, #16]
   1da88:	str	sl, [sp, #8]
   1da8c:	mvn	r3, #0
   1da90:	mov	r2, r9
   1da94:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1da98:	cmp	r8, r0
   1da9c:	bhi	1db00 <__assert_fail@plt+0xc3ac>
   1daa0:	ldr	r3, [pc, #164]	; 1db4c <__assert_fail@plt+0xc3f8>
   1daa4:	add	r8, r0, #1
   1daa8:	cmp	r6, r3
   1daac:	str	r8, [r5, r4, lsl #3]
   1dab0:	beq	1dabc <__assert_fail@plt+0xc368>
   1dab4:	mov	r0, r6
   1dab8:	bl	19d04 <__assert_fail@plt+0x85b0>
   1dabc:	mov	r0, r8
   1dac0:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1dac4:	ldr	lr, [sp, #76]	; 0x4c
   1dac8:	ldr	r3, [sp, #32]
   1dacc:	ldr	ip, [sp, #72]	; 0x48
   1dad0:	ldr	r4, [sp, #28]
   1dad4:	mov	r2, r9
   1dad8:	mov	r1, r8
   1dadc:	str	r0, [fp, #4]
   1dae0:	str	r3, [sp]
   1dae4:	str	sl, [sp, #8]
   1dae8:	str	r4, [sp, #4]
   1daec:	str	lr, [sp, #16]
   1daf0:	str	ip, [sp, #12]
   1daf4:	mvn	r3, #0
   1daf8:	mov	r6, r0
   1dafc:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1db00:	ldr	r3, [sp, #24]
   1db04:	mov	r0, r6
   1db08:	str	r3, [r7]
   1db0c:	add	sp, sp, #180	; 0xb4
   1db10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db14:	mov	r3, #8
   1db18:	sub	r2, r4, r2
   1db1c:	add	r1, sp, #80	; 0x50
   1db20:	str	r3, [sp]
   1db24:	add	r2, r2, #1
   1db28:	mvn	r3, #-2147483648	; 0x80000000
   1db2c:	bl	1fed4 <__assert_fail@plt+0xe780>
   1db30:	mov	r5, r0
   1db34:	ldm	r8, {r0, r1}
   1db38:	str	r5, [r6]
   1db3c:	stm	r5, {r0, r1}
   1db40:	b	1da24 <__assert_fail@plt+0xc2d0>
   1db44:	bl	11748 <abort@plt>
   1db48:	andeq	r7, r3, r4, lsl #3
   1db4c:	andeq	r7, r3, r4, lsr r2
   1db50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db54:	mov	r7, r1
   1db58:	ldr	lr, [pc, #492]	; 1dd4c <__assert_fail@plt+0xc5f8>
   1db5c:	mov	r8, r2
   1db60:	mov	r4, r0
   1db64:	mov	fp, r3
   1db68:	ldm	lr!, {r0, r1, r2, r3}
   1db6c:	sub	sp, sp, #100	; 0x64
   1db70:	add	ip, sp, #48	; 0x30
   1db74:	mov	sl, #10
   1db78:	stmia	ip!, {r0, r1, r2, r3}
   1db7c:	cmp	r8, #0
   1db80:	cmpne	r7, #0
   1db84:	ldm	lr!, {r0, r1, r2, r3}
   1db88:	str	sl, [sp, #48]	; 0x30
   1db8c:	stmia	ip!, {r0, r1, r2, r3}
   1db90:	ldm	lr, {r0, r1, r2, r3}
   1db94:	stm	ip, {r0, r1, r2, r3}
   1db98:	beq	1dd48 <__assert_fail@plt+0xc5f4>
   1db9c:	str	r7, [sp, #88]	; 0x58
   1dba0:	str	r8, [sp, #92]	; 0x5c
   1dba4:	bl	115e0 <__errno_location@plt>
   1dba8:	ldr	r6, [pc, #416]	; 1dd50 <__assert_fail@plt+0xc5fc>
   1dbac:	cmn	r4, #-2147483647	; 0x80000001
   1dbb0:	ldr	r5, [r6]
   1dbb4:	mov	r9, r0
   1dbb8:	movne	r0, #0
   1dbbc:	moveq	r0, #1
   1dbc0:	ldr	r3, [r9]
   1dbc4:	orrs	r0, r0, r4, lsr #31
   1dbc8:	str	r3, [sp, #28]
   1dbcc:	bne	1dd48 <__assert_fail@plt+0xc5f4>
   1dbd0:	ldr	r2, [r6, #4]
   1dbd4:	cmp	r4, r2
   1dbd8:	movlt	r3, sl
   1dbdc:	blt	1dc48 <__assert_fail@plt+0xc4f4>
   1dbe0:	add	r7, r6, #8
   1dbe4:	cmp	r5, r7
   1dbe8:	str	r2, [sp, #44]	; 0x2c
   1dbec:	beq	1dd18 <__assert_fail@plt+0xc5c4>
   1dbf0:	mov	r3, #8
   1dbf4:	sub	r2, r4, r2
   1dbf8:	mov	r0, r5
   1dbfc:	str	r3, [sp]
   1dc00:	add	r2, r2, #1
   1dc04:	mvn	r3, #-2147483648	; 0x80000000
   1dc08:	add	r1, sp, #44	; 0x2c
   1dc0c:	bl	1fed4 <__assert_fail@plt+0xe780>
   1dc10:	mov	r5, r0
   1dc14:	str	r0, [r6]
   1dc18:	ldr	r0, [r6, #4]
   1dc1c:	ldr	r2, [sp, #44]	; 0x2c
   1dc20:	mov	r1, #0
   1dc24:	sub	r2, r2, r0
   1dc28:	add	r0, r5, r0, lsl #3
   1dc2c:	lsl	r2, r2, #3
   1dc30:	bl	11610 <memset@plt>
   1dc34:	ldr	r3, [sp, #48]	; 0x30
   1dc38:	ldr	r7, [sp, #88]	; 0x58
   1dc3c:	ldr	r8, [sp, #92]	; 0x5c
   1dc40:	ldr	r2, [sp, #44]	; 0x2c
   1dc44:	str	r2, [r6, #4]
   1dc48:	add	r2, r5, r4, lsl #3
   1dc4c:	mov	r1, r2
   1dc50:	str	r2, [sp, #32]
   1dc54:	ldr	r2, [sp, #52]	; 0x34
   1dc58:	ldr	r6, [r1, #4]
   1dc5c:	ldr	sl, [r5, r4, lsl #3]
   1dc60:	orr	r2, r2, #1
   1dc64:	str	r3, [sp]
   1dc68:	add	r3, sp, #56	; 0x38
   1dc6c:	str	r2, [sp, #36]	; 0x24
   1dc70:	str	r2, [sp, #4]
   1dc74:	str	r3, [sp, #8]
   1dc78:	mov	r0, r6
   1dc7c:	str	r8, [sp, #16]
   1dc80:	str	r7, [sp, #12]
   1dc84:	mov	r1, sl
   1dc88:	mvn	r3, #0
   1dc8c:	mov	r2, fp
   1dc90:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1dc94:	cmp	sl, r0
   1dc98:	bhi	1dd04 <__assert_fail@plt+0xc5b0>
   1dc9c:	ldr	r3, [pc, #176]	; 1dd54 <__assert_fail@plt+0xc600>
   1dca0:	add	r7, r0, #1
   1dca4:	cmp	r6, r3
   1dca8:	str	r7, [r5, r4, lsl #3]
   1dcac:	beq	1dcb8 <__assert_fail@plt+0xc564>
   1dcb0:	mov	r0, r6
   1dcb4:	bl	19d04 <__assert_fail@plt+0x85b0>
   1dcb8:	mov	r0, r7
   1dcbc:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1dcc0:	ldr	r3, [sp, #32]
   1dcc4:	ldr	lr, [sp, #92]	; 0x5c
   1dcc8:	ldr	ip, [sp, #88]	; 0x58
   1dccc:	ldr	r4, [sp, #36]	; 0x24
   1dcd0:	mov	r2, fp
   1dcd4:	mov	r1, r7
   1dcd8:	str	r0, [r3, #4]
   1dcdc:	add	r3, sp, #56	; 0x38
   1dce0:	str	r3, [sp, #8]
   1dce4:	ldr	r3, [sp, #48]	; 0x30
   1dce8:	str	r4, [sp, #4]
   1dcec:	str	r3, [sp]
   1dcf0:	str	lr, [sp, #16]
   1dcf4:	str	ip, [sp, #12]
   1dcf8:	mvn	r3, #0
   1dcfc:	mov	r6, r0
   1dd00:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1dd04:	ldr	r3, [sp, #28]
   1dd08:	mov	r0, r6
   1dd0c:	str	r3, [r9]
   1dd10:	add	sp, sp, #100	; 0x64
   1dd14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd18:	mov	r3, #8
   1dd1c:	sub	r2, r4, r2
   1dd20:	str	r3, [sp]
   1dd24:	add	r1, sp, #44	; 0x2c
   1dd28:	add	r2, r2, #1
   1dd2c:	mvn	r3, #-2147483648	; 0x80000000
   1dd30:	bl	1fed4 <__assert_fail@plt+0xe780>
   1dd34:	mov	r5, r0
   1dd38:	ldm	r7, {r0, r1}
   1dd3c:	str	r5, [r6]
   1dd40:	stm	r5, {r0, r1}
   1dd44:	b	1dc18 <__assert_fail@plt+0xc4c4>
   1dd48:	bl	11748 <abort@plt>
   1dd4c:	andeq	r7, r3, r4, lsl #4
   1dd50:	andeq	r7, r3, r4, lsl #3
   1dd54:	andeq	r7, r3, r4, lsr r2
   1dd58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd5c:	mov	r7, r1
   1dd60:	ldr	lr, [pc, #492]	; 1df54 <__assert_fail@plt+0xc800>
   1dd64:	mov	r8, r2
   1dd68:	mov	r4, r0
   1dd6c:	mov	fp, r3
   1dd70:	ldm	lr!, {r0, r1, r2, r3}
   1dd74:	sub	sp, sp, #100	; 0x64
   1dd78:	add	ip, sp, #48	; 0x30
   1dd7c:	mov	sl, #10
   1dd80:	stmia	ip!, {r0, r1, r2, r3}
   1dd84:	cmp	r8, #0
   1dd88:	cmpne	r7, #0
   1dd8c:	ldm	lr!, {r0, r1, r2, r3}
   1dd90:	str	sl, [sp, #48]	; 0x30
   1dd94:	stmia	ip!, {r0, r1, r2, r3}
   1dd98:	ldm	lr, {r0, r1, r2, r3}
   1dd9c:	stm	ip, {r0, r1, r2, r3}
   1dda0:	beq	1df50 <__assert_fail@plt+0xc7fc>
   1dda4:	str	r7, [sp, #88]	; 0x58
   1dda8:	str	r8, [sp, #92]	; 0x5c
   1ddac:	bl	115e0 <__errno_location@plt>
   1ddb0:	ldr	r6, [pc, #416]	; 1df58 <__assert_fail@plt+0xc804>
   1ddb4:	cmn	r4, #-2147483647	; 0x80000001
   1ddb8:	ldr	r5, [r6]
   1ddbc:	mov	r9, r0
   1ddc0:	movne	r0, #0
   1ddc4:	moveq	r0, #1
   1ddc8:	ldr	r3, [r9]
   1ddcc:	orrs	r0, r0, r4, lsr #31
   1ddd0:	str	r3, [sp, #28]
   1ddd4:	bne	1df50 <__assert_fail@plt+0xc7fc>
   1ddd8:	ldr	r2, [r6, #4]
   1dddc:	cmp	r4, r2
   1dde0:	movlt	r3, sl
   1dde4:	blt	1de50 <__assert_fail@plt+0xc6fc>
   1dde8:	add	r7, r6, #8
   1ddec:	cmp	r5, r7
   1ddf0:	str	r2, [sp, #44]	; 0x2c
   1ddf4:	beq	1df20 <__assert_fail@plt+0xc7cc>
   1ddf8:	mov	r3, #8
   1ddfc:	sub	r2, r4, r2
   1de00:	mov	r0, r5
   1de04:	str	r3, [sp]
   1de08:	add	r2, r2, #1
   1de0c:	mvn	r3, #-2147483648	; 0x80000000
   1de10:	add	r1, sp, #44	; 0x2c
   1de14:	bl	1fed4 <__assert_fail@plt+0xe780>
   1de18:	mov	r5, r0
   1de1c:	str	r0, [r6]
   1de20:	ldr	r0, [r6, #4]
   1de24:	ldr	r2, [sp, #44]	; 0x2c
   1de28:	mov	r1, #0
   1de2c:	sub	r2, r2, r0
   1de30:	add	r0, r5, r0, lsl #3
   1de34:	lsl	r2, r2, #3
   1de38:	bl	11610 <memset@plt>
   1de3c:	ldr	r3, [sp, #48]	; 0x30
   1de40:	ldr	r7, [sp, #88]	; 0x58
   1de44:	ldr	r8, [sp, #92]	; 0x5c
   1de48:	ldr	r2, [sp, #44]	; 0x2c
   1de4c:	str	r2, [r6, #4]
   1de50:	add	r2, r5, r4, lsl #3
   1de54:	mov	r1, r2
   1de58:	str	r2, [sp, #32]
   1de5c:	ldr	r2, [sp, #52]	; 0x34
   1de60:	ldr	r6, [r1, #4]
   1de64:	ldr	sl, [r5, r4, lsl #3]
   1de68:	orr	r2, r2, #1
   1de6c:	str	r3, [sp]
   1de70:	add	r3, sp, #56	; 0x38
   1de74:	str	r2, [sp, #36]	; 0x24
   1de78:	str	r2, [sp, #4]
   1de7c:	str	r3, [sp, #8]
   1de80:	mov	r0, r6
   1de84:	str	r8, [sp, #16]
   1de88:	str	r7, [sp, #12]
   1de8c:	mov	r1, sl
   1de90:	ldr	r3, [sp, #136]	; 0x88
   1de94:	mov	r2, fp
   1de98:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1de9c:	cmp	sl, r0
   1dea0:	bhi	1df0c <__assert_fail@plt+0xc7b8>
   1dea4:	ldr	r3, [pc, #176]	; 1df5c <__assert_fail@plt+0xc808>
   1dea8:	add	r7, r0, #1
   1deac:	cmp	r6, r3
   1deb0:	str	r7, [r5, r4, lsl #3]
   1deb4:	beq	1dec0 <__assert_fail@plt+0xc76c>
   1deb8:	mov	r0, r6
   1debc:	bl	19d04 <__assert_fail@plt+0x85b0>
   1dec0:	mov	r0, r7
   1dec4:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1dec8:	ldr	r3, [sp, #32]
   1decc:	ldr	lr, [sp, #92]	; 0x5c
   1ded0:	ldr	ip, [sp, #88]	; 0x58
   1ded4:	ldr	r4, [sp, #36]	; 0x24
   1ded8:	mov	r2, fp
   1dedc:	mov	r1, r7
   1dee0:	str	r0, [r3, #4]
   1dee4:	add	r3, sp, #56	; 0x38
   1dee8:	str	r3, [sp, #8]
   1deec:	ldr	r3, [sp, #48]	; 0x30
   1def0:	str	r4, [sp, #4]
   1def4:	str	r3, [sp]
   1def8:	str	lr, [sp, #16]
   1defc:	str	ip, [sp, #12]
   1df00:	ldr	r3, [sp, #136]	; 0x88
   1df04:	mov	r6, r0
   1df08:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1df0c:	ldr	r3, [sp, #28]
   1df10:	mov	r0, r6
   1df14:	str	r3, [r9]
   1df18:	add	sp, sp, #100	; 0x64
   1df1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df20:	mov	r3, #8
   1df24:	sub	r2, r4, r2
   1df28:	str	r3, [sp]
   1df2c:	add	r1, sp, #44	; 0x2c
   1df30:	add	r2, r2, #1
   1df34:	mvn	r3, #-2147483648	; 0x80000000
   1df38:	bl	1fed4 <__assert_fail@plt+0xe780>
   1df3c:	mov	r5, r0
   1df40:	ldm	r7, {r0, r1}
   1df44:	str	r5, [r6]
   1df48:	stm	r5, {r0, r1}
   1df4c:	b	1de20 <__assert_fail@plt+0xc6cc>
   1df50:	bl	11748 <abort@plt>
   1df54:	andeq	r7, r3, r4, lsl #4
   1df58:	andeq	r7, r3, r4, lsl #3
   1df5c:	andeq	r7, r3, r4, lsr r2
   1df60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df64:	mov	r5, r0
   1df68:	ldr	lr, [pc, #452]	; 1e134 <__assert_fail@plt+0xc9e0>
   1df6c:	mov	r6, r1
   1df70:	mov	sl, r2
   1df74:	ldm	lr!, {r0, r1, r2, r3}
   1df78:	sub	sp, sp, #92	; 0x5c
   1df7c:	add	ip, sp, #40	; 0x28
   1df80:	cmp	r6, #0
   1df84:	cmpne	r5, #0
   1df88:	stmia	ip!, {r0, r1, r2, r3}
   1df8c:	mov	r9, #10
   1df90:	ldm	lr!, {r0, r1, r2, r3}
   1df94:	moveq	fp, #1
   1df98:	movne	fp, #0
   1df9c:	str	r9, [sp, #40]	; 0x28
   1dfa0:	stmia	ip!, {r0, r1, r2, r3}
   1dfa4:	ldm	lr, {r0, r1, r2, r3}
   1dfa8:	stm	ip, {r0, r1, r2, r3}
   1dfac:	beq	1e130 <__assert_fail@plt+0xc9dc>
   1dfb0:	str	r5, [sp, #80]	; 0x50
   1dfb4:	str	r6, [sp, #84]	; 0x54
   1dfb8:	bl	115e0 <__errno_location@plt>
   1dfbc:	ldr	r7, [pc, #372]	; 1e138 <__assert_fail@plt+0xc9e4>
   1dfc0:	ldr	r2, [r7, #4]
   1dfc4:	ldr	r4, [r7]
   1dfc8:	cmp	r2, #0
   1dfcc:	ldr	r3, [r0]
   1dfd0:	mov	r8, r0
   1dfd4:	str	r3, [sp, #24]
   1dfd8:	movgt	r3, r9
   1dfdc:	bgt	1e044 <__assert_fail@plt+0xc8f0>
   1dfe0:	add	r5, r7, #8
   1dfe4:	cmp	r4, r5
   1dfe8:	str	r2, [sp, #36]	; 0x24
   1dfec:	beq	1e100 <__assert_fail@plt+0xc9ac>
   1dff0:	mov	r3, #8
   1dff4:	mov	r0, r4
   1dff8:	str	r3, [sp]
   1dffc:	rsb	r2, r2, #1
   1e000:	mvn	r3, #-2147483648	; 0x80000000
   1e004:	add	r1, sp, #36	; 0x24
   1e008:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e00c:	mov	r4, r0
   1e010:	str	r0, [r7]
   1e014:	ldr	r0, [r7, #4]
   1e018:	ldr	r2, [sp, #36]	; 0x24
   1e01c:	mov	r1, #0
   1e020:	sub	r2, r2, r0
   1e024:	add	r0, r4, r0, lsl #3
   1e028:	lsl	r2, r2, #3
   1e02c:	bl	11610 <memset@plt>
   1e030:	ldr	r3, [sp, #40]	; 0x28
   1e034:	ldr	r5, [sp, #80]	; 0x50
   1e038:	ldr	r6, [sp, #84]	; 0x54
   1e03c:	ldr	r2, [sp, #36]	; 0x24
   1e040:	str	r2, [r7, #4]
   1e044:	ldr	r2, [sp, #44]	; 0x2c
   1e048:	ldr	r9, [r4]
   1e04c:	ldr	r7, [r4, #4]
   1e050:	orr	r2, r2, #1
   1e054:	add	fp, sp, #48	; 0x30
   1e058:	str	r2, [sp, #28]
   1e05c:	str	r2, [sp, #4]
   1e060:	str	r3, [sp]
   1e064:	str	r6, [sp, #16]
   1e068:	str	r5, [sp, #12]
   1e06c:	mov	r1, r9
   1e070:	mov	r0, r7
   1e074:	str	fp, [sp, #8]
   1e078:	mvn	r3, #0
   1e07c:	mov	r2, sl
   1e080:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e084:	cmp	r9, r0
   1e088:	bhi	1e0ec <__assert_fail@plt+0xc998>
   1e08c:	ldr	r3, [pc, #168]	; 1e13c <__assert_fail@plt+0xc9e8>
   1e090:	add	r5, r0, #1
   1e094:	cmp	r7, r3
   1e098:	str	r5, [r4]
   1e09c:	beq	1e0a8 <__assert_fail@plt+0xc954>
   1e0a0:	mov	r0, r7
   1e0a4:	bl	19d04 <__assert_fail@plt+0x85b0>
   1e0a8:	mov	r0, r5
   1e0ac:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1e0b0:	ldr	lr, [sp, #84]	; 0x54
   1e0b4:	ldr	r3, [sp, #40]	; 0x28
   1e0b8:	ldr	ip, [sp, #80]	; 0x50
   1e0bc:	mov	r2, sl
   1e0c0:	mov	r1, r5
   1e0c4:	str	r0, [r4, #4]
   1e0c8:	ldr	r4, [sp, #28]
   1e0cc:	str	r3, [sp]
   1e0d0:	str	fp, [sp, #8]
   1e0d4:	str	r4, [sp, #4]
   1e0d8:	str	lr, [sp, #16]
   1e0dc:	str	ip, [sp, #12]
   1e0e0:	mvn	r3, #0
   1e0e4:	mov	r7, r0
   1e0e8:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e0ec:	ldr	r3, [sp, #24]
   1e0f0:	mov	r0, r7
   1e0f4:	str	r3, [r8]
   1e0f8:	add	sp, sp, #92	; 0x5c
   1e0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e100:	mov	r3, #8
   1e104:	str	r3, [sp]
   1e108:	add	r1, sp, #36	; 0x24
   1e10c:	rsb	r2, r2, #1
   1e110:	mov	r0, fp
   1e114:	mvn	r3, #-2147483648	; 0x80000000
   1e118:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e11c:	mov	r4, r0
   1e120:	ldm	r5, {r0, r1}
   1e124:	str	r4, [r7]
   1e128:	stm	r4, {r0, r1}
   1e12c:	b	1e014 <__assert_fail@plt+0xc8c0>
   1e130:	bl	11748 <abort@plt>
   1e134:	andeq	r7, r3, r4, lsl #4
   1e138:	andeq	r7, r3, r4, lsl #3
   1e13c:	andeq	r7, r3, r4, lsr r2
   1e140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e144:	mov	r5, r0
   1e148:	ldr	lr, [pc, #464]	; 1e320 <__assert_fail@plt+0xcbcc>
   1e14c:	mov	r6, r1
   1e150:	mov	sl, r2
   1e154:	mov	fp, r3
   1e158:	ldm	lr!, {r0, r1, r2, r3}
   1e15c:	sub	sp, sp, #92	; 0x5c
   1e160:	add	ip, sp, #40	; 0x28
   1e164:	cmp	r6, #0
   1e168:	cmpne	r5, #0
   1e16c:	stmia	ip!, {r0, r1, r2, r3}
   1e170:	moveq	r4, #1
   1e174:	ldm	lr!, {r0, r1, r2, r3}
   1e178:	movne	r4, #0
   1e17c:	mov	r9, #10
   1e180:	str	r4, [sp, #28]
   1e184:	stmia	ip!, {r0, r1, r2, r3}
   1e188:	ldm	lr, {r0, r1, r2, r3}
   1e18c:	str	r9, [sp, #40]	; 0x28
   1e190:	stm	ip, {r0, r1, r2, r3}
   1e194:	beq	1e31c <__assert_fail@plt+0xcbc8>
   1e198:	str	r5, [sp, #80]	; 0x50
   1e19c:	str	r6, [sp, #84]	; 0x54
   1e1a0:	bl	115e0 <__errno_location@plt>
   1e1a4:	ldr	r7, [pc, #376]	; 1e324 <__assert_fail@plt+0xcbd0>
   1e1a8:	ldr	r2, [r7, #4]
   1e1ac:	ldr	r4, [r7]
   1e1b0:	cmp	r2, #0
   1e1b4:	ldr	r3, [r0]
   1e1b8:	mov	r8, r0
   1e1bc:	str	r3, [sp, #24]
   1e1c0:	movgt	r3, r9
   1e1c4:	bgt	1e22c <__assert_fail@plt+0xcad8>
   1e1c8:	add	r5, r7, #8
   1e1cc:	cmp	r4, r5
   1e1d0:	str	r2, [sp, #36]	; 0x24
   1e1d4:	beq	1e2ec <__assert_fail@plt+0xcb98>
   1e1d8:	mov	r3, #8
   1e1dc:	mov	r0, r4
   1e1e0:	str	r3, [sp]
   1e1e4:	rsb	r2, r2, #1
   1e1e8:	mvn	r3, #-2147483648	; 0x80000000
   1e1ec:	add	r1, sp, #36	; 0x24
   1e1f0:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e1f4:	mov	r4, r0
   1e1f8:	str	r0, [r7]
   1e1fc:	ldr	r0, [r7, #4]
   1e200:	ldr	r2, [sp, #36]	; 0x24
   1e204:	mov	r1, #0
   1e208:	sub	r2, r2, r0
   1e20c:	add	r0, r4, r0, lsl #3
   1e210:	lsl	r2, r2, #3
   1e214:	bl	11610 <memset@plt>
   1e218:	ldr	r3, [sp, #40]	; 0x28
   1e21c:	ldr	r5, [sp, #80]	; 0x50
   1e220:	ldr	r6, [sp, #84]	; 0x54
   1e224:	ldr	r2, [sp, #36]	; 0x24
   1e228:	str	r2, [r7, #4]
   1e22c:	ldr	r2, [sp, #44]	; 0x2c
   1e230:	ldr	r9, [r4]
   1e234:	ldr	r7, [r4, #4]
   1e238:	orr	r2, r2, #1
   1e23c:	str	r3, [sp]
   1e240:	add	r3, sp, #48	; 0x30
   1e244:	str	r2, [sp, #28]
   1e248:	str	r2, [sp, #4]
   1e24c:	str	r3, [sp, #8]
   1e250:	str	r6, [sp, #16]
   1e254:	str	r5, [sp, #12]
   1e258:	mov	r1, r9
   1e25c:	mov	r0, r7
   1e260:	mov	r3, fp
   1e264:	mov	r2, sl
   1e268:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e26c:	cmp	r9, r0
   1e270:	bhi	1e2d8 <__assert_fail@plt+0xcb84>
   1e274:	ldr	r3, [pc, #172]	; 1e328 <__assert_fail@plt+0xcbd4>
   1e278:	add	r5, r0, #1
   1e27c:	cmp	r7, r3
   1e280:	str	r5, [r4]
   1e284:	beq	1e290 <__assert_fail@plt+0xcb3c>
   1e288:	mov	r0, r7
   1e28c:	bl	19d04 <__assert_fail@plt+0x85b0>
   1e290:	mov	r0, r5
   1e294:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1e298:	add	lr, sp, #48	; 0x30
   1e29c:	ldr	ip, [sp, #84]	; 0x54
   1e2a0:	mov	r1, r5
   1e2a4:	ldr	r5, [sp, #28]
   1e2a8:	mov	r3, fp
   1e2ac:	mov	r2, sl
   1e2b0:	str	r0, [r4, #4]
   1e2b4:	ldr	r4, [sp, #80]	; 0x50
   1e2b8:	str	lr, [sp, #8]
   1e2bc:	ldr	lr, [sp, #40]	; 0x28
   1e2c0:	str	r5, [sp, #4]
   1e2c4:	str	ip, [sp, #16]
   1e2c8:	str	r4, [sp, #12]
   1e2cc:	str	lr, [sp]
   1e2d0:	mov	r7, r0
   1e2d4:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e2d8:	ldr	r3, [sp, #24]
   1e2dc:	mov	r0, r7
   1e2e0:	str	r3, [r8]
   1e2e4:	add	sp, sp, #92	; 0x5c
   1e2e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2ec:	mov	r3, #8
   1e2f0:	str	r3, [sp]
   1e2f4:	add	r1, sp, #36	; 0x24
   1e2f8:	rsb	r2, r2, #1
   1e2fc:	ldr	r0, [sp, #28]
   1e300:	mvn	r3, #-2147483648	; 0x80000000
   1e304:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e308:	mov	r4, r0
   1e30c:	ldm	r5, {r0, r1}
   1e310:	str	r4, [r7]
   1e314:	stm	r4, {r0, r1}
   1e318:	b	1e1fc <__assert_fail@plt+0xcaa8>
   1e31c:	bl	11748 <abort@plt>
   1e320:	andeq	r7, r3, r4, lsl #4
   1e324:	andeq	r7, r3, r4, lsl #3
   1e328:	andeq	r7, r3, r4, lsr r2
   1e32c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e330:	sub	sp, sp, #52	; 0x34
   1e334:	mov	r5, r0
   1e338:	mov	sl, r1
   1e33c:	mov	fp, r2
   1e340:	bl	115e0 <__errno_location@plt>
   1e344:	ldr	r4, [pc, #404]	; 1e4e0 <__assert_fail@plt+0xcd8c>
   1e348:	cmn	r5, #-2147483647	; 0x80000001
   1e34c:	ldr	r6, [r4]
   1e350:	mov	r8, r0
   1e354:	movne	r0, #0
   1e358:	moveq	r0, #1
   1e35c:	ldr	r3, [r8]
   1e360:	orrs	r0, r0, r5, lsr #31
   1e364:	str	r3, [sp, #28]
   1e368:	bne	1e4dc <__assert_fail@plt+0xcd88>
   1e36c:	ldr	r2, [r4, #4]
   1e370:	cmp	r5, r2
   1e374:	blt	1e3d4 <__assert_fail@plt+0xcc80>
   1e378:	add	r7, r4, #8
   1e37c:	cmp	r6, r7
   1e380:	str	r2, [sp, #44]	; 0x2c
   1e384:	beq	1e4ac <__assert_fail@plt+0xcd58>
   1e388:	mov	r3, #8
   1e38c:	sub	r2, r5, r2
   1e390:	mov	r0, r6
   1e394:	str	r3, [sp]
   1e398:	add	r2, r2, #1
   1e39c:	mvn	r3, #-2147483648	; 0x80000000
   1e3a0:	add	r1, sp, #44	; 0x2c
   1e3a4:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e3a8:	mov	r6, r0
   1e3ac:	str	r0, [r4]
   1e3b0:	ldr	r0, [r4, #4]
   1e3b4:	ldr	r2, [sp, #44]	; 0x2c
   1e3b8:	mov	r1, #0
   1e3bc:	sub	r2, r2, r0
   1e3c0:	add	r0, r6, r0, lsl #3
   1e3c4:	lsl	r2, r2, #3
   1e3c8:	bl	11610 <memset@plt>
   1e3cc:	ldr	r3, [sp, #44]	; 0x2c
   1e3d0:	str	r3, [r4, #4]
   1e3d4:	ldr	r2, [r4, #56]	; 0x38
   1e3d8:	add	r3, r6, r5, lsl #3
   1e3dc:	ldr	r1, [r4, #20]
   1e3e0:	ldr	r7, [r3, #4]
   1e3e4:	ldr	r9, [r6, r5, lsl #3]
   1e3e8:	ldr	ip, [r4, #60]	; 0x3c
   1e3ec:	str	r3, [sp, #32]
   1e3f0:	ldr	r3, [r4, #16]
   1e3f4:	str	r2, [sp, #12]
   1e3f8:	ldr	r2, [pc, #228]	; 1e4e4 <__assert_fail@plt+0xcd90>
   1e3fc:	orr	r1, r1, #1
   1e400:	str	r1, [sp, #36]	; 0x24
   1e404:	str	r1, [sp, #4]
   1e408:	str	r2, [sp, #8]
   1e40c:	str	r3, [sp]
   1e410:	mov	r0, r7
   1e414:	mov	r1, r9
   1e418:	str	ip, [sp, #16]
   1e41c:	mov	r3, fp
   1e420:	mov	r2, sl
   1e424:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e428:	cmp	r9, r0
   1e42c:	bhi	1e498 <__assert_fail@plt+0xcd44>
   1e430:	ldr	r3, [pc, #176]	; 1e4e8 <__assert_fail@plt+0xcd94>
   1e434:	add	r9, r0, #1
   1e438:	cmp	r7, r3
   1e43c:	str	r9, [r6, r5, lsl #3]
   1e440:	beq	1e44c <__assert_fail@plt+0xccf8>
   1e444:	mov	r0, r7
   1e448:	bl	19d04 <__assert_fail@plt+0x85b0>
   1e44c:	mov	r0, r9
   1e450:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1e454:	ldr	ip, [sp, #32]
   1e458:	ldr	lr, [r4, #60]	; 0x3c
   1e45c:	ldr	r5, [r4, #56]	; 0x38
   1e460:	mov	r3, fp
   1e464:	mov	r2, sl
   1e468:	mov	r1, r9
   1e46c:	str	r0, [ip, #4]
   1e470:	ldr	ip, [r4, #16]
   1e474:	ldr	r4, [pc, #104]	; 1e4e4 <__assert_fail@plt+0xcd90>
   1e478:	str	lr, [sp, #16]
   1e47c:	str	r4, [sp, #8]
   1e480:	ldr	r4, [sp, #36]	; 0x24
   1e484:	str	r5, [sp, #12]
   1e488:	str	r4, [sp, #4]
   1e48c:	str	ip, [sp]
   1e490:	mov	r7, r0
   1e494:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e498:	ldr	r3, [sp, #28]
   1e49c:	mov	r0, r7
   1e4a0:	str	r3, [r8]
   1e4a4:	add	sp, sp, #52	; 0x34
   1e4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4ac:	mov	r3, #8
   1e4b0:	sub	r2, r5, r2
   1e4b4:	str	r3, [sp]
   1e4b8:	add	r1, sp, #44	; 0x2c
   1e4bc:	add	r2, r2, #1
   1e4c0:	mvn	r3, #-2147483648	; 0x80000000
   1e4c4:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e4c8:	mov	r6, r0
   1e4cc:	ldm	r7, {r0, r1}
   1e4d0:	str	r6, [r4]
   1e4d4:	stm	r6, {r0, r1}
   1e4d8:	b	1e3b0 <__assert_fail@plt+0xcc5c>
   1e4dc:	bl	11748 <abort@plt>
   1e4e0:	andeq	r7, r3, r4, lsl #3
   1e4e4:	muleq	r3, ip, r1
   1e4e8:	andeq	r7, r3, r4, lsr r2
   1e4ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4f0:	sub	sp, sp, #44	; 0x2c
   1e4f4:	mov	r9, r0
   1e4f8:	mov	sl, r1
   1e4fc:	bl	115e0 <__errno_location@plt>
   1e500:	ldr	r4, [pc, #360]	; 1e670 <__assert_fail@plt+0xcf1c>
   1e504:	ldr	r2, [r4, #4]
   1e508:	ldr	r5, [r4]
   1e50c:	cmp	r2, #0
   1e510:	ldr	r3, [r0]
   1e514:	mov	r7, r0
   1e518:	str	r3, [sp, #24]
   1e51c:	bgt	1e578 <__assert_fail@plt+0xce24>
   1e520:	add	r6, r4, #8
   1e524:	cmp	r5, r6
   1e528:	str	r2, [sp, #36]	; 0x24
   1e52c:	beq	1e640 <__assert_fail@plt+0xceec>
   1e530:	mov	r3, #8
   1e534:	mov	r0, r5
   1e538:	str	r3, [sp]
   1e53c:	rsb	r2, r2, #1
   1e540:	mvn	r3, #-2147483648	; 0x80000000
   1e544:	add	r1, sp, #36	; 0x24
   1e548:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e54c:	mov	r5, r0
   1e550:	str	r0, [r4]
   1e554:	ldr	r0, [r4, #4]
   1e558:	ldr	r2, [sp, #36]	; 0x24
   1e55c:	mov	r1, #0
   1e560:	sub	r2, r2, r0
   1e564:	add	r0, r5, r0, lsl #3
   1e568:	lsl	r2, r2, #3
   1e56c:	bl	11610 <memset@plt>
   1e570:	ldr	r3, [sp, #36]	; 0x24
   1e574:	str	r3, [r4, #4]
   1e578:	ldr	r1, [r4, #20]
   1e57c:	ldr	r8, [r5]
   1e580:	ldr	r6, [r5, #4]
   1e584:	ldr	r2, [r4, #56]	; 0x38
   1e588:	ldr	r3, [r4, #16]
   1e58c:	ldr	ip, [r4, #60]	; 0x3c
   1e590:	ldr	fp, [pc, #220]	; 1e674 <__assert_fail@plt+0xcf20>
   1e594:	orr	r1, r1, #1
   1e598:	str	r1, [sp, #28]
   1e59c:	str	r1, [sp, #4]
   1e5a0:	str	r2, [sp, #12]
   1e5a4:	str	r3, [sp]
   1e5a8:	mov	r1, r8
   1e5ac:	mov	r0, r6
   1e5b0:	str	ip, [sp, #16]
   1e5b4:	str	fp, [sp, #8]
   1e5b8:	mov	r3, sl
   1e5bc:	mov	r2, r9
   1e5c0:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e5c4:	cmp	r8, r0
   1e5c8:	bhi	1e62c <__assert_fail@plt+0xced8>
   1e5cc:	ldr	r3, [pc, #164]	; 1e678 <__assert_fail@plt+0xcf24>
   1e5d0:	add	r8, r0, #1
   1e5d4:	cmp	r6, r3
   1e5d8:	str	r8, [r5]
   1e5dc:	beq	1e5e8 <__assert_fail@plt+0xce94>
   1e5e0:	mov	r0, r6
   1e5e4:	bl	19d04 <__assert_fail@plt+0x85b0>
   1e5e8:	mov	r0, r8
   1e5ec:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1e5f0:	ldr	lr, [r4, #60]	; 0x3c
   1e5f4:	ldr	ip, [r4, #16]
   1e5f8:	mov	r3, sl
   1e5fc:	mov	r2, r9
   1e600:	mov	r1, r8
   1e604:	str	r0, [r5, #4]
   1e608:	ldr	r5, [r4, #56]	; 0x38
   1e60c:	ldr	r4, [sp, #28]
   1e610:	str	fp, [sp, #8]
   1e614:	str	r4, [sp, #4]
   1e618:	str	lr, [sp, #16]
   1e61c:	str	r5, [sp, #12]
   1e620:	str	ip, [sp]
   1e624:	mov	r6, r0
   1e628:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e62c:	ldr	r3, [sp, #24]
   1e630:	mov	r0, r6
   1e634:	str	r3, [r7]
   1e638:	add	sp, sp, #44	; 0x2c
   1e63c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e640:	mov	r3, #8
   1e644:	str	r3, [sp]
   1e648:	add	r1, sp, #36	; 0x24
   1e64c:	rsb	r2, r2, #1
   1e650:	mvn	r3, #-2147483648	; 0x80000000
   1e654:	mov	r0, #0
   1e658:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e65c:	mov	r5, r0
   1e660:	ldm	r6, {r0, r1}
   1e664:	str	r5, [r4]
   1e668:	stm	r5, {r0, r1}
   1e66c:	b	1e554 <__assert_fail@plt+0xce00>
   1e670:	andeq	r7, r3, r4, lsl #3
   1e674:	muleq	r3, ip, r1
   1e678:	andeq	r7, r3, r4, lsr r2
   1e67c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e680:	sub	sp, sp, #44	; 0x2c
   1e684:	mov	r5, r0
   1e688:	mov	sl, r1
   1e68c:	bl	115e0 <__errno_location@plt>
   1e690:	ldr	r4, [pc, #396]	; 1e824 <__assert_fail@plt+0xd0d0>
   1e694:	cmn	r5, #-2147483647	; 0x80000001
   1e698:	ldr	r6, [r4]
   1e69c:	mov	r8, r0
   1e6a0:	movne	r0, #0
   1e6a4:	moveq	r0, #1
   1e6a8:	ldr	r3, [r8]
   1e6ac:	orrs	r0, r0, r5, lsr #31
   1e6b0:	str	r3, [sp, #24]
   1e6b4:	bne	1e820 <__assert_fail@plt+0xd0cc>
   1e6b8:	ldr	r2, [r4, #4]
   1e6bc:	cmp	r5, r2
   1e6c0:	blt	1e720 <__assert_fail@plt+0xcfcc>
   1e6c4:	add	r7, r4, #8
   1e6c8:	cmp	r6, r7
   1e6cc:	str	r2, [sp, #36]	; 0x24
   1e6d0:	beq	1e7f0 <__assert_fail@plt+0xd09c>
   1e6d4:	mov	r3, #8
   1e6d8:	sub	r2, r5, r2
   1e6dc:	mov	r0, r6
   1e6e0:	str	r3, [sp]
   1e6e4:	add	r2, r2, #1
   1e6e8:	mvn	r3, #-2147483648	; 0x80000000
   1e6ec:	add	r1, sp, #36	; 0x24
   1e6f0:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e6f4:	mov	r6, r0
   1e6f8:	str	r0, [r4]
   1e6fc:	ldr	r0, [r4, #4]
   1e700:	ldr	r2, [sp, #36]	; 0x24
   1e704:	mov	r1, #0
   1e708:	sub	r2, r2, r0
   1e70c:	add	r0, r6, r0, lsl #3
   1e710:	lsl	r2, r2, #3
   1e714:	bl	11610 <memset@plt>
   1e718:	ldr	r3, [sp, #36]	; 0x24
   1e71c:	str	r3, [r4, #4]
   1e720:	ldr	r2, [r4, #56]	; 0x38
   1e724:	add	fp, r6, r5, lsl #3
   1e728:	ldr	r1, [r4, #20]
   1e72c:	ldr	r9, [r6, r5, lsl #3]
   1e730:	ldr	r7, [fp, #4]
   1e734:	ldr	r3, [r4, #16]
   1e738:	ldr	ip, [r4, #60]	; 0x3c
   1e73c:	str	r2, [sp, #12]
   1e740:	ldr	r2, [pc, #224]	; 1e828 <__assert_fail@plt+0xd0d4>
   1e744:	orr	r1, r1, #1
   1e748:	str	r1, [sp, #28]
   1e74c:	str	r1, [sp, #4]
   1e750:	str	r2, [sp, #8]
   1e754:	str	r3, [sp]
   1e758:	mov	r0, r7
   1e75c:	mov	r1, r9
   1e760:	str	ip, [sp, #16]
   1e764:	mvn	r3, #0
   1e768:	mov	r2, sl
   1e76c:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e770:	cmp	r9, r0
   1e774:	bhi	1e7dc <__assert_fail@plt+0xd088>
   1e778:	ldr	r3, [pc, #172]	; 1e82c <__assert_fail@plt+0xd0d8>
   1e77c:	add	r9, r0, #1
   1e780:	cmp	r7, r3
   1e784:	str	r9, [r6, r5, lsl #3]
   1e788:	beq	1e794 <__assert_fail@plt+0xd040>
   1e78c:	mov	r0, r7
   1e790:	bl	19d04 <__assert_fail@plt+0x85b0>
   1e794:	mov	r0, r9
   1e798:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1e79c:	ldr	ip, [r4, #60]	; 0x3c
   1e7a0:	ldr	r3, [r4, #16]
   1e7a4:	ldr	lr, [r4, #56]	; 0x38
   1e7a8:	ldr	r4, [pc, #120]	; 1e828 <__assert_fail@plt+0xd0d4>
   1e7ac:	mov	r2, sl
   1e7b0:	mov	r1, r9
   1e7b4:	str	r0, [fp, #4]
   1e7b8:	str	r4, [sp, #8]
   1e7bc:	ldr	r4, [sp, #28]
   1e7c0:	str	r3, [sp]
   1e7c4:	str	r4, [sp, #4]
   1e7c8:	str	ip, [sp, #16]
   1e7cc:	str	lr, [sp, #12]
   1e7d0:	mvn	r3, #0
   1e7d4:	mov	r7, r0
   1e7d8:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e7dc:	ldr	r3, [sp, #24]
   1e7e0:	mov	r0, r7
   1e7e4:	str	r3, [r8]
   1e7e8:	add	sp, sp, #44	; 0x2c
   1e7ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7f0:	mov	r3, #8
   1e7f4:	sub	r2, r5, r2
   1e7f8:	str	r3, [sp]
   1e7fc:	add	r1, sp, #36	; 0x24
   1e800:	add	r2, r2, #1
   1e804:	mvn	r3, #-2147483648	; 0x80000000
   1e808:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e80c:	mov	r6, r0
   1e810:	ldm	r7, {r0, r1}
   1e814:	str	r6, [r4]
   1e818:	stm	r6, {r0, r1}
   1e81c:	b	1e6fc <__assert_fail@plt+0xcfa8>
   1e820:	bl	11748 <abort@plt>
   1e824:	andeq	r7, r3, r4, lsl #3
   1e828:	muleq	r3, ip, r1
   1e82c:	andeq	r7, r3, r4, lsr r2
   1e830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e834:	sub	sp, sp, #44	; 0x2c
   1e838:	mov	sl, r0
   1e83c:	bl	115e0 <__errno_location@plt>
   1e840:	ldr	r4, [pc, #348]	; 1e9a4 <__assert_fail@plt+0xd250>
   1e844:	ldr	r2, [r4, #4]
   1e848:	ldr	r5, [r4]
   1e84c:	cmp	r2, #0
   1e850:	ldr	r3, [r0]
   1e854:	mov	r8, r0
   1e858:	str	r3, [sp, #28]
   1e85c:	bgt	1e8b8 <__assert_fail@plt+0xd164>
   1e860:	add	r6, r4, #8
   1e864:	cmp	r5, r6
   1e868:	str	r2, [sp, #36]	; 0x24
   1e86c:	beq	1e974 <__assert_fail@plt+0xd220>
   1e870:	mov	r3, #8
   1e874:	mov	r0, r5
   1e878:	str	r3, [sp]
   1e87c:	rsb	r2, r2, #1
   1e880:	mvn	r3, #-2147483648	; 0x80000000
   1e884:	add	r1, sp, #36	; 0x24
   1e888:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e88c:	mov	r5, r0
   1e890:	str	r0, [r4]
   1e894:	ldr	r0, [r4, #4]
   1e898:	ldr	r2, [sp, #36]	; 0x24
   1e89c:	mov	r1, #0
   1e8a0:	sub	r2, r2, r0
   1e8a4:	add	r0, r5, r0, lsl #3
   1e8a8:	lsl	r2, r2, #3
   1e8ac:	bl	11610 <memset@plt>
   1e8b0:	ldr	r3, [sp, #36]	; 0x24
   1e8b4:	str	r3, [r4, #4]
   1e8b8:	ldr	r7, [r4, #20]
   1e8bc:	ldr	r9, [r5]
   1e8c0:	ldr	r6, [r5, #4]
   1e8c4:	ldr	r2, [r4, #56]	; 0x38
   1e8c8:	ldr	r3, [r4, #16]
   1e8cc:	ldr	ip, [r4, #60]	; 0x3c
   1e8d0:	ldr	fp, [pc, #208]	; 1e9a8 <__assert_fail@plt+0xd254>
   1e8d4:	orr	r7, r7, #1
   1e8d8:	str	r2, [sp, #12]
   1e8dc:	str	r3, [sp]
   1e8e0:	str	r7, [sp, #4]
   1e8e4:	mov	r1, r9
   1e8e8:	mov	r0, r6
   1e8ec:	str	ip, [sp, #16]
   1e8f0:	str	fp, [sp, #8]
   1e8f4:	mvn	r3, #0
   1e8f8:	mov	r2, sl
   1e8fc:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e900:	cmp	r9, r0
   1e904:	bhi	1e960 <__assert_fail@plt+0xd20c>
   1e908:	ldr	r3, [pc, #156]	; 1e9ac <__assert_fail@plt+0xd258>
   1e90c:	add	r9, r0, #1
   1e910:	cmp	r6, r3
   1e914:	str	r9, [r5]
   1e918:	beq	1e924 <__assert_fail@plt+0xd1d0>
   1e91c:	mov	r0, r6
   1e920:	bl	19d04 <__assert_fail@plt+0x85b0>
   1e924:	mov	r0, r9
   1e928:	bl	1fcb8 <__assert_fail@plt+0xe564>
   1e92c:	ldr	ip, [r4, #60]	; 0x3c
   1e930:	ldr	r3, [r4, #16]
   1e934:	ldr	lr, [r4, #56]	; 0x38
   1e938:	mov	r2, sl
   1e93c:	mov	r1, r9
   1e940:	str	r0, [r5, #4]
   1e944:	str	r3, [sp]
   1e948:	stmib	sp, {r7, fp}
   1e94c:	str	ip, [sp, #16]
   1e950:	str	lr, [sp, #12]
   1e954:	mvn	r3, #0
   1e958:	mov	r6, r0
   1e95c:	bl	1ab38 <__assert_fail@plt+0x93e4>
   1e960:	ldr	r3, [sp, #28]
   1e964:	mov	r0, r6
   1e968:	str	r3, [r8]
   1e96c:	add	sp, sp, #44	; 0x2c
   1e970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e974:	mov	r3, #8
   1e978:	str	r3, [sp]
   1e97c:	add	r1, sp, #36	; 0x24
   1e980:	rsb	r2, r2, #1
   1e984:	mvn	r3, #-2147483648	; 0x80000000
   1e988:	mov	r0, #0
   1e98c:	bl	1fed4 <__assert_fail@plt+0xe780>
   1e990:	mov	r5, r0
   1e994:	ldm	r6, {r0, r1}
   1e998:	str	r5, [r4]
   1e99c:	stm	r5, {r0, r1}
   1e9a0:	b	1e894 <__assert_fail@plt+0xd140>
   1e9a4:	andeq	r7, r3, r4, lsl #3
   1e9a8:	muleq	r3, ip, r1
   1e9ac:	andeq	r7, r3, r4, lsr r2
   1e9b0:	mov	r3, #0
   1e9b4:	str	r3, [r0]
   1e9b8:	str	r3, [r0, #4]
   1e9bc:	bx	lr
   1e9c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9c4:	sub	sp, sp, #52	; 0x34
   1e9c8:	add	r4, sp, #16
   1e9cc:	mov	r7, r2
   1e9d0:	mov	r6, r1
   1e9d4:	mov	r2, #32
   1e9d8:	mov	r1, #0
   1e9dc:	mov	r5, r0
   1e9e0:	mov	r0, r4
   1e9e4:	mov	r8, r3
   1e9e8:	bl	11610 <memset@plt>
   1e9ec:	cmp	r7, #0
   1e9f0:	movne	r1, r6
   1e9f4:	movne	lr, #1
   1e9f8:	addne	r2, r1, r7
   1e9fc:	beq	1ea20 <__assert_fail@plt+0xd2cc>
   1ea00:	ldrb	r3, [r1], #1
   1ea04:	and	ip, r3, #31
   1ea08:	lsr	r3, r3, #5
   1ea0c:	cmp	r2, r1
   1ea10:	ldr	r0, [r4, r3, lsl #2]
   1ea14:	orr	r0, r0, lr, lsl ip
   1ea18:	str	r0, [r4, r3, lsl #2]
   1ea1c:	bne	1ea00 <__assert_fail@plt+0xd2ac>
   1ea20:	ldr	r3, [r5, #4]
   1ea24:	ldr	r2, [r5, #8]
   1ea28:	cmp	r3, r2
   1ea2c:	bcs	1eb90 <__assert_fail@plt+0xd43c>
   1ea30:	add	r2, r3, #1
   1ea34:	str	r2, [r5, #4]
   1ea38:	ldrb	r4, [r3]
   1ea3c:	lsr	r3, r4, #5
   1ea40:	add	r2, sp, #48	; 0x30
   1ea44:	add	r3, r2, r3, lsl #2
   1ea48:	and	r1, r4, #31
   1ea4c:	ldr	r2, [r3, #-32]	; 0xffffffe0
   1ea50:	lsr	r3, r2, r1
   1ea54:	tst	r3, #1
   1ea58:	bne	1ea80 <__assert_fail@plt+0xd32c>
   1ea5c:	b	1eaac <__assert_fail@plt+0xd358>
   1ea60:	lsr	r2, r4, #5
   1ea64:	add	r1, sp, #48	; 0x30
   1ea68:	add	r2, r1, r2, lsl #2
   1ea6c:	and	r3, r4, #31
   1ea70:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1ea74:	lsr	r3, r2, r3
   1ea78:	tst	r3, #1
   1ea7c:	beq	1eaac <__assert_fail@plt+0xd358>
   1ea80:	ldr	r3, [r5, #4]
   1ea84:	ldr	r2, [r5, #8]
   1ea88:	add	r1, r3, #1
   1ea8c:	cmp	r3, r2
   1ea90:	strcc	r1, [r5, #4]
   1ea94:	ldrbcc	r4, [r3]
   1ea98:	bcc	1ea60 <__assert_fail@plt+0xd30c>
   1ea9c:	mov	r0, r5
   1eaa0:	bl	116ac <__uflow@plt>
   1eaa4:	subs	r4, r0, #0
   1eaa8:	bge	1ea60 <__assert_fail@plt+0xd30c>
   1eaac:	ldr	r3, [r8]
   1eab0:	add	r7, sp, #48	; 0x30
   1eab4:	ldr	fp, [r8, #4]
   1eab8:	str	r3, [r7, #-36]!	; 0xffffffdc
   1eabc:	mov	r6, #0
   1eac0:	mov	sl, #1
   1eac4:	mvn	r9, #0
   1eac8:	b	1eb18 <__assert_fail@plt+0xd3c4>
   1eacc:	lsr	r3, r4, #5
   1ead0:	add	r1, sp, #48	; 0x30
   1ead4:	cmp	r4, #0
   1ead8:	and	r2, r4, #31
   1eadc:	add	r3, r1, r3, lsl #2
   1eae0:	blt	1eb64 <__assert_fail@plt+0xd410>
   1eae4:	ldr	r3, [r3, #-32]	; 0xffffffe0
   1eae8:	lsr	r3, r3, r2
   1eaec:	tst	r3, #1
   1eaf0:	bne	1eb64 <__assert_fail@plt+0xd410>
   1eaf4:	strb	r4, [fp, r6]
   1eaf8:	ldr	r3, [r5, #4]
   1eafc:	ldr	r2, [r5, #8]
   1eb00:	add	r1, r3, #1
   1eb04:	cmp	r3, r2
   1eb08:	strcc	r1, [r5, #4]
   1eb0c:	ldrbcc	r4, [r3]
   1eb10:	bcs	1eb54 <__assert_fail@plt+0xd400>
   1eb14:	add	r6, r6, #1
   1eb18:	clz	r3, r6
   1eb1c:	lsr	r3, r3, #5
   1eb20:	ands	r3, r3, r4, lsr #31
   1eb24:	bne	1eb84 <__assert_fail@plt+0xd430>
   1eb28:	ldr	r3, [sp, #12]
   1eb2c:	cmp	r6, r3
   1eb30:	bne	1eacc <__assert_fail@plt+0xd378>
   1eb34:	mov	r0, fp
   1eb38:	str	sl, [sp]
   1eb3c:	mov	r3, r9
   1eb40:	mov	r2, #1
   1eb44:	mov	r1, r7
   1eb48:	bl	1fed4 <__assert_fail@plt+0xe780>
   1eb4c:	mov	fp, r0
   1eb50:	b	1eacc <__assert_fail@plt+0xd378>
   1eb54:	mov	r0, r5
   1eb58:	bl	116ac <__uflow@plt>
   1eb5c:	mov	r4, r0
   1eb60:	b	1eb14 <__assert_fail@plt+0xd3c0>
   1eb64:	mov	r3, #0
   1eb68:	strb	r3, [fp, r6]
   1eb6c:	ldr	r3, [sp, #12]
   1eb70:	mov	r0, r6
   1eb74:	str	fp, [r8, #4]
   1eb78:	str	r3, [r8]
   1eb7c:	add	sp, sp, #52	; 0x34
   1eb80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb84:	mvn	r0, #0
   1eb88:	add	sp, sp, #52	; 0x34
   1eb8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb90:	mov	r0, r5
   1eb94:	bl	116ac <__uflow@plt>
   1eb98:	subs	r4, r0, #0
   1eb9c:	bge	1ea3c <__assert_fail@plt+0xd2e8>
   1eba0:	b	1eaac <__assert_fail@plt+0xd358>
   1eba4:	cmp	r1, #0
   1eba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebac:	mov	fp, r3
   1ebb0:	sub	sp, sp, #36	; 0x24
   1ebb4:	moveq	r3, #64	; 0x40
   1ebb8:	mov	sl, r0
   1ebbc:	addne	r0, r1, #1
   1ebc0:	movne	r3, r0
   1ebc4:	moveq	r0, r3
   1ebc8:	mov	r1, #4
   1ebcc:	str	r3, [sp, #20]
   1ebd0:	str	r2, [sp, #12]
   1ebd4:	bl	1fd74 <__assert_fail@plt+0xe620>
   1ebd8:	mov	r1, #4
   1ebdc:	mov	r9, #1
   1ebe0:	mov	r7, r0
   1ebe4:	ldr	r0, [sp, #20]
   1ebe8:	bl	1fd74 <__assert_fail@plt+0xe620>
   1ebec:	mov	r3, #0
   1ebf0:	mov	r4, r3
   1ebf4:	str	r3, [sp, #24]
   1ebf8:	str	r3, [sp, #28]
   1ebfc:	mov	r8, r0
   1ec00:	b	1ec30 <__assert_fail@plt+0xd4dc>
   1ec04:	cmn	r5, #1
   1ec08:	mov	r1, r9
   1ec0c:	mov	r0, r6
   1ec10:	beq	1ec9c <__assert_fail@plt+0xd548>
   1ec14:	bl	1fd74 <__assert_fail@plt+0xe620>
   1ec18:	str	r5, [r8, r4, lsl #2]
   1ec1c:	mov	r2, r6
   1ec20:	ldr	r1, [sp, #28]
   1ec24:	bl	113f4 <memcpy@plt>
   1ec28:	str	r0, [r7, r4, lsl #2]
   1ec2c:	add	r4, r4, #1
   1ec30:	add	r3, sp, #24
   1ec34:	mov	r2, fp
   1ec38:	ldr	r1, [sp, #12]
   1ec3c:	mov	r0, sl
   1ec40:	bl	1e9c0 <__assert_fail@plt+0xd26c>
   1ec44:	ldr	r3, [sp, #20]
   1ec48:	cmp	r4, r3
   1ec4c:	mov	r5, r0
   1ec50:	add	r6, r0, #1
   1ec54:	blt	1ec04 <__assert_fail@plt+0xd4b0>
   1ec58:	mov	r3, #4
   1ec5c:	str	r3, [sp]
   1ec60:	mov	r0, r7
   1ec64:	mvn	r3, #0
   1ec68:	mov	r2, r9
   1ec6c:	add	r1, sp, #20
   1ec70:	bl	1fed4 <__assert_fail@plt+0xe780>
   1ec74:	ldr	r1, [sp, #20]
   1ec78:	mov	r2, #4
   1ec7c:	mov	r7, r0
   1ec80:	mov	r0, r8
   1ec84:	bl	1fd1c <__assert_fail@plt+0xe5c8>
   1ec88:	cmn	r5, #1
   1ec8c:	mov	r1, r9
   1ec90:	mov	r8, r0
   1ec94:	mov	r0, r6
   1ec98:	bne	1ec14 <__assert_fail@plt+0xd4c0>
   1ec9c:	mov	r3, #0
   1eca0:	str	r3, [r7, r4, lsl #2]
   1eca4:	ldr	r0, [sp, #28]
   1eca8:	str	r3, [r8, r4, lsl #2]
   1ecac:	bl	19d04 <__assert_fail@plt+0x85b0>
   1ecb0:	ldr	r3, [sp, #76]	; 0x4c
   1ecb4:	cmp	r3, #0
   1ecb8:	ldr	r3, [sp, #72]	; 0x48
   1ecbc:	str	r7, [r3]
   1ecc0:	ldrne	r3, [sp, #76]	; 0x4c
   1ecc4:	strne	r8, [r3]
   1ecc8:	beq	1ecd8 <__assert_fail@plt+0xd584>
   1eccc:	mov	r0, r4
   1ecd0:	add	sp, sp, #36	; 0x24
   1ecd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecd8:	mov	r0, r8
   1ecdc:	bl	19d04 <__assert_fail@plt+0x85b0>
   1ece0:	mov	r0, r4
   1ece4:	add	sp, sp, #36	; 0x24
   1ece8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecec:	push	{r4, r5, r6, r7, r8, lr}
   1ecf0:	mov	r8, r0
   1ecf4:	ldr	r5, [pc, #84]	; 1ed50 <__assert_fail@plt+0xd5fc>
   1ecf8:	mov	r7, r1
   1ecfc:	mov	r4, r2
   1ed00:	mov	r2, r4
   1ed04:	mov	r1, r7
   1ed08:	mov	r0, r8
   1ed0c:	bl	11634 <write@plt>
   1ed10:	subs	r6, r0, #0
   1ed14:	bge	1ed48 <__assert_fail@plt+0xd5f4>
   1ed18:	bl	115e0 <__errno_location@plt>
   1ed1c:	ldr	r3, [r0]
   1ed20:	cmp	r3, #4
   1ed24:	beq	1ed00 <__assert_fail@plt+0xd5ac>
   1ed28:	cmp	r4, r5
   1ed2c:	sub	r3, r3, #22
   1ed30:	clz	r3, r3
   1ed34:	lsr	r3, r3, #5
   1ed38:	movls	r3, #0
   1ed3c:	cmp	r3, #0
   1ed40:	mov	r4, r5
   1ed44:	bne	1ed00 <__assert_fail@plt+0xd5ac>
   1ed48:	mov	r0, r6
   1ed4c:	pop	{r4, r5, r6, r7, r8, pc}
   1ed50:	svcvc	0x00f00000	; IMB
   1ed54:	push	{r4, r5, r6, lr}
   1ed58:	mov	r2, r1
   1ed5c:	mov	r4, r1
   1ed60:	mov	r1, #0
   1ed64:	mov	r5, r0
   1ed68:	bl	11658 <memchr@plt>
   1ed6c:	cmp	r0, #0
   1ed70:	subne	r0, r0, r5
   1ed74:	addne	r0, r0, #1
   1ed78:	moveq	r0, r4
   1ed7c:	pop	{r4, r5, r6, pc}
   1ed80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed84:	sub	sp, sp, #76	; 0x4c
   1ed88:	mov	r7, r1
   1ed8c:	bl	11448 <strdup@plt>
   1ed90:	subs	r9, r0, #0
   1ed94:	beq	1f224 <__assert_fail@plt+0xdad0>
   1ed98:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1ed9c:	cmp	r0, #1
   1eda0:	bls	1eff4 <__assert_fail@plt+0xd8a0>
   1eda4:	cmp	r7, #0
   1eda8:	bne	1f0a4 <__assert_fail@plt+0xd950>
   1edac:	add	r8, sp, #20
   1edb0:	mov	r0, r9
   1edb4:	str	r9, [sp, #32]
   1edb8:	bl	115b0 <strlen@plt>
   1edbc:	mov	sl, #0
   1edc0:	str	sl, [sp, #20]
   1edc4:	strb	sl, [sp, #16]
   1edc8:	str	sl, [r8, #4]
   1edcc:	strb	sl, [sp, #28]
   1edd0:	add	fp, r9, r0
   1edd4:	cmp	r9, fp
   1edd8:	str	fp, [sp, #12]
   1eddc:	bcs	1efcc <__assert_fail@plt+0xd878>
   1ede0:	mov	r7, sl
   1ede4:	str	sl, [sp, #4]
   1ede8:	mov	r5, sl
   1edec:	mov	r4, r9
   1edf0:	mov	r6, #1
   1edf4:	b	1ee38 <__assert_fail@plt+0xd6e4>
   1edf8:	cmp	r5, #1
   1edfc:	beq	1ef34 <__assert_fail@plt+0xd7e0>
   1ee00:	cmp	r5, #2
   1ee04:	bne	1eea0 <__assert_fail@plt+0xd74c>
   1ee08:	ldrb	r1, [sp, #40]	; 0x28
   1ee0c:	cmp	r1, #0
   1ee10:	beq	1eea0 <__assert_fail@plt+0xd74c>
   1ee14:	ldr	r0, [sp, #44]	; 0x2c
   1ee18:	bl	115a4 <iswspace@plt>
   1ee1c:	cmp	r0, #0
   1ee20:	moveq	r5, #1
   1ee24:	add	r4, r4, sl
   1ee28:	cmp	r4, fp
   1ee2c:	str	r4, [sp, #32]
   1ee30:	strb	r7, [sp, #28]
   1ee34:	bcs	1efd8 <__assert_fail@plt+0xd884>
   1ee38:	ldrb	r3, [sp, #16]
   1ee3c:	cmp	r3, #0
   1ee40:	bne	1eebc <__assert_fail@plt+0xd768>
   1ee44:	ldrb	r1, [r4]
   1ee48:	ldr	r3, [pc, #1004]	; 1f23c <__assert_fail@plt+0xdae8>
   1ee4c:	and	r0, r1, #31
   1ee50:	lsr	r1, r1, #5
   1ee54:	ldr	r3, [r3, r1, lsl #2]
   1ee58:	lsr	r3, r3, r0
   1ee5c:	ands	sl, r3, #1
   1ee60:	beq	1eea8 <__assert_fail@plt+0xd754>
   1ee64:	str	r6, [sp, #36]	; 0x24
   1ee68:	ldrb	r1, [r4]
   1ee6c:	strb	r6, [sp, #40]	; 0x28
   1ee70:	str	r1, [sp, #44]	; 0x2c
   1ee74:	cmp	r5, #0
   1ee78:	strb	r6, [sp, #28]
   1ee7c:	bne	1edf8 <__assert_fail@plt+0xd6a4>
   1ee80:	ldrb	r1, [sp, #40]	; 0x28
   1ee84:	cmp	r1, #0
   1ee88:	beq	1eea0 <__assert_fail@plt+0xd74c>
   1ee8c:	ldr	r0, [sp, #44]	; 0x2c
   1ee90:	bl	115a4 <iswspace@plt>
   1ee94:	clz	r5, r0
   1ee98:	lsr	r5, r5, #5
   1ee9c:	b	1ee24 <__assert_fail@plt+0xd6d0>
   1eea0:	mov	r5, #1
   1eea4:	b	1ee24 <__assert_fail@plt+0xd6d0>
   1eea8:	mov	r0, r8
   1eeac:	bl	1140c <mbsinit@plt>
   1eeb0:	cmp	r0, #0
   1eeb4:	beq	1f1fc <__assert_fail@plt+0xdaa8>
   1eeb8:	strb	r6, [sp, #16]
   1eebc:	sub	r2, fp, r4
   1eec0:	mov	r1, r4
   1eec4:	mov	r3, r8
   1eec8:	add	r0, sp, #44	; 0x2c
   1eecc:	bl	207c8 <__assert_fail@plt+0xf074>
   1eed0:	cmn	r0, #1
   1eed4:	mov	sl, r0
   1eed8:	str	r0, [sp, #36]	; 0x24
   1eedc:	beq	1ef60 <__assert_fail@plt+0xd80c>
   1eee0:	cmn	r0, #2
   1eee4:	beq	1ef78 <__assert_fail@plt+0xd824>
   1eee8:	cmp	r0, #0
   1eeec:	ldr	r4, [sp, #32]
   1eef0:	bne	1ef14 <__assert_fail@plt+0xd7c0>
   1eef4:	str	r6, [sp, #36]	; 0x24
   1eef8:	ldrb	r3, [r4]
   1eefc:	cmp	r3, #0
   1ef00:	bne	1f210 <__assert_fail@plt+0xdabc>
   1ef04:	ldr	r3, [sp, #44]	; 0x2c
   1ef08:	cmp	r3, #0
   1ef0c:	bne	1f228 <__assert_fail@plt+0xdad4>
   1ef10:	mov	sl, r6
   1ef14:	mov	r0, r8
   1ef18:	strb	r6, [sp, #40]	; 0x28
   1ef1c:	bl	1140c <mbsinit@plt>
   1ef20:	ldr	fp, [sp, #12]
   1ef24:	cmp	r0, #0
   1ef28:	strbne	r7, [sp, #16]
   1ef2c:	ldrne	sl, [sp, #36]	; 0x24
   1ef30:	b	1ee74 <__assert_fail@plt+0xd720>
   1ef34:	ldrb	r1, [sp, #40]	; 0x28
   1ef38:	cmp	r1, #0
   1ef3c:	beq	1ee24 <__assert_fail@plt+0xd6d0>
   1ef40:	ldr	r0, [sp, #44]	; 0x2c
   1ef44:	bl	115a4 <iswspace@plt>
   1ef48:	ldr	r3, [sp, #4]
   1ef4c:	cmp	r0, #0
   1ef50:	movne	r3, r4
   1ef54:	str	r3, [sp, #4]
   1ef58:	movne	r5, #2
   1ef5c:	b	1ee24 <__assert_fail@plt+0xd6d0>
   1ef60:	str	r6, [sp, #36]	; 0x24
   1ef64:	strb	r7, [sp, #40]	; 0x28
   1ef68:	ldr	fp, [sp, #12]
   1ef6c:	ldr	r4, [sp, #32]
   1ef70:	mov	sl, #1
   1ef74:	b	1ee74 <__assert_fail@plt+0xd720>
   1ef78:	ldr	fp, [sp, #12]
   1ef7c:	ldr	r4, [sp, #32]
   1ef80:	strb	r7, [sp, #40]	; 0x28
   1ef84:	sub	sl, fp, r4
   1ef88:	str	sl, [sp, #36]	; 0x24
   1ef8c:	b	1ee74 <__assert_fail@plt+0xd720>
   1ef90:	ldr	r4, [sp, #32]
   1ef94:	mov	r2, #1
   1ef98:	mov	r3, #0
   1ef9c:	str	r2, [sp, #36]	; 0x24
   1efa0:	strb	r3, [sp, #40]	; 0x28
   1efa4:	mov	r3, #1
   1efa8:	strb	r3, [sp, #28]
   1efac:	mov	r0, r4
   1efb0:	bl	115b0 <strlen@plt>
   1efb4:	mov	r1, r4
   1efb8:	add	r2, r0, #1
   1efbc:	mov	r0, r9
   1efc0:	bl	113c4 <memmove@plt>
   1efc4:	cmp	r7, #1
   1efc8:	bne	1edb0 <__assert_fail@plt+0xd65c>
   1efcc:	mov	r0, r9
   1efd0:	add	sp, sp, #76	; 0x4c
   1efd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efd8:	cmp	r5, #2
   1efdc:	bne	1efcc <__assert_fail@plt+0xd878>
   1efe0:	ldr	r3, [sp, #4]
   1efe4:	mov	r0, r9
   1efe8:	strb	r7, [r3]
   1efec:	add	sp, sp, #76	; 0x4c
   1eff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eff4:	cmp	r7, #0
   1eff8:	beq	1f054 <__assert_fail@plt+0xd900>
   1effc:	ldrb	r4, [r9]
   1f000:	cmp	r4, #0
   1f004:	beq	1f1f4 <__assert_fail@plt+0xdaa0>
   1f008:	bl	1158c <__ctype_b_loc@plt>
   1f00c:	mov	r5, r9
   1f010:	ldr	r2, [r0]
   1f014:	b	1f024 <__assert_fail@plt+0xd8d0>
   1f018:	ldrb	r4, [r5, #1]!
   1f01c:	cmp	r4, #0
   1f020:	beq	1f034 <__assert_fail@plt+0xd8e0>
   1f024:	lsl	r4, r4, #1
   1f028:	ldrh	r3, [r2, r4]
   1f02c:	tst	r3, #8192	; 0x2000
   1f030:	bne	1f018 <__assert_fail@plt+0xd8c4>
   1f034:	mov	r0, r5
   1f038:	bl	115b0 <strlen@plt>
   1f03c:	mov	r1, r5
   1f040:	add	r2, r0, #1
   1f044:	mov	r0, r9
   1f048:	bl	113c4 <memmove@plt>
   1f04c:	cmp	r7, #1
   1f050:	beq	1efcc <__assert_fail@plt+0xd878>
   1f054:	mov	r0, r9
   1f058:	bl	115b0 <strlen@plt>
   1f05c:	sub	r0, r0, #1
   1f060:	adds	r4, r9, r0
   1f064:	bcs	1efcc <__assert_fail@plt+0xd878>
   1f068:	bl	1158c <__ctype_b_loc@plt>
   1f06c:	mov	r1, #0
   1f070:	ldr	r2, [r0]
   1f074:	b	1f084 <__assert_fail@plt+0xd930>
   1f078:	strb	r1, [r4], #-1
   1f07c:	cmp	r9, r4
   1f080:	bhi	1efcc <__assert_fail@plt+0xd878>
   1f084:	ldrb	r3, [r4]
   1f088:	lsl	r3, r3, #1
   1f08c:	ldrh	r3, [r2, r3]
   1f090:	tst	r3, #8192	; 0x2000
   1f094:	bne	1f078 <__assert_fail@plt+0xd924>
   1f098:	mov	r0, r9
   1f09c:	add	sp, sp, #76	; 0x4c
   1f0a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0a4:	mov	r0, r9
   1f0a8:	str	r9, [sp, #32]
   1f0ac:	bl	115b0 <strlen@plt>
   1f0b0:	add	r8, sp, #20
   1f0b4:	mov	sl, #0
   1f0b8:	str	sl, [sp, #20]
   1f0bc:	strb	sl, [sp, #16]
   1f0c0:	str	sl, [r8, #4]
   1f0c4:	strb	sl, [sp, #28]
   1f0c8:	add	r5, r9, r0
   1f0cc:	cmp	r9, r5
   1f0d0:	str	r5, [sp, #12]
   1f0d4:	movcs	r4, r9
   1f0d8:	bcs	1efac <__assert_fail@plt+0xd858>
   1f0dc:	ldr	fp, [pc, #344]	; 1f23c <__assert_fail@plt+0xdae8>
   1f0e0:	mov	r4, r9
   1f0e4:	mov	r6, #1
   1f0e8:	b	1f148 <__assert_fail@plt+0xd9f4>
   1f0ec:	ldrb	r3, [r4]
   1f0f0:	and	r2, r3, #31
   1f0f4:	lsr	r3, r3, #5
   1f0f8:	ldr	r3, [fp, r3, lsl #2]
   1f0fc:	lsr	r3, r3, r2
   1f100:	tst	r3, #1
   1f104:	beq	1f1bc <__assert_fail@plt+0xda68>
   1f108:	str	r6, [sp, #36]	; 0x24
   1f10c:	ldrb	r5, [r4]
   1f110:	strb	r6, [sp, #40]	; 0x28
   1f114:	str	r5, [sp, #44]	; 0x2c
   1f118:	mov	r0, r5
   1f11c:	strb	r6, [sp, #28]
   1f120:	bl	115a4 <iswspace@plt>
   1f124:	cmp	r0, #0
   1f128:	beq	1efac <__assert_fail@plt+0xd858>
   1f12c:	ldr	r3, [sp, #36]	; 0x24
   1f130:	ldr	r5, [sp, #12]
   1f134:	add	r4, r4, r3
   1f138:	cmp	r5, r4
   1f13c:	strb	sl, [sp, #28]
   1f140:	str	r4, [sp, #32]
   1f144:	bls	1efac <__assert_fail@plt+0xd858>
   1f148:	ldrb	r3, [sp, #16]
   1f14c:	cmp	r3, #0
   1f150:	beq	1f0ec <__assert_fail@plt+0xd998>
   1f154:	sub	r2, r5, r4
   1f158:	mov	r1, r4
   1f15c:	mov	r3, r8
   1f160:	add	r0, sp, #44	; 0x2c
   1f164:	bl	207c8 <__assert_fail@plt+0xf074>
   1f168:	cmn	r0, #1
   1f16c:	str	r0, [sp, #36]	; 0x24
   1f170:	beq	1ef90 <__assert_fail@plt+0xd83c>
   1f174:	cmn	r0, #2
   1f178:	ldr	r4, [sp, #32]
   1f17c:	beq	1f1dc <__assert_fail@plt+0xda88>
   1f180:	cmp	r0, #0
   1f184:	bne	1f1d4 <__assert_fail@plt+0xda80>
   1f188:	str	r6, [sp, #36]	; 0x24
   1f18c:	ldrb	r3, [r4]
   1f190:	cmp	r3, #0
   1f194:	bne	1f210 <__assert_fail@plt+0xdabc>
   1f198:	ldr	r5, [sp, #44]	; 0x2c
   1f19c:	cmp	r5, #0
   1f1a0:	bne	1f228 <__assert_fail@plt+0xdad4>
   1f1a4:	mov	r0, r8
   1f1a8:	strb	r6, [sp, #40]	; 0x28
   1f1ac:	bl	1140c <mbsinit@plt>
   1f1b0:	cmp	r0, #0
   1f1b4:	strbne	sl, [sp, #16]
   1f1b8:	b	1f118 <__assert_fail@plt+0xd9c4>
   1f1bc:	mov	r0, r8
   1f1c0:	bl	1140c <mbsinit@plt>
   1f1c4:	cmp	r0, #0
   1f1c8:	beq	1f1fc <__assert_fail@plt+0xdaa8>
   1f1cc:	strb	r6, [sp, #16]
   1f1d0:	b	1f154 <__assert_fail@plt+0xda00>
   1f1d4:	ldr	r5, [sp, #44]	; 0x2c
   1f1d8:	b	1f1a4 <__assert_fail@plt+0xda50>
   1f1dc:	ldr	r3, [sp, #12]
   1f1e0:	mov	r2, #0
   1f1e4:	sub	r3, r3, r4
   1f1e8:	str	r3, [sp, #36]	; 0x24
   1f1ec:	strb	r2, [sp, #40]	; 0x28
   1f1f0:	b	1efa4 <__assert_fail@plt+0xd850>
   1f1f4:	mov	r5, r9
   1f1f8:	b	1f034 <__assert_fail@plt+0xd8e0>
   1f1fc:	ldr	r3, [pc, #60]	; 1f240 <__assert_fail@plt+0xdaec>
   1f200:	mov	r2, #135	; 0x87
   1f204:	ldr	r1, [pc, #56]	; 1f244 <__assert_fail@plt+0xdaf0>
   1f208:	ldr	r0, [pc, #56]	; 1f248 <__assert_fail@plt+0xdaf4>
   1f20c:	bl	11754 <__assert_fail@plt>
   1f210:	ldr	r3, [pc, #40]	; 1f240 <__assert_fail@plt+0xdaec>
   1f214:	mov	r2, #162	; 0xa2
   1f218:	ldr	r1, [pc, #36]	; 1f244 <__assert_fail@plt+0xdaf0>
   1f21c:	ldr	r0, [pc, #40]	; 1f24c <__assert_fail@plt+0xdaf8>
   1f220:	bl	11754 <__assert_fail@plt>
   1f224:	bl	202d8 <__assert_fail@plt+0xeb84>
   1f228:	ldr	r3, [pc, #16]	; 1f240 <__assert_fail@plt+0xdaec>
   1f22c:	mov	r2, #163	; 0xa3
   1f230:	ldr	r1, [pc, #12]	; 1f244 <__assert_fail@plt+0xdaf0>
   1f234:	ldr	r0, [pc, #20]	; 1f250 <__assert_fail@plt+0xdafc>
   1f238:	bl	11754 <__assert_fail@plt>
   1f23c:	muleq	r2, ip, r7
   1f240:	andeq	r6, r2, r0, asr #8
   1f244:	andeq	r6, r2, r4, asr r4
   1f248:	andeq	r6, r2, r8, lsl #6
   1f24c:	andeq	r6, r2, r0, lsr #6
   1f250:	andeq	r6, r2, r8, lsr r3
   1f254:	push	{r4, r5, r6, lr}
   1f258:	sub	sp, sp, #32
   1f25c:	cmp	r1, #0
   1f260:	mov	r4, r0
   1f264:	ldr	r5, [sp, #48]	; 0x30
   1f268:	ldr	r6, [sp, #52]	; 0x34
   1f26c:	beq	1f584 <__assert_fail@plt+0xde30>
   1f270:	stm	sp, {r2, r3}
   1f274:	mov	r3, r1
   1f278:	ldr	r2, [pc, #808]	; 1f5a8 <__assert_fail@plt+0xde54>
   1f27c:	mov	r1, #1
   1f280:	bl	1164c <__fprintf_chk@plt>
   1f284:	mov	r2, #5
   1f288:	ldr	r1, [pc, #796]	; 1f5ac <__assert_fail@plt+0xde58>
   1f28c:	mov	r0, #0
   1f290:	bl	11430 <dcgettext@plt>
   1f294:	ldr	r3, [pc, #788]	; 1f5b0 <__assert_fail@plt+0xde5c>
   1f298:	ldr	r2, [pc, #788]	; 1f5b4 <__assert_fail@plt+0xde60>
   1f29c:	str	r3, [sp]
   1f2a0:	mov	r1, #1
   1f2a4:	mov	r3, r0
   1f2a8:	mov	r0, r4
   1f2ac:	bl	1164c <__fprintf_chk@plt>
   1f2b0:	mov	r1, r4
   1f2b4:	mov	r0, #10
   1f2b8:	bl	11424 <fputc_unlocked@plt>
   1f2bc:	mov	r2, #5
   1f2c0:	ldr	r1, [pc, #752]	; 1f5b8 <__assert_fail@plt+0xde64>
   1f2c4:	mov	r0, #0
   1f2c8:	bl	11430 <dcgettext@plt>
   1f2cc:	mov	r1, #1
   1f2d0:	ldr	r3, [pc, #740]	; 1f5bc <__assert_fail@plt+0xde68>
   1f2d4:	mov	r2, r0
   1f2d8:	mov	r0, r4
   1f2dc:	bl	1164c <__fprintf_chk@plt>
   1f2e0:	mov	r1, r4
   1f2e4:	mov	r0, #10
   1f2e8:	bl	11424 <fputc_unlocked@plt>
   1f2ec:	cmp	r6, #9
   1f2f0:	ldrls	pc, [pc, r6, lsl #2]
   1f2f4:	b	1f59c <__assert_fail@plt+0xde48>
   1f2f8:	andeq	pc, r1, ip, ror r3	; <UNPREDICTABLE>
   1f2fc:	andeq	pc, r1, r4, lsl #7
   1f300:			; <UNDEFINED> instruction: 0x0001f3b0
   1f304:	andeq	pc, r1, r4, ror #7
   1f308:	andeq	pc, r1, r0, lsr #8
   1f30c:	andeq	pc, r1, ip, asr r4	; <UNPREDICTABLE>
   1f310:	muleq	r1, r8, r4
   1f314:	ldrdeq	pc, [r1], -ip
   1f318:	andeq	pc, r1, ip, lsr #10
   1f31c:	andeq	pc, r1, r0, lsr #6
   1f320:	ldr	r1, [pc, #664]	; 1f5c0 <__assert_fail@plt+0xde6c>
   1f324:	mov	r2, #5
   1f328:	mov	r0, #0
   1f32c:	bl	11430 <dcgettext@plt>
   1f330:	ldr	ip, [r5, #32]
   1f334:	ldr	r1, [r5, #28]
   1f338:	ldr	r2, [r5, #24]
   1f33c:	ldr	r3, [r5]
   1f340:	ldr	r6, [r5, #20]
   1f344:	str	ip, [sp, #28]
   1f348:	ldr	lr, [r5, #16]
   1f34c:	str	r1, [sp, #24]
   1f350:	ldr	ip, [r5, #12]
   1f354:	str	r2, [sp, #20]
   1f358:	ldr	r1, [r5, #8]
   1f35c:	ldr	r2, [r5, #4]
   1f360:	str	r6, [sp, #16]
   1f364:	stmib	sp, {r1, ip, lr}
   1f368:	mov	r1, #1
   1f36c:	str	r2, [sp]
   1f370:	mov	r2, r0
   1f374:	mov	r0, r4
   1f378:	bl	1164c <__fprintf_chk@plt>
   1f37c:	add	sp, sp, #32
   1f380:	pop	{r4, r5, r6, pc}
   1f384:	mov	r2, #5
   1f388:	ldr	r1, [pc, #564]	; 1f5c4 <__assert_fail@plt+0xde70>
   1f38c:	mov	r0, #0
   1f390:	bl	11430 <dcgettext@plt>
   1f394:	ldr	r3, [r5]
   1f398:	mov	r1, #1
   1f39c:	mov	r2, r0
   1f3a0:	mov	r0, r4
   1f3a4:	add	sp, sp, #32
   1f3a8:	pop	{r4, r5, r6, lr}
   1f3ac:	b	1164c <__fprintf_chk@plt>
   1f3b0:	mov	r2, #5
   1f3b4:	ldr	r1, [pc, #524]	; 1f5c8 <__assert_fail@plt+0xde74>
   1f3b8:	mov	r0, #0
   1f3bc:	bl	11430 <dcgettext@plt>
   1f3c0:	ldr	r2, [r5, #4]
   1f3c4:	ldr	r3, [r5]
   1f3c8:	mov	r1, #1
   1f3cc:	str	r2, [sp, #48]	; 0x30
   1f3d0:	mov	r2, r0
   1f3d4:	mov	r0, r4
   1f3d8:	add	sp, sp, #32
   1f3dc:	pop	{r4, r5, r6, lr}
   1f3e0:	b	1164c <__fprintf_chk@plt>
   1f3e4:	mov	r2, #5
   1f3e8:	ldr	r1, [pc, #476]	; 1f5cc <__assert_fail@plt+0xde78>
   1f3ec:	mov	r0, #0
   1f3f0:	bl	11430 <dcgettext@plt>
   1f3f4:	ldr	r1, [r5, #8]
   1f3f8:	ldr	r2, [r5, #4]
   1f3fc:	ldr	r3, [r5]
   1f400:	str	r1, [sp, #52]	; 0x34
   1f404:	str	r2, [sp, #48]	; 0x30
   1f408:	mov	r1, #1
   1f40c:	mov	r2, r0
   1f410:	mov	r0, r4
   1f414:	add	sp, sp, #32
   1f418:	pop	{r4, r5, r6, lr}
   1f41c:	b	1164c <__fprintf_chk@plt>
   1f420:	mov	r2, #5
   1f424:	ldr	r1, [pc, #420]	; 1f5d0 <__assert_fail@plt+0xde7c>
   1f428:	mov	r0, #0
   1f42c:	bl	11430 <dcgettext@plt>
   1f430:	ldr	r1, [r5, #8]
   1f434:	ldr	ip, [r5, #12]
   1f438:	ldr	r2, [r5, #4]
   1f43c:	ldr	r3, [r5]
   1f440:	stmib	sp, {r1, ip}
   1f444:	str	r2, [sp]
   1f448:	mov	r1, #1
   1f44c:	mov	r2, r0
   1f450:	mov	r0, r4
   1f454:	bl	1164c <__fprintf_chk@plt>
   1f458:	b	1f37c <__assert_fail@plt+0xdc28>
   1f45c:	mov	r2, #5
   1f460:	ldr	r1, [pc, #364]	; 1f5d4 <__assert_fail@plt+0xde80>
   1f464:	mov	r0, #0
   1f468:	bl	11430 <dcgettext@plt>
   1f46c:	add	r1, r5, #8
   1f470:	ldr	r2, [r5, #4]
   1f474:	ldm	r1, {r1, ip, lr}
   1f478:	ldr	r3, [r5]
   1f47c:	str	r2, [sp]
   1f480:	stmib	sp, {r1, ip, lr}
   1f484:	mov	r1, #1
   1f488:	mov	r2, r0
   1f48c:	mov	r0, r4
   1f490:	bl	1164c <__fprintf_chk@plt>
   1f494:	b	1f37c <__assert_fail@plt+0xdc28>
   1f498:	mov	r2, #5
   1f49c:	ldr	r1, [pc, #308]	; 1f5d8 <__assert_fail@plt+0xde84>
   1f4a0:	mov	r0, #0
   1f4a4:	bl	11430 <dcgettext@plt>
   1f4a8:	add	r1, r5, #8
   1f4ac:	ldr	r2, [r5, #4]
   1f4b0:	ldm	r1, {r1, ip, lr}
   1f4b4:	ldr	r6, [r5, #20]
   1f4b8:	ldr	r3, [r5]
   1f4bc:	stmib	sp, {r1, ip, lr}
   1f4c0:	mov	r1, #1
   1f4c4:	str	r2, [sp]
   1f4c8:	str	r6, [sp, #16]
   1f4cc:	mov	r2, r0
   1f4d0:	mov	r0, r4
   1f4d4:	bl	1164c <__fprintf_chk@plt>
   1f4d8:	b	1f37c <__assert_fail@plt+0xdc28>
   1f4dc:	mov	r2, #5
   1f4e0:	ldr	r1, [pc, #244]	; 1f5dc <__assert_fail@plt+0xde88>
   1f4e4:	mov	r0, #0
   1f4e8:	bl	11430 <dcgettext@plt>
   1f4ec:	ldr	r2, [r5, #24]
   1f4f0:	ldr	r3, [r5]
   1f4f4:	ldr	r6, [r5, #20]
   1f4f8:	ldr	lr, [r5, #16]
   1f4fc:	ldr	ip, [r5, #12]
   1f500:	str	r2, [sp, #20]
   1f504:	ldr	r1, [r5, #8]
   1f508:	ldr	r2, [r5, #4]
   1f50c:	str	r6, [sp, #16]
   1f510:	stmib	sp, {r1, ip, lr}
   1f514:	mov	r1, #1
   1f518:	str	r2, [sp]
   1f51c:	mov	r2, r0
   1f520:	mov	r0, r4
   1f524:	bl	1164c <__fprintf_chk@plt>
   1f528:	b	1f37c <__assert_fail@plt+0xdc28>
   1f52c:	mov	r2, #5
   1f530:	ldr	r1, [pc, #168]	; 1f5e0 <__assert_fail@plt+0xde8c>
   1f534:	mov	r0, #0
   1f538:	bl	11430 <dcgettext@plt>
   1f53c:	ldr	r1, [r5, #28]
   1f540:	ldr	r2, [r5, #24]
   1f544:	ldr	r3, [r5]
   1f548:	ldr	r6, [r5, #20]
   1f54c:	ldr	lr, [r5, #16]
   1f550:	str	r1, [sp, #24]
   1f554:	ldr	ip, [r5, #12]
   1f558:	str	r2, [sp, #20]
   1f55c:	ldr	r1, [r5, #8]
   1f560:	ldr	r2, [r5, #4]
   1f564:	str	r6, [sp, #16]
   1f568:	stmib	sp, {r1, ip, lr}
   1f56c:	mov	r1, #1
   1f570:	str	r2, [sp]
   1f574:	mov	r2, r0
   1f578:	mov	r0, r4
   1f57c:	bl	1164c <__fprintf_chk@plt>
   1f580:	b	1f37c <__assert_fail@plt+0xdc28>
   1f584:	str	r3, [sp]
   1f588:	mov	r1, #1
   1f58c:	mov	r3, r2
   1f590:	ldr	r2, [pc, #76]	; 1f5e4 <__assert_fail@plt+0xde90>
   1f594:	bl	1164c <__fprintf_chk@plt>
   1f598:	b	1f284 <__assert_fail@plt+0xdb30>
   1f59c:	mov	r2, #5
   1f5a0:	ldr	r1, [pc, #64]	; 1f5e8 <__assert_fail@plt+0xde94>
   1f5a4:	b	1f328 <__assert_fail@plt+0xdbd4>
   1f5a8:	andeq	r6, r2, r4, ror #8
   1f5ac:	andeq	r6, r2, r8, ror r4
   1f5b0:	andeq	r0, r0, r6, ror #15
   1f5b4:	andeq	r6, r2, r0, asr r7
   1f5b8:	andeq	r6, r2, ip, ror r4
   1f5bc:	andeq	r6, r2, r8, lsr #10
   1f5c0:	andeq	r6, r2, r8, asr r6
   1f5c4:	andeq	r6, r2, ip, asr #10
   1f5c8:	andeq	r6, r2, ip, asr r5
   1f5cc:	andeq	r6, r2, r4, ror r5
   1f5d0:	muleq	r2, r0, r5
   1f5d4:			; <UNDEFINED> instruction: 0x000265b0
   1f5d8:	ldrdeq	r6, [r2], -r4
   1f5dc:	strdeq	r6, [r2], -ip
   1f5e0:	andeq	r6, r2, r8, lsr #12
   1f5e4:	andeq	r6, r2, r0, ror r4
   1f5e8:	andeq	r6, r2, ip, lsl #13
   1f5ec:	push	{r4, r5, lr}
   1f5f0:	sub	sp, sp, #12
   1f5f4:	ldr	r5, [sp, #24]
   1f5f8:	ldr	ip, [r5]
   1f5fc:	cmp	ip, #0
   1f600:	beq	1f61c <__assert_fail@plt+0xdec8>
   1f604:	mov	lr, r5
   1f608:	mov	ip, #0
   1f60c:	ldr	r4, [lr, #4]!
   1f610:	add	ip, ip, #1
   1f614:	cmp	r4, #0
   1f618:	bne	1f60c <__assert_fail@plt+0xdeb8>
   1f61c:	stm	sp, {r5, ip}
   1f620:	bl	1f254 <__assert_fail@plt+0xdb00>
   1f624:	add	sp, sp, #12
   1f628:	pop	{r4, r5, pc}
   1f62c:	push	{r4, r5, lr}
   1f630:	sub	sp, sp, #76	; 0x4c
   1f634:	mov	r5, r0
   1f638:	ldr	ip, [sp, #88]	; 0x58
   1f63c:	ldr	r0, [ip]
   1f640:	cmp	r0, #0
   1f644:	str	r0, [sp, #32]
   1f648:	beq	1fa1c <__assert_fail@plt+0xe2c8>
   1f64c:	ldr	r0, [ip, #4]
   1f650:	cmp	r0, #0
   1f654:	str	r0, [sp, #36]	; 0x24
   1f658:	beq	1fa24 <__assert_fail@plt+0xe2d0>
   1f65c:	ldr	r0, [ip, #8]
   1f660:	cmp	r0, #0
   1f664:	str	r0, [sp, #40]	; 0x28
   1f668:	beq	1fa2c <__assert_fail@plt+0xe2d8>
   1f66c:	ldr	r0, [ip, #12]
   1f670:	cmp	r0, #0
   1f674:	str	r0, [sp, #44]	; 0x2c
   1f678:	beq	1fa34 <__assert_fail@plt+0xe2e0>
   1f67c:	ldr	r0, [ip, #16]
   1f680:	cmp	r0, #0
   1f684:	str	r0, [sp, #48]	; 0x30
   1f688:	beq	1fa3c <__assert_fail@plt+0xe2e8>
   1f68c:	ldr	r0, [ip, #20]
   1f690:	cmp	r0, #0
   1f694:	str	r0, [sp, #52]	; 0x34
   1f698:	beq	1fa44 <__assert_fail@plt+0xe2f0>
   1f69c:	ldr	r0, [ip, #24]
   1f6a0:	cmp	r0, #0
   1f6a4:	str	r0, [sp, #56]	; 0x38
   1f6a8:	beq	1fa4c <__assert_fail@plt+0xe2f8>
   1f6ac:	ldr	r0, [ip, #28]
   1f6b0:	cmp	r0, #0
   1f6b4:	str	r0, [sp, #60]	; 0x3c
   1f6b8:	beq	1fa54 <__assert_fail@plt+0xe300>
   1f6bc:	ldr	r0, [ip, #32]
   1f6c0:	cmp	r0, #0
   1f6c4:	str	r0, [sp, #64]	; 0x40
   1f6c8:	beq	1fa5c <__assert_fail@plt+0xe308>
   1f6cc:	ldr	r0, [ip, #36]	; 0x24
   1f6d0:	cmp	r0, #0
   1f6d4:	movne	r4, #10
   1f6d8:	moveq	r4, #9
   1f6dc:	cmp	r1, #0
   1f6e0:	beq	1f9f4 <__assert_fail@plt+0xe2a0>
   1f6e4:	stm	sp, {r2, r3}
   1f6e8:	mov	r0, r5
   1f6ec:	mov	r3, r1
   1f6f0:	ldr	r2, [pc, #876]	; 1fa64 <__assert_fail@plt+0xe310>
   1f6f4:	mov	r1, #1
   1f6f8:	bl	1164c <__fprintf_chk@plt>
   1f6fc:	mov	r2, #5
   1f700:	ldr	r1, [pc, #864]	; 1fa68 <__assert_fail@plt+0xe314>
   1f704:	mov	r0, #0
   1f708:	bl	11430 <dcgettext@plt>
   1f70c:	ldr	r3, [pc, #856]	; 1fa6c <__assert_fail@plt+0xe318>
   1f710:	ldr	r2, [pc, #856]	; 1fa70 <__assert_fail@plt+0xe31c>
   1f714:	str	r3, [sp]
   1f718:	mov	r1, #1
   1f71c:	mov	r3, r0
   1f720:	mov	r0, r5
   1f724:	bl	1164c <__fprintf_chk@plt>
   1f728:	mov	r1, r5
   1f72c:	mov	r0, #10
   1f730:	bl	11424 <fputc_unlocked@plt>
   1f734:	mov	r2, #5
   1f738:	ldr	r1, [pc, #820]	; 1fa74 <__assert_fail@plt+0xe320>
   1f73c:	mov	r0, #0
   1f740:	bl	11430 <dcgettext@plt>
   1f744:	mov	r1, #1
   1f748:	ldr	r3, [pc, #808]	; 1fa78 <__assert_fail@plt+0xe324>
   1f74c:	mov	r2, r0
   1f750:	mov	r0, r5
   1f754:	bl	1164c <__fprintf_chk@plt>
   1f758:	mov	r1, r5
   1f75c:	mov	r0, #10
   1f760:	bl	11424 <fputc_unlocked@plt>
   1f764:	cmp	r4, #9
   1f768:	ldrls	pc, [pc, r4, lsl #2]
   1f76c:	b	1fa10 <__assert_fail@plt+0xe2bc>
   1f770:	strdeq	pc, [r1], -r4
   1f774:	strdeq	pc, [r1], -ip
   1f778:	andeq	pc, r1, r8, lsr #16
   1f77c:	andeq	pc, r1, ip, asr r8	; <UNPREDICTABLE>
   1f780:	muleq	r1, r4, r8
   1f784:	ldrdeq	pc, [r1], -r0
   1f788:	andeq	pc, r1, ip, lsl #18
   1f78c:	andeq	pc, r1, r0, asr r9	; <UNPREDICTABLE>
   1f790:	muleq	r1, ip, r9
   1f794:	muleq	r1, r8, r7
   1f798:	ldr	r1, [pc, #732]	; 1fa7c <__assert_fail@plt+0xe328>
   1f79c:	mov	r2, #5
   1f7a0:	mov	r0, #0
   1f7a4:	bl	11430 <dcgettext@plt>
   1f7a8:	ldr	ip, [sp, #64]	; 0x40
   1f7ac:	ldr	r1, [sp, #60]	; 0x3c
   1f7b0:	ldr	r2, [sp, #56]	; 0x38
   1f7b4:	ldr	lr, [sp, #48]	; 0x30
   1f7b8:	str	ip, [sp, #28]
   1f7bc:	str	r1, [sp, #24]
   1f7c0:	ldr	ip, [sp, #44]	; 0x2c
   1f7c4:	ldr	r1, [sp, #40]	; 0x28
   1f7c8:	ldr	r4, [sp, #52]	; 0x34
   1f7cc:	str	r2, [sp, #20]
   1f7d0:	ldr	r2, [sp, #36]	; 0x24
   1f7d4:	stmib	sp, {r1, ip, lr}
   1f7d8:	mov	r1, #1
   1f7dc:	str	r2, [sp]
   1f7e0:	ldr	r3, [sp, #32]
   1f7e4:	str	r4, [sp, #16]
   1f7e8:	mov	r2, r0
   1f7ec:	mov	r0, r5
   1f7f0:	bl	1164c <__fprintf_chk@plt>
   1f7f4:	add	sp, sp, #76	; 0x4c
   1f7f8:	pop	{r4, r5, pc}
   1f7fc:	mov	r2, #5
   1f800:	ldr	r1, [pc, #632]	; 1fa80 <__assert_fail@plt+0xe32c>
   1f804:	mov	r0, #0
   1f808:	bl	11430 <dcgettext@plt>
   1f80c:	ldr	r3, [sp, #32]
   1f810:	mov	r1, #1
   1f814:	mov	r2, r0
   1f818:	mov	r0, r5
   1f81c:	add	sp, sp, #76	; 0x4c
   1f820:	pop	{r4, r5, lr}
   1f824:	b	1164c <__fprintf_chk@plt>
   1f828:	mov	r2, #5
   1f82c:	ldr	r1, [pc, #592]	; 1fa84 <__assert_fail@plt+0xe330>
   1f830:	mov	r0, #0
   1f834:	bl	11430 <dcgettext@plt>
   1f838:	ldr	r2, [sp, #36]	; 0x24
   1f83c:	ldr	r3, [sp, #32]
   1f840:	str	r2, [sp, #88]	; 0x58
   1f844:	mov	r1, #1
   1f848:	mov	r2, r0
   1f84c:	mov	r0, r5
   1f850:	add	sp, sp, #76	; 0x4c
   1f854:	pop	{r4, r5, lr}
   1f858:	b	1164c <__fprintf_chk@plt>
   1f85c:	mov	r2, #5
   1f860:	ldr	r1, [pc, #544]	; 1fa88 <__assert_fail@plt+0xe334>
   1f864:	mov	r0, #0
   1f868:	bl	11430 <dcgettext@plt>
   1f86c:	ldr	r1, [sp, #40]	; 0x28
   1f870:	ldr	r2, [sp, #36]	; 0x24
   1f874:	str	r1, [sp, #4]
   1f878:	str	r2, [sp]
   1f87c:	ldr	r3, [sp, #32]
   1f880:	mov	r1, #1
   1f884:	mov	r2, r0
   1f888:	mov	r0, r5
   1f88c:	bl	1164c <__fprintf_chk@plt>
   1f890:	b	1f7f4 <__assert_fail@plt+0xe0a0>
   1f894:	mov	r2, #5
   1f898:	ldr	r1, [pc, #492]	; 1fa8c <__assert_fail@plt+0xe338>
   1f89c:	mov	r0, #0
   1f8a0:	bl	11430 <dcgettext@plt>
   1f8a4:	ldr	r1, [sp, #40]	; 0x28
   1f8a8:	ldr	ip, [sp, #44]	; 0x2c
   1f8ac:	ldr	r2, [sp, #36]	; 0x24
   1f8b0:	ldr	r3, [sp, #32]
   1f8b4:	stmib	sp, {r1, ip}
   1f8b8:	str	r2, [sp]
   1f8bc:	mov	r1, #1
   1f8c0:	mov	r2, r0
   1f8c4:	mov	r0, r5
   1f8c8:	bl	1164c <__fprintf_chk@plt>
   1f8cc:	b	1f7f4 <__assert_fail@plt+0xe0a0>
   1f8d0:	mov	r2, #5
   1f8d4:	ldr	r1, [pc, #436]	; 1fa90 <__assert_fail@plt+0xe33c>
   1f8d8:	mov	r0, #0
   1f8dc:	bl	11430 <dcgettext@plt>
   1f8e0:	add	r1, sp, #40	; 0x28
   1f8e4:	ldr	r2, [sp, #36]	; 0x24
   1f8e8:	ldm	r1, {r1, ip, lr}
   1f8ec:	ldr	r3, [sp, #32]
   1f8f0:	str	r2, [sp]
   1f8f4:	stmib	sp, {r1, ip, lr}
   1f8f8:	mov	r1, #1
   1f8fc:	mov	r2, r0
   1f900:	mov	r0, r5
   1f904:	bl	1164c <__fprintf_chk@plt>
   1f908:	b	1f7f4 <__assert_fail@plt+0xe0a0>
   1f90c:	mov	r2, #5
   1f910:	ldr	r1, [pc, #380]	; 1fa94 <__assert_fail@plt+0xe340>
   1f914:	mov	r0, #0
   1f918:	bl	11430 <dcgettext@plt>
   1f91c:	add	r1, sp, #40	; 0x28
   1f920:	ldr	r2, [sp, #36]	; 0x24
   1f924:	ldm	r1, {r1, ip, lr}
   1f928:	ldr	r4, [sp, #52]	; 0x34
   1f92c:	str	r2, [sp]
   1f930:	stmib	sp, {r1, ip, lr}
   1f934:	mov	r1, #1
   1f938:	ldr	r3, [sp, #32]
   1f93c:	str	r4, [sp, #16]
   1f940:	mov	r2, r0
   1f944:	mov	r0, r5
   1f948:	bl	1164c <__fprintf_chk@plt>
   1f94c:	b	1f7f4 <__assert_fail@plt+0xe0a0>
   1f950:	mov	r2, #5
   1f954:	ldr	r1, [pc, #316]	; 1fa98 <__assert_fail@plt+0xe344>
   1f958:	mov	r0, #0
   1f95c:	bl	11430 <dcgettext@plt>
   1f960:	add	r1, sp, #40	; 0x28
   1f964:	ldr	r2, [sp, #56]	; 0x38
   1f968:	ldm	r1, {r1, ip, lr}
   1f96c:	ldr	r4, [sp, #52]	; 0x34
   1f970:	str	r2, [sp, #20]
   1f974:	ldr	r2, [sp, #36]	; 0x24
   1f978:	stmib	sp, {r1, ip, lr}
   1f97c:	mov	r1, #1
   1f980:	str	r2, [sp]
   1f984:	ldr	r3, [sp, #32]
   1f988:	str	r4, [sp, #16]
   1f98c:	mov	r2, r0
   1f990:	mov	r0, r5
   1f994:	bl	1164c <__fprintf_chk@plt>
   1f998:	b	1f7f4 <__assert_fail@plt+0xe0a0>
   1f99c:	mov	r2, #5
   1f9a0:	ldr	r1, [pc, #244]	; 1fa9c <__assert_fail@plt+0xe348>
   1f9a4:	mov	r0, #0
   1f9a8:	bl	11430 <dcgettext@plt>
   1f9ac:	ldr	r1, [sp, #60]	; 0x3c
   1f9b0:	ldr	r2, [sp, #56]	; 0x38
   1f9b4:	ldr	lr, [sp, #48]	; 0x30
   1f9b8:	ldr	ip, [sp, #44]	; 0x2c
   1f9bc:	str	r1, [sp, #24]
   1f9c0:	ldr	r1, [sp, #40]	; 0x28
   1f9c4:	ldr	r4, [sp, #52]	; 0x34
   1f9c8:	str	r2, [sp, #20]
   1f9cc:	ldr	r2, [sp, #36]	; 0x24
   1f9d0:	stmib	sp, {r1, ip, lr}
   1f9d4:	mov	r1, #1
   1f9d8:	str	r2, [sp]
   1f9dc:	ldr	r3, [sp, #32]
   1f9e0:	str	r4, [sp, #16]
   1f9e4:	mov	r2, r0
   1f9e8:	mov	r0, r5
   1f9ec:	bl	1164c <__fprintf_chk@plt>
   1f9f0:	b	1f7f4 <__assert_fail@plt+0xe0a0>
   1f9f4:	str	r3, [sp]
   1f9f8:	mov	r1, #1
   1f9fc:	mov	r3, r2
   1fa00:	mov	r0, r5
   1fa04:	ldr	r2, [pc, #148]	; 1faa0 <__assert_fail@plt+0xe34c>
   1fa08:	bl	1164c <__fprintf_chk@plt>
   1fa0c:	b	1f6fc <__assert_fail@plt+0xdfa8>
   1fa10:	mov	r2, #5
   1fa14:	ldr	r1, [pc, #136]	; 1faa4 <__assert_fail@plt+0xe350>
   1fa18:	b	1f7a0 <__assert_fail@plt+0xe04c>
   1fa1c:	mov	r4, r0
   1fa20:	b	1f6dc <__assert_fail@plt+0xdf88>
   1fa24:	mov	r4, #1
   1fa28:	b	1f6dc <__assert_fail@plt+0xdf88>
   1fa2c:	mov	r4, #2
   1fa30:	b	1f6dc <__assert_fail@plt+0xdf88>
   1fa34:	mov	r4, #3
   1fa38:	b	1f6dc <__assert_fail@plt+0xdf88>
   1fa3c:	mov	r4, #4
   1fa40:	b	1f6dc <__assert_fail@plt+0xdf88>
   1fa44:	mov	r4, #5
   1fa48:	b	1f6dc <__assert_fail@plt+0xdf88>
   1fa4c:	mov	r4, #6
   1fa50:	b	1f6dc <__assert_fail@plt+0xdf88>
   1fa54:	mov	r4, #7
   1fa58:	b	1f6dc <__assert_fail@plt+0xdf88>
   1fa5c:	mov	r4, #8
   1fa60:	b	1f6dc <__assert_fail@plt+0xdf88>
   1fa64:	andeq	r6, r2, r4, ror #8
   1fa68:	andeq	r6, r2, r8, ror r4
   1fa6c:	andeq	r0, r0, r6, ror #15
   1fa70:	andeq	r6, r2, r0, asr r7
   1fa74:	andeq	r6, r2, ip, ror r4
   1fa78:	andeq	r6, r2, r8, lsr #10
   1fa7c:	andeq	r6, r2, r8, asr r6
   1fa80:	andeq	r6, r2, ip, asr #10
   1fa84:	andeq	r6, r2, ip, asr r5
   1fa88:	andeq	r6, r2, r4, ror r5
   1fa8c:	muleq	r2, r0, r5
   1fa90:			; <UNDEFINED> instruction: 0x000265b0
   1fa94:	ldrdeq	r6, [r2], -r4
   1fa98:	strdeq	r6, [r2], -ip
   1fa9c:	andeq	r6, r2, r8, lsr #12
   1faa0:	andeq	r6, r2, r0, ror r4
   1faa4:	andeq	r6, r2, ip, lsl #13
   1faa8:	push	{r3}		; (str r3, [sp, #-4]!)
   1faac:	push	{lr}		; (str lr, [sp, #-4]!)
   1fab0:	sub	sp, sp, #56	; 0x38
   1fab4:	add	r3, sp, #64	; 0x40
   1fab8:	ldr	ip, [sp, #64]	; 0x40
   1fabc:	str	r3, [sp, #12]
   1fac0:	cmp	ip, #0
   1fac4:	str	ip, [sp, #16]
   1fac8:	beq	1fb60 <__assert_fail@plt+0xe40c>
   1facc:	ldr	ip, [sp, #68]	; 0x44
   1fad0:	cmp	ip, #0
   1fad4:	str	ip, [sp, #20]
   1fad8:	beq	1fb80 <__assert_fail@plt+0xe42c>
   1fadc:	ldr	ip, [sp, #72]	; 0x48
   1fae0:	cmp	ip, #0
   1fae4:	str	ip, [sp, #24]
   1fae8:	beq	1fb88 <__assert_fail@plt+0xe434>
   1faec:	ldr	ip, [sp, #76]	; 0x4c
   1faf0:	cmp	ip, #0
   1faf4:	str	ip, [sp, #28]
   1faf8:	beq	1fb90 <__assert_fail@plt+0xe43c>
   1fafc:	ldr	ip, [sp, #80]	; 0x50
   1fb00:	cmp	ip, #0
   1fb04:	str	ip, [sp, #32]
   1fb08:	beq	1fb98 <__assert_fail@plt+0xe444>
   1fb0c:	ldr	ip, [sp, #84]	; 0x54
   1fb10:	cmp	ip, #0
   1fb14:	str	ip, [sp, #36]	; 0x24
   1fb18:	beq	1fba0 <__assert_fail@plt+0xe44c>
   1fb1c:	ldr	ip, [sp, #88]	; 0x58
   1fb20:	cmp	ip, #0
   1fb24:	str	ip, [sp, #40]	; 0x28
   1fb28:	beq	1fba8 <__assert_fail@plt+0xe454>
   1fb2c:	ldr	ip, [sp, #92]	; 0x5c
   1fb30:	cmp	ip, #0
   1fb34:	str	ip, [sp, #44]	; 0x2c
   1fb38:	beq	1fbb0 <__assert_fail@plt+0xe45c>
   1fb3c:	ldr	ip, [sp, #96]	; 0x60
   1fb40:	cmp	ip, #0
   1fb44:	str	ip, [sp, #48]	; 0x30
   1fb48:	beq	1fbb8 <__assert_fail@plt+0xe464>
   1fb4c:	ldr	ip, [sp, #100]	; 0x64
   1fb50:	cmp	ip, #0
   1fb54:	str	ip, [sp, #52]	; 0x34
   1fb58:	movne	ip, #10
   1fb5c:	moveq	ip, #9
   1fb60:	add	r3, sp, #16
   1fb64:	stm	sp, {r3, ip}
   1fb68:	ldr	r3, [sp, #60]	; 0x3c
   1fb6c:	bl	1f254 <__assert_fail@plt+0xdb00>
   1fb70:	add	sp, sp, #56	; 0x38
   1fb74:	pop	{lr}		; (ldr lr, [sp], #4)
   1fb78:	add	sp, sp, #4
   1fb7c:	bx	lr
   1fb80:	mov	ip, #1
   1fb84:	b	1fb60 <__assert_fail@plt+0xe40c>
   1fb88:	mov	ip, #2
   1fb8c:	b	1fb60 <__assert_fail@plt+0xe40c>
   1fb90:	mov	ip, #3
   1fb94:	b	1fb60 <__assert_fail@plt+0xe40c>
   1fb98:	mov	ip, #4
   1fb9c:	b	1fb60 <__assert_fail@plt+0xe40c>
   1fba0:	mov	ip, #5
   1fba4:	b	1fb60 <__assert_fail@plt+0xe40c>
   1fba8:	mov	ip, #6
   1fbac:	b	1fb60 <__assert_fail@plt+0xe40c>
   1fbb0:	mov	ip, #7
   1fbb4:	b	1fb60 <__assert_fail@plt+0xe40c>
   1fbb8:	mov	ip, #8
   1fbbc:	b	1fb60 <__assert_fail@plt+0xe40c>
   1fbc0:	ldr	r3, [pc, #116]	; 1fc3c <__assert_fail@plt+0xe4e8>
   1fbc4:	push	{r4, lr}
   1fbc8:	mov	r0, #10
   1fbcc:	ldr	r1, [r3]
   1fbd0:	bl	11424 <fputc_unlocked@plt>
   1fbd4:	mov	r2, #5
   1fbd8:	ldr	r1, [pc, #96]	; 1fc40 <__assert_fail@plt+0xe4ec>
   1fbdc:	mov	r0, #0
   1fbe0:	bl	11430 <dcgettext@plt>
   1fbe4:	ldr	r2, [pc, #88]	; 1fc44 <__assert_fail@plt+0xe4f0>
   1fbe8:	mov	r1, r0
   1fbec:	mov	r0, #1
   1fbf0:	bl	11628 <__printf_chk@plt>
   1fbf4:	mov	r2, #5
   1fbf8:	ldr	r1, [pc, #72]	; 1fc48 <__assert_fail@plt+0xe4f4>
   1fbfc:	mov	r0, #0
   1fc00:	bl	11430 <dcgettext@plt>
   1fc04:	ldr	r3, [pc, #64]	; 1fc4c <__assert_fail@plt+0xe4f8>
   1fc08:	ldr	r2, [pc, #64]	; 1fc50 <__assert_fail@plt+0xe4fc>
   1fc0c:	mov	r1, r0
   1fc10:	mov	r0, #1
   1fc14:	bl	11628 <__printf_chk@plt>
   1fc18:	mov	r2, #5
   1fc1c:	ldr	r1, [pc, #48]	; 1fc54 <__assert_fail@plt+0xe500>
   1fc20:	mov	r0, #0
   1fc24:	bl	11430 <dcgettext@plt>
   1fc28:	ldr	r2, [pc, #40]	; 1fc58 <__assert_fail@plt+0xe504>
   1fc2c:	pop	{r4, lr}
   1fc30:	mov	r1, r0
   1fc34:	mov	r0, #1
   1fc38:	b	11628 <__printf_chk@plt>
   1fc3c:	andeq	r7, r3, r4, ror #3
   1fc40:	andeq	r6, r2, r8, asr #13
   1fc44:	ldrdeq	r6, [r2], -ip
   1fc48:	strdeq	r6, [r2], -r4
   1fc4c:	andeq	r6, r2, r0, asr #1
   1fc50:	andeq	r6, r2, r8, ror #1
   1fc54:	andeq	r6, r2, r8, lsl #14
   1fc58:	andeq	r6, r2, r0, lsr r7
   1fc5c:	push	{r4, r5, r6, lr}
   1fc60:	mov	r6, r0
   1fc64:	mov	r5, r1
   1fc68:	mov	r4, r2
   1fc6c:	bl	21dec <__assert_fail@plt+0x10698>
   1fc70:	cmp	r0, #0
   1fc74:	popne	{r4, r5, r6, pc}
   1fc78:	cmp	r6, #0
   1fc7c:	beq	1fc8c <__assert_fail@plt+0xe538>
   1fc80:	cmp	r5, #0
   1fc84:	cmpne	r4, #0
   1fc88:	popeq	{r4, r5, r6, pc}
   1fc8c:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fc90:	push	{r4, lr}
   1fc94:	bl	203f4 <__assert_fail@plt+0xeca0>
   1fc98:	cmp	r0, #0
   1fc9c:	popne	{r4, pc}
   1fca0:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fca4:	push	{r4, lr}
   1fca8:	bl	203f4 <__assert_fail@plt+0xeca0>
   1fcac:	cmp	r0, #0
   1fcb0:	popne	{r4, pc}
   1fcb4:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fcb8:	push	{r4, lr}
   1fcbc:	bl	203f4 <__assert_fail@plt+0xeca0>
   1fcc0:	cmp	r0, #0
   1fcc4:	popne	{r4, pc}
   1fcc8:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fccc:	push	{r4, r5, r6, lr}
   1fcd0:	mov	r5, r0
   1fcd4:	mov	r4, r1
   1fcd8:	bl	20420 <__assert_fail@plt+0xeccc>
   1fcdc:	cmp	r0, #0
   1fce0:	popne	{r4, r5, r6, pc}
   1fce4:	adds	r4, r4, #0
   1fce8:	movne	r4, #1
   1fcec:	cmp	r5, #0
   1fcf0:	orreq	r4, r4, #1
   1fcf4:	cmp	r4, #0
   1fcf8:	popeq	{r4, r5, r6, pc}
   1fcfc:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fd00:	push	{r4, lr}
   1fd04:	cmp	r1, #0
   1fd08:	orreq	r1, r1, #1
   1fd0c:	bl	20420 <__assert_fail@plt+0xeccc>
   1fd10:	cmp	r0, #0
   1fd14:	popne	{r4, pc}
   1fd18:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fd1c:	push	{r4, r5, r6, lr}
   1fd20:	mov	r6, r0
   1fd24:	mov	r5, r1
   1fd28:	mov	r4, r2
   1fd2c:	bl	21dec <__assert_fail@plt+0x10698>
   1fd30:	cmp	r0, #0
   1fd34:	popne	{r4, r5, r6, pc}
   1fd38:	cmp	r6, #0
   1fd3c:	beq	1fd4c <__assert_fail@plt+0xe5f8>
   1fd40:	cmp	r5, #0
   1fd44:	cmpne	r4, #0
   1fd48:	popeq	{r4, r5, r6, pc}
   1fd4c:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fd50:	cmp	r2, #0
   1fd54:	cmpne	r1, #0
   1fd58:	moveq	r2, #1
   1fd5c:	moveq	r1, r2
   1fd60:	push	{r4, lr}
   1fd64:	bl	21dec <__assert_fail@plt+0x10698>
   1fd68:	cmp	r0, #0
   1fd6c:	popne	{r4, pc}
   1fd70:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fd74:	push	{r4, lr}
   1fd78:	mov	r2, r1
   1fd7c:	mov	r1, r0
   1fd80:	mov	r0, #0
   1fd84:	bl	21dec <__assert_fail@plt+0x10698>
   1fd88:	cmp	r0, #0
   1fd8c:	popne	{r4, pc}
   1fd90:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fd94:	cmp	r1, #0
   1fd98:	cmpne	r0, #0
   1fd9c:	moveq	r2, #1
   1fda0:	movne	r2, r1
   1fda4:	moveq	r1, r2
   1fda8:	movne	r1, r0
   1fdac:	push	{r4, lr}
   1fdb0:	mov	r0, #0
   1fdb4:	bl	21dec <__assert_fail@plt+0x10698>
   1fdb8:	cmp	r0, #0
   1fdbc:	popne	{r4, pc}
   1fdc0:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fdc4:	cmp	r0, #0
   1fdc8:	push	{r4, r5, r6, lr}
   1fdcc:	mov	r5, r1
   1fdd0:	ldr	r4, [r1]
   1fdd4:	beq	1fe10 <__assert_fail@plt+0xe6bc>
   1fdd8:	lsr	r2, r4, #1
   1fddc:	add	r3, r2, #1
   1fde0:	mvn	r3, r3
   1fde4:	cmp	r4, r3
   1fde8:	bhi	1fe2c <__assert_fail@plt+0xe6d8>
   1fdec:	add	r4, r4, #1
   1fdf0:	add	r4, r4, r2
   1fdf4:	mov	r1, r4
   1fdf8:	mov	r2, #1
   1fdfc:	bl	21dec <__assert_fail@plt+0x10698>
   1fe00:	cmp	r0, #0
   1fe04:	beq	1fe30 <__assert_fail@plt+0xe6dc>
   1fe08:	str	r4, [r5]
   1fe0c:	pop	{r4, r5, r6, pc}
   1fe10:	cmp	r4, #0
   1fe14:	moveq	r4, #64	; 0x40
   1fe18:	mov	r1, r4
   1fe1c:	mov	r2, #1
   1fe20:	bl	21dec <__assert_fail@plt+0x10698>
   1fe24:	cmp	r0, #0
   1fe28:	bne	1fe08 <__assert_fail@plt+0xe6b4>
   1fe2c:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fe30:	cmp	r4, #0
   1fe34:	bne	1fe2c <__assert_fail@plt+0xe6d8>
   1fe38:	str	r4, [r5]
   1fe3c:	pop	{r4, r5, r6, pc}
   1fe40:	cmp	r0, #0
   1fe44:	push	{r4, r5, r6, lr}
   1fe48:	mov	r5, r1
   1fe4c:	ldr	r4, [r1]
   1fe50:	mov	r6, r2
   1fe54:	beq	1fe98 <__assert_fail@plt+0xe744>
   1fe58:	lsr	r1, r4, #1
   1fe5c:	add	r3, r1, #1
   1fe60:	mvn	r3, r3
   1fe64:	cmp	r4, r3
   1fe68:	bhi	1fed0 <__assert_fail@plt+0xe77c>
   1fe6c:	add	r4, r4, #1
   1fe70:	add	r4, r4, r1
   1fe74:	mov	r1, r4
   1fe78:	bl	21dec <__assert_fail@plt+0x10698>
   1fe7c:	cmp	r0, #0
   1fe80:	bne	1fe90 <__assert_fail@plt+0xe73c>
   1fe84:	cmp	r4, #0
   1fe88:	cmpne	r6, #0
   1fe8c:	bne	1fed0 <__assert_fail@plt+0xe77c>
   1fe90:	str	r4, [r5]
   1fe94:	pop	{r4, r5, r6, pc}
   1fe98:	cmp	r4, #0
   1fe9c:	bne	1feb8 <__assert_fail@plt+0xe764>
   1fea0:	mov	r1, r2
   1fea4:	mov	r0, #64	; 0x40
   1fea8:	bl	22684 <__assert_fail@plt+0x10f30>
   1feac:	cmp	r0, #0
   1feb0:	movne	r4, r0
   1feb4:	addeq	r4, r0, #1
   1feb8:	mov	r2, r6
   1febc:	mov	r1, r4
   1fec0:	mov	r0, #0
   1fec4:	bl	21dec <__assert_fail@plt+0x10698>
   1fec8:	cmp	r0, #0
   1fecc:	bne	1fe90 <__assert_fail@plt+0xe73c>
   1fed0:	bl	202d8 <__assert_fail@plt+0xeb84>
   1fed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fed8:	sub	sp, sp, #12
   1fedc:	ldr	r6, [r1]
   1fee0:	mov	r8, r1
   1fee4:	mov	r9, r0
   1fee8:	asrs	r4, r6, #1
   1feec:	mov	sl, r2
   1fef0:	mov	fp, r3
   1fef4:	ldr	r7, [sp, #48]	; 0x30
   1fef8:	bmi	20074 <__assert_fail@plt+0xe920>
   1fefc:	mvn	r1, #-2147483648	; 0x80000000
   1ff00:	sub	r1, r1, r4
   1ff04:	cmp	r6, r1
   1ff08:	movle	r1, #0
   1ff0c:	movgt	r1, #1
   1ff10:	mvn	r3, fp
   1ff14:	cmp	r1, #0
   1ff18:	addeq	r4, r4, r6
   1ff1c:	mvnne	r4, #-2147483648	; 0x80000000
   1ff20:	lsr	r3, r3, #31
   1ff24:	cmp	fp, r4
   1ff28:	movge	r2, #0
   1ff2c:	andlt	r2, r3, #1
   1ff30:	cmp	r2, #0
   1ff34:	beq	20024 <__assert_fail@plt+0xe8d0>
   1ff38:	cmp	r7, #0
   1ff3c:	blt	2010c <__assert_fail@plt+0xe9b8>
   1ff40:	bne	20104 <__assert_fail@plt+0xe9b0>
   1ff44:	mov	r5, #64	; 0x40
   1ff48:	mov	r1, r7
   1ff4c:	mov	r0, r5
   1ff50:	str	r3, [sp, #4]
   1ff54:	bl	22890 <__assert_fail@plt+0x1113c>
   1ff58:	mov	r1, r7
   1ff5c:	mov	r4, r0
   1ff60:	mov	r0, r5
   1ff64:	bl	22ab0 <__assert_fail@plt+0x1135c>
   1ff68:	ldr	r3, [sp, #4]
   1ff6c:	sub	r5, r5, r1
   1ff70:	cmp	r9, #0
   1ff74:	sub	r2, r4, r6
   1ff78:	streq	r9, [r8]
   1ff7c:	cmp	r2, sl
   1ff80:	bge	20004 <__assert_fail@plt+0xe8b0>
   1ff84:	cmp	sl, #0
   1ff88:	blt	200a4 <__assert_fail@plt+0xe950>
   1ff8c:	cmp	r6, #0
   1ff90:	blt	1ffb0 <__assert_fail@plt+0xe85c>
   1ff94:	mvn	r2, #-2147483648	; 0x80000000
   1ff98:	sub	r2, r2, sl
   1ff9c:	cmp	r6, r2
   1ffa0:	movle	r2, #0
   1ffa4:	movgt	r2, #1
   1ffa8:	cmp	r2, #0
   1ffac:	bne	200a0 <__assert_fail@plt+0xe94c>
   1ffb0:	add	r6, r6, sl
   1ffb4:	cmp	fp, r6
   1ffb8:	movge	r3, #0
   1ffbc:	andlt	r3, r3, #1
   1ffc0:	cmp	r3, #0
   1ffc4:	mov	r4, r6
   1ffc8:	bne	200a0 <__assert_fail@plt+0xe94c>
   1ffcc:	cmp	r7, #0
   1ffd0:	blt	200b8 <__assert_fail@plt+0xe964>
   1ffd4:	beq	20000 <__assert_fail@plt+0xe8ac>
   1ffd8:	cmp	r6, #0
   1ffdc:	blt	2015c <__assert_fail@plt+0xea08>
   1ffe0:	mov	r1, r7
   1ffe4:	mvn	r0, #-2147483648	; 0x80000000
   1ffe8:	bl	22890 <__assert_fail@plt+0x1113c>
   1ffec:	cmp	r6, r0
   1fff0:	movle	r0, #0
   1fff4:	movgt	r0, #1
   1fff8:	cmp	r0, #0
   1fffc:	bne	200a0 <__assert_fail@plt+0xe94c>
   20000:	mul	r5, r6, r7
   20004:	mov	r1, r5
   20008:	mov	r0, r9
   2000c:	bl	20420 <__assert_fail@plt+0xeccc>
   20010:	cmp	r0, #0
   20014:	beq	20088 <__assert_fail@plt+0xe934>
   20018:	str	r4, [r8]
   2001c:	add	sp, sp, #12
   20020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20024:	cmp	r7, #0
   20028:	blt	200e4 <__assert_fail@plt+0xe990>
   2002c:	beq	1ff44 <__assert_fail@plt+0xe7f0>
   20030:	cmp	r4, #0
   20034:	blt	20114 <__assert_fail@plt+0xe9c0>
   20038:	mov	r1, r7
   2003c:	mvn	r0, #-2147483648	; 0x80000000
   20040:	str	r3, [sp, #4]
   20044:	bl	22890 <__assert_fail@plt+0x1113c>
   20048:	ldr	r3, [sp, #4]
   2004c:	cmp	r0, r4
   20050:	movge	r0, #0
   20054:	movlt	r0, #1
   20058:	cmp	r0, #0
   2005c:	mvnne	r5, #-2147483648	; 0x80000000
   20060:	bne	1ff48 <__assert_fail@plt+0xe7f4>
   20064:	mul	r5, r7, r4
   20068:	cmp	r5, #63	; 0x3f
   2006c:	bgt	1ff70 <__assert_fail@plt+0xe81c>
   20070:	b	1ff44 <__assert_fail@plt+0xe7f0>
   20074:	rsb	r1, r4, #-2147483648	; 0x80000000
   20078:	cmp	r6, r1
   2007c:	movge	r1, #0
   20080:	movlt	r1, #1
   20084:	b	1ff10 <__assert_fail@plt+0xe7bc>
   20088:	adds	r5, r5, #0
   2008c:	movne	r5, #1
   20090:	cmp	r9, #0
   20094:	orreq	r5, r5, #1
   20098:	cmp	r5, #0
   2009c:	beq	20018 <__assert_fail@plt+0xe8c4>
   200a0:	bl	202d8 <__assert_fail@plt+0xeb84>
   200a4:	rsb	r2, sl, #-2147483648	; 0x80000000
   200a8:	cmp	r6, r2
   200ac:	movge	r2, #0
   200b0:	movlt	r2, #1
   200b4:	b	1ffa8 <__assert_fail@plt+0xe854>
   200b8:	cmp	r6, #0
   200bc:	blt	20140 <__assert_fail@plt+0xe9ec>
   200c0:	cmn	r7, #1
   200c4:	beq	20000 <__assert_fail@plt+0xe8ac>
   200c8:	mov	r1, r7
   200cc:	mov	r0, #-2147483648	; 0x80000000
   200d0:	bl	22890 <__assert_fail@plt+0x1113c>
   200d4:	cmp	r6, r0
   200d8:	movle	r0, #0
   200dc:	movgt	r0, #1
   200e0:	b	1fff8 <__assert_fail@plt+0xe8a4>
   200e4:	cmp	r4, #0
   200e8:	blt	20180 <__assert_fail@plt+0xea2c>
   200ec:	cmn	r7, #1
   200f0:	beq	20064 <__assert_fail@plt+0xe910>
   200f4:	str	r3, [sp, #4]
   200f8:	mov	r1, r7
   200fc:	mov	r0, #-2147483648	; 0x80000000
   20100:	b	20044 <__assert_fail@plt+0xe8f0>
   20104:	mov	r4, fp
   20108:	b	20038 <__assert_fail@plt+0xe8e4>
   2010c:	mov	r4, fp
   20110:	b	200ec <__assert_fail@plt+0xe998>
   20114:	cmn	r4, #1
   20118:	beq	20064 <__assert_fail@plt+0xe910>
   2011c:	mov	r1, r4
   20120:	mov	r0, #-2147483648	; 0x80000000
   20124:	str	r3, [sp, #4]
   20128:	bl	22890 <__assert_fail@plt+0x1113c>
   2012c:	ldr	r3, [sp, #4]
   20130:	cmp	r7, r0
   20134:	movle	r0, #0
   20138:	movgt	r0, #1
   2013c:	b	20058 <__assert_fail@plt+0xe904>
   20140:	mov	r1, r7
   20144:	mvn	r0, #-2147483648	; 0x80000000
   20148:	bl	22890 <__assert_fail@plt+0x1113c>
   2014c:	cmp	r6, r0
   20150:	movge	r0, #0
   20154:	movlt	r0, #1
   20158:	b	1fff8 <__assert_fail@plt+0xe8a4>
   2015c:	cmn	r6, #1
   20160:	beq	20000 <__assert_fail@plt+0xe8ac>
   20164:	mov	r1, r6
   20168:	mov	r0, #-2147483648	; 0x80000000
   2016c:	bl	22890 <__assert_fail@plt+0x1113c>
   20170:	cmp	r7, r0
   20174:	movle	r0, #0
   20178:	movgt	r0, #1
   2017c:	b	1fff8 <__assert_fail@plt+0xe8a4>
   20180:	mov	r1, r7
   20184:	mvn	r0, #-2147483648	; 0x80000000
   20188:	str	r3, [sp, #4]
   2018c:	bl	22890 <__assert_fail@plt+0x1113c>
   20190:	ldr	r3, [sp, #4]
   20194:	cmp	r0, r4
   20198:	movle	r0, #0
   2019c:	movgt	r0, #1
   201a0:	b	20058 <__assert_fail@plt+0xe904>
   201a4:	push	{r4, lr}
   201a8:	mov	r1, #1
   201ac:	bl	203ac <__assert_fail@plt+0xec58>
   201b0:	cmp	r0, #0
   201b4:	popne	{r4, pc}
   201b8:	bl	202d8 <__assert_fail@plt+0xeb84>
   201bc:	push	{r4, lr}
   201c0:	mov	r1, #1
   201c4:	bl	203ac <__assert_fail@plt+0xec58>
   201c8:	cmp	r0, #0
   201cc:	popne	{r4, pc}
   201d0:	bl	202d8 <__assert_fail@plt+0xeb84>
   201d4:	push	{r4, lr}
   201d8:	bl	203ac <__assert_fail@plt+0xec58>
   201dc:	cmp	r0, #0
   201e0:	popne	{r4, pc}
   201e4:	bl	202d8 <__assert_fail@plt+0xeb84>
   201e8:	push	{r4, lr}
   201ec:	bl	203ac <__assert_fail@plt+0xec58>
   201f0:	cmp	r0, #0
   201f4:	popne	{r4, pc}
   201f8:	bl	202d8 <__assert_fail@plt+0xeb84>
   201fc:	push	{r4, r5, r6, lr}
   20200:	mov	r6, r0
   20204:	mov	r0, r1
   20208:	mov	r4, r1
   2020c:	bl	203f4 <__assert_fail@plt+0xeca0>
   20210:	subs	r5, r0, #0
   20214:	beq	2022c <__assert_fail@plt+0xead8>
   20218:	mov	r2, r4
   2021c:	mov	r1, r6
   20220:	bl	113f4 <memcpy@plt>
   20224:	mov	r0, r5
   20228:	pop	{r4, r5, r6, pc}
   2022c:	bl	202d8 <__assert_fail@plt+0xeb84>
   20230:	push	{r4, r5, r6, lr}
   20234:	mov	r6, r0
   20238:	mov	r0, r1
   2023c:	mov	r4, r1
   20240:	bl	203f4 <__assert_fail@plt+0xeca0>
   20244:	subs	r5, r0, #0
   20248:	beq	20260 <__assert_fail@plt+0xeb0c>
   2024c:	mov	r2, r4
   20250:	mov	r1, r6
   20254:	bl	113f4 <memcpy@plt>
   20258:	mov	r0, r5
   2025c:	pop	{r4, r5, r6, pc}
   20260:	bl	202d8 <__assert_fail@plt+0xeb84>
   20264:	push	{r4, r5, r6, lr}
   20268:	mov	r6, r0
   2026c:	add	r0, r1, #1
   20270:	mov	r4, r1
   20274:	bl	203f4 <__assert_fail@plt+0xeca0>
   20278:	subs	r5, r0, #0
   2027c:	beq	2029c <__assert_fail@plt+0xeb48>
   20280:	mov	r3, #0
   20284:	mov	r1, r6
   20288:	strb	r3, [r5, r4]
   2028c:	mov	r2, r4
   20290:	bl	113f4 <memcpy@plt>
   20294:	mov	r0, r5
   20298:	pop	{r4, r5, r6, pc}
   2029c:	bl	202d8 <__assert_fail@plt+0xeb84>
   202a0:	push	{r4, r5, r6, lr}
   202a4:	mov	r6, r0
   202a8:	bl	115b0 <strlen@plt>
   202ac:	add	r4, r0, #1
   202b0:	mov	r0, r4
   202b4:	bl	203f4 <__assert_fail@plt+0xeca0>
   202b8:	subs	r5, r0, #0
   202bc:	beq	202d4 <__assert_fail@plt+0xeb80>
   202c0:	mov	r2, r4
   202c4:	mov	r1, r6
   202c8:	bl	113f4 <memcpy@plt>
   202cc:	mov	r0, r5
   202d0:	pop	{r4, r5, r6, pc}
   202d4:	bl	202d8 <__assert_fail@plt+0xeb84>
   202d8:	ldr	r3, [pc, #44]	; 2030c <__assert_fail@plt+0xebb8>
   202dc:	push	{r4, lr}
   202e0:	mov	r2, #5
   202e4:	ldr	r1, [pc, #36]	; 20310 <__assert_fail@plt+0xebbc>
   202e8:	mov	r0, #0
   202ec:	ldr	r4, [r3]
   202f0:	bl	11430 <dcgettext@plt>
   202f4:	ldr	r2, [pc, #24]	; 20314 <__assert_fail@plt+0xebc0>
   202f8:	mov	r1, #0
   202fc:	mov	r3, r0
   20300:	mov	r0, r4
   20304:	bl	11520 <error@plt>
   20308:	bl	11748 <abort@plt>
   2030c:	andeq	r7, r3, r0, lsl #3
   20310:	andeq	r6, r2, r0, lsl #15
   20314:	muleq	r2, ip, r2
   20318:	push	{r4, lr}
   2031c:	sub	sp, sp, #8
   20320:	ldr	ip, [sp, #16]
   20324:	str	ip, [sp]
   20328:	bl	21e38 <__assert_fail@plt+0x106e4>
   2032c:	subs	r4, r0, #0
   20330:	blt	20340 <__assert_fail@plt+0xebec>
   20334:	mov	r0, r4
   20338:	add	sp, sp, #8
   2033c:	pop	{r4, pc}
   20340:	bl	115e0 <__errno_location@plt>
   20344:	ldr	r3, [r0]
   20348:	cmp	r3, #12
   2034c:	bne	20334 <__assert_fail@plt+0xebe0>
   20350:	bl	202d8 <__assert_fail@plt+0xeb84>
   20354:	push	{r4, lr}
   20358:	bl	220a4 <__assert_fail@plt+0x10950>
   2035c:	subs	r4, r0, #0
   20360:	beq	2036c <__assert_fail@plt+0xec18>
   20364:	mov	r0, r4
   20368:	pop	{r4, pc}
   2036c:	bl	115e0 <__errno_location@plt>
   20370:	ldr	r3, [r0]
   20374:	cmp	r3, #12
   20378:	bne	20364 <__assert_fail@plt+0xec10>
   2037c:	bl	202d8 <__assert_fail@plt+0xeb84>
   20380:	push	{r4, lr}
   20384:	bl	22278 <__assert_fail@plt+0x10b24>
   20388:	subs	r4, r0, #0
   2038c:	beq	20398 <__assert_fail@plt+0xec44>
   20390:	mov	r0, r4
   20394:	pop	{r4, pc}
   20398:	bl	115e0 <__errno_location@plt>
   2039c:	ldr	r3, [r0]
   203a0:	cmp	r3, #12
   203a4:	bne	20390 <__assert_fail@plt+0xec3c>
   203a8:	bl	202d8 <__assert_fail@plt+0xeb84>
   203ac:	cmp	r1, #0
   203b0:	cmpne	r0, #0
   203b4:	moveq	r1, #1
   203b8:	moveq	r0, r1
   203bc:	umull	r2, r3, r0, r1
   203c0:	adds	r3, r3, #0
   203c4:	movne	r3, #1
   203c8:	cmp	r2, #0
   203cc:	blt	203dc <__assert_fail@plt+0xec88>
   203d0:	cmp	r3, #0
   203d4:	bne	203dc <__assert_fail@plt+0xec88>
   203d8:	b	11340 <calloc@plt>
   203dc:	push	{r4, lr}
   203e0:	bl	115e0 <__errno_location@plt>
   203e4:	mov	r3, #12
   203e8:	str	r3, [r0]
   203ec:	mov	r0, #0
   203f0:	pop	{r4, pc}
   203f4:	cmp	r0, #0
   203f8:	moveq	r0, #1
   203fc:	cmp	r0, #0
   20400:	blt	20408 <__assert_fail@plt+0xecb4>
   20404:	b	1152c <malloc@plt>
   20408:	push	{r4, lr}
   2040c:	bl	115e0 <__errno_location@plt>
   20410:	mov	r3, #12
   20414:	str	r3, [r0]
   20418:	mov	r0, #0
   2041c:	pop	{r4, pc}
   20420:	cmp	r0, #0
   20424:	beq	20448 <__assert_fail@plt+0xecf4>
   20428:	cmp	r1, #0
   2042c:	push	{lr}		; (str lr, [sp, #-4]!)
   20430:	sub	sp, sp, #12
   20434:	beq	20450 <__assert_fail@plt+0xecfc>
   20438:	blt	20468 <__assert_fail@plt+0xed14>
   2043c:	add	sp, sp, #12
   20440:	pop	{lr}		; (ldr lr, [sp], #4)
   20444:	b	11478 <realloc@plt>
   20448:	mov	r0, r1
   2044c:	b	203f4 <__assert_fail@plt+0xeca0>
   20450:	str	r1, [sp, #4]
   20454:	bl	19d04 <__assert_fail@plt+0x85b0>
   20458:	ldr	r3, [sp, #4]
   2045c:	mov	r0, r3
   20460:	add	sp, sp, #12
   20464:	pop	{pc}		; (ldr pc, [sp], #4)
   20468:	bl	115e0 <__errno_location@plt>
   2046c:	mov	r2, #12
   20470:	mov	r3, #0
   20474:	str	r2, [r0]
   20478:	b	2045c <__assert_fail@plt+0xed08>
   2047c:	cmp	r0, r1
   20480:	beq	204d0 <__assert_fail@plt+0xed7c>
   20484:	sub	r2, r0, #1
   20488:	sub	r1, r1, #1
   2048c:	b	20498 <__assert_fail@plt+0xed44>
   20490:	cmp	r0, r3
   20494:	bne	204c8 <__assert_fail@plt+0xed74>
   20498:	ldrb	r0, [r2, #1]!
   2049c:	sub	r3, r0, #65	; 0x41
   204a0:	cmp	r3, #25
   204a4:	ldrb	r3, [r1, #1]!
   204a8:	addls	r0, r0, #32
   204ac:	sub	ip, r3, #65	; 0x41
   204b0:	cmp	ip, #25
   204b4:	addls	r3, r3, #32
   204b8:	uxtb	r0, r0
   204bc:	cmp	r0, #0
   204c0:	uxtb	r3, r3
   204c4:	bne	20490 <__assert_fail@plt+0xed3c>
   204c8:	sub	r0, r0, r3
   204cc:	bx	lr
   204d0:	mov	r0, #0
   204d4:	bx	lr
   204d8:	push	{r4, r5, r6, lr}
   204dc:	mov	r4, r0
   204e0:	bl	11508 <__fpending@plt>
   204e4:	ldr	r5, [r4]
   204e8:	and	r5, r5, #32
   204ec:	mov	r6, r0
   204f0:	mov	r0, r4
   204f4:	bl	20554 <__assert_fail@plt+0xee00>
   204f8:	cmp	r5, #0
   204fc:	mov	r4, r0
   20500:	bne	20520 <__assert_fail@plt+0xedcc>
   20504:	cmp	r0, #0
   20508:	beq	20518 <__assert_fail@plt+0xedc4>
   2050c:	cmp	r6, #0
   20510:	beq	2053c <__assert_fail@plt+0xede8>
   20514:	mvn	r4, #0
   20518:	mov	r0, r4
   2051c:	pop	{r4, r5, r6, pc}
   20520:	cmp	r0, #0
   20524:	bne	20514 <__assert_fail@plt+0xedc0>
   20528:	bl	115e0 <__errno_location@plt>
   2052c:	str	r4, [r0]
   20530:	mvn	r4, #0
   20534:	mov	r0, r4
   20538:	pop	{r4, r5, r6, pc}
   2053c:	bl	115e0 <__errno_location@plt>
   20540:	ldr	r4, [r0]
   20544:	subs	r4, r4, #9
   20548:	mvnne	r4, #0
   2054c:	mov	r0, r4
   20550:	pop	{r4, r5, r6, pc}
   20554:	push	{r4, r5, lr}
   20558:	sub	sp, sp, #12
   2055c:	mov	r4, r0
   20560:	bl	11640 <fileno@plt>
   20564:	cmp	r0, #0
   20568:	mov	r0, r4
   2056c:	blt	205e8 <__assert_fail@plt+0xee94>
   20570:	bl	11550 <__freading@plt>
   20574:	cmp	r0, #0
   20578:	bne	205b4 <__assert_fail@plt+0xee60>
   2057c:	mov	r0, r4
   20580:	bl	205f4 <__assert_fail@plt+0xeea0>
   20584:	cmp	r0, #0
   20588:	beq	205e4 <__assert_fail@plt+0xee90>
   2058c:	bl	115e0 <__errno_location@plt>
   20590:	mov	r5, r0
   20594:	mov	r0, r4
   20598:	ldr	r4, [r5]
   2059c:	bl	11664 <fclose@plt>
   205a0:	cmp	r4, #0
   205a4:	mvnne	r0, #0
   205a8:	strne	r4, [r5]
   205ac:	add	sp, sp, #12
   205b0:	pop	{r4, r5, pc}
   205b4:	mov	r0, r4
   205b8:	bl	11640 <fileno@plt>
   205bc:	mov	r3, #1
   205c0:	str	r3, [sp]
   205c4:	mov	r2, #0
   205c8:	mov	r3, #0
   205cc:	bl	114e4 <lseek64@plt>
   205d0:	mvn	r3, #0
   205d4:	mvn	r2, #0
   205d8:	cmp	r1, r3
   205dc:	cmpeq	r0, r2
   205e0:	bne	2057c <__assert_fail@plt+0xee28>
   205e4:	mov	r0, r4
   205e8:	add	sp, sp, #12
   205ec:	pop	{r4, r5, lr}
   205f0:	b	11664 <fclose@plt>
   205f4:	push	{r4, lr}
   205f8:	subs	r4, r0, #0
   205fc:	sub	sp, sp, #8
   20600:	beq	2061c <__assert_fail@plt+0xeec8>
   20604:	bl	11550 <__freading@plt>
   20608:	cmp	r0, #0
   2060c:	beq	2061c <__assert_fail@plt+0xeec8>
   20610:	ldr	r3, [r4]
   20614:	tst	r3, #256	; 0x100
   20618:	bne	2062c <__assert_fail@plt+0xeed8>
   2061c:	mov	r0, r4
   20620:	add	sp, sp, #8
   20624:	pop	{r4, lr}
   20628:	b	11394 <fflush@plt>
   2062c:	mov	r3, #1
   20630:	str	r3, [sp]
   20634:	mov	r2, #0
   20638:	mov	r3, #0
   2063c:	mov	r0, r4
   20640:	bl	20654 <__assert_fail@plt+0xef00>
   20644:	mov	r0, r4
   20648:	add	sp, sp, #8
   2064c:	pop	{r4, lr}
   20650:	b	11394 <fflush@plt>
   20654:	push	{r4, r5, r6, r7, r8, lr}
   20658:	sub	sp, sp, #8
   2065c:	ldmib	r0, {ip, lr}
   20660:	mov	r4, r0
   20664:	ldr	r5, [sp, #32]
   20668:	cmp	lr, ip
   2066c:	beq	20684 <__assert_fail@plt+0xef30>
   20670:	str	r5, [sp, #32]
   20674:	mov	r0, r4
   20678:	add	sp, sp, #8
   2067c:	pop	{r4, r5, r6, r7, r8, lr}
   20680:	b	1167c <fseeko64@plt>
   20684:	ldr	lr, [r0, #20]
   20688:	ldr	ip, [r0, #16]
   2068c:	cmp	lr, ip
   20690:	bne	20670 <__assert_fail@plt+0xef1c>
   20694:	ldr	r8, [r0, #36]	; 0x24
   20698:	cmp	r8, #0
   2069c:	bne	20670 <__assert_fail@plt+0xef1c>
   206a0:	mov	r6, r2
   206a4:	mov	r7, r3
   206a8:	bl	11640 <fileno@plt>
   206ac:	mov	r2, r6
   206b0:	mov	r3, r7
   206b4:	str	r5, [sp]
   206b8:	bl	114e4 <lseek64@plt>
   206bc:	mvn	r3, #0
   206c0:	mvn	r2, #0
   206c4:	cmp	r1, r3
   206c8:	cmpeq	r0, r2
   206cc:	beq	206ec <__assert_fail@plt+0xef98>
   206d0:	ldr	r3, [r4]
   206d4:	strd	r0, [r4, #80]	; 0x50
   206d8:	mov	r0, r8
   206dc:	bic	r3, r3, #16
   206e0:	str	r3, [r4]
   206e4:	add	sp, sp, #8
   206e8:	pop	{r4, r5, r6, r7, r8, pc}
   206ec:	mvn	r0, #0
   206f0:	b	206e4 <__assert_fail@plt+0xef90>
   206f4:	push	{r4, lr}
   206f8:	mov	r0, #14
   206fc:	bl	116dc <nl_langinfo@plt>
   20700:	cmp	r0, #0
   20704:	beq	2071c <__assert_fail@plt+0xefc8>
   20708:	ldrb	r2, [r0]
   2070c:	ldr	r3, [pc, #16]	; 20724 <__assert_fail@plt+0xefd0>
   20710:	cmp	r2, #0
   20714:	moveq	r0, r3
   20718:	pop	{r4, pc}
   2071c:	ldr	r0, [pc]	; 20724 <__assert_fail@plt+0xefd0>
   20720:	pop	{r4, pc}
   20724:	muleq	r2, r4, r7
   20728:	push	{r4, lr}
   2072c:	mov	r4, r0
   20730:	bl	113b8 <wcwidth@plt>
   20734:	cmp	r0, #0
   20738:	popge	{r4, pc}
   2073c:	mov	r0, r4
   20740:	bl	114a8 <iswcntrl@plt>
   20744:	clz	r0, r0
   20748:	lsr	r0, r0, #5
   2074c:	pop	{r4, pc}
   20750:	mov	r3, r1
   20754:	push	{r4, r5, r6, lr}
   20758:	mov	r4, r1
   2075c:	ldr	r1, [r3], #16
   20760:	mov	r5, r0
   20764:	cmp	r1, r3
   20768:	strne	r1, [r0]
   2076c:	beq	20790 <__assert_fail@plt+0xf03c>
   20770:	ldrb	r3, [r4, #8]
   20774:	ldr	r2, [r4, #4]
   20778:	cmp	r3, #0
   2077c:	strb	r3, [r5, #8]
   20780:	ldrne	r3, [r4, #12]
   20784:	str	r2, [r5, #4]
   20788:	strne	r3, [r5, #12]
   2078c:	pop	{r4, r5, r6, pc}
   20790:	add	r3, r0, #16
   20794:	mov	r0, r3
   20798:	ldr	r2, [r4, #4]
   2079c:	bl	113f4 <memcpy@plt>
   207a0:	str	r0, [r5]
   207a4:	b	20770 <__assert_fail@plt+0xf01c>
   207a8:	ldr	r3, [pc, #20]	; 207c4 <__assert_fail@plt+0xf070>
   207ac:	lsr	r2, r0, #5
   207b0:	and	r0, r0, #31
   207b4:	ldr	r3, [r3, r2, lsl #2]
   207b8:	lsr	r0, r3, r0
   207bc:	and	r0, r0, #1
   207c0:	bx	lr
   207c4:	muleq	r2, ip, r7
   207c8:	push	{r4, r5, r6, r7, lr}
   207cc:	subs	r6, r0, #0
   207d0:	sub	sp, sp, #12
   207d4:	addeq	r6, sp, #4
   207d8:	mov	r0, r6
   207dc:	mov	r5, r2
   207e0:	mov	r7, r1
   207e4:	bl	11514 <mbrtowc@plt>
   207e8:	cmp	r5, #0
   207ec:	cmnne	r0, #3
   207f0:	mov	r4, r0
   207f4:	bls	20810 <__assert_fail@plt+0xf0bc>
   207f8:	mov	r0, #0
   207fc:	bl	22344 <__assert_fail@plt+0x10bf0>
   20800:	cmp	r0, #0
   20804:	moveq	r4, #1
   20808:	ldrbeq	r3, [r7]
   2080c:	streq	r3, [r6]
   20810:	mov	r0, r4
   20814:	add	sp, sp, #12
   20818:	pop	{r4, r5, r6, r7, pc}
   2081c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20820:	mov	r6, r2
   20824:	lsrs	r2, r6, #30
   20828:	movne	ip, #1
   2082c:	moveq	ip, #0
   20830:	lsls	r2, r6, #2
   20834:	add	fp, sp, #28
   20838:	bmi	20844 <__assert_fail@plt+0xf0f0>
   2083c:	cmp	ip, #0
   20840:	beq	20850 <__assert_fail@plt+0xf0fc>
   20844:	mov	r0, #0
   20848:	sub	sp, fp, #28
   2084c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20850:	cmp	r2, #4016	; 0xfb0
   20854:	mov	r5, r0
   20858:	mov	r4, r1
   2085c:	mov	r7, r3
   20860:	bls	20934 <__assert_fail@plt+0xf1e0>
   20864:	mov	r0, r2
   20868:	bl	223a0 <__assert_fail@plt+0x10c4c>
   2086c:	cmp	r0, #0
   20870:	beq	20844 <__assert_fail@plt+0xf0f0>
   20874:	cmp	r6, #2
   20878:	mov	r3, #1
   2087c:	str	r3, [r0, #4]
   20880:	movhi	r8, r4
   20884:	addhi	r2, r0, #8
   20888:	movhi	ip, #0
   2088c:	movhi	r3, #2
   20890:	bls	208dc <__assert_fail@plt+0xf188>
   20894:	ldrb	r1, [r8, #1]!
   20898:	ldrb	lr, [r4, ip]
   2089c:	cmp	lr, r1
   208a0:	bne	208bc <__assert_fail@plt+0xf168>
   208a4:	b	2094c <__assert_fail@plt+0xf1f8>
   208a8:	ldr	lr, [r0, ip, lsl #2]
   208ac:	sub	ip, ip, lr
   208b0:	ldrb	lr, [r4, ip]
   208b4:	cmp	lr, r1
   208b8:	beq	2094c <__assert_fail@plt+0xf1f8>
   208bc:	cmp	ip, #0
   208c0:	bne	208a8 <__assert_fail@plt+0xf154>
   208c4:	mov	ip, #0
   208c8:	str	r3, [r2]
   208cc:	add	r3, r3, #1
   208d0:	cmp	r6, r3
   208d4:	add	r2, r2, #4
   208d8:	bne	20894 <__assert_fail@plt+0xf140>
   208dc:	mov	r2, #0
   208e0:	str	r2, [r7]
   208e4:	ldrb	r3, [r5]
   208e8:	mov	ip, r5
   208ec:	cmp	r3, #0
   208f0:	beq	20924 <__assert_fail@plt+0xf1d0>
   208f4:	ldrb	r1, [r4, r2]
   208f8:	cmp	r1, r3
   208fc:	beq	2095c <__assert_fail@plt+0xf208>
   20900:	cmp	r2, #0
   20904:	addeq	r5, r5, #1
   20908:	ldrbeq	r3, [ip, #1]
   2090c:	ldrne	r1, [r0, r2, lsl #2]
   20910:	addeq	ip, ip, #1
   20914:	addne	r5, r5, r1
   20918:	subne	r2, r2, r1
   2091c:	cmp	r3, #0
   20920:	bne	208f4 <__assert_fail@plt+0xf1a0>
   20924:	bl	223f0 <__assert_fail@plt+0x10c9c>
   20928:	mov	r0, #1
   2092c:	sub	sp, fp, #28
   20930:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20934:	add	r3, r2, #29
   20938:	bic	r3, r3, #7
   2093c:	sub	sp, sp, r3
   20940:	add	r0, sp, #15
   20944:	bic	r0, r0, #15
   20948:	b	2086c <__assert_fail@plt+0xf118>
   2094c:	add	ip, ip, #1
   20950:	sub	r1, r3, ip
   20954:	str	r1, [r2]
   20958:	b	208cc <__assert_fail@plt+0xf178>
   2095c:	add	r2, r2, #1
   20960:	cmp	r6, r2
   20964:	add	r1, ip, #1
   20968:	ldrbne	r3, [ip, #1]
   2096c:	movne	ip, r1
   20970:	bne	208ec <__assert_fail@plt+0xf198>
   20974:	str	r5, [r7]
   20978:	bl	223f0 <__assert_fail@plt+0x10c9c>
   2097c:	mov	r0, #1
   20980:	b	2092c <__assert_fail@plt+0xf1d8>
   20984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20988:	add	fp, sp, #32
   2098c:	sub	sp, sp, #188	; 0xbc
   20990:	str	r0, [fp, #-212]	; 0xffffff2c
   20994:	mov	r0, r1
   20998:	mov	r4, r1
   2099c:	str	r2, [fp, #-220]	; 0xffffff24
   209a0:	bl	22414 <__assert_fail@plt+0x10cc0>
   209a4:	mov	r3, #44	; 0x2c
   209a8:	str	r0, [fp, #-208]	; 0xffffff30
   209ac:	umull	r0, r1, r0, r3
   209b0:	adds	r2, r1, #0
   209b4:	movne	r2, #1
   209b8:	cmp	r0, #0
   209bc:	blt	209c8 <__assert_fail@plt+0xf274>
   209c0:	cmp	r2, #0
   209c4:	beq	209d4 <__assert_fail@plt+0xf280>
   209c8:	mov	r0, #0
   209cc:	sub	sp, fp, #32
   209d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209d4:	ldr	r2, [fp, #-208]	; 0xffffff30
   209d8:	mul	r0, r3, r2
   209dc:	cmp	r0, #4016	; 0xfb0
   209e0:	bls	20c8c <__assert_fail@plt+0xf538>
   209e4:	bl	223a0 <__assert_fail@plt+0x10c4c>
   209e8:	mov	r3, r0
   209ec:	str	r0, [fp, #-216]	; 0xffffff28
   209f0:	cmp	r3, #0
   209f4:	beq	209c8 <__assert_fail@plt+0xf274>
   209f8:	ldr	r2, [fp, #-208]	; 0xffffff30
   209fc:	add	r6, r3, #16
   20a00:	mov	r7, #1
   20a04:	add	sl, r2, r2, lsl #2
   20a08:	mov	r8, #0
   20a0c:	add	sl, r3, sl, lsl #3
   20a10:	str	r4, [fp, #-188]	; 0xffffff44
   20a14:	str	r8, [fp, #-196]	; 0xffffff3c
   20a18:	strb	r8, [fp, #-204]	; 0xffffff34
   20a1c:	str	r8, [fp, #-200]	; 0xffffff38
   20a20:	strb	r8, [fp, #-192]	; 0xffffff40
   20a24:	ldrb	r3, [fp, #-204]	; 0xffffff34
   20a28:	cmp	r3, #0
   20a2c:	bne	20e68 <__assert_fail@plt+0xf714>
   20a30:	ldrb	r3, [r4]
   20a34:	ldr	r1, [pc, #1936]	; 211cc <__assert_fail@plt+0xfa78>
   20a38:	and	r2, r3, #31
   20a3c:	lsr	r3, r3, #5
   20a40:	ldr	r3, [r1, r3, lsl #2]
   20a44:	lsr	r3, r3, r2
   20a48:	tst	r3, #1
   20a4c:	beq	20e54 <__assert_fail@plt+0xf700>
   20a50:	str	r7, [fp, #-184]	; 0xffffff48
   20a54:	ldrb	r4, [r4]
   20a58:	strb	r7, [fp, #-180]	; 0xffffff4c
   20a5c:	strb	r7, [fp, #-192]	; 0xffffff40
   20a60:	cmp	r4, #0
   20a64:	str	r4, [fp, #-176]	; 0xffffff50
   20a68:	bne	20ed4 <__assert_fail@plt+0xf780>
   20a6c:	ldr	r3, [fp, #-208]	; 0xffffff30
   20a70:	str	r7, [sl, #4]
   20a74:	cmp	r3, #2
   20a78:	bls	20b6c <__assert_fail@plt+0xf418>
   20a7c:	ldr	r8, [fp, #-216]	; 0xffffff28
   20a80:	add	r7, sl, #8
   20a84:	mov	r5, r8
   20a88:	mov	r6, #2
   20a8c:	ldrb	r3, [r5, #48]	; 0x30
   20a90:	cmp	r3, #0
   20a94:	bne	20b10 <__assert_fail@plt+0xf3bc>
   20a98:	ldr	r9, [r5, #44]	; 0x2c
   20a9c:	b	20ab0 <__assert_fail@plt+0xf35c>
   20aa0:	cmp	r4, #0
   20aa4:	beq	20ae4 <__assert_fail@plt+0xf390>
   20aa8:	ldr	r3, [sl, r4, lsl #2]
   20aac:	sub	r4, r4, r3
   20ab0:	add	r3, r4, r4, lsl #2
   20ab4:	add	r2, r8, r3, lsl #3
   20ab8:	ldr	r2, [r2, #4]
   20abc:	cmp	r2, r9
   20ac0:	bne	20aa0 <__assert_fail@plt+0xf34c>
   20ac4:	ldr	r1, [r8, r3, lsl #3]
   20ac8:	mov	r2, r9
   20acc:	ldr	r0, [r5, #40]	; 0x28
   20ad0:	bl	11418 <memcmp@plt>
   20ad4:	cmp	r0, #0
   20ad8:	beq	20b48 <__assert_fail@plt+0xf3f4>
   20adc:	cmp	r4, #0
   20ae0:	bne	20aa8 <__assert_fail@plt+0xf354>
   20ae4:	str	r6, [r7]
   20ae8:	mov	r4, #0
   20aec:	b	20b54 <__assert_fail@plt+0xf400>
   20af0:	ldr	r3, [r3, #12]
   20af4:	ldr	r2, [r5, #52]	; 0x34
   20af8:	cmp	r2, r3
   20afc:	beq	20b48 <__assert_fail@plt+0xf3f4>
   20b00:	cmp	r4, #0
   20b04:	beq	20ae4 <__assert_fail@plt+0xf390>
   20b08:	ldr	r3, [sl, r4, lsl #2]
   20b0c:	sub	r4, r4, r3
   20b10:	add	r3, r4, r4, lsl #2
   20b14:	add	r3, r8, r3, lsl #3
   20b18:	ldrb	r2, [r3, #8]
   20b1c:	cmp	r2, #0
   20b20:	bne	20af0 <__assert_fail@plt+0xf39c>
   20b24:	ldr	r2, [r5, #44]	; 0x2c
   20b28:	ldr	r1, [r3, #4]
   20b2c:	cmp	r2, r1
   20b30:	bne	20b00 <__assert_fail@plt+0xf3ac>
   20b34:	ldr	r1, [r3]
   20b38:	ldr	r0, [r5, #40]	; 0x28
   20b3c:	bl	11418 <memcmp@plt>
   20b40:	cmp	r0, #0
   20b44:	bne	20b00 <__assert_fail@plt+0xf3ac>
   20b48:	add	r4, r4, #1
   20b4c:	sub	r3, r6, r4
   20b50:	str	r3, [r7]
   20b54:	ldr	r3, [fp, #-208]	; 0xffffff30
   20b58:	add	r6, r6, #1
   20b5c:	cmp	r3, r6
   20b60:	add	r5, r5, #40	; 0x28
   20b64:	add	r7, r7, #4
   20b68:	bne	20a8c <__assert_fail@plt+0xf338>
   20b6c:	ldr	r1, [fp, #-212]	; 0xffffff2c
   20b70:	mov	r2, #0
   20b74:	str	r1, [fp, #-132]	; 0xffffff7c
   20b78:	str	r1, [fp, #-76]	; 0xffffffb4
   20b7c:	str	sl, [fp, #-212]	; 0xffffff2c
   20b80:	ldr	r1, [fp, #-220]	; 0xffffff24
   20b84:	ldr	r9, [pc, #1600]	; 211cc <__assert_fail@plt+0xfa78>
   20b88:	ldr	sl, [fp, #-216]	; 0xffffff28
   20b8c:	mov	r3, r2
   20b90:	mov	r8, r2
   20b94:	mov	r7, r2
   20b98:	mov	r6, #1
   20b9c:	str	r2, [r1]
   20ba0:	strb	r2, [fp, #-148]	; 0xffffff6c
   20ba4:	str	r2, [fp, #-144]	; 0xffffff70
   20ba8:	strb	r2, [fp, #-136]	; 0xffffff78
   20bac:	strb	r2, [fp, #-92]	; 0xffffffa4
   20bb0:	str	r2, [fp, #-88]	; 0xffffffa8
   20bb4:	strb	r2, [fp, #-80]	; 0xffffffb0
   20bb8:	str	r2, [fp, #-140]	; 0xffffff74
   20bbc:	str	r2, [fp, #-84]	; 0xffffffac
   20bc0:	cmp	r3, #0
   20bc4:	bne	20ca8 <__assert_fail@plt+0xf554>
   20bc8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   20bcc:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   20bd0:	cmp	r3, #0
   20bd4:	bne	20c08 <__assert_fail@plt+0xf4b4>
   20bd8:	ldrb	r3, [r5]
   20bdc:	and	r2, r3, #31
   20be0:	lsr	r3, r3, #5
   20be4:	ldr	r3, [r9, r3, lsl #2]
   20be8:	lsr	r3, r3, r2
   20bec:	tst	r3, #1
   20bf0:	bne	20f18 <__assert_fail@plt+0xf7c4>
   20bf4:	sub	r0, fp, #88	; 0x58
   20bf8:	bl	1140c <mbsinit@plt>
   20bfc:	cmp	r0, #0
   20c00:	beq	211a4 <__assert_fail@plt+0xfa50>
   20c04:	strb	r6, [fp, #-92]	; 0xffffffa4
   20c08:	bl	114fc <__ctype_get_mb_cur_max@plt>
   20c0c:	mov	r1, r0
   20c10:	mov	r0, r5
   20c14:	bl	1ed54 <__assert_fail@plt+0xd600>
   20c18:	sub	r3, fp, #88	; 0x58
   20c1c:	mov	r1, r5
   20c20:	mov	r2, r0
   20c24:	sub	r0, fp, #64	; 0x40
   20c28:	bl	207c8 <__assert_fail@plt+0xf074>
   20c2c:	cmn	r0, #1
   20c30:	str	r0, [fp, #-72]	; 0xffffffb8
   20c34:	strbeq	r7, [fp, #-68]	; 0xffffffbc
   20c38:	streq	r6, [fp, #-72]	; 0xffffffb8
   20c3c:	strbeq	r6, [fp, #-80]	; 0xffffffb0
   20c40:	beq	20cb8 <__assert_fail@plt+0xf564>
   20c44:	cmn	r0, #2
   20c48:	beq	21034 <__assert_fail@plt+0xf8e0>
   20c4c:	cmp	r0, #0
   20c50:	beq	2112c <__assert_fail@plt+0xf9d8>
   20c54:	ldr	r4, [fp, #-64]	; 0xffffffc0
   20c58:	sub	r0, fp, #88	; 0x58
   20c5c:	strb	r6, [fp, #-68]	; 0xffffffbc
   20c60:	bl	1140c <mbsinit@plt>
   20c64:	strb	r6, [fp, #-80]	; 0xffffffb0
   20c68:	cmp	r0, #0
   20c6c:	strbne	r7, [fp, #-92]	; 0xffffffa4
   20c70:	cmp	r4, #0
   20c74:	bne	20f38 <__assert_fail@plt+0xf7e4>
   20c78:	ldr	r0, [fp, #-216]	; 0xffffff28
   20c7c:	bl	223f0 <__assert_fail@plt+0x10c9c>
   20c80:	mov	r0, #1
   20c84:	sub	sp, fp, #32
   20c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c8c:	add	r3, r0, #29
   20c90:	bic	r3, r3, #7
   20c94:	sub	sp, sp, r3
   20c98:	add	r3, sp, #15
   20c9c:	bic	r3, r3, #15
   20ca0:	str	r3, [fp, #-216]	; 0xffffff28
   20ca4:	b	209f0 <__assert_fail@plt+0xf29c>
   20ca8:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   20cac:	cmp	r3, #0
   20cb0:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   20cb4:	bne	20c70 <__assert_fail@plt+0xf51c>
   20cb8:	add	r3, r8, r8, lsl #2
   20cbc:	add	r3, sl, r3, lsl #3
   20cc0:	ldr	r2, [r3, #4]
   20cc4:	ldr	r4, [fp, #-72]	; 0xffffffb8
   20cc8:	cmp	r2, r4
   20ccc:	beq	20fc8 <__assert_fail@plt+0xf874>
   20cd0:	cmp	r8, #0
   20cd4:	beq	20f80 <__assert_fail@plt+0xf82c>
   20cd8:	ldr	r3, [fp, #-212]	; 0xffffff2c
   20cdc:	ldr	r5, [r3, r8, lsl #2]
   20ce0:	cmp	r5, #0
   20ce4:	sub	r8, r8, r5
   20ce8:	beq	20ca8 <__assert_fail@plt+0xf554>
   20cec:	ldrb	r3, [fp, #-136]	; 0xffffff78
   20cf0:	cmp	r3, #0
   20cf4:	bne	20da0 <__assert_fail@plt+0xf64c>
   20cf8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   20cfc:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   20d00:	cmp	r3, #0
   20d04:	bne	20d38 <__assert_fail@plt+0xf5e4>
   20d08:	ldrb	r3, [r4]
   20d0c:	and	r2, r3, #31
   20d10:	lsr	r3, r3, #5
   20d14:	ldr	r3, [r9, r3, lsl #2]
   20d18:	lsr	r3, r3, r2
   20d1c:	tst	r3, #1
   20d20:	bne	20dd4 <__assert_fail@plt+0xf680>
   20d24:	sub	r0, fp, #144	; 0x90
   20d28:	bl	1140c <mbsinit@plt>
   20d2c:	cmp	r0, #0
   20d30:	beq	211a4 <__assert_fail@plt+0xfa50>
   20d34:	strb	r6, [fp, #-148]	; 0xffffff6c
   20d38:	bl	114fc <__ctype_get_mb_cur_max@plt>
   20d3c:	mov	r1, r0
   20d40:	mov	r0, r4
   20d44:	bl	1ed54 <__assert_fail@plt+0xd600>
   20d48:	sub	r3, fp, #144	; 0x90
   20d4c:	mov	r1, r4
   20d50:	mov	r2, r0
   20d54:	sub	r0, fp, #120	; 0x78
   20d58:	bl	207c8 <__assert_fail@plt+0xf074>
   20d5c:	cmn	r0, #1
   20d60:	str	r0, [fp, #-128]	; 0xffffff80
   20d64:	beq	20df0 <__assert_fail@plt+0xf69c>
   20d68:	cmn	r0, #2
   20d6c:	beq	20e04 <__assert_fail@plt+0xf6b0>
   20d70:	cmp	r0, #0
   20d74:	beq	20e20 <__assert_fail@plt+0xf6cc>
   20d78:	ldr	r4, [fp, #-120]	; 0xffffff88
   20d7c:	sub	r0, fp, #144	; 0x90
   20d80:	strb	r6, [fp, #-124]	; 0xffffff84
   20d84:	bl	1140c <mbsinit@plt>
   20d88:	strb	r6, [fp, #-136]	; 0xffffff78
   20d8c:	cmp	r0, #0
   20d90:	strbne	r7, [fp, #-148]	; 0xffffff6c
   20d94:	cmp	r4, #0
   20d98:	bne	20db0 <__assert_fail@plt+0xf65c>
   20d9c:	bl	11748 <abort@plt>
   20da0:	ldrb	r3, [fp, #-124]	; 0xffffff84
   20da4:	cmp	r3, #0
   20da8:	ldrne	r4, [fp, #-120]	; 0xffffff88
   20dac:	bne	20d94 <__assert_fail@plt+0xf640>
   20db0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   20db4:	ldr	r3, [fp, #-128]	; 0xffffff80
   20db8:	subs	r5, r5, #1
   20dbc:	add	r4, r4, r3
   20dc0:	strb	r7, [fp, #-136]	; 0xffffff78
   20dc4:	str	r4, [fp, #-132]	; 0xffffff7c
   20dc8:	ldrbeq	r3, [fp, #-80]	; 0xffffffb0
   20dcc:	bne	20cfc <__assert_fail@plt+0xf5a8>
   20dd0:	b	20bc0 <__assert_fail@plt+0xf46c>
   20dd4:	str	r6, [fp, #-128]	; 0xffffff80
   20dd8:	ldrb	r3, [r4]
   20ddc:	strb	r6, [fp, #-124]	; 0xffffff84
   20de0:	strb	r6, [fp, #-136]	; 0xffffff78
   20de4:	str	r3, [fp, #-120]	; 0xffffff88
   20de8:	mov	r4, r3
   20dec:	b	20d94 <__assert_fail@plt+0xf640>
   20df0:	str	r6, [fp, #-128]	; 0xffffff80
   20df4:	strb	r7, [fp, #-124]	; 0xffffff84
   20df8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   20dfc:	mov	r3, r6
   20e00:	b	20db8 <__assert_fail@plt+0xf664>
   20e04:	ldr	r4, [fp, #-132]	; 0xffffff7c
   20e08:	mov	r0, r4
   20e0c:	bl	115b0 <strlen@plt>
   20e10:	strb	r7, [fp, #-124]	; 0xffffff84
   20e14:	str	r0, [fp, #-128]	; 0xffffff80
   20e18:	mov	r3, r0
   20e1c:	b	20db8 <__assert_fail@plt+0xf664>
   20e20:	ldr	r4, [fp, #-132]	; 0xffffff7c
   20e24:	str	r6, [fp, #-128]	; 0xffffff80
   20e28:	ldrb	r3, [r4]
   20e2c:	cmp	r3, #0
   20e30:	bne	211b8 <__assert_fail@plt+0xfa64>
   20e34:	ldr	r4, [fp, #-120]	; 0xffffff88
   20e38:	cmp	r4, #0
   20e3c:	beq	20d7c <__assert_fail@plt+0xf628>
   20e40:	ldr	r3, [pc, #904]	; 211d0 <__assert_fail@plt+0xfa7c>
   20e44:	mov	r2, #172	; 0xac
   20e48:	ldr	r1, [pc, #900]	; 211d4 <__assert_fail@plt+0xfa80>
   20e4c:	ldr	r0, [pc, #900]	; 211d8 <__assert_fail@plt+0xfa84>
   20e50:	bl	11754 <__assert_fail@plt>
   20e54:	sub	r0, fp, #200	; 0xc8
   20e58:	bl	1140c <mbsinit@plt>
   20e5c:	cmp	r0, #0
   20e60:	beq	211a4 <__assert_fail@plt+0xfa50>
   20e64:	strb	r7, [fp, #-204]	; 0xffffff34
   20e68:	bl	114fc <__ctype_get_mb_cur_max@plt>
   20e6c:	mov	r1, r0
   20e70:	mov	r0, r4
   20e74:	bl	1ed54 <__assert_fail@plt+0xd600>
   20e78:	sub	r3, fp, #200	; 0xc8
   20e7c:	mov	r1, r4
   20e80:	mov	r2, r0
   20e84:	sub	r0, fp, #176	; 0xb0
   20e88:	bl	207c8 <__assert_fail@plt+0xf074>
   20e8c:	cmn	r0, #1
   20e90:	str	r0, [fp, #-184]	; 0xffffff48
   20e94:	strbeq	r8, [fp, #-180]	; 0xffffff4c
   20e98:	streq	r7, [fp, #-184]	; 0xffffff48
   20e9c:	beq	20f74 <__assert_fail@plt+0xf820>
   20ea0:	cmn	r0, #2
   20ea4:	beq	20f64 <__assert_fail@plt+0xf810>
   20ea8:	cmp	r0, #0
   20eac:	beq	21010 <__assert_fail@plt+0xf8bc>
   20eb0:	ldr	r4, [fp, #-176]	; 0xffffff50
   20eb4:	sub	r0, fp, #200	; 0xc8
   20eb8:	strb	r7, [fp, #-180]	; 0xffffff4c
   20ebc:	bl	1140c <mbsinit@plt>
   20ec0:	strb	r7, [fp, #-192]	; 0xffffff40
   20ec4:	cmp	r0, #0
   20ec8:	strbne	r8, [fp, #-204]	; 0xffffff34
   20ecc:	cmp	r4, #0
   20ed0:	beq	20a6c <__assert_fail@plt+0xf318>
   20ed4:	mov	r9, r7
   20ed8:	ldr	r4, [fp, #-188]	; 0xffffff44
   20edc:	sub	r3, fp, #172	; 0xac
   20ee0:	cmp	r4, r3
   20ee4:	strne	r4, [r6, #-16]
   20ee8:	ldrne	r5, [fp, #-184]	; 0xffffff48
   20eec:	beq	210f4 <__assert_fail@plt+0xf9a0>
   20ef0:	cmp	r9, #0
   20ef4:	add	r4, r4, r5
   20ef8:	ldrne	r3, [fp, #-176]	; 0xffffff50
   20efc:	str	r5, [r6, #-12]
   20f00:	strb	r9, [r6, #-8]
   20f04:	strne	r3, [r6, #-4]
   20f08:	str	r4, [fp, #-188]	; 0xffffff44
   20f0c:	add	r6, r6, #40	; 0x28
   20f10:	strb	r8, [fp, #-192]	; 0xffffff40
   20f14:	b	20a24 <__assert_fail@plt+0xf2d0>
   20f18:	str	r6, [fp, #-72]	; 0xffffffb8
   20f1c:	ldrb	r3, [r5]
   20f20:	strb	r6, [fp, #-68]	; 0xffffffbc
   20f24:	strb	r6, [fp, #-80]	; 0xffffffb0
   20f28:	mov	r4, r3
   20f2c:	cmp	r4, #0
   20f30:	str	r3, [fp, #-64]	; 0xffffffc0
   20f34:	beq	20c78 <__assert_fail@plt+0xf524>
   20f38:	add	r3, r8, r8, lsl #2
   20f3c:	add	r3, sl, r3, lsl #3
   20f40:	ldrb	r2, [r3, #8]
   20f44:	cmp	r2, #0
   20f48:	beq	20cc0 <__assert_fail@plt+0xf56c>
   20f4c:	ldr	r3, [r3, #12]
   20f50:	cmp	r4, r3
   20f54:	bne	20cd0 <__assert_fail@plt+0xf57c>
   20f58:	ldr	r4, [fp, #-72]	; 0xffffffb8
   20f5c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   20f60:	b	20fe4 <__assert_fail@plt+0xf890>
   20f64:	ldr	r0, [fp, #-188]	; 0xffffff44
   20f68:	bl	115b0 <strlen@plt>
   20f6c:	strb	r8, [fp, #-180]	; 0xffffff4c
   20f70:	str	r0, [fp, #-184]	; 0xffffff48
   20f74:	strb	r7, [fp, #-192]	; 0xffffff40
   20f78:	mov	r9, r8
   20f7c:	b	20ed8 <__assert_fail@plt+0xf784>
   20f80:	ldrb	r3, [fp, #-136]	; 0xffffff78
   20f84:	cmp	r3, #0
   20f88:	beq	2104c <__assert_fail@plt+0xf8f8>
   20f8c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   20f90:	cmp	r3, #0
   20f94:	ldrne	r4, [fp, #-120]	; 0xffffff88
   20f98:	bne	210e8 <__assert_fail@plt+0xf994>
   20f9c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   20fa0:	ldr	r3, [fp, #-128]	; 0xffffff80
   20fa4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   20fa8:	add	r4, r4, r3
   20fac:	ldr	r3, [fp, #-72]	; 0xffffffb8
   20fb0:	strb	r7, [fp, #-136]	; 0xffffff78
   20fb4:	add	r5, r5, r3
   20fb8:	strb	r7, [fp, #-80]	; 0xffffffb0
   20fbc:	str	r4, [fp, #-132]	; 0xffffff7c
   20fc0:	str	r5, [fp, #-76]	; 0xffffffb4
   20fc4:	b	20bcc <__assert_fail@plt+0xf478>
   20fc8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   20fcc:	ldr	r0, [r3]
   20fd0:	mov	r1, r5
   20fd4:	mov	r2, r4
   20fd8:	bl	11418 <memcmp@plt>
   20fdc:	cmp	r0, #0
   20fe0:	bne	20cd0 <__assert_fail@plt+0xf57c>
   20fe4:	ldr	r3, [fp, #-208]	; 0xffffff30
   20fe8:	add	r8, r8, #1
   20fec:	add	r5, r5, r4
   20ff0:	cmp	r3, r8
   20ff4:	str	r5, [fp, #-76]	; 0xffffffb4
   20ff8:	strb	r7, [fp, #-80]	; 0xffffffb0
   20ffc:	bne	20bcc <__assert_fail@plt+0xf478>
   21000:	ldr	r2, [fp, #-220]	; 0xffffff24
   21004:	ldr	r3, [fp, #-132]	; 0xffffff7c
   21008:	str	r3, [r2]
   2100c:	b	20c78 <__assert_fail@plt+0xf524>
   21010:	ldr	r3, [fp, #-188]	; 0xffffff44
   21014:	str	r7, [fp, #-184]	; 0xffffff48
   21018:	ldrb	r3, [r3]
   2101c:	cmp	r3, #0
   21020:	bne	211b8 <__assert_fail@plt+0xfa64>
   21024:	ldr	r4, [fp, #-176]	; 0xffffff50
   21028:	cmp	r4, #0
   2102c:	beq	20eb4 <__assert_fail@plt+0xf760>
   21030:	b	20e40 <__assert_fail@plt+0xf6ec>
   21034:	ldr	r0, [fp, #-76]	; 0xffffffb4
   21038:	bl	115b0 <strlen@plt>
   2103c:	strb	r7, [fp, #-68]	; 0xffffffbc
   21040:	strb	r6, [fp, #-80]	; 0xffffffb0
   21044:	str	r0, [fp, #-72]	; 0xffffffb8
   21048:	b	20cb8 <__assert_fail@plt+0xf564>
   2104c:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   21050:	ldr	r4, [fp, #-132]	; 0xffffff7c
   21054:	cmp	r3, #0
   21058:	bne	2108c <__assert_fail@plt+0xf938>
   2105c:	ldrb	r3, [r4]
   21060:	and	r2, r3, #31
   21064:	lsr	r3, r3, #5
   21068:	ldr	r3, [r9, r3, lsl #2]
   2106c:	lsr	r3, r3, r2
   21070:	tst	r3, #1
   21074:	bne	21110 <__assert_fail@plt+0xf9bc>
   21078:	sub	r0, fp, #144	; 0x90
   2107c:	bl	1140c <mbsinit@plt>
   21080:	cmp	r0, #0
   21084:	beq	211a4 <__assert_fail@plt+0xfa50>
   21088:	strb	r6, [fp, #-148]	; 0xffffff6c
   2108c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   21090:	mov	r1, r0
   21094:	mov	r0, r4
   21098:	bl	1ed54 <__assert_fail@plt+0xd600>
   2109c:	sub	r3, fp, #144	; 0x90
   210a0:	mov	r1, r4
   210a4:	mov	r2, r0
   210a8:	sub	r0, fp, #120	; 0x78
   210ac:	bl	207c8 <__assert_fail@plt+0xf074>
   210b0:	cmn	r0, #1
   210b4:	str	r0, [fp, #-128]	; 0xffffff80
   210b8:	beq	21150 <__assert_fail@plt+0xf9fc>
   210bc:	cmn	r0, #2
   210c0:	beq	21164 <__assert_fail@plt+0xfa10>
   210c4:	cmp	r0, #0
   210c8:	beq	21180 <__assert_fail@plt+0xfa2c>
   210cc:	ldr	r4, [fp, #-120]	; 0xffffff88
   210d0:	sub	r0, fp, #144	; 0x90
   210d4:	strb	r6, [fp, #-124]	; 0xffffff84
   210d8:	bl	1140c <mbsinit@plt>
   210dc:	strb	r6, [fp, #-136]	; 0xffffff78
   210e0:	cmp	r0, #0
   210e4:	strbne	r7, [fp, #-148]	; 0xffffff6c
   210e8:	cmp	r4, #0
   210ec:	beq	20d9c <__assert_fail@plt+0xf648>
   210f0:	b	20f9c <__assert_fail@plt+0xf848>
   210f4:	ldr	r5, [fp, #-184]	; 0xffffff48
   210f8:	sub	r1, fp, #172	; 0xac
   210fc:	mov	r2, r5
   21100:	mov	r0, r6
   21104:	bl	113f4 <memcpy@plt>
   21108:	str	r6, [r6, #-16]
   2110c:	b	20ef0 <__assert_fail@plt+0xf79c>
   21110:	str	r6, [fp, #-128]	; 0xffffff80
   21114:	ldrb	r3, [r4]
   21118:	strb	r6, [fp, #-124]	; 0xffffff84
   2111c:	strb	r6, [fp, #-136]	; 0xffffff78
   21120:	str	r3, [fp, #-120]	; 0xffffff88
   21124:	mov	r4, r3
   21128:	b	210e8 <__assert_fail@plt+0xf994>
   2112c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   21130:	str	r6, [fp, #-72]	; 0xffffffb8
   21134:	ldrb	r3, [r5]
   21138:	cmp	r3, #0
   2113c:	bne	211b8 <__assert_fail@plt+0xfa64>
   21140:	ldr	r4, [fp, #-64]	; 0xffffffc0
   21144:	cmp	r4, #0
   21148:	beq	20c58 <__assert_fail@plt+0xf504>
   2114c:	b	20e40 <__assert_fail@plt+0xf6ec>
   21150:	str	r6, [fp, #-128]	; 0xffffff80
   21154:	strb	r7, [fp, #-124]	; 0xffffff84
   21158:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2115c:	mov	r3, r6
   21160:	b	20fa4 <__assert_fail@plt+0xf850>
   21164:	ldr	r4, [fp, #-132]	; 0xffffff7c
   21168:	mov	r0, r4
   2116c:	bl	115b0 <strlen@plt>
   21170:	strb	r7, [fp, #-124]	; 0xffffff84
   21174:	str	r0, [fp, #-128]	; 0xffffff80
   21178:	mov	r3, r0
   2117c:	b	20fa4 <__assert_fail@plt+0xf850>
   21180:	ldr	r4, [fp, #-132]	; 0xffffff7c
   21184:	str	r6, [fp, #-128]	; 0xffffff80
   21188:	ldrb	r3, [r4]
   2118c:	cmp	r3, #0
   21190:	bne	211b8 <__assert_fail@plt+0xfa64>
   21194:	ldr	r4, [fp, #-120]	; 0xffffff88
   21198:	cmp	r4, #0
   2119c:	beq	210d0 <__assert_fail@plt+0xf97c>
   211a0:	b	20e40 <__assert_fail@plt+0xf6ec>
   211a4:	ldr	r3, [pc, #36]	; 211d0 <__assert_fail@plt+0xfa7c>
   211a8:	mov	r2, #143	; 0x8f
   211ac:	ldr	r1, [pc, #32]	; 211d4 <__assert_fail@plt+0xfa80>
   211b0:	ldr	r0, [pc, #36]	; 211dc <__assert_fail@plt+0xfa88>
   211b4:	bl	11754 <__assert_fail@plt>
   211b8:	ldr	r3, [pc, #16]	; 211d0 <__assert_fail@plt+0xfa7c>
   211bc:	mov	r2, #171	; 0xab
   211c0:	ldr	r1, [pc, #12]	; 211d4 <__assert_fail@plt+0xfa80>
   211c4:	ldr	r0, [pc, #20]	; 211e0 <__assert_fail@plt+0xfa8c>
   211c8:	bl	11754 <__assert_fail@plt>
   211cc:	muleq	r2, ip, r7
   211d0:			; <UNDEFINED> instruction: 0x000267bc
   211d4:	strdeq	r6, [r2], -r8
   211d8:	andeq	r6, r2, r8, lsr r3
   211dc:	andeq	r6, r2, r8, lsl #6
   211e0:	andeq	r6, r2, r0, lsr #6
   211e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211e8:	sub	sp, sp, #300	; 0x12c
   211ec:	mov	fp, r1
   211f0:	str	r0, [sp, #4]
   211f4:	bl	114fc <__ctype_get_mb_cur_max@plt>
   211f8:	cmp	r0, #1
   211fc:	bls	213bc <__assert_fail@plt+0xfc68>
   21200:	ldrb	r2, [fp]
   21204:	ldr	r9, [pc, #3016]	; 21dd4 <__assert_fail@plt+0x10680>
   21208:	mov	r1, #0
   2120c:	and	r0, r2, #31
   21210:	lsr	r3, r2, #5
   21214:	str	fp, [sp, #32]
   21218:	ldr	r3, [r9, r3, lsl #2]
   2121c:	str	r1, [sp, #24]
   21220:	strb	r1, [sp, #16]
   21224:	lsr	r3, r3, r0
   21228:	ands	r4, r3, #1
   2122c:	str	r1, [sp, #20]
   21230:	strb	r1, [sp, #28]
   21234:	beq	21320 <__assert_fail@plt+0xfbcc>
   21238:	mov	r3, #1
   2123c:	mov	r4, r2
   21240:	str	r3, [sp, #36]	; 0x24
   21244:	strb	r3, [sp, #40]	; 0x28
   21248:	cmp	r4, #0
   2124c:	mov	r3, #1
   21250:	str	r2, [sp, #44]	; 0x2c
   21254:	strb	r3, [sp, #28]
   21258:	beq	213b0 <__assert_fail@plt+0xfc5c>
   2125c:	ldr	r1, [sp, #4]
   21260:	mov	r3, #0
   21264:	mov	sl, #1
   21268:	str	fp, [sp, #88]	; 0x58
   2126c:	str	fp, [sp, #12]
   21270:	mov	r8, r3
   21274:	mov	r7, r3
   21278:	mov	r5, sl
   2127c:	mov	r4, r1
   21280:	mov	fp, r3
   21284:	str	r1, [sp, #144]	; 0x90
   21288:	strb	r3, [sp, #72]	; 0x48
   2128c:	str	r3, [sp, #76]	; 0x4c
   21290:	strb	r3, [sp, #84]	; 0x54
   21294:	strb	r3, [sp, #128]	; 0x80
   21298:	str	r3, [sp, #132]	; 0x84
   2129c:	strb	r3, [sp, #140]	; 0x8c
   212a0:	str	r3, [sp, #8]
   212a4:	str	r3, [sp, #80]	; 0x50
   212a8:	str	r3, [sp, #136]	; 0x88
   212ac:	ldrb	r3, [sp, #128]	; 0x80
   212b0:	cmp	r3, #0
   212b4:	bne	21508 <__assert_fail@plt+0xfdb4>
   212b8:	ldrb	r3, [r4]
   212bc:	and	r2, r3, #31
   212c0:	lsr	r3, r3, #5
   212c4:	ldr	r3, [r9, r3, lsl #2]
   212c8:	lsr	r3, r3, r2
   212cc:	tst	r3, #1
   212d0:	beq	214f4 <__assert_fail@plt+0xfda0>
   212d4:	str	r5, [sp, #148]	; 0x94
   212d8:	ldrb	r4, [r4]
   212dc:	strb	r5, [sp, #152]	; 0x98
   212e0:	str	r4, [sp, #156]	; 0x9c
   212e4:	cmp	r4, #0
   212e8:	strb	r5, [sp, #140]	; 0x8c
   212ec:	beq	214e0 <__assert_fail@plt+0xfd8c>
   212f0:	cmp	fp, #9
   212f4:	movls	r2, #0
   212f8:	andhi	r2, sl, #1
   212fc:	cmp	r2, #0
   21300:	beq	21d24 <__assert_fail@plt+0x105d0>
   21304:	add	r3, fp, fp, lsl #2
   21308:	cmp	r8, r3
   2130c:	bcs	215cc <__assert_fail@plt+0xfe78>
   21310:	add	r3, r8, #1
   21314:	mov	sl, r2
   21318:	ldr	r8, [sp, #8]
   2131c:	b	216dc <__assert_fail@plt+0xff88>
   21320:	add	r0, sp, #20
   21324:	bl	1140c <mbsinit@plt>
   21328:	cmp	r0, #0
   2132c:	beq	21d84 <__assert_fail@plt+0x10630>
   21330:	mov	r5, #1
   21334:	strb	r5, [sp, #16]
   21338:	bl	114fc <__ctype_get_mb_cur_max@plt>
   2133c:	mov	r1, r0
   21340:	mov	r0, fp
   21344:	bl	1ed54 <__assert_fail@plt+0xd600>
   21348:	add	r3, sp, #20
   2134c:	mov	r1, fp
   21350:	mov	r2, r0
   21354:	add	r0, sp, #44	; 0x2c
   21358:	bl	207c8 <__assert_fail@plt+0xf074>
   2135c:	cmn	r0, #1
   21360:	str	r0, [sp, #36]	; 0x24
   21364:	strbeq	r4, [sp, #40]	; 0x28
   21368:	streq	r5, [sp, #36]	; 0x24
   2136c:	beq	217a4 <__assert_fail@plt+0x10050>
   21370:	cmn	r0, #2
   21374:	beq	21794 <__assert_fail@plt+0x10040>
   21378:	cmp	r0, #0
   2137c:	beq	21cc4 <__assert_fail@plt+0x10570>
   21380:	ldr	r4, [sp, #44]	; 0x2c
   21384:	mov	r3, #1
   21388:	add	r0, sp, #20
   2138c:	strb	r3, [sp, #40]	; 0x28
   21390:	bl	1140c <mbsinit@plt>
   21394:	cmp	r0, #0
   21398:	movne	r3, #0
   2139c:	strbne	r3, [sp, #16]
   213a0:	mov	r3, #1
   213a4:	cmp	r4, #0
   213a8:	strb	r3, [sp, #28]
   213ac:	bne	2125c <__assert_fail@plt+0xfb08>
   213b0:	ldr	r0, [sp, #4]
   213b4:	add	sp, sp, #300	; 0x12c
   213b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213bc:	ldrb	r7, [fp]
   213c0:	cmp	r7, #0
   213c4:	beq	213b0 <__assert_fail@plt+0xfc5c>
   213c8:	ldr	r5, [sp, #4]
   213cc:	add	r8, fp, #1
   213d0:	ldrb	r3, [r5]
   213d4:	cmp	r3, #0
   213d8:	beq	214e0 <__assert_fail@plt+0xfd8c>
   213dc:	mov	r6, #0
   213e0:	mov	r4, r6
   213e4:	mov	r9, r6
   213e8:	mov	sl, fp
   213ec:	mov	lr, #1
   213f0:	ldrb	r3, [r5]
   213f4:	mov	r0, r5
   213f8:	add	r6, r6, #1
   213fc:	cmp	r3, r7
   21400:	add	r5, r5, #1
   21404:	beq	2148c <__assert_fail@plt+0xfd38>
   21408:	ldrb	r3, [r5]
   2140c:	cmp	r3, #0
   21410:	beq	214e0 <__assert_fail@plt+0xfd8c>
   21414:	add	r4, r4, #1
   21418:	cmp	r6, #9
   2141c:	movls	r3, #0
   21420:	andhi	r3, lr, #1
   21424:	cmp	r3, #0
   21428:	beq	213f0 <__assert_fail@plt+0xfc9c>
   2142c:	add	r2, r6, r6, lsl #2
   21430:	cmp	r4, r2
   21434:	bcc	214ec <__assert_fail@plt+0xfd98>
   21438:	cmp	sl, #0
   2143c:	str	r3, [sp, #4]
   21440:	beq	21460 <__assert_fail@plt+0xfd0c>
   21444:	mov	r0, sl
   21448:	sub	r1, r4, r9
   2144c:	bl	11670 <strnlen@plt>
   21450:	ldrb	r2, [sl, r0]!
   21454:	cmp	r2, #0
   21458:	bne	2177c <__assert_fail@plt+0x10028>
   2145c:	mov	r9, r4
   21460:	mov	r0, fp
   21464:	bl	115b0 <strlen@plt>
   21468:	add	r3, sp, #240	; 0xf0
   2146c:	mov	r1, fp
   21470:	mov	r2, r0
   21474:	mov	r0, r5
   21478:	bl	2081c <__assert_fail@plt+0xf0c8>
   2147c:	subs	lr, r0, #0
   21480:	bne	21d1c <__assert_fail@plt+0x105c8>
   21484:	mov	sl, lr
   21488:	b	213f0 <__assert_fail@plt+0xfc9c>
   2148c:	ldrb	r3, [fp, #1]
   21490:	cmp	r3, #0
   21494:	beq	213b4 <__assert_fail@plt+0xfc60>
   21498:	ldrb	r2, [r5]
   2149c:	cmp	r2, #0
   214a0:	beq	214e0 <__assert_fail@plt+0xfd8c>
   214a4:	cmp	r2, r3
   214a8:	add	r4, r4, #2
   214ac:	bne	21418 <__assert_fail@plt+0xfcc4>
   214b0:	mov	ip, r5
   214b4:	mov	r1, r8
   214b8:	b	214c8 <__assert_fail@plt+0xfd74>
   214bc:	cmp	r3, r2
   214c0:	add	r4, r4, #1
   214c4:	bne	21418 <__assert_fail@plt+0xfcc4>
   214c8:	ldrb	r3, [r1, #1]!
   214cc:	cmp	r3, #0
   214d0:	beq	213b4 <__assert_fail@plt+0xfc60>
   214d4:	ldrb	r2, [ip, #1]!
   214d8:	cmp	r2, #0
   214dc:	bne	214bc <__assert_fail@plt+0xfd68>
   214e0:	mov	r0, #0
   214e4:	add	sp, sp, #300	; 0x12c
   214e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214ec:	mov	lr, r3
   214f0:	b	213f0 <__assert_fail@plt+0xfc9c>
   214f4:	add	r0, sp, #132	; 0x84
   214f8:	bl	1140c <mbsinit@plt>
   214fc:	cmp	r0, #0
   21500:	beq	21d84 <__assert_fail@plt+0x10630>
   21504:	strb	r5, [sp, #128]	; 0x80
   21508:	bl	114fc <__ctype_get_mb_cur_max@plt>
   2150c:	mov	r1, r0
   21510:	mov	r0, r4
   21514:	bl	1ed54 <__assert_fail@plt+0xd600>
   21518:	add	r3, sp, #132	; 0x84
   2151c:	mov	r1, r4
   21520:	mov	r2, r0
   21524:	add	r0, sp, #156	; 0x9c
   21528:	bl	207c8 <__assert_fail@plt+0xf074>
   2152c:	cmn	r0, #1
   21530:	str	r0, [sp, #148]	; 0x94
   21534:	strbeq	r7, [sp, #152]	; 0x98
   21538:	streq	r5, [sp, #148]	; 0x94
   2153c:	beq	2157c <__assert_fail@plt+0xfe28>
   21540:	cmn	r0, #2
   21544:	beq	2156c <__assert_fail@plt+0xfe18>
   21548:	cmp	r0, #0
   2154c:	beq	21c18 <__assert_fail@plt+0x104c4>
   21550:	ldr	r4, [sp, #156]	; 0x9c
   21554:	add	r0, sp, #132	; 0x84
   21558:	strb	r5, [sp, #152]	; 0x98
   2155c:	bl	1140c <mbsinit@plt>
   21560:	cmp	r0, #0
   21564:	strbne	r7, [sp, #128]	; 0x80
   21568:	b	212e4 <__assert_fail@plt+0xfb90>
   2156c:	ldr	r0, [sp, #144]	; 0x90
   21570:	bl	115b0 <strlen@plt>
   21574:	strb	r7, [sp, #152]	; 0x98
   21578:	str	r0, [sp, #148]	; 0x94
   2157c:	cmp	fp, #9
   21580:	movls	r3, #0
   21584:	andhi	r3, sl, #1
   21588:	cmp	r3, #0
   2158c:	strb	r5, [sp, #140]	; 0x8c
   21590:	addeq	r8, r8, #1
   21594:	bne	215c0 <__assert_fail@plt+0xfe6c>
   21598:	ldr	r4, [sp, #148]	; 0x94
   2159c:	ldr	r3, [sp, #36]	; 0x24
   215a0:	ldr	r6, [sp, #144]	; 0x90
   215a4:	cmp	r4, r3
   215a8:	beq	217bc <__assert_fail@plt+0x10068>
   215ac:	add	r4, r6, r4
   215b0:	str	r4, [sp, #144]	; 0x90
   215b4:	strb	r7, [sp, #140]	; 0x8c
   215b8:	add	fp, fp, #1
   215bc:	b	212ac <__assert_fail@plt+0xfb58>
   215c0:	add	r2, fp, fp, lsl #2
   215c4:	cmp	r8, r2
   215c8:	bcc	21d98 <__assert_fail@plt+0x10644>
   215cc:	ldr	r3, [sp, #8]
   215d0:	subs	r6, r8, r3
   215d4:	ldrb	r3, [sp, #84]	; 0x54
   215d8:	beq	21db8 <__assert_fail@plt+0x10664>
   215dc:	cmp	r3, #0
   215e0:	beq	2178c <__assert_fail@plt+0x10038>
   215e4:	ldrb	r3, [sp, #96]	; 0x60
   215e8:	cmp	r3, #0
   215ec:	ldrne	r4, [sp, #100]	; 0x64
   215f0:	bne	216ac <__assert_fail@plt+0xff58>
   215f4:	ldr	r4, [sp, #88]	; 0x58
   215f8:	ldr	r3, [sp, #92]	; 0x5c
   215fc:	add	r4, r4, r3
   21600:	subs	r6, r6, #1
   21604:	strb	r7, [sp, #84]	; 0x54
   21608:	str	r4, [sp, #88]	; 0x58
   2160c:	mov	sl, r4
   21610:	beq	218f4 <__assert_fail@plt+0x101a0>
   21614:	ldrb	r3, [sp, #72]	; 0x48
   21618:	cmp	r3, #0
   2161c:	bne	21650 <__assert_fail@plt+0xfefc>
   21620:	ldrb	r3, [r4]
   21624:	and	r2, r3, #31
   21628:	lsr	r3, r3, #5
   2162c:	ldr	r3, [r9, r3, lsl #2]
   21630:	lsr	r3, r3, r2
   21634:	tst	r3, #1
   21638:	bne	2170c <__assert_fail@plt+0xffb8>
   2163c:	add	r0, sp, #76	; 0x4c
   21640:	bl	1140c <mbsinit@plt>
   21644:	cmp	r0, #0
   21648:	beq	21d84 <__assert_fail@plt+0x10630>
   2164c:	strb	r5, [sp, #72]	; 0x48
   21650:	bl	114fc <__ctype_get_mb_cur_max@plt>
   21654:	mov	r1, r0
   21658:	mov	r0, r4
   2165c:	bl	1ed54 <__assert_fail@plt+0xd600>
   21660:	add	r3, sp, #76	; 0x4c
   21664:	mov	r1, r4
   21668:	mov	r2, r0
   2166c:	add	r0, sp, #100	; 0x64
   21670:	bl	207c8 <__assert_fail@plt+0xf074>
   21674:	cmn	r0, #1
   21678:	str	r0, [sp, #92]	; 0x5c
   2167c:	beq	21728 <__assert_fail@plt+0xffd4>
   21680:	cmn	r0, #2
   21684:	beq	2173c <__assert_fail@plt+0xffe8>
   21688:	cmp	r0, #0
   2168c:	beq	21758 <__assert_fail@plt+0x10004>
   21690:	ldr	r4, [sp, #100]	; 0x64
   21694:	add	r0, sp, #76	; 0x4c
   21698:	strb	r5, [sp, #96]	; 0x60
   2169c:	bl	1140c <mbsinit@plt>
   216a0:	strb	r5, [sp, #84]	; 0x54
   216a4:	cmp	r0, #0
   216a8:	strbne	r7, [sp, #72]	; 0x48
   216ac:	cmp	r4, #0
   216b0:	bne	215f4 <__assert_fail@plt+0xfea0>
   216b4:	add	r2, sp, #240	; 0xf0
   216b8:	ldr	r1, [sp, #12]
   216bc:	ldr	r0, [sp, #4]
   216c0:	bl	20984 <__assert_fail@plt+0xf230>
   216c4:	subs	sl, r0, #0
   216c8:	bne	21d1c <__assert_fail@plt+0x105c8>
   216cc:	ldrb	r3, [sp, #152]	; 0x98
   216d0:	cmp	r3, #0
   216d4:	add	r3, r8, #1
   216d8:	beq	217b0 <__assert_fail@plt+0x1005c>
   216dc:	ldrb	r2, [sp, #40]	; 0x28
   216e0:	cmp	r2, #0
   216e4:	beq	217b0 <__assert_fail@plt+0x1005c>
   216e8:	ldr	r1, [sp, #156]	; 0x9c
   216ec:	ldr	r2, [sp, #44]	; 0x2c
   216f0:	str	r8, [sp, #8]
   216f4:	cmp	r1, r2
   216f8:	beq	21cbc <__assert_fail@plt+0x10568>
   216fc:	ldr	r6, [sp, #144]	; 0x90
   21700:	mov	r8, r3
   21704:	ldr	r4, [sp, #148]	; 0x94
   21708:	b	215ac <__assert_fail@plt+0xfe58>
   2170c:	str	r5, [sp, #92]	; 0x5c
   21710:	ldrb	r3, [r4]
   21714:	strb	r5, [sp, #96]	; 0x60
   21718:	strb	r5, [sp, #84]	; 0x54
   2171c:	str	r3, [sp, #100]	; 0x64
   21720:	mov	r4, r3
   21724:	b	216ac <__assert_fail@plt+0xff58>
   21728:	str	r5, [sp, #92]	; 0x5c
   2172c:	strb	r7, [sp, #96]	; 0x60
   21730:	ldr	r4, [sp, #88]	; 0x58
   21734:	mov	r3, r5
   21738:	b	215fc <__assert_fail@plt+0xfea8>
   2173c:	ldr	r4, [sp, #88]	; 0x58
   21740:	mov	r0, r4
   21744:	bl	115b0 <strlen@plt>
   21748:	strb	r7, [sp, #96]	; 0x60
   2174c:	str	r0, [sp, #92]	; 0x5c
   21750:	mov	r3, r0
   21754:	b	215fc <__assert_fail@plt+0xfea8>
   21758:	ldr	r4, [sp, #88]	; 0x58
   2175c:	str	r5, [sp, #92]	; 0x5c
   21760:	ldrb	r3, [r4]
   21764:	cmp	r3, #0
   21768:	bne	21da4 <__assert_fail@plt+0x10650>
   2176c:	ldr	r4, [sp, #100]	; 0x64
   21770:	cmp	r4, #0
   21774:	beq	21694 <__assert_fail@plt+0xff40>
   21778:	b	218dc <__assert_fail@plt+0x10188>
   2177c:	ldr	r3, [sp, #4]
   21780:	mov	r9, r4
   21784:	mov	lr, r3
   21788:	b	213f0 <__assert_fail@plt+0xfc9c>
   2178c:	ldr	r4, [sp, #88]	; 0x58
   21790:	b	21614 <__assert_fail@plt+0xfec0>
   21794:	ldr	r0, [sp, #32]
   21798:	bl	115b0 <strlen@plt>
   2179c:	strb	r4, [sp, #40]	; 0x28
   217a0:	str	r0, [sp, #36]	; 0x24
   217a4:	mov	r3, #1
   217a8:	strb	r3, [sp, #28]
   217ac:	b	2125c <__assert_fail@plt+0xfb08>
   217b0:	str	r8, [sp, #8]
   217b4:	mov	r8, r3
   217b8:	b	21598 <__assert_fail@plt+0xfe44>
   217bc:	mov	r2, r4
   217c0:	mov	r0, r6
   217c4:	ldr	r1, [sp, #32]
   217c8:	bl	11418 <memcmp@plt>
   217cc:	cmp	r0, #0
   217d0:	bne	215ac <__assert_fail@plt+0xfe58>
   217d4:	add	lr, sp, #128	; 0x80
   217d8:	add	ip, sp, #184	; 0xb8
   217dc:	ldm	lr!, {r0, r1, r2, r3}
   217e0:	stmia	ip!, {r0, r1, r2, r3}
   217e4:	ldm	lr!, {r0, r1, r2, r3}
   217e8:	strb	r7, [sp, #196]	; 0xc4
   217ec:	stmia	ip!, {r0, r1, r2, r3}
   217f0:	ldm	lr!, {r0, r1, r2, r3}
   217f4:	ldr	r4, [sp, #200]	; 0xc8
   217f8:	stmia	ip!, {r0, r1, r2, r3}
   217fc:	ldm	lr, {r0, r1}
   21800:	ldr	r3, [sp, #204]	; 0xcc
   21804:	add	r4, r4, r3
   21808:	stm	ip, {r0, r1}
   2180c:	str	r4, [sp, #200]	; 0xc8
   21810:	ldr	r3, [sp, #12]
   21814:	strb	r7, [sp, #240]	; 0xf0
   21818:	str	r3, [sp, #256]	; 0x100
   2181c:	ldrb	r3, [r3]
   21820:	str	r7, [sp, #244]	; 0xf4
   21824:	str	r7, [sp, #248]	; 0xf8
   21828:	and	r2, r3, #31
   2182c:	lsr	r1, r3, #5
   21830:	strb	r7, [sp, #252]	; 0xfc
   21834:	ldr	r6, [r9, r1, lsl #2]
   21838:	lsr	r6, r6, r2
   2183c:	ands	r6, r6, #1
   21840:	beq	21864 <__assert_fail@plt+0x10110>
   21844:	mov	r4, r3
   21848:	str	r5, [sp, #260]	; 0x104
   2184c:	str	r3, [sp, #268]	; 0x10c
   21850:	strb	r5, [sp, #264]	; 0x108
   21854:	cmp	r4, #0
   21858:	strb	r5, [sp, #252]	; 0xfc
   2185c:	bne	21948 <__assert_fail@plt+0x101f4>
   21860:	bl	11748 <abort@plt>
   21864:	add	r0, sp, #244	; 0xf4
   21868:	bl	1140c <mbsinit@plt>
   2186c:	cmp	r0, #0
   21870:	beq	21d84 <__assert_fail@plt+0x10630>
   21874:	strb	r5, [sp, #240]	; 0xf0
   21878:	bl	114fc <__ctype_get_mb_cur_max@plt>
   2187c:	ldr	r4, [sp, #12]
   21880:	mov	r1, r0
   21884:	mov	r0, r4
   21888:	bl	1ed54 <__assert_fail@plt+0xd600>
   2188c:	add	r3, sp, #244	; 0xf4
   21890:	mov	r1, r4
   21894:	mov	r2, r0
   21898:	add	r0, sp, #268	; 0x10c
   2189c:	bl	207c8 <__assert_fail@plt+0xf074>
   218a0:	cmn	r0, #1
   218a4:	str	r0, [sp, #260]	; 0x104
   218a8:	beq	21d30 <__assert_fail@plt+0x105dc>
   218ac:	cmn	r0, #2
   218b0:	beq	21d44 <__assert_fail@plt+0x105f0>
   218b4:	cmp	r0, #0
   218b8:	bne	21ce8 <__assert_fail@plt+0x10594>
   218bc:	ldr	r4, [sp, #256]	; 0x100
   218c0:	str	r5, [sp, #260]	; 0x104
   218c4:	ldrb	r3, [r4]
   218c8:	cmp	r3, #0
   218cc:	bne	21da4 <__assert_fail@plt+0x10650>
   218d0:	ldr	r4, [sp, #268]	; 0x10c
   218d4:	cmp	r4, #0
   218d8:	beq	21cec <__assert_fail@plt+0x10598>
   218dc:	ldr	r3, [pc, #1268]	; 21dd8 <__assert_fail@plt+0x10684>
   218e0:	mov	r2, #172	; 0xac
   218e4:	ldr	r1, [pc, #1264]	; 21ddc <__assert_fail@plt+0x10688>
   218e8:	ldr	r0, [pc, #1264]	; 21de0 <__assert_fail@plt+0x1068c>
   218ec:	bl	11754 <__assert_fail@plt>
   218f0:	ldr	sl, [sp, #88]	; 0x58
   218f4:	ldrb	r3, [sp, #72]	; 0x48
   218f8:	cmp	r3, #0
   218fc:	bne	21c50 <__assert_fail@plt+0x104fc>
   21900:	ldrb	r3, [sl]
   21904:	and	r2, r3, #31
   21908:	lsr	r3, r3, #5
   2190c:	ldr	r3, [r9, r3, lsl #2]
   21910:	lsr	r3, r3, r2
   21914:	tst	r3, #1
   21918:	beq	21c3c <__assert_fail@plt+0x104e8>
   2191c:	str	r5, [sp, #92]	; 0x5c
   21920:	ldrb	r3, [sl]
   21924:	strb	r5, [sp, #96]	; 0x60
   21928:	strb	r5, [sp, #84]	; 0x54
   2192c:	mov	r4, r3
   21930:	str	r3, [sp, #100]	; 0x64
   21934:	cmp	r4, #0
   21938:	beq	216b4 <__assert_fail@plt+0xff60>
   2193c:	ldrb	r3, [sp, #152]	; 0x98
   21940:	mov	sl, r5
   21944:	b	216d0 <__assert_fail@plt+0xff7c>
   21948:	ldr	r4, [sp, #256]	; 0x100
   2194c:	ldr	r3, [sp, #260]	; 0x104
   21950:	add	r4, r4, r3
   21954:	ldrb	r3, [sp, #240]	; 0xf0
   21958:	strb	r7, [sp, #252]	; 0xfc
   2195c:	add	r8, r8, #1
   21960:	cmp	r3, #0
   21964:	str	r4, [sp, #256]	; 0x100
   21968:	bne	21b08 <__assert_fail@plt+0x103b4>
   2196c:	ldrb	r3, [r4]
   21970:	and	r2, r3, #31
   21974:	lsr	r3, r3, #5
   21978:	ldr	r3, [r9, r3, lsl #2]
   2197c:	lsr	r3, r3, r2
   21980:	tst	r3, #1
   21984:	beq	21ba0 <__assert_fail@plt+0x1044c>
   21988:	str	r5, [sp, #260]	; 0x104
   2198c:	ldrb	r4, [r4]
   21990:	strb	r5, [sp, #264]	; 0x108
   21994:	str	r4, [sp, #268]	; 0x10c
   21998:	cmp	r4, #0
   2199c:	strb	r5, [sp, #252]	; 0xfc
   219a0:	bne	219c4 <__assert_fail@plt+0x10270>
   219a4:	ldr	r0, [sp, #144]	; 0x90
   219a8:	add	sp, sp, #300	; 0x12c
   219ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219b0:	ldr	r0, [sp, #256]	; 0x100
   219b4:	bl	115b0 <strlen@plt>
   219b8:	strb	r7, [sp, #264]	; 0x108
   219bc:	str	r0, [sp, #260]	; 0x104
   219c0:	strb	r5, [sp, #252]	; 0xfc
   219c4:	ldrb	r3, [sp, #196]	; 0xc4
   219c8:	cmp	r3, #0
   219cc:	beq	219fc <__assert_fail@plt+0x102a8>
   219d0:	ldrb	r3, [sp, #208]	; 0xd0
   219d4:	cmp	r3, #0
   219d8:	ldrne	r4, [sp, #212]	; 0xd4
   219dc:	bne	21aa4 <__assert_fail@plt+0x10350>
   219e0:	ldr	r2, [sp, #204]	; 0xcc
   219e4:	ldr	r3, [sp, #260]	; 0x104
   219e8:	cmp	r2, r3
   219ec:	beq	21b88 <__assert_fail@plt+0x10434>
   219f0:	ldr	r6, [sp, #144]	; 0x90
   219f4:	ldr	r4, [sp, #148]	; 0x94
   219f8:	b	215ac <__assert_fail@plt+0xfe58>
   219fc:	ldrb	r3, [sp, #184]	; 0xb8
   21a00:	ldr	r4, [sp, #200]	; 0xc8
   21a04:	cmp	r3, #0
   21a08:	bne	21a3c <__assert_fail@plt+0x102e8>
   21a0c:	ldrb	r3, [r4]
   21a10:	and	r2, r3, #31
   21a14:	lsr	r3, r3, #5
   21a18:	ldr	r3, [r9, r3, lsl #2]
   21a1c:	lsr	r3, r3, r2
   21a20:	tst	r3, #1
   21a24:	bne	21b6c <__assert_fail@plt+0x10418>
   21a28:	add	r0, sp, #188	; 0xbc
   21a2c:	bl	1140c <mbsinit@plt>
   21a30:	cmp	r0, #0
   21a34:	beq	21d84 <__assert_fail@plt+0x10630>
   21a38:	strb	r5, [sp, #184]	; 0xb8
   21a3c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   21a40:	mov	r1, r0
   21a44:	mov	r0, r4
   21a48:	bl	1ed54 <__assert_fail@plt+0xd600>
   21a4c:	add	r3, sp, #188	; 0xbc
   21a50:	mov	r1, r4
   21a54:	mov	r2, r0
   21a58:	add	r0, sp, #212	; 0xd4
   21a5c:	bl	207c8 <__assert_fail@plt+0xf074>
   21a60:	cmn	r0, #1
   21a64:	str	r0, [sp, #204]	; 0xcc
   21a68:	strbeq	r7, [sp, #208]	; 0xd0
   21a6c:	streq	r5, [sp, #204]	; 0xcc
   21a70:	strbeq	r5, [sp, #196]	; 0xc4
   21a74:	beq	219e0 <__assert_fail@plt+0x1028c>
   21a78:	cmn	r0, #2
   21a7c:	beq	21bb8 <__assert_fail@plt+0x10464>
   21a80:	cmp	r0, #0
   21a84:	beq	21bf4 <__assert_fail@plt+0x104a0>
   21a88:	ldr	r4, [sp, #212]	; 0xd4
   21a8c:	add	r0, sp, #188	; 0xbc
   21a90:	strb	r5, [sp, #208]	; 0xd0
   21a94:	bl	1140c <mbsinit@plt>
   21a98:	strb	r5, [sp, #196]	; 0xc4
   21a9c:	cmp	r0, #0
   21aa0:	strbne	r7, [sp, #184]	; 0xb8
   21aa4:	cmp	r4, #0
   21aa8:	beq	214e0 <__assert_fail@plt+0xfd8c>
   21aac:	ldrb	r3, [sp, #264]	; 0x108
   21ab0:	cmp	r3, #0
   21ab4:	beq	219e0 <__assert_fail@plt+0x1028c>
   21ab8:	ldr	r0, [sp, #268]	; 0x10c
   21abc:	subs	r0, r0, r4
   21ac0:	movne	r0, #1
   21ac4:	cmp	r0, #0
   21ac8:	add	r1, r8, #1
   21acc:	bne	219f0 <__assert_fail@plt+0x1029c>
   21ad0:	ldr	r3, [sp, #200]	; 0xc8
   21ad4:	ldr	r2, [sp, #204]	; 0xcc
   21ad8:	ldr	r4, [sp, #256]	; 0x100
   21adc:	add	r3, r3, r2
   21ae0:	str	r3, [sp, #200]	; 0xc8
   21ae4:	ldrb	r3, [sp, #240]	; 0xf0
   21ae8:	ldr	r2, [sp, #260]	; 0x104
   21aec:	strb	r0, [sp, #196]	; 0xc4
   21af0:	add	r4, r4, r2
   21af4:	cmp	r3, #0
   21af8:	strb	r0, [sp, #252]	; 0xfc
   21afc:	mov	r8, r1
   21b00:	str	r4, [sp, #256]	; 0x100
   21b04:	beq	2196c <__assert_fail@plt+0x10218>
   21b08:	bl	114fc <__ctype_get_mb_cur_max@plt>
   21b0c:	mov	r1, r0
   21b10:	mov	r0, r4
   21b14:	bl	1ed54 <__assert_fail@plt+0xd600>
   21b18:	add	r3, sp, #244	; 0xf4
   21b1c:	mov	r1, r4
   21b20:	mov	r2, r0
   21b24:	add	r0, sp, #268	; 0x10c
   21b28:	bl	207c8 <__assert_fail@plt+0xf074>
   21b2c:	cmn	r0, #1
   21b30:	str	r0, [sp, #260]	; 0x104
   21b34:	strbeq	r7, [sp, #264]	; 0x108
   21b38:	streq	r5, [sp, #260]	; 0x104
   21b3c:	beq	219c0 <__assert_fail@plt+0x1026c>
   21b40:	cmn	r0, #2
   21b44:	beq	219b0 <__assert_fail@plt+0x1025c>
   21b48:	cmp	r0, #0
   21b4c:	beq	21bd0 <__assert_fail@plt+0x1047c>
   21b50:	ldr	r4, [sp, #268]	; 0x10c
   21b54:	add	r0, sp, #244	; 0xf4
   21b58:	strb	r5, [sp, #264]	; 0x108
   21b5c:	bl	1140c <mbsinit@plt>
   21b60:	cmp	r0, #0
   21b64:	strbne	r7, [sp, #240]	; 0xf0
   21b68:	b	21998 <__assert_fail@plt+0x10244>
   21b6c:	str	r5, [sp, #204]	; 0xcc
   21b70:	ldrb	r0, [r4]
   21b74:	strb	r5, [sp, #208]	; 0xd0
   21b78:	strb	r5, [sp, #196]	; 0xc4
   21b7c:	str	r0, [sp, #212]	; 0xd4
   21b80:	mov	r4, r0
   21b84:	b	21aa4 <__assert_fail@plt+0x10350>
   21b88:	ldr	r1, [sp, #256]	; 0x100
   21b8c:	ldr	r0, [sp, #200]	; 0xc8
   21b90:	bl	11418 <memcmp@plt>
   21b94:	adds	r0, r0, #0
   21b98:	movne	r0, #1
   21b9c:	b	21ac4 <__assert_fail@plt+0x10370>
   21ba0:	add	r0, sp, #244	; 0xf4
   21ba4:	bl	1140c <mbsinit@plt>
   21ba8:	cmp	r0, #0
   21bac:	beq	21d84 <__assert_fail@plt+0x10630>
   21bb0:	strb	r5, [sp, #240]	; 0xf0
   21bb4:	b	21b08 <__assert_fail@plt+0x103b4>
   21bb8:	ldr	r0, [sp, #200]	; 0xc8
   21bbc:	bl	115b0 <strlen@plt>
   21bc0:	strb	r7, [sp, #208]	; 0xd0
   21bc4:	strb	r5, [sp, #196]	; 0xc4
   21bc8:	str	r0, [sp, #204]	; 0xcc
   21bcc:	b	219e0 <__assert_fail@plt+0x1028c>
   21bd0:	ldr	r3, [sp, #256]	; 0x100
   21bd4:	str	r5, [sp, #260]	; 0x104
   21bd8:	ldrb	r3, [r3]
   21bdc:	cmp	r3, #0
   21be0:	bne	21da4 <__assert_fail@plt+0x10650>
   21be4:	ldr	r4, [sp, #268]	; 0x10c
   21be8:	cmp	r4, #0
   21bec:	beq	21b54 <__assert_fail@plt+0x10400>
   21bf0:	b	218dc <__assert_fail@plt+0x10188>
   21bf4:	ldr	r3, [sp, #200]	; 0xc8
   21bf8:	str	r5, [sp, #204]	; 0xcc
   21bfc:	ldrb	r3, [r3]
   21c00:	cmp	r3, #0
   21c04:	bne	21da4 <__assert_fail@plt+0x10650>
   21c08:	ldr	r4, [sp, #212]	; 0xd4
   21c0c:	cmp	r4, #0
   21c10:	beq	21a8c <__assert_fail@plt+0x10338>
   21c14:	b	218dc <__assert_fail@plt+0x10188>
   21c18:	ldr	r6, [sp, #144]	; 0x90
   21c1c:	str	r5, [sp, #148]	; 0x94
   21c20:	ldrb	r3, [r6]
   21c24:	cmp	r3, #0
   21c28:	bne	21da4 <__assert_fail@plt+0x10650>
   21c2c:	ldr	r4, [sp, #156]	; 0x9c
   21c30:	cmp	r4, #0
   21c34:	beq	21554 <__assert_fail@plt+0xfe00>
   21c38:	b	218dc <__assert_fail@plt+0x10188>
   21c3c:	add	r0, sp, #76	; 0x4c
   21c40:	bl	1140c <mbsinit@plt>
   21c44:	cmp	r0, #0
   21c48:	beq	21d84 <__assert_fail@plt+0x10630>
   21c4c:	strb	r5, [sp, #72]	; 0x48
   21c50:	bl	114fc <__ctype_get_mb_cur_max@plt>
   21c54:	mov	r1, r0
   21c58:	mov	r0, sl
   21c5c:	bl	1ed54 <__assert_fail@plt+0xd600>
   21c60:	add	r3, sp, #76	; 0x4c
   21c64:	mov	r1, sl
   21c68:	mov	r2, r0
   21c6c:	add	r0, sp, #100	; 0x64
   21c70:	bl	207c8 <__assert_fail@plt+0xf074>
   21c74:	cmn	r0, #1
   21c78:	str	r0, [sp, #92]	; 0x5c
   21c7c:	strbeq	r7, [sp, #96]	; 0x60
   21c80:	streq	r5, [sp, #92]	; 0x5c
   21c84:	strbeq	r5, [sp, #84]	; 0x54
   21c88:	beq	2193c <__assert_fail@plt+0x101e8>
   21c8c:	cmn	r0, #2
   21c90:	beq	21d04 <__assert_fail@plt+0x105b0>
   21c94:	cmp	r0, #0
   21c98:	beq	21d60 <__assert_fail@plt+0x1060c>
   21c9c:	ldr	r4, [sp, #100]	; 0x64
   21ca0:	add	r0, sp, #76	; 0x4c
   21ca4:	strb	r5, [sp, #96]	; 0x60
   21ca8:	bl	1140c <mbsinit@plt>
   21cac:	strb	r5, [sp, #84]	; 0x54
   21cb0:	cmp	r0, #0
   21cb4:	strbne	r7, [sp, #72]	; 0x48
   21cb8:	b	21934 <__assert_fail@plt+0x101e0>
   21cbc:	mov	r8, r3
   21cc0:	b	217d4 <__assert_fail@plt+0x10080>
   21cc4:	ldr	r3, [sp, #32]
   21cc8:	str	r5, [sp, #36]	; 0x24
   21ccc:	ldrb	r3, [r3]
   21cd0:	cmp	r3, #0
   21cd4:	bne	21da4 <__assert_fail@plt+0x10650>
   21cd8:	ldr	r4, [sp, #44]	; 0x2c
   21cdc:	cmp	r4, #0
   21ce0:	beq	21384 <__assert_fail@plt+0xfc30>
   21ce4:	b	218dc <__assert_fail@plt+0x10188>
   21ce8:	ldr	r4, [sp, #268]	; 0x10c
   21cec:	add	r0, sp, #244	; 0xf4
   21cf0:	strb	r5, [sp, #264]	; 0x108
   21cf4:	bl	1140c <mbsinit@plt>
   21cf8:	cmp	r0, #0
   21cfc:	strbne	r7, [sp, #240]	; 0xf0
   21d00:	b	21854 <__assert_fail@plt+0x10100>
   21d04:	ldr	r0, [sp, #88]	; 0x58
   21d08:	bl	115b0 <strlen@plt>
   21d0c:	strb	r7, [sp, #96]	; 0x60
   21d10:	strb	r5, [sp, #84]	; 0x54
   21d14:	str	r0, [sp, #92]	; 0x5c
   21d18:	b	2193c <__assert_fail@plt+0x101e8>
   21d1c:	ldr	r0, [sp, #240]	; 0xf0
   21d20:	b	213b4 <__assert_fail@plt+0xfc60>
   21d24:	add	r3, r8, #1
   21d28:	ldr	r8, [sp, #8]
   21d2c:	b	216dc <__assert_fail@plt+0xff88>
   21d30:	str	r5, [sp, #260]	; 0x104
   21d34:	strb	r6, [sp, #264]	; 0x108
   21d38:	ldr	r4, [sp, #256]	; 0x100
   21d3c:	mov	r3, r5
   21d40:	b	21950 <__assert_fail@plt+0x101fc>
   21d44:	ldr	r4, [sp, #256]	; 0x100
   21d48:	mov	r0, r4
   21d4c:	bl	115b0 <strlen@plt>
   21d50:	strb	r6, [sp, #264]	; 0x108
   21d54:	str	r0, [sp, #260]	; 0x104
   21d58:	mov	r3, r0
   21d5c:	b	21950 <__assert_fail@plt+0x101fc>
   21d60:	ldr	r4, [sp, #88]	; 0x58
   21d64:	str	r5, [sp, #92]	; 0x5c
   21d68:	ldrb	r3, [r4]
   21d6c:	cmp	r3, #0
   21d70:	bne	21da4 <__assert_fail@plt+0x10650>
   21d74:	ldr	r4, [sp, #100]	; 0x64
   21d78:	cmp	r4, #0
   21d7c:	beq	21ca0 <__assert_fail@plt+0x1054c>
   21d80:	b	218dc <__assert_fail@plt+0x10188>
   21d84:	ldr	r3, [pc, #76]	; 21dd8 <__assert_fail@plt+0x10684>
   21d88:	mov	r2, #143	; 0x8f
   21d8c:	ldr	r1, [pc, #72]	; 21ddc <__assert_fail@plt+0x10688>
   21d90:	ldr	r0, [pc, #76]	; 21de4 <__assert_fail@plt+0x10690>
   21d94:	bl	11754 <__assert_fail@plt>
   21d98:	add	r8, r8, #1
   21d9c:	mov	sl, r3
   21da0:	b	21598 <__assert_fail@plt+0xfe44>
   21da4:	ldr	r3, [pc, #44]	; 21dd8 <__assert_fail@plt+0x10684>
   21da8:	mov	r2, #171	; 0xab
   21dac:	ldr	r1, [pc, #40]	; 21ddc <__assert_fail@plt+0x10688>
   21db0:	ldr	r0, [pc, #48]	; 21de8 <__assert_fail@plt+0x10694>
   21db4:	bl	11754 <__assert_fail@plt>
   21db8:	cmp	r3, #0
   21dbc:	beq	218f0 <__assert_fail@plt+0x1019c>
   21dc0:	ldrb	r3, [sp, #96]	; 0x60
   21dc4:	cmp	r3, #0
   21dc8:	ldrne	r4, [sp, #100]	; 0x64
   21dcc:	beq	2193c <__assert_fail@plt+0x101e8>
   21dd0:	b	21934 <__assert_fail@plt+0x101e0>
   21dd4:	muleq	r2, ip, r7
   21dd8:			; <UNDEFINED> instruction: 0x000267bc
   21ddc:	strdeq	r6, [r2], -r8
   21de0:	andeq	r6, r2, r8, lsr r3
   21de4:	andeq	r6, r2, r8, lsl #6
   21de8:	andeq	r6, r2, r0, lsr #6
   21dec:	push	{r4, r5, r6, lr}
   21df0:	subs	r4, r2, #0
   21df4:	mov	r6, r0
   21df8:	mov	r5, r1
   21dfc:	beq	21e28 <__assert_fail@plt+0x106d4>
   21e00:	mov	r1, r4
   21e04:	mvn	r0, #0
   21e08:	bl	22684 <__assert_fail@plt+0x10f30>
   21e0c:	cmp	r0, r5
   21e10:	bcs	21e28 <__assert_fail@plt+0x106d4>
   21e14:	bl	115e0 <__errno_location@plt>
   21e18:	mov	r3, #12
   21e1c:	str	r3, [r0]
   21e20:	mov	r0, #0
   21e24:	pop	{r4, r5, r6, pc}
   21e28:	mul	r1, r5, r4
   21e2c:	mov	r0, r6
   21e30:	pop	{r4, r5, r6, lr}
   21e34:	b	20420 <__assert_fail@plt+0xeccc>
   21e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e3c:	sub	sp, sp, #4096	; 0x1000
   21e40:	sub	sp, sp, #36	; 0x24
   21e44:	mov	sl, #0
   21e48:	mov	r8, r1
   21e4c:	mov	r6, r0
   21e50:	str	r0, [sp, #12]
   21e54:	str	r3, [sp, #8]
   21e58:	mov	r0, r2
   21e5c:	add	r4, sp, #32
   21e60:	mov	r5, r2
   21e64:	str	sl, [sp]
   21e68:	mov	r3, sl
   21e6c:	mov	r2, sl
   21e70:	mov	r1, sl
   21e74:	bl	1137c <iconv@plt>
   21e78:	cmp	r8, sl
   21e7c:	str	r6, [r4, #-16]
   21e80:	str	r8, [r4, #-12]
   21e84:	beq	22090 <__assert_fail@plt+0x1093c>
   21e88:	add	r7, sp, #24
   21e8c:	add	r6, sp, #28
   21e90:	mov	r9, #4096	; 0x1000
   21e94:	b	21eb0 <__assert_fail@plt+0x1075c>
   21e98:	ldr	r3, [r4, #-8]
   21e9c:	ldr	r2, [r4, #-12]
   21ea0:	sub	r3, r3, r4
   21ea4:	cmp	r2, #0
   21ea8:	add	sl, sl, r3
   21eac:	beq	21eec <__assert_fail@plt+0x10798>
   21eb0:	str	r6, [sp]
   21eb4:	mov	r3, r7
   21eb8:	add	r2, sp, #20
   21ebc:	add	r1, sp, #16
   21ec0:	mov	r0, r5
   21ec4:	stmdb	r4, {r4, r9}
   21ec8:	bl	1137c <iconv@plt>
   21ecc:	cmn	r0, #1
   21ed0:	bne	21e98 <__assert_fail@plt+0x10744>
   21ed4:	bl	115e0 <__errno_location@plt>
   21ed8:	ldr	r3, [r0]
   21edc:	cmp	r3, #7
   21ee0:	beq	21e98 <__assert_fail@plt+0x10744>
   21ee4:	cmp	r3, #22
   21ee8:	bne	2207c <__assert_fail@plt+0x10928>
   21eec:	mov	ip, #4096	; 0x1000
   21ef0:	mov	r2, #0
   21ef4:	str	r6, [sp]
   21ef8:	mov	r1, r2
   21efc:	mov	r3, r7
   21f00:	mov	r0, r5
   21f04:	stmdb	r4, {r4, ip}
   21f08:	bl	1137c <iconv@plt>
   21f0c:	cmn	r0, #1
   21f10:	beq	2207c <__assert_fail@plt+0x10928>
   21f14:	ldr	r9, [r4, #-8]
   21f18:	sub	r9, r9, r4
   21f1c:	adds	r9, r9, sl
   21f20:	beq	2201c <__assert_fail@plt+0x108c8>
   21f24:	ldr	r3, [sp, #8]
   21f28:	ldr	fp, [r3]
   21f2c:	cmp	fp, #0
   21f30:	beq	21ff8 <__assert_fail@plt+0x108a4>
   21f34:	add	r3, sp, #4160	; 0x1040
   21f38:	add	r3, r3, #8
   21f3c:	ldr	r3, [r3]
   21f40:	ldr	r3, [r3]
   21f44:	cmp	r9, r3
   21f48:	bhi	21ff8 <__assert_fail@plt+0x108a4>
   21f4c:	mov	r3, #0
   21f50:	str	r3, [sp]
   21f54:	mov	r2, r3
   21f58:	mov	r1, r3
   21f5c:	mov	r0, r5
   21f60:	bl	1137c <iconv@plt>
   21f64:	ldr	r3, [sp, #12]
   21f68:	mov	sl, r4
   21f6c:	stmdb	r4, {r3, r8, fp}
   21f70:	str	r9, [sl], #-12
   21f74:	b	21f9c <__assert_fail@plt+0x10848>
   21f78:	str	r4, [sp]
   21f7c:	mov	r3, r6
   21f80:	mov	r2, r7
   21f84:	mov	r1, sl
   21f88:	mov	r0, r5
   21f8c:	bl	1137c <iconv@plt>
   21f90:	cmn	r0, #1
   21f94:	beq	22040 <__assert_fail@plt+0x108ec>
   21f98:	ldr	r8, [r4, #-8]
   21f9c:	cmp	r8, #0
   21fa0:	bne	21f78 <__assert_fail@plt+0x10824>
   21fa4:	mov	r2, #0
   21fa8:	str	r4, [sp]
   21fac:	mov	r3, r6
   21fb0:	mov	r0, r5
   21fb4:	mov	r1, r2
   21fb8:	bl	1137c <iconv@plt>
   21fbc:	cmn	r0, #1
   21fc0:	beq	22050 <__assert_fail@plt+0x108fc>
   21fc4:	ldr	r3, [r4]
   21fc8:	cmp	r3, #0
   21fcc:	bne	220a0 <__assert_fail@plt+0x1094c>
   21fd0:	ldr	r2, [sp, #8]
   21fd4:	str	fp, [r2]
   21fd8:	add	r2, sp, #4160	; 0x1040
   21fdc:	add	r2, r2, #8
   21fe0:	ldr	r2, [r2]
   21fe4:	str	r9, [r2]
   21fe8:	mov	r0, r3
   21fec:	add	sp, sp, #4096	; 0x1000
   21ff0:	add	sp, sp, #36	; 0x24
   21ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ff8:	mov	r0, r9
   21ffc:	bl	203f4 <__assert_fail@plt+0xeca0>
   22000:	subs	fp, r0, #0
   22004:	bne	21f4c <__assert_fail@plt+0x107f8>
   22008:	bl	115e0 <__errno_location@plt>
   2200c:	mov	r2, #12
   22010:	mvn	r3, #0
   22014:	str	r2, [r0]
   22018:	b	21fe8 <__assert_fail@plt+0x10894>
   2201c:	add	r3, sp, #4160	; 0x1040
   22020:	add	r3, r3, #8
   22024:	ldr	r3, [r3]
   22028:	str	r9, [r3]
   2202c:	mov	r3, r9
   22030:	mov	r0, r3
   22034:	add	sp, sp, #4096	; 0x1000
   22038:	add	sp, sp, #36	; 0x24
   2203c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22040:	bl	115e0 <__errno_location@plt>
   22044:	ldr	r3, [r0]
   22048:	cmp	r3, #22
   2204c:	beq	21fa4 <__assert_fail@plt+0x10850>
   22050:	ldr	r3, [sp, #8]
   22054:	ldr	r3, [r3]
   22058:	cmp	fp, r3
   2205c:	beq	2207c <__assert_fail@plt+0x10928>
   22060:	mov	r0, fp
   22064:	bl	19d04 <__assert_fail@plt+0x85b0>
   22068:	mvn	r3, #0
   2206c:	mov	r0, r3
   22070:	add	sp, sp, #4096	; 0x1000
   22074:	add	sp, sp, #36	; 0x24
   22078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2207c:	mvn	r3, #0
   22080:	mov	r0, r3
   22084:	add	sp, sp, #4096	; 0x1000
   22088:	add	sp, sp, #36	; 0x24
   2208c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22090:	mov	sl, r8
   22094:	add	r7, sp, #24
   22098:	add	r6, sp, #28
   2209c:	b	21eec <__assert_fail@plt+0x10798>
   220a0:	bl	11748 <abort@plt>
   220a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220a8:	sub	sp, sp, #28
   220ac:	mov	r8, r1
   220b0:	str	r0, [sp, #8]
   220b4:	bl	115b0 <strlen@plt>
   220b8:	cmp	r0, #4096	; 0x1000
   220bc:	mov	r4, r0
   220c0:	lslcc	r4, r0, #4
   220c4:	add	r7, r4, #1
   220c8:	str	r0, [sp, #12]
   220cc:	mov	r0, r7
   220d0:	bl	203f4 <__assert_fail@plt+0xeca0>
   220d4:	subs	r6, r0, #0
   220d8:	beq	22268 <__assert_fail@plt+0x10b14>
   220dc:	mov	r3, #0
   220e0:	str	r3, [sp]
   220e4:	mov	r2, r3
   220e8:	mov	r1, r3
   220ec:	mov	r0, r8
   220f0:	bl	1137c <iconv@plt>
   220f4:	add	r9, sp, #20
   220f8:	str	r6, [sp, #16]
   220fc:	str	r4, [sp, #20]
   22100:	b	22160 <__assert_fail@plt+0x10a0c>
   22104:	bl	115e0 <__errno_location@plt>
   22108:	mov	r1, r5
   2210c:	mov	sl, r0
   22110:	mov	r0, r6
   22114:	ldr	r3, [sl]
   22118:	cmp	r3, #22
   2211c:	beq	22184 <__assert_fail@plt+0x10a30>
   22120:	cmp	r3, #7
   22124:	bne	22244 <__assert_fail@plt+0x10af0>
   22128:	ldr	r4, [sp, #16]
   2212c:	cmp	r7, r5
   22130:	sub	r4, r4, r6
   22134:	bcs	2223c <__assert_fail@plt+0x10ae8>
   22138:	bl	20420 <__assert_fail@plt+0xeccc>
   2213c:	sub	r3, r5, #1
   22140:	sub	r3, r3, r4
   22144:	mov	r7, r5
   22148:	cmp	r0, #0
   2214c:	add	r4, r0, r4
   22150:	beq	2223c <__assert_fail@plt+0x10ae8>
   22154:	mov	r6, r0
   22158:	str	r4, [sp, #16]
   2215c:	str	r3, [sp, #20]
   22160:	str	r9, [sp]
   22164:	add	r3, sp, #16
   22168:	add	r2, sp, #12
   2216c:	add	r1, sp, #8
   22170:	mov	r0, r8
   22174:	bl	1137c <iconv@plt>
   22178:	lsl	r5, r7, #1
   2217c:	cmn	r0, #1
   22180:	beq	22104 <__assert_fail@plt+0x109b0>
   22184:	mov	sl, #0
   22188:	b	221e0 <__assert_fail@plt+0x10a8c>
   2218c:	bl	115e0 <__errno_location@plt>
   22190:	mov	r1, r5
   22194:	mov	fp, r0
   22198:	mov	r0, r6
   2219c:	ldr	r3, [fp]
   221a0:	cmp	r3, #7
   221a4:	bne	22244 <__assert_fail@plt+0x10af0>
   221a8:	ldr	r4, [sp, #16]
   221ac:	cmp	r7, r5
   221b0:	sub	r4, r4, r6
   221b4:	bcs	2225c <__assert_fail@plt+0x10b08>
   221b8:	bl	20420 <__assert_fail@plt+0xeccc>
   221bc:	sub	r3, r5, #1
   221c0:	sub	r3, r3, r4
   221c4:	mov	r7, r5
   221c8:	cmp	r0, #0
   221cc:	add	r4, r0, r4
   221d0:	beq	2225c <__assert_fail@plt+0x10b08>
   221d4:	mov	r6, r0
   221d8:	str	r4, [sp, #16]
   221dc:	str	r3, [sp, #20]
   221e0:	str	r9, [sp]
   221e4:	add	r3, sp, #16
   221e8:	mov	r2, sl
   221ec:	mov	r1, #0
   221f0:	mov	r0, r8
   221f4:	bl	1137c <iconv@plt>
   221f8:	lsl	r5, r7, #1
   221fc:	cmn	r0, #1
   22200:	beq	2218c <__assert_fail@plt+0x10a38>
   22204:	ldr	r3, [sp, #16]
   22208:	mov	r2, #0
   2220c:	add	r1, r3, #1
   22210:	str	r1, [sp, #16]
   22214:	strb	r2, [r3]
   22218:	ldr	r1, [sp, #16]
   2221c:	sub	r1, r1, r6
   22220:	cmp	r7, r1
   22224:	bls	22250 <__assert_fail@plt+0x10afc>
   22228:	mov	r0, r6
   2222c:	bl	20420 <__assert_fail@plt+0xeccc>
   22230:	cmp	r0, #0
   22234:	movne	r6, r0
   22238:	b	22250 <__assert_fail@plt+0x10afc>
   2223c:	mov	r3, #12
   22240:	str	r3, [sl]
   22244:	mov	r0, r6
   22248:	bl	19d04 <__assert_fail@plt+0x85b0>
   2224c:	mov	r6, #0
   22250:	mov	r0, r6
   22254:	add	sp, sp, #28
   22258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2225c:	mov	r3, #12
   22260:	str	r3, [fp]
   22264:	b	22244 <__assert_fail@plt+0x10af0>
   22268:	bl	115e0 <__errno_location@plt>
   2226c:	mov	r3, #12
   22270:	str	r3, [r0]
   22274:	b	22250 <__assert_fail@plt+0x10afc>
   22278:	push	{r4, r5, r6, lr}
   2227c:	mov	r4, r0
   22280:	ldrb	r3, [r0]
   22284:	cmp	r3, #0
   22288:	beq	222a8 <__assert_fail@plt+0x10b54>
   2228c:	mov	r6, r1
   22290:	mov	r0, r6
   22294:	mov	r1, r2
   22298:	mov	r5, r2
   2229c:	bl	2047c <__assert_fail@plt+0xed28>
   222a0:	cmp	r0, #0
   222a4:	bne	222c0 <__assert_fail@plt+0x10b6c>
   222a8:	mov	r0, r4
   222ac:	bl	11448 <strdup@plt>
   222b0:	subs	r4, r0, #0
   222b4:	beq	2230c <__assert_fail@plt+0x10bb8>
   222b8:	mov	r0, r4
   222bc:	pop	{r4, r5, r6, pc}
   222c0:	mov	r0, r5
   222c4:	mov	r1, r6
   222c8:	bl	11538 <iconv_open@plt>
   222cc:	cmn	r0, #1
   222d0:	mov	r5, r0
   222d4:	beq	22320 <__assert_fail@plt+0x10bcc>
   222d8:	mov	r0, r4
   222dc:	mov	r1, r5
   222e0:	bl	220a4 <__assert_fail@plt+0x10950>
   222e4:	subs	r4, r0, #0
   222e8:	beq	22328 <__assert_fail@plt+0x10bd4>
   222ec:	mov	r0, r5
   222f0:	bl	11370 <iconv_close@plt>
   222f4:	cmp	r0, #0
   222f8:	bge	222b8 <__assert_fail@plt+0x10b64>
   222fc:	mov	r0, r4
   22300:	bl	19d04 <__assert_fail@plt+0x85b0>
   22304:	mov	r4, #0
   22308:	b	222b8 <__assert_fail@plt+0x10b64>
   2230c:	bl	115e0 <__errno_location@plt>
   22310:	mov	r3, #12
   22314:	str	r3, [r0]
   22318:	mov	r0, r4
   2231c:	pop	{r4, r5, r6, pc}
   22320:	mov	r4, #0
   22324:	b	222b8 <__assert_fail@plt+0x10b64>
   22328:	bl	115e0 <__errno_location@plt>
   2232c:	mov	r6, r0
   22330:	mov	r0, r5
   22334:	ldr	r5, [r6]
   22338:	bl	11370 <iconv_close@plt>
   2233c:	str	r5, [r6]
   22340:	b	222b8 <__assert_fail@plt+0x10b64>
   22344:	push	{lr}		; (str lr, [sp, #-4]!)
   22348:	sub	sp, sp, #268	; 0x10c
   2234c:	add	r1, sp, #4
   22350:	ldr	r2, [pc, #60]	; 22394 <__assert_fail@plt+0x10c40>
   22354:	bl	225ec <__assert_fail@plt+0x10e98>
   22358:	cmp	r0, #0
   2235c:	movne	r0, #0
   22360:	bne	2238c <__assert_fail@plt+0x10c38>
   22364:	ldr	r1, [pc, #44]	; 22398 <__assert_fail@plt+0x10c44>
   22368:	add	r0, sp, #4
   2236c:	bl	11388 <strcmp@plt>
   22370:	cmp	r0, #0
   22374:	beq	2238c <__assert_fail@plt+0x10c38>
   22378:	add	r0, sp, #4
   2237c:	ldr	r1, [pc, #24]	; 2239c <__assert_fail@plt+0x10c48>
   22380:	bl	11388 <strcmp@plt>
   22384:	adds	r0, r0, #0
   22388:	movne	r0, #1
   2238c:	add	sp, sp, #268	; 0x10c
   22390:	pop	{pc}		; (ldr pc, [sp], #4)
   22394:	andeq	r0, r0, r1, lsl #2
   22398:	ldrdeq	r6, [r2], -r0
   2239c:	ldrdeq	r6, [r2], -r4
   223a0:	cmn	r0, #-2147483631	; 0x80000011
   223a4:	bls	223b0 <__assert_fail@plt+0x10c5c>
   223a8:	mov	r0, #0
   223ac:	bx	lr
   223b0:	push	{r4, lr}
   223b4:	add	r0, r0, #16
   223b8:	bl	1152c <malloc@plt>
   223bc:	cmp	r0, #0
   223c0:	beq	223e8 <__assert_fail@plt+0x10c94>
   223c4:	cmn	r0, #9
   223c8:	addls	r3, r0, #8
   223cc:	bicls	r2, r3, #15
   223d0:	movhi	r2, #0
   223d4:	rsb	r3, r0, #8
   223d8:	add	r3, r3, r2
   223dc:	add	r0, r0, r3
   223e0:	strb	r3, [r0, #-1]
   223e4:	pop	{r4, pc}
   223e8:	mov	r0, #0
   223ec:	pop	{r4, pc}
   223f0:	tst	r0, #7
   223f4:	bne	2240c <__assert_fail@plt+0x10cb8>
   223f8:	tst	r0, #8
   223fc:	bxeq	lr
   22400:	ldrb	r3, [r0, #-1]
   22404:	sub	r0, r0, r3
   22408:	b	19d04 <__assert_fail@plt+0x85b0>
   2240c:	push	{r4, lr}
   22410:	bl	11748 <abort@plt>
   22414:	push	{r4, r5, r6, r7, r8, lr}
   22418:	sub	sp, sp, #56	; 0x38
   2241c:	mov	r4, r0
   22420:	bl	114fc <__ctype_get_mb_cur_max@plt>
   22424:	cmp	r0, #1
   22428:	bls	22594 <__assert_fail@plt+0x10e40>
   2242c:	mov	r3, #0
   22430:	ldr	r8, [pc, #412]	; 225d4 <__assert_fail@plt+0x10e80>
   22434:	mov	r5, r3
   22438:	mov	r6, r3
   2243c:	mov	r7, #1
   22440:	str	r4, [sp, #16]
   22444:	strb	r3, [sp]
   22448:	str	r3, [sp, #4]
   2244c:	strb	r3, [sp, #12]
   22450:	str	r3, [sp, #8]
   22454:	ldrb	r3, [sp]
   22458:	cmp	r3, #0
   2245c:	bne	224b4 <__assert_fail@plt+0x10d60>
   22460:	ldrb	r3, [r4]
   22464:	and	r2, r3, #31
   22468:	lsr	r3, r3, #5
   2246c:	ldr	r3, [r8, r3, lsl #2]
   22470:	lsr	r3, r3, r2
   22474:	tst	r3, #1
   22478:	beq	224a0 <__assert_fail@plt+0x10d4c>
   2247c:	str	r7, [sp, #20]
   22480:	ldrb	r4, [r4]
   22484:	strb	r7, [sp, #24]
   22488:	cmp	r4, #0
   2248c:	str	r4, [sp, #28]
   22490:	bne	22514 <__assert_fail@plt+0x10dc0>
   22494:	mov	r0, r5
   22498:	add	sp, sp, #56	; 0x38
   2249c:	pop	{r4, r5, r6, r7, r8, pc}
   224a0:	add	r0, sp, #4
   224a4:	bl	1140c <mbsinit@plt>
   224a8:	cmp	r0, #0
   224ac:	beq	225ac <__assert_fail@plt+0x10e58>
   224b0:	strb	r7, [sp]
   224b4:	bl	114fc <__ctype_get_mb_cur_max@plt>
   224b8:	mov	r1, r0
   224bc:	mov	r0, r4
   224c0:	bl	1ed54 <__assert_fail@plt+0xd600>
   224c4:	add	r3, sp, #4
   224c8:	mov	r1, r4
   224cc:	mov	r2, r0
   224d0:	add	r0, sp, #28
   224d4:	bl	207c8 <__assert_fail@plt+0xf074>
   224d8:	cmn	r0, #1
   224dc:	str	r0, [sp, #20]
   224e0:	beq	22530 <__assert_fail@plt+0x10ddc>
   224e4:	cmn	r0, #2
   224e8:	beq	22578 <__assert_fail@plt+0x10e24>
   224ec:	cmp	r0, #0
   224f0:	beq	22544 <__assert_fail@plt+0x10df0>
   224f4:	ldr	r4, [sp, #28]
   224f8:	add	r0, sp, #4
   224fc:	strb	r7, [sp, #24]
   22500:	bl	1140c <mbsinit@plt>
   22504:	cmp	r0, #0
   22508:	strbne	r6, [sp]
   2250c:	cmp	r4, #0
   22510:	beq	22494 <__assert_fail@plt+0x10d40>
   22514:	ldr	r4, [sp, #16]
   22518:	ldr	r3, [sp, #20]
   2251c:	add	r4, r4, r3
   22520:	add	r5, r5, #1
   22524:	strb	r6, [sp, #12]
   22528:	str	r4, [sp, #16]
   2252c:	b	22454 <__assert_fail@plt+0x10d00>
   22530:	str	r7, [sp, #20]
   22534:	strb	r6, [sp, #24]
   22538:	ldr	r4, [sp, #16]
   2253c:	mov	r3, r7
   22540:	b	2251c <__assert_fail@plt+0x10dc8>
   22544:	ldr	r4, [sp, #16]
   22548:	str	r7, [sp, #20]
   2254c:	ldrb	r3, [r4]
   22550:	cmp	r3, #0
   22554:	bne	225c0 <__assert_fail@plt+0x10e6c>
   22558:	ldr	r4, [sp, #28]
   2255c:	cmp	r4, #0
   22560:	beq	224f8 <__assert_fail@plt+0x10da4>
   22564:	ldr	r3, [pc, #108]	; 225d8 <__assert_fail@plt+0x10e84>
   22568:	mov	r2, #172	; 0xac
   2256c:	ldr	r1, [pc, #104]	; 225dc <__assert_fail@plt+0x10e88>
   22570:	ldr	r0, [pc, #104]	; 225e0 <__assert_fail@plt+0x10e8c>
   22574:	bl	11754 <__assert_fail@plt>
   22578:	ldr	r4, [sp, #16]
   2257c:	mov	r0, r4
   22580:	bl	115b0 <strlen@plt>
   22584:	strb	r6, [sp, #24]
   22588:	str	r0, [sp, #20]
   2258c:	mov	r3, r0
   22590:	b	2251c <__assert_fail@plt+0x10dc8>
   22594:	mov	r0, r4
   22598:	bl	115b0 <strlen@plt>
   2259c:	mov	r5, r0
   225a0:	mov	r0, r5
   225a4:	add	sp, sp, #56	; 0x38
   225a8:	pop	{r4, r5, r6, r7, r8, pc}
   225ac:	ldr	r3, [pc, #36]	; 225d8 <__assert_fail@plt+0x10e84>
   225b0:	mov	r2, #143	; 0x8f
   225b4:	ldr	r1, [pc, #32]	; 225dc <__assert_fail@plt+0x10e88>
   225b8:	ldr	r0, [pc, #36]	; 225e4 <__assert_fail@plt+0x10e90>
   225bc:	bl	11754 <__assert_fail@plt>
   225c0:	ldr	r3, [pc, #16]	; 225d8 <__assert_fail@plt+0x10e84>
   225c4:	mov	r2, #171	; 0xab
   225c8:	ldr	r1, [pc, #12]	; 225dc <__assert_fail@plt+0x10e88>
   225cc:	ldr	r0, [pc, #20]	; 225e8 <__assert_fail@plt+0x10e94>
   225d0:	bl	11754 <__assert_fail@plt>
   225d4:	muleq	r2, ip, r7
   225d8:	ldrdeq	r6, [r2], -ip
   225dc:	strdeq	r6, [r2], -r8
   225e0:	andeq	r6, r2, r8, lsr r3
   225e4:	andeq	r6, r2, r8, lsl #6
   225e8:	andeq	r6, r2, r0, lsr #6
   225ec:	push	{r4, r5, r6, lr}
   225f0:	mov	r5, r1
   225f4:	mov	r1, #0
   225f8:	mov	r4, r2
   225fc:	bl	116c4 <setlocale@plt>
   22600:	subs	r6, r0, #0
   22604:	beq	22660 <__assert_fail@plt+0x10f0c>
   22608:	bl	115b0 <strlen@plt>
   2260c:	cmp	r4, r0
   22610:	bhi	22648 <__assert_fail@plt+0x10ef4>
   22614:	cmp	r4, #0
   22618:	bne	22624 <__assert_fail@plt+0x10ed0>
   2261c:	mov	r0, #34	; 0x22
   22620:	pop	{r4, r5, r6, pc}
   22624:	sub	r4, r4, #1
   22628:	mov	r1, r6
   2262c:	mov	r2, r4
   22630:	mov	r0, r5
   22634:	bl	113f4 <memcpy@plt>
   22638:	mov	r3, #0
   2263c:	strb	r3, [r5, r4]
   22640:	mov	r0, #34	; 0x22
   22644:	pop	{r4, r5, r6, pc}
   22648:	add	r2, r0, #1
   2264c:	mov	r1, r6
   22650:	mov	r0, r5
   22654:	bl	113f4 <memcpy@plt>
   22658:	mov	r0, #0
   2265c:	pop	{r4, r5, r6, pc}
   22660:	cmp	r4, #0
   22664:	beq	22674 <__assert_fail@plt+0x10f20>
   22668:	strb	r6, [r5]
   2266c:	mov	r0, #22
   22670:	pop	{r4, r5, r6, pc}
   22674:	mov	r0, #22
   22678:	pop	{r4, r5, r6, pc}
   2267c:	mov	r1, #0
   22680:	b	116c4 <setlocale@plt>
   22684:	subs	r2, r1, #1
   22688:	bxeq	lr
   2268c:	bcc	22864 <__assert_fail@plt+0x11110>
   22690:	cmp	r0, r1
   22694:	bls	22848 <__assert_fail@plt+0x110f4>
   22698:	tst	r1, r2
   2269c:	beq	22854 <__assert_fail@plt+0x11100>
   226a0:	clz	r3, r0
   226a4:	clz	r2, r1
   226a8:	sub	r3, r2, r3
   226ac:	rsbs	r3, r3, #31
   226b0:	addne	r3, r3, r3, lsl #1
   226b4:	mov	r2, #0
   226b8:	addne	pc, pc, r3, lsl #2
   226bc:	nop			; (mov r0, r0)
   226c0:	cmp	r0, r1, lsl #31
   226c4:	adc	r2, r2, r2
   226c8:	subcs	r0, r0, r1, lsl #31
   226cc:	cmp	r0, r1, lsl #30
   226d0:	adc	r2, r2, r2
   226d4:	subcs	r0, r0, r1, lsl #30
   226d8:	cmp	r0, r1, lsl #29
   226dc:	adc	r2, r2, r2
   226e0:	subcs	r0, r0, r1, lsl #29
   226e4:	cmp	r0, r1, lsl #28
   226e8:	adc	r2, r2, r2
   226ec:	subcs	r0, r0, r1, lsl #28
   226f0:	cmp	r0, r1, lsl #27
   226f4:	adc	r2, r2, r2
   226f8:	subcs	r0, r0, r1, lsl #27
   226fc:	cmp	r0, r1, lsl #26
   22700:	adc	r2, r2, r2
   22704:	subcs	r0, r0, r1, lsl #26
   22708:	cmp	r0, r1, lsl #25
   2270c:	adc	r2, r2, r2
   22710:	subcs	r0, r0, r1, lsl #25
   22714:	cmp	r0, r1, lsl #24
   22718:	adc	r2, r2, r2
   2271c:	subcs	r0, r0, r1, lsl #24
   22720:	cmp	r0, r1, lsl #23
   22724:	adc	r2, r2, r2
   22728:	subcs	r0, r0, r1, lsl #23
   2272c:	cmp	r0, r1, lsl #22
   22730:	adc	r2, r2, r2
   22734:	subcs	r0, r0, r1, lsl #22
   22738:	cmp	r0, r1, lsl #21
   2273c:	adc	r2, r2, r2
   22740:	subcs	r0, r0, r1, lsl #21
   22744:	cmp	r0, r1, lsl #20
   22748:	adc	r2, r2, r2
   2274c:	subcs	r0, r0, r1, lsl #20
   22750:	cmp	r0, r1, lsl #19
   22754:	adc	r2, r2, r2
   22758:	subcs	r0, r0, r1, lsl #19
   2275c:	cmp	r0, r1, lsl #18
   22760:	adc	r2, r2, r2
   22764:	subcs	r0, r0, r1, lsl #18
   22768:	cmp	r0, r1, lsl #17
   2276c:	adc	r2, r2, r2
   22770:	subcs	r0, r0, r1, lsl #17
   22774:	cmp	r0, r1, lsl #16
   22778:	adc	r2, r2, r2
   2277c:	subcs	r0, r0, r1, lsl #16
   22780:	cmp	r0, r1, lsl #15
   22784:	adc	r2, r2, r2
   22788:	subcs	r0, r0, r1, lsl #15
   2278c:	cmp	r0, r1, lsl #14
   22790:	adc	r2, r2, r2
   22794:	subcs	r0, r0, r1, lsl #14
   22798:	cmp	r0, r1, lsl #13
   2279c:	adc	r2, r2, r2
   227a0:	subcs	r0, r0, r1, lsl #13
   227a4:	cmp	r0, r1, lsl #12
   227a8:	adc	r2, r2, r2
   227ac:	subcs	r0, r0, r1, lsl #12
   227b0:	cmp	r0, r1, lsl #11
   227b4:	adc	r2, r2, r2
   227b8:	subcs	r0, r0, r1, lsl #11
   227bc:	cmp	r0, r1, lsl #10
   227c0:	adc	r2, r2, r2
   227c4:	subcs	r0, r0, r1, lsl #10
   227c8:	cmp	r0, r1, lsl #9
   227cc:	adc	r2, r2, r2
   227d0:	subcs	r0, r0, r1, lsl #9
   227d4:	cmp	r0, r1, lsl #8
   227d8:	adc	r2, r2, r2
   227dc:	subcs	r0, r0, r1, lsl #8
   227e0:	cmp	r0, r1, lsl #7
   227e4:	adc	r2, r2, r2
   227e8:	subcs	r0, r0, r1, lsl #7
   227ec:	cmp	r0, r1, lsl #6
   227f0:	adc	r2, r2, r2
   227f4:	subcs	r0, r0, r1, lsl #6
   227f8:	cmp	r0, r1, lsl #5
   227fc:	adc	r2, r2, r2
   22800:	subcs	r0, r0, r1, lsl #5
   22804:	cmp	r0, r1, lsl #4
   22808:	adc	r2, r2, r2
   2280c:	subcs	r0, r0, r1, lsl #4
   22810:	cmp	r0, r1, lsl #3
   22814:	adc	r2, r2, r2
   22818:	subcs	r0, r0, r1, lsl #3
   2281c:	cmp	r0, r1, lsl #2
   22820:	adc	r2, r2, r2
   22824:	subcs	r0, r0, r1, lsl #2
   22828:	cmp	r0, r1, lsl #1
   2282c:	adc	r2, r2, r2
   22830:	subcs	r0, r0, r1, lsl #1
   22834:	cmp	r0, r1
   22838:	adc	r2, r2, r2
   2283c:	subcs	r0, r0, r1
   22840:	mov	r0, r2
   22844:	bx	lr
   22848:	moveq	r0, #1
   2284c:	movne	r0, #0
   22850:	bx	lr
   22854:	clz	r2, r1
   22858:	rsb	r2, r2, #31
   2285c:	lsr	r0, r0, r2
   22860:	bx	lr
   22864:	cmp	r0, #0
   22868:	mvnne	r0, #0
   2286c:	b	22b0c <__assert_fail@plt+0x113b8>
   22870:	cmp	r1, #0
   22874:	beq	22864 <__assert_fail@plt+0x11110>
   22878:	push	{r0, r1, lr}
   2287c:	bl	22684 <__assert_fail@plt+0x10f30>
   22880:	pop	{r1, r2, lr}
   22884:	mul	r3, r2, r0
   22888:	sub	r1, r1, r3
   2288c:	bx	lr
   22890:	cmp	r1, #0
   22894:	beq	22aa0 <__assert_fail@plt+0x1134c>
   22898:	eor	ip, r0, r1
   2289c:	rsbmi	r1, r1, #0
   228a0:	subs	r2, r1, #1
   228a4:	beq	22a6c <__assert_fail@plt+0x11318>
   228a8:	movs	r3, r0
   228ac:	rsbmi	r3, r0, #0
   228b0:	cmp	r3, r1
   228b4:	bls	22a78 <__assert_fail@plt+0x11324>
   228b8:	tst	r1, r2
   228bc:	beq	22a88 <__assert_fail@plt+0x11334>
   228c0:	clz	r2, r3
   228c4:	clz	r0, r1
   228c8:	sub	r2, r0, r2
   228cc:	rsbs	r2, r2, #31
   228d0:	addne	r2, r2, r2, lsl #1
   228d4:	mov	r0, #0
   228d8:	addne	pc, pc, r2, lsl #2
   228dc:	nop			; (mov r0, r0)
   228e0:	cmp	r3, r1, lsl #31
   228e4:	adc	r0, r0, r0
   228e8:	subcs	r3, r3, r1, lsl #31
   228ec:	cmp	r3, r1, lsl #30
   228f0:	adc	r0, r0, r0
   228f4:	subcs	r3, r3, r1, lsl #30
   228f8:	cmp	r3, r1, lsl #29
   228fc:	adc	r0, r0, r0
   22900:	subcs	r3, r3, r1, lsl #29
   22904:	cmp	r3, r1, lsl #28
   22908:	adc	r0, r0, r0
   2290c:	subcs	r3, r3, r1, lsl #28
   22910:	cmp	r3, r1, lsl #27
   22914:	adc	r0, r0, r0
   22918:	subcs	r3, r3, r1, lsl #27
   2291c:	cmp	r3, r1, lsl #26
   22920:	adc	r0, r0, r0
   22924:	subcs	r3, r3, r1, lsl #26
   22928:	cmp	r3, r1, lsl #25
   2292c:	adc	r0, r0, r0
   22930:	subcs	r3, r3, r1, lsl #25
   22934:	cmp	r3, r1, lsl #24
   22938:	adc	r0, r0, r0
   2293c:	subcs	r3, r3, r1, lsl #24
   22940:	cmp	r3, r1, lsl #23
   22944:	adc	r0, r0, r0
   22948:	subcs	r3, r3, r1, lsl #23
   2294c:	cmp	r3, r1, lsl #22
   22950:	adc	r0, r0, r0
   22954:	subcs	r3, r3, r1, lsl #22
   22958:	cmp	r3, r1, lsl #21
   2295c:	adc	r0, r0, r0
   22960:	subcs	r3, r3, r1, lsl #21
   22964:	cmp	r3, r1, lsl #20
   22968:	adc	r0, r0, r0
   2296c:	subcs	r3, r3, r1, lsl #20
   22970:	cmp	r3, r1, lsl #19
   22974:	adc	r0, r0, r0
   22978:	subcs	r3, r3, r1, lsl #19
   2297c:	cmp	r3, r1, lsl #18
   22980:	adc	r0, r0, r0
   22984:	subcs	r3, r3, r1, lsl #18
   22988:	cmp	r3, r1, lsl #17
   2298c:	adc	r0, r0, r0
   22990:	subcs	r3, r3, r1, lsl #17
   22994:	cmp	r3, r1, lsl #16
   22998:	adc	r0, r0, r0
   2299c:	subcs	r3, r3, r1, lsl #16
   229a0:	cmp	r3, r1, lsl #15
   229a4:	adc	r0, r0, r0
   229a8:	subcs	r3, r3, r1, lsl #15
   229ac:	cmp	r3, r1, lsl #14
   229b0:	adc	r0, r0, r0
   229b4:	subcs	r3, r3, r1, lsl #14
   229b8:	cmp	r3, r1, lsl #13
   229bc:	adc	r0, r0, r0
   229c0:	subcs	r3, r3, r1, lsl #13
   229c4:	cmp	r3, r1, lsl #12
   229c8:	adc	r0, r0, r0
   229cc:	subcs	r3, r3, r1, lsl #12
   229d0:	cmp	r3, r1, lsl #11
   229d4:	adc	r0, r0, r0
   229d8:	subcs	r3, r3, r1, lsl #11
   229dc:	cmp	r3, r1, lsl #10
   229e0:	adc	r0, r0, r0
   229e4:	subcs	r3, r3, r1, lsl #10
   229e8:	cmp	r3, r1, lsl #9
   229ec:	adc	r0, r0, r0
   229f0:	subcs	r3, r3, r1, lsl #9
   229f4:	cmp	r3, r1, lsl #8
   229f8:	adc	r0, r0, r0
   229fc:	subcs	r3, r3, r1, lsl #8
   22a00:	cmp	r3, r1, lsl #7
   22a04:	adc	r0, r0, r0
   22a08:	subcs	r3, r3, r1, lsl #7
   22a0c:	cmp	r3, r1, lsl #6
   22a10:	adc	r0, r0, r0
   22a14:	subcs	r3, r3, r1, lsl #6
   22a18:	cmp	r3, r1, lsl #5
   22a1c:	adc	r0, r0, r0
   22a20:	subcs	r3, r3, r1, lsl #5
   22a24:	cmp	r3, r1, lsl #4
   22a28:	adc	r0, r0, r0
   22a2c:	subcs	r3, r3, r1, lsl #4
   22a30:	cmp	r3, r1, lsl #3
   22a34:	adc	r0, r0, r0
   22a38:	subcs	r3, r3, r1, lsl #3
   22a3c:	cmp	r3, r1, lsl #2
   22a40:	adc	r0, r0, r0
   22a44:	subcs	r3, r3, r1, lsl #2
   22a48:	cmp	r3, r1, lsl #1
   22a4c:	adc	r0, r0, r0
   22a50:	subcs	r3, r3, r1, lsl #1
   22a54:	cmp	r3, r1
   22a58:	adc	r0, r0, r0
   22a5c:	subcs	r3, r3, r1
   22a60:	cmp	ip, #0
   22a64:	rsbmi	r0, r0, #0
   22a68:	bx	lr
   22a6c:	teq	ip, r0
   22a70:	rsbmi	r0, r0, #0
   22a74:	bx	lr
   22a78:	movcc	r0, #0
   22a7c:	asreq	r0, ip, #31
   22a80:	orreq	r0, r0, #1
   22a84:	bx	lr
   22a88:	clz	r2, r1
   22a8c:	rsb	r2, r2, #31
   22a90:	cmp	ip, #0
   22a94:	lsr	r0, r3, r2
   22a98:	rsbmi	r0, r0, #0
   22a9c:	bx	lr
   22aa0:	cmp	r0, #0
   22aa4:	mvngt	r0, #-2147483648	; 0x80000000
   22aa8:	movlt	r0, #-2147483648	; 0x80000000
   22aac:	b	22b0c <__assert_fail@plt+0x113b8>
   22ab0:	cmp	r1, #0
   22ab4:	beq	22aa0 <__assert_fail@plt+0x1134c>
   22ab8:	push	{r0, r1, lr}
   22abc:	bl	22898 <__assert_fail@plt+0x11144>
   22ac0:	pop	{r1, r2, lr}
   22ac4:	mul	r3, r2, r0
   22ac8:	sub	r1, r1, r3
   22acc:	bx	lr
   22ad0:	cmp	r3, #0
   22ad4:	cmpeq	r2, #0
   22ad8:	bne	22af0 <__assert_fail@plt+0x1139c>
   22adc:	cmp	r1, #0
   22ae0:	cmpeq	r0, #0
   22ae4:	mvnne	r1, #0
   22ae8:	mvnne	r0, #0
   22aec:	b	22b0c <__assert_fail@plt+0x113b8>
   22af0:	sub	sp, sp, #8
   22af4:	push	{sp, lr}
   22af8:	bl	22b1c <__assert_fail@plt+0x113c8>
   22afc:	ldr	lr, [sp, #4]
   22b00:	add	sp, sp, #8
   22b04:	pop	{r2, r3}
   22b08:	bx	lr
   22b0c:	push	{r1, lr}
   22b10:	mov	r0, #8
   22b14:	bl	11358 <raise@plt>
   22b18:	pop	{r1, pc}
   22b1c:	cmp	r1, r3
   22b20:	push	{r4, r5, r6, r7, r8, r9, lr}
   22b24:	cmpeq	r0, r2
   22b28:	mov	r4, r0
   22b2c:	mov	r5, r1
   22b30:	ldr	r9, [sp, #28]
   22b34:	movcc	r0, #0
   22b38:	movcc	r1, #0
   22b3c:	bcc	22c34 <__assert_fail@plt+0x114e0>
   22b40:	cmp	r3, #0
   22b44:	clzeq	ip, r2
   22b48:	clzne	ip, r3
   22b4c:	addeq	ip, ip, #32
   22b50:	cmp	r5, #0
   22b54:	clzeq	r1, r4
   22b58:	addeq	r1, r1, #32
   22b5c:	clzne	r1, r5
   22b60:	sub	ip, ip, r1
   22b64:	sub	lr, ip, #32
   22b68:	lsl	r7, r3, ip
   22b6c:	rsb	r8, ip, #32
   22b70:	orr	r7, r7, r2, lsl lr
   22b74:	orr	r7, r7, r2, lsr r8
   22b78:	lsl	r6, r2, ip
   22b7c:	cmp	r5, r7
   22b80:	cmpeq	r4, r6
   22b84:	movcc	r0, #0
   22b88:	movcc	r1, #0
   22b8c:	bcc	22ba8 <__assert_fail@plt+0x11454>
   22b90:	mov	r3, #1
   22b94:	subs	r4, r4, r6
   22b98:	lsl	r1, r3, lr
   22b9c:	lsl	r0, r3, ip
   22ba0:	orr	r1, r1, r3, lsr r8
   22ba4:	sbc	r5, r5, r7
   22ba8:	cmp	ip, #0
   22bac:	beq	22c34 <__assert_fail@plt+0x114e0>
   22bb0:	lsrs	r3, r7, #1
   22bb4:	rrx	r2, r6
   22bb8:	mov	r6, ip
   22bbc:	b	22be0 <__assert_fail@plt+0x1148c>
   22bc0:	subs	r4, r4, r2
   22bc4:	sbc	r5, r5, r3
   22bc8:	adds	r4, r4, r4
   22bcc:	adc	r5, r5, r5
   22bd0:	adds	r4, r4, #1
   22bd4:	adc	r5, r5, #0
   22bd8:	subs	r6, r6, #1
   22bdc:	beq	22bfc <__assert_fail@plt+0x114a8>
   22be0:	cmp	r5, r3
   22be4:	cmpeq	r4, r2
   22be8:	bcs	22bc0 <__assert_fail@plt+0x1146c>
   22bec:	adds	r4, r4, r4
   22bf0:	adc	r5, r5, r5
   22bf4:	subs	r6, r6, #1
   22bf8:	bne	22be0 <__assert_fail@plt+0x1148c>
   22bfc:	lsr	r6, r4, ip
   22c00:	lsr	r7, r5, ip
   22c04:	orr	r6, r6, r5, lsl r8
   22c08:	adds	r2, r0, r4
   22c0c:	orr	r6, r6, r5, lsr lr
   22c10:	adc	r3, r1, r5
   22c14:	lsl	r1, r7, ip
   22c18:	orr	r1, r1, r6, lsl lr
   22c1c:	lsl	r0, r6, ip
   22c20:	orr	r1, r1, r6, lsr r8
   22c24:	subs	r0, r2, r0
   22c28:	mov	r4, r6
   22c2c:	mov	r5, r7
   22c30:	sbc	r1, r3, r1
   22c34:	cmp	r9, #0
   22c38:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   22c3c:	strd	r4, [r9]
   22c40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22c44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22c48:	mov	r7, r0
   22c4c:	ldr	r6, [pc, #72]	; 22c9c <__assert_fail@plt+0x11548>
   22c50:	ldr	r5, [pc, #72]	; 22ca0 <__assert_fail@plt+0x1154c>
   22c54:	add	r6, pc, r6
   22c58:	add	r5, pc, r5
   22c5c:	sub	r6, r6, r5
   22c60:	mov	r8, r1
   22c64:	mov	r9, r2
   22c68:	bl	11320 <calloc@plt-0x20>
   22c6c:	asrs	r6, r6, #2
   22c70:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22c74:	mov	r4, #0
   22c78:	add	r4, r4, #1
   22c7c:	ldr	r3, [r5], #4
   22c80:	mov	r2, r9
   22c84:	mov	r1, r8
   22c88:	mov	r0, r7
   22c8c:	blx	r3
   22c90:	cmp	r6, r4
   22c94:	bne	22c78 <__assert_fail@plt+0x11524>
   22c98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22c9c:	andeq	r4, r1, ip, lsr #5
   22ca0:	andeq	r4, r1, r4, lsr #5
   22ca4:	bx	lr
   22ca8:	ldr	r3, [pc, #12]	; 22cbc <__assert_fail@plt+0x11568>
   22cac:	mov	r1, #0
   22cb0:	add	r3, pc, r3
   22cb4:	ldr	r2, [r3]
   22cb8:	b	11604 <__cxa_atexit@plt>
   22cbc:			; <UNDEFINED> instruction: 0x000144bc

Disassembly of section .fini:

00022cc0 <.fini>:
   22cc0:	push	{r3, lr}
   22cc4:	pop	{r3, pc}
