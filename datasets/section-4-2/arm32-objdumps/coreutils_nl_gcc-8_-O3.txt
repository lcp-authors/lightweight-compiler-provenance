
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00010f70 <.init>:
   10f70:	push	{r3, lr}
   10f74:	bl	11b04 <__assert_fail@plt+0x85c>
   10f78:	pop	{r3, pc}

Disassembly of section .plt:

00010f7c <pthread_mutex_unlock@plt-0x14>:
   10f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f80:	ldr	lr, [pc, #4]	; 10f8c <pthread_mutex_unlock@plt-0x4>
   10f84:	add	lr, pc, lr
   10f88:	ldr	pc, [lr, #8]!
   10f8c:	andeq	ip, r2, r4, ror r0

00010f90 <pthread_mutex_unlock@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #44, 20	; 0x2c000
   10f98:	ldr	pc, [ip, #116]!	; 0x74

00010f9c <calloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #44, 20	; 0x2c000
   10fa4:	ldr	pc, [ip, #108]!	; 0x6c

00010fa8 <fputs_unlocked@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #44, 20	; 0x2c000
   10fb0:	ldr	pc, [ip, #100]!	; 0x64

00010fb4 <wctype@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #44, 20	; 0x2c000
   10fbc:	ldr	pc, [ip, #92]!	; 0x5c

00010fc0 <wcrtomb@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #44, 20	; 0x2c000
   10fc8:	ldr	pc, [ip, #84]!	; 0x54

00010fcc <iswctype@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #44, 20	; 0x2c000
   10fd4:	ldr	pc, [ip, #76]!	; 0x4c

00010fd8 <strcmp@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #44, 20	; 0x2c000
   10fe0:	ldr	pc, [ip, #68]!	; 0x44

00010fe4 <posix_fadvise64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #44, 20	; 0x2c000
   10fec:	ldr	pc, [ip, #60]!	; 0x3c

00010ff0 <pthread_mutex_destroy@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #44, 20	; 0x2c000
   10ff8:	ldr	pc, [ip, #52]!	; 0x34

00010ffc <fflush@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #44, 20	; 0x2c000
   11004:	ldr	pc, [ip, #44]!	; 0x2c

00011008 <memmove@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #44, 20	; 0x2c000
   11010:	ldr	pc, [ip, #36]!	; 0x24

00011014 <free@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #44, 20	; 0x2c000
   1101c:	ldr	pc, [ip, #28]!

00011020 <pthread_mutex_lock@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #44, 20	; 0x2c000
   11028:	ldr	pc, [ip, #20]!

0001102c <_exit@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #44, 20	; 0x2c000
   11034:	ldr	pc, [ip, #12]!

00011038 <memcpy@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #44, 20	; 0x2c000
   11040:	ldr	pc, [ip, #4]!

00011044 <pthread_mutex_init@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #176128	; 0x2b000
   1104c:	ldr	pc, [ip, #4092]!	; 0xffc

00011050 <towlower@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #176128	; 0x2b000
   11058:	ldr	pc, [ip, #4084]!	; 0xff4

0001105c <mbsinit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #176128	; 0x2b000
   11064:	ldr	pc, [ip, #4076]!	; 0xfec

00011068 <fwrite_unlocked@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #176128	; 0x2b000
   11070:	ldr	pc, [ip, #4068]!	; 0xfe4

00011074 <memcmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #176128	; 0x2b000
   1107c:	ldr	pc, [ip, #4060]!	; 0xfdc

00011080 <stpcpy@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #176128	; 0x2b000
   11088:	ldr	pc, [ip, #4052]!	; 0xfd4

0001108c <fputc_unlocked@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #176128	; 0x2b000
   11094:	ldr	pc, [ip, #4044]!	; 0xfcc

00011098 <dcgettext@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #176128	; 0x2b000
   110a0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110a4 <realloc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #176128	; 0x2b000
   110ac:	ldr	pc, [ip, #4028]!	; 0xfbc

000110b0 <textdomain@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #176128	; 0x2b000
   110b8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110bc <iswprint@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #176128	; 0x2b000
   110c4:	ldr	pc, [ip, #4012]!	; 0xfac

000110c8 <fwrite@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #176128	; 0x2b000
   110d0:	ldr	pc, [ip, #4004]!	; 0xfa4

000110d4 <lseek64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #176128	; 0x2b000
   110dc:	ldr	pc, [ip, #3996]!	; 0xf9c

000110e0 <__ctype_get_mb_cur_max@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #176128	; 0x2b000
   110e8:	ldr	pc, [ip, #3988]!	; 0xf94

000110ec <strcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #176128	; 0x2b000
   110f4:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f8 <__fpending@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #176128	; 0x2b000
   11100:	ldr	pc, [ip, #3972]!	; 0xf84

00011104 <mbrtowc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #176128	; 0x2b000
   1110c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011110 <error@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #176128	; 0x2b000
   11118:	ldr	pc, [ip, #3956]!	; 0xf74

0001111c <malloc@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #176128	; 0x2b000
   11124:	ldr	pc, [ip, #3948]!	; 0xf6c

00011128 <__libc_start_main@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #176128	; 0x2b000
   11130:	ldr	pc, [ip, #3940]!	; 0xf64

00011134 <__freading@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #176128	; 0x2b000
   1113c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011140 <__ctype_tolower_loc@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #176128	; 0x2b000
   11148:	ldr	pc, [ip, #3924]!	; 0xf54

0001114c <__ctype_toupper_loc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #176128	; 0x2b000
   11154:	ldr	pc, [ip, #3916]!	; 0xf4c

00011158 <__gmon_start__@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #176128	; 0x2b000
   11160:	ldr	pc, [ip, #3908]!	; 0xf44

00011164 <getopt_long@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #176128	; 0x2b000
   1116c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011170 <__ctype_b_loc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #176128	; 0x2b000
   11178:	ldr	pc, [ip, #3892]!	; 0xf34

0001117c <exit@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #176128	; 0x2b000
   11184:	ldr	pc, [ip, #3884]!	; 0xf2c

00011188 <strlen@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #176128	; 0x2b000
   11190:	ldr	pc, [ip, #3876]!	; 0xf24

00011194 <strchr@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #176128	; 0x2b000
   1119c:	ldr	pc, [ip, #3868]!	; 0xf1c

000111a0 <__errno_location@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #176128	; 0x2b000
   111a8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ac <iswalnum@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #176128	; 0x2b000
   111b4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b8 <__cxa_atexit@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #176128	; 0x2b000
   111c0:	ldr	pc, [ip, #3844]!	; 0xf04

000111c4 <memset@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #176128	; 0x2b000
   111cc:	ldr	pc, [ip, #3836]!	; 0xefc

000111d0 <btowc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #176128	; 0x2b000
   111d8:	ldr	pc, [ip, #3828]!	; 0xef4

000111dc <__printf_chk@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #176128	; 0x2b000
   111e4:	ldr	pc, [ip, #3820]!	; 0xeec

000111e8 <fileno@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #176128	; 0x2b000
   111f0:	ldr	pc, [ip, #3812]!	; 0xee4

000111f4 <__fprintf_chk@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #176128	; 0x2b000
   111fc:	ldr	pc, [ip, #3804]!	; 0xedc

00011200 <fclose@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #176128	; 0x2b000
   11208:	ldr	pc, [ip, #3796]!	; 0xed4

0001120c <fseeko64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #176128	; 0x2b000
   11214:	ldr	pc, [ip, #3788]!	; 0xecc

00011218 <__uflow@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #176128	; 0x2b000
   11220:	ldr	pc, [ip, #3780]!	; 0xec4

00011224 <__overflow@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #176128	; 0x2b000
   1122c:	ldr	pc, [ip, #3772]!	; 0xebc

00011230 <setlocale@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #176128	; 0x2b000
   11238:	ldr	pc, [ip, #3764]!	; 0xeb4

0001123c <strrchr@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #176128	; 0x2b000
   11244:	ldr	pc, [ip, #3756]!	; 0xeac

00011248 <nl_langinfo@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #176128	; 0x2b000
   11250:	ldr	pc, [ip, #3748]!	; 0xea4

00011254 <clearerr_unlocked@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #176128	; 0x2b000
   1125c:	ldr	pc, [ip, #3740]!	; 0xe9c

00011260 <__strtoll_internal@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #176128	; 0x2b000
   11268:	ldr	pc, [ip, #3732]!	; 0xe94

0001126c <fopen64@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #176128	; 0x2b000
   11274:	ldr	pc, [ip, #3724]!	; 0xe8c

00011278 <bindtextdomain@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #176128	; 0x2b000
   11280:	ldr	pc, [ip, #3716]!	; 0xe84

00011284 <towupper@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #176128	; 0x2b000
   1128c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011290 <strncmp@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #176128	; 0x2b000
   11298:	ldr	pc, [ip, #3700]!	; 0xe74

0001129c <abort@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #176128	; 0x2b000
   112a4:	ldr	pc, [ip, #3692]!	; 0xe6c

000112a8 <__assert_fail@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #176128	; 0x2b000
   112b0:	ldr	pc, [ip, #3684]!	; 0xe64

Disassembly of section .text:

000112b4 <.text>:
   112b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112b8:	mov	r5, r1
   112bc:	strd	r6, [sp, #8]
   112c0:	mov	r6, r0
   112c4:	mov	r7, #1
   112c8:	strd	r8, [sp, #16]
   112cc:	movw	r8, #53728	; 0xd1e0
   112d0:	movt	r8, #3
   112d4:	strd	sl, [sp, #24]
   112d8:	movw	r9, #47908	; 0xbb24
   112dc:	movt	r9, #2
   112e0:	str	lr, [sp, #32]
   112e4:	sub	sp, sp, #44	; 0x2c
   112e8:	movw	sl, #53720	; 0xd1d8
   112ec:	movt	sl, #3
   112f0:	ldr	r0, [r1]
   112f4:	bl	12bc4 <__assert_fail@plt+0x191c>
   112f8:	movw	r1, #45548	; 0xb1ec
   112fc:	movt	r1, #2
   11300:	ldr	fp, [pc, #1936]	; 11a98 <__assert_fail@plt+0x7f0>
   11304:	mov	r0, #6
   11308:	bl	11230 <setlocale@plt>
   1130c:	movw	r1, #47564	; 0xb9cc
   11310:	movt	r1, #2
   11314:	movw	r0, #47396	; 0xb924
   11318:	movt	r0, #2
   1131c:	bl	11278 <bindtextdomain@plt>
   11320:	movw	r0, #47396	; 0xb924
   11324:	movt	r0, #2
   11328:	bl	110b0 <textdomain@plt>
   1132c:	movw	r0, #9768	; 0x2628
   11330:	movt	r0, #1
   11334:	bl	2b004 <__assert_fail@plt+0x19d5c>
   11338:	mov	r3, #0
   1133c:	str	r5, [sp, #28]
   11340:	strb	r3, [r8]
   11344:	mov	r4, #0
   11348:	mov	r3, fp
   1134c:	mov	r2, r9
   11350:	str	r4, [sp]
   11354:	mov	r0, r6
   11358:	ldr	r1, [sp, #28]
   1135c:	bl	11164 <getopt_long@plt>
   11360:	cmn	r0, #1
   11364:	beq	118b4 <__assert_fail@plt+0x60c>
   11368:	add	r0, r0, #3
   1136c:	cmp	r0, #122	; 0x7a
   11370:	ldrls	pc, [pc, r0, lsl #2]
   11374:	b	11868 <__assert_fail@plt+0x5c0>
   11378:			; <UNDEFINED> instruction: 0x000117b8
   1137c:	andeq	r1, r1, r8, lsl #21
   11380:	andeq	r1, r1, r8, ror #16
   11384:	andeq	r1, r1, r8, ror #16
   11388:	andeq	r1, r1, r8, ror #16
   1138c:	andeq	r1, r1, r8, ror #16
   11390:	andeq	r1, r1, r8, ror #16
   11394:	andeq	r1, r1, r8, ror #16
   11398:	andeq	r1, r1, r8, ror #16
   1139c:	andeq	r1, r1, r8, ror #16
   113a0:	andeq	r1, r1, r8, ror #16
   113a4:	andeq	r1, r1, r8, ror #16
   113a8:	andeq	r1, r1, r8, ror #16
   113ac:	andeq	r1, r1, r8, ror #16
   113b0:	andeq	r1, r1, r8, ror #16
   113b4:	andeq	r1, r1, r8, ror #16
   113b8:	andeq	r1, r1, r8, ror #16
   113bc:	andeq	r1, r1, r8, ror #16
   113c0:	andeq	r1, r1, r8, ror #16
   113c4:	andeq	r1, r1, r8, ror #16
   113c8:	andeq	r1, r1, r8, ror #16
   113cc:	andeq	r1, r1, r8, ror #16
   113d0:	andeq	r1, r1, r8, ror #16
   113d4:	andeq	r1, r1, r8, ror #16
   113d8:	andeq	r1, r1, r8, ror #16
   113dc:	andeq	r1, r1, r8, ror #16
   113e0:	andeq	r1, r1, r8, ror #16
   113e4:	andeq	r1, r1, r8, ror #16
   113e8:	andeq	r1, r1, r8, ror #16
   113ec:	andeq	r1, r1, r8, ror #16
   113f0:	andeq	r1, r1, r8, ror #16
   113f4:	andeq	r1, r1, r8, ror #16
   113f8:	andeq	r1, r1, r8, ror #16
   113fc:	andeq	r1, r1, r8, ror #16
   11400:	andeq	r1, r1, r8, ror #16
   11404:	andeq	r1, r1, r8, ror #16
   11408:	andeq	r1, r1, r8, ror #16
   1140c:	andeq	r1, r1, r8, ror #16
   11410:	andeq	r1, r1, r8, ror #16
   11414:	andeq	r1, r1, r8, ror #16
   11418:	andeq	r1, r1, r8, ror #16
   1141c:	andeq	r1, r1, r8, ror #16
   11420:	andeq	r1, r1, r8, ror #16
   11424:	andeq	r1, r1, r8, ror #16
   11428:	andeq	r1, r1, r8, ror #16
   1142c:	andeq	r1, r1, r8, ror #16
   11430:	andeq	r1, r1, r8, ror #16
   11434:	andeq	r1, r1, r8, ror #16
   11438:	andeq	r1, r1, r8, ror #16
   1143c:	andeq	r1, r1, r8, ror #16
   11440:	andeq	r1, r1, r8, ror #16
   11444:	andeq	r1, r1, r8, ror #16
   11448:	andeq	r1, r1, r8, ror #16
   1144c:	andeq	r1, r1, r8, ror #16
   11450:	andeq	r1, r1, r8, ror #16
   11454:	andeq	r1, r1, r8, ror #16
   11458:	andeq	r1, r1, r8, ror #16
   1145c:	andeq	r1, r1, r8, ror #16
   11460:	andeq	r1, r1, r8, ror #16
   11464:	andeq	r1, r1, r8, ror #16
   11468:	andeq	r1, r1, r8, ror #16
   1146c:	andeq	r1, r1, r8, ror #16
   11470:	andeq	r1, r1, r8, ror #16
   11474:	andeq	r1, r1, r8, ror #16
   11478:	andeq	r1, r1, r8, ror #16
   1147c:	andeq	r1, r1, r8, ror #16
   11480:	andeq	r1, r1, r8, ror #16
   11484:	andeq	r1, r1, r8, ror #16
   11488:	andeq	r1, r1, r8, ror #16
   1148c:	andeq	r1, r1, r8, ror #16
   11490:	andeq	r1, r1, r8, ror #16
   11494:	andeq	r1, r1, r8, ror #16
   11498:	andeq	r1, r1, r8, ror #16
   1149c:	andeq	r1, r1, r8, ror #16
   114a0:	andeq	r1, r1, r8, ror #16
   114a4:	andeq	r1, r1, r8, ror #16
   114a8:	andeq	r1, r1, r8, ror #16
   114ac:	andeq	r1, r1, r8, ror #16
   114b0:	andeq	r1, r1, r8, ror #16
   114b4:	andeq	r1, r1, r8, ror #16
   114b8:	andeq	r1, r1, r8, ror #16
   114bc:	andeq	r1, r1, r8, ror #16
   114c0:	andeq	r1, r1, r8, ror #16
   114c4:	andeq	r1, r1, r8, ror #16
   114c8:	andeq	r1, r1, r8, ror #16
   114cc:	andeq	r1, r1, r8, ror #16
   114d0:	andeq	r1, r1, r8, ror #16
   114d4:	andeq	r1, r1, r8, ror #16
   114d8:	andeq	r1, r1, r8, ror #16
   114dc:	andeq	r1, r1, r8, ror #16
   114e0:	andeq	r1, r1, r8, ror #16
   114e4:	andeq	r1, r1, r8, ror #16
   114e8:	andeq	r1, r1, r8, ror #16
   114ec:	andeq	r1, r1, r8, ror #16
   114f0:	andeq	r1, r1, r8, ror #16
   114f4:	andeq	r1, r1, r8, ror #16
   114f8:	andeq	r1, r1, r8, ror #16
   114fc:	andeq	r1, r1, r8, ror #16
   11500:	andeq	r1, r1, r8, ror #16
   11504:	andeq	r1, r1, r8, ror #16
   11508:	andeq	r1, r1, r8, ror #16
   1150c:	muleq	r1, r4, r7
   11510:	andeq	r1, r1, r8, ror #16
   11514:	andeq	r1, r1, r8, lsl #16
   11518:	andeq	r1, r1, r8, ror #16
   1151c:	andeq	r1, r1, r0, ror r7
   11520:	andeq	r1, r1, r8, ror #16
   11524:	andeq	r1, r1, ip, lsl r7
   11528:	andeq	r1, r1, r4, asr #13
   1152c:	andeq	r1, r1, r8, ror #16
   11530:	andeq	r1, r1, r8, ror #16
   11534:	andeq	r1, r1, ip, ror #12
   11538:	andeq	r1, r1, r8, ror #16
   1153c:	andeq	r1, r1, ip, lsr r6
   11540:	andeq	r1, r1, r8, ror #16
   11544:	andeq	r1, r1, r8, lsr #12
   11548:	andeq	r1, r1, r8, ror #16
   1154c:	andeq	r1, r1, r8, ror #16
   11550:	andeq	r1, r1, r4, lsl r6
   11554:	andeq	r1, r1, r8, ror #16
   11558:	andeq	r1, r1, r8, ror #16
   1155c:			; <UNDEFINED> instruction: 0x000115bc
   11560:	andeq	r1, r1, r4, ror #10
   11564:	ldr	r4, [sl]
   11568:	mov	r2, #5
   1156c:	movw	r1, #47796	; 0xbab4
   11570:	movt	r1, #2
   11574:	mov	r0, #0
   11578:	bl	11098 <dcgettext@plt>
   1157c:	mov	r1, #0
   11580:	mov	r5, #0
   11584:	movw	r3, #45548	; 0xb1ec
   11588:	movt	r3, #2
   1158c:	mov	r2, #1
   11590:	strd	r0, [sp, #12]
   11594:	mov	r0, r4
   11598:	mvn	r4, #-2147483648	; 0x80000000
   1159c:	strd	r4, [sp]
   115a0:	str	r3, [sp, #8]
   115a4:	mov	r3, #0
   115a8:	bl	29908 <__assert_fail@plt+0x18660>
   115ac:	movw	r3, #53544	; 0xd128
   115b0:	movt	r3, #3
   115b4:	str	r0, [r3, #40]	; 0x28
   115b8:	b	11344 <__assert_fail@plt+0x9c>
   115bc:	ldr	r4, [sl]
   115c0:	mov	r2, #5
   115c4:	movw	r1, #47696	; 0xba50
   115c8:	movt	r1, #2
   115cc:	mov	r0, #0
   115d0:	bl	11098 <dcgettext@plt>
   115d4:	mov	r1, #0
   115d8:	mvn	r5, #-2147483648	; 0x80000000
   115dc:	movw	r3, #45548	; 0xb1ec
   115e0:	movt	r3, #2
   115e4:	mov	r2, #0
   115e8:	strd	r0, [sp, #12]
   115ec:	mov	r0, r4
   115f0:	mvn	r4, #0
   115f4:	strd	r4, [sp]
   115f8:	str	r3, [sp, #8]
   115fc:	mov	r3, #-2147483648	; 0x80000000
   11600:	bl	29908 <__assert_fail@plt+0x18660>
   11604:	movw	r3, #53544	; 0xd128
   11608:	movt	r3, #3
   1160c:	strd	r0, [r3, #24]
   11610:	b	11344 <__assert_fail@plt+0x9c>
   11614:	ldr	r2, [sl]
   11618:	movw	r3, #53544	; 0xd128
   1161c:	movt	r3, #3
   11620:	str	r2, [r3, #48]	; 0x30
   11624:	b	11344 <__assert_fail@plt+0x9c>
   11628:	movw	r3, #53544	; 0xd128
   1162c:	movt	r3, #3
   11630:	mov	r2, #0
   11634:	strb	r2, [r3, #8]
   11638:	b	11344 <__assert_fail@plt+0x9c>
   1163c:	ldr	r4, [sl]
   11640:	movw	r1, #47828	; 0xbad4
   11644:	movt	r1, #2
   11648:	mov	r0, r4
   1164c:	bl	10fd8 <strcmp@plt>
   11650:	cmp	r0, #0
   11654:	bne	11870 <__assert_fail@plt+0x5c8>
   11658:	ldr	r2, [pc, #1084]	; 11a9c <__assert_fail@plt+0x7f4>
   1165c:	movw	r3, #53544	; 0xd128
   11660:	movt	r3, #3
   11664:	str	r2, [r3, #44]	; 0x2c
   11668:	b	11344 <__assert_fail@plt+0x9c>
   1166c:	ldr	r4, [sl]
   11670:	mov	r2, #5
   11674:	movw	r1, #47760	; 0xba90
   11678:	movt	r1, #2
   1167c:	mov	r0, #0
   11680:	bl	11098 <dcgettext@plt>
   11684:	mov	r1, #0
   11688:	mvn	r5, #-2147483648	; 0x80000000
   1168c:	movw	r3, #45548	; 0xb1ec
   11690:	movt	r3, #2
   11694:	mov	r2, #1
   11698:	strd	r0, [sp, #12]
   1169c:	mov	r0, r4
   116a0:	mvn	r4, #0
   116a4:	strd	r4, [sp]
   116a8:	str	r3, [sp, #8]
   116ac:	mov	r3, #0
   116b0:	bl	29908 <__assert_fail@plt+0x18660>
   116b4:	movw	r3, #53544	; 0xd128
   116b8:	movt	r3, #3
   116bc:	strd	r0, [r3, #32]
   116c0:	b	11344 <__assert_fail@plt+0x9c>
   116c4:	ldr	r4, [sl]
   116c8:	mov	r2, #5
   116cc:	movw	r1, #47728	; 0xba70
   116d0:	movt	r1, #2
   116d4:	mov	r0, #0
   116d8:	bl	11098 <dcgettext@plt>
   116dc:	mov	r1, #0
   116e0:	mvn	r5, #-2147483648	; 0x80000000
   116e4:	movw	r3, #45548	; 0xb1ec
   116e8:	movt	r3, #2
   116ec:	mov	r2, #0
   116f0:	strd	r0, [sp, #12]
   116f4:	mov	r0, r4
   116f8:	mvn	r4, #0
   116fc:	strd	r4, [sp]
   11700:	str	r3, [sp, #8]
   11704:	mov	r3, #-2147483648	; 0x80000000
   11708:	bl	29908 <__assert_fail@plt+0x18660>
   1170c:	movw	r3, #53544	; 0xd128
   11710:	movt	r3, #3
   11714:	strd	r0, [r3, #56]	; 0x38
   11718:	b	11344 <__assert_fail@plt+0x9c>
   1171c:	ldr	r2, [pc, #892]	; 11aa0 <__assert_fail@plt+0x7f8>
   11720:	ldr	r0, [pc, #892]	; 11aa4 <__assert_fail@plt+0x7fc>
   11724:	sub	r1, r2, #60	; 0x3c
   11728:	bl	11bb8 <__assert_fail@plt+0x910>
   1172c:	subs	r4, r0, #0
   11730:	movweq	r1, #47588	; 0xb9e4
   11734:	movteq	r1, #2
   11738:	bne	11344 <__assert_fail@plt+0x9c>
   1173c:	mov	r2, #5
   11740:	mov	r7, r4
   11744:	bl	11098 <dcgettext@plt>
   11748:	mov	r2, r0
   1174c:	ldr	r0, [sl]
   11750:	str	r2, [sp, #32]
   11754:	bl	16534 <__assert_fail@plt+0x528c>
   11758:	mov	r3, r0
   1175c:	mov	r1, r4
   11760:	ldr	r2, [sp, #32]
   11764:	mov	r0, r4
   11768:	bl	11110 <error@plt>
   1176c:	b	11344 <__assert_fail@plt+0x9c>
   11770:	ldr	r2, [pc, #816]	; 11aa8 <__assert_fail@plt+0x800>
   11774:	ldr	r0, [pc, #816]	; 11aac <__assert_fail@plt+0x804>
   11778:	sub	r1, r2, #636	; 0x27c
   1177c:	bl	11bb8 <__assert_fail@plt+0x910>
   11780:	subs	r4, r0, #0
   11784:	movweq	r1, #47660	; 0xba2c
   11788:	movteq	r1, #2
   1178c:	bne	11344 <__assert_fail@plt+0x9c>
   11790:	b	1173c <__assert_fail@plt+0x494>
   11794:	ldr	r2, [pc, #788]	; 11ab0 <__assert_fail@plt+0x808>
   11798:	ldr	r0, [pc, #788]	; 11ab4 <__assert_fail@plt+0x80c>
   1179c:	sub	r1, r2, #348	; 0x15c
   117a0:	bl	11bb8 <__assert_fail@plt+0x910>
   117a4:	subs	r4, r0, #0
   117a8:	bne	11344 <__assert_fail@plt+0x9c>
   117ac:	movw	r1, #47624	; 0xba08
   117b0:	movt	r1, #2
   117b4:	b	1173c <__assert_fail@plt+0x494>
   117b8:	mov	r4, #0
   117bc:	movw	r1, #47876	; 0xbb04
   117c0:	movt	r1, #2
   117c4:	movw	r2, #47892	; 0xbb14
   117c8:	movt	r2, #2
   117cc:	movw	r3, #53612	; 0xd16c
   117d0:	movt	r3, #3
   117d4:	movw	r0, #53716	; 0xd1d4
   117d8:	movt	r0, #3
   117dc:	str	r2, [sp]
   117e0:	movw	r2, #47392	; 0xb920
   117e4:	movt	r2, #2
   117e8:	stmib	sp, {r1, r4}
   117ec:	movw	r1, #45472	; 0xb1a0
   117f0:	movt	r1, #2
   117f4:	ldr	r0, [r0]
   117f8:	ldr	r3, [r3]
   117fc:	bl	28f94 <__assert_fail@plt+0x17cec>
   11800:	mov	r0, r4
   11804:	bl	1117c <exit@plt>
   11808:	ldr	r4, [sl]
   1180c:	mov	r0, r4
   11810:	bl	11188 <strlen@plt>
   11814:	sub	r0, r0, #1
   11818:	cmp	r0, #1
   1181c:	movwhi	r3, #53544	; 0xd128
   11820:	movthi	r3, #3
   11824:	strhi	r4, [r3]
   11828:	bhi	11344 <__assert_fail@plt+0x9c>
   1182c:	ldrb	r2, [r4]
   11830:	movw	r3, #53544	; 0xd128
   11834:	movt	r3, #3
   11838:	ldr	r3, [r3]
   1183c:	cmp	r2, #0
   11840:	beq	11344 <__assert_fail@plt+0x9c>
   11844:	add	r2, r4, #1
   11848:	str	r2, [sl]
   1184c:	ldrb	r2, [r4]
   11850:	strb	r2, [r3], #1
   11854:	ldr	r4, [sl]
   11858:	ldrb	r2, [r4]
   1185c:	cmp	r2, #0
   11860:	bne	11844 <__assert_fail@plt+0x59c>
   11864:	b	11344 <__assert_fail@plt+0x9c>
   11868:	mov	r7, #0
   1186c:	b	11348 <__assert_fail@plt+0xa0>
   11870:	movw	r1, #47832	; 0xbad8
   11874:	movt	r1, #2
   11878:	mov	r0, r4
   1187c:	bl	10fd8 <strcmp@plt>
   11880:	cmp	r0, #0
   11884:	beq	119f4 <__assert_fail@plt+0x74c>
   11888:	mov	r0, r4
   1188c:	movw	r1, #47836	; 0xbadc
   11890:	movt	r1, #2
   11894:	bl	10fd8 <strcmp@plt>
   11898:	cmp	r0, #0
   1189c:	bne	11a38 <__assert_fail@plt+0x790>
   118a0:	ldr	r2, [pc, #528]	; 11ab8 <__assert_fail@plt+0x810>
   118a4:	movw	r3, #53544	; 0xd128
   118a8:	movt	r3, #3
   118ac:	str	r2, [r3, #44]	; 0x2c
   118b0:	b	11344 <__assert_fail@plt+0x9c>
   118b4:	cmp	r7, #0
   118b8:	ldr	r5, [sp, #28]
   118bc:	beq	11a90 <__assert_fail@plt+0x7e8>
   118c0:	movw	sl, #53544	; 0xd128
   118c4:	movt	sl, #3
   118c8:	ldr	r0, [sl]
   118cc:	movw	r9, #53696	; 0xd1c0
   118d0:	movt	r9, #3
   118d4:	bl	11188 <strlen@plt>
   118d8:	lsl	r2, r0, #1
   118dc:	str	r2, [sp, #28]
   118e0:	add	r2, r2, r0
   118e4:	str	r0, [sp, #36]	; 0x24
   118e8:	add	r0, r2, #1
   118ec:	str	r2, [r8, #20]
   118f0:	bl	291a4 <__assert_fail@plt+0x17efc>
   118f4:	ldr	fp, [sl]
   118f8:	str	r0, [r8, #24]
   118fc:	str	r0, [sp, #32]
   11900:	mov	r1, fp
   11904:	bl	11080 <stpcpy@plt>
   11908:	mov	r1, fp
   1190c:	bl	11080 <stpcpy@plt>
   11910:	mov	r1, fp
   11914:	bl	110ec <strcpy@plt>
   11918:	ldrd	r2, [sp, #32]
   1191c:	ldr	r0, [pc, #408]	; 11abc <__assert_fail@plt+0x814>
   11920:	add	fp, r2, r3
   11924:	str	r3, [r8, #16]
   11928:	add	r2, fp, r3
   1192c:	ldr	r3, [sp, #28]
   11930:	str	r3, [r8, #28]
   11934:	str	fp, [r8, #32]
   11938:	str	r2, [r8, #36]	; 0x24
   1193c:	bl	1294c <__assert_fail@plt+0x16a4>
   11940:	ldr	r0, [sl, #48]	; 0x30
   11944:	bl	11188 <strlen@plt>
   11948:	mov	fp, r0
   1194c:	ldr	r0, [sl, #40]	; 0x28
   11950:	add	r0, r0, #1
   11954:	add	r0, r0, fp
   11958:	bl	291a4 <__assert_fail@plt+0x17efc>
   1195c:	ldr	r2, [sl, #40]	; 0x28
   11960:	mov	r1, #32
   11964:	str	r0, [r8, #168]	; 0xa8
   11968:	add	fp, fp, r2
   1196c:	mov	r2, fp
   11970:	bl	111c4 <memset@plt>
   11974:	ldr	r1, [r9]
   11978:	strb	r4, [r0, fp]
   1197c:	ldr	ip, [pc, #316]	; 11ac0 <__assert_fail@plt+0x818>
   11980:	ldr	r0, [sl, #12]
   11984:	cmp	r1, r6
   11988:	ldrd	r2, [sl, #24]
   1198c:	str	r0, [r8, #40]	; 0x28
   11990:	str	ip, [r8, #44]	; 0x2c
   11994:	strd	r2, [r8, #144]	; 0x90
   11998:	beq	11a74 <__assert_fail@plt+0x7cc>
   1199c:	bge	119c4 <__assert_fail@plt+0x71c>
   119a0:	ldr	r0, [r5, r1, lsl #2]
   119a4:	bl	11cfc <__assert_fail@plt+0xa54>
   119a8:	ldr	r1, [r9]
   119ac:	and	r7, r7, r0
   119b0:	uxtb	r7, r7
   119b4:	add	r1, r1, #1
   119b8:	cmp	r1, r6
   119bc:	str	r1, [r9]
   119c0:	blt	119a0 <__assert_fail@plt+0x6f8>
   119c4:	ldrb	r3, [r8]
   119c8:	cmp	r3, #0
   119cc:	bne	11a08 <__assert_fail@plt+0x760>
   119d0:	eor	r0, r7, #1
   119d4:	uxtb	r0, r0
   119d8:	add	sp, sp, #44	; 0x2c
   119dc:	ldrd	r4, [sp]
   119e0:	ldrd	r6, [sp, #8]
   119e4:	ldrd	r8, [sp, #16]
   119e8:	ldrd	sl, [sp, #24]
   119ec:	add	sp, sp, #32
   119f0:	pop	{pc}		; (ldr pc, [sp], #4)
   119f4:	ldr	r2, [pc, #200]	; 11ac4 <__assert_fail@plt+0x81c>
   119f8:	movw	r3, #53544	; 0xd128
   119fc:	movt	r3, #3
   11a00:	str	r2, [r3, #44]	; 0x2c
   11a04:	b	11344 <__assert_fail@plt+0x9c>
   11a08:	movw	r3, #53712	; 0xd1d0
   11a0c:	movt	r3, #3
   11a10:	ldr	r0, [r3]
   11a14:	bl	12768 <__assert_fail@plt+0x14c0>
   11a18:	cmn	r0, #1
   11a1c:	bne	119d0 <__assert_fail@plt+0x728>
   11a20:	bl	111a0 <__errno_location@plt>
   11a24:	movw	r2, #45432	; 0xb178
   11a28:	movt	r2, #2
   11a2c:	ldr	r1, [r0]
   11a30:	mov	r0, #1
   11a34:	bl	11110 <error@plt>
   11a38:	mov	r2, #5
   11a3c:	movw	r1, #47840	; 0xbae0
   11a40:	movt	r1, #2
   11a44:	mov	r0, #0
   11a48:	bl	11098 <dcgettext@plt>
   11a4c:	mov	r4, r0
   11a50:	ldr	r0, [sl]
   11a54:	mov	r7, #0
   11a58:	bl	16534 <__assert_fail@plt+0x528c>
   11a5c:	mov	r3, r0
   11a60:	mov	r2, r4
   11a64:	mov	r1, r7
   11a68:	mov	r0, r7
   11a6c:	bl	11110 <error@plt>
   11a70:	b	11344 <__assert_fail@plt+0x9c>
   11a74:	movw	r0, #45432	; 0xb178
   11a78:	movt	r0, #2
   11a7c:	bl	11cfc <__assert_fail@plt+0xa54>
   11a80:	mov	r7, r0
   11a84:	b	119c4 <__assert_fail@plt+0x71c>
   11a88:	mov	r0, #0
   11a8c:	bl	12210 <__assert_fail@plt+0xf68>
   11a90:	mov	r0, #1
   11a94:	bl	12210 <__assert_fail@plt+0xf68>
   11a98:	andeq	fp, r2, r0, lsl #1
   11a9c:	andeq	fp, r2, r0, rrx
   11aa0:	andeq	sp, r3, ip, lsl #5
   11aa4:	andeq	sp, r3, r8, lsr r1
   11aa8:	andeq	sp, r3, ip, lsl #9
   11aac:	andeq	sp, r3, ip, lsr #2
   11ab0:	andeq	sp, r3, ip, lsl #7
   11ab4:	andeq	sp, r3, r4, lsr r1
   11ab8:	andeq	fp, r2, r4, ror r0
   11abc:	andeq	sp, r3, r4, ror #3
   11ac0:	andeq	sp, r3, r0, lsr r2
   11ac4:	andeq	fp, r2, ip, rrx
   11ac8:	mov	fp, #0
   11acc:	mov	lr, #0
   11ad0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ad4:	mov	r2, sp
   11ad8:	push	{r2}		; (str r2, [sp, #-4]!)
   11adc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ae0:	ldr	ip, [pc, #16]	; 11af8 <__assert_fail@plt+0x850>
   11ae4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ae8:	ldr	r0, [pc, #12]	; 11afc <__assert_fail@plt+0x854>
   11aec:	ldr	r3, [pc, #12]	; 11b00 <__assert_fail@plt+0x858>
   11af0:	bl	11128 <__libc_start_main@plt>
   11af4:	bl	1129c <abort@plt>
   11af8:	andeq	fp, r2, r0
   11afc:			; <UNDEFINED> instruction: 0x000112b4
   11b00:	andeq	sl, r2, r0, lsr #31
   11b04:	ldr	r3, [pc, #20]	; 11b20 <__assert_fail@plt+0x878>
   11b08:	ldr	r2, [pc, #20]	; 11b24 <__assert_fail@plt+0x87c>
   11b0c:	add	r3, pc, r3
   11b10:	ldr	r2, [r3, r2]
   11b14:	cmp	r2, #0
   11b18:	bxeq	lr
   11b1c:	b	11158 <__gmon_start__@plt>
   11b20:	andeq	fp, r2, ip, ror #9
   11b24:	andeq	r0, r0, r8, lsl r1
   11b28:	ldr	r0, [pc, #24]	; 11b48 <__assert_fail@plt+0x8a0>
   11b2c:	ldr	r3, [pc, #24]	; 11b4c <__assert_fail@plt+0x8a4>
   11b30:	cmp	r3, r0
   11b34:	bxeq	lr
   11b38:	ldr	r3, [pc, #16]	; 11b50 <__assert_fail@plt+0x8a8>
   11b3c:	cmp	r3, #0
   11b40:	bxeq	lr
   11b44:	bx	r3
   11b48:			; <UNDEFINED> instruction: 0x0003d1b4
   11b4c:			; <UNDEFINED> instruction: 0x0003d1b4
   11b50:	andeq	r0, r0, r0
   11b54:	ldr	r0, [pc, #36]	; 11b80 <__assert_fail@plt+0x8d8>
   11b58:	ldr	r1, [pc, #36]	; 11b84 <__assert_fail@plt+0x8dc>
   11b5c:	sub	r1, r1, r0
   11b60:	asr	r1, r1, #2
   11b64:	add	r1, r1, r1, lsr #31
   11b68:	asrs	r1, r1, #1
   11b6c:	bxeq	lr
   11b70:	ldr	r3, [pc, #16]	; 11b88 <__assert_fail@plt+0x8e0>
   11b74:	cmp	r3, #0
   11b78:	bxeq	lr
   11b7c:	bx	r3
   11b80:			; <UNDEFINED> instruction: 0x0003d1b4
   11b84:			; <UNDEFINED> instruction: 0x0003d1b4
   11b88:	andeq	r0, r0, r0
   11b8c:	push	{r4, lr}
   11b90:	ldr	r4, [pc, #24]	; 11bb0 <__assert_fail@plt+0x908>
   11b94:	ldrb	r3, [r4]
   11b98:	cmp	r3, #0
   11b9c:	popne	{r4, pc}
   11ba0:	bl	11b28 <__assert_fail@plt+0x880>
   11ba4:	mov	r3, #1
   11ba8:	strb	r3, [r4]
   11bac:	pop	{r4, pc}
   11bb0:	ldrdeq	sp, [r3], -ip
   11bb4:	b	11b54 <__assert_fail@plt+0x8ac>
   11bb8:	movw	ip, #53720	; 0xd1d8
   11bbc:	movt	ip, #3
   11bc0:	strd	r4, [sp, #-16]!
   11bc4:	str	r6, [sp, #8]
   11bc8:	str	lr, [sp, #12]
   11bcc:	ldr	lr, [ip]
   11bd0:	ldrb	r3, [lr]
   11bd4:	sub	r3, r3, #97	; 0x61
   11bd8:	cmp	r3, #19
   11bdc:	ldrls	pc, [pc, r3, lsl #2]
   11be0:	b	11cb0 <__assert_fail@plt+0xa08>
   11be4:	andeq	r1, r1, r4, lsr #25
   11be8:			; <UNDEFINED> instruction: 0x00011cb0
   11bec:			; <UNDEFINED> instruction: 0x00011cb0
   11bf0:			; <UNDEFINED> instruction: 0x00011cb0
   11bf4:			; <UNDEFINED> instruction: 0x00011cb0
   11bf8:			; <UNDEFINED> instruction: 0x00011cb0
   11bfc:			; <UNDEFINED> instruction: 0x00011cb0
   11c00:			; <UNDEFINED> instruction: 0x00011cb0
   11c04:			; <UNDEFINED> instruction: 0x00011cb0
   11c08:			; <UNDEFINED> instruction: 0x00011cb0
   11c0c:			; <UNDEFINED> instruction: 0x00011cb0
   11c10:			; <UNDEFINED> instruction: 0x00011cb0
   11c14:			; <UNDEFINED> instruction: 0x00011cb0
   11c18:	andeq	r1, r1, r4, lsr #25
   11c1c:			; <UNDEFINED> instruction: 0x00011cb0
   11c20:	andeq	r1, r1, r4, lsr ip
   11c24:			; <UNDEFINED> instruction: 0x00011cb0
   11c28:			; <UNDEFINED> instruction: 0x00011cb0
   11c2c:			; <UNDEFINED> instruction: 0x00011cb0
   11c30:	andeq	r1, r1, r4, lsr #25
   11c34:	add	r3, lr, #1
   11c38:	mov	r4, r1
   11c3c:	mov	r5, #0
   11c40:	movw	r1, #710	; 0x2c6
   11c44:	str	r3, [ip]
   11c48:	movw	r3, #54984	; 0xd6c8
   11c4c:	movt	r3, #3
   11c50:	str	lr, [r0]
   11c54:	ldr	r6, [ip]
   11c58:	str	r5, [r4]
   11c5c:	str	r5, [r4, #4]
   11c60:	str	r2, [r4, #16]
   11c64:	str	r5, [r4, #20]
   11c68:	mov	r0, r6
   11c6c:	str	r1, [r3]
   11c70:	bl	11188 <strlen@plt>
   11c74:	mov	r1, r0
   11c78:	mov	r2, r4
   11c7c:	mov	r0, r6
   11c80:	bl	27bf8 <__assert_fail@plt+0x16950>
   11c84:	cmp	r0, #0
   11c88:	moveq	r3, #1
   11c8c:	bne	11cb8 <__assert_fail@plt+0xa10>
   11c90:	ldrd	r4, [sp]
   11c94:	mov	r0, r3
   11c98:	ldr	r6, [sp, #8]
   11c9c:	add	sp, sp, #12
   11ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ca4:	mov	r3, #1
   11ca8:	str	lr, [r0]
   11cac:	b	11c90 <__assert_fail@plt+0x9e8>
   11cb0:	mov	r3, #0
   11cb4:	b	11c90 <__assert_fail@plt+0x9e8>
   11cb8:	mov	r3, r0
   11cbc:	movw	r2, #47620	; 0xba04
   11cc0:	movt	r2, #2
   11cc4:	mov	r1, r5
   11cc8:	mov	r0, #1
   11ccc:	bl	11110 <error@plt>
   11cd0:	mov	r2, #5
   11cd4:	movw	r1, #45408	; 0xb160
   11cd8:	movt	r1, #2
   11cdc:	mov	r0, #0
   11ce0:	str	r4, [sp, #-8]!
   11ce4:	str	lr, [sp, #4]
   11ce8:	bl	11098 <dcgettext@plt>
   11cec:	mov	r2, r0
   11cf0:	mov	r1, #0
   11cf4:	mov	r0, #1
   11cf8:	bl	11110 <error@plt>
   11cfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11d00:	movw	r1, #45432	; 0xb178
   11d04:	movt	r1, #2
   11d08:	strd	r6, [sp, #8]
   11d0c:	strd	r8, [sp, #16]
   11d10:	strd	sl, [sp, #24]
   11d14:	str	lr, [sp, #32]
   11d18:	sub	sp, sp, #36	; 0x24
   11d1c:	str	r0, [sp, #20]
   11d20:	bl	10fd8 <strcmp@plt>
   11d24:	cmp	r0, #0
   11d28:	bne	12144 <__assert_fail@plt+0xe9c>
   11d2c:	movw	r3, #53712	; 0xd1d0
   11d30:	movt	r3, #3
   11d34:	ldr	r9, [r3]
   11d38:	movw	r4, #53728	; 0xd1e0
   11d3c:	movt	r4, #3
   11d40:	mov	r2, #1
   11d44:	strb	r2, [r4]
   11d48:	mov	r1, #2
   11d4c:	mov	r0, r9
   11d50:	movw	r5, #53544	; 0xd128
   11d54:	movt	r5, #3
   11d58:	movw	r8, #53716	; 0xd1d4
   11d5c:	movt	r8, #3
   11d60:	bl	12718 <__assert_fail@plt+0x1470>
   11d64:	mov	r1, r9
   11d68:	ldr	r0, [pc, #1168]	; 12200 <__assert_fail@plt+0xf58>
   11d6c:	bl	12960 <__assert_fail@plt+0x16b8>
   11d70:	cmp	r0, #0
   11d74:	beq	120c8 <__assert_fail@plt+0xe20>
   11d78:	ldr	r6, [r4, #8]
   11d7c:	sub	r7, r6, #1
   11d80:	cmp	r7, #1
   11d84:	bls	11dac <__assert_fail@plt+0xb04>
   11d88:	ldr	fp, [r4, #16]
   11d8c:	cmp	fp, #1
   11d90:	bls	11dac <__assert_fail@plt+0xb04>
   11d94:	ldr	r3, [r5]
   11d98:	ldr	sl, [r4, #12]
   11d9c:	ldrb	r2, [r3]
   11da0:	ldrb	r1, [sl]
   11da4:	cmp	r1, r2
   11da8:	beq	11fb8 <__assert_fail@plt+0xd10>
   11dac:	ldr	r3, [r4, #40]	; 0x28
   11db0:	ldrb	r3, [r3]
   11db4:	sub	r3, r3, #97	; 0x61
   11db8:	cmp	r3, #19
   11dbc:	ldrls	pc, [pc, r3, lsl #2]
   11dc0:	b	11e6c <__assert_fail@plt+0xbc4>
   11dc4:	andeq	r1, r1, r4, lsl #29
   11dc8:	andeq	r1, r1, ip, ror #28
   11dcc:	andeq	r1, r1, ip, ror #28
   11dd0:	andeq	r1, r1, ip, ror #28
   11dd4:	andeq	r1, r1, ip, ror #28
   11dd8:	andeq	r1, r1, ip, ror #28
   11ddc:	andeq	r1, r1, ip, ror #28
   11de0:	andeq	r1, r1, ip, ror #28
   11de4:	andeq	r1, r1, ip, ror #28
   11de8:	andeq	r1, r1, ip, ror #28
   11dec:	andeq	r1, r1, ip, ror #28
   11df0:	andeq	r1, r1, ip, ror #28
   11df4:	andeq	r1, r1, ip, ror #28
   11df8:	andeq	r1, r1, r4, lsr #31
   11dfc:	andeq	r1, r1, ip, ror #28
   11e00:	andeq	r1, r1, r4, lsr #30
   11e04:	andeq	r1, r1, ip, ror #28
   11e08:	andeq	r1, r1, ip, ror #28
   11e0c:	andeq	r1, r1, ip, ror #28
   11e10:	andeq	r1, r1, r4, lsl lr
   11e14:	cmp	r6, #1
   11e18:	ble	11fa4 <__assert_fail@plt+0xcfc>
   11e1c:	ldrb	r3, [r4, #152]	; 0x98
   11e20:	cmp	r3, #0
   11e24:	bne	121d0 <__assert_fail@plt+0xf28>
   11e28:	ldrd	r6, [r4, #144]	; 0x90
   11e2c:	mov	r0, #1
   11e30:	ldr	r3, [r5, #48]	; 0x30
   11e34:	ldr	r2, [r5, #40]	; 0x28
   11e38:	str	r3, [sp, #8]
   11e3c:	ldr	r1, [r5, #44]	; 0x2c
   11e40:	strd	r6, [sp]
   11e44:	bl	111dc <__printf_chk@plt>
   11e48:	ldrd	r2, [r5, #56]	; 0x38
   11e4c:	ldrd	r0, [r4, #144]	; 0x90
   11e50:	adds	r6, r0, r2
   11e54:	adcs	r7, r1, r3
   11e58:	strd	r6, [r4, #144]	; 0x90
   11e5c:	bvc	11fb0 <__assert_fail@plt+0xd08>
   11e60:	ldr	r6, [r4, #8]
   11e64:	mov	r3, #1
   11e68:	strb	r3, [r4, #152]	; 0x98
   11e6c:	mov	r2, r6
   11e70:	mov	r1, #1
   11e74:	ldr	r3, [r8]
   11e78:	ldr	r0, [r4, #12]
   11e7c:	bl	11068 <fwrite_unlocked@plt>
   11e80:	b	11d64 <__assert_fail@plt+0xabc>
   11e84:	ldrd	r0, [r5, #32]
   11e88:	cmp	r0, #2
   11e8c:	sbcs	r3, r1, #0
   11e90:	blt	11e1c <__assert_fail@plt+0xb74>
   11e94:	cmp	r6, #1
   11e98:	bgt	11ec8 <__assert_fail@plt+0xc20>
   11e9c:	ldr	r3, [r4, #160]	; 0xa0
   11ea0:	ldr	r2, [r4, #164]	; 0xa4
   11ea4:	adds	r3, r3, #1
   11ea8:	str	r3, [sp, #24]
   11eac:	adc	r3, r2, #0
   11eb0:	str	r3, [sp, #28]
   11eb4:	ldrd	r2, [sp, #24]
   11eb8:	cmp	r1, r3
   11ebc:	strd	r2, [r4, #160]	; 0xa0
   11ec0:	cmpeq	r0, r2
   11ec4:	bne	11fa4 <__assert_fail@plt+0xcfc>
   11ec8:	ldrb	r3, [r4, #152]	; 0x98
   11ecc:	cmp	r3, #0
   11ed0:	bne	121d0 <__assert_fail@plt+0xf28>
   11ed4:	ldrd	r6, [r4, #144]	; 0x90
   11ed8:	mov	r0, #1
   11edc:	ldr	r3, [r5, #48]	; 0x30
   11ee0:	ldr	r2, [r5, #40]	; 0x28
   11ee4:	str	r3, [sp, #8]
   11ee8:	ldr	r1, [r5, #44]	; 0x2c
   11eec:	strd	r6, [sp]
   11ef0:	bl	111dc <__printf_chk@plt>
   11ef4:	ldrd	r2, [r5, #56]	; 0x38
   11ef8:	ldrd	r0, [r4, #144]	; 0x90
   11efc:	adds	r6, r0, r2
   11f00:	mov	r2, #0
   11f04:	adcs	r7, r1, r3
   11f08:	movvs	r3, #1
   11f0c:	strd	r6, [r4, #144]	; 0x90
   11f10:	strbvs	r3, [r4, #152]	; 0x98
   11f14:	mov	r3, #0
   11f18:	ldr	r6, [r4, #8]
   11f1c:	strd	r2, [r4, #160]	; 0xa0
   11f20:	b	11e6c <__assert_fail@plt+0xbc4>
   11f24:	mov	r6, #0
   11f28:	mov	r2, r7
   11f2c:	str	r7, [sp]
   11f30:	mov	r3, r6
   11f34:	ldr	r1, [r4, #12]
   11f38:	str	r6, [sp, #4]
   11f3c:	ldr	r0, [r4, #44]	; 0x2c
   11f40:	bl	287f0 <__assert_fail@plt+0x17548>
   11f44:	cmn	r0, #2
   11f48:	beq	121d4 <__assert_fail@plt+0xf2c>
   11f4c:	cmn	r0, #1
   11f50:	beq	11fa4 <__assert_fail@plt+0xcfc>
   11f54:	ldrb	r3, [r4, #152]	; 0x98
   11f58:	cmp	r3, #0
   11f5c:	bne	121d0 <__assert_fail@plt+0xf28>
   11f60:	ldrd	r6, [r4, #144]	; 0x90
   11f64:	mov	r0, #1
   11f68:	ldr	r3, [r5, #48]	; 0x30
   11f6c:	ldr	r2, [r5, #40]	; 0x28
   11f70:	str	r3, [sp, #8]
   11f74:	ldr	r1, [r5, #44]	; 0x2c
   11f78:	strd	r6, [sp]
   11f7c:	bl	111dc <__printf_chk@plt>
   11f80:	ldrd	r2, [r5, #56]	; 0x38
   11f84:	ldrd	r0, [r4, #144]	; 0x90
   11f88:	adds	r6, r0, r2
   11f8c:	adcs	r7, r1, r3
   11f90:	movvs	r3, #1
   11f94:	strd	r6, [r4, #144]	; 0x90
   11f98:	strbvs	r3, [r4, #152]	; 0x98
   11f9c:	ldr	r6, [r4, #8]
   11fa0:	b	11e6c <__assert_fail@plt+0xbc4>
   11fa4:	ldr	r1, [r8]
   11fa8:	ldr	r0, [r4, #168]	; 0xa8
   11fac:	bl	10fa8 <fputs_unlocked@plt>
   11fb0:	ldr	r6, [r4, #8]
   11fb4:	b	11e6c <__assert_fail@plt+0xbc4>
   11fb8:	ldrb	r3, [r3, #1]
   11fbc:	ldrb	r2, [sl, #1]
   11fc0:	cmp	r2, r3
   11fc4:	bne	11dac <__assert_fail@plt+0xb04>
   11fc8:	ldr	r3, [r4, #20]
   11fcc:	cmp	r7, r3
   11fd0:	beq	12090 <__assert_fail@plt+0xde8>
   11fd4:	ldr	r3, [r4, #28]
   11fd8:	cmp	r7, r3
   11fdc:	beq	12058 <__assert_fail@plt+0xdb0>
   11fe0:	cmp	r7, fp
   11fe4:	bne	11dac <__assert_fail@plt+0xb04>
   11fe8:	mov	r0, sl
   11fec:	mov	r2, r7
   11ff0:	ldr	r1, [r4, #36]	; 0x24
   11ff4:	bl	11074 <memcmp@plt>
   11ff8:	cmp	r0, #0
   11ffc:	bne	11dac <__assert_fail@plt+0xb04>
   12000:	ldrb	r1, [r5, #8]
   12004:	ldr	r2, [pc, #504]	; 12204 <__assert_fail@plt+0xf5c>
   12008:	ldr	r3, [r5, #4]
   1200c:	cmp	r1, #0
   12010:	str	r3, [r4, #40]	; 0x28
   12014:	str	r2, [r4, #44]	; 0x2c
   12018:	beq	12028 <__assert_fail@plt+0xd80>
   1201c:	ldrd	r2, [r5, #24]
   12020:	strd	r2, [r4, #144]	; 0x90
   12024:	strb	r0, [r4, #152]	; 0x98
   12028:	ldr	r0, [r8]
   1202c:	ldr	r3, [r0, #20]
   12030:	ldr	r2, [r0, #24]
   12034:	cmp	r3, r2
   12038:	addcc	r1, r3, #1
   1203c:	movcc	r2, #10
   12040:	strcc	r1, [r0, #20]
   12044:	strbcc	r2, [r3]
   12048:	bcc	11d64 <__assert_fail@plt+0xabc>
   1204c:	mov	r1, #10
   12050:	bl	11224 <__overflow@plt>
   12054:	b	11d64 <__assert_fail@plt+0xabc>
   12058:	mov	r2, r7
   1205c:	mov	r0, sl
   12060:	ldr	r1, [r4, #32]
   12064:	bl	11074 <memcmp@plt>
   12068:	cmp	r0, #0
   1206c:	bne	11fe0 <__assert_fail@plt+0xd38>
   12070:	ldrb	r1, [r5, #8]
   12074:	ldr	r2, [pc, #396]	; 12208 <__assert_fail@plt+0xf60>
   12078:	ldr	r3, [r5, #12]
   1207c:	cmp	r1, #0
   12080:	str	r3, [r4, #40]	; 0x28
   12084:	str	r2, [r4, #44]	; 0x2c
   12088:	bne	1201c <__assert_fail@plt+0xd74>
   1208c:	b	12028 <__assert_fail@plt+0xd80>
   12090:	mov	r2, r7
   12094:	mov	r0, sl
   12098:	ldr	r1, [r4, #24]
   1209c:	bl	11074 <memcmp@plt>
   120a0:	cmp	r0, #0
   120a4:	bne	11fd4 <__assert_fail@plt+0xd2c>
   120a8:	ldrb	r1, [r5, #8]
   120ac:	ldr	r2, [pc, #344]	; 1220c <__assert_fail@plt+0xf64>
   120b0:	ldr	r3, [r5, #16]
   120b4:	cmp	r1, #0
   120b8:	str	r3, [r4, #40]	; 0x28
   120bc:	str	r2, [r4, #44]	; 0x2c
   120c0:	beq	12028 <__assert_fail@plt+0xd80>
   120c4:	b	1201c <__assert_fail@plt+0xd74>
   120c8:	bl	111a0 <__errno_location@plt>
   120cc:	ldr	r3, [r9]
   120d0:	mov	r5, r0
   120d4:	movw	r1, #45432	; 0xb178
   120d8:	movt	r1, #2
   120dc:	ldr	r4, [r0]
   120e0:	ldr	r0, [sp, #20]
   120e4:	tst	r3, #32
   120e8:	moveq	r4, #0
   120ec:	bl	10fd8 <strcmp@plt>
   120f0:	cmp	r0, #0
   120f4:	mov	r0, r9
   120f8:	bne	12128 <__assert_fail@plt+0xe80>
   120fc:	bl	11254 <clearerr_unlocked@plt>
   12100:	cmp	r4, #0
   12104:	moveq	r0, #1
   12108:	bne	12168 <__assert_fail@plt+0xec0>
   1210c:	add	sp, sp, #36	; 0x24
   12110:	ldrd	r4, [sp]
   12114:	ldrd	r6, [sp, #8]
   12118:	ldrd	r8, [sp, #16]
   1211c:	ldrd	sl, [sp, #24]
   12120:	add	sp, sp, #32
   12124:	pop	{pc}		; (ldr pc, [sp], #4)
   12128:	bl	12768 <__assert_fail@plt+0x14c0>
   1212c:	cmp	r0, #0
   12130:	beq	12100 <__assert_fail@plt+0xe58>
   12134:	cmp	r4, #0
   12138:	bne	12168 <__assert_fail@plt+0xec0>
   1213c:	ldr	r4, [r5]
   12140:	b	12100 <__assert_fail@plt+0xe58>
   12144:	movw	r1, #49072	; 0xbfb0
   12148:	movt	r1, #2
   1214c:	ldr	r0, [sp, #20]
   12150:	bl	1126c <fopen64@plt>
   12154:	subs	r9, r0, #0
   12158:	beq	12198 <__assert_fail@plt+0xef0>
   1215c:	movw	r4, #53728	; 0xd1e0
   12160:	movt	r4, #3
   12164:	b	11d48 <__assert_fail@plt+0xaa0>
   12168:	mov	r1, #3
   1216c:	mov	r0, #0
   12170:	ldr	r2, [sp, #20]
   12174:	bl	15d88 <__assert_fail@plt+0x4ae0>
   12178:	mov	r3, r0
   1217c:	mov	r1, r4
   12180:	mov	r0, #0
   12184:	movw	r2, #47620	; 0xba04
   12188:	movt	r2, #2
   1218c:	bl	11110 <error@plt>
   12190:	mov	r0, #0
   12194:	b	1210c <__assert_fail@plt+0xe64>
   12198:	bl	111a0 <__errno_location@plt>
   1219c:	ldr	r4, [r0]
   121a0:	mov	r1, #3
   121a4:	mov	r0, r9
   121a8:	ldr	r2, [sp, #20]
   121ac:	bl	15d88 <__assert_fail@plt+0x4ae0>
   121b0:	mov	r3, r0
   121b4:	movw	r2, #47620	; 0xba04
   121b8:	movt	r2, #2
   121bc:	mov	r0, r9
   121c0:	mov	r1, r4
   121c4:	bl	11110 <error@plt>
   121c8:	mov	r0, r9
   121cc:	b	1210c <__assert_fail@plt+0xe64>
   121d0:	bl	11cd0 <__assert_fail@plt+0xa28>
   121d4:	bl	111a0 <__errno_location@plt>
   121d8:	ldr	r4, [r0]
   121dc:	mov	r2, #5
   121e0:	movw	r1, #45436	; 0xb17c
   121e4:	movt	r1, #2
   121e8:	mov	r0, r6
   121ec:	bl	11098 <dcgettext@plt>
   121f0:	mov	r2, r0
   121f4:	mov	r0, #1
   121f8:	mov	r1, r4
   121fc:	bl	11110 <error@plt>
   12200:	andeq	sp, r3, r4, ror #3
   12204:	andeq	sp, r3, r0, lsl r2
   12208:	andeq	sp, r3, r0, lsr r2
   1220c:	andeq	sp, r3, r0, asr r2
   12210:	subs	r6, r0, #0
   12214:	str	r7, [sp, #-8]!
   12218:	str	lr, [sp, #4]
   1221c:	sub	sp, sp, #56	; 0x38
   12220:	beq	12268 <__assert_fail@plt+0xfc0>
   12224:	movw	r3, #53704	; 0xd1c8
   12228:	movt	r3, #3
   1222c:	ldr	r4, [r3]
   12230:	mov	r2, #5
   12234:	movw	r1, #45476	; 0xb1a4
   12238:	movt	r1, #2
   1223c:	mov	r0, #0
   12240:	bl	11098 <dcgettext@plt>
   12244:	movw	r3, #54676	; 0xd594
   12248:	movt	r3, #3
   1224c:	mov	r2, r0
   12250:	mov	r1, #1
   12254:	ldr	r3, [r3]
   12258:	mov	r0, r4
   1225c:	bl	111f4 <__fprintf_chk@plt>
   12260:	mov	r0, r6
   12264:	bl	1117c <exit@plt>
   12268:	mov	r2, #5
   1226c:	movw	r1, #45516	; 0xb1cc
   12270:	movt	r1, #2
   12274:	movw	r7, #53716	; 0xd1d4
   12278:	movt	r7, #3
   1227c:	bl	11098 <dcgettext@plt>
   12280:	movw	r3, #54676	; 0xd594
   12284:	movt	r3, #3
   12288:	mov	r1, r0
   1228c:	mov	r0, #1
   12290:	ldr	r2, [r3]
   12294:	bl	111dc <__printf_chk@plt>
   12298:	mov	r2, #5
   1229c:	movw	r1, #45552	; 0xb1f0
   122a0:	movt	r1, #2
   122a4:	mov	r0, r6
   122a8:	bl	11098 <dcgettext@plt>
   122ac:	ldr	r1, [r7]
   122b0:	bl	10fa8 <fputs_unlocked@plt>
   122b4:	mov	r2, #5
   122b8:	movw	r1, #45616	; 0xb230
   122bc:	movt	r1, #2
   122c0:	mov	r0, r6
   122c4:	bl	11098 <dcgettext@plt>
   122c8:	ldr	r1, [r7]
   122cc:	bl	10fa8 <fputs_unlocked@plt>
   122d0:	mov	r2, #5
   122d4:	movw	r1, #45672	; 0xb268
   122d8:	movt	r1, #2
   122dc:	mov	r0, r6
   122e0:	bl	11098 <dcgettext@plt>
   122e4:	ldr	r1, [r7]
   122e8:	bl	10fa8 <fputs_unlocked@plt>
   122ec:	mov	r2, #5
   122f0:	movw	r1, #45748	; 0xb2b4
   122f4:	movt	r1, #2
   122f8:	mov	r0, r6
   122fc:	bl	11098 <dcgettext@plt>
   12300:	ldr	r1, [r7]
   12304:	bl	10fa8 <fputs_unlocked@plt>
   12308:	mov	r2, #5
   1230c:	movw	r1, #45960	; 0xb388
   12310:	movt	r1, #2
   12314:	mov	r0, r6
   12318:	bl	11098 <dcgettext@plt>
   1231c:	ldr	r1, [r7]
   12320:	bl	10fa8 <fputs_unlocked@plt>
   12324:	mov	r2, #5
   12328:	movw	r1, #46404	; 0xb544
   1232c:	movt	r1, #2
   12330:	mov	r0, r6
   12334:	bl	11098 <dcgettext@plt>
   12338:	ldr	r1, [r7]
   1233c:	bl	10fa8 <fputs_unlocked@plt>
   12340:	mov	r2, #5
   12344:	movw	r1, #46548	; 0xb5d4
   12348:	movt	r1, #2
   1234c:	mov	r0, r6
   12350:	bl	11098 <dcgettext@plt>
   12354:	ldr	r1, [r7]
   12358:	bl	10fa8 <fputs_unlocked@plt>
   1235c:	mov	r2, #5
   12360:	movw	r1, #46596	; 0xb604
   12364:	movt	r1, #2
   12368:	mov	r0, r6
   1236c:	bl	11098 <dcgettext@plt>
   12370:	ldr	r1, [r7]
   12374:	bl	10fa8 <fputs_unlocked@plt>
   12378:	mov	r2, #5
   1237c:	movw	r1, #46652	; 0xb63c
   12380:	movt	r1, #2
   12384:	mov	r0, r6
   12388:	bl	11098 <dcgettext@plt>
   1238c:	ldr	r1, [r7]
   12390:	bl	10fa8 <fputs_unlocked@plt>
   12394:	mov	r2, #5
   12398:	movw	r1, #46976	; 0xb780
   1239c:	movt	r1, #2
   123a0:	mov	r0, r6
   123a4:	bl	11098 <dcgettext@plt>
   123a8:	ldr	r1, [r7]
   123ac:	bl	10fa8 <fputs_unlocked@plt>
   123b0:	mov	r2, #5
   123b4:	movw	r1, #47180	; 0xb84c
   123b8:	movt	r1, #2
   123bc:	mov	r0, r6
   123c0:	bl	11098 <dcgettext@plt>
   123c4:	ldr	r1, [r7]
   123c8:	bl	10fa8 <fputs_unlocked@plt>
   123cc:	movw	lr, #45096	; 0xb028
   123d0:	movt	lr, #2
   123d4:	ldr	ip, [lr]
   123d8:	ldr	r4, [lr, #4]
   123dc:	ldrd	r8, [lr, #8]
   123e0:	subs	r1, ip, #0
   123e4:	str	ip, [sp]
   123e8:	ldrd	r2, [lr, #16]
   123ec:	str	r4, [sp, #4]
   123f0:	ldrd	r4, [lr, #24]
   123f4:	strd	r8, [sp, #8]
   123f8:	ldrd	r8, [lr, #32]
   123fc:	strd	r2, [sp, #16]
   12400:	ldrd	r2, [lr, #40]	; 0x28
   12404:	strd	r4, [sp, #24]
   12408:	ldrd	r4, [lr, #48]	; 0x30
   1240c:	strd	r8, [sp, #32]
   12410:	strd	r2, [sp, #40]	; 0x28
   12414:	strd	r4, [sp, #48]	; 0x30
   12418:	movwne	r5, #45472	; 0xb1a0
   1241c:	mov	r4, sp
   12420:	movtne	r5, #2
   12424:	bne	1251c <__assert_fail@plt+0x1274>
   12428:	ldr	r4, [r4, #4]
   1242c:	movw	r1, #47328	; 0xb8e0
   12430:	movt	r1, #2
   12434:	mov	r2, #5
   12438:	cmp	r4, #0
   1243c:	beq	12530 <__assert_fail@plt+0x1288>
   12440:	mov	r0, #0
   12444:	bl	11098 <dcgettext@plt>
   12448:	mov	r1, r0
   1244c:	movw	r3, #47352	; 0xb8f8
   12450:	movt	r3, #2
   12454:	movw	r2, #47392	; 0xb920
   12458:	movt	r2, #2
   1245c:	mov	r0, #1
   12460:	bl	111dc <__printf_chk@plt>
   12464:	mov	r1, #0
   12468:	mov	r0, #5
   1246c:	bl	11230 <setlocale@plt>
   12470:	cmp	r0, #0
   12474:	movweq	r5, #45472	; 0xb1a0
   12478:	movteq	r5, #2
   1247c:	beq	124a0 <__assert_fail@plt+0x11f8>
   12480:	movw	r1, #47408	; 0xb930
   12484:	movt	r1, #2
   12488:	mov	r2, #3
   1248c:	movw	r5, #45472	; 0xb1a0
   12490:	movt	r5, #2
   12494:	bl	11290 <strncmp@plt>
   12498:	cmp	r0, #0
   1249c:	bne	125e8 <__assert_fail@plt+0x1340>
   124a0:	mov	r2, #5
   124a4:	movw	r1, #47484	; 0xb97c
   124a8:	movt	r1, #2
   124ac:	mov	r0, #0
   124b0:	bl	11098 <dcgettext@plt>
   124b4:	mov	r1, r0
   124b8:	movw	r3, #45472	; 0xb1a0
   124bc:	movt	r3, #2
   124c0:	movw	r2, #47352	; 0xb8f8
   124c4:	movt	r2, #2
   124c8:	mov	r0, #1
   124cc:	bl	111dc <__printf_chk@plt>
   124d0:	mov	r2, #5
   124d4:	movw	r1, #47512	; 0xb998
   124d8:	movt	r1, #2
   124dc:	mov	r0, #0
   124e0:	bl	11098 <dcgettext@plt>
   124e4:	movw	r2, #47940	; 0xbb44
   124e8:	movt	r2, #2
   124ec:	cmp	r4, r5
   124f0:	movw	r3, #45548	; 0xb1ec
   124f4:	movt	r3, #2
   124f8:	mov	r1, r0
   124fc:	moveq	r3, r2
   12500:	mov	r2, r4
   12504:	mov	r0, #1
   12508:	bl	111dc <__printf_chk@plt>
   1250c:	b	12260 <__assert_fail@plt+0xfb8>
   12510:	ldr	r1, [r4, #8]!
   12514:	cmp	r1, #0
   12518:	beq	12428 <__assert_fail@plt+0x1180>
   1251c:	mov	r0, r5
   12520:	bl	10fd8 <strcmp@plt>
   12524:	cmp	r0, #0
   12528:	bne	12510 <__assert_fail@plt+0x1268>
   1252c:	b	12428 <__assert_fail@plt+0x1180>
   12530:	mov	r0, r4
   12534:	bl	11098 <dcgettext@plt>
   12538:	mov	r1, r0
   1253c:	movw	r3, #47352	; 0xb8f8
   12540:	movt	r3, #2
   12544:	movw	r2, #47392	; 0xb920
   12548:	movt	r2, #2
   1254c:	mov	r0, #1
   12550:	bl	111dc <__printf_chk@plt>
   12554:	mov	r1, r4
   12558:	mov	r0, #5
   1255c:	bl	11230 <setlocale@plt>
   12560:	cmp	r0, #0
   12564:	beq	12580 <__assert_fail@plt+0x12d8>
   12568:	movw	r1, #47408	; 0xb930
   1256c:	movt	r1, #2
   12570:	mov	r2, #3
   12574:	bl	11290 <strncmp@plt>
   12578:	cmp	r0, #0
   1257c:	bne	125dc <__assert_fail@plt+0x1334>
   12580:	mov	r2, #5
   12584:	movw	r1, #47484	; 0xb97c
   12588:	movt	r1, #2
   1258c:	mov	r0, #0
   12590:	bl	11098 <dcgettext@plt>
   12594:	mov	r1, r0
   12598:	movw	r3, #45472	; 0xb1a0
   1259c:	movt	r3, #2
   125a0:	movw	r2, #47352	; 0xb8f8
   125a4:	movt	r2, #2
   125a8:	mov	r0, #1
   125ac:	bl	111dc <__printf_chk@plt>
   125b0:	movw	r1, #47512	; 0xb998
   125b4:	movt	r1, #2
   125b8:	mov	r2, #5
   125bc:	mov	r0, #0
   125c0:	bl	11098 <dcgettext@plt>
   125c4:	movw	r4, #45472	; 0xb1a0
   125c8:	movt	r4, #2
   125cc:	movw	r3, #47940	; 0xbb44
   125d0:	movt	r3, #2
   125d4:	mov	r1, r0
   125d8:	b	12500 <__assert_fail@plt+0x1258>
   125dc:	movw	r5, #45472	; 0xb1a0
   125e0:	movt	r5, #2
   125e4:	mov	r4, r5
   125e8:	mov	r2, #5
   125ec:	movw	r1, #47412	; 0xb934
   125f0:	movt	r1, #2
   125f4:	mov	r0, #0
   125f8:	bl	11098 <dcgettext@plt>
   125fc:	ldr	r1, [r7]
   12600:	bl	10fa8 <fputs_unlocked@plt>
   12604:	b	124a0 <__assert_fail@plt+0x11f8>
   12608:	movw	r3, #54668	; 0xd58c
   1260c:	movt	r3, #3
   12610:	str	r0, [r3]
   12614:	bx	lr
   12618:	movw	r3, #54668	; 0xd58c
   1261c:	movt	r3, #3
   12620:	strb	r0, [r3, #4]
   12624:	bx	lr
   12628:	movw	r3, #53716	; 0xd1d4
   1262c:	movt	r3, #3
   12630:	strd	r4, [sp, #-16]!
   12634:	ldr	r0, [r3]
   12638:	str	r6, [sp, #8]
   1263c:	str	lr, [sp, #12]
   12640:	sub	sp, sp, #8
   12644:	bl	2abdc <__assert_fail@plt+0x19934>
   12648:	cmp	r0, #0
   1264c:	beq	12678 <__assert_fail@plt+0x13d0>
   12650:	movw	r4, #54668	; 0xd58c
   12654:	movt	r4, #3
   12658:	ldrb	r6, [r4, #4]
   1265c:	bl	111a0 <__errno_location@plt>
   12660:	mov	r5, r0
   12664:	cmp	r6, #0
   12668:	beq	126a4 <__assert_fail@plt+0x13fc>
   1266c:	ldr	r3, [r0]
   12670:	cmp	r3, #32
   12674:	bne	126a4 <__assert_fail@plt+0x13fc>
   12678:	movw	r3, #53704	; 0xd1c8
   1267c:	movt	r3, #3
   12680:	ldr	r0, [r3]
   12684:	bl	2abdc <__assert_fail@plt+0x19934>
   12688:	cmp	r0, #0
   1268c:	bne	126ec <__assert_fail@plt+0x1444>
   12690:	add	sp, sp, #8
   12694:	ldrd	r4, [sp]
   12698:	ldr	r6, [sp, #8]
   1269c:	add	sp, sp, #12
   126a0:	pop	{pc}		; (ldr pc, [sp], #4)
   126a4:	movw	r1, #48276	; 0xbc94
   126a8:	movt	r1, #2
   126ac:	mov	r2, #5
   126b0:	mov	r0, #0
   126b4:	bl	11098 <dcgettext@plt>
   126b8:	mov	r6, r0
   126bc:	ldr	r0, [r4]
   126c0:	cmp	r0, #0
   126c4:	beq	126fc <__assert_fail@plt+0x1454>
   126c8:	ldr	r4, [r5]
   126cc:	bl	159b8 <__assert_fail@plt+0x4710>
   126d0:	mov	r3, r0
   126d4:	movw	r2, #48288	; 0xbca0
   126d8:	movt	r2, #2
   126dc:	mov	r0, #0
   126e0:	str	r6, [sp]
   126e4:	mov	r1, r4
   126e8:	bl	11110 <error@plt>
   126ec:	movw	r3, #53616	; 0xd170
   126f0:	movt	r3, #3
   126f4:	ldr	r0, [r3]
   126f8:	bl	1102c <_exit@plt>
   126fc:	mov	r3, r6
   12700:	movw	r2, #47620	; 0xba04
   12704:	movt	r2, #2
   12708:	ldr	r1, [r5]
   1270c:	bl	11110 <error@plt>
   12710:	b	126ec <__assert_fail@plt+0x1444>
   12714:	b	10fe4 <posix_fadvise64@plt>
   12718:	cmp	r0, #0
   1271c:	bxeq	lr
   12720:	str	r4, [sp, #-16]!
   12724:	mov	r4, r1
   12728:	strd	r6, [sp, #4]
   1272c:	mov	r6, #0
   12730:	mov	r7, #0
   12734:	str	lr, [sp, #12]
   12738:	sub	sp, sp, #16
   1273c:	bl	111e8 <fileno@plt>
   12740:	mov	r2, r6
   12744:	mov	r3, r7
   12748:	strd	r6, [sp]
   1274c:	str	r4, [sp, #8]
   12750:	bl	10fe4 <posix_fadvise64@plt>
   12754:	add	sp, sp, #16
   12758:	ldr	r4, [sp]
   1275c:	ldrd	r6, [sp, #4]
   12760:	add	sp, sp, #12
   12764:	pop	{pc}		; (ldr pc, [sp], #4)
   12768:	strd	r4, [sp, #-12]!
   1276c:	mov	r4, r0
   12770:	str	lr, [sp, #8]
   12774:	sub	sp, sp, #12
   12778:	bl	111e8 <fileno@plt>
   1277c:	cmp	r0, #0
   12780:	mov	r0, r4
   12784:	blt	12808 <__assert_fail@plt+0x1560>
   12788:	bl	11134 <__freading@plt>
   1278c:	cmp	r0, #0
   12790:	bne	127d4 <__assert_fail@plt+0x152c>
   12794:	mov	r0, r4
   12798:	bl	1281c <__assert_fail@plt+0x1574>
   1279c:	cmp	r0, #0
   127a0:	beq	12804 <__assert_fail@plt+0x155c>
   127a4:	bl	111a0 <__errno_location@plt>
   127a8:	mov	r5, r0
   127ac:	mov	r0, r4
   127b0:	ldr	r4, [r5]
   127b4:	bl	11200 <fclose@plt>
   127b8:	cmp	r4, #0
   127bc:	mvnne	r0, #0
   127c0:	strne	r4, [r5]
   127c4:	add	sp, sp, #12
   127c8:	ldrd	r4, [sp]
   127cc:	add	sp, sp, #8
   127d0:	pop	{pc}		; (ldr pc, [sp], #4)
   127d4:	mov	r0, r4
   127d8:	bl	111e8 <fileno@plt>
   127dc:	mov	r1, #1
   127e0:	mov	r2, #0
   127e4:	mov	r3, #0
   127e8:	str	r1, [sp]
   127ec:	bl	110d4 <lseek64@plt>
   127f0:	mvn	r3, #0
   127f4:	mvn	r2, #0
   127f8:	cmp	r1, r3
   127fc:	cmpeq	r0, r2
   12800:	bne	12794 <__assert_fail@plt+0x14ec>
   12804:	mov	r0, r4
   12808:	add	sp, sp, #12
   1280c:	ldrd	r4, [sp]
   12810:	ldr	lr, [sp, #8]
   12814:	add	sp, sp, #12
   12818:	b	11200 <fclose@plt>
   1281c:	str	r4, [sp, #-8]!
   12820:	subs	r4, r0, #0
   12824:	str	lr, [sp, #4]
   12828:	sub	sp, sp, #8
   1282c:	beq	12848 <__assert_fail@plt+0x15a0>
   12830:	bl	11134 <__freading@plt>
   12834:	cmp	r0, #0
   12838:	beq	12848 <__assert_fail@plt+0x15a0>
   1283c:	ldr	r3, [r4]
   12840:	tst	r3, #256	; 0x100
   12844:	bne	12860 <__assert_fail@plt+0x15b8>
   12848:	mov	r0, r4
   1284c:	add	sp, sp, #8
   12850:	ldr	r4, [sp]
   12854:	ldr	lr, [sp, #4]
   12858:	add	sp, sp, #8
   1285c:	b	10ffc <fflush@plt>
   12860:	mov	r1, #1
   12864:	mov	r2, #0
   12868:	mov	r3, #0
   1286c:	mov	r0, r4
   12870:	str	r1, [sp]
   12874:	bl	1287c <__assert_fail@plt+0x15d4>
   12878:	b	12848 <__assert_fail@plt+0x15a0>
   1287c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12880:	mov	r4, r0
   12884:	ldr	ip, [r0, #4]
   12888:	strd	r6, [sp, #8]
   1288c:	str	lr, [sp, #20]
   12890:	ldr	lr, [r0, #8]
   12894:	str	r8, [sp, #16]
   12898:	sub	sp, sp, #8
   1289c:	ldr	r5, [sp, #32]
   128a0:	cmp	lr, ip
   128a4:	beq	128cc <__assert_fail@plt+0x1624>
   128a8:	mov	r0, r4
   128ac:	str	r5, [sp, #32]
   128b0:	add	sp, sp, #8
   128b4:	ldrd	r4, [sp]
   128b8:	ldrd	r6, [sp, #8]
   128bc:	ldr	r8, [sp, #16]
   128c0:	ldr	lr, [sp, #20]
   128c4:	add	sp, sp, #24
   128c8:	b	1120c <fseeko64@plt>
   128cc:	ldr	ip, [r0, #16]
   128d0:	ldr	lr, [r0, #20]
   128d4:	cmp	lr, ip
   128d8:	bne	128a8 <__assert_fail@plt+0x1600>
   128dc:	ldr	r8, [r0, #36]	; 0x24
   128e0:	cmp	r8, #0
   128e4:	bne	128a8 <__assert_fail@plt+0x1600>
   128e8:	mov	r6, r2
   128ec:	mov	r7, r3
   128f0:	bl	111e8 <fileno@plt>
   128f4:	mov	r2, r6
   128f8:	mov	r3, r7
   128fc:	str	r5, [sp]
   12900:	bl	110d4 <lseek64@plt>
   12904:	mvn	r3, #0
   12908:	mvn	r2, #0
   1290c:	cmp	r1, r3
   12910:	cmpeq	r0, r2
   12914:	beq	12944 <__assert_fail@plt+0x169c>
   12918:	ldr	r3, [r4]
   1291c:	strd	r0, [r4, #80]	; 0x50
   12920:	bic	r3, r3, #16
   12924:	str	r3, [r4]
   12928:	mov	r0, r8
   1292c:	add	sp, sp, #8
   12930:	ldrd	r4, [sp]
   12934:	ldrd	r6, [sp, #8]
   12938:	ldr	r8, [sp, #16]
   1293c:	add	sp, sp, #20
   12940:	pop	{pc}		; (ldr pc, [sp], #4)
   12944:	mvn	r8, #0
   12948:	b	12928 <__assert_fail@plt+0x1680>
   1294c:	mov	r3, #0
   12950:	str	r3, [r0]
   12954:	str	r3, [r0, #4]
   12958:	str	r3, [r0, #8]
   1295c:	bx	lr
   12960:	ldr	r3, [r1]
   12964:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12968:	strd	r6, [sp, #8]
   1296c:	strd	sl, [sp, #24]
   12970:	ldr	fp, [r0]
   12974:	tst	r3, #16
   12978:	strd	r8, [sp, #16]
   1297c:	ldr	sl, [r0, #8]
   12980:	str	lr, [sp, #32]
   12984:	sub	sp, sp, #12
   12988:	add	fp, sl, fp
   1298c:	bne	12a80 <__assert_fail@plt+0x17d8>
   12990:	mov	r5, r0
   12994:	mov	r6, r1
   12998:	mov	r4, sl
   1299c:	mov	r9, #1
   129a0:	b	129c8 <__assert_fail@plt+0x1720>
   129a4:	add	r2, r3, #1
   129a8:	str	r2, [r6, #4]
   129ac:	ldrb	r7, [r3]
   129b0:	mov	r8, r7
   129b4:	cmp	r4, fp
   129b8:	beq	12a1c <__assert_fail@plt+0x1774>
   129bc:	cmp	r8, #10
   129c0:	strb	r7, [r4], #1
   129c4:	beq	12a58 <__assert_fail@plt+0x17b0>
   129c8:	ldr	r3, [r6, #4]
   129cc:	ldr	r2, [r6, #8]
   129d0:	cmp	r3, r2
   129d4:	bcc	129a4 <__assert_fail@plt+0x16fc>
   129d8:	mov	r0, r6
   129dc:	bl	11218 <__uflow@plt>
   129e0:	cmn	r0, #1
   129e4:	mov	r8, r0
   129e8:	bne	12a88 <__assert_fail@plt+0x17e0>
   129ec:	cmp	sl, r4
   129f0:	beq	12a80 <__assert_fail@plt+0x17d8>
   129f4:	ldr	r3, [r6]
   129f8:	tst	r3, #32
   129fc:	bne	12a80 <__assert_fail@plt+0x17d8>
   12a00:	ldrb	r3, [r4, #-1]
   12a04:	cmp	r3, #10
   12a08:	beq	12a58 <__assert_fail@plt+0x17b0>
   12a0c:	cmp	r4, fp
   12a10:	bne	12a50 <__assert_fail@plt+0x17a8>
   12a14:	mov	r7, #10
   12a18:	mov	r8, r7
   12a1c:	mov	r0, sl
   12a20:	mvn	r3, #0
   12a24:	str	r9, [sp]
   12a28:	mov	r2, #1
   12a2c:	mov	r1, r5
   12a30:	ldr	r4, [r5]
   12a34:	bl	29490 <__assert_fail@plt+0x181e8>
   12a38:	ldr	fp, [r5]
   12a3c:	mov	sl, r0
   12a40:	str	r0, [r5, #8]
   12a44:	add	r4, r0, r4
   12a48:	add	fp, r0, fp
   12a4c:	b	129bc <__assert_fail@plt+0x1714>
   12a50:	mov	r3, #10
   12a54:	strb	r3, [r4], #1
   12a58:	sub	r4, r4, sl
   12a5c:	mov	r0, r5
   12a60:	str	r4, [r5, #4]
   12a64:	add	sp, sp, #12
   12a68:	ldrd	r4, [sp]
   12a6c:	ldrd	r6, [sp, #8]
   12a70:	ldrd	r8, [sp, #16]
   12a74:	ldrd	sl, [sp, #24]
   12a78:	add	sp, sp, #32
   12a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a80:	mov	r0, #0
   12a84:	b	12a64 <__assert_fail@plt+0x17bc>
   12a88:	uxtb	r7, r0
   12a8c:	b	129b4 <__assert_fail@plt+0x170c>
   12a90:	ldr	ip, [r1]
   12a94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12a98:	ldr	r3, [r0]
   12a9c:	strd	r6, [sp, #8]
   12aa0:	strd	sl, [sp, #24]
   12aa4:	ldr	fp, [r0, #8]
   12aa8:	tst	ip, #16
   12aac:	strd	r8, [sp, #16]
   12ab0:	str	lr, [sp, #32]
   12ab4:	sub	sp, sp, #12
   12ab8:	add	r9, fp, r3
   12abc:	bne	12bac <__assert_fail@plt+0x1904>
   12ac0:	mov	r8, r2
   12ac4:	mov	r7, r0
   12ac8:	mov	r5, r1
   12acc:	mov	r4, fp
   12ad0:	b	12af8 <__assert_fail@plt+0x1850>
   12ad4:	add	r1, r3, #1
   12ad8:	str	r1, [r5, #4]
   12adc:	ldrb	r6, [r3]
   12ae0:	mov	sl, r6
   12ae4:	cmp	r4, r9
   12ae8:	beq	12b4c <__assert_fail@plt+0x18a4>
   12aec:	cmp	r8, sl
   12af0:	strb	r6, [r4], #1
   12af4:	beq	12b84 <__assert_fail@plt+0x18dc>
   12af8:	ldr	r3, [r5, #4]
   12afc:	ldr	r1, [r5, #8]
   12b00:	cmp	r3, r1
   12b04:	bcc	12ad4 <__assert_fail@plt+0x182c>
   12b08:	mov	r0, r5
   12b0c:	bl	11218 <__uflow@plt>
   12b10:	cmn	r0, #1
   12b14:	mov	sl, r0
   12b18:	bne	12bb4 <__assert_fail@plt+0x190c>
   12b1c:	cmp	fp, r4
   12b20:	beq	12bac <__assert_fail@plt+0x1904>
   12b24:	ldr	r3, [r5]
   12b28:	tst	r3, #32
   12b2c:	bne	12bac <__assert_fail@plt+0x1904>
   12b30:	ldrb	r3, [r4, #-1]
   12b34:	cmp	r3, r8
   12b38:	beq	12b84 <__assert_fail@plt+0x18dc>
   12b3c:	cmp	r4, r9
   12b40:	mov	sl, r8
   12b44:	bne	12b80 <__assert_fail@plt+0x18d8>
   12b48:	mov	r6, r8
   12b4c:	mov	r2, #1
   12b50:	mov	r0, fp
   12b54:	mvn	r3, #0
   12b58:	mov	r1, r7
   12b5c:	str	r2, [sp]
   12b60:	ldr	r4, [r7]
   12b64:	bl	29490 <__assert_fail@plt+0x181e8>
   12b68:	ldr	r2, [r7]
   12b6c:	mov	fp, r0
   12b70:	str	r0, [r7, #8]
   12b74:	add	r4, r0, r4
   12b78:	add	r9, r0, r2
   12b7c:	b	12aec <__assert_fail@plt+0x1844>
   12b80:	strb	r8, [r4], #1
   12b84:	sub	r4, r4, fp
   12b88:	mov	r0, r7
   12b8c:	str	r4, [r7, #4]
   12b90:	add	sp, sp, #12
   12b94:	ldrd	r4, [sp]
   12b98:	ldrd	r6, [sp, #8]
   12b9c:	ldrd	r8, [sp, #16]
   12ba0:	ldrd	sl, [sp, #24]
   12ba4:	add	sp, sp, #32
   12ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bac:	mov	r0, #0
   12bb0:	b	12b90 <__assert_fail@plt+0x18e8>
   12bb4:	uxtb	r6, r0
   12bb8:	b	12ae4 <__assert_fail@plt+0x183c>
   12bbc:	ldr	r0, [r0, #8]
   12bc0:	b	2ad30 <__assert_fail@plt+0x19a88>
   12bc4:	strd	r4, [sp, #-16]!
   12bc8:	subs	r4, r0, #0
   12bcc:	str	r6, [sp, #8]
   12bd0:	str	lr, [sp, #12]
   12bd4:	beq	12c6c <__assert_fail@plt+0x19c4>
   12bd8:	mov	r1, #47	; 0x2f
   12bdc:	bl	1123c <strrchr@plt>
   12be0:	subs	r5, r0, #0
   12be4:	beq	12c44 <__assert_fail@plt+0x199c>
   12be8:	add	r6, r5, #1
   12bec:	sub	r3, r6, r4
   12bf0:	cmp	r3, #6
   12bf4:	ble	12c44 <__assert_fail@plt+0x199c>
   12bf8:	movw	r1, #48352	; 0xbce0
   12bfc:	movt	r1, #2
   12c00:	mov	r2, #7
   12c04:	sub	r0, r5, #6
   12c08:	bl	11290 <strncmp@plt>
   12c0c:	cmp	r0, #0
   12c10:	bne	12c44 <__assert_fail@plt+0x199c>
   12c14:	movw	r1, #48360	; 0xbce8
   12c18:	movt	r1, #2
   12c1c:	mov	r2, #3
   12c20:	mov	r0, r6
   12c24:	bl	11290 <strncmp@plt>
   12c28:	cmp	r0, #0
   12c2c:	movne	r4, r6
   12c30:	bne	12c44 <__assert_fail@plt+0x199c>
   12c34:	add	r4, r5, #4
   12c38:	movw	r3, #53688	; 0xd1b8
   12c3c:	movt	r3, #3
   12c40:	str	r4, [r3]
   12c44:	movw	r2, #54676	; 0xd594
   12c48:	movt	r2, #3
   12c4c:	ldr	r6, [sp, #8]
   12c50:	movw	r3, #53692	; 0xd1bc
   12c54:	movt	r3, #3
   12c58:	str	r4, [r2]
   12c5c:	str	r4, [r3]
   12c60:	ldrd	r4, [sp]
   12c64:	add	sp, sp, #12
   12c68:	pop	{pc}		; (ldr pc, [sp], #4)
   12c6c:	movw	r3, #53704	; 0xd1c8
   12c70:	movt	r3, #3
   12c74:	movw	r0, #48296	; 0xbca8
   12c78:	movt	r0, #2
   12c7c:	ldr	r3, [r3]
   12c80:	mov	r2, #55	; 0x37
   12c84:	mov	r1, #1
   12c88:	bl	110c8 <fwrite@plt>
   12c8c:	bl	1129c <abort@plt>
   12c90:	mov	r2, #5
   12c94:	strd	r4, [sp, #-16]!
   12c98:	mov	r5, r0
   12c9c:	str	r6, [sp, #8]
   12ca0:	mov	r6, r1
   12ca4:	mov	r1, r0
   12ca8:	mov	r0, #0
   12cac:	str	lr, [sp, #12]
   12cb0:	bl	11098 <dcgettext@plt>
   12cb4:	cmp	r5, r0
   12cb8:	mov	r4, r0
   12cbc:	beq	12cd4 <__assert_fail@plt+0x1a2c>
   12cc0:	mov	r0, r4
   12cc4:	ldrd	r4, [sp]
   12cc8:	ldr	r6, [sp, #8]
   12ccc:	add	sp, sp, #12
   12cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd4:	bl	2ad90 <__assert_fail@plt+0x19ae8>
   12cd8:	ldrb	r3, [r0]
   12cdc:	bic	r3, r3, #32
   12ce0:	cmp	r3, #85	; 0x55
   12ce4:	bne	12d4c <__assert_fail@plt+0x1aa4>
   12ce8:	ldrb	r3, [r0, #1]
   12cec:	bic	r3, r3, #32
   12cf0:	cmp	r3, #84	; 0x54
   12cf4:	bne	12dcc <__assert_fail@plt+0x1b24>
   12cf8:	ldrb	r3, [r0, #2]
   12cfc:	bic	r3, r3, #32
   12d00:	cmp	r3, #70	; 0x46
   12d04:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d08:	ldrb	r3, [r0, #3]
   12d0c:	cmp	r3, #45	; 0x2d
   12d10:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d14:	ldrb	r3, [r0, #4]
   12d18:	cmp	r3, #56	; 0x38
   12d1c:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d20:	ldrb	r3, [r0, #5]
   12d24:	cmp	r3, #0
   12d28:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d2c:	ldrb	r2, [r4]
   12d30:	movw	r3, #48452	; 0xbd44
   12d34:	movt	r3, #2
   12d38:	movw	r4, #48464	; 0xbd50
   12d3c:	movt	r4, #2
   12d40:	cmp	r2, #96	; 0x60
   12d44:	movne	r4, r3
   12d48:	b	12cc0 <__assert_fail@plt+0x1a18>
   12d4c:	cmp	r3, #71	; 0x47
   12d50:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d54:	ldrb	r3, [r0, #1]
   12d58:	bic	r3, r3, #32
   12d5c:	cmp	r3, #66	; 0x42
   12d60:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d64:	ldrb	r3, [r0, #2]
   12d68:	cmp	r3, #49	; 0x31
   12d6c:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d70:	ldrb	r3, [r0, #3]
   12d74:	cmp	r3, #56	; 0x38
   12d78:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d7c:	ldrb	r3, [r0, #4]
   12d80:	cmp	r3, #48	; 0x30
   12d84:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d88:	ldrb	r3, [r0, #5]
   12d8c:	cmp	r3, #51	; 0x33
   12d90:	bne	12dcc <__assert_fail@plt+0x1b24>
   12d94:	ldrb	r3, [r0, #6]
   12d98:	cmp	r3, #48	; 0x30
   12d9c:	bne	12dcc <__assert_fail@plt+0x1b24>
   12da0:	ldrb	r3, [r0, #7]
   12da4:	cmp	r3, #0
   12da8:	bne	12dcc <__assert_fail@plt+0x1b24>
   12dac:	ldrb	r2, [r4]
   12db0:	movw	r3, #48456	; 0xbd48
   12db4:	movt	r3, #2
   12db8:	movw	r4, #48460	; 0xbd4c
   12dbc:	movt	r4, #2
   12dc0:	cmp	r2, #96	; 0x60
   12dc4:	movne	r4, r3
   12dc8:	b	12cc0 <__assert_fail@plt+0x1a18>
   12dcc:	movw	r3, #48468	; 0xbd54
   12dd0:	movt	r3, #2
   12dd4:	cmp	r6, #9
   12dd8:	movw	r4, #48448	; 0xbd40
   12ddc:	movt	r4, #2
   12de0:	movne	r4, r3
   12de4:	b	12cc0 <__assert_fail@plt+0x1a18>
   12de8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12dec:	strd	r6, [sp, #8]
   12df0:	strd	r8, [sp, #16]
   12df4:	mov	r8, r3
   12df8:	strd	sl, [sp, #24]
   12dfc:	mov	fp, r0
   12e00:	mov	sl, r1
   12e04:	str	lr, [sp, #32]
   12e08:	sub	sp, sp, #140	; 0x8c
   12e0c:	ldr	r3, [sp, #180]	; 0xb4
   12e10:	str	r2, [sp, #28]
   12e14:	and	r4, r3, #2
   12e18:	ubfx	r3, r3, #1, #1
   12e1c:	str	r3, [sp, #44]	; 0x2c
   12e20:	bl	110e0 <__ctype_get_mb_cur_max@plt>
   12e24:	ldr	r3, [sp, #176]	; 0xb0
   12e28:	str	r0, [sp, #76]	; 0x4c
   12e2c:	cmp	r3, #10
   12e30:	ldrls	pc, [pc, r3, lsl #2]
   12e34:	b	147d0 <__assert_fail@plt+0x3528>
   12e38:			; <UNDEFINED> instruction: 0x000132b8
   12e3c:	ldrdeq	r3, [r1], -r4
   12e40:	andeq	r3, r1, r0, asr r9
   12e44:	andeq	r3, r1, r0, asr #8
   12e48:	andeq	r3, r1, r0, asr #3
   12e4c:	andeq	r3, r1, ip, lsr r2
   12e50:	andeq	r3, r1, r4, lsl r3
   12e54:	andeq	r3, r1, ip, ror r3
   12e58:	andeq	r2, r1, r4, ror #28
   12e5c:	andeq	r2, r1, r4, ror #28
   12e60:	andeq	r2, r1, r4, ror #28
   12e64:	ldr	r3, [sp, #176]	; 0xb0
   12e68:	cmp	r3, #10
   12e6c:	beq	12e98 <__assert_fail@plt+0x1bf0>
   12e70:	mov	r1, r3
   12e74:	movw	r0, #48472	; 0xbd58
   12e78:	movt	r0, #2
   12e7c:	bl	12c90 <__assert_fail@plt+0x19e8>
   12e80:	str	r0, [sp, #188]	; 0xbc
   12e84:	movw	r0, #48468	; 0xbd54
   12e88:	movt	r0, #2
   12e8c:	ldr	r1, [sp, #176]	; 0xb0
   12e90:	bl	12c90 <__assert_fail@plt+0x19e8>
   12e94:	str	r0, [sp, #192]	; 0xc0
   12e98:	cmp	r4, #0
   12e9c:	movne	r4, #0
   12ea0:	beq	1455c <__assert_fail@plt+0x32b4>
   12ea4:	mov	r5, #0
   12ea8:	ldr	r0, [sp, #192]	; 0xc0
   12eac:	mov	r9, r5
   12eb0:	str	r5, [sp, #64]	; 0x40
   12eb4:	bl	11188 <strlen@plt>
   12eb8:	mov	r3, #1
   12ebc:	ldr	r2, [sp, #44]	; 0x2c
   12ec0:	cmp	r0, r5
   12ec4:	moveq	r2, r5
   12ec8:	str	r3, [sp, #32]
   12ecc:	str	r3, [sp, #48]	; 0x30
   12ed0:	str	r5, [sp, #52]	; 0x34
   12ed4:	str	r3, [sp, #60]	; 0x3c
   12ed8:	ldr	r3, [sp, #180]	; 0xb4
   12edc:	str	r0, [sp, #56]	; 0x38
   12ee0:	str	r5, [sp, #68]	; 0x44
   12ee4:	str	r5, [sp, #80]	; 0x50
   12ee8:	str	r5, [sp, #84]	; 0x54
   12eec:	and	r3, r3, #1
   12ef0:	str	r2, [sp, #88]	; 0x58
   12ef4:	str	r3, [sp, #92]	; 0x5c
   12ef8:	ldr	r3, [sp, #180]	; 0xb4
   12efc:	and	r3, r3, #4
   12f00:	str	r3, [sp, #96]	; 0x60
   12f04:	ldr	r3, [sp, #192]	; 0xc0
   12f08:	str	r3, [sp, #72]	; 0x48
   12f0c:	mov	r3, fp
   12f10:	mov	r7, #0
   12f14:	mov	fp, r9
   12f18:	mov	r9, r3
   12f1c:	cmn	r8, #1
   12f20:	beq	13524 <__assert_fail@plt+0x227c>
   12f24:	subs	r6, r8, r7
   12f28:	movne	r6, #1
   12f2c:	cmp	r6, #0
   12f30:	beq	1353c <__assert_fail@plt+0x2294>
   12f34:	ldr	r0, [sp, #28]
   12f38:	ldr	r3, [sp, #48]	; 0x30
   12f3c:	cmp	r3, #0
   12f40:	add	r3, r0, r7
   12f44:	str	r3, [sp, #36]	; 0x24
   12f48:	beq	139c8 <__assert_fail@plt+0x2720>
   12f4c:	ldr	r2, [sp, #56]	; 0x38
   12f50:	cmp	r2, #0
   12f54:	beq	13ec8 <__assert_fail@plt+0x2c20>
   12f58:	cmp	r2, #1
   12f5c:	mov	r3, r2
   12f60:	movls	r3, #0
   12f64:	movhi	r3, #1
   12f68:	cmn	r8, #1
   12f6c:	add	r5, r7, r2
   12f70:	movne	r3, #0
   12f74:	cmp	r3, #0
   12f78:	beq	12f84 <__assert_fail@plt+0x1cdc>
   12f7c:	bl	11188 <strlen@plt>
   12f80:	mov	r8, r0
   12f84:	cmp	r5, r8
   12f88:	bhi	13ec8 <__assert_fail@plt+0x2c20>
   12f8c:	ldr	r0, [sp, #36]	; 0x24
   12f90:	ldr	r2, [sp, #56]	; 0x38
   12f94:	ldr	r1, [sp, #72]	; 0x48
   12f98:	bl	11074 <memcmp@plt>
   12f9c:	cmp	r0, #0
   12fa0:	bne	13ec8 <__assert_fail@plt+0x2c20>
   12fa4:	ldr	r3, [sp, #44]	; 0x2c
   12fa8:	cmp	r3, #0
   12fac:	bne	14674 <__assert_fail@plt+0x33cc>
   12fb0:	ldr	r3, [sp, #36]	; 0x24
   12fb4:	ldrb	r5, [r3]
   12fb8:	cmp	r5, #126	; 0x7e
   12fbc:	ldrls	pc, [pc, r5, lsl #2]
   12fc0:	b	1445c <__assert_fail@plt+0x31b4>
   12fc4:	muleq	r1, r8, r6
   12fc8:	andeq	r4, r1, ip, asr r4
   12fcc:	andeq	r4, r1, ip, asr r4
   12fd0:	andeq	r4, r1, ip, asr r4
   12fd4:	andeq	r4, r1, ip, asr r4
   12fd8:	andeq	r4, r1, ip, asr r4
   12fdc:	andeq	r4, r1, ip, asr r4
   12fe0:	strdeq	r3, [r1], -r0
   12fe4:	andeq	r3, r1, r8, ror #11
   12fe8:	strdeq	r3, [r1], -r8
   12fec:	andeq	r3, r1, ip, ror r7
   12ff0:	andeq	r3, r1, ip, ror #14
   12ff4:	muleq	r1, r4, r4
   12ff8:	andeq	r3, r1, r8, asr #14
   12ffc:	andeq	r4, r1, ip, asr r4
   13000:	andeq	r4, r1, ip, asr r4
   13004:	andeq	r4, r1, ip, asr r4
   13008:	andeq	r4, r1, ip, asr r4
   1300c:	andeq	r4, r1, ip, asr r4
   13010:	andeq	r4, r1, ip, asr r4
   13014:	andeq	r4, r1, ip, asr r4
   13018:	andeq	r4, r1, ip, asr r4
   1301c:	andeq	r4, r1, ip, asr r4
   13020:	andeq	r4, r1, ip, asr r4
   13024:	andeq	r4, r1, ip, asr r4
   13028:	andeq	r4, r1, ip, asr r4
   1302c:	andeq	r4, r1, ip, asr r4
   13030:	andeq	r4, r1, ip, asr r4
   13034:	andeq	r4, r1, ip, asr r4
   13038:	andeq	r4, r1, ip, asr r4
   1303c:	andeq	r4, r1, ip, asr r4
   13040:	andeq	r4, r1, ip, asr r4
   13044:	strdeq	r3, [r1], -r4
   13048:	andeq	r3, r1, r8, ror #15
   1304c:	andeq	r3, r1, r8, ror #15
   13050:	ldrdeq	r3, [r1], -ip
   13054:	andeq	r3, r1, r8, ror #15
   13058:	andeq	r3, r1, r0, asr #17
   1305c:	andeq	r3, r1, r8, ror #15
   13060:	andeq	r3, r1, r0, lsr r9
   13064:	andeq	r3, r1, r8, ror #15
   13068:	andeq	r3, r1, r8, ror #15
   1306c:	andeq	r3, r1, r8, ror #15
   13070:	andeq	r3, r1, r0, asr #17
   13074:	andeq	r3, r1, r0, asr #17
   13078:	andeq	r3, r1, r0, asr #17
   1307c:	andeq	r3, r1, r0, asr #17
   13080:	andeq	r3, r1, r0, asr #17
   13084:	andeq	r3, r1, r0, asr #17
   13088:	andeq	r3, r1, r0, asr #17
   1308c:	andeq	r3, r1, r0, asr #17
   13090:	andeq	r3, r1, r0, asr #17
   13094:	andeq	r3, r1, r0, asr #17
   13098:	andeq	r3, r1, r0, asr #17
   1309c:	andeq	r3, r1, r0, asr #17
   130a0:	andeq	r3, r1, r0, asr #17
   130a4:	andeq	r3, r1, r0, asr #17
   130a8:	andeq	r3, r1, r0, asr #17
   130ac:	andeq	r3, r1, r0, asr #17
   130b0:	andeq	r3, r1, r8, ror #15
   130b4:	andeq	r3, r1, r8, ror #15
   130b8:	andeq	r3, r1, r8, ror #15
   130bc:	andeq	r3, r1, r8, ror #15
   130c0:	andeq	r3, r1, r0, ror #17
   130c4:	andeq	r4, r1, ip, asr r4
   130c8:	andeq	r3, r1, r0, asr #17
   130cc:	andeq	r3, r1, r0, asr #17
   130d0:	andeq	r3, r1, r0, asr #17
   130d4:	andeq	r3, r1, r0, asr #17
   130d8:	andeq	r3, r1, r0, asr #17
   130dc:	andeq	r3, r1, r0, asr #17
   130e0:	andeq	r3, r1, r0, asr #17
   130e4:	andeq	r3, r1, r0, asr #17
   130e8:	andeq	r3, r1, r0, asr #17
   130ec:	andeq	r3, r1, r0, asr #17
   130f0:	andeq	r3, r1, r0, asr #17
   130f4:	andeq	r3, r1, r0, asr #17
   130f8:	andeq	r3, r1, r0, asr #17
   130fc:	andeq	r3, r1, r0, asr #17
   13100:	andeq	r3, r1, r0, asr #17
   13104:	andeq	r3, r1, r0, asr #17
   13108:	andeq	r3, r1, r0, asr #17
   1310c:	andeq	r3, r1, r0, asr #17
   13110:	andeq	r3, r1, r0, asr #17
   13114:	andeq	r3, r1, r0, asr #17
   13118:	andeq	r3, r1, r0, asr #17
   1311c:	andeq	r3, r1, r0, asr #17
   13120:	andeq	r3, r1, r0, asr #17
   13124:	andeq	r3, r1, r0, asr #17
   13128:	andeq	r3, r1, r0, asr #17
   1312c:	andeq	r3, r1, r0, asr #17
   13130:	andeq	r3, r1, r8, ror #15
   13134:	andeq	r3, r1, r4, lsl #17
   13138:	andeq	r3, r1, r0, asr #17
   1313c:	andeq	r3, r1, r8, ror #15
   13140:	andeq	r3, r1, r0, asr #17
   13144:	andeq	r3, r1, r8, ror #15
   13148:	andeq	r3, r1, r0, asr #17
   1314c:	andeq	r3, r1, r0, asr #17
   13150:	andeq	r3, r1, r0, asr #17
   13154:	andeq	r3, r1, r0, asr #17
   13158:	andeq	r3, r1, r0, asr #17
   1315c:	andeq	r3, r1, r0, asr #17
   13160:	andeq	r3, r1, r0, asr #17
   13164:	andeq	r3, r1, r0, asr #17
   13168:	andeq	r3, r1, r0, asr #17
   1316c:	andeq	r3, r1, r0, asr #17
   13170:	andeq	r3, r1, r0, asr #17
   13174:	andeq	r3, r1, r0, asr #17
   13178:	andeq	r3, r1, r0, asr #17
   1317c:	andeq	r3, r1, r0, asr #17
   13180:	andeq	r3, r1, r0, asr #17
   13184:	andeq	r3, r1, r0, asr #17
   13188:	andeq	r3, r1, r0, asr #17
   1318c:	andeq	r3, r1, r0, asr #17
   13190:	andeq	r3, r1, r0, asr #17
   13194:	andeq	r3, r1, r0, asr #17
   13198:	andeq	r3, r1, r0, asr #17
   1319c:	andeq	r3, r1, r0, asr #17
   131a0:	andeq	r3, r1, r0, asr #17
   131a4:	andeq	r3, r1, r0, asr #17
   131a8:	andeq	r3, r1, r0, asr #17
   131ac:	andeq	r3, r1, r0, asr #17
   131b0:	muleq	r1, r0, r7
   131b4:	andeq	r3, r1, r8, ror #15
   131b8:	muleq	r1, r0, r7
   131bc:	ldrdeq	r3, [r1], -ip
   131c0:	ldr	r3, [sp, #180]	; 0xb4
   131c4:	cmp	r4, #0
   131c8:	and	r3, r3, #1
   131cc:	str	r3, [sp, #92]	; 0x5c
   131d0:	ldr	r3, [sp, #180]	; 0xb4
   131d4:	and	r3, r3, #4
   131d8:	str	r3, [sp, #96]	; 0x60
   131dc:	moveq	r3, #1
   131e0:	streq	r3, [sp, #60]	; 0x3c
   131e4:	beq	13974 <__assert_fail@plt+0x26cc>
   131e8:	mov	r3, #0
   131ec:	mov	r2, #1
   131f0:	mov	r4, r3
   131f4:	mov	r9, r3
   131f8:	str	r2, [sp, #32]
   131fc:	str	r2, [sp, #44]	; 0x2c
   13200:	str	r3, [sp, #48]	; 0x30
   13204:	str	r2, [sp, #52]	; 0x34
   13208:	str	r2, [sp, #56]	; 0x38
   1320c:	str	r3, [sp, #60]	; 0x3c
   13210:	str	r2, [sp, #64]	; 0x40
   13214:	str	r2, [sp, #68]	; 0x44
   13218:	str	r3, [sp, #80]	; 0x50
   1321c:	str	r3, [sp, #84]	; 0x54
   13220:	str	r3, [sp, #88]	; 0x58
   13224:	movw	r3, #48468	; 0xbd54
   13228:	movt	r3, #2
   1322c:	str	r3, [sp, #72]	; 0x48
   13230:	mov	r3, #2
   13234:	str	r3, [sp, #176]	; 0xb0
   13238:	b	12f0c <__assert_fail@plt+0x1c64>
   1323c:	ldr	r3, [sp, #180]	; 0xb4
   13240:	cmp	r4, #0
   13244:	and	r3, r3, #1
   13248:	str	r3, [sp, #92]	; 0x5c
   1324c:	ldr	r3, [sp, #180]	; 0xb4
   13250:	and	r3, r3, #4
   13254:	str	r3, [sp, #96]	; 0x60
   13258:	bne	1462c <__assert_fail@plt+0x3384>
   1325c:	cmp	sl, #0
   13260:	beq	143d8 <__assert_fail@plt+0x3130>
   13264:	mov	r3, #34	; 0x22
   13268:	mov	r2, r4
   1326c:	mov	r1, #1
   13270:	mov	r9, r2
   13274:	strb	r3, [fp]
   13278:	movw	r3, #48448	; 0xbd40
   1327c:	movt	r3, #2
   13280:	mov	r4, r1
   13284:	str	r1, [sp, #32]
   13288:	str	r2, [sp, #44]	; 0x2c
   1328c:	str	r1, [sp, #48]	; 0x30
   13290:	str	r2, [sp, #52]	; 0x34
   13294:	str	r1, [sp, #56]	; 0x38
   13298:	str	r1, [sp, #60]	; 0x3c
   1329c:	str	r2, [sp, #64]	; 0x40
   132a0:	str	r2, [sp, #68]	; 0x44
   132a4:	str	r3, [sp, #72]	; 0x48
   132a8:	str	r2, [sp, #80]	; 0x50
   132ac:	str	r2, [sp, #84]	; 0x54
   132b0:	str	r2, [sp, #88]	; 0x58
   132b4:	b	12f0c <__assert_fail@plt+0x1c64>
   132b8:	mov	r3, #0
   132bc:	mov	r2, #1
   132c0:	mov	r9, r3
   132c4:	str	r2, [sp, #32]
   132c8:	str	r3, [sp, #44]	; 0x2c
   132cc:	str	r3, [sp, #48]	; 0x30
   132d0:	str	r3, [sp, #52]	; 0x34
   132d4:	str	r3, [sp, #60]	; 0x3c
   132d8:	strd	r2, [sp, #64]	; 0x40
   132dc:	str	r3, [sp, #72]	; 0x48
   132e0:	str	r3, [sp, #80]	; 0x50
   132e4:	str	r3, [sp, #88]	; 0x58
   132e8:	ldr	r3, [sp, #180]	; 0xb4
   132ec:	and	r3, r3, r2
   132f0:	str	r3, [sp, #92]	; 0x5c
   132f4:	ldr	r3, [sp, #180]	; 0xb4
   132f8:	and	r3, r3, #4
   132fc:	str	r3, [sp, #96]	; 0x60
   13300:	ldr	r3, [sp, #176]	; 0xb0
   13304:	mov	r4, r3
   13308:	str	r3, [sp, #56]	; 0x38
   1330c:	str	r3, [sp, #84]	; 0x54
   13310:	b	12f0c <__assert_fail@plt+0x1c64>
   13314:	mov	r3, #1
   13318:	mov	r4, #0
   1331c:	mov	r9, r4
   13320:	str	r3, [sp, #32]
   13324:	str	r3, [sp, #44]	; 0x2c
   13328:	str	r3, [sp, #48]	; 0x30
   1332c:	str	r4, [sp, #52]	; 0x34
   13330:	str	r3, [sp, #56]	; 0x38
   13334:	str	r3, [sp, #60]	; 0x3c
   13338:	str	r3, [sp, #88]	; 0x58
   1333c:	movw	r3, #48448	; 0xbd40
   13340:	movt	r3, #2
   13344:	str	r4, [sp, #64]	; 0x40
   13348:	str	r4, [sp, #68]	; 0x44
   1334c:	str	r3, [sp, #72]	; 0x48
   13350:	ldr	r3, [sp, #180]	; 0xb4
   13354:	str	r4, [sp, #80]	; 0x50
   13358:	str	r4, [sp, #84]	; 0x54
   1335c:	and	r3, r3, #1
   13360:	str	r3, [sp, #92]	; 0x5c
   13364:	ldr	r3, [sp, #180]	; 0xb4
   13368:	and	r3, r3, #4
   1336c:	str	r3, [sp, #96]	; 0x60
   13370:	mov	r3, #5
   13374:	str	r3, [sp, #176]	; 0xb0
   13378:	b	12f0c <__assert_fail@plt+0x1c64>
   1337c:	mov	r3, #1
   13380:	mov	r4, #0
   13384:	mov	r9, r4
   13388:	str	r3, [sp, #32]
   1338c:	str	r4, [sp, #44]	; 0x2c
   13390:	str	r3, [sp, #48]	; 0x30
   13394:	str	r3, [sp, #60]	; 0x3c
   13398:	ldr	r3, [sp, #180]	; 0xb4
   1339c:	str	r4, [sp, #52]	; 0x34
   133a0:	str	r4, [sp, #56]	; 0x38
   133a4:	str	r4, [sp, #64]	; 0x40
   133a8:	str	r4, [sp, #68]	; 0x44
   133ac:	and	r3, r3, #1
   133b0:	str	r4, [sp, #72]	; 0x48
   133b4:	str	r4, [sp, #80]	; 0x50
   133b8:	str	r4, [sp, #84]	; 0x54
   133bc:	str	r3, [sp, #92]	; 0x5c
   133c0:	ldr	r3, [sp, #180]	; 0xb4
   133c4:	str	r4, [sp, #88]	; 0x58
   133c8:	and	r3, r3, #4
   133cc:	str	r3, [sp, #96]	; 0x60
   133d0:	b	12f0c <__assert_fail@plt+0x1c64>
   133d4:	mov	r3, #0
   133d8:	mov	r2, #1
   133dc:	ldr	r1, [sp, #176]	; 0xb0
   133e0:	mov	r4, r3
   133e4:	mov	r9, r3
   133e8:	movw	r3, #48468	; 0xbd54
   133ec:	movt	r3, #2
   133f0:	str	r2, [sp, #32]
   133f4:	str	r2, [sp, #44]	; 0x2c
   133f8:	str	r4, [sp, #48]	; 0x30
   133fc:	strd	r2, [sp, #68]	; 0x44
   13400:	ldr	r3, [sp, #180]	; 0xb4
   13404:	str	r2, [sp, #52]	; 0x34
   13408:	str	r1, [sp, #56]	; 0x38
   1340c:	str	r4, [sp, #60]	; 0x3c
   13410:	str	r2, [sp, #64]	; 0x40
   13414:	and	r3, r3, r2
   13418:	str	r4, [sp, #80]	; 0x50
   1341c:	str	r4, [sp, #84]	; 0x54
   13420:	str	r4, [sp, #88]	; 0x58
   13424:	str	r3, [sp, #92]	; 0x5c
   13428:	ldr	r3, [sp, #180]	; 0xb4
   1342c:	and	r3, r3, #4
   13430:	str	r3, [sp, #96]	; 0x60
   13434:	mov	r3, #2
   13438:	str	r3, [sp, #176]	; 0xb0
   1343c:	b	12f0c <__assert_fail@plt+0x1c64>
   13440:	mov	r3, #1
   13444:	mov	r2, #0
   13448:	mov	r4, r2
   1344c:	mov	r9, r2
   13450:	str	r3, [sp, #32]
   13454:	str	r3, [sp, #44]	; 0x2c
   13458:	str	r2, [sp, #48]	; 0x30
   1345c:	str	r3, [sp, #52]	; 0x34
   13460:	str	r3, [sp, #56]	; 0x38
   13464:	str	r3, [sp, #60]	; 0x3c
   13468:	str	r3, [sp, #64]	; 0x40
   1346c:	str	r3, [sp, #68]	; 0x44
   13470:	str	r3, [sp, #88]	; 0x58
   13474:	movw	r3, #48468	; 0xbd54
   13478:	movt	r3, #2
   1347c:	str	r3, [sp, #72]	; 0x48
   13480:	ldr	r3, [sp, #180]	; 0xb4
   13484:	str	r2, [sp, #80]	; 0x50
   13488:	str	r2, [sp, #84]	; 0x54
   1348c:	and	r3, r3, #1
   13490:	b	13424 <__assert_fail@plt+0x217c>
   13494:	mov	r5, #102	; 0x66
   13498:	mov	r6, #0
   1349c:	ldr	r3, [sp, #44]	; 0x2c
   134a0:	cmp	r3, #0
   134a4:	bne	14354 <__assert_fail@plt+0x30ac>
   134a8:	ldr	r2, [sp, #52]	; 0x34
   134ac:	eor	r3, fp, #1
   134b0:	ands	r3, r2, r3
   134b4:	beq	134ec <__assert_fail@plt+0x2244>
   134b8:	cmp	sl, r4
   134bc:	mov	fp, r3
   134c0:	movhi	r2, #39	; 0x27
   134c4:	strbhi	r2, [r9, r4]
   134c8:	add	r2, r4, #1
   134cc:	cmp	sl, r2
   134d0:	movhi	r1, #36	; 0x24
   134d4:	strbhi	r1, [r9, r2]
   134d8:	add	r2, r4, #2
   134dc:	add	r4, r4, #3
   134e0:	cmp	sl, r2
   134e4:	movhi	r1, #39	; 0x27
   134e8:	strbhi	r1, [r9, r2]
   134ec:	cmp	sl, r4
   134f0:	add	r7, r7, #1
   134f4:	movhi	r3, #92	; 0x5c
   134f8:	strbhi	r3, [r9, r4]
   134fc:	add	r4, r4, #1
   13500:	cmp	r4, sl
   13504:	ldr	r3, [sp, #32]
   13508:	strbcc	r5, [r9, r4]
   1350c:	cmp	r6, #0
   13510:	add	r4, r4, #1
   13514:	moveq	r3, #0
   13518:	cmn	r8, #1
   1351c:	str	r3, [sp, #32]
   13520:	bne	12f24 <__assert_fail@plt+0x1c7c>
   13524:	ldr	r3, [sp, #28]
   13528:	ldrb	r6, [r3, r7]
   1352c:	adds	r6, r6, #0
   13530:	movne	r6, #1
   13534:	cmp	r6, #0
   13538:	bne	12f34 <__assert_fail@plt+0x1c8c>
   1353c:	mov	r3, r9
   13540:	mov	r9, fp
   13544:	mov	fp, r3
   13548:	ldr	r3, [sp, #68]	; 0x44
   1354c:	cmp	r4, #0
   13550:	movne	r3, #0
   13554:	cmp	r3, #0
   13558:	bne	1474c <__assert_fail@plt+0x34a4>
   1355c:	ldr	r3, [sp, #44]	; 0x2c
   13560:	ldr	r2, [sp, #52]	; 0x34
   13564:	eor	r3, r3, #1
   13568:	ands	r2, r3, r2
   1356c:	beq	14684 <__assert_fail@plt+0x33dc>
   13570:	ldr	r3, [sp, #80]	; 0x50
   13574:	cmp	r3, #0
   13578:	beq	14688 <__assert_fail@plt+0x33e0>
   1357c:	ldr	r3, [sp, #32]
   13580:	cmp	r3, #0
   13584:	bne	146fc <__assert_fail@plt+0x3454>
   13588:	ldr	r3, [sp, #84]	; 0x54
   1358c:	adds	r3, r3, #0
   13590:	movne	r3, #1
   13594:	cmp	sl, #0
   13598:	movne	r3, #0
   1359c:	cmp	r3, #0
   135a0:	ldreq	r2, [sp, #80]	; 0x50
   135a4:	beq	14688 <__assert_fail@plt+0x33e0>
   135a8:	ldr	r2, [sp, #84]	; 0x54
   135ac:	mov	sl, r2
   135b0:	mov	r0, #0
   135b4:	mov	r4, #1
   135b8:	mov	r1, #39	; 0x27
   135bc:	str	r0, [sp, #44]	; 0x2c
   135c0:	strb	r1, [fp]
   135c4:	str	r0, [sp, #48]	; 0x30
   135c8:	str	r4, [sp, #52]	; 0x34
   135cc:	str	r4, [sp, #56]	; 0x38
   135d0:	str	r4, [sp, #64]	; 0x40
   135d4:	str	r0, [sp, #68]	; 0x44
   135d8:	str	r3, [sp, #80]	; 0x50
   135dc:	str	r2, [sp, #84]	; 0x54
   135e0:	str	r0, [sp, #88]	; 0x58
   135e4:	b	13224 <__assert_fail@plt+0x1f7c>
   135e8:	mov	r5, #98	; 0x62
   135ec:	b	13498 <__assert_fail@plt+0x21f0>
   135f0:	mov	r5, #97	; 0x61
   135f4:	b	13498 <__assert_fail@plt+0x21f0>
   135f8:	ldr	r3, [sp, #48]	; 0x30
   135fc:	str	r3, [sp, #40]	; 0x28
   13600:	mov	r3, #116	; 0x74
   13604:	ldr	r2, [sp, #68]	; 0x44
   13608:	cmp	r2, #0
   1360c:	bne	13808 <__assert_fail@plt+0x2560>
   13610:	ldr	r2, [sp, #60]	; 0x3c
   13614:	cmp	r2, #0
   13618:	bne	13764 <__assert_fail@plt+0x24bc>
   1361c:	ldr	r3, [sp, #44]	; 0x2c
   13620:	mov	r6, #0
   13624:	cmp	r3, #0
   13628:	beq	137d4 <__assert_fail@plt+0x252c>
   1362c:	mov	r3, fp
   13630:	ldr	r2, [sp, #184]	; 0xb8
   13634:	cmp	r2, #0
   13638:	beq	13658 <__assert_fail@plt+0x23b0>
   1363c:	ubfx	r1, r5, #5, #8
   13640:	mov	r0, r2
   13644:	and	r2, r5, #31
   13648:	ldr	r1, [r0, r1, lsl #2]
   1364c:	lsr	r2, r1, r2
   13650:	tst	r2, #1
   13654:	bne	1349c <__assert_fail@plt+0x21f4>
   13658:	ldr	r2, [sp, #40]	; 0x28
   1365c:	cmp	r2, #0
   13660:	addeq	r7, r7, #1
   13664:	bne	1349c <__assert_fail@plt+0x21f4>
   13668:	cmp	r3, #0
   1366c:	beq	13500 <__assert_fail@plt+0x2258>
   13670:	cmp	sl, r4
   13674:	mov	fp, #0
   13678:	movhi	r3, #39	; 0x27
   1367c:	strbhi	r3, [r9, r4]
   13680:	add	r3, r4, #1
   13684:	add	r4, r4, #2
   13688:	cmp	sl, r3
   1368c:	movhi	r2, #39	; 0x27
   13690:	strbhi	r2, [r9, r3]
   13694:	b	13500 <__assert_fail@plt+0x2258>
   13698:	ldr	r3, [sp, #48]	; 0x30
   1369c:	str	r3, [sp, #40]	; 0x28
   136a0:	eor	r3, fp, #1
   136a4:	ldr	r2, [sp, #52]	; 0x34
   136a8:	ands	r2, r2, r3
   136ac:	beq	1436c <__assert_fail@plt+0x30c4>
   136b0:	cmp	sl, r4
   136b4:	movhi	r3, #39	; 0x27
   136b8:	strbhi	r3, [r9, r4]
   136bc:	add	r3, r4, #1
   136c0:	cmp	sl, r3
   136c4:	movhi	r1, #36	; 0x24
   136c8:	strbhi	r1, [r9, r3]
   136cc:	add	r3, r4, #2
   136d0:	cmp	sl, r3
   136d4:	movhi	r1, #39	; 0x27
   136d8:	strbhi	r1, [r9, r3]
   136dc:	add	r3, r4, #3
   136e0:	cmp	sl, r3
   136e4:	bls	143b8 <__assert_fail@plt+0x3110>
   136e8:	mov	r4, r3
   136ec:	mov	r3, #92	; 0x5c
   136f0:	mov	fp, r2
   136f4:	mov	r2, r4
   136f8:	strb	r3, [r9, r4]
   136fc:	ldr	r3, [sp, #176]	; 0xb0
   13700:	add	r4, r4, #1
   13704:	cmp	r3, #2
   13708:	beq	14420 <__assert_fail@plt+0x3178>
   1370c:	add	r3, r7, #1
   13710:	cmp	r3, r8
   13714:	bcs	1372c <__assert_fail@plt+0x2484>
   13718:	ldr	r1, [sp, #28]
   1371c:	ldrb	r3, [r1, r3]
   13720:	sub	r3, r3, #48	; 0x30
   13724:	cmp	r3, #9
   13728:	bls	14430 <__assert_fail@plt+0x3188>
   1372c:	mov	r3, #0
   13730:	mov	r5, #48	; 0x30
   13734:	ldr	r6, [sp, #64]	; 0x40
   13738:	cmp	r6, #0
   1373c:	beq	13630 <__assert_fail@plt+0x2388>
   13740:	mov	r6, #0
   13744:	b	13658 <__assert_fail@plt+0x23b0>
   13748:	ldr	r3, [sp, #48]	; 0x30
   1374c:	str	r3, [sp, #40]	; 0x28
   13750:	ldr	r2, [sp, #60]	; 0x3c
   13754:	mov	r5, #13
   13758:	mov	r3, #114	; 0x72
   1375c:	cmp	r2, #0
   13760:	beq	1361c <__assert_fail@plt+0x2374>
   13764:	mov	r5, r3
   13768:	b	13498 <__assert_fail@plt+0x21f0>
   1376c:	ldr	r3, [sp, #48]	; 0x30
   13770:	str	r3, [sp, #40]	; 0x28
   13774:	mov	r3, #118	; 0x76
   13778:	b	13610 <__assert_fail@plt+0x2368>
   1377c:	ldr	r3, [sp, #48]	; 0x30
   13780:	str	r3, [sp, #40]	; 0x28
   13784:	mov	r5, #10
   13788:	mov	r3, #110	; 0x6e
   1378c:	b	13610 <__assert_fail@plt+0x2368>
   13790:	ldr	r3, [sp, #48]	; 0x30
   13794:	cmn	r8, #1
   13798:	str	r3, [sp, #40]	; 0x28
   1379c:	beq	13be4 <__assert_fail@plt+0x293c>
   137a0:	subs	r3, r8, #1
   137a4:	movne	r3, #1
   137a8:	cmp	r3, #0
   137ac:	bne	137b8 <__assert_fail@plt+0x2510>
   137b0:	cmp	r7, #0
   137b4:	beq	137fc <__assert_fail@plt+0x2554>
   137b8:	mov	r6, #0
   137bc:	ldr	r3, [sp, #64]	; 0x40
   137c0:	cmp	r3, #0
   137c4:	beq	1362c <__assert_fail@plt+0x2384>
   137c8:	ldr	r3, [sp, #44]	; 0x2c
   137cc:	cmp	r3, #0
   137d0:	bne	1362c <__assert_fail@plt+0x2384>
   137d4:	mov	r3, fp
   137d8:	b	13658 <__assert_fail@plt+0x23b0>
   137dc:	ldr	r3, [sp, #48]	; 0x30
   137e0:	str	r3, [sp, #40]	; 0x28
   137e4:	b	137b0 <__assert_fail@plt+0x2508>
   137e8:	ldr	r3, [sp, #48]	; 0x30
   137ec:	str	r3, [sp, #40]	; 0x28
   137f0:	b	137b8 <__assert_fail@plt+0x2510>
   137f4:	ldr	r6, [sp, #48]	; 0x30
   137f8:	str	r6, [sp, #40]	; 0x28
   137fc:	ldr	r3, [sp, #68]	; 0x44
   13800:	cmp	r3, #0
   13804:	beq	137bc <__assert_fail@plt+0x2514>
   13808:	mov	r3, #2
   1380c:	mov	fp, r9
   13810:	str	r3, [sp, #176]	; 0xb0
   13814:	ldr	r3, [sp, #60]	; 0x3c
   13818:	cmp	r3, #0
   1381c:	ldr	r3, [sp, #176]	; 0xb0
   13820:	movne	r3, #4
   13824:	str	r3, [sp, #176]	; 0xb0
   13828:	mov	lr, #0
   1382c:	mov	r0, fp
   13830:	ldr	r2, [sp, #28]
   13834:	ldr	r3, [sp, #180]	; 0xb4
   13838:	ldr	r1, [sp, #188]	; 0xbc
   1383c:	bic	ip, r3, #2
   13840:	ldr	r3, [sp, #176]	; 0xb0
   13844:	stm	sp, {r3, ip, lr}
   13848:	mov	r3, r8
   1384c:	ldr	ip, [sp, #192]	; 0xc0
   13850:	str	r1, [sp, #12]
   13854:	mov	r1, sl
   13858:	str	ip, [sp, #16]
   1385c:	bl	12de8 <__assert_fail@plt+0x1b40>
   13860:	mov	r4, r0
   13864:	mov	r0, r4
   13868:	add	sp, sp, #140	; 0x8c
   1386c:	ldrd	r4, [sp]
   13870:	ldrd	r6, [sp, #8]
   13874:	ldrd	r8, [sp, #16]
   13878:	ldrd	sl, [sp, #24]
   1387c:	add	sp, sp, #32
   13880:	pop	{pc}		; (ldr pc, [sp], #4)
   13884:	ldr	r3, [sp, #48]	; 0x30
   13888:	str	r3, [sp, #40]	; 0x28
   1388c:	ldr	r3, [sp, #176]	; 0xb0
   13890:	cmp	r3, #2
   13894:	beq	13c0c <__assert_fail@plt+0x2964>
   13898:	ldr	r3, [sp, #88]	; 0x58
   1389c:	cmp	r3, #0
   138a0:	moveq	r5, #92	; 0x5c
   138a4:	moveq	r3, r5
   138a8:	beq	13610 <__assert_fail@plt+0x2368>
   138ac:	add	r7, r7, #1
   138b0:	mov	r3, fp
   138b4:	mov	r6, #0
   138b8:	mov	r5, #92	; 0x5c
   138bc:	b	13668 <__assert_fail@plt+0x23c0>
   138c0:	ldr	r3, [sp, #64]	; 0x40
   138c4:	cmp	r3, #0
   138c8:	bne	14740 <__assert_fail@plt+0x3498>
   138cc:	ldr	r2, [sp, #48]	; 0x30
   138d0:	mov	r3, fp
   138d4:	mov	r6, r2
   138d8:	str	r2, [sp, #40]	; 0x28
   138dc:	b	13630 <__assert_fail@plt+0x2388>
   138e0:	ldr	r3, [sp, #176]	; 0xb0
   138e4:	cmp	r3, #2
   138e8:	beq	1467c <__assert_fail@plt+0x33d4>
   138ec:	cmp	r3, #5
   138f0:	ldr	r3, [sp, #48]	; 0x30
   138f4:	str	r3, [sp, #40]	; 0x28
   138f8:	bne	13924 <__assert_fail@plt+0x267c>
   138fc:	ldr	r3, [sp, #96]	; 0x60
   13900:	cmp	r3, #0
   13904:	beq	14380 <__assert_fail@plt+0x30d8>
   13908:	add	r3, r7, #2
   1390c:	cmp	r3, r8
   13910:	bcs	13924 <__assert_fail@plt+0x267c>
   13914:	ldr	r2, [sp, #36]	; 0x24
   13918:	ldrb	r5, [r2, #1]
   1391c:	cmp	r5, #63	; 0x3f
   13920:	beq	14468 <__assert_fail@plt+0x31c0>
   13924:	mov	r6, #0
   13928:	mov	r5, #63	; 0x3f
   1392c:	b	137bc <__assert_fail@plt+0x2514>
   13930:	ldr	r3, [sp, #176]	; 0xb0
   13934:	cmp	r3, #2
   13938:	ldr	r3, [sp, #48]	; 0x30
   1393c:	beq	14124 <__assert_fail@plt+0x2e7c>
   13940:	mov	r5, #39	; 0x27
   13944:	str	r3, [sp, #40]	; 0x28
   13948:	str	r6, [sp, #80]	; 0x50
   1394c:	b	137bc <__assert_fail@plt+0x2514>
   13950:	ldr	r3, [sp, #180]	; 0xb4
   13954:	cmp	r4, #0
   13958:	and	r3, r3, #1
   1395c:	str	r3, [sp, #92]	; 0x5c
   13960:	ldr	r3, [sp, #180]	; 0xb4
   13964:	and	r3, r3, #4
   13968:	str	r3, [sp, #96]	; 0x60
   1396c:	bne	1478c <__assert_fail@plt+0x34e4>
   13970:	str	r4, [sp, #60]	; 0x3c
   13974:	cmp	sl, #0
   13978:	bne	14770 <__assert_fail@plt+0x34c8>
   1397c:	mov	r3, #1
   13980:	movw	r2, #48468	; 0xbd54
   13984:	movt	r2, #2
   13988:	mov	r4, r3
   1398c:	mov	r3, #2
   13990:	mov	r9, sl
   13994:	str	r4, [sp, #32]
   13998:	str	sl, [sp, #44]	; 0x2c
   1399c:	str	sl, [sp, #48]	; 0x30
   139a0:	str	r4, [sp, #52]	; 0x34
   139a4:	str	r4, [sp, #56]	; 0x38
   139a8:	str	r4, [sp, #64]	; 0x40
   139ac:	str	sl, [sp, #68]	; 0x44
   139b0:	str	r2, [sp, #72]	; 0x48
   139b4:	str	sl, [sp, #80]	; 0x50
   139b8:	str	sl, [sp, #84]	; 0x54
   139bc:	str	sl, [sp, #88]	; 0x58
   139c0:	str	r3, [sp, #176]	; 0xb0
   139c4:	b	12f0c <__assert_fail@plt+0x1c64>
   139c8:	ldrb	r5, [r0, r7]
   139cc:	cmp	r5, #126	; 0x7e
   139d0:	ldrls	pc, [pc, r5, lsl #2]
   139d4:	b	13d38 <__assert_fail@plt+0x2a90>
   139d8:	andeq	r3, r1, r4, lsl #26
   139dc:	andeq	r3, r1, r8, lsr sp
   139e0:	andeq	r3, r1, r8, lsr sp
   139e4:	andeq	r3, r1, r8, lsr sp
   139e8:	andeq	r3, r1, r8, lsr sp
   139ec:	andeq	r3, r1, r8, lsr sp
   139f0:	andeq	r3, r1, r8, lsr sp
   139f4:	strdeq	r3, [r1], -r4
   139f8:	andeq	r3, r1, r4, ror #25
   139fc:	andeq	r3, r1, r8, ror #24
   13a00:	ldrdeq	r3, [r1], -r4
   13a04:	andeq	r3, r1, r8, asr #24
   13a08:	andeq	r3, r1, r8, lsr #26
   13a0c:			; <UNDEFINED> instruction: 0x00013cb4
   13a10:	andeq	r3, r1, r8, lsr sp
   13a14:	andeq	r3, r1, r8, lsr sp
   13a18:	andeq	r3, r1, r8, lsr sp
   13a1c:	andeq	r3, r1, r8, lsr sp
   13a20:	andeq	r3, r1, r8, lsr sp
   13a24:	andeq	r3, r1, r8, lsr sp
   13a28:	andeq	r3, r1, r8, lsr sp
   13a2c:	andeq	r3, r1, r8, lsr sp
   13a30:	andeq	r3, r1, r8, lsr sp
   13a34:	andeq	r3, r1, r8, lsr sp
   13a38:	andeq	r3, r1, r8, lsr sp
   13a3c:	andeq	r3, r1, r8, lsr sp
   13a40:	andeq	r3, r1, r8, lsr sp
   13a44:	andeq	r3, r1, r8, lsr sp
   13a48:	andeq	r3, r1, r8, lsr sp
   13a4c:	andeq	r3, r1, r8, lsr sp
   13a50:	andeq	r3, r1, r8, lsr sp
   13a54:	andeq	r3, r1, r8, lsr sp
   13a58:	andeq	r3, r1, ip, asr ip
   13a5c:	andeq	r3, r1, r4, asr #25
   13a60:	andeq	r3, r1, r4, asr #25
   13a64:	andeq	r3, r1, ip, lsr ip
   13a68:	andeq	r3, r1, r4, asr #25
   13a6c:	andeq	r3, r1, r0, lsr ip
   13a70:	andeq	r3, r1, r4, asr #25
   13a74:	andeq	r3, r1, r0, lsr #25
   13a78:	andeq	r3, r1, r4, asr #25
   13a7c:	andeq	r3, r1, r4, asr #25
   13a80:	andeq	r3, r1, r4, asr #25
   13a84:	andeq	r3, r1, r0, lsr ip
   13a88:	andeq	r3, r1, r0, lsr ip
   13a8c:	andeq	r3, r1, r0, lsr ip
   13a90:	andeq	r3, r1, r0, lsr ip
   13a94:	andeq	r3, r1, r0, lsr ip
   13a98:	andeq	r3, r1, r0, lsr ip
   13a9c:	andeq	r3, r1, r0, lsr ip
   13aa0:	andeq	r3, r1, r0, lsr ip
   13aa4:	andeq	r3, r1, r0, lsr ip
   13aa8:	andeq	r3, r1, r0, lsr ip
   13aac:	andeq	r3, r1, r0, lsr ip
   13ab0:	andeq	r3, r1, r0, lsr ip
   13ab4:	andeq	r3, r1, r0, lsr ip
   13ab8:	andeq	r3, r1, r0, lsr ip
   13abc:	andeq	r3, r1, r0, lsr ip
   13ac0:	andeq	r3, r1, r0, lsr ip
   13ac4:	andeq	r3, r1, r4, asr #25
   13ac8:	andeq	r3, r1, r4, asr #25
   13acc:	andeq	r3, r1, r4, asr #25
   13ad0:	andeq	r3, r1, r4, asr #25
   13ad4:	andeq	r3, r1, r8, ror ip
   13ad8:	andeq	r3, r1, r8, lsr sp
   13adc:	andeq	r3, r1, r0, lsr ip
   13ae0:	andeq	r3, r1, r0, lsr ip
   13ae4:	andeq	r3, r1, r0, lsr ip
   13ae8:	andeq	r3, r1, r0, lsr ip
   13aec:	andeq	r3, r1, r0, lsr ip
   13af0:	andeq	r3, r1, r0, lsr ip
   13af4:	andeq	r3, r1, r0, lsr ip
   13af8:	andeq	r3, r1, r0, lsr ip
   13afc:	andeq	r3, r1, r0, lsr ip
   13b00:	andeq	r3, r1, r0, lsr ip
   13b04:	andeq	r3, r1, r0, lsr ip
   13b08:	andeq	r3, r1, r0, lsr ip
   13b0c:	andeq	r3, r1, r0, lsr ip
   13b10:	andeq	r3, r1, r0, lsr ip
   13b14:	andeq	r3, r1, r0, lsr ip
   13b18:	andeq	r3, r1, r0, lsr ip
   13b1c:	andeq	r3, r1, r0, lsr ip
   13b20:	andeq	r3, r1, r0, lsr ip
   13b24:	andeq	r3, r1, r0, lsr ip
   13b28:	andeq	r3, r1, r0, lsr ip
   13b2c:	andeq	r3, r1, r0, lsr ip
   13b30:	andeq	r3, r1, r0, lsr ip
   13b34:	andeq	r3, r1, r0, lsr ip
   13b38:	andeq	r3, r1, r0, lsr ip
   13b3c:	andeq	r3, r1, r0, lsr ip
   13b40:	andeq	r3, r1, r0, lsr ip
   13b44:	andeq	r3, r1, r4, asr #25
   13b48:	strdeq	r3, [r1], -r8
   13b4c:	andeq	r3, r1, r0, lsr ip
   13b50:	andeq	r3, r1, r4, asr #25
   13b54:	andeq	r3, r1, r0, lsr ip
   13b58:	andeq	r3, r1, r4, asr #25
   13b5c:	andeq	r3, r1, r0, lsr ip
   13b60:	andeq	r3, r1, r0, lsr ip
   13b64:	andeq	r3, r1, r0, lsr ip
   13b68:	andeq	r3, r1, r0, lsr ip
   13b6c:	andeq	r3, r1, r0, lsr ip
   13b70:	andeq	r3, r1, r0, lsr ip
   13b74:	andeq	r3, r1, r0, lsr ip
   13b78:	andeq	r3, r1, r0, lsr ip
   13b7c:	andeq	r3, r1, r0, lsr ip
   13b80:	andeq	r3, r1, r0, lsr ip
   13b84:	andeq	r3, r1, r0, lsr ip
   13b88:	andeq	r3, r1, r0, lsr ip
   13b8c:	andeq	r3, r1, r0, lsr ip
   13b90:	andeq	r3, r1, r0, lsr ip
   13b94:	andeq	r3, r1, r0, lsr ip
   13b98:	andeq	r3, r1, r0, lsr ip
   13b9c:	andeq	r3, r1, r0, lsr ip
   13ba0:	andeq	r3, r1, r0, lsr ip
   13ba4:	andeq	r3, r1, r0, lsr ip
   13ba8:	andeq	r3, r1, r0, lsr ip
   13bac:	andeq	r3, r1, r0, lsr ip
   13bb0:	andeq	r3, r1, r0, lsr ip
   13bb4:	andeq	r3, r1, r0, lsr ip
   13bb8:	andeq	r3, r1, r0, lsr ip
   13bbc:	andeq	r3, r1, r0, lsr ip
   13bc0:	andeq	r3, r1, r0, lsr ip
   13bc4:	ldrdeq	r3, [r1], -r4
   13bc8:	andeq	r3, r1, r4, asr #25
   13bcc:	ldrdeq	r3, [r1], -r4
   13bd0:	andeq	r3, r1, ip, lsr ip
   13bd4:	mov	r3, #0
   13bd8:	cmn	r8, #1
   13bdc:	str	r3, [sp, #40]	; 0x28
   13be0:	bne	137a0 <__assert_fail@plt+0x24f8>
   13be4:	ldr	r3, [sp, #28]
   13be8:	ldrb	r3, [r3, #1]
   13bec:	adds	r3, r3, #0
   13bf0:	movne	r3, #1
   13bf4:	b	137a8 <__assert_fail@plt+0x2500>
   13bf8:	mov	r3, #0
   13bfc:	str	r3, [sp, #40]	; 0x28
   13c00:	ldr	r3, [sp, #176]	; 0xb0
   13c04:	cmp	r3, #2
   13c08:	bne	13898 <__assert_fail@plt+0x25f0>
   13c0c:	ldr	r3, [sp, #44]	; 0x2c
   13c10:	cmp	r3, #0
   13c14:	bne	14554 <__assert_fail@plt+0x32ac>
   13c18:	mov	r6, r3
   13c1c:	add	r7, r7, #1
   13c20:	mov	r3, fp
   13c24:	mov	r5, #92	; 0x5c
   13c28:	b	13668 <__assert_fail@plt+0x23c0>
   13c2c:	ldr	r6, [sp, #48]	; 0x30
   13c30:	mov	r3, #0
   13c34:	str	r3, [sp, #40]	; 0x28
   13c38:	b	137bc <__assert_fail@plt+0x2514>
   13c3c:	mov	r3, #0
   13c40:	str	r3, [sp, #40]	; 0x28
   13c44:	b	137b0 <__assert_fail@plt+0x2508>
   13c48:	mov	r3, #0
   13c4c:	str	r3, [sp, #40]	; 0x28
   13c50:	mov	r3, #118	; 0x76
   13c54:	b	13610 <__assert_fail@plt+0x2368>
   13c58:	ldr	r6, [sp, #48]	; 0x30
   13c5c:	mov	r3, #0
   13c60:	str	r3, [sp, #40]	; 0x28
   13c64:	b	137fc <__assert_fail@plt+0x2554>
   13c68:	mov	r3, #0
   13c6c:	str	r3, [sp, #40]	; 0x28
   13c70:	mov	r3, #116	; 0x74
   13c74:	b	13604 <__assert_fail@plt+0x235c>
   13c78:	ldr	r3, [sp, #176]	; 0xb0
   13c7c:	cmp	r3, #2
   13c80:	beq	14190 <__assert_fail@plt+0x2ee8>
   13c84:	cmp	r3, #5
   13c88:	mov	r3, #0
   13c8c:	str	r3, [sp, #40]	; 0x28
   13c90:	beq	138fc <__assert_fail@plt+0x2654>
   13c94:	mov	r6, #0
   13c98:	mov	r5, #63	; 0x3f
   13c9c:	b	137bc <__assert_fail@plt+0x2514>
   13ca0:	ldr	r3, [sp, #176]	; 0xb0
   13ca4:	cmp	r3, #2
   13ca8:	beq	14118 <__assert_fail@plt+0x2e70>
   13cac:	mov	r3, #0
   13cb0:	b	13940 <__assert_fail@plt+0x2698>
   13cb4:	mov	r3, #0
   13cb8:	str	r3, [sp, #40]	; 0x28
   13cbc:	mov	r3, #114	; 0x72
   13cc0:	b	13604 <__assert_fail@plt+0x235c>
   13cc4:	mov	r3, #0
   13cc8:	mov	r6, r3
   13ccc:	str	r3, [sp, #40]	; 0x28
   13cd0:	b	137fc <__assert_fail@plt+0x2554>
   13cd4:	mov	r3, #0
   13cd8:	str	r3, [sp, #40]	; 0x28
   13cdc:	mov	r3, #110	; 0x6e
   13ce0:	b	13604 <__assert_fail@plt+0x235c>
   13ce4:	mov	r3, #0
   13ce8:	str	r3, [sp, #40]	; 0x28
   13cec:	mov	r3, #98	; 0x62
   13cf0:	b	13610 <__assert_fail@plt+0x2368>
   13cf4:	mov	r3, #0
   13cf8:	str	r3, [sp, #40]	; 0x28
   13cfc:	mov	r3, #97	; 0x61
   13d00:	b	13610 <__assert_fail@plt+0x2368>
   13d04:	ldr	r3, [sp, #60]	; 0x3c
   13d08:	cmp	r3, #0
   13d0c:	bne	140fc <__assert_fail@plt+0x2e54>
   13d10:	ldr	r3, [sp, #92]	; 0x5c
   13d14:	cmp	r3, #0
   13d18:	addne	r7, r7, #1
   13d1c:	bne	12f1c <__assert_fail@plt+0x1c74>
   13d20:	str	r3, [sp, #40]	; 0x28
   13d24:	b	1361c <__assert_fail@plt+0x2374>
   13d28:	mov	r3, #0
   13d2c:	str	r3, [sp, #40]	; 0x28
   13d30:	mov	r3, #102	; 0x66
   13d34:	b	13610 <__assert_fail@plt+0x2368>
   13d38:	mov	r3, #0
   13d3c:	str	r3, [sp, #40]	; 0x28
   13d40:	ldr	r3, [sp, #76]	; 0x4c
   13d44:	cmp	r3, #1
   13d48:	bne	141b0 <__assert_fail@plt+0x2f08>
   13d4c:	bl	11170 <__ctype_b_loc@plt>
   13d50:	ldr	r2, [r0]
   13d54:	sxth	r3, r5
   13d58:	lsl	r3, r3, #1
   13d5c:	ldr	r1, [sp, #76]	; 0x4c
   13d60:	ldrh	r3, [r2, r3]
   13d64:	mov	r0, r1
   13d68:	and	r3, r3, #16384	; 0x4000
   13d6c:	cmp	r3, #0
   13d70:	ldr	r3, [sp, #60]	; 0x3c
   13d74:	movne	r6, #1
   13d78:	moveq	r6, #0
   13d7c:	movne	r2, #0
   13d80:	andeq	r2, r3, #1
   13d84:	cmp	r2, #0
   13d88:	beq	137bc <__assert_fail@plt+0x2514>
   13d8c:	ldr	r2, [sp, #60]	; 0x3c
   13d90:	mov	r6, #0
   13d94:	add	r1, r0, r7
   13d98:	mov	ip, #39	; 0x27
   13d9c:	str	r6, [sp, #100]	; 0x64
   13da0:	mov	r0, #0
   13da4:	ldr	lr, [sp, #36]	; 0x24
   13da8:	str	r8, [sp, #36]	; 0x24
   13dac:	ldr	r6, [sp, #40]	; 0x28
   13db0:	ldr	r8, [sp, #44]	; 0x2c
   13db4:	b	13e64 <__assert_fail@plt+0x2bbc>
   13db8:	cmp	r8, #0
   13dbc:	bne	14398 <__assert_fail@plt+0x30f0>
   13dc0:	ldr	r0, [sp, #52]	; 0x34
   13dc4:	eor	r3, fp, #1
   13dc8:	ands	r3, r0, r3
   13dcc:	beq	13dfc <__assert_fail@plt+0x2b54>
   13dd0:	cmp	sl, r4
   13dd4:	add	r0, r4, #1
   13dd8:	strbhi	ip, [r9, r4]
   13ddc:	cmp	sl, r0
   13de0:	movhi	fp, #36	; 0x24
   13de4:	strbhi	fp, [r9, r0]
   13de8:	add	r0, r4, #2
   13dec:	mov	fp, r3
   13df0:	cmp	sl, r0
   13df4:	add	r4, r4, #3
   13df8:	strbhi	ip, [r9, r0]
   13dfc:	cmp	sl, r4
   13e00:	movhi	r3, #92	; 0x5c
   13e04:	strbhi	r3, [r9, r4]
   13e08:	add	r3, r4, #1
   13e0c:	cmp	sl, r3
   13e10:	bls	13e20 <__assert_fail@plt+0x2b78>
   13e14:	lsr	r0, r5, #6
   13e18:	add	r0, r0, #48	; 0x30
   13e1c:	strb	r0, [r9, r3]
   13e20:	add	r3, r4, #2
   13e24:	cmp	sl, r3
   13e28:	bls	13e38 <__assert_fail@plt+0x2b90>
   13e2c:	ubfx	r0, r5, #3, #3
   13e30:	add	r0, r0, #48	; 0x30
   13e34:	strb	r0, [r9, r3]
   13e38:	add	r7, r7, #1
   13e3c:	and	r5, r5, #7
   13e40:	cmp	r1, r7
   13e44:	add	r5, r5, #48	; 0x30
   13e48:	add	r4, r4, #3
   13e4c:	bls	143ac <__assert_fail@plt+0x3104>
   13e50:	mov	r0, r2
   13e54:	cmp	sl, r4
   13e58:	strbhi	r5, [r9, r4]
   13e5c:	add	r4, r4, #1
   13e60:	ldrb	r5, [lr, #1]!
   13e64:	cmp	r2, #0
   13e68:	bne	13db8 <__assert_fail@plt+0x2b10>
   13e6c:	eor	r3, r0, #1
   13e70:	cmp	r6, #0
   13e74:	and	r3, r3, fp
   13e78:	uxtb	r3, r3
   13e7c:	beq	13e90 <__assert_fail@plt+0x2be8>
   13e80:	cmp	sl, r4
   13e84:	movhi	r6, #92	; 0x5c
   13e88:	strbhi	r6, [r9, r4]
   13e8c:	add	r4, r4, #1
   13e90:	add	r7, r7, #1
   13e94:	cmp	r7, r1
   13e98:	bcs	1438c <__assert_fail@plt+0x30e4>
   13e9c:	cmp	r3, #0
   13ea0:	beq	143d0 <__assert_fail@plt+0x3128>
   13ea4:	cmp	sl, r4
   13ea8:	add	r3, r4, #1
   13eac:	mov	r6, #0
   13eb0:	strbhi	ip, [r9, r4]
   13eb4:	cmp	sl, r3
   13eb8:	add	r4, r4, #2
   13ebc:	mov	fp, r6
   13ec0:	strbhi	ip, [r9, r3]
   13ec4:	b	13e54 <__assert_fail@plt+0x2bac>
   13ec8:	ldr	r3, [sp, #36]	; 0x24
   13ecc:	ldrb	r5, [r3]
   13ed0:	cmp	r5, #126	; 0x7e
   13ed4:	ldrls	pc, [pc, r5, lsl #2]
   13ed8:	b	13d38 <__assert_fail@plt+0x2a90>
   13edc:	strdeq	r4, [r1], -ip
   13ee0:	andeq	r3, r1, r8, lsr sp
   13ee4:	andeq	r3, r1, r8, lsr sp
   13ee8:	andeq	r3, r1, r8, lsr sp
   13eec:	andeq	r3, r1, r8, lsr sp
   13ef0:	andeq	r3, r1, r8, lsr sp
   13ef4:	andeq	r3, r1, r8, lsr sp
   13ef8:	strdeq	r3, [r1], -r0
   13efc:	andeq	r3, r1, r8, ror #11
   13f00:	andeq	r3, r1, r8, ror #24
   13f04:	strdeq	r4, [r1], -r0
   13f08:	andeq	r3, r1, r8, asr #24
   13f0c:	muleq	r1, r4, r4
   13f10:	andeq	r4, r1, r4, ror #1
   13f14:	andeq	r3, r1, r8, lsr sp
   13f18:	andeq	r3, r1, r8, lsr sp
   13f1c:	andeq	r3, r1, r8, lsr sp
   13f20:	andeq	r3, r1, r8, lsr sp
   13f24:	andeq	r3, r1, r8, lsr sp
   13f28:	andeq	r3, r1, r8, lsr sp
   13f2c:	andeq	r3, r1, r8, lsr sp
   13f30:	andeq	r3, r1, r8, lsr sp
   13f34:	andeq	r3, r1, r8, lsr sp
   13f38:	andeq	r3, r1, r8, lsr sp
   13f3c:	andeq	r3, r1, r8, lsr sp
   13f40:	andeq	r3, r1, r8, lsr sp
   13f44:	andeq	r3, r1, r8, lsr sp
   13f48:	andeq	r3, r1, r8, lsr sp
   13f4c:	andeq	r3, r1, r8, lsr sp
   13f50:	andeq	r3, r1, r8, lsr sp
   13f54:	andeq	r3, r1, r8, lsr sp
   13f58:	andeq	r3, r1, r8, lsr sp
   13f5c:	andeq	r3, r1, r8, asr ip
   13f60:	ldrdeq	r4, [r1], -r8
   13f64:	ldrdeq	r4, [r1], -r8
   13f68:	andeq	r3, r1, ip, lsr ip
   13f6c:	ldrdeq	r4, [r1], -r8
   13f70:	andeq	r3, r1, ip, lsr #24
   13f74:	ldrdeq	r4, [r1], -r8
   13f78:	andeq	r3, r1, r0, lsr #25
   13f7c:	ldrdeq	r4, [r1], -r8
   13f80:	ldrdeq	r4, [r1], -r8
   13f84:	ldrdeq	r4, [r1], -r8
   13f88:	andeq	r3, r1, ip, lsr #24
   13f8c:	andeq	r3, r1, ip, lsr #24
   13f90:	andeq	r3, r1, ip, lsr #24
   13f94:	andeq	r3, r1, ip, lsr #24
   13f98:	andeq	r3, r1, ip, lsr #24
   13f9c:	andeq	r3, r1, ip, lsr #24
   13fa0:	andeq	r3, r1, ip, lsr #24
   13fa4:	andeq	r3, r1, ip, lsr #24
   13fa8:	andeq	r3, r1, ip, lsr #24
   13fac:	andeq	r3, r1, ip, lsr #24
   13fb0:	andeq	r3, r1, ip, lsr #24
   13fb4:	andeq	r3, r1, ip, lsr #24
   13fb8:	andeq	r3, r1, ip, lsr #24
   13fbc:	andeq	r3, r1, ip, lsr #24
   13fc0:	andeq	r3, r1, ip, lsr #24
   13fc4:	andeq	r3, r1, ip, lsr #24
   13fc8:	ldrdeq	r4, [r1], -r8
   13fcc:	ldrdeq	r4, [r1], -r8
   13fd0:	ldrdeq	r4, [r1], -r8
   13fd4:	ldrdeq	r4, [r1], -r8
   13fd8:	andeq	r3, r1, r8, ror ip
   13fdc:	andeq	r3, r1, r8, lsr sp
   13fe0:	andeq	r3, r1, ip, lsr #24
   13fe4:	andeq	r3, r1, ip, lsr #24
   13fe8:	andeq	r3, r1, ip, lsr #24
   13fec:	andeq	r3, r1, ip, lsr #24
   13ff0:	andeq	r3, r1, ip, lsr #24
   13ff4:	andeq	r3, r1, ip, lsr #24
   13ff8:	andeq	r3, r1, ip, lsr #24
   13ffc:	andeq	r3, r1, ip, lsr #24
   14000:	andeq	r3, r1, ip, lsr #24
   14004:	andeq	r3, r1, ip, lsr #24
   14008:	andeq	r3, r1, ip, lsr #24
   1400c:	andeq	r3, r1, ip, lsr #24
   14010:	andeq	r3, r1, ip, lsr #24
   14014:	andeq	r3, r1, ip, lsr #24
   14018:	andeq	r3, r1, ip, lsr #24
   1401c:	andeq	r3, r1, ip, lsr #24
   14020:	andeq	r3, r1, ip, lsr #24
   14024:	andeq	r3, r1, ip, lsr #24
   14028:	andeq	r3, r1, ip, lsr #24
   1402c:	andeq	r3, r1, ip, lsr #24
   14030:	andeq	r3, r1, ip, lsr #24
   14034:	andeq	r3, r1, ip, lsr #24
   14038:	andeq	r3, r1, ip, lsr #24
   1403c:	andeq	r3, r1, ip, lsr #24
   14040:	andeq	r3, r1, ip, lsr #24
   14044:	andeq	r3, r1, ip, lsr #24
   14048:	ldrdeq	r4, [r1], -r8
   1404c:	strdeq	r3, [r1], -r8
   14050:	andeq	r3, r1, ip, lsr #24
   14054:	ldrdeq	r4, [r1], -r8
   14058:	andeq	r3, r1, ip, lsr #24
   1405c:	ldrdeq	r4, [r1], -r8
   14060:	andeq	r3, r1, ip, lsr #24
   14064:	andeq	r3, r1, ip, lsr #24
   14068:	andeq	r3, r1, ip, lsr #24
   1406c:	andeq	r3, r1, ip, lsr #24
   14070:	andeq	r3, r1, ip, lsr #24
   14074:	andeq	r3, r1, ip, lsr #24
   14078:	andeq	r3, r1, ip, lsr #24
   1407c:	andeq	r3, r1, ip, lsr #24
   14080:	andeq	r3, r1, ip, lsr #24
   14084:	andeq	r3, r1, ip, lsr #24
   14088:	andeq	r3, r1, ip, lsr #24
   1408c:	andeq	r3, r1, ip, lsr #24
   14090:	andeq	r3, r1, ip, lsr #24
   14094:	andeq	r3, r1, ip, lsr #24
   14098:	andeq	r3, r1, ip, lsr #24
   1409c:	andeq	r3, r1, ip, lsr #24
   140a0:	andeq	r3, r1, ip, lsr #24
   140a4:	andeq	r3, r1, ip, lsr #24
   140a8:	andeq	r3, r1, ip, lsr #24
   140ac:	andeq	r3, r1, ip, lsr #24
   140b0:	andeq	r3, r1, ip, lsr #24
   140b4:	andeq	r3, r1, ip, lsr #24
   140b8:	andeq	r3, r1, ip, lsr #24
   140bc:	andeq	r3, r1, ip, lsr #24
   140c0:	andeq	r3, r1, ip, lsr #24
   140c4:	andeq	r3, r1, ip, lsr #24
   140c8:	ldrdeq	r3, [r1], -r4
   140cc:	ldrdeq	r4, [r1], -r8
   140d0:	ldrdeq	r3, [r1], -r4
   140d4:	andeq	r3, r1, ip, lsr ip
   140d8:	mov	r3, #0
   140dc:	str	r3, [sp, #40]	; 0x28
   140e0:	b	137b8 <__assert_fail@plt+0x2510>
   140e4:	mov	r3, #0
   140e8:	str	r3, [sp, #40]	; 0x28
   140ec:	b	13750 <__assert_fail@plt+0x24a8>
   140f0:	mov	r3, #0
   140f4:	str	r3, [sp, #40]	; 0x28
   140f8:	b	13784 <__assert_fail@plt+0x24dc>
   140fc:	ldr	r3, [sp, #44]	; 0x2c
   14100:	cmp	r3, #0
   14104:	beq	1369c <__assert_fail@plt+0x23f4>
   14108:	ldr	r3, [sp, #52]	; 0x34
   1410c:	mov	fp, r9
   14110:	str	r3, [sp, #60]	; 0x3c
   14114:	b	13814 <__assert_fail@plt+0x256c>
   14118:	ldr	r3, [sp, #44]	; 0x2c
   1411c:	cmp	r3, #0
   14120:	bne	14554 <__assert_fail@plt+0x32ac>
   14124:	str	r3, [sp, #40]	; 0x28
   14128:	cmp	sl, #0
   1412c:	ldr	r3, [sp, #84]	; 0x54
   14130:	clz	r3, r3
   14134:	lsr	r3, r3, #5
   14138:	moveq	r3, #0
   1413c:	cmp	r3, #0
   14140:	strne	sl, [sp, #84]	; 0x54
   14144:	movne	sl, #0
   14148:	bne	14178 <__assert_fail@plt+0x2ed0>
   1414c:	cmp	sl, r4
   14150:	movhi	r3, #39	; 0x27
   14154:	strbhi	r3, [r9, r4]
   14158:	add	r3, r4, #1
   1415c:	cmp	sl, r3
   14160:	movhi	r2, #92	; 0x5c
   14164:	strbhi	r2, [r9, r3]
   14168:	add	r3, r4, #2
   1416c:	cmp	sl, r3
   14170:	movhi	r2, #39	; 0x27
   14174:	strbhi	r2, [r9, r3]
   14178:	mov	r3, #0
   1417c:	add	r4, r4, #3
   14180:	str	r6, [sp, #80]	; 0x50
   14184:	mov	fp, r3
   14188:	mov	r5, #39	; 0x27
   1418c:	b	13658 <__assert_fail@plt+0x23b0>
   14190:	ldr	r3, [sp, #44]	; 0x2c
   14194:	cmp	r3, #0
   14198:	bne	14554 <__assert_fail@plt+0x32ac>
   1419c:	mov	r6, #0
   141a0:	mov	r5, #63	; 0x3f
   141a4:	str	r3, [sp, #40]	; 0x28
   141a8:	mov	r3, fp
   141ac:	b	13658 <__assert_fail@plt+0x23b0>
   141b0:	mov	r2, #0
   141b4:	mov	r3, #0
   141b8:	cmn	r8, #1
   141bc:	strd	r2, [sp, #128]	; 0x80
   141c0:	bne	141d0 <__assert_fail@plt+0x2f28>
   141c4:	ldr	r0, [sp, #28]
   141c8:	bl	11188 <strlen@plt>
   141cc:	mov	r8, r0
   141d0:	str	r9, [sp, #100]	; 0x64
   141d4:	mov	r3, #0
   141d8:	strd	sl, [sp, #104]	; 0x68
   141dc:	ldr	sl, [sp, #28]
   141e0:	str	r5, [sp, #112]	; 0x70
   141e4:	mov	r5, r3
   141e8:	ldr	r9, [sp, #68]	; 0x44
   141ec:	str	r4, [sp, #116]	; 0x74
   141f0:	add	r4, r7, r5
   141f4:	add	r3, sp, #128	; 0x80
   141f8:	add	fp, sl, r4
   141fc:	sub	r2, r8, r4
   14200:	mov	r1, fp
   14204:	add	r0, sp, #124	; 0x7c
   14208:	bl	2addc <__assert_fail@plt+0x19b34>
   1420c:	subs	r1, r0, #0
   14210:	beq	14250 <__assert_fail@plt+0x2fa8>
   14214:	cmn	r1, #1
   14218:	beq	145a8 <__assert_fail@plt+0x3300>
   1421c:	cmn	r1, #2
   14220:	beq	145c8 <__assert_fail@plt+0x3320>
   14224:	cmp	r9, #0
   14228:	bne	14280 <__assert_fail@plt+0x2fd8>
   1422c:	ldr	r0, [sp, #124]	; 0x7c
   14230:	add	r5, r5, r1
   14234:	bl	110bc <iswprint@plt>
   14238:	cmp	r0, #0
   1423c:	add	r0, sp, #128	; 0x80
   14240:	moveq	r6, #0
   14244:	bl	1105c <mbsinit@plt>
   14248:	cmp	r0, #0
   1424c:	beq	141f0 <__assert_fail@plt+0x2f48>
   14250:	ldr	r3, [sp, #60]	; 0x3c
   14254:	add	r9, sp, #100	; 0x64
   14258:	mov	r0, r5
   1425c:	ldm	r9, {r9, sl, fp}
   14260:	eor	r2, r6, #1
   14264:	ldr	r5, [sp, #112]	; 0x70
   14268:	and	r2, r2, r3
   1426c:	uxtb	r2, r2
   14270:	ldr	r4, [sp, #116]	; 0x74
   14274:	cmp	r0, #1
   14278:	bhi	13d94 <__assert_fail@plt+0x2aec>
   1427c:	b	13d84 <__assert_fail@plt+0x2adc>
   14280:	cmp	r1, #1
   14284:	beq	1422c <__assert_fail@plt+0x2f84>
   14288:	add	r2, r4, #1
   1428c:	add	r3, sl, r1
   14290:	add	r2, sl, r2
   14294:	add	r4, r3, r4
   14298:	ldrb	r3, [r2], #1
   1429c:	sub	r3, r3, #91	; 0x5b
   142a0:	cmp	r3, #33	; 0x21
   142a4:	ldrls	pc, [pc, r3, lsl #2]
   142a8:	b	14334 <__assert_fail@plt+0x308c>
   142ac:	andeq	r4, r1, r0, asr #6
   142b0:	andeq	r4, r1, r0, asr #6
   142b4:	andeq	r4, r1, r4, lsr r3
   142b8:	andeq	r4, r1, r0, asr #6
   142bc:	andeq	r4, r1, r4, lsr r3
   142c0:	andeq	r4, r1, r0, asr #6
   142c4:	andeq	r4, r1, r4, lsr r3
   142c8:	andeq	r4, r1, r4, lsr r3
   142cc:	andeq	r4, r1, r4, lsr r3
   142d0:	andeq	r4, r1, r4, lsr r3
   142d4:	andeq	r4, r1, r4, lsr r3
   142d8:	andeq	r4, r1, r4, lsr r3
   142dc:	andeq	r4, r1, r4, lsr r3
   142e0:	andeq	r4, r1, r4, lsr r3
   142e4:	andeq	r4, r1, r4, lsr r3
   142e8:	andeq	r4, r1, r4, lsr r3
   142ec:	andeq	r4, r1, r4, lsr r3
   142f0:	andeq	r4, r1, r4, lsr r3
   142f4:	andeq	r4, r1, r4, lsr r3
   142f8:	andeq	r4, r1, r4, lsr r3
   142fc:	andeq	r4, r1, r4, lsr r3
   14300:	andeq	r4, r1, r4, lsr r3
   14304:	andeq	r4, r1, r4, lsr r3
   14308:	andeq	r4, r1, r4, lsr r3
   1430c:	andeq	r4, r1, r4, lsr r3
   14310:	andeq	r4, r1, r4, lsr r3
   14314:	andeq	r4, r1, r4, lsr r3
   14318:	andeq	r4, r1, r4, lsr r3
   1431c:	andeq	r4, r1, r4, lsr r3
   14320:	andeq	r4, r1, r4, lsr r3
   14324:	andeq	r4, r1, r4, lsr r3
   14328:	andeq	r4, r1, r4, lsr r3
   1432c:	andeq	r4, r1, r4, lsr r3
   14330:	andeq	r4, r1, r0, asr #6
   14334:	cmp	r4, r2
   14338:	bne	14298 <__assert_fail@plt+0x2ff0>
   1433c:	b	1422c <__assert_fail@plt+0x2f84>
   14340:	mov	r3, #2
   14344:	ldr	fp, [sp, #100]	; 0x64
   14348:	str	r3, [sp, #176]	; 0xb0
   1434c:	ldr	sl, [sp, #104]	; 0x68
   14350:	b	13814 <__assert_fail@plt+0x256c>
   14354:	ldr	r2, [sp, #52]	; 0x34
   14358:	mov	fp, r9
   1435c:	ldr	r3, [sp, #60]	; 0x3c
   14360:	and	r3, r3, r2
   14364:	str	r3, [sp, #60]	; 0x3c
   14368:	b	13814 <__assert_fail@plt+0x256c>
   1436c:	cmp	sl, r4
   14370:	movhi	r2, fp
   14374:	bhi	136ec <__assert_fail@plt+0x2444>
   14378:	mov	r2, r4
   1437c:	b	136fc <__assert_fail@plt+0x2454>
   14380:	mov	r6, r3
   14384:	mov	r5, #63	; 0x3f
   14388:	b	137bc <__assert_fail@plt+0x2514>
   1438c:	ldr	r8, [sp, #36]	; 0x24
   14390:	ldr	r6, [sp, #100]	; 0x64
   14394:	b	13668 <__assert_fail@plt+0x23c0>
   14398:	mov	fp, r9
   1439c:	ldr	r8, [sp, #36]	; 0x24
   143a0:	ldr	r3, [sp, #52]	; 0x34
   143a4:	str	r3, [sp, #60]	; 0x3c
   143a8:	b	13814 <__assert_fail@plt+0x256c>
   143ac:	ldr	r8, [sp, #36]	; 0x24
   143b0:	ldr	r6, [sp, #100]	; 0x64
   143b4:	b	13500 <__assert_fail@plt+0x2258>
   143b8:	mov	r3, #0
   143bc:	add	r4, r4, #4
   143c0:	mov	fp, r2
   143c4:	mov	r6, r3
   143c8:	mov	r5, #48	; 0x30
   143cc:	b	13658 <__assert_fail@plt+0x23b0>
   143d0:	mov	r6, r3
   143d4:	b	13e54 <__assert_fail@plt+0x2bac>
   143d8:	mov	r3, #1
   143dc:	movw	r2, #48448	; 0xbd40
   143e0:	movt	r2, #2
   143e4:	mov	r4, r3
   143e8:	mov	r9, sl
   143ec:	str	r3, [sp, #32]
   143f0:	str	sl, [sp, #44]	; 0x2c
   143f4:	str	r3, [sp, #48]	; 0x30
   143f8:	str	sl, [sp, #52]	; 0x34
   143fc:	str	r3, [sp, #56]	; 0x38
   14400:	str	r3, [sp, #60]	; 0x3c
   14404:	str	sl, [sp, #64]	; 0x40
   14408:	str	sl, [sp, #68]	; 0x44
   1440c:	str	r2, [sp, #72]	; 0x48
   14410:	str	sl, [sp, #80]	; 0x50
   14414:	str	sl, [sp, #84]	; 0x54
   14418:	str	sl, [sp, #88]	; 0x58
   1441c:	b	12f0c <__assert_fail@plt+0x1c64>
   14420:	mov	r3, #0
   14424:	mov	r5, #48	; 0x30
   14428:	mov	r6, r3
   1442c:	b	13658 <__assert_fail@plt+0x23b0>
   14430:	cmp	sl, r4
   14434:	mov	r5, #48	; 0x30
   14438:	movhi	r3, #48	; 0x30
   1443c:	strbhi	r3, [r9, r4]
   14440:	add	r3, r2, #2
   14444:	add	r4, r2, #3
   14448:	cmp	sl, r3
   1444c:	movhi	r1, #48	; 0x30
   14450:	strbhi	r1, [r9, r3]
   14454:	mov	r3, #0
   14458:	b	13734 <__assert_fail@plt+0x248c>
   1445c:	ldr	r3, [sp, #48]	; 0x30
   14460:	str	r3, [sp, #40]	; 0x28
   14464:	b	13d40 <__assert_fail@plt+0x2a98>
   14468:	ldr	r2, [sp, #28]
   1446c:	ldrb	r2, [r2, r3]
   14470:	sub	r1, r2, #33	; 0x21
   14474:	cmp	r1, #29
   14478:	ldrls	pc, [pc, r1, lsl #2]
   1447c:	b	137b8 <__assert_fail@plt+0x2510>
   14480:	strdeq	r4, [r1], -r8
   14484:			; <UNDEFINED> instruction: 0x000137b8
   14488:			; <UNDEFINED> instruction: 0x000137b8
   1448c:			; <UNDEFINED> instruction: 0x000137b8
   14490:			; <UNDEFINED> instruction: 0x000137b8
   14494:			; <UNDEFINED> instruction: 0x000137b8
   14498:	strdeq	r4, [r1], -r8
   1449c:	strdeq	r4, [r1], -r8
   144a0:	strdeq	r4, [r1], -r8
   144a4:			; <UNDEFINED> instruction: 0x000137b8
   144a8:			; <UNDEFINED> instruction: 0x000137b8
   144ac:			; <UNDEFINED> instruction: 0x000137b8
   144b0:	strdeq	r4, [r1], -r8
   144b4:			; <UNDEFINED> instruction: 0x000137b8
   144b8:	strdeq	r4, [r1], -r8
   144bc:			; <UNDEFINED> instruction: 0x000137b8
   144c0:			; <UNDEFINED> instruction: 0x000137b8
   144c4:			; <UNDEFINED> instruction: 0x000137b8
   144c8:			; <UNDEFINED> instruction: 0x000137b8
   144cc:			; <UNDEFINED> instruction: 0x000137b8
   144d0:			; <UNDEFINED> instruction: 0x000137b8
   144d4:			; <UNDEFINED> instruction: 0x000137b8
   144d8:			; <UNDEFINED> instruction: 0x000137b8
   144dc:			; <UNDEFINED> instruction: 0x000137b8
   144e0:			; <UNDEFINED> instruction: 0x000137b8
   144e4:			; <UNDEFINED> instruction: 0x000137b8
   144e8:			; <UNDEFINED> instruction: 0x000137b8
   144ec:	strdeq	r4, [r1], -r8
   144f0:	strdeq	r4, [r1], -r8
   144f4:	strdeq	r4, [r1], -r8
   144f8:	ldr	r1, [sp, #44]	; 0x2c
   144fc:	cmp	r1, #0
   14500:	bne	14760 <__assert_fail@plt+0x34b8>
   14504:	cmp	sl, r4
   14508:	mov	r7, r3
   1450c:	movhi	r1, #63	; 0x3f
   14510:	mov	r5, r2
   14514:	mov	r3, fp
   14518:	strbhi	r1, [r9, r4]
   1451c:	add	r1, r4, #1
   14520:	cmp	sl, r1
   14524:	movhi	r0, #34	; 0x22
   14528:	strbhi	r0, [r9, r1]
   1452c:	add	r1, r4, #2
   14530:	cmp	sl, r1
   14534:	movhi	r0, #34	; 0x22
   14538:	strbhi	r0, [r9, r1]
   1453c:	add	r1, r4, #3
   14540:	add	r4, r4, #4
   14544:	cmp	sl, r1
   14548:	movhi	r0, #63	; 0x3f
   1454c:	strbhi	r0, [r9, r1]
   14550:	b	13734 <__assert_fail@plt+0x248c>
   14554:	mov	fp, r9
   14558:	b	13814 <__assert_fail@plt+0x256c>
   1455c:	ldr	r3, [sp, #188]	; 0xbc
   14560:	ldrb	r3, [r3]
   14564:	cmp	r3, #0
   14568:	beq	12ea4 <__assert_fail@plt+0x1bfc>
   1456c:	ldr	r2, [sp, #188]	; 0xbc
   14570:	cmp	sl, r4
   14574:	bls	14594 <__assert_fail@plt+0x32ec>
   14578:	strb	r3, [fp, r4]
   1457c:	add	r4, r4, #1
   14580:	ldrb	r3, [r2, #1]!
   14584:	cmp	r3, #0
   14588:	beq	12ea4 <__assert_fail@plt+0x1bfc>
   1458c:	cmp	sl, r4
   14590:	bhi	14578 <__assert_fail@plt+0x32d0>
   14594:	ldrb	r3, [r2, #1]!
   14598:	add	r4, r4, #1
   1459c:	cmp	r3, #0
   145a0:	bne	14570 <__assert_fail@plt+0x32c8>
   145a4:	b	12ea4 <__assert_fail@plt+0x1bfc>
   145a8:	add	r9, sp, #100	; 0x64
   145ac:	mov	r0, r5
   145b0:	ldr	r2, [sp, #60]	; 0x3c
   145b4:	mov	r6, #0
   145b8:	ldm	r9, {r9, sl, fp}
   145bc:	ldr	r5, [sp, #112]	; 0x70
   145c0:	ldr	r4, [sp, #116]	; 0x74
   145c4:	b	14274 <__assert_fail@plt+0x2fcc>
   145c8:	cmp	r4, r8
   145cc:	add	r9, sp, #100	; 0x64
   145d0:	mov	r1, r4
   145d4:	mov	r2, fp
   145d8:	ldm	r9, {r9, sl, fp}
   145dc:	mov	r3, r5
   145e0:	mov	r0, r5
   145e4:	ldr	r5, [sp, #112]	; 0x70
   145e8:	ldr	r4, [sp, #116]	; 0x74
   145ec:	bcs	14620 <__assert_fail@plt+0x3378>
   145f0:	ldrb	r6, [r2]
   145f4:	cmp	r6, #0
   145f8:	bne	1460c <__assert_fail@plt+0x3364>
   145fc:	b	14758 <__assert_fail@plt+0x34b0>
   14600:	ldrb	r6, [r2, #1]!
   14604:	cmp	r6, #0
   14608:	beq	146f0 <__assert_fail@plt+0x3448>
   1460c:	add	r3, r3, #1
   14610:	add	r1, r7, r3
   14614:	cmp	r8, r1
   14618:	bhi	14600 <__assert_fail@plt+0x3358>
   1461c:	mov	r0, r3
   14620:	mov	r6, #0
   14624:	ldr	r2, [sp, #60]	; 0x3c
   14628:	b	14274 <__assert_fail@plt+0x2fcc>
   1462c:	mov	r3, #1
   14630:	mov	r4, #0
   14634:	mov	r9, r4
   14638:	str	r3, [sp, #32]
   1463c:	str	r3, [sp, #44]	; 0x2c
   14640:	str	r3, [sp, #48]	; 0x30
   14644:	str	r4, [sp, #52]	; 0x34
   14648:	str	r3, [sp, #56]	; 0x38
   1464c:	str	r3, [sp, #60]	; 0x3c
   14650:	str	r3, [sp, #88]	; 0x58
   14654:	movw	r3, #48448	; 0xbd40
   14658:	movt	r3, #2
   1465c:	str	r4, [sp, #64]	; 0x40
   14660:	str	r4, [sp, #68]	; 0x44
   14664:	str	r3, [sp, #72]	; 0x48
   14668:	str	r4, [sp, #80]	; 0x50
   1466c:	str	r4, [sp, #84]	; 0x54
   14670:	b	12f0c <__assert_fail@plt+0x1c64>
   14674:	mov	fp, r9
   14678:	b	13828 <__assert_fail@plt+0x2580>
   1467c:	ldr	r3, [sp, #48]	; 0x30
   14680:	b	1419c <__assert_fail@plt+0x2ef4>
   14684:	mov	r2, r3
   14688:	ldr	r3, [sp, #72]	; 0x48
   1468c:	cmp	r3, #0
   14690:	moveq	r2, #0
   14694:	andne	r2, r2, #1
   14698:	cmp	r2, #0
   1469c:	beq	146cc <__assert_fail@plt+0x3424>
   146a0:	mov	r2, r3
   146a4:	ldrb	r3, [r3]
   146a8:	cmp	r3, #0
   146ac:	beq	146cc <__assert_fail@plt+0x3424>
   146b0:	cmp	sl, r4
   146b4:	bls	146dc <__assert_fail@plt+0x3434>
   146b8:	strb	r3, [fp, r4]
   146bc:	add	r4, r4, #1
   146c0:	ldrb	r3, [r2, #1]!
   146c4:	cmp	r3, #0
   146c8:	bne	146b0 <__assert_fail@plt+0x3408>
   146cc:	cmp	sl, r4
   146d0:	movhi	r3, #0
   146d4:	strbhi	r3, [fp, r4]
   146d8:	b	13864 <__assert_fail@plt+0x25bc>
   146dc:	ldrb	r3, [r2, #1]!
   146e0:	add	r4, r4, #1
   146e4:	cmp	r3, #0
   146e8:	bne	146b0 <__assert_fail@plt+0x3408>
   146ec:	b	146cc <__assert_fail@plt+0x3424>
   146f0:	mov	r0, r3
   146f4:	ldr	r2, [sp, #60]	; 0x3c
   146f8:	b	14274 <__assert_fail@plt+0x2fcc>
   146fc:	mov	ip, #5
   14700:	mov	r3, r8
   14704:	ldr	r1, [sp, #84]	; 0x54
   14708:	str	ip, [sp]
   1470c:	ldr	r2, [sp, #180]	; 0xb4
   14710:	ldr	ip, [sp, #188]	; 0xbc
   14714:	ldr	r0, [sp, #184]	; 0xb8
   14718:	str	r2, [sp, #4]
   1471c:	ldr	r2, [sp, #28]
   14720:	str	ip, [sp, #12]
   14724:	ldr	ip, [sp, #192]	; 0xc0
   14728:	str	r0, [sp, #8]
   1472c:	mov	r0, fp
   14730:	str	ip, [sp, #16]
   14734:	bl	12de8 <__assert_fail@plt+0x1b40>
   14738:	mov	r4, r0
   1473c:	b	13864 <__assert_fail@plt+0x25bc>
   14740:	mov	r6, r3
   14744:	str	r3, [sp, #40]	; 0x28
   14748:	b	137d4 <__assert_fail@plt+0x252c>
   1474c:	mov	r3, #2
   14750:	str	r3, [sp, #176]	; 0xb0
   14754:	b	13814 <__assert_fail@plt+0x256c>
   14758:	ldr	r2, [sp, #60]	; 0x3c
   1475c:	b	14274 <__assert_fail@plt+0x2fcc>
   14760:	mov	r3, #5
   14764:	mov	fp, r9
   14768:	str	r3, [sp, #176]	; 0xb0
   1476c:	b	13828 <__assert_fail@plt+0x2580>
   14770:	mov	r1, #1
   14774:	mov	r9, #0
   14778:	mov	r3, r9
   1477c:	mov	r2, r9
   14780:	str	r1, [sp, #32]
   14784:	str	sl, [sp, #84]	; 0x54
   14788:	b	135b0 <__assert_fail@plt+0x2308>
   1478c:	mov	r3, #0
   14790:	mov	r2, #1
   14794:	mov	r9, r3
   14798:	mov	r4, r3
   1479c:	str	r2, [sp, #32]
   147a0:	strd	r2, [sp, #44]	; 0x2c
   147a4:	strd	r2, [sp, #56]	; 0x38
   147a8:	str	r3, [sp, #80]	; 0x50
   147ac:	str	r3, [sp, #84]	; 0x54
   147b0:	str	r3, [sp, #88]	; 0x58
   147b4:	movw	r3, #48468	; 0xbd54
   147b8:	movt	r3, #2
   147bc:	str	r2, [sp, #52]	; 0x34
   147c0:	str	r2, [sp, #64]	; 0x40
   147c4:	str	r2, [sp, #68]	; 0x44
   147c8:	str	r3, [sp, #72]	; 0x48
   147cc:	b	12f0c <__assert_fail@plt+0x1c64>
   147d0:	bl	1129c <abort@plt>
   147d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   147d8:	mov	r4, r0
   147dc:	mov	r5, r3
   147e0:	strd	r6, [sp, #8]
   147e4:	movw	r7, #53620	; 0xd174
   147e8:	movt	r7, #3
   147ec:	strd	r8, [sp, #16]
   147f0:	strd	sl, [sp, #24]
   147f4:	mov	sl, r1
   147f8:	mov	fp, r2
   147fc:	str	lr, [sp, #32]
   14800:	sub	sp, sp, #60	; 0x3c
   14804:	bl	111a0 <__errno_location@plt>
   14808:	mov	r8, r0
   1480c:	cmn	r4, #-2147483647	; 0x80000001
   14810:	ldr	r6, [r7]
   14814:	movne	r0, #0
   14818:	moveq	r0, #1
   1481c:	ldr	r3, [r8]
   14820:	orrs	r0, r0, r4, lsr #31
   14824:	str	r3, [sp, #28]
   14828:	bne	149b8 <__assert_fail@plt+0x3710>
   1482c:	ldr	r3, [r7, #4]
   14830:	cmp	r3, r4
   14834:	bgt	14894 <__assert_fail@plt+0x35ec>
   14838:	add	r1, r7, #8
   1483c:	sub	r2, r4, r3
   14840:	str	r3, [sp, #52]	; 0x34
   14844:	cmp	r6, r1
   14848:	add	r2, r2, #1
   1484c:	beq	14990 <__assert_fail@plt+0x36e8>
   14850:	mov	r1, #8
   14854:	mov	r0, r6
   14858:	mvn	r3, #-2147483648	; 0x80000000
   1485c:	str	r1, [sp]
   14860:	add	r1, sp, #52	; 0x34
   14864:	bl	29490 <__assert_fail@plt+0x181e8>
   14868:	mov	r6, r0
   1486c:	str	r0, [r7]
   14870:	ldr	r0, [r7, #4]
   14874:	mov	r1, #0
   14878:	ldr	r2, [sp, #52]	; 0x34
   1487c:	sub	r2, r2, r0
   14880:	add	r0, r6, r0, lsl #3
   14884:	lsl	r2, r2, #3
   14888:	bl	111c4 <memset@plt>
   1488c:	ldr	r3, [sp, #52]	; 0x34
   14890:	str	r3, [r7, #4]
   14894:	ldr	r1, [r5, #4]
   14898:	add	r0, r6, r4, lsl #3
   1489c:	add	ip, r5, #8
   148a0:	mov	r3, fp
   148a4:	mov	r2, sl
   148a8:	ldr	r7, [r0, #4]
   148ac:	str	r0, [sp, #36]	; 0x24
   148b0:	str	ip, [sp, #40]	; 0x28
   148b4:	orr	r0, r1, #1
   148b8:	ldr	r9, [r6, r4, lsl #3]
   148bc:	str	ip, [sp, #8]
   148c0:	ldr	lr, [r5, #44]	; 0x2c
   148c4:	str	r0, [sp, #4]
   148c8:	ldr	ip, [r5]
   148cc:	mov	r1, r9
   148d0:	str	ip, [sp, #32]
   148d4:	ldr	ip, [r5, #40]	; 0x28
   148d8:	str	ip, [sp, #12]
   148dc:	ldr	ip, [sp, #32]
   148e0:	str	lr, [sp, #16]
   148e4:	str	r0, [sp, #44]	; 0x2c
   148e8:	mov	r0, r7
   148ec:	str	ip, [sp]
   148f0:	bl	12de8 <__assert_fail@plt+0x1b40>
   148f4:	cmp	r9, r0
   148f8:	bhi	14968 <__assert_fail@plt+0x36c0>
   148fc:	add	r9, r0, #1
   14900:	movw	r3, #54680	; 0xd598
   14904:	movt	r3, #3
   14908:	cmp	r7, r3
   1490c:	str	r9, [r6, r4, lsl #3]
   14910:	beq	1491c <__assert_fail@plt+0x3674>
   14914:	mov	r0, r7
   14918:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1491c:	mov	r0, r9
   14920:	bl	291ec <__assert_fail@plt+0x17f44>
   14924:	ldr	ip, [r5]
   14928:	mov	r3, fp
   1492c:	mov	r2, sl
   14930:	mov	r1, r9
   14934:	mov	r7, r0
   14938:	ldr	lr, [sp, #36]	; 0x24
   1493c:	ldr	r4, [r5, #40]	; 0x28
   14940:	str	r0, [lr, #4]
   14944:	ldr	lr, [r5, #44]	; 0x2c
   14948:	str	ip, [sp]
   1494c:	ldr	ip, [sp, #44]	; 0x2c
   14950:	str	ip, [sp, #4]
   14954:	ldr	ip, [sp, #40]	; 0x28
   14958:	str	r4, [sp, #12]
   1495c:	str	lr, [sp, #16]
   14960:	str	ip, [sp, #8]
   14964:	bl	12de8 <__assert_fail@plt+0x1b40>
   14968:	ldr	r3, [sp, #28]
   1496c:	mov	r0, r7
   14970:	str	r3, [r8]
   14974:	add	sp, sp, #60	; 0x3c
   14978:	ldrd	r4, [sp]
   1497c:	ldrd	r6, [sp, #8]
   14980:	ldrd	r8, [sp, #16]
   14984:	ldrd	sl, [sp, #24]
   14988:	add	sp, sp, #32
   1498c:	pop	{pc}		; (ldr pc, [sp], #4)
   14990:	mov	r1, #8
   14994:	mvn	r3, #-2147483648	; 0x80000000
   14998:	str	r1, [sp]
   1499c:	add	r1, sp, #52	; 0x34
   149a0:	bl	29490 <__assert_fail@plt+0x181e8>
   149a4:	ldrd	r2, [r7, #8]
   149a8:	mov	r6, r0
   149ac:	str	r0, [r7]
   149b0:	strd	r2, [r0]
   149b4:	b	14870 <__assert_fail@plt+0x35c8>
   149b8:	bl	1129c <abort@plt>
   149bc:	strd	r4, [sp, #-16]!
   149c0:	mov	r5, r0
   149c4:	str	r6, [sp, #8]
   149c8:	str	lr, [sp, #12]
   149cc:	bl	111a0 <__errno_location@plt>
   149d0:	mov	r4, r0
   149d4:	cmp	r5, #0
   149d8:	ldr	r0, [pc, #32]	; 14a00 <__assert_fail@plt+0x3758>
   149dc:	mov	r1, #48	; 0x30
   149e0:	movne	r0, r5
   149e4:	ldr	r6, [r4]
   149e8:	bl	29630 <__assert_fail@plt+0x18388>
   149ec:	str	r6, [r4]
   149f0:	ldrd	r4, [sp]
   149f4:	ldr	r6, [sp, #8]
   149f8:	add	sp, sp, #12
   149fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14a00:	muleq	r3, r8, r6
   14a04:	ldr	r3, [pc, #12]	; 14a18 <__assert_fail@plt+0x3770>
   14a08:	cmp	r0, #0
   14a0c:	moveq	r0, r3
   14a10:	ldr	r0, [r0]
   14a14:	bx	lr
   14a18:	muleq	r3, r8, r6
   14a1c:	ldr	r3, [pc, #12]	; 14a30 <__assert_fail@plt+0x3788>
   14a20:	cmp	r0, #0
   14a24:	moveq	r0, r3
   14a28:	str	r1, [r0]
   14a2c:	bx	lr
   14a30:	muleq	r3, r8, r6
   14a34:	ldr	r3, [pc, #52]	; 14a70 <__assert_fail@plt+0x37c8>
   14a38:	cmp	r0, #0
   14a3c:	push	{lr}		; (str lr, [sp, #-4]!)
   14a40:	lsr	lr, r1, #5
   14a44:	and	r1, r1, #31
   14a48:	moveq	r0, r3
   14a4c:	add	r3, r0, #8
   14a50:	ldr	ip, [r3, lr, lsl #2]
   14a54:	lsr	r0, ip, r1
   14a58:	eor	r2, r2, r0
   14a5c:	and	r0, r0, #1
   14a60:	and	r2, r2, #1
   14a64:	eor	r1, ip, r2, lsl r1
   14a68:	str	r1, [r3, lr, lsl #2]
   14a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a70:	muleq	r3, r8, r6
   14a74:	ldr	r3, [pc, #16]	; 14a8c <__assert_fail@plt+0x37e4>
   14a78:	cmp	r0, #0
   14a7c:	movne	r3, r0
   14a80:	ldr	r0, [r3, #4]
   14a84:	str	r1, [r3, #4]
   14a88:	bx	lr
   14a8c:	muleq	r3, r8, r6
   14a90:	ldr	r3, [pc, #48]	; 14ac8 <__assert_fail@plt+0x3820>
   14a94:	cmp	r0, #0
   14a98:	mov	ip, #10
   14a9c:	moveq	r0, r3
   14aa0:	cmp	r2, #0
   14aa4:	cmpne	r1, #0
   14aa8:	str	ip, [r0]
   14aac:	beq	14abc <__assert_fail@plt+0x3814>
   14ab0:	str	r1, [r0, #40]	; 0x28
   14ab4:	str	r2, [r0, #44]	; 0x2c
   14ab8:	bx	lr
   14abc:	str	r4, [sp, #-8]!
   14ac0:	str	lr, [sp, #4]
   14ac4:	bl	1129c <abort@plt>
   14ac8:	muleq	r3, r8, r6
   14acc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14ad0:	strd	r6, [sp, #8]
   14ad4:	mov	r7, r0
   14ad8:	mov	r6, r1
   14adc:	strd	r8, [sp, #16]
   14ae0:	mov	r8, r2
   14ae4:	mov	r9, r3
   14ae8:	str	lr, [sp, #24]
   14aec:	sub	sp, sp, #28
   14af0:	ldr	r4, [sp, #56]	; 0x38
   14af4:	ldr	ip, [pc, #104]	; 14b64 <__assert_fail@plt+0x38bc>
   14af8:	cmp	r4, #0
   14afc:	moveq	r4, ip
   14b00:	bl	111a0 <__errno_location@plt>
   14b04:	ldr	ip, [r4, #44]	; 0x2c
   14b08:	mov	r5, r0
   14b0c:	mov	r1, r6
   14b10:	add	lr, r4, #8
   14b14:	mov	r3, r9
   14b18:	ldr	r6, [r5]
   14b1c:	mov	r2, r8
   14b20:	mov	r0, r7
   14b24:	str	ip, [sp, #16]
   14b28:	ldr	ip, [r4, #40]	; 0x28
   14b2c:	str	lr, [sp, #8]
   14b30:	str	ip, [sp, #12]
   14b34:	ldr	ip, [r4, #4]
   14b38:	str	ip, [sp, #4]
   14b3c:	ldr	ip, [r4]
   14b40:	str	ip, [sp]
   14b44:	bl	12de8 <__assert_fail@plt+0x1b40>
   14b48:	str	r6, [r5]
   14b4c:	add	sp, sp, #28
   14b50:	ldrd	r4, [sp]
   14b54:	ldrd	r6, [sp, #8]
   14b58:	ldrd	r8, [sp, #16]
   14b5c:	add	sp, sp, #24
   14b60:	pop	{pc}		; (ldr pc, [sp], #4)
   14b64:	muleq	r3, r8, r6
   14b68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b6c:	cmp	r2, #0
   14b70:	ldr	r4, [pc, #192]	; 14c38 <__assert_fail@plt+0x3990>
   14b74:	movne	r4, r2
   14b78:	strd	r6, [sp, #8]
   14b7c:	strd	r8, [sp, #16]
   14b80:	mov	r9, r1
   14b84:	mov	r8, r0
   14b88:	strd	sl, [sp, #24]
   14b8c:	str	lr, [sp, #32]
   14b90:	sub	sp, sp, #36	; 0x24
   14b94:	bl	111a0 <__errno_location@plt>
   14b98:	ldr	r5, [r4, #4]
   14b9c:	mov	r6, r0
   14ba0:	add	r7, r4, #8
   14ba4:	mov	r1, #0
   14ba8:	mov	r3, r9
   14bac:	ldr	ip, [r4, #44]	; 0x2c
   14bb0:	mov	r2, r8
   14bb4:	mov	r0, r1
   14bb8:	ldr	sl, [r6]
   14bbc:	orr	r5, r5, #1
   14bc0:	str	ip, [sp, #16]
   14bc4:	ldr	ip, [r4, #40]	; 0x28
   14bc8:	stmib	sp, {r5, r7, ip}
   14bcc:	ldr	ip, [r4]
   14bd0:	str	ip, [sp]
   14bd4:	bl	12de8 <__assert_fail@plt+0x1b40>
   14bd8:	add	r1, r0, #1
   14bdc:	mov	r0, r1
   14be0:	str	r1, [sp, #28]
   14be4:	bl	291ec <__assert_fail@plt+0x17f44>
   14be8:	ldr	ip, [r4, #44]	; 0x2c
   14bec:	mov	fp, r0
   14bf0:	mov	r3, r9
   14bf4:	mov	r2, r8
   14bf8:	ldr	r1, [sp, #28]
   14bfc:	str	ip, [sp, #16]
   14c00:	ldr	ip, [r4, #40]	; 0x28
   14c04:	stmib	sp, {r5, r7, ip}
   14c08:	ldr	ip, [r4]
   14c0c:	str	ip, [sp]
   14c10:	bl	12de8 <__assert_fail@plt+0x1b40>
   14c14:	mov	r0, fp
   14c18:	str	sl, [r6]
   14c1c:	add	sp, sp, #36	; 0x24
   14c20:	ldrd	r4, [sp]
   14c24:	ldrd	r6, [sp, #8]
   14c28:	ldrd	r8, [sp, #16]
   14c2c:	ldrd	sl, [sp, #24]
   14c30:	add	sp, sp, #32
   14c34:	pop	{pc}		; (ldr pc, [sp], #4)
   14c38:	muleq	r3, r8, r6
   14c3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c40:	cmp	r3, #0
   14c44:	ldr	r4, [pc, #220]	; 14d28 <__assert_fail@plt+0x3a80>
   14c48:	movne	r4, r3
   14c4c:	strd	r6, [sp, #8]
   14c50:	mov	r6, r2
   14c54:	strd	r8, [sp, #16]
   14c58:	mov	r9, r0
   14c5c:	strd	sl, [sp, #24]
   14c60:	mov	sl, r1
   14c64:	str	lr, [sp, #32]
   14c68:	sub	sp, sp, #44	; 0x2c
   14c6c:	bl	111a0 <__errno_location@plt>
   14c70:	ldr	r5, [r4, #4]
   14c74:	mov	r7, r0
   14c78:	mov	r1, #0
   14c7c:	add	r8, r4, #8
   14c80:	mov	r3, sl
   14c84:	ldr	ip, [r4, #44]	; 0x2c
   14c88:	mov	r2, r9
   14c8c:	mov	r0, r1
   14c90:	ldr	lr, [r7]
   14c94:	cmp	r6, r1
   14c98:	orreq	r5, r5, #1
   14c9c:	str	ip, [sp, #16]
   14ca0:	ldr	ip, [r4, #40]	; 0x28
   14ca4:	stmib	sp, {r5, r8, ip}
   14ca8:	ldr	ip, [r4]
   14cac:	str	lr, [sp, #28]
   14cb0:	str	ip, [sp]
   14cb4:	bl	12de8 <__assert_fail@plt+0x1b40>
   14cb8:	add	r1, r0, #1
   14cbc:	mov	fp, r0
   14cc0:	mov	r0, r1
   14cc4:	str	r1, [sp, #36]	; 0x24
   14cc8:	bl	291ec <__assert_fail@plt+0x17f44>
   14ccc:	ldr	ip, [r4, #44]	; 0x2c
   14cd0:	mov	r3, sl
   14cd4:	mov	r2, r9
   14cd8:	ldr	r1, [sp, #36]	; 0x24
   14cdc:	str	ip, [sp, #16]
   14ce0:	ldr	ip, [r4, #40]	; 0x28
   14ce4:	str	r0, [sp, #32]
   14ce8:	stmib	sp, {r5, r8, ip}
   14cec:	ldr	ip, [r4]
   14cf0:	str	ip, [sp]
   14cf4:	bl	12de8 <__assert_fail@plt+0x1b40>
   14cf8:	ldr	lr, [sp, #28]
   14cfc:	cmp	r6, #0
   14d00:	ldr	r0, [sp, #32]
   14d04:	str	lr, [r7]
   14d08:	strne	fp, [r6]
   14d0c:	add	sp, sp, #44	; 0x2c
   14d10:	ldrd	r4, [sp]
   14d14:	ldrd	r6, [sp, #8]
   14d18:	ldrd	r8, [sp, #16]
   14d1c:	ldrd	sl, [sp, #24]
   14d20:	add	sp, sp, #32
   14d24:	pop	{pc}		; (ldr pc, [sp], #4)
   14d28:	muleq	r3, r8, r6
   14d2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14d30:	movw	r5, #53620	; 0xd174
   14d34:	movt	r5, #3
   14d38:	ldr	r3, [r5, #4]
   14d3c:	strd	r6, [sp, #8]
   14d40:	str	r8, [sp, #16]
   14d44:	str	lr, [sp, #20]
   14d48:	ldr	r7, [r5]
   14d4c:	cmp	r3, #1
   14d50:	ble	14d74 <__assert_fail@plt+0x3acc>
   14d54:	mov	r4, #1
   14d58:	add	r6, r7, #4
   14d5c:	ldr	r0, [r6, r4, lsl #3]
   14d60:	add	r4, r4, #1
   14d64:	bl	2ad30 <__assert_fail@plt+0x19a88>
   14d68:	ldr	r3, [r5, #4]
   14d6c:	cmp	r3, r4
   14d70:	bgt	14d5c <__assert_fail@plt+0x3ab4>
   14d74:	ldr	r0, [r7, #4]
   14d78:	movw	r4, #54680	; 0xd598
   14d7c:	movt	r4, #3
   14d80:	cmp	r0, r4
   14d84:	beq	14d98 <__assert_fail@plt+0x3af0>
   14d88:	bl	2ad30 <__assert_fail@plt+0x19a88>
   14d8c:	mov	r3, #256	; 0x100
   14d90:	str	r3, [r5, #8]
   14d94:	str	r4, [r5, #12]
   14d98:	ldr	r4, [pc, #44]	; 14dcc <__assert_fail@plt+0x3b24>
   14d9c:	cmp	r7, r4
   14da0:	beq	14db0 <__assert_fail@plt+0x3b08>
   14da4:	mov	r0, r7
   14da8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   14dac:	str	r4, [r5]
   14db0:	mov	r3, #1
   14db4:	ldrd	r6, [sp, #8]
   14db8:	str	r3, [r5, #4]
   14dbc:	ldrd	r4, [sp]
   14dc0:	ldr	r8, [sp, #16]
   14dc4:	add	sp, sp, #20
   14dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dcc:	andeq	sp, r3, ip, ror r1
   14dd0:	ldr	r3, [pc, #4]	; 14ddc <__assert_fail@plt+0x3b34>
   14dd4:	mvn	r2, #0
   14dd8:	b	147d4 <__assert_fail@plt+0x352c>
   14ddc:	muleq	r3, r8, r6
   14de0:	ldr	r3, [pc]	; 14de8 <__assert_fail@plt+0x3b40>
   14de4:	b	147d4 <__assert_fail@plt+0x352c>
   14de8:	muleq	r3, r8, r6
   14dec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14df0:	movw	r4, #53620	; 0xd174
   14df4:	movt	r4, #3
   14df8:	strd	r6, [sp, #8]
   14dfc:	strd	r8, [sp, #16]
   14e00:	strd	sl, [sp, #24]
   14e04:	mov	sl, r0
   14e08:	str	lr, [sp, #32]
   14e0c:	sub	sp, sp, #44	; 0x2c
   14e10:	bl	111a0 <__errno_location@plt>
   14e14:	ldr	r3, [r0]
   14e18:	mov	r8, r0
   14e1c:	ldr	r2, [r4, #4]
   14e20:	ldr	r5, [r4]
   14e24:	str	r3, [sp, #28]
   14e28:	cmp	r2, #0
   14e2c:	bgt	14e88 <__assert_fail@plt+0x3be0>
   14e30:	add	r3, r4, #8
   14e34:	str	r2, [sp, #36]	; 0x24
   14e38:	rsb	r2, r2, #1
   14e3c:	cmp	r5, r3
   14e40:	beq	14f54 <__assert_fail@plt+0x3cac>
   14e44:	mov	r1, #8
   14e48:	mov	r0, r5
   14e4c:	mvn	r3, #-2147483648	; 0x80000000
   14e50:	str	r1, [sp]
   14e54:	add	r1, sp, #36	; 0x24
   14e58:	bl	29490 <__assert_fail@plt+0x181e8>
   14e5c:	mov	r5, r0
   14e60:	str	r0, [r4]
   14e64:	ldr	r0, [r4, #4]
   14e68:	mov	r1, #0
   14e6c:	ldr	r2, [sp, #36]	; 0x24
   14e70:	sub	r2, r2, r0
   14e74:	add	r0, r5, r0, lsl #3
   14e78:	lsl	r2, r2, #3
   14e7c:	bl	111c4 <memset@plt>
   14e80:	ldr	r3, [sp, #36]	; 0x24
   14e84:	str	r3, [r4, #4]
   14e88:	movw	r4, #54680	; 0xd598
   14e8c:	movt	r4, #3
   14e90:	ldr	r9, [r5]
   14e94:	add	fp, r4, #264	; 0x108
   14e98:	mvn	r3, #0
   14e9c:	ldr	r7, [r4, #260]	; 0x104
   14ea0:	mov	r2, sl
   14ea4:	ldr	r6, [r5, #4]
   14ea8:	str	fp, [sp, #8]
   14eac:	mov	r1, r9
   14eb0:	ldr	ip, [r4, #256]	; 0x100
   14eb4:	orr	r7, r7, #1
   14eb8:	ldr	lr, [r4, #300]	; 0x12c
   14ebc:	mov	r0, r6
   14ec0:	str	ip, [sp]
   14ec4:	str	r7, [sp, #4]
   14ec8:	str	lr, [sp, #16]
   14ecc:	ldr	ip, [r4, #296]	; 0x128
   14ed0:	str	ip, [sp, #12]
   14ed4:	bl	12de8 <__assert_fail@plt+0x1b40>
   14ed8:	cmp	r9, r0
   14edc:	bhi	14f2c <__assert_fail@plt+0x3c84>
   14ee0:	add	r9, r0, #1
   14ee4:	cmp	r6, r4
   14ee8:	str	r9, [r5]
   14eec:	beq	14ef8 <__assert_fail@plt+0x3c50>
   14ef0:	mov	r0, r6
   14ef4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   14ef8:	mov	r0, r9
   14efc:	bl	291ec <__assert_fail@plt+0x17f44>
   14f00:	ldr	r3, [r4, #256]	; 0x100
   14f04:	mov	r2, sl
   14f08:	mov	r1, r9
   14f0c:	mov	r6, r0
   14f10:	ldr	lr, [r4, #296]	; 0x128
   14f14:	ldr	ip, [r4, #300]	; 0x12c
   14f18:	str	r0, [r5, #4]
   14f1c:	stm	sp, {r3, r7, fp, lr}
   14f20:	mvn	r3, #0
   14f24:	str	ip, [sp, #16]
   14f28:	bl	12de8 <__assert_fail@plt+0x1b40>
   14f2c:	ldr	r3, [sp, #28]
   14f30:	mov	r0, r6
   14f34:	str	r3, [r8]
   14f38:	add	sp, sp, #44	; 0x2c
   14f3c:	ldrd	r4, [sp]
   14f40:	ldrd	r6, [sp, #8]
   14f44:	ldrd	r8, [sp, #16]
   14f48:	ldrd	sl, [sp, #24]
   14f4c:	add	sp, sp, #32
   14f50:	pop	{pc}		; (ldr pc, [sp], #4)
   14f54:	mov	r0, #8
   14f58:	mvn	r3, #-2147483648	; 0x80000000
   14f5c:	add	r1, sp, #36	; 0x24
   14f60:	str	r0, [sp]
   14f64:	mov	r0, #0
   14f68:	bl	29490 <__assert_fail@plt+0x181e8>
   14f6c:	ldrd	r2, [r4, #8]
   14f70:	mov	r5, r0
   14f74:	str	r0, [r4]
   14f78:	strd	r2, [r0]
   14f7c:	b	14e64 <__assert_fail@plt+0x3bbc>
   14f80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f84:	movw	r4, #53620	; 0xd174
   14f88:	movt	r4, #3
   14f8c:	strd	r6, [sp, #8]
   14f90:	strd	r8, [sp, #16]
   14f94:	strd	sl, [sp, #24]
   14f98:	mov	sl, r0
   14f9c:	mov	fp, r1
   14fa0:	str	lr, [sp, #32]
   14fa4:	sub	sp, sp, #44	; 0x2c
   14fa8:	bl	111a0 <__errno_location@plt>
   14fac:	ldr	r3, [r0]
   14fb0:	mov	r8, r0
   14fb4:	ldr	r2, [r4, #4]
   14fb8:	ldr	r5, [r4]
   14fbc:	str	r3, [sp, #28]
   14fc0:	cmp	r2, #0
   14fc4:	bgt	15020 <__assert_fail@plt+0x3d78>
   14fc8:	add	r3, r4, #8
   14fcc:	str	r2, [sp, #36]	; 0x24
   14fd0:	rsb	r2, r2, #1
   14fd4:	cmp	r5, r3
   14fd8:	beq	150fc <__assert_fail@plt+0x3e54>
   14fdc:	mov	r1, #8
   14fe0:	mov	r0, r5
   14fe4:	mvn	r3, #-2147483648	; 0x80000000
   14fe8:	str	r1, [sp]
   14fec:	add	r1, sp, #36	; 0x24
   14ff0:	bl	29490 <__assert_fail@plt+0x181e8>
   14ff4:	mov	r5, r0
   14ff8:	str	r0, [r4]
   14ffc:	ldr	r0, [r4, #4]
   15000:	mov	r1, #0
   15004:	ldr	r2, [sp, #36]	; 0x24
   15008:	sub	r2, r2, r0
   1500c:	add	r0, r5, r0, lsl #3
   15010:	lsl	r2, r2, #3
   15014:	bl	111c4 <memset@plt>
   15018:	ldr	r3, [sp, #36]	; 0x24
   1501c:	str	r3, [r4, #4]
   15020:	movw	r4, #54680	; 0xd598
   15024:	movt	r4, #3
   15028:	ldr	r9, [r5]
   1502c:	add	r0, r4, #264	; 0x108
   15030:	mov	r3, fp
   15034:	ldr	r7, [r4, #260]	; 0x104
   15038:	mov	r2, sl
   1503c:	ldr	r6, [r5, #4]
   15040:	str	r0, [sp, #8]
   15044:	mov	r1, r9
   15048:	ldr	ip, [r4, #256]	; 0x100
   1504c:	orr	r7, r7, #1
   15050:	ldr	lr, [r4, #300]	; 0x12c
   15054:	mov	r0, r6
   15058:	str	ip, [sp]
   1505c:	str	r7, [sp, #4]
   15060:	str	lr, [sp, #16]
   15064:	ldr	ip, [r4, #296]	; 0x128
   15068:	str	ip, [sp, #12]
   1506c:	bl	12de8 <__assert_fail@plt+0x1b40>
   15070:	cmp	r9, r0
   15074:	bhi	150d4 <__assert_fail@plt+0x3e2c>
   15078:	add	r9, r0, #1
   1507c:	cmp	r6, r4
   15080:	str	r9, [r5]
   15084:	beq	15090 <__assert_fail@plt+0x3de8>
   15088:	mov	r0, r6
   1508c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   15090:	mov	r0, r9
   15094:	bl	291ec <__assert_fail@plt+0x17f44>
   15098:	ldr	ip, [r4, #256]	; 0x100
   1509c:	mov	r1, r9
   150a0:	mov	r3, fp
   150a4:	mov	r2, sl
   150a8:	mov	r6, r0
   150ac:	ldr	r9, [r4, #296]	; 0x128
   150b0:	ldr	lr, [r4, #300]	; 0x12c
   150b4:	str	r0, [r5, #4]
   150b8:	str	ip, [sp]
   150bc:	ldr	ip, [pc, #100]	; 15128 <__assert_fail@plt+0x3e80>
   150c0:	str	r7, [sp, #4]
   150c4:	str	ip, [sp, #8]
   150c8:	str	r9, [sp, #12]
   150cc:	str	lr, [sp, #16]
   150d0:	bl	12de8 <__assert_fail@plt+0x1b40>
   150d4:	ldr	r3, [sp, #28]
   150d8:	mov	r0, r6
   150dc:	str	r3, [r8]
   150e0:	add	sp, sp, #44	; 0x2c
   150e4:	ldrd	r4, [sp]
   150e8:	ldrd	r6, [sp, #8]
   150ec:	ldrd	r8, [sp, #16]
   150f0:	ldrd	sl, [sp, #24]
   150f4:	add	sp, sp, #32
   150f8:	pop	{pc}		; (ldr pc, [sp], #4)
   150fc:	mov	r0, #8
   15100:	mvn	r3, #-2147483648	; 0x80000000
   15104:	add	r1, sp, #36	; 0x24
   15108:	str	r0, [sp]
   1510c:	mov	r0, #0
   15110:	bl	29490 <__assert_fail@plt+0x181e8>
   15114:	ldrd	r2, [r4, #8]
   15118:	mov	r5, r0
   1511c:	str	r0, [r4]
   15120:	strd	r2, [r0]
   15124:	b	14ffc <__assert_fail@plt+0x3d54>
   15128:	andeq	sp, r3, r0, lsr #13
   1512c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15130:	mov	r4, #0
   15134:	mov	r5, #0
   15138:	strd	r6, [sp, #8]
   1513c:	cmp	r1, #10
   15140:	str	lr, [sp, #16]
   15144:	sub	sp, sp, #100	; 0x64
   15148:	strd	r4, [sp, #48]	; 0x30
   1514c:	beq	15194 <__assert_fail@plt+0x3eec>
   15150:	mov	r3, sp
   15154:	strd	r4, [sp, #8]
   15158:	str	r1, [sp, #48]	; 0x30
   1515c:	mov	r1, r2
   15160:	mvn	r2, #0
   15164:	ldrd	r6, [sp, #48]	; 0x30
   15168:	strd	r6, [sp]
   1516c:	strd	r4, [sp, #16]
   15170:	strd	r4, [sp, #24]
   15174:	strd	r4, [sp, #32]
   15178:	strd	r4, [sp, #40]	; 0x28
   1517c:	bl	147d4 <__assert_fail@plt+0x352c>
   15180:	add	sp, sp, #100	; 0x64
   15184:	ldrd	r4, [sp]
   15188:	ldrd	r6, [sp, #8]
   1518c:	add	sp, sp, #16
   15190:	pop	{pc}		; (ldr pc, [sp], #4)
   15194:	bl	1129c <abort@plt>
   15198:	strd	r4, [sp, #-20]!	; 0xffffffec
   1519c:	mov	r4, #0
   151a0:	mov	r5, #0
   151a4:	strd	r6, [sp, #8]
   151a8:	cmp	r1, #10
   151ac:	str	lr, [sp, #16]
   151b0:	sub	sp, sp, #100	; 0x64
   151b4:	strd	r4, [sp, #48]	; 0x30
   151b8:	beq	15204 <__assert_fail@plt+0x3f5c>
   151bc:	mov	ip, r2
   151c0:	mov	r2, r3
   151c4:	strd	r4, [sp, #8]
   151c8:	str	r1, [sp, #48]	; 0x30
   151cc:	mov	r3, sp
   151d0:	mov	r1, ip
   151d4:	ldrd	r6, [sp, #48]	; 0x30
   151d8:	strd	r6, [sp]
   151dc:	strd	r4, [sp, #16]
   151e0:	strd	r4, [sp, #24]
   151e4:	strd	r4, [sp, #32]
   151e8:	strd	r4, [sp, #40]	; 0x28
   151ec:	bl	147d4 <__assert_fail@plt+0x352c>
   151f0:	add	sp, sp, #100	; 0x64
   151f4:	ldrd	r4, [sp]
   151f8:	ldrd	r6, [sp, #8]
   151fc:	add	sp, sp, #16
   15200:	pop	{pc}		; (ldr pc, [sp], #4)
   15204:	bl	1129c <abort@plt>
   15208:	mov	r2, #0
   1520c:	mov	r3, #0
   15210:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15214:	strd	r6, [sp, #8]
   15218:	cmp	r0, #10
   1521c:	strd	r8, [sp, #16]
   15220:	strd	sl, [sp, #24]
   15224:	str	lr, [sp, #32]
   15228:	sub	sp, sp, #124	; 0x7c
   1522c:	strd	r2, [sp, #72]	; 0x48
   15230:	strd	r2, [sp, #80]	; 0x50
   15234:	strd	r2, [sp, #88]	; 0x58
   15238:	strd	r2, [sp, #96]	; 0x60
   1523c:	strd	r2, [sp, #104]	; 0x68
   15240:	strd	r2, [sp, #112]	; 0x70
   15244:	beq	153e8 <__assert_fail@plt+0x4140>
   15248:	mov	r6, r1
   1524c:	movw	r4, #53620	; 0xd174
   15250:	movt	r4, #3
   15254:	str	r0, [sp, #72]	; 0x48
   15258:	ldrd	r0, [sp, #72]	; 0x48
   1525c:	strd	r0, [sp, #24]
   15260:	strd	r2, [sp, #32]
   15264:	strd	r2, [sp, #40]	; 0x28
   15268:	strd	r2, [sp, #48]	; 0x30
   1526c:	strd	r2, [sp, #56]	; 0x38
   15270:	strd	r2, [sp, #64]	; 0x40
   15274:	bl	111a0 <__errno_location@plt>
   15278:	mov	r8, r0
   1527c:	ldr	r5, [r4]
   15280:	ldr	r2, [r4, #4]
   15284:	ldr	r9, [r0]
   15288:	cmp	r2, #0
   1528c:	bgt	152e8 <__assert_fail@plt+0x4040>
   15290:	add	r3, r4, #8
   15294:	str	r2, [sp, #72]	; 0x48
   15298:	rsb	r2, r2, #1
   1529c:	cmp	r5, r3
   152a0:	beq	153bc <__assert_fail@plt+0x4114>
   152a4:	mov	r3, #8
   152a8:	mov	r0, r5
   152ac:	add	r1, sp, #72	; 0x48
   152b0:	str	r3, [sp]
   152b4:	mvn	r3, #-2147483648	; 0x80000000
   152b8:	bl	29490 <__assert_fail@plt+0x181e8>
   152bc:	mov	r5, r0
   152c0:	str	r0, [r4]
   152c4:	ldr	r0, [r4, #4]
   152c8:	mov	r1, #0
   152cc:	ldr	r2, [sp, #72]	; 0x48
   152d0:	sub	r2, r2, r0
   152d4:	add	r0, r5, r0, lsl #3
   152d8:	lsl	r2, r2, #3
   152dc:	bl	111c4 <memset@plt>
   152e0:	ldr	r3, [sp, #72]	; 0x48
   152e4:	str	r3, [r4, #4]
   152e8:	ldr	sl, [r5]
   152ec:	add	r0, sp, #32
   152f0:	mvn	r3, #0
   152f4:	mov	r2, r6
   152f8:	ldr	r7, [sp, #28]
   152fc:	ldr	r4, [r5, #4]
   15300:	mov	r1, sl
   15304:	str	r0, [sp, #8]
   15308:	ldr	lr, [sp, #24]
   1530c:	orr	r7, r7, #1
   15310:	ldr	ip, [sp, #64]	; 0x40
   15314:	mov	r0, r4
   15318:	ldr	fp, [sp, #68]	; 0x44
   1531c:	str	lr, [sp]
   15320:	str	r7, [sp, #4]
   15324:	str	ip, [sp, #12]
   15328:	str	fp, [sp, #16]
   1532c:	bl	12de8 <__assert_fail@plt+0x1b40>
   15330:	cmp	sl, r0
   15334:	bhi	15398 <__assert_fail@plt+0x40f0>
   15338:	add	sl, r0, #1
   1533c:	movw	r3, #54680	; 0xd598
   15340:	movt	r3, #3
   15344:	cmp	r4, r3
   15348:	str	sl, [r5]
   1534c:	beq	15358 <__assert_fail@plt+0x40b0>
   15350:	mov	r0, r4
   15354:	bl	2ad30 <__assert_fail@plt+0x19a88>
   15358:	mov	r0, sl
   1535c:	bl	291ec <__assert_fail@plt+0x17f44>
   15360:	ldr	r3, [sp, #24]
   15364:	mov	r2, r6
   15368:	mov	r1, sl
   1536c:	mov	r4, r0
   15370:	ldr	lr, [sp, #64]	; 0x40
   15374:	ldr	ip, [sp, #68]	; 0x44
   15378:	str	r0, [r5, #4]
   1537c:	add	r5, sp, #32
   15380:	stm	sp, {r3, r7}
   15384:	mvn	r3, #0
   15388:	str	r5, [sp, #8]
   1538c:	str	lr, [sp, #12]
   15390:	str	ip, [sp, #16]
   15394:	bl	12de8 <__assert_fail@plt+0x1b40>
   15398:	mov	r0, r4
   1539c:	str	r9, [r8]
   153a0:	add	sp, sp, #124	; 0x7c
   153a4:	ldrd	r4, [sp]
   153a8:	ldrd	r6, [sp, #8]
   153ac:	ldrd	r8, [sp, #16]
   153b0:	ldrd	sl, [sp, #24]
   153b4:	add	sp, sp, #32
   153b8:	pop	{pc}		; (ldr pc, [sp], #4)
   153bc:	mov	r0, #8
   153c0:	mvn	r3, #-2147483648	; 0x80000000
   153c4:	add	r1, sp, #72	; 0x48
   153c8:	str	r0, [sp]
   153cc:	mov	r0, #0
   153d0:	bl	29490 <__assert_fail@plt+0x181e8>
   153d4:	ldrd	r2, [r4, #8]
   153d8:	mov	r5, r0
   153dc:	str	r0, [r4]
   153e0:	strd	r2, [r0]
   153e4:	b	152c4 <__assert_fail@plt+0x401c>
   153e8:	bl	1129c <abort@plt>
   153ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153f0:	cmp	r0, #10
   153f4:	strd	r6, [sp, #8]
   153f8:	mov	r6, #0
   153fc:	mov	r7, #0
   15400:	strd	r8, [sp, #16]
   15404:	strd	sl, [sp, #24]
   15408:	str	lr, [sp, #32]
   1540c:	sub	sp, sp, #124	; 0x7c
   15410:	strd	r6, [sp, #72]	; 0x48
   15414:	strd	r6, [sp, #80]	; 0x50
   15418:	strd	r6, [sp, #88]	; 0x58
   1541c:	strd	r6, [sp, #96]	; 0x60
   15420:	strd	r6, [sp, #104]	; 0x68
   15424:	strd	r6, [sp, #112]	; 0x70
   15428:	beq	155d4 <__assert_fail@plt+0x432c>
   1542c:	mov	sl, r2
   15430:	movw	r5, #53620	; 0xd174
   15434:	movt	r5, #3
   15438:	str	r0, [sp, #72]	; 0x48
   1543c:	mov	r9, r1
   15440:	ldrd	r2, [sp, #72]	; 0x48
   15444:	strd	r2, [sp, #24]
   15448:	strd	r6, [sp, #32]
   1544c:	strd	r6, [sp, #40]	; 0x28
   15450:	strd	r6, [sp, #48]	; 0x30
   15454:	strd	r6, [sp, #56]	; 0x38
   15458:	strd	r6, [sp, #64]	; 0x40
   1545c:	bl	111a0 <__errno_location@plt>
   15460:	mov	r7, r0
   15464:	ldr	r4, [r5]
   15468:	ldr	r2, [r5, #4]
   1546c:	ldr	fp, [r0]
   15470:	cmp	r2, #0
   15474:	bgt	154d0 <__assert_fail@plt+0x4228>
   15478:	add	r3, r5, #8
   1547c:	str	r2, [sp, #72]	; 0x48
   15480:	rsb	r2, r2, #1
   15484:	cmp	r4, r3
   15488:	beq	155a8 <__assert_fail@plt+0x4300>
   1548c:	mov	r3, #8
   15490:	mov	r0, r4
   15494:	add	r1, sp, #72	; 0x48
   15498:	str	r3, [sp]
   1549c:	mvn	r3, #-2147483648	; 0x80000000
   154a0:	bl	29490 <__assert_fail@plt+0x181e8>
   154a4:	mov	r4, r0
   154a8:	str	r0, [r5]
   154ac:	ldr	r0, [r5, #4]
   154b0:	mov	r1, #0
   154b4:	ldr	r2, [sp, #72]	; 0x48
   154b8:	sub	r2, r2, r0
   154bc:	add	r0, r4, r0, lsl #3
   154c0:	lsl	r2, r2, #3
   154c4:	bl	111c4 <memset@plt>
   154c8:	ldr	r3, [sp, #72]	; 0x48
   154cc:	str	r3, [r5, #4]
   154d0:	ldr	ip, [sp, #24]
   154d4:	add	r0, sp, #32
   154d8:	mov	r3, sl
   154dc:	mov	r2, r9
   154e0:	ldr	r6, [sp, #28]
   154e4:	ldr	r8, [r4]
   154e8:	ldr	r5, [r4, #4]
   154ec:	str	ip, [sp]
   154f0:	orr	r6, r6, #1
   154f4:	ldr	ip, [sp, #64]	; 0x40
   154f8:	mov	r1, r8
   154fc:	str	r6, [sp, #4]
   15500:	ldr	lr, [sp, #68]	; 0x44
   15504:	str	r0, [sp, #8]
   15508:	mov	r0, r5
   1550c:	str	ip, [sp, #12]
   15510:	str	lr, [sp, #16]
   15514:	bl	12de8 <__assert_fail@plt+0x1b40>
   15518:	cmp	r8, r0
   1551c:	bhi	15584 <__assert_fail@plt+0x42dc>
   15520:	add	r8, r0, #1
   15524:	movw	r3, #54680	; 0xd598
   15528:	movt	r3, #3
   1552c:	cmp	r5, r3
   15530:	str	r8, [r4]
   15534:	beq	15540 <__assert_fail@plt+0x4298>
   15538:	mov	r0, r5
   1553c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   15540:	mov	r0, r8
   15544:	bl	291ec <__assert_fail@plt+0x17f44>
   15548:	ldr	lr, [sp, #24]
   1554c:	mov	r1, r8
   15550:	mov	r3, sl
   15554:	mov	r2, r9
   15558:	mov	r5, r0
   1555c:	ldr	r8, [sp, #64]	; 0x40
   15560:	ldr	ip, [sp, #68]	; 0x44
   15564:	str	r0, [r4, #4]
   15568:	str	lr, [sp]
   1556c:	add	lr, sp, #32
   15570:	str	r6, [sp, #4]
   15574:	str	lr, [sp, #8]
   15578:	str	r8, [sp, #12]
   1557c:	str	ip, [sp, #16]
   15580:	bl	12de8 <__assert_fail@plt+0x1b40>
   15584:	mov	r0, r5
   15588:	str	fp, [r7]
   1558c:	add	sp, sp, #124	; 0x7c
   15590:	ldrd	r4, [sp]
   15594:	ldrd	r6, [sp, #8]
   15598:	ldrd	r8, [sp, #16]
   1559c:	ldrd	sl, [sp, #24]
   155a0:	add	sp, sp, #32
   155a4:	pop	{pc}		; (ldr pc, [sp], #4)
   155a8:	mov	r0, #8
   155ac:	mvn	r3, #-2147483648	; 0x80000000
   155b0:	add	r1, sp, #72	; 0x48
   155b4:	str	r0, [sp]
   155b8:	mov	r0, #0
   155bc:	bl	29490 <__assert_fail@plt+0x181e8>
   155c0:	ldrd	r2, [r5, #8]
   155c4:	mov	r4, r0
   155c8:	str	r0, [r5]
   155cc:	strd	r2, [r0]
   155d0:	b	154ac <__assert_fail@plt+0x4204>
   155d4:	bl	1129c <abort@plt>
   155d8:	ldr	r3, [pc, #492]	; 157cc <__assert_fail@plt+0x4524>
   155dc:	lsr	ip, r2, #5
   155e0:	and	r2, r2, #31
   155e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   155e8:	movw	r5, #53620	; 0xd174
   155ec:	movt	r5, #3
   155f0:	strd	r6, [sp, #8]
   155f4:	strd	r8, [sp, #16]
   155f8:	strd	sl, [sp, #24]
   155fc:	mov	sl, r0
   15600:	mov	fp, r1
   15604:	ldrd	r0, [r3]
   15608:	str	lr, [sp, #32]
   1560c:	sub	sp, sp, #92	; 0x5c
   15610:	ldrd	r8, [r3, #8]
   15614:	add	r6, sp, #48	; 0x30
   15618:	strd	r0, [sp, #40]	; 0x28
   1561c:	ldrd	r0, [r3, #16]
   15620:	strd	r8, [sp, #48]	; 0x30
   15624:	ldrd	r8, [r3, #24]
   15628:	strd	r0, [sp, #56]	; 0x38
   1562c:	ldrd	r0, [r3, #32]
   15630:	strd	r8, [sp, #64]	; 0x40
   15634:	ldrd	r8, [r3, #40]	; 0x28
   15638:	strd	r0, [sp, #72]	; 0x48
   1563c:	strd	r8, [sp, #80]	; 0x50
   15640:	ldr	r3, [r6, ip, lsl #2]
   15644:	mvn	r1, r3, lsr r2
   15648:	and	r1, r1, #1
   1564c:	eor	r2, r3, r1, lsl r2
   15650:	str	r2, [r6, ip, lsl #2]
   15654:	bl	111a0 <__errno_location@plt>
   15658:	ldr	r3, [r0]
   1565c:	mov	r8, r0
   15660:	ldr	r2, [r5, #4]
   15664:	ldr	r4, [r5]
   15668:	str	r3, [sp, #28]
   1566c:	cmp	r2, #0
   15670:	bgt	156cc <__assert_fail@plt+0x4424>
   15674:	add	r3, r5, #8
   15678:	str	r2, [sp, #36]	; 0x24
   1567c:	rsb	r2, r2, #1
   15680:	cmp	r4, r3
   15684:	beq	157a0 <__assert_fail@plt+0x44f8>
   15688:	mov	r1, #8
   1568c:	mov	r0, r4
   15690:	mvn	r3, #-2147483648	; 0x80000000
   15694:	str	r1, [sp]
   15698:	add	r1, sp, #36	; 0x24
   1569c:	bl	29490 <__assert_fail@plt+0x181e8>
   156a0:	mov	r4, r0
   156a4:	str	r0, [r5]
   156a8:	ldr	r0, [r5, #4]
   156ac:	mov	r1, #0
   156b0:	ldr	r2, [sp, #36]	; 0x24
   156b4:	sub	r2, r2, r0
   156b8:	add	r0, r4, r0, lsl #3
   156bc:	lsl	r2, r2, #3
   156c0:	bl	111c4 <memset@plt>
   156c4:	ldr	r3, [sp, #36]	; 0x24
   156c8:	str	r3, [r5, #4]
   156cc:	ldr	ip, [sp, #40]	; 0x28
   156d0:	mov	r3, fp
   156d4:	mov	r2, sl
   156d8:	ldr	r7, [sp, #44]	; 0x2c
   156dc:	ldr	r9, [r4]
   156e0:	ldr	r5, [r4, #4]
   156e4:	str	ip, [sp]
   156e8:	orr	r7, r7, #1
   156ec:	ldr	ip, [sp, #80]	; 0x50
   156f0:	mov	r1, r9
   156f4:	str	r7, [sp, #4]
   156f8:	ldr	lr, [sp, #84]	; 0x54
   156fc:	mov	r0, r5
   15700:	str	r6, [sp, #8]
   15704:	str	ip, [sp, #12]
   15708:	str	lr, [sp, #16]
   1570c:	bl	12de8 <__assert_fail@plt+0x1b40>
   15710:	cmp	r9, r0
   15714:	bhi	15778 <__assert_fail@plt+0x44d0>
   15718:	add	r9, r0, #1
   1571c:	movw	r3, #54680	; 0xd598
   15720:	movt	r3, #3
   15724:	cmp	r5, r3
   15728:	str	r9, [r4]
   1572c:	beq	15738 <__assert_fail@plt+0x4490>
   15730:	mov	r0, r5
   15734:	bl	2ad30 <__assert_fail@plt+0x19a88>
   15738:	mov	r0, r9
   1573c:	bl	291ec <__assert_fail@plt+0x17f44>
   15740:	mov	r1, r9
   15744:	ldr	ip, [sp, #40]	; 0x28
   15748:	mov	r3, fp
   1574c:	mov	r2, sl
   15750:	mov	r5, r0
   15754:	ldr	r9, [sp, #80]	; 0x50
   15758:	ldr	lr, [sp, #84]	; 0x54
   1575c:	str	r0, [r4, #4]
   15760:	str	ip, [sp]
   15764:	str	r7, [sp, #4]
   15768:	str	r6, [sp, #8]
   1576c:	str	r9, [sp, #12]
   15770:	str	lr, [sp, #16]
   15774:	bl	12de8 <__assert_fail@plt+0x1b40>
   15778:	ldr	r3, [sp, #28]
   1577c:	mov	r0, r5
   15780:	str	r3, [r8]
   15784:	add	sp, sp, #92	; 0x5c
   15788:	ldrd	r4, [sp]
   1578c:	ldrd	r6, [sp, #8]
   15790:	ldrd	r8, [sp, #16]
   15794:	ldrd	sl, [sp, #24]
   15798:	add	sp, sp, #32
   1579c:	pop	{pc}		; (ldr pc, [sp], #4)
   157a0:	mov	r0, #8
   157a4:	mvn	r3, #-2147483648	; 0x80000000
   157a8:	add	r1, sp, #36	; 0x24
   157ac:	str	r0, [sp]
   157b0:	mov	r0, #0
   157b4:	bl	29490 <__assert_fail@plt+0x181e8>
   157b8:	ldrd	r2, [r5, #8]
   157bc:	mov	r4, r0
   157c0:	str	r0, [r5]
   157c4:	strd	r2, [r0]
   157c8:	b	156a8 <__assert_fail@plt+0x4400>
   157cc:	muleq	r3, r8, r6
   157d0:	ldr	ip, [pc, #476]	; 159b4 <__assert_fail@plt+0x470c>
   157d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157d8:	movw	r4, #53620	; 0xd174
   157dc:	movt	r4, #3
   157e0:	ldrd	r2, [ip, #8]
   157e4:	strd	r6, [sp, #8]
   157e8:	lsr	r7, r1, #5
   157ec:	mov	r6, r0
   157f0:	strd	r8, [sp, #16]
   157f4:	str	lr, [sp, #32]
   157f8:	and	lr, r1, #31
   157fc:	ldrd	r0, [ip]
   15800:	strd	sl, [sp, #24]
   15804:	sub	sp, sp, #84	; 0x54
   15808:	add	r5, sp, #40	; 0x28
   1580c:	strd	r0, [sp, #32]
   15810:	strd	r2, [sp, #40]	; 0x28
   15814:	ldrd	r0, [ip, #16]
   15818:	ldrd	r2, [ip, #24]
   1581c:	strd	r0, [sp, #48]	; 0x30
   15820:	ldrd	r0, [ip, #32]
   15824:	strd	r2, [sp, #56]	; 0x38
   15828:	ldrd	r2, [ip, #40]	; 0x28
   1582c:	strd	r0, [sp, #64]	; 0x40
   15830:	strd	r2, [sp, #72]	; 0x48
   15834:	ldr	r1, [r5, r7, lsl #2]
   15838:	mvn	r3, r1, lsr lr
   1583c:	and	r3, r3, #1
   15840:	eor	r1, r1, r3, lsl lr
   15844:	str	r1, [r5, r7, lsl #2]
   15848:	bl	111a0 <__errno_location@plt>
   1584c:	mov	r9, r0
   15850:	ldr	sl, [r0]
   15854:	ldr	r2, [r4, #4]
   15858:	ldr	r7, [r4]
   1585c:	cmp	r2, #0
   15860:	bgt	158bc <__assert_fail@plt+0x4614>
   15864:	add	r3, r4, #8
   15868:	str	r2, [sp, #28]
   1586c:	rsb	r2, r2, #1
   15870:	cmp	r7, r3
   15874:	beq	15988 <__assert_fail@plt+0x46e0>
   15878:	mov	r1, #8
   1587c:	mov	r0, r7
   15880:	mvn	r3, #-2147483648	; 0x80000000
   15884:	str	r1, [sp]
   15888:	add	r1, sp, #28
   1588c:	bl	29490 <__assert_fail@plt+0x181e8>
   15890:	mov	r7, r0
   15894:	str	r0, [r4]
   15898:	ldr	r0, [r4, #4]
   1589c:	mov	r1, #0
   158a0:	ldr	r2, [sp, #28]
   158a4:	sub	r2, r2, r0
   158a8:	add	r0, r7, r0, lsl #3
   158ac:	lsl	r2, r2, #3
   158b0:	bl	111c4 <memset@plt>
   158b4:	ldr	r3, [sp, #28]
   158b8:	str	r3, [r4, #4]
   158bc:	ldr	ip, [sp, #32]
   158c0:	mvn	r3, #0
   158c4:	mov	r2, r6
   158c8:	ldr	r8, [sp, #36]	; 0x24
   158cc:	ldr	fp, [r7]
   158d0:	ldr	r4, [r7, #4]
   158d4:	str	ip, [sp]
   158d8:	orr	r8, r8, #1
   158dc:	ldr	ip, [sp, #72]	; 0x48
   158e0:	mov	r1, fp
   158e4:	str	r8, [sp, #4]
   158e8:	ldr	lr, [sp, #76]	; 0x4c
   158ec:	mov	r0, r4
   158f0:	str	r5, [sp, #8]
   158f4:	str	ip, [sp, #12]
   158f8:	str	lr, [sp, #16]
   158fc:	bl	12de8 <__assert_fail@plt+0x1b40>
   15900:	cmp	fp, r0
   15904:	bhi	15964 <__assert_fail@plt+0x46bc>
   15908:	add	fp, r0, #1
   1590c:	movw	r3, #54680	; 0xd598
   15910:	movt	r3, #3
   15914:	cmp	r4, r3
   15918:	str	fp, [r7]
   1591c:	beq	15928 <__assert_fail@plt+0x4680>
   15920:	mov	r0, r4
   15924:	bl	2ad30 <__assert_fail@plt+0x19a88>
   15928:	mov	r0, fp
   1592c:	bl	291ec <__assert_fail@plt+0x17f44>
   15930:	ldr	r3, [sp, #32]
   15934:	mov	r2, r6
   15938:	mov	r1, fp
   1593c:	mov	r4, r0
   15940:	ldr	lr, [sp, #72]	; 0x48
   15944:	ldr	ip, [sp, #76]	; 0x4c
   15948:	str	r0, [r7, #4]
   1594c:	stm	sp, {r3, r8}
   15950:	mvn	r3, #0
   15954:	str	r5, [sp, #8]
   15958:	str	lr, [sp, #12]
   1595c:	str	ip, [sp, #16]
   15960:	bl	12de8 <__assert_fail@plt+0x1b40>
   15964:	mov	r0, r4
   15968:	str	sl, [r9]
   1596c:	add	sp, sp, #84	; 0x54
   15970:	ldrd	r4, [sp]
   15974:	ldrd	r6, [sp, #8]
   15978:	ldrd	r8, [sp, #16]
   1597c:	ldrd	sl, [sp, #24]
   15980:	add	sp, sp, #32
   15984:	pop	{pc}		; (ldr pc, [sp], #4)
   15988:	mov	r0, #8
   1598c:	mvn	r3, #-2147483648	; 0x80000000
   15990:	add	r1, sp, #28
   15994:	str	r0, [sp]
   15998:	mov	r0, #0
   1599c:	bl	29490 <__assert_fail@plt+0x181e8>
   159a0:	ldrd	r2, [r4, #8]
   159a4:	mov	r7, r0
   159a8:	str	r0, [r4]
   159ac:	strd	r2, [r0]
   159b0:	b	15898 <__assert_fail@plt+0x45f0>
   159b4:	muleq	r3, r8, r6
   159b8:	ldr	ip, [pc, #472]	; 15b98 <__assert_fail@plt+0x48f0>
   159bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   159c0:	mov	r5, r0
   159c4:	movw	r4, #53620	; 0xd174
   159c8:	movt	r4, #3
   159cc:	ldrd	r2, [ip]
   159d0:	ldrd	r0, [ip, #8]
   159d4:	strd	r6, [sp, #8]
   159d8:	strd	r8, [sp, #16]
   159dc:	strd	sl, [sp, #24]
   159e0:	str	lr, [sp, #32]
   159e4:	sub	sp, sp, #84	; 0x54
   159e8:	strd	r2, [sp, #32]
   159ec:	strd	r0, [sp, #40]	; 0x28
   159f0:	ldr	r6, [sp, #44]	; 0x2c
   159f4:	ldrd	r2, [ip, #16]
   159f8:	ldrd	r0, [ip, #24]
   159fc:	mvn	lr, r6
   15a00:	and	lr, lr, #67108864	; 0x4000000
   15a04:	eor	lr, lr, r6
   15a08:	ldrd	r6, [ip, #40]	; 0x28
   15a0c:	strd	r2, [sp, #48]	; 0x30
   15a10:	ldrd	r2, [ip, #32]
   15a14:	str	lr, [sp, #44]	; 0x2c
   15a18:	strd	r0, [sp, #56]	; 0x38
   15a1c:	strd	r2, [sp, #64]	; 0x40
   15a20:	strd	r6, [sp, #72]	; 0x48
   15a24:	bl	111a0 <__errno_location@plt>
   15a28:	mov	r8, r0
   15a2c:	ldr	r9, [r0]
   15a30:	ldr	r2, [r4, #4]
   15a34:	ldr	r6, [r4]
   15a38:	cmp	r2, #0
   15a3c:	bgt	15a98 <__assert_fail@plt+0x47f0>
   15a40:	add	r3, r4, #8
   15a44:	str	r2, [sp, #28]
   15a48:	rsb	r2, r2, #1
   15a4c:	cmp	r6, r3
   15a50:	beq	15b6c <__assert_fail@plt+0x48c4>
   15a54:	mov	r1, #8
   15a58:	mov	r0, r6
   15a5c:	mvn	r3, #-2147483648	; 0x80000000
   15a60:	str	r1, [sp]
   15a64:	add	r1, sp, #28
   15a68:	bl	29490 <__assert_fail@plt+0x181e8>
   15a6c:	mov	r6, r0
   15a70:	str	r0, [r4]
   15a74:	ldr	r0, [r4, #4]
   15a78:	mov	r1, #0
   15a7c:	ldr	r2, [sp, #28]
   15a80:	sub	r2, r2, r0
   15a84:	add	r0, r6, r0, lsl #3
   15a88:	lsl	r2, r2, #3
   15a8c:	bl	111c4 <memset@plt>
   15a90:	ldr	r3, [sp, #28]
   15a94:	str	r3, [r4, #4]
   15a98:	ldr	sl, [r6]
   15a9c:	add	r0, sp, #40	; 0x28
   15aa0:	mvn	r3, #0
   15aa4:	mov	r2, r5
   15aa8:	ldr	r7, [sp, #36]	; 0x24
   15aac:	ldr	r4, [r6, #4]
   15ab0:	mov	r1, sl
   15ab4:	str	r0, [sp, #8]
   15ab8:	ldr	lr, [sp, #32]
   15abc:	orr	r7, r7, #1
   15ac0:	ldr	ip, [sp, #72]	; 0x48
   15ac4:	mov	r0, r4
   15ac8:	ldr	fp, [sp, #76]	; 0x4c
   15acc:	str	lr, [sp]
   15ad0:	str	r7, [sp, #4]
   15ad4:	str	ip, [sp, #12]
   15ad8:	str	fp, [sp, #16]
   15adc:	bl	12de8 <__assert_fail@plt+0x1b40>
   15ae0:	cmp	sl, r0
   15ae4:	bhi	15b48 <__assert_fail@plt+0x48a0>
   15ae8:	add	sl, r0, #1
   15aec:	movw	r3, #54680	; 0xd598
   15af0:	movt	r3, #3
   15af4:	cmp	r4, r3
   15af8:	str	sl, [r6]
   15afc:	beq	15b08 <__assert_fail@plt+0x4860>
   15b00:	mov	r0, r4
   15b04:	bl	2ad30 <__assert_fail@plt+0x19a88>
   15b08:	mov	r0, sl
   15b0c:	bl	291ec <__assert_fail@plt+0x17f44>
   15b10:	ldr	r3, [sp, #32]
   15b14:	mov	r2, r5
   15b18:	add	r5, sp, #40	; 0x28
   15b1c:	mov	r1, sl
   15b20:	mov	r4, r0
   15b24:	ldr	lr, [sp, #72]	; 0x48
   15b28:	ldr	ip, [sp, #76]	; 0x4c
   15b2c:	str	r0, [r6, #4]
   15b30:	stm	sp, {r3, r7}
   15b34:	mvn	r3, #0
   15b38:	str	r5, [sp, #8]
   15b3c:	str	lr, [sp, #12]
   15b40:	str	ip, [sp, #16]
   15b44:	bl	12de8 <__assert_fail@plt+0x1b40>
   15b48:	mov	r0, r4
   15b4c:	str	r9, [r8]
   15b50:	add	sp, sp, #84	; 0x54
   15b54:	ldrd	r4, [sp]
   15b58:	ldrd	r6, [sp, #8]
   15b5c:	ldrd	r8, [sp, #16]
   15b60:	ldrd	sl, [sp, #24]
   15b64:	add	sp, sp, #32
   15b68:	pop	{pc}		; (ldr pc, [sp], #4)
   15b6c:	mov	r0, #8
   15b70:	mvn	r3, #-2147483648	; 0x80000000
   15b74:	add	r1, sp, #28
   15b78:	str	r0, [sp]
   15b7c:	mov	r0, #0
   15b80:	bl	29490 <__assert_fail@plt+0x181e8>
   15b84:	ldrd	r2, [r4, #8]
   15b88:	mov	r6, r0
   15b8c:	str	r0, [r4]
   15b90:	strd	r2, [r0]
   15b94:	b	15a74 <__assert_fail@plt+0x47cc>
   15b98:	muleq	r3, r8, r6
   15b9c:	ldr	ip, [pc, #480]	; 15d84 <__assert_fail@plt+0x4adc>
   15ba0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ba4:	mov	r5, r0
   15ba8:	movw	r4, #53620	; 0xd174
   15bac:	movt	r4, #3
   15bb0:	ldrd	r2, [ip]
   15bb4:	strd	r6, [sp, #8]
   15bb8:	mov	r6, r1
   15bbc:	ldrd	r0, [ip, #8]
   15bc0:	strd	r8, [sp, #16]
   15bc4:	strd	sl, [sp, #24]
   15bc8:	str	lr, [sp, #32]
   15bcc:	sub	sp, sp, #84	; 0x54
   15bd0:	ldrd	r8, [ip, #40]	; 0x28
   15bd4:	strd	r2, [sp, #32]
   15bd8:	strd	r0, [sp, #40]	; 0x28
   15bdc:	ldrd	r2, [ip, #16]
   15be0:	ldr	r7, [sp, #44]	; 0x2c
   15be4:	ldrd	r0, [ip, #24]
   15be8:	strd	r2, [sp, #48]	; 0x30
   15bec:	ldrd	r2, [ip, #32]
   15bf0:	mvn	lr, r7
   15bf4:	and	lr, lr, #67108864	; 0x4000000
   15bf8:	eor	lr, lr, r7
   15bfc:	str	lr, [sp, #44]	; 0x2c
   15c00:	strd	r0, [sp, #56]	; 0x38
   15c04:	strd	r2, [sp, #64]	; 0x40
   15c08:	strd	r8, [sp, #72]	; 0x48
   15c0c:	bl	111a0 <__errno_location@plt>
   15c10:	mov	r9, r0
   15c14:	ldr	sl, [r0]
   15c18:	ldr	r2, [r4, #4]
   15c1c:	ldr	r7, [r4]
   15c20:	cmp	r2, #0
   15c24:	bgt	15c80 <__assert_fail@plt+0x49d8>
   15c28:	add	r3, r4, #8
   15c2c:	str	r2, [sp, #28]
   15c30:	rsb	r2, r2, #1
   15c34:	cmp	r7, r3
   15c38:	beq	15d58 <__assert_fail@plt+0x4ab0>
   15c3c:	mov	r1, #8
   15c40:	mov	r0, r7
   15c44:	mvn	r3, #-2147483648	; 0x80000000
   15c48:	str	r1, [sp]
   15c4c:	add	r1, sp, #28
   15c50:	bl	29490 <__assert_fail@plt+0x181e8>
   15c54:	mov	r7, r0
   15c58:	str	r0, [r4]
   15c5c:	ldr	r0, [r4, #4]
   15c60:	mov	r1, #0
   15c64:	ldr	r2, [sp, #28]
   15c68:	sub	r2, r2, r0
   15c6c:	add	r0, r7, r0, lsl #3
   15c70:	lsl	r2, r2, #3
   15c74:	bl	111c4 <memset@plt>
   15c78:	ldr	r3, [sp, #28]
   15c7c:	str	r3, [r4, #4]
   15c80:	ldr	ip, [sp, #32]
   15c84:	add	r0, sp, #40	; 0x28
   15c88:	mov	r3, r6
   15c8c:	mov	r2, r5
   15c90:	ldr	r8, [sp, #36]	; 0x24
   15c94:	ldr	fp, [r7]
   15c98:	ldr	r4, [r7, #4]
   15c9c:	str	ip, [sp]
   15ca0:	orr	r8, r8, #1
   15ca4:	ldr	ip, [sp, #72]	; 0x48
   15ca8:	mov	r1, fp
   15cac:	str	r8, [sp, #4]
   15cb0:	ldr	lr, [sp, #76]	; 0x4c
   15cb4:	str	r0, [sp, #8]
   15cb8:	mov	r0, r4
   15cbc:	str	ip, [sp, #12]
   15cc0:	str	lr, [sp, #16]
   15cc4:	bl	12de8 <__assert_fail@plt+0x1b40>
   15cc8:	cmp	fp, r0
   15ccc:	bhi	15d34 <__assert_fail@plt+0x4a8c>
   15cd0:	add	fp, r0, #1
   15cd4:	movw	r3, #54680	; 0xd598
   15cd8:	movt	r3, #3
   15cdc:	cmp	r4, r3
   15ce0:	str	fp, [r7]
   15ce4:	beq	15cf0 <__assert_fail@plt+0x4a48>
   15ce8:	mov	r0, r4
   15cec:	bl	2ad30 <__assert_fail@plt+0x19a88>
   15cf0:	mov	r0, fp
   15cf4:	bl	291ec <__assert_fail@plt+0x17f44>
   15cf8:	ldr	lr, [sp, #32]
   15cfc:	mov	r2, r5
   15d00:	mov	r3, r6
   15d04:	mov	r1, fp
   15d08:	mov	r4, r0
   15d0c:	ldr	r5, [sp, #72]	; 0x48
   15d10:	ldr	ip, [sp, #76]	; 0x4c
   15d14:	str	r0, [r7, #4]
   15d18:	str	lr, [sp]
   15d1c:	add	lr, sp, #40	; 0x28
   15d20:	str	r8, [sp, #4]
   15d24:	str	lr, [sp, #8]
   15d28:	str	r5, [sp, #12]
   15d2c:	str	ip, [sp, #16]
   15d30:	bl	12de8 <__assert_fail@plt+0x1b40>
   15d34:	mov	r0, r4
   15d38:	str	sl, [r9]
   15d3c:	add	sp, sp, #84	; 0x54
   15d40:	ldrd	r4, [sp]
   15d44:	ldrd	r6, [sp, #8]
   15d48:	ldrd	r8, [sp, #16]
   15d4c:	ldrd	sl, [sp, #24]
   15d50:	add	sp, sp, #32
   15d54:	pop	{pc}		; (ldr pc, [sp], #4)
   15d58:	mov	r0, #8
   15d5c:	mvn	r3, #-2147483648	; 0x80000000
   15d60:	add	r1, sp, #28
   15d64:	str	r0, [sp]
   15d68:	mov	r0, #0
   15d6c:	bl	29490 <__assert_fail@plt+0x181e8>
   15d70:	ldrd	r2, [r4, #8]
   15d74:	mov	r7, r0
   15d78:	str	r0, [r4]
   15d7c:	strd	r2, [r0]
   15d80:	b	15c5c <__assert_fail@plt+0x49b4>
   15d84:	muleq	r3, r8, r6
   15d88:	strd	r4, [sp, #-12]!
   15d8c:	mov	r4, #0
   15d90:	mov	r5, #0
   15d94:	str	lr, [sp, #8]
   15d98:	sub	sp, sp, #100	; 0x64
   15d9c:	cmp	r1, #10
   15da0:	strd	r4, [sp]
   15da4:	strd	r4, [sp, #8]
   15da8:	strd	r4, [sp, #16]
   15dac:	strd	r4, [sp, #24]
   15db0:	strd	r4, [sp, #32]
   15db4:	strd	r4, [sp, #40]	; 0x28
   15db8:	beq	15de8 <__assert_fail@plt+0x4b40>
   15dbc:	mov	ip, #67108864	; 0x4000000
   15dc0:	mov	r3, sp
   15dc4:	str	r1, [sp]
   15dc8:	mov	r1, r2
   15dcc:	mvn	r2, #0
   15dd0:	str	ip, [sp, #12]
   15dd4:	bl	147d4 <__assert_fail@plt+0x352c>
   15dd8:	add	sp, sp, #100	; 0x64
   15ddc:	ldrd	r4, [sp]
   15de0:	add	sp, sp, #8
   15de4:	pop	{pc}		; (ldr pc, [sp], #4)
   15de8:	bl	1129c <abort@plt>
   15dec:	ldr	ip, [pc, #156]	; 15e90 <__assert_fail@plt+0x4be8>
   15df0:	cmp	r2, #0
   15df4:	cmpne	r1, #0
   15df8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15dfc:	strd	r6, [sp, #8]
   15e00:	mov	r6, r2
   15e04:	str	r8, [sp, #16]
   15e08:	mov	r8, r3
   15e0c:	strd	sl, [sp, #20]
   15e10:	ldrd	r4, [ip]
   15e14:	str	lr, [sp, #28]
   15e18:	sub	sp, sp, #48	; 0x30
   15e1c:	mov	lr, #10
   15e20:	ldrd	r2, [ip, #8]
   15e24:	ldrd	sl, [ip, #16]
   15e28:	strd	r4, [sp]
   15e2c:	ldrd	r4, [ip, #32]
   15e30:	str	lr, [sp]
   15e34:	strd	r2, [sp, #8]
   15e38:	strd	sl, [sp, #16]
   15e3c:	ldrd	r2, [ip, #24]
   15e40:	ldrd	sl, [ip, #40]	; 0x28
   15e44:	strd	r2, [sp, #24]
   15e48:	strd	r4, [sp, #32]
   15e4c:	strd	sl, [sp, #40]	; 0x28
   15e50:	beq	15e8c <__assert_fail@plt+0x4be4>
   15e54:	mov	r7, r1
   15e58:	mov	r3, sp
   15e5c:	mov	r1, r8
   15e60:	mvn	r2, #0
   15e64:	str	r7, [sp, #40]	; 0x28
   15e68:	str	r6, [sp, #44]	; 0x2c
   15e6c:	bl	147d4 <__assert_fail@plt+0x352c>
   15e70:	add	sp, sp, #48	; 0x30
   15e74:	ldrd	r4, [sp]
   15e78:	ldrd	r6, [sp, #8]
   15e7c:	ldr	r8, [sp, #16]
   15e80:	ldrd	sl, [sp, #20]
   15e84:	add	sp, sp, #28
   15e88:	pop	{pc}		; (ldr pc, [sp], #4)
   15e8c:	bl	1129c <abort@plt>
   15e90:	muleq	r3, r8, r6
   15e94:	ldr	ip, [pc, #156]	; 15f38 <__assert_fail@plt+0x4c90>
   15e98:	cmp	r2, #0
   15e9c:	cmpne	r1, #0
   15ea0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15ea4:	strd	r6, [sp, #8]
   15ea8:	mov	r6, r2
   15eac:	str	r8, [sp, #16]
   15eb0:	mov	r8, r3
   15eb4:	strd	sl, [sp, #20]
   15eb8:	ldrd	r4, [ip]
   15ebc:	str	lr, [sp, #28]
   15ec0:	sub	sp, sp, #48	; 0x30
   15ec4:	mov	lr, #10
   15ec8:	ldrd	r2, [ip, #8]
   15ecc:	ldrd	sl, [ip, #16]
   15ed0:	strd	r4, [sp]
   15ed4:	ldrd	r4, [ip, #32]
   15ed8:	str	lr, [sp]
   15edc:	strd	r2, [sp, #8]
   15ee0:	strd	sl, [sp, #16]
   15ee4:	ldrd	r2, [ip, #24]
   15ee8:	ldrd	sl, [ip, #40]	; 0x28
   15eec:	strd	r2, [sp, #24]
   15ef0:	strd	r4, [sp, #32]
   15ef4:	strd	sl, [sp, #40]	; 0x28
   15ef8:	beq	15f34 <__assert_fail@plt+0x4c8c>
   15efc:	ldr	r2, [sp, #80]	; 0x50
   15f00:	mov	r7, r1
   15f04:	mov	r3, sp
   15f08:	mov	r1, r8
   15f0c:	str	r7, [sp, #40]	; 0x28
   15f10:	str	r6, [sp, #44]	; 0x2c
   15f14:	bl	147d4 <__assert_fail@plt+0x352c>
   15f18:	add	sp, sp, #48	; 0x30
   15f1c:	ldrd	r4, [sp]
   15f20:	ldrd	r6, [sp, #8]
   15f24:	ldr	r8, [sp, #16]
   15f28:	ldrd	sl, [sp, #20]
   15f2c:	add	sp, sp, #28
   15f30:	pop	{pc}		; (ldr pc, [sp], #4)
   15f34:	bl	1129c <abort@plt>
   15f38:	muleq	r3, r8, r6
   15f3c:	ldr	ip, [pc, #512]	; 16144 <__assert_fail@plt+0x4e9c>
   15f40:	cmp	r0, #0
   15f44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15f48:	ldrd	r4, [ip, #16]
   15f4c:	strd	r6, [sp, #8]
   15f50:	clz	r6, r1
   15f54:	mov	r7, r1
   15f58:	strd	r8, [sp, #16]
   15f5c:	mov	r8, r0
   15f60:	lsr	r6, r6, #5
   15f64:	strd	sl, [sp, #24]
   15f68:	mov	fp, r2
   15f6c:	mov	sl, #10
   15f70:	ldrd	r2, [ip]
   15f74:	moveq	r6, #1
   15f78:	str	lr, [sp, #32]
   15f7c:	sub	sp, sp, #92	; 0x5c
   15f80:	cmp	r6, #0
   15f84:	ldrd	r0, [ip, #8]
   15f88:	strd	r2, [sp, #40]	; 0x28
   15f8c:	strd	r4, [sp, #56]	; 0x38
   15f90:	ldrd	r2, [ip, #24]
   15f94:	strd	r0, [sp, #48]	; 0x30
   15f98:	ldrd	r0, [ip, #32]
   15f9c:	str	sl, [sp, #40]	; 0x28
   15fa0:	ldrd	r4, [ip, #40]	; 0x28
   15fa4:	strd	r2, [sp, #64]	; 0x40
   15fa8:	strd	r0, [sp, #72]	; 0x48
   15fac:	strd	r4, [sp, #80]	; 0x50
   15fb0:	bne	16140 <__assert_fail@plt+0x4e98>
   15fb4:	movw	r5, #53620	; 0xd174
   15fb8:	movt	r5, #3
   15fbc:	str	r8, [sp, #80]	; 0x50
   15fc0:	str	r7, [sp, #84]	; 0x54
   15fc4:	bl	111a0 <__errno_location@plt>
   15fc8:	ldr	r3, [r0]
   15fcc:	mov	r9, r0
   15fd0:	ldr	r2, [r5, #4]
   15fd4:	ldr	r4, [r5]
   15fd8:	str	r3, [sp, #28]
   15fdc:	cmp	r2, #0
   15fe0:	movgt	r1, sl
   15fe4:	bgt	1604c <__assert_fail@plt+0x4da4>
   15fe8:	add	r3, r5, #8
   15fec:	str	r2, [sp, #36]	; 0x24
   15ff0:	rsb	r2, r2, #1
   15ff4:	cmp	r4, r3
   15ff8:	beq	16114 <__assert_fail@plt+0x4e6c>
   15ffc:	mov	r1, #8
   16000:	mov	r0, r4
   16004:	mvn	r3, #-2147483648	; 0x80000000
   16008:	str	r1, [sp]
   1600c:	add	r1, sp, #36	; 0x24
   16010:	bl	29490 <__assert_fail@plt+0x181e8>
   16014:	mov	r4, r0
   16018:	str	r0, [r5]
   1601c:	ldr	r0, [r5, #4]
   16020:	mov	r1, #0
   16024:	ldr	r2, [sp, #36]	; 0x24
   16028:	sub	r2, r2, r0
   1602c:	add	r0, r4, r0, lsl #3
   16030:	lsl	r2, r2, #3
   16034:	bl	111c4 <memset@plt>
   16038:	ldr	r3, [sp, #36]	; 0x24
   1603c:	ldr	r1, [sp, #40]	; 0x28
   16040:	ldr	r8, [sp, #80]	; 0x50
   16044:	str	r3, [r5, #4]
   16048:	ldr	r7, [sp, #84]	; 0x54
   1604c:	mvn	r3, #0
   16050:	mov	r2, fp
   16054:	ldr	r6, [sp, #44]	; 0x2c
   16058:	ldr	sl, [r4]
   1605c:	ldr	r5, [r4, #4]
   16060:	orr	r6, r6, #1
   16064:	stm	sp, {r1, r6}
   16068:	add	r1, sp, #48	; 0x30
   1606c:	str	r8, [sp, #12]
   16070:	mov	r0, r5
   16074:	str	r1, [sp, #8]
   16078:	mov	r1, sl
   1607c:	str	r7, [sp, #16]
   16080:	bl	12de8 <__assert_fail@plt+0x1b40>
   16084:	cmp	sl, r0
   16088:	bhi	160ec <__assert_fail@plt+0x4e44>
   1608c:	add	r7, r0, #1
   16090:	movw	r3, #54680	; 0xd598
   16094:	movt	r3, #3
   16098:	cmp	r5, r3
   1609c:	str	r7, [r4]
   160a0:	beq	160ac <__assert_fail@plt+0x4e04>
   160a4:	mov	r0, r5
   160a8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   160ac:	mov	r0, r7
   160b0:	bl	291ec <__assert_fail@plt+0x17f44>
   160b4:	ldr	r3, [sp, #40]	; 0x28
   160b8:	mov	r2, fp
   160bc:	mov	r1, r7
   160c0:	mov	r5, r0
   160c4:	ldr	lr, [sp, #80]	; 0x50
   160c8:	ldr	ip, [sp, #84]	; 0x54
   160cc:	str	r0, [r4, #4]
   160d0:	add	r4, sp, #48	; 0x30
   160d4:	stm	sp, {r3, r6}
   160d8:	mvn	r3, #0
   160dc:	str	r4, [sp, #8]
   160e0:	str	lr, [sp, #12]
   160e4:	str	ip, [sp, #16]
   160e8:	bl	12de8 <__assert_fail@plt+0x1b40>
   160ec:	ldr	r3, [sp, #28]
   160f0:	mov	r0, r5
   160f4:	str	r3, [r9]
   160f8:	add	sp, sp, #92	; 0x5c
   160fc:	ldrd	r4, [sp]
   16100:	ldrd	r6, [sp, #8]
   16104:	ldrd	r8, [sp, #16]
   16108:	ldrd	sl, [sp, #24]
   1610c:	add	sp, sp, #32
   16110:	pop	{pc}		; (ldr pc, [sp], #4)
   16114:	mov	r1, #8
   16118:	mvn	r3, #-2147483648	; 0x80000000
   1611c:	mov	r0, r6
   16120:	str	r1, [sp]
   16124:	add	r1, sp, #36	; 0x24
   16128:	bl	29490 <__assert_fail@plt+0x181e8>
   1612c:	ldrd	r2, [r5, #8]
   16130:	mov	r4, r0
   16134:	str	r0, [r5]
   16138:	strd	r2, [r0]
   1613c:	b	1601c <__assert_fail@plt+0x4d74>
   16140:	bl	1129c <abort@plt>
   16144:	muleq	r3, r8, r6
   16148:	ldr	ip, [pc, #536]	; 16368 <__assert_fail@plt+0x50c0>
   1614c:	cmp	r0, #0
   16150:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16154:	ldrd	r4, [ip, #16]
   16158:	strd	r6, [sp, #8]
   1615c:	mov	r6, r1
   16160:	mov	r7, r0
   16164:	strd	r8, [sp, #16]
   16168:	mov	r9, #10
   1616c:	strd	sl, [sp, #24]
   16170:	mov	sl, r2
   16174:	mov	fp, r3
   16178:	str	lr, [sp, #32]
   1617c:	clz	lr, r1
   16180:	sub	sp, sp, #92	; 0x5c
   16184:	ldrd	r2, [ip]
   16188:	lsr	lr, lr, #5
   1618c:	moveq	lr, #1
   16190:	ldrd	r0, [ip, #8]
   16194:	cmp	lr, #0
   16198:	strd	r4, [sp, #56]	; 0x38
   1619c:	ldrd	r4, [ip, #40]	; 0x28
   161a0:	str	lr, [sp, #28]
   161a4:	strd	r2, [sp, #40]	; 0x28
   161a8:	ldrd	r2, [ip, #24]
   161ac:	strd	r0, [sp, #48]	; 0x30
   161b0:	ldrd	r0, [ip, #32]
   161b4:	str	r9, [sp, #40]	; 0x28
   161b8:	strd	r2, [sp, #64]	; 0x40
   161bc:	strd	r4, [sp, #80]	; 0x50
   161c0:	strd	r0, [sp, #72]	; 0x48
   161c4:	bne	16364 <__assert_fail@plt+0x50bc>
   161c8:	movw	r5, #53620	; 0xd174
   161cc:	movt	r5, #3
   161d0:	str	r7, [sp, #80]	; 0x50
   161d4:	str	r6, [sp, #84]	; 0x54
   161d8:	bl	111a0 <__errno_location@plt>
   161dc:	ldr	r3, [r0]
   161e0:	mov	r8, r0
   161e4:	ldr	r2, [r5, #4]
   161e8:	ldr	r4, [r5]
   161ec:	str	r3, [sp, #24]
   161f0:	cmp	r2, #0
   161f4:	movgt	r1, r9
   161f8:	bgt	16260 <__assert_fail@plt+0x4fb8>
   161fc:	add	r3, r5, #8
   16200:	str	r2, [sp, #36]	; 0x24
   16204:	rsb	r2, r2, #1
   16208:	cmp	r4, r3
   1620c:	beq	16338 <__assert_fail@plt+0x5090>
   16210:	mov	r1, #8
   16214:	mov	r0, r4
   16218:	mvn	r3, #-2147483648	; 0x80000000
   1621c:	str	r1, [sp]
   16220:	add	r1, sp, #36	; 0x24
   16224:	bl	29490 <__assert_fail@plt+0x181e8>
   16228:	mov	r4, r0
   1622c:	str	r0, [r5]
   16230:	ldr	r0, [r5, #4]
   16234:	mov	r1, #0
   16238:	ldr	r2, [sp, #36]	; 0x24
   1623c:	sub	r2, r2, r0
   16240:	add	r0, r4, r0, lsl #3
   16244:	lsl	r2, r2, #3
   16248:	bl	111c4 <memset@plt>
   1624c:	ldr	r3, [sp, #36]	; 0x24
   16250:	ldr	r1, [sp, #40]	; 0x28
   16254:	ldr	r7, [sp, #80]	; 0x50
   16258:	str	r3, [r5, #4]
   1625c:	ldr	r6, [sp, #84]	; 0x54
   16260:	mov	r3, fp
   16264:	mov	r2, sl
   16268:	ldr	r0, [sp, #44]	; 0x2c
   1626c:	ldr	r9, [r4]
   16270:	ldr	r5, [r4, #4]
   16274:	orr	r0, r0, #1
   16278:	str	r1, [sp]
   1627c:	add	r1, sp, #48	; 0x30
   16280:	str	r0, [sp, #4]
   16284:	str	r1, [sp, #8]
   16288:	mov	r1, r9
   1628c:	str	r7, [sp, #12]
   16290:	str	r6, [sp, #16]
   16294:	str	r0, [sp, #28]
   16298:	mov	r0, r5
   1629c:	bl	12de8 <__assert_fail@plt+0x1b40>
   162a0:	cmp	r9, r0
   162a4:	bhi	16310 <__assert_fail@plt+0x5068>
   162a8:	add	r6, r0, #1
   162ac:	movw	r3, #54680	; 0xd598
   162b0:	movt	r3, #3
   162b4:	cmp	r5, r3
   162b8:	str	r6, [r4]
   162bc:	beq	162c8 <__assert_fail@plt+0x5020>
   162c0:	mov	r0, r5
   162c4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   162c8:	mov	r0, r6
   162cc:	bl	291ec <__assert_fail@plt+0x17f44>
   162d0:	ldr	lr, [sp, #40]	; 0x28
   162d4:	mov	r1, r6
   162d8:	mov	r3, fp
   162dc:	mov	r2, sl
   162e0:	mov	r5, r0
   162e4:	ldr	r6, [sp, #80]	; 0x50
   162e8:	ldr	ip, [sp, #84]	; 0x54
   162ec:	str	r0, [r4, #4]
   162f0:	str	lr, [sp]
   162f4:	ldr	lr, [sp, #28]
   162f8:	str	lr, [sp, #4]
   162fc:	add	lr, sp, #48	; 0x30
   16300:	str	r6, [sp, #12]
   16304:	str	lr, [sp, #8]
   16308:	str	ip, [sp, #16]
   1630c:	bl	12de8 <__assert_fail@plt+0x1b40>
   16310:	ldr	r3, [sp, #24]
   16314:	mov	r0, r5
   16318:	str	r3, [r8]
   1631c:	add	sp, sp, #92	; 0x5c
   16320:	ldrd	r4, [sp]
   16324:	ldrd	r6, [sp, #8]
   16328:	ldrd	r8, [sp, #16]
   1632c:	ldrd	sl, [sp, #24]
   16330:	add	sp, sp, #32
   16334:	pop	{pc}		; (ldr pc, [sp], #4)
   16338:	mov	r1, #8
   1633c:	mvn	r3, #-2147483648	; 0x80000000
   16340:	ldr	r0, [sp, #28]
   16344:	str	r1, [sp]
   16348:	add	r1, sp, #36	; 0x24
   1634c:	bl	29490 <__assert_fail@plt+0x181e8>
   16350:	ldrd	r2, [r5, #8]
   16354:	mov	r4, r0
   16358:	str	r0, [r5]
   1635c:	strd	r2, [r0]
   16360:	b	16230 <__assert_fail@plt+0x4f88>
   16364:	bl	1129c <abort@plt>
   16368:	muleq	r3, r8, r6
   1636c:	ldr	r3, [pc]	; 16374 <__assert_fail@plt+0x50cc>
   16370:	b	147d4 <__assert_fail@plt+0x352c>
   16374:	andeq	sp, r3, r4, lsl #3
   16378:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1637c:	movw	r4, #53620	; 0xd174
   16380:	movt	r4, #3
   16384:	strd	r6, [sp, #8]
   16388:	strd	r8, [sp, #16]
   1638c:	strd	sl, [sp, #24]
   16390:	mov	sl, r0
   16394:	mov	fp, r1
   16398:	str	lr, [sp, #32]
   1639c:	sub	sp, sp, #44	; 0x2c
   163a0:	bl	111a0 <__errno_location@plt>
   163a4:	ldr	r3, [r0]
   163a8:	mov	r8, r0
   163ac:	ldr	r2, [r4, #4]
   163b0:	ldr	r5, [r4]
   163b4:	str	r3, [sp, #28]
   163b8:	cmp	r2, #0
   163bc:	bgt	16418 <__assert_fail@plt+0x5170>
   163c0:	add	r3, r4, #8
   163c4:	str	r2, [sp, #36]	; 0x24
   163c8:	rsb	r2, r2, #1
   163cc:	cmp	r5, r3
   163d0:	beq	164f4 <__assert_fail@plt+0x524c>
   163d4:	mov	r1, #8
   163d8:	mov	r0, r5
   163dc:	mvn	r3, #-2147483648	; 0x80000000
   163e0:	str	r1, [sp]
   163e4:	add	r1, sp, #36	; 0x24
   163e8:	bl	29490 <__assert_fail@plt+0x181e8>
   163ec:	mov	r5, r0
   163f0:	str	r0, [r4]
   163f4:	ldr	r0, [r4, #4]
   163f8:	mov	r1, #0
   163fc:	ldr	r2, [sp, #36]	; 0x24
   16400:	sub	r2, r2, r0
   16404:	add	r0, r5, r0, lsl #3
   16408:	lsl	r2, r2, #3
   1640c:	bl	111c4 <memset@plt>
   16410:	ldr	r3, [sp, #36]	; 0x24
   16414:	str	r3, [r4, #4]
   16418:	ldr	ip, [r4, #16]
   1641c:	mov	r3, fp
   16420:	mov	r2, sl
   16424:	ldr	r7, [r4, #20]
   16428:	ldr	r0, [pc, #240]	; 16520 <__assert_fail@plt+0x5278>
   1642c:	ldr	r9, [r5]
   16430:	orr	r7, r7, #1
   16434:	ldr	r6, [r5, #4]
   16438:	str	ip, [sp]
   1643c:	ldr	ip, [r4, #56]	; 0x38
   16440:	mov	r1, r9
   16444:	str	r7, [sp, #4]
   16448:	ldr	lr, [r4, #60]	; 0x3c
   1644c:	str	r0, [sp, #8]
   16450:	mov	r0, r6
   16454:	str	ip, [sp, #12]
   16458:	str	lr, [sp, #16]
   1645c:	bl	12de8 <__assert_fail@plt+0x1b40>
   16460:	cmp	r9, r0
   16464:	bhi	164cc <__assert_fail@plt+0x5224>
   16468:	add	r9, r0, #1
   1646c:	movw	r3, #54680	; 0xd598
   16470:	movt	r3, #3
   16474:	cmp	r6, r3
   16478:	str	r9, [r5]
   1647c:	beq	16488 <__assert_fail@plt+0x51e0>
   16480:	mov	r0, r6
   16484:	bl	2ad30 <__assert_fail@plt+0x19a88>
   16488:	mov	r0, r9
   1648c:	bl	291ec <__assert_fail@plt+0x17f44>
   16490:	ldr	ip, [r4, #16]
   16494:	mov	r1, r9
   16498:	mov	r3, fp
   1649c:	mov	r2, sl
   164a0:	mov	r6, r0
   164a4:	ldr	r9, [r4, #56]	; 0x38
   164a8:	ldr	lr, [r4, #60]	; 0x3c
   164ac:	str	r0, [r5, #4]
   164b0:	str	ip, [sp]
   164b4:	ldr	ip, [pc, #100]	; 16520 <__assert_fail@plt+0x5278>
   164b8:	str	r7, [sp, #4]
   164bc:	str	ip, [sp, #8]
   164c0:	str	r9, [sp, #12]
   164c4:	str	lr, [sp, #16]
   164c8:	bl	12de8 <__assert_fail@plt+0x1b40>
   164cc:	ldr	r3, [sp, #28]
   164d0:	mov	r0, r6
   164d4:	str	r3, [r8]
   164d8:	add	sp, sp, #44	; 0x2c
   164dc:	ldrd	r4, [sp]
   164e0:	ldrd	r6, [sp, #8]
   164e4:	ldrd	r8, [sp, #16]
   164e8:	ldrd	sl, [sp, #24]
   164ec:	add	sp, sp, #32
   164f0:	pop	{pc}		; (ldr pc, [sp], #4)
   164f4:	mov	r0, #8
   164f8:	mvn	r3, #-2147483648	; 0x80000000
   164fc:	add	r1, sp, #36	; 0x24
   16500:	str	r0, [sp]
   16504:	mov	r0, #0
   16508:	bl	29490 <__assert_fail@plt+0x181e8>
   1650c:	ldrd	r2, [r4, #8]
   16510:	mov	r5, r0
   16514:	str	r0, [r4]
   16518:	strd	r2, [r0]
   1651c:	b	163f4 <__assert_fail@plt+0x514c>
   16520:	andeq	sp, r3, ip, lsl #3
   16524:	ldr	r3, [pc, #4]	; 16530 <__assert_fail@plt+0x5288>
   16528:	mvn	r2, #0
   1652c:	b	147d4 <__assert_fail@plt+0x352c>
   16530:	andeq	sp, r3, r4, lsl #3
   16534:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16538:	movw	r4, #53620	; 0xd174
   1653c:	movt	r4, #3
   16540:	strd	r6, [sp, #8]
   16544:	strd	r8, [sp, #16]
   16548:	strd	sl, [sp, #24]
   1654c:	mov	sl, r0
   16550:	str	lr, [sp, #32]
   16554:	sub	sp, sp, #44	; 0x2c
   16558:	bl	111a0 <__errno_location@plt>
   1655c:	ldr	r3, [r0]
   16560:	mov	r8, r0
   16564:	ldr	r2, [r4, #4]
   16568:	ldr	r5, [r4]
   1656c:	str	r3, [sp, #28]
   16570:	cmp	r2, #0
   16574:	bgt	165d0 <__assert_fail@plt+0x5328>
   16578:	add	r3, r4, #8
   1657c:	str	r2, [sp, #36]	; 0x24
   16580:	rsb	r2, r2, #1
   16584:	cmp	r5, r3
   16588:	beq	16698 <__assert_fail@plt+0x53f0>
   1658c:	mov	r1, #8
   16590:	mov	r0, r5
   16594:	mvn	r3, #-2147483648	; 0x80000000
   16598:	str	r1, [sp]
   1659c:	add	r1, sp, #36	; 0x24
   165a0:	bl	29490 <__assert_fail@plt+0x181e8>
   165a4:	mov	r5, r0
   165a8:	str	r0, [r4]
   165ac:	ldr	r0, [r4, #4]
   165b0:	mov	r1, #0
   165b4:	ldr	r2, [sp, #36]	; 0x24
   165b8:	sub	r2, r2, r0
   165bc:	add	r0, r5, r0, lsl #3
   165c0:	lsl	r2, r2, #3
   165c4:	bl	111c4 <memset@plt>
   165c8:	ldr	r3, [sp, #36]	; 0x24
   165cc:	str	r3, [r4, #4]
   165d0:	ldr	ip, [r4, #16]
   165d4:	mvn	r3, #0
   165d8:	mov	r2, sl
   165dc:	ldr	r7, [r4, #20]
   165e0:	ldr	fp, [pc, #220]	; 166c4 <__assert_fail@plt+0x541c>
   165e4:	ldr	r9, [r5]
   165e8:	orr	r7, r7, #1
   165ec:	ldr	r6, [r5, #4]
   165f0:	str	ip, [sp]
   165f4:	ldr	ip, [r4, #56]	; 0x38
   165f8:	mov	r1, r9
   165fc:	stmib	sp, {r7, fp}
   16600:	ldr	lr, [r4, #60]	; 0x3c
   16604:	mov	r0, r6
   16608:	str	ip, [sp, #12]
   1660c:	str	lr, [sp, #16]
   16610:	bl	12de8 <__assert_fail@plt+0x1b40>
   16614:	cmp	r9, r0
   16618:	bhi	16670 <__assert_fail@plt+0x53c8>
   1661c:	add	r9, r0, #1
   16620:	movw	r3, #54680	; 0xd598
   16624:	movt	r3, #3
   16628:	cmp	r6, r3
   1662c:	str	r9, [r5]
   16630:	beq	1663c <__assert_fail@plt+0x5394>
   16634:	mov	r0, r6
   16638:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1663c:	mov	r0, r9
   16640:	bl	291ec <__assert_fail@plt+0x17f44>
   16644:	ldr	r3, [r4, #16]
   16648:	mov	r2, sl
   1664c:	mov	r1, r9
   16650:	mov	r6, r0
   16654:	ldr	lr, [r4, #56]	; 0x38
   16658:	ldr	ip, [r4, #60]	; 0x3c
   1665c:	str	r0, [r5, #4]
   16660:	stm	sp, {r3, r7, fp, lr}
   16664:	mvn	r3, #0
   16668:	str	ip, [sp, #16]
   1666c:	bl	12de8 <__assert_fail@plt+0x1b40>
   16670:	ldr	r3, [sp, #28]
   16674:	mov	r0, r6
   16678:	str	r3, [r8]
   1667c:	add	sp, sp, #44	; 0x2c
   16680:	ldrd	r4, [sp]
   16684:	ldrd	r6, [sp, #8]
   16688:	ldrd	r8, [sp, #16]
   1668c:	ldrd	sl, [sp, #24]
   16690:	add	sp, sp, #32
   16694:	pop	{pc}		; (ldr pc, [sp], #4)
   16698:	mov	r0, #8
   1669c:	mvn	r3, #-2147483648	; 0x80000000
   166a0:	add	r1, sp, #36	; 0x24
   166a4:	str	r0, [sp]
   166a8:	mov	r0, #0
   166ac:	bl	29490 <__assert_fail@plt+0x181e8>
   166b0:	ldrd	r2, [r4, #8]
   166b4:	mov	r5, r0
   166b8:	str	r0, [r4]
   166bc:	strd	r2, [r0]
   166c0:	b	165ac <__assert_fail@plt+0x5304>
   166c4:	andeq	sp, r3, ip, lsl #3
   166c8:	ldr	r3, [r1, #40]	; 0x28
   166cc:	ldr	ip, [r1, #56]	; 0x38
   166d0:	cmp	ip, r3
   166d4:	ble	16798 <__assert_fail@plt+0x54f0>
   166d8:	str	r4, [sp, #-8]!
   166dc:	ldr	r4, [r1, #80]	; 0x50
   166e0:	str	lr, [sp, #4]
   166e4:	ldr	lr, [r1, #4]
   166e8:	cmp	r4, #1
   166ec:	ldrb	ip, [lr, r3]
   166f0:	strb	ip, [r0]
   166f4:	ble	16714 <__assert_fail@plt+0x546c>
   166f8:	ldr	r4, [r1, #28]
   166fc:	cmp	r3, r4
   16700:	beq	16714 <__assert_fail@plt+0x546c>
   16704:	ldr	r4, [r1, #8]
   16708:	ldr	r4, [r4, r3, lsl #2]
   1670c:	cmn	r4, #1
   16710:	beq	16758 <__assert_fail@plt+0x54b0>
   16714:	cmp	ip, #92	; 0x5c
   16718:	beq	16750 <__assert_fail@plt+0x54a8>
   1671c:	cmp	ip, #91	; 0x5b
   16720:	beq	167d8 <__assert_fail@plt+0x5530>
   16724:	cmp	ip, #93	; 0x5d
   16728:	beq	16830 <__assert_fail@plt+0x5588>
   1672c:	cmp	ip, #94	; 0x5e
   16730:	bne	16774 <__assert_fail@plt+0x54cc>
   16734:	mov	r2, #25
   16738:	mov	r3, #1
   1673c:	ldr	r4, [sp]
   16740:	add	sp, sp, #4
   16744:	strb	r2, [r0, #4]
   16748:	mov	r0, r3
   1674c:	pop	{pc}		; (ldr pc, [sp], #4)
   16750:	tst	r2, #1
   16754:	bne	167ac <__assert_fail@plt+0x5504>
   16758:	mov	r2, #1
   1675c:	mov	r3, r2
   16760:	strb	r2, [r0, #4]
   16764:	ldr	r4, [sp]
   16768:	add	sp, sp, #4
   1676c:	mov	r0, r3
   16770:	pop	{pc}		; (ldr pc, [sp], #4)
   16774:	cmp	ip, #45	; 0x2d
   16778:	bne	16758 <__assert_fail@plt+0x54b0>
   1677c:	mov	r2, #22
   16780:	mov	r3, #1
   16784:	ldr	r4, [sp]
   16788:	add	sp, sp, #4
   1678c:	strb	r2, [r0, #4]
   16790:	mov	r0, r3
   16794:	pop	{pc}		; (ldr pc, [sp], #4)
   16798:	mov	r2, #2
   1679c:	mov	r3, #0
   167a0:	strb	r2, [r0, #4]
   167a4:	mov	r0, r3
   167a8:	bx	lr
   167ac:	ldr	r2, [r1, #48]	; 0x30
   167b0:	add	r3, r3, #1
   167b4:	cmp	r3, r2
   167b8:	bge	16758 <__assert_fail@plt+0x54b0>
   167bc:	str	r3, [r1, #40]	; 0x28
   167c0:	mov	r2, #1
   167c4:	ldrb	r1, [lr, r3]
   167c8:	mov	r3, r2
   167cc:	strb	r1, [r0]
   167d0:	strb	r2, [r0, #4]
   167d4:	b	16764 <__assert_fail@plt+0x54bc>
   167d8:	ldr	r1, [r1, #48]	; 0x30
   167dc:	add	ip, r3, #1
   167e0:	cmp	ip, r1
   167e4:	bge	16818 <__assert_fail@plt+0x5570>
   167e8:	add	r3, lr, r3
   167ec:	ldrb	r3, [r3, #1]
   167f0:	cmp	r3, #58	; 0x3a
   167f4:	strb	r3, [r0]
   167f8:	beq	1685c <__assert_fail@plt+0x55b4>
   167fc:	cmp	r3, #61	; 0x3d
   16800:	beq	1684c <__assert_fail@plt+0x55a4>
   16804:	cmp	r3, #46	; 0x2e
   16808:	moveq	r2, #26
   1680c:	moveq	r3, #2
   16810:	strbeq	r2, [r0, #4]
   16814:	beq	16764 <__assert_fail@plt+0x54bc>
   16818:	mov	r2, #1
   1681c:	mov	r1, #91	; 0x5b
   16820:	mov	r3, r2
   16824:	strb	r1, [r0]
   16828:	strb	r2, [r0, #4]
   1682c:	b	16764 <__assert_fail@plt+0x54bc>
   16830:	mov	r2, #21
   16834:	mov	r3, #1
   16838:	ldr	r4, [sp]
   1683c:	add	sp, sp, #4
   16840:	strb	r2, [r0, #4]
   16844:	mov	r0, r3
   16848:	pop	{pc}		; (ldr pc, [sp], #4)
   1684c:	mov	r2, #28
   16850:	mov	r3, #2
   16854:	strb	r2, [r0, #4]
   16858:	b	16764 <__assert_fail@plt+0x54bc>
   1685c:	tst	r2, #4
   16860:	beq	16818 <__assert_fail@plt+0x5570>
   16864:	mov	r2, #30
   16868:	mov	r3, #2
   1686c:	strb	r2, [r0, #4]
   16870:	b	16764 <__assert_fail@plt+0x54bc>
   16874:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16878:	strd	r6, [sp, #8]
   1687c:	ldr	r7, [r0, #84]	; 0x54
   16880:	strd	r8, [sp, #16]
   16884:	strd	sl, [sp, #24]
   16888:	mov	fp, r1
   1688c:	str	lr, [sp, #32]
   16890:	sub	sp, sp, #52	; 0x34
   16894:	ldr	r8, [r7, #24]
   16898:	str	r3, [sp, #24]
   1689c:	add	r3, r3, r3, lsl #1
   168a0:	add	r8, r8, r3, lsl #2
   168a4:	ldr	r1, [r8, #4]
   168a8:	cmp	r1, #0
   168ac:	ble	16a60 <__assert_fail@plt+0x57b8>
   168b0:	ldr	r3, [sp, #88]	; 0x58
   168b4:	mov	r9, r2
   168b8:	mov	r2, #1
   168bc:	mov	sl, r0
   168c0:	and	r0, fp, #2
   168c4:	mov	r4, #0
   168c8:	str	r0, [sp, #12]
   168cc:	and	r0, fp, #1
   168d0:	add	r3, r3, r3, lsl r2
   168d4:	str	r0, [sp, #16]
   168d8:	lsl	r2, r2, r9
   168dc:	lsl	r3, r3, #3
   168e0:	str	r2, [sp, #20]
   168e4:	str	r3, [sp, #28]
   168e8:	mvn	r3, r2
   168ec:	str	r3, [sp, #32]
   168f0:	b	16908 <__assert_fail@plt+0x5660>
   168f4:	cmp	r3, #4
   168f8:	beq	16984 <__assert_fail@plt+0x56dc>
   168fc:	add	r4, r4, #1
   16900:	cmp	r4, r1
   16904:	bge	16a60 <__assert_fail@plt+0x57b8>
   16908:	ldr	r3, [r8, #8]
   1690c:	ldr	r2, [r7]
   16910:	ldr	r5, [r3, r4, lsl #2]
   16914:	add	r3, r2, r5, lsl #3
   16918:	ldrb	r3, [r3, #4]
   1691c:	cmp	r3, #8
   16920:	beq	1694c <__assert_fail@plt+0x56a4>
   16924:	cmp	r3, #9
   16928:	bne	168f4 <__assert_fail@plt+0x564c>
   1692c:	ldr	r3, [sp, #12]
   16930:	cmp	r3, #0
   16934:	beq	168fc <__assert_fail@plt+0x5654>
   16938:	ldr	r3, [r2, r5, lsl #3]
   1693c:	cmp	r3, r9
   16940:	bne	168fc <__assert_fail@plt+0x5654>
   16944:	mov	r0, #0
   16948:	b	16968 <__assert_fail@plt+0x56c0>
   1694c:	ldr	r3, [sp, #16]
   16950:	cmp	r3, #0
   16954:	beq	168fc <__assert_fail@plt+0x5654>
   16958:	ldr	r3, [r2, r5, lsl #3]
   1695c:	cmp	r3, r9
   16960:	bne	168fc <__assert_fail@plt+0x5654>
   16964:	mvn	r0, #0
   16968:	add	sp, sp, #52	; 0x34
   1696c:	ldrd	r4, [sp]
   16970:	ldrd	r6, [sp, #8]
   16974:	ldrd	r8, [sp, #16]
   16978:	ldrd	sl, [sp, #24]
   1697c:	add	sp, sp, #32
   16980:	pop	{pc}		; (ldr pc, [sp], #4)
   16984:	ldr	r3, [sp, #88]	; 0x58
   16988:	cmn	r3, #1
   1698c:	beq	168fc <__assert_fail@plt+0x5654>
   16990:	add	r3, r5, r5, lsl #1
   16994:	ldr	r2, [sp, #28]
   16998:	cmp	r9, #31
   1699c:	ldr	r6, [sl, #116]	; 0x74
   169a0:	lsl	r3, r3, #2
   169a4:	str	r3, [sp, #36]	; 0x24
   169a8:	add	r6, r6, r2
   169ac:	bgt	16a68 <__assert_fail@plt+0x57c0>
   169b0:	ldr	r3, [sp, #12]
   169b4:	add	r6, r6, #24
   169b8:	str	r8, [sp, #40]	; 0x28
   169bc:	str	r4, [sp, #44]	; 0x2c
   169c0:	ldr	r4, [sp, #24]
   169c4:	cmp	r3, #0
   169c8:	bne	16af8 <__assert_fail@plt+0x5850>
   169cc:	ldr	r8, [sp, #36]	; 0x24
   169d0:	ldr	r3, [r6, #-24]	; 0xffffffe8
   169d4:	cmp	r5, r3
   169d8:	bne	16a38 <__assert_fail@plt+0x5790>
   169dc:	ldr	r3, [r6, #-8]
   169e0:	mov	r2, r9
   169e4:	mov	r1, fp
   169e8:	mov	r0, sl
   169ec:	ldr	ip, [sp, #20]
   169f0:	tst	ip, r3
   169f4:	beq	16a38 <__assert_fail@plt+0x5790>
   169f8:	ldr	r3, [r7, #20]
   169fc:	add	r3, r3, r8
   16a00:	ldr	r3, [r3, #8]
   16a04:	ldr	ip, [r3]
   16a08:	cmp	r4, ip
   16a0c:	mov	r3, ip
   16a10:	beq	16aec <__assert_fail@plt+0x5844>
   16a14:	ldr	ip, [sp, #88]	; 0x58
   16a18:	str	ip, [sp]
   16a1c:	bl	16874 <__assert_fail@plt+0x55cc>
   16a20:	cmn	r0, #1
   16a24:	beq	16964 <__assert_fail@plt+0x56bc>
   16a28:	ldr	r3, [r6, #-8]
   16a2c:	ldr	r2, [sp, #32]
   16a30:	and	r3, r3, r2
   16a34:	str	r3, [r6, #-8]
   16a38:	add	r6, r6, #24
   16a3c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   16a40:	cmp	r3, #0
   16a44:	bne	169d0 <__assert_fail@plt+0x5728>
   16a48:	ldr	r8, [sp, #40]	; 0x28
   16a4c:	ldr	r4, [sp, #44]	; 0x2c
   16a50:	add	r4, r4, #1
   16a54:	ldr	r1, [r8, #4]
   16a58:	cmp	r4, r1
   16a5c:	blt	16908 <__assert_fail@plt+0x5660>
   16a60:	asr	r0, fp, #1
   16a64:	b	16968 <__assert_fail@plt+0x56c0>
   16a68:	ldr	r2, [sp, #12]
   16a6c:	add	r6, r6, #24
   16a70:	cmp	r2, #0
   16a74:	bne	16b84 <__assert_fail@plt+0x58dc>
   16a78:	str	r8, [sp, #36]	; 0x24
   16a7c:	mov	r8, r3
   16a80:	str	r4, [sp, #40]	; 0x28
   16a84:	ldr	r4, [sp, #24]
   16a88:	mov	r2, r9
   16a8c:	mov	r1, fp
   16a90:	ldr	r3, [r6, #-24]	; 0xffffffe8
   16a94:	mov	r0, sl
   16a98:	add	r6, r6, #24
   16a9c:	cmp	r5, r3
   16aa0:	bne	16ad4 <__assert_fail@plt+0x582c>
   16aa4:	ldr	r3, [r7, #20]
   16aa8:	add	r3, r3, r8
   16aac:	ldr	r3, [r3, #8]
   16ab0:	ldr	ip, [r3]
   16ab4:	cmp	r4, ip
   16ab8:	mov	r3, ip
   16abc:	beq	16aec <__assert_fail@plt+0x5844>
   16ac0:	ldr	ip, [sp, #88]	; 0x58
   16ac4:	str	ip, [sp]
   16ac8:	bl	16874 <__assert_fail@plt+0x55cc>
   16acc:	cmn	r0, #1
   16ad0:	beq	16964 <__assert_fail@plt+0x56bc>
   16ad4:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   16ad8:	cmp	r3, #0
   16adc:	bne	16a88 <__assert_fail@plt+0x57e0>
   16ae0:	ldr	r8, [sp, #36]	; 0x24
   16ae4:	ldr	r4, [sp, #40]	; 0x28
   16ae8:	b	16a50 <__assert_fail@plt+0x57a8>
   16aec:	ldr	r3, [sp, #16]
   16af0:	rsb	r0, r3, #0
   16af4:	b	16968 <__assert_fail@plt+0x56c0>
   16af8:	ldr	r8, [sp, #88]	; 0x58
   16afc:	b	16b20 <__assert_fail@plt+0x5878>
   16b00:	ldr	r3, [r6, #-8]
   16b04:	ldr	r2, [sp, #32]
   16b08:	and	r3, r3, r2
   16b0c:	str	r3, [r6, #-8]
   16b10:	add	r6, r6, #24
   16b14:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   16b18:	cmp	r3, #0
   16b1c:	beq	16a48 <__assert_fail@plt+0x57a0>
   16b20:	ldr	r3, [r6, #-24]	; 0xffffffe8
   16b24:	cmp	r3, r5
   16b28:	bne	16b10 <__assert_fail@plt+0x5868>
   16b2c:	ldr	r3, [r6, #-8]
   16b30:	mov	r2, r9
   16b34:	mov	r1, fp
   16b38:	mov	r0, sl
   16b3c:	ldr	ip, [sp, #20]
   16b40:	tst	ip, r3
   16b44:	beq	16b10 <__assert_fail@plt+0x5868>
   16b48:	ldr	r3, [r7, #20]
   16b4c:	ldr	ip, [sp, #36]	; 0x24
   16b50:	add	r3, r3, ip
   16b54:	ldr	r3, [r3, #8]
   16b58:	ldr	ip, [r3]
   16b5c:	cmp	r4, ip
   16b60:	mov	r3, ip
   16b64:	beq	16aec <__assert_fail@plt+0x5844>
   16b68:	str	r8, [sp]
   16b6c:	bl	16874 <__assert_fail@plt+0x55cc>
   16b70:	cmn	r0, #1
   16b74:	beq	16964 <__assert_fail@plt+0x56bc>
   16b78:	cmp	r0, #0
   16b7c:	bne	16b00 <__assert_fail@plt+0x5858>
   16b80:	b	16944 <__assert_fail@plt+0x569c>
   16b84:	str	r8, [sp, #40]	; 0x28
   16b88:	str	r4, [sp, #44]	; 0x2c
   16b8c:	ldr	r4, [sp, #24]
   16b90:	ldr	r8, [sp, #88]	; 0x58
   16b94:	b	16ba4 <__assert_fail@plt+0x58fc>
   16b98:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   16b9c:	cmp	r3, #0
   16ba0:	beq	16a48 <__assert_fail@plt+0x57a0>
   16ba4:	ldr	r3, [r6, #-24]	; 0xffffffe8
   16ba8:	mov	r2, r9
   16bac:	mov	r1, fp
   16bb0:	mov	r0, sl
   16bb4:	add	r6, r6, #24
   16bb8:	cmp	r5, r3
   16bbc:	bne	16b98 <__assert_fail@plt+0x58f0>
   16bc0:	ldr	r3, [r7, #20]
   16bc4:	ldr	ip, [sp, #36]	; 0x24
   16bc8:	add	r3, r3, ip
   16bcc:	ldr	r3, [r3, #8]
   16bd0:	ldr	ip, [r3]
   16bd4:	cmp	r4, ip
   16bd8:	mov	r3, ip
   16bdc:	beq	16aec <__assert_fail@plt+0x5844>
   16be0:	str	r8, [sp]
   16be4:	bl	16874 <__assert_fail@plt+0x55cc>
   16be8:	cmn	r0, #1
   16bec:	beq	16964 <__assert_fail@plt+0x56bc>
   16bf0:	cmp	r0, #0
   16bf4:	beq	16944 <__assert_fail@plt+0x569c>
   16bf8:	b	16b98 <__assert_fail@plt+0x58f0>
   16bfc:	ldr	r3, [r0, #80]	; 0x50
   16c00:	strd	r4, [sp, #-16]!
   16c04:	mov	r4, r0
   16c08:	mov	r5, r1
   16c0c:	str	r6, [sp, #8]
   16c10:	str	lr, [sp, #12]
   16c14:	cmp	r3, #1
   16c18:	ble	16c60 <__assert_fail@plt+0x59b8>
   16c1c:	cmn	r1, #-1073741823	; 0xc0000001
   16c20:	bhi	16ca0 <__assert_fail@plt+0x59f8>
   16c24:	lsl	r6, r1, #2
   16c28:	ldr	r0, [r0, #8]
   16c2c:	mov	r1, r6
   16c30:	bl	2ab84 <__assert_fail@plt+0x198dc>
   16c34:	subs	r3, r0, #0
   16c38:	beq	16ca0 <__assert_fail@plt+0x59f8>
   16c3c:	ldr	r0, [r4, #12]
   16c40:	str	r3, [r4, #8]
   16c44:	cmp	r0, #0
   16c48:	beq	16c60 <__assert_fail@plt+0x59b8>
   16c4c:	mov	r1, r6
   16c50:	bl	2ab84 <__assert_fail@plt+0x198dc>
   16c54:	cmp	r0, #0
   16c58:	beq	16ca0 <__assert_fail@plt+0x59f8>
   16c5c:	str	r0, [r4, #12]
   16c60:	ldrb	r3, [r4, #75]	; 0x4b
   16c64:	cmp	r3, #0
   16c68:	bne	16c84 <__assert_fail@plt+0x59dc>
   16c6c:	str	r5, [r4, #36]	; 0x24
   16c70:	mov	r0, #0
   16c74:	ldrd	r4, [sp]
   16c78:	ldr	r6, [sp, #8]
   16c7c:	add	sp, sp, #12
   16c80:	pop	{pc}		; (ldr pc, [sp], #4)
   16c84:	mov	r1, r5
   16c88:	ldr	r0, [r4, #4]
   16c8c:	bl	2ab84 <__assert_fail@plt+0x198dc>
   16c90:	cmp	r0, #0
   16c94:	beq	16ca0 <__assert_fail@plt+0x59f8>
   16c98:	str	r0, [r4, #4]
   16c9c:	b	16c6c <__assert_fail@plt+0x59c4>
   16ca0:	ldrd	r4, [sp]
   16ca4:	mov	r0, #12
   16ca8:	ldr	r6, [sp, #8]
   16cac:	add	sp, sp, #12
   16cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cb4:	ldr	r3, [r1, #8]
   16cb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16cbc:	mov	r4, #0
   16cc0:	mov	r5, r1
   16cc4:	strd	r6, [sp, #8]
   16cc8:	mov	r7, r2
   16ccc:	str	r8, [sp, #16]
   16cd0:	mov	r8, r0
   16cd4:	str	lr, [sp, #20]
   16cd8:	lsl	r0, r3, #2
   16cdc:	str	r2, [r1]
   16ce0:	str	r3, [r1, #16]
   16ce4:	str	r4, [r1, #20]
   16ce8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   16cec:	cmp	r0, r4
   16cf0:	str	r0, [r5, #24]
   16cf4:	beq	16dd0 <__assert_fail@plt+0x5b28>
   16cf8:	ldr	r1, [r5, #8]
   16cfc:	cmp	r1, #0
   16d00:	bgt	16d10 <__assert_fail@plt+0x5a68>
   16d04:	b	16d5c <__assert_fail@plt+0x5ab4>
   16d08:	cmp	r4, r1
   16d0c:	bge	16d5c <__assert_fail@plt+0x5ab4>
   16d10:	ldr	r2, [r5, #12]
   16d14:	ldr	r3, [r8]
   16d18:	ldr	r6, [r2, r4, lsl #2]
   16d1c:	add	r4, r4, #1
   16d20:	add	r3, r3, r6, lsl #3
   16d24:	ldrb	r3, [r3, #4]
   16d28:	tst	r3, #8
   16d2c:	bne	16d08 <__assert_fail@plt+0x5a60>
   16d30:	ldr	r3, [r5, #16]
   16d34:	ldr	r1, [r5, #20]
   16d38:	ldr	r0, [r5, #24]
   16d3c:	cmp	r3, r1
   16d40:	beq	16da8 <__assert_fail@plt+0x5b00>
   16d44:	add	r3, r1, #1
   16d48:	str	r3, [r5, #20]
   16d4c:	str	r6, [r0, r1, lsl #2]
   16d50:	ldr	r1, [r5, #8]
   16d54:	cmp	r4, r1
   16d58:	blt	16d10 <__assert_fail@plt+0x5a68>
   16d5c:	ldr	r6, [r8, #32]
   16d60:	ldr	r4, [r8, #68]	; 0x44
   16d64:	and	r7, r7, r4
   16d68:	add	r7, r7, r7, lsl #1
   16d6c:	lsl	r4, r7, #2
   16d70:	add	r7, r6, r4
   16d74:	ldr	r3, [r6, r4]
   16d78:	ldrd	r0, [r7, #4]
   16d7c:	add	r2, r3, #1
   16d80:	cmp	r0, r3
   16d84:	ble	16dd8 <__assert_fail@plt+0x5b30>
   16d88:	mov	r0, #0
   16d8c:	str	r2, [r6, r4]
   16d90:	str	r5, [r1, r3, lsl #2]
   16d94:	ldrd	r4, [sp]
   16d98:	ldrd	r6, [sp, #8]
   16d9c:	ldr	r8, [sp, #16]
   16da0:	add	sp, sp, #20
   16da4:	pop	{pc}		; (ldr pc, [sp], #4)
   16da8:	add	r1, r1, #1
   16dac:	lsl	r3, r1, #1
   16db0:	lsl	r1, r1, #3
   16db4:	str	r3, [r5, #16]
   16db8:	bl	2ab84 <__assert_fail@plt+0x198dc>
   16dbc:	cmp	r0, #0
   16dc0:	beq	16dd0 <__assert_fail@plt+0x5b28>
   16dc4:	str	r0, [r5, #24]
   16dc8:	ldr	r1, [r5, #20]
   16dcc:	b	16d44 <__assert_fail@plt+0x5a9c>
   16dd0:	mov	r0, #12
   16dd4:	b	16d94 <__assert_fail@plt+0x5aec>
   16dd8:	mov	r0, r1
   16ddc:	lsl	r1, r2, #3
   16de0:	lsl	r8, r2, #1
   16de4:	bl	2ab84 <__assert_fail@plt+0x198dc>
   16de8:	subs	r1, r0, #0
   16dec:	beq	16dd0 <__assert_fail@plt+0x5b28>
   16df0:	ldr	r3, [r6, r4]
   16df4:	str	r8, [r7, #4]
   16df8:	str	r1, [r7, #8]
   16dfc:	add	r2, r3, #1
   16e00:	b	16d88 <__assert_fail@plt+0x5ae0>
   16e04:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16e08:	mov	r5, r0
   16e0c:	ldr	r4, [r0, #28]
   16e10:	ldr	r3, [r0, #48]	; 0x30
   16e14:	strd	r6, [sp, #8]
   16e18:	strd	r8, [sp, #16]
   16e1c:	ldr	r8, [r0, #36]	; 0x24
   16e20:	str	lr, [sp, #24]
   16e24:	sub	sp, sp, #84	; 0x54
   16e28:	cmp	r8, r3
   16e2c:	movge	r8, r3
   16e30:	cmp	r8, r4
   16e34:	ble	16ec8 <__assert_fail@plt+0x5c20>
   16e38:	add	r9, r0, #16
   16e3c:	ldr	r3, [r5, #64]	; 0x40
   16e40:	sub	r2, r8, r4
   16e44:	ldrd	r0, [r9]
   16e48:	cmp	r3, #0
   16e4c:	strd	r0, [sp, #8]
   16e50:	bne	16f1c <__assert_fail@plt+0x5c74>
   16e54:	ldr	r1, [r5]
   16e58:	ldr	r3, [r5, #24]
   16e5c:	add	r3, r4, r3
   16e60:	add	r1, r1, r3
   16e64:	mov	r3, r9
   16e68:	add	r0, sp, #4
   16e6c:	bl	2addc <__assert_fail@plt+0x19b34>
   16e70:	sub	r3, r0, #1
   16e74:	cmn	r3, #3
   16e78:	bhi	16ee8 <__assert_fail@plt+0x5c40>
   16e7c:	cmn	r0, #2
   16e80:	ldrne	lr, [sp, #4]
   16e84:	beq	16fc4 <__assert_fail@plt+0x5d1c>
   16e88:	add	r2, r4, #1
   16e8c:	add	r1, r4, r0
   16e90:	lsl	r3, r4, #2
   16e94:	ldr	ip, [r5, #8]
   16e98:	cmp	r2, r1
   16e9c:	str	lr, [ip, r4, lsl #2]
   16ea0:	bge	16fb4 <__assert_fail@plt+0x5d0c>
   16ea4:	sub	r2, r0, #-1073741823	; 0xc0000001
   16ea8:	add	r3, r3, #4
   16eac:	mov	r4, r1
   16eb0:	lsl	r2, r2, #2
   16eb4:	add	r0, ip, r3
   16eb8:	mov	r1, #255	; 0xff
   16ebc:	bl	111c4 <memset@plt>
   16ec0:	cmp	r4, r8
   16ec4:	blt	16e3c <__assert_fail@plt+0x5b94>
   16ec8:	str	r4, [r5, #28]
   16ecc:	str	r4, [r5, #32]
   16ed0:	add	sp, sp, #84	; 0x54
   16ed4:	ldrd	r4, [sp]
   16ed8:	ldrd	r6, [sp, #8]
   16edc:	ldrd	r8, [sp, #16]
   16ee0:	add	sp, sp, #24
   16ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ee8:	ldr	r3, [r5]
   16eec:	mov	r0, #1
   16ef0:	ldr	r1, [r5, #24]
   16ef4:	ldr	r2, [r5, #64]	; 0x40
   16ef8:	add	r3, r3, r4
   16efc:	ldrd	r6, [sp, #8]
   16f00:	ldrb	lr, [r3, r1]
   16f04:	cmp	r2, #0
   16f08:	str	lr, [sp, #4]
   16f0c:	ldrbne	lr, [r2, lr]
   16f10:	strd	r6, [r9]
   16f14:	strne	lr, [sp, #4]
   16f18:	b	16e88 <__assert_fail@plt+0x5be0>
   16f1c:	ldr	r1, [r5, #80]	; 0x50
   16f20:	cmp	r1, #0
   16f24:	cmpgt	r2, #0
   16f28:	ble	16fac <__assert_fail@plt+0x5d04>
   16f2c:	ldr	r1, [r5]
   16f30:	ldr	r0, [r5, #4]
   16f34:	ldr	ip, [r5, #24]
   16f38:	add	r1, r1, r4
   16f3c:	ldrb	r1, [r1, ip]
   16f40:	ldrb	r1, [r3, r1]
   16f44:	strb	r1, [r0, r4]
   16f48:	ldr	r3, [r5, #80]	; 0x50
   16f4c:	strb	r1, [sp, #16]
   16f50:	cmp	r2, r3
   16f54:	movlt	r3, r2
   16f58:	cmp	r3, #1
   16f5c:	ble	16fac <__assert_fail@plt+0x5d04>
   16f60:	add	r0, sp, #16
   16f64:	mov	r1, #1
   16f68:	ldr	r3, [r5]
   16f6c:	ldr	ip, [r5, #24]
   16f70:	ldr	lr, [r5, #64]	; 0x40
   16f74:	add	r3, r3, r4
   16f78:	add	r3, r3, r1
   16f7c:	ldrb	ip, [r3, ip]
   16f80:	ldr	r3, [r5, #4]
   16f84:	ldrb	ip, [lr, ip]
   16f88:	add	r3, r3, r1
   16f8c:	add	r1, r1, #1
   16f90:	strb	ip, [r3, r4]
   16f94:	ldr	r3, [r5, #80]	; 0x50
   16f98:	strb	ip, [r0, #1]!
   16f9c:	cmp	r2, r3
   16fa0:	movlt	r3, r2
   16fa4:	cmp	r3, r1
   16fa8:	bgt	16f68 <__assert_fail@plt+0x5cc0>
   16fac:	add	r1, sp, #16
   16fb0:	b	16e64 <__assert_fail@plt+0x5bbc>
   16fb4:	cmp	r8, r2
   16fb8:	mov	r4, r2
   16fbc:	bgt	16e3c <__assert_fail@plt+0x5b94>
   16fc0:	b	16ec8 <__assert_fail@plt+0x5c20>
   16fc4:	ldr	r2, [r5, #36]	; 0x24
   16fc8:	ldr	r3, [r5, #48]	; 0x30
   16fcc:	cmp	r2, r3
   16fd0:	bge	16ee8 <__assert_fail@plt+0x5c40>
   16fd4:	ldrd	r2, [sp, #8]
   16fd8:	strd	r2, [r5, #16]
   16fdc:	b	16ec8 <__assert_fail@plt+0x5c20>
   16fe0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16fe4:	mov	r4, r0
   16fe8:	ldr	r5, [r0, #28]
   16fec:	ldr	r3, [r0, #48]	; 0x30
   16ff0:	strd	r6, [sp, #8]
   16ff4:	ldr	r6, [r0, #36]	; 0x24
   16ff8:	strd	r8, [sp, #16]
   16ffc:	strd	sl, [sp, #24]
   17000:	str	lr, [sp, #32]
   17004:	sub	sp, sp, #108	; 0x6c
   17008:	ldrb	r2, [r0, #74]	; 0x4a
   1700c:	cmp	r6, r3
   17010:	movge	r6, r3
   17014:	cmp	r2, #0
   17018:	bne	17028 <__assert_fail@plt+0x5d80>
   1701c:	ldr	r3, [r0, #64]	; 0x40
   17020:	cmp	r3, #0
   17024:	beq	17168 <__assert_fail@plt+0x5ec0>
   17028:	ldr	r7, [r4, #32]
   1702c:	cmp	r5, r6
   17030:	bge	17140 <__assert_fail@plt+0x5e98>
   17034:	add	r3, r4, #16
   17038:	sub	fp, r6, r5
   1703c:	str	r3, [sp, #20]
   17040:	add	r3, sp, #28
   17044:	str	r3, [sp, #12]
   17048:	ldrd	r0, [r4, #16]
   1704c:	ldr	r3, [r4, #64]	; 0x40
   17050:	strd	r0, [sp, #32]
   17054:	cmp	r3, #0
   17058:	bne	17338 <__assert_fail@plt+0x6090>
   1705c:	ldr	r8, [r4]
   17060:	ldr	r3, [r4, #24]
   17064:	add	r3, r7, r3
   17068:	add	r3, r8, r3
   1706c:	mov	r1, r3
   17070:	str	r3, [sp, #4]
   17074:	mov	r2, fp
   17078:	ldr	r0, [sp, #12]
   1707c:	ldr	r3, [sp, #20]
   17080:	bl	2addc <__assert_fail@plt+0x19b34>
   17084:	sub	r3, r0, #1
   17088:	mov	r8, r0
   1708c:	cmn	r3, #4
   17090:	str	r3, [sp, #8]
   17094:	bhi	173d0 <__assert_fail@plt+0x6128>
   17098:	ldr	r9, [sp, #28]
   1709c:	mov	fp, r5
   170a0:	mov	r0, r9
   170a4:	bl	11284 <towupper@plt>
   170a8:	cmp	r9, r0
   170ac:	mov	sl, r0
   170b0:	beq	173b8 <__assert_fail@plt+0x6110>
   170b4:	add	r9, sp, #40	; 0x28
   170b8:	add	r2, sp, #32
   170bc:	mov	r0, r9
   170c0:	mov	r1, sl
   170c4:	bl	10fc0 <wcrtomb@plt>
   170c8:	cmp	r8, r0
   170cc:	mov	r3, r0
   170d0:	bne	17460 <__assert_fail@plt+0x61b8>
   170d4:	ldr	r0, [r4, #4]
   170d8:	mov	r1, r9
   170dc:	mov	r2, r8
   170e0:	add	r0, r0, r5
   170e4:	bl	11038 <memcpy@plt>
   170e8:	ldrb	r2, [r4, #76]	; 0x4c
   170ec:	cmp	r2, #0
   170f0:	bne	17440 <__assert_fail@plt+0x6198>
   170f4:	add	r2, r8, r7
   170f8:	ldr	r0, [r4, #8]
   170fc:	add	r5, r5, #1
   17100:	add	ip, r8, fp
   17104:	cmp	r5, ip
   17108:	mov	r7, r2
   1710c:	lsl	r1, fp, #2
   17110:	str	sl, [r0, fp, lsl #2]
   17114:	bge	1702c <__assert_fail@plt+0x5d84>
   17118:	sub	r2, r8, #-1073741823	; 0xc0000001
   1711c:	add	r1, r1, #4
   17120:	lsl	r2, r2, #2
   17124:	add	r0, r0, r1
   17128:	mov	r1, #255	; 0xff
   1712c:	mov	r5, ip
   17130:	bl	111c4 <memset@plt>
   17134:	b	1702c <__assert_fail@plt+0x5d84>
   17138:	ldrd	r2, [sp, #32]
   1713c:	strd	r2, [r4, #16]
   17140:	mov	r0, #0
   17144:	str	r5, [r4, #28]
   17148:	str	r7, [r4, #32]
   1714c:	add	sp, sp, #108	; 0x6c
   17150:	ldrd	r4, [sp]
   17154:	ldrd	r6, [sp, #8]
   17158:	ldrd	r8, [sp, #16]
   1715c:	ldrd	sl, [sp, #24]
   17160:	add	sp, sp, #32
   17164:	pop	{pc}		; (ldr pc, [sp], #4)
   17168:	ldrb	r3, [r0, #76]	; 0x4c
   1716c:	cmp	r3, #0
   17170:	bne	17028 <__assert_fail@plt+0x5d80>
   17174:	cmp	r5, r6
   17178:	bge	173a8 <__assert_fail@plt+0x6100>
   1717c:	add	sl, r0, #16
   17180:	str	r6, [sp, #4]
   17184:	str	sl, [sp, #20]
   17188:	b	17208 <__assert_fail@plt+0x5f60>
   1718c:	add	r3, sp, #40	; 0x28
   17190:	add	r2, sp, #32
   17194:	mov	r0, r3
   17198:	mov	r1, r9
   1719c:	str	r3, [sp, #8]
   171a0:	bl	10fc0 <wcrtomb@plt>
   171a4:	cmp	r7, r0
   171a8:	bne	17390 <__assert_fail@plt+0x60e8>
   171ac:	ldr	r0, [r4, #4]
   171b0:	mov	r2, r7
   171b4:	ldr	r3, [sp, #8]
   171b8:	add	r0, r0, r5
   171bc:	mov	r1, r3
   171c0:	bl	11038 <memcpy@plt>
   171c4:	ldr	r0, [r4, #8]
   171c8:	add	r5, r5, #1
   171cc:	add	ip, r7, r8
   171d0:	cmp	r5, ip
   171d4:	lsl	r3, r8, #2
   171d8:	str	r9, [r0, r8, lsl #2]
   171dc:	bge	171fc <__assert_fail@plt+0x5f54>
   171e0:	sub	r2, r7, #-1073741823	; 0xc0000001
   171e4:	add	r3, r3, #4
   171e8:	lsl	r2, r2, #2
   171ec:	add	r0, r0, r3
   171f0:	mov	r1, #255	; 0xff
   171f4:	mov	r5, ip
   171f8:	bl	111c4 <memset@plt>
   171fc:	ldr	r3, [sp, #4]
   17200:	cmp	r3, r5
   17204:	ble	173a8 <__assert_fail@plt+0x6100>
   17208:	ldr	fp, [r4]
   1720c:	mov	r8, r5
   17210:	ldr	r7, [r4, #24]
   17214:	add	r2, fp, r7
   17218:	ldrb	r9, [r2, r5]
   1721c:	tst	r9, #128	; 0x80
   17220:	bne	17244 <__assert_fail@plt+0x5f9c>
   17224:	mov	r0, sl
   17228:	bl	1105c <mbsinit@plt>
   1722c:	cmp	r0, #0
   17230:	beq	17244 <__assert_fail@plt+0x5f9c>
   17234:	mov	r0, r9
   17238:	bl	11284 <towupper@plt>
   1723c:	bics	r3, r0, #127	; 0x7f
   17240:	beq	172c8 <__assert_fail@plt+0x6020>
   17244:	ldr	r3, [sp, #4]
   17248:	add	r1, r7, r5
   1724c:	add	r0, sp, #28
   17250:	add	r1, fp, r1
   17254:	ldrd	r6, [sl]
   17258:	str	r0, [sp, #12]
   1725c:	sub	r3, r3, r5
   17260:	mov	r2, r3
   17264:	str	r3, [sp, #16]
   17268:	mov	r3, sl
   1726c:	strd	r6, [sp, #32]
   17270:	bl	2addc <__assert_fail@plt+0x19b34>
   17274:	sub	r3, r0, #1
   17278:	mov	r7, r0
   1727c:	cmn	r3, #4
   17280:	bhi	172e0 <__assert_fail@plt+0x6038>
   17284:	ldr	r3, [sp, #28]
   17288:	mov	r0, r3
   1728c:	str	r3, [sp, #8]
   17290:	bl	11284 <towupper@plt>
   17294:	ldr	r3, [sp, #8]
   17298:	mov	r9, r0
   1729c:	cmp	r3, r0
   172a0:	bne	1718c <__assert_fail@plt+0x5ee4>
   172a4:	ldr	r1, [r4]
   172a8:	mov	r2, r7
   172ac:	ldr	r3, [r4, #24]
   172b0:	ldr	r0, [r4, #4]
   172b4:	add	r3, r5, r3
   172b8:	add	r1, r1, r3
   172bc:	add	r0, r0, r5
   172c0:	bl	11038 <memcpy@plt>
   172c4:	b	171c4 <__assert_fail@plt+0x5f1c>
   172c8:	ldr	r3, [r4, #4]
   172cc:	strb	r0, [r3, r5]
   172d0:	ldr	r3, [r4, #8]
   172d4:	str	r0, [r3, r5, lsl #2]
   172d8:	add	r5, r5, #1
   172dc:	b	171fc <__assert_fail@plt+0x5f54>
   172e0:	cmn	r3, #3
   172e4:	beq	17310 <__assert_fail@plt+0x6068>
   172e8:	ldr	r3, [r4, #4]
   172ec:	cmn	r0, #1
   172f0:	strb	r9, [r3, r5]
   172f4:	add	r5, r5, #1
   172f8:	ldr	r3, [r4, #8]
   172fc:	str	r9, [r3, r8, lsl #2]
   17300:	bne	171fc <__assert_fail@plt+0x5f54>
   17304:	ldrd	r2, [sp, #32]
   17308:	strd	r2, [sl]
   1730c:	b	171fc <__assert_fail@plt+0x5f54>
   17310:	ldr	r2, [r4, #36]	; 0x24
   17314:	ldr	r3, [r4, #48]	; 0x30
   17318:	cmp	r2, r3
   1731c:	blt	173a0 <__assert_fail@plt+0x60f8>
   17320:	ldr	r3, [r4, #4]
   17324:	strb	r9, [r3, r5]
   17328:	add	r5, r5, #1
   1732c:	ldr	r3, [r4, #8]
   17330:	str	r9, [r3, r8, lsl #2]
   17334:	b	171fc <__assert_fail@plt+0x5f54>
   17338:	ldr	lr, [r4, #80]	; 0x50
   1733c:	cmp	fp, #0
   17340:	cmpgt	lr, #0
   17344:	ble	17628 <__assert_fail@plt+0x6380>
   17348:	ldr	r8, [r4]
   1734c:	cmp	lr, fp
   17350:	add	r9, sp, #40	; 0x28
   17354:	movge	lr, fp
   17358:	mov	r1, r9
   1735c:	ldr	r2, [r4, #24]
   17360:	add	r2, r7, r2
   17364:	add	r8, r8, r2
   17368:	mov	r2, r8
   1736c:	ldrb	r0, [r2], #1
   17370:	ldrb	r0, [r3, r0]
   17374:	sub	ip, r2, r8
   17378:	cmp	ip, lr
   1737c:	strb	r0, [r1], #1
   17380:	blt	1736c <__assert_fail@plt+0x60c4>
   17384:	mov	r1, r9
   17388:	str	r9, [sp, #4]
   1738c:	b	17074 <__assert_fail@plt+0x5dcc>
   17390:	mov	r7, r5
   17394:	ldr	r6, [sp, #4]
   17398:	ldr	fp, [sp, #16]
   1739c:	b	17048 <__assert_fail@plt+0x5da0>
   173a0:	ldrd	r2, [sp, #32]
   173a4:	strd	r2, [sl]
   173a8:	mov	r0, #0
   173ac:	str	r5, [r4, #28]
   173b0:	str	r5, [r4, #32]
   173b4:	b	1714c <__assert_fail@plt+0x5ea4>
   173b8:	ldr	r0, [r4, #4]
   173bc:	mov	r2, r8
   173c0:	ldr	r1, [sp, #4]
   173c4:	add	r0, r0, r5
   173c8:	bl	11038 <memcpy@plt>
   173cc:	b	170e8 <__assert_fail@plt+0x5e40>
   173d0:	cmn	r3, #3
   173d4:	bne	173e8 <__assert_fail@plt+0x6140>
   173d8:	ldr	r1, [r4, #36]	; 0x24
   173dc:	ldr	r2, [r4, #48]	; 0x30
   173e0:	cmp	r1, r2
   173e4:	blt	17138 <__assert_fail@plt+0x5e90>
   173e8:	ldr	r2, [r4]
   173ec:	ldr	r0, [r4, #24]
   173f0:	ldr	r1, [r4, #64]	; 0x40
   173f4:	add	r2, r2, r7
   173f8:	ldrb	r2, [r2, r0]
   173fc:	cmp	r1, #0
   17400:	ldr	r0, [r4, #4]
   17404:	ldrbne	r2, [r1, r2]
   17408:	lsl	r1, r5, #2
   1740c:	strb	r2, [r0, r5]
   17410:	ldrb	r0, [r4, #76]	; 0x4c
   17414:	cmp	r0, #0
   17418:	ldrne	r0, [r4, #12]
   1741c:	strne	r7, [r0, r5, lsl #2]
   17420:	cmn	r8, #1
   17424:	add	r7, r7, #1
   17428:	ldr	r0, [r4, #8]
   1742c:	add	r5, r5, #1
   17430:	str	r2, [r0, r1]
   17434:	ldrdeq	r2, [sp, #32]
   17438:	strdeq	r2, [r4, #16]
   1743c:	b	1702c <__assert_fail@plt+0x5d84>
   17440:	ldr	r1, [r4, #12]
   17444:	add	r2, r8, r7
   17448:	add	r1, r1, r5, lsl #2
   1744c:	str	r7, [r1], #4
   17450:	add	r7, r7, #1
   17454:	cmp	r2, r7
   17458:	bne	1744c <__assert_fail@plt+0x61a4>
   1745c:	b	170f8 <__assert_fail@plt+0x5e50>
   17460:	cmn	r0, #1
   17464:	beq	173b8 <__assert_fail@plt+0x6110>
   17468:	add	r2, r0, r5
   1746c:	ldr	r0, [r4, #36]	; 0x24
   17470:	str	r2, [sp, #4]
   17474:	cmp	r2, r0
   17478:	bhi	17138 <__assert_fail@plt+0x5e90>
   1747c:	ldr	r2, [r4, #12]
   17480:	cmp	r2, #0
   17484:	beq	17630 <__assert_fail@plt+0x6388>
   17488:	ldrb	r0, [r4, #76]	; 0x4c
   1748c:	cmp	r0, #0
   17490:	bne	17530 <__assert_fail@plt+0x6288>
   17494:	cmp	r5, #0
   17498:	beq	17528 <__assert_fail@plt+0x6280>
   1749c:	ldr	r2, [r4, #12]
   174a0:	sub	r1, r5, #1
   174a4:	cmp	r1, #3
   174a8:	ubfx	r1, r2, #2, #1
   174ac:	bls	17654 <__assert_fail@plt+0x63ac>
   174b0:	cmp	r1, #0
   174b4:	sub	fp, r5, r1
   174b8:	lsr	ip, fp, #1
   174bc:	mov	r6, r1
   174c0:	add	lr, r1, #1
   174c4:	strne	r0, [r2]
   174c8:	add	r0, r2, r1, lsl #2
   174cc:	add	ip, r0, ip, lsl #3
   174d0:	stm	r0, {r6, lr}
   174d4:	add	r0, r0, #8
   174d8:	add	r6, r6, #2
   174dc:	cmp	ip, r0
   174e0:	add	lr, lr, #2
   174e4:	bne	174d0 <__assert_fail@plt+0x6228>
   174e8:	bic	r0, fp, #1
   174ec:	cmp	r0, fp
   174f0:	add	r1, r0, r1
   174f4:	beq	17528 <__assert_fail@plt+0x6280>
   174f8:	add	ip, r1, #1
   174fc:	str	r1, [r2, r1, lsl #2]
   17500:	cmp	ip, r5
   17504:	bcs	17528 <__assert_fail@plt+0x6280>
   17508:	add	r0, r1, #2
   1750c:	str	ip, [r2, ip, lsl #2]
   17510:	cmp	r0, r5
   17514:	bcs	17528 <__assert_fail@plt+0x6280>
   17518:	add	r1, r1, #3
   1751c:	str	r0, [r2, r0, lsl #2]
   17520:	cmp	r1, r5
   17524:	strcc	r1, [r2, r1, lsl #2]
   17528:	mov	r2, #1
   1752c:	strb	r2, [r4, #76]	; 0x4c
   17530:	ldr	r0, [r4, #4]
   17534:	mov	r2, r3
   17538:	mov	r1, r9
   1753c:	str	r3, [sp, #12]
   17540:	add	r0, r0, r5
   17544:	bl	11038 <memcpy@plt>
   17548:	ldr	r3, [sp, #12]
   1754c:	lsl	r2, r5, #2
   17550:	ldr	r0, [r4, #8]
   17554:	ldr	ip, [r4, #12]
   17558:	cmp	r3, #1
   1755c:	add	lr, r0, r2
   17560:	str	sl, [r0, r5, lsl #2]
   17564:	add	r2, ip, r2
   17568:	str	r7, [ip, r5, lsl #2]
   1756c:	bls	175e8 <__assert_fail@plt+0x6340>
   17570:	cmp	r8, #1
   17574:	movls	r2, #1
   17578:	bls	175b4 <__assert_fail@plt+0x630c>
   1757c:	cmp	r8, r3
   17580:	mov	r1, r2
   17584:	movcc	sl, r8
   17588:	movcs	sl, r3
   1758c:	mov	r2, #1
   17590:	mvn	r6, #0
   17594:	add	r9, r2, r7
   17598:	add	r2, r2, #1
   1759c:	cmp	r2, sl
   175a0:	str	r9, [r1, #4]!
   175a4:	str	r6, [lr, #4]!
   175a8:	bcc	17594 <__assert_fail@plt+0x62ec>
   175ac:	cmp	r2, r3
   175b0:	bcs	175e8 <__assert_fail@plt+0x6340>
   175b4:	ldr	lr, [sp, #8]
   175b8:	sub	r1, r5, #-1073741823	; 0xc0000001
   175bc:	mvn	r5, #0
   175c0:	add	r1, r1, r2
   175c4:	lsl	r1, r1, #2
   175c8:	add	ip, ip, r1
   175cc:	add	r0, r0, r1
   175d0:	add	lr, lr, r7
   175d4:	add	r2, r2, #1
   175d8:	str	lr, [ip, #4]!
   175dc:	cmp	r3, r2
   175e0:	str	r5, [r0, #4]!
   175e4:	bhi	175d4 <__assert_fail@plt+0x632c>
   175e8:	ldr	r6, [r4, #48]	; 0x30
   175ec:	sub	r2, r3, r8
   175f0:	ldr	r1, [r4, #52]	; 0x34
   175f4:	add	r6, r2, r6
   175f8:	cmp	r1, r7
   175fc:	str	r6, [r4, #48]	; 0x30
   17600:	ble	17610 <__assert_fail@plt+0x6368>
   17604:	ldr	r1, [r4, #56]	; 0x38
   17608:	add	r2, r1, r2
   1760c:	str	r2, [r4, #56]	; 0x38
   17610:	ldr	r2, [r4, #36]	; 0x24
   17614:	add	r7, r8, r7
   17618:	ldr	r5, [sp, #4]
   1761c:	cmp	r6, r2
   17620:	movge	r6, r2
   17624:	b	1702c <__assert_fail@plt+0x5d84>
   17628:	add	r9, sp, #40	; 0x28
   1762c:	b	17384 <__assert_fail@plt+0x60dc>
   17630:	lsl	r0, r0, #2
   17634:	str	r3, [sp, #12]
   17638:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1763c:	cmp	r0, #0
   17640:	str	r0, [r4, #12]
   17644:	moveq	r0, #12
   17648:	ldr	r3, [sp, #12]
   1764c:	bne	17488 <__assert_fail@plt+0x61e0>
   17650:	b	1714c <__assert_fail@plt+0x5ea4>
   17654:	mov	r1, r0
   17658:	b	174f8 <__assert_fail@plt+0x6250>
   1765c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17660:	mov	r4, r0
   17664:	ldr	ip, [r0, #8]
   17668:	strd	r6, [sp, #8]
   1766c:	ldr	r6, [r0, #4]
   17670:	strd	r8, [sp, #16]
   17674:	str	sl, [sp, #24]
   17678:	str	lr, [sp, #28]
   1767c:	sub	sp, sp, #8
   17680:	add	r3, sp, #8
   17684:	cmp	ip, r6
   17688:	stmdb	r3, {r1, r2}
   1768c:	ldrb	r5, [sp, #4]
   17690:	bcs	17760 <__assert_fail@plt+0x64b8>
   17694:	ldr	r7, [r0, #12]
   17698:	ldr	r6, [r0, #20]
   1769c:	lsl	r0, ip, #3
   176a0:	cmp	r5, #5
   176a4:	ldr	lr, [r4]
   176a8:	ldrd	r2, [sp]
   176ac:	add	r1, lr, r0
   176b0:	strd	r2, [lr, r0]
   176b4:	ldr	r3, [r1, #4]
   176b8:	bfc	r3, #8, #10
   176bc:	str	r3, [r1, #4]
   176c0:	beq	1774c <__assert_fail@plt+0x64a4>
   176c4:	sub	r5, r5, #6
   176c8:	clz	r5, r5
   176cc:	lsr	r5, r5, #5
   176d0:	ldrb	r3, [r1, #6]
   176d4:	mvn	r0, #0
   176d8:	mov	r2, #0
   176dc:	bfi	r3, r5, #4, #1
   176e0:	strb	r3, [r1, #6]
   176e4:	str	r0, [r7, ip, lsl #2]
   176e8:	ldr	r3, [r4, #8]
   176ec:	add	r3, r3, r3, lsl #1
   176f0:	lsl	r3, r3, #2
   176f4:	add	r1, r6, r3
   176f8:	str	r2, [r6, r3]
   176fc:	str	r2, [r1, #4]
   17700:	str	r2, [r1, #8]
   17704:	ldr	r3, [r4, #8]
   17708:	ldr	r0, [r4, #24]
   1770c:	add	r3, r3, r3, lsl #1
   17710:	lsl	r3, r3, #2
   17714:	add	r1, r0, r3
   17718:	str	r2, [r0, r3]
   1771c:	str	r2, [r1, #4]
   17720:	str	r2, [r1, #8]
   17724:	ldr	r0, [r4, #8]
   17728:	add	r3, r0, #1
   1772c:	str	r3, [r4, #8]
   17730:	add	sp, sp, #8
   17734:	ldrd	r4, [sp]
   17738:	ldrd	r6, [sp, #8]
   1773c:	ldrd	r8, [sp, #16]
   17740:	ldr	sl, [sp, #24]
   17744:	add	sp, sp, #28
   17748:	pop	{pc}		; (ldr pc, [sp], #4)
   1774c:	ldr	r5, [r4, #92]	; 0x5c
   17750:	cmp	r5, #1
   17754:	movle	r5, #0
   17758:	movgt	r5, #1
   1775c:	b	176d0 <__assert_fail@plt+0x6428>
   17760:	lsl	r9, r6, #1
   17764:	movw	r3, #21845	; 0x5555
   17768:	movt	r3, #5461	; 0x1555
   1776c:	cmp	r9, r3
   17770:	bhi	1782c <__assert_fail@plt+0x6584>
   17774:	lsl	r1, r6, #4
   17778:	ldr	r0, [r0]
   1777c:	bl	2ab84 <__assert_fail@plt+0x198dc>
   17780:	cmp	r0, #0
   17784:	beq	1782c <__assert_fail@plt+0x6584>
   17788:	lsl	r8, r6, #3
   1778c:	str	r0, [r4]
   17790:	add	r6, r9, r6
   17794:	ldr	r0, [r4, #12]
   17798:	mov	r1, r8
   1779c:	bl	2ab84 <__assert_fail@plt+0x198dc>
   177a0:	mov	r7, r0
   177a4:	mov	r1, r8
   177a8:	lsl	r8, r6, #3
   177ac:	ldr	r0, [r4, #16]
   177b0:	bl	2ab84 <__assert_fail@plt+0x198dc>
   177b4:	mov	sl, r0
   177b8:	mov	r1, r8
   177bc:	ldr	r0, [r4, #20]
   177c0:	bl	2ab84 <__assert_fail@plt+0x198dc>
   177c4:	mov	r6, r0
   177c8:	mov	r1, r8
   177cc:	ldr	r0, [r4, #24]
   177d0:	bl	2ab84 <__assert_fail@plt+0x198dc>
   177d4:	cmp	sl, #0
   177d8:	cmpne	r7, #0
   177dc:	mov	r8, r0
   177e0:	beq	1780c <__assert_fail@plt+0x6564>
   177e4:	cmp	r0, #0
   177e8:	cmpne	r6, #0
   177ec:	beq	1780c <__assert_fail@plt+0x6564>
   177f0:	str	r9, [r4, #4]
   177f4:	str	r7, [r4, #12]
   177f8:	str	sl, [r4, #16]
   177fc:	str	r6, [r4, #20]
   17800:	str	r0, [r4, #24]
   17804:	ldr	ip, [r4, #8]
   17808:	b	1769c <__assert_fail@plt+0x63f4>
   1780c:	mov	r0, r7
   17810:	bl	2ad30 <__assert_fail@plt+0x19a88>
   17814:	mov	r0, sl
   17818:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1781c:	mov	r0, r6
   17820:	bl	2ad30 <__assert_fail@plt+0x19a88>
   17824:	mov	r0, r8
   17828:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1782c:	mvn	r0, #0
   17830:	b	17730 <__assert_fail@plt+0x6488>
   17834:	ldr	r3, [r0, #124]	; 0x7c
   17838:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1783c:	strd	r6, [sp, #8]
   17840:	str	r8, [sp, #16]
   17844:	mov	r8, r0
   17848:	str	lr, [sp, #20]
   1784c:	cmp	r3, #0
   17850:	ble	178d4 <__assert_fail@plt+0x662c>
   17854:	mov	r7, #0
   17858:	ldr	r3, [r8, #132]	; 0x84
   1785c:	ldr	r6, [r3, r7, lsl #2]
   17860:	ldr	r3, [r6, #16]
   17864:	cmp	r3, #0
   17868:	ble	17898 <__assert_fail@plt+0x65f0>
   1786c:	mov	r4, #0
   17870:	ldr	r3, [r6, #20]
   17874:	ldr	r5, [r3, r4, lsl #2]
   17878:	add	r4, r4, #1
   1787c:	ldr	r0, [r5, #16]
   17880:	bl	2ad30 <__assert_fail@plt+0x19a88>
   17884:	mov	r0, r5
   17888:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1788c:	ldr	r3, [r6, #16]
   17890:	cmp	r3, r4
   17894:	bgt	17870 <__assert_fail@plt+0x65c8>
   17898:	ldr	r0, [r6, #20]
   1789c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   178a0:	ldr	r3, [r6, #8]
   178a4:	cmp	r3, #0
   178a8:	beq	178f4 <__assert_fail@plt+0x664c>
   178ac:	ldr	r0, [r3, #8]
   178b0:	add	r7, r7, #1
   178b4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   178b8:	ldr	r0, [r6, #8]
   178bc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   178c0:	mov	r0, r6
   178c4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   178c8:	ldr	r3, [r8, #124]	; 0x7c
   178cc:	cmp	r3, r7
   178d0:	bgt	17858 <__assert_fail@plt+0x65b0>
   178d4:	mov	r3, #0
   178d8:	ldrd	r4, [sp]
   178dc:	ldrd	r6, [sp, #8]
   178e0:	str	r3, [r8, #108]	; 0x6c
   178e4:	str	r3, [r8, #124]	; 0x7c
   178e8:	ldr	r8, [sp, #16]
   178ec:	add	sp, sp, #20
   178f0:	pop	{pc}		; (ldr pc, [sp], #4)
   178f4:	mov	r0, r6
   178f8:	add	r7, r7, #1
   178fc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   17900:	ldr	r3, [r8, #124]	; 0x7c
   17904:	cmp	r3, r7
   17908:	bgt	17858 <__assert_fail@plt+0x65b0>
   1790c:	b	178d4 <__assert_fail@plt+0x662c>
   17910:	ldr	r3, [r0]
   17914:	strd	r4, [sp, #-16]!
   17918:	mov	r4, r0
   1791c:	str	r6, [sp, #8]
   17920:	mov	r6, r1
   17924:	str	lr, [sp, #12]
   17928:	cmp	r3, #0
   1792c:	beq	17960 <__assert_fail@plt+0x66b8>
   17930:	ldmib	r0, {r1, r5}
   17934:	cmp	r1, #0
   17938:	bne	179a4 <__assert_fail@plt+0x66fc>
   1793c:	str	r6, [r5]
   17940:	mov	r0, #1
   17944:	ldr	r3, [r4, #4]
   17948:	add	r3, r3, r0
   1794c:	str	r3, [r4, #4]
   17950:	ldrd	r4, [sp]
   17954:	ldr	r6, [sp, #8]
   17958:	add	sp, sp, #12
   1795c:	pop	{pc}		; (ldr pc, [sp], #4)
   17960:	mov	r5, #1
   17964:	mov	r0, #4
   17968:	str	r5, [r4]
   1796c:	str	r5, [r4, #4]
   17970:	bl	2ab48 <__assert_fail@plt+0x198a0>
   17974:	mov	r3, r0
   17978:	cmp	r0, #0
   1797c:	str	r0, [r4, #8]
   17980:	streq	r3, [r4]
   17984:	streq	r3, [r4, #4]
   17988:	beq	17950 <__assert_fail@plt+0x66a8>
   1798c:	mov	r0, r5
   17990:	str	r6, [r3]
   17994:	ldrd	r4, [sp]
   17998:	ldr	r6, [sp, #8]
   1799c:	add	sp, sp, #12
   179a0:	pop	{pc}		; (ldr pc, [sp], #4)
   179a4:	cmp	r3, r1
   179a8:	beq	17a28 <__assert_fail@plt+0x6780>
   179ac:	ldr	r3, [r5]
   179b0:	mov	r2, r1
   179b4:	cmp	r3, r6
   179b8:	ble	179f0 <__assert_fail@plt+0x6748>
   179bc:	cmp	r1, #0
   179c0:	ble	179d8 <__assert_fail@plt+0x6730>
   179c4:	lsl	r2, r1, #2
   179c8:	add	r0, r5, #4
   179cc:	mov	r1, r5
   179d0:	bl	11008 <memmove@plt>
   179d4:	mov	r2, #0
   179d8:	str	r6, [r5, r2, lsl #2]
   179dc:	mov	r0, #1
   179e0:	ldr	r3, [r4, #4]
   179e4:	add	r3, r3, r0
   179e8:	str	r3, [r4, #4]
   179ec:	b	17950 <__assert_fail@plt+0x66a8>
   179f0:	sub	r3, r1, #-1073741823	; 0xc0000001
   179f4:	ldr	r0, [r5, r3, lsl #2]
   179f8:	lsl	r3, r3, #2
   179fc:	cmp	r6, r0
   17a00:	bge	179d8 <__assert_fail@plt+0x6730>
   17a04:	add	r3, r3, #4
   17a08:	add	r3, r5, r3
   17a0c:	str	r0, [r3], #-4
   17a10:	sub	r1, r1, #1
   17a14:	ldr	r0, [r3, #-4]
   17a18:	mov	r2, r1
   17a1c:	cmp	r0, r6
   17a20:	bgt	17a0c <__assert_fail@plt+0x6764>
   17a24:	b	179d8 <__assert_fail@plt+0x6730>
   17a28:	lsl	r3, r1, #1
   17a2c:	mov	r0, r5
   17a30:	lsl	r1, r1, #3
   17a34:	str	r3, [r4]
   17a38:	bl	2ab84 <__assert_fail@plt+0x198dc>
   17a3c:	subs	r5, r0, #0
   17a40:	beq	17a50 <__assert_fail@plt+0x67a8>
   17a44:	str	r5, [r4, #8]
   17a48:	ldr	r1, [r4, #4]
   17a4c:	b	179ac <__assert_fail@plt+0x6704>
   17a50:	mov	r0, r5
   17a54:	b	17950 <__assert_fail@plt+0x66a8>
   17a58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17a5c:	subs	r4, r0, #0
   17a60:	strd	r6, [sp, #8]
   17a64:	str	r8, [sp, #16]
   17a68:	str	lr, [sp, #20]
   17a6c:	ldr	r7, [sp, #28]
   17a70:	beq	17b1c <__assert_fail@plt+0x6874>
   17a74:	ldr	ip, [r4]
   17a78:	cmp	ip, #0
   17a7c:	beq	17b1c <__assert_fail@plt+0x6874>
   17a80:	sub	ip, ip, #1
   17a84:	ldr	lr, [r4, #8]
   17a88:	mov	r0, r3
   17a8c:	add	r5, ip, ip, lsl #1
   17a90:	mov	r8, r1
   17a94:	lsl	r6, r2, #3
   17a98:	lsl	r5, r5, #3
   17a9c:	mov	r2, r6
   17aa0:	ldr	r3, [lr, r5]
   17aa4:	add	lr, lr, r5
   17aa8:	ldr	r1, [lr, #8]
   17aac:	str	ip, [r4]
   17ab0:	str	r3, [r8]
   17ab4:	bl	11038 <memcpy@plt>
   17ab8:	ldr	r3, [r4, #8]
   17abc:	mov	r2, r6
   17ac0:	ldr	r0, [sp, #24]
   17ac4:	add	r3, r3, r5
   17ac8:	ldr	r1, [r3, #8]
   17acc:	add	r1, r1, r6
   17ad0:	bl	11038 <memcpy@plt>
   17ad4:	ldr	r0, [r7, #8]
   17ad8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   17adc:	ldr	r3, [r4, #8]
   17ae0:	add	r3, r3, r5
   17ae4:	ldr	r0, [r3, #8]
   17ae8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   17aec:	ldr	r3, [r4, #8]
   17af0:	add	r5, r3, r5
   17af4:	ldr	r0, [r5, #4]
   17af8:	ldrd	r2, [r5, #12]
   17afc:	strd	r2, [r7]
   17b00:	ldr	r3, [r5, #20]
   17b04:	str	r3, [r7, #8]
   17b08:	ldrd	r4, [sp]
   17b0c:	ldrd	r6, [sp, #8]
   17b10:	ldr	r8, [sp, #16]
   17b14:	add	sp, sp, #20
   17b18:	pop	{pc}		; (ldr pc, [sp], #4)
   17b1c:	mvn	r0, #0
   17b20:	b	17b08 <__assert_fail@plt+0x6860>
   17b24:	ldr	ip, [r1, #4]
   17b28:	cmp	ip, #0
   17b2c:	beq	17cc4 <__assert_fail@plt+0x6a1c>
   17b30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17b34:	strd	r6, [sp, #8]
   17b38:	str	lr, [sp, #28]
   17b3c:	ldr	lr, [r2, #4]
   17b40:	strd	r8, [sp, #16]
   17b44:	str	sl, [sp, #24]
   17b48:	cmp	lr, #0
   17b4c:	beq	17c4c <__assert_fail@plt+0x69a4>
   17b50:	ldr	r4, [r0]
   17b54:	mov	r9, r2
   17b58:	add	r2, ip, lr
   17b5c:	mov	r8, r1
   17b60:	mov	r7, r0
   17b64:	ldmib	r0, {r3, sl}
   17b68:	add	r1, r2, r3
   17b6c:	cmp	r1, r4
   17b70:	bgt	17cd4 <__assert_fail@plt+0x6a2c>
   17b74:	ldr	r0, [r8, #8]
   17b78:	add	r1, r3, ip
   17b7c:	sub	r5, ip, #1
   17b80:	sub	r6, lr, #1
   17b84:	add	r1, r1, lr
   17b88:	ldr	r2, [r9, #8]
   17b8c:	sub	r3, r3, #1
   17b90:	ldr	ip, [r0, r5, lsl #2]
   17b94:	ldr	lr, [r2, r6, lsl #2]
   17b98:	cmp	ip, lr
   17b9c:	beq	17bb8 <__assert_fail@plt+0x6910>
   17ba0:	bge	17c6c <__assert_fail@plt+0x69c4>
   17ba4:	subs	r6, r6, #1
   17ba8:	bmi	17c08 <__assert_fail@plt+0x6960>
   17bac:	ldr	lr, [r2, r6, lsl #2]
   17bb0:	cmp	ip, lr
   17bb4:	bne	17ba0 <__assert_fail@plt+0x68f8>
   17bb8:	cmp	r3, #0
   17bbc:	blt	17be8 <__assert_fail@plt+0x6940>
   17bc0:	ldr	r4, [sl, r3, lsl #2]
   17bc4:	add	lr, sl, r3, lsl #2
   17bc8:	cmp	r4, ip
   17bcc:	bgt	17be0 <__assert_fail@plt+0x6938>
   17bd0:	b	17c7c <__assert_fail@plt+0x69d4>
   17bd4:	ldr	r4, [lr, #-4]!
   17bd8:	cmp	r4, ip
   17bdc:	ble	17c7c <__assert_fail@plt+0x69d4>
   17be0:	subs	r3, r3, #1
   17be4:	bcs	17bd4 <__assert_fail@plt+0x692c>
   17be8:	sub	r1, r1, #1
   17bec:	str	ip, [sl, r1, lsl #2]
   17bf0:	subs	r5, r5, #1
   17bf4:	bmi	17c08 <__assert_fail@plt+0x6960>
   17bf8:	subs	r6, r6, #1
   17bfc:	bmi	17c08 <__assert_fail@plt+0x6960>
   17c00:	ldr	ip, [r0, r5, lsl #2]
   17c04:	b	17bac <__assert_fail@plt+0x6904>
   17c08:	ldr	ip, [r7, #4]
   17c0c:	ldr	r0, [r8, #4]
   17c10:	ldr	r2, [r9, #4]
   17c14:	sub	r3, ip, #1
   17c18:	add	r0, ip, r0
   17c1c:	add	r0, r0, r2
   17c20:	sub	r2, r0, r1
   17c24:	sub	r0, r0, #1
   17c28:	add	ip, ip, r2
   17c2c:	cmp	r3, #0
   17c30:	cmpge	r2, #0
   17c34:	str	ip, [r7, #4]
   17c38:	bgt	17c98 <__assert_fail@plt+0x69f0>
   17c3c:	lsl	r2, r2, #2
   17c40:	add	r1, sl, r1, lsl #2
   17c44:	mov	r0, sl
   17c48:	bl	11038 <memcpy@plt>
   17c4c:	mov	ip, #0
   17c50:	ldrd	r4, [sp]
   17c54:	mov	r0, ip
   17c58:	ldrd	r6, [sp, #8]
   17c5c:	ldrd	r8, [sp, #16]
   17c60:	ldr	sl, [sp, #24]
   17c64:	add	sp, sp, #28
   17c68:	pop	{pc}		; (ldr pc, [sp], #4)
   17c6c:	subs	r5, r5, #1
   17c70:	bmi	17c08 <__assert_fail@plt+0x6960>
   17c74:	ldr	ip, [r0, r5, lsl #2]
   17c78:	b	17b98 <__assert_fail@plt+0x68f0>
   17c7c:	cmp	r4, ip
   17c80:	bne	17be8 <__assert_fail@plt+0x6940>
   17c84:	b	17bf0 <__assert_fail@plt+0x6948>
   17c88:	sub	r3, r3, #1
   17c8c:	str	ip, [sl, r4, lsl #2]
   17c90:	cmn	r3, #1
   17c94:	beq	17ccc <__assert_fail@plt+0x6a24>
   17c98:	ldr	lr, [sl, r0, lsl #2]
   17c9c:	add	r4, r3, r2
   17ca0:	ldr	ip, [sl, r3, lsl #2]
   17ca4:	cmp	lr, ip
   17ca8:	ble	17c88 <__assert_fail@plt+0x69e0>
   17cac:	subs	r2, r2, #1
   17cb0:	sub	r0, r0, #1
   17cb4:	str	lr, [sl, r4, lsl #2]
   17cb8:	bne	17c98 <__assert_fail@plt+0x69f0>
   17cbc:	ldr	sl, [r7, #8]
   17cc0:	b	17c40 <__assert_fail@plt+0x6998>
   17cc4:	mov	r0, ip
   17cc8:	bx	lr
   17ccc:	ldr	sl, [r7, #8]
   17cd0:	b	17c3c <__assert_fail@plt+0x6994>
   17cd4:	add	r4, r2, r4
   17cd8:	mov	r0, sl
   17cdc:	lsl	r1, r4, #2
   17ce0:	bl	2ab84 <__assert_fail@plt+0x198dc>
   17ce4:	subs	sl, r0, #0
   17ce8:	beq	17d04 <__assert_fail@plt+0x6a5c>
   17cec:	ldr	ip, [r8, #4]
   17cf0:	ldr	lr, [r9, #4]
   17cf4:	str	r4, [r7]
   17cf8:	str	sl, [r7, #8]
   17cfc:	ldr	r3, [r7, #4]
   17d00:	b	17b74 <__assert_fail@plt+0x68cc>
   17d04:	mov	ip, #12
   17d08:	b	17c50 <__assert_fail@plt+0x69a8>
   17d0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17d10:	strd	r6, [sp, #8]
   17d14:	subs	r6, r1, #0
   17d18:	str	r8, [sp, #16]
   17d1c:	str	lr, [sp, #20]
   17d20:	beq	17e30 <__assert_fail@plt+0x6b88>
   17d24:	ldr	r2, [r6, #4]
   17d28:	cmp	r2, #0
   17d2c:	mov	ip, r2
   17d30:	beq	17e30 <__assert_fail@plt+0x6b88>
   17d34:	ldm	r0, {r1, r3}
   17d38:	mov	r5, r0
   17d3c:	add	r4, r3, r2, lsl #1
   17d40:	cmp	r1, r4
   17d44:	blt	17e6c <__assert_fail@plt+0x6bc4>
   17d48:	cmp	r3, #0
   17d4c:	beq	17eac <__assert_fail@plt+0x6c04>
   17d50:	sub	r2, r2, #1
   17d54:	sub	r3, r3, #1
   17d58:	mvn	lr, r3
   17d5c:	mvn	ip, r2
   17d60:	tst	lr, ip
   17d64:	bpl	17dc0 <__assert_fail@plt+0x6b18>
   17d68:	ldr	r7, [r5, #8]
   17d6c:	ldr	r8, [r6, #8]
   17d70:	b	17d98 <__assert_fail@plt+0x6af0>
   17d74:	subge	r3, r3, #1
   17d78:	mvnge	lr, r3
   17d7c:	bge	17d90 <__assert_fail@plt+0x6ae8>
   17d80:	sub	r2, r2, #1
   17d84:	sub	r4, r4, #1
   17d88:	mvn	ip, r2
   17d8c:	str	r1, [r7, r4, lsl #2]
   17d90:	tst	ip, lr
   17d94:	bpl	17dc0 <__assert_fail@plt+0x6b18>
   17d98:	ldr	r0, [r7, r3, lsl #2]
   17d9c:	ldr	r1, [r8, r2, lsl #2]
   17da0:	cmp	r0, r1
   17da4:	bne	17d74 <__assert_fail@plt+0x6acc>
   17da8:	sub	r2, r2, #1
   17dac:	sub	r3, r3, #1
   17db0:	mvn	lr, r3
   17db4:	mvn	ip, r2
   17db8:	tst	ip, lr
   17dbc:	bmi	17d98 <__assert_fail@plt+0x6af0>
   17dc0:	cmp	r2, #0
   17dc4:	blt	17de4 <__assert_fail@plt+0x6b3c>
   17dc8:	ldr	r0, [r5, #8]
   17dcc:	add	r2, r2, #1
   17dd0:	sub	r4, r4, r2
   17dd4:	lsl	r2, r2, #2
   17dd8:	ldr	r1, [r6, #8]
   17ddc:	add	r0, r0, r4, lsl #2
   17de0:	bl	11038 <memcpy@plt>
   17de4:	ldr	r3, [r5, #4]
   17de8:	ldr	r0, [r6, #4]
   17dec:	add	r0, r3, r0, lsl #1
   17df0:	subs	r2, r0, r4
   17df4:	sub	r0, r0, #1
   17df8:	beq	17e30 <__assert_fail@plt+0x6b88>
   17dfc:	ldr	r1, [r5, #8]
   17e00:	add	ip, r3, r2
   17e04:	sub	r3, r3, #1
   17e08:	str	ip, [r5, #4]
   17e0c:	ldr	lr, [r1, r0, lsl #2]
   17e10:	add	r5, r3, r2
   17e14:	ldr	ip, [r1, r3, lsl #2]
   17e18:	cmp	lr, ip
   17e1c:	ble	17e48 <__assert_fail@plt+0x6ba0>
   17e20:	subs	r2, r2, #1
   17e24:	sub	r0, r0, #1
   17e28:	str	lr, [r1, r5, lsl #2]
   17e2c:	bne	17e0c <__assert_fail@plt+0x6b64>
   17e30:	mov	r0, #0
   17e34:	ldrd	r4, [sp]
   17e38:	ldrd	r6, [sp, #8]
   17e3c:	ldr	r8, [sp, #16]
   17e40:	add	sp, sp, #20
   17e44:	pop	{pc}		; (ldr pc, [sp], #4)
   17e48:	subs	r3, r3, #1
   17e4c:	str	ip, [r1, r5, lsl #2]
   17e50:	bpl	17e0c <__assert_fail@plt+0x6b64>
   17e54:	mov	r0, r1
   17e58:	lsl	r2, r2, #2
   17e5c:	add	r1, r1, r4, lsl #2
   17e60:	bl	11038 <memcpy@plt>
   17e64:	mov	r0, #0
   17e68:	b	17e34 <__assert_fail@plt+0x6b8c>
   17e6c:	add	r2, r2, r1
   17e70:	ldr	r0, [r0, #8]
   17e74:	lsl	r1, r2, #3
   17e78:	lsl	r4, r2, #1
   17e7c:	bl	2ab84 <__assert_fail@plt+0x198dc>
   17e80:	cmp	r0, #0
   17e84:	beq	17ec8 <__assert_fail@plt+0x6c20>
   17e88:	ldr	r3, [r5, #4]
   17e8c:	str	r4, [r5]
   17e90:	str	r0, [r5, #8]
   17e94:	cmp	r3, #0
   17e98:	ldreq	ip, [r6, #4]
   17e9c:	beq	17eb0 <__assert_fail@plt+0x6c08>
   17ea0:	ldr	r2, [r6, #4]
   17ea4:	add	r4, r3, r2, lsl #1
   17ea8:	b	17d50 <__assert_fail@plt+0x6aa8>
   17eac:	ldr	r0, [r0, #8]
   17eb0:	ldr	r1, [r6, #8]
   17eb4:	str	ip, [r5, #4]
   17eb8:	ldr	r2, [r6, #4]
   17ebc:	lsl	r2, r2, #2
   17ec0:	bl	11038 <memcpy@plt>
   17ec4:	b	17e30 <__assert_fail@plt+0x6b88>
   17ec8:	mov	r0, #12
   17ecc:	b	17e34 <__assert_fail@plt+0x6b8c>
   17ed0:	cmp	r1, #0
   17ed4:	strd	r4, [sp, #-16]!
   17ed8:	mov	r5, r0
   17edc:	str	r6, [sp, #8]
   17ee0:	str	lr, [sp, #12]
   17ee4:	blt	17f98 <__assert_fail@plt+0x6cf0>
   17ee8:	ldr	r3, [r0, #48]	; 0x30
   17eec:	cmp	r3, r1
   17ef0:	beq	17fac <__assert_fail@plt+0x6d04>
   17ef4:	ldr	r3, [r0, #80]	; 0x50
   17ef8:	cmp	r3, #1
   17efc:	ble	17f4c <__assert_fail@plt+0x6ca4>
   17f00:	ldr	r3, [r0, #8]
   17f04:	add	r3, r3, r1, lsl #2
   17f08:	b	17f14 <__assert_fail@plt+0x6c6c>
   17f0c:	cmn	r1, #1
   17f10:	beq	17f98 <__assert_fail@plt+0x6cf0>
   17f14:	ldr	r4, [r3], #-4
   17f18:	sub	r1, r1, #1
   17f1c:	cmn	r4, #1
   17f20:	beq	17f0c <__assert_fail@plt+0x6c64>
   17f24:	ldrb	r3, [r5, #78]	; 0x4e
   17f28:	cmp	r3, #0
   17f2c:	bne	17fbc <__assert_fail@plt+0x6d14>
   17f30:	cmp	r4, #10
   17f34:	movne	r0, #0
   17f38:	beq	17f78 <__assert_fail@plt+0x6cd0>
   17f3c:	ldrd	r4, [sp]
   17f40:	ldr	r6, [sp, #8]
   17f44:	add	sp, sp, #12
   17f48:	pop	{pc}		; (ldr pc, [sp], #4)
   17f4c:	ldr	r3, [r0, #4]
   17f50:	ldr	r0, [r0, #68]	; 0x44
   17f54:	ldrb	r3, [r3, r1]
   17f58:	asr	r1, r3, #5
   17f5c:	and	r2, r3, #31
   17f60:	ldr	r0, [r0, r1, lsl #2]
   17f64:	lsr	r0, r0, r2
   17f68:	ands	r0, r0, #1
   17f6c:	bne	17f3c <__assert_fail@plt+0x6c94>
   17f70:	cmp	r3, #10
   17f74:	bne	17f3c <__assert_fail@plt+0x6c94>
   17f78:	ldrb	r3, [r5, #77]	; 0x4d
   17f7c:	ldrd	r4, [sp]
   17f80:	ldr	r6, [sp, #8]
   17f84:	add	sp, sp, #12
   17f88:	cmp	r3, #0
   17f8c:	moveq	r0, #0
   17f90:	movne	r0, #2
   17f94:	pop	{pc}		; (ldr pc, [sp], #4)
   17f98:	ldr	r6, [sp, #8]
   17f9c:	ldr	r0, [r5, #60]	; 0x3c
   17fa0:	ldrd	r4, [sp]
   17fa4:	add	sp, sp, #12
   17fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fac:	tst	r2, #2
   17fb0:	movne	r0, #8
   17fb4:	moveq	r0, #10
   17fb8:	b	17f3c <__assert_fail@plt+0x6c94>
   17fbc:	mov	r0, r4
   17fc0:	bl	111ac <iswalnum@plt>
   17fc4:	sub	r3, r4, #95	; 0x5f
   17fc8:	cmp	r0, #0
   17fcc:	clz	r3, r3
   17fd0:	lsr	r3, r3, #5
   17fd4:	movne	r3, #1
   17fd8:	cmp	r3, #0
   17fdc:	movne	r0, #1
   17fe0:	bne	17f3c <__assert_fail@plt+0x6c94>
   17fe4:	b	17f30 <__assert_fail@plt+0x6c88>
   17fe8:	ldrb	ip, [r1, #4]
   17fec:	str	r4, [sp, #-8]!
   17ff0:	ldr	r3, [r0, #4]
   17ff4:	str	lr, [sp, #4]
   17ff8:	sub	ip, ip, #1
   17ffc:	ldrb	r3, [r3, r2]
   18000:	cmp	ip, #6
   18004:	ldrls	pc, [pc, ip, lsl #2]
   18008:	b	18034 <__assert_fail@plt+0x6d8c>
   1800c:	andeq	r8, r1, r8, lsr #32
   18010:	andeq	r8, r1, r4, lsr r0
   18014:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18018:	andeq	r8, r1, r4, lsr r0
   1801c:	andeq	r8, r1, ip, asr #32
   18020:	andeq	r8, r1, r4, lsr r0
   18024:	andeq	r8, r1, r4, asr #32
   18028:	ldrb	ip, [r1]
   1802c:	cmp	ip, r3
   18030:	beq	1806c <__assert_fail@plt+0x6dc4>
   18034:	mov	r0, #0
   18038:	ldr	r4, [sp]
   1803c:	add	sp, sp, #4
   18040:	pop	{pc}		; (ldr pc, [sp], #4)
   18044:	tst	r3, #128	; 0x80
   18048:	bne	18034 <__assert_fail@plt+0x6d8c>
   1804c:	cmp	r3, #10
   18050:	beq	1810c <__assert_fail@plt+0x6e64>
   18054:	cmp	r3, #0
   18058:	bne	1806c <__assert_fail@plt+0x6dc4>
   1805c:	ldr	ip, [r0, #84]	; 0x54
   18060:	ldr	ip, [ip, #128]	; 0x80
   18064:	tst	ip, #128	; 0x80
   18068:	bne	18034 <__assert_fail@plt+0x6d8c>
   1806c:	ldr	r4, [r1, #4]
   18070:	mov	r3, #65280	; 0xff00
   18074:	movt	r3, #3
   18078:	and	r3, r3, r4
   1807c:	cmp	r3, #0
   18080:	beq	180c8 <__assert_fail@plt+0x6e20>
   18084:	mov	r1, r2
   18088:	ldr	r2, [r0, #88]	; 0x58
   1808c:	bl	17ed0 <__assert_fail@plt+0x6c28>
   18090:	ubfx	r1, r4, #8, #10
   18094:	ands	r2, r1, #4
   18098:	bne	180f8 <__assert_fail@plt+0x6e50>
   1809c:	tst	r1, #8
   180a0:	beq	180ac <__assert_fail@plt+0x6e04>
   180a4:	tst	r0, #1
   180a8:	bne	18034 <__assert_fail@plt+0x6d8c>
   180ac:	tst	r1, #32
   180b0:	beq	180bc <__assert_fail@plt+0x6e14>
   180b4:	ands	r3, r0, #2
   180b8:	beq	18034 <__assert_fail@plt+0x6d8c>
   180bc:	tst	r1, #128	; 0x80
   180c0:	ubfxne	r0, r0, #3, #1
   180c4:	bne	18038 <__assert_fail@plt+0x6d90>
   180c8:	ldr	r4, [sp]
   180cc:	add	sp, sp, #4
   180d0:	mov	r0, #1
   180d4:	pop	{pc}		; (ldr pc, [sp], #4)
   180d8:	ldr	ip, [r1]
   180dc:	asr	lr, r3, #5
   180e0:	and	r3, r3, #31
   180e4:	ldr	ip, [ip, lr, lsl #2]
   180e8:	lsr	r3, ip, r3
   180ec:	ands	r3, r3, #1
   180f0:	bne	1806c <__assert_fail@plt+0x6dc4>
   180f4:	b	18034 <__assert_fail@plt+0x6d8c>
   180f8:	ands	r3, r0, #1
   180fc:	beq	18034 <__assert_fail@plt+0x6d8c>
   18100:	tst	r1, #8
   18104:	beq	180ac <__assert_fail@plt+0x6e04>
   18108:	b	18034 <__assert_fail@plt+0x6d8c>
   1810c:	ldr	r3, [r0, #84]	; 0x54
   18110:	ldr	r3, [r3, #128]	; 0x80
   18114:	ands	r3, r3, #64	; 0x40
   18118:	bne	1806c <__assert_fail@plt+0x6dc4>
   1811c:	b	18034 <__assert_fail@plt+0x6d8c>
   18120:	ldr	r3, [r0, #24]
   18124:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18128:	mov	r4, r0
   1812c:	strd	r6, [sp, #8]
   18130:	mov	r7, r1
   18134:	strd	r8, [sp, #16]
   18138:	mov	r8, r2
   1813c:	strd	sl, [sp, #24]
   18140:	cmp	r3, r1
   18144:	str	lr, [sp, #32]
   18148:	sub	sp, sp, #36	; 0x24
   1814c:	suble	r5, r1, r3
   18150:	ble	181b4 <__assert_fail@plt+0x6f0c>
   18154:	ldr	r3, [r0, #80]	; 0x50
   18158:	cmp	r3, #1
   1815c:	ble	1816c <__assert_fail@plt+0x6ec4>
   18160:	mov	r2, #0
   18164:	mov	r3, #0
   18168:	strd	r2, [r0, #16]
   1816c:	ldrb	r3, [r4, #75]	; 0x4b
   18170:	tst	r8, #1
   18174:	mov	r9, #0
   18178:	movne	r1, #4
   1817c:	moveq	r1, #6
   18180:	ldr	r0, [r4, #44]	; 0x2c
   18184:	str	r9, [r4, #24]
   18188:	ldr	r2, [r4, #52]	; 0x34
   1818c:	cmp	r3, r9
   18190:	str	r9, [r4, #28]
   18194:	movne	r3, r9
   18198:	movne	r5, r7
   1819c:	str	r9, [r4, #32]
   181a0:	str	r0, [r4, #48]	; 0x30
   181a4:	str	r2, [r4, #56]	; 0x38
   181a8:	str	r1, [r4, #60]	; 0x3c
   181ac:	strb	r9, [r4, #76]	; 0x4c
   181b0:	beq	18290 <__assert_fail@plt+0x6fe8>
   181b4:	cmp	r5, #0
   181b8:	beq	182a4 <__assert_fail@plt+0x6ffc>
   181bc:	ldrb	r2, [r4, #76]	; 0x4c
   181c0:	ldr	r1, [r4, #32]
   181c4:	ldr	r6, [r4, #28]
   181c8:	cmp	r1, r5
   181cc:	ble	18378 <__assert_fail@plt+0x70d0>
   181d0:	cmp	r2, #0
   181d4:	bne	184dc <__assert_fail@plt+0x7234>
   181d8:	mov	r2, r8
   181dc:	sub	r1, r5, #1
   181e0:	mov	r0, r4
   181e4:	bl	17ed0 <__assert_fail@plt+0x6c28>
   181e8:	ldr	r3, [r4, #80]	; 0x50
   181ec:	sub	r2, r6, r5
   181f0:	str	r0, [r4, #60]	; 0x3c
   181f4:	cmp	r3, #1
   181f8:	bgt	182b4 <__assert_fail@plt+0x700c>
   181fc:	ldrb	r3, [r4, #75]	; 0x4b
   18200:	cmp	r3, #0
   18204:	bne	1851c <__assert_fail@plt+0x7274>
   18208:	ldr	ip, [r4, #32]
   1820c:	str	r2, [r4, #28]
   18210:	ldr	r1, [r4, #48]	; 0x30
   18214:	ldr	r0, [r4, #56]	; 0x38
   18218:	sub	ip, ip, r5
   1821c:	ldr	r2, [r4, #80]	; 0x50
   18220:	sub	r1, r1, r5
   18224:	str	ip, [r4, #32]
   18228:	sub	r0, r0, r5
   1822c:	cmp	r3, #0
   18230:	bne	18240 <__assert_fail@plt+0x6f98>
   18234:	ldr	r3, [r4, #4]
   18238:	add	r5, r3, r5
   1823c:	str	r5, [r4, #4]
   18240:	cmp	r2, #1
   18244:	str	r7, [r4, #24]
   18248:	str	r1, [r4, #48]	; 0x30
   1824c:	str	r0, [r4, #56]	; 0x38
   18250:	ble	182e0 <__assert_fail@plt+0x7038>
   18254:	ldrb	r3, [r4, #72]	; 0x48
   18258:	mov	r0, r4
   1825c:	cmp	r3, #0
   18260:	bne	182d0 <__assert_fail@plt+0x7028>
   18264:	bl	16e04 <__assert_fail@plt+0x5b5c>
   18268:	mov	r3, #0
   1826c:	mov	r0, r3
   18270:	str	r3, [r4, #40]	; 0x28
   18274:	add	sp, sp, #36	; 0x24
   18278:	ldrd	r4, [sp]
   1827c:	ldrd	r6, [sp, #8]
   18280:	ldrd	r8, [sp, #16]
   18284:	ldrd	sl, [sp, #24]
   18288:	add	sp, sp, #32
   1828c:	pop	{pc}		; (ldr pc, [sp], #4)
   18290:	ldr	r2, [r4]
   18294:	mov	r5, r7
   18298:	cmp	r5, #0
   1829c:	str	r2, [r4, #4]
   182a0:	bne	181bc <__assert_fail@plt+0x6f14>
   182a4:	ldr	r1, [r4, #48]	; 0x30
   182a8:	ldr	r0, [r4, #56]	; 0x38
   182ac:	ldr	r2, [r4, #80]	; 0x50
   182b0:	b	18240 <__assert_fail@plt+0x6f98>
   182b4:	ldr	r0, [r4, #8]
   182b8:	lsl	r2, r2, #2
   182bc:	add	r1, r0, r5, lsl #2
   182c0:	bl	11008 <memmove@plt>
   182c4:	ldr	r2, [r4, #28]
   182c8:	sub	r2, r2, r5
   182cc:	b	181fc <__assert_fail@plt+0x6f54>
   182d0:	bl	16fe0 <__assert_fail@plt+0x5d38>
   182d4:	cmp	r0, #0
   182d8:	beq	18268 <__assert_fail@plt+0x6fc0>
   182dc:	b	18274 <__assert_fail@plt+0x6fcc>
   182e0:	ldrb	r3, [r4, #75]	; 0x4b
   182e4:	cmp	r3, #0
   182e8:	streq	r1, [r4, #28]
   182ec:	beq	18268 <__assert_fail@plt+0x6fc0>
   182f0:	ldrb	r3, [r4, #72]	; 0x48
   182f4:	cmp	r3, #0
   182f8:	bne	187dc <__assert_fail@plt+0x7534>
   182fc:	ldr	r0, [r4, #64]	; 0x40
   18300:	cmp	r0, #0
   18304:	beq	18268 <__assert_fail@plt+0x6fc0>
   18308:	ldr	r2, [r4, #28]
   1830c:	ldr	r3, [r4, #36]	; 0x24
   18310:	cmp	r1, r3
   18314:	movge	r1, r3
   18318:	cmp	r1, r2
   1831c:	ble	189b4 <__assert_fail@plt+0x770c>
   18320:	ldm	r4, {ip, lr}
   18324:	add	r3, r2, #1
   18328:	cmp	r1, r3
   1832c:	add	ip, ip, r2
   18330:	ldrb	ip, [ip, r7]
   18334:	ldrb	r0, [r0, ip]
   18338:	strb	r0, [lr, r2]
   1833c:	ble	1836c <__assert_fail@plt+0x70c4>
   18340:	ldr	r2, [r4]
   18344:	ldr	r0, [r4, #24]
   18348:	ldr	ip, [r4, #64]	; 0x40
   1834c:	add	r2, r2, r3
   18350:	ldrb	r0, [r2, r0]
   18354:	ldr	r2, [r4, #4]
   18358:	ldrb	r0, [ip, r0]
   1835c:	strb	r0, [r2, r3]
   18360:	add	r3, r3, #1
   18364:	cmp	r1, r3
   18368:	bne	18340 <__assert_fail@plt+0x7098>
   1836c:	str	r1, [r4, #28]
   18370:	str	r1, [r4, #32]
   18374:	b	18268 <__assert_fail@plt+0x6fc0>
   18378:	cmp	r2, #0
   1837c:	bne	188e4 <__assert_fail@plt+0x763c>
   18380:	ldr	r2, [r4, #80]	; 0x50
   18384:	mov	r0, #0
   18388:	str	r0, [r4, #28]
   1838c:	cmp	r2, #1
   18390:	ble	1869c <__assert_fail@plt+0x73f4>
   18394:	ldrb	r0, [r4, #73]	; 0x49
   18398:	cmp	r0, #0
   1839c:	beq	18410 <__assert_fail@plt+0x7168>
   183a0:	ldr	ip, [r4]
   183a4:	sub	r2, r5, r2
   183a8:	sub	r0, r5, #1
   183ac:	add	lr, ip, r3
   183b0:	add	r2, lr, r2
   183b4:	add	r9, lr, r0
   183b8:	cmp	ip, r2
   183bc:	str	lr, [sp]
   183c0:	movcc	ip, r2
   183c4:	cmp	ip, r9
   183c8:	bhi	18410 <__assert_fail@plt+0x7168>
   183cc:	ldrb	r2, [lr, r0]
   183d0:	and	r2, r2, #192	; 0xc0
   183d4:	cmp	r2, #128	; 0x80
   183d8:	movne	r1, lr
   183dc:	bne	18864 <__assert_fail@plt+0x75bc>
   183e0:	mov	sl, lr
   183e4:	sub	r2, r9, #1
   183e8:	sub	ip, ip, #1
   183ec:	b	18404 <__assert_fail@plt+0x715c>
   183f0:	ldrb	r0, [r9]
   183f4:	sub	r2, r2, #1
   183f8:	and	r0, r0, #192	; 0xc0
   183fc:	cmp	r0, #128	; 0x80
   18400:	bne	1885c <__assert_fail@plt+0x75b4>
   18404:	cmp	ip, r2
   18408:	mov	r9, r2
   1840c:	bne	183f0 <__assert_fail@plt+0x7148>
   18410:	add	r9, r3, r1
   18414:	cmp	r7, r9
   18418:	ble	1871c <__assert_fail@plt+0x7474>
   1841c:	add	fp, r4, #16
   18420:	str	r7, [sp]
   18424:	str	r6, [sp, #4]
   18428:	ldr	r1, [r4]
   1842c:	mov	r3, fp
   18430:	add	r0, sp, #16
   18434:	ldr	sl, [r4, #44]	; 0x2c
   18438:	ldrd	r6, [fp]
   1843c:	add	r1, r1, r9
   18440:	sub	sl, sl, r9
   18444:	mov	r2, sl
   18448:	strd	r6, [sp, #24]
   1844c:	bl	2addc <__assert_fail@plt+0x19b34>
   18450:	sub	r3, r0, #1
   18454:	cmn	r3, #4
   18458:	ldrls	r1, [sp, #16]
   1845c:	bhi	18910 <__assert_fail@plt+0x7668>
   18460:	add	r9, r9, r0
   18464:	ldr	r3, [sp]
   18468:	cmp	r3, r9
   1846c:	bgt	18428 <__assert_fail@plt+0x7180>
   18470:	sub	r9, r9, r3
   18474:	cmn	r1, #1
   18478:	ldr	r6, [sp, #4]
   1847c:	mov	r7, r3
   18480:	str	r9, [r4, #28]
   18484:	beq	18724 <__assert_fail@plt+0x747c>
   18488:	ldrb	r3, [r4, #78]	; 0x4e
   1848c:	cmp	r3, #0
   18490:	bne	18984 <__assert_fail@plt+0x76dc>
   18494:	cmp	r1, #10
   18498:	movne	r3, #0
   1849c:	bne	184b0 <__assert_fail@plt+0x7208>
   184a0:	ldrb	r3, [r4, #77]	; 0x4d
   184a4:	cmp	r3, #0
   184a8:	moveq	r3, #0
   184ac:	movne	r3, #2
   184b0:	str	r3, [r4, #60]	; 0x3c
   184b4:	cmp	r9, #0
   184b8:	bne	18934 <__assert_fail@plt+0x768c>
   184bc:	ldrb	r3, [r4, #75]	; 0x4b
   184c0:	str	r9, [r4, #32]
   184c4:	ldr	r1, [r4, #48]	; 0x30
   184c8:	ldr	r0, [r4, #56]	; 0x38
   184cc:	ldr	r2, [r4, #80]	; 0x50
   184d0:	sub	r1, r1, r5
   184d4:	sub	r0, r0, r5
   184d8:	b	1822c <__assert_fail@plt+0x6f84>
   184dc:	mov	r3, r6
   184e0:	mov	r2, #0
   184e4:	ldr	r9, [r4, #12]
   184e8:	b	184fc <__assert_fail@plt+0x7254>
   184ec:	bge	18690 <__assert_fail@plt+0x73e8>
   184f0:	add	r2, r1, #1
   184f4:	cmp	r2, r3
   184f8:	bge	18538 <__assert_fail@plt+0x7290>
   184fc:	add	r1, r2, r3
   18500:	add	r1, r1, r1, lsr #31
   18504:	asr	r1, r1, #1
   18508:	ldr	r0, [r9, r1, lsl #2]
   1850c:	cmp	r0, r5
   18510:	ble	184ec <__assert_fail@plt+0x7244>
   18514:	mov	r3, r1
   18518:	b	184f4 <__assert_fail@plt+0x724c>
   1851c:	ldr	r0, [r4, #4]
   18520:	add	r1, r0, r5
   18524:	bl	11008 <memmove@plt>
   18528:	ldr	r2, [r4, #28]
   1852c:	ldrb	r3, [r4, #75]	; 0x4b
   18530:	sub	r2, r2, r5
   18534:	b	18208 <__assert_fail@plt+0x6f60>
   18538:	cmp	r0, r5
   1853c:	addlt	sl, r1, #1
   18540:	bge	18690 <__assert_fail@plt+0x73e8>
   18544:	mov	r2, r8
   18548:	mov	r0, r4
   1854c:	bl	17ed0 <__assert_fail@plt+0x6c28>
   18550:	sub	r3, r5, sl
   18554:	cmp	r5, r6
   18558:	str	r0, [r4, #60]	; 0x3c
   1855c:	clz	r3, r3
   18560:	lsr	r3, r3, #5
   18564:	movge	r3, #0
   18568:	cmp	r3, #0
   1856c:	bne	1873c <__assert_fail@plt+0x7494>
   18570:	ldr	r1, [r4, #44]	; 0x2c
   18574:	mov	r3, #0
   18578:	cmp	sl, #0
   1857c:	ldr	r0, [r4, #52]	; 0x34
   18580:	strb	r3, [r4, #76]	; 0x4c
   18584:	sub	r1, r1, r7
   18588:	add	r2, r1, r5
   1858c:	sub	r0, r0, r7
   18590:	add	r3, r0, r5
   18594:	str	r2, [r4, #48]	; 0x30
   18598:	str	r3, [r4, #56]	; 0x38
   1859c:	ble	185cc <__assert_fail@plt+0x7324>
   185a0:	sub	r3, sl, #-1073741823	; 0xc0000001
   185a4:	ldr	r2, [r9, r3, lsl #2]
   185a8:	add	r3, r9, r3, lsl #2
   185ac:	cmp	r2, r5
   185b0:	beq	185c4 <__assert_fail@plt+0x731c>
   185b4:	b	185cc <__assert_fail@plt+0x7324>
   185b8:	ldr	r2, [r3, #-4]!
   185bc:	cmp	r2, r5
   185c0:	bne	185cc <__assert_fail@plt+0x7324>
   185c4:	subs	sl, sl, #1
   185c8:	bne	185b8 <__assert_fail@plt+0x7310>
   185cc:	cmp	sl, r6
   185d0:	bge	18628 <__assert_fail@plt+0x7380>
   185d4:	ldr	r3, [r4, #8]
   185d8:	lsl	ip, sl, #2
   185dc:	ldr	r2, [r3, sl, lsl #2]
   185e0:	add	r3, r3, ip
   185e4:	cmn	r2, #1
   185e8:	beq	185fc <__assert_fail@plt+0x7354>
   185ec:	b	18630 <__assert_fail@plt+0x7388>
   185f0:	ldr	r2, [r3, #4]!
   185f4:	cmn	r2, #1
   185f8:	bne	18630 <__assert_fail@plt+0x7388>
   185fc:	add	sl, sl, #1
   18600:	cmp	sl, r6
   18604:	lsl	ip, sl, #2
   18608:	bne	185f0 <__assert_fail@plt+0x7348>
   1860c:	mov	r3, #0
   18610:	mov	r2, r3
   18614:	str	r3, [r4, #28]
   18618:	ldrb	r3, [r4, #75]	; 0x4b
   1861c:	str	r2, [r4, #32]
   18620:	ldr	r2, [r4, #80]	; 0x50
   18624:	b	1822c <__assert_fail@plt+0x6f84>
   18628:	beq	1860c <__assert_fail@plt+0x7364>
   1862c:	lsl	ip, sl, #2
   18630:	ldr	r2, [r9, ip]
   18634:	sub	r2, r2, r5
   18638:	cmp	r2, #0
   1863c:	str	r2, [r4, #28]
   18640:	beq	18618 <__assert_fail@plt+0x7370>
   18644:	ble	1866c <__assert_fail@plt+0x73c4>
   18648:	ldr	r1, [r4, #8]
   1864c:	mov	r3, #0
   18650:	mvn	r0, #0
   18654:	sub	r1, r1, #4
   18658:	str	r0, [r1, #4]!
   1865c:	add	r3, r3, #1
   18660:	ldr	r2, [r4, #28]
   18664:	cmp	r2, r3
   18668:	bgt	18658 <__assert_fail@plt+0x73b0>
   1866c:	mov	r1, #255	; 0xff
   18670:	ldr	r0, [r4, #4]
   18674:	bl	111c4 <memset@plt>
   18678:	ldr	r2, [r4, #28]
   1867c:	ldr	r1, [r4, #48]	; 0x30
   18680:	ldr	r0, [r4, #56]	; 0x38
   18684:	sub	r1, r1, r5
   18688:	sub	r0, r0, r5
   1868c:	b	18618 <__assert_fail@plt+0x7370>
   18690:	mov	sl, r1
   18694:	sub	r1, r1, #1
   18698:	b	18544 <__assert_fail@plt+0x729c>
   1869c:	ldr	r9, [r4]
   186a0:	ldr	r1, [r4, #64]	; 0x40
   186a4:	add	r9, r9, r3
   186a8:	add	r3, r9, r5
   186ac:	ldrb	ip, [r3, #-1]
   186b0:	cmp	r1, #0
   186b4:	str	r0, [r4, #32]
   186b8:	ldr	r0, [r4, #68]	; 0x44
   186bc:	ldrbne	ip, [r1, ip]
   186c0:	asr	r1, ip, #5
   186c4:	and	r3, ip, #31
   186c8:	ldr	r1, [r0, r1, lsl #2]
   186cc:	lsr	r3, r1, r3
   186d0:	ands	r1, r3, #1
   186d4:	bne	186ec <__assert_fail@plt+0x7444>
   186d8:	cmp	ip, #10
   186dc:	bne	186ec <__assert_fail@plt+0x7444>
   186e0:	ldrb	r3, [r4, #77]	; 0x4d
   186e4:	cmp	r3, #0
   186e8:	movne	r1, #2
   186ec:	ldrb	r3, [r4, #75]	; 0x4b
   186f0:	str	r1, [r4, #60]	; 0x3c
   186f4:	ldr	r1, [r4, #48]	; 0x30
   186f8:	ldr	r0, [r4, #56]	; 0x38
   186fc:	cmp	r3, #0
   18700:	sub	r1, r1, r5
   18704:	sub	r0, r0, r5
   18708:	beq	18234 <__assert_fail@plt+0x6f8c>
   1870c:	str	r7, [r4, #24]
   18710:	str	r1, [r4, #48]	; 0x30
   18714:	str	r0, [r4, #56]	; 0x38
   18718:	b	182e4 <__assert_fail@plt+0x703c>
   1871c:	sub	r9, r9, r7
   18720:	str	r9, [r4, #28]
   18724:	mov	r2, r8
   18728:	sub	r1, r6, #1
   1872c:	mov	r0, r4
   18730:	bl	17ed0 <__assert_fail@plt+0x6c28>
   18734:	str	r0, [r4, #60]	; 0x3c
   18738:	b	184b4 <__assert_fail@plt+0x720c>
   1873c:	ldr	r3, [r9, sl, lsl #2]
   18740:	cmp	r3, r5
   18744:	bne	18570 <__assert_fail@plt+0x72c8>
   18748:	ldr	r0, [r4, #8]
   1874c:	lsl	r8, r5, #2
   18750:	sub	r2, r6, r5
   18754:	lsl	r2, r2, #2
   18758:	add	r1, r0, r8
   1875c:	bl	11008 <memmove@plt>
   18760:	ldr	r0, [r4, #4]
   18764:	ldr	r2, [r4, #28]
   18768:	add	r1, r0, r5
   1876c:	sub	r2, r2, r5
   18770:	bl	11008 <memmove@plt>
   18774:	ldr	r3, [r4, #28]
   18778:	ldr	r2, [r4, #32]
   1877c:	sub	r3, r3, r5
   18780:	cmp	r3, #0
   18784:	sub	r2, r2, r5
   18788:	str	r3, [r4, #28]
   1878c:	str	r2, [r4, #32]
   18790:	ble	187c0 <__assert_fail@plt+0x7518>
   18794:	ldr	r1, [r4, #12]
   18798:	mov	r2, #0
   1879c:	add	r0, r1, r8
   187a0:	sub	r1, r1, #4
   187a4:	ldr	r3, [r0], #4
   187a8:	add	r2, r2, #1
   187ac:	sub	r3, r3, r5
   187b0:	str	r3, [r1, #4]!
   187b4:	ldr	r3, [r4, #28]
   187b8:	cmp	r3, r2
   187bc:	bgt	187a4 <__assert_fail@plt+0x74fc>
   187c0:	ldr	r1, [r4, #48]	; 0x30
   187c4:	ldr	r0, [r4, #56]	; 0x38
   187c8:	ldrb	r3, [r4, #75]	; 0x4b
   187cc:	sub	r1, r1, r5
   187d0:	ldr	r2, [r4, #80]	; 0x50
   187d4:	sub	r0, r0, r5
   187d8:	b	1822c <__assert_fail@plt+0x6f84>
   187dc:	ldr	r5, [r4, #28]
   187e0:	ldr	r6, [r4, #36]	; 0x24
   187e4:	cmp	r1, r6
   187e8:	movlt	r6, r1
   187ec:	cmp	r6, r5
   187f0:	ble	189bc <__assert_fail@plt+0x7714>
   187f4:	bl	1114c <__ctype_toupper_loc@plt>
   187f8:	b	18818 <__assert_fail@plt+0x7570>
   187fc:	ldr	r3, [r1, r3, lsl #2]
   18800:	ldr	r2, [r4, #4]
   18804:	strb	r3, [r2, r5]
   18808:	add	r5, r5, #1
   1880c:	cmp	r6, r5
   18810:	beq	18850 <__assert_fail@plt+0x75a8>
   18814:	ldr	r7, [r4, #24]
   18818:	ldr	r3, [r4]
   1881c:	ldr	r2, [r4, #64]	; 0x40
   18820:	ldr	r1, [r0]
   18824:	add	r3, r3, r5
   18828:	ldrb	r3, [r3, r7]
   1882c:	cmp	r2, #0
   18830:	beq	187fc <__assert_fail@plt+0x7554>
   18834:	ldrb	r2, [r2, r3]
   18838:	ldr	r3, [r4, #4]
   1883c:	ldr	r2, [r1, r2, lsl #2]
   18840:	strb	r2, [r3, r5]
   18844:	add	r5, r5, #1
   18848:	cmp	r5, r6
   1884c:	bne	18814 <__assert_fail@plt+0x756c>
   18850:	str	r6, [r4, #28]
   18854:	str	r6, [r4, #32]
   18858:	b	18268 <__assert_fail@plt+0x6fc0>
   1885c:	mov	r1, sl
   18860:	str	sl, [sp]
   18864:	ldr	r2, [r4, #48]	; 0x30
   18868:	ldr	r3, [r4, #64]	; 0x40
   1886c:	add	r2, r1, r2
   18870:	sub	r2, r2, r9
   18874:	cmp	r3, #0
   18878:	moveq	r1, r9
   1887c:	bne	189c4 <__assert_fail@plt+0x771c>
   18880:	mov	sl, #0
   18884:	mov	fp, #0
   18888:	add	r3, sp, #24
   1888c:	add	r0, sp, #12
   18890:	strd	sl, [sp, #24]
   18894:	bl	2addc <__assert_fail@plt+0x19b34>
   18898:	ldr	r3, [sp]
   1889c:	add	sl, r3, r5
   188a0:	sub	r9, sl, r9
   188a4:	cmp	r0, r9
   188a8:	bcc	188b4 <__assert_fail@plt+0x760c>
   188ac:	cmn	r0, #3
   188b0:	bls	188c0 <__assert_fail@plt+0x7618>
   188b4:	ldr	r3, [r4, #24]
   188b8:	ldr	r1, [r4, #32]
   188bc:	b	18410 <__assert_fail@plt+0x7168>
   188c0:	ldr	r1, [sp, #12]
   188c4:	sub	r9, r0, r9
   188c8:	mov	r2, #0
   188cc:	mov	r3, #0
   188d0:	strd	r2, [r4, #16]
   188d4:	str	r9, [r4, #28]
   188d8:	cmn	r1, #1
   188dc:	bne	18488 <__assert_fail@plt+0x71e0>
   188e0:	b	188b4 <__assert_fail@plt+0x760c>
   188e4:	ldr	r0, [r4, #44]	; 0x2c
   188e8:	mov	ip, #0
   188ec:	ldr	r2, [r4, #52]	; 0x34
   188f0:	strb	ip, [r4, #76]	; 0x4c
   188f4:	sub	r0, r0, r7
   188f8:	add	r0, r0, r5
   188fc:	sub	r2, r2, r7
   18900:	add	r2, r2, r5
   18904:	str	r0, [r4, #48]	; 0x30
   18908:	str	r2, [r4, #56]	; 0x38
   1890c:	b	18380 <__assert_fail@plt+0x70d8>
   18910:	mov	r1, #0
   18914:	cmp	sl, r1
   18918:	cmpne	r0, r1
   1891c:	mov	r0, #1
   18920:	ldrne	r3, [r4]
   18924:	ldrbne	r1, [r3, r9]
   18928:	ldrd	r2, [sp, #24]
   1892c:	strd	r2, [fp]
   18930:	b	18460 <__assert_fail@plt+0x71b8>
   18934:	ble	1895c <__assert_fail@plt+0x76b4>
   18938:	ldr	r2, [r4, #8]
   1893c:	mov	r3, #0
   18940:	mvn	r1, #0
   18944:	sub	r2, r2, #4
   18948:	str	r1, [r2, #4]!
   1894c:	add	r3, r3, #1
   18950:	ldr	r9, [r4, #28]
   18954:	cmp	r9, r3
   18958:	bgt	18948 <__assert_fail@plt+0x76a0>
   1895c:	ldrb	r3, [r4, #75]	; 0x4b
   18960:	cmp	r3, #0
   18964:	beq	184c0 <__assert_fail@plt+0x7218>
   18968:	mov	r2, r9
   1896c:	mov	r1, #255	; 0xff
   18970:	ldr	r0, [r4, #4]
   18974:	bl	111c4 <memset@plt>
   18978:	ldrb	r3, [r4, #75]	; 0x4b
   1897c:	ldr	r9, [r4, #28]
   18980:	b	184c0 <__assert_fail@plt+0x7218>
   18984:	mov	r0, r1
   18988:	str	r1, [sp]
   1898c:	bl	111ac <iswalnum@plt>
   18990:	ldr	r1, [sp]
   18994:	subs	r3, r1, #95	; 0x5f
   18998:	movne	r3, #1
   1899c:	cmp	r0, #0
   189a0:	movne	r3, #0
   189a4:	cmp	r3, #0
   189a8:	moveq	r3, #1
   189ac:	beq	184b0 <__assert_fail@plt+0x7208>
   189b0:	b	18494 <__assert_fail@plt+0x71ec>
   189b4:	mov	r1, r2
   189b8:	b	1836c <__assert_fail@plt+0x70c4>
   189bc:	mov	r6, r5
   189c0:	b	18850 <__assert_fail@plt+0x75a8>
   189c4:	cmp	r2, #6
   189c8:	movlt	r1, r2
   189cc:	movge	r1, #6
   189d0:	subs	r0, r1, #1
   189d4:	bmi	18a7c <__assert_fail@plt+0x77d4>
   189d8:	ldrb	lr, [r9, r0]
   189dc:	add	ip, sp, #32
   189e0:	add	ip, ip, r0
   189e4:	sub	r0, r1, #2
   189e8:	cmn	r0, #1
   189ec:	ldrb	lr, [r3, lr]
   189f0:	strb	lr, [ip, #-16]
   189f4:	beq	18a7c <__assert_fail@plt+0x77d4>
   189f8:	ldrb	lr, [r9, r0]
   189fc:	add	ip, sp, #32
   18a00:	add	ip, ip, r0
   18a04:	sub	r0, r1, #3
   18a08:	cmn	r0, #1
   18a0c:	ldrb	lr, [r3, lr]
   18a10:	strb	lr, [ip, #-16]
   18a14:	beq	18a7c <__assert_fail@plt+0x77d4>
   18a18:	ldrb	lr, [r9, r0]
   18a1c:	add	ip, sp, #32
   18a20:	add	ip, ip, r0
   18a24:	sub	r0, r1, #4
   18a28:	cmn	r0, #1
   18a2c:	ldrb	lr, [r3, lr]
   18a30:	strb	lr, [ip, #-16]
   18a34:	beq	18a7c <__assert_fail@plt+0x77d4>
   18a38:	ldrb	ip, [r9, r0]
   18a3c:	add	lr, sp, #32
   18a40:	sub	r1, r1, #5
   18a44:	add	r0, lr, r0
   18a48:	cmn	r1, #1
   18a4c:	ldrb	ip, [r3, ip]
   18a50:	strb	ip, [r0, #-16]
   18a54:	beq	18a7c <__assert_fail@plt+0x77d4>
   18a58:	ldrb	r0, [r9, r1]
   18a5c:	add	r1, lr, r1
   18a60:	cmp	r2, #5
   18a64:	ldrb	r0, [r3, r0]
   18a68:	strb	r0, [r1, #-16]
   18a6c:	ble	18a7c <__assert_fail@plt+0x77d4>
   18a70:	ldrb	r1, [r9]
   18a74:	ldrb	r3, [r3, r1]
   18a78:	strb	r3, [sp, #16]
   18a7c:	add	r1, sp, #16
   18a80:	b	18880 <__assert_fail@plt+0x75d8>
   18a84:	strd	r4, [sp, #-16]!
   18a88:	mov	r4, r1
   18a8c:	mov	r1, r2
   18a90:	ldr	r2, [r0, #88]	; 0x58
   18a94:	mov	r5, r0
   18a98:	str	r6, [sp, #8]
   18a9c:	str	lr, [sp, #12]
   18aa0:	bl	17ed0 <__assert_fail@plt+0x6c28>
   18aa4:	ldr	r1, [r4, #8]
   18aa8:	cmp	r1, #0
   18aac:	ble	18b18 <__assert_fail@plt+0x7870>
   18ab0:	ldr	ip, [r5, #84]	; 0x54
   18ab4:	ands	r3, r0, #1
   18ab8:	and	r2, r0, #2
   18abc:	and	r0, r0, #8
   18ac0:	ldr	lr, [r4, #12]
   18ac4:	ldr	ip, [ip]
   18ac8:	beq	18b2c <__assert_fail@plt+0x7884>
   18acc:	cmp	r2, #0
   18ad0:	beq	18c5c <__assert_fail@plt+0x79b4>
   18ad4:	cmp	r0, #0
   18ad8:	beq	18cec <__assert_fail@plt+0x7a44>
   18adc:	mov	r2, #0
   18ae0:	ldr	r0, [lr, r2, lsl #2]
   18ae4:	add	r2, r2, #1
   18ae8:	add	r3, ip, r0, lsl #3
   18aec:	ldrb	r4, [r3, #4]
   18af0:	ldr	r3, [r3, #4]
   18af4:	cmp	r4, #2
   18af8:	ubfx	r3, r3, #8, #10
   18afc:	bne	18b10 <__assert_fail@plt+0x7868>
   18b00:	cmp	r3, #0
   18b04:	beq	18b70 <__assert_fail@plt+0x78c8>
   18b08:	tst	r3, #8
   18b0c:	beq	18b70 <__assert_fail@plt+0x78c8>
   18b10:	cmp	r1, r2
   18b14:	bne	18ae0 <__assert_fail@plt+0x7838>
   18b18:	ldrd	r4, [sp]
   18b1c:	mov	r0, #0
   18b20:	ldr	r6, [sp, #8]
   18b24:	add	sp, sp, #12
   18b28:	pop	{pc}		; (ldr pc, [sp], #4)
   18b2c:	cmp	r2, #0
   18b30:	beq	18bcc <__assert_fail@plt+0x7924>
   18b34:	cmp	r0, #0
   18b38:	sub	lr, lr, #4
   18b3c:	beq	18b8c <__assert_fail@plt+0x78e4>
   18b40:	ldr	r0, [lr, #4]!
   18b44:	add	r3, r3, #1
   18b48:	add	r2, ip, r0, lsl #3
   18b4c:	ldrb	r4, [r2, #4]
   18b50:	ldr	r2, [r2, #4]
   18b54:	cmp	r4, #2
   18b58:	ubfx	r2, r2, #8, #10
   18b5c:	bne	18b80 <__assert_fail@plt+0x78d8>
   18b60:	cmp	r2, #0
   18b64:	beq	18b70 <__assert_fail@plt+0x78c8>
   18b68:	tst	r2, #4
   18b6c:	bne	18b80 <__assert_fail@plt+0x78d8>
   18b70:	ldrd	r4, [sp]
   18b74:	ldr	r6, [sp, #8]
   18b78:	add	sp, sp, #12
   18b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   18b80:	cmp	r1, r3
   18b84:	bne	18b40 <__assert_fail@plt+0x7898>
   18b88:	b	18b18 <__assert_fail@plt+0x7870>
   18b8c:	mov	r3, r0
   18b90:	ldr	r0, [lr, #4]!
   18b94:	add	r3, r3, #1
   18b98:	add	r2, ip, r0, lsl #3
   18b9c:	ldrb	r4, [r2, #4]
   18ba0:	ldr	r2, [r2, #4]
   18ba4:	cmp	r4, #2
   18ba8:	ubfx	r2, r2, #8, #10
   18bac:	bne	18bc0 <__assert_fail@plt+0x7918>
   18bb0:	cmp	r2, #0
   18bb4:	beq	18b70 <__assert_fail@plt+0x78c8>
   18bb8:	tst	r2, #132	; 0x84
   18bbc:	beq	18b70 <__assert_fail@plt+0x78c8>
   18bc0:	cmp	r1, r3
   18bc4:	bne	18b90 <__assert_fail@plt+0x78e8>
   18bc8:	b	18b18 <__assert_fail@plt+0x7870>
   18bcc:	cmp	r0, #0
   18bd0:	beq	18c18 <__assert_fail@plt+0x7970>
   18bd4:	sub	lr, lr, #4
   18bd8:	mov	r3, r2
   18bdc:	ldr	r0, [lr, #4]!
   18be0:	add	r3, r3, #1
   18be4:	add	r2, ip, r0, lsl #3
   18be8:	ldrb	r4, [r2, #4]
   18bec:	ldr	r2, [r2, #4]
   18bf0:	cmp	r4, #2
   18bf4:	ubfx	r2, r2, #8, #10
   18bf8:	bne	18c0c <__assert_fail@plt+0x7964>
   18bfc:	cmp	r2, #0
   18c00:	beq	18b70 <__assert_fail@plt+0x78c8>
   18c04:	tst	r2, #36	; 0x24
   18c08:	beq	18b70 <__assert_fail@plt+0x78c8>
   18c0c:	cmp	r1, r3
   18c10:	bne	18bdc <__assert_fail@plt+0x7934>
   18c14:	b	18b18 <__assert_fail@plt+0x7870>
   18c18:	sub	r2, lr, #4
   18c1c:	mov	r3, r0
   18c20:	ldr	r0, [r2, #4]!
   18c24:	add	r3, r3, #1
   18c28:	add	lr, ip, r0, lsl #3
   18c2c:	ldrb	r4, [lr, #4]
   18c30:	ldr	lr, [lr, #4]
   18c34:	cmp	r4, #2
   18c38:	ubfx	lr, lr, #8, #10
   18c3c:	bne	18c50 <__assert_fail@plt+0x79a8>
   18c40:	cmp	lr, #0
   18c44:	beq	18b70 <__assert_fail@plt+0x78c8>
   18c48:	tst	lr, #164	; 0xa4
   18c4c:	beq	18b70 <__assert_fail@plt+0x78c8>
   18c50:	cmp	r1, r3
   18c54:	bne	18c20 <__assert_fail@plt+0x7978>
   18c58:	b	18b18 <__assert_fail@plt+0x7870>
   18c5c:	cmp	r0, #0
   18c60:	beq	18ca4 <__assert_fail@plt+0x79fc>
   18c64:	mov	r3, r2
   18c68:	ldr	r0, [lr, r3, lsl #2]
   18c6c:	add	r2, ip, r0, lsl #3
   18c70:	ldrb	r4, [r2, #4]
   18c74:	ldr	r2, [r2, #4]
   18c78:	cmp	r4, #2
   18c7c:	ubfx	r2, r2, #8, #10
   18c80:	bne	18c94 <__assert_fail@plt+0x79ec>
   18c84:	cmp	r2, #0
   18c88:	beq	18b70 <__assert_fail@plt+0x78c8>
   18c8c:	tst	r2, #8
   18c90:	beq	18d2c <__assert_fail@plt+0x7a84>
   18c94:	add	r3, r3, #1
   18c98:	cmp	r1, r3
   18c9c:	bne	18c68 <__assert_fail@plt+0x79c0>
   18ca0:	b	18b18 <__assert_fail@plt+0x7870>
   18ca4:	mov	r3, r0
   18ca8:	ldr	r0, [lr, r3, lsl #2]
   18cac:	add	r2, ip, r0, lsl #3
   18cb0:	ldrb	r4, [r2, #4]
   18cb4:	ldr	r2, [r2, #4]
   18cb8:	cmp	r4, #2
   18cbc:	ubfx	r2, r2, #8, #10
   18cc0:	bne	18cdc <__assert_fail@plt+0x7a34>
   18cc4:	cmp	r2, #0
   18cc8:	beq	18b70 <__assert_fail@plt+0x78c8>
   18ccc:	tst	r2, #8
   18cd0:	bne	18cdc <__assert_fail@plt+0x7a34>
   18cd4:	tst	r2, #160	; 0xa0
   18cd8:	beq	18b70 <__assert_fail@plt+0x78c8>
   18cdc:	add	r3, r3, #1
   18ce0:	cmp	r3, r1
   18ce4:	bne	18ca8 <__assert_fail@plt+0x7a00>
   18ce8:	b	18b18 <__assert_fail@plt+0x7870>
   18cec:	mov	r3, r0
   18cf0:	ldr	r0, [lr, r3, lsl #2]
   18cf4:	add	r2, ip, r0, lsl #3
   18cf8:	ldrb	r4, [r2, #4]
   18cfc:	ldr	r2, [r2, #4]
   18d00:	cmp	r4, #2
   18d04:	ubfx	r2, r2, #8, #10
   18d08:	bne	18d1c <__assert_fail@plt+0x7a74>
   18d0c:	cmp	r2, #0
   18d10:	beq	18b70 <__assert_fail@plt+0x78c8>
   18d14:	tst	r2, #8
   18d18:	beq	18d38 <__assert_fail@plt+0x7a90>
   18d1c:	add	r3, r3, #1
   18d20:	cmp	r1, r3
   18d24:	bne	18cf0 <__assert_fail@plt+0x7a48>
   18d28:	b	18b18 <__assert_fail@plt+0x7870>
   18d2c:	tst	r2, #32
   18d30:	beq	18b70 <__assert_fail@plt+0x78c8>
   18d34:	b	18c94 <__assert_fail@plt+0x79ec>
   18d38:	tst	r2, #128	; 0x80
   18d3c:	beq	18b70 <__assert_fail@plt+0x78c8>
   18d40:	b	18d1c <__assert_fail@plt+0x7a74>
   18d44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18d48:	strd	r6, [sp, #8]
   18d4c:	strd	sl, [sp, #24]
   18d50:	ldr	fp, [r1]
   18d54:	strd	r8, [sp, #16]
   18d58:	str	lr, [sp, #32]
   18d5c:	sub	sp, sp, #12
   18d60:	ldr	r6, [r0, #84]	; 0x54
   18d64:	cmp	fp, #0
   18d68:	ble	18e24 <__assert_fail@plt+0x7b7c>
   18d6c:	mov	r8, r3
   18d70:	mov	r9, r2
   18d74:	mov	sl, r0
   18d78:	mov	r7, r1
   18d7c:	mov	r4, #0
   18d80:	b	18d8c <__assert_fail@plt+0x7ae4>
   18d84:	cmp	r4, fp
   18d88:	bge	18e24 <__assert_fail@plt+0x7b7c>
   18d8c:	ldr	r3, [r9]
   18d90:	ldr	ip, [r6]
   18d94:	ldr	r5, [r3, r4, lsl #2]
   18d98:	add	r4, r4, #1
   18d9c:	add	lr, ip, r5, lsl #3
   18da0:	ldrb	lr, [lr, #4]
   18da4:	cmp	lr, #8
   18da8:	bne	18d84 <__assert_fail@plt+0x7adc>
   18dac:	ldr	r3, [ip, r5, lsl #3]
   18db0:	cmp	r3, #31
   18db4:	bgt	18d84 <__assert_fail@plt+0x7adc>
   18db8:	ldr	r2, [r6, #80]	; 0x50
   18dbc:	lsr	r3, r2, r3
   18dc0:	tst	r3, #1
   18dc4:	beq	18d84 <__assert_fail@plt+0x7adc>
   18dc8:	ldr	fp, [sl, #124]	; 0x7c
   18dcc:	ldr	r3, [sl, #128]	; 0x80
   18dd0:	ldr	r2, [sl, #132]	; 0x84
   18dd4:	cmp	r3, fp
   18dd8:	beq	18e4c <__assert_fail@plt+0x7ba4>
   18ddc:	mov	r1, #24
   18de0:	mov	r0, #1
   18de4:	str	r2, [sp, #4]
   18de8:	bl	2aad4 <__assert_fail@plt+0x1982c>
   18dec:	ldr	r2, [sp, #4]
   18df0:	ldr	r3, [sl, #124]	; 0x7c
   18df4:	str	r0, [r2, fp, lsl #2]
   18df8:	ldr	r2, [sl, #132]	; 0x84
   18dfc:	add	r1, r3, #1
   18e00:	ldr	r3, [r2, r3, lsl #2]
   18e04:	cmp	r3, #0
   18e08:	beq	18e44 <__assert_fail@plt+0x7b9c>
   18e0c:	str	r5, [r3, #4]
   18e10:	str	r1, [sl, #124]	; 0x7c
   18e14:	str	r8, [r3]
   18e18:	ldr	fp, [r7]
   18e1c:	cmp	r4, fp
   18e20:	blt	18d8c <__assert_fail@plt+0x7ae4>
   18e24:	mov	r0, #0
   18e28:	add	sp, sp, #12
   18e2c:	ldrd	r4, [sp]
   18e30:	ldrd	r6, [sp, #8]
   18e34:	ldrd	r8, [sp, #16]
   18e38:	ldrd	sl, [sp, #24]
   18e3c:	add	sp, sp, #32
   18e40:	pop	{pc}		; (ldr pc, [sp], #4)
   18e44:	mov	r0, #12
   18e48:	b	18e28 <__assert_fail@plt+0x7b80>
   18e4c:	mov	r0, r2
   18e50:	lsl	r1, fp, #3
   18e54:	bl	2ab84 <__assert_fail@plt+0x198dc>
   18e58:	subs	r2, r0, #0
   18e5c:	lsl	r3, fp, #1
   18e60:	beq	18e44 <__assert_fail@plt+0x7b9c>
   18e64:	str	r3, [sl, #128]	; 0x80
   18e68:	str	r2, [sl, #132]	; 0x84
   18e6c:	ldr	fp, [sl, #124]	; 0x7c
   18e70:	b	18ddc <__assert_fail@plt+0x7b34>
   18e74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e78:	mov	r5, r1
   18e7c:	strd	r6, [sp, #8]
   18e80:	mov	r6, r0
   18e84:	strd	r8, [sp, #16]
   18e88:	mov	r8, r3
   18e8c:	strd	sl, [sp, #24]
   18e90:	mov	sl, r2
   18e94:	str	lr, [sp, #32]
   18e98:	sub	sp, sp, #4
   18e9c:	ldr	r9, [sp, #40]	; 0x28
   18ea0:	ldr	ip, [sp, #48]	; 0x30
   18ea4:	ldr	r7, [sp, #44]	; 0x2c
   18ea8:	tst	ip, #4194304	; 0x400000
   18eac:	beq	18ed0 <__assert_fail@plt+0x7c28>
   18eb0:	mov	r0, r7
   18eb4:	movw	r1, #49068	; 0xbfac
   18eb8:	movt	r1, #2
   18ebc:	bl	10fd8 <strcmp@plt>
   18ec0:	cmp	r0, #0
   18ec4:	movweq	r7, #49060	; 0xbfa4
   18ec8:	movteq	r7, #2
   18ecc:	bne	18fd4 <__assert_fail@plt+0x7d2c>
   18ed0:	ldr	r4, [r8]
   18ed4:	ldr	r3, [r9]
   18ed8:	ldr	fp, [sl]
   18edc:	cmp	r3, r4
   18ee0:	beq	190b8 <__assert_fail@plt+0x7e10>
   18ee4:	add	r3, r4, #1
   18ee8:	mov	r0, r7
   18eec:	str	r3, [r8]
   18ef0:	bl	10fb4 <wctype@plt>
   18ef4:	movw	r1, #49084	; 0xbfbc
   18ef8:	movt	r1, #2
   18efc:	str	r0, [fp, r4, lsl #2]
   18f00:	mov	r0, r7
   18f04:	bl	10fd8 <strcmp@plt>
   18f08:	subs	r4, r0, #0
   18f0c:	beq	18f8c <__assert_fail@plt+0x7ce4>
   18f10:	movw	r1, #49092	; 0xbfc4
   18f14:	movt	r1, #2
   18f18:	mov	r0, r7
   18f1c:	bl	10fd8 <strcmp@plt>
   18f20:	subs	r4, r0, #0
   18f24:	bne	18ff8 <__assert_fail@plt+0x7d50>
   18f28:	bl	11170 <__ctype_b_loc@plt>
   18f2c:	ldr	r3, [r0]
   18f30:	cmp	r6, #0
   18f34:	moveq	ip, #1
   18f38:	sub	r3, r3, #2
   18f3c:	bne	191e0 <__assert_fail@plt+0x7f38>
   18f40:	ldrh	r2, [r3, #2]!
   18f44:	asr	r1, r4, #5
   18f48:	and	r0, r4, #31
   18f4c:	add	r4, r4, #1
   18f50:	tst	r2, #2
   18f54:	beq	18f64 <__assert_fail@plt+0x7cbc>
   18f58:	ldr	r2, [r5, r1, lsl #2]
   18f5c:	orr	r2, r2, ip, lsl r0
   18f60:	str	r2, [r5, r1, lsl #2]
   18f64:	cmp	r4, #256	; 0x100
   18f68:	bne	18f40 <__assert_fail@plt+0x7c98>
   18f6c:	mov	r0, #0
   18f70:	add	sp, sp, #4
   18f74:	ldrd	r4, [sp]
   18f78:	ldrd	r6, [sp, #8]
   18f7c:	ldrd	r8, [sp, #16]
   18f80:	ldrd	sl, [sp, #24]
   18f84:	add	sp, sp, #32
   18f88:	pop	{pc}		; (ldr pc, [sp], #4)
   18f8c:	bl	11170 <__ctype_b_loc@plt>
   18f90:	ldr	r3, [r0]
   18f94:	cmp	r6, #0
   18f98:	moveq	lr, #1
   18f9c:	sub	r3, r3, #2
   18fa0:	bne	191a4 <__assert_fail@plt+0x7efc>
   18fa4:	ldrh	r0, [r3, #2]!
   18fa8:	asr	r2, r4, #5
   18fac:	and	ip, r4, #31
   18fb0:	add	r4, r4, #1
   18fb4:	tst	r0, #8
   18fb8:	beq	18fc8 <__assert_fail@plt+0x7d20>
   18fbc:	ldr	r1, [r5, r2, lsl #2]
   18fc0:	orr	r1, r1, lr, lsl ip
   18fc4:	str	r1, [r5, r2, lsl #2]
   18fc8:	cmp	r4, #256	; 0x100
   18fcc:	bne	18fa4 <__assert_fail@plt+0x7cfc>
   18fd0:	b	18f6c <__assert_fail@plt+0x7cc4>
   18fd4:	mov	r0, r7
   18fd8:	movw	r1, #49076	; 0xbfb4
   18fdc:	movt	r1, #2
   18fe0:	bl	10fd8 <strcmp@plt>
   18fe4:	cmp	r0, #0
   18fe8:	movw	r3, #49060	; 0xbfa4
   18fec:	movt	r3, #2
   18ff0:	moveq	r7, r3
   18ff4:	b	18ed0 <__assert_fail@plt+0x7c28>
   18ff8:	movw	r1, #49076	; 0xbfb4
   18ffc:	movt	r1, #2
   19000:	mov	r0, r7
   19004:	bl	10fd8 <strcmp@plt>
   19008:	subs	r4, r0, #0
   1900c:	beq	19070 <__assert_fail@plt+0x7dc8>
   19010:	movw	r1, #49100	; 0xbfcc
   19014:	movt	r1, #2
   19018:	mov	r0, r7
   1901c:	bl	10fd8 <strcmp@plt>
   19020:	subs	r4, r0, #0
   19024:	bne	190e4 <__assert_fail@plt+0x7e3c>
   19028:	bl	11170 <__ctype_b_loc@plt>
   1902c:	ldr	r3, [r0]
   19030:	cmp	r6, #0
   19034:	moveq	ip, #1
   19038:	sub	r3, r3, #2
   1903c:	bne	193bc <__assert_fail@plt+0x8114>
   19040:	ldrh	r2, [r3, #2]!
   19044:	asr	r1, r4, #5
   19048:	and	r0, r4, #31
   1904c:	add	r4, r4, #1
   19050:	tst	r2, #8192	; 0x2000
   19054:	beq	19064 <__assert_fail@plt+0x7dbc>
   19058:	ldr	r2, [r5, r1, lsl #2]
   1905c:	orr	r2, r2, ip, lsl r0
   19060:	str	r2, [r5, r1, lsl #2]
   19064:	cmp	r4, #256	; 0x100
   19068:	bne	19040 <__assert_fail@plt+0x7d98>
   1906c:	b	18f6c <__assert_fail@plt+0x7cc4>
   19070:	bl	11170 <__ctype_b_loc@plt>
   19074:	ldr	r3, [r0]
   19078:	cmp	r6, #0
   1907c:	moveq	ip, #1
   19080:	sub	r3, r3, #2
   19084:	bne	1921c <__assert_fail@plt+0x7f74>
   19088:	ldrh	r2, [r3, #2]!
   1908c:	asr	r1, r4, #5
   19090:	and	r0, r4, #31
   19094:	add	r4, r4, #1
   19098:	tst	r2, #512	; 0x200
   1909c:	beq	190ac <__assert_fail@plt+0x7e04>
   190a0:	ldr	r2, [r5, r1, lsl #2]
   190a4:	orr	r2, r2, ip, lsl r0
   190a8:	str	r2, [r5, r1, lsl #2]
   190ac:	cmp	r4, #256	; 0x100
   190b0:	bne	19088 <__assert_fail@plt+0x7de0>
   190b4:	b	18f6c <__assert_fail@plt+0x7cc4>
   190b8:	lsl	r4, r4, #1
   190bc:	mov	r0, fp
   190c0:	add	r4, r4, #1
   190c4:	lsl	r1, r4, #2
   190c8:	bl	2ab84 <__assert_fail@plt+0x198dc>
   190cc:	subs	fp, r0, #0
   190d0:	beq	19318 <__assert_fail@plt+0x8070>
   190d4:	str	fp, [sl]
   190d8:	str	r4, [r9]
   190dc:	ldr	r4, [r8]
   190e0:	b	18ee4 <__assert_fail@plt+0x7c3c>
   190e4:	movw	r1, #49060	; 0xbfa4
   190e8:	movt	r1, #2
   190ec:	mov	r0, r7
   190f0:	bl	10fd8 <strcmp@plt>
   190f4:	subs	r4, r0, #0
   190f8:	beq	1915c <__assert_fail@plt+0x7eb4>
   190fc:	movw	r1, #49108	; 0xbfd4
   19100:	movt	r1, #2
   19104:	mov	r0, r7
   19108:	bl	10fd8 <strcmp@plt>
   1910c:	subs	r4, r0, #0
   19110:	bne	19258 <__assert_fail@plt+0x7fb0>
   19114:	bl	11170 <__ctype_b_loc@plt>
   19118:	ldr	r3, [r0]
   1911c:	cmp	r6, #0
   19120:	moveq	ip, #1
   19124:	sub	r3, r3, #2
   19128:	bne	193f8 <__assert_fail@plt+0x8150>
   1912c:	ldrh	r1, [r3, #2]!
   19130:	asr	r2, r4, #5
   19134:	and	r0, r4, #31
   19138:	add	r4, r4, #1
   1913c:	tst	r1, #2048	; 0x800
   19140:	beq	19150 <__assert_fail@plt+0x7ea8>
   19144:	ldr	r1, [r5, r2, lsl #2]
   19148:	orr	r1, r1, ip, lsl r0
   1914c:	str	r1, [r5, r2, lsl #2]
   19150:	cmp	r4, #256	; 0x100
   19154:	bne	1912c <__assert_fail@plt+0x7e84>
   19158:	b	18f6c <__assert_fail@plt+0x7cc4>
   1915c:	bl	11170 <__ctype_b_loc@plt>
   19160:	ldr	r3, [r0]
   19164:	cmp	r6, #0
   19168:	moveq	ip, #1
   1916c:	sub	r3, r3, #2
   19170:	bne	19380 <__assert_fail@plt+0x80d8>
   19174:	ldrh	r2, [r3, #2]!
   19178:	asr	r1, r4, #5
   1917c:	and	r0, r4, #31
   19180:	add	r4, r4, #1
   19184:	tst	r2, #1024	; 0x400
   19188:	beq	19198 <__assert_fail@plt+0x7ef0>
   1918c:	ldr	r2, [r5, r1, lsl #2]
   19190:	orr	r2, r2, ip, lsl r0
   19194:	str	r2, [r5, r1, lsl #2]
   19198:	cmp	r4, #256	; 0x100
   1919c:	bne	19174 <__assert_fail@plt+0x7ecc>
   191a0:	b	18f6c <__assert_fail@plt+0x7cc4>
   191a4:	add	ip, r6, #256	; 0x100
   191a8:	mov	lr, #1
   191ac:	ldrh	r2, [r3, #2]!
   191b0:	tst	r2, #8
   191b4:	beq	191d0 <__assert_fail@plt+0x7f28>
   191b8:	ldrb	r2, [r6]
   191bc:	asr	r0, r2, #5
   191c0:	and	r2, r2, #31
   191c4:	ldr	r1, [r5, r0, lsl #2]
   191c8:	orr	r2, r1, lr, lsl r2
   191cc:	str	r2, [r5, r0, lsl #2]
   191d0:	add	r6, r6, #1
   191d4:	cmp	ip, r6
   191d8:	bne	191ac <__assert_fail@plt+0x7f04>
   191dc:	b	18f6c <__assert_fail@plt+0x7cc4>
   191e0:	add	ip, r6, #256	; 0x100
   191e4:	mov	lr, #1
   191e8:	ldrh	r2, [r3, #2]!
   191ec:	tst	r2, #2
   191f0:	beq	1920c <__assert_fail@plt+0x7f64>
   191f4:	ldrb	r2, [r6]
   191f8:	asr	r0, r2, #5
   191fc:	and	r2, r2, #31
   19200:	ldr	r1, [r5, r0, lsl #2]
   19204:	orr	r2, r1, lr, lsl r2
   19208:	str	r2, [r5, r0, lsl #2]
   1920c:	add	r6, r6, #1
   19210:	cmp	ip, r6
   19214:	bne	191e8 <__assert_fail@plt+0x7f40>
   19218:	b	18f6c <__assert_fail@plt+0x7cc4>
   1921c:	add	ip, r6, #256	; 0x100
   19220:	mov	lr, #1
   19224:	ldrh	r2, [r3, #2]!
   19228:	tst	r2, #512	; 0x200
   1922c:	beq	19248 <__assert_fail@plt+0x7fa0>
   19230:	ldrb	r2, [r6]
   19234:	asr	r0, r2, #5
   19238:	and	r2, r2, #31
   1923c:	ldr	r1, [r5, r0, lsl #2]
   19240:	orr	r2, r1, lr, lsl r2
   19244:	str	r2, [r5, r0, lsl #2]
   19248:	add	r6, r6, #1
   1924c:	cmp	ip, r6
   19250:	bne	19224 <__assert_fail@plt+0x7f7c>
   19254:	b	18f6c <__assert_fail@plt+0x7cc4>
   19258:	movw	r1, #49116	; 0xbfdc
   1925c:	movt	r1, #2
   19260:	mov	r0, r7
   19264:	bl	10fd8 <strcmp@plt>
   19268:	subs	r4, r0, #0
   1926c:	bne	192b8 <__assert_fail@plt+0x8010>
   19270:	bl	11170 <__ctype_b_loc@plt>
   19274:	ldr	r3, [r0]
   19278:	cmp	r6, #0
   1927c:	moveq	ip, #1
   19280:	sub	r3, r3, #2
   19284:	bne	19608 <__assert_fail@plt+0x8360>
   19288:	ldrh	r2, [r3, #2]!
   1928c:	asr	r1, r4, #5
   19290:	and	r0, r4, #31
   19294:	add	r4, r4, #1
   19298:	tst	r2, #16384	; 0x4000
   1929c:	beq	192ac <__assert_fail@plt+0x8004>
   192a0:	ldr	r2, [r5, r1, lsl #2]
   192a4:	orr	r2, r2, ip, lsl r0
   192a8:	str	r2, [r5, r1, lsl #2]
   192ac:	cmp	r4, #256	; 0x100
   192b0:	bne	19288 <__assert_fail@plt+0x7fe0>
   192b4:	b	18f6c <__assert_fail@plt+0x7cc4>
   192b8:	movw	r1, #49068	; 0xbfac
   192bc:	movt	r1, #2
   192c0:	mov	r0, r7
   192c4:	bl	10fd8 <strcmp@plt>
   192c8:	subs	r4, r0, #0
   192cc:	bne	19320 <__assert_fail@plt+0x8078>
   192d0:	bl	11170 <__ctype_b_loc@plt>
   192d4:	ldr	r3, [r0]
   192d8:	cmp	r6, #0
   192dc:	moveq	ip, #1
   192e0:	sub	r3, r3, #2
   192e4:	bne	19680 <__assert_fail@plt+0x83d8>
   192e8:	ldrh	r2, [r3, #2]!
   192ec:	asr	r1, r4, #5
   192f0:	and	r0, r4, #31
   192f4:	add	r4, r4, #1
   192f8:	tst	r2, #256	; 0x100
   192fc:	beq	1930c <__assert_fail@plt+0x8064>
   19300:	ldr	r2, [r5, r1, lsl #2]
   19304:	orr	r2, r2, ip, lsl r0
   19308:	str	r2, [r5, r1, lsl #2]
   1930c:	cmp	r4, #256	; 0x100
   19310:	bne	192e8 <__assert_fail@plt+0x8040>
   19314:	b	18f6c <__assert_fail@plt+0x7cc4>
   19318:	mov	r0, #12
   1931c:	b	18f70 <__assert_fail@plt+0x7cc8>
   19320:	movw	r1, #49124	; 0xbfe4
   19324:	movt	r1, #2
   19328:	mov	r0, r7
   1932c:	bl	10fd8 <strcmp@plt>
   19330:	subs	r4, r0, #0
   19334:	bne	19434 <__assert_fail@plt+0x818c>
   19338:	bl	11170 <__ctype_b_loc@plt>
   1933c:	ldr	r3, [r0]
   19340:	cmp	r6, #0
   19344:	moveq	ip, #1
   19348:	sub	r3, r3, #2
   1934c:	bne	19644 <__assert_fail@plt+0x839c>
   19350:	ldrh	r2, [r3, #2]!
   19354:	asr	r1, r4, #5
   19358:	and	r0, r4, #31
   1935c:	add	r4, r4, #1
   19360:	tst	r2, #1
   19364:	beq	19374 <__assert_fail@plt+0x80cc>
   19368:	ldr	r2, [r5, r1, lsl #2]
   1936c:	orr	r2, r2, ip, lsl r0
   19370:	str	r2, [r5, r1, lsl #2]
   19374:	cmp	r4, #256	; 0x100
   19378:	bne	19350 <__assert_fail@plt+0x80a8>
   1937c:	b	18f6c <__assert_fail@plt+0x7cc4>
   19380:	add	ip, r6, #256	; 0x100
   19384:	mov	lr, #1
   19388:	ldrh	r2, [r3, #2]!
   1938c:	tst	r2, #1024	; 0x400
   19390:	beq	193ac <__assert_fail@plt+0x8104>
   19394:	ldrb	r2, [r6]
   19398:	asr	r0, r2, #5
   1939c:	and	r2, r2, #31
   193a0:	ldr	r1, [r5, r0, lsl #2]
   193a4:	orr	r2, r1, lr, lsl r2
   193a8:	str	r2, [r5, r0, lsl #2]
   193ac:	add	r6, r6, #1
   193b0:	cmp	ip, r6
   193b4:	bne	19388 <__assert_fail@plt+0x80e0>
   193b8:	b	18f6c <__assert_fail@plt+0x7cc4>
   193bc:	add	ip, r6, #256	; 0x100
   193c0:	mov	lr, #1
   193c4:	ldrh	r2, [r3, #2]!
   193c8:	tst	r2, #8192	; 0x2000
   193cc:	beq	193e8 <__assert_fail@plt+0x8140>
   193d0:	ldrb	r2, [r6]
   193d4:	asr	r0, r2, #5
   193d8:	and	r2, r2, #31
   193dc:	ldr	r1, [r5, r0, lsl #2]
   193e0:	orr	r2, r1, lr, lsl r2
   193e4:	str	r2, [r5, r0, lsl #2]
   193e8:	add	r6, r6, #1
   193ec:	cmp	ip, r6
   193f0:	bne	193c4 <__assert_fail@plt+0x811c>
   193f4:	b	18f6c <__assert_fail@plt+0x7cc4>
   193f8:	add	r1, r6, #256	; 0x100
   193fc:	mov	lr, #1
   19400:	ldrh	r2, [r3, #2]!
   19404:	tst	r2, #2048	; 0x800
   19408:	beq	19424 <__assert_fail@plt+0x817c>
   1940c:	ldrb	r2, [r6]
   19410:	asr	ip, r2, #5
   19414:	and	r2, r2, #31
   19418:	ldr	r0, [r5, ip, lsl #2]
   1941c:	orr	r2, r0, lr, lsl r2
   19420:	str	r2, [r5, ip, lsl #2]
   19424:	add	r6, r6, #1
   19428:	cmp	r1, r6
   1942c:	bne	19400 <__assert_fail@plt+0x8158>
   19430:	b	18f6c <__assert_fail@plt+0x7cc4>
   19434:	movw	r1, #49132	; 0xbfec
   19438:	movt	r1, #2
   1943c:	mov	r0, r7
   19440:	bl	10fd8 <strcmp@plt>
   19444:	subs	r4, r0, #0
   19448:	bne	194d0 <__assert_fail@plt+0x8228>
   1944c:	bl	11170 <__ctype_b_loc@plt>
   19450:	ldr	r3, [r0]
   19454:	cmp	r6, #0
   19458:	moveq	r0, #1
   1945c:	sub	r3, r3, #2
   19460:	bne	19494 <__assert_fail@plt+0x81ec>
   19464:	ldrsh	r2, [r3, #2]!
   19468:	asr	r1, r4, #5
   1946c:	and	ip, r4, #31
   19470:	add	r4, r4, #1
   19474:	cmp	r2, #0
   19478:	bge	19488 <__assert_fail@plt+0x81e0>
   1947c:	ldr	r2, [r5, r1, lsl #2]
   19480:	orr	r2, r2, r0, lsl ip
   19484:	str	r2, [r5, r1, lsl #2]
   19488:	cmp	r4, #256	; 0x100
   1948c:	bne	19464 <__assert_fail@plt+0x81bc>
   19490:	b	18f6c <__assert_fail@plt+0x7cc4>
   19494:	add	lr, r6, #256	; 0x100
   19498:	mov	ip, #1
   1949c:	ldrsh	r2, [r3, #2]!
   194a0:	cmp	r2, #0
   194a4:	bge	194c0 <__assert_fail@plt+0x8218>
   194a8:	ldrb	r2, [r6]
   194ac:	asr	r0, r2, #5
   194b0:	and	r2, r2, #31
   194b4:	ldr	r1, [r5, r0, lsl #2]
   194b8:	orr	r2, r1, ip, lsl r2
   194bc:	str	r2, [r5, r0, lsl #2]
   194c0:	add	r6, r6, #1
   194c4:	cmp	lr, r6
   194c8:	bne	1949c <__assert_fail@plt+0x81f4>
   194cc:	b	18f6c <__assert_fail@plt+0x7cc4>
   194d0:	movw	r1, #49140	; 0xbff4
   194d4:	movt	r1, #2
   194d8:	mov	r0, r7
   194dc:	bl	10fd8 <strcmp@plt>
   194e0:	subs	r4, r0, #0
   194e4:	bne	1956c <__assert_fail@plt+0x82c4>
   194e8:	bl	11170 <__ctype_b_loc@plt>
   194ec:	ldr	r3, [r0]
   194f0:	cmp	r6, #0
   194f4:	moveq	r0, #1
   194f8:	sub	r3, r3, #2
   194fc:	bne	19530 <__assert_fail@plt+0x8288>
   19500:	ldrh	r2, [r3, #2]!
   19504:	asr	r1, r4, #5
   19508:	and	ip, r4, #31
   1950c:	add	r4, r4, #1
   19510:	tst	r2, #4
   19514:	beq	19524 <__assert_fail@plt+0x827c>
   19518:	ldr	r2, [r5, r1, lsl #2]
   1951c:	orr	r2, r2, r0, lsl ip
   19520:	str	r2, [r5, r1, lsl #2]
   19524:	cmp	r4, #256	; 0x100
   19528:	bne	19500 <__assert_fail@plt+0x8258>
   1952c:	b	18f6c <__assert_fail@plt+0x7cc4>
   19530:	add	lr, r6, #256	; 0x100
   19534:	mov	ip, #1
   19538:	ldrh	r2, [r3, #2]!
   1953c:	tst	r2, #4
   19540:	beq	1955c <__assert_fail@plt+0x82b4>
   19544:	ldrb	r2, [r6]
   19548:	asr	r0, r2, #5
   1954c:	and	r2, r2, #31
   19550:	ldr	r1, [r5, r0, lsl #2]
   19554:	orr	r2, r1, ip, lsl r2
   19558:	str	r2, [r5, r0, lsl #2]
   1955c:	add	r6, r6, #1
   19560:	cmp	lr, r6
   19564:	bne	19538 <__assert_fail@plt+0x8290>
   19568:	b	18f6c <__assert_fail@plt+0x7cc4>
   1956c:	mov	r0, r7
   19570:	movw	r1, #49148	; 0xbffc
   19574:	movt	r1, #2
   19578:	bl	10fd8 <strcmp@plt>
   1957c:	subs	r4, r0, #0
   19580:	movne	r0, #4
   19584:	bne	18f70 <__assert_fail@plt+0x7cc8>
   19588:	bl	11170 <__ctype_b_loc@plt>
   1958c:	ldr	r3, [r0]
   19590:	cmp	r6, #0
   19594:	moveq	r0, #1
   19598:	sub	r3, r3, #2
   1959c:	bne	195d0 <__assert_fail@plt+0x8328>
   195a0:	ldrh	r2, [r3, #2]!
   195a4:	asr	r1, r4, #5
   195a8:	and	ip, r4, #31
   195ac:	add	r4, r4, #1
   195b0:	tst	r2, #4096	; 0x1000
   195b4:	beq	195c4 <__assert_fail@plt+0x831c>
   195b8:	ldr	r2, [r5, r1, lsl #2]
   195bc:	orr	r2, r2, r0, lsl ip
   195c0:	str	r2, [r5, r1, lsl #2]
   195c4:	cmp	r4, #256	; 0x100
   195c8:	bne	195a0 <__assert_fail@plt+0x82f8>
   195cc:	b	18f6c <__assert_fail@plt+0x7cc4>
   195d0:	mov	ip, #1
   195d4:	ldrh	r2, [r3, #2]!
   195d8:	tst	r2, #4096	; 0x1000
   195dc:	beq	195f8 <__assert_fail@plt+0x8350>
   195e0:	ldrb	r2, [r6, r4]
   195e4:	asr	r0, r2, #5
   195e8:	and	r2, r2, #31
   195ec:	ldr	r1, [r5, r0, lsl #2]
   195f0:	orr	r2, r1, ip, lsl r2
   195f4:	str	r2, [r5, r0, lsl #2]
   195f8:	add	r4, r4, #1
   195fc:	cmp	r4, #256	; 0x100
   19600:	bne	195d4 <__assert_fail@plt+0x832c>
   19604:	b	18f6c <__assert_fail@plt+0x7cc4>
   19608:	add	lr, r6, #256	; 0x100
   1960c:	mov	ip, #1
   19610:	ldrh	r2, [r3, #2]!
   19614:	tst	r2, #16384	; 0x4000
   19618:	beq	19634 <__assert_fail@plt+0x838c>
   1961c:	ldrb	r2, [r6]
   19620:	asr	r0, r2, #5
   19624:	and	r2, r2, #31
   19628:	ldr	r1, [r5, r0, lsl #2]
   1962c:	orr	r2, r1, ip, lsl r2
   19630:	str	r2, [r5, r0, lsl #2]
   19634:	add	r6, r6, #1
   19638:	cmp	lr, r6
   1963c:	bne	19610 <__assert_fail@plt+0x8368>
   19640:	b	18f6c <__assert_fail@plt+0x7cc4>
   19644:	add	lr, r6, #256	; 0x100
   19648:	mov	ip, #1
   1964c:	ldrh	r2, [r3, #2]!
   19650:	tst	r2, #1
   19654:	beq	19670 <__assert_fail@plt+0x83c8>
   19658:	ldrb	r2, [r6]
   1965c:	asr	r0, r2, #5
   19660:	and	r2, r2, #31
   19664:	ldr	r1, [r5, r0, lsl #2]
   19668:	orr	r2, r1, ip, lsl r2
   1966c:	str	r2, [r5, r0, lsl #2]
   19670:	add	r6, r6, #1
   19674:	cmp	lr, r6
   19678:	bne	1964c <__assert_fail@plt+0x83a4>
   1967c:	b	18f6c <__assert_fail@plt+0x7cc4>
   19680:	add	lr, r6, #256	; 0x100
   19684:	mov	ip, #1
   19688:	ldrh	r2, [r3, #2]!
   1968c:	tst	r2, #256	; 0x100
   19690:	beq	196ac <__assert_fail@plt+0x8404>
   19694:	ldrb	r2, [r6]
   19698:	asr	r0, r2, #5
   1969c:	and	r2, r2, #31
   196a0:	ldr	r1, [r5, r0, lsl #2]
   196a4:	orr	r2, r1, ip, lsl r2
   196a8:	str	r2, [r5, r0, lsl #2]
   196ac:	add	r6, r6, #1
   196b0:	cmp	lr, r6
   196b4:	bne	19688 <__assert_fail@plt+0x83e0>
   196b8:	b	18f6c <__assert_fail@plt+0x7cc4>
   196bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   196c0:	strd	r6, [sp, #8]
   196c4:	ldr	r6, [r0]
   196c8:	strd	r8, [sp, #16]
   196cc:	strd	sl, [sp, #24]
   196d0:	str	lr, [sp, #32]
   196d4:	sub	sp, sp, #316	; 0x13c
   196d8:	ldr	ip, [r6, #92]	; 0x5c
   196dc:	cmp	ip, #1
   196e0:	ldreq	ip, [r0, #12]
   196e4:	movne	ip, #0
   196e8:	ubfxeq	ip, ip, #22, #1
   196ec:	str	ip, [sp, #12]
   196f0:	ldr	ip, [r1]
   196f4:	cmp	ip, #0
   196f8:	ble	197dc <__assert_fail@plt+0x8534>
   196fc:	mov	r4, r3
   19700:	mov	r3, #255	; 0xff
   19704:	movt	r3, #32
   19708:	mov	r5, #0
   1970c:	str	r2, [sp, #4]
   19710:	str	r1, [sp, #20]
   19714:	str	r0, [sp, #24]
   19718:	str	r3, [sp, #32]
   1971c:	mov	r3, #1
   19720:	movt	r3, #32
   19724:	str	r3, [sp, #36]	; 0x24
   19728:	b	1975c <__assert_fail@plt+0x84b4>
   1972c:	cmp	r7, #3
   19730:	beq	19980 <__assert_fail@plt+0x86d8>
   19734:	cmp	r7, #6
   19738:	beq	197f8 <__assert_fail@plt+0x8550>
   1973c:	and	r3, r7, #253	; 0xfd
   19740:	cmp	r3, #5
   19744:	beq	19b38 <__assert_fail@plt+0x8890>
   19748:	cmp	r7, #2
   1974c:	beq	19b54 <__assert_fail@plt+0x88ac>
   19750:	add	r5, r5, #1
   19754:	cmp	r5, ip
   19758:	bge	197dc <__assert_fail@plt+0x8534>
   1975c:	ldr	r3, [sp, #4]
   19760:	ldr	r1, [r6]
   19764:	ldr	r3, [r3]
   19768:	ldr	r8, [r3, r5, lsl #2]
   1976c:	lsl	r3, r8, #3
   19770:	add	r2, r1, r3
   19774:	ldrb	r7, [r2, #4]
   19778:	cmp	r7, #1
   1977c:	bne	1972c <__assert_fail@plt+0x8484>
   19780:	ldr	r2, [sp, #12]
   19784:	ldrb	r9, [r1, r8, lsl #3]
   19788:	cmp	r2, #0
   1978c:	strb	r7, [r4, r9]
   19790:	beq	197ac <__assert_fail@plt+0x8504>
   19794:	str	r3, [sp, #8]
   19798:	bl	11140 <__ctype_tolower_loc@plt>
   1979c:	ldr	r2, [r0]
   197a0:	ldr	r3, [sp, #8]
   197a4:	ldr	r2, [r2, r9, lsl #2]
   197a8:	strb	r7, [r4, r2]
   197ac:	ldr	r2, [sp, #24]
   197b0:	ldr	r2, [r2, #12]
   197b4:	tst	r2, #4194304	; 0x400000
   197b8:	beq	197c8 <__assert_fail@plt+0x8520>
   197bc:	ldr	r2, [r6, #92]	; 0x5c
   197c0:	cmp	r2, #1
   197c4:	bgt	19a58 <__assert_fail@plt+0x87b0>
   197c8:	ldr	r3, [sp, #20]
   197cc:	add	r5, r5, #1
   197d0:	ldr	ip, [r3]
   197d4:	cmp	r5, ip
   197d8:	blt	1975c <__assert_fail@plt+0x84b4>
   197dc:	add	sp, sp, #316	; 0x13c
   197e0:	ldrd	r4, [sp]
   197e4:	ldrd	r6, [sp, #8]
   197e8:	ldrd	r8, [sp, #16]
   197ec:	ldrd	sl, [sp, #24]
   197f0:	add	sp, sp, #32
   197f4:	pop	{pc}		; (ldr pc, [sp], #4)
   197f8:	ldr	r1, [r6, #92]	; 0x5c
   197fc:	ldr	fp, [r2]
   19800:	cmp	r1, #1
   19804:	ble	1982c <__assert_fail@plt+0x8584>
   19808:	ldr	r2, [fp, #36]	; 0x24
   1980c:	cmp	r2, #0
   19810:	bne	1990c <__assert_fail@plt+0x8664>
   19814:	ldrb	r2, [fp, #16]
   19818:	tst	r2, #1
   1981c:	bne	1990c <__assert_fail@plt+0x8664>
   19820:	ldr	r2, [fp, #32]
   19824:	cmp	r2, #0
   19828:	bne	1990c <__assert_fail@plt+0x8664>
   1982c:	ldr	r2, [fp, #20]
   19830:	cmp	r2, #0
   19834:	ble	19750 <__assert_fail@plt+0x84a8>
   19838:	str	r5, [sp, #28]
   1983c:	mov	r5, fp
   19840:	mov	r7, #0
   19844:	ldr	fp, [sp, #24]
   19848:	add	r8, sp, #56	; 0x38
   1984c:	add	r9, sp, #48	; 0x30
   19850:	mov	sl, #1
   19854:	mov	r2, #0
   19858:	mov	r3, #0
   1985c:	mov	r0, r8
   19860:	strd	r2, [r9]
   19864:	lsl	r3, r7, #2
   19868:	mov	r2, r9
   1986c:	ldr	r1, [r5]
   19870:	str	r3, [sp, #8]
   19874:	ldr	r1, [r1, r7, lsl #2]
   19878:	add	r7, r7, #1
   1987c:	bl	10fc0 <wcrtomb@plt>
   19880:	cmn	r0, #1
   19884:	beq	198b4 <__assert_fail@plt+0x860c>
   19888:	ldr	r3, [sp, #12]
   1988c:	ldrb	r2, [sp, #56]	; 0x38
   19890:	cmp	r3, #0
   19894:	strb	sl, [r4, r2]
   19898:	str	r2, [sp, #16]
   1989c:	beq	198b4 <__assert_fail@plt+0x860c>
   198a0:	bl	11140 <__ctype_tolower_loc@plt>
   198a4:	ldr	r1, [r0]
   198a8:	ldr	r2, [sp, #16]
   198ac:	ldr	r2, [r1, r2, lsl #2]
   198b0:	strb	sl, [r4, r2]
   198b4:	ldr	r2, [fp, #12]
   198b8:	tst	r2, #4194304	; 0x400000
   198bc:	beq	198f8 <__assert_fail@plt+0x8650>
   198c0:	ldr	r2, [r6, #92]	; 0x5c
   198c4:	cmp	r2, #1
   198c8:	ble	198f8 <__assert_fail@plt+0x8650>
   198cc:	ldr	r2, [r5]
   198d0:	ldr	r3, [sp, #8]
   198d4:	ldr	r0, [r2, r3]
   198d8:	bl	11050 <towlower@plt>
   198dc:	mov	r1, r0
   198e0:	mov	r2, r9
   198e4:	mov	r0, r8
   198e8:	bl	10fc0 <wcrtomb@plt>
   198ec:	cmn	r0, #1
   198f0:	ldrbne	r2, [sp, #56]	; 0x38
   198f4:	strbne	sl, [r4, r2]
   198f8:	ldr	r2, [r5, #20]
   198fc:	cmp	r7, r2
   19900:	blt	19854 <__assert_fail@plt+0x85ac>
   19904:	ldr	r5, [sp, #28]
   19908:	b	197c8 <__assert_fail@plt+0x8520>
   1990c:	mov	r3, #0
   19910:	add	r8, sp, #56	; 0x38
   19914:	add	r9, sp, #48	; 0x30
   19918:	mov	r7, #1
   1991c:	strb	r3, [sp, #48]	; 0x30
   19920:	mov	r0, #0
   19924:	mov	r1, #0
   19928:	mov	r3, r8
   1992c:	mov	r2, #1
   19930:	strd	r0, [r8]
   19934:	mov	r1, r9
   19938:	bl	2addc <__assert_fail@plt+0x19b34>
   1993c:	cmn	r0, #2
   19940:	beq	19960 <__assert_fail@plt+0x86b8>
   19944:	ldrb	r3, [sp, #48]	; 0x30
   19948:	add	r3, r3, #1
   1994c:	uxtb	r3, r3
   19950:	cmp	r3, #0
   19954:	strb	r3, [sp, #48]	; 0x30
   19958:	bne	19920 <__assert_fail@plt+0x8678>
   1995c:	b	197c8 <__assert_fail@plt+0x8520>
   19960:	ldrb	r2, [sp, #48]	; 0x30
   19964:	add	r3, r2, #1
   19968:	strb	r7, [r4, r2]
   1996c:	uxtb	r3, r3
   19970:	cmp	r3, #0
   19974:	strb	r3, [sp, #48]	; 0x30
   19978:	bne	19920 <__assert_fail@plt+0x8678>
   1997c:	b	197c8 <__assert_fail@plt+0x8520>
   19980:	mov	sl, #0
   19984:	mov	fp, #32
   19988:	str	r3, [sp, #8]
   1998c:	str	r6, [sp, #16]
   19990:	mov	r6, fp
   19994:	mov	fp, sl
   19998:	str	r5, [sp, #28]
   1999c:	mov	r5, sl
   199a0:	mov	r9, #1
   199a4:	ldr	sl, [sp, #12]
   199a8:	mov	r0, r1
   199ac:	cmp	sl, #0
   199b0:	lsl	r7, fp, #3
   199b4:	ldr	r3, [sp, #8]
   199b8:	ldr	r0, [r0, r3]
   199bc:	ldr	r8, [r0, fp]
   199c0:	bne	19a04 <__assert_fail@plt+0x875c>
   199c4:	mov	r0, sl
   199c8:	sub	lr, r4, r5
   199cc:	lsr	r3, r8, r0
   199d0:	tst	r3, #1
   199d4:	strbne	r9, [lr, r0]
   199d8:	add	r0, r0, #1
   199dc:	cmp	r0, #32
   199e0:	bne	199cc <__assert_fail@plt+0x8724>
   199e4:	add	fp, fp, #4
   199e8:	add	r6, r6, #32
   199ec:	cmp	fp, #32
   199f0:	sub	r5, r5, #32
   199f4:	beq	19a4c <__assert_fail@plt+0x87a4>
   199f8:	ldr	r3, [sp, #16]
   199fc:	ldr	r0, [r3]
   19a00:	b	199ac <__assert_fail@plt+0x8704>
   19a04:	add	r3, r5, r7
   19a08:	add	r2, r7, #128	; 0x80
   19a0c:	lsr	r3, r8, r3
   19a10:	add	r1, r4, r7
   19a14:	tst	r3, #1
   19a18:	beq	19a3c <__assert_fail@plt+0x8794>
   19a1c:	cmp	r2, #384	; 0x180
   19a20:	strb	r9, [r4, r7]
   19a24:	bcs	19a38 <__assert_fail@plt+0x8790>
   19a28:	bl	11140 <__ctype_tolower_loc@plt>
   19a2c:	ldr	r3, [r0]
   19a30:	ldr	r1, [r3, r7, lsl #2]
   19a34:	add	r1, r4, r1
   19a38:	strb	r9, [r1]
   19a3c:	add	r7, r7, #1
   19a40:	cmp	r7, r6
   19a44:	bne	19a04 <__assert_fail@plt+0x875c>
   19a48:	b	199e4 <__assert_fail@plt+0x873c>
   19a4c:	ldr	r6, [sp, #16]
   19a50:	ldr	r5, [sp, #28]
   19a54:	b	197c8 <__assert_fail@plt+0x8520>
   19a58:	ldr	r1, [r6]
   19a5c:	add	r2, r8, #1
   19a60:	ldrb	r0, [r1, r8, lsl #3]
   19a64:	strb	r0, [sp, #56]	; 0x38
   19a68:	ldr	r0, [r6, #8]
   19a6c:	cmp	r2, r0
   19a70:	bcs	19b78 <__assert_fail@plt+0x88d0>
   19a74:	add	r3, r3, #8
   19a78:	ldr	r0, [sp, #32]
   19a7c:	add	r3, r1, r3
   19a80:	ldr	r1, [r3, #4]
   19a84:	and	r1, r1, r0
   19a88:	ldr	r0, [sp, #36]	; 0x24
   19a8c:	cmp	r1, r0
   19a90:	bne	19b78 <__assert_fail@plt+0x88d0>
   19a94:	mov	ip, r0
   19a98:	add	r7, sp, #57	; 0x39
   19a9c:	ldr	r0, [sp, #32]
   19aa0:	b	19abc <__assert_fail@plt+0x8814>
   19aa4:	ldr	r3, [r6]
   19aa8:	add	r3, r3, r2, lsl #3
   19aac:	ldr	r1, [r3, #4]
   19ab0:	and	r1, r1, r0
   19ab4:	cmp	r1, ip
   19ab8:	bne	19ad4 <__assert_fail@plt+0x882c>
   19abc:	ldrb	r3, [r3]
   19ac0:	add	r2, r2, #1
   19ac4:	strb	r3, [r7], #1
   19ac8:	ldr	r3, [r6, #8]
   19acc:	cmp	r3, r2
   19ad0:	bhi	19aa4 <__assert_fail@plt+0x87fc>
   19ad4:	add	r8, sp, #56	; 0x38
   19ad8:	sub	r7, r7, r8
   19adc:	add	r9, sp, #48	; 0x30
   19ae0:	mov	sl, #0
   19ae4:	mov	fp, #0
   19ae8:	mov	r2, r7
   19aec:	mov	r3, r9
   19af0:	mov	r1, r8
   19af4:	add	r0, sp, #44	; 0x2c
   19af8:	strd	sl, [sp, #48]	; 0x30
   19afc:	bl	2addc <__assert_fail@plt+0x19b34>
   19b00:	cmp	r0, r7
   19b04:	bne	197c8 <__assert_fail@plt+0x8520>
   19b08:	ldr	r0, [sp, #44]	; 0x2c
   19b0c:	bl	11050 <towlower@plt>
   19b10:	mov	r1, r0
   19b14:	mov	r2, r9
   19b18:	mov	r0, r8
   19b1c:	bl	10fc0 <wcrtomb@plt>
   19b20:	cmn	r0, #1
   19b24:	beq	197c8 <__assert_fail@plt+0x8520>
   19b28:	ldrb	r3, [sp, #56]	; 0x38
   19b2c:	mov	r2, #1
   19b30:	strb	r2, [r4, r3]
   19b34:	b	197c8 <__assert_fail@plt+0x8520>
   19b38:	mov	r0, r4
   19b3c:	mov	r2, #256	; 0x100
   19b40:	mov	r1, #1
   19b44:	bl	111c4 <memset@plt>
   19b48:	cmp	r7, #2
   19b4c:	bne	197dc <__assert_fail@plt+0x8534>
   19b50:	b	19b64 <__assert_fail@plt+0x88bc>
   19b54:	mov	r0, r4
   19b58:	mov	r2, #256	; 0x100
   19b5c:	mov	r1, #1
   19b60:	bl	111c4 <memset@plt>
   19b64:	ldr	r2, [sp, #24]
   19b68:	ldrb	r3, [r2, #28]
   19b6c:	orr	r3, r3, #1
   19b70:	strb	r3, [r2, #28]
   19b74:	b	197dc <__assert_fail@plt+0x8534>
   19b78:	add	r8, sp, #56	; 0x38
   19b7c:	b	19adc <__assert_fail@plt+0x8834>
   19b80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19b84:	ldr	r3, [r1, #56]	; 0x38
   19b88:	strd	r6, [sp, #8]
   19b8c:	mov	r6, r0
   19b90:	ldr	r7, [r1, #40]	; 0x28
   19b94:	strd	r8, [sp, #16]
   19b98:	str	sl, [sp, #24]
   19b9c:	str	lr, [sp, #28]
   19ba0:	sub	sp, sp, #8
   19ba4:	cmp	r3, r7
   19ba8:	movle	r3, #2
   19bac:	movle	r0, #0
   19bb0:	strble	r3, [r6, #4]
   19bb4:	ble	19e7c <__assert_fail@plt+0x8bd4>
   19bb8:	ldr	sl, [r1, #4]
   19bbc:	mov	r8, r2
   19bc0:	mov	r5, r1
   19bc4:	ldrb	r3, [r6, #6]
   19bc8:	ldr	r2, [r1, #80]	; 0x50
   19bcc:	ldrb	r4, [sl, r7]
   19bd0:	bic	r3, r3, #96	; 0x60
   19bd4:	cmp	r2, #1
   19bd8:	strb	r4, [r6]
   19bdc:	strb	r3, [r6, #6]
   19be0:	ble	19e98 <__assert_fail@plt+0x8bf0>
   19be4:	ldr	r3, [r1, #28]
   19be8:	cmp	r7, r3
   19bec:	beq	19c00 <__assert_fail@plt+0x8958>
   19bf0:	ldr	r3, [r1, #8]
   19bf4:	ldr	r3, [r3, r7, lsl #2]
   19bf8:	cmn	r3, #1
   19bfc:	beq	1a0e0 <__assert_fail@plt+0x8e38>
   19c00:	cmp	r4, #92	; 0x5c
   19c04:	beq	19ed4 <__assert_fail@plt+0x8c2c>
   19c08:	ldr	r3, [r5, #8]
   19c0c:	mov	r2, #1
   19c10:	strb	r2, [r6, #4]
   19c14:	ldr	r9, [r3, r7, lsl #2]
   19c18:	mov	r0, r9
   19c1c:	sub	r9, r9, #95	; 0x5f
   19c20:	bl	111ac <iswalnum@plt>
   19c24:	ldrb	r3, [r6, #6]
   19c28:	clz	r9, r9
   19c2c:	cmp	r0, #0
   19c30:	lsr	r9, r9, #5
   19c34:	movne	r9, #1
   19c38:	bfi	r3, r9, #6, #1
   19c3c:	strb	r3, [r6, #6]
   19c40:	sub	r4, r4, #10
   19c44:	cmp	r4, #115	; 0x73
   19c48:	ldrls	pc, [pc, r4, lsl #2]
   19c4c:	b	1a0d8 <__assert_fail@plt+0x8e30>
   19c50:	andeq	sl, r1, r8, lsr r2
   19c54:	ldrdeq	sl, [r1], -r8
   19c58:	ldrdeq	sl, [r1], -r8
   19c5c:	ldrdeq	sl, [r1], -r8
   19c60:	ldrdeq	sl, [r1], -r8
   19c64:	ldrdeq	sl, [r1], -r8
   19c68:	ldrdeq	sl, [r1], -r8
   19c6c:	ldrdeq	sl, [r1], -r8
   19c70:	ldrdeq	sl, [r1], -r8
   19c74:	ldrdeq	sl, [r1], -r8
   19c78:	ldrdeq	sl, [r1], -r8
   19c7c:	ldrdeq	sl, [r1], -r8
   19c80:	ldrdeq	sl, [r1], -r8
   19c84:	ldrdeq	sl, [r1], -r8
   19c88:	ldrdeq	sl, [r1], -r8
   19c8c:	ldrdeq	sl, [r1], -r8
   19c90:	ldrdeq	sl, [r1], -r8
   19c94:	ldrdeq	sl, [r1], -r8
   19c98:	ldrdeq	sl, [r1], -r8
   19c9c:	ldrdeq	sl, [r1], -r8
   19ca0:	ldrdeq	sl, [r1], -r8
   19ca4:	ldrdeq	sl, [r1], -r8
   19ca8:	ldrdeq	sl, [r1], -r8
   19cac:	ldrdeq	sl, [r1], -r8
   19cb0:	ldrdeq	sl, [r1], -r8
   19cb4:	ldrdeq	sl, [r1], -r8
   19cb8:	andeq	r9, r1, r0, lsr #28
   19cbc:	ldrdeq	sl, [r1], -r8
   19cc0:	ldrdeq	sl, [r1], -r8
   19cc4:	ldrdeq	sl, [r1], -r8
   19cc8:			; <UNDEFINED> instruction: 0x0001a1b4
   19ccc:	andeq	sl, r1, ip, asr #3
   19cd0:	andeq	sl, r1, r4, lsr #3
   19cd4:	andeq	sl, r1, r4, ror #3
   19cd8:	ldrdeq	sl, [r1], -r8
   19cdc:	ldrdeq	sl, [r1], -r8
   19ce0:	andeq	sl, r1, ip, lsr #2
   19ce4:	ldrdeq	sl, [r1], -r8
   19ce8:	ldrdeq	sl, [r1], -r8
   19cec:	ldrdeq	sl, [r1], -r8
   19cf0:	ldrdeq	sl, [r1], -r8
   19cf4:	ldrdeq	sl, [r1], -r8
   19cf8:	ldrdeq	sl, [r1], -r8
   19cfc:	ldrdeq	sl, [r1], -r8
   19d00:	ldrdeq	sl, [r1], -r8
   19d04:	ldrdeq	sl, [r1], -r8
   19d08:	ldrdeq	sl, [r1], -r8
   19d0c:	ldrdeq	sl, [r1], -r8
   19d10:	ldrdeq	sl, [r1], -r8
   19d14:	ldrdeq	sl, [r1], -r8
   19d18:	ldrdeq	sl, [r1], -r8
   19d1c:	ldrdeq	sl, [r1], -r8
   19d20:	ldrdeq	sl, [r1], -r8
   19d24:	andeq	sl, r1, ip, lsr r1
   19d28:	ldrdeq	sl, [r1], -r8
   19d2c:	ldrdeq	sl, [r1], -r8
   19d30:	ldrdeq	sl, [r1], -r8
   19d34:	ldrdeq	sl, [r1], -r8
   19d38:	ldrdeq	sl, [r1], -r8
   19d3c:	ldrdeq	sl, [r1], -r8
   19d40:	ldrdeq	sl, [r1], -r8
   19d44:	ldrdeq	sl, [r1], -r8
   19d48:	ldrdeq	sl, [r1], -r8
   19d4c:	ldrdeq	sl, [r1], -r8
   19d50:	ldrdeq	sl, [r1], -r8
   19d54:	ldrdeq	sl, [r1], -r8
   19d58:	ldrdeq	sl, [r1], -r8
   19d5c:	ldrdeq	sl, [r1], -r8
   19d60:	ldrdeq	sl, [r1], -r8
   19d64:	ldrdeq	sl, [r1], -r8
   19d68:	ldrdeq	sl, [r1], -r8
   19d6c:	ldrdeq	sl, [r1], -r8
   19d70:	ldrdeq	sl, [r1], -r8
   19d74:	ldrdeq	sl, [r1], -r8
   19d78:	ldrdeq	sl, [r1], -r8
   19d7c:	ldrdeq	sl, [r1], -r8
   19d80:	ldrdeq	sl, [r1], -r8
   19d84:	ldrdeq	sl, [r1], -r8
   19d88:	ldrdeq	sl, [r1], -r8
   19d8c:	ldrdeq	sl, [r1], -r8
   19d90:	ldrdeq	sl, [r1], -r8
   19d94:	andeq	sl, r1, r8, asr r1
   19d98:	ldrdeq	sl, [r1], -r8
   19d9c:	ldrdeq	sl, [r1], -r8
   19da0:	andeq	sl, r1, r8, ror #2
   19da4:	ldrdeq	sl, [r1], -r8
   19da8:	ldrdeq	sl, [r1], -r8
   19dac:	ldrdeq	sl, [r1], -r8
   19db0:	ldrdeq	sl, [r1], -r8
   19db4:	ldrdeq	sl, [r1], -r8
   19db8:	ldrdeq	sl, [r1], -r8
   19dbc:	ldrdeq	sl, [r1], -r8
   19dc0:	ldrdeq	sl, [r1], -r8
   19dc4:	ldrdeq	sl, [r1], -r8
   19dc8:	ldrdeq	sl, [r1], -r8
   19dcc:	ldrdeq	sl, [r1], -r8
   19dd0:	ldrdeq	sl, [r1], -r8
   19dd4:	ldrdeq	sl, [r1], -r8
   19dd8:	ldrdeq	sl, [r1], -r8
   19ddc:	ldrdeq	sl, [r1], -r8
   19de0:	ldrdeq	sl, [r1], -r8
   19de4:	ldrdeq	sl, [r1], -r8
   19de8:	ldrdeq	sl, [r1], -r8
   19dec:	ldrdeq	sl, [r1], -r8
   19df0:	ldrdeq	sl, [r1], -r8
   19df4:	ldrdeq	sl, [r1], -r8
   19df8:	ldrdeq	sl, [r1], -r8
   19dfc:	ldrdeq	sl, [r1], -r8
   19e00:	ldrdeq	sl, [r1], -r8
   19e04:	ldrdeq	sl, [r1], -r8
   19e08:	ldrdeq	sl, [r1], -r8
   19e0c:	ldrdeq	sl, [r1], -r8
   19e10:	ldrdeq	sl, [r1], -r8
   19e14:	andeq	sl, r1, r0, lsl #4
   19e18:	andeq	sl, r1, ip, lsl r2
   19e1c:	andeq	sl, r1, r4, asr #4
   19e20:	tst	r8, #8
   19e24:	bne	19e68 <__assert_fail@plt+0x8bc0>
   19e28:	ldr	r3, [r5, #48]	; 0x30
   19e2c:	add	r7, r7, #1
   19e30:	cmp	r7, r3
   19e34:	beq	19e68 <__assert_fail@plt+0x8bc0>
   19e38:	mov	r2, r8
   19e3c:	mov	r1, r5
   19e40:	str	r7, [r5, #40]	; 0x28
   19e44:	mov	r0, sp
   19e48:	bl	19b80 <__assert_fail@plt+0x88d8>
   19e4c:	ldrb	r2, [sp, #4]
   19e50:	ldr	r3, [r5, #40]	; 0x28
   19e54:	sub	r2, r2, #9
   19e58:	cmp	r2, #1
   19e5c:	sub	r3, r3, #1
   19e60:	str	r3, [r5, #40]	; 0x28
   19e64:	bhi	1a0d8 <__assert_fail@plt+0x8e30>
   19e68:	mov	r3, #12
   19e6c:	mov	r2, #32
   19e70:	mov	r0, #1
   19e74:	str	r2, [r6]
   19e78:	strb	r3, [r6, #4]
   19e7c:	add	sp, sp, #8
   19e80:	ldrd	r4, [sp]
   19e84:	ldrd	r6, [sp, #8]
   19e88:	ldrd	r8, [sp, #16]
   19e8c:	ldr	sl, [sp, #24]
   19e90:	add	sp, sp, #28
   19e94:	pop	{pc}		; (ldr pc, [sp], #4)
   19e98:	cmp	r4, #92	; 0x5c
   19e9c:	beq	19ed4 <__assert_fail@plt+0x8c2c>
   19ea0:	mov	r3, #1
   19ea4:	strb	r3, [r6, #4]
   19ea8:	bl	11170 <__ctype_b_loc@plt>
   19eac:	ldr	r1, [r0]
   19eb0:	lsl	r3, r4, #1
   19eb4:	ldrb	r2, [r6, #6]
   19eb8:	ldrh	r3, [r1, r3]
   19ebc:	ubfx	r3, r3, #3, #1
   19ec0:	cmp	r4, #95	; 0x5f
   19ec4:	orreq	r3, r3, #1
   19ec8:	bfi	r2, r3, #6, #1
   19ecc:	strb	r2, [r6, #6]
   19ed0:	b	19c40 <__assert_fail@plt+0x8998>
   19ed4:	ldr	r1, [r5, #48]	; 0x30
   19ed8:	add	r3, r7, #1
   19edc:	cmp	r3, r1
   19ee0:	blt	19ef4 <__assert_fail@plt+0x8c4c>
   19ee4:	mov	r3, #36	; 0x24
   19ee8:	mov	r0, #1
   19eec:	strb	r3, [r6, #4]
   19ef0:	b	19e7c <__assert_fail@plt+0x8bd4>
   19ef4:	ldrb	r1, [r5, #75]	; 0x4b
   19ef8:	cmp	r1, #0
   19efc:	bne	1a464 <__assert_fail@plt+0x91bc>
   19f00:	ldrb	r7, [sl, r3]
   19f04:	mov	r1, #1
   19f08:	strb	r7, [r6]
   19f0c:	cmp	r2, r1
   19f10:	strb	r1, [r6, #4]
   19f14:	ble	1a100 <__assert_fail@plt+0x8e58>
   19f18:	ldr	r1, [r5, #8]
   19f1c:	add	r1, r1, r3, lsl #2
   19f20:	ldr	r4, [r1]
   19f24:	mov	r0, r4
   19f28:	sub	r4, r4, #95	; 0x5f
   19f2c:	bl	111ac <iswalnum@plt>
   19f30:	ldrb	r3, [r6, #6]
   19f34:	clz	r4, r4
   19f38:	cmp	r0, #0
   19f3c:	lsr	r4, r4, #5
   19f40:	movne	r4, #1
   19f44:	bfi	r3, r4, #6, #1
   19f48:	strb	r3, [r6, #6]
   19f4c:	sub	r3, r7, #39	; 0x27
   19f50:	cmp	r3, #86	; 0x56
   19f54:	ldrls	pc, [pc, r3, lsl #2]
   19f58:	b	1a278 <__assert_fail@plt+0x8fd0>
   19f5c:	andeq	sl, r1, ip, lsr #8
   19f60:	andeq	sl, r1, ip, asr #8
   19f64:	andeq	sl, r1, r4, lsl r4
   19f68:	andeq	sl, r1, r8, ror r2
   19f6c:	strdeq	sl, [r1], -r4
   19f70:	andeq	sl, r1, r8, ror r2
   19f74:	andeq	sl, r1, r8, ror r2
   19f78:	andeq	sl, r1, r8, ror r2
   19f7c:	andeq	sl, r1, r8, ror r2
   19f80:	andeq	sl, r1, r8, ror r2
   19f84:	ldrdeq	sl, [r1], -r4
   19f88:	ldrdeq	sl, [r1], -r4
   19f8c:	ldrdeq	sl, [r1], -r4
   19f90:	ldrdeq	sl, [r1], -r4
   19f94:	ldrdeq	sl, [r1], -r4
   19f98:	ldrdeq	sl, [r1], -r4
   19f9c:	ldrdeq	sl, [r1], -r4
   19fa0:	ldrdeq	sl, [r1], -r4
   19fa4:	ldrdeq	sl, [r1], -r4
   19fa8:	andeq	sl, r1, r8, ror r2
   19fac:	andeq	sl, r1, r8, ror r2
   19fb0:			; <UNDEFINED> instruction: 0x0001a3b4
   19fb4:	andeq	sl, r1, r8, ror r2
   19fb8:	muleq	r1, r4, r3
   19fbc:	andeq	sl, r1, r4, ror r3
   19fc0:	andeq	sl, r1, r8, ror r2
   19fc4:	andeq	sl, r1, r8, ror r2
   19fc8:	andeq	sl, r1, r4, asr r3
   19fcc:	andeq	sl, r1, r8, ror r2
   19fd0:	andeq	sl, r1, r8, ror r2
   19fd4:	andeq	sl, r1, r8, ror r2
   19fd8:	andeq	sl, r1, r8, ror r2
   19fdc:	andeq	sl, r1, r8, ror r2
   19fe0:	andeq	sl, r1, r8, ror r2
   19fe4:	andeq	sl, r1, r8, ror r2
   19fe8:	andeq	sl, r1, r8, ror r2
   19fec:	andeq	sl, r1, r8, ror r2
   19ff0:	andeq	sl, r1, r8, ror r2
   19ff4:	andeq	sl, r1, r8, ror r2
   19ff8:	andeq	sl, r1, r8, ror r2
   19ffc:	andeq	sl, r1, r8, ror r2
   1a000:	andeq	sl, r1, r8, ror r2
   1a004:	andeq	sl, r1, r8, ror r2
   1a008:	andeq	sl, r1, r8, ror r2
   1a00c:	andeq	sl, r1, ip, lsr r3
   1a010:	andeq	sl, r1, r8, ror r2
   1a014:	andeq	sl, r1, r8, ror r2
   1a018:	andeq	sl, r1, r8, ror r2
   1a01c:	andeq	sl, r1, r4, lsr #6
   1a020:	andeq	sl, r1, r8, ror r2
   1a024:	andeq	sl, r1, r8, ror r2
   1a028:	andeq	sl, r1, r8, ror r2
   1a02c:	andeq	sl, r1, r8, ror r2
   1a030:	andeq	sl, r1, r8, ror r2
   1a034:	andeq	sl, r1, r8, ror r2
   1a038:	andeq	sl, r1, r8, ror r2
   1a03c:	andeq	sl, r1, r8, ror r2
   1a040:	andeq	sl, r1, r4, lsl #6
   1a044:	andeq	sl, r1, r8, ror r2
   1a048:	andeq	sl, r1, r4, ror #5
   1a04c:	andeq	sl, r1, r8, ror r2
   1a050:	andeq	sl, r1, r8, ror r2
   1a054:	andeq	sl, r1, r8, ror r2
   1a058:	andeq	sl, r1, r8, ror r2
   1a05c:	andeq	sl, r1, r8, ror r2
   1a060:	andeq	sl, r1, r8, ror r2
   1a064:	andeq	sl, r1, r8, ror r2
   1a068:	andeq	sl, r1, r8, ror r2
   1a06c:	andeq	sl, r1, r8, ror r2
   1a070:	andeq	sl, r1, r8, ror r2
   1a074:	andeq	sl, r1, r8, ror r2
   1a078:	andeq	sl, r1, r8, ror r2
   1a07c:	andeq	sl, r1, r8, ror r2
   1a080:	andeq	sl, r1, r8, ror r2
   1a084:	andeq	sl, r1, r8, ror r2
   1a088:	andeq	sl, r1, r8, ror r2
   1a08c:	andeq	sl, r1, ip, asr #5
   1a090:	andeq	sl, r1, r8, ror r2
   1a094:	andeq	sl, r1, r8, ror r2
   1a098:	andeq	sl, r1, r8, ror r2
   1a09c:			; <UNDEFINED> instruction: 0x0001a2b4
   1a0a0:	andeq	sl, r1, r8, ror r2
   1a0a4:	andeq	sl, r1, r8, ror r2
   1a0a8:	andeq	sl, r1, r8, ror r2
   1a0ac:	muleq	r1, r8, r2
   1a0b0:	andeq	sl, r1, r0, lsl #5
   1a0b4:	andeq	sl, r1, r0, ror #4
   1a0b8:	add	r7, sl, r7
   1a0bc:	eor	r3, r8, #2048	; 0x800
   1a0c0:	ldrb	r2, [r7, #-1]
   1a0c4:	ubfx	r3, r3, #11, #1
   1a0c8:	cmp	r2, #10
   1a0cc:	orrne	r3, r3, #1
   1a0d0:	cmp	r3, #0
   1a0d4:	beq	1a18c <__assert_fail@plt+0x8ee4>
   1a0d8:	mov	r0, #1
   1a0dc:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a0e0:	ldr	r3, [r6, #4]
   1a0e4:	mov	r0, #1
   1a0e8:	bic	r3, r3, #2097152	; 0x200000
   1a0ec:	bic	r3, r3, #255	; 0xff
   1a0f0:	orr	r3, r3, #2097152	; 0x200000
   1a0f4:	orr	r3, r3, r0
   1a0f8:	str	r3, [r6, #4]
   1a0fc:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a100:	bl	11170 <__ctype_b_loc@plt>
   1a104:	ldr	r1, [r0]
   1a108:	lsl	r3, r7, #1
   1a10c:	ldrb	r2, [r6, #6]
   1a110:	ldrh	r3, [r1, r3]
   1a114:	ubfx	r3, r3, #3, #1
   1a118:	cmp	r7, #95	; 0x5f
   1a11c:	orreq	r3, r3, #1
   1a120:	bfi	r2, r3, #6, #1
   1a124:	strb	r2, [r6, #6]
   1a128:	b	19f4c <__assert_fail@plt+0x8ca4>
   1a12c:	mov	r3, #5
   1a130:	mov	r0, #1
   1a134:	strb	r3, [r6, #4]
   1a138:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a13c:	movw	r3, #1026	; 0x402
   1a140:	tst	r8, r3
   1a144:	bne	1a0d8 <__assert_fail@plt+0x8e30>
   1a148:	mov	r3, #19
   1a14c:	mov	r0, #1
   1a150:	strb	r3, [r6, #4]
   1a154:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a158:	mov	r3, #20
   1a15c:	mov	r0, #1
   1a160:	strb	r3, [r6, #4]
   1a164:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a168:	mov	r3, #8
   1a16c:	movt	r3, #128	; 0x80
   1a170:	tst	r8, r3
   1a174:	moveq	r3, #1
   1a178:	movne	r3, #0
   1a17c:	cmp	r7, #0
   1a180:	moveq	r3, #0
   1a184:	cmp	r3, #0
   1a188:	bne	1a0b8 <__assert_fail@plt+0x8e10>
   1a18c:	mov	r3, #12
   1a190:	mov	r2, #16
   1a194:	mov	r0, #1
   1a198:	str	r2, [r6]
   1a19c:	strb	r3, [r6, #4]
   1a1a0:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a1a4:	mov	r3, #11
   1a1a8:	mov	r0, #1
   1a1ac:	strb	r3, [r6, #4]
   1a1b0:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a1b4:	tst	r8, #8192	; 0x2000
   1a1b8:	beq	1a0d8 <__assert_fail@plt+0x8e30>
   1a1bc:	mov	r3, #8
   1a1c0:	mov	r0, #1
   1a1c4:	strb	r3, [r6, #4]
   1a1c8:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a1cc:	tst	r8, #8192	; 0x2000
   1a1d0:	beq	1a0d8 <__assert_fail@plt+0x8e30>
   1a1d4:	mov	r3, #9
   1a1d8:	mov	r0, #1
   1a1dc:	strb	r3, [r6, #4]
   1a1e0:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a1e4:	movw	r3, #1026	; 0x402
   1a1e8:	tst	r8, r3
   1a1ec:	bne	1a0d8 <__assert_fail@plt+0x8e30>
   1a1f0:	mov	r3, #18
   1a1f4:	mov	r0, #1
   1a1f8:	strb	r3, [r6, #4]
   1a1fc:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a200:	and	r2, r8, #4608	; 0x1200
   1a204:	cmp	r2, #4608	; 0x1200
   1a208:	moveq	r3, #23
   1a20c:	moveq	r0, #1
   1a210:	strbeq	r3, [r6, #4]
   1a214:	bne	1a0d8 <__assert_fail@plt+0x8e30>
   1a218:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a21c:	and	r2, r8, #33792	; 0x8400
   1a220:	cmp	r2, #32768	; 0x8000
   1a224:	bne	1a0d8 <__assert_fail@plt+0x8e30>
   1a228:	mov	r3, #10
   1a22c:	mov	r0, #1
   1a230:	strb	r3, [r6, #4]
   1a234:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a238:	tst	r8, #2048	; 0x800
   1a23c:	beq	1a0d8 <__assert_fail@plt+0x8e30>
   1a240:	b	1a228 <__assert_fail@plt+0x8f80>
   1a244:	and	r2, r8, #4608	; 0x1200
   1a248:	cmp	r2, #4608	; 0x1200
   1a24c:	moveq	r3, #24
   1a250:	moveq	r0, #1
   1a254:	strbeq	r3, [r6, #4]
   1a258:	bne	1a0d8 <__assert_fail@plt+0x8e30>
   1a25c:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a260:	and	r2, r8, #4608	; 0x1200
   1a264:	cmp	r2, #512	; 0x200
   1a268:	moveq	r3, #24
   1a26c:	moveq	r0, #2
   1a270:	strbeq	r3, [r6, #4]
   1a274:	beq	19e7c <__assert_fail@plt+0x8bd4>
   1a278:	mov	r0, #2
   1a27c:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a280:	tst	r8, #33792	; 0x8400
   1a284:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a288:	mov	r3, #10
   1a28c:	mov	r0, #2
   1a290:	strb	r3, [r6, #4]
   1a294:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a298:	and	r2, r8, #4608	; 0x1200
   1a29c:	cmp	r2, #512	; 0x200
   1a2a0:	moveq	r3, #23
   1a2a4:	moveq	r0, #2
   1a2a8:	strbeq	r3, [r6, #4]
   1a2ac:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a2b0:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a2b4:	tst	r8, #524288	; 0x80000
   1a2b8:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a2bc:	mov	r3, #32
   1a2c0:	mov	r0, #2
   1a2c4:	strb	r3, [r6, #4]
   1a2c8:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a2cc:	tst	r8, #524288	; 0x80000
   1a2d0:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a2d4:	mov	r3, #34	; 0x22
   1a2d8:	mov	r0, #2
   1a2dc:	strb	r3, [r6, #4]
   1a2e0:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a2e4:	tst	r8, #524288	; 0x80000
   1a2e8:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a2ec:	mov	r3, #12
   1a2f0:	mov	r2, #256	; 0x100
   1a2f4:	mov	r0, #2
   1a2f8:	str	r2, [r6]
   1a2fc:	strb	r3, [r6, #4]
   1a300:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a304:	tst	r8, #524288	; 0x80000
   1a308:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a30c:	mov	r3, #12
   1a310:	mov	r2, #64	; 0x40
   1a314:	mov	r0, #2
   1a318:	str	r2, [r6]
   1a31c:	strb	r3, [r6, #4]
   1a320:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a324:	tst	r8, #524288	; 0x80000
   1a328:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a32c:	mov	r3, #33	; 0x21
   1a330:	mov	r0, #2
   1a334:	strb	r3, [r6, #4]
   1a338:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a33c:	tst	r8, #524288	; 0x80000
   1a340:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a344:	mov	r3, #35	; 0x23
   1a348:	mov	r0, #2
   1a34c:	strb	r3, [r6, #4]
   1a350:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a354:	tst	r8, #524288	; 0x80000
   1a358:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a35c:	mov	r3, #12
   1a360:	mov	r2, #512	; 0x200
   1a364:	mov	r0, #2
   1a368:	str	r2, [r6]
   1a36c:	strb	r3, [r6, #4]
   1a370:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a374:	movw	r2, #1026	; 0x402
   1a378:	and	r2, r2, r8
   1a37c:	cmp	r2, #2
   1a380:	moveq	r3, #19
   1a384:	moveq	r0, r2
   1a388:	strbeq	r3, [r6, #4]
   1a38c:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a390:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a394:	tst	r8, #524288	; 0x80000
   1a398:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a39c:	mov	r3, #12
   1a3a0:	mov	r2, #9
   1a3a4:	mov	r0, #2
   1a3a8:	str	r2, [r6]
   1a3ac:	strb	r3, [r6, #4]
   1a3b0:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a3b4:	tst	r8, #524288	; 0x80000
   1a3b8:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a3bc:	mov	r3, #12
   1a3c0:	mov	r2, #6
   1a3c4:	mov	r0, #2
   1a3c8:	str	r2, [r6]
   1a3cc:	strb	r3, [r6, #4]
   1a3d0:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a3d4:	tst	r8, #16384	; 0x4000
   1a3d8:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a3dc:	sub	r7, r7, #49	; 0x31
   1a3e0:	mov	r3, #4
   1a3e4:	mov	r0, #2
   1a3e8:	str	r7, [r6]
   1a3ec:	strb	r3, [r6, #4]
   1a3f0:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a3f4:	movw	r2, #1026	; 0x402
   1a3f8:	and	r2, r2, r8
   1a3fc:	cmp	r2, #2
   1a400:	moveq	r3, #18
   1a404:	moveq	r0, r2
   1a408:	strbeq	r3, [r6, #4]
   1a40c:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a410:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a414:	tst	r8, #8192	; 0x2000
   1a418:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a41c:	mov	r3, #9
   1a420:	mov	r0, #2
   1a424:	strb	r3, [r6, #4]
   1a428:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a42c:	tst	r8, #524288	; 0x80000
   1a430:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a434:	mov	r3, #12
   1a438:	mov	r2, #128	; 0x80
   1a43c:	mov	r0, #2
   1a440:	str	r2, [r6]
   1a444:	strb	r3, [r6, #4]
   1a448:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a44c:	tst	r8, #8192	; 0x2000
   1a450:	bne	1a278 <__assert_fail@plt+0x8fd0>
   1a454:	mov	r3, #8
   1a458:	mov	r0, #2
   1a45c:	strb	r3, [r6, #4]
   1a460:	b	19e7c <__assert_fail@plt+0x8bd4>
   1a464:	cmp	r2, #1
   1a468:	ble	1a49c <__assert_fail@plt+0x91f4>
   1a46c:	ldr	r1, [r5, #8]
   1a470:	ldr	r0, [r1, r3, lsl #2]
   1a474:	add	r1, r1, r3, lsl #2
   1a478:	cmn	r0, #1
   1a47c:	beq	1a4d8 <__assert_fail@plt+0x9230>
   1a480:	ldr	r0, [r5, #28]
   1a484:	add	r7, r7, #2
   1a488:	cmp	r0, r7
   1a48c:	beq	1a49c <__assert_fail@plt+0x91f4>
   1a490:	ldr	r0, [r1, #4]
   1a494:	cmn	r0, #1
   1a498:	beq	1a4d8 <__assert_fail@plt+0x9230>
   1a49c:	ldrb	r0, [r5, #76]	; 0x4c
   1a4a0:	ldr	r1, [r5]
   1a4a4:	ldr	ip, [r5, #24]
   1a4a8:	cmp	r0, #0
   1a4ac:	beq	1a4cc <__assert_fail@plt+0x9224>
   1a4b0:	ldr	r0, [r5, #12]
   1a4b4:	add	r1, r1, ip
   1a4b8:	ldr	r0, [r0, r3, lsl #2]
   1a4bc:	ldrb	r7, [r1, r0]
   1a4c0:	tst	r7, #128	; 0x80
   1a4c4:	beq	19f04 <__assert_fail@plt+0x8c5c>
   1a4c8:	b	19f00 <__assert_fail@plt+0x8c58>
   1a4cc:	add	r1, r1, r3
   1a4d0:	ldrb	r7, [r1, ip]
   1a4d4:	b	19f04 <__assert_fail@plt+0x8c5c>
   1a4d8:	ldrb	r7, [sl, r3]
   1a4dc:	mov	r3, #1
   1a4e0:	strb	r7, [r6]
   1a4e4:	strb	r3, [r6, #4]
   1a4e8:	b	19f20 <__assert_fail@plt+0x8c78>
   1a4ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4f0:	ldr	ip, [r0, #84]	; 0x54
   1a4f4:	strd	r6, [sp, #8]
   1a4f8:	strd	r8, [sp, #16]
   1a4fc:	ldr	r8, [r0, #108]	; 0x6c
   1a500:	strd	sl, [sp, #24]
   1a504:	str	lr, [sp, #32]
   1a508:	sub	sp, sp, #36	; 0x24
   1a50c:	ldr	r7, [sp, #72]	; 0x48
   1a510:	str	ip, [sp, #12]
   1a514:	cmp	r8, #0
   1a518:	ldr	r6, [sp, #80]	; 0x50
   1a51c:	ble	1a804 <__assert_fail@plt+0x955c>
   1a520:	ldr	sl, [r0, #116]	; 0x74
   1a524:	mov	lr, r8
   1a528:	mov	r4, #0
   1a52c:	add	ip, lr, r4
   1a530:	asr	ip, ip, #1
   1a534:	add	r5, ip, ip, lsl #1
   1a538:	add	r5, sl, r5, lsl #3
   1a53c:	ldr	r5, [r5, #4]
   1a540:	cmp	r7, r5
   1a544:	bgt	1a764 <__assert_fail@plt+0x94bc>
   1a548:	cmp	ip, r4
   1a54c:	ble	1a598 <__assert_fail@plt+0x92f0>
   1a550:	add	lr, ip, r4
   1a554:	asr	lr, lr, #1
   1a558:	add	r5, lr, lr, lsl #1
   1a55c:	add	r5, sl, r5, lsl #3
   1a560:	ldr	r5, [r5, #4]
   1a564:	cmp	r7, r5
   1a568:	ble	1a588 <__assert_fail@plt+0x92e0>
   1a56c:	b	1a758 <__assert_fail@plt+0x94b0>
   1a570:	add	r5, ip, ip, lsl #1
   1a574:	add	r5, sl, r5, lsl #3
   1a578:	ldr	r5, [r5, #4]
   1a57c:	cmp	r5, r7
   1a580:	blt	1a764 <__assert_fail@plt+0x94bc>
   1a584:	mov	lr, ip
   1a588:	add	ip, r4, lr
   1a58c:	cmp	r4, lr
   1a590:	asr	ip, ip, #1
   1a594:	blt	1a570 <__assert_fail@plt+0x92c8>
   1a598:	cmp	r8, r4
   1a59c:	mvnle	r4, #0
   1a5a0:	ble	1a5b8 <__assert_fail@plt+0x9310>
   1a5a4:	add	ip, r4, r4, lsl #1
   1a5a8:	add	ip, sl, ip, lsl #3
   1a5ac:	ldr	ip, [ip, #4]
   1a5b0:	cmp	r7, ip
   1a5b4:	mvnne	r4, #0
   1a5b8:	mov	lr, r8
   1a5bc:	mov	r5, #0
   1a5c0:	add	fp, lr, r5
   1a5c4:	add	fp, fp, fp, lsr #31
   1a5c8:	asr	fp, fp, #1
   1a5cc:	add	ip, fp, fp, lsl #1
   1a5d0:	add	ip, sl, ip, lsl #3
   1a5d4:	ldr	ip, [ip, #4]
   1a5d8:	cmp	r6, ip
   1a5dc:	bgt	1a748 <__assert_fail@plt+0x94a0>
   1a5e0:	cmp	fp, r5
   1a5e4:	ble	1a640 <__assert_fail@plt+0x9398>
   1a5e8:	add	lr, fp, r5
   1a5ec:	add	lr, lr, lr, lsr #31
   1a5f0:	asr	lr, lr, #1
   1a5f4:	add	ip, lr, lr, lsl #1
   1a5f8:	mov	r9, lr
   1a5fc:	add	ip, sl, ip, lsl #3
   1a600:	ldr	ip, [ip, #4]
   1a604:	cmp	r6, ip
   1a608:	ble	1a630 <__assert_fail@plt+0x9388>
   1a60c:	b	1a740 <__assert_fail@plt+0x9498>
   1a610:	asr	ip, ip, #1
   1a614:	add	r9, ip, ip, lsl #1
   1a618:	mov	fp, ip
   1a61c:	add	r9, sl, r9, lsl #3
   1a620:	ldr	r9, [r9, #4]
   1a624:	cmp	r9, r6
   1a628:	blt	1a748 <__assert_fail@plt+0x94a0>
   1a62c:	mov	lr, ip
   1a630:	add	ip, r5, lr
   1a634:	cmp	r5, lr
   1a638:	add	ip, ip, ip, lsr #31
   1a63c:	blt	1a610 <__assert_fail@plt+0x9368>
   1a640:	cmp	r8, r5
   1a644:	ble	1a834 <__assert_fail@plt+0x958c>
   1a648:	add	ip, r5, r5, lsl #1
   1a64c:	add	sl, sl, ip, lsl #3
   1a650:	ldr	ip, [sl, #4]
   1a654:	cmp	r6, ip
   1a658:	mvnne	r5, #0
   1a65c:	ldr	ip, [r1]
   1a660:	cmp	ip, #0
   1a664:	ble	1a7ac <__assert_fail@plt+0x9504>
   1a668:	mov	sl, r2
   1a66c:	mov	r8, r0
   1a670:	str	r1, [sp, #16]
   1a674:	mov	fp, #0
   1a678:	str	r3, [sp, #20]
   1a67c:	str	r5, [sp, #24]
   1a680:	str	r4, [sp, #28]
   1a684:	ldr	r3, [sl]
   1a688:	lsl	r4, fp, #2
   1a68c:	ldr	r2, [sp, #12]
   1a690:	ldr	r0, [r8, #116]	; 0x74
   1a694:	ldr	r3, [r3, fp, lsl #2]
   1a698:	ldr	r1, [r2]
   1a69c:	add	r3, r3, r3, lsl #1
   1a6a0:	add	r2, r0, r3, lsl #3
   1a6a4:	ldr	r0, [r0, r3, lsl #3]
   1a6a8:	ldr	r3, [r2, #8]
   1a6ac:	ldr	r9, [r1, r0, lsl #3]
   1a6b0:	cmp	r7, r3
   1a6b4:	blt	1a810 <__assert_fail@plt+0x9568>
   1a6b8:	ldr	r2, [r2, #12]
   1a6bc:	cmp	r7, r2
   1a6c0:	bgt	1a7fc <__assert_fail@plt+0x9554>
   1a6c4:	sub	r1, r7, r3
   1a6c8:	cmp	r7, r2
   1a6cc:	clz	r1, r1
   1a6d0:	lsr	r1, r1, #5
   1a6d4:	beq	1a7b4 <__assert_fail@plt+0x950c>
   1a6d8:	cmp	r7, r3
   1a6dc:	movne	r5, #0
   1a6e0:	beq	1a7b8 <__assert_fail@plt+0x9510>
   1a6e4:	cmp	r6, r3
   1a6e8:	blt	1a720 <__assert_fail@plt+0x9478>
   1a6ec:	cmp	r6, r2
   1a6f0:	movgt	r0, #1
   1a6f4:	bgt	1a718 <__assert_fail@plt+0x9470>
   1a6f8:	sub	r1, r6, r3
   1a6fc:	cmp	r6, r2
   1a700:	clz	r1, r1
   1a704:	lsr	r1, r1, #5
   1a708:	beq	1a774 <__assert_fail@plt+0x94cc>
   1a70c:	cmp	r6, r3
   1a710:	movne	r0, #0
   1a714:	beq	1a778 <__assert_fail@plt+0x94d0>
   1a718:	cmp	r0, r5
   1a71c:	beq	1a798 <__assert_fail@plt+0x94f0>
   1a720:	mov	r0, #1
   1a724:	add	sp, sp, #36	; 0x24
   1a728:	ldrd	r4, [sp]
   1a72c:	ldrd	r6, [sp, #8]
   1a730:	ldrd	r8, [sp, #16]
   1a734:	ldrd	sl, [sp, #24]
   1a738:	add	sp, sp, #32
   1a73c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a740:	mov	lr, fp
   1a744:	mov	fp, r9
   1a748:	add	r5, fp, #1
   1a74c:	cmp	r5, lr
   1a750:	blt	1a5c0 <__assert_fail@plt+0x9318>
   1a754:	b	1a640 <__assert_fail@plt+0x9398>
   1a758:	mov	r4, lr
   1a75c:	mov	lr, ip
   1a760:	mov	ip, r4
   1a764:	add	r4, ip, #1
   1a768:	cmp	r4, lr
   1a76c:	blt	1a52c <__assert_fail@plt+0x9284>
   1a770:	b	1a598 <__assert_fail@plt+0x92f0>
   1a774:	orr	r1, r1, #2
   1a778:	ldr	r3, [sp, #24]
   1a77c:	mov	r2, r9
   1a780:	mov	r0, r8
   1a784:	str	r3, [sp]
   1a788:	ldr	r3, [sp, #76]	; 0x4c
   1a78c:	bl	16874 <__assert_fail@plt+0x55cc>
   1a790:	cmp	r0, r5
   1a794:	bne	1a720 <__assert_fail@plt+0x9478>
   1a798:	ldr	r3, [sp, #16]
   1a79c:	ldr	ip, [r3]
   1a7a0:	add	fp, fp, #1
   1a7a4:	cmp	fp, ip
   1a7a8:	blt	1a684 <__assert_fail@plt+0x93dc>
   1a7ac:	mov	r0, #0
   1a7b0:	b	1a724 <__assert_fail@plt+0x947c>
   1a7b4:	orr	r1, r1, #2
   1a7b8:	mov	r0, r8
   1a7bc:	ldr	r3, [sp, #20]
   1a7c0:	ldr	r2, [sp, #28]
   1a7c4:	str	r2, [sp]
   1a7c8:	mov	r2, r9
   1a7cc:	bl	16874 <__assert_fail@plt+0x55cc>
   1a7d0:	ldr	r3, [sl]
   1a7d4:	mov	r5, r0
   1a7d8:	ldr	r2, [r8, #116]	; 0x74
   1a7dc:	ldr	r3, [r3, r4]
   1a7e0:	add	r3, r3, r3, lsl #1
   1a7e4:	add	r2, r2, r3, lsl #3
   1a7e8:	ldr	r3, [r2, #8]
   1a7ec:	cmp	r6, r3
   1a7f0:	blt	1a82c <__assert_fail@plt+0x9584>
   1a7f4:	ldr	r2, [r2, #12]
   1a7f8:	b	1a6ec <__assert_fail@plt+0x9444>
   1a7fc:	mov	r5, #1
   1a800:	b	1a6e4 <__assert_fail@plt+0x943c>
   1a804:	mvn	r4, #0
   1a808:	mov	r5, r4
   1a80c:	b	1a65c <__assert_fail@plt+0x93b4>
   1a810:	cmp	r6, r3
   1a814:	blt	1a7a0 <__assert_fail@plt+0x94f8>
   1a818:	ldr	r2, [r2, #12]
   1a81c:	cmp	r6, r2
   1a820:	bgt	1a720 <__assert_fail@plt+0x9478>
   1a824:	mvn	r5, #0
   1a828:	b	1a6f8 <__assert_fail@plt+0x9450>
   1a82c:	mvn	r0, #0
   1a830:	b	1a718 <__assert_fail@plt+0x9470>
   1a834:	mvn	r5, #0
   1a838:	b	1a65c <__assert_fail@plt+0x93b4>
   1a83c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a840:	mov	r4, r0
   1a844:	strd	r6, [sp, #8]
   1a848:	ldr	r0, [r1, #80]	; 0x50
   1a84c:	strd	r8, [sp, #16]
   1a850:	str	sl, [sp, #24]
   1a854:	str	lr, [sp, #28]
   1a858:	sub	sp, sp, #8
   1a85c:	ldrb	r7, [sp, #44]	; 0x2c
   1a860:	cmp	r0, #1
   1a864:	ldr	ip, [r1, #40]	; 0x28
   1a868:	beq	1a8d0 <__assert_fail@plt+0x9628>
   1a86c:	add	r5, ip, #1
   1a870:	ldr	r6, [r1, #28]
   1a874:	cmp	r5, r6
   1a878:	bge	1a8d0 <__assert_fail@plt+0x9628>
   1a87c:	ldr	r0, [r1, #8]
   1a880:	ldr	lr, [r0, r5, lsl #2]
   1a884:	add	r0, r0, r5, lsl #2
   1a888:	cmn	lr, #1
   1a88c:	bne	1a8d0 <__assert_fail@plt+0x9628>
   1a890:	add	r3, ip, #2
   1a894:	mov	r2, r0
   1a898:	b	1a8ac <__assert_fail@plt+0x9604>
   1a89c:	ldr	ip, [r2, #4]!
   1a8a0:	add	r3, r3, #1
   1a8a4:	cmn	ip, #1
   1a8a8:	bne	1a8b8 <__assert_fail@plt+0x9610>
   1a8ac:	cmp	r6, r3
   1a8b0:	mov	lr, r3
   1a8b4:	bne	1a89c <__assert_fail@plt+0x95f4>
   1a8b8:	ldr	r3, [r0, #-4]
   1a8bc:	mov	r2, #1
   1a8c0:	mov	r0, #0
   1a8c4:	strd	r2, [r4]
   1a8c8:	str	lr, [r1, #40]	; 0x28
   1a8cc:	b	1a918 <__assert_fail@plt+0x9670>
   1a8d0:	ldrb	lr, [r2, #4]
   1a8d4:	add	r3, ip, r3
   1a8d8:	str	r3, [r1, #40]	; 0x28
   1a8dc:	and	r0, lr, #251	; 0xfb
   1a8e0:	cmp	lr, #28
   1a8e4:	cmpne	r0, #26
   1a8e8:	beq	1a934 <__assert_fail@plt+0x968c>
   1a8ec:	cmp	lr, #22
   1a8f0:	moveq	lr, r7
   1a8f4:	orrne	lr, r7, #1
   1a8f8:	mov	r5, r2
   1a8fc:	cmp	lr, #0
   1a900:	beq	1aaac <__assert_fail@plt+0x9804>
   1a904:	ldrb	r2, [r5]
   1a908:	mov	r3, #0
   1a90c:	mov	r0, r3
   1a910:	str	r3, [r4]
   1a914:	strb	r2, [r4, #4]
   1a918:	add	sp, sp, #8
   1a91c:	ldrd	r4, [sp]
   1a920:	ldrd	r6, [sp, #8]
   1a924:	ldrd	r8, [sp, #16]
   1a928:	ldr	sl, [sp, #24]
   1a92c:	add	sp, sp, #28
   1a930:	pop	{pc}		; (ldr pc, [sp], #4)
   1a934:	ldr	r6, [r1, #56]	; 0x38
   1a938:	cmp	r3, r6
   1a93c:	bge	1a9dc <__assert_fail@plt+0x9734>
   1a940:	ldrb	r7, [r2]
   1a944:	mov	r5, #0
   1a948:	b	1a96c <__assert_fail@plt+0x96c4>
   1a94c:	ldr	r3, [r4, #4]
   1a950:	strb	r0, [r3, r5]
   1a954:	add	r5, r5, #1
   1a958:	cmp	r5, #32
   1a95c:	beq	1a9dc <__assert_fail@plt+0x9734>
   1a960:	ldrb	lr, [r2, #4]
   1a964:	ldr	r3, [r1, #40]	; 0x28
   1a968:	ldr	r6, [r1, #56]	; 0x38
   1a96c:	cmp	lr, #30
   1a970:	add	ip, r3, #1
   1a974:	beq	1a9e4 <__assert_fail@plt+0x973c>
   1a978:	ldr	r0, [r1, #4]
   1a97c:	str	ip, [r1, #40]	; 0x28
   1a980:	ldrb	r0, [r0, r3]
   1a984:	cmp	r6, ip
   1a988:	ble	1a9dc <__assert_fail@plt+0x9734>
   1a98c:	cmp	r7, r0
   1a990:	bne	1a94c <__assert_fail@plt+0x96a4>
   1a994:	ldr	r3, [r1, #4]
   1a998:	ldrb	r3, [r3, ip]
   1a99c:	cmp	r3, #93	; 0x5d
   1a9a0:	bne	1a94c <__assert_fail@plt+0x96a4>
   1a9a4:	ldr	r3, [r4, #4]
   1a9a8:	add	ip, ip, #1
   1a9ac:	mov	r0, #0
   1a9b0:	str	ip, [r1, #40]	; 0x28
   1a9b4:	strb	r0, [r3, r5]
   1a9b8:	ldrb	r3, [r2, #4]
   1a9bc:	cmp	r3, #28
   1a9c0:	beq	1aad8 <__assert_fail@plt+0x9830>
   1a9c4:	cmp	r3, #30
   1a9c8:	beq	1aacc <__assert_fail@plt+0x9824>
   1a9cc:	cmp	r3, #26
   1a9d0:	moveq	r3, #3
   1a9d4:	streq	r3, [r4]
   1a9d8:	b	1a918 <__assert_fail@plt+0x9670>
   1a9dc:	mov	r0, #7
   1a9e0:	b	1a918 <__assert_fail@plt+0x9670>
   1a9e4:	ldrb	r0, [r1, #75]	; 0x4b
   1a9e8:	cmp	r0, #0
   1a9ec:	beq	1a978 <__assert_fail@plt+0x96d0>
   1a9f0:	ldrb	r0, [r1, #76]	; 0x4c
   1a9f4:	cmp	r0, #0
   1a9f8:	beq	1aa94 <__assert_fail@plt+0x97ec>
   1a9fc:	ldr	r8, [r1, #28]
   1aa00:	lsl	lr, r3, #2
   1aa04:	cmp	r3, r8
   1aa08:	beq	1aa1c <__assert_fail@plt+0x9774>
   1aa0c:	ldr	r0, [r1, #8]
   1aa10:	ldr	r0, [r0, r3, lsl #2]
   1aa14:	cmn	r0, #1
   1aa18:	beq	1a978 <__assert_fail@plt+0x96d0>
   1aa1c:	ldr	r0, [r1]
   1aa20:	ldr	sl, [r1, #12]
   1aa24:	ldr	r9, [r1, #24]
   1aa28:	ldr	sl, [sl, lr]
   1aa2c:	add	r0, r0, sl
   1aa30:	ldrb	r0, [r0, r9]
   1aa34:	tst	r0, #128	; 0x80
   1aa38:	bne	1a978 <__assert_fail@plt+0x96d0>
   1aa3c:	ldr	r9, [r1, #80]	; 0x50
   1aa40:	cmp	r9, #1
   1aa44:	beq	1aa8c <__assert_fail@plt+0x97e4>
   1aa48:	cmp	r8, ip
   1aa4c:	ble	1aa8c <__assert_fail@plt+0x97e4>
   1aa50:	ldr	r9, [r1, #8]
   1aa54:	add	lr, r9, lr
   1aa58:	ldr	lr, [lr, #4]
   1aa5c:	cmn	lr, #1
   1aa60:	bne	1aa8c <__assert_fail@plt+0x97e4>
   1aa64:	add	r3, r3, #2
   1aa68:	sub	r9, r9, #4
   1aa6c:	b	1aa7c <__assert_fail@plt+0x97d4>
   1aa70:	ldr	lr, [r9, r3, lsl #2]
   1aa74:	cmn	lr, #1
   1aa78:	bne	1aa8c <__assert_fail@plt+0x97e4>
   1aa7c:	cmp	r8, r3
   1aa80:	mov	ip, r3
   1aa84:	add	r3, r3, #1
   1aa88:	bne	1aa70 <__assert_fail@plt+0x97c8>
   1aa8c:	str	ip, [r1, #40]	; 0x28
   1aa90:	b	1a984 <__assert_fail@plt+0x96dc>
   1aa94:	ldr	r0, [r1]
   1aa98:	str	ip, [r1, #40]	; 0x28
   1aa9c:	ldr	lr, [r1, #24]
   1aaa0:	add	r3, r0, r3
   1aaa4:	ldrb	r0, [r3, lr]
   1aaa8:	b	1a984 <__assert_fail@plt+0x96dc>
   1aaac:	mov	r0, sp
   1aab0:	ldr	r2, [sp, #40]	; 0x28
   1aab4:	bl	166c8 <__assert_fail@plt+0x5420>
   1aab8:	ldrb	r3, [sp, #4]
   1aabc:	cmp	r3, #21
   1aac0:	movne	r0, #11
   1aac4:	beq	1a904 <__assert_fail@plt+0x965c>
   1aac8:	b	1a918 <__assert_fail@plt+0x9670>
   1aacc:	mov	r3, #4
   1aad0:	str	r3, [r4]
   1aad4:	b	1a918 <__assert_fail@plt+0x9670>
   1aad8:	mov	r3, #2
   1aadc:	str	r3, [r4]
   1aae0:	b	1a918 <__assert_fail@plt+0x9670>
   1aae4:	add	ip, r0, r2, lsl #3
   1aae8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aaec:	strd	r6, [sp, #8]
   1aaf0:	str	r8, [sp, #16]
   1aaf4:	ldrb	r8, [ip, #4]
   1aaf8:	str	lr, [sp, #20]
   1aafc:	ldr	r7, [sp, #24]
   1ab00:	cmp	r8, #7
   1ab04:	beq	1ac6c <__assert_fail@plt+0x99c4>
   1ab08:	ldr	ip, [r3, #80]	; 0x50
   1ab0c:	cmp	ip, #1
   1ab10:	beq	1ab70 <__assert_fail@plt+0x98c8>
   1ab14:	ldr	ip, [r3, #28]
   1ab18:	add	lr, r7, #1
   1ab1c:	cmp	lr, ip
   1ab20:	bge	1ab70 <__assert_fail@plt+0x98c8>
   1ab24:	ldr	r4, [r3, #8]
   1ab28:	ldr	r5, [r4, lr, lsl #2]
   1ab2c:	add	r6, r4, lr, lsl #2
   1ab30:	cmn	r5, #1
   1ab34:	bne	1ab70 <__assert_fail@plt+0x98c8>
   1ab38:	sub	ip, ip, r7
   1ab3c:	mov	lr, r6
   1ab40:	mov	r4, #1
   1ab44:	b	1ab54 <__assert_fail@plt+0x98ac>
   1ab48:	ldr	r5, [lr, #4]!
   1ab4c:	cmn	r5, #1
   1ab50:	bne	1ab60 <__assert_fail@plt+0x98b8>
   1ab54:	add	r4, r4, #1
   1ab58:	cmp	ip, r4
   1ab5c:	bne	1ab48 <__assert_fail@plt+0x98a0>
   1ab60:	cmp	r8, #5
   1ab64:	beq	1ab8c <__assert_fail@plt+0x98e4>
   1ab68:	cmp	r8, #6
   1ab6c:	beq	1abc4 <__assert_fail@plt+0x991c>
   1ab70:	mov	r4, #0
   1ab74:	mov	r0, r4
   1ab78:	ldrd	r4, [sp]
   1ab7c:	ldrd	r6, [sp, #8]
   1ab80:	ldr	r8, [sp, #16]
   1ab84:	add	sp, sp, #20
   1ab88:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab8c:	ldr	r2, [r1]
   1ab90:	tst	r2, #64	; 0x40
   1ab94:	bne	1aba8 <__assert_fail@plt+0x9900>
   1ab98:	ldr	r1, [r3, #4]
   1ab9c:	ldrb	r1, [r1, r7]
   1aba0:	cmp	r1, #10
   1aba4:	beq	1ab70 <__assert_fail@plt+0x98c8>
   1aba8:	tst	r2, #128	; 0x80
   1abac:	beq	1ab74 <__assert_fail@plt+0x98cc>
   1abb0:	ldr	r3, [r3, #4]
   1abb4:	ldrb	r3, [r3, r7]
   1abb8:	cmp	r3, #0
   1abbc:	beq	1ab70 <__assert_fail@plt+0x98c8>
   1abc0:	b	1ab74 <__assert_fail@plt+0x98cc>
   1abc4:	ldr	r7, [r0, r2, lsl #3]
   1abc8:	ldr	r0, [r7, #20]
   1abcc:	ldr	ip, [r7, #32]
   1abd0:	cmp	ip, #0
   1abd4:	bne	1abe4 <__assert_fail@plt+0x993c>
   1abd8:	ldr	r3, [r7, #36]	; 0x24
   1abdc:	orrs	r3, r0, r3
   1abe0:	beq	1ad6c <__assert_fail@plt+0x9ac4>
   1abe4:	cmp	r0, #0
   1abe8:	ldr	r6, [r6, #-4]
   1abec:	ble	1ac20 <__assert_fail@plt+0x9978>
   1abf0:	ldr	r2, [r7]
   1abf4:	ldr	r3, [r2]
   1abf8:	cmp	r6, r3
   1abfc:	beq	1ac5c <__assert_fail@plt+0x99b4>
   1ac00:	mov	r3, #0
   1ac04:	b	1ac14 <__assert_fail@plt+0x996c>
   1ac08:	ldr	r1, [r2, #4]!
   1ac0c:	cmp	r6, r1
   1ac10:	beq	1ac5c <__assert_fail@plt+0x99b4>
   1ac14:	add	r3, r3, #1
   1ac18:	cmp	r3, r0
   1ac1c:	bne	1ac08 <__assert_fail@plt+0x9960>
   1ac20:	ldr	r3, [r7, #36]	; 0x24
   1ac24:	cmp	r3, #0
   1ac28:	ble	1ad30 <__assert_fail@plt+0x9a88>
   1ac2c:	mov	r5, #0
   1ac30:	b	1ac40 <__assert_fail@plt+0x9998>
   1ac34:	ldr	r3, [r7, #36]	; 0x24
   1ac38:	cmp	r5, r3
   1ac3c:	bge	1ad2c <__assert_fail@plt+0x9a84>
   1ac40:	ldr	r3, [r7, #12]
   1ac44:	mov	r0, r6
   1ac48:	ldr	r1, [r3, r5, lsl #2]
   1ac4c:	add	r5, r5, #1
   1ac50:	bl	10fcc <iswctype@plt>
   1ac54:	cmp	r0, #0
   1ac58:	beq	1ac34 <__assert_fail@plt+0x998c>
   1ac5c:	ldrb	r3, [r7, #16]
   1ac60:	tst	r3, #1
   1ac64:	beq	1ab74 <__assert_fail@plt+0x98cc>
   1ac68:	b	1ab70 <__assert_fail@plt+0x98c8>
   1ac6c:	ldr	r1, [r3, #4]
   1ac70:	ldrb	r2, [r1, r7]
   1ac74:	cmp	r2, #193	; 0xc1
   1ac78:	bls	1ab70 <__assert_fail@plt+0x98c8>
   1ac7c:	ldr	r3, [r3, #48]	; 0x30
   1ac80:	add	r0, r7, #1
   1ac84:	cmp	r0, r3
   1ac88:	bge	1ab70 <__assert_fail@plt+0x98c8>
   1ac8c:	add	ip, r1, r7
   1ac90:	cmp	r2, #223	; 0xdf
   1ac94:	ldrb	lr, [ip, #1]
   1ac98:	bls	1ad98 <__assert_fail@plt+0x9af0>
   1ac9c:	cmp	r2, #239	; 0xef
   1aca0:	bhi	1ad7c <__assert_fail@plt+0x9ad4>
   1aca4:	cmp	lr, #159	; 0x9f
   1aca8:	cmpls	r2, #224	; 0xe0
   1acac:	movne	r4, #3
   1acb0:	beq	1ab70 <__assert_fail@plt+0x98c8>
   1acb4:	add	r7, r7, r4
   1acb8:	cmp	r3, r7
   1acbc:	blt	1ab70 <__assert_fail@plt+0x98c8>
   1acc0:	ldrb	r3, [r1, r0]
   1acc4:	eor	r3, r3, #128	; 0x80
   1acc8:	cmp	r3, #63	; 0x3f
   1accc:	bhi	1ab70 <__assert_fail@plt+0x98c8>
   1acd0:	ldrb	r3, [ip, #2]
   1acd4:	eor	r3, r3, #128	; 0x80
   1acd8:	cmp	r3, #63	; 0x3f
   1acdc:	bhi	1ab70 <__assert_fail@plt+0x98c8>
   1ace0:	cmp	r4, #3
   1ace4:	beq	1ab74 <__assert_fail@plt+0x98cc>
   1ace8:	ldrb	r3, [ip, #3]
   1acec:	eor	r3, r3, #128	; 0x80
   1acf0:	cmp	r3, #63	; 0x3f
   1acf4:	bhi	1ab70 <__assert_fail@plt+0x98c8>
   1acf8:	cmp	r4, #4
   1acfc:	beq	1ab74 <__assert_fail@plt+0x98cc>
   1ad00:	ldrb	r3, [ip, #4]
   1ad04:	eor	r3, r3, #128	; 0x80
   1ad08:	cmp	r3, #63	; 0x3f
   1ad0c:	bhi	1ab70 <__assert_fail@plt+0x98c8>
   1ad10:	cmp	r4, #6
   1ad14:	bne	1ade4 <__assert_fail@plt+0x9b3c>
   1ad18:	ldrb	r3, [ip, #5]
   1ad1c:	eor	r3, r3, #128	; 0x80
   1ad20:	cmp	r3, #63	; 0x3f
   1ad24:	bls	1ab74 <__assert_fail@plt+0x98cc>
   1ad28:	b	1ab70 <__assert_fail@plt+0x98c8>
   1ad2c:	ldr	ip, [r7, #32]
   1ad30:	cmp	ip, #0
   1ad34:	ble	1ad6c <__assert_fail@plt+0x9ac4>
   1ad38:	ldr	r2, [r7, #4]
   1ad3c:	mov	r3, #0
   1ad40:	sub	r2, r2, #4
   1ad44:	ldr	r1, [r2, #4]!
   1ad48:	cmp	r6, r1
   1ad4c:	bcc	1ad60 <__assert_fail@plt+0x9ab8>
   1ad50:	ldr	r1, [r7, #8]
   1ad54:	ldr	r1, [r1, r3, lsl #2]
   1ad58:	cmp	r6, r1
   1ad5c:	bls	1ac5c <__assert_fail@plt+0x99b4>
   1ad60:	add	r3, r3, #1
   1ad64:	cmp	r3, ip
   1ad68:	bne	1ad44 <__assert_fail@plt+0x9a9c>
   1ad6c:	ldrb	r3, [r7, #16]
   1ad70:	tst	r3, #1
   1ad74:	bne	1ab74 <__assert_fail@plt+0x98cc>
   1ad78:	b	1ab70 <__assert_fail@plt+0x98c8>
   1ad7c:	cmp	r2, #247	; 0xf7
   1ad80:	bhi	1adac <__assert_fail@plt+0x9b04>
   1ad84:	cmp	lr, #143	; 0x8f
   1ad88:	cmpls	r2, #240	; 0xf0
   1ad8c:	movne	r4, #4
   1ad90:	bne	1acb4 <__assert_fail@plt+0x9a0c>
   1ad94:	b	1ab70 <__assert_fail@plt+0x98c8>
   1ad98:	eor	lr, lr, #128	; 0x80
   1ad9c:	cmp	lr, #63	; 0x3f
   1ada0:	movls	r4, #2
   1ada4:	bls	1ab74 <__assert_fail@plt+0x98cc>
   1ada8:	b	1ab70 <__assert_fail@plt+0x98c8>
   1adac:	cmp	r2, #251	; 0xfb
   1adb0:	bhi	1adc8 <__assert_fail@plt+0x9b20>
   1adb4:	cmp	lr, #135	; 0x87
   1adb8:	cmpls	r2, #248	; 0xf8
   1adbc:	movne	r4, #5
   1adc0:	bne	1acb4 <__assert_fail@plt+0x9a0c>
   1adc4:	b	1ab70 <__assert_fail@plt+0x98c8>
   1adc8:	cmp	r2, #253	; 0xfd
   1adcc:	bhi	1ab70 <__assert_fail@plt+0x98c8>
   1add0:	cmp	lr, #131	; 0x83
   1add4:	cmpls	r2, #252	; 0xfc
   1add8:	beq	1ab70 <__assert_fail@plt+0x98c8>
   1addc:	mov	r4, #6
   1ade0:	b	1acb4 <__assert_fail@plt+0x9a0c>
   1ade4:	mov	r4, #5
   1ade8:	b	1ab74 <__assert_fail@plt+0x98cc>
   1adec:	strd	r4, [sp, #-16]!
   1adf0:	mov	r5, #255	; 0xff
   1adf4:	movt	r5, #4
   1adf8:	mov	r4, r0
   1adfc:	str	r6, [sp, #8]
   1ae00:	str	lr, [sp, #12]
   1ae04:	b	1ae0c <__assert_fail@plt+0x9b64>
   1ae08:	mov	r4, r3
   1ae0c:	ldr	r3, [r4, #4]
   1ae10:	cmp	r3, #0
   1ae14:	bne	1ae08 <__assert_fail@plt+0x9b60>
   1ae18:	ldr	r3, [r4, #8]
   1ae1c:	cmp	r3, #0
   1ae20:	bne	1ae08 <__assert_fail@plt+0x9b60>
   1ae24:	ldr	r3, [r4, #24]
   1ae28:	and	r3, r3, r5
   1ae2c:	cmp	r3, #6
   1ae30:	beq	1ae78 <__assert_fail@plt+0x9bd0>
   1ae34:	cmp	r3, #3
   1ae38:	beq	1aec0 <__assert_fail@plt+0x9c18>
   1ae3c:	ldr	r0, [r4]
   1ae40:	cmp	r0, #0
   1ae44:	beq	1aeb0 <__assert_fail@plt+0x9c08>
   1ae48:	ldr	r3, [r0, #8]
   1ae4c:	cmp	r3, #0
   1ae50:	cmpne	r4, r3
   1ae54:	mov	r4, r0
   1ae58:	moveq	r2, #1
   1ae5c:	movne	r2, #0
   1ae60:	cmp	r2, #0
   1ae64:	beq	1ae08 <__assert_fail@plt+0x9b60>
   1ae68:	ldr	r3, [r4, #24]
   1ae6c:	and	r3, r3, r5
   1ae70:	cmp	r3, #6
   1ae74:	bne	1ae34 <__assert_fail@plt+0x9b8c>
   1ae78:	ldr	r6, [r4, #20]
   1ae7c:	ldr	r0, [r6]
   1ae80:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1ae84:	ldr	r0, [r6, #4]
   1ae88:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1ae8c:	ldr	r0, [r6, #8]
   1ae90:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1ae94:	ldr	r0, [r6, #12]
   1ae98:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1ae9c:	mov	r0, r6
   1aea0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1aea4:	ldr	r0, [r4]
   1aea8:	cmp	r0, #0
   1aeac:	bne	1ae48 <__assert_fail@plt+0x9ba0>
   1aeb0:	ldrd	r4, [sp]
   1aeb4:	ldr	r6, [sp, #8]
   1aeb8:	add	sp, sp, #12
   1aebc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aec0:	ldr	r0, [r4, #20]
   1aec4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1aec8:	b	1ae3c <__assert_fail@plt+0x9b94>
   1aecc:	ldr	r2, [r0]
   1aed0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aed4:	strd	r6, [sp, #8]
   1aed8:	mov	r7, r0
   1aedc:	str	r8, [sp, #16]
   1aee0:	str	lr, [sp, #20]
   1aee4:	cmp	r2, #0
   1aee8:	beq	1af70 <__assert_fail@plt+0x9cc8>
   1aeec:	ldr	r0, [r0, #8]
   1aef0:	cmp	r0, #0
   1aef4:	beq	1af70 <__assert_fail@plt+0x9cc8>
   1aef8:	mov	r5, #255	; 0xff
   1aefc:	movt	r5, #4
   1af00:	mov	r4, #0
   1af04:	b	1af20 <__assert_fail@plt+0x9c78>
   1af08:	cmp	r3, #3
   1af0c:	beq	1b148 <__assert_fail@plt+0x9ea0>
   1af10:	add	r4, r4, #1
   1af14:	cmp	r4, r0
   1af18:	bcs	1af70 <__assert_fail@plt+0x9cc8>
   1af1c:	ldr	r2, [r7]
   1af20:	add	r1, r2, r4, lsl #3
   1af24:	ldr	r3, [r1, #4]
   1af28:	and	r3, r3, r5
   1af2c:	cmp	r3, #6
   1af30:	bne	1af08 <__assert_fail@plt+0x9c60>
   1af34:	ldr	r6, [r2, r4, lsl #3]
   1af38:	add	r4, r4, #1
   1af3c:	ldr	r0, [r6]
   1af40:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1af44:	ldr	r0, [r6, #4]
   1af48:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1af4c:	ldr	r0, [r6, #8]
   1af50:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1af54:	ldr	r0, [r6, #12]
   1af58:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1af5c:	mov	r0, r6
   1af60:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1af64:	ldr	r0, [r7, #8]
   1af68:	cmp	r4, r0
   1af6c:	bcc	1af1c <__assert_fail@plt+0x9c74>
   1af70:	ldr	r0, [r7, #12]
   1af74:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1af78:	ldr	r3, [r7, #8]
   1af7c:	cmp	r3, #0
   1af80:	movne	r4, #0
   1af84:	movne	r5, r4
   1af88:	beq	1afe8 <__assert_fail@plt+0x9d40>
   1af8c:	ldr	r3, [r7, #24]
   1af90:	cmp	r3, #0
   1af94:	add	r2, r3, r4
   1af98:	beq	1afa4 <__assert_fail@plt+0x9cfc>
   1af9c:	ldr	r0, [r2, #8]
   1afa0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1afa4:	ldr	r3, [r7, #28]
   1afa8:	cmp	r3, #0
   1afac:	add	r2, r3, r4
   1afb0:	beq	1afbc <__assert_fail@plt+0x9d14>
   1afb4:	ldr	r0, [r2, #8]
   1afb8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1afbc:	ldr	r0, [r7, #20]
   1afc0:	cmp	r0, #0
   1afc4:	add	r3, r0, r4
   1afc8:	beq	1b0ec <__assert_fail@plt+0x9e44>
   1afcc:	ldr	r0, [r3, #8]
   1afd0:	add	r5, r5, #1
   1afd4:	add	r4, r4, #12
   1afd8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1afdc:	ldr	r3, [r7, #8]
   1afe0:	cmp	r5, r3
   1afe4:	bcc	1af8c <__assert_fail@plt+0x9ce4>
   1afe8:	ldr	r0, [r7, #20]
   1afec:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1aff0:	ldr	r0, [r7, #24]
   1aff4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1aff8:	ldr	r0, [r7, #28]
   1affc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b000:	ldr	r0, [r7]
   1b004:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b008:	ldr	r0, [r7, #32]
   1b00c:	cmp	r0, #0
   1b010:	movne	r8, #0
   1b014:	beq	1b108 <__assert_fail@plt+0x9e60>
   1b018:	add	r6, r8, r8, lsl #1
   1b01c:	ldr	r3, [r0, r6, lsl #2]
   1b020:	add	r6, r0, r6, lsl #2
   1b024:	cmp	r3, #0
   1b028:	movgt	r5, #0
   1b02c:	ble	1b098 <__assert_fail@plt+0x9df0>
   1b030:	ldr	r3, [r6, #8]
   1b034:	ldr	r4, [r3, r5, lsl #2]
   1b038:	ldr	r0, [r4, #24]
   1b03c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b040:	ldr	r0, [r4, #36]	; 0x24
   1b044:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b048:	ldr	r3, [r4, #40]	; 0x28
   1b04c:	add	r2, r4, #4
   1b050:	cmp	r3, r2
   1b054:	beq	1b0b8 <__assert_fail@plt+0x9e10>
   1b058:	ldr	r0, [r3, #8]
   1b05c:	add	r5, r5, #1
   1b060:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b064:	ldr	r0, [r4, #40]	; 0x28
   1b068:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b06c:	ldr	r0, [r4, #12]
   1b070:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b074:	ldr	r0, [r4, #48]	; 0x30
   1b078:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b07c:	ldr	r0, [r4, #44]	; 0x2c
   1b080:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b084:	mov	r0, r4
   1b088:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b08c:	ldr	r3, [r6]
   1b090:	cmp	r3, r5
   1b094:	bgt	1b030 <__assert_fail@plt+0x9d88>
   1b098:	ldr	r0, [r6, #8]
   1b09c:	add	r8, r8, #1
   1b0a0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b0a4:	ldr	r3, [r7, #68]	; 0x44
   1b0a8:	cmp	r3, r8
   1b0ac:	bcc	1b104 <__assert_fail@plt+0x9e5c>
   1b0b0:	ldr	r0, [r7, #32]
   1b0b4:	b	1b018 <__assert_fail@plt+0x9d70>
   1b0b8:	ldr	r0, [r4, #12]
   1b0bc:	add	r5, r5, #1
   1b0c0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b0c4:	ldr	r0, [r4, #48]	; 0x30
   1b0c8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b0cc:	ldr	r0, [r4, #44]	; 0x2c
   1b0d0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b0d4:	mov	r0, r4
   1b0d8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b0dc:	ldr	r3, [r6]
   1b0e0:	cmp	r5, r3
   1b0e4:	blt	1b030 <__assert_fail@plt+0x9d88>
   1b0e8:	b	1b098 <__assert_fail@plt+0x9df0>
   1b0ec:	ldr	r3, [r7, #8]
   1b0f0:	add	r5, r5, #1
   1b0f4:	add	r4, r4, #12
   1b0f8:	cmp	r3, r5
   1b0fc:	bhi	1af8c <__assert_fail@plt+0x9ce4>
   1b100:	b	1afec <__assert_fail@plt+0x9d44>
   1b104:	ldr	r0, [r7, #32]
   1b108:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b10c:	ldr	r0, [r7, #60]	; 0x3c
   1b110:	movw	r3, #48576	; 0xbdc0
   1b114:	movt	r3, #2
   1b118:	cmp	r0, r3
   1b11c:	beq	1b124 <__assert_fail@plt+0x9e7c>
   1b120:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b124:	ldr	r0, [r7, #132]	; 0x84
   1b128:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b12c:	mov	r0, r7
   1b130:	ldrd	r4, [sp]
   1b134:	ldrd	r6, [sp, #8]
   1b138:	ldr	r8, [sp, #16]
   1b13c:	ldr	lr, [sp, #20]
   1b140:	add	sp, sp, #24
   1b144:	b	2ad30 <__assert_fail@plt+0x19a88>
   1b148:	ldr	r0, [r1]
   1b14c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b150:	ldr	r0, [r7, #8]
   1b154:	b	1af10 <__assert_fail@plt+0x9c68>
   1b158:	ldr	r2, [r1, #24]
   1b15c:	mov	r3, #255	; 0xff
   1b160:	movt	r3, #4
   1b164:	str	r4, [sp, #-8]!
   1b168:	str	lr, [sp, #4]
   1b16c:	and	r3, r3, r2
   1b170:	cmp	r3, #6
   1b174:	beq	1b190 <__assert_fail@plt+0x9ee8>
   1b178:	cmp	r3, #3
   1b17c:	beq	1b1cc <__assert_fail@plt+0x9f24>
   1b180:	ldr	r4, [sp]
   1b184:	add	sp, sp, #4
   1b188:	mov	r0, #0
   1b18c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b190:	ldr	r4, [r1, #20]
   1b194:	ldr	r0, [r4]
   1b198:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b19c:	ldr	r0, [r4, #4]
   1b1a0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b1a4:	ldr	r0, [r4, #8]
   1b1a8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b1ac:	ldr	r0, [r4, #12]
   1b1b0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b1b4:	mov	r0, r4
   1b1b8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b1bc:	ldr	r4, [sp]
   1b1c0:	add	sp, sp, #4
   1b1c4:	mov	r0, #0
   1b1c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1cc:	ldr	r0, [r1, #20]
   1b1d0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1b1d4:	ldr	r4, [sp]
   1b1d8:	add	sp, sp, #4
   1b1dc:	mov	r0, #0
   1b1e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b1e8:	mov	r4, r2
   1b1ec:	strd	r6, [sp, #8]
   1b1f0:	lsl	r7, r1, #3
   1b1f4:	mov	r6, r0
   1b1f8:	strd	r8, [sp, #16]
   1b1fc:	mov	r8, r1
   1b200:	strd	sl, [sp, #24]
   1b204:	mov	sl, #0
   1b208:	str	lr, [sp, #32]
   1b20c:	sub	sp, sp, #20
   1b210:	ldr	r9, [sp, #56]	; 0x38
   1b214:	str	r3, [sp, #8]
   1b218:	ldr	r2, [r6]
   1b21c:	mov	r5, r4
   1b220:	ldr	r1, [r6, #20]
   1b224:	add	r3, r2, r7
   1b228:	ldrb	r0, [r3, #4]
   1b22c:	cmp	r0, #4
   1b230:	beq	1b458 <__assert_fail@plt+0xa1b0>
   1b234:	add	fp, r8, r8, lsl #1
   1b238:	lsl	fp, fp, #2
   1b23c:	add	ip, r1, fp
   1b240:	ldr	r0, [ip, #4]
   1b244:	cmp	r0, #0
   1b248:	beq	1b5a8 <__assert_fail@plt+0xa300>
   1b24c:	ldr	ip, [ip, #8]
   1b250:	add	r5, r4, r4, lsl #1
   1b254:	cmp	r0, #1
   1b258:	lsl	r5, r5, #2
   1b25c:	add	r0, r1, r5
   1b260:	ldr	r7, [ip]
   1b264:	beq	1b3a0 <__assert_fail@plt+0xa0f8>
   1b268:	ldr	ip, [r6, #8]
   1b26c:	sub	r1, ip, #1
   1b270:	add	r3, r2, r1, lsl #3
   1b274:	cmp	r1, #0
   1b278:	movle	lr, #0
   1b27c:	movgt	lr, #1
   1b280:	ldrb	r4, [r3, #6]
   1b284:	str	sl, [r0, #4]
   1b288:	ands	lr, lr, r4, lsr #2
   1b28c:	beq	1b508 <__assert_fail@plt+0xa260>
   1b290:	ldr	lr, [r6, #16]
   1b294:	add	r4, r2, ip, lsl #3
   1b298:	sub	r4, r4, r3
   1b29c:	sub	r4, r4, #16
   1b2a0:	add	lr, lr, ip, lsl #2
   1b2a4:	b	1b2c8 <__assert_fail@plt+0xa020>
   1b2a8:	add	r3, r3, r4
   1b2ac:	sub	r1, r1, #1
   1b2b0:	ldrb	r8, [r3, #6]
   1b2b4:	cmp	r1, #0
   1b2b8:	movle	ip, #0
   1b2bc:	movgt	ip, #1
   1b2c0:	ands	ip, ip, r8, lsr #2
   1b2c4:	beq	1b508 <__assert_fail@plt+0xa260>
   1b2c8:	ldr	ip, [lr, #-4]!
   1b2cc:	cmp	ip, r7
   1b2d0:	bne	1b2a8 <__assert_fail@plt+0xa000>
   1b2d4:	ldr	ip, [r3, #4]
   1b2d8:	ubfx	ip, ip, #8, #10
   1b2dc:	cmp	r9, ip
   1b2e0:	bne	1b2a8 <__assert_fail@plt+0xa000>
   1b2e4:	bl	17910 <__assert_fail@plt+0x6668>
   1b2e8:	cmp	r0, #0
   1b2ec:	beq	1b380 <__assert_fail@plt+0xa0d8>
   1b2f0:	ldr	r3, [r6]
   1b2f4:	mov	r0, r6
   1b2f8:	ldr	r2, [r6, #20]
   1b2fc:	add	fp, r2, fp
   1b300:	ldr	r2, [fp, #8]
   1b304:	ldr	r8, [r2, #4]
   1b308:	lsl	r7, r8, #3
   1b30c:	add	r3, r3, r7
   1b310:	ldm	r3, {r1, r2}
   1b314:	bl	1765c <__assert_fail@plt+0x63b4>
   1b318:	cmn	r0, #1
   1b31c:	mov	r4, r0
   1b320:	beq	1b380 <__assert_fail@plt+0xa0d8>
   1b324:	ldr	r3, [r6]
   1b328:	mov	r1, r0
   1b32c:	ubfx	r2, r9, #0, #10
   1b330:	add	r0, r3, r0, lsl #3
   1b334:	add	ip, r3, r7
   1b338:	ldr	r3, [r0, #4]
   1b33c:	bfi	r3, r2, #8, #10
   1b340:	str	r3, [r0, #4]
   1b344:	ldr	ip, [ip, #4]
   1b348:	ubfx	ip, ip, #8, #10
   1b34c:	orr	r2, r2, ip
   1b350:	bfi	r3, r2, #8, #10
   1b354:	ubfx	r2, r3, #16, #8
   1b358:	str	r3, [r0, #4]
   1b35c:	orr	r3, r2, #4
   1b360:	strb	r3, [r0, #6]
   1b364:	ldr	r3, [r6, #16]
   1b368:	ldr	r0, [r6, #20]
   1b36c:	str	r8, [r3, r4, lsl #2]
   1b370:	add	r0, r0, r5
   1b374:	bl	17910 <__assert_fail@plt+0x6668>
   1b378:	cmp	r0, #0
   1b37c:	bne	1b218 <__assert_fail@plt+0x9f70>
   1b380:	mov	r0, #12
   1b384:	add	sp, sp, #20
   1b388:	ldrd	r4, [sp]
   1b38c:	ldrd	r6, [sp, #8]
   1b390:	ldrd	r8, [sp, #16]
   1b394:	ldrd	sl, [sp, #24]
   1b398:	add	sp, sp, #32
   1b39c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3a0:	ldr	r1, [sp, #8]
   1b3a4:	cmp	r8, r4
   1b3a8:	str	sl, [r0, #4]
   1b3ac:	sub	r1, r8, r1
   1b3b0:	clz	r1, r1
   1b3b4:	lsr	r1, r1, #5
   1b3b8:	moveq	r1, #0
   1b3bc:	cmp	r1, #0
   1b3c0:	bne	1b5b8 <__assert_fail@plt+0xa310>
   1b3c4:	ldr	r3, [r3, #4]
   1b3c8:	lsl	fp, r7, #3
   1b3cc:	mov	r0, r6
   1b3d0:	add	r2, r2, fp
   1b3d4:	ldm	r2, {r1, r2}
   1b3d8:	ubfx	r3, r3, #8, #10
   1b3dc:	orr	r9, r9, r3
   1b3e0:	bl	1765c <__assert_fail@plt+0x63b4>
   1b3e4:	cmn	r0, #1
   1b3e8:	mov	r4, r0
   1b3ec:	beq	1b380 <__assert_fail@plt+0xa0d8>
   1b3f0:	ldr	r3, [r6]
   1b3f4:	mov	r1, r0
   1b3f8:	ubfx	r2, r9, #0, #10
   1b3fc:	add	r0, r3, r0, lsl #3
   1b400:	add	ip, r3, fp
   1b404:	ldr	r3, [r0, #4]
   1b408:	bfi	r3, r2, #8, #10
   1b40c:	str	r3, [r0, #4]
   1b410:	ldr	ip, [ip, #4]
   1b414:	ubfx	ip, ip, #8, #10
   1b418:	orr	r2, r2, ip
   1b41c:	bfi	r3, r2, #8, #10
   1b420:	ubfx	r2, r3, #16, #8
   1b424:	str	r3, [r0, #4]
   1b428:	orr	r3, r2, #4
   1b42c:	strb	r3, [r0, #6]
   1b430:	ldr	r3, [r6, #16]
   1b434:	ldr	r0, [r6, #20]
   1b438:	str	r7, [r3, r4, lsl #2]
   1b43c:	add	r0, r0, r5
   1b440:	bl	17910 <__assert_fail@plt+0x6668>
   1b444:	cmp	r0, #0
   1b448:	beq	1b380 <__assert_fail@plt+0xa0d8>
   1b44c:	mov	r8, r7
   1b450:	mov	r7, fp
   1b454:	b	1b218 <__assert_fail@plt+0x9f70>
   1b458:	ldr	ip, [r6, #12]
   1b45c:	lsl	r3, r8, #2
   1b460:	mov	r0, r6
   1b464:	add	r4, r4, r4, lsl #1
   1b468:	lsl	fp, r4, #2
   1b46c:	str	r3, [sp, #12]
   1b470:	ldr	r8, [ip, r8, lsl #2]
   1b474:	add	r1, r1, fp
   1b478:	str	sl, [r1, #4]
   1b47c:	lsl	r7, r8, #3
   1b480:	add	r2, r2, r7
   1b484:	ldm	r2, {r1, r2}
   1b488:	bl	1765c <__assert_fail@plt+0x63b4>
   1b48c:	cmn	r0, #1
   1b490:	mov	r4, r0
   1b494:	ldr	r3, [sp, #12]
   1b498:	beq	1b380 <__assert_fail@plt+0xa0d8>
   1b49c:	ldr	lr, [r6]
   1b4a0:	ubfx	r0, r9, #0, #10
   1b4a4:	mov	r1, r4
   1b4a8:	add	ip, lr, r4, lsl #3
   1b4ac:	add	lr, lr, r7
   1b4b0:	ldr	r2, [ip, #4]
   1b4b4:	bfi	r2, r0, #8, #10
   1b4b8:	str	r2, [ip, #4]
   1b4bc:	ldr	lr, [lr, #4]
   1b4c0:	ubfx	lr, lr, #8, #10
   1b4c4:	orr	r0, r0, lr
   1b4c8:	bfi	r2, r0, #8, #10
   1b4cc:	ubfx	r0, r2, #16, #8
   1b4d0:	str	r2, [ip, #4]
   1b4d4:	orr	r2, r0, #4
   1b4d8:	strb	r2, [ip, #6]
   1b4dc:	ldr	r2, [r6, #12]
   1b4e0:	ldr	ip, [r6, #16]
   1b4e4:	ldr	r0, [r6, #20]
   1b4e8:	str	r8, [ip, r4, lsl #2]
   1b4ec:	ldr	r3, [r2, r3]
   1b4f0:	add	r0, r0, fp
   1b4f4:	str	r3, [r2, r5, lsl #2]
   1b4f8:	bl	17910 <__assert_fail@plt+0x6668>
   1b4fc:	cmp	r0, #0
   1b500:	bne	1b218 <__assert_fail@plt+0x9f70>
   1b504:	b	1b380 <__assert_fail@plt+0xa0d8>
   1b508:	lsl	r4, r7, #3
   1b50c:	mov	r0, r6
   1b510:	add	r2, r2, r4
   1b514:	ldm	r2, {r1, r2}
   1b518:	bl	1765c <__assert_fail@plt+0x63b4>
   1b51c:	cmn	r0, #1
   1b520:	mov	r8, r0
   1b524:	beq	1b380 <__assert_fail@plt+0xa0d8>
   1b528:	ldr	r3, [r6]
   1b52c:	ubfx	r0, r9, #0, #10
   1b530:	mov	r1, r8
   1b534:	add	r2, r3, r8, lsl #3
   1b538:	add	r4, r3, r4
   1b53c:	ldr	r3, [r2, #4]
   1b540:	bfi	r3, r0, #8, #10
   1b544:	str	r3, [r2, #4]
   1b548:	ldr	ip, [r4, #4]
   1b54c:	ubfx	ip, ip, #8, #10
   1b550:	orr	r0, r0, ip
   1b554:	bfi	r3, r0, #8, #10
   1b558:	ubfx	r0, r3, #16, #8
   1b55c:	str	r3, [r2, #4]
   1b560:	orr	r3, r0, #4
   1b564:	strb	r3, [r2, #6]
   1b568:	ldr	r3, [r6, #16]
   1b56c:	ldr	r0, [r6, #20]
   1b570:	str	r7, [r3, r8, lsl #2]
   1b574:	add	r0, r0, r5
   1b578:	bl	17910 <__assert_fail@plt+0x6668>
   1b57c:	cmp	r0, #0
   1b580:	beq	1b380 <__assert_fail@plt+0xa0d8>
   1b584:	mov	r2, r8
   1b588:	mov	r1, r7
   1b58c:	str	r9, [sp]
   1b590:	mov	r0, r6
   1b594:	ldr	r3, [sp, #8]
   1b598:	bl	1b1e4 <__assert_fail@plt+0x9f3c>
   1b59c:	cmp	r0, #0
   1b5a0:	beq	1b2f0 <__assert_fail@plt+0xa048>
   1b5a4:	b	1b384 <__assert_fail@plt+0xa0dc>
   1b5a8:	ldr	r3, [r6, #12]
   1b5ac:	ldr	r2, [r3, r8, lsl #2]
   1b5b0:	str	r2, [r3, r4, lsl #2]
   1b5b4:	b	1b384 <__assert_fail@plt+0xa0dc>
   1b5b8:	mov	r1, r7
   1b5bc:	bl	17910 <__assert_fail@plt+0x6668>
   1b5c0:	cmp	r0, #0
   1b5c4:	movne	r0, #0
   1b5c8:	bne	1b384 <__assert_fail@plt+0xa0dc>
   1b5cc:	b	1b380 <__assert_fail@plt+0xa0d8>
   1b5d0:	ldr	r3, [r0, #36]	; 0x24
   1b5d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b5d8:	strd	r6, [sp, #8]
   1b5dc:	str	r8, [sp, #16]
   1b5e0:	str	lr, [sp, #20]
   1b5e4:	cmn	r3, #-536870910	; 0xe0000002
   1b5e8:	bhi	1b7b0 <__assert_fail@plt+0xa508>
   1b5ec:	ldr	r2, [r0, #48]	; 0x30
   1b5f0:	lsl	r3, r3, #1
   1b5f4:	mov	r4, r0
   1b5f8:	cmp	r3, r2
   1b5fc:	movge	r3, r2
   1b600:	cmp	r3, r1
   1b604:	movge	r1, r3
   1b608:	bl	16bfc <__assert_fail@plt+0x5954>
   1b60c:	subs	r6, r0, #0
   1b610:	bne	1b67c <__assert_fail@plt+0xa3d4>
   1b614:	ldr	r0, [r4, #100]	; 0x64
   1b618:	cmp	r0, #0
   1b61c:	beq	1b63c <__assert_fail@plt+0xa394>
   1b620:	ldr	r1, [r4, #36]	; 0x24
   1b624:	add	r1, r1, #1
   1b628:	lsl	r1, r1, #2
   1b62c:	bl	2ab84 <__assert_fail@plt+0x198dc>
   1b630:	cmp	r0, #0
   1b634:	beq	1b7b0 <__assert_fail@plt+0xa508>
   1b638:	str	r0, [r4, #100]	; 0x64
   1b63c:	ldrb	r3, [r4, #72]	; 0x48
   1b640:	ldr	r2, [r4, #80]	; 0x50
   1b644:	cmp	r3, #0
   1b648:	beq	1b694 <__assert_fail@plt+0xa3ec>
   1b64c:	cmp	r2, #1
   1b650:	ble	1b72c <__assert_fail@plt+0xa484>
   1b654:	mov	r0, r4
   1b658:	ldrd	r4, [sp]
   1b65c:	ldrd	r6, [sp, #8]
   1b660:	ldr	r8, [sp, #16]
   1b664:	ldr	lr, [sp, #20]
   1b668:	add	sp, sp, #24
   1b66c:	b	16fe0 <__assert_fail@plt+0x5d38>
   1b670:	mov	r1, r2
   1b674:	str	r1, [r4, #28]
   1b678:	str	r1, [r4, #32]
   1b67c:	mov	r0, r6
   1b680:	ldrd	r4, [sp]
   1b684:	ldrd	r6, [sp, #8]
   1b688:	ldr	r8, [sp, #16]
   1b68c:	add	sp, sp, #20
   1b690:	pop	{pc}		; (ldr pc, [sp], #4)
   1b694:	cmp	r2, #1
   1b698:	bgt	1b720 <__assert_fail@plt+0xa478>
   1b69c:	ldr	r0, [r4, #64]	; 0x40
   1b6a0:	cmp	r0, #0
   1b6a4:	beq	1b67c <__assert_fail@plt+0xa3d4>
   1b6a8:	ldr	r2, [r4, #28]
   1b6ac:	ldr	r1, [r4, #36]	; 0x24
   1b6b0:	ldr	r3, [r4, #48]	; 0x30
   1b6b4:	cmp	r1, r3
   1b6b8:	movge	r1, r3
   1b6bc:	cmp	r1, r2
   1b6c0:	ble	1b670 <__assert_fail@plt+0xa3c8>
   1b6c4:	ldm	r4, {ip, lr}
   1b6c8:	add	r3, r2, #1
   1b6cc:	cmp	r1, r3
   1b6d0:	ldr	r5, [r4, #24]
   1b6d4:	add	ip, ip, r2
   1b6d8:	ldrb	ip, [ip, r5]
   1b6dc:	ldrb	r0, [r0, ip]
   1b6e0:	strb	r0, [lr, r2]
   1b6e4:	ble	1b674 <__assert_fail@plt+0xa3cc>
   1b6e8:	ldr	r2, [r4]
   1b6ec:	ldr	r0, [r4, #24]
   1b6f0:	ldr	ip, [r4, #64]	; 0x40
   1b6f4:	add	r2, r2, r3
   1b6f8:	ldrb	r0, [r2, r0]
   1b6fc:	ldr	r2, [r4, #4]
   1b700:	ldrb	r0, [ip, r0]
   1b704:	strb	r0, [r2, r3]
   1b708:	add	r3, r3, #1
   1b70c:	cmp	r1, r3
   1b710:	bne	1b6e8 <__assert_fail@plt+0xa440>
   1b714:	str	r1, [r4, #28]
   1b718:	str	r1, [r4, #32]
   1b71c:	b	1b67c <__assert_fail@plt+0xa3d4>
   1b720:	mov	r0, r4
   1b724:	bl	16e04 <__assert_fail@plt+0x5b5c>
   1b728:	b	1b67c <__assert_fail@plt+0xa3d4>
   1b72c:	ldr	r5, [r4, #28]
   1b730:	ldr	r7, [r4, #36]	; 0x24
   1b734:	ldr	r3, [r4, #48]	; 0x30
   1b738:	cmp	r7, r3
   1b73c:	movge	r7, r3
   1b740:	cmp	r7, r5
   1b744:	ble	1b7b8 <__assert_fail@plt+0xa510>
   1b748:	bl	1114c <__ctype_toupper_loc@plt>
   1b74c:	b	1b768 <__assert_fail@plt+0xa4c0>
   1b750:	ldr	r3, [r1, r3, lsl #2]
   1b754:	ldr	r2, [r4, #4]
   1b758:	strb	r3, [r2, r5]
   1b75c:	add	r5, r5, #1
   1b760:	cmp	r7, r5
   1b764:	beq	1b7a4 <__assert_fail@plt+0xa4fc>
   1b768:	ldr	r3, [r4]
   1b76c:	ldr	r1, [r4, #24]
   1b770:	ldr	r2, [r4, #64]	; 0x40
   1b774:	add	r3, r3, r5
   1b778:	ldrb	r3, [r3, r1]
   1b77c:	cmp	r2, #0
   1b780:	ldr	r1, [r0]
   1b784:	beq	1b750 <__assert_fail@plt+0xa4a8>
   1b788:	ldrb	r2, [r2, r3]
   1b78c:	ldr	r3, [r4, #4]
   1b790:	ldr	r2, [r1, r2, lsl #2]
   1b794:	strb	r2, [r3, r5]
   1b798:	add	r5, r5, #1
   1b79c:	cmp	r7, r5
   1b7a0:	bne	1b768 <__assert_fail@plt+0xa4c0>
   1b7a4:	str	r7, [r4, #28]
   1b7a8:	str	r7, [r4, #32]
   1b7ac:	b	1b67c <__assert_fail@plt+0xa3d4>
   1b7b0:	mov	r6, #12
   1b7b4:	b	1b67c <__assert_fail@plt+0xa3d4>
   1b7b8:	mov	r7, r5
   1b7bc:	b	1b7a4 <__assert_fail@plt+0xa4fc>
   1b7c0:	ldr	r3, [r0, #36]	; 0x24
   1b7c4:	strd	r4, [sp, #-16]!
   1b7c8:	mov	r4, r0
   1b7cc:	mov	r5, r1
   1b7d0:	str	r6, [sp, #8]
   1b7d4:	str	lr, [sp, #12]
   1b7d8:	ldr	r6, [r0, #104]	; 0x68
   1b7dc:	cmp	r3, r1
   1b7e0:	bgt	1b820 <__assert_fail@plt+0xa578>
   1b7e4:	ldr	r2, [r0, #48]	; 0x30
   1b7e8:	cmp	r3, r2
   1b7ec:	bge	1b820 <__assert_fail@plt+0xa578>
   1b7f0:	add	r1, r5, #1
   1b7f4:	mov	r0, r4
   1b7f8:	bl	1b5d0 <__assert_fail@plt+0xa328>
   1b7fc:	cmp	r0, #0
   1b800:	bne	1b810 <__assert_fail@plt+0xa568>
   1b804:	cmp	r6, r5
   1b808:	movge	r0, #0
   1b80c:	blt	1b83c <__assert_fail@plt+0xa594>
   1b810:	ldrd	r4, [sp]
   1b814:	ldr	r6, [sp, #8]
   1b818:	add	sp, sp, #12
   1b81c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b820:	ldr	r3, [r4, #28]
   1b824:	cmp	r3, r5
   1b828:	bgt	1b804 <__assert_fail@plt+0xa55c>
   1b82c:	ldr	r2, [r4, #48]	; 0x30
   1b830:	cmp	r3, r2
   1b834:	bge	1b804 <__assert_fail@plt+0xa55c>
   1b838:	b	1b7f0 <__assert_fail@plt+0xa548>
   1b83c:	ldr	r3, [r4, #100]	; 0x64
   1b840:	sub	r2, r5, r6
   1b844:	add	r0, r6, #1
   1b848:	lsl	r2, r2, #2
   1b84c:	mov	r1, #0
   1b850:	add	r0, r3, r0, lsl #2
   1b854:	bl	111c4 <memset@plt>
   1b858:	str	r5, [r4, #104]	; 0x68
   1b85c:	mov	r0, #0
   1b860:	ldrd	r4, [sp]
   1b864:	ldr	r6, [sp, #8]
   1b868:	add	sp, sp, #12
   1b86c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b870:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b874:	mov	r5, r1
   1b878:	mov	r4, r2
   1b87c:	strd	r6, [sp, #8]
   1b880:	mov	r6, r0
   1b884:	strd	r8, [sp, #16]
   1b888:	mov	r8, r3
   1b88c:	mov	r9, #1
   1b890:	str	sl, [sp, #24]
   1b894:	str	lr, [sp, #28]
   1b898:	sub	sp, sp, #8
   1b89c:	ldr	r7, [sp, #40]	; 0x28
   1b8a0:	ldr	r1, [r5, #4]
   1b8a4:	cmp	r1, #0
   1b8a8:	ble	1b920 <__assert_fail@plt+0xa678>
   1b8ac:	subs	r2, r1, #1
   1b8b0:	ldr	ip, [r5, #8]
   1b8b4:	moveq	r0, r2
   1b8b8:	beq	1b914 <__assert_fail@plt+0xa66c>
   1b8bc:	mov	r0, #0
   1b8c0:	add	r3, r0, r2
   1b8c4:	lsr	r3, r3, #1
   1b8c8:	ldr	lr, [ip, r3, lsl #2]
   1b8cc:	cmp	lr, r4
   1b8d0:	blt	1b9a4 <__assert_fail@plt+0xa6fc>
   1b8d4:	cmp	r0, r3
   1b8d8:	bcs	1b914 <__assert_fail@plt+0xa66c>
   1b8dc:	add	r2, r0, r3
   1b8e0:	lsr	r2, r2, #1
   1b8e4:	ldr	lr, [ip, r2, lsl #2]
   1b8e8:	cmp	r4, lr
   1b8ec:	ble	1b904 <__assert_fail@plt+0xa65c>
   1b8f0:	b	1b998 <__assert_fail@plt+0xa6f0>
   1b8f4:	ldr	lr, [ip, r3, lsl #2]
   1b8f8:	cmp	r4, lr
   1b8fc:	bgt	1b9a4 <__assert_fail@plt+0xa6fc>
   1b900:	mov	r2, r3
   1b904:	add	r3, r2, r0
   1b908:	cmp	r2, r0
   1b90c:	lsr	r3, r3, #1
   1b910:	bhi	1b8f4 <__assert_fail@plt+0xa64c>
   1b914:	ldr	r3, [ip, r0, lsl #2]
   1b918:	cmp	r4, r3
   1b91c:	beq	1b9bc <__assert_fail@plt+0xa714>
   1b920:	ldr	r3, [r6]
   1b924:	add	r2, r3, r4, lsl #3
   1b928:	ldrb	r2, [r2, #4]
   1b92c:	cmp	r2, r7
   1b930:	bne	1b940 <__assert_fail@plt+0xa698>
   1b934:	ldr	r3, [r3, r4, lsl #3]
   1b938:	cmp	r3, r8
   1b93c:	beq	1bab4 <__assert_fail@plt+0xa80c>
   1b940:	ldr	r3, [r5]
   1b944:	cmp	r3, #0
   1b948:	beq	1b9dc <__assert_fail@plt+0xa734>
   1b94c:	cmp	r1, #0
   1b950:	ldr	sl, [r5, #8]
   1b954:	bne	1ba34 <__assert_fail@plt+0xa78c>
   1b958:	str	r4, [sl]
   1b95c:	ldr	r3, [r5, #4]
   1b960:	add	r3, r3, #1
   1b964:	str	r3, [r5, #4]
   1b968:	ldr	r3, [r6, #20]
   1b96c:	add	r4, r4, r4, lsl #1
   1b970:	lsl	r4, r4, #2
   1b974:	add	r3, r3, r4
   1b978:	ldr	r2, [r3, #4]
   1b97c:	cmp	r2, #0
   1b980:	beq	1b9bc <__assert_fail@plt+0xa714>
   1b984:	cmp	r2, #2
   1b988:	ldr	r3, [r3, #8]
   1b98c:	beq	1ba04 <__assert_fail@plt+0xa75c>
   1b990:	ldr	r4, [r3]
   1b994:	b	1b8a0 <__assert_fail@plt+0xa5f8>
   1b998:	mov	r0, r2
   1b99c:	mov	r2, r3
   1b9a0:	mov	r3, r0
   1b9a4:	add	r0, r3, #1
   1b9a8:	cmp	r0, r2
   1b9ac:	bcc	1b8c0 <__assert_fail@plt+0xa618>
   1b9b0:	ldr	r3, [ip, r0, lsl #2]
   1b9b4:	cmp	r4, r3
   1b9b8:	bne	1b920 <__assert_fail@plt+0xa678>
   1b9bc:	mov	r0, #0
   1b9c0:	add	sp, sp, #8
   1b9c4:	ldrd	r4, [sp]
   1b9c8:	ldrd	r6, [sp, #8]
   1b9cc:	ldrd	r8, [sp, #16]
   1b9d0:	ldr	sl, [sp, #24]
   1b9d4:	add	sp, sp, #28
   1b9d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9dc:	mov	r0, #4
   1b9e0:	str	r9, [r5]
   1b9e4:	str	r9, [r5, #4]
   1b9e8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1b9ec:	cmp	r0, #0
   1b9f0:	mov	r3, r0
   1b9f4:	str	r0, [r5, #8]
   1b9f8:	beq	1bad8 <__assert_fail@plt+0xa830>
   1b9fc:	str	r4, [r0]
   1ba00:	b	1b968 <__assert_fail@plt+0xa6c0>
   1ba04:	mov	r1, r5
   1ba08:	mov	r0, r6
   1ba0c:	ldr	r2, [r3, #4]
   1ba10:	mov	r3, r8
   1ba14:	str	r7, [sp]
   1ba18:	bl	1b870 <__assert_fail@plt+0xa5c8>
   1ba1c:	cmp	r0, #0
   1ba20:	bne	1b9c0 <__assert_fail@plt+0xa718>
   1ba24:	ldr	r3, [r6, #20]
   1ba28:	add	r4, r3, r4
   1ba2c:	ldr	r3, [r4, #8]
   1ba30:	b	1b990 <__assert_fail@plt+0xa6e8>
   1ba34:	cmp	r1, r3
   1ba38:	beq	1bae8 <__assert_fail@plt+0xa840>
   1ba3c:	ldr	r3, [sl]
   1ba40:	mov	r2, r1
   1ba44:	cmp	r4, r3
   1ba48:	bge	1ba7c <__assert_fail@plt+0xa7d4>
   1ba4c:	cmp	r1, #0
   1ba50:	ble	1ba68 <__assert_fail@plt+0xa7c0>
   1ba54:	lsl	r2, r1, #2
   1ba58:	add	r0, sl, #4
   1ba5c:	mov	r1, sl
   1ba60:	bl	11008 <memmove@plt>
   1ba64:	mov	r2, #0
   1ba68:	str	r4, [sl, r2, lsl #2]
   1ba6c:	ldr	r3, [r5, #4]
   1ba70:	add	r3, r3, #1
   1ba74:	str	r3, [r5, #4]
   1ba78:	b	1b968 <__assert_fail@plt+0xa6c0>
   1ba7c:	sub	r3, r1, #-1073741823	; 0xc0000001
   1ba80:	ldr	r0, [sl, r3, lsl #2]
   1ba84:	lsl	r3, r3, #2
   1ba88:	cmp	r4, r0
   1ba8c:	bge	1ba68 <__assert_fail@plt+0xa7c0>
   1ba90:	add	r3, r3, #4
   1ba94:	add	r3, sl, r3
   1ba98:	str	r0, [r3], #-4
   1ba9c:	sub	r1, r1, #1
   1baa0:	ldr	r0, [r3, #-4]
   1baa4:	mov	r2, r1
   1baa8:	cmp	r4, r0
   1baac:	blt	1ba98 <__assert_fail@plt+0xa7f0>
   1bab0:	b	1ba68 <__assert_fail@plt+0xa7c0>
   1bab4:	cmp	r7, #9
   1bab8:	bne	1b9bc <__assert_fail@plt+0xa714>
   1babc:	mov	r1, r4
   1bac0:	mov	r0, r5
   1bac4:	bl	17910 <__assert_fail@plt+0x6668>
   1bac8:	cmp	r0, #0
   1bacc:	bne	1b9bc <__assert_fail@plt+0xa714>
   1bad0:	mov	r0, #12
   1bad4:	b	1b9c0 <__assert_fail@plt+0xa718>
   1bad8:	mov	r0, #12
   1badc:	str	r3, [r5]
   1bae0:	str	r3, [r5, #4]
   1bae4:	b	1b9c0 <__assert_fail@plt+0xa718>
   1bae8:	lsl	r3, r1, #1
   1baec:	mov	r0, sl
   1baf0:	lsl	r1, r1, #3
   1baf4:	str	r3, [r5]
   1baf8:	bl	2ab84 <__assert_fail@plt+0x198dc>
   1bafc:	subs	sl, r0, #0
   1bb00:	beq	1bad0 <__assert_fail@plt+0xa828>
   1bb04:	str	sl, [r5, #8]
   1bb08:	ldr	r1, [r5, #4]
   1bb0c:	b	1ba3c <__assert_fail@plt+0xa794>
   1bb10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bb14:	mov	r5, r2
   1bb18:	mov	r4, r3
   1bb1c:	strd	r6, [sp, #8]
   1bb20:	mov	r6, #0
   1bb24:	mov	r7, r0
   1bb28:	strd	r8, [sp, #16]
   1bb2c:	mov	r8, r1
   1bb30:	ldr	r1, [r1, #4]
   1bb34:	strd	sl, [sp, #24]
   1bb38:	str	lr, [sp, #32]
   1bb3c:	sub	sp, sp, #28
   1bb40:	lsl	r0, r1, #2
   1bb44:	str	r1, [sp, #12]
   1bb48:	str	r6, [sp, #16]
   1bb4c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1bb50:	cmp	r0, r6
   1bb54:	str	r0, [sp, #20]
   1bb58:	beq	1bc58 <__assert_fail@plt+0xa9b0>
   1bb5c:	ldr	r3, [r8, #4]
   1bb60:	add	r9, sp, #12
   1bb64:	cmp	r3, r6
   1bb68:	ble	1bc00 <__assert_fail@plt+0xa958>
   1bb6c:	ldr	r3, [r8, #8]
   1bb70:	ldr	r1, [r7, #24]
   1bb74:	ldr	r2, [r3, r6, lsl #2]
   1bb78:	add	r3, r2, r2, lsl #1
   1bb7c:	add	r1, r1, r3, lsl #2
   1bb80:	ldr	fp, [r1, #4]
   1bb84:	cmp	fp, #0
   1bb88:	ble	1bc20 <__assert_fail@plt+0xa978>
   1bb8c:	ldr	ip, [r1, #8]
   1bb90:	mov	r3, #0
   1bb94:	ldr	sl, [r7]
   1bb98:	sub	ip, ip, #4
   1bb9c:	b	1bba8 <__assert_fail@plt+0xa900>
   1bba0:	cmp	fp, r3
   1bba4:	beq	1bc20 <__assert_fail@plt+0xa978>
   1bba8:	ldr	r0, [ip, #4]!
   1bbac:	add	r3, r3, #1
   1bbb0:	add	lr, sl, r0, lsl #3
   1bbb4:	ldrb	lr, [lr, #4]
   1bbb8:	cmp	r4, lr
   1bbbc:	bne	1bba0 <__assert_fail@plt+0xa8f8>
   1bbc0:	ldr	lr, [sl, r0, lsl #3]
   1bbc4:	cmp	r5, lr
   1bbc8:	bne	1bba0 <__assert_fail@plt+0xa8f8>
   1bbcc:	cmn	r0, #1
   1bbd0:	beq	1bc20 <__assert_fail@plt+0xa978>
   1bbd4:	mov	r3, r5
   1bbd8:	mov	r1, r9
   1bbdc:	str	r4, [sp]
   1bbe0:	mov	r0, r7
   1bbe4:	bl	1b870 <__assert_fail@plt+0xa5c8>
   1bbe8:	subs	sl, r0, #0
   1bbec:	bne	1bc30 <__assert_fail@plt+0xa988>
   1bbf0:	ldr	r3, [r8, #4]
   1bbf4:	add	r6, r6, #1
   1bbf8:	cmp	r3, r6
   1bbfc:	bgt	1bb6c <__assert_fail@plt+0xa8c4>
   1bc00:	ldr	r0, [r8, #8]
   1bc04:	mov	sl, #0
   1bc08:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1bc0c:	ldr	r1, [r9, #8]
   1bc10:	ldrd	r2, [sp, #12]
   1bc14:	strd	r2, [r8]
   1bc18:	str	r1, [r8, #8]
   1bc1c:	b	1bc38 <__assert_fail@plt+0xa990>
   1bc20:	mov	r0, r9
   1bc24:	bl	17d0c <__assert_fail@plt+0x6a64>
   1bc28:	subs	sl, r0, #0
   1bc2c:	beq	1bbf0 <__assert_fail@plt+0xa948>
   1bc30:	ldr	r0, [sp, #20]
   1bc34:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1bc38:	mov	r0, sl
   1bc3c:	add	sp, sp, #28
   1bc40:	ldrd	r4, [sp]
   1bc44:	ldrd	r6, [sp, #8]
   1bc48:	ldrd	r8, [sp, #16]
   1bc4c:	ldrd	sl, [sp, #24]
   1bc50:	add	sp, sp, #32
   1bc54:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc58:	mov	sl, #12
   1bc5c:	b	1bc38 <__assert_fail@plt+0xa990>
   1bc60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bc64:	mov	r4, #0
   1bc68:	strd	r6, [sp, #8]
   1bc6c:	mov	r6, r0
   1bc70:	add	r0, r1, r1, lsl #1
   1bc74:	strd	r8, [sp, #16]
   1bc78:	strd	sl, [sp, #24]
   1bc7c:	str	lr, [sp, #32]
   1bc80:	sub	sp, sp, #44	; 0x2c
   1bc84:	str	r1, [sp, #4]
   1bc88:	ldr	r1, [r6, #28]
   1bc8c:	str	r3, [sp, #16]
   1bc90:	str	r4, [sp, #28]
   1bc94:	str	r4, [sp, #32]
   1bc98:	str	r4, [sp, #36]	; 0x24
   1bc9c:	add	r9, r1, r0, lsl #2
   1bca0:	ldr	sl, [r9, #4]
   1bca4:	str	r9, [sp, #20]
   1bca8:	cmp	sl, r4
   1bcac:	ble	1c18c <__assert_fail@plt+0xaee4>
   1bcb0:	str	r2, [sp, #8]
   1bcb4:	ldr	r1, [r9, #8]
   1bcb8:	ldr	r3, [sp, #4]
   1bcbc:	ldr	r2, [r1, r4, lsl #2]
   1bcc0:	cmp	r3, r2
   1bcc4:	beq	1bf00 <__assert_fail@plt+0xac58>
   1bcc8:	ldr	r3, [r6]
   1bccc:	add	r3, r3, r2, lsl #3
   1bcd0:	ldrb	r3, [r3, #4]
   1bcd4:	tst	r3, #8
   1bcd8:	beq	1bf00 <__assert_fail@plt+0xac58>
   1bcdc:	ldr	r3, [r6, #20]
   1bce0:	add	r2, r2, r2, lsl #1
   1bce4:	lsl	r2, r2, #2
   1bce8:	add	r3, r3, r2
   1bcec:	ldmib	r3, {r0, r3}
   1bcf0:	cmp	r0, #1
   1bcf4:	mvnle	r7, #0
   1bcf8:	ldrgt	r7, [r3, #4]
   1bcfc:	sub	lr, sl, #1
   1bd00:	cmp	lr, #0
   1bd04:	mov	ip, lr
   1bd08:	ldr	r5, [r3]
   1bd0c:	moveq	r8, lr
   1bd10:	beq	1bd70 <__assert_fail@plt+0xaac8>
   1bd14:	mov	r0, lr
   1bd18:	mov	r8, #0
   1bd1c:	add	r3, r0, r8
   1bd20:	lsr	r3, r3, #1
   1bd24:	ldr	fp, [r1, r3, lsl #2]
   1bd28:	cmp	r5, fp
   1bd2c:	bgt	1c094 <__assert_fail@plt+0xadec>
   1bd30:	cmp	r3, r8
   1bd34:	bls	1bd70 <__assert_fail@plt+0xaac8>
   1bd38:	add	r0, r3, r8
   1bd3c:	lsr	r0, r0, #1
   1bd40:	ldr	fp, [r1, r0, lsl #2]
   1bd44:	cmp	r5, fp
   1bd48:	ble	1bd60 <__assert_fail@plt+0xaab8>
   1bd4c:	b	1c088 <__assert_fail@plt+0xade0>
   1bd50:	ldr	fp, [r1, r3, lsl #2]
   1bd54:	cmp	r5, fp
   1bd58:	bgt	1c094 <__assert_fail@plt+0xadec>
   1bd5c:	mov	r0, r3
   1bd60:	add	r3, r8, r0
   1bd64:	cmp	r8, r0
   1bd68:	lsr	r3, r3, #1
   1bd6c:	bcc	1bd50 <__assert_fail@plt+0xaaa8>
   1bd70:	ldr	r3, [r1, r8, lsl #2]
   1bd74:	cmp	r5, r3
   1bd78:	beq	1be08 <__assert_fail@plt+0xab60>
   1bd7c:	ldr	r3, [sp, #8]
   1bd80:	ldr	r0, [r3, #4]
   1bd84:	cmp	r0, #0
   1bd88:	ble	1be08 <__assert_fail@plt+0xab60>
   1bd8c:	subs	r0, r0, #1
   1bd90:	ldr	fp, [r3, #8]
   1bd94:	moveq	r8, r0
   1bd98:	beq	1bdfc <__assert_fail@plt+0xab54>
   1bd9c:	mov	r8, #0
   1bda0:	str	r2, [sp, #12]
   1bda4:	add	r3, r0, r8
   1bda8:	lsr	r3, r3, #1
   1bdac:	ldr	r2, [fp, r3, lsl #2]
   1bdb0:	cmp	r5, r2
   1bdb4:	bgt	1c134 <__assert_fail@plt+0xae8c>
   1bdb8:	cmp	r3, r8
   1bdbc:	bls	1bdf8 <__assert_fail@plt+0xab50>
   1bdc0:	add	r0, r3, r8
   1bdc4:	lsr	r0, r0, #1
   1bdc8:	ldr	r2, [fp, r0, lsl #2]
   1bdcc:	cmp	r5, r2
   1bdd0:	ble	1bde8 <__assert_fail@plt+0xab40>
   1bdd4:	b	1c128 <__assert_fail@plt+0xae80>
   1bdd8:	ldr	r2, [fp, r3, lsl #2]
   1bddc:	cmp	r5, r2
   1bde0:	bgt	1c134 <__assert_fail@plt+0xae8c>
   1bde4:	mov	r0, r3
   1bde8:	add	r3, r8, r0
   1bdec:	cmp	r8, r0
   1bdf0:	lsr	r3, r3, #1
   1bdf4:	bcc	1bdd8 <__assert_fail@plt+0xab30>
   1bdf8:	ldr	r2, [sp, #12]
   1bdfc:	ldr	r3, [fp, r8, lsl #2]
   1be00:	cmp	r5, r3
   1be04:	beq	1c104 <__assert_fail@plt+0xae5c>
   1be08:	cmp	r7, #0
   1be0c:	ble	1bf00 <__assert_fail@plt+0xac58>
   1be10:	cmp	lr, #0
   1be14:	movne	lr, #0
   1be18:	beq	1be70 <__assert_fail@plt+0xabc8>
   1be1c:	add	r3, ip, lr
   1be20:	lsr	r3, r3, #1
   1be24:	ldr	r0, [r1, r3, lsl #2]
   1be28:	cmp	r0, r7
   1be2c:	blt	1c150 <__assert_fail@plt+0xaea8>
   1be30:	cmp	r3, lr
   1be34:	bls	1be70 <__assert_fail@plt+0xabc8>
   1be38:	add	ip, r3, lr
   1be3c:	lsr	ip, ip, #1
   1be40:	ldr	r0, [r1, ip, lsl #2]
   1be44:	cmp	r7, r0
   1be48:	ble	1be60 <__assert_fail@plt+0xabb8>
   1be4c:	b	1c144 <__assert_fail@plt+0xae9c>
   1be50:	ldr	r0, [r1, r3, lsl #2]
   1be54:	cmp	r0, r7
   1be58:	blt	1c150 <__assert_fail@plt+0xaea8>
   1be5c:	mov	ip, r3
   1be60:	add	r3, lr, ip
   1be64:	cmp	lr, ip
   1be68:	lsr	r3, r3, #1
   1be6c:	bcc	1be50 <__assert_fail@plt+0xaba8>
   1be70:	ldr	r3, [r1, lr, lsl #2]
   1be74:	cmp	r3, r7
   1be78:	beq	1bf00 <__assert_fail@plt+0xac58>
   1be7c:	ldr	r3, [sp, #8]
   1be80:	ldr	r1, [r3, #4]
   1be84:	cmp	r1, #0
   1be88:	ble	1bf00 <__assert_fail@plt+0xac58>
   1be8c:	subs	r1, r1, #1
   1be90:	ldr	ip, [r3, #8]
   1be94:	moveq	r0, r1
   1be98:	beq	1bef4 <__assert_fail@plt+0xac4c>
   1be9c:	mov	r0, #0
   1bea0:	add	r3, r1, r0
   1bea4:	lsr	r3, r3, #1
   1bea8:	ldr	lr, [ip, r3, lsl #2]
   1beac:	cmp	lr, r7
   1beb0:	blt	1c16c <__assert_fail@plt+0xaec4>
   1beb4:	cmp	r3, r0
   1beb8:	bls	1bef4 <__assert_fail@plt+0xac4c>
   1bebc:	add	r1, r3, r0
   1bec0:	lsr	r1, r1, #1
   1bec4:	ldr	lr, [ip, r1, lsl #2]
   1bec8:	cmp	r7, lr
   1becc:	ble	1bee4 <__assert_fail@plt+0xac3c>
   1bed0:	b	1c160 <__assert_fail@plt+0xaeb8>
   1bed4:	ldr	lr, [ip, r3, lsl #2]
   1bed8:	cmp	lr, r7
   1bedc:	blt	1c16c <__assert_fail@plt+0xaec4>
   1bee0:	mov	r1, r3
   1bee4:	add	r3, r0, r1
   1bee8:	cmp	r0, r1
   1beec:	lsr	r3, r3, #1
   1bef0:	bcc	1bed4 <__assert_fail@plt+0xac2c>
   1bef4:	ldr	r3, [ip, r0, lsl #2]
   1bef8:	cmp	r3, r7
   1befc:	beq	1c104 <__assert_fail@plt+0xae5c>
   1bf00:	add	r4, r4, #1
   1bf04:	cmp	r4, sl
   1bf08:	blt	1bcb4 <__assert_fail@plt+0xaa0c>
   1bf0c:	cmp	sl, #0
   1bf10:	ldr	r5, [sp, #8]
   1bf14:	ldr	r0, [sp, #36]	; 0x24
   1bf18:	ble	1c044 <__assert_fail@plt+0xad9c>
   1bf1c:	mov	r1, #0
   1bf20:	ldr	r4, [sp, #20]
   1bf24:	ldr	ip, [r4, #8]
   1bf28:	sub	ip, ip, #4
   1bf2c:	ldr	r2, [sp, #32]
   1bf30:	ldr	lr, [ip, #4]!
   1bf34:	cmp	r2, #0
   1bf38:	ble	1bfac <__assert_fail@plt+0xad04>
   1bf3c:	subs	r2, r2, #1
   1bf40:	moveq	r7, r2
   1bf44:	beq	1bfa0 <__assert_fail@plt+0xacf8>
   1bf48:	mov	r7, #0
   1bf4c:	add	r3, r2, r7
   1bf50:	lsr	r3, r3, #1
   1bf54:	ldr	r6, [r0, r3, lsl #2]
   1bf58:	cmp	r6, lr
   1bf5c:	blt	1c078 <__assert_fail@plt+0xadd0>
   1bf60:	cmp	r3, r7
   1bf64:	bls	1bfa0 <__assert_fail@plt+0xacf8>
   1bf68:	add	r2, r3, r7
   1bf6c:	lsr	r2, r2, #1
   1bf70:	ldr	r6, [r0, r2, lsl #2]
   1bf74:	cmp	lr, r6
   1bf78:	ble	1bf90 <__assert_fail@plt+0xace8>
   1bf7c:	b	1c06c <__assert_fail@plt+0xadc4>
   1bf80:	ldr	r6, [r0, r3, lsl #2]
   1bf84:	cmp	lr, r6
   1bf88:	bgt	1c078 <__assert_fail@plt+0xadd0>
   1bf8c:	mov	r2, r3
   1bf90:	add	r3, r7, r2
   1bf94:	cmp	r7, r2
   1bf98:	lsr	r3, r3, #1
   1bf9c:	bcc	1bf80 <__assert_fail@plt+0xacd8>
   1bfa0:	ldr	r3, [r0, r7, lsl #2]
   1bfa4:	cmp	lr, r3
   1bfa8:	beq	1c038 <__assert_fail@plt+0xad90>
   1bfac:	ldr	r7, [r5, #4]
   1bfb0:	cmp	r7, #0
   1bfb4:	ble	1c038 <__assert_fail@plt+0xad90>
   1bfb8:	sub	r8, r7, #1
   1bfbc:	ldr	r3, [r5, #8]
   1bfc0:	cmp	r8, #0
   1bfc4:	mov	r9, r8
   1bfc8:	moveq	r6, r8
   1bfcc:	beq	1c028 <__assert_fail@plt+0xad80>
   1bfd0:	mov	r6, #0
   1bfd4:	add	r2, r9, r6
   1bfd8:	lsr	r2, r2, #1
   1bfdc:	ldr	fp, [r3, r2, lsl #2]
   1bfe0:	cmp	lr, fp
   1bfe4:	bgt	1c0f4 <__assert_fail@plt+0xae4c>
   1bfe8:	cmp	r2, r6
   1bfec:	bls	1c028 <__assert_fail@plt+0xad80>
   1bff0:	add	r9, r2, r6
   1bff4:	lsr	r9, r9, #1
   1bff8:	ldr	fp, [r3, r9, lsl #2]
   1bffc:	cmp	lr, fp
   1c000:	ble	1c018 <__assert_fail@plt+0xad70>
   1c004:	b	1c0e8 <__assert_fail@plt+0xae40>
   1c008:	ldr	fp, [r3, r2, lsl #2]
   1c00c:	cmp	lr, fp
   1c010:	bgt	1c0f4 <__assert_fail@plt+0xae4c>
   1c014:	mov	r9, r2
   1c018:	add	r2, r6, r9
   1c01c:	cmp	r6, r9
   1c020:	lsr	r2, r2, #1
   1c024:	bcc	1c008 <__assert_fail@plt+0xad60>
   1c028:	ldr	r2, [r3, r6, lsl #2]
   1c02c:	add	r3, r3, r6, lsl #2
   1c030:	cmp	lr, r2
   1c034:	beq	1c0a4 <__assert_fail@plt+0xadfc>
   1c038:	add	r1, r1, #1
   1c03c:	cmp	r1, sl
   1c040:	blt	1bf2c <__assert_fail@plt+0xac84>
   1c044:	mov	r7, #0
   1c048:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c04c:	mov	r0, r7
   1c050:	add	sp, sp, #44	; 0x2c
   1c054:	ldrd	r4, [sp]
   1c058:	ldrd	r6, [sp, #8]
   1c05c:	ldrd	r8, [sp, #16]
   1c060:	ldrd	sl, [sp, #24]
   1c064:	add	sp, sp, #32
   1c068:	pop	{pc}		; (ldr pc, [sp], #4)
   1c06c:	mov	r6, r2
   1c070:	mov	r2, r3
   1c074:	mov	r3, r6
   1c078:	add	r7, r3, #1
   1c07c:	cmp	r7, r2
   1c080:	bcc	1bf4c <__assert_fail@plt+0xaca4>
   1c084:	b	1bfa0 <__assert_fail@plt+0xacf8>
   1c088:	mov	r8, r3
   1c08c:	mov	r3, r0
   1c090:	mov	r0, r8
   1c094:	add	r8, r3, #1
   1c098:	cmp	r0, r8
   1c09c:	bhi	1bd1c <__assert_fail@plt+0xaa74>
   1c0a0:	b	1bd70 <__assert_fail@plt+0xaac8>
   1c0a4:	cmp	r6, r7
   1c0a8:	mov	r2, r6
   1c0ac:	movlt	r7, #0
   1c0b0:	movge	r7, #1
   1c0b4:	orrs	lr, r7, r6, lsr #31
   1c0b8:	bne	1c038 <__assert_fail@plt+0xad90>
   1c0bc:	cmp	r6, r8
   1c0c0:	str	r8, [r5, #4]
   1c0c4:	bge	1c0e0 <__assert_fail@plt+0xae38>
   1c0c8:	ldr	lr, [r3, #4]
   1c0cc:	add	r2, r2, #1
   1c0d0:	str	lr, [r3], #4
   1c0d4:	ldr	lr, [r5, #4]
   1c0d8:	cmp	r2, lr
   1c0dc:	blt	1c0c8 <__assert_fail@plt+0xae20>
   1c0e0:	ldr	sl, [r4, #4]
   1c0e4:	b	1c038 <__assert_fail@plt+0xad90>
   1c0e8:	mov	r6, r2
   1c0ec:	mov	r2, r9
   1c0f0:	mov	r9, r6
   1c0f4:	add	r6, r2, #1
   1c0f8:	cmp	r6, r9
   1c0fc:	bcc	1bfd4 <__assert_fail@plt+0xad2c>
   1c100:	b	1c028 <__assert_fail@plt+0xad80>
   1c104:	ldr	r3, [r6, #28]
   1c108:	add	r0, sp, #28
   1c10c:	ldr	r1, [sp, #16]
   1c110:	add	r2, r3, r2
   1c114:	bl	17b24 <__assert_fail@plt+0x687c>
   1c118:	cmp	r0, #0
   1c11c:	bne	1c17c <__assert_fail@plt+0xaed4>
   1c120:	ldr	sl, [r9, #4]
   1c124:	b	1bf00 <__assert_fail@plt+0xac58>
   1c128:	mov	r8, r0
   1c12c:	mov	r0, r3
   1c130:	mov	r3, r8
   1c134:	add	r8, r3, #1
   1c138:	cmp	r8, r0
   1c13c:	bcc	1bda4 <__assert_fail@plt+0xaafc>
   1c140:	b	1bdf8 <__assert_fail@plt+0xab50>
   1c144:	mov	r0, ip
   1c148:	mov	ip, r3
   1c14c:	mov	r3, r0
   1c150:	add	lr, r3, #1
   1c154:	cmp	lr, ip
   1c158:	bcc	1be1c <__assert_fail@plt+0xab74>
   1c15c:	b	1be70 <__assert_fail@plt+0xabc8>
   1c160:	mov	r0, r1
   1c164:	mov	r1, r3
   1c168:	mov	r3, r0
   1c16c:	add	r0, r3, #1
   1c170:	cmp	r0, r1
   1c174:	bcc	1bea0 <__assert_fail@plt+0xabf8>
   1c178:	b	1bef4 <__assert_fail@plt+0xac4c>
   1c17c:	mov	r7, r0
   1c180:	ldr	r0, [sp, #36]	; 0x24
   1c184:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c188:	b	1c04c <__assert_fail@plt+0xada4>
   1c18c:	mov	r0, r4
   1c190:	b	1c044 <__assert_fail@plt+0xad9c>
   1c194:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c198:	mov	r5, r2
   1c19c:	ldr	r2, [r1, #20]
   1c1a0:	strd	r6, [sp, #8]
   1c1a4:	mov	r7, r1
   1c1a8:	strd	r8, [sp, #16]
   1c1ac:	add	r9, r5, r5, lsl #1
   1c1b0:	strd	sl, [sp, #24]
   1c1b4:	lsl	r9, r9, #2
   1c1b8:	str	lr, [sp, #32]
   1c1bc:	sub	sp, sp, #44	; 0x2c
   1c1c0:	add	r2, r2, r9
   1c1c4:	str	r0, [sp, #16]
   1c1c8:	ldr	r2, [r2, #4]
   1c1cc:	str	r3, [sp, #20]
   1c1d0:	add	r3, r2, #1
   1c1d4:	lsl	r0, r3, #2
   1c1d8:	str	r3, [sp, #8]
   1c1dc:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1c1e0:	subs	r4, r0, #0
   1c1e4:	beq	1c500 <__assert_fail@plt+0xb258>
   1c1e8:	ldr	ip, [r7]
   1c1ec:	lsl	r6, r5, #3
   1c1f0:	mov	r3, #65280	; 0xff00
   1c1f4:	movt	r3, #3
   1c1f8:	str	r5, [r4]
   1c1fc:	mvn	r8, #0
   1c200:	ldr	r1, [r7, #24]
   1c204:	add	r0, ip, r6
   1c208:	ldr	lr, [r0, #4]
   1c20c:	add	r2, r1, r9
   1c210:	str	r8, [r2, #4]
   1c214:	and	r3, r3, lr
   1c218:	cmp	r3, #0
   1c21c:	beq	1c24c <__assert_fail@plt+0xafa4>
   1c220:	ldr	r3, [r7, #20]
   1c224:	add	r3, r3, r9
   1c228:	ldr	r8, [r3, #4]
   1c22c:	cmp	r8, #0
   1c230:	beq	1c4c4 <__assert_fail@plt+0xb21c>
   1c234:	ldr	r3, [r3, #8]
   1c238:	ldr	r3, [r3]
   1c23c:	add	ip, ip, r3, lsl #3
   1c240:	ldrb	r3, [ip, #6]
   1c244:	tst	r3, #4
   1c248:	beq	1c4cc <__assert_fail@plt+0xb224>
   1c24c:	ldrb	r3, [r0, #4]
   1c250:	tst	r3, #8
   1c254:	beq	1c3f0 <__assert_fail@plt+0xb148>
   1c258:	ldr	ip, [r7, #20]
   1c25c:	add	r3, ip, r9
   1c260:	ldr	r2, [r3, #4]
   1c264:	cmp	r2, #0
   1c268:	ble	1c3f0 <__assert_fail@plt+0xb148>
   1c26c:	mov	r2, #0
   1c270:	mov	sl, #1
   1c274:	mov	r8, r2
   1c278:	str	r2, [sp, #12]
   1c27c:	ldr	r3, [r3, #8]
   1c280:	ldr	r2, [r3, r8, lsl #2]
   1c284:	add	r6, r2, r2, lsl #1
   1c288:	lsl	r6, r6, #2
   1c28c:	add	r0, r1, r6
   1c290:	ldr	r3, [r0, #4]
   1c294:	cmn	r3, #1
   1c298:	moveq	r3, #1
   1c29c:	streq	r3, [sp, #12]
   1c2a0:	beq	1c3b8 <__assert_fail@plt+0xb110>
   1c2a4:	cmp	r3, #0
   1c2a8:	beq	1c458 <__assert_fail@plt+0xb1b0>
   1c2ac:	ldrd	r2, [r0]
   1c2b0:	strd	r2, [sp, #28]
   1c2b4:	ldr	r3, [r0, #8]
   1c2b8:	str	r3, [sp, #36]	; 0x24
   1c2bc:	ldr	r2, [sp, #32]
   1c2c0:	cmp	r2, #0
   1c2c4:	mov	r3, r2
   1c2c8:	beq	1c3a0 <__assert_fail@plt+0xb0f8>
   1c2cc:	ldr	r1, [sp, #8]
   1c2d0:	add	fp, sl, r2, lsl #1
   1c2d4:	cmp	r1, fp
   1c2d8:	blt	1c48c <__assert_fail@plt+0xb1e4>
   1c2dc:	cmp	sl, #0
   1c2e0:	beq	1c508 <__assert_fail@plt+0xb260>
   1c2e4:	sub	r2, r2, #1
   1c2e8:	sub	r5, sl, #1
   1c2ec:	ldr	r1, [sp, #36]	; 0x24
   1c2f0:	cmp	r2, #0
   1c2f4:	cmpge	r5, #0
   1c2f8:	mvn	r0, r2
   1c2fc:	blt	1c348 <__assert_fail@plt+0xb0a0>
   1c300:	mov	r3, r5
   1c304:	ldr	lr, [r4, r3, lsl #2]
   1c308:	ldr	ip, [r1, r2, lsl #2]
   1c30c:	cmp	lr, ip
   1c310:	subeq	r2, r2, #1
   1c314:	subeq	r3, r3, #1
   1c318:	mvneq	r0, r2
   1c31c:	beq	1c338 <__assert_fail@plt+0xb090>
   1c320:	subge	r3, r3, #1
   1c324:	bge	1c338 <__assert_fail@plt+0xb090>
   1c328:	sub	r2, r2, #1
   1c32c:	sub	fp, fp, #1
   1c330:	mvn	r0, r2
   1c334:	str	ip, [r4, fp, lsl #2]
   1c338:	mvn	ip, r3
   1c33c:	lsr	ip, ip, #31
   1c340:	ands	ip, ip, r0, lsr #31
   1c344:	bne	1c304 <__assert_fail@plt+0xb05c>
   1c348:	cmp	r2, #0
   1c34c:	blt	1c364 <__assert_fail@plt+0xb0bc>
   1c350:	add	r2, r2, #1
   1c354:	sub	fp, fp, r2
   1c358:	lsl	r2, r2, #2
   1c35c:	add	r0, r4, fp, lsl #2
   1c360:	bl	11038 <memcpy@plt>
   1c364:	ldr	r3, [sp, #32]
   1c368:	add	r3, sl, r3, lsl #1
   1c36c:	subs	r2, r3, fp
   1c370:	sub	r3, r3, #1
   1c374:	beq	1c3a0 <__assert_fail@plt+0xb0f8>
   1c378:	add	sl, sl, r2
   1c37c:	ldr	ip, [r4, r3, lsl #2]
   1c380:	add	r1, r5, r2
   1c384:	ldr	r0, [r4, r5, lsl #2]
   1c388:	cmp	ip, r0
   1c38c:	ble	1c438 <__assert_fail@plt+0xb190>
   1c390:	subs	r2, r2, #1
   1c394:	sub	r3, r3, #1
   1c398:	str	ip, [r4, r1, lsl #2]
   1c39c:	bne	1c37c <__assert_fail@plt+0xb0d4>
   1c3a0:	ldr	r1, [r7, #24]
   1c3a4:	add	r6, r1, r6
   1c3a8:	ldr	r3, [r6, #4]
   1c3ac:	cmp	r3, #0
   1c3b0:	beq	1c470 <__assert_fail@plt+0xb1c8>
   1c3b4:	ldr	ip, [r7, #20]
   1c3b8:	add	r3, ip, r9
   1c3bc:	add	r8, r8, #1
   1c3c0:	ldr	r2, [r3, #4]
   1c3c4:	cmp	r2, r8
   1c3c8:	bgt	1c27c <__assert_fail@plt+0xafd4>
   1c3cc:	ldr	r0, [sp, #12]
   1c3d0:	add	r2, r1, r9
   1c3d4:	ldr	r3, [sp, #20]
   1c3d8:	eor	r3, r3, #1
   1c3dc:	tst	r0, r3
   1c3e0:	beq	1c3f8 <__assert_fail@plt+0xb150>
   1c3e4:	mov	r3, #0
   1c3e8:	str	r3, [r2, #4]
   1c3ec:	b	1c408 <__assert_fail@plt+0xb160>
   1c3f0:	mov	sl, #1
   1c3f4:	add	r2, r1, r9
   1c3f8:	ldr	r3, [sp, #8]
   1c3fc:	str	r3, [r1, r9]
   1c400:	str	sl, [r2, #4]
   1c404:	str	r4, [r2, #8]
   1c408:	ldr	r2, [sp, #8]
   1c40c:	mov	r0, #0
   1c410:	ldr	r3, [sp, #16]
   1c414:	stm	r3, {r2, sl}
   1c418:	str	r4, [r3, #8]
   1c41c:	add	sp, sp, #44	; 0x2c
   1c420:	ldrd	r4, [sp]
   1c424:	ldrd	r6, [sp, #8]
   1c428:	ldrd	r8, [sp, #16]
   1c42c:	ldrd	sl, [sp, #24]
   1c430:	add	sp, sp, #32
   1c434:	pop	{pc}		; (ldr pc, [sp], #4)
   1c438:	subs	r5, r5, #1
   1c43c:	str	r0, [r4, r1, lsl #2]
   1c440:	bpl	1c37c <__assert_fail@plt+0xb0d4>
   1c444:	lsl	r2, r2, #2
   1c448:	mov	r0, r4
   1c44c:	add	r1, r4, fp, lsl #2
   1c450:	bl	11038 <memcpy@plt>
   1c454:	b	1c3a0 <__assert_fail@plt+0xb0f8>
   1c458:	mov	r1, r7
   1c45c:	add	r0, sp, #28
   1c460:	bl	1c194 <__assert_fail@plt+0xaeec>
   1c464:	cmp	r0, #0
   1c468:	beq	1c2bc <__assert_fail@plt+0xb014>
   1c46c:	b	1c41c <__assert_fail@plt+0xb174>
   1c470:	mov	r3, #1
   1c474:	ldr	r0, [sp, #36]	; 0x24
   1c478:	str	r3, [sp, #12]
   1c47c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c480:	ldr	ip, [r7, #20]
   1c484:	ldr	r1, [r7, #24]
   1c488:	b	1c3b8 <__assert_fail@plt+0xb110>
   1c48c:	add	r2, r1, r2
   1c490:	mov	r0, r4
   1c494:	lsl	r3, r2, #1
   1c498:	lsl	r1, r2, #3
   1c49c:	str	r3, [sp, #8]
   1c4a0:	bl	2ab84 <__assert_fail@plt+0x198dc>
   1c4a4:	subs	r4, r0, #0
   1c4a8:	beq	1c500 <__assert_fail@plt+0xb258>
   1c4ac:	cmp	sl, #0
   1c4b0:	ldreq	r3, [sp, #32]
   1c4b4:	beq	1c508 <__assert_fail@plt+0xb260>
   1c4b8:	ldr	r2, [sp, #32]
   1c4bc:	add	fp, sl, r2, lsl #1
   1c4c0:	b	1c2e4 <__assert_fail@plt+0xb03c>
   1c4c4:	mov	sl, #1
   1c4c8:	b	1c3f8 <__assert_fail@plt+0xb150>
   1c4cc:	ubfx	lr, lr, #8, #10
   1c4d0:	mov	r3, r5
   1c4d4:	mov	r2, r5
   1c4d8:	mov	r1, r5
   1c4dc:	mov	r0, r7
   1c4e0:	str	lr, [sp]
   1c4e4:	bl	1b1e4 <__assert_fail@plt+0x9f3c>
   1c4e8:	cmp	r0, #0
   1c4ec:	bne	1c41c <__assert_fail@plt+0xb174>
   1c4f0:	ldr	r0, [r7]
   1c4f4:	ldr	r1, [r7, #24]
   1c4f8:	add	r0, r0, r6
   1c4fc:	b	1c24c <__assert_fail@plt+0xafa4>
   1c500:	mov	r0, #12
   1c504:	b	1c41c <__assert_fail@plt+0xb174>
   1c508:	mov	r0, r4
   1c50c:	lsl	r2, r3, #2
   1c510:	ldr	r1, [sp, #36]	; 0x24
   1c514:	mov	sl, r3
   1c518:	bl	11038 <memcpy@plt>
   1c51c:	b	1c3a0 <__assert_fail@plt+0xb0f8>
   1c520:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c524:	mov	r3, #0
   1c528:	strd	r6, [sp, #8]
   1c52c:	strd	r8, [sp, #16]
   1c530:	ldr	r8, [r2, #4]
   1c534:	strd	sl, [sp, #24]
   1c538:	str	lr, [sp, #32]
   1c53c:	sub	sp, sp, #4
   1c540:	str	r3, [r0]
   1c544:	cmp	r8, r3
   1c548:	beq	1c7d8 <__assert_fail@plt+0xb530>
   1c54c:	mov	r5, r8
   1c550:	ble	1c56c <__assert_fail@plt+0xb2c4>
   1c554:	ldr	r3, [r2, #8]
   1c558:	add	lr, r3, r8, lsl #2
   1c55c:	ldr	ip, [r3], #4
   1c560:	cmp	r3, lr
   1c564:	add	r5, r5, ip
   1c568:	bne	1c55c <__assert_fail@plt+0xb2b4>
   1c56c:	ldr	ip, [r1, #32]
   1c570:	ldr	r3, [r1, #68]	; 0x44
   1c574:	and	r3, r3, r5
   1c578:	add	r3, r3, r3, lsl #1
   1c57c:	lsl	r3, r3, #2
   1c580:	ldr	r9, [ip, r3]
   1c584:	add	r3, ip, r3
   1c588:	cmp	r9, #0
   1c58c:	ble	1c5d4 <__assert_fail@plt+0xb32c>
   1c590:	ldr	lr, [r3, #8]
   1c594:	mov	ip, #0
   1c598:	sub	lr, lr, #4
   1c59c:	b	1c5ac <__assert_fail@plt+0xb304>
   1c5a0:	add	ip, ip, #1
   1c5a4:	cmp	ip, r9
   1c5a8:	beq	1c5d4 <__assert_fail@plt+0xb32c>
   1c5ac:	ldr	r4, [lr, #4]!
   1c5b0:	ldr	r3, [r4]
   1c5b4:	cmp	r3, r5
   1c5b8:	bne	1c5a0 <__assert_fail@plt+0xb2f8>
   1c5bc:	ldr	r3, [r4, #8]
   1c5c0:	cmp	r8, r3
   1c5c4:	beq	1c700 <__assert_fail@plt+0xb458>
   1c5c8:	add	ip, ip, #1
   1c5cc:	cmp	ip, r9
   1c5d0:	bne	1c5ac <__assert_fail@plt+0xb304>
   1c5d4:	mov	r6, r1
   1c5d8:	mov	r7, r0
   1c5dc:	mov	r1, #1
   1c5e0:	mov	r0, #56	; 0x38
   1c5e4:	mov	r9, r2
   1c5e8:	bl	2aad4 <__assert_fail@plt+0x1982c>
   1c5ec:	subs	r4, r0, #0
   1c5f0:	beq	1c7a0 <__assert_fail@plt+0xb4f8>
   1c5f4:	ldr	r3, [r9, #4]
   1c5f8:	add	r8, r4, #4
   1c5fc:	cmp	r3, #0
   1c600:	str	r3, [r4, #8]
   1c604:	ble	1c728 <__assert_fail@plt+0xb480>
   1c608:	lsl	r0, r3, #2
   1c60c:	str	r3, [r4, #4]
   1c610:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1c614:	cmp	r0, #0
   1c618:	mov	r3, r0
   1c61c:	str	r0, [r4, #12]
   1c620:	beq	1c7e0 <__assert_fail@plt+0xb538>
   1c624:	ldr	sl, [r9, #4]
   1c628:	ldr	r1, [r9, #8]
   1c62c:	lsl	fp, sl, #2
   1c630:	mov	r2, fp
   1c634:	bl	11038 <memcpy@plt>
   1c638:	cmp	sl, #0
   1c63c:	str	r8, [r4, #40]	; 0x28
   1c640:	ble	1c73c <__assert_fail@plt+0xb494>
   1c644:	ldr	r1, [r9, #8]
   1c648:	mov	sl, #65280	; 0xff00
   1c64c:	movt	sl, #3
   1c650:	ldr	r9, [r6]
   1c654:	add	lr, fp, r1
   1c658:	b	1c69c <__assert_fail@plt+0xb3f4>
   1c65c:	ldrb	r2, [r4, #52]	; 0x34
   1c660:	cmp	r0, #2
   1c664:	ldrb	fp, [r3, #6]
   1c668:	ubfx	ip, r2, #5, #1
   1c66c:	ubfx	fp, fp, #4, #1
   1c670:	orr	ip, ip, fp
   1c674:	bfi	r2, ip, #5, #1
   1c678:	strb	r2, [r4, #52]	; 0x34
   1c67c:	beq	1c7b0 <__assert_fail@plt+0xb508>
   1c680:	cmp	r0, #4
   1c684:	bne	1c7c0 <__assert_fail@plt+0xb518>
   1c688:	ldrb	r3, [r4, #52]	; 0x34
   1c68c:	orr	r3, r3, #64	; 0x40
   1c690:	strb	r3, [r4, #52]	; 0x34
   1c694:	cmp	lr, r1
   1c698:	beq	1c73c <__assert_fail@plt+0xb494>
   1c69c:	ldr	r3, [r1], #4
   1c6a0:	add	r3, r9, r3, lsl #3
   1c6a4:	ldrb	r0, [r3, #4]
   1c6a8:	cmp	r0, #1
   1c6ac:	bne	1c65c <__assert_fail@plt+0xb3b4>
   1c6b0:	ldr	r2, [r3, #4]
   1c6b4:	tst	sl, r2
   1c6b8:	beq	1c694 <__assert_fail@plt+0xb3ec>
   1c6bc:	ldrb	r2, [r3, #6]
   1c6c0:	ldrb	r3, [r4, #52]	; 0x34
   1c6c4:	ubfx	r0, r2, #4, #1
   1c6c8:	ubfx	r2, r3, #5, #1
   1c6cc:	orr	r2, r2, r0
   1c6d0:	bfi	r3, r2, #5, #1
   1c6d4:	strb	r3, [r4, #52]	; 0x34
   1c6d8:	ldrb	r3, [r4, #52]	; 0x34
   1c6dc:	orr	r3, r3, #128	; 0x80
   1c6e0:	strb	r3, [r4, #52]	; 0x34
   1c6e4:	b	1c694 <__assert_fail@plt+0xb3ec>
   1c6e8:	ldr	r6, [r2, #8]
   1c6ec:	ldr	r7, [r4, #12]
   1c6f0:	ldr	r6, [r6, r3, lsl #2]
   1c6f4:	ldr	r7, [r7, r3, lsl #2]
   1c6f8:	cmp	r7, r6
   1c6fc:	bne	1c5a0 <__assert_fail@plt+0xb2f8>
   1c700:	subs	r3, r3, #1
   1c704:	bpl	1c6e8 <__assert_fail@plt+0xb440>
   1c708:	mov	r0, r4
   1c70c:	add	sp, sp, #4
   1c710:	ldrd	r4, [sp]
   1c714:	ldrd	r6, [sp, #8]
   1c718:	ldrd	r8, [sp, #16]
   1c71c:	ldrd	sl, [sp, #24]
   1c720:	add	sp, sp, #32
   1c724:	pop	{pc}		; (ldr pc, [sp], #4)
   1c728:	mov	r3, #0
   1c72c:	str	r3, [r4, #4]
   1c730:	str	r3, [r8, #4]
   1c734:	str	r3, [r8, #8]
   1c738:	str	r8, [r4, #40]	; 0x28
   1c73c:	mov	r2, r5
   1c740:	mov	r0, r6
   1c744:	mov	r1, r4
   1c748:	bl	16cb4 <__assert_fail@plt+0x5a0c>
   1c74c:	cmp	r0, #0
   1c750:	beq	1c708 <__assert_fail@plt+0xb460>
   1c754:	ldr	r0, [r4, #24]
   1c758:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c75c:	ldr	r0, [r4, #36]	; 0x24
   1c760:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c764:	ldr	r3, [r4, #40]	; 0x28
   1c768:	cmp	r8, r3
   1c76c:	beq	1c780 <__assert_fail@plt+0xb4d8>
   1c770:	ldr	r0, [r3, #8]
   1c774:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c778:	ldr	r0, [r4, #40]	; 0x28
   1c77c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c780:	ldr	r0, [r4, #12]
   1c784:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c788:	ldr	r0, [r4, #48]	; 0x30
   1c78c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c790:	ldr	r0, [r4, #44]	; 0x2c
   1c794:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c798:	mov	r0, r4
   1c79c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c7a0:	mov	r3, #12
   1c7a4:	mov	r4, #0
   1c7a8:	str	r3, [r7]
   1c7ac:	b	1c708 <__assert_fail@plt+0xb460>
   1c7b0:	uxtb	r3, r2
   1c7b4:	orr	r3, r3, #16
   1c7b8:	strb	r3, [r4, #52]	; 0x34
   1c7bc:	b	1c694 <__assert_fail@plt+0xb3ec>
   1c7c0:	cmp	r0, #12
   1c7c4:	beq	1c6d8 <__assert_fail@plt+0xb430>
   1c7c8:	ldr	r3, [r3, #4]
   1c7cc:	tst	sl, r3
   1c7d0:	beq	1c694 <__assert_fail@plt+0xb3ec>
   1c7d4:	b	1c6d8 <__assert_fail@plt+0xb430>
   1c7d8:	mov	r4, r8
   1c7dc:	b	1c708 <__assert_fail@plt+0xb460>
   1c7e0:	mov	r0, r4
   1c7e4:	str	r3, [r4, #4]
   1c7e8:	str	r3, [r4, #8]
   1c7ec:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1c7f0:	b	1c7a0 <__assert_fail@plt+0xb4f8>
   1c7f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c7f8:	strd	r6, [sp, #8]
   1c7fc:	ldr	r6, [r0, #108]	; 0x6c
   1c800:	strd	r8, [sp, #16]
   1c804:	strd	sl, [sp, #24]
   1c808:	str	lr, [sp, #32]
   1c80c:	sub	sp, sp, #44	; 0x2c
   1c810:	cmp	r6, #0
   1c814:	ble	1c974 <__assert_fail@plt+0xb6cc>
   1c818:	ldr	r4, [r0, #116]	; 0x74
   1c81c:	mov	r5, r6
   1c820:	mov	r9, #0
   1c824:	add	ip, r5, r9
   1c828:	asr	ip, ip, #1
   1c82c:	add	lr, ip, ip, lsl #1
   1c830:	add	lr, r4, lr, lsl #3
   1c834:	ldr	lr, [lr, #4]
   1c838:	cmp	lr, r2
   1c83c:	blt	1cc98 <__assert_fail@plt+0xb9f0>
   1c840:	cmp	ip, r9
   1c844:	ble	1c890 <__assert_fail@plt+0xb5e8>
   1c848:	add	r5, ip, r9
   1c84c:	asr	r5, r5, #1
   1c850:	add	lr, r5, r5, lsl #1
   1c854:	add	lr, r4, lr, lsl #3
   1c858:	ldr	lr, [lr, #4]
   1c85c:	cmp	r2, lr
   1c860:	ble	1c880 <__assert_fail@plt+0xb5d8>
   1c864:	b	1cc8c <__assert_fail@plt+0xb9e4>
   1c868:	add	lr, ip, ip, lsl #1
   1c86c:	add	lr, r4, lr, lsl #3
   1c870:	ldr	lr, [lr, #4]
   1c874:	cmp	r2, lr
   1c878:	bgt	1cc98 <__assert_fail@plt+0xb9f0>
   1c87c:	mov	r5, ip
   1c880:	add	ip, r9, r5
   1c884:	cmp	r9, r5
   1c888:	asr	ip, ip, #1
   1c88c:	blt	1c868 <__assert_fail@plt+0xb5c0>
   1c890:	cmp	r6, r9
   1c894:	ble	1c974 <__assert_fail@plt+0xb6cc>
   1c898:	add	r9, r9, r9, lsl #1
   1c89c:	lsl	ip, r9, #3
   1c8a0:	add	lr, r4, ip
   1c8a4:	ldr	lr, [lr, #4]
   1c8a8:	cmp	r2, lr
   1c8ac:	bne	1c974 <__assert_fail@plt+0xb6cc>
   1c8b0:	ldr	r9, [r0, #84]	; 0x54
   1c8b4:	mov	r6, r2
   1c8b8:	mov	r7, r1
   1c8bc:	mov	r8, r0
   1c8c0:	str	r3, [sp, #12]
   1c8c4:	add	r3, ip, #24
   1c8c8:	str	r3, [sp, #8]
   1c8cc:	ldr	r3, [sp, #8]
   1c8d0:	add	r4, r4, r3
   1c8d4:	ldr	lr, [r7, #4]
   1c8d8:	cmp	lr, #0
   1c8dc:	ble	1c964 <__assert_fail@plt+0xb6bc>
   1c8e0:	sub	lr, lr, #1
   1c8e4:	ldr	ip, [r4, #-24]	; 0xffffffe8
   1c8e8:	cmp	lr, #0
   1c8ec:	mov	r1, lr
   1c8f0:	moveq	r5, lr
   1c8f4:	ldr	r2, [r7, #8]
   1c8f8:	beq	1c958 <__assert_fail@plt+0xb6b0>
   1c8fc:	mov	r0, lr
   1c900:	mov	r5, #0
   1c904:	add	r3, r0, r5
   1c908:	lsr	r3, r3, #1
   1c90c:	ldr	sl, [r2, r3, lsl #2]
   1c910:	cmp	ip, sl
   1c914:	bgt	1c9a0 <__assert_fail@plt+0xb6f8>
   1c918:	cmp	r3, r5
   1c91c:	bls	1c958 <__assert_fail@plt+0xb6b0>
   1c920:	add	r0, r3, r5
   1c924:	lsr	r0, r0, #1
   1c928:	ldr	sl, [r2, r0, lsl #2]
   1c92c:	cmp	ip, sl
   1c930:	ble	1c948 <__assert_fail@plt+0xb6a0>
   1c934:	b	1c994 <__assert_fail@plt+0xb6ec>
   1c938:	ldr	sl, [r2, r3, lsl #2]
   1c93c:	cmp	ip, sl
   1c940:	bgt	1c9a0 <__assert_fail@plt+0xb6f8>
   1c944:	mov	r0, r3
   1c948:	add	r3, r5, r0
   1c94c:	cmp	r5, r0
   1c950:	lsr	r3, r3, #1
   1c954:	bcc	1c938 <__assert_fail@plt+0xb690>
   1c958:	ldr	r3, [r2, r5, lsl #2]
   1c95c:	cmp	ip, r3
   1c960:	beq	1c9b8 <__assert_fail@plt+0xb710>
   1c964:	add	r4, r4, #24
   1c968:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1c96c:	cmp	r3, #0
   1c970:	bne	1c8d4 <__assert_fail@plt+0xb62c>
   1c974:	mov	r0, #0
   1c978:	add	sp, sp, #44	; 0x2c
   1c97c:	ldrd	r4, [sp]
   1c980:	ldrd	r6, [sp, #8]
   1c984:	ldrd	r8, [sp, #16]
   1c988:	ldrd	sl, [sp, #24]
   1c98c:	add	sp, sp, #32
   1c990:	pop	{pc}		; (ldr pc, [sp], #4)
   1c994:	mov	r5, r0
   1c998:	mov	r0, r3
   1c99c:	mov	r3, r5
   1c9a0:	add	r5, r3, #1
   1c9a4:	cmp	r5, r0
   1c9a8:	bcc	1c904 <__assert_fail@plt+0xb65c>
   1c9ac:	ldr	r3, [r2, r5, lsl #2]
   1c9b0:	cmp	ip, r3
   1c9b4:	bne	1c964 <__assert_fail@plt+0xb6bc>
   1c9b8:	ldr	r3, [r4, #-16]
   1c9bc:	ldr	r5, [r4, #-12]
   1c9c0:	add	r5, r6, r5
   1c9c4:	sub	r5, r5, r3
   1c9c8:	cmp	r6, r5
   1c9cc:	beq	1cb30 <__assert_fail@plt+0xb888>
   1c9d0:	ldr	r2, [r8, #100]	; 0x64
   1c9d4:	ldr	r3, [r9, #12]
   1c9d8:	ldr	fp, [r2, r5, lsl #2]
   1c9dc:	ldr	sl, [r3, ip, lsl #2]
   1c9e0:	cmp	fp, #0
   1c9e4:	beq	1cc44 <__assert_fail@plt+0xb99c>
   1c9e8:	ldr	ip, [fp, #8]
   1c9ec:	cmp	ip, #0
   1c9f0:	ble	1cc74 <__assert_fail@plt+0xb9cc>
   1c9f4:	subs	r2, ip, #1
   1c9f8:	ldr	r0, [fp, #12]
   1c9fc:	moveq	r1, r2
   1ca00:	beq	1ca5c <__assert_fail@plt+0xb7b4>
   1ca04:	mov	r1, #0
   1ca08:	add	r3, r2, r1
   1ca0c:	lsr	r3, r3, #1
   1ca10:	ldr	lr, [r0, r3, lsl #2]
   1ca14:	cmp	lr, sl
   1ca18:	blt	1cb20 <__assert_fail@plt+0xb878>
   1ca1c:	cmp	r3, r1
   1ca20:	bls	1ca5c <__assert_fail@plt+0xb7b4>
   1ca24:	add	r2, r3, r1
   1ca28:	lsr	r2, r2, #1
   1ca2c:	ldr	lr, [r0, r2, lsl #2]
   1ca30:	cmp	sl, lr
   1ca34:	ble	1ca4c <__assert_fail@plt+0xb7a4>
   1ca38:	b	1cb14 <__assert_fail@plt+0xb86c>
   1ca3c:	ldr	lr, [r0, r3, lsl #2]
   1ca40:	cmp	sl, lr
   1ca44:	bgt	1cb20 <__assert_fail@plt+0xb878>
   1ca48:	mov	r2, r3
   1ca4c:	add	r3, r1, r2
   1ca50:	cmp	r1, r2
   1ca54:	lsr	r3, r3, #1
   1ca58:	bcc	1ca3c <__assert_fail@plt+0xb794>
   1ca5c:	ldr	r3, [r0, r1, lsl #2]
   1ca60:	cmp	sl, r3
   1ca64:	beq	1c964 <__assert_fail@plt+0xb6bc>
   1ca68:	lsl	r0, ip, #2
   1ca6c:	str	ip, [sp, #24]
   1ca70:	str	ip, [sp, #28]
   1ca74:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1ca78:	cmp	r0, #0
   1ca7c:	str	r0, [sp, #32]
   1ca80:	beq	1cd08 <__assert_fail@plt+0xba60>
   1ca84:	ldr	r2, [fp, #8]
   1ca88:	add	r3, sp, #24
   1ca8c:	ldr	r1, [fp, #12]
   1ca90:	str	r3, [sp, #4]
   1ca94:	lsl	r2, r2, #2
   1ca98:	bl	11038 <memcpy@plt>
   1ca9c:	ldr	r3, [sp, #4]
   1caa0:	mov	r2, #0
   1caa4:	mov	r0, r3
   1caa8:	mov	r1, sl
   1caac:	str	r3, [sp, #4]
   1cab0:	str	r2, [sp, #20]
   1cab4:	bl	17910 <__assert_fail@plt+0x6668>
   1cab8:	eor	r0, r0, #1
   1cabc:	ldr	r3, [sp, #4]
   1cac0:	ldr	r2, [sp, #20]
   1cac4:	cmp	r2, #0
   1cac8:	orrne	r0, r0, #1
   1cacc:	tst	r0, #255	; 0xff
   1cad0:	bne	1cca8 <__assert_fail@plt+0xba00>
   1cad4:	ldr	sl, [r8, #100]	; 0x64
   1cad8:	mov	r2, r3
   1cadc:	mov	r1, r9
   1cae0:	add	r0, sp, #20
   1cae4:	bl	1c520 <__assert_fail@plt+0xb278>
   1cae8:	str	r0, [sl, r5, lsl #2]
   1caec:	ldr	r0, [sp, #32]
   1caf0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1caf4:	ldr	r3, [r8, #100]	; 0x64
   1caf8:	ldr	r3, [r3, r5, lsl #2]
   1cafc:	cmp	r3, #0
   1cb00:	bne	1c964 <__assert_fail@plt+0xb6bc>
   1cb04:	ldr	r0, [sp, #20]
   1cb08:	cmp	r0, #0
   1cb0c:	beq	1c964 <__assert_fail@plt+0xb6bc>
   1cb10:	b	1c978 <__assert_fail@plt+0xb6d0>
   1cb14:	mov	r1, r3
   1cb18:	mov	r3, r2
   1cb1c:	mov	r2, r1
   1cb20:	add	r1, r3, #1
   1cb24:	cmp	r2, r1
   1cb28:	bhi	1ca08 <__assert_fail@plt+0xb760>
   1cb2c:	b	1ca5c <__assert_fail@plt+0xb7b4>
   1cb30:	ldr	r3, [r9, #20]
   1cb34:	add	ip, ip, ip, lsl #1
   1cb38:	cmp	lr, #0
   1cb3c:	movne	lr, #0
   1cb40:	add	ip, r3, ip, lsl #2
   1cb44:	ldr	r3, [ip, #8]
   1cb48:	ldr	r5, [r3]
   1cb4c:	beq	1cba4 <__assert_fail@plt+0xb8fc>
   1cb50:	add	r3, r1, lr
   1cb54:	lsr	r3, r3, #1
   1cb58:	ldr	r0, [r2, r3, lsl #2]
   1cb5c:	cmp	r0, r5
   1cb60:	blt	1cc34 <__assert_fail@plt+0xb98c>
   1cb64:	cmp	r3, lr
   1cb68:	bls	1cba4 <__assert_fail@plt+0xb8fc>
   1cb6c:	add	r1, r3, lr
   1cb70:	lsr	r1, r1, #1
   1cb74:	ldr	r0, [r2, r1, lsl #2]
   1cb78:	cmp	r5, r0
   1cb7c:	ble	1cb94 <__assert_fail@plt+0xb8ec>
   1cb80:	b	1cc28 <__assert_fail@plt+0xb980>
   1cb84:	ldr	r0, [r2, r3, lsl #2]
   1cb88:	cmp	r5, r0
   1cb8c:	bgt	1cc34 <__assert_fail@plt+0xb98c>
   1cb90:	mov	r1, r3
   1cb94:	add	r3, lr, r1
   1cb98:	cmp	lr, r1
   1cb9c:	lsr	r3, r3, #1
   1cba0:	bcc	1cb84 <__assert_fail@plt+0xb8dc>
   1cba4:	ldr	r3, [r2, lr, lsl #2]
   1cba8:	cmp	r5, r3
   1cbac:	beq	1c964 <__assert_fail@plt+0xb6bc>
   1cbb0:	mov	r2, #1
   1cbb4:	mov	r3, #1
   1cbb8:	mov	r0, #4
   1cbbc:	strd	r2, [sp, #24]
   1cbc0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1cbc4:	cmp	r0, #0
   1cbc8:	str	r0, [sp, #32]
   1cbcc:	beq	1ccc4 <__assert_fail@plt+0xba1c>
   1cbd0:	mov	r2, #0
   1cbd4:	ldr	r3, [sp, #80]	; 0x50
   1cbd8:	add	r4, sp, #24
   1cbdc:	mov	r1, r4
   1cbe0:	str	r5, [r0]
   1cbe4:	mov	r0, r9
   1cbe8:	str	r2, [sp, #20]
   1cbec:	ldr	r2, [sp, #12]
   1cbf0:	bl	1bb10 <__assert_fail@plt+0xa868>
   1cbf4:	mov	r5, r0
   1cbf8:	mov	r1, r4
   1cbfc:	mov	r0, r7
   1cc00:	bl	17d0c <__assert_fail@plt+0x6a64>
   1cc04:	mov	r4, r0
   1cc08:	ldr	r0, [sp, #32]
   1cc0c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1cc10:	ldr	r0, [sp, #20]
   1cc14:	orr	r3, r5, r4
   1cc18:	orrs	r3, r3, r0
   1cc1c:	bne	1ccf0 <__assert_fail@plt+0xba48>
   1cc20:	ldr	r4, [r8, #116]	; 0x74
   1cc24:	b	1c8cc <__assert_fail@plt+0xb624>
   1cc28:	mov	r0, r3
   1cc2c:	mov	r3, r1
   1cc30:	mov	r1, r0
   1cc34:	add	lr, r3, #1
   1cc38:	cmp	lr, r1
   1cc3c:	bcc	1cb50 <__assert_fail@plt+0xb8a8>
   1cc40:	b	1cba4 <__assert_fail@plt+0xb8fc>
   1cc44:	mov	r2, #1
   1cc48:	mov	r3, #1
   1cc4c:	mov	r0, #4
   1cc50:	strd	r2, [sp, #24]
   1cc54:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1cc58:	cmp	r0, #0
   1cc5c:	str	r0, [sp, #32]
   1cc60:	beq	1ccbc <__assert_fail@plt+0xba14>
   1cc64:	add	r3, sp, #24
   1cc68:	str	sl, [r0]
   1cc6c:	str	fp, [sp, #20]
   1cc70:	b	1cad4 <__assert_fail@plt+0xb82c>
   1cc74:	mov	r2, #0
   1cc78:	add	r3, sp, #24
   1cc7c:	str	r2, [sp, #24]
   1cc80:	str	r2, [r3, #4]
   1cc84:	str	r2, [r3, #8]
   1cc88:	b	1caa4 <__assert_fail@plt+0xb7fc>
   1cc8c:	mov	lr, r5
   1cc90:	mov	r5, ip
   1cc94:	mov	ip, lr
   1cc98:	add	r9, ip, #1
   1cc9c:	cmp	r9, r5
   1cca0:	blt	1c824 <__assert_fail@plt+0xb57c>
   1cca4:	b	1c890 <__assert_fail@plt+0xb5e8>
   1cca8:	ldr	r0, [sp, #32]
   1ccac:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1ccb0:	ldr	r0, [sp, #20]
   1ccb4:	cmp	r0, #0
   1ccb8:	bne	1c978 <__assert_fail@plt+0xb6d0>
   1ccbc:	mov	r0, #12
   1ccc0:	b	1c978 <__assert_fail@plt+0xb6d0>
   1ccc4:	mov	r2, #0
   1ccc8:	mov	r3, #0
   1cccc:	mov	ip, #12
   1ccd0:	add	r4, sp, #24
   1ccd4:	mov	r1, r4
   1ccd8:	mov	r0, r9
   1ccdc:	str	ip, [sp, #20]
   1cce0:	strd	r2, [sp, #24]
   1cce4:	ldr	r2, [sp, #12]
   1cce8:	ldr	r3, [sp, #80]	; 0x50
   1ccec:	b	1cbf0 <__assert_fail@plt+0xb948>
   1ccf0:	cmp	r0, #0
   1ccf4:	bne	1c978 <__assert_fail@plt+0xb6d0>
   1ccf8:	cmp	r5, #0
   1ccfc:	movne	r0, r5
   1cd00:	moveq	r0, r4
   1cd04:	b	1c978 <__assert_fail@plt+0xb6d0>
   1cd08:	mov	r0, #0
   1cd0c:	mov	r1, #0
   1cd10:	mov	r2, #12
   1cd14:	add	r3, sp, #24
   1cd18:	strd	r0, [sp, #24]
   1cd1c:	b	1caa4 <__assert_fail@plt+0xb7fc>
   1cd20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cd24:	mov	ip, #0
   1cd28:	strd	r6, [sp, #8]
   1cd2c:	ldr	r6, [r2, #4]
   1cd30:	strd	r8, [sp, #16]
   1cd34:	strd	sl, [sp, #24]
   1cd38:	str	lr, [sp, #32]
   1cd3c:	sub	sp, sp, #20
   1cd40:	str	ip, [r0]
   1cd44:	cmp	r6, ip
   1cd48:	moveq	r4, r6
   1cd4c:	beq	1cfc4 <__assert_fail@plt+0xbd1c>
   1cd50:	add	r7, r3, r6
   1cd54:	ble	1cd70 <__assert_fail@plt+0xbac8>
   1cd58:	ldr	ip, [r2, #8]
   1cd5c:	add	r4, ip, r6, lsl #2
   1cd60:	ldr	lr, [ip], #4
   1cd64:	cmp	r4, ip
   1cd68:	add	r7, r7, lr
   1cd6c:	bne	1cd60 <__assert_fail@plt+0xbab8>
   1cd70:	ldr	lr, [r1, #32]
   1cd74:	ldr	ip, [r1, #68]	; 0x44
   1cd78:	and	ip, ip, r7
   1cd7c:	add	ip, ip, ip, lsl #1
   1cd80:	lsl	ip, ip, #2
   1cd84:	ldr	r8, [lr, ip]
   1cd88:	add	ip, lr, ip
   1cd8c:	cmp	r8, #0
   1cd90:	ble	1cdf4 <__assert_fail@plt+0xbb4c>
   1cd94:	ldr	lr, [ip, #8]
   1cd98:	mov	ip, #0
   1cd9c:	sub	lr, lr, #4
   1cda0:	b	1cdb0 <__assert_fail@plt+0xbb08>
   1cda4:	add	ip, ip, #1
   1cda8:	cmp	ip, r8
   1cdac:	beq	1cdf4 <__assert_fail@plt+0xbb4c>
   1cdb0:	ldr	r4, [lr, #4]!
   1cdb4:	ldr	r5, [r4]
   1cdb8:	cmp	r5, r7
   1cdbc:	bne	1cda4 <__assert_fail@plt+0xbafc>
   1cdc0:	ldrb	r5, [r4, #52]	; 0x34
   1cdc4:	and	r5, r5, #15
   1cdc8:	cmp	r5, r3
   1cdcc:	bne	1cda4 <__assert_fail@plt+0xbafc>
   1cdd0:	ldr	fp, [r4, #40]	; 0x28
   1cdd4:	cmp	fp, #0
   1cdd8:	beq	1cda4 <__assert_fail@plt+0xbafc>
   1cddc:	ldr	r5, [fp, #4]
   1cde0:	cmp	r6, r5
   1cde4:	beq	1cffc <__assert_fail@plt+0xbd54>
   1cde8:	add	ip, ip, #1
   1cdec:	cmp	ip, r8
   1cdf0:	bne	1cdb0 <__assert_fail@plt+0xbb08>
   1cdf4:	mov	r9, r1
   1cdf8:	mov	r1, #1
   1cdfc:	str	r0, [sp, #8]
   1ce00:	mov	r0, #56	; 0x38
   1ce04:	mov	sl, r3
   1ce08:	mov	r6, r2
   1ce0c:	bl	2aad4 <__assert_fail@plt+0x1982c>
   1ce10:	subs	r4, r0, #0
   1ce14:	beq	1d114 <__assert_fail@plt+0xbe6c>
   1ce18:	ldr	r3, [r6, #4]
   1ce1c:	add	fp, r4, #4
   1ce20:	cmp	r3, #0
   1ce24:	str	r3, [r4, #8]
   1ce28:	ble	1d008 <__assert_fail@plt+0xbd60>
   1ce2c:	lsl	r0, r3, #2
   1ce30:	str	r3, [r4, #4]
   1ce34:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1ce38:	cmp	r0, #0
   1ce3c:	mov	r3, r0
   1ce40:	str	r0, [r4, #12]
   1ce44:	beq	1d128 <__assert_fail@plt+0xbe80>
   1ce48:	ldr	r8, [r6, #4]
   1ce4c:	ldr	r1, [r6, #8]
   1ce50:	lsl	r2, r8, #2
   1ce54:	bl	11038 <memcpy@plt>
   1ce58:	ldrb	r3, [r4, #52]	; 0x34
   1ce5c:	cmp	r8, #0
   1ce60:	str	fp, [r4, #40]	; 0x28
   1ce64:	bfi	r3, sl, #0, #4
   1ce68:	strb	r3, [r4, #52]	; 0x34
   1ce6c:	ble	1cfac <__assert_fail@plt+0xbd04>
   1ce70:	and	r2, sl, #2
   1ce74:	mov	r1, #0
   1ce78:	and	r3, sl, #1
   1ce7c:	mov	lr, r8
   1ce80:	mov	r5, r1
   1ce84:	mov	r8, r3
   1ce88:	str	r2, [sp]
   1ce8c:	and	r2, sl, #4
   1ce90:	str	r2, [sp, #4]
   1ce94:	ldr	r3, [r6, #8]
   1ce98:	ldr	r2, [r9]
   1ce9c:	ldr	r3, [r3, r5, lsl #2]
   1cea0:	add	r2, r2, r3, lsl #3
   1cea4:	ldr	sl, [r2, #4]
   1cea8:	ldrb	r3, [r2, #4]
   1ceac:	ubfx	sl, sl, #8, #10
   1ceb0:	cmp	r3, #1
   1ceb4:	cmpeq	sl, #0
   1ceb8:	beq	1cfa0 <__assert_fail@plt+0xbcf8>
   1cebc:	ldrb	ip, [r2, #6]
   1cec0:	cmp	r3, #2
   1cec4:	ldrb	r2, [r4, #52]	; 0x34
   1cec8:	ubfx	ip, ip, #4, #1
   1cecc:	ubfx	r0, r2, #5, #1
   1ced0:	orr	r0, r0, ip
   1ced4:	bfi	r2, r0, #5, #1
   1ced8:	uxtbeq	r3, r2
   1cedc:	orreq	r3, r3, #16
   1cee0:	strb	r2, [r4, #52]	; 0x34
   1cee4:	strbeq	r3, [r4, #52]	; 0x34
   1cee8:	beq	1cf00 <__assert_fail@plt+0xbc58>
   1ceec:	cmp	r3, #4
   1cef0:	bne	1cf00 <__assert_fail@plt+0xbc58>
   1cef4:	ldrb	r3, [r4, #52]	; 0x34
   1cef8:	orr	r3, r3, #64	; 0x40
   1cefc:	strb	r3, [r4, #52]	; 0x34
   1cf00:	cmp	sl, #0
   1cf04:	beq	1cfa0 <__assert_fail@plt+0xbcf8>
   1cf08:	ldr	r3, [r4, #40]	; 0x28
   1cf0c:	cmp	fp, r3
   1cf10:	beq	1d040 <__assert_fail@plt+0xbd98>
   1cf14:	tst	sl, #1
   1cf18:	beq	1d02c <__assert_fail@plt+0xbd84>
   1cf1c:	cmp	r8, #0
   1cf20:	beq	1cf54 <__assert_fail@plt+0xbcac>
   1cf24:	tst	sl, #2
   1cf28:	bne	1cf54 <__assert_fail@plt+0xbcac>
   1cf2c:	tst	sl, #16
   1cf30:	beq	1cf40 <__assert_fail@plt+0xbc98>
   1cf34:	ldr	r3, [sp]
   1cf38:	cmp	r3, #0
   1cf3c:	beq	1cf54 <__assert_fail@plt+0xbcac>
   1cf40:	tst	sl, #64	; 0x40
   1cf44:	beq	1cf9c <__assert_fail@plt+0xbcf4>
   1cf48:	ldr	r3, [sp, #4]
   1cf4c:	cmp	r3, #0
   1cf50:	bne	1cf9c <__assert_fail@plt+0xbcf4>
   1cf54:	subs	r3, r5, r1
   1cf58:	bmi	1cf98 <__assert_fail@plt+0xbcf0>
   1cf5c:	ldr	r2, [r4, #8]
   1cf60:	cmp	r3, r2
   1cf64:	bge	1cf98 <__assert_fail@plt+0xbcf0>
   1cf68:	sub	r2, r2, #1
   1cf6c:	cmp	r3, r2
   1cf70:	str	r2, [r4, #8]
   1cf74:	bge	1cf98 <__assert_fail@plt+0xbcf0>
   1cf78:	ldr	r2, [r4, #12]
   1cf7c:	add	r2, r2, r3, lsl #2
   1cf80:	ldr	r0, [r2, #4]
   1cf84:	add	r3, r3, #1
   1cf88:	str	r0, [r2], #4
   1cf8c:	ldr	r0, [r4, #8]
   1cf90:	cmp	r3, r0
   1cf94:	blt	1cf80 <__assert_fail@plt+0xbcd8>
   1cf98:	add	r1, r1, #1
   1cf9c:	ldr	lr, [r6, #4]
   1cfa0:	add	r5, r5, #1
   1cfa4:	cmp	r5, lr
   1cfa8:	blt	1ce94 <__assert_fail@plt+0xbbec>
   1cfac:	mov	r2, r7
   1cfb0:	mov	r0, r9
   1cfb4:	mov	r1, r4
   1cfb8:	bl	16cb4 <__assert_fail@plt+0x5a0c>
   1cfbc:	cmp	r0, #0
   1cfc0:	bne	1d0c8 <__assert_fail@plt+0xbe20>
   1cfc4:	mov	r0, r4
   1cfc8:	add	sp, sp, #20
   1cfcc:	ldrd	r4, [sp]
   1cfd0:	ldrd	r6, [sp, #8]
   1cfd4:	ldrd	r8, [sp, #16]
   1cfd8:	ldrd	sl, [sp, #24]
   1cfdc:	add	sp, sp, #32
   1cfe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfe4:	ldr	r9, [r2, #8]
   1cfe8:	ldr	sl, [fp, #8]
   1cfec:	ldr	r9, [r9, r5, lsl #2]
   1cff0:	ldr	sl, [sl, r5, lsl #2]
   1cff4:	cmp	sl, r9
   1cff8:	bne	1cda4 <__assert_fail@plt+0xbafc>
   1cffc:	subs	r5, r5, #1
   1d000:	bpl	1cfe4 <__assert_fail@plt+0xbd3c>
   1d004:	b	1cfc4 <__assert_fail@plt+0xbd1c>
   1d008:	mov	r3, #0
   1d00c:	str	r3, [r4, #4]
   1d010:	str	r3, [fp, #4]
   1d014:	str	r3, [fp, #8]
   1d018:	ldrb	r3, [r4, #52]	; 0x34
   1d01c:	str	fp, [r4, #40]	; 0x28
   1d020:	bfi	r3, sl, #0, #4
   1d024:	strb	r3, [r4, #52]	; 0x34
   1d028:	b	1cfac <__assert_fail@plt+0xbd04>
   1d02c:	tst	sl, #2
   1d030:	beq	1cf2c <__assert_fail@plt+0xbc84>
   1d034:	cmp	r8, #0
   1d038:	beq	1cf2c <__assert_fail@plt+0xbc84>
   1d03c:	b	1cf54 <__assert_fail@plt+0xbcac>
   1d040:	mov	r0, #12
   1d044:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1d048:	subs	r3, r0, #0
   1d04c:	beq	1d0c8 <__assert_fail@plt+0xbe20>
   1d050:	ldr	r2, [r6, #4]
   1d054:	str	r3, [r4, #40]	; 0x28
   1d058:	cmp	r2, #0
   1d05c:	str	r2, [r3, #4]
   1d060:	ble	1d0a8 <__assert_fail@plt+0xbe00>
   1d064:	lsl	r0, r2, #2
   1d068:	str	r2, [r3]
   1d06c:	str	r3, [sp, #12]
   1d070:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1d074:	ldr	r3, [sp, #12]
   1d078:	cmp	r0, #0
   1d07c:	str	r0, [r3, #8]
   1d080:	beq	1d0bc <__assert_fail@plt+0xbe14>
   1d084:	ldr	r2, [r6, #4]
   1d088:	ldr	r1, [r6, #8]
   1d08c:	lsl	r2, r2, #2
   1d090:	bl	11038 <memcpy@plt>
   1d094:	ldrb	r3, [r4, #52]	; 0x34
   1d098:	mov	r1, #0
   1d09c:	orr	r3, r3, #128	; 0x80
   1d0a0:	strb	r3, [r4, #52]	; 0x34
   1d0a4:	b	1cf14 <__assert_fail@plt+0xbc6c>
   1d0a8:	mov	r2, #0
   1d0ac:	str	r2, [r3]
   1d0b0:	str	r2, [r3, #4]
   1d0b4:	str	r2, [r3, #8]
   1d0b8:	b	1d094 <__assert_fail@plt+0xbdec>
   1d0bc:	mov	r8, r3
   1d0c0:	str	r0, [r8]
   1d0c4:	str	r0, [r8, #4]
   1d0c8:	ldr	r0, [r4, #24]
   1d0cc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d0d0:	ldr	r0, [r4, #36]	; 0x24
   1d0d4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d0d8:	ldr	r3, [r4, #40]	; 0x28
   1d0dc:	cmp	fp, r3
   1d0e0:	beq	1d0f4 <__assert_fail@plt+0xbe4c>
   1d0e4:	ldr	r0, [r3, #8]
   1d0e8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d0ec:	ldr	r0, [r4, #40]	; 0x28
   1d0f0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d0f4:	ldr	r0, [r4, #12]
   1d0f8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d0fc:	ldr	r0, [r4, #48]	; 0x30
   1d100:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d104:	ldr	r0, [r4, #44]	; 0x2c
   1d108:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d10c:	mov	r0, r4
   1d110:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d114:	ldr	r2, [sp, #8]
   1d118:	mov	r3, #12
   1d11c:	mov	r4, #0
   1d120:	str	r3, [r2]
   1d124:	b	1cfc4 <__assert_fail@plt+0xbd1c>
   1d128:	mov	r0, r4
   1d12c:	str	r3, [r4, #4]
   1d130:	str	r3, [r4, #8]
   1d134:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d138:	b	1d114 <__assert_fail@plt+0xbe6c>
   1d13c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d140:	mov	ip, r1
   1d144:	strd	r6, [sp, #8]
   1d148:	strd	r8, [sp, #16]
   1d14c:	ldr	r8, [r1, #8]
   1d150:	strd	sl, [sp, #24]
   1d154:	str	lr, [sp, #32]
   1d158:	sub	sp, sp, #14528	; 0x38c0
   1d15c:	sub	sp, sp, #60	; 0x3c
   1d160:	add	r9, sp, #2288	; 0x8f0
   1d164:	add	r9, r9, #8
   1d168:	str	r1, [sp, #100]	; 0x64
   1d16c:	mov	r1, #0
   1d170:	cmp	r8, r1
   1d174:	str	r1, [r9]
   1d178:	str	r1, [r9, #4]
   1d17c:	str	r1, [r9, #8]
   1d180:	str	r1, [r9, #12]
   1d184:	str	r1, [r9, #16]
   1d188:	str	r1, [r9, #20]
   1d18c:	str	r1, [r9, #24]
   1d190:	str	r1, [r9, #28]
   1d194:	str	r1, [ip, #44]	; 0x2c
   1d198:	str	r1, [ip, #48]	; 0x30
   1d19c:	ble	1e114 <__assert_fail@plt+0xce6c>
   1d1a0:	mov	r3, r1
   1d1a4:	mov	r2, r1
   1d1a8:	str	r1, [sp, #48]	; 0x30
   1d1ac:	mov	fp, r0
   1d1b0:	mov	r6, r8
   1d1b4:	str	r1, [sp, #104]	; 0x68
   1d1b8:	str	r0, [sp, #116]	; 0x74
   1d1bc:	strd	r2, [sp, #128]	; 0x80
   1d1c0:	sub	r3, r9, #2080	; 0x820
   1d1c4:	str	r3, [sp, #124]	; 0x7c
   1d1c8:	ldr	r3, [sp, #100]	; 0x64
   1d1cc:	ldr	r1, [sp, #104]	; 0x68
   1d1d0:	ldr	r3, [r3, #12]
   1d1d4:	lsl	r2, r1, #2
   1d1d8:	str	r2, [sp, #112]	; 0x70
   1d1dc:	ldr	r2, [sp, #116]	; 0x74
   1d1e0:	ldr	r1, [r3, r1, lsl #2]
   1d1e4:	ldr	r2, [r2]
   1d1e8:	add	r3, r2, r1, lsl #3
   1d1ec:	ldrb	r0, [r3, #4]
   1d1f0:	str	r3, [sp, #96]	; 0x60
   1d1f4:	cmp	r0, #1
   1d1f8:	ldr	r3, [r3, #4]
   1d1fc:	str	r0, [sp, #52]	; 0x34
   1d200:	ubfx	r3, r3, #8, #10
   1d204:	beq	1d510 <__assert_fail@plt+0xc268>
   1d208:	cmp	r0, #3
   1d20c:	beq	1dec0 <__assert_fail@plt+0xcc18>
   1d210:	cmp	r0, #5
   1d214:	beq	1dbe8 <__assert_fail@plt+0xc940>
   1d218:	cmp	r0, #7
   1d21c:	beq	1ddfc <__assert_fail@plt+0xcb54>
   1d220:	ldr	r3, [sp, #104]	; 0x68
   1d224:	add	r3, r3, #1
   1d228:	cmp	r3, r6
   1d22c:	str	r3, [sp, #104]	; 0x68
   1d230:	blt	1d1c8 <__assert_fail@plt+0xbf20>
   1d234:	ldr	r3, [sp, #48]	; 0x30
   1d238:	ldr	fp, [sp, #116]	; 0x74
   1d23c:	cmp	r3, #0
   1d240:	ble	1e110 <__assert_fail@plt+0xce68>
   1d244:	add	r3, r3, #1
   1d248:	mov	r5, #0
   1d24c:	lsl	r0, r3, #2
   1d250:	str	r3, [r9, #-2156]	; 0xfffff794
   1d254:	str	r5, [r9, #-2152]	; 0xfffff798
   1d258:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1d25c:	cmp	r0, r5
   1d260:	str	r0, [r9, #-2148]	; 0xfffff79c
   1d264:	beq	1e0c0 <__assert_fail@plt+0xce18>
   1d268:	mov	r3, #0
   1d26c:	mov	r2, #0
   1d270:	str	r5, [r9, #-2160]	; 0xfffff790
   1d274:	add	r1, sp, #3312	; 0xcf0
   1d278:	mov	sl, r5
   1d27c:	str	r5, [sp]
   1d280:	add	r1, r1, #8
   1d284:	mov	r8, r5
   1d288:	str	r5, [sp, #8]
   1d28c:	strd	r2, [sp, #152]	; 0x98
   1d290:	mov	r4, r1
   1d294:	strd	r2, [sp, #160]	; 0xa0
   1d298:	strd	r2, [sp, #168]	; 0xa8
   1d29c:	strd	r2, [sp, #176]	; 0xb0
   1d2a0:	add	r3, sp, #136	; 0x88
   1d2a4:	str	r5, [sp, #12]
   1d2a8:	str	r5, [sp, #16]
   1d2ac:	str	r3, [sp, #40]	; 0x28
   1d2b0:	add	r3, sp, #6336	; 0x18c0
   1d2b4:	add	r3, r3, #56	; 0x38
   1d2b8:	str	r5, [sp, #24]
   1d2bc:	mov	r6, r3
   1d2c0:	str	r5, [sp, #32]
   1d2c4:	str	r5, [sp, #52]	; 0x34
   1d2c8:	str	r3, [sp, #56]	; 0x38
   1d2cc:	str	r1, [sp, #60]	; 0x3c
   1d2d0:	str	r1, [sp, #108]	; 0x6c
   1d2d4:	ldr	ip, [r4, #4]
   1d2d8:	mov	r3, #0
   1d2dc:	str	r3, [r9, #-2152]	; 0xfffff798
   1d2e0:	cmp	ip, r3
   1d2e4:	movgt	r7, #0
   1d2e8:	ble	1d334 <__assert_fail@plt+0xc08c>
   1d2ec:	ldr	r2, [r4, #8]
   1d2f0:	add	r0, sp, #140	; 0x8c
   1d2f4:	ldr	r3, [fp, #12]
   1d2f8:	ldr	r2, [r2, r7, lsl #2]
   1d2fc:	add	r7, r7, #1
   1d300:	ldr	r3, [r3, r2, lsl #2]
   1d304:	cmn	r3, #1
   1d308:	add	r2, r3, r3, lsl #1
   1d30c:	beq	1d32c <__assert_fail@plt+0xc084>
   1d310:	ldr	r1, [fp, #24]
   1d314:	add	r1, r1, r2, lsl #2
   1d318:	bl	17d0c <__assert_fail@plt+0x6a64>
   1d31c:	cmp	r0, #0
   1d320:	str	r0, [r9, #-2160]	; 0xfffff790
   1d324:	bne	1dfdc <__assert_fail@plt+0xcd34>
   1d328:	ldr	ip, [r4, #4]
   1d32c:	cmp	r7, ip
   1d330:	blt	1d2ec <__assert_fail@plt+0xc044>
   1d334:	mov	r3, #0
   1d338:	add	r2, sp, #140	; 0x8c
   1d33c:	ldr	r0, [sp, #40]	; 0x28
   1d340:	mov	r1, fp
   1d344:	bl	1cd20 <__assert_fail@plt+0xba78>
   1d348:	add	r3, sp, #248	; 0xf8
   1d34c:	cmp	r0, #0
   1d350:	mov	r7, r0
   1d354:	str	r0, [r3, r8, lsl #2]
   1d358:	beq	1e0b0 <__assert_fail@plt+0xce08>
   1d35c:	ldrsb	r3, [r7, #52]	; 0x34
   1d360:	cmp	r3, #0
   1d364:	blt	1e00c <__assert_fail@plt+0xcd64>
   1d368:	add	r3, sp, #1264	; 0x4f0
   1d36c:	str	r7, [r9, r8, lsl #2]
   1d370:	add	r3, r3, #8
   1d374:	str	r7, [r3, r8, lsl #2]
   1d378:	add	r8, r8, #1
   1d37c:	ldr	r0, [sp]
   1d380:	add	r4, r4, #12
   1d384:	add	r6, r6, #32
   1d388:	ldr	r3, [sp, #48]	; 0x30
   1d38c:	ldr	r2, [r6, #-32]	; 0xffffffe0
   1d390:	ldr	r1, [r6, #-24]	; 0xffffffe8
   1d394:	cmp	r8, r3
   1d398:	ldr	r3, [r6, #-28]	; 0xffffffe4
   1d39c:	orr	sl, sl, r2
   1d3a0:	ldr	r2, [r6, #-20]	; 0xffffffec
   1d3a4:	str	sl, [r9, #-2144]	; 0xfffff7a0
   1d3a8:	ldr	ip, [sp, #8]
   1d3ac:	orr	r0, r0, r3
   1d3b0:	ldr	r3, [r6, #-16]
   1d3b4:	str	r0, [r9, #-2140]	; 0xfffff7a4
   1d3b8:	str	r0, [sp]
   1d3bc:	ldr	r0, [sp, #12]
   1d3c0:	orr	ip, ip, r1
   1d3c4:	str	ip, [r9, #-2136]	; 0xfffff7a8
   1d3c8:	str	ip, [sp, #8]
   1d3cc:	ldr	r1, [r6, #-12]
   1d3d0:	orr	r0, r0, r2
   1d3d4:	ldr	ip, [sp, #16]
   1d3d8:	str	r0, [r9, #-2132]	; 0xfffff7ac
   1d3dc:	str	r0, [sp, #12]
   1d3e0:	ldr	r0, [sp, #24]
   1d3e4:	orr	ip, ip, r3
   1d3e8:	ldrd	r2, [r6, #-8]
   1d3ec:	str	ip, [r9, #-2128]	; 0xfffff7b0
   1d3f0:	orr	r1, r0, r1
   1d3f4:	ldr	r0, [sp, #32]
   1d3f8:	str	ip, [sp, #16]
   1d3fc:	orr	r5, r5, r3
   1d400:	str	r1, [r9, #-2124]	; 0xfffff7b4
   1d404:	str	r1, [sp, #24]
   1d408:	str	r5, [r9, #-2116]	; 0xfffff7bc
   1d40c:	orr	r2, r0, r2
   1d410:	str	r2, [r9, #-2120]	; 0xfffff7b8
   1d414:	str	r2, [sp, #32]
   1d418:	bne	1d2d4 <__assert_fail@plt+0xc02c>
   1d41c:	ldr	r3, [sp, #52]	; 0x34
   1d420:	cmp	r3, #0
   1d424:	bne	1e158 <__assert_fail@plt+0xceb0>
   1d428:	mov	r1, #256	; 0x100
   1d42c:	mov	r0, #4
   1d430:	bl	2aad4 <__assert_fail@plt+0x1982c>
   1d434:	ldr	r3, [sp, #100]	; 0x64
   1d438:	cmp	r0, #0
   1d43c:	mov	r7, r0
   1d440:	str	r0, [r3, #44]	; 0x2c
   1d444:	beq	1dfdc <__assert_fail@plt+0xcd34>
   1d448:	ldr	lr, [sp, #56]	; 0x38
   1d44c:	add	ip, sp, #148	; 0x94
   1d450:	add	r5, fp, #96	; 0x60
   1d454:	mov	r4, r0
   1d458:	add	r6, r0, #1024	; 0x400
   1d45c:	ldr	r3, [ip, #4]!
   1d460:	cmp	r3, #0
   1d464:	movne	r0, r4
   1d468:	movne	r1, #1
   1d46c:	beq	1d488 <__assert_fail@plt+0xc1e0>
   1d470:	tst	r3, #1
   1d474:	bne	1e0d8 <__assert_fail@plt+0xce30>
   1d478:	lsrs	r3, r3, #1
   1d47c:	add	r0, r0, #4
   1d480:	lsl	r1, r1, #1
   1d484:	bne	1d470 <__assert_fail@plt+0xc1c8>
   1d488:	add	r4, r4, #128	; 0x80
   1d48c:	add	r5, r5, #4
   1d490:	cmp	r6, r4
   1d494:	add	lr, lr, #4
   1d498:	bne	1d45c <__assert_fail@plt+0xc1b4>
   1d49c:	ubfx	r3, sl, #10, #1
   1d4a0:	cmp	r3, #0
   1d4a4:	beq	1d4d8 <__assert_fail@plt+0xc230>
   1d4a8:	ldr	ip, [sp, #48]	; 0x30
   1d4ac:	add	r2, sp, #6336	; 0x18c0
   1d4b0:	add	r1, r3, #1
   1d4b4:	add	r2, r2, #56	; 0x38
   1d4b8:	sub	r0, r3, #1
   1d4bc:	add	r2, r2, r3, lsl #5
   1d4c0:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1d4c4:	tst	r2, #1024	; 0x400
   1d4c8:	bne	1e140 <__assert_fail@plt+0xce98>
   1d4cc:	cmp	ip, r3
   1d4d0:	mov	r3, r1
   1d4d4:	bne	1d4ac <__assert_fail@plt+0xc204>
   1d4d8:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   1d4dc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d4e0:	ldr	r3, [sp, #48]	; 0x30
   1d4e4:	ldr	r5, [sp, #60]	; 0x3c
   1d4e8:	add	r1, r3, r3, lsl #1
   1d4ec:	ldr	r3, [sp, #108]	; 0x6c
   1d4f0:	add	r4, r3, r1, lsl #2
   1d4f4:	add	r5, r5, #12
   1d4f8:	ldr	r0, [r5, #-4]
   1d4fc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1d500:	cmp	r4, r5
   1d504:	bne	1d4f4 <__assert_fail@plt+0xc24c>
   1d508:	mov	r0, #1
   1d50c:	b	1dd30 <__assert_fail@plt+0xca88>
   1d510:	ldrb	r2, [r2, r1, lsl #3]
   1d514:	mov	ip, r0
   1d518:	asr	r1, r2, #5
   1d51c:	and	r2, r2, #31
   1d520:	ldr	r0, [r9, r1, lsl #2]
   1d524:	orr	r2, r0, ip, lsl r2
   1d528:	str	r2, [r9, r1, lsl #2]
   1d52c:	cmp	r3, #0
   1d530:	beq	1d7f0 <__assert_fail@plt+0xc548>
   1d534:	tst	r3, #32
   1d538:	bne	1dc98 <__assert_fail@plt+0xc9f0>
   1d53c:	tst	r3, #128	; 0x80
   1d540:	bne	1dcd8 <__assert_fail@plt+0xca30>
   1d544:	tst	r3, #4
   1d548:	beq	1d6b0 <__assert_fail@plt+0xc408>
   1d54c:	ldr	r2, [sp, #52]	; 0x34
   1d550:	cmp	r2, #1
   1d554:	beq	1dfbc <__assert_fail@plt+0xcd14>
   1d558:	ldr	r1, [sp, #116]	; 0x74
   1d55c:	ldrd	r4, [r9]
   1d560:	ldr	lr, [r9, #16]
   1d564:	ldr	r2, [r1, #92]	; 0x5c
   1d568:	ldr	r0, [r9, #24]
   1d56c:	ldr	ip, [r9, #28]
   1d570:	cmp	r2, #1
   1d574:	ldr	r2, [r9, #8]
   1d578:	str	lr, [sp, #56]	; 0x38
   1d57c:	ldr	sl, [r9, #12]
   1d580:	str	r2, [sp]
   1d584:	ldr	r2, [r9, #20]
   1d588:	str	r0, [sp, #16]
   1d58c:	str	ip, [sp, #32]
   1d590:	str	r2, [sp, #12]
   1d594:	mov	r2, r1
   1d598:	ldr	r1, [r1, #96]	; 0x60
   1d59c:	ldr	r7, [r2, #120]	; 0x78
   1d5a0:	ldr	r8, [r2, #108]	; 0x6c
   1d5a4:	ldr	ip, [r2, #100]	; 0x64
   1d5a8:	ldr	r0, [r2, #104]	; 0x68
   1d5ac:	str	r7, [sp, #24]
   1d5b0:	str	r8, [sp, #8]
   1d5b4:	ldr	r7, [r2, #124]	; 0x7c
   1d5b8:	ldr	r8, [r2, #112]	; 0x70
   1d5bc:	ldr	fp, [r2, #116]	; 0x74
   1d5c0:	str	r7, [sp, #40]	; 0x28
   1d5c4:	ble	1de48 <__assert_fail@plt+0xcba0>
   1d5c8:	ldr	r2, [sp, #116]	; 0x74
   1d5cc:	ldr	lr, [r2, #60]	; 0x3c
   1d5d0:	ldr	r2, [lr]
   1d5d4:	mvn	r2, r2
   1d5d8:	orr	r2, r2, r1
   1d5dc:	ldr	r1, [lr, #4]
   1d5e0:	and	r2, r2, r4
   1d5e4:	str	r2, [r9]
   1d5e8:	mvn	r1, r1
   1d5ec:	orr	r1, r1, ip
   1d5f0:	ldr	ip, [lr, #8]
   1d5f4:	and	r1, r1, r5
   1d5f8:	orr	r2, r2, r1
   1d5fc:	mvn	r4, ip
   1d600:	ldr	ip, [lr, #20]
   1d604:	orr	r4, r4, r0
   1d608:	ldr	r0, [lr, #12]
   1d60c:	mvn	ip, ip
   1d610:	orr	ip, ip, fp
   1d614:	mvn	r5, r0
   1d618:	ldr	r0, [sp]
   1d61c:	and	r4, r4, r0
   1d620:	ldr	r0, [lr, #24]
   1d624:	orr	r2, r2, r4
   1d628:	stmib	r9, {r1, r4}
   1d62c:	ldr	r1, [sp, #8]
   1d630:	ldr	r4, [sp, #56]	; 0x38
   1d634:	mvn	r0, r0
   1d638:	orr	r5, r5, r1
   1d63c:	ldr	r1, [lr, #16]
   1d640:	and	r5, r5, sl
   1d644:	orr	r2, r2, r5
   1d648:	ldr	lr, [lr, #28]
   1d64c:	str	r5, [r9, #12]
   1d650:	mvn	r1, r1
   1d654:	orr	r1, r1, r8
   1d658:	and	r1, r1, r4
   1d65c:	ldr	r4, [sp, #12]
   1d660:	mvn	lr, lr
   1d664:	orr	r2, r2, r1
   1d668:	str	r1, [r9, #16]
   1d66c:	ldr	r1, [sp, #24]
   1d670:	and	ip, ip, r4
   1d674:	orr	r2, r2, ip
   1d678:	str	ip, [r9, #20]
   1d67c:	orr	r0, r0, r1
   1d680:	ldr	r1, [sp, #16]
   1d684:	and	r0, r0, r1
   1d688:	ldr	r1, [sp, #40]	; 0x28
   1d68c:	orr	ip, r2, r0
   1d690:	ldr	r2, [sp, #32]
   1d694:	str	r0, [r9, #24]
   1d698:	orr	lr, lr, r1
   1d69c:	and	lr, lr, r2
   1d6a0:	orr	ip, ip, lr
   1d6a4:	str	lr, [r9, #28]
   1d6a8:	cmp	ip, #0
   1d6ac:	beq	1d220 <__assert_fail@plt+0xbf78>
   1d6b0:	tst	r3, #8
   1d6b4:	beq	1d7f0 <__assert_fail@plt+0xc548>
   1d6b8:	ldr	r3, [sp, #52]	; 0x34
   1d6bc:	cmp	r3, #1
   1d6c0:	beq	1dfa8 <__assert_fail@plt+0xcd00>
   1d6c4:	ldr	r2, [sp, #116]	; 0x74
   1d6c8:	ldr	r5, [r9]
   1d6cc:	ldr	r1, [r9, #24]
   1d6d0:	add	r7, r2, #112	; 0x70
   1d6d4:	ldr	r3, [r2, #92]	; 0x5c
   1d6d8:	ldm	r7, {r7, sl, lr}
   1d6dc:	str	r1, [sp, #12]
   1d6e0:	cmp	r3, #1
   1d6e4:	ldr	ip, [r9, #28]
   1d6e8:	ldr	r3, [r9, #8]
   1d6ec:	ldr	r0, [r2, #100]	; 0x64
   1d6f0:	str	lr, [sp, #32]
   1d6f4:	ldr	r1, [r2, #104]	; 0x68
   1d6f8:	str	r3, [sp]
   1d6fc:	str	ip, [sp, #16]
   1d700:	ldr	r3, [r9, #20]
   1d704:	ldr	ip, [r2, #96]	; 0x60
   1d708:	ldr	r4, [r9, #4]
   1d70c:	str	r3, [sp, #8]
   1d710:	ldr	r3, [r2, #108]	; 0x6c
   1d714:	ldr	r2, [r2, #124]	; 0x7c
   1d718:	ldr	r8, [r9, #12]
   1d71c:	ldr	fp, [r9, #16]
   1d720:	str	r2, [sp, #24]
   1d724:	ble	1df3c <__assert_fail@plt+0xcc94>
   1d728:	ldr	r2, [sp, #116]	; 0x74
   1d72c:	ldr	r2, [r2, #60]	; 0x3c
   1d730:	ldr	lr, [r2]
   1d734:	and	ip, ip, lr
   1d738:	ldr	lr, [r2, #4]
   1d73c:	bic	ip, r5, ip
   1d740:	str	ip, [r9]
   1d744:	and	r0, r0, lr
   1d748:	ldr	lr, [r2, #16]
   1d74c:	bic	r4, r4, r0
   1d750:	ldr	r0, [r2, #8]
   1d754:	orr	r5, ip, r4
   1d758:	str	r4, [r9, #4]
   1d75c:	ldr	ip, [sp]
   1d760:	and	r7, r7, lr
   1d764:	bic	r7, fp, r7
   1d768:	and	r1, r1, r0
   1d76c:	ldr	r0, [r2, #20]
   1d770:	str	r7, [r9, #16]
   1d774:	bic	r1, ip, r1
   1d778:	ldr	ip, [r2, #12]
   1d77c:	orr	r5, r5, r1
   1d780:	str	r1, [r9, #8]
   1d784:	and	r0, r0, sl
   1d788:	and	r3, r3, ip
   1d78c:	ldr	ip, [r2, #24]
   1d790:	bic	r3, r8, r3
   1d794:	orr	r5, r5, r3
   1d798:	ldr	r2, [r2, #28]
   1d79c:	str	r3, [r9, #12]
   1d7a0:	orr	r5, r5, r7
   1d7a4:	ldr	r3, [sp, #8]
   1d7a8:	bic	r0, r3, r0
   1d7ac:	ldr	r3, [sp, #32]
   1d7b0:	orr	r5, r5, r0
   1d7b4:	str	r0, [r9, #20]
   1d7b8:	and	r3, r3, ip
   1d7bc:	mov	ip, r3
   1d7c0:	ldr	r3, [sp, #12]
   1d7c4:	bic	ip, r3, ip
   1d7c8:	ldr	r3, [sp, #24]
   1d7cc:	orr	r5, r5, ip
   1d7d0:	str	ip, [r9, #24]
   1d7d4:	and	r3, r3, r2
   1d7d8:	ldr	r2, [sp, #16]
   1d7dc:	bic	r3, r2, r3
   1d7e0:	orr	r2, r5, r3
   1d7e4:	str	r3, [r9, #28]
   1d7e8:	cmp	r2, #0
   1d7ec:	beq	1d220 <__assert_fail@plt+0xbf78>
   1d7f0:	ldr	r3, [sp, #48]	; 0x30
   1d7f4:	cmp	r3, #0
   1d7f8:	movle	fp, #0
   1d7fc:	ble	1dbb4 <__assert_fail@plt+0xc90c>
   1d800:	add	r3, sp, #3312	; 0xcf0
   1d804:	mov	fp, #0
   1d808:	add	r3, r3, #8
   1d80c:	add	r4, sp, #6336	; 0x18c0
   1d810:	add	r4, r4, #56	; 0x38
   1d814:	str	fp, [sp]
   1d818:	mov	r6, r4
   1d81c:	str	r3, [sp, #8]
   1d820:	str	r3, [sp, #108]	; 0x6c
   1d824:	b	1d884 <__assert_fail@plt+0xc5dc>
   1d828:	ldr	r3, [sp, #96]	; 0x60
   1d82c:	add	r0, sp, #14528	; 0x38c0
   1d830:	add	r0, r0, #56	; 0x38
   1d834:	ldrb	r2, [r3]
   1d838:	asr	r3, r2, #5
   1d83c:	and	r2, r2, #31
   1d840:	add	r3, r0, r3, lsl #2
   1d844:	add	r3, r3, r1
   1d848:	sub	r3, r3, #8192	; 0x2000
   1d84c:	ldr	r3, [r3]
   1d850:	lsr	r2, r3, r2
   1d854:	tst	r2, #1
   1d858:	bne	1d898 <__assert_fail@plt+0xc5f0>
   1d85c:	ldr	r3, [sp]
   1d860:	add	r6, r6, #32
   1d864:	add	r2, r3, #1
   1d868:	ldr	r3, [sp, #48]	; 0x30
   1d86c:	str	r2, [sp]
   1d870:	cmp	r2, r3
   1d874:	ldr	r3, [sp, #8]
   1d878:	add	r3, r3, #12
   1d87c:	str	r3, [sp, #8]
   1d880:	bge	1dd50 <__assert_fail@plt+0xcaa8>
   1d884:	ldr	r3, [sp, #52]	; 0x34
   1d888:	cmp	r3, #1
   1d88c:	ldr	r3, [sp]
   1d890:	lsl	r1, r3, #5
   1d894:	beq	1d828 <__assert_fail@plt+0xc580>
   1d898:	ldr	fp, [r6]
   1d89c:	ldm	r9, {r2, r4, lr}
   1d8a0:	ldr	sl, [r6, #4]
   1d8a4:	and	r3, r2, fp
   1d8a8:	str	fp, [sp, #56]	; 0x38
   1d8ac:	ldr	r8, [r6, #8]
   1d8b0:	str	r3, [sp, #64]	; 0x40
   1d8b4:	ldr	r7, [r6, #12]
   1d8b8:	and	r1, r4, sl
   1d8bc:	orr	r3, r3, r1
   1d8c0:	ldr	ip, [r9, #12]
   1d8c4:	and	r0, lr, r8
   1d8c8:	str	r1, [sp, #68]	; 0x44
   1d8cc:	mov	r5, r0
   1d8d0:	ldr	r1, [r6, #16]
   1d8d4:	orr	r3, r3, r5
   1d8d8:	ldr	r0, [r9, #16]
   1d8dc:	and	fp, ip, r7
   1d8e0:	orr	r3, r3, fp
   1d8e4:	str	r5, [sp, #72]	; 0x48
   1d8e8:	ldr	r5, [r9, #20]
   1d8ec:	str	fp, [sp, #76]	; 0x4c
   1d8f0:	ldr	fp, [r9, #24]
   1d8f4:	str	r5, [sp, #12]
   1d8f8:	ldr	r5, [r6, #20]
   1d8fc:	str	r1, [sp, #60]	; 0x3c
   1d900:	str	r5, [sp, #16]
   1d904:	and	r5, r0, r1
   1d908:	orr	r3, r3, r5
   1d90c:	ldr	r1, [sp, #12]
   1d910:	str	fp, [sp, #24]
   1d914:	str	r5, [sp, #80]	; 0x50
   1d918:	ldr	r5, [sp, #16]
   1d91c:	ldr	fp, [r6, #24]
   1d920:	and	r1, r1, r5
   1d924:	ldr	r5, [r9, #28]
   1d928:	orr	r3, r3, r1
   1d92c:	str	fp, [sp, #32]
   1d930:	ldr	fp, [sp, #24]
   1d934:	str	r5, [sp, #40]	; 0x28
   1d938:	str	r1, [sp, #84]	; 0x54
   1d93c:	ldr	r1, [r6, #28]
   1d940:	ldr	r5, [sp, #32]
   1d944:	and	fp, fp, r5
   1d948:	ldr	r5, [sp, #40]	; 0x28
   1d94c:	orr	r3, r3, fp
   1d950:	str	fp, [sp, #88]	; 0x58
   1d954:	and	r5, r5, r1
   1d958:	orrs	r3, r3, r5
   1d95c:	str	r5, [sp, #92]	; 0x5c
   1d960:	beq	1d85c <__assert_fail@plt+0xc5b4>
   1d964:	ldr	fp, [sp, #56]	; 0x38
   1d968:	bic	r5, sl, r4
   1d96c:	bic	r4, r4, sl
   1d970:	str	r5, [sp, #120]	; 0x78
   1d974:	bic	r3, fp, r2
   1d978:	bic	r2, r2, fp
   1d97c:	ldr	fp, [sp, #32]
   1d980:	mov	sl, r3
   1d984:	str	r3, [sp, #56]	; 0x38
   1d988:	orr	r3, sl, r5
   1d98c:	bic	sl, r8, lr
   1d990:	bic	lr, lr, r8
   1d994:	stm	r9, {r2, r4}
   1d998:	orr	r2, r2, r4
   1d99c:	orr	r2, r2, lr
   1d9a0:	bic	r8, r7, ip
   1d9a4:	ldr	r5, [sp, #16]
   1d9a8:	str	lr, [r9, #8]
   1d9ac:	bic	ip, ip, r7
   1d9b0:	orr	r3, r3, sl
   1d9b4:	ldr	lr, [sp, #60]	; 0x3c
   1d9b8:	orr	r2, r2, ip
   1d9bc:	orr	r3, r3, r8
   1d9c0:	str	ip, [r9, #12]
   1d9c4:	ldr	ip, [sp, #24]
   1d9c8:	bic	r7, lr, r0
   1d9cc:	bic	r0, r0, lr
   1d9d0:	ldr	lr, [sp, #12]
   1d9d4:	orr	r2, r2, r0
   1d9d8:	orr	r3, r3, r7
   1d9dc:	str	r0, [r9, #16]
   1d9e0:	bic	r0, ip, fp
   1d9e4:	bic	r4, r5, lr
   1d9e8:	bic	r5, lr, r5
   1d9ec:	bic	lr, fp, ip
   1d9f0:	ldr	fp, [sp, #40]	; 0x28
   1d9f4:	orr	r3, r3, r4
   1d9f8:	orr	r2, r2, r5
   1d9fc:	orr	r3, r3, lr
   1da00:	str	r5, [r9, #20]
   1da04:	orr	r2, r2, r0
   1da08:	bic	ip, r1, fp
   1da0c:	bic	r1, fp, r1
   1da10:	orrs	r3, r3, ip
   1da14:	orr	r5, r2, r1
   1da18:	strd	r0, [r9, #24]
   1da1c:	beq	1db88 <__assert_fail@plt+0xc8e0>
   1da20:	ldr	r2, [sp, #48]	; 0x30
   1da24:	str	sl, [r9, #-2072]	; 0xfffff7e8
   1da28:	ldr	r3, [sp, #64]	; 0x40
   1da2c:	str	ip, [r9, #-2052]	; 0xfffff7fc
   1da30:	ldr	r1, [sp, #68]	; 0x44
   1da34:	ldr	r0, [sp, #72]	; 0x48
   1da38:	str	r3, [r9, #-2112]	; 0xfffff7c0
   1da3c:	ldr	fp, [sp, #76]	; 0x4c
   1da40:	str	r1, [r9, #-2108]	; 0xfffff7c4
   1da44:	lsl	r1, r2, #1
   1da48:	ldr	ip, [sp, #124]	; 0x7c
   1da4c:	str	r0, [r9, #-2104]	; 0xfffff7c8
   1da50:	add	r0, sp, #14528	; 0x38c0
   1da54:	add	r0, r0, #56	; 0x38
   1da58:	str	r1, [sp, #60]	; 0x3c
   1da5c:	add	r3, r0, r2, lsl #5
   1da60:	add	r2, r1, r2
   1da64:	ldr	r1, [sp, #80]	; 0x50
   1da68:	str	fp, [r9, #-2100]	; 0xfffff7cc
   1da6c:	ldr	fp, [sp, #88]	; 0x58
   1da70:	sub	r3, r3, #8192	; 0x2000
   1da74:	ldr	r0, [sp, #108]	; 0x6c
   1da78:	str	r1, [r9, #-2096]	; 0xfffff7d0
   1da7c:	ldr	r1, [sp, #84]	; 0x54
   1da80:	str	r8, [r9, #-2068]	; 0xfffff7ec
   1da84:	add	r0, r0, r2, lsl #2
   1da88:	str	r1, [r9, #-2092]	; 0xfffff7d4
   1da8c:	ldr	r1, [sp, #92]	; 0x5c
   1da90:	str	r7, [r9, #-2064]	; 0xfffff7f0
   1da94:	str	r4, [r9, #-2060]	; 0xfffff7f4
   1da98:	str	lr, [r9, #-2056]	; 0xfffff7f8
   1da9c:	str	r0, [sp, #12]
   1daa0:	str	fp, [r9, #-2088]	; 0xfffff7d8
   1daa4:	str	r1, [r9, #-2084]	; 0xfffff7dc
   1daa8:	ldr	r1, [sp, #56]	; 0x38
   1daac:	str	r1, [r9, #-2080]	; 0xfffff7e0
   1dab0:	ldr	r1, [sp, #120]	; 0x78
   1dab4:	str	r1, [r9, #-2076]	; 0xfffff7e4
   1dab8:	ldrd	r0, [ip]
   1dabc:	ldrd	sl, [sp, #184]	; 0xb8
   1dac0:	ldr	r4, [sp, #12]
   1dac4:	strd	r0, [r3]
   1dac8:	ldrd	r0, [sp, #192]	; 0xc0
   1dacc:	strd	sl, [sp, #24]
   1dad0:	ldrd	sl, [ip, #8]
   1dad4:	strd	r0, [sp, #32]
   1dad8:	ldrd	r0, [ip, #16]
   1dadc:	strd	r0, [sp, #16]
   1dae0:	mov	r0, sl
   1dae4:	mov	r1, fp
   1dae8:	ldrd	sl, [sp, #200]	; 0xc8
   1daec:	strd	r0, [r3, #8]
   1daf0:	ldrd	r0, [sp, #16]
   1daf4:	strd	sl, [sp, #40]	; 0x28
   1daf8:	ldrd	sl, [ip, #24]
   1dafc:	strd	r0, [r3, #16]
   1db00:	ldrd	r0, [sp, #208]	; 0xd0
   1db04:	strd	r0, [sp, #16]
   1db08:	mov	r0, sl
   1db0c:	mov	r1, fp
   1db10:	ldrd	sl, [sp, #24]
   1db14:	strd	r0, [r3, #24]
   1db18:	ldr	r3, [sp, #8]
   1db1c:	ldrd	r0, [sp, #32]
   1db20:	strd	sl, [r6]
   1db24:	ldrd	sl, [sp, #40]	; 0x28
   1db28:	ldr	r3, [r3, #4]
   1db2c:	strd	r0, [r6, #8]
   1db30:	ldrd	r0, [sp, #16]
   1db34:	strd	sl, [r6, #16]
   1db38:	cmp	r3, #0
   1db3c:	str	r3, [r4, #4]
   1db40:	strd	r0, [r6, #24]
   1db44:	ble	1dbcc <__assert_fail@plt+0xc924>
   1db48:	ldr	r1, [sp, #108]	; 0x6c
   1db4c:	lsl	r0, r3, #2
   1db50:	str	r3, [r1, r2, lsl #2]
   1db54:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1db58:	cmp	r0, #0
   1db5c:	str	r0, [r4, #8]
   1db60:	ldr	r1, [sp, #60]	; 0x3c
   1db64:	beq	1e080 <__assert_fail@plt+0xcdd8>
   1db68:	ldr	r3, [sp, #8]
   1db6c:	ldr	r2, [r3, #4]
   1db70:	ldr	r1, [r3, #8]
   1db74:	lsl	r2, r2, #2
   1db78:	bl	11038 <memcpy@plt>
   1db7c:	ldr	r3, [sp, #48]	; 0x30
   1db80:	add	r3, r3, #1
   1db84:	str	r3, [sp, #48]	; 0x30
   1db88:	ldr	r0, [sp, #8]
   1db8c:	ldr	r3, [sp, #100]	; 0x64
   1db90:	ldr	r2, [sp, #112]	; 0x70
   1db94:	ldr	r3, [r3, #12]
   1db98:	ldr	r1, [r3, r2]
   1db9c:	bl	17910 <__assert_fail@plt+0x6668>
   1dba0:	cmp	r0, #0
   1dba4:	beq	1dcf8 <__assert_fail@plt+0xca50>
   1dba8:	cmp	r5, #0
   1dbac:	bne	1d85c <__assert_fail@plt+0xc5b4>
   1dbb0:	ldr	fp, [sp]
   1dbb4:	ldr	r3, [sp, #48]	; 0x30
   1dbb8:	cmp	r3, fp
   1dbbc:	beq	1dd60 <__assert_fail@plt+0xcab8>
   1dbc0:	ldr	r3, [sp, #100]	; 0x64
   1dbc4:	ldr	r6, [r3, #8]
   1dbc8:	b	1d220 <__assert_fail@plt+0xbf78>
   1dbcc:	ldr	r1, [sp, #108]	; 0x6c
   1dbd0:	mov	r3, #0
   1dbd4:	str	r3, [r1, r2, lsl #2]
   1dbd8:	ldr	r2, [sp, #12]
   1dbdc:	str	r3, [r2, #4]
   1dbe0:	str	r3, [r2, #8]
   1dbe4:	b	1db7c <__assert_fail@plt+0xc8d4>
   1dbe8:	ldr	r1, [sp, #116]	; 0x74
   1dbec:	ldr	r2, [r1, #92]	; 0x5c
   1dbf0:	cmp	r2, #1
   1dbf4:	ble	1de2c <__assert_fail@plt+0xcb84>
   1dbf8:	ldr	r2, [r1, #60]	; 0x3c
   1dbfc:	ldm	r9, {r1, ip}
   1dc00:	ldm	r2, {r0, lr}
   1dc04:	ldr	r4, [r2, #8]
   1dc08:	orr	r1, r1, r0
   1dc0c:	orr	ip, ip, lr
   1dc10:	ldr	r0, [r9, #8]
   1dc14:	stm	r9, {r1, ip}
   1dc18:	ldr	lr, [r2, #12]
   1dc1c:	ldr	r1, [r9, #12]
   1dc20:	orr	r0, r0, r4
   1dc24:	str	r0, [r9, #8]
   1dc28:	ldr	r4, [r2, #16]
   1dc2c:	orr	r1, r1, lr
   1dc30:	ldr	r0, [r9, #16]
   1dc34:	ldr	ip, [r2, #20]
   1dc38:	str	r1, [r9, #12]
   1dc3c:	ldr	lr, [r9, #20]
   1dc40:	orr	r0, r0, r4
   1dc44:	ldr	r1, [r2, #24]
   1dc48:	str	r0, [r9, #16]
   1dc4c:	ldr	r0, [r9, #24]
   1dc50:	orr	ip, lr, ip
   1dc54:	ldr	r2, [r2, #28]
   1dc58:	str	ip, [r9, #20]
   1dc5c:	ldr	ip, [r9, #28]
   1dc60:	orr	r1, r0, r1
   1dc64:	str	r1, [r9, #24]
   1dc68:	orr	r2, ip, r2
   1dc6c:	str	r2, [r9, #28]
   1dc70:	ldr	r2, [sp, #116]	; 0x74
   1dc74:	ldr	r2, [r2, #128]	; 0x80
   1dc78:	tst	r2, #64	; 0x40
   1dc7c:	beq	1de1c <__assert_fail@plt+0xcb74>
   1dc80:	tst	r2, #128	; 0x80
   1dc84:	beq	1d52c <__assert_fail@plt+0xc284>
   1dc88:	ldr	r2, [r9]
   1dc8c:	bic	r2, r2, #1
   1dc90:	str	r2, [r9]
   1dc94:	b	1d52c <__assert_fail@plt+0xc284>
   1dc98:	ldr	r2, [r9]
   1dc9c:	ldr	r1, [sp, #128]	; 0x80
   1dca0:	ldr	r0, [sp, #132]	; 0x84
   1dca4:	tst	r2, #1024	; 0x400
   1dca8:	str	r1, [r9]
   1dcac:	strd	r0, [r9, #4]
   1dcb0:	str	r0, [r9, #12]
   1dcb4:	str	r1, [r9, #16]
   1dcb8:	str	r0, [r9, #20]
   1dcbc:	str	r1, [r9, #24]
   1dcc0:	str	r0, [r9, #28]
   1dcc4:	beq	1d220 <__assert_fail@plt+0xbf78>
   1dcc8:	mov	r2, #1024	; 0x400
   1dccc:	tst	r3, #128	; 0x80
   1dcd0:	str	r2, [r9]
   1dcd4:	beq	1d544 <__assert_fail@plt+0xc29c>
   1dcd8:	ldr	r3, [sp, #128]	; 0x80
   1dcdc:	ldr	r2, [sp, #132]	; 0x84
   1dce0:	str	r3, [r9]
   1dce4:	strd	r2, [r9, #4]
   1dce8:	strd	r2, [r9, #12]
   1dcec:	strd	r2, [r9, #20]
   1dcf0:	str	r2, [r9, #28]
   1dcf4:	b	1d220 <__assert_fail@plt+0xbf78>
   1dcf8:	ldr	r3, [sp, #48]	; 0x30
   1dcfc:	lsl	r3, r3, #1
   1dd00:	mov	r2, r3
   1dd04:	mov	r3, r2
   1dd08:	ldr	r2, [sp, #48]	; 0x30
   1dd0c:	ldr	r4, [sp, #108]	; 0x6c
   1dd10:	add	r1, r3, r2
   1dd14:	add	r5, r4, r1, lsl #2
   1dd18:	add	r4, r4, #12
   1dd1c:	ldr	r0, [r4, #-4]
   1dd20:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1dd24:	cmp	r5, r4
   1dd28:	bne	1dd18 <__assert_fail@plt+0xca70>
   1dd2c:	mov	r0, #0
   1dd30:	add	sp, sp, #14528	; 0x38c0
   1dd34:	add	sp, sp, #60	; 0x3c
   1dd38:	ldrd	r4, [sp]
   1dd3c:	ldrd	r6, [sp, #8]
   1dd40:	ldrd	r8, [sp, #16]
   1dd44:	ldrd	sl, [sp, #24]
   1dd48:	add	sp, sp, #32
   1dd4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd50:	ldr	r3, [sp, #48]	; 0x30
   1dd54:	mov	fp, r2
   1dd58:	cmp	r3, fp
   1dd5c:	bne	1dbc0 <__assert_fail@plt+0xc918>
   1dd60:	ldr	r2, [sp, #100]	; 0x64
   1dd64:	lsl	sl, r3, #1
   1dd68:	add	ip, sp, #3312	; 0xcf0
   1dd6c:	add	ip, ip, #8
   1dd70:	ldrd	r6, [r9]
   1dd74:	add	r1, sl, r3
   1dd78:	add	r5, ip, r1, lsl #2
   1dd7c:	str	ip, [sp, #108]	; 0x6c
   1dd80:	ldr	lr, [sp, #112]	; 0x70
   1dd84:	ldr	r0, [r2, #12]
   1dd88:	add	r2, sp, #14528	; 0x38c0
   1dd8c:	add	r2, r2, #56	; 0x38
   1dd90:	add	r3, r2, r3, lsl #5
   1dd94:	mov	r2, #1
   1dd98:	sub	r3, r3, #8192	; 0x2000
   1dd9c:	ldr	r4, [r0, lr]
   1dda0:	mov	r0, #4
   1dda4:	strd	r6, [r3]
   1dda8:	ldrd	r6, [r9, #16]
   1ddac:	str	r2, [ip, r1, lsl #2]
   1ddb0:	str	r2, [r5, #4]
   1ddb4:	strd	r6, [sp]
   1ddb8:	ldrd	r6, [r9, #8]
   1ddbc:	strd	r6, [r3, #8]
   1ddc0:	ldrd	r6, [sp]
   1ddc4:	strd	r6, [r3, #16]
   1ddc8:	ldrd	r6, [r9, #24]
   1ddcc:	strd	r6, [r3, #24]
   1ddd0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1ddd4:	cmp	r0, #0
   1ddd8:	str	r0, [r5, #8]
   1dddc:	beq	1e094 <__assert_fail@plt+0xcdec>
   1dde0:	ldr	r3, [sp, #100]	; 0x64
   1dde4:	str	r4, [r0]
   1dde8:	ldr	r6, [r3, #8]
   1ddec:	ldr	r3, [sp, #48]	; 0x30
   1ddf0:	add	r3, r3, #1
   1ddf4:	str	r3, [sp, #48]	; 0x30
   1ddf8:	b	1dcd8 <__assert_fail@plt+0xca30>
   1ddfc:	ldr	r2, [sp, #116]	; 0x74
   1de00:	mvn	r0, #0
   1de04:	mvn	r1, #0
   1de08:	strd	r0, [r9]
   1de0c:	strd	r0, [r9, #8]
   1de10:	ldr	r2, [r2, #128]	; 0x80
   1de14:	tst	r2, #64	; 0x40
   1de18:	bne	1dc80 <__assert_fail@plt+0xc9d8>
   1de1c:	ldr	r1, [r9]
   1de20:	bic	r1, r1, #1024	; 0x400
   1de24:	str	r1, [r9]
   1de28:	b	1dc80 <__assert_fail@plt+0xc9d8>
   1de2c:	mvn	r0, #0
   1de30:	mvn	r1, #0
   1de34:	strd	r0, [r9]
   1de38:	strd	r0, [r9, #8]
   1de3c:	strd	r0, [r9, #16]
   1de40:	strd	r0, [r9, #24]
   1de44:	b	1dc70 <__assert_fail@plt+0xc9c8>
   1de48:	and	r2, r4, r1
   1de4c:	ldr	r4, [sp]
   1de50:	and	r1, r5, ip
   1de54:	orr	ip, r2, r1
   1de58:	and	lr, lr, r8
   1de5c:	ldr	r5, [sp, #8]
   1de60:	mov	r8, lr
   1de64:	str	r2, [r9]
   1de68:	ldr	r2, [sp, #12]
   1de6c:	and	r4, r4, r0
   1de70:	ldr	r0, [sp, #16]
   1de74:	orr	ip, ip, r4
   1de78:	and	r5, r5, sl
   1de7c:	ldr	r7, [sp, #24]
   1de80:	orr	ip, ip, r5
   1de84:	and	r2, r2, fp
   1de88:	orr	ip, ip, lr
   1de8c:	stmib	r9, {r1, r4, r5, r8}
   1de90:	mov	fp, r2
   1de94:	orr	ip, ip, r2
   1de98:	ldr	r2, [sp, #32]
   1de9c:	and	r0, r0, r7
   1dea0:	str	fp, [r9, #20]
   1dea4:	ldr	r7, [sp, #40]	; 0x28
   1dea8:	orr	ip, ip, r0
   1deac:	str	r0, [r9, #24]
   1deb0:	and	r2, r2, r7
   1deb4:	orr	ip, ip, r2
   1deb8:	str	r2, [r9, #28]
   1debc:	b	1d6a8 <__assert_fail@plt+0xc400>
   1dec0:	ldr	r2, [r2, r1, lsl #3]
   1dec4:	ldm	r9, {r1, ip}
   1dec8:	ldm	r2, {r0, lr}
   1decc:	ldr	r4, [r2, #8]
   1ded0:	orr	r1, r1, r0
   1ded4:	orr	ip, ip, lr
   1ded8:	ldr	r0, [r9, #8]
   1dedc:	stm	r9, {r1, ip}
   1dee0:	ldr	lr, [r2, #12]
   1dee4:	ldr	r1, [r9, #12]
   1dee8:	orr	r0, r0, r4
   1deec:	str	r0, [r9, #8]
   1def0:	ldr	r4, [r2, #16]
   1def4:	orr	r1, r1, lr
   1def8:	ldr	r0, [r9, #16]
   1defc:	ldr	ip, [r2, #20]
   1df00:	str	r1, [r9, #12]
   1df04:	ldr	lr, [r9, #20]
   1df08:	orr	r0, r0, r4
   1df0c:	ldr	r1, [r2, #24]
   1df10:	str	r0, [r9, #16]
   1df14:	ldr	r0, [r9, #24]
   1df18:	orr	ip, lr, ip
   1df1c:	ldr	r2, [r2, #28]
   1df20:	str	ip, [r9, #20]
   1df24:	ldr	ip, [r9, #28]
   1df28:	orr	r1, r0, r1
   1df2c:	str	r1, [r9, #24]
   1df30:	orr	r2, ip, r2
   1df34:	str	r2, [r9, #28]
   1df38:	b	1d52c <__assert_fail@plt+0xc284>
   1df3c:	ldr	r2, [sp]
   1df40:	bic	ip, r5, ip
   1df44:	bic	r0, r4, r0
   1df48:	bic	r3, r8, r3
   1df4c:	bic	r7, fp, r7
   1df50:	str	ip, [r9]
   1df54:	str	r3, [r9, #12]
   1df58:	str	r7, [r9, #16]
   1df5c:	bic	r1, r2, r1
   1df60:	orr	r2, ip, r0
   1df64:	orr	r2, r2, r1
   1df68:	strd	r0, [r9, #4]
   1df6c:	orr	r2, r2, r3
   1df70:	ldrd	r0, [sp, #8]
   1df74:	orr	r2, r2, r7
   1df78:	ldr	r3, [sp, #16]
   1df7c:	bic	ip, r1, lr
   1df80:	ldr	r1, [sp, #24]
   1df84:	bic	sl, r0, sl
   1df88:	orr	r2, r2, sl
   1df8c:	orr	r2, r2, ip
   1df90:	str	sl, [r9, #20]
   1df94:	str	ip, [r9, #24]
   1df98:	bic	r3, r3, r1
   1df9c:	orr	r2, r2, r3
   1dfa0:	str	r3, [r9, #28]
   1dfa4:	b	1d7e8 <__assert_fail@plt+0xc540>
   1dfa8:	ldr	r3, [sp, #96]	; 0x60
   1dfac:	ldrb	r3, [r3, #6]
   1dfb0:	tst	r3, #64	; 0x40
   1dfb4:	beq	1d6c4 <__assert_fail@plt+0xc41c>
   1dfb8:	b	1dcd8 <__assert_fail@plt+0xca30>
   1dfbc:	ldr	r2, [sp, #96]	; 0x60
   1dfc0:	ldrb	r2, [r2, #6]
   1dfc4:	tst	r2, #64	; 0x40
   1dfc8:	bne	1d558 <__assert_fail@plt+0xc2b0>
   1dfcc:	b	1dcd8 <__assert_fail@plt+0xca30>
   1dfd0:	ldr	r3, [r9, #-2160]	; 0xfffff790
   1dfd4:	cmp	r3, #0
   1dfd8:	beq	1e03c <__assert_fail@plt+0xcd94>
   1dfdc:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   1dfe0:	ldr	r4, [sp, #108]	; 0x6c
   1dfe4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1dfe8:	ldr	r3, [sp, #48]	; 0x30
   1dfec:	add	r5, r3, r3, lsl #1
   1dff0:	add	r5, r4, r5, lsl #2
   1dff4:	add	r4, r4, #12
   1dff8:	ldr	r0, [r4, #-4]
   1dffc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1e000:	cmp	r4, r5
   1e004:	bne	1dff4 <__assert_fail@plt+0xcd4c>
   1e008:	b	1dd2c <__assert_fail@plt+0xca84>
   1e00c:	mov	r3, #1
   1e010:	add	r2, sp, #140	; 0x8c
   1e014:	ldr	r0, [sp, #40]	; 0x28
   1e018:	mov	r1, fp
   1e01c:	bl	1cd20 <__assert_fail@plt+0xba78>
   1e020:	add	r3, sp, #1264	; 0x4f0
   1e024:	cmp	r0, #0
   1e028:	add	r3, r3, #8
   1e02c:	str	r0, [r3, r8, lsl #2]
   1e030:	beq	1dfd0 <__assert_fail@plt+0xcd28>
   1e034:	cmp	r7, r0
   1e038:	beq	1e050 <__assert_fail@plt+0xcda8>
   1e03c:	ldr	r3, [fp, #92]	; 0x5c
   1e040:	cmp	r3, #2
   1e044:	ldr	r3, [sp, #52]	; 0x34
   1e048:	movge	r3, #1
   1e04c:	str	r3, [sp, #52]	; 0x34
   1e050:	mov	r3, #2
   1e054:	add	r2, sp, #140	; 0x8c
   1e058:	ldr	r0, [sp, #40]	; 0x28
   1e05c:	mov	r1, fp
   1e060:	bl	1cd20 <__assert_fail@plt+0xba78>
   1e064:	cmp	r0, #0
   1e068:	str	r0, [r9, r8, lsl #2]
   1e06c:	bne	1d378 <__assert_fail@plt+0xc0d0>
   1e070:	ldr	r3, [r9, #-2160]	; 0xfffff790
   1e074:	cmp	r3, #0
   1e078:	beq	1d378 <__assert_fail@plt+0xc0d0>
   1e07c:	b	1dfdc <__assert_fail@plt+0xcd34>
   1e080:	mov	r2, r1
   1e084:	ldr	r1, [sp, #12]
   1e088:	str	r0, [r1]
   1e08c:	str	r0, [r1, #4]
   1e090:	b	1dd04 <__assert_fail@plt+0xca5c>
   1e094:	ldr	r3, [sp, #48]	; 0x30
   1e098:	mov	r2, sl
   1e09c:	str	r0, [r5]
   1e0a0:	str	r0, [r5, #4]
   1e0a4:	cmp	r3, #0
   1e0a8:	beq	1dd2c <__assert_fail@plt+0xca84>
   1e0ac:	b	1dd04 <__assert_fail@plt+0xca5c>
   1e0b0:	ldr	r3, [r9, #-2160]	; 0xfffff790
   1e0b4:	cmp	r3, #0
   1e0b8:	beq	1d35c <__assert_fail@plt+0xc0b4>
   1e0bc:	b	1dfdc <__assert_fail@plt+0xcd34>
   1e0c0:	add	r2, sp, #3312	; 0xcf0
   1e0c4:	mov	r3, #12
   1e0c8:	add	r2, r2, #8
   1e0cc:	str	r3, [r9, #-2160]	; 0xfffff790
   1e0d0:	str	r2, [sp, #108]	; 0x6c
   1e0d4:	b	1dfe0 <__assert_fail@plt+0xcd38>
   1e0d8:	ldr	r2, [lr]
   1e0dc:	ands	r2, r1, r2
   1e0e0:	bne	1e138 <__assert_fail@plt+0xce90>
   1e0e4:	add	r2, r2, #1
   1e0e8:	ldr	r8, [lr, r2, lsl #5]
   1e0ec:	tst	r1, r8
   1e0f0:	beq	1e0e4 <__assert_fail@plt+0xce3c>
   1e0f4:	ldr	r8, [r5]
   1e0f8:	add	r2, r9, r2, lsl #2
   1e0fc:	tst	r1, r8
   1e100:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   1e104:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   1e108:	str	r2, [r0]
   1e10c:	b	1d478 <__assert_fail@plt+0xc1d0>
   1e110:	bne	1dd2c <__assert_fail@plt+0xca84>
   1e114:	mov	r1, #256	; 0x100
   1e118:	mov	r0, #4
   1e11c:	bl	2aad4 <__assert_fail@plt+0x1982c>
   1e120:	ldr	r2, [sp, #100]	; 0x64
   1e124:	mov	r3, r0
   1e128:	adds	r0, r0, #0
   1e12c:	movne	r0, #1
   1e130:	str	r3, [r2, #44]	; 0x2c
   1e134:	b	1dd30 <__assert_fail@plt+0xca88>
   1e138:	mov	r2, #0
   1e13c:	b	1e0f4 <__assert_fail@plt+0xce4c>
   1e140:	ldr	r2, [sp, #52]	; 0x34
   1e144:	ldr	r3, [r9, r0, lsl #2]
   1e148:	cmp	r2, #0
   1e14c:	strne	r3, [r7, #1064]	; 0x428
   1e150:	str	r3, [r7, #40]	; 0x28
   1e154:	b	1d4d8 <__assert_fail@plt+0xc230>
   1e158:	mov	r1, #512	; 0x200
   1e15c:	mov	r0, #4
   1e160:	bl	2aad4 <__assert_fail@plt+0x1982c>
   1e164:	ldr	r3, [sp, #100]	; 0x64
   1e168:	cmp	r0, #0
   1e16c:	mov	r7, r0
   1e170:	str	r0, [r3, #48]	; 0x30
   1e174:	beq	1dfdc <__assert_fail@plt+0xcd34>
   1e178:	ldr	ip, [sp, #56]	; 0x38
   1e17c:	add	r4, sp, #148	; 0x94
   1e180:	mov	lr, r0
   1e184:	add	r5, r0, #1024	; 0x400
   1e188:	ldr	r3, [r4, #4]!
   1e18c:	cmp	r3, #0
   1e190:	movne	r0, lr
   1e194:	movne	r1, #1
   1e198:	beq	1e1b4 <__assert_fail@plt+0xcf0c>
   1e19c:	tst	r3, #1
   1e1a0:	bne	1e1c8 <__assert_fail@plt+0xcf20>
   1e1a4:	lsrs	r3, r3, #1
   1e1a8:	add	r0, r0, #4
   1e1ac:	lsl	r1, r1, #1
   1e1b0:	bne	1e19c <__assert_fail@plt+0xcef4>
   1e1b4:	add	lr, lr, #128	; 0x80
   1e1b8:	add	ip, ip, #4
   1e1bc:	cmp	r5, lr
   1e1c0:	bne	1e188 <__assert_fail@plt+0xcee0>
   1e1c4:	b	1d49c <__assert_fail@plt+0xc1f4>
   1e1c8:	ldr	r2, [ip]
   1e1cc:	ands	r2, r1, r2
   1e1d0:	bne	1e1fc <__assert_fail@plt+0xcf54>
   1e1d4:	add	r2, r2, #1
   1e1d8:	ldr	r6, [ip, r2, lsl #5]
   1e1dc:	tst	r1, r6
   1e1e0:	beq	1e1d4 <__assert_fail@plt+0xcf2c>
   1e1e4:	add	r2, r9, r2, lsl #2
   1e1e8:	ldr	r6, [r2, #-2048]	; 0xfffff800
   1e1ec:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1e1f0:	str	r6, [r0]
   1e1f4:	str	r2, [r0, #1024]	; 0x400
   1e1f8:	b	1e1a4 <__assert_fail@plt+0xcefc>
   1e1fc:	mov	r2, #0
   1e200:	b	1e1e4 <__assert_fail@plt+0xcf3c>
   1e204:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e208:	mov	r4, r0
   1e20c:	ldr	r0, [r0, #84]	; 0x54
   1e210:	ldr	r5, [r1, #4]
   1e214:	strd	r6, [sp, #8]
   1e218:	mov	r7, r3
   1e21c:	mov	r6, #0
   1e220:	strd	r8, [sp, #16]
   1e224:	mov	r9, r2
   1e228:	ldr	r3, [r0]
   1e22c:	strd	sl, [sp, #24]
   1e230:	str	lr, [sp, #32]
   1e234:	sub	sp, sp, #76	; 0x4c
   1e238:	ldr	r2, [r4, #120]	; 0x78
   1e23c:	str	r0, [sp, #16]
   1e240:	str	r1, [sp, #28]
   1e244:	ldr	r1, [sp, #116]	; 0x74
   1e248:	ldr	r3, [r3, r9, lsl #3]
   1e24c:	add	r2, r1, r2
   1e250:	cmp	r2, r5
   1e254:	str	r3, [sp, #20]
   1e258:	str	r6, [sp, #40]	; 0x28
   1e25c:	bge	1e908 <__assert_fail@plt+0xd660>
   1e260:	ldr	r3, [sp, #28]
   1e264:	ldr	r2, [r4, #88]	; 0x58
   1e268:	ldr	r6, [r3]
   1e26c:	ldr	r5, [r3, #8]
   1e270:	ldr	r3, [r4, #40]	; 0x28
   1e274:	cmp	r6, #0
   1e278:	str	r3, [sp, #36]	; 0x24
   1e27c:	ldr	r3, [r4, #100]	; 0x64
   1e280:	str	r3, [sp, #32]
   1e284:	bne	1e6b4 <__assert_fail@plt+0xd40c>
   1e288:	sub	r1, r7, #1
   1e28c:	mov	r0, r4
   1e290:	str	r7, [r4, #40]	; 0x28
   1e294:	str	r5, [r4, #100]	; 0x64
   1e298:	bl	17ed0 <__assert_fail@plt+0x6c28>
   1e29c:	mov	r8, r0
   1e2a0:	mov	r2, #1
   1e2a4:	mov	r3, #1
   1e2a8:	mov	r0, #4
   1e2ac:	strd	r2, [sp, #48]	; 0x30
   1e2b0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1e2b4:	cmp	r0, #0
   1e2b8:	str	r0, [sp, #56]	; 0x38
   1e2bc:	beq	1e978 <__assert_fail@plt+0xd6d0>
   1e2c0:	mov	ip, #0
   1e2c4:	add	r5, sp, #48	; 0x30
   1e2c8:	str	r9, [r0]
   1e2cc:	mov	r1, r5
   1e2d0:	ldr	r0, [sp, #16]
   1e2d4:	str	ip, [sp, #40]	; 0x28
   1e2d8:	ldr	r2, [sp, #20]
   1e2dc:	ldr	r3, [sp, #120]	; 0x78
   1e2e0:	bl	1bb10 <__assert_fail@plt+0xa868>
   1e2e4:	cmp	r0, #0
   1e2e8:	str	r0, [sp, #40]	; 0x28
   1e2ec:	bne	1e7e4 <__assert_fail@plt+0xd53c>
   1e2f0:	ldr	r3, [sp, #52]	; 0x34
   1e2f4:	mov	r6, r7
   1e2f8:	cmp	r3, #0
   1e2fc:	beq	1e328 <__assert_fail@plt+0xd080>
   1e300:	mov	r2, r6
   1e304:	mov	r0, r4
   1e308:	ldr	r3, [sp, #20]
   1e30c:	ldr	r1, [sp, #120]	; 0x78
   1e310:	str	r1, [sp]
   1e314:	mov	r1, r5
   1e318:	bl	1c7f4 <__assert_fail@plt+0xb54c>
   1e31c:	cmp	r0, #0
   1e320:	str	r0, [sp, #40]	; 0x28
   1e324:	bne	1e7e4 <__assert_fail@plt+0xd53c>
   1e328:	mov	r3, r8
   1e32c:	mov	r2, r5
   1e330:	ldr	r1, [sp, #16]
   1e334:	add	r0, sp, #40	; 0x28
   1e338:	bl	1cd20 <__assert_fail@plt+0xba78>
   1e33c:	subs	fp, r0, #0
   1e340:	beq	1e980 <__assert_fail@plt+0xd6d8>
   1e344:	ldr	r3, [r4, #100]	; 0x64
   1e348:	str	fp, [r3, r6, lsl #2]
   1e34c:	ldr	r3, [sp, #116]	; 0x74
   1e350:	cmp	r6, r3
   1e354:	bge	1e5f4 <__assert_fail@plt+0xd34c>
   1e358:	ldr	r3, [r4, #120]	; 0x78
   1e35c:	cmp	r3, #0
   1e360:	blt	1e5f4 <__assert_fail@plt+0xd34c>
   1e364:	ldr	r3, [r4, #100]	; 0x64
   1e368:	mov	r2, #0
   1e36c:	add	r9, r6, #1
   1e370:	str	r2, [sp, #8]
   1e374:	ldr	r1, [r3, r9, lsl #2]
   1e378:	lsl	r3, r9, #2
   1e37c:	sub	r8, r9, #1
   1e380:	str	r3, [sp, #12]
   1e384:	mov	r3, #0
   1e388:	cmp	r1, r3
   1e38c:	str	r3, [sp, #52]	; 0x34
   1e390:	beq	1e7b4 <__assert_fail@plt+0xd50c>
   1e394:	add	r5, sp, #48	; 0x30
   1e398:	add	r1, r1, #4
   1e39c:	mov	r0, r5
   1e3a0:	bl	17d0c <__assert_fail@plt+0x6a64>
   1e3a4:	cmp	r0, #0
   1e3a8:	str	r0, [sp, #40]	; 0x28
   1e3ac:	bne	1e7e4 <__assert_fail@plt+0xd53c>
   1e3b0:	cmp	fp, #0
   1e3b4:	beq	1e53c <__assert_fail@plt+0xd294>
   1e3b8:	ldr	r3, [fp, #20]
   1e3bc:	mov	r2, #0
   1e3c0:	str	r2, [sp, #44]	; 0x2c
   1e3c4:	str	r2, [sp, #60]	; 0x3c
   1e3c8:	str	r2, [sp, #64]	; 0x40
   1e3cc:	cmp	r3, r2
   1e3d0:	str	r2, [sp, #68]	; 0x44
   1e3d4:	ldr	r7, [r4, #84]	; 0x54
   1e3d8:	ble	1e9b0 <__assert_fail@plt+0xd708>
   1e3dc:	str	r9, [sp, #24]
   1e3e0:	mov	r9, r2
   1e3e4:	ldr	r3, [fp, #24]
   1e3e8:	ldr	r0, [r7]
   1e3ec:	ldr	r5, [r3]
   1e3f0:	lsl	sl, r5, #3
   1e3f4:	add	r1, r0, sl
   1e3f8:	b	1e46c <__assert_fail@plt+0xd1c4>
   1e3fc:	mov	r2, r8
   1e400:	mov	r0, r4
   1e404:	bl	17fe8 <__assert_fail@plt+0x6d40>
   1e408:	cmp	r0, #0
   1e40c:	beq	1e448 <__assert_fail@plt+0xd1a0>
   1e410:	lsl	sl, r5, #2
   1e414:	ldr	r3, [sp, #48]	; 0x30
   1e418:	ldr	r2, [r7, #12]
   1e41c:	cmp	r3, #0
   1e420:	ldr	r5, [r2, sl]
   1e424:	beq	1e764 <__assert_fail@plt+0xd4bc>
   1e428:	ldr	r1, [sp, #52]	; 0x34
   1e42c:	ldr	r6, [sp, #56]	; 0x38
   1e430:	cmp	r1, #0
   1e434:	bne	1e80c <__assert_fail@plt+0xd564>
   1e438:	str	r5, [r6]
   1e43c:	ldr	r3, [sp, #52]	; 0x34
   1e440:	add	r3, r3, #1
   1e444:	str	r3, [sp, #52]	; 0x34
   1e448:	ldr	r3, [fp, #20]
   1e44c:	add	r9, r9, #1
   1e450:	cmp	r9, r3
   1e454:	bge	1e798 <__assert_fail@plt+0xd4f0>
   1e458:	ldr	r3, [fp, #24]
   1e45c:	ldr	r0, [r7]
   1e460:	ldr	r5, [r3, r9, lsl #2]
   1e464:	lsl	sl, r5, #3
   1e468:	add	r1, r0, sl
   1e46c:	ldrb	r3, [r1, #6]
   1e470:	tst	r3, #16
   1e474:	beq	1e3fc <__assert_fail@plt+0xd154>
   1e478:	mov	r3, r4
   1e47c:	mov	r2, r5
   1e480:	str	r8, [sp]
   1e484:	add	r1, r7, #128	; 0x80
   1e488:	bl	1aae4 <__assert_fail@plt+0x983c>
   1e48c:	cmp	r0, #1
   1e490:	ble	1e750 <__assert_fail@plt+0xd4a8>
   1e494:	ldr	r2, [r4, #100]	; 0x64
   1e498:	add	r6, r0, r8
   1e49c:	lsl	sl, r5, #2
   1e4a0:	ldr	r3, [r7, #12]
   1e4a4:	ldr	r1, [r2, r6, lsl #2]
   1e4a8:	ldr	r5, [r3, r5, lsl #2]
   1e4ac:	mov	r3, #0
   1e4b0:	str	r3, [sp, #64]	; 0x40
   1e4b4:	cmp	r1, r3
   1e4b8:	beq	1e4d4 <__assert_fail@plt+0xd22c>
   1e4bc:	add	r1, r1, #4
   1e4c0:	add	r0, sp, #60	; 0x3c
   1e4c4:	bl	17d0c <__assert_fail@plt+0x6a64>
   1e4c8:	cmp	r0, #0
   1e4cc:	str	r0, [sp, #44]	; 0x2c
   1e4d0:	bne	1e51c <__assert_fail@plt+0xd274>
   1e4d4:	mov	r1, r5
   1e4d8:	add	r0, sp, #60	; 0x3c
   1e4dc:	bl	17910 <__assert_fail@plt+0x6668>
   1e4e0:	cmp	r0, #0
   1e4e4:	beq	1e7d4 <__assert_fail@plt+0xd52c>
   1e4e8:	add	r2, sp, #60	; 0x3c
   1e4ec:	mov	r1, r7
   1e4f0:	ldr	r5, [r4, #100]	; 0x64
   1e4f4:	add	r0, sp, #44	; 0x2c
   1e4f8:	bl	1c520 <__assert_fail@plt+0xb278>
   1e4fc:	ldr	r3, [r4, #100]	; 0x64
   1e500:	str	r0, [r5, r6, lsl #2]
   1e504:	ldr	r3, [r3, r6, lsl #2]
   1e508:	cmp	r3, #0
   1e50c:	bne	1e414 <__assert_fail@plt+0xd16c>
   1e510:	ldr	r3, [sp, #44]	; 0x2c
   1e514:	cmp	r3, #0
   1e518:	beq	1e414 <__assert_fail@plt+0xd16c>
   1e51c:	ldr	r9, [sp, #24]
   1e520:	ldr	r0, [sp, #68]	; 0x44
   1e524:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1e528:	ldr	r3, [sp, #44]	; 0x2c
   1e52c:	cmp	r3, #0
   1e530:	str	r3, [sp, #40]	; 0x28
   1e534:	bne	1e7e4 <__assert_fail@plt+0xd53c>
   1e538:	add	r5, sp, #48	; 0x30
   1e53c:	ldr	r3, [sp, #52]	; 0x34
   1e540:	mov	r6, r9
   1e544:	cmp	r3, #0
   1e548:	beq	1e594 <__assert_fail@plt+0xd2ec>
   1e54c:	mov	r1, r5
   1e550:	ldr	r0, [sp, #16]
   1e554:	ldr	r2, [sp, #20]
   1e558:	ldr	r3, [sp, #120]	; 0x78
   1e55c:	bl	1bb10 <__assert_fail@plt+0xa868>
   1e560:	cmp	r0, #0
   1e564:	str	r0, [sp, #40]	; 0x28
   1e568:	bne	1e7e4 <__assert_fail@plt+0xd53c>
   1e56c:	mov	r2, r9
   1e570:	mov	r0, r4
   1e574:	ldr	r3, [sp, #20]
   1e578:	ldr	r1, [sp, #120]	; 0x78
   1e57c:	str	r1, [sp]
   1e580:	mov	r1, r5
   1e584:	bl	1c7f4 <__assert_fail@plt+0xb54c>
   1e588:	cmp	r0, #0
   1e58c:	str	r0, [sp, #40]	; 0x28
   1e590:	bne	1e7e4 <__assert_fail@plt+0xd53c>
   1e594:	mov	r1, r8
   1e598:	mov	r0, r4
   1e59c:	ldr	r2, [r4, #88]	; 0x58
   1e5a0:	bl	17ed0 <__assert_fail@plt+0x6c28>
   1e5a4:	mov	r3, r0
   1e5a8:	mov	r2, r5
   1e5ac:	ldr	r1, [sp, #16]
   1e5b0:	add	r0, sp, #40	; 0x28
   1e5b4:	bl	1cd20 <__assert_fail@plt+0xba78>
   1e5b8:	subs	fp, r0, #0
   1e5bc:	beq	1e88c <__assert_fail@plt+0xd5e4>
   1e5c0:	mov	r2, #0
   1e5c4:	ldr	r3, [r4, #100]	; 0x64
   1e5c8:	str	r2, [sp, #8]
   1e5cc:	ldr	r2, [sp, #12]
   1e5d0:	str	fp, [r3, r2]
   1e5d4:	ldr	r2, [sp, #116]	; 0x74
   1e5d8:	cmp	r2, r9
   1e5dc:	ble	1e5f4 <__assert_fail@plt+0xd34c>
   1e5e0:	ldr	r1, [sp, #8]
   1e5e4:	add	r9, r9, #1
   1e5e8:	ldr	r2, [r4, #120]	; 0x78
   1e5ec:	cmp	r2, r1
   1e5f0:	bge	1e374 <__assert_fail@plt+0xd0cc>
   1e5f4:	ldr	r0, [sp, #56]	; 0x38
   1e5f8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1e5fc:	ldr	r3, [r4, #100]	; 0x64
   1e600:	ldr	r2, [sp, #116]	; 0x74
   1e604:	ldr	r3, [r3, r2, lsl #2]
   1e608:	cmp	r3, #0
   1e60c:	beq	1e990 <__assert_fail@plt+0xd6e8>
   1e610:	ldr	r2, [sp, #28]
   1e614:	ldr	r1, [sp, #32]
   1e618:	str	r6, [r2]
   1e61c:	ldr	r2, [sp, #36]	; 0x24
   1e620:	str	r2, [r4, #40]	; 0x28
   1e624:	ldr	r2, [r3, #8]
   1e628:	str	r1, [r4, #100]	; 0x64
   1e62c:	cmp	r2, #0
   1e630:	ble	1e9b8 <__assert_fail@plt+0xd710>
   1e634:	subs	r2, r2, #1
   1e638:	ldr	ip, [r3, #12]
   1e63c:	moveq	r1, r2
   1e640:	beq	1e6a0 <__assert_fail@plt+0xd3f8>
   1e644:	ldr	lr, [sp, #112]	; 0x70
   1e648:	mov	r1, #0
   1e64c:	add	r3, r1, r2
   1e650:	lsr	r3, r3, #1
   1e654:	ldr	r0, [ip, r3, lsl #2]
   1e658:	cmp	r0, lr
   1e65c:	blt	1e968 <__assert_fail@plt+0xd6c0>
   1e660:	cmp	r3, r1
   1e664:	bls	1e6a0 <__assert_fail@plt+0xd3f8>
   1e668:	add	r2, r3, r1
   1e66c:	lsr	r2, r2, #1
   1e670:	ldr	r0, [ip, r2, lsl #2]
   1e674:	cmp	lr, r0
   1e678:	ble	1e690 <__assert_fail@plt+0xd3e8>
   1e67c:	b	1e95c <__assert_fail@plt+0xd6b4>
   1e680:	ldr	r0, [ip, r3, lsl #2]
   1e684:	cmp	lr, r0
   1e688:	bgt	1e968 <__assert_fail@plt+0xd6c0>
   1e68c:	mov	r2, r3
   1e690:	add	r3, r2, r1
   1e694:	cmp	r2, r1
   1e698:	lsr	r3, r3, #1
   1e69c:	bhi	1e680 <__assert_fail@plt+0xd3d8>
   1e6a0:	ldr	r0, [ip, r1, lsl #2]
   1e6a4:	ldr	r3, [sp, #112]	; 0x70
   1e6a8:	subs	r0, r0, r3
   1e6ac:	movne	r0, #1
   1e6b0:	b	1e7f0 <__assert_fail@plt+0xd548>
   1e6b4:	sub	r1, r6, #1
   1e6b8:	mov	r0, r4
   1e6bc:	str	r6, [r4, #40]	; 0x28
   1e6c0:	str	r5, [r4, #100]	; 0x64
   1e6c4:	bl	17ed0 <__assert_fail@plt+0x6c28>
   1e6c8:	cmp	r6, r7
   1e6cc:	mov	r8, r0
   1e6d0:	beq	1e2a0 <__assert_fail@plt+0xcff8>
   1e6d4:	ldr	fp, [r5, r6, lsl #2]
   1e6d8:	cmp	fp, #0
   1e6dc:	beq	1e8f8 <__assert_fail@plt+0xd650>
   1e6e0:	ldrb	r3, [fp, #52]	; 0x34
   1e6e4:	ands	r3, r3, #64	; 0x40
   1e6e8:	streq	r3, [sp, #48]	; 0x30
   1e6ec:	streq	r3, [sp, #52]	; 0x34
   1e6f0:	streq	r3, [sp, #56]	; 0x38
   1e6f4:	beq	1e34c <__assert_fail@plt+0xd0a4>
   1e6f8:	ldr	r3, [fp, #8]
   1e6fc:	cmp	r3, #0
   1e700:	str	r3, [sp, #52]	; 0x34
   1e704:	ble	1e8b4 <__assert_fail@plt+0xd60c>
   1e708:	lsl	r0, r3, #2
   1e70c:	str	r3, [sp, #48]	; 0x30
   1e710:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1e714:	cmp	r0, #0
   1e718:	str	r0, [sp, #56]	; 0x38
   1e71c:	beq	1e978 <__assert_fail@plt+0xd6d0>
   1e720:	ldr	r2, [fp, #8]
   1e724:	ldr	r1, [fp, #12]
   1e728:	lsl	r2, r2, #2
   1e72c:	bl	11038 <memcpy@plt>
   1e730:	ldrb	r3, [fp, #52]	; 0x34
   1e734:	mov	r2, #0
   1e738:	str	r2, [sp, #40]	; 0x28
   1e73c:	tst	r3, #64	; 0x40
   1e740:	beq	1e34c <__assert_fail@plt+0xd0a4>
   1e744:	add	r5, sp, #48	; 0x30
   1e748:	ldr	r3, [sp, #52]	; 0x34
   1e74c:	b	1e2f8 <__assert_fail@plt+0xd050>
   1e750:	cmp	r0, #0
   1e754:	bne	1e410 <__assert_fail@plt+0xd168>
   1e758:	ldr	r0, [r7]
   1e75c:	add	r1, r0, sl
   1e760:	b	1e3fc <__assert_fail@plt+0xd154>
   1e764:	mov	r2, #1
   1e768:	mov	r3, #1
   1e76c:	mov	r0, #4
   1e770:	strd	r2, [sp, #48]	; 0x30
   1e774:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1e778:	cmp	r0, #0
   1e77c:	str	r0, [sp, #56]	; 0x38
   1e780:	beq	1e7c8 <__assert_fail@plt+0xd520>
   1e784:	str	r5, [r0]
   1e788:	add	r9, r9, #1
   1e78c:	ldr	r3, [fp, #20]
   1e790:	cmp	r9, r3
   1e794:	blt	1e458 <__assert_fail@plt+0xd1b0>
   1e798:	ldr	r9, [sp, #24]
   1e79c:	ldr	r0, [sp, #68]	; 0x44
   1e7a0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1e7a4:	mov	r3, #0
   1e7a8:	add	r5, sp, #48	; 0x30
   1e7ac:	str	r3, [sp, #40]	; 0x28
   1e7b0:	b	1e53c <__assert_fail@plt+0xd294>
   1e7b4:	cmp	fp, #0
   1e7b8:	bne	1e3b8 <__assert_fail@plt+0xd110>
   1e7bc:	mov	r6, r9
   1e7c0:	add	r5, sp, #48	; 0x30
   1e7c4:	b	1e594 <__assert_fail@plt+0xd2ec>
   1e7c8:	mov	r2, #0
   1e7cc:	mov	r3, #0
   1e7d0:	strd	r2, [sp, #48]	; 0x30
   1e7d4:	ldr	r0, [sp, #68]	; 0x44
   1e7d8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1e7dc:	mov	r3, #12
   1e7e0:	str	r3, [sp, #40]	; 0x28
   1e7e4:	ldr	r0, [sp, #56]	; 0x38
   1e7e8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1e7ec:	ldr	r0, [sp, #40]	; 0x28
   1e7f0:	add	sp, sp, #76	; 0x4c
   1e7f4:	ldrd	r4, [sp]
   1e7f8:	ldrd	r6, [sp, #8]
   1e7fc:	ldrd	r8, [sp, #16]
   1e800:	ldrd	sl, [sp, #24]
   1e804:	add	sp, sp, #32
   1e808:	pop	{pc}		; (ldr pc, [sp], #4)
   1e80c:	cmp	r3, r1
   1e810:	beq	1e8d0 <__assert_fail@plt+0xd628>
   1e814:	ldr	r3, [r6]
   1e818:	mov	r2, r1
   1e81c:	cmp	r5, r3
   1e820:	bge	1e854 <__assert_fail@plt+0xd5ac>
   1e824:	cmp	r1, #0
   1e828:	ble	1e840 <__assert_fail@plt+0xd598>
   1e82c:	lsl	r2, r1, #2
   1e830:	add	r0, r6, #4
   1e834:	mov	r1, r6
   1e838:	bl	11008 <memmove@plt>
   1e83c:	mov	r2, #0
   1e840:	str	r5, [r6, r2, lsl #2]
   1e844:	ldr	r3, [sp, #52]	; 0x34
   1e848:	add	r3, r3, #1
   1e84c:	str	r3, [sp, #52]	; 0x34
   1e850:	b	1e448 <__assert_fail@plt+0xd1a0>
   1e854:	sub	r3, r1, #-1073741823	; 0xc0000001
   1e858:	ldr	r0, [r6, r3, lsl #2]
   1e85c:	lsl	r3, r3, #2
   1e860:	cmp	r0, r5
   1e864:	ble	1e840 <__assert_fail@plt+0xd598>
   1e868:	add	r3, r3, #4
   1e86c:	add	r3, r6, r3
   1e870:	str	r0, [r3], #-4
   1e874:	sub	r1, r1, #1
   1e878:	ldr	r0, [r3, #-4]
   1e87c:	mov	r2, r1
   1e880:	cmp	r5, r0
   1e884:	blt	1e870 <__assert_fail@plt+0xd5c8>
   1e888:	b	1e840 <__assert_fail@plt+0xd598>
   1e88c:	ldr	r3, [sp, #40]	; 0x28
   1e890:	cmp	r3, #0
   1e894:	bne	1e7e4 <__assert_fail@plt+0xd53c>
   1e898:	ldr	r2, [sp, #8]
   1e89c:	ldr	r3, [r4, #100]	; 0x64
   1e8a0:	add	r2, r2, #1
   1e8a4:	str	r2, [sp, #8]
   1e8a8:	ldr	r2, [sp, #12]
   1e8ac:	str	fp, [r3, r2]
   1e8b0:	b	1e5d4 <__assert_fail@plt+0xd32c>
   1e8b4:	mov	r3, #0
   1e8b8:	add	r5, sp, #48	; 0x30
   1e8bc:	str	r3, [sp, #40]	; 0x28
   1e8c0:	str	r3, [sp, #48]	; 0x30
   1e8c4:	str	r3, [r5, #4]
   1e8c8:	str	r3, [r5, #8]
   1e8cc:	b	1e328 <__assert_fail@plt+0xd080>
   1e8d0:	lsl	r3, r1, #1
   1e8d4:	mov	r0, r6
   1e8d8:	lsl	r1, r1, #3
   1e8dc:	str	r3, [sp, #48]	; 0x30
   1e8e0:	bl	2ab84 <__assert_fail@plt+0x198dc>
   1e8e4:	subs	r6, r0, #0
   1e8e8:	beq	1e7d4 <__assert_fail@plt+0xd52c>
   1e8ec:	str	r6, [sp, #56]	; 0x38
   1e8f0:	ldr	r1, [sp, #52]	; 0x34
   1e8f4:	b	1e814 <__assert_fail@plt+0xd56c>
   1e8f8:	str	fp, [sp, #48]	; 0x30
   1e8fc:	str	fp, [sp, #52]	; 0x34
   1e900:	str	fp, [sp, #56]	; 0x38
   1e904:	b	1e34c <__assert_fail@plt+0xd0a4>
   1e908:	mvn	r3, #-2147483648	; 0x80000000
   1e90c:	add	sl, r2, #1
   1e910:	sub	r3, r3, r5
   1e914:	cmp	r3, sl
   1e918:	blt	1e978 <__assert_fail@plt+0xd6d0>
   1e91c:	add	r8, r5, sl
   1e920:	cmn	r8, #-1073741823	; 0xc0000001
   1e924:	bhi	1e978 <__assert_fail@plt+0xd6d0>
   1e928:	ldr	fp, [sp, #28]
   1e92c:	lsl	r1, r8, #2
   1e930:	ldr	r0, [fp, #8]
   1e934:	bl	2ab84 <__assert_fail@plt+0x198dc>
   1e938:	subs	r3, r0, #0
   1e93c:	beq	1e978 <__assert_fail@plt+0xd6d0>
   1e940:	lsl	r2, sl, #2
   1e944:	mov	r1, r6
   1e948:	str	r8, [fp, #4]
   1e94c:	add	r0, r3, r5, lsl #2
   1e950:	str	r3, [fp, #8]
   1e954:	bl	111c4 <memset@plt>
   1e958:	b	1e260 <__assert_fail@plt+0xcfb8>
   1e95c:	mov	r1, r2
   1e960:	mov	r2, r3
   1e964:	mov	r3, r1
   1e968:	add	r1, r3, #1
   1e96c:	cmp	r1, r2
   1e970:	bcc	1e64c <__assert_fail@plt+0xd3a4>
   1e974:	b	1e6a0 <__assert_fail@plt+0xd3f8>
   1e978:	mov	r0, #12
   1e97c:	b	1e7f0 <__assert_fail@plt+0xd548>
   1e980:	ldr	r3, [sp, #40]	; 0x28
   1e984:	cmp	r3, #0
   1e988:	beq	1e344 <__assert_fail@plt+0xd09c>
   1e98c:	b	1e7e4 <__assert_fail@plt+0xd53c>
   1e990:	ldr	r3, [sp, #28]
   1e994:	mov	r0, #1
   1e998:	str	r6, [r3]
   1e99c:	ldr	r3, [sp, #36]	; 0x24
   1e9a0:	str	r3, [r4, #40]	; 0x28
   1e9a4:	ldr	r3, [sp, #32]
   1e9a8:	str	r3, [r4, #100]	; 0x64
   1e9ac:	b	1e7f0 <__assert_fail@plt+0xd548>
   1e9b0:	mov	r0, #0
   1e9b4:	b	1e7a0 <__assert_fail@plt+0xd4f8>
   1e9b8:	mov	r0, #1
   1e9bc:	b	1e7f0 <__assert_fail@plt+0xd548>
   1e9c0:	mov	ip, r2
   1e9c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e9c8:	mov	r4, r0
   1e9cc:	strd	r6, [sp, #8]
   1e9d0:	mov	r6, r2
   1e9d4:	mov	r7, r3
   1e9d8:	strd	r8, [sp, #16]
   1e9dc:	mov	r3, #8
   1e9e0:	mov	r8, r1
   1e9e4:	strd	sl, [sp, #24]
   1e9e8:	str	lr, [sp, #32]
   1e9ec:	sub	sp, sp, #20
   1e9f0:	ldr	r2, [ip], #8
   1e9f4:	str	r7, [sp]
   1e9f8:	ldr	r5, [sp, #56]	; 0x38
   1e9fc:	mov	r1, ip
   1ea00:	str	r5, [sp, #4]
   1ea04:	str	r3, [sp, #8]
   1ea08:	ldr	r3, [r6, #4]
   1ea0c:	bl	1e204 <__assert_fail@plt+0xcf5c>
   1ea10:	subs	fp, r0, #0
   1ea14:	beq	1ea38 <__assert_fail@plt+0xd790>
   1ea18:	mov	r0, fp
   1ea1c:	add	sp, sp, #20
   1ea20:	ldrd	r4, [sp]
   1ea24:	ldrd	r6, [sp, #8]
   1ea28:	ldrd	r8, [sp, #16]
   1ea2c:	ldrd	sl, [sp, #24]
   1ea30:	add	sp, sp, #32
   1ea34:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea38:	ldr	r3, [r4, #108]	; 0x6c
   1ea3c:	ldr	r1, [r4, #112]	; 0x70
   1ea40:	ldr	r9, [r6, #4]
   1ea44:	ldr	sl, [r8]
   1ea48:	cmp	r3, r1
   1ea4c:	ldr	r0, [r4, #116]	; 0x74
   1ea50:	movlt	lr, r9
   1ea54:	bge	1eaf0 <__assert_fail@plt+0xd848>
   1ea58:	add	r2, r3, r3, lsl #1
   1ea5c:	cmp	r3, #0
   1ea60:	lsl	r2, r2, #3
   1ea64:	ble	1ea80 <__assert_fail@plt+0xd7d8>
   1ea68:	sub	r1, r2, #24
   1ea6c:	add	r1, r0, r1
   1ea70:	ldr	ip, [r1, #4]
   1ea74:	cmp	r5, ip
   1ea78:	moveq	ip, #1
   1ea7c:	strbeq	ip, [r1, #20]
   1ea80:	cmp	sl, r9
   1ea84:	add	ip, r0, r2
   1ea88:	str	r7, [r0, r2]
   1ea8c:	add	r3, r3, #1
   1ea90:	movne	r0, #0
   1ea94:	mvneq	r0, #0
   1ea98:	mov	r1, #0
   1ea9c:	stmib	ip, {r5, sl}
   1eaa0:	str	r9, [ip, #12]
   1eaa4:	sub	r2, r9, sl
   1eaa8:	add	r5, r5, lr
   1eaac:	str	r0, [ip, #16]
   1eab0:	mov	r0, r4
   1eab4:	str	r3, [r4, #108]	; 0x6c
   1eab8:	strb	r1, [ip, #20]
   1eabc:	ldr	r3, [r4, #120]	; 0x78
   1eac0:	cmp	r3, r2
   1eac4:	strlt	r2, [r4, #120]	; 0x78
   1eac8:	ldr	r1, [r8]
   1eacc:	sub	r1, r5, r1
   1ead0:	add	sp, sp, #20
   1ead4:	ldrd	r4, [sp]
   1ead8:	ldrd	r6, [sp, #8]
   1eadc:	ldrd	r8, [sp, #16]
   1eae0:	ldrd	sl, [sp, #24]
   1eae4:	ldr	lr, [sp, #32]
   1eae8:	add	sp, sp, #36	; 0x24
   1eaec:	b	1b7c0 <__assert_fail@plt+0xa518>
   1eaf0:	add	r1, r1, r1, lsl #1
   1eaf4:	lsl	r1, r1, #4
   1eaf8:	bl	2ab84 <__assert_fail@plt+0x198dc>
   1eafc:	cmp	r0, #0
   1eb00:	beq	1eb44 <__assert_fail@plt+0xd89c>
   1eb04:	ldr	r3, [r4, #108]	; 0x6c
   1eb08:	mov	r1, fp
   1eb0c:	str	r0, [r4, #116]	; 0x74
   1eb10:	ldr	r2, [r4, #112]	; 0x70
   1eb14:	add	r3, r3, r3, lsl #1
   1eb18:	add	r2, r2, r2, lsl #1
   1eb1c:	add	r0, r0, r3, lsl #3
   1eb20:	lsl	r2, r2, #3
   1eb24:	bl	111c4 <memset@plt>
   1eb28:	ldr	lr, [r6, #4]
   1eb2c:	ldr	r2, [r4, #112]	; 0x70
   1eb30:	ldr	r3, [r4, #108]	; 0x6c
   1eb34:	ldr	r0, [r4, #116]	; 0x74
   1eb38:	lsl	r2, r2, #1
   1eb3c:	str	r2, [r4, #112]	; 0x70
   1eb40:	b	1ea58 <__assert_fail@plt+0xd7b0>
   1eb44:	ldr	r0, [r4, #116]	; 0x74
   1eb48:	mov	fp, #12
   1eb4c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1eb50:	b	1ea18 <__assert_fail@plt+0xd770>
   1eb54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1eb58:	ldr	r4, [r2, #4]
   1eb5c:	ldrb	ip, [r1, #28]
   1eb60:	ldr	r5, [r1]
   1eb64:	adds	r3, r4, #0
   1eb68:	strd	r6, [sp, #8]
   1eb6c:	movne	r3, #1
   1eb70:	strd	r8, [sp, #16]
   1eb74:	ands	r3, r3, ip, lsr #4
   1eb78:	strd	sl, [sp, #24]
   1eb7c:	str	lr, [sp, #32]
   1eb80:	sub	sp, sp, #20
   1eb84:	bne	1edfc <__assert_fail@plt+0xdb54>
   1eb88:	mov	sl, r2
   1eb8c:	ldr	r2, [r5, #64]	; 0x40
   1eb90:	mov	r6, #0
   1eb94:	mov	r7, #0
   1eb98:	mov	r1, r0
   1eb9c:	strd	r6, [sp, #8]
   1eba0:	cmp	r2, #31
   1eba4:	beq	1ee2c <__assert_fail@plt+0xdb84>
   1eba8:	ldr	r0, [r5, #56]	; 0x38
   1ebac:	lsl	r3, r2, #5
   1ebb0:	add	r2, r2, #1
   1ebb4:	add	r8, r3, #4
   1ebb8:	mov	lr, #8
   1ebbc:	add	ip, r0, r3
   1ebc0:	str	r2, [r5, #64]	; 0x40
   1ebc4:	add	r3, r3, #16
   1ebc8:	add	r8, r0, r8
   1ebcc:	strb	lr, [sp, #12]
   1ebd0:	add	r0, r0, r3
   1ebd4:	mov	lr, #0
   1ebd8:	ldrd	r2, [sp, #8]
   1ebdc:	mvn	r6, #0
   1ebe0:	str	lr, [ip, #4]
   1ebe4:	str	lr, [ip, #8]
   1ebe8:	str	lr, [ip, #12]
   1ebec:	strd	r2, [ip, #24]
   1ebf0:	ldrb	r3, [r0, #14]
   1ebf4:	bic	r3, r3, #12
   1ebf8:	strb	r3, [r0, #14]
   1ebfc:	str	lr, [ip, #16]
   1ec00:	str	lr, [ip, #20]
   1ec04:	str	r6, [ip, #32]
   1ec08:	ldr	r0, [r5, #64]	; 0x40
   1ec0c:	mov	r2, #0
   1ec10:	mov	r3, #0
   1ec14:	strd	r2, [sp, #8]
   1ec18:	cmp	r0, #31
   1ec1c:	beq	1ee60 <__assert_fail@plt+0xdbb8>
   1ec20:	lsl	r3, r0, #5
   1ec24:	add	r2, r0, #1
   1ec28:	ldr	r0, [r5, #56]	; 0x38
   1ec2c:	add	r9, r3, #4
   1ec30:	mov	lr, #9
   1ec34:	add	ip, r0, r3
   1ec38:	str	r2, [r5, #64]	; 0x40
   1ec3c:	add	r3, r3, #16
   1ec40:	add	r9, r0, r9
   1ec44:	strb	lr, [sp, #12]
   1ec48:	add	r0, r0, r3
   1ec4c:	mov	lr, #0
   1ec50:	ldrd	r2, [sp, #8]
   1ec54:	mvn	r6, #0
   1ec58:	str	lr, [ip, #4]
   1ec5c:	str	lr, [ip, #8]
   1ec60:	str	lr, [ip, #12]
   1ec64:	strd	r2, [ip, #24]
   1ec68:	ldrb	r3, [r0, #14]
   1ec6c:	bic	r3, r3, #12
   1ec70:	strb	r3, [r0, #14]
   1ec74:	str	lr, [ip, #16]
   1ec78:	str	lr, [ip, #20]
   1ec7c:	str	r6, [ip, #32]
   1ec80:	cmp	r4, #0
   1ec84:	ldr	r0, [r5, #64]	; 0x40
   1ec88:	moveq	fp, r9
   1ec8c:	beq	1ed14 <__assert_fail@plt+0xda6c>
   1ec90:	mov	r2, #0
   1ec94:	mov	r3, #0
   1ec98:	cmp	r0, #31
   1ec9c:	strd	r2, [sp, #8]
   1eca0:	beq	1eec8 <__assert_fail@plt+0xdc20>
   1eca4:	ldr	r2, [r5, #56]	; 0x38
   1eca8:	lsl	r3, r0, #5
   1ecac:	add	r0, r0, #1
   1ecb0:	add	fp, r3, #4
   1ecb4:	mov	lr, #16
   1ecb8:	str	r0, [r5, #64]	; 0x40
   1ecbc:	add	ip, r2, r3
   1ecc0:	add	r0, r3, lr
   1ecc4:	add	fp, r2, fp
   1ecc8:	strb	lr, [sp, #12]
   1eccc:	add	r0, r2, r0
   1ecd0:	mov	lr, #0
   1ecd4:	ldrd	r2, [sp, #8]
   1ecd8:	mvn	r6, #0
   1ecdc:	cmp	r9, lr
   1ece0:	str	lr, [ip, #4]
   1ece4:	str	r4, [ip, #8]
   1ece8:	str	r9, [ip, #12]
   1ecec:	strd	r2, [ip, #24]
   1ecf0:	ldrb	r3, [r0, #14]
   1ecf4:	bic	r3, r3, #12
   1ecf8:	strb	r3, [r0, #14]
   1ecfc:	str	lr, [ip, #16]
   1ed00:	str	lr, [ip, #20]
   1ed04:	str	r6, [ip, #32]
   1ed08:	str	fp, [r4]
   1ed0c:	strne	fp, [r9]
   1ed10:	ldr	r0, [r5, #64]	; 0x40
   1ed14:	mov	r2, #0
   1ed18:	mov	r3, #0
   1ed1c:	cmp	r0, #31
   1ed20:	strd	r2, [sp, #8]
   1ed24:	beq	1ee94 <__assert_fail@plt+0xdbec>
   1ed28:	ldr	r4, [r5, #56]	; 0x38
   1ed2c:	lsl	r3, r0, #5
   1ed30:	add	r0, r0, #1
   1ed34:	add	r2, r3, #4
   1ed38:	mov	ip, #16
   1ed3c:	str	r0, [r5, #64]	; 0x40
   1ed40:	add	r0, r4, r3
   1ed44:	add	r3, r3, ip
   1ed48:	cmp	r8, #0
   1ed4c:	strb	ip, [sp, #12]
   1ed50:	mov	ip, #0
   1ed54:	add	r3, r4, r3
   1ed58:	ldrd	r6, [sp, #8]
   1ed5c:	add	r4, r4, r2
   1ed60:	mvn	lr, #0
   1ed64:	str	ip, [r0, #4]
   1ed68:	str	r8, [r0, #8]
   1ed6c:	str	fp, [r0, #12]
   1ed70:	strd	r6, [r0, #24]
   1ed74:	ldrb	r2, [r3, #14]
   1ed78:	bic	r2, r2, #12
   1ed7c:	strb	r2, [r3, #14]
   1ed80:	str	ip, [r0, #16]
   1ed84:	str	ip, [r0, #20]
   1ed88:	str	lr, [r0, #32]
   1ed8c:	strne	r4, [r8]
   1ed90:	cmp	fp, #0
   1ed94:	beq	1ee1c <__assert_fail@plt+0xdb74>
   1ed98:	cmp	r4, #0
   1ed9c:	str	r4, [fp]
   1eda0:	beq	1ee1c <__assert_fail@plt+0xdb74>
   1eda4:	cmp	r9, #0
   1eda8:	cmpne	r8, #0
   1edac:	beq	1ee1c <__assert_fail@plt+0xdb74>
   1edb0:	ldr	r2, [sl, #20]
   1edb4:	ldrb	r3, [sl, #26]
   1edb8:	str	r2, [r9, #20]
   1edbc:	str	r2, [r8, #20]
   1edc0:	ldrb	r2, [r9, #26]
   1edc4:	ubfx	r3, r3, #3, #1
   1edc8:	bfi	r2, r3, #3, #1
   1edcc:	strb	r2, [r9, #26]
   1edd0:	ldrb	r2, [r8, #26]
   1edd4:	bfi	r2, r3, #3, #1
   1edd8:	strb	r2, [r8, #26]
   1eddc:	mov	r0, r4
   1ede0:	add	sp, sp, #20
   1ede4:	ldrd	r4, [sp]
   1ede8:	ldrd	r6, [sp, #8]
   1edec:	ldrd	r8, [sp, #16]
   1edf0:	ldrd	sl, [sp, #24]
   1edf4:	add	sp, sp, #32
   1edf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1edfc:	ldr	r3, [r2, #20]
   1ee00:	cmp	r3, #31
   1ee04:	bgt	1eddc <__assert_fail@plt+0xdb34>
   1ee08:	ldr	r1, [r5, #80]	; 0x50
   1ee0c:	lsr	r3, r1, r3
   1ee10:	tst	r3, #1
   1ee14:	bne	1eb88 <__assert_fail@plt+0xd8e0>
   1ee18:	b	1eddc <__assert_fail@plt+0xdb34>
   1ee1c:	mov	r3, #12
   1ee20:	mov	r4, #0
   1ee24:	str	r3, [r1]
   1ee28:	b	1eddc <__assert_fail@plt+0xdb34>
   1ee2c:	mov	r0, #996	; 0x3e4
   1ee30:	str	r1, [sp, #4]
   1ee34:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1ee38:	cmp	r0, #0
   1ee3c:	ldr	r1, [sp, #4]
   1ee40:	beq	1ef04 <__assert_fail@plt+0xdc5c>
   1ee44:	ldr	ip, [r5, #56]	; 0x38
   1ee48:	mov	r2, #1
   1ee4c:	mov	r8, #4
   1ee50:	mov	r3, #0
   1ee54:	str	ip, [r0]
   1ee58:	str	r0, [r5, #56]	; 0x38
   1ee5c:	b	1ebb8 <__assert_fail@plt+0xd910>
   1ee60:	mov	r0, #996	; 0x3e4
   1ee64:	str	r1, [sp, #4]
   1ee68:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1ee6c:	cmp	r0, #0
   1ee70:	ldr	r1, [sp, #4]
   1ee74:	beq	1eefc <__assert_fail@plt+0xdc54>
   1ee78:	ldr	ip, [r5, #56]	; 0x38
   1ee7c:	mov	r2, #1
   1ee80:	mov	r9, #4
   1ee84:	mov	r3, #0
   1ee88:	str	ip, [r0]
   1ee8c:	str	r0, [r5, #56]	; 0x38
   1ee90:	b	1ec30 <__assert_fail@plt+0xd988>
   1ee94:	mov	r0, #996	; 0x3e4
   1ee98:	str	r1, [sp, #4]
   1ee9c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1eea0:	subs	r4, r0, #0
   1eea4:	ldr	r1, [sp, #4]
   1eea8:	beq	1ee1c <__assert_fail@plt+0xdb74>
   1eeac:	ldr	ip, [r5, #56]	; 0x38
   1eeb0:	mov	r0, #1
   1eeb4:	mov	r2, #4
   1eeb8:	mov	r3, #0
   1eebc:	str	ip, [r4]
   1eec0:	str	r4, [r5, #56]	; 0x38
   1eec4:	b	1ed38 <__assert_fail@plt+0xda90>
   1eec8:	mov	r0, #996	; 0x3e4
   1eecc:	str	r1, [sp, #4]
   1eed0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1eed4:	subs	r2, r0, #0
   1eed8:	ldr	r1, [sp, #4]
   1eedc:	beq	1ef0c <__assert_fail@plt+0xdc64>
   1eee0:	ldr	ip, [r5, #56]	; 0x38
   1eee4:	mov	fp, #4
   1eee8:	mov	r0, #1
   1eeec:	mov	r3, #0
   1eef0:	str	ip, [r2]
   1eef4:	str	r2, [r5, #56]	; 0x38
   1eef8:	b	1ecb4 <__assert_fail@plt+0xda0c>
   1eefc:	mov	r9, r0
   1ef00:	b	1ec80 <__assert_fail@plt+0xd9d8>
   1ef04:	mov	r8, r0
   1ef08:	b	1ec08 <__assert_fail@plt+0xd960>
   1ef0c:	mov	fp, r2
   1ef10:	b	1ed10 <__assert_fail@plt+0xda68>
   1ef14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ef18:	mov	r5, r0
   1ef1c:	mov	r0, #32
   1ef20:	strd	r6, [sp, #8]
   1ef24:	mov	r7, r3
   1ef28:	strd	r8, [sp, #16]
   1ef2c:	mov	r9, #0
   1ef30:	strd	sl, [sp, #24]
   1ef34:	mov	fp, r1
   1ef38:	mov	r1, #1
   1ef3c:	str	lr, [sp, #32]
   1ef40:	sub	sp, sp, #44	; 0x2c
   1ef44:	mov	sl, r2
   1ef48:	ldrb	r8, [sp, #80]	; 0x50
   1ef4c:	str	r9, [sp, #20]
   1ef50:	bl	2aad4 <__assert_fail@plt+0x1982c>
   1ef54:	subs	r4, r0, #0
   1ef58:	beq	1f314 <__assert_fail@plt+0xe06c>
   1ef5c:	mov	r1, #1
   1ef60:	mov	r0, #40	; 0x28
   1ef64:	bl	2aad4 <__assert_fail@plt+0x1982c>
   1ef68:	subs	r6, r0, #0
   1ef6c:	beq	1f354 <__assert_fail@plt+0xe0ac>
   1ef70:	ldrb	ip, [r6, #16]
   1ef74:	add	lr, sp, #20
   1ef78:	mov	r0, fp
   1ef7c:	add	r3, r6, #36	; 0x24
   1ef80:	add	r2, r6, #12
   1ef84:	mov	r1, r4
   1ef88:	bfi	ip, r8, #0, #1
   1ef8c:	strb	ip, [r6, #16]
   1ef90:	str	lr, [sp]
   1ef94:	str	sl, [sp, #4]
   1ef98:	str	r9, [sp, #8]
   1ef9c:	bl	18e74 <__assert_fail@plt+0x7bcc>
   1efa0:	subs	sl, r0, #0
   1efa4:	bne	1f3f4 <__assert_fail@plt+0xe14c>
   1efa8:	ldrb	r3, [r7]
   1efac:	cmp	r3, #0
   1efb0:	beq	1efd8 <__assert_fail@plt+0xdd30>
   1efb4:	mov	ip, #1
   1efb8:	asr	r1, r3, #5
   1efbc:	and	r0, r3, #31
   1efc0:	ldrb	r3, [r7, #1]!
   1efc4:	ldr	r2, [r4, r1, lsl #2]
   1efc8:	cmp	r3, #0
   1efcc:	orr	r2, r2, ip, lsl r0
   1efd0:	str	r2, [r4, r1, lsl #2]
   1efd4:	bne	1efb8 <__assert_fail@plt+0xdd10>
   1efd8:	cmp	r8, #0
   1efdc:	beq	1f070 <__assert_fail@plt+0xddc8>
   1efe0:	ubfx	r1, r4, #2, #1
   1efe4:	cmp	r1, #0
   1efe8:	moveq	r3, r1
   1efec:	beq	1f000 <__assert_fail@plt+0xdd58>
   1eff0:	ldr	r2, [r4]
   1eff4:	mov	r3, #1
   1eff8:	mvn	r2, r2
   1effc:	str	r2, [r4]
   1f000:	ldr	ip, [r4, r1, lsl #2]
   1f004:	rsb	lr, r1, #8
   1f008:	add	r2, r4, r1, lsl #2
   1f00c:	lsr	lr, lr, #1
   1f010:	ldr	r0, [r2, #4]
   1f014:	cmp	lr, #4
   1f018:	mvn	ip, ip
   1f01c:	str	ip, [r4, r1, lsl #2]
   1f020:	mvn	r1, r0
   1f024:	ldr	lr, [r2, #8]
   1f028:	ldr	ip, [r2, #12]
   1f02c:	ldr	r0, [r2, #16]
   1f030:	mvn	lr, lr
   1f034:	stmib	r2, {r1, lr}
   1f038:	mvn	ip, ip
   1f03c:	ldr	r1, [r2, #20]
   1f040:	mvn	r0, r0
   1f044:	str	ip, [r2, #12]
   1f048:	str	r0, [r2, #16]
   1f04c:	mvn	r1, r1
   1f050:	str	r1, [r2, #20]
   1f054:	bne	1f2c0 <__assert_fail@plt+0xe018>
   1f058:	ldr	r1, [r2, #24]
   1f05c:	ldr	r3, [r2, #28]
   1f060:	mvn	r1, r1
   1f064:	mvn	r3, r3
   1f068:	str	r1, [r2, #24]
   1f06c:	str	r3, [r2, #28]
   1f070:	ldr	r3, [r5, #92]	; 0x5c
   1f074:	cmp	r3, #1
   1f078:	ble	1f120 <__assert_fail@plt+0xde78>
   1f07c:	ldr	r3, [r5, #60]	; 0x3c
   1f080:	add	r2, r4, #8
   1f084:	add	r0, r3, #8
   1f088:	orr	r1, r3, r4
   1f08c:	cmp	r4, r0
   1f090:	cmpcc	r3, r2
   1f094:	movcs	r2, #1
   1f098:	movcc	r2, #0
   1f09c:	tst	r1, #7
   1f0a0:	movne	r2, #0
   1f0a4:	cmp	r2, #0
   1f0a8:	beq	1f370 <__assert_fail@plt+0xe0c8>
   1f0ac:	ldr	ip, [r3]
   1f0b0:	ldr	r1, [r4]
   1f0b4:	ldr	r2, [r3, #4]
   1f0b8:	ldr	r0, [r4, #4]
   1f0bc:	and	r1, r1, ip
   1f0c0:	ldr	ip, [r4, #8]
   1f0c4:	ldr	lr, [r4, #12]
   1f0c8:	and	r2, r2, r0
   1f0cc:	stm	r4, {r1, r2}
   1f0d0:	ldrd	r0, [r3, #8]
   1f0d4:	and	r0, r0, ip
   1f0d8:	and	r1, r1, lr
   1f0dc:	ldr	ip, [r4, #16]
   1f0e0:	strd	r0, [r4, #8]
   1f0e4:	ldr	r2, [r3, #16]
   1f0e8:	ldr	r0, [r3, #20]
   1f0ec:	ldr	lr, [r4, #20]
   1f0f0:	and	r2, r2, ip
   1f0f4:	ldr	ip, [r4, #24]
   1f0f8:	str	r2, [r4, #16]
   1f0fc:	ldr	r2, [r4, #28]
   1f100:	and	r0, r0, lr
   1f104:	str	r0, [r4, #20]
   1f108:	ldr	r1, [r3, #24]
   1f10c:	ldr	r3, [r3, #28]
   1f110:	and	r1, r1, ip
   1f114:	and	r3, r3, r2
   1f118:	str	r1, [r4, #24]
   1f11c:	str	r3, [r4, #28]
   1f120:	ldr	r2, [r5, #64]	; 0x40
   1f124:	mov	r7, #0
   1f128:	str	r7, [sp, #28]
   1f12c:	cmp	r2, #31
   1f130:	beq	1f434 <__assert_fail@plt+0xe18c>
   1f134:	ldr	r0, [r5, #56]	; 0x38
   1f138:	lsl	r3, r2, #5
   1f13c:	add	r2, r2, #1
   1f140:	add	r9, r3, #4
   1f144:	mov	r1, #3
   1f148:	add	r8, r0, r3
   1f14c:	str	r4, [sp, #24]
   1f150:	add	r3, r3, #16
   1f154:	str	r2, [r5, #64]	; 0x40
   1f158:	mov	r7, #0
   1f15c:	strb	r1, [sp, #28]
   1f160:	add	r1, r0, r3
   1f164:	mvn	ip, #0
   1f168:	ldrd	r2, [sp, #24]
   1f16c:	adds	r9, r0, r9
   1f170:	str	r7, [r8, #4]
   1f174:	str	r7, [r8, #8]
   1f178:	str	r7, [r8, #12]
   1f17c:	strd	r2, [r8, #24]
   1f180:	ldrb	r3, [r1, #14]
   1f184:	bic	r3, r3, #12
   1f188:	strb	r3, [r1, #14]
   1f18c:	str	r7, [r8, #16]
   1f190:	str	r7, [r8, #20]
   1f194:	str	ip, [r8, #32]
   1f198:	beq	1f2e0 <__assert_fail@plt+0xe038>
   1f19c:	ldr	r3, [r5, #92]	; 0x5c
   1f1a0:	cmp	r3, #1
   1f1a4:	ble	1f324 <__assert_fail@plt+0xe07c>
   1f1a8:	ldrb	r2, [r5, #88]	; 0x58
   1f1ac:	ldr	r3, [r5, #64]	; 0x40
   1f1b0:	orr	r2, r2, #2
   1f1b4:	cmp	r3, #31
   1f1b8:	strb	r2, [r5, #88]	; 0x58
   1f1bc:	beq	1f460 <__assert_fail@plt+0xe1b8>
   1f1c0:	lsl	r7, r3, #5
   1f1c4:	add	r3, r3, #1
   1f1c8:	add	fp, r7, #4
   1f1cc:	mov	r2, #6
   1f1d0:	str	r6, [sp, #24]
   1f1d4:	add	sl, r0, r7
   1f1d8:	str	r3, [r5, #64]	; 0x40
   1f1dc:	add	r7, r7, #16
   1f1e0:	mvn	ip, #0
   1f1e4:	strb	r2, [sp, #28]
   1f1e8:	add	r1, r0, r7
   1f1ec:	mov	r7, #0
   1f1f0:	ldrd	r2, [sp, #24]
   1f1f4:	adds	fp, r0, fp
   1f1f8:	str	r7, [sl, #4]
   1f1fc:	str	r7, [sl, #8]
   1f200:	str	r7, [sl, #12]
   1f204:	strd	r2, [sl, #24]
   1f208:	ldrb	r3, [r1, #14]
   1f20c:	bic	r3, r3, #12
   1f210:	strb	r3, [r1, #14]
   1f214:	str	r7, [sl, #16]
   1f218:	str	r7, [sl, #20]
   1f21c:	str	ip, [sl, #32]
   1f220:	beq	1f2e0 <__assert_fail@plt+0xe038>
   1f224:	ldr	r1, [r5, #64]	; 0x40
   1f228:	mov	r2, #0
   1f22c:	mov	r3, #0
   1f230:	strd	r2, [sp, #32]
   1f234:	cmp	r1, #31
   1f238:	beq	1f488 <__assert_fail@plt+0xe1e0>
   1f23c:	lsl	r7, r1, #5
   1f240:	add	r1, r1, #1
   1f244:	add	r4, r7, #4
   1f248:	mov	r3, #10
   1f24c:	mov	ip, #0
   1f250:	str	r1, [r5, #64]	; 0x40
   1f254:	add	r1, r0, r7
   1f258:	add	r7, r7, #16
   1f25c:	strb	r3, [sp, #36]	; 0x24
   1f260:	add	r4, r0, r4
   1f264:	add	r0, r0, r7
   1f268:	ldrd	r2, [sp, #32]
   1f26c:	mvn	lr, #0
   1f270:	str	ip, [r1, #4]
   1f274:	str	r9, [r1, #8]
   1f278:	str	fp, [r1, #12]
   1f27c:	strd	r2, [r1, #24]
   1f280:	ldrb	r3, [r0, #14]
   1f284:	bic	r3, r3, #12
   1f288:	strb	r3, [r0, #14]
   1f28c:	str	ip, [r1, #16]
   1f290:	str	ip, [r1, #20]
   1f294:	str	lr, [r1, #32]
   1f298:	str	r4, [r8, #4]
   1f29c:	str	r4, [sl, #4]
   1f2a0:	mov	r0, r4
   1f2a4:	add	sp, sp, #44	; 0x2c
   1f2a8:	ldrd	r4, [sp]
   1f2ac:	ldrd	r6, [sp, #8]
   1f2b0:	ldrd	r8, [sp, #16]
   1f2b4:	ldrd	sl, [sp, #24]
   1f2b8:	add	sp, sp, #32
   1f2bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2c0:	add	r3, r3, #6
   1f2c4:	ldr	r2, [r4, r3, lsl #2]
   1f2c8:	mvn	r2, r2
   1f2cc:	str	r2, [r4, r3, lsl #2]
   1f2d0:	ldr	r3, [r5, #92]	; 0x5c
   1f2d4:	cmp	r3, #1
   1f2d8:	bgt	1f07c <__assert_fail@plt+0xddd4>
   1f2dc:	b	1f120 <__assert_fail@plt+0xde78>
   1f2e0:	mov	r0, r4
   1f2e4:	mov	r4, #0
   1f2e8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f2ec:	ldr	r0, [r6]
   1f2f0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f2f4:	ldr	r0, [r6, #4]
   1f2f8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f2fc:	ldr	r0, [r6, #8]
   1f300:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f304:	ldr	r0, [r6, #12]
   1f308:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f30c:	mov	r0, r6
   1f310:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f314:	ldr	r2, [sp, #84]	; 0x54
   1f318:	mov	r3, #12
   1f31c:	str	r3, [r2]
   1f320:	b	1f2a0 <__assert_fail@plt+0xdff8>
   1f324:	ldr	r0, [r6]
   1f328:	mov	r4, r9
   1f32c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f330:	ldr	r0, [r6, #4]
   1f334:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f338:	ldr	r0, [r6, #8]
   1f33c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f340:	ldr	r0, [r6, #12]
   1f344:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f348:	mov	r0, r6
   1f34c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f350:	b	1f2a0 <__assert_fail@plt+0xdff8>
   1f354:	mov	r0, r4
   1f358:	mov	r4, r6
   1f35c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f360:	ldr	r2, [sp, #84]	; 0x54
   1f364:	mov	r3, #12
   1f368:	str	r3, [r2]
   1f36c:	b	1f2a0 <__assert_fail@plt+0xdff8>
   1f370:	ldr	r1, [r3]
   1f374:	ldr	r2, [r4]
   1f378:	ldr	r0, [r4, #4]
   1f37c:	and	r2, r2, r1
   1f380:	ldr	r1, [r4, #8]
   1f384:	str	r2, [r4]
   1f388:	ldr	ip, [r3, #4]
   1f38c:	ldr	r2, [r4, #12]
   1f390:	and	r0, r0, ip
   1f394:	ldr	ip, [r4, #16]
   1f398:	str	r0, [r4, #4]
   1f39c:	ldr	lr, [r3, #8]
   1f3a0:	ldr	r0, [r4, #20]
   1f3a4:	and	r1, r1, lr
   1f3a8:	str	r1, [r4, #8]
   1f3ac:	ldr	lr, [r3, #12]
   1f3b0:	ldr	r1, [r4, #24]
   1f3b4:	and	r2, r2, lr
   1f3b8:	str	r2, [r4, #12]
   1f3bc:	ldr	lr, [r3, #16]
   1f3c0:	ldr	r2, [r4, #28]
   1f3c4:	and	ip, ip, lr
   1f3c8:	str	ip, [r4, #16]
   1f3cc:	ldr	ip, [r3, #20]
   1f3d0:	and	r0, r0, ip
   1f3d4:	str	r0, [r4, #20]
   1f3d8:	ldr	r0, [r3, #24]
   1f3dc:	and	r1, r1, r0
   1f3e0:	str	r1, [r4, #24]
   1f3e4:	ldr	r3, [r3, #28]
   1f3e8:	and	r3, r3, r2
   1f3ec:	str	r3, [r4, #28]
   1f3f0:	b	1f120 <__assert_fail@plt+0xde78>
   1f3f4:	mov	r0, r4
   1f3f8:	mov	r4, r9
   1f3fc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f400:	ldr	r0, [r6]
   1f404:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f408:	ldr	r0, [r6, #4]
   1f40c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f410:	ldr	r0, [r6, #8]
   1f414:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f418:	ldr	r0, [r6, #12]
   1f41c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f420:	mov	r0, r6
   1f424:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f428:	ldr	r3, [sp, #84]	; 0x54
   1f42c:	str	sl, [r3]
   1f430:	b	1f2a0 <__assert_fail@plt+0xdff8>
   1f434:	mov	r0, #996	; 0x3e4
   1f438:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1f43c:	cmp	r0, #0
   1f440:	beq	1f2e0 <__assert_fail@plt+0xe038>
   1f444:	ldr	r1, [r5, #56]	; 0x38
   1f448:	mov	r3, r7
   1f44c:	mov	r2, #1
   1f450:	mov	r9, #4
   1f454:	str	r0, [r5, #56]	; 0x38
   1f458:	str	r1, [r0]
   1f45c:	b	1f144 <__assert_fail@plt+0xde9c>
   1f460:	mov	r0, #996	; 0x3e4
   1f464:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1f468:	cmp	r0, #0
   1f46c:	beq	1f2e0 <__assert_fail@plt+0xe038>
   1f470:	ldr	r2, [r5, #56]	; 0x38
   1f474:	mov	r3, #1
   1f478:	mov	fp, #4
   1f47c:	str	r0, [r5, #56]	; 0x38
   1f480:	str	r2, [r0]
   1f484:	b	1f1cc <__assert_fail@plt+0xdf24>
   1f488:	mov	r0, #996	; 0x3e4
   1f48c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1f490:	cmp	r0, #0
   1f494:	beq	1f4b0 <__assert_fail@plt+0xe208>
   1f498:	ldr	r3, [r5, #56]	; 0x38
   1f49c:	mov	r4, #4
   1f4a0:	mov	r1, #1
   1f4a4:	str	r0, [r5, #56]	; 0x38
   1f4a8:	str	r3, [r0]
   1f4ac:	b	1f248 <__assert_fail@plt+0xdfa0>
   1f4b0:	mov	r4, r0
   1f4b4:	b	1f2a0 <__assert_fail@plt+0xdff8>
   1f4b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f4bc:	mov	r4, r0
   1f4c0:	mov	r5, r2
   1f4c4:	strd	r6, [sp, #8]
   1f4c8:	subs	r6, r1, #0
   1f4cc:	strd	r8, [sp, #16]
   1f4d0:	str	sl, [sp, #24]
   1f4d4:	str	lr, [sp, #28]
   1f4d8:	beq	1f4f4 <__assert_fail@plt+0xe24c>
   1f4dc:	ldr	r3, [r6, #4]
   1f4e0:	cmp	r2, #0
   1f4e4:	cmpne	r3, #0
   1f4e8:	bgt	1f534 <__assert_fail@plt+0xe28c>
   1f4ec:	cmp	r3, #0
   1f4f0:	bgt	1f540 <__assert_fail@plt+0xe298>
   1f4f4:	cmp	r5, #0
   1f4f8:	beq	1f508 <__assert_fail@plt+0xe260>
   1f4fc:	ldr	r3, [r5, #4]
   1f500:	cmp	r3, #0
   1f504:	bgt	1f574 <__assert_fail@plt+0xe2cc>
   1f508:	mov	r3, #0
   1f50c:	mov	r0, r3
   1f510:	str	r3, [r4]
   1f514:	str	r3, [r4, #4]
   1f518:	str	r3, [r4, #8]
   1f51c:	ldrd	r4, [sp]
   1f520:	ldrd	r6, [sp, #8]
   1f524:	ldrd	r8, [sp, #16]
   1f528:	ldr	sl, [sp, #24]
   1f52c:	add	sp, sp, #28
   1f530:	pop	{pc}		; (ldr pc, [sp], #4)
   1f534:	ldr	r2, [r2, #4]
   1f538:	cmp	r2, #0
   1f53c:	bgt	1f5a8 <__assert_fail@plt+0xe300>
   1f540:	lsl	r0, r3, #2
   1f544:	str	r3, [r4]
   1f548:	str	r3, [r4, #4]
   1f54c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1f550:	cmp	r0, #0
   1f554:	str	r0, [r4, #8]
   1f558:	beq	1f694 <__assert_fail@plt+0xe3ec>
   1f55c:	ldr	r2, [r6, #4]
   1f560:	ldr	r1, [r6, #8]
   1f564:	lsl	r2, r2, #2
   1f568:	bl	11038 <memcpy@plt>
   1f56c:	mov	r0, #0
   1f570:	b	1f51c <__assert_fail@plt+0xe274>
   1f574:	lsl	r0, r3, #2
   1f578:	str	r3, [r4]
   1f57c:	str	r3, [r4, #4]
   1f580:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1f584:	cmp	r0, #0
   1f588:	str	r0, [r4, #8]
   1f58c:	beq	1f694 <__assert_fail@plt+0xe3ec>
   1f590:	ldr	r2, [r5, #4]
   1f594:	ldr	r1, [r5, #8]
   1f598:	lsl	r2, r2, #2
   1f59c:	bl	11038 <memcpy@plt>
   1f5a0:	mov	r0, #0
   1f5a4:	b	1f51c <__assert_fail@plt+0xe274>
   1f5a8:	add	r3, r3, r2
   1f5ac:	lsl	r0, r3, #2
   1f5b0:	str	r3, [r4]
   1f5b4:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1f5b8:	cmp	r0, #0
   1f5bc:	str	r0, [r4, #8]
   1f5c0:	beq	1f6a8 <__assert_fail@plt+0xe400>
   1f5c4:	ldr	r7, [r6, #4]
   1f5c8:	ldr	r8, [r5, #4]
   1f5cc:	cmp	r7, #0
   1f5d0:	ble	1f6b0 <__assert_fail@plt+0xe408>
   1f5d4:	ldr	r1, [r6, #8]
   1f5d8:	cmp	r8, #0
   1f5dc:	movle	r6, #0
   1f5e0:	movle	lr, r0
   1f5e4:	movle	r3, r6
   1f5e8:	mov	r9, r1
   1f5ec:	ble	1f67c <__assert_fail@plt+0xe3d4>
   1f5f0:	mov	r6, #0
   1f5f4:	mov	lr, r0
   1f5f8:	ldr	sl, [r5, #8]
   1f5fc:	mov	ip, r6
   1f600:	mov	r3, r6
   1f604:	b	1f610 <__assert_fail@plt+0xe368>
   1f608:	cmp	r8, ip
   1f60c:	ble	1f67c <__assert_fail@plt+0xe3d4>
   1f610:	ldr	r2, [r1]
   1f614:	add	r6, r6, #1
   1f618:	ldr	r1, [sl, ip, lsl #2]
   1f61c:	cmp	r2, r1
   1f620:	addgt	ip, ip, #1
   1f624:	strgt	r1, [lr]
   1f628:	bgt	1f638 <__assert_fail@plt+0xe390>
   1f62c:	add	r3, r3, #1
   1f630:	addeq	ip, ip, #1
   1f634:	str	r2, [lr]
   1f638:	cmp	r7, r3
   1f63c:	add	r1, r9, r3, lsl #2
   1f640:	add	lr, lr, #4
   1f644:	bgt	1f608 <__assert_fail@plt+0xe360>
   1f648:	cmp	r8, ip
   1f64c:	bgt	1f65c <__assert_fail@plt+0xe3b4>
   1f650:	mov	r0, #0
   1f654:	str	r6, [r4, #4]
   1f658:	b	1f51c <__assert_fail@plt+0xe274>
   1f65c:	ldr	r1, [r5, #8]
   1f660:	sub	r2, r8, ip
   1f664:	add	r0, r0, r6, lsl #2
   1f668:	add	r6, r6, r2
   1f66c:	lsl	r2, r2, #2
   1f670:	add	r1, r1, ip, lsl #2
   1f674:	bl	11038 <memcpy@plt>
   1f678:	b	1f650 <__assert_fail@plt+0xe3a8>
   1f67c:	sub	r3, r7, r3
   1f680:	mov	r0, lr
   1f684:	lsl	r2, r3, #2
   1f688:	add	r6, r6, r3
   1f68c:	bl	11038 <memcpy@plt>
   1f690:	b	1f650 <__assert_fail@plt+0xe3a8>
   1f694:	mov	r3, #0
   1f698:	mov	r0, #12
   1f69c:	str	r3, [r4]
   1f6a0:	str	r3, [r4, #4]
   1f6a4:	b	1f51c <__assert_fail@plt+0xe274>
   1f6a8:	mov	r0, #12
   1f6ac:	b	1f51c <__assert_fail@plt+0xe274>
   1f6b0:	mov	r6, #0
   1f6b4:	mov	ip, r6
   1f6b8:	b	1f648 <__assert_fail@plt+0xe3a0>
   1f6bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f6c0:	strd	r6, [sp, #8]
   1f6c4:	subs	r7, r3, #0
   1f6c8:	subgt	r4, r1, #4
   1f6cc:	subgt	r6, r2, #4
   1f6d0:	str	r8, [sp, #16]
   1f6d4:	movgt	r5, #0
   1f6d8:	movgt	r8, r0
   1f6dc:	str	lr, [sp, #20]
   1f6e0:	sub	sp, sp, #16
   1f6e4:	bgt	1f714 <__assert_fail@plt+0xe46c>
   1f6e8:	b	1f778 <__assert_fail@plt+0xe4d0>
   1f6ec:	bl	1c520 <__assert_fail@plt+0xb278>
   1f6f0:	str	r0, [r4]
   1f6f4:	ldr	r0, [sp, #12]
   1f6f8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   1f6fc:	ldr	r3, [sp]
   1f700:	cmp	r3, #0
   1f704:	bne	1f75c <__assert_fail@plt+0xe4b4>
   1f708:	add	r5, r5, #1
   1f70c:	cmp	r7, r5
   1f710:	beq	1f778 <__assert_fail@plt+0xe4d0>
   1f714:	ldr	r1, [r4, #4]!
   1f718:	ldr	ip, [r6, #4]!
   1f71c:	cmp	r1, #0
   1f720:	streq	ip, [r4]
   1f724:	beq	1f708 <__assert_fail@plt+0xe460>
   1f728:	cmp	ip, #0
   1f72c:	add	r2, ip, #4
   1f730:	add	r1, r1, #4
   1f734:	add	r0, sp, #4
   1f738:	beq	1f708 <__assert_fail@plt+0xe460>
   1f73c:	bl	1f4b8 <__assert_fail@plt+0xe210>
   1f740:	mov	r3, r0
   1f744:	add	r2, sp, #4
   1f748:	cmp	r3, #0
   1f74c:	mov	r1, r8
   1f750:	mov	r0, sp
   1f754:	str	r3, [sp]
   1f758:	beq	1f6ec <__assert_fail@plt+0xe444>
   1f75c:	mov	r0, r3
   1f760:	add	sp, sp, #16
   1f764:	ldrd	r4, [sp]
   1f768:	ldrd	r6, [sp, #8]
   1f76c:	ldr	r8, [sp, #16]
   1f770:	add	sp, sp, #20
   1f774:	pop	{pc}		; (ldr pc, [sp], #4)
   1f778:	mov	r3, #0
   1f77c:	b	1f75c <__assert_fail@plt+0xe4b4>
   1f780:	lsl	ip, r2, #2
   1f784:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f788:	mov	r4, r3
   1f78c:	strd	r6, [sp, #8]
   1f790:	strd	r8, [sp, #16]
   1f794:	mov	r8, r2
   1f798:	ldr	r9, [r3, #4]
   1f79c:	strd	sl, [sp, #24]
   1f7a0:	mov	sl, r0
   1f7a4:	mov	fp, r1
   1f7a8:	ldr	r2, [r0, #100]	; 0x64
   1f7ac:	str	lr, [sp, #32]
   1f7b0:	sub	sp, sp, #100	; 0x64
   1f7b4:	ldr	r6, [r0, #84]	; 0x54
   1f7b8:	mov	r0, #0
   1f7bc:	str	ip, [sp, #28]
   1f7c0:	ldr	r3, [r2, r8, lsl #2]
   1f7c4:	add	r2, r2, ip
   1f7c8:	cmp	r3, r0
   1f7cc:	str	r3, [sp, #20]
   1f7d0:	str	r0, [sp, #60]	; 0x3c
   1f7d4:	beq	1fb88 <__assert_fail@plt+0xe8e0>
   1f7d8:	cmp	r9, #0
   1f7dc:	bne	1f818 <__assert_fail@plt+0xe570>
   1f7e0:	ldr	r3, [r1]
   1f7e4:	str	r9, [r3, r8, lsl #2]
   1f7e8:	ldr	r3, [r2]
   1f7ec:	ldrb	r9, [r3, #52]	; 0x34
   1f7f0:	ands	r9, r9, #64	; 0x40
   1f7f4:	bne	1f93c <__assert_fail@plt+0xe694>
   1f7f8:	mov	r0, r9
   1f7fc:	add	sp, sp, #100	; 0x64
   1f800:	ldrd	r4, [sp]
   1f804:	ldrd	r6, [sp, #8]
   1f808:	ldrd	r8, [sp, #16]
   1f80c:	ldrd	sl, [sp, #24]
   1f810:	add	sp, sp, #32
   1f814:	pop	{pc}		; (ldr pc, [sp], #4)
   1f818:	mov	r2, r4
   1f81c:	mov	r1, r6
   1f820:	str	r0, [sp, #64]	; 0x40
   1f824:	add	r0, sp, #64	; 0x40
   1f828:	bl	1c520 <__assert_fail@plt+0xb278>
   1f82c:	ldr	r9, [sp, #64]	; 0x40
   1f830:	mov	r2, r0
   1f834:	cmp	r9, #0
   1f838:	bne	1f7f8 <__assert_fail@plt+0xe550>
   1f83c:	mov	r5, r0
   1f840:	ldr	r7, [r5, #28]!
   1f844:	cmp	r7, #0
   1f848:	bne	1f8c8 <__assert_fail@plt+0xe620>
   1f84c:	ldr	r3, [r4, #4]
   1f850:	str	r2, [sp, #24]
   1f854:	lsl	r0, r3, #2
   1f858:	str	r3, [r2, #28]
   1f85c:	str	r9, [r2, #32]
   1f860:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1f864:	ldr	r2, [sp, #24]
   1f868:	cmp	r0, #0
   1f86c:	str	r0, [r2, #36]	; 0x24
   1f870:	beq	1f8c0 <__assert_fail@plt+0xe618>
   1f874:	ldr	r3, [r4, #4]
   1f878:	str	r7, [sp, #64]	; 0x40
   1f87c:	cmp	r3, #0
   1f880:	bgt	1f894 <__assert_fail@plt+0xe5ec>
   1f884:	b	1f8c8 <__assert_fail@plt+0xe620>
   1f888:	ldr	r3, [r4, #4]
   1f88c:	cmp	r7, r3
   1f890:	bge	1f8c8 <__assert_fail@plt+0xe620>
   1f894:	ldr	r3, [r4, #8]
   1f898:	mov	r0, r5
   1f89c:	ldr	r1, [r6, #28]
   1f8a0:	ldr	r3, [r3, r7, lsl #2]
   1f8a4:	add	r7, r7, #1
   1f8a8:	add	r3, r3, r3, lsl #1
   1f8ac:	add	r1, r1, r3, lsl #2
   1f8b0:	bl	17d0c <__assert_fail@plt+0x6a64>
   1f8b4:	cmp	r0, #0
   1f8b8:	str	r0, [sp, #64]	; 0x40
   1f8bc:	beq	1f888 <__assert_fail@plt+0xe5e0>
   1f8c0:	mov	r9, #12
   1f8c4:	b	1f7f8 <__assert_fail@plt+0xe550>
   1f8c8:	ldr	r3, [sp, #20]
   1f8cc:	mov	r2, r5
   1f8d0:	mov	r0, r4
   1f8d4:	add	r3, r3, #4
   1f8d8:	mov	r1, r3
   1f8dc:	str	r3, [sp, #36]	; 0x24
   1f8e0:	bl	17b24 <__assert_fail@plt+0x687c>
   1f8e4:	cmp	r0, #0
   1f8e8:	str	r0, [sp, #60]	; 0x3c
   1f8ec:	bne	200e8 <__assert_fail@plt+0xee40>
   1f8f0:	ldr	r9, [fp, #20]
   1f8f4:	cmp	r9, #0
   1f8f8:	bne	1fe08 <__assert_fail@plt+0xeb60>
   1f8fc:	mov	r2, r4
   1f900:	mov	r1, r6
   1f904:	ldr	r4, [fp]
   1f908:	add	r0, sp, #60	; 0x3c
   1f90c:	bl	1c520 <__assert_fail@plt+0xb278>
   1f910:	ldr	r9, [sp, #60]	; 0x3c
   1f914:	str	r0, [r4, r8, lsl #2]
   1f918:	cmp	r9, #0
   1f91c:	bne	1f7f8 <__assert_fail@plt+0xe550>
   1f920:	ldr	r3, [sp, #28]
   1f924:	ldr	r2, [sl, #100]	; 0x64
   1f928:	add	r2, r2, r3
   1f92c:	ldr	r3, [r2]
   1f930:	ldrb	r9, [r3, #52]	; 0x34
   1f934:	ands	r9, r9, #64	; 0x40
   1f938:	beq	1f7f8 <__assert_fail@plt+0xe550>
   1f93c:	ldr	ip, [sl, #108]	; 0x6c
   1f940:	cmp	ip, #0
   1f944:	ble	1fbc0 <__assert_fail@plt+0xe918>
   1f948:	ldr	r0, [sl, #116]	; 0x74
   1f94c:	mov	r2, ip
   1f950:	mov	lr, #0
   1f954:	add	r3, r2, lr
   1f958:	asr	r3, r3, #1
   1f95c:	add	r1, r3, r3, lsl #1
   1f960:	add	r1, r0, r1, lsl #3
   1f964:	ldr	r1, [r1, #4]
   1f968:	cmp	r8, r1
   1f96c:	bgt	1fd98 <__assert_fail@plt+0xeaf0>
   1f970:	cmp	r3, lr
   1f974:	ble	1f9c0 <__assert_fail@plt+0xe718>
   1f978:	add	r2, r3, lr
   1f97c:	asr	r2, r2, #1
   1f980:	add	r1, r2, r2, lsl #1
   1f984:	add	r1, r0, r1, lsl #3
   1f988:	ldr	r1, [r1, #4]
   1f98c:	cmp	r8, r1
   1f990:	ble	1f9b0 <__assert_fail@plt+0xe708>
   1f994:	b	1fd8c <__assert_fail@plt+0xeae4>
   1f998:	add	r1, r3, r3, lsl #1
   1f99c:	add	r1, r0, r1, lsl #3
   1f9a0:	ldr	r1, [r1, #4]
   1f9a4:	cmp	r8, r1
   1f9a8:	bgt	1fd98 <__assert_fail@plt+0xeaf0>
   1f9ac:	mov	r2, r3
   1f9b0:	add	r3, lr, r2
   1f9b4:	cmp	lr, r2
   1f9b8:	asr	r3, r3, #1
   1f9bc:	blt	1f998 <__assert_fail@plt+0xe6f0>
   1f9c0:	cmp	ip, lr
   1f9c4:	str	lr, [sp, #44]	; 0x2c
   1f9c8:	ble	1fbc0 <__assert_fail@plt+0xe918>
   1f9cc:	add	r3, lr, lr, lsl #1
   1f9d0:	lsl	r3, r3, #3
   1f9d4:	add	r0, r0, r3
   1f9d8:	str	r3, [sp, #48]	; 0x30
   1f9dc:	ldr	r3, [r0, #4]
   1f9e0:	cmp	r8, r3
   1f9e4:	bne	1fbc0 <__assert_fail@plt+0xe918>
   1f9e8:	ldr	r3, [sp, #20]
   1f9ec:	ldr	r7, [sl, #84]	; 0x54
   1f9f0:	ldr	r0, [r3, #8]
   1f9f4:	mov	r3, #0
   1f9f8:	str	r3, [sp, #64]	; 0x40
   1f9fc:	cmp	r0, r3
   1fa00:	ble	1fbc0 <__assert_fail@plt+0xe918>
   1fa04:	add	r2, fp, #24
   1fa08:	mov	r9, r8
   1fa0c:	mov	r8, r3
   1fa10:	str	r2, [sp, #36]	; 0x24
   1fa14:	add	r2, fp, #20
   1fa18:	str	r2, [sp, #40]	; 0x28
   1fa1c:	b	1fa34 <__assert_fail@plt+0xe78c>
   1fa20:	cmp	r3, #4
   1fa24:	beq	1fa6c <__assert_fail@plt+0xe7c4>
   1fa28:	add	r8, r8, #1
   1fa2c:	cmp	r8, r0
   1fa30:	bge	1fbb4 <__assert_fail@plt+0xe90c>
   1fa34:	ldr	r3, [sp, #20]
   1fa38:	ldr	r2, [fp, #8]
   1fa3c:	ldr	r1, [r3, #12]
   1fa40:	ldr	r3, [r7]
   1fa44:	ldr	r6, [r1, r8, lsl #2]
   1fa48:	add	r3, r3, r6, lsl #3
   1fa4c:	cmp	r6, r2
   1fa50:	ldrb	r3, [r3, #4]
   1fa54:	bne	1fa20 <__assert_fail@plt+0xe778>
   1fa58:	ldr	r2, [fp, #12]
   1fa5c:	cmp	r9, r2
   1fa60:	beq	1fa28 <__assert_fail@plt+0xe780>
   1fa64:	cmp	r3, #4
   1fa68:	bne	1fa28 <__assert_fail@plt+0xe780>
   1fa6c:	add	r3, r6, r6, lsl #1
   1fa70:	ldr	r4, [sl, #116]	; 0x74
   1fa74:	lsl	r2, r6, #2
   1fa78:	str	r8, [sp, #52]	; 0x34
   1fa7c:	lsl	r3, r3, #2
   1fa80:	ldr	r5, [sp, #44]	; 0x2c
   1fa84:	mov	r8, r2
   1fa88:	str	r3, [sp, #32]
   1fa8c:	ldr	r3, [sp, #48]	; 0x30
   1fa90:	add	r4, r4, r3
   1fa94:	ldr	r3, [r4]
   1fa98:	cmp	r6, r3
   1fa9c:	bne	1fb64 <__assert_fail@plt+0xe8bc>
   1faa0:	ldr	r3, [r4, #8]
   1faa4:	ldr	ip, [r4, #12]
   1faa8:	sub	ip, ip, r3
   1faac:	cmp	ip, #0
   1fab0:	add	ip, r9, ip
   1fab4:	beq	1fbe4 <__assert_fail@plt+0xe93c>
   1fab8:	ldr	r3, [r7, #12]
   1fabc:	ldr	r0, [r3, r8]
   1fac0:	ldr	r3, [fp, #12]
   1fac4:	cmp	ip, r3
   1fac8:	bgt	1fb64 <__assert_fail@plt+0xe8bc>
   1facc:	ldr	r3, [fp]
   1fad0:	ldr	r2, [r3, ip, lsl #2]
   1fad4:	cmp	r2, #0
   1fad8:	beq	1fb64 <__assert_fail@plt+0xe8bc>
   1fadc:	ldr	r3, [r2, #8]
   1fae0:	cmp	r3, #0
   1fae4:	ble	1fb64 <__assert_fail@plt+0xe8bc>
   1fae8:	subs	r3, r3, #1
   1faec:	ldr	lr, [r2, #12]
   1faf0:	moveq	r1, r3
   1faf4:	beq	1fb58 <__assert_fail@plt+0xe8b0>
   1faf8:	mov	r1, #0
   1fafc:	str	ip, [sp, #24]
   1fb00:	add	r2, r3, r1
   1fb04:	lsr	r2, r2, #1
   1fb08:	ldr	ip, [lr, r2, lsl #2]
   1fb0c:	cmp	r0, ip
   1fb10:	bgt	1fbd4 <__assert_fail@plt+0xe92c>
   1fb14:	cmp	r2, r1
   1fb18:	bls	1fb54 <__assert_fail@plt+0xe8ac>
   1fb1c:	add	r3, r2, r1
   1fb20:	lsr	r3, r3, #1
   1fb24:	ldr	ip, [lr, r3, lsl #2]
   1fb28:	cmp	r0, ip
   1fb2c:	ble	1fb44 <__assert_fail@plt+0xe89c>
   1fb30:	b	1fbc8 <__assert_fail@plt+0xe920>
   1fb34:	ldr	ip, [lr, r2, lsl #2]
   1fb38:	cmp	r0, ip
   1fb3c:	bgt	1fbd4 <__assert_fail@plt+0xe92c>
   1fb40:	mov	r3, r2
   1fb44:	add	r2, r1, r3
   1fb48:	cmp	r1, r3
   1fb4c:	lsr	r2, r2, #1
   1fb50:	bcc	1fb34 <__assert_fail@plt+0xe88c>
   1fb54:	ldr	ip, [sp, #24]
   1fb58:	ldr	r3, [lr, r1, lsl #2]
   1fb5c:	cmp	r0, r3
   1fb60:	beq	1fbfc <__assert_fail@plt+0xe954>
   1fb64:	ldrb	r3, [r4, #20]
   1fb68:	add	r5, r5, #1
   1fb6c:	add	r4, r4, #24
   1fb70:	cmp	r3, #0
   1fb74:	bne	1fa94 <__assert_fail@plt+0xe7ec>
   1fb78:	ldr	r3, [sp, #20]
   1fb7c:	ldr	r8, [sp, #52]	; 0x34
   1fb80:	ldr	r0, [r3, #8]
   1fb84:	b	1fa28 <__assert_fail@plt+0xe780>
   1fb88:	ldr	r5, [r1]
   1fb8c:	cmp	r9, r0
   1fb90:	streq	r9, [r5, r8, lsl #2]
   1fb94:	beq	1f7f8 <__assert_fail@plt+0xe550>
   1fb98:	mov	r2, r4
   1fb9c:	mov	r1, r6
   1fba0:	add	r0, sp, #60	; 0x3c
   1fba4:	bl	1c520 <__assert_fail@plt+0xb278>
   1fba8:	str	r0, [r5, r8, lsl #2]
   1fbac:	ldr	r9, [sp, #60]	; 0x3c
   1fbb0:	b	1f7f8 <__assert_fail@plt+0xe550>
   1fbb4:	ldr	r3, [sp, #64]	; 0x40
   1fbb8:	cmp	r3, #0
   1fbbc:	bne	201c8 <__assert_fail@plt+0xef20>
   1fbc0:	mov	r9, #0
   1fbc4:	b	1f7f8 <__assert_fail@plt+0xe550>
   1fbc8:	mov	r1, r3
   1fbcc:	mov	r3, r2
   1fbd0:	mov	r2, r1
   1fbd4:	add	r1, r2, #1
   1fbd8:	cmp	r3, r1
   1fbdc:	bhi	1fb00 <__assert_fail@plt+0xe858>
   1fbe0:	b	1fb54 <__assert_fail@plt+0xe8ac>
   1fbe4:	ldr	r3, [r7, #20]
   1fbe8:	ldr	r2, [sp, #32]
   1fbec:	add	r3, r3, r2
   1fbf0:	ldr	r3, [r3, #8]
   1fbf4:	ldr	r0, [r3]
   1fbf8:	b	1fac0 <__assert_fail@plt+0xe818>
   1fbfc:	mov	r3, r6
   1fc00:	str	r9, [sp]
   1fc04:	stmib	sp, {r0, ip}
   1fc08:	mov	r0, sl
   1fc0c:	ldr	r2, [sp, #36]	; 0x24
   1fc10:	ldr	r1, [sp, #40]	; 0x28
   1fc14:	bl	1a4ec <__assert_fail@plt+0x9244>
   1fc18:	cmp	r0, #0
   1fc1c:	bne	1fb64 <__assert_fail@plt+0xe8bc>
   1fc20:	ldr	r1, [sp, #64]	; 0x40
   1fc24:	cmp	r1, #0
   1fc28:	beq	1fda8 <__assert_fail@plt+0xeb00>
   1fc2c:	add	r4, sp, #64	; 0x40
   1fc30:	add	r0, sp, #80	; 0x50
   1fc34:	mov	r1, r5
   1fc38:	str	r6, [sp, #72]	; 0x48
   1fc3c:	str	r9, [sp, #76]	; 0x4c
   1fc40:	bl	17910 <__assert_fail@plt+0x6668>
   1fc44:	cmp	r0, #0
   1fc48:	beq	20158 <__assert_fail@plt+0xeeb0>
   1fc4c:	ldr	r2, [sp, #28]
   1fc50:	mov	r1, r4
   1fc54:	mov	r0, sl
   1fc58:	ldr	r3, [sp, #64]	; 0x40
   1fc5c:	ldr	r4, [r3, r2]
   1fc60:	bl	201d0 <__assert_fail@plt+0xef28>
   1fc64:	cmp	r0, #0
   1fc68:	bne	200f0 <__assert_fail@plt+0xee48>
   1fc6c:	ldr	r1, [fp, #4]
   1fc70:	ldr	r2, [sp, #64]	; 0x40
   1fc74:	cmp	r1, #0
   1fc78:	beq	1fc94 <__assert_fail@plt+0xe9ec>
   1fc7c:	add	r3, r9, #1
   1fc80:	mov	r0, r7
   1fc84:	bl	1f6bc <__assert_fail@plt+0xe414>
   1fc88:	cmp	r0, #0
   1fc8c:	bne	200f0 <__assert_fail@plt+0xee48>
   1fc90:	ldr	r2, [sp, #64]	; 0x40
   1fc94:	ldr	r3, [sp, #28]
   1fc98:	ldr	lr, [sp, #84]	; 0x54
   1fc9c:	str	r4, [r2, r3]
   1fca0:	cmp	lr, #0
   1fca4:	ble	1fd24 <__assert_fail@plt+0xea7c>
   1fca8:	sub	r4, lr, #1
   1fcac:	ldr	r1, [sp, #88]	; 0x58
   1fcb0:	cmp	r4, #0
   1fcb4:	mov	r0, r4
   1fcb8:	movne	r2, #0
   1fcbc:	beq	201a0 <__assert_fail@plt+0xeef8>
   1fcc0:	add	r3, r0, r2
   1fcc4:	lsr	r3, r3, #1
   1fcc8:	ldr	ip, [r1, r3, lsl #2]
   1fccc:	cmp	r5, ip
   1fcd0:	bgt	1fd7c <__assert_fail@plt+0xead4>
   1fcd4:	cmp	r3, r2
   1fcd8:	bls	1fd14 <__assert_fail@plt+0xea6c>
   1fcdc:	add	r0, r3, r2
   1fce0:	lsr	r0, r0, #1
   1fce4:	ldr	ip, [r1, r0, lsl #2]
   1fce8:	cmp	r5, ip
   1fcec:	ble	1fd04 <__assert_fail@plt+0xea5c>
   1fcf0:	b	1fd70 <__assert_fail@plt+0xeac8>
   1fcf4:	ldr	ip, [r1, r3, lsl #2]
   1fcf8:	cmp	r5, ip
   1fcfc:	bgt	1fd7c <__assert_fail@plt+0xead4>
   1fd00:	mov	r0, r3
   1fd04:	add	r3, r2, r0
   1fd08:	cmp	r2, r0
   1fd0c:	lsr	r3, r3, #1
   1fd10:	bcc	1fcf4 <__assert_fail@plt+0xea4c>
   1fd14:	lsl	r3, r2, #2
   1fd18:	ldr	r3, [r1, r3]!
   1fd1c:	cmp	r5, r3
   1fd20:	beq	1fd34 <__assert_fail@plt+0xea8c>
   1fd24:	ldr	r4, [sl, #116]	; 0x74
   1fd28:	add	r3, r5, r5, lsl #1
   1fd2c:	add	r4, r4, r3, lsl #3
   1fd30:	b	1fb64 <__assert_fail@plt+0xe8bc>
   1fd34:	cmp	lr, r2
   1fd38:	movgt	lr, #0
   1fd3c:	movle	lr, #1
   1fd40:	orrs	r3, lr, r2, lsr #31
   1fd44:	bne	1fd24 <__assert_fail@plt+0xea7c>
   1fd48:	cmp	r2, r4
   1fd4c:	str	r4, [sp, #84]	; 0x54
   1fd50:	bge	1fd24 <__assert_fail@plt+0xea7c>
   1fd54:	ldr	r3, [r1, #4]
   1fd58:	add	r2, r2, #1
   1fd5c:	str	r3, [r1], #4
   1fd60:	ldr	r3, [sp, #84]	; 0x54
   1fd64:	cmp	r2, r3
   1fd68:	blt	1fd54 <__assert_fail@plt+0xeaac>
   1fd6c:	b	1fd24 <__assert_fail@plt+0xea7c>
   1fd70:	mov	r2, r0
   1fd74:	mov	r0, r3
   1fd78:	mov	r3, r2
   1fd7c:	add	r2, r3, #1
   1fd80:	cmp	r2, r0
   1fd84:	bcc	1fcc0 <__assert_fail@plt+0xea18>
   1fd88:	b	1fd14 <__assert_fail@plt+0xea6c>
   1fd8c:	mov	r1, r2
   1fd90:	mov	r2, r3
   1fd94:	mov	r3, r1
   1fd98:	add	lr, r3, #1
   1fd9c:	cmp	lr, r2
   1fda0:	blt	1f954 <__assert_fail@plt+0xe6ac>
   1fda4:	b	1f9c0 <__assert_fail@plt+0xe718>
   1fda8:	ldrd	r2, [fp]
   1fdac:	add	r4, sp, #64	; 0x40
   1fdb0:	ldr	ip, [fp, #20]
   1fdb4:	ldr	r0, [fp, #24]
   1fdb8:	strd	r2, [sp, #64]	; 0x40
   1fdbc:	ldrd	r2, [fp, #8]
   1fdc0:	cmp	ip, #0
   1fdc4:	strd	r2, [r4, #8]
   1fdc8:	ldrd	r2, [fp, #16]
   1fdcc:	str	r0, [r4, #24]
   1fdd0:	strd	r2, [r4, #16]
   1fdd4:	ble	2010c <__assert_fail@plt+0xee64>
   1fdd8:	lsl	r0, ip, #2
   1fddc:	str	ip, [sp, #80]	; 0x50
   1fde0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   1fde4:	cmp	r0, #0
   1fde8:	str	r0, [sp, #88]	; 0x58
   1fdec:	beq	201b4 <__assert_fail@plt+0xef0c>
   1fdf0:	ldr	r2, [fp, #20]
   1fdf4:	ldr	r1, [fp, #24]
   1fdf8:	lsl	r2, r2, #2
   1fdfc:	bl	11038 <memcpy@plt>
   1fe00:	add	r0, sp, #80	; 0x50
   1fe04:	b	1fc34 <__assert_fail@plt+0xe98c>
   1fe08:	ldr	r3, [sl, #116]	; 0x74
   1fe0c:	str	r3, [sp, #32]
   1fe10:	ble	1ff00 <__assert_fail@plt+0xec58>
   1fe14:	mov	r7, r0
   1fe18:	str	r9, [sp, #24]
   1fe1c:	mov	r9, r8
   1fe20:	str	sl, [sp, #48]	; 0x30
   1fe24:	ldr	r3, [fp, #24]
   1fe28:	ldr	r0, [sp, #32]
   1fe2c:	ldr	r3, [r3, r7, lsl #2]
   1fe30:	add	r3, r3, r3, lsl #1
   1fe34:	add	r2, r0, r3, lsl #3
   1fe38:	ldr	r1, [r2, #8]
   1fe3c:	cmp	r9, r1
   1fe40:	ble	1fee8 <__assert_fail@plt+0xec40>
   1fe44:	ldr	r1, [r2, #4]
   1fe48:	cmp	r9, r1
   1fe4c:	bgt	1fee8 <__assert_fail@plt+0xec40>
   1fe50:	ldr	r1, [r2, #12]
   1fe54:	ldr	r2, [r0, r3, lsl #3]
   1fe58:	ldr	r3, [r6]
   1fe5c:	cmp	r9, r1
   1fe60:	ldr	r0, [r4, #4]
   1fe64:	ldr	r8, [r3, r2, lsl #3]
   1fe68:	str	r0, [sp, #40]	; 0x28
   1fe6c:	beq	1ff0c <__assert_fail@plt+0xec64>
   1fe70:	cmp	r0, #0
   1fe74:	ble	1fee8 <__assert_fail@plt+0xec40>
   1fe78:	mov	r5, #0
   1fe7c:	ldr	sl, [sp, #36]	; 0x24
   1fe80:	b	1fe90 <__assert_fail@plt+0xebe8>
   1fe84:	cmp	r5, r0
   1fe88:	bge	1fee0 <__assert_fail@plt+0xec38>
   1fe8c:	ldr	r3, [r6]
   1fe90:	ldr	r2, [r4, #8]
   1fe94:	ldr	r1, [r2, r5, lsl #2]
   1fe98:	add	r5, r5, #1
   1fe9c:	add	r2, r3, r1, lsl #3
   1fea0:	ldrb	r2, [r2, #4]
   1fea4:	sub	r2, r2, #8
   1fea8:	cmp	r2, #1
   1feac:	bhi	1fe84 <__assert_fail@plt+0xebdc>
   1feb0:	ldr	r3, [r3, r1, lsl #3]
   1feb4:	cmp	r8, r3
   1feb8:	bne	1fe84 <__assert_fail@plt+0xebdc>
   1febc:	mov	r3, sl
   1fec0:	mov	r2, r4
   1fec4:	mov	r0, r6
   1fec8:	bl	1bc60 <__assert_fail@plt+0xa9b8>
   1fecc:	cmp	r0, #0
   1fed0:	bne	200e8 <__assert_fail@plt+0xee40>
   1fed4:	ldr	r0, [r4, #4]
   1fed8:	cmp	r5, r0
   1fedc:	blt	1fe8c <__assert_fail@plt+0xebe4>
   1fee0:	ldr	r3, [fp, #20]
   1fee4:	str	r3, [sp, #24]
   1fee8:	ldr	r3, [sp, #24]
   1feec:	add	r7, r7, #1
   1fef0:	cmp	r7, r3
   1fef4:	blt	1fe24 <__assert_fail@plt+0xeb7c>
   1fef8:	ldr	sl, [sp, #48]	; 0x30
   1fefc:	mov	r8, r9
   1ff00:	mov	r3, #0
   1ff04:	str	r3, [sp, #60]	; 0x3c
   1ff08:	b	1f8fc <__assert_fail@plt+0xe654>
   1ff0c:	cmp	r0, #0
   1ff10:	ble	1fee8 <__assert_fail@plt+0xec40>
   1ff14:	ldr	sl, [r4, #8]
   1ff18:	mvn	r5, #0
   1ff1c:	mov	r1, r5
   1ff20:	str	r6, [sp, #44]	; 0x2c
   1ff24:	add	r2, sl, r0, lsl #2
   1ff28:	mov	r0, sl
   1ff2c:	mov	r6, r2
   1ff30:	b	1ff50 <__assert_fail@plt+0xeca8>
   1ff34:	cmp	ip, #9
   1ff38:	bne	1ff48 <__assert_fail@plt+0xeca0>
   1ff3c:	ldr	ip, [lr]
   1ff40:	cmp	r8, ip
   1ff44:	moveq	r5, r2
   1ff48:	cmp	r6, r0
   1ff4c:	beq	1ff78 <__assert_fail@plt+0xecd0>
   1ff50:	ldr	r2, [r0], #4
   1ff54:	add	lr, r3, r2, lsl #3
   1ff58:	ldrb	ip, [lr, #4]
   1ff5c:	cmp	ip, #8
   1ff60:	bne	1ff34 <__assert_fail@plt+0xec8c>
   1ff64:	ldr	ip, [r3, r2, lsl #3]
   1ff68:	cmp	r8, ip
   1ff6c:	moveq	r1, r2
   1ff70:	cmp	r6, r0
   1ff74:	bne	1ff50 <__assert_fail@plt+0xeca8>
   1ff78:	cmp	r1, #0
   1ff7c:	ldr	r6, [sp, #44]	; 0x2c
   1ff80:	bge	20120 <__assert_fail@plt+0xee78>
   1ff84:	cmp	r5, #0
   1ff88:	blt	1fee8 <__assert_fail@plt+0xec40>
   1ff8c:	mov	r3, sl
   1ff90:	ldr	sl, [sp, #40]	; 0x28
   1ff94:	mov	r8, #0
   1ff98:	ldr	r1, [r3, r8, lsl #2]
   1ff9c:	ldr	r3, [r6, #28]
   1ffa0:	add	lr, r1, r1, lsl #1
   1ffa4:	lsl	lr, lr, #2
   1ffa8:	add	r3, r3, lr
   1ffac:	ldr	r2, [r3, #4]
   1ffb0:	cmp	r2, #0
   1ffb4:	ble	20034 <__assert_fail@plt+0xed8c>
   1ffb8:	subs	r2, r2, #1
   1ffbc:	ldr	ip, [r3, #8]
   1ffc0:	moveq	r0, r2
   1ffc4:	beq	20028 <__assert_fail@plt+0xed80>
   1ffc8:	mov	r0, #0
   1ffcc:	str	r1, [sp, #24]
   1ffd0:	add	r3, r2, r0
   1ffd4:	lsr	r3, r3, #1
   1ffd8:	ldr	r1, [ip, r3, lsl #2]
   1ffdc:	cmp	r5, r1
   1ffe0:	bgt	2016c <__assert_fail@plt+0xeec4>
   1ffe4:	cmp	r3, r0
   1ffe8:	bls	20024 <__assert_fail@plt+0xed7c>
   1ffec:	add	r2, r3, r0
   1fff0:	lsr	r2, r2, #1
   1fff4:	ldr	r1, [ip, r2, lsl #2]
   1fff8:	cmp	r5, r1
   1fffc:	ble	20014 <__assert_fail@plt+0xed6c>
   20000:	b	20160 <__assert_fail@plt+0xeeb8>
   20004:	ldr	r1, [ip, r3, lsl #2]
   20008:	cmp	r5, r1
   2000c:	bgt	2016c <__assert_fail@plt+0xeec4>
   20010:	mov	r2, r3
   20014:	add	r3, r0, r2
   20018:	cmp	r0, r2
   2001c:	lsr	r3, r3, #1
   20020:	bcc	20004 <__assert_fail@plt+0xed5c>
   20024:	ldr	r1, [sp, #24]
   20028:	ldr	r3, [ip, r0, lsl #2]
   2002c:	cmp	r5, r3
   20030:	beq	2017c <__assert_fail@plt+0xeed4>
   20034:	ldr	r3, [r6, #24]
   20038:	add	lr, r3, lr
   2003c:	ldr	r2, [lr, #4]
   20040:	cmp	r2, #0
   20044:	ble	200bc <__assert_fail@plt+0xee14>
   20048:	subs	r2, r2, #1
   2004c:	ldr	ip, [lr, #8]
   20050:	moveq	r0, r2
   20054:	beq	200b0 <__assert_fail@plt+0xee08>
   20058:	mov	r0, #0
   2005c:	add	r3, r2, r0
   20060:	lsr	r3, r3, #1
   20064:	ldr	lr, [ip, r3, lsl #2]
   20068:	cmp	lr, r5
   2006c:	blt	20190 <__assert_fail@plt+0xeee8>
   20070:	cmp	r3, r0
   20074:	bls	200b0 <__assert_fail@plt+0xee08>
   20078:	add	r2, r3, r0
   2007c:	lsr	r2, r2, #1
   20080:	ldr	lr, [ip, r2, lsl #2]
   20084:	cmp	r5, lr
   20088:	ble	200a0 <__assert_fail@plt+0xedf8>
   2008c:	b	20184 <__assert_fail@plt+0xeedc>
   20090:	ldr	lr, [ip, r3, lsl #2]
   20094:	cmp	r5, lr
   20098:	bgt	20190 <__assert_fail@plt+0xeee8>
   2009c:	mov	r2, r3
   200a0:	add	r3, r0, r2
   200a4:	cmp	r0, r2
   200a8:	lsr	r3, r3, #1
   200ac:	bcc	20090 <__assert_fail@plt+0xede8>
   200b0:	ldr	r3, [ip, r0, lsl #2]
   200b4:	cmp	r5, r3
   200b8:	beq	2017c <__assert_fail@plt+0xeed4>
   200bc:	mov	r2, r4
   200c0:	mov	r0, r6
   200c4:	ldr	r3, [sp, #36]	; 0x24
   200c8:	bl	1bc60 <__assert_fail@plt+0xa9b8>
   200cc:	cmp	r0, #0
   200d0:	bne	200e8 <__assert_fail@plt+0xee40>
   200d4:	ldr	sl, [r4, #4]
   200d8:	cmp	sl, r8
   200dc:	ble	1fee0 <__assert_fail@plt+0xec38>
   200e0:	ldr	r3, [r4, #8]
   200e4:	b	1ff98 <__assert_fail@plt+0xecf0>
   200e8:	mov	r9, r0
   200ec:	b	1f7f8 <__assert_fail@plt+0xe550>
   200f0:	mov	r9, r0
   200f4:	ldr	r3, [sp, #64]	; 0x40
   200f8:	cmp	r3, #0
   200fc:	beq	1f7f8 <__assert_fail@plt+0xe550>
   20100:	ldr	r0, [sp, #88]	; 0x58
   20104:	bl	2ad30 <__assert_fail@plt+0x19a88>
   20108:	b	1f7f8 <__assert_fail@plt+0xe550>
   2010c:	add	r0, sp, #80	; 0x50
   20110:	str	r1, [sp, #80]	; 0x50
   20114:	str	r1, [r0, #4]
   20118:	str	r1, [r0, #8]
   2011c:	b	1fc34 <__assert_fail@plt+0xe98c>
   20120:	mov	r2, r4
   20124:	mov	r0, r6
   20128:	ldr	r3, [sp, #36]	; 0x24
   2012c:	bl	1bc60 <__assert_fail@plt+0xa9b8>
   20130:	cmp	r0, #0
   20134:	bne	200e8 <__assert_fail@plt+0xee40>
   20138:	cmp	r5, #0
   2013c:	blt	1fee0 <__assert_fail@plt+0xec38>
   20140:	ldr	r3, [r4, #4]
   20144:	cmp	r3, #0
   20148:	str	r3, [sp, #40]	; 0x28
   2014c:	ble	1fee0 <__assert_fail@plt+0xec38>
   20150:	ldr	sl, [r4, #8]
   20154:	b	1ff8c <__assert_fail@plt+0xece4>
   20158:	mov	r9, #12
   2015c:	b	200f4 <__assert_fail@plt+0xee4c>
   20160:	mov	r0, r2
   20164:	mov	r2, r3
   20168:	mov	r3, r0
   2016c:	add	r0, r3, #1
   20170:	cmp	r0, r2
   20174:	bcc	1ffd0 <__assert_fail@plt+0xed28>
   20178:	b	20024 <__assert_fail@plt+0xed7c>
   2017c:	add	r8, r8, #1
   20180:	b	200d8 <__assert_fail@plt+0xee30>
   20184:	mov	r0, r2
   20188:	mov	r2, r3
   2018c:	mov	r3, r0
   20190:	add	r0, r3, #1
   20194:	cmp	r0, r2
   20198:	bcc	2005c <__assert_fail@plt+0xedb4>
   2019c:	b	200b0 <__assert_fail@plt+0xee08>
   201a0:	ldr	r3, [r1]
   201a4:	cmp	r3, r5
   201a8:	bne	1fd24 <__assert_fail@plt+0xea7c>
   201ac:	mov	r2, r4
   201b0:	b	1fd48 <__assert_fail@plt+0xeaa0>
   201b4:	mov	r2, #0
   201b8:	mov	r3, #0
   201bc:	mov	r9, #12
   201c0:	strd	r2, [sp, #80]	; 0x50
   201c4:	b	200f4 <__assert_fail@plt+0xee4c>
   201c8:	mov	r9, #0
   201cc:	b	20100 <__assert_fail@plt+0xee58>
   201d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   201d4:	ldr	r4, [r1, #8]
   201d8:	strd	r6, [sp, #8]
   201dc:	mov	r6, #1
   201e0:	strd	r8, [sp, #16]
   201e4:	strd	sl, [sp, #24]
   201e8:	mov	sl, r0
   201ec:	mov	r0, #4
   201f0:	str	lr, [sp, #32]
   201f4:	sub	sp, sp, #68	; 0x44
   201f8:	mov	fp, r1
   201fc:	ldr	r9, [r1, #12]
   20200:	str	r6, [sp, #48]	; 0x30
   20204:	str	r6, [sp, #52]	; 0x34
   20208:	bl	2ab48 <__assert_fail@plt+0x198a0>
   2020c:	cmp	r0, #0
   20210:	str	r0, [sp, #56]	; 0x38
   20214:	beq	206dc <__assert_fail@plt+0xf434>
   20218:	mov	r2, r9
   2021c:	add	r3, sp, #48	; 0x30
   20220:	str	r4, [r0]
   20224:	mov	r1, fp
   20228:	mov	r0, sl
   2022c:	bl	1f780 <__assert_fail@plt+0xe4d8>
   20230:	subs	r4, r0, #0
   20234:	bne	206b8 <__assert_fail@plt+0xf410>
   20238:	cmp	r9, #0
   2023c:	movgt	r5, r6
   20240:	strgt	r4, [sp, #24]
   20244:	strgt	r6, [sp, #40]	; 0x28
   20248:	strgt	r5, [sp, #44]	; 0x2c
   2024c:	ble	206b8 <__assert_fail@plt+0xf410>
   20250:	ldr	r0, [fp]
   20254:	lsl	r3, r9, #2
   20258:	str	r3, [sp, #20]
   2025c:	ldr	r3, [r0, r9, lsl #2]
   20260:	cmp	r3, #0
   20264:	ldreq	r3, [sp, #24]
   20268:	movne	r3, #0
   2026c:	addeq	r3, r3, #1
   20270:	mov	r2, r3
   20274:	str	r3, [sp, #24]
   20278:	ldr	r3, [sl, #120]	; 0x78
   2027c:	cmp	r3, r2
   20280:	blt	206c0 <__assert_fail@plt+0xf418>
   20284:	mov	r2, #0
   20288:	ldr	r3, [sl, #100]	; 0x64
   2028c:	sub	r9, r9, #1
   20290:	str	r2, [sp, #52]	; 0x34
   20294:	ldr	r2, [sp, #20]
   20298:	add	r3, r3, r2
   2029c:	ldr	r5, [r3, #-4]
   202a0:	cmp	r5, #0
   202a4:	beq	2055c <__assert_fail@plt+0xf2b4>
   202a8:	ldr	r3, [r5, #20]
   202ac:	ldr	r7, [sl, #84]	; 0x54
   202b0:	cmp	r3, #0
   202b4:	ble	2055c <__assert_fail@plt+0xf2b4>
   202b8:	ldr	r3, [r5, #24]
   202bc:	add	r2, fp, #24
   202c0:	mov	r8, #0
   202c4:	ldr	r1, [r7]
   202c8:	str	r2, [sp, #32]
   202cc:	add	r2, fp, #20
   202d0:	ldr	r4, [r3]
   202d4:	str	r2, [sp, #36]	; 0x24
   202d8:	lsl	r6, r4, #3
   202dc:	add	r1, r1, r6
   202e0:	ldrb	r3, [r1, #6]
   202e4:	str	r6, [sp, #16]
   202e8:	mov	r6, r8
   202ec:	mov	r8, r5
   202f0:	tst	r3, #16
   202f4:	bne	203dc <__assert_fail@plt+0xf134>
   202f8:	mov	r2, r9
   202fc:	mov	r0, sl
   20300:	bl	17fe8 <__assert_fail@plt+0x6d40>
   20304:	cmp	r0, #0
   20308:	beq	203a8 <__assert_fail@plt+0xf100>
   2030c:	ldr	r3, [fp]
   20310:	ldr	r2, [sp, #20]
   20314:	ldr	r2, [r3, r2]
   20318:	cmp	r2, #0
   2031c:	beq	203a8 <__assert_fail@plt+0xf100>
   20320:	ldr	r3, [r2, #8]
   20324:	cmp	r3, #0
   20328:	ble	203a8 <__assert_fail@plt+0xf100>
   2032c:	ldr	r1, [r7, #12]
   20330:	subs	r3, r3, #1
   20334:	ldr	ip, [r2, #12]
   20338:	ldr	r0, [r1, r4, lsl #2]
   2033c:	moveq	r1, r3
   20340:	beq	2039c <__assert_fail@plt+0xf0f4>
   20344:	mov	r1, #0
   20348:	add	r2, r3, r1
   2034c:	lsr	r2, r2, #1
   20350:	ldr	lr, [ip, r2, lsl #2]
   20354:	cmp	r0, lr
   20358:	bgt	204cc <__assert_fail@plt+0xf224>
   2035c:	cmp	r2, r1
   20360:	bls	2039c <__assert_fail@plt+0xf0f4>
   20364:	add	r3, r2, r1
   20368:	lsr	r3, r3, #1
   2036c:	ldr	lr, [ip, r3, lsl #2]
   20370:	cmp	r0, lr
   20374:	ble	2038c <__assert_fail@plt+0xf0e4>
   20378:	b	204c0 <__assert_fail@plt+0xf218>
   2037c:	ldr	lr, [ip, r2, lsl #2]
   20380:	cmp	r0, lr
   20384:	bgt	204cc <__assert_fail@plt+0xf224>
   20388:	mov	r3, r2
   2038c:	add	r2, r1, r3
   20390:	cmp	r1, r3
   20394:	lsr	r2, r2, #1
   20398:	bcc	2037c <__assert_fail@plt+0xf0d4>
   2039c:	ldr	r3, [ip, r1, lsl #2]
   203a0:	cmp	r0, r3
   203a4:	beq	204e4 <__assert_fail@plt+0xf23c>
   203a8:	ldr	r3, [r8, #20]
   203ac:	add	r6, r6, #1
   203b0:	cmp	r6, r3
   203b4:	bge	2055c <__assert_fail@plt+0xf2b4>
   203b8:	ldr	r3, [r8, #24]
   203bc:	ldr	r1, [r7]
   203c0:	ldr	r4, [r3, r6, lsl #2]
   203c4:	lsl	r3, r4, #3
   203c8:	add	r1, r1, r3
   203cc:	str	r3, [sp, #16]
   203d0:	ldrb	r3, [r1, #6]
   203d4:	tst	r3, #16
   203d8:	beq	202f8 <__assert_fail@plt+0xf050>
   203dc:	ldr	r1, [fp, #12]
   203e0:	mov	r3, sl
   203e4:	mov	r2, r4
   203e8:	ldr	r5, [sl, #84]	; 0x54
   203ec:	str	r1, [sp, #28]
   203f0:	mov	r1, r5
   203f4:	ldr	r0, [r1], #128	; 0x80
   203f8:	str	r9, [sp]
   203fc:	bl	1aae4 <__assert_fail@plt+0x983c>
   20400:	cmp	r0, #0
   20404:	ble	205ac <__assert_fail@plt+0xf304>
   20408:	ldr	r1, [sp, #28]
   2040c:	add	r3, r9, r0
   20410:	cmp	r1, r3
   20414:	blt	204e8 <__assert_fail@plt+0xf240>
   20418:	ldr	r2, [fp]
   2041c:	ldr	r3, [r2, r3, lsl #2]
   20420:	cmp	r3, #0
   20424:	beq	204b0 <__assert_fail@plt+0xf208>
   20428:	ldr	r2, [r3, #8]
   2042c:	cmp	r2, #0
   20430:	ble	204b0 <__assert_fail@plt+0xf208>
   20434:	ldr	r1, [r5, #12]
   20438:	subs	r2, r2, #1
   2043c:	ldr	lr, [r3, #12]
   20440:	ldr	ip, [r1, r4, lsl #2]
   20444:	moveq	r1, r2
   20448:	beq	204a4 <__assert_fail@plt+0xf1fc>
   2044c:	mov	r1, #0
   20450:	add	r3, r2, r1
   20454:	lsr	r3, r3, #1
   20458:	ldr	r5, [lr, r3, lsl #2]
   2045c:	cmp	ip, r5
   20460:	bgt	20634 <__assert_fail@plt+0xf38c>
   20464:	cmp	r3, r1
   20468:	bls	204a4 <__assert_fail@plt+0xf1fc>
   2046c:	add	r2, r3, r1
   20470:	lsr	r2, r2, #1
   20474:	ldr	r5, [lr, r2, lsl #2]
   20478:	cmp	ip, r5
   2047c:	ble	20494 <__assert_fail@plt+0xf1ec>
   20480:	b	20628 <__assert_fail@plt+0xf380>
   20484:	ldr	r5, [lr, r3, lsl #2]
   20488:	cmp	ip, r5
   2048c:	bgt	20634 <__assert_fail@plt+0xf38c>
   20490:	mov	r2, r3
   20494:	add	r3, r1, r2
   20498:	cmp	r1, r2
   2049c:	lsr	r3, r3, #1
   204a0:	bcc	20484 <__assert_fail@plt+0xf1dc>
   204a4:	ldr	r3, [lr, r1, lsl #2]
   204a8:	cmp	ip, r3
   204ac:	beq	204e8 <__assert_fail@plt+0xf240>
   204b0:	ldr	r1, [r7]
   204b4:	ldr	r3, [sp, #16]
   204b8:	add	r1, r1, r3
   204bc:	b	202f8 <__assert_fail@plt+0xf050>
   204c0:	mov	r1, r3
   204c4:	mov	r3, r2
   204c8:	mov	r2, r1
   204cc:	add	r1, r2, #1
   204d0:	cmp	r3, r1
   204d4:	bhi	20348 <__assert_fail@plt+0xf0a0>
   204d8:	ldr	r3, [ip, r1, lsl #2]
   204dc:	cmp	r0, r3
   204e0:	bne	203a8 <__assert_fail@plt+0xf100>
   204e4:	mov	r0, #1
   204e8:	ldr	r3, [fp, #20]
   204ec:	cmp	r3, #0
   204f0:	beq	20520 <__assert_fail@plt+0xf278>
   204f4:	ldr	r3, [r7, #12]
   204f8:	add	ip, r9, r0
   204fc:	mov	r0, sl
   20500:	ldr	r2, [sp, #32]
   20504:	ldr	r1, [sp, #36]	; 0x24
   20508:	ldr	r3, [r3, r4, lsl #2]
   2050c:	str	ip, [sp]
   20510:	stmib	sp, {r4, r9}
   20514:	bl	1a4ec <__assert_fail@plt+0x9244>
   20518:	cmp	r0, #0
   2051c:	bne	203a8 <__assert_fail@plt+0xf100>
   20520:	ldr	r1, [sp, #48]	; 0x30
   20524:	cmp	r1, #0
   20528:	beq	205b4 <__assert_fail@plt+0xf30c>
   2052c:	ldr	r3, [sp, #52]	; 0x34
   20530:	ldr	r5, [sp, #56]	; 0x38
   20534:	cmp	r3, #0
   20538:	bne	205e0 <__assert_fail@plt+0xf338>
   2053c:	str	r4, [r5]
   20540:	add	r6, r6, #1
   20544:	ldr	r3, [sp, #52]	; 0x34
   20548:	add	r3, r3, #1
   2054c:	str	r3, [sp, #52]	; 0x34
   20550:	ldr	r3, [r8, #20]
   20554:	cmp	r6, r3
   20558:	blt	203b8 <__assert_fail@plt+0xf110>
   2055c:	add	r3, sp, #48	; 0x30
   20560:	mov	r2, r9
   20564:	mov	r1, fp
   20568:	mov	r0, sl
   2056c:	bl	1f780 <__assert_fail@plt+0xe4d8>
   20570:	cmp	r0, #0
   20574:	bne	20580 <__assert_fail@plt+0xf2d8>
   20578:	cmp	r9, #0
   2057c:	bne	20250 <__assert_fail@plt+0xefa8>
   20580:	mov	r4, r0
   20584:	ldr	r0, [sp, #56]	; 0x38
   20588:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2058c:	mov	r0, r4
   20590:	add	sp, sp, #68	; 0x44
   20594:	ldrd	r4, [sp]
   20598:	ldrd	r6, [sp, #8]
   2059c:	ldrd	r8, [sp, #16]
   205a0:	ldrd	sl, [sp, #24]
   205a4:	add	sp, sp, #32
   205a8:	pop	{pc}		; (ldr pc, [sp], #4)
   205ac:	beq	204b0 <__assert_fail@plt+0xf208>
   205b0:	b	204e8 <__assert_fail@plt+0xf240>
   205b4:	ldr	r3, [sp, #40]	; 0x28
   205b8:	mov	r0, #4
   205bc:	str	r3, [sp, #48]	; 0x30
   205c0:	ldr	r3, [sp, #44]	; 0x2c
   205c4:	str	r3, [sp, #52]	; 0x34
   205c8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   205cc:	cmp	r0, #0
   205d0:	str	r0, [sp, #56]	; 0x38
   205d4:	beq	2067c <__assert_fail@plt+0xf3d4>
   205d8:	str	r4, [r0]
   205dc:	b	203a8 <__assert_fail@plt+0xf100>
   205e0:	cmp	r1, r3
   205e4:	beq	20690 <__assert_fail@plt+0xf3e8>
   205e8:	ldr	r1, [r5]
   205ec:	mov	r2, r3
   205f0:	cmp	r1, r4
   205f4:	ble	20644 <__assert_fail@plt+0xf39c>
   205f8:	cmp	r3, #0
   205fc:	ble	20614 <__assert_fail@plt+0xf36c>
   20600:	lsl	r2, r3, #2
   20604:	mov	r1, r5
   20608:	add	r0, r5, #4
   2060c:	bl	11008 <memmove@plt>
   20610:	mov	r2, #0
   20614:	str	r4, [r5, r2, lsl #2]
   20618:	ldr	r3, [sp, #52]	; 0x34
   2061c:	add	r3, r3, #1
   20620:	str	r3, [sp, #52]	; 0x34
   20624:	b	203a8 <__assert_fail@plt+0xf100>
   20628:	mov	r1, r2
   2062c:	mov	r2, r3
   20630:	mov	r3, r1
   20634:	add	r1, r3, #1
   20638:	cmp	r1, r2
   2063c:	bcc	20450 <__assert_fail@plt+0xf1a8>
   20640:	b	204a4 <__assert_fail@plt+0xf1fc>
   20644:	sub	r1, r3, #-1073741823	; 0xc0000001
   20648:	ldr	r0, [r5, r1, lsl #2]
   2064c:	lsl	r1, r1, #2
   20650:	cmp	r0, r4
   20654:	ble	20614 <__assert_fail@plt+0xf36c>
   20658:	add	r1, r1, #4
   2065c:	add	r1, r5, r1
   20660:	str	r0, [r1], #-4
   20664:	sub	r3, r3, #1
   20668:	ldr	r0, [r1, #-4]
   2066c:	mov	r2, r3
   20670:	cmp	r0, r4
   20674:	bgt	20660 <__assert_fail@plt+0xf3b8>
   20678:	b	20614 <__assert_fail@plt+0xf36c>
   2067c:	mov	r2, #0
   20680:	mov	r3, #0
   20684:	mov	r4, #12
   20688:	strd	r2, [sp, #48]	; 0x30
   2068c:	b	20588 <__assert_fail@plt+0xf2e0>
   20690:	lsl	r3, r1, #1
   20694:	mov	r0, r5
   20698:	lsl	r1, r1, #3
   2069c:	str	r3, [sp, #48]	; 0x30
   206a0:	bl	2ab84 <__assert_fail@plt+0x198dc>
   206a4:	subs	r5, r0, #0
   206a8:	beq	206e4 <__assert_fail@plt+0xf43c>
   206ac:	str	r5, [sp, #56]	; 0x38
   206b0:	ldr	r3, [sp, #52]	; 0x34
   206b4:	b	205e8 <__assert_fail@plt+0xf340>
   206b8:	ldr	r0, [sp, #56]	; 0x38
   206bc:	b	20588 <__assert_fail@plt+0xf2e0>
   206c0:	mov	r1, #0
   206c4:	ldr	r2, [sp, #20]
   206c8:	mov	r4, r1
   206cc:	bl	111c4 <memset@plt>
   206d0:	ldr	r0, [sp, #56]	; 0x38
   206d4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   206d8:	b	2058c <__assert_fail@plt+0xf2e4>
   206dc:	mov	r4, #12
   206e0:	b	2058c <__assert_fail@plt+0xf2e4>
   206e4:	mov	r4, #12
   206e8:	ldr	r0, [sp, #56]	; 0x38
   206ec:	b	20588 <__assert_fail@plt+0xf2e0>
   206f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   206f4:	ldr	r3, [r0, #84]	; 0x54
   206f8:	strd	r6, [sp, #8]
   206fc:	ldr	r6, [r1]
   20700:	strd	r8, [sp, #16]
   20704:	strd	sl, [sp, #24]
   20708:	str	lr, [sp, #32]
   2070c:	sub	sp, sp, #84	; 0x54
   20710:	ldr	sl, [r0, #40]	; 0x28
   20714:	cmp	r6, #0
   20718:	str	r3, [sp, #24]
   2071c:	ble	20c4c <__assert_fail@plt+0xf9a4>
   20720:	lsl	r3, sl, #2
   20724:	mov	fp, r0
   20728:	mov	r9, sl
   2072c:	str	r2, [sp, #36]	; 0x24
   20730:	str	r3, [sp, #44]	; 0x2c
   20734:	mov	r3, #0
   20738:	str	r1, [sp, #56]	; 0x38
   2073c:	str	r3, [sp, #16]
   20740:	b	20788 <__assert_fail@plt+0xf4e0>
   20744:	tst	r0, #1
   20748:	beq	20774 <__assert_fail@plt+0xf4cc>
   2074c:	tst	r3, #8
   20750:	bne	20774 <__assert_fail@plt+0xf4cc>
   20754:	tst	r3, #32
   20758:	beq	20764 <__assert_fail@plt+0xf4bc>
   2075c:	tst	r0, #2
   20760:	beq	20774 <__assert_fail@plt+0xf4cc>
   20764:	tst	r3, #128	; 0x80
   20768:	beq	207f8 <__assert_fail@plt+0xf550>
   2076c:	tst	r0, #8
   20770:	bne	207f8 <__assert_fail@plt+0xf550>
   20774:	ldr	r3, [sp, #16]
   20778:	add	r3, r3, #1
   2077c:	cmp	r3, r6
   20780:	str	r3, [sp, #16]
   20784:	bge	20c4c <__assert_fail@plt+0xf9a4>
   20788:	ldr	r1, [sp, #16]
   2078c:	ldr	r3, [sp, #36]	; 0x24
   20790:	ldr	r2, [r3]
   20794:	ldr	r3, [sp, #24]
   20798:	ldr	sl, [r2, r1, lsl #2]
   2079c:	ldr	r3, [r3]
   207a0:	add	r3, r3, sl, lsl #3
   207a4:	ldrb	r2, [r3, #4]
   207a8:	cmp	r2, #4
   207ac:	bne	20774 <__assert_fail@plt+0xf4cc>
   207b0:	ldr	r4, [r3, #4]
   207b4:	mov	r3, #65280	; 0xff00
   207b8:	movt	r3, #3
   207bc:	and	r3, r3, r4
   207c0:	cmp	r3, #0
   207c4:	beq	207f8 <__assert_fail@plt+0xf550>
   207c8:	mov	r1, r9
   207cc:	mov	r0, fp
   207d0:	ldr	r2, [fp, #88]	; 0x58
   207d4:	bl	17ed0 <__assert_fail@plt+0x6c28>
   207d8:	ubfx	r3, r4, #8, #10
   207dc:	tst	r3, #4
   207e0:	bne	20744 <__assert_fail@plt+0xf49c>
   207e4:	tst	r3, #8
   207e8:	beq	20754 <__assert_fail@plt+0xf4ac>
   207ec:	tst	r0, #1
   207f0:	beq	20754 <__assert_fail@plt+0xf4ac>
   207f4:	b	20774 <__assert_fail@plt+0xf4cc>
   207f8:	ldr	ip, [fp, #108]	; 0x6c
   207fc:	cmp	ip, #0
   20800:	mov	r4, ip
   20804:	ble	20a8c <__assert_fail@plt+0xf7e4>
   20808:	ldr	r1, [fp, #116]	; 0x74
   2080c:	mov	r2, ip
   20810:	mov	r0, #0
   20814:	add	r3, r2, r0
   20818:	asr	r3, r3, #1
   2081c:	add	lr, r3, r3, lsl #1
   20820:	add	lr, r1, lr, lsl #3
   20824:	ldr	lr, [lr, #4]
   20828:	cmp	r9, lr
   2082c:	bgt	20a7c <__assert_fail@plt+0xf7d4>
   20830:	cmp	r3, r0
   20834:	ble	20880 <__assert_fail@plt+0xf5d8>
   20838:	add	r2, r3, r0
   2083c:	asr	r2, r2, #1
   20840:	add	lr, r2, r2, lsl #1
   20844:	add	lr, r1, lr, lsl #3
   20848:	ldr	lr, [lr, #4]
   2084c:	cmp	r9, lr
   20850:	ble	20870 <__assert_fail@plt+0xf5c8>
   20854:	b	20a70 <__assert_fail@plt+0xf7c8>
   20858:	add	lr, r3, r3, lsl #1
   2085c:	add	lr, r1, lr, lsl #3
   20860:	ldr	lr, [lr, #4]
   20864:	cmp	r9, lr
   20868:	bgt	20a7c <__assert_fail@plt+0xf7d4>
   2086c:	mov	r2, r3
   20870:	add	r3, r0, r2
   20874:	cmp	r0, r2
   20878:	asr	r3, r3, #1
   2087c:	blt	20858 <__assert_fail@plt+0xf5b0>
   20880:	cmp	ip, r0
   20884:	ble	20a8c <__assert_fail@plt+0xf7e4>
   20888:	add	r0, r0, r0, lsl #1
   2088c:	add	r1, r1, r0, lsl #3
   20890:	ldr	r3, [r1, #4]
   20894:	cmp	r9, r3
   20898:	bne	20a8c <__assert_fail@plt+0xf7e4>
   2089c:	add	r1, r1, #24
   208a0:	b	208b0 <__assert_fail@plt+0xf608>
   208a4:	ldrb	r3, [r1, #-28]	; 0xffffffe4
   208a8:	cmp	r3, #0
   208ac:	beq	20a8c <__assert_fail@plt+0xf7e4>
   208b0:	ldr	r3, [r1, #-24]	; 0xffffffe8
   208b4:	add	r1, r1, #24
   208b8:	cmp	sl, r3
   208bc:	bne	208a4 <__assert_fail@plt+0xf5fc>
   208c0:	lsl	r2, sl, #2
   208c4:	mov	r3, #0
   208c8:	cmp	r4, ip
   208cc:	str	r2, [sp, #40]	; 0x28
   208d0:	str	r3, [sp, #64]	; 0x40
   208d4:	bge	20c00 <__assert_fail@plt+0xf958>
   208d8:	add	r3, sl, sl, lsl #1
   208dc:	ldr	r8, [sp, #24]
   208e0:	lsl	r3, r3, #2
   208e4:	str	r3, [sp, #48]	; 0x30
   208e8:	b	209d0 <__assert_fail@plt+0xf728>
   208ec:	ldr	r2, [r8, #20]
   208f0:	ldr	r1, [sp, #48]	; 0x30
   208f4:	add	r2, r2, r1
   208f8:	ldr	r2, [r2, #8]
   208fc:	ldr	r2, [r2]
   20900:	add	r2, r2, r2, lsl #1
   20904:	add	r6, r6, r2, lsl #2
   20908:	add	r3, r9, r3
   2090c:	mov	r0, fp
   20910:	ldr	r2, [fp, #88]	; 0x58
   20914:	sub	r5, r3, r5
   20918:	sub	r1, r5, #1
   2091c:	bl	17ed0 <__assert_fail@plt+0x6c28>
   20920:	ldr	r2, [sp, #44]	; 0x2c
   20924:	mov	r3, r0
   20928:	ldr	r7, [fp, #100]	; 0x64
   2092c:	ldr	r2, [r7, r2]
   20930:	ldr	r1, [r7, r5, lsl #2]
   20934:	cmp	r2, #0
   20938:	ldrne	r2, [r2, #8]
   2093c:	cmp	r1, #0
   20940:	str	r2, [sp, #28]
   20944:	beq	20a24 <__assert_fail@plt+0xf77c>
   20948:	mov	r2, r6
   2094c:	add	r0, sp, #68	; 0x44
   20950:	ldr	r1, [r1, #40]	; 0x28
   20954:	str	r3, [sp, #32]
   20958:	bl	1f4b8 <__assert_fail@plt+0xe210>
   2095c:	cmp	r0, #0
   20960:	str	r0, [sp, #64]	; 0x40
   20964:	ldr	r3, [sp, #32]
   20968:	bne	20c3c <__assert_fail@plt+0xf994>
   2096c:	add	r2, sp, #68	; 0x44
   20970:	mov	r1, r8
   20974:	ldr	r7, [fp, #100]	; 0x64
   20978:	add	r0, sp, #64	; 0x40
   2097c:	bl	1cd20 <__assert_fail@plt+0xba78>
   20980:	str	r0, [r7, r5, lsl #2]
   20984:	ldr	r0, [sp, #76]	; 0x4c
   20988:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2098c:	ldr	r3, [fp, #100]	; 0x64
   20990:	ldr	r2, [r3, r5, lsl #2]
   20994:	cmp	r2, #0
   20998:	beq	20a48 <__assert_fail@plt+0xf7a0>
   2099c:	ldr	r2, [sp, #20]
   209a0:	cmp	r2, #0
   209a4:	bne	209c0 <__assert_fail@plt+0xf718>
   209a8:	ldr	r2, [sp, #44]	; 0x2c
   209ac:	ldr	r3, [r3, r2]
   209b0:	ldr	r2, [sp, #28]
   209b4:	ldr	r3, [r3, #8]
   209b8:	cmp	r3, r2
   209bc:	bgt	20bb8 <__assert_fail@plt+0xf910>
   209c0:	ldr	ip, [fp, #108]	; 0x6c
   209c4:	add	r4, r4, #1
   209c8:	cmp	r4, ip
   209cc:	bge	20c00 <__assert_fail@plt+0xf958>
   209d0:	ldr	r3, [fp, #116]	; 0x74
   209d4:	add	r2, r4, r4, lsl #1
   209d8:	ldr	r1, [r3, r2, lsl #3]
   209dc:	add	r3, r3, r2, lsl #3
   209e0:	cmp	sl, r1
   209e4:	bne	209c4 <__assert_fail@plt+0xf71c>
   209e8:	ldr	r2, [r3, #4]
   209ec:	cmp	r9, r2
   209f0:	bne	209c4 <__assert_fail@plt+0xf71c>
   209f4:	ldr	r5, [r3, #8]
   209f8:	ldr	r3, [r3, #12]
   209fc:	ldr	r6, [r8, #24]
   20a00:	subs	r2, r3, r5
   20a04:	str	r2, [sp, #20]
   20a08:	beq	208ec <__assert_fail@plt+0xf644>
   20a0c:	ldr	r2, [r8, #12]
   20a10:	ldr	r1, [sp, #40]	; 0x28
   20a14:	ldr	r2, [r2, r1]
   20a18:	add	r2, r2, r2, lsl #1
   20a1c:	add	r6, r6, r2, lsl #2
   20a20:	b	20908 <__assert_fail@plt+0xf660>
   20a24:	mov	r2, r6
   20a28:	mov	r1, r8
   20a2c:	add	r0, sp, #64	; 0x40
   20a30:	bl	1cd20 <__assert_fail@plt+0xba78>
   20a34:	ldr	r3, [fp, #100]	; 0x64
   20a38:	str	r0, [r7, r5, lsl #2]
   20a3c:	ldr	r2, [r3, r5, lsl #2]
   20a40:	cmp	r2, #0
   20a44:	bne	2099c <__assert_fail@plt+0xf6f4>
   20a48:	ldr	r0, [sp, #64]	; 0x40
   20a4c:	cmp	r0, #0
   20a50:	beq	2099c <__assert_fail@plt+0xf6f4>
   20a54:	add	sp, sp, #84	; 0x54
   20a58:	ldrd	r4, [sp]
   20a5c:	ldrd	r6, [sp, #8]
   20a60:	ldrd	r8, [sp, #16]
   20a64:	ldrd	sl, [sp, #24]
   20a68:	add	sp, sp, #32
   20a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   20a70:	mov	r0, r2
   20a74:	mov	r2, r3
   20a78:	mov	r3, r0
   20a7c:	add	r0, r3, #1
   20a80:	cmp	r0, r2
   20a84:	blt	20814 <__assert_fail@plt+0xf56c>
   20a88:	b	20880 <__assert_fail@plt+0xf5d8>
   20a8c:	ldr	r3, [fp, #84]	; 0x54
   20a90:	ldr	r1, [fp, #124]	; 0x7c
   20a94:	str	r3, [sp, #52]	; 0x34
   20a98:	ldr	r3, [r3]
   20a9c:	cmp	r1, #0
   20aa0:	ldr	r2, [r3, sl, lsl #3]
   20aa4:	str	r2, [sp, #48]	; 0x30
   20aa8:	ble	208c0 <__assert_fail@plt+0xf618>
   20aac:	mov	r2, #0
   20ab0:	str	sl, [sp, #40]	; 0x28
   20ab4:	str	r2, [sp, #28]
   20ab8:	ldr	r2, [fp, #4]
   20abc:	str	r9, [sp, #32]
   20ac0:	str	r4, [sp, #60]	; 0x3c
   20ac4:	mov	sl, r2
   20ac8:	ldr	r0, [sp, #28]
   20acc:	ldr	r2, [fp, #132]	; 0x84
   20ad0:	ldr	r4, [r2, r0, lsl #2]
   20ad4:	ldr	r2, [r4, #4]
   20ad8:	ldr	r3, [r3, r2, lsl #3]
   20adc:	ldr	r2, [sp, #48]	; 0x30
   20ae0:	cmp	r2, r3
   20ae4:	beq	20b08 <__assert_fail@plt+0xf860>
   20ae8:	ldr	r3, [sp, #28]
   20aec:	add	r3, r3, #1
   20af0:	cmp	r3, r1
   20af4:	str	r3, [sp, #28]
   20af8:	bge	20e44 <__assert_fail@plt+0xfb9c>
   20afc:	ldr	r3, [sp, #52]	; 0x34
   20b00:	ldr	r3, [r3]
   20b04:	b	20ac8 <__assert_fail@plt+0xf820>
   20b08:	ldr	r6, [r4]
   20b0c:	ldr	ip, [r4, #16]
   20b10:	ldr	r7, [sp, #32]
   20b14:	cmp	ip, #0
   20b18:	ble	20c64 <__assert_fail@plt+0xf9bc>
   20b1c:	mov	r3, sl
   20b20:	mov	r5, #0
   20b24:	mov	sl, r7
   20b28:	mov	r7, r6
   20b2c:	b	20b40 <__assert_fail@plt+0xf898>
   20b30:	ldr	ip, [r4, #16]
   20b34:	mov	sl, r6
   20b38:	cmp	r5, ip
   20b3c:	bge	20c54 <__assert_fail@plt+0xf9ac>
   20b40:	ldr	r2, [r4, #20]
   20b44:	ldr	r9, [r2, r5, lsl #2]
   20b48:	ldr	r8, [r9, #4]
   20b4c:	sub	r2, r8, r7
   20b50:	cmp	r2, #0
   20b54:	add	r6, r2, sl
   20b58:	ble	20b84 <__assert_fail@plt+0xf8dc>
   20b5c:	ldr	r1, [fp, #28]
   20b60:	cmp	r1, r6
   20b64:	blt	20c0c <__assert_fail@plt+0xf964>
   20b68:	add	r1, r3, r7
   20b6c:	add	r0, r3, sl
   20b70:	str	r3, [sp, #20]
   20b74:	bl	11074 <memcmp@plt>
   20b78:	cmp	r0, #0
   20b7c:	ldr	r3, [sp, #20]
   20b80:	bne	20dec <__assert_fail@plt+0xfb44>
   20b84:	ldr	r1, [sp, #32]
   20b88:	mov	r2, r9
   20b8c:	mov	r0, fp
   20b90:	add	r5, r5, #1
   20b94:	mov	r7, r8
   20b98:	ldr	r3, [sp, #40]	; 0x28
   20b9c:	str	r1, [sp]
   20ba0:	mov	r1, r4
   20ba4:	bl	1e9c0 <__assert_fail@plt+0xd718>
   20ba8:	cmp	r0, #1
   20bac:	ldr	r3, [fp, #4]
   20bb0:	bls	20b30 <__assert_fail@plt+0xf888>
   20bb4:	b	20a54 <__assert_fail@plt+0xf7ac>
   20bb8:	add	r5, r6, #4
   20bbc:	add	r6, r6, #8
   20bc0:	mov	r2, r6
   20bc4:	mov	r1, r5
   20bc8:	mov	r3, r9
   20bcc:	mov	r0, fp
   20bd0:	bl	18d44 <__assert_fail@plt+0x7a9c>
   20bd4:	cmp	r0, #0
   20bd8:	str	r0, [sp, #64]	; 0x40
   20bdc:	bne	20a54 <__assert_fail@plt+0xf7ac>
   20be0:	mov	r2, r6
   20be4:	mov	r1, r5
   20be8:	mov	r0, fp
   20bec:	bl	206f0 <__assert_fail@plt+0xf448>
   20bf0:	cmp	r0, #0
   20bf4:	str	r0, [sp, #64]	; 0x40
   20bf8:	beq	209c0 <__assert_fail@plt+0xf718>
   20bfc:	b	20a54 <__assert_fail@plt+0xf7ac>
   20c00:	ldr	r3, [sp, #56]	; 0x38
   20c04:	ldr	r6, [r3]
   20c08:	b	20774 <__assert_fail@plt+0xf4cc>
   20c0c:	ldr	lr, [fp, #48]	; 0x30
   20c10:	mov	r1, r6
   20c14:	mov	r0, fp
   20c18:	str	r2, [sp, #20]
   20c1c:	cmp	lr, r6
   20c20:	blt	20e88 <__assert_fail@plt+0xfbe0>
   20c24:	bl	1b7c0 <__assert_fail@plt+0xa518>
   20c28:	cmp	r0, #0
   20c2c:	bne	20a54 <__assert_fail@plt+0xf7ac>
   20c30:	ldr	r3, [fp, #4]
   20c34:	ldr	r2, [sp, #20]
   20c38:	b	20b68 <__assert_fail@plt+0xf8c0>
   20c3c:	ldr	r0, [sp, #76]	; 0x4c
   20c40:	bl	2ad30 <__assert_fail@plt+0x19a88>
   20c44:	ldr	r0, [sp, #64]	; 0x40
   20c48:	b	20a54 <__assert_fail@plt+0xf7ac>
   20c4c:	mov	r0, #0
   20c50:	b	20a54 <__assert_fail@plt+0xf7ac>
   20c54:	mov	r9, r6
   20c58:	mov	sl, r3
   20c5c:	add	r6, r8, #1
   20c60:	mov	r7, r9
   20c64:	ldr	r3, [sp, #32]
   20c68:	cmp	r3, r6
   20c6c:	blt	20dbc <__assert_fail@plt+0xfb14>
   20c70:	ldr	r8, [sp, #48]	; 0x30
   20c74:	mov	r9, r3
   20c78:	ldr	r3, [r4]
   20c7c:	sub	r3, r6, r3
   20c80:	cmp	r3, #0
   20c84:	ble	20cb0 <__assert_fail@plt+0xfa08>
   20c88:	ldr	r3, [fp, #28]
   20c8c:	cmp	r3, r7
   20c90:	ble	20e18 <__assert_fail@plt+0xfb70>
   20c94:	add	r5, r7, #1
   20c98:	add	r3, sl, r6
   20c9c:	ldrb	r2, [sl, r7]
   20ca0:	ldrb	r3, [r3, #-1]
   20ca4:	cmp	r2, r3
   20ca8:	bne	20dbc <__assert_fail@plt+0xfb14>
   20cac:	mov	r7, r5
   20cb0:	ldr	r3, [fp, #100]	; 0x64
   20cb4:	ldr	r3, [r3, r6, lsl #2]
   20cb8:	cmp	r3, #0
   20cbc:	beq	20db0 <__assert_fail@plt+0xfb08>
   20cc0:	ldr	ip, [r3, #8]
   20cc4:	cmp	ip, #0
   20cc8:	ble	20db0 <__assert_fail@plt+0xfb08>
   20ccc:	ldr	r2, [r3, #12]
   20cd0:	mov	r3, #0
   20cd4:	ldr	r1, [sp, #52]	; 0x34
   20cd8:	sub	r2, r2, #4
   20cdc:	ldr	r0, [r1]
   20ce0:	b	20cec <__assert_fail@plt+0xfa44>
   20ce4:	cmp	ip, r3
   20ce8:	beq	20db0 <__assert_fail@plt+0xfb08>
   20cec:	ldr	r5, [r2, #4]!
   20cf0:	add	r3, r3, #1
   20cf4:	add	r1, r0, r5, lsl #3
   20cf8:	ldrb	r1, [r1, #4]
   20cfc:	cmp	r1, #9
   20d00:	bne	20ce4 <__assert_fail@plt+0xfa3c>
   20d04:	ldr	r1, [r0, r5, lsl #3]
   20d08:	cmp	r8, r1
   20d0c:	bne	20ce4 <__assert_fail@plt+0xfa3c>
   20d10:	cmn	r5, #1
   20d14:	beq	20db0 <__assert_fail@plt+0xfb08>
   20d18:	ldr	r3, [r4]
   20d1c:	ldr	r1, [r4, #8]
   20d20:	cmp	r1, #0
   20d24:	beq	20dc4 <__assert_fail@plt+0xfb1c>
   20d28:	mov	ip, #9
   20d2c:	mov	r0, fp
   20d30:	ldr	r2, [r4, #4]
   20d34:	stm	sp, {r5, r6, ip}
   20d38:	bl	1e204 <__assert_fail@plt+0xcf5c>
   20d3c:	cmp	r0, #1
   20d40:	beq	20db0 <__assert_fail@plt+0xfb08>
   20d44:	cmp	r0, #0
   20d48:	bne	20a54 <__assert_fail@plt+0xf7ac>
   20d4c:	ldrd	r2, [r4, #12]
   20d50:	cmp	r3, r2
   20d54:	beq	20e60 <__assert_fail@plt+0xfbb8>
   20d58:	mov	r1, #20
   20d5c:	mov	r0, #1
   20d60:	bl	2aad4 <__assert_fail@plt+0x1982c>
   20d64:	subs	ip, r0, #0
   20d68:	beq	20e58 <__assert_fail@plt+0xfbb0>
   20d6c:	ldr	lr, [r4, #16]
   20d70:	mov	r2, ip
   20d74:	mov	r1, r4
   20d78:	mov	r0, fp
   20d7c:	ldr	r3, [sp, #40]	; 0x28
   20d80:	add	sl, lr, #1
   20d84:	str	sl, [sp, #20]
   20d88:	ldr	sl, [r4, #20]
   20d8c:	str	ip, [sl, lr, lsl #2]
   20d90:	stm	ip, {r5, r6}
   20d94:	ldr	ip, [sp, #20]
   20d98:	str	ip, [r4, #16]
   20d9c:	str	r9, [sp]
   20da0:	bl	1e9c0 <__assert_fail@plt+0xd718>
   20da4:	cmp	r0, #1
   20da8:	ldr	sl, [fp, #4]
   20dac:	bhi	20a54 <__assert_fail@plt+0xf7ac>
   20db0:	add	r6, r6, #1
   20db4:	cmp	r9, r6
   20db8:	bge	20c78 <__assert_fail@plt+0xf9d0>
   20dbc:	ldr	r1, [fp, #124]	; 0x7c
   20dc0:	b	20ae8 <__assert_fail@plt+0xf840>
   20dc4:	sub	r3, r6, r3
   20dc8:	mov	r0, #12
   20dcc:	add	r1, r3, #1
   20dd0:	bl	2aad4 <__assert_fail@plt+0x1982c>
   20dd4:	cmp	r0, #0
   20dd8:	mov	r1, r0
   20ddc:	str	r0, [r4, #8]
   20de0:	beq	20e58 <__assert_fail@plt+0xfbb0>
   20de4:	ldr	r3, [r4]
   20de8:	b	20d28 <__assert_fail@plt+0xfa80>
   20dec:	ldr	ip, [r4, #16]
   20df0:	mov	r6, r7
   20df4:	mov	r7, sl
   20df8:	mov	sl, r3
   20dfc:	cmp	r5, ip
   20e00:	blt	20dbc <__assert_fail@plt+0xfb14>
   20e04:	cmp	r5, #0
   20e08:	ble	20c64 <__assert_fail@plt+0xf9bc>
   20e0c:	mov	r9, r7
   20e10:	mov	r8, r6
   20e14:	b	20c5c <__assert_fail@plt+0xf9b4>
   20e18:	ldr	r3, [fp, #48]	; 0x30
   20e1c:	cmp	r3, r7
   20e20:	ble	20dbc <__assert_fail@plt+0xfb14>
   20e24:	add	r5, r7, #1
   20e28:	mov	r0, fp
   20e2c:	mov	r1, r5
   20e30:	bl	1b5d0 <__assert_fail@plt+0xa328>
   20e34:	cmp	r0, #0
   20e38:	bne	20a54 <__assert_fail@plt+0xf7ac>
   20e3c:	ldr	sl, [fp, #4]
   20e40:	b	20c98 <__assert_fail@plt+0xf9f0>
   20e44:	ldr	r9, [sp, #32]
   20e48:	ldr	sl, [sp, #40]	; 0x28
   20e4c:	ldr	r4, [sp, #60]	; 0x3c
   20e50:	ldr	ip, [fp, #108]	; 0x6c
   20e54:	b	208c0 <__assert_fail@plt+0xf618>
   20e58:	mov	r0, #12
   20e5c:	b	20a54 <__assert_fail@plt+0xf7ac>
   20e60:	lsl	r3, r3, #1
   20e64:	ldr	r0, [r4, #20]
   20e68:	add	sl, r3, #1
   20e6c:	lsl	r1, sl, #2
   20e70:	bl	2ab84 <__assert_fail@plt+0x198dc>
   20e74:	cmp	r0, #0
   20e78:	beq	20e58 <__assert_fail@plt+0xfbb0>
   20e7c:	str	sl, [r4, #12]
   20e80:	str	r0, [r4, #20]
   20e84:	b	20d58 <__assert_fail@plt+0xfab0>
   20e88:	mov	r6, r7
   20e8c:	mov	r7, sl
   20e90:	mov	sl, r3
   20e94:	b	20dfc <__assert_fail@plt+0xfb54>
   20e98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20e9c:	mov	r4, r1
   20ea0:	ldr	r5, [r1, #40]	; 0x28
   20ea4:	ldr	r3, [r1, #104]	; 0x68
   20ea8:	strd	r6, [sp, #8]
   20eac:	strd	r8, [sp, #16]
   20eb0:	str	sl, [sp, #24]
   20eb4:	mov	sl, r0
   20eb8:	str	lr, [sp, #28]
   20ebc:	sub	sp, sp, #16
   20ec0:	cmp	r3, r5
   20ec4:	ldr	r8, [r1, #84]	; 0x54
   20ec8:	ldr	r9, [r1, #100]	; 0x64
   20ecc:	bge	20f08 <__assert_fail@plt+0xfc60>
   20ed0:	mov	r6, r2
   20ed4:	str	r2, [r9, r5, lsl #2]
   20ed8:	str	r5, [r1, #104]	; 0x68
   20edc:	ldr	r3, [r8, #76]	; 0x4c
   20ee0:	cmp	r3, #0
   20ee4:	bne	20fd0 <__assert_fail@plt+0xfd28>
   20ee8:	mov	r0, r6
   20eec:	add	sp, sp, #16
   20ef0:	ldrd	r4, [sp]
   20ef4:	ldrd	r6, [sp, #8]
   20ef8:	ldrd	r8, [sp, #16]
   20efc:	ldr	sl, [sp, #24]
   20f00:	add	sp, sp, #28
   20f04:	pop	{pc}		; (ldr pc, [sp], #4)
   20f08:	ldr	r3, [r9, r5, lsl #2]
   20f0c:	cmp	r3, #0
   20f10:	moveq	r6, r2
   20f14:	streq	r2, [r9, r5, lsl #2]
   20f18:	beq	20edc <__assert_fail@plt+0xfc34>
   20f1c:	cmp	r2, #0
   20f20:	ldr	r3, [r3, #40]	; 0x28
   20f24:	beq	20f90 <__assert_fail@plt+0xfce8>
   20f28:	ldr	r7, [r2, #40]	; 0x28
   20f2c:	add	r0, sp, #4
   20f30:	mov	r2, r3
   20f34:	mov	r1, r7
   20f38:	bl	1f4b8 <__assert_fail@plt+0xe210>
   20f3c:	cmp	r0, #0
   20f40:	str	r0, [sl]
   20f44:	bne	21034 <__assert_fail@plt+0xfd8c>
   20f48:	ldr	r1, [r4, #40]	; 0x28
   20f4c:	mov	r0, r4
   20f50:	ldr	r2, [r4, #88]	; 0x58
   20f54:	sub	r1, r1, #1
   20f58:	bl	17ed0 <__assert_fail@plt+0x6c28>
   20f5c:	ldr	r9, [r4, #100]	; 0x64
   20f60:	mov	r3, r0
   20f64:	add	r2, sp, #4
   20f68:	mov	r1, r8
   20f6c:	mov	r0, sl
   20f70:	bl	1cd20 <__assert_fail@plt+0xba78>
   20f74:	cmp	r7, #0
   20f78:	mov	r6, r0
   20f7c:	str	r0, [r9, r5, lsl #2]
   20f80:	beq	20edc <__assert_fail@plt+0xfc34>
   20f84:	ldr	r0, [sp, #12]
   20f88:	bl	2ad30 <__assert_fail@plt+0x19a88>
   20f8c:	b	20edc <__assert_fail@plt+0xfc34>
   20f90:	ldrd	r6, [r3]
   20f94:	sub	r1, r5, #1
   20f98:	mov	r0, r4
   20f9c:	ldr	r2, [r4, #88]	; 0x58
   20fa0:	strd	r6, [sp, #4]
   20fa4:	ldr	r3, [r3, #8]
   20fa8:	str	r3, [sp, #12]
   20fac:	bl	17ed0 <__assert_fail@plt+0x6c28>
   20fb0:	mov	r3, r0
   20fb4:	add	r2, sp, #4
   20fb8:	mov	r1, r8
   20fbc:	mov	r0, sl
   20fc0:	bl	1cd20 <__assert_fail@plt+0xba78>
   20fc4:	mov	r6, r0
   20fc8:	str	r0, [r9, r5, lsl #2]
   20fcc:	b	20edc <__assert_fail@plt+0xfc34>
   20fd0:	cmp	r6, #0
   20fd4:	beq	21034 <__assert_fail@plt+0xfd8c>
   20fd8:	add	r7, r6, #8
   20fdc:	add	r8, r6, #12
   20fe0:	mov	r1, r7
   20fe4:	mov	r2, r8
   20fe8:	mov	r3, r5
   20fec:	mov	r0, r4
   20ff0:	bl	18d44 <__assert_fail@plt+0x7a9c>
   20ff4:	cmp	r0, #0
   20ff8:	str	r0, [sl]
   20ffc:	bne	21034 <__assert_fail@plt+0xfd8c>
   21000:	ldrb	r3, [r6, #52]	; 0x34
   21004:	tst	r3, #64	; 0x40
   21008:	beq	20ee8 <__assert_fail@plt+0xfc40>
   2100c:	mov	r2, r8
   21010:	mov	r1, r7
   21014:	mov	r0, r4
   21018:	bl	206f0 <__assert_fail@plt+0xf448>
   2101c:	cmp	r0, #0
   21020:	str	r0, [sl]
   21024:	bne	21034 <__assert_fail@plt+0xfd8c>
   21028:	ldr	r3, [r4, #100]	; 0x64
   2102c:	ldr	r6, [r3, r5, lsl #2]
   21030:	b	20ee8 <__assert_fail@plt+0xfc40>
   21034:	mov	r6, #0
   21038:	b	20ee8 <__assert_fail@plt+0xfc40>
   2103c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21040:	mov	r4, r0
   21044:	mov	r5, r3
   21048:	strd	r6, [sp, #8]
   2104c:	strd	r8, [sp, #16]
   21050:	strd	sl, [sp, #24]
   21054:	str	lr, [sp, #32]
   21058:	sub	sp, sp, #428	; 0x1ac
   2105c:	ldr	sl, [r0]
   21060:	str	r0, [sp, #32]
   21064:	add	r0, sp, #144	; 0x90
   21068:	str	r1, [sp, #56]	; 0x38
   2106c:	mov	r1, #0
   21070:	str	r2, [sp, #72]	; 0x48
   21074:	mov	r2, #136	; 0x88
   21078:	ldr	r6, [sp, #464]	; 0x1d0
   2107c:	bl	111c4 <memset@plt>
   21080:	ldr	r2, [r4, #16]
   21084:	cmp	r2, #0
   21088:	str	r2, [sp, #48]	; 0x30
   2108c:	str	sl, [sp, #228]	; 0xe4
   21090:	beq	210ac <__assert_fail@plt+0xfe04>
   21094:	ldrb	r2, [r4, #28]
   21098:	subs	r3, r5, r6
   2109c:	movne	r3, #1
   210a0:	ands	r3, r3, r2, lsr #3
   210a4:	streq	r3, [sp, #48]	; 0x30
   210a8:	bne	21450 <__assert_fail@plt+0x101a8>
   210ac:	ldr	r3, [sp, #32]
   210b0:	ldr	r2, [sp, #472]	; 0x1d8
   210b4:	ldr	r3, [r3, #24]
   210b8:	cmp	r3, r2
   210bc:	movcs	r3, #0
   210c0:	strcs	r3, [sp, #108]	; 0x6c
   210c4:	bcs	210e4 <__assert_fail@plt+0xfe3c>
   210c8:	sub	r2, r2, #1
   210cc:	sub	r1, r3, r2
   210d0:	sub	r3, r2, r3
   210d4:	str	r3, [sp, #108]	; 0x6c
   210d8:	ldr	r3, [sp, #472]	; 0x1d8
   210dc:	add	r3, r3, r1
   210e0:	str	r3, [sp, #472]	; 0x1d8
   210e4:	ldr	ip, [sp, #32]
   210e8:	ldr	r3, [ip, #8]
   210ec:	cmp	r3, #0
   210f0:	beq	21d34 <__assert_fail@plt+0x10a8c>
   210f4:	ldr	r3, [sl, #36]	; 0x24
   210f8:	cmp	r3, #0
   210fc:	beq	21d34 <__assert_fail@plt+0x10a8c>
   21100:	ldr	r2, [sl, #40]	; 0x28
   21104:	cmp	r2, #0
   21108:	beq	21d34 <__assert_fail@plt+0x10a8c>
   2110c:	ldr	r0, [sl, #44]	; 0x2c
   21110:	cmp	r0, #0
   21114:	beq	21d34 <__assert_fail@plt+0x10a8c>
   21118:	ldr	r1, [sl, #48]	; 0x30
   2111c:	cmp	r1, #0
   21120:	beq	21d34 <__assert_fail@plt+0x10a8c>
   21124:	ldr	r3, [r3, #8]
   21128:	cmp	r3, #0
   2112c:	bne	21170 <__assert_fail@plt+0xfec8>
   21130:	ldr	r3, [r2, #8]
   21134:	cmp	r3, #0
   21138:	bne	21170 <__assert_fail@plt+0xfec8>
   2113c:	ldr	r3, [r0, #8]
   21140:	cmp	r3, #0
   21144:	beq	21154 <__assert_fail@plt+0xfeac>
   21148:	ldrsb	r3, [ip, #28]
   2114c:	cmp	r3, #0
   21150:	blt	21170 <__assert_fail@plt+0xfec8>
   21154:	adds	r6, r6, #0
   21158:	movne	r6, #1
   2115c:	cmp	r5, #0
   21160:	moveq	r6, #0
   21164:	cmp	r6, #0
   21168:	bne	21d34 <__assert_fail@plt+0x10a8c>
   2116c:	mov	r5, r6
   21170:	ldr	r3, [sp, #472]	; 0x1d8
   21174:	cmp	r3, #0
   21178:	bne	21440 <__assert_fail@plt+0x10198>
   2117c:	ldr	r3, [sl, #76]	; 0x4c
   21180:	adds	r3, r3, #0
   21184:	movne	r3, #1
   21188:	str	r3, [sp, #20]
   2118c:	str	r3, [sp, #60]	; 0x3c
   21190:	ldr	r8, [sp, #32]
   21194:	add	r0, sp, #144	; 0x90
   21198:	ldr	r2, [sp, #56]	; 0x38
   2119c:	ldr	r3, [sl, #8]
   211a0:	ldr	ip, [r8, #12]
   211a4:	str	r2, [sp, #144]	; 0x90
   211a8:	ldr	lr, [sl, #92]	; 0x5c
   211ac:	add	r3, r3, #1
   211b0:	ldrb	r2, [sl, #88]	; 0x58
   211b4:	and	r4, ip, #4194304	; 0x400000
   211b8:	ubfx	ip, ip, #22, #1
   211bc:	ldr	r8, [r8, #20]
   211c0:	cmp	r3, lr
   211c4:	ldr	r7, [sp, #72]	; 0x48
   211c8:	movlt	r3, lr
   211cc:	str	r8, [sp, #80]	; 0x50
   211d0:	strb	ip, [sp, #216]	; 0xd8
   211d4:	ubfx	ip, r2, #2, #1
   211d8:	add	r1, r7, #1
   211dc:	ubfx	r2, r2, #3, #1
   211e0:	str	lr, [sp, #224]	; 0xe0
   211e4:	orrs	lr, r8, r4
   211e8:	str	r7, [sp, #188]	; 0xbc
   211ec:	movne	lr, #1
   211f0:	moveq	lr, #0
   211f4:	str	r7, [sp, #192]	; 0xc0
   211f8:	cmp	r3, r1
   211fc:	str	r7, [sp, #196]	; 0xc4
   21200:	movlt	r1, r3
   21204:	str	r7, [sp, #200]	; 0xc8
   21208:	str	r8, [sp, #208]	; 0xd0
   2120c:	strb	ip, [sp, #217]	; 0xd9
   21210:	strb	r2, [sp, #218]	; 0xda
   21214:	strb	lr, [sp, #219]	; 0xdb
   21218:	bl	16bfc <__assert_fail@plt+0x5954>
   2121c:	subs	r3, r0, #0
   21220:	str	r3, [sp, #36]	; 0x24
   21224:	bne	21908 <__assert_fail@plt+0x10660>
   21228:	ldrb	r3, [sl, #88]	; 0x58
   2122c:	add	r1, sl, #96	; 0x60
   21230:	ldrb	r2, [sp, #219]	; 0xdb
   21234:	str	r1, [sp, #212]	; 0xd4
   21238:	ubfx	r3, r3, #4, #1
   2123c:	cmp	r2, #0
   21240:	strb	r3, [sp, #222]	; 0xde
   21244:	bne	2125c <__assert_fail@plt+0xffb4>
   21248:	ldr	r3, [sl, #92]	; 0x5c
   2124c:	ldr	r2, [sp, #56]	; 0x38
   21250:	cmp	r3, #1
   21254:	str	r2, [sp, #148]	; 0x94
   21258:	ble	22018 <__assert_fail@plt+0x10d70>
   2125c:	mov	r2, #0
   21260:	ldr	r3, [sp, #32]
   21264:	mvn	r1, #0
   21268:	str	r2, [sp, #172]	; 0xac
   2126c:	str	r2, [sp, #176]	; 0xb0
   21270:	ldr	r2, [sp, #468]	; 0x1d4
   21274:	ldrb	r3, [r3, #28]
   21278:	str	r2, [sp, #196]	; 0xc4
   2127c:	str	r2, [sp, #200]	; 0xc8
   21280:	ubfx	r3, r3, #7, #1
   21284:	strb	r3, [sp, #221]	; 0xdd
   21288:	ldr	r7, [sl, #76]	; 0x4c
   2128c:	str	r1, [sp, #236]	; 0xec
   21290:	ldr	r3, [sp, #480]	; 0x1e0
   21294:	lsl	r4, r7, #1
   21298:	cmp	r4, #0
   2129c:	str	r3, [sp, #232]	; 0xe8
   212a0:	ble	212e0 <__assert_fail@plt+0x10038>
   212a4:	movw	r3, #43690	; 0xaaaa
   212a8:	movt	r3, #2730	; 0xaaa
   212ac:	cmp	r4, r3
   212b0:	bgt	22154 <__assert_fail@plt+0x10eac>
   212b4:	add	r0, r4, r7, lsl #2
   212b8:	lsl	r0, r0, #3
   212bc:	bl	2ab48 <__assert_fail@plt+0x198a0>
   212c0:	str	r0, [sp, #260]	; 0x104
   212c4:	lsl	r0, r7, #3
   212c8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   212cc:	ldr	r3, [sp, #260]	; 0x104
   212d0:	str	r0, [sp, #276]	; 0x114
   212d4:	cmp	r0, #0
   212d8:	cmpne	r3, #0
   212dc:	beq	22154 <__assert_fail@plt+0x10eac>
   212e0:	ldr	r2, [sp, #472]	; 0x1d8
   212e4:	mov	r3, #1
   212e8:	str	r4, [sp, #256]	; 0x100
   212ec:	str	r3, [sp, #264]	; 0x108
   212f0:	str	r4, [sp, #272]	; 0x110
   212f4:	cmp	r2, r3
   212f8:	bls	220e8 <__assert_fail@plt+0x10e40>
   212fc:	ldr	r0, [sp, #180]	; 0xb4
   21300:	cmn	r0, #-1073741822	; 0xc0000002
   21304:	bhi	22154 <__assert_fail@plt+0x10eac>
   21308:	add	r0, r0, #1
   2130c:	lsl	r0, r0, #2
   21310:	bl	2ab48 <__assert_fail@plt+0x198a0>
   21314:	cmp	r0, #0
   21318:	mov	r4, r0
   2131c:	str	r0, [sp, #244]	; 0xf4
   21320:	beq	21d60 <__assert_fail@plt+0x10ab8>
   21324:	ldr	r3, [sp, #480]	; 0x1e0
   21328:	str	r5, [sp, #112]	; 0x70
   2132c:	ldr	r2, [sl, #92]	; 0x5c
   21330:	tst	r3, #1
   21334:	movne	r3, #4
   21338:	moveq	r3, #6
   2133c:	cmp	r5, r6
   21340:	str	r2, [sp, #88]	; 0x58
   21344:	str	r3, [sp, #204]	; 0xcc
   21348:	movge	r3, r5
   2134c:	movlt	r3, r6
   21350:	mvngt	r2, #0
   21354:	movle	r2, #1
   21358:	str	r3, [sp, #64]	; 0x40
   2135c:	ldr	r3, [sp, #48]	; 0x30
   21360:	str	r2, [sp, #96]	; 0x60
   21364:	movlt	r2, r5
   21368:	movge	r2, r6
   2136c:	str	r2, [sp, #76]	; 0x4c
   21370:	cmp	r3, #0
   21374:	beq	22164 <__assert_fail@plt+0x10ebc>
   21378:	ldr	r3, [sp, #88]	; 0x58
   2137c:	cmp	r3, #1
   21380:	moveq	r3, #4
   21384:	beq	213a4 <__assert_fail@plt+0x100fc>
   21388:	ldr	r3, [sp, #32]
   2138c:	ldr	r2, [sp, #80]	; 0x50
   21390:	ldr	r3, [r3, #12]
   21394:	and	r3, r3, #4194304	; 0x400000
   21398:	orrs	r3, r2, r3
   2139c:	moveq	r3, #4
   213a0:	movne	r3, #0
   213a4:	ldr	r2, [sp, #36]	; 0x24
   213a8:	cmp	r5, r6
   213ac:	movle	r2, #2
   213b0:	ldr	r1, [sp, #80]	; 0x50
   213b4:	cmp	r1, #0
   213b8:	orrne	r3, r3, #1
   213bc:	orr	r3, r3, r2
   213c0:	ldr	r1, [sp, #64]	; 0x40
   213c4:	ldr	r2, [sp, #76]	; 0x4c
   213c8:	cmp	r5, r2
   213cc:	movge	r2, #0
   213d0:	movlt	r2, #1
   213d4:	cmp	r5, r1
   213d8:	orrgt	r2, r2, #1
   213dc:	cmp	r2, #0
   213e0:	bne	21900 <__assert_fail@plt+0x10658>
   213e4:	add	r2, sp, #424	; 0x1a8
   213e8:	cmp	r5, r6
   213ec:	str	sl, [sp, #68]	; 0x44
   213f0:	sub	r3, r3, #4
   213f4:	suble	r2, r2, #312	; 0x138
   213f8:	movgt	r2, #0
   213fc:	str	r3, [sp, #92]	; 0x5c
   21400:	adds	r3, r2, #0
   21404:	movne	r3, #1
   21408:	str	r2, [sp, #100]	; 0x64
   2140c:	str	r3, [sp, #104]	; 0x68
   21410:	mov	r3, #65280	; 0xff00
   21414:	movt	r3, #3
   21418:	str	r3, [sp, #52]	; 0x34
   2141c:	ldr	r3, [sp, #92]	; 0x5c
   21420:	cmp	r3, #4
   21424:	ldrls	pc, [pc, r3, lsl #2]
   21428:	b	22184 <__assert_fail@plt+0x10edc>
   2142c:	andeq	r1, r2, r8, ror r9
   21430:	andeq	r1, r2, r8, ror r9
   21434:	andeq	r1, r2, r0, lsl r9
   21438:	andeq	r1, r2, ip, asr #16
   2143c:	andeq	r1, r2, r8, ror #8
   21440:	mov	r3, #1
   21444:	str	r3, [sp, #20]
   21448:	str	r3, [sp, #60]	; 0x3c
   2144c:	b	21190 <__assert_fail@plt+0xfee8>
   21450:	ldr	r3, [sp, #48]	; 0x30
   21454:	tst	r2, #1
   21458:	movne	r3, #0
   2145c:	str	r3, [sp, #48]	; 0x30
   21460:	b	210ac <__assert_fail@plt+0xfe04>
   21464:	str	r5, [sp, #112]	; 0x70
   21468:	mov	r1, r5
   2146c:	add	r0, sp, #144	; 0x90
   21470:	ldr	r2, [sp, #480]	; 0x1e0
   21474:	bl	18120 <__assert_fail@plt+0x6e78>
   21478:	subs	r3, r0, #0
   2147c:	str	r3, [sp, #36]	; 0x24
   21480:	bne	221b8 <__assert_fail@plt+0x10f10>
   21484:	ldr	r3, [sp, #88]	; 0x58
   21488:	cmp	r3, #1
   2148c:	beq	214ac <__assert_fail@plt+0x10204>
   21490:	ldr	r3, [sp, #172]	; 0xac
   21494:	cmp	r3, #0
   21498:	beq	214ac <__assert_fail@plt+0x10204>
   2149c:	ldr	r3, [sp, #152]	; 0x98
   214a0:	ldr	r3, [r3]
   214a4:	cmn	r3, #1
   214a8:	beq	21ce4 <__assert_fail@plt+0x10a3c>
   214ac:	ldr	r4, [sp, #228]	; 0xe4
   214b0:	mov	r3, #0
   214b4:	mov	r0, #0
   214b8:	mov	r1, #0
   214bc:	ldr	sl, [r4, #36]	; 0x24
   214c0:	str	r3, [sp, #120]	; 0x78
   214c4:	strd	r0, [sp, #248]	; 0xf8
   214c8:	str	r3, [sp, #264]	; 0x108
   214cc:	ldr	r3, [sp, #184]	; 0xb8
   214d0:	mov	r2, r3
   214d4:	ldrsb	r3, [sl, #52]	; 0x34
   214d8:	str	r2, [sp, #12]
   214dc:	cmp	r3, #0
   214e0:	bge	21520 <__assert_fail@plt+0x10278>
   214e4:	sub	r1, r2, #1
   214e8:	add	r0, sp, #144	; 0x90
   214ec:	ldr	r2, [sp, #232]	; 0xe8
   214f0:	bl	17ed0 <__assert_fail@plt+0x6c28>
   214f4:	tst	r0, #1
   214f8:	bne	22114 <__assert_fail@plt+0x10e6c>
   214fc:	cmp	r0, #0
   21500:	beq	21520 <__assert_fail@plt+0x10278>
   21504:	and	r3, r0, #6
   21508:	cmp	r3, #6
   2150c:	beq	222f8 <__assert_fail@plt+0x11050>
   21510:	tst	r0, #2
   21514:	bne	221f8 <__assert_fail@plt+0x10f50>
   21518:	tst	r0, #4
   2151c:	bne	22220 <__assert_fail@plt+0x10f78>
   21520:	ldr	r3, [sp, #244]	; 0xf4
   21524:	cmp	r3, #0
   21528:	beq	21fcc <__assert_fail@plt+0x10d24>
   2152c:	ldr	r2, [r4, #76]	; 0x4c
   21530:	ldr	r1, [sp, #12]
   21534:	cmp	r2, #0
   21538:	str	sl, [r3, r1, lsl #2]
   2153c:	bne	222b4 <__assert_fail@plt+0x1100c>
   21540:	ldrb	r3, [sl, #52]	; 0x34
   21544:	ldr	r2, [sp, #104]	; 0x68
   21548:	str	r2, [sp, #16]
   2154c:	ubfx	r3, r3, #4, #1
   21550:	cmp	r3, #0
   21554:	mvneq	fp, #0
   21558:	streq	r3, [sp, #28]
   2155c:	bne	221c4 <__assert_fail@plt+0x10f1c>
   21560:	ldr	r3, [sp, #100]	; 0x64
   21564:	str	fp, [sp, #24]
   21568:	ldr	r4, [sp, #184]	; 0xb8
   2156c:	str	r3, [sp, #40]	; 0x28
   21570:	b	215d0 <__assert_fail@plt+0x10328>
   21574:	ldrb	r3, [r5, #52]	; 0x34
   21578:	ldr	r2, [sp, #16]
   2157c:	ldr	r1, [sp, #12]
   21580:	ldr	r4, [sp, #184]	; 0xb8
   21584:	cmp	sl, r5
   21588:	movne	r2, #0
   2158c:	andeq	r2, r2, #1
   21590:	cmp	r2, #0
   21594:	movne	r1, r8
   21598:	tst	r3, #16
   2159c:	str	r1, [sp, #12]
   215a0:	str	r2, [sp, #16]
   215a4:	beq	215cc <__assert_fail@plt+0x10324>
   215a8:	tst	r3, #128	; 0x80
   215ac:	bne	21a30 <__assert_fail@plt+0x10788>
   215b0:	ldr	r3, [sp, #20]
   215b4:	cmp	r3, #0
   215b8:	beq	221f0 <__assert_fail@plt+0x10f48>
   215bc:	str	r4, [sp, #24]
   215c0:	str	r3, [sp, #28]
   215c4:	mov	r3, #0
   215c8:	str	r3, [sp, #40]	; 0x28
   215cc:	mov	sl, r5
   215d0:	ldr	r3, [sp, #200]	; 0xc8
   215d4:	cmp	r3, r4
   215d8:	ble	21a28 <__assert_fail@plt+0x10780>
   215dc:	ldr	r3, [sp, #180]	; 0xb4
   215e0:	add	r8, r4, #1
   215e4:	cmp	r8, r3
   215e8:	bge	21a4c <__assert_fail@plt+0x107a4>
   215ec:	ldr	r3, [sp, #172]	; 0xac
   215f0:	cmp	r8, r3
   215f4:	bge	21cb8 <__assert_fail@plt+0x10a10>
   215f8:	ldrb	r3, [sl, #52]	; 0x34
   215fc:	tst	r3, #32
   21600:	bne	21a80 <__assert_fail@plt+0x107d8>
   21604:	ldr	r3, [sp, #148]	; 0x94
   21608:	add	r2, r4, #1
   2160c:	str	r2, [sp, #184]	; 0xb8
   21610:	ldrb	r4, [r3, r4]
   21614:	ldr	r3, [sl, #44]	; 0x2c
   21618:	cmp	r3, #0
   2161c:	beq	21c88 <__assert_fail@plt+0x109e0>
   21620:	ldr	r5, [r3, r4, lsl #2]
   21624:	ldr	r3, [sp, #244]	; 0xf4
   21628:	cmp	r3, #0
   2162c:	beq	21644 <__assert_fail@plt+0x1039c>
   21630:	mov	r2, r5
   21634:	add	r1, sp, #144	; 0x90
   21638:	add	r0, sp, #120	; 0x78
   2163c:	bl	20e98 <__assert_fail@plt+0xfbf0>
   21640:	mov	r5, r0
   21644:	cmp	r5, #0
   21648:	bne	21574 <__assert_fail@plt+0x102cc>
   2164c:	ldr	r3, [sp, #120]	; 0x78
   21650:	ldr	r4, [sp, #244]	; 0xf4
   21654:	cmp	r3, #0
   21658:	bne	21d5c <__assert_fail@plt+0x10ab4>
   2165c:	cmp	r4, #0
   21660:	beq	21a28 <__assert_fail@plt+0x10780>
   21664:	ldr	r2, [sp, #28]
   21668:	ldr	r3, [sp, #60]	; 0x3c
   2166c:	eor	r3, r3, #1
   21670:	tst	r2, r3
   21674:	bne	21a28 <__assert_fail@plt+0x10780>
   21678:	ldr	r3, [sp, #184]	; 0xb8
   2167c:	mov	r1, #0
   21680:	ldr	r0, [sp, #248]	; 0xf8
   21684:	add	r4, r4, r3, lsl #2
   21688:	b	216a0 <__assert_fail@plt+0x103f8>
   2168c:	ldr	ip, [r4, #4]!
   21690:	mov	r3, r2
   21694:	mov	r1, #1
   21698:	cmp	ip, #0
   2169c:	bne	219ec <__assert_fail@plt+0x10744>
   216a0:	add	r2, r3, #1
   216a4:	cmp	r0, r2
   216a8:	bge	2168c <__assert_fail@plt+0x103e4>
   216ac:	ldr	fp, [sp, #24]
   216b0:	cmp	r1, #0
   216b4:	strne	r3, [sp, #184]	; 0xb8
   216b8:	ldr	r2, [sp, #40]	; 0x28
   216bc:	cmp	r2, #0
   216c0:	beq	216d4 <__assert_fail@plt+0x1042c>
   216c4:	ldr	r3, [r2]
   216c8:	ldr	r1, [sp, #12]
   216cc:	add	r3, r3, r1
   216d0:	str	r3, [r2]
   216d4:	cmn	fp, #1
   216d8:	beq	21cd8 <__assert_fail@plt+0x10a30>
   216dc:	cmn	fp, #2
   216e0:	ldr	r4, [sp, #244]	; 0xf4
   216e4:	beq	21d5c <__assert_fail@plt+0x10ab4>
   216e8:	ldr	r3, [sp, #32]
   216ec:	str	fp, [sp, #236]	; 0xec
   216f0:	ldrb	r3, [r3, #28]
   216f4:	tst	r3, #16
   216f8:	bne	21db4 <__assert_fail@plt+0x10b0c>
   216fc:	ldr	r2, [sp, #472]	; 0x1d8
   21700:	cmp	r2, #1
   21704:	bls	21ff4 <__assert_fail@plt+0x10d4c>
   21708:	mov	r2, fp
   2170c:	add	r0, sp, #144	; 0x90
   21710:	ldr	r1, [r4, fp, lsl #2]
   21714:	bl	18a84 <__assert_fail@plt+0x77dc>
   21718:	ldr	r3, [sp, #68]	; 0x44
   2171c:	ldrb	r3, [r3, #88]	; 0x58
   21720:	str	r0, [sp, #240]	; 0xf0
   21724:	tst	r3, #1
   21728:	bne	2173c <__assert_fail@plt+0x10494>
   2172c:	ldr	r3, [sp, #68]	; 0x44
   21730:	ldr	r3, [r3, #76]	; 0x4c
   21734:	cmp	r3, #0
   21738:	beq	23108 <__assert_fail@plt+0x11e60>
   2173c:	ldr	r3, [sp, #228]	; 0xe4
   21740:	cmn	fp, #-1073741822	; 0xc0000002
   21744:	ldr	sl, [sp, #240]	; 0xf0
   21748:	str	r3, [sp, #12]
   2174c:	bhi	21d5c <__assert_fail@plt+0x10ab4>
   21750:	add	r5, fp, #1
   21754:	lsl	r4, r5, #2
   21758:	mov	r0, r4
   2175c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   21760:	subs	r9, r0, #0
   21764:	beq	22200 <__assert_fail@plt+0x10f58>
   21768:	ldr	r3, [sp, #12]
   2176c:	ldr	r6, [r3, #76]	; 0x4c
   21770:	cmp	r6, #0
   21774:	beq	22068 <__assert_fail@plt+0x10dc0>
   21778:	mov	r0, r4
   2177c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   21780:	cmp	r0, #0
   21784:	mov	r6, r0
   21788:	str	r0, [sp, #24]
   2178c:	beq	2232c <__assert_fail@plt+0x11084>
   21790:	add	r4, sp, #296	; 0x128
   21794:	mov	r8, #0
   21798:	lsl	r7, r5, #2
   2179c:	mov	r1, #0
   217a0:	mov	r0, r6
   217a4:	mov	r2, r7
   217a8:	bl	111c4 <memset@plt>
   217ac:	add	r1, sp, #280	; 0x118
   217b0:	add	r0, sp, #144	; 0x90
   217b4:	str	r9, [sp, #280]	; 0x118
   217b8:	str	r6, [sp, #284]	; 0x11c
   217bc:	str	sl, [sp, #288]	; 0x120
   217c0:	str	fp, [sp, #292]	; 0x124
   217c4:	str	r8, [r4]
   217c8:	str	r8, [r4, #4]
   217cc:	str	r8, [r4, #8]
   217d0:	bl	201d0 <__assert_fail@plt+0xef28>
   217d4:	mov	r3, r0
   217d8:	ldr	r0, [sp, #304]	; 0x130
   217dc:	str	r3, [sp, #16]
   217e0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   217e4:	ldr	r3, [sp, #16]
   217e8:	cmp	r3, #0
   217ec:	bne	22300 <__assert_fail@plt+0x11058>
   217f0:	ldr	r3, [r9]
   217f4:	cmp	r3, #0
   217f8:	bne	22354 <__assert_fail@plt+0x110ac>
   217fc:	ldr	r3, [r6]
   21800:	cmp	r3, #0
   21804:	bne	22354 <__assert_fail@plt+0x110ac>
   21808:	ldr	r3, [sp, #244]	; 0xf4
   2180c:	sub	r7, r7, #4
   21810:	add	r3, r3, r7
   21814:	subs	fp, fp, #1
   21818:	bcc	22134 <__assert_fail@plt+0x10e8c>
   2181c:	ldr	r1, [r3, #-4]!
   21820:	cmp	r1, #0
   21824:	beq	21814 <__assert_fail@plt+0x1056c>
   21828:	ldrb	r2, [r1, #52]	; 0x34
   2182c:	tst	r2, #16
   21830:	beq	21814 <__assert_fail@plt+0x1056c>
   21834:	mov	r2, fp
   21838:	add	r0, sp, #144	; 0x90
   2183c:	bl	18a84 <__assert_fail@plt+0x77dc>
   21840:	add	r5, fp, #1
   21844:	mov	sl, r0
   21848:	b	21798 <__assert_fail@plt+0x104f0>
   2184c:	ldr	r3, [sp, #64]	; 0x40
   21850:	cmp	r3, r5
   21854:	ble	218c0 <__assert_fail@plt+0x10618>
   21858:	ldr	r3, [sp, #56]	; 0x38
   2185c:	ldr	r1, [sp, #80]	; 0x50
   21860:	ldrb	r2, [r3, r5]
   21864:	add	r3, r3, r5
   21868:	ldrb	r2, [r1, r2]
   2186c:	ldr	r1, [sp, #48]	; 0x30
   21870:	ldrb	r2, [r1, r2]
   21874:	cmp	r2, #0
   21878:	bne	21468 <__assert_fail@plt+0x101c0>
   2187c:	ldr	r2, [sp, #56]	; 0x38
   21880:	mov	ip, r1
   21884:	ldr	r1, [sp, #64]	; 0x40
   21888:	ldr	lr, [sp, #80]	; 0x50
   2188c:	sub	r0, r2, #1
   21890:	rsb	r2, r2, #1
   21894:	add	r0, r0, r1
   21898:	b	218b0 <__assert_fail@plt+0x10608>
   2189c:	ldrb	r1, [r3, #1]!
   218a0:	ldrb	r1, [lr, r1]
   218a4:	ldrb	r1, [ip, r1]
   218a8:	cmp	r1, #0
   218ac:	bne	21464 <__assert_fail@plt+0x101bc>
   218b0:	cmp	r0, r3
   218b4:	add	r5, r2, r3
   218b8:	bne	2189c <__assert_fail@plt+0x105f4>
   218bc:	str	r5, [sp, #112]	; 0x70
   218c0:	ldr	r3, [sp, #64]	; 0x40
   218c4:	cmp	r3, r5
   218c8:	bne	21468 <__assert_fail@plt+0x101c0>
   218cc:	ldr	r2, [sp, #72]	; 0x48
   218d0:	cmp	r2, r3
   218d4:	ldrgt	r2, [sp, #56]	; 0x38
   218d8:	movle	r3, #0
   218dc:	ldrbgt	r3, [r2, r3]
   218e0:	ldr	r2, [sp, #80]	; 0x50
   218e4:	cmp	r2, #0
   218e8:	ldrbne	r3, [r2, r3]
   218ec:	ldr	r2, [sp, #48]	; 0x30
   218f0:	ldrb	r3, [r2, r3]
   218f4:	cmp	r3, #0
   218f8:	bne	21468 <__assert_fail@plt+0x101c0>
   218fc:	ldr	sl, [sp, #68]	; 0x44
   21900:	mov	r3, #1
   21904:	str	r3, [sp, #36]	; 0x24
   21908:	ldr	r4, [sp, #244]	; 0xf4
   2190c:	b	21d68 <__assert_fail@plt+0x10ac0>
   21910:	ldr	r3, [sp, #64]	; 0x40
   21914:	cmp	r3, r5
   21918:	ble	218c0 <__assert_fail@plt+0x10618>
   2191c:	ldr	r1, [sp, #48]	; 0x30
   21920:	ldr	r3, [sp, #56]	; 0x38
   21924:	ldrb	r2, [r3, r5]
   21928:	add	r3, r3, r5
   2192c:	ldrb	r2, [r1, r2]
   21930:	cmp	r2, #0
   21934:	bne	21468 <__assert_fail@plt+0x101c0>
   21938:	ldr	r2, [sp, #56]	; 0x38
   2193c:	mov	ip, r1
   21940:	ldr	r1, [sp, #64]	; 0x40
   21944:	sub	r0, r2, #1
   21948:	rsb	r2, r2, #1
   2194c:	add	r0, r0, r1
   21950:	b	21964 <__assert_fail@plt+0x106bc>
   21954:	ldrb	r1, [r3, #1]!
   21958:	ldrb	r1, [ip, r1]
   2195c:	cmp	r1, #0
   21960:	bne	21464 <__assert_fail@plt+0x101bc>
   21964:	cmp	r0, r3
   21968:	add	r5, r2, r3
   2196c:	bne	21954 <__assert_fail@plt+0x106ac>
   21970:	str	r5, [sp, #112]	; 0x70
   21974:	b	218c0 <__assert_fail@plt+0x10618>
   21978:	ldr	r3, [sp, #76]	; 0x4c
   2197c:	cmp	r3, r5
   21980:	bgt	218fc <__assert_fail@plt+0x10654>
   21984:	ldr	r3, [sp, #80]	; 0x50
   21988:	cmp	r3, #0
   2198c:	beq	22020 <__assert_fail@plt+0x10d78>
   21990:	mov	ip, r3
   21994:	mov	r1, #0
   21998:	ldr	r0, [sp, #48]	; 0x30
   2199c:	mov	r3, r5
   219a0:	ldr	r6, [sp, #56]	; 0x38
   219a4:	ldr	lr, [sp, #72]	; 0x48
   219a8:	ldr	r4, [sp, #76]	; 0x4c
   219ac:	b	219c0 <__assert_fail@plt+0x10718>
   219b0:	sub	r3, r3, #1
   219b4:	mov	r1, #1
   219b8:	cmp	r3, r4
   219bc:	blt	2216c <__assert_fail@plt+0x10ec4>
   219c0:	cmp	lr, r3
   219c4:	mov	r2, #0
   219c8:	ldrbgt	r2, [r6, r3]
   219cc:	ldrb	r2, [ip, r2]
   219d0:	ldrb	r2, [r0, r2]
   219d4:	cmp	r2, #0
   219d8:	beq	219b0 <__assert_fail@plt+0x10708>
   219dc:	cmp	r1, #0
   219e0:	movne	r5, r3
   219e4:	strne	r3, [sp, #112]	; 0x70
   219e8:	b	21468 <__assert_fail@plt+0x101c0>
   219ec:	mov	r2, #0
   219f0:	add	r1, sp, #144	; 0x90
   219f4:	str	r3, [sp, #184]	; 0xb8
   219f8:	add	r0, sp, #120	; 0x78
   219fc:	bl	20e98 <__assert_fail@plt+0xfbf0>
   21a00:	ldr	r3, [sp, #120]	; 0x78
   21a04:	cmp	r3, #0
   21a08:	bne	21a1c <__assert_fail@plt+0x10774>
   21a0c:	cmp	r0, #0
   21a10:	bne	221e8 <__assert_fail@plt+0x10f40>
   21a14:	ldr	r4, [sp, #244]	; 0xf4
   21a18:	b	21678 <__assert_fail@plt+0x103d0>
   21a1c:	cmp	r0, #0
   21a20:	mov	r5, r0
   21a24:	bne	21574 <__assert_fail@plt+0x102cc>
   21a28:	ldr	fp, [sp, #24]
   21a2c:	b	216b8 <__assert_fail@plt+0x10410>
   21a30:	mov	r2, r4
   21a34:	mov	r1, r5
   21a38:	add	r0, sp, #144	; 0x90
   21a3c:	bl	18a84 <__assert_fail@plt+0x77dc>
   21a40:	cmp	r0, #0
   21a44:	beq	215cc <__assert_fail@plt+0x10324>
   21a48:	b	215b0 <__assert_fail@plt+0x10308>
   21a4c:	ldr	r2, [sp, #192]	; 0xc0
   21a50:	cmp	r3, r2
   21a54:	bge	215ec <__assert_fail@plt+0x10344>
   21a58:	add	r1, r4, #2
   21a5c:	add	r0, sp, #144	; 0x90
   21a60:	bl	1b5d0 <__assert_fail@plt+0xa328>
   21a64:	cmp	r0, #0
   21a68:	str	r0, [sp, #120]	; 0x78
   21a6c:	bne	22120 <__assert_fail@plt+0x10e78>
   21a70:	ldrb	r3, [sl, #52]	; 0x34
   21a74:	ldr	r4, [sp, #184]	; 0xb8
   21a78:	tst	r3, #32
   21a7c:	beq	21604 <__assert_fail@plt+0x1035c>
   21a80:	ldr	fp, [sl, #8]
   21a84:	ldr	r6, [sp, #228]	; 0xe4
   21a88:	cmp	fp, #0
   21a8c:	ble	21da8 <__assert_fail@plt+0x10b00>
   21a90:	add	r3, r6, #128	; 0x80
   21a94:	mov	r7, #0
   21a98:	str	r3, [sp, #44]	; 0x2c
   21a9c:	str	r8, [sp, #84]	; 0x54
   21aa0:	b	21bc0 <__assert_fail@plt+0x10918>
   21aa4:	tst	r0, #1
   21aa8:	beq	21bb4 <__assert_fail@plt+0x1090c>
   21aac:	tst	r5, #8
   21ab0:	bne	21bb4 <__assert_fail@plt+0x1090c>
   21ab4:	tst	r5, #32
   21ab8:	beq	21ac4 <__assert_fail@plt+0x1081c>
   21abc:	tst	r0, #2
   21ac0:	beq	21bb4 <__assert_fail@plt+0x1090c>
   21ac4:	tst	r5, #128	; 0x80
   21ac8:	beq	21ad4 <__assert_fail@plt+0x1082c>
   21acc:	tst	r0, #8
   21ad0:	beq	21bb4 <__assert_fail@plt+0x1090c>
   21ad4:	mov	r0, r8
   21ad8:	add	r3, sp, #144	; 0x90
   21adc:	str	r4, [sp]
   21ae0:	mov	r2, r9
   21ae4:	ldr	r1, [sp, #44]	; 0x2c
   21ae8:	bl	1aae4 <__assert_fail@plt+0x983c>
   21aec:	subs	r4, r0, #0
   21af0:	beq	21bac <__assert_fail@plt+0x10904>
   21af4:	ldr	r2, [sp, #184]	; 0xb8
   21af8:	add	r0, sp, #144	; 0x90
   21afc:	ldr	r3, [sp, #264]	; 0x108
   21b00:	cmp	r3, r4
   21b04:	movlt	r3, r4
   21b08:	add	r4, r4, r2
   21b0c:	mov	r1, r4
   21b10:	str	r3, [sp, #264]	; 0x108
   21b14:	bl	1b7c0 <__assert_fail@plt+0xa518>
   21b18:	cmp	r0, #0
   21b1c:	str	r0, [sp, #132]	; 0x84
   21b20:	bne	21d18 <__assert_fail@plt+0x10a70>
   21b24:	ldr	r3, [r6, #12]
   21b28:	ldr	r5, [sp, #244]	; 0xf4
   21b2c:	ldr	r2, [r6, #24]
   21b30:	ldr	r3, [r3, r9, lsl #2]
   21b34:	ldr	r1, [r5, r4, lsl #2]
   21b38:	add	r3, r3, r3, lsl #1
   21b3c:	lsl	r3, r3, #2
   21b40:	cmp	r1, #0
   21b44:	add	ip, r2, r3
   21b48:	beq	21c1c <__assert_fail@plt+0x10974>
   21b4c:	mov	r2, ip
   21b50:	add	r0, sp, #280	; 0x118
   21b54:	ldr	r1, [r1, #40]	; 0x28
   21b58:	bl	1f4b8 <__assert_fail@plt+0xe210>
   21b5c:	cmp	r0, #0
   21b60:	str	r0, [sp, #132]	; 0x84
   21b64:	bne	21d18 <__assert_fail@plt+0x10a70>
   21b68:	sub	r1, r4, #1
   21b6c:	add	r0, sp, #144	; 0x90
   21b70:	ldr	r2, [sp, #232]	; 0xe8
   21b74:	bl	17ed0 <__assert_fail@plt+0x6c28>
   21b78:	ldr	r5, [sp, #244]	; 0xf4
   21b7c:	mov	r3, r0
   21b80:	add	r2, sp, #280	; 0x118
   21b84:	mov	r1, r6
   21b88:	add	r0, sp, #132	; 0x84
   21b8c:	bl	1cd20 <__assert_fail@plt+0xba78>
   21b90:	str	r0, [r5, r4, lsl #2]
   21b94:	ldr	r0, [sp, #288]	; 0x120
   21b98:	bl	2ad30 <__assert_fail@plt+0x19a88>
   21b9c:	ldr	r3, [sp, #244]	; 0xf4
   21ba0:	ldr	r2, [r3, r4, lsl #2]
   21ba4:	cmp	r2, #0
   21ba8:	beq	21c74 <__assert_fail@plt+0x109cc>
   21bac:	ldr	fp, [sl, #8]
   21bb0:	ldr	r4, [sp, #184]	; 0xb8
   21bb4:	add	r7, r7, #1
   21bb8:	cmp	r7, fp
   21bbc:	bge	21da4 <__assert_fail@plt+0x10afc>
   21bc0:	ldr	r2, [sl, #12]
   21bc4:	ldr	r8, [r6]
   21bc8:	ldr	r9, [r2, r7, lsl #2]
   21bcc:	add	r2, r8, r9, lsl #3
   21bd0:	ldrb	r1, [r2, #6]
   21bd4:	tst	r1, #16
   21bd8:	beq	21bb4 <__assert_fail@plt+0x1090c>
   21bdc:	ldr	r5, [r2, #4]
   21be0:	ldr	r3, [sp, #52]	; 0x34
   21be4:	tst	r3, r5
   21be8:	beq	21ad4 <__assert_fail@plt+0x1082c>
   21bec:	ubfx	r5, r5, #8, #10
   21bf0:	mov	r1, r4
   21bf4:	add	r0, sp, #144	; 0x90
   21bf8:	ldr	r2, [sp, #232]	; 0xe8
   21bfc:	bl	17ed0 <__assert_fail@plt+0x6c28>
   21c00:	tst	r5, #4
   21c04:	bne	21aa4 <__assert_fail@plt+0x107fc>
   21c08:	tst	r5, #8
   21c0c:	beq	21ab4 <__assert_fail@plt+0x1080c>
   21c10:	tst	r0, #1
   21c14:	beq	21ab4 <__assert_fail@plt+0x1080c>
   21c18:	b	21bb4 <__assert_fail@plt+0x1090c>
   21c1c:	add	r2, r2, r3
   21c20:	sub	r1, r4, #1
   21c24:	ldrd	r2, [r2]
   21c28:	add	r0, sp, #144	; 0x90
   21c2c:	mov	r8, r2
   21c30:	mov	r9, r3
   21c34:	ldr	r2, [sp, #232]	; 0xe8
   21c38:	add	r3, sp, #280	; 0x118
   21c3c:	strd	r8, [r3]
   21c40:	ldr	r3, [ip, #8]
   21c44:	str	r3, [sp, #288]	; 0x120
   21c48:	bl	17ed0 <__assert_fail@plt+0x6c28>
   21c4c:	mov	r3, r0
   21c50:	add	r2, sp, #280	; 0x118
   21c54:	mov	r1, r6
   21c58:	add	r0, sp, #132	; 0x84
   21c5c:	bl	1cd20 <__assert_fail@plt+0xba78>
   21c60:	ldr	r3, [sp, #244]	; 0xf4
   21c64:	str	r0, [r5, r4, lsl #2]
   21c68:	ldr	r2, [r3, r4, lsl #2]
   21c6c:	cmp	r2, #0
   21c70:	bne	21bac <__assert_fail@plt+0x10904>
   21c74:	ldr	r0, [sp, #132]	; 0x84
   21c78:	cmp	r0, #0
   21c7c:	beq	21bac <__assert_fail@plt+0x10904>
   21c80:	ldr	r8, [sp, #84]	; 0x54
   21c84:	b	21d20 <__assert_fail@plt+0x10a78>
   21c88:	ldr	r5, [sl, #48]	; 0x30
   21c8c:	cmp	r5, #0
   21c90:	beq	21f98 <__assert_fail@plt+0x10cf0>
   21c94:	ldr	r1, [sp, #184]	; 0xb8
   21c98:	add	r0, sp, #144	; 0x90
   21c9c:	ldr	r2, [sp, #232]	; 0xe8
   21ca0:	sub	r1, r1, #1
   21ca4:	bl	17ed0 <__assert_fail@plt+0x6c28>
   21ca8:	tst	r0, #1
   21cac:	addne	r4, r4, #256	; 0x100
   21cb0:	ldr	r5, [r5, r4, lsl #2]
   21cb4:	b	21624 <__assert_fail@plt+0x1037c>
   21cb8:	ldr	r2, [sp, #192]	; 0xc0
   21cbc:	cmp	r3, r2
   21cc0:	bge	215f8 <__assert_fail@plt+0x10350>
   21cc4:	b	21a58 <__assert_fail@plt+0x107b0>
   21cc8:	mov	r0, r9
   21ccc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   21cd0:	mov	r0, r4
   21cd4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   21cd8:	add	r0, sp, #144	; 0x90
   21cdc:	bl	17834 <__assert_fail@plt+0x658c>
   21ce0:	ldr	r5, [sp, #112]	; 0x70
   21ce4:	ldr	r2, [sp, #76]	; 0x4c
   21ce8:	ldr	r3, [sp, #96]	; 0x60
   21cec:	add	r5, r5, r3
   21cf0:	ldr	r3, [sp, #64]	; 0x40
   21cf4:	str	r5, [sp, #112]	; 0x70
   21cf8:	cmp	r5, r3
   21cfc:	movle	r3, #0
   21d00:	movgt	r3, #1
   21d04:	cmp	r5, r2
   21d08:	orrlt	r3, r3, #1
   21d0c:	cmp	r3, #0
   21d10:	beq	2141c <__assert_fail@plt+0x10174>
   21d14:	b	218fc <__assert_fail@plt+0x10654>
   21d18:	ldr	r8, [sp, #84]	; 0x54
   21d1c:	ldr	r3, [sp, #244]	; 0xf4
   21d20:	cmp	r3, #0
   21d24:	str	r0, [sp, #120]	; 0x78
   21d28:	beq	21fc0 <__assert_fail@plt+0x10d18>
   21d2c:	mov	r5, #0
   21d30:	b	21630 <__assert_fail@plt+0x10388>
   21d34:	mov	r3, #1
   21d38:	str	r3, [sp, #36]	; 0x24
   21d3c:	ldr	r0, [sp, #36]	; 0x24
   21d40:	add	sp, sp, #428	; 0x1ac
   21d44:	ldrd	r4, [sp]
   21d48:	ldrd	r6, [sp, #8]
   21d4c:	ldrd	r8, [sp, #16]
   21d50:	ldrd	sl, [sp, #24]
   21d54:	add	sp, sp, #32
   21d58:	pop	{pc}		; (ldr pc, [sp], #4)
   21d5c:	ldr	sl, [sp, #68]	; 0x44
   21d60:	mov	r3, #12
   21d64:	str	r3, [sp, #36]	; 0x24
   21d68:	mov	r0, r4
   21d6c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   21d70:	ldr	r3, [sl, #76]	; 0x4c
   21d74:	cmp	r3, #0
   21d78:	bne	220f8 <__assert_fail@plt+0x10e50>
   21d7c:	ldr	r0, [sp, #152]	; 0x98
   21d80:	bl	2ad30 <__assert_fail@plt+0x19a88>
   21d84:	ldr	r0, [sp, #156]	; 0x9c
   21d88:	bl	2ad30 <__assert_fail@plt+0x19a88>
   21d8c:	ldrb	r3, [sp, #219]	; 0xdb
   21d90:	cmp	r3, #0
   21d94:	beq	21d3c <__assert_fail@plt+0x10a94>
   21d98:	ldr	r0, [sp, #148]	; 0x94
   21d9c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   21da0:	b	21d3c <__assert_fail@plt+0x10a94>
   21da4:	ldr	r8, [sp, #84]	; 0x54
   21da8:	mov	r3, #0
   21dac:	str	r3, [sp, #120]	; 0x78
   21db0:	b	21604 <__assert_fail@plt+0x1035c>
   21db4:	ldr	r3, [sp, #68]	; 0x44
   21db8:	ldr	r3, [r3, #76]	; 0x4c
   21dbc:	cmp	r3, #0
   21dc0:	bne	21fdc <__assert_fail@plt+0x10d34>
   21dc4:	ldr	sl, [sp, #68]	; 0x44
   21dc8:	ldr	r3, [sp, #472]	; 0x1d8
   21dcc:	cmp	r3, #0
   21dd0:	beq	21d68 <__assert_fail@plt+0x10ac0>
   21dd4:	cmp	r3, #1
   21dd8:	bls	21e28 <__assert_fail@plt+0x10b80>
   21ddc:	sub	r2, r3, #2
   21de0:	ldr	r3, [sp, #476]	; 0x1dc
   21de4:	cmp	r2, #4
   21de8:	movls	r2, #0
   21dec:	movhi	r2, #1
   21df0:	add	r3, r3, #8
   21df4:	ubfx	r1, r3, #0, #3
   21df8:	cmp	r1, #0
   21dfc:	movne	r2, #0
   21e00:	cmp	r2, #0
   21e04:	beq	22e90 <__assert_fail@plt+0x11be8>
   21e08:	ldr	r1, [sp, #472]	; 0x1d8
   21e0c:	mvn	r0, #0
   21e10:	ldr	r2, [sp, #476]	; 0x1dc
   21e14:	add	r2, r2, r1, lsl #3
   21e18:	mvn	r1, #0
   21e1c:	strd	r0, [r3], #8
   21e20:	cmp	r2, r3
   21e24:	bne	21e1c <__assert_fail@plt+0x10b74>
   21e28:	ldr	r3, [sp, #32]
   21e2c:	ldrb	r3, [r3, #28]
   21e30:	eor	r3, r3, #16
   21e34:	mov	r5, #0
   21e38:	ldr	r1, [sp, #236]	; 0xec
   21e3c:	ldr	r2, [sp, #472]	; 0x1d8
   21e40:	subs	r2, r2, #1
   21e44:	movne	r2, #1
   21e48:	ands	r3, r2, r3, lsr #4
   21e4c:	ldr	r2, [sp, #476]	; 0x1dc
   21e50:	str	r5, [r2]
   21e54:	str	r1, [r2, #4]
   21e58:	bne	223b0 <__assert_fail@plt+0x11108>
   21e5c:	ldrb	r2, [sp, #220]	; 0xdc
   21e60:	ldr	ip, [sp, #112]	; 0x70
   21e64:	ldr	r0, [sp, #156]	; 0x9c
   21e68:	cmp	r2, #0
   21e6c:	ldrne	r5, [sp, #476]	; 0x1dc
   21e70:	movne	r2, #0
   21e74:	ldrne	r7, [sp, #472]	; 0x1d8
   21e78:	ldr	r1, [sp, #172]	; 0xac
   21e7c:	addne	r5, r5, #4
   21e80:	ldr	lr, [sp, #176]	; 0xb0
   21e84:	bne	22268 <__assert_fail@plt+0x10fc0>
   21e88:	ldr	lr, [sp, #472]	; 0x1d8
   21e8c:	ldr	r1, [sp, #476]	; 0x1dc
   21e90:	add	r0, r1, #4
   21e94:	b	21ea0 <__assert_fail@plt+0x10bf8>
   21e98:	ldr	r3, [sp, #476]	; 0x1dc
   21e9c:	ldr	r3, [r3, r2, lsl #3]
   21ea0:	cmn	r3, #1
   21ea4:	add	r1, ip, r3
   21ea8:	beq	21ec0 <__assert_fail@plt+0x10c18>
   21eac:	ldr	r3, [r0, r2, lsl #3]
   21eb0:	ldr	r5, [sp, #476]	; 0x1dc
   21eb4:	add	r3, ip, r3
   21eb8:	str	r1, [r5, r2, lsl #3]
   21ebc:	str	r3, [r0, r2, lsl #3]
   21ec0:	add	r2, r2, #1
   21ec4:	cmp	lr, r2
   21ec8:	bne	21e98 <__assert_fail@plt+0x10bf0>
   21ecc:	ldr	r3, [sp, #108]	; 0x6c
   21ed0:	cmp	r3, #0
   21ed4:	ble	21f24 <__assert_fail@plt+0x10c7c>
   21ed8:	mov	r0, r3
   21edc:	ldr	r2, [sp, #472]	; 0x1d8
   21ee0:	ldr	r3, [sp, #476]	; 0x1dc
   21ee4:	add	r3, r3, r2, lsl #3
   21ee8:	sub	r2, r0, #1
   21eec:	cmp	r2, #4
   21ef0:	ubfx	r1, r3, #0, #3
   21ef4:	movls	r2, #0
   21ef8:	movhi	r2, #1
   21efc:	cmp	r1, #0
   21f00:	movne	r2, #0
   21f04:	cmp	r2, #0
   21f08:	beq	22eb8 <__assert_fail@plt+0x11c10>
   21f0c:	add	r2, r3, r0, lsl #3
   21f10:	mvn	r1, #0
   21f14:	mvn	r0, #0
   21f18:	strd	r0, [r3], #8
   21f1c:	cmp	r3, r2
   21f20:	bne	21f18 <__assert_fail@plt+0x10c70>
   21f24:	ldr	ip, [sl, #132]	; 0x84
   21f28:	cmp	ip, #0
   21f2c:	beq	21d68 <__assert_fail@plt+0x10ac0>
   21f30:	ldr	r3, [sp, #472]	; 0x1d8
   21f34:	cmp	r3, #1
   21f38:	bls	21d68 <__assert_fail@plt+0x10ac0>
   21f3c:	ldr	r1, [sp, #476]	; 0x1dc
   21f40:	mov	r6, r3
   21f44:	mov	r2, #0
   21f48:	mov	r3, #1
   21f4c:	add	r5, r1, #4
   21f50:	ldr	r1, [ip, r2, lsl #2]
   21f54:	mov	r0, r3
   21f58:	cmp	r1, r2
   21f5c:	add	lr, r1, #1
   21f60:	beq	21f84 <__assert_fail@plt+0x10cdc>
   21f64:	ldr	r1, [sp, #476]	; 0x1dc
   21f68:	ldr	r1, [r1, lr, lsl #3]
   21f6c:	ldr	lr, [sp, #476]	; 0x1dc
   21f70:	str	r1, [lr, r3, lsl #3]
   21f74:	ldr	r2, [ip, r2, lsl #2]
   21f78:	add	r2, lr, r2, lsl #3
   21f7c:	ldr	r2, [r2, #12]
   21f80:	str	r2, [r5, r3, lsl #3]
   21f84:	add	r3, r3, #1
   21f88:	mov	r2, r0
   21f8c:	cmp	r6, r3
   21f90:	bne	21f50 <__assert_fail@plt+0x10ca8>
   21f94:	b	21d68 <__assert_fail@plt+0x10ac0>
   21f98:	mov	r1, sl
   21f9c:	ldr	r0, [sp, #228]	; 0xe4
   21fa0:	bl	1d13c <__assert_fail@plt+0xbe94>
   21fa4:	cmp	r0, #0
   21fa8:	bne	21614 <__assert_fail@plt+0x1036c>
   21fac:	ldr	r3, [sp, #244]	; 0xf4
   21fb0:	mov	r2, #12
   21fb4:	str	r2, [sp, #120]	; 0x78
   21fb8:	cmp	r3, #0
   21fbc:	bne	21d2c <__assert_fail@plt+0x10a84>
   21fc0:	mov	r4, #0
   21fc4:	ldr	sl, [sp, #68]	; 0x44
   21fc8:	b	21d60 <__assert_fail@plt+0x10ab8>
   21fcc:	ldr	r3, [sp, #104]	; 0x68
   21fd0:	str	r3, [sp, #16]
   21fd4:	ldrb	r3, [sl, #52]	; 0x34
   21fd8:	b	2154c <__assert_fail@plt+0x102a4>
   21fdc:	mov	r2, fp
   21fe0:	add	r0, sp, #144	; 0x90
   21fe4:	ldr	r1, [r4, fp, lsl #2]
   21fe8:	bl	18a84 <__assert_fail@plt+0x77dc>
   21fec:	str	r0, [sp, #240]	; 0xf0
   21ff0:	b	2173c <__assert_fail@plt+0x10494>
   21ff4:	ldr	sl, [sp, #68]	; 0x44
   21ff8:	ldr	r2, [sl, #76]	; 0x4c
   21ffc:	cmp	r2, #0
   22000:	bne	21fdc <__assert_fail@plt+0x10d34>
   22004:	ldr	r2, [sp, #472]	; 0x1d8
   22008:	cmp	r2, #0
   2200c:	bne	21e30 <__assert_fail@plt+0x10b88>
   22010:	str	r2, [sp, #36]	; 0x24
   22014:	b	21d68 <__assert_fail@plt+0x10ac0>
   22018:	ldr	r2, [sp, #72]	; 0x48
   2201c:	b	21260 <__assert_fail@plt+0xffb8>
   22020:	mov	r1, r3
   22024:	mov	r3, r5
   22028:	ldr	r0, [sp, #48]	; 0x30
   2202c:	ldr	r4, [sp, #56]	; 0x38
   22030:	ldr	ip, [sp, #72]	; 0x48
   22034:	ldr	lr, [sp, #76]	; 0x4c
   22038:	b	2204c <__assert_fail@plt+0x10da4>
   2203c:	sub	r3, r3, #1
   22040:	mov	r1, #1
   22044:	cmp	lr, r3
   22048:	bgt	2216c <__assert_fail@plt+0x10ec4>
   2204c:	cmp	ip, r3
   22050:	mov	r2, #0
   22054:	ldrbgt	r2, [r4, r3]
   22058:	ldrb	r2, [r0, r2]
   2205c:	cmp	r2, #0
   22060:	beq	2203c <__assert_fail@plt+0x10d94>
   22064:	b	219dc <__assert_fail@plt+0x10734>
   22068:	add	r1, sp, #280	; 0x118
   2206c:	add	r0, sp, #144	; 0x90
   22070:	str	r9, [sp, #280]	; 0x118
   22074:	str	r6, [sp, #284]	; 0x11c
   22078:	str	sl, [sp, #288]	; 0x120
   2207c:	str	fp, [sp, #292]	; 0x124
   22080:	str	r6, [sp, #296]	; 0x128
   22084:	str	r6, [sp, #300]	; 0x12c
   22088:	str	r6, [sp, #304]	; 0x130
   2208c:	bl	201d0 <__assert_fail@plt+0xef28>
   22090:	mov	r7, r0
   22094:	ldr	r0, [sp, #304]	; 0x130
   22098:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2209c:	cmp	r7, #0
   220a0:	bne	2234c <__assert_fail@plt+0x110a4>
   220a4:	ldr	r4, [r9]
   220a8:	cmp	r4, #0
   220ac:	beq	21cc8 <__assert_fail@plt+0x10a20>
   220b0:	mov	r8, fp
   220b4:	mov	fp, sl
   220b8:	ldr	sl, [sp, #68]	; 0x44
   220bc:	ldr	r0, [sp, #244]	; 0xf4
   220c0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   220c4:	mov	r0, #0
   220c8:	str	r8, [sp, #236]	; 0xec
   220cc:	str	fp, [sp, #240]	; 0xf0
   220d0:	str	r9, [sp, #244]	; 0xf4
   220d4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   220d8:	mov	r0, #0
   220dc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   220e0:	ldr	r4, [sp, #244]	; 0xf4
   220e4:	b	21dc8 <__assert_fail@plt+0x10b20>
   220e8:	ldrb	r3, [sl, #88]	; 0x58
   220ec:	tst	r3, #2
   220f0:	bne	212fc <__assert_fail@plt+0x10054>
   220f4:	b	21324 <__assert_fail@plt+0x1007c>
   220f8:	add	r0, sp, #144	; 0x90
   220fc:	bl	17834 <__assert_fail@plt+0x658c>
   22100:	ldr	r0, [sp, #276]	; 0x114
   22104:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22108:	ldr	r0, [sp, #260]	; 0x104
   2210c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22110:	b	21d7c <__assert_fail@plt+0x10ad4>
   22114:	ldr	sl, [r4, #40]	; 0x28
   22118:	cmp	sl, #0
   2211c:	bne	21520 <__assert_fail@plt+0x10278>
   22120:	mov	r3, #12
   22124:	ldr	sl, [sp, #68]	; 0x44
   22128:	str	r3, [sp, #36]	; 0x24
   2212c:	ldr	r4, [sp, #244]	; 0xf4
   22130:	b	21d68 <__assert_fail@plt+0x10ac0>
   22134:	mov	r0, r9
   22138:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2213c:	mov	r0, r6
   22140:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22144:	add	r0, sp, #144	; 0x90
   22148:	bl	17834 <__assert_fail@plt+0x658c>
   2214c:	ldr	r5, [sp, #112]	; 0x70
   22150:	b	21ce4 <__assert_fail@plt+0x10a3c>
   22154:	mov	r3, #12
   22158:	ldr	r4, [sp, #244]	; 0xf4
   2215c:	str	r3, [sp, #36]	; 0x24
   22160:	b	21d68 <__assert_fail@plt+0x10ac0>
   22164:	mov	r3, #8
   22168:	b	213c0 <__assert_fail@plt+0x10118>
   2216c:	mov	r2, #1
   22170:	ldr	sl, [sp, #68]	; 0x44
   22174:	str	r2, [sp, #36]	; 0x24
   22178:	str	r3, [sp, #112]	; 0x70
   2217c:	ldr	r4, [sp, #244]	; 0xf4
   22180:	b	21d68 <__assert_fail@plt+0x10ac0>
   22184:	ldr	r4, [sp, #48]	; 0x30
   22188:	ldr	r1, [sp, #168]	; 0xa8
   2218c:	sub	r2, r5, r1
   22190:	ldr	r3, [sp, #176]	; 0xb0
   22194:	cmp	r3, r2
   22198:	bhi	23138 <__assert_fail@plt+0x11e90>
   2219c:	mov	r1, r5
   221a0:	add	r0, sp, #144	; 0x90
   221a4:	ldr	r2, [sp, #480]	; 0x1e0
   221a8:	bl	18120 <__assert_fail@plt+0x6e78>
   221ac:	subs	r3, r0, #0
   221b0:	str	r3, [sp, #36]	; 0x24
   221b4:	beq	23130 <__assert_fail@plt+0x11e88>
   221b8:	ldr	sl, [sp, #68]	; 0x44
   221bc:	ldr	r4, [sp, #244]	; 0xf4
   221c0:	b	21d68 <__assert_fail@plt+0x10ac0>
   221c4:	ldrsb	r3, [sl, #52]	; 0x34
   221c8:	cmp	r3, #0
   221cc:	blt	2223c <__assert_fail@plt+0x10f94>
   221d0:	ldr	fp, [sp, #12]
   221d4:	ldr	r3, [sp, #20]
   221d8:	cmp	r3, #0
   221dc:	strne	r3, [sp, #28]
   221e0:	bne	21560 <__assert_fail@plt+0x102b8>
   221e4:	b	216d4 <__assert_fail@plt+0x1042c>
   221e8:	mov	r5, r0
   221ec:	b	21574 <__assert_fail@plt+0x102cc>
   221f0:	mov	fp, r4
   221f4:	b	216d4 <__assert_fail@plt+0x1042c>
   221f8:	ldr	sl, [r4, #44]	; 0x2c
   221fc:	b	22118 <__assert_fail@plt+0x10e70>
   22200:	ldr	sl, [sp, #68]	; 0x44
   22204:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22208:	mov	r3, #12
   2220c:	mov	r0, r9
   22210:	str	r3, [sp, #36]	; 0x24
   22214:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22218:	ldr	r4, [sp, #244]	; 0xf4
   2221c:	b	21d68 <__assert_fail@plt+0x10ac0>
   22220:	mov	r3, r0
   22224:	mov	r1, r4
   22228:	ldr	r2, [sl, #40]	; 0x28
   2222c:	add	r0, sp, #120	; 0x78
   22230:	bl	1cd20 <__assert_fail@plt+0xba78>
   22234:	mov	sl, r0
   22238:	b	22118 <__assert_fail@plt+0x10e70>
   2223c:	mov	r1, sl
   22240:	add	r0, sp, #144	; 0x90
   22244:	ldr	r2, [sp, #12]
   22248:	bl	18a84 <__assert_fail@plt+0x77dc>
   2224c:	subs	r3, r0, #0
   22250:	str	r3, [sp, #28]
   22254:	bne	221d0 <__assert_fail@plt+0x10f28>
   22258:	mvn	fp, #0
   2225c:	b	21560 <__assert_fail@plt+0x102b8>
   22260:	ldr	r3, [sp, #476]	; 0x1dc
   22264:	ldr	r3, [r3, r2, lsl #3]
   22268:	cmn	r3, #1
   2226c:	beq	222a4 <__assert_fail@plt+0x10ffc>
   22270:	cmp	r1, r3
   22274:	ldr	r6, [r5, r2, lsl #3]
   22278:	moveq	r3, lr
   2227c:	ldrne	r3, [r0, r3, lsl #2]
   22280:	ldr	r8, [sp, #476]	; 0x1dc
   22284:	cmp	r1, r6
   22288:	moveq	r6, lr
   2228c:	str	r3, [r8, r2, lsl #3]
   22290:	add	r3, ip, r3
   22294:	ldrne	r6, [r0, r6, lsl #2]
   22298:	str	r3, [r8, r2, lsl #3]
   2229c:	add	r6, ip, r6
   222a0:	str	r6, [r5, r2, lsl #3]
   222a4:	add	r2, r2, #1
   222a8:	cmp	r2, r7
   222ac:	bne	22260 <__assert_fail@plt+0x10fb8>
   222b0:	b	21ecc <__assert_fail@plt+0x10c24>
   222b4:	add	r4, sl, #8
   222b8:	add	r5, sl, #12
   222bc:	mov	r1, r4
   222c0:	mov	r2, r5
   222c4:	mov	r3, #0
   222c8:	add	r0, sp, #144	; 0x90
   222cc:	bl	18d44 <__assert_fail@plt+0x7a9c>
   222d0:	cmp	r0, #0
   222d4:	mov	fp, r0
   222d8:	str	r0, [sp, #120]	; 0x78
   222dc:	bne	216d4 <__assert_fail@plt+0x1042c>
   222e0:	ldrb	r3, [sl, #52]	; 0x34
   222e4:	tst	r3, #64	; 0x40
   222e8:	bne	22388 <__assert_fail@plt+0x110e0>
   222ec:	mov	r2, #0
   222f0:	str	r2, [sp, #16]
   222f4:	b	2154c <__assert_fail@plt+0x102a4>
   222f8:	ldr	sl, [r4, #48]	; 0x30
   222fc:	b	22118 <__assert_fail@plt+0x10e70>
   22300:	mov	r7, r3
   22304:	mov	r0, r9
   22308:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2230c:	ldr	r0, [sp, #24]
   22310:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22314:	cmp	r7, #1
   22318:	beq	21cd8 <__assert_fail@plt+0x10a30>
   2231c:	str	r7, [sp, #36]	; 0x24
   22320:	ldr	sl, [sp, #68]	; 0x44
   22324:	ldr	r4, [sp, #244]	; 0xf4
   22328:	b	21d68 <__assert_fail@plt+0x10ac0>
   2232c:	mov	r3, #12
   22330:	mov	r0, r9
   22334:	ldr	sl, [sp, #68]	; 0x44
   22338:	str	r3, [sp, #36]	; 0x24
   2233c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22340:	mov	r0, r6
   22344:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22348:	b	21908 <__assert_fail@plt+0x10660>
   2234c:	str	r6, [sp, #24]
   22350:	b	22304 <__assert_fail@plt+0x1105c>
   22354:	mov	r3, r5
   22358:	mov	r2, r6
   2235c:	ldr	r0, [sp, #12]
   22360:	mov	r1, r9
   22364:	bl	1f6bc <__assert_fail@plt+0xe414>
   22368:	mov	r7, r0
   2236c:	mov	r0, r6
   22370:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22374:	cmp	r7, #0
   22378:	beq	220b0 <__assert_fail@plt+0x10e08>
   2237c:	mov	r3, #0
   22380:	str	r3, [sp, #24]
   22384:	b	22304 <__assert_fail@plt+0x1105c>
   22388:	mov	r2, r5
   2238c:	mov	r1, r4
   22390:	add	r0, sp, #144	; 0x90
   22394:	bl	206f0 <__assert_fail@plt+0xf448>
   22398:	cmp	r0, #0
   2239c:	mov	fp, r0
   223a0:	str	r0, [sp, #120]	; 0x78
   223a4:	bne	216d4 <__assert_fail@plt+0x1042c>
   223a8:	ldrb	r3, [sl, #52]	; 0x34
   223ac:	b	222ec <__assert_fail@plt+0x11044>
   223b0:	ldr	r2, [sp, #32]
   223b4:	ldrb	r3, [sl, #88]	; 0x58
   223b8:	ldr	r2, [r2]
   223bc:	tst	r3, #1
   223c0:	str	r2, [sp, #12]
   223c4:	beq	22cc8 <__assert_fail@plt+0x11a20>
   223c8:	ldr	r3, [sl, #76]	; 0x4c
   223cc:	cmp	r3, r5
   223d0:	ble	22cc8 <__assert_fail@plt+0x11a20>
   223d4:	mov	r0, #0
   223d8:	mov	r1, #2
   223dc:	mov	r2, #0
   223e0:	mov	r3, #16
   223e4:	add	ip, sp, #280	; 0x118
   223e8:	strd	r0, [sp, #120]	; 0x78
   223ec:	add	r1, sp, #292	; 0x124
   223f0:	mov	r0, #48	; 0x30
   223f4:	strd	r2, [ip]
   223f8:	str	r1, [sp, #16]
   223fc:	str	r5, [sp, #128]	; 0x80
   22400:	str	r1, [sp, #288]	; 0x120
   22404:	bl	2ab48 <__assert_fail@plt+0x198a0>
   22408:	cmp	r0, #0
   2240c:	str	r0, [sp, #128]	; 0x80
   22410:	beq	22154 <__assert_fail@plt+0x10eac>
   22414:	ldr	r1, [sp, #12]
   22418:	add	r2, sp, #132	; 0x84
   2241c:	ldr	r3, [sp, #280]	; 0x118
   22420:	str	r2, [sp, #24]
   22424:	ldr	fp, [r1, #72]	; 0x48
   22428:	str	r5, [sp, #132]	; 0x84
   2242c:	ldr	r1, [sp, #472]	; 0x1d8
   22430:	str	r5, [sp, #136]	; 0x88
   22434:	str	r5, [sp, #140]	; 0x8c
   22438:	cmp	r3, r1
   2243c:	movcs	r3, r1
   22440:	addcs	r5, sp, #120	; 0x78
   22444:	strcs	r3, [sp, #280]	; 0x118
   22448:	bcc	23114 <__assert_fail@plt+0x11e6c>
   2244c:	ldr	r0, [sp, #288]	; 0x120
   22450:	ldr	r3, [sp, #472]	; 0x1d8
   22454:	ldr	r1, [sp, #476]	; 0x1dc
   22458:	str	r0, [sp, #28]
   2245c:	lsl	r2, r3, #3
   22460:	lsl	r3, r3, #4
   22464:	mov	r4, r1
   22468:	str	r2, [sp, #32]
   2246c:	str	r3, [sp, #44]	; 0x2c
   22470:	bl	11038 <memcpy@plt>
   22474:	ldr	r6, [r4], #4
   22478:	str	sl, [sp, #20]
   2247c:	str	r4, [sp, #40]	; 0x28
   22480:	str	r6, [sp, #116]	; 0x74
   22484:	ldr	r3, [sp, #476]	; 0x1dc
   22488:	ldr	r0, [r3, #4]
   2248c:	cmp	r0, r6
   22490:	blt	22fc4 <__assert_fail@plt+0x11d1c>
   22494:	ldr	r3, [sp, #12]
   22498:	lsl	r4, fp, #3
   2249c:	mov	r7, fp
   224a0:	ldr	r2, [r3]
   224a4:	add	r1, r2, r4
   224a8:	ldrb	r3, [r1, #4]
   224ac:	cmp	r3, #8
   224b0:	beq	229a8 <__assert_fail@plt+0x11700>
   224b4:	cmp	r3, #9
   224b8:	beq	22a14 <__assert_fail@plt+0x1176c>
   224bc:	cmp	r6, r0
   224c0:	beq	228c0 <__assert_fail@plt+0x11618>
   224c4:	cmp	r5, #0
   224c8:	beq	2254c <__assert_fail@plt+0x112a4>
   224cc:	ldr	r2, [sp, #136]	; 0x88
   224d0:	cmp	r2, #0
   224d4:	ble	2254c <__assert_fail@plt+0x112a4>
   224d8:	subs	r2, r2, #1
   224dc:	ldr	r0, [sp, #140]	; 0x8c
   224e0:	moveq	r1, r2
   224e4:	beq	22540 <__assert_fail@plt+0x11298>
   224e8:	mov	r1, #0
   224ec:	add	r3, r2, r1
   224f0:	lsr	r3, r3, #1
   224f4:	ldr	ip, [r0, r3, lsl #2]
   224f8:	cmp	ip, fp
   224fc:	blt	228b0 <__assert_fail@plt+0x11608>
   22500:	cmp	r1, r3
   22504:	bcs	22540 <__assert_fail@plt+0x11298>
   22508:	add	r2, r1, r3
   2250c:	lsr	r2, r2, #1
   22510:	ldr	ip, [r0, r2, lsl #2]
   22514:	cmp	fp, ip
   22518:	ble	22530 <__assert_fail@plt+0x11288>
   2251c:	b	228a4 <__assert_fail@plt+0x115fc>
   22520:	ldr	ip, [r0, r3, lsl #2]
   22524:	cmp	ip, fp
   22528:	blt	228b0 <__assert_fail@plt+0x11608>
   2252c:	mov	r2, r3
   22530:	add	r3, r1, r2
   22534:	cmp	r1, r2
   22538:	lsr	r3, r3, #1
   2253c:	bcc	22520 <__assert_fail@plt+0x11278>
   22540:	ldr	r3, [r0, r1, lsl #2]
   22544:	cmp	r3, fp
   22548:	beq	228d4 <__assert_fail@plt+0x1162c>
   2254c:	ldr	r6, [sp, #228]	; 0xe4
   22550:	ldr	r0, [r6]
   22554:	add	r1, r0, r4
   22558:	ldrb	r3, [r1, #4]
   2255c:	tst	r3, #8
   22560:	beq	226fc <__assert_fail@plt+0x11454>
   22564:	ldr	ip, [r6, #20]
   22568:	add	r4, fp, fp, lsl #1
   2256c:	ldr	r2, [sp, #136]	; 0x88
   22570:	ldr	r0, [sp, #116]	; 0x74
   22574:	add	r4, ip, r4, lsl #2
   22578:	ldr	r1, [sp, #244]	; 0xf4
   2257c:	cmp	r2, #0
   22580:	ldr	r6, [r1, r0, lsl #2]
   22584:	ble	225fc <__assert_fail@plt+0x11354>
   22588:	subs	r2, r2, #1
   2258c:	moveq	r1, r2
   22590:	ldr	ip, [sp, #140]	; 0x8c
   22594:	beq	225f0 <__assert_fail@plt+0x11348>
   22598:	mov	r1, #0
   2259c:	add	r3, r2, r1
   225a0:	lsr	r3, r3, #1
   225a4:	ldr	r0, [ip, r3, lsl #2]
   225a8:	cmp	fp, r0
   225ac:	bgt	229e8 <__assert_fail@plt+0x11740>
   225b0:	cmp	r3, r1
   225b4:	bls	225f0 <__assert_fail@plt+0x11348>
   225b8:	add	r2, r3, r1
   225bc:	lsr	r2, r2, #1
   225c0:	ldr	r0, [ip, r2, lsl #2]
   225c4:	cmp	fp, r0
   225c8:	ble	225e0 <__assert_fail@plt+0x11338>
   225cc:	b	229dc <__assert_fail@plt+0x11734>
   225d0:	ldr	r0, [ip, r3, lsl #2]
   225d4:	cmp	fp, r0
   225d8:	bgt	229e8 <__assert_fail@plt+0x11740>
   225dc:	mov	r2, r3
   225e0:	add	r3, r1, r2
   225e4:	cmp	r1, r2
   225e8:	lsr	r3, r3, #1
   225ec:	bcc	225d0 <__assert_fail@plt+0x11328>
   225f0:	ldr	r3, [ip, r1, lsl #2]
   225f4:	cmp	fp, r3
   225f8:	beq	22610 <__assert_fail@plt+0x11368>
   225fc:	mov	r1, fp
   22600:	ldr	r0, [sp, #24]
   22604:	bl	17910 <__assert_fail@plt+0x6668>
   22608:	cmp	r0, #0
   2260c:	beq	22f38 <__assert_fail@plt+0x11c90>
   22610:	ldr	r9, [r4, #4]
   22614:	cmp	r9, #0
   22618:	ble	227dc <__assert_fail@plt+0x11534>
   2261c:	ldr	r8, [r6, #8]
   22620:	mvn	fp, #0
   22624:	mov	lr, #0
   22628:	ldr	sl, [r4, #8]
   2262c:	add	r7, r8, fp
   22630:	cmp	r8, #0
   22634:	ble	226b4 <__assert_fail@plt+0x1140c>
   22638:	cmp	r7, #0
   2263c:	ldr	r4, [sl, lr, lsl #2]
   22640:	moveq	r1, r7
   22644:	ldr	r0, [r6, #12]
   22648:	beq	226a8 <__assert_fail@plt+0x11400>
   2264c:	mov	r2, r7
   22650:	mov	r1, #0
   22654:	add	r3, r2, r1
   22658:	lsr	r3, r3, #1
   2265c:	ldr	ip, [r0, r3, lsl #2]
   22660:	cmp	r4, ip
   22664:	bgt	226dc <__assert_fail@plt+0x11434>
   22668:	cmp	r3, r1
   2266c:	bls	226a8 <__assert_fail@plt+0x11400>
   22670:	add	r2, r3, r1
   22674:	lsr	r2, r2, #1
   22678:	ldr	ip, [r0, r2, lsl #2]
   2267c:	cmp	r4, ip
   22680:	ble	22698 <__assert_fail@plt+0x113f0>
   22684:	b	226d0 <__assert_fail@plt+0x11428>
   22688:	ldr	ip, [r0, r3, lsl #2]
   2268c:	cmp	r4, ip
   22690:	bgt	226dc <__assert_fail@plt+0x11434>
   22694:	mov	r2, r3
   22698:	add	r3, r1, r2
   2269c:	cmp	r1, r2
   226a0:	lsr	r3, r3, #1
   226a4:	bcc	22688 <__assert_fail@plt+0x113e0>
   226a8:	ldr	r3, [r0, r1, lsl #2]
   226ac:	cmp	r4, r3
   226b0:	beq	226ec <__assert_fail@plt+0x11444>
   226b4:	add	lr, lr, #1
   226b8:	cmp	lr, r9
   226bc:	bne	22630 <__assert_fail@plt+0x11388>
   226c0:	cmp	fp, #0
   226c4:	blt	22f30 <__assert_fail@plt+0x11c88>
   226c8:	ldr	r6, [sp, #116]	; 0x74
   226cc:	b	22484 <__assert_fail@plt+0x111dc>
   226d0:	mov	r1, r2
   226d4:	mov	r2, r3
   226d8:	mov	r3, r1
   226dc:	add	r1, r3, #1
   226e0:	cmp	r2, r1
   226e4:	bhi	22654 <__assert_fail@plt+0x113ac>
   226e8:	b	226a8 <__assert_fail@plt+0x11400>
   226ec:	cmn	fp, #1
   226f0:	bne	22aa8 <__assert_fail@plt+0x11800>
   226f4:	mov	fp, r4
   226f8:	b	226b4 <__assert_fail@plt+0x1140c>
   226fc:	ldrb	r2, [r1, #6]
   22700:	tst	r2, #16
   22704:	bne	22bf0 <__assert_fail@plt+0x11948>
   22708:	cmp	r3, #4
   2270c:	beq	22c3c <__assert_fail@plt+0x11994>
   22710:	ldr	r8, [sp, #116]	; 0x74
   22714:	mov	r2, r8
   22718:	add	r0, sp, #144	; 0x90
   2271c:	bl	17fe8 <__assert_fail@plt+0x6d40>
   22720:	cmp	r0, #0
   22724:	beq	227dc <__assert_fail@plt+0x11534>
   22728:	ldr	r3, [r6, #12]
   2272c:	add	r8, r8, #1
   22730:	ldr	fp, [r3, r7, lsl #2]
   22734:	cmp	r5, #0
   22738:	str	r8, [sp, #116]	; 0x74
   2273c:	beq	22898 <__assert_fail@plt+0x115f0>
   22740:	ldr	r3, [sp, #236]	; 0xec
   22744:	cmp	r8, r3
   22748:	bgt	227dc <__assert_fail@plt+0x11534>
   2274c:	ldr	r3, [sp, #244]	; 0xf4
   22750:	ldr	r3, [r3, r8, lsl #2]
   22754:	cmp	r3, #0
   22758:	beq	227dc <__assert_fail@plt+0x11534>
   2275c:	ldr	r2, [r3, #8]
   22760:	cmp	r2, #0
   22764:	ble	227dc <__assert_fail@plt+0x11534>
   22768:	subs	r2, r2, #1
   2276c:	ldr	r0, [r3, #12]
   22770:	moveq	r1, r2
   22774:	beq	227d0 <__assert_fail@plt+0x11528>
   22778:	mov	r1, #0
   2277c:	add	r3, r2, r1
   22780:	lsr	r3, r3, #1
   22784:	ldr	ip, [r0, r3, lsl #2]
   22788:	cmp	ip, fp
   2278c:	blt	22a04 <__assert_fail@plt+0x1175c>
   22790:	cmp	r3, r1
   22794:	bls	227d0 <__assert_fail@plt+0x11528>
   22798:	add	r2, r3, r1
   2279c:	lsr	r2, r2, #1
   227a0:	ldr	ip, [r0, r2, lsl #2]
   227a4:	cmp	fp, ip
   227a8:	ble	227c0 <__assert_fail@plt+0x11518>
   227ac:	b	229f8 <__assert_fail@plt+0x11750>
   227b0:	ldr	ip, [r0, r3, lsl #2]
   227b4:	cmp	ip, fp
   227b8:	blt	22a04 <__assert_fail@plt+0x1175c>
   227bc:	mov	r2, r3
   227c0:	add	r3, r1, r2
   227c4:	cmp	r1, r2
   227c8:	lsr	r3, r3, #1
   227cc:	bcc	227b0 <__assert_fail@plt+0x11508>
   227d0:	ldr	r3, [r0, r1, lsl #2]
   227d4:	cmp	r3, fp
   227d8:	beq	22898 <__assert_fail@plt+0x115f0>
   227dc:	ldr	ip, [sp, #24]
   227e0:	mov	r0, r5
   227e4:	ldr	r1, [sp, #28]
   227e8:	ldr	r2, [sp, #472]	; 0x1d8
   227ec:	ldr	r3, [sp, #476]	; 0x1dc
   227f0:	stm	sp, {r1, ip}
   227f4:	add	r1, sp, #116	; 0x74
   227f8:	bl	17a58 <__assert_fail@plt+0x67b0>
   227fc:	subs	fp, r0, #0
   22800:	bge	226c8 <__assert_fail@plt+0x11420>
   22804:	ldr	sl, [sp, #20]
   22808:	ldr	r0, [sp, #140]	; 0x8c
   2280c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22810:	ldr	r3, [sp, #16]
   22814:	ldr	r0, [sp, #288]	; 0x120
   22818:	cmp	r0, r3
   2281c:	beq	22824 <__assert_fail@plt+0x1157c>
   22820:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22824:	ldr	r1, [sp, #16]
   22828:	mov	r2, #0
   2282c:	mov	r3, #16
   22830:	cmp	r5, #0
   22834:	str	r1, [sp, #288]	; 0x120
   22838:	add	r1, sp, #280	; 0x118
   2283c:	strd	r2, [r1]
   22840:	beq	21900 <__assert_fail@plt+0x10658>
   22844:	mov	r6, #24
   22848:	ldr	r4, [sp, #36]	; 0x24
   2284c:	b	2286c <__assert_fail@plt+0x115c4>
   22850:	add	r0, r0, r7
   22854:	ldr	r0, [r0, #20]
   22858:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2285c:	ldr	r3, [r5, #8]
   22860:	add	r3, r3, r7
   22864:	ldr	r0, [r3, #8]
   22868:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2286c:	ldr	r3, [r5]
   22870:	mul	r7, r6, r4
   22874:	ldr	r0, [r5, #8]
   22878:	cmp	r4, r3
   2287c:	add	r4, r4, #1
   22880:	blt	22850 <__assert_fail@plt+0x115a8>
   22884:	mov	r3, #1
   22888:	str	r3, [sp, #36]	; 0x24
   2288c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22890:	ldr	r4, [sp, #244]	; 0xf4
   22894:	b	21d68 <__assert_fail@plt+0x10ac0>
   22898:	mov	r3, #0
   2289c:	str	r3, [sp, #136]	; 0x88
   228a0:	b	226c0 <__assert_fail@plt+0x11418>
   228a4:	mov	r1, r2
   228a8:	mov	r2, r3
   228ac:	mov	r3, r1
   228b0:	add	r1, r3, #1
   228b4:	cmp	r2, r1
   228b8:	bhi	224ec <__assert_fail@plt+0x11244>
   228bc:	b	22540 <__assert_fail@plt+0x11298>
   228c0:	ldr	r3, [sp, #240]	; 0xf0
   228c4:	cmp	r3, fp
   228c8:	bne	224c4 <__assert_fail@plt+0x1121c>
   228cc:	cmp	r5, #0
   228d0:	beq	230d8 <__assert_fail@plt+0x11e30>
   228d4:	ldr	r0, [sp, #40]	; 0x28
   228d8:	mov	r3, #0
   228dc:	ldr	r1, [sp, #472]	; 0x1d8
   228e0:	ldr	r2, [sp, #476]	; 0x1dc
   228e4:	ldr	r2, [r2, r3, lsl #3]
   228e8:	cmp	r2, #0
   228ec:	blt	228fc <__assert_fail@plt+0x11654>
   228f0:	ldr	r2, [r0, r3, lsl #3]
   228f4:	cmn	r2, #1
   228f8:	beq	22a74 <__assert_fail@plt+0x117cc>
   228fc:	add	r3, r3, #1
   22900:	cmp	r1, r3
   22904:	bne	228e0 <__assert_fail@plt+0x11638>
   22908:	ldr	sl, [sp, #20]
   2290c:	ldr	r0, [sp, #140]	; 0x8c
   22910:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22914:	ldr	r3, [sp, #16]
   22918:	ldr	r0, [sp, #288]	; 0x120
   2291c:	cmp	r0, r3
   22920:	beq	2311c <__assert_fail@plt+0x11e74>
   22924:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22928:	ldr	r1, [sp, #16]
   2292c:	mov	r2, #0
   22930:	mov	r3, #16
   22934:	cmp	r5, #0
   22938:	str	r1, [sp, #288]	; 0x120
   2293c:	add	r1, sp, #280	; 0x118
   22940:	strd	r2, [r1]
   22944:	beq	22998 <__assert_fail@plt+0x116f0>
   22948:	ldr	r3, [r5]
   2294c:	cmp	r3, #0
   22950:	movgt	r6, #0
   22954:	movgt	r4, r6
   22958:	ble	22990 <__assert_fail@plt+0x116e8>
   2295c:	ldr	r3, [r5, #8]
   22960:	add	r6, r6, #1
   22964:	add	r3, r3, r4
   22968:	ldr	r0, [r3, #20]
   2296c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22970:	ldr	r3, [r5, #8]
   22974:	add	r3, r3, r4
   22978:	add	r4, r4, #24
   2297c:	ldr	r0, [r3, #8]
   22980:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22984:	ldr	r3, [r5]
   22988:	cmp	r6, r3
   2298c:	blt	2295c <__assert_fail@plt+0x116b4>
   22990:	ldr	r0, [r5, #8]
   22994:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22998:	ldr	r4, [sp, #244]	; 0xf4
   2299c:	ldr	r3, [sp, #476]	; 0x1dc
   229a0:	ldr	r3, [r3]
   229a4:	b	21e5c <__assert_fail@plt+0x10bb4>
   229a8:	ldr	r3, [r2, fp, lsl #3]
   229ac:	ldr	r2, [sp, #472]	; 0x1d8
   229b0:	add	r3, r3, #1
   229b4:	cmp	r2, r3
   229b8:	ble	224bc <__assert_fail@plt+0x11214>
   229bc:	ldr	r2, [sp, #476]	; 0x1dc
   229c0:	ldr	r1, [sp, #476]	; 0x1dc
   229c4:	add	r2, r2, r3, lsl #3
   229c8:	str	r6, [r1, r3, lsl #3]
   229cc:	mvn	r3, #0
   229d0:	str	r3, [r2, #4]
   229d4:	ldr	r0, [r1, #4]
   229d8:	b	224bc <__assert_fail@plt+0x11214>
   229dc:	mov	r1, r2
   229e0:	mov	r2, r3
   229e4:	mov	r3, r1
   229e8:	add	r1, r3, #1
   229ec:	cmp	r2, r1
   229f0:	bhi	2259c <__assert_fail@plt+0x112f4>
   229f4:	b	225f0 <__assert_fail@plt+0x11348>
   229f8:	mov	r1, r2
   229fc:	mov	r2, r3
   22a00:	mov	r3, r1
   22a04:	add	r1, r3, #1
   22a08:	cmp	r2, r1
   22a0c:	bhi	2277c <__assert_fail@plt+0x114d4>
   22a10:	b	227d0 <__assert_fail@plt+0x11528>
   22a14:	ldr	r3, [r1]
   22a18:	ldr	r2, [sp, #472]	; 0x1d8
   22a1c:	add	r3, r3, #1
   22a20:	cmp	r2, r3
   22a24:	ble	224bc <__assert_fail@plt+0x11214>
   22a28:	ldr	r2, [sp, #476]	; 0x1dc
   22a2c:	ldr	r0, [sp, #476]	; 0x1dc
   22a30:	ldr	r2, [r2, r3, lsl #3]
   22a34:	add	r0, r0, r3, lsl #3
   22a38:	cmp	r2, r6
   22a3c:	blt	22f0c <__assert_fail@plt+0x11c64>
   22a40:	ldrb	r2, [r1, #6]
   22a44:	tst	r2, #8
   22a48:	beq	22ee4 <__assert_fail@plt+0x11c3c>
   22a4c:	ldr	r1, [sp, #28]
   22a50:	ldr	r3, [r1, r3, lsl #3]
   22a54:	cmn	r3, #1
   22a58:	beq	22ee4 <__assert_fail@plt+0x11c3c>
   22a5c:	ldr	r2, [sp, #32]
   22a60:	ldr	r0, [sp, #476]	; 0x1dc
   22a64:	bl	11038 <memcpy@plt>
   22a68:	ldr	r3, [sp, #476]	; 0x1dc
   22a6c:	ldr	r0, [r3, #4]
   22a70:	b	224bc <__assert_fail@plt+0x11214>
   22a74:	ldr	ip, [sp, #24]
   22a78:	mov	r0, r5
   22a7c:	ldr	r1, [sp, #28]
   22a80:	ldr	r2, [sp, #472]	; 0x1d8
   22a84:	ldr	r3, [sp, #476]	; 0x1dc
   22a88:	stm	sp, {r1, ip}
   22a8c:	add	r1, sp, #116	; 0x74
   22a90:	bl	17a58 <__assert_fail@plt+0x67b0>
   22a94:	subs	fp, r0, #0
   22a98:	blt	22908 <__assert_fail@plt+0x11660>
   22a9c:	mov	r7, fp
   22aa0:	lsl	r4, fp, #3
   22aa4:	b	2254c <__assert_fail@plt+0x112a4>
   22aa8:	ldr	r2, [sp, #136]	; 0x88
   22aac:	cmp	r2, #0
   22ab0:	ble	22b28 <__assert_fail@plt+0x11880>
   22ab4:	subs	r2, r2, #1
   22ab8:	ldr	r0, [sp, #140]	; 0x8c
   22abc:	moveq	r1, r2
   22ac0:	beq	22b1c <__assert_fail@plt+0x11874>
   22ac4:	mov	r1, #0
   22ac8:	add	r3, r2, r1
   22acc:	lsr	r3, r3, #1
   22ad0:	ldr	ip, [r0, r3, lsl #2]
   22ad4:	cmp	fp, ip
   22ad8:	bgt	22c2c <__assert_fail@plt+0x11984>
   22adc:	cmp	r3, r1
   22ae0:	bls	22b1c <__assert_fail@plt+0x11874>
   22ae4:	add	r2, r3, r1
   22ae8:	lsr	r2, r2, #1
   22aec:	ldr	ip, [r0, r2, lsl #2]
   22af0:	cmp	fp, ip
   22af4:	ble	22b0c <__assert_fail@plt+0x11864>
   22af8:	b	22c20 <__assert_fail@plt+0x11978>
   22afc:	ldr	ip, [r0, r3, lsl #2]
   22b00:	cmp	fp, ip
   22b04:	bgt	22c2c <__assert_fail@plt+0x11984>
   22b08:	mov	r2, r3
   22b0c:	add	r3, r1, r2
   22b10:	cmp	r1, r2
   22b14:	lsr	r3, r3, #1
   22b18:	bcc	22afc <__assert_fail@plt+0x11854>
   22b1c:	ldr	r3, [r0, r1, lsl #2]
   22b20:	cmp	fp, r3
   22b24:	beq	22f04 <__assert_fail@plt+0x11c5c>
   22b28:	cmp	r5, #0
   22b2c:	beq	226c0 <__assert_fail@plt+0x11418>
   22b30:	ldr	r6, [r5]
   22b34:	ldmib	r5, {r1, r3}
   22b38:	ldr	r7, [sp, #116]	; 0x74
   22b3c:	add	r2, r6, #1
   22b40:	cmp	r2, r1
   22b44:	str	r2, [r5]
   22b48:	beq	23064 <__assert_fail@plt+0x11dbc>
   22b4c:	add	r2, r6, r6, lsl #1
   22b50:	ldr	r0, [sp, #44]	; 0x2c
   22b54:	lsl	r6, r2, #3
   22b58:	str	r7, [r3, r2, lsl #3]
   22b5c:	add	r7, r3, r6
   22b60:	str	r4, [r7, #4]
   22b64:	bl	2ab48 <__assert_fail@plt+0x198a0>
   22b68:	ldr	r3, [r5, #8]
   22b6c:	str	r0, [r7, #8]
   22b70:	add	r3, r3, r6
   22b74:	ldr	r0, [r3, #8]
   22b78:	cmp	r0, #0
   22b7c:	beq	230a8 <__assert_fail@plt+0x11e00>
   22b80:	ldr	r4, [sp, #32]
   22b84:	ldr	r1, [sp, #476]	; 0x1dc
   22b88:	mov	r2, r4
   22b8c:	bl	11038 <memcpy@plt>
   22b90:	ldr	r3, [r5, #8]
   22b94:	mov	r2, r4
   22b98:	ldr	r1, [sp, #28]
   22b9c:	add	r3, r3, r6
   22ba0:	ldr	r0, [r3, #8]
   22ba4:	add	r0, r0, r4
   22ba8:	bl	11038 <memcpy@plt>
   22bac:	ldr	r2, [r5, #8]
   22bb0:	ldr	r3, [sp, #136]	; 0x88
   22bb4:	add	r6, r2, r6
   22bb8:	cmp	r3, #0
   22bbc:	str	r3, [r6, #16]
   22bc0:	ble	23050 <__assert_fail@plt+0x11da8>
   22bc4:	lsl	r0, r3, #2
   22bc8:	str	r3, [r6, #12]
   22bcc:	bl	2ab48 <__assert_fail@plt+0x198a0>
   22bd0:	cmp	r0, #0
   22bd4:	str	r0, [r6, #20]
   22bd8:	beq	230f8 <__assert_fail@plt+0x11e50>
   22bdc:	ldr	r2, [sp, #136]	; 0x88
   22be0:	ldr	r1, [sp, #140]	; 0x8c
   22be4:	lsl	r2, r2, #2
   22be8:	bl	11038 <memcpy@plt>
   22bec:	b	226c0 <__assert_fail@plt+0x11418>
   22bf0:	ldr	ip, [sp, #116]	; 0x74
   22bf4:	add	r3, sp, #144	; 0x90
   22bf8:	mov	r2, fp
   22bfc:	add	r1, r6, #128	; 0x80
   22c00:	str	ip, [sp]
   22c04:	bl	1aae4 <__assert_fail@plt+0x983c>
   22c08:	subs	r8, r0, #0
   22c0c:	bne	22efc <__assert_fail@plt+0x11c54>
   22c10:	ldr	r1, [r6]
   22c14:	ldr	r8, [sp, #116]	; 0x74
   22c18:	add	r1, r1, r4
   22c1c:	b	22714 <__assert_fail@plt+0x1146c>
   22c20:	mov	r1, r2
   22c24:	mov	r2, r3
   22c28:	mov	r3, r1
   22c2c:	add	r1, r3, #1
   22c30:	cmp	r2, r1
   22c34:	bhi	22ac8 <__assert_fail@plt+0x11820>
   22c38:	b	22b1c <__assert_fail@plt+0x11874>
   22c3c:	ldr	r3, [r1]
   22c40:	ldr	r2, [sp, #472]	; 0x1d8
   22c44:	add	r3, r3, #1
   22c48:	cmp	r2, r3
   22c4c:	ble	22dc8 <__assert_fail@plt+0x11b20>
   22c50:	ldr	r2, [sp, #476]	; 0x1dc
   22c54:	cmp	r5, #0
   22c58:	ldr	r1, [sp, #476]	; 0x1dc
   22c5c:	add	r2, r2, r3, lsl #3
   22c60:	ldr	r0, [r1, r3, lsl #3]
   22c64:	ldr	r3, [r2, #4]
   22c68:	sub	r8, r3, r0
   22c6c:	beq	22ef4 <__assert_fail@plt+0x11c4c>
   22c70:	cmn	r0, #1
   22c74:	beq	227dc <__assert_fail@plt+0x11534>
   22c78:	cmn	r3, #1
   22c7c:	beq	227dc <__assert_fail@plt+0x11534>
   22c80:	cmp	r8, #0
   22c84:	beq	22dd0 <__assert_fail@plt+0x11b28>
   22c88:	ldr	r4, [sp, #116]	; 0x74
   22c8c:	ldr	r1, [sp, #148]	; 0x94
   22c90:	ldr	r3, [sp, #172]	; 0xac
   22c94:	sub	r3, r3, r4
   22c98:	cmp	r8, r3
   22c9c:	bgt	227dc <__assert_fail@plt+0x11534>
   22ca0:	add	r0, r1, r0
   22ca4:	mov	r2, r8
   22ca8:	add	r1, r1, r4
   22cac:	bl	11074 <memcmp@plt>
   22cb0:	cmp	r0, #0
   22cb4:	bne	227dc <__assert_fail@plt+0x11534>
   22cb8:	ldr	r3, [r6, #12]
   22cbc:	add	r8, r8, r4
   22cc0:	ldr	fp, [r3, fp, lsl #2]
   22cc4:	b	22734 <__assert_fail@plt+0x1148c>
   22cc8:	mov	r0, #0
   22ccc:	mov	r1, #2
   22cd0:	mov	r3, #16
   22cd4:	mov	r2, #0
   22cd8:	strd	r0, [sp, #120]	; 0x78
   22cdc:	add	r0, sp, #280	; 0x118
   22ce0:	mov	ip, #0
   22ce4:	add	r1, sp, #292	; 0x124
   22ce8:	add	lr, sp, #132	; 0x84
   22cec:	strd	r2, [r0]
   22cf0:	mov	r5, ip
   22cf4:	ldr	r3, [sp, #12]
   22cf8:	str	r1, [sp, #16]
   22cfc:	str	lr, [sp, #24]
   22d00:	str	ip, [sp, #128]	; 0x80
   22d04:	str	r1, [sp, #288]	; 0x120
   22d08:	ldr	fp, [r3, #72]	; 0x48
   22d0c:	str	ip, [sp, #132]	; 0x84
   22d10:	str	ip, [sp, #136]	; 0x88
   22d14:	str	ip, [sp, #140]	; 0x8c
   22d18:	mov	r3, #8
   22d1c:	add	r0, sp, #280	; 0x118
   22d20:	ldr	r2, [sp, #16]
   22d24:	ldr	r1, [sp, #472]	; 0x1d8
   22d28:	bl	2ac64 <__assert_fail@plt+0x199bc>
   22d2c:	cmp	r0, #0
   22d30:	bne	2244c <__assert_fail@plt+0x111a4>
   22d34:	ldr	r3, [sp, #16]
   22d38:	ldr	r0, [sp, #288]	; 0x120
   22d3c:	cmp	r0, r3
   22d40:	beq	22d48 <__assert_fail@plt+0x11aa0>
   22d44:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22d48:	ldr	r1, [sp, #16]
   22d4c:	mov	r2, #0
   22d50:	mov	r3, #16
   22d54:	cmp	r5, #0
   22d58:	str	r1, [sp, #288]	; 0x120
   22d5c:	add	r1, sp, #280	; 0x118
   22d60:	strd	r2, [r1]
   22d64:	beq	22154 <__assert_fail@plt+0x10eac>
   22d68:	ldr	r3, [r5]
   22d6c:	cmp	r3, #0
   22d70:	movgt	r4, #0
   22d74:	ldrgt	r6, [sp, #36]	; 0x24
   22d78:	ble	22db0 <__assert_fail@plt+0x11b08>
   22d7c:	add	r6, r6, #1
   22d80:	ldr	r3, [r5, #8]
   22d84:	add	r3, r3, r4
   22d88:	ldr	r0, [r3, #20]
   22d8c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22d90:	ldr	r3, [r5, #8]
   22d94:	add	r3, r3, r4
   22d98:	add	r4, r4, #24
   22d9c:	ldr	r0, [r3, #8]
   22da0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22da4:	ldr	r3, [r5]
   22da8:	cmp	r6, r3
   22dac:	blt	22d7c <__assert_fail@plt+0x11ad4>
   22db0:	mov	r3, #12
   22db4:	ldr	r0, [r5, #8]
   22db8:	str	r3, [sp, #36]	; 0x24
   22dbc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22dc0:	ldr	r4, [sp, #244]	; 0xf4
   22dc4:	b	21d68 <__assert_fail@plt+0x10ac0>
   22dc8:	cmp	r5, #0
   22dcc:	bne	227dc <__assert_fail@plt+0x11534>
   22dd0:	mov	r1, fp
   22dd4:	ldr	r0, [sp, #24]
   22dd8:	bl	17910 <__assert_fail@plt+0x6668>
   22ddc:	cmp	r0, #0
   22de0:	beq	22f38 <__assert_fail@plt+0x11c90>
   22de4:	ldr	r8, [sp, #116]	; 0x74
   22de8:	ldr	r3, [sp, #244]	; 0xf4
   22dec:	ldr	r0, [r3, r8, lsl #2]
   22df0:	ldr	r2, [r0, #8]
   22df4:	cmp	r2, #0
   22df8:	ble	22e84 <__assert_fail@plt+0x11bdc>
   22dfc:	ldr	r1, [r6, #20]
   22e00:	mov	r3, #12
   22e04:	subs	r2, r2, #1
   22e08:	ldr	ip, [r0, #12]
   22e0c:	mla	fp, r3, fp, r1
   22e10:	moveq	r1, r2
   22e14:	ldr	r3, [fp, #8]
   22e18:	ldr	r0, [r3]
   22e1c:	beq	22e78 <__assert_fail@plt+0x11bd0>
   22e20:	mov	r1, #0
   22e24:	add	r3, r2, r1
   22e28:	lsr	r3, r3, #1
   22e2c:	ldr	lr, [ip, r3, lsl #2]
   22e30:	cmp	r0, lr
   22e34:	bgt	23098 <__assert_fail@plt+0x11df0>
   22e38:	cmp	r1, r3
   22e3c:	bcs	22e78 <__assert_fail@plt+0x11bd0>
   22e40:	add	r2, r1, r3
   22e44:	lsr	r2, r2, #1
   22e48:	ldr	lr, [ip, r2, lsl #2]
   22e4c:	cmp	r0, lr
   22e50:	ble	22e68 <__assert_fail@plt+0x11bc0>
   22e54:	b	2308c <__assert_fail@plt+0x11de4>
   22e58:	ldr	lr, [ip, r3, lsl #2]
   22e5c:	cmp	r0, lr
   22e60:	bgt	23098 <__assert_fail@plt+0x11df0>
   22e64:	mov	r2, r3
   22e68:	add	r3, r1, r2
   22e6c:	cmp	r1, r2
   22e70:	lsr	r3, r3, #1
   22e74:	bcc	22e58 <__assert_fail@plt+0x11bb0>
   22e78:	ldr	fp, [ip, r1, lsl #2]
   22e7c:	cmp	r0, fp
   22e80:	beq	226c0 <__assert_fail@plt+0x11418>
   22e84:	ldr	r1, [r6]
   22e88:	add	r1, r1, r4
   22e8c:	b	22714 <__assert_fail@plt+0x1146c>
   22e90:	ldr	r2, [sp, #472]	; 0x1d8
   22e94:	ldr	r3, [sp, #476]	; 0x1dc
   22e98:	sub	r1, r3, #8
   22e9c:	add	r1, r1, r2, lsl #3
   22ea0:	mvn	r2, #0
   22ea4:	str	r2, [r3, #12]
   22ea8:	str	r2, [r3, #8]!
   22eac:	cmp	r1, r3
   22eb0:	bne	22ea4 <__assert_fail@plt+0x11bfc>
   22eb4:	b	21e28 <__assert_fail@plt+0x10b80>
   22eb8:	ldr	r2, [sp, #472]	; 0x1d8
   22ebc:	add	r1, r2, r0
   22ec0:	ldr	r2, [sp, #476]	; 0x1dc
   22ec4:	add	r1, r2, r1, lsl #3
   22ec8:	mvn	r2, #0
   22ecc:	add	r3, r3, #8
   22ed0:	str	r2, [r3, #-8]
   22ed4:	str	r2, [r3, #-4]
   22ed8:	cmp	r1, r3
   22edc:	bne	22ecc <__assert_fail@plt+0x11c24>
   22ee0:	b	21f24 <__assert_fail@plt+0x10c7c>
   22ee4:	ldr	r3, [sp, #476]	; 0x1dc
   22ee8:	str	r6, [r0, #4]
   22eec:	ldr	r0, [r3, #4]
   22ef0:	b	224bc <__assert_fail@plt+0x11214>
   22ef4:	cmp	r8, #0
   22ef8:	beq	22dd0 <__assert_fail@plt+0x11b28>
   22efc:	ldr	r4, [sp, #116]	; 0x74
   22f00:	b	22cb8 <__assert_fail@plt+0x11a10>
   22f04:	mov	fp, r4
   22f08:	b	226c0 <__assert_fail@plt+0x11418>
   22f0c:	str	r6, [r0, #4]
   22f10:	ldr	r0, [sp, #28]
   22f14:	ldr	r2, [sp, #32]
   22f18:	ldr	r1, [sp, #476]	; 0x1dc
   22f1c:	bl	11038 <memcpy@plt>
   22f20:	ldr	r6, [sp, #116]	; 0x74
   22f24:	ldr	r3, [sp, #476]	; 0x1dc
   22f28:	ldr	r0, [r3, #4]
   22f2c:	b	224bc <__assert_fail@plt+0x11214>
   22f30:	cmn	fp, #2
   22f34:	bne	227dc <__assert_fail@plt+0x11534>
   22f38:	ldr	sl, [sp, #20]
   22f3c:	ldr	r0, [sp, #140]	; 0x8c
   22f40:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22f44:	ldr	r3, [sp, #16]
   22f48:	ldr	r0, [sp, #288]	; 0x120
   22f4c:	cmp	r0, r3
   22f50:	beq	22f58 <__assert_fail@plt+0x11cb0>
   22f54:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22f58:	ldr	r1, [sp, #16]
   22f5c:	mov	r2, #0
   22f60:	mov	r3, #16
   22f64:	cmp	r5, #0
   22f68:	str	r1, [sp, #288]	; 0x120
   22f6c:	add	r1, sp, #280	; 0x118
   22f70:	strd	r2, [r1]
   22f74:	beq	22154 <__assert_fail@plt+0x10eac>
   22f78:	ldr	r3, [r5]
   22f7c:	cmp	r3, #0
   22f80:	movgt	r4, #0
   22f84:	ldrgt	r6, [sp, #36]	; 0x24
   22f88:	ble	22db0 <__assert_fail@plt+0x11b08>
   22f8c:	add	r6, r6, #1
   22f90:	ldr	r3, [r5, #8]
   22f94:	add	r3, r3, r4
   22f98:	ldr	r0, [r3, #20]
   22f9c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22fa0:	ldr	r3, [r5, #8]
   22fa4:	add	r3, r3, r4
   22fa8:	add	r4, r4, #24
   22fac:	ldr	r0, [r3, #8]
   22fb0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22fb4:	ldr	r3, [r5]
   22fb8:	cmp	r6, r3
   22fbc:	blt	22f8c <__assert_fail@plt+0x11ce4>
   22fc0:	b	22db0 <__assert_fail@plt+0x11b08>
   22fc4:	ldr	sl, [sp, #20]
   22fc8:	ldr	r0, [sp, #140]	; 0x8c
   22fcc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22fd0:	ldr	r3, [sp, #16]
   22fd4:	ldr	r0, [sp, #288]	; 0x120
   22fd8:	cmp	r0, r3
   22fdc:	beq	22fe4 <__assert_fail@plt+0x11d3c>
   22fe0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   22fe4:	ldr	r1, [sp, #16]
   22fe8:	mov	r2, #0
   22fec:	mov	r3, #16
   22ff0:	cmp	r5, #0
   22ff4:	str	r1, [sp, #288]	; 0x120
   22ff8:	add	r1, sp, #280	; 0x118
   22ffc:	strd	r2, [r1]
   23000:	beq	22998 <__assert_fail@plt+0x116f0>
   23004:	ldr	r3, [r5]
   23008:	cmp	r3, #0
   2300c:	movgt	r6, #0
   23010:	movgt	r4, r6
   23014:	ble	22990 <__assert_fail@plt+0x116e8>
   23018:	ldr	r3, [r5, #8]
   2301c:	add	r6, r6, #1
   23020:	add	r3, r3, r4
   23024:	ldr	r0, [r3, #20]
   23028:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2302c:	ldr	r3, [r5, #8]
   23030:	add	r3, r3, r4
   23034:	add	r4, r4, #24
   23038:	ldr	r0, [r3, #8]
   2303c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   23040:	ldr	r3, [r5]
   23044:	cmp	r6, r3
   23048:	blt	23018 <__assert_fail@plt+0x11d70>
   2304c:	b	22990 <__assert_fail@plt+0x116e8>
   23050:	mov	r3, #0
   23054:	str	r3, [r6, #12]
   23058:	str	r3, [r6, #16]
   2305c:	str	r3, [r6, #20]
   23060:	b	226c0 <__assert_fail@plt+0x11418>
   23064:	mov	r1, #48	; 0x30
   23068:	mov	r0, r3
   2306c:	mul	r1, r1, r2
   23070:	bl	2ab84 <__assert_fail@plt+0x198dc>
   23074:	subs	r3, r0, #0
   23078:	beq	230a8 <__assert_fail@plt+0x11e00>
   2307c:	ldr	r2, [r5, #4]
   23080:	lsl	r2, r2, #1
   23084:	strd	r2, [r5, #4]
   23088:	b	22b4c <__assert_fail@plt+0x118a4>
   2308c:	mov	r1, r2
   23090:	mov	r2, r3
   23094:	mov	r3, r1
   23098:	add	r1, r3, #1
   2309c:	cmp	r2, r1
   230a0:	bhi	22e24 <__assert_fail@plt+0x11b7c>
   230a4:	b	22e78 <__assert_fail@plt+0x11bd0>
   230a8:	ldr	sl, [sp, #20]
   230ac:	ldr	r0, [sp, #140]	; 0x8c
   230b0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   230b4:	ldr	r3, [sp, #16]
   230b8:	ldr	r0, [sp, #288]	; 0x120
   230bc:	cmp	r0, r3
   230c0:	bne	22f54 <__assert_fail@plt+0x11cac>
   230c4:	mov	r2, #0
   230c8:	mov	r3, #16
   230cc:	add	r1, sp, #280	; 0x118
   230d0:	strd	r2, [r1]
   230d4:	b	22f78 <__assert_fail@plt+0x11cd0>
   230d8:	ldr	sl, [sp, #20]
   230dc:	ldr	r0, [sp, #140]	; 0x8c
   230e0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   230e4:	ldr	r3, [sp, #16]
   230e8:	ldr	r0, [sp, #288]	; 0x120
   230ec:	cmp	r0, r3
   230f0:	bne	22994 <__assert_fail@plt+0x116ec>
   230f4:	b	22998 <__assert_fail@plt+0x116f0>
   230f8:	str	r0, [r6, #12]
   230fc:	str	r0, [r6, #16]
   23100:	ldr	sl, [sp, #20]
   23104:	b	230ac <__assert_fail@plt+0x11e04>
   23108:	ldr	sl, [sp, #68]	; 0x44
   2310c:	ldr	r3, [sp, #472]	; 0x1d8
   23110:	b	21dd4 <__assert_fail@plt+0x10b2c>
   23114:	add	r5, sp, #120	; 0x78
   23118:	b	22d18 <__assert_fail@plt+0x11a70>
   2311c:	mov	r2, #0
   23120:	mov	r3, #16
   23124:	add	r1, sp, #280	; 0x118
   23128:	strd	r2, [r1]
   2312c:	b	22948 <__assert_fail@plt+0x116a0>
   23130:	ldr	r1, [sp, #168]	; 0xa8
   23134:	sub	r2, r5, r1
   23138:	ldr	r0, [sp, #172]	; 0xac
   2313c:	mov	r3, r4
   23140:	cmp	r0, r2
   23144:	bls	23154 <__assert_fail@plt+0x11eac>
   23148:	ldr	r3, [sp, #148]	; 0x94
   2314c:	ldrb	r3, [r3, r2]
   23150:	add	r3, r4, r3
   23154:	ldrb	r3, [r3]
   23158:	cmp	r3, #0
   2315c:	bne	21468 <__assert_fail@plt+0x101c0>
   23160:	ldr	r2, [sp, #76]	; 0x4c
   23164:	ldr	r3, [sp, #96]	; 0x60
   23168:	add	r5, r5, r3
   2316c:	ldr	r3, [sp, #64]	; 0x40
   23170:	str	r5, [sp, #112]	; 0x70
   23174:	cmp	r5, r3
   23178:	movle	r3, #0
   2317c:	movgt	r3, #1
   23180:	cmp	r5, r2
   23184:	orrlt	r3, r3, #1
   23188:	cmp	r3, #0
   2318c:	beq	2218c <__assert_fail@plt+0x10ee4>
   23190:	b	218fc <__assert_fail@plt+0x10654>
   23194:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23198:	mov	r5, r1
   2319c:	strd	r6, [sp, #8]
   231a0:	strd	r8, [sp, #16]
   231a4:	mov	r9, r0
   231a8:	strd	sl, [sp, #24]
   231ac:	str	lr, [sp, #32]
   231b0:	sub	sp, sp, #164	; 0xa4
   231b4:	ldr	sl, [r1]
   231b8:	str	r2, [sp, #20]
   231bc:	ldrb	r2, [r2, #4]
   231c0:	str	r3, [sp, #32]
   231c4:	sub	r3, r2, #1
   231c8:	cmp	r3, #35	; 0x23
   231cc:	ldrls	pc, [pc, r3, lsl #2]
   231d0:	b	23e30 <__assert_fail@plt+0x12b88>
   231d4:	ldrdeq	r3, [r2], -r0
   231d8:	andeq	r3, r2, r8, lsr #14
   231dc:	andeq	r3, r2, r0, lsr lr
   231e0:	andeq	r3, r2, r8, lsr #24
   231e4:	muleq	r2, ip, fp
   231e8:	andeq	r3, r2, r0, lsr lr
   231ec:	andeq	r3, r2, r0, lsr lr
   231f0:	andeq	r3, r2, r8, lsl #13
   231f4:	andeq	r3, r2, r8, asr #28
   231f8:	andeq	r3, r2, r8, lsr #14
   231fc:	andeq	r3, r2, r0, ror r2
   23200:	andeq	r3, r2, r0, asr r7
   23204:	andeq	r3, r2, r0, lsr lr
   23208:	andeq	r3, r2, r0, lsr lr
   2320c:	andeq	r3, r2, r0, lsr lr
   23210:	andeq	r3, r2, r0, lsr lr
   23214:	andeq	r3, r2, r0, lsr lr
   23218:	andeq	r3, r2, r0, ror r2
   2321c:	andeq	r3, r2, r0, ror r2
   23220:	ldrdeq	r3, [r2], -ip
   23224:	andeq	r3, r2, r0, lsr lr
   23228:	andeq	r3, r2, r0, lsr lr
   2322c:	andeq	r3, r2, r4, ror #4
   23230:	andeq	r3, r2, ip, lsl #5
   23234:	andeq	r3, r2, r0, lsr lr
   23238:	andeq	r3, r2, r0, lsr lr
   2323c:	andeq	r3, r2, r0, lsr lr
   23240:	andeq	r3, r2, r0, lsr lr
   23244:	andeq	r3, r2, r0, lsr lr
   23248:	andeq	r3, r2, r0, lsr lr
   2324c:	andeq	r3, r2, r0, lsr lr
   23250:	andeq	r3, r2, r4, ror r9
   23254:	andeq	r3, r2, r4, ror r9
   23258:	andeq	r3, r2, r0, lsl lr
   2325c:	andeq	r3, r2, r0, lsl lr
   23260:	andeq	r3, r2, r0, lsr lr
   23264:	ldr	r3, [sp, #32]
   23268:	tst	r3, #16777216	; 0x1000000
   2326c:	bne	2403c <__assert_fail@plt+0x12d94>
   23270:	ldr	r3, [sp, #32]
   23274:	tst	r3, #32
   23278:	bne	2403c <__assert_fail@plt+0x12d94>
   2327c:	tst	r3, #16
   23280:	bne	24b54 <__assert_fail@plt+0x138ac>
   23284:	cmp	r2, #9
   23288:	beq	23e48 <__assert_fail@plt+0x12ba0>
   2328c:	ldr	r3, [sp, #20]
   23290:	mov	r4, #1
   23294:	strb	r4, [r3, #4]
   23298:	ldr	r2, [sl, #64]	; 0x40
   2329c:	cmp	r2, #31
   232a0:	beq	24a94 <__assert_fail@plt+0x137ec>
   232a4:	ldr	r0, [sl, #56]	; 0x38
   232a8:	lsl	r3, r2, #5
   232ac:	add	r4, r2, r4
   232b0:	add	r2, r3, #4
   232b4:	add	r1, r0, r3
   232b8:	add	r3, r3, #16
   232bc:	str	r4, [sl, #64]	; 0x40
   232c0:	adds	r2, r0, r2
   232c4:	add	r0, r0, r3
   232c8:	ldr	r3, [sp, #20]
   232cc:	mov	ip, #0
   232d0:	mvn	lr, #0
   232d4:	str	r2, [sp, #28]
   232d8:	str	ip, [r1, #4]
   232dc:	str	ip, [r1, #8]
   232e0:	str	ip, [r1, #12]
   232e4:	ldrd	r2, [r3]
   232e8:	strd	r2, [r1, #24]
   232ec:	ldrb	r3, [r0, #14]
   232f0:	bic	r3, r3, #12
   232f4:	strb	r3, [r0, #14]
   232f8:	str	ip, [r1, #16]
   232fc:	str	ip, [r1, #20]
   23300:	str	lr, [r1, #32]
   23304:	beq	23b84 <__assert_fail@plt+0x128dc>
   23308:	ldr	r6, [sp, #20]
   2330c:	mov	r1, r9
   23310:	mov	r5, #0
   23314:	ldr	r4, [sp, #32]
   23318:	mov	r0, r6
   2331c:	and	r3, r4, #2097152	; 0x200000
   23320:	mov	r2, r4
   23324:	str	r3, [sp, #52]	; 0x34
   23328:	bl	19b80 <__assert_fail@plt+0x88d8>
   2332c:	ldr	r3, [r9, #40]	; 0x28
   23330:	and	r2, r4, #16777216	; 0x1000000
   23334:	ldrb	r7, [r6, #4]
   23338:	str	r2, [sp, #36]	; 0x24
   2333c:	add	r0, r3, r0
   23340:	str	r0, [r9, #40]	; 0x28
   23344:	cmp	r7, #23
   23348:	cmpne	r7, #11
   2334c:	sub	r2, r7, #18
   23350:	moveq	r3, #1
   23354:	movne	r3, #0
   23358:	cmp	r2, #1
   2335c:	orrls	r3, r3, #1
   23360:	sub	r1, r7, #18
   23364:	clz	r1, r1
   23368:	cmp	r3, #0
   2336c:	lsr	r1, r1, #5
   23370:	beq	23730 <__assert_fail@plt+0x12488>
   23374:	ldr	r3, [sp, #20]
   23378:	cmp	r7, #23
   2337c:	add	r6, sp, #96	; 0x60
   23380:	ldr	r4, [r9, #40]	; 0x28
   23384:	ldrd	r2, [r3]
   23388:	strd	r2, [sp, #96]	; 0x60
   2338c:	beq	2418c <__assert_fail@plt+0x12ee4>
   23390:	cmp	r7, #19
   23394:	mov	r8, r1
   23398:	beq	240c0 <__assert_fail@plt+0x12e18>
   2339c:	mov	r1, r9
   233a0:	ldr	r0, [sp, #20]
   233a4:	ldr	r2, [sp, #32]
   233a8:	bl	19b80 <__assert_fail@plt+0x88d8>
   233ac:	ldr	r3, [r9, #40]	; 0x28
   233b0:	ldr	r2, [sp, #28]
   233b4:	add	r0, r3, r0
   233b8:	cmp	r2, #0
   233bc:	str	r0, [r9, #40]	; 0x28
   233c0:	beq	242f8 <__assert_fail@plt+0x13050>
   233c4:	cmp	r7, #18
   233c8:	beq	2492c <__assert_fail@plt+0x13684>
   233cc:	ldrb	r3, [r2, #24]
   233d0:	mov	r7, r2
   233d4:	cmp	r3, #17
   233d8:	beq	24240 <__assert_fail@plt+0x12f98>
   233dc:	mov	r8, #0
   233e0:	add	fp, sp, #128	; 0x80
   233e4:	str	r8, [sp, #40]	; 0x28
   233e8:	mvn	r3, #0
   233ec:	mov	r6, #11
   233f0:	str	r3, [sp, #24]
   233f4:	mov	r2, #0
   233f8:	mov	r3, #0
   233fc:	strd	r2, [fp]
   23400:	ldr	r1, [sl, #64]	; 0x40
   23404:	cmp	r1, #31
   23408:	beq	24314 <__assert_fail@plt+0x1306c>
   2340c:	ldr	r4, [sl, #56]	; 0x38
   23410:	lsl	r3, r1, #5
   23414:	add	r1, r1, #1
   23418:	add	r0, r3, #4
   2341c:	add	r2, r4, r3
   23420:	add	r3, r3, #16
   23424:	str	r1, [sl, #64]	; 0x40
   23428:	add	r3, r4, r3
   2342c:	add	r4, r4, r0
   23430:	stmib	r2, {r5, r7}
   23434:	mvn	ip, #0
   23438:	cmp	r4, #0
   2343c:	str	r5, [r2, #12]
   23440:	strb	r6, [sp, #132]	; 0x84
   23444:	ldrd	r0, [fp]
   23448:	strd	r0, [r2, #24]
   2344c:	ldrb	r0, [r3, #14]
   23450:	bic	r0, r0, #12
   23454:	strb	r0, [r3, #14]
   23458:	str	r5, [r2, #16]
   2345c:	str	r5, [r2, #20]
   23460:	str	ip, [r2, #32]
   23464:	str	r4, [r7]
   23468:	beq	240a0 <__assert_fail@plt+0x12df8>
   2346c:	ldr	r3, [sp, #24]
   23470:	add	r1, r8, #2
   23474:	cmp	r1, r3
   23478:	bgt	23f6c <__assert_fail@plt+0x12cc4>
   2347c:	mov	r8, r4
   23480:	mov	r2, fp
   23484:	str	sl, [sp, #16]
   23488:	str	r9, [sp, #44]	; 0x2c
   2348c:	mov	r9, r1
   23490:	mov	fp, r2
   23494:	mov	r6, r2
   23498:	b	234a0 <__assert_fail@plt+0x121f8>
   2349c:	mov	r7, r3
   234a0:	ldr	r2, [sl, #64]	; 0x40
   234a4:	cmp	r2, #31
   234a8:	beq	24060 <__assert_fail@plt+0x12db8>
   234ac:	ldr	r0, [sl, #56]	; 0x38
   234b0:	lsl	r3, r2, #5
   234b4:	add	r2, r2, #1
   234b8:	add	lr, r3, #4
   234bc:	add	ip, r0, r3
   234c0:	add	r3, r3, #16
   234c4:	str	r2, [sl, #64]	; 0x40
   234c8:	add	r1, r0, r3
   234cc:	add	r0, r0, lr
   234d0:	str	r5, [ip, #4]
   234d4:	mvn	lr, #0
   234d8:	cmp	r0, #0
   234dc:	str	r5, [ip, #8]
   234e0:	str	r5, [ip, #12]
   234e4:	ldrd	r2, [r7, #20]
   234e8:	strd	r2, [ip, #24]
   234ec:	ldrb	r3, [r1, #14]
   234f0:	bic	r3, r3, #12
   234f4:	strb	r3, [r1, #14]
   234f8:	str	r5, [ip, #16]
   234fc:	str	r5, [ip, #20]
   23500:	str	lr, [ip, #32]
   23504:	str	r0, [fp]
   23508:	beq	2408c <__assert_fail@plt+0x12de4>
   2350c:	str	r8, [ip, #4]
   23510:	ldr	r8, [fp]
   23514:	ldrb	r3, [r8, #26]
   23518:	orr	r3, r3, #4
   2351c:	strb	r3, [r8, #26]
   23520:	ldr	r3, [r7, #4]
   23524:	cmp	r3, #0
   23528:	addne	fp, r8, #4
   2352c:	bne	2349c <__assert_fail@plt+0x121f4>
   23530:	ldr	r2, [r7, #8]
   23534:	cmp	r2, #0
   23538:	cmpne	r2, r3
   2353c:	mov	r3, r7
   23540:	bne	24054 <__assert_fail@plt+0x12dac>
   23544:	ldr	r2, [r7]
   23548:	ldr	r8, [r8]
   2354c:	subs	r7, r2, #0
   23550:	bne	23530 <__assert_fail@plt+0x12288>
   23554:	mov	r2, r6
   23558:	ldr	r6, [sp, #128]	; 0x80
   2355c:	str	sl, [sp, #16]
   23560:	mov	r0, #0
   23564:	mov	r1, #0
   23568:	strd	r0, [r2]
   2356c:	ldr	r1, [sp, #16]
   23570:	ldr	r0, [r1, #64]	; 0x40
   23574:	cmp	r0, #31
   23578:	beq	24114 <__assert_fail@plt+0x12e6c>
   2357c:	lsl	r3, r0, #5
   23580:	add	ip, r0, #1
   23584:	ldr	r0, [r1, #56]	; 0x38
   23588:	add	r8, r3, #4
   2358c:	add	r7, r0, r3
   23590:	mov	lr, #16
   23594:	str	ip, [r1, #64]	; 0x40
   23598:	add	r3, r3, lr
   2359c:	add	r8, r0, r8
   235a0:	str	r5, [r7, #4]
   235a4:	add	r3, r0, r3
   235a8:	mvn	ip, #0
   235ac:	str	r4, [r7, #8]
   235b0:	cmp	r6, #0
   235b4:	str	r6, [r7, #12]
   235b8:	strb	lr, [sp, #132]	; 0x84
   235bc:	ldrd	sl, [r2]
   235c0:	strd	sl, [r7, #24]
   235c4:	ldrb	lr, [r3, #14]
   235c8:	bic	lr, lr, #12
   235cc:	strb	lr, [r3, #14]
   235d0:	str	r5, [r7, #16]
   235d4:	str	r5, [r7, #20]
   235d8:	str	ip, [r7, #32]
   235dc:	str	r8, [r4]
   235e0:	beq	240a0 <__assert_fail@plt+0x12df8>
   235e4:	cmp	r8, #0
   235e8:	str	r8, [r6]
   235ec:	beq	240a0 <__assert_fail@plt+0x12df8>
   235f0:	mov	sl, #0
   235f4:	mov	fp, #0
   235f8:	strd	sl, [r2]
   235fc:	ldr	r3, [r1, #64]	; 0x40
   23600:	cmp	r3, #31
   23604:	lslne	ip, r3, #5
   23608:	addne	lr, r3, #1
   2360c:	addne	r4, ip, #4
   23610:	beq	24150 <__assert_fail@plt+0x12ea8>
   23614:	add	r3, r0, ip
   23618:	str	lr, [r1, #64]	; 0x40
   2361c:	mov	lr, #10
   23620:	add	ip, ip, #16
   23624:	add	r4, r0, r4
   23628:	stmib	r3, {r5, r8}
   2362c:	add	r0, r0, ip
   23630:	mvn	ip, #0
   23634:	str	r5, [r3, #12]
   23638:	cmp	r4, #0
   2363c:	strb	lr, [sp, #132]	; 0x84
   23640:	ldrd	sl, [r2]
   23644:	strd	sl, [r3, #24]
   23648:	ldrb	lr, [r0, #14]
   2364c:	bic	lr, lr, #12
   23650:	strb	lr, [r0, #14]
   23654:	str	r5, [r3, #16]
   23658:	str	r5, [r3, #20]
   2365c:	str	ip, [r3, #32]
   23660:	str	r4, [r7, #4]
   23664:	beq	240a0 <__assert_fail@plt+0x12df8>
   23668:	ldr	r3, [sp, #24]
   2366c:	add	r9, r9, #1
   23670:	cmp	r9, r3
   23674:	bgt	23f60 <__assert_fail@plt+0x12cb8>
   23678:	mov	r7, r6
   2367c:	mov	sl, r1
   23680:	ldr	r8, [r6]
   23684:	b	23490 <__assert_fail@plt+0x121e8>
   23688:	ldr	r4, [r5, #24]
   2368c:	mov	r1, r0
   23690:	ldr	r6, [sp, #20]
   23694:	ldr	r7, [sp, #32]
   23698:	add	r3, r4, #1
   2369c:	mov	r0, r6
   236a0:	str	r3, [r5, #24]
   236a4:	orr	r2, r7, #8388608	; 0x800000
   236a8:	bl	19b80 <__assert_fail@plt+0x88d8>
   236ac:	ldr	r3, [r9, #40]	; 0x28
   236b0:	ldrb	r2, [r6, #4]
   236b4:	add	r3, r3, r0
   236b8:	cmp	r2, #9
   236bc:	str	r3, [r9, #40]	; 0x28
   236c0:	moveq	r5, #0
   236c4:	beq	23e68 <__assert_fail@plt+0x12bc0>
   236c8:	ldr	r3, [sp, #200]	; 0xc8
   236cc:	mov	r1, r5
   236d0:	mov	r2, r6
   236d4:	add	r0, r3, #1
   236d8:	ldr	r3, [sp, #204]	; 0xcc
   236dc:	stm	sp, {r0, r3}
   236e0:	mov	r3, r7
   236e4:	mov	r0, r9
   236e8:	bl	25a98 <__assert_fail@plt+0x147f0>
   236ec:	ldr	r3, [sp, #204]	; 0xcc
   236f0:	mov	r5, r0
   236f4:	ldr	r3, [r3]
   236f8:	cmp	r3, #0
   236fc:	bne	23728 <__assert_fail@plt+0x12480>
   23700:	ldr	r3, [sp, #20]
   23704:	ldrb	r3, [r3, #4]
   23708:	cmp	r3, #9
   2370c:	beq	23e68 <__assert_fail@plt+0x12bc0>
   23710:	cmp	r0, #0
   23714:	beq	2371c <__assert_fail@plt+0x12474>
   23718:	bl	1adec <__assert_fail@plt+0x9b44>
   2371c:	ldr	r2, [sp, #204]	; 0xcc
   23720:	mov	r3, #8
   23724:	str	r3, [r2]
   23728:	mov	r3, #0
   2372c:	str	r3, [sp, #28]
   23730:	ldr	r0, [sp, #28]
   23734:	add	sp, sp, #164	; 0xa4
   23738:	ldrd	r4, [sp]
   2373c:	ldrd	r6, [sp, #8]
   23740:	ldrd	r8, [sp, #16]
   23744:	ldrd	sl, [sp, #24]
   23748:	add	sp, sp, #32
   2374c:	pop	{pc}		; (ldr pc, [sp], #4)
   23750:	ldr	r3, [sp, #20]
   23754:	ldr	r5, [r3]
   23758:	movw	r3, #783	; 0x30f
   2375c:	tst	r5, r3
   23760:	beq	237c0 <__assert_fail@plt+0x12518>
   23764:	ldrb	r3, [sl, #88]	; 0x58
   23768:	ands	r4, r3, #16
   2376c:	bne	237c0 <__assert_fail@plt+0x12518>
   23770:	orr	r3, r3, #16
   23774:	ands	r2, r3, #8
   23778:	mov	r1, r3
   2377c:	strb	r3, [sl, #88]	; 0x58
   23780:	bne	254fc <__assert_fail@plt+0x14254>
   23784:	mov	r3, #0
   23788:	movt	r3, #1023	; 0x3ff
   2378c:	tst	r1, #4
   23790:	mvn	r1, #2013265921	; 0x78000001
   23794:	strd	r2, [sl, #96]	; 0x60
   23798:	mvn	r3, #-134217727	; 0xf8000001
   2379c:	str	r1, [sl, #104]	; 0x68
   237a0:	str	r3, [sl, #108]	; 0x6c
   237a4:	beq	2547c <__assert_fail@plt+0x141d4>
   237a8:	ldr	r3, [sp, #20]
   237ac:	str	r2, [sl, #112]	; 0x70
   237b0:	str	r2, [sl, #116]	; 0x74
   237b4:	str	r2, [sl, #120]	; 0x78
   237b8:	str	r2, [sl, #124]	; 0x7c
   237bc:	ldr	r5, [r3]
   237c0:	sub	r3, r5, #256	; 0x100
   237c4:	bics	r6, r3, #256	; 0x100
   237c8:	bne	24a20 <__assert_fail@plt+0x13778>
   237cc:	cmp	r5, #256	; 0x100
   237d0:	beq	24c1c <__assert_fail@plt+0x13974>
   237d4:	ldr	r2, [sp, #20]
   237d8:	mov	r3, #5
   237dc:	str	r3, [r2]
   237e0:	ldr	r2, [sl, #64]	; 0x40
   237e4:	cmp	r2, #31
   237e8:	beq	25414 <__assert_fail@plt+0x1416c>
   237ec:	lsl	r3, r2, r3
   237f0:	add	r1, r2, #1
   237f4:	ldr	r2, [sl, #56]	; 0x38
   237f8:	add	r4, r3, #4
   237fc:	add	ip, r2, r3
   23800:	add	r3, r3, #16
   23804:	str	r1, [sl, #64]	; 0x40
   23808:	add	r3, r2, r3
   2380c:	add	r4, r2, r4
   23810:	ldr	r2, [sp, #20]
   23814:	mov	lr, #0
   23818:	mvn	r5, #0
   2381c:	str	lr, [ip, #4]
   23820:	str	lr, [ip, #8]
   23824:	str	lr, [ip, #12]
   23828:	ldrd	r0, [r2]
   2382c:	strd	r0, [ip, #24]
   23830:	ldrb	r2, [r3, #14]
   23834:	bic	r2, r2, #12
   23838:	strb	r2, [r3, #14]
   2383c:	str	lr, [ip, #16]
   23840:	str	lr, [ip, #20]
   23844:	str	r5, [ip, #32]
   23848:	ldr	r2, [sp, #20]
   2384c:	mov	r3, #10
   23850:	str	r3, [r2]
   23854:	ldr	r2, [sl, #64]	; 0x40
   23858:	cmp	r2, #31
   2385c:	beq	25018 <__assert_fail@plt+0x13d70>
   23860:	ldr	r0, [sl, #56]	; 0x38
   23864:	lsl	r3, r2, #5
   23868:	add	r2, r2, #1
   2386c:	add	r5, r3, #4
   23870:	add	r1, r0, r3
   23874:	add	r3, r3, #16
   23878:	str	r2, [sl, #64]	; 0x40
   2387c:	add	r5, r0, r5
   23880:	add	r0, r0, r3
   23884:	ldr	r3, [sp, #20]
   23888:	mov	ip, #0
   2388c:	mvn	lr, #0
   23890:	str	ip, [r1, #4]
   23894:	str	ip, [r1, #8]
   23898:	str	ip, [r1, #12]
   2389c:	ldrd	r2, [r3]
   238a0:	strd	r2, [r1, #24]
   238a4:	ldrb	r3, [r0, #14]
   238a8:	bic	r3, r3, #12
   238ac:	strb	r3, [r0, #14]
   238b0:	str	ip, [r1, #16]
   238b4:	str	ip, [r1, #20]
   238b8:	str	lr, [r1, #32]
   238bc:	mov	r2, #0
   238c0:	mov	r3, #0
   238c4:	strd	r2, [sp, #128]	; 0x80
   238c8:	ldr	r2, [sl, #64]	; 0x40
   238cc:	cmp	r2, #31
   238d0:	beq	24fec <__assert_fail@plt+0x13d44>
   238d4:	ldr	r0, [sl, #56]	; 0x38
   238d8:	lsl	r3, r2, #5
   238dc:	add	r2, r2, #1
   238e0:	add	r6, r3, #4
   238e4:	add	ip, r0, r3
   238e8:	mov	lr, #0
   238ec:	str	r2, [sl, #64]	; 0x40
   238f0:	mov	r2, #10
   238f4:	add	r3, r3, #16
   238f8:	str	lr, [ip, #4]
   238fc:	add	r1, r0, r3
   23900:	add	r6, r0, r6
   23904:	strd	r4, [ip, #8]
   23908:	mvn	r0, #0
   2390c:	cmp	r4, lr
   23910:	str	r6, [sp, #28]
   23914:	strb	r2, [sp, #132]	; 0x84
   23918:	ldrd	r2, [sp, #128]	; 0x80
   2391c:	strd	r2, [ip, #24]
   23920:	ldrb	r3, [r1, #14]
   23924:	bic	r3, r3, #12
   23928:	strb	r3, [r1, #14]
   2392c:	str	lr, [ip, #16]
   23930:	str	lr, [ip, #20]
   23934:	str	r0, [ip, #32]
   23938:	beq	24e90 <__assert_fail@plt+0x13be8>
   2393c:	cmp	r5, lr
   23940:	str	r6, [r4]
   23944:	beq	23b84 <__assert_fail@plt+0x128dc>
   23948:	cmp	r6, lr
   2394c:	str	r6, [r5]
   23950:	beq	23b84 <__assert_fail@plt+0x128dc>
   23954:	mov	r1, r9
   23958:	ldr	r0, [sp, #20]
   2395c:	ldr	r2, [sp, #32]
   23960:	bl	19b80 <__assert_fail@plt+0x88d8>
   23964:	ldr	r3, [r9, #40]	; 0x28
   23968:	add	r3, r3, r0
   2396c:	str	r3, [r9, #40]	; 0x28
   23970:	b	23730 <__assert_fail@plt+0x12488>
   23974:	sub	r1, r2, #33	; 0x21
   23978:	movw	r3, #49156	; 0xc004
   2397c:	movt	r3, #2
   23980:	clz	r1, r1
   23984:	lsr	r1, r1, #5
   23988:	movw	r2, #49084	; 0xbfbc
   2398c:	movt	r2, #2
   23990:	str	r1, [sp]
   23994:	mov	r0, sl
   23998:	ldr	r1, [sp, #204]	; 0xcc
   2399c:	str	r1, [sp, #4]
   239a0:	ldr	r1, [r9, #64]	; 0x40
   239a4:	bl	1ef14 <__assert_fail@plt+0xdc6c>
   239a8:	ldr	r3, [sp, #204]	; 0xcc
   239ac:	str	r0, [sp, #28]
   239b0:	ldr	r2, [r3]
   239b4:	clz	r3, r0
   239b8:	lsr	r3, r3, #5
   239bc:	cmp	r2, #0
   239c0:	moveq	r3, #0
   239c4:	cmp	r3, #0
   239c8:	beq	23308 <__assert_fail@plt+0x12060>
   239cc:	b	23728 <__assert_fail@plt+0x12480>
   239d0:	ldr	r2, [sl, #64]	; 0x40
   239d4:	cmp	r2, #31
   239d8:	beq	24f68 <__assert_fail@plt+0x13cc0>
   239dc:	ldr	r0, [sl, #56]	; 0x38
   239e0:	lsl	r3, r2, #5
   239e4:	add	r2, r2, #1
   239e8:	add	ip, r3, #4
   239ec:	add	r1, r0, r3
   239f0:	add	r3, r3, #16
   239f4:	str	r2, [sl, #64]	; 0x40
   239f8:	adds	r2, r0, ip
   239fc:	add	r0, r0, r3
   23a00:	ldr	r3, [sp, #20]
   23a04:	mov	r4, #0
   23a08:	mvn	r7, #0
   23a0c:	str	r2, [sp, #28]
   23a10:	str	r4, [r1, #4]
   23a14:	str	r4, [r1, #8]
   23a18:	str	r4, [r1, #12]
   23a1c:	ldrd	r2, [r3]
   23a20:	strd	r2, [r1, #24]
   23a24:	ldrb	r3, [r0, #14]
   23a28:	bic	r3, r3, #12
   23a2c:	strb	r3, [r0, #14]
   23a30:	str	r4, [r1, #16]
   23a34:	str	r4, [r1, #20]
   23a38:	str	r7, [r1, #32]
   23a3c:	beq	23b84 <__assert_fail@plt+0x128dc>
   23a40:	ldr	r3, [sl, #92]	; 0x5c
   23a44:	cmp	r3, #1
   23a48:	ble	23308 <__assert_fail@plt+0x12060>
   23a4c:	ldr	r8, [sp, #20]
   23a50:	ldr	r5, [sp, #28]
   23a54:	ldr	r6, [sp, #32]
   23a58:	b	23a68 <__assert_fail@plt+0x127c0>
   23a5c:	subs	r5, ip, #0
   23a60:	str	ip, [fp]
   23a64:	beq	23b84 <__assert_fail@plt+0x128dc>
   23a68:	ldr	r3, [r9, #40]	; 0x28
   23a6c:	ldr	r2, [r9, #56]	; 0x38
   23a70:	cmp	r2, r3
   23a74:	ble	24c14 <__assert_fail@plt+0x1396c>
   23a78:	ldr	r2, [r9, #28]
   23a7c:	cmp	r3, r2
   23a80:	beq	24c14 <__assert_fail@plt+0x1396c>
   23a84:	ldr	r2, [r9, #8]
   23a88:	ldr	r3, [r2, r3, lsl #2]
   23a8c:	cmn	r3, #1
   23a90:	bne	24c14 <__assert_fail@plt+0x1396c>
   23a94:	mov	r2, r6
   23a98:	mov	r1, r9
   23a9c:	mov	r0, r8
   23aa0:	bl	19b80 <__assert_fail@plt+0x88d8>
   23aa4:	ldr	r3, [r9, #40]	; 0x28
   23aa8:	add	r3, r3, r0
   23aac:	str	r3, [r9, #40]	; 0x28
   23ab0:	ldr	r2, [sl, #64]	; 0x40
   23ab4:	cmp	r2, #31
   23ab8:	beq	24bd8 <__assert_fail@plt+0x13930>
   23abc:	ldr	fp, [sl, #56]	; 0x38
   23ac0:	lsl	r3, r2, #5
   23ac4:	add	r2, r2, #1
   23ac8:	add	r0, r3, #4
   23acc:	add	ip, fp, r3
   23ad0:	add	r3, r3, #16
   23ad4:	str	r2, [sl, #64]	; 0x40
   23ad8:	add	r1, fp, r3
   23adc:	add	fp, fp, r0
   23ae0:	str	r4, [ip, #4]
   23ae4:	str	r4, [ip, #8]
   23ae8:	str	r4, [ip, #12]
   23aec:	ldrd	r2, [r8]
   23af0:	strd	r2, [ip, #24]
   23af4:	ldrb	r3, [r1, #14]
   23af8:	bic	r3, r3, #12
   23afc:	strb	r3, [r1, #14]
   23b00:	str	r4, [ip, #16]
   23b04:	str	r4, [ip, #20]
   23b08:	str	r7, [ip, #32]
   23b0c:	mov	r2, #0
   23b10:	mov	r3, #0
   23b14:	strd	r2, [sp, #128]	; 0x80
   23b18:	add	r2, sp, #128	; 0x80
   23b1c:	ldr	r1, [sl, #64]	; 0x40
   23b20:	cmp	r1, #31
   23b24:	beq	24ba4 <__assert_fail@plt+0x138fc>
   23b28:	ldr	r0, [sl, #56]	; 0x38
   23b2c:	lsl	r3, r1, #5
   23b30:	add	lr, r1, #1
   23b34:	add	ip, r3, #4
   23b38:	add	r1, r0, r3
   23b3c:	str	lr, [sl, #64]	; 0x40
   23b40:	mov	lr, #16
   23b44:	add	r3, r3, lr
   23b48:	add	ip, r0, ip
   23b4c:	add	r0, r0, r3
   23b50:	stmib	r1, {r4, r5, fp}
   23b54:	cmp	fp, #0
   23b58:	strb	lr, [sp, #132]	; 0x84
   23b5c:	ldrd	r2, [r2]
   23b60:	strd	r2, [r1, #24]
   23b64:	ldrb	r3, [r0, #14]
   23b68:	bic	r3, r3, #12
   23b6c:	strb	r3, [r0, #14]
   23b70:	str	r4, [r1, #16]
   23b74:	str	r4, [r1, #20]
   23b78:	str	r7, [r1, #32]
   23b7c:	str	ip, [r5]
   23b80:	bne	23a5c <__assert_fail@plt+0x127b4>
   23b84:	mov	r2, #0
   23b88:	mov	r3, #12
   23b8c:	str	r2, [sp, #28]
   23b90:	ldr	r2, [sp, #204]	; 0xcc
   23b94:	str	r3, [r2]
   23b98:	b	23730 <__assert_fail@plt+0x12488>
   23b9c:	ldr	r2, [sl, #64]	; 0x40
   23ba0:	cmp	r2, #31
   23ba4:	beq	24eac <__assert_fail@plt+0x13c04>
   23ba8:	ldr	r0, [sl, #56]	; 0x38
   23bac:	lsl	r3, r2, #5
   23bb0:	add	r2, r2, #1
   23bb4:	add	lr, r3, #4
   23bb8:	add	r1, r0, r3
   23bbc:	add	r3, r3, #16
   23bc0:	str	r2, [sl, #64]	; 0x40
   23bc4:	adds	r2, r0, lr
   23bc8:	add	r0, r0, r3
   23bcc:	ldr	r3, [sp, #20]
   23bd0:	mov	ip, #0
   23bd4:	mvn	lr, #0
   23bd8:	str	r2, [sp, #28]
   23bdc:	str	ip, [r1, #4]
   23be0:	str	ip, [r1, #8]
   23be4:	str	ip, [r1, #12]
   23be8:	ldrd	r2, [r3]
   23bec:	strd	r2, [r1, #24]
   23bf0:	ldrb	r3, [r0, #14]
   23bf4:	bic	r3, r3, #12
   23bf8:	strb	r3, [r0, #14]
   23bfc:	str	ip, [r1, #16]
   23c00:	str	ip, [r1, #20]
   23c04:	str	lr, [r1, #32]
   23c08:	beq	23b84 <__assert_fail@plt+0x128dc>
   23c0c:	ldr	r3, [sl, #92]	; 0x5c
   23c10:	cmp	r3, #1
   23c14:	ble	23308 <__assert_fail@plt+0x12060>
   23c18:	ldrb	r3, [sl, #88]	; 0x58
   23c1c:	orr	r3, r3, #2
   23c20:	strb	r3, [sl, #88]	; 0x58
   23c24:	b	23308 <__assert_fail@plt+0x12060>
   23c28:	ldr	r3, [sp, #20]
   23c2c:	mov	r4, #1
   23c30:	ldr	r2, [sl, #84]	; 0x54
   23c34:	ldr	r3, [r3]
   23c38:	lsl	r3, r4, r3
   23c3c:	ands	r2, r3, r2
   23c40:	beq	24ed8 <__assert_fail@plt+0x13c30>
   23c44:	ldr	r1, [sl, #64]	; 0x40
   23c48:	ldr	r2, [sl, #80]	; 0x50
   23c4c:	cmp	r1, #31
   23c50:	orr	r3, r2, r3
   23c54:	str	r3, [sl, #80]	; 0x50
   23c58:	beq	24fc4 <__assert_fail@plt+0x13d1c>
   23c5c:	ldr	r0, [sl, #56]	; 0x38
   23c60:	lsl	r3, r1, #5
   23c64:	add	r4, r1, #1
   23c68:	add	r2, r3, #4
   23c6c:	add	r1, r0, r3
   23c70:	add	r3, r3, #16
   23c74:	str	r4, [sl, #64]	; 0x40
   23c78:	adds	r2, r0, r2
   23c7c:	add	r0, r0, r3
   23c80:	ldr	r3, [sp, #20]
   23c84:	mov	ip, #0
   23c88:	mvn	lr, #0
   23c8c:	str	r2, [sp, #28]
   23c90:	str	ip, [r1, #4]
   23c94:	str	ip, [r1, #8]
   23c98:	str	ip, [r1, #12]
   23c9c:	ldrd	r2, [r3]
   23ca0:	strd	r2, [r1, #24]
   23ca4:	ldrb	r3, [r0, #14]
   23ca8:	bic	r3, r3, #12
   23cac:	strb	r3, [r0, #14]
   23cb0:	str	ip, [r1, #16]
   23cb4:	str	ip, [r1, #20]
   23cb8:	str	lr, [r1, #32]
   23cbc:	beq	23b84 <__assert_fail@plt+0x128dc>
   23cc0:	ldrb	r3, [sl, #88]	; 0x58
   23cc4:	ldr	r2, [sl, #76]	; 0x4c
   23cc8:	orr	r3, r3, #2
   23ccc:	add	r2, r2, #1
   23cd0:	str	r2, [sl, #76]	; 0x4c
   23cd4:	strb	r3, [sl, #88]	; 0x58
   23cd8:	b	23308 <__assert_fail@plt+0x12060>
   23cdc:	mov	r6, #0
   23ce0:	mov	r1, #1
   23ce4:	mov	r0, #32
   23ce8:	str	r6, [sp, #68]	; 0x44
   23cec:	bl	2aad4 <__assert_fail@plt+0x1982c>
   23cf0:	mov	r4, r0
   23cf4:	mov	r1, #1
   23cf8:	mov	r0, #40	; 0x28
   23cfc:	bl	2aad4 <__assert_fail@plt+0x1982c>
   23d00:	clz	r5, r0
   23d04:	cmp	r4, r6
   23d08:	str	r0, [sp, #16]
   23d0c:	lsr	r5, r5, #5
   23d10:	moveq	r5, #1
   23d14:	cmp	r5, r6
   23d18:	bne	24eec <__assert_fail@plt+0x13c44>
   23d1c:	ldr	r6, [sp, #20]
   23d20:	mov	r1, r9
   23d24:	ldr	r2, [sp, #32]
   23d28:	mov	r0, r6
   23d2c:	bl	166c8 <__assert_fail@plt+0x5420>
   23d30:	ldrb	r3, [r6, #4]
   23d34:	mov	fp, r0
   23d38:	cmp	r3, #2
   23d3c:	beq	24e9c <__assert_fail@plt+0x13bf4>
   23d40:	cmp	r3, #25
   23d44:	strne	r5, [sp, #44]	; 0x2c
   23d48:	beq	24acc <__assert_fail@plt+0x13824>
   23d4c:	cmp	r3, #21
   23d50:	beq	24abc <__assert_fail@plt+0x13814>
   23d54:	ldr	r5, [sp, #20]
   23d58:	mov	r3, #0
   23d5c:	mov	r0, #1
   23d60:	mov	r6, #3
   23d64:	str	sl, [sp, #24]
   23d68:	ldr	r2, [sp, #32]
   23d6c:	str	r3, [sp, #36]	; 0x24
   23d70:	str	r3, [sp, #40]	; 0x28
   23d74:	add	r3, sp, #96	; 0x60
   23d78:	str	r3, [sp, #28]
   23d7c:	ubfx	r1, r2, #16, #1
   23d80:	mov	sl, r2
   23d84:	str	r1, [sp, #48]	; 0x30
   23d88:	ldr	ip, [sp, #28]
   23d8c:	mov	r3, fp
   23d90:	mov	r2, r5
   23d94:	mov	r1, r9
   23d98:	str	sl, [sp]
   23d9c:	str	r0, [sp, #4]
   23da0:	add	r0, sp, #72	; 0x48
   23da4:	str	r6, [sp, #72]	; 0x48
   23da8:	str	ip, [sp, #76]	; 0x4c
   23dac:	bl	1a83c <__assert_fail@plt+0x9594>
   23db0:	cmp	r0, #0
   23db4:	bne	24c04 <__assert_fail@plt+0x1395c>
   23db8:	mov	r2, sl
   23dbc:	mov	r1, r9
   23dc0:	mov	r0, r5
   23dc4:	bl	166c8 <__assert_fail@plt+0x5420>
   23dc8:	ldr	r3, [sp, #72]	; 0x48
   23dcc:	mov	fp, r0
   23dd0:	sub	r2, r3, #2
   23dd4:	bics	r2, r2, #2
   23dd8:	beq	23df0 <__assert_fail@plt+0x12b48>
   23ddc:	ldrb	r2, [r5, #4]
   23de0:	cmp	r2, #2
   23de4:	beq	24b40 <__assert_fail@plt+0x13898>
   23de8:	cmp	r2, #22
   23dec:	beq	24ca0 <__assert_fail@plt+0x139f8>
   23df0:	cmp	r3, #4
   23df4:	ldrls	pc, [pc, r3, lsl #2]
   23df8:	b	24994 <__assert_fail@plt+0x136ec>
   23dfc:	andeq	r4, r2, r8, lsl #19
   23e00:	andeq	r4, r2, r8, asr r9
   23e04:	andeq	r3, r2, ip, lsl #30
   23e08:	andeq	r3, r2, ip, lsl #30
   23e0c:	muleq	r2, r4, r9
   23e10:	sub	r1, r2, #35	; 0x23
   23e14:	movw	r3, #45548	; 0xb1ec
   23e18:	movt	r3, #2
   23e1c:	clz	r1, r1
   23e20:	movw	r2, #49100	; 0xbfcc
   23e24:	movt	r2, #2
   23e28:	lsr	r1, r1, #5
   23e2c:	b	23990 <__assert_fail@plt+0x126e8>
   23e30:	mov	r2, #0
   23e34:	mov	r3, #5
   23e38:	str	r2, [sp, #28]
   23e3c:	ldr	r2, [sp, #204]	; 0xcc
   23e40:	str	r3, [r2]
   23e44:	b	23730 <__assert_fail@plt+0x12488>
   23e48:	ldr	r3, [sp, #32]
   23e4c:	ands	r3, r3, #131072	; 0x20000
   23e50:	bne	2328c <__assert_fail@plt+0x11fe4>
   23e54:	str	r3, [sp, #28]
   23e58:	mov	r2, #16
   23e5c:	ldr	r3, [sp, #204]	; 0xcc
   23e60:	str	r2, [r3]
   23e64:	b	23730 <__assert_fail@plt+0x12488>
   23e68:	cmp	r4, #8
   23e6c:	bls	24944 <__assert_fail@plt+0x1369c>
   23e70:	mov	r3, #0
   23e74:	mov	r2, #0
   23e78:	strd	r2, [sp, #128]	; 0x80
   23e7c:	ldr	r3, [sl, #64]	; 0x40
   23e80:	cmp	r3, #31
   23e84:	beq	24f3c <__assert_fail@plt+0x13c94>
   23e88:	ldr	r0, [sl, #56]	; 0x38
   23e8c:	lsl	r1, r3, #5
   23e90:	add	r2, r3, #1
   23e94:	add	r6, r1, #4
   23e98:	add	r3, r0, r1
   23e9c:	mov	ip, #0
   23ea0:	str	r2, [sl, #64]	; 0x40
   23ea4:	mov	lr, #17
   23ea8:	add	r8, r0, r6
   23eac:	str	ip, [r3, #4]
   23eb0:	add	r2, r1, #16
   23eb4:	mvn	fp, #0
   23eb8:	str	r5, [r3, #8]
   23ebc:	add	r2, r0, r2
   23ec0:	cmp	r5, ip
   23ec4:	str	ip, [r3, #12]
   23ec8:	str	r8, [sp, #28]
   23ecc:	strb	lr, [sp, #132]	; 0x84
   23ed0:	ldrd	r6, [sp, #128]	; 0x80
   23ed4:	strd	r6, [r3, #24]
   23ed8:	ldrb	lr, [r2, #14]
   23edc:	bic	lr, lr, #12
   23ee0:	strb	lr, [r2, #14]
   23ee4:	str	ip, [r3, #16]
   23ee8:	str	ip, [r3, #20]
   23eec:	str	fp, [r3, #32]
   23ef0:	ldr	r3, [sp, #28]
   23ef4:	strne	r8, [r5]
   23ef8:	cmp	r3, #0
   23efc:	beq	23b84 <__assert_fail@plt+0x128dc>
   23f00:	add	r1, r0, r1
   23f04:	str	r4, [r1, #24]
   23f08:	b	23308 <__assert_fail@plt+0x12060>
   23f0c:	ldr	r7, [sp, #76]	; 0x4c
   23f10:	mov	r0, r7
   23f14:	bl	11188 <strlen@plt>
   23f18:	cmp	r0, #1
   23f1c:	bne	24f28 <__assert_fail@plt+0x13c80>
   23f20:	ldr	r1, [sp, #204]	; 0xcc
   23f24:	mov	r2, #0
   23f28:	ldrb	r3, [r7]
   23f2c:	str	r2, [r1]
   23f30:	asr	r1, r3, #5
   23f34:	and	r3, r3, #31
   23f38:	ldr	r2, [r4, r1, lsl #2]
   23f3c:	orr	r3, r2, r0, lsl r3
   23f40:	str	r3, [r4, r1, lsl #2]
   23f44:	ldrb	r3, [r5, #4]
   23f48:	cmp	r3, #2
   23f4c:	beq	24b40 <__assert_fail@plt+0x13898>
   23f50:	cmp	r3, #21
   23f54:	beq	25070 <__assert_fail@plt+0x13dc8>
   23f58:	mov	r0, #0
   23f5c:	b	23d88 <__assert_fail@plt+0x12ae0>
   23f60:	ldr	r9, [sp, #44]	; 0x2c
   23f64:	mov	sl, r1
   23f68:	mov	fp, r2
   23f6c:	ldr	r3, [sp, #40]	; 0x28
   23f70:	cmp	r3, #0
   23f74:	beq	24340 <__assert_fail@plt+0x13098>
   23f78:	mov	r3, #0
   23f7c:	mov	r2, #0
   23f80:	strd	r2, [fp]
   23f84:	ldr	r3, [sl, #64]	; 0x40
   23f88:	cmp	r3, #31
   23f8c:	beq	248d8 <__assert_fail@plt+0x13630>
   23f90:	ldr	r0, [sl, #56]	; 0x38
   23f94:	lsl	r2, r3, #5
   23f98:	add	r3, r3, #1
   23f9c:	add	ip, r2, #4
   23fa0:	ldr	r6, [sp, #40]	; 0x28
   23fa4:	add	r1, r0, r2
   23fa8:	add	ip, r0, ip
   23fac:	str	r3, [sl, #64]	; 0x40
   23fb0:	mov	r3, #16
   23fb4:	mvn	lr, #0
   23fb8:	add	r2, r2, r3
   23fbc:	add	r0, r0, r2
   23fc0:	stmib	r1, {r5, r6}
   23fc4:	str	r4, [r1, #12]
   23fc8:	strb	r3, [sp, #132]	; 0x84
   23fcc:	ldrd	r2, [fp]
   23fd0:	strd	r2, [r1, #24]
   23fd4:	ldrb	r3, [r0, #14]
   23fd8:	bic	r3, r3, #12
   23fdc:	strb	r3, [r0, #14]
   23fe0:	ldr	r3, [sp, #204]	; 0xcc
   23fe4:	str	r5, [r1, #16]
   23fe8:	str	r5, [r1, #20]
   23fec:	str	lr, [r1, #32]
   23ff0:	str	ip, [r6]
   23ff4:	ldr	r3, [r3]
   23ff8:	str	ip, [r4]
   23ffc:	cmp	r3, #0
   24000:	bne	248b8 <__assert_fail@plt+0x13610>
   24004:	str	ip, [sp, #28]
   24008:	ldr	r3, [sp, #36]	; 0x24
   2400c:	cmp	r3, #0
   24010:	ldr	r3, [sp, #20]
   24014:	ldrb	r7, [r3, #4]
   24018:	beq	23344 <__assert_fail@plt+0x1209c>
   2401c:	cmp	r7, #23
   24020:	cmpne	r7, #11
   24024:	bne	23344 <__assert_fail@plt+0x1209c>
   24028:	ldr	r3, [sp, #28]
   2402c:	cmp	r3, #0
   24030:	beq	2403c <__assert_fail@plt+0x12d94>
   24034:	mov	r0, r3
   24038:	bl	1adec <__assert_fail@plt+0x9b44>
   2403c:	mov	r2, #0
   24040:	mov	r3, #13
   24044:	str	r2, [sp, #28]
   24048:	ldr	r2, [sp, #204]	; 0xcc
   2404c:	str	r3, [r2]
   24050:	b	23730 <__assert_fail@plt+0x12488>
   24054:	mov	r3, r2
   24058:	add	fp, r8, #8
   2405c:	b	2349c <__assert_fail@plt+0x121f4>
   24060:	mov	r0, #996	; 0x3e4
   24064:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24068:	cmp	r0, #0
   2406c:	beq	2422c <__assert_fail@plt+0x12f84>
   24070:	ldr	r1, [sl, #56]	; 0x38
   24074:	mov	r2, #1
   24078:	mov	lr, #4
   2407c:	mov	r3, #0
   24080:	str	r1, [r0]
   24084:	str	r0, [sl, #56]	; 0x38
   24088:	b	234bc <__assert_fail@plt+0x12214>
   2408c:	mov	r2, r6
   24090:	mov	r6, r0
   24094:	str	sl, [sp, #16]
   24098:	b	23560 <__assert_fail@plt+0x122b8>
   2409c:	str	r0, [r1]
   240a0:	ldr	r2, [sp, #204]	; 0xcc
   240a4:	mov	r3, #12
   240a8:	str	r3, [r2]
   240ac:	mov	r3, #0
   240b0:	ldr	r0, [sp, #28]
   240b4:	str	r3, [sp, #28]
   240b8:	bl	1adec <__assert_fail@plt+0x9b44>
   240bc:	b	23730 <__assert_fail@plt+0x12488>
   240c0:	mov	r1, r9
   240c4:	ldr	r0, [sp, #20]
   240c8:	ldr	r2, [sp, #32]
   240cc:	bl	19b80 <__assert_fail@plt+0x88d8>
   240d0:	ldr	r3, [r9, #40]	; 0x28
   240d4:	ldr	r2, [sp, #28]
   240d8:	add	r0, r3, r0
   240dc:	cmp	r2, #0
   240e0:	str	r0, [r9, #40]	; 0x28
   240e4:	beq	242f8 <__assert_fail@plt+0x13050>
   240e8:	ldrb	r3, [r2, #24]
   240ec:	mov	r7, r2
   240f0:	add	fp, sp, #128	; 0x80
   240f4:	cmp	r3, #17
   240f8:	mov	r3, #0
   240fc:	str	r3, [sp, #40]	; 0x28
   24100:	mov	r3, #1
   24104:	str	r3, [sp, #24]
   24108:	beq	24258 <__assert_fail@plt+0x12fb0>
   2410c:	mov	r6, #10
   24110:	b	233f4 <__assert_fail@plt+0x1214c>
   24114:	mov	r0, #996	; 0x3e4
   24118:	str	r2, [sp, #48]	; 0x30
   2411c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24120:	cmp	r0, #0
   24124:	beq	240a0 <__assert_fail@plt+0x12df8>
   24128:	ldr	r2, [sp, #16]
   2412c:	mov	ip, #1
   24130:	mov	r8, #4
   24134:	mov	r3, #0
   24138:	ldr	r1, [sp, #16]
   2413c:	ldr	lr, [r2, #56]	; 0x38
   24140:	str	lr, [r0]
   24144:	str	r0, [r2, #56]	; 0x38
   24148:	ldr	r2, [sp, #48]	; 0x30
   2414c:	b	2358c <__assert_fail@plt+0x122e4>
   24150:	mov	r0, #996	; 0x3e4
   24154:	str	r2, [sp, #48]	; 0x30
   24158:	bl	2ab48 <__assert_fail@plt+0x198a0>
   2415c:	cmp	r0, #0
   24160:	beq	240a0 <__assert_fail@plt+0x12df8>
   24164:	ldr	r2, [sp, #16]
   24168:	mov	lr, #1
   2416c:	mov	r4, #4
   24170:	mov	ip, #0
   24174:	ldr	r1, [sp, #16]
   24178:	ldr	r3, [r2, #56]	; 0x38
   2417c:	str	r3, [r0]
   24180:	str	r0, [r2, #56]	; 0x38
   24184:	ldr	r2, [sp, #48]	; 0x30
   24188:	b	23614 <__assert_fail@plt+0x1236c>
   2418c:	ldr	r8, [sp, #20]
   24190:	mvn	fp, #0
   24194:	movw	r7, #32816	; 0x8030
   24198:	mov	r1, r9
   2419c:	mov	r0, r8
   241a0:	ldr	r2, [sp, #32]
   241a4:	bl	19b80 <__assert_fail@plt+0x88d8>
   241a8:	ldr	r2, [r9, #40]	; 0x28
   241ac:	ldrb	r3, [r8, #4]
   241b0:	ldrb	r1, [r8]
   241b4:	add	r0, r2, r0
   241b8:	cmp	r3, #2
   241bc:	str	r0, [r9, #40]	; 0x28
   241c0:	beq	24880 <__assert_fail@plt+0x135d8>
   241c4:	cmp	r3, #24
   241c8:	beq	24348 <__assert_fail@plt+0x130a0>
   241cc:	cmp	r1, #44	; 0x2c
   241d0:	beq	243ec <__assert_fail@plt+0x13144>
   241d4:	cmp	r3, #1
   241d8:	beq	241e4 <__assert_fail@plt+0x12f3c>
   241dc:	mvn	fp, #1
   241e0:	b	24198 <__assert_fail@plt+0x12ef0>
   241e4:	sub	r2, r1, #48	; 0x30
   241e8:	uxtb	r0, r2
   241ec:	cmp	r0, #9
   241f0:	movhi	r3, #0
   241f4:	movls	r3, #1
   241f8:	cmn	fp, #2
   241fc:	moveq	r3, #0
   24200:	cmp	r3, #0
   24204:	beq	241dc <__assert_fail@plt+0x12f34>
   24208:	cmn	fp, #1
   2420c:	add	r3, fp, fp, lsl #2
   24210:	moveq	fp, r2
   24214:	beq	24198 <__assert_fail@plt+0x12ef0>
   24218:	add	fp, r1, r3, lsl #1
   2421c:	cmp	fp, r7
   24220:	movge	fp, r7
   24224:	sub	fp, fp, #48	; 0x30
   24228:	b	24198 <__assert_fail@plt+0x12ef0>
   2422c:	mov	r2, r6
   24230:	mov	r6, r0
   24234:	str	r0, [fp]
   24238:	str	sl, [sp, #16]
   2423c:	b	23560 <__assert_fail@plt+0x122b8>
   24240:	mov	r3, #0
   24244:	add	fp, sp, #128	; 0x80
   24248:	mov	r8, r3
   2424c:	str	r3, [sp, #40]	; 0x28
   24250:	mvn	r3, #0
   24254:	str	r3, [sp, #24]
   24258:	mov	r3, r7
   2425c:	ldr	ip, [r7, #20]
   24260:	b	24268 <__assert_fail@plt+0x12fc0>
   24264:	mov	r3, r2
   24268:	ldr	r2, [r3, #4]
   2426c:	cmp	r2, #0
   24270:	bne	24264 <__assert_fail@plt+0x12fbc>
   24274:	ldr	r2, [r3, #8]
   24278:	cmp	r2, #0
   2427c:	bne	24264 <__assert_fail@plt+0x12fbc>
   24280:	b	242b8 <__assert_fail@plt+0x13010>
   24284:	ldr	r1, [r3]
   24288:	cmp	r1, #0
   2428c:	beq	242e8 <__assert_fail@plt+0x13040>
   24290:	ldr	r2, [r1, #8]
   24294:	sub	r0, r3, r2
   24298:	cmp	r2, #0
   2429c:	clz	r0, r0
   242a0:	mov	r3, r1
   242a4:	lsr	r0, r0, #5
   242a8:	moveq	r1, #1
   242ac:	movne	r1, r0
   242b0:	cmp	r1, #0
   242b4:	beq	24264 <__assert_fail@plt+0x12fbc>
   242b8:	ldrb	r2, [r3, #24]
   242bc:	cmp	r2, #17
   242c0:	bne	24284 <__assert_fail@plt+0x12fdc>
   242c4:	ldr	r2, [r3, #20]
   242c8:	cmp	ip, r2
   242cc:	bne	24284 <__assert_fail@plt+0x12fdc>
   242d0:	ldrb	r2, [r3, #26]
   242d4:	ldr	r1, [r3]
   242d8:	orr	r2, r2, #8
   242dc:	cmp	r1, #0
   242e0:	strb	r2, [r3, #26]
   242e4:	bne	24290 <__assert_fail@plt+0x12fe8>
   242e8:	ldr	r3, [sp, #24]
   242ec:	cmn	r3, #1
   242f0:	bne	2410c <__assert_fail@plt+0x12e64>
   242f4:	b	233e8 <__assert_fail@plt+0x12140>
   242f8:	ldr	r3, [sp, #204]	; 0xcc
   242fc:	ldr	r3, [r3]
   24300:	cmp	r3, #0
   24304:	bne	23728 <__assert_fail@plt+0x12480>
   24308:	mov	r3, #0
   2430c:	str	r3, [sp, #28]
   24310:	b	24008 <__assert_fail@plt+0x12d60>
   24314:	mov	r0, #996	; 0x3e4
   24318:	bl	2ab48 <__assert_fail@plt+0x198a0>
   2431c:	subs	r4, r0, #0
   24320:	beq	240a0 <__assert_fail@plt+0x12df8>
   24324:	ldr	r2, [sl, #56]	; 0x38
   24328:	mov	r1, #1
   2432c:	mov	r0, #4
   24330:	mov	r3, #0
   24334:	str	r2, [r4]
   24338:	str	r4, [sl, #56]	; 0x38
   2433c:	b	2341c <__assert_fail@plt+0x12174>
   24340:	str	r4, [sp, #28]
   24344:	b	24008 <__assert_fail@plt+0x12d60>
   24348:	cmn	fp, #1
   2434c:	str	fp, [sp, #24]
   24350:	beq	243d0 <__assert_fail@plt+0x13128>
   24354:	cmn	fp, #2
   24358:	movne	r8, fp
   2435c:	beq	24b30 <__assert_fail@plt+0x13888>
   24360:	ldr	r3, [sp, #24]
   24364:	cmp	r3, #32768	; 0x8000
   24368:	movlt	r4, #0
   2436c:	movge	r4, #1
   24370:	cmp	r4, #0
   24374:	bne	244c4 <__assert_fail@plt+0x1321c>
   24378:	mov	r1, r9
   2437c:	ldr	r0, [sp, #20]
   24380:	ldr	r2, [sp, #32]
   24384:	bl	19b80 <__assert_fail@plt+0x88d8>
   24388:	ldr	r3, [r9, #40]	; 0x28
   2438c:	ldr	r2, [sp, #28]
   24390:	add	r0, r3, r0
   24394:	cmp	r2, #0
   24398:	str	r0, [r9, #40]	; 0x28
   2439c:	beq	242f8 <__assert_fail@plt+0x13050>
   243a0:	ldr	r3, [sp, #24]
   243a4:	orrs	r3, r8, r3
   243a8:	bne	244d4 <__assert_fail@plt+0x1322c>
   243ac:	mov	r0, r2
   243b0:	bl	1adec <__assert_fail@plt+0x9b44>
   243b4:	ldr	r3, [sp, #204]	; 0xcc
   243b8:	ldr	r3, [r3]
   243bc:	cmp	r3, #0
   243c0:	beq	24308 <__assert_fail@plt+0x13060>
   243c4:	b	240ac <__assert_fail@plt+0x12e04>
   243c8:	cmp	r3, #2
   243cc:	beq	2491c <__assert_fail@plt+0x13674>
   243d0:	ldr	r2, [sp, #204]	; 0xcc
   243d4:	mov	r3, #10
   243d8:	str	r3, [r2]
   243dc:	ldr	r3, [sp, #28]
   243e0:	cmp	r3, #0
   243e4:	beq	23728 <__assert_fail@plt+0x12480>
   243e8:	b	240ac <__assert_fail@plt+0x12e04>
   243ec:	cmn	fp, #1
   243f0:	str	fp, [sp, #24]
   243f4:	bne	2486c <__assert_fail@plt+0x135c4>
   243f8:	cmp	r3, #1
   243fc:	bne	243d0 <__assert_fail@plt+0x13128>
   24400:	mov	r8, #0
   24404:	mvn	r3, #0
   24408:	ldr	fp, [sp, #20]
   2440c:	movw	r7, #32816	; 0x8030
   24410:	str	r3, [sp, #24]
   24414:	mov	r3, r6
   24418:	mov	r6, r4
   2441c:	mov	r4, r8
   24420:	mov	r8, r9
   24424:	mov	r9, r3
   24428:	mov	r1, r8
   2442c:	mov	r0, fp
   24430:	ldr	r2, [sp, #32]
   24434:	bl	19b80 <__assert_fail@plt+0x88d8>
   24438:	ldr	r2, [r8, #40]	; 0x28
   2443c:	ldrb	r1, [fp, #4]
   24440:	ldrb	ip, [fp]
   24444:	add	r0, r2, r0
   24448:	cmp	r1, #2
   2444c:	str	r0, [r8, #40]	; 0x28
   24450:	beq	24904 <__assert_fail@plt+0x1365c>
   24454:	cmp	r1, #24
   24458:	cmpne	ip, #44	; 0x2c
   2445c:	beq	24474 <__assert_fail@plt+0x131cc>
   24460:	cmp	r1, #1
   24464:	beq	2481c <__assert_fail@plt+0x13574>
   24468:	mvn	r3, #1
   2446c:	str	r3, [sp, #24]
   24470:	b	24428 <__assert_fail@plt+0x13180>
   24474:	mov	r2, r9
   24478:	mov	r9, r8
   2447c:	mov	r8, r4
   24480:	mov	r4, r6
   24484:	mov	r6, r2
   24488:	ldr	r2, [sp, #24]
   2448c:	cmn	r2, #2
   24490:	beq	24b30 <__assert_fail@plt+0x13888>
   24494:	cmn	r2, #1
   24498:	cmpne	r8, r2
   2449c:	bgt	243d0 <__assert_fail@plt+0x13128>
   244a0:	cmp	r1, #24
   244a4:	bne	243d0 <__assert_fail@plt+0x13128>
   244a8:	cmn	r2, #1
   244ac:	bne	24360 <__assert_fail@plt+0x130b8>
   244b0:	cmp	r8, #32768	; 0x8000
   244b4:	movlt	r4, #0
   244b8:	movge	r4, #1
   244bc:	cmp	r4, #0
   244c0:	beq	24378 <__assert_fail@plt+0x130d0>
   244c4:	ldr	r2, [sp, #204]	; 0xcc
   244c8:	mov	r3, #15
   244cc:	str	r3, [r2]
   244d0:	b	243dc <__assert_fail@plt+0x13134>
   244d4:	cmp	r8, #0
   244d8:	ble	2582c <__assert_fail@plt+0x14584>
   244dc:	cmp	r8, #1
   244e0:	beq	25838 <__assert_fail@plt+0x14590>
   244e4:	ldr	r4, [r2]
   244e8:	mov	r3, #2
   244ec:	mov	r6, r2
   244f0:	add	fp, sp, #128	; 0x80
   244f4:	str	r8, [sp, #16]
   244f8:	mov	r8, r3
   244fc:	str	r9, [sp, #40]	; 0x28
   24500:	mov	r9, r2
   24504:	mov	r7, fp
   24508:	b	24510 <__assert_fail@plt+0x13268>
   2450c:	mov	r6, r3
   24510:	ldr	r2, [sl, #64]	; 0x40
   24514:	cmp	r2, #31
   24518:	beq	24770 <__assert_fail@plt+0x134c8>
   2451c:	ldr	r0, [sl, #56]	; 0x38
   24520:	lsl	r3, r2, #5
   24524:	add	r2, r2, #1
   24528:	add	lr, r3, #4
   2452c:	add	ip, r0, r3
   24530:	add	r3, r3, #16
   24534:	str	r2, [sl, #64]	; 0x40
   24538:	add	r1, r0, r3
   2453c:	add	r0, r0, lr
   24540:	str	r5, [ip, #4]
   24544:	mvn	lr, #0
   24548:	cmp	r0, #0
   2454c:	str	r5, [ip, #8]
   24550:	str	r5, [ip, #12]
   24554:	ldrd	r2, [r6, #20]
   24558:	strd	r2, [ip, #24]
   2455c:	ldrb	r3, [r1, #14]
   24560:	bic	r3, r3, #12
   24564:	strb	r3, [r1, #14]
   24568:	str	r5, [ip, #16]
   2456c:	str	r5, [ip, #20]
   24570:	str	lr, [ip, #32]
   24574:	str	r0, [r7]
   24578:	beq	247a8 <__assert_fail@plt+0x13500>
   2457c:	str	r4, [ip, #4]
   24580:	ldr	r4, [r7]
   24584:	ldrb	r3, [r4, #26]
   24588:	orr	r3, r3, #4
   2458c:	strb	r3, [r4, #26]
   24590:	ldr	r3, [r6, #4]
   24594:	cmp	r3, #0
   24598:	addne	r7, r4, #4
   2459c:	bne	2450c <__assert_fail@plt+0x13264>
   245a0:	ldr	r2, [r6, #8]
   245a4:	cmp	r2, #0
   245a8:	cmpne	r2, r3
   245ac:	mov	r3, r6
   245b0:	bne	2479c <__assert_fail@plt+0x134f4>
   245b4:	ldr	r2, [r6]
   245b8:	ldr	r4, [r4]
   245bc:	subs	r6, r2, #0
   245c0:	bne	245a0 <__assert_fail@plt+0x132f8>
   245c4:	ldr	r6, [sp, #128]	; 0x80
   245c8:	mov	r3, #0
   245cc:	mov	r2, #0
   245d0:	strd	r2, [fp]
   245d4:	ldr	r3, [sl, #64]	; 0x40
   245d8:	cmp	r3, #31
   245dc:	beq	247b0 <__assert_fail@plt+0x13508>
   245e0:	ldr	r0, [sl, #56]	; 0x38
   245e4:	lsl	r1, r3, #5
   245e8:	add	lr, r3, #1
   245ec:	add	r4, r1, #4
   245f0:	add	r3, r0, r1
   245f4:	mov	ip, #16
   245f8:	str	lr, [sl, #64]	; 0x40
   245fc:	add	r1, r1, ip
   24600:	add	r4, r0, r4
   24604:	stmib	r3, {r5, r9}
   24608:	add	r2, r0, r1
   2460c:	mvn	lr, #0
   24610:	str	r6, [r3, #12]
   24614:	cmp	r6, #0
   24618:	strb	ip, [sp, #132]	; 0x84
   2461c:	ldrd	r0, [fp]
   24620:	strd	r0, [r3, #24]
   24624:	ldrb	ip, [r2, #14]
   24628:	bic	ip, ip, #12
   2462c:	strb	ip, [r2, #14]
   24630:	str	r5, [r3, #16]
   24634:	str	r5, [r3, #20]
   24638:	str	lr, [r3, #32]
   2463c:	str	r4, [r9]
   24640:	beq	240a0 <__assert_fail@plt+0x12df8>
   24644:	cmp	r4, #0
   24648:	str	r4, [r6]
   2464c:	beq	240a0 <__assert_fail@plt+0x12df8>
   24650:	ldr	r3, [sp, #16]
   24654:	add	r8, r8, #1
   24658:	mov	r9, r4
   2465c:	cmp	r3, r8
   24660:	bge	24504 <__assert_fail@plt+0x1325c>
   24664:	ldr	r9, [sp, #40]	; 0x28
   24668:	mov	r8, r3
   2466c:	ldr	r3, [sp, #24]
   24670:	cmp	r8, r3
   24674:	beq	24340 <__assert_fail@plt+0x13098>
   24678:	add	fp, sp, #128	; 0x80
   2467c:	str	r8, [sp, #16]
   24680:	mov	r1, fp
   24684:	str	r9, [sp, #40]	; 0x28
   24688:	ldr	r7, [r6]
   2468c:	b	24698 <__assert_fail@plt+0x133f0>
   24690:	mov	r6, r3
   24694:	add	r1, r7, #4
   24698:	ldr	r3, [sl, #64]	; 0x40
   2469c:	cmp	r3, #31
   246a0:	beq	247e8 <__assert_fail@plt+0x13540>
   246a4:	ldr	r0, [sl, #56]	; 0x38
   246a8:	lsl	r2, r3, #5
   246ac:	add	lr, r3, #1
   246b0:	add	ip, r2, #4
   246b4:	add	r3, r0, r2
   246b8:	str	lr, [sl, #64]	; 0x40
   246bc:	add	r2, r2, #16
   246c0:	add	r2, r0, r2
   246c4:	add	r0, r0, ip
   246c8:	str	r5, [r3, #4]
   246cc:	mvn	ip, #0
   246d0:	cmp	r0, #0
   246d4:	str	r5, [r3, #8]
   246d8:	str	r5, [r3, #12]
   246dc:	ldrd	r8, [r6, #20]
   246e0:	strd	r8, [r3, #24]
   246e4:	ldrb	lr, [r2, #14]
   246e8:	bic	lr, lr, #12
   246ec:	strb	lr, [r2, #14]
   246f0:	str	r5, [r3, #16]
   246f4:	str	r5, [r3, #20]
   246f8:	str	ip, [r3, #32]
   246fc:	str	r0, [r1]
   24700:	beq	240a0 <__assert_fail@plt+0x12df8>
   24704:	str	r7, [r3, #4]
   24708:	ldr	r7, [r1]
   2470c:	ldrb	r3, [r7, #26]
   24710:	orr	r3, r3, #4
   24714:	strb	r3, [r7, #26]
   24718:	ldr	r3, [r6, #4]
   2471c:	cmp	r3, #0
   24720:	bne	24690 <__assert_fail@plt+0x133e8>
   24724:	ldr	r8, [sp, #16]
   24728:	ldr	r9, [sp, #40]	; 0x28
   2472c:	ldr	r2, [r6, #8]
   24730:	cmp	r2, #0
   24734:	cmpne	r2, r3
   24738:	mov	r3, r6
   2473c:	bne	248c4 <__assert_fail@plt+0x1361c>
   24740:	ldr	r2, [r6]
   24744:	ldr	r7, [r7]
   24748:	subs	r6, r2, #0
   2474c:	bne	2472c <__assert_fail@plt+0x13484>
   24750:	ldr	r7, [sp, #128]	; 0x80
   24754:	cmp	r7, #0
   24758:	beq	240a0 <__assert_fail@plt+0x12df8>
   2475c:	ldrb	r3, [r7, #24]
   24760:	str	r4, [sp, #40]	; 0x28
   24764:	cmp	r3, #17
   24768:	bne	242e8 <__assert_fail@plt+0x13040>
   2476c:	b	24258 <__assert_fail@plt+0x12fb0>
   24770:	mov	r0, #996	; 0x3e4
   24774:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24778:	cmp	r0, #0
   2477c:	beq	247dc <__assert_fail@plt+0x13534>
   24780:	ldr	r1, [sl, #56]	; 0x38
   24784:	mov	r2, #1
   24788:	mov	lr, #4
   2478c:	mov	r3, #0
   24790:	str	r1, [r0]
   24794:	str	r0, [sl, #56]	; 0x38
   24798:	b	2452c <__assert_fail@plt+0x13284>
   2479c:	mov	r3, r2
   247a0:	add	r7, r4, #8
   247a4:	b	2450c <__assert_fail@plt+0x13264>
   247a8:	mov	r6, r0
   247ac:	b	245c8 <__assert_fail@plt+0x13320>
   247b0:	mov	r0, #996	; 0x3e4
   247b4:	bl	2ab48 <__assert_fail@plt+0x198a0>
   247b8:	cmp	r0, #0
   247bc:	beq	240a0 <__assert_fail@plt+0x12df8>
   247c0:	ldr	r3, [sl, #56]	; 0x38
   247c4:	mov	lr, #1
   247c8:	mov	r4, #4
   247cc:	mov	r1, #0
   247d0:	str	r3, [r0]
   247d4:	str	r0, [sl, #56]	; 0x38
   247d8:	b	245f0 <__assert_fail@plt+0x13348>
   247dc:	mov	r6, r0
   247e0:	str	r0, [r7]
   247e4:	b	245c8 <__assert_fail@plt+0x13320>
   247e8:	mov	r0, #996	; 0x3e4
   247ec:	str	r1, [sp, #44]	; 0x2c
   247f0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   247f4:	cmp	r0, #0
   247f8:	ldr	r1, [sp, #44]	; 0x2c
   247fc:	beq	2409c <__assert_fail@plt+0x12df4>
   24800:	ldr	r3, [sl, #56]	; 0x38
   24804:	mov	lr, #1
   24808:	mov	ip, #4
   2480c:	mov	r2, #0
   24810:	str	r3, [r0]
   24814:	str	r0, [sl, #56]	; 0x38
   24818:	b	246b4 <__assert_fail@plt+0x1340c>
   2481c:	ldr	r3, [sp, #24]
   24820:	sub	r1, ip, #48	; 0x30
   24824:	uxtb	r0, r1
   24828:	cmp	r0, #9
   2482c:	movhi	r2, #0
   24830:	movls	r2, #1
   24834:	cmn	r3, #2
   24838:	moveq	r2, #0
   2483c:	cmp	r2, #0
   24840:	beq	24468 <__assert_fail@plt+0x131c0>
   24844:	cmn	r3, #1
   24848:	add	r2, r3, r3, lsl #2
   2484c:	streq	r1, [sp, #24]
   24850:	beq	24428 <__assert_fail@plt+0x13180>
   24854:	add	ip, ip, r2, lsl #1
   24858:	cmp	ip, r7
   2485c:	movge	ip, r7
   24860:	sub	r3, ip, #48	; 0x30
   24864:	str	r3, [sp, #24]
   24868:	b	24428 <__assert_fail@plt+0x13180>
   2486c:	ldr	r2, [sp, #24]
   24870:	cmn	r2, #2
   24874:	beq	24880 <__assert_fail@plt+0x135d8>
   24878:	cmp	r3, #1
   2487c:	beq	25874 <__assert_fail@plt+0x145cc>
   24880:	ldr	r2, [sp, #52]	; 0x34
   24884:	cmp	r2, #0
   24888:	beq	243c8 <__assert_fail@plt+0x13120>
   2488c:	ldrd	r2, [r6]
   24890:	mov	r1, #1
   24894:	str	r4, [r9, #40]	; 0x28
   24898:	ldr	r0, [sp, #20]
   2489c:	ldr	ip, [sp, #28]
   248a0:	strd	r2, [r0]
   248a4:	ldr	r3, [sp, #204]	; 0xcc
   248a8:	strb	r1, [r0, #4]
   248ac:	ldr	r3, [r3]
   248b0:	cmp	r3, #0
   248b4:	beq	24004 <__assert_fail@plt+0x12d5c>
   248b8:	cmp	ip, #0
   248bc:	bne	24004 <__assert_fail@plt+0x12d5c>
   248c0:	b	243dc <__assert_fail@plt+0x13134>
   248c4:	mov	r6, r2
   248c8:	add	r1, r7, #8
   248cc:	str	r8, [sp, #16]
   248d0:	str	r9, [sp, #40]	; 0x28
   248d4:	b	24698 <__assert_fail@plt+0x133f0>
   248d8:	mov	r0, #996	; 0x3e4
   248dc:	bl	2ab48 <__assert_fail@plt+0x198a0>
   248e0:	cmp	r0, #0
   248e4:	beq	24fb0 <__assert_fail@plt+0x13d08>
   248e8:	ldr	r1, [sl, #56]	; 0x38
   248ec:	mov	ip, #4
   248f0:	mov	r3, #1
   248f4:	mov	r2, #0
   248f8:	str	r1, [r0]
   248fc:	str	r0, [sl, #56]	; 0x38
   24900:	b	23fa0 <__assert_fail@plt+0x12cf8>
   24904:	ldr	r3, [sp, #52]	; 0x34
   24908:	mov	r4, r6
   2490c:	mov	r6, r9
   24910:	mov	r9, r8
   24914:	cmp	r3, #0
   24918:	bne	2488c <__assert_fail@plt+0x135e4>
   2491c:	ldr	r2, [sp, #204]	; 0xcc
   24920:	mov	r3, #9
   24924:	str	r3, [r2]
   24928:	b	243dc <__assert_fail@plt+0x13134>
   2492c:	mvn	r3, #0
   24930:	mov	r4, r2
   24934:	mov	r6, r2
   24938:	mov	r8, #1
   2493c:	str	r3, [sp, #24]
   24940:	b	24678 <__assert_fail@plt+0x133d0>
   24944:	ldr	r3, [sl, #84]	; 0x54
   24948:	mov	r2, #1
   2494c:	orr	r3, r3, r2, lsl r4
   24950:	str	r3, [sl, #84]	; 0x54
   24954:	b	23e70 <__assert_fail@plt+0x12bc8>
   24958:	ldr	r2, [sp, #16]
   2495c:	ldr	r0, [r2]
   24960:	ldr	r3, [r2, #20]
   24964:	ldr	r2, [sp, #36]	; 0x24
   24968:	cmp	r3, r2
   2496c:	beq	25044 <__assert_fail@plt+0x13d9c>
   24970:	ldr	ip, [sp, #16]
   24974:	add	r1, r3, #1
   24978:	ldr	r2, [sp, #76]	; 0x4c
   2497c:	str	r1, [ip, #20]
   24980:	str	r2, [r0, r3, lsl #2]
   24984:	b	23f44 <__assert_fail@plt+0x12c9c>
   24988:	ldrb	r3, [sp, #76]	; 0x4c
   2498c:	mov	r0, #1
   24990:	b	23f30 <__assert_fail@plt+0x12c88>
   24994:	ldr	r2, [sp, #16]
   24998:	add	r0, sp, #68	; 0x44
   2499c:	mov	r1, r4
   249a0:	ldr	ip, [sp, #76]	; 0x4c
   249a4:	str	r0, [sp]
   249a8:	str	sl, [sp, #8]
   249ac:	add	r3, r2, #36	; 0x24
   249b0:	add	r2, r2, #12
   249b4:	ldr	r0, [r9, #64]	; 0x40
   249b8:	str	ip, [sp, #4]
   249bc:	bl	18e74 <__assert_fail@plt+0x7bcc>
   249c0:	ldr	r3, [sp, #204]	; 0xcc
   249c4:	cmp	r0, #0
   249c8:	str	r0, [r3]
   249cc:	beq	23f44 <__assert_fail@plt+0x12c9c>
   249d0:	ldr	sl, [sp, #24]
   249d4:	mov	r0, r4
   249d8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   249dc:	ldr	r4, [sp, #16]
   249e0:	ldr	r0, [r4]
   249e4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   249e8:	ldr	r0, [r4, #4]
   249ec:	bl	2ad30 <__assert_fail@plt+0x19a88>
   249f0:	ldr	r0, [r4, #8]
   249f4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   249f8:	ldr	r0, [r4, #12]
   249fc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   24a00:	mov	r0, r4
   24a04:	bl	2ad30 <__assert_fail@plt+0x19a88>
   24a08:	ldr	r3, [sp, #204]	; 0xcc
   24a0c:	ldr	r3, [r3]
   24a10:	cmp	r3, #0
   24a14:	bne	23728 <__assert_fail@plt+0x12480>
   24a18:	str	r3, [sp, #28]
   24a1c:	b	23308 <__assert_fail@plt+0x12060>
   24a20:	ldr	r2, [sl, #64]	; 0x40
   24a24:	cmp	r2, #31
   24a28:	beq	253e8 <__assert_fail@plt+0x14140>
   24a2c:	ldr	r0, [sl, #56]	; 0x38
   24a30:	lsl	r3, r2, #5
   24a34:	add	r2, r2, #1
   24a38:	add	lr, r3, #4
   24a3c:	add	r1, r0, r3
   24a40:	add	r3, r3, #16
   24a44:	str	r2, [sl, #64]	; 0x40
   24a48:	adds	r2, r0, lr
   24a4c:	add	r0, r0, r3
   24a50:	ldr	r3, [sp, #20]
   24a54:	mov	ip, #0
   24a58:	mvn	lr, #0
   24a5c:	str	r2, [sp, #28]
   24a60:	str	ip, [r1, #4]
   24a64:	str	ip, [r1, #8]
   24a68:	str	ip, [r1, #12]
   24a6c:	ldrd	r2, [r3]
   24a70:	strd	r2, [r1, #24]
   24a74:	ldrb	r3, [r0, #14]
   24a78:	bic	r3, r3, #12
   24a7c:	strb	r3, [r0, #14]
   24a80:	str	ip, [r1, #16]
   24a84:	str	ip, [r1, #20]
   24a88:	str	lr, [r1, #32]
   24a8c:	bne	23954 <__assert_fail@plt+0x126ac>
   24a90:	b	23b84 <__assert_fail@plt+0x128dc>
   24a94:	mov	r0, #996	; 0x3e4
   24a98:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24a9c:	cmp	r0, #0
   24aa0:	beq	23b84 <__assert_fail@plt+0x128dc>
   24aa4:	ldr	r1, [sl, #56]	; 0x38
   24aa8:	mov	r2, #4
   24aac:	mov	r3, #0
   24ab0:	str	r1, [r0]
   24ab4:	str	r0, [sl, #56]	; 0x38
   24ab8:	b	232b4 <__assert_fail@plt+0x1200c>
   24abc:	ldr	r2, [sp, #20]
   24ac0:	mov	r3, #1
   24ac4:	strb	r3, [r2, #4]
   24ac8:	b	23d54 <__assert_fail@plt+0x12aac>
   24acc:	ldr	r2, [sp, #16]
   24ad0:	ldr	r1, [sp, #32]
   24ad4:	ldrb	r3, [r2, #16]
   24ad8:	tst	r1, #256	; 0x100
   24adc:	orr	r3, r3, #1
   24ae0:	strb	r3, [r2, #16]
   24ae4:	beq	24af4 <__assert_fail@plt+0x1384c>
   24ae8:	ldr	r3, [r4]
   24aec:	orr	r3, r3, #1024	; 0x400
   24af0:	str	r3, [r4]
   24af4:	ldr	r3, [r9, #40]	; 0x28
   24af8:	mov	r1, r9
   24afc:	ldr	r5, [sp, #20]
   24b00:	ldr	r2, [sp, #32]
   24b04:	add	fp, r3, fp
   24b08:	mov	r0, r5
   24b0c:	str	fp, [r9, #40]	; 0x28
   24b10:	bl	166c8 <__assert_fail@plt+0x5420>
   24b14:	ldrb	r3, [r5, #4]
   24b18:	mov	fp, r0
   24b1c:	cmp	r3, #2
   24b20:	beq	24e9c <__assert_fail@plt+0x13bf4>
   24b24:	mov	r2, #1
   24b28:	str	r2, [sp, #44]	; 0x2c
   24b2c:	b	23d4c <__assert_fail@plt+0x12aa4>
   24b30:	ldr	r3, [sp, #52]	; 0x34
   24b34:	cmp	r3, #0
   24b38:	bne	2488c <__assert_fail@plt+0x135e4>
   24b3c:	b	243d0 <__assert_fail@plt+0x13128>
   24b40:	mov	r3, #7
   24b44:	ldr	sl, [sp, #24]
   24b48:	ldr	r2, [sp, #204]	; 0xcc
   24b4c:	str	r3, [r2]
   24b50:	b	249d4 <__assert_fail@plt+0x1372c>
   24b54:	ldr	r4, [sp, #20]
   24b58:	mov	r2, r3
   24b5c:	mov	r1, r9
   24b60:	mov	r6, r3
   24b64:	mov	r0, r4
   24b68:	bl	19b80 <__assert_fail@plt+0x88d8>
   24b6c:	ldr	lr, [sp, #200]	; 0xc8
   24b70:	mov	r3, r6
   24b74:	mov	r2, r4
   24b78:	mov	r1, r5
   24b7c:	ldr	ip, [r9, #40]	; 0x28
   24b80:	str	lr, [sp]
   24b84:	ldr	lr, [sp, #204]	; 0xcc
   24b88:	add	ip, ip, r0
   24b8c:	mov	r0, r9
   24b90:	str	lr, [sp, #4]
   24b94:	str	ip, [r9, #40]	; 0x28
   24b98:	bl	23194 <__assert_fail@plt+0x11eec>
   24b9c:	str	r0, [sp, #28]
   24ba0:	b	23730 <__assert_fail@plt+0x12488>
   24ba4:	mov	r0, #996	; 0x3e4
   24ba8:	str	r2, [sp, #16]
   24bac:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24bb0:	cmp	r0, #0
   24bb4:	beq	23b84 <__assert_fail@plt+0x128dc>
   24bb8:	ldr	r1, [sl, #56]	; 0x38
   24bbc:	mov	lr, #1
   24bc0:	mov	ip, #4
   24bc4:	mov	r3, #0
   24bc8:	ldr	r2, [sp, #16]
   24bcc:	str	r1, [r0]
   24bd0:	str	r0, [sl, #56]	; 0x38
   24bd4:	b	23b38 <__assert_fail@plt+0x12890>
   24bd8:	mov	r0, #996	; 0x3e4
   24bdc:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24be0:	subs	fp, r0, #0
   24be4:	beq	23b0c <__assert_fail@plt+0x12864>
   24be8:	ldr	r1, [sl, #56]	; 0x38
   24bec:	mov	r0, #4
   24bf0:	mov	r2, #1
   24bf4:	mov	r3, #0
   24bf8:	str	r1, [fp]
   24bfc:	str	fp, [sl, #56]	; 0x38
   24c00:	b	23acc <__assert_fail@plt+0x12824>
   24c04:	ldr	sl, [sp, #24]
   24c08:	ldr	r3, [sp, #204]	; 0xcc
   24c0c:	str	r0, [r3]
   24c10:	b	249d4 <__assert_fail@plt+0x1372c>
   24c14:	str	r5, [sp, #28]
   24c18:	b	23308 <__assert_fail@plt+0x12060>
   24c1c:	ldr	r2, [sp, #20]
   24c20:	mov	r3, #6
   24c24:	str	r3, [r2]
   24c28:	ldr	r2, [sl, #64]	; 0x40
   24c2c:	cmp	r2, #31
   24c30:	beq	25448 <__assert_fail@plt+0x141a0>
   24c34:	lsl	r3, r2, #5
   24c38:	add	r1, r2, #1
   24c3c:	ldr	r2, [sl, #56]	; 0x38
   24c40:	add	r4, r3, #4
   24c44:	add	ip, r2, r3
   24c48:	add	r3, r3, #16
   24c4c:	str	r1, [sl, #64]	; 0x40
   24c50:	add	r4, r2, r4
   24c54:	add	r2, r2, r3
   24c58:	ldr	r3, [sp, #20]
   24c5c:	mov	lr, #0
   24c60:	mvn	r5, #0
   24c64:	str	lr, [ip, #4]
   24c68:	str	lr, [ip, #8]
   24c6c:	str	lr, [ip, #12]
   24c70:	ldrd	r0, [r3]
   24c74:	strd	r0, [ip, #24]
   24c78:	ldrb	r3, [r2, #14]
   24c7c:	bic	r3, r3, #12
   24c80:	strb	r3, [r2, #14]
   24c84:	str	lr, [ip, #16]
   24c88:	str	lr, [ip, #20]
   24c8c:	str	r5, [ip, #32]
   24c90:	ldr	r2, [sp, #20]
   24c94:	mov	r3, #9
   24c98:	str	r3, [r2]
   24c9c:	b	23854 <__assert_fail@plt+0x125ac>
   24ca0:	ldr	r3, [r9, #40]	; 0x28
   24ca4:	mov	r2, sl
   24ca8:	add	r0, sp, #88	; 0x58
   24cac:	mov	r1, r9
   24cb0:	add	r3, r3, fp
   24cb4:	str	r3, [r9, #40]	; 0x28
   24cb8:	bl	166c8 <__assert_fail@plt+0x5420>
   24cbc:	ldrb	r2, [sp, #92]	; 0x5c
   24cc0:	mov	r3, r0
   24cc4:	cmp	r2, #2
   24cc8:	beq	24b40 <__assert_fail@plt+0x13898>
   24ccc:	cmp	r2, #21
   24cd0:	beq	24f94 <__assert_fail@plt+0x13cec>
   24cd4:	mov	r1, #1
   24cd8:	add	ip, sp, #128	; 0x80
   24cdc:	str	sl, [sp]
   24ce0:	add	r2, sp, #88	; 0x58
   24ce4:	add	r0, sp, #80	; 0x50
   24ce8:	str	r1, [sp, #4]
   24cec:	mov	r1, r9
   24cf0:	str	r6, [sp, #80]	; 0x50
   24cf4:	str	ip, [sp, #84]	; 0x54
   24cf8:	bl	1a83c <__assert_fail@plt+0x9594>
   24cfc:	cmp	r0, #0
   24d00:	bne	24c04 <__assert_fail@plt+0x1395c>
   24d04:	mov	r2, sl
   24d08:	mov	r1, r9
   24d0c:	mov	r0, r5
   24d10:	bl	166c8 <__assert_fail@plt+0x5420>
   24d14:	ldr	r2, [sp, #72]	; 0x48
   24d18:	mov	fp, r0
   24d1c:	sub	r3, r2, #2
   24d20:	bics	r3, r3, #2
   24d24:	beq	25638 <__assert_fail@plt+0x14390>
   24d28:	ldr	r3, [sp, #80]	; 0x50
   24d2c:	sub	r1, r3, #2
   24d30:	bics	r1, r1, #2
   24d34:	beq	25638 <__assert_fail@plt+0x14390>
   24d38:	cmp	r2, #3
   24d3c:	moveq	r1, #1
   24d40:	movne	r1, #0
   24d44:	str	r1, [sp, #52]	; 0x34
   24d48:	beq	25654 <__assert_fail@plt+0x143ac>
   24d4c:	cmp	r3, #3
   24d50:	beq	256f0 <__assert_fail@plt+0x14448>
   24d54:	cmp	r2, #0
   24d58:	bne	25620 <__assert_fail@plt+0x14378>
   24d5c:	ldrb	r7, [sp, #76]	; 0x4c
   24d60:	cmp	r3, #0
   24d64:	beq	25630 <__assert_fail@plt+0x14388>
   24d68:	cmp	r3, #3
   24d6c:	bne	2564c <__assert_fail@plt+0x143a4>
   24d70:	ldr	r1, [sp, #84]	; 0x54
   24d74:	ldrb	r8, [r1]
   24d78:	cmp	r2, #0
   24d7c:	ldr	r1, [sp, #52]	; 0x34
   24d80:	moveq	r1, #1
   24d84:	cmp	r1, #0
   24d88:	beq	25618 <__assert_fail@plt+0x14370>
   24d8c:	ldr	r2, [sp, #24]
   24d90:	ldr	r2, [r2, #92]	; 0x5c
   24d94:	cmp	r2, #1
   24d98:	ble	25504 <__assert_fail@plt+0x1425c>
   24d9c:	mov	r0, r7
   24da0:	bl	111d0 <btowc@plt>
   24da4:	ldr	r3, [sp, #80]	; 0x50
   24da8:	mov	r7, r0
   24dac:	cmp	r3, #3
   24db0:	cmpne	r3, #0
   24db4:	bne	25510 <__assert_fail@plt+0x14268>
   24db8:	ldr	r3, [sp, #24]
   24dbc:	ldr	r3, [r3, #92]	; 0x5c
   24dc0:	cmp	r3, #1
   24dc4:	ble	24dd4 <__assert_fail@plt+0x13b2c>
   24dc8:	mov	r0, r8
   24dcc:	bl	111d0 <btowc@plt>
   24dd0:	mov	r8, r0
   24dd4:	cmn	r7, #1
   24dd8:	cmnne	r8, #1
   24ddc:	beq	24f28 <__assert_fail@plt+0x13c80>
   24de0:	ldr	r3, [sp, #48]	; 0x30
   24de4:	cmp	r8, r7
   24de8:	movcs	r3, #0
   24dec:	andcc	r3, r3, #1
   24df0:	cmp	r3, #0
   24df4:	bne	25638 <__assert_fail@plt+0x14390>
   24df8:	ldr	r3, [sp, #24]
   24dfc:	ldr	r3, [r3, #92]	; 0x5c
   24e00:	cmp	r3, #1
   24e04:	ble	24e3c <__assert_fail@plt+0x13b94>
   24e08:	ldr	r2, [sp, #16]
   24e0c:	ldr	r1, [sp, #40]	; 0x28
   24e10:	ldr	r3, [r2, #32]
   24e14:	ldr	r2, [r2, #4]
   24e18:	cmp	r3, r1
   24e1c:	beq	257cc <__assert_fail@plt+0x14524>
   24e20:	ldr	r0, [sp, #16]
   24e24:	str	r7, [r2, r3, lsl #2]
   24e28:	ldr	r2, [r0, #8]
   24e2c:	ldr	r3, [r0, #32]
   24e30:	add	r1, r3, #1
   24e34:	str	r1, [r0, #32]
   24e38:	str	r8, [r2, r3, lsl #2]
   24e3c:	mov	r3, #0
   24e40:	mov	ip, #1
   24e44:	cmp	r7, r3
   24e48:	asr	r2, r3, #5
   24e4c:	and	r0, r3, #31
   24e50:	movhi	r1, #0
   24e54:	movls	r1, #1
   24e58:	cmp	r8, r3
   24e5c:	add	r3, r3, #1
   24e60:	movcc	r1, #0
   24e64:	cmp	r1, #0
   24e68:	beq	24e78 <__assert_fail@plt+0x13bd0>
   24e6c:	ldr	r1, [r4, r2, lsl #2]
   24e70:	orr	r1, r1, ip, lsl r0
   24e74:	str	r1, [r4, r2, lsl #2]
   24e78:	cmp	r3, #256	; 0x100
   24e7c:	bne	24e44 <__assert_fail@plt+0x13b9c>
   24e80:	ldr	r2, [sp, #204]	; 0xcc
   24e84:	mov	r3, #0
   24e88:	str	r3, [r2]
   24e8c:	b	23f44 <__assert_fail@plt+0x12c9c>
   24e90:	cmp	r5, #0
   24e94:	strne	r6, [r5]
   24e98:	b	23b84 <__assert_fail@plt+0x128dc>
   24e9c:	ldr	r2, [sp, #204]	; 0xcc
   24ea0:	mov	r3, #2
   24ea4:	str	r3, [r2]
   24ea8:	b	249d4 <__assert_fail@plt+0x1372c>
   24eac:	mov	r0, #996	; 0x3e4
   24eb0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24eb4:	cmp	r0, #0
   24eb8:	beq	23b84 <__assert_fail@plt+0x128dc>
   24ebc:	ldr	r1, [sl, #56]	; 0x38
   24ec0:	mov	lr, #4
   24ec4:	mov	r2, #1
   24ec8:	mov	r3, #0
   24ecc:	str	r1, [r0]
   24ed0:	str	r0, [sl, #56]	; 0x38
   24ed4:	b	23bb8 <__assert_fail@plt+0x12910>
   24ed8:	str	r2, [sp, #28]
   24edc:	mov	r3, #6
   24ee0:	ldr	r2, [sp, #204]	; 0xcc
   24ee4:	str	r3, [r2]
   24ee8:	b	23730 <__assert_fail@plt+0x12488>
   24eec:	mov	r0, r4
   24ef0:	str	r6, [sp, #28]
   24ef4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   24ef8:	ldr	r0, [sp, #16]
   24efc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   24f00:	ldr	r2, [sp, #204]	; 0xcc
   24f04:	mov	r3, #12
   24f08:	str	r3, [r2]
   24f0c:	b	23730 <__assert_fail@plt+0x12488>
   24f10:	ldr	r0, [sp, #84]	; 0x54
   24f14:	strd	r2, [sp, #56]	; 0x38
   24f18:	bl	11188 <strlen@plt>
   24f1c:	cmp	r0, #1
   24f20:	ldrd	r2, [sp, #56]	; 0x38
   24f24:	bls	25674 <__assert_fail@plt+0x143cc>
   24f28:	mov	r3, #3
   24f2c:	ldr	sl, [sp, #24]
   24f30:	ldr	r2, [sp, #204]	; 0xcc
   24f34:	str	r3, [r2]
   24f38:	b	249d4 <__assert_fail@plt+0x1372c>
   24f3c:	mov	r0, #996	; 0x3e4
   24f40:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24f44:	cmp	r0, #0
   24f48:	beq	23b84 <__assert_fail@plt+0x128dc>
   24f4c:	ldr	r3, [sl, #56]	; 0x38
   24f50:	mov	r2, #1
   24f54:	mov	r6, #4
   24f58:	mov	r1, #0
   24f5c:	str	r3, [r0]
   24f60:	str	r0, [sl, #56]	; 0x38
   24f64:	b	23e98 <__assert_fail@plt+0x12bf0>
   24f68:	mov	r0, #996	; 0x3e4
   24f6c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24f70:	cmp	r0, #0
   24f74:	beq	23b84 <__assert_fail@plt+0x128dc>
   24f78:	ldr	r1, [sl, #56]	; 0x38
   24f7c:	mov	r2, #1
   24f80:	mov	ip, #4
   24f84:	mov	r3, #0
   24f88:	str	r1, [r0]
   24f8c:	str	r0, [sl, #56]	; 0x38
   24f90:	b	239ec <__assert_fail@plt+0x12744>
   24f94:	ldr	r2, [r9, #40]	; 0x28
   24f98:	mov	r1, #1
   24f9c:	ldr	r3, [sp, #72]	; 0x48
   24fa0:	sub	r2, r2, fp
   24fa4:	str	r2, [r9, #40]	; 0x28
   24fa8:	strb	r1, [r5, #4]
   24fac:	b	23df0 <__assert_fail@plt+0x12b48>
   24fb0:	ldr	r3, [sp, #204]	; 0xcc
   24fb4:	ldr	r3, [r3]
   24fb8:	cmp	r3, #0
   24fbc:	beq	24308 <__assert_fail@plt+0x13060>
   24fc0:	b	240ac <__assert_fail@plt+0x12e04>
   24fc4:	mov	r0, #996	; 0x3e4
   24fc8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24fcc:	cmp	r0, #0
   24fd0:	beq	23b84 <__assert_fail@plt+0x128dc>
   24fd4:	ldr	r1, [sl, #56]	; 0x38
   24fd8:	mov	r2, #4
   24fdc:	mov	r3, #0
   24fe0:	str	r1, [r0]
   24fe4:	str	r0, [sl, #56]	; 0x38
   24fe8:	b	23c6c <__assert_fail@plt+0x129c4>
   24fec:	mov	r0, #996	; 0x3e4
   24ff0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   24ff4:	cmp	r0, #0
   24ff8:	beq	23b84 <__assert_fail@plt+0x128dc>
   24ffc:	ldr	r1, [sl, #56]	; 0x38
   25000:	mov	r6, #4
   25004:	mov	r2, #1
   25008:	mov	r3, #0
   2500c:	str	r1, [r0]
   25010:	str	r0, [sl, #56]	; 0x38
   25014:	b	238e4 <__assert_fail@plt+0x1263c>
   25018:	mov	r0, #996	; 0x3e4
   2501c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   25020:	cmp	r0, #0
   25024:	beq	25844 <__assert_fail@plt+0x1459c>
   25028:	ldr	r1, [sl, #56]	; 0x38
   2502c:	mov	r2, #1
   25030:	mov	r5, #4
   25034:	mov	r3, #0
   25038:	str	r1, [r0]
   2503c:	str	r0, [sl, #56]	; 0x38
   25040:	b	23870 <__assert_fail@plt+0x125c8>
   25044:	lsl	r3, r2, #1
   25048:	add	r3, r3, #1
   2504c:	lsl	r1, r3, #2
   25050:	str	r3, [sp, #36]	; 0x24
   25054:	bl	2ab84 <__assert_fail@plt+0x198dc>
   25058:	cmp	r0, #0
   2505c:	beq	257c4 <__assert_fail@plt+0x1451c>
   25060:	ldr	r2, [sp, #16]
   25064:	str	r0, [r2]
   25068:	ldr	r3, [r2, #20]
   2506c:	b	24970 <__assert_fail@plt+0x136c8>
   25070:	ldr	r3, [r9, #40]	; 0x28
   25074:	ldr	sl, [sp, #24]
   25078:	ldr	r2, [sp, #44]	; 0x2c
   2507c:	add	fp, r3, fp
   25080:	str	fp, [r9, #40]	; 0x28
   25084:	cmp	r2, #0
   25088:	beq	2511c <__assert_fail@plt+0x13e74>
   2508c:	ubfx	r2, r4, #2, #1
   25090:	cmp	r2, #0
   25094:	moveq	r1, r2
   25098:	beq	250ac <__assert_fail@plt+0x13e04>
   2509c:	ldr	r3, [r4]
   250a0:	mov	r1, #1
   250a4:	mvn	r3, r3
   250a8:	str	r3, [r4]
   250ac:	ldr	ip, [r4, r2, lsl #2]
   250b0:	rsb	lr, r2, #8
   250b4:	add	r3, r4, r2, lsl #2
   250b8:	lsr	lr, lr, #1
   250bc:	ldr	r0, [r3, #4]
   250c0:	cmp	lr, #4
   250c4:	mvn	ip, ip
   250c8:	str	ip, [r4, r2, lsl #2]
   250cc:	mvn	r2, r0
   250d0:	ldr	lr, [r3, #8]
   250d4:	ldr	ip, [r3, #12]
   250d8:	ldr	r0, [r3, #16]
   250dc:	mvn	lr, lr
   250e0:	stmib	r3, {r2, lr}
   250e4:	mvn	ip, ip
   250e8:	ldr	r2, [r3, #20]
   250ec:	mvn	r0, r0
   250f0:	str	ip, [r3, #12]
   250f4:	str	r0, [r3, #16]
   250f8:	mvn	r2, r2
   250fc:	str	r2, [r3, #20]
   25100:	bne	252e0 <__assert_fail@plt+0x14038>
   25104:	ldr	r1, [r3, #24]
   25108:	ldr	r2, [r3, #28]
   2510c:	mvn	r1, r1
   25110:	mvn	r2, r2
   25114:	str	r1, [r3, #24]
   25118:	str	r2, [r3, #28]
   2511c:	ldr	r1, [sl, #92]	; 0x5c
   25120:	cmp	r1, #1
   25124:	ble	251d4 <__assert_fail@plt+0x13f2c>
   25128:	ldr	r3, [sl, #60]	; 0x3c
   2512c:	add	r0, r4, #8
   25130:	add	r2, r3, #8
   25134:	orr	ip, r3, r4
   25138:	cmp	r3, r0
   2513c:	cmpcc	r4, r2
   25140:	movcs	r2, #1
   25144:	movcc	r2, #0
   25148:	tst	ip, #7
   2514c:	movne	r2, #0
   25150:	cmp	r2, #0
   25154:	ldr	r2, [r4]
   25158:	beq	25718 <__assert_fail@plt+0x14470>
   2515c:	ldm	r3, {ip, lr}
   25160:	ldr	r0, [r4, #4]
   25164:	and	r2, r2, ip
   25168:	ldr	ip, [r4, #8]
   2516c:	and	r0, r0, lr
   25170:	str	r2, [r4]
   25174:	ldr	r2, [r4, #12]
   25178:	str	r0, [r4, #4]
   2517c:	ldr	r0, [r3, #8]
   25180:	ldr	lr, [r3, #12]
   25184:	and	ip, ip, r0
   25188:	ldr	r0, [r4, #16]
   2518c:	and	r2, r2, lr
   25190:	str	ip, [r4, #8]
   25194:	ldr	lr, [r4, #20]
   25198:	str	r2, [r4, #12]
   2519c:	ldr	r2, [r3, #16]
   251a0:	ldr	ip, [r3, #20]
   251a4:	and	r2, r2, r0
   251a8:	ldr	r0, [r4, #24]
   251ac:	and	ip, ip, lr
   251b0:	str	r2, [r4, #16]
   251b4:	ldr	r2, [r4, #28]
   251b8:	str	ip, [r4, #20]
   251bc:	ldr	ip, [r3, #24]
   251c0:	ldr	r3, [r3, #28]
   251c4:	and	r0, r0, ip
   251c8:	and	r3, r3, r2
   251cc:	str	r0, [r4, #24]
   251d0:	str	r3, [r4, #28]
   251d4:	ldr	r3, [sp, #16]
   251d8:	ldr	r3, [r3, #20]
   251dc:	cmp	r3, #0
   251e0:	bne	252f4 <__assert_fail@plt+0x1404c>
   251e4:	ldr	r2, [sp, #16]
   251e8:	ldr	r3, [r2, #24]
   251ec:	cmp	r3, #0
   251f0:	bne	252f4 <__assert_fail@plt+0x1404c>
   251f4:	ldr	r3, [r2, #28]
   251f8:	cmp	r3, #0
   251fc:	bne	252f4 <__assert_fail@plt+0x1404c>
   25200:	ldr	r3, [r2, #32]
   25204:	cmp	r3, #0
   25208:	bne	252f4 <__assert_fail@plt+0x1404c>
   2520c:	cmp	r1, #1
   25210:	ble	2522c <__assert_fail@plt+0x13f84>
   25214:	ldr	r3, [r2, #36]	; 0x24
   25218:	cmp	r3, #0
   2521c:	bne	252f4 <__assert_fail@plt+0x1404c>
   25220:	ldrb	r3, [r2, #16]
   25224:	tst	r3, #1
   25228:	bne	252f4 <__assert_fail@plt+0x1404c>
   2522c:	ldr	r5, [sp, #16]
   25230:	ldr	r0, [r5]
   25234:	bl	2ad30 <__assert_fail@plt+0x19a88>
   25238:	ldr	r0, [r5, #4]
   2523c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   25240:	ldr	r0, [r5, #8]
   25244:	bl	2ad30 <__assert_fail@plt+0x19a88>
   25248:	ldr	r0, [r5, #12]
   2524c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   25250:	mov	r0, r5
   25254:	bl	2ad30 <__assert_fail@plt+0x19a88>
   25258:	ldr	r1, [sl, #64]	; 0x40
   2525c:	cmp	r1, #31
   25260:	beq	25798 <__assert_fail@plt+0x144f0>
   25264:	ldr	r2, [sl, #56]	; 0x38
   25268:	lsl	r3, r1, #5
   2526c:	add	r5, r1, #1
   25270:	mov	lr, #3
   25274:	mov	r1, #0
   25278:	add	ip, r3, #24
   2527c:	add	r0, r3, #16
   25280:	str	r5, [sl, #64]	; 0x40
   25284:	add	r5, r3, #4
   25288:	mvn	r7, #0
   2528c:	add	r3, r2, r3
   25290:	add	r6, r2, ip
   25294:	add	r0, r2, r0
   25298:	adds	r5, r2, r5
   2529c:	str	r1, [r3, #4]
   252a0:	str	r1, [r3, #8]
   252a4:	str	r1, [r3, #12]
   252a8:	str	r4, [r2, ip]
   252ac:	strb	lr, [r6, #4]
   252b0:	ldrb	r2, [r0, #14]
   252b4:	str	r5, [sp, #28]
   252b8:	bic	r2, r2, #12
   252bc:	strb	r2, [r0, #14]
   252c0:	str	r1, [r3, #16]
   252c4:	str	r1, [r3, #20]
   252c8:	str	r7, [r3, #32]
   252cc:	bne	23308 <__assert_fail@plt+0x12060>
   252d0:	ldr	r2, [sp, #204]	; 0xcc
   252d4:	mov	r3, #12
   252d8:	str	r3, [r2]
   252dc:	b	249d4 <__assert_fail@plt+0x1372c>
   252e0:	add	r3, r1, #6
   252e4:	ldr	r2, [r4, r3, lsl #2]
   252e8:	mvn	r2, r2
   252ec:	str	r2, [r4, r3, lsl #2]
   252f0:	b	2511c <__assert_fail@plt+0x13e74>
   252f4:	ldrb	r2, [sl, #88]	; 0x58
   252f8:	ldr	r3, [sl, #64]	; 0x40
   252fc:	orr	r2, r2, #2
   25300:	cmp	r3, #31
   25304:	strb	r2, [sl, #88]	; 0x58
   25308:	beq	25680 <__assert_fail@plt+0x143d8>
   2530c:	ldr	r0, [sl, #56]	; 0x38
   25310:	lsl	r5, r3, #5
   25314:	add	ip, r3, #1
   25318:	mov	lr, #6
   2531c:	mov	r3, #0
   25320:	str	ip, [sl, #64]	; 0x40
   25324:	add	ip, r5, #4
   25328:	add	r1, r5, #24
   2532c:	add	r2, r5, #16
   25330:	mvn	r6, #0
   25334:	adds	r8, r0, ip
   25338:	ldr	ip, [sp, #16]
   2533c:	add	r7, r0, r5
   25340:	add	r5, r0, r1
   25344:	add	r2, r0, r2
   25348:	str	r3, [r7, #4]
   2534c:	str	r3, [r7, #8]
   25350:	str	r3, [r7, #12]
   25354:	str	ip, [r0, r1]
   25358:	strb	lr, [r5, #4]
   2535c:	ldrb	r1, [r2, #14]
   25360:	bic	r1, r1, #12
   25364:	strb	r1, [r2, #14]
   25368:	str	r3, [r7, #16]
   2536c:	str	r3, [r7, #20]
   25370:	str	r6, [r7, #32]
   25374:	beq	252d0 <__assert_fail@plt+0x14028>
   25378:	ldr	r3, [r4]
   2537c:	cmp	r3, #0
   25380:	bne	25518 <__assert_fail@plt+0x14270>
   25384:	ldr	r3, [r4, #4]
   25388:	cmp	r3, #0
   2538c:	bne	25518 <__assert_fail@plt+0x14270>
   25390:	ldr	r3, [r4, #8]
   25394:	cmp	r3, #0
   25398:	bne	25518 <__assert_fail@plt+0x14270>
   2539c:	ldr	r3, [r4, #12]
   253a0:	cmp	r3, #0
   253a4:	bne	25518 <__assert_fail@plt+0x14270>
   253a8:	ldr	r3, [r4, #16]
   253ac:	cmp	r3, #0
   253b0:	bne	25518 <__assert_fail@plt+0x14270>
   253b4:	ldr	r3, [r4, #20]
   253b8:	cmp	r3, #0
   253bc:	bne	25518 <__assert_fail@plt+0x14270>
   253c0:	ldr	r3, [r4, #24]
   253c4:	cmp	r3, #0
   253c8:	bne	25518 <__assert_fail@plt+0x14270>
   253cc:	ldr	r3, [r4, #28]
   253d0:	cmp	r3, #0
   253d4:	bne	25518 <__assert_fail@plt+0x14270>
   253d8:	mov	r0, r4
   253dc:	str	r8, [sp, #28]
   253e0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   253e4:	b	23308 <__assert_fail@plt+0x12060>
   253e8:	mov	r0, #996	; 0x3e4
   253ec:	bl	2ab48 <__assert_fail@plt+0x198a0>
   253f0:	cmp	r0, #0
   253f4:	beq	23b84 <__assert_fail@plt+0x128dc>
   253f8:	ldr	r1, [sl, #56]	; 0x38
   253fc:	mov	lr, #4
   25400:	mov	r2, #1
   25404:	mov	r3, #0
   25408:	str	r1, [r0]
   2540c:	str	r0, [sl, #56]	; 0x38
   25410:	b	24a3c <__assert_fail@plt+0x13794>
   25414:	mov	r0, #996	; 0x3e4
   25418:	bl	2ab48 <__assert_fail@plt+0x198a0>
   2541c:	cmp	r0, #0
   25420:	mov	r4, r0
   25424:	beq	23848 <__assert_fail@plt+0x125a0>
   25428:	ldr	ip, [sl, #56]	; 0x38
   2542c:	mov	r3, r6
   25430:	mov	r2, r0
   25434:	mov	r1, #1
   25438:	mov	r4, #4
   2543c:	str	ip, [r0]
   25440:	str	r0, [sl, #56]	; 0x38
   25444:	b	237fc <__assert_fail@plt+0x12554>
   25448:	mov	r0, #996	; 0x3e4
   2544c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   25450:	cmp	r0, #0
   25454:	mov	r4, r0
   25458:	beq	24c90 <__assert_fail@plt+0x139e8>
   2545c:	ldr	ip, [sl, #56]	; 0x38
   25460:	mov	r3, r6
   25464:	mov	r2, r0
   25468:	mov	r1, #1
   2546c:	mov	r4, #4
   25470:	str	ip, [r0]
   25474:	str	r0, [sl, #56]	; 0x38
   25478:	b	24c44 <__assert_fail@plt+0x1399c>
   2547c:	mov	r4, #128	; 0x80
   25480:	mov	r7, #4
   25484:	bl	11170 <__ctype_b_loc@plt>
   25488:	ldr	r2, [r0]
   2548c:	add	ip, r7, #24
   25490:	sub	r3, r4, #-2147483647	; 0x80000001
   25494:	mov	lr, #1
   25498:	add	ip, sl, ip, lsl #2
   2549c:	add	r7, sl, #128	; 0x80
   254a0:	add	r6, r2, r3, lsl lr
   254a4:	mov	r0, r6
   254a8:	mov	r1, #0
   254ac:	ldrh	r2, [r0, #2]!
   254b0:	add	r3, r4, r1
   254b4:	ubfx	r2, r2, #3, #1
   254b8:	cmp	r3, #95	; 0x5f
   254bc:	movne	r3, r2
   254c0:	orreq	r3, r2, #1
   254c4:	cmp	r3, #0
   254c8:	beq	254d8 <__assert_fail@plt+0x14230>
   254cc:	ldr	r3, [ip]
   254d0:	orr	r3, r3, lr, lsl r1
   254d4:	str	r3, [ip]
   254d8:	add	r1, r1, #1
   254dc:	cmp	r1, #32
   254e0:	bne	254ac <__assert_fail@plt+0x14204>
   254e4:	add	ip, ip, #4
   254e8:	add	r4, r4, #32
   254ec:	cmp	ip, r7
   254f0:	add	r6, r6, #64	; 0x40
   254f4:	bne	254a4 <__assert_fail@plt+0x141fc>
   254f8:	b	237c0 <__assert_fail@plt+0x12518>
   254fc:	mov	r7, r4
   25500:	b	25484 <__assert_fail@plt+0x141dc>
   25504:	cmp	r3, #3
   25508:	cmpne	r3, #0
   2550c:	beq	24de0 <__assert_fail@plt+0x13b38>
   25510:	ldr	r8, [sp, #84]	; 0x54
   25514:	b	24dd4 <__assert_fail@plt+0x13b2c>
   25518:	ldr	r2, [sl, #64]	; 0x40
   2551c:	cmp	r2, #31
   25520:	beq	256cc <__assert_fail@plt+0x14424>
   25524:	lsl	r3, r2, #5
   25528:	add	r2, r2, #1
   2552c:	mov	r6, #0
   25530:	mov	lr, #3
   25534:	add	r1, r3, #24
   25538:	add	r5, r0, r3
   2553c:	str	r2, [sl, #64]	; 0x40
   25540:	add	ip, r0, r1
   25544:	add	r2, r3, #16
   25548:	add	r2, r0, r2
   2554c:	add	r3, r3, #4
   25550:	str	r6, [r5, #4]
   25554:	adds	fp, r0, r3
   25558:	str	r6, [r5, #8]
   2555c:	str	r6, [r5, #12]
   25560:	str	r4, [r0, r1]
   25564:	strb	lr, [ip, #4]
   25568:	ldrb	r3, [r2, #14]
   2556c:	bic	r3, r3, #12
   25570:	strb	r3, [r2, #14]
   25574:	mvn	r3, #0
   25578:	str	r6, [r5, #16]
   2557c:	str	r6, [r5, #20]
   25580:	str	r3, [r5, #32]
   25584:	beq	252d0 <__assert_fail@plt+0x14028>
   25588:	mov	r2, #0
   2558c:	mov	r3, #0
   25590:	strd	r2, [sp, #128]	; 0x80
   25594:	ldr	r1, [sl, #64]	; 0x40
   25598:	cmp	r1, #31
   2559c:	beq	256a4 <__assert_fail@plt+0x143fc>
   255a0:	ldr	ip, [sl, #56]	; 0x38
   255a4:	lsl	r3, r1, #5
   255a8:	add	r1, r1, #1
   255ac:	mov	lr, #10
   255b0:	str	r1, [sl, #64]	; 0x40
   255b4:	add	r1, r3, #4
   255b8:	add	r2, r3, #16
   255bc:	add	r6, ip, r1
   255c0:	add	r3, ip, r3
   255c4:	mov	r1, #0
   255c8:	add	r2, ip, r2
   255cc:	cmp	r6, r1
   255d0:	mvn	ip, #0
   255d4:	str	r6, [sp, #28]
   255d8:	stmib	r3, {r1, fp}
   255dc:	str	r8, [r3, #12]
   255e0:	strb	lr, [sp, #132]	; 0x84
   255e4:	ldrd	r0, [sp, #128]	; 0x80
   255e8:	strd	r0, [r3, #24]
   255ec:	ldrb	r1, [r2, #14]
   255f0:	bic	r1, r1, #12
   255f4:	strb	r1, [r2, #14]
   255f8:	mov	r2, #0
   255fc:	str	r2, [r3, #16]
   25600:	str	r2, [r3, #20]
   25604:	str	ip, [r3, #32]
   25608:	str	r6, [r5, #4]
   2560c:	str	r6, [r7, #4]
   25610:	bne	23308 <__assert_fail@plt+0x12060>
   25614:	b	252d0 <__assert_fail@plt+0x14028>
   25618:	ldr	r7, [sp, #76]	; 0x4c
   2561c:	b	24dac <__assert_fail@plt+0x13b04>
   25620:	cmp	r3, #0
   25624:	movne	r7, #0
   25628:	bne	2564c <__assert_fail@plt+0x143a4>
   2562c:	mov	r7, r3
   25630:	ldrb	r8, [sp, #84]	; 0x54
   25634:	b	24d78 <__assert_fail@plt+0x13ad0>
   25638:	mov	r3, #11
   2563c:	ldr	sl, [sp, #24]
   25640:	ldr	r2, [sp, #204]	; 0xcc
   25644:	str	r3, [r2]
   25648:	b	249d4 <__assert_fail@plt+0x1372c>
   2564c:	mov	r8, #0
   25650:	b	24d78 <__assert_fail@plt+0x13ad0>
   25654:	ldr	r0, [sp, #76]	; 0x4c
   25658:	strd	r2, [sp, #56]	; 0x38
   2565c:	bl	11188 <strlen@plt>
   25660:	cmp	r0, #1
   25664:	ldrd	r2, [sp, #56]	; 0x38
   25668:	bhi	24f28 <__assert_fail@plt+0x13c80>
   2566c:	cmp	r3, #3
   25670:	beq	24f10 <__assert_fail@plt+0x13c68>
   25674:	ldr	r1, [sp, #76]	; 0x4c
   25678:	ldrb	r7, [r1]
   2567c:	b	24d60 <__assert_fail@plt+0x13ab8>
   25680:	mov	r0, #996	; 0x3e4
   25684:	bl	2ab48 <__assert_fail@plt+0x198a0>
   25688:	cmp	r0, #0
   2568c:	beq	252d0 <__assert_fail@plt+0x14028>
   25690:	ldr	r2, [sl, #56]	; 0x38
   25694:	mov	r3, #0
   25698:	str	r2, [r0]
   2569c:	str	r0, [sl, #56]	; 0x38
   256a0:	b	2530c <__assert_fail@plt+0x14064>
   256a4:	mov	r0, #996	; 0x3e4
   256a8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   256ac:	cmp	r0, #0
   256b0:	beq	252d0 <__assert_fail@plt+0x14028>
   256b4:	ldr	r3, [sl, #56]	; 0x38
   256b8:	mov	r1, r6
   256bc:	str	r3, [r0]
   256c0:	str	r0, [sl, #56]	; 0x38
   256c4:	str	r6, [sl, #64]	; 0x40
   256c8:	b	255a0 <__assert_fail@plt+0x142f8>
   256cc:	mov	r0, #996	; 0x3e4
   256d0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   256d4:	cmp	r0, #0
   256d8:	beq	252d0 <__assert_fail@plt+0x14028>
   256dc:	ldr	r3, [sl, #56]	; 0x38
   256e0:	mov	r2, #0
   256e4:	str	r3, [r0]
   256e8:	str	r0, [sl, #56]	; 0x38
   256ec:	b	25524 <__assert_fail@plt+0x1427c>
   256f0:	ldr	r0, [sp, #84]	; 0x54
   256f4:	strd	r2, [sp, #56]	; 0x38
   256f8:	bl	11188 <strlen@plt>
   256fc:	cmp	r0, #1
   25700:	bhi	24f28 <__assert_fail@plt+0x13c80>
   25704:	ldrd	r2, [sp, #56]	; 0x38
   25708:	cmp	r2, #0
   2570c:	movne	r7, #0
   25710:	bne	24d70 <__assert_fail@plt+0x13ac8>
   25714:	b	24d5c <__assert_fail@plt+0x13ab4>
   25718:	ldr	r0, [r3]
   2571c:	ldr	ip, [r4, #4]
   25720:	and	r2, r2, r0
   25724:	ldr	r0, [r4, #8]
   25728:	str	r2, [r4]
   2572c:	ldr	lr, [r3, #4]
   25730:	ldr	r2, [r4, #12]
   25734:	and	ip, ip, lr
   25738:	ldr	lr, [r4, #16]
   2573c:	str	ip, [r4, #4]
   25740:	ldr	r5, [r3, #8]
   25744:	ldr	ip, [r4, #20]
   25748:	and	r0, r0, r5
   2574c:	str	r0, [r4, #8]
   25750:	ldr	r5, [r3, #12]
   25754:	ldr	r0, [r4, #24]
   25758:	and	r2, r2, r5
   2575c:	str	r2, [r4, #12]
   25760:	ldr	r5, [r3, #16]
   25764:	ldr	r2, [r4, #28]
   25768:	and	lr, lr, r5
   2576c:	str	lr, [r4, #16]
   25770:	ldr	lr, [r3, #20]
   25774:	and	ip, ip, lr
   25778:	str	ip, [r4, #20]
   2577c:	ldr	ip, [r3, #24]
   25780:	and	r0, r0, ip
   25784:	str	r0, [r4, #24]
   25788:	ldr	r3, [r3, #28]
   2578c:	and	r3, r3, r2
   25790:	str	r3, [r4, #28]
   25794:	b	251d4 <__assert_fail@plt+0x13f2c>
   25798:	mov	r0, #996	; 0x3e4
   2579c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   257a0:	cmp	r0, #0
   257a4:	beq	252d0 <__assert_fail@plt+0x14028>
   257a8:	ldr	r2, [sl, #56]	; 0x38
   257ac:	mov	r3, #0
   257b0:	mov	r1, r3
   257b4:	str	r2, [r0]
   257b8:	str	r0, [sl, #56]	; 0x38
   257bc:	str	r3, [sl, #64]	; 0x40
   257c0:	b	25264 <__assert_fail@plt+0x13fbc>
   257c4:	ldr	sl, [sp, #24]
   257c8:	b	252d0 <__assert_fail@plt+0x14028>
   257cc:	lsl	r3, r1, #1
   257d0:	mov	r0, r2
   257d4:	add	r3, r3, #1
   257d8:	str	r3, [sp, #40]	; 0x28
   257dc:	lsl	r3, r3, #2
   257e0:	mov	r1, r3
   257e4:	str	r3, [sp, #56]	; 0x38
   257e8:	bl	2ab84 <__assert_fail@plt+0x198dc>
   257ec:	ldr	r3, [sp, #56]	; 0x38
   257f0:	mov	r2, r0
   257f4:	str	r2, [sp, #52]	; 0x34
   257f8:	mov	r1, r3
   257fc:	ldr	r3, [sp, #16]
   25800:	ldr	r0, [r3, #8]
   25804:	bl	2ab84 <__assert_fail@plt+0x198dc>
   25808:	ldr	r2, [sp, #52]	; 0x34
   2580c:	cmp	r0, #0
   25810:	cmpne	r2, #0
   25814:	beq	2584c <__assert_fail@plt+0x145a4>
   25818:	ldr	r1, [sp, #16]
   2581c:	str	r2, [r1, #4]
   25820:	str	r0, [r1, #8]
   25824:	ldr	r3, [r1, #32]
   25828:	b	24e20 <__assert_fail@plt+0x13b78>
   2582c:	add	fp, sp, #128	; 0x80
   25830:	ldr	r7, [sp, #28]
   25834:	b	2475c <__assert_fail@plt+0x134b4>
   25838:	ldr	r6, [sp, #28]
   2583c:	mov	r4, r6
   25840:	b	2466c <__assert_fail@plt+0x133c4>
   25844:	mov	r5, r0
   25848:	b	238bc <__assert_fail@plt+0x12614>
   2584c:	mov	r8, r0
   25850:	mov	r0, r2
   25854:	ldr	sl, [sp, #24]
   25858:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2585c:	mov	r0, r8
   25860:	bl	2ad30 <__assert_fail@plt+0x19a88>
   25864:	ldr	r2, [sp, #204]	; 0xcc
   25868:	mov	r3, #12
   2586c:	str	r3, [r2]
   25870:	b	249d4 <__assert_fail@plt+0x1372c>
   25874:	ldr	r8, [sp, #24]
   25878:	b	24404 <__assert_fail@plt+0x1315c>
   2587c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25880:	strd	r6, [sp, #8]
   25884:	mov	r7, r2
   25888:	strd	r8, [sp, #16]
   2588c:	mov	r8, r1
   25890:	strd	sl, [sp, #24]
   25894:	mov	fp, r0
   25898:	str	lr, [sp, #32]
   2589c:	sub	sp, sp, #44	; 0x2c
   258a0:	ldr	r6, [sp, #80]	; 0x50
   258a4:	str	r3, [sp, #12]
   258a8:	ldr	r5, [sp, #84]	; 0x54
   258ac:	ldr	r9, [r1]
   258b0:	str	r6, [sp]
   258b4:	str	r5, [sp, #4]
   258b8:	bl	23194 <__assert_fail@plt+0x11eec>
   258bc:	ldr	r2, [r5]
   258c0:	clz	r3, r0
   258c4:	lsr	r3, r3, #5
   258c8:	cmp	r2, #0
   258cc:	moveq	r3, #0
   258d0:	cmp	r3, #0
   258d4:	bne	25a90 <__assert_fail@plt+0x147e8>
   258d8:	mov	r4, r0
   258dc:	strd	r8, [sp, #16]
   258e0:	str	r3, [sp, #24]
   258e4:	ldrb	r2, [r7, #4]
   258e8:	and	r3, r2, #247	; 0xf7
   258ec:	cmp	r3, #2
   258f0:	beq	2596c <__assert_fail@plt+0x146c4>
   258f4:	clz	r3, r6
   258f8:	lsr	r3, r3, #5
   258fc:	cmp	r2, #9
   25900:	orrne	r3, r3, #1
   25904:	cmp	r3, #0
   25908:	beq	2596c <__assert_fail@plt+0x146c4>
   2590c:	mov	r2, r7
   25910:	mov	r0, fp
   25914:	str	r6, [sp]
   25918:	str	r5, [sp, #4]
   2591c:	ldr	r3, [sp, #12]
   25920:	ldr	r1, [sp, #16]
   25924:	bl	23194 <__assert_fail@plt+0x11eec>
   25928:	ldr	r2, [r5]
   2592c:	clz	r3, r0
   25930:	mov	sl, r0
   25934:	lsr	r3, r3, #5
   25938:	cmp	r2, #0
   2593c:	moveq	r3, #0
   25940:	cmp	r3, #0
   25944:	bne	25a58 <__assert_fail@plt+0x147b0>
   25948:	cmp	r4, #0
   2594c:	cmpne	r0, #0
   25950:	bne	2598c <__assert_fail@plt+0x146e4>
   25954:	ldrb	r2, [r7, #4]
   25958:	cmp	r4, #0
   2595c:	moveq	r4, r0
   25960:	and	r3, r2, #247	; 0xf7
   25964:	cmp	r3, #2
   25968:	bne	258f4 <__assert_fail@plt+0x1464c>
   2596c:	mov	r0, r4
   25970:	add	sp, sp, #44	; 0x2c
   25974:	ldrd	r4, [sp]
   25978:	ldrd	r6, [sp, #8]
   2597c:	ldrd	r8, [sp, #16]
   25980:	ldrd	sl, [sp, #24]
   25984:	add	sp, sp, #32
   25988:	pop	{pc}		; (ldr pc, [sp], #4)
   2598c:	ldr	r2, [sp, #20]
   25990:	mov	r0, #0
   25994:	mov	r1, #0
   25998:	strd	r0, [sp, #32]
   2599c:	ldr	ip, [r2, #64]	; 0x40
   259a0:	cmp	ip, #31
   259a4:	beq	25a24 <__assert_fail@plt+0x1477c>
   259a8:	ldr	r0, [r2, #56]	; 0x38
   259ac:	lsl	r3, ip, #5
   259b0:	add	ip, ip, #1
   259b4:	add	r1, r3, #4
   259b8:	mov	r2, #16
   259bc:	ldr	lr, [sp, #24]
   259c0:	strb	r2, [sp, #36]	; 0x24
   259c4:	add	r2, r0, r3
   259c8:	add	r3, r3, #16
   259cc:	add	r3, r0, r3
   259d0:	add	r0, r0, r1
   259d4:	ldr	r1, [sp, #20]
   259d8:	cmp	r0, #0
   259dc:	ldrd	r8, [sp, #32]
   259e0:	str	ip, [r1, #64]	; 0x40
   259e4:	mvn	r1, #0
   259e8:	str	lr, [r2, #4]
   259ec:	str	r4, [r2, #8]
   259f0:	str	sl, [r2, #12]
   259f4:	strd	r8, [r2, #24]
   259f8:	ldrb	ip, [r3, #14]
   259fc:	bic	ip, ip, #12
   25a00:	strb	ip, [r3, #14]
   25a04:	str	lr, [r2, #16]
   25a08:	str	lr, [r2, #20]
   25a0c:	str	r1, [r2, #32]
   25a10:	str	r0, [r4]
   25a14:	str	r0, [sl]
   25a18:	beq	25a70 <__assert_fail@plt+0x147c8>
   25a1c:	mov	r4, r0
   25a20:	b	258e4 <__assert_fail@plt+0x1463c>
   25a24:	mov	r0, #996	; 0x3e4
   25a28:	str	r3, [sp, #28]
   25a2c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   25a30:	cmp	r0, #0
   25a34:	beq	25a70 <__assert_fail@plt+0x147c8>
   25a38:	ldr	lr, [sp, #20]
   25a3c:	mov	ip, #1
   25a40:	mov	r1, #4
   25a44:	ldr	r3, [sp, #28]
   25a48:	ldr	r2, [lr, #56]	; 0x38
   25a4c:	str	r2, [r0]
   25a50:	str	r0, [lr, #56]	; 0x38
   25a54:	b	259b8 <__assert_fail@plt+0x14710>
   25a58:	cmp	r4, #0
   25a5c:	beq	25a90 <__assert_fail@plt+0x147e8>
   25a60:	mov	r0, r4
   25a64:	mov	r4, #0
   25a68:	bl	1adec <__assert_fail@plt+0x9b44>
   25a6c:	b	2596c <__assert_fail@plt+0x146c4>
   25a70:	mov	r0, sl
   25a74:	bl	1adec <__assert_fail@plt+0x9b44>
   25a78:	mov	r0, r4
   25a7c:	mov	r4, #0
   25a80:	bl	1adec <__assert_fail@plt+0x9b44>
   25a84:	mov	r3, #12
   25a88:	str	r3, [r5]
   25a8c:	b	2596c <__assert_fail@plt+0x146c4>
   25a90:	mov	r4, #0
   25a94:	b	2596c <__assert_fail@plt+0x146c4>
   25a98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25a9c:	mov	r5, r2
   25aa0:	mov	r4, r0
   25aa4:	strd	r6, [sp, #8]
   25aa8:	ldr	r6, [r1]
   25aac:	strd	r8, [sp, #16]
   25ab0:	mov	r8, r3
   25ab4:	strd	sl, [sp, #24]
   25ab8:	mov	sl, r1
   25abc:	str	lr, [sp, #32]
   25ac0:	sub	sp, sp, #76	; 0x4c
   25ac4:	ldr	r9, [sp, #116]	; 0x74
   25ac8:	ldr	ip, [r6, #84]	; 0x54
   25acc:	str	r9, [sp, #4]
   25ad0:	str	ip, [sp, #16]
   25ad4:	ldr	ip, [sp, #112]	; 0x70
   25ad8:	str	ip, [sp]
   25adc:	bl	2587c <__assert_fail@plt+0x145d4>
   25ae0:	ldr	r2, [r9]
   25ae4:	clz	r3, r0
   25ae8:	lsr	r3, r3, #5
   25aec:	cmp	r2, #0
   25af0:	moveq	r3, #0
   25af4:	cmp	r3, #0
   25af8:	bne	26640 <__assert_fail@plt+0x15398>
   25afc:	movw	r3, #1026	; 0x402
   25b00:	mov	r2, #65280	; 0xff00
   25b04:	movt	r2, #65503	; 0xffdf
   25b08:	and	r3, r8, r3
   25b0c:	str	r8, [sp, #12]
   25b10:	mov	r7, r0
   25b14:	str	sl, [sp, #20]
   25b18:	str	r3, [sp, #32]
   25b1c:	and	r3, r8, #4608	; 0x1200
   25b20:	str	r3, [sp, #36]	; 0x24
   25b24:	and	r3, r8, #33792	; 0x8400
   25b28:	str	r2, [sp, #40]	; 0x28
   25b2c:	str	r3, [sp, #44]	; 0x2c
   25b30:	and	r3, r8, #8192	; 0x2000
   25b34:	str	r9, [sp, #116]	; 0x74
   25b38:	str	r3, [sp, #28]
   25b3c:	and	r3, r8, #8
   25b40:	str	r3, [sp, #52]	; 0x34
   25b44:	and	r3, r8, #2048	; 0x800
   25b48:	str	r3, [sp, #56]	; 0x38
   25b4c:	and	r3, r8, #524288	; 0x80000
   25b50:	str	r3, [sp, #48]	; 0x30
   25b54:	and	r3, r8, #16384	; 0x4000
   25b58:	str	r3, [sp, #60]	; 0x3c
   25b5c:	ldrb	r3, [r5, #4]
   25b60:	cmp	r3, #10
   25b64:	bne	25f18 <__assert_fail@plt+0x14c70>
   25b68:	ldr	r0, [r4, #40]	; 0x28
   25b6c:	ldr	r3, [r4, #56]	; 0x38
   25b70:	cmp	r3, r0
   25b74:	ble	25eec <__assert_fail@plt+0x14c44>
   25b78:	ldr	r1, [r4, #4]
   25b7c:	add	fp, r0, #1
   25b80:	ldrb	ip, [r5, #6]
   25b84:	ldr	r2, [r4, #80]	; 0x50
   25b88:	ldrb	sl, [r1, r0]
   25b8c:	bic	ip, ip, #96	; 0x60
   25b90:	cmp	r2, #1
   25b94:	strb	sl, [r5]
   25b98:	strb	ip, [r5, #6]
   25b9c:	ble	25f38 <__assert_fail@plt+0x14c90>
   25ba0:	ldr	ip, [r4, #28]
   25ba4:	cmp	r0, ip
   25ba8:	beq	25bbc <__assert_fail@plt+0x14914>
   25bac:	ldr	ip, [r4, #8]
   25bb0:	ldr	ip, [ip, r0, lsl #2]
   25bb4:	cmn	ip, #1
   25bb8:	beq	261fc <__assert_fail@plt+0x14f54>
   25bbc:	cmp	sl, #92	; 0x5c
   25bc0:	beq	25f74 <__assert_fail@plt+0x14ccc>
   25bc4:	ldr	r2, [r4, #8]
   25bc8:	mov	r1, #1
   25bcc:	strb	r1, [r5, #4]
   25bd0:	ldr	r2, [r2, r0, lsl #2]
   25bd4:	mov	r0, r2
   25bd8:	str	r2, [sp, #24]
   25bdc:	bl	111ac <iswalnum@plt>
   25be0:	ldr	r2, [sp, #24]
   25be4:	adds	r0, r0, #0
   25be8:	movne	r0, #1
   25bec:	ldrb	r1, [r5, #6]
   25bf0:	cmp	r2, #95	; 0x5f
   25bf4:	orreq	r0, r0, #1
   25bf8:	bfi	r1, r0, #6, #1
   25bfc:	strb	r1, [r5, #6]
   25c00:	sub	r3, sl, #10
   25c04:	cmp	r3, #115	; 0x73
   25c08:	ldrls	pc, [pc, r3, lsl #2]
   25c0c:	b	25dec <__assert_fail@plt+0x14b44>
   25c10:	andeq	r6, r2, r4, ror #4
   25c14:	andeq	r5, r2, ip, ror #27
   25c18:	andeq	r5, r2, ip, ror #27
   25c1c:	andeq	r5, r2, ip, ror #27
   25c20:	andeq	r5, r2, ip, ror #27
   25c24:	andeq	r5, r2, ip, ror #27
   25c28:	andeq	r5, r2, ip, ror #27
   25c2c:	andeq	r5, r2, ip, ror #27
   25c30:	andeq	r5, r2, ip, ror #27
   25c34:	andeq	r5, r2, ip, ror #27
   25c38:	andeq	r5, r2, ip, ror #27
   25c3c:	andeq	r5, r2, ip, ror #27
   25c40:	andeq	r5, r2, ip, ror #27
   25c44:	andeq	r5, r2, ip, ror #27
   25c48:	andeq	r5, r2, ip, ror #27
   25c4c:	andeq	r5, r2, ip, ror #27
   25c50:	andeq	r5, r2, ip, ror #27
   25c54:	andeq	r5, r2, ip, ror #27
   25c58:	andeq	r5, r2, ip, ror #27
   25c5c:	andeq	r5, r2, ip, ror #27
   25c60:	andeq	r5, r2, ip, ror #27
   25c64:	andeq	r5, r2, ip, ror #27
   25c68:	andeq	r5, r2, ip, ror #27
   25c6c:	andeq	r5, r2, ip, ror #27
   25c70:	andeq	r5, r2, ip, ror #27
   25c74:	andeq	r5, r2, ip, ror #27
   25c78:	andeq	r6, r2, r4, lsl #5
   25c7c:	andeq	r5, r2, ip, ror #27
   25c80:	andeq	r5, r2, ip, ror #27
   25c84:	andeq	r5, r2, ip, ror #27
   25c88:			; <UNDEFINED> instruction: 0x000262b4
   25c8c:	ldrdeq	r6, [r2], -r0
   25c90:	strdeq	r6, [r2], -r0
   25c94:	andeq	r6, r2, r0, lsl #6
   25c98:	andeq	r5, r2, ip, ror #27
   25c9c:	andeq	r5, r2, ip, ror #27
   25ca0:	andeq	r6, r2, ip, lsl r3
   25ca4:	andeq	r5, r2, ip, ror #27
   25ca8:	andeq	r5, r2, ip, ror #27
   25cac:	andeq	r5, r2, ip, ror #27
   25cb0:	andeq	r5, r2, ip, ror #27
   25cb4:	andeq	r5, r2, ip, ror #27
   25cb8:	andeq	r5, r2, ip, ror #27
   25cbc:	andeq	r5, r2, ip, ror #27
   25cc0:	andeq	r5, r2, ip, ror #27
   25cc4:	andeq	r5, r2, ip, ror #27
   25cc8:	andeq	r5, r2, ip, ror #27
   25ccc:	andeq	r5, r2, ip, ror #27
   25cd0:	andeq	r5, r2, ip, ror #27
   25cd4:	andeq	r5, r2, ip, ror #27
   25cd8:	andeq	r5, r2, ip, ror #27
   25cdc:	andeq	r5, r2, ip, ror #27
   25ce0:	andeq	r5, r2, ip, ror #27
   25ce4:	andeq	r6, r2, ip, lsr #6
   25ce8:	andeq	r5, r2, ip, ror #27
   25cec:	andeq	r5, r2, ip, ror #27
   25cf0:	andeq	r5, r2, ip, ror #27
   25cf4:	andeq	r5, r2, ip, ror #27
   25cf8:	andeq	r5, r2, ip, ror #27
   25cfc:	andeq	r5, r2, ip, ror #27
   25d00:	andeq	r5, r2, ip, ror #27
   25d04:	andeq	r5, r2, ip, ror #27
   25d08:	andeq	r5, r2, ip, ror #27
   25d0c:	andeq	r5, r2, ip, ror #27
   25d10:	andeq	r5, r2, ip, ror #27
   25d14:	andeq	r5, r2, ip, ror #27
   25d18:	andeq	r5, r2, ip, ror #27
   25d1c:	andeq	r5, r2, ip, ror #27
   25d20:	andeq	r5, r2, ip, ror #27
   25d24:	andeq	r5, r2, ip, ror #27
   25d28:	andeq	r5, r2, ip, ror #27
   25d2c:	andeq	r5, r2, ip, ror #27
   25d30:	andeq	r5, r2, ip, ror #27
   25d34:	andeq	r5, r2, ip, ror #27
   25d38:	andeq	r5, r2, ip, ror #27
   25d3c:	andeq	r5, r2, ip, ror #27
   25d40:	andeq	r5, r2, ip, ror #27
   25d44:	andeq	r5, r2, ip, ror #27
   25d48:	andeq	r5, r2, ip, ror #27
   25d4c:	andeq	r5, r2, ip, ror #27
   25d50:	andeq	r5, r2, ip, ror #27
   25d54:	andeq	r6, r2, r8, asr #6
   25d58:	andeq	r5, r2, ip, ror #27
   25d5c:	andeq	r5, r2, ip, ror #27
   25d60:	andeq	r6, r2, r8, asr r3
   25d64:	andeq	r5, r2, ip, ror #27
   25d68:	andeq	r5, r2, ip, ror #27
   25d6c:	andeq	r5, r2, ip, ror #27
   25d70:	andeq	r5, r2, ip, ror #27
   25d74:	andeq	r5, r2, ip, ror #27
   25d78:	andeq	r5, r2, ip, ror #27
   25d7c:	andeq	r5, r2, ip, ror #27
   25d80:	andeq	r5, r2, ip, ror #27
   25d84:	andeq	r5, r2, ip, ror #27
   25d88:	andeq	r5, r2, ip, ror #27
   25d8c:	andeq	r5, r2, ip, ror #27
   25d90:	andeq	r5, r2, ip, ror #27
   25d94:	andeq	r5, r2, ip, ror #27
   25d98:	andeq	r5, r2, ip, ror #27
   25d9c:	andeq	r5, r2, ip, ror #27
   25da0:	andeq	r5, r2, ip, ror #27
   25da4:	andeq	r5, r2, ip, ror #27
   25da8:	andeq	r5, r2, ip, ror #27
   25dac:	andeq	r5, r2, ip, ror #27
   25db0:	andeq	r5, r2, ip, ror #27
   25db4:	andeq	r5, r2, ip, ror #27
   25db8:	andeq	r5, r2, ip, ror #27
   25dbc:	andeq	r5, r2, ip, ror #27
   25dc0:	andeq	r5, r2, ip, ror #27
   25dc4:	andeq	r5, r2, ip, ror #27
   25dc8:	andeq	r5, r2, ip, ror #27
   25dcc:	andeq	r5, r2, ip, ror #27
   25dd0:	andeq	r5, r2, ip, ror #27
   25dd4:	andeq	r6, r2, r0, ror r3
   25dd8:	andeq	r5, r2, r0, ror #27
   25ddc:	andeq	r6, r2, r8, asr #4
   25de0:	ldr	r3, [sp, #44]	; 0x2c
   25de4:	cmp	r3, #32768	; 0x8000
   25de8:	beq	26270 <__assert_fail@plt+0x14fc8>
   25dec:	str	fp, [r4, #40]	; 0x28
   25df0:	ldr	fp, [r6, #84]	; 0x54
   25df4:	mov	r2, r5
   25df8:	mov	r0, r4
   25dfc:	ldr	ip, [sp, #16]
   25e00:	ldr	r3, [sp, #12]
   25e04:	ldr	r1, [sp, #20]
   25e08:	str	ip, [r6, #84]	; 0x54
   25e0c:	ldr	ip, [sp, #112]	; 0x70
   25e10:	str	ip, [sp]
   25e14:	ldr	ip, [sp, #116]	; 0x74
   25e18:	str	ip, [sp, #4]
   25e1c:	bl	2587c <__assert_fail@plt+0x145d4>
   25e20:	ldr	r3, [sp, #116]	; 0x74
   25e24:	mov	sl, r0
   25e28:	ldr	r2, [r3]
   25e2c:	clz	r3, r0
   25e30:	lsr	r3, r3, #5
   25e34:	cmp	r2, #0
   25e38:	moveq	r3, #0
   25e3c:	cmp	r3, #0
   25e40:	bne	26628 <__assert_fail@plt+0x15380>
   25e44:	ldr	r3, [r6, #84]	; 0x54
   25e48:	orr	fp, r3, fp
   25e4c:	str	fp, [r6, #84]	; 0x54
   25e50:	mov	r2, #0
   25e54:	mov	r3, #0
   25e58:	strd	r2, [sp, #64]	; 0x40
   25e5c:	ldr	fp, [r6, #64]	; 0x40
   25e60:	cmp	fp, #31
   25e64:	beq	25f90 <__assert_fail@plt+0x14ce8>
   25e68:	ldr	r0, [r6, #56]	; 0x38
   25e6c:	lsl	r3, fp, #5
   25e70:	add	fp, fp, #1
   25e74:	add	ip, r3, #4
   25e78:	add	r2, r0, r3
   25e7c:	mov	lr, #0
   25e80:	str	fp, [r6, #64]	; 0x40
   25e84:	mov	fp, #10
   25e88:	add	r3, r3, #16
   25e8c:	str	lr, [r2, #4]
   25e90:	add	r3, r0, r3
   25e94:	cmp	r7, lr
   25e98:	str	r7, [r2, #8]
   25e9c:	add	r0, r0, ip
   25ea0:	mvn	ip, #0
   25ea4:	str	sl, [r2, #12]
   25ea8:	strb	fp, [sp, #68]	; 0x44
   25eac:	ldrd	r8, [sp, #64]	; 0x40
   25eb0:	strd	r8, [r2, #24]
   25eb4:	ldrb	fp, [r3, #14]
   25eb8:	bic	fp, fp, #12
   25ebc:	strb	fp, [r3, #14]
   25ec0:	str	lr, [r2, #16]
   25ec4:	str	lr, [r2, #20]
   25ec8:	str	ip, [r2, #32]
   25ecc:	strne	r0, [r7]
   25ed0:	cmp	sl, #0
   25ed4:	beq	25f00 <__assert_fail@plt+0x14c58>
   25ed8:	cmp	r0, #0
   25edc:	str	r0, [sl]
   25ee0:	beq	25f08 <__assert_fail@plt+0x14c60>
   25ee4:	mov	r7, r0
   25ee8:	b	25b5c <__assert_fail@plt+0x148b4>
   25eec:	mov	r3, #2
   25ef0:	mov	sl, #0
   25ef4:	strb	r3, [r5, #4]
   25ef8:	str	r0, [r4, #40]	; 0x28
   25efc:	b	25e50 <__assert_fail@plt+0x14ba8>
   25f00:	cmp	r0, #0
   25f04:	bne	25ee4 <__assert_fail@plt+0x14c3c>
   25f08:	ldr	r9, [sp, #116]	; 0x74
   25f0c:	mov	r3, #12
   25f10:	mov	r7, #0
   25f14:	str	r3, [r9]
   25f18:	mov	r0, r7
   25f1c:	add	sp, sp, #76	; 0x4c
   25f20:	ldrd	r4, [sp]
   25f24:	ldrd	r6, [sp, #8]
   25f28:	ldrd	r8, [sp, #16]
   25f2c:	ldrd	sl, [sp, #24]
   25f30:	add	sp, sp, #32
   25f34:	pop	{pc}		; (ldr pc, [sp], #4)
   25f38:	cmp	sl, #92	; 0x5c
   25f3c:	beq	25f74 <__assert_fail@plt+0x14ccc>
   25f40:	mov	r2, #1
   25f44:	strb	r2, [r5, #4]
   25f48:	bl	11170 <__ctype_b_loc@plt>
   25f4c:	ldr	r0, [r0]
   25f50:	lsl	r2, sl, #1
   25f54:	ldrb	r1, [r5, #6]
   25f58:	ldrh	r2, [r0, r2]
   25f5c:	ubfx	r2, r2, #3, #1
   25f60:	cmp	sl, #95	; 0x5f
   25f64:	orreq	r2, r2, #1
   25f68:	bfi	r1, r2, #6, #1
   25f6c:	strb	r1, [r5, #6]
   25f70:	b	25c00 <__assert_fail@plt+0x14958>
   25f74:	ldr	r3, [r4, #48]	; 0x30
   25f78:	cmp	r3, fp
   25f7c:	bgt	25fbc <__assert_fail@plt+0x14d14>
   25f80:	mov	r3, #36	; 0x24
   25f84:	strb	r3, [r5, #4]
   25f88:	str	fp, [r4, #40]	; 0x28
   25f8c:	b	25df0 <__assert_fail@plt+0x14b48>
   25f90:	mov	r0, #996	; 0x3e4
   25f94:	bl	2ab48 <__assert_fail@plt+0x198a0>
   25f98:	cmp	r0, #0
   25f9c:	beq	25f08 <__assert_fail@plt+0x14c60>
   25fa0:	ldr	r2, [r6, #56]	; 0x38
   25fa4:	mov	fp, #1
   25fa8:	mov	ip, #4
   25fac:	mov	r3, #0
   25fb0:	str	r2, [r0]
   25fb4:	str	r0, [r6, #56]	; 0x38
   25fb8:	b	25e78 <__assert_fail@plt+0x14bd0>
   25fbc:	ldrb	r3, [r4, #75]	; 0x4b
   25fc0:	add	r0, r0, #2
   25fc4:	mov	r8, r0
   25fc8:	cmp	r3, #0
   25fcc:	bne	265c4 <__assert_fail@plt+0x1531c>
   25fd0:	ldrb	sl, [r1, fp]
   25fd4:	mov	r1, #1
   25fd8:	strb	sl, [r5]
   25fdc:	cmp	r2, r1
   25fe0:	strb	r1, [r5, #4]
   25fe4:	ble	2621c <__assert_fail@plt+0x14f74>
   25fe8:	ldr	r0, [r4, #8]
   25fec:	add	r0, r0, fp, lsl #2
   25ff0:	ldr	fp, [r0]
   25ff4:	mov	r0, fp
   25ff8:	sub	fp, fp, #95	; 0x5f
   25ffc:	bl	111ac <iswalnum@plt>
   26000:	ldrb	r2, [r5, #6]
   26004:	clz	fp, fp
   26008:	cmp	r0, #0
   2600c:	lsr	fp, fp, #5
   26010:	movne	fp, #1
   26014:	bfi	r2, fp, #6, #1
   26018:	strb	r2, [r5, #6]
   2601c:	sub	r2, sl, #39	; 0x27
   26020:	cmp	r2, #86	; 0x56
   26024:	ldrls	pc, [pc, r2, lsl #2]
   26028:	b	261c0 <__assert_fail@plt+0x14f18>
   2602c:	andeq	r6, r2, r4, lsl #11
   26030:	andeq	r6, r2, r8, lsr #11
   26034:	andeq	r6, r2, ip, lsl #7
   26038:	andeq	r6, r2, r0, asr #3
   2603c:	andeq	r6, r2, ip, lsr #7
   26040:	andeq	r6, r2, r0, asr #3
   26044:	andeq	r6, r2, r0, asr #3
   26048:	andeq	r6, r2, r0, asr #3
   2604c:	andeq	r6, r2, r0, asr #3
   26050:	andeq	r6, r2, r0, asr #3
   26054:	andeq	r6, r2, r8, asr #7
   26058:	andeq	r6, r2, r8, asr #7
   2605c:	andeq	r6, r2, r8, asr #7
   26060:	andeq	r6, r2, r8, asr #7
   26064:	andeq	r6, r2, r8, asr #7
   26068:	andeq	r6, r2, r8, asr #7
   2606c:	andeq	r6, r2, r8, asr #7
   26070:	andeq	r6, r2, r8, asr #7
   26074:	andeq	r6, r2, r8, asr #7
   26078:	andeq	r6, r2, r0, asr #3
   2607c:	andeq	r6, r2, r0, asr #3
   26080:	andeq	r6, r2, ip, ror #7
   26084:	andeq	r6, r2, r0, asr #3
   26088:	andeq	r6, r2, r0, lsl r4
   2608c:	andeq	r6, r2, r4, lsr r4
   26090:	andeq	r6, r2, r0, asr #3
   26094:	andeq	r6, r2, r0, asr #3
   26098:	andeq	r6, r2, r0, asr r4
   2609c:	andeq	r6, r2, r0, asr #3
   260a0:	andeq	r6, r2, r0, asr #3
   260a4:	andeq	r6, r2, r0, asr #3
   260a8:	andeq	r6, r2, r0, asr #3
   260ac:	andeq	r6, r2, r0, asr #3
   260b0:	andeq	r6, r2, r0, asr #3
   260b4:	andeq	r6, r2, r0, asr #3
   260b8:	andeq	r6, r2, r0, asr #3
   260bc:	andeq	r6, r2, r0, asr #3
   260c0:	andeq	r6, r2, r0, asr #3
   260c4:	andeq	r6, r2, r0, asr #3
   260c8:	andeq	r6, r2, r0, asr #3
   260cc:	andeq	r6, r2, r0, asr #3
   260d0:	andeq	r6, r2, r0, asr #3
   260d4:	andeq	r6, r2, r0, asr #3
   260d8:	andeq	r6, r2, r0, asr #3
   260dc:	andeq	r6, r2, r4, ror r4
   260e0:	andeq	r6, r2, r0, asr #3
   260e4:	andeq	r6, r2, r0, asr #3
   260e8:	andeq	r6, r2, r0, asr #3
   260ec:	muleq	r2, r0, r4
   260f0:	andeq	r6, r2, r0, asr #3
   260f4:	andeq	r6, r2, r0, asr #3
   260f8:	andeq	r6, r2, r0, asr #3
   260fc:	andeq	r6, r2, r0, asr #3
   26100:	andeq	r6, r2, r0, asr #3
   26104:	andeq	r6, r2, r0, asr #3
   26108:	andeq	r6, r2, r0, asr #3
   2610c:	andeq	r6, r2, r0, asr #3
   26110:	andeq	r6, r2, ip, lsr #9
   26114:	andeq	r6, r2, r0, asr #3
   26118:	ldrdeq	r6, [r2], -r0
   2611c:	andeq	r6, r2, r0, asr #3
   26120:	andeq	r6, r2, r0, asr #3
   26124:	andeq	r6, r2, r0, asr #3
   26128:	andeq	r6, r2, r0, asr #3
   2612c:	andeq	r6, r2, r0, asr #3
   26130:	andeq	r6, r2, r0, asr #3
   26134:	andeq	r6, r2, r0, asr #3
   26138:	andeq	r6, r2, r0, asr #3
   2613c:	andeq	r6, r2, r0, asr #3
   26140:	andeq	r6, r2, r0, asr #3
   26144:	andeq	r6, r2, r0, asr #3
   26148:	andeq	r6, r2, r0, asr #3
   2614c:	andeq	r6, r2, r0, asr #3
   26150:	andeq	r6, r2, r0, asr #3
   26154:	andeq	r6, r2, r0, asr #3
   26158:	andeq	r6, r2, r0, asr #3
   2615c:	strdeq	r6, [r2], -r4
   26160:	andeq	r6, r2, r0, asr #3
   26164:	andeq	r6, r2, r0, asr #3
   26168:	andeq	r6, r2, r0, asr #3
   2616c:	andeq	r6, r2, r0, lsl r5
   26170:	andeq	r6, r2, r0, asr #3
   26174:	andeq	r6, r2, r0, asr #3
   26178:	andeq	r6, r2, r0, asr #3
   2617c:	andeq	r6, r2, ip, lsr #10
   26180:	andeq	r6, r2, r8, asr #10
   26184:	andeq	r6, r2, r8, ror #10
   26188:	ldr	r3, [sp, #12]
   2618c:	mov	r1, r4
   26190:	add	r0, sp, #64	; 0x40
   26194:	str	fp, [r4, #40]	; 0x28
   26198:	orr	r2, r3, #8388608	; 0x800000
   2619c:	bl	19b80 <__assert_fail@plt+0x88d8>
   261a0:	ldrb	r3, [sp, #68]	; 0x44
   261a4:	ldr	fp, [r4, #40]	; 0x28
   261a8:	sub	r3, r3, #9
   261ac:	cmp	r3, #1
   261b0:	sub	r3, fp, #1
   261b4:	mov	r8, fp
   261b8:	str	r3, [r4, #40]	; 0x28
   261bc:	bls	2629c <__assert_fail@plt+0x14ff4>
   261c0:	ldrb	r3, [r5, #4]
   261c4:	str	r8, [r4, #40]	; 0x28
   261c8:	and	r2, r3, #247	; 0xf7
   261cc:	cmp	r2, #2
   261d0:	moveq	sl, #0
   261d4:	beq	25e50 <__assert_fail@plt+0x14ba8>
   261d8:	ldr	r2, [sp, #112]	; 0x70
   261dc:	clz	r1, r2
   261e0:	lsr	r1, r1, #5
   261e4:	cmp	r3, #9
   261e8:	orrne	r1, r1, #1
   261ec:	cmp	r1, #0
   261f0:	moveq	sl, r1
   261f4:	beq	25e50 <__assert_fail@plt+0x14ba8>
   261f8:	b	25df0 <__assert_fail@plt+0x14b48>
   261fc:	ldr	r3, [r5, #4]
   26200:	ldr	r2, [sp, #40]	; 0x28
   26204:	and	r3, r3, r2
   26208:	orr	r3, r3, #2097152	; 0x200000
   2620c:	orr	r3, r3, #1
   26210:	str	r3, [r5, #4]
   26214:	str	fp, [r4, #40]	; 0x28
   26218:	b	25df0 <__assert_fail@plt+0x14b48>
   2621c:	bl	11170 <__ctype_b_loc@plt>
   26220:	ldr	r0, [r0]
   26224:	lsl	r2, sl, #1
   26228:	ldrb	r1, [r5, #6]
   2622c:	ldrh	r2, [r0, r2]
   26230:	ubfx	r2, r2, #3, #1
   26234:	cmp	sl, #95	; 0x5f
   26238:	orreq	r2, r2, #1
   2623c:	bfi	r1, r2, #6, #1
   26240:	strb	r1, [r5, #6]
   26244:	b	2601c <__assert_fail@plt+0x14d74>
   26248:	ldr	r3, [sp, #36]	; 0x24
   2624c:	cmp	r3, #4608	; 0x1200
   26250:	moveq	r3, #24
   26254:	strbeq	r3, [r5, #4]
   26258:	streq	fp, [r4, #40]	; 0x28
   2625c:	bne	25dec <__assert_fail@plt+0x14b44>
   26260:	b	25df0 <__assert_fail@plt+0x14b48>
   26264:	ldr	r3, [sp, #56]	; 0x38
   26268:	cmp	r3, #0
   2626c:	beq	25dec <__assert_fail@plt+0x14b44>
   26270:	mov	r3, #10
   26274:	mov	sl, #0
   26278:	strb	r3, [r5, #4]
   2627c:	str	fp, [r4, #40]	; 0x28
   26280:	b	25e50 <__assert_fail@plt+0x14ba8>
   26284:	ldr	r3, [sp, #52]	; 0x34
   26288:	cmp	r3, #0
   2628c:	bne	2629c <__assert_fail@plt+0x14ff4>
   26290:	ldr	r3, [r4, #48]	; 0x30
   26294:	cmp	r3, fp
   26298:	bne	26188 <__assert_fail@plt+0x14ee0>
   2629c:	mov	r3, #12
   262a0:	mov	r2, #32
   262a4:	str	r2, [r5]
   262a8:	strb	r3, [r5, #4]
   262ac:	str	fp, [r4, #40]	; 0x28
   262b0:	b	25df0 <__assert_fail@plt+0x14b48>
   262b4:	ldr	r3, [sp, #28]
   262b8:	cmp	r3, #0
   262bc:	beq	25dec <__assert_fail@plt+0x14b44>
   262c0:	mov	r3, #8
   262c4:	strb	r3, [r5, #4]
   262c8:	str	fp, [r4, #40]	; 0x28
   262cc:	b	25df0 <__assert_fail@plt+0x14b48>
   262d0:	ldr	r3, [sp, #28]
   262d4:	cmp	r3, #0
   262d8:	beq	25dec <__assert_fail@plt+0x14b44>
   262dc:	mov	r3, #9
   262e0:	strb	r3, [r5, #4]
   262e4:	mov	r3, #9
   262e8:	str	fp, [r4, #40]	; 0x28
   262ec:	b	261d8 <__assert_fail@plt+0x14f30>
   262f0:	mov	r3, #11
   262f4:	strb	r3, [r5, #4]
   262f8:	str	fp, [r4, #40]	; 0x28
   262fc:	b	25df0 <__assert_fail@plt+0x14b48>
   26300:	ldr	r3, [sp, #32]
   26304:	cmp	r3, #0
   26308:	bne	25dec <__assert_fail@plt+0x14b44>
   2630c:	mov	r3, #18
   26310:	strb	r3, [r5, #4]
   26314:	str	fp, [r4, #40]	; 0x28
   26318:	b	25df0 <__assert_fail@plt+0x14b48>
   2631c:	mov	r3, #5
   26320:	strb	r3, [r5, #4]
   26324:	str	fp, [r4, #40]	; 0x28
   26328:	b	25df0 <__assert_fail@plt+0x14b48>
   2632c:	ldr	r3, [sp, #32]
   26330:	cmp	r3, #0
   26334:	bne	25dec <__assert_fail@plt+0x14b44>
   26338:	mov	r3, #19
   2633c:	strb	r3, [r5, #4]
   26340:	str	fp, [r4, #40]	; 0x28
   26344:	b	25df0 <__assert_fail@plt+0x14b48>
   26348:	mov	r3, #20
   2634c:	strb	r3, [r5, #4]
   26350:	str	fp, [r4, #40]	; 0x28
   26354:	b	25df0 <__assert_fail@plt+0x14b48>
   26358:	mov	r3, #12
   2635c:	mov	r2, #16
   26360:	str	r2, [r5]
   26364:	strb	r3, [r5, #4]
   26368:	str	fp, [r4, #40]	; 0x28
   2636c:	b	25df0 <__assert_fail@plt+0x14b48>
   26370:	ldr	r3, [sp, #36]	; 0x24
   26374:	cmp	r3, #4608	; 0x1200
   26378:	bne	25dec <__assert_fail@plt+0x14b44>
   2637c:	mov	r3, #23
   26380:	strb	r3, [r5, #4]
   26384:	str	fp, [r4, #40]	; 0x28
   26388:	b	25df0 <__assert_fail@plt+0x14b48>
   2638c:	ldr	r3, [sp, #28]
   26390:	cmp	r3, #0
   26394:	bne	261c0 <__assert_fail@plt+0x14f18>
   26398:	mov	r3, #9
   2639c:	strb	r3, [r5, #4]
   263a0:	mov	r3, #9
   263a4:	str	r8, [r4, #40]	; 0x28
   263a8:	b	261d8 <__assert_fail@plt+0x14f30>
   263ac:	ldr	r3, [sp, #32]
   263b0:	cmp	r3, #2
   263b4:	bne	261c0 <__assert_fail@plt+0x14f18>
   263b8:	mov	r3, #18
   263bc:	strb	r3, [r5, #4]
   263c0:	str	r8, [r4, #40]	; 0x28
   263c4:	b	25df0 <__assert_fail@plt+0x14b48>
   263c8:	ldr	r3, [sp, #60]	; 0x3c
   263cc:	cmp	r3, #0
   263d0:	bne	261c0 <__assert_fail@plt+0x14f18>
   263d4:	sub	r3, sl, #49	; 0x31
   263d8:	mov	r2, #4
   263dc:	str	r3, [r5]
   263e0:	strb	r2, [r5, #4]
   263e4:	str	r8, [r4, #40]	; 0x28
   263e8:	b	25df0 <__assert_fail@plt+0x14b48>
   263ec:	ldr	r3, [sp, #48]	; 0x30
   263f0:	cmp	r3, #0
   263f4:	bne	261c0 <__assert_fail@plt+0x14f18>
   263f8:	mov	r3, #12
   263fc:	mov	r2, #6
   26400:	str	r2, [r5]
   26404:	strb	r3, [r5, #4]
   26408:	str	r8, [r4, #40]	; 0x28
   2640c:	b	25df0 <__assert_fail@plt+0x14b48>
   26410:	ldr	r3, [sp, #48]	; 0x30
   26414:	cmp	r3, #0
   26418:	bne	261c0 <__assert_fail@plt+0x14f18>
   2641c:	mov	r3, #12
   26420:	mov	r2, #9
   26424:	str	r2, [r5]
   26428:	strb	r3, [r5, #4]
   2642c:	str	r8, [r4, #40]	; 0x28
   26430:	b	25df0 <__assert_fail@plt+0x14b48>
   26434:	ldr	r3, [sp, #32]
   26438:	cmp	r3, #2
   2643c:	bne	261c0 <__assert_fail@plt+0x14f18>
   26440:	mov	r3, #19
   26444:	strb	r3, [r5, #4]
   26448:	str	r8, [r4, #40]	; 0x28
   2644c:	b	25df0 <__assert_fail@plt+0x14b48>
   26450:	ldr	r3, [sp, #48]	; 0x30
   26454:	cmp	r3, #0
   26458:	bne	261c0 <__assert_fail@plt+0x14f18>
   2645c:	mov	r3, #12
   26460:	mov	r2, #512	; 0x200
   26464:	str	r2, [r5]
   26468:	strb	r3, [r5, #4]
   2646c:	str	r8, [r4, #40]	; 0x28
   26470:	b	25df0 <__assert_fail@plt+0x14b48>
   26474:	ldr	r3, [sp, #48]	; 0x30
   26478:	cmp	r3, #0
   2647c:	bne	261c0 <__assert_fail@plt+0x14f18>
   26480:	mov	r3, #35	; 0x23
   26484:	strb	r3, [r5, #4]
   26488:	str	r8, [r4, #40]	; 0x28
   2648c:	b	25df0 <__assert_fail@plt+0x14b48>
   26490:	ldr	r3, [sp, #48]	; 0x30
   26494:	cmp	r3, #0
   26498:	bne	261c0 <__assert_fail@plt+0x14f18>
   2649c:	mov	r3, #33	; 0x21
   264a0:	strb	r3, [r5, #4]
   264a4:	str	r8, [r4, #40]	; 0x28
   264a8:	b	25df0 <__assert_fail@plt+0x14b48>
   264ac:	ldr	r3, [sp, #48]	; 0x30
   264b0:	cmp	r3, #0
   264b4:	bne	261c0 <__assert_fail@plt+0x14f18>
   264b8:	mov	r3, #12
   264bc:	mov	r2, #64	; 0x40
   264c0:	str	r2, [r5]
   264c4:	strb	r3, [r5, #4]
   264c8:	str	r8, [r4, #40]	; 0x28
   264cc:	b	25df0 <__assert_fail@plt+0x14b48>
   264d0:	ldr	r3, [sp, #48]	; 0x30
   264d4:	cmp	r3, #0
   264d8:	bne	261c0 <__assert_fail@plt+0x14f18>
   264dc:	mov	r3, #12
   264e0:	mov	r2, #256	; 0x100
   264e4:	str	r2, [r5]
   264e8:	strb	r3, [r5, #4]
   264ec:	str	r8, [r4, #40]	; 0x28
   264f0:	b	25df0 <__assert_fail@plt+0x14b48>
   264f4:	ldr	r3, [sp, #48]	; 0x30
   264f8:	cmp	r3, #0
   264fc:	bne	261c0 <__assert_fail@plt+0x14f18>
   26500:	mov	r3, #34	; 0x22
   26504:	strb	r3, [r5, #4]
   26508:	str	r8, [r4, #40]	; 0x28
   2650c:	b	25df0 <__assert_fail@plt+0x14b48>
   26510:	ldr	r3, [sp, #48]	; 0x30
   26514:	cmp	r3, #0
   26518:	bne	261c0 <__assert_fail@plt+0x14f18>
   2651c:	mov	r3, #32
   26520:	strb	r3, [r5, #4]
   26524:	str	r8, [r4, #40]	; 0x28
   26528:	b	25df0 <__assert_fail@plt+0x14b48>
   2652c:	ldr	r3, [sp, #36]	; 0x24
   26530:	cmp	r3, #512	; 0x200
   26534:	bne	261c0 <__assert_fail@plt+0x14f18>
   26538:	mov	r3, #23
   2653c:	strb	r3, [r5, #4]
   26540:	str	r8, [r4, #40]	; 0x28
   26544:	b	25df0 <__assert_fail@plt+0x14b48>
   26548:	ldr	r3, [sp, #44]	; 0x2c
   2654c:	cmp	r3, #0
   26550:	bne	261c0 <__assert_fail@plt+0x14f18>
   26554:	mov	sl, r3
   26558:	mov	r3, #10
   2655c:	strb	r3, [r5, #4]
   26560:	str	r8, [r4, #40]	; 0x28
   26564:	b	25e50 <__assert_fail@plt+0x14ba8>
   26568:	ldr	r3, [sp, #36]	; 0x24
   2656c:	cmp	r3, #512	; 0x200
   26570:	bne	261c0 <__assert_fail@plt+0x14f18>
   26574:	mov	r3, #24
   26578:	strb	r3, [r5, #4]
   2657c:	str	r8, [r4, #40]	; 0x28
   26580:	b	25df0 <__assert_fail@plt+0x14b48>
   26584:	ldr	r3, [sp, #48]	; 0x30
   26588:	cmp	r3, #0
   2658c:	bne	261c0 <__assert_fail@plt+0x14f18>
   26590:	mov	r3, #12
   26594:	mov	r2, #128	; 0x80
   26598:	str	r2, [r5]
   2659c:	strb	r3, [r5, #4]
   265a0:	str	r8, [r4, #40]	; 0x28
   265a4:	b	25df0 <__assert_fail@plt+0x14b48>
   265a8:	ldr	r3, [sp, #28]
   265ac:	cmp	r3, #0
   265b0:	bne	261c0 <__assert_fail@plt+0x14f18>
   265b4:	mov	r3, #8
   265b8:	strb	r3, [r5, #4]
   265bc:	str	r8, [r4, #40]	; 0x28
   265c0:	b	25df0 <__assert_fail@plt+0x14b48>
   265c4:	cmp	r2, #1
   265c8:	ble	265f8 <__assert_fail@plt+0x15350>
   265cc:	ldr	r0, [r4, #8]
   265d0:	ldr	r3, [r0, fp, lsl #2]
   265d4:	add	r0, r0, fp, lsl #2
   265d8:	cmn	r3, #1
   265dc:	beq	26654 <__assert_fail@plt+0x153ac>
   265e0:	ldr	r3, [r4, #28]
   265e4:	cmp	r3, r8
   265e8:	beq	265f8 <__assert_fail@plt+0x15350>
   265ec:	ldr	r3, [r0, #4]
   265f0:	cmn	r3, #1
   265f4:	beq	26654 <__assert_fail@plt+0x153ac>
   265f8:	ldrb	ip, [r4, #76]	; 0x4c
   265fc:	ldr	r0, [r4]
   26600:	ldr	r3, [r4, #24]
   26604:	cmp	ip, #0
   26608:	beq	26648 <__assert_fail@plt+0x153a0>
   2660c:	ldr	ip, [r4, #12]
   26610:	add	r3, r0, r3
   26614:	ldr	r0, [ip, fp, lsl #2]
   26618:	ldrb	sl, [r3, r0]
   2661c:	tst	sl, #128	; 0x80
   26620:	beq	25fd4 <__assert_fail@plt+0x14d2c>
   26624:	b	25fd0 <__assert_fail@plt+0x14d28>
   26628:	cmp	r7, #0
   2662c:	beq	26640 <__assert_fail@plt+0x15398>
   26630:	mov	r0, r7
   26634:	mov	r7, #0
   26638:	bl	1adec <__assert_fail@plt+0x9b44>
   2663c:	b	25f18 <__assert_fail@plt+0x14c70>
   26640:	mov	r7, #0
   26644:	b	25f18 <__assert_fail@plt+0x14c70>
   26648:	add	r0, r0, fp
   2664c:	ldrb	sl, [r0, r3]
   26650:	b	25fd4 <__assert_fail@plt+0x14d2c>
   26654:	ldrb	sl, [r1, fp]
   26658:	mov	r2, #1
   2665c:	strb	sl, [r5]
   26660:	strb	r2, [r5, #4]
   26664:	b	25ff0 <__assert_fail@plt+0x14d48>
   26668:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2666c:	mov	r5, r2
   26670:	strd	r6, [sp, #8]
   26674:	mov	r6, r0
   26678:	mov	r7, r3
   2667c:	ldrb	r3, [r0, #28]
   26680:	mov	r0, #0
   26684:	strd	r8, [sp, #16]
   26688:	mov	r8, r1
   2668c:	strd	sl, [sp, #24]
   26690:	ldr	r2, [r6, #4]
   26694:	str	lr, [sp, #32]
   26698:	sub	sp, sp, #148	; 0x94
   2669c:	bic	r3, r3, #111	; 0x6f
   266a0:	str	r0, [r6, #8]
   266a4:	str	r7, [r6, #12]
   266a8:	str	r0, [r6, #24]
   266ac:	cmp	r2, #159	; 0x9f
   266b0:	strb	r3, [r6, #28]
   266b4:	str	r0, [sp, #36]	; 0x24
   266b8:	ldr	r4, [r6]
   266bc:	bls	279bc <__assert_fail@plt+0x16714>
   266c0:	mov	r3, #160	; 0xa0
   266c4:	mov	r1, #0
   266c8:	mov	r2, r3
   266cc:	mov	r0, r4
   266d0:	str	r3, [r6, #8]
   266d4:	bl	111c4 <memset@plt>
   266d8:	movw	r3, #43689	; 0xaaa9
   266dc:	movt	r3, #2730	; 0xaaa
   266e0:	mov	r2, #31
   266e4:	cmp	r5, r3
   266e8:	str	r2, [r4, #64]	; 0x40
   266ec:	bhi	26ec4 <__assert_fail@plt+0x15c1c>
   266f0:	add	r9, r5, #1
   266f4:	lsl	r0, r9, #3
   266f8:	str	r9, [r4, #4]
   266fc:	bl	2ab48 <__assert_fail@plt+0x198a0>
   26700:	cmp	r5, #0
   26704:	str	r0, [r4]
   26708:	beq	279e0 <__assert_fail@plt+0x16738>
   2670c:	mov	r1, #1
   26710:	lsl	r1, r1, #1
   26714:	cmp	r5, r1
   26718:	bcs	26710 <__assert_fail@plt+0x15468>
   2671c:	sub	sl, r1, #1
   26720:	mov	r0, #12
   26724:	bl	2aad4 <__assert_fail@plt+0x1982c>
   26728:	str	r0, [r4, #32]
   2672c:	str	sl, [r4, #68]	; 0x44
   26730:	bl	110e0 <__ctype_get_mb_cur_max@plt>
   26734:	str	r0, [r4, #92]	; 0x5c
   26738:	mov	r0, #14
   2673c:	bl	11248 <nl_langinfo@plt>
   26740:	ldrb	r3, [r0]
   26744:	and	r3, r3, #223	; 0xdf
   26748:	cmp	r3, #85	; 0x55
   2674c:	bne	267a4 <__assert_fail@plt+0x154fc>
   26750:	ldrb	r3, [r0, #1]
   26754:	and	r3, r3, #223	; 0xdf
   26758:	cmp	r3, #84	; 0x54
   2675c:	bne	267a4 <__assert_fail@plt+0x154fc>
   26760:	ldrb	r3, [r0, #2]
   26764:	and	r3, r3, #223	; 0xdf
   26768:	cmp	r3, #70	; 0x46
   2676c:	bne	267a4 <__assert_fail@plt+0x154fc>
   26770:	ldrb	r3, [r0, #3]
   26774:	movw	r1, #49160	; 0xc008
   26778:	movt	r1, #2
   2677c:	cmp	r3, #45	; 0x2d
   26780:	moveq	r3, #4
   26784:	movne	r3, #3
   26788:	add	r0, r0, r3
   2678c:	bl	10fd8 <strcmp@plt>
   26790:	cmp	r0, #0
   26794:	bne	267a4 <__assert_fail@plt+0x154fc>
   26798:	ldrb	r3, [r4, #88]	; 0x58
   2679c:	orr	r3, r3, #4
   267a0:	strb	r3, [r4, #88]	; 0x58
   267a4:	ldrb	r3, [r4, #88]	; 0x58
   267a8:	ldr	r2, [r4, #92]	; 0x5c
   267ac:	bfc	r3, #3, #1
   267b0:	cmp	r2, #1
   267b4:	strb	r3, [r4, #88]	; 0x58
   267b8:	ble	267d4 <__assert_fail@plt+0x1552c>
   267bc:	uxtb	sl, r3
   267c0:	ands	sl, sl, #4
   267c4:	beq	26f20 <__assert_fail@plt+0x15c78>
   267c8:	movw	r3, #48576	; 0xbdc0
   267cc:	movt	r3, #2
   267d0:	str	r3, [r4, #60]	; 0x3c
   267d4:	ldr	r3, [r4]
   267d8:	cmp	r3, #0
   267dc:	beq	26ec4 <__assert_fail@plt+0x15c1c>
   267e0:	ldr	r3, [r4, #32]
   267e4:	cmp	r3, #0
   267e8:	beq	26ec4 <__assert_fail@plt+0x15c1c>
   267ec:	mov	r1, #0
   267f0:	movw	r2, #0
   267f4:	movt	r2, #0
   267f8:	mov	r3, #1
   267fc:	cmp	r2, r1
   26800:	str	r1, [sp, #36]	; 0x24
   26804:	mov	r1, #1
   26808:	moveq	r3, r2
   2680c:	movw	r2, #0
   26810:	movt	r2, #0
   26814:	cmp	r2, #0
   26818:	moveq	r1, r2
   2681c:	orr	r3, r3, r1
   26820:	ands	r3, r3, #255	; 0xff
   26824:	str	r3, [sp, #16]
   26828:	beq	2684c <__assert_fail@plt+0x155a4>
   2682c:	mov	r1, #0
   26830:	add	r0, r4, #136	; 0x88
   26834:	bl	11044 <pthread_mutex_init@plt>
   26838:	cmp	r0, #0
   2683c:	bne	26ec4 <__assert_fail@plt+0x15c1c>
   26840:	ldr	r3, [sp, #36]	; 0x24
   26844:	cmp	r3, #0
   26848:	bne	26ecc <__assert_fail@plt+0x15c24>
   2684c:	and	r3, r7, #4194304	; 0x400000
   26850:	mov	r2, #76	; 0x4c
   26854:	ldr	sl, [r6, #20]
   26858:	mov	r1, #0
   2685c:	add	r0, sp, #64	; 0x40
   26860:	mov	fp, r3
   26864:	str	r3, [sp, #12]
   26868:	bl	111c4 <memset@plt>
   2686c:	ldrb	r3, [r4, #88]	; 0x58
   26870:	adds	ip, fp, #0
   26874:	orr	fp, sl, fp
   26878:	movne	ip, #1
   2687c:	str	r8, [sp, #60]	; 0x3c
   26880:	ldr	r1, [r4, #92]	; 0x5c
   26884:	adds	r2, fp, #0
   26888:	movne	r2, #1
   2688c:	cmp	r5, #0
   26890:	str	r5, [sp, #104]	; 0x68
   26894:	str	r5, [sp, #108]	; 0x6c
   26898:	ubfx	r0, r3, #2, #1
   2689c:	str	r5, [sp, #112]	; 0x70
   268a0:	ubfx	r3, r3, #3, #1
   268a4:	str	r5, [sp, #116]	; 0x74
   268a8:	str	sl, [sp, #124]	; 0x7c
   268ac:	strb	ip, [sp, #132]	; 0x84
   268b0:	strb	r0, [sp, #133]	; 0x85
   268b4:	strb	r3, [sp, #134]	; 0x86
   268b8:	strb	r2, [sp, #135]	; 0x87
   268bc:	str	r1, [sp, #140]	; 0x8c
   268c0:	bne	26f00 <__assert_fail@plt+0x15c58>
   268c4:	cmp	r2, #0
   268c8:	ldr	r3, [sp, #12]
   268cc:	ldrne	r8, [sp, #64]	; 0x40
   268d0:	cmp	r3, #0
   268d4:	str	r8, [sp, #64]	; 0x40
   268d8:	beq	269a4 <__assert_fail@plt+0x156fc>
   268dc:	cmp	r1, #1
   268e0:	ble	27930 <__assert_fail@plt+0x16688>
   268e4:	add	r0, sp, #60	; 0x3c
   268e8:	bl	16fe0 <__assert_fail@plt+0x5d38>
   268ec:	cmp	r0, #0
   268f0:	bne	2692c <__assert_fail@plt+0x15684>
   268f4:	ldr	r3, [sp, #92]	; 0x5c
   268f8:	cmp	r5, r3
   268fc:	ble	27a5c <__assert_fail@plt+0x167b4>
   26900:	ldr	r3, [sp, #88]	; 0x58
   26904:	ldr	r2, [r4, #92]	; 0x5c
   26908:	ldr	r1, [sp, #96]	; 0x60
   2690c:	add	r3, r3, r2
   26910:	cmp	r1, r3
   26914:	bgt	27a5c <__assert_fail@plt+0x167b4>
   26918:	lsl	r1, r1, #1
   2691c:	add	r0, sp, #60	; 0x3c
   26920:	bl	16bfc <__assert_fail@plt+0x5954>
   26924:	cmp	r0, #0
   26928:	beq	268e4 <__assert_fail@plt+0x1563c>
   2692c:	ldr	r5, [r6]
   26930:	str	r0, [sp, #36]	; 0x24
   26934:	ldr	r0, [r5, #56]	; 0x38
   26938:	cmp	r0, #0
   2693c:	beq	26950 <__assert_fail@plt+0x156a8>
   26940:	ldr	r7, [r0]
   26944:	bl	2ad30 <__assert_fail@plt+0x19a88>
   26948:	subs	r0, r7, #0
   2694c:	bne	26940 <__assert_fail@plt+0x15698>
   26950:	mov	r3, #31
   26954:	mov	r7, #0
   26958:	ldr	r0, [r5, #16]
   2695c:	str	r7, [r5, #52]	; 0x34
   26960:	str	r7, [r5, #56]	; 0x38
   26964:	str	r3, [r5, #64]	; 0x40
   26968:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2696c:	str	r7, [r5, #16]
   26970:	ldr	r0, [sp, #68]	; 0x44
   26974:	bl	2ad30 <__assert_fail@plt+0x19a88>
   26978:	ldr	r0, [sp, #72]	; 0x48
   2697c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   26980:	ldrb	r3, [sp, #135]	; 0x87
   26984:	cmp	r3, r7
   26988:	bne	279f8 <__assert_fail@plt+0x16750>
   2698c:	ldr	r3, [sp, #16]
   26990:	cmp	r3, #0
   26994:	beq	26ecc <__assert_fail@plt+0x15c24>
   26998:	add	r0, r4, #136	; 0x88
   2699c:	bl	10ff0 <pthread_mutex_destroy@plt>
   269a0:	b	26ecc <__assert_fail@plt+0x15c24>
   269a4:	cmp	r1, #1
   269a8:	bgt	27834 <__assert_fail@plt+0x1658c>
   269ac:	cmp	fp, #0
   269b0:	ldr	r1, [sp, #96]	; 0x60
   269b4:	beq	26fd0 <__assert_fail@plt+0x15d28>
   269b8:	ldr	r3, [sp, #88]	; 0x58
   269bc:	ldr	r2, [sp, #108]	; 0x6c
   269c0:	cmp	r1, r2
   269c4:	movge	r1, r2
   269c8:	cmp	r1, r3
   269cc:	ble	27ba0 <__assert_fail@plt+0x168f8>
   269d0:	ldr	r0, [sp, #60]	; 0x3c
   269d4:	add	r2, r3, #1
   269d8:	cmp	r1, r2
   269dc:	ldr	lr, [sp, #84]	; 0x54
   269e0:	ldr	ip, [sp, #124]	; 0x7c
   269e4:	add	r0, r0, r3
   269e8:	ldrb	r0, [r0, lr]
   269ec:	ldrb	r0, [ip, r0]
   269f0:	strb	r0, [r8, r3]
   269f4:	ble	26a24 <__assert_fail@plt+0x1577c>
   269f8:	ldr	r3, [sp, #60]	; 0x3c
   269fc:	ldr	r0, [sp, #84]	; 0x54
   26a00:	ldr	ip, [sp, #124]	; 0x7c
   26a04:	add	r3, r3, r2
   26a08:	ldrb	r0, [r3, r0]
   26a0c:	ldr	r3, [sp, #64]	; 0x40
   26a10:	ldrb	r0, [ip, r0]
   26a14:	strb	r0, [r3, r2]
   26a18:	add	r2, r2, #1
   26a1c:	cmp	r1, r2
   26a20:	bne	269f8 <__assert_fail@plt+0x15750>
   26a24:	mov	r3, #0
   26a28:	str	r3, [sp, #36]	; 0x24
   26a2c:	str	r1, [sp, #88]	; 0x58
   26a30:	str	r1, [sp, #92]	; 0x5c
   26a34:	ldr	r5, [r6]
   26a38:	mov	r8, #0
   26a3c:	orr	r2, r7, #8388608	; 0x800000
   26a40:	add	r1, sp, #60	; 0x3c
   26a44:	add	r0, sp, #40	; 0x28
   26a48:	str	r8, [r6, #24]
   26a4c:	str	r7, [r5, #128]	; 0x80
   26a50:	bl	19b80 <__assert_fail@plt+0x88d8>
   26a54:	ldr	ip, [sp, #100]	; 0x64
   26a58:	add	r1, sp, #36	; 0x24
   26a5c:	mov	r3, r7
   26a60:	add	r2, sp, #40	; 0x28
   26a64:	str	r8, [sp]
   26a68:	str	r1, [sp, #4]
   26a6c:	mov	r1, r6
   26a70:	add	ip, ip, r0
   26a74:	add	r0, sp, #60	; 0x3c
   26a78:	str	ip, [sp, #100]	; 0x64
   26a7c:	bl	25a98 <__assert_fail@plt+0x147f0>
   26a80:	ldr	sl, [sp, #36]	; 0x24
   26a84:	clz	r3, r0
   26a88:	mov	r9, r0
   26a8c:	lsr	r3, r3, #5
   26a90:	cmp	sl, r8
   26a94:	movne	sl, r3
   26a98:	moveq	sl, r8
   26a9c:	cmp	sl, r8
   26aa0:	bne	27bb8 <__assert_fail@plt+0x16910>
   26aa4:	mov	r2, #0
   26aa8:	mov	r3, #0
   26aac:	strd	r2, [sp, #48]	; 0x30
   26ab0:	ldr	r2, [r5, #64]	; 0x40
   26ab4:	cmp	r2, #31
   26ab8:	beq	27a28 <__assert_fail@plt+0x16780>
   26abc:	ldr	r7, [r5, #56]	; 0x38
   26ac0:	lsl	r3, r2, #5
   26ac4:	add	r2, r2, #1
   26ac8:	add	r0, r3, #4
   26acc:	add	ip, r7, r3
   26ad0:	mov	lr, #0
   26ad4:	str	r2, [r5, #64]	; 0x40
   26ad8:	mov	r2, #2
   26adc:	add	r3, r3, #16
   26ae0:	str	lr, [ip, #4]
   26ae4:	add	r1, r7, r3
   26ae8:	adds	r7, r7, r0
   26aec:	str	lr, [ip, #8]
   26af0:	mvn	r0, #0
   26af4:	moveq	r8, #1
   26af8:	str	lr, [ip, #12]
   26afc:	movne	r8, lr
   26b00:	cmp	r9, lr
   26b04:	strb	r2, [sp, #52]	; 0x34
   26b08:	ldrd	r2, [sp, #48]	; 0x30
   26b0c:	strd	r2, [ip, #24]
   26b10:	ldrb	r3, [r1, #14]
   26b14:	bic	r3, r3, #12
   26b18:	strb	r3, [r1, #14]
   26b1c:	str	lr, [ip, #16]
   26b20:	str	lr, [ip, #20]
   26b24:	str	r0, [ip, #32]
   26b28:	beq	26bbc <__assert_fail@plt+0x15914>
   26b2c:	mov	r3, #0
   26b30:	mov	r2, #0
   26b34:	strd	r2, [sp, #48]	; 0x30
   26b38:	ldr	r3, [r5, #64]	; 0x40
   26b3c:	cmp	r3, #31
   26b40:	beq	27b54 <__assert_fail@plt+0x168ac>
   26b44:	ldr	r0, [r5, #56]	; 0x38
   26b48:	lsl	r1, r3, #5
   26b4c:	add	r3, r3, #1
   26b50:	add	r2, r1, #4
   26b54:	add	ip, r0, r1
   26b58:	mov	lr, #0
   26b5c:	str	r3, [r5, #64]	; 0x40
   26b60:	mov	r3, #16
   26b64:	mvn	r5, #0
   26b68:	add	r1, r1, r3
   26b6c:	str	lr, [ip, #4]
   26b70:	str	r9, [ip, #8]
   26b74:	add	r1, r0, r1
   26b78:	add	r0, r0, r2
   26b7c:	str	r7, [ip, #12]
   26b80:	cmp	r0, lr
   26b84:	orreq	r8, r8, #1
   26b88:	cmp	r7, lr
   26b8c:	strb	r3, [sp, #52]	; 0x34
   26b90:	ldrd	r2, [sp, #48]	; 0x30
   26b94:	strd	r2, [ip, #24]
   26b98:	ldrb	r3, [r1, #14]
   26b9c:	bic	r3, r3, #12
   26ba0:	strb	r3, [r1, #14]
   26ba4:	str	lr, [ip, #16]
   26ba8:	str	lr, [ip, #20]
   26bac:	str	r5, [ip, #32]
   26bb0:	str	r0, [r9]
   26bb4:	strne	r0, [r7]
   26bb8:	mov	r7, r0
   26bbc:	cmp	r8, #0
   26bc0:	ldr	r5, [r6]
   26bc4:	bne	27a14 <__assert_fail@plt+0x1676c>
   26bc8:	ldr	r0, [r5, #4]
   26bcc:	str	r7, [r4, #52]	; 0x34
   26bd0:	lsl	r0, r0, #2
   26bd4:	bl	2ab48 <__assert_fail@plt+0x198a0>
   26bd8:	ldr	r3, [r5, #4]
   26bdc:	str	r0, [r5, #12]
   26be0:	lsl	r0, r3, #2
   26be4:	bl	2ab48 <__assert_fail@plt+0x198a0>
   26be8:	ldr	r3, [r5, #4]
   26bec:	str	r0, [r5, #16]
   26bf0:	add	r3, r3, r3, lsl #1
   26bf4:	lsl	r0, r3, #2
   26bf8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   26bfc:	ldr	r3, [r5, #4]
   26c00:	str	r0, [r5, #20]
   26c04:	add	r3, r3, r3, lsl #1
   26c08:	lsl	r0, r3, #2
   26c0c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   26c10:	ldr	r3, [r5, #12]
   26c14:	str	r0, [r5, #24]
   26c18:	cmp	r3, #0
   26c1c:	beq	2702c <__assert_fail@plt+0x15d84>
   26c20:	ldr	r3, [r5, #16]
   26c24:	cmp	r3, #0
   26c28:	beq	2702c <__assert_fail@plt+0x15d84>
   26c2c:	ldr	r3, [r5, #20]
   26c30:	cmp	r3, #0
   26c34:	beq	2702c <__assert_fail@plt+0x15d84>
   26c38:	cmp	r0, #0
   26c3c:	beq	2702c <__assert_fail@plt+0x15d84>
   26c40:	ldr	r0, [r6, #24]
   26c44:	lsl	r0, r0, #2
   26c48:	bl	2ab48 <__assert_fail@plt+0x198a0>
   26c4c:	cmp	r0, #0
   26c50:	str	r0, [r5, #132]	; 0x84
   26c54:	beq	278b4 <__assert_fail@plt+0x1660c>
   26c58:	ldr	ip, [r6, #24]
   26c5c:	cmp	ip, #0
   26c60:	beq	26d10 <__assert_fail@plt+0x15a68>
   26c64:	sub	r3, ip, #1
   26c68:	ubfx	r2, r0, #2, #1
   26c6c:	cmp	r3, #4
   26c70:	bls	27b88 <__assert_fail@plt+0x168e0>
   26c74:	cmp	r2, #0
   26c78:	beq	279ec <__assert_fail@plt+0x16744>
   26c7c:	mov	r7, r2
   26c80:	mov	r9, #1
   26c84:	str	r8, [r0]
   26c88:	sub	r8, ip, r2
   26c8c:	add	r2, r0, r2, lsl #2
   26c90:	mov	lr, r9
   26c94:	lsr	r3, r8, #1
   26c98:	add	r1, r9, #1
   26c9c:	add	r3, r2, r3, lsl #3
   26ca0:	add	r2, r2, #8
   26ca4:	str	lr, [r2, #-8]
   26ca8:	add	lr, lr, #2
   26cac:	str	r1, [r2, #-4]
   26cb0:	cmp	r3, r2
   26cb4:	add	r1, r1, #2
   26cb8:	bne	26ca0 <__assert_fail@plt+0x159f8>
   26cbc:	bic	r3, r8, #1
   26cc0:	cmp	r3, r8
   26cc4:	add	r7, r3, r7
   26cc8:	add	r3, r3, r9
   26ccc:	beq	26d10 <__assert_fail@plt+0x15a68>
   26cd0:	add	r2, r3, #1
   26cd4:	str	r3, [r0, r7, lsl #2]
   26cd8:	cmp	ip, r2
   26cdc:	bls	26d10 <__assert_fail@plt+0x15a68>
   26ce0:	add	r1, r3, #2
   26ce4:	str	r2, [r0, r2, lsl #2]
   26ce8:	cmp	ip, r1
   26cec:	bls	26d10 <__assert_fail@plt+0x15a68>
   26cf0:	add	r2, r3, #3
   26cf4:	str	r1, [r0, r1, lsl #2]
   26cf8:	cmp	ip, r2
   26cfc:	bls	26d10 <__assert_fail@plt+0x15a68>
   26d00:	add	r3, r3, #4
   26d04:	str	r2, [r0, r2, lsl #2]
   26d08:	cmp	ip, r3
   26d0c:	strhi	r3, [r0, r3, lsl #2]
   26d10:	ldr	r2, [r5, #52]	; 0x34
   26d14:	mov	r8, #1
   26d18:	ldrb	r1, [r2, #24]
   26d1c:	mov	lr, r2
   26d20:	ldr	r3, [r2, #4]
   26d24:	b	26d48 <__assert_fail@plt+0x15aa0>
   26d28:	cmp	r1, #17
   26d2c:	beq	26fe0 <__assert_fail@plt+0x15d38>
   26d30:	cmp	r3, #0
   26d34:	beq	26d70 <__assert_fail@plt+0x15ac8>
   26d38:	ldrb	r1, [r3, #24]
   26d3c:	ldr	r7, [r3, #4]
   26d40:	mov	lr, r3
   26d44:	mov	r3, r7
   26d48:	cmp	r1, #4
   26d4c:	bne	26d28 <__assert_fail@plt+0x15a80>
   26d50:	ldr	r7, [lr, #20]
   26d54:	cmp	r3, #0
   26d58:	ldr	r1, [r5, #80]	; 0x50
   26d5c:	ldr	r7, [r0, r7, lsl #2]
   26d60:	orr	r1, r1, r8, lsl r7
   26d64:	str	r7, [lr, #20]
   26d68:	str	r1, [r5, #80]	; 0x50
   26d6c:	bne	26d38 <__assert_fail@plt+0x15a90>
   26d70:	mov	r1, #0
   26d74:	b	26d7c <__assert_fail@plt+0x15ad4>
   26d78:	mov	lr, r3
   26d7c:	ldr	r3, [lr, #8]
   26d80:	cmp	r3, r1
   26d84:	cmpne	r3, #0
   26d88:	bne	26d38 <__assert_fail@plt+0x15a90>
   26d8c:	ldr	r3, [lr]
   26d90:	mov	r1, lr
   26d94:	cmp	r3, #0
   26d98:	bne	26d78 <__assert_fail@plt+0x15ad0>
   26d9c:	cmp	ip, #0
   26da0:	beq	26dd0 <__assert_fail@plt+0x15b28>
   26da4:	ldr	r3, [r0]
   26da8:	cmp	r3, #0
   26dac:	bne	26de0 <__assert_fail@plt+0x15b38>
   26db0:	mov	r1, r0
   26db4:	b	26dc4 <__assert_fail@plt+0x15b1c>
   26db8:	ldr	lr, [r1, #4]!
   26dbc:	cmp	lr, r3
   26dc0:	bne	26de0 <__assert_fail@plt+0x15b38>
   26dc4:	add	r3, r3, #1
   26dc8:	cmp	r3, ip
   26dcc:	bne	26db8 <__assert_fail@plt+0x15b10>
   26dd0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   26dd4:	ldr	r2, [r5, #52]	; 0x34
   26dd8:	mov	r3, #0
   26ddc:	str	r3, [r5, #132]	; 0x84
   26de0:	mov	r7, #0
   26de4:	mov	r8, r2
   26de8:	ldr	r3, [r8, #4]
   26dec:	cmp	r3, #0
   26df0:	beq	26e04 <__assert_fail@plt+0x15b5c>
   26df4:	mov	r8, r3
   26df8:	ldr	r3, [r8, #4]
   26dfc:	cmp	r3, #0
   26e00:	bne	26df4 <__assert_fail@plt+0x15b4c>
   26e04:	ldr	r2, [r8, #8]
   26e08:	cmp	r2, #0
   26e0c:	bne	26de4 <__assert_fail@plt+0x15b3c>
   26e10:	mov	r3, r2
   26e14:	b	26e5c <__assert_fail@plt+0x15bb4>
   26e18:	cmp	r3, #0
   26e1c:	beq	26e38 <__assert_fail@plt+0x15b90>
   26e20:	ldrb	r2, [r3, #24]
   26e24:	cmp	r2, #17
   26e28:	beq	26ea4 <__assert_fail@plt+0x15bfc>
   26e2c:	ldr	r3, [sp, #48]	; 0x30
   26e30:	cmp	r3, #0
   26e34:	bne	277f4 <__assert_fail@plt+0x1654c>
   26e38:	ldr	r2, [r8]
   26e3c:	cmp	r2, #0
   26e40:	beq	2703c <__assert_fail@plt+0x15d94>
   26e44:	ldr	r3, [r2, #8]
   26e48:	cmp	r3, #0
   26e4c:	cmpne	r8, r3
   26e50:	bne	27a54 <__assert_fail@plt+0x167ac>
   26e54:	mov	r8, r2
   26e58:	ldr	r2, [r2, #4]
   26e5c:	cmp	r2, #0
   26e60:	str	r7, [sp, #48]	; 0x30
   26e64:	beq	26e18 <__assert_fail@plt+0x15b70>
   26e68:	ldrb	r1, [r2, #24]
   26e6c:	cmp	r1, #17
   26e70:	bne	26e18 <__assert_fail@plt+0x15b70>
   26e74:	mov	r1, r6
   26e78:	add	r0, sp, #48	; 0x30
   26e7c:	bl	1eb54 <__assert_fail@plt+0xd8ac>
   26e80:	ldr	r3, [r8, #8]
   26e84:	cmp	r0, #0
   26e88:	str	r0, [r8, #4]
   26e8c:	strne	r8, [r0]
   26e90:	cmp	r3, #0
   26e94:	beq	26e2c <__assert_fail@plt+0x15b84>
   26e98:	ldrb	r2, [r3, #24]
   26e9c:	cmp	r2, #17
   26ea0:	bne	26e2c <__assert_fail@plt+0x15b84>
   26ea4:	mov	r2, r3
   26ea8:	mov	r1, r6
   26eac:	add	r0, sp, #48	; 0x30
   26eb0:	bl	1eb54 <__assert_fail@plt+0xd8ac>
   26eb4:	cmp	r0, #0
   26eb8:	str	r0, [r8, #8]
   26ebc:	strne	r8, [r0]
   26ec0:	b	26e2c <__assert_fail@plt+0x15b84>
   26ec4:	mov	r3, #12
   26ec8:	str	r3, [sp, #36]	; 0x24
   26ecc:	mov	r0, r4
   26ed0:	bl	1aecc <__assert_fail@plt+0x9c24>
   26ed4:	ldr	r0, [sp, #36]	; 0x24
   26ed8:	mov	r3, #0
   26edc:	str	r3, [r6]
   26ee0:	str	r3, [r6, #4]
   26ee4:	add	sp, sp, #148	; 0x94
   26ee8:	ldrd	r4, [sp]
   26eec:	ldrd	r6, [sp, #8]
   26ef0:	ldrd	r8, [sp, #16]
   26ef4:	ldrd	sl, [sp, #24]
   26ef8:	add	sp, sp, #32
   26efc:	pop	{pc}		; (ldr pc, [sp], #4)
   26f00:	mov	r1, r9
   26f04:	add	r0, sp, #60	; 0x3c
   26f08:	bl	16bfc <__assert_fail@plt+0x5954>
   26f0c:	cmp	r0, #0
   26f10:	bne	2692c <__assert_fail@plt+0x15684>
   26f14:	ldrb	r2, [sp, #135]	; 0x87
   26f18:	ldr	r1, [r4, #92]	; 0x5c
   26f1c:	b	268c4 <__assert_fail@plt+0x1561c>
   26f20:	mov	r1, #1
   26f24:	mov	r0, #32
   26f28:	bl	2aad4 <__assert_fail@plt+0x1982c>
   26f2c:	cmp	r0, #0
   26f30:	str	r0, [r4, #60]	; 0x3c
   26f34:	beq	26ec4 <__assert_fail@plt+0x15c1c>
   26f38:	str	r5, [sp, #12]
   26f3c:	mov	r5, r4
   26f40:	lsl	fp, sl, #3
   26f44:	mov	r4, #0
   26f48:	b	26f70 <__assert_fail@plt+0x15cc8>
   26f4c:	cmp	r3, #0
   26f50:	bne	26f60 <__assert_fail@plt+0x15cb8>
   26f54:	ldrb	r3, [r5, #88]	; 0x58
   26f58:	orr	r3, r3, #8
   26f5c:	strb	r3, [r5, #88]	; 0x58
   26f60:	add	r4, r4, #1
   26f64:	add	fp, fp, #1
   26f68:	cmp	r4, #32
   26f6c:	beq	26fb8 <__assert_fail@plt+0x15d10>
   26f70:	mov	r0, fp
   26f74:	bl	111d0 <btowc@plt>
   26f78:	cmn	r0, #1
   26f7c:	bic	r3, fp, #127	; 0x7f
   26f80:	beq	26f4c <__assert_fail@plt+0x15ca4>
   26f84:	ldr	r1, [r5, #60]	; 0x3c
   26f88:	cmp	r3, #0
   26f8c:	mov	r2, #1
   26f90:	ldr	r3, [r1, sl]
   26f94:	orr	r3, r3, r2, lsl r4
   26f98:	str	r3, [r1, sl]
   26f9c:	bne	26f60 <__assert_fail@plt+0x15cb8>
   26fa0:	cmp	r0, fp
   26fa4:	bne	26f54 <__assert_fail@plt+0x15cac>
   26fa8:	add	r4, r4, #1
   26fac:	add	fp, fp, #1
   26fb0:	cmp	r4, #32
   26fb4:	bne	26f70 <__assert_fail@plt+0x15cc8>
   26fb8:	add	sl, sl, #4
   26fbc:	cmp	sl, #32
   26fc0:	bne	26f40 <__assert_fail@plt+0x15c98>
   26fc4:	mov	r4, r5
   26fc8:	ldr	r5, [sp, #12]
   26fcc:	b	267d4 <__assert_fail@plt+0x1552c>
   26fd0:	str	r3, [sp, #36]	; 0x24
   26fd4:	str	r1, [sp, #88]	; 0x58
   26fd8:	str	r1, [sp, #92]	; 0x5c
   26fdc:	b	26a34 <__assert_fail@plt+0x1578c>
   26fe0:	cmp	r3, #0
   26fe4:	beq	26d70 <__assert_fail@plt+0x15ac8>
   26fe8:	ldrb	r1, [r3, #24]
   26fec:	ldr	r7, [r3, #4]
   26ff0:	cmp	r1, #17
   26ff4:	bne	26d40 <__assert_fail@plt+0x15a98>
   26ff8:	ldr	r1, [r3, #20]
   26ffc:	cmp	r7, #0
   27000:	str	r7, [lr, #4]
   27004:	ldr	r3, [lr, #20]
   27008:	strne	lr, [r7]
   2700c:	cmp	r1, #31
   27010:	ldrle	r9, [r5, #80]	; 0x50
   27014:	ldr	r3, [r0, r3, lsl #2]
   27018:	str	r3, [r0, r1, lsl #2]
   2701c:	bicle	r1, r9, r8, lsl r1
   27020:	mov	r3, r7
   27024:	strle	r1, [r5, #80]	; 0x50
   27028:	b	26d30 <__assert_fail@plt+0x15a88>
   2702c:	mov	r3, #12
   27030:	ldr	r5, [r6]
   27034:	str	r3, [sp, #36]	; 0x24
   27038:	b	26934 <__assert_fail@plt+0x1568c>
   2703c:	ldr	r3, [r5, #52]	; 0x34
   27040:	mov	r7, r3
   27044:	ldr	r3, [r3, #4]
   27048:	cmp	r3, #0
   2704c:	bne	27040 <__assert_fail@plt+0x15d98>
   27050:	ldr	r3, [r7, #8]
   27054:	cmp	r3, #0
   27058:	bne	27040 <__assert_fail@plt+0x15d98>
   2705c:	b	270a4 <__assert_fail@plt+0x15dfc>
   27060:	ldr	r3, [r7, #4]
   27064:	ldr	r2, [r3, #12]
   27068:	ldr	r3, [r3, #28]
   2706c:	str	r2, [r7, #12]
   27070:	str	r3, [r7, #28]
   27074:	ldr	r1, [r7]
   27078:	cmp	r1, #0
   2707c:	beq	27100 <__assert_fail@plt+0x15e58>
   27080:	ldr	r3, [r1, #8]
   27084:	sub	r2, r7, r3
   27088:	cmp	r3, #0
   2708c:	clz	r2, r2
   27090:	mov	r7, r1
   27094:	lsr	r2, r2, #5
   27098:	moveq	r2, #1
   2709c:	cmp	r2, #0
   270a0:	beq	27040 <__assert_fail@plt+0x15d98>
   270a4:	ldrb	r3, [r7, #24]
   270a8:	cmp	r3, #16
   270ac:	beq	27060 <__assert_fail@plt+0x15db8>
   270b0:	add	r3, r7, #20
   270b4:	mov	r0, r5
   270b8:	ldm	r3, {r1, r2}
   270bc:	str	r7, [r7, #12]
   270c0:	bl	1765c <__assert_fail@plt+0x63b4>
   270c4:	cmn	r0, #1
   270c8:	str	r0, [r7, #28]
   270cc:	beq	27820 <__assert_fail@plt+0x16578>
   270d0:	ldrb	r3, [r7, #24]
   270d4:	cmp	r3, #12
   270d8:	bne	27074 <__assert_fail@plt+0x15dcc>
   270dc:	ldr	r3, [r5]
   270e0:	ldr	r2, [r7, #20]
   270e4:	add	r0, r3, r0, lsl #3
   270e8:	ldr	r3, [r0, #4]
   270ec:	bfi	r3, r2, #8, #10
   270f0:	str	r3, [r0, #4]
   270f4:	ldr	r1, [r7]
   270f8:	cmp	r1, #0
   270fc:	bne	27080 <__assert_fail@plt+0x15dd8>
   27100:	ldr	fp, [r5, #52]	; 0x34
   27104:	mov	r3, fp
   27108:	b	27134 <__assert_fail@plt+0x15e8c>
   2710c:	cmp	r2, #0
   27110:	ldr	r1, [r3, #8]
   27114:	beq	2716c <__assert_fail@plt+0x15ec4>
   27118:	ldr	r0, [r3, #16]
   2711c:	cmp	r1, #0
   27120:	str	r0, [r2, #16]
   27124:	beq	27130 <__assert_fail@plt+0x15e88>
   27128:	ldr	r3, [r3, #16]
   2712c:	str	r3, [r1, #16]
   27130:	mov	r3, r2
   27134:	ldrb	r1, [r3, #24]
   27138:	ldr	r2, [r3, #4]
   2713c:	cmp	r1, #11
   27140:	beq	27164 <__assert_fail@plt+0x15ebc>
   27144:	cmp	r1, #16
   27148:	bne	2710c <__assert_fail@plt+0x15e64>
   2714c:	ldr	r1, [r3, #8]
   27150:	ldr	r0, [r1, #12]
   27154:	str	r0, [r2, #16]
   27158:	ldr	r3, [r3, #16]
   2715c:	str	r3, [r1, #16]
   27160:	b	27130 <__assert_fail@plt+0x15e88>
   27164:	str	r3, [r2, #16]
   27168:	b	27130 <__assert_fail@plt+0x15e88>
   2716c:	cmp	r1, #0
   27170:	beq	27184 <__assert_fail@plt+0x15edc>
   27174:	ldr	r3, [r3, #16]
   27178:	mov	r2, r1
   2717c:	str	r3, [r1, #16]
   27180:	b	27130 <__assert_fail@plt+0x15e88>
   27184:	ldr	r1, [r3]
   27188:	cmp	r1, #0
   2718c:	bne	27198 <__assert_fail@plt+0x15ef0>
   27190:	b	271b8 <__assert_fail@plt+0x15f10>
   27194:	mov	r1, r2
   27198:	ldr	r2, [r1, #8]
   2719c:	cmp	r2, #0
   271a0:	cmpne	r2, r3
   271a4:	bne	27130 <__assert_fail@plt+0x15e88>
   271a8:	ldr	r2, [r1]
   271ac:	mov	r3, r1
   271b0:	cmp	r2, #0
   271b4:	bne	27194 <__assert_fail@plt+0x15eec>
   271b8:	mov	r7, #1
   271bc:	mov	r9, #2
   271c0:	str	r4, [sp, #20]
   271c4:	ldrb	r2, [fp, #24]
   271c8:	ldr	r3, [fp, #28]
   271cc:	sub	r2, r2, #2
   271d0:	cmp	r2, #14
   271d4:	ldrls	pc, [pc, r2, lsl #2]
   271d8:	b	2738c <__assert_fail@plt+0x160e4>
   271dc:	muleq	r2, r0, r2
   271e0:	andeq	r7, r2, ip, lsl #7
   271e4:	andeq	r7, r2, r0, ror #6
   271e8:	andeq	r7, r2, ip, lsl #7
   271ec:	andeq	r7, r2, ip, lsl #7
   271f0:	andeq	r7, r2, ip, lsl #7
   271f4:	andeq	r7, r2, r8, lsr #6
   271f8:	andeq	r7, r2, r8, lsr #6
   271fc:	andeq	r7, r2, r8, lsl r2
   27200:	andeq	r7, r2, r8, lsl r2
   27204:	andeq	r7, r2, r8, lsr #6
   27208:	andeq	r7, r2, ip, lsl #7
   2720c:	andeq	r7, r2, ip, lsl #7
   27210:	andeq	r7, r2, ip, lsl #7
   27214:	muleq	r2, r0, r2
   27218:	ldrb	r2, [r5, #88]	; 0x58
   2721c:	add	r3, r3, r3, lsl #1
   27220:	mov	r0, #8
   27224:	orr	r2, r2, #1
   27228:	strb	r2, [r5, #88]	; 0x58
   2722c:	ldr	r2, [fp, #4]
   27230:	cmp	r2, #0
   27234:	ldrne	r2, [r2, #12]
   27238:	ldreq	r2, [fp, #16]
   2723c:	ldr	sl, [r2, #28]
   27240:	ldr	r2, [fp, #8]
   27244:	cmp	r2, #0
   27248:	ldrne	r2, [r2, #12]
   2724c:	ldreq	r2, [fp, #16]
   27250:	ldr	r4, [r2, #28]
   27254:	ldr	r2, [r5, #20]
   27258:	add	r8, r2, r3, lsl #2
   2725c:	str	r9, [r2, r3, lsl #2]
   27260:	bl	2ab48 <__assert_fail@plt+0x198a0>
   27264:	cmp	r0, #0
   27268:	str	r0, [r8, #8]
   2726c:	beq	2781c <__assert_fail@plt+0x16574>
   27270:	cmp	sl, r4
   27274:	streq	r7, [r8, #4]
   27278:	streq	sl, [r0]
   2727c:	beq	27290 <__assert_fail@plt+0x15fe8>
   27280:	str	r9, [r8, #4]
   27284:	strlt	sl, [r0]
   27288:	strlt	r4, [r0, #4]
   2728c:	stmge	r0, {r4, sl}
   27290:	ldr	r3, [fp, #4]
   27294:	cmp	r3, #0
   27298:	beq	272a8 <__assert_fail@plt+0x16000>
   2729c:	mov	fp, r3
   272a0:	b	271c4 <__assert_fail@plt+0x15f1c>
   272a4:	mov	fp, r8
   272a8:	ldr	r2, [fp, #8]
   272ac:	sub	r3, r2, r3
   272b0:	cmp	r2, #0
   272b4:	clz	r3, r3
   272b8:	moveq	sl, #1
   272bc:	lsr	r3, r3, #5
   272c0:	movne	sl, r3
   272c4:	cmp	sl, #0
   272c8:	beq	27928 <__assert_fail@plt+0x16680>
   272cc:	ldr	r8, [fp]
   272d0:	mov	r3, fp
   272d4:	cmp	r8, #0
   272d8:	bne	272a4 <__assert_fail@plt+0x15ffc>
   272dc:	ldr	r4, [sp, #20]
   272e0:	mov	fp, r8
   272e4:	mov	r7, r8
   272e8:	ldr	r2, [r5, #24]
   272ec:	add	r9, r7, r7, lsl #1
   272f0:	lsl	r9, r9, #2
   272f4:	add	r3, r2, r9
   272f8:	ldr	r3, [r3, #4]
   272fc:	cmp	r3, #0
   27300:	beq	273d8 <__assert_fail@plt+0x16130>
   27304:	ldr	r3, [r5, #8]
   27308:	add	r7, r7, #1
   2730c:	cmp	r3, r7
   27310:	bne	272ec <__assert_fail@plt+0x16044>
   27314:	cmp	fp, #0
   27318:	beq	27414 <__assert_fail@plt+0x1616c>
   2731c:	mov	fp, #0
   27320:	mov	r7, fp
   27324:	b	272ec <__assert_fail@plt+0x16044>
   27328:	ldr	r1, [fp, #16]
   2732c:	add	r3, r3, r3, lsl #1
   27330:	mov	r0, #4
   27334:	ldr	r2, [r5, #20]
   27338:	ldr	r8, [r1, #28]
   2733c:	add	sl, r2, r3, lsl #2
   27340:	str	r7, [r2, r3, lsl #2]
   27344:	str	r7, [sl, #4]
   27348:	bl	2ab48 <__assert_fail@plt+0x198a0>
   2734c:	cmp	r0, #0
   27350:	str	r0, [sl, #8]
   27354:	beq	27b40 <__assert_fail@plt+0x16898>
   27358:	str	r8, [r0]
   2735c:	b	27290 <__assert_fail@plt+0x15fe8>
   27360:	ldr	r1, [fp, #16]
   27364:	ldr	r2, [r5, #12]
   27368:	ldr	r8, [r1, #28]
   2736c:	str	r8, [r2, r3, lsl #2]
   27370:	ldrb	r0, [fp, #24]
   27374:	cmp	r0, #4
   27378:	bne	27290 <__assert_fail@plt+0x15fe8>
   2737c:	ldr	r2, [r5, #20]
   27380:	add	r3, r3, r3, lsl #1
   27384:	add	sl, r2, r3, lsl #2
   27388:	b	27340 <__assert_fail@plt+0x16098>
   2738c:	ldr	r1, [fp, #16]
   27390:	ldr	r2, [r5, #12]
   27394:	ldr	r1, [r1, #28]
   27398:	str	r1, [r2, r3, lsl #2]
   2739c:	b	27290 <__assert_fail@plt+0x15fe8>
   273a0:	ldr	r0, [sp, #56]	; 0x38
   273a4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   273a8:	ldr	r3, [r5, #8]
   273ac:	cmp	r3, r7
   273b0:	moveq	fp, r9
   273b4:	moveq	r7, fp
   273b8:	movne	fp, sl
   273bc:	ldr	r2, [r5, #24]
   273c0:	add	r9, r7, r7, lsl #1
   273c4:	lsl	r9, r9, #2
   273c8:	add	r1, r2, r9
   273cc:	ldr	r1, [r1, #4]
   273d0:	cmp	r1, #0
   273d4:	bne	27308 <__assert_fail@plt+0x16060>
   273d8:	mov	r3, #1
   273dc:	mov	r2, r7
   273e0:	mov	r1, r5
   273e4:	add	r0, sp, #48	; 0x30
   273e8:	bl	1c194 <__assert_fail@plt+0xaeec>
   273ec:	cmp	r0, #0
   273f0:	bne	277f0 <__assert_fail@plt+0x16548>
   273f4:	ldr	r2, [r5, #24]
   273f8:	add	r7, r7, #1
   273fc:	add	r9, r2, r9
   27400:	ldr	r9, [r9, #4]
   27404:	cmp	r9, #0
   27408:	beq	273a0 <__assert_fail@plt+0x160f8>
   2740c:	ldr	r3, [r5, #8]
   27410:	b	2730c <__assert_fail@plt+0x16064>
   27414:	ldrb	r3, [r6, #28]
   27418:	tst	r3, #16
   2741c:	bne	27438 <__assert_fail@plt+0x16190>
   27420:	ldr	r3, [r6, #24]
   27424:	cmp	r3, #0
   27428:	beq	27438 <__assert_fail@plt+0x16190>
   2742c:	ldrb	r3, [r5, #88]	; 0x58
   27430:	tst	r3, #1
   27434:	bne	27444 <__assert_fail@plt+0x1619c>
   27438:	ldr	r3, [r5, #76]	; 0x4c
   2743c:	cmp	r3, #0
   27440:	beq	27568 <__assert_fail@plt+0x162c0>
   27444:	add	r7, r7, r7, lsl #1
   27448:	lsl	r0, r7, #2
   2744c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   27450:	cmp	r0, #0
   27454:	str	r0, [r5, #28]
   27458:	beq	2702c <__assert_fail@plt+0x15d84>
   2745c:	ldr	r3, [r5, #8]
   27460:	cmp	r3, #0
   27464:	movne	r3, #0
   27468:	movne	r2, r3
   2746c:	bne	27478 <__assert_fail@plt+0x161d0>
   27470:	b	27568 <__assert_fail@plt+0x162c0>
   27474:	ldr	r0, [r5, #28]
   27478:	add	ip, r3, r3, lsl #1
   2747c:	add	r3, r3, #1
   27480:	add	r1, r0, ip, lsl #2
   27484:	str	r2, [r0, ip, lsl #2]
   27488:	str	r2, [r1, #4]
   2748c:	str	r2, [r1, #8]
   27490:	ldr	r1, [r5, #8]
   27494:	cmp	r1, r3
   27498:	bhi	27474 <__assert_fail@plt+0x161cc>
   2749c:	cmp	r1, #0
   274a0:	beq	27568 <__assert_fail@plt+0x162c0>
   274a4:	ldr	ip, [r5, #24]
   274a8:	mov	r3, #0
   274ac:	mov	sl, r3
   274b0:	str	r4, [sp, #20]
   274b4:	mov	r4, r3
   274b8:	str	r8, [sp, #24]
   274bc:	str	fp, [sp, #28]
   274c0:	add	fp, ip, r4
   274c4:	ldmib	fp, {r3, r9}
   274c8:	cmp	r3, #0
   274cc:	ble	27550 <__assert_fail@plt+0x162a8>
   274d0:	sub	r9, r9, #4
   274d4:	mov	r8, #0
   274d8:	b	274f8 <__assert_fail@plt+0x16250>
   274dc:	add	r3, r1, #1
   274e0:	add	r8, r8, #1
   274e4:	str	r3, [r7, #4]
   274e8:	str	sl, [r0, r1, lsl #2]
   274ec:	ldr	r3, [fp, #4]
   274f0:	cmp	r8, r3
   274f4:	bge	2754c <__assert_fail@plt+0x162a4>
   274f8:	ldr	r3, [r9, #4]!
   274fc:	ldr	r2, [r5, #28]
   27500:	add	r3, r3, r3, lsl #1
   27504:	add	r7, r2, r3, lsl #2
   27508:	ldr	lr, [r2, r3, lsl #2]
   2750c:	ldr	r1, [r7, #4]
   27510:	ldr	r0, [r7, #8]
   27514:	cmp	lr, r1
   27518:	bne	274dc <__assert_fail@plt+0x16234>
   2751c:	add	r1, r1, #1
   27520:	lsl	ip, r1, #1
   27524:	lsl	r1, r1, #3
   27528:	str	ip, [r2, r3, lsl #2]
   2752c:	bl	2ab84 <__assert_fail@plt+0x198dc>
   27530:	cmp	r0, #0
   27534:	beq	2781c <__assert_fail@plt+0x16574>
   27538:	ldr	ip, [r5, #24]
   2753c:	str	r0, [r7, #8]
   27540:	ldr	r1, [r7, #4]
   27544:	add	fp, ip, r4
   27548:	b	274dc <__assert_fail@plt+0x16234>
   2754c:	ldr	r1, [r5, #8]
   27550:	add	sl, sl, #1
   27554:	add	r4, r4, #12
   27558:	cmp	sl, r1
   2755c:	bcc	274c0 <__assert_fail@plt+0x16218>
   27560:	add	r4, sp, #20
   27564:	ldm	r4, {r4, r8, fp}
   27568:	mov	r1, #0
   2756c:	str	r1, [sp, #36]	; 0x24
   27570:	ldr	r3, [sp, #12]
   27574:	ldrb	r2, [r4, #88]	; 0x58
   27578:	clz	r3, r3
   2757c:	lsr	r3, r3, #5
   27580:	ands	r3, r3, r2, lsr #2
   27584:	bne	27848 <__assert_fail@plt+0x165a0>
   27588:	ldr	r7, [r4, #24]
   2758c:	ldr	r3, [r4, #52]	; 0x34
   27590:	ldr	r3, [r3, #12]
   27594:	ldr	r3, [r3, #28]
   27598:	add	r2, r3, r3, lsl #1
   2759c:	str	r3, [r4, #72]	; 0x48
   275a0:	add	r7, r7, r2, lsl #2
   275a4:	ldr	r3, [r7, #4]
   275a8:	cmp	r3, #0
   275ac:	str	r3, [sp, #52]	; 0x34
   275b0:	ble	27800 <__assert_fail@plt+0x16558>
   275b4:	lsl	r0, r3, #2
   275b8:	str	r3, [sp, #48]	; 0x30
   275bc:	bl	2ab48 <__assert_fail@plt+0x198a0>
   275c0:	cmp	r0, #0
   275c4:	mov	r8, r0
   275c8:	str	r0, [sp, #56]	; 0x38
   275cc:	beq	27b80 <__assert_fail@plt+0x168d8>
   275d0:	ldr	r2, [r7, #4]
   275d4:	add	r5, sp, #48	; 0x30
   275d8:	ldr	r1, [r7, #8]
   275dc:	lsl	r2, r2, #2
   275e0:	bl	11038 <memcpy@plt>
   275e4:	mov	r3, #0
   275e8:	str	r3, [sp, #40]	; 0x28
   275ec:	ldr	r3, [r4, #76]	; 0x4c
   275f0:	cmp	r3, #0
   275f4:	ble	27720 <__assert_fail@plt+0x16478>
   275f8:	ldr	r7, [sp, #52]	; 0x34
   275fc:	cmp	r7, #0
   27600:	ble	27720 <__assert_fail@plt+0x16478>
   27604:	mov	ip, #0
   27608:	b	2761c <__assert_fail@plt+0x16374>
   2760c:	add	ip, ip, #1
   27610:	cmp	r7, ip
   27614:	ble	27720 <__assert_fail@plt+0x16478>
   27618:	ldr	r8, [sp, #56]	; 0x38
   2761c:	ldr	r3, [r8, ip, lsl #2]
   27620:	ldr	r0, [r4]
   27624:	add	r9, r0, r3, lsl #3
   27628:	ldrb	r2, [r9, #4]
   2762c:	cmp	r2, #4
   27630:	bne	2760c <__assert_fail@plt+0x16364>
   27634:	sub	lr, r8, #4
   27638:	mov	r1, #0
   2763c:	b	2764c <__assert_fail@plt+0x163a4>
   27640:	add	r1, r1, #1
   27644:	cmp	r7, r1
   27648:	beq	2760c <__assert_fail@plt+0x16364>
   2764c:	ldr	r2, [lr, #4]!
   27650:	add	sl, r0, r2, lsl #3
   27654:	ldrb	sl, [sl, #4]
   27658:	cmp	sl, #9
   2765c:	bne	27640 <__assert_fail@plt+0x16398>
   27660:	ldr	sl, [r0, r2, lsl #3]
   27664:	ldr	r2, [r9]
   27668:	cmp	sl, r2
   2766c:	bne	27640 <__assert_fail@plt+0x16398>
   27670:	ldr	r1, [r4, #20]
   27674:	add	r3, r3, r3, lsl #1
   27678:	subs	r2, r7, #1
   2767c:	add	r3, r1, r3, lsl #2
   27680:	moveq	r1, r2
   27684:	ldr	r3, [r3, #8]
   27688:	ldr	lr, [r3]
   2768c:	beq	276e8 <__assert_fail@plt+0x16440>
   27690:	mov	r1, #0
   27694:	add	r3, r2, r1
   27698:	lsr	r3, r3, #1
   2769c:	ldr	r0, [r8, r3, lsl #2]
   276a0:	cmp	lr, r0
   276a4:	bgt	277e0 <__assert_fail@plt+0x16538>
   276a8:	cmp	r3, r1
   276ac:	bls	276e8 <__assert_fail@plt+0x16440>
   276b0:	add	r2, r3, r1
   276b4:	lsr	r2, r2, #1
   276b8:	ldr	r0, [r8, r2, lsl #2]
   276bc:	cmp	lr, r0
   276c0:	ble	276e0 <__assert_fail@plt+0x16438>
   276c4:	b	277d4 <__assert_fail@plt+0x1652c>
   276c8:	add	r3, r1, r2
   276cc:	lsr	r3, r3, #1
   276d0:	ldr	r0, [r8, r3, lsl #2]
   276d4:	cmp	lr, r0
   276d8:	bgt	277e0 <__assert_fail@plt+0x16538>
   276dc:	mov	r2, r3
   276e0:	cmp	r1, r2
   276e4:	bcc	276c8 <__assert_fail@plt+0x16420>
   276e8:	ldr	r3, [r8, r1, lsl #2]
   276ec:	cmp	lr, r3
   276f0:	beq	2760c <__assert_fail@plt+0x16364>
   276f4:	ldr	r1, [r4, #24]
   276f8:	add	lr, lr, lr, lsl #1
   276fc:	mov	r0, r5
   27700:	add	r1, r1, lr, lsl #2
   27704:	bl	17d0c <__assert_fail@plt+0x6a64>
   27708:	cmp	r0, #0
   2770c:	bne	27764 <__assert_fail@plt+0x164bc>
   27710:	ldr	r7, [sp, #52]	; 0x34
   27714:	mov	ip, #1
   27718:	cmp	r7, ip
   2771c:	bgt	27618 <__assert_fail@plt+0x16370>
   27720:	mov	r3, #0
   27724:	mov	r2, r5
   27728:	mov	r1, r4
   2772c:	add	r0, sp, #40	; 0x28
   27730:	bl	1cd20 <__assert_fail@plt+0xba78>
   27734:	cmp	r0, #0
   27738:	str	r0, [r4, #36]	; 0x24
   2773c:	beq	27920 <__assert_fail@plt+0x16678>
   27740:	ldrsb	r3, [r0, #52]	; 0x34
   27744:	cmp	r3, #0
   27748:	strge	r0, [r4, #40]	; 0x28
   2774c:	strge	r0, [r4, #44]	; 0x2c
   27750:	strge	r0, [r4, #48]	; 0x30
   27754:	blt	278bc <__assert_fail@plt+0x16614>
   27758:	ldr	r0, [sp, #56]	; 0x38
   2775c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   27760:	mov	r0, #0
   27764:	ldr	r5, [r6]
   27768:	str	r0, [sp, #36]	; 0x24
   2776c:	ldr	r0, [r5, #56]	; 0x38
   27770:	cmp	r0, #0
   27774:	beq	27788 <__assert_fail@plt+0x164e0>
   27778:	ldr	r7, [r0]
   2777c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   27780:	subs	r0, r7, #0
   27784:	bne	27778 <__assert_fail@plt+0x164d0>
   27788:	mov	r3, #31
   2778c:	mov	r7, #0
   27790:	ldr	r0, [r5, #16]
   27794:	str	r7, [r5, #52]	; 0x34
   27798:	str	r7, [r5, #56]	; 0x38
   2779c:	str	r3, [r5, #64]	; 0x40
   277a0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   277a4:	str	r7, [r5, #16]
   277a8:	ldr	r0, [sp, #68]	; 0x44
   277ac:	bl	2ad30 <__assert_fail@plt+0x19a88>
   277b0:	ldr	r0, [sp, #72]	; 0x48
   277b4:	bl	2ad30 <__assert_fail@plt+0x19a88>
   277b8:	ldrb	r3, [sp, #135]	; 0x87
   277bc:	cmp	r3, r7
   277c0:	bne	27828 <__assert_fail@plt+0x16580>
   277c4:	ldr	r0, [sp, #36]	; 0x24
   277c8:	cmp	r0, #0
   277cc:	beq	26ee4 <__assert_fail@plt+0x15c3c>
   277d0:	b	2698c <__assert_fail@plt+0x156e4>
   277d4:	mov	r1, r2
   277d8:	mov	r2, r3
   277dc:	mov	r3, r1
   277e0:	add	r1, r3, #1
   277e4:	cmp	r1, r2
   277e8:	bcc	27694 <__assert_fail@plt+0x163ec>
   277ec:	b	276e8 <__assert_fail@plt+0x16440>
   277f0:	mov	r3, r0
   277f4:	str	r3, [sp, #36]	; 0x24
   277f8:	ldr	r5, [r6]
   277fc:	b	26934 <__assert_fail@plt+0x1568c>
   27800:	mov	r3, #0
   27804:	add	r5, sp, #48	; 0x30
   27808:	str	r3, [sp, #40]	; 0x28
   2780c:	str	r3, [sp, #48]	; 0x30
   27810:	str	r3, [r5, #4]
   27814:	str	r3, [r5, #8]
   27818:	b	275ec <__assert_fail@plt+0x16344>
   2781c:	ldr	r4, [sp, #20]
   27820:	mov	r3, #12
   27824:	b	277f4 <__assert_fail@plt+0x1654c>
   27828:	ldr	r0, [sp, #64]	; 0x40
   2782c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   27830:	b	277c4 <__assert_fail@plt+0x1651c>
   27834:	add	r0, sp, #60	; 0x3c
   27838:	bl	16e04 <__assert_fail@plt+0x5b5c>
   2783c:	ldr	r3, [sp, #12]
   27840:	str	r3, [sp, #36]	; 0x24
   27844:	b	26a34 <__assert_fail@plt+0x1578c>
   27848:	ldr	r2, [r6, #20]
   2784c:	cmp	r2, #0
   27850:	bne	27588 <__assert_fail@plt+0x162e0>
   27854:	ldr	r5, [r4, #8]
   27858:	cmp	r5, #0
   2785c:	beq	27bc4 <__assert_fail@plt+0x1691c>
   27860:	ldr	lr, [r4]
   27864:	mov	r0, r2
   27868:	mov	ip, r2
   2786c:	mov	r1, lr
   27870:	ldrb	r2, [r1, #4]
   27874:	sub	r2, r2, #1
   27878:	cmp	r2, #11
   2787c:	ldrls	pc, [pc, r2, lsl #2]
   27880:	b	27bf4 <__assert_fail@plt+0x1694c>
   27884:	ldrdeq	r7, [r2], -r4
   27888:	andeq	r7, r2, ip, ror #20
   2788c:	andeq	r7, r2, r4, ror #21
   27890:	andeq	r7, r2, ip, ror #20
   27894:	andeq	r7, r2, r8, ror #20
   27898:	andeq	r7, r2, r8, lsl #11
   2789c:	strdeq	r7, [r2], -r4
   278a0:	andeq	r7, r2, ip, ror #20
   278a4:	andeq	r7, r2, ip, ror #20
   278a8:	andeq	r7, r2, ip, ror #20
   278ac:	andeq	r7, r2, ip, ror #20
   278b0:	andeq	r7, r2, ip, lsl fp
   278b4:	ldr	r2, [r5, #52]	; 0x34
   278b8:	b	26de0 <__assert_fail@plt+0x15b38>
   278bc:	mov	r3, #1
   278c0:	mov	r2, r5
   278c4:	mov	r1, r4
   278c8:	add	r0, sp, #40	; 0x28
   278cc:	bl	1cd20 <__assert_fail@plt+0xba78>
   278d0:	mov	r3, #2
   278d4:	mov	r2, r5
   278d8:	str	r0, [r4, #40]	; 0x28
   278dc:	mov	r1, r4
   278e0:	add	r0, sp, #40	; 0x28
   278e4:	bl	1cd20 <__assert_fail@plt+0xba78>
   278e8:	mov	r3, #6
   278ec:	mov	r2, r5
   278f0:	str	r0, [r4, #44]	; 0x2c
   278f4:	mov	r1, r4
   278f8:	add	r0, sp, #40	; 0x28
   278fc:	bl	1cd20 <__assert_fail@plt+0xba78>
   27900:	ldr	r3, [r4, #40]	; 0x28
   27904:	str	r0, [r4, #48]	; 0x30
   27908:	cmp	r3, #0
   2790c:	beq	27920 <__assert_fail@plt+0x16678>
   27910:	ldr	r3, [r4, #44]	; 0x2c
   27914:	cmp	r0, #0
   27918:	cmpne	r3, #0
   2791c:	bne	27758 <__assert_fail@plt+0x164b0>
   27920:	ldr	r0, [sp, #40]	; 0x28
   27924:	b	27764 <__assert_fail@plt+0x164bc>
   27928:	mov	r3, r2
   2792c:	b	2729c <__assert_fail@plt+0x15ff4>
   27930:	ldr	r5, [sp, #88]	; 0x58
   27934:	ldr	r9, [sp, #96]	; 0x60
   27938:	ldr	r3, [sp, #108]	; 0x6c
   2793c:	cmp	r9, r3
   27940:	movge	r9, r3
   27944:	cmp	r9, r5
   27948:	ble	27ba8 <__assert_fail@plt+0x16900>
   2794c:	bl	1114c <__ctype_toupper_loc@plt>
   27950:	b	27970 <__assert_fail@plt+0x166c8>
   27954:	ldr	r2, [r0]
   27958:	ldr	r3, [r2, r3, lsl #2]
   2795c:	strb	r3, [r8, r5]
   27960:	add	r5, r5, #1
   27964:	cmp	r9, r5
   27968:	beq	279a8 <__assert_fail@plt+0x16700>
   2796c:	ldr	r8, [sp, #64]	; 0x40
   27970:	ldr	r3, [sp, #60]	; 0x3c
   27974:	ldr	r1, [sp, #84]	; 0x54
   27978:	ldr	r2, [sp, #124]	; 0x7c
   2797c:	add	r3, r3, r5
   27980:	ldrb	r3, [r3, r1]
   27984:	cmp	r2, #0
   27988:	beq	27954 <__assert_fail@plt+0x166ac>
   2798c:	ldrb	r2, [r2, r3]
   27990:	ldr	r3, [r0]
   27994:	ldr	r3, [r3, r2, lsl #2]
   27998:	strb	r3, [r8, r5]
   2799c:	add	r5, r5, #1
   279a0:	cmp	r9, r5
   279a4:	bne	2796c <__assert_fail@plt+0x166c4>
   279a8:	mov	r3, #0
   279ac:	str	r3, [sp, #36]	; 0x24
   279b0:	str	r9, [sp, #88]	; 0x58
   279b4:	str	r9, [sp, #92]	; 0x5c
   279b8:	b	26a34 <__assert_fail@plt+0x1578c>
   279bc:	mov	r0, r4
   279c0:	mov	r1, #160	; 0xa0
   279c4:	bl	2ab84 <__assert_fail@plt+0x198dc>
   279c8:	subs	r4, r0, #0
   279cc:	beq	27bb0 <__assert_fail@plt+0x16908>
   279d0:	mov	r3, #160	; 0xa0
   279d4:	str	r4, [r6]
   279d8:	str	r3, [r6, #4]
   279dc:	b	266c0 <__assert_fail@plt+0x15418>
   279e0:	mov	sl, r5
   279e4:	mov	r1, #1
   279e8:	b	26720 <__assert_fail@plt+0x15478>
   279ec:	mov	r7, r8
   279f0:	mov	r9, r8
   279f4:	b	26c88 <__assert_fail@plt+0x159e0>
   279f8:	ldr	r0, [sp, #64]	; 0x40
   279fc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   27a00:	b	2698c <__assert_fail@plt+0x156e4>
   27a04:	cmp	r9, #0
   27a08:	movne	r8, #1
   27a0c:	bne	26b2c <__assert_fail@plt+0x15884>
   27a10:	ldr	r5, [r6]
   27a14:	mov	r2, #12
   27a18:	mov	r3, #0
   27a1c:	str	r2, [sp, #36]	; 0x24
   27a20:	str	r3, [r4, #52]	; 0x34
   27a24:	b	26934 <__assert_fail@plt+0x1568c>
   27a28:	mov	r0, #996	; 0x3e4
   27a2c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   27a30:	subs	r7, r0, #0
   27a34:	beq	27a04 <__assert_fail@plt+0x1675c>
   27a38:	ldr	r1, [r5, #56]	; 0x38
   27a3c:	mov	r3, sl
   27a40:	mov	r2, #1
   27a44:	mov	r0, #4
   27a48:	str	r1, [r7]
   27a4c:	str	r7, [r5, #56]	; 0x38
   27a50:	b	26acc <__assert_fail@plt+0x15824>
   27a54:	mov	r2, r3
   27a58:	b	26de4 <__assert_fail@plt+0x15b3c>
   27a5c:	mov	r3, #0
   27a60:	str	r3, [sp, #36]	; 0x24
   27a64:	b	26a34 <__assert_fail@plt+0x1578c>
   27a68:	mov	r0, r3
   27a6c:	add	ip, ip, #1
   27a70:	add	r1, r1, #8
   27a74:	cmp	ip, r5
   27a78:	bne	27870 <__assert_fail@plt+0x165c8>
   27a7c:	orr	fp, fp, r0
   27a80:	ands	fp, fp, #255	; 0xff
   27a84:	moveq	r0, fp
   27a88:	beq	27bc8 <__assert_fail@plt+0x16920>
   27a8c:	add	ip, lr, ip, lsl #3
   27a90:	mov	r2, #7
   27a94:	b	27aac <__assert_fail@plt+0x16804>
   27a98:	cmp	r3, #5
   27a9c:	strbeq	r2, [lr, #4]
   27aa0:	add	lr, lr, #8
   27aa4:	cmp	ip, lr
   27aa8:	beq	27bc8 <__assert_fail@plt+0x16920>
   27aac:	ldrb	r3, [lr, #4]
   27ab0:	cmp	r3, #1
   27ab4:	bne	27a98 <__assert_fail@plt+0x167f0>
   27ab8:	ldrsb	r3, [lr]
   27abc:	cmp	r3, #0
   27ac0:	bge	27aa0 <__assert_fail@plt+0x167f8>
   27ac4:	ldrb	r3, [lr, #6]
   27ac8:	bfc	r3, #5, #1
   27acc:	strb	r3, [lr, #6]
   27ad0:	b	27aa0 <__assert_fail@plt+0x167f8>
   27ad4:	ldrsb	r2, [r1]
   27ad8:	cmp	r2, #0
   27adc:	movlt	fp, r3
   27ae0:	b	27a6c <__assert_fail@plt+0x167c4>
   27ae4:	ldr	r2, [r1]
   27ae8:	ldr	r7, [r2, #16]
   27aec:	cmp	r7, #0
   27af0:	bne	27588 <__assert_fail@plt+0x162e0>
   27af4:	ldr	r7, [r2, #20]
   27af8:	cmp	r7, #0
   27afc:	bne	27588 <__assert_fail@plt+0x162e0>
   27b00:	ldr	r7, [r2, #24]
   27b04:	cmp	r7, #0
   27b08:	bne	27588 <__assert_fail@plt+0x162e0>
   27b0c:	ldr	r2, [r2, #28]
   27b10:	cmp	r2, #0
   27b14:	beq	27a6c <__assert_fail@plt+0x167c4>
   27b18:	b	27588 <__assert_fail@plt+0x162e0>
   27b1c:	ldr	r2, [r1]
   27b20:	cmp	r2, #32
   27b24:	beq	27a6c <__assert_fail@plt+0x167c4>
   27b28:	bls	27b94 <__assert_fail@plt+0x168ec>
   27b2c:	cmp	r2, #64	; 0x40
   27b30:	beq	27a6c <__assert_fail@plt+0x167c4>
   27b34:	cmp	r2, #128	; 0x80
   27b38:	beq	27a6c <__assert_fail@plt+0x167c4>
   27b3c:	b	27588 <__assert_fail@plt+0x162e0>
   27b40:	mov	r3, #12
   27b44:	ldr	r4, [sp, #20]
   27b48:	str	r0, [sl]
   27b4c:	str	r0, [sl, #4]
   27b50:	b	277f4 <__assert_fail@plt+0x1654c>
   27b54:	mov	r0, #996	; 0x3e4
   27b58:	bl	2ab48 <__assert_fail@plt+0x198a0>
   27b5c:	cmp	r0, #0
   27b60:	beq	27a10 <__assert_fail@plt+0x16768>
   27b64:	ldr	ip, [r5, #56]	; 0x38
   27b68:	mov	r2, #4
   27b6c:	mov	r3, #1
   27b70:	mov	r1, #0
   27b74:	str	ip, [r0]
   27b78:	str	r0, [r5, #56]	; 0x38
   27b7c:	b	26b54 <__assert_fail@plt+0x158ac>
   27b80:	mov	r0, #12
   27b84:	b	27764 <__assert_fail@plt+0x164bc>
   27b88:	mov	r3, r8
   27b8c:	mov	r7, r8
   27b90:	b	26cd0 <__assert_fail@plt+0x15a28>
   27b94:	cmp	r2, #16
   27b98:	beq	27a6c <__assert_fail@plt+0x167c4>
   27b9c:	b	27588 <__assert_fail@plt+0x162e0>
   27ba0:	mov	r1, r3
   27ba4:	b	26a24 <__assert_fail@plt+0x1577c>
   27ba8:	mov	r9, r5
   27bac:	b	279a8 <__assert_fail@plt+0x16700>
   27bb0:	mov	r0, #12
   27bb4:	b	26ee4 <__assert_fail@plt+0x15c3c>
   27bb8:	ldr	r5, [r6]
   27bbc:	str	r8, [r4, #52]	; 0x34
   27bc0:	b	26934 <__assert_fail@plt+0x1568c>
   27bc4:	mov	r0, r5
   27bc8:	ldrb	r3, [r4, #88]	; 0x58
   27bcc:	mov	r1, #1
   27bd0:	ldr	r2, [r4, #76]	; 0x4c
   27bd4:	str	r1, [r4, #92]	; 0x5c
   27bd8:	and	r3, r3, #251	; 0xfb
   27bdc:	cmp	r2, #0
   27be0:	movle	r2, r0
   27be4:	orrgt	r2, r0, #1
   27be8:	bfi	r3, r2, #1, #1
   27bec:	strb	r3, [r4, #88]	; 0x58
   27bf0:	b	27588 <__assert_fail@plt+0x162e0>
   27bf4:	bl	1129c <abort@plt>
   27bf8:	movw	r3, #54984	; 0xd6c8
   27bfc:	movt	r3, #3
   27c00:	str	r4, [sp, #-8]!
   27c04:	ldr	r3, [r3]
   27c08:	str	lr, [sp, #4]
   27c0c:	mov	lr, r2
   27c10:	mov	r2, r1
   27c14:	ldrb	ip, [lr, #28]
   27c18:	mov	r1, r0
   27c1c:	mov	r0, lr
   27c20:	ubfx	r4, r3, #25, #1
   27c24:	bfi	ip, r4, #4, #1
   27c28:	mvn	ip, ip, lsl #25
   27c2c:	mvn	ip, ip, lsr #25
   27c30:	strb	ip, [lr, #28]
   27c34:	bl	26668 <__assert_fail@plt+0x153c0>
   27c38:	subs	r3, r0, #0
   27c3c:	beq	27c70 <__assert_fail@plt+0x169c8>
   27c40:	movw	r1, #48576	; 0xbdc0
   27c44:	movt	r1, #2
   27c48:	ldr	r4, [sp]
   27c4c:	add	r3, r1, r3, lsl #2
   27c50:	add	r1, r1, #32
   27c54:	mov	r2, #5
   27c58:	mov	r0, #0
   27c5c:	ldr	lr, [sp, #4]
   27c60:	add	sp, sp, #8
   27c64:	ldr	r3, [r3, #416]	; 0x1a0
   27c68:	add	r1, r1, r3
   27c6c:	b	11098 <dcgettext@plt>
   27c70:	ldr	r4, [sp]
   27c74:	add	sp, sp, #4
   27c78:	pop	{pc}		; (ldr pc, [sp], #4)
   27c7c:	movw	r3, #54984	; 0xd6c8
   27c80:	movt	r3, #3
   27c84:	ldr	r2, [r3]
   27c88:	str	r0, [r3]
   27c8c:	mov	r0, r2
   27c90:	bx	lr
   27c94:	strd	r4, [sp, #-16]!
   27c98:	mov	r2, #256	; 0x100
   27c9c:	mov	r4, r0
   27ca0:	ldr	r5, [r0]
   27ca4:	mov	r1, #0
   27ca8:	str	r6, [sp, #8]
   27cac:	ldr	r6, [r0, #16]
   27cb0:	str	lr, [sp, #12]
   27cb4:	mov	r0, r6
   27cb8:	bl	111c4 <memset@plt>
   27cbc:	ldr	r1, [r5, #36]	; 0x24
   27cc0:	mov	r3, r6
   27cc4:	mov	r0, r4
   27cc8:	add	r2, r1, #12
   27ccc:	add	r1, r1, #8
   27cd0:	bl	196bc <__assert_fail@plt+0x8414>
   27cd4:	ldr	r3, [r5, #36]	; 0x24
   27cd8:	ldr	r0, [r5, #40]	; 0x28
   27cdc:	cmp	r3, r0
   27ce0:	beq	27cfc <__assert_fail@plt+0x16a54>
   27ce4:	add	r2, r0, #12
   27ce8:	add	r1, r0, #8
   27cec:	mov	r3, r6
   27cf0:	mov	r0, r4
   27cf4:	bl	196bc <__assert_fail@plt+0x8414>
   27cf8:	ldr	r0, [r5, #36]	; 0x24
   27cfc:	ldr	r1, [r5, #44]	; 0x2c
   27d00:	cmp	r1, r0
   27d04:	beq	27d20 <__assert_fail@plt+0x16a78>
   27d08:	add	r2, r1, #12
   27d0c:	mov	r0, r4
   27d10:	mov	r3, r6
   27d14:	add	r1, r1, #8
   27d18:	bl	196bc <__assert_fail@plt+0x8414>
   27d1c:	ldr	r0, [r5, #36]	; 0x24
   27d20:	ldr	r1, [r5, #48]	; 0x30
   27d24:	cmp	r1, r0
   27d28:	beq	27d40 <__assert_fail@plt+0x16a98>
   27d2c:	add	r2, r1, #12
   27d30:	mov	r3, r6
   27d34:	add	r1, r1, #8
   27d38:	mov	r0, r4
   27d3c:	bl	196bc <__assert_fail@plt+0x8414>
   27d40:	ldrb	r3, [r4, #28]
   27d44:	mov	r0, #0
   27d48:	ldr	r6, [sp, #8]
   27d4c:	orr	r3, r3, #8
   27d50:	strb	r3, [r4, #28]
   27d54:	ldrd	r4, [sp]
   27d58:	add	sp, sp, #12
   27d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   27d60:	cmp	r3, r2
   27d64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27d68:	strd	r6, [sp, #8]
   27d6c:	strd	r8, [sp, #16]
   27d70:	strd	sl, [sp, #24]
   27d74:	str	lr, [sp, #32]
   27d78:	sub	sp, sp, #52	; 0x34
   27d7c:	movle	lr, #0
   27d80:	movgt	lr, #1
   27d84:	ldr	ip, [sp, #88]	; 0x58
   27d88:	orrs	lr, lr, r3, lsr #31
   27d8c:	ldrb	lr, [sp, #100]	; 0x64
   27d90:	ldr	r8, [sp, #96]	; 0x60
   27d94:	add	r7, r3, ip
   27d98:	str	lr, [sp, #36]	; 0x24
   27d9c:	ldr	lr, [r0]
   27da0:	str	lr, [sp, #28]
   27da4:	bne	280a4 <__assert_fail@plt+0x16dfc>
   27da8:	cmp	r7, r2
   27dac:	mov	fp, r3
   27db0:	str	r2, [sp, #32]
   27db4:	mov	r4, r0
   27db8:	mov	r3, r2
   27dbc:	str	r1, [sp, #40]	; 0x28
   27dc0:	bgt	28050 <__assert_fail@plt+0x16da8>
   27dc4:	cmp	ip, #0
   27dc8:	cmpge	fp, r7
   27dcc:	bgt	28050 <__assert_fail@plt+0x16da8>
   27dd0:	cmp	r7, #0
   27dd4:	blt	28058 <__assert_fail@plt+0x16db0>
   27dd8:	cmp	fp, r7
   27ddc:	movgt	r2, #0
   27de0:	movle	r2, #1
   27de4:	ands	r3, r2, ip, lsr #31
   27de8:	bne	28058 <__assert_fail@plt+0x16db0>
   27dec:	movw	r2, #0
   27df0:	movt	r2, #0
   27df4:	cmp	r2, #0
   27df8:	mov	r5, #1
   27dfc:	moveq	r5, r2
   27e00:	movw	r2, #0
   27e04:	movt	r2, #0
   27e08:	mov	r0, #1
   27e0c:	cmp	r2, #0
   27e10:	moveq	r0, r2
   27e14:	orr	r5, r5, r0
   27e18:	ands	r5, r5, #255	; 0xff
   27e1c:	beq	27e30 <__assert_fail@plt+0x16b88>
   27e20:	ldr	r3, [sp, #28]
   27e24:	mov	r5, #1
   27e28:	add	r0, r3, #136	; 0x88
   27e2c:	bl	11020 <pthread_mutex_lock@plt>
   27e30:	ldrb	r0, [r4, #28]
   27e34:	cmp	fp, r7
   27e38:	ubfx	r3, r0, #5, #2
   27e3c:	str	r3, [sp, #44]	; 0x2c
   27e40:	bge	27e58 <__assert_fail@plt+0x16bb0>
   27e44:	ldr	r2, [r4, #16]
   27e48:	cmp	r2, #0
   27e4c:	beq	27e58 <__assert_fail@plt+0x16bb0>
   27e50:	tst	r0, #8
   27e54:	beq	27ff8 <__assert_fail@plt+0x16d50>
   27e58:	ubfx	r2, r0, #4, #1
   27e5c:	cmp	r8, #0
   27e60:	orreq	r2, r2, #1
   27e64:	ands	r2, r2, #255	; 0xff
   27e68:	bne	27fe4 <__assert_fail@plt+0x16d3c>
   27e6c:	and	r0, r0, #6
   27e70:	ldr	ip, [r4, #24]
   27e74:	cmp	r0, #4
   27e78:	beq	280b4 <__assert_fail@plt+0x16e0c>
   27e7c:	add	sl, ip, #1
   27e80:	mov	r6, sl
   27e84:	lsl	r0, sl, #3
   27e88:	bl	2ab48 <__assert_fail@plt+0x198a0>
   27e8c:	subs	r9, r0, #0
   27e90:	beq	280ac <__assert_fail@plt+0x16e04>
   27e94:	mov	r3, fp
   27e98:	mov	r0, r4
   27e9c:	str	sl, [sp, #8]
   27ea0:	ldr	ip, [sp, #92]	; 0x5c
   27ea4:	ldr	r2, [sp, #32]
   27ea8:	ldr	r1, [sp, #40]	; 0x28
   27eac:	stm	sp, {r7, ip}
   27eb0:	ldr	ip, [sp, #44]	; 0x2c
   27eb4:	str	r9, [sp, #12]
   27eb8:	str	ip, [sp, #16]
   27ebc:	bl	2103c <__assert_fail@plt+0xfd94>
   27ec0:	cmp	r0, #0
   27ec4:	beq	27f14 <__assert_fail@plt+0x16c6c>
   27ec8:	cmp	r0, #1
   27ecc:	mvneq	r4, #0
   27ed0:	beq	27ed8 <__assert_fail@plt+0x16c30>
   27ed4:	mvn	r4, #1
   27ed8:	mov	r0, r9
   27edc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   27ee0:	cmp	r5, #0
   27ee4:	beq	27ef4 <__assert_fail@plt+0x16c4c>
   27ee8:	ldr	r3, [sp, #28]
   27eec:	add	r0, r3, #136	; 0x88
   27ef0:	bl	10f90 <pthread_mutex_unlock@plt>
   27ef4:	mov	r0, r4
   27ef8:	add	sp, sp, #52	; 0x34
   27efc:	ldrd	r4, [sp]
   27f00:	ldrd	r6, [sp, #8]
   27f04:	ldrd	r8, [sp, #16]
   27f08:	ldrd	sl, [sp, #24]
   27f0c:	add	sp, sp, #32
   27f10:	pop	{pc}		; (ldr pc, [sp], #4)
   27f14:	cmp	r8, #0
   27f18:	beq	27fc8 <__assert_fail@plt+0x16d20>
   27f1c:	ldrb	r7, [r4, #28]
   27f20:	add	sl, r6, #1
   27f24:	ubfx	r7, r7, #1, #2
   27f28:	cmp	r7, #0
   27f2c:	beq	28008 <__assert_fail@plt+0x16d60>
   27f30:	cmp	r7, #1
   27f34:	beq	280e0 <__assert_fail@plt+0x16e38>
   27f38:	ldr	fp, [r8]
   27f3c:	mov	r7, #2
   27f40:	cmp	r6, #0
   27f44:	ble	28148 <__assert_fail@plt+0x16ea0>
   27f48:	ldrd	r0, [r8, #4]
   27f4c:	add	lr, r9, r6, lsl #3
   27f50:	mov	r3, r9
   27f54:	mov	r2, r6
   27f58:	sub	r0, r0, #4
   27f5c:	sub	r1, r1, #4
   27f60:	ldr	ip, [r3]
   27f64:	add	r3, r3, #8
   27f68:	str	ip, [r0, #4]!
   27f6c:	ldr	ip, [r3, #-4]
   27f70:	cmp	r3, lr
   27f74:	str	ip, [r1, #4]!
   27f78:	bne	27f60 <__assert_fail@plt+0x16cb8>
   27f7c:	ldr	fp, [r8]
   27f80:	cmp	r2, fp
   27f84:	bcs	27fb0 <__assert_fail@plt+0x16d08>
   27f88:	ldr	ip, [r8, #4]
   27f8c:	mvn	r3, #0
   27f90:	ldr	r0, [r8, #8]
   27f94:	str	r3, [r0, r2, lsl #2]
   27f98:	add	r6, r6, #1
   27f9c:	str	r3, [ip, r2, lsl #2]
   27fa0:	mov	r2, r6
   27fa4:	ldr	r1, [r8]
   27fa8:	cmp	r1, r6
   27fac:	bhi	27f94 <__assert_fail@plt+0x16cec>
   27fb0:	ldrb	r3, [r4, #28]
   27fb4:	bfi	r3, r7, #1, #2
   27fb8:	and	r2, r3, #6
   27fbc:	cmp	r2, #0
   27fc0:	strb	r3, [r4, #28]
   27fc4:	beq	27ed4 <__assert_fail@plt+0x16c2c>
   27fc8:	ldr	r3, [sp, #36]	; 0x24
   27fcc:	ldr	r4, [r9]
   27fd0:	cmp	r3, #0
   27fd4:	beq	27ed8 <__assert_fail@plt+0x16c30>
   27fd8:	ldr	r3, [r9, #4]
   27fdc:	sub	r4, r3, r4
   27fe0:	b	27ed8 <__assert_fail@plt+0x16c30>
   27fe4:	mov	sl, #1
   27fe8:	mov	r0, #8
   27fec:	mov	r6, sl
   27ff0:	mov	r8, #0
   27ff4:	b	27e88 <__assert_fail@plt+0x16be0>
   27ff8:	mov	r0, r4
   27ffc:	bl	27c94 <__assert_fail@plt+0x169ec>
   28000:	ldrb	r0, [r4, #28]
   28004:	b	27e58 <__assert_fail@plt+0x16bb0>
   28008:	lsl	r7, sl, #2
   2800c:	mov	fp, sl
   28010:	mov	r0, r7
   28014:	bl	2ab48 <__assert_fail@plt+0x198a0>
   28018:	cmp	r0, #0
   2801c:	str	r0, [r8, #4]
   28020:	beq	28154 <__assert_fail@plt+0x16eac>
   28024:	mov	r0, r7
   28028:	bl	2ab48 <__assert_fail@plt+0x198a0>
   2802c:	cmp	r0, #0
   28030:	mov	r7, r0
   28034:	str	r0, [r8, #8]
   28038:	movne	r7, #1
   2803c:	strne	sl, [r8]
   28040:	bne	27f40 <__assert_fail@plt+0x16c98>
   28044:	ldr	r0, [r8, #4]
   28048:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2804c:	b	27fb0 <__assert_fail@plt+0x16d08>
   28050:	mov	r7, r3
   28054:	b	27dec <__assert_fail@plt+0x16b44>
   28058:	movw	r2, #0
   2805c:	movt	r2, #0
   28060:	cmp	r2, #0
   28064:	mov	r5, #1
   28068:	moveq	r5, r2
   2806c:	movw	r2, #0
   28070:	movt	r2, #0
   28074:	mov	r1, #1
   28078:	cmp	r2, #0
   2807c:	moveq	r1, r2
   28080:	orr	r5, r5, r1
   28084:	ands	r5, r5, #255	; 0xff
   28088:	movne	r7, #0
   2808c:	bne	27e20 <__assert_fail@plt+0x16b78>
   28090:	ldrb	r0, [r4, #28]
   28094:	mov	r7, r5
   28098:	ubfx	r3, r0, #5, #2
   2809c:	str	r3, [sp, #44]	; 0x2c
   280a0:	b	27e58 <__assert_fail@plt+0x16bb0>
   280a4:	mvn	r4, #0
   280a8:	b	27ef4 <__assert_fail@plt+0x16c4c>
   280ac:	mvn	r4, #1
   280b0:	b	27ee0 <__assert_fail@plt+0x16c38>
   280b4:	ldr	sl, [r8]
   280b8:	cmp	sl, ip
   280bc:	bhi	27e7c <__assert_fail@plt+0x16bd4>
   280c0:	cmp	sl, #0
   280c4:	mov	r6, sl
   280c8:	bgt	27e84 <__assert_fail@plt+0x16bdc>
   280cc:	mov	sl, #1
   280d0:	mov	r8, r2
   280d4:	mov	r6, sl
   280d8:	mov	r0, #8
   280dc:	b	27e88 <__assert_fail@plt+0x16be0>
   280e0:	ldr	fp, [r8]
   280e4:	cmp	fp, sl
   280e8:	bcs	27f40 <__assert_fail@plt+0x16c98>
   280ec:	lsl	fp, sl, #2
   280f0:	ldr	r0, [r8, #4]
   280f4:	mov	r1, fp
   280f8:	bl	2ab84 <__assert_fail@plt+0x198dc>
   280fc:	subs	r2, r0, #0
   28100:	str	r2, [sp, #32]
   28104:	beq	28154 <__assert_fail@plt+0x16eac>
   28108:	mov	r1, fp
   2810c:	ldr	r0, [r8, #8]
   28110:	bl	2ab84 <__assert_fail@plt+0x198dc>
   28114:	ldr	r2, [sp, #32]
   28118:	subs	r1, r0, #0
   2811c:	movne	fp, sl
   28120:	strne	sl, [r8]
   28124:	strne	r1, [r8, #8]
   28128:	strne	r2, [r8, #4]
   2812c:	bne	27f40 <__assert_fail@plt+0x16c98>
   28130:	mov	r0, r2
   28134:	str	r1, [sp, #32]
   28138:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2813c:	ldr	r1, [sp, #32]
   28140:	mov	r7, r1
   28144:	b	27fb0 <__assert_fail@plt+0x16d08>
   28148:	mov	r6, #0
   2814c:	mov	r2, r6
   28150:	b	27f80 <__assert_fail@plt+0x16cd8>
   28154:	mov	r7, #0
   28158:	b	27fb0 <__assert_fail@plt+0x16d08>
   2815c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28160:	mov	r4, r0
   28164:	mov	r0, #0
   28168:	tst	r2, #1
   2816c:	movw	r5, #45820	; 0xb2fc
   28170:	movt	r5, #3
   28174:	movw	r3, #710	; 0x2c6
   28178:	movt	r3, #257	; 0x101
   2817c:	strd	r6, [sp, #8]
   28180:	mov	r6, r2
   28184:	str	r8, [sp, #16]
   28188:	mov	r7, r1
   2818c:	movne	r8, r5
   28190:	str	lr, [sp, #20]
   28194:	moveq	r8, r3
   28198:	str	r0, [r4]
   2819c:	str	r0, [r4, #4]
   281a0:	str	r0, [r4, #8]
   281a4:	mov	r0, #256	; 0x100
   281a8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   281ac:	cmp	r0, #0
   281b0:	str	r0, [r4, #16]
   281b4:	beq	28260 <__assert_fail@plt+0x16fb8>
   281b8:	lsl	r5, r6, #21
   281bc:	ands	r2, r6, #4
   281c0:	and	r5, r5, #4194304	; 0x400000
   281c4:	orr	r5, r5, r8
   281c8:	bne	28238 <__assert_fail@plt+0x16f90>
   281cc:	ldrb	r3, [r4, #28]
   281d0:	ubfx	r6, r6, #3, #1
   281d4:	mov	r1, #0
   281d8:	mov	r0, r7
   281dc:	str	r1, [r4, #20]
   281e0:	bfi	r3, r2, #7, #1
   281e4:	bfi	r3, r6, #4, #1
   281e8:	strb	r3, [r4, #28]
   281ec:	bl	11188 <strlen@plt>
   281f0:	mov	r2, r0
   281f4:	mov	r3, r5
   281f8:	mov	r1, r7
   281fc:	mov	r0, r4
   28200:	bl	26668 <__assert_fail@plt+0x153c0>
   28204:	cmp	r0, #16
   28208:	mov	r5, r0
   2820c:	beq	28248 <__assert_fail@plt+0x16fa0>
   28210:	cmp	r0, #0
   28214:	bne	2824c <__assert_fail@plt+0x16fa4>
   28218:	mov	r0, r4
   2821c:	bl	27c94 <__assert_fail@plt+0x169ec>
   28220:	mov	r0, r5
   28224:	ldrd	r4, [sp]
   28228:	ldrd	r6, [sp, #8]
   2822c:	ldr	r8, [sp, #16]
   28230:	add	sp, sp, #20
   28234:	pop	{pc}		; (ldr pc, [sp], #4)
   28238:	bic	r5, r5, #64	; 0x40
   2823c:	mov	r2, #1
   28240:	orr	r5, r5, #256	; 0x100
   28244:	b	281cc <__assert_fail@plt+0x16f24>
   28248:	mov	r5, #8
   2824c:	ldr	r0, [r4, #16]
   28250:	bl	2ad30 <__assert_fail@plt+0x19a88>
   28254:	mov	r3, #0
   28258:	str	r3, [r4, #16]
   2825c:	b	28220 <__assert_fail@plt+0x16f78>
   28260:	mov	r5, #12
   28264:	b	28220 <__assert_fail@plt+0x16f78>
   28268:	cmp	r0, #16
   2826c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28270:	strd	r6, [sp, #8]
   28274:	str	r8, [sp, #16]
   28278:	str	lr, [sp, #20]
   2827c:	bhi	282f8 <__assert_fail@plt+0x17050>
   28280:	movw	r1, #48576	; 0xbdc0
   28284:	movt	r1, #2
   28288:	add	ip, r1, r0, lsl #2
   2828c:	mov	r4, r3
   28290:	add	r1, r1, #32
   28294:	mov	r6, r2
   28298:	mov	r0, #0
   2829c:	ldr	r3, [ip, #416]	; 0x1a0
   282a0:	mov	r2, #5
   282a4:	add	r1, r1, r3
   282a8:	bl	11098 <dcgettext@plt>
   282ac:	mov	r7, r0
   282b0:	bl	11188 <strlen@plt>
   282b4:	cmp	r4, #0
   282b8:	add	r5, r0, #1
   282bc:	beq	282e0 <__assert_fail@plt+0x17038>
   282c0:	cmp	r5, r4
   282c4:	mov	r1, r7
   282c8:	subhi	r2, r4, #1
   282cc:	movhi	r3, #0
   282d0:	movls	r2, r5
   282d4:	mov	r0, r6
   282d8:	strbhi	r3, [r6, r2]
   282dc:	bl	11038 <memcpy@plt>
   282e0:	mov	r0, r5
   282e4:	ldrd	r4, [sp]
   282e8:	ldrd	r6, [sp, #8]
   282ec:	ldr	r8, [sp, #16]
   282f0:	add	sp, sp, #20
   282f4:	pop	{pc}		; (ldr pc, [sp], #4)
   282f8:	bl	1129c <abort@plt>
   282fc:	strd	r4, [sp, #-16]!
   28300:	mov	r4, r0
   28304:	ldr	r5, [r0]
   28308:	str	r6, [sp, #8]
   2830c:	str	lr, [sp, #12]
   28310:	cmp	r5, #0
   28314:	beq	2835c <__assert_fail@plt+0x170b4>
   28318:	movw	r2, #0
   2831c:	movt	r2, #0
   28320:	cmp	r2, #0
   28324:	mov	r3, #1
   28328:	moveq	r3, r2
   2832c:	movw	r2, #0
   28330:	movt	r2, #0
   28334:	mov	r1, #1
   28338:	cmp	r2, #0
   2833c:	moveq	r1, r2
   28340:	orr	r3, r3, r1
   28344:	tst	r3, #1
   28348:	beq	28354 <__assert_fail@plt+0x170ac>
   2834c:	add	r0, r5, #136	; 0x88
   28350:	bl	10ff0 <pthread_mutex_destroy@plt>
   28354:	mov	r0, r5
   28358:	bl	1aecc <__assert_fail@plt+0x9c24>
   2835c:	mov	r5, #0
   28360:	ldr	r0, [r4, #16]
   28364:	str	r5, [r4]
   28368:	str	r5, [r4, #4]
   2836c:	bl	2ad30 <__assert_fail@plt+0x19a88>
   28370:	str	r5, [r4, #16]
   28374:	ldr	r0, [r4, #20]
   28378:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2837c:	ldr	r6, [sp, #8]
   28380:	str	r5, [r4, #20]
   28384:	ldrd	r4, [sp]
   28388:	add	sp, sp, #12
   2838c:	pop	{pc}		; (ldr pc, [sp], #4)
   28390:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28394:	strd	r6, [sp, #8]
   28398:	strd	r8, [sp, #16]
   2839c:	strd	sl, [sp, #24]
   283a0:	str	lr, [sp, #32]
   283a4:	sub	sp, sp, #36	; 0x24
   283a8:	ldr	r6, [sp, #72]	; 0x48
   283ac:	bics	ip, r6, #7
   283b0:	movne	r0, #2
   283b4:	bne	2846c <__assert_fail@plt+0x171c4>
   283b8:	ands	sl, r6, #4
   283bc:	mov	r7, r3
   283c0:	str	r2, [sp, #28]
   283c4:	mov	r8, r1
   283c8:	mov	r5, r0
   283cc:	bne	28488 <__assert_fail@plt+0x171e0>
   283d0:	mov	r0, r1
   283d4:	bl	11188 <strlen@plt>
   283d8:	mov	r9, r0
   283dc:	movw	r2, #0
   283e0:	movt	r2, #0
   283e4:	ldr	fp, [r5]
   283e8:	cmp	r2, #0
   283ec:	mov	r4, #1
   283f0:	moveq	r4, r2
   283f4:	movw	r2, #0
   283f8:	movt	r2, #0
   283fc:	mov	r1, #1
   28400:	cmp	r2, #0
   28404:	moveq	r1, r2
   28408:	orr	r4, r4, r1
   2840c:	ands	r4, r4, #255	; 0xff
   28410:	beq	2841c <__assert_fail@plt+0x17174>
   28414:	add	r0, fp, #136	; 0x88
   28418:	bl	11020 <pthread_mutex_lock@plt>
   2841c:	ldrb	r2, [r5, #28]
   28420:	tst	r2, #16
   28424:	beq	28494 <__assert_fail@plt+0x171ec>
   28428:	mov	ip, #0
   2842c:	mov	r0, r5
   28430:	str	r9, [sp]
   28434:	mov	r3, sl
   28438:	mov	r1, r8
   2843c:	mov	r2, r9
   28440:	stmib	sp, {r9, ip}
   28444:	str	ip, [sp, #12]
   28448:	str	r6, [sp, #16]
   2844c:	bl	2103c <__assert_fail@plt+0xfd94>
   28450:	mov	r5, r0
   28454:	cmp	r4, #0
   28458:	beq	28464 <__assert_fail@plt+0x171bc>
   2845c:	add	r0, fp, #136	; 0x88
   28460:	bl	10f90 <pthread_mutex_unlock@plt>
   28464:	adds	r0, r5, #0
   28468:	movne	r0, #1
   2846c:	add	sp, sp, #36	; 0x24
   28470:	ldrd	r4, [sp]
   28474:	ldrd	r6, [sp, #8]
   28478:	ldrd	r8, [sp, #16]
   2847c:	ldrd	sl, [sp, #24]
   28480:	add	sp, sp, #32
   28484:	pop	{pc}		; (ldr pc, [sp], #4)
   28488:	ldr	sl, [r3]
   2848c:	ldr	r9, [r3, #4]
   28490:	b	283dc <__assert_fail@plt+0x17134>
   28494:	ldr	ip, [sp, #28]
   28498:	mov	r0, r5
   2849c:	mov	r3, sl
   284a0:	mov	r1, r8
   284a4:	mov	r2, r9
   284a8:	str	r9, [sp]
   284ac:	stmib	sp, {r9, ip}
   284b0:	str	r7, [sp, #12]
   284b4:	str	r6, [sp, #16]
   284b8:	bl	2103c <__assert_fail@plt+0xfd94>
   284bc:	mov	r5, r0
   284c0:	b	28454 <__assert_fail@plt+0x171ac>
   284c4:	cmp	r2, r3
   284c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   284cc:	movge	ip, #0
   284d0:	movlt	ip, #1
   284d4:	strd	r6, [sp, #8]
   284d8:	orrs	ip, ip, r3, lsr #31
   284dc:	strd	r8, [sp, #16]
   284e0:	strd	sl, [sp, #24]
   284e4:	str	lr, [sp, #32]
   284e8:	sub	sp, sp, #44	; 0x2c
   284ec:	ldr	fp, [r0]
   284f0:	ldr	r8, [sp, #80]	; 0x50
   284f4:	bne	28730 <__assert_fail@plt+0x17488>
   284f8:	movw	lr, #0
   284fc:	movt	lr, #0
   28500:	str	r1, [sp, #36]	; 0x24
   28504:	cmp	lr, #0
   28508:	mov	ip, #1
   2850c:	moveq	ip, lr
   28510:	movw	lr, #0
   28514:	movt	lr, #0
   28518:	mov	r6, #1
   2851c:	cmp	lr, #0
   28520:	mov	r4, r3
   28524:	moveq	r6, lr
   28528:	mov	r5, r0
   2852c:	orr	r3, ip, r6
   28530:	mov	r7, r2
   28534:	ands	r3, r3, #255	; 0xff
   28538:	str	r3, [sp, #28]
   2853c:	beq	28548 <__assert_fail@plt+0x172a0>
   28540:	add	r0, fp, #136	; 0x88
   28544:	bl	11020 <pthread_mutex_lock@plt>
   28548:	ldrb	r2, [r5, #28]
   2854c:	ubfx	r3, r2, #4, #1
   28550:	ubfx	r1, r2, #5, #2
   28554:	cmp	r8, #0
   28558:	orreq	r3, r3, #1
   2855c:	ands	r3, r3, #255	; 0xff
   28560:	str	r1, [sp, #32]
   28564:	bne	286c8 <__assert_fail@plt+0x17420>
   28568:	and	r2, r2, #6
   2856c:	ldr	r1, [r5, #24]
   28570:	cmp	r2, #4
   28574:	beq	28740 <__assert_fail@plt+0x17498>
   28578:	add	sl, r1, #1
   2857c:	mov	r6, sl
   28580:	lsl	r0, sl, #3
   28584:	bl	2ab48 <__assert_fail@plt+0x198a0>
   28588:	subs	r9, r0, #0
   2858c:	beq	28738 <__assert_fail@plt+0x17490>
   28590:	ldr	ip, [sp, #32]
   28594:	mov	r2, r7
   28598:	mov	r3, r4
   2859c:	mov	r0, r5
   285a0:	stm	sp, {r4, r7, sl}
   285a4:	str	r9, [sp, #12]
   285a8:	str	ip, [sp, #16]
   285ac:	ldr	r1, [sp, #36]	; 0x24
   285b0:	bl	2103c <__assert_fail@plt+0xfd94>
   285b4:	cmp	r0, #0
   285b8:	beq	28608 <__assert_fail@plt+0x17360>
   285bc:	cmp	r0, #1
   285c0:	mvneq	r4, #0
   285c4:	beq	285cc <__assert_fail@plt+0x17324>
   285c8:	mvn	r4, #1
   285cc:	mov	r0, r9
   285d0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   285d4:	ldr	r3, [sp, #28]
   285d8:	cmp	r3, #0
   285dc:	beq	285e8 <__assert_fail@plt+0x17340>
   285e0:	add	r0, fp, #136	; 0x88
   285e4:	bl	10f90 <pthread_mutex_unlock@plt>
   285e8:	mov	r0, r4
   285ec:	add	sp, sp, #44	; 0x2c
   285f0:	ldrd	r4, [sp]
   285f4:	ldrd	r6, [sp, #8]
   285f8:	ldrd	r8, [sp, #16]
   285fc:	ldrd	sl, [sp, #24]
   28600:	add	sp, sp, #32
   28604:	pop	{pc}		; (ldr pc, [sp], #4)
   28608:	cmp	r8, #0
   2860c:	beq	286bc <__assert_fail@plt+0x17414>
   28610:	ldrb	r7, [r5, #28]
   28614:	add	sl, r6, #1
   28618:	ubfx	r7, r7, #1, #2
   2861c:	cmp	r7, #0
   28620:	beq	286dc <__assert_fail@plt+0x17434>
   28624:	cmp	r7, #1
   28628:	beq	2876c <__assert_fail@plt+0x174c4>
   2862c:	ldr	r3, [r8]
   28630:	mov	r7, #2
   28634:	cmp	r6, #0
   28638:	ble	287dc <__assert_fail@plt+0x17534>
   2863c:	ldrd	r0, [r8, #4]
   28640:	add	lr, r9, r6, lsl #3
   28644:	mov	r3, r9
   28648:	mov	r2, r6
   2864c:	sub	r0, r0, #4
   28650:	sub	r1, r1, #4
   28654:	ldr	ip, [r3]
   28658:	add	r3, r3, #8
   2865c:	str	ip, [r0, #4]!
   28660:	ldr	ip, [r3, #-4]
   28664:	cmp	r3, lr
   28668:	str	ip, [r1, #4]!
   2866c:	bne	28654 <__assert_fail@plt+0x173ac>
   28670:	ldr	r3, [r8]
   28674:	cmp	r2, r3
   28678:	bcs	286a4 <__assert_fail@plt+0x173fc>
   2867c:	ldr	ip, [r8, #4]
   28680:	mvn	r3, #0
   28684:	ldr	r0, [r8, #8]
   28688:	str	r3, [r0, r2, lsl #2]
   2868c:	add	r6, r6, #1
   28690:	str	r3, [ip, r2, lsl #2]
   28694:	mov	r2, r6
   28698:	ldr	r1, [r8]
   2869c:	cmp	r1, r6
   286a0:	bhi	28688 <__assert_fail@plt+0x173e0>
   286a4:	ldrb	r3, [r5, #28]
   286a8:	bfi	r3, r7, #1, #2
   286ac:	and	r2, r3, #6
   286b0:	cmp	r2, #0
   286b4:	strb	r3, [r5, #28]
   286b8:	beq	285c8 <__assert_fail@plt+0x17320>
   286bc:	ldr	r3, [r9, #4]
   286c0:	sub	r4, r3, r4
   286c4:	b	285cc <__assert_fail@plt+0x17324>
   286c8:	mov	sl, #1
   286cc:	mov	r0, #8
   286d0:	mov	r6, sl
   286d4:	mov	r8, #0
   286d8:	b	28584 <__assert_fail@plt+0x172dc>
   286dc:	lsl	r7, sl, #2
   286e0:	str	sl, [sp, #32]
   286e4:	mov	r0, r7
   286e8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   286ec:	cmp	r0, #0
   286f0:	str	r0, [r8, #4]
   286f4:	ldr	r3, [sp, #32]
   286f8:	beq	287e8 <__assert_fail@plt+0x17540>
   286fc:	mov	r0, r7
   28700:	str	r3, [sp, #32]
   28704:	bl	2ab48 <__assert_fail@plt+0x198a0>
   28708:	ldr	r3, [sp, #32]
   2870c:	cmp	r0, #0
   28710:	mov	r7, r0
   28714:	movne	r7, #1
   28718:	str	r0, [r8, #8]
   2871c:	strne	r3, [r8]
   28720:	bne	28634 <__assert_fail@plt+0x1738c>
   28724:	ldr	r0, [r8, #4]
   28728:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2872c:	b	286a4 <__assert_fail@plt+0x173fc>
   28730:	mvn	r4, #0
   28734:	b	285e8 <__assert_fail@plt+0x17340>
   28738:	mvn	r4, #1
   2873c:	b	285d4 <__assert_fail@plt+0x1732c>
   28740:	ldr	sl, [r8]
   28744:	cmp	sl, r1
   28748:	bhi	28578 <__assert_fail@plt+0x172d0>
   2874c:	cmp	sl, #0
   28750:	mov	r6, sl
   28754:	bgt	28580 <__assert_fail@plt+0x172d8>
   28758:	mov	sl, #1
   2875c:	mov	r8, r3
   28760:	mov	r6, sl
   28764:	mov	r0, #8
   28768:	b	28584 <__assert_fail@plt+0x172dc>
   2876c:	ldr	r3, [r8]
   28770:	cmp	r3, sl
   28774:	bcs	28634 <__assert_fail@plt+0x1738c>
   28778:	lsl	r3, sl, #2
   2877c:	ldr	r0, [r8, #4]
   28780:	mov	r1, r3
   28784:	str	r3, [sp, #36]	; 0x24
   28788:	bl	2ab84 <__assert_fail@plt+0x198dc>
   2878c:	subs	r2, r0, #0
   28790:	str	r2, [sp, #32]
   28794:	beq	287e8 <__assert_fail@plt+0x17540>
   28798:	ldr	r3, [sp, #36]	; 0x24
   2879c:	ldr	r0, [r8, #8]
   287a0:	mov	r1, r3
   287a4:	bl	2ab84 <__assert_fail@plt+0x198dc>
   287a8:	ldr	r2, [sp, #32]
   287ac:	subs	r1, r0, #0
   287b0:	movne	r3, sl
   287b4:	strne	sl, [r8]
   287b8:	strne	r1, [r8, #8]
   287bc:	strne	r2, [r8, #4]
   287c0:	bne	28634 <__assert_fail@plt+0x1738c>
   287c4:	mov	r0, r2
   287c8:	str	r1, [sp, #32]
   287cc:	bl	2ad30 <__assert_fail@plt+0x19a88>
   287d0:	ldr	r1, [sp, #32]
   287d4:	mov	r7, r1
   287d8:	b	286a4 <__assert_fail@plt+0x173fc>
   287dc:	mov	r6, #0
   287e0:	mov	r2, r6
   287e4:	b	28674 <__assert_fail@plt+0x173cc>
   287e8:	mov	r7, #0
   287ec:	b	286a4 <__assert_fail@plt+0x173fc>
   287f0:	str	r4, [sp, #-8]!
   287f4:	mov	r4, #0
   287f8:	str	lr, [sp, #4]
   287fc:	sub	sp, sp, #16
   28800:	ldr	lr, [sp, #24]
   28804:	ldr	ip, [sp, #28]
   28808:	str	lr, [sp]
   2880c:	str	r4, [sp, #12]
   28810:	stmib	sp, {r2, ip}
   28814:	bl	27d60 <__assert_fail@plt+0x16ab8>
   28818:	add	sp, sp, #16
   2881c:	ldr	r4, [sp]
   28820:	add	sp, sp, #4
   28824:	pop	{pc}		; (ldr pc, [sp], #4)
   28828:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2882c:	strd	r6, [sp, #8]
   28830:	mov	r7, r3
   28834:	strd	r8, [sp, #16]
   28838:	str	sl, [sp, #24]
   2883c:	str	lr, [sp, #28]
   28840:	sub	sp, sp, #24
   28844:	ldr	r5, [sp, #56]	; 0x38
   28848:	ldr	r6, [sp, #68]	; 0x44
   2884c:	orr	r3, r5, r2
   28850:	orrs	r3, r3, r6
   28854:	bmi	28910 <__assert_fail@plt+0x17668>
   28858:	adds	r9, r2, r5
   2885c:	mov	r4, r2
   28860:	bvs	28910 <__assert_fail@plt+0x17668>
   28864:	cmp	r5, #0
   28868:	mov	sl, r0
   2886c:	beq	28918 <__assert_fail@plt+0x17670>
   28870:	cmp	r2, #0
   28874:	str	r1, [sp, #20]
   28878:	moveq	r8, r2
   2887c:	bne	288dc <__assert_fail@plt+0x17634>
   28880:	ldr	r0, [sp, #64]	; 0x40
   28884:	mov	r3, #1
   28888:	mov	ip, #0
   2888c:	mov	r2, r9
   28890:	mov	r1, r7
   28894:	str	ip, [sp]
   28898:	str	r6, [sp, #4]
   2889c:	str	r0, [sp, #8]
   288a0:	mov	r0, sl
   288a4:	str	r3, [sp, #12]
   288a8:	ldr	r3, [sp, #60]	; 0x3c
   288ac:	bl	27d60 <__assert_fail@plt+0x16ab8>
   288b0:	mov	r4, r0
   288b4:	mov	r0, r8
   288b8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   288bc:	mov	r0, r4
   288c0:	add	sp, sp, #24
   288c4:	ldrd	r4, [sp]
   288c8:	ldrd	r6, [sp, #8]
   288cc:	ldrd	r8, [sp, #16]
   288d0:	ldr	sl, [sp, #24]
   288d4:	add	sp, sp, #28
   288d8:	pop	{pc}		; (ldr pc, [sp], #4)
   288dc:	mov	r0, r9
   288e0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   288e4:	subs	r8, r0, #0
   288e8:	beq	28910 <__assert_fail@plt+0x17668>
   288ec:	mov	r2, r4
   288f0:	ldr	r1, [sp, #20]
   288f4:	bl	11038 <memcpy@plt>
   288f8:	mov	r1, r7
   288fc:	mov	r2, r5
   28900:	add	r0, r8, r4
   28904:	mov	r7, r8
   28908:	bl	11038 <memcpy@plt>
   2890c:	b	28880 <__assert_fail@plt+0x175d8>
   28910:	mvn	r4, #1
   28914:	b	288bc <__assert_fail@plt+0x17614>
   28918:	mov	r7, r1
   2891c:	mov	r8, r5
   28920:	b	28880 <__assert_fail@plt+0x175d8>
   28924:	strd	r4, [sp, #-32]!	; 0xffffffe0
   28928:	strd	r6, [sp, #8]
   2892c:	mov	r7, r3
   28930:	strd	r8, [sp, #16]
   28934:	str	sl, [sp, #24]
   28938:	str	lr, [sp, #28]
   2893c:	sub	sp, sp, #24
   28940:	ldr	r5, [sp, #56]	; 0x38
   28944:	ldr	r6, [sp, #72]	; 0x48
   28948:	orr	r3, r5, r2
   2894c:	orrs	r3, r3, r6
   28950:	bmi	28a08 <__assert_fail@plt+0x17760>
   28954:	adds	r9, r2, r5
   28958:	mov	r4, r2
   2895c:	bvs	28a08 <__assert_fail@plt+0x17760>
   28960:	cmp	r5, #0
   28964:	mov	sl, r0
   28968:	beq	28a10 <__assert_fail@plt+0x17768>
   2896c:	cmp	r2, #0
   28970:	str	r1, [sp, #20]
   28974:	moveq	r8, r2
   28978:	bne	289d4 <__assert_fail@plt+0x1772c>
   2897c:	ldr	r3, [sp, #64]	; 0x40
   28980:	mov	ip, #0
   28984:	mov	r2, r9
   28988:	mov	r1, r7
   2898c:	mov	r0, sl
   28990:	stm	sp, {r3, r6}
   28994:	ldr	r3, [sp, #68]	; 0x44
   28998:	str	ip, [sp, #12]
   2899c:	str	r3, [sp, #8]
   289a0:	ldr	r3, [sp, #60]	; 0x3c
   289a4:	bl	27d60 <__assert_fail@plt+0x16ab8>
   289a8:	mov	r4, r0
   289ac:	mov	r0, r8
   289b0:	bl	2ad30 <__assert_fail@plt+0x19a88>
   289b4:	mov	r0, r4
   289b8:	add	sp, sp, #24
   289bc:	ldrd	r4, [sp]
   289c0:	ldrd	r6, [sp, #8]
   289c4:	ldrd	r8, [sp, #16]
   289c8:	ldr	sl, [sp, #24]
   289cc:	add	sp, sp, #28
   289d0:	pop	{pc}		; (ldr pc, [sp], #4)
   289d4:	mov	r0, r9
   289d8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   289dc:	subs	r8, r0, #0
   289e0:	beq	28a08 <__assert_fail@plt+0x17760>
   289e4:	mov	r2, r4
   289e8:	ldr	r1, [sp, #20]
   289ec:	bl	11038 <memcpy@plt>
   289f0:	mov	r1, r7
   289f4:	mov	r2, r5
   289f8:	add	r0, r8, r4
   289fc:	mov	r7, r8
   28a00:	bl	11038 <memcpy@plt>
   28a04:	b	2897c <__assert_fail@plt+0x176d4>
   28a08:	mvn	r4, #1
   28a0c:	b	289b4 <__assert_fail@plt+0x1770c>
   28a10:	mov	r7, r1
   28a14:	mov	r8, r5
   28a18:	b	2897c <__assert_fail@plt+0x176d4>
   28a1c:	cmp	r2, #0
   28a20:	beq	28a48 <__assert_fail@plt+0x177a0>
   28a24:	ldrb	ip, [r0, #28]
   28a28:	push	{lr}		; (str lr, [sp, #-4]!)
   28a2c:	mov	lr, #1
   28a30:	bfi	ip, lr, #1, #2
   28a34:	strb	ip, [r0, #28]
   28a38:	strd	r2, [r1]
   28a3c:	ldr	r3, [sp, #4]
   28a40:	str	r3, [r1, #8]
   28a44:	pop	{pc}		; (ldr pc, [sp], #4)
   28a48:	ldrb	r3, [r0, #28]
   28a4c:	bfi	r3, r2, #1, #2
   28a50:	strb	r3, [r0, #28]
   28a54:	str	r2, [r1]
   28a58:	str	r2, [r1, #4]
   28a5c:	str	r2, [r1, #8]
   28a60:	bx	lr
   28a64:	cmp	r1, #0
   28a68:	strd	r4, [sp, #-16]!
   28a6c:	mov	ip, r3
   28a70:	str	r6, [sp, #8]
   28a74:	mov	r4, r0
   28a78:	str	lr, [sp, #12]
   28a7c:	sub	sp, sp, #32
   28a80:	ldr	r5, [sp, #48]	; 0x30
   28a84:	ldr	r6, [sp, #52]	; 0x34
   28a88:	beq	28bcc <__assert_fail@plt+0x17924>
   28a8c:	mov	r3, r1
   28a90:	mov	r1, #1
   28a94:	stm	sp, {r2, ip}
   28a98:	movw	r2, #49164	; 0xc00c
   28a9c:	movt	r2, #2
   28aa0:	bl	111f4 <__fprintf_chk@plt>
   28aa4:	mov	r2, #5
   28aa8:	movw	r1, #49184	; 0xc020
   28aac:	movt	r1, #2
   28ab0:	mov	r0, #0
   28ab4:	bl	11098 <dcgettext@plt>
   28ab8:	movw	ip, #2022	; 0x7e6
   28abc:	mov	r3, r0
   28ac0:	mov	r1, #1
   28ac4:	movw	r2, #49912	; 0xc2f8
   28ac8:	movt	r2, #2
   28acc:	mov	r0, r4
   28ad0:	str	ip, [sp]
   28ad4:	bl	111f4 <__fprintf_chk@plt>
   28ad8:	mov	r1, r4
   28adc:	mov	r0, #10
   28ae0:	bl	1108c <fputc_unlocked@plt>
   28ae4:	mov	r2, #5
   28ae8:	movw	r1, #49188	; 0xc024
   28aec:	movt	r1, #2
   28af0:	mov	r0, #0
   28af4:	bl	11098 <dcgettext@plt>
   28af8:	mov	r2, r0
   28afc:	mov	r1, #1
   28b00:	movw	r3, #49360	; 0xc0d0
   28b04:	movt	r3, #2
   28b08:	mov	r0, r4
   28b0c:	bl	111f4 <__fprintf_chk@plt>
   28b10:	mov	r1, r4
   28b14:	mov	r0, #10
   28b18:	bl	1108c <fputc_unlocked@plt>
   28b1c:	cmp	r6, #9
   28b20:	ldrls	pc, [pc, r6, lsl #2]
   28b24:	b	28e38 <__assert_fail@plt+0x17b90>
   28b28:			; <UNDEFINED> instruction: 0x00028bb8
   28b2c:	andeq	r8, r2, r8, ror #23
   28b30:	andeq	r8, r2, r4, lsr #24
   28b34:	andeq	r8, r2, r4, ror #24
   28b38:	andeq	r8, r2, ip, lsr #25
   28b3c:	andeq	r8, r2, r4, ror #25
   28b40:	andeq	r8, r2, ip, lsr #26
   28b44:	andeq	r8, r2, r0, lsl #27
   28b48:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28b4c:	andeq	r8, r2, r0, asr fp
   28b50:	movw	r1, #49664	; 0xc200
   28b54:	movt	r1, #2
   28b58:	mov	r2, #5
   28b5c:	mov	r0, #0
   28b60:	bl	11098 <dcgettext@plt>
   28b64:	ldr	lr, [r5, #4]
   28b68:	mov	r2, r0
   28b6c:	mov	r1, #1
   28b70:	mov	r0, r4
   28b74:	ldr	r3, [r5, #8]
   28b78:	ldr	ip, [r5, #32]
   28b7c:	str	lr, [sp]
   28b80:	ldr	lr, [r5, #12]
   28b84:	str	ip, [sp, #28]
   28b88:	ldr	ip, [r5, #28]
   28b8c:	str	r3, [sp, #4]
   28b90:	ldr	r3, [r5, #16]
   28b94:	str	lr, [sp, #8]
   28b98:	ldr	lr, [r5, #20]
   28b9c:	str	ip, [sp, #24]
   28ba0:	ldr	ip, [r5, #24]
   28ba4:	str	r3, [sp, #12]
   28ba8:	ldr	r3, [r5]
   28bac:	str	lr, [sp, #16]
   28bb0:	str	ip, [sp, #20]
   28bb4:	bl	111f4 <__fprintf_chk@plt>
   28bb8:	add	sp, sp, #32
   28bbc:	ldrd	r4, [sp]
   28bc0:	ldr	r6, [sp, #8]
   28bc4:	add	sp, sp, #12
   28bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   28bcc:	mov	r3, r2
   28bd0:	mov	r1, #1
   28bd4:	str	ip, [sp]
   28bd8:	movw	r2, #49176	; 0xc018
   28bdc:	movt	r2, #2
   28be0:	bl	111f4 <__fprintf_chk@plt>
   28be4:	b	28aa4 <__assert_fail@plt+0x177fc>
   28be8:	mov	r2, #5
   28bec:	movw	r1, #49396	; 0xc0f4
   28bf0:	movt	r1, #2
   28bf4:	mov	r0, #0
   28bf8:	bl	11098 <dcgettext@plt>
   28bfc:	ldr	r3, [r5]
   28c00:	mov	r2, r0
   28c04:	mov	r1, #1
   28c08:	mov	r0, r4
   28c0c:	add	sp, sp, #32
   28c10:	ldrd	r4, [sp]
   28c14:	ldr	r6, [sp, #8]
   28c18:	ldr	lr, [sp, #12]
   28c1c:	add	sp, sp, #16
   28c20:	b	111f4 <__fprintf_chk@plt>
   28c24:	mov	r2, #5
   28c28:	movw	r1, #49412	; 0xc104
   28c2c:	movt	r1, #2
   28c30:	mov	r0, #0
   28c34:	bl	11098 <dcgettext@plt>
   28c38:	ldm	r5, {r3, ip}
   28c3c:	mov	r2, r0
   28c40:	mov	r1, #1
   28c44:	mov	r0, r4
   28c48:	str	ip, [sp, #48]	; 0x30
   28c4c:	add	sp, sp, #32
   28c50:	ldrd	r4, [sp]
   28c54:	ldr	r6, [sp, #8]
   28c58:	ldr	lr, [sp, #12]
   28c5c:	add	sp, sp, #16
   28c60:	b	111f4 <__fprintf_chk@plt>
   28c64:	mov	r2, #5
   28c68:	movw	r1, #49436	; 0xc11c
   28c6c:	movt	r1, #2
   28c70:	mov	r0, #0
   28c74:	bl	11098 <dcgettext@plt>
   28c78:	ldm	r5, {r3, lr}
   28c7c:	mov	r2, r0
   28c80:	mov	r1, #1
   28c84:	mov	r0, r4
   28c88:	ldr	ip, [r5, #8]
   28c8c:	str	lr, [sp, #48]	; 0x30
   28c90:	str	ip, [sp, #52]	; 0x34
   28c94:	add	sp, sp, #32
   28c98:	ldrd	r4, [sp]
   28c9c:	ldr	r6, [sp, #8]
   28ca0:	ldr	lr, [sp, #12]
   28ca4:	add	sp, sp, #16
   28ca8:	b	111f4 <__fprintf_chk@plt>
   28cac:	mov	r2, #5
   28cb0:	movw	r1, #49464	; 0xc138
   28cb4:	movt	r1, #2
   28cb8:	mov	r0, #0
   28cbc:	bl	11098 <dcgettext@plt>
   28cc0:	ldmib	r5, {r3, ip, lr}
   28cc4:	mov	r2, r0
   28cc8:	mov	r1, #1
   28ccc:	mov	r0, r4
   28cd0:	str	r3, [sp]
   28cd4:	ldr	r3, [r5]
   28cd8:	stmib	sp, {ip, lr}
   28cdc:	bl	111f4 <__fprintf_chk@plt>
   28ce0:	b	28bb8 <__assert_fail@plt+0x17910>
   28ce4:	mov	r2, #5
   28ce8:	movw	r1, #49496	; 0xc158
   28cec:	movt	r1, #2
   28cf0:	mov	r0, #0
   28cf4:	bl	11098 <dcgettext@plt>
   28cf8:	ldmib	r5, {ip, lr}
   28cfc:	mov	r2, r0
   28d00:	mov	r1, #1
   28d04:	mov	r0, r4
   28d08:	ldr	r3, [r5, #16]
   28d0c:	str	ip, [sp]
   28d10:	ldr	ip, [r5, #12]
   28d14:	str	r3, [sp, #12]
   28d18:	ldr	r3, [r5]
   28d1c:	str	lr, [sp, #4]
   28d20:	str	ip, [sp, #8]
   28d24:	bl	111f4 <__fprintf_chk@plt>
   28d28:	b	28bb8 <__assert_fail@plt+0x17910>
   28d2c:	mov	r2, #5
   28d30:	movw	r1, #49532	; 0xc17c
   28d34:	movt	r1, #2
   28d38:	mov	r0, #0
   28d3c:	bl	11098 <dcgettext@plt>
   28d40:	ldr	lr, [r5, #4]
   28d44:	mov	r2, r0
   28d48:	mov	r1, #1
   28d4c:	mov	r0, r4
   28d50:	ldr	r3, [r5, #8]
   28d54:	ldr	ip, [r5, #20]
   28d58:	str	lr, [sp]
   28d5c:	ldr	lr, [r5, #12]
   28d60:	str	ip, [sp, #16]
   28d64:	ldr	ip, [r5, #16]
   28d68:	str	r3, [sp, #4]
   28d6c:	ldr	r3, [r5]
   28d70:	str	lr, [sp, #8]
   28d74:	str	ip, [sp, #12]
   28d78:	bl	111f4 <__fprintf_chk@plt>
   28d7c:	b	28bb8 <__assert_fail@plt+0x17910>
   28d80:	mov	r2, #5
   28d84:	movw	r1, #49572	; 0xc1a4
   28d88:	movt	r1, #2
   28d8c:	mov	r0, #0
   28d90:	bl	11098 <dcgettext@plt>
   28d94:	ldmib	r5, {r3, ip}
   28d98:	mov	r2, r0
   28d9c:	mov	r1, #1
   28da0:	mov	r0, r4
   28da4:	ldr	lr, [r5, #24]
   28da8:	str	r3, [sp]
   28dac:	ldr	r3, [r5, #12]
   28db0:	str	lr, [sp, #20]
   28db4:	ldr	lr, [r5, #20]
   28db8:	str	ip, [sp, #4]
   28dbc:	ldr	ip, [r5, #16]
   28dc0:	str	r3, [sp, #8]
   28dc4:	ldr	r3, [r5]
   28dc8:	str	ip, [sp, #12]
   28dcc:	str	lr, [sp, #16]
   28dd0:	bl	111f4 <__fprintf_chk@plt>
   28dd4:	b	28bb8 <__assert_fail@plt+0x17910>
   28dd8:	mov	r2, #5
   28ddc:	movw	r1, #49616	; 0xc1d0
   28de0:	movt	r1, #2
   28de4:	mov	r0, #0
   28de8:	bl	11098 <dcgettext@plt>
   28dec:	ldmib	r5, {ip, lr}
   28df0:	mov	r2, r0
   28df4:	mov	r1, #1
   28df8:	mov	r0, r4
   28dfc:	ldr	r3, [r5, #28]
   28e00:	str	ip, [sp]
   28e04:	ldr	ip, [r5, #12]
   28e08:	str	r3, [sp, #24]
   28e0c:	ldr	r3, [r5, #24]
   28e10:	str	lr, [sp, #4]
   28e14:	ldr	lr, [r5, #16]
   28e18:	str	ip, [sp, #8]
   28e1c:	ldr	ip, [r5, #20]
   28e20:	str	r3, [sp, #20]
   28e24:	ldr	r3, [r5]
   28e28:	str	lr, [sp, #12]
   28e2c:	str	ip, [sp, #16]
   28e30:	bl	111f4 <__fprintf_chk@plt>
   28e34:	b	28bb8 <__assert_fail@plt+0x17910>
   28e38:	movw	r1, #49716	; 0xc234
   28e3c:	movt	r1, #2
   28e40:	b	28b58 <__assert_fail@plt+0x178b0>
   28e44:	strd	r4, [sp, #-12]!
   28e48:	str	lr, [sp, #8]
   28e4c:	sub	sp, sp, #12
   28e50:	ldr	r5, [sp, #24]
   28e54:	ldr	ip, [r5]
   28e58:	cmp	ip, #0
   28e5c:	beq	28e78 <__assert_fail@plt+0x17bd0>
   28e60:	mov	lr, r5
   28e64:	mov	ip, #0
   28e68:	ldr	r4, [lr, #4]!
   28e6c:	add	ip, ip, #1
   28e70:	cmp	r4, #0
   28e74:	bne	28e68 <__assert_fail@plt+0x17bc0>
   28e78:	stm	sp, {r5, ip}
   28e7c:	bl	28a64 <__assert_fail@plt+0x177bc>
   28e80:	add	sp, sp, #12
   28e84:	ldrd	r4, [sp]
   28e88:	add	sp, sp, #8
   28e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   28e90:	push	{lr}		; (str lr, [sp, #-4]!)
   28e94:	sub	sp, sp, #52	; 0x34
   28e98:	ldr	ip, [sp, #56]	; 0x38
   28e9c:	ldr	lr, [ip]
   28ea0:	cmp	lr, #0
   28ea4:	str	lr, [sp, #8]
   28ea8:	beq	28f40 <__assert_fail@plt+0x17c98>
   28eac:	ldr	lr, [ip, #4]
   28eb0:	cmp	lr, #0
   28eb4:	str	lr, [sp, #12]
   28eb8:	beq	28f54 <__assert_fail@plt+0x17cac>
   28ebc:	ldr	lr, [ip, #8]
   28ec0:	cmp	lr, #0
   28ec4:	str	lr, [sp, #16]
   28ec8:	beq	28f5c <__assert_fail@plt+0x17cb4>
   28ecc:	ldr	lr, [ip, #12]
   28ed0:	cmp	lr, #0
   28ed4:	str	lr, [sp, #20]
   28ed8:	beq	28f64 <__assert_fail@plt+0x17cbc>
   28edc:	ldr	lr, [ip, #16]
   28ee0:	cmp	lr, #0
   28ee4:	str	lr, [sp, #24]
   28ee8:	beq	28f6c <__assert_fail@plt+0x17cc4>
   28eec:	ldr	lr, [ip, #20]
   28ef0:	cmp	lr, #0
   28ef4:	str	lr, [sp, #28]
   28ef8:	beq	28f74 <__assert_fail@plt+0x17ccc>
   28efc:	ldr	lr, [ip, #24]
   28f00:	cmp	lr, #0
   28f04:	str	lr, [sp, #32]
   28f08:	beq	28f7c <__assert_fail@plt+0x17cd4>
   28f0c:	ldr	lr, [ip, #28]
   28f10:	cmp	lr, #0
   28f14:	str	lr, [sp, #36]	; 0x24
   28f18:	beq	28f84 <__assert_fail@plt+0x17cdc>
   28f1c:	ldr	lr, [ip, #32]
   28f20:	cmp	lr, #0
   28f24:	str	lr, [sp, #40]	; 0x28
   28f28:	beq	28f8c <__assert_fail@plt+0x17ce4>
   28f2c:	ldr	ip, [ip, #36]	; 0x24
   28f30:	cmp	ip, #0
   28f34:	str	ip, [sp, #44]	; 0x2c
   28f38:	movne	lr, #10
   28f3c:	moveq	lr, #9
   28f40:	add	ip, sp, #8
   28f44:	stm	sp, {ip, lr}
   28f48:	bl	28a64 <__assert_fail@plt+0x177bc>
   28f4c:	add	sp, sp, #52	; 0x34
   28f50:	pop	{pc}		; (ldr pc, [sp], #4)
   28f54:	mov	lr, #1
   28f58:	b	28f40 <__assert_fail@plt+0x17c98>
   28f5c:	mov	lr, #2
   28f60:	b	28f40 <__assert_fail@plt+0x17c98>
   28f64:	mov	lr, #3
   28f68:	b	28f40 <__assert_fail@plt+0x17c98>
   28f6c:	mov	lr, #4
   28f70:	b	28f40 <__assert_fail@plt+0x17c98>
   28f74:	mov	lr, #5
   28f78:	b	28f40 <__assert_fail@plt+0x17c98>
   28f7c:	mov	lr, #6
   28f80:	b	28f40 <__assert_fail@plt+0x17c98>
   28f84:	mov	lr, #7
   28f88:	b	28f40 <__assert_fail@plt+0x17c98>
   28f8c:	mov	lr, #8
   28f90:	b	28f40 <__assert_fail@plt+0x17c98>
   28f94:	push	{r3}		; (str r3, [sp, #-4]!)
   28f98:	push	{lr}		; (str lr, [sp, #-4]!)
   28f9c:	sub	sp, sp, #56	; 0x38
   28fa0:	ldr	ip, [sp, #64]	; 0x40
   28fa4:	add	r3, sp, #64	; 0x40
   28fa8:	str	r3, [sp, #12]
   28fac:	cmp	ip, #0
   28fb0:	str	ip, [sp, #16]
   28fb4:	beq	2904c <__assert_fail@plt+0x17da4>
   28fb8:	ldr	ip, [sp, #68]	; 0x44
   28fbc:	cmp	ip, #0
   28fc0:	str	ip, [sp, #20]
   28fc4:	beq	29070 <__assert_fail@plt+0x17dc8>
   28fc8:	ldr	ip, [sp, #72]	; 0x48
   28fcc:	cmp	ip, #0
   28fd0:	str	ip, [sp, #24]
   28fd4:	beq	29078 <__assert_fail@plt+0x17dd0>
   28fd8:	ldr	ip, [sp, #76]	; 0x4c
   28fdc:	cmp	ip, #0
   28fe0:	str	ip, [sp, #28]
   28fe4:	beq	29080 <__assert_fail@plt+0x17dd8>
   28fe8:	ldr	ip, [sp, #80]	; 0x50
   28fec:	cmp	ip, #0
   28ff0:	str	ip, [sp, #32]
   28ff4:	beq	29088 <__assert_fail@plt+0x17de0>
   28ff8:	ldr	ip, [sp, #84]	; 0x54
   28ffc:	cmp	ip, #0
   29000:	str	ip, [sp, #36]	; 0x24
   29004:	beq	29090 <__assert_fail@plt+0x17de8>
   29008:	ldr	ip, [sp, #88]	; 0x58
   2900c:	cmp	ip, #0
   29010:	str	ip, [sp, #40]	; 0x28
   29014:	beq	29098 <__assert_fail@plt+0x17df0>
   29018:	ldr	ip, [sp, #92]	; 0x5c
   2901c:	cmp	ip, #0
   29020:	str	ip, [sp, #44]	; 0x2c
   29024:	beq	290a0 <__assert_fail@plt+0x17df8>
   29028:	ldr	ip, [sp, #96]	; 0x60
   2902c:	cmp	ip, #0
   29030:	str	ip, [sp, #48]	; 0x30
   29034:	beq	290a8 <__assert_fail@plt+0x17e00>
   29038:	ldr	r3, [sp, #100]	; 0x64
   2903c:	cmp	r3, #0
   29040:	str	r3, [sp, #52]	; 0x34
   29044:	movne	ip, #10
   29048:	moveq	ip, #9
   2904c:	ldr	r3, [sp, #60]	; 0x3c
   29050:	add	lr, sp, #16
   29054:	str	lr, [sp]
   29058:	str	ip, [sp, #4]
   2905c:	bl	28a64 <__assert_fail@plt+0x177bc>
   29060:	add	sp, sp, #56	; 0x38
   29064:	pop	{lr}		; (ldr lr, [sp], #4)
   29068:	add	sp, sp, #4
   2906c:	bx	lr
   29070:	mov	ip, #1
   29074:	b	2904c <__assert_fail@plt+0x17da4>
   29078:	mov	ip, #2
   2907c:	b	2904c <__assert_fail@plt+0x17da4>
   29080:	mov	ip, #3
   29084:	b	2904c <__assert_fail@plt+0x17da4>
   29088:	mov	ip, #4
   2908c:	b	2904c <__assert_fail@plt+0x17da4>
   29090:	mov	ip, #5
   29094:	b	2904c <__assert_fail@plt+0x17da4>
   29098:	mov	ip, #6
   2909c:	b	2904c <__assert_fail@plt+0x17da4>
   290a0:	mov	ip, #7
   290a4:	b	2904c <__assert_fail@plt+0x17da4>
   290a8:	mov	ip, #8
   290ac:	b	2904c <__assert_fail@plt+0x17da4>
   290b0:	movw	r3, #53716	; 0xd1d4
   290b4:	movt	r3, #3
   290b8:	str	r4, [sp, #-8]!
   290bc:	mov	r0, #10
   290c0:	ldr	r1, [r3]
   290c4:	str	lr, [sp, #4]
   290c8:	bl	1108c <fputc_unlocked@plt>
   290cc:	mov	r2, #5
   290d0:	movw	r1, #49776	; 0xc270
   290d4:	movt	r1, #2
   290d8:	mov	r0, #0
   290dc:	bl	11098 <dcgettext@plt>
   290e0:	mov	r1, r0
   290e4:	movw	r2, #49796	; 0xc284
   290e8:	movt	r2, #2
   290ec:	mov	r0, #1
   290f0:	bl	111dc <__printf_chk@plt>
   290f4:	mov	r2, #5
   290f8:	movw	r1, #49820	; 0xc29c
   290fc:	movt	r1, #2
   29100:	mov	r0, #0
   29104:	bl	11098 <dcgettext@plt>
   29108:	mov	r1, r0
   2910c:	movw	r3, #47352	; 0xb8f8
   29110:	movt	r3, #2
   29114:	movw	r2, #47392	; 0xb920
   29118:	movt	r2, #2
   2911c:	mov	r0, #1
   29120:	bl	111dc <__printf_chk@plt>
   29124:	mov	r2, #5
   29128:	movw	r1, #49840	; 0xc2b0
   2912c:	movt	r1, #2
   29130:	mov	r0, #0
   29134:	bl	11098 <dcgettext@plt>
   29138:	mov	r1, r0
   2913c:	movw	r2, #49880	; 0xc2d8
   29140:	movt	r2, #2
   29144:	mov	r0, #1
   29148:	ldr	r4, [sp]
   2914c:	ldr	lr, [sp, #4]
   29150:	add	sp, sp, #8
   29154:	b	111dc <__printf_chk@plt>
   29158:	strd	r4, [sp, #-16]!
   2915c:	mov	r4, r0
   29160:	mov	r5, r2
   29164:	str	r6, [sp, #8]
   29168:	mov	r6, r1
   2916c:	str	lr, [sp, #12]
   29170:	bl	2ae4c <__assert_fail@plt+0x19ba4>
   29174:	cmp	r0, #0
   29178:	beq	2918c <__assert_fail@plt+0x17ee4>
   2917c:	ldrd	r4, [sp]
   29180:	ldr	r6, [sp, #8]
   29184:	add	sp, sp, #12
   29188:	pop	{pc}		; (ldr pc, [sp], #4)
   2918c:	cmp	r4, #0
   29190:	beq	291a0 <__assert_fail@plt+0x17ef8>
   29194:	cmp	r6, #0
   29198:	cmpne	r5, #0
   2919c:	beq	2917c <__assert_fail@plt+0x17ed4>
   291a0:	bl	2975c <__assert_fail@plt+0x184b4>
   291a4:	str	r4, [sp, #-8]!
   291a8:	str	lr, [sp, #4]
   291ac:	bl	2ab48 <__assert_fail@plt+0x198a0>
   291b0:	cmp	r0, #0
   291b4:	beq	291c4 <__assert_fail@plt+0x17f1c>
   291b8:	ldr	r4, [sp]
   291bc:	add	sp, sp, #4
   291c0:	pop	{pc}		; (ldr pc, [sp], #4)
   291c4:	bl	2975c <__assert_fail@plt+0x184b4>
   291c8:	str	r4, [sp, #-8]!
   291cc:	str	lr, [sp, #4]
   291d0:	bl	2ab48 <__assert_fail@plt+0x198a0>
   291d4:	cmp	r0, #0
   291d8:	beq	291e8 <__assert_fail@plt+0x17f40>
   291dc:	ldr	r4, [sp]
   291e0:	add	sp, sp, #4
   291e4:	pop	{pc}		; (ldr pc, [sp], #4)
   291e8:	bl	2975c <__assert_fail@plt+0x184b4>
   291ec:	str	r4, [sp, #-8]!
   291f0:	str	lr, [sp, #4]
   291f4:	bl	2ab48 <__assert_fail@plt+0x198a0>
   291f8:	cmp	r0, #0
   291fc:	beq	2920c <__assert_fail@plt+0x17f64>
   29200:	ldr	r4, [sp]
   29204:	add	sp, sp, #4
   29208:	pop	{pc}		; (ldr pc, [sp], #4)
   2920c:	bl	2975c <__assert_fail@plt+0x184b4>
   29210:	strd	r4, [sp, #-16]!
   29214:	mov	r5, r0
   29218:	mov	r4, r1
   2921c:	str	r6, [sp, #8]
   29220:	str	lr, [sp, #12]
   29224:	bl	2ab84 <__assert_fail@plt+0x198dc>
   29228:	cmp	r0, #0
   2922c:	beq	29240 <__assert_fail@plt+0x17f98>
   29230:	ldrd	r4, [sp]
   29234:	ldr	r6, [sp, #8]
   29238:	add	sp, sp, #12
   2923c:	pop	{pc}		; (ldr pc, [sp], #4)
   29240:	adds	r4, r4, #0
   29244:	movne	r4, #1
   29248:	cmp	r5, #0
   2924c:	moveq	r4, #1
   29250:	cmp	r4, #0
   29254:	beq	29230 <__assert_fail@plt+0x17f88>
   29258:	bl	2975c <__assert_fail@plt+0x184b4>
   2925c:	cmp	r1, #0
   29260:	orreq	r1, r1, #1
   29264:	str	r4, [sp, #-8]!
   29268:	str	lr, [sp, #4]
   2926c:	bl	2ab84 <__assert_fail@plt+0x198dc>
   29270:	cmp	r0, #0
   29274:	beq	29284 <__assert_fail@plt+0x17fdc>
   29278:	ldr	r4, [sp]
   2927c:	add	sp, sp, #4
   29280:	pop	{pc}		; (ldr pc, [sp], #4)
   29284:	bl	2975c <__assert_fail@plt+0x184b4>
   29288:	strd	r4, [sp, #-16]!
   2928c:	mov	r4, r0
   29290:	mov	r5, r2
   29294:	str	r6, [sp, #8]
   29298:	mov	r6, r1
   2929c:	str	lr, [sp, #12]
   292a0:	bl	2ae4c <__assert_fail@plt+0x19ba4>
   292a4:	cmp	r0, #0
   292a8:	beq	292bc <__assert_fail@plt+0x18014>
   292ac:	ldrd	r4, [sp]
   292b0:	ldr	r6, [sp, #8]
   292b4:	add	sp, sp, #12
   292b8:	pop	{pc}		; (ldr pc, [sp], #4)
   292bc:	cmp	r4, #0
   292c0:	beq	292d0 <__assert_fail@plt+0x18028>
   292c4:	cmp	r6, #0
   292c8:	cmpne	r5, #0
   292cc:	beq	292ac <__assert_fail@plt+0x18004>
   292d0:	bl	2975c <__assert_fail@plt+0x184b4>
   292d4:	cmp	r2, #0
   292d8:	cmpne	r1, #0
   292dc:	str	r4, [sp, #-8]!
   292e0:	moveq	r2, #1
   292e4:	str	lr, [sp, #4]
   292e8:	moveq	r1, r2
   292ec:	bl	2ae4c <__assert_fail@plt+0x19ba4>
   292f0:	cmp	r0, #0
   292f4:	beq	29304 <__assert_fail@plt+0x1805c>
   292f8:	ldr	r4, [sp]
   292fc:	add	sp, sp, #4
   29300:	pop	{pc}		; (ldr pc, [sp], #4)
   29304:	bl	2975c <__assert_fail@plt+0x184b4>
   29308:	mov	r2, r1
   2930c:	mov	r1, r0
   29310:	str	r4, [sp, #-8]!
   29314:	mov	r0, #0
   29318:	str	lr, [sp, #4]
   2931c:	bl	2ae4c <__assert_fail@plt+0x19ba4>
   29320:	cmp	r0, #0
   29324:	beq	29334 <__assert_fail@plt+0x1808c>
   29328:	ldr	r4, [sp]
   2932c:	add	sp, sp, #4
   29330:	pop	{pc}		; (ldr pc, [sp], #4)
   29334:	bl	2975c <__assert_fail@plt+0x184b4>
   29338:	cmp	r1, #0
   2933c:	cmpne	r0, #0
   29340:	str	r4, [sp, #-8]!
   29344:	moveq	r2, #1
   29348:	movne	r2, r1
   2934c:	str	lr, [sp, #4]
   29350:	movne	r1, r0
   29354:	moveq	r1, r2
   29358:	mov	r0, #0
   2935c:	bl	2ae4c <__assert_fail@plt+0x19ba4>
   29360:	cmp	r0, #0
   29364:	beq	29374 <__assert_fail@plt+0x180cc>
   29368:	ldr	r4, [sp]
   2936c:	add	sp, sp, #4
   29370:	pop	{pc}		; (ldr pc, [sp], #4)
   29374:	bl	2975c <__assert_fail@plt+0x184b4>
   29378:	cmp	r0, #0
   2937c:	strd	r4, [sp, #-16]!
   29380:	mov	r5, r1
   29384:	ldr	r4, [r1]
   29388:	str	r6, [sp, #8]
   2938c:	str	lr, [sp, #12]
   29390:	beq	293d8 <__assert_fail@plt+0x18130>
   29394:	lsr	r3, r4, #1
   29398:	add	r3, r3, #1
   2939c:	adds	r4, r4, r3
   293a0:	bcs	293d4 <__assert_fail@plt+0x1812c>
   293a4:	mov	r2, #1
   293a8:	mov	r1, r4
   293ac:	bl	2ae4c <__assert_fail@plt+0x19ba4>
   293b0:	cmp	r0, #0
   293b4:	beq	293cc <__assert_fail@plt+0x18124>
   293b8:	ldr	r6, [sp, #8]
   293bc:	str	r4, [r5]
   293c0:	ldrd	r4, [sp]
   293c4:	add	sp, sp, #12
   293c8:	pop	{pc}		; (ldr pc, [sp], #4)
   293cc:	cmp	r4, #0
   293d0:	beq	293b8 <__assert_fail@plt+0x18110>
   293d4:	bl	2975c <__assert_fail@plt+0x184b4>
   293d8:	cmp	r4, #0
   293dc:	mov	r2, #1
   293e0:	moveq	r4, #64	; 0x40
   293e4:	mov	r1, r4
   293e8:	bl	2ae4c <__assert_fail@plt+0x19ba4>
   293ec:	cmp	r0, #0
   293f0:	bne	293b8 <__assert_fail@plt+0x18110>
   293f4:	b	293d4 <__assert_fail@plt+0x1812c>
   293f8:	cmp	r0, #0
   293fc:	strd	r4, [sp, #-16]!
   29400:	mov	r5, r1
   29404:	ldr	r4, [r1]
   29408:	str	r6, [sp, #8]
   2940c:	mov	r6, r2
   29410:	str	lr, [sp, #12]
   29414:	beq	2945c <__assert_fail@plt+0x181b4>
   29418:	lsr	r3, r4, #1
   2941c:	add	r3, r3, #1
   29420:	adds	r4, r4, r3
   29424:	bcs	29458 <__assert_fail@plt+0x181b0>
   29428:	mov	r1, r4
   2942c:	bl	2ae4c <__assert_fail@plt+0x19ba4>
   29430:	cmp	r0, #0
   29434:	beq	2944c <__assert_fail@plt+0x181a4>
   29438:	ldr	r6, [sp, #8]
   2943c:	str	r4, [r5]
   29440:	ldrd	r4, [sp]
   29444:	add	sp, sp, #12
   29448:	pop	{pc}		; (ldr pc, [sp], #4)
   2944c:	cmp	r4, #0
   29450:	cmpne	r6, #0
   29454:	beq	29438 <__assert_fail@plt+0x18190>
   29458:	bl	2975c <__assert_fail@plt+0x184b4>
   2945c:	cmp	r4, #0
   29460:	bne	29474 <__assert_fail@plt+0x181cc>
   29464:	mov	r4, #64	; 0x40
   29468:	udiv	r4, r4, r2
   2946c:	cmp	r2, #64	; 0x40
   29470:	addhi	r4, r4, #1
   29474:	mov	r2, r6
   29478:	mov	r1, r4
   2947c:	mov	r0, #0
   29480:	bl	2ae4c <__assert_fail@plt+0x19ba4>
   29484:	cmp	r0, #0
   29488:	bne	29438 <__assert_fail@plt+0x18190>
   2948c:	b	29458 <__assert_fail@plt+0x181b0>
   29490:	ldr	ip, [r1]
   29494:	strd	r4, [sp, #-24]!	; 0xffffffe8
   29498:	strd	r6, [sp, #8]
   2949c:	mov	r7, r1
   294a0:	mov	r6, r0
   294a4:	str	r8, [sp, #16]
   294a8:	mvn	r8, r3
   294ac:	lsr	r8, r8, #31
   294b0:	str	lr, [sp, #20]
   294b4:	asr	r1, ip, #1
   294b8:	ldr	lr, [sp, #24]
   294bc:	adds	r4, ip, r1
   294c0:	mvnvs	r4, #-2147483648	; 0x80000000
   294c4:	cmp	r3, r4
   294c8:	movge	r1, #0
   294cc:	andlt	r1, r8, #1
   294d0:	cmp	r1, #0
   294d4:	movne	r4, r3
   294d8:	smull	r0, r1, r4, lr
   294dc:	cmp	r1, r0, asr #31
   294e0:	bne	29590 <__assert_fail@plt+0x182e8>
   294e4:	cmp	r0, #63	; 0x3f
   294e8:	mov	r5, r0
   294ec:	ble	2955c <__assert_fail@plt+0x182b4>
   294f0:	cmp	r6, #0
   294f4:	sub	r1, r4, ip
   294f8:	streq	r6, [r7]
   294fc:	cmp	r1, r2
   29500:	bge	29530 <__assert_fail@plt+0x18288>
   29504:	adds	r4, ip, r2
   29508:	bvs	2958c <__assert_fail@plt+0x182e4>
   2950c:	cmp	r4, r3
   29510:	movle	r3, #0
   29514:	andgt	r3, r8, #1
   29518:	cmp	r3, #0
   2951c:	bne	2958c <__assert_fail@plt+0x182e4>
   29520:	smull	r0, r1, r4, lr
   29524:	cmp	r1, r0, asr #31
   29528:	mov	r5, r0
   2952c:	bne	2958c <__assert_fail@plt+0x182e4>
   29530:	mov	r1, r5
   29534:	mov	r0, r6
   29538:	bl	2ab84 <__assert_fail@plt+0x198dc>
   2953c:	cmp	r0, #0
   29540:	beq	29570 <__assert_fail@plt+0x182c8>
   29544:	ldr	r8, [sp, #16]
   29548:	str	r4, [r7]
   2954c:	ldrd	r4, [sp]
   29550:	ldrd	r6, [sp, #8]
   29554:	add	sp, sp, #20
   29558:	pop	{pc}		; (ldr pc, [sp], #4)
   2955c:	mov	r0, #64	; 0x40
   29560:	sdiv	r4, r0, lr
   29564:	mls	r5, lr, r4, r0
   29568:	sub	r5, r0, r5
   2956c:	b	294f0 <__assert_fail@plt+0x18248>
   29570:	adds	r5, r5, #0
   29574:	movne	r5, #1
   29578:	cmp	r6, #0
   2957c:	movne	r6, r5
   29580:	moveq	r6, #1
   29584:	cmp	r6, #0
   29588:	beq	29544 <__assert_fail@plt+0x1829c>
   2958c:	bl	2975c <__assert_fail@plt+0x184b4>
   29590:	mvn	r0, #-2147483648	; 0x80000000
   29594:	b	29560 <__assert_fail@plt+0x182b8>
   29598:	mov	r1, #1
   2959c:	str	r4, [sp, #-8]!
   295a0:	str	lr, [sp, #4]
   295a4:	bl	2aad4 <__assert_fail@plt+0x1982c>
   295a8:	cmp	r0, #0
   295ac:	beq	295bc <__assert_fail@plt+0x18314>
   295b0:	ldr	r4, [sp]
   295b4:	add	sp, sp, #4
   295b8:	pop	{pc}		; (ldr pc, [sp], #4)
   295bc:	bl	2975c <__assert_fail@plt+0x184b4>
   295c0:	mov	r1, #1
   295c4:	str	r4, [sp, #-8]!
   295c8:	str	lr, [sp, #4]
   295cc:	bl	2aad4 <__assert_fail@plt+0x1982c>
   295d0:	cmp	r0, #0
   295d4:	beq	295e4 <__assert_fail@plt+0x1833c>
   295d8:	ldr	r4, [sp]
   295dc:	add	sp, sp, #4
   295e0:	pop	{pc}		; (ldr pc, [sp], #4)
   295e4:	bl	2975c <__assert_fail@plt+0x184b4>
   295e8:	str	r4, [sp, #-8]!
   295ec:	str	lr, [sp, #4]
   295f0:	bl	2aad4 <__assert_fail@plt+0x1982c>
   295f4:	cmp	r0, #0
   295f8:	beq	29608 <__assert_fail@plt+0x18360>
   295fc:	ldr	r4, [sp]
   29600:	add	sp, sp, #4
   29604:	pop	{pc}		; (ldr pc, [sp], #4)
   29608:	bl	2975c <__assert_fail@plt+0x184b4>
   2960c:	str	r4, [sp, #-8]!
   29610:	str	lr, [sp, #4]
   29614:	bl	2aad4 <__assert_fail@plt+0x1982c>
   29618:	cmp	r0, #0
   2961c:	beq	2962c <__assert_fail@plt+0x18384>
   29620:	ldr	r4, [sp]
   29624:	add	sp, sp, #4
   29628:	pop	{pc}		; (ldr pc, [sp], #4)
   2962c:	bl	2975c <__assert_fail@plt+0x184b4>
   29630:	strd	r4, [sp, #-16]!
   29634:	mov	r4, r1
   29638:	str	r6, [sp, #8]
   2963c:	mov	r6, r0
   29640:	mov	r0, r1
   29644:	str	lr, [sp, #12]
   29648:	bl	2ab48 <__assert_fail@plt+0x198a0>
   2964c:	subs	r5, r0, #0
   29650:	beq	29674 <__assert_fail@plt+0x183cc>
   29654:	mov	r2, r4
   29658:	mov	r1, r6
   2965c:	bl	11038 <memcpy@plt>
   29660:	mov	r0, r5
   29664:	ldrd	r4, [sp]
   29668:	ldr	r6, [sp, #8]
   2966c:	add	sp, sp, #12
   29670:	pop	{pc}		; (ldr pc, [sp], #4)
   29674:	bl	2975c <__assert_fail@plt+0x184b4>
   29678:	strd	r4, [sp, #-16]!
   2967c:	mov	r4, r1
   29680:	str	r6, [sp, #8]
   29684:	mov	r6, r0
   29688:	mov	r0, r1
   2968c:	str	lr, [sp, #12]
   29690:	bl	2ab48 <__assert_fail@plt+0x198a0>
   29694:	subs	r5, r0, #0
   29698:	beq	296bc <__assert_fail@plt+0x18414>
   2969c:	mov	r2, r4
   296a0:	mov	r1, r6
   296a4:	bl	11038 <memcpy@plt>
   296a8:	mov	r0, r5
   296ac:	ldrd	r4, [sp]
   296b0:	ldr	r6, [sp, #8]
   296b4:	add	sp, sp, #12
   296b8:	pop	{pc}		; (ldr pc, [sp], #4)
   296bc:	bl	2975c <__assert_fail@plt+0x184b4>
   296c0:	strd	r4, [sp, #-16]!
   296c4:	mov	r4, r1
   296c8:	str	r6, [sp, #8]
   296cc:	mov	r6, r0
   296d0:	add	r0, r1, #1
   296d4:	str	lr, [sp, #12]
   296d8:	bl	2ab48 <__assert_fail@plt+0x198a0>
   296dc:	subs	r5, r0, #0
   296e0:	beq	2970c <__assert_fail@plt+0x18464>
   296e4:	mov	r3, #0
   296e8:	mov	r1, r6
   296ec:	mov	r2, r4
   296f0:	strb	r3, [r5, r4]
   296f4:	bl	11038 <memcpy@plt>
   296f8:	mov	r0, r5
   296fc:	ldrd	r4, [sp]
   29700:	ldr	r6, [sp, #8]
   29704:	add	sp, sp, #12
   29708:	pop	{pc}		; (ldr pc, [sp], #4)
   2970c:	bl	2975c <__assert_fail@plt+0x184b4>
   29710:	strd	r4, [sp, #-16]!
   29714:	str	r6, [sp, #8]
   29718:	mov	r6, r0
   2971c:	str	lr, [sp, #12]
   29720:	bl	11188 <strlen@plt>
   29724:	add	r4, r0, #1
   29728:	mov	r0, r4
   2972c:	bl	2ab48 <__assert_fail@plt+0x198a0>
   29730:	subs	r5, r0, #0
   29734:	beq	29758 <__assert_fail@plt+0x184b0>
   29738:	mov	r2, r4
   2973c:	mov	r1, r6
   29740:	bl	11038 <memcpy@plt>
   29744:	mov	r0, r5
   29748:	ldrd	r4, [sp]
   2974c:	ldr	r6, [sp, #8]
   29750:	add	sp, sp, #12
   29754:	pop	{pc}		; (ldr pc, [sp], #4)
   29758:	bl	2975c <__assert_fail@plt+0x184b4>
   2975c:	movw	r3, #53616	; 0xd170
   29760:	movt	r3, #3
   29764:	str	r4, [sp, #-8]!
   29768:	ldr	r4, [r3]
   2976c:	mov	r2, #5
   29770:	movw	r1, #49960	; 0xc328
   29774:	movt	r1, #2
   29778:	mov	r0, #0
   2977c:	str	lr, [sp, #4]
   29780:	bl	11098 <dcgettext@plt>
   29784:	mov	r3, r0
   29788:	movw	r2, #47620	; 0xba04
   2978c:	movt	r2, #2
   29790:	mov	r1, #0
   29794:	mov	r0, r4
   29798:	bl	11110 <error@plt>
   2979c:	bl	1129c <abort@plt>
   297a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   297a4:	strd	r6, [sp, #8]
   297a8:	mov	r6, r2
   297ac:	mov	r7, r3
   297b0:	str	r8, [sp, #16]
   297b4:	mov	r2, r1
   297b8:	mov	r1, #0
   297bc:	str	lr, [sp, #20]
   297c0:	sub	sp, sp, #16
   297c4:	mov	r8, r0
   297c8:	ldr	ip, [sp, #48]	; 0x30
   297cc:	add	r3, sp, #8
   297d0:	str	ip, [sp]
   297d4:	bl	29a70 <__assert_fail@plt+0x187c8>
   297d8:	subs	r4, r0, #0
   297dc:	bne	2982c <__assert_fail@plt+0x18584>
   297e0:	ldrd	r4, [sp, #8]
   297e4:	ldrd	r0, [sp, #40]	; 0x28
   297e8:	cmp	r4, r6
   297ec:	sbcs	r3, r5, r7
   297f0:	movlt	r3, #1
   297f4:	movge	r3, #0
   297f8:	cmp	r0, r4
   297fc:	sbcs	r2, r1, r5
   29800:	orrlt	r3, r3, #1
   29804:	cmp	r3, #0
   29808:	bne	298ac <__assert_fail@plt+0x18604>
   2980c:	mov	r0, r4
   29810:	mov	r1, r5
   29814:	add	sp, sp, #16
   29818:	ldrd	r4, [sp]
   2981c:	ldrd	r6, [sp, #8]
   29820:	ldr	r8, [sp, #16]
   29824:	add	sp, sp, #20
   29828:	pop	{pc}		; (ldr pc, [sp], #4)
   2982c:	bl	111a0 <__errno_location@plt>
   29830:	cmp	r4, #1
   29834:	moveq	r3, #75	; 0x4b
   29838:	moveq	r4, r3
   2983c:	streq	r3, [r0]
   29840:	beq	2989c <__assert_fail@plt+0x185f4>
   29844:	cmp	r4, #3
   29848:	beq	29890 <__assert_fail@plt+0x185e8>
   2984c:	ldr	r3, [sp, #56]	; 0x38
   29850:	ldr	r4, [r0]
   29854:	cmp	r3, #0
   29858:	bne	29864 <__assert_fail@plt+0x185bc>
   2985c:	mov	r3, #1
   29860:	str	r3, [sp, #56]	; 0x38
   29864:	cmp	r4, #22
   29868:	moveq	r4, #0
   2986c:	mov	r0, r8
   29870:	bl	16534 <__assert_fail@plt+0x528c>
   29874:	movw	r2, #48288	; 0xbca0
   29878:	movt	r2, #2
   2987c:	str	r0, [sp]
   29880:	mov	r1, r4
   29884:	ldr	r3, [sp, #52]	; 0x34
   29888:	ldr	r0, [sp, #56]	; 0x38
   2988c:	bl	11110 <error@plt>
   29890:	mov	r3, #0
   29894:	mov	r4, r3
   29898:	str	r3, [r0]
   2989c:	ldr	r3, [sp, #56]	; 0x38
   298a0:	cmp	r3, #0
   298a4:	bne	2986c <__assert_fail@plt+0x185c4>
   298a8:	b	2985c <__assert_fail@plt+0x185b4>
   298ac:	bl	111a0 <__errno_location@plt>
   298b0:	cmp	r4, #1073741824	; 0x40000000
   298b4:	sbcs	r3, r5, #0
   298b8:	bge	298e0 <__assert_fail@plt+0x18638>
   298bc:	mov	r2, #-1073741824	; 0xc0000000
   298c0:	mvn	r3, #0
   298c4:	cmp	r4, r2
   298c8:	sbcs	r3, r5, r3
   298cc:	blt	298e0 <__assert_fail@plt+0x18638>
   298d0:	mov	r3, #34	; 0x22
   298d4:	mov	r4, r3
   298d8:	str	r3, [r0]
   298dc:	b	2989c <__assert_fail@plt+0x185f4>
   298e0:	mov	r3, #75	; 0x4b
   298e4:	str	r3, [r0]
   298e8:	ldr	r3, [sp, #56]	; 0x38
   298ec:	cmp	r3, #0
   298f0:	movne	r4, #75	; 0x4b
   298f4:	bne	2986c <__assert_fail@plt+0x185c4>
   298f8:	mov	r3, #1
   298fc:	mov	r4, #75	; 0x4b
   29900:	str	r3, [sp, #56]	; 0x38
   29904:	b	2986c <__assert_fail@plt+0x185c4>
   29908:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2990c:	mov	r1, #0
   29910:	strd	r6, [sp, #8]
   29914:	mov	r6, r2
   29918:	mov	r7, r3
   2991c:	str	r8, [sp, #16]
   29920:	mov	r2, #10
   29924:	mov	r8, r0
   29928:	str	lr, [sp, #20]
   2992c:	sub	sp, sp, #16
   29930:	ldr	ip, [sp, #48]	; 0x30
   29934:	add	r3, sp, #8
   29938:	str	ip, [sp]
   2993c:	bl	29a70 <__assert_fail@plt+0x187c8>
   29940:	subs	r4, r0, #0
   29944:	bne	29994 <__assert_fail@plt+0x186ec>
   29948:	ldrd	r4, [sp, #8]
   2994c:	ldrd	r0, [sp, #40]	; 0x28
   29950:	cmp	r4, r6
   29954:	sbcs	r3, r5, r7
   29958:	movlt	r3, #1
   2995c:	movge	r3, #0
   29960:	cmp	r0, r4
   29964:	sbcs	r2, r1, r5
   29968:	orrlt	r3, r3, #1
   2996c:	cmp	r3, #0
   29970:	bne	29a14 <__assert_fail@plt+0x1876c>
   29974:	mov	r0, r4
   29978:	mov	r1, r5
   2997c:	add	sp, sp, #16
   29980:	ldrd	r4, [sp]
   29984:	ldrd	r6, [sp, #8]
   29988:	ldr	r8, [sp, #16]
   2998c:	add	sp, sp, #20
   29990:	pop	{pc}		; (ldr pc, [sp], #4)
   29994:	bl	111a0 <__errno_location@plt>
   29998:	cmp	r4, #1
   2999c:	moveq	r3, #75	; 0x4b
   299a0:	moveq	r4, r3
   299a4:	streq	r3, [r0]
   299a8:	beq	299fc <__assert_fail@plt+0x18754>
   299ac:	cmp	r4, #3
   299b0:	beq	299f0 <__assert_fail@plt+0x18748>
   299b4:	ldr	r3, [sp, #56]	; 0x38
   299b8:	ldr	r4, [r0]
   299bc:	cmp	r3, #0
   299c0:	beq	29a08 <__assert_fail@plt+0x18760>
   299c4:	cmp	r4, #22
   299c8:	moveq	r4, #0
   299cc:	mov	r0, r8
   299d0:	bl	16534 <__assert_fail@plt+0x528c>
   299d4:	movw	r2, #48288	; 0xbca0
   299d8:	movt	r2, #2
   299dc:	str	r0, [sp]
   299e0:	mov	r1, r4
   299e4:	ldr	r3, [sp, #52]	; 0x34
   299e8:	ldr	r0, [sp, #56]	; 0x38
   299ec:	bl	11110 <error@plt>
   299f0:	mov	r3, #0
   299f4:	mov	r4, r3
   299f8:	str	r3, [r0]
   299fc:	ldr	r3, [sp, #56]	; 0x38
   29a00:	cmp	r3, #0
   29a04:	bne	299cc <__assert_fail@plt+0x18724>
   29a08:	mov	r3, #1
   29a0c:	str	r3, [sp, #56]	; 0x38
   29a10:	b	299c4 <__assert_fail@plt+0x1871c>
   29a14:	bl	111a0 <__errno_location@plt>
   29a18:	cmp	r4, #1073741824	; 0x40000000
   29a1c:	sbcs	r3, r5, #0
   29a20:	bge	29a48 <__assert_fail@plt+0x187a0>
   29a24:	mov	r2, #-1073741824	; 0xc0000000
   29a28:	mvn	r3, #0
   29a2c:	cmp	r4, r2
   29a30:	sbcs	r3, r5, r3
   29a34:	blt	29a48 <__assert_fail@plt+0x187a0>
   29a38:	mov	r3, #34	; 0x22
   29a3c:	mov	r4, r3
   29a40:	str	r3, [r0]
   29a44:	b	299fc <__assert_fail@plt+0x18754>
   29a48:	mov	r3, #75	; 0x4b
   29a4c:	str	r3, [r0]
   29a50:	ldr	r3, [sp, #56]	; 0x38
   29a54:	cmp	r3, #0
   29a58:	movne	r4, #75	; 0x4b
   29a5c:	bne	299cc <__assert_fail@plt+0x18724>
   29a60:	mov	r3, #1
   29a64:	mov	r4, #75	; 0x4b
   29a68:	str	r3, [sp, #56]	; 0x38
   29a6c:	b	299cc <__assert_fail@plt+0x18724>
   29a70:	cmp	r2, #36	; 0x24
   29a74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29a78:	strd	r6, [sp, #8]
   29a7c:	strd	r8, [sp, #16]
   29a80:	strd	sl, [sp, #24]
   29a84:	str	lr, [sp, #32]
   29a88:	sub	sp, sp, #36	; 0x24
   29a8c:	bhi	2a868 <__assert_fail@plt+0x195c0>
   29a90:	cmp	r1, #0
   29a94:	mov	r5, r1
   29a98:	mov	r6, r2
   29a9c:	addeq	r5, sp, #28
   29aa0:	mov	sl, r0
   29aa4:	mov	r9, r3
   29aa8:	bl	111a0 <__errno_location@plt>
   29aac:	mov	fp, r0
   29ab0:	mov	r4, #0
   29ab4:	mov	r2, r6
   29ab8:	mov	r3, r4
   29abc:	mov	r1, r5
   29ac0:	mov	r0, sl
   29ac4:	str	r4, [fp]
   29ac8:	bl	11260 <__strtoll_internal@plt>
   29acc:	ldr	r8, [r5]
   29ad0:	mov	r6, r0
   29ad4:	mov	r7, r1
   29ad8:	cmp	r8, sl
   29adc:	beq	29b34 <__assert_fail@plt+0x1888c>
   29ae0:	ldr	r4, [fp]
   29ae4:	cmp	r4, #0
   29ae8:	beq	29af8 <__assert_fail@plt+0x18850>
   29aec:	cmp	r4, #34	; 0x22
   29af0:	bne	29c38 <__assert_fail@plt+0x18990>
   29af4:	mov	r4, #1
   29af8:	ldr	r3, [sp, #72]	; 0x48
   29afc:	cmp	r3, #0
   29b00:	beq	29b10 <__assert_fail@plt+0x18868>
   29b04:	ldrb	sl, [r8]
   29b08:	cmp	sl, #0
   29b0c:	bne	29d3c <__assert_fail@plt+0x18a94>
   29b10:	strd	r6, [r9]
   29b14:	mov	r0, r4
   29b18:	add	sp, sp, #36	; 0x24
   29b1c:	ldrd	r4, [sp]
   29b20:	ldrd	r6, [sp, #8]
   29b24:	ldrd	r8, [sp, #16]
   29b28:	ldrd	sl, [sp, #24]
   29b2c:	add	sp, sp, #32
   29b30:	pop	{pc}		; (ldr pc, [sp], #4)
   29b34:	ldr	r3, [sp, #72]	; 0x48
   29b38:	cmp	r3, r4
   29b3c:	beq	29c38 <__assert_fail@plt+0x18990>
   29b40:	ldrb	sl, [sl]
   29b44:	cmp	sl, r4
   29b48:	beq	29c38 <__assert_fail@plt+0x18990>
   29b4c:	mov	r1, sl
   29b50:	mov	r0, r3
   29b54:	bl	11194 <strchr@plt>
   29b58:	cmp	r0, r4
   29b5c:	movne	r6, #1
   29b60:	movne	r7, #0
   29b64:	beq	29c38 <__assert_fail@plt+0x18990>
   29b68:	sub	fp, sl, #69	; 0x45
   29b6c:	cmp	fp, #47	; 0x2f
   29b70:	ldrls	pc, [pc, fp, lsl #2]
   29b74:	b	29d58 <__assert_fail@plt+0x18ab0>
   29b78:	andeq	r9, r2, r0, asr #24
   29b7c:	andeq	r9, r2, r8, asr sp
   29b80:	andeq	r9, r2, r0, asr #24
   29b84:	andeq	r9, r2, r8, asr sp
   29b88:	andeq	r9, r2, r8, asr sp
   29b8c:	andeq	r9, r2, r8, asr sp
   29b90:	andeq	r9, r2, r0, asr #24
   29b94:	andeq	r9, r2, r8, asr sp
   29b98:	andeq	r9, r2, r0, asr #24
   29b9c:	andeq	r9, r2, r8, asr sp
   29ba0:	andeq	r9, r2, r8, asr sp
   29ba4:	andeq	r9, r2, r0, asr #24
   29ba8:	andeq	r9, r2, r8, asr sp
   29bac:	andeq	r9, r2, r8, asr sp
   29bb0:	andeq	r9, r2, r8, asr sp
   29bb4:	andeq	r9, r2, r0, asr #24
   29bb8:	andeq	r9, r2, r8, asr sp
   29bbc:	andeq	r9, r2, r8, asr sp
   29bc0:	andeq	r9, r2, r8, asr sp
   29bc4:	andeq	r9, r2, r8, asr sp
   29bc8:	andeq	r9, r2, r0, asr #24
   29bcc:	andeq	r9, r2, r0, asr #24
   29bd0:	andeq	r9, r2, r8, asr sp
   29bd4:	andeq	r9, r2, r8, asr sp
   29bd8:	andeq	r9, r2, r8, asr sp
   29bdc:	andeq	r9, r2, r8, asr sp
   29be0:	andeq	r9, r2, r8, asr sp
   29be4:	andeq	r9, r2, r8, asr sp
   29be8:	andeq	r9, r2, r8, asr sp
   29bec:	andeq	r9, r2, r8, asr sp
   29bf0:	andeq	r9, r2, r8, asr sp
   29bf4:	andeq	r9, r2, r8, asr sp
   29bf8:	andeq	r9, r2, r8, asr sp
   29bfc:	andeq	r9, r2, r8, asr sp
   29c00:	andeq	r9, r2, r0, asr #24
   29c04:	andeq	r9, r2, r8, asr sp
   29c08:	andeq	r9, r2, r8, asr sp
   29c0c:	andeq	r9, r2, r8, asr sp
   29c10:	andeq	r9, r2, r0, asr #24
   29c14:	andeq	r9, r2, r8, asr sp
   29c18:	andeq	r9, r2, r0, asr #24
   29c1c:	andeq	r9, r2, r8, asr sp
   29c20:	andeq	r9, r2, r8, asr sp
   29c24:	andeq	r9, r2, r8, asr sp
   29c28:	andeq	r9, r2, r8, asr sp
   29c2c:	andeq	r9, r2, r8, asr sp
   29c30:	andeq	r9, r2, r8, asr sp
   29c34:	andeq	r9, r2, r0, asr #24
   29c38:	mov	r4, #4
   29c3c:	b	29b14 <__assert_fail@plt+0x1886c>
   29c40:	mov	r1, #48	; 0x30
   29c44:	ldr	r0, [sp, #72]	; 0x48
   29c48:	bl	11194 <strchr@plt>
   29c4c:	cmp	r0, #0
   29c50:	beq	29d58 <__assert_fail@plt+0x18ab0>
   29c54:	ldrb	r3, [r8, #1]
   29c58:	cmp	r3, #68	; 0x44
   29c5c:	beq	2a440 <__assert_fail@plt+0x19198>
   29c60:	cmp	r3, #105	; 0x69
   29c64:	beq	2a488 <__assert_fail@plt+0x191e0>
   29c68:	cmp	r3, #66	; 0x42
   29c6c:	beq	2a440 <__assert_fail@plt+0x19198>
   29c70:	cmp	fp, #47	; 0x2f
   29c74:	ldrls	pc, [pc, fp, lsl #2]
   29c78:	b	29d50 <__assert_fail@plt+0x18aa8>
   29c7c:	andeq	sl, r2, r0, ror #6
   29c80:	andeq	r9, r2, r0, asr sp
   29c84:	andeq	sl, r2, r4, lsr #3
   29c88:	andeq	r9, r2, r0, asr sp
   29c8c:	andeq	r9, r2, r0, asr sp
   29c90:	andeq	r9, r2, r0, asr sp
   29c94:	andeq	r9, r2, r4, ror pc
   29c98:	andeq	r9, r2, r0, asr sp
   29c9c:	andeq	sl, r2, r0, lsl #6
   29ca0:	andeq	r9, r2, r0, asr sp
   29ca4:	andeq	r9, r2, r0, asr sp
   29ca8:	andeq	sl, r2, r4, lsl #2
   29cac:	andeq	r9, r2, r0, asr sp
   29cb0:	andeq	r9, r2, r0, asr sp
   29cb4:	andeq	r9, r2, r0, asr sp
   29cb8:	andeq	sl, r2, r4, asr #4
   29cbc:	andeq	r9, r2, r0, asr sp
   29cc0:	andeq	r9, r2, r0, asr sp
   29cc4:	andeq	r9, r2, r0, asr sp
   29cc8:	andeq	r9, r2, r0, asr sp
   29ccc:	andeq	sl, r2, r0, asr #32
   29cd0:	andeq	r9, r2, r8, asr #28
   29cd4:	andeq	r9, r2, r0, asr sp
   29cd8:	andeq	r9, r2, r0, asr sp
   29cdc:	andeq	r9, r2, r0, asr sp
   29ce0:	andeq	r9, r2, r0, asr sp
   29ce4:	andeq	r9, r2, r0, asr sp
   29ce8:	andeq	r9, r2, r0, asr sp
   29cec:	andeq	r9, r2, r0, asr sp
   29cf0:	andeq	sl, r2, r0, lsl r0
   29cf4:	andeq	sl, r2, r0, lsl #8
   29cf8:	andeq	r9, r2, r0, asr sp
   29cfc:	andeq	r9, r2, r0, asr sp
   29d00:	andeq	r9, r2, r0, asr sp
   29d04:	andeq	sl, r2, r4, lsr #3
   29d08:	andeq	r9, r2, r0, asr sp
   29d0c:	andeq	r9, r2, r0, asr sp
   29d10:	andeq	r9, r2, r0, asr sp
   29d14:	andeq	r9, r2, r4, ror pc
   29d18:	andeq	r9, r2, r0, asr sp
   29d1c:	andeq	sl, r2, r0, lsl #6
   29d20:	andeq	r9, r2, r0, asr sp
   29d24:	andeq	r9, r2, r0, asr sp
   29d28:	andeq	r9, r2, r0, asr sp
   29d2c:	andeq	r9, r2, r0, asr sp
   29d30:	andeq	r9, r2, r0, asr sp
   29d34:	andeq	r9, r2, r0, asr sp
   29d38:	andeq	sl, r2, r4, asr #4
   29d3c:	mov	r0, r3
   29d40:	mov	r1, sl
   29d44:	bl	11194 <strchr@plt>
   29d48:	cmp	r0, #0
   29d4c:	bne	29b68 <__assert_fail@plt+0x188c0>
   29d50:	orr	r4, r4, #2
   29d54:	b	29b10 <__assert_fail@plt+0x18868>
   29d58:	mov	fp, #1
   29d5c:	mov	lr, #1024	; 0x400
   29d60:	sub	sl, sl, #66	; 0x42
   29d64:	cmp	sl, #53	; 0x35
   29d68:	ldrls	pc, [pc, sl, lsl #2]
   29d6c:	b	29d50 <__assert_fail@plt+0x18aa8>
   29d70:	andeq	sl, r2, r4, ror #5
   29d74:	andeq	r9, r2, r0, asr sp
   29d78:	andeq	r9, r2, r0, asr sp
   29d7c:	andeq	sl, r2, r8, ror #6
   29d80:	andeq	r9, r2, r0, asr sp
   29d84:	andeq	sl, r2, ip, lsr #3
   29d88:	andeq	r9, r2, r0, asr sp
   29d8c:	andeq	r9, r2, r0, asr sp
   29d90:	andeq	r9, r2, r0, asr sp
   29d94:	andeq	r9, r2, ip, ror pc
   29d98:	andeq	r9, r2, r0, asr sp
   29d9c:	andeq	sl, r2, r8, lsl #6
   29da0:	andeq	r9, r2, r0, asr sp
   29da4:	andeq	r9, r2, r0, asr sp
   29da8:	andeq	sl, r2, ip, lsl #2
   29dac:	andeq	r9, r2, r0, asr sp
   29db0:	andeq	r9, r2, r0, asr sp
   29db4:	andeq	r9, r2, r0, asr sp
   29db8:	andeq	sl, r2, ip, asr #4
   29dbc:	andeq	r9, r2, r0, asr sp
   29dc0:	andeq	r9, r2, r0, asr sp
   29dc4:	andeq	r9, r2, r0, asr sp
   29dc8:	andeq	r9, r2, r0, asr sp
   29dcc:	andeq	sl, r2, r8, asr #32
   29dd0:	andeq	r9, r2, r0, asr lr
   29dd4:	andeq	r9, r2, r0, asr sp
   29dd8:	andeq	r9, r2, r0, asr sp
   29ddc:	andeq	r9, r2, r0, asr sp
   29de0:	andeq	r9, r2, r0, asr sp
   29de4:	andeq	r9, r2, r0, asr sp
   29de8:	andeq	r9, r2, r0, asr sp
   29dec:	andeq	r9, r2, r0, asr sp
   29df0:	andeq	sl, r2, r4, lsl r0
   29df4:	andeq	r9, r2, ip, asr pc
   29df8:	andeq	r9, r2, r0, asr sp
   29dfc:	andeq	r9, r2, r0, asr sp
   29e00:	andeq	r9, r2, r0, asr sp
   29e04:	andeq	sl, r2, ip, lsr #3
   29e08:	andeq	r9, r2, r0, asr sp
   29e0c:	andeq	r9, r2, r0, asr sp
   29e10:	andeq	r9, r2, r0, asr sp
   29e14:	andeq	r9, r2, ip, ror pc
   29e18:	andeq	r9, r2, r0, asr sp
   29e1c:	andeq	sl, r2, r8, lsl #6
   29e20:	andeq	r9, r2, r0, asr sp
   29e24:	andeq	r9, r2, r0, asr sp
   29e28:	andeq	r9, r2, r0, asr sp
   29e2c:	andeq	r9, r2, r0, asr sp
   29e30:	andeq	r9, r2, r0, asr sp
   29e34:	andeq	r9, r2, r0, asr sp
   29e38:	andeq	sl, r2, ip, asr #4
   29e3c:	andeq	r9, r2, r0, asr sp
   29e40:	andeq	r9, r2, r0, asr sp
   29e44:	andeq	r9, r2, r8, ror #31
   29e48:	mov	fp, #1
   29e4c:	mov	lr, #1024	; 0x400
   29e50:	asr	r3, lr, #31
   29e54:	mov	r2, lr
   29e58:	mov	r1, #0
   29e5c:	cmp	r7, r6, asr #31
   29e60:	strd	r2, [sp]
   29e64:	bne	2a574 <__assert_fail@plt+0x192cc>
   29e68:	smull	r2, r3, r6, lr
   29e6c:	mov	ip, r2
   29e70:	cmp	r1, #0
   29e74:	bne	2a408 <__assert_fail@plt+0x19160>
   29e78:	mov	r6, ip
   29e7c:	mov	r7, r3
   29e80:	cmp	r3, r6, asr #31
   29e84:	mov	ip, r1
   29e88:	bne	2a0a8 <__assert_fail@plt+0x18e00>
   29e8c:	smull	r2, r3, r6, lr
   29e90:	mov	sl, r2
   29e94:	subs	r1, ip, #0
   29e98:	bne	2a408 <__assert_fail@plt+0x19160>
   29e9c:	cmp	r3, sl, asr #31
   29ea0:	mov	r6, sl
   29ea4:	mov	ip, r1
   29ea8:	mov	r7, r3
   29eac:	bne	2a3a4 <__assert_fail@plt+0x190fc>
   29eb0:	smull	r2, r3, r6, lr
   29eb4:	mov	sl, r2
   29eb8:	subs	r1, ip, #0
   29ebc:	bne	2a408 <__assert_fail@plt+0x19160>
   29ec0:	cmp	r3, sl, asr #31
   29ec4:	mov	r6, sl
   29ec8:	mov	ip, r1
   29ecc:	mov	r7, r3
   29ed0:	bne	2a148 <__assert_fail@plt+0x18ea0>
   29ed4:	smull	r2, r3, r6, lr
   29ed8:	mov	sl, r2
   29edc:	subs	r1, ip, #0
   29ee0:	bne	2a408 <__assert_fail@plt+0x19160>
   29ee4:	cmp	r3, sl, asr #31
   29ee8:	mov	r6, sl
   29eec:	mov	ip, r1
   29ef0:	mov	r7, r3
   29ef4:	bne	2a288 <__assert_fail@plt+0x18fe0>
   29ef8:	smull	r2, r3, r6, lr
   29efc:	mov	sl, r2
   29f00:	subs	r1, ip, #0
   29f04:	bne	2a408 <__assert_fail@plt+0x19160>
   29f08:	cmp	r3, sl, asr #31
   29f0c:	mov	r6, sl
   29f10:	mov	ip, r1
   29f14:	mov	r7, r3
   29f18:	bne	2a1e8 <__assert_fail@plt+0x18f40>
   29f1c:	smull	r2, r3, r6, lr
   29f20:	mov	sl, r2
   29f24:	cmp	ip, #0
   29f28:	bne	2a408 <__assert_fail@plt+0x19160>
   29f2c:	cmp	r3, sl, asr #31
   29f30:	mov	r0, sl
   29f34:	mov	r1, r3
   29f38:	bne	2a4a0 <__assert_fail@plt+0x191f8>
   29f3c:	smull	r2, r3, sl, lr
   29f40:	mov	lr, r2
   29f44:	mov	r2, r3
   29f48:	cmp	ip, #0
   29f4c:	moveq	r6, lr
   29f50:	moveq	r7, r2
   29f54:	bne	2a424 <__assert_fail@plt+0x1917c>
   29f58:	orr	r4, r4, ip
   29f5c:	add	r3, r8, fp
   29f60:	str	r3, [r5]
   29f64:	ldrb	r3, [r8, fp]
   29f68:	cmp	r3, #0
   29f6c:	beq	29b10 <__assert_fail@plt+0x18868>
   29f70:	b	29d50 <__assert_fail@plt+0x18aa8>
   29f74:	mov	fp, #1
   29f78:	mov	lr, #1024	; 0x400
   29f7c:	cmp	r7, r6, asr #31
   29f80:	mov	r0, lr
   29f84:	mov	ip, #0
   29f88:	asr	r1, lr, #31
   29f8c:	bne	2a44c <__assert_fail@plt+0x191a4>
   29f90:	smull	r2, r3, r6, lr
   29f94:	mov	r1, r2
   29f98:	mov	lr, r3
   29f9c:	cmp	ip, #0
   29fa0:	bne	29fb0 <__assert_fail@plt+0x18d08>
   29fa4:	mov	r6, r1
   29fa8:	mov	r7, lr
   29fac:	b	29f5c <__assert_fail@plt+0x18cb4>
   29fb0:	cmp	r6, #0
   29fb4:	mov	r4, #1
   29fb8:	sbcs	r3, r7, #0
   29fbc:	blt	29fdc <__assert_fail@plt+0x18d34>
   29fc0:	mvn	r6, #0
   29fc4:	mvn	r7, #-2147483648	; 0x80000000
   29fc8:	b	29f5c <__assert_fail@plt+0x18cb4>
   29fcc:	cmp	r0, #0
   29fd0:	mov	r4, #1
   29fd4:	sbcs	r3, r1, #0
   29fd8:	bge	29fc0 <__assert_fail@plt+0x18d18>
   29fdc:	mov	r6, #0
   29fe0:	mov	r7, #-2147483648	; 0x80000000
   29fe4:	b	29f5c <__assert_fail@plt+0x18cb4>
   29fe8:	cmp	r7, r6, asr #31
   29fec:	mov	r1, #0
   29ff0:	bne	2a70c <__assert_fail@plt+0x19464>
   29ff4:	adds	ip, r6, r6
   29ff8:	adc	r3, r7, r7
   29ffc:	cmp	r1, #0
   2a000:	bne	29fb0 <__assert_fail@plt+0x18d08>
   2a004:	mov	r6, ip
   2a008:	mov	r7, r3
   2a00c:	b	29f5c <__assert_fail@plt+0x18cb4>
   2a010:	mov	fp, #1
   2a014:	cmp	r7, r6, asr #31
   2a018:	mov	ip, #0
   2a01c:	bne	2a764 <__assert_fail@plt+0x194bc>
   2a020:	lsl	r3, r7, #9
   2a024:	lsl	r2, r6, #9
   2a028:	orr	r3, r3, r6, lsr #23
   2a02c:	cmp	ip, #0
   2a030:	bne	29fb0 <__assert_fail@plt+0x18d08>
   2a034:	mov	r6, r2
   2a038:	mov	r7, r3
   2a03c:	b	29f5c <__assert_fail@plt+0x18cb4>
   2a040:	mov	fp, #1
   2a044:	mov	lr, #1024	; 0x400
   2a048:	asr	r3, lr, #31
   2a04c:	mov	r2, lr
   2a050:	mov	r1, #0
   2a054:	cmp	r7, r6, asr #31
   2a058:	strd	r2, [sp]
   2a05c:	bne	2a5f4 <__assert_fail@plt+0x1934c>
   2a060:	smull	r2, r3, r6, lr
   2a064:	mov	ip, r2
   2a068:	cmp	r1, #0
   2a06c:	bne	2a408 <__assert_fail@plt+0x19160>
   2a070:	mov	r6, ip
   2a074:	mov	r7, r3
   2a078:	cmp	r3, r6, asr #31
   2a07c:	mov	ip, r1
   2a080:	bne	2a7b8 <__assert_fail@plt+0x19510>
   2a084:	smull	r2, r3, r6, lr
   2a088:	mov	sl, r2
   2a08c:	subs	r1, ip, #0
   2a090:	bne	2a408 <__assert_fail@plt+0x19160>
   2a094:	cmp	r3, sl, asr #31
   2a098:	mov	r6, sl
   2a09c:	mov	ip, r1
   2a0a0:	mov	r7, r3
   2a0a4:	beq	29e8c <__assert_fail@plt+0x18be4>
   2a0a8:	umull	r0, r1, r6, lr
   2a0ac:	cmp	r3, #0
   2a0b0:	umull	r2, r3, lr, r3
   2a0b4:	strd	r0, [sp, #16]
   2a0b8:	mov	r0, r2
   2a0bc:	mov	r1, r3
   2a0c0:	strd	r0, [sp, #8]
   2a0c4:	bge	2a0dc <__assert_fail@plt+0x18e34>
   2a0c8:	subs	r3, r0, ip
   2a0cc:	str	r3, [sp, #8]
   2a0d0:	ldr	r3, [sp, #12]
   2a0d4:	sbc	r3, r3, lr
   2a0d8:	str	r3, [sp, #12]
   2a0dc:	ldr	r1, [sp, #8]
   2a0e0:	mov	r2, #0
   2a0e4:	ldr	r3, [sp, #20]
   2a0e8:	adds	r3, r1, r3
   2a0ec:	ldr	r1, [sp, #12]
   2a0f0:	adc	r2, r1, r2
   2a0f4:	cmp	r2, r3, asr #31
   2a0f8:	bne	2aa0c <__assert_fail@plt+0x19764>
   2a0fc:	ldr	sl, [sp, #16]
   2a100:	b	29e94 <__assert_fail@plt+0x18bec>
   2a104:	mov	fp, #1
   2a108:	mov	lr, #1024	; 0x400
   2a10c:	asr	r3, lr, #31
   2a110:	mov	r2, lr
   2a114:	mov	r1, #0
   2a118:	cmp	r7, r6, asr #31
   2a11c:	strd	r2, [sp]
   2a120:	bne	2a534 <__assert_fail@plt+0x1928c>
   2a124:	smull	r2, r3, r6, lr
   2a128:	mov	ip, r2
   2a12c:	cmp	r1, #0
   2a130:	bne	2a408 <__assert_fail@plt+0x19160>
   2a134:	mov	r6, ip
   2a138:	mov	r7, r3
   2a13c:	cmp	r3, r6, asr #31
   2a140:	mov	ip, r1
   2a144:	beq	29ed4 <__assert_fail@plt+0x18c2c>
   2a148:	umull	r0, r1, r6, lr
   2a14c:	cmp	r3, #0
   2a150:	umull	r2, r3, lr, r3
   2a154:	strd	r0, [sp, #16]
   2a158:	mov	r0, r2
   2a15c:	mov	r1, r3
   2a160:	strd	r0, [sp, #8]
   2a164:	bge	2a17c <__assert_fail@plt+0x18ed4>
   2a168:	subs	r3, r0, ip
   2a16c:	str	r3, [sp, #8]
   2a170:	ldr	r3, [sp, #12]
   2a174:	sbc	r3, r3, lr
   2a178:	str	r3, [sp, #12]
   2a17c:	ldr	r1, [sp, #8]
   2a180:	mov	r2, #0
   2a184:	ldr	r3, [sp, #20]
   2a188:	adds	r3, r1, r3
   2a18c:	ldr	r1, [sp, #12]
   2a190:	adc	r2, r1, r2
   2a194:	cmp	r2, r3, asr #31
   2a198:	bne	2a93c <__assert_fail@plt+0x19694>
   2a19c:	ldr	sl, [sp, #16]
   2a1a0:	b	29edc <__assert_fail@plt+0x18c34>
   2a1a4:	mov	fp, #1
   2a1a8:	mov	lr, #1024	; 0x400
   2a1ac:	asr	r3, lr, #31
   2a1b0:	mov	r2, lr
   2a1b4:	mov	r1, #0
   2a1b8:	cmp	r7, r6, asr #31
   2a1bc:	strd	r2, [sp]
   2a1c0:	bne	2a4f4 <__assert_fail@plt+0x1924c>
   2a1c4:	smull	r2, r3, r6, lr
   2a1c8:	mov	ip, r2
   2a1cc:	cmp	r1, #0
   2a1d0:	bne	2a408 <__assert_fail@plt+0x19160>
   2a1d4:	mov	r6, ip
   2a1d8:	mov	r7, r3
   2a1dc:	cmp	r3, r6, asr #31
   2a1e0:	mov	ip, r1
   2a1e4:	beq	29f1c <__assert_fail@plt+0x18c74>
   2a1e8:	umull	r0, r1, r6, lr
   2a1ec:	cmp	r3, #0
   2a1f0:	umull	r2, r3, lr, r3
   2a1f4:	strd	r0, [sp, #16]
   2a1f8:	mov	r0, r2
   2a1fc:	mov	r1, r3
   2a200:	strd	r0, [sp, #8]
   2a204:	bge	2a21c <__assert_fail@plt+0x18f74>
   2a208:	subs	r3, r0, ip
   2a20c:	str	r3, [sp, #8]
   2a210:	ldr	r3, [sp, #12]
   2a214:	sbc	r3, r3, lr
   2a218:	str	r3, [sp, #12]
   2a21c:	ldr	r1, [sp, #8]
   2a220:	mov	r2, #0
   2a224:	ldr	r3, [sp, #20]
   2a228:	adds	r3, r1, r3
   2a22c:	ldr	r1, [sp, #12]
   2a230:	adc	r2, r1, r2
   2a234:	cmp	r2, r3, asr #31
   2a238:	bne	2a8ac <__assert_fail@plt+0x19604>
   2a23c:	ldr	sl, [sp, #16]
   2a240:	b	29f24 <__assert_fail@plt+0x18c7c>
   2a244:	mov	fp, #1
   2a248:	mov	lr, #1024	; 0x400
   2a24c:	asr	r3, lr, #31
   2a250:	mov	r2, lr
   2a254:	mov	r1, #0
   2a258:	cmp	r7, r6, asr #31
   2a25c:	strd	r2, [sp]
   2a260:	bne	2a6cc <__assert_fail@plt+0x19424>
   2a264:	smull	r2, r3, r6, lr
   2a268:	mov	ip, r2
   2a26c:	cmp	r1, #0
   2a270:	bne	2a408 <__assert_fail@plt+0x19160>
   2a274:	mov	r6, ip
   2a278:	mov	r7, r3
   2a27c:	cmp	r3, r6, asr #31
   2a280:	mov	ip, r1
   2a284:	beq	29ef8 <__assert_fail@plt+0x18c50>
   2a288:	umull	r0, r1, r6, lr
   2a28c:	cmp	r3, #0
   2a290:	umull	r2, r3, lr, r3
   2a294:	strd	r0, [sp, #16]
   2a298:	mov	r0, r2
   2a29c:	mov	r1, r3
   2a2a0:	strd	r0, [sp, #8]
   2a2a4:	bge	2a2bc <__assert_fail@plt+0x19014>
   2a2a8:	subs	r3, r0, ip
   2a2ac:	str	r3, [sp, #8]
   2a2b0:	ldr	r3, [sp, #12]
   2a2b4:	sbc	r3, r3, lr
   2a2b8:	str	r3, [sp, #12]
   2a2bc:	ldr	r1, [sp, #8]
   2a2c0:	mov	r2, #0
   2a2c4:	ldr	r3, [sp, #20]
   2a2c8:	adds	r3, r1, r3
   2a2cc:	ldr	r1, [sp, #12]
   2a2d0:	adc	r2, r1, r2
   2a2d4:	cmp	r2, r3, asr #31
   2a2d8:	bne	2a8f4 <__assert_fail@plt+0x1964c>
   2a2dc:	ldr	sl, [sp, #16]
   2a2e0:	b	29f00 <__assert_fail@plt+0x18c58>
   2a2e4:	cmp	r7, r6, asr #31
   2a2e8:	mov	ip, #0
   2a2ec:	bne	2a674 <__assert_fail@plt+0x193cc>
   2a2f0:	lsl	r3, r7, #10
   2a2f4:	lsl	r2, r6, #10
   2a2f8:	orr	r3, r3, r6, lsr #22
   2a2fc:	b	2a02c <__assert_fail@plt+0x18d84>
   2a300:	mov	fp, #1
   2a304:	mov	lr, #1024	; 0x400
   2a308:	asr	r3, lr, #31
   2a30c:	mov	r2, lr
   2a310:	mov	r1, #0
   2a314:	cmp	r7, r6, asr #31
   2a318:	strd	r2, [sp]
   2a31c:	bne	2a634 <__assert_fail@plt+0x1938c>
   2a320:	smull	r2, r3, r6, lr
   2a324:	mov	sl, r2
   2a328:	subs	ip, r1, #0
   2a32c:	bne	29fb0 <__assert_fail@plt+0x18d08>
   2a330:	cmp	r3, sl, asr #31
   2a334:	mov	r0, sl
   2a338:	mov	r1, r3
   2a33c:	bne	2a814 <__assert_fail@plt+0x1956c>
   2a340:	smull	r2, r3, sl, lr
   2a344:	mov	lr, r2
   2a348:	mov	r2, r3
   2a34c:	cmp	ip, #0
   2a350:	bne	29fcc <__assert_fail@plt+0x18d24>
   2a354:	mov	r6, lr
   2a358:	mov	r7, r2
   2a35c:	b	29f5c <__assert_fail@plt+0x18cb4>
   2a360:	mov	fp, #1
   2a364:	mov	lr, #1024	; 0x400
   2a368:	asr	r3, lr, #31
   2a36c:	mov	r2, lr
   2a370:	mov	r1, #0
   2a374:	cmp	r7, r6, asr #31
   2a378:	strd	r2, [sp]
   2a37c:	bne	2a5b4 <__assert_fail@plt+0x1930c>
   2a380:	smull	r2, r3, r6, lr
   2a384:	mov	ip, r2
   2a388:	cmp	r1, #0
   2a38c:	bne	2a408 <__assert_fail@plt+0x19160>
   2a390:	mov	r6, ip
   2a394:	mov	r7, r3
   2a398:	cmp	r3, r6, asr #31
   2a39c:	mov	ip, r1
   2a3a0:	beq	29eb0 <__assert_fail@plt+0x18c08>
   2a3a4:	umull	r0, r1, r6, lr
   2a3a8:	cmp	r3, #0
   2a3ac:	umull	r2, r3, lr, r3
   2a3b0:	strd	r0, [sp, #16]
   2a3b4:	mov	r0, r2
   2a3b8:	mov	r1, r3
   2a3bc:	strd	r0, [sp, #8]
   2a3c0:	bge	2a3d8 <__assert_fail@plt+0x19130>
   2a3c4:	subs	r3, r0, ip
   2a3c8:	str	r3, [sp, #8]
   2a3cc:	ldr	r3, [sp, #12]
   2a3d0:	sbc	r3, r3, lr
   2a3d4:	str	r3, [sp, #12]
   2a3d8:	ldr	r1, [sp, #8]
   2a3dc:	mov	r2, #0
   2a3e0:	ldr	r3, [sp, #20]
   2a3e4:	adds	r3, r1, r3
   2a3e8:	ldr	r1, [sp, #12]
   2a3ec:	adc	r2, r1, r2
   2a3f0:	cmp	r2, r3, asr #31
   2a3f4:	bne	2a918 <__assert_fail@plt+0x19670>
   2a3f8:	ldr	sl, [sp, #16]
   2a3fc:	b	29eb8 <__assert_fail@plt+0x18c10>
   2a400:	mov	fp, #1
   2a404:	b	29f5c <__assert_fail@plt+0x18cb4>
   2a408:	cmp	r6, #0
   2a40c:	mov	ip, #1
   2a410:	sbcs	r3, r7, #0
   2a414:	blt	2a434 <__assert_fail@plt+0x1918c>
   2a418:	mvn	r6, #0
   2a41c:	mvn	r7, #-2147483648	; 0x80000000
   2a420:	b	29f58 <__assert_fail@plt+0x18cb0>
   2a424:	cmp	r0, #0
   2a428:	mov	ip, #1
   2a42c:	sbcs	r3, r1, #0
   2a430:	bge	2a418 <__assert_fail@plt+0x19170>
   2a434:	mov	r6, #0
   2a438:	mov	r7, #-2147483648	; 0x80000000
   2a43c:	b	29f58 <__assert_fail@plt+0x18cb0>
   2a440:	mov	fp, #2
   2a444:	mov	lr, #1000	; 0x3e8
   2a448:	b	29d60 <__assert_fail@plt+0x18ab8>
   2a44c:	umull	r2, r3, r6, lr
   2a450:	cmp	r7, #0
   2a454:	strd	r2, [sp]
   2a458:	umull	r2, r3, lr, r7
   2a45c:	bge	2a468 <__assert_fail@plt+0x191c0>
   2a460:	subs	r2, r2, ip
   2a464:	sbc	r3, r3, lr
   2a468:	ldr	lr, [sp, #4]
   2a46c:	mov	sl, #0
   2a470:	adds	lr, r2, lr
   2a474:	adc	sl, r3, sl
   2a478:	cmp	sl, lr, asr #31
   2a47c:	bne	2a9cc <__assert_fail@plt+0x19724>
   2a480:	ldr	r1, [sp]
   2a484:	b	29f9c <__assert_fail@plt+0x18cf4>
   2a488:	ldrb	r3, [r8, #2]
   2a48c:	mov	lr, #1024	; 0x400
   2a490:	cmp	r3, #66	; 0x42
   2a494:	movne	fp, #1
   2a498:	moveq	fp, #3
   2a49c:	b	29d60 <__assert_fail@plt+0x18ab8>
   2a4a0:	cmp	r3, #0
   2a4a4:	umull	r6, r7, sl, lr
   2a4a8:	umull	r2, r3, lr, r3
   2a4ac:	strd	r2, [sp, #8]
   2a4b0:	strd	r6, [sp, #16]
   2a4b4:	bge	2a4cc <__assert_fail@plt+0x19224>
   2a4b8:	subs	r3, r2, ip
   2a4bc:	str	r3, [sp, #8]
   2a4c0:	ldr	r3, [sp, #12]
   2a4c4:	sbc	r3, r3, lr
   2a4c8:	str	r3, [sp, #12]
   2a4cc:	ldr	r3, [sp, #8]
   2a4d0:	mov	lr, #0
   2a4d4:	ldr	r6, [sp, #20]
   2a4d8:	adds	r2, r3, r6
   2a4dc:	ldr	r3, [sp, #12]
   2a4e0:	adc	lr, r3, lr
   2a4e4:	cmp	lr, r2, asr #31
   2a4e8:	bne	2a960 <__assert_fail@plt+0x196b8>
   2a4ec:	ldr	lr, [sp, #16]
   2a4f0:	b	29f48 <__assert_fail@plt+0x18ca0>
   2a4f4:	umull	r2, r3, r6, lr
   2a4f8:	cmp	r7, #0
   2a4fc:	strd	r2, [sp, #8]
   2a500:	umull	r2, r3, lr, r7
   2a504:	bge	2a510 <__assert_fail@plt+0x19268>
   2a508:	subs	r2, r2, r1
   2a50c:	sbc	r3, r3, lr
   2a510:	ldr	r0, [sp, #12]
   2a514:	mov	ip, #0
   2a518:	adds	r0, r2, r0
   2a51c:	adc	ip, r3, ip
   2a520:	cmp	ip, r0, asr #31
   2a524:	bne	2a888 <__assert_fail@plt+0x195e0>
   2a528:	mov	r3, r0
   2a52c:	ldr	ip, [sp, #8]
   2a530:	b	2a1cc <__assert_fail@plt+0x18f24>
   2a534:	umull	r2, r3, r6, lr
   2a538:	cmp	r7, #0
   2a53c:	strd	r2, [sp, #8]
   2a540:	umull	r2, r3, lr, r7
   2a544:	bge	2a550 <__assert_fail@plt+0x192a8>
   2a548:	subs	r2, r2, r1
   2a54c:	sbc	r3, r3, lr
   2a550:	ldr	r0, [sp, #12]
   2a554:	mov	ip, #0
   2a558:	adds	r0, r2, r0
   2a55c:	adc	ip, r3, ip
   2a560:	cmp	ip, r0, asr #31
   2a564:	bne	2a9e8 <__assert_fail@plt+0x19740>
   2a568:	mov	r3, r0
   2a56c:	ldr	ip, [sp, #8]
   2a570:	b	2a12c <__assert_fail@plt+0x18e84>
   2a574:	umull	r2, r3, r6, lr
   2a578:	cmp	r7, #0
   2a57c:	strd	r2, [sp, #8]
   2a580:	umull	r2, r3, lr, r7
   2a584:	bge	2a590 <__assert_fail@plt+0x192e8>
   2a588:	subs	r2, r2, r1
   2a58c:	sbc	r3, r3, lr
   2a590:	ldr	r0, [sp, #12]
   2a594:	mov	ip, #0
   2a598:	adds	r0, r2, r0
   2a59c:	adc	ip, r3, ip
   2a5a0:	cmp	ip, r0, asr #31
   2a5a4:	bne	2a8d0 <__assert_fail@plt+0x19628>
   2a5a8:	mov	r3, r0
   2a5ac:	ldr	ip, [sp, #8]
   2a5b0:	b	29e70 <__assert_fail@plt+0x18bc8>
   2a5b4:	umull	r2, r3, r6, lr
   2a5b8:	cmp	r7, #0
   2a5bc:	strd	r2, [sp, #8]
   2a5c0:	umull	r2, r3, lr, r7
   2a5c4:	bge	2a5d0 <__assert_fail@plt+0x19328>
   2a5c8:	subs	r2, r2, r1
   2a5cc:	sbc	r3, r3, lr
   2a5d0:	ldr	r0, [sp, #12]
   2a5d4:	mov	ip, #0
   2a5d8:	adds	r0, r2, r0
   2a5dc:	adc	ip, r3, ip
   2a5e0:	cmp	ip, r0, asr #31
   2a5e4:	bne	2aa88 <__assert_fail@plt+0x197e0>
   2a5e8:	mov	r3, r0
   2a5ec:	ldr	ip, [sp, #8]
   2a5f0:	b	2a388 <__assert_fail@plt+0x190e0>
   2a5f4:	umull	r2, r3, r6, lr
   2a5f8:	cmp	r7, #0
   2a5fc:	strd	r2, [sp, #8]
   2a600:	umull	r2, r3, lr, r7
   2a604:	bge	2a610 <__assert_fail@plt+0x19368>
   2a608:	subs	r2, r2, r1
   2a60c:	sbc	r3, r3, lr
   2a610:	ldr	r0, [sp, #12]
   2a614:	mov	ip, #0
   2a618:	adds	r0, r2, r0
   2a61c:	adc	ip, r3, ip
   2a620:	cmp	ip, r0, asr #31
   2a624:	bne	2a984 <__assert_fail@plt+0x196dc>
   2a628:	mov	r3, r0
   2a62c:	ldr	ip, [sp, #8]
   2a630:	b	2a068 <__assert_fail@plt+0x18dc0>
   2a634:	umull	r2, r3, r6, lr
   2a638:	cmp	r7, #0
   2a63c:	strd	r2, [sp, #8]
   2a640:	umull	r2, r3, lr, r7
   2a644:	bge	2a650 <__assert_fail@plt+0x193a8>
   2a648:	subs	r2, r2, r1
   2a64c:	sbc	r3, r3, lr
   2a650:	ldr	r0, [sp, #12]
   2a654:	mov	ip, #0
   2a658:	adds	r0, r2, r0
   2a65c:	adc	ip, r3, ip
   2a660:	cmp	ip, r0, asr #31
   2a664:	bne	2aa30 <__assert_fail@plt+0x19788>
   2a668:	mov	r3, r0
   2a66c:	ldr	sl, [sp, #8]
   2a670:	b	2a328 <__assert_fail@plt+0x19080>
   2a674:	mov	r2, r6
   2a678:	mov	r3, #0
   2a67c:	mov	lr, #1024	; 0x400
   2a680:	cmp	r7, #0
   2a684:	strd	r2, [sp]
   2a688:	lsr	r3, r6, #22
   2a68c:	ldr	r2, [sp]
   2a690:	umull	r0, r1, lr, r7
   2a694:	lsl	r2, r2, #10
   2a698:	bge	2a6a4 <__assert_fail@plt+0x193fc>
   2a69c:	subs	r0, r0, ip
   2a6a0:	sbc	r1, r1, lr
   2a6a4:	adds	r3, r0, r3
   2a6a8:	mov	lr, #0
   2a6ac:	adc	r1, r1, lr
   2a6b0:	cmp	r1, r3, asr #31
   2a6b4:	beq	2a02c <__assert_fail@plt+0x18d84>
   2a6b8:	lsl	r3, r7, #10
   2a6bc:	mov	ip, #1
   2a6c0:	lsl	r2, r6, #10
   2a6c4:	orr	r3, r3, r6, lsr #22
   2a6c8:	b	2a02c <__assert_fail@plt+0x18d84>
   2a6cc:	umull	r2, r3, r6, lr
   2a6d0:	cmp	r7, #0
   2a6d4:	strd	r2, [sp, #8]
   2a6d8:	umull	r2, r3, lr, r7
   2a6dc:	bge	2a6e8 <__assert_fail@plt+0x19440>
   2a6e0:	subs	r2, r2, r1
   2a6e4:	sbc	r3, r3, lr
   2a6e8:	ldr	r0, [sp, #12]
   2a6ec:	mov	ip, #0
   2a6f0:	adds	r0, r2, r0
   2a6f4:	adc	ip, r3, ip
   2a6f8:	cmp	ip, r0, asr #31
   2a6fc:	bne	2aa54 <__assert_fail@plt+0x197ac>
   2a700:	mov	r3, r0
   2a704:	ldr	ip, [sp, #8]
   2a708:	b	2a26c <__assert_fail@plt+0x18fc4>
   2a70c:	mov	lr, #2
   2a710:	mov	r3, #0
   2a714:	adds	ip, r6, r6
   2a718:	adc	r0, r3, r3
   2a71c:	umull	r2, r3, lr, r7
   2a720:	cmp	r7, #0
   2a724:	strd	r2, [sp]
   2a728:	bge	2a740 <__assert_fail@plt+0x19498>
   2a72c:	subs	r3, r2, r1
   2a730:	str	r3, [sp]
   2a734:	ldr	r3, [sp, #4]
   2a738:	sbc	r3, r3, lr
   2a73c:	str	r3, [sp, #4]
   2a740:	ldr	r3, [sp]
   2a744:	mov	lr, #0
   2a748:	adds	r2, r3, r0
   2a74c:	ldr	r3, [sp, #4]
   2a750:	adc	r3, r3, lr
   2a754:	cmp	r3, r2, asr #31
   2a758:	bne	2aa78 <__assert_fail@plt+0x197d0>
   2a75c:	mov	r3, r2
   2a760:	b	29ffc <__assert_fail@plt+0x18d54>
   2a764:	mov	r2, r6
   2a768:	mov	r3, #0
   2a76c:	mov	lr, #512	; 0x200
   2a770:	cmp	r7, #0
   2a774:	strd	r2, [sp]
   2a778:	lsr	r3, r6, #23
   2a77c:	ldr	r2, [sp]
   2a780:	umull	r0, r1, lr, r7
   2a784:	lsl	r2, r2, #9
   2a788:	bge	2a794 <__assert_fail@plt+0x194ec>
   2a78c:	subs	r0, r0, ip
   2a790:	sbc	r1, r1, lr
   2a794:	adds	r3, r0, r3
   2a798:	mov	lr, #0
   2a79c:	adc	r1, r1, lr
   2a7a0:	cmp	r1, r3, asr #31
   2a7a4:	lslne	r3, r7, #9
   2a7a8:	movne	ip, #1
   2a7ac:	lslne	r2, r6, #9
   2a7b0:	orrne	r3, r3, r6, lsr #23
   2a7b4:	b	2a02c <__assert_fail@plt+0x18d84>
   2a7b8:	umull	r0, r1, r6, lr
   2a7bc:	cmp	r3, #0
   2a7c0:	umull	r2, r3, lr, r3
   2a7c4:	strd	r0, [sp, #16]
   2a7c8:	mov	r0, r2
   2a7cc:	mov	r1, r3
   2a7d0:	strd	r0, [sp, #8]
   2a7d4:	bge	2a7ec <__assert_fail@plt+0x19544>
   2a7d8:	subs	r3, r0, ip
   2a7dc:	str	r3, [sp, #8]
   2a7e0:	ldr	r3, [sp, #12]
   2a7e4:	sbc	r3, r3, lr
   2a7e8:	str	r3, [sp, #12]
   2a7ec:	ldr	r1, [sp, #8]
   2a7f0:	mov	r2, #0
   2a7f4:	ldr	r3, [sp, #20]
   2a7f8:	adds	r3, r1, r3
   2a7fc:	ldr	r1, [sp, #12]
   2a800:	adc	r2, r1, r2
   2a804:	cmp	r2, r3, asr #31
   2a808:	bne	2a9a8 <__assert_fail@plt+0x19700>
   2a80c:	ldr	sl, [sp, #16]
   2a810:	b	2a08c <__assert_fail@plt+0x18de4>
   2a814:	cmp	r3, #0
   2a818:	umull	r6, r7, sl, lr
   2a81c:	umull	r2, r3, lr, r3
   2a820:	strd	r2, [sp, #8]
   2a824:	strd	r6, [sp, #16]
   2a828:	bge	2a840 <__assert_fail@plt+0x19598>
   2a82c:	subs	r3, r2, ip
   2a830:	str	r3, [sp, #8]
   2a834:	ldr	r3, [sp, #12]
   2a838:	sbc	r3, r3, lr
   2a83c:	str	r3, [sp, #12]
   2a840:	ldr	r3, [sp, #8]
   2a844:	mov	lr, #0
   2a848:	ldr	r6, [sp, #20]
   2a84c:	adds	r2, r3, r6
   2a850:	ldr	r3, [sp, #12]
   2a854:	adc	lr, r3, lr
   2a858:	cmp	lr, r2, asr #31
   2a85c:	bne	2aaac <__assert_fail@plt+0x19804>
   2a860:	ldr	lr, [sp, #16]
   2a864:	b	2a34c <__assert_fail@plt+0x190a4>
   2a868:	movw	r3, #49980	; 0xc33c
   2a86c:	movt	r3, #2
   2a870:	movw	r1, #49992	; 0xc348
   2a874:	movt	r1, #2
   2a878:	movw	r0, #50008	; 0xc358
   2a87c:	movt	r0, #2
   2a880:	mov	r2, #85	; 0x55
   2a884:	bl	112a8 <__assert_fail@plt>
   2a888:	ldrd	r2, [sp]
   2a88c:	mov	r1, #1
   2a890:	ldr	ip, [sp]
   2a894:	mul	r0, r6, r3
   2a898:	umull	r2, r3, r6, r2
   2a89c:	mla	r0, ip, r7, r0
   2a8a0:	mov	ip, r2
   2a8a4:	add	r3, r0, r3
   2a8a8:	b	2a1cc <__assert_fail@plt+0x18f24>
   2a8ac:	ldrd	r2, [sp]
   2a8b0:	mov	ip, #1
   2a8b4:	ldr	r1, [sp]
   2a8b8:	mul	r0, r6, r3
   2a8bc:	umull	r2, r3, r6, r2
   2a8c0:	mla	r0, r1, r7, r0
   2a8c4:	mov	sl, r2
   2a8c8:	add	r3, r0, r3
   2a8cc:	b	29f24 <__assert_fail@plt+0x18c7c>
   2a8d0:	ldrd	r2, [sp]
   2a8d4:	mov	r1, #1
   2a8d8:	ldr	ip, [sp]
   2a8dc:	mul	r0, r6, r3
   2a8e0:	umull	r2, r3, r6, r2
   2a8e4:	mla	r0, ip, r7, r0
   2a8e8:	mov	ip, r2
   2a8ec:	add	r3, r0, r3
   2a8f0:	b	29e70 <__assert_fail@plt+0x18bc8>
   2a8f4:	ldrd	r2, [sp]
   2a8f8:	mov	ip, #1
   2a8fc:	ldr	r1, [sp]
   2a900:	mul	r0, r6, r3
   2a904:	umull	r2, r3, r6, r2
   2a908:	mla	r0, r1, r7, r0
   2a90c:	mov	sl, r2
   2a910:	add	r3, r0, r3
   2a914:	b	29f00 <__assert_fail@plt+0x18c58>
   2a918:	ldrd	r2, [sp]
   2a91c:	mov	ip, #1
   2a920:	ldr	r1, [sp]
   2a924:	mul	r0, r6, r3
   2a928:	umull	r2, r3, r6, r2
   2a92c:	mla	r0, r1, r7, r0
   2a930:	mov	sl, r2
   2a934:	add	r3, r0, r3
   2a938:	b	29eb8 <__assert_fail@plt+0x18c10>
   2a93c:	ldrd	r2, [sp]
   2a940:	mov	ip, #1
   2a944:	ldr	r1, [sp]
   2a948:	mul	r0, r6, r3
   2a94c:	umull	r2, r3, r6, r2
   2a950:	mla	r0, r1, r7, r0
   2a954:	mov	sl, r2
   2a958:	add	r3, r0, r3
   2a95c:	b	29edc <__assert_fail@plt+0x18c34>
   2a960:	ldrd	r2, [sp]
   2a964:	mov	ip, #1
   2a968:	ldr	lr, [sp]
   2a96c:	mul	r6, r0, r3
   2a970:	umull	r2, r3, r0, r2
   2a974:	mla	r6, lr, r1, r6
   2a978:	mov	lr, r2
   2a97c:	add	r2, r6, r3
   2a980:	b	29f48 <__assert_fail@plt+0x18ca0>
   2a984:	ldrd	r2, [sp]
   2a988:	mov	r1, #1
   2a98c:	ldr	ip, [sp]
   2a990:	mul	r0, r6, r3
   2a994:	umull	r2, r3, r6, r2
   2a998:	mla	r0, ip, r7, r0
   2a99c:	mov	ip, r2
   2a9a0:	add	r3, r0, r3
   2a9a4:	b	2a068 <__assert_fail@plt+0x18dc0>
   2a9a8:	ldrd	r2, [sp]
   2a9ac:	mov	ip, #1
   2a9b0:	ldr	r1, [sp]
   2a9b4:	mul	r0, r6, r3
   2a9b8:	umull	r2, r3, r6, r2
   2a9bc:	mla	r0, r1, r7, r0
   2a9c0:	mov	sl, r2
   2a9c4:	add	r3, r0, r3
   2a9c8:	b	2a08c <__assert_fail@plt+0x18de4>
   2a9cc:	mul	lr, r6, r1
   2a9d0:	mov	ip, #1
   2a9d4:	umull	r2, r3, r6, r0
   2a9d8:	mla	lr, r0, r7, lr
   2a9dc:	mov	r1, r2
   2a9e0:	add	lr, lr, r3
   2a9e4:	b	29f9c <__assert_fail@plt+0x18cf4>
   2a9e8:	ldrd	r2, [sp]
   2a9ec:	mov	r1, #1
   2a9f0:	ldr	ip, [sp]
   2a9f4:	mul	r0, r6, r3
   2a9f8:	umull	r2, r3, r6, r2
   2a9fc:	mla	r0, ip, r7, r0
   2aa00:	mov	ip, r2
   2aa04:	add	r3, r0, r3
   2aa08:	b	2a12c <__assert_fail@plt+0x18e84>
   2aa0c:	ldrd	r2, [sp]
   2aa10:	mov	ip, #1
   2aa14:	ldr	r1, [sp]
   2aa18:	mul	r0, r6, r3
   2aa1c:	umull	r2, r3, r6, r2
   2aa20:	mla	r0, r1, r7, r0
   2aa24:	mov	sl, r2
   2aa28:	add	r3, r0, r3
   2aa2c:	b	29e94 <__assert_fail@plt+0x18bec>
   2aa30:	ldrd	r2, [sp]
   2aa34:	mov	r1, #1
   2aa38:	ldr	ip, [sp]
   2aa3c:	mul	r0, r6, r3
   2aa40:	umull	r2, r3, r6, r2
   2aa44:	mla	r0, ip, r7, r0
   2aa48:	mov	sl, r2
   2aa4c:	add	r3, r0, r3
   2aa50:	b	2a328 <__assert_fail@plt+0x19080>
   2aa54:	ldrd	r2, [sp]
   2aa58:	mov	r1, #1
   2aa5c:	ldr	ip, [sp]
   2aa60:	mul	r0, r6, r3
   2aa64:	umull	r2, r3, r6, r2
   2aa68:	mla	r0, ip, r7, r0
   2aa6c:	mov	ip, r2
   2aa70:	add	r3, r0, r3
   2aa74:	b	2a26c <__assert_fail@plt+0x18fc4>
   2aa78:	adds	ip, r6, r6
   2aa7c:	mov	r1, #1
   2aa80:	adc	r3, r7, r7
   2aa84:	b	29ffc <__assert_fail@plt+0x18d54>
   2aa88:	ldrd	r2, [sp]
   2aa8c:	mov	r1, #1
   2aa90:	ldr	ip, [sp]
   2aa94:	mul	r0, r6, r3
   2aa98:	umull	r2, r3, r6, r2
   2aa9c:	mla	r0, ip, r7, r0
   2aaa0:	mov	ip, r2
   2aaa4:	add	r3, r0, r3
   2aaa8:	b	2a388 <__assert_fail@plt+0x190e0>
   2aaac:	ldrd	r2, [sp]
   2aab0:	mov	ip, #1
   2aab4:	ldr	lr, [sp]
   2aab8:	mul	r6, r0, r3
   2aabc:	umull	r2, r3, r0, r2
   2aac0:	mla	r6, lr, r1, r6
   2aac4:	mov	lr, r2
   2aac8:	add	r3, r6, r3
   2aacc:	mov	r2, r3
   2aad0:	b	2a34c <__assert_fail@plt+0x190a4>
   2aad4:	cmp	r1, #0
   2aad8:	cmpne	r0, #0
   2aadc:	beq	2ab28 <__assert_fail@plt+0x19880>
   2aae0:	strd	r4, [sp, #-16]!
   2aae4:	umull	r4, r5, r0, r1
   2aae8:	str	r6, [sp, #8]
   2aaec:	str	lr, [sp, #12]
   2aaf0:	adds	r3, r5, #0
   2aaf4:	movne	r3, #1
   2aaf8:	cmp	r4, #0
   2aafc:	blt	2ab08 <__assert_fail@plt+0x19860>
   2ab00:	cmp	r3, #0
   2ab04:	beq	2ab34 <__assert_fail@plt+0x1988c>
   2ab08:	bl	111a0 <__errno_location@plt>
   2ab0c:	mov	r3, #12
   2ab10:	ldrd	r4, [sp]
   2ab14:	ldr	r6, [sp, #8]
   2ab18:	add	sp, sp, #12
   2ab1c:	str	r3, [r0]
   2ab20:	mov	r0, #0
   2ab24:	pop	{pc}		; (ldr pc, [sp], #4)
   2ab28:	mov	r1, #1
   2ab2c:	mov	r0, r1
   2ab30:	b	10f9c <calloc@plt>
   2ab34:	ldrd	r4, [sp]
   2ab38:	ldr	r6, [sp, #8]
   2ab3c:	ldr	lr, [sp, #12]
   2ab40:	add	sp, sp, #16
   2ab44:	b	10f9c <calloc@plt>
   2ab48:	cmp	r0, #0
   2ab4c:	beq	2ab58 <__assert_fail@plt+0x198b0>
   2ab50:	blt	2ab60 <__assert_fail@plt+0x198b8>
   2ab54:	b	1111c <malloc@plt>
   2ab58:	mov	r0, #1
   2ab5c:	b	1111c <malloc@plt>
   2ab60:	str	r4, [sp, #-8]!
   2ab64:	str	lr, [sp, #4]
   2ab68:	bl	111a0 <__errno_location@plt>
   2ab6c:	mov	r3, #12
   2ab70:	ldr	r4, [sp]
   2ab74:	add	sp, sp, #4
   2ab78:	str	r3, [r0]
   2ab7c:	mov	r0, #0
   2ab80:	pop	{pc}		; (ldr pc, [sp], #4)
   2ab84:	cmp	r0, #0
   2ab88:	beq	2abb0 <__assert_fail@plt+0x19908>
   2ab8c:	cmp	r1, #0
   2ab90:	str	r4, [sp, #-8]!
   2ab94:	str	lr, [sp, #4]
   2ab98:	beq	2abb8 <__assert_fail@plt+0x19910>
   2ab9c:	blt	2abcc <__assert_fail@plt+0x19924>
   2aba0:	ldr	r4, [sp]
   2aba4:	ldr	lr, [sp, #4]
   2aba8:	add	sp, sp, #8
   2abac:	b	110a4 <realloc@plt>
   2abb0:	mov	r0, r1
   2abb4:	b	2ab48 <__assert_fail@plt+0x198a0>
   2abb8:	bl	2ad30 <__assert_fail@plt+0x19a88>
   2abbc:	ldr	r4, [sp]
   2abc0:	add	sp, sp, #4
   2abc4:	mov	r0, #0
   2abc8:	pop	{pc}		; (ldr pc, [sp], #4)
   2abcc:	bl	111a0 <__errno_location@plt>
   2abd0:	mov	r3, #12
   2abd4:	str	r3, [r0]
   2abd8:	b	2abbc <__assert_fail@plt+0x19914>
   2abdc:	strd	r4, [sp, #-16]!
   2abe0:	mov	r4, r0
   2abe4:	str	r6, [sp, #8]
   2abe8:	str	lr, [sp, #12]
   2abec:	bl	110f8 <__fpending@plt>
   2abf0:	ldr	r5, [r4]
   2abf4:	mov	r6, r0
   2abf8:	mov	r0, r4
   2abfc:	bl	12768 <__assert_fail@plt+0x14c0>
   2ac00:	mov	r4, r0
   2ac04:	and	r5, r5, #32
   2ac08:	cmp	r5, #0
   2ac0c:	bne	2ac44 <__assert_fail@plt+0x1999c>
   2ac10:	cmp	r0, #0
   2ac14:	beq	2ac30 <__assert_fail@plt+0x19988>
   2ac18:	cmp	r6, #0
   2ac1c:	bne	2ac5c <__assert_fail@plt+0x199b4>
   2ac20:	bl	111a0 <__errno_location@plt>
   2ac24:	ldr	r4, [r0]
   2ac28:	subs	r4, r4, #9
   2ac2c:	mvnne	r4, #0
   2ac30:	mov	r0, r4
   2ac34:	ldrd	r4, [sp]
   2ac38:	ldr	r6, [sp, #8]
   2ac3c:	add	sp, sp, #12
   2ac40:	pop	{pc}		; (ldr pc, [sp], #4)
   2ac44:	cmp	r0, #0
   2ac48:	bne	2ac5c <__assert_fail@plt+0x199b4>
   2ac4c:	bl	111a0 <__errno_location@plt>
   2ac50:	str	r4, [r0]
   2ac54:	mvn	r4, #0
   2ac58:	b	2ac30 <__assert_fail@plt+0x19988>
   2ac5c:	mvn	r4, #0
   2ac60:	b	2ac30 <__assert_fail@plt+0x19988>
   2ac64:	ldr	ip, [r0, #4]
   2ac68:	cmp	ip, r1
   2ac6c:	bcs	2acd8 <__assert_fail@plt+0x19a30>
   2ac70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ac74:	mov	r5, r1
   2ac78:	mov	r4, r0
   2ac7c:	strd	r6, [sp, #8]
   2ac80:	umull	r6, r7, r1, r3
   2ac84:	str	r8, [sp, #16]
   2ac88:	mov	r8, r3
   2ac8c:	str	lr, [sp, #20]
   2ac90:	cmp	r7, #0
   2ac94:	bne	2ad1c <__assert_fail@plt+0x19a74>
   2ac98:	ldr	r0, [r0, #8]
   2ac9c:	cmp	r0, r2
   2aca0:	beq	2ace8 <__assert_fail@plt+0x19a40>
   2aca4:	mov	r1, r6
   2aca8:	bl	2ab84 <__assert_fail@plt+0x198dc>
   2acac:	subs	r6, r0, #0
   2acb0:	beq	2ad14 <__assert_fail@plt+0x19a6c>
   2acb4:	mov	r3, #1
   2acb8:	str	r5, [r4]
   2acbc:	stmib	r4, {r5, r6}
   2acc0:	ldrd	r4, [sp]
   2acc4:	mov	r0, r3
   2acc8:	ldrd	r6, [sp, #8]
   2accc:	ldr	r8, [sp, #16]
   2acd0:	add	sp, sp, #20
   2acd4:	pop	{pc}		; (ldr pc, [sp], #4)
   2acd8:	mov	r3, #1
   2acdc:	str	r1, [r0]
   2ace0:	mov	r0, r3
   2ace4:	bx	lr
   2ace8:	mov	r0, r6
   2acec:	bl	2ab48 <__assert_fail@plt+0x198a0>
   2acf0:	subs	r6, r0, #0
   2acf4:	beq	2ad14 <__assert_fail@plt+0x19a6c>
   2acf8:	ldr	r1, [r4, #8]
   2acfc:	cmp	r1, #0
   2ad00:	beq	2acb4 <__assert_fail@plt+0x19a0c>
   2ad04:	ldr	r2, [r4]
   2ad08:	mul	r2, r2, r8
   2ad0c:	bl	11038 <memcpy@plt>
   2ad10:	b	2acb4 <__assert_fail@plt+0x19a0c>
   2ad14:	mov	r3, #0
   2ad18:	b	2acc0 <__assert_fail@plt+0x19a18>
   2ad1c:	bl	111a0 <__errno_location@plt>
   2ad20:	mov	r2, #12
   2ad24:	mov	r3, #0
   2ad28:	str	r2, [r0]
   2ad2c:	b	2acc0 <__assert_fail@plt+0x19a18>
   2ad30:	strd	r4, [sp, #-12]!
   2ad34:	mov	r5, r0
   2ad38:	str	lr, [sp, #8]
   2ad3c:	sub	sp, sp, #12
   2ad40:	bl	111a0 <__errno_location@plt>
   2ad44:	mov	r4, r0
   2ad48:	mov	r2, #0
   2ad4c:	ldr	r3, [r4]
   2ad50:	mov	r0, r5
   2ad54:	str	r2, [r4]
   2ad58:	str	r3, [sp]
   2ad5c:	str	r3, [sp, #4]
   2ad60:	bl	11014 <free@plt>
   2ad64:	ldr	r3, [r4]
   2ad68:	add	r2, sp, #8
   2ad6c:	clz	r3, r3
   2ad70:	lsr	r3, r3, #5
   2ad74:	add	r3, r2, r3, lsl #2
   2ad78:	ldr	r3, [r3, #-8]
   2ad7c:	str	r3, [r4]
   2ad80:	add	sp, sp, #12
   2ad84:	ldrd	r4, [sp]
   2ad88:	add	sp, sp, #8
   2ad8c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ad90:	mov	r0, #14
   2ad94:	str	r4, [sp, #-8]!
   2ad98:	str	lr, [sp, #4]
   2ad9c:	bl	11248 <nl_langinfo@plt>
   2ada0:	cmp	r0, #0
   2ada4:	beq	2adc8 <__assert_fail@plt+0x19b20>
   2ada8:	ldrb	r2, [r0]
   2adac:	movw	r3, #50048	; 0xc380
   2adb0:	movt	r3, #2
   2adb4:	ldr	r4, [sp]
   2adb8:	add	sp, sp, #4
   2adbc:	cmp	r2, #0
   2adc0:	moveq	r0, r3
   2adc4:	pop	{pc}		; (ldr pc, [sp], #4)
   2adc8:	ldr	r4, [sp]
   2adcc:	add	sp, sp, #4
   2add0:	movw	r0, #50048	; 0xc380
   2add4:	movt	r0, #2
   2add8:	pop	{pc}		; (ldr pc, [sp], #4)
   2addc:	strd	r4, [sp, #-20]!	; 0xffffffec
   2ade0:	mov	r5, r2
   2ade4:	strd	r6, [sp, #8]
   2ade8:	subs	r6, r0, #0
   2adec:	mov	r7, r1
   2adf0:	str	lr, [sp, #16]
   2adf4:	sub	sp, sp, #12
   2adf8:	addeq	r6, sp, #4
   2adfc:	mov	r0, r6
   2ae00:	bl	11104 <mbrtowc@plt>
   2ae04:	cmp	r5, #0
   2ae08:	cmnne	r0, #3
   2ae0c:	mov	r4, r0
   2ae10:	bhi	2ae2c <__assert_fail@plt+0x19b84>
   2ae14:	mov	r0, r4
   2ae18:	add	sp, sp, #12
   2ae1c:	ldrd	r4, [sp]
   2ae20:	ldrd	r6, [sp, #8]
   2ae24:	add	sp, sp, #16
   2ae28:	pop	{pc}		; (ldr pc, [sp], #4)
   2ae2c:	mov	r0, #0
   2ae30:	bl	2ae84 <__assert_fail@plt+0x19bdc>
   2ae34:	cmp	r0, #0
   2ae38:	bne	2ae14 <__assert_fail@plt+0x19b6c>
   2ae3c:	ldrb	r3, [r7]
   2ae40:	mov	r4, #1
   2ae44:	str	r3, [r6]
   2ae48:	b	2ae14 <__assert_fail@plt+0x19b6c>
   2ae4c:	umull	r2, r3, r1, r2
   2ae50:	cmp	r3, #0
   2ae54:	bne	2ae60 <__assert_fail@plt+0x19bb8>
   2ae58:	mov	r1, r2
   2ae5c:	b	2ab84 <__assert_fail@plt+0x198dc>
   2ae60:	str	r4, [sp, #-8]!
   2ae64:	str	lr, [sp, #4]
   2ae68:	bl	111a0 <__errno_location@plt>
   2ae6c:	mov	r3, #12
   2ae70:	ldr	r4, [sp]
   2ae74:	add	sp, sp, #4
   2ae78:	str	r3, [r0]
   2ae7c:	mov	r0, #0
   2ae80:	pop	{pc}		; (ldr pc, [sp], #4)
   2ae84:	push	{lr}		; (str lr, [sp, #-4]!)
   2ae88:	sub	sp, sp, #268	; 0x10c
   2ae8c:	movw	r2, #257	; 0x101
   2ae90:	add	r1, sp, #4
   2ae94:	bl	2aedc <__assert_fail@plt+0x19c34>
   2ae98:	cmp	r0, #0
   2ae9c:	movne	r0, #0
   2aea0:	bne	2aed4 <__assert_fail@plt+0x19c2c>
   2aea4:	movw	r1, #50056	; 0xc388
   2aea8:	movt	r1, #2
   2aeac:	add	r0, sp, #4
   2aeb0:	bl	10fd8 <strcmp@plt>
   2aeb4:	cmp	r0, #0
   2aeb8:	beq	2aed4 <__assert_fail@plt+0x19c2c>
   2aebc:	add	r0, sp, #4
   2aec0:	movw	r1, #50060	; 0xc38c
   2aec4:	movt	r1, #2
   2aec8:	bl	10fd8 <strcmp@plt>
   2aecc:	adds	r0, r0, #0
   2aed0:	movne	r0, #1
   2aed4:	add	sp, sp, #268	; 0x10c
   2aed8:	pop	{pc}		; (ldr pc, [sp], #4)
   2aedc:	strd	r4, [sp, #-16]!
   2aee0:	mov	r5, r1
   2aee4:	mov	r1, #0
   2aee8:	mov	r4, r2
   2aeec:	str	r6, [sp, #8]
   2aef0:	str	lr, [sp, #12]
   2aef4:	bl	11230 <setlocale@plt>
   2aef8:	subs	r6, r0, #0
   2aefc:	beq	2af7c <__assert_fail@plt+0x19cd4>
   2af00:	bl	11188 <strlen@plt>
   2af04:	cmp	r4, r0
   2af08:	bhi	2af28 <__assert_fail@plt+0x19c80>
   2af0c:	cmp	r4, #0
   2af10:	moveq	r0, #34	; 0x22
   2af14:	bne	2af4c <__assert_fail@plt+0x19ca4>
   2af18:	ldrd	r4, [sp]
   2af1c:	ldr	r6, [sp, #8]
   2af20:	add	sp, sp, #12
   2af24:	pop	{pc}		; (ldr pc, [sp], #4)
   2af28:	add	r2, r0, #1
   2af2c:	mov	r1, r6
   2af30:	mov	r0, r5
   2af34:	bl	11038 <memcpy@plt>
   2af38:	ldrd	r4, [sp]
   2af3c:	mov	r0, #0
   2af40:	ldr	r6, [sp, #8]
   2af44:	add	sp, sp, #12
   2af48:	pop	{pc}		; (ldr pc, [sp], #4)
   2af4c:	sub	r4, r4, #1
   2af50:	mov	r1, r6
   2af54:	mov	r2, r4
   2af58:	mov	r0, r5
   2af5c:	bl	11038 <memcpy@plt>
   2af60:	mov	r3, #0
   2af64:	mov	r0, #34	; 0x22
   2af68:	strb	r3, [r5, r4]
   2af6c:	ldrd	r4, [sp]
   2af70:	ldr	r6, [sp, #8]
   2af74:	add	sp, sp, #12
   2af78:	pop	{pc}		; (ldr pc, [sp], #4)
   2af7c:	cmp	r4, #0
   2af80:	mov	r0, #22
   2af84:	strbne	r6, [r5]
   2af88:	ldrd	r4, [sp]
   2af8c:	ldr	r6, [sp, #8]
   2af90:	add	sp, sp, #12
   2af94:	pop	{pc}		; (ldr pc, [sp], #4)
   2af98:	mov	r1, #0
   2af9c:	b	11230 <setlocale@plt>
   2afa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2afa4:	mov	r7, r0
   2afa8:	ldr	r6, [pc, #72]	; 2aff8 <__assert_fail@plt+0x19d50>
   2afac:	ldr	r5, [pc, #72]	; 2affc <__assert_fail@plt+0x19d54>
   2afb0:	add	r6, pc, r6
   2afb4:	add	r5, pc, r5
   2afb8:	sub	r6, r6, r5
   2afbc:	mov	r8, r1
   2afc0:	mov	r9, r2
   2afc4:	bl	10f70 <pthread_mutex_unlock@plt-0x20>
   2afc8:	asrs	r6, r6, #2
   2afcc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2afd0:	mov	r4, #0
   2afd4:	add	r4, r4, #1
   2afd8:	ldr	r3, [r5], #4
   2afdc:	mov	r2, r9
   2afe0:	mov	r1, r8
   2afe4:	mov	r0, r7
   2afe8:	blx	r3
   2afec:	cmp	r6, r4
   2aff0:	bne	2afd4 <__assert_fail@plt+0x19d2c>
   2aff4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2aff8:	andeq	r1, r1, ip, asr pc
   2affc:	andeq	r1, r1, r4, asr pc
   2b000:	bx	lr
   2b004:	ldr	r3, [pc, #12]	; 2b018 <__assert_fail@plt+0x19d70>
   2b008:	mov	r1, #0
   2b00c:	add	r3, pc, r3
   2b010:	ldr	r2, [r3]
   2b014:	b	111b8 <__cxa_atexit@plt>
   2b018:	andeq	r2, r1, r0, lsl r1

Disassembly of section .fini:

0002b01c <.fini>:
   2b01c:	push	{r3, lr}
   2b020:	pop	{r3, pc}
