
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010a70 <.init>:
   10a70:	push	{r3, lr}
   10a74:	bl	10c5c <__assert_fail@plt+0x4c>
   10a78:	pop	{r3, pc}

Disassembly of section .plt:

00010a7c <calloc@plt-0x14>:
   10a7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10a80:	ldr	lr, [pc, #4]	; 10a8c <calloc@plt-0x4>
   10a84:	add	lr, pc, lr
   10a88:	ldr	pc, [lr, #8]!
   10a8c:	andeq	r9, r1, r4, ror r5

00010a90 <calloc@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #102400	; 0x19000
   10a98:	ldr	pc, [ip, #1396]!	; 0x574

00010a9c <strcmp@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #102400	; 0x19000
   10aa4:	ldr	pc, [ip, #1388]!	; 0x56c

00010aa8 <fopen@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #102400	; 0x19000
   10ab0:	ldr	pc, [ip, #1380]!	; 0x564

00010ab4 <free@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #102400	; 0x19000
   10abc:	ldr	pc, [ip, #1372]!	; 0x55c

00010ac0 <utf8proc_get_property@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #102400	; 0x19000
   10ac8:	ldr	pc, [ip, #1364]!	; 0x554

00010acc <fgets@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #102400	; 0x19000
   10ad4:	ldr	pc, [ip, #1356]!	; 0x54c

00010ad8 <utf8proc_encode_char@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #102400	; 0x19000
   10ae0:	ldr	pc, [ip, #1348]!	; 0x544

00010ae4 <strdup@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #102400	; 0x19000
   10aec:	ldr	pc, [ip, #1340]!	; 0x53c

00010af0 <rewind@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #102400	; 0x19000
   10af8:	ldr	pc, [ip, #1332]!	; 0x534

00010afc <utf8proc_tolower@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #102400	; 0x19000
   10b04:	ldr	pc, [ip, #1324]!	; 0x52c

00010b08 <__xstat@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #102400	; 0x19000
   10b10:	ldr	pc, [ip, #1316]!	; 0x524

00010b14 <fread@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #102400	; 0x19000
   10b1c:	ldr	pc, [ip, #1308]!	; 0x51c

00010b20 <utf8proc_iterate@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #102400	; 0x19000
   10b28:	ldr	pc, [ip, #1300]!	; 0x514

00010b2c <malloc@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #102400	; 0x19000
   10b34:	ldr	pc, [ip, #1292]!	; 0x50c

00010b38 <__libc_start_main@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #102400	; 0x19000
   10b40:	ldr	pc, [ip, #1284]!	; 0x504

00010b44 <__sysv_signal@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #102400	; 0x19000
   10b4c:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b50 <__gmon_start__@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #102400	; 0x19000
   10b58:	ldr	pc, [ip, #1268]!	; 0x4f4

00010b5c <exit@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #102400	; 0x19000
   10b64:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b68 <utf8proc_category@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #102400	; 0x19000
   10b70:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b74 <strlen@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #102400	; 0x19000
   10b7c:	ldr	pc, [ip, #1244]!	; 0x4dc

00010b80 <fprintf@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #102400	; 0x19000
   10b88:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b8c <__isoc99_sscanf@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #102400	; 0x19000
   10b94:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b98 <fclose@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #102400	; 0x19000
   10ba0:	ldr	pc, [ip, #1220]!	; 0x4c4

00010ba4 <utf8proc_NFC@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #102400	; 0x19000
   10bac:	ldr	pc, [ip, #1212]!	; 0x4bc

00010bb0 <fputc@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #102400	; 0x19000
   10bb8:	ldr	pc, [ip, #1204]!	; 0x4b4

00010bbc <sprintf@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #102400	; 0x19000
   10bc4:	ldr	pc, [ip, #1196]!	; 0x4ac

00010bc8 <atoi@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #102400	; 0x19000
   10bd0:	ldr	pc, [ip, #1188]!	; 0x4a4

00010bd4 <utf8proc_errmsg@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #102400	; 0x19000
   10bdc:	ldr	pc, [ip, #1180]!	; 0x49c

00010be0 <fputs@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #102400	; 0x19000
   10be8:	ldr	pc, [ip, #1172]!	; 0x494

00010bec <strncmp@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #102400	; 0x19000
   10bf4:	ldr	pc, [ip, #1164]!	; 0x48c

00010bf8 <abort@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #102400	; 0x19000
   10c00:	ldr	pc, [ip, #1156]!	; 0x484

00010c04 <getc@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #102400	; 0x19000
   10c0c:	ldr	pc, [ip, #1148]!	; 0x47c

00010c10 <__assert_fail@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #102400	; 0x19000
   10c18:	ldr	pc, [ip, #1140]!	; 0x474

Disassembly of section .text:

00010c20 <error@@Base-0x22c0>:
   10c20:	mov	fp, #0
   10c24:	mov	lr, #0
   10c28:	pop	{r1}		; (ldr r1, [sp], #4)
   10c2c:	mov	r2, sp
   10c30:	push	{r2}		; (str r2, [sp, #-4]!)
   10c34:	push	{r0}		; (str r0, [sp, #-4]!)
   10c38:	ldr	ip, [pc, #16]	; 10c50 <__assert_fail@plt+0x40>
   10c3c:	push	{ip}		; (str ip, [sp, #-4]!)
   10c40:	ldr	r0, [pc, #12]	; 10c54 <__assert_fail@plt+0x44>
   10c44:	ldr	r3, [pc, #12]	; 10c58 <__assert_fail@plt+0x48>
   10c48:	bl	10b38 <__libc_start_main@plt>
   10c4c:	bl	10bf8 <abort@plt>
   10c50:	andeq	r5, r1, ip, lsr #22
   10c54:	andeq	r1, r1, ip, lsl #22
   10c58:	andeq	r5, r1, ip, asr #21
   10c5c:	ldr	r3, [pc, #20]	; 10c78 <__assert_fail@plt+0x68>
   10c60:	ldr	r2, [pc, #20]	; 10c7c <__assert_fail@plt+0x6c>
   10c64:	add	r3, pc, r3
   10c68:	ldr	r2, [r3, r2]
   10c6c:	cmp	r2, #0
   10c70:	bxeq	lr
   10c74:	b	10b50 <__gmon_start__@plt>
   10c78:	muleq	r1, r4, r3
   10c7c:	strdeq	r0, [r0], -r8
   10c80:	ldr	r0, [pc, #24]	; 10ca0 <__assert_fail@plt+0x90>
   10c84:	ldr	r3, [pc, #24]	; 10ca4 <__assert_fail@plt+0x94>
   10c88:	cmp	r3, r0
   10c8c:	bxeq	lr
   10c90:	ldr	r3, [pc, #16]	; 10ca8 <__assert_fail@plt+0x98>
   10c94:	cmp	r3, #0
   10c98:	bxeq	lr
   10c9c:	bx	r3
   10ca0:	andeq	sl, r2, r8, asr r3
   10ca4:	andeq	sl, r2, r8, asr r3
   10ca8:	andeq	r0, r0, r0
   10cac:	ldr	r0, [pc, #36]	; 10cd8 <__assert_fail@plt+0xc8>
   10cb0:	ldr	r1, [pc, #36]	; 10cdc <__assert_fail@plt+0xcc>
   10cb4:	sub	r1, r1, r0
   10cb8:	asr	r1, r1, #2
   10cbc:	add	r1, r1, r1, lsr #31
   10cc0:	asrs	r1, r1, #1
   10cc4:	bxeq	lr
   10cc8:	ldr	r3, [pc, #16]	; 10ce0 <__assert_fail@plt+0xd0>
   10ccc:	cmp	r3, #0
   10cd0:	bxeq	lr
   10cd4:	bx	r3
   10cd8:	andeq	sl, r2, r8, asr r3
   10cdc:	andeq	sl, r2, r8, asr r3
   10ce0:	andeq	r0, r0, r0
   10ce4:	push	{r4, lr}
   10ce8:	ldr	r4, [pc, #24]	; 10d08 <__assert_fail@plt+0xf8>
   10cec:	ldrb	r3, [r4]
   10cf0:	cmp	r3, #0
   10cf4:	popne	{r4, pc}
   10cf8:	bl	10c80 <__assert_fail@plt+0x70>
   10cfc:	mov	r3, #1
   10d00:	strb	r3, [r4]
   10d04:	pop	{r4, pc}
   10d08:	andeq	sl, r2, r8, asr r3
   10d0c:	b	10cac <__assert_fail@plt+0x9c>
   10d10:	push	{fp, lr}
   10d14:	mov	fp, sp
   10d18:	sub	sp, sp, #24
   10d1c:	ldr	r2, [pc, #264]	; 10e2c <__assert_fail@plt+0x21c>
   10d20:	ldr	r2, [pc, r2]
   10d24:	ldr	r3, [pc, #260]	; 10e30 <__assert_fail@plt+0x220>
   10d28:	ldr	r3, [pc, r3]
   10d2c:	str	r0, [fp, #-4]
   10d30:	str	r1, [fp, #-8]
   10d34:	mov	r0, #0
   10d38:	str	r0, [sp, #4]
   10d3c:	ldr	r0, [fp, #-4]
   10d40:	ldr	r1, [pc, #240]	; 10e38 <__assert_fail@plt+0x228>
   10d44:	ldr	r1, [pc, r1]
   10d48:	add	r0, r1, r0, lsl #4
   10d4c:	ldr	r0, [r0, #12]
   10d50:	add	r0, r0, #1
   10d54:	movw	r1, #4
   10d58:	str	r3, [sp]
   10d5c:	blx	r2
   10d60:	str	r0, [sp, #12]
   10d64:	movw	r0, #0
   10d68:	str	r0, [sp, #8]
   10d6c:	ldr	r0, [pc, #192]	; 10e34 <__assert_fail@plt+0x224>
   10d70:	ldr	r0, [pc, r0]
   10d74:	ldr	r1, [sp, #8]
   10d78:	ldr	r2, [fp, #-4]
   10d7c:	ldr	r3, [pc, #184]	; 10e3c <__assert_fail@plt+0x22c>
   10d80:	ldr	r3, [pc, r3]
   10d84:	add	r2, r3, r2, lsl #4
   10d88:	ldr	r2, [r2, #12]
   10d8c:	cmp	r1, r2
   10d90:	bge	10e14 <__assert_fail@plt+0x204>
   10d94:	ldr	r0, [fp, #-4]
   10d98:	ldr	r1, [pc, #160]	; 10e40 <__assert_fail@plt+0x230>
   10d9c:	ldr	r1, [pc, r1]
   10da0:	ldr	r0, [r1, r0, lsl #2]
   10da4:	ldr	r1, [sp, #8]
   10da8:	add	r0, r0, r1, lsl #3
   10dac:	ldr	r0, [r0]
   10db0:	add	r0, r0, #12
   10db4:	ldr	r1, [fp, #-4]
   10db8:	movw	r2, #1
   10dbc:	sub	r1, r2, r1
   10dc0:	add	r0, r0, r1
   10dc4:	ldrsb	r0, [r0]
   10dc8:	cmp	r0, #0
   10dcc:	beq	10e00 <__assert_fail@plt+0x1f0>
   10dd0:	ldr	r0, [fp, #-4]
   10dd4:	ldr	r1, [pc, #104]	; 10e44 <__assert_fail@plt+0x234>
   10dd8:	ldr	r1, [pc, r1]
   10ddc:	ldr	r0, [r1, r0, lsl #2]
   10de0:	ldr	r1, [sp, #8]
   10de4:	add	r0, r0, r1, lsl #3
   10de8:	ldr	r1, [sp, #12]
   10dec:	ldr	r2, [sp, #4]
   10df0:	add	r3, r2, #1
   10df4:	str	r3, [sp, #4]
   10df8:	add	r1, r1, r2, lsl #2
   10dfc:	str	r0, [r1]
   10e00:	b	10e04 <__assert_fail@plt+0x1f4>
   10e04:	ldr	r0, [sp, #8]
   10e08:	add	r0, r0, #1
   10e0c:	str	r0, [sp, #8]
   10e10:	b	10d6c <__assert_fail@plt+0x15c>
   10e14:	ldr	r0, [sp, #4]
   10e18:	ldr	r1, [fp, #-8]
   10e1c:	str	r0, [r1]
   10e20:	ldr	r0, [sp, #12]
   10e24:	mov	sp, fp
   10e28:	pop	{fp, pc}
   10e2c:	andeq	r9, r1, r8, lsl r4
   10e30:	andeq	r9, r1, r4, lsr #7
   10e34:	andeq	r9, r1, ip, asr r3
   10e38:	andeq	r9, r1, r8, lsl #7
   10e3c:	andeq	r9, r1, ip, asr #6
   10e40:			; <UNDEFINED> instruction: 0x000193b0
   10e44:	andeq	r9, r1, r4, ror r3
   10e48:	push	{fp, lr}
   10e4c:	mov	fp, sp
   10e50:	sub	sp, sp, #48	; 0x30
   10e54:	str	r0, [fp, #-4]
   10e58:	movw	r0, #0
   10e5c:	str	r0, [fp, #-8]
   10e60:	ldr	r0, [fp, #-8]
   10e64:	cmp	r0, #2
   10e68:	bge	1105c <__assert_fail@plt+0x44c>
   10e6c:	ldr	r0, [pc, #624]	; 110e4 <__assert_fail@plt+0x4d4>
   10e70:	ldr	r2, [pc, r0]
   10e74:	ldr	r0, [pc, #620]	; 110e8 <__assert_fail@plt+0x4d8>
   10e78:	ldr	r0, [pc, r0]
   10e7c:	ldr	r1, [fp, #-8]
   10e80:	ldr	r3, [pc, #648]	; 11110 <__assert_fail@plt+0x500>
   10e84:	ldr	r3, [pc, r3]
   10e88:	add	r3, r3, r1, lsl #4
   10e8c:	ldr	ip, [fp, #-4]
   10e90:	add	r1, ip, r1, lsl #2
   10e94:	ldr	r1, [r1]
   10e98:	str	r0, [sp, #24]
   10e9c:	mov	r0, r3
   10ea0:	ldr	r3, [sp, #24]
   10ea4:	blx	r3
   10ea8:	ldr	r0, [fp, #-8]
   10eac:	cmp	r0, #0
   10eb0:	bne	10edc <__assert_fail@plt+0x2cc>
   10eb4:	ldr	r0, [pc, #560]	; 110ec <__assert_fail@plt+0x4dc>
   10eb8:	ldr	r0, [pc, r0]
   10ebc:	ldrb	r0, [r0, #11]
   10ec0:	cmp	r0, #0
   10ec4:	beq	10edc <__assert_fail@plt+0x2cc>
   10ec8:	ldr	r0, [pc, #568]	; 11108 <__assert_fail@plt+0x4f8>
   10ecc:	add	r0, pc, r0
   10ed0:	ldr	r1, [pc, #564]	; 1110c <__assert_fail@plt+0x4fc>
   10ed4:	ldr	r1, [pc, r1]
   10ed8:	blx	r1
   10edc:	ldr	r0, [pc, #524]	; 110f0 <__assert_fail@plt+0x4e0>
   10ee0:	ldr	r0, [pc, r0]
   10ee4:	ldr	r1, [fp, #-8]
   10ee8:	ldr	r2, [pc, #548]	; 11114 <__assert_fail@plt+0x504>
   10eec:	ldr	r2, [pc, r2]
   10ef0:	add	r3, r2, r1, lsl #4
   10ef4:	ldr	ip, [pc, #540]	; 11118 <__assert_fail@plt+0x508>
   10ef8:	ldr	ip, [pc, ip]
   10efc:	add	r1, ip, r1, lsl #4
   10f00:	str	r0, [sp, #20]
   10f04:	mov	r0, r3
   10f08:	str	r2, [sp, #16]
   10f0c:	bl	14114 <error@@Base+0x1234>
   10f10:	ldr	r0, [fp, #-8]
   10f14:	ldr	r1, [sp, #16]
   10f18:	add	r0, r1, r0, lsl #4
   10f1c:	ldr	r0, [r0, #12]
   10f20:	add	r0, r0, #1
   10f24:	mov	r1, #8
   10f28:	bl	12804 <__assert_fail@plt+0x1bf4>
   10f2c:	ldr	r1, [fp, #-8]
   10f30:	ldr	r2, [pc, #484]	; 1111c <__assert_fail@plt+0x50c>
   10f34:	ldr	r2, [pc, r2]
   10f38:	str	r0, [r2, r1, lsl #2]
   10f3c:	mov	r0, #0
   10f40:	str	r0, [fp, #-12]
   10f44:	ldr	r0, [fp, #-8]
   10f48:	ldr	r1, [sp, #16]
   10f4c:	add	r0, r1, r0, lsl #4
   10f50:	ldr	r0, [r0]
   10f54:	str	r0, [fp, #-16]
   10f58:	ldr	r0, [fp, #-16]
   10f5c:	movw	r1, #0
   10f60:	cmp	r0, r1
   10f64:	beq	11048 <__assert_fail@plt+0x438>
   10f68:	ldr	r0, [pc, #388]	; 110f4 <__assert_fail@plt+0x4e4>
   10f6c:	ldr	r0, [pc, r0]
   10f70:	ldr	r1, [pc, #384]	; 110f8 <__assert_fail@plt+0x4e8>
   10f74:	ldr	r1, [pc, r1]
   10f78:	ldr	r2, [fp, #-16]
   10f7c:	ldr	r2, [r2, #8]
   10f80:	str	r1, [sp, #12]
   10f84:	mov	r1, r2
   10f88:	ldr	r2, [sp, #12]
   10f8c:	blx	r2
   10f90:	str	r0, [fp, #-20]	; 0xffffffec
   10f94:	ldr	r0, [fp, #-20]	; 0xffffffec
   10f98:	movw	r1, #0
   10f9c:	cmp	r0, r1
   10fa0:	bne	10ffc <__assert_fail@plt+0x3ec>
   10fa4:	ldr	r0, [pc, #344]	; 11104 <__assert_fail@plt+0x4f4>
   10fa8:	ldr	r0, [pc, r0]
   10fac:	movw	r1, #1
   10fb0:	str	r0, [sp, #8]
   10fb4:	mov	r0, r1
   10fb8:	movw	r1, #16
   10fbc:	ldr	r2, [sp, #8]
   10fc0:	blx	r2
   10fc4:	ldr	r1, [pc, #304]	; 110fc <__assert_fail@plt+0x4ec>
   10fc8:	ldr	r1, [pc, r1]
   10fcc:	ldr	r2, [pc, #300]	; 11100 <__assert_fail@plt+0x4f0>
   10fd0:	ldr	r2, [pc, r2]
   10fd4:	str	r0, [fp, #-20]	; 0xffffffec
   10fd8:	ldr	r0, [fp, #-16]
   10fdc:	ldr	r0, [r0, #8]
   10fe0:	ldr	r3, [fp, #-20]	; 0xffffffec
   10fe4:	str	r0, [r3, #8]
   10fe8:	ldr	r0, [fp, #-20]	; 0xffffffec
   10fec:	str	r0, [sp, #4]
   10ff0:	mov	r0, r1
   10ff4:	ldr	r1, [sp, #4]
   10ff8:	blx	r2
   10ffc:	ldr	r0, [fp, #-20]	; 0xffffffec
   11000:	ldr	r1, [fp, #-8]
   11004:	add	r0, r0, r1
   11008:	mov	r1, #1
   1100c:	strb	r1, [r0, #12]
   11010:	ldr	r0, [fp, #-20]	; 0xffffffec
   11014:	ldr	r1, [fp, #-8]
   11018:	ldr	r2, [pc, #256]	; 11120 <__assert_fail@plt+0x510>
   1101c:	ldr	r2, [pc, r2]
   11020:	ldr	r1, [r2, r1, lsl #2]
   11024:	ldr	r2, [fp, #-12]
   11028:	add	r3, r2, #1
   1102c:	str	r3, [fp, #-12]
   11030:	add	r1, r1, r2, lsl #3
   11034:	str	r0, [r1]
   11038:	ldr	r0, [fp, #-16]
   1103c:	ldr	r0, [r0, #4]
   11040:	str	r0, [fp, #-16]
   11044:	b	10f58 <__assert_fail@plt+0x348>
   11048:	b	1104c <__assert_fail@plt+0x43c>
   1104c:	ldr	r0, [fp, #-8]
   11050:	add	r0, r0, #1
   11054:	str	r0, [fp, #-8]
   11058:	b	10e60 <__assert_fail@plt+0x250>
   1105c:	ldr	r0, [pc, #108]	; 110d0 <__assert_fail@plt+0x4c0>
   11060:	ldr	r1, [pc, r0]
   11064:	movw	r0, #0
   11068:	bl	10d10 <__assert_fail@plt+0x100>
   1106c:	ldr	r1, [pc, #84]	; 110c8 <__assert_fail@plt+0x4b8>
   11070:	ldr	r1, [pc, r1]
   11074:	ldr	r2, [pc, #80]	; 110cc <__assert_fail@plt+0x4bc>
   11078:	ldr	r2, [pc, r2]
   1107c:	str	r0, [r2]
   11080:	ldr	r0, [r1]
   11084:	movw	r1, #65535	; 0xffff
   11088:	cmp	r0, r1
   1108c:	ble	110a4 <__assert_fail@plt+0x494>
   11090:	ldr	r0, [pc, #68]	; 110dc <__assert_fail@plt+0x4cc>
   11094:	add	r0, pc, r0
   11098:	ldr	r1, [pc, #64]	; 110e0 <__assert_fail@plt+0x4d0>
   1109c:	ldr	r1, [pc, r1]
   110a0:	blx	r1
   110a4:	ldr	r0, [pc, #44]	; 110d8 <__assert_fail@plt+0x4c8>
   110a8:	ldr	r1, [pc, r0]
   110ac:	movw	r0, #1
   110b0:	bl	10d10 <__assert_fail@plt+0x100>
   110b4:	ldr	r1, [pc, #24]	; 110d4 <__assert_fail@plt+0x4c4>
   110b8:	ldr	r1, [pc, r1]
   110bc:	str	r0, [r1]
   110c0:	mov	sp, fp
   110c4:	pop	{fp, pc}
   110c8:	andeq	r9, r1, ip, lsr #1
   110cc:	andeq	r9, r1, r0, lsr #1
   110d0:	strheq	r9, [r1], -ip
   110d4:	andeq	r8, r1, r8, ror #31
   110d8:	strdeq	r8, [r1], -ip
   110dc:	andeq	r4, r0, sl, asr #21
   110e0:	andeq	r9, r1, r0, lsl r0
   110e4:	andeq	r9, r1, r4, asr r2
   110e8:	muleq	r1, r4, r2
   110ec:	andeq	r9, r1, ip, lsl #4
   110f0:	andeq	r9, r1, ip, ror #3
   110f4:	andeq	r9, r1, r8, ror r1
   110f8:	andeq	r9, r1, r4, ror r1
   110fc:	andeq	r9, r1, ip, lsl r1
   11100:	andeq	r9, r1, r0, ror #1
   11104:	muleq	r1, r0, r1
   11108:	andeq	r4, r0, r8, ror ip
   1110c:	ldrdeq	r9, [r1], -r8
   11110:	andeq	r9, r1, r8, lsl #4
   11114:	andeq	r9, r1, r0, ror #3
   11118:	muleq	r1, r4, r1
   1111c:	andeq	r9, r1, r8, lsl r2
   11120:	andeq	r9, r1, r0, lsr r1
   11124:	sub	sp, sp, #20
   11128:	str	r0, [sp, #16]
   1112c:	str	r1, [sp, #12]
   11130:	str	r2, [sp, #8]
   11134:	movw	r0, #0
   11138:	str	r0, [sp]
   1113c:	ldr	r1, [sp, #12]
   11140:	cmp	r1, r0
   11144:	beq	11214 <__assert_fail@plt+0x604>
   11148:	ldr	r0, [sp, #16]
   1114c:	ldr	r1, [sp, #12]
   11150:	ldr	r1, [r1, #8]
   11154:	movw	r2, #0
   11158:	sub	r1, r2, r1
   1115c:	cmp	r0, r1
   11160:	ble	111a0 <__assert_fail@plt+0x590>
   11164:	ldr	r0, [sp, #12]
   11168:	ldr	r1, [r0, #8]
   1116c:	ldr	r0, [r0, #12]
   11170:	ldr	r2, [sp, #16]
   11174:	add	r1, r2, r1
   11178:	sub	r1, r1, #1
   1117c:	asr	r2, r1, #1
   11180:	bic	r1, r1, #1
   11184:	add	r0, r0, r1
   11188:	ldrh	r0, [r0]
   1118c:	str	r0, [sp]
   11190:	ldr	r0, [sp, #16]
   11194:	sub	r0, r0, #1
   11198:	ldr	r1, [sp, #8]
   1119c:	str	r0, [r1]
   111a0:	ldr	r0, [sp, #16]
   111a4:	ldr	r1, [sp, #12]
   111a8:	ldr	r1, [r1, #8]
   111ac:	cmp	r0, r1
   111b0:	bge	11210 <__assert_fail@plt+0x600>
   111b4:	ldr	r0, [sp, #12]
   111b8:	ldr	r1, [r0, #8]
   111bc:	ldr	r0, [r0, #12]
   111c0:	ldr	r2, [sp, #16]
   111c4:	add	r1, r2, r1
   111c8:	add	r1, r1, #1
   111cc:	asr	r2, r1, #1
   111d0:	bic	r1, r1, #1
   111d4:	add	r0, r0, r1
   111d8:	ldrh	r0, [r0]
   111dc:	add	r0, r0, #1
   111e0:	str	r0, [sp, #4]
   111e4:	ldr	r0, [sp, #4]
   111e8:	ldr	r1, [sp]
   111ec:	cmp	r0, r1
   111f0:	blt	1120c <__assert_fail@plt+0x5fc>
   111f4:	ldr	r0, [sp, #4]
   111f8:	str	r0, [sp]
   111fc:	ldr	r0, [sp, #16]
   11200:	add	r0, r0, #1
   11204:	ldr	r1, [sp, #8]
   11208:	str	r0, [r1]
   1120c:	b	11210 <__assert_fail@plt+0x600>
   11210:	b	11214 <__assert_fail@plt+0x604>
   11214:	ldr	r0, [sp]
   11218:	add	sp, sp, #20
   1121c:	bx	lr
   11220:	push	{fp, lr}
   11224:	mov	fp, sp
   11228:	sub	sp, sp, #24
   1122c:	str	r0, [fp, #-4]
   11230:	str	r1, [fp, #-8]
   11234:	ldr	r0, [fp, #-4]
   11238:	ldr	r1, [fp, #-8]
   1123c:	ldr	r1, [r1]
   11240:	add	r2, sp, #4
   11244:	bl	11124 <__assert_fail@plt+0x514>
   11248:	str	r0, [sp, #12]
   1124c:	ldr	r0, [sp, #12]
   11250:	ldr	r1, [fp, #-4]
   11254:	add	r0, r0, r1
   11258:	str	r0, [sp, #8]
   1125c:	ldr	r0, [pc, #300]	; 11390 <__assert_fail@plt+0x780>
   11260:	ldr	r0, [pc, r0]
   11264:	ldr	r1, [sp, #12]
   11268:	ldr	r0, [r0]
   1126c:	cmp	r1, r0
   11270:	movw	r0, #0
   11274:	str	r0, [sp]
   11278:	bge	112e0 <__assert_fail@plt+0x6d0>
   1127c:	ldr	r0, [pc, #272]	; 11394 <__assert_fail@plt+0x784>
   11280:	ldr	r0, [pc, r0]
   11284:	ldr	r1, [sp, #8]
   11288:	ldr	r0, [r0]
   1128c:	cmp	r1, r0
   11290:	movw	r0, #0
   11294:	str	r0, [sp]
   11298:	bge	112e0 <__assert_fail@plt+0x6d0>
   1129c:	ldr	r0, [pc, #260]	; 113a8 <__assert_fail@plt+0x798>
   112a0:	ldr	r0, [pc, r0]
   112a4:	ldr	r0, [r0]
   112a8:	ldr	r1, [sp, #12]
   112ac:	ldr	r0, [r0, r1, lsl #2]
   112b0:	ldr	r0, [r0]
   112b4:	ldr	r1, [pc, #240]	; 113ac <__assert_fail@plt+0x79c>
   112b8:	ldr	r1, [pc, r1]
   112bc:	ldr	r1, [r1]
   112c0:	ldr	r2, [sp, #8]
   112c4:	add	r1, r1, r2, lsl #2
   112c8:	ldr	r1, [r1]
   112cc:	ldr	r1, [r1]
   112d0:	cmp	r0, r1
   112d4:	movw	r0, #0
   112d8:	moveq	r0, #1
   112dc:	str	r0, [sp]
   112e0:	ldr	r0, [sp]
   112e4:	tst	r0, #1
   112e8:	beq	11308 <__assert_fail@plt+0x6f8>
   112ec:	ldr	r0, [sp, #12]
   112f0:	add	r0, r0, #1
   112f4:	str	r0, [sp, #12]
   112f8:	ldr	r0, [sp, #8]
   112fc:	add	r0, r0, #1
   11300:	str	r0, [sp, #8]
   11304:	b	1125c <__assert_fail@plt+0x64c>
   11308:	ldr	r0, [pc, #136]	; 11398 <__assert_fail@plt+0x788>
   1130c:	ldr	r0, [pc, r0]
   11310:	ldr	r1, [sp, #12]
   11314:	ldr	r0, [r0]
   11318:	cmp	r1, r0
   1131c:	bne	11334 <__assert_fail@plt+0x724>
   11320:	ldr	r0, [pc, #116]	; 1139c <__assert_fail@plt+0x78c>
   11324:	ldr	r0, [pc, r0]
   11328:	ldr	r1, [fp, #-4]
   1132c:	add	r1, r1, #1
   11330:	str	r1, [r0]
   11334:	ldr	r0, [pc, #100]	; 113a0 <__assert_fail@plt+0x790>
   11338:	ldr	r0, [pc, r0]
   1133c:	ldr	r1, [sp, #8]
   11340:	ldr	r0, [r0]
   11344:	cmp	r1, r0
   11348:	bne	11360 <__assert_fail@plt+0x750>
   1134c:	ldr	r0, [pc, #80]	; 113a4 <__assert_fail@plt+0x794>
   11350:	ldr	r0, [pc, r0]
   11354:	ldr	r1, [fp, #-4]
   11358:	sub	r1, r1, #1
   1135c:	str	r1, [r0]
   11360:	ldr	r0, [sp, #12]
   11364:	ldr	r1, [fp, #-8]
   11368:	ldr	r2, [r1, #8]
   1136c:	ldr	r1, [r1, #12]
   11370:	ldr	r3, [fp, #-4]
   11374:	add	r2, r3, r2
   11378:	asr	r3, r2, #1
   1137c:	bic	r2, r2, #1
   11380:	add	r1, r1, r2
   11384:	strh	r0, [r1]
   11388:	mov	sp, fp
   1138c:	pop	{fp, pc}
   11390:			; <UNDEFINED> instruction: 0x00018ebc
   11394:	andeq	r8, r1, r4, lsr #28
   11398:	andeq	r8, r1, r0, lsl lr
   1139c:	andeq	r8, r1, r0, lsl #28
   113a0:	andeq	r8, r1, ip, ror #26
   113a4:	andeq	r8, r1, r4, asr #27
   113a8:	andeq	r8, r1, r8, ror lr
   113ac:	andeq	r8, r1, r8, ror #27
   113b0:	push	{fp, lr}
   113b4:	mov	fp, sp
   113b8:	sub	sp, sp, #24
   113bc:	ldr	r0, [pc, #360]	; 1152c <__assert_fail@plt+0x91c>
   113c0:	ldr	r0, [pc, r0]
   113c4:	ldr	r1, [pc, #356]	; 11530 <__assert_fail@plt+0x920>
   113c8:	ldr	r1, [pc, r1]
   113cc:	ldr	r2, [pc, #352]	; 11534 <__assert_fail@plt+0x924>
   113d0:	ldr	r2, [pc, r2]
   113d4:	ldr	r3, [pc, #348]	; 11538 <__assert_fail@plt+0x928>
   113d8:	ldr	r3, [pc, r3]
   113dc:	mvn	ip, #0
   113e0:	str	ip, [fp, #-4]
   113e4:	ldr	r3, [r3]
   113e8:	movw	ip, #0
   113ec:	sub	r3, ip, r3
   113f0:	str	r3, [r2]
   113f4:	ldr	r1, [r1]
   113f8:	str	r1, [r0]
   113fc:	ldr	r0, [pc, #312]	; 1153c <__assert_fail@plt+0x92c>
   11400:	ldr	r0, [pc, r0]
   11404:	ldr	r1, [pc, #308]	; 11540 <__assert_fail@plt+0x930>
   11408:	ldr	r1, [pc, r1]
   1140c:	ldr	r2, [pc, #304]	; 11544 <__assert_fail@plt+0x934>
   11410:	ldr	r2, [pc, r2]
   11414:	ldr	r2, [r2]
   11418:	ldr	r1, [r1]
   1141c:	ldr	r0, [r0]
   11420:	sub	r0, r1, r0
   11424:	cmp	r2, r0
   11428:	bgt	11524 <__assert_fail@plt+0x914>
   1142c:	ldr	r0, [pc, #288]	; 11554 <__assert_fail@plt+0x944>
   11430:	ldr	r0, [pc, r0]
   11434:	movw	r1, #1
   11438:	str	r0, [sp, #8]
   1143c:	mov	r0, r1
   11440:	movw	r1, #16
   11444:	ldr	r2, [sp, #8]
   11448:	blx	r2
   1144c:	ldr	r1, [pc, #252]	; 11550 <__assert_fail@plt+0x940>
   11450:	ldr	r1, [pc, r1]
   11454:	str	r0, [sp, #12]
   11458:	ldr	r0, [fp, #-4]
   1145c:	add	r0, r0, #1
   11460:	str	r0, [fp, #-4]
   11464:	ldr	r2, [sp, #12]
   11468:	str	r0, [r2, #8]
   1146c:	ldr	r0, [fp, #-4]
   11470:	add	r0, r0, #1
   11474:	movw	r2, #2
   11478:	str	r1, [sp, #4]
   1147c:	mov	r1, r2
   11480:	ldr	r2, [sp, #4]
   11484:	blx	r2
   11488:	ldr	r1, [pc, #184]	; 11548 <__assert_fail@plt+0x938>
   1148c:	ldr	r1, [pc, r1]
   11490:	ldr	r2, [pc, #180]	; 1154c <__assert_fail@plt+0x93c>
   11494:	ldr	r2, [pc, r2]
   11498:	ldr	r3, [sp, #12]
   1149c:	str	r0, [r3, #12]
   114a0:	ldr	r0, [sp, #12]
   114a4:	str	r0, [sp]
   114a8:	mov	r0, r1
   114ac:	ldr	r1, [sp]
   114b0:	blx	r2
   114b4:	ldr	r0, [fp, #-4]
   114b8:	movw	r1, #0
   114bc:	sub	r0, r1, r0
   114c0:	str	r0, [fp, #-8]
   114c4:	ldr	r0, [fp, #-8]
   114c8:	ldr	r1, [fp, #-4]
   114cc:	cmp	r0, r1
   114d0:	bgt	11520 <__assert_fail@plt+0x910>
   114d4:	ldr	r0, [pc, #124]	; 11558 <__assert_fail@plt+0x948>
   114d8:	ldr	r0, [pc, r0]
   114dc:	ldr	r1, [fp, #-8]
   114e0:	ldr	r0, [r0]
   114e4:	cmp	r1, r0
   114e8:	blt	11510 <__assert_fail@plt+0x900>
   114ec:	ldr	r0, [pc, #104]	; 1155c <__assert_fail@plt+0x94c>
   114f0:	ldr	r0, [pc, r0]
   114f4:	ldr	r1, [fp, #-8]
   114f8:	ldr	r0, [r0]
   114fc:	cmp	r1, r0
   11500:	bgt	11510 <__assert_fail@plt+0x900>
   11504:	ldr	r0, [fp, #-8]
   11508:	ldr	r1, [sp, #12]
   1150c:	bl	11220 <__assert_fail@plt+0x610>
   11510:	ldr	r0, [fp, #-8]
   11514:	add	r0, r0, #2
   11518:	str	r0, [fp, #-8]
   1151c:	b	114c4 <__assert_fail@plt+0x8b4>
   11520:	b	113fc <__assert_fail@plt+0x7ec>
   11524:	mov	sp, fp
   11528:	pop	{fp, pc}
   1152c:	andeq	r8, r1, r4, asr sp
   11530:	ldrdeq	r8, [r1], -ip
   11534:	andeq	r8, r1, r4, asr sp
   11538:	andeq	r8, r1, r4, asr #26
   1153c:	andeq	r8, r1, ip, lsl sp
   11540:	muleq	r1, ip, ip
   11544:	andeq	r8, r1, r4, lsl sp
   11548:	andeq	r8, r1, r8, asr #24
   1154c:	andeq	r8, r1, ip, asr #24
   11550:	andeq	r8, r1, r8, ror #25
   11554:	andeq	r8, r1, r8, lsl #26
   11558:	andeq	r8, r1, ip, asr #24
   1155c:	andeq	r8, r1, r4, lsr #24
   11560:	push	{fp, lr}
   11564:	mov	fp, sp
   11568:	sub	sp, sp, #24
   1156c:	ldr	r0, [pc, #220]	; 11650 <__assert_fail@plt+0xa40>
   11570:	ldr	r0, [pc, r0]
   11574:	ldr	r1, [pc, #216]	; 11654 <__assert_fail@plt+0xa44>
   11578:	ldr	r1, [pc, r1]
   1157c:	ldr	r2, [pc, #212]	; 11658 <__assert_fail@plt+0xa48>
   11580:	ldr	r2, [pc, r2]
   11584:	ldr	r2, [r2]
   11588:	ldr	r1, [r1]
   1158c:	sub	r1, r2, r1
   11590:	str	r1, [fp, #-4]
   11594:	ldr	r0, [r0, #4]
   11598:	str	r0, [sp, #4]
   1159c:	ldr	r0, [sp, #4]
   115a0:	movw	r1, #0
   115a4:	cmp	r0, r1
   115a8:	beq	11648 <__assert_fail@plt+0xa38>
   115ac:	ldr	r0, [sp, #4]
   115b0:	ldr	r1, [r0, #8]
   115b4:	ldr	r0, [r0, #12]
   115b8:	ldr	r2, [fp, #-4]
   115bc:	add	r1, r2, r1
   115c0:	asr	r2, r1, #1
   115c4:	bic	r1, r1, #1
   115c8:	add	r0, r0, r1
   115cc:	ldrh	r0, [r0]
   115d0:	str	r0, [fp, #-8]
   115d4:	ldr	r0, [fp, #-4]
   115d8:	ldr	r1, [sp, #4]
   115dc:	ldr	r1, [r1]
   115e0:	add	r3, sp, #8
   115e4:	str	r2, [sp]
   115e8:	mov	r2, r3
   115ec:	bl	11124 <__assert_fail@plt+0x514>
   115f0:	str	r0, [sp, #12]
   115f4:	ldr	r0, [fp, #-8]
   115f8:	ldr	r1, [sp, #12]
   115fc:	cmp	r0, r1
   11600:	ble	11630 <__assert_fail@plt+0xa20>
   11604:	ldr	r0, [pc, #80]	; 1165c <__assert_fail@plt+0xa4c>
   11608:	ldr	r0, [pc, r0]
   1160c:	ldr	r0, [r0]
   11610:	ldr	r1, [fp, #-8]
   11614:	sub	r1, r1, #1
   11618:	str	r1, [fp, #-8]
   1161c:	add	r0, r0, r1, lsl #2
   11620:	ldr	r0, [r0]
   11624:	movw	r1, #1
   11628:	strb	r1, [r0, #4]
   1162c:	b	115f4 <__assert_fail@plt+0x9e4>
   11630:	ldr	r0, [sp, #8]
   11634:	str	r0, [fp, #-4]
   11638:	ldr	r0, [sp, #4]
   1163c:	ldr	r0, [r0]
   11640:	str	r0, [sp, #4]
   11644:	b	1159c <__assert_fail@plt+0x98c>
   11648:	mov	sp, fp
   1164c:	pop	{fp, pc}
   11650:	andeq	r8, r1, r4, ror #22
   11654:	andeq	r8, r1, r4, lsr #23
   11658:	andeq	r8, r1, r4, lsr #22
   1165c:	andeq	r8, r1, r0, lsl fp
   11660:	push	{fp, lr}
   11664:	mov	fp, sp
   11668:	sub	sp, sp, #56	; 0x38
   1166c:	ldr	r3, [pc, #480]	; 11854 <__assert_fail@plt+0xc44>
   11670:	ldr	r3, [pc, r3]
   11674:	str	r0, [fp, #-4]
   11678:	str	r1, [fp, #-8]
   1167c:	str	r2, [fp, #-12]
   11680:	ldr	r0, [fp, #-4]
   11684:	blx	r3
   11688:	movw	r0, #0
   1168c:	str	r0, [fp, #-16]
   11690:	ldr	r0, [fp, #-16]
   11694:	ldr	r1, [fp, #-4]
   11698:	movw	r2, #8052	; 0x1f74
   1169c:	add	r1, r1, r2
   116a0:	ldr	r1, [r1]
   116a4:	cmp	r0, r1
   116a8:	bge	1184c <__assert_fail@plt+0xc3c>
   116ac:	ldr	r0, [pc, #420]	; 11858 <__assert_fail@plt+0xc48>
   116b0:	ldr	r0, [pc, r0]
   116b4:	ldr	r1, [fp, #-4]
   116b8:	movw	r2, #8048	; 0x1f70
   116bc:	ldr	r1, [r1, r2]
   116c0:	ldr	r3, [fp, #-16]
   116c4:	ldr	r1, [r1, r3, lsl #2]
   116c8:	ldr	r1, [r1, #12]
   116cc:	str	r1, [fp, #-20]	; 0xffffffec
   116d0:	ldr	r1, [fp, #-4]
   116d4:	ldr	r1, [r1, r2]
   116d8:	ldr	r3, [fp, #-16]
   116dc:	ldr	r1, [r1, r3, lsl #2]
   116e0:	ldr	r1, [r1, #16]
   116e4:	str	r1, [fp, #-24]	; 0xffffffe8
   116e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   116ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116f0:	ldr	ip, [pc, #364]	; 11864 <__assert_fail@plt+0xc54>
   116f4:	ldr	ip, [pc, ip]
   116f8:	str	r0, [sp, #28]
   116fc:	mov	r0, ip
   11700:	str	r2, [sp, #24]
   11704:	mov	r2, r3
   11708:	bl	13430 <error@@Base+0x550>
   1170c:	ldr	r0, [fp, #-8]
   11710:	ldr	r1, [fp, #-20]	; 0xffffffec
   11714:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11718:	bl	13430 <error@@Base+0x550>
   1171c:	ldr	r0, [fp, #-8]
   11720:	ldr	r1, [fp, #-4]
   11724:	ldr	r2, [sp, #24]
   11728:	ldr	r1, [r1, r2]
   1172c:	ldr	r3, [fp, #-16]
   11730:	ldr	r1, [r1, r3, lsl #2]
   11734:	ldr	r1, [r1, #8]
   11738:	str	r0, [sp, #20]
   1173c:	mov	r0, r1
   11740:	bl	10b74 <strlen@plt>
   11744:	mov	r1, r0
   11748:	ldr	r2, [sp, #20]
   1174c:	add	r0, r2, r0, lsl #3
   11750:	ldr	r3, [fp, #-20]	; 0xffffffec
   11754:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11758:	str	r1, [sp, #16]
   1175c:	mov	r1, r3
   11760:	ldr	r3, [sp, #28]
   11764:	blx	r3
   11768:	ldr	r0, [fp, #-12]
   1176c:	movw	r1, #0
   11770:	cmp	r0, r1
   11774:	beq	11838 <__assert_fail@plt+0xc28>
   11778:	ldr	r0, [pc, #220]	; 1185c <__assert_fail@plt+0xc4c>
   1177c:	ldr	r0, [pc, r0]
   11780:	ldr	r1, [fp, #-12]
   11784:	ldr	r2, [fp, #-20]	; 0xffffffec
   11788:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1178c:	cmp	r2, r3
   11790:	movw	r2, #0
   11794:	moveq	r2, #1
   11798:	tst	r2, #1
   1179c:	movw	r2, #1
   117a0:	mov	r3, r2
   117a4:	moveq	r3, #0
   117a8:	str	r0, [sp, #12]
   117ac:	mov	r0, r1
   117b0:	mov	r1, r2
   117b4:	mov	r2, r3
   117b8:	ldr	r3, [sp, #12]
   117bc:	blx	r3
   117c0:	ldr	r0, [fp, #-12]
   117c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   117c8:	cmp	r1, #11
   117cc:	str	r0, [sp, #8]
   117d0:	bge	117e0 <__assert_fail@plt+0xbd0>
   117d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   117d8:	str	r0, [sp, #4]
   117dc:	b	117ec <__assert_fail@plt+0xbdc>
   117e0:	movw	r0, #11
   117e4:	str	r0, [sp, #4]
   117e8:	b	117ec <__assert_fail@plt+0xbdc>
   117ec:	ldr	r0, [sp, #4]
   117f0:	ldr	r1, [pc, #104]	; 11860 <__assert_fail@plt+0xc50>
   117f4:	ldr	r1, [pc, r1]
   117f8:	ldr	r2, [sp, #8]
   117fc:	add	r0, r2, r0, lsl #3
   11800:	ldr	r3, [fp, #-20]	; 0xffffffec
   11804:	ldr	ip, [fp, #-24]	; 0xffffffe8
   11808:	cmp	r3, ip
   1180c:	movw	r3, #0
   11810:	moveq	r3, #1
   11814:	tst	r3, #1
   11818:	movw	r3, #1
   1181c:	mov	ip, r3
   11820:	moveq	ip, #0
   11824:	str	r1, [sp]
   11828:	mov	r1, r3
   1182c:	mov	r2, ip
   11830:	ldr	r3, [sp]
   11834:	blx	r3
   11838:	b	1183c <__assert_fail@plt+0xc2c>
   1183c:	ldr	r0, [fp, #-16]
   11840:	add	r0, r0, #1
   11844:	str	r0, [fp, #-16]
   11848:	b	11690 <__assert_fail@plt+0xa80>
   1184c:	mov	sp, fp
   11850:	pop	{fp, pc}
   11854:	andeq	r8, r1, r8, ror #20
   11858:	andeq	r8, r1, r0, lsl #21
   1185c:			; <UNDEFINED> instruction: 0x000189b4
   11860:	andeq	r8, r1, ip, lsr r9
   11864:	andeq	r8, r1, r4, lsl #20
   11868:	push	{fp, lr}
   1186c:	mov	fp, sp
   11870:	sub	sp, sp, #24
   11874:	movw	r0, #0
   11878:	str	r0, [fp, #-4]
   1187c:	ldr	r0, [pc, #296]	; 119ac <__assert_fail@plt+0xd9c>
   11880:	ldr	r0, [pc, r0]
   11884:	ldr	r1, [fp, #-4]
   11888:	ldr	r0, [r0, #12]
   1188c:	cmp	r1, r0
   11890:	bge	119a4 <__assert_fail@plt+0xd94>
   11894:	movw	r0, #1
   11898:	strb	r0, [fp, #-9]
   1189c:	movw	r0, #0
   118a0:	str	r0, [fp, #-8]
   118a4:	ldr	r0, [fp, #-8]
   118a8:	cmp	r0, #8
   118ac:	movw	r0, #0
   118b0:	str	r0, [sp, #8]
   118b4:	bge	118e0 <__assert_fail@plt+0xcd0>
   118b8:	ldr	r0, [pc, #240]	; 119b0 <__assert_fail@plt+0xda0>
   118bc:	ldr	r0, [pc, r0]
   118c0:	ldr	r1, [fp, #-4]
   118c4:	ldr	r2, [fp, #-8]
   118c8:	add	r1, r1, r2
   118cc:	ldr	r0, [r0, #12]
   118d0:	cmp	r1, r0
   118d4:	movw	r0, #0
   118d8:	movlt	r0, #1
   118dc:	str	r0, [sp, #8]
   118e0:	ldr	r0, [sp, #8]
   118e4:	tst	r0, #1
   118e8:	beq	11990 <__assert_fail@plt+0xd80>
   118ec:	ldr	r0, [pc, #192]	; 119b4 <__assert_fail@plt+0xda4>
   118f0:	ldr	r0, [pc, r0]
   118f4:	ldr	r1, [pc, #188]	; 119b8 <__assert_fail@plt+0xda8>
   118f8:	ldr	r1, [pc, r1]
   118fc:	add	r1, r1, #920	; 0x398
   11900:	ldr	r2, [pc, #180]	; 119bc <__assert_fail@plt+0xdac>
   11904:	ldr	r2, [pc, r2]
   11908:	ldr	r2, [r2]
   1190c:	ldr	r3, [fp, #-4]
   11910:	ldr	ip, [fp, #-8]
   11914:	add	r3, r3, ip
   11918:	add	r2, r2, r3, lsl #3
   1191c:	ldrb	r2, [r2, #4]
   11920:	ldrb	r3, [fp, #-9]
   11924:	and	r2, r3, r2
   11928:	strb	r2, [fp, #-9]
   1192c:	ldr	r2, [fp, #-8]
   11930:	add	r2, r2, #1
   11934:	ldr	r3, [pc, #132]	; 119c0 <__assert_fail@plt+0xdb0>
   11938:	ldr	r3, [pc, r3]
   1193c:	add	r2, r3, r2, lsl #3
   11940:	add	r2, r2, #920	; 0x398
   11944:	ldrb	r3, [fp, #-9]
   11948:	cmp	r3, #0
   1194c:	movw	r3, #0
   11950:	movne	r3, #1
   11954:	tst	r3, #1
   11958:	movw	r3, #0
   1195c:	moveq	r3, #1
   11960:	str	r0, [sp, #4]
   11964:	mov	r0, r2
   11968:	movw	r2, #1
   1196c:	str	r1, [sp]
   11970:	mov	r1, r2
   11974:	mov	r2, r3
   11978:	ldr	r3, [sp, #4]
   1197c:	blx	r3
   11980:	ldr	r0, [fp, #-8]
   11984:	add	r0, r0, #1
   11988:	str	r0, [fp, #-8]
   1198c:	b	118a4 <__assert_fail@plt+0xc94>
   11990:	b	11994 <__assert_fail@plt+0xd84>
   11994:	ldr	r0, [fp, #-4]
   11998:	add	r0, r0, #1
   1199c:	str	r0, [fp, #-4]
   119a0:	b	1187c <__assert_fail@plt+0xc6c>
   119a4:	mov	sp, fp
   119a8:	pop	{fp, pc}
   119ac:	andeq	r8, r1, ip, asr #16
   119b0:	andeq	r8, r1, r0, lsl r8
   119b4:	andeq	r8, r1, r0, asr #16
   119b8:	andeq	r8, r1, r0, lsl #16
   119bc:	andeq	r8, r1, r8, asr #16
   119c0:	andeq	r8, r1, r0, asr #15
   119c4:	push	{fp, lr}
   119c8:	mov	fp, sp
   119cc:	sub	sp, sp, #24
   119d0:	movw	r0, #0
   119d4:	str	r0, [fp, #-4]
   119d8:	ldr	r0, [pc, #276]	; 11af4 <__assert_fail@plt+0xee4>
   119dc:	ldr	r0, [pc, r0]
   119e0:	ldr	r1, [fp, #-4]
   119e4:	ldr	r0, [r0, #12]
   119e8:	cmp	r1, r0
   119ec:	bge	11a98 <__assert_fail@plt+0xe88>
   119f0:	ldr	r0, [pc, #264]	; 11b00 <__assert_fail@plt+0xef0>
   119f4:	ldr	r0, [pc, r0]
   119f8:	ldr	r1, [pc, #260]	; 11b04 <__assert_fail@plt+0xef4>
   119fc:	ldr	r1, [pc, r1]
   11a00:	ldr	r2, [r1]
   11a04:	ldr	r3, [fp, #-4]
   11a08:	ldr	r2, [r2, r3, lsl #3]
   11a0c:	ldr	r2, [r2, #8]
   11a10:	str	r0, [fp, #-8]
   11a14:	mov	r0, r2
   11a18:	str	r1, [sp, #12]
   11a1c:	bl	12294 <__assert_fail@plt+0x1684>
   11a20:	ldr	r1, [pc, #224]	; 11b08 <__assert_fail@plt+0xef8>
   11a24:	ldr	r1, [pc, r1]
   11a28:	movw	r2, #9048	; 0x2358
   11a2c:	add	r2, r1, r2
   11a30:	add	r1, r1, #992	; 0x3e0
   11a34:	cmp	r0, #0
   11a38:	movne	r2, r1
   11a3c:	ldr	r0, [sp, #12]
   11a40:	ldr	r1, [r0]
   11a44:	ldr	r3, [fp, #-4]
   11a48:	ldr	r3, [r1, r3, lsl #3]!
   11a4c:	ldr	r3, [r3, #8]
   11a50:	ldrb	r1, [r1, #4]
   11a54:	cmp	r1, #0
   11a58:	movw	r1, #0
   11a5c:	movne	r1, #1
   11a60:	tst	r1, #1
   11a64:	movw	r1, #0
   11a68:	moveq	r1, #1
   11a6c:	mov	r0, r2
   11a70:	str	r1, [sp, #8]
   11a74:	mov	r1, r3
   11a78:	movw	r2, #1
   11a7c:	ldr	r3, [sp, #8]
   11a80:	ldr	ip, [fp, #-8]
   11a84:	blx	ip
   11a88:	ldr	r0, [fp, #-4]
   11a8c:	add	r0, r0, #1
   11a90:	str	r0, [fp, #-4]
   11a94:	b	119d8 <__assert_fail@plt+0xdc8>
   11a98:	ldr	r0, [pc, #92]	; 11afc <__assert_fail@plt+0xeec>
   11a9c:	ldr	r0, [pc, r0]
   11aa0:	add	r1, r0, #992	; 0x3e0
   11aa4:	add	r0, r0, #8
   11aa8:	str	r0, [sp, #4]
   11aac:	mov	r0, r1
   11ab0:	ldr	r1, [sp, #4]
   11ab4:	movw	r2, #0
   11ab8:	bl	11660 <__assert_fail@plt+0xa50>
   11abc:	ldr	r0, [pc, #52]	; 11af8 <__assert_fail@plt+0xee8>
   11ac0:	ldr	r0, [pc, r0]
   11ac4:	movw	r1, #9048	; 0x2358
   11ac8:	add	r1, r0, r1
   11acc:	add	r2, r0, #416	; 0x1a0
   11ad0:	add	r0, r0, #824	; 0x338
   11ad4:	str	r0, [sp]
   11ad8:	mov	r0, r1
   11adc:	mov	r1, r2
   11ae0:	ldr	r2, [sp]
   11ae4:	bl	11660 <__assert_fail@plt+0xa50>
   11ae8:	bl	11868 <__assert_fail@plt+0xc58>
   11aec:	mov	sp, fp
   11af0:	pop	{fp, pc}
   11af4:	strdeq	r8, [r1], -r0
   11af8:	andeq	r8, r1, r8, lsr r6
   11afc:	andeq	r8, r1, ip, asr r6
   11b00:	andeq	r8, r1, ip, asr #14
   11b04:	andeq	r8, r1, r0, asr r7
   11b08:	ldrdeq	r8, [r1], -r4
   11b0c:	push	{fp, lr}
   11b10:	mov	fp, sp
   11b14:	sub	sp, sp, #24
   11b18:	ldr	r2, [pc, #232]	; 11c08 <__assert_fail@plt+0xff8>
   11b1c:	add	r2, pc, r2
   11b20:	ldr	r3, [pc, #228]	; 11c0c <__assert_fail@plt+0xffc>
   11b24:	ldr	r3, [pc, r3]
   11b28:	ldr	ip, [pc, #224]	; 11c10 <__assert_fail@plt+0x1000>
   11b2c:	ldr	ip, [pc, ip]
   11b30:	movw	lr, #0
   11b34:	str	lr, [fp, #-4]
   11b38:	str	r0, [fp, #-8]
   11b3c:	str	r1, [sp, #12]
   11b40:	ldr	r1, [sp, #12]
   11b44:	sub	r0, fp, #8
   11b48:	blx	ip
   11b4c:	ldr	r0, [fp, #-8]
   11b50:	cmp	r0, #2
   11b54:	blt	11b64 <__assert_fail@plt+0xf54>
   11b58:	ldr	r0, [fp, #-8]
   11b5c:	cmp	r0, #3
   11b60:	ble	11b78 <__assert_fail@plt+0xf68>
   11b64:	ldr	r0, [pc, #188]	; 11c28 <__assert_fail@plt+0x1018>
   11b68:	add	r0, pc, r0
   11b6c:	ldr	r1, [pc, #184]	; 11c2c <__assert_fail@plt+0x101c>
   11b70:	ldr	r1, [pc, r1]
   11b74:	blx	r1
   11b78:	ldr	r0, [pc, #148]	; 11c14 <__assert_fail@plt+0x1004>
   11b7c:	ldr	r0, [pc, r0]
   11b80:	ldr	r1, [pc, #144]	; 11c18 <__assert_fail@plt+0x1008>
   11b84:	ldr	r1, [pc, r1]
   11b88:	ldr	r1, [r1]
   11b8c:	str	r0, [sp, #8]
   11b90:	mov	r0, r1
   11b94:	ldr	r1, [sp, #8]
   11b98:	blx	r1
   11b9c:	ldr	r0, [sp, #12]
   11ba0:	bl	10e48 <__assert_fail@plt+0x238>
   11ba4:	bl	113b0 <__assert_fail@plt+0x7a0>
   11ba8:	bl	11560 <__assert_fail@plt+0x950>
   11bac:	bl	119c4 <__assert_fail@plt+0xdb4>
   11bb0:	ldr	r0, [fp, #-8]
   11bb4:	cmp	r0, #3
   11bb8:	bne	11bcc <__assert_fail@plt+0xfbc>
   11bbc:	ldr	r0, [sp, #12]
   11bc0:	ldr	r0, [r0, #8]
   11bc4:	str	r0, [sp, #4]
   11bc8:	b	11bd8 <__assert_fail@plt+0xfc8>
   11bcc:	movw	r0, #0
   11bd0:	str	r0, [sp, #4]
   11bd4:	b	11bd8 <__assert_fail@plt+0xfc8>
   11bd8:	ldr	r0, [sp, #4]
   11bdc:	ldr	r1, [pc, #60]	; 11c20 <__assert_fail@plt+0x1010>
   11be0:	ldr	r1, [pc, r1]
   11be4:	ldr	r2, [pc, #56]	; 11c24 <__assert_fail@plt+0x1014>
   11be8:	ldr	r2, [pc, r2]
   11bec:	str	r0, [sp]
   11bf0:	mov	r0, r1
   11bf4:	ldr	r1, [sp]
   11bf8:	blx	r2
   11bfc:	ldr	r0, [pc, #24]	; 11c1c <__assert_fail@plt+0x100c>
   11c00:	ldr	r0, [pc, r0]
   11c04:	blx	r0
   11c08:	andeq	r4, r0, sl, asr r0
   11c0c:	andeq	r8, r1, r8, asr #11
   11c10:			; <UNDEFINED> instruction: 0x000185b0
   11c14:	andeq	r8, r1, r0, asr #10
   11c18:	andeq	r8, r1, r4, lsr #10
   11c1c:	andeq	r8, r1, r0, lsl r5
   11c20:	andeq	r8, r1, r8, lsl r5
   11c24:	andeq	r8, r1, ip, lsr #9
   11c28:	andeq	r4, r0, fp, asr #32
   11c2c:	andeq	r8, r1, ip, lsr r5
   11c30:	sub	sp, sp, #4
   11c34:	str	r0, [sp]
   11c38:	ldr	r0, [sp]
   11c3c:	movw	r1, #0
   11c40:	str	r1, [r0, #4]
   11c44:	ldr	r0, [sp]
   11c48:	str	r1, [r0]
   11c4c:	ldr	r0, [sp]
   11c50:	str	r1, [r0, #8]
   11c54:	ldr	r0, [sp]
   11c58:	str	r1, [r0, #12]
   11c5c:	add	sp, sp, #4
   11c60:	bx	lr
   11c64:	push	{fp, lr}
   11c68:	mov	fp, sp
   11c6c:	sub	sp, sp, #8
   11c70:	str	r0, [sp, #4]
   11c74:	str	r1, [sp]
   11c78:	ldr	r0, [sp, #4]
   11c7c:	ldr	r2, [sp]
   11c80:	ldr	r1, [sp, #4]
   11c84:	ldr	r3, [r1]
   11c88:	movw	r1, #0
   11c8c:	bl	11c98 <__assert_fail@plt+0x1088>
   11c90:	mov	sp, fp
   11c94:	pop	{fp, pc}
   11c98:	push	{fp, lr}
   11c9c:	mov	fp, sp
   11ca0:	sub	sp, sp, #16
   11ca4:	str	r0, [fp, #-4]
   11ca8:	str	r1, [sp, #8]
   11cac:	str	r2, [sp, #4]
   11cb0:	str	r3, [sp]
   11cb4:	ldr	r0, [sp, #8]
   11cb8:	ldr	r1, [sp, #4]
   11cbc:	str	r0, [r1]
   11cc0:	ldr	r0, [sp]
   11cc4:	ldr	r1, [sp, #4]
   11cc8:	str	r0, [r1, #4]
   11ccc:	ldr	r0, [sp, #8]
   11cd0:	movw	r1, #0
   11cd4:	cmp	r0, r1
   11cd8:	beq	11cec <__assert_fail@plt+0x10dc>
   11cdc:	ldr	r0, [sp, #4]
   11ce0:	ldr	r1, [sp, #8]
   11ce4:	str	r0, [r1, #4]
   11ce8:	b	11cf8 <__assert_fail@plt+0x10e8>
   11cec:	ldr	r0, [sp, #4]
   11cf0:	ldr	r1, [fp, #-4]
   11cf4:	str	r0, [r1]
   11cf8:	ldr	r0, [sp]
   11cfc:	movw	r1, #0
   11d00:	cmp	r0, r1
   11d04:	beq	11d18 <__assert_fail@plt+0x1108>
   11d08:	ldr	r0, [sp, #4]
   11d0c:	ldr	r1, [sp]
   11d10:	str	r0, [r1]
   11d14:	b	11d24 <__assert_fail@plt+0x1114>
   11d18:	ldr	r0, [sp, #4]
   11d1c:	ldr	r1, [fp, #-4]
   11d20:	str	r0, [r1, #4]
   11d24:	ldr	r0, [fp, #-4]
   11d28:	bl	11eac <__assert_fail@plt+0x129c>
   11d2c:	ldr	r0, [fp, #-4]
   11d30:	ldr	r1, [r0, #12]
   11d34:	add	r1, r1, #1
   11d38:	str	r1, [r0, #12]
   11d3c:	mov	sp, fp
   11d40:	pop	{fp, pc}
   11d44:	push	{fp, lr}
   11d48:	mov	fp, sp
   11d4c:	sub	sp, sp, #8
   11d50:	str	r0, [sp, #4]
   11d54:	str	r1, [sp]
   11d58:	ldr	r0, [sp, #4]
   11d5c:	ldr	r1, [sp, #4]
   11d60:	ldr	r1, [r1, #4]
   11d64:	ldr	r2, [sp]
   11d68:	movw	r3, #0
   11d6c:	bl	11c98 <__assert_fail@plt+0x1088>
   11d70:	mov	sp, fp
   11d74:	pop	{fp, pc}
   11d78:	push	{fp, lr}
   11d7c:	mov	fp, sp
   11d80:	sub	sp, sp, #16
   11d84:	str	r0, [fp, #-4]
   11d88:	str	r1, [sp, #8]
   11d8c:	str	r2, [sp, #4]
   11d90:	ldr	r0, [fp, #-4]
   11d94:	ldr	r1, [sp, #4]
   11d98:	ldr	r1, [r1]
   11d9c:	ldr	r2, [sp, #8]
   11da0:	ldr	r3, [sp, #4]
   11da4:	bl	11c98 <__assert_fail@plt+0x1088>
   11da8:	mov	sp, fp
   11dac:	pop	{fp, pc}
   11db0:	push	{fp, lr}
   11db4:	mov	fp, sp
   11db8:	sub	sp, sp, #16
   11dbc:	str	r0, [fp, #-4]
   11dc0:	str	r1, [sp, #8]
   11dc4:	str	r2, [sp, #4]
   11dc8:	ldr	r0, [fp, #-4]
   11dcc:	ldr	r1, [sp, #8]
   11dd0:	ldr	r2, [sp, #4]
   11dd4:	ldr	r3, [sp, #8]
   11dd8:	ldr	r3, [r3, #4]
   11ddc:	bl	11c98 <__assert_fail@plt+0x1088>
   11de0:	mov	sp, fp
   11de4:	pop	{fp, pc}
   11de8:	push	{fp, lr}
   11dec:	mov	fp, sp
   11df0:	sub	sp, sp, #8
   11df4:	str	r0, [sp, #4]
   11df8:	str	r1, [sp]
   11dfc:	ldr	r0, [sp]
   11e00:	ldr	r0, [r0]
   11e04:	movw	r1, #0
   11e08:	cmp	r0, r1
   11e0c:	beq	11e28 <__assert_fail@plt+0x1218>
   11e10:	ldr	r0, [sp]
   11e14:	ldr	r0, [r0, #4]
   11e18:	ldr	r1, [sp]
   11e1c:	ldr	r1, [r1]
   11e20:	str	r0, [r1, #4]
   11e24:	b	11e38 <__assert_fail@plt+0x1228>
   11e28:	ldr	r0, [sp]
   11e2c:	ldr	r0, [r0, #4]
   11e30:	ldr	r1, [sp, #4]
   11e34:	str	r0, [r1]
   11e38:	ldr	r0, [sp]
   11e3c:	ldr	r0, [r0, #4]
   11e40:	movw	r1, #0
   11e44:	cmp	r0, r1
   11e48:	beq	11e64 <__assert_fail@plt+0x1254>
   11e4c:	ldr	r0, [sp]
   11e50:	ldr	r0, [r0]
   11e54:	ldr	r1, [sp]
   11e58:	ldr	r1, [r1, #4]
   11e5c:	str	r0, [r1]
   11e60:	b	11e74 <__assert_fail@plt+0x1264>
   11e64:	ldr	r0, [sp]
   11e68:	ldr	r0, [r0]
   11e6c:	ldr	r1, [sp, #4]
   11e70:	str	r0, [r1, #4]
   11e74:	ldr	r0, [sp]
   11e78:	movw	r1, #0
   11e7c:	str	r1, [r0, #4]
   11e80:	ldr	r0, [sp]
   11e84:	str	r1, [r0]
   11e88:	ldr	r0, [sp, #4]
   11e8c:	bl	11eac <__assert_fail@plt+0x129c>
   11e90:	ldr	r0, [sp, #4]
   11e94:	ldr	r1, [r0, #12]
   11e98:	mvn	r2, #0
   11e9c:	add	r1, r1, r2
   11ea0:	str	r1, [r0, #12]
   11ea4:	mov	sp, fp
   11ea8:	pop	{fp, pc}
   11eac:	push	{fp, lr}
   11eb0:	mov	fp, sp
   11eb4:	sub	sp, sp, #8
   11eb8:	str	r0, [sp, #4]
   11ebc:	ldr	r0, [sp, #4]
   11ec0:	ldr	r0, [r0, #8]
   11ec4:	movw	r1, #0
   11ec8:	cmp	r0, r1
   11ecc:	beq	11ee8 <__assert_fail@plt+0x12d8>
   11ed0:	ldr	r0, [sp, #4]
   11ed4:	ldr	r0, [r0, #8]
   11ed8:	bl	10ab4 <free@plt>
   11edc:	ldr	r0, [sp, #4]
   11ee0:	movw	r1, #0
   11ee4:	str	r1, [r0, #8]
   11ee8:	mov	sp, fp
   11eec:	pop	{fp, pc}
   11ef0:	push	{fp, lr}
   11ef4:	mov	fp, sp
   11ef8:	sub	sp, sp, #16
   11efc:	str	r0, [fp, #-4]
   11f00:	movw	r0, #0
   11f04:	str	r0, [sp, #4]
   11f08:	ldr	r1, [fp, #-4]
   11f0c:	ldr	r1, [r1, #8]
   11f10:	cmp	r1, r0
   11f14:	bne	11f28 <__assert_fail@plt+0x1318>
   11f18:	ldr	r0, [fp, #-4]
   11f1c:	ldr	r0, [r0, #12]
   11f20:	cmp	r0, #0
   11f24:	bne	11f2c <__assert_fail@plt+0x131c>
   11f28:	b	11fa4 <__assert_fail@plt+0x1394>
   11f2c:	ldr	r0, [pc, #120]	; 11fac <__assert_fail@plt+0x139c>
   11f30:	ldr	r0, [pc, r0]
   11f34:	ldr	r1, [fp, #-4]
   11f38:	ldr	r1, [r1, #12]
   11f3c:	str	r0, [sp]
   11f40:	mov	r0, r1
   11f44:	movw	r1, #4
   11f48:	ldr	r2, [sp]
   11f4c:	blx	r2
   11f50:	ldr	r1, [fp, #-4]
   11f54:	str	r0, [r1, #8]
   11f58:	ldr	r0, [fp, #-4]
   11f5c:	ldr	r0, [r0]
   11f60:	str	r0, [sp, #8]
   11f64:	ldr	r0, [sp, #8]
   11f68:	movw	r1, #0
   11f6c:	cmp	r0, r1
   11f70:	beq	11fa4 <__assert_fail@plt+0x1394>
   11f74:	ldr	r0, [sp, #8]
   11f78:	ldr	r1, [fp, #-4]
   11f7c:	ldr	r1, [r1, #8]
   11f80:	ldr	r2, [sp, #4]
   11f84:	add	r3, r2, #1
   11f88:	str	r3, [sp, #4]
   11f8c:	add	r1, r1, r2, lsl #2
   11f90:	str	r0, [r1]
   11f94:	ldr	r0, [sp, #8]
   11f98:	ldr	r0, [r0, #4]
   11f9c:	str	r0, [sp, #8]
   11fa0:	b	11f64 <__assert_fail@plt+0x1354>
   11fa4:	mov	sp, fp
   11fa8:	pop	{fp, pc}
   11fac:	andeq	r8, r1, r8, lsl #4
   11fb0:	push	{fp, lr}
   11fb4:	mov	fp, sp
   11fb8:	sub	sp, sp, #16
   11fbc:	str	r0, [fp, #-4]
   11fc0:	str	r1, [sp, #8]
   11fc4:	ldr	r0, [fp, #-4]
   11fc8:	ldr	r0, [r0]
   11fcc:	movw	r1, #0
   11fd0:	cmp	r0, r1
   11fd4:	beq	1200c <__assert_fail@plt+0x13fc>
   11fd8:	ldr	r0, [fp, #-4]
   11fdc:	ldr	r0, [r0]
   11fe0:	str	r0, [sp, #4]
   11fe4:	ldr	r0, [fp, #-4]
   11fe8:	ldr	r1, [sp, #4]
   11fec:	bl	11de8 <__assert_fail@plt+0x11d8>
   11ff0:	ldr	r0, [sp, #8]
   11ff4:	ldr	r1, [sp, #4]
   11ff8:	str	r0, [sp]
   11ffc:	mov	r0, r1
   12000:	ldr	r1, [sp]
   12004:	blx	r1
   12008:	b	11fc4 <__assert_fail@plt+0x13b4>
   1200c:	mov	sp, fp
   12010:	pop	{fp, pc}
   12014:	push	{fp, lr}
   12018:	mov	fp, sp
   1201c:	sub	sp, sp, #24
   12020:	ldr	r1, [pc, #324]	; 1216c <__assert_fail@plt+0x155c>
   12024:	add	r1, pc, r1
   12028:	str	r0, [fp, #-4]
   1202c:	ldrsb	r0, [r1]
   12030:	cmp	r0, #0
   12034:	beq	1204c <__assert_fail@plt+0x143c>
   12038:	ldr	r0, [pc, #352]	; 121a0 <__assert_fail@plt+0x1590>
   1203c:	add	r0, pc, r0
   12040:	ldr	r1, [pc, #348]	; 121a4 <__assert_fail@plt+0x1594>
   12044:	ldr	r1, [pc, r1]
   12048:	blx	r1
   1204c:	ldr	r0, [fp, #-4]
   12050:	movw	r1, #0
   12054:	cmp	r0, r1
   12058:	beq	12100 <__assert_fail@plt+0x14f0>
   1205c:	ldr	r0, [pc, #300]	; 12190 <__assert_fail@plt+0x1580>
   12060:	add	r0, pc, r0
   12064:	ldr	r1, [pc, #296]	; 12194 <__assert_fail@plt+0x1584>
   12068:	add	r2, pc, r1
   1206c:	ldr	r1, [pc, #292]	; 12198 <__assert_fail@plt+0x1588>
   12070:	ldr	r1, [pc, r1]
   12074:	ldr	r3, [fp, #-4]
   12078:	str	r1, [sp, #8]
   1207c:	mov	r1, r3
   12080:	ldr	r3, [sp, #8]
   12084:	blx	r3
   12088:	ldr	r0, [pc, #244]	; 12184 <__assert_fail@plt+0x1574>
   1208c:	add	r0, pc, r0
   12090:	ldr	r1, [pc, #240]	; 12188 <__assert_fail@plt+0x1578>
   12094:	add	r1, pc, r1
   12098:	ldr	r2, [pc, #236]	; 1218c <__assert_fail@plt+0x157c>
   1209c:	ldr	r2, [pc, r2]
   120a0:	blx	r2
   120a4:	ldr	r0, [pc, #204]	; 12178 <__assert_fail@plt+0x1568>
   120a8:	add	r0, pc, r0
   120ac:	ldr	r1, [pc, #200]	; 1217c <__assert_fail@plt+0x156c>
   120b0:	ldr	r1, [pc, r1]
   120b4:	ldr	r2, [pc, #196]	; 12180 <__assert_fail@plt+0x1570>
   120b8:	ldr	r2, [pc, r2]
   120bc:	blx	r2
   120c0:	ldr	r0, [pc, #172]	; 12174 <__assert_fail@plt+0x1564>
   120c4:	add	r0, pc, r0
   120c8:	ldr	r0, [r0]
   120cc:	str	r0, [fp, #-8]
   120d0:	ldr	r0, [fp, #-8]
   120d4:	movw	r1, #0
   120d8:	cmp	r0, r1
   120dc:	beq	120fc <__assert_fail@plt+0x14ec>
   120e0:	ldr	r0, [fp, #-8]
   120e4:	ldr	r0, [r0, #8]
   120e8:	bl	121ac <__assert_fail@plt+0x159c>
   120ec:	ldr	r0, [fp, #-8]
   120f0:	ldr	r0, [r0, #4]
   120f4:	str	r0, [fp, #-8]
   120f8:	b	120d0 <__assert_fail@plt+0x14c0>
   120fc:	b	12154 <__assert_fail@plt+0x1544>
   12100:	movw	r0, #0
   12104:	strh	r0, [fp, #-10]
   12108:	ldrsh	r0, [fp, #-10]
   1210c:	cmp	r0, #110	; 0x6e
   12110:	bcs	12150 <__assert_fail@plt+0x1540>
   12114:	ldr	r0, [pc, #84]	; 12170 <__assert_fail@plt+0x1560>
   12118:	add	r0, pc, r0
   1211c:	ldrsh	r1, [fp, #-10]
   12120:	ldr	r2, [pc, #128]	; 121a8 <__assert_fail@plt+0x1598>
   12124:	add	r2, pc, r2
   12128:	add	r1, r2, r1, lsl #2
   1212c:	ldr	r1, [r1]
   12130:	str	r0, [sp, #4]
   12134:	mov	r0, r1
   12138:	bl	121ac <__assert_fail@plt+0x159c>
   1213c:	ldrh	r0, [fp, #-10]
   12140:	movw	r1, #1
   12144:	add	r0, r0, r1
   12148:	strh	r0, [fp, #-10]
   1214c:	b	12108 <__assert_fail@plt+0x14f8>
   12150:	b	12154 <__assert_fail@plt+0x1544>
   12154:	ldr	r0, [pc, #64]	; 1219c <__assert_fail@plt+0x158c>
   12158:	add	r0, pc, r0
   1215c:	movw	r1, #1
   12160:	strb	r1, [r0]
   12164:	mov	sp, fp
   12168:	pop	{fp, pc}
   1216c:	andeq	r8, r1, r0, lsr r3
   12170:	andeq	r8, r1, r8, ror r0
   12174:	andeq	r8, r1, r4, lsr #5
   12178:			; <UNDEFINED> instruction: 0x000182b0
   1217c:	andeq	r7, r1, r8, ror #31
   12180:	muleq	r1, r8, r0
   12184:	ldrdeq	r8, [r1], -ip
   12188:	andeq	r8, r1, r4, asr #5
   1218c:	andeq	r8, r1, r0, lsr #1
   12190:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12194:	andeq	r8, r1, ip, lsl r1
   12198:	muleq	r1, ip, r0
   1219c:	strdeq	r8, [r1], -ip
   121a0:	andeq	r3, r0, pc, lsl #23
   121a4:	andeq	r8, r1, r8, rrx
   121a8:	andeq	r8, r1, ip, rrx
   121ac:	push	{fp, lr}
   121b0:	mov	fp, sp
   121b4:	sub	sp, sp, #24
   121b8:	ldr	r1, [pc, #184]	; 12278 <__assert_fail@plt+0x1668>
   121bc:	add	r1, pc, r1
   121c0:	ldr	r2, [pc, #180]	; 1227c <__assert_fail@plt+0x166c>
   121c4:	ldr	r2, [pc, r2]
   121c8:	str	r0, [fp, #-4]
   121cc:	ldr	r0, [fp, #-4]
   121d0:	str	r0, [sp, #12]
   121d4:	mov	r0, r1
   121d8:	ldr	r1, [sp, #12]
   121dc:	blx	r2
   121e0:	str	r0, [fp, #-8]
   121e4:	ldr	r0, [fp, #-8]
   121e8:	movw	r1, #0
   121ec:	cmp	r0, r1
   121f0:	beq	1221c <__assert_fail@plt+0x160c>
   121f4:	ldr	r0, [pc, #144]	; 1228c <__assert_fail@plt+0x167c>
   121f8:	add	r0, pc, r0
   121fc:	ldr	r1, [pc, #140]	; 12290 <__assert_fail@plt+0x1680>
   12200:	ldr	r1, [pc, r1]
   12204:	ldr	r2, [fp, #-4]
   12208:	str	r1, [sp, #8]
   1220c:	mov	r1, r2
   12210:	ldr	r2, [sp, #8]
   12214:	blx	r2
   12218:	b	12270 <__assert_fail@plt+0x1660>
   1221c:	ldr	r0, [pc, #100]	; 12288 <__assert_fail@plt+0x1678>
   12220:	ldr	r0, [pc, r0]
   12224:	movw	r1, #1
   12228:	str	r0, [sp, #4]
   1222c:	mov	r0, r1
   12230:	movw	r1, #12
   12234:	ldr	r2, [sp, #4]
   12238:	blx	r2
   1223c:	ldr	r1, [pc, #60]	; 12280 <__assert_fail@plt+0x1670>
   12240:	add	r1, pc, r1
   12244:	ldr	r2, [pc, #56]	; 12284 <__assert_fail@plt+0x1674>
   12248:	ldr	r2, [pc, r2]
   1224c:	str	r0, [fp, #-8]
   12250:	ldr	r0, [fp, #-4]
   12254:	ldr	r3, [fp, #-8]
   12258:	str	r0, [r3, #8]
   1225c:	ldr	r0, [fp, #-8]
   12260:	str	r0, [sp]
   12264:	mov	r0, r1
   12268:	ldr	r1, [sp]
   1226c:	blx	r2
   12270:	mov	sp, fp
   12274:	pop	{fp, pc}
   12278:			; <UNDEFINED> instruction: 0x000181bc
   1227c:	andeq	r7, r1, r4, lsr #30
   12280:	andeq	r8, r1, r8, lsr r1
   12284:	andeq	r7, r1, r8, ror #28
   12288:	andeq	r7, r1, r8, lsl pc
   1228c:	andeq	r3, r0, fp, lsl #20
   12290:	andeq	r7, r1, r8, asr #30
   12294:	push	{fp, lr}
   12298:	mov	fp, sp
   1229c:	sub	sp, sp, #8
   122a0:	ldr	r1, [pc, #112]	; 12318 <__assert_fail@plt+0x1708>
   122a4:	add	r1, pc, r1
   122a8:	str	r0, [sp, #4]
   122ac:	ldrsb	r0, [r1]
   122b0:	cmp	r0, #0
   122b4:	bne	122cc <__assert_fail@plt+0x16bc>
   122b8:	ldr	r0, [pc, #92]	; 1231c <__assert_fail@plt+0x170c>
   122bc:	add	r0, pc, r0
   122c0:	ldr	r1, [pc, #88]	; 12320 <__assert_fail@plt+0x1710>
   122c4:	ldr	r1, [pc, r1]
   122c8:	blx	r1
   122cc:	ldr	r0, [pc, #80]	; 12324 <__assert_fail@plt+0x1714>
   122d0:	add	r0, pc, r0
   122d4:	ldr	r1, [pc, #76]	; 12328 <__assert_fail@plt+0x1718>
   122d8:	ldr	r1, [pc, r1]
   122dc:	ldr	r2, [sp, #4]
   122e0:	str	r1, [sp]
   122e4:	mov	r1, r2
   122e8:	ldr	r2, [sp]
   122ec:	blx	r2
   122f0:	movw	r1, #0
   122f4:	cmp	r0, r1
   122f8:	movw	r0, #0
   122fc:	movne	r0, #1
   12300:	tst	r0, #1
   12304:	movw	r0, #1
   12308:	moveq	r0, #0
   1230c:	and	r0, r0, #255	; 0xff
   12310:	mov	sp, fp
   12314:	pop	{fp, pc}
   12318:	strheq	r8, [r1], -r0
   1231c:	andeq	r3, r0, sp, lsr #18
   12320:	andeq	r7, r1, r8, ror #27
   12324:	andeq	r8, r1, r8, lsr #1
   12328:	andeq	r7, r1, r0, lsl lr
   1232c:	push	{fp, lr}
   12330:	mov	fp, sp
   12334:	sub	sp, sp, #16
   12338:	str	r0, [fp, #-4]
   1233c:	movw	r0, #0
   12340:	strh	r0, [fp, #-6]
   12344:	ldrsh	r0, [fp, #-6]
   12348:	movw	r1, #503	; 0x1f7
   1234c:	cmp	r0, r1
   12350:	bge	1238c <__assert_fail@plt+0x177c>
   12354:	ldr	r0, [pc, #92]	; 123b8 <__assert_fail@plt+0x17a8>
   12358:	ldr	r0, [pc, r0]
   1235c:	ldr	r1, [fp, #-4]
   12360:	ldrsh	r2, [fp, #-6]
   12364:	add	r1, r1, r2, lsl #4
   12368:	str	r0, [sp, #4]
   1236c:	mov	r0, r1
   12370:	ldr	r1, [sp, #4]
   12374:	blx	r1
   12378:	ldrh	r0, [fp, #-6]
   1237c:	movw	r1, #1
   12380:	add	r0, r0, r1
   12384:	strh	r0, [fp, #-6]
   12388:	b	12344 <__assert_fail@plt+0x1734>
   1238c:	ldr	r0, [fp, #-4]
   12390:	movw	r1, #8048	; 0x1f70
   12394:	add	r0, r0, r1
   12398:	movw	r1, #0
   1239c:	str	r1, [r0]
   123a0:	ldr	r0, [fp, #-4]
   123a4:	movw	r2, #8052	; 0x1f74
   123a8:	add	r0, r0, r2
   123ac:	str	r1, [r0]
   123b0:	mov	sp, fp
   123b4:	pop	{fp, pc}
   123b8:	ldrdeq	r7, [r1], -r0
   123bc:	push	{fp, lr}
   123c0:	mov	fp, sp
   123c4:	sub	sp, sp, #24
   123c8:	str	r0, [fp, #-4]
   123cc:	str	r1, [fp, #-8]
   123d0:	ldr	r0, [fp, #-4]
   123d4:	ldr	r1, [fp, #-8]
   123d8:	str	r0, [sp, #8]
   123dc:	mov	r0, r1
   123e0:	bl	1245c <__assert_fail@plt+0x184c>
   123e4:	mov	r1, r0
   123e8:	ldr	r2, [sp, #8]
   123ec:	add	r0, r2, r0, lsl #4
   123f0:	ldr	r0, [r0]
   123f4:	str	r0, [sp, #12]
   123f8:	ldr	r0, [sp, #12]
   123fc:	movw	r1, #0
   12400:	cmp	r0, r1
   12404:	movw	r0, #0
   12408:	str	r0, [sp, #4]
   1240c:	beq	12430 <__assert_fail@plt+0x1820>
   12410:	ldr	r0, [fp, #-8]
   12414:	ldr	r1, [sp, #12]
   12418:	ldr	r1, [r1, #8]
   1241c:	bl	10a9c <strcmp@plt>
   12420:	cmp	r0, #0
   12424:	movw	r0, #0
   12428:	movne	r0, #1
   1242c:	str	r0, [sp, #4]
   12430:	ldr	r0, [sp, #4]
   12434:	tst	r0, #1
   12438:	beq	12450 <__assert_fail@plt+0x1840>
   1243c:	b	12440 <__assert_fail@plt+0x1830>
   12440:	ldr	r0, [sp, #12]
   12444:	ldr	r0, [r0, #4]
   12448:	str	r0, [sp, #12]
   1244c:	b	123f8 <__assert_fail@plt+0x17e8>
   12450:	ldr	r0, [sp, #12]
   12454:	mov	sp, fp
   12458:	pop	{fp, pc}
   1245c:	sub	sp, sp, #16
   12460:	str	r0, [sp, #12]
   12464:	ldr	r0, [sp, #12]
   12468:	str	r0, [sp, #8]
   1246c:	movw	r0, #0
   12470:	str	r0, [sp]
   12474:	str	r0, [sp, #4]
   12478:	ldr	r0, [sp, #8]
   1247c:	ldr	r1, [sp, #4]
   12480:	add	r0, r0, r1
   12484:	ldrsb	r0, [r0]
   12488:	cmp	r0, #0
   1248c:	beq	124bc <__assert_fail@plt+0x18ac>
   12490:	ldr	r0, [sp, #8]
   12494:	ldr	r1, [sp, #4]
   12498:	add	r0, r0, r1
   1249c:	ldrb	r0, [r0]
   124a0:	ldr	r1, [sp]
   124a4:	add	r0, r1, r0
   124a8:	str	r0, [sp]
   124ac:	ldr	r0, [sp, #4]
   124b0:	add	r0, r0, #1
   124b4:	str	r0, [sp, #4]
   124b8:	b	12478 <__assert_fail@plt+0x1868>
   124bc:	ldr	r0, [sp]
   124c0:	movw	r1, #20065	; 0x4e61
   124c4:	movt	r1, #33354	; 0x824a
   124c8:	smmla	r1, r0, r1, r0
   124cc:	asr	r2, r1, #8
   124d0:	add	r1, r2, r1, lsr #31
   124d4:	movw	r2, #503	; 0x1f7
   124d8:	mls	r0, r1, r2, r0
   124dc:	sxth	r0, r0
   124e0:	add	sp, sp, #16
   124e4:	bx	lr
   124e8:	push	{fp, lr}
   124ec:	mov	fp, sp
   124f0:	sub	sp, sp, #24
   124f4:	ldr	r2, [pc, #112]	; 1256c <__assert_fail@plt+0x195c>
   124f8:	ldr	r2, [pc, r2]
   124fc:	str	r0, [fp, #-4]
   12500:	str	r1, [fp, #-8]
   12504:	ldr	r0, [fp, #-4]
   12508:	ldr	r1, [fp, #-8]
   1250c:	ldr	r1, [r1, #8]
   12510:	str	r0, [sp, #12]
   12514:	mov	r0, r1
   12518:	str	r2, [sp, #8]
   1251c:	bl	1245c <__assert_fail@plt+0x184c>
   12520:	mov	r1, r0
   12524:	ldr	r2, [sp, #12]
   12528:	add	r0, r2, r0, lsl #4
   1252c:	ldr	r3, [fp, #-8]
   12530:	str	r1, [sp, #4]
   12534:	mov	r1, r3
   12538:	ldr	r3, [sp, #8]
   1253c:	blx	r3
   12540:	ldr	r0, [fp, #-4]
   12544:	bl	12570 <__assert_fail@plt+0x1960>
   12548:	ldr	r0, [fp, #-4]
   1254c:	movw	r1, #8052	; 0x1f74
   12550:	add	r2, r0, r1
   12554:	ldr	r2, [r2]
   12558:	add	r2, r2, #1
   1255c:	add	r0, r0, r1
   12560:	str	r2, [r0]
   12564:	mov	sp, fp
   12568:	pop	{fp, pc}
   1256c:	andeq	r7, r1, r4, lsr #23
   12570:	push	{fp, lr}
   12574:	mov	fp, sp
   12578:	sub	sp, sp, #8
   1257c:	str	r0, [sp, #4]
   12580:	ldr	r0, [sp, #4]
   12584:	movw	r1, #8048	; 0x1f70
   12588:	add	r0, r0, r1
   1258c:	ldr	r0, [r0]
   12590:	movw	r1, #0
   12594:	cmp	r0, r1
   12598:	beq	125c4 <__assert_fail@plt+0x19b4>
   1259c:	ldr	r0, [sp, #4]
   125a0:	movw	r1, #8048	; 0x1f70
   125a4:	add	r0, r0, r1
   125a8:	ldr	r0, [r0]
   125ac:	bl	10ab4 <free@plt>
   125b0:	ldr	r0, [sp, #4]
   125b4:	movw	r1, #8048	; 0x1f70
   125b8:	add	r0, r0, r1
   125bc:	movw	r1, #0
   125c0:	str	r1, [r0]
   125c4:	mov	sp, fp
   125c8:	pop	{fp, pc}
   125cc:	push	{fp, lr}
   125d0:	mov	fp, sp
   125d4:	sub	sp, sp, #24
   125d8:	ldr	r2, [pc, #116]	; 12654 <__assert_fail@plt+0x1a44>
   125dc:	ldr	r2, [pc, r2]
   125e0:	str	r0, [fp, #-4]
   125e4:	str	r1, [fp, #-8]
   125e8:	ldr	r0, [fp, #-4]
   125ec:	ldr	r1, [fp, #-8]
   125f0:	ldr	r1, [r1, #8]
   125f4:	str	r0, [sp, #12]
   125f8:	mov	r0, r1
   125fc:	str	r2, [sp, #8]
   12600:	bl	1245c <__assert_fail@plt+0x184c>
   12604:	mov	r1, r0
   12608:	ldr	r2, [sp, #12]
   1260c:	add	r0, r2, r0, lsl #4
   12610:	ldr	r3, [fp, #-8]
   12614:	str	r1, [sp, #4]
   12618:	mov	r1, r3
   1261c:	ldr	r3, [sp, #8]
   12620:	blx	r3
   12624:	ldr	r0, [fp, #-4]
   12628:	bl	12570 <__assert_fail@plt+0x1960>
   1262c:	ldr	r0, [fp, #-4]
   12630:	movw	r1, #8052	; 0x1f74
   12634:	add	r2, r0, r1
   12638:	ldr	r2, [r2]
   1263c:	mvn	r3, #0
   12640:	add	r2, r2, r3
   12644:	add	r0, r0, r1
   12648:	str	r2, [r0]
   1264c:	mov	sp, fp
   12650:	pop	{fp, pc}
   12654:	andeq	r7, r1, r8, ror fp
   12658:	push	{fp, lr}
   1265c:	mov	fp, sp
   12660:	sub	sp, sp, #24
   12664:	str	r0, [fp, #-4]
   12668:	movw	r0, #0
   1266c:	str	r0, [sp, #8]
   12670:	ldr	r1, [fp, #-4]
   12674:	movw	r2, #8048	; 0x1f70
   12678:	add	r1, r1, r2
   1267c:	ldr	r1, [r1]
   12680:	cmp	r1, r0
   12684:	bne	126a0 <__assert_fail@plt+0x1a90>
   12688:	ldr	r0, [fp, #-4]
   1268c:	movw	r1, #8052	; 0x1f74
   12690:	add	r0, r0, r1
   12694:	ldr	r0, [r0]
   12698:	cmp	r0, #0
   1269c:	bne	126a4 <__assert_fail@plt+0x1a94>
   126a0:	b	12764 <__assert_fail@plt+0x1b54>
   126a4:	ldr	r0, [pc, #192]	; 1276c <__assert_fail@plt+0x1b5c>
   126a8:	ldr	r0, [pc, r0]
   126ac:	ldr	r1, [fp, #-4]
   126b0:	movw	r2, #8052	; 0x1f74
   126b4:	add	r1, r1, r2
   126b8:	ldr	r1, [r1]
   126bc:	str	r0, [sp, #4]
   126c0:	mov	r0, r1
   126c4:	movw	r1, #4
   126c8:	ldr	r2, [sp, #4]
   126cc:	blx	r2
   126d0:	ldr	r1, [fp, #-4]
   126d4:	movw	r2, #8048	; 0x1f70
   126d8:	add	r1, r1, r2
   126dc:	str	r0, [r1]
   126e0:	movw	r0, #0
   126e4:	str	r0, [sp, #12]
   126e8:	ldr	r0, [sp, #12]
   126ec:	movw	r1, #503	; 0x1f7
   126f0:	cmp	r0, r1
   126f4:	bge	12764 <__assert_fail@plt+0x1b54>
   126f8:	ldr	r0, [fp, #-4]
   126fc:	ldr	r1, [sp, #12]
   12700:	add	r0, r0, r1, lsl #4
   12704:	ldr	r0, [r0]
   12708:	str	r0, [fp, #-8]
   1270c:	ldr	r0, [fp, #-8]
   12710:	movw	r1, #0
   12714:	cmp	r0, r1
   12718:	beq	12750 <__assert_fail@plt+0x1b40>
   1271c:	ldr	r0, [fp, #-8]
   12720:	ldr	r1, [fp, #-4]
   12724:	movw	r2, #8048	; 0x1f70
   12728:	ldr	r1, [r1, r2]
   1272c:	ldr	r2, [sp, #8]
   12730:	add	r3, r2, #1
   12734:	str	r3, [sp, #8]
   12738:	add	r1, r1, r2, lsl #2
   1273c:	str	r0, [r1]
   12740:	ldr	r0, [fp, #-8]
   12744:	ldr	r0, [r0, #4]
   12748:	str	r0, [fp, #-8]
   1274c:	b	1270c <__assert_fail@plt+0x1afc>
   12750:	b	12754 <__assert_fail@plt+0x1b44>
   12754:	ldr	r0, [sp, #12]
   12758:	add	r0, r0, #1
   1275c:	str	r0, [sp, #12]
   12760:	b	126e8 <__assert_fail@plt+0x1ad8>
   12764:	mov	sp, fp
   12768:	pop	{fp, pc}
   1276c:	muleq	r1, r0, sl
   12770:	push	{fp, lr}
   12774:	mov	fp, sp
   12778:	sub	sp, sp, #16
   1277c:	str	r0, [fp, #-4]
   12780:	str	r1, [sp, #8]
   12784:	movw	r0, #0
   12788:	strh	r0, [sp, #6]
   1278c:	ldrsh	r0, [sp, #6]
   12790:	movw	r1, #503	; 0x1f7
   12794:	cmp	r0, r1
   12798:	bge	127dc <__assert_fail@plt+0x1bcc>
   1279c:	ldr	r0, [pc, #92]	; 12800 <__assert_fail@plt+0x1bf0>
   127a0:	ldr	r0, [pc, r0]
   127a4:	ldr	r1, [fp, #-4]
   127a8:	ldrsh	r2, [sp, #6]
   127ac:	add	r1, r1, r2, lsl #4
   127b0:	ldr	r2, [sp, #8]
   127b4:	str	r0, [sp]
   127b8:	mov	r0, r1
   127bc:	mov	r1, r2
   127c0:	ldr	r2, [sp]
   127c4:	blx	r2
   127c8:	ldrh	r0, [sp, #6]
   127cc:	movw	r1, #1
   127d0:	add	r0, r0, r1
   127d4:	strh	r0, [sp, #6]
   127d8:	b	1278c <__assert_fail@plt+0x1b7c>
   127dc:	ldr	r0, [fp, #-4]
   127e0:	bl	12570 <__assert_fail@plt+0x1960>
   127e4:	ldr	r0, [fp, #-4]
   127e8:	movw	r1, #8052	; 0x1f74
   127ec:	add	r0, r0, r1
   127f0:	movw	r1, #0
   127f4:	str	r1, [r0]
   127f8:	mov	sp, fp
   127fc:	pop	{fp, pc}
   12800:			; <UNDEFINED> instruction: 0x000179b0
   12804:	push	{fp, lr}
   12808:	mov	fp, sp
   1280c:	sub	sp, sp, #16
   12810:	str	r0, [fp, #-4]
   12814:	str	r1, [sp, #8]
   12818:	ldr	r0, [fp, #-4]
   1281c:	ldr	r1, [sp, #8]
   12820:	bl	10a90 <calloc@plt>
   12824:	str	r0, [sp, #4]
   12828:	ldr	r0, [sp, #4]
   1282c:	movw	r1, #0
   12830:	cmp	r0, r1
   12834:	bne	12844 <__assert_fail@plt+0x1c34>
   12838:	ldr	r0, [pc, #16]	; 12850 <__assert_fail@plt+0x1c40>
   1283c:	add	r0, pc, r0
   12840:	bl	12ee0 <error@@Base>
   12844:	ldr	r0, [sp, #4]
   12848:	mov	sp, fp
   1284c:	pop	{fp, pc}
   12850:	andeq	r3, r0, fp, ror r5
   12854:	sub	sp, sp, #20
   12858:	str	r0, [sp, #12]
   1285c:	str	r1, [sp, #8]
   12860:	movw	r0, #0
   12864:	str	r0, [sp, #4]
   12868:	ldr	r0, [sp, #12]
   1286c:	ldr	r1, [sp, #4]
   12870:	add	r0, r0, r1
   12874:	ldrb	r0, [r0]
   12878:	cmp	r0, #0
   1287c:	movw	r0, #0
   12880:	str	r0, [sp]
   12884:	beq	128b8 <__assert_fail@plt+0x1ca8>
   12888:	ldr	r0, [sp, #12]
   1288c:	ldr	r1, [sp, #4]
   12890:	add	r0, r0, r1
   12894:	ldrb	r0, [r0]
   12898:	ldr	r1, [sp, #8]
   1289c:	ldr	r2, [sp, #4]
   128a0:	add	r1, r1, r2
   128a4:	ldrb	r1, [r1]
   128a8:	cmp	r0, r1
   128ac:	movw	r0, #0
   128b0:	moveq	r0, #1
   128b4:	str	r0, [sp]
   128b8:	ldr	r0, [sp]
   128bc:	tst	r0, #1
   128c0:	beq	128d8 <__assert_fail@plt+0x1cc8>
   128c4:	b	128c8 <__assert_fail@plt+0x1cb8>
   128c8:	ldr	r0, [sp, #4]
   128cc:	add	r0, r0, #1
   128d0:	str	r0, [sp, #4]
   128d4:	b	12868 <__assert_fail@plt+0x1c58>
   128d8:	ldr	r0, [sp, #12]
   128dc:	ldr	r1, [sp, #4]
   128e0:	add	r0, r0, r1
   128e4:	ldrb	r0, [r0]
   128e8:	cmp	r0, #0
   128ec:	bne	12908 <__assert_fail@plt+0x1cf8>
   128f0:	ldr	r0, [sp, #8]
   128f4:	ldr	r1, [sp, #4]
   128f8:	add	r0, r0, r1
   128fc:	ldrb	r0, [r0]
   12900:	cmp	r0, #0
   12904:	beq	12948 <__assert_fail@plt+0x1d38>
   12908:	ldr	r0, [sp, #12]
   1290c:	ldr	r1, [sp, #4]
   12910:	add	r0, r0, r1
   12914:	ldrb	r0, [r0]
   12918:	ldr	r1, [sp, #8]
   1291c:	ldr	r2, [sp, #4]
   12920:	add	r1, r1, r2
   12924:	ldrb	r1, [r1]
   12928:	cmp	r0, r1
   1292c:	movw	r0, #0
   12930:	movlt	r0, #1
   12934:	tst	r0, #1
   12938:	mvn	r0, #0
   1293c:	moveq	r0, #1
   12940:	str	r0, [sp, #16]
   12944:	b	12950 <__assert_fail@plt+0x1d40>
   12948:	movw	r0, #0
   1294c:	str	r0, [sp, #16]
   12950:	ldr	r0, [sp, #16]
   12954:	add	sp, sp, #20
   12958:	bx	lr
   1295c:	push	{fp, lr}
   12960:	mov	fp, sp
   12964:	sub	sp, sp, #24
   12968:	str	r0, [fp, #-8]
   1296c:	str	r1, [sp, #12]
   12970:	ldr	r0, [fp, #-8]
   12974:	movw	r1, #0
   12978:	cmp	r0, r1
   1297c:	bne	129c0 <__assert_fail@plt+0x1db0>
   12980:	ldr	r0, [sp, #12]
   12984:	ldrb	r0, [r0]
   12988:	cmp	r0, #114	; 0x72
   1298c:	bne	129a4 <__assert_fail@plt+0x1d94>
   12990:	ldr	r0, [pc, #148]	; 12a2c <__assert_fail@plt+0x1e1c>
   12994:	ldr	r0, [pc, r0]
   12998:	ldr	r0, [r0]
   1299c:	str	r0, [sp, #4]
   129a0:	b	129b4 <__assert_fail@plt+0x1da4>
   129a4:	ldr	r0, [pc, #124]	; 12a28 <__assert_fail@plt+0x1e18>
   129a8:	ldr	r0, [pc, r0]
   129ac:	ldr	r0, [r0]
   129b0:	str	r0, [sp, #4]
   129b4:	ldr	r0, [sp, #4]
   129b8:	str	r0, [fp, #-4]
   129bc:	b	12a1c <__assert_fail@plt+0x1e0c>
   129c0:	ldr	r0, [fp, #-8]
   129c4:	ldr	r1, [sp, #12]
   129c8:	bl	10aa8 <fopen@plt>
   129cc:	str	r0, [sp, #8]
   129d0:	ldr	r0, [sp, #8]
   129d4:	movw	r1, #0
   129d8:	cmp	r0, r1
   129dc:	beq	129ec <__assert_fail@plt+0x1ddc>
   129e0:	ldr	r0, [sp, #8]
   129e4:	str	r0, [fp, #-4]
   129e8:	b	12a1c <__assert_fail@plt+0x1e0c>
   129ec:	ldr	r0, [sp, #12]
   129f0:	ldrb	r0, [r0]
   129f4:	cmp	r0, #119	; 0x77
   129f8:	bne	12a0c <__assert_fail@plt+0x1dfc>
   129fc:	ldr	r0, [pc, #48]	; 12a34 <__assert_fail@plt+0x1e24>
   12a00:	add	r0, pc, r0
   12a04:	ldr	r1, [fp, #-8]
   12a08:	bl	12f40 <error@@Base+0x60>
   12a0c:	ldr	r0, [pc, #28]	; 12a30 <__assert_fail@plt+0x1e20>
   12a10:	add	r0, pc, r0
   12a14:	ldr	r1, [fp, #-8]
   12a18:	bl	12f40 <error@@Base+0x60>
   12a1c:	ldr	r0, [fp, #-4]
   12a20:	mov	sp, fp
   12a24:	pop	{fp, pc}
   12a28:	andeq	r7, r1, r8, ror r7
   12a2c:	andeq	r7, r1, r4, ror r7
   12a30:	ldrdeq	r3, [r0], -r7
   12a34:	ldrdeq	r3, [r0], -r1
   12a38:	push	{fp, lr}
   12a3c:	mov	fp, sp
   12a40:	sub	sp, sp, #8
   12a44:	ldr	r1, [pc, #60]	; 12a88 <__assert_fail@plt+0x1e78>
   12a48:	ldr	r1, [pc, r1]
   12a4c:	str	r0, [sp, #4]
   12a50:	ldr	r0, [sp, #4]
   12a54:	ldr	r1, [r1]
   12a58:	cmp	r0, r1
   12a5c:	beq	12a80 <__assert_fail@plt+0x1e70>
   12a60:	ldr	r0, [pc, #36]	; 12a8c <__assert_fail@plt+0x1e7c>
   12a64:	ldr	r0, [pc, r0]
   12a68:	ldr	r1, [sp, #4]
   12a6c:	ldr	r0, [r0]
   12a70:	cmp	r1, r0
   12a74:	beq	12a80 <__assert_fail@plt+0x1e70>
   12a78:	ldr	r0, [sp, #4]
   12a7c:	bl	10b98 <fclose@plt>
   12a80:	mov	sp, fp
   12a84:	pop	{fp, pc}
   12a88:	andeq	r7, r1, r0, asr #13
   12a8c:			; <UNDEFINED> instruction: 0x000176bc
   12a90:	push	{fp, lr}
   12a94:	mov	fp, sp
   12a98:	sub	sp, sp, #96	; 0x60
   12a9c:	str	r0, [fp, #-4]
   12aa0:	ldr	r0, [fp, #-4]
   12aa4:	mov	r1, sp
   12aa8:	bl	15b30 <error@@Base+0x2c50>
   12aac:	cmp	r0, #0
   12ab0:	movw	r0, #0
   12ab4:	moveq	r0, #1
   12ab8:	tst	r0, #1
   12abc:	movw	r0, #1
   12ac0:	moveq	r0, #0
   12ac4:	and	r0, r0, #255	; 0xff
   12ac8:	mov	sp, fp
   12acc:	pop	{fp, pc}
   12ad0:	push	{fp, lr}
   12ad4:	mov	fp, sp
   12ad8:	sub	sp, sp, #8
   12adc:	ldr	r0, [pc, #68]	; 12b28 <__assert_fail@plt+0x1f18>
   12ae0:	add	r0, pc, r0
   12ae4:	ldrh	r1, [r0]
   12ae8:	movw	r2, #1
   12aec:	add	r1, r1, r2
   12af0:	strh	r1, [r0]
   12af4:	sxth	r0, r1
   12af8:	bl	12b2c <__assert_fail@plt+0x1f1c>
   12afc:	ldr	r1, [pc, #32]	; 12b24 <__assert_fail@plt+0x1f14>
   12b00:	ldr	r1, [pc, r1]
   12b04:	str	r0, [sp, #4]
   12b08:	ldr	r0, [sp, #4]
   12b0c:	blx	r1
   12b10:	ldr	r1, [sp, #4]
   12b14:	str	r0, [sp]
   12b18:	mov	r0, r1
   12b1c:	mov	sp, fp
   12b20:	pop	{fp, pc}
   12b24:	andeq	r7, r1, r0, asr #11
   12b28:	andeq	r9, r1, r0, lsl r8
   12b2c:	push	{fp, lr}
   12b30:	mov	fp, sp
   12b34:	sub	sp, sp, #128	; 0x80
   12b38:	ldr	r1, [pc, #112]	; 12bb0 <__assert_fail@plt+0x1fa0>
   12b3c:	ldr	r1, [pc, r1]
   12b40:	ldr	r2, [pc, #108]	; 12bb4 <__assert_fail@plt+0x1fa4>
   12b44:	ldr	r2, [pc, r2]
   12b48:	add	r3, sp, #26
   12b4c:	strh	r0, [fp, #-2]
   12b50:	ldr	r2, [r2]
   12b54:	str	r3, [sp, #20]
   12b58:	str	r2, [sp, #16]
   12b5c:	blx	r1
   12b60:	ldr	r1, [pc, #68]	; 12bac <__assert_fail@plt+0x1f9c>
   12b64:	add	r1, pc, r1
   12b68:	ldrsh	r2, [fp, #-2]
   12b6c:	ldr	r3, [sp, #20]
   12b70:	str	r0, [sp, #12]
   12b74:	mov	r0, r3
   12b78:	ldr	ip, [sp, #16]
   12b7c:	str	r2, [sp, #8]
   12b80:	mov	r2, ip
   12b84:	ldr	r3, [sp, #12]
   12b88:	ldr	lr, [sp, #8]
   12b8c:	str	lr, [sp]
   12b90:	bl	10bbc <sprintf@plt>
   12b94:	add	r1, sp, #26
   12b98:	str	r0, [sp, #4]
   12b9c:	mov	r0, r1
   12ba0:	bl	10ae4 <strdup@plt>
   12ba4:	mov	sp, fp
   12ba8:	pop	{fp, pc}
   12bac:	andeq	r3, r0, ip, lsr #5
   12bb0:	andeq	r7, r1, r0, asr #11
   12bb4:			; <UNDEFINED> instruction: 0x000175b0
   12bb8:	push	{fp, lr}
   12bbc:	mov	fp, sp
   12bc0:	sub	sp, sp, #16
   12bc4:	str	r0, [fp, #-4]
   12bc8:	movw	r0, #47	; 0x2f
   12bcc:	strb	r0, [fp, #-5]
   12bd0:	ldr	r0, [fp, #-4]
   12bd4:	bl	10b74 <strlen@plt>
   12bd8:	sub	r0, r0, #1
   12bdc:	strh	r0, [sp, #8]
   12be0:	ldrsh	r0, [sp, #8]
   12be4:	cmp	r0, #0
   12be8:	movw	r0, #0
   12bec:	str	r0, [sp, #4]
   12bf0:	blt	12c18 <__assert_fail@plt+0x2008>
   12bf4:	ldr	r0, [fp, #-4]
   12bf8:	ldrsh	r1, [sp, #8]
   12bfc:	add	r0, r0, r1
   12c00:	ldrb	r0, [r0]
   12c04:	ldrb	r1, [fp, #-5]
   12c08:	cmp	r0, r1
   12c0c:	movw	r0, #0
   12c10:	movne	r0, #1
   12c14:	str	r0, [sp, #4]
   12c18:	ldr	r0, [sp, #4]
   12c1c:	tst	r0, #1
   12c20:	beq	12c3c <__assert_fail@plt+0x202c>
   12c24:	b	12c28 <__assert_fail@plt+0x2018>
   12c28:	ldrh	r0, [sp, #8]
   12c2c:	movw	r1, #65535	; 0xffff
   12c30:	add	r0, r0, r1
   12c34:	strh	r0, [sp, #8]
   12c38:	b	12be0 <__assert_fail@plt+0x1fd0>
   12c3c:	ldr	r0, [fp, #-4]
   12c40:	ldrsh	r1, [sp, #8]
   12c44:	add	r1, r1, #1
   12c48:	add	r0, r0, r1
   12c4c:	mov	sp, fp
   12c50:	pop	{fp, pc}
   12c54:	push	{fp, lr}
   12c58:	mov	fp, sp
   12c5c:	sub	sp, sp, #16
   12c60:	str	r0, [fp, #-4]
   12c64:	str	r1, [sp, #8]
   12c68:	str	r2, [sp, #4]
   12c6c:	str	r3, [sp]
   12c70:	ldr	r0, [sp, #8]
   12c74:	ldr	r0, [r0]
   12c78:	bl	12bb8 <__assert_fail@plt+0x1fa8>
   12c7c:	ldr	r1, [pc, #36]	; 12ca8 <__assert_fail@plt+0x2098>
   12c80:	ldr	r1, [pc, r1]
   12c84:	str	r0, [r1]
   12c88:	bl	1301c <error@@Base+0x13c>
   12c8c:	ldr	r0, [fp, #-4]
   12c90:	ldr	r1, [sp, #8]
   12c94:	ldr	r2, [sp, #4]
   12c98:	ldr	r3, [sp]
   12c9c:	bl	12cac <__assert_fail@plt+0x209c>
   12ca0:	mov	sp, fp
   12ca4:	pop	{fp, pc}
   12ca8:	andeq	r7, r1, r4, ror r4
   12cac:	push	{fp, lr}
   12cb0:	mov	fp, sp
   12cb4:	sub	sp, sp, #48	; 0x30
   12cb8:	str	r0, [fp, #-4]
   12cbc:	str	r1, [fp, #-8]
   12cc0:	str	r2, [fp, #-12]
   12cc4:	str	r3, [fp, #-16]
   12cc8:	movw	r0, #0
   12ccc:	strh	r0, [fp, #-20]	; 0xffffffec
   12cd0:	ldr	r0, [fp, #-4]
   12cd4:	ldr	r0, [r0]
   12cd8:	cmp	r0, #1
   12cdc:	bne	12cfc <__assert_fail@plt+0x20ec>
   12ce0:	ldr	r0, [pc, #404]	; 12e7c <__assert_fail@plt+0x226c>
   12ce4:	ldr	r0, [pc, r0]
   12ce8:	ldrb	r0, [r0]
   12cec:	cmp	r0, #0
   12cf0:	beq	12cfc <__assert_fail@plt+0x20ec>
   12cf4:	ldr	r0, [fp, #-12]
   12cf8:	bl	130b4 <error@@Base+0x1d4>
   12cfc:	movw	r0, #1
   12d00:	strh	r0, [fp, #-18]	; 0xffffffee
   12d04:	ldrsh	r0, [fp, #-18]	; 0xffffffee
   12d08:	ldr	r1, [fp, #-4]
   12d0c:	ldr	r1, [r1]
   12d10:	cmp	r0, r1
   12d14:	bge	12e68 <__assert_fail@plt+0x2258>
   12d18:	ldr	r0, [fp, #-8]
   12d1c:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12d20:	add	r0, r0, r1, lsl #2
   12d24:	ldr	r0, [r0]
   12d28:	ldrb	r0, [r0]
   12d2c:	cmp	r0, #45	; 0x2d
   12d30:	bne	12e30 <__assert_fail@plt+0x2220>
   12d34:	ldr	r0, [fp, #-8]
   12d38:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12d3c:	add	r0, r0, r1, lsl #2
   12d40:	ldr	r0, [r0]
   12d44:	ldrb	r0, [r0, #1]
   12d48:	cmp	r0, #0
   12d4c:	beq	12e30 <__assert_fail@plt+0x2220>
   12d50:	ldr	r0, [pc, #296]	; 12e80 <__assert_fail@plt+0x2270>
   12d54:	add	r0, pc, r0
   12d58:	ldr	r1, [fp, #-8]
   12d5c:	ldrsh	r2, [fp, #-18]	; 0xffffffee
   12d60:	ldr	r2, [r1, r2, lsl #2]!
   12d64:	ldr	r1, [r1]
   12d68:	str	r0, [sp, #24]
   12d6c:	mov	r0, r1
   12d70:	str	r2, [sp, #20]
   12d74:	bl	10b74 <strlen@plt>
   12d78:	ldr	r1, [sp, #24]
   12d7c:	str	r0, [sp, #16]
   12d80:	mov	r0, r1
   12d84:	ldr	r1, [sp, #20]
   12d88:	ldr	r2, [sp, #16]
   12d8c:	bl	10bec <strncmp@plt>
   12d90:	cmp	r0, #0
   12d94:	bne	12da0 <__assert_fail@plt+0x2190>
   12d98:	ldr	r0, [fp, #-12]
   12d9c:	bl	130b4 <error@@Base+0x1d4>
   12da0:	ldr	r0, [fp, #-8]
   12da4:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12da8:	add	r0, r0, r1, lsl #2
   12dac:	ldr	r0, [r0]
   12db0:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12db4:	add	r1, r1, #1
   12db8:	ldr	r2, [fp, #-4]
   12dbc:	ldr	r2, [r2]
   12dc0:	cmp	r1, r2
   12dc4:	str	r0, [sp, #12]
   12dc8:	bge	12de8 <__assert_fail@plt+0x21d8>
   12dcc:	ldr	r0, [fp, #-8]
   12dd0:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12dd4:	add	r1, r1, #1
   12dd8:	add	r0, r0, r1, lsl #2
   12ddc:	ldr	r0, [r0]
   12de0:	str	r0, [sp, #8]
   12de4:	b	12df4 <__assert_fail@plt+0x21e4>
   12de8:	movw	r0, #0
   12dec:	str	r0, [sp, #8]
   12df0:	b	12df4 <__assert_fail@plt+0x21e4>
   12df4:	ldr	r0, [sp, #8]
   12df8:	ldr	r2, [fp, #-16]
   12dfc:	ldr	r1, [sp, #12]
   12e00:	str	r0, [sp, #4]
   12e04:	mov	r0, r1
   12e08:	ldr	r1, [sp, #4]
   12e0c:	bl	1313c <error@@Base+0x25c>
   12e10:	sxtb	r0, r0
   12e14:	cmp	r0, #0
   12e18:	beq	12e2c <__assert_fail@plt+0x221c>
   12e1c:	ldrh	r0, [fp, #-18]	; 0xffffffee
   12e20:	movw	r1, #1
   12e24:	add	r0, r0, r1
   12e28:	strh	r0, [fp, #-18]	; 0xffffffee
   12e2c:	b	12e50 <__assert_fail@plt+0x2240>
   12e30:	ldr	r0, [fp, #-8]
   12e34:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12e38:	ldr	r1, [r0, r1, lsl #2]
   12e3c:	ldrsh	r2, [fp, #-20]	; 0xffffffec
   12e40:	add	r3, r2, #1
   12e44:	strh	r3, [fp, #-20]	; 0xffffffec
   12e48:	add	r0, r0, r2, lsl #2
   12e4c:	str	r1, [r0]
   12e50:	b	12e54 <__assert_fail@plt+0x2244>
   12e54:	ldrh	r0, [fp, #-18]	; 0xffffffee
   12e58:	movw	r1, #1
   12e5c:	add	r0, r0, r1
   12e60:	strh	r0, [fp, #-18]	; 0xffffffee
   12e64:	b	12d04 <__assert_fail@plt+0x20f4>
   12e68:	ldrsh	r0, [fp, #-20]	; 0xffffffec
   12e6c:	ldr	r1, [fp, #-4]
   12e70:	str	r0, [r1]
   12e74:	mov	sp, fp
   12e78:	pop	{fp, pc}
   12e7c:	andeq	r7, r1, ip, lsr #7
   12e80:	ldrdeq	r3, [r0], -r9
   12e84:	push	{fp, lr}
   12e88:	mov	fp, sp
   12e8c:	movw	r0, #0
   12e90:	bl	12e94 <__assert_fail@plt+0x2284>
   12e94:	push	{fp, lr}
   12e98:	mov	fp, sp
   12e9c:	sub	sp, sp, #8
   12ea0:	ldr	r1, [pc, #48]	; 12ed8 <__assert_fail@plt+0x22c8>
   12ea4:	ldr	r1, [pc, r1]
   12ea8:	str	r0, [sp, #4]
   12eac:	ldr	r0, [r1]
   12eb0:	movw	r1, #0
   12eb4:	cmp	r0, r1
   12eb8:	beq	12ecc <__assert_fail@plt+0x22bc>
   12ebc:	ldr	r0, [pc, #24]	; 12edc <__assert_fail@plt+0x22cc>
   12ec0:	ldr	r0, [pc, r0]
   12ec4:	ldr	r0, [r0]
   12ec8:	blx	r0
   12ecc:	bl	133b0 <error@@Base+0x4d0>
   12ed0:	ldr	r0, [sp, #4]
   12ed4:	bl	10b5c <exit@plt>
   12ed8:	andeq	r7, r1, ip, asr r2
   12edc:	andeq	r7, r1, r0, asr #4

00012ee0 <error@@Base>:
   12ee0:	push	{fp, lr}
   12ee4:	mov	fp, sp
   12ee8:	sub	sp, sp, #8
   12eec:	ldr	r1, [pc, #64]	; 12f34 <error@@Base+0x54>
   12ef0:	add	r1, pc, r1
   12ef4:	ldr	r2, [pc, #60]	; 12f38 <error@@Base+0x58>
   12ef8:	ldr	r2, [pc, r2]
   12efc:	ldr	r3, [pc, #56]	; 12f3c <error@@Base+0x5c>
   12f00:	ldr	r3, [pc, r3]
   12f04:	str	r0, [sp, #4]
   12f08:	ldr	r0, [r3]
   12f0c:	ldr	r2, [r2]
   12f10:	ldr	r3, [sp, #4]
   12f14:	bl	10b80 <fprintf@plt>
   12f18:	ldr	r1, [pc, #16]	; 12f30 <error@@Base+0x50>
   12f1c:	ldr	r1, [pc, r1]
   12f20:	ldr	r1, [r1]
   12f24:	str	r0, [sp]
   12f28:	mov	r0, r1
   12f2c:	bl	12e94 <__assert_fail@plt+0x2284>
   12f30:	andeq	r7, r1, r8, lsl r2
   12f34:	andeq	r2, r0, fp, lsl #30
   12f38:	strdeq	r7, [r1], -ip
   12f3c:	ldrdeq	r7, [r1], -r0
   12f40:	push	{fp, lr}
   12f44:	mov	fp, sp
   12f48:	sub	sp, sp, #24
   12f4c:	ldr	r2, [pc, #88]	; 12fac <error@@Base+0xcc>
   12f50:	add	r2, pc, r2
   12f54:	ldr	r3, [pc, #84]	; 12fb0 <error@@Base+0xd0>
   12f58:	ldr	r3, [pc, r3]
   12f5c:	ldr	ip, [pc, #80]	; 12fb4 <error@@Base+0xd4>
   12f60:	ldr	ip, [pc, ip]
   12f64:	str	r0, [fp, #-4]
   12f68:	str	r1, [fp, #-8]
   12f6c:	ldr	r0, [ip]
   12f70:	ldr	r1, [r3]
   12f74:	ldr	r3, [fp, #-4]
   12f78:	ldr	ip, [fp, #-8]
   12f7c:	str	r1, [sp, #12]
   12f80:	mov	r1, r2
   12f84:	ldr	r2, [sp, #12]
   12f88:	str	ip, [sp]
   12f8c:	bl	10b80 <fprintf@plt>
   12f90:	ldr	r1, [pc, #16]	; 12fa8 <error@@Base+0xc8>
   12f94:	ldr	r1, [pc, r1]
   12f98:	ldr	r1, [r1]
   12f9c:	str	r0, [sp, #8]
   12fa0:	mov	r0, r1
   12fa4:	bl	12e94 <__assert_fail@plt+0x2284>
   12fa8:	andeq	r7, r1, r0, lsr #3
   12fac:			; <UNDEFINED> instruction: 0x00002eb3
   12fb0:	muleq	r1, ip, r1
   12fb4:	andeq	r7, r1, r0, ror r1
   12fb8:	push	{fp, lr}
   12fbc:	mov	fp, sp
   12fc0:	sub	sp, sp, #16
   12fc4:	ldr	r2, [pc, #68]	; 13010 <error@@Base+0x130>
   12fc8:	add	r2, pc, r2
   12fcc:	ldr	r3, [pc, #64]	; 13014 <error@@Base+0x134>
   12fd0:	ldr	r3, [pc, r3]
   12fd4:	ldr	ip, [pc, #60]	; 13018 <error@@Base+0x138>
   12fd8:	ldr	ip, [pc, ip]
   12fdc:	str	r0, [fp, #-4]
   12fe0:	str	r1, [sp, #8]
   12fe4:	ldr	r0, [ip]
   12fe8:	ldr	r1, [r3]
   12fec:	ldr	r3, [fp, #-4]
   12ff0:	ldr	ip, [sp, #8]
   12ff4:	str	r1, [sp, #4]
   12ff8:	mov	r1, r2
   12ffc:	ldr	r2, [sp, #4]
   13000:	str	ip, [sp]
   13004:	bl	10b80 <fprintf@plt>
   13008:	mov	sp, fp
   1300c:	pop	{fp, pc}
   13010:	andeq	r2, r0, fp, lsr lr
   13014:	andeq	r7, r1, r4, lsr #2
   13018:	strdeq	r7, [r1], -r8
   1301c:	push	{fp, lr}
   13020:	mov	fp, sp
   13024:	sub	sp, sp, #8
   13028:	ldr	r0, [pc, #44]	; 1305c <error@@Base+0x17c>
   1302c:	add	r1, pc, r0
   13030:	movw	r0, #2
   13034:	bl	10b44 <__sysv_signal@plt>
   13038:	ldr	r1, [pc, #24]	; 13058 <error@@Base+0x178>
   1303c:	add	r1, pc, r1
   13040:	movw	r2, #15
   13044:	str	r0, [sp, #4]
   13048:	mov	r0, r2
   1304c:	bl	10b44 <__sysv_signal@plt>
   13050:	mov	sp, fp
   13054:	pop	{fp, pc}
   13058:	andeq	r0, r0, ip, lsl r0
   1305c:	andeq	r0, r0, ip, lsr #32
   13060:	push	{fp, lr}
   13064:	mov	fp, sp
   13068:	sub	sp, sp, #8
   1306c:	ldr	r1, [pc, #52]	; 130a8 <error@@Base+0x1c8>
   13070:	add	r1, pc, r1
   13074:	str	r0, [sp, #4]
   13078:	ldrsb	r0, [r1]
   1307c:	cmp	r0, #0
   13080:	beq	1308c <error@@Base+0x1ac>
   13084:	mov	sp, fp
   13088:	pop	{fp, pc}
   1308c:	ldr	r0, [pc, #24]	; 130ac <error@@Base+0x1cc>
   13090:	add	r0, pc, r0
   13094:	ldr	r1, [pc, #20]	; 130b0 <error@@Base+0x1d0>
   13098:	add	r1, pc, r1
   1309c:	movw	r2, #1
   130a0:	strb	r2, [r1]
   130a4:	bl	12ee0 <error@@Base>
   130a8:	andeq	r9, r1, r2, lsl #5
   130ac:	andeq	r2, r0, lr, lsl #27
   130b0:	andeq	r9, r1, sl, asr r2
   130b4:	push	{fp, lr}
   130b8:	mov	fp, sp
   130bc:	sub	sp, sp, #8
   130c0:	ldr	r1, [pc, #96]	; 13128 <error@@Base+0x248>
   130c4:	ldr	r1, [pc, r1]
   130c8:	str	r0, [sp, #4]
   130cc:	ldr	r0, [r1]
   130d0:	movw	r1, #0
   130d4:	cmp	r0, r1
   130d8:	beq	130f0 <error@@Base+0x210>
   130dc:	ldr	r0, [pc, #84]	; 13138 <error@@Base+0x258>
   130e0:	ldr	r0, [pc, r0]
   130e4:	ldr	r0, [r0]
   130e8:	blx	r0
   130ec:	b	13124 <error@@Base+0x244>
   130f0:	ldr	r0, [pc, #52]	; 1312c <error@@Base+0x24c>
   130f4:	add	r1, pc, r0
   130f8:	ldr	r0, [pc, #48]	; 13130 <error@@Base+0x250>
   130fc:	ldr	r0, [pc, r0]
   13100:	ldr	r2, [pc, #44]	; 13134 <error@@Base+0x254>
   13104:	ldr	r2, [pc, r2]
   13108:	ldr	r2, [r2]
   1310c:	ldr	r0, [r0]
   13110:	ldr	r3, [sp, #4]
   13114:	str	r0, [sp]
   13118:	mov	r0, r2
   1311c:	ldr	r2, [sp]
   13120:	bl	10b80 <fprintf@plt>
   13124:	bl	12e84 <__assert_fail@plt+0x2274>
   13128:	strdeq	r6, [r1], -r0
   1312c:	andeq	r2, r0, pc, lsr sp
   13130:	strdeq	r6, [r1], -r8
   13134:	andeq	r6, r1, ip, asr #31
   13138:	ldrdeq	r6, [r1], -r4
   1313c:	push	{fp, lr}
   13140:	mov	fp, sp
   13144:	sub	sp, sp, #32
   13148:	str	r0, [fp, #-8]
   1314c:	str	r1, [fp, #-12]
   13150:	str	r2, [sp, #16]
   13154:	ldr	r0, [sp, #16]
   13158:	movw	r1, #0
   1315c:	cmp	r0, r1
   13160:	bne	13168 <error@@Base+0x288>
   13164:	b	1337c <error@@Base+0x49c>
   13168:	movw	r0, #0
   1316c:	strh	r0, [sp, #14]
   13170:	ldr	r0, [sp, #16]
   13174:	ldrsh	r1, [sp, #14]
   13178:	movw	r2, #12
   1317c:	mul	r1, r1, r2
   13180:	add	r0, r0, r1
   13184:	ldrb	r0, [r0]
   13188:	cmp	r0, #0
   1318c:	movw	r0, #0
   13190:	str	r0, [sp, #8]
   13194:	beq	131c8 <error@@Base+0x2e8>
   13198:	ldr	r0, [fp, #-8]
   1319c:	ldrb	r0, [r0, #1]
   131a0:	ldr	r1, [sp, #16]
   131a4:	ldrsh	r2, [sp, #14]
   131a8:	movw	r3, #12
   131ac:	mul	r2, r2, r3
   131b0:	add	r1, r1, r2
   131b4:	ldrb	r1, [r1]
   131b8:	cmp	r0, r1
   131bc:	movw	r0, #0
   131c0:	movne	r0, #1
   131c4:	str	r0, [sp, #8]
   131c8:	ldr	r0, [sp, #8]
   131cc:	tst	r0, #1
   131d0:	beq	131ec <error@@Base+0x30c>
   131d4:	b	131d8 <error@@Base+0x2f8>
   131d8:	ldrh	r0, [sp, #14]
   131dc:	movw	r1, #1
   131e0:	add	r0, r0, r1
   131e4:	strh	r0, [sp, #14]
   131e8:	b	13170 <error@@Base+0x290>
   131ec:	ldr	r0, [sp, #16]
   131f0:	ldrsh	r1, [sp, #14]
   131f4:	movw	r2, #12
   131f8:	mul	r1, r1, r2
   131fc:	add	r0, r0, r1
   13200:	ldrsb	r0, [r0]
   13204:	cmp	r0, #0
   13208:	bne	13210 <error@@Base+0x330>
   1320c:	b	1337c <error@@Base+0x49c>
   13210:	ldr	r0, [sp, #16]
   13214:	ldrsh	r1, [sp, #14]
   13218:	movw	r2, #12
   1321c:	mul	r1, r1, r2
   13220:	add	r0, r0, r1
   13224:	ldr	r0, [r0, #4]
   13228:	movw	r1, #0
   1322c:	cmp	r0, r1
   13230:	beq	132f0 <error@@Base+0x410>
   13234:	ldr	r0, [fp, #-8]
   13238:	ldrb	r0, [r0, #2]
   1323c:	cmp	r0, #0
   13240:	bne	13254 <error@@Base+0x374>
   13244:	ldr	r0, [fp, #-12]
   13248:	movw	r1, #0
   1324c:	cmp	r0, r1
   13250:	beq	132f0 <error@@Base+0x410>
   13254:	ldr	r0, [sp, #16]
   13258:	ldrsh	r1, [sp, #14]
   1325c:	movw	r2, #12
   13260:	mul	r1, r1, r2
   13264:	add	r0, r0, r1
   13268:	ldr	r0, [r0, #4]
   1326c:	ldr	r0, [r0]
   13270:	movw	r1, #0
   13274:	cmp	r0, r1
   13278:	beq	13280 <error@@Base+0x3a0>
   1327c:	b	1338c <error@@Base+0x4ac>
   13280:	ldr	r0, [fp, #-8]
   13284:	ldrb	r0, [r0, #2]
   13288:	cmp	r0, #0
   1328c:	beq	132a0 <error@@Base+0x3c0>
   13290:	ldr	r0, [fp, #-8]
   13294:	add	r0, r0, #2
   13298:	str	r0, [sp, #4]
   1329c:	b	132a8 <error@@Base+0x3c8>
   132a0:	ldr	r0, [fp, #-12]
   132a4:	str	r0, [sp, #4]
   132a8:	ldr	r0, [sp, #4]
   132ac:	ldr	r1, [sp, #16]
   132b0:	ldrsh	r2, [sp, #14]
   132b4:	movw	r3, #12
   132b8:	mul	r2, r2, r3
   132bc:	add	r1, r1, r2
   132c0:	ldr	r1, [r1, #4]
   132c4:	str	r0, [r1]
   132c8:	ldr	r0, [fp, #-8]
   132cc:	ldrb	r0, [r0, #2]
   132d0:	cmp	r0, #0
   132d4:	movw	r0, #0
   132d8:	movne	r0, #1
   132dc:	tst	r0, #1
   132e0:	movw	r0, #0
   132e4:	moveq	r0, #1
   132e8:	strb	r0, [fp, #-1]
   132ec:	b	1339c <error@@Base+0x4bc>
   132f0:	ldr	r0, [sp, #16]
   132f4:	ldrsh	r1, [sp, #14]
   132f8:	movw	r2, #12
   132fc:	mul	r1, r1, r2
   13300:	add	r0, r0, r1
   13304:	ldr	r0, [r0, #8]
   13308:	movw	r1, #0
   1330c:	cmp	r0, r1
   13310:	beq	13378 <error@@Base+0x498>
   13314:	ldr	r0, [fp, #-8]
   13318:	ldrsb	r0, [r0, #2]
   1331c:	cmp	r0, #0
   13320:	bne	13378 <error@@Base+0x498>
   13324:	ldr	r0, [sp, #16]
   13328:	ldrsh	r1, [sp, #14]
   1332c:	movw	r2, #12
   13330:	mul	r1, r1, r2
   13334:	add	r0, r0, r1
   13338:	ldr	r0, [r0, #8]
   1333c:	ldrsb	r0, [r0]
   13340:	cmp	r0, #0
   13344:	beq	1334c <error@@Base+0x46c>
   13348:	b	1338c <error@@Base+0x4ac>
   1334c:	ldr	r0, [sp, #16]
   13350:	ldrsh	r1, [sp, #14]
   13354:	movw	r2, #12
   13358:	mul	r1, r1, r2
   1335c:	add	r0, r0, r1
   13360:	ldr	r0, [r0, #8]
   13364:	movw	r1, #1
   13368:	strb	r1, [r0]
   1336c:	movw	r0, #0
   13370:	strb	r0, [fp, #-1]
   13374:	b	1339c <error@@Base+0x4bc>
   13378:	b	1337c <error@@Base+0x49c>
   1337c:	ldr	r0, [pc, #36]	; 133a8 <error@@Base+0x4c8>
   13380:	add	r0, pc, r0
   13384:	ldr	r1, [fp, #-8]
   13388:	bl	12f40 <error@@Base+0x60>
   1338c:	ldr	r0, [pc, #24]	; 133ac <error@@Base+0x4cc>
   13390:	add	r0, pc, r0
   13394:	ldr	r1, [fp, #-8]
   13398:	bl	12f40 <error@@Base+0x60>
   1339c:	ldrb	r0, [fp, #-1]
   133a0:	mov	sp, fp
   133a4:	pop	{fp, pc}
   133a8:	andeq	r2, r0, r2, asr #21
   133ac:	andeq	r2, r0, r1, asr #21
   133b0:	push	{fp, lr}
   133b4:	mov	fp, sp
   133b8:	sub	sp, sp, #16
   133bc:	movw	r0, #1
   133c0:	strh	r0, [fp, #-2]
   133c4:	ldr	r0, [pc, #88]	; 13424 <error@@Base+0x544>
   133c8:	add	r0, pc, r0
   133cc:	ldrsh	r1, [fp, #-2]
   133d0:	ldrsh	r0, [r0]
   133d4:	cmp	r1, r0
   133d8:	bgt	1341c <error@@Base+0x53c>
   133dc:	ldrsh	r0, [fp, #-2]
   133e0:	bl	12b2c <__assert_fail@plt+0x1f1c>
   133e4:	ldr	r1, [pc, #60]	; 13428 <error@@Base+0x548>
   133e8:	ldr	r1, [pc, r1]
   133ec:	str	r0, [sp, #8]
   133f0:	ldr	r0, [sp, #8]
   133f4:	blx	r1
   133f8:	ldr	r1, [sp, #8]
   133fc:	str	r0, [sp, #4]
   13400:	mov	r0, r1
   13404:	bl	10ab4 <free@plt>
   13408:	ldrh	r0, [fp, #-2]
   1340c:	movw	r1, #1
   13410:	add	r0, r0, r1
   13414:	strh	r0, [fp, #-2]
   13418:	b	133c4 <error@@Base+0x4e4>
   1341c:	mov	sp, fp
   13420:	pop	{fp, pc}
   13424:	andeq	r8, r1, r8, lsr #30
   13428:	ldrdeq	r6, [r1], -r8
   1342c:	andeq	r0, r0, r0
   13430:	sub	sp, sp, #12
   13434:	str	r0, [sp, #8]
   13438:	str	r1, [sp, #4]
   1343c:	str	r2, [sp]
   13440:	ldr	r0, [sp, #4]
   13444:	ldr	r1, [sp, #8]
   13448:	ldr	r2, [r1]
   1344c:	add	r0, r2, r0
   13450:	str	r0, [r1]
   13454:	ldr	r0, [sp]
   13458:	ldr	r1, [sp, #8]
   1345c:	ldr	r2, [r1, #4]
   13460:	add	r0, r2, r0
   13464:	str	r0, [r1, #4]
   13468:	add	sp, sp, #12
   1346c:	bx	lr
   13470:	push	{fp, lr}
   13474:	mov	fp, sp
   13478:	sub	sp, sp, #32
   1347c:	ldr	ip, [pc, #160]	; 13524 <error@@Base+0x644>
   13480:	ldr	ip, [pc, ip]
   13484:	str	r0, [fp, #-4]
   13488:	str	r1, [fp, #-8]
   1348c:	str	r2, [fp, #-12]
   13490:	str	r3, [sp, #16]
   13494:	ldr	r0, [fp, #-4]
   13498:	ldr	r1, [fp, #-8]
   1349c:	blx	ip
   134a0:	str	r0, [sp, #12]
   134a4:	ldr	r0, [sp, #12]
   134a8:	movw	r1, #0
   134ac:	cmp	r0, r1
   134b0:	bne	13508 <error@@Base+0x628>
   134b4:	ldr	r0, [pc, #112]	; 1352c <error@@Base+0x64c>
   134b8:	ldr	r0, [pc, r0]
   134bc:	movw	r1, #1
   134c0:	str	r0, [sp, #8]
   134c4:	mov	r0, r1
   134c8:	movw	r1, #20
   134cc:	ldr	r2, [sp, #8]
   134d0:	blx	r2
   134d4:	str	r0, [sp, #12]
   134d8:	ldr	r0, [fp, #-8]
   134dc:	bl	10ae4 <strdup@plt>
   134e0:	ldr	r1, [pc, #64]	; 13528 <error@@Base+0x648>
   134e4:	ldr	r1, [pc, r1]
   134e8:	ldr	r2, [sp, #12]
   134ec:	str	r0, [r2, #8]
   134f0:	ldr	r0, [fp, #-4]
   134f4:	ldr	r2, [sp, #12]
   134f8:	str	r1, [sp, #4]
   134fc:	mov	r1, r2
   13500:	ldr	r2, [sp, #4]
   13504:	blx	r2
   13508:	ldr	r0, [sp, #12]
   1350c:	add	r0, r0, #12
   13510:	ldr	r1, [fp, #-12]
   13514:	ldr	r2, [sp, #16]
   13518:	bl	13430 <error@@Base+0x550>
   1351c:	mov	sp, fp
   13520:	pop	{fp, pc}
   13524:	andeq	r6, r1, r8, ror #24
   13528:	andeq	r6, r1, ip, asr #23
   1352c:	andeq	r6, r1, r0, lsl #25
   13530:	push	{fp, lr}
   13534:	mov	fp, sp
   13538:	sub	sp, sp, #40	; 0x28
   1353c:	ldr	r2, [pc, #504]	; 1373c <error@@Base+0x85c>
   13540:	add	r2, pc, r2
   13544:	ldr	r3, [pc, #500]	; 13740 <error@@Base+0x860>
   13548:	ldr	r3, [pc, r3]
   1354c:	str	r0, [fp, #-4]
   13550:	str	r1, [fp, #-8]
   13554:	ldr	r0, [fp, #-8]
   13558:	mov	r1, r2
   1355c:	blx	r3
   13560:	str	r0, [fp, #-12]
   13564:	ldr	r0, [fp, #-12]
   13568:	bl	13764 <error@@Base+0x884>
   1356c:	and	r0, r0, #255	; 0xff
   13570:	cmp	r0, #0
   13574:	beq	136c8 <error@@Base+0x7e8>
   13578:	ldr	r0, [pc, #452]	; 13744 <error@@Base+0x864>
   1357c:	add	r0, pc, r0
   13580:	ldr	r1, [pc, #448]	; 13748 <error@@Base+0x868>
   13584:	add	r1, pc, r1
   13588:	movw	r2, #45	; 0x2d
   1358c:	bl	10bec <strncmp@plt>
   13590:	cmp	r0, #0
   13594:	bne	136c8 <error@@Base+0x7e8>
   13598:	ldr	r0, [fp, #-12]
   1359c:	bl	13764 <error@@Base+0x884>
   135a0:	and	r0, r0, #255	; 0xff
   135a4:	cmp	r0, #0
   135a8:	beq	136c8 <error@@Base+0x7e8>
   135ac:	ldr	r0, [pc, #424]	; 1375c <error@@Base+0x87c>
   135b0:	add	r0, pc, r0
   135b4:	ldr	r1, [pc, #420]	; 13760 <error@@Base+0x880>
   135b8:	add	r1, pc, r1
   135bc:	bl	10a9c <strcmp@plt>
   135c0:	cmp	r0, #0
   135c4:	bne	136c8 <error@@Base+0x7e8>
   135c8:	ldr	r0, [fp, #-12]
   135cc:	sub	r1, fp, #16
   135d0:	bl	137b8 <error@@Base+0x8d8>
   135d4:	and	r0, r0, #255	; 0xff
   135d8:	cmp	r0, #0
   135dc:	beq	136c8 <error@@Base+0x7e8>
   135e0:	ldr	r0, [fp, #-12]
   135e4:	add	r1, sp, #20
   135e8:	bl	137b8 <error@@Base+0x8d8>
   135ec:	and	r0, r0, #255	; 0xff
   135f0:	cmp	r0, #0
   135f4:	beq	136c8 <error@@Base+0x7e8>
   135f8:	ldr	r0, [fp, #-12]
   135fc:	bl	13764 <error@@Base+0x884>
   13600:	and	r0, r0, #255	; 0xff
   13604:	cmp	r0, #0
   13608:	beq	136c8 <error@@Base+0x7e8>
   1360c:	ldr	r0, [fp, #-12]
   13610:	bl	13764 <error@@Base+0x884>
   13614:	and	r0, r0, #255	; 0xff
   13618:	cmp	r0, #0
   1361c:	beq	136c8 <error@@Base+0x7e8>
   13620:	ldr	r0, [fp, #-4]
   13624:	ldr	r1, [fp, #-16]
   13628:	ldr	r2, [sp, #20]
   1362c:	bl	13430 <error@@Base+0x550>
   13630:	ldr	r0, [fp, #-12]
   13634:	ldr	r1, [fp, #-4]
   13638:	add	r1, r1, #8
   1363c:	bl	13834 <error@@Base+0x954>
   13640:	str	r0, [sp, #16]
   13644:	ldr	r0, [fp, #-12]
   13648:	ldr	r1, [fp, #-4]
   1364c:	add	r1, r1, #416	; 0x1a0
   13650:	bl	13834 <error@@Base+0x954>
   13654:	str	r0, [sp, #12]
   13658:	ldr	r0, [fp, #-12]
   1365c:	ldr	r1, [fp, #-4]
   13660:	add	r1, r1, #824	; 0x338
   13664:	bl	13834 <error@@Base+0x954>
   13668:	ldr	r1, [fp, #-16]
   1366c:	cmp	r1, #0
   13670:	ble	136c4 <error@@Base+0x7e4>
   13674:	ldr	r0, [fp, #-12]
   13678:	ldr	r1, [fp, #-4]
   1367c:	add	r1, r1, #920	; 0x398
   13680:	bl	13834 <error@@Base+0x954>
   13684:	ldr	r1, [sp, #16]
   13688:	cmp	r1, #0
   1368c:	ble	136a0 <error@@Base+0x7c0>
   13690:	ldr	r0, [fp, #-12]
   13694:	ldr	r1, [fp, #-4]
   13698:	add	r1, r1, #992	; 0x3e0
   1369c:	bl	13928 <error@@Base+0xa48>
   136a0:	ldr	r0, [sp, #12]
   136a4:	cmp	r0, #0
   136a8:	ble	136c0 <error@@Base+0x7e0>
   136ac:	ldr	r0, [fp, #-12]
   136b0:	ldr	r1, [fp, #-4]
   136b4:	movw	r2, #9048	; 0x2358
   136b8:	add	r1, r1, r2
   136bc:	bl	13928 <error@@Base+0xa48>
   136c0:	b	136c4 <error@@Base+0x7e4>
   136c4:	b	13718 <error@@Base+0x838>
   136c8:	ldr	r0, [fp, #-8]
   136cc:	movw	r1, #0
   136d0:	cmp	r0, r1
   136d4:	beq	136e4 <error@@Base+0x804>
   136d8:	ldr	r0, [fp, #-8]
   136dc:	str	r0, [sp, #8]
   136e0:	b	136f4 <error@@Base+0x814>
   136e4:	ldr	r0, [pc, #96]	; 1374c <error@@Base+0x86c>
   136e8:	add	r0, pc, r0
   136ec:	str	r0, [sp, #8]
   136f0:	b	136f4 <error@@Base+0x814>
   136f4:	ldr	r0, [sp, #8]
   136f8:	ldr	r1, [pc, #80]	; 13750 <error@@Base+0x870>
   136fc:	add	r1, pc, r1
   13700:	ldr	r2, [pc, #76]	; 13754 <error@@Base+0x874>
   13704:	ldr	r2, [pc, r2]
   13708:	str	r0, [sp, #4]
   1370c:	mov	r0, r1
   13710:	ldr	r1, [sp, #4]
   13714:	blx	r2
   13718:	ldr	r0, [pc, #56]	; 13758 <error@@Base+0x878>
   1371c:	ldr	r0, [pc, r0]
   13720:	ldr	r1, [fp, #-12]
   13724:	str	r0, [sp]
   13728:	mov	r0, r1
   1372c:	ldr	r1, [sp]
   13730:	blx	r1
   13734:	mov	sp, fp
   13738:	pop	{fp, pc}
   1373c:	andeq	r2, r0, r0, asr #15
   13740:	andeq	r6, r1, r0, ror fp
   13744:	andeq	r8, r1, r7, ror sp
   13748:	ldrdeq	r2, [r0], -lr
   1374c:			; <UNDEFINED> instruction: 0x000027bc
   13750:	muleq	r0, r6, r7
   13754:	andeq	r6, r1, r0, asr #20
   13758:	andeq	r6, r1, ip, ror #18
   1375c:	andeq	r8, r1, r3, asr #26
   13760:	andeq	r5, r0, r7, lsr lr
   13764:	push	{fp, lr}
   13768:	mov	fp, sp
   1376c:	sub	sp, sp, #8
   13770:	ldr	r1, [pc, #60]	; 137b4 <error@@Base+0x8d4>
   13774:	add	r1, pc, r1
   13778:	str	r0, [sp, #4]
   1377c:	ldr	r2, [sp, #4]
   13780:	mov	r0, r1
   13784:	movw	r1, #99	; 0x63
   13788:	bl	10acc <fgets@plt>
   1378c:	movw	r1, #0
   13790:	cmp	r0, r1
   13794:	movw	r0, #0
   13798:	movne	r0, #1
   1379c:	tst	r0, #1
   137a0:	movw	r0, #1
   137a4:	moveq	r0, #0
   137a8:	and	r0, r0, #255	; 0xff
   137ac:	mov	sp, fp
   137b0:	pop	{fp, pc}
   137b4:	andeq	r8, r1, pc, ror fp
   137b8:	push	{fp, lr}
   137bc:	mov	fp, sp
   137c0:	sub	sp, sp, #16
   137c4:	str	r0, [fp, #-4]
   137c8:	str	r1, [sp, #8]
   137cc:	ldr	r0, [fp, #-4]
   137d0:	bl	13764 <error@@Base+0x884>
   137d4:	and	r0, r0, #255	; 0xff
   137d8:	cmp	r0, #0
   137dc:	movw	r0, #0
   137e0:	str	r0, [sp, #4]
   137e4:	beq	13810 <error@@Base+0x930>
   137e8:	ldr	r0, [pc, #60]	; 1382c <error@@Base+0x94c>
   137ec:	add	r0, pc, r0
   137f0:	ldr	r1, [pc, #56]	; 13830 <error@@Base+0x950>
   137f4:	add	r1, pc, r1
   137f8:	ldr	r2, [sp, #8]
   137fc:	bl	10b8c <__isoc99_sscanf@plt>
   13800:	cmp	r0, #1
   13804:	movw	r0, #0
   13808:	moveq	r0, #1
   1380c:	str	r0, [sp, #4]
   13810:	ldr	r0, [sp, #4]
   13814:	tst	r0, #1
   13818:	movw	r0, #1
   1381c:	moveq	r0, #0
   13820:	and	r0, r0, #255	; 0xff
   13824:	mov	sp, fp
   13828:	pop	{fp, pc}
   1382c:	andeq	r8, r1, r7, lsl #22
   13830:	andeq	r2, r0, r1, lsr #14
   13834:	push	{fp, lr}
   13838:	mov	fp, sp
   1383c:	sub	sp, sp, #24
   13840:	str	r0, [fp, #-4]
   13844:	str	r1, [fp, #-8]
   13848:	movw	r0, #0
   1384c:	str	r0, [sp]
   13850:	ldr	r0, [fp, #-4]
   13854:	bl	13764 <error@@Base+0x884>
   13858:	and	r0, r0, #255	; 0xff
   1385c:	cmp	r0, #0
   13860:	beq	13910 <error@@Base+0xa30>
   13864:	ldr	r0, [fp, #-4]
   13868:	bl	13764 <error@@Base+0x884>
   1386c:	and	r0, r0, #255	; 0xff
   13870:	cmp	r0, #0
   13874:	beq	13910 <error@@Base+0xa30>
   13878:	b	1387c <error@@Base+0x99c>
   1387c:	ldr	r0, [fp, #-4]
   13880:	add	r1, sp, #12
   13884:	add	r2, sp, #8
   13888:	bl	13fc0 <error@@Base+0x10e0>
   1388c:	sxtb	r0, r0
   13890:	cmp	r0, #0
   13894:	beq	1390c <error@@Base+0xa2c>
   13898:	ldr	r0, [pc, #124]	; 1391c <error@@Base+0xa3c>
   1389c:	add	r0, pc, r0
   138a0:	add	r0, r0, #29
   138a4:	bl	10bc8 <atoi@plt>
   138a8:	str	r0, [sp, #4]
   138ac:	ldr	r0, [sp, #4]
   138b0:	cmp	r0, #0
   138b4:	bne	138f0 <error@@Base+0xa10>
   138b8:	ldr	r0, [pc, #96]	; 13920 <error@@Base+0xa40>
   138bc:	add	r0, pc, r0
   138c0:	add	r0, r0, #29
   138c4:	ldr	r1, [pc, #88]	; 13924 <error@@Base+0xa44>
   138c8:	add	r1, pc, r1
   138cc:	bl	10a9c <strcmp@plt>
   138d0:	cmp	r0, #0
   138d4:	bne	138e4 <error@@Base+0xa04>
   138d8:	ldr	r0, [sp, #12]
   138dc:	str	r0, [sp]
   138e0:	b	138ec <error@@Base+0xa0c>
   138e4:	movw	r0, #11
   138e8:	str	r0, [sp, #4]
   138ec:	b	138f0 <error@@Base+0xa10>
   138f0:	ldr	r0, [fp, #-8]
   138f4:	ldr	r1, [sp, #4]
   138f8:	add	r0, r0, r1, lsl #3
   138fc:	ldr	r1, [sp, #12]
   13900:	ldr	r2, [sp, #8]
   13904:	bl	13430 <error@@Base+0x550>
   13908:	b	1387c <error@@Base+0x99c>
   1390c:	b	13910 <error@@Base+0xa30>
   13910:	ldr	r0, [sp]
   13914:	mov	sp, fp
   13918:	pop	{fp, pc}
   1391c:	andeq	r8, r1, r7, asr sl
   13920:	andeq	r8, r1, r7, lsr sl
   13924:	andeq	r2, r0, r1, asr #12
   13928:	push	{fp, lr}
   1392c:	mov	fp, sp
   13930:	sub	sp, sp, #24
   13934:	str	r0, [fp, #-4]
   13938:	str	r1, [fp, #-8]
   1393c:	ldr	r0, [fp, #-4]
   13940:	bl	13764 <error@@Base+0x884>
   13944:	and	r0, r0, #255	; 0xff
   13948:	cmp	r0, #0
   1394c:	beq	139d8 <error@@Base+0xaf8>
   13950:	ldr	r0, [fp, #-4]
   13954:	bl	13764 <error@@Base+0x884>
   13958:	and	r0, r0, #255	; 0xff
   1395c:	cmp	r0, #0
   13960:	beq	139d8 <error@@Base+0xaf8>
   13964:	b	13968 <error@@Base+0xa88>
   13968:	ldr	r0, [fp, #-4]
   1396c:	add	r1, sp, #12
   13970:	add	r2, sp, #8
   13974:	bl	13fc0 <error@@Base+0x10e0>
   13978:	sxtb	r0, r0
   1397c:	cmp	r0, #0
   13980:	beq	139d4 <error@@Base+0xaf4>
   13984:	ldr	r0, [pc, #84]	; 139e0 <error@@Base+0xb00>
   13988:	add	r0, pc, r0
   1398c:	add	r1, r0, #29
   13990:	ldr	r2, [pc, #76]	; 139e4 <error@@Base+0xb04>
   13994:	add	r2, pc, r2
   13998:	str	r0, [sp, #4]
   1399c:	mov	r0, r2
   139a0:	str	r1, [sp]
   139a4:	bl	10b74 <strlen@plt>
   139a8:	sub	r0, r0, #1
   139ac:	ldr	r1, [sp, #4]
   139b0:	add	r0, r1, r0
   139b4:	movw	r2, #0
   139b8:	strb	r2, [r0]
   139bc:	ldr	r0, [fp, #-8]
   139c0:	ldr	r2, [sp, #12]
   139c4:	ldr	r3, [sp, #8]
   139c8:	ldr	r1, [sp]
   139cc:	bl	13470 <error@@Base+0x590>
   139d0:	b	13968 <error@@Base+0xa88>
   139d4:	b	139d8 <error@@Base+0xaf8>
   139d8:	mov	sp, fp
   139dc:	pop	{fp, pc}
   139e0:	andeq	r8, r1, fp, ror #18
   139e4:	andeq	r8, r1, pc, asr r9
   139e8:	push	{fp, lr}
   139ec:	mov	fp, sp
   139f0:	sub	sp, sp, #40	; 0x28
   139f4:	ldr	r2, [pc, #532]	; 13c10 <error@@Base+0xd30>
   139f8:	add	r2, pc, r2
   139fc:	ldr	r3, [pc, #528]	; 13c14 <error@@Base+0xd34>
   13a00:	ldr	r3, [pc, r3]
   13a04:	str	r0, [fp, #-4]
   13a08:	str	r1, [fp, #-8]
   13a0c:	ldr	r0, [fp, #-8]
   13a10:	mov	r1, r2
   13a14:	blx	r3
   13a18:	ldr	r1, [pc, #484]	; 13c04 <error@@Base+0xd24>
   13a1c:	add	r1, pc, r1
   13a20:	ldr	r2, [pc, #480]	; 13c08 <error@@Base+0xd28>
   13a24:	add	r2, pc, r2
   13a28:	ldr	r3, [pc, #476]	; 13c0c <error@@Base+0xd2c>
   13a2c:	add	r3, pc, r3
   13a30:	str	r0, [fp, #-12]
   13a34:	ldr	r0, [fp, #-12]
   13a38:	bl	10b80 <fprintf@plt>
   13a3c:	ldr	r1, [pc, #444]	; 13c00 <error@@Base+0xd20>
   13a40:	add	r1, pc, r1
   13a44:	ldr	r2, [fp, #-12]
   13a48:	ldr	r3, [fp, #-4]
   13a4c:	ldr	r3, [r3]
   13a50:	str	r0, [fp, #-16]
   13a54:	mov	r0, r2
   13a58:	mov	r2, r3
   13a5c:	bl	10b80 <fprintf@plt>
   13a60:	ldr	r1, [pc, #404]	; 13bfc <error@@Base+0xd1c>
   13a64:	add	r1, pc, r1
   13a68:	ldr	r2, [fp, #-12]
   13a6c:	ldr	r3, [fp, #-4]
   13a70:	ldr	r3, [r3, #4]
   13a74:	str	r0, [sp, #20]
   13a78:	mov	r0, r2
   13a7c:	mov	r2, r3
   13a80:	bl	10b80 <fprintf@plt>
   13a84:	ldr	r1, [fp, #-12]
   13a88:	ldr	r2, [fp, #-4]
   13a8c:	str	r0, [sp, #16]
   13a90:	mov	r0, r1
   13a94:	mov	r1, r2
   13a98:	bl	13c28 <error@@Base+0xd48>
   13a9c:	ldr	r0, [pc, #340]	; 13bf8 <error@@Base+0xd18>
   13aa0:	add	r0, pc, r0
   13aa4:	ldr	r1, [fp, #-12]
   13aa8:	bl	10be0 <fputs@plt>
   13aac:	ldr	r1, [pc, #320]	; 13bf4 <error@@Base+0xd14>
   13ab0:	add	r3, pc, r1
   13ab4:	ldr	r1, [fp, #-12]
   13ab8:	ldr	r2, [fp, #-4]
   13abc:	add	r2, r2, #8
   13ac0:	str	r0, [sp, #12]
   13ac4:	mov	r0, r1
   13ac8:	mov	r1, r2
   13acc:	movw	r2, #50	; 0x32
   13ad0:	movw	ip, #0
   13ad4:	str	ip, [sp]
   13ad8:	movw	ip, #1
   13adc:	str	ip, [sp, #4]
   13ae0:	bl	13cc8 <error@@Base+0xde8>
   13ae4:	ldr	r0, [pc, #260]	; 13bf0 <error@@Base+0xd10>
   13ae8:	add	r3, pc, r0
   13aec:	ldr	r0, [fp, #-12]
   13af0:	ldr	r1, [fp, #-4]
   13af4:	add	r1, r1, #416	; 0x1a0
   13af8:	movw	r2, #50	; 0x32
   13afc:	movw	ip, #0
   13b00:	str	ip, [sp]
   13b04:	movw	ip, #1
   13b08:	str	ip, [sp, #4]
   13b0c:	bl	13cc8 <error@@Base+0xde8>
   13b10:	ldr	r0, [pc, #212]	; 13bec <error@@Base+0xd0c>
   13b14:	add	r3, pc, r0
   13b18:	ldr	r0, [fp, #-12]
   13b1c:	ldr	r1, [fp, #-4]
   13b20:	add	r1, r1, #824	; 0x338
   13b24:	movw	r2, #10
   13b28:	movw	ip, #1
   13b2c:	str	ip, [sp]
   13b30:	str	ip, [sp, #4]
   13b34:	bl	13cc8 <error@@Base+0xde8>
   13b38:	ldr	r0, [fp, #-4]
   13b3c:	ldr	r0, [r0]
   13b40:	cmp	r0, #0
   13b44:	ble	13bc8 <error@@Base+0xce8>
   13b48:	ldr	r0, [pc, #200]	; 13c18 <error@@Base+0xd38>
   13b4c:	add	r3, pc, r0
   13b50:	ldr	r0, [fp, #-12]
   13b54:	ldr	r1, [fp, #-4]
   13b58:	add	r1, r1, #920	; 0x398
   13b5c:	movw	r2, #8
   13b60:	movw	ip, #0
   13b64:	str	ip, [sp]
   13b68:	str	ip, [sp, #4]
   13b6c:	bl	13cc8 <error@@Base+0xde8>
   13b70:	ldr	r0, [fp, #-4]
   13b74:	ldr	r0, [r0, #8]
   13b78:	cmp	r0, #0
   13b7c:	ble	13b98 <error@@Base+0xcb8>
   13b80:	ldr	r0, [pc, #148]	; 13c1c <error@@Base+0xd3c>
   13b84:	add	r2, pc, r0
   13b88:	ldr	r0, [fp, #-12]
   13b8c:	ldr	r1, [fp, #-4]
   13b90:	add	r1, r1, #992	; 0x3e0
   13b94:	bl	13e6c <error@@Base+0xf8c>
   13b98:	ldr	r0, [fp, #-4]
   13b9c:	ldr	r0, [r0, #416]	; 0x1a0
   13ba0:	cmp	r0, #0
   13ba4:	ble	13bc4 <error@@Base+0xce4>
   13ba8:	ldr	r0, [pc, #112]	; 13c20 <error@@Base+0xd40>
   13bac:	add	r2, pc, r0
   13bb0:	ldr	r0, [fp, #-12]
   13bb4:	ldr	r1, [fp, #-4]
   13bb8:	movw	r3, #9048	; 0x2358
   13bbc:	add	r1, r1, r3
   13bc0:	bl	13e6c <error@@Base+0xf8c>
   13bc4:	b	13bc8 <error@@Base+0xce8>
   13bc8:	ldr	r0, [pc, #84]	; 13c24 <error@@Base+0xd44>
   13bcc:	ldr	r0, [pc, r0]
   13bd0:	ldr	r1, [fp, #-12]
   13bd4:	str	r0, [sp, #8]
   13bd8:	mov	r0, r1
   13bdc:	ldr	r1, [sp, #8]
   13be0:	blx	r1
   13be4:	mov	sp, fp
   13be8:	pop	{fp, pc}
   13bec:	ldrdeq	r2, [r0], -r6
   13bf0:	andeq	r2, r0, fp, lsl #8
   13bf4:	andeq	r2, r0, r0, lsr r4
   13bf8:	andeq	r2, r0, r3, lsr r4
   13bfc:	andeq	r2, r0, r9, asr r4
   13c00:	andeq	r2, r0, pc, ror #8
   13c04:	andeq	r2, r0, lr, lsl #9
   13c08:	andeq	r2, r0, lr, lsr r4
   13c0c:	andeq	r5, r0, r3, asr #19
   13c10:	andeq	r2, r0, pc, ror #5
   13c14:			; <UNDEFINED> instruction: 0x000166b8
   13c18:			; <UNDEFINED> instruction: 0x000023b5
   13c1c:	andeq	r2, r0, ip, asr r3
   13c20:	andeq	r2, r0, r7, asr #6
   13c24:			; <UNDEFINED> instruction: 0x000164bc
   13c28:	push	{fp, lr}
   13c2c:	mov	fp, sp
   13c30:	sub	sp, sp, #8
   13c34:	str	r0, [sp, #4]
   13c38:	str	r1, [sp]
   13c3c:	ldr	r0, [sp]
   13c40:	ldr	r0, [r0]
   13c44:	cmp	r0, #0
   13c48:	bne	13c60 <error@@Base+0xd80>
   13c4c:	ldr	r0, [pc, #112]	; 13cc4 <error@@Base+0xde4>
   13c50:	add	r0, pc, r0
   13c54:	ldr	r1, [sp, #4]
   13c58:	bl	10be0 <fputs@plt>
   13c5c:	b	13cac <error@@Base+0xdcc>
   13c60:	ldr	r0, [pc, #88]	; 13cc0 <error@@Base+0xde0>
   13c64:	add	r1, pc, r0
   13c68:	vldr	d16, [pc, #72]	; 13cb8 <error@@Base+0xdd8>
   13c6c:	ldr	r0, [sp, #4]
   13c70:	ldr	r2, [sp]
   13c74:	ldr	r2, [r2]
   13c78:	ldr	r3, [sp]
   13c7c:	ldr	r3, [r3, #4]
   13c80:	sub	r2, r2, r3
   13c84:	vmov	s0, r2
   13c88:	vcvt.f64.s32	d17, s0
   13c8c:	vmul.f64	d16, d16, d17
   13c90:	ldr	r2, [sp]
   13c94:	ldr	r2, [r2]
   13c98:	vmov	s0, r2
   13c9c:	vcvt.f64.s32	d17, s0
   13ca0:	vdiv.f64	d16, d16, d17
   13ca4:	vmov	r2, r3, d16
   13ca8:	bl	10b80 <fprintf@plt>
   13cac:	mov	sp, fp
   13cb0:	pop	{fp, pc}
   13cb4:	nop	{0}
   13cb8:	andeq	r0, r0, r0
   13cbc:	subsmi	r0, r9, r0
   13cc0:			; <UNDEFINED> instruction: 0x000022be
   13cc4:	andeq	r2, r0, r9, asr #5
   13cc8:	push	{r4, sl, fp, lr}
   13ccc:	add	fp, sp, #8
   13cd0:	sub	sp, sp, #24
   13cd4:	ldr	ip, [fp, #12]
   13cd8:	ldr	lr, [fp, #8]
   13cdc:	ldr	r4, [pc, #376]	; 13e5c <error@@Base+0xf7c>
   13ce0:	add	r4, pc, r4
   13ce4:	str	r0, [fp, #-12]
   13ce8:	str	r1, [sp, #16]
   13cec:	strh	r2, [sp, #14]
   13cf0:	str	r3, [sp, #8]
   13cf4:	strb	lr, [sp, #7]
   13cf8:	strb	ip, [sp, #6]
   13cfc:	ldr	r0, [fp, #-12]
   13d00:	ldr	r2, [sp, #8]
   13d04:	mov	r1, r4
   13d08:	bl	10b80 <fprintf@plt>
   13d0c:	ldr	r1, [fp, #-12]
   13d10:	str	r0, [sp]
   13d14:	mov	r0, r1
   13d18:	movw	r1, #0
   13d1c:	bl	14044 <error@@Base+0x1164>
   13d20:	ldr	r0, [pc, #296]	; 13e50 <error@@Base+0xf70>
   13d24:	add	r1, pc, r0
   13d28:	ldr	r0, [pc, #292]	; 13e54 <error@@Base+0xf74>
   13d2c:	add	r0, pc, r0
   13d30:	ldr	r2, [pc, #288]	; 13e58 <error@@Base+0xf78>
   13d34:	add	r2, pc, r2
   13d38:	ldr	r3, [fp, #-12]
   13d3c:	ldrb	ip, [sp, #7]
   13d40:	cmp	ip, #0
   13d44:	movw	ip, #0
   13d48:	movne	ip, #1
   13d4c:	tst	ip, #1
   13d50:	movne	r2, r0
   13d54:	mov	r0, r3
   13d58:	bl	10b80 <fprintf@plt>
   13d5c:	movw	r1, #1
   13d60:	strh	r1, [sp, #4]
   13d64:	ldrsh	r0, [sp, #4]
   13d68:	ldrsh	r1, [sp, #14]
   13d6c:	cmp	r0, r1
   13d70:	bgt	13dcc <error@@Base+0xeec>
   13d74:	ldr	r0, [sp, #16]
   13d78:	ldrsh	r1, [sp, #4]
   13d7c:	add	r0, r0, r1, lsl #3
   13d80:	ldr	r0, [r0]
   13d84:	cmp	r0, #0
   13d88:	ble	13db4 <error@@Base+0xed4>
   13d8c:	ldr	r0, [fp, #-12]
   13d90:	ldr	r1, [sp, #16]
   13d94:	ldrsh	r2, [sp, #4]
   13d98:	add	r1, r1, r2, lsl #3
   13d9c:	bl	14044 <error@@Base+0x1164>
   13da0:	ldr	r0, [pc, #192]	; 13e68 <error@@Base+0xf88>
   13da4:	add	r1, pc, r0
   13da8:	ldr	r0, [fp, #-12]
   13dac:	ldrsh	r2, [sp, #4]
   13db0:	bl	10b80 <fprintf@plt>
   13db4:	b	13db8 <error@@Base+0xed8>
   13db8:	ldrh	r0, [sp, #4]
   13dbc:	movw	r1, #1
   13dc0:	add	r0, r0, r1
   13dc4:	strh	r0, [sp, #4]
   13dc8:	b	13d64 <error@@Base+0xe84>
   13dcc:	ldrb	r0, [sp, #7]
   13dd0:	cmp	r0, #0
   13dd4:	beq	13e20 <error@@Base+0xf40>
   13dd8:	ldr	r0, [sp, #16]
   13ddc:	ldrsh	r1, [sp, #14]
   13de0:	add	r1, r1, #1
   13de4:	add	r0, r0, r1, lsl #3
   13de8:	ldr	r0, [r0]
   13dec:	cmp	r0, #0
   13df0:	ble	13e20 <error@@Base+0xf40>
   13df4:	ldr	r0, [fp, #-12]
   13df8:	ldr	r1, [sp, #16]
   13dfc:	ldrsh	r2, [sp, #14]
   13e00:	add	r2, r2, #1
   13e04:	add	r1, r1, r2, lsl #3
   13e08:	bl	14044 <error@@Base+0x1164>
   13e0c:	ldr	r0, [pc, #76]	; 13e60 <error@@Base+0xf80>
   13e10:	add	r1, pc, r0
   13e14:	ldr	r0, [fp, #-12]
   13e18:	ldrsh	r2, [sp, #14]
   13e1c:	bl	10b80 <fprintf@plt>
   13e20:	ldrsb	r0, [sp, #6]
   13e24:	cmp	r0, #0
   13e28:	beq	13e48 <error@@Base+0xf68>
   13e2c:	ldr	r0, [fp, #-12]
   13e30:	ldr	r1, [sp, #16]
   13e34:	bl	14044 <error@@Base+0x1164>
   13e38:	ldr	r0, [pc, #36]	; 13e64 <error@@Base+0xf84>
   13e3c:	add	r0, pc, r0
   13e40:	ldr	r1, [fp, #-12]
   13e44:	bl	10be0 <fputs@plt>
   13e48:	sub	sp, fp, #8
   13e4c:	pop	{r4, sl, fp, pc}
   13e50:	andeq	r2, r0, r5, lsl #4
   13e54:	andeq	r2, r0, r1, lsl #4
   13e58:	andeq	r2, r0, r0, lsl #4
   13e5c:	andeq	r2, r0, r8, asr #4
   13e60:	andeq	r2, r0, r4, lsr r1
   13e64:	andeq	r2, r0, sp, asr #1
   13e68:	muleq	r0, r7, r1
   13e6c:	push	{fp, lr}
   13e70:	mov	fp, sp
   13e74:	sub	sp, sp, #40	; 0x28
   13e78:	ldr	r3, [pc, #312]	; 13fb8 <error@@Base+0x10d8>
   13e7c:	ldr	r3, [pc, r3]
   13e80:	str	r0, [fp, #-4]
   13e84:	str	r1, [fp, #-8]
   13e88:	str	r2, [fp, #-12]
   13e8c:	ldr	r0, [fp, #-8]
   13e90:	blx	r3
   13e94:	ldr	r0, [pc, #276]	; 13fb0 <error@@Base+0x10d0>
   13e98:	add	r0, pc, r0
   13e9c:	ldr	r1, [pc, #272]	; 13fb4 <error@@Base+0x10d4>
   13ea0:	ldr	r1, [pc, r1]
   13ea4:	ldr	r2, [fp, #-8]
   13ea8:	movw	r3, #8052	; 0x1f74
   13eac:	add	r2, r2, r3
   13eb0:	ldr	r2, [r2]
   13eb4:	ldr	r3, [fp, #-8]
   13eb8:	movw	ip, #8048	; 0x1f70
   13ebc:	add	r3, r3, ip
   13ec0:	ldr	r3, [r3]
   13ec4:	str	r0, [sp, #20]
   13ec8:	mov	r0, r2
   13ecc:	str	r1, [sp, #16]
   13ed0:	mov	r1, r3
   13ed4:	ldr	r2, [sp, #20]
   13ed8:	ldr	r3, [sp, #16]
   13edc:	blx	r3
   13ee0:	ldr	r0, [pc, #196]	; 13fac <error@@Base+0x10cc>
   13ee4:	add	r1, pc, r0
   13ee8:	ldr	r0, [fp, #-4]
   13eec:	ldr	r2, [fp, #-12]
   13ef0:	bl	10b80 <fprintf@plt>
   13ef4:	ldr	r1, [fp, #-4]
   13ef8:	str	r0, [sp, #12]
   13efc:	mov	r0, r1
   13f00:	movw	r1, #0
   13f04:	bl	14044 <error@@Base+0x1164>
   13f08:	ldr	r1, [fp, #-4]
   13f0c:	movw	r0, #10
   13f10:	bl	10bb0 <fputc@plt>
   13f14:	movw	r1, #0
   13f18:	str	r1, [fp, #-16]
   13f1c:	ldr	r0, [fp, #-16]
   13f20:	ldr	r1, [fp, #-8]
   13f24:	movw	r2, #8052	; 0x1f74
   13f28:	add	r1, r1, r2
   13f2c:	ldr	r1, [r1]
   13f30:	cmp	r0, r1
   13f34:	bge	13fa4 <error@@Base+0x10c4>
   13f38:	ldr	r0, [pc, #124]	; 13fbc <error@@Base+0x10dc>
   13f3c:	add	r1, pc, r0
   13f40:	ldr	r0, [fp, #-4]
   13f44:	ldr	r2, [fp, #-8]
   13f48:	movw	r3, #8048	; 0x1f70
   13f4c:	ldr	r2, [r2, r3]
   13f50:	ldr	ip, [fp, #-16]
   13f54:	ldr	r2, [r2, ip, lsl #2]
   13f58:	add	r2, r2, #12
   13f5c:	str	r1, [sp, #8]
   13f60:	mov	r1, r2
   13f64:	str	r3, [sp, #4]
   13f68:	bl	14044 <error@@Base+0x1164>
   13f6c:	ldr	r0, [fp, #-4]
   13f70:	ldr	r1, [fp, #-8]
   13f74:	ldr	r2, [sp, #4]
   13f78:	ldr	r1, [r1, r2]
   13f7c:	ldr	r3, [fp, #-16]
   13f80:	add	r1, r1, r3, lsl #2
   13f84:	ldr	r1, [r1]
   13f88:	ldr	r2, [r1, #8]
   13f8c:	ldr	r1, [sp, #8]
   13f90:	bl	10b80 <fprintf@plt>
   13f94:	ldr	r0, [fp, #-16]
   13f98:	add	r0, r0, #1
   13f9c:	str	r0, [fp, #-16]
   13fa0:	b	13f1c <error@@Base+0x103c>
   13fa4:	mov	sp, fp
   13fa8:	pop	{fp, pc}
   13fac:	andeq	r2, r0, r4, asr #32
   13fb0:	andeq	r0, r0, r8, lsr r2
   13fb4:	andeq	r6, r1, r8, lsr #4
   13fb8:	andeq	r6, r1, ip, asr r2
   13fbc:	andeq	r1, r0, sp, ror #31
   13fc0:	push	{fp, lr}
   13fc4:	mov	fp, sp
   13fc8:	sub	sp, sp, #16
   13fcc:	str	r0, [fp, #-4]
   13fd0:	str	r1, [sp, #8]
   13fd4:	str	r2, [sp, #4]
   13fd8:	ldr	r0, [fp, #-4]
   13fdc:	bl	13764 <error@@Base+0x884>
   13fe0:	and	r0, r0, #255	; 0xff
   13fe4:	cmp	r0, #0
   13fe8:	movw	r0, #0
   13fec:	str	r0, [sp]
   13ff0:	beq	14020 <error@@Base+0x1140>
   13ff4:	ldr	r0, [pc, #64]	; 1403c <error@@Base+0x115c>
   13ff8:	add	r0, pc, r0
   13ffc:	ldr	r1, [pc, #60]	; 14040 <error@@Base+0x1160>
   14000:	add	r1, pc, r1
   14004:	ldr	r2, [sp, #8]
   14008:	ldr	r3, [sp, #4]
   1400c:	bl	10b8c <__isoc99_sscanf@plt>
   14010:	cmp	r0, #2
   14014:	movw	r0, #0
   14018:	moveq	r0, #1
   1401c:	str	r0, [sp]
   14020:	ldr	r0, [sp]
   14024:	tst	r0, #1
   14028:	movw	r0, #1
   1402c:	moveq	r0, #0
   14030:	and	r0, r0, #255	; 0xff
   14034:	mov	sp, fp
   14038:	pop	{fp, pc}
   1403c:	strdeq	r8, [r1], -fp
   14040:	andeq	r1, r0, r1, lsl pc
   14044:	push	{fp, lr}
   14048:	mov	fp, sp
   1404c:	sub	sp, sp, #16
   14050:	str	r0, [fp, #-4]
   14054:	str	r1, [sp, #8]
   14058:	ldr	r0, [sp, #8]
   1405c:	movw	r1, #0
   14060:	cmp	r0, r1
   14064:	beq	140a4 <error@@Base+0x11c4>
   14068:	ldr	r0, [pc, #96]	; 140d0 <error@@Base+0x11f0>
   1406c:	add	r1, pc, r0
   14070:	ldr	r0, [fp, #-4]
   14074:	ldr	r2, [sp, #8]
   14078:	ldr	r2, [r2]
   1407c:	ldr	r3, [sp, #8]
   14080:	ldr	r3, [r3, #4]
   14084:	bl	10b80 <fprintf@plt>
   14088:	ldr	r1, [fp, #-4]
   1408c:	ldr	r2, [sp, #8]
   14090:	str	r0, [sp, #4]
   14094:	mov	r0, r1
   14098:	mov	r1, r2
   1409c:	bl	13c28 <error@@Base+0xd48>
   140a0:	b	140b4 <error@@Base+0x11d4>
   140a4:	ldr	r0, [pc, #32]	; 140cc <error@@Base+0x11ec>
   140a8:	add	r0, pc, r0
   140ac:	ldr	r1, [fp, #-4]
   140b0:	bl	10be0 <fputs@plt>
   140b4:	ldr	r0, [pc, #24]	; 140d4 <error@@Base+0x11f4>
   140b8:	add	r0, pc, r0
   140bc:	ldr	r1, [fp, #-4]
   140c0:	bl	10be0 <fputs@plt>
   140c4:	mov	sp, fp
   140c8:	pop	{fp, pc}
   140cc:			; <UNDEFINED> instruction: 0x00001eb0
   140d0:	andeq	r1, r0, r1, ror #29
   140d4:			; <UNDEFINED> instruction: 0x00001ebb
   140d8:	push	{fp, lr}
   140dc:	mov	fp, sp
   140e0:	sub	sp, sp, #8
   140e4:	ldr	r2, [pc, #36]	; 14110 <error@@Base+0x1230>
   140e8:	ldr	r2, [pc, r2]
   140ec:	str	r0, [sp, #4]
   140f0:	str	r1, [sp]
   140f4:	ldr	r0, [sp, #4]
   140f8:	ldr	r0, [r0, #8]
   140fc:	ldr	r1, [sp]
   14100:	ldr	r1, [r1, #8]
   14104:	blx	r2
   14108:	mov	sp, fp
   1410c:	pop	{fp, pc}
   14110:	andeq	r6, r1, r4, asr #32
   14114:	push	{fp, lr}
   14118:	mov	fp, sp
   1411c:	sub	sp, sp, #16
   14120:	str	r0, [fp, #-4]
   14124:	str	r1, [sp, #8]
   14128:	ldr	r0, [sp, #8]
   1412c:	ldr	r0, [r0]
   14130:	str	r0, [sp, #4]
   14134:	ldr	r0, [sp, #4]
   14138:	bl	1418c <error@@Base+0x12ac>
   1413c:	str	r0, [sp]
   14140:	movw	r1, #0
   14144:	cmp	r0, r1
   14148:	beq	14184 <error@@Base+0x12a4>
   1414c:	ldr	r0, [sp, #4]
   14150:	ldr	r0, [r0, #12]
   14154:	bl	145bc <error@@Base+0x16dc>
   14158:	sxtb	r0, r0
   1415c:	cmp	r0, #0
   14160:	beq	14174 <error@@Base+0x1294>
   14164:	ldr	r0, [fp, #-4]
   14168:	ldr	r1, [sp, #4]
   1416c:	ldr	r2, [sp]
   14170:	bl	14624 <error@@Base+0x1744>
   14174:	ldr	r0, [sp]
   14178:	ldr	r0, [r0, #4]
   1417c:	str	r0, [sp, #4]
   14180:	b	14134 <error@@Base+0x1254>
   14184:	mov	sp, fp
   14188:	pop	{fp, pc}
   1418c:	push	{fp, lr}
   14190:	mov	fp, sp
   14194:	sub	sp, sp, #48	; 0x30
   14198:	str	r0, [fp, #-8]
   1419c:	ldr	r0, [fp, #-8]
   141a0:	str	r0, [sp, #28]
   141a4:	add	r0, sp, #24
   141a8:	str	r0, [sp, #20]
   141ac:	movw	r0, #17
   141b0:	str	r0, [sp, #16]
   141b4:	ldr	r0, [fp, #-8]
   141b8:	movw	r1, #0
   141bc:	cmp	r0, r1
   141c0:	bne	141d0 <error@@Base+0x12f0>
   141c4:	movw	r0, #0
   141c8:	str	r0, [fp, #-4]
   141cc:	b	145b0 <error@@Base+0x16d0>
   141d0:	b	141d4 <error@@Base+0x12f4>
   141d4:	ldr	r0, [sp, #20]
   141d8:	ldr	r0, [r0, #4]
   141dc:	movw	r1, #0
   141e0:	cmp	r0, r1
   141e4:	beq	145a4 <error@@Base+0x16c4>
   141e8:	ldr	r0, [sp, #20]
   141ec:	bl	14710 <error@@Base+0x1830>
   141f0:	str	r0, [sp, #20]
   141f4:	ldr	r0, [sp, #16]
   141f8:	str	r0, [sp, #4]
   141fc:	ldr	r0, [sp, #20]
   14200:	bl	147bc <error@@Base+0x18dc>
   14204:	str	r0, [sp, #16]
   14208:	ldr	r0, [sp, #20]
   1420c:	bl	14710 <error@@Base+0x1830>
   14210:	bl	147bc <error@@Base+0x18dc>
   14214:	str	r0, [sp, #12]
   14218:	ldr	r0, [sp, #20]
   1421c:	bl	14804 <error@@Base+0x1924>
   14220:	bl	147bc <error@@Base+0x18dc>
   14224:	str	r0, [sp, #8]
   14228:	ldr	r0, [sp, #16]
   1422c:	cmp	r0, #1
   14230:	bne	14244 <error@@Base+0x1364>
   14234:	ldr	r0, [sp, #12]
   14238:	cmp	r0, #2
   1423c:	bne	14244 <error@@Base+0x1364>
   14240:	b	141d4 <error@@Base+0x12f4>
   14244:	ldr	r0, [sp, #16]
   14248:	cmp	r0, #3
   1424c:	beq	14268 <error@@Base+0x1388>
   14250:	ldr	r0, [sp, #16]
   14254:	cmp	r0, #1
   14258:	beq	14268 <error@@Base+0x1388>
   1425c:	ldr	r0, [sp, #16]
   14260:	cmp	r0, #2
   14264:	bne	1426c <error@@Base+0x138c>
   14268:	b	145a4 <error@@Base+0x16c4>
   1426c:	ldr	r0, [sp, #12]
   14270:	cmp	r0, #3
   14274:	beq	14290 <error@@Base+0x13b0>
   14278:	ldr	r0, [sp, #12]
   1427c:	cmp	r0, #1
   14280:	beq	14290 <error@@Base+0x13b0>
   14284:	ldr	r0, [sp, #12]
   14288:	cmp	r0, #2
   1428c:	bne	14294 <error@@Base+0x13b4>
   14290:	b	145a4 <error@@Base+0x16c4>
   14294:	ldr	r0, [sp, #16]
   14298:	cmp	r0, #9
   1429c:	beq	142ac <error@@Base+0x13cc>
   142a0:	ldr	r0, [sp, #16]
   142a4:	cmp	r0, #8
   142a8:	bne	142c8 <error@@Base+0x13e8>
   142ac:	ldr	r0, [sp, #12]
   142b0:	cmp	r0, #9
   142b4:	beq	142c4 <error@@Base+0x13e4>
   142b8:	ldr	r0, [sp, #12]
   142bc:	cmp	r0, #8
   142c0:	bne	142c8 <error@@Base+0x13e8>
   142c4:	b	141d4 <error@@Base+0x12f4>
   142c8:	ldr	r0, [sp, #16]
   142cc:	cmp	r0, #9
   142d0:	beq	142e0 <error@@Base+0x1400>
   142d4:	ldr	r0, [sp, #16]
   142d8:	cmp	r0, #8
   142dc:	bne	14320 <error@@Base+0x1440>
   142e0:	ldr	r0, [sp, #12]
   142e4:	cmp	r0, #13
   142e8:	beq	14304 <error@@Base+0x1424>
   142ec:	ldr	r0, [sp, #12]
   142f0:	cmp	r0, #12
   142f4:	beq	14304 <error@@Base+0x1424>
   142f8:	ldr	r0, [sp, #12]
   142fc:	cmp	r0, #10
   14300:	bne	14320 <error@@Base+0x1440>
   14304:	ldr	r0, [sp, #8]
   14308:	cmp	r0, #9
   1430c:	beq	1431c <error@@Base+0x143c>
   14310:	ldr	r0, [sp, #8]
   14314:	cmp	r0, #8
   14318:	bne	14320 <error@@Base+0x1440>
   1431c:	b	141d4 <error@@Base+0x12f4>
   14320:	ldr	r0, [sp, #4]
   14324:	cmp	r0, #9
   14328:	beq	14338 <error@@Base+0x1458>
   1432c:	ldr	r0, [sp, #4]
   14330:	cmp	r0, #8
   14334:	bne	14378 <error@@Base+0x1498>
   14338:	ldr	r0, [sp, #16]
   1433c:	cmp	r0, #13
   14340:	beq	1435c <error@@Base+0x147c>
   14344:	ldr	r0, [sp, #16]
   14348:	cmp	r0, #12
   1434c:	beq	1435c <error@@Base+0x147c>
   14350:	ldr	r0, [sp, #16]
   14354:	cmp	r0, #10
   14358:	bne	14378 <error@@Base+0x1498>
   1435c:	ldr	r0, [sp, #12]
   14360:	cmp	r0, #9
   14364:	beq	14374 <error@@Base+0x1494>
   14368:	ldr	r0, [sp, #12]
   1436c:	cmp	r0, #8
   14370:	bne	14378 <error@@Base+0x1498>
   14374:	b	141d4 <error@@Base+0x12f4>
   14378:	ldr	r0, [sp, #16]
   1437c:	cmp	r0, #8
   14380:	bne	14394 <error@@Base+0x14b4>
   14384:	ldr	r0, [sp, #12]
   14388:	cmp	r0, #10
   1438c:	bne	14394 <error@@Base+0x14b4>
   14390:	b	141d4 <error@@Base+0x12f4>
   14394:	ldr	r0, [sp, #16]
   14398:	cmp	r0, #8
   1439c:	bne	143bc <error@@Base+0x14dc>
   143a0:	ldr	r0, [sp, #12]
   143a4:	cmp	r0, #11
   143a8:	bne	143bc <error@@Base+0x14dc>
   143ac:	ldr	r0, [sp, #8]
   143b0:	cmp	r0, #8
   143b4:	bne	143bc <error@@Base+0x14dc>
   143b8:	b	141d4 <error@@Base+0x12f4>
   143bc:	ldr	r0, [sp, #4]
   143c0:	cmp	r0, #8
   143c4:	bne	143e4 <error@@Base+0x1504>
   143c8:	ldr	r0, [sp, #16]
   143cc:	cmp	r0, #11
   143d0:	bne	143e4 <error@@Base+0x1504>
   143d4:	ldr	r0, [sp, #12]
   143d8:	cmp	r0, #8
   143dc:	bne	143e4 <error@@Base+0x1504>
   143e0:	b	141d4 <error@@Base+0x12f4>
   143e4:	ldr	r0, [sp, #16]
   143e8:	cmp	r0, #15
   143ec:	bne	14400 <error@@Base+0x1520>
   143f0:	ldr	r0, [sp, #12]
   143f4:	cmp	r0, #15
   143f8:	bne	14400 <error@@Base+0x1520>
   143fc:	b	141d4 <error@@Base+0x12f4>
   14400:	ldr	r0, [sp, #16]
   14404:	cmp	r0, #9
   14408:	beq	14418 <error@@Base+0x1538>
   1440c:	ldr	r0, [sp, #16]
   14410:	cmp	r0, #8
   14414:	bne	14428 <error@@Base+0x1548>
   14418:	ldr	r0, [sp, #12]
   1441c:	cmp	r0, #15
   14420:	bne	14428 <error@@Base+0x1548>
   14424:	b	141d4 <error@@Base+0x12f4>
   14428:	ldr	r0, [sp, #16]
   1442c:	cmp	r0, #15
   14430:	bne	14450 <error@@Base+0x1570>
   14434:	ldr	r0, [sp, #12]
   14438:	cmp	r0, #9
   1443c:	beq	1444c <error@@Base+0x156c>
   14440:	ldr	r0, [sp, #12]
   14444:	cmp	r0, #8
   14448:	bne	14450 <error@@Base+0x1570>
   1444c:	b	141d4 <error@@Base+0x12f4>
   14450:	ldr	r0, [sp, #4]
   14454:	cmp	r0, #15
   14458:	bne	14490 <error@@Base+0x15b0>
   1445c:	ldr	r0, [sp, #16]
   14460:	cmp	r0, #14
   14464:	beq	14480 <error@@Base+0x15a0>
   14468:	ldr	r0, [sp, #16]
   1446c:	cmp	r0, #12
   14470:	beq	14480 <error@@Base+0x15a0>
   14474:	ldr	r0, [sp, #16]
   14478:	cmp	r0, #10
   1447c:	bne	14490 <error@@Base+0x15b0>
   14480:	ldr	r0, [sp, #12]
   14484:	cmp	r0, #15
   14488:	bne	14490 <error@@Base+0x15b0>
   1448c:	b	141d4 <error@@Base+0x12f4>
   14490:	ldr	r0, [sp, #16]
   14494:	cmp	r0, #15
   14498:	bne	144d0 <error@@Base+0x15f0>
   1449c:	ldr	r0, [sp, #12]
   144a0:	cmp	r0, #14
   144a4:	beq	144c0 <error@@Base+0x15e0>
   144a8:	ldr	r0, [sp, #12]
   144ac:	cmp	r0, #12
   144b0:	beq	144c0 <error@@Base+0x15e0>
   144b4:	ldr	r0, [sp, #12]
   144b8:	cmp	r0, #10
   144bc:	bne	144d0 <error@@Base+0x15f0>
   144c0:	ldr	r0, [sp, #8]
   144c4:	cmp	r0, #15
   144c8:	bne	144d0 <error@@Base+0x15f0>
   144cc:	b	141d4 <error@@Base+0x12f4>
   144d0:	ldr	r0, [sp, #16]
   144d4:	cmp	r0, #7
   144d8:	bne	144ec <error@@Base+0x160c>
   144dc:	ldr	r0, [sp, #12]
   144e0:	cmp	r0, #7
   144e4:	bne	144ec <error@@Base+0x160c>
   144e8:	b	141d4 <error@@Base+0x12f4>
   144ec:	ldr	r0, [sp, #16]
   144f0:	cmp	r0, #9
   144f4:	beq	14528 <error@@Base+0x1648>
   144f8:	ldr	r0, [sp, #16]
   144fc:	cmp	r0, #8
   14500:	beq	14528 <error@@Base+0x1648>
   14504:	ldr	r0, [sp, #16]
   14508:	cmp	r0, #15
   1450c:	beq	14528 <error@@Base+0x1648>
   14510:	ldr	r0, [sp, #16]
   14514:	cmp	r0, #7
   14518:	beq	14528 <error@@Base+0x1648>
   1451c:	ldr	r0, [sp, #16]
   14520:	cmp	r0, #16
   14524:	bne	14538 <error@@Base+0x1658>
   14528:	ldr	r0, [sp, #12]
   1452c:	cmp	r0, #16
   14530:	bne	14538 <error@@Base+0x1658>
   14534:	b	141d4 <error@@Base+0x12f4>
   14538:	ldr	r0, [sp, #16]
   1453c:	cmp	r0, #16
   14540:	bne	14584 <error@@Base+0x16a4>
   14544:	ldr	r0, [sp, #12]
   14548:	cmp	r0, #9
   1454c:	beq	14580 <error@@Base+0x16a0>
   14550:	ldr	r0, [sp, #12]
   14554:	cmp	r0, #8
   14558:	beq	14580 <error@@Base+0x16a0>
   1455c:	ldr	r0, [sp, #12]
   14560:	cmp	r0, #15
   14564:	beq	14580 <error@@Base+0x16a0>
   14568:	ldr	r0, [sp, #12]
   1456c:	cmp	r0, #7
   14570:	beq	14580 <error@@Base+0x16a0>
   14574:	ldr	r0, [sp, #12]
   14578:	cmp	r0, #16
   1457c:	bne	14584 <error@@Base+0x16a4>
   14580:	b	141d4 <error@@Base+0x12f4>
   14584:	ldr	r0, [sp, #16]
   14588:	cmp	r0, #5
   1458c:	bne	145a0 <error@@Base+0x16c0>
   14590:	ldr	r0, [sp, #12]
   14594:	cmp	r0, #5
   14598:	bne	145a0 <error@@Base+0x16c0>
   1459c:	b	141d4 <error@@Base+0x12f4>
   145a0:	b	145a4 <error@@Base+0x16c4>
   145a4:	ldr	r0, [sp, #20]
   145a8:	bl	14828 <error@@Base+0x1948>
   145ac:	str	r0, [fp, #-4]
   145b0:	ldr	r0, [fp, #-4]
   145b4:	mov	sp, fp
   145b8:	pop	{fp, pc}
   145bc:	push	{fp, lr}
   145c0:	mov	fp, sp
   145c4:	sub	sp, sp, #16
   145c8:	str	r0, [sp, #8]
   145cc:	ldr	r0, [sp, #8]
   145d0:	bl	10ac0 <utf8proc_get_property@plt>
   145d4:	str	r0, [sp, #4]
   145d8:	ldr	r0, [sp, #4]
   145dc:	ldrsh	r0, [r0]
   145e0:	sub	r1, r0, #1
   145e4:	cmp	r1, #12
   145e8:	str	r0, [sp]
   145ec:	bcc	14604 <error@@Base+0x1724>
   145f0:	b	145f4 <error@@Base+0x1714>
   145f4:	ldr	r0, [sp]
   145f8:	cmp	r0, #29
   145fc:	bne	14610 <error@@Base+0x1730>
   14600:	b	14604 <error@@Base+0x1724>
   14604:	movw	r0, #1
   14608:	strb	r0, [fp, #-1]
   1460c:	b	14618 <error@@Base+0x1738>
   14610:	movw	r0, #0
   14614:	strb	r0, [fp, #-1]
   14618:	ldrb	r0, [fp, #-1]
   1461c:	mov	sp, fp
   14620:	pop	{fp, pc}
   14624:	push	{fp, lr}
   14628:	mov	fp, sp
   1462c:	sub	sp, sp, #40	; 0x28
   14630:	str	r0, [fp, #-4]
   14634:	str	r1, [fp, #-8]
   14638:	str	r2, [fp, #-12]
   1463c:	ldr	r0, [fp, #-12]
   14640:	ldr	r0, [r0, #4]
   14644:	str	r0, [sp, #20]
   14648:	ldr	r0, [fp, #-8]
   1464c:	ldr	r1, [sp, #20]
   14650:	bl	14a50 <error@@Base+0x1b70>
   14654:	str	r0, [sp, #16]
   14658:	ldr	r0, [sp, #16]
   1465c:	add	r0, r0, #1
   14660:	bl	10b2c <malloc@plt>
   14664:	str	r0, [sp, #8]
   14668:	ldr	r0, [sp, #8]
   1466c:	ldr	r1, [fp, #-8]
   14670:	ldr	r2, [sp, #20]
   14674:	bl	14b44 <error@@Base+0x1c64>
   14678:	ldr	r0, [pc, #96]	; 146e0 <error@@Base+0x1800>
   1467c:	ldr	r0, [pc, r0]
   14680:	movw	r1, #1
   14684:	str	r0, [sp, #4]
   14688:	mov	r0, r1
   1468c:	movw	r1, #12
   14690:	ldr	r2, [sp, #4]
   14694:	blx	r2
   14698:	str	r0, [fp, #-16]
   1469c:	ldr	r0, [sp, #8]
   146a0:	bl	10ba4 <utf8proc_NFC@plt>
   146a4:	ldr	r1, [pc, #48]	; 146dc <error@@Base+0x17fc>
   146a8:	ldr	r1, [pc, r1]
   146ac:	ldr	r2, [fp, #-16]
   146b0:	str	r0, [r2, #8]
   146b4:	ldr	r0, [fp, #-4]
   146b8:	ldr	r2, [fp, #-16]
   146bc:	str	r1, [sp]
   146c0:	mov	r1, r2
   146c4:	ldr	r2, [sp]
   146c8:	blx	r2
   146cc:	ldr	r0, [sp, #8]
   146d0:	bl	10ab4 <free@plt>
   146d4:	mov	sp, fp
   146d8:	pop	{fp, pc}
   146dc:	andeq	r5, r1, r8, lsr sl
   146e0:			; <UNDEFINED> instruction: 0x00015abc
   146e4:	push	{fp, lr}
   146e8:	mov	fp, sp
   146ec:	sub	sp, sp, #8
   146f0:	str	r0, [sp, #4]
   146f4:	ldr	r0, [sp, #4]
   146f8:	ldr	r0, [r0, #8]
   146fc:	bl	10ab4 <free@plt>
   14700:	ldr	r0, [sp, #4]
   14704:	bl	10ab4 <free@plt>
   14708:	mov	sp, fp
   1470c:	pop	{fp, pc}
   14710:	push	{fp, lr}
   14714:	mov	fp, sp
   14718:	sub	sp, sp, #16
   1471c:	str	r0, [sp, #8]
   14720:	ldr	r0, [sp, #8]
   14724:	movw	r1, #0
   14728:	cmp	r0, r1
   1472c:	bne	1473c <error@@Base+0x185c>
   14730:	movw	r0, #0
   14734:	str	r0, [fp, #-4]
   14738:	b	147b0 <error@@Base+0x18d0>
   1473c:	b	14740 <error@@Base+0x1860>
   14740:	ldr	r0, [sp, #8]
   14744:	ldr	r0, [r0, #4]
   14748:	str	r0, [sp, #8]
   1474c:	ldr	r0, [sp, #8]
   14750:	movw	r1, #0
   14754:	cmp	r0, r1
   14758:	movw	r0, #0
   1475c:	str	r0, [sp, #4]
   14760:	beq	1479c <error@@Base+0x18bc>
   14764:	ldr	r0, [sp, #8]
   14768:	bl	147bc <error@@Base+0x18dc>
   1476c:	cmp	r0, #4
   14770:	movw	r0, #1
   14774:	str	r0, [sp]
   14778:	beq	14794 <error@@Base+0x18b4>
   1477c:	ldr	r0, [sp, #8]
   14780:	bl	147bc <error@@Base+0x18dc>
   14784:	cmp	r0, #6
   14788:	movw	r0, #0
   1478c:	moveq	r0, #1
   14790:	str	r0, [sp]
   14794:	ldr	r0, [sp]
   14798:	str	r0, [sp, #4]
   1479c:	ldr	r0, [sp, #4]
   147a0:	tst	r0, #1
   147a4:	bne	14740 <error@@Base+0x1860>
   147a8:	ldr	r0, [sp, #8]
   147ac:	str	r0, [fp, #-4]
   147b0:	ldr	r0, [fp, #-4]
   147b4:	mov	sp, fp
   147b8:	pop	{fp, pc}
   147bc:	push	{fp, lr}
   147c0:	mov	fp, sp
   147c4:	sub	sp, sp, #8
   147c8:	str	r0, [sp]
   147cc:	ldr	r0, [sp]
   147d0:	movw	r1, #0
   147d4:	cmp	r0, r1
   147d8:	bne	147e8 <error@@Base+0x1908>
   147dc:	movw	r0, #18
   147e0:	str	r0, [sp, #4]
   147e4:	b	147f8 <error@@Base+0x1918>
   147e8:	ldr	r0, [sp]
   147ec:	ldr	r0, [r0, #12]
   147f0:	bl	148e4 <error@@Base+0x1a04>
   147f4:	str	r0, [sp, #4]
   147f8:	ldr	r0, [sp, #4]
   147fc:	mov	sp, fp
   14800:	pop	{fp, pc}
   14804:	push	{fp, lr}
   14808:	mov	fp, sp
   1480c:	sub	sp, sp, #8
   14810:	str	r0, [sp, #4]
   14814:	ldr	r0, [sp, #4]
   14818:	bl	14710 <error@@Base+0x1830>
   1481c:	bl	14710 <error@@Base+0x1830>
   14820:	mov	sp, fp
   14824:	pop	{fp, pc}
   14828:	push	{fp, lr}
   1482c:	mov	fp, sp
   14830:	sub	sp, sp, #16
   14834:	str	r0, [sp, #8]
   14838:	ldr	r0, [sp, #8]
   1483c:	movw	r1, #0
   14840:	cmp	r0, r1
   14844:	bne	14854 <error@@Base+0x1974>
   14848:	movw	r0, #0
   1484c:	str	r0, [fp, #-4]
   14850:	b	148d8 <error@@Base+0x19f8>
   14854:	b	14858 <error@@Base+0x1978>
   14858:	ldr	r0, [sp, #8]
   1485c:	ldr	r0, [r0, #4]
   14860:	movw	r1, #0
   14864:	cmp	r0, r1
   14868:	movw	r0, #0
   1486c:	str	r0, [sp, #4]
   14870:	beq	148b4 <error@@Base+0x19d4>
   14874:	ldr	r0, [sp, #8]
   14878:	ldr	r0, [r0, #4]
   1487c:	bl	147bc <error@@Base+0x18dc>
   14880:	cmp	r0, #4
   14884:	movw	r0, #1
   14888:	str	r0, [sp]
   1488c:	beq	148ac <error@@Base+0x19cc>
   14890:	ldr	r0, [sp, #8]
   14894:	ldr	r0, [r0, #4]
   14898:	bl	147bc <error@@Base+0x18dc>
   1489c:	cmp	r0, #6
   148a0:	movw	r0, #0
   148a4:	moveq	r0, #1
   148a8:	str	r0, [sp]
   148ac:	ldr	r0, [sp]
   148b0:	str	r0, [sp, #4]
   148b4:	ldr	r0, [sp, #4]
   148b8:	tst	r0, #1
   148bc:	beq	148d0 <error@@Base+0x19f0>
   148c0:	ldr	r0, [sp, #8]
   148c4:	ldr	r0, [r0, #4]
   148c8:	str	r0, [sp, #8]
   148cc:	b	14858 <error@@Base+0x1978>
   148d0:	ldr	r0, [sp, #8]
   148d4:	str	r0, [fp, #-4]
   148d8:	ldr	r0, [fp, #-4]
   148dc:	mov	sp, fp
   148e0:	pop	{fp, pc}
   148e4:	push	{fp, lr}
   148e8:	mov	fp, sp
   148ec:	sub	sp, sp, #8
   148f0:	str	r0, [sp, #4]
   148f4:	movw	r0, #1093	; 0x445
   148f8:	str	r0, [sp]
   148fc:	ldr	r0, [sp, #4]
   14900:	movw	r1, #0
   14904:	movw	r2, #1092	; 0x444
   14908:	bl	14914 <error@@Base+0x1a34>
   1490c:	mov	sp, fp
   14910:	pop	{fp, pc}
   14914:	push	{fp, lr}
   14918:	mov	fp, sp
   1491c:	sub	sp, sp, #24
   14920:	str	r0, [fp, #-8]
   14924:	str	r1, [sp, #12]
   14928:	str	r2, [sp, #8]
   1492c:	ldr	r0, [sp, #8]
   14930:	ldr	r1, [sp, #12]
   14934:	cmp	r0, r1
   14938:	bcs	14948 <error@@Base+0x1a68>
   1493c:	movw	r0, #0
   14940:	str	r0, [fp, #-4]
   14944:	b	14a34 <error@@Base+0x1b54>
   14948:	ldr	r0, [pc, #240]	; 14a40 <error@@Base+0x1b60>
   1494c:	add	r0, pc, r0
   14950:	ldr	r1, [sp, #12]
   14954:	ldr	r2, [sp, #8]
   14958:	sub	r2, r2, r1
   1495c:	lsr	r2, r2, #1
   14960:	add	r1, r1, r2
   14964:	str	r1, [sp, #4]
   14968:	ldr	r1, [sp, #4]
   1496c:	movw	r2, #12
   14970:	mul	r1, r1, r2
   14974:	add	r0, r0, r1
   14978:	str	r0, [sp]
   1497c:	ldr	r0, [fp, #-8]
   14980:	ldr	r1, [sp]
   14984:	ldr	r1, [r1]
   14988:	cmp	r0, r1
   1498c:	bcs	149ac <error@@Base+0x1acc>
   14990:	ldr	r0, [fp, #-8]
   14994:	ldr	r1, [sp, #12]
   14998:	ldr	r2, [sp, #4]
   1499c:	sub	r2, r2, #1
   149a0:	bl	14914 <error@@Base+0x1a34>
   149a4:	str	r0, [fp, #-4]
   149a8:	b	14a34 <error@@Base+0x1b54>
   149ac:	ldr	r0, [fp, #-8]
   149b0:	ldr	r1, [sp]
   149b4:	ldr	r1, [r1, #4]
   149b8:	cmp	r0, r1
   149bc:	bls	149dc <error@@Base+0x1afc>
   149c0:	ldr	r0, [fp, #-8]
   149c4:	ldr	r1, [sp, #4]
   149c8:	add	r1, r1, #1
   149cc:	ldr	r2, [sp, #8]
   149d0:	bl	14914 <error@@Base+0x1a34>
   149d4:	str	r0, [fp, #-4]
   149d8:	b	14a34 <error@@Base+0x1b54>
   149dc:	ldr	r0, [fp, #-8]
   149e0:	ldr	r1, [sp]
   149e4:	ldr	r1, [r1]
   149e8:	cmp	r0, r1
   149ec:	bcc	14a08 <error@@Base+0x1b28>
   149f0:	ldr	r0, [fp, #-8]
   149f4:	ldr	r1, [sp]
   149f8:	ldr	r1, [r1, #4]
   149fc:	cmp	r0, r1
   14a00:	bhi	14a08 <error@@Base+0x1b28>
   14a04:	b	14a28 <error@@Base+0x1b48>
   14a08:	ldr	r0, [pc, #52]	; 14a44 <error@@Base+0x1b64>
   14a0c:	add	r0, pc, r0
   14a10:	ldr	r1, [pc, #48]	; 14a48 <error@@Base+0x1b68>
   14a14:	add	r1, pc, r1
   14a18:	ldr	r2, [pc, #44]	; 14a4c <error@@Base+0x1b6c>
   14a1c:	add	r3, pc, r2
   14a20:	movw	r2, #63	; 0x3f
   14a24:	bl	10c10 <__assert_fail@plt>
   14a28:	ldr	r0, [sp]
   14a2c:	ldr	r0, [r0, #8]
   14a30:	str	r0, [fp, #-4]
   14a34:	ldr	r0, [fp, #-4]
   14a38:	mov	sp, fp
   14a3c:	pop	{fp, pc}
   14a40:	andeq	r1, r0, ip, lsr #12
   14a44:	andeq	r4, r0, r8, lsr #17
   14a48:	ldrdeq	r4, [r0], -r9
   14a4c:	ldrdeq	r4, [r0], -r8
   14a50:	push	{fp, lr}
   14a54:	mov	fp, sp
   14a58:	sub	sp, sp, #24
   14a5c:	str	r0, [fp, #-4]
   14a60:	str	r1, [fp, #-8]
   14a64:	movw	r0, #0
   14a68:	str	r0, [sp, #8]
   14a6c:	str	r0, [sp, #4]
   14a70:	ldr	r0, [fp, #-4]
   14a74:	str	r0, [sp, #12]
   14a78:	ldr	r0, [sp, #12]
   14a7c:	ldr	r1, [fp, #-8]
   14a80:	cmp	r0, r1
   14a84:	beq	14b20 <error@@Base+0x1c40>
   14a88:	ldr	r0, [sp, #12]
   14a8c:	movw	r1, #0
   14a90:	cmp	r0, r1
   14a94:	beq	14a9c <error@@Base+0x1bbc>
   14a98:	b	14abc <error@@Base+0x1bdc>
   14a9c:	ldr	r0, [pc, #136]	; 14b2c <error@@Base+0x1c4c>
   14aa0:	add	r0, pc, r0
   14aa4:	ldr	r1, [pc, #132]	; 14b30 <error@@Base+0x1c50>
   14aa8:	add	r1, pc, r1
   14aac:	ldr	r2, [pc, #128]	; 14b34 <error@@Base+0x1c54>
   14ab0:	add	r3, pc, r2
   14ab4:	movw	r2, #249	; 0xf9
   14ab8:	bl	10c10 <__assert_fail@plt>
   14abc:	mov	r1, sp
   14ac0:	ldr	r0, [sp, #12]
   14ac4:	ldr	r0, [r0, #12]
   14ac8:	bl	10ad8 <utf8proc_encode_char@plt>
   14acc:	str	r0, [sp, #4]
   14ad0:	ldr	r0, [sp, #4]
   14ad4:	cmp	r0, #0
   14ad8:	bls	14ae0 <error@@Base+0x1c00>
   14adc:	b	14b00 <error@@Base+0x1c20>
   14ae0:	ldr	r0, [pc, #80]	; 14b38 <error@@Base+0x1c58>
   14ae4:	add	r0, pc, r0
   14ae8:	ldr	r1, [pc, #76]	; 14b3c <error@@Base+0x1c5c>
   14aec:	add	r1, pc, r1
   14af0:	ldr	r2, [pc, #72]	; 14b40 <error@@Base+0x1c60>
   14af4:	add	r3, pc, r2
   14af8:	movw	r2, #253	; 0xfd
   14afc:	bl	10c10 <__assert_fail@plt>
   14b00:	ldr	r0, [sp, #4]
   14b04:	ldr	r1, [sp, #8]
   14b08:	add	r0, r1, r0
   14b0c:	str	r0, [sp, #8]
   14b10:	ldr	r0, [sp, #12]
   14b14:	ldr	r0, [r0, #4]
   14b18:	str	r0, [sp, #12]
   14b1c:	b	14a78 <error@@Base+0x1b98>
   14b20:	ldr	r0, [sp, #8]
   14b24:	mov	sp, fp
   14b28:	pop	{fp, pc}
   14b2c:	andeq	r4, r0, r6, ror r8
   14b30:	andeq	r4, r0, r5, asr #16
   14b34:	andeq	r4, r0, r6, ror r8
   14b38:	andeq	r4, r0, ip, asr r8
   14b3c:	andeq	r4, r0, r1, lsl #16
   14b40:	andeq	r4, r0, r2, lsr r8
   14b44:	push	{fp, lr}
   14b48:	mov	fp, sp
   14b4c:	sub	sp, sp, #24
   14b50:	str	r0, [fp, #-4]
   14b54:	str	r1, [fp, #-8]
   14b58:	str	r2, [sp, #12]
   14b5c:	movw	r0, #0
   14b60:	str	r0, [sp, #4]
   14b64:	ldr	r0, [fp, #-8]
   14b68:	str	r0, [sp, #8]
   14b6c:	ldr	r0, [sp, #8]
   14b70:	ldr	r1, [sp, #12]
   14b74:	cmp	r0, r1
   14b78:	beq	14be4 <error@@Base+0x1d04>
   14b7c:	ldr	r0, [sp, #8]
   14b80:	movw	r1, #0
   14b84:	cmp	r0, r1
   14b88:	beq	14b90 <error@@Base+0x1cb0>
   14b8c:	b	14bb0 <error@@Base+0x1cd0>
   14b90:	ldr	r0, [pc, #104]	; 14c00 <error@@Base+0x1d20>
   14b94:	add	r0, pc, r0
   14b98:	ldr	r1, [pc, #100]	; 14c04 <error@@Base+0x1d24>
   14b9c:	add	r1, pc, r1
   14ba0:	ldr	r2, [pc, #96]	; 14c08 <error@@Base+0x1d28>
   14ba4:	add	r3, pc, r2
   14ba8:	movw	r2, #269	; 0x10d
   14bac:	bl	10c10 <__assert_fail@plt>
   14bb0:	ldr	r0, [sp, #8]
   14bb4:	ldr	r0, [r0, #12]
   14bb8:	ldr	r1, [fp, #-4]
   14bbc:	ldr	r2, [sp, #4]
   14bc0:	add	r1, r1, r2
   14bc4:	bl	10ad8 <utf8proc_encode_char@plt>
   14bc8:	ldr	r1, [sp, #4]
   14bcc:	add	r0, r1, r0
   14bd0:	str	r0, [sp, #4]
   14bd4:	ldr	r0, [sp, #8]
   14bd8:	ldr	r0, [r0, #4]
   14bdc:	str	r0, [sp, #8]
   14be0:	b	14b6c <error@@Base+0x1c8c>
   14be4:	ldr	r0, [fp, #-4]
   14be8:	ldr	r1, [sp, #4]
   14bec:	add	r0, r0, r1
   14bf0:	movw	r1, #0
   14bf4:	strb	r1, [r0]
   14bf8:	mov	sp, fp
   14bfc:	pop	{fp, pc}
   14c00:	andeq	r4, r0, r2, lsl #15
   14c04:	andeq	r4, r0, r1, asr r7
   14c08:	andeq	r4, r0, pc, lsr #15
   14c0c:	push	{fp, lr}
   14c10:	mov	fp, sp
   14c14:	sub	sp, sp, #24
   14c18:	ldr	r3, [pc, #96]	; 14c80 <error@@Base+0x1da0>
   14c1c:	ldr	r3, [pc, r3]
   14c20:	str	r0, [fp, #-4]
   14c24:	strb	r1, [fp, #-5]
   14c28:	str	r2, [sp, #12]
   14c2c:	movw	r0, #1
   14c30:	movw	r1, #16
   14c34:	blx	r3
   14c38:	ldr	r1, [pc, #60]	; 14c7c <error@@Base+0x1d9c>
   14c3c:	ldr	r1, [pc, r1]
   14c40:	str	r0, [sp, #8]
   14c44:	ldrb	r0, [fp, #-5]
   14c48:	ldr	r2, [sp, #8]
   14c4c:	strb	r0, [r2, #8]
   14c50:	ldr	r0, [sp, #12]
   14c54:	ldr	r2, [sp, #8]
   14c58:	str	r0, [r2, #12]
   14c5c:	ldr	r0, [fp, #-4]
   14c60:	ldr	r2, [sp, #8]
   14c64:	str	r1, [sp, #4]
   14c68:	mov	r1, r2
   14c6c:	ldr	r2, [sp, #4]
   14c70:	blx	r2
   14c74:	mov	sp, fp
   14c78:	pop	{fp, pc}
   14c7c:	andeq	r5, r1, r4, lsr #9
   14c80:	andeq	r5, r1, ip, lsl r5
   14c84:	push	{fp, lr}
   14c88:	mov	fp, sp
   14c8c:	sub	sp, sp, #64	; 0x40
   14c90:	str	r0, [fp, #-4]
   14c94:	str	r1, [fp, #-8]
   14c98:	str	r2, [fp, #-12]
   14c9c:	ldr	r0, [fp, #-12]
   14ca0:	ldrb	r0, [r0]
   14ca4:	cmp	r0, #0
   14ca8:	beq	14cd8 <error@@Base+0x1df8>
   14cac:	ldr	r0, [fp, #-8]
   14cb0:	movw	r1, #0
   14cb4:	cmp	r0, r1
   14cb8:	bne	14cd8 <error@@Base+0x1df8>
   14cbc:	ldr	r0, [pc, #404]	; 14e58 <error@@Base+0x1f78>
   14cc0:	add	r0, pc, r0
   14cc4:	ldr	r1, [pc, #400]	; 14e5c <error@@Base+0x1f7c>
   14cc8:	add	r1, pc, r1
   14ccc:	ldr	r2, [pc, #396]	; 14e60 <error@@Base+0x1f80>
   14cd0:	ldr	r2, [pc, r2]
   14cd4:	blx	r2
   14cd8:	ldr	r0, [pc, #388]	; 14e64 <error@@Base+0x1f84>
   14cdc:	add	r1, pc, r0
   14ce0:	ldr	r0, [pc, #384]	; 14e68 <error@@Base+0x1f88>
   14ce4:	ldr	r0, [pc, r0]
   14ce8:	ldr	r2, [fp, #-4]
   14cec:	ldr	r2, [r2, #4]
   14cf0:	str	r2, [fp, #-16]
   14cf4:	ldr	r2, [fp, #-8]
   14cf8:	str	r0, [fp, #-24]	; 0xffffffe8
   14cfc:	mov	r0, r2
   14d00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14d04:	blx	r2
   14d08:	str	r0, [fp, #-20]	; 0xffffffec
   14d0c:	ldr	r0, [fp, #-12]
   14d10:	ldrsb	r0, [r0]
   14d14:	cmp	r0, #0
   14d18:	beq	14d2c <error@@Base+0x1e4c>
   14d1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14d20:	bl	14e70 <error@@Base+0x1f90>
   14d24:	ldr	r1, [fp, #-12]
   14d28:	strb	r0, [r1, #11]
   14d2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14d30:	ldr	r1, [fp, #-4]
   14d34:	ldr	r2, [fp, #-12]
   14d38:	ldrb	r2, [r2, #1]
   14d3c:	ldr	r3, [fp, #-12]
   14d40:	ldr	r3, [r3, #4]
   14d44:	cmp	r3, #0
   14d48:	str	r0, [fp, #-28]	; 0xffffffe4
   14d4c:	str	r1, [sp, #32]
   14d50:	str	r2, [sp, #28]
   14d54:	beq	14d68 <error@@Base+0x1e88>
   14d58:	ldr	r0, [fp, #-12]
   14d5c:	ldr	r0, [r0, #4]
   14d60:	str	r0, [sp, #24]
   14d64:	b	14d74 <error@@Base+0x1e94>
   14d68:	movw	r0, #94	; 0x5e
   14d6c:	str	r0, [sp, #24]
   14d70:	b	14d74 <error@@Base+0x1e94>
   14d74:	ldr	r0, [sp, #24]
   14d78:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14d7c:	str	r0, [sp, #20]
   14d80:	mov	r0, r1
   14d84:	ldr	r1, [sp, #32]
   14d88:	ldr	r2, [sp, #28]
   14d8c:	ldr	r3, [sp, #20]
   14d90:	bl	14f68 <error@@Base+0x2088>
   14d94:	ldr	r0, [pc, #208]	; 14e6c <error@@Base+0x1f8c>
   14d98:	ldr	r0, [pc, r0]
   14d9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14da0:	str	r0, [sp, #16]
   14da4:	mov	r0, r1
   14da8:	ldr	r1, [sp, #16]
   14dac:	blx	r1
   14db0:	ldr	r0, [fp, #-12]
   14db4:	ldrsb	r0, [r0, #9]
   14db8:	cmp	r0, #0
   14dbc:	beq	14e0c <error@@Base+0x1f2c>
   14dc0:	ldr	r0, [fp, #-4]
   14dc4:	ldr	r1, [fp, #-16]
   14dc8:	movw	r2, #0
   14dcc:	cmp	r1, r2
   14dd0:	str	r0, [sp, #12]
   14dd4:	beq	14de8 <error@@Base+0x1f08>
   14dd8:	ldr	r0, [fp, #-16]
   14ddc:	ldr	r0, [r0, #4]
   14de0:	str	r0, [sp, #8]
   14de4:	b	14df4 <error@@Base+0x1f14>
   14de8:	ldr	r0, [fp, #-4]
   14dec:	ldr	r0, [r0]
   14df0:	str	r0, [sp, #8]
   14df4:	ldr	r0, [sp, #8]
   14df8:	ldr	r1, [sp, #12]
   14dfc:	str	r0, [sp, #4]
   14e00:	mov	r0, r1
   14e04:	ldr	r1, [sp, #4]
   14e08:	bl	150e4 <error@@Base+0x2204>
   14e0c:	ldr	r0, [fp, #-12]
   14e10:	ldrsb	r0, [r0, #10]
   14e14:	cmp	r0, #0
   14e18:	beq	14e50 <error@@Base+0x1f70>
   14e1c:	ldr	r0, [fp, #-16]
   14e20:	movw	r1, #0
   14e24:	cmp	r0, r1
   14e28:	beq	14e3c <error@@Base+0x1f5c>
   14e2c:	ldr	r0, [fp, #-16]
   14e30:	ldr	r0, [r0, #4]
   14e34:	str	r0, [sp]
   14e38:	b	14e48 <error@@Base+0x1f68>
   14e3c:	ldr	r0, [fp, #-4]
   14e40:	ldr	r0, [r0]
   14e44:	str	r0, [sp]
   14e48:	ldr	r0, [sp]
   14e4c:	bl	1528c <error@@Base+0x23ac>
   14e50:	mov	sp, fp
   14e54:	pop	{fp, pc}
   14e58:	andeq	r4, r0, fp, lsr #13
   14e5c:			; <UNDEFINED> instruction: 0x000046b3
   14e60:	andeq	r5, r1, r4, ror r4
   14e64:	andeq	r1, r0, r4, lsr #32
   14e68:	ldrdeq	r5, [r1], -r4
   14e6c:	strdeq	r5, [r1], -r0
   14e70:	push	{fp, lr}
   14e74:	mov	fp, sp
   14e78:	sub	sp, sp, #120	; 0x78
   14e7c:	add	r1, sp, #12
   14e80:	str	r0, [fp, #-8]
   14e84:	movw	r0, #0
   14e88:	strh	r0, [sp, #10]
   14e8c:	ldr	r2, [fp, #-8]
   14e90:	mov	r0, r1
   14e94:	movw	r1, #99	; 0x63
   14e98:	bl	10acc <fgets@plt>
   14e9c:	movw	r1, #0
   14ea0:	cmp	r0, r1
   14ea4:	beq	14f44 <error@@Base+0x2064>
   14ea8:	ldr	r0, [pc, #176]	; 14f60 <error@@Base+0x2080>
   14eac:	add	r1, pc, r0
   14eb0:	add	r0, sp, #12
   14eb4:	movw	r2, #51	; 0x33
   14eb8:	bl	10bec <strncmp@plt>
   14ebc:	cmp	r0, #0
   14ec0:	bne	14f44 <error@@Base+0x2064>
   14ec4:	b	14ec8 <error@@Base+0x1fe8>
   14ec8:	ldrsh	r0, [sp, #10]
   14ecc:	cmp	r0, #2
   14ed0:	movw	r0, #0
   14ed4:	str	r0, [sp, #4]
   14ed8:	bge	14f00 <error@@Base+0x2020>
   14edc:	add	r0, sp, #12
   14ee0:	ldr	r2, [fp, #-8]
   14ee4:	movw	r1, #99	; 0x63
   14ee8:	bl	10acc <fgets@plt>
   14eec:	movw	r1, #0
   14ef0:	cmp	r0, r1
   14ef4:	movw	r0, #0
   14ef8:	movne	r0, #1
   14efc:	str	r0, [sp, #4]
   14f00:	ldr	r0, [sp, #4]
   14f04:	tst	r0, #1
   14f08:	beq	14f38 <error@@Base+0x2058>
   14f0c:	add	r0, sp, #12
   14f10:	ldr	r1, [pc, #76]	; 14f64 <error@@Base+0x2084>
   14f14:	add	r1, pc, r1
   14f18:	bl	10a9c <strcmp@plt>
   14f1c:	cmp	r0, #0
   14f20:	bne	14f34 <error@@Base+0x2054>
   14f24:	ldrh	r0, [sp, #10]
   14f28:	movw	r1, #1
   14f2c:	add	r0, r0, r1
   14f30:	strh	r0, [sp, #10]
   14f34:	b	14ec8 <error@@Base+0x1fe8>
   14f38:	movw	r0, #1
   14f3c:	strb	r0, [fp, #-1]
   14f40:	b	14f54 <error@@Base+0x2074>
   14f44:	ldr	r0, [fp, #-8]
   14f48:	bl	10af0 <rewind@plt>
   14f4c:	movw	r0, #0
   14f50:	strb	r0, [fp, #-1]
   14f54:	ldrb	r0, [fp, #-1]
   14f58:	mov	sp, fp
   14f5c:	pop	{fp, pc}
   14f60:	andeq	r4, r0, r3, lsl #10
   14f64:	ldrdeq	r4, [r0], -r3
   14f68:	push	{fp, lr}
   14f6c:	mov	fp, sp
   14f70:	sub	sp, sp, #48	; 0x30
   14f74:	str	r0, [fp, #-4]
   14f78:	str	r1, [fp, #-8]
   14f7c:	strb	r2, [fp, #-9]
   14f80:	str	r3, [fp, #-16]
   14f84:	movw	r0, #0
   14f88:	strb	r0, [fp, #-17]	; 0xffffffef
   14f8c:	ldr	r0, [fp, #-4]
   14f90:	bl	10c04 <getc@plt>
   14f94:	str	r0, [sp, #20]
   14f98:	ldr	r0, [sp, #20]
   14f9c:	cmn	r0, #1
   14fa0:	beq	150c4 <error@@Base+0x21e4>
   14fa4:	ldr	r0, [pc, #288]	; 150cc <error@@Base+0x21ec>
   14fa8:	ldr	r0, [pc, r0]
   14fac:	ldr	r1, [sp, #20]
   14fb0:	add	r0, r0, r1
   14fb4:	ldrsb	r0, [r0]
   14fb8:	str	r0, [sp, #8]
   14fbc:	ldr	r0, [sp, #8]
   14fc0:	cmp	r0, #1
   14fc4:	bge	14fdc <error@@Base+0x20fc>
   14fc8:	ldr	r0, [pc, #268]	; 150dc <error@@Base+0x21fc>
   14fcc:	add	r0, pc, r0
   14fd0:	ldr	r1, [pc, #264]	; 150e0 <error@@Base+0x2200>
   14fd4:	ldr	r1, [pc, r1]
   14fd8:	blx	r1
   14fdc:	ldr	r0, [sp, #20]
   14fe0:	strb	r0, [fp, #-21]	; 0xffffffeb
   14fe4:	ldr	r0, [sp, #8]
   14fe8:	cmp	r0, #1
   14fec:	ble	1503c <error@@Base+0x215c>
   14ff0:	sub	r0, fp, #21
   14ff4:	add	r0, r0, #1
   14ff8:	ldr	r1, [sp, #8]
   14ffc:	sub	r2, r1, #1
   15000:	ldr	r3, [fp, #-4]
   15004:	movw	r1, #1
   15008:	bl	10b14 <fread@plt>
   1500c:	str	r0, [sp, #16]
   15010:	ldr	r0, [sp, #16]
   15014:	ldr	r1, [sp, #8]
   15018:	sub	r1, r1, #1
   1501c:	cmp	r0, r1
   15020:	beq	15038 <error@@Base+0x2158>
   15024:	ldr	r0, [pc, #168]	; 150d4 <error@@Base+0x21f4>
   15028:	add	r0, pc, r0
   1502c:	ldr	r1, [pc, #164]	; 150d8 <error@@Base+0x21f8>
   15030:	ldr	r1, [pc, r1]
   15034:	blx	r1
   15038:	b	1503c <error@@Base+0x215c>
   1503c:	sub	r0, fp, #21
   15040:	movw	r1, #4
   15044:	add	r2, sp, #4
   15048:	bl	10b20 <utf8proc_iterate@plt>
   1504c:	str	r0, [sp, #12]
   15050:	ldr	r0, [sp, #12]
   15054:	ldr	r1, [sp, #8]
   15058:	cmp	r0, r1
   1505c:	beq	15074 <error@@Base+0x2194>
   15060:	ldr	r0, [sp, #12]
   15064:	bl	10bd4 <utf8proc_errmsg@plt>
   15068:	ldr	r1, [pc, #96]	; 150d0 <error@@Base+0x21f0>
   1506c:	ldr	r1, [pc, r1]
   15070:	blx	r1
   15074:	ldrb	r0, [fp, #-9]
   15078:	cmp	r0, #0
   1507c:	beq	1509c <error@@Base+0x21bc>
   15080:	ldr	r0, [sp, #4]
   15084:	ldr	r1, [fp, #-16]
   15088:	cmp	r0, r1
   1508c:	bne	1509c <error@@Base+0x21bc>
   15090:	movw	r0, #1
   15094:	strb	r0, [fp, #-17]	; 0xffffffef
   15098:	b	150b4 <error@@Base+0x21d4>
   1509c:	ldr	r0, [fp, #-8]
   150a0:	ldrb	r1, [fp, #-17]	; 0xffffffef
   150a4:	ldr	r2, [sp, #4]
   150a8:	bl	14c0c <error@@Base+0x1d2c>
   150ac:	movw	r0, #0
   150b0:	strb	r0, [fp, #-17]	; 0xffffffef
   150b4:	ldr	r0, [fp, #-4]
   150b8:	bl	10c04 <getc@plt>
   150bc:	str	r0, [sp, #20]
   150c0:	b	14f98 <error@@Base+0x20b8>
   150c4:	mov	sp, fp
   150c8:	pop	{fp, pc}
   150cc:	andeq	r5, r1, ip, asr r1
   150d0:	andeq	r5, r1, r0, asr #32
   150d4:	andeq	r4, r0, pc, lsl #8
   150d8:	andeq	r5, r1, ip, ror r0
   150dc:	andeq	r4, r0, r3, asr r4
   150e0:	ldrdeq	r5, [r1], -r8
   150e4:	push	{fp, lr}
   150e8:	mov	fp, sp
   150ec:	sub	sp, sp, #24
   150f0:	str	r0, [fp, #-4]
   150f4:	str	r1, [fp, #-8]
   150f8:	movw	r0, #0
   150fc:	strb	r0, [fp, #-9]
   15100:	ldr	r0, [fp, #-8]
   15104:	str	r0, [sp, #8]
   15108:	ldr	r0, [sp, #8]
   1510c:	movw	r1, #0
   15110:	cmp	r0, r1
   15114:	beq	15150 <error@@Base+0x2270>
   15118:	ldr	r0, [sp, #8]
   1511c:	ldr	r0, [r0, #12]
   15120:	bl	15770 <error@@Base+0x2890>
   15124:	sxtb	r0, r0
   15128:	cmp	r0, #0
   1512c:	beq	1513c <error@@Base+0x225c>
   15130:	ldr	r0, [sp, #8]
   15134:	movw	r1, #32
   15138:	str	r1, [r0, #12]
   1513c:	b	15140 <error@@Base+0x2260>
   15140:	ldr	r0, [sp, #8]
   15144:	ldr	r0, [r0, #4]
   15148:	str	r0, [sp, #8]
   1514c:	b	15108 <error@@Base+0x2228>
   15150:	ldr	r0, [fp, #-8]
   15154:	str	r0, [sp, #8]
   15158:	ldr	r0, [sp, #8]
   1515c:	movw	r1, #0
   15160:	cmp	r0, r1
   15164:	beq	15280 <error@@Base+0x23a0>
   15168:	ldr	r0, [sp, #8]
   1516c:	ldr	r0, [r0, #4]
   15170:	str	r0, [sp, #4]
   15174:	ldr	r0, [sp, #8]
   15178:	ldr	r0, [r0, #12]
   1517c:	cmp	r0, #32
   15180:	bne	151c0 <error@@Base+0x22e0>
   15184:	ldrsb	r0, [fp, #-9]
   15188:	cmp	r0, #0
   1518c:	beq	151dc <error@@Base+0x22fc>
   15190:	ldr	r0, [sp, #4]
   15194:	movw	r1, #0
   15198:	cmp	r0, r1
   1519c:	beq	151dc <error@@Base+0x22fc>
   151a0:	ldr	r0, [sp, #4]
   151a4:	ldr	r0, [r0, #12]
   151a8:	cmp	r0, #32
   151ac:	beq	151dc <error@@Base+0x22fc>
   151b0:	ldr	r0, [sp, #4]
   151b4:	ldr	r0, [r0, #12]
   151b8:	cmp	r0, #10
   151bc:	beq	151dc <error@@Base+0x22fc>
   151c0:	ldr	r0, [sp, #8]
   151c4:	ldr	r0, [r0, #12]
   151c8:	cmp	r0, #10
   151cc:	bne	15250 <error@@Base+0x2370>
   151d0:	ldrsb	r0, [fp, #-9]
   151d4:	cmp	r0, #0
   151d8:	bne	15250 <error@@Base+0x2370>
   151dc:	ldrb	r0, [fp, #-9]
   151e0:	cmp	r0, #0
   151e4:	beq	15220 <error@@Base+0x2340>
   151e8:	ldr	r0, [sp, #4]
   151ec:	movw	r1, #0
   151f0:	cmp	r0, r1
   151f4:	beq	15220 <error@@Base+0x2340>
   151f8:	ldr	r0, [sp, #4]
   151fc:	ldr	r0, [r0, #12]
   15200:	cmp	r0, #32
   15204:	bne	15220 <error@@Base+0x2340>
   15208:	ldr	r0, [sp, #8]
   1520c:	ldrb	r0, [r0, #8]
   15210:	ldr	r1, [sp, #4]
   15214:	ldrb	r2, [r1, #8]
   15218:	orr	r0, r2, r0
   1521c:	strb	r0, [r1, #8]
   15220:	ldr	r0, [pc, #96]	; 15288 <error@@Base+0x23a8>
   15224:	ldr	r0, [pc, r0]
   15228:	ldr	r1, [fp, #-4]
   1522c:	ldr	r2, [sp, #8]
   15230:	str	r0, [sp]
   15234:	mov	r0, r1
   15238:	mov	r1, r2
   1523c:	ldr	r2, [sp]
   15240:	blx	r2
   15244:	ldr	r0, [sp, #8]
   15248:	bl	10ab4 <free@plt>
   1524c:	b	15274 <error@@Base+0x2394>
   15250:	ldr	r0, [sp, #8]
   15254:	ldr	r0, [r0, #12]
   15258:	cmp	r0, #10
   1525c:	movw	r0, #0
   15260:	moveq	r0, #1
   15264:	tst	r0, #1
   15268:	movw	r0, #0
   1526c:	moveq	r0, #1
   15270:	strb	r0, [fp, #-9]
   15274:	ldr	r0, [sp, #4]
   15278:	str	r0, [sp, #8]
   1527c:	b	15158 <error@@Base+0x2278>
   15280:	mov	sp, fp
   15284:	pop	{fp, pc}
   15288:	andeq	r4, r1, r0, lsr pc
   1528c:	push	{fp, lr}
   15290:	mov	fp, sp
   15294:	sub	sp, sp, #8
   15298:	str	r0, [sp, #4]
   1529c:	ldr	r0, [sp, #4]
   152a0:	str	r0, [sp]
   152a4:	ldr	r0, [sp]
   152a8:	movw	r1, #0
   152ac:	cmp	r0, r1
   152b0:	beq	152d8 <error@@Base+0x23f8>
   152b4:	ldr	r0, [sp]
   152b8:	ldr	r0, [r0, #12]
   152bc:	bl	10afc <utf8proc_tolower@plt>
   152c0:	ldr	r1, [sp]
   152c4:	str	r0, [r1, #12]
   152c8:	ldr	r0, [sp]
   152cc:	ldr	r0, [r0, #4]
   152d0:	str	r0, [sp]
   152d4:	b	152a4 <error@@Base+0x23c4>
   152d8:	mov	sp, fp
   152dc:	pop	{fp, pc}
   152e0:	push	{fp, lr}
   152e4:	mov	fp, sp
   152e8:	sub	sp, sp, #16
   152ec:	str	r0, [fp, #-4]
   152f0:	str	r1, [sp, #8]
   152f4:	ldr	r0, [fp, #-4]
   152f8:	ldr	r1, [sp, #8]
   152fc:	bl	10ad8 <utf8proc_encode_char@plt>
   15300:	str	r0, [sp, #4]
   15304:	ldr	r0, [sp, #4]
   15308:	cmp	r0, #1
   1530c:	bge	15324 <error@@Base+0x2444>
   15310:	ldr	r0, [pc, #28]	; 15334 <error@@Base+0x2454>
   15314:	add	r0, pc, r0
   15318:	ldr	r1, [pc, #24]	; 15338 <error@@Base+0x2458>
   1531c:	ldr	r1, [pc, r1]
   15320:	blx	r1
   15324:	ldr	r0, [sp, #4]
   15328:	sxtb	r0, r0
   1532c:	mov	sp, fp
   15330:	pop	{fp, pc}
   15334:	andeq	r4, r0, r1, ror r0
   15338:	muleq	r1, r0, sp
   1533c:	push	{fp, lr}
   15340:	mov	fp, sp
   15344:	sub	sp, sp, #24
   15348:	strb	r0, [fp, #-1]
   1534c:	str	r1, [fp, #-8]
   15350:	str	r2, [sp, #12]
   15354:	strb	r3, [sp, #11]
   15358:	movw	r0, #0
   1535c:	strh	r0, [sp, #8]
   15360:	ldr	r0, [sp, #12]
   15364:	str	r0, [sp, #4]
   15368:	ldrsb	r0, [fp, #-1]
   1536c:	cmp	r0, #0
   15370:	beq	15390 <error@@Base+0x24b0>
   15374:	ldr	r1, [sp, #4]
   15378:	movw	r0, #94	; 0x5e
   1537c:	bl	152e0 <error@@Base+0x2400>
   15380:	sxtb	r0, r0
   15384:	ldrsh	r1, [sp, #8]
   15388:	add	r0, r1, r0
   1538c:	strh	r0, [sp, #8]
   15390:	ldr	r0, [fp, #-8]
   15394:	cmp	r0, #10
   15398:	bne	153dc <error@@Base+0x24fc>
   1539c:	ldr	r0, [pc, #304]	; 154d4 <error@@Base+0x25f4>
   153a0:	add	r0, pc, r0
   153a4:	ldr	r1, [pc, #300]	; 154d8 <error@@Base+0x25f8>
   153a8:	add	r1, pc, r1
   153ac:	ldr	r2, [sp, #12]
   153b0:	ldrsh	r3, [sp, #8]
   153b4:	add	r2, r2, r3
   153b8:	ldrb	r3, [sp, #11]
   153bc:	cmp	r3, #0
   153c0:	movw	r3, #0
   153c4:	movne	r3, #1
   153c8:	tst	r3, #1
   153cc:	movne	r1, r0
   153d0:	mov	r0, r2
   153d4:	bl	10bbc <sprintf@plt>
   153d8:	b	154c4 <error@@Base+0x25e4>
   153dc:	ldr	r0, [fp, #-8]
   153e0:	bl	154dc <error@@Base+0x25fc>
   153e4:	sxtb	r0, r0
   153e8:	cmp	r0, #0
   153ec:	beq	15474 <error@@Base+0x2594>
   153f0:	ldr	r0, [fp, #-8]
   153f4:	bl	1555c <error@@Base+0x267c>
   153f8:	sxtb	r0, r0
   153fc:	cmp	r0, #0
   15400:	beq	15428 <error@@Base+0x2548>
   15404:	ldr	r0, [sp, #4]
   15408:	ldrsh	r1, [sp, #8]
   1540c:	add	r1, r0, r1
   15410:	movw	r0, #9676	; 0x25cc
   15414:	bl	152e0 <error@@Base+0x2400>
   15418:	sxtb	r0, r0
   1541c:	ldrsh	r1, [sp, #8]
   15420:	add	r0, r1, r0
   15424:	strh	r0, [sp, #8]
   15428:	ldr	r0, [fp, #-8]
   1542c:	ldr	r1, [sp, #4]
   15430:	ldrsh	r2, [sp, #8]
   15434:	add	r1, r1, r2
   15438:	bl	152e0 <error@@Base+0x2400>
   1543c:	sxtb	r0, r0
   15440:	ldrsh	r1, [sp, #8]
   15444:	add	r0, r1, r0
   15448:	strh	r0, [sp, #8]
   1544c:	ldr	r0, [sp, #12]
   15450:	ldrh	r1, [sp, #8]
   15454:	movw	r2, #1
   15458:	add	r2, r1, r2
   1545c:	strh	r2, [sp, #8]
   15460:	sxth	r1, r1
   15464:	add	r0, r0, r1
   15468:	movw	r1, #0
   1546c:	strb	r1, [r0]
   15470:	b	154c0 <error@@Base+0x25e0>
   15474:	ldr	r0, [fp, #-8]
   15478:	cmp	r0, #256	; 0x100
   1547c:	bcs	154a0 <error@@Base+0x25c0>
   15480:	ldr	r0, [pc, #72]	; 154d0 <error@@Base+0x25f0>
   15484:	add	r1, pc, r0
   15488:	ldr	r0, [sp, #12]
   1548c:	ldrsh	r2, [sp, #8]
   15490:	add	r0, r0, r2
   15494:	ldr	r2, [fp, #-8]
   15498:	bl	10bbc <sprintf@plt>
   1549c:	b	154bc <error@@Base+0x25dc>
   154a0:	ldr	r0, [pc, #36]	; 154cc <error@@Base+0x25ec>
   154a4:	add	r1, pc, r0
   154a8:	ldr	r0, [sp, #12]
   154ac:	ldrsh	r2, [sp, #8]
   154b0:	add	r0, r0, r2
   154b4:	ldr	r2, [fp, #-8]
   154b8:	bl	10bbc <sprintf@plt>
   154bc:	b	154c0 <error@@Base+0x25e0>
   154c0:	b	154c4 <error@@Base+0x25e4>
   154c4:	mov	sp, fp
   154c8:	pop	{fp, pc}
   154cc:	andeq	r3, r0, r4, lsl #30
   154d0:	andeq	r3, r0, sp, lsl pc
   154d4:	strdeq	r3, [r0], -ip
   154d8:	andeq	r0, r0, r6, ror #20
   154dc:	push	{fp, lr}
   154e0:	mov	fp, sp
   154e4:	sub	sp, sp, #16
   154e8:	str	r0, [sp, #8]
   154ec:	ldr	r0, [sp, #8]
   154f0:	bl	10ac0 <utf8proc_get_property@plt>
   154f4:	str	r0, [sp, #4]
   154f8:	ldr	r0, [sp, #8]
   154fc:	cmp	r0, #32
   15500:	bne	15510 <error@@Base+0x2630>
   15504:	movw	r0, #1
   15508:	strb	r0, [fp, #-1]
   1550c:	b	15550 <error@@Base+0x2670>
   15510:	ldr	r0, [sp, #4]
   15514:	ldrsh	r0, [r0]
   15518:	sub	r1, r0, #1
   1551c:	cmp	r1, #22
   15520:	str	r0, [sp]
   15524:	bcc	1553c <error@@Base+0x265c>
   15528:	b	1552c <error@@Base+0x264c>
   1552c:	ldr	r0, [sp]
   15530:	cmp	r0, #29
   15534:	bne	15548 <error@@Base+0x2668>
   15538:	b	1553c <error@@Base+0x265c>
   1553c:	movw	r0, #1
   15540:	strb	r0, [fp, #-1]
   15544:	b	15550 <error@@Base+0x2670>
   15548:	movw	r0, #0
   1554c:	strb	r0, [fp, #-1]
   15550:	ldrb	r0, [fp, #-1]
   15554:	mov	sp, fp
   15558:	pop	{fp, pc}
   1555c:	push	{fp, lr}
   15560:	mov	fp, sp
   15564:	sub	sp, sp, #8
   15568:	str	r0, [sp]
   1556c:	ldr	r0, [sp]
   15570:	bl	10b68 <utf8proc_category@plt>
   15574:	sub	r0, r0, #6
   15578:	cmp	r0, #2
   1557c:	bhi	15590 <error@@Base+0x26b0>
   15580:	b	15584 <error@@Base+0x26a4>
   15584:	movw	r0, #1
   15588:	strb	r0, [fp, #-1]
   1558c:	b	15598 <error@@Base+0x26b8>
   15590:	movw	r0, #0
   15594:	strb	r0, [fp, #-1]
   15598:	ldrb	r0, [fp, #-1]
   1559c:	mov	sp, fp
   155a0:	pop	{fp, pc}
   155a4:	push	{fp, lr}
   155a8:	mov	fp, sp
   155ac:	sub	sp, sp, #48	; 0x30
   155b0:	ldr	r3, [pc, #252]	; 156b4 <error@@Base+0x27d4>
   155b4:	add	r3, pc, r3
   155b8:	ldr	ip, [pc, #248]	; 156b8 <error@@Base+0x27d8>
   155bc:	ldr	ip, [pc, ip]
   155c0:	str	r0, [fp, #-4]
   155c4:	str	r1, [fp, #-8]
   155c8:	str	r2, [fp, #-12]
   155cc:	ldr	r0, [fp, #-8]
   155d0:	mov	r1, r3
   155d4:	blx	ip
   155d8:	str	r0, [fp, #-16]
   155dc:	ldr	r0, [fp, #-12]
   155e0:	movw	r1, #0
   155e4:	cmp	r0, r1
   155e8:	beq	1563c <error@@Base+0x275c>
   155ec:	ldr	r0, [pc, #208]	; 156c4 <error@@Base+0x27e4>
   155f0:	add	r0, pc, r0
   155f4:	ldr	r1, [fp, #-16]
   155f8:	bl	10be0 <fputs@plt>
   155fc:	ldr	r1, [pc, #188]	; 156c0 <error@@Base+0x27e0>
   15600:	add	r1, pc, r1
   15604:	ldr	r2, [fp, #-16]
   15608:	str	r0, [sp, #12]
   1560c:	mov	r0, r1
   15610:	mov	r1, r2
   15614:	bl	10be0 <fputs@plt>
   15618:	ldr	r1, [fp, #-12]
   1561c:	ldr	r2, [fp, #-16]
   15620:	str	r0, [sp, #8]
   15624:	mov	r0, r2
   15628:	blx	r1
   1562c:	ldr	r0, [pc, #136]	; 156bc <error@@Base+0x27dc>
   15630:	add	r0, pc, r0
   15634:	ldr	r1, [fp, #-16]
   15638:	bl	10be0 <fputs@plt>
   1563c:	ldr	r0, [fp, #-4]
   15640:	ldr	r0, [r0]
   15644:	str	r0, [fp, #-20]	; 0xffffffec
   15648:	ldr	r0, [fp, #-20]	; 0xffffffec
   1564c:	movw	r1, #0
   15650:	cmp	r0, r1
   15654:	beq	15690 <error@@Base+0x27b0>
   15658:	add	r2, sp, #19
   1565c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15660:	ldrb	r0, [r0, #8]
   15664:	ldr	r1, [fp, #-20]	; 0xffffffec
   15668:	ldr	r1, [r1, #12]
   1566c:	movw	r3, #0
   15670:	bl	1533c <error@@Base+0x245c>
   15674:	add	r0, sp, #19
   15678:	ldr	r1, [fp, #-16]
   1567c:	bl	10be0 <fputs@plt>
   15680:	ldr	r0, [fp, #-20]	; 0xffffffec
   15684:	ldr	r0, [r0, #4]
   15688:	str	r0, [fp, #-20]	; 0xffffffec
   1568c:	b	15648 <error@@Base+0x2768>
   15690:	ldr	r0, [pc, #48]	; 156c8 <error@@Base+0x27e8>
   15694:	ldr	r0, [pc, r0]
   15698:	ldr	r1, [fp, #-16]
   1569c:	str	r0, [sp, #4]
   156a0:	mov	r0, r1
   156a4:	ldr	r1, [sp, #4]
   156a8:	blx	r1
   156ac:	mov	sp, fp
   156b0:	pop	{fp, pc}
   156b4:	andeq	r0, r0, r3, lsr r7
   156b8:	strdeq	r4, [r1], -ip
   156bc:			; <UNDEFINED> instruction: 0x00003db7
   156c0:	andeq	r3, r0, r7, ror #27
   156c4:			; <UNDEFINED> instruction: 0x00003dbf
   156c8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   156cc:	push	{fp, lr}
   156d0:	mov	fp, sp
   156d4:	sub	sp, sp, #24
   156d8:	str	r0, [fp, #-8]
   156dc:	str	r1, [sp, #12]
   156e0:	ldr	r0, [sp, #12]
   156e4:	str	r0, [sp, #8]
   156e8:	movw	r0, #0
   156ec:	str	r0, [sp, #4]
   156f0:	str	r0, [sp]
   156f4:	ldr	r0, [sp, #12]
   156f8:	str	r0, [sp, #8]
   156fc:	ldr	r0, [sp, #8]
   15700:	ldrb	r0, [r0]
   15704:	cmp	r0, #0
   15708:	beq	1575c <error@@Base+0x287c>
   1570c:	ldr	r0, [sp, #8]
   15710:	mvn	r1, #0
   15714:	mov	r2, sp
   15718:	bl	10b20 <utf8proc_iterate@plt>
   1571c:	str	r0, [sp, #4]
   15720:	ldr	r0, [sp, #4]
   15724:	cmp	r0, #1
   15728:	bge	15738 <error@@Base+0x2858>
   1572c:	movw	r0, #0
   15730:	strb	r0, [fp, #-1]
   15734:	b	15764 <error@@Base+0x2884>
   15738:	ldr	r0, [fp, #-8]
   1573c:	ldr	r2, [sp]
   15740:	movw	r1, #0
   15744:	bl	14c0c <error@@Base+0x1d2c>
   15748:	ldr	r0, [sp, #4]
   1574c:	ldr	r1, [sp, #8]
   15750:	add	r0, r1, r0
   15754:	str	r0, [sp, #8]
   15758:	b	156fc <error@@Base+0x281c>
   1575c:	movw	r0, #1
   15760:	strb	r0, [fp, #-1]
   15764:	ldrb	r0, [fp, #-1]
   15768:	mov	sp, fp
   1576c:	pop	{fp, pc}
   15770:	push	{fp, lr}
   15774:	mov	fp, sp
   15778:	sub	sp, sp, #16
   1577c:	str	r0, [sp, #8]
   15780:	ldr	r0, [sp, #8]
   15784:	bl	10ac0 <utf8proc_get_property@plt>
   15788:	str	r0, [sp, #4]
   1578c:	ldr	r0, [sp, #8]
   15790:	cmp	r0, #9
   15794:	str	r0, [sp]
   15798:	beq	157e0 <error@@Base+0x2900>
   1579c:	b	157a0 <error@@Base+0x28c0>
   157a0:	ldr	r0, [sp]
   157a4:	cmp	r0, #10
   157a8:	beq	157d4 <error@@Base+0x28f4>
   157ac:	b	157b0 <error@@Base+0x28d0>
   157b0:	ldr	r0, [sp]
   157b4:	sub	r1, r0, #11
   157b8:	cmp	r1, #3
   157bc:	bcc	157e0 <error@@Base+0x2900>
   157c0:	b	157c4 <error@@Base+0x28e4>
   157c4:	ldr	r0, [sp]
   157c8:	cmp	r0, #160	; 0xa0
   157cc:	beq	157e0 <error@@Base+0x2900>
   157d0:	b	157ec <error@@Base+0x290c>
   157d4:	movw	r0, #0
   157d8:	strb	r0, [fp, #-1]
   157dc:	b	15818 <error@@Base+0x2938>
   157e0:	movw	r0, #1
   157e4:	strb	r0, [fp, #-1]
   157e8:	b	15818 <error@@Base+0x2938>
   157ec:	ldr	r0, [sp, #4]
   157f0:	ldrsh	r0, [r0]
   157f4:	sub	r0, r0, #23
   157f8:	cmp	r0, #2
   157fc:	bhi	15810 <error@@Base+0x2930>
   15800:	b	15804 <error@@Base+0x2924>
   15804:	movw	r0, #1
   15808:	strb	r0, [fp, #-1]
   1580c:	b	15818 <error@@Base+0x2938>
   15810:	movw	r0, #0
   15814:	strb	r0, [fp, #-1]
   15818:	ldrb	r0, [fp, #-1]
   1581c:	mov	sp, fp
   15820:	pop	{fp, pc}
   15824:	push	{fp, lr}
   15828:	mov	fp, sp
   1582c:	sub	sp, sp, #16
   15830:	str	r0, [fp, #-4]
   15834:	str	r1, [sp, #8]
   15838:	str	r2, [sp, #4]
   1583c:	ldr	r0, [fp, #-4]
   15840:	cmp	r0, #2
   15844:	bge	1584c <error@@Base+0x296c>
   15848:	b	1587c <error@@Base+0x299c>
   1584c:	ldr	r0, [pc, #48]	; 15884 <error@@Base+0x29a4>
   15850:	add	r0, pc, r0
   15854:	ldr	r1, [pc, #44]	; 15888 <error@@Base+0x29a8>
   15858:	add	r1, pc, r1
   1585c:	ldr	r2, [sp, #8]
   15860:	str	r2, [r1]
   15864:	ldr	r1, [sp, #4]
   15868:	str	r1, [r0]
   1586c:	ldr	r0, [fp, #-4]
   15870:	sub	r1, r0, #1
   15874:	movw	r0, #0
   15878:	bl	1588c <error@@Base+0x29ac>
   1587c:	mov	sp, fp
   15880:	pop	{fp, pc}
   15884:	andeq	r6, r1, ip, lsl #22
   15888:	andeq	r6, r1, r0, lsl #22
   1588c:	push	{fp, lr}
   15890:	mov	fp, sp
   15894:	sub	sp, sp, #40	; 0x28
   15898:	str	r0, [fp, #-4]
   1589c:	str	r1, [fp, #-8]
   158a0:	ldr	r0, [fp, #-4]
   158a4:	str	r0, [fp, #-12]
   158a8:	ldr	r0, [fp, #-8]
   158ac:	str	r0, [fp, #-16]
   158b0:	ldr	r0, [pc, #500]	; 15aac <error@@Base+0x2bcc>
   158b4:	ldr	r0, [pc, r0]
   158b8:	ldr	r1, [fp, #-12]
   158bc:	add	r0, r0, r1, lsl #2
   158c0:	ldr	r0, [r0]
   158c4:	str	r0, [sp, #20]
   158c8:	ldr	r0, [fp, #-12]
   158cc:	ldr	r1, [fp, #-16]
   158d0:	cmp	r0, r1
   158d4:	bge	15a40 <error@@Base+0x2b60>
   158d8:	b	158dc <error@@Base+0x29fc>
   158dc:	ldr	r0, [fp, #-12]
   158e0:	ldr	r1, [fp, #-16]
   158e4:	cmp	r0, r1
   158e8:	movw	r0, #0
   158ec:	str	r0, [sp, #16]
   158f0:	bge	15938 <error@@Base+0x2a58>
   158f4:	ldr	r0, [pc, #436]	; 15ab0 <error@@Base+0x2bd0>
   158f8:	ldr	r0, [pc, r0]
   158fc:	ldr	r1, [sp, #20]
   15900:	ldr	r2, [pc, #428]	; 15ab4 <error@@Base+0x2bd4>
   15904:	ldr	r2, [pc, r2]
   15908:	ldr	r3, [fp, #-16]
   1590c:	add	r2, r2, r3, lsl #2
   15910:	ldr	r2, [r2]
   15914:	str	r0, [sp, #12]
   15918:	mov	r0, r1
   1591c:	mov	r1, r2
   15920:	ldr	r2, [sp, #12]
   15924:	blx	r2
   15928:	cmp	r0, #0
   1592c:	movw	r0, #0
   15930:	movlt	r0, #1
   15934:	str	r0, [sp, #16]
   15938:	ldr	r0, [sp, #16]
   1593c:	tst	r0, #1
   15940:	beq	15958 <error@@Base+0x2a78>
   15944:	ldr	r0, [fp, #-16]
   15948:	mvn	r1, #0
   1594c:	add	r0, r0, r1
   15950:	str	r0, [fp, #-16]
   15954:	b	158dc <error@@Base+0x29fc>
   15958:	ldr	r0, [fp, #-12]
   1595c:	ldr	r1, [fp, #-16]
   15960:	cmp	r0, r1
   15964:	beq	1598c <error@@Base+0x2aac>
   15968:	ldr	r0, [pc, #328]	; 15ab8 <error@@Base+0x2bd8>
   1596c:	ldr	r0, [pc, r0]
   15970:	ldr	r1, [fp, #-16]
   15974:	ldr	r1, [r0, r1, lsl #2]
   15978:	ldr	r2, [fp, #-12]
   1597c:	add	r3, r2, #1
   15980:	str	r3, [fp, #-12]
   15984:	add	r0, r0, r2, lsl #2
   15988:	str	r1, [r0]
   1598c:	b	15990 <error@@Base+0x2ab0>
   15990:	ldr	r0, [fp, #-12]
   15994:	ldr	r1, [fp, #-16]
   15998:	cmp	r0, r1
   1599c:	movw	r0, #0
   159a0:	str	r0, [sp, #8]
   159a4:	bge	159ec <error@@Base+0x2b0c>
   159a8:	ldr	r0, [pc, #268]	; 15abc <error@@Base+0x2bdc>
   159ac:	ldr	r0, [pc, r0]
   159b0:	ldr	r1, [sp, #20]
   159b4:	ldr	r2, [pc, #260]	; 15ac0 <error@@Base+0x2be0>
   159b8:	ldr	r2, [pc, r2]
   159bc:	ldr	r3, [fp, #-12]
   159c0:	add	r2, r2, r3, lsl #2
   159c4:	ldr	r2, [r2]
   159c8:	str	r0, [sp, #4]
   159cc:	mov	r0, r1
   159d0:	mov	r1, r2
   159d4:	ldr	r2, [sp, #4]
   159d8:	blx	r2
   159dc:	cmp	r0, #0
   159e0:	movw	r0, #0
   159e4:	movgt	r0, #1
   159e8:	str	r0, [sp, #8]
   159ec:	ldr	r0, [sp, #8]
   159f0:	tst	r0, #1
   159f4:	beq	15a08 <error@@Base+0x2b28>
   159f8:	ldr	r0, [fp, #-12]
   159fc:	add	r0, r0, #1
   15a00:	str	r0, [fp, #-12]
   15a04:	b	15990 <error@@Base+0x2ab0>
   15a08:	ldr	r0, [fp, #-12]
   15a0c:	ldr	r1, [fp, #-16]
   15a10:	cmp	r0, r1
   15a14:	beq	15a3c <error@@Base+0x2b5c>
   15a18:	ldr	r0, [pc, #164]	; 15ac4 <error@@Base+0x2be4>
   15a1c:	ldr	r0, [pc, r0]
   15a20:	ldr	r1, [fp, #-12]
   15a24:	ldr	r1, [r0, r1, lsl #2]
   15a28:	ldr	r2, [fp, #-16]
   15a2c:	sub	r3, r2, #1
   15a30:	str	r3, [fp, #-16]
   15a34:	add	r0, r0, r2, lsl #2
   15a38:	str	r1, [r0]
   15a3c:	b	158c8 <error@@Base+0x29e8>
   15a40:	ldr	r0, [sp, #20]
   15a44:	ldr	r1, [pc, #124]	; 15ac8 <error@@Base+0x2be8>
   15a48:	ldr	r1, [pc, r1]
   15a4c:	ldr	r2, [fp, #-16]
   15a50:	add	r1, r1, r2, lsl #2
   15a54:	str	r0, [r1]
   15a58:	ldr	r0, [fp, #-4]
   15a5c:	ldr	r1, [fp, #-16]
   15a60:	mvn	r2, #0
   15a64:	add	r1, r1, r2
   15a68:	str	r1, [fp, #-16]
   15a6c:	cmp	r0, r1
   15a70:	bge	15a80 <error@@Base+0x2ba0>
   15a74:	ldr	r0, [fp, #-4]
   15a78:	ldr	r1, [fp, #-16]
   15a7c:	bl	1588c <error@@Base+0x29ac>
   15a80:	ldr	r0, [fp, #-12]
   15a84:	add	r0, r0, #1
   15a88:	str	r0, [fp, #-12]
   15a8c:	ldr	r1, [fp, #-8]
   15a90:	cmp	r0, r1
   15a94:	bge	15aa4 <error@@Base+0x2bc4>
   15a98:	ldr	r0, [fp, #-12]
   15a9c:	ldr	r1, [fp, #-8]
   15aa0:	bl	1588c <error@@Base+0x29ac>
   15aa4:	mov	sp, fp
   15aa8:	pop	{fp, pc}
   15aac:	andeq	r6, r1, r4, lsr #21
   15ab0:	andeq	r6, r1, r4, ror #20
   15ab4:	andeq	r6, r1, r4, asr sl
   15ab8:	andeq	r6, r1, ip, ror #19
   15abc:			; <UNDEFINED> instruction: 0x000169b0
   15ac0:	andeq	r6, r1, r0, lsr #19
   15ac4:	andeq	r6, r1, ip, lsr r9
   15ac8:	andeq	r6, r1, r0, lsl r9
   15acc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ad0:	mov	r7, r0
   15ad4:	ldr	r6, [pc, #72]	; 15b24 <error@@Base+0x2c44>
   15ad8:	ldr	r5, [pc, #72]	; 15b28 <error@@Base+0x2c48>
   15adc:	add	r6, pc, r6
   15ae0:	add	r5, pc, r5
   15ae4:	sub	r6, r6, r5
   15ae8:	mov	r8, r1
   15aec:	mov	r9, r2
   15af0:	bl	10a70 <calloc@plt-0x20>
   15af4:	asrs	r6, r6, #2
   15af8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15afc:	mov	r4, #0
   15b00:	add	r4, r4, #1
   15b04:	ldr	r3, [r5], #4
   15b08:	mov	r2, r9
   15b0c:	mov	r1, r8
   15b10:	mov	r0, r7
   15b14:	blx	r3
   15b18:	cmp	r6, r4
   15b1c:	bne	15b00 <error@@Base+0x2c20>
   15b20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b24:	andeq	r4, r1, r8, lsl r4
   15b28:	andeq	r4, r1, r0, lsl r4
   15b2c:	bx	lr
   15b30:	mov	r2, r1
   15b34:	mov	r1, r0
   15b38:	mov	r0, #3
   15b3c:	b	10b08 <__xstat@plt>

Disassembly of section .fini:

00015b40 <.fini>:
   15b40:	push	{r3, lr}
   15b44:	pop	{r3, pc}
