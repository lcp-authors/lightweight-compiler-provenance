
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c00 <.init>:
   10c00:	push	{r3, lr}
   10c04:	bl	10fd0 <__assert_fail@plt+0x164>
   10c08:	pop	{r3, pc}

Disassembly of section .plt:

00010c0c <calloc@plt-0x14>:
   10c0c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c10:	ldr	lr, [pc, #4]	; 10c1c <calloc@plt-0x4>
   10c14:	add	lr, pc, lr
   10c18:	ldr	pc, [lr, #8]!
   10c1c:	andeq	sl, r1, r4, ror #7

00010c20 <calloc@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #106496	; 0x1a000
   10c28:	ldr	pc, [ip, #996]!	; 0x3e4

00010c2c <fputs_unlocked@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #106496	; 0x1a000
   10c34:	ldr	pc, [ip, #988]!	; 0x3dc

00010c38 <strcmp@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #106496	; 0x1a000
   10c40:	ldr	pc, [ip, #980]!	; 0x3d4

00010c44 <posix_fadvise64@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #106496	; 0x1a000
   10c4c:	ldr	pc, [ip, #972]!	; 0x3cc

00010c50 <fflush@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #106496	; 0x1a000
   10c58:	ldr	pc, [ip, #964]!	; 0x3c4

00010c5c <free@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #106496	; 0x1a000
   10c64:	ldr	pc, [ip, #956]!	; 0x3bc

00010c68 <_exit@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #106496	; 0x1a000
   10c70:	ldr	pc, [ip, #948]!	; 0x3b4

00010c74 <memcpy@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #106496	; 0x1a000
   10c7c:	ldr	pc, [ip, #940]!	; 0x3ac

00010c80 <mbsinit@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #106496	; 0x1a000
   10c88:	ldr	pc, [ip, #932]!	; 0x3a4

00010c8c <memcmp@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #106496	; 0x1a000
   10c94:	ldr	pc, [ip, #924]!	; 0x39c

00010c98 <fputc_unlocked@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #106496	; 0x1a000
   10ca0:	ldr	pc, [ip, #916]!	; 0x394

00010ca4 <dcgettext@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #106496	; 0x1a000
   10cac:	ldr	pc, [ip, #908]!	; 0x38c

00010cb0 <dup2@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #106496	; 0x1a000
   10cb8:	ldr	pc, [ip, #900]!	; 0x384

00010cbc <realloc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #106496	; 0x1a000
   10cc4:	ldr	pc, [ip, #892]!	; 0x37c

00010cc8 <textdomain@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #106496	; 0x1a000
   10cd0:	ldr	pc, [ip, #884]!	; 0x374

00010cd4 <iswprint@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #106496	; 0x1a000
   10cdc:	ldr	pc, [ip, #876]!	; 0x36c

00010ce0 <fwrite@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #106496	; 0x1a000
   10ce8:	ldr	pc, [ip, #868]!	; 0x364

00010cec <lseek64@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #106496	; 0x1a000
   10cf4:	ldr	pc, [ip, #860]!	; 0x35c

00010cf8 <__ctype_get_mb_cur_max@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #106496	; 0x1a000
   10d00:	ldr	pc, [ip, #852]!	; 0x354

00010d04 <__fpending@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #106496	; 0x1a000
   10d0c:	ldr	pc, [ip, #844]!	; 0x34c

00010d10 <mbrtowc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #106496	; 0x1a000
   10d18:	ldr	pc, [ip, #836]!	; 0x344

00010d1c <error@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #106496	; 0x1a000
   10d24:	ldr	pc, [ip, #828]!	; 0x33c

00010d28 <open64@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #106496	; 0x1a000
   10d30:	ldr	pc, [ip, #820]!	; 0x334

00010d34 <puts@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #106496	; 0x1a000
   10d3c:	ldr	pc, [ip, #812]!	; 0x32c

00010d40 <malloc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #106496	; 0x1a000
   10d48:	ldr	pc, [ip, #804]!	; 0x324

00010d4c <__libc_start_main@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #106496	; 0x1a000
   10d54:	ldr	pc, [ip, #796]!	; 0x31c

00010d58 <__freading@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #106496	; 0x1a000
   10d60:	ldr	pc, [ip, #788]!	; 0x314

00010d64 <__gmon_start__@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #106496	; 0x1a000
   10d6c:	ldr	pc, [ip, #780]!	; 0x30c

00010d70 <freopen64@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #106496	; 0x1a000
   10d78:	ldr	pc, [ip, #772]!	; 0x304

00010d7c <getopt_long@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #106496	; 0x1a000
   10d84:	ldr	pc, [ip, #764]!	; 0x2fc

00010d88 <__ctype_b_loc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #106496	; 0x1a000
   10d90:	ldr	pc, [ip, #756]!	; 0x2f4

00010d94 <exit@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #106496	; 0x1a000
   10d9c:	ldr	pc, [ip, #748]!	; 0x2ec

00010da0 <strlen@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #106496	; 0x1a000
   10da8:	ldr	pc, [ip, #740]!	; 0x2e4

00010dac <__errno_location@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #106496	; 0x1a000
   10db4:	ldr	pc, [ip, #732]!	; 0x2dc

00010db8 <__cxa_atexit@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #106496	; 0x1a000
   10dc0:	ldr	pc, [ip, #724]!	; 0x2d4

00010dc4 <memset@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #106496	; 0x1a000
   10dcc:	ldr	pc, [ip, #716]!	; 0x2cc

00010dd0 <__printf_chk@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #106496	; 0x1a000
   10dd8:	ldr	pc, [ip, #708]!	; 0x2c4

00010ddc <fileno@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #106496	; 0x1a000
   10de4:	ldr	pc, [ip, #700]!	; 0x2bc

00010de8 <__fprintf_chk@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #106496	; 0x1a000
   10df0:	ldr	pc, [ip, #692]!	; 0x2b4

00010df4 <fclose@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #106496	; 0x1a000
   10dfc:	ldr	pc, [ip, #684]!	; 0x2ac

00010e00 <fseeko64@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #106496	; 0x1a000
   10e08:	ldr	pc, [ip, #676]!	; 0x2a4

00010e0c <__uflow@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #106496	; 0x1a000
   10e14:	ldr	pc, [ip, #668]!	; 0x29c

00010e18 <setlocale@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #106496	; 0x1a000
   10e20:	ldr	pc, [ip, #660]!	; 0x294

00010e24 <strrchr@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #106496	; 0x1a000
   10e2c:	ldr	pc, [ip, #652]!	; 0x28c

00010e30 <nl_langinfo@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #106496	; 0x1a000
   10e38:	ldr	pc, [ip, #644]!	; 0x284

00010e3c <bindtextdomain@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #106496	; 0x1a000
   10e44:	ldr	pc, [ip, #636]!	; 0x27c

00010e48 <strncmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #106496	; 0x1a000
   10e50:	ldr	pc, [ip, #628]!	; 0x274

00010e54 <abort@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #106496	; 0x1a000
   10e5c:	ldr	pc, [ip, #620]!	; 0x26c

00010e60 <close@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #106496	; 0x1a000
   10e68:	ldr	pc, [ip, #612]!	; 0x264

00010e6c <__assert_fail@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #106496	; 0x1a000
   10e74:	ldr	pc, [ip, #604]!	; 0x25c

Disassembly of section .text:

00010e78 <.text>:
   10e78:	mov	r6, r0
   10e7c:	str	r7, [sp, #-8]!
   10e80:	mov	r5, r1
   10e84:	ldr	r0, [r1]
   10e88:	mov	r8, #1
   10e8c:	mov	r7, #0
   10e90:	str	lr, [sp, #4]
   10e94:	sub	sp, sp, #24
   10e98:	movw	r4, #45360	; 0xb130
   10e9c:	movt	r4, #2
   10ea0:	bl	14ae0 <__assert_fail@plt+0x3c74>
   10ea4:	movw	r1, #39892	; 0x9bd4
   10ea8:	movt	r1, #1
   10eac:	mov	r0, #6
   10eb0:	bl	10e18 <setlocale@plt>
   10eb4:	movw	r1, #40420	; 0x9de4
   10eb8:	movt	r1, #1
   10ebc:	movw	r0, #40020	; 0x9c54
   10ec0:	movt	r0, #1
   10ec4:	bl	10e3c <bindtextdomain@plt>
   10ec8:	movw	r0, #40020	; 0x9c54
   10ecc:	movt	r0, #1
   10ed0:	bl	10cc8 <textdomain@plt>
   10ed4:	movw	r0, #17296	; 0x4390
   10ed8:	movt	r0, #1
   10edc:	bl	19a6c <__assert_fail@plt+0x8c00>
   10ee0:	movw	r3, #45280	; 0xb0e0
   10ee4:	movt	r3, #2
   10ee8:	str	r8, [sp, #4]
   10eec:	ldr	ip, [r3]
   10ef0:	movw	r2, #40444	; 0x9dfc
   10ef4:	movt	r2, #1
   10ef8:	movw	r3, #4652	; 0x122c
   10efc:	movt	r3, #1
   10f00:	mov	r1, r5
   10f04:	mov	r0, r6
   10f08:	str	ip, [sp]
   10f0c:	str	r3, [sp, #8]
   10f10:	movw	r3, #40016	; 0x9c50
   10f14:	movt	r3, #1
   10f18:	str	r2, [sp, #12]
   10f1c:	movw	r2, #39644	; 0x9adc
   10f20:	movt	r2, #1
   10f24:	str	r7, [sp, #16]
   10f28:	bl	149f8 <__assert_fail@plt+0x3b8c>
   10f2c:	ldr	r3, [r4]
   10f30:	sub	r2, r6, r3
   10f34:	cmp	r2, r8
   10f38:	bgt	10f50 <__assert_fail@plt+0xe4>
   10f3c:	cmp	r3, r6
   10f40:	movweq	r0, #40188	; 0x9cfc
   10f44:	ldrne	r0, [r5, r3, lsl #2]
   10f48:	movteq	r0, #1
   10f4c:	bl	118e4 <__assert_fail@plt+0xa78>
   10f50:	mov	r2, #5
   10f54:	movw	r1, #40460	; 0x9e0c
   10f58:	movt	r1, #1
   10f5c:	mov	r0, r7
   10f60:	bl	10ca4 <dcgettext@plt>
   10f64:	ldr	r3, [r4]
   10f68:	mov	r6, r0
   10f6c:	add	r3, r3, r8
   10f70:	ldr	r0, [r5, r3, lsl #2]
   10f74:	bl	18450 <__assert_fail@plt+0x75e4>
   10f78:	mov	r3, r0
   10f7c:	mov	r2, r6
   10f80:	mov	r0, r7
   10f84:	mov	r1, r7
   10f88:	bl	10d1c <error@plt>
   10f8c:	mov	r0, r8
   10f90:	bl	1122c <__assert_fail@plt+0x3c0>
   10f94:	mov	fp, #0
   10f98:	mov	lr, #0
   10f9c:	pop	{r1}		; (ldr r1, [sp], #4)
   10fa0:	mov	r2, sp
   10fa4:	push	{r2}		; (str r2, [sp, #-4]!)
   10fa8:	push	{r0}		; (str r0, [sp, #-4]!)
   10fac:	ldr	ip, [pc, #16]	; 10fc4 <__assert_fail@plt+0x158>
   10fb0:	push	{ip}		; (str ip, [sp, #-4]!)
   10fb4:	ldr	r0, [pc, #12]	; 10fc8 <__assert_fail@plt+0x15c>
   10fb8:	ldr	r3, [pc, #12]	; 10fcc <__assert_fail@plt+0x160>
   10fbc:	bl	10d4c <__libc_start_main@plt>
   10fc0:	bl	10e54 <abort@plt>
   10fc4:	andeq	r9, r1, r8, ror #20
   10fc8:	andeq	r0, r1, r8, ror lr
   10fcc:	andeq	r9, r1, r8, lsl #20
   10fd0:	ldr	r3, [pc, #20]	; 10fec <__assert_fail@plt+0x180>
   10fd4:	ldr	r2, [pc, #20]	; 10ff0 <__assert_fail@plt+0x184>
   10fd8:	add	r3, pc, r3
   10fdc:	ldr	r2, [r3, r2]
   10fe0:	cmp	r2, #0
   10fe4:	bxeq	lr
   10fe8:	b	10d64 <__gmon_start__@plt>
   10fec:	andeq	sl, r1, r0, lsr #32
   10ff0:	ldrdeq	r0, [r0], -r4
   10ff4:	ldr	r0, [pc, #24]	; 11014 <__assert_fail@plt+0x1a8>
   10ff8:	ldr	r3, [pc, #24]	; 11018 <__assert_fail@plt+0x1ac>
   10ffc:	cmp	r3, r0
   11000:	bxeq	lr
   11004:	ldr	r3, [pc, #16]	; 1101c <__assert_fail@plt+0x1b0>
   11008:	cmp	r3, #0
   1100c:	bxeq	lr
   11010:	bx	r3
   11014:	andeq	fp, r2, r8, lsr #2
   11018:	andeq	fp, r2, r8, lsr #2
   1101c:	andeq	r0, r0, r0
   11020:	ldr	r0, [pc, #36]	; 1104c <__assert_fail@plt+0x1e0>
   11024:	ldr	r1, [pc, #36]	; 11050 <__assert_fail@plt+0x1e4>
   11028:	sub	r1, r1, r0
   1102c:	asr	r1, r1, #2
   11030:	add	r1, r1, r1, lsr #31
   11034:	asrs	r1, r1, #1
   11038:	bxeq	lr
   1103c:	ldr	r3, [pc, #16]	; 11054 <__assert_fail@plt+0x1e8>
   11040:	cmp	r3, #0
   11044:	bxeq	lr
   11048:	bx	r3
   1104c:	andeq	fp, r2, r8, lsr #2
   11050:	andeq	fp, r2, r8, lsr #2
   11054:	andeq	r0, r0, r0
   11058:	push	{r4, lr}
   1105c:	ldr	r4, [pc, #24]	; 1107c <__assert_fail@plt+0x210>
   11060:	ldrb	r3, [r4]
   11064:	cmp	r3, #0
   11068:	popne	{r4, pc}
   1106c:	bl	10ff4 <__assert_fail@plt+0x188>
   11070:	mov	r3, #1
   11074:	strb	r3, [r4]
   11078:	pop	{r4, pc}
   1107c:	andeq	fp, r2, ip, asr #2
   11080:	b	11020 <__assert_fail@plt+0x1b4>
   11084:	movw	r3, #45392	; 0xb150
   11088:	movt	r3, #2
   1108c:	ldr	r2, [r3]
   11090:	mov	r0, #0
   11094:	add	r2, r2, #1
   11098:	str	r2, [r3]
   1109c:	bx	lr
   110a0:	ldr	r3, [r0, #16]
   110a4:	cmp	r3, #0
   110a8:	bne	110d8 <__assert_fail@plt+0x26c>
   110ac:	ldrb	r3, [r0, #13]
   110b0:	cmp	r3, #0
   110b4:	bne	110d8 <__assert_fail@plt+0x26c>
   110b8:	movw	r3, #45392	; 0xb150
   110bc:	movt	r3, #2
   110c0:	ldr	r2, [r3, #4]
   110c4:	cmp	r2, #0
   110c8:	ldrne	r2, [r3, #8]
   110cc:	streq	r0, [r3, #4]
   110d0:	str	r0, [r3, #8]
   110d4:	strne	r0, [r2, #20]
   110d8:	mov	r0, #0
   110dc:	bx	lr
   110e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   110e4:	movw	r5, #45392	; 0xb150
   110e8:	movt	r5, #2
   110ec:	ldr	ip, [r5, #12]
   110f0:	strd	r6, [sp, #8]
   110f4:	strd	r8, [sp, #16]
   110f8:	str	sl, [sp, #24]
   110fc:	str	lr, [sp, #28]
   11100:	cmp	ip, #0
   11104:	moveq	r3, ip
   11108:	streq	r0, [r5, #12]
   1110c:	beq	11148 <__assert_fail@plt+0x2dc>
   11110:	ldr	r2, [r0, #24]
   11114:	cmp	r2, #0
   11118:	beq	1121c <__assert_fail@plt+0x3b0>
   1111c:	ldr	r3, [r2]
   11120:	cmp	ip, r3
   11124:	bne	1113c <__assert_fail@plt+0x2d0>
   11128:	b	11224 <__assert_fail@plt+0x3b8>
   1112c:	ldr	r1, [r3]
   11130:	cmp	ip, r1
   11134:	beq	11164 <__assert_fail@plt+0x2f8>
   11138:	mov	r2, r3
   1113c:	ldr	r3, [r2, #4]
   11140:	cmp	r3, #0
   11144:	bne	1112c <__assert_fail@plt+0x2c0>
   11148:	ldrd	r4, [sp]
   1114c:	mov	r0, r3
   11150:	ldrd	r6, [sp, #8]
   11154:	ldrd	r8, [sp, #16]
   11158:	ldr	sl, [sp, #24]
   1115c:	add	sp, sp, #28
   11160:	pop	{pc}		; (ldr pc, [sp], #4)
   11164:	add	r4, r2, #4
   11168:	ldr	r3, [r0, #20]
   1116c:	cmp	r3, #0
   11170:	streq	ip, [r0, #20]
   11174:	streq	r0, [r5, #12]
   11178:	beq	11148 <__assert_fail@plt+0x2dc>
   1117c:	movw	r8, #40620	; 0x9eac
   11180:	movt	r8, #1
   11184:	mov	r7, r0
   11188:	mov	r9, #0
   1118c:	b	111a0 <__assert_fail@plt+0x334>
   11190:	subs	ip, r6, #0
   11194:	str	r6, [r5, #12]
   11198:	str	r9, [r3, #20]
   1119c:	beq	11214 <__assert_fail@plt+0x3a8>
   111a0:	mov	r1, #0
   111a4:	mov	r2, r8
   111a8:	ldr	r3, [ip]
   111ac:	mov	r0, r1
   111b0:	ldr	r6, [ip, #20]
   111b4:	bl	10d1c <error@plt>
   111b8:	ldr	r3, [r5, #12]
   111bc:	cmp	r7, r3
   111c0:	bne	11190 <__assert_fail@plt+0x324>
   111c4:	ldr	r3, [r4]
   111c8:	ldr	r2, [r3]
   111cc:	mov	r0, r3
   111d0:	ldr	r1, [r3, #4]
   111d4:	ldr	r3, [r2, #16]
   111d8:	sub	r3, r3, #1
   111dc:	str	r3, [r2, #16]
   111e0:	str	r1, [r4]
   111e4:	bl	145e4 <__assert_fail@plt+0x3778>
   111e8:	ldr	r2, [r5, #12]
   111ec:	cmp	r2, #0
   111f0:	beq	11214 <__assert_fail@plt+0x3a8>
   111f4:	mov	r1, #0
   111f8:	ldr	r3, [r2, #20]
   111fc:	str	r1, [r2, #20]
   11200:	subs	r2, r3, #0
   11204:	bne	111f8 <__assert_fail@plt+0x38c>
   11208:	mov	r3, #1
   1120c:	str	r2, [r5, #12]
   11210:	b	11148 <__assert_fail@plt+0x2dc>
   11214:	mov	r3, #1
   11218:	b	11148 <__assert_fail@plt+0x2dc>
   1121c:	mov	r3, r2
   11220:	b	11148 <__assert_fail@plt+0x2dc>
   11224:	add	r4, r0, #24
   11228:	b	11168 <__assert_fail@plt+0x2fc>
   1122c:	subs	r6, r0, #0
   11230:	str	r7, [sp, #-8]!
   11234:	str	lr, [sp, #4]
   11238:	sub	sp, sp, #56	; 0x38
   1123c:	beq	11284 <__assert_fail@plt+0x418>
   11240:	movw	r3, #45368	; 0xb138
   11244:	movt	r3, #2
   11248:	ldr	r4, [r3]
   1124c:	mov	r2, #5
   11250:	movw	r1, #39652	; 0x9ae4
   11254:	movt	r1, #1
   11258:	mov	r0, #0
   1125c:	bl	10ca4 <dcgettext@plt>
   11260:	movw	r3, #45416	; 0xb168
   11264:	movt	r3, #2
   11268:	mov	r2, r0
   1126c:	mov	r1, #1
   11270:	ldr	r3, [r3]
   11274:	mov	r0, r4
   11278:	bl	10de8 <__fprintf_chk@plt>
   1127c:	mov	r0, r6
   11280:	bl	10d94 <exit@plt>
   11284:	mov	r2, #5
   11288:	movw	r1, #39692	; 0x9b0c
   1128c:	movt	r1, #1
   11290:	movw	r7, #45380	; 0xb144
   11294:	movt	r7, #2
   11298:	bl	10ca4 <dcgettext@plt>
   1129c:	movw	r3, #45416	; 0xb168
   112a0:	movt	r3, #2
   112a4:	mov	r1, r0
   112a8:	mov	r0, #1
   112ac:	ldr	r2, [r3]
   112b0:	bl	10dd0 <__printf_chk@plt>
   112b4:	mov	r2, #5
   112b8:	movw	r1, #39792	; 0x9b70
   112bc:	movt	r1, #1
   112c0:	mov	r0, r6
   112c4:	bl	10ca4 <dcgettext@plt>
   112c8:	ldr	r1, [r7]
   112cc:	bl	10c2c <fputs_unlocked@plt>
   112d0:	mov	r2, #5
   112d4:	movw	r1, #39948	; 0x9c0c
   112d8:	movt	r1, #1
   112dc:	mov	r0, r6
   112e0:	bl	10ca4 <dcgettext@plt>
   112e4:	ldr	r1, [r7]
   112e8:	bl	10c2c <fputs_unlocked@plt>
   112ec:	mov	r2, #5
   112f0:	movw	r1, #39848	; 0x9ba8
   112f4:	movt	r1, #1
   112f8:	mov	r0, r6
   112fc:	bl	10ca4 <dcgettext@plt>
   11300:	ldr	r1, [r7]
   11304:	bl	10c2c <fputs_unlocked@plt>
   11308:	mov	r2, #5
   1130c:	movw	r1, #39896	; 0x9bd8
   11310:	movt	r1, #1
   11314:	mov	r0, r6
   11318:	bl	10ca4 <dcgettext@plt>
   1131c:	ldr	r1, [r7]
   11320:	bl	10c2c <fputs_unlocked@plt>
   11324:	movw	lr, #39568	; 0x9a90
   11328:	movt	lr, #1
   1132c:	ldr	ip, [lr]
   11330:	ldr	r4, [lr, #4]
   11334:	ldrd	r8, [lr, #8]
   11338:	subs	r1, ip, #0
   1133c:	str	ip, [sp]
   11340:	ldrd	r2, [lr, #16]
   11344:	str	r4, [sp, #4]
   11348:	ldrd	r4, [lr, #24]
   1134c:	strd	r8, [sp, #8]
   11350:	ldrd	r8, [lr, #32]
   11354:	strd	r2, [sp, #16]
   11358:	ldrd	r2, [lr, #40]	; 0x28
   1135c:	strd	r4, [sp, #24]
   11360:	ldrd	r4, [lr, #48]	; 0x30
   11364:	strd	r8, [sp, #32]
   11368:	strd	r2, [sp, #40]	; 0x28
   1136c:	strd	r4, [sp, #48]	; 0x30
   11370:	movwne	r5, #39644	; 0x9adc
   11374:	mov	r4, sp
   11378:	movtne	r5, #1
   1137c:	bne	11474 <__assert_fail@plt+0x608>
   11380:	ldr	r4, [r4, #4]
   11384:	movw	r1, #39952	; 0x9c10
   11388:	movt	r1, #1
   1138c:	mov	r2, #5
   11390:	cmp	r4, #0
   11394:	beq	11488 <__assert_fail@plt+0x61c>
   11398:	mov	r0, #0
   1139c:	bl	10ca4 <dcgettext@plt>
   113a0:	mov	r1, r0
   113a4:	movw	r3, #39976	; 0x9c28
   113a8:	movt	r3, #1
   113ac:	movw	r2, #40016	; 0x9c50
   113b0:	movt	r2, #1
   113b4:	mov	r0, #1
   113b8:	bl	10dd0 <__printf_chk@plt>
   113bc:	mov	r1, #0
   113c0:	mov	r0, #5
   113c4:	bl	10e18 <setlocale@plt>
   113c8:	cmp	r0, #0
   113cc:	movweq	r5, #39644	; 0x9adc
   113d0:	movteq	r5, #1
   113d4:	beq	113f8 <__assert_fail@plt+0x58c>
   113d8:	movw	r1, #40032	; 0x9c60
   113dc:	movt	r1, #1
   113e0:	mov	r2, #3
   113e4:	movw	r5, #39644	; 0x9adc
   113e8:	movt	r5, #1
   113ec:	bl	10e48 <strncmp@plt>
   113f0:	cmp	r0, #0
   113f4:	bne	11540 <__assert_fail@plt+0x6d4>
   113f8:	mov	r2, #5
   113fc:	movw	r1, #40108	; 0x9cac
   11400:	movt	r1, #1
   11404:	mov	r0, #0
   11408:	bl	10ca4 <dcgettext@plt>
   1140c:	mov	r1, r0
   11410:	movw	r3, #39644	; 0x9adc
   11414:	movt	r3, #1
   11418:	movw	r2, #39976	; 0x9c28
   1141c:	movt	r2, #1
   11420:	mov	r0, #1
   11424:	bl	10dd0 <__printf_chk@plt>
   11428:	mov	r2, #5
   1142c:	movw	r1, #40136	; 0x9cc8
   11430:	movt	r1, #1
   11434:	mov	r0, #0
   11438:	bl	10ca4 <dcgettext@plt>
   1143c:	movw	r2, #40488	; 0x9e28
   11440:	movt	r2, #1
   11444:	cmp	r4, r5
   11448:	movw	r3, #39892	; 0x9bd4
   1144c:	movt	r3, #1
   11450:	mov	r1, r0
   11454:	moveq	r3, r2
   11458:	mov	r2, r4
   1145c:	mov	r0, #1
   11460:	bl	10dd0 <__printf_chk@plt>
   11464:	b	1127c <__assert_fail@plt+0x410>
   11468:	ldr	r1, [r4, #8]!
   1146c:	cmp	r1, #0
   11470:	beq	11380 <__assert_fail@plt+0x514>
   11474:	mov	r0, r5
   11478:	bl	10c38 <strcmp@plt>
   1147c:	cmp	r0, #0
   11480:	bne	11468 <__assert_fail@plt+0x5fc>
   11484:	b	11380 <__assert_fail@plt+0x514>
   11488:	mov	r0, r4
   1148c:	bl	10ca4 <dcgettext@plt>
   11490:	mov	r1, r0
   11494:	movw	r3, #39976	; 0x9c28
   11498:	movt	r3, #1
   1149c:	movw	r2, #40016	; 0x9c50
   114a0:	movt	r2, #1
   114a4:	mov	r0, #1
   114a8:	bl	10dd0 <__printf_chk@plt>
   114ac:	mov	r1, r4
   114b0:	mov	r0, #5
   114b4:	bl	10e18 <setlocale@plt>
   114b8:	cmp	r0, #0
   114bc:	beq	114d8 <__assert_fail@plt+0x66c>
   114c0:	movw	r1, #40032	; 0x9c60
   114c4:	movt	r1, #1
   114c8:	mov	r2, #3
   114cc:	bl	10e48 <strncmp@plt>
   114d0:	cmp	r0, #0
   114d4:	bne	11534 <__assert_fail@plt+0x6c8>
   114d8:	mov	r2, #5
   114dc:	movw	r1, #40108	; 0x9cac
   114e0:	movt	r1, #1
   114e4:	mov	r0, #0
   114e8:	bl	10ca4 <dcgettext@plt>
   114ec:	mov	r1, r0
   114f0:	movw	r3, #39644	; 0x9adc
   114f4:	movt	r3, #1
   114f8:	movw	r2, #39976	; 0x9c28
   114fc:	movt	r2, #1
   11500:	mov	r0, #1
   11504:	bl	10dd0 <__printf_chk@plt>
   11508:	movw	r1, #40136	; 0x9cc8
   1150c:	movt	r1, #1
   11510:	mov	r2, #5
   11514:	mov	r0, #0
   11518:	bl	10ca4 <dcgettext@plt>
   1151c:	movw	r4, #39644	; 0x9adc
   11520:	movt	r4, #1
   11524:	movw	r3, #40488	; 0x9e28
   11528:	movt	r3, #1
   1152c:	mov	r1, r0
   11530:	b	11458 <__assert_fail@plt+0x5ec>
   11534:	movw	r5, #39644	; 0x9adc
   11538:	movt	r5, #1
   1153c:	mov	r4, r5
   11540:	mov	r2, #5
   11544:	movw	r1, #40036	; 0x9c64
   11548:	movt	r1, #1
   1154c:	mov	r0, #0
   11550:	bl	10ca4 <dcgettext@plt>
   11554:	ldr	r1, [r7]
   11558:	bl	10c2c <fputs_unlocked@plt>
   1155c:	b	113f8 <__assert_fail@plt+0x58c>
   11560:	strd	r4, [sp, #-16]!
   11564:	movw	r5, #45392	; 0xb150
   11568:	movt	r5, #2
   1156c:	mov	r4, r0
   11570:	str	r6, [sp, #8]
   11574:	str	lr, [sp, #12]
   11578:	ldr	r3, [r4, #4]
   1157c:	subs	r0, r3, #0
   11580:	beq	115b8 <__assert_fail@plt+0x74c>
   11584:	bl	11560 <__assert_fail@plt+0x6f4>
   11588:	cmp	r0, #0
   1158c:	bne	115a8 <__assert_fail@plt+0x73c>
   11590:	ldr	r3, [r5]
   11594:	ldr	r4, [r4, #8]
   11598:	add	r3, r3, #1
   1159c:	cmp	r4, #0
   115a0:	str	r3, [r5]
   115a4:	bne	11578 <__assert_fail@plt+0x70c>
   115a8:	ldrd	r4, [sp]
   115ac:	ldr	r6, [sp, #8]
   115b0:	add	sp, sp, #12
   115b4:	pop	{pc}		; (ldr pc, [sp], #4)
   115b8:	ldr	r4, [r4, #8]
   115bc:	cmp	r4, #0
   115c0:	beq	115d4 <__assert_fail@plt+0x768>
   115c4:	ldr	r3, [r5]
   115c8:	add	r3, r3, #1
   115cc:	str	r3, [r5]
   115d0:	b	11578 <__assert_fail@plt+0x70c>
   115d4:	movw	r3, #45392	; 0xb150
   115d8:	movt	r3, #2
   115dc:	ldr	r2, [r3]
   115e0:	mov	r0, r4
   115e4:	add	r2, r2, #1
   115e8:	str	r2, [r3]
   115ec:	b	115a8 <__assert_fail@plt+0x73c>
   115f0:	ldr	r3, [r0, #16]
   115f4:	cmp	r3, #0
   115f8:	beq	11680 <__assert_fail@plt+0x814>
   115fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11600:	movw	r5, #45392	; 0xb150
   11604:	movt	r5, #2
   11608:	ldr	ip, [r5, #12]
   1160c:	strd	r6, [sp, #8]
   11610:	strd	r8, [sp, #16]
   11614:	str	sl, [sp, #24]
   11618:	str	lr, [sp, #28]
   1161c:	cmp	ip, #0
   11620:	moveq	r3, ip
   11624:	streq	r0, [r5, #12]
   11628:	beq	11664 <__assert_fail@plt+0x7f8>
   1162c:	ldr	r2, [r0, #24]
   11630:	cmp	r2, #0
   11634:	beq	11740 <__assert_fail@plt+0x8d4>
   11638:	ldr	r3, [r2]
   1163c:	cmp	ip, r3
   11640:	bne	11658 <__assert_fail@plt+0x7ec>
   11644:	b	11748 <__assert_fail@plt+0x8dc>
   11648:	ldr	r1, [r3]
   1164c:	cmp	ip, r1
   11650:	beq	11688 <__assert_fail@plt+0x81c>
   11654:	mov	r2, r3
   11658:	ldr	r3, [r2, #4]
   1165c:	cmp	r3, #0
   11660:	bne	11648 <__assert_fail@plt+0x7dc>
   11664:	ldrd	r4, [sp]
   11668:	mov	r0, r3
   1166c:	ldrd	r6, [sp, #8]
   11670:	ldrd	r8, [sp, #16]
   11674:	ldr	sl, [sp, #24]
   11678:	add	sp, sp, #28
   1167c:	pop	{pc}		; (ldr pc, [sp], #4)
   11680:	mov	r0, r3
   11684:	bx	lr
   11688:	add	r4, r2, #4
   1168c:	ldr	r3, [r0, #20]
   11690:	cmp	r3, #0
   11694:	streq	ip, [r0, #20]
   11698:	streq	r0, [r5, #12]
   1169c:	beq	11664 <__assert_fail@plt+0x7f8>
   116a0:	movw	r8, #40620	; 0x9eac
   116a4:	movt	r8, #1
   116a8:	mov	r6, r0
   116ac:	mov	r9, #0
   116b0:	b	116c4 <__assert_fail@plt+0x858>
   116b4:	subs	ip, r7, #0
   116b8:	str	r7, [r5, #12]
   116bc:	str	r9, [r3, #20]
   116c0:	beq	11738 <__assert_fail@plt+0x8cc>
   116c4:	mov	r1, #0
   116c8:	mov	r2, r8
   116cc:	ldr	r3, [ip]
   116d0:	mov	r0, r1
   116d4:	ldr	r7, [ip, #20]
   116d8:	bl	10d1c <error@plt>
   116dc:	ldr	r3, [r5, #12]
   116e0:	cmp	r6, r3
   116e4:	bne	116b4 <__assert_fail@plt+0x848>
   116e8:	ldr	r3, [r4]
   116ec:	ldr	r2, [r3]
   116f0:	mov	r0, r3
   116f4:	ldr	r1, [r3, #4]
   116f8:	ldr	r3, [r2, #16]
   116fc:	sub	r3, r3, #1
   11700:	str	r3, [r2, #16]
   11704:	str	r1, [r4]
   11708:	bl	145e4 <__assert_fail@plt+0x3778>
   1170c:	ldr	r2, [r5, #12]
   11710:	cmp	r2, #0
   11714:	beq	11738 <__assert_fail@plt+0x8cc>
   11718:	mov	r1, #0
   1171c:	ldr	r3, [r2, #20]
   11720:	str	r1, [r2, #20]
   11724:	subs	r2, r3, #0
   11728:	bne	1171c <__assert_fail@plt+0x8b0>
   1172c:	mov	r3, #1
   11730:	str	r2, [r5, #12]
   11734:	b	11664 <__assert_fail@plt+0x7f8>
   11738:	mov	r3, #1
   1173c:	b	11664 <__assert_fail@plt+0x7f8>
   11740:	mov	r3, r2
   11744:	b	11664 <__assert_fail@plt+0x7f8>
   11748:	add	r4, r0, #24
   1174c:	b	1168c <__assert_fail@plt+0x820>
   11750:	str	r4, [sp, #-8]!
   11754:	mov	r4, r0
   11758:	str	lr, [sp, #4]
   1175c:	ldr	r3, [r4, #4]
   11760:	subs	r0, r3, #0
   11764:	beq	117bc <__assert_fail@plt+0x950>
   11768:	bl	11750 <__assert_fail@plt+0x8e4>
   1176c:	cmp	r0, #0
   11770:	bne	11790 <__assert_fail@plt+0x924>
   11774:	ldr	r3, [r4, #16]
   11778:	cmp	r3, #0
   1177c:	beq	117a0 <__assert_fail@plt+0x934>
   11780:	mov	r0, r4
   11784:	bl	110e0 <__assert_fail@plt+0x274>
   11788:	cmp	r0, #0
   1178c:	beq	117a0 <__assert_fail@plt+0x934>
   11790:	ldr	r4, [sp]
   11794:	add	sp, sp, #4
   11798:	mov	r0, #1
   1179c:	pop	{pc}		; (ldr pc, [sp], #4)
   117a0:	ldr	r4, [r4, #8]
   117a4:	cmp	r4, #0
   117a8:	bne	1175c <__assert_fail@plt+0x8f0>
   117ac:	mov	r0, r4
   117b0:	ldr	r4, [sp]
   117b4:	add	sp, sp, #4
   117b8:	pop	{pc}		; (ldr pc, [sp], #4)
   117bc:	ldr	r3, [r4, #8]
   117c0:	cmp	r3, #0
   117c4:	beq	117ec <__assert_fail@plt+0x980>
   117c8:	ldr	r2, [r4, #16]
   117cc:	cmp	r2, #0
   117d0:	moveq	r4, r3
   117d4:	beq	1175c <__assert_fail@plt+0x8f0>
   117d8:	mov	r0, r4
   117dc:	bl	110e0 <__assert_fail@plt+0x274>
   117e0:	cmp	r0, #0
   117e4:	bne	11790 <__assert_fail@plt+0x924>
   117e8:	b	117a0 <__assert_fail@plt+0x934>
   117ec:	mov	r0, r4
   117f0:	ldr	r4, [sp]
   117f4:	ldr	lr, [sp, #4]
   117f8:	add	sp, sp, #8
   117fc:	b	115f0 <__assert_fail@plt+0x784>
   11800:	strd	r4, [sp, #-16]!
   11804:	movw	r5, #45392	; 0xb150
   11808:	movt	r5, #2
   1180c:	mov	r4, r0
   11810:	str	r6, [sp, #8]
   11814:	str	lr, [sp, #12]
   11818:	ldr	r0, [r4, #4]
   1181c:	cmp	r0, #0
   11820:	beq	11880 <__assert_fail@plt+0xa14>
   11824:	bl	11800 <__assert_fail@plt+0x994>
   11828:	cmp	r0, #0
   1182c:	bne	11870 <__assert_fail@plt+0xa04>
   11830:	ldr	r3, [r4, #8]
   11834:	ldr	r2, [r4, #16]
   11838:	cmp	r2, #0
   1183c:	bne	11864 <__assert_fail@plt+0x9f8>
   11840:	ldrb	r2, [r4, #13]
   11844:	cmp	r2, #0
   11848:	bne	11864 <__assert_fail@plt+0x9f8>
   1184c:	ldr	r2, [r5, #4]
   11850:	cmp	r2, #0
   11854:	ldrne	r2, [r5, #8]
   11858:	streq	r4, [r5, #4]
   1185c:	str	r4, [r5, #8]
   11860:	strne	r4, [r2, #20]
   11864:	cmp	r3, #0
   11868:	bne	118a4 <__assert_fail@plt+0xa38>
   1186c:	mov	r0, #0
   11870:	ldrd	r4, [sp]
   11874:	ldr	r6, [sp, #8]
   11878:	add	sp, sp, #12
   1187c:	pop	{pc}		; (ldr pc, [sp], #4)
   11880:	ldr	r3, [r4, #8]
   11884:	ldr	r2, [r4, #16]
   11888:	cmp	r3, #0
   1188c:	beq	118ac <__assert_fail@plt+0xa40>
   11890:	cmp	r2, #0
   11894:	bne	118a4 <__assert_fail@plt+0xa38>
   11898:	ldrb	r2, [r4, #13]
   1189c:	cmp	r2, #0
   118a0:	beq	1184c <__assert_fail@plt+0x9e0>
   118a4:	mov	r4, r3
   118a8:	b	11818 <__assert_fail@plt+0x9ac>
   118ac:	cmp	r2, #0
   118b0:	bne	1186c <__assert_fail@plt+0xa00>
   118b4:	ldrb	r0, [r4, #13]
   118b8:	cmp	r0, #0
   118bc:	bne	1186c <__assert_fail@plt+0xa00>
   118c0:	movw	r3, #45392	; 0xb150
   118c4:	movt	r3, #2
   118c8:	ldr	r2, [r3, #4]
   118cc:	cmp	r2, #0
   118d0:	ldrne	r2, [r3, #8]
   118d4:	streq	r4, [r3, #4]
   118d8:	str	r4, [r3, #8]
   118dc:	strne	r4, [r2, #20]
   118e0:	b	11870 <__assert_fail@plt+0xa04>
   118e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   118e8:	movw	r1, #40188	; 0x9cfc
   118ec:	movt	r1, #1
   118f0:	strd	r6, [sp, #8]
   118f4:	strd	r8, [sp, #16]
   118f8:	strd	sl, [sp, #24]
   118fc:	str	lr, [sp, #32]
   11900:	sub	sp, sp, #36	; 0x24
   11904:	str	r0, [sp, #16]
   11908:	bl	10c38 <strcmp@plt>
   1190c:	mov	r4, r0
   11910:	str	r0, [sp, #20]
   11914:	mov	r0, #28
   11918:	bl	19460 <__assert_fail@plt+0x85f4>
   1191c:	movw	r3, #45376	; 0xb140
   11920:	movt	r3, #2
   11924:	cmp	r4, #0
   11928:	mov	sl, r0
   1192c:	str	r3, [sp, #4]
   11930:	beq	11950 <__assert_fail@plt+0xae4>
   11934:	movw	r1, #40192	; 0x9d00
   11938:	movt	r1, #1
   1193c:	ldr	r2, [r3]
   11940:	ldr	r0, [sp, #16]
   11944:	bl	14644 <__assert_fail@plt+0x37d8>
   11948:	subs	r5, r0, #0
   1194c:	beq	13478 <__assert_fail@plt+0x260c>
   11950:	ldr	r3, [sp, #4]
   11954:	mov	r1, #2
   11958:	ldr	r0, [r3]
   1195c:	bl	14480 <__assert_fail@plt+0x3614>
   11960:	movw	r3, #40196	; 0x9d04
   11964:	movt	r3, #1
   11968:	add	r0, sp, #24
   1196c:	str	r3, [sp, #12]
   11970:	bl	185e4 <__assert_fail@plt+0x7778>
   11974:	mov	r9, #0
   11978:	ldr	r1, [sp, #4]
   1197c:	add	r3, sp, #24
   11980:	mov	r2, #3
   11984:	ldr	r0, [r1]
   11988:	ldr	r1, [sp, #12]
   1198c:	bl	185f4 <__assert_fail@plt+0x7788>
   11990:	cmn	r0, #1
   11994:	beq	11c54 <__assert_fail@plt+0xde8>
   11998:	cmp	r0, #0
   1199c:	beq	12034 <__assert_fail@plt+0x11c8>
   119a0:	ldr	r8, [sl, #8]
   119a4:	ldr	r5, [sp, #28]
   119a8:	cmp	r8, #0
   119ac:	beq	11bd8 <__assert_fail@plt+0xd6c>
   119b0:	cmp	r5, #0
   119b4:	beq	12368 <__assert_fail@plt+0x14fc>
   119b8:	mov	r6, sl
   119bc:	mov	r4, r8
   119c0:	b	119e8 <__assert_fail@plt+0xb7c>
   119c4:	ldrd	r2, [r8, #4]
   119c8:	movlt	r3, r2
   119cc:	cmp	r3, #0
   119d0:	beq	11a14 <__assert_fail@plt+0xba8>
   119d4:	ldrsb	r2, [r3, #12]
   119d8:	cmp	r2, #0
   119dc:	movne	r6, r8
   119e0:	movne	r4, r3
   119e4:	mov	r8, r3
   119e8:	ldr	r1, [r8]
   119ec:	cmp	r1, #0
   119f0:	beq	12368 <__assert_fail@plt+0x14fc>
   119f4:	mov	r0, r5
   119f8:	bl	10c38 <strcmp@plt>
   119fc:	cmp	r0, #0
   11a00:	bne	119c4 <__assert_fail@plt+0xb58>
   11a04:	cmp	r9, #0
   11a08:	bne	11b88 <__assert_fail@plt+0xd1c>
   11a0c:	mov	r9, r8
   11a10:	b	11978 <__assert_fail@plt+0xb0c>
   11a14:	mov	fp, r0
   11a18:	mov	r0, #28
   11a1c:	bl	19460 <__assert_fail@plt+0x85f4>
   11a20:	mov	r7, r0
   11a24:	mov	r0, r5
   11a28:	bl	195d8 <__assert_fail@plt+0x876c>
   11a2c:	str	r0, [r7]
   11a30:	cmp	fp, #0
   11a34:	ldr	r1, [r4]
   11a38:	strlt	r7, [r8, #4]
   11a3c:	strge	r7, [r8, #8]
   11a40:	cmp	r1, #0
   11a44:	beq	134a8 <__assert_fail@plt+0x263c>
   11a48:	mov	r0, r5
   11a4c:	bl	10c38 <strcmp@plt>
   11a50:	cmp	r0, #0
   11a54:	beq	134a8 <__assert_fail@plt+0x263c>
   11a58:	ldr	r8, [r4, #4]
   11a5c:	ldr	r3, [r4, #8]
   11a60:	mvnlt	r3, #0
   11a64:	strlt	r3, [sp, #8]
   11a68:	blt	11a78 <__assert_fail@plt+0xc0c>
   11a6c:	mov	r8, r3
   11a70:	mov	r3, #1
   11a74:	str	r3, [sp, #8]
   11a78:	cmp	r8, r7
   11a7c:	beq	11ae4 <__assert_fail@plt+0xc78>
   11a80:	cmp	r8, #0
   11a84:	beq	1234c <__assert_fail@plt+0x14e0>
   11a88:	ldr	r1, [r8]
   11a8c:	cmp	r1, #0
   11a90:	beq	1234c <__assert_fail@plt+0x14e0>
   11a94:	mov	fp, r8
   11a98:	b	11ab4 <__assert_fail@plt+0xc48>
   11a9c:	cmp	r3, #0
   11aa0:	beq	1234c <__assert_fail@plt+0x14e0>
   11aa4:	ldr	r1, [r3]
   11aa8:	cmp	r1, #0
   11aac:	beq	1234c <__assert_fail@plt+0x14e0>
   11ab0:	mov	fp, r3
   11ab4:	mov	r0, r5
   11ab8:	bl	10c38 <strcmp@plt>
   11abc:	cmp	r0, #0
   11ac0:	beq	1234c <__assert_fail@plt+0x14e0>
   11ac4:	ldr	r3, [fp, #4]
   11ac8:	ldr	r2, [fp, #8]
   11acc:	movge	r3, r2
   11ad0:	movge	r2, #1
   11ad4:	mvnlt	r2, #0
   11ad8:	cmp	r3, r7
   11adc:	strb	r2, [fp, #12]
   11ae0:	bne	11a9c <__assert_fail@plt+0xc30>
   11ae4:	ldrsb	r3, [r4, #12]
   11ae8:	cmp	r3, #0
   11aec:	beq	11bc4 <__assert_fail@plt+0xd58>
   11af0:	ldr	r2, [sp, #8]
   11af4:	rsb	r2, r2, #0
   11af8:	cmp	r3, r2
   11afc:	beq	11bc4 <__assert_fail@plt+0xd58>
   11b00:	ldrsb	r3, [r8, #12]
   11b04:	ldr	r1, [sp, #8]
   11b08:	cmp	r1, r3
   11b0c:	beq	11c00 <__assert_fail@plt+0xd94>
   11b10:	cmp	r1, #0
   11b14:	ldmib	r8, {r1, r3}
   11b18:	blt	11c38 <__assert_fail@plt+0xdcc>
   11b1c:	ldr	r0, [r1, #8]
   11b20:	mov	r3, r1
   11b24:	str	r0, [r8, #4]
   11b28:	ldr	r0, [r1, #4]
   11b2c:	str	r8, [r1, #8]
   11b30:	str	r0, [r4, #8]
   11b34:	str	r4, [r1, #4]
   11b38:	mov	r1, #0
   11b3c:	ldr	r0, [sp, #8]
   11b40:	strb	r1, [r4, #12]
   11b44:	strb	r1, [r8, #12]
   11b48:	ldrsb	r1, [r3, #12]
   11b4c:	cmp	r0, r1
   11b50:	strbeq	r2, [r4, #12]
   11b54:	beq	11b64 <__assert_fail@plt+0xcf8>
   11b58:	cmp	r2, r1
   11b5c:	ldreq	r2, [sp, #8]
   11b60:	strbeq	r2, [r8, #12]
   11b64:	mov	r2, #0
   11b68:	strb	r2, [r3, #12]
   11b6c:	ldr	r2, [r6, #8]
   11b70:	mov	r8, r7
   11b74:	cmp	r2, r4
   11b78:	streq	r3, [r6, #8]
   11b7c:	strne	r3, [r6, #4]
   11b80:	cmp	r9, #0
   11b84:	beq	11a0c <__assert_fail@plt+0xba0>
   11b88:	ldr	r1, [r8]
   11b8c:	ldr	r0, [r9]
   11b90:	bl	10c38 <strcmp@plt>
   11b94:	cmp	r0, #0
   11b98:	beq	11974 <__assert_fail@plt+0xb08>
   11b9c:	ldr	r3, [r8, #16]
   11ba0:	mov	r0, #8
   11ba4:	add	r3, r3, #1
   11ba8:	str	r3, [r8, #16]
   11bac:	bl	1906c <__assert_fail@plt+0x8200>
   11bb0:	ldr	r3, [r9, #24]
   11bb4:	str	r8, [r0]
   11bb8:	str	r3, [r0, #4]
   11bbc:	str	r0, [r9, #24]
   11bc0:	b	11974 <__assert_fail@plt+0xb08>
   11bc4:	ldr	r2, [sp, #8]
   11bc8:	mov	r8, r7
   11bcc:	add	r3, r3, r2
   11bd0:	strb	r3, [r4, #12]
   11bd4:	b	11a04 <__assert_fail@plt+0xb98>
   11bd8:	mov	r0, #28
   11bdc:	bl	19460 <__assert_fail@plt+0x85f4>
   11be0:	cmp	r5, #0
   11be4:	mov	r8, r0
   11be8:	beq	11bf8 <__assert_fail@plt+0xd8c>
   11bec:	mov	r0, r5
   11bf0:	bl	195d8 <__assert_fail@plt+0x876c>
   11bf4:	str	r0, [r8]
   11bf8:	str	r8, [sl, #8]
   11bfc:	b	11a04 <__assert_fail@plt+0xb98>
   11c00:	cmn	r1, #1
   11c04:	beq	11c28 <__assert_fail@plt+0xdbc>
   11c08:	ldr	r3, [r8, #4]
   11c0c:	str	r3, [r4, #8]
   11c10:	str	r4, [r8, #4]
   11c14:	mov	r2, #0
   11c18:	mov	r3, r8
   11c1c:	strb	r2, [r8, #12]
   11c20:	strb	r2, [r4, #12]
   11c24:	b	11b6c <__assert_fail@plt+0xd00>
   11c28:	ldr	r3, [r8, #8]
   11c2c:	str	r3, [r4, #4]
   11c30:	str	r4, [r8, #8]
   11c34:	b	11c14 <__assert_fail@plt+0xda8>
   11c38:	ldr	r1, [r3, #4]
   11c3c:	str	r1, [r8, #8]
   11c40:	ldr	r1, [r3, #8]
   11c44:	str	r8, [r3, #4]
   11c48:	str	r1, [r4, #4]
   11c4c:	str	r4, [r3, #8]
   11c50:	b	11b38 <__assert_fail@plt+0xccc>
   11c54:	cmp	r9, #0
   11c58:	bne	13428 <__assert_fail@plt+0x25bc>
   11c5c:	ldr	r6, [sl, #8]
   11c60:	cmp	r6, #0
   11c64:	beq	11c70 <__assert_fail@plt+0xe04>
   11c68:	mov	r0, r6
   11c6c:	bl	11560 <__assert_fail@plt+0x6f4>
   11c70:	mov	r3, #1
   11c74:	movw	r4, #45392	; 0xb150
   11c78:	movt	r4, #2
   11c7c:	mov	r5, r3
   11c80:	str	r3, [sp, #8]
   11c84:	ldr	r3, [r4]
   11c88:	cmp	r3, #0
   11c8c:	beq	11d30 <__assert_fail@plt+0xec4>
   11c90:	cmp	r6, #0
   11c94:	beq	11ca0 <__assert_fail@plt+0xe34>
   11c98:	mov	r0, r6
   11c9c:	bl	11800 <__assert_fail@plt+0x994>
   11ca0:	ldr	r3, [r4, #4]
   11ca4:	cmp	r3, #0
   11ca8:	beq	11d5c <__assert_fail@plt+0xef0>
   11cac:	ldr	r0, [r3]
   11cb0:	ldr	r7, [r3, #24]
   11cb4:	bl	10d34 <puts@plt>
   11cb8:	ldm	r4, {ip, lr}
   11cbc:	cmp	r7, #0
   11cc0:	sub	ip, ip, #1
   11cc4:	strb	r5, [lr, #13]
   11cc8:	str	ip, [r4]
   11ccc:	beq	11d18 <__assert_fail@plt+0xeac>
   11cd0:	ldr	r1, [r4, #8]
   11cd4:	mov	r0, #0
   11cd8:	ldm	r7, {r2, r7}
   11cdc:	ldr	r3, [r2, #16]
   11ce0:	sub	r3, r3, #1
   11ce4:	cmp	r3, #0
   11ce8:	str	r3, [r2, #16]
   11cec:	bne	11d08 <__assert_fail@plt+0xe9c>
   11cf0:	cmp	r7, #0
   11cf4:	str	r2, [r1, #20]
   11cf8:	beq	11d54 <__assert_fail@plt+0xee8>
   11cfc:	mov	r1, r2
   11d00:	mov	r0, #1
   11d04:	b	11cd8 <__assert_fail@plt+0xe6c>
   11d08:	cmp	r7, #0
   11d0c:	bne	11cd8 <__assert_fail@plt+0xe6c>
   11d10:	cmp	r0, #0
   11d14:	bne	11d50 <__assert_fail@plt+0xee4>
   11d18:	ldr	r3, [lr, #20]
   11d1c:	cmp	r3, #0
   11d20:	str	r3, [r4, #4]
   11d24:	bne	11cac <__assert_fail@plt+0xe40>
   11d28:	cmp	ip, #0
   11d2c:	bne	11d5c <__assert_fail@plt+0xef0>
   11d30:	ldr	r3, [sp, #4]
   11d34:	ldr	r0, [r3]
   11d38:	bl	144d0 <__assert_fail@plt+0x3664>
   11d3c:	cmp	r0, #0
   11d40:	bne	133e8 <__assert_fail@plt+0x257c>
   11d44:	ldr	r3, [sp, #8]
   11d48:	eor	r0, r3, #1
   11d4c:	bl	10d94 <exit@plt>
   11d50:	mov	r2, r1
   11d54:	str	r2, [r4, #8]
   11d58:	b	11d18 <__assert_fail@plt+0xeac>
   11d5c:	mov	r2, #5
   11d60:	movw	r1, #40376	; 0x9db8
   11d64:	movt	r1, #1
   11d68:	mov	r0, #0
   11d6c:	bl	10ca4 <dcgettext@plt>
   11d70:	mov	r7, r0
   11d74:	mov	r1, #3
   11d78:	ldr	r2, [sp, #16]
   11d7c:	mov	r0, #0
   11d80:	bl	17ca4 <__assert_fail@plt+0x6e38>
   11d84:	mov	r1, #0
   11d88:	mov	r3, r0
   11d8c:	mov	r2, r7
   11d90:	mov	r0, r1
   11d94:	str	r1, [sp, #8]
   11d98:	bl	10d1c <error@plt>
   11d9c:	cmp	r6, #0
   11da0:	beq	11e9c <__assert_fail@plt+0x1030>
   11da4:	ldr	r7, [r6, #4]
   11da8:	cmp	r7, #0
   11dac:	beq	11eac <__assert_fail@plt+0x1040>
   11db0:	ldr	r9, [r7, #4]
   11db4:	cmp	r9, #0
   11db8:	beq	12050 <__assert_fail@plt+0x11e4>
   11dbc:	ldr	sl, [r9, #4]
   11dc0:	cmp	sl, #0
   11dc4:	beq	12384 <__assert_fail@plt+0x1518>
   11dc8:	ldr	fp, [sl, #4]
   11dcc:	cmp	fp, #0
   11dd0:	beq	122c8 <__assert_fail@plt+0x145c>
   11dd4:	ldr	r3, [fp, #4]
   11dd8:	cmp	r3, #0
   11ddc:	beq	12bf8 <__assert_fail@plt+0x1d8c>
   11de0:	ldr	r0, [r3, #4]
   11de4:	cmp	r0, #0
   11de8:	beq	131f0 <__assert_fail@plt+0x2384>
   11dec:	str	r3, [sp, #12]
   11df0:	bl	11750 <__assert_fail@plt+0x8e4>
   11df4:	cmp	r0, #0
   11df8:	bne	11e9c <__assert_fail@plt+0x1030>
   11dfc:	ldr	r3, [sp, #12]
   11e00:	ldr	r2, [r3, #16]
   11e04:	cmp	r2, #0
   11e08:	bne	13248 <__assert_fail@plt+0x23dc>
   11e0c:	ldr	r8, [r3, #8]
   11e10:	cmp	r8, #0
   11e14:	bne	13208 <__assert_fail@plt+0x239c>
   11e18:	ldr	r3, [fp, #16]
   11e1c:	cmp	r3, #0
   11e20:	beq	11e34 <__assert_fail@plt+0xfc8>
   11e24:	mov	r0, fp
   11e28:	bl	110e0 <__assert_fail@plt+0x274>
   11e2c:	cmp	r0, #0
   11e30:	bne	11e9c <__assert_fail@plt+0x1030>
   11e34:	ldr	r8, [fp, #8]
   11e38:	cmp	r8, #0
   11e3c:	bne	12c10 <__assert_fail@plt+0x1da4>
   11e40:	ldr	r3, [sl, #16]
   11e44:	cmp	r3, #0
   11e48:	bne	122e0 <__assert_fail@plt+0x1474>
   11e4c:	ldr	r8, [sl, #8]
   11e50:	cmp	r8, #0
   11e54:	bne	128d8 <__assert_fail@plt+0x1a6c>
   11e58:	ldr	r3, [r9, #16]
   11e5c:	cmp	r3, #0
   11e60:	beq	11e74 <__assert_fail@plt+0x1008>
   11e64:	mov	r0, r9
   11e68:	bl	110e0 <__assert_fail@plt+0x274>
   11e6c:	cmp	r0, #0
   11e70:	bne	11e9c <__assert_fail@plt+0x1030>
   11e74:	ldr	r8, [r9, #8]
   11e78:	cmp	r8, #0
   11e7c:	bne	1239c <__assert_fail@plt+0x1530>
   11e80:	ldr	r3, [r7, #16]
   11e84:	cmp	r3, #0
   11e88:	beq	11ffc <__assert_fail@plt+0x1190>
   11e8c:	mov	r0, r7
   11e90:	bl	110e0 <__assert_fail@plt+0x274>
   11e94:	cmp	r0, #0
   11e98:	beq	11ffc <__assert_fail@plt+0x1190>
   11e9c:	ldr	r3, [r4, #12]
   11ea0:	cmp	r3, #0
   11ea4:	bne	11d9c <__assert_fail@plt+0xf30>
   11ea8:	b	11c84 <__assert_fail@plt+0xe18>
   11eac:	ldr	r7, [r6, #8]
   11eb0:	cmp	r7, #0
   11eb4:	beq	128cc <__assert_fail@plt+0x1a60>
   11eb8:	ldr	r3, [r6, #16]
   11ebc:	cmp	r3, #0
   11ec0:	bne	12014 <__assert_fail@plt+0x11a8>
   11ec4:	ldr	r9, [r7, #4]
   11ec8:	cmp	r9, #0
   11ecc:	beq	12540 <__assert_fail@plt+0x16d4>
   11ed0:	ldr	sl, [r9, #4]
   11ed4:	cmp	sl, #0
   11ed8:	beq	12320 <__assert_fail@plt+0x14b4>
   11edc:	ldr	fp, [sl, #4]
   11ee0:	cmp	fp, #0
   11ee4:	beq	129e4 <__assert_fail@plt+0x1b78>
   11ee8:	ldr	r3, [fp, #4]
   11eec:	cmp	r3, #0
   11ef0:	beq	12ef4 <__assert_fail@plt+0x2088>
   11ef4:	ldr	r8, [r3, #4]
   11ef8:	cmp	r8, #0
   11efc:	beq	13088 <__assert_fail@plt+0x221c>
   11f00:	ldr	r0, [r8, #4]
   11f04:	cmp	r0, #0
   11f08:	beq	13174 <__assert_fail@plt+0x2308>
   11f0c:	str	r3, [sp, #12]
   11f10:	bl	11750 <__assert_fail@plt+0x8e4>
   11f14:	cmp	r0, #0
   11f18:	bne	11e9c <__assert_fail@plt+0x1030>
   11f1c:	ldr	r2, [r8, #16]
   11f20:	ldr	r3, [sp, #12]
   11f24:	cmp	r2, #0
   11f28:	bne	131a4 <__assert_fail@plt+0x2338>
   11f2c:	ldr	r0, [r8, #8]
   11f30:	cmp	r0, #0
   11f34:	bne	1318c <__assert_fail@plt+0x2320>
   11f38:	ldr	r2, [r3, #16]
   11f3c:	cmp	r2, #0
   11f40:	beq	11f5c <__assert_fail@plt+0x10f0>
   11f44:	mov	r0, r3
   11f48:	str	r3, [sp, #12]
   11f4c:	bl	110e0 <__assert_fail@plt+0x274>
   11f50:	cmp	r0, #0
   11f54:	ldr	r3, [sp, #12]
   11f58:	bne	11e9c <__assert_fail@plt+0x1030>
   11f5c:	ldr	r8, [r3, #8]
   11f60:	cmp	r8, #0
   11f64:	bne	130a0 <__assert_fail@plt+0x2234>
   11f68:	ldr	r3, [fp, #16]
   11f6c:	cmp	r3, #0
   11f70:	beq	11f84 <__assert_fail@plt+0x1118>
   11f74:	mov	r0, fp
   11f78:	bl	110e0 <__assert_fail@plt+0x274>
   11f7c:	cmp	r0, #0
   11f80:	bne	11e9c <__assert_fail@plt+0x1030>
   11f84:	ldr	r8, [fp, #8]
   11f88:	cmp	r8, #0
   11f8c:	bne	12f0c <__assert_fail@plt+0x20a0>
   11f90:	ldr	r3, [sl, #16]
   11f94:	cmp	r3, #0
   11f98:	beq	11fac <__assert_fail@plt+0x1140>
   11f9c:	mov	r0, sl
   11fa0:	bl	110e0 <__assert_fail@plt+0x274>
   11fa4:	cmp	r0, #0
   11fa8:	bne	11e9c <__assert_fail@plt+0x1030>
   11fac:	ldr	r8, [sl, #8]
   11fb0:	cmp	r8, #0
   11fb4:	bne	129fc <__assert_fail@plt+0x1b90>
   11fb8:	ldr	r3, [r9, #16]
   11fbc:	cmp	r3, #0
   11fc0:	bne	12338 <__assert_fail@plt+0x14cc>
   11fc4:	ldr	r8, [r9, #8]
   11fc8:	cmp	r8, #0
   11fcc:	bne	1275c <__assert_fail@plt+0x18f0>
   11fd0:	ldr	r3, [r7, #16]
   11fd4:	cmp	r3, #0
   11fd8:	beq	11fec <__assert_fail@plt+0x1180>
   11fdc:	mov	r0, r7
   11fe0:	bl	110e0 <__assert_fail@plt+0x274>
   11fe4:	cmp	r0, #0
   11fe8:	bne	11e9c <__assert_fail@plt+0x1030>
   11fec:	ldr	r8, [r7, #8]
   11ff0:	cmp	r8, #0
   11ff4:	beq	11e9c <__assert_fail@plt+0x1030>
   11ff8:	b	12558 <__assert_fail@plt+0x16ec>
   11ffc:	ldr	r8, [r7, #8]
   12000:	cmp	r8, #0
   12004:	bne	12068 <__assert_fail@plt+0x11fc>
   12008:	ldr	r3, [r6, #16]
   1200c:	cmp	r3, #0
   12010:	beq	12024 <__assert_fail@plt+0x11b8>
   12014:	mov	r0, r6
   12018:	bl	110e0 <__assert_fail@plt+0x274>
   1201c:	cmp	r0, #0
   12020:	bne	11e9c <__assert_fail@plt+0x1030>
   12024:	ldr	r7, [r6, #8]
   12028:	cmp	r7, #0
   1202c:	beq	11e9c <__assert_fail@plt+0x1030>
   12030:	b	11ec4 <__assert_fail@plt+0x1058>
   12034:	movw	r1, #40200	; 0x9d08
   12038:	movt	r1, #1
   1203c:	ldr	r3, [pc, #4028]	; 13000 <__assert_fail@plt+0x2194>
   12040:	movw	r0, #40212	; 0x9d14
   12044:	movt	r0, #1
   12048:	movw	r2, #458	; 0x1ca
   1204c:	bl	10e6c <__assert_fail@plt>
   12050:	ldr	r8, [r7, #8]
   12054:	cmp	r8, #0
   12058:	beq	12cb4 <__assert_fail@plt+0x1e48>
   1205c:	ldr	r3, [r7, #16]
   12060:	cmp	r3, #0
   12064:	bne	11e8c <__assert_fail@plt+0x1020>
   12068:	ldr	r9, [r8, #4]
   1206c:	cmp	r9, #0
   12070:	beq	122f4 <__assert_fail@plt+0x1488>
   12074:	ldr	sl, [r9, #4]
   12078:	cmp	sl, #0
   1207c:	beq	12b08 <__assert_fail@plt+0x1c9c>
   12080:	ldr	fp, [sl, #4]
   12084:	cmp	fp, #0
   12088:	beq	13924 <__assert_fail@plt+0x2ab8>
   1208c:	ldr	r7, [fp, #4]
   12090:	cmp	r7, #0
   12094:	beq	13f18 <__assert_fail@plt+0x30ac>
   12098:	ldr	r0, [r7, #4]
   1209c:	cmp	r0, #0
   120a0:	beq	13f70 <__assert_fail@plt+0x3104>
   120a4:	bl	11750 <__assert_fail@plt+0x8e4>
   120a8:	cmp	r0, #0
   120ac:	bne	11e9c <__assert_fail@plt+0x1030>
   120b0:	ldr	r3, [r7, #16]
   120b4:	cmp	r3, #0
   120b8:	bne	13fc4 <__assert_fail@plt+0x3158>
   120bc:	ldr	r0, [r7, #8]
   120c0:	cmp	r0, #0
   120c4:	bne	13f88 <__assert_fail@plt+0x311c>
   120c8:	ldr	r3, [fp, #16]
   120cc:	cmp	r3, #0
   120d0:	beq	120e4 <__assert_fail@plt+0x1278>
   120d4:	mov	r0, fp
   120d8:	bl	110e0 <__assert_fail@plt+0x274>
   120dc:	cmp	r0, #0
   120e0:	bne	11e9c <__assert_fail@plt+0x1030>
   120e4:	ldr	r7, [fp, #8]
   120e8:	cmp	r7, #0
   120ec:	bne	13f30 <__assert_fail@plt+0x30c4>
   120f0:	ldr	r3, [sl, #16]
   120f4:	cmp	r3, #0
   120f8:	beq	1210c <__assert_fail@plt+0x12a0>
   120fc:	mov	r0, sl
   12100:	bl	110e0 <__assert_fail@plt+0x274>
   12104:	cmp	r0, #0
   12108:	bne	11e9c <__assert_fail@plt+0x1030>
   1210c:	ldr	r7, [sl, #8]
   12110:	cmp	r7, #0
   12114:	bne	1393c <__assert_fail@plt+0x2ad0>
   12118:	ldr	r3, [r9, #16]
   1211c:	cmp	r3, #0
   12120:	beq	12134 <__assert_fail@plt+0x12c8>
   12124:	mov	r0, r9
   12128:	bl	110e0 <__assert_fail@plt+0x274>
   1212c:	cmp	r0, #0
   12130:	bne	11e9c <__assert_fail@plt+0x1030>
   12134:	ldr	r7, [r9, #8]
   12138:	cmp	r7, #0
   1213c:	bne	12b20 <__assert_fail@plt+0x1cb4>
   12140:	ldr	r3, [r8, #16]
   12144:	cmp	r3, #0
   12148:	bne	1230c <__assert_fail@plt+0x14a0>
   1214c:	ldr	r7, [r8, #8]
   12150:	cmp	r7, #0
   12154:	beq	12008 <__assert_fail@plt+0x119c>
   12158:	ldr	r9, [r7, #4]
   1215c:	cmp	r9, #0
   12160:	beq	135f0 <__assert_fail@plt+0x2784>
   12164:	ldr	r8, [r9, #4]
   12168:	cmp	r8, #0
   1216c:	beq	13650 <__assert_fail@plt+0x27e4>
   12170:	ldr	sl, [r8, #4]
   12174:	cmp	sl, #0
   12178:	beq	136fc <__assert_fail@plt+0x2890>
   1217c:	ldr	r0, [sl, #4]
   12180:	cmp	r0, #0
   12184:	beq	13738 <__assert_fail@plt+0x28cc>
   12188:	bl	11750 <__assert_fail@plt+0x8e4>
   1218c:	cmp	r0, #0
   12190:	bne	11e9c <__assert_fail@plt+0x1030>
   12194:	ldr	r3, [sl, #16]
   12198:	cmp	r3, #0
   1219c:	bne	13724 <__assert_fail@plt+0x28b8>
   121a0:	ldr	r0, [sl, #8]
   121a4:	cmp	r0, #0
   121a8:	bne	13750 <__assert_fail@plt+0x28e4>
   121ac:	ldr	r3, [r8, #16]
   121b0:	cmp	r3, #0
   121b4:	beq	121c8 <__assert_fail@plt+0x135c>
   121b8:	mov	r0, r8
   121bc:	bl	110e0 <__assert_fail@plt+0x274>
   121c0:	cmp	r0, #0
   121c4:	bne	11e9c <__assert_fail@plt+0x1030>
   121c8:	ldr	r0, [r8, #8]
   121cc:	cmp	r0, #0
   121d0:	bne	13714 <__assert_fail@plt+0x28a8>
   121d4:	ldr	r3, [r9, #16]
   121d8:	cmp	r3, #0
   121dc:	beq	121f0 <__assert_fail@plt+0x1384>
   121e0:	mov	r0, r9
   121e4:	bl	110e0 <__assert_fail@plt+0x274>
   121e8:	cmp	r0, #0
   121ec:	bne	11e9c <__assert_fail@plt+0x1030>
   121f0:	ldr	r8, [r9, #8]
   121f4:	cmp	r8, #0
   121f8:	bne	13668 <__assert_fail@plt+0x27fc>
   121fc:	ldr	r3, [r7, #16]
   12200:	cmp	r3, #0
   12204:	beq	12218 <__assert_fail@plt+0x13ac>
   12208:	mov	r0, r7
   1220c:	bl	110e0 <__assert_fail@plt+0x274>
   12210:	cmp	r0, #0
   12214:	bne	11e9c <__assert_fail@plt+0x1030>
   12218:	ldr	r8, [r7, #8]
   1221c:	cmp	r8, #0
   12220:	beq	12008 <__assert_fail@plt+0x119c>
   12224:	ldr	r7, [r8, #4]
   12228:	cmp	r7, #0
   1222c:	beq	13634 <__assert_fail@plt+0x27c8>
   12230:	ldr	r0, [r7, #4]
   12234:	cmp	r0, #0
   12238:	beq	135a0 <__assert_fail@plt+0x2734>
   1223c:	bl	11750 <__assert_fail@plt+0x8e4>
   12240:	cmp	r0, #0
   12244:	bne	11e9c <__assert_fail@plt+0x1030>
   12248:	ldr	r3, [r7, #16]
   1224c:	cmp	r3, #0
   12250:	bne	13620 <__assert_fail@plt+0x27b4>
   12254:	ldr	r0, [r7, #8]
   12258:	cmp	r0, #0
   1225c:	bne	135b8 <__assert_fail@plt+0x274c>
   12260:	ldr	r3, [r8, #16]
   12264:	cmp	r3, #0
   12268:	beq	1227c <__assert_fail@plt+0x1410>
   1226c:	mov	r0, r8
   12270:	bl	110e0 <__assert_fail@plt+0x274>
   12274:	cmp	r0, #0
   12278:	bne	11e9c <__assert_fail@plt+0x1030>
   1227c:	ldr	r7, [r8, #8]
   12280:	cmp	r7, #0
   12284:	beq	12008 <__assert_fail@plt+0x119c>
   12288:	ldr	r0, [r7, #4]
   1228c:	cmp	r0, #0
   12290:	beq	137b0 <__assert_fail@plt+0x2944>
   12294:	bl	11750 <__assert_fail@plt+0x8e4>
   12298:	cmp	r0, #0
   1229c:	bne	11e9c <__assert_fail@plt+0x1030>
   122a0:	ldr	r3, [r7, #16]
   122a4:	cmp	r3, #0
   122a8:	bne	137c8 <__assert_fail@plt+0x295c>
   122ac:	ldr	r0, [r7, #8]
   122b0:	cmp	r0, #0
   122b4:	beq	12008 <__assert_fail@plt+0x119c>
   122b8:	bl	11750 <__assert_fail@plt+0x8e4>
   122bc:	cmp	r0, #0
   122c0:	beq	12008 <__assert_fail@plt+0x119c>
   122c4:	b	11e9c <__assert_fail@plt+0x1030>
   122c8:	ldr	r8, [sl, #8]
   122cc:	cmp	r8, #0
   122d0:	beq	132f4 <__assert_fail@plt+0x2488>
   122d4:	ldr	r3, [sl, #16]
   122d8:	cmp	r3, #0
   122dc:	beq	128d8 <__assert_fail@plt+0x1a6c>
   122e0:	mov	r0, sl
   122e4:	bl	110e0 <__assert_fail@plt+0x274>
   122e8:	cmp	r0, #0
   122ec:	bne	11e9c <__assert_fail@plt+0x1030>
   122f0:	b	11e4c <__assert_fail@plt+0xfe0>
   122f4:	ldr	r7, [r8, #8]
   122f8:	cmp	r7, #0
   122fc:	beq	13348 <__assert_fail@plt+0x24dc>
   12300:	ldr	r3, [r8, #16]
   12304:	cmp	r3, #0
   12308:	beq	12158 <__assert_fail@plt+0x12ec>
   1230c:	mov	r0, r8
   12310:	bl	110e0 <__assert_fail@plt+0x274>
   12314:	cmp	r0, #0
   12318:	bne	11e9c <__assert_fail@plt+0x1030>
   1231c:	b	1214c <__assert_fail@plt+0x12e0>
   12320:	ldr	r8, [r9, #8]
   12324:	cmp	r8, #0
   12328:	beq	13308 <__assert_fail@plt+0x249c>
   1232c:	ldr	r3, [r9, #16]
   12330:	cmp	r3, #0
   12334:	beq	1275c <__assert_fail@plt+0x18f0>
   12338:	mov	r0, r9
   1233c:	bl	110e0 <__assert_fail@plt+0x274>
   12340:	cmp	r0, #0
   12344:	bne	11e9c <__assert_fail@plt+0x1030>
   12348:	b	11fc4 <__assert_fail@plt+0x1158>
   1234c:	movw	r1, #40200	; 0x9d08
   12350:	movt	r1, #1
   12354:	ldr	r3, [pc, #3240]	; 13004 <__assert_fail@plt+0x2198>
   12358:	movw	r0, #40288	; 0x9d60
   1235c:	movt	r0, #1
   12360:	mov	r2, #177	; 0xb1
   12364:	bl	10e6c <__assert_fail@plt>
   12368:	movw	r1, #40200	; 0x9d08
   1236c:	movt	r1, #1
   12370:	ldr	r3, [pc, #3212]	; 13004 <__assert_fail@plt+0x2198>
   12374:	movw	r0, #40224	; 0x9d20
   12378:	movt	r0, #1
   1237c:	mov	r2, #140	; 0x8c
   12380:	bl	10e6c <__assert_fail@plt>
   12384:	ldr	r8, [r9, #8]
   12388:	cmp	r8, #0
   1238c:	beq	138b4 <__assert_fail@plt+0x2a48>
   12390:	ldr	r3, [r9, #16]
   12394:	cmp	r3, #0
   12398:	bne	11e64 <__assert_fail@plt+0xff8>
   1239c:	ldr	sl, [r8, #4]
   123a0:	cmp	sl, #0
   123a4:	beq	12ce4 <__assert_fail@plt+0x1e78>
   123a8:	ldr	fp, [sl, #4]
   123ac:	cmp	fp, #0
   123b0:	beq	13ad4 <__assert_fail@plt+0x2c68>
   123b4:	ldr	r9, [fp, #4]
   123b8:	cmp	r9, #0
   123bc:	beq	13a68 <__assert_fail@plt+0x2bfc>
   123c0:	ldr	r0, [r9, #4]
   123c4:	cmp	r0, #0
   123c8:	beq	13a2c <__assert_fail@plt+0x2bc0>
   123cc:	bl	11750 <__assert_fail@plt+0x8e4>
   123d0:	cmp	r0, #0
   123d4:	bne	11e9c <__assert_fail@plt+0x1030>
   123d8:	ldr	r3, [r9, #16]
   123dc:	cmp	r3, #0
   123e0:	bne	13a18 <__assert_fail@plt+0x2bac>
   123e4:	ldr	r0, [r9, #8]
   123e8:	cmp	r0, #0
   123ec:	bne	13a44 <__assert_fail@plt+0x2bd8>
   123f0:	ldr	r3, [fp, #16]
   123f4:	cmp	r3, #0
   123f8:	beq	1240c <__assert_fail@plt+0x15a0>
   123fc:	mov	r0, fp
   12400:	bl	110e0 <__assert_fail@plt+0x274>
   12404:	cmp	r0, #0
   12408:	bne	11e9c <__assert_fail@plt+0x1030>
   1240c:	ldr	r9, [fp, #8]
   12410:	cmp	r9, #0
   12414:	bne	13a80 <__assert_fail@plt+0x2c14>
   12418:	ldr	r3, [sl, #16]
   1241c:	cmp	r3, #0
   12420:	beq	12434 <__assert_fail@plt+0x15c8>
   12424:	mov	r0, sl
   12428:	bl	110e0 <__assert_fail@plt+0x274>
   1242c:	cmp	r0, #0
   12430:	bne	11e9c <__assert_fail@plt+0x1030>
   12434:	ldr	r9, [sl, #8]
   12438:	cmp	r9, #0
   1243c:	bne	13aec <__assert_fail@plt+0x2c80>
   12440:	ldr	r3, [r8, #16]
   12444:	cmp	r3, #0
   12448:	beq	1245c <__assert_fail@plt+0x15f0>
   1244c:	mov	r0, r8
   12450:	bl	110e0 <__assert_fail@plt+0x274>
   12454:	cmp	r0, #0
   12458:	bne	11e9c <__assert_fail@plt+0x1030>
   1245c:	ldr	r9, [r8, #8]
   12460:	cmp	r9, #0
   12464:	beq	11e80 <__assert_fail@plt+0x1014>
   12468:	ldr	r8, [r9, #4]
   1246c:	cmp	r8, #0
   12470:	beq	13bf4 <__assert_fail@plt+0x2d88>
   12474:	ldr	sl, [r8, #4]
   12478:	cmp	sl, #0
   1247c:	beq	14190 <__assert_fail@plt+0x3324>
   12480:	ldr	r0, [sl, #4]
   12484:	cmp	r0, #0
   12488:	beq	14154 <__assert_fail@plt+0x32e8>
   1248c:	bl	11750 <__assert_fail@plt+0x8e4>
   12490:	cmp	r0, #0
   12494:	bne	11e9c <__assert_fail@plt+0x1030>
   12498:	ldr	r3, [sl, #16]
   1249c:	cmp	r3, #0
   124a0:	bne	1417c <__assert_fail@plt+0x3310>
   124a4:	ldr	r0, [sl, #8]
   124a8:	cmp	r0, #0
   124ac:	bne	1416c <__assert_fail@plt+0x3300>
   124b0:	ldr	r3, [r8, #16]
   124b4:	cmp	r3, #0
   124b8:	beq	124cc <__assert_fail@plt+0x1660>
   124bc:	mov	r0, r8
   124c0:	bl	110e0 <__assert_fail@plt+0x274>
   124c4:	cmp	r0, #0
   124c8:	bne	11e9c <__assert_fail@plt+0x1030>
   124cc:	ldr	r0, [r8, #8]
   124d0:	cmp	r0, #0
   124d4:	bne	141a8 <__assert_fail@plt+0x333c>
   124d8:	ldr	r3, [r9, #16]
   124dc:	cmp	r3, #0
   124e0:	beq	124f4 <__assert_fail@plt+0x1688>
   124e4:	mov	r0, r9
   124e8:	bl	110e0 <__assert_fail@plt+0x274>
   124ec:	cmp	r0, #0
   124f0:	bne	11e9c <__assert_fail@plt+0x1030>
   124f4:	ldr	r8, [r9, #8]
   124f8:	cmp	r8, #0
   124fc:	beq	11e80 <__assert_fail@plt+0x1014>
   12500:	ldr	r0, [r8, #4]
   12504:	cmp	r0, #0
   12508:	beq	14000 <__assert_fail@plt+0x3194>
   1250c:	bl	11750 <__assert_fail@plt+0x8e4>
   12510:	cmp	r0, #0
   12514:	bne	11e9c <__assert_fail@plt+0x1030>
   12518:	ldr	r3, [r8, #16]
   1251c:	cmp	r3, #0
   12520:	bne	14018 <__assert_fail@plt+0x31ac>
   12524:	ldr	r0, [r8, #8]
   12528:	cmp	r0, #0
   1252c:	beq	11e80 <__assert_fail@plt+0x1014>
   12530:	bl	11750 <__assert_fail@plt+0x8e4>
   12534:	cmp	r0, #0
   12538:	beq	11e80 <__assert_fail@plt+0x1014>
   1253c:	b	11e9c <__assert_fail@plt+0x1030>
   12540:	ldr	r8, [r7, #8]
   12544:	cmp	r8, #0
   12548:	beq	13894 <__assert_fail@plt+0x2a28>
   1254c:	ldr	r3, [r7, #16]
   12550:	cmp	r3, #0
   12554:	bne	11fdc <__assert_fail@plt+0x1170>
   12558:	ldr	r9, [r8, #4]
   1255c:	cmp	r9, #0
   12560:	beq	12cc8 <__assert_fail@plt+0x1e5c>
   12564:	ldr	sl, [r9, #4]
   12568:	cmp	sl, #0
   1256c:	beq	12d3c <__assert_fail@plt+0x1ed0>
   12570:	ldr	r7, [sl, #4]
   12574:	cmp	r7, #0
   12578:	beq	13008 <__assert_fail@plt+0x219c>
   1257c:	ldr	fp, [r7, #4]
   12580:	cmp	fp, #0
   12584:	beq	12e90 <__assert_fail@plt+0x2024>
   12588:	ldr	r0, [fp, #4]
   1258c:	cmp	r0, #0
   12590:	beq	12eb8 <__assert_fail@plt+0x204c>
   12594:	bl	11750 <__assert_fail@plt+0x8e4>
   12598:	cmp	r0, #0
   1259c:	bne	11e9c <__assert_fail@plt+0x1030>
   125a0:	ldr	r3, [fp, #16]
   125a4:	cmp	r3, #0
   125a8:	bne	12ee0 <__assert_fail@plt+0x2074>
   125ac:	ldr	r0, [fp, #8]
   125b0:	cmp	r0, #0
   125b4:	bne	12ed0 <__assert_fail@plt+0x2064>
   125b8:	ldr	r3, [r7, #16]
   125bc:	cmp	r3, #0
   125c0:	beq	125d4 <__assert_fail@plt+0x1768>
   125c4:	mov	r0, r7
   125c8:	bl	110e0 <__assert_fail@plt+0x274>
   125cc:	cmp	r0, #0
   125d0:	bne	11e9c <__assert_fail@plt+0x1030>
   125d4:	ldr	r0, [r7, #8]
   125d8:	cmp	r0, #0
   125dc:	bne	12ea8 <__assert_fail@plt+0x203c>
   125e0:	ldr	r3, [sl, #16]
   125e4:	cmp	r3, #0
   125e8:	beq	125fc <__assert_fail@plt+0x1790>
   125ec:	mov	r0, sl
   125f0:	bl	110e0 <__assert_fail@plt+0x274>
   125f4:	cmp	r0, #0
   125f8:	bne	11e9c <__assert_fail@plt+0x1030>
   125fc:	ldr	r7, [sl, #8]
   12600:	cmp	r7, #0
   12604:	bne	13020 <__assert_fail@plt+0x21b4>
   12608:	ldr	r3, [r9, #16]
   1260c:	cmp	r3, #0
   12610:	beq	12624 <__assert_fail@plt+0x17b8>
   12614:	mov	r0, r9
   12618:	bl	110e0 <__assert_fail@plt+0x274>
   1261c:	cmp	r0, #0
   12620:	bne	11e9c <__assert_fail@plt+0x1030>
   12624:	ldr	r7, [r9, #8]
   12628:	cmp	r7, #0
   1262c:	bne	12d54 <__assert_fail@plt+0x1ee8>
   12630:	ldr	r3, [r8, #16]
   12634:	cmp	r3, #0
   12638:	beq	1264c <__assert_fail@plt+0x17e0>
   1263c:	mov	r0, r8
   12640:	bl	110e0 <__assert_fail@plt+0x274>
   12644:	cmp	r0, #0
   12648:	bne	11e9c <__assert_fail@plt+0x1030>
   1264c:	ldr	r7, [r8, #8]
   12650:	cmp	r7, #0
   12654:	beq	11e9c <__assert_fail@plt+0x1030>
   12658:	ldr	r9, [r7, #4]
   1265c:	cmp	r9, #0
   12660:	beq	13eb4 <__assert_fail@plt+0x3048>
   12664:	ldr	r8, [r9, #4]
   12668:	cmp	r8, #0
   1266c:	beq	13df4 <__assert_fail@plt+0x2f88>
   12670:	ldr	r0, [r8, #4]
   12674:	cmp	r0, #0
   12678:	beq	13e4c <__assert_fail@plt+0x2fe0>
   1267c:	bl	11750 <__assert_fail@plt+0x8e4>
   12680:	cmp	r0, #0
   12684:	bne	11e9c <__assert_fail@plt+0x1030>
   12688:	ldr	r3, [r8, #16]
   1268c:	cmp	r3, #0
   12690:	bne	13ea0 <__assert_fail@plt+0x3034>
   12694:	ldr	r0, [r8, #8]
   12698:	cmp	r0, #0
   1269c:	bne	13e64 <__assert_fail@plt+0x2ff8>
   126a0:	ldr	r3, [r9, #16]
   126a4:	cmp	r3, #0
   126a8:	beq	126bc <__assert_fail@plt+0x1850>
   126ac:	mov	r0, r9
   126b0:	bl	110e0 <__assert_fail@plt+0x274>
   126b4:	cmp	r0, #0
   126b8:	bne	11e9c <__assert_fail@plt+0x1030>
   126bc:	ldr	r8, [r9, #8]
   126c0:	cmp	r8, #0
   126c4:	bne	13e0c <__assert_fail@plt+0x2fa0>
   126c8:	ldr	r3, [r7, #16]
   126cc:	cmp	r3, #0
   126d0:	beq	126e4 <__assert_fail@plt+0x1878>
   126d4:	mov	r0, r7
   126d8:	bl	110e0 <__assert_fail@plt+0x274>
   126dc:	cmp	r0, #0
   126e0:	bne	11e9c <__assert_fail@plt+0x1030>
   126e4:	ldr	r8, [r7, #8]
   126e8:	cmp	r8, #0
   126ec:	beq	11e9c <__assert_fail@plt+0x1030>
   126f0:	ldr	r7, [r8, #4]
   126f4:	cmp	r7, #0
   126f8:	beq	133ac <__assert_fail@plt+0x2540>
   126fc:	ldr	r0, [r7, #4]
   12700:	cmp	r0, #0
   12704:	beq	13370 <__assert_fail@plt+0x2504>
   12708:	bl	11750 <__assert_fail@plt+0x8e4>
   1270c:	cmp	r0, #0
   12710:	bne	11e9c <__assert_fail@plt+0x1030>
   12714:	ldr	r3, [r7, #16]
   12718:	cmp	r3, #0
   1271c:	bne	13398 <__assert_fail@plt+0x252c>
   12720:	ldr	r0, [r7, #8]
   12724:	cmp	r0, #0
   12728:	bne	13388 <__assert_fail@plt+0x251c>
   1272c:	ldr	r3, [r8, #16]
   12730:	cmp	r3, #0
   12734:	beq	12748 <__assert_fail@plt+0x18dc>
   12738:	mov	r0, r8
   1273c:	bl	110e0 <__assert_fail@plt+0x274>
   12740:	cmp	r0, #0
   12744:	bne	11e9c <__assert_fail@plt+0x1030>
   12748:	ldr	r0, [r8, #8]
   1274c:	cmp	r0, #0
   12750:	beq	11e9c <__assert_fail@plt+0x1030>
   12754:	bl	11750 <__assert_fail@plt+0x8e4>
   12758:	b	11e9c <__assert_fail@plt+0x1030>
   1275c:	ldr	sl, [r8, #4]
   12760:	cmp	sl, #0
   12764:	beq	137dc <__assert_fail@plt+0x2970>
   12768:	ldr	r9, [sl, #4]
   1276c:	cmp	r9, #0
   12770:	beq	13cbc <__assert_fail@plt+0x2e50>
   12774:	ldr	fp, [r9, #4]
   12778:	cmp	fp, #0
   1277c:	beq	13d14 <__assert_fail@plt+0x2ea8>
   12780:	ldr	r0, [fp, #4]
   12784:	cmp	r0, #0
   12788:	beq	13d68 <__assert_fail@plt+0x2efc>
   1278c:	bl	11750 <__assert_fail@plt+0x8e4>
   12790:	cmp	r0, #0
   12794:	bne	11e9c <__assert_fail@plt+0x1030>
   12798:	ldr	r3, [fp, #16]
   1279c:	cmp	r3, #0
   127a0:	bne	13d90 <__assert_fail@plt+0x2f24>
   127a4:	ldr	r0, [fp, #8]
   127a8:	cmp	r0, #0
   127ac:	bne	13d80 <__assert_fail@plt+0x2f14>
   127b0:	ldr	r3, [r9, #16]
   127b4:	cmp	r3, #0
   127b8:	beq	127cc <__assert_fail@plt+0x1960>
   127bc:	mov	r0, r9
   127c0:	bl	110e0 <__assert_fail@plt+0x274>
   127c4:	cmp	r0, #0
   127c8:	bne	11e9c <__assert_fail@plt+0x1030>
   127cc:	ldr	r0, [r9, #8]
   127d0:	cmp	r0, #0
   127d4:	bne	13d2c <__assert_fail@plt+0x2ec0>
   127d8:	ldr	r3, [sl, #16]
   127dc:	cmp	r3, #0
   127e0:	beq	127f4 <__assert_fail@plt+0x1988>
   127e4:	mov	r0, sl
   127e8:	bl	110e0 <__assert_fail@plt+0x274>
   127ec:	cmp	r0, #0
   127f0:	bne	11e9c <__assert_fail@plt+0x1030>
   127f4:	ldr	r9, [sl, #8]
   127f8:	cmp	r9, #0
   127fc:	bne	13cd4 <__assert_fail@plt+0x2e68>
   12800:	ldr	r3, [r8, #16]
   12804:	cmp	r3, #0
   12808:	beq	1281c <__assert_fail@plt+0x19b0>
   1280c:	mov	r0, r8
   12810:	bl	110e0 <__assert_fail@plt+0x274>
   12814:	cmp	r0, #0
   12818:	bne	11e9c <__assert_fail@plt+0x1030>
   1281c:	ldr	r9, [r8, #8]
   12820:	cmp	r9, #0
   12824:	beq	11fd0 <__assert_fail@plt+0x1164>
   12828:	ldr	r8, [r9, #4]
   1282c:	cmp	r8, #0
   12830:	beq	13c78 <__assert_fail@plt+0x2e0c>
   12834:	ldr	r0, [r8, #4]
   12838:	cmp	r0, #0
   1283c:	beq	13c4c <__assert_fail@plt+0x2de0>
   12840:	bl	11750 <__assert_fail@plt+0x8e4>
   12844:	cmp	r0, #0
   12848:	bne	11e9c <__assert_fail@plt+0x1030>
   1284c:	ldr	r3, [r8, #16]
   12850:	cmp	r3, #0
   12854:	bne	13c64 <__assert_fail@plt+0x2df8>
   12858:	ldr	r0, [r8, #8]
   1285c:	cmp	r0, #0
   12860:	bne	13c3c <__assert_fail@plt+0x2dd0>
   12864:	ldr	r3, [r9, #16]
   12868:	cmp	r3, #0
   1286c:	beq	12880 <__assert_fail@plt+0x1a14>
   12870:	mov	r0, r9
   12874:	bl	110e0 <__assert_fail@plt+0x274>
   12878:	cmp	r0, #0
   1287c:	bne	11e9c <__assert_fail@plt+0x1030>
   12880:	ldr	r8, [r9, #8]
   12884:	cmp	r8, #0
   12888:	beq	11fd0 <__assert_fail@plt+0x1164>
   1288c:	ldr	r0, [r8, #4]
   12890:	cmp	r0, #0
   12894:	beq	13868 <__assert_fail@plt+0x29fc>
   12898:	bl	11750 <__assert_fail@plt+0x8e4>
   1289c:	cmp	r0, #0
   128a0:	bne	11e9c <__assert_fail@plt+0x1030>
   128a4:	ldr	r3, [r8, #16]
   128a8:	cmp	r3, #0
   128ac:	bne	13880 <__assert_fail@plt+0x2a14>
   128b0:	ldr	r0, [r8, #8]
   128b4:	cmp	r0, #0
   128b8:	beq	11fd0 <__assert_fail@plt+0x1164>
   128bc:	bl	11750 <__assert_fail@plt+0x8e4>
   128c0:	cmp	r0, #0
   128c4:	beq	11fd0 <__assert_fail@plt+0x1164>
   128c8:	b	11e9c <__assert_fail@plt+0x1030>
   128cc:	mov	r0, r6
   128d0:	bl	115f0 <__assert_fail@plt+0x784>
   128d4:	b	11e9c <__assert_fail@plt+0x1030>
   128d8:	ldr	fp, [r8, #4]
   128dc:	cmp	fp, #0
   128e0:	beq	137f8 <__assert_fail@plt+0x298c>
   128e4:	ldr	sl, [fp, #4]
   128e8:	cmp	sl, #0
   128ec:	beq	134e0 <__assert_fail@plt+0x2674>
   128f0:	ldr	r0, [sl, #4]
   128f4:	cmp	r0, #0
   128f8:	beq	13538 <__assert_fail@plt+0x26cc>
   128fc:	bl	11750 <__assert_fail@plt+0x8e4>
   12900:	cmp	r0, #0
   12904:	bne	11e9c <__assert_fail@plt+0x1030>
   12908:	ldr	r3, [sl, #16]
   1290c:	cmp	r3, #0
   12910:	bne	13560 <__assert_fail@plt+0x26f4>
   12914:	ldr	r0, [sl, #8]
   12918:	cmp	r0, #0
   1291c:	bne	13550 <__assert_fail@plt+0x26e4>
   12920:	ldr	r3, [fp, #16]
   12924:	cmp	r3, #0
   12928:	beq	1293c <__assert_fail@plt+0x1ad0>
   1292c:	mov	r0, fp
   12930:	bl	110e0 <__assert_fail@plt+0x274>
   12934:	cmp	r0, #0
   12938:	bne	11e9c <__assert_fail@plt+0x1030>
   1293c:	ldr	sl, [fp, #8]
   12940:	cmp	sl, #0
   12944:	bne	134f8 <__assert_fail@plt+0x268c>
   12948:	ldr	r3, [r8, #16]
   1294c:	cmp	r3, #0
   12950:	beq	12964 <__assert_fail@plt+0x1af8>
   12954:	mov	r0, r8
   12958:	bl	110e0 <__assert_fail@plt+0x274>
   1295c:	cmp	r0, #0
   12960:	bne	11e9c <__assert_fail@plt+0x1030>
   12964:	ldr	sl, [r8, #8]
   12968:	cmp	sl, #0
   1296c:	beq	11e58 <__assert_fail@plt+0xfec>
   12970:	ldr	r8, [sl, #4]
   12974:	cmp	r8, #0
   12978:	beq	134c4 <__assert_fail@plt+0x2658>
   1297c:	ldr	r0, [r8, #4]
   12980:	cmp	r0, #0
   12984:	beq	132a4 <__assert_fail@plt+0x2438>
   12988:	bl	11750 <__assert_fail@plt+0x8e4>
   1298c:	cmp	r0, #0
   12990:	bne	11e9c <__assert_fail@plt+0x1030>
   12994:	ldr	r3, [r8, #16]
   12998:	cmp	r3, #0
   1299c:	bne	13290 <__assert_fail@plt+0x2424>
   129a0:	ldr	r0, [r8, #8]
   129a4:	cmp	r0, #0
   129a8:	bne	132bc <__assert_fail@plt+0x2450>
   129ac:	ldr	r3, [sl, #16]
   129b0:	cmp	r3, #0
   129b4:	beq	129c8 <__assert_fail@plt+0x1b5c>
   129b8:	mov	r0, sl
   129bc:	bl	110e0 <__assert_fail@plt+0x274>
   129c0:	cmp	r0, #0
   129c4:	bne	11e9c <__assert_fail@plt+0x1030>
   129c8:	ldr	r0, [sl, #8]
   129cc:	cmp	r0, #0
   129d0:	beq	11e58 <__assert_fail@plt+0xfec>
   129d4:	bl	11750 <__assert_fail@plt+0x8e4>
   129d8:	cmp	r0, #0
   129dc:	beq	11e58 <__assert_fail@plt+0xfec>
   129e0:	b	11e9c <__assert_fail@plt+0x1030>
   129e4:	ldr	r8, [sl, #8]
   129e8:	cmp	r8, #0
   129ec:	beq	142e0 <__assert_fail@plt+0x3474>
   129f0:	ldr	r3, [sl, #16]
   129f4:	cmp	r3, #0
   129f8:	bne	11f9c <__assert_fail@plt+0x1130>
   129fc:	ldr	sl, [r8, #4]
   12a00:	cmp	sl, #0
   12a04:	beq	142c4 <__assert_fail@plt+0x3458>
   12a08:	ldr	fp, [sl, #4]
   12a0c:	cmp	fp, #0
   12a10:	beq	14118 <__assert_fail@plt+0x32ac>
   12a14:	ldr	r0, [fp, #4]
   12a18:	cmp	r0, #0
   12a1c:	beq	14308 <__assert_fail@plt+0x349c>
   12a20:	bl	11750 <__assert_fail@plt+0x8e4>
   12a24:	cmp	r0, #0
   12a28:	bne	11e9c <__assert_fail@plt+0x1030>
   12a2c:	ldr	r3, [fp, #16]
   12a30:	cmp	r3, #0
   12a34:	bne	14320 <__assert_fail@plt+0x34b4>
   12a38:	ldr	r0, [fp, #8]
   12a3c:	cmp	r0, #0
   12a40:	bne	13a08 <__assert_fail@plt+0x2b9c>
   12a44:	ldr	r3, [sl, #16]
   12a48:	cmp	r3, #0
   12a4c:	beq	12a60 <__assert_fail@plt+0x1bf4>
   12a50:	mov	r0, sl
   12a54:	bl	110e0 <__assert_fail@plt+0x274>
   12a58:	cmp	r0, #0
   12a5c:	bne	11e9c <__assert_fail@plt+0x1030>
   12a60:	ldr	r0, [sl, #8]
   12a64:	cmp	r0, #0
   12a68:	bne	14130 <__assert_fail@plt+0x32c4>
   12a6c:	ldr	r3, [r8, #16]
   12a70:	cmp	r3, #0
   12a74:	beq	12a88 <__assert_fail@plt+0x1c1c>
   12a78:	mov	r0, r8
   12a7c:	bl	110e0 <__assert_fail@plt+0x274>
   12a80:	cmp	r0, #0
   12a84:	bne	11e9c <__assert_fail@plt+0x1030>
   12a88:	ldr	sl, [r8, #8]
   12a8c:	cmp	sl, #0
   12a90:	beq	11fb8 <__assert_fail@plt+0x114c>
   12a94:	ldr	r8, [sl, #4]
   12a98:	cmp	r8, #0
   12a9c:	beq	140fc <__assert_fail@plt+0x3290>
   12aa0:	ldr	r0, [r8, #4]
   12aa4:	cmp	r0, #0
   12aa8:	beq	138fc <__assert_fail@plt+0x2a90>
   12aac:	bl	11750 <__assert_fail@plt+0x8e4>
   12ab0:	cmp	r0, #0
   12ab4:	bne	11e9c <__assert_fail@plt+0x1030>
   12ab8:	ldr	r3, [r8, #16]
   12abc:	cmp	r3, #0
   12ac0:	bne	140e8 <__assert_fail@plt+0x327c>
   12ac4:	ldr	r0, [r8, #8]
   12ac8:	cmp	r0, #0
   12acc:	bne	13914 <__assert_fail@plt+0x2aa8>
   12ad0:	ldr	r3, [sl, #16]
   12ad4:	cmp	r3, #0
   12ad8:	beq	12aec <__assert_fail@plt+0x1c80>
   12adc:	mov	r0, sl
   12ae0:	bl	110e0 <__assert_fail@plt+0x274>
   12ae4:	cmp	r0, #0
   12ae8:	bne	11e9c <__assert_fail@plt+0x1030>
   12aec:	ldr	r0, [sl, #8]
   12af0:	cmp	r0, #0
   12af4:	beq	11fb8 <__assert_fail@plt+0x114c>
   12af8:	bl	11750 <__assert_fail@plt+0x8e4>
   12afc:	cmp	r0, #0
   12b00:	beq	11fb8 <__assert_fail@plt+0x114c>
   12b04:	b	11e9c <__assert_fail@plt+0x1030>
   12b08:	ldr	r7, [r9, #8]
   12b0c:	cmp	r7, #0
   12b10:	beq	140c0 <__assert_fail@plt+0x3254>
   12b14:	ldr	r3, [r9, #16]
   12b18:	cmp	r3, #0
   12b1c:	bne	12124 <__assert_fail@plt+0x12b8>
   12b20:	ldr	r9, [r7, #4]
   12b24:	cmp	r9, #0
   12b28:	beq	140a4 <__assert_fail@plt+0x3238>
   12b2c:	ldr	sl, [r9, #4]
   12b30:	cmp	sl, #0
   12b34:	beq	141e0 <__assert_fail@plt+0x3374>
   12b38:	ldr	r0, [sl, #4]
   12b3c:	cmp	r0, #0
   12b40:	beq	14068 <__assert_fail@plt+0x31fc>
   12b44:	bl	11750 <__assert_fail@plt+0x8e4>
   12b48:	cmp	r0, #0
   12b4c:	bne	11e9c <__assert_fail@plt+0x1030>
   12b50:	ldr	r3, [sl, #16]
   12b54:	cmp	r3, #0
   12b58:	bne	1421c <__assert_fail@plt+0x33b0>
   12b5c:	ldr	r0, [sl, #8]
   12b60:	cmp	r0, #0
   12b64:	bne	14080 <__assert_fail@plt+0x3214>
   12b68:	ldr	r3, [r9, #16]
   12b6c:	cmp	r3, #0
   12b70:	beq	12b84 <__assert_fail@plt+0x1d18>
   12b74:	mov	r0, r9
   12b78:	bl	110e0 <__assert_fail@plt+0x274>
   12b7c:	cmp	r0, #0
   12b80:	bne	11e9c <__assert_fail@plt+0x1030>
   12b84:	ldr	r0, [r9, #8]
   12b88:	cmp	r0, #0
   12b8c:	bne	141f8 <__assert_fail@plt+0x338c>
   12b90:	ldr	r3, [r7, #16]
   12b94:	cmp	r3, #0
   12b98:	beq	12bac <__assert_fail@plt+0x1d40>
   12b9c:	mov	r0, r7
   12ba0:	bl	110e0 <__assert_fail@plt+0x274>
   12ba4:	cmp	r0, #0
   12ba8:	bne	11e9c <__assert_fail@plt+0x1030>
   12bac:	ldr	r9, [r7, #8]
   12bb0:	cmp	r9, #0
   12bb4:	beq	12140 <__assert_fail@plt+0x12d4>
   12bb8:	ldr	r0, [r9, #4]
   12bbc:	cmp	r0, #0
   12bc0:	beq	1331c <__assert_fail@plt+0x24b0>
   12bc4:	bl	11750 <__assert_fail@plt+0x8e4>
   12bc8:	cmp	r0, #0
   12bcc:	bne	11e9c <__assert_fail@plt+0x1030>
   12bd0:	ldr	r3, [r9, #16]
   12bd4:	cmp	r3, #0
   12bd8:	bne	13334 <__assert_fail@plt+0x24c8>
   12bdc:	ldr	r0, [r9, #8]
   12be0:	cmp	r0, #0
   12be4:	beq	12140 <__assert_fail@plt+0x12d4>
   12be8:	bl	11750 <__assert_fail@plt+0x8e4>
   12bec:	cmp	r0, #0
   12bf0:	beq	12140 <__assert_fail@plt+0x12d4>
   12bf4:	b	11e9c <__assert_fail@plt+0x1030>
   12bf8:	ldr	r8, [fp, #8]
   12bfc:	cmp	r8, #0
   12c00:	beq	14274 <__assert_fail@plt+0x3408>
   12c04:	ldr	r3, [fp, #16]
   12c08:	cmp	r3, #0
   12c0c:	bne	11e24 <__assert_fail@plt+0xfb8>
   12c10:	ldr	fp, [r8, #4]
   12c14:	cmp	fp, #0
   12c18:	beq	14258 <__assert_fail@plt+0x33ec>
   12c1c:	ldr	r0, [fp, #4]
   12c20:	cmp	r0, #0
   12c24:	beq	12d00 <__assert_fail@plt+0x1e94>
   12c28:	bl	11750 <__assert_fail@plt+0x8e4>
   12c2c:	cmp	r0, #0
   12c30:	bne	11e9c <__assert_fail@plt+0x1030>
   12c34:	ldr	r3, [fp, #16]
   12c38:	cmp	r3, #0
   12c3c:	bne	12e7c <__assert_fail@plt+0x2010>
   12c40:	ldr	r0, [fp, #8]
   12c44:	cmp	r0, #0
   12c48:	bne	12d18 <__assert_fail@plt+0x1eac>
   12c4c:	ldr	r3, [r8, #16]
   12c50:	cmp	r3, #0
   12c54:	beq	12c68 <__assert_fail@plt+0x1dfc>
   12c58:	mov	r0, r8
   12c5c:	bl	110e0 <__assert_fail@plt+0x274>
   12c60:	cmp	r0, #0
   12c64:	bne	11e9c <__assert_fail@plt+0x1030>
   12c68:	ldr	fp, [r8, #8]
   12c6c:	cmp	fp, #0
   12c70:	beq	11e40 <__assert_fail@plt+0xfd4>
   12c74:	ldr	r0, [fp, #4]
   12c78:	cmp	r0, #0
   12c7c:	beq	1383c <__assert_fail@plt+0x29d0>
   12c80:	bl	11750 <__assert_fail@plt+0x8e4>
   12c84:	cmp	r0, #0
   12c88:	bne	11e9c <__assert_fail@plt+0x1030>
   12c8c:	ldr	r3, [fp, #16]
   12c90:	cmp	r3, #0
   12c94:	bne	13854 <__assert_fail@plt+0x29e8>
   12c98:	ldr	r0, [fp, #8]
   12c9c:	cmp	r0, #0
   12ca0:	beq	11e40 <__assert_fail@plt+0xfd4>
   12ca4:	bl	11750 <__assert_fail@plt+0x8e4>
   12ca8:	cmp	r0, #0
   12cac:	beq	11e40 <__assert_fail@plt+0xfd4>
   12cb0:	b	11e9c <__assert_fail@plt+0x1030>
   12cb4:	mov	r0, r7
   12cb8:	bl	115f0 <__assert_fail@plt+0x784>
   12cbc:	cmp	r0, #0
   12cc0:	beq	12008 <__assert_fail@plt+0x119c>
   12cc4:	b	11e9c <__assert_fail@plt+0x1030>
   12cc8:	ldr	r7, [r8, #8]
   12ccc:	cmp	r7, #0
   12cd0:	beq	138c8 <__assert_fail@plt+0x2a5c>
   12cd4:	ldr	r3, [r8, #16]
   12cd8:	cmp	r3, #0
   12cdc:	beq	12658 <__assert_fail@plt+0x17ec>
   12ce0:	b	1263c <__assert_fail@plt+0x17d0>
   12ce4:	ldr	r9, [r8, #8]
   12ce8:	cmp	r9, #0
   12cec:	beq	12d28 <__assert_fail@plt+0x1ebc>
   12cf0:	ldr	r3, [r8, #16]
   12cf4:	cmp	r3, #0
   12cf8:	beq	12468 <__assert_fail@plt+0x15fc>
   12cfc:	b	1244c <__assert_fail@plt+0x15e0>
   12d00:	ldr	r0, [fp, #8]
   12d04:	cmp	r0, #0
   12d08:	beq	142b0 <__assert_fail@plt+0x3444>
   12d0c:	ldr	r3, [fp, #16]
   12d10:	cmp	r3, #0
   12d14:	bne	12e7c <__assert_fail@plt+0x2010>
   12d18:	bl	11750 <__assert_fail@plt+0x8e4>
   12d1c:	cmp	r0, #0
   12d20:	beq	12c4c <__assert_fail@plt+0x1de0>
   12d24:	b	11e9c <__assert_fail@plt+0x1030>
   12d28:	mov	r0, r8
   12d2c:	bl	115f0 <__assert_fail@plt+0x784>
   12d30:	cmp	r0, #0
   12d34:	beq	11e80 <__assert_fail@plt+0x1014>
   12d38:	b	11e9c <__assert_fail@plt+0x1030>
   12d3c:	ldr	r7, [r9, #8]
   12d40:	cmp	r7, #0
   12d44:	beq	138d4 <__assert_fail@plt+0x2a68>
   12d48:	ldr	r3, [r9, #16]
   12d4c:	cmp	r3, #0
   12d50:	bne	12614 <__assert_fail@plt+0x17a8>
   12d54:	ldr	r9, [r7, #4]
   12d58:	cmp	r9, #0
   12d5c:	beq	12e60 <__assert_fail@plt+0x1ff4>
   12d60:	ldr	r0, [r9, #4]
   12d64:	cmp	r0, #0
   12d68:	beq	12df8 <__assert_fail@plt+0x1f8c>
   12d6c:	bl	11750 <__assert_fail@plt+0x8e4>
   12d70:	cmp	r0, #0
   12d74:	bne	11e9c <__assert_fail@plt+0x1030>
   12d78:	ldr	r3, [r9, #16]
   12d7c:	cmp	r3, #0
   12d80:	bne	12e4c <__assert_fail@plt+0x1fe0>
   12d84:	ldr	r0, [r9, #8]
   12d88:	cmp	r0, #0
   12d8c:	bne	12e10 <__assert_fail@plt+0x1fa4>
   12d90:	ldr	r3, [r7, #16]
   12d94:	cmp	r3, #0
   12d98:	beq	12dac <__assert_fail@plt+0x1f40>
   12d9c:	mov	r0, r7
   12da0:	bl	110e0 <__assert_fail@plt+0x274>
   12da4:	cmp	r0, #0
   12da8:	bne	11e9c <__assert_fail@plt+0x1030>
   12dac:	ldr	r9, [r7, #8]
   12db0:	cmp	r9, #0
   12db4:	beq	12630 <__assert_fail@plt+0x17c4>
   12db8:	ldr	r0, [r9, #4]
   12dbc:	cmp	r0, #0
   12dc0:	beq	12e20 <__assert_fail@plt+0x1fb4>
   12dc4:	bl	11750 <__assert_fail@plt+0x8e4>
   12dc8:	cmp	r0, #0
   12dcc:	bne	11e9c <__assert_fail@plt+0x1030>
   12dd0:	ldr	r3, [r9, #16]
   12dd4:	cmp	r3, #0
   12dd8:	bne	12e38 <__assert_fail@plt+0x1fcc>
   12ddc:	ldr	r0, [r9, #8]
   12de0:	cmp	r0, #0
   12de4:	beq	12630 <__assert_fail@plt+0x17c4>
   12de8:	bl	11750 <__assert_fail@plt+0x8e4>
   12dec:	cmp	r0, #0
   12df0:	beq	12630 <__assert_fail@plt+0x17c4>
   12df4:	b	11e9c <__assert_fail@plt+0x1030>
   12df8:	ldr	r0, [r9, #8]
   12dfc:	cmp	r0, #0
   12e00:	beq	138e8 <__assert_fail@plt+0x2a7c>
   12e04:	ldr	r3, [r9, #16]
   12e08:	cmp	r3, #0
   12e0c:	bne	12e4c <__assert_fail@plt+0x1fe0>
   12e10:	bl	11750 <__assert_fail@plt+0x8e4>
   12e14:	cmp	r0, #0
   12e18:	beq	12d90 <__assert_fail@plt+0x1f24>
   12e1c:	b	11e9c <__assert_fail@plt+0x1030>
   12e20:	ldr	r0, [r9, #8]
   12e24:	cmp	r0, #0
   12e28:	beq	138d4 <__assert_fail@plt+0x2a68>
   12e2c:	ldr	r3, [r9, #16]
   12e30:	cmp	r3, #0
   12e34:	beq	12de8 <__assert_fail@plt+0x1f7c>
   12e38:	mov	r0, r9
   12e3c:	bl	110e0 <__assert_fail@plt+0x274>
   12e40:	cmp	r0, #0
   12e44:	bne	11e9c <__assert_fail@plt+0x1030>
   12e48:	b	12ddc <__assert_fail@plt+0x1f70>
   12e4c:	mov	r0, r9
   12e50:	bl	110e0 <__assert_fail@plt+0x274>
   12e54:	cmp	r0, #0
   12e58:	bne	11e9c <__assert_fail@plt+0x1030>
   12e5c:	b	12d84 <__assert_fail@plt+0x1f18>
   12e60:	ldr	r9, [r7, #8]
   12e64:	cmp	r9, #0
   12e68:	beq	1429c <__assert_fail@plt+0x3430>
   12e6c:	ldr	r3, [r7, #16]
   12e70:	cmp	r3, #0
   12e74:	bne	12d9c <__assert_fail@plt+0x1f30>
   12e78:	b	12db8 <__assert_fail@plt+0x1f4c>
   12e7c:	mov	r0, fp
   12e80:	bl	110e0 <__assert_fail@plt+0x274>
   12e84:	cmp	r0, #0
   12e88:	bne	11e9c <__assert_fail@plt+0x1030>
   12e8c:	b	12c40 <__assert_fail@plt+0x1dd4>
   12e90:	ldr	r0, [r7, #8]
   12e94:	cmp	r0, #0
   12e98:	beq	130e0 <__assert_fail@plt+0x2274>
   12e9c:	ldr	r3, [r7, #16]
   12ea0:	cmp	r3, #0
   12ea4:	bne	125c4 <__assert_fail@plt+0x1758>
   12ea8:	bl	11750 <__assert_fail@plt+0x8e4>
   12eac:	cmp	r0, #0
   12eb0:	beq	125e0 <__assert_fail@plt+0x1774>
   12eb4:	b	11e9c <__assert_fail@plt+0x1030>
   12eb8:	ldr	r0, [fp, #8]
   12ebc:	cmp	r0, #0
   12ec0:	beq	13074 <__assert_fail@plt+0x2208>
   12ec4:	ldr	r3, [fp, #16]
   12ec8:	cmp	r3, #0
   12ecc:	bne	12ee0 <__assert_fail@plt+0x2074>
   12ed0:	bl	11750 <__assert_fail@plt+0x8e4>
   12ed4:	cmp	r0, #0
   12ed8:	beq	125b8 <__assert_fail@plt+0x174c>
   12edc:	b	11e9c <__assert_fail@plt+0x1030>
   12ee0:	mov	r0, fp
   12ee4:	bl	110e0 <__assert_fail@plt+0x274>
   12ee8:	cmp	r0, #0
   12eec:	bne	11e9c <__assert_fail@plt+0x1030>
   12ef0:	b	125ac <__assert_fail@plt+0x1740>
   12ef4:	ldr	r8, [fp, #8]
   12ef8:	cmp	r8, #0
   12efc:	beq	1335c <__assert_fail@plt+0x24f0>
   12f00:	ldr	r3, [fp, #16]
   12f04:	cmp	r3, #0
   12f08:	bne	11f74 <__assert_fail@plt+0x1108>
   12f0c:	ldr	fp, [r8, #4]
   12f10:	cmp	fp, #0
   12f14:	beq	12fbc <__assert_fail@plt+0x2150>
   12f18:	ldr	r0, [fp, #4]
   12f1c:	cmp	r0, #0
   12f20:	beq	12f80 <__assert_fail@plt+0x2114>
   12f24:	bl	11750 <__assert_fail@plt+0x8e4>
   12f28:	cmp	r0, #0
   12f2c:	bne	11e9c <__assert_fail@plt+0x1030>
   12f30:	ldr	r3, [fp, #16]
   12f34:	cmp	r3, #0
   12f38:	bne	12fa8 <__assert_fail@plt+0x213c>
   12f3c:	ldr	r0, [fp, #8]
   12f40:	cmp	r0, #0
   12f44:	bne	12f98 <__assert_fail@plt+0x212c>
   12f48:	ldr	r3, [r8, #16]
   12f4c:	cmp	r3, #0
   12f50:	beq	12f64 <__assert_fail@plt+0x20f8>
   12f54:	mov	r0, r8
   12f58:	bl	110e0 <__assert_fail@plt+0x274>
   12f5c:	cmp	r0, #0
   12f60:	bne	11e9c <__assert_fail@plt+0x1030>
   12f64:	ldr	r0, [r8, #8]
   12f68:	cmp	r0, #0
   12f6c:	beq	11f90 <__assert_fail@plt+0x1124>
   12f70:	bl	11750 <__assert_fail@plt+0x8e4>
   12f74:	cmp	r0, #0
   12f78:	beq	11f90 <__assert_fail@plt+0x1124>
   12f7c:	b	11e9c <__assert_fail@plt+0x1030>
   12f80:	ldr	r0, [fp, #8]
   12f84:	cmp	r0, #0
   12f88:	beq	12fd8 <__assert_fail@plt+0x216c>
   12f8c:	ldr	r3, [fp, #16]
   12f90:	cmp	r3, #0
   12f94:	bne	12fa8 <__assert_fail@plt+0x213c>
   12f98:	bl	11750 <__assert_fail@plt+0x8e4>
   12f9c:	cmp	r0, #0
   12fa0:	beq	12f48 <__assert_fail@plt+0x20dc>
   12fa4:	b	11e9c <__assert_fail@plt+0x1030>
   12fa8:	mov	r0, fp
   12fac:	bl	110e0 <__assert_fail@plt+0x274>
   12fb0:	cmp	r0, #0
   12fb4:	bne	11e9c <__assert_fail@plt+0x1030>
   12fb8:	b	12f3c <__assert_fail@plt+0x20d0>
   12fbc:	ldr	r0, [r8, #8]
   12fc0:	cmp	r0, #0
   12fc4:	beq	12fec <__assert_fail@plt+0x2180>
   12fc8:	ldr	r3, [r8, #16]
   12fcc:	cmp	r3, #0
   12fd0:	bne	12f54 <__assert_fail@plt+0x20e8>
   12fd4:	b	12f70 <__assert_fail@plt+0x2104>
   12fd8:	mov	r0, fp
   12fdc:	bl	115f0 <__assert_fail@plt+0x784>
   12fe0:	cmp	r0, #0
   12fe4:	beq	12f48 <__assert_fail@plt+0x20dc>
   12fe8:	b	11e9c <__assert_fail@plt+0x1030>
   12fec:	mov	r0, r8
   12ff0:	bl	115f0 <__assert_fail@plt+0x784>
   12ff4:	cmp	r0, #0
   12ff8:	beq	11f90 <__assert_fail@plt+0x1124>
   12ffc:	b	11e9c <__assert_fail@plt+0x1030>
   13000:	andeq	r9, r1, r8, asr #21
   13004:	ldrdeq	r9, [r1], -r0
   13008:	ldr	r7, [sl, #8]
   1300c:	cmp	r7, #0
   13010:	beq	13060 <__assert_fail@plt+0x21f4>
   13014:	ldr	r3, [sl, #16]
   13018:	cmp	r3, #0
   1301c:	bne	125ec <__assert_fail@plt+0x1780>
   13020:	ldr	r0, [r7, #4]
   13024:	cmp	r0, #0
   13028:	beq	13120 <__assert_fail@plt+0x22b4>
   1302c:	bl	11750 <__assert_fail@plt+0x8e4>
   13030:	cmp	r0, #0
   13034:	bne	11e9c <__assert_fail@plt+0x1030>
   13038:	ldr	r3, [r7, #16]
   1303c:	cmp	r3, #0
   13040:	bne	13138 <__assert_fail@plt+0x22cc>
   13044:	ldr	r0, [r7, #8]
   13048:	cmp	r0, #0
   1304c:	beq	12608 <__assert_fail@plt+0x179c>
   13050:	bl	11750 <__assert_fail@plt+0x8e4>
   13054:	cmp	r0, #0
   13058:	beq	12608 <__assert_fail@plt+0x179c>
   1305c:	b	11e9c <__assert_fail@plt+0x1030>
   13060:	mov	r0, sl
   13064:	bl	115f0 <__assert_fail@plt+0x784>
   13068:	cmp	r0, #0
   1306c:	beq	12608 <__assert_fail@plt+0x179c>
   13070:	b	11e9c <__assert_fail@plt+0x1030>
   13074:	mov	r0, fp
   13078:	bl	115f0 <__assert_fail@plt+0x784>
   1307c:	cmp	r0, #0
   13080:	beq	125b8 <__assert_fail@plt+0x174c>
   13084:	b	11e9c <__assert_fail@plt+0x1030>
   13088:	ldr	r8, [r3, #8]
   1308c:	cmp	r8, #0
   13090:	beq	131dc <__assert_fail@plt+0x2370>
   13094:	ldr	r2, [r3, #16]
   13098:	cmp	r2, #0
   1309c:	bne	11f44 <__assert_fail@plt+0x10d8>
   130a0:	ldr	r0, [r8, #4]
   130a4:	cmp	r0, #0
   130a8:	beq	130f4 <__assert_fail@plt+0x2288>
   130ac:	bl	11750 <__assert_fail@plt+0x8e4>
   130b0:	cmp	r0, #0
   130b4:	bne	11e9c <__assert_fail@plt+0x1030>
   130b8:	ldr	r3, [r8, #16]
   130bc:	cmp	r3, #0
   130c0:	bne	1310c <__assert_fail@plt+0x22a0>
   130c4:	ldr	r0, [r8, #8]
   130c8:	cmp	r0, #0
   130cc:	beq	11f68 <__assert_fail@plt+0x10fc>
   130d0:	bl	11750 <__assert_fail@plt+0x8e4>
   130d4:	cmp	r0, #0
   130d8:	beq	11f68 <__assert_fail@plt+0x10fc>
   130dc:	b	11e9c <__assert_fail@plt+0x1030>
   130e0:	mov	r0, r7
   130e4:	bl	115f0 <__assert_fail@plt+0x784>
   130e8:	cmp	r0, #0
   130ec:	beq	125e0 <__assert_fail@plt+0x1774>
   130f0:	b	11e9c <__assert_fail@plt+0x1030>
   130f4:	ldr	r0, [r8, #8]
   130f8:	cmp	r0, #0
   130fc:	beq	1314c <__assert_fail@plt+0x22e0>
   13100:	ldr	r3, [r8, #16]
   13104:	cmp	r3, #0
   13108:	beq	130d0 <__assert_fail@plt+0x2264>
   1310c:	mov	r0, r8
   13110:	bl	110e0 <__assert_fail@plt+0x274>
   13114:	cmp	r0, #0
   13118:	bne	11e9c <__assert_fail@plt+0x1030>
   1311c:	b	130c4 <__assert_fail@plt+0x2258>
   13120:	ldr	r0, [r7, #8]
   13124:	cmp	r0, #0
   13128:	beq	13160 <__assert_fail@plt+0x22f4>
   1312c:	ldr	r3, [r7, #16]
   13130:	cmp	r3, #0
   13134:	beq	13050 <__assert_fail@plt+0x21e4>
   13138:	mov	r0, r7
   1313c:	bl	110e0 <__assert_fail@plt+0x274>
   13140:	cmp	r0, #0
   13144:	bne	11e9c <__assert_fail@plt+0x1030>
   13148:	b	13044 <__assert_fail@plt+0x21d8>
   1314c:	mov	r0, r8
   13150:	bl	115f0 <__assert_fail@plt+0x784>
   13154:	cmp	r0, #0
   13158:	beq	11f68 <__assert_fail@plt+0x10fc>
   1315c:	b	11e9c <__assert_fail@plt+0x1030>
   13160:	mov	r0, r7
   13164:	bl	115f0 <__assert_fail@plt+0x784>
   13168:	cmp	r0, #0
   1316c:	beq	12608 <__assert_fail@plt+0x179c>
   13170:	b	11e9c <__assert_fail@plt+0x1030>
   13174:	ldr	r0, [r8, #8]
   13178:	cmp	r0, #0
   1317c:	beq	131c0 <__assert_fail@plt+0x2354>
   13180:	ldr	r2, [r8, #16]
   13184:	cmp	r2, #0
   13188:	bne	131a4 <__assert_fail@plt+0x2338>
   1318c:	str	r3, [sp, #12]
   13190:	bl	11750 <__assert_fail@plt+0x8e4>
   13194:	cmp	r0, #0
   13198:	ldr	r3, [sp, #12]
   1319c:	beq	11f38 <__assert_fail@plt+0x10cc>
   131a0:	b	11e9c <__assert_fail@plt+0x1030>
   131a4:	mov	r0, r8
   131a8:	str	r3, [sp, #12]
   131ac:	bl	110e0 <__assert_fail@plt+0x274>
   131b0:	cmp	r0, #0
   131b4:	ldr	r3, [sp, #12]
   131b8:	bne	11e9c <__assert_fail@plt+0x1030>
   131bc:	b	11f2c <__assert_fail@plt+0x10c0>
   131c0:	mov	r0, r8
   131c4:	str	r3, [sp, #12]
   131c8:	bl	115f0 <__assert_fail@plt+0x784>
   131cc:	cmp	r0, #0
   131d0:	ldr	r3, [sp, #12]
   131d4:	beq	11f38 <__assert_fail@plt+0x10cc>
   131d8:	b	11e9c <__assert_fail@plt+0x1030>
   131dc:	mov	r0, r3
   131e0:	bl	115f0 <__assert_fail@plt+0x784>
   131e4:	cmp	r0, #0
   131e8:	beq	11f68 <__assert_fail@plt+0x10fc>
   131ec:	b	11e9c <__assert_fail@plt+0x1030>
   131f0:	ldr	r8, [r3, #8]
   131f4:	cmp	r8, #0
   131f8:	beq	14244 <__assert_fail@plt+0x33d8>
   131fc:	ldr	r2, [r3, #16]
   13200:	cmp	r2, #0
   13204:	bne	13248 <__assert_fail@plt+0x23dc>
   13208:	ldr	r0, [r8, #4]
   1320c:	cmp	r0, #0
   13210:	beq	13264 <__assert_fail@plt+0x23f8>
   13214:	bl	11750 <__assert_fail@plt+0x8e4>
   13218:	cmp	r0, #0
   1321c:	bne	11e9c <__assert_fail@plt+0x1030>
   13220:	ldr	r3, [r8, #16]
   13224:	cmp	r3, #0
   13228:	bne	1327c <__assert_fail@plt+0x2410>
   1322c:	ldr	r0, [r8, #8]
   13230:	cmp	r0, #0
   13234:	beq	11e18 <__assert_fail@plt+0xfac>
   13238:	bl	11750 <__assert_fail@plt+0x8e4>
   1323c:	cmp	r0, #0
   13240:	beq	11e18 <__assert_fail@plt+0xfac>
   13244:	b	11e9c <__assert_fail@plt+0x1030>
   13248:	mov	r0, r3
   1324c:	str	r3, [sp, #12]
   13250:	bl	110e0 <__assert_fail@plt+0x274>
   13254:	cmp	r0, #0
   13258:	ldr	r3, [sp, #12]
   1325c:	bne	11e9c <__assert_fail@plt+0x1030>
   13260:	b	11e0c <__assert_fail@plt+0xfa0>
   13264:	ldr	r0, [r8, #8]
   13268:	cmp	r0, #0
   1326c:	beq	132e0 <__assert_fail@plt+0x2474>
   13270:	ldr	r3, [r8, #16]
   13274:	cmp	r3, #0
   13278:	beq	13238 <__assert_fail@plt+0x23cc>
   1327c:	mov	r0, r8
   13280:	bl	110e0 <__assert_fail@plt+0x274>
   13284:	cmp	r0, #0
   13288:	bne	11e9c <__assert_fail@plt+0x1030>
   1328c:	b	1322c <__assert_fail@plt+0x23c0>
   13290:	mov	r0, r8
   13294:	bl	110e0 <__assert_fail@plt+0x274>
   13298:	cmp	r0, #0
   1329c:	bne	11e9c <__assert_fail@plt+0x1030>
   132a0:	b	129a0 <__assert_fail@plt+0x1b34>
   132a4:	ldr	r0, [r8, #8]
   132a8:	cmp	r0, #0
   132ac:	beq	132cc <__assert_fail@plt+0x2460>
   132b0:	ldr	r3, [r8, #16]
   132b4:	cmp	r3, #0
   132b8:	bne	13290 <__assert_fail@plt+0x2424>
   132bc:	bl	11750 <__assert_fail@plt+0x8e4>
   132c0:	cmp	r0, #0
   132c4:	beq	129ac <__assert_fail@plt+0x1b40>
   132c8:	b	11e9c <__assert_fail@plt+0x1030>
   132cc:	mov	r0, r8
   132d0:	bl	115f0 <__assert_fail@plt+0x784>
   132d4:	cmp	r0, #0
   132d8:	beq	129ac <__assert_fail@plt+0x1b40>
   132dc:	b	11e9c <__assert_fail@plt+0x1030>
   132e0:	mov	r0, r8
   132e4:	bl	115f0 <__assert_fail@plt+0x784>
   132e8:	cmp	r0, #0
   132ec:	beq	11e18 <__assert_fail@plt+0xfac>
   132f0:	b	11e9c <__assert_fail@plt+0x1030>
   132f4:	mov	r0, sl
   132f8:	bl	115f0 <__assert_fail@plt+0x784>
   132fc:	cmp	r0, #0
   13300:	beq	11e58 <__assert_fail@plt+0xfec>
   13304:	b	11e9c <__assert_fail@plt+0x1030>
   13308:	mov	r0, r9
   1330c:	bl	115f0 <__assert_fail@plt+0x784>
   13310:	cmp	r0, #0
   13314:	beq	11fd0 <__assert_fail@plt+0x1164>
   13318:	b	11e9c <__assert_fail@plt+0x1030>
   1331c:	ldr	r0, [r9, #8]
   13320:	cmp	r0, #0
   13324:	beq	140c0 <__assert_fail@plt+0x3254>
   13328:	ldr	r3, [r9, #16]
   1332c:	cmp	r3, #0
   13330:	beq	12be8 <__assert_fail@plt+0x1d7c>
   13334:	mov	r0, r9
   13338:	bl	110e0 <__assert_fail@plt+0x274>
   1333c:	cmp	r0, #0
   13340:	bne	11e9c <__assert_fail@plt+0x1030>
   13344:	b	12bdc <__assert_fail@plt+0x1d70>
   13348:	mov	r0, r8
   1334c:	bl	115f0 <__assert_fail@plt+0x784>
   13350:	cmp	r0, #0
   13354:	beq	12008 <__assert_fail@plt+0x119c>
   13358:	b	11e9c <__assert_fail@plt+0x1030>
   1335c:	mov	r0, fp
   13360:	bl	115f0 <__assert_fail@plt+0x784>
   13364:	cmp	r0, #0
   13368:	beq	11f90 <__assert_fail@plt+0x1124>
   1336c:	b	11e9c <__assert_fail@plt+0x1030>
   13370:	ldr	r0, [r7, #8]
   13374:	cmp	r0, #0
   13378:	beq	133c8 <__assert_fail@plt+0x255c>
   1337c:	ldr	r3, [r7, #16]
   13380:	cmp	r3, #0
   13384:	bne	13398 <__assert_fail@plt+0x252c>
   13388:	bl	11750 <__assert_fail@plt+0x8e4>
   1338c:	cmp	r0, #0
   13390:	beq	1272c <__assert_fail@plt+0x18c0>
   13394:	b	11e9c <__assert_fail@plt+0x1030>
   13398:	mov	r0, r7
   1339c:	bl	110e0 <__assert_fail@plt+0x274>
   133a0:	cmp	r0, #0
   133a4:	bne	11e9c <__assert_fail@plt+0x1030>
   133a8:	b	12720 <__assert_fail@plt+0x18b4>
   133ac:	ldr	r0, [r8, #8]
   133b0:	cmp	r0, #0
   133b4:	beq	133dc <__assert_fail@plt+0x2570>
   133b8:	ldr	r3, [r8, #16]
   133bc:	cmp	r3, #0
   133c0:	beq	12754 <__assert_fail@plt+0x18e8>
   133c4:	b	12738 <__assert_fail@plt+0x18cc>
   133c8:	mov	r0, r7
   133cc:	bl	115f0 <__assert_fail@plt+0x784>
   133d0:	cmp	r0, #0
   133d4:	beq	1272c <__assert_fail@plt+0x18c0>
   133d8:	b	11e9c <__assert_fail@plt+0x1030>
   133dc:	mov	r0, r8
   133e0:	bl	115f0 <__assert_fail@plt+0x784>
   133e4:	b	11e9c <__assert_fail@plt+0x1030>
   133e8:	bl	10dac <__errno_location@plt>
   133ec:	ldr	r3, [sp, #20]
   133f0:	ldr	r4, [r0]
   133f4:	cmp	r3, #0
   133f8:	bne	13464 <__assert_fail@plt+0x25f8>
   133fc:	movw	r1, #40404	; 0x9dd4
   13400:	movt	r1, #1
   13404:	mov	r0, r3
   13408:	mov	r2, #5
   1340c:	bl	10ca4 <dcgettext@plt>
   13410:	mov	r3, r0
   13414:	movw	r2, #40620	; 0x9eac
   13418:	movt	r2, #1
   1341c:	mov	r1, r4
   13420:	mov	r0, #1
   13424:	bl	10d1c <error@plt>
   13428:	mov	r2, #5
   1342c:	movw	r1, #40332	; 0x9d8c
   13430:	movt	r1, #1
   13434:	mov	r0, #0
   13438:	bl	10ca4 <dcgettext@plt>
   1343c:	mov	r4, r0
   13440:	mov	r1, #3
   13444:	ldr	r2, [sp, #16]
   13448:	mov	r0, #0
   1344c:	bl	17ca4 <__assert_fail@plt+0x6e38>
   13450:	mov	r3, r0
   13454:	mov	r2, r4
   13458:	mov	r1, #0
   1345c:	mov	r0, #1
   13460:	bl	10d1c <error@plt>
   13464:	mov	r1, #3
   13468:	mov	r0, #0
   1346c:	ldr	r2, [sp, #16]
   13470:	bl	17ca4 <__assert_fail@plt+0x6e38>
   13474:	b	13410 <__assert_fail@plt+0x25a4>
   13478:	bl	10dac <__errno_location@plt>
   1347c:	ldr	r4, [r0]
   13480:	mov	r1, #3
   13484:	mov	r0, r5
   13488:	ldr	r2, [sp, #16]
   1348c:	bl	17ca4 <__assert_fail@plt+0x6e38>
   13490:	mov	r3, r0
   13494:	movw	r2, #40620	; 0x9eac
   13498:	movt	r2, #1
   1349c:	mov	r0, #1
   134a0:	mov	r1, r4
   134a4:	bl	10d1c <error@plt>
   134a8:	movw	r1, #40200	; 0x9d08
   134ac:	movt	r1, #1
   134b0:	ldr	r3, [pc, #-1204]	; 13004 <__assert_fail@plt+0x2198>
   134b4:	movw	r0, #40244	; 0x9d34
   134b8:	movt	r0, #1
   134bc:	mov	r2, #163	; 0xa3
   134c0:	bl	10e6c <__assert_fail@plt>
   134c4:	ldr	r0, [sl, #8]
   134c8:	cmp	r0, #0
   134cc:	beq	132f4 <__assert_fail@plt+0x2488>
   134d0:	ldr	r3, [sl, #16]
   134d4:	cmp	r3, #0
   134d8:	bne	129b8 <__assert_fail@plt+0x1b4c>
   134dc:	b	129d4 <__assert_fail@plt+0x1b68>
   134e0:	ldr	sl, [fp, #8]
   134e4:	cmp	sl, #0
   134e8:	beq	135dc <__assert_fail@plt+0x2770>
   134ec:	ldr	r3, [fp, #16]
   134f0:	cmp	r3, #0
   134f4:	bne	1292c <__assert_fail@plt+0x1ac0>
   134f8:	ldr	r0, [sl, #4]
   134fc:	cmp	r0, #0
   13500:	beq	13574 <__assert_fail@plt+0x2708>
   13504:	bl	11750 <__assert_fail@plt+0x8e4>
   13508:	cmp	r0, #0
   1350c:	bne	11e9c <__assert_fail@plt+0x1030>
   13510:	ldr	r3, [sl, #16]
   13514:	cmp	r3, #0
   13518:	bne	1358c <__assert_fail@plt+0x2720>
   1351c:	ldr	r0, [sl, #8]
   13520:	cmp	r0, #0
   13524:	beq	12948 <__assert_fail@plt+0x1adc>
   13528:	bl	11750 <__assert_fail@plt+0x8e4>
   1352c:	cmp	r0, #0
   13530:	beq	12948 <__assert_fail@plt+0x1adc>
   13534:	b	11e9c <__assert_fail@plt+0x1030>
   13538:	ldr	r0, [sl, #8]
   1353c:	cmp	r0, #0
   13540:	beq	1360c <__assert_fail@plt+0x27a0>
   13544:	ldr	r3, [sl, #16]
   13548:	cmp	r3, #0
   1354c:	bne	13560 <__assert_fail@plt+0x26f4>
   13550:	bl	11750 <__assert_fail@plt+0x8e4>
   13554:	cmp	r0, #0
   13558:	beq	12920 <__assert_fail@plt+0x1ab4>
   1355c:	b	11e9c <__assert_fail@plt+0x1030>
   13560:	mov	r0, sl
   13564:	bl	110e0 <__assert_fail@plt+0x274>
   13568:	cmp	r0, #0
   1356c:	bne	11e9c <__assert_fail@plt+0x1030>
   13570:	b	12914 <__assert_fail@plt+0x1aa8>
   13574:	ldr	r0, [sl, #8]
   13578:	cmp	r0, #0
   1357c:	beq	135c8 <__assert_fail@plt+0x275c>
   13580:	ldr	r3, [sl, #16]
   13584:	cmp	r3, #0
   13588:	beq	13528 <__assert_fail@plt+0x26bc>
   1358c:	mov	r0, sl
   13590:	bl	110e0 <__assert_fail@plt+0x274>
   13594:	cmp	r0, #0
   13598:	bne	11e9c <__assert_fail@plt+0x1030>
   1359c:	b	1351c <__assert_fail@plt+0x26b0>
   135a0:	ldr	r0, [r7, #8]
   135a4:	cmp	r0, #0
   135a8:	beq	136a8 <__assert_fail@plt+0x283c>
   135ac:	ldr	r3, [r7, #16]
   135b0:	cmp	r3, #0
   135b4:	bne	13620 <__assert_fail@plt+0x27b4>
   135b8:	bl	11750 <__assert_fail@plt+0x8e4>
   135bc:	cmp	r0, #0
   135c0:	beq	12260 <__assert_fail@plt+0x13f4>
   135c4:	b	11e9c <__assert_fail@plt+0x1030>
   135c8:	mov	r0, sl
   135cc:	bl	115f0 <__assert_fail@plt+0x784>
   135d0:	cmp	r0, #0
   135d4:	beq	12948 <__assert_fail@plt+0x1adc>
   135d8:	b	11e9c <__assert_fail@plt+0x1030>
   135dc:	mov	r0, fp
   135e0:	bl	115f0 <__assert_fail@plt+0x784>
   135e4:	cmp	r0, #0
   135e8:	beq	12948 <__assert_fail@plt+0x1adc>
   135ec:	b	11e9c <__assert_fail@plt+0x1030>
   135f0:	ldr	r8, [r7, #8]
   135f4:	cmp	r8, #0
   135f8:	beq	12cb4 <__assert_fail@plt+0x1e48>
   135fc:	ldr	r3, [r7, #16]
   13600:	cmp	r3, #0
   13604:	bne	12208 <__assert_fail@plt+0x139c>
   13608:	b	12224 <__assert_fail@plt+0x13b8>
   1360c:	mov	r0, sl
   13610:	bl	115f0 <__assert_fail@plt+0x784>
   13614:	cmp	r0, #0
   13618:	beq	12920 <__assert_fail@plt+0x1ab4>
   1361c:	b	11e9c <__assert_fail@plt+0x1030>
   13620:	mov	r0, r7
   13624:	bl	110e0 <__assert_fail@plt+0x274>
   13628:	cmp	r0, #0
   1362c:	bne	11e9c <__assert_fail@plt+0x1030>
   13630:	b	12254 <__assert_fail@plt+0x13e8>
   13634:	ldr	r7, [r8, #8]
   13638:	cmp	r7, #0
   1363c:	beq	136bc <__assert_fail@plt+0x2850>
   13640:	ldr	r3, [r8, #16]
   13644:	cmp	r3, #0
   13648:	bne	1226c <__assert_fail@plt+0x1400>
   1364c:	b	12288 <__assert_fail@plt+0x141c>
   13650:	ldr	r8, [r9, #8]
   13654:	cmp	r8, #0
   13658:	beq	1379c <__assert_fail@plt+0x2930>
   1365c:	ldr	r3, [r9, #16]
   13660:	cmp	r3, #0
   13664:	bne	121e0 <__assert_fail@plt+0x1374>
   13668:	ldr	r0, [r8, #4]
   1366c:	cmp	r0, #0
   13670:	beq	136d0 <__assert_fail@plt+0x2864>
   13674:	bl	11750 <__assert_fail@plt+0x8e4>
   13678:	cmp	r0, #0
   1367c:	bne	11e9c <__assert_fail@plt+0x1030>
   13680:	ldr	r3, [r8, #16]
   13684:	cmp	r3, #0
   13688:	bne	136e8 <__assert_fail@plt+0x287c>
   1368c:	ldr	r0, [r8, #8]
   13690:	cmp	r0, #0
   13694:	beq	121fc <__assert_fail@plt+0x1390>
   13698:	bl	11750 <__assert_fail@plt+0x8e4>
   1369c:	cmp	r0, #0
   136a0:	beq	121fc <__assert_fail@plt+0x1390>
   136a4:	b	11e9c <__assert_fail@plt+0x1030>
   136a8:	mov	r0, r7
   136ac:	bl	115f0 <__assert_fail@plt+0x784>
   136b0:	cmp	r0, #0
   136b4:	beq	12260 <__assert_fail@plt+0x13f4>
   136b8:	b	11e9c <__assert_fail@plt+0x1030>
   136bc:	mov	r0, r8
   136c0:	bl	115f0 <__assert_fail@plt+0x784>
   136c4:	cmp	r0, #0
   136c8:	beq	12008 <__assert_fail@plt+0x119c>
   136cc:	b	11e9c <__assert_fail@plt+0x1030>
   136d0:	ldr	r0, [r8, #8]
   136d4:	cmp	r0, #0
   136d8:	beq	13760 <__assert_fail@plt+0x28f4>
   136dc:	ldr	r3, [r8, #16]
   136e0:	cmp	r3, #0
   136e4:	beq	13698 <__assert_fail@plt+0x282c>
   136e8:	mov	r0, r8
   136ec:	bl	110e0 <__assert_fail@plt+0x274>
   136f0:	cmp	r0, #0
   136f4:	bne	11e9c <__assert_fail@plt+0x1030>
   136f8:	b	1368c <__assert_fail@plt+0x2820>
   136fc:	ldr	r0, [r8, #8]
   13700:	cmp	r0, #0
   13704:	beq	13788 <__assert_fail@plt+0x291c>
   13708:	ldr	r3, [r8, #16]
   1370c:	cmp	r3, #0
   13710:	bne	121b8 <__assert_fail@plt+0x134c>
   13714:	bl	11750 <__assert_fail@plt+0x8e4>
   13718:	cmp	r0, #0
   1371c:	beq	121d4 <__assert_fail@plt+0x1368>
   13720:	b	11e9c <__assert_fail@plt+0x1030>
   13724:	mov	r0, sl
   13728:	bl	110e0 <__assert_fail@plt+0x274>
   1372c:	cmp	r0, #0
   13730:	bne	11e9c <__assert_fail@plt+0x1030>
   13734:	b	121a0 <__assert_fail@plt+0x1334>
   13738:	ldr	r0, [sl, #8]
   1373c:	cmp	r0, #0
   13740:	beq	13774 <__assert_fail@plt+0x2908>
   13744:	ldr	r3, [sl, #16]
   13748:	cmp	r3, #0
   1374c:	bne	13724 <__assert_fail@plt+0x28b8>
   13750:	bl	11750 <__assert_fail@plt+0x8e4>
   13754:	cmp	r0, #0
   13758:	beq	121ac <__assert_fail@plt+0x1340>
   1375c:	b	11e9c <__assert_fail@plt+0x1030>
   13760:	mov	r0, r8
   13764:	bl	115f0 <__assert_fail@plt+0x784>
   13768:	cmp	r0, #0
   1376c:	beq	121fc <__assert_fail@plt+0x1390>
   13770:	b	11e9c <__assert_fail@plt+0x1030>
   13774:	mov	r0, sl
   13778:	bl	115f0 <__assert_fail@plt+0x784>
   1377c:	cmp	r0, #0
   13780:	beq	121ac <__assert_fail@plt+0x1340>
   13784:	b	11e9c <__assert_fail@plt+0x1030>
   13788:	mov	r0, r8
   1378c:	bl	115f0 <__assert_fail@plt+0x784>
   13790:	cmp	r0, #0
   13794:	beq	121d4 <__assert_fail@plt+0x1368>
   13798:	b	11e9c <__assert_fail@plt+0x1030>
   1379c:	mov	r0, r9
   137a0:	bl	115f0 <__assert_fail@plt+0x784>
   137a4:	cmp	r0, #0
   137a8:	beq	121fc <__assert_fail@plt+0x1390>
   137ac:	b	11e9c <__assert_fail@plt+0x1030>
   137b0:	ldr	r0, [r7, #8]
   137b4:	cmp	r0, #0
   137b8:	beq	12cb4 <__assert_fail@plt+0x1e48>
   137bc:	ldr	r3, [r7, #16]
   137c0:	cmp	r3, #0
   137c4:	beq	122b8 <__assert_fail@plt+0x144c>
   137c8:	mov	r0, r7
   137cc:	bl	110e0 <__assert_fail@plt+0x274>
   137d0:	cmp	r0, #0
   137d4:	bne	11e9c <__assert_fail@plt+0x1030>
   137d8:	b	122ac <__assert_fail@plt+0x1440>
   137dc:	ldr	r9, [r8, #8]
   137e0:	cmp	r9, #0
   137e4:	beq	13814 <__assert_fail@plt+0x29a8>
   137e8:	ldr	r3, [r8, #16]
   137ec:	cmp	r3, #0
   137f0:	bne	1280c <__assert_fail@plt+0x19a0>
   137f4:	b	12828 <__assert_fail@plt+0x19bc>
   137f8:	ldr	sl, [r8, #8]
   137fc:	cmp	sl, #0
   13800:	beq	13828 <__assert_fail@plt+0x29bc>
   13804:	ldr	r3, [r8, #16]
   13808:	cmp	r3, #0
   1380c:	bne	12954 <__assert_fail@plt+0x1ae8>
   13810:	b	12970 <__assert_fail@plt+0x1b04>
   13814:	mov	r0, r8
   13818:	bl	115f0 <__assert_fail@plt+0x784>
   1381c:	cmp	r0, #0
   13820:	beq	11fd0 <__assert_fail@plt+0x1164>
   13824:	b	11e9c <__assert_fail@plt+0x1030>
   13828:	mov	r0, r8
   1382c:	bl	115f0 <__assert_fail@plt+0x784>
   13830:	cmp	r0, #0
   13834:	beq	11e58 <__assert_fail@plt+0xfec>
   13838:	b	11e9c <__assert_fail@plt+0x1030>
   1383c:	ldr	r0, [fp, #8]
   13840:	cmp	r0, #0
   13844:	beq	14274 <__assert_fail@plt+0x3408>
   13848:	ldr	r3, [fp, #16]
   1384c:	cmp	r3, #0
   13850:	beq	12ca4 <__assert_fail@plt+0x1e38>
   13854:	mov	r0, fp
   13858:	bl	110e0 <__assert_fail@plt+0x274>
   1385c:	cmp	r0, #0
   13860:	bne	11e9c <__assert_fail@plt+0x1030>
   13864:	b	12c98 <__assert_fail@plt+0x1e2c>
   13868:	ldr	r0, [r8, #8]
   1386c:	cmp	r0, #0
   13870:	beq	138a0 <__assert_fail@plt+0x2a34>
   13874:	ldr	r3, [r8, #16]
   13878:	cmp	r3, #0
   1387c:	beq	128bc <__assert_fail@plt+0x1a50>
   13880:	mov	r0, r8
   13884:	bl	110e0 <__assert_fail@plt+0x274>
   13888:	cmp	r0, #0
   1388c:	bne	11e9c <__assert_fail@plt+0x1030>
   13890:	b	128b0 <__assert_fail@plt+0x1a44>
   13894:	mov	r0, r7
   13898:	bl	115f0 <__assert_fail@plt+0x784>
   1389c:	b	11e9c <__assert_fail@plt+0x1030>
   138a0:	mov	r0, r8
   138a4:	bl	115f0 <__assert_fail@plt+0x784>
   138a8:	cmp	r0, #0
   138ac:	beq	11fd0 <__assert_fail@plt+0x1164>
   138b0:	b	11e9c <__assert_fail@plt+0x1030>
   138b4:	mov	r0, r9
   138b8:	bl	115f0 <__assert_fail@plt+0x784>
   138bc:	cmp	r0, #0
   138c0:	beq	11e80 <__assert_fail@plt+0x1014>
   138c4:	b	11e9c <__assert_fail@plt+0x1030>
   138c8:	mov	r0, r8
   138cc:	bl	115f0 <__assert_fail@plt+0x784>
   138d0:	b	11e9c <__assert_fail@plt+0x1030>
   138d4:	mov	r0, r9
   138d8:	bl	115f0 <__assert_fail@plt+0x784>
   138dc:	cmp	r0, #0
   138e0:	beq	12630 <__assert_fail@plt+0x17c4>
   138e4:	b	11e9c <__assert_fail@plt+0x1030>
   138e8:	mov	r0, r9
   138ec:	bl	115f0 <__assert_fail@plt+0x784>
   138f0:	cmp	r0, #0
   138f4:	beq	12d90 <__assert_fail@plt+0x1f24>
   138f8:	b	11e9c <__assert_fail@plt+0x1030>
   138fc:	ldr	r0, [r8, #8]
   13900:	cmp	r0, #0
   13904:	beq	14140 <__assert_fail@plt+0x32d4>
   13908:	ldr	r3, [r8, #16]
   1390c:	cmp	r3, #0
   13910:	bne	140e8 <__assert_fail@plt+0x327c>
   13914:	bl	11750 <__assert_fail@plt+0x8e4>
   13918:	cmp	r0, #0
   1391c:	beq	12ad0 <__assert_fail@plt+0x1c64>
   13920:	b	11e9c <__assert_fail@plt+0x1030>
   13924:	ldr	r7, [sl, #8]
   13928:	cmp	r7, #0
   1392c:	beq	1402c <__assert_fail@plt+0x31c0>
   13930:	ldr	r3, [sl, #16]
   13934:	cmp	r3, #0
   13938:	bne	120fc <__assert_fail@plt+0x1290>
   1393c:	ldr	sl, [r7, #4]
   13940:	cmp	sl, #0
   13944:	beq	139ec <__assert_fail@plt+0x2b80>
   13948:	ldr	r0, [sl, #4]
   1394c:	cmp	r0, #0
   13950:	beq	139b0 <__assert_fail@plt+0x2b44>
   13954:	bl	11750 <__assert_fail@plt+0x8e4>
   13958:	cmp	r0, #0
   1395c:	bne	11e9c <__assert_fail@plt+0x1030>
   13960:	ldr	r3, [sl, #16]
   13964:	cmp	r3, #0
   13968:	bne	139d8 <__assert_fail@plt+0x2b6c>
   1396c:	ldr	r0, [sl, #8]
   13970:	cmp	r0, #0
   13974:	bne	139c8 <__assert_fail@plt+0x2b5c>
   13978:	ldr	r3, [r7, #16]
   1397c:	cmp	r3, #0
   13980:	beq	13994 <__assert_fail@plt+0x2b28>
   13984:	mov	r0, r7
   13988:	bl	110e0 <__assert_fail@plt+0x274>
   1398c:	cmp	r0, #0
   13990:	bne	11e9c <__assert_fail@plt+0x1030>
   13994:	ldr	r0, [r7, #8]
   13998:	cmp	r0, #0
   1399c:	beq	12118 <__assert_fail@plt+0x12ac>
   139a0:	bl	11750 <__assert_fail@plt+0x8e4>
   139a4:	cmp	r0, #0
   139a8:	beq	12118 <__assert_fail@plt+0x12ac>
   139ac:	b	11e9c <__assert_fail@plt+0x1030>
   139b0:	ldr	r0, [sl, #8]
   139b4:	cmp	r0, #0
   139b8:	beq	14040 <__assert_fail@plt+0x31d4>
   139bc:	ldr	r3, [sl, #16]
   139c0:	cmp	r3, #0
   139c4:	bne	139d8 <__assert_fail@plt+0x2b6c>
   139c8:	bl	11750 <__assert_fail@plt+0x8e4>
   139cc:	cmp	r0, #0
   139d0:	beq	13978 <__assert_fail@plt+0x2b0c>
   139d4:	b	11e9c <__assert_fail@plt+0x1030>
   139d8:	mov	r0, sl
   139dc:	bl	110e0 <__assert_fail@plt+0x274>
   139e0:	cmp	r0, #0
   139e4:	bne	11e9c <__assert_fail@plt+0x1030>
   139e8:	b	1396c <__assert_fail@plt+0x2b00>
   139ec:	ldr	r0, [r7, #8]
   139f0:	cmp	r0, #0
   139f4:	beq	14334 <__assert_fail@plt+0x34c8>
   139f8:	ldr	r3, [r7, #16]
   139fc:	cmp	r3, #0
   13a00:	bne	13984 <__assert_fail@plt+0x2b18>
   13a04:	b	139a0 <__assert_fail@plt+0x2b34>
   13a08:	bl	11750 <__assert_fail@plt+0x8e4>
   13a0c:	cmp	r0, #0
   13a10:	beq	12a44 <__assert_fail@plt+0x1bd8>
   13a14:	b	11e9c <__assert_fail@plt+0x1030>
   13a18:	mov	r0, r9
   13a1c:	bl	110e0 <__assert_fail@plt+0x274>
   13a20:	cmp	r0, #0
   13a24:	bne	11e9c <__assert_fail@plt+0x1030>
   13a28:	b	123e4 <__assert_fail@plt+0x1578>
   13a2c:	ldr	r0, [r9, #8]
   13a30:	cmp	r0, #0
   13a34:	beq	13a54 <__assert_fail@plt+0x2be8>
   13a38:	ldr	r3, [r9, #16]
   13a3c:	cmp	r3, #0
   13a40:	bne	13a18 <__assert_fail@plt+0x2bac>
   13a44:	bl	11750 <__assert_fail@plt+0x8e4>
   13a48:	cmp	r0, #0
   13a4c:	beq	123f0 <__assert_fail@plt+0x1584>
   13a50:	b	11e9c <__assert_fail@plt+0x1030>
   13a54:	mov	r0, r9
   13a58:	bl	115f0 <__assert_fail@plt+0x784>
   13a5c:	cmp	r0, #0
   13a60:	beq	123f0 <__assert_fail@plt+0x1584>
   13a64:	b	11e9c <__assert_fail@plt+0x1030>
   13a68:	ldr	r9, [fp, #8]
   13a6c:	cmp	r9, #0
   13a70:	beq	13ac0 <__assert_fail@plt+0x2c54>
   13a74:	ldr	r3, [fp, #16]
   13a78:	cmp	r3, #0
   13a7c:	bne	123fc <__assert_fail@plt+0x1590>
   13a80:	ldr	r0, [r9, #4]
   13a84:	cmp	r0, #0
   13a88:	beq	13c10 <__assert_fail@plt+0x2da4>
   13a8c:	bl	11750 <__assert_fail@plt+0x8e4>
   13a90:	cmp	r0, #0
   13a94:	bne	11e9c <__assert_fail@plt+0x1030>
   13a98:	ldr	r3, [r9, #16]
   13a9c:	cmp	r3, #0
   13aa0:	bne	13c28 <__assert_fail@plt+0x2dbc>
   13aa4:	ldr	r0, [r9, #8]
   13aa8:	cmp	r0, #0
   13aac:	beq	12418 <__assert_fail@plt+0x15ac>
   13ab0:	bl	11750 <__assert_fail@plt+0x8e4>
   13ab4:	cmp	r0, #0
   13ab8:	beq	12418 <__assert_fail@plt+0x15ac>
   13abc:	b	11e9c <__assert_fail@plt+0x1030>
   13ac0:	mov	r0, fp
   13ac4:	bl	115f0 <__assert_fail@plt+0x784>
   13ac8:	cmp	r0, #0
   13acc:	beq	12418 <__assert_fail@plt+0x15ac>
   13ad0:	b	11e9c <__assert_fail@plt+0x1030>
   13ad4:	ldr	r9, [sl, #8]
   13ad8:	cmp	r9, #0
   13adc:	beq	13be0 <__assert_fail@plt+0x2d74>
   13ae0:	ldr	r3, [sl, #16]
   13ae4:	cmp	r3, #0
   13ae8:	bne	12424 <__assert_fail@plt+0x15b8>
   13aec:	ldr	sl, [r9, #4]
   13af0:	cmp	sl, #0
   13af4:	beq	13b9c <__assert_fail@plt+0x2d30>
   13af8:	ldr	r0, [sl, #4]
   13afc:	cmp	r0, #0
   13b00:	beq	13b60 <__assert_fail@plt+0x2cf4>
   13b04:	bl	11750 <__assert_fail@plt+0x8e4>
   13b08:	cmp	r0, #0
   13b0c:	bne	11e9c <__assert_fail@plt+0x1030>
   13b10:	ldr	r3, [sl, #16]
   13b14:	cmp	r3, #0
   13b18:	bne	13b88 <__assert_fail@plt+0x2d1c>
   13b1c:	ldr	r0, [sl, #8]
   13b20:	cmp	r0, #0
   13b24:	bne	13b78 <__assert_fail@plt+0x2d0c>
   13b28:	ldr	r3, [r9, #16]
   13b2c:	cmp	r3, #0
   13b30:	beq	13b44 <__assert_fail@plt+0x2cd8>
   13b34:	mov	r0, r9
   13b38:	bl	110e0 <__assert_fail@plt+0x274>
   13b3c:	cmp	r0, #0
   13b40:	bne	11e9c <__assert_fail@plt+0x1030>
   13b44:	ldr	r0, [r9, #8]
   13b48:	cmp	r0, #0
   13b4c:	beq	12440 <__assert_fail@plt+0x15d4>
   13b50:	bl	11750 <__assert_fail@plt+0x8e4>
   13b54:	cmp	r0, #0
   13b58:	beq	12440 <__assert_fail@plt+0x15d4>
   13b5c:	b	11e9c <__assert_fail@plt+0x1030>
   13b60:	ldr	r0, [sl, #8]
   13b64:	cmp	r0, #0
   13b68:	beq	13bb8 <__assert_fail@plt+0x2d4c>
   13b6c:	ldr	r3, [sl, #16]
   13b70:	cmp	r3, #0
   13b74:	bne	13b88 <__assert_fail@plt+0x2d1c>
   13b78:	bl	11750 <__assert_fail@plt+0x8e4>
   13b7c:	cmp	r0, #0
   13b80:	beq	13b28 <__assert_fail@plt+0x2cbc>
   13b84:	b	11e9c <__assert_fail@plt+0x1030>
   13b88:	mov	r0, sl
   13b8c:	bl	110e0 <__assert_fail@plt+0x274>
   13b90:	cmp	r0, #0
   13b94:	bne	11e9c <__assert_fail@plt+0x1030>
   13b98:	b	13b1c <__assert_fail@plt+0x2cb0>
   13b9c:	ldr	r0, [r9, #8]
   13ba0:	cmp	r0, #0
   13ba4:	beq	13bcc <__assert_fail@plt+0x2d60>
   13ba8:	ldr	r3, [r9, #16]
   13bac:	cmp	r3, #0
   13bb0:	bne	13b34 <__assert_fail@plt+0x2cc8>
   13bb4:	b	13b50 <__assert_fail@plt+0x2ce4>
   13bb8:	mov	r0, sl
   13bbc:	bl	115f0 <__assert_fail@plt+0x784>
   13bc0:	cmp	r0, #0
   13bc4:	beq	13b28 <__assert_fail@plt+0x2cbc>
   13bc8:	b	11e9c <__assert_fail@plt+0x1030>
   13bcc:	mov	r0, r9
   13bd0:	bl	115f0 <__assert_fail@plt+0x784>
   13bd4:	cmp	r0, #0
   13bd8:	beq	12440 <__assert_fail@plt+0x15d4>
   13bdc:	b	11e9c <__assert_fail@plt+0x1030>
   13be0:	mov	r0, sl
   13be4:	bl	115f0 <__assert_fail@plt+0x784>
   13be8:	cmp	r0, #0
   13bec:	beq	12440 <__assert_fail@plt+0x15d4>
   13bf0:	b	11e9c <__assert_fail@plt+0x1030>
   13bf4:	ldr	r8, [r9, #8]
   13bf8:	cmp	r8, #0
   13bfc:	beq	138b4 <__assert_fail@plt+0x2a48>
   13c00:	ldr	r3, [r9, #16]
   13c04:	cmp	r3, #0
   13c08:	bne	124e4 <__assert_fail@plt+0x1678>
   13c0c:	b	12500 <__assert_fail@plt+0x1694>
   13c10:	ldr	r0, [r9, #8]
   13c14:	cmp	r0, #0
   13c18:	beq	13c94 <__assert_fail@plt+0x2e28>
   13c1c:	ldr	r3, [r9, #16]
   13c20:	cmp	r3, #0
   13c24:	beq	13ab0 <__assert_fail@plt+0x2c44>
   13c28:	mov	r0, r9
   13c2c:	bl	110e0 <__assert_fail@plt+0x274>
   13c30:	cmp	r0, #0
   13c34:	bne	11e9c <__assert_fail@plt+0x1030>
   13c38:	b	13aa4 <__assert_fail@plt+0x2c38>
   13c3c:	bl	11750 <__assert_fail@plt+0x8e4>
   13c40:	cmp	r0, #0
   13c44:	beq	12864 <__assert_fail@plt+0x19f8>
   13c48:	b	11e9c <__assert_fail@plt+0x1030>
   13c4c:	ldr	r0, [r8, #8]
   13c50:	cmp	r0, #0
   13c54:	beq	13ca8 <__assert_fail@plt+0x2e3c>
   13c58:	ldr	r3, [r8, #16]
   13c5c:	cmp	r3, #0
   13c60:	beq	13c3c <__assert_fail@plt+0x2dd0>
   13c64:	mov	r0, r8
   13c68:	bl	110e0 <__assert_fail@plt+0x274>
   13c6c:	cmp	r0, #0
   13c70:	bne	11e9c <__assert_fail@plt+0x1030>
   13c74:	b	12858 <__assert_fail@plt+0x19ec>
   13c78:	ldr	r8, [r9, #8]
   13c7c:	cmp	r8, #0
   13c80:	beq	13308 <__assert_fail@plt+0x249c>
   13c84:	ldr	r3, [r9, #16]
   13c88:	cmp	r3, #0
   13c8c:	bne	12870 <__assert_fail@plt+0x1a04>
   13c90:	b	1288c <__assert_fail@plt+0x1a20>
   13c94:	mov	r0, r9
   13c98:	bl	115f0 <__assert_fail@plt+0x784>
   13c9c:	cmp	r0, #0
   13ca0:	beq	12418 <__assert_fail@plt+0x15ac>
   13ca4:	b	11e9c <__assert_fail@plt+0x1030>
   13ca8:	mov	r0, r8
   13cac:	bl	115f0 <__assert_fail@plt+0x784>
   13cb0:	cmp	r0, #0
   13cb4:	beq	12864 <__assert_fail@plt+0x19f8>
   13cb8:	b	11e9c <__assert_fail@plt+0x1030>
   13cbc:	ldr	r9, [sl, #8]
   13cc0:	cmp	r9, #0
   13cc4:	beq	13dcc <__assert_fail@plt+0x2f60>
   13cc8:	ldr	r3, [sl, #16]
   13ccc:	cmp	r3, #0
   13cd0:	bne	127e4 <__assert_fail@plt+0x1978>
   13cd4:	ldr	r0, [r9, #4]
   13cd8:	cmp	r0, #0
   13cdc:	beq	13d3c <__assert_fail@plt+0x2ed0>
   13ce0:	bl	11750 <__assert_fail@plt+0x8e4>
   13ce4:	cmp	r0, #0
   13ce8:	bne	11e9c <__assert_fail@plt+0x1030>
   13cec:	ldr	r3, [r9, #16]
   13cf0:	cmp	r3, #0
   13cf4:	bne	13d54 <__assert_fail@plt+0x2ee8>
   13cf8:	ldr	r0, [r9, #8]
   13cfc:	cmp	r0, #0
   13d00:	beq	12800 <__assert_fail@plt+0x1994>
   13d04:	bl	11750 <__assert_fail@plt+0x8e4>
   13d08:	cmp	r0, #0
   13d0c:	beq	12800 <__assert_fail@plt+0x1994>
   13d10:	b	11e9c <__assert_fail@plt+0x1030>
   13d14:	ldr	r0, [r9, #8]
   13d18:	cmp	r0, #0
   13d1c:	beq	13de0 <__assert_fail@plt+0x2f74>
   13d20:	ldr	r3, [r9, #16]
   13d24:	cmp	r3, #0
   13d28:	bne	127bc <__assert_fail@plt+0x1950>
   13d2c:	bl	11750 <__assert_fail@plt+0x8e4>
   13d30:	cmp	r0, #0
   13d34:	beq	127d8 <__assert_fail@plt+0x196c>
   13d38:	b	11e9c <__assert_fail@plt+0x1030>
   13d3c:	ldr	r0, [r9, #8]
   13d40:	cmp	r0, #0
   13d44:	beq	13da4 <__assert_fail@plt+0x2f38>
   13d48:	ldr	r3, [r9, #16]
   13d4c:	cmp	r3, #0
   13d50:	beq	13d04 <__assert_fail@plt+0x2e98>
   13d54:	mov	r0, r9
   13d58:	bl	110e0 <__assert_fail@plt+0x274>
   13d5c:	cmp	r0, #0
   13d60:	bne	11e9c <__assert_fail@plt+0x1030>
   13d64:	b	13cf8 <__assert_fail@plt+0x2e8c>
   13d68:	ldr	r0, [fp, #8]
   13d6c:	cmp	r0, #0
   13d70:	beq	13db8 <__assert_fail@plt+0x2f4c>
   13d74:	ldr	r3, [fp, #16]
   13d78:	cmp	r3, #0
   13d7c:	bne	13d90 <__assert_fail@plt+0x2f24>
   13d80:	bl	11750 <__assert_fail@plt+0x8e4>
   13d84:	cmp	r0, #0
   13d88:	beq	127b0 <__assert_fail@plt+0x1944>
   13d8c:	b	11e9c <__assert_fail@plt+0x1030>
   13d90:	mov	r0, fp
   13d94:	bl	110e0 <__assert_fail@plt+0x274>
   13d98:	cmp	r0, #0
   13d9c:	bne	11e9c <__assert_fail@plt+0x1030>
   13da0:	b	127a4 <__assert_fail@plt+0x1938>
   13da4:	mov	r0, r9
   13da8:	bl	115f0 <__assert_fail@plt+0x784>
   13dac:	cmp	r0, #0
   13db0:	beq	12800 <__assert_fail@plt+0x1994>
   13db4:	b	11e9c <__assert_fail@plt+0x1030>
   13db8:	mov	r0, fp
   13dbc:	bl	115f0 <__assert_fail@plt+0x784>
   13dc0:	cmp	r0, #0
   13dc4:	beq	127b0 <__assert_fail@plt+0x1944>
   13dc8:	b	11e9c <__assert_fail@plt+0x1030>
   13dcc:	mov	r0, sl
   13dd0:	bl	115f0 <__assert_fail@plt+0x784>
   13dd4:	cmp	r0, #0
   13dd8:	beq	12800 <__assert_fail@plt+0x1994>
   13ddc:	b	11e9c <__assert_fail@plt+0x1030>
   13de0:	mov	r0, r9
   13de4:	bl	115f0 <__assert_fail@plt+0x784>
   13de8:	cmp	r0, #0
   13dec:	beq	127d8 <__assert_fail@plt+0x196c>
   13df0:	b	11e9c <__assert_fail@plt+0x1030>
   13df4:	ldr	r8, [r9, #8]
   13df8:	cmp	r8, #0
   13dfc:	beq	13ef0 <__assert_fail@plt+0x3084>
   13e00:	ldr	r3, [r9, #16]
   13e04:	cmp	r3, #0
   13e08:	bne	126ac <__assert_fail@plt+0x1840>
   13e0c:	ldr	r0, [r8, #4]
   13e10:	cmp	r0, #0
   13e14:	beq	13e74 <__assert_fail@plt+0x3008>
   13e18:	bl	11750 <__assert_fail@plt+0x8e4>
   13e1c:	cmp	r0, #0
   13e20:	bne	11e9c <__assert_fail@plt+0x1030>
   13e24:	ldr	r3, [r8, #16]
   13e28:	cmp	r3, #0
   13e2c:	bne	13e8c <__assert_fail@plt+0x3020>
   13e30:	ldr	r0, [r8, #8]
   13e34:	cmp	r0, #0
   13e38:	beq	126c8 <__assert_fail@plt+0x185c>
   13e3c:	bl	11750 <__assert_fail@plt+0x8e4>
   13e40:	cmp	r0, #0
   13e44:	beq	126c8 <__assert_fail@plt+0x185c>
   13e48:	b	11e9c <__assert_fail@plt+0x1030>
   13e4c:	ldr	r0, [r8, #8]
   13e50:	cmp	r0, #0
   13e54:	beq	13f04 <__assert_fail@plt+0x3098>
   13e58:	ldr	r3, [r8, #16]
   13e5c:	cmp	r3, #0
   13e60:	bne	13ea0 <__assert_fail@plt+0x3034>
   13e64:	bl	11750 <__assert_fail@plt+0x8e4>
   13e68:	cmp	r0, #0
   13e6c:	beq	126a0 <__assert_fail@plt+0x1834>
   13e70:	b	11e9c <__assert_fail@plt+0x1030>
   13e74:	ldr	r0, [r8, #8]
   13e78:	cmp	r0, #0
   13e7c:	beq	13ed0 <__assert_fail@plt+0x3064>
   13e80:	ldr	r3, [r8, #16]
   13e84:	cmp	r3, #0
   13e88:	beq	13e3c <__assert_fail@plt+0x2fd0>
   13e8c:	mov	r0, r8
   13e90:	bl	110e0 <__assert_fail@plt+0x274>
   13e94:	cmp	r0, #0
   13e98:	bne	11e9c <__assert_fail@plt+0x1030>
   13e9c:	b	13e30 <__assert_fail@plt+0x2fc4>
   13ea0:	mov	r0, r8
   13ea4:	bl	110e0 <__assert_fail@plt+0x274>
   13ea8:	cmp	r0, #0
   13eac:	bne	11e9c <__assert_fail@plt+0x1030>
   13eb0:	b	12694 <__assert_fail@plt+0x1828>
   13eb4:	ldr	r8, [r7, #8]
   13eb8:	cmp	r8, #0
   13ebc:	beq	13ee4 <__assert_fail@plt+0x3078>
   13ec0:	ldr	r3, [r7, #16]
   13ec4:	cmp	r3, #0
   13ec8:	bne	126d4 <__assert_fail@plt+0x1868>
   13ecc:	b	126f0 <__assert_fail@plt+0x1884>
   13ed0:	mov	r0, r8
   13ed4:	bl	115f0 <__assert_fail@plt+0x784>
   13ed8:	cmp	r0, #0
   13edc:	beq	126c8 <__assert_fail@plt+0x185c>
   13ee0:	b	11e9c <__assert_fail@plt+0x1030>
   13ee4:	mov	r0, r7
   13ee8:	bl	115f0 <__assert_fail@plt+0x784>
   13eec:	b	11e9c <__assert_fail@plt+0x1030>
   13ef0:	mov	r0, r9
   13ef4:	bl	115f0 <__assert_fail@plt+0x784>
   13ef8:	cmp	r0, #0
   13efc:	beq	126c8 <__assert_fail@plt+0x185c>
   13f00:	b	11e9c <__assert_fail@plt+0x1030>
   13f04:	mov	r0, r8
   13f08:	bl	115f0 <__assert_fail@plt+0x784>
   13f0c:	cmp	r0, #0
   13f10:	beq	126a0 <__assert_fail@plt+0x1834>
   13f14:	b	11e9c <__assert_fail@plt+0x1030>
   13f18:	ldr	r7, [fp, #8]
   13f1c:	cmp	r7, #0
   13f20:	beq	14230 <__assert_fail@plt+0x33c4>
   13f24:	ldr	r3, [fp, #16]
   13f28:	cmp	r3, #0
   13f2c:	bne	120d4 <__assert_fail@plt+0x1268>
   13f30:	ldr	r0, [r7, #4]
   13f34:	cmp	r0, #0
   13f38:	beq	13f98 <__assert_fail@plt+0x312c>
   13f3c:	bl	11750 <__assert_fail@plt+0x8e4>
   13f40:	cmp	r0, #0
   13f44:	bne	11e9c <__assert_fail@plt+0x1030>
   13f48:	ldr	r3, [r7, #16]
   13f4c:	cmp	r3, #0
   13f50:	bne	13fb0 <__assert_fail@plt+0x3144>
   13f54:	ldr	r0, [r7, #8]
   13f58:	cmp	r0, #0
   13f5c:	beq	120f0 <__assert_fail@plt+0x1284>
   13f60:	bl	11750 <__assert_fail@plt+0x8e4>
   13f64:	cmp	r0, #0
   13f68:	beq	120f0 <__assert_fail@plt+0x1284>
   13f6c:	b	11e9c <__assert_fail@plt+0x1030>
   13f70:	ldr	r0, [r7, #8]
   13f74:	cmp	r0, #0
   13f78:	beq	13fec <__assert_fail@plt+0x3180>
   13f7c:	ldr	r3, [r7, #16]
   13f80:	cmp	r3, #0
   13f84:	bne	13fc4 <__assert_fail@plt+0x3158>
   13f88:	bl	11750 <__assert_fail@plt+0x8e4>
   13f8c:	cmp	r0, #0
   13f90:	beq	120c8 <__assert_fail@plt+0x125c>
   13f94:	b	11e9c <__assert_fail@plt+0x1030>
   13f98:	ldr	r0, [r7, #8]
   13f9c:	cmp	r0, #0
   13fa0:	beq	13fd8 <__assert_fail@plt+0x316c>
   13fa4:	ldr	r3, [r7, #16]
   13fa8:	cmp	r3, #0
   13fac:	beq	13f60 <__assert_fail@plt+0x30f4>
   13fb0:	mov	r0, r7
   13fb4:	bl	110e0 <__assert_fail@plt+0x274>
   13fb8:	cmp	r0, #0
   13fbc:	bne	11e9c <__assert_fail@plt+0x1030>
   13fc0:	b	13f54 <__assert_fail@plt+0x30e8>
   13fc4:	mov	r0, r7
   13fc8:	bl	110e0 <__assert_fail@plt+0x274>
   13fcc:	cmp	r0, #0
   13fd0:	bne	11e9c <__assert_fail@plt+0x1030>
   13fd4:	b	120bc <__assert_fail@plt+0x1250>
   13fd8:	mov	r0, r7
   13fdc:	bl	115f0 <__assert_fail@plt+0x784>
   13fe0:	cmp	r0, #0
   13fe4:	beq	120f0 <__assert_fail@plt+0x1284>
   13fe8:	b	11e9c <__assert_fail@plt+0x1030>
   13fec:	mov	r0, r7
   13ff0:	bl	115f0 <__assert_fail@plt+0x784>
   13ff4:	cmp	r0, #0
   13ff8:	beq	120c8 <__assert_fail@plt+0x125c>
   13ffc:	b	11e9c <__assert_fail@plt+0x1030>
   14000:	ldr	r0, [r8, #8]
   14004:	cmp	r0, #0
   14008:	beq	14054 <__assert_fail@plt+0x31e8>
   1400c:	ldr	r3, [r8, #16]
   14010:	cmp	r3, #0
   14014:	beq	12530 <__assert_fail@plt+0x16c4>
   14018:	mov	r0, r8
   1401c:	bl	110e0 <__assert_fail@plt+0x274>
   14020:	cmp	r0, #0
   14024:	bne	11e9c <__assert_fail@plt+0x1030>
   14028:	b	12524 <__assert_fail@plt+0x16b8>
   1402c:	mov	r0, sl
   14030:	bl	115f0 <__assert_fail@plt+0x784>
   14034:	cmp	r0, #0
   14038:	beq	12118 <__assert_fail@plt+0x12ac>
   1403c:	b	11e9c <__assert_fail@plt+0x1030>
   14040:	mov	r0, sl
   14044:	bl	115f0 <__assert_fail@plt+0x784>
   14048:	cmp	r0, #0
   1404c:	beq	13978 <__assert_fail@plt+0x2b0c>
   14050:	b	11e9c <__assert_fail@plt+0x1030>
   14054:	mov	r0, r8
   14058:	bl	115f0 <__assert_fail@plt+0x784>
   1405c:	cmp	r0, #0
   14060:	beq	11e80 <__assert_fail@plt+0x1014>
   14064:	b	11e9c <__assert_fail@plt+0x1030>
   14068:	ldr	r0, [sl, #8]
   1406c:	cmp	r0, #0
   14070:	beq	14090 <__assert_fail@plt+0x3224>
   14074:	ldr	r3, [sl, #16]
   14078:	cmp	r3, #0
   1407c:	bne	1421c <__assert_fail@plt+0x33b0>
   14080:	bl	11750 <__assert_fail@plt+0x8e4>
   14084:	cmp	r0, #0
   14088:	beq	12b68 <__assert_fail@plt+0x1cfc>
   1408c:	b	11e9c <__assert_fail@plt+0x1030>
   14090:	mov	r0, sl
   14094:	bl	115f0 <__assert_fail@plt+0x784>
   14098:	cmp	r0, #0
   1409c:	beq	12b68 <__assert_fail@plt+0x1cfc>
   140a0:	b	11e9c <__assert_fail@plt+0x1030>
   140a4:	ldr	r9, [r7, #8]
   140a8:	cmp	r9, #0
   140ac:	beq	140d4 <__assert_fail@plt+0x3268>
   140b0:	ldr	r3, [r7, #16]
   140b4:	cmp	r3, #0
   140b8:	bne	12b9c <__assert_fail@plt+0x1d30>
   140bc:	b	12bb8 <__assert_fail@plt+0x1d4c>
   140c0:	mov	r0, r9
   140c4:	bl	115f0 <__assert_fail@plt+0x784>
   140c8:	cmp	r0, #0
   140cc:	beq	12140 <__assert_fail@plt+0x12d4>
   140d0:	b	11e9c <__assert_fail@plt+0x1030>
   140d4:	mov	r0, r7
   140d8:	bl	115f0 <__assert_fail@plt+0x784>
   140dc:	cmp	r0, #0
   140e0:	beq	12140 <__assert_fail@plt+0x12d4>
   140e4:	b	11e9c <__assert_fail@plt+0x1030>
   140e8:	mov	r0, r8
   140ec:	bl	110e0 <__assert_fail@plt+0x274>
   140f0:	cmp	r0, #0
   140f4:	bne	11e9c <__assert_fail@plt+0x1030>
   140f8:	b	12ac4 <__assert_fail@plt+0x1c58>
   140fc:	ldr	r0, [sl, #8]
   14100:	cmp	r0, #0
   14104:	beq	142e0 <__assert_fail@plt+0x3474>
   14108:	ldr	r3, [sl, #16]
   1410c:	cmp	r3, #0
   14110:	beq	12af8 <__assert_fail@plt+0x1c8c>
   14114:	b	12adc <__assert_fail@plt+0x1c70>
   14118:	ldr	r0, [sl, #8]
   1411c:	cmp	r0, #0
   14120:	beq	1435c <__assert_fail@plt+0x34f0>
   14124:	ldr	r3, [sl, #16]
   14128:	cmp	r3, #0
   1412c:	bne	12a50 <__assert_fail@plt+0x1be4>
   14130:	bl	11750 <__assert_fail@plt+0x8e4>
   14134:	cmp	r0, #0
   14138:	beq	12a6c <__assert_fail@plt+0x1c00>
   1413c:	b	11e9c <__assert_fail@plt+0x1030>
   14140:	mov	r0, r8
   14144:	bl	115f0 <__assert_fail@plt+0x784>
   14148:	cmp	r0, #0
   1414c:	beq	12ad0 <__assert_fail@plt+0x1c64>
   14150:	b	11e9c <__assert_fail@plt+0x1030>
   14154:	ldr	r0, [sl, #8]
   14158:	cmp	r0, #0
   1415c:	beq	141cc <__assert_fail@plt+0x3360>
   14160:	ldr	r3, [sl, #16]
   14164:	cmp	r3, #0
   14168:	bne	1417c <__assert_fail@plt+0x3310>
   1416c:	bl	11750 <__assert_fail@plt+0x8e4>
   14170:	cmp	r0, #0
   14174:	beq	124b0 <__assert_fail@plt+0x1644>
   14178:	b	11e9c <__assert_fail@plt+0x1030>
   1417c:	mov	r0, sl
   14180:	bl	110e0 <__assert_fail@plt+0x274>
   14184:	cmp	r0, #0
   14188:	bne	11e9c <__assert_fail@plt+0x1030>
   1418c:	b	124a4 <__assert_fail@plt+0x1638>
   14190:	ldr	r0, [r8, #8]
   14194:	cmp	r0, #0
   14198:	beq	141b8 <__assert_fail@plt+0x334c>
   1419c:	ldr	r3, [r8, #16]
   141a0:	cmp	r3, #0
   141a4:	bne	124bc <__assert_fail@plt+0x1650>
   141a8:	bl	11750 <__assert_fail@plt+0x8e4>
   141ac:	cmp	r0, #0
   141b0:	beq	124d8 <__assert_fail@plt+0x166c>
   141b4:	b	11e9c <__assert_fail@plt+0x1030>
   141b8:	mov	r0, r8
   141bc:	bl	115f0 <__assert_fail@plt+0x784>
   141c0:	cmp	r0, #0
   141c4:	beq	124d8 <__assert_fail@plt+0x166c>
   141c8:	b	11e9c <__assert_fail@plt+0x1030>
   141cc:	mov	r0, sl
   141d0:	bl	115f0 <__assert_fail@plt+0x784>
   141d4:	cmp	r0, #0
   141d8:	beq	124b0 <__assert_fail@plt+0x1644>
   141dc:	b	11e9c <__assert_fail@plt+0x1030>
   141e0:	ldr	r0, [r9, #8]
   141e4:	cmp	r0, #0
   141e8:	beq	14208 <__assert_fail@plt+0x339c>
   141ec:	ldr	r3, [r9, #16]
   141f0:	cmp	r3, #0
   141f4:	bne	12b74 <__assert_fail@plt+0x1d08>
   141f8:	bl	11750 <__assert_fail@plt+0x8e4>
   141fc:	cmp	r0, #0
   14200:	beq	12b90 <__assert_fail@plt+0x1d24>
   14204:	b	11e9c <__assert_fail@plt+0x1030>
   14208:	mov	r0, r9
   1420c:	bl	115f0 <__assert_fail@plt+0x784>
   14210:	cmp	r0, #0
   14214:	beq	12b90 <__assert_fail@plt+0x1d24>
   14218:	b	11e9c <__assert_fail@plt+0x1030>
   1421c:	mov	r0, sl
   14220:	bl	110e0 <__assert_fail@plt+0x274>
   14224:	cmp	r0, #0
   14228:	bne	11e9c <__assert_fail@plt+0x1030>
   1422c:	b	12b5c <__assert_fail@plt+0x1cf0>
   14230:	mov	r0, fp
   14234:	bl	115f0 <__assert_fail@plt+0x784>
   14238:	cmp	r0, #0
   1423c:	beq	120f0 <__assert_fail@plt+0x1284>
   14240:	b	11e9c <__assert_fail@plt+0x1030>
   14244:	mov	r0, r3
   14248:	bl	115f0 <__assert_fail@plt+0x784>
   1424c:	cmp	r0, #0
   14250:	beq	11e18 <__assert_fail@plt+0xfac>
   14254:	b	11e9c <__assert_fail@plt+0x1030>
   14258:	ldr	fp, [r8, #8]
   1425c:	cmp	fp, #0
   14260:	beq	14288 <__assert_fail@plt+0x341c>
   14264:	ldr	r3, [r8, #16]
   14268:	cmp	r3, #0
   1426c:	bne	12c58 <__assert_fail@plt+0x1dec>
   14270:	b	12c74 <__assert_fail@plt+0x1e08>
   14274:	mov	r0, fp
   14278:	bl	115f0 <__assert_fail@plt+0x784>
   1427c:	cmp	r0, #0
   14280:	beq	11e40 <__assert_fail@plt+0xfd4>
   14284:	b	11e9c <__assert_fail@plt+0x1030>
   14288:	mov	r0, r8
   1428c:	bl	115f0 <__assert_fail@plt+0x784>
   14290:	cmp	r0, #0
   14294:	beq	11e40 <__assert_fail@plt+0xfd4>
   14298:	b	11e9c <__assert_fail@plt+0x1030>
   1429c:	mov	r0, r7
   142a0:	bl	115f0 <__assert_fail@plt+0x784>
   142a4:	cmp	r0, #0
   142a8:	beq	12630 <__assert_fail@plt+0x17c4>
   142ac:	b	11e9c <__assert_fail@plt+0x1030>
   142b0:	mov	r0, fp
   142b4:	bl	115f0 <__assert_fail@plt+0x784>
   142b8:	cmp	r0, #0
   142bc:	beq	12c4c <__assert_fail@plt+0x1de0>
   142c0:	b	11e9c <__assert_fail@plt+0x1030>
   142c4:	ldr	sl, [r8, #8]
   142c8:	cmp	sl, #0
   142cc:	beq	142f4 <__assert_fail@plt+0x3488>
   142d0:	ldr	r3, [r8, #16]
   142d4:	cmp	r3, #0
   142d8:	bne	12a78 <__assert_fail@plt+0x1c0c>
   142dc:	b	12a94 <__assert_fail@plt+0x1c28>
   142e0:	mov	r0, sl
   142e4:	bl	115f0 <__assert_fail@plt+0x784>
   142e8:	cmp	r0, #0
   142ec:	beq	11fb8 <__assert_fail@plt+0x114c>
   142f0:	b	11e9c <__assert_fail@plt+0x1030>
   142f4:	mov	r0, r8
   142f8:	bl	115f0 <__assert_fail@plt+0x784>
   142fc:	cmp	r0, #0
   14300:	beq	11fb8 <__assert_fail@plt+0x114c>
   14304:	b	11e9c <__assert_fail@plt+0x1030>
   14308:	ldr	r0, [fp, #8]
   1430c:	cmp	r0, #0
   14310:	beq	14348 <__assert_fail@plt+0x34dc>
   14314:	ldr	r3, [fp, #16]
   14318:	cmp	r3, #0
   1431c:	beq	13a08 <__assert_fail@plt+0x2b9c>
   14320:	mov	r0, fp
   14324:	bl	110e0 <__assert_fail@plt+0x274>
   14328:	cmp	r0, #0
   1432c:	bne	11e9c <__assert_fail@plt+0x1030>
   14330:	b	12a38 <__assert_fail@plt+0x1bcc>
   14334:	mov	r0, r7
   14338:	bl	115f0 <__assert_fail@plt+0x784>
   1433c:	cmp	r0, #0
   14340:	beq	12118 <__assert_fail@plt+0x12ac>
   14344:	b	11e9c <__assert_fail@plt+0x1030>
   14348:	mov	r0, fp
   1434c:	bl	115f0 <__assert_fail@plt+0x784>
   14350:	cmp	r0, #0
   14354:	beq	12a44 <__assert_fail@plt+0x1bd8>
   14358:	b	11e9c <__assert_fail@plt+0x1030>
   1435c:	mov	r0, sl
   14360:	bl	115f0 <__assert_fail@plt+0x784>
   14364:	cmp	r0, #0
   14368:	beq	12a6c <__assert_fail@plt+0x1c00>
   1436c:	b	11e9c <__assert_fail@plt+0x1030>
   14370:	movw	r3, #45408	; 0xb160
   14374:	movt	r3, #2
   14378:	str	r0, [r3]
   1437c:	bx	lr
   14380:	movw	r3, #45408	; 0xb160
   14384:	movt	r3, #2
   14388:	strb	r0, [r3, #4]
   1438c:	bx	lr
   14390:	movw	r3, #45380	; 0xb144
   14394:	movt	r3, #2
   14398:	strd	r4, [sp, #-16]!
   1439c:	ldr	r0, [r3]
   143a0:	str	r6, [sp, #8]
   143a4:	str	lr, [sp, #12]
   143a8:	sub	sp, sp, #8
   143ac:	bl	19770 <__assert_fail@plt+0x8904>
   143b0:	cmp	r0, #0
   143b4:	beq	143e0 <__assert_fail@plt+0x3574>
   143b8:	movw	r4, #45408	; 0xb160
   143bc:	movt	r4, #2
   143c0:	ldrb	r6, [r4, #4]
   143c4:	bl	10dac <__errno_location@plt>
   143c8:	mov	r5, r0
   143cc:	cmp	r6, #0
   143d0:	beq	1440c <__assert_fail@plt+0x35a0>
   143d4:	ldr	r3, [r0]
   143d8:	cmp	r3, #32
   143dc:	bne	1440c <__assert_fail@plt+0x35a0>
   143e0:	movw	r3, #45368	; 0xb138
   143e4:	movt	r3, #2
   143e8:	ldr	r0, [r3]
   143ec:	bl	19770 <__assert_fail@plt+0x8904>
   143f0:	cmp	r0, #0
   143f4:	bne	14454 <__assert_fail@plt+0x35e8>
   143f8:	add	sp, sp, #8
   143fc:	ldrd	r4, [sp]
   14400:	ldr	r6, [sp, #8]
   14404:	add	sp, sp, #12
   14408:	pop	{pc}		; (ldr pc, [sp], #4)
   1440c:	movw	r1, #40604	; 0x9e9c
   14410:	movt	r1, #1
   14414:	mov	r2, #5
   14418:	mov	r0, #0
   1441c:	bl	10ca4 <dcgettext@plt>
   14420:	mov	r6, r0
   14424:	ldr	r0, [r4]
   14428:	cmp	r0, #0
   1442c:	beq	14464 <__assert_fail@plt+0x35f8>
   14430:	ldr	r4, [r5]
   14434:	bl	178d4 <__assert_fail@plt+0x6a68>
   14438:	mov	r3, r0
   1443c:	movw	r2, #40616	; 0x9ea8
   14440:	movt	r2, #1
   14444:	mov	r0, #0
   14448:	str	r6, [sp]
   1444c:	mov	r1, r4
   14450:	bl	10d1c <error@plt>
   14454:	movw	r3, #45284	; 0xb0e4
   14458:	movt	r3, #2
   1445c:	ldr	r0, [r3]
   14460:	bl	10c68 <_exit@plt>
   14464:	mov	r3, r6
   14468:	movw	r2, #40620	; 0x9eac
   1446c:	movt	r2, #1
   14470:	ldr	r1, [r5]
   14474:	bl	10d1c <error@plt>
   14478:	b	14454 <__assert_fail@plt+0x35e8>
   1447c:	b	10c44 <posix_fadvise64@plt>
   14480:	cmp	r0, #0
   14484:	bxeq	lr
   14488:	str	r4, [sp, #-16]!
   1448c:	mov	r4, r1
   14490:	strd	r6, [sp, #4]
   14494:	mov	r6, #0
   14498:	mov	r7, #0
   1449c:	str	lr, [sp, #12]
   144a0:	sub	sp, sp, #16
   144a4:	bl	10ddc <fileno@plt>
   144a8:	mov	r2, r6
   144ac:	mov	r3, r7
   144b0:	strd	r6, [sp]
   144b4:	str	r4, [sp, #8]
   144b8:	bl	10c44 <posix_fadvise64@plt>
   144bc:	add	sp, sp, #16
   144c0:	ldr	r4, [sp]
   144c4:	ldrd	r6, [sp, #4]
   144c8:	add	sp, sp, #12
   144cc:	pop	{pc}		; (ldr pc, [sp], #4)
   144d0:	strd	r4, [sp, #-12]!
   144d4:	mov	r4, r0
   144d8:	str	lr, [sp, #8]
   144dc:	sub	sp, sp, #12
   144e0:	bl	10ddc <fileno@plt>
   144e4:	cmp	r0, #0
   144e8:	mov	r0, r4
   144ec:	blt	14570 <__assert_fail@plt+0x3704>
   144f0:	bl	10d58 <__freading@plt>
   144f4:	cmp	r0, #0
   144f8:	bne	1453c <__assert_fail@plt+0x36d0>
   144fc:	mov	r0, r4
   14500:	bl	14584 <__assert_fail@plt+0x3718>
   14504:	cmp	r0, #0
   14508:	beq	1456c <__assert_fail@plt+0x3700>
   1450c:	bl	10dac <__errno_location@plt>
   14510:	mov	r5, r0
   14514:	mov	r0, r4
   14518:	ldr	r4, [r5]
   1451c:	bl	10df4 <fclose@plt>
   14520:	cmp	r4, #0
   14524:	mvnne	r0, #0
   14528:	strne	r4, [r5]
   1452c:	add	sp, sp, #12
   14530:	ldrd	r4, [sp]
   14534:	add	sp, sp, #8
   14538:	pop	{pc}		; (ldr pc, [sp], #4)
   1453c:	mov	r0, r4
   14540:	bl	10ddc <fileno@plt>
   14544:	mov	r1, #1
   14548:	mov	r2, #0
   1454c:	mov	r3, #0
   14550:	str	r1, [sp]
   14554:	bl	10cec <lseek64@plt>
   14558:	mvn	r3, #0
   1455c:	mvn	r2, #0
   14560:	cmp	r1, r3
   14564:	cmpeq	r0, r2
   14568:	bne	144fc <__assert_fail@plt+0x3690>
   1456c:	mov	r0, r4
   14570:	add	sp, sp, #12
   14574:	ldrd	r4, [sp]
   14578:	ldr	lr, [sp, #8]
   1457c:	add	sp, sp, #12
   14580:	b	10df4 <fclose@plt>
   14584:	str	r4, [sp, #-8]!
   14588:	subs	r4, r0, #0
   1458c:	str	lr, [sp, #4]
   14590:	sub	sp, sp, #8
   14594:	beq	145b0 <__assert_fail@plt+0x3744>
   14598:	bl	10d58 <__freading@plt>
   1459c:	cmp	r0, #0
   145a0:	beq	145b0 <__assert_fail@plt+0x3744>
   145a4:	ldr	r3, [r4]
   145a8:	tst	r3, #256	; 0x100
   145ac:	bne	145c8 <__assert_fail@plt+0x375c>
   145b0:	mov	r0, r4
   145b4:	add	sp, sp, #8
   145b8:	ldr	r4, [sp]
   145bc:	ldr	lr, [sp, #4]
   145c0:	add	sp, sp, #8
   145c4:	b	10c50 <fflush@plt>
   145c8:	mov	r1, #1
   145cc:	mov	r2, #0
   145d0:	mov	r3, #0
   145d4:	mov	r0, r4
   145d8:	str	r1, [sp]
   145dc:	bl	14854 <__assert_fail@plt+0x39e8>
   145e0:	b	145b0 <__assert_fail@plt+0x3744>
   145e4:	strd	r4, [sp, #-12]!
   145e8:	mov	r5, r0
   145ec:	str	lr, [sp, #8]
   145f0:	sub	sp, sp, #12
   145f4:	bl	10dac <__errno_location@plt>
   145f8:	mov	r4, r0
   145fc:	mov	r2, #0
   14600:	ldr	r3, [r4]
   14604:	mov	r0, r5
   14608:	str	r2, [r4]
   1460c:	str	r3, [sp]
   14610:	str	r3, [sp, #4]
   14614:	bl	10c5c <free@plt>
   14618:	ldr	r3, [r4]
   1461c:	add	r2, sp, #8
   14620:	clz	r3, r3
   14624:	lsr	r3, r3, #5
   14628:	add	r3, r2, r3, lsl #2
   1462c:	ldr	r3, [r3, #-8]
   14630:	str	r3, [r4]
   14634:	add	sp, sp, #12
   14638:	ldrd	r4, [sp]
   1463c:	add	sp, sp, #8
   14640:	pop	{pc}		; (ldr pc, [sp], #4)
   14644:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14648:	mov	r5, r2
   1464c:	strd	r6, [sp, #8]
   14650:	strd	r8, [sp, #16]
   14654:	mov	r9, r0
   14658:	mov	r0, r2
   1465c:	str	sl, [sp, #24]
   14660:	mov	sl, r1
   14664:	str	lr, [sp, #28]
   14668:	bl	10ddc <fileno@plt>
   1466c:	mov	r4, r0
   14670:	bl	10dac <__errno_location@plt>
   14674:	cmp	r4, #1
   14678:	mov	r8, r0
   1467c:	beq	14804 <__assert_fail@plt+0x3998>
   14680:	cmp	r4, #2
   14684:	beq	147bc <__assert_fail@plt+0x3950>
   14688:	cmp	r4, #0
   1468c:	beq	14760 <__assert_fail@plt+0x38f4>
   14690:	mov	r1, #2
   14694:	mov	r0, r1
   14698:	bl	10cb0 <dup2@plt>
   1469c:	subs	r4, r0, #2
   146a0:	movne	r4, #1
   146a4:	mov	r1, #1
   146a8:	mov	r0, r1
   146ac:	bl	10cb0 <dup2@plt>
   146b0:	subs	r7, r0, #1
   146b4:	movne	r7, #1
   146b8:	mov	r1, #0
   146bc:	mov	r0, r1
   146c0:	bl	10cb0 <dup2@plt>
   146c4:	subs	r6, r0, #0
   146c8:	beq	146fc <__assert_fail@plt+0x3890>
   146cc:	movw	r0, #40624	; 0x9eb0
   146d0:	movt	r0, #1
   146d4:	mov	r1, #0
   146d8:	bl	10d28 <open64@plt>
   146dc:	cmp	r0, #0
   146e0:	beq	146f8 <__assert_fail@plt+0x388c>
   146e4:	bge	14824 <__assert_fail@plt+0x39b8>
   146e8:	mov	r6, #1
   146ec:	mov	r5, #0
   146f0:	ldr	r9, [r8]
   146f4:	b	14780 <__assert_fail@plt+0x3914>
   146f8:	mov	r6, #1
   146fc:	cmp	r7, #0
   14700:	bne	147c4 <__assert_fail@plt+0x3958>
   14704:	cmp	r4, #0
   14708:	beq	14768 <__assert_fail@plt+0x38fc>
   1470c:	movw	r0, #40624	; 0x9eb0
   14710:	movt	r0, #1
   14714:	mov	r1, #0
   14718:	bl	10d28 <open64@plt>
   1471c:	cmp	r0, #2
   14720:	beq	14768 <__assert_fail@plt+0x38fc>
   14724:	cmp	r0, #0
   14728:	bge	14810 <__assert_fail@plt+0x39a4>
   1472c:	ldr	r9, [r8]
   14730:	mov	r5, #0
   14734:	mov	r0, #2
   14738:	bl	10e60 <close@plt>
   1473c:	cmp	r7, #0
   14740:	beq	14790 <__assert_fail@plt+0x3924>
   14744:	mov	r0, #1
   14748:	bl	10e60 <close@plt>
   1474c:	cmp	r6, #0
   14750:	beq	14798 <__assert_fail@plt+0x392c>
   14754:	mov	r0, #0
   14758:	bl	10e60 <close@plt>
   1475c:	b	14798 <__assert_fail@plt+0x392c>
   14760:	mov	r7, r4
   14764:	mov	r6, r4
   14768:	mov	r2, r5
   1476c:	mov	r0, r9
   14770:	mov	r1, sl
   14774:	bl	10d70 <freopen64@plt>
   14778:	ldr	r9, [r8]
   1477c:	mov	r5, r0
   14780:	cmp	r4, #0
   14784:	bne	14734 <__assert_fail@plt+0x38c8>
   14788:	cmp	r7, #0
   1478c:	bne	14744 <__assert_fail@plt+0x38d8>
   14790:	cmp	r6, #0
   14794:	bne	14754 <__assert_fail@plt+0x38e8>
   14798:	cmp	r5, #0
   1479c:	mov	r0, r5
   147a0:	ldrd	r4, [sp]
   147a4:	streq	r9, [r8]
   147a8:	ldrd	r6, [sp, #8]
   147ac:	ldrd	r8, [sp, #16]
   147b0:	ldr	sl, [sp, #24]
   147b4:	add	sp, sp, #28
   147b8:	pop	{pc}		; (ldr pc, [sp], #4)
   147bc:	mov	r4, #0
   147c0:	b	146a4 <__assert_fail@plt+0x3838>
   147c4:	movw	r0, #40624	; 0x9eb0
   147c8:	movt	r0, #1
   147cc:	mov	r1, #0
   147d0:	bl	10d28 <open64@plt>
   147d4:	cmp	r0, #1
   147d8:	beq	14704 <__assert_fail@plt+0x3898>
   147dc:	cmp	r0, #0
   147e0:	bge	14840 <__assert_fail@plt+0x39d4>
   147e4:	ldr	r9, [r8]
   147e8:	cmp	r4, #0
   147ec:	moveq	r5, r4
   147f0:	beq	14744 <__assert_fail@plt+0x38d8>
   147f4:	mov	r0, #2
   147f8:	mov	r5, #0
   147fc:	bl	10e60 <close@plt>
   14800:	b	14744 <__assert_fail@plt+0x38d8>
   14804:	mov	r4, #0
   14808:	mov	r7, r4
   1480c:	b	146b8 <__assert_fail@plt+0x384c>
   14810:	bl	10e60 <close@plt>
   14814:	mov	r3, #9
   14818:	mov	r9, r3
   1481c:	str	r3, [r8]
   14820:	b	14730 <__assert_fail@plt+0x38c4>
   14824:	bl	10e60 <close@plt>
   14828:	mov	r3, #9
   1482c:	mov	r6, #1
   14830:	mov	r9, r3
   14834:	mov	r5, #0
   14838:	str	r3, [r8]
   1483c:	b	14780 <__assert_fail@plt+0x3914>
   14840:	bl	10e60 <close@plt>
   14844:	mov	r3, #9
   14848:	mov	r9, r3
   1484c:	str	r3, [r8]
   14850:	b	147e8 <__assert_fail@plt+0x397c>
   14854:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14858:	mov	r4, r0
   1485c:	ldr	ip, [r0, #4]
   14860:	strd	r6, [sp, #8]
   14864:	str	lr, [sp, #20]
   14868:	ldr	lr, [r0, #8]
   1486c:	str	r8, [sp, #16]
   14870:	sub	sp, sp, #8
   14874:	ldr	r5, [sp, #32]
   14878:	cmp	lr, ip
   1487c:	beq	148a4 <__assert_fail@plt+0x3a38>
   14880:	mov	r0, r4
   14884:	str	r5, [sp, #32]
   14888:	add	sp, sp, #8
   1488c:	ldrd	r4, [sp]
   14890:	ldrd	r6, [sp, #8]
   14894:	ldr	r8, [sp, #16]
   14898:	ldr	lr, [sp, #20]
   1489c:	add	sp, sp, #24
   148a0:	b	10e00 <fseeko64@plt>
   148a4:	ldr	ip, [r0, #16]
   148a8:	ldr	lr, [r0, #20]
   148ac:	cmp	lr, ip
   148b0:	bne	14880 <__assert_fail@plt+0x3a14>
   148b4:	ldr	r8, [r0, #36]	; 0x24
   148b8:	cmp	r8, #0
   148bc:	bne	14880 <__assert_fail@plt+0x3a14>
   148c0:	mov	r6, r2
   148c4:	mov	r7, r3
   148c8:	bl	10ddc <fileno@plt>
   148cc:	mov	r2, r6
   148d0:	mov	r3, r7
   148d4:	str	r5, [sp]
   148d8:	bl	10cec <lseek64@plt>
   148dc:	mvn	r3, #0
   148e0:	mvn	r2, #0
   148e4:	cmp	r1, r3
   148e8:	cmpeq	r0, r2
   148ec:	beq	1491c <__assert_fail@plt+0x3ab0>
   148f0:	ldr	r3, [r4]
   148f4:	strd	r0, [r4, #80]	; 0x50
   148f8:	bic	r3, r3, #16
   148fc:	str	r3, [r4]
   14900:	mov	r0, r8
   14904:	add	sp, sp, #8
   14908:	ldrd	r4, [sp]
   1490c:	ldrd	r6, [sp, #8]
   14910:	ldr	r8, [sp, #16]
   14914:	add	sp, sp, #20
   14918:	pop	{pc}		; (ldr pc, [sp], #4)
   1491c:	mvn	r8, #0
   14920:	b	14900 <__assert_fail@plt+0x3a94>
   14924:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14928:	movw	r4, #45384	; 0xb148
   1492c:	movt	r4, #2
   14930:	mov	r5, #0
   14934:	cmp	r0, #2
   14938:	strd	r6, [sp, #8]
   1493c:	str	r8, [sp, #16]
   14940:	str	lr, [sp, #20]
   14944:	sub	sp, sp, #16
   14948:	ldr	r6, [r4]
   1494c:	str	r5, [r4]
   14950:	beq	14980 <__assert_fail@plt+0x3b14>
   14954:	mov	r2, #0
   14958:	movw	r3, #45360	; 0xb130
   1495c:	movt	r3, #2
   14960:	str	r6, [r4]
   14964:	str	r2, [r3]
   14968:	add	sp, sp, #16
   1496c:	ldrd	r4, [sp]
   14970:	ldrd	r6, [sp, #8]
   14974:	ldr	r8, [sp, #16]
   14978:	add	sp, sp, #20
   1497c:	pop	{pc}		; (ldr pc, [sp], #4)
   14980:	mov	r8, r3
   14984:	mov	r7, r2
   14988:	str	r5, [sp]
   1498c:	movw	r3, #40636	; 0x9ebc
   14990:	movt	r3, #1
   14994:	movw	r2, #40684	; 0x9eec
   14998:	movt	r2, #1
   1499c:	bl	10d7c <getopt_long@plt>
   149a0:	cmn	r0, #1
   149a4:	beq	14954 <__assert_fail@plt+0x3ae8>
   149a8:	cmp	r0, #104	; 0x68
   149ac:	beq	149e8 <__assert_fail@plt+0x3b7c>
   149b0:	cmp	r0, #118	; 0x76
   149b4:	bne	14954 <__assert_fail@plt+0x3ae8>
   149b8:	add	ip, sp, #48	; 0x30
   149bc:	movw	r0, #45380	; 0xb144
   149c0:	movt	r0, #2
   149c4:	mov	r2, r8
   149c8:	ldr	r3, [sp, #40]	; 0x28
   149cc:	mov	r1, r7
   149d0:	str	ip, [sp]
   149d4:	ldr	r0, [r0]
   149d8:	str	ip, [sp, #12]
   149dc:	bl	18d58 <__assert_fail@plt+0x7eec>
   149e0:	mov	r0, r5
   149e4:	bl	10d94 <exit@plt>
   149e8:	mov	r0, r5
   149ec:	ldr	r3, [sp, #44]	; 0x2c
   149f0:	blx	r3
   149f4:	b	14954 <__assert_fail@plt+0x3ae8>
   149f8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   149fc:	mov	r5, #0
   14a00:	movw	r4, #45384	; 0xb148
   14a04:	movt	r4, #2
   14a08:	strd	r6, [sp, #8]
   14a0c:	movw	ip, #39892	; 0x9bd4
   14a10:	movt	ip, #1
   14a14:	strd	r8, [sp, #16]
   14a18:	mov	r9, #1
   14a1c:	str	lr, [sp, #24]
   14a20:	sub	sp, sp, #20
   14a24:	mov	r8, r3
   14a28:	ldrb	lr, [sp, #52]	; 0x34
   14a2c:	mov	r7, r2
   14a30:	movw	r3, #40636	; 0x9ebc
   14a34:	movt	r3, #1
   14a38:	movw	r2, #40684	; 0x9eec
   14a3c:	movt	r2, #1
   14a40:	str	r5, [sp]
   14a44:	ldr	r6, [r4]
   14a48:	str	r9, [r4]
   14a4c:	cmp	lr, r5
   14a50:	movne	r2, ip
   14a54:	bl	10d7c <getopt_long@plt>
   14a58:	cmn	r0, #1
   14a5c:	beq	14a84 <__assert_fail@plt+0x3c18>
   14a60:	cmp	r0, #104	; 0x68
   14a64:	beq	14ad0 <__assert_fail@plt+0x3c64>
   14a68:	cmp	r0, #118	; 0x76
   14a6c:	beq	14aa0 <__assert_fail@plt+0x3c34>
   14a70:	movw	r3, #45284	; 0xb0e4
   14a74:	movt	r3, #2
   14a78:	ldr	r0, [r3]
   14a7c:	ldr	r3, [sp, #56]	; 0x38
   14a80:	blx	r3
   14a84:	str	r6, [r4]
   14a88:	add	sp, sp, #20
   14a8c:	ldrd	r4, [sp]
   14a90:	ldrd	r6, [sp, #8]
   14a94:	ldrd	r8, [sp, #16]
   14a98:	add	sp, sp, #24
   14a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14aa0:	add	ip, sp, #60	; 0x3c
   14aa4:	movw	r0, #45380	; 0xb144
   14aa8:	movt	r0, #2
   14aac:	mov	r2, r8
   14ab0:	ldr	r3, [sp, #48]	; 0x30
   14ab4:	mov	r1, r7
   14ab8:	str	ip, [sp]
   14abc:	ldr	r0, [r0]
   14ac0:	str	ip, [sp, #12]
   14ac4:	bl	18d58 <__assert_fail@plt+0x7eec>
   14ac8:	mov	r0, r5
   14acc:	bl	10d94 <exit@plt>
   14ad0:	mov	r0, r5
   14ad4:	ldr	r3, [sp, #56]	; 0x38
   14ad8:	blx	r3
   14adc:	b	14a84 <__assert_fail@plt+0x3c18>
   14ae0:	strd	r4, [sp, #-16]!
   14ae4:	subs	r4, r0, #0
   14ae8:	str	r6, [sp, #8]
   14aec:	str	lr, [sp, #12]
   14af0:	beq	14b88 <__assert_fail@plt+0x3d1c>
   14af4:	mov	r1, #47	; 0x2f
   14af8:	bl	10e24 <strrchr@plt>
   14afc:	subs	r5, r0, #0
   14b00:	beq	14b60 <__assert_fail@plt+0x3cf4>
   14b04:	add	r6, r5, #1
   14b08:	sub	r3, r6, r4
   14b0c:	cmp	r3, #6
   14b10:	ble	14b60 <__assert_fail@plt+0x3cf4>
   14b14:	movw	r1, #40760	; 0x9f38
   14b18:	movt	r1, #1
   14b1c:	mov	r2, #7
   14b20:	sub	r0, r5, #6
   14b24:	bl	10e48 <strncmp@plt>
   14b28:	cmp	r0, #0
   14b2c:	bne	14b60 <__assert_fail@plt+0x3cf4>
   14b30:	movw	r1, #40768	; 0x9f40
   14b34:	movt	r1, #1
   14b38:	mov	r2, #3
   14b3c:	mov	r0, r6
   14b40:	bl	10e48 <strncmp@plt>
   14b44:	cmp	r0, #0
   14b48:	movne	r4, r6
   14b4c:	bne	14b60 <__assert_fail@plt+0x3cf4>
   14b50:	add	r4, r5, #4
   14b54:	movw	r3, #45352	; 0xb128
   14b58:	movt	r3, #2
   14b5c:	str	r4, [r3]
   14b60:	movw	r2, #45416	; 0xb168
   14b64:	movt	r2, #2
   14b68:	ldr	r6, [sp, #8]
   14b6c:	movw	r3, #45356	; 0xb12c
   14b70:	movt	r3, #2
   14b74:	str	r4, [r2]
   14b78:	str	r4, [r3]
   14b7c:	ldrd	r4, [sp]
   14b80:	add	sp, sp, #12
   14b84:	pop	{pc}		; (ldr pc, [sp], #4)
   14b88:	movw	r3, #45368	; 0xb138
   14b8c:	movt	r3, #2
   14b90:	movw	r0, #40704	; 0x9f00
   14b94:	movt	r0, #1
   14b98:	ldr	r3, [r3]
   14b9c:	mov	r2, #55	; 0x37
   14ba0:	mov	r1, #1
   14ba4:	bl	10ce0 <fwrite@plt>
   14ba8:	bl	10e54 <abort@plt>
   14bac:	mov	r2, #5
   14bb0:	strd	r4, [sp, #-16]!
   14bb4:	mov	r5, r0
   14bb8:	str	r6, [sp, #8]
   14bbc:	mov	r6, r1
   14bc0:	mov	r1, r0
   14bc4:	mov	r0, #0
   14bc8:	str	lr, [sp, #12]
   14bcc:	bl	10ca4 <dcgettext@plt>
   14bd0:	cmp	r5, r0
   14bd4:	mov	r4, r0
   14bd8:	beq	14bf0 <__assert_fail@plt+0x3d84>
   14bdc:	mov	r0, r4
   14be0:	ldrd	r4, [sp]
   14be4:	ldr	r6, [sp, #8]
   14be8:	add	sp, sp, #12
   14bec:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf0:	bl	197f8 <__assert_fail@plt+0x898c>
   14bf4:	ldrb	r3, [r0]
   14bf8:	bic	r3, r3, #32
   14bfc:	cmp	r3, #85	; 0x55
   14c00:	bne	14c68 <__assert_fail@plt+0x3dfc>
   14c04:	ldrb	r3, [r0, #1]
   14c08:	bic	r3, r3, #32
   14c0c:	cmp	r3, #84	; 0x54
   14c10:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14c14:	ldrb	r3, [r0, #2]
   14c18:	bic	r3, r3, #32
   14c1c:	cmp	r3, #70	; 0x46
   14c20:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14c24:	ldrb	r3, [r0, #3]
   14c28:	cmp	r3, #45	; 0x2d
   14c2c:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14c30:	ldrb	r3, [r0, #4]
   14c34:	cmp	r3, #56	; 0x38
   14c38:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14c3c:	ldrb	r3, [r0, #5]
   14c40:	cmp	r3, #0
   14c44:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14c48:	ldrb	r2, [r4]
   14c4c:	movw	r3, #40860	; 0x9f9c
   14c50:	movt	r3, #1
   14c54:	movw	r4, #40872	; 0x9fa8
   14c58:	movt	r4, #1
   14c5c:	cmp	r2, #96	; 0x60
   14c60:	movne	r4, r3
   14c64:	b	14bdc <__assert_fail@plt+0x3d70>
   14c68:	cmp	r3, #71	; 0x47
   14c6c:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14c70:	ldrb	r3, [r0, #1]
   14c74:	bic	r3, r3, #32
   14c78:	cmp	r3, #66	; 0x42
   14c7c:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14c80:	ldrb	r3, [r0, #2]
   14c84:	cmp	r3, #49	; 0x31
   14c88:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14c8c:	ldrb	r3, [r0, #3]
   14c90:	cmp	r3, #56	; 0x38
   14c94:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14c98:	ldrb	r3, [r0, #4]
   14c9c:	cmp	r3, #48	; 0x30
   14ca0:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14ca4:	ldrb	r3, [r0, #5]
   14ca8:	cmp	r3, #51	; 0x33
   14cac:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14cb0:	ldrb	r3, [r0, #6]
   14cb4:	cmp	r3, #48	; 0x30
   14cb8:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14cbc:	ldrb	r3, [r0, #7]
   14cc0:	cmp	r3, #0
   14cc4:	bne	14ce8 <__assert_fail@plt+0x3e7c>
   14cc8:	ldrb	r2, [r4]
   14ccc:	movw	r3, #40864	; 0x9fa0
   14cd0:	movt	r3, #1
   14cd4:	movw	r4, #40868	; 0x9fa4
   14cd8:	movt	r4, #1
   14cdc:	cmp	r2, #96	; 0x60
   14ce0:	movne	r4, r3
   14ce4:	b	14bdc <__assert_fail@plt+0x3d70>
   14ce8:	movw	r3, #40876	; 0x9fac
   14cec:	movt	r3, #1
   14cf0:	cmp	r6, #9
   14cf4:	movw	r4, #40856	; 0x9f98
   14cf8:	movt	r4, #1
   14cfc:	movne	r4, r3
   14d00:	b	14bdc <__assert_fail@plt+0x3d70>
   14d04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d08:	strd	r6, [sp, #8]
   14d0c:	strd	r8, [sp, #16]
   14d10:	mov	r8, r3
   14d14:	strd	sl, [sp, #24]
   14d18:	mov	fp, r0
   14d1c:	mov	sl, r1
   14d20:	str	lr, [sp, #32]
   14d24:	sub	sp, sp, #140	; 0x8c
   14d28:	ldr	r3, [sp, #180]	; 0xb4
   14d2c:	str	r2, [sp, #28]
   14d30:	and	r4, r3, #2
   14d34:	ubfx	r3, r3, #1, #1
   14d38:	str	r3, [sp, #44]	; 0x2c
   14d3c:	bl	10cf8 <__ctype_get_mb_cur_max@plt>
   14d40:	ldr	r3, [sp, #176]	; 0xb0
   14d44:	str	r0, [sp, #76]	; 0x4c
   14d48:	cmp	r3, #10
   14d4c:	ldrls	pc, [pc, r3, lsl #2]
   14d50:	b	166ec <__assert_fail@plt+0x5880>
   14d54:	ldrdeq	r5, [r1], -r4
   14d58:	strdeq	r5, [r1], -r0
   14d5c:	andeq	r5, r1, ip, ror #16
   14d60:	andeq	r5, r1, ip, asr r3
   14d64:	ldrdeq	r5, [r1], -ip
   14d68:	andeq	r5, r1, r8, asr r1
   14d6c:	andeq	r5, r1, r0, lsr r2
   14d70:	muleq	r1, r8, r2
   14d74:	andeq	r4, r1, r0, lsl #27
   14d78:	andeq	r4, r1, r0, lsl #27
   14d7c:	andeq	r4, r1, r0, lsl #27
   14d80:	ldr	r3, [sp, #176]	; 0xb0
   14d84:	cmp	r3, #10
   14d88:	beq	14db4 <__assert_fail@plt+0x3f48>
   14d8c:	mov	r1, r3
   14d90:	movw	r0, #40880	; 0x9fb0
   14d94:	movt	r0, #1
   14d98:	bl	14bac <__assert_fail@plt+0x3d40>
   14d9c:	str	r0, [sp, #188]	; 0xbc
   14da0:	movw	r0, #40876	; 0x9fac
   14da4:	movt	r0, #1
   14da8:	ldr	r1, [sp, #176]	; 0xb0
   14dac:	bl	14bac <__assert_fail@plt+0x3d40>
   14db0:	str	r0, [sp, #192]	; 0xc0
   14db4:	cmp	r4, #0
   14db8:	movne	r4, #0
   14dbc:	beq	16478 <__assert_fail@plt+0x560c>
   14dc0:	mov	r5, #0
   14dc4:	ldr	r0, [sp, #192]	; 0xc0
   14dc8:	mov	r9, r5
   14dcc:	str	r5, [sp, #64]	; 0x40
   14dd0:	bl	10da0 <strlen@plt>
   14dd4:	mov	r3, #1
   14dd8:	ldr	r2, [sp, #44]	; 0x2c
   14ddc:	cmp	r0, r5
   14de0:	moveq	r2, r5
   14de4:	str	r3, [sp, #32]
   14de8:	str	r3, [sp, #48]	; 0x30
   14dec:	str	r5, [sp, #52]	; 0x34
   14df0:	str	r3, [sp, #60]	; 0x3c
   14df4:	ldr	r3, [sp, #180]	; 0xb4
   14df8:	str	r0, [sp, #56]	; 0x38
   14dfc:	str	r5, [sp, #68]	; 0x44
   14e00:	str	r5, [sp, #80]	; 0x50
   14e04:	str	r5, [sp, #84]	; 0x54
   14e08:	and	r3, r3, #1
   14e0c:	str	r2, [sp, #88]	; 0x58
   14e10:	str	r3, [sp, #92]	; 0x5c
   14e14:	ldr	r3, [sp, #180]	; 0xb4
   14e18:	and	r3, r3, #4
   14e1c:	str	r3, [sp, #96]	; 0x60
   14e20:	ldr	r3, [sp, #192]	; 0xc0
   14e24:	str	r3, [sp, #72]	; 0x48
   14e28:	mov	r3, fp
   14e2c:	mov	r7, #0
   14e30:	mov	fp, r9
   14e34:	mov	r9, r3
   14e38:	cmn	r8, #1
   14e3c:	beq	15440 <__assert_fail@plt+0x45d4>
   14e40:	subs	r6, r8, r7
   14e44:	movne	r6, #1
   14e48:	cmp	r6, #0
   14e4c:	beq	15458 <__assert_fail@plt+0x45ec>
   14e50:	ldr	r0, [sp, #28]
   14e54:	ldr	r3, [sp, #48]	; 0x30
   14e58:	cmp	r3, #0
   14e5c:	add	r3, r0, r7
   14e60:	str	r3, [sp, #36]	; 0x24
   14e64:	beq	158e4 <__assert_fail@plt+0x4a78>
   14e68:	ldr	r2, [sp, #56]	; 0x38
   14e6c:	cmp	r2, #0
   14e70:	beq	15de4 <__assert_fail@plt+0x4f78>
   14e74:	cmp	r2, #1
   14e78:	mov	r3, r2
   14e7c:	movls	r3, #0
   14e80:	movhi	r3, #1
   14e84:	cmn	r8, #1
   14e88:	add	r5, r7, r2
   14e8c:	movne	r3, #0
   14e90:	cmp	r3, #0
   14e94:	beq	14ea0 <__assert_fail@plt+0x4034>
   14e98:	bl	10da0 <strlen@plt>
   14e9c:	mov	r8, r0
   14ea0:	cmp	r5, r8
   14ea4:	bhi	15de4 <__assert_fail@plt+0x4f78>
   14ea8:	ldr	r0, [sp, #36]	; 0x24
   14eac:	ldr	r2, [sp, #56]	; 0x38
   14eb0:	ldr	r1, [sp, #72]	; 0x48
   14eb4:	bl	10c8c <memcmp@plt>
   14eb8:	cmp	r0, #0
   14ebc:	bne	15de4 <__assert_fail@plt+0x4f78>
   14ec0:	ldr	r3, [sp, #44]	; 0x2c
   14ec4:	cmp	r3, #0
   14ec8:	bne	16590 <__assert_fail@plt+0x5724>
   14ecc:	ldr	r3, [sp, #36]	; 0x24
   14ed0:	ldrb	r5, [r3]
   14ed4:	cmp	r5, #126	; 0x7e
   14ed8:	ldrls	pc, [pc, r5, lsl #2]
   14edc:	b	16378 <__assert_fail@plt+0x550c>
   14ee0:			; <UNDEFINED> instruction: 0x000155b4
   14ee4:	andeq	r6, r1, r8, ror r3
   14ee8:	andeq	r6, r1, r8, ror r3
   14eec:	andeq	r6, r1, r8, ror r3
   14ef0:	andeq	r6, r1, r8, ror r3
   14ef4:	andeq	r6, r1, r8, ror r3
   14ef8:	andeq	r6, r1, r8, ror r3
   14efc:	andeq	r5, r1, ip, lsl #10
   14f00:	andeq	r5, r1, r4, lsl #10
   14f04:	andeq	r5, r1, r4, lsl r5
   14f08:	muleq	r1, r8, r6
   14f0c:	andeq	r5, r1, r8, lsl #13
   14f10:			; <UNDEFINED> instruction: 0x000153b0
   14f14:	andeq	r5, r1, r4, ror #12
   14f18:	andeq	r6, r1, r8, ror r3
   14f1c:	andeq	r6, r1, r8, ror r3
   14f20:	andeq	r6, r1, r8, ror r3
   14f24:	andeq	r6, r1, r8, ror r3
   14f28:	andeq	r6, r1, r8, ror r3
   14f2c:	andeq	r6, r1, r8, ror r3
   14f30:	andeq	r6, r1, r8, ror r3
   14f34:	andeq	r6, r1, r8, ror r3
   14f38:	andeq	r6, r1, r8, ror r3
   14f3c:	andeq	r6, r1, r8, ror r3
   14f40:	andeq	r6, r1, r8, ror r3
   14f44:	andeq	r6, r1, r8, ror r3
   14f48:	andeq	r6, r1, r8, ror r3
   14f4c:	andeq	r6, r1, r8, ror r3
   14f50:	andeq	r6, r1, r8, ror r3
   14f54:	andeq	r6, r1, r8, ror r3
   14f58:	andeq	r6, r1, r8, ror r3
   14f5c:	andeq	r6, r1, r8, ror r3
   14f60:	andeq	r5, r1, r0, lsl r7
   14f64:	andeq	r5, r1, r4, lsl #14
   14f68:	andeq	r5, r1, r4, lsl #14
   14f6c:	strdeq	r5, [r1], -r8
   14f70:	andeq	r5, r1, r4, lsl #14
   14f74:	ldrdeq	r5, [r1], -ip
   14f78:	andeq	r5, r1, r4, lsl #14
   14f7c:	andeq	r5, r1, ip, asr #16
   14f80:	andeq	r5, r1, r4, lsl #14
   14f84:	andeq	r5, r1, r4, lsl #14
   14f88:	andeq	r5, r1, r4, lsl #14
   14f8c:	ldrdeq	r5, [r1], -ip
   14f90:	ldrdeq	r5, [r1], -ip
   14f94:	ldrdeq	r5, [r1], -ip
   14f98:	ldrdeq	r5, [r1], -ip
   14f9c:	ldrdeq	r5, [r1], -ip
   14fa0:	ldrdeq	r5, [r1], -ip
   14fa4:	ldrdeq	r5, [r1], -ip
   14fa8:	ldrdeq	r5, [r1], -ip
   14fac:	ldrdeq	r5, [r1], -ip
   14fb0:	ldrdeq	r5, [r1], -ip
   14fb4:	ldrdeq	r5, [r1], -ip
   14fb8:	ldrdeq	r5, [r1], -ip
   14fbc:	ldrdeq	r5, [r1], -ip
   14fc0:	ldrdeq	r5, [r1], -ip
   14fc4:	ldrdeq	r5, [r1], -ip
   14fc8:	ldrdeq	r5, [r1], -ip
   14fcc:	andeq	r5, r1, r4, lsl #14
   14fd0:	andeq	r5, r1, r4, lsl #14
   14fd4:	andeq	r5, r1, r4, lsl #14
   14fd8:	andeq	r5, r1, r4, lsl #14
   14fdc:	strdeq	r5, [r1], -ip
   14fe0:	andeq	r6, r1, r8, ror r3
   14fe4:	ldrdeq	r5, [r1], -ip
   14fe8:	ldrdeq	r5, [r1], -ip
   14fec:	ldrdeq	r5, [r1], -ip
   14ff0:	ldrdeq	r5, [r1], -ip
   14ff4:	ldrdeq	r5, [r1], -ip
   14ff8:	ldrdeq	r5, [r1], -ip
   14ffc:	ldrdeq	r5, [r1], -ip
   15000:	ldrdeq	r5, [r1], -ip
   15004:	ldrdeq	r5, [r1], -ip
   15008:	ldrdeq	r5, [r1], -ip
   1500c:	ldrdeq	r5, [r1], -ip
   15010:	ldrdeq	r5, [r1], -ip
   15014:	ldrdeq	r5, [r1], -ip
   15018:	ldrdeq	r5, [r1], -ip
   1501c:	ldrdeq	r5, [r1], -ip
   15020:	ldrdeq	r5, [r1], -ip
   15024:	ldrdeq	r5, [r1], -ip
   15028:	ldrdeq	r5, [r1], -ip
   1502c:	ldrdeq	r5, [r1], -ip
   15030:	ldrdeq	r5, [r1], -ip
   15034:	ldrdeq	r5, [r1], -ip
   15038:	ldrdeq	r5, [r1], -ip
   1503c:	ldrdeq	r5, [r1], -ip
   15040:	ldrdeq	r5, [r1], -ip
   15044:	ldrdeq	r5, [r1], -ip
   15048:	ldrdeq	r5, [r1], -ip
   1504c:	andeq	r5, r1, r4, lsl #14
   15050:	andeq	r5, r1, r0, lsr #15
   15054:	ldrdeq	r5, [r1], -ip
   15058:	andeq	r5, r1, r4, lsl #14
   1505c:	ldrdeq	r5, [r1], -ip
   15060:	andeq	r5, r1, r4, lsl #14
   15064:	ldrdeq	r5, [r1], -ip
   15068:	ldrdeq	r5, [r1], -ip
   1506c:	ldrdeq	r5, [r1], -ip
   15070:	ldrdeq	r5, [r1], -ip
   15074:	ldrdeq	r5, [r1], -ip
   15078:	ldrdeq	r5, [r1], -ip
   1507c:	ldrdeq	r5, [r1], -ip
   15080:	ldrdeq	r5, [r1], -ip
   15084:	ldrdeq	r5, [r1], -ip
   15088:	ldrdeq	r5, [r1], -ip
   1508c:	ldrdeq	r5, [r1], -ip
   15090:	ldrdeq	r5, [r1], -ip
   15094:	ldrdeq	r5, [r1], -ip
   15098:	ldrdeq	r5, [r1], -ip
   1509c:	ldrdeq	r5, [r1], -ip
   150a0:	ldrdeq	r5, [r1], -ip
   150a4:	ldrdeq	r5, [r1], -ip
   150a8:	ldrdeq	r5, [r1], -ip
   150ac:	ldrdeq	r5, [r1], -ip
   150b0:	ldrdeq	r5, [r1], -ip
   150b4:	ldrdeq	r5, [r1], -ip
   150b8:	ldrdeq	r5, [r1], -ip
   150bc:	ldrdeq	r5, [r1], -ip
   150c0:	ldrdeq	r5, [r1], -ip
   150c4:	ldrdeq	r5, [r1], -ip
   150c8:	ldrdeq	r5, [r1], -ip
   150cc:	andeq	r5, r1, ip, lsr #13
   150d0:	andeq	r5, r1, r4, lsl #14
   150d4:	andeq	r5, r1, ip, lsr #13
   150d8:	strdeq	r5, [r1], -r8
   150dc:	ldr	r3, [sp, #180]	; 0xb4
   150e0:	cmp	r4, #0
   150e4:	and	r3, r3, #1
   150e8:	str	r3, [sp, #92]	; 0x5c
   150ec:	ldr	r3, [sp, #180]	; 0xb4
   150f0:	and	r3, r3, #4
   150f4:	str	r3, [sp, #96]	; 0x60
   150f8:	moveq	r3, #1
   150fc:	streq	r3, [sp, #60]	; 0x3c
   15100:	beq	15890 <__assert_fail@plt+0x4a24>
   15104:	mov	r3, #0
   15108:	mov	r2, #1
   1510c:	mov	r4, r3
   15110:	mov	r9, r3
   15114:	str	r2, [sp, #32]
   15118:	str	r2, [sp, #44]	; 0x2c
   1511c:	str	r3, [sp, #48]	; 0x30
   15120:	str	r2, [sp, #52]	; 0x34
   15124:	str	r2, [sp, #56]	; 0x38
   15128:	str	r3, [sp, #60]	; 0x3c
   1512c:	str	r2, [sp, #64]	; 0x40
   15130:	str	r2, [sp, #68]	; 0x44
   15134:	str	r3, [sp, #80]	; 0x50
   15138:	str	r3, [sp, #84]	; 0x54
   1513c:	str	r3, [sp, #88]	; 0x58
   15140:	movw	r3, #40876	; 0x9fac
   15144:	movt	r3, #1
   15148:	str	r3, [sp, #72]	; 0x48
   1514c:	mov	r3, #2
   15150:	str	r3, [sp, #176]	; 0xb0
   15154:	b	14e28 <__assert_fail@plt+0x3fbc>
   15158:	ldr	r3, [sp, #180]	; 0xb4
   1515c:	cmp	r4, #0
   15160:	and	r3, r3, #1
   15164:	str	r3, [sp, #92]	; 0x5c
   15168:	ldr	r3, [sp, #180]	; 0xb4
   1516c:	and	r3, r3, #4
   15170:	str	r3, [sp, #96]	; 0x60
   15174:	bne	16548 <__assert_fail@plt+0x56dc>
   15178:	cmp	sl, #0
   1517c:	beq	162f4 <__assert_fail@plt+0x5488>
   15180:	mov	r3, #34	; 0x22
   15184:	mov	r2, r4
   15188:	mov	r1, #1
   1518c:	mov	r9, r2
   15190:	strb	r3, [fp]
   15194:	movw	r3, #40856	; 0x9f98
   15198:	movt	r3, #1
   1519c:	mov	r4, r1
   151a0:	str	r1, [sp, #32]
   151a4:	str	r2, [sp, #44]	; 0x2c
   151a8:	str	r1, [sp, #48]	; 0x30
   151ac:	str	r2, [sp, #52]	; 0x34
   151b0:	str	r1, [sp, #56]	; 0x38
   151b4:	str	r1, [sp, #60]	; 0x3c
   151b8:	str	r2, [sp, #64]	; 0x40
   151bc:	str	r2, [sp, #68]	; 0x44
   151c0:	str	r3, [sp, #72]	; 0x48
   151c4:	str	r2, [sp, #80]	; 0x50
   151c8:	str	r2, [sp, #84]	; 0x54
   151cc:	str	r2, [sp, #88]	; 0x58
   151d0:	b	14e28 <__assert_fail@plt+0x3fbc>
   151d4:	mov	r3, #0
   151d8:	mov	r2, #1
   151dc:	mov	r9, r3
   151e0:	str	r2, [sp, #32]
   151e4:	str	r3, [sp, #44]	; 0x2c
   151e8:	str	r3, [sp, #48]	; 0x30
   151ec:	str	r3, [sp, #52]	; 0x34
   151f0:	str	r3, [sp, #60]	; 0x3c
   151f4:	strd	r2, [sp, #64]	; 0x40
   151f8:	str	r3, [sp, #72]	; 0x48
   151fc:	str	r3, [sp, #80]	; 0x50
   15200:	str	r3, [sp, #88]	; 0x58
   15204:	ldr	r3, [sp, #180]	; 0xb4
   15208:	and	r3, r3, r2
   1520c:	str	r3, [sp, #92]	; 0x5c
   15210:	ldr	r3, [sp, #180]	; 0xb4
   15214:	and	r3, r3, #4
   15218:	str	r3, [sp, #96]	; 0x60
   1521c:	ldr	r3, [sp, #176]	; 0xb0
   15220:	mov	r4, r3
   15224:	str	r3, [sp, #56]	; 0x38
   15228:	str	r3, [sp, #84]	; 0x54
   1522c:	b	14e28 <__assert_fail@plt+0x3fbc>
   15230:	mov	r3, #1
   15234:	mov	r4, #0
   15238:	mov	r9, r4
   1523c:	str	r3, [sp, #32]
   15240:	str	r3, [sp, #44]	; 0x2c
   15244:	str	r3, [sp, #48]	; 0x30
   15248:	str	r4, [sp, #52]	; 0x34
   1524c:	str	r3, [sp, #56]	; 0x38
   15250:	str	r3, [sp, #60]	; 0x3c
   15254:	str	r3, [sp, #88]	; 0x58
   15258:	movw	r3, #40856	; 0x9f98
   1525c:	movt	r3, #1
   15260:	str	r4, [sp, #64]	; 0x40
   15264:	str	r4, [sp, #68]	; 0x44
   15268:	str	r3, [sp, #72]	; 0x48
   1526c:	ldr	r3, [sp, #180]	; 0xb4
   15270:	str	r4, [sp, #80]	; 0x50
   15274:	str	r4, [sp, #84]	; 0x54
   15278:	and	r3, r3, #1
   1527c:	str	r3, [sp, #92]	; 0x5c
   15280:	ldr	r3, [sp, #180]	; 0xb4
   15284:	and	r3, r3, #4
   15288:	str	r3, [sp, #96]	; 0x60
   1528c:	mov	r3, #5
   15290:	str	r3, [sp, #176]	; 0xb0
   15294:	b	14e28 <__assert_fail@plt+0x3fbc>
   15298:	mov	r3, #1
   1529c:	mov	r4, #0
   152a0:	mov	r9, r4
   152a4:	str	r3, [sp, #32]
   152a8:	str	r4, [sp, #44]	; 0x2c
   152ac:	str	r3, [sp, #48]	; 0x30
   152b0:	str	r3, [sp, #60]	; 0x3c
   152b4:	ldr	r3, [sp, #180]	; 0xb4
   152b8:	str	r4, [sp, #52]	; 0x34
   152bc:	str	r4, [sp, #56]	; 0x38
   152c0:	str	r4, [sp, #64]	; 0x40
   152c4:	str	r4, [sp, #68]	; 0x44
   152c8:	and	r3, r3, #1
   152cc:	str	r4, [sp, #72]	; 0x48
   152d0:	str	r4, [sp, #80]	; 0x50
   152d4:	str	r4, [sp, #84]	; 0x54
   152d8:	str	r3, [sp, #92]	; 0x5c
   152dc:	ldr	r3, [sp, #180]	; 0xb4
   152e0:	str	r4, [sp, #88]	; 0x58
   152e4:	and	r3, r3, #4
   152e8:	str	r3, [sp, #96]	; 0x60
   152ec:	b	14e28 <__assert_fail@plt+0x3fbc>
   152f0:	mov	r3, #0
   152f4:	mov	r2, #1
   152f8:	ldr	r1, [sp, #176]	; 0xb0
   152fc:	mov	r4, r3
   15300:	mov	r9, r3
   15304:	movw	r3, #40876	; 0x9fac
   15308:	movt	r3, #1
   1530c:	str	r2, [sp, #32]
   15310:	str	r2, [sp, #44]	; 0x2c
   15314:	str	r4, [sp, #48]	; 0x30
   15318:	strd	r2, [sp, #68]	; 0x44
   1531c:	ldr	r3, [sp, #180]	; 0xb4
   15320:	str	r2, [sp, #52]	; 0x34
   15324:	str	r1, [sp, #56]	; 0x38
   15328:	str	r4, [sp, #60]	; 0x3c
   1532c:	str	r2, [sp, #64]	; 0x40
   15330:	and	r3, r3, r2
   15334:	str	r4, [sp, #80]	; 0x50
   15338:	str	r4, [sp, #84]	; 0x54
   1533c:	str	r4, [sp, #88]	; 0x58
   15340:	str	r3, [sp, #92]	; 0x5c
   15344:	ldr	r3, [sp, #180]	; 0xb4
   15348:	and	r3, r3, #4
   1534c:	str	r3, [sp, #96]	; 0x60
   15350:	mov	r3, #2
   15354:	str	r3, [sp, #176]	; 0xb0
   15358:	b	14e28 <__assert_fail@plt+0x3fbc>
   1535c:	mov	r3, #1
   15360:	mov	r2, #0
   15364:	mov	r4, r2
   15368:	mov	r9, r2
   1536c:	str	r3, [sp, #32]
   15370:	str	r3, [sp, #44]	; 0x2c
   15374:	str	r2, [sp, #48]	; 0x30
   15378:	str	r3, [sp, #52]	; 0x34
   1537c:	str	r3, [sp, #56]	; 0x38
   15380:	str	r3, [sp, #60]	; 0x3c
   15384:	str	r3, [sp, #64]	; 0x40
   15388:	str	r3, [sp, #68]	; 0x44
   1538c:	str	r3, [sp, #88]	; 0x58
   15390:	movw	r3, #40876	; 0x9fac
   15394:	movt	r3, #1
   15398:	str	r3, [sp, #72]	; 0x48
   1539c:	ldr	r3, [sp, #180]	; 0xb4
   153a0:	str	r2, [sp, #80]	; 0x50
   153a4:	str	r2, [sp, #84]	; 0x54
   153a8:	and	r3, r3, #1
   153ac:	b	15340 <__assert_fail@plt+0x44d4>
   153b0:	mov	r5, #102	; 0x66
   153b4:	mov	r6, #0
   153b8:	ldr	r3, [sp, #44]	; 0x2c
   153bc:	cmp	r3, #0
   153c0:	bne	16270 <__assert_fail@plt+0x5404>
   153c4:	ldr	r2, [sp, #52]	; 0x34
   153c8:	eor	r3, fp, #1
   153cc:	ands	r3, r2, r3
   153d0:	beq	15408 <__assert_fail@plt+0x459c>
   153d4:	cmp	sl, r4
   153d8:	mov	fp, r3
   153dc:	movhi	r2, #39	; 0x27
   153e0:	strbhi	r2, [r9, r4]
   153e4:	add	r2, r4, #1
   153e8:	cmp	sl, r2
   153ec:	movhi	r1, #36	; 0x24
   153f0:	strbhi	r1, [r9, r2]
   153f4:	add	r2, r4, #2
   153f8:	add	r4, r4, #3
   153fc:	cmp	sl, r2
   15400:	movhi	r1, #39	; 0x27
   15404:	strbhi	r1, [r9, r2]
   15408:	cmp	sl, r4
   1540c:	add	r7, r7, #1
   15410:	movhi	r3, #92	; 0x5c
   15414:	strbhi	r3, [r9, r4]
   15418:	add	r4, r4, #1
   1541c:	cmp	r4, sl
   15420:	ldr	r3, [sp, #32]
   15424:	strbcc	r5, [r9, r4]
   15428:	cmp	r6, #0
   1542c:	add	r4, r4, #1
   15430:	moveq	r3, #0
   15434:	cmn	r8, #1
   15438:	str	r3, [sp, #32]
   1543c:	bne	14e40 <__assert_fail@plt+0x3fd4>
   15440:	ldr	r3, [sp, #28]
   15444:	ldrb	r6, [r3, r7]
   15448:	adds	r6, r6, #0
   1544c:	movne	r6, #1
   15450:	cmp	r6, #0
   15454:	bne	14e50 <__assert_fail@plt+0x3fe4>
   15458:	mov	r3, r9
   1545c:	mov	r9, fp
   15460:	mov	fp, r3
   15464:	ldr	r3, [sp, #68]	; 0x44
   15468:	cmp	r4, #0
   1546c:	movne	r3, #0
   15470:	cmp	r3, #0
   15474:	bne	16668 <__assert_fail@plt+0x57fc>
   15478:	ldr	r3, [sp, #44]	; 0x2c
   1547c:	ldr	r2, [sp, #52]	; 0x34
   15480:	eor	r3, r3, #1
   15484:	ands	r2, r3, r2
   15488:	beq	165a0 <__assert_fail@plt+0x5734>
   1548c:	ldr	r3, [sp, #80]	; 0x50
   15490:	cmp	r3, #0
   15494:	beq	165a4 <__assert_fail@plt+0x5738>
   15498:	ldr	r3, [sp, #32]
   1549c:	cmp	r3, #0
   154a0:	bne	16618 <__assert_fail@plt+0x57ac>
   154a4:	ldr	r3, [sp, #84]	; 0x54
   154a8:	adds	r3, r3, #0
   154ac:	movne	r3, #1
   154b0:	cmp	sl, #0
   154b4:	movne	r3, #0
   154b8:	cmp	r3, #0
   154bc:	ldreq	r2, [sp, #80]	; 0x50
   154c0:	beq	165a4 <__assert_fail@plt+0x5738>
   154c4:	ldr	r2, [sp, #84]	; 0x54
   154c8:	mov	sl, r2
   154cc:	mov	r0, #0
   154d0:	mov	r4, #1
   154d4:	mov	r1, #39	; 0x27
   154d8:	str	r0, [sp, #44]	; 0x2c
   154dc:	strb	r1, [fp]
   154e0:	str	r0, [sp, #48]	; 0x30
   154e4:	str	r4, [sp, #52]	; 0x34
   154e8:	str	r4, [sp, #56]	; 0x38
   154ec:	str	r4, [sp, #64]	; 0x40
   154f0:	str	r0, [sp, #68]	; 0x44
   154f4:	str	r3, [sp, #80]	; 0x50
   154f8:	str	r2, [sp, #84]	; 0x54
   154fc:	str	r0, [sp, #88]	; 0x58
   15500:	b	15140 <__assert_fail@plt+0x42d4>
   15504:	mov	r5, #98	; 0x62
   15508:	b	153b4 <__assert_fail@plt+0x4548>
   1550c:	mov	r5, #97	; 0x61
   15510:	b	153b4 <__assert_fail@plt+0x4548>
   15514:	ldr	r3, [sp, #48]	; 0x30
   15518:	str	r3, [sp, #40]	; 0x28
   1551c:	mov	r3, #116	; 0x74
   15520:	ldr	r2, [sp, #68]	; 0x44
   15524:	cmp	r2, #0
   15528:	bne	15724 <__assert_fail@plt+0x48b8>
   1552c:	ldr	r2, [sp, #60]	; 0x3c
   15530:	cmp	r2, #0
   15534:	bne	15680 <__assert_fail@plt+0x4814>
   15538:	ldr	r3, [sp, #44]	; 0x2c
   1553c:	mov	r6, #0
   15540:	cmp	r3, #0
   15544:	beq	156f0 <__assert_fail@plt+0x4884>
   15548:	mov	r3, fp
   1554c:	ldr	r2, [sp, #184]	; 0xb8
   15550:	cmp	r2, #0
   15554:	beq	15574 <__assert_fail@plt+0x4708>
   15558:	ubfx	r1, r5, #5, #8
   1555c:	mov	r0, r2
   15560:	and	r2, r5, #31
   15564:	ldr	r1, [r0, r1, lsl #2]
   15568:	lsr	r2, r1, r2
   1556c:	tst	r2, #1
   15570:	bne	153b8 <__assert_fail@plt+0x454c>
   15574:	ldr	r2, [sp, #40]	; 0x28
   15578:	cmp	r2, #0
   1557c:	addeq	r7, r7, #1
   15580:	bne	153b8 <__assert_fail@plt+0x454c>
   15584:	cmp	r3, #0
   15588:	beq	1541c <__assert_fail@plt+0x45b0>
   1558c:	cmp	sl, r4
   15590:	mov	fp, #0
   15594:	movhi	r3, #39	; 0x27
   15598:	strbhi	r3, [r9, r4]
   1559c:	add	r3, r4, #1
   155a0:	add	r4, r4, #2
   155a4:	cmp	sl, r3
   155a8:	movhi	r2, #39	; 0x27
   155ac:	strbhi	r2, [r9, r3]
   155b0:	b	1541c <__assert_fail@plt+0x45b0>
   155b4:	ldr	r3, [sp, #48]	; 0x30
   155b8:	str	r3, [sp, #40]	; 0x28
   155bc:	eor	r3, fp, #1
   155c0:	ldr	r2, [sp, #52]	; 0x34
   155c4:	ands	r2, r2, r3
   155c8:	beq	16288 <__assert_fail@plt+0x541c>
   155cc:	cmp	sl, r4
   155d0:	movhi	r3, #39	; 0x27
   155d4:	strbhi	r3, [r9, r4]
   155d8:	add	r3, r4, #1
   155dc:	cmp	sl, r3
   155e0:	movhi	r1, #36	; 0x24
   155e4:	strbhi	r1, [r9, r3]
   155e8:	add	r3, r4, #2
   155ec:	cmp	sl, r3
   155f0:	movhi	r1, #39	; 0x27
   155f4:	strbhi	r1, [r9, r3]
   155f8:	add	r3, r4, #3
   155fc:	cmp	sl, r3
   15600:	bls	162d4 <__assert_fail@plt+0x5468>
   15604:	mov	r4, r3
   15608:	mov	r3, #92	; 0x5c
   1560c:	mov	fp, r2
   15610:	mov	r2, r4
   15614:	strb	r3, [r9, r4]
   15618:	ldr	r3, [sp, #176]	; 0xb0
   1561c:	add	r4, r4, #1
   15620:	cmp	r3, #2
   15624:	beq	1633c <__assert_fail@plt+0x54d0>
   15628:	add	r3, r7, #1
   1562c:	cmp	r3, r8
   15630:	bcs	15648 <__assert_fail@plt+0x47dc>
   15634:	ldr	r1, [sp, #28]
   15638:	ldrb	r3, [r1, r3]
   1563c:	sub	r3, r3, #48	; 0x30
   15640:	cmp	r3, #9
   15644:	bls	1634c <__assert_fail@plt+0x54e0>
   15648:	mov	r3, #0
   1564c:	mov	r5, #48	; 0x30
   15650:	ldr	r6, [sp, #64]	; 0x40
   15654:	cmp	r6, #0
   15658:	beq	1554c <__assert_fail@plt+0x46e0>
   1565c:	mov	r6, #0
   15660:	b	15574 <__assert_fail@plt+0x4708>
   15664:	ldr	r3, [sp, #48]	; 0x30
   15668:	str	r3, [sp, #40]	; 0x28
   1566c:	ldr	r2, [sp, #60]	; 0x3c
   15670:	mov	r5, #13
   15674:	mov	r3, #114	; 0x72
   15678:	cmp	r2, #0
   1567c:	beq	15538 <__assert_fail@plt+0x46cc>
   15680:	mov	r5, r3
   15684:	b	153b4 <__assert_fail@plt+0x4548>
   15688:	ldr	r3, [sp, #48]	; 0x30
   1568c:	str	r3, [sp, #40]	; 0x28
   15690:	mov	r3, #118	; 0x76
   15694:	b	1552c <__assert_fail@plt+0x46c0>
   15698:	ldr	r3, [sp, #48]	; 0x30
   1569c:	str	r3, [sp, #40]	; 0x28
   156a0:	mov	r5, #10
   156a4:	mov	r3, #110	; 0x6e
   156a8:	b	1552c <__assert_fail@plt+0x46c0>
   156ac:	ldr	r3, [sp, #48]	; 0x30
   156b0:	cmn	r8, #1
   156b4:	str	r3, [sp, #40]	; 0x28
   156b8:	beq	15b00 <__assert_fail@plt+0x4c94>
   156bc:	subs	r3, r8, #1
   156c0:	movne	r3, #1
   156c4:	cmp	r3, #0
   156c8:	bne	156d4 <__assert_fail@plt+0x4868>
   156cc:	cmp	r7, #0
   156d0:	beq	15718 <__assert_fail@plt+0x48ac>
   156d4:	mov	r6, #0
   156d8:	ldr	r3, [sp, #64]	; 0x40
   156dc:	cmp	r3, #0
   156e0:	beq	15548 <__assert_fail@plt+0x46dc>
   156e4:	ldr	r3, [sp, #44]	; 0x2c
   156e8:	cmp	r3, #0
   156ec:	bne	15548 <__assert_fail@plt+0x46dc>
   156f0:	mov	r3, fp
   156f4:	b	15574 <__assert_fail@plt+0x4708>
   156f8:	ldr	r3, [sp, #48]	; 0x30
   156fc:	str	r3, [sp, #40]	; 0x28
   15700:	b	156cc <__assert_fail@plt+0x4860>
   15704:	ldr	r3, [sp, #48]	; 0x30
   15708:	str	r3, [sp, #40]	; 0x28
   1570c:	b	156d4 <__assert_fail@plt+0x4868>
   15710:	ldr	r6, [sp, #48]	; 0x30
   15714:	str	r6, [sp, #40]	; 0x28
   15718:	ldr	r3, [sp, #68]	; 0x44
   1571c:	cmp	r3, #0
   15720:	beq	156d8 <__assert_fail@plt+0x486c>
   15724:	mov	r3, #2
   15728:	mov	fp, r9
   1572c:	str	r3, [sp, #176]	; 0xb0
   15730:	ldr	r3, [sp, #60]	; 0x3c
   15734:	cmp	r3, #0
   15738:	ldr	r3, [sp, #176]	; 0xb0
   1573c:	movne	r3, #4
   15740:	str	r3, [sp, #176]	; 0xb0
   15744:	mov	lr, #0
   15748:	mov	r0, fp
   1574c:	ldr	r2, [sp, #28]
   15750:	ldr	r3, [sp, #180]	; 0xb4
   15754:	ldr	r1, [sp, #188]	; 0xbc
   15758:	bic	ip, r3, #2
   1575c:	ldr	r3, [sp, #176]	; 0xb0
   15760:	stm	sp, {r3, ip, lr}
   15764:	mov	r3, r8
   15768:	ldr	ip, [sp, #192]	; 0xc0
   1576c:	str	r1, [sp, #12]
   15770:	mov	r1, sl
   15774:	str	ip, [sp, #16]
   15778:	bl	14d04 <__assert_fail@plt+0x3e98>
   1577c:	mov	r4, r0
   15780:	mov	r0, r4
   15784:	add	sp, sp, #140	; 0x8c
   15788:	ldrd	r4, [sp]
   1578c:	ldrd	r6, [sp, #8]
   15790:	ldrd	r8, [sp, #16]
   15794:	ldrd	sl, [sp, #24]
   15798:	add	sp, sp, #32
   1579c:	pop	{pc}		; (ldr pc, [sp], #4)
   157a0:	ldr	r3, [sp, #48]	; 0x30
   157a4:	str	r3, [sp, #40]	; 0x28
   157a8:	ldr	r3, [sp, #176]	; 0xb0
   157ac:	cmp	r3, #2
   157b0:	beq	15b28 <__assert_fail@plt+0x4cbc>
   157b4:	ldr	r3, [sp, #88]	; 0x58
   157b8:	cmp	r3, #0
   157bc:	moveq	r5, #92	; 0x5c
   157c0:	moveq	r3, r5
   157c4:	beq	1552c <__assert_fail@plt+0x46c0>
   157c8:	add	r7, r7, #1
   157cc:	mov	r3, fp
   157d0:	mov	r6, #0
   157d4:	mov	r5, #92	; 0x5c
   157d8:	b	15584 <__assert_fail@plt+0x4718>
   157dc:	ldr	r3, [sp, #64]	; 0x40
   157e0:	cmp	r3, #0
   157e4:	bne	1665c <__assert_fail@plt+0x57f0>
   157e8:	ldr	r2, [sp, #48]	; 0x30
   157ec:	mov	r3, fp
   157f0:	mov	r6, r2
   157f4:	str	r2, [sp, #40]	; 0x28
   157f8:	b	1554c <__assert_fail@plt+0x46e0>
   157fc:	ldr	r3, [sp, #176]	; 0xb0
   15800:	cmp	r3, #2
   15804:	beq	16598 <__assert_fail@plt+0x572c>
   15808:	cmp	r3, #5
   1580c:	ldr	r3, [sp, #48]	; 0x30
   15810:	str	r3, [sp, #40]	; 0x28
   15814:	bne	15840 <__assert_fail@plt+0x49d4>
   15818:	ldr	r3, [sp, #96]	; 0x60
   1581c:	cmp	r3, #0
   15820:	beq	1629c <__assert_fail@plt+0x5430>
   15824:	add	r3, r7, #2
   15828:	cmp	r3, r8
   1582c:	bcs	15840 <__assert_fail@plt+0x49d4>
   15830:	ldr	r2, [sp, #36]	; 0x24
   15834:	ldrb	r5, [r2, #1]
   15838:	cmp	r5, #63	; 0x3f
   1583c:	beq	16384 <__assert_fail@plt+0x5518>
   15840:	mov	r6, #0
   15844:	mov	r5, #63	; 0x3f
   15848:	b	156d8 <__assert_fail@plt+0x486c>
   1584c:	ldr	r3, [sp, #176]	; 0xb0
   15850:	cmp	r3, #2
   15854:	ldr	r3, [sp, #48]	; 0x30
   15858:	beq	16040 <__assert_fail@plt+0x51d4>
   1585c:	mov	r5, #39	; 0x27
   15860:	str	r3, [sp, #40]	; 0x28
   15864:	str	r6, [sp, #80]	; 0x50
   15868:	b	156d8 <__assert_fail@plt+0x486c>
   1586c:	ldr	r3, [sp, #180]	; 0xb4
   15870:	cmp	r4, #0
   15874:	and	r3, r3, #1
   15878:	str	r3, [sp, #92]	; 0x5c
   1587c:	ldr	r3, [sp, #180]	; 0xb4
   15880:	and	r3, r3, #4
   15884:	str	r3, [sp, #96]	; 0x60
   15888:	bne	166a8 <__assert_fail@plt+0x583c>
   1588c:	str	r4, [sp, #60]	; 0x3c
   15890:	cmp	sl, #0
   15894:	bne	1668c <__assert_fail@plt+0x5820>
   15898:	mov	r3, #1
   1589c:	movw	r2, #40876	; 0x9fac
   158a0:	movt	r2, #1
   158a4:	mov	r4, r3
   158a8:	mov	r3, #2
   158ac:	mov	r9, sl
   158b0:	str	r4, [sp, #32]
   158b4:	str	sl, [sp, #44]	; 0x2c
   158b8:	str	sl, [sp, #48]	; 0x30
   158bc:	str	r4, [sp, #52]	; 0x34
   158c0:	str	r4, [sp, #56]	; 0x38
   158c4:	str	r4, [sp, #64]	; 0x40
   158c8:	str	sl, [sp, #68]	; 0x44
   158cc:	str	r2, [sp, #72]	; 0x48
   158d0:	str	sl, [sp, #80]	; 0x50
   158d4:	str	sl, [sp, #84]	; 0x54
   158d8:	str	sl, [sp, #88]	; 0x58
   158dc:	str	r3, [sp, #176]	; 0xb0
   158e0:	b	14e28 <__assert_fail@plt+0x3fbc>
   158e4:	ldrb	r5, [r0, r7]
   158e8:	cmp	r5, #126	; 0x7e
   158ec:	ldrls	pc, [pc, r5, lsl #2]
   158f0:	b	15c54 <__assert_fail@plt+0x4de8>
   158f4:	andeq	r5, r1, r0, lsr #24
   158f8:	andeq	r5, r1, r4, asr ip
   158fc:	andeq	r5, r1, r4, asr ip
   15900:	andeq	r5, r1, r4, asr ip
   15904:	andeq	r5, r1, r4, asr ip
   15908:	andeq	r5, r1, r4, asr ip
   1590c:	andeq	r5, r1, r4, asr ip
   15910:	andeq	r5, r1, r0, lsl ip
   15914:	andeq	r5, r1, r0, lsl #24
   15918:	andeq	r5, r1, r4, lsl #23
   1591c:	strdeq	r5, [r1], -r0
   15920:	andeq	r5, r1, r4, ror #22
   15924:	andeq	r5, r1, r4, asr #24
   15928:	ldrdeq	r5, [r1], -r0
   1592c:	andeq	r5, r1, r4, asr ip
   15930:	andeq	r5, r1, r4, asr ip
   15934:	andeq	r5, r1, r4, asr ip
   15938:	andeq	r5, r1, r4, asr ip
   1593c:	andeq	r5, r1, r4, asr ip
   15940:	andeq	r5, r1, r4, asr ip
   15944:	andeq	r5, r1, r4, asr ip
   15948:	andeq	r5, r1, r4, asr ip
   1594c:	andeq	r5, r1, r4, asr ip
   15950:	andeq	r5, r1, r4, asr ip
   15954:	andeq	r5, r1, r4, asr ip
   15958:	andeq	r5, r1, r4, asr ip
   1595c:	andeq	r5, r1, r4, asr ip
   15960:	andeq	r5, r1, r4, asr ip
   15964:	andeq	r5, r1, r4, asr ip
   15968:	andeq	r5, r1, r4, asr ip
   1596c:	andeq	r5, r1, r4, asr ip
   15970:	andeq	r5, r1, r4, asr ip
   15974:	andeq	r5, r1, r8, ror fp
   15978:	andeq	r5, r1, r0, ror #23
   1597c:	andeq	r5, r1, r0, ror #23
   15980:	andeq	r5, r1, r8, asr fp
   15984:	andeq	r5, r1, r0, ror #23
   15988:	andeq	r5, r1, ip, asr #22
   1598c:	andeq	r5, r1, r0, ror #23
   15990:			; <UNDEFINED> instruction: 0x00015bbc
   15994:	andeq	r5, r1, r0, ror #23
   15998:	andeq	r5, r1, r0, ror #23
   1599c:	andeq	r5, r1, r0, ror #23
   159a0:	andeq	r5, r1, ip, asr #22
   159a4:	andeq	r5, r1, ip, asr #22
   159a8:	andeq	r5, r1, ip, asr #22
   159ac:	andeq	r5, r1, ip, asr #22
   159b0:	andeq	r5, r1, ip, asr #22
   159b4:	andeq	r5, r1, ip, asr #22
   159b8:	andeq	r5, r1, ip, asr #22
   159bc:	andeq	r5, r1, ip, asr #22
   159c0:	andeq	r5, r1, ip, asr #22
   159c4:	andeq	r5, r1, ip, asr #22
   159c8:	andeq	r5, r1, ip, asr #22
   159cc:	andeq	r5, r1, ip, asr #22
   159d0:	andeq	r5, r1, ip, asr #22
   159d4:	andeq	r5, r1, ip, asr #22
   159d8:	andeq	r5, r1, ip, asr #22
   159dc:	andeq	r5, r1, ip, asr #22
   159e0:	andeq	r5, r1, r0, ror #23
   159e4:	andeq	r5, r1, r0, ror #23
   159e8:	andeq	r5, r1, r0, ror #23
   159ec:	andeq	r5, r1, r0, ror #23
   159f0:	muleq	r1, r4, fp
   159f4:	andeq	r5, r1, r4, asr ip
   159f8:	andeq	r5, r1, ip, asr #22
   159fc:	andeq	r5, r1, ip, asr #22
   15a00:	andeq	r5, r1, ip, asr #22
   15a04:	andeq	r5, r1, ip, asr #22
   15a08:	andeq	r5, r1, ip, asr #22
   15a0c:	andeq	r5, r1, ip, asr #22
   15a10:	andeq	r5, r1, ip, asr #22
   15a14:	andeq	r5, r1, ip, asr #22
   15a18:	andeq	r5, r1, ip, asr #22
   15a1c:	andeq	r5, r1, ip, asr #22
   15a20:	andeq	r5, r1, ip, asr #22
   15a24:	andeq	r5, r1, ip, asr #22
   15a28:	andeq	r5, r1, ip, asr #22
   15a2c:	andeq	r5, r1, ip, asr #22
   15a30:	andeq	r5, r1, ip, asr #22
   15a34:	andeq	r5, r1, ip, asr #22
   15a38:	andeq	r5, r1, ip, asr #22
   15a3c:	andeq	r5, r1, ip, asr #22
   15a40:	andeq	r5, r1, ip, asr #22
   15a44:	andeq	r5, r1, ip, asr #22
   15a48:	andeq	r5, r1, ip, asr #22
   15a4c:	andeq	r5, r1, ip, asr #22
   15a50:	andeq	r5, r1, ip, asr #22
   15a54:	andeq	r5, r1, ip, asr #22
   15a58:	andeq	r5, r1, ip, asr #22
   15a5c:	andeq	r5, r1, ip, asr #22
   15a60:	andeq	r5, r1, r0, ror #23
   15a64:	andeq	r5, r1, r4, lsl fp
   15a68:	andeq	r5, r1, ip, asr #22
   15a6c:	andeq	r5, r1, r0, ror #23
   15a70:	andeq	r5, r1, ip, asr #22
   15a74:	andeq	r5, r1, r0, ror #23
   15a78:	andeq	r5, r1, ip, asr #22
   15a7c:	andeq	r5, r1, ip, asr #22
   15a80:	andeq	r5, r1, ip, asr #22
   15a84:	andeq	r5, r1, ip, asr #22
   15a88:	andeq	r5, r1, ip, asr #22
   15a8c:	andeq	r5, r1, ip, asr #22
   15a90:	andeq	r5, r1, ip, asr #22
   15a94:	andeq	r5, r1, ip, asr #22
   15a98:	andeq	r5, r1, ip, asr #22
   15a9c:	andeq	r5, r1, ip, asr #22
   15aa0:	andeq	r5, r1, ip, asr #22
   15aa4:	andeq	r5, r1, ip, asr #22
   15aa8:	andeq	r5, r1, ip, asr #22
   15aac:	andeq	r5, r1, ip, asr #22
   15ab0:	andeq	r5, r1, ip, asr #22
   15ab4:	andeq	r5, r1, ip, asr #22
   15ab8:	andeq	r5, r1, ip, asr #22
   15abc:	andeq	r5, r1, ip, asr #22
   15ac0:	andeq	r5, r1, ip, asr #22
   15ac4:	andeq	r5, r1, ip, asr #22
   15ac8:	andeq	r5, r1, ip, asr #22
   15acc:	andeq	r5, r1, ip, asr #22
   15ad0:	andeq	r5, r1, ip, asr #22
   15ad4:	andeq	r5, r1, ip, asr #22
   15ad8:	andeq	r5, r1, ip, asr #22
   15adc:	andeq	r5, r1, ip, asr #22
   15ae0:	strdeq	r5, [r1], -r0
   15ae4:	andeq	r5, r1, r0, ror #23
   15ae8:	strdeq	r5, [r1], -r0
   15aec:	andeq	r5, r1, r8, asr fp
   15af0:	mov	r3, #0
   15af4:	cmn	r8, #1
   15af8:	str	r3, [sp, #40]	; 0x28
   15afc:	bne	156bc <__assert_fail@plt+0x4850>
   15b00:	ldr	r3, [sp, #28]
   15b04:	ldrb	r3, [r3, #1]
   15b08:	adds	r3, r3, #0
   15b0c:	movne	r3, #1
   15b10:	b	156c4 <__assert_fail@plt+0x4858>
   15b14:	mov	r3, #0
   15b18:	str	r3, [sp, #40]	; 0x28
   15b1c:	ldr	r3, [sp, #176]	; 0xb0
   15b20:	cmp	r3, #2
   15b24:	bne	157b4 <__assert_fail@plt+0x4948>
   15b28:	ldr	r3, [sp, #44]	; 0x2c
   15b2c:	cmp	r3, #0
   15b30:	bne	16470 <__assert_fail@plt+0x5604>
   15b34:	mov	r6, r3
   15b38:	add	r7, r7, #1
   15b3c:	mov	r3, fp
   15b40:	mov	r5, #92	; 0x5c
   15b44:	b	15584 <__assert_fail@plt+0x4718>
   15b48:	ldr	r6, [sp, #48]	; 0x30
   15b4c:	mov	r3, #0
   15b50:	str	r3, [sp, #40]	; 0x28
   15b54:	b	156d8 <__assert_fail@plt+0x486c>
   15b58:	mov	r3, #0
   15b5c:	str	r3, [sp, #40]	; 0x28
   15b60:	b	156cc <__assert_fail@plt+0x4860>
   15b64:	mov	r3, #0
   15b68:	str	r3, [sp, #40]	; 0x28
   15b6c:	mov	r3, #118	; 0x76
   15b70:	b	1552c <__assert_fail@plt+0x46c0>
   15b74:	ldr	r6, [sp, #48]	; 0x30
   15b78:	mov	r3, #0
   15b7c:	str	r3, [sp, #40]	; 0x28
   15b80:	b	15718 <__assert_fail@plt+0x48ac>
   15b84:	mov	r3, #0
   15b88:	str	r3, [sp, #40]	; 0x28
   15b8c:	mov	r3, #116	; 0x74
   15b90:	b	15520 <__assert_fail@plt+0x46b4>
   15b94:	ldr	r3, [sp, #176]	; 0xb0
   15b98:	cmp	r3, #2
   15b9c:	beq	160ac <__assert_fail@plt+0x5240>
   15ba0:	cmp	r3, #5
   15ba4:	mov	r3, #0
   15ba8:	str	r3, [sp, #40]	; 0x28
   15bac:	beq	15818 <__assert_fail@plt+0x49ac>
   15bb0:	mov	r6, #0
   15bb4:	mov	r5, #63	; 0x3f
   15bb8:	b	156d8 <__assert_fail@plt+0x486c>
   15bbc:	ldr	r3, [sp, #176]	; 0xb0
   15bc0:	cmp	r3, #2
   15bc4:	beq	16034 <__assert_fail@plt+0x51c8>
   15bc8:	mov	r3, #0
   15bcc:	b	1585c <__assert_fail@plt+0x49f0>
   15bd0:	mov	r3, #0
   15bd4:	str	r3, [sp, #40]	; 0x28
   15bd8:	mov	r3, #114	; 0x72
   15bdc:	b	15520 <__assert_fail@plt+0x46b4>
   15be0:	mov	r3, #0
   15be4:	mov	r6, r3
   15be8:	str	r3, [sp, #40]	; 0x28
   15bec:	b	15718 <__assert_fail@plt+0x48ac>
   15bf0:	mov	r3, #0
   15bf4:	str	r3, [sp, #40]	; 0x28
   15bf8:	mov	r3, #110	; 0x6e
   15bfc:	b	15520 <__assert_fail@plt+0x46b4>
   15c00:	mov	r3, #0
   15c04:	str	r3, [sp, #40]	; 0x28
   15c08:	mov	r3, #98	; 0x62
   15c0c:	b	1552c <__assert_fail@plt+0x46c0>
   15c10:	mov	r3, #0
   15c14:	str	r3, [sp, #40]	; 0x28
   15c18:	mov	r3, #97	; 0x61
   15c1c:	b	1552c <__assert_fail@plt+0x46c0>
   15c20:	ldr	r3, [sp, #60]	; 0x3c
   15c24:	cmp	r3, #0
   15c28:	bne	16018 <__assert_fail@plt+0x51ac>
   15c2c:	ldr	r3, [sp, #92]	; 0x5c
   15c30:	cmp	r3, #0
   15c34:	addne	r7, r7, #1
   15c38:	bne	14e38 <__assert_fail@plt+0x3fcc>
   15c3c:	str	r3, [sp, #40]	; 0x28
   15c40:	b	15538 <__assert_fail@plt+0x46cc>
   15c44:	mov	r3, #0
   15c48:	str	r3, [sp, #40]	; 0x28
   15c4c:	mov	r3, #102	; 0x66
   15c50:	b	1552c <__assert_fail@plt+0x46c0>
   15c54:	mov	r3, #0
   15c58:	str	r3, [sp, #40]	; 0x28
   15c5c:	ldr	r3, [sp, #76]	; 0x4c
   15c60:	cmp	r3, #1
   15c64:	bne	160cc <__assert_fail@plt+0x5260>
   15c68:	bl	10d88 <__ctype_b_loc@plt>
   15c6c:	ldr	r2, [r0]
   15c70:	sxth	r3, r5
   15c74:	lsl	r3, r3, #1
   15c78:	ldr	r1, [sp, #76]	; 0x4c
   15c7c:	ldrh	r3, [r2, r3]
   15c80:	mov	r0, r1
   15c84:	and	r3, r3, #16384	; 0x4000
   15c88:	cmp	r3, #0
   15c8c:	ldr	r3, [sp, #60]	; 0x3c
   15c90:	movne	r6, #1
   15c94:	moveq	r6, #0
   15c98:	movne	r2, #0
   15c9c:	andeq	r2, r3, #1
   15ca0:	cmp	r2, #0
   15ca4:	beq	156d8 <__assert_fail@plt+0x486c>
   15ca8:	ldr	r2, [sp, #60]	; 0x3c
   15cac:	mov	r6, #0
   15cb0:	add	r1, r0, r7
   15cb4:	mov	ip, #39	; 0x27
   15cb8:	str	r6, [sp, #100]	; 0x64
   15cbc:	mov	r0, #0
   15cc0:	ldr	lr, [sp, #36]	; 0x24
   15cc4:	str	r8, [sp, #36]	; 0x24
   15cc8:	ldr	r6, [sp, #40]	; 0x28
   15ccc:	ldr	r8, [sp, #44]	; 0x2c
   15cd0:	b	15d80 <__assert_fail@plt+0x4f14>
   15cd4:	cmp	r8, #0
   15cd8:	bne	162b4 <__assert_fail@plt+0x5448>
   15cdc:	ldr	r0, [sp, #52]	; 0x34
   15ce0:	eor	r3, fp, #1
   15ce4:	ands	r3, r0, r3
   15ce8:	beq	15d18 <__assert_fail@plt+0x4eac>
   15cec:	cmp	sl, r4
   15cf0:	add	r0, r4, #1
   15cf4:	strbhi	ip, [r9, r4]
   15cf8:	cmp	sl, r0
   15cfc:	movhi	fp, #36	; 0x24
   15d00:	strbhi	fp, [r9, r0]
   15d04:	add	r0, r4, #2
   15d08:	mov	fp, r3
   15d0c:	cmp	sl, r0
   15d10:	add	r4, r4, #3
   15d14:	strbhi	ip, [r9, r0]
   15d18:	cmp	sl, r4
   15d1c:	movhi	r3, #92	; 0x5c
   15d20:	strbhi	r3, [r9, r4]
   15d24:	add	r3, r4, #1
   15d28:	cmp	sl, r3
   15d2c:	bls	15d3c <__assert_fail@plt+0x4ed0>
   15d30:	lsr	r0, r5, #6
   15d34:	add	r0, r0, #48	; 0x30
   15d38:	strb	r0, [r9, r3]
   15d3c:	add	r3, r4, #2
   15d40:	cmp	sl, r3
   15d44:	bls	15d54 <__assert_fail@plt+0x4ee8>
   15d48:	ubfx	r0, r5, #3, #3
   15d4c:	add	r0, r0, #48	; 0x30
   15d50:	strb	r0, [r9, r3]
   15d54:	add	r7, r7, #1
   15d58:	and	r5, r5, #7
   15d5c:	cmp	r1, r7
   15d60:	add	r5, r5, #48	; 0x30
   15d64:	add	r4, r4, #3
   15d68:	bls	162c8 <__assert_fail@plt+0x545c>
   15d6c:	mov	r0, r2
   15d70:	cmp	sl, r4
   15d74:	strbhi	r5, [r9, r4]
   15d78:	add	r4, r4, #1
   15d7c:	ldrb	r5, [lr, #1]!
   15d80:	cmp	r2, #0
   15d84:	bne	15cd4 <__assert_fail@plt+0x4e68>
   15d88:	eor	r3, r0, #1
   15d8c:	cmp	r6, #0
   15d90:	and	r3, r3, fp
   15d94:	uxtb	r3, r3
   15d98:	beq	15dac <__assert_fail@plt+0x4f40>
   15d9c:	cmp	sl, r4
   15da0:	movhi	r6, #92	; 0x5c
   15da4:	strbhi	r6, [r9, r4]
   15da8:	add	r4, r4, #1
   15dac:	add	r7, r7, #1
   15db0:	cmp	r7, r1
   15db4:	bcs	162a8 <__assert_fail@plt+0x543c>
   15db8:	cmp	r3, #0
   15dbc:	beq	162ec <__assert_fail@plt+0x5480>
   15dc0:	cmp	sl, r4
   15dc4:	add	r3, r4, #1
   15dc8:	mov	r6, #0
   15dcc:	strbhi	ip, [r9, r4]
   15dd0:	cmp	sl, r3
   15dd4:	add	r4, r4, #2
   15dd8:	mov	fp, r6
   15ddc:	strbhi	ip, [r9, r3]
   15de0:	b	15d70 <__assert_fail@plt+0x4f04>
   15de4:	ldr	r3, [sp, #36]	; 0x24
   15de8:	ldrb	r5, [r3]
   15dec:	cmp	r5, #126	; 0x7e
   15df0:	ldrls	pc, [pc, r5, lsl #2]
   15df4:	b	15c54 <__assert_fail@plt+0x4de8>
   15df8:	andeq	r6, r1, r8, lsl r0
   15dfc:	andeq	r5, r1, r4, asr ip
   15e00:	andeq	r5, r1, r4, asr ip
   15e04:	andeq	r5, r1, r4, asr ip
   15e08:	andeq	r5, r1, r4, asr ip
   15e0c:	andeq	r5, r1, r4, asr ip
   15e10:	andeq	r5, r1, r4, asr ip
   15e14:	andeq	r5, r1, ip, lsl #10
   15e18:	andeq	r5, r1, r4, lsl #10
   15e1c:	andeq	r5, r1, r4, lsl #23
   15e20:	andeq	r6, r1, ip
   15e24:	andeq	r5, r1, r4, ror #22
   15e28:			; <UNDEFINED> instruction: 0x000153b0
   15e2c:	andeq	r6, r1, r0
   15e30:	andeq	r5, r1, r4, asr ip
   15e34:	andeq	r5, r1, r4, asr ip
   15e38:	andeq	r5, r1, r4, asr ip
   15e3c:	andeq	r5, r1, r4, asr ip
   15e40:	andeq	r5, r1, r4, asr ip
   15e44:	andeq	r5, r1, r4, asr ip
   15e48:	andeq	r5, r1, r4, asr ip
   15e4c:	andeq	r5, r1, r4, asr ip
   15e50:	andeq	r5, r1, r4, asr ip
   15e54:	andeq	r5, r1, r4, asr ip
   15e58:	andeq	r5, r1, r4, asr ip
   15e5c:	andeq	r5, r1, r4, asr ip
   15e60:	andeq	r5, r1, r4, asr ip
   15e64:	andeq	r5, r1, r4, asr ip
   15e68:	andeq	r5, r1, r4, asr ip
   15e6c:	andeq	r5, r1, r4, asr ip
   15e70:	andeq	r5, r1, r4, asr ip
   15e74:	andeq	r5, r1, r4, asr ip
   15e78:	andeq	r5, r1, r4, ror fp
   15e7c:	strdeq	r5, [r1], -r4
   15e80:	strdeq	r5, [r1], -r4
   15e84:	andeq	r5, r1, r8, asr fp
   15e88:	strdeq	r5, [r1], -r4
   15e8c:	andeq	r5, r1, r8, asr #22
   15e90:	strdeq	r5, [r1], -r4
   15e94:			; <UNDEFINED> instruction: 0x00015bbc
   15e98:	strdeq	r5, [r1], -r4
   15e9c:	strdeq	r5, [r1], -r4
   15ea0:	strdeq	r5, [r1], -r4
   15ea4:	andeq	r5, r1, r8, asr #22
   15ea8:	andeq	r5, r1, r8, asr #22
   15eac:	andeq	r5, r1, r8, asr #22
   15eb0:	andeq	r5, r1, r8, asr #22
   15eb4:	andeq	r5, r1, r8, asr #22
   15eb8:	andeq	r5, r1, r8, asr #22
   15ebc:	andeq	r5, r1, r8, asr #22
   15ec0:	andeq	r5, r1, r8, asr #22
   15ec4:	andeq	r5, r1, r8, asr #22
   15ec8:	andeq	r5, r1, r8, asr #22
   15ecc:	andeq	r5, r1, r8, asr #22
   15ed0:	andeq	r5, r1, r8, asr #22
   15ed4:	andeq	r5, r1, r8, asr #22
   15ed8:	andeq	r5, r1, r8, asr #22
   15edc:	andeq	r5, r1, r8, asr #22
   15ee0:	andeq	r5, r1, r8, asr #22
   15ee4:	strdeq	r5, [r1], -r4
   15ee8:	strdeq	r5, [r1], -r4
   15eec:	strdeq	r5, [r1], -r4
   15ef0:	strdeq	r5, [r1], -r4
   15ef4:	muleq	r1, r4, fp
   15ef8:	andeq	r5, r1, r4, asr ip
   15efc:	andeq	r5, r1, r8, asr #22
   15f00:	andeq	r5, r1, r8, asr #22
   15f04:	andeq	r5, r1, r8, asr #22
   15f08:	andeq	r5, r1, r8, asr #22
   15f0c:	andeq	r5, r1, r8, asr #22
   15f10:	andeq	r5, r1, r8, asr #22
   15f14:	andeq	r5, r1, r8, asr #22
   15f18:	andeq	r5, r1, r8, asr #22
   15f1c:	andeq	r5, r1, r8, asr #22
   15f20:	andeq	r5, r1, r8, asr #22
   15f24:	andeq	r5, r1, r8, asr #22
   15f28:	andeq	r5, r1, r8, asr #22
   15f2c:	andeq	r5, r1, r8, asr #22
   15f30:	andeq	r5, r1, r8, asr #22
   15f34:	andeq	r5, r1, r8, asr #22
   15f38:	andeq	r5, r1, r8, asr #22
   15f3c:	andeq	r5, r1, r8, asr #22
   15f40:	andeq	r5, r1, r8, asr #22
   15f44:	andeq	r5, r1, r8, asr #22
   15f48:	andeq	r5, r1, r8, asr #22
   15f4c:	andeq	r5, r1, r8, asr #22
   15f50:	andeq	r5, r1, r8, asr #22
   15f54:	andeq	r5, r1, r8, asr #22
   15f58:	andeq	r5, r1, r8, asr #22
   15f5c:	andeq	r5, r1, r8, asr #22
   15f60:	andeq	r5, r1, r8, asr #22
   15f64:	strdeq	r5, [r1], -r4
   15f68:	andeq	r5, r1, r4, lsl fp
   15f6c:	andeq	r5, r1, r8, asr #22
   15f70:	strdeq	r5, [r1], -r4
   15f74:	andeq	r5, r1, r8, asr #22
   15f78:	strdeq	r5, [r1], -r4
   15f7c:	andeq	r5, r1, r8, asr #22
   15f80:	andeq	r5, r1, r8, asr #22
   15f84:	andeq	r5, r1, r8, asr #22
   15f88:	andeq	r5, r1, r8, asr #22
   15f8c:	andeq	r5, r1, r8, asr #22
   15f90:	andeq	r5, r1, r8, asr #22
   15f94:	andeq	r5, r1, r8, asr #22
   15f98:	andeq	r5, r1, r8, asr #22
   15f9c:	andeq	r5, r1, r8, asr #22
   15fa0:	andeq	r5, r1, r8, asr #22
   15fa4:	andeq	r5, r1, r8, asr #22
   15fa8:	andeq	r5, r1, r8, asr #22
   15fac:	andeq	r5, r1, r8, asr #22
   15fb0:	andeq	r5, r1, r8, asr #22
   15fb4:	andeq	r5, r1, r8, asr #22
   15fb8:	andeq	r5, r1, r8, asr #22
   15fbc:	andeq	r5, r1, r8, asr #22
   15fc0:	andeq	r5, r1, r8, asr #22
   15fc4:	andeq	r5, r1, r8, asr #22
   15fc8:	andeq	r5, r1, r8, asr #22
   15fcc:	andeq	r5, r1, r8, asr #22
   15fd0:	andeq	r5, r1, r8, asr #22
   15fd4:	andeq	r5, r1, r8, asr #22
   15fd8:	andeq	r5, r1, r8, asr #22
   15fdc:	andeq	r5, r1, r8, asr #22
   15fe0:	andeq	r5, r1, r8, asr #22
   15fe4:	strdeq	r5, [r1], -r0
   15fe8:	strdeq	r5, [r1], -r4
   15fec:	strdeq	r5, [r1], -r0
   15ff0:	andeq	r5, r1, r8, asr fp
   15ff4:	mov	r3, #0
   15ff8:	str	r3, [sp, #40]	; 0x28
   15ffc:	b	156d4 <__assert_fail@plt+0x4868>
   16000:	mov	r3, #0
   16004:	str	r3, [sp, #40]	; 0x28
   16008:	b	1566c <__assert_fail@plt+0x4800>
   1600c:	mov	r3, #0
   16010:	str	r3, [sp, #40]	; 0x28
   16014:	b	156a0 <__assert_fail@plt+0x4834>
   16018:	ldr	r3, [sp, #44]	; 0x2c
   1601c:	cmp	r3, #0
   16020:	beq	155b8 <__assert_fail@plt+0x474c>
   16024:	ldr	r3, [sp, #52]	; 0x34
   16028:	mov	fp, r9
   1602c:	str	r3, [sp, #60]	; 0x3c
   16030:	b	15730 <__assert_fail@plt+0x48c4>
   16034:	ldr	r3, [sp, #44]	; 0x2c
   16038:	cmp	r3, #0
   1603c:	bne	16470 <__assert_fail@plt+0x5604>
   16040:	str	r3, [sp, #40]	; 0x28
   16044:	cmp	sl, #0
   16048:	ldr	r3, [sp, #84]	; 0x54
   1604c:	clz	r3, r3
   16050:	lsr	r3, r3, #5
   16054:	moveq	r3, #0
   16058:	cmp	r3, #0
   1605c:	strne	sl, [sp, #84]	; 0x54
   16060:	movne	sl, #0
   16064:	bne	16094 <__assert_fail@plt+0x5228>
   16068:	cmp	sl, r4
   1606c:	movhi	r3, #39	; 0x27
   16070:	strbhi	r3, [r9, r4]
   16074:	add	r3, r4, #1
   16078:	cmp	sl, r3
   1607c:	movhi	r2, #92	; 0x5c
   16080:	strbhi	r2, [r9, r3]
   16084:	add	r3, r4, #2
   16088:	cmp	sl, r3
   1608c:	movhi	r2, #39	; 0x27
   16090:	strbhi	r2, [r9, r3]
   16094:	mov	r3, #0
   16098:	add	r4, r4, #3
   1609c:	str	r6, [sp, #80]	; 0x50
   160a0:	mov	fp, r3
   160a4:	mov	r5, #39	; 0x27
   160a8:	b	15574 <__assert_fail@plt+0x4708>
   160ac:	ldr	r3, [sp, #44]	; 0x2c
   160b0:	cmp	r3, #0
   160b4:	bne	16470 <__assert_fail@plt+0x5604>
   160b8:	mov	r6, #0
   160bc:	mov	r5, #63	; 0x3f
   160c0:	str	r3, [sp, #40]	; 0x28
   160c4:	mov	r3, fp
   160c8:	b	15574 <__assert_fail@plt+0x4708>
   160cc:	mov	r2, #0
   160d0:	mov	r3, #0
   160d4:	cmn	r8, #1
   160d8:	strd	r2, [sp, #128]	; 0x80
   160dc:	bne	160ec <__assert_fail@plt+0x5280>
   160e0:	ldr	r0, [sp, #28]
   160e4:	bl	10da0 <strlen@plt>
   160e8:	mov	r8, r0
   160ec:	str	r9, [sp, #100]	; 0x64
   160f0:	mov	r3, #0
   160f4:	strd	sl, [sp, #104]	; 0x68
   160f8:	ldr	sl, [sp, #28]
   160fc:	str	r5, [sp, #112]	; 0x70
   16100:	mov	r5, r3
   16104:	ldr	r9, [sp, #68]	; 0x44
   16108:	str	r4, [sp, #116]	; 0x74
   1610c:	add	r4, r7, r5
   16110:	add	r3, sp, #128	; 0x80
   16114:	add	fp, sl, r4
   16118:	sub	r2, r8, r4
   1611c:	mov	r1, fp
   16120:	add	r0, sp, #124	; 0x7c
   16124:	bl	19844 <__assert_fail@plt+0x89d8>
   16128:	subs	r1, r0, #0
   1612c:	beq	1616c <__assert_fail@plt+0x5300>
   16130:	cmn	r1, #1
   16134:	beq	164c4 <__assert_fail@plt+0x5658>
   16138:	cmn	r1, #2
   1613c:	beq	164e4 <__assert_fail@plt+0x5678>
   16140:	cmp	r9, #0
   16144:	bne	1619c <__assert_fail@plt+0x5330>
   16148:	ldr	r0, [sp, #124]	; 0x7c
   1614c:	add	r5, r5, r1
   16150:	bl	10cd4 <iswprint@plt>
   16154:	cmp	r0, #0
   16158:	add	r0, sp, #128	; 0x80
   1615c:	moveq	r6, #0
   16160:	bl	10c80 <mbsinit@plt>
   16164:	cmp	r0, #0
   16168:	beq	1610c <__assert_fail@plt+0x52a0>
   1616c:	ldr	r3, [sp, #60]	; 0x3c
   16170:	add	r9, sp, #100	; 0x64
   16174:	mov	r0, r5
   16178:	ldm	r9, {r9, sl, fp}
   1617c:	eor	r2, r6, #1
   16180:	ldr	r5, [sp, #112]	; 0x70
   16184:	and	r2, r2, r3
   16188:	uxtb	r2, r2
   1618c:	ldr	r4, [sp, #116]	; 0x74
   16190:	cmp	r0, #1
   16194:	bhi	15cb0 <__assert_fail@plt+0x4e44>
   16198:	b	15ca0 <__assert_fail@plt+0x4e34>
   1619c:	cmp	r1, #1
   161a0:	beq	16148 <__assert_fail@plt+0x52dc>
   161a4:	add	r2, r4, #1
   161a8:	add	r3, sl, r1
   161ac:	add	r2, sl, r2
   161b0:	add	r4, r3, r4
   161b4:	ldrb	r3, [r2], #1
   161b8:	sub	r3, r3, #91	; 0x5b
   161bc:	cmp	r3, #33	; 0x21
   161c0:	ldrls	pc, [pc, r3, lsl #2]
   161c4:	b	16250 <__assert_fail@plt+0x53e4>
   161c8:	andeq	r6, r1, ip, asr r2
   161cc:	andeq	r6, r1, ip, asr r2
   161d0:	andeq	r6, r1, r0, asr r2
   161d4:	andeq	r6, r1, ip, asr r2
   161d8:	andeq	r6, r1, r0, asr r2
   161dc:	andeq	r6, r1, ip, asr r2
   161e0:	andeq	r6, r1, r0, asr r2
   161e4:	andeq	r6, r1, r0, asr r2
   161e8:	andeq	r6, r1, r0, asr r2
   161ec:	andeq	r6, r1, r0, asr r2
   161f0:	andeq	r6, r1, r0, asr r2
   161f4:	andeq	r6, r1, r0, asr r2
   161f8:	andeq	r6, r1, r0, asr r2
   161fc:	andeq	r6, r1, r0, asr r2
   16200:	andeq	r6, r1, r0, asr r2
   16204:	andeq	r6, r1, r0, asr r2
   16208:	andeq	r6, r1, r0, asr r2
   1620c:	andeq	r6, r1, r0, asr r2
   16210:	andeq	r6, r1, r0, asr r2
   16214:	andeq	r6, r1, r0, asr r2
   16218:	andeq	r6, r1, r0, asr r2
   1621c:	andeq	r6, r1, r0, asr r2
   16220:	andeq	r6, r1, r0, asr r2
   16224:	andeq	r6, r1, r0, asr r2
   16228:	andeq	r6, r1, r0, asr r2
   1622c:	andeq	r6, r1, r0, asr r2
   16230:	andeq	r6, r1, r0, asr r2
   16234:	andeq	r6, r1, r0, asr r2
   16238:	andeq	r6, r1, r0, asr r2
   1623c:	andeq	r6, r1, r0, asr r2
   16240:	andeq	r6, r1, r0, asr r2
   16244:	andeq	r6, r1, r0, asr r2
   16248:	andeq	r6, r1, r0, asr r2
   1624c:	andeq	r6, r1, ip, asr r2
   16250:	cmp	r4, r2
   16254:	bne	161b4 <__assert_fail@plt+0x5348>
   16258:	b	16148 <__assert_fail@plt+0x52dc>
   1625c:	mov	r3, #2
   16260:	ldr	fp, [sp, #100]	; 0x64
   16264:	str	r3, [sp, #176]	; 0xb0
   16268:	ldr	sl, [sp, #104]	; 0x68
   1626c:	b	15730 <__assert_fail@plt+0x48c4>
   16270:	ldr	r2, [sp, #52]	; 0x34
   16274:	mov	fp, r9
   16278:	ldr	r3, [sp, #60]	; 0x3c
   1627c:	and	r3, r3, r2
   16280:	str	r3, [sp, #60]	; 0x3c
   16284:	b	15730 <__assert_fail@plt+0x48c4>
   16288:	cmp	sl, r4
   1628c:	movhi	r2, fp
   16290:	bhi	15608 <__assert_fail@plt+0x479c>
   16294:	mov	r2, r4
   16298:	b	15618 <__assert_fail@plt+0x47ac>
   1629c:	mov	r6, r3
   162a0:	mov	r5, #63	; 0x3f
   162a4:	b	156d8 <__assert_fail@plt+0x486c>
   162a8:	ldr	r8, [sp, #36]	; 0x24
   162ac:	ldr	r6, [sp, #100]	; 0x64
   162b0:	b	15584 <__assert_fail@plt+0x4718>
   162b4:	mov	fp, r9
   162b8:	ldr	r8, [sp, #36]	; 0x24
   162bc:	ldr	r3, [sp, #52]	; 0x34
   162c0:	str	r3, [sp, #60]	; 0x3c
   162c4:	b	15730 <__assert_fail@plt+0x48c4>
   162c8:	ldr	r8, [sp, #36]	; 0x24
   162cc:	ldr	r6, [sp, #100]	; 0x64
   162d0:	b	1541c <__assert_fail@plt+0x45b0>
   162d4:	mov	r3, #0
   162d8:	add	r4, r4, #4
   162dc:	mov	fp, r2
   162e0:	mov	r6, r3
   162e4:	mov	r5, #48	; 0x30
   162e8:	b	15574 <__assert_fail@plt+0x4708>
   162ec:	mov	r6, r3
   162f0:	b	15d70 <__assert_fail@plt+0x4f04>
   162f4:	mov	r3, #1
   162f8:	movw	r2, #40856	; 0x9f98
   162fc:	movt	r2, #1
   16300:	mov	r4, r3
   16304:	mov	r9, sl
   16308:	str	r3, [sp, #32]
   1630c:	str	sl, [sp, #44]	; 0x2c
   16310:	str	r3, [sp, #48]	; 0x30
   16314:	str	sl, [sp, #52]	; 0x34
   16318:	str	r3, [sp, #56]	; 0x38
   1631c:	str	r3, [sp, #60]	; 0x3c
   16320:	str	sl, [sp, #64]	; 0x40
   16324:	str	sl, [sp, #68]	; 0x44
   16328:	str	r2, [sp, #72]	; 0x48
   1632c:	str	sl, [sp, #80]	; 0x50
   16330:	str	sl, [sp, #84]	; 0x54
   16334:	str	sl, [sp, #88]	; 0x58
   16338:	b	14e28 <__assert_fail@plt+0x3fbc>
   1633c:	mov	r3, #0
   16340:	mov	r5, #48	; 0x30
   16344:	mov	r6, r3
   16348:	b	15574 <__assert_fail@plt+0x4708>
   1634c:	cmp	sl, r4
   16350:	mov	r5, #48	; 0x30
   16354:	movhi	r3, #48	; 0x30
   16358:	strbhi	r3, [r9, r4]
   1635c:	add	r3, r2, #2
   16360:	add	r4, r2, #3
   16364:	cmp	sl, r3
   16368:	movhi	r1, #48	; 0x30
   1636c:	strbhi	r1, [r9, r3]
   16370:	mov	r3, #0
   16374:	b	15650 <__assert_fail@plt+0x47e4>
   16378:	ldr	r3, [sp, #48]	; 0x30
   1637c:	str	r3, [sp, #40]	; 0x28
   16380:	b	15c5c <__assert_fail@plt+0x4df0>
   16384:	ldr	r2, [sp, #28]
   16388:	ldrb	r2, [r2, r3]
   1638c:	sub	r1, r2, #33	; 0x21
   16390:	cmp	r1, #29
   16394:	ldrls	pc, [pc, r1, lsl #2]
   16398:	b	156d4 <__assert_fail@plt+0x4868>
   1639c:	andeq	r6, r1, r4, lsl r4
   163a0:	ldrdeq	r5, [r1], -r4
   163a4:	ldrdeq	r5, [r1], -r4
   163a8:	ldrdeq	r5, [r1], -r4
   163ac:	ldrdeq	r5, [r1], -r4
   163b0:	ldrdeq	r5, [r1], -r4
   163b4:	andeq	r6, r1, r4, lsl r4
   163b8:	andeq	r6, r1, r4, lsl r4
   163bc:	andeq	r6, r1, r4, lsl r4
   163c0:	ldrdeq	r5, [r1], -r4
   163c4:	ldrdeq	r5, [r1], -r4
   163c8:	ldrdeq	r5, [r1], -r4
   163cc:	andeq	r6, r1, r4, lsl r4
   163d0:	ldrdeq	r5, [r1], -r4
   163d4:	andeq	r6, r1, r4, lsl r4
   163d8:	ldrdeq	r5, [r1], -r4
   163dc:	ldrdeq	r5, [r1], -r4
   163e0:	ldrdeq	r5, [r1], -r4
   163e4:	ldrdeq	r5, [r1], -r4
   163e8:	ldrdeq	r5, [r1], -r4
   163ec:	ldrdeq	r5, [r1], -r4
   163f0:	ldrdeq	r5, [r1], -r4
   163f4:	ldrdeq	r5, [r1], -r4
   163f8:	ldrdeq	r5, [r1], -r4
   163fc:	ldrdeq	r5, [r1], -r4
   16400:	ldrdeq	r5, [r1], -r4
   16404:	ldrdeq	r5, [r1], -r4
   16408:	andeq	r6, r1, r4, lsl r4
   1640c:	andeq	r6, r1, r4, lsl r4
   16410:	andeq	r6, r1, r4, lsl r4
   16414:	ldr	r1, [sp, #44]	; 0x2c
   16418:	cmp	r1, #0
   1641c:	bne	1667c <__assert_fail@plt+0x5810>
   16420:	cmp	sl, r4
   16424:	mov	r7, r3
   16428:	movhi	r1, #63	; 0x3f
   1642c:	mov	r5, r2
   16430:	mov	r3, fp
   16434:	strbhi	r1, [r9, r4]
   16438:	add	r1, r4, #1
   1643c:	cmp	sl, r1
   16440:	movhi	r0, #34	; 0x22
   16444:	strbhi	r0, [r9, r1]
   16448:	add	r1, r4, #2
   1644c:	cmp	sl, r1
   16450:	movhi	r0, #34	; 0x22
   16454:	strbhi	r0, [r9, r1]
   16458:	add	r1, r4, #3
   1645c:	add	r4, r4, #4
   16460:	cmp	sl, r1
   16464:	movhi	r0, #63	; 0x3f
   16468:	strbhi	r0, [r9, r1]
   1646c:	b	15650 <__assert_fail@plt+0x47e4>
   16470:	mov	fp, r9
   16474:	b	15730 <__assert_fail@plt+0x48c4>
   16478:	ldr	r3, [sp, #188]	; 0xbc
   1647c:	ldrb	r3, [r3]
   16480:	cmp	r3, #0
   16484:	beq	14dc0 <__assert_fail@plt+0x3f54>
   16488:	ldr	r2, [sp, #188]	; 0xbc
   1648c:	cmp	sl, r4
   16490:	bls	164b0 <__assert_fail@plt+0x5644>
   16494:	strb	r3, [fp, r4]
   16498:	add	r4, r4, #1
   1649c:	ldrb	r3, [r2, #1]!
   164a0:	cmp	r3, #0
   164a4:	beq	14dc0 <__assert_fail@plt+0x3f54>
   164a8:	cmp	sl, r4
   164ac:	bhi	16494 <__assert_fail@plt+0x5628>
   164b0:	ldrb	r3, [r2, #1]!
   164b4:	add	r4, r4, #1
   164b8:	cmp	r3, #0
   164bc:	bne	1648c <__assert_fail@plt+0x5620>
   164c0:	b	14dc0 <__assert_fail@plt+0x3f54>
   164c4:	add	r9, sp, #100	; 0x64
   164c8:	mov	r0, r5
   164cc:	ldr	r2, [sp, #60]	; 0x3c
   164d0:	mov	r6, #0
   164d4:	ldm	r9, {r9, sl, fp}
   164d8:	ldr	r5, [sp, #112]	; 0x70
   164dc:	ldr	r4, [sp, #116]	; 0x74
   164e0:	b	16190 <__assert_fail@plt+0x5324>
   164e4:	cmp	r4, r8
   164e8:	add	r9, sp, #100	; 0x64
   164ec:	mov	r1, r4
   164f0:	mov	r2, fp
   164f4:	ldm	r9, {r9, sl, fp}
   164f8:	mov	r3, r5
   164fc:	mov	r0, r5
   16500:	ldr	r5, [sp, #112]	; 0x70
   16504:	ldr	r4, [sp, #116]	; 0x74
   16508:	bcs	1653c <__assert_fail@plt+0x56d0>
   1650c:	ldrb	r6, [r2]
   16510:	cmp	r6, #0
   16514:	bne	16528 <__assert_fail@plt+0x56bc>
   16518:	b	16674 <__assert_fail@plt+0x5808>
   1651c:	ldrb	r6, [r2, #1]!
   16520:	cmp	r6, #0
   16524:	beq	1660c <__assert_fail@plt+0x57a0>
   16528:	add	r3, r3, #1
   1652c:	add	r1, r7, r3
   16530:	cmp	r8, r1
   16534:	bhi	1651c <__assert_fail@plt+0x56b0>
   16538:	mov	r0, r3
   1653c:	mov	r6, #0
   16540:	ldr	r2, [sp, #60]	; 0x3c
   16544:	b	16190 <__assert_fail@plt+0x5324>
   16548:	mov	r3, #1
   1654c:	mov	r4, #0
   16550:	mov	r9, r4
   16554:	str	r3, [sp, #32]
   16558:	str	r3, [sp, #44]	; 0x2c
   1655c:	str	r3, [sp, #48]	; 0x30
   16560:	str	r4, [sp, #52]	; 0x34
   16564:	str	r3, [sp, #56]	; 0x38
   16568:	str	r3, [sp, #60]	; 0x3c
   1656c:	str	r3, [sp, #88]	; 0x58
   16570:	movw	r3, #40856	; 0x9f98
   16574:	movt	r3, #1
   16578:	str	r4, [sp, #64]	; 0x40
   1657c:	str	r4, [sp, #68]	; 0x44
   16580:	str	r3, [sp, #72]	; 0x48
   16584:	str	r4, [sp, #80]	; 0x50
   16588:	str	r4, [sp, #84]	; 0x54
   1658c:	b	14e28 <__assert_fail@plt+0x3fbc>
   16590:	mov	fp, r9
   16594:	b	15744 <__assert_fail@plt+0x48d8>
   16598:	ldr	r3, [sp, #48]	; 0x30
   1659c:	b	160b8 <__assert_fail@plt+0x524c>
   165a0:	mov	r2, r3
   165a4:	ldr	r3, [sp, #72]	; 0x48
   165a8:	cmp	r3, #0
   165ac:	moveq	r2, #0
   165b0:	andne	r2, r2, #1
   165b4:	cmp	r2, #0
   165b8:	beq	165e8 <__assert_fail@plt+0x577c>
   165bc:	mov	r2, r3
   165c0:	ldrb	r3, [r3]
   165c4:	cmp	r3, #0
   165c8:	beq	165e8 <__assert_fail@plt+0x577c>
   165cc:	cmp	sl, r4
   165d0:	bls	165f8 <__assert_fail@plt+0x578c>
   165d4:	strb	r3, [fp, r4]
   165d8:	add	r4, r4, #1
   165dc:	ldrb	r3, [r2, #1]!
   165e0:	cmp	r3, #0
   165e4:	bne	165cc <__assert_fail@plt+0x5760>
   165e8:	cmp	sl, r4
   165ec:	movhi	r3, #0
   165f0:	strbhi	r3, [fp, r4]
   165f4:	b	15780 <__assert_fail@plt+0x4914>
   165f8:	ldrb	r3, [r2, #1]!
   165fc:	add	r4, r4, #1
   16600:	cmp	r3, #0
   16604:	bne	165cc <__assert_fail@plt+0x5760>
   16608:	b	165e8 <__assert_fail@plt+0x577c>
   1660c:	mov	r0, r3
   16610:	ldr	r2, [sp, #60]	; 0x3c
   16614:	b	16190 <__assert_fail@plt+0x5324>
   16618:	mov	ip, #5
   1661c:	mov	r3, r8
   16620:	ldr	r1, [sp, #84]	; 0x54
   16624:	str	ip, [sp]
   16628:	ldr	r2, [sp, #180]	; 0xb4
   1662c:	ldr	ip, [sp, #188]	; 0xbc
   16630:	ldr	r0, [sp, #184]	; 0xb8
   16634:	str	r2, [sp, #4]
   16638:	ldr	r2, [sp, #28]
   1663c:	str	ip, [sp, #12]
   16640:	ldr	ip, [sp, #192]	; 0xc0
   16644:	str	r0, [sp, #8]
   16648:	mov	r0, fp
   1664c:	str	ip, [sp, #16]
   16650:	bl	14d04 <__assert_fail@plt+0x3e98>
   16654:	mov	r4, r0
   16658:	b	15780 <__assert_fail@plt+0x4914>
   1665c:	mov	r6, r3
   16660:	str	r3, [sp, #40]	; 0x28
   16664:	b	156f0 <__assert_fail@plt+0x4884>
   16668:	mov	r3, #2
   1666c:	str	r3, [sp, #176]	; 0xb0
   16670:	b	15730 <__assert_fail@plt+0x48c4>
   16674:	ldr	r2, [sp, #60]	; 0x3c
   16678:	b	16190 <__assert_fail@plt+0x5324>
   1667c:	mov	r3, #5
   16680:	mov	fp, r9
   16684:	str	r3, [sp, #176]	; 0xb0
   16688:	b	15744 <__assert_fail@plt+0x48d8>
   1668c:	mov	r1, #1
   16690:	mov	r9, #0
   16694:	mov	r3, r9
   16698:	mov	r2, r9
   1669c:	str	r1, [sp, #32]
   166a0:	str	sl, [sp, #84]	; 0x54
   166a4:	b	154cc <__assert_fail@plt+0x4660>
   166a8:	mov	r3, #0
   166ac:	mov	r2, #1
   166b0:	mov	r9, r3
   166b4:	mov	r4, r3
   166b8:	str	r2, [sp, #32]
   166bc:	strd	r2, [sp, #44]	; 0x2c
   166c0:	strd	r2, [sp, #56]	; 0x38
   166c4:	str	r3, [sp, #80]	; 0x50
   166c8:	str	r3, [sp, #84]	; 0x54
   166cc:	str	r3, [sp, #88]	; 0x58
   166d0:	movw	r3, #40876	; 0x9fac
   166d4:	movt	r3, #1
   166d8:	str	r2, [sp, #52]	; 0x34
   166dc:	str	r2, [sp, #64]	; 0x40
   166e0:	str	r2, [sp, #68]	; 0x44
   166e4:	str	r3, [sp, #72]	; 0x48
   166e8:	b	14e28 <__assert_fail@plt+0x3fbc>
   166ec:	bl	10e54 <abort@plt>
   166f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166f4:	mov	r4, r0
   166f8:	mov	r5, r3
   166fc:	strd	r6, [sp, #8]
   16700:	movw	r7, #45288	; 0xb0e8
   16704:	movt	r7, #2
   16708:	strd	r8, [sp, #16]
   1670c:	strd	sl, [sp, #24]
   16710:	mov	sl, r1
   16714:	mov	fp, r2
   16718:	str	lr, [sp, #32]
   1671c:	sub	sp, sp, #60	; 0x3c
   16720:	bl	10dac <__errno_location@plt>
   16724:	mov	r8, r0
   16728:	cmn	r4, #-2147483647	; 0x80000001
   1672c:	ldr	r6, [r7]
   16730:	movne	r0, #0
   16734:	moveq	r0, #1
   16738:	ldr	r3, [r8]
   1673c:	orrs	r0, r0, r4, lsr #31
   16740:	str	r3, [sp, #28]
   16744:	bne	168d4 <__assert_fail@plt+0x5a68>
   16748:	ldr	r3, [r7, #4]
   1674c:	cmp	r3, r4
   16750:	bgt	167b0 <__assert_fail@plt+0x5944>
   16754:	add	r1, r7, #8
   16758:	sub	r2, r4, r3
   1675c:	str	r3, [sp, #52]	; 0x34
   16760:	cmp	r6, r1
   16764:	add	r2, r2, #1
   16768:	beq	168ac <__assert_fail@plt+0x5a40>
   1676c:	mov	r1, #8
   16770:	mov	r0, r6
   16774:	mvn	r3, #-2147483648	; 0x80000000
   16778:	str	r1, [sp]
   1677c:	add	r1, sp, #52	; 0x34
   16780:	bl	19358 <__assert_fail@plt+0x84ec>
   16784:	mov	r6, r0
   16788:	str	r0, [r7]
   1678c:	ldr	r0, [r7, #4]
   16790:	mov	r1, #0
   16794:	ldr	r2, [sp, #52]	; 0x34
   16798:	sub	r2, r2, r0
   1679c:	add	r0, r6, r0, lsl #3
   167a0:	lsl	r2, r2, #3
   167a4:	bl	10dc4 <memset@plt>
   167a8:	ldr	r3, [sp, #52]	; 0x34
   167ac:	str	r3, [r7, #4]
   167b0:	ldr	r1, [r5, #4]
   167b4:	add	r0, r6, r4, lsl #3
   167b8:	add	ip, r5, #8
   167bc:	mov	r3, fp
   167c0:	mov	r2, sl
   167c4:	ldr	r7, [r0, #4]
   167c8:	str	r0, [sp, #36]	; 0x24
   167cc:	str	ip, [sp, #40]	; 0x28
   167d0:	orr	r0, r1, #1
   167d4:	ldr	r9, [r6, r4, lsl #3]
   167d8:	str	ip, [sp, #8]
   167dc:	ldr	lr, [r5, #44]	; 0x2c
   167e0:	str	r0, [sp, #4]
   167e4:	ldr	ip, [r5]
   167e8:	mov	r1, r9
   167ec:	str	ip, [sp, #32]
   167f0:	ldr	ip, [r5, #40]	; 0x28
   167f4:	str	ip, [sp, #12]
   167f8:	ldr	ip, [sp, #32]
   167fc:	str	lr, [sp, #16]
   16800:	str	r0, [sp, #44]	; 0x2c
   16804:	mov	r0, r7
   16808:	str	ip, [sp]
   1680c:	bl	14d04 <__assert_fail@plt+0x3e98>
   16810:	cmp	r9, r0
   16814:	bhi	16884 <__assert_fail@plt+0x5a18>
   16818:	add	r9, r0, #1
   1681c:	movw	r3, #45420	; 0xb16c
   16820:	movt	r3, #2
   16824:	cmp	r7, r3
   16828:	str	r9, [r6, r4, lsl #3]
   1682c:	beq	16838 <__assert_fail@plt+0x59cc>
   16830:	mov	r0, r7
   16834:	bl	145e4 <__assert_fail@plt+0x3778>
   16838:	mov	r0, r9
   1683c:	bl	190b4 <__assert_fail@plt+0x8248>
   16840:	ldr	ip, [r5]
   16844:	mov	r3, fp
   16848:	mov	r2, sl
   1684c:	mov	r1, r9
   16850:	mov	r7, r0
   16854:	ldr	lr, [sp, #36]	; 0x24
   16858:	ldr	r4, [r5, #40]	; 0x28
   1685c:	str	r0, [lr, #4]
   16860:	ldr	lr, [r5, #44]	; 0x2c
   16864:	str	ip, [sp]
   16868:	ldr	ip, [sp, #44]	; 0x2c
   1686c:	str	ip, [sp, #4]
   16870:	ldr	ip, [sp, #40]	; 0x28
   16874:	str	r4, [sp, #12]
   16878:	str	lr, [sp, #16]
   1687c:	str	ip, [sp, #8]
   16880:	bl	14d04 <__assert_fail@plt+0x3e98>
   16884:	ldr	r3, [sp, #28]
   16888:	mov	r0, r7
   1688c:	str	r3, [r8]
   16890:	add	sp, sp, #60	; 0x3c
   16894:	ldrd	r4, [sp]
   16898:	ldrd	r6, [sp, #8]
   1689c:	ldrd	r8, [sp, #16]
   168a0:	ldrd	sl, [sp, #24]
   168a4:	add	sp, sp, #32
   168a8:	pop	{pc}		; (ldr pc, [sp], #4)
   168ac:	mov	r1, #8
   168b0:	mvn	r3, #-2147483648	; 0x80000000
   168b4:	str	r1, [sp]
   168b8:	add	r1, sp, #52	; 0x34
   168bc:	bl	19358 <__assert_fail@plt+0x84ec>
   168c0:	ldrd	r2, [r7, #8]
   168c4:	mov	r6, r0
   168c8:	str	r0, [r7]
   168cc:	strd	r2, [r0]
   168d0:	b	1678c <__assert_fail@plt+0x5920>
   168d4:	bl	10e54 <abort@plt>
   168d8:	strd	r4, [sp, #-16]!
   168dc:	mov	r5, r0
   168e0:	str	r6, [sp, #8]
   168e4:	str	lr, [sp, #12]
   168e8:	bl	10dac <__errno_location@plt>
   168ec:	mov	r4, r0
   168f0:	cmp	r5, #0
   168f4:	ldr	r0, [pc, #32]	; 1691c <__assert_fail@plt+0x5ab0>
   168f8:	mov	r1, #48	; 0x30
   168fc:	movne	r0, r5
   16900:	ldr	r6, [r4]
   16904:	bl	194f8 <__assert_fail@plt+0x868c>
   16908:	str	r6, [r4]
   1690c:	ldrd	r4, [sp]
   16910:	ldr	r6, [sp, #8]
   16914:	add	sp, sp, #12
   16918:	pop	{pc}		; (ldr pc, [sp], #4)
   1691c:	andeq	fp, r2, ip, ror #4
   16920:	ldr	r3, [pc, #12]	; 16934 <__assert_fail@plt+0x5ac8>
   16924:	cmp	r0, #0
   16928:	moveq	r0, r3
   1692c:	ldr	r0, [r0]
   16930:	bx	lr
   16934:	andeq	fp, r2, ip, ror #4
   16938:	ldr	r3, [pc, #12]	; 1694c <__assert_fail@plt+0x5ae0>
   1693c:	cmp	r0, #0
   16940:	moveq	r0, r3
   16944:	str	r1, [r0]
   16948:	bx	lr
   1694c:	andeq	fp, r2, ip, ror #4
   16950:	ldr	r3, [pc, #52]	; 1698c <__assert_fail@plt+0x5b20>
   16954:	cmp	r0, #0
   16958:	push	{lr}		; (str lr, [sp, #-4]!)
   1695c:	lsr	lr, r1, #5
   16960:	and	r1, r1, #31
   16964:	moveq	r0, r3
   16968:	add	r3, r0, #8
   1696c:	ldr	ip, [r3, lr, lsl #2]
   16970:	lsr	r0, ip, r1
   16974:	eor	r2, r2, r0
   16978:	and	r0, r0, #1
   1697c:	and	r2, r2, #1
   16980:	eor	r1, ip, r2, lsl r1
   16984:	str	r1, [r3, lr, lsl #2]
   16988:	pop	{pc}		; (ldr pc, [sp], #4)
   1698c:	andeq	fp, r2, ip, ror #4
   16990:	ldr	r3, [pc, #16]	; 169a8 <__assert_fail@plt+0x5b3c>
   16994:	cmp	r0, #0
   16998:	movne	r3, r0
   1699c:	ldr	r0, [r3, #4]
   169a0:	str	r1, [r3, #4]
   169a4:	bx	lr
   169a8:	andeq	fp, r2, ip, ror #4
   169ac:	ldr	r3, [pc, #48]	; 169e4 <__assert_fail@plt+0x5b78>
   169b0:	cmp	r0, #0
   169b4:	mov	ip, #10
   169b8:	moveq	r0, r3
   169bc:	cmp	r2, #0
   169c0:	cmpne	r1, #0
   169c4:	str	ip, [r0]
   169c8:	beq	169d8 <__assert_fail@plt+0x5b6c>
   169cc:	str	r1, [r0, #40]	; 0x28
   169d0:	str	r2, [r0, #44]	; 0x2c
   169d4:	bx	lr
   169d8:	str	r4, [sp, #-8]!
   169dc:	str	lr, [sp, #4]
   169e0:	bl	10e54 <abort@plt>
   169e4:	andeq	fp, r2, ip, ror #4
   169e8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   169ec:	strd	r6, [sp, #8]
   169f0:	mov	r7, r0
   169f4:	mov	r6, r1
   169f8:	strd	r8, [sp, #16]
   169fc:	mov	r8, r2
   16a00:	mov	r9, r3
   16a04:	str	lr, [sp, #24]
   16a08:	sub	sp, sp, #28
   16a0c:	ldr	r4, [sp, #56]	; 0x38
   16a10:	ldr	ip, [pc, #104]	; 16a80 <__assert_fail@plt+0x5c14>
   16a14:	cmp	r4, #0
   16a18:	moveq	r4, ip
   16a1c:	bl	10dac <__errno_location@plt>
   16a20:	ldr	ip, [r4, #44]	; 0x2c
   16a24:	mov	r5, r0
   16a28:	mov	r1, r6
   16a2c:	add	lr, r4, #8
   16a30:	mov	r3, r9
   16a34:	ldr	r6, [r5]
   16a38:	mov	r2, r8
   16a3c:	mov	r0, r7
   16a40:	str	ip, [sp, #16]
   16a44:	ldr	ip, [r4, #40]	; 0x28
   16a48:	str	lr, [sp, #8]
   16a4c:	str	ip, [sp, #12]
   16a50:	ldr	ip, [r4, #4]
   16a54:	str	ip, [sp, #4]
   16a58:	ldr	ip, [r4]
   16a5c:	str	ip, [sp]
   16a60:	bl	14d04 <__assert_fail@plt+0x3e98>
   16a64:	str	r6, [r5]
   16a68:	add	sp, sp, #28
   16a6c:	ldrd	r4, [sp]
   16a70:	ldrd	r6, [sp, #8]
   16a74:	ldrd	r8, [sp, #16]
   16a78:	add	sp, sp, #24
   16a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a80:	andeq	fp, r2, ip, ror #4
   16a84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16a88:	cmp	r2, #0
   16a8c:	ldr	r4, [pc, #192]	; 16b54 <__assert_fail@plt+0x5ce8>
   16a90:	movne	r4, r2
   16a94:	strd	r6, [sp, #8]
   16a98:	strd	r8, [sp, #16]
   16a9c:	mov	r9, r1
   16aa0:	mov	r8, r0
   16aa4:	strd	sl, [sp, #24]
   16aa8:	str	lr, [sp, #32]
   16aac:	sub	sp, sp, #36	; 0x24
   16ab0:	bl	10dac <__errno_location@plt>
   16ab4:	ldr	r5, [r4, #4]
   16ab8:	mov	r6, r0
   16abc:	add	r7, r4, #8
   16ac0:	mov	r1, #0
   16ac4:	mov	r3, r9
   16ac8:	ldr	ip, [r4, #44]	; 0x2c
   16acc:	mov	r2, r8
   16ad0:	mov	r0, r1
   16ad4:	ldr	sl, [r6]
   16ad8:	orr	r5, r5, #1
   16adc:	str	ip, [sp, #16]
   16ae0:	ldr	ip, [r4, #40]	; 0x28
   16ae4:	stmib	sp, {r5, r7, ip}
   16ae8:	ldr	ip, [r4]
   16aec:	str	ip, [sp]
   16af0:	bl	14d04 <__assert_fail@plt+0x3e98>
   16af4:	add	r1, r0, #1
   16af8:	mov	r0, r1
   16afc:	str	r1, [sp, #28]
   16b00:	bl	190b4 <__assert_fail@plt+0x8248>
   16b04:	ldr	ip, [r4, #44]	; 0x2c
   16b08:	mov	fp, r0
   16b0c:	mov	r3, r9
   16b10:	mov	r2, r8
   16b14:	ldr	r1, [sp, #28]
   16b18:	str	ip, [sp, #16]
   16b1c:	ldr	ip, [r4, #40]	; 0x28
   16b20:	stmib	sp, {r5, r7, ip}
   16b24:	ldr	ip, [r4]
   16b28:	str	ip, [sp]
   16b2c:	bl	14d04 <__assert_fail@plt+0x3e98>
   16b30:	mov	r0, fp
   16b34:	str	sl, [r6]
   16b38:	add	sp, sp, #36	; 0x24
   16b3c:	ldrd	r4, [sp]
   16b40:	ldrd	r6, [sp, #8]
   16b44:	ldrd	r8, [sp, #16]
   16b48:	ldrd	sl, [sp, #24]
   16b4c:	add	sp, sp, #32
   16b50:	pop	{pc}		; (ldr pc, [sp], #4)
   16b54:	andeq	fp, r2, ip, ror #4
   16b58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16b5c:	cmp	r3, #0
   16b60:	ldr	r4, [pc, #220]	; 16c44 <__assert_fail@plt+0x5dd8>
   16b64:	movne	r4, r3
   16b68:	strd	r6, [sp, #8]
   16b6c:	mov	r6, r2
   16b70:	strd	r8, [sp, #16]
   16b74:	mov	r9, r0
   16b78:	strd	sl, [sp, #24]
   16b7c:	mov	sl, r1
   16b80:	str	lr, [sp, #32]
   16b84:	sub	sp, sp, #44	; 0x2c
   16b88:	bl	10dac <__errno_location@plt>
   16b8c:	ldr	r5, [r4, #4]
   16b90:	mov	r7, r0
   16b94:	mov	r1, #0
   16b98:	add	r8, r4, #8
   16b9c:	mov	r3, sl
   16ba0:	ldr	ip, [r4, #44]	; 0x2c
   16ba4:	mov	r2, r9
   16ba8:	mov	r0, r1
   16bac:	ldr	lr, [r7]
   16bb0:	cmp	r6, r1
   16bb4:	orreq	r5, r5, #1
   16bb8:	str	ip, [sp, #16]
   16bbc:	ldr	ip, [r4, #40]	; 0x28
   16bc0:	stmib	sp, {r5, r8, ip}
   16bc4:	ldr	ip, [r4]
   16bc8:	str	lr, [sp, #28]
   16bcc:	str	ip, [sp]
   16bd0:	bl	14d04 <__assert_fail@plt+0x3e98>
   16bd4:	add	r1, r0, #1
   16bd8:	mov	fp, r0
   16bdc:	mov	r0, r1
   16be0:	str	r1, [sp, #36]	; 0x24
   16be4:	bl	190b4 <__assert_fail@plt+0x8248>
   16be8:	ldr	ip, [r4, #44]	; 0x2c
   16bec:	mov	r3, sl
   16bf0:	mov	r2, r9
   16bf4:	ldr	r1, [sp, #36]	; 0x24
   16bf8:	str	ip, [sp, #16]
   16bfc:	ldr	ip, [r4, #40]	; 0x28
   16c00:	str	r0, [sp, #32]
   16c04:	stmib	sp, {r5, r8, ip}
   16c08:	ldr	ip, [r4]
   16c0c:	str	ip, [sp]
   16c10:	bl	14d04 <__assert_fail@plt+0x3e98>
   16c14:	ldr	lr, [sp, #28]
   16c18:	cmp	r6, #0
   16c1c:	ldr	r0, [sp, #32]
   16c20:	str	lr, [r7]
   16c24:	strne	fp, [r6]
   16c28:	add	sp, sp, #44	; 0x2c
   16c2c:	ldrd	r4, [sp]
   16c30:	ldrd	r6, [sp, #8]
   16c34:	ldrd	r8, [sp, #16]
   16c38:	ldrd	sl, [sp, #24]
   16c3c:	add	sp, sp, #32
   16c40:	pop	{pc}		; (ldr pc, [sp], #4)
   16c44:	andeq	fp, r2, ip, ror #4
   16c48:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16c4c:	movw	r5, #45288	; 0xb0e8
   16c50:	movt	r5, #2
   16c54:	ldr	r3, [r5, #4]
   16c58:	strd	r6, [sp, #8]
   16c5c:	str	r8, [sp, #16]
   16c60:	str	lr, [sp, #20]
   16c64:	ldr	r7, [r5]
   16c68:	cmp	r3, #1
   16c6c:	ble	16c90 <__assert_fail@plt+0x5e24>
   16c70:	mov	r4, #1
   16c74:	add	r6, r7, #4
   16c78:	ldr	r0, [r6, r4, lsl #3]
   16c7c:	add	r4, r4, #1
   16c80:	bl	145e4 <__assert_fail@plt+0x3778>
   16c84:	ldr	r3, [r5, #4]
   16c88:	cmp	r3, r4
   16c8c:	bgt	16c78 <__assert_fail@plt+0x5e0c>
   16c90:	ldr	r0, [r7, #4]
   16c94:	movw	r4, #45420	; 0xb16c
   16c98:	movt	r4, #2
   16c9c:	cmp	r0, r4
   16ca0:	beq	16cb4 <__assert_fail@plt+0x5e48>
   16ca4:	bl	145e4 <__assert_fail@plt+0x3778>
   16ca8:	mov	r3, #256	; 0x100
   16cac:	str	r3, [r5, #8]
   16cb0:	str	r4, [r5, #12]
   16cb4:	ldr	r4, [pc, #44]	; 16ce8 <__assert_fail@plt+0x5e7c>
   16cb8:	cmp	r7, r4
   16cbc:	beq	16ccc <__assert_fail@plt+0x5e60>
   16cc0:	mov	r0, r7
   16cc4:	bl	145e4 <__assert_fail@plt+0x3778>
   16cc8:	str	r4, [r5]
   16ccc:	mov	r3, #1
   16cd0:	ldrd	r6, [sp, #8]
   16cd4:	str	r3, [r5, #4]
   16cd8:	ldrd	r4, [sp]
   16cdc:	ldr	r8, [sp, #16]
   16ce0:	add	sp, sp, #20
   16ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ce8:	strdeq	fp, [r2], -r0
   16cec:	ldr	r3, [pc, #4]	; 16cf8 <__assert_fail@plt+0x5e8c>
   16cf0:	mvn	r2, #0
   16cf4:	b	166f0 <__assert_fail@plt+0x5884>
   16cf8:	andeq	fp, r2, ip, ror #4
   16cfc:	ldr	r3, [pc]	; 16d04 <__assert_fail@plt+0x5e98>
   16d00:	b	166f0 <__assert_fail@plt+0x5884>
   16d04:	andeq	fp, r2, ip, ror #4
   16d08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16d0c:	movw	r4, #45288	; 0xb0e8
   16d10:	movt	r4, #2
   16d14:	strd	r6, [sp, #8]
   16d18:	strd	r8, [sp, #16]
   16d1c:	strd	sl, [sp, #24]
   16d20:	mov	sl, r0
   16d24:	str	lr, [sp, #32]
   16d28:	sub	sp, sp, #44	; 0x2c
   16d2c:	bl	10dac <__errno_location@plt>
   16d30:	ldr	r3, [r0]
   16d34:	mov	r8, r0
   16d38:	ldr	r2, [r4, #4]
   16d3c:	ldr	r5, [r4]
   16d40:	str	r3, [sp, #28]
   16d44:	cmp	r2, #0
   16d48:	bgt	16da4 <__assert_fail@plt+0x5f38>
   16d4c:	add	r3, r4, #8
   16d50:	str	r2, [sp, #36]	; 0x24
   16d54:	rsb	r2, r2, #1
   16d58:	cmp	r5, r3
   16d5c:	beq	16e70 <__assert_fail@plt+0x6004>
   16d60:	mov	r1, #8
   16d64:	mov	r0, r5
   16d68:	mvn	r3, #-2147483648	; 0x80000000
   16d6c:	str	r1, [sp]
   16d70:	add	r1, sp, #36	; 0x24
   16d74:	bl	19358 <__assert_fail@plt+0x84ec>
   16d78:	mov	r5, r0
   16d7c:	str	r0, [r4]
   16d80:	ldr	r0, [r4, #4]
   16d84:	mov	r1, #0
   16d88:	ldr	r2, [sp, #36]	; 0x24
   16d8c:	sub	r2, r2, r0
   16d90:	add	r0, r5, r0, lsl #3
   16d94:	lsl	r2, r2, #3
   16d98:	bl	10dc4 <memset@plt>
   16d9c:	ldr	r3, [sp, #36]	; 0x24
   16da0:	str	r3, [r4, #4]
   16da4:	movw	r4, #45420	; 0xb16c
   16da8:	movt	r4, #2
   16dac:	ldr	r9, [r5]
   16db0:	add	fp, r4, #264	; 0x108
   16db4:	mvn	r3, #0
   16db8:	ldr	r7, [r4, #260]	; 0x104
   16dbc:	mov	r2, sl
   16dc0:	ldr	r6, [r5, #4]
   16dc4:	str	fp, [sp, #8]
   16dc8:	mov	r1, r9
   16dcc:	ldr	ip, [r4, #256]	; 0x100
   16dd0:	orr	r7, r7, #1
   16dd4:	ldr	lr, [r4, #300]	; 0x12c
   16dd8:	mov	r0, r6
   16ddc:	str	ip, [sp]
   16de0:	str	r7, [sp, #4]
   16de4:	str	lr, [sp, #16]
   16de8:	ldr	ip, [r4, #296]	; 0x128
   16dec:	str	ip, [sp, #12]
   16df0:	bl	14d04 <__assert_fail@plt+0x3e98>
   16df4:	cmp	r9, r0
   16df8:	bhi	16e48 <__assert_fail@plt+0x5fdc>
   16dfc:	add	r9, r0, #1
   16e00:	cmp	r6, r4
   16e04:	str	r9, [r5]
   16e08:	beq	16e14 <__assert_fail@plt+0x5fa8>
   16e0c:	mov	r0, r6
   16e10:	bl	145e4 <__assert_fail@plt+0x3778>
   16e14:	mov	r0, r9
   16e18:	bl	190b4 <__assert_fail@plt+0x8248>
   16e1c:	ldr	r3, [r4, #256]	; 0x100
   16e20:	mov	r2, sl
   16e24:	mov	r1, r9
   16e28:	mov	r6, r0
   16e2c:	ldr	lr, [r4, #296]	; 0x128
   16e30:	ldr	ip, [r4, #300]	; 0x12c
   16e34:	str	r0, [r5, #4]
   16e38:	stm	sp, {r3, r7, fp, lr}
   16e3c:	mvn	r3, #0
   16e40:	str	ip, [sp, #16]
   16e44:	bl	14d04 <__assert_fail@plt+0x3e98>
   16e48:	ldr	r3, [sp, #28]
   16e4c:	mov	r0, r6
   16e50:	str	r3, [r8]
   16e54:	add	sp, sp, #44	; 0x2c
   16e58:	ldrd	r4, [sp]
   16e5c:	ldrd	r6, [sp, #8]
   16e60:	ldrd	r8, [sp, #16]
   16e64:	ldrd	sl, [sp, #24]
   16e68:	add	sp, sp, #32
   16e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e70:	mov	r0, #8
   16e74:	mvn	r3, #-2147483648	; 0x80000000
   16e78:	add	r1, sp, #36	; 0x24
   16e7c:	str	r0, [sp]
   16e80:	mov	r0, #0
   16e84:	bl	19358 <__assert_fail@plt+0x84ec>
   16e88:	ldrd	r2, [r4, #8]
   16e8c:	mov	r5, r0
   16e90:	str	r0, [r4]
   16e94:	strd	r2, [r0]
   16e98:	b	16d80 <__assert_fail@plt+0x5f14>
   16e9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16ea0:	movw	r4, #45288	; 0xb0e8
   16ea4:	movt	r4, #2
   16ea8:	strd	r6, [sp, #8]
   16eac:	strd	r8, [sp, #16]
   16eb0:	strd	sl, [sp, #24]
   16eb4:	mov	sl, r0
   16eb8:	mov	fp, r1
   16ebc:	str	lr, [sp, #32]
   16ec0:	sub	sp, sp, #44	; 0x2c
   16ec4:	bl	10dac <__errno_location@plt>
   16ec8:	ldr	r3, [r0]
   16ecc:	mov	r8, r0
   16ed0:	ldr	r2, [r4, #4]
   16ed4:	ldr	r5, [r4]
   16ed8:	str	r3, [sp, #28]
   16edc:	cmp	r2, #0
   16ee0:	bgt	16f3c <__assert_fail@plt+0x60d0>
   16ee4:	add	r3, r4, #8
   16ee8:	str	r2, [sp, #36]	; 0x24
   16eec:	rsb	r2, r2, #1
   16ef0:	cmp	r5, r3
   16ef4:	beq	17018 <__assert_fail@plt+0x61ac>
   16ef8:	mov	r1, #8
   16efc:	mov	r0, r5
   16f00:	mvn	r3, #-2147483648	; 0x80000000
   16f04:	str	r1, [sp]
   16f08:	add	r1, sp, #36	; 0x24
   16f0c:	bl	19358 <__assert_fail@plt+0x84ec>
   16f10:	mov	r5, r0
   16f14:	str	r0, [r4]
   16f18:	ldr	r0, [r4, #4]
   16f1c:	mov	r1, #0
   16f20:	ldr	r2, [sp, #36]	; 0x24
   16f24:	sub	r2, r2, r0
   16f28:	add	r0, r5, r0, lsl #3
   16f2c:	lsl	r2, r2, #3
   16f30:	bl	10dc4 <memset@plt>
   16f34:	ldr	r3, [sp, #36]	; 0x24
   16f38:	str	r3, [r4, #4]
   16f3c:	movw	r4, #45420	; 0xb16c
   16f40:	movt	r4, #2
   16f44:	ldr	r9, [r5]
   16f48:	add	r0, r4, #264	; 0x108
   16f4c:	mov	r3, fp
   16f50:	ldr	r7, [r4, #260]	; 0x104
   16f54:	mov	r2, sl
   16f58:	ldr	r6, [r5, #4]
   16f5c:	str	r0, [sp, #8]
   16f60:	mov	r1, r9
   16f64:	ldr	ip, [r4, #256]	; 0x100
   16f68:	orr	r7, r7, #1
   16f6c:	ldr	lr, [r4, #300]	; 0x12c
   16f70:	mov	r0, r6
   16f74:	str	ip, [sp]
   16f78:	str	r7, [sp, #4]
   16f7c:	str	lr, [sp, #16]
   16f80:	ldr	ip, [r4, #296]	; 0x128
   16f84:	str	ip, [sp, #12]
   16f88:	bl	14d04 <__assert_fail@plt+0x3e98>
   16f8c:	cmp	r9, r0
   16f90:	bhi	16ff0 <__assert_fail@plt+0x6184>
   16f94:	add	r9, r0, #1
   16f98:	cmp	r6, r4
   16f9c:	str	r9, [r5]
   16fa0:	beq	16fac <__assert_fail@plt+0x6140>
   16fa4:	mov	r0, r6
   16fa8:	bl	145e4 <__assert_fail@plt+0x3778>
   16fac:	mov	r0, r9
   16fb0:	bl	190b4 <__assert_fail@plt+0x8248>
   16fb4:	ldr	ip, [r4, #256]	; 0x100
   16fb8:	mov	r1, r9
   16fbc:	mov	r3, fp
   16fc0:	mov	r2, sl
   16fc4:	mov	r6, r0
   16fc8:	ldr	r9, [r4, #296]	; 0x128
   16fcc:	ldr	lr, [r4, #300]	; 0x12c
   16fd0:	str	r0, [r5, #4]
   16fd4:	str	ip, [sp]
   16fd8:	ldr	ip, [pc, #100]	; 17044 <__assert_fail@plt+0x61d8>
   16fdc:	str	r7, [sp, #4]
   16fe0:	str	ip, [sp, #8]
   16fe4:	str	r9, [sp, #12]
   16fe8:	str	lr, [sp, #16]
   16fec:	bl	14d04 <__assert_fail@plt+0x3e98>
   16ff0:	ldr	r3, [sp, #28]
   16ff4:	mov	r0, r6
   16ff8:	str	r3, [r8]
   16ffc:	add	sp, sp, #44	; 0x2c
   17000:	ldrd	r4, [sp]
   17004:	ldrd	r6, [sp, #8]
   17008:	ldrd	r8, [sp, #16]
   1700c:	ldrd	sl, [sp, #24]
   17010:	add	sp, sp, #32
   17014:	pop	{pc}		; (ldr pc, [sp], #4)
   17018:	mov	r0, #8
   1701c:	mvn	r3, #-2147483648	; 0x80000000
   17020:	add	r1, sp, #36	; 0x24
   17024:	str	r0, [sp]
   17028:	mov	r0, #0
   1702c:	bl	19358 <__assert_fail@plt+0x84ec>
   17030:	ldrd	r2, [r4, #8]
   17034:	mov	r5, r0
   17038:	str	r0, [r4]
   1703c:	strd	r2, [r0]
   17040:	b	16f18 <__assert_fail@plt+0x60ac>
   17044:	andeq	fp, r2, r4, ror r2
   17048:	strd	r4, [sp, #-20]!	; 0xffffffec
   1704c:	mov	r4, #0
   17050:	mov	r5, #0
   17054:	strd	r6, [sp, #8]
   17058:	cmp	r1, #10
   1705c:	str	lr, [sp, #16]
   17060:	sub	sp, sp, #100	; 0x64
   17064:	strd	r4, [sp, #48]	; 0x30
   17068:	beq	170b0 <__assert_fail@plt+0x6244>
   1706c:	mov	r3, sp
   17070:	strd	r4, [sp, #8]
   17074:	str	r1, [sp, #48]	; 0x30
   17078:	mov	r1, r2
   1707c:	mvn	r2, #0
   17080:	ldrd	r6, [sp, #48]	; 0x30
   17084:	strd	r6, [sp]
   17088:	strd	r4, [sp, #16]
   1708c:	strd	r4, [sp, #24]
   17090:	strd	r4, [sp, #32]
   17094:	strd	r4, [sp, #40]	; 0x28
   17098:	bl	166f0 <__assert_fail@plt+0x5884>
   1709c:	add	sp, sp, #100	; 0x64
   170a0:	ldrd	r4, [sp]
   170a4:	ldrd	r6, [sp, #8]
   170a8:	add	sp, sp, #16
   170ac:	pop	{pc}		; (ldr pc, [sp], #4)
   170b0:	bl	10e54 <abort@plt>
   170b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   170b8:	mov	r4, #0
   170bc:	mov	r5, #0
   170c0:	strd	r6, [sp, #8]
   170c4:	cmp	r1, #10
   170c8:	str	lr, [sp, #16]
   170cc:	sub	sp, sp, #100	; 0x64
   170d0:	strd	r4, [sp, #48]	; 0x30
   170d4:	beq	17120 <__assert_fail@plt+0x62b4>
   170d8:	mov	ip, r2
   170dc:	mov	r2, r3
   170e0:	strd	r4, [sp, #8]
   170e4:	str	r1, [sp, #48]	; 0x30
   170e8:	mov	r3, sp
   170ec:	mov	r1, ip
   170f0:	ldrd	r6, [sp, #48]	; 0x30
   170f4:	strd	r6, [sp]
   170f8:	strd	r4, [sp, #16]
   170fc:	strd	r4, [sp, #24]
   17100:	strd	r4, [sp, #32]
   17104:	strd	r4, [sp, #40]	; 0x28
   17108:	bl	166f0 <__assert_fail@plt+0x5884>
   1710c:	add	sp, sp, #100	; 0x64
   17110:	ldrd	r4, [sp]
   17114:	ldrd	r6, [sp, #8]
   17118:	add	sp, sp, #16
   1711c:	pop	{pc}		; (ldr pc, [sp], #4)
   17120:	bl	10e54 <abort@plt>
   17124:	mov	r2, #0
   17128:	mov	r3, #0
   1712c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17130:	strd	r6, [sp, #8]
   17134:	cmp	r0, #10
   17138:	strd	r8, [sp, #16]
   1713c:	strd	sl, [sp, #24]
   17140:	str	lr, [sp, #32]
   17144:	sub	sp, sp, #124	; 0x7c
   17148:	strd	r2, [sp, #72]	; 0x48
   1714c:	strd	r2, [sp, #80]	; 0x50
   17150:	strd	r2, [sp, #88]	; 0x58
   17154:	strd	r2, [sp, #96]	; 0x60
   17158:	strd	r2, [sp, #104]	; 0x68
   1715c:	strd	r2, [sp, #112]	; 0x70
   17160:	beq	17304 <__assert_fail@plt+0x6498>
   17164:	mov	r6, r1
   17168:	movw	r4, #45288	; 0xb0e8
   1716c:	movt	r4, #2
   17170:	str	r0, [sp, #72]	; 0x48
   17174:	ldrd	r0, [sp, #72]	; 0x48
   17178:	strd	r0, [sp, #24]
   1717c:	strd	r2, [sp, #32]
   17180:	strd	r2, [sp, #40]	; 0x28
   17184:	strd	r2, [sp, #48]	; 0x30
   17188:	strd	r2, [sp, #56]	; 0x38
   1718c:	strd	r2, [sp, #64]	; 0x40
   17190:	bl	10dac <__errno_location@plt>
   17194:	mov	r8, r0
   17198:	ldr	r5, [r4]
   1719c:	ldr	r2, [r4, #4]
   171a0:	ldr	r9, [r0]
   171a4:	cmp	r2, #0
   171a8:	bgt	17204 <__assert_fail@plt+0x6398>
   171ac:	add	r3, r4, #8
   171b0:	str	r2, [sp, #72]	; 0x48
   171b4:	rsb	r2, r2, #1
   171b8:	cmp	r5, r3
   171bc:	beq	172d8 <__assert_fail@plt+0x646c>
   171c0:	mov	r3, #8
   171c4:	mov	r0, r5
   171c8:	add	r1, sp, #72	; 0x48
   171cc:	str	r3, [sp]
   171d0:	mvn	r3, #-2147483648	; 0x80000000
   171d4:	bl	19358 <__assert_fail@plt+0x84ec>
   171d8:	mov	r5, r0
   171dc:	str	r0, [r4]
   171e0:	ldr	r0, [r4, #4]
   171e4:	mov	r1, #0
   171e8:	ldr	r2, [sp, #72]	; 0x48
   171ec:	sub	r2, r2, r0
   171f0:	add	r0, r5, r0, lsl #3
   171f4:	lsl	r2, r2, #3
   171f8:	bl	10dc4 <memset@plt>
   171fc:	ldr	r3, [sp, #72]	; 0x48
   17200:	str	r3, [r4, #4]
   17204:	ldr	sl, [r5]
   17208:	add	r0, sp, #32
   1720c:	mvn	r3, #0
   17210:	mov	r2, r6
   17214:	ldr	r7, [sp, #28]
   17218:	ldr	r4, [r5, #4]
   1721c:	mov	r1, sl
   17220:	str	r0, [sp, #8]
   17224:	ldr	lr, [sp, #24]
   17228:	orr	r7, r7, #1
   1722c:	ldr	ip, [sp, #64]	; 0x40
   17230:	mov	r0, r4
   17234:	ldr	fp, [sp, #68]	; 0x44
   17238:	str	lr, [sp]
   1723c:	str	r7, [sp, #4]
   17240:	str	ip, [sp, #12]
   17244:	str	fp, [sp, #16]
   17248:	bl	14d04 <__assert_fail@plt+0x3e98>
   1724c:	cmp	sl, r0
   17250:	bhi	172b4 <__assert_fail@plt+0x6448>
   17254:	add	sl, r0, #1
   17258:	movw	r3, #45420	; 0xb16c
   1725c:	movt	r3, #2
   17260:	cmp	r4, r3
   17264:	str	sl, [r5]
   17268:	beq	17274 <__assert_fail@plt+0x6408>
   1726c:	mov	r0, r4
   17270:	bl	145e4 <__assert_fail@plt+0x3778>
   17274:	mov	r0, sl
   17278:	bl	190b4 <__assert_fail@plt+0x8248>
   1727c:	ldr	r3, [sp, #24]
   17280:	mov	r2, r6
   17284:	mov	r1, sl
   17288:	mov	r4, r0
   1728c:	ldr	lr, [sp, #64]	; 0x40
   17290:	ldr	ip, [sp, #68]	; 0x44
   17294:	str	r0, [r5, #4]
   17298:	add	r5, sp, #32
   1729c:	stm	sp, {r3, r7}
   172a0:	mvn	r3, #0
   172a4:	str	r5, [sp, #8]
   172a8:	str	lr, [sp, #12]
   172ac:	str	ip, [sp, #16]
   172b0:	bl	14d04 <__assert_fail@plt+0x3e98>
   172b4:	mov	r0, r4
   172b8:	str	r9, [r8]
   172bc:	add	sp, sp, #124	; 0x7c
   172c0:	ldrd	r4, [sp]
   172c4:	ldrd	r6, [sp, #8]
   172c8:	ldrd	r8, [sp, #16]
   172cc:	ldrd	sl, [sp, #24]
   172d0:	add	sp, sp, #32
   172d4:	pop	{pc}		; (ldr pc, [sp], #4)
   172d8:	mov	r0, #8
   172dc:	mvn	r3, #-2147483648	; 0x80000000
   172e0:	add	r1, sp, #72	; 0x48
   172e4:	str	r0, [sp]
   172e8:	mov	r0, #0
   172ec:	bl	19358 <__assert_fail@plt+0x84ec>
   172f0:	ldrd	r2, [r4, #8]
   172f4:	mov	r5, r0
   172f8:	str	r0, [r4]
   172fc:	strd	r2, [r0]
   17300:	b	171e0 <__assert_fail@plt+0x6374>
   17304:	bl	10e54 <abort@plt>
   17308:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1730c:	cmp	r0, #10
   17310:	strd	r6, [sp, #8]
   17314:	mov	r6, #0
   17318:	mov	r7, #0
   1731c:	strd	r8, [sp, #16]
   17320:	strd	sl, [sp, #24]
   17324:	str	lr, [sp, #32]
   17328:	sub	sp, sp, #124	; 0x7c
   1732c:	strd	r6, [sp, #72]	; 0x48
   17330:	strd	r6, [sp, #80]	; 0x50
   17334:	strd	r6, [sp, #88]	; 0x58
   17338:	strd	r6, [sp, #96]	; 0x60
   1733c:	strd	r6, [sp, #104]	; 0x68
   17340:	strd	r6, [sp, #112]	; 0x70
   17344:	beq	174f0 <__assert_fail@plt+0x6684>
   17348:	mov	sl, r2
   1734c:	movw	r5, #45288	; 0xb0e8
   17350:	movt	r5, #2
   17354:	str	r0, [sp, #72]	; 0x48
   17358:	mov	r9, r1
   1735c:	ldrd	r2, [sp, #72]	; 0x48
   17360:	strd	r2, [sp, #24]
   17364:	strd	r6, [sp, #32]
   17368:	strd	r6, [sp, #40]	; 0x28
   1736c:	strd	r6, [sp, #48]	; 0x30
   17370:	strd	r6, [sp, #56]	; 0x38
   17374:	strd	r6, [sp, #64]	; 0x40
   17378:	bl	10dac <__errno_location@plt>
   1737c:	mov	r7, r0
   17380:	ldr	r4, [r5]
   17384:	ldr	r2, [r5, #4]
   17388:	ldr	fp, [r0]
   1738c:	cmp	r2, #0
   17390:	bgt	173ec <__assert_fail@plt+0x6580>
   17394:	add	r3, r5, #8
   17398:	str	r2, [sp, #72]	; 0x48
   1739c:	rsb	r2, r2, #1
   173a0:	cmp	r4, r3
   173a4:	beq	174c4 <__assert_fail@plt+0x6658>
   173a8:	mov	r3, #8
   173ac:	mov	r0, r4
   173b0:	add	r1, sp, #72	; 0x48
   173b4:	str	r3, [sp]
   173b8:	mvn	r3, #-2147483648	; 0x80000000
   173bc:	bl	19358 <__assert_fail@plt+0x84ec>
   173c0:	mov	r4, r0
   173c4:	str	r0, [r5]
   173c8:	ldr	r0, [r5, #4]
   173cc:	mov	r1, #0
   173d0:	ldr	r2, [sp, #72]	; 0x48
   173d4:	sub	r2, r2, r0
   173d8:	add	r0, r4, r0, lsl #3
   173dc:	lsl	r2, r2, #3
   173e0:	bl	10dc4 <memset@plt>
   173e4:	ldr	r3, [sp, #72]	; 0x48
   173e8:	str	r3, [r5, #4]
   173ec:	ldr	ip, [sp, #24]
   173f0:	add	r0, sp, #32
   173f4:	mov	r3, sl
   173f8:	mov	r2, r9
   173fc:	ldr	r6, [sp, #28]
   17400:	ldr	r8, [r4]
   17404:	ldr	r5, [r4, #4]
   17408:	str	ip, [sp]
   1740c:	orr	r6, r6, #1
   17410:	ldr	ip, [sp, #64]	; 0x40
   17414:	mov	r1, r8
   17418:	str	r6, [sp, #4]
   1741c:	ldr	lr, [sp, #68]	; 0x44
   17420:	str	r0, [sp, #8]
   17424:	mov	r0, r5
   17428:	str	ip, [sp, #12]
   1742c:	str	lr, [sp, #16]
   17430:	bl	14d04 <__assert_fail@plt+0x3e98>
   17434:	cmp	r8, r0
   17438:	bhi	174a0 <__assert_fail@plt+0x6634>
   1743c:	add	r8, r0, #1
   17440:	movw	r3, #45420	; 0xb16c
   17444:	movt	r3, #2
   17448:	cmp	r5, r3
   1744c:	str	r8, [r4]
   17450:	beq	1745c <__assert_fail@plt+0x65f0>
   17454:	mov	r0, r5
   17458:	bl	145e4 <__assert_fail@plt+0x3778>
   1745c:	mov	r0, r8
   17460:	bl	190b4 <__assert_fail@plt+0x8248>
   17464:	ldr	lr, [sp, #24]
   17468:	mov	r1, r8
   1746c:	mov	r3, sl
   17470:	mov	r2, r9
   17474:	mov	r5, r0
   17478:	ldr	r8, [sp, #64]	; 0x40
   1747c:	ldr	ip, [sp, #68]	; 0x44
   17480:	str	r0, [r4, #4]
   17484:	str	lr, [sp]
   17488:	add	lr, sp, #32
   1748c:	str	r6, [sp, #4]
   17490:	str	lr, [sp, #8]
   17494:	str	r8, [sp, #12]
   17498:	str	ip, [sp, #16]
   1749c:	bl	14d04 <__assert_fail@plt+0x3e98>
   174a0:	mov	r0, r5
   174a4:	str	fp, [r7]
   174a8:	add	sp, sp, #124	; 0x7c
   174ac:	ldrd	r4, [sp]
   174b0:	ldrd	r6, [sp, #8]
   174b4:	ldrd	r8, [sp, #16]
   174b8:	ldrd	sl, [sp, #24]
   174bc:	add	sp, sp, #32
   174c0:	pop	{pc}		; (ldr pc, [sp], #4)
   174c4:	mov	r0, #8
   174c8:	mvn	r3, #-2147483648	; 0x80000000
   174cc:	add	r1, sp, #72	; 0x48
   174d0:	str	r0, [sp]
   174d4:	mov	r0, #0
   174d8:	bl	19358 <__assert_fail@plt+0x84ec>
   174dc:	ldrd	r2, [r5, #8]
   174e0:	mov	r4, r0
   174e4:	str	r0, [r5]
   174e8:	strd	r2, [r0]
   174ec:	b	173c8 <__assert_fail@plt+0x655c>
   174f0:	bl	10e54 <abort@plt>
   174f4:	ldr	r3, [pc, #492]	; 176e8 <__assert_fail@plt+0x687c>
   174f8:	lsr	ip, r2, #5
   174fc:	and	r2, r2, #31
   17500:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17504:	movw	r5, #45288	; 0xb0e8
   17508:	movt	r5, #2
   1750c:	strd	r6, [sp, #8]
   17510:	strd	r8, [sp, #16]
   17514:	strd	sl, [sp, #24]
   17518:	mov	sl, r0
   1751c:	mov	fp, r1
   17520:	ldrd	r0, [r3]
   17524:	str	lr, [sp, #32]
   17528:	sub	sp, sp, #92	; 0x5c
   1752c:	ldrd	r8, [r3, #8]
   17530:	add	r6, sp, #48	; 0x30
   17534:	strd	r0, [sp, #40]	; 0x28
   17538:	ldrd	r0, [r3, #16]
   1753c:	strd	r8, [sp, #48]	; 0x30
   17540:	ldrd	r8, [r3, #24]
   17544:	strd	r0, [sp, #56]	; 0x38
   17548:	ldrd	r0, [r3, #32]
   1754c:	strd	r8, [sp, #64]	; 0x40
   17550:	ldrd	r8, [r3, #40]	; 0x28
   17554:	strd	r0, [sp, #72]	; 0x48
   17558:	strd	r8, [sp, #80]	; 0x50
   1755c:	ldr	r3, [r6, ip, lsl #2]
   17560:	mvn	r1, r3, lsr r2
   17564:	and	r1, r1, #1
   17568:	eor	r2, r3, r1, lsl r2
   1756c:	str	r2, [r6, ip, lsl #2]
   17570:	bl	10dac <__errno_location@plt>
   17574:	ldr	r3, [r0]
   17578:	mov	r8, r0
   1757c:	ldr	r2, [r5, #4]
   17580:	ldr	r4, [r5]
   17584:	str	r3, [sp, #28]
   17588:	cmp	r2, #0
   1758c:	bgt	175e8 <__assert_fail@plt+0x677c>
   17590:	add	r3, r5, #8
   17594:	str	r2, [sp, #36]	; 0x24
   17598:	rsb	r2, r2, #1
   1759c:	cmp	r4, r3
   175a0:	beq	176bc <__assert_fail@plt+0x6850>
   175a4:	mov	r1, #8
   175a8:	mov	r0, r4
   175ac:	mvn	r3, #-2147483648	; 0x80000000
   175b0:	str	r1, [sp]
   175b4:	add	r1, sp, #36	; 0x24
   175b8:	bl	19358 <__assert_fail@plt+0x84ec>
   175bc:	mov	r4, r0
   175c0:	str	r0, [r5]
   175c4:	ldr	r0, [r5, #4]
   175c8:	mov	r1, #0
   175cc:	ldr	r2, [sp, #36]	; 0x24
   175d0:	sub	r2, r2, r0
   175d4:	add	r0, r4, r0, lsl #3
   175d8:	lsl	r2, r2, #3
   175dc:	bl	10dc4 <memset@plt>
   175e0:	ldr	r3, [sp, #36]	; 0x24
   175e4:	str	r3, [r5, #4]
   175e8:	ldr	ip, [sp, #40]	; 0x28
   175ec:	mov	r3, fp
   175f0:	mov	r2, sl
   175f4:	ldr	r7, [sp, #44]	; 0x2c
   175f8:	ldr	r9, [r4]
   175fc:	ldr	r5, [r4, #4]
   17600:	str	ip, [sp]
   17604:	orr	r7, r7, #1
   17608:	ldr	ip, [sp, #80]	; 0x50
   1760c:	mov	r1, r9
   17610:	str	r7, [sp, #4]
   17614:	ldr	lr, [sp, #84]	; 0x54
   17618:	mov	r0, r5
   1761c:	str	r6, [sp, #8]
   17620:	str	ip, [sp, #12]
   17624:	str	lr, [sp, #16]
   17628:	bl	14d04 <__assert_fail@plt+0x3e98>
   1762c:	cmp	r9, r0
   17630:	bhi	17694 <__assert_fail@plt+0x6828>
   17634:	add	r9, r0, #1
   17638:	movw	r3, #45420	; 0xb16c
   1763c:	movt	r3, #2
   17640:	cmp	r5, r3
   17644:	str	r9, [r4]
   17648:	beq	17654 <__assert_fail@plt+0x67e8>
   1764c:	mov	r0, r5
   17650:	bl	145e4 <__assert_fail@plt+0x3778>
   17654:	mov	r0, r9
   17658:	bl	190b4 <__assert_fail@plt+0x8248>
   1765c:	mov	r1, r9
   17660:	ldr	ip, [sp, #40]	; 0x28
   17664:	mov	r3, fp
   17668:	mov	r2, sl
   1766c:	mov	r5, r0
   17670:	ldr	r9, [sp, #80]	; 0x50
   17674:	ldr	lr, [sp, #84]	; 0x54
   17678:	str	r0, [r4, #4]
   1767c:	str	ip, [sp]
   17680:	str	r7, [sp, #4]
   17684:	str	r6, [sp, #8]
   17688:	str	r9, [sp, #12]
   1768c:	str	lr, [sp, #16]
   17690:	bl	14d04 <__assert_fail@plt+0x3e98>
   17694:	ldr	r3, [sp, #28]
   17698:	mov	r0, r5
   1769c:	str	r3, [r8]
   176a0:	add	sp, sp, #92	; 0x5c
   176a4:	ldrd	r4, [sp]
   176a8:	ldrd	r6, [sp, #8]
   176ac:	ldrd	r8, [sp, #16]
   176b0:	ldrd	sl, [sp, #24]
   176b4:	add	sp, sp, #32
   176b8:	pop	{pc}		; (ldr pc, [sp], #4)
   176bc:	mov	r0, #8
   176c0:	mvn	r3, #-2147483648	; 0x80000000
   176c4:	add	r1, sp, #36	; 0x24
   176c8:	str	r0, [sp]
   176cc:	mov	r0, #0
   176d0:	bl	19358 <__assert_fail@plt+0x84ec>
   176d4:	ldrd	r2, [r5, #8]
   176d8:	mov	r4, r0
   176dc:	str	r0, [r5]
   176e0:	strd	r2, [r0]
   176e4:	b	175c4 <__assert_fail@plt+0x6758>
   176e8:	andeq	fp, r2, ip, ror #4
   176ec:	ldr	ip, [pc, #476]	; 178d0 <__assert_fail@plt+0x6a64>
   176f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   176f4:	movw	r4, #45288	; 0xb0e8
   176f8:	movt	r4, #2
   176fc:	ldrd	r2, [ip, #8]
   17700:	strd	r6, [sp, #8]
   17704:	lsr	r7, r1, #5
   17708:	mov	r6, r0
   1770c:	strd	r8, [sp, #16]
   17710:	str	lr, [sp, #32]
   17714:	and	lr, r1, #31
   17718:	ldrd	r0, [ip]
   1771c:	strd	sl, [sp, #24]
   17720:	sub	sp, sp, #84	; 0x54
   17724:	add	r5, sp, #40	; 0x28
   17728:	strd	r0, [sp, #32]
   1772c:	strd	r2, [sp, #40]	; 0x28
   17730:	ldrd	r0, [ip, #16]
   17734:	ldrd	r2, [ip, #24]
   17738:	strd	r0, [sp, #48]	; 0x30
   1773c:	ldrd	r0, [ip, #32]
   17740:	strd	r2, [sp, #56]	; 0x38
   17744:	ldrd	r2, [ip, #40]	; 0x28
   17748:	strd	r0, [sp, #64]	; 0x40
   1774c:	strd	r2, [sp, #72]	; 0x48
   17750:	ldr	r1, [r5, r7, lsl #2]
   17754:	mvn	r3, r1, lsr lr
   17758:	and	r3, r3, #1
   1775c:	eor	r1, r1, r3, lsl lr
   17760:	str	r1, [r5, r7, lsl #2]
   17764:	bl	10dac <__errno_location@plt>
   17768:	mov	r9, r0
   1776c:	ldr	sl, [r0]
   17770:	ldr	r2, [r4, #4]
   17774:	ldr	r7, [r4]
   17778:	cmp	r2, #0
   1777c:	bgt	177d8 <__assert_fail@plt+0x696c>
   17780:	add	r3, r4, #8
   17784:	str	r2, [sp, #28]
   17788:	rsb	r2, r2, #1
   1778c:	cmp	r7, r3
   17790:	beq	178a4 <__assert_fail@plt+0x6a38>
   17794:	mov	r1, #8
   17798:	mov	r0, r7
   1779c:	mvn	r3, #-2147483648	; 0x80000000
   177a0:	str	r1, [sp]
   177a4:	add	r1, sp, #28
   177a8:	bl	19358 <__assert_fail@plt+0x84ec>
   177ac:	mov	r7, r0
   177b0:	str	r0, [r4]
   177b4:	ldr	r0, [r4, #4]
   177b8:	mov	r1, #0
   177bc:	ldr	r2, [sp, #28]
   177c0:	sub	r2, r2, r0
   177c4:	add	r0, r7, r0, lsl #3
   177c8:	lsl	r2, r2, #3
   177cc:	bl	10dc4 <memset@plt>
   177d0:	ldr	r3, [sp, #28]
   177d4:	str	r3, [r4, #4]
   177d8:	ldr	ip, [sp, #32]
   177dc:	mvn	r3, #0
   177e0:	mov	r2, r6
   177e4:	ldr	r8, [sp, #36]	; 0x24
   177e8:	ldr	fp, [r7]
   177ec:	ldr	r4, [r7, #4]
   177f0:	str	ip, [sp]
   177f4:	orr	r8, r8, #1
   177f8:	ldr	ip, [sp, #72]	; 0x48
   177fc:	mov	r1, fp
   17800:	str	r8, [sp, #4]
   17804:	ldr	lr, [sp, #76]	; 0x4c
   17808:	mov	r0, r4
   1780c:	str	r5, [sp, #8]
   17810:	str	ip, [sp, #12]
   17814:	str	lr, [sp, #16]
   17818:	bl	14d04 <__assert_fail@plt+0x3e98>
   1781c:	cmp	fp, r0
   17820:	bhi	17880 <__assert_fail@plt+0x6a14>
   17824:	add	fp, r0, #1
   17828:	movw	r3, #45420	; 0xb16c
   1782c:	movt	r3, #2
   17830:	cmp	r4, r3
   17834:	str	fp, [r7]
   17838:	beq	17844 <__assert_fail@plt+0x69d8>
   1783c:	mov	r0, r4
   17840:	bl	145e4 <__assert_fail@plt+0x3778>
   17844:	mov	r0, fp
   17848:	bl	190b4 <__assert_fail@plt+0x8248>
   1784c:	ldr	r3, [sp, #32]
   17850:	mov	r2, r6
   17854:	mov	r1, fp
   17858:	mov	r4, r0
   1785c:	ldr	lr, [sp, #72]	; 0x48
   17860:	ldr	ip, [sp, #76]	; 0x4c
   17864:	str	r0, [r7, #4]
   17868:	stm	sp, {r3, r8}
   1786c:	mvn	r3, #0
   17870:	str	r5, [sp, #8]
   17874:	str	lr, [sp, #12]
   17878:	str	ip, [sp, #16]
   1787c:	bl	14d04 <__assert_fail@plt+0x3e98>
   17880:	mov	r0, r4
   17884:	str	sl, [r9]
   17888:	add	sp, sp, #84	; 0x54
   1788c:	ldrd	r4, [sp]
   17890:	ldrd	r6, [sp, #8]
   17894:	ldrd	r8, [sp, #16]
   17898:	ldrd	sl, [sp, #24]
   1789c:	add	sp, sp, #32
   178a0:	pop	{pc}		; (ldr pc, [sp], #4)
   178a4:	mov	r0, #8
   178a8:	mvn	r3, #-2147483648	; 0x80000000
   178ac:	add	r1, sp, #28
   178b0:	str	r0, [sp]
   178b4:	mov	r0, #0
   178b8:	bl	19358 <__assert_fail@plt+0x84ec>
   178bc:	ldrd	r2, [r4, #8]
   178c0:	mov	r7, r0
   178c4:	str	r0, [r4]
   178c8:	strd	r2, [r0]
   178cc:	b	177b4 <__assert_fail@plt+0x6948>
   178d0:	andeq	fp, r2, ip, ror #4
   178d4:	ldr	ip, [pc, #472]	; 17ab4 <__assert_fail@plt+0x6c48>
   178d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   178dc:	mov	r5, r0
   178e0:	movw	r4, #45288	; 0xb0e8
   178e4:	movt	r4, #2
   178e8:	ldrd	r2, [ip]
   178ec:	ldrd	r0, [ip, #8]
   178f0:	strd	r6, [sp, #8]
   178f4:	strd	r8, [sp, #16]
   178f8:	strd	sl, [sp, #24]
   178fc:	str	lr, [sp, #32]
   17900:	sub	sp, sp, #84	; 0x54
   17904:	strd	r2, [sp, #32]
   17908:	strd	r0, [sp, #40]	; 0x28
   1790c:	ldr	r6, [sp, #44]	; 0x2c
   17910:	ldrd	r2, [ip, #16]
   17914:	ldrd	r0, [ip, #24]
   17918:	mvn	lr, r6
   1791c:	and	lr, lr, #67108864	; 0x4000000
   17920:	eor	lr, lr, r6
   17924:	ldrd	r6, [ip, #40]	; 0x28
   17928:	strd	r2, [sp, #48]	; 0x30
   1792c:	ldrd	r2, [ip, #32]
   17930:	str	lr, [sp, #44]	; 0x2c
   17934:	strd	r0, [sp, #56]	; 0x38
   17938:	strd	r2, [sp, #64]	; 0x40
   1793c:	strd	r6, [sp, #72]	; 0x48
   17940:	bl	10dac <__errno_location@plt>
   17944:	mov	r8, r0
   17948:	ldr	r9, [r0]
   1794c:	ldr	r2, [r4, #4]
   17950:	ldr	r6, [r4]
   17954:	cmp	r2, #0
   17958:	bgt	179b4 <__assert_fail@plt+0x6b48>
   1795c:	add	r3, r4, #8
   17960:	str	r2, [sp, #28]
   17964:	rsb	r2, r2, #1
   17968:	cmp	r6, r3
   1796c:	beq	17a88 <__assert_fail@plt+0x6c1c>
   17970:	mov	r1, #8
   17974:	mov	r0, r6
   17978:	mvn	r3, #-2147483648	; 0x80000000
   1797c:	str	r1, [sp]
   17980:	add	r1, sp, #28
   17984:	bl	19358 <__assert_fail@plt+0x84ec>
   17988:	mov	r6, r0
   1798c:	str	r0, [r4]
   17990:	ldr	r0, [r4, #4]
   17994:	mov	r1, #0
   17998:	ldr	r2, [sp, #28]
   1799c:	sub	r2, r2, r0
   179a0:	add	r0, r6, r0, lsl #3
   179a4:	lsl	r2, r2, #3
   179a8:	bl	10dc4 <memset@plt>
   179ac:	ldr	r3, [sp, #28]
   179b0:	str	r3, [r4, #4]
   179b4:	ldr	sl, [r6]
   179b8:	add	r0, sp, #40	; 0x28
   179bc:	mvn	r3, #0
   179c0:	mov	r2, r5
   179c4:	ldr	r7, [sp, #36]	; 0x24
   179c8:	ldr	r4, [r6, #4]
   179cc:	mov	r1, sl
   179d0:	str	r0, [sp, #8]
   179d4:	ldr	lr, [sp, #32]
   179d8:	orr	r7, r7, #1
   179dc:	ldr	ip, [sp, #72]	; 0x48
   179e0:	mov	r0, r4
   179e4:	ldr	fp, [sp, #76]	; 0x4c
   179e8:	str	lr, [sp]
   179ec:	str	r7, [sp, #4]
   179f0:	str	ip, [sp, #12]
   179f4:	str	fp, [sp, #16]
   179f8:	bl	14d04 <__assert_fail@plt+0x3e98>
   179fc:	cmp	sl, r0
   17a00:	bhi	17a64 <__assert_fail@plt+0x6bf8>
   17a04:	add	sl, r0, #1
   17a08:	movw	r3, #45420	; 0xb16c
   17a0c:	movt	r3, #2
   17a10:	cmp	r4, r3
   17a14:	str	sl, [r6]
   17a18:	beq	17a24 <__assert_fail@plt+0x6bb8>
   17a1c:	mov	r0, r4
   17a20:	bl	145e4 <__assert_fail@plt+0x3778>
   17a24:	mov	r0, sl
   17a28:	bl	190b4 <__assert_fail@plt+0x8248>
   17a2c:	ldr	r3, [sp, #32]
   17a30:	mov	r2, r5
   17a34:	add	r5, sp, #40	; 0x28
   17a38:	mov	r1, sl
   17a3c:	mov	r4, r0
   17a40:	ldr	lr, [sp, #72]	; 0x48
   17a44:	ldr	ip, [sp, #76]	; 0x4c
   17a48:	str	r0, [r6, #4]
   17a4c:	stm	sp, {r3, r7}
   17a50:	mvn	r3, #0
   17a54:	str	r5, [sp, #8]
   17a58:	str	lr, [sp, #12]
   17a5c:	str	ip, [sp, #16]
   17a60:	bl	14d04 <__assert_fail@plt+0x3e98>
   17a64:	mov	r0, r4
   17a68:	str	r9, [r8]
   17a6c:	add	sp, sp, #84	; 0x54
   17a70:	ldrd	r4, [sp]
   17a74:	ldrd	r6, [sp, #8]
   17a78:	ldrd	r8, [sp, #16]
   17a7c:	ldrd	sl, [sp, #24]
   17a80:	add	sp, sp, #32
   17a84:	pop	{pc}		; (ldr pc, [sp], #4)
   17a88:	mov	r0, #8
   17a8c:	mvn	r3, #-2147483648	; 0x80000000
   17a90:	add	r1, sp, #28
   17a94:	str	r0, [sp]
   17a98:	mov	r0, #0
   17a9c:	bl	19358 <__assert_fail@plt+0x84ec>
   17aa0:	ldrd	r2, [r4, #8]
   17aa4:	mov	r6, r0
   17aa8:	str	r0, [r4]
   17aac:	strd	r2, [r0]
   17ab0:	b	17990 <__assert_fail@plt+0x6b24>
   17ab4:	andeq	fp, r2, ip, ror #4
   17ab8:	ldr	ip, [pc, #480]	; 17ca0 <__assert_fail@plt+0x6e34>
   17abc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17ac0:	mov	r5, r0
   17ac4:	movw	r4, #45288	; 0xb0e8
   17ac8:	movt	r4, #2
   17acc:	ldrd	r2, [ip]
   17ad0:	strd	r6, [sp, #8]
   17ad4:	mov	r6, r1
   17ad8:	ldrd	r0, [ip, #8]
   17adc:	strd	r8, [sp, #16]
   17ae0:	strd	sl, [sp, #24]
   17ae4:	str	lr, [sp, #32]
   17ae8:	sub	sp, sp, #84	; 0x54
   17aec:	ldrd	r8, [ip, #40]	; 0x28
   17af0:	strd	r2, [sp, #32]
   17af4:	strd	r0, [sp, #40]	; 0x28
   17af8:	ldrd	r2, [ip, #16]
   17afc:	ldr	r7, [sp, #44]	; 0x2c
   17b00:	ldrd	r0, [ip, #24]
   17b04:	strd	r2, [sp, #48]	; 0x30
   17b08:	ldrd	r2, [ip, #32]
   17b0c:	mvn	lr, r7
   17b10:	and	lr, lr, #67108864	; 0x4000000
   17b14:	eor	lr, lr, r7
   17b18:	str	lr, [sp, #44]	; 0x2c
   17b1c:	strd	r0, [sp, #56]	; 0x38
   17b20:	strd	r2, [sp, #64]	; 0x40
   17b24:	strd	r8, [sp, #72]	; 0x48
   17b28:	bl	10dac <__errno_location@plt>
   17b2c:	mov	r9, r0
   17b30:	ldr	sl, [r0]
   17b34:	ldr	r2, [r4, #4]
   17b38:	ldr	r7, [r4]
   17b3c:	cmp	r2, #0
   17b40:	bgt	17b9c <__assert_fail@plt+0x6d30>
   17b44:	add	r3, r4, #8
   17b48:	str	r2, [sp, #28]
   17b4c:	rsb	r2, r2, #1
   17b50:	cmp	r7, r3
   17b54:	beq	17c74 <__assert_fail@plt+0x6e08>
   17b58:	mov	r1, #8
   17b5c:	mov	r0, r7
   17b60:	mvn	r3, #-2147483648	; 0x80000000
   17b64:	str	r1, [sp]
   17b68:	add	r1, sp, #28
   17b6c:	bl	19358 <__assert_fail@plt+0x84ec>
   17b70:	mov	r7, r0
   17b74:	str	r0, [r4]
   17b78:	ldr	r0, [r4, #4]
   17b7c:	mov	r1, #0
   17b80:	ldr	r2, [sp, #28]
   17b84:	sub	r2, r2, r0
   17b88:	add	r0, r7, r0, lsl #3
   17b8c:	lsl	r2, r2, #3
   17b90:	bl	10dc4 <memset@plt>
   17b94:	ldr	r3, [sp, #28]
   17b98:	str	r3, [r4, #4]
   17b9c:	ldr	ip, [sp, #32]
   17ba0:	add	r0, sp, #40	; 0x28
   17ba4:	mov	r3, r6
   17ba8:	mov	r2, r5
   17bac:	ldr	r8, [sp, #36]	; 0x24
   17bb0:	ldr	fp, [r7]
   17bb4:	ldr	r4, [r7, #4]
   17bb8:	str	ip, [sp]
   17bbc:	orr	r8, r8, #1
   17bc0:	ldr	ip, [sp, #72]	; 0x48
   17bc4:	mov	r1, fp
   17bc8:	str	r8, [sp, #4]
   17bcc:	ldr	lr, [sp, #76]	; 0x4c
   17bd0:	str	r0, [sp, #8]
   17bd4:	mov	r0, r4
   17bd8:	str	ip, [sp, #12]
   17bdc:	str	lr, [sp, #16]
   17be0:	bl	14d04 <__assert_fail@plt+0x3e98>
   17be4:	cmp	fp, r0
   17be8:	bhi	17c50 <__assert_fail@plt+0x6de4>
   17bec:	add	fp, r0, #1
   17bf0:	movw	r3, #45420	; 0xb16c
   17bf4:	movt	r3, #2
   17bf8:	cmp	r4, r3
   17bfc:	str	fp, [r7]
   17c00:	beq	17c0c <__assert_fail@plt+0x6da0>
   17c04:	mov	r0, r4
   17c08:	bl	145e4 <__assert_fail@plt+0x3778>
   17c0c:	mov	r0, fp
   17c10:	bl	190b4 <__assert_fail@plt+0x8248>
   17c14:	ldr	lr, [sp, #32]
   17c18:	mov	r2, r5
   17c1c:	mov	r3, r6
   17c20:	mov	r1, fp
   17c24:	mov	r4, r0
   17c28:	ldr	r5, [sp, #72]	; 0x48
   17c2c:	ldr	ip, [sp, #76]	; 0x4c
   17c30:	str	r0, [r7, #4]
   17c34:	str	lr, [sp]
   17c38:	add	lr, sp, #40	; 0x28
   17c3c:	str	r8, [sp, #4]
   17c40:	str	lr, [sp, #8]
   17c44:	str	r5, [sp, #12]
   17c48:	str	ip, [sp, #16]
   17c4c:	bl	14d04 <__assert_fail@plt+0x3e98>
   17c50:	mov	r0, r4
   17c54:	str	sl, [r9]
   17c58:	add	sp, sp, #84	; 0x54
   17c5c:	ldrd	r4, [sp]
   17c60:	ldrd	r6, [sp, #8]
   17c64:	ldrd	r8, [sp, #16]
   17c68:	ldrd	sl, [sp, #24]
   17c6c:	add	sp, sp, #32
   17c70:	pop	{pc}		; (ldr pc, [sp], #4)
   17c74:	mov	r0, #8
   17c78:	mvn	r3, #-2147483648	; 0x80000000
   17c7c:	add	r1, sp, #28
   17c80:	str	r0, [sp]
   17c84:	mov	r0, #0
   17c88:	bl	19358 <__assert_fail@plt+0x84ec>
   17c8c:	ldrd	r2, [r4, #8]
   17c90:	mov	r7, r0
   17c94:	str	r0, [r4]
   17c98:	strd	r2, [r0]
   17c9c:	b	17b78 <__assert_fail@plt+0x6d0c>
   17ca0:	andeq	fp, r2, ip, ror #4
   17ca4:	strd	r4, [sp, #-12]!
   17ca8:	mov	r4, #0
   17cac:	mov	r5, #0
   17cb0:	str	lr, [sp, #8]
   17cb4:	sub	sp, sp, #100	; 0x64
   17cb8:	cmp	r1, #10
   17cbc:	strd	r4, [sp]
   17cc0:	strd	r4, [sp, #8]
   17cc4:	strd	r4, [sp, #16]
   17cc8:	strd	r4, [sp, #24]
   17ccc:	strd	r4, [sp, #32]
   17cd0:	strd	r4, [sp, #40]	; 0x28
   17cd4:	beq	17d04 <__assert_fail@plt+0x6e98>
   17cd8:	mov	ip, #67108864	; 0x4000000
   17cdc:	mov	r3, sp
   17ce0:	str	r1, [sp]
   17ce4:	mov	r1, r2
   17ce8:	mvn	r2, #0
   17cec:	str	ip, [sp, #12]
   17cf0:	bl	166f0 <__assert_fail@plt+0x5884>
   17cf4:	add	sp, sp, #100	; 0x64
   17cf8:	ldrd	r4, [sp]
   17cfc:	add	sp, sp, #8
   17d00:	pop	{pc}		; (ldr pc, [sp], #4)
   17d04:	bl	10e54 <abort@plt>
   17d08:	ldr	ip, [pc, #156]	; 17dac <__assert_fail@plt+0x6f40>
   17d0c:	cmp	r2, #0
   17d10:	cmpne	r1, #0
   17d14:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17d18:	strd	r6, [sp, #8]
   17d1c:	mov	r6, r2
   17d20:	str	r8, [sp, #16]
   17d24:	mov	r8, r3
   17d28:	strd	sl, [sp, #20]
   17d2c:	ldrd	r4, [ip]
   17d30:	str	lr, [sp, #28]
   17d34:	sub	sp, sp, #48	; 0x30
   17d38:	mov	lr, #10
   17d3c:	ldrd	r2, [ip, #8]
   17d40:	ldrd	sl, [ip, #16]
   17d44:	strd	r4, [sp]
   17d48:	ldrd	r4, [ip, #32]
   17d4c:	str	lr, [sp]
   17d50:	strd	r2, [sp, #8]
   17d54:	strd	sl, [sp, #16]
   17d58:	ldrd	r2, [ip, #24]
   17d5c:	ldrd	sl, [ip, #40]	; 0x28
   17d60:	strd	r2, [sp, #24]
   17d64:	strd	r4, [sp, #32]
   17d68:	strd	sl, [sp, #40]	; 0x28
   17d6c:	beq	17da8 <__assert_fail@plt+0x6f3c>
   17d70:	mov	r7, r1
   17d74:	mov	r3, sp
   17d78:	mov	r1, r8
   17d7c:	mvn	r2, #0
   17d80:	str	r7, [sp, #40]	; 0x28
   17d84:	str	r6, [sp, #44]	; 0x2c
   17d88:	bl	166f0 <__assert_fail@plt+0x5884>
   17d8c:	add	sp, sp, #48	; 0x30
   17d90:	ldrd	r4, [sp]
   17d94:	ldrd	r6, [sp, #8]
   17d98:	ldr	r8, [sp, #16]
   17d9c:	ldrd	sl, [sp, #20]
   17da0:	add	sp, sp, #28
   17da4:	pop	{pc}		; (ldr pc, [sp], #4)
   17da8:	bl	10e54 <abort@plt>
   17dac:	andeq	fp, r2, ip, ror #4
   17db0:	ldr	ip, [pc, #156]	; 17e54 <__assert_fail@plt+0x6fe8>
   17db4:	cmp	r2, #0
   17db8:	cmpne	r1, #0
   17dbc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17dc0:	strd	r6, [sp, #8]
   17dc4:	mov	r6, r2
   17dc8:	str	r8, [sp, #16]
   17dcc:	mov	r8, r3
   17dd0:	strd	sl, [sp, #20]
   17dd4:	ldrd	r4, [ip]
   17dd8:	str	lr, [sp, #28]
   17ddc:	sub	sp, sp, #48	; 0x30
   17de0:	mov	lr, #10
   17de4:	ldrd	r2, [ip, #8]
   17de8:	ldrd	sl, [ip, #16]
   17dec:	strd	r4, [sp]
   17df0:	ldrd	r4, [ip, #32]
   17df4:	str	lr, [sp]
   17df8:	strd	r2, [sp, #8]
   17dfc:	strd	sl, [sp, #16]
   17e00:	ldrd	r2, [ip, #24]
   17e04:	ldrd	sl, [ip, #40]	; 0x28
   17e08:	strd	r2, [sp, #24]
   17e0c:	strd	r4, [sp, #32]
   17e10:	strd	sl, [sp, #40]	; 0x28
   17e14:	beq	17e50 <__assert_fail@plt+0x6fe4>
   17e18:	ldr	r2, [sp, #80]	; 0x50
   17e1c:	mov	r7, r1
   17e20:	mov	r3, sp
   17e24:	mov	r1, r8
   17e28:	str	r7, [sp, #40]	; 0x28
   17e2c:	str	r6, [sp, #44]	; 0x2c
   17e30:	bl	166f0 <__assert_fail@plt+0x5884>
   17e34:	add	sp, sp, #48	; 0x30
   17e38:	ldrd	r4, [sp]
   17e3c:	ldrd	r6, [sp, #8]
   17e40:	ldr	r8, [sp, #16]
   17e44:	ldrd	sl, [sp, #20]
   17e48:	add	sp, sp, #28
   17e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e50:	bl	10e54 <abort@plt>
   17e54:	andeq	fp, r2, ip, ror #4
   17e58:	ldr	ip, [pc, #512]	; 18060 <__assert_fail@plt+0x71f4>
   17e5c:	cmp	r0, #0
   17e60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e64:	ldrd	r4, [ip, #16]
   17e68:	strd	r6, [sp, #8]
   17e6c:	clz	r6, r1
   17e70:	mov	r7, r1
   17e74:	strd	r8, [sp, #16]
   17e78:	mov	r8, r0
   17e7c:	lsr	r6, r6, #5
   17e80:	strd	sl, [sp, #24]
   17e84:	mov	fp, r2
   17e88:	mov	sl, #10
   17e8c:	ldrd	r2, [ip]
   17e90:	moveq	r6, #1
   17e94:	str	lr, [sp, #32]
   17e98:	sub	sp, sp, #92	; 0x5c
   17e9c:	cmp	r6, #0
   17ea0:	ldrd	r0, [ip, #8]
   17ea4:	strd	r2, [sp, #40]	; 0x28
   17ea8:	strd	r4, [sp, #56]	; 0x38
   17eac:	ldrd	r2, [ip, #24]
   17eb0:	strd	r0, [sp, #48]	; 0x30
   17eb4:	ldrd	r0, [ip, #32]
   17eb8:	str	sl, [sp, #40]	; 0x28
   17ebc:	ldrd	r4, [ip, #40]	; 0x28
   17ec0:	strd	r2, [sp, #64]	; 0x40
   17ec4:	strd	r0, [sp, #72]	; 0x48
   17ec8:	strd	r4, [sp, #80]	; 0x50
   17ecc:	bne	1805c <__assert_fail@plt+0x71f0>
   17ed0:	movw	r5, #45288	; 0xb0e8
   17ed4:	movt	r5, #2
   17ed8:	str	r8, [sp, #80]	; 0x50
   17edc:	str	r7, [sp, #84]	; 0x54
   17ee0:	bl	10dac <__errno_location@plt>
   17ee4:	ldr	r3, [r0]
   17ee8:	mov	r9, r0
   17eec:	ldr	r2, [r5, #4]
   17ef0:	ldr	r4, [r5]
   17ef4:	str	r3, [sp, #28]
   17ef8:	cmp	r2, #0
   17efc:	movgt	r1, sl
   17f00:	bgt	17f68 <__assert_fail@plt+0x70fc>
   17f04:	add	r3, r5, #8
   17f08:	str	r2, [sp, #36]	; 0x24
   17f0c:	rsb	r2, r2, #1
   17f10:	cmp	r4, r3
   17f14:	beq	18030 <__assert_fail@plt+0x71c4>
   17f18:	mov	r1, #8
   17f1c:	mov	r0, r4
   17f20:	mvn	r3, #-2147483648	; 0x80000000
   17f24:	str	r1, [sp]
   17f28:	add	r1, sp, #36	; 0x24
   17f2c:	bl	19358 <__assert_fail@plt+0x84ec>
   17f30:	mov	r4, r0
   17f34:	str	r0, [r5]
   17f38:	ldr	r0, [r5, #4]
   17f3c:	mov	r1, #0
   17f40:	ldr	r2, [sp, #36]	; 0x24
   17f44:	sub	r2, r2, r0
   17f48:	add	r0, r4, r0, lsl #3
   17f4c:	lsl	r2, r2, #3
   17f50:	bl	10dc4 <memset@plt>
   17f54:	ldr	r3, [sp, #36]	; 0x24
   17f58:	ldr	r1, [sp, #40]	; 0x28
   17f5c:	ldr	r8, [sp, #80]	; 0x50
   17f60:	str	r3, [r5, #4]
   17f64:	ldr	r7, [sp, #84]	; 0x54
   17f68:	mvn	r3, #0
   17f6c:	mov	r2, fp
   17f70:	ldr	r6, [sp, #44]	; 0x2c
   17f74:	ldr	sl, [r4]
   17f78:	ldr	r5, [r4, #4]
   17f7c:	orr	r6, r6, #1
   17f80:	stm	sp, {r1, r6}
   17f84:	add	r1, sp, #48	; 0x30
   17f88:	str	r8, [sp, #12]
   17f8c:	mov	r0, r5
   17f90:	str	r1, [sp, #8]
   17f94:	mov	r1, sl
   17f98:	str	r7, [sp, #16]
   17f9c:	bl	14d04 <__assert_fail@plt+0x3e98>
   17fa0:	cmp	sl, r0
   17fa4:	bhi	18008 <__assert_fail@plt+0x719c>
   17fa8:	add	r7, r0, #1
   17fac:	movw	r3, #45420	; 0xb16c
   17fb0:	movt	r3, #2
   17fb4:	cmp	r5, r3
   17fb8:	str	r7, [r4]
   17fbc:	beq	17fc8 <__assert_fail@plt+0x715c>
   17fc0:	mov	r0, r5
   17fc4:	bl	145e4 <__assert_fail@plt+0x3778>
   17fc8:	mov	r0, r7
   17fcc:	bl	190b4 <__assert_fail@plt+0x8248>
   17fd0:	ldr	r3, [sp, #40]	; 0x28
   17fd4:	mov	r2, fp
   17fd8:	mov	r1, r7
   17fdc:	mov	r5, r0
   17fe0:	ldr	lr, [sp, #80]	; 0x50
   17fe4:	ldr	ip, [sp, #84]	; 0x54
   17fe8:	str	r0, [r4, #4]
   17fec:	add	r4, sp, #48	; 0x30
   17ff0:	stm	sp, {r3, r6}
   17ff4:	mvn	r3, #0
   17ff8:	str	r4, [sp, #8]
   17ffc:	str	lr, [sp, #12]
   18000:	str	ip, [sp, #16]
   18004:	bl	14d04 <__assert_fail@plt+0x3e98>
   18008:	ldr	r3, [sp, #28]
   1800c:	mov	r0, r5
   18010:	str	r3, [r9]
   18014:	add	sp, sp, #92	; 0x5c
   18018:	ldrd	r4, [sp]
   1801c:	ldrd	r6, [sp, #8]
   18020:	ldrd	r8, [sp, #16]
   18024:	ldrd	sl, [sp, #24]
   18028:	add	sp, sp, #32
   1802c:	pop	{pc}		; (ldr pc, [sp], #4)
   18030:	mov	r1, #8
   18034:	mvn	r3, #-2147483648	; 0x80000000
   18038:	mov	r0, r6
   1803c:	str	r1, [sp]
   18040:	add	r1, sp, #36	; 0x24
   18044:	bl	19358 <__assert_fail@plt+0x84ec>
   18048:	ldrd	r2, [r5, #8]
   1804c:	mov	r4, r0
   18050:	str	r0, [r5]
   18054:	strd	r2, [r0]
   18058:	b	17f38 <__assert_fail@plt+0x70cc>
   1805c:	bl	10e54 <abort@plt>
   18060:	andeq	fp, r2, ip, ror #4
   18064:	ldr	ip, [pc, #536]	; 18284 <__assert_fail@plt+0x7418>
   18068:	cmp	r0, #0
   1806c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18070:	ldrd	r4, [ip, #16]
   18074:	strd	r6, [sp, #8]
   18078:	mov	r6, r1
   1807c:	mov	r7, r0
   18080:	strd	r8, [sp, #16]
   18084:	mov	r9, #10
   18088:	strd	sl, [sp, #24]
   1808c:	mov	sl, r2
   18090:	mov	fp, r3
   18094:	str	lr, [sp, #32]
   18098:	clz	lr, r1
   1809c:	sub	sp, sp, #92	; 0x5c
   180a0:	ldrd	r2, [ip]
   180a4:	lsr	lr, lr, #5
   180a8:	moveq	lr, #1
   180ac:	ldrd	r0, [ip, #8]
   180b0:	cmp	lr, #0
   180b4:	strd	r4, [sp, #56]	; 0x38
   180b8:	ldrd	r4, [ip, #40]	; 0x28
   180bc:	str	lr, [sp, #28]
   180c0:	strd	r2, [sp, #40]	; 0x28
   180c4:	ldrd	r2, [ip, #24]
   180c8:	strd	r0, [sp, #48]	; 0x30
   180cc:	ldrd	r0, [ip, #32]
   180d0:	str	r9, [sp, #40]	; 0x28
   180d4:	strd	r2, [sp, #64]	; 0x40
   180d8:	strd	r4, [sp, #80]	; 0x50
   180dc:	strd	r0, [sp, #72]	; 0x48
   180e0:	bne	18280 <__assert_fail@plt+0x7414>
   180e4:	movw	r5, #45288	; 0xb0e8
   180e8:	movt	r5, #2
   180ec:	str	r7, [sp, #80]	; 0x50
   180f0:	str	r6, [sp, #84]	; 0x54
   180f4:	bl	10dac <__errno_location@plt>
   180f8:	ldr	r3, [r0]
   180fc:	mov	r8, r0
   18100:	ldr	r2, [r5, #4]
   18104:	ldr	r4, [r5]
   18108:	str	r3, [sp, #24]
   1810c:	cmp	r2, #0
   18110:	movgt	r1, r9
   18114:	bgt	1817c <__assert_fail@plt+0x7310>
   18118:	add	r3, r5, #8
   1811c:	str	r2, [sp, #36]	; 0x24
   18120:	rsb	r2, r2, #1
   18124:	cmp	r4, r3
   18128:	beq	18254 <__assert_fail@plt+0x73e8>
   1812c:	mov	r1, #8
   18130:	mov	r0, r4
   18134:	mvn	r3, #-2147483648	; 0x80000000
   18138:	str	r1, [sp]
   1813c:	add	r1, sp, #36	; 0x24
   18140:	bl	19358 <__assert_fail@plt+0x84ec>
   18144:	mov	r4, r0
   18148:	str	r0, [r5]
   1814c:	ldr	r0, [r5, #4]
   18150:	mov	r1, #0
   18154:	ldr	r2, [sp, #36]	; 0x24
   18158:	sub	r2, r2, r0
   1815c:	add	r0, r4, r0, lsl #3
   18160:	lsl	r2, r2, #3
   18164:	bl	10dc4 <memset@plt>
   18168:	ldr	r3, [sp, #36]	; 0x24
   1816c:	ldr	r1, [sp, #40]	; 0x28
   18170:	ldr	r7, [sp, #80]	; 0x50
   18174:	str	r3, [r5, #4]
   18178:	ldr	r6, [sp, #84]	; 0x54
   1817c:	mov	r3, fp
   18180:	mov	r2, sl
   18184:	ldr	r0, [sp, #44]	; 0x2c
   18188:	ldr	r9, [r4]
   1818c:	ldr	r5, [r4, #4]
   18190:	orr	r0, r0, #1
   18194:	str	r1, [sp]
   18198:	add	r1, sp, #48	; 0x30
   1819c:	str	r0, [sp, #4]
   181a0:	str	r1, [sp, #8]
   181a4:	mov	r1, r9
   181a8:	str	r7, [sp, #12]
   181ac:	str	r6, [sp, #16]
   181b0:	str	r0, [sp, #28]
   181b4:	mov	r0, r5
   181b8:	bl	14d04 <__assert_fail@plt+0x3e98>
   181bc:	cmp	r9, r0
   181c0:	bhi	1822c <__assert_fail@plt+0x73c0>
   181c4:	add	r6, r0, #1
   181c8:	movw	r3, #45420	; 0xb16c
   181cc:	movt	r3, #2
   181d0:	cmp	r5, r3
   181d4:	str	r6, [r4]
   181d8:	beq	181e4 <__assert_fail@plt+0x7378>
   181dc:	mov	r0, r5
   181e0:	bl	145e4 <__assert_fail@plt+0x3778>
   181e4:	mov	r0, r6
   181e8:	bl	190b4 <__assert_fail@plt+0x8248>
   181ec:	ldr	lr, [sp, #40]	; 0x28
   181f0:	mov	r1, r6
   181f4:	mov	r3, fp
   181f8:	mov	r2, sl
   181fc:	mov	r5, r0
   18200:	ldr	r6, [sp, #80]	; 0x50
   18204:	ldr	ip, [sp, #84]	; 0x54
   18208:	str	r0, [r4, #4]
   1820c:	str	lr, [sp]
   18210:	ldr	lr, [sp, #28]
   18214:	str	lr, [sp, #4]
   18218:	add	lr, sp, #48	; 0x30
   1821c:	str	r6, [sp, #12]
   18220:	str	lr, [sp, #8]
   18224:	str	ip, [sp, #16]
   18228:	bl	14d04 <__assert_fail@plt+0x3e98>
   1822c:	ldr	r3, [sp, #24]
   18230:	mov	r0, r5
   18234:	str	r3, [r8]
   18238:	add	sp, sp, #92	; 0x5c
   1823c:	ldrd	r4, [sp]
   18240:	ldrd	r6, [sp, #8]
   18244:	ldrd	r8, [sp, #16]
   18248:	ldrd	sl, [sp, #24]
   1824c:	add	sp, sp, #32
   18250:	pop	{pc}		; (ldr pc, [sp], #4)
   18254:	mov	r1, #8
   18258:	mvn	r3, #-2147483648	; 0x80000000
   1825c:	ldr	r0, [sp, #28]
   18260:	str	r1, [sp]
   18264:	add	r1, sp, #36	; 0x24
   18268:	bl	19358 <__assert_fail@plt+0x84ec>
   1826c:	ldrd	r2, [r5, #8]
   18270:	mov	r4, r0
   18274:	str	r0, [r5]
   18278:	strd	r2, [r0]
   1827c:	b	1814c <__assert_fail@plt+0x72e0>
   18280:	bl	10e54 <abort@plt>
   18284:	andeq	fp, r2, ip, ror #4
   18288:	ldr	r3, [pc]	; 18290 <__assert_fail@plt+0x7424>
   1828c:	b	166f0 <__assert_fail@plt+0x5884>
   18290:	strdeq	fp, [r2], -r8
   18294:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18298:	movw	r4, #45288	; 0xb0e8
   1829c:	movt	r4, #2
   182a0:	strd	r6, [sp, #8]
   182a4:	strd	r8, [sp, #16]
   182a8:	strd	sl, [sp, #24]
   182ac:	mov	sl, r0
   182b0:	mov	fp, r1
   182b4:	str	lr, [sp, #32]
   182b8:	sub	sp, sp, #44	; 0x2c
   182bc:	bl	10dac <__errno_location@plt>
   182c0:	ldr	r3, [r0]
   182c4:	mov	r8, r0
   182c8:	ldr	r2, [r4, #4]
   182cc:	ldr	r5, [r4]
   182d0:	str	r3, [sp, #28]
   182d4:	cmp	r2, #0
   182d8:	bgt	18334 <__assert_fail@plt+0x74c8>
   182dc:	add	r3, r4, #8
   182e0:	str	r2, [sp, #36]	; 0x24
   182e4:	rsb	r2, r2, #1
   182e8:	cmp	r5, r3
   182ec:	beq	18410 <__assert_fail@plt+0x75a4>
   182f0:	mov	r1, #8
   182f4:	mov	r0, r5
   182f8:	mvn	r3, #-2147483648	; 0x80000000
   182fc:	str	r1, [sp]
   18300:	add	r1, sp, #36	; 0x24
   18304:	bl	19358 <__assert_fail@plt+0x84ec>
   18308:	mov	r5, r0
   1830c:	str	r0, [r4]
   18310:	ldr	r0, [r4, #4]
   18314:	mov	r1, #0
   18318:	ldr	r2, [sp, #36]	; 0x24
   1831c:	sub	r2, r2, r0
   18320:	add	r0, r5, r0, lsl #3
   18324:	lsl	r2, r2, #3
   18328:	bl	10dc4 <memset@plt>
   1832c:	ldr	r3, [sp, #36]	; 0x24
   18330:	str	r3, [r4, #4]
   18334:	ldr	ip, [r4, #16]
   18338:	mov	r3, fp
   1833c:	mov	r2, sl
   18340:	ldr	r7, [r4, #20]
   18344:	ldr	r0, [pc, #240]	; 1843c <__assert_fail@plt+0x75d0>
   18348:	ldr	r9, [r5]
   1834c:	orr	r7, r7, #1
   18350:	ldr	r6, [r5, #4]
   18354:	str	ip, [sp]
   18358:	ldr	ip, [r4, #56]	; 0x38
   1835c:	mov	r1, r9
   18360:	str	r7, [sp, #4]
   18364:	ldr	lr, [r4, #60]	; 0x3c
   18368:	str	r0, [sp, #8]
   1836c:	mov	r0, r6
   18370:	str	ip, [sp, #12]
   18374:	str	lr, [sp, #16]
   18378:	bl	14d04 <__assert_fail@plt+0x3e98>
   1837c:	cmp	r9, r0
   18380:	bhi	183e8 <__assert_fail@plt+0x757c>
   18384:	add	r9, r0, #1
   18388:	movw	r3, #45420	; 0xb16c
   1838c:	movt	r3, #2
   18390:	cmp	r6, r3
   18394:	str	r9, [r5]
   18398:	beq	183a4 <__assert_fail@plt+0x7538>
   1839c:	mov	r0, r6
   183a0:	bl	145e4 <__assert_fail@plt+0x3778>
   183a4:	mov	r0, r9
   183a8:	bl	190b4 <__assert_fail@plt+0x8248>
   183ac:	ldr	ip, [r4, #16]
   183b0:	mov	r1, r9
   183b4:	mov	r3, fp
   183b8:	mov	r2, sl
   183bc:	mov	r6, r0
   183c0:	ldr	r9, [r4, #56]	; 0x38
   183c4:	ldr	lr, [r4, #60]	; 0x3c
   183c8:	str	r0, [r5, #4]
   183cc:	str	ip, [sp]
   183d0:	ldr	ip, [pc, #100]	; 1843c <__assert_fail@plt+0x75d0>
   183d4:	str	r7, [sp, #4]
   183d8:	str	ip, [sp, #8]
   183dc:	str	r9, [sp, #12]
   183e0:	str	lr, [sp, #16]
   183e4:	bl	14d04 <__assert_fail@plt+0x3e98>
   183e8:	ldr	r3, [sp, #28]
   183ec:	mov	r0, r6
   183f0:	str	r3, [r8]
   183f4:	add	sp, sp, #44	; 0x2c
   183f8:	ldrd	r4, [sp]
   183fc:	ldrd	r6, [sp, #8]
   18400:	ldrd	r8, [sp, #16]
   18404:	ldrd	sl, [sp, #24]
   18408:	add	sp, sp, #32
   1840c:	pop	{pc}		; (ldr pc, [sp], #4)
   18410:	mov	r0, #8
   18414:	mvn	r3, #-2147483648	; 0x80000000
   18418:	add	r1, sp, #36	; 0x24
   1841c:	str	r0, [sp]
   18420:	mov	r0, #0
   18424:	bl	19358 <__assert_fail@plt+0x84ec>
   18428:	ldrd	r2, [r4, #8]
   1842c:	mov	r5, r0
   18430:	str	r0, [r4]
   18434:	strd	r2, [r0]
   18438:	b	18310 <__assert_fail@plt+0x74a4>
   1843c:	andeq	fp, r2, r0, lsl #2
   18440:	ldr	r3, [pc, #4]	; 1844c <__assert_fail@plt+0x75e0>
   18444:	mvn	r2, #0
   18448:	b	166f0 <__assert_fail@plt+0x5884>
   1844c:	strdeq	fp, [r2], -r8
   18450:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18454:	movw	r4, #45288	; 0xb0e8
   18458:	movt	r4, #2
   1845c:	strd	r6, [sp, #8]
   18460:	strd	r8, [sp, #16]
   18464:	strd	sl, [sp, #24]
   18468:	mov	sl, r0
   1846c:	str	lr, [sp, #32]
   18470:	sub	sp, sp, #44	; 0x2c
   18474:	bl	10dac <__errno_location@plt>
   18478:	ldr	r3, [r0]
   1847c:	mov	r8, r0
   18480:	ldr	r2, [r4, #4]
   18484:	ldr	r5, [r4]
   18488:	str	r3, [sp, #28]
   1848c:	cmp	r2, #0
   18490:	bgt	184ec <__assert_fail@plt+0x7680>
   18494:	add	r3, r4, #8
   18498:	str	r2, [sp, #36]	; 0x24
   1849c:	rsb	r2, r2, #1
   184a0:	cmp	r5, r3
   184a4:	beq	185b4 <__assert_fail@plt+0x7748>
   184a8:	mov	r1, #8
   184ac:	mov	r0, r5
   184b0:	mvn	r3, #-2147483648	; 0x80000000
   184b4:	str	r1, [sp]
   184b8:	add	r1, sp, #36	; 0x24
   184bc:	bl	19358 <__assert_fail@plt+0x84ec>
   184c0:	mov	r5, r0
   184c4:	str	r0, [r4]
   184c8:	ldr	r0, [r4, #4]
   184cc:	mov	r1, #0
   184d0:	ldr	r2, [sp, #36]	; 0x24
   184d4:	sub	r2, r2, r0
   184d8:	add	r0, r5, r0, lsl #3
   184dc:	lsl	r2, r2, #3
   184e0:	bl	10dc4 <memset@plt>
   184e4:	ldr	r3, [sp, #36]	; 0x24
   184e8:	str	r3, [r4, #4]
   184ec:	ldr	ip, [r4, #16]
   184f0:	mvn	r3, #0
   184f4:	mov	r2, sl
   184f8:	ldr	r7, [r4, #20]
   184fc:	ldr	fp, [pc, #220]	; 185e0 <__assert_fail@plt+0x7774>
   18500:	ldr	r9, [r5]
   18504:	orr	r7, r7, #1
   18508:	ldr	r6, [r5, #4]
   1850c:	str	ip, [sp]
   18510:	ldr	ip, [r4, #56]	; 0x38
   18514:	mov	r1, r9
   18518:	stmib	sp, {r7, fp}
   1851c:	ldr	lr, [r4, #60]	; 0x3c
   18520:	mov	r0, r6
   18524:	str	ip, [sp, #12]
   18528:	str	lr, [sp, #16]
   1852c:	bl	14d04 <__assert_fail@plt+0x3e98>
   18530:	cmp	r9, r0
   18534:	bhi	1858c <__assert_fail@plt+0x7720>
   18538:	add	r9, r0, #1
   1853c:	movw	r3, #45420	; 0xb16c
   18540:	movt	r3, #2
   18544:	cmp	r6, r3
   18548:	str	r9, [r5]
   1854c:	beq	18558 <__assert_fail@plt+0x76ec>
   18550:	mov	r0, r6
   18554:	bl	145e4 <__assert_fail@plt+0x3778>
   18558:	mov	r0, r9
   1855c:	bl	190b4 <__assert_fail@plt+0x8248>
   18560:	ldr	r3, [r4, #16]
   18564:	mov	r2, sl
   18568:	mov	r1, r9
   1856c:	mov	r6, r0
   18570:	ldr	lr, [r4, #56]	; 0x38
   18574:	ldr	ip, [r4, #60]	; 0x3c
   18578:	str	r0, [r5, #4]
   1857c:	stm	sp, {r3, r7, fp, lr}
   18580:	mvn	r3, #0
   18584:	str	ip, [sp, #16]
   18588:	bl	14d04 <__assert_fail@plt+0x3e98>
   1858c:	ldr	r3, [sp, #28]
   18590:	mov	r0, r6
   18594:	str	r3, [r8]
   18598:	add	sp, sp, #44	; 0x2c
   1859c:	ldrd	r4, [sp]
   185a0:	ldrd	r6, [sp, #8]
   185a4:	ldrd	r8, [sp, #16]
   185a8:	ldrd	sl, [sp, #24]
   185ac:	add	sp, sp, #32
   185b0:	pop	{pc}		; (ldr pc, [sp], #4)
   185b4:	mov	r0, #8
   185b8:	mvn	r3, #-2147483648	; 0x80000000
   185bc:	add	r1, sp, #36	; 0x24
   185c0:	str	r0, [sp]
   185c4:	mov	r0, #0
   185c8:	bl	19358 <__assert_fail@plt+0x84ec>
   185cc:	ldrd	r2, [r4, #8]
   185d0:	mov	r5, r0
   185d4:	str	r0, [r4]
   185d8:	strd	r2, [r0]
   185dc:	b	184c8 <__assert_fail@plt+0x765c>
   185e0:	andeq	fp, r2, r0, lsl #2
   185e4:	mov	r3, #0
   185e8:	str	r3, [r0]
   185ec:	str	r3, [r0, #4]
   185f0:	bx	lr
   185f4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   185f8:	cmp	r2, #0
   185fc:	mov	r5, r0
   18600:	strd	r6, [sp, #8]
   18604:	addne	r2, r1, r2
   18608:	mov	r6, r3
   1860c:	strd	r8, [sp, #16]
   18610:	mov	r8, #0
   18614:	mov	r9, #0
   18618:	str	lr, [sp, #24]
   1861c:	sub	sp, sp, #52	; 0x34
   18620:	subne	r1, r1, #1
   18624:	add	ip, sp, #16
   18628:	subne	lr, r2, #1
   1862c:	movne	r4, #1
   18630:	strd	r8, [sp, #16]
   18634:	strd	r8, [ip, #8]
   18638:	strd	r8, [ip, #16]
   1863c:	strd	r8, [ip, #24]
   18640:	beq	18664 <__assert_fail@plt+0x77f8>
   18644:	ldrb	r3, [r1, #1]!
   18648:	lsr	r0, r3, #5
   1864c:	and	r3, r3, #31
   18650:	cmp	lr, r1
   18654:	ldr	r2, [ip, r0, lsl #2]
   18658:	orr	r3, r2, r4, lsl r3
   1865c:	str	r3, [ip, r0, lsl #2]
   18660:	bne	18644 <__assert_fail@plt+0x77d8>
   18664:	ldr	r3, [r5, #4]
   18668:	ldr	r2, [r5, #8]
   1866c:	cmp	r3, r2
   18670:	bcs	186c0 <__assert_fail@plt+0x7854>
   18674:	add	r2, r3, #1
   18678:	str	r2, [r5, #4]
   1867c:	ldrb	r4, [r3]
   18680:	b	1868c <__assert_fail@plt+0x7820>
   18684:	str	r1, [r5, #4]
   18688:	ldrb	r4, [r3]
   1868c:	lsr	r3, r4, #5
   18690:	add	r2, sp, #48	; 0x30
   18694:	and	r1, r4, #31
   18698:	add	r3, r2, r3, lsl #2
   1869c:	ldr	r2, [r3, #-32]	; 0xffffffe0
   186a0:	lsr	r3, r2, r1
   186a4:	tst	r3, #1
   186a8:	beq	186d0 <__assert_fail@plt+0x7864>
   186ac:	ldr	r3, [r5, #4]
   186b0:	ldr	r2, [r5, #8]
   186b4:	add	r1, r3, #1
   186b8:	cmp	r3, r2
   186bc:	bcc	18684 <__assert_fail@plt+0x7818>
   186c0:	mov	r0, r5
   186c4:	bl	10e0c <__uflow@plt>
   186c8:	subs	r4, r0, #0
   186cc:	bge	1868c <__assert_fail@plt+0x7820>
   186d0:	ldm	r6, {r3, r9}
   186d4:	mov	r7, #0
   186d8:	mov	r8, #1
   186dc:	str	r3, [sp, #12]
   186e0:	b	18738 <__assert_fail@plt+0x78cc>
   186e4:	lsr	r3, r4, #5
   186e8:	mov	r0, r7
   186ec:	add	r2, sp, #48	; 0x30
   186f0:	cmp	r4, #0
   186f4:	and	r1, r4, #31
   186f8:	add	r3, r2, r3, lsl #2
   186fc:	add	r7, r7, #1
   18700:	add	r2, r9, r0
   18704:	blt	18798 <__assert_fail@plt+0x792c>
   18708:	ldr	r3, [r3, #-32]	; 0xffffffe0
   1870c:	lsr	r3, r3, r1
   18710:	tst	r3, #1
   18714:	bne	18798 <__assert_fail@plt+0x792c>
   18718:	strb	r4, [r2]
   1871c:	ldr	r3, [r5, #4]
   18720:	ldr	r2, [r5, #8]
   18724:	add	r1, r3, #1
   18728:	cmp	r3, r2
   1872c:	bcs	18774 <__assert_fail@plt+0x7908>
   18730:	str	r1, [r5, #4]
   18734:	ldrb	r4, [r3]
   18738:	clz	r3, r7
   1873c:	lsr	r3, r3, #5
   18740:	ands	r3, r3, r4, lsr #31
   18744:	bne	18790 <__assert_fail@plt+0x7924>
   18748:	ldr	r3, [sp, #12]
   1874c:	cmp	r3, r7
   18750:	bne	186e4 <__assert_fail@plt+0x7878>
   18754:	mov	r0, r9
   18758:	mvn	r3, #0
   1875c:	str	r8, [sp]
   18760:	mov	r2, #1
   18764:	add	r1, sp, #12
   18768:	bl	19358 <__assert_fail@plt+0x84ec>
   1876c:	mov	r9, r0
   18770:	b	186e4 <__assert_fail@plt+0x7878>
   18774:	mov	r0, r5
   18778:	bl	10e0c <__uflow@plt>
   1877c:	clz	r3, r7
   18780:	mov	r4, r0
   18784:	lsr	r3, r3, #5
   18788:	ands	r3, r3, r4, lsr #31
   1878c:	beq	18748 <__assert_fail@plt+0x78dc>
   18790:	mvn	r0, #0
   18794:	b	187a8 <__assert_fail@plt+0x793c>
   18798:	mov	r3, #0
   1879c:	strb	r3, [r2]
   187a0:	ldr	r3, [sp, #12]
   187a4:	stm	r6, {r3, r9}
   187a8:	add	sp, sp, #52	; 0x34
   187ac:	ldrd	r4, [sp]
   187b0:	ldrd	r6, [sp, #8]
   187b4:	ldrd	r8, [sp, #16]
   187b8:	add	sp, sp, #24
   187bc:	pop	{pc}		; (ldr pc, [sp], #4)
   187c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   187c4:	cmp	r1, #0
   187c8:	strd	r6, [sp, #8]
   187cc:	strd	r8, [sp, #16]
   187d0:	strd	sl, [sp, #24]
   187d4:	mov	fp, r3
   187d8:	moveq	r3, #64	; 0x40
   187dc:	str	lr, [sp, #32]
   187e0:	sub	sp, sp, #36	; 0x24
   187e4:	str	r0, [sp, #8]
   187e8:	addne	r0, r1, #1
   187ec:	moveq	r0, r3
   187f0:	movne	r3, r0
   187f4:	mov	r1, #4
   187f8:	str	r2, [sp, #12]
   187fc:	str	r3, [sp, #20]
   18800:	bl	191d0 <__assert_fail@plt+0x8364>
   18804:	mov	r8, r0
   18808:	mov	r1, #4
   1880c:	ldr	r0, [sp, #20]
   18810:	bl	191d0 <__assert_fail@plt+0x8364>
   18814:	mov	r3, #0
   18818:	mov	r9, r0
   1881c:	mov	r5, r3
   18820:	str	r3, [sp, #24]
   18824:	str	r3, [sp, #28]
   18828:	b	18858 <__assert_fail@plt+0x79ec>
   1882c:	cmn	r0, #1
   18830:	beq	188d0 <__assert_fail@plt+0x7a64>
   18834:	mov	r1, #1
   18838:	mov	r0, r7
   1883c:	bl	191d0 <__assert_fail@plt+0x8364>
   18840:	add	r5, r5, #1
   18844:	mov	r2, r7
   18848:	ldr	r1, [sp, #28]
   1884c:	str	r6, [sl]
   18850:	bl	10c74 <memcpy@plt>
   18854:	str	r0, [r4]
   18858:	mov	r2, fp
   1885c:	add	r3, sp, #24
   18860:	ldrd	r0, [sp, #8]
   18864:	bl	185f4 <__assert_fail@plt+0x7788>
   18868:	ldr	r2, [sp, #20]
   1886c:	lsl	r4, r5, #2
   18870:	mov	r6, r0
   18874:	add	r7, r0, #1
   18878:	add	sl, r9, r4
   1887c:	add	r4, r8, r4
   18880:	cmp	r2, r5
   18884:	bgt	1882c <__assert_fail@plt+0x79c0>
   18888:	mov	r2, #4
   1888c:	mov	r0, r8
   18890:	lsl	r4, r5, #2
   18894:	mvn	r3, #0
   18898:	add	r1, sp, #20
   1889c:	str	r2, [sp]
   188a0:	mov	r2, #1
   188a4:	bl	19358 <__assert_fail@plt+0x84ec>
   188a8:	mov	r8, r0
   188ac:	mov	r2, #4
   188b0:	ldr	r1, [sp, #20]
   188b4:	mov	r0, r9
   188b8:	bl	19150 <__assert_fail@plt+0x82e4>
   188bc:	cmn	r6, #1
   188c0:	add	sl, r0, r4
   188c4:	mov	r9, r0
   188c8:	add	r4, r8, r4
   188cc:	bne	18834 <__assert_fail@plt+0x79c8>
   188d0:	mov	r2, #0
   188d4:	str	r2, [r4]
   188d8:	str	r2, [sl]
   188dc:	ldr	r0, [sp, #28]
   188e0:	bl	145e4 <__assert_fail@plt+0x3778>
   188e4:	ldr	r3, [sp, #76]	; 0x4c
   188e8:	cmp	r3, #0
   188ec:	ldr	r3, [sp, #72]	; 0x48
   188f0:	str	r8, [r3]
   188f4:	beq	18920 <__assert_fail@plt+0x7ab4>
   188f8:	ldr	r3, [sp, #76]	; 0x4c
   188fc:	str	r9, [r3]
   18900:	mov	r0, r5
   18904:	add	sp, sp, #36	; 0x24
   18908:	ldrd	r4, [sp]
   1890c:	ldrd	r6, [sp, #8]
   18910:	ldrd	r8, [sp, #16]
   18914:	ldrd	sl, [sp, #24]
   18918:	add	sp, sp, #32
   1891c:	pop	{pc}		; (ldr pc, [sp], #4)
   18920:	mov	r0, r9
   18924:	bl	145e4 <__assert_fail@plt+0x3778>
   18928:	b	18900 <__assert_fail@plt+0x7a94>
   1892c:	cmp	r1, #0
   18930:	strd	r4, [sp, #-16]!
   18934:	mov	ip, r3
   18938:	str	r6, [sp, #8]
   1893c:	mov	r4, r0
   18940:	str	lr, [sp, #12]
   18944:	sub	sp, sp, #32
   18948:	ldr	r5, [sp, #48]	; 0x30
   1894c:	ldr	r6, [sp, #52]	; 0x34
   18950:	beq	18a94 <__assert_fail@plt+0x7c28>
   18954:	mov	r3, r1
   18958:	mov	r1, #1
   1895c:	stm	sp, {r2, ip}
   18960:	movw	r2, #40988	; 0xa01c
   18964:	movt	r2, #1
   18968:	bl	10de8 <__fprintf_chk@plt>
   1896c:	mov	r2, #5
   18970:	movw	r1, #41008	; 0xa030
   18974:	movt	r1, #1
   18978:	mov	r0, #0
   1897c:	bl	10ca4 <dcgettext@plt>
   18980:	movw	ip, #2022	; 0x7e6
   18984:	mov	r3, r0
   18988:	mov	r1, #1
   1898c:	movw	r2, #41736	; 0xa308
   18990:	movt	r2, #1
   18994:	mov	r0, r4
   18998:	str	ip, [sp]
   1899c:	bl	10de8 <__fprintf_chk@plt>
   189a0:	mov	r1, r4
   189a4:	mov	r0, #10
   189a8:	bl	10c98 <fputc_unlocked@plt>
   189ac:	mov	r2, #5
   189b0:	movw	r1, #41012	; 0xa034
   189b4:	movt	r1, #1
   189b8:	mov	r0, #0
   189bc:	bl	10ca4 <dcgettext@plt>
   189c0:	mov	r2, r0
   189c4:	mov	r1, #1
   189c8:	movw	r3, #41184	; 0xa0e0
   189cc:	movt	r3, #1
   189d0:	mov	r0, r4
   189d4:	bl	10de8 <__fprintf_chk@plt>
   189d8:	mov	r1, r4
   189dc:	mov	r0, #10
   189e0:	bl	10c98 <fputc_unlocked@plt>
   189e4:	cmp	r6, #9
   189e8:	ldrls	pc, [pc, r6, lsl #2]
   189ec:	b	18d00 <__assert_fail@plt+0x7e94>
   189f0:	andeq	r8, r1, r0, lsl #21
   189f4:			; <UNDEFINED> instruction: 0x00018ab0
   189f8:	andeq	r8, r1, ip, ror #21
   189fc:	andeq	r8, r1, ip, lsr #22
   18a00:	andeq	r8, r1, r4, ror fp
   18a04:	andeq	r8, r1, ip, lsr #23
   18a08:	strdeq	r8, [r1], -r4
   18a0c:	andeq	r8, r1, r8, asr #24
   18a10:	andeq	r8, r1, r0, lsr #25
   18a14:	andeq	r8, r1, r8, lsl sl
   18a18:	movw	r1, #41488	; 0xa210
   18a1c:	movt	r1, #1
   18a20:	mov	r2, #5
   18a24:	mov	r0, #0
   18a28:	bl	10ca4 <dcgettext@plt>
   18a2c:	ldr	lr, [r5, #4]
   18a30:	mov	r2, r0
   18a34:	mov	r1, #1
   18a38:	mov	r0, r4
   18a3c:	ldr	r3, [r5, #8]
   18a40:	ldr	ip, [r5, #32]
   18a44:	str	lr, [sp]
   18a48:	ldr	lr, [r5, #12]
   18a4c:	str	ip, [sp, #28]
   18a50:	ldr	ip, [r5, #28]
   18a54:	str	r3, [sp, #4]
   18a58:	ldr	r3, [r5, #16]
   18a5c:	str	lr, [sp, #8]
   18a60:	ldr	lr, [r5, #20]
   18a64:	str	ip, [sp, #24]
   18a68:	ldr	ip, [r5, #24]
   18a6c:	str	r3, [sp, #12]
   18a70:	ldr	r3, [r5]
   18a74:	str	lr, [sp, #16]
   18a78:	str	ip, [sp, #20]
   18a7c:	bl	10de8 <__fprintf_chk@plt>
   18a80:	add	sp, sp, #32
   18a84:	ldrd	r4, [sp]
   18a88:	ldr	r6, [sp, #8]
   18a8c:	add	sp, sp, #12
   18a90:	pop	{pc}		; (ldr pc, [sp], #4)
   18a94:	mov	r3, r2
   18a98:	mov	r1, #1
   18a9c:	str	ip, [sp]
   18aa0:	movw	r2, #41000	; 0xa028
   18aa4:	movt	r2, #1
   18aa8:	bl	10de8 <__fprintf_chk@plt>
   18aac:	b	1896c <__assert_fail@plt+0x7b00>
   18ab0:	mov	r2, #5
   18ab4:	movw	r1, #41220	; 0xa104
   18ab8:	movt	r1, #1
   18abc:	mov	r0, #0
   18ac0:	bl	10ca4 <dcgettext@plt>
   18ac4:	ldr	r3, [r5]
   18ac8:	mov	r2, r0
   18acc:	mov	r1, #1
   18ad0:	mov	r0, r4
   18ad4:	add	sp, sp, #32
   18ad8:	ldrd	r4, [sp]
   18adc:	ldr	r6, [sp, #8]
   18ae0:	ldr	lr, [sp, #12]
   18ae4:	add	sp, sp, #16
   18ae8:	b	10de8 <__fprintf_chk@plt>
   18aec:	mov	r2, #5
   18af0:	movw	r1, #41236	; 0xa114
   18af4:	movt	r1, #1
   18af8:	mov	r0, #0
   18afc:	bl	10ca4 <dcgettext@plt>
   18b00:	ldm	r5, {r3, ip}
   18b04:	mov	r2, r0
   18b08:	mov	r1, #1
   18b0c:	mov	r0, r4
   18b10:	str	ip, [sp, #48]	; 0x30
   18b14:	add	sp, sp, #32
   18b18:	ldrd	r4, [sp]
   18b1c:	ldr	r6, [sp, #8]
   18b20:	ldr	lr, [sp, #12]
   18b24:	add	sp, sp, #16
   18b28:	b	10de8 <__fprintf_chk@plt>
   18b2c:	mov	r2, #5
   18b30:	movw	r1, #41260	; 0xa12c
   18b34:	movt	r1, #1
   18b38:	mov	r0, #0
   18b3c:	bl	10ca4 <dcgettext@plt>
   18b40:	ldm	r5, {r3, lr}
   18b44:	mov	r2, r0
   18b48:	mov	r1, #1
   18b4c:	mov	r0, r4
   18b50:	ldr	ip, [r5, #8]
   18b54:	str	lr, [sp, #48]	; 0x30
   18b58:	str	ip, [sp, #52]	; 0x34
   18b5c:	add	sp, sp, #32
   18b60:	ldrd	r4, [sp]
   18b64:	ldr	r6, [sp, #8]
   18b68:	ldr	lr, [sp, #12]
   18b6c:	add	sp, sp, #16
   18b70:	b	10de8 <__fprintf_chk@plt>
   18b74:	mov	r2, #5
   18b78:	movw	r1, #41288	; 0xa148
   18b7c:	movt	r1, #1
   18b80:	mov	r0, #0
   18b84:	bl	10ca4 <dcgettext@plt>
   18b88:	ldmib	r5, {r3, ip, lr}
   18b8c:	mov	r2, r0
   18b90:	mov	r1, #1
   18b94:	mov	r0, r4
   18b98:	str	r3, [sp]
   18b9c:	ldr	r3, [r5]
   18ba0:	stmib	sp, {ip, lr}
   18ba4:	bl	10de8 <__fprintf_chk@plt>
   18ba8:	b	18a80 <__assert_fail@plt+0x7c14>
   18bac:	mov	r2, #5
   18bb0:	movw	r1, #41320	; 0xa168
   18bb4:	movt	r1, #1
   18bb8:	mov	r0, #0
   18bbc:	bl	10ca4 <dcgettext@plt>
   18bc0:	ldmib	r5, {ip, lr}
   18bc4:	mov	r2, r0
   18bc8:	mov	r1, #1
   18bcc:	mov	r0, r4
   18bd0:	ldr	r3, [r5, #16]
   18bd4:	str	ip, [sp]
   18bd8:	ldr	ip, [r5, #12]
   18bdc:	str	r3, [sp, #12]
   18be0:	ldr	r3, [r5]
   18be4:	str	lr, [sp, #4]
   18be8:	str	ip, [sp, #8]
   18bec:	bl	10de8 <__fprintf_chk@plt>
   18bf0:	b	18a80 <__assert_fail@plt+0x7c14>
   18bf4:	mov	r2, #5
   18bf8:	movw	r1, #41356	; 0xa18c
   18bfc:	movt	r1, #1
   18c00:	mov	r0, #0
   18c04:	bl	10ca4 <dcgettext@plt>
   18c08:	ldr	lr, [r5, #4]
   18c0c:	mov	r2, r0
   18c10:	mov	r1, #1
   18c14:	mov	r0, r4
   18c18:	ldr	r3, [r5, #8]
   18c1c:	ldr	ip, [r5, #20]
   18c20:	str	lr, [sp]
   18c24:	ldr	lr, [r5, #12]
   18c28:	str	ip, [sp, #16]
   18c2c:	ldr	ip, [r5, #16]
   18c30:	str	r3, [sp, #4]
   18c34:	ldr	r3, [r5]
   18c38:	str	lr, [sp, #8]
   18c3c:	str	ip, [sp, #12]
   18c40:	bl	10de8 <__fprintf_chk@plt>
   18c44:	b	18a80 <__assert_fail@plt+0x7c14>
   18c48:	mov	r2, #5
   18c4c:	movw	r1, #41396	; 0xa1b4
   18c50:	movt	r1, #1
   18c54:	mov	r0, #0
   18c58:	bl	10ca4 <dcgettext@plt>
   18c5c:	ldmib	r5, {r3, ip}
   18c60:	mov	r2, r0
   18c64:	mov	r1, #1
   18c68:	mov	r0, r4
   18c6c:	ldr	lr, [r5, #24]
   18c70:	str	r3, [sp]
   18c74:	ldr	r3, [r5, #12]
   18c78:	str	lr, [sp, #20]
   18c7c:	ldr	lr, [r5, #20]
   18c80:	str	ip, [sp, #4]
   18c84:	ldr	ip, [r5, #16]
   18c88:	str	r3, [sp, #8]
   18c8c:	ldr	r3, [r5]
   18c90:	str	ip, [sp, #12]
   18c94:	str	lr, [sp, #16]
   18c98:	bl	10de8 <__fprintf_chk@plt>
   18c9c:	b	18a80 <__assert_fail@plt+0x7c14>
   18ca0:	mov	r2, #5
   18ca4:	movw	r1, #41440	; 0xa1e0
   18ca8:	movt	r1, #1
   18cac:	mov	r0, #0
   18cb0:	bl	10ca4 <dcgettext@plt>
   18cb4:	ldmib	r5, {ip, lr}
   18cb8:	mov	r2, r0
   18cbc:	mov	r1, #1
   18cc0:	mov	r0, r4
   18cc4:	ldr	r3, [r5, #28]
   18cc8:	str	ip, [sp]
   18ccc:	ldr	ip, [r5, #12]
   18cd0:	str	r3, [sp, #24]
   18cd4:	ldr	r3, [r5, #24]
   18cd8:	str	lr, [sp, #4]
   18cdc:	ldr	lr, [r5, #16]
   18ce0:	str	ip, [sp, #8]
   18ce4:	ldr	ip, [r5, #20]
   18ce8:	str	r3, [sp, #20]
   18cec:	ldr	r3, [r5]
   18cf0:	str	lr, [sp, #12]
   18cf4:	str	ip, [sp, #16]
   18cf8:	bl	10de8 <__fprintf_chk@plt>
   18cfc:	b	18a80 <__assert_fail@plt+0x7c14>
   18d00:	movw	r1, #41540	; 0xa244
   18d04:	movt	r1, #1
   18d08:	b	18a20 <__assert_fail@plt+0x7bb4>
   18d0c:	strd	r4, [sp, #-12]!
   18d10:	str	lr, [sp, #8]
   18d14:	sub	sp, sp, #12
   18d18:	ldr	r5, [sp, #24]
   18d1c:	ldr	ip, [r5]
   18d20:	cmp	ip, #0
   18d24:	beq	18d40 <__assert_fail@plt+0x7ed4>
   18d28:	mov	lr, r5
   18d2c:	mov	ip, #0
   18d30:	ldr	r4, [lr, #4]!
   18d34:	add	ip, ip, #1
   18d38:	cmp	r4, #0
   18d3c:	bne	18d30 <__assert_fail@plt+0x7ec4>
   18d40:	stm	sp, {r5, ip}
   18d44:	bl	1892c <__assert_fail@plt+0x7ac0>
   18d48:	add	sp, sp, #12
   18d4c:	ldrd	r4, [sp]
   18d50:	add	sp, sp, #8
   18d54:	pop	{pc}		; (ldr pc, [sp], #4)
   18d58:	push	{lr}		; (str lr, [sp, #-4]!)
   18d5c:	sub	sp, sp, #52	; 0x34
   18d60:	ldr	ip, [sp, #56]	; 0x38
   18d64:	ldr	lr, [ip]
   18d68:	cmp	lr, #0
   18d6c:	str	lr, [sp, #8]
   18d70:	beq	18e08 <__assert_fail@plt+0x7f9c>
   18d74:	ldr	lr, [ip, #4]
   18d78:	cmp	lr, #0
   18d7c:	str	lr, [sp, #12]
   18d80:	beq	18e1c <__assert_fail@plt+0x7fb0>
   18d84:	ldr	lr, [ip, #8]
   18d88:	cmp	lr, #0
   18d8c:	str	lr, [sp, #16]
   18d90:	beq	18e24 <__assert_fail@plt+0x7fb8>
   18d94:	ldr	lr, [ip, #12]
   18d98:	cmp	lr, #0
   18d9c:	str	lr, [sp, #20]
   18da0:	beq	18e2c <__assert_fail@plt+0x7fc0>
   18da4:	ldr	lr, [ip, #16]
   18da8:	cmp	lr, #0
   18dac:	str	lr, [sp, #24]
   18db0:	beq	18e34 <__assert_fail@plt+0x7fc8>
   18db4:	ldr	lr, [ip, #20]
   18db8:	cmp	lr, #0
   18dbc:	str	lr, [sp, #28]
   18dc0:	beq	18e3c <__assert_fail@plt+0x7fd0>
   18dc4:	ldr	lr, [ip, #24]
   18dc8:	cmp	lr, #0
   18dcc:	str	lr, [sp, #32]
   18dd0:	beq	18e44 <__assert_fail@plt+0x7fd8>
   18dd4:	ldr	lr, [ip, #28]
   18dd8:	cmp	lr, #0
   18ddc:	str	lr, [sp, #36]	; 0x24
   18de0:	beq	18e4c <__assert_fail@plt+0x7fe0>
   18de4:	ldr	lr, [ip, #32]
   18de8:	cmp	lr, #0
   18dec:	str	lr, [sp, #40]	; 0x28
   18df0:	beq	18e54 <__assert_fail@plt+0x7fe8>
   18df4:	ldr	ip, [ip, #36]	; 0x24
   18df8:	cmp	ip, #0
   18dfc:	str	ip, [sp, #44]	; 0x2c
   18e00:	movne	lr, #10
   18e04:	moveq	lr, #9
   18e08:	add	ip, sp, #8
   18e0c:	stm	sp, {ip, lr}
   18e10:	bl	1892c <__assert_fail@plt+0x7ac0>
   18e14:	add	sp, sp, #52	; 0x34
   18e18:	pop	{pc}		; (ldr pc, [sp], #4)
   18e1c:	mov	lr, #1
   18e20:	b	18e08 <__assert_fail@plt+0x7f9c>
   18e24:	mov	lr, #2
   18e28:	b	18e08 <__assert_fail@plt+0x7f9c>
   18e2c:	mov	lr, #3
   18e30:	b	18e08 <__assert_fail@plt+0x7f9c>
   18e34:	mov	lr, #4
   18e38:	b	18e08 <__assert_fail@plt+0x7f9c>
   18e3c:	mov	lr, #5
   18e40:	b	18e08 <__assert_fail@plt+0x7f9c>
   18e44:	mov	lr, #6
   18e48:	b	18e08 <__assert_fail@plt+0x7f9c>
   18e4c:	mov	lr, #7
   18e50:	b	18e08 <__assert_fail@plt+0x7f9c>
   18e54:	mov	lr, #8
   18e58:	b	18e08 <__assert_fail@plt+0x7f9c>
   18e5c:	push	{r3}		; (str r3, [sp, #-4]!)
   18e60:	push	{lr}		; (str lr, [sp, #-4]!)
   18e64:	sub	sp, sp, #56	; 0x38
   18e68:	ldr	ip, [sp, #64]	; 0x40
   18e6c:	add	r3, sp, #64	; 0x40
   18e70:	str	r3, [sp, #12]
   18e74:	cmp	ip, #0
   18e78:	str	ip, [sp, #16]
   18e7c:	beq	18f14 <__assert_fail@plt+0x80a8>
   18e80:	ldr	ip, [sp, #68]	; 0x44
   18e84:	cmp	ip, #0
   18e88:	str	ip, [sp, #20]
   18e8c:	beq	18f38 <__assert_fail@plt+0x80cc>
   18e90:	ldr	ip, [sp, #72]	; 0x48
   18e94:	cmp	ip, #0
   18e98:	str	ip, [sp, #24]
   18e9c:	beq	18f40 <__assert_fail@plt+0x80d4>
   18ea0:	ldr	ip, [sp, #76]	; 0x4c
   18ea4:	cmp	ip, #0
   18ea8:	str	ip, [sp, #28]
   18eac:	beq	18f48 <__assert_fail@plt+0x80dc>
   18eb0:	ldr	ip, [sp, #80]	; 0x50
   18eb4:	cmp	ip, #0
   18eb8:	str	ip, [sp, #32]
   18ebc:	beq	18f50 <__assert_fail@plt+0x80e4>
   18ec0:	ldr	ip, [sp, #84]	; 0x54
   18ec4:	cmp	ip, #0
   18ec8:	str	ip, [sp, #36]	; 0x24
   18ecc:	beq	18f58 <__assert_fail@plt+0x80ec>
   18ed0:	ldr	ip, [sp, #88]	; 0x58
   18ed4:	cmp	ip, #0
   18ed8:	str	ip, [sp, #40]	; 0x28
   18edc:	beq	18f60 <__assert_fail@plt+0x80f4>
   18ee0:	ldr	ip, [sp, #92]	; 0x5c
   18ee4:	cmp	ip, #0
   18ee8:	str	ip, [sp, #44]	; 0x2c
   18eec:	beq	18f68 <__assert_fail@plt+0x80fc>
   18ef0:	ldr	ip, [sp, #96]	; 0x60
   18ef4:	cmp	ip, #0
   18ef8:	str	ip, [sp, #48]	; 0x30
   18efc:	beq	18f70 <__assert_fail@plt+0x8104>
   18f00:	ldr	r3, [sp, #100]	; 0x64
   18f04:	cmp	r3, #0
   18f08:	str	r3, [sp, #52]	; 0x34
   18f0c:	movne	ip, #10
   18f10:	moveq	ip, #9
   18f14:	ldr	r3, [sp, #60]	; 0x3c
   18f18:	add	lr, sp, #16
   18f1c:	str	lr, [sp]
   18f20:	str	ip, [sp, #4]
   18f24:	bl	1892c <__assert_fail@plt+0x7ac0>
   18f28:	add	sp, sp, #56	; 0x38
   18f2c:	pop	{lr}		; (ldr lr, [sp], #4)
   18f30:	add	sp, sp, #4
   18f34:	bx	lr
   18f38:	mov	ip, #1
   18f3c:	b	18f14 <__assert_fail@plt+0x80a8>
   18f40:	mov	ip, #2
   18f44:	b	18f14 <__assert_fail@plt+0x80a8>
   18f48:	mov	ip, #3
   18f4c:	b	18f14 <__assert_fail@plt+0x80a8>
   18f50:	mov	ip, #4
   18f54:	b	18f14 <__assert_fail@plt+0x80a8>
   18f58:	mov	ip, #5
   18f5c:	b	18f14 <__assert_fail@plt+0x80a8>
   18f60:	mov	ip, #6
   18f64:	b	18f14 <__assert_fail@plt+0x80a8>
   18f68:	mov	ip, #7
   18f6c:	b	18f14 <__assert_fail@plt+0x80a8>
   18f70:	mov	ip, #8
   18f74:	b	18f14 <__assert_fail@plt+0x80a8>
   18f78:	movw	r3, #45380	; 0xb144
   18f7c:	movt	r3, #2
   18f80:	str	r4, [sp, #-8]!
   18f84:	mov	r0, #10
   18f88:	ldr	r1, [r3]
   18f8c:	str	lr, [sp, #4]
   18f90:	bl	10c98 <fputc_unlocked@plt>
   18f94:	mov	r2, #5
   18f98:	movw	r1, #41600	; 0xa280
   18f9c:	movt	r1, #1
   18fa0:	mov	r0, #0
   18fa4:	bl	10ca4 <dcgettext@plt>
   18fa8:	mov	r1, r0
   18fac:	movw	r2, #41620	; 0xa294
   18fb0:	movt	r2, #1
   18fb4:	mov	r0, #1
   18fb8:	bl	10dd0 <__printf_chk@plt>
   18fbc:	mov	r2, #5
   18fc0:	movw	r1, #41644	; 0xa2ac
   18fc4:	movt	r1, #1
   18fc8:	mov	r0, #0
   18fcc:	bl	10ca4 <dcgettext@plt>
   18fd0:	mov	r1, r0
   18fd4:	movw	r3, #39976	; 0x9c28
   18fd8:	movt	r3, #1
   18fdc:	movw	r2, #40016	; 0x9c50
   18fe0:	movt	r2, #1
   18fe4:	mov	r0, #1
   18fe8:	bl	10dd0 <__printf_chk@plt>
   18fec:	mov	r2, #5
   18ff0:	movw	r1, #41664	; 0xa2c0
   18ff4:	movt	r1, #1
   18ff8:	mov	r0, #0
   18ffc:	bl	10ca4 <dcgettext@plt>
   19000:	mov	r1, r0
   19004:	movw	r2, #41704	; 0xa2e8
   19008:	movt	r2, #1
   1900c:	mov	r0, #1
   19010:	ldr	r4, [sp]
   19014:	ldr	lr, [sp, #4]
   19018:	add	sp, sp, #8
   1901c:	b	10dd0 <__printf_chk@plt>
   19020:	strd	r4, [sp, #-16]!
   19024:	mov	r4, r0
   19028:	mov	r5, r2
   1902c:	str	r6, [sp, #8]
   19030:	mov	r6, r1
   19034:	str	lr, [sp, #12]
   19038:	bl	198b4 <__assert_fail@plt+0x8a48>
   1903c:	cmp	r0, #0
   19040:	beq	19054 <__assert_fail@plt+0x81e8>
   19044:	ldrd	r4, [sp]
   19048:	ldr	r6, [sp, #8]
   1904c:	add	sp, sp, #12
   19050:	pop	{pc}		; (ldr pc, [sp], #4)
   19054:	cmp	r4, #0
   19058:	beq	19068 <__assert_fail@plt+0x81fc>
   1905c:	cmp	r6, #0
   19060:	cmpne	r5, #0
   19064:	beq	19044 <__assert_fail@plt+0x81d8>
   19068:	bl	19624 <__assert_fail@plt+0x87b8>
   1906c:	str	r4, [sp, #-8]!
   19070:	str	lr, [sp, #4]
   19074:	bl	196dc <__assert_fail@plt+0x8870>
   19078:	cmp	r0, #0
   1907c:	beq	1908c <__assert_fail@plt+0x8220>
   19080:	ldr	r4, [sp]
   19084:	add	sp, sp, #4
   19088:	pop	{pc}		; (ldr pc, [sp], #4)
   1908c:	bl	19624 <__assert_fail@plt+0x87b8>
   19090:	str	r4, [sp, #-8]!
   19094:	str	lr, [sp, #4]
   19098:	bl	196dc <__assert_fail@plt+0x8870>
   1909c:	cmp	r0, #0
   190a0:	beq	190b0 <__assert_fail@plt+0x8244>
   190a4:	ldr	r4, [sp]
   190a8:	add	sp, sp, #4
   190ac:	pop	{pc}		; (ldr pc, [sp], #4)
   190b0:	bl	19624 <__assert_fail@plt+0x87b8>
   190b4:	str	r4, [sp, #-8]!
   190b8:	str	lr, [sp, #4]
   190bc:	bl	196dc <__assert_fail@plt+0x8870>
   190c0:	cmp	r0, #0
   190c4:	beq	190d4 <__assert_fail@plt+0x8268>
   190c8:	ldr	r4, [sp]
   190cc:	add	sp, sp, #4
   190d0:	pop	{pc}		; (ldr pc, [sp], #4)
   190d4:	bl	19624 <__assert_fail@plt+0x87b8>
   190d8:	strd	r4, [sp, #-16]!
   190dc:	mov	r5, r0
   190e0:	mov	r4, r1
   190e4:	str	r6, [sp, #8]
   190e8:	str	lr, [sp, #12]
   190ec:	bl	19718 <__assert_fail@plt+0x88ac>
   190f0:	cmp	r0, #0
   190f4:	beq	19108 <__assert_fail@plt+0x829c>
   190f8:	ldrd	r4, [sp]
   190fc:	ldr	r6, [sp, #8]
   19100:	add	sp, sp, #12
   19104:	pop	{pc}		; (ldr pc, [sp], #4)
   19108:	adds	r4, r4, #0
   1910c:	movne	r4, #1
   19110:	cmp	r5, #0
   19114:	moveq	r4, #1
   19118:	cmp	r4, #0
   1911c:	beq	190f8 <__assert_fail@plt+0x828c>
   19120:	bl	19624 <__assert_fail@plt+0x87b8>
   19124:	cmp	r1, #0
   19128:	orreq	r1, r1, #1
   1912c:	str	r4, [sp, #-8]!
   19130:	str	lr, [sp, #4]
   19134:	bl	19718 <__assert_fail@plt+0x88ac>
   19138:	cmp	r0, #0
   1913c:	beq	1914c <__assert_fail@plt+0x82e0>
   19140:	ldr	r4, [sp]
   19144:	add	sp, sp, #4
   19148:	pop	{pc}		; (ldr pc, [sp], #4)
   1914c:	bl	19624 <__assert_fail@plt+0x87b8>
   19150:	strd	r4, [sp, #-16]!
   19154:	mov	r4, r0
   19158:	mov	r5, r2
   1915c:	str	r6, [sp, #8]
   19160:	mov	r6, r1
   19164:	str	lr, [sp, #12]
   19168:	bl	198b4 <__assert_fail@plt+0x8a48>
   1916c:	cmp	r0, #0
   19170:	beq	19184 <__assert_fail@plt+0x8318>
   19174:	ldrd	r4, [sp]
   19178:	ldr	r6, [sp, #8]
   1917c:	add	sp, sp, #12
   19180:	pop	{pc}		; (ldr pc, [sp], #4)
   19184:	cmp	r4, #0
   19188:	beq	19198 <__assert_fail@plt+0x832c>
   1918c:	cmp	r6, #0
   19190:	cmpne	r5, #0
   19194:	beq	19174 <__assert_fail@plt+0x8308>
   19198:	bl	19624 <__assert_fail@plt+0x87b8>
   1919c:	cmp	r2, #0
   191a0:	cmpne	r1, #0
   191a4:	str	r4, [sp, #-8]!
   191a8:	moveq	r2, #1
   191ac:	str	lr, [sp, #4]
   191b0:	moveq	r1, r2
   191b4:	bl	198b4 <__assert_fail@plt+0x8a48>
   191b8:	cmp	r0, #0
   191bc:	beq	191cc <__assert_fail@plt+0x8360>
   191c0:	ldr	r4, [sp]
   191c4:	add	sp, sp, #4
   191c8:	pop	{pc}		; (ldr pc, [sp], #4)
   191cc:	bl	19624 <__assert_fail@plt+0x87b8>
   191d0:	mov	r2, r1
   191d4:	mov	r1, r0
   191d8:	str	r4, [sp, #-8]!
   191dc:	mov	r0, #0
   191e0:	str	lr, [sp, #4]
   191e4:	bl	198b4 <__assert_fail@plt+0x8a48>
   191e8:	cmp	r0, #0
   191ec:	beq	191fc <__assert_fail@plt+0x8390>
   191f0:	ldr	r4, [sp]
   191f4:	add	sp, sp, #4
   191f8:	pop	{pc}		; (ldr pc, [sp], #4)
   191fc:	bl	19624 <__assert_fail@plt+0x87b8>
   19200:	cmp	r1, #0
   19204:	cmpne	r0, #0
   19208:	str	r4, [sp, #-8]!
   1920c:	moveq	r2, #1
   19210:	movne	r2, r1
   19214:	str	lr, [sp, #4]
   19218:	movne	r1, r0
   1921c:	moveq	r1, r2
   19220:	mov	r0, #0
   19224:	bl	198b4 <__assert_fail@plt+0x8a48>
   19228:	cmp	r0, #0
   1922c:	beq	1923c <__assert_fail@plt+0x83d0>
   19230:	ldr	r4, [sp]
   19234:	add	sp, sp, #4
   19238:	pop	{pc}		; (ldr pc, [sp], #4)
   1923c:	bl	19624 <__assert_fail@plt+0x87b8>
   19240:	cmp	r0, #0
   19244:	strd	r4, [sp, #-16]!
   19248:	mov	r5, r1
   1924c:	ldr	r4, [r1]
   19250:	str	r6, [sp, #8]
   19254:	str	lr, [sp, #12]
   19258:	beq	192a0 <__assert_fail@plt+0x8434>
   1925c:	lsr	r3, r4, #1
   19260:	add	r3, r3, #1
   19264:	adds	r4, r4, r3
   19268:	bcs	1929c <__assert_fail@plt+0x8430>
   1926c:	mov	r2, #1
   19270:	mov	r1, r4
   19274:	bl	198b4 <__assert_fail@plt+0x8a48>
   19278:	cmp	r0, #0
   1927c:	beq	19294 <__assert_fail@plt+0x8428>
   19280:	ldr	r6, [sp, #8]
   19284:	str	r4, [r5]
   19288:	ldrd	r4, [sp]
   1928c:	add	sp, sp, #12
   19290:	pop	{pc}		; (ldr pc, [sp], #4)
   19294:	cmp	r4, #0
   19298:	beq	19280 <__assert_fail@plt+0x8414>
   1929c:	bl	19624 <__assert_fail@plt+0x87b8>
   192a0:	cmp	r4, #0
   192a4:	mov	r2, #1
   192a8:	moveq	r4, #64	; 0x40
   192ac:	mov	r1, r4
   192b0:	bl	198b4 <__assert_fail@plt+0x8a48>
   192b4:	cmp	r0, #0
   192b8:	bne	19280 <__assert_fail@plt+0x8414>
   192bc:	b	1929c <__assert_fail@plt+0x8430>
   192c0:	cmp	r0, #0
   192c4:	strd	r4, [sp, #-16]!
   192c8:	mov	r5, r1
   192cc:	ldr	r4, [r1]
   192d0:	str	r6, [sp, #8]
   192d4:	mov	r6, r2
   192d8:	str	lr, [sp, #12]
   192dc:	beq	19324 <__assert_fail@plt+0x84b8>
   192e0:	lsr	r3, r4, #1
   192e4:	add	r3, r3, #1
   192e8:	adds	r4, r4, r3
   192ec:	bcs	19320 <__assert_fail@plt+0x84b4>
   192f0:	mov	r1, r4
   192f4:	bl	198b4 <__assert_fail@plt+0x8a48>
   192f8:	cmp	r0, #0
   192fc:	beq	19314 <__assert_fail@plt+0x84a8>
   19300:	ldr	r6, [sp, #8]
   19304:	str	r4, [r5]
   19308:	ldrd	r4, [sp]
   1930c:	add	sp, sp, #12
   19310:	pop	{pc}		; (ldr pc, [sp], #4)
   19314:	cmp	r4, #0
   19318:	cmpne	r6, #0
   1931c:	beq	19300 <__assert_fail@plt+0x8494>
   19320:	bl	19624 <__assert_fail@plt+0x87b8>
   19324:	cmp	r4, #0
   19328:	bne	1933c <__assert_fail@plt+0x84d0>
   1932c:	mov	r4, #64	; 0x40
   19330:	udiv	r4, r4, r2
   19334:	cmp	r2, #64	; 0x40
   19338:	addhi	r4, r4, #1
   1933c:	mov	r2, r6
   19340:	mov	r1, r4
   19344:	mov	r0, #0
   19348:	bl	198b4 <__assert_fail@plt+0x8a48>
   1934c:	cmp	r0, #0
   19350:	bne	19300 <__assert_fail@plt+0x8494>
   19354:	b	19320 <__assert_fail@plt+0x84b4>
   19358:	ldr	ip, [r1]
   1935c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19360:	strd	r6, [sp, #8]
   19364:	mov	r7, r1
   19368:	mov	r6, r0
   1936c:	str	r8, [sp, #16]
   19370:	mvn	r8, r3
   19374:	lsr	r8, r8, #31
   19378:	str	lr, [sp, #20]
   1937c:	asr	r1, ip, #1
   19380:	ldr	lr, [sp, #24]
   19384:	adds	r4, ip, r1
   19388:	mvnvs	r4, #-2147483648	; 0x80000000
   1938c:	cmp	r3, r4
   19390:	movge	r1, #0
   19394:	andlt	r1, r8, #1
   19398:	cmp	r1, #0
   1939c:	movne	r4, r3
   193a0:	smull	r0, r1, r4, lr
   193a4:	cmp	r1, r0, asr #31
   193a8:	bne	19458 <__assert_fail@plt+0x85ec>
   193ac:	cmp	r0, #63	; 0x3f
   193b0:	mov	r5, r0
   193b4:	ble	19424 <__assert_fail@plt+0x85b8>
   193b8:	cmp	r6, #0
   193bc:	sub	r1, r4, ip
   193c0:	streq	r6, [r7]
   193c4:	cmp	r1, r2
   193c8:	bge	193f8 <__assert_fail@plt+0x858c>
   193cc:	adds	r4, ip, r2
   193d0:	bvs	19454 <__assert_fail@plt+0x85e8>
   193d4:	cmp	r4, r3
   193d8:	movle	r3, #0
   193dc:	andgt	r3, r8, #1
   193e0:	cmp	r3, #0
   193e4:	bne	19454 <__assert_fail@plt+0x85e8>
   193e8:	smull	r0, r1, r4, lr
   193ec:	cmp	r1, r0, asr #31
   193f0:	mov	r5, r0
   193f4:	bne	19454 <__assert_fail@plt+0x85e8>
   193f8:	mov	r1, r5
   193fc:	mov	r0, r6
   19400:	bl	19718 <__assert_fail@plt+0x88ac>
   19404:	cmp	r0, #0
   19408:	beq	19438 <__assert_fail@plt+0x85cc>
   1940c:	ldr	r8, [sp, #16]
   19410:	str	r4, [r7]
   19414:	ldrd	r4, [sp]
   19418:	ldrd	r6, [sp, #8]
   1941c:	add	sp, sp, #20
   19420:	pop	{pc}		; (ldr pc, [sp], #4)
   19424:	mov	r0, #64	; 0x40
   19428:	sdiv	r4, r0, lr
   1942c:	mls	r5, lr, r4, r0
   19430:	sub	r5, r0, r5
   19434:	b	193b8 <__assert_fail@plt+0x854c>
   19438:	adds	r5, r5, #0
   1943c:	movne	r5, #1
   19440:	cmp	r6, #0
   19444:	movne	r6, r5
   19448:	moveq	r6, #1
   1944c:	cmp	r6, #0
   19450:	beq	1940c <__assert_fail@plt+0x85a0>
   19454:	bl	19624 <__assert_fail@plt+0x87b8>
   19458:	mvn	r0, #-2147483648	; 0x80000000
   1945c:	b	19428 <__assert_fail@plt+0x85bc>
   19460:	mov	r1, #1
   19464:	str	r4, [sp, #-8]!
   19468:	str	lr, [sp, #4]
   1946c:	bl	19668 <__assert_fail@plt+0x87fc>
   19470:	cmp	r0, #0
   19474:	beq	19484 <__assert_fail@plt+0x8618>
   19478:	ldr	r4, [sp]
   1947c:	add	sp, sp, #4
   19480:	pop	{pc}		; (ldr pc, [sp], #4)
   19484:	bl	19624 <__assert_fail@plt+0x87b8>
   19488:	mov	r1, #1
   1948c:	str	r4, [sp, #-8]!
   19490:	str	lr, [sp, #4]
   19494:	bl	19668 <__assert_fail@plt+0x87fc>
   19498:	cmp	r0, #0
   1949c:	beq	194ac <__assert_fail@plt+0x8640>
   194a0:	ldr	r4, [sp]
   194a4:	add	sp, sp, #4
   194a8:	pop	{pc}		; (ldr pc, [sp], #4)
   194ac:	bl	19624 <__assert_fail@plt+0x87b8>
   194b0:	str	r4, [sp, #-8]!
   194b4:	str	lr, [sp, #4]
   194b8:	bl	19668 <__assert_fail@plt+0x87fc>
   194bc:	cmp	r0, #0
   194c0:	beq	194d0 <__assert_fail@plt+0x8664>
   194c4:	ldr	r4, [sp]
   194c8:	add	sp, sp, #4
   194cc:	pop	{pc}		; (ldr pc, [sp], #4)
   194d0:	bl	19624 <__assert_fail@plt+0x87b8>
   194d4:	str	r4, [sp, #-8]!
   194d8:	str	lr, [sp, #4]
   194dc:	bl	19668 <__assert_fail@plt+0x87fc>
   194e0:	cmp	r0, #0
   194e4:	beq	194f4 <__assert_fail@plt+0x8688>
   194e8:	ldr	r4, [sp]
   194ec:	add	sp, sp, #4
   194f0:	pop	{pc}		; (ldr pc, [sp], #4)
   194f4:	bl	19624 <__assert_fail@plt+0x87b8>
   194f8:	strd	r4, [sp, #-16]!
   194fc:	mov	r4, r1
   19500:	str	r6, [sp, #8]
   19504:	mov	r6, r0
   19508:	mov	r0, r1
   1950c:	str	lr, [sp, #12]
   19510:	bl	196dc <__assert_fail@plt+0x8870>
   19514:	subs	r5, r0, #0
   19518:	beq	1953c <__assert_fail@plt+0x86d0>
   1951c:	mov	r2, r4
   19520:	mov	r1, r6
   19524:	bl	10c74 <memcpy@plt>
   19528:	mov	r0, r5
   1952c:	ldrd	r4, [sp]
   19530:	ldr	r6, [sp, #8]
   19534:	add	sp, sp, #12
   19538:	pop	{pc}		; (ldr pc, [sp], #4)
   1953c:	bl	19624 <__assert_fail@plt+0x87b8>
   19540:	strd	r4, [sp, #-16]!
   19544:	mov	r4, r1
   19548:	str	r6, [sp, #8]
   1954c:	mov	r6, r0
   19550:	mov	r0, r1
   19554:	str	lr, [sp, #12]
   19558:	bl	196dc <__assert_fail@plt+0x8870>
   1955c:	subs	r5, r0, #0
   19560:	beq	19584 <__assert_fail@plt+0x8718>
   19564:	mov	r2, r4
   19568:	mov	r1, r6
   1956c:	bl	10c74 <memcpy@plt>
   19570:	mov	r0, r5
   19574:	ldrd	r4, [sp]
   19578:	ldr	r6, [sp, #8]
   1957c:	add	sp, sp, #12
   19580:	pop	{pc}		; (ldr pc, [sp], #4)
   19584:	bl	19624 <__assert_fail@plt+0x87b8>
   19588:	strd	r4, [sp, #-16]!
   1958c:	mov	r4, r1
   19590:	str	r6, [sp, #8]
   19594:	mov	r6, r0
   19598:	add	r0, r1, #1
   1959c:	str	lr, [sp, #12]
   195a0:	bl	196dc <__assert_fail@plt+0x8870>
   195a4:	subs	r5, r0, #0
   195a8:	beq	195d4 <__assert_fail@plt+0x8768>
   195ac:	mov	r3, #0
   195b0:	mov	r1, r6
   195b4:	mov	r2, r4
   195b8:	strb	r3, [r5, r4]
   195bc:	bl	10c74 <memcpy@plt>
   195c0:	mov	r0, r5
   195c4:	ldrd	r4, [sp]
   195c8:	ldr	r6, [sp, #8]
   195cc:	add	sp, sp, #12
   195d0:	pop	{pc}		; (ldr pc, [sp], #4)
   195d4:	bl	19624 <__assert_fail@plt+0x87b8>
   195d8:	strd	r4, [sp, #-16]!
   195dc:	str	r6, [sp, #8]
   195e0:	mov	r6, r0
   195e4:	str	lr, [sp, #12]
   195e8:	bl	10da0 <strlen@plt>
   195ec:	add	r4, r0, #1
   195f0:	mov	r0, r4
   195f4:	bl	196dc <__assert_fail@plt+0x8870>
   195f8:	subs	r5, r0, #0
   195fc:	beq	19620 <__assert_fail@plt+0x87b4>
   19600:	mov	r2, r4
   19604:	mov	r1, r6
   19608:	bl	10c74 <memcpy@plt>
   1960c:	mov	r0, r5
   19610:	ldrd	r4, [sp]
   19614:	ldr	r6, [sp, #8]
   19618:	add	sp, sp, #12
   1961c:	pop	{pc}		; (ldr pc, [sp], #4)
   19620:	bl	19624 <__assert_fail@plt+0x87b8>
   19624:	movw	r3, #45284	; 0xb0e4
   19628:	movt	r3, #2
   1962c:	str	r4, [sp, #-8]!
   19630:	ldr	r4, [r3]
   19634:	mov	r2, #5
   19638:	movw	r1, #41784	; 0xa338
   1963c:	movt	r1, #1
   19640:	mov	r0, #0
   19644:	str	lr, [sp, #4]
   19648:	bl	10ca4 <dcgettext@plt>
   1964c:	mov	r3, r0
   19650:	movw	r2, #40620	; 0x9eac
   19654:	movt	r2, #1
   19658:	mov	r1, #0
   1965c:	mov	r0, r4
   19660:	bl	10d1c <error@plt>
   19664:	bl	10e54 <abort@plt>
   19668:	cmp	r1, #0
   1966c:	cmpne	r0, #0
   19670:	beq	196bc <__assert_fail@plt+0x8850>
   19674:	strd	r4, [sp, #-16]!
   19678:	umull	r4, r5, r0, r1
   1967c:	str	r6, [sp, #8]
   19680:	str	lr, [sp, #12]
   19684:	adds	r3, r5, #0
   19688:	movne	r3, #1
   1968c:	cmp	r4, #0
   19690:	blt	1969c <__assert_fail@plt+0x8830>
   19694:	cmp	r3, #0
   19698:	beq	196c8 <__assert_fail@plt+0x885c>
   1969c:	bl	10dac <__errno_location@plt>
   196a0:	mov	r3, #12
   196a4:	ldrd	r4, [sp]
   196a8:	ldr	r6, [sp, #8]
   196ac:	add	sp, sp, #12
   196b0:	str	r3, [r0]
   196b4:	mov	r0, #0
   196b8:	pop	{pc}		; (ldr pc, [sp], #4)
   196bc:	mov	r1, #1
   196c0:	mov	r0, r1
   196c4:	b	10c20 <calloc@plt>
   196c8:	ldrd	r4, [sp]
   196cc:	ldr	r6, [sp, #8]
   196d0:	ldr	lr, [sp, #12]
   196d4:	add	sp, sp, #16
   196d8:	b	10c20 <calloc@plt>
   196dc:	cmp	r0, #0
   196e0:	beq	196ec <__assert_fail@plt+0x8880>
   196e4:	blt	196f4 <__assert_fail@plt+0x8888>
   196e8:	b	10d40 <malloc@plt>
   196ec:	mov	r0, #1
   196f0:	b	10d40 <malloc@plt>
   196f4:	str	r4, [sp, #-8]!
   196f8:	str	lr, [sp, #4]
   196fc:	bl	10dac <__errno_location@plt>
   19700:	mov	r3, #12
   19704:	ldr	r4, [sp]
   19708:	add	sp, sp, #4
   1970c:	str	r3, [r0]
   19710:	mov	r0, #0
   19714:	pop	{pc}		; (ldr pc, [sp], #4)
   19718:	cmp	r0, #0
   1971c:	beq	19744 <__assert_fail@plt+0x88d8>
   19720:	cmp	r1, #0
   19724:	str	r4, [sp, #-8]!
   19728:	str	lr, [sp, #4]
   1972c:	beq	1974c <__assert_fail@plt+0x88e0>
   19730:	blt	19760 <__assert_fail@plt+0x88f4>
   19734:	ldr	r4, [sp]
   19738:	ldr	lr, [sp, #4]
   1973c:	add	sp, sp, #8
   19740:	b	10cbc <realloc@plt>
   19744:	mov	r0, r1
   19748:	b	196dc <__assert_fail@plt+0x8870>
   1974c:	bl	145e4 <__assert_fail@plt+0x3778>
   19750:	ldr	r4, [sp]
   19754:	add	sp, sp, #4
   19758:	mov	r0, #0
   1975c:	pop	{pc}		; (ldr pc, [sp], #4)
   19760:	bl	10dac <__errno_location@plt>
   19764:	mov	r3, #12
   19768:	str	r3, [r0]
   1976c:	b	19750 <__assert_fail@plt+0x88e4>
   19770:	strd	r4, [sp, #-16]!
   19774:	mov	r4, r0
   19778:	str	r6, [sp, #8]
   1977c:	str	lr, [sp, #12]
   19780:	bl	10d04 <__fpending@plt>
   19784:	ldr	r5, [r4]
   19788:	mov	r6, r0
   1978c:	mov	r0, r4
   19790:	bl	144d0 <__assert_fail@plt+0x3664>
   19794:	mov	r4, r0
   19798:	and	r5, r5, #32
   1979c:	cmp	r5, #0
   197a0:	bne	197d8 <__assert_fail@plt+0x896c>
   197a4:	cmp	r0, #0
   197a8:	beq	197c4 <__assert_fail@plt+0x8958>
   197ac:	cmp	r6, #0
   197b0:	bne	197f0 <__assert_fail@plt+0x8984>
   197b4:	bl	10dac <__errno_location@plt>
   197b8:	ldr	r4, [r0]
   197bc:	subs	r4, r4, #9
   197c0:	mvnne	r4, #0
   197c4:	mov	r0, r4
   197c8:	ldrd	r4, [sp]
   197cc:	ldr	r6, [sp, #8]
   197d0:	add	sp, sp, #12
   197d4:	pop	{pc}		; (ldr pc, [sp], #4)
   197d8:	cmp	r0, #0
   197dc:	bne	197f0 <__assert_fail@plt+0x8984>
   197e0:	bl	10dac <__errno_location@plt>
   197e4:	str	r4, [r0]
   197e8:	mvn	r4, #0
   197ec:	b	197c4 <__assert_fail@plt+0x8958>
   197f0:	mvn	r4, #0
   197f4:	b	197c4 <__assert_fail@plt+0x8958>
   197f8:	mov	r0, #14
   197fc:	str	r4, [sp, #-8]!
   19800:	str	lr, [sp, #4]
   19804:	bl	10e30 <nl_langinfo@plt>
   19808:	cmp	r0, #0
   1980c:	beq	19830 <__assert_fail@plt+0x89c4>
   19810:	ldrb	r2, [r0]
   19814:	movw	r3, #41804	; 0xa34c
   19818:	movt	r3, #1
   1981c:	ldr	r4, [sp]
   19820:	add	sp, sp, #4
   19824:	cmp	r2, #0
   19828:	moveq	r0, r3
   1982c:	pop	{pc}		; (ldr pc, [sp], #4)
   19830:	ldr	r4, [sp]
   19834:	add	sp, sp, #4
   19838:	movw	r0, #41804	; 0xa34c
   1983c:	movt	r0, #1
   19840:	pop	{pc}		; (ldr pc, [sp], #4)
   19844:	strd	r4, [sp, #-20]!	; 0xffffffec
   19848:	mov	r5, r2
   1984c:	strd	r6, [sp, #8]
   19850:	subs	r6, r0, #0
   19854:	mov	r7, r1
   19858:	str	lr, [sp, #16]
   1985c:	sub	sp, sp, #12
   19860:	addeq	r6, sp, #4
   19864:	mov	r0, r6
   19868:	bl	10d10 <mbrtowc@plt>
   1986c:	cmp	r5, #0
   19870:	cmnne	r0, #3
   19874:	mov	r4, r0
   19878:	bhi	19894 <__assert_fail@plt+0x8a28>
   1987c:	mov	r0, r4
   19880:	add	sp, sp, #12
   19884:	ldrd	r4, [sp]
   19888:	ldrd	r6, [sp, #8]
   1988c:	add	sp, sp, #16
   19890:	pop	{pc}		; (ldr pc, [sp], #4)
   19894:	mov	r0, #0
   19898:	bl	198ec <__assert_fail@plt+0x8a80>
   1989c:	cmp	r0, #0
   198a0:	bne	1987c <__assert_fail@plt+0x8a10>
   198a4:	ldrb	r3, [r7]
   198a8:	mov	r4, #1
   198ac:	str	r3, [r6]
   198b0:	b	1987c <__assert_fail@plt+0x8a10>
   198b4:	umull	r2, r3, r1, r2
   198b8:	cmp	r3, #0
   198bc:	bne	198c8 <__assert_fail@plt+0x8a5c>
   198c0:	mov	r1, r2
   198c4:	b	19718 <__assert_fail@plt+0x88ac>
   198c8:	str	r4, [sp, #-8]!
   198cc:	str	lr, [sp, #4]
   198d0:	bl	10dac <__errno_location@plt>
   198d4:	mov	r3, #12
   198d8:	ldr	r4, [sp]
   198dc:	add	sp, sp, #4
   198e0:	str	r3, [r0]
   198e4:	mov	r0, #0
   198e8:	pop	{pc}		; (ldr pc, [sp], #4)
   198ec:	push	{lr}		; (str lr, [sp, #-4]!)
   198f0:	sub	sp, sp, #268	; 0x10c
   198f4:	movw	r2, #257	; 0x101
   198f8:	add	r1, sp, #4
   198fc:	bl	19944 <__assert_fail@plt+0x8ad8>
   19900:	cmp	r0, #0
   19904:	movne	r0, #0
   19908:	bne	1993c <__assert_fail@plt+0x8ad0>
   1990c:	movw	r1, #41812	; 0xa354
   19910:	movt	r1, #1
   19914:	add	r0, sp, #4
   19918:	bl	10c38 <strcmp@plt>
   1991c:	cmp	r0, #0
   19920:	beq	1993c <__assert_fail@plt+0x8ad0>
   19924:	add	r0, sp, #4
   19928:	movw	r1, #41816	; 0xa358
   1992c:	movt	r1, #1
   19930:	bl	10c38 <strcmp@plt>
   19934:	adds	r0, r0, #0
   19938:	movne	r0, #1
   1993c:	add	sp, sp, #268	; 0x10c
   19940:	pop	{pc}		; (ldr pc, [sp], #4)
   19944:	strd	r4, [sp, #-16]!
   19948:	mov	r5, r1
   1994c:	mov	r1, #0
   19950:	mov	r4, r2
   19954:	str	r6, [sp, #8]
   19958:	str	lr, [sp, #12]
   1995c:	bl	10e18 <setlocale@plt>
   19960:	subs	r6, r0, #0
   19964:	beq	199e4 <__assert_fail@plt+0x8b78>
   19968:	bl	10da0 <strlen@plt>
   1996c:	cmp	r4, r0
   19970:	bhi	19990 <__assert_fail@plt+0x8b24>
   19974:	cmp	r4, #0
   19978:	moveq	r0, #34	; 0x22
   1997c:	bne	199b4 <__assert_fail@plt+0x8b48>
   19980:	ldrd	r4, [sp]
   19984:	ldr	r6, [sp, #8]
   19988:	add	sp, sp, #12
   1998c:	pop	{pc}		; (ldr pc, [sp], #4)
   19990:	add	r2, r0, #1
   19994:	mov	r1, r6
   19998:	mov	r0, r5
   1999c:	bl	10c74 <memcpy@plt>
   199a0:	ldrd	r4, [sp]
   199a4:	mov	r0, #0
   199a8:	ldr	r6, [sp, #8]
   199ac:	add	sp, sp, #12
   199b0:	pop	{pc}		; (ldr pc, [sp], #4)
   199b4:	sub	r4, r4, #1
   199b8:	mov	r1, r6
   199bc:	mov	r2, r4
   199c0:	mov	r0, r5
   199c4:	bl	10c74 <memcpy@plt>
   199c8:	mov	r3, #0
   199cc:	mov	r0, #34	; 0x22
   199d0:	strb	r3, [r5, r4]
   199d4:	ldrd	r4, [sp]
   199d8:	ldr	r6, [sp, #8]
   199dc:	add	sp, sp, #12
   199e0:	pop	{pc}		; (ldr pc, [sp], #4)
   199e4:	cmp	r4, #0
   199e8:	mov	r0, #22
   199ec:	strbne	r6, [r5]
   199f0:	ldrd	r4, [sp]
   199f4:	ldr	r6, [sp, #8]
   199f8:	add	sp, sp, #12
   199fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19a00:	mov	r1, #0
   19a04:	b	10e18 <setlocale@plt>
   19a08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a0c:	mov	r7, r0
   19a10:	ldr	r6, [pc, #72]	; 19a60 <__assert_fail@plt+0x8bf4>
   19a14:	ldr	r5, [pc, #72]	; 19a64 <__assert_fail@plt+0x8bf8>
   19a18:	add	r6, pc, r6
   19a1c:	add	r5, pc, r5
   19a20:	sub	r6, r6, r5
   19a24:	mov	r8, r1
   19a28:	mov	r9, r2
   19a2c:	bl	10c00 <calloc@plt-0x20>
   19a30:	asrs	r6, r6, #2
   19a34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a38:	mov	r4, #0
   19a3c:	add	r4, r4, #1
   19a40:	ldr	r3, [r5], #4
   19a44:	mov	r2, r9
   19a48:	mov	r1, r8
   19a4c:	mov	r0, r7
   19a50:	blx	r3
   19a54:	cmp	r6, r4
   19a58:	bne	19a3c <__assert_fail@plt+0x8bd0>
   19a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a60:	strdeq	r1, [r1], -r4
   19a64:	andeq	r1, r1, ip, ror #9
   19a68:	bx	lr
   19a6c:	ldr	r3, [pc, #12]	; 19a80 <__assert_fail@plt+0x8c14>
   19a70:	mov	r1, #0
   19a74:	add	r3, pc, r3
   19a78:	ldr	r2, [r3]
   19a7c:	b	10db8 <__cxa_atexit@plt>
   19a80:	andeq	r1, r1, r0, ror #12

Disassembly of section .fini:

00019a84 <.fini>:
   19a84:	push	{r3, lr}
   19a88:	pop	{r3, pc}
