
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c84 <.init>:
   10c84:	push	{r3, lr}
   10c88:	bl	11420 <__assert_fail@plt+0x518>
   10c8c:	pop	{r3, pc}

Disassembly of section .plt:

00010c90 <calloc@plt-0x14>:
   10c90:	push	{lr}		; (str lr, [sp, #-4]!)
   10c94:	ldr	lr, [pc, #4]	; 10ca0 <calloc@plt-0x4>
   10c98:	add	lr, pc, lr
   10c9c:	ldr	pc, [lr, #8]!
   10ca0:	andeq	r5, r1, r0, ror #6

00010ca4 <calloc@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #864]!	; 0x360

00010cb0 <fputs_unlocked@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #856]!	; 0x358

00010cbc <raise@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #848]!	; 0x350

00010cc8 <strcmp@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #840]!	; 0x348

00010cd4 <posix_fadvise64@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #832]!	; 0x340

00010ce0 <fflush@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #824]!	; 0x338

00010cec <free@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #816]!	; 0x330

00010cf8 <_exit@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #808]!	; 0x328

00010d04 <memcpy@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #800]!	; 0x320

00010d10 <mbsinit@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #792]!	; 0x318

00010d1c <fwrite_unlocked@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #784]!	; 0x310

00010d28 <memcmp@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #776]!	; 0x308

00010d34 <fputc_unlocked@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #768]!	; 0x300

00010d40 <getc_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #760]!	; 0x2f8

00010d4c <dcgettext@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #752]!	; 0x2f0

00010d58 <realloc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #744]!	; 0x2e8

00010d64 <textdomain@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d70 <iswprint@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #728]!	; 0x2d8

00010d7c <lseek64@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #720]!	; 0x2d0

00010d88 <__ctype_get_mb_cur_max@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #712]!	; 0x2c8

00010d94 <__fpending@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #704]!	; 0x2c0

00010da0 <ferror_unlocked@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dac <mbrtowc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #688]!	; 0x2b0

00010db8 <error@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc4 <malloc@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd0 <__libc_start_main@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #664]!	; 0x298

00010ddc <__freading@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #656]!	; 0x290

00010de8 <__gmon_start__@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #648]!	; 0x288

00010df4 <getopt_long@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #640]!	; 0x280

00010e00 <__ctype_b_loc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #632]!	; 0x278

00010e0c <exit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #624]!	; 0x270

00010e18 <strlen@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #616]!	; 0x268

00010e24 <__errno_location@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #608]!	; 0x260

00010e30 <__cxa_atexit@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #600]!	; 0x258

00010e3c <memset@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #592]!	; 0x250

00010e48 <__printf_chk@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #584]!	; 0x248

00010e54 <fileno@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #576]!	; 0x240

00010e60 <__fprintf_chk@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #568]!	; 0x238

00010e6c <fclose@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #560]!	; 0x230

00010e78 <fseeko64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #552]!	; 0x228

00010e84 <setlocale@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #544]!	; 0x220

00010e90 <strrchr@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #536]!	; 0x218

00010e9c <nl_langinfo@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #528]!	; 0x210

00010ea8 <clearerr_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #520]!	; 0x208

00010eb4 <fopen64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #512]!	; 0x200

00010ec0 <bindtextdomain@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ecc <fputs@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed8 <strncmp@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee4 <abort@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef0 <putchar_unlocked@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #472]!	; 0x1d8

00010efc <strspn@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #464]!	; 0x1d0

00010f08 <__assert_fail@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #456]!	; 0x1c8

Disassembly of section .text:

00010f18 <.text>:
   10f18:	push	{r4, lr}
   10f1c:	bl	10e24 <__errno_location@plt>
   10f20:	mov	r3, #12
   10f24:	str	r3, [r0]
   10f28:	mov	r0, #0
   10f2c:	pop	{r4, pc}
   10f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f34:	sub	sp, sp, #28
   10f38:	mov	sl, r0
   10f3c:	mov	r9, #0
   10f40:	mov	r4, #0
   10f44:	mov	r5, #0
   10f48:	mov	r7, r9
   10f4c:	ldr	r0, [r1]
   10f50:	str	r1, [sp, #8]
   10f54:	bl	12320 <__assert_fail@plt+0x1418>
   10f58:	ldr	r1, [pc, #1080]	; 11398 <__assert_fail@plt+0x490>
   10f5c:	mov	r0, #6
   10f60:	bl	10e84 <setlocale@plt>
   10f64:	ldr	r1, [pc, #1072]	; 1139c <__assert_fail@plt+0x494>
   10f68:	ldr	r0, [pc, #1072]	; 113a0 <__assert_fail@plt+0x498>
   10f6c:	bl	10ec0 <bindtextdomain@plt>
   10f70:	ldr	r0, [pc, #1064]	; 113a0 <__assert_fail@plt+0x498>
   10f74:	bl	10d64 <textdomain@plt>
   10f78:	ldr	r0, [pc, #1060]	; 113a4 <__assert_fail@plt+0x49c>
   10f7c:	ldr	fp, [pc, #1060]	; 113a8 <__assert_fail@plt+0x4a0>
   10f80:	bl	145f0 <__assert_fail@plt+0x36e8>
   10f84:	mov	r8, #0
   10f88:	mov	r3, fp
   10f8c:	ldr	r2, [pc, #1048]	; 113ac <__assert_fail@plt+0x4a4>
   10f90:	mov	r0, sl
   10f94:	str	r8, [sp]
   10f98:	ldr	r1, [sp, #8]
   10f9c:	bl	10df4 <getopt_long@plt>
   10fa0:	cmn	r0, #1
   10fa4:	bne	110b8 <__assert_fail@plt+0x1b0>
   10fa8:	cmp	r9, #0
   10fac:	ldrne	r3, [pc, #1020]	; 113b0 <__assert_fail@plt+0x4a8>
   10fb0:	strbne	r8, [r3]
   10fb4:	cmp	r7, #0
   10fb8:	beq	10fc8 <__assert_fail@plt+0xc0>
   10fbc:	mov	r0, r4
   10fc0:	mov	r1, r5
   10fc4:	bl	11800 <__assert_fail@plt+0x8f8>
   10fc8:	bl	11bcc <__assert_fail@plt+0xcc4>
   10fcc:	ldr	r3, [pc, #992]	; 113b4 <__assert_fail@plt+0x4ac>
   10fd0:	ldr	r0, [r3]
   10fd4:	cmp	r0, sl
   10fd8:	ldrlt	r3, [sp, #8]
   10fdc:	movge	r0, #0
   10fe0:	addlt	r0, r3, r0, lsl #2
   10fe4:	bl	11de4 <__assert_fail@plt+0xedc>
   10fe8:	mov	r0, #0
   10fec:	bl	11e0c <__assert_fail@plt+0xf04>
   10ff0:	subs	r3, r0, #0
   10ff4:	str	r3, [sp, #8]
   10ff8:	beq	11350 <__assert_fail@plt+0x448>
   10ffc:	ldr	r3, [pc, #948]	; 113b8 <__assert_fail@plt+0x4b0>
   11000:	ldr	r0, [r3]
   11004:	bl	13e34 <__assert_fail@plt+0x2f2c>
   11008:	mov	sl, r0
   1100c:	mov	r3, #0
   11010:	mov	r6, #1
   11014:	mov	r7, r3
   11018:	mov	r9, r3
   1101c:	mov	r4, #0
   11020:	mov	r5, #0
   11024:	str	r3, [sp, #20]
   11028:	mov	fp, r6
   1102c:	ldr	r0, [sp, #8]
   11030:	bl	10d40 <getc_unlocked@plt>
   11034:	subs	r8, r0, #0
   11038:	bge	11380 <__assert_fail@plt+0x478>
   1103c:	ldr	r0, [sp, #8]
   11040:	bl	11e0c <__assert_fail@plt+0xf04>
   11044:	subs	r3, r0, #0
   11048:	str	r3, [sp, #8]
   1104c:	bne	1102c <__assert_fail@plt+0x124>
   11050:	cmp	fp, #0
   11054:	beq	11348 <__assert_fail@plt+0x440>
   11058:	bl	10e00 <__ctype_b_loc@plt>
   1105c:	ldr	r2, [r0]
   11060:	lsl	r3, r8, #1
   11064:	ldrh	r3, [r2, r3]
   11068:	and	r3, r3, #1
   1106c:	uxtb	r2, r3
   11070:	uxth	fp, r3
   11074:	cmp	fp, #0
   11078:	str	r2, [sp, #12]
   1107c:	beq	112e0 <__assert_fail@plt+0x3d8>
   11080:	add	r3, sp, #19
   11084:	add	r2, sp, #20
   11088:	mov	r0, r4
   1108c:	mov	r1, r5
   11090:	bl	11ce0 <__assert_fail@plt+0xdd8>
   11094:	ldrb	fp, [sp, #19]
   11098:	cmp	fp, #0
   1109c:	bne	112d8 <__assert_fail@plt+0x3d0>
   110a0:	cmp	r5, r1
   110a4:	cmpeq	r4, r0
   110a8:	bls	111f4 <__assert_fail@plt+0x2ec>
   110ac:	mov	r2, #5
   110b0:	ldr	r1, [pc, #772]	; 113bc <__assert_fail@plt+0x4b4>
   110b4:	b	11198 <__assert_fail@plt+0x290>
   110b8:	cmp	r0, #63	; 0x3f
   110bc:	beq	11130 <__assert_fail@plt+0x228>
   110c0:	bgt	11108 <__assert_fail@plt+0x200>
   110c4:	cmn	r0, #2
   110c8:	beq	1116c <__assert_fail@plt+0x264>
   110cc:	cmp	r0, #44	; 0x2c
   110d0:	beq	11150 <__assert_fail@plt+0x248>
   110d4:	cmn	r0, #3
   110d8:	bne	11174 <__assert_fail@plt+0x26c>
   110dc:	ldr	r3, [pc, #732]	; 113c0 <__assert_fail@plt+0x4b8>
   110e0:	ldr	r0, [pc, #732]	; 113c4 <__assert_fail@plt+0x4bc>
   110e4:	ldr	r2, [pc, #732]	; 113c8 <__assert_fail@plt+0x4c0>
   110e8:	stm	sp, {r3, r8}
   110ec:	ldr	r3, [pc, #728]	; 113cc <__assert_fail@plt+0x4c4>
   110f0:	ldr	r1, [pc, #728]	; 113d0 <__assert_fail@plt+0x4c8>
   110f4:	ldr	r0, [r0]
   110f8:	ldr	r3, [r3]
   110fc:	bl	13d6c <__assert_fail@plt+0x2e64>
   11100:	mov	r0, #0
   11104:	bl	10e0c <exit@plt>
   11108:	cmp	r0, #116	; 0x74
   1110c:	mov	r3, #1
   11110:	beq	11138 <__assert_fail@plt+0x230>
   11114:	cmp	r0, #256	; 0x100
   11118:	beq	111ec <__assert_fail@plt+0x2e4>
   1111c:	cmp	r0, #97	; 0x61
   11120:	bne	11174 <__assert_fail@plt+0x26c>
   11124:	ldr	r2, [pc, #644]	; 113b0 <__assert_fail@plt+0x4a8>
   11128:	strb	r3, [r2]
   1112c:	b	10f84 <__assert_fail@plt+0x7c>
   11130:	mov	r0, #1
   11134:	bl	114d4 <__assert_fail@plt+0x5cc>
   11138:	ldr	r2, [pc, #624]	; 113b0 <__assert_fail@plt+0x4a8>
   1113c:	strb	r3, [r2]
   11140:	ldr	r3, [pc, #652]	; 113d4 <__assert_fail@plt+0x4cc>
   11144:	ldr	r0, [r3]
   11148:	bl	118e0 <__assert_fail@plt+0x9d8>
   1114c:	b	10f84 <__assert_fail@plt+0x7c>
   11150:	cmp	r7, #0
   11154:	beq	10f84 <__assert_fail@plt+0x7c>
   11158:	mov	r0, r4
   1115c:	mov	r1, r5
   11160:	bl	11800 <__assert_fail@plt+0x8f8>
   11164:	mov	r7, #0
   11168:	b	10f84 <__assert_fail@plt+0x7c>
   1116c:	mov	r0, #0
   11170:	b	11134 <__assert_fail@plt+0x22c>
   11174:	cmp	r7, #0
   11178:	beq	111b0 <__assert_fail@plt+0x2a8>
   1117c:	add	r3, pc, #524	; 0x20c
   11180:	ldrd	r2, [r3]
   11184:	cmp	r5, r3
   11188:	cmpeq	r4, r2
   1118c:	bls	111b8 <__assert_fail@plt+0x2b0>
   11190:	ldr	r1, [pc, #576]	; 113d8 <__assert_fail@plt+0x4d0>
   11194:	mov	r2, #5
   11198:	mov	r0, #0
   1119c:	bl	10d4c <dcgettext@plt>
   111a0:	mov	r2, r0
   111a4:	mov	r1, #0
   111a8:	mov	r0, #1
   111ac:	bl	10db8 <error@plt>
   111b0:	mov	r4, #0
   111b4:	mov	r5, #0
   111b8:	mov	r1, #10
   111bc:	sub	r0, r0, #48	; 0x30
   111c0:	umull	r2, r3, r4, r1
   111c4:	mla	r3, r1, r5, r3
   111c8:	adds	r6, r2, r0
   111cc:	adc	r7, r3, r0, asr #31
   111d0:	cmp	r7, r5
   111d4:	cmpeq	r6, r4
   111d8:	bcc	11190 <__assert_fail@plt+0x288>
   111dc:	mov	r5, r7
   111e0:	mov	r4, r6
   111e4:	mov	r7, #1
   111e8:	b	10f84 <__assert_fail@plt+0x7c>
   111ec:	mov	r9, r3
   111f0:	b	10f88 <__assert_fail@plt+0x80>
   111f4:	cmp	r8, #9
   111f8:	bne	1127c <__assert_fail@plt+0x374>
   111fc:	cmp	r7, #0
   11200:	strbne	r8, [sl]
   11204:	mov	r7, r9
   11208:	mov	r4, r0
   1120c:	mov	r5, r1
   11210:	mov	fp, #1
   11214:	mov	r8, #9
   11218:	cmp	r7, #0
   1121c:	beq	1132c <__assert_fail@plt+0x424>
   11220:	cmp	r7, #1
   11224:	movls	r9, #0
   11228:	andhi	r9, r9, #1
   1122c:	mov	r2, r7
   11230:	cmp	r9, #0
   11234:	mov	r1, #1
   11238:	movne	r3, #9
   1123c:	mov	r0, sl
   11240:	strbne	r3, [sl]
   11244:	ldr	r3, [pc, #376]	; 113c4 <__assert_fail@plt+0x4bc>
   11248:	ldr	r3, [r3]
   1124c:	bl	10d1c <fwrite_unlocked@plt>
   11250:	cmp	r7, r0
   11254:	beq	11328 <__assert_fail@plt+0x420>
   11258:	bl	10e24 <__errno_location@plt>
   1125c:	ldr	r4, [r0]
   11260:	mov	r2, #5
   11264:	mov	r0, #0
   11268:	ldr	r1, [pc, #364]	; 113dc <__assert_fail@plt+0x4d4>
   1126c:	bl	10d4c <dcgettext@plt>
   11270:	mov	r2, r0
   11274:	mov	r1, r4
   11278:	b	111a8 <__assert_fail@plt+0x2a0>
   1127c:	adds	r4, r4, #1
   11280:	eor	r6, r6, #1
   11284:	adc	r5, r5, #0
   11288:	cmp	r1, r5
   1128c:	cmpeq	r0, r4
   11290:	moveq	fp, r6
   11294:	orrne	fp, r6, #1
   11298:	cmp	fp, #0
   1129c:	beq	112c4 <__assert_fail@plt+0x3bc>
   112a0:	cmp	r1, r5
   112a4:	mov	r6, fp
   112a8:	strb	r8, [sl, r7]
   112ac:	cmpeq	r0, r4
   112b0:	add	r7, r7, #1
   112b4:	moveq	r9, fp
   112b8:	cmp	r8, #10
   112bc:	bne	1102c <__assert_fail@plt+0x124>
   112c0:	b	1100c <__assert_fail@plt+0x104>
   112c4:	mov	r3, #9
   112c8:	mov	r0, r4
   112cc:	mov	r1, r5
   112d0:	strb	r3, [sl]
   112d4:	b	11204 <__assert_fail@plt+0x2fc>
   112d8:	mov	fp, #0
   112dc:	b	11218 <__assert_fail@plt+0x310>
   112e0:	cmp	r8, #8
   112e4:	bne	11314 <__assert_fail@plt+0x40c>
   112e8:	orrs	r3, r4, r5
   112ec:	ldr	r3, [sp, #20]
   112f0:	movne	r2, #1
   112f4:	moveq	r2, #0
   112f8:	subs	r4, r4, r2
   112fc:	sbc	r5, r5, fp
   11300:	cmp	r3, #0
   11304:	subne	r3, r3, #1
   11308:	str	r3, [sp, #20]
   1130c:	mov	fp, #1
   11310:	b	11218 <__assert_fail@plt+0x310>
   11314:	adds	r4, r4, #1
   11318:	adc	r5, r5, #0
   1131c:	orrs	r3, r4, r5
   11320:	bne	1130c <__assert_fail@plt+0x404>
   11324:	b	110ac <__assert_fail@plt+0x1a4>
   11328:	mov	r9, #0
   1132c:	ldr	r3, [pc, #124]	; 113b0 <__assert_fail@plt+0x4a8>
   11330:	cmp	r8, #0
   11334:	ldr	r2, [sp, #12]
   11338:	ldrb	r3, [r3]
   1133c:	orr	r3, r2, r3
   11340:	and	fp, fp, r3
   11344:	bge	11364 <__assert_fail@plt+0x45c>
   11348:	mov	r0, sl
   1134c:	bl	12238 <__assert_fail@plt+0x1330>
   11350:	bl	11f88 <__assert_fail@plt+0x1080>
   11354:	ldr	r3, [pc, #132]	; 113e0 <__assert_fail@plt+0x4d8>
   11358:	ldr	r0, [r3]
   1135c:	add	sp, sp, #28
   11360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11364:	ldr	r6, [sp, #12]
   11368:	mov	r7, #0
   1136c:	mov	r0, r8
   11370:	bl	10ef0 <putchar_unlocked@plt>
   11374:	cmp	r0, #0
   11378:	bge	112b8 <__assert_fail@plt+0x3b0>
   1137c:	b	11258 <__assert_fail@plt+0x350>
   11380:	cmp	fp, #0
   11384:	beq	1136c <__assert_fail@plt+0x464>
   11388:	b	11058 <__assert_fail@plt+0x150>
   1138c:	nop	{0}
   11390:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11394:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11398:	andeq	r4, r1, r7, ror #19
   1139c:	andeq	r4, r1, r8, ror #19
   113a0:	andeq	r4, r1, r5, asr #18
   113a4:	andeq	r2, r1, r8, lsr r0
   113a8:	andeq	r4, r1, ip, asr #12
   113ac:	andeq	r4, r1, ip, lsr #20
   113b0:	muleq	r2, r8, r1
   113b4:	andeq	r6, r2, r0, asr #2
   113b8:	andeq	r6, r2, ip, ror r1
   113bc:	andeq	r4, r1, fp, lsr sl
   113c0:	andeq	r4, r1, r0, lsl #20
   113c4:	andeq	r6, r2, r4, asr r1
   113c8:	andeq	r4, r1, r1, asr #18
   113cc:	strdeq	r6, [r2], -r0
   113d0:	andeq	r4, r1, ip, lsr #13
   113d4:	andeq	r6, r2, r8, asr r1
   113d8:	andeq	r4, r1, r0, lsl sl
   113dc:	andeq	r4, r1, r2, asr sl
   113e0:	muleq	r2, r4, r1
   113e4:	mov	fp, #0
   113e8:	mov	lr, #0
   113ec:	pop	{r1}		; (ldr r1, [sp], #4)
   113f0:	mov	r2, sp
   113f4:	push	{r2}		; (str r2, [sp, #-4]!)
   113f8:	push	{r0}		; (str r0, [sp, #-4]!)
   113fc:	ldr	ip, [pc, #16]	; 11414 <__assert_fail@plt+0x50c>
   11400:	push	{ip}		; (str ip, [sp, #-4]!)
   11404:	ldr	r0, [pc, #12]	; 11418 <__assert_fail@plt+0x510>
   11408:	ldr	r3, [pc, #12]	; 1141c <__assert_fail@plt+0x514>
   1140c:	bl	10dd0 <__libc_start_main@plt>
   11410:	bl	10ee4 <abort@plt>
   11414:	andeq	r4, r1, ip, ror #11
   11418:	andeq	r0, r1, r0, lsr pc
   1141c:	andeq	r4, r1, ip, lsl #11
   11420:	ldr	r3, [pc, #20]	; 1143c <__assert_fail@plt+0x534>
   11424:	ldr	r2, [pc, #20]	; 11440 <__assert_fail@plt+0x538>
   11428:	add	r3, pc, r3
   1142c:	ldr	r2, [r3, r2]
   11430:	cmp	r2, #0
   11434:	bxeq	lr
   11438:	b	10de8 <__gmon_start__@plt>
   1143c:	ldrdeq	r4, [r1], -r0
   11440:	ldrdeq	r0, [r0], -ip
   11444:	ldr	r0, [pc, #24]	; 11464 <__assert_fail@plt+0x55c>
   11448:	ldr	r3, [pc, #24]	; 11468 <__assert_fail@plt+0x560>
   1144c:	cmp	r3, r0
   11450:	bxeq	lr
   11454:	ldr	r3, [pc, #16]	; 1146c <__assert_fail@plt+0x564>
   11458:	cmp	r3, #0
   1145c:	bxeq	lr
   11460:	bx	r3
   11464:	andeq	r6, r2, r8, lsr r1
   11468:	andeq	r6, r2, r8, lsr r1
   1146c:	andeq	r0, r0, r0
   11470:	ldr	r0, [pc, #36]	; 1149c <__assert_fail@plt+0x594>
   11474:	ldr	r1, [pc, #36]	; 114a0 <__assert_fail@plt+0x598>
   11478:	sub	r1, r1, r0
   1147c:	asr	r1, r1, #2
   11480:	add	r1, r1, r1, lsr #31
   11484:	asrs	r1, r1, #1
   11488:	bxeq	lr
   1148c:	ldr	r3, [pc, #16]	; 114a4 <__assert_fail@plt+0x59c>
   11490:	cmp	r3, #0
   11494:	bxeq	lr
   11498:	bx	r3
   1149c:	andeq	r6, r2, r8, lsr r1
   114a0:	andeq	r6, r2, r8, lsr r1
   114a4:	andeq	r0, r0, r0
   114a8:	push	{r4, lr}
   114ac:	ldr	r4, [pc, #24]	; 114cc <__assert_fail@plt+0x5c4>
   114b0:	ldrb	r3, [r4]
   114b4:	cmp	r3, #0
   114b8:	popne	{r4, pc}
   114bc:	bl	11444 <__assert_fail@plt+0x53c>
   114c0:	mov	r3, #1
   114c4:	strb	r3, [r4]
   114c8:	pop	{r4, pc}
   114cc:	andeq	r6, r2, ip, asr r1
   114d0:	b	11470 <__assert_fail@plt+0x568>
   114d4:	subs	r5, r0, #0
   114d8:	push	{r7, lr}
   114dc:	sub	sp, sp, #56	; 0x38
   114e0:	ldr	r4, [pc, #524]	; 116f4 <__assert_fail@plt+0x7ec>
   114e4:	beq	1151c <__assert_fail@plt+0x614>
   114e8:	mov	r2, #5
   114ec:	mov	r0, #0
   114f0:	ldr	r3, [pc, #512]	; 116f8 <__assert_fail@plt+0x7f0>
   114f4:	ldr	r1, [pc, #512]	; 116fc <__assert_fail@plt+0x7f4>
   114f8:	ldr	r6, [r3]
   114fc:	bl	10d4c <dcgettext@plt>
   11500:	mov	r2, r0
   11504:	mov	r1, #1
   11508:	ldr	r3, [r4]
   1150c:	mov	r0, r6
   11510:	bl	10e60 <__fprintf_chk@plt>
   11514:	mov	r0, r5
   11518:	bl	10e0c <exit@plt>
   1151c:	mov	r2, #5
   11520:	ldr	r1, [pc, #472]	; 11700 <__assert_fail@plt+0x7f8>
   11524:	mov	r6, sp
   11528:	bl	10d4c <dcgettext@plt>
   1152c:	ldr	r2, [r4]
   11530:	mov	r1, r0
   11534:	mov	r0, #1
   11538:	bl	10e48 <__printf_chk@plt>
   1153c:	ldr	r4, [pc, #448]	; 11704 <__assert_fail@plt+0x7fc>
   11540:	mov	r2, #5
   11544:	mov	r0, r5
   11548:	ldr	r1, [pc, #440]	; 11708 <__assert_fail@plt+0x800>
   1154c:	bl	10d4c <dcgettext@plt>
   11550:	ldr	r7, [pc, #436]	; 1170c <__assert_fail@plt+0x804>
   11554:	ldr	r1, [r4]
   11558:	bl	10cb0 <fputs_unlocked@plt>
   1155c:	mov	r2, #5
   11560:	ldr	r1, [pc, #424]	; 11710 <__assert_fail@plt+0x808>
   11564:	mov	r0, r5
   11568:	bl	10d4c <dcgettext@plt>
   1156c:	ldr	r1, [r4]
   11570:	bl	10cb0 <fputs_unlocked@plt>
   11574:	mov	r2, #5
   11578:	ldr	r1, [pc, #404]	; 11714 <__assert_fail@plt+0x80c>
   1157c:	mov	r0, r5
   11580:	bl	10d4c <dcgettext@plt>
   11584:	ldr	r1, [r4]
   11588:	bl	10cb0 <fputs_unlocked@plt>
   1158c:	mov	r2, #5
   11590:	ldr	r1, [pc, #384]	; 11718 <__assert_fail@plt+0x810>
   11594:	mov	r0, r5
   11598:	bl	10d4c <dcgettext@plt>
   1159c:	ldr	r1, [r4]
   115a0:	bl	10cb0 <fputs_unlocked@plt>
   115a4:	bl	11fd0 <__assert_fail@plt+0x10c8>
   115a8:	mov	r2, #5
   115ac:	ldr	r1, [pc, #360]	; 1171c <__assert_fail@plt+0x814>
   115b0:	mov	r0, r5
   115b4:	bl	10d4c <dcgettext@plt>
   115b8:	ldr	r1, [r4]
   115bc:	bl	10cb0 <fputs_unlocked@plt>
   115c0:	mov	r2, #5
   115c4:	ldr	r1, [pc, #340]	; 11720 <__assert_fail@plt+0x818>
   115c8:	mov	r0, r5
   115cc:	bl	10d4c <dcgettext@plt>
   115d0:	ldr	r1, [r4]
   115d4:	bl	10cb0 <fputs_unlocked@plt>
   115d8:	ldr	lr, [pc, #324]	; 11724 <__assert_fail@plt+0x81c>
   115dc:	mov	ip, sp
   115e0:	ldm	lr!, {r0, r1, r2, r3}
   115e4:	stmia	ip!, {r0, r1, r2, r3}
   115e8:	ldm	lr!, {r0, r1, r2, r3}
   115ec:	stmia	ip!, {r0, r1, r2, r3}
   115f0:	ldm	lr!, {r0, r1, r2, r3}
   115f4:	stmia	ip!, {r0, r1, r2, r3}
   115f8:	ldm	lr, {r0, r1}
   115fc:	stm	ip, {r0, r1}
   11600:	ldr	r1, [r6]
   11604:	cmp	r1, #0
   11608:	bne	116ac <__assert_fail@plt+0x7a4>
   1160c:	ldr	r6, [r6, #4]
   11610:	mov	r2, #5
   11614:	mov	r0, #0
   11618:	ldr	r7, [pc, #236]	; 1170c <__assert_fail@plt+0x804>
   1161c:	ldr	r1, [pc, #260]	; 11728 <__assert_fail@plt+0x820>
   11620:	cmp	r6, #0
   11624:	moveq	r6, r7
   11628:	bl	10d4c <dcgettext@plt>
   1162c:	mov	r1, r0
   11630:	ldr	r3, [pc, #244]	; 1172c <__assert_fail@plt+0x824>
   11634:	mov	r0, #1
   11638:	ldr	r2, [pc, #240]	; 11730 <__assert_fail@plt+0x828>
   1163c:	bl	10e48 <__printf_chk@plt>
   11640:	mov	r1, #0
   11644:	mov	r0, #5
   11648:	bl	10e84 <setlocale@plt>
   1164c:	cmp	r0, #0
   11650:	bne	116c4 <__assert_fail@plt+0x7bc>
   11654:	mov	r2, #5
   11658:	ldr	r1, [pc, #212]	; 11734 <__assert_fail@plt+0x82c>
   1165c:	mov	r0, #0
   11660:	bl	10d4c <dcgettext@plt>
   11664:	mov	r1, r0
   11668:	ldr	r3, [pc, #156]	; 1170c <__assert_fail@plt+0x804>
   1166c:	mov	r0, #1
   11670:	ldr	r2, [pc, #180]	; 1172c <__assert_fail@plt+0x824>
   11674:	bl	10e48 <__printf_chk@plt>
   11678:	mov	r2, #5
   1167c:	ldr	r1, [pc, #180]	; 11738 <__assert_fail@plt+0x830>
   11680:	mov	r0, #0
   11684:	bl	10d4c <dcgettext@plt>
   11688:	ldr	r2, [pc, #172]	; 1173c <__assert_fail@plt+0x834>
   1168c:	cmp	r6, r7
   11690:	mov	r1, r0
   11694:	mov	r0, #1
   11698:	ldr	r3, [pc, #160]	; 11740 <__assert_fail@plt+0x838>
   1169c:	moveq	r3, r2
   116a0:	mov	r2, r6
   116a4:	bl	10e48 <__printf_chk@plt>
   116a8:	b	11514 <__assert_fail@plt+0x60c>
   116ac:	mov	r0, r7
   116b0:	bl	10cc8 <strcmp@plt>
   116b4:	cmp	r0, #0
   116b8:	beq	1160c <__assert_fail@plt+0x704>
   116bc:	add	r6, r6, #8
   116c0:	b	11600 <__assert_fail@plt+0x6f8>
   116c4:	mov	r2, #3
   116c8:	ldr	r1, [pc, #116]	; 11744 <__assert_fail@plt+0x83c>
   116cc:	bl	10ed8 <strncmp@plt>
   116d0:	cmp	r0, #0
   116d4:	beq	11654 <__assert_fail@plt+0x74c>
   116d8:	mov	r2, #5
   116dc:	ldr	r1, [pc, #100]	; 11748 <__assert_fail@plt+0x840>
   116e0:	mov	r0, #0
   116e4:	bl	10d4c <dcgettext@plt>
   116e8:	ldr	r1, [r4]
   116ec:	bl	10cb0 <fputs_unlocked@plt>
   116f0:	b	11654 <__assert_fail@plt+0x74c>
   116f4:	andeq	r6, r2, r4, lsr #3
   116f8:	andeq	r6, r2, r8, asr #2
   116fc:			; <UNDEFINED> instruction: 0x000146b5
   11700:	ldrdeq	r4, [r1], -ip
   11704:	andeq	r6, r2, r4, asr r1
   11708:	strdeq	r4, [r1], -sp
   1170c:	andeq	r4, r1, ip, lsr #13
   11710:	andeq	r4, r1, pc, lsr r7
   11714:	andeq	r4, r1, r7, ror r7
   11718:	andeq	r4, r1, r2, asr #15
   1171c:	muleq	r1, pc, r8	; <UNPREDICTABLE>
   11720:	andeq	r4, r1, ip, asr #17
   11724:	andeq	r4, r1, r4, lsl r6
   11728:	andeq	r4, r1, r2, lsl #18
   1172c:	andeq	r4, r1, r9, lsl r9
   11730:	andeq	r4, r1, r1, asr #18
   11734:	muleq	r1, sl, r9
   11738:			; <UNDEFINED> instruction: 0x000149b5
   1173c:	andeq	r4, r1, sl, ror sl
   11740:	andeq	r4, r1, r7, ror #19
   11744:	andeq	r4, r1, pc, asr #18
   11748:	andeq	r4, r1, r3, asr r9
   1174c:	andeq	r0, r0, r0
   11750:	ldr	r3, [pc, #72]	; 117a0 <__assert_fail@plt+0x898>
   11754:	push	{r4, r6, r7, lr}
   11758:	mov	r6, r0
   1175c:	mov	r7, r1
   11760:	ldrd	r0, [r3]
   11764:	mov	r4, r3
   11768:	orrs	r2, r0, r1
   1176c:	moveq	r0, #1
   11770:	beq	11798 <__assert_fail@plt+0x890>
   11774:	mov	r2, #5
   11778:	ldr	r1, [pc, #36]	; 117a4 <__assert_fail@plt+0x89c>
   1177c:	mov	r0, #0
   11780:	bl	10d4c <dcgettext@plt>
   11784:	mov	r1, #0
   11788:	mov	r2, r0
   1178c:	mov	r0, r1
   11790:	bl	10db8 <error@plt>
   11794:	mov	r0, #0
   11798:	strd	r6, [r4]
   1179c:	pop	{r4, r6, r7, pc}
   117a0:	andeq	r6, r2, r0, ror #2
   117a4:	andeq	r4, r1, r8, ror #21
   117a8:	ldr	r3, [pc, #72]	; 117f8 <__assert_fail@plt+0x8f0>
   117ac:	push	{r4, r6, r7, lr}
   117b0:	mov	r6, r0
   117b4:	mov	r7, r1
   117b8:	ldrd	r0, [r3, #8]
   117bc:	mov	r4, r3
   117c0:	orrs	r2, r0, r1
   117c4:	moveq	r0, #1
   117c8:	beq	117f0 <__assert_fail@plt+0x8e8>
   117cc:	mov	r2, #5
   117d0:	ldr	r1, [pc, #36]	; 117fc <__assert_fail@plt+0x8f4>
   117d4:	mov	r0, #0
   117d8:	bl	10d4c <dcgettext@plt>
   117dc:	mov	r1, #0
   117e0:	mov	r2, r0
   117e4:	mov	r0, r1
   117e8:	bl	10db8 <error@plt>
   117ec:	mov	r0, #0
   117f0:	strd	r6, [r4, #8]
   117f4:	pop	{r4, r6, r7, pc}
   117f8:	andeq	r6, r2, r0, ror #2
   117fc:	andeq	r4, r1, r7, lsl fp
   11800:	push	{r4, r6, r7, r8, r9, lr}
   11804:	mov	r9, r1
   11808:	mov	r8, r0
   1180c:	ldr	r4, [pc, #192]	; 118d4 <__assert_fail@plt+0x9cc>
   11810:	ldr	r1, [r4, #16]
   11814:	ldr	r0, [r4, #20]
   11818:	cmp	r1, #0
   1181c:	beq	118c0 <__assert_fail@plt+0x9b8>
   11820:	add	r3, r0, r1, lsl #3
   11824:	ldrd	r2, [r3, #-8]
   11828:	cmp	r3, r9
   1182c:	cmpeq	r2, r8
   11830:	movhi	r6, #0
   11834:	movhi	r7, #0
   11838:	bhi	11844 <__assert_fail@plt+0x93c>
   1183c:	subs	r6, r8, r2
   11840:	sbc	r7, r9, r3
   11844:	ldr	r3, [r4, #24]
   11848:	cmp	r1, r3
   1184c:	bne	11860 <__assert_fail@plt+0x958>
   11850:	mov	r2, #8
   11854:	ldr	r1, [pc, #124]	; 118d8 <__assert_fail@plt+0x9d0>
   11858:	bl	13f14 <__assert_fail@plt+0x300c>
   1185c:	str	r0, [r4, #20]
   11860:	ldr	r3, [r4, #16]
   11864:	ldr	r2, [r4, #20]
   11868:	add	r1, r3, #1
   1186c:	lsl	r3, r3, #3
   11870:	str	r1, [r4, #16]
   11874:	strd	r8, [r2, r3]
   11878:	mov	r3, #0
   1187c:	ldr	r2, [r4, #28]
   11880:	cmp	r3, r7
   11884:	cmpeq	r2, r6
   11888:	popcs	{r4, r6, r7, r8, r9, pc}
   1188c:	mov	r3, #0
   11890:	mvn	r2, #0
   11894:	cmp	r7, r3
   11898:	cmpeq	r6, r2
   1189c:	bls	118cc <__assert_fail@plt+0x9c4>
   118a0:	mov	r2, #5
   118a4:	ldr	r1, [pc, #48]	; 118dc <__assert_fail@plt+0x9d4>
   118a8:	mov	r0, #0
   118ac:	bl	10d4c <dcgettext@plt>
   118b0:	mov	r2, r0
   118b4:	mov	r1, #0
   118b8:	mov	r0, #1
   118bc:	bl	10db8 <error@plt>
   118c0:	mov	r2, #0
   118c4:	mov	r3, #0
   118c8:	b	1183c <__assert_fail@plt+0x934>
   118cc:	str	r6, [r4, #28]
   118d0:	pop	{r4, r6, r7, r8, r9, pc}
   118d4:	andeq	r6, r2, r0, ror #2
   118d8:	andeq	r6, r2, r8, ror r1
   118dc:	andeq	r4, r1, r6, asr #22
   118e0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118e4:	mov	r9, #0
   118e8:	mov	r2, #0
   118ec:	mov	r3, #0
   118f0:	mov	r6, r0
   118f4:	mov	sl, #1
   118f8:	mov	r7, r9
   118fc:	mov	r8, r9
   11900:	mov	r5, r9
   11904:	strd	r2, [sp]
   11908:	ldrb	fp, [r6]
   1190c:	cmp	fp, #0
   11910:	moveq	r0, sl
   11914:	beq	1195c <__assert_fail@plt+0xa54>
   11918:	cmp	fp, #44	; 0x2c
   1191c:	beq	11938 <__assert_fail@plt+0xa30>
   11920:	bl	10e00 <__ctype_b_loc@plt>
   11924:	ldr	r2, [r0]
   11928:	lsl	r3, fp, #1
   1192c:	ldrh	r4, [r2, r3]
   11930:	ands	r4, r4, #1
   11934:	beq	119b4 <__assert_fail@plt+0xaac>
   11938:	cmp	r5, #0
   1193c:	beq	11a08 <__assert_fail@plt+0xb00>
   11940:	cmp	r8, #0
   11944:	ldrd	r0, [sp]
   11948:	beq	11988 <__assert_fail@plt+0xa80>
   1194c:	bl	11750 <__assert_fail@plt+0x848>
   11950:	cmp	r0, #0
   11954:	bne	11b7c <__assert_fail@plt+0xc74>
   11958:	mov	r5, r8
   1195c:	and	r5, r5, r0
   11960:	tst	r5, #255	; 0xff
   11964:	beq	11978 <__assert_fail@plt+0xa70>
   11968:	cmp	r8, #0
   1196c:	ldrd	r0, [sp]
   11970:	beq	11b8c <__assert_fail@plt+0xc84>
   11974:	bl	11750 <__assert_fail@plt+0x848>
   11978:	cmp	r0, #0
   1197c:	bne	11ba8 <__assert_fail@plt+0xca0>
   11980:	mov	r0, #1
   11984:	bl	10e0c <exit@plt>
   11988:	cmp	r7, #0
   1198c:	beq	119a4 <__assert_fail@plt+0xa9c>
   11990:	bl	117a8 <__assert_fail@plt+0x8a0>
   11994:	cmp	r0, #0
   11998:	bne	11b84 <__assert_fail@plt+0xc7c>
   1199c:	mov	r5, r7
   119a0:	b	1195c <__assert_fail@plt+0xa54>
   119a4:	mov	r8, r7
   119a8:	bl	11800 <__assert_fail@plt+0x8f8>
   119ac:	mov	r5, #0
   119b0:	b	11a08 <__assert_fail@plt+0xb00>
   119b4:	cmp	fp, #47	; 0x2f
   119b8:	bne	11a10 <__assert_fail@plt+0xb08>
   119bc:	cmp	r5, #0
   119c0:	moveq	r7, r5
   119c4:	moveq	r8, #1
   119c8:	beq	11a08 <__assert_fail@plt+0xb00>
   119cc:	mov	r2, #5
   119d0:	ldr	r1, [pc, #480]	; 11bb8 <__assert_fail@plt+0xcb0>
   119d4:	mov	r0, r4
   119d8:	bl	10d4c <dcgettext@plt>
   119dc:	mov	r7, r0
   119e0:	mov	r0, r6
   119e4:	bl	13920 <__assert_fail@plt+0x2a18>
   119e8:	mov	r3, r0
   119ec:	mov	r2, r7
   119f0:	mov	r1, r4
   119f4:	mov	r0, r4
   119f8:	mov	r8, r5
   119fc:	mov	sl, r4
   11a00:	mov	r7, r4
   11a04:	bl	10db8 <error@plt>
   11a08:	add	r6, r6, #1
   11a0c:	b	11908 <__assert_fail@plt+0xa00>
   11a10:	cmp	fp, #43	; 0x2b
   11a14:	bne	11a68 <__assert_fail@plt+0xb60>
   11a18:	cmp	r5, #0
   11a1c:	moveq	r8, r5
   11a20:	moveq	r7, #1
   11a24:	beq	11a08 <__assert_fail@plt+0xb00>
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #392]	; 11bbc <__assert_fail@plt+0xcb4>
   11a30:	mov	r0, r4
   11a34:	bl	10d4c <dcgettext@plt>
   11a38:	mov	r7, r0
   11a3c:	mov	r0, r6
   11a40:	bl	13920 <__assert_fail@plt+0x2a18>
   11a44:	mov	r3, r0
   11a48:	mov	r2, r7
   11a4c:	mov	r1, r4
   11a50:	mov	r0, r4
   11a54:	bl	10db8 <error@plt>
   11a58:	mov	r7, r5
   11a5c:	mov	sl, r4
   11a60:	mov	r8, r4
   11a64:	b	11a08 <__assert_fail@plt+0xb00>
   11a68:	sub	fp, fp, #48	; 0x30
   11a6c:	cmp	fp, #9
   11a70:	bhi	11b44 <__assert_fail@plt+0xc3c>
   11a74:	cmp	r5, #0
   11a78:	beq	11b30 <__assert_fail@plt+0xc28>
   11a7c:	add	r1, pc, #300	; 0x12c
   11a80:	ldrd	r0, [r1]
   11a84:	ldrd	r2, [sp]
   11a88:	cmp	r3, r1
   11a8c:	cmpeq	r2, r0
   11a90:	bhi	11ac4 <__assert_fail@plt+0xbbc>
   11a94:	ldr	r3, [sp]
   11a98:	mov	r1, #10
   11a9c:	ldr	r0, [sp, #4]
   11aa0:	umull	r2, r3, r3, r1
   11aa4:	mla	r3, r1, r0, r3
   11aa8:	adds	r0, r2, fp
   11aac:	adc	r1, r3, fp, asr #31
   11ab0:	ldrd	r2, [sp]
   11ab4:	cmp	r1, r3
   11ab8:	cmpeq	r0, r2
   11abc:	strdcs	r0, [sp]
   11ac0:	bcs	11b28 <__assert_fail@plt+0xc20>
   11ac4:	ldr	r1, [pc, #244]	; 11bc0 <__assert_fail@plt+0xcb8>
   11ac8:	mov	r0, r9
   11acc:	mov	sl, #0
   11ad0:	bl	10efc <strspn@plt>
   11ad4:	mov	r1, r0
   11ad8:	mov	r6, r0
   11adc:	mov	r0, r9
   11ae0:	sub	r6, r6, #1
   11ae4:	bl	140a4 <__assert_fail@plt+0x319c>
   11ae8:	mov	r4, r0
   11aec:	mov	r2, #5
   11af0:	ldr	r1, [pc, #204]	; 11bc4 <__assert_fail@plt+0xcbc>
   11af4:	mov	r0, #0
   11af8:	add	r6, r9, r6
   11afc:	bl	10d4c <dcgettext@plt>
   11b00:	mov	r5, r0
   11b04:	mov	r0, r4
   11b08:	bl	13920 <__assert_fail@plt+0x2a18>
   11b0c:	mov	r1, #0
   11b10:	mov	r3, r0
   11b14:	mov	r2, r5
   11b18:	mov	r0, r1
   11b1c:	bl	10db8 <error@plt>
   11b20:	mov	r0, r4
   11b24:	bl	12238 <__assert_fail@plt+0x1330>
   11b28:	mov	r5, #1
   11b2c:	b	11a08 <__assert_fail@plt+0xb00>
   11b30:	mov	r2, #0
   11b34:	mov	r3, #0
   11b38:	mov	r9, r6
   11b3c:	strd	r2, [sp]
   11b40:	b	11a94 <__assert_fail@plt+0xb8c>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #120]	; 11bc8 <__assert_fail@plt+0xcc0>
   11b4c:	mov	r0, r4
   11b50:	bl	10d4c <dcgettext@plt>
   11b54:	mov	r9, r0
   11b58:	mov	r0, r6
   11b5c:	bl	13920 <__assert_fail@plt+0x2a18>
   11b60:	mov	r3, r0
   11b64:	mov	r2, r9
   11b68:	mov	r0, r4
   11b6c:	mov	r1, r4
   11b70:	bl	10db8 <error@plt>
   11b74:	mov	r0, r4
   11b78:	b	1195c <__assert_fail@plt+0xa54>
   11b7c:	mov	r8, r0
   11b80:	b	119ac <__assert_fail@plt+0xaa4>
   11b84:	mov	r7, r0
   11b88:	b	119ac <__assert_fail@plt+0xaa4>
   11b8c:	cmp	r7, #0
   11b90:	beq	11b9c <__assert_fail@plt+0xc94>
   11b94:	bl	117a8 <__assert_fail@plt+0x8a0>
   11b98:	b	11978 <__assert_fail@plt+0xa70>
   11b9c:	add	sp, sp, #12
   11ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ba4:	b	11800 <__assert_fail@plt+0x8f8>
   11ba8:	add	sp, sp, #12
   11bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11bb4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11bb8:	andeq	r4, r1, sp, asr fp
   11bbc:	andeq	r4, r1, r6, lsl #23
   11bc0:	andeq	r4, r1, pc, lsr #23
   11bc4:			; <UNDEFINED> instruction: 0x00014bba
   11bc8:	ldrdeq	r4, [r1], -r3
   11bcc:	ldr	r3, [pc, #252]	; 11cd0 <__assert_fail@plt+0xdc8>
   11bd0:	mov	r2, #0
   11bd4:	push	{r4, r5, r6, r7, r8, lr}
   11bd8:	mov	r4, #0
   11bdc:	mov	r5, #0
   11be0:	ldr	r6, [r3, #16]
   11be4:	ldr	ip, [r3, #20]
   11be8:	sub	lr, ip, #8
   11bec:	cmp	r6, r2
   11bf0:	bne	11c18 <__assert_fail@plt+0xd10>
   11bf4:	ldrd	r4, [r3, #8]
   11bf8:	orrs	r1, r4, r5
   11bfc:	beq	11c68 <__assert_fail@plt+0xd60>
   11c00:	ldrd	r0, [r3]
   11c04:	orrs	r1, r0, r1
   11c08:	beq	11c68 <__assert_fail@plt+0xd60>
   11c0c:	mov	r2, #5
   11c10:	ldr	r1, [pc, #188]	; 11cd4 <__assert_fail@plt+0xdcc>
   11c14:	b	11c2c <__assert_fail@plt+0xd24>
   11c18:	ldrd	r0, [lr, #8]!
   11c1c:	orrs	r7, r0, r1
   11c20:	bne	11c44 <__assert_fail@plt+0xd3c>
   11c24:	ldr	r1, [pc, #172]	; 11cd8 <__assert_fail@plt+0xdd0>
   11c28:	mov	r2, #5
   11c2c:	mov	r0, #0
   11c30:	bl	10d4c <dcgettext@plt>
   11c34:	mov	r2, r0
   11c38:	mov	r1, #0
   11c3c:	mov	r0, #1
   11c40:	bl	10db8 <error@plt>
   11c44:	cmp	r1, r5
   11c48:	cmpeq	r0, r4
   11c4c:	movls	r2, #5
   11c50:	ldrls	r1, [pc, #132]	; 11cdc <__assert_fail@plt+0xdd4>
   11c54:	bls	11c2c <__assert_fail@plt+0xd24>
   11c58:	add	r2, r2, #1
   11c5c:	mov	r4, r0
   11c60:	mov	r5, r1
   11c64:	b	11bec <__assert_fail@plt+0xce4>
   11c68:	cmp	r2, #0
   11c6c:	bne	11c9c <__assert_fail@plt+0xd94>
   11c70:	ldrd	r0, [r3]
   11c74:	orrs	r2, r0, r1
   11c78:	bne	11c88 <__assert_fail@plt+0xd80>
   11c7c:	orrs	r2, r4, r5
   11c80:	movne	r0, r4
   11c84:	moveq	r0, #8
   11c88:	mov	r2, #0
   11c8c:	str	r0, [r3, #28]
   11c90:	str	r0, [r3, #32]
   11c94:	str	r2, [r3, #36]	; 0x24
   11c98:	pop	{r4, r5, r6, r7, r8, pc}
   11c9c:	cmp	r2, #1
   11ca0:	bne	11cc0 <__assert_fail@plt+0xdb8>
   11ca4:	ldr	lr, [r3]
   11ca8:	ldr	r2, [r3, #4]
   11cac:	orr	r0, r4, lr
   11cb0:	orr	r1, r5, r2
   11cb4:	orrs	r2, r0, r1
   11cb8:	ldrdeq	r0, [ip]
   11cbc:	beq	11cc8 <__assert_fail@plt+0xdc0>
   11cc0:	mov	r0, #0
   11cc4:	mov	r1, #0
   11cc8:	strd	r0, [r3, #32]
   11ccc:	pop	{r4, r5, r6, r7, r8, pc}
   11cd0:	andeq	r6, r2, r0, ror #2
   11cd4:	andeq	r4, r1, pc, lsr #24
   11cd8:	strdeq	r4, [r1], -lr
   11cdc:	andeq	r4, r1, r3, lsl ip
   11ce0:	ldr	ip, [pc, #248]	; 11de0 <__assert_fail@plt+0xed8>
   11ce4:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11ce8:	mov	lr, r3
   11cec:	mov	r3, #0
   11cf0:	mov	r8, r2
   11cf4:	strb	r3, [lr]
   11cf8:	ldrd	r2, [ip, #32]
   11cfc:	strd	r0, [sp]
   11d00:	orrs	r6, r2, r3
   11d04:	ldreq	sl, [ip, #16]
   11d08:	ldreq	r1, [ip, #20]
   11d0c:	beq	11d5c <__assert_fail@plt+0xe54>
   11d10:	ldr	ip, [sp]
   11d14:	adds	r6, r2, ip
   11d18:	ldr	ip, [sp, #4]
   11d1c:	adc	r7, r3, ip
   11d20:	bl	14418 <__assert_fail@plt+0x3510>
   11d24:	subs	r4, r6, r2
   11d28:	sbc	r5, r7, r3
   11d2c:	mov	r0, r4
   11d30:	mov	r1, r5
   11d34:	add	sp, sp, #8
   11d38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d3c:	lsl	r3, r0, #3
   11d40:	ldrd	r4, [r1, r3]
   11d44:	ldrd	r2, [sp]
   11d48:	cmp	r3, r5
   11d4c:	cmpeq	r2, r4
   11d50:	bcc	11d2c <__assert_fail@plt+0xe24>
   11d54:	add	r0, r0, #1
   11d58:	str	r0, [r8]
   11d5c:	ldr	r0, [r8]
   11d60:	cmp	r0, sl
   11d64:	bcc	11d3c <__assert_fail@plt+0xe34>
   11d68:	ldrd	r2, [ip]
   11d6c:	orrs	r0, r2, r3
   11d70:	beq	11d98 <__assert_fail@plt+0xe90>
   11d74:	ldr	r1, [sp]
   11d78:	adds	r8, r2, r1
   11d7c:	ldr	r1, [sp, #4]
   11d80:	adc	r9, r3, r1
   11d84:	ldrd	r0, [sp]
   11d88:	bl	14418 <__assert_fail@plt+0x3510>
   11d8c:	subs	r4, r8, r2
   11d90:	sbc	r5, r9, r3
   11d94:	b	11d2c <__assert_fail@plt+0xe24>
   11d98:	ldrd	r4, [ip, #8]
   11d9c:	orrs	r3, r4, r5
   11da0:	moveq	r3, #1
   11da4:	strbeq	r3, [lr]
   11da8:	beq	11d2c <__assert_fail@plt+0xe24>
   11dac:	ldr	r3, [sp]
   11db0:	add	r1, r1, sl, lsl #3
   11db4:	mov	r2, r4
   11db8:	ldrd	r0, [r1, #-8]
   11dbc:	ldr	ip, [sp]
   11dc0:	adds	r8, r4, r3
   11dc4:	ldr	r3, [sp, #4]
   11dc8:	adc	r9, r5, r3
   11dcc:	subs	r0, ip, r0
   11dd0:	ldr	ip, [sp, #4]
   11dd4:	mov	r3, r5
   11dd8:	sbc	r1, ip, r1
   11ddc:	b	11d88 <__assert_fail@plt+0xe80>
   11de0:	andeq	r6, r2, r0, ror #2
   11de4:	ldr	r2, [pc, #24]	; 11e04 <__assert_fail@plt+0xefc>
   11de8:	mov	r3, #0
   11dec:	cmp	r0, #0
   11df0:	strb	r3, [r2, #40]	; 0x28
   11df4:	ldr	r3, [pc, #12]	; 11e08 <__assert_fail@plt+0xf00>
   11df8:	moveq	r0, r3
   11dfc:	str	r0, [r2, #44]	; 0x2c
   11e00:	bx	lr
   11e04:	andeq	r6, r2, r0, ror #2
   11e08:	andeq	r6, r2, r8, ror #1
   11e0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e10:	subs	r6, r0, #0
   11e14:	ldr	r4, [pc, #332]	; 11f68 <__assert_fail@plt+0x1060>
   11e18:	beq	11ea8 <__assert_fail@plt+0xfa0>
   11e1c:	ldr	r8, [r4, #48]	; 0x30
   11e20:	cmp	r8, #0
   11e24:	bne	11e3c <__assert_fail@plt+0xf34>
   11e28:	ldr	r3, [pc, #316]	; 11f6c <__assert_fail@plt+0x1064>
   11e2c:	mov	r2, #340	; 0x154
   11e30:	ldr	r1, [pc, #312]	; 11f70 <__assert_fail@plt+0x1068>
   11e34:	ldr	r0, [pc, #312]	; 11f74 <__assert_fail@plt+0x106c>
   11e38:	bl	10f08 <__assert_fail@plt>
   11e3c:	bl	10e24 <__errno_location@plt>
   11e40:	mov	r7, r0
   11e44:	mov	r0, r6
   11e48:	ldr	r5, [r7]
   11e4c:	bl	10da0 <ferror_unlocked@plt>
   11e50:	cmp	r0, #0
   11e54:	ldr	r1, [pc, #284]	; 11f78 <__assert_fail@plt+0x1070>
   11e58:	mov	r0, r8
   11e5c:	moveq	r5, #0
   11e60:	bl	10cc8 <strcmp@plt>
   11e64:	cmp	r0, #0
   11e68:	mov	r0, r6
   11e6c:	bne	11f20 <__assert_fail@plt+0x1018>
   11e70:	bl	10ea8 <clearerr_unlocked@plt>
   11e74:	cmp	r5, #0
   11e78:	beq	11ea8 <__assert_fail@plt+0xfa0>
   11e7c:	mov	r1, #3
   11e80:	mov	r0, #0
   11e84:	ldr	r2, [r4, #48]	; 0x30
   11e88:	bl	137e0 <__assert_fail@plt+0x28d8>
   11e8c:	mov	r3, r0
   11e90:	ldr	r2, [pc, #228]	; 11f7c <__assert_fail@plt+0x1074>
   11e94:	mov	r1, r5
   11e98:	mov	r0, #0
   11e9c:	bl	10db8 <error@plt>
   11ea0:	mov	r3, #1
   11ea4:	str	r3, [r4, #52]	; 0x34
   11ea8:	ldr	r7, [pc, #200]	; 11f78 <__assert_fail@plt+0x1070>
   11eac:	ldr	r8, [pc, #204]	; 11f80 <__assert_fail@plt+0x1078>
   11eb0:	ldr	r9, [pc, #204]	; 11f84 <__assert_fail@plt+0x107c>
   11eb4:	ldr	r3, [r4, #44]	; 0x2c
   11eb8:	ldr	r5, [r3]
   11ebc:	add	r2, r3, #4
   11ec0:	str	r2, [r4, #44]	; 0x2c
   11ec4:	cmp	r5, #0
   11ec8:	beq	11f18 <__assert_fail@plt+0x1010>
   11ecc:	mov	r1, r7
   11ed0:	mov	r0, r5
   11ed4:	bl	10cc8 <strcmp@plt>
   11ed8:	cmp	r0, #0
   11edc:	moveq	r3, #1
   11ee0:	ldreq	r6, [r9]
   11ee4:	strbeq	r3, [r4, #40]	; 0x28
   11ee8:	beq	11efc <__assert_fail@plt+0xff4>
   11eec:	mov	r1, r8
   11ef0:	mov	r0, r5
   11ef4:	bl	10eb4 <fopen64@plt>
   11ef8:	mov	r6, r0
   11efc:	cmp	r6, #0
   11f00:	beq	11f30 <__assert_fail@plt+0x1028>
   11f04:	mov	r1, #2
   11f08:	mov	r0, r6
   11f0c:	str	r5, [r4, #48]	; 0x30
   11f10:	mov	r5, r6
   11f14:	bl	12110 <__assert_fail@plt+0x1208>
   11f18:	mov	r0, r5
   11f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f20:	bl	12140 <__assert_fail@plt+0x1238>
   11f24:	cmp	r0, #0
   11f28:	ldrne	r5, [r7]
   11f2c:	b	11e74 <__assert_fail@plt+0xf6c>
   11f30:	bl	10e24 <__errno_location@plt>
   11f34:	ldr	sl, [r0]
   11f38:	mov	r2, r5
   11f3c:	mov	r1, #3
   11f40:	mov	r0, r6
   11f44:	bl	137e0 <__assert_fail@plt+0x28d8>
   11f48:	mov	r3, r0
   11f4c:	ldr	r2, [pc, #40]	; 11f7c <__assert_fail@plt+0x1074>
   11f50:	mov	r0, r6
   11f54:	mov	r1, sl
   11f58:	bl	10db8 <error@plt>
   11f5c:	mov	r3, #1
   11f60:	str	r3, [r4, #52]	; 0x34
   11f64:	b	11eb4 <__assert_fail@plt+0xfac>
   11f68:	andeq	r6, r2, r0, ror #2
   11f6c:	ldrdeq	r4, [r1], -lr
   11f70:	andeq	r4, r1, ip, asr ip
   11f74:	andeq	r4, r1, r0, ror ip
   11f78:	andeq	r4, r1, lr, ror lr
   11f7c:	strdeq	r4, [r1], -fp
   11f80:	andeq	r4, r1, ip, asr sl
   11f84:	andeq	r6, r2, r0, asr r1
   11f88:	ldr	r3, [pc, #52]	; 11fc4 <__assert_fail@plt+0x10bc>
   11f8c:	ldrb	r3, [r3, #40]	; 0x28
   11f90:	cmp	r3, #0
   11f94:	bxeq	lr
   11f98:	push	{r4, lr}
   11f9c:	ldr	r3, [pc, #36]	; 11fc8 <__assert_fail@plt+0x10c0>
   11fa0:	ldr	r0, [r3]
   11fa4:	bl	12140 <__assert_fail@plt+0x1238>
   11fa8:	cmp	r0, #0
   11fac:	popeq	{r4, pc}
   11fb0:	bl	10e24 <__errno_location@plt>
   11fb4:	ldr	r2, [pc, #16]	; 11fcc <__assert_fail@plt+0x10c4>
   11fb8:	ldr	r1, [r0]
   11fbc:	mov	r0, #1
   11fc0:	bl	10db8 <error@plt>
   11fc4:	andeq	r6, r2, r0, ror #2
   11fc8:	andeq	r6, r2, r0, asr r1
   11fcc:	andeq	r4, r1, lr, ror lr
   11fd0:	push	{r4, lr}
   11fd4:	mov	r2, #5
   11fd8:	mov	r0, #0
   11fdc:	ldr	r4, [pc, #40]	; 1200c <__assert_fail@plt+0x1104>
   11fe0:	ldr	r1, [pc, #40]	; 12010 <__assert_fail@plt+0x1108>
   11fe4:	bl	10d4c <dcgettext@plt>
   11fe8:	ldr	r1, [r4]
   11fec:	bl	10cb0 <fputs_unlocked@plt>
   11ff0:	ldr	r1, [pc, #28]	; 12014 <__assert_fail@plt+0x110c>
   11ff4:	mov	r2, #5
   11ff8:	mov	r0, #0
   11ffc:	bl	10d4c <dcgettext@plt>
   12000:	ldr	r1, [r4]
   12004:	pop	{r4, lr}
   12008:	b	10cb0 <fputs_unlocked@plt>
   1200c:	andeq	r6, r2, r4, asr r1
   12010:	andeq	r4, r1, sl, ror ip
   12014:			; <UNDEFINED> instruction: 0x00014cb9
   12018:	ldr	r3, [pc, #4]	; 12024 <__assert_fail@plt+0x111c>
   1201c:	str	r0, [r3]
   12020:	bx	lr
   12024:	muleq	r2, ip, r1
   12028:	ldr	r3, [pc, #4]	; 12034 <__assert_fail@plt+0x112c>
   1202c:	strb	r0, [r3, #4]
   12030:	bx	lr
   12034:	muleq	r2, ip, r1
   12038:	ldr	r3, [pc, #176]	; 120f0 <__assert_fail@plt+0x11e8>
   1203c:	push	{r0, r1, r4, r5, r6, lr}
   12040:	ldr	r0, [r3]
   12044:	bl	141f0 <__assert_fail@plt+0x32e8>
   12048:	cmp	r0, #0
   1204c:	beq	120d4 <__assert_fail@plt+0x11cc>
   12050:	ldr	r4, [pc, #156]	; 120f4 <__assert_fail@plt+0x11ec>
   12054:	bl	10e24 <__errno_location@plt>
   12058:	mov	r5, r0
   1205c:	ldrb	r6, [r4, #4]
   12060:	cmp	r6, #0
   12064:	beq	12074 <__assert_fail@plt+0x116c>
   12068:	ldr	r3, [r0]
   1206c:	cmp	r3, #32
   12070:	beq	120d4 <__assert_fail@plt+0x11cc>
   12074:	mov	r2, #5
   12078:	ldr	r1, [pc, #120]	; 120f8 <__assert_fail@plt+0x11f0>
   1207c:	mov	r0, #0
   12080:	bl	10d4c <dcgettext@plt>
   12084:	mov	r6, r0
   12088:	ldr	r0, [r4]
   1208c:	cmp	r0, #0
   12090:	beq	120c0 <__assert_fail@plt+0x11b8>
   12094:	ldr	r4, [r5]
   12098:	bl	137d0 <__assert_fail@plt+0x28c8>
   1209c:	mov	r3, r0
   120a0:	ldr	r2, [pc, #84]	; 120fc <__assert_fail@plt+0x11f4>
   120a4:	mov	r0, #0
   120a8:	str	r6, [sp]
   120ac:	mov	r1, r4
   120b0:	bl	10db8 <error@plt>
   120b4:	ldr	r3, [pc, #68]	; 12100 <__assert_fail@plt+0x11f8>
   120b8:	ldr	r0, [r3]
   120bc:	bl	10cf8 <_exit@plt>
   120c0:	mov	r3, r6
   120c4:	ldr	r2, [pc, #56]	; 12104 <__assert_fail@plt+0x11fc>
   120c8:	ldr	r1, [r5]
   120cc:	bl	10db8 <error@plt>
   120d0:	b	120b4 <__assert_fail@plt+0x11ac>
   120d4:	ldr	r3, [pc, #44]	; 12108 <__assert_fail@plt+0x1200>
   120d8:	ldr	r0, [r3]
   120dc:	bl	141f0 <__assert_fail@plt+0x32e8>
   120e0:	cmp	r0, #0
   120e4:	bne	120b4 <__assert_fail@plt+0x11ac>
   120e8:	add	sp, sp, #8
   120ec:	pop	{r4, r5, r6, pc}
   120f0:	andeq	r6, r2, r4, asr r1
   120f4:	muleq	r2, ip, r1
   120f8:	andeq	r4, r1, r2, asr sl
   120fc:	andeq	r4, r1, r5, lsr lr
   12100:	strdeq	r6, [r2], -r4
   12104:	strdeq	r4, [r1], -fp
   12108:	andeq	r6, r2, r8, asr #2
   1210c:	b	10cd4 <posix_fadvise64@plt>
   12110:	cmp	r0, #0
   12114:	bxeq	lr
   12118:	push	{r0, r1, r2, r3, r4, lr}
   1211c:	mov	r4, r1
   12120:	bl	10e54 <fileno@plt>
   12124:	mov	r2, #0
   12128:	mov	r3, #0
   1212c:	strd	r2, [sp]
   12130:	str	r4, [sp, #8]
   12134:	bl	10cd4 <posix_fadvise64@plt>
   12138:	add	sp, sp, #16
   1213c:	pop	{r4, pc}
   12140:	push	{r0, r1, r2, r4, r5, lr}
   12144:	mov	r4, r0
   12148:	bl	10e54 <fileno@plt>
   1214c:	cmp	r0, #0
   12150:	mov	r0, r4
   12154:	bge	12164 <__assert_fail@plt+0x125c>
   12158:	add	sp, sp, #12
   1215c:	pop	{r4, r5, lr}
   12160:	b	10e6c <fclose@plt>
   12164:	bl	10ddc <__freading@plt>
   12168:	cmp	r0, #0
   1216c:	bne	121a8 <__assert_fail@plt+0x12a0>
   12170:	mov	r0, r4
   12174:	bl	121e8 <__assert_fail@plt+0x12e0>
   12178:	cmp	r0, #0
   1217c:	bne	121dc <__assert_fail@plt+0x12d4>
   12180:	mov	r5, #0
   12184:	mov	r0, r4
   12188:	bl	10e6c <fclose@plt>
   1218c:	cmp	r5, #0
   12190:	beq	121a0 <__assert_fail@plt+0x1298>
   12194:	bl	10e24 <__errno_location@plt>
   12198:	str	r5, [r0]
   1219c:	mvn	r0, #0
   121a0:	add	sp, sp, #12
   121a4:	pop	{r4, r5, pc}
   121a8:	mov	r0, r4
   121ac:	bl	10e54 <fileno@plt>
   121b0:	mov	r3, #1
   121b4:	mov	r2, #0
   121b8:	str	r3, [sp]
   121bc:	mov	r3, #0
   121c0:	bl	10d7c <lseek64@plt>
   121c4:	mvn	r3, #0
   121c8:	mvn	r2, #0
   121cc:	cmp	r1, r3
   121d0:	cmpeq	r0, r2
   121d4:	bne	12170 <__assert_fail@plt+0x1268>
   121d8:	b	12180 <__assert_fail@plt+0x1278>
   121dc:	bl	10e24 <__errno_location@plt>
   121e0:	ldr	r5, [r0]
   121e4:	b	12184 <__assert_fail@plt+0x127c>
   121e8:	push	{r0, r1, r4, lr}
   121ec:	subs	r4, r0, #0
   121f0:	bne	12204 <__assert_fail@plt+0x12fc>
   121f4:	mov	r0, r4
   121f8:	add	sp, sp, #8
   121fc:	pop	{r4, lr}
   12200:	b	10ce0 <fflush@plt>
   12204:	bl	10ddc <__freading@plt>
   12208:	cmp	r0, #0
   1220c:	beq	121f4 <__assert_fail@plt+0x12ec>
   12210:	ldr	r3, [r4]
   12214:	tst	r3, #256	; 0x100
   12218:	beq	121f4 <__assert_fail@plt+0x12ec>
   1221c:	mov	r3, #1
   12220:	mov	r2, #0
   12224:	mov	r0, r4
   12228:	str	r3, [sp]
   1222c:	mov	r3, #0
   12230:	bl	12288 <__assert_fail@plt+0x1380>
   12234:	b	121f4 <__assert_fail@plt+0x12ec>
   12238:	push	{r0, r1, r2, r4, r5, lr}
   1223c:	mov	r5, r0
   12240:	bl	10e24 <__errno_location@plt>
   12244:	mov	r4, r0
   12248:	mov	r0, r5
   1224c:	ldr	r3, [r4]
   12250:	str	r3, [sp]
   12254:	str	r3, [sp, #4]
   12258:	mov	r3, #0
   1225c:	str	r3, [r4]
   12260:	bl	10cec <free@plt>
   12264:	ldr	r3, [r4]
   12268:	add	r2, sp, #8
   1226c:	clz	r3, r3
   12270:	lsr	r3, r3, #5
   12274:	add	r3, r2, r3, lsl #2
   12278:	ldr	r3, [r3, #-8]
   1227c:	str	r3, [r4]
   12280:	add	sp, sp, #12
   12284:	pop	{r4, r5, pc}
   12288:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1228c:	mov	r4, r0
   12290:	ldmib	r0, {ip, lr}
   12294:	ldr	r8, [sp, #32]
   12298:	cmp	lr, ip
   1229c:	bne	1230c <__assert_fail@plt+0x1404>
   122a0:	ldr	ip, [r0, #16]
   122a4:	ldr	lr, [r0, #20]
   122a8:	cmp	lr, ip
   122ac:	bne	1230c <__assert_fail@plt+0x1404>
   122b0:	ldr	r5, [r0, #36]	; 0x24
   122b4:	cmp	r5, #0
   122b8:	bne	1230c <__assert_fail@plt+0x1404>
   122bc:	mov	r6, r2
   122c0:	mov	r7, r3
   122c4:	bl	10e54 <fileno@plt>
   122c8:	mov	r2, r6
   122cc:	mov	r3, r7
   122d0:	str	r8, [sp]
   122d4:	bl	10d7c <lseek64@plt>
   122d8:	mvn	r3, #0
   122dc:	mvn	r2, #0
   122e0:	cmp	r1, r3
   122e4:	cmpeq	r0, r2
   122e8:	mvneq	r0, #0
   122ec:	beq	12304 <__assert_fail@plt+0x13fc>
   122f0:	ldr	r3, [r4]
   122f4:	strd	r0, [r4, #80]	; 0x50
   122f8:	mov	r0, r5
   122fc:	bic	r3, r3, #16
   12300:	str	r3, [r4]
   12304:	add	sp, sp, #8
   12308:	pop	{r4, r5, r6, r7, r8, pc}
   1230c:	mov	r0, r4
   12310:	str	r8, [sp, #32]
   12314:	add	sp, sp, #8
   12318:	pop	{r4, r5, r6, r7, r8, lr}
   1231c:	b	10e78 <fseeko64@plt>
   12320:	push	{r4, r5, r6, lr}
   12324:	subs	r4, r0, #0
   12328:	bne	12340 <__assert_fail@plt+0x1438>
   1232c:	ldr	r3, [pc, #124]	; 123b0 <__assert_fail@plt+0x14a8>
   12330:	ldr	r0, [pc, #124]	; 123b4 <__assert_fail@plt+0x14ac>
   12334:	ldr	r1, [r3]
   12338:	bl	10ecc <fputs@plt>
   1233c:	bl	10ee4 <abort@plt>
   12340:	mov	r1, #47	; 0x2f
   12344:	bl	10e90 <strrchr@plt>
   12348:	subs	r6, r0, #0
   1234c:	beq	1239c <__assert_fail@plt+0x1494>
   12350:	add	r5, r6, #1
   12354:	sub	r3, r5, r4
   12358:	cmp	r3, #6
   1235c:	ble	1239c <__assert_fail@plt+0x1494>
   12360:	mov	r2, #7
   12364:	ldr	r1, [pc, #76]	; 123b8 <__assert_fail@plt+0x14b0>
   12368:	sub	r0, r6, #6
   1236c:	bl	10ed8 <strncmp@plt>
   12370:	cmp	r0, #0
   12374:	bne	1239c <__assert_fail@plt+0x1494>
   12378:	mov	r2, #3
   1237c:	ldr	r1, [pc, #56]	; 123bc <__assert_fail@plt+0x14b4>
   12380:	mov	r0, r5
   12384:	bl	10ed8 <strncmp@plt>
   12388:	cmp	r0, #0
   1238c:	ldreq	r3, [pc, #44]	; 123c0 <__assert_fail@plt+0x14b8>
   12390:	addeq	r4, r6, #4
   12394:	movne	r4, r5
   12398:	streq	r4, [r3]
   1239c:	ldr	r3, [pc, #32]	; 123c4 <__assert_fail@plt+0x14bc>
   123a0:	str	r4, [r3]
   123a4:	ldr	r3, [pc, #28]	; 123c8 <__assert_fail@plt+0x14c0>
   123a8:	str	r4, [r3]
   123ac:	pop	{r4, r5, r6, pc}
   123b0:	andeq	r6, r2, r8, asr #2
   123b4:	andeq	r4, r1, ip, lsr lr
   123b8:	andeq	r4, r1, r4, ror lr
   123bc:	andeq	r4, r1, ip, ror lr
   123c0:	andeq	r6, r2, r8, lsr r1
   123c4:	andeq	r6, r2, r4, lsr #3
   123c8:	andeq	r6, r2, ip, lsr r1
   123cc:	push	{r4, lr}
   123d0:	mov	r2, #48	; 0x30
   123d4:	mov	r4, r1
   123d8:	mov	r1, #0
   123dc:	bl	10e3c <memset@plt>
   123e0:	cmp	r4, #10
   123e4:	bne	123ec <__assert_fail@plt+0x14e4>
   123e8:	bl	10ee4 <abort@plt>
   123ec:	str	r4, [r0]
   123f0:	pop	{r4, pc}
   123f4:	push	{r4, r5, r6, lr}
   123f8:	mov	r2, #5
   123fc:	mov	r6, r0
   12400:	mov	r5, r1
   12404:	mov	r1, r0
   12408:	mov	r0, #0
   1240c:	bl	10d4c <dcgettext@plt>
   12410:	cmp	r6, r0
   12414:	mov	r4, r0
   12418:	bne	12488 <__assert_fail@plt+0x1580>
   1241c:	bl	14288 <__assert_fail@plt+0x3380>
   12420:	ldrb	r3, [r0]
   12424:	bic	r3, r3, #32
   12428:	cmp	r3, #85	; 0x55
   1242c:	bne	12490 <__assert_fail@plt+0x1588>
   12430:	ldrb	r3, [r0, #1]
   12434:	bic	r3, r3, #32
   12438:	cmp	r3, #84	; 0x54
   1243c:	bne	12500 <__assert_fail@plt+0x15f8>
   12440:	ldrb	r3, [r0, #2]
   12444:	bic	r3, r3, #32
   12448:	cmp	r3, #70	; 0x46
   1244c:	bne	12500 <__assert_fail@plt+0x15f8>
   12450:	ldrb	r3, [r0, #3]
   12454:	cmp	r3, #45	; 0x2d
   12458:	bne	12500 <__assert_fail@plt+0x15f8>
   1245c:	ldrb	r3, [r0, #4]
   12460:	cmp	r3, #56	; 0x38
   12464:	bne	12500 <__assert_fail@plt+0x15f8>
   12468:	ldrb	r3, [r0, #5]
   1246c:	cmp	r3, #0
   12470:	bne	12500 <__assert_fail@plt+0x15f8>
   12474:	ldrb	r2, [r4]
   12478:	ldr	r3, [pc, #144]	; 12510 <__assert_fail@plt+0x1608>
   1247c:	ldr	r4, [pc, #144]	; 12514 <__assert_fail@plt+0x160c>
   12480:	cmp	r2, #96	; 0x60
   12484:	movne	r4, r3
   12488:	mov	r0, r4
   1248c:	pop	{r4, r5, r6, pc}
   12490:	cmp	r3, #71	; 0x47
   12494:	bne	12500 <__assert_fail@plt+0x15f8>
   12498:	ldrb	r3, [r0, #1]
   1249c:	bic	r3, r3, #32
   124a0:	cmp	r3, #66	; 0x42
   124a4:	bne	12500 <__assert_fail@plt+0x15f8>
   124a8:	ldrb	r3, [r0, #2]
   124ac:	cmp	r3, #49	; 0x31
   124b0:	bne	12500 <__assert_fail@plt+0x15f8>
   124b4:	ldrb	r3, [r0, #3]
   124b8:	cmp	r3, #56	; 0x38
   124bc:	bne	12500 <__assert_fail@plt+0x15f8>
   124c0:	ldrb	r3, [r0, #4]
   124c4:	cmp	r3, #48	; 0x30
   124c8:	bne	12500 <__assert_fail@plt+0x15f8>
   124cc:	ldrb	r3, [r0, #5]
   124d0:	cmp	r3, #51	; 0x33
   124d4:	bne	12500 <__assert_fail@plt+0x15f8>
   124d8:	ldrb	r3, [r0, #6]
   124dc:	cmp	r3, #48	; 0x30
   124e0:	bne	12500 <__assert_fail@plt+0x15f8>
   124e4:	ldrb	r3, [r0, #7]
   124e8:	cmp	r3, #0
   124ec:	bne	12500 <__assert_fail@plt+0x15f8>
   124f0:	ldrb	r2, [r4]
   124f4:	ldr	r3, [pc, #28]	; 12518 <__assert_fail@plt+0x1610>
   124f8:	ldr	r4, [pc, #28]	; 1251c <__assert_fail@plt+0x1614>
   124fc:	b	12480 <__assert_fail@plt+0x1578>
   12500:	ldr	r4, [pc, #24]	; 12520 <__assert_fail@plt+0x1618>
   12504:	cmp	r5, #9
   12508:	ldr	r3, [pc, #20]	; 12524 <__assert_fail@plt+0x161c>
   1250c:	b	12484 <__assert_fail@plt+0x157c>
   12510:	ldrdeq	r4, [r1], -r6
   12514:	andeq	r4, r1, r1, ror #29
   12518:	ldrdeq	r4, [r1], -sl
   1251c:	ldrdeq	r4, [r1], -sp
   12520:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12524:	andeq	r4, r1, sl, asr ip
   12528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1252c:	sub	sp, sp, #108	; 0x6c
   12530:	mov	r8, r0
   12534:	mov	r5, r1
   12538:	mov	r6, #0
   1253c:	str	r3, [sp, #40]	; 0x28
   12540:	str	r2, [sp, #48]	; 0x30
   12544:	ldr	sl, [sp, #144]	; 0x90
   12548:	bl	10d88 <__ctype_get_mb_cur_max@plt>
   1254c:	ldr	r3, [sp, #148]	; 0x94
   12550:	str	r6, [sp, #24]
   12554:	str	r6, [sp, #32]
   12558:	str	r6, [sp, #44]	; 0x2c
   1255c:	str	r6, [sp, #52]	; 0x34
   12560:	ubfx	r7, r3, #1, #1
   12564:	mov	r3, #1
   12568:	str	r6, [sp, #60]	; 0x3c
   1256c:	str	r3, [sp, #72]	; 0x48
   12570:	str	r0, [sp, #76]	; 0x4c
   12574:	cmp	sl, #10
   12578:	ldrls	pc, [pc, sl, lsl #2]
   1257c:	b	127c0 <__assert_fail@plt+0x18b8>
   12580:	andeq	r2, r1, ip, lsr #11
   12584:	ldrdeq	r2, [r1], -r8
   12588:	andeq	r2, r1, ip, asr r7
   1258c:	andeq	r2, r1, r4, ror r7
   12590:	andeq	r2, r1, r4, asr #14
   12594:	muleq	r1, ip, r6
   12598:	andeq	r2, r1, ip, ror r6
   1259c:	andeq	r2, r1, r4, asr #15
   125a0:	andeq	r2, r1, ip, asr #13
   125a4:	andeq	r2, r1, ip, asr #13
   125a8:	andeq	r2, r1, ip, asr #13
   125ac:	mov	r4, sl
   125b0:	mov	r7, #0
   125b4:	mov	r9, r5
   125b8:	mov	r3, #0
   125bc:	str	r6, [sp, #68]	; 0x44
   125c0:	str	r3, [sp, #28]
   125c4:	ldr	r3, [sp, #40]	; 0x28
   125c8:	cmn	r3, #1
   125cc:	bne	1316c <__assert_fail@plt+0x2264>
   125d0:	ldr	r2, [sp, #28]
   125d4:	ldr	r3, [sp, #48]	; 0x30
   125d8:	ldrb	r3, [r3, r2]
   125dc:	adds	r3, r3, #0
   125e0:	movne	r3, #1
   125e4:	str	r3, [sp, #36]	; 0x24
   125e8:	ldr	r3, [sp, #36]	; 0x24
   125ec:	cmp	r3, #0
   125f0:	bne	127fc <__assert_fail@plt+0x18f4>
   125f4:	sub	r3, sl, #2
   125f8:	cmp	r4, #0
   125fc:	clz	r3, r3
   12600:	movne	r2, #0
   12604:	lsr	r3, r3, #5
   12608:	andeq	r2, r3, r7
   1260c:	cmp	r2, #0
   12610:	bne	129c0 <__assert_fail@plt+0x1ab8>
   12614:	eor	r7, r7, #1
   12618:	ands	r3, r3, r7
   1261c:	beq	131e4 <__assert_fail@plt+0x22dc>
   12620:	ldr	r2, [sp, #68]	; 0x44
   12624:	cmp	r2, #0
   12628:	beq	131ac <__assert_fail@plt+0x22a4>
   1262c:	ldr	r3, [sp, #72]	; 0x48
   12630:	cmp	r3, #0
   12634:	beq	13180 <__assert_fail@plt+0x2278>
   12638:	ldr	r2, [sp, #48]	; 0x30
   1263c:	ldr	r3, [sp, #160]	; 0xa0
   12640:	ldr	r1, [sp, #60]	; 0x3c
   12644:	str	r3, [sp, #16]
   12648:	ldr	r3, [sp, #156]	; 0x9c
   1264c:	str	r3, [sp, #12]
   12650:	ldr	r3, [sp, #152]	; 0x98
   12654:	str	r3, [sp, #8]
   12658:	ldr	r3, [sp, #148]	; 0x94
   1265c:	str	r3, [sp, #4]
   12660:	mov	r3, #5
   12664:	str	r3, [sp]
   12668:	ldr	r3, [sp, #40]	; 0x28
   1266c:	mov	r0, r8
   12670:	bl	12528 <__assert_fail@plt+0x1620>
   12674:	mov	r4, r0
   12678:	b	131d8 <__assert_fail@plt+0x22d0>
   1267c:	ldr	r3, [pc, #2948]	; 13208 <__assert_fail@plt+0x2300>
   12680:	mov	r7, #1
   12684:	mov	r4, #0
   12688:	mov	sl, #5
   1268c:	str	r7, [sp, #24]
   12690:	str	r7, [sp, #32]
   12694:	str	r3, [sp, #44]	; 0x2c
   12698:	b	125b4 <__assert_fail@plt+0x16ac>
   1269c:	cmp	r7, #0
   126a0:	bne	127e4 <__assert_fail@plt+0x18dc>
   126a4:	cmp	r5, #0
   126a8:	mov	r4, #1
   126ac:	movne	r3, #34	; 0x22
   126b0:	strbne	r3, [r8]
   126b4:	mov	r3, #1
   126b8:	str	r3, [sp, #24]
   126bc:	str	r3, [sp, #32]
   126c0:	ldr	r3, [pc, #2880]	; 13208 <__assert_fail@plt+0x2300>
   126c4:	str	r3, [sp, #44]	; 0x2c
   126c8:	b	125b4 <__assert_fail@plt+0x16ac>
   126cc:	cmp	sl, #10
   126d0:	beq	126f4 <__assert_fail@plt+0x17ec>
   126d4:	mov	r1, sl
   126d8:	ldr	r0, [pc, #2860]	; 1320c <__assert_fail@plt+0x2304>
   126dc:	bl	123f4 <__assert_fail@plt+0x14ec>
   126e0:	mov	r1, sl
   126e4:	str	r0, [sp, #156]	; 0x9c
   126e8:	ldr	r0, [pc, #2848]	; 13210 <__assert_fail@plt+0x2308>
   126ec:	bl	123f4 <__assert_fail@plt+0x14ec>
   126f0:	str	r0, [sp, #160]	; 0xa0
   126f4:	cmp	r7, #0
   126f8:	moveq	r4, r7
   126fc:	beq	12714 <__assert_fail@plt+0x180c>
   12700:	mov	r4, #0
   12704:	b	12724 <__assert_fail@plt+0x181c>
   12708:	cmp	r5, r4
   1270c:	strbhi	r3, [r8, r4]
   12710:	add	r4, r4, #1
   12714:	ldr	r3, [sp, #156]	; 0x9c
   12718:	ldrb	r3, [r3, r4]
   1271c:	cmp	r3, #0
   12720:	bne	12708 <__assert_fail@plt+0x1800>
   12724:	ldr	r0, [sp, #160]	; 0xa0
   12728:	bl	10e18 <strlen@plt>
   1272c:	ldr	r3, [sp, #160]	; 0xa0
   12730:	str	r0, [sp, #32]
   12734:	str	r3, [sp, #44]	; 0x2c
   12738:	mov	r3, #1
   1273c:	str	r3, [sp, #24]
   12740:	b	125b4 <__assert_fail@plt+0x16ac>
   12744:	mov	r3, #1
   12748:	cmp	r7, #0
   1274c:	streq	r3, [sp, #24]
   12750:	beq	12794 <__assert_fail@plt+0x188c>
   12754:	str	r3, [sp, #32]
   12758:	b	12780 <__assert_fail@plt+0x1878>
   1275c:	cmp	r7, #0
   12760:	beq	12794 <__assert_fail@plt+0x188c>
   12764:	mov	r3, #1
   12768:	str	r3, [sp, #32]
   1276c:	ldr	r3, [pc, #2716]	; 13210 <__assert_fail@plt+0x2308>
   12770:	b	127f4 <__assert_fail@plt+0x18ec>
   12774:	mov	r7, #1
   12778:	str	r7, [sp, #24]
   1277c:	str	r7, [sp, #32]
   12780:	ldr	r3, [pc, #2696]	; 13210 <__assert_fail@plt+0x2308>
   12784:	mov	r4, #0
   12788:	str	r3, [sp, #44]	; 0x2c
   1278c:	mov	sl, #2
   12790:	b	125b4 <__assert_fail@plt+0x16ac>
   12794:	cmp	r5, #0
   12798:	movne	r3, #39	; 0x27
   1279c:	movne	r7, #0
   127a0:	strbne	r3, [r8]
   127a4:	moveq	r7, r5
   127a8:	mov	r3, #1
   127ac:	mov	r4, #1
   127b0:	str	r3, [sp, #32]
   127b4:	ldr	r3, [pc, #2644]	; 13210 <__assert_fail@plt+0x2308>
   127b8:	str	r3, [sp, #44]	; 0x2c
   127bc:	b	1278c <__assert_fail@plt+0x1884>
   127c0:	bl	10ee4 <abort@plt>
   127c4:	mov	r3, #1
   127c8:	mov	r7, #0
   127cc:	str	r3, [sp, #24]
   127d0:	mov	r4, #0
   127d4:	b	125b4 <__assert_fail@plt+0x16ac>
   127d8:	mov	r7, #1
   127dc:	str	sl, [sp, #32]
   127e0:	b	12780 <__assert_fail@plt+0x1878>
   127e4:	mov	r3, #1
   127e8:	str	r7, [sp, #24]
   127ec:	str	r3, [sp, #32]
   127f0:	ldr	r3, [pc, #2576]	; 13208 <__assert_fail@plt+0x2300>
   127f4:	str	r3, [sp, #44]	; 0x2c
   127f8:	b	127d0 <__assert_fail@plt+0x18c8>
   127fc:	ldr	fp, [sp, #24]
   12800:	ldr	r3, [sp, #32]
   12804:	cmp	sl, #2
   12808:	moveq	fp, #0
   1280c:	andne	fp, fp, #1
   12810:	adds	r5, r3, #0
   12814:	movne	r5, #1
   12818:	ands	r3, fp, r5
   1281c:	str	r3, [sp, #64]	; 0x40
   12820:	beq	128f0 <__assert_fail@plt+0x19e8>
   12824:	ldr	r3, [sp, #28]
   12828:	ldr	r2, [sp, #32]
   1282c:	cmp	r2, #1
   12830:	add	r6, r3, r2
   12834:	mov	r3, r2
   12838:	ldr	r2, [sp, #40]	; 0x28
   1283c:	movls	r3, #0
   12840:	movhi	r3, #1
   12844:	cmn	r2, #1
   12848:	movne	r3, #0
   1284c:	cmp	r3, #0
   12850:	beq	12860 <__assert_fail@plt+0x1958>
   12854:	ldr	r0, [sp, #48]	; 0x30
   12858:	bl	10e18 <strlen@plt>
   1285c:	str	r0, [sp, #40]	; 0x28
   12860:	ldr	r3, [sp, #40]	; 0x28
   12864:	cmp	r6, r3
   12868:	bhi	128e8 <__assert_fail@plt+0x19e0>
   1286c:	ldr	r0, [sp, #28]
   12870:	ldr	r2, [sp, #32]
   12874:	ldr	r3, [sp, #48]	; 0x30
   12878:	ldr	r1, [sp, #44]	; 0x2c
   1287c:	add	r0, r3, r0
   12880:	bl	10d28 <memcmp@plt>
   12884:	cmp	r0, #0
   12888:	bne	128e8 <__assert_fail@plt+0x19e0>
   1288c:	cmp	r7, #0
   12890:	beq	128f0 <__assert_fail@plt+0x19e8>
   12894:	str	r7, [sp, #24]
   12898:	ldr	r3, [sp, #24]
   1289c:	mov	r1, r9
   128a0:	ldr	r2, [sp, #48]	; 0x30
   128a4:	cmp	sl, #2
   128a8:	movne	r3, #0
   128ac:	andeq	r3, r3, #1
   128b0:	cmp	r3, #0
   128b4:	ldr	r3, [sp, #160]	; 0xa0
   128b8:	movne	sl, #4
   128bc:	str	sl, [sp]
   128c0:	str	r3, [sp, #16]
   128c4:	ldr	r3, [sp, #156]	; 0x9c
   128c8:	str	r3, [sp, #12]
   128cc:	mov	r3, #0
   128d0:	str	r3, [sp, #8]
   128d4:	ldr	r3, [sp, #148]	; 0x94
   128d8:	bic	r3, r3, #2
   128dc:	str	r3, [sp, #4]
   128e0:	ldr	r3, [sp, #40]	; 0x28
   128e4:	b	1266c <__assert_fail@plt+0x1764>
   128e8:	mov	r3, #0
   128ec:	str	r3, [sp, #64]	; 0x40
   128f0:	ldr	r2, [sp, #28]
   128f4:	ldr	r3, [sp, #48]	; 0x30
   128f8:	add	r3, r3, r2
   128fc:	str	r3, [sp, #80]	; 0x50
   12900:	ldr	r3, [sp, #48]	; 0x30
   12904:	ldrb	r6, [r3, r2]
   12908:	cmp	r6, #58	; 0x3a
   1290c:	bhi	12a70 <__assert_fail@plt+0x1b68>
   12910:	cmp	r6, #43	; 0x2b
   12914:	bcs	12c30 <__assert_fail@plt+0x1d28>
   12918:	cmp	r6, #32
   1291c:	beq	12c84 <__assert_fail@plt+0x1d7c>
   12920:	bhi	129c8 <__assert_fail@plt+0x1ac0>
   12924:	cmp	r6, #9
   12928:	beq	12e2c <__assert_fail@plt+0x1f24>
   1292c:	bhi	1298c <__assert_fail@plt+0x1a84>
   12930:	cmp	r6, #7
   12934:	beq	12e3c <__assert_fail@plt+0x1f34>
   12938:	bhi	12e58 <__assert_fail@plt+0x1f50>
   1293c:	cmp	r6, #0
   12940:	beq	12ca0 <__assert_fail@plt+0x1d98>
   12944:	ldr	r3, [sp, #76]	; 0x4c
   12948:	cmp	r3, #1
   1294c:	bne	12ea4 <__assert_fail@plt+0x1f9c>
   12950:	bl	10e00 <__ctype_b_loc@plt>
   12954:	ldr	r2, [r0]
   12958:	sxth	r3, r6
   1295c:	lsl	r3, r3, #1
   12960:	ldrh	r5, [r2, r3]
   12964:	ldr	r3, [sp, #76]	; 0x4c
   12968:	ubfx	r5, r5, #14, #1
   1296c:	str	r3, [sp, #56]	; 0x38
   12970:	ldr	r3, [sp, #24]
   12974:	eor	fp, r5, #1
   12978:	and	fp, fp, r3
   1297c:	ands	fp, fp, #255	; 0xff
   12980:	beq	12b60 <__assert_fail@plt+0x1c58>
   12984:	mov	r5, #0
   12988:	b	12f50 <__assert_fail@plt+0x2048>
   1298c:	cmp	r6, #11
   12990:	beq	12e60 <__assert_fail@plt+0x1f58>
   12994:	bcc	12e34 <__assert_fail@plt+0x1f2c>
   12998:	cmp	r6, #12
   1299c:	beq	12e68 <__assert_fail@plt+0x1f60>
   129a0:	cmp	r6, #13
   129a4:	moveq	r3, #114	; 0x72
   129a8:	bne	12944 <__assert_fail@plt+0x1a3c>
   129ac:	cmp	sl, #2
   129b0:	movne	r2, #0
   129b4:	andeq	r2, r7, #1
   129b8:	cmp	r2, #0
   129bc:	beq	12e40 <__assert_fail@plt+0x1f38>
   129c0:	mov	sl, #2
   129c4:	b	12898 <__assert_fail@plt+0x1990>
   129c8:	cmp	r6, #37	; 0x25
   129cc:	beq	12c30 <__assert_fail@plt+0x1d28>
   129d0:	bhi	129e4 <__assert_fail@plt+0x1adc>
   129d4:	cmp	r6, #35	; 0x23
   129d8:	beq	12c78 <__assert_fail@plt+0x1d70>
   129dc:	mov	r5, #0
   129e0:	b	12c88 <__assert_fail@plt+0x1d80>
   129e4:	cmp	r6, #39	; 0x27
   129e8:	bne	129dc <__assert_fail@plt+0x1ad4>
   129ec:	cmp	sl, #2
   129f0:	ldrne	r5, [sp, #36]	; 0x24
   129f4:	movne	r3, r5
   129f8:	strne	r3, [sp, #68]	; 0x44
   129fc:	bne	12d7c <__assert_fail@plt+0x1e74>
   12a00:	cmp	r7, #0
   12a04:	bne	12898 <__assert_fail@plt+0x1990>
   12a08:	ldr	r3, [sp, #60]	; 0x3c
   12a0c:	cmp	r9, #0
   12a10:	clz	r3, r3
   12a14:	lsr	r3, r3, #5
   12a18:	moveq	r3, #0
   12a1c:	cmp	r3, #0
   12a20:	strne	r9, [sp, #60]	; 0x3c
   12a24:	movne	r9, #0
   12a28:	bne	12a38 <__assert_fail@plt+0x1b30>
   12a2c:	cmp	r9, r4
   12a30:	movhi	r3, #39	; 0x27
   12a34:	strbhi	r3, [r8, r4]
   12a38:	add	r3, r4, #1
   12a3c:	ldr	r5, [sp, #36]	; 0x24
   12a40:	mov	fp, #0
   12a44:	cmp	r3, r9
   12a48:	movcc	r2, #92	; 0x5c
   12a4c:	str	fp, [sp, #52]	; 0x34
   12a50:	strbcc	r2, [r8, r3]
   12a54:	add	r3, r4, #2
   12a58:	add	r4, r4, #3
   12a5c:	cmp	r3, r9
   12a60:	str	r5, [sp, #68]	; 0x44
   12a64:	movcc	r2, #39	; 0x27
   12a68:	strbcc	r2, [r8, r3]
   12a6c:	b	12b60 <__assert_fail@plt+0x1c58>
   12a70:	cmp	r6, #94	; 0x5e
   12a74:	beq	129dc <__assert_fail@plt+0x1ad4>
   12a78:	bhi	12c38 <__assert_fail@plt+0x1d30>
   12a7c:	cmp	r6, #90	; 0x5a
   12a80:	bhi	12c24 <__assert_fail@plt+0x1d1c>
   12a84:	cmp	r6, #65	; 0x41
   12a88:	bcs	12c30 <__assert_fail@plt+0x1d28>
   12a8c:	cmp	r6, #62	; 0x3e
   12a90:	bls	129dc <__assert_fail@plt+0x1ad4>
   12a94:	cmp	r6, #63	; 0x3f
   12a98:	bne	12944 <__assert_fail@plt+0x1a3c>
   12a9c:	cmp	sl, #2
   12aa0:	beq	12d84 <__assert_fail@plt+0x1e7c>
   12aa4:	cmp	sl, #5
   12aa8:	movne	fp, #0
   12aac:	bne	13154 <__assert_fail@plt+0x224c>
   12ab0:	ldr	r3, [sp, #148]	; 0x94
   12ab4:	tst	r3, #4
   12ab8:	beq	12d8c <__assert_fail@plt+0x1e84>
   12abc:	ldr	r3, [sp, #28]
   12ac0:	add	r2, r3, #2
   12ac4:	ldr	r3, [sp, #40]	; 0x28
   12ac8:	cmp	r2, r3
   12acc:	bcs	12d8c <__assert_fail@plt+0x1e84>
   12ad0:	ldr	r1, [sp, #28]
   12ad4:	ldr	r3, [sp, #48]	; 0x30
   12ad8:	add	r3, r3, r1
   12adc:	ldrb	r1, [r3, #1]
   12ae0:	cmp	r1, #63	; 0x3f
   12ae4:	bne	12d8c <__assert_fail@plt+0x1e84>
   12ae8:	ldr	r3, [sp, #48]	; 0x30
   12aec:	ldrb	r6, [r3, r2]
   12af0:	sub	r3, r6, #33	; 0x21
   12af4:	uxtb	r3, r3
   12af8:	cmp	r3, #29
   12afc:	bhi	1315c <__assert_fail@plt+0x2254>
   12b00:	ldr	r0, [pc, #1804]	; 13214 <__assert_fail@plt+0x230c>
   12b04:	mov	r5, #1
   12b08:	ands	r5, r0, r5, lsl r3
   12b0c:	beq	13164 <__assert_fail@plt+0x225c>
   12b10:	cmp	r7, #0
   12b14:	bne	12898 <__assert_fail@plt+0x1990>
   12b18:	cmp	r9, r4
   12b1c:	add	r3, r4, #1
   12b20:	str	r2, [sp, #28]
   12b24:	mov	r5, #0
   12b28:	strbhi	r1, [r8, r4]
   12b2c:	cmp	r9, r3
   12b30:	mov	fp, r5
   12b34:	movhi	r1, #34	; 0x22
   12b38:	strbhi	r1, [r8, r3]
   12b3c:	add	r3, r4, #2
   12b40:	cmp	r9, r3
   12b44:	movhi	r1, #34	; 0x22
   12b48:	strbhi	r1, [r8, r3]
   12b4c:	add	r3, r4, #3
   12b50:	add	r4, r4, #4
   12b54:	cmp	r9, r3
   12b58:	movhi	r1, #63	; 0x3f
   12b5c:	strbhi	r1, [r8, r3]
   12b60:	ldr	r3, [sp, #24]
   12b64:	eor	r3, r3, #1
   12b68:	cmp	sl, #2
   12b6c:	orreq	r3, r3, #1
   12b70:	eor	r3, r3, #1
   12b74:	orr	r3, r7, r3
   12b78:	tst	r3, #255	; 0xff
   12b7c:	beq	12ba8 <__assert_fail@plt+0x1ca0>
   12b80:	ldr	r3, [sp, #152]	; 0x98
   12b84:	cmp	r3, #0
   12b88:	beq	12ba8 <__assert_fail@plt+0x1ca0>
   12b8c:	ldr	r1, [sp, #152]	; 0x98
   12b90:	ubfx	r2, r6, #5, #8
   12b94:	and	r3, r6, #31
   12b98:	ldr	r2, [r1, r2, lsl #2]
   12b9c:	lsr	r3, r2, r3
   12ba0:	tst	r3, #1
   12ba4:	bne	12bb4 <__assert_fail@plt+0x1cac>
   12ba8:	ldr	r3, [sp, #64]	; 0x40
   12bac:	cmp	r3, #0
   12bb0:	beq	12dac <__assert_fail@plt+0x1ea4>
   12bb4:	sub	r3, sl, #2
   12bb8:	cmp	r7, #0
   12bbc:	clz	r3, r3
   12bc0:	lsr	r3, r3, #5
   12bc4:	bne	12898 <__assert_fail@plt+0x1990>
   12bc8:	ldr	r2, [sp, #52]	; 0x34
   12bcc:	eor	r2, r2, #1
   12bd0:	ands	r3, r3, r2
   12bd4:	beq	12c0c <__assert_fail@plt+0x1d04>
   12bd8:	cmp	r9, r4
   12bdc:	str	r3, [sp, #52]	; 0x34
   12be0:	movhi	r2, #39	; 0x27
   12be4:	strbhi	r2, [r8, r4]
   12be8:	add	r2, r4, #1
   12bec:	cmp	r9, r2
   12bf0:	movhi	r1, #36	; 0x24
   12bf4:	strbhi	r1, [r8, r2]
   12bf8:	add	r2, r4, #2
   12bfc:	add	r4, r4, #3
   12c00:	cmp	r9, r2
   12c04:	movhi	r1, #39	; 0x27
   12c08:	strbhi	r1, [r8, r2]
   12c0c:	cmp	r9, r4
   12c10:	ldr	fp, [sp, #36]	; 0x24
   12c14:	movhi	r3, #92	; 0x5c
   12c18:	strbhi	r3, [r8, r4]
   12c1c:	add	r4, r4, #1
   12c20:	b	12dac <__assert_fail@plt+0x1ea4>
   12c24:	cmp	r6, #92	; 0x5c
   12c28:	beq	12d94 <__assert_fail@plt+0x1e8c>
   12c2c:	bls	129dc <__assert_fail@plt+0x1ad4>
   12c30:	ldr	r5, [sp, #36]	; 0x24
   12c34:	b	12d7c <__assert_fail@plt+0x1e74>
   12c38:	cmp	r6, #122	; 0x7a
   12c3c:	bhi	12c5c <__assert_fail@plt+0x1d54>
   12c40:	cmp	r6, #97	; 0x61
   12c44:	bcs	12c30 <__assert_fail@plt+0x1d28>
   12c48:	cmp	r6, #95	; 0x5f
   12c4c:	beq	12c30 <__assert_fail@plt+0x1d28>
   12c50:	cmp	r6, #96	; 0x60
   12c54:	bne	12944 <__assert_fail@plt+0x1a3c>
   12c58:	b	129dc <__assert_fail@plt+0x1ad4>
   12c5c:	cmp	r6, #124	; 0x7c
   12c60:	beq	129dc <__assert_fail@plt+0x1ad4>
   12c64:	bcc	12e70 <__assert_fail@plt+0x1f68>
   12c68:	cmp	r6, #125	; 0x7d
   12c6c:	beq	12e70 <__assert_fail@plt+0x1f68>
   12c70:	cmp	r6, #126	; 0x7e
   12c74:	bne	12944 <__assert_fail@plt+0x1a3c>
   12c78:	ldr	r3, [sp, #28]
   12c7c:	cmp	r3, #0
   12c80:	bne	12d8c <__assert_fail@plt+0x1e84>
   12c84:	ldr	r5, [sp, #36]	; 0x24
   12c88:	cmp	sl, #2
   12c8c:	movne	fp, #0
   12c90:	andeq	fp, r7, #1
   12c94:	cmp	fp, #0
   12c98:	beq	12b60 <__assert_fail@plt+0x1c58>
   12c9c:	b	129c0 <__assert_fail@plt+0x1ab8>
   12ca0:	ldr	r3, [sp, #24]
   12ca4:	cmp	r3, #0
   12ca8:	beq	12d70 <__assert_fail@plt+0x1e68>
   12cac:	sub	r2, sl, #2
   12cb0:	cmp	r7, #0
   12cb4:	clz	r2, r2
   12cb8:	lsr	r2, r2, #5
   12cbc:	bne	12894 <__assert_fail@plt+0x198c>
   12cc0:	ldr	r3, [sp, #52]	; 0x34
   12cc4:	eor	r3, r3, #1
   12cc8:	ands	r2, r2, r3
   12ccc:	moveq	r3, r4
   12cd0:	beq	12d08 <__assert_fail@plt+0x1e00>
   12cd4:	cmp	r9, r4
   12cd8:	str	r2, [sp, #52]	; 0x34
   12cdc:	movhi	r3, #39	; 0x27
   12ce0:	strbhi	r3, [r8, r4]
   12ce4:	add	r3, r4, #1
   12ce8:	cmp	r9, r3
   12cec:	movhi	r1, #36	; 0x24
   12cf0:	strbhi	r1, [r8, r3]
   12cf4:	add	r3, r4, #2
   12cf8:	cmp	r9, r3
   12cfc:	movhi	r1, #39	; 0x27
   12d00:	strbhi	r1, [r8, r3]
   12d04:	add	r3, r4, #3
   12d08:	cmp	r9, r3
   12d0c:	add	r4, r3, #1
   12d10:	movhi	r2, #92	; 0x5c
   12d14:	strbhi	r2, [r8, r3]
   12d18:	cmp	fp, #0
   12d1c:	beq	13144 <__assert_fail@plt+0x223c>
   12d20:	ldr	r2, [sp, #28]
   12d24:	ldr	r1, [sp, #40]	; 0x28
   12d28:	add	r2, r2, #1
   12d2c:	cmp	r2, r1
   12d30:	bcs	12d68 <__assert_fail@plt+0x1e60>
   12d34:	ldr	r1, [sp, #48]	; 0x30
   12d38:	mov	r6, #48	; 0x30
   12d3c:	ldrb	r2, [r1, r2]
   12d40:	sub	r2, r2, #48	; 0x30
   12d44:	cmp	r2, #9
   12d48:	bhi	13154 <__assert_fail@plt+0x224c>
   12d4c:	cmp	r9, r4
   12d50:	add	r2, r3, #2
   12d54:	strbhi	r6, [r8, r4]
   12d58:	cmp	r9, r2
   12d5c:	add	r4, r3, #3
   12d60:	movhi	r1, #48	; 0x30
   12d64:	strbhi	r1, [r8, r2]
   12d68:	mov	r5, #0
   12d6c:	b	1314c <__assert_fail@plt+0x2244>
   12d70:	ldr	r3, [sp, #148]	; 0x94
   12d74:	ands	r5, r3, #1
   12d78:	bne	12e00 <__assert_fail@plt+0x1ef8>
   12d7c:	mov	fp, #0
   12d80:	b	12b60 <__assert_fail@plt+0x1c58>
   12d84:	cmp	r7, #0
   12d88:	bne	12898 <__assert_fail@plt+0x1990>
   12d8c:	mov	r5, #0
   12d90:	b	12d7c <__assert_fail@plt+0x1e74>
   12d94:	cmp	sl, #2
   12d98:	bne	12e0c <__assert_fail@plt+0x1f04>
   12d9c:	cmp	r7, #0
   12da0:	bne	12898 <__assert_fail@plt+0x1990>
   12da4:	mov	r5, r7
   12da8:	mov	fp, r7
   12dac:	ldr	r3, [sp, #52]	; 0x34
   12db0:	eor	fp, fp, #1
   12db4:	tst	r3, fp
   12db8:	beq	12de4 <__assert_fail@plt+0x1edc>
   12dbc:	cmp	r9, r4
   12dc0:	movhi	r3, #39	; 0x27
   12dc4:	strbhi	r3, [r8, r4]
   12dc8:	add	r3, r4, #1
   12dcc:	add	r4, r4, #2
   12dd0:	cmp	r9, r3
   12dd4:	movhi	r2, #39	; 0x27
   12dd8:	strbhi	r2, [r8, r3]
   12ddc:	mov	r3, #0
   12de0:	str	r3, [sp, #52]	; 0x34
   12de4:	cmp	r9, r4
   12de8:	ldr	r3, [sp, #72]	; 0x48
   12dec:	strbhi	r6, [r8, r4]
   12df0:	cmp	r5, #0
   12df4:	add	r4, r4, #1
   12df8:	moveq	r3, #0
   12dfc:	str	r3, [sp, #72]	; 0x48
   12e00:	ldr	r3, [sp, #28]
   12e04:	add	r3, r3, #1
   12e08:	b	125c0 <__assert_fail@plt+0x16b8>
   12e0c:	ldr	r3, [sp, #24]
   12e10:	and	r3, r3, r7
   12e14:	tst	r5, r3
   12e18:	moveq	r3, r6
   12e1c:	beq	129ac <__assert_fail@plt+0x1aa4>
   12e20:	mov	fp, #0
   12e24:	mov	r5, fp
   12e28:	b	12dac <__assert_fail@plt+0x1ea4>
   12e2c:	mov	r3, #116	; 0x74
   12e30:	b	129ac <__assert_fail@plt+0x1aa4>
   12e34:	mov	r3, #110	; 0x6e
   12e38:	b	129ac <__assert_fail@plt+0x1aa4>
   12e3c:	mov	r3, #97	; 0x61
   12e40:	ldr	r2, [sp, #24]
   12e44:	cmp	r2, #0
   12e48:	beq	12d8c <__assert_fail@plt+0x1e84>
   12e4c:	mov	r6, r3
   12e50:	mov	r5, #0
   12e54:	b	12bb4 <__assert_fail@plt+0x1cac>
   12e58:	mov	r3, #98	; 0x62
   12e5c:	b	12e40 <__assert_fail@plt+0x1f38>
   12e60:	mov	r3, #118	; 0x76
   12e64:	b	12e40 <__assert_fail@plt+0x1f38>
   12e68:	mov	r3, #102	; 0x66
   12e6c:	b	12e40 <__assert_fail@plt+0x1f38>
   12e70:	ldr	r3, [sp, #40]	; 0x28
   12e74:	cmn	r3, #1
   12e78:	bne	12e98 <__assert_fail@plt+0x1f90>
   12e7c:	ldr	r3, [sp, #48]	; 0x30
   12e80:	ldrb	r3, [r3, #1]
   12e84:	adds	r3, r3, #0
   12e88:	movne	r3, #1
   12e8c:	cmp	r3, #0
   12e90:	bne	12d8c <__assert_fail@plt+0x1e84>
   12e94:	b	12c78 <__assert_fail@plt+0x1d70>
   12e98:	ldr	r3, [sp, #40]	; 0x28
   12e9c:	subs	r3, r3, #1
   12ea0:	b	12e88 <__assert_fail@plt+0x1f80>
   12ea4:	mov	r3, #0
   12ea8:	mov	r2, #0
   12eac:	strd	r2, [sp, #96]	; 0x60
   12eb0:	ldr	r3, [sp, #40]	; 0x28
   12eb4:	cmn	r3, #1
   12eb8:	bne	12ec8 <__assert_fail@plt+0x1fc0>
   12ebc:	ldr	r0, [sp, #48]	; 0x30
   12ec0:	bl	10e18 <strlen@plt>
   12ec4:	str	r0, [sp, #40]	; 0x28
   12ec8:	ldr	r5, [sp, #36]	; 0x24
   12ecc:	mov	r3, #0
   12ed0:	str	r3, [sp, #56]	; 0x38
   12ed4:	ldr	r3, [sp, #28]
   12ed8:	add	r0, sp, #92	; 0x5c
   12edc:	ldr	r1, [sp, #40]	; 0x28
   12ee0:	ldr	r2, [sp, #56]	; 0x38
   12ee4:	add	r2, r3, r2
   12ee8:	ldr	r3, [sp, #48]	; 0x30
   12eec:	add	fp, r3, r2
   12ef0:	sub	r2, r1, r2
   12ef4:	add	r3, sp, #96	; 0x60
   12ef8:	mov	r1, fp
   12efc:	bl	142bc <__assert_fail@plt+0x33b4>
   12f00:	subs	r2, r0, #0
   12f04:	beq	12f44 <__assert_fail@plt+0x203c>
   12f08:	cmn	r2, #1
   12f0c:	beq	13118 <__assert_fail@plt+0x2210>
   12f10:	cmn	r2, #2
   12f14:	bne	13088 <__assert_fail@plt+0x2180>
   12f18:	ldr	r3, [sp, #28]
   12f1c:	ldr	r2, [sp, #56]	; 0x38
   12f20:	add	r3, r3, r2
   12f24:	ldr	r2, [sp, #40]	; 0x28
   12f28:	cmp	r2, r3
   12f2c:	bls	13118 <__assert_fail@plt+0x2210>
   12f30:	ldr	r2, [sp, #56]	; 0x38
   12f34:	ldr	r3, [sp, #80]	; 0x50
   12f38:	ldrb	r5, [r3, r2]
   12f3c:	cmp	r5, #0
   12f40:	bne	13078 <__assert_fail@plt+0x2170>
   12f44:	ldr	r3, [sp, #56]	; 0x38
   12f48:	cmp	r3, #1
   12f4c:	bls	12970 <__assert_fail@plt+0x1a68>
   12f50:	ldr	r3, [sp, #28]
   12f54:	mov	fp, #0
   12f58:	mov	ip, #92	; 0x5c
   12f5c:	ldr	r2, [sp, #56]	; 0x38
   12f60:	add	r3, r3, r2
   12f64:	ldr	r2, [sp, #24]
   12f68:	str	r3, [sp, #36]	; 0x24
   12f6c:	eor	r3, r5, #1
   12f70:	and	r3, r3, r2
   12f74:	mov	r2, #39	; 0x27
   12f78:	uxtb	r3, r3
   12f7c:	cmp	r3, #0
   12f80:	beq	13120 <__assert_fail@plt+0x2218>
   12f84:	sub	r0, sl, #2
   12f88:	cmp	r7, #0
   12f8c:	clz	r0, r0
   12f90:	lsr	r0, r0, #5
   12f94:	bne	12894 <__assert_fail@plt+0x198c>
   12f98:	ldr	r1, [sp, #52]	; 0x34
   12f9c:	eor	r1, r1, #1
   12fa0:	ands	r1, r0, r1
   12fa4:	beq	12fd4 <__assert_fail@plt+0x20cc>
   12fa8:	cmp	r9, r4
   12fac:	add	r0, r4, #1
   12fb0:	str	r1, [sp, #52]	; 0x34
   12fb4:	strbhi	r2, [r8, r4]
   12fb8:	cmp	r9, r0
   12fbc:	movhi	lr, #36	; 0x24
   12fc0:	strbhi	lr, [r8, r0]
   12fc4:	add	r0, r4, #2
   12fc8:	add	r4, r4, #3
   12fcc:	cmp	r9, r0
   12fd0:	strbhi	r2, [r8, r0]
   12fd4:	cmp	r9, r4
   12fd8:	add	r0, r4, #1
   12fdc:	mov	fp, r3
   12fe0:	strbhi	ip, [r8, r4]
   12fe4:	cmp	r9, r0
   12fe8:	lsrhi	r1, r6, #6
   12fec:	addhi	r1, r1, #48	; 0x30
   12ff0:	strbhi	r1, [r8, r0]
   12ff4:	add	r0, r4, #2
   12ff8:	add	r4, r4, #3
   12ffc:	cmp	r9, r0
   13000:	ubfxhi	r1, r6, #3, #3
   13004:	and	r6, r6, #7
   13008:	add	r6, r6, #48	; 0x30
   1300c:	addhi	r1, r1, #48	; 0x30
   13010:	strbhi	r1, [r8, r0]
   13014:	eor	r0, fp, #1
   13018:	ldr	r1, [sp, #28]
   1301c:	ldr	lr, [sp, #52]	; 0x34
   13020:	add	r1, r1, #1
   13024:	and	r0, r0, lr
   13028:	ldr	lr, [sp, #36]	; 0x24
   1302c:	cmp	r1, lr
   13030:	bcs	12dac <__assert_fail@plt+0x1ea4>
   13034:	cmp	r0, #0
   13038:	beq	1305c <__assert_fail@plt+0x2154>
   1303c:	cmp	r9, r4
   13040:	add	r0, r4, #1
   13044:	strbhi	r2, [r8, r4]
   13048:	cmp	r9, r0
   1304c:	add	r4, r4, #2
   13050:	strbhi	r2, [r8, r0]
   13054:	mov	r0, #0
   13058:	str	r0, [sp, #52]	; 0x34
   1305c:	ldr	r0, [sp, #48]	; 0x30
   13060:	cmp	r9, r4
   13064:	str	r1, [sp, #28]
   13068:	strbhi	r6, [r8, r4]
   1306c:	add	r4, r4, #1
   13070:	ldrb	r6, [r0, r1]
   13074:	b	12f7c <__assert_fail@plt+0x2074>
   13078:	ldr	r3, [sp, #56]	; 0x38
   1307c:	add	r3, r3, #1
   13080:	str	r3, [sp, #56]	; 0x38
   13084:	b	12f18 <__assert_fail@plt+0x2010>
   13088:	cmp	sl, #2
   1308c:	movne	r3, #0
   13090:	andeq	r3, r7, #1
   13094:	cmp	r3, #0
   13098:	movne	r1, #1
   1309c:	bne	130f8 <__assert_fail@plt+0x21f0>
   130a0:	ldr	r0, [sp, #92]	; 0x5c
   130a4:	str	r2, [sp, #84]	; 0x54
   130a8:	bl	10d70 <iswprint@plt>
   130ac:	ldr	r3, [sp, #56]	; 0x38
   130b0:	cmp	r0, #0
   130b4:	add	r0, sp, #96	; 0x60
   130b8:	moveq	r5, #0
   130bc:	ldr	r2, [sp, #84]	; 0x54
   130c0:	add	r3, r3, r2
   130c4:	str	r3, [sp, #56]	; 0x38
   130c8:	bl	10d10 <mbsinit@plt>
   130cc:	cmp	r0, #0
   130d0:	beq	12ed4 <__assert_fail@plt+0x1fcc>
   130d4:	b	12f44 <__assert_fail@plt+0x203c>
   130d8:	ldrb	r3, [fp, #1]!
   130dc:	cmp	r3, #94	; 0x5e
   130e0:	beq	129c0 <__assert_fail@plt+0x1ab8>
   130e4:	bhi	13104 <__assert_fail@plt+0x21fc>
   130e8:	sub	r3, r3, #91	; 0x5b
   130ec:	cmp	r3, #1
   130f0:	bls	129c0 <__assert_fail@plt+0x1ab8>
   130f4:	add	r1, r1, #1
   130f8:	cmp	r1, r2
   130fc:	bne	130d8 <__assert_fail@plt+0x21d0>
   13100:	b	130a0 <__assert_fail@plt+0x2198>
   13104:	cmp	r3, #96	; 0x60
   13108:	beq	129c0 <__assert_fail@plt+0x1ab8>
   1310c:	cmp	r3, #124	; 0x7c
   13110:	bne	130f4 <__assert_fail@plt+0x21ec>
   13114:	b	129c0 <__assert_fail@plt+0x1ab8>
   13118:	mov	r5, #0
   1311c:	b	12f44 <__assert_fail@plt+0x203c>
   13120:	ldr	r1, [sp, #64]	; 0x40
   13124:	cmp	r1, #0
   13128:	beq	13014 <__assert_fail@plt+0x210c>
   1312c:	cmp	r9, r4
   13130:	mov	r1, #0
   13134:	strbhi	ip, [r8, r4]
   13138:	add	r4, r4, #1
   1313c:	str	r1, [sp, #64]	; 0x40
   13140:	b	13014 <__assert_fail@plt+0x210c>
   13144:	mov	r5, fp
   13148:	ldr	fp, [sp, #24]
   1314c:	mov	r6, #48	; 0x30
   13150:	b	12b60 <__assert_fail@plt+0x1c58>
   13154:	mov	r5, #0
   13158:	b	12b60 <__assert_fail@plt+0x1c58>
   1315c:	mov	r6, r1
   13160:	b	12d8c <__assert_fail@plt+0x1e84>
   13164:	mov	r6, r1
   13168:	b	12d7c <__assert_fail@plt+0x1e74>
   1316c:	ldr	r2, [sp, #28]
   13170:	ldr	r3, [sp, #40]	; 0x28
   13174:	subs	r3, r3, r2
   13178:	movne	r3, #1
   1317c:	b	125e4 <__assert_fail@plt+0x16dc>
   13180:	ldr	r3, [sp, #60]	; 0x3c
   13184:	mov	sl, #2
   13188:	ldr	r7, [sp, #72]	; 0x48
   1318c:	adds	r6, r3, #0
   13190:	mov	r5, r3
   13194:	movne	r6, #1
   13198:	cmp	r9, #0
   1319c:	movne	r6, #0
   131a0:	cmp	r6, #0
   131a4:	bne	12574 <__assert_fail@plt+0x166c>
   131a8:	ldr	r3, [sp, #68]	; 0x44
   131ac:	ldr	r2, [sp, #44]	; 0x2c
   131b0:	cmp	r2, #0
   131b4:	moveq	r3, #0
   131b8:	andne	r3, r3, #1
   131bc:	cmp	r3, #0
   131c0:	movne	r3, r2
   131c4:	subne	r3, r3, #1
   131c8:	bne	131f8 <__assert_fail@plt+0x22f0>
   131cc:	cmp	r9, r4
   131d0:	movhi	r3, #0
   131d4:	strbhi	r3, [r8, r4]
   131d8:	mov	r0, r4
   131dc:	add	sp, sp, #108	; 0x6c
   131e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e4:	mov	r3, r7
   131e8:	b	131ac <__assert_fail@plt+0x22a4>
   131ec:	cmp	r9, r4
   131f0:	strbhi	r2, [r8, r4]
   131f4:	add	r4, r4, #1
   131f8:	ldrb	r2, [r3, #1]!
   131fc:	cmp	r2, #0
   13200:	bne	131ec <__assert_fail@plt+0x22e4>
   13204:	b	131cc <__assert_fail@plt+0x22c4>
   13208:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1320c:	andeq	r4, r1, r5, ror #29
   13210:	andeq	r4, r1, sl, asr ip
   13214:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1321c:	sub	sp, sp, #52	; 0x34
   13220:	mov	r6, r0
   13224:	mov	r5, r3
   13228:	mov	r8, r1
   1322c:	mov	r9, r2
   13230:	bl	10e24 <__errno_location@plt>
   13234:	ldr	r3, [r0]
   13238:	cmn	r6, #-2147483647	; 0x80000001
   1323c:	str	r0, [sp, #24]
   13240:	ldr	r7, [pc, #368]	; 133b8 <__assert_fail@plt+0x24b0>
   13244:	str	r3, [sp, #32]
   13248:	movne	r3, #0
   1324c:	moveq	r3, #1
   13250:	orrs	r3, r3, r6, lsr #31
   13254:	ldr	r4, [r7]
   13258:	beq	13260 <__assert_fail@plt+0x2358>
   1325c:	bl	10ee4 <abort@plt>
   13260:	ldr	r2, [r7, #4]
   13264:	cmp	r2, r6
   13268:	bgt	132d8 <__assert_fail@plt+0x23d0>
   1326c:	add	sl, r7, #8
   13270:	mov	r3, #8
   13274:	cmp	r4, sl
   13278:	add	r1, sp, #44	; 0x2c
   1327c:	str	r2, [sp, #44]	; 0x2c
   13280:	sub	r2, r6, r2
   13284:	movne	r0, r4
   13288:	moveq	r0, #0
   1328c:	add	r2, r2, #1
   13290:	str	r3, [sp]
   13294:	mvn	r3, #-2147483648	; 0x80000000
   13298:	bl	13f6c <__assert_fail@plt+0x3064>
   1329c:	cmp	r4, sl
   132a0:	mov	fp, r0
   132a4:	str	r0, [r7]
   132a8:	ldmeq	r4, {r0, r1}
   132ac:	mov	r4, fp
   132b0:	ldr	r2, [sp, #44]	; 0x2c
   132b4:	stmeq	fp, {r0, r1}
   132b8:	mov	r1, #0
   132bc:	ldr	r0, [r7, #4]
   132c0:	sub	r2, r2, r0
   132c4:	add	r0, fp, r0, lsl #3
   132c8:	lsl	r2, r2, #3
   132cc:	bl	10e3c <memset@plt>
   132d0:	ldr	r3, [sp, #44]	; 0x2c
   132d4:	str	r3, [r7, #4]
   132d8:	ldr	r3, [r5, #4]
   132dc:	add	sl, r4, r6, lsl #3
   132e0:	mov	r2, r8
   132e4:	ldr	fp, [r4, r6, lsl #3]
   132e8:	ldr	r7, [sl, #4]
   132ec:	orr	r3, r3, #1
   132f0:	str	r3, [sp, #28]
   132f4:	add	r3, r5, #8
   132f8:	mov	r1, fp
   132fc:	str	r3, [sp, #36]	; 0x24
   13300:	mov	r0, r7
   13304:	ldr	r3, [r5, #44]	; 0x2c
   13308:	str	r3, [sp, #16]
   1330c:	ldr	r3, [r5, #40]	; 0x28
   13310:	str	r3, [sp, #12]
   13314:	add	r3, r5, #8
   13318:	str	r3, [sp, #8]
   1331c:	ldr	r3, [sp, #28]
   13320:	str	r3, [sp, #4]
   13324:	ldr	r3, [r5]
   13328:	str	r3, [sp]
   1332c:	mov	r3, r9
   13330:	bl	12528 <__assert_fail@plt+0x1620>
   13334:	cmp	fp, r0
   13338:	bhi	133a0 <__assert_fail@plt+0x2498>
   1333c:	ldr	r3, [pc, #120]	; 133bc <__assert_fail@plt+0x24b4>
   13340:	add	fp, r0, #1
   13344:	str	fp, [r4, r6, lsl #3]
   13348:	cmp	r7, r3
   1334c:	beq	13358 <__assert_fail@plt+0x2450>
   13350:	mov	r0, r7
   13354:	bl	12238 <__assert_fail@plt+0x1330>
   13358:	mov	r0, fp
   1335c:	bl	13e5c <__assert_fail@plt+0x2f54>
   13360:	ldr	r3, [r5, #44]	; 0x2c
   13364:	mov	r2, r8
   13368:	mov	r1, fp
   1336c:	str	r0, [sl, #4]
   13370:	mov	r7, r0
   13374:	str	r3, [sp, #16]
   13378:	ldr	r3, [r5, #40]	; 0x28
   1337c:	str	r3, [sp, #12]
   13380:	add	r3, r5, #8
   13384:	str	r3, [sp, #8]
   13388:	ldr	r3, [sp, #28]
   1338c:	str	r3, [sp, #4]
   13390:	ldr	r3, [r5]
   13394:	str	r3, [sp]
   13398:	mov	r3, r9
   1339c:	bl	12528 <__assert_fail@plt+0x1620>
   133a0:	ldr	r3, [sp, #24]
   133a4:	mov	r0, r7
   133a8:	ldr	r2, [sp, #32]
   133ac:	str	r2, [r3]
   133b0:	add	sp, sp, #52	; 0x34
   133b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133b8:	strdeq	r6, [r2], -r8
   133bc:	andeq	r6, r2, r8, lsr #3
   133c0:	push	{r4, r5, r6, lr}
   133c4:	mov	r5, r0
   133c8:	bl	10e24 <__errno_location@plt>
   133cc:	mov	r4, r0
   133d0:	cmp	r5, #0
   133d4:	ldr	r0, [pc, #20]	; 133f0 <__assert_fail@plt+0x24e8>
   133d8:	mov	r1, #48	; 0x30
   133dc:	movne	r0, r5
   133e0:	ldr	r6, [r4]
   133e4:	bl	1405c <__assert_fail@plt+0x3154>
   133e8:	str	r6, [r4]
   133ec:	pop	{r4, r5, r6, pc}
   133f0:	andeq	r6, r2, r8, lsr #5
   133f4:	ldr	r3, [pc, #12]	; 13408 <__assert_fail@plt+0x2500>
   133f8:	cmp	r0, #0
   133fc:	moveq	r0, r3
   13400:	ldr	r0, [r0]
   13404:	bx	lr
   13408:	andeq	r6, r2, r8, lsr #5
   1340c:	ldr	r3, [pc, #12]	; 13420 <__assert_fail@plt+0x2518>
   13410:	cmp	r0, #0
   13414:	moveq	r0, r3
   13418:	str	r1, [r0]
   1341c:	bx	lr
   13420:	andeq	r6, r2, r8, lsr #5
   13424:	ldr	r3, [pc, #52]	; 13460 <__assert_fail@plt+0x2558>
   13428:	cmp	r0, #0
   1342c:	push	{lr}		; (str lr, [sp, #-4]!)
   13430:	lsr	lr, r1, #5
   13434:	and	r1, r1, #31
   13438:	moveq	r0, r3
   1343c:	add	r3, r0, #8
   13440:	ldr	ip, [r3, lr, lsl #2]
   13444:	lsr	r0, ip, r1
   13448:	eor	r2, r2, r0
   1344c:	and	r0, r0, #1
   13450:	and	r2, r2, #1
   13454:	eor	r1, ip, r2, lsl r1
   13458:	str	r1, [r3, lr, lsl #2]
   1345c:	pop	{pc}		; (ldr pc, [sp], #4)
   13460:	andeq	r6, r2, r8, lsr #5
   13464:	ldr	r3, [pc, #16]	; 1347c <__assert_fail@plt+0x2574>
   13468:	cmp	r0, #0
   1346c:	movne	r3, r0
   13470:	ldr	r0, [r3, #4]
   13474:	str	r1, [r3, #4]
   13478:	bx	lr
   1347c:	andeq	r6, r2, r8, lsr #5
   13480:	ldr	r3, [pc, #44]	; 134b4 <__assert_fail@plt+0x25ac>
   13484:	cmp	r0, #0
   13488:	moveq	r0, r3
   1348c:	mov	r3, #10
   13490:	cmp	r2, #0
   13494:	cmpne	r1, #0
   13498:	str	r3, [r0]
   1349c:	bne	134a8 <__assert_fail@plt+0x25a0>
   134a0:	push	{r4, lr}
   134a4:	bl	10ee4 <abort@plt>
   134a8:	str	r1, [r0, #40]	; 0x28
   134ac:	str	r2, [r0, #44]	; 0x2c
   134b0:	bx	lr
   134b4:	andeq	r6, r2, r8, lsr #5
   134b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134bc:	sub	sp, sp, #24
   134c0:	mov	sl, r3
   134c4:	mov	r7, r0
   134c8:	mov	r8, r1
   134cc:	mov	r9, r2
   134d0:	ldr	r4, [sp, #56]	; 0x38
   134d4:	ldr	r3, [pc, #88]	; 13534 <__assert_fail@plt+0x262c>
   134d8:	cmp	r4, #0
   134dc:	moveq	r4, r3
   134e0:	bl	10e24 <__errno_location@plt>
   134e4:	ldr	r3, [r4, #44]	; 0x2c
   134e8:	mov	r5, r0
   134ec:	mov	r2, r9
   134f0:	mov	r1, r8
   134f4:	mov	r0, r7
   134f8:	ldr	r6, [r5]
   134fc:	str	r3, [sp, #16]
   13500:	ldr	r3, [r4, #40]	; 0x28
   13504:	str	r3, [sp, #12]
   13508:	add	r3, r4, #8
   1350c:	str	r3, [sp, #8]
   13510:	ldr	r3, [r4, #4]
   13514:	str	r3, [sp, #4]
   13518:	ldr	r3, [r4]
   1351c:	str	r3, [sp]
   13520:	mov	r3, sl
   13524:	bl	12528 <__assert_fail@plt+0x1620>
   13528:	str	r6, [r5]
   1352c:	add	sp, sp, #24
   13530:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13534:	andeq	r6, r2, r8, lsr #5
   13538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1353c:	cmp	r3, #0
   13540:	sub	sp, sp, #44	; 0x2c
   13544:	mov	r6, r2
   13548:	mov	sl, r1
   1354c:	mov	r9, r0
   13550:	ldr	r4, [pc, #176]	; 13608 <__assert_fail@plt+0x2700>
   13554:	movne	r4, r3
   13558:	bl	10e24 <__errno_location@plt>
   1355c:	ldr	r3, [r0]
   13560:	mov	r1, #0
   13564:	mov	r2, r9
   13568:	mov	r8, r0
   1356c:	mov	r0, r1
   13570:	ldr	r5, [r4, #4]
   13574:	add	fp, r4, #8
   13578:	str	r3, [sp, #28]
   1357c:	ldr	r3, [r4, #44]	; 0x2c
   13580:	cmp	r6, #0
   13584:	orreq	r5, r5, #1
   13588:	str	r3, [sp, #16]
   1358c:	ldr	r3, [r4, #40]	; 0x28
   13590:	stmib	sp, {r5, fp}
   13594:	str	r3, [sp, #12]
   13598:	ldr	r3, [r4]
   1359c:	str	r3, [sp]
   135a0:	mov	r3, sl
   135a4:	bl	12528 <__assert_fail@plt+0x1620>
   135a8:	add	r1, r0, #1
   135ac:	mov	r7, r0
   135b0:	mov	r0, r1
   135b4:	str	r1, [sp, #36]	; 0x24
   135b8:	bl	13e5c <__assert_fail@plt+0x2f54>
   135bc:	ldr	r3, [r4, #44]	; 0x2c
   135c0:	mov	r2, r9
   135c4:	ldr	r1, [sp, #36]	; 0x24
   135c8:	str	r3, [sp, #16]
   135cc:	ldr	r3, [r4, #40]	; 0x28
   135d0:	stmib	sp, {r5, fp}
   135d4:	str	r0, [sp, #32]
   135d8:	str	r3, [sp, #12]
   135dc:	ldr	r3, [r4]
   135e0:	str	r3, [sp]
   135e4:	mov	r3, sl
   135e8:	bl	12528 <__assert_fail@plt+0x1620>
   135ec:	ldr	r3, [sp, #28]
   135f0:	cmp	r6, #0
   135f4:	ldr	r0, [sp, #32]
   135f8:	str	r3, [r8]
   135fc:	strne	r7, [r6]
   13600:	add	sp, sp, #44	; 0x2c
   13604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13608:	andeq	r6, r2, r8, lsr #5
   1360c:	mov	r3, r2
   13610:	mov	r2, #0
   13614:	b	13538 <__assert_fail@plt+0x2630>
   13618:	push	{r4, r5, r6, r7, r8, lr}
   1361c:	mov	r6, #1
   13620:	ldr	r4, [pc, #100]	; 1368c <__assert_fail@plt+0x2784>
   13624:	ldr	r5, [r4]
   13628:	add	r7, r5, #4
   1362c:	ldr	r3, [r4, #4]
   13630:	cmp	r3, r6
   13634:	bgt	1367c <__assert_fail@plt+0x2774>
   13638:	ldr	r6, [pc, #80]	; 13690 <__assert_fail@plt+0x2788>
   1363c:	ldr	r0, [r5, #4]
   13640:	cmp	r0, r6
   13644:	beq	13658 <__assert_fail@plt+0x2750>
   13648:	bl	12238 <__assert_fail@plt+0x1330>
   1364c:	mov	r3, #256	; 0x100
   13650:	str	r3, [r4, #8]
   13654:	str	r6, [r4, #12]
   13658:	ldr	r6, [pc, #52]	; 13694 <__assert_fail@plt+0x278c>
   1365c:	cmp	r5, r6
   13660:	beq	13670 <__assert_fail@plt+0x2768>
   13664:	mov	r0, r5
   13668:	bl	12238 <__assert_fail@plt+0x1330>
   1366c:	str	r6, [r4]
   13670:	mov	r3, #1
   13674:	str	r3, [r4, #4]
   13678:	pop	{r4, r5, r6, r7, r8, pc}
   1367c:	ldr	r0, [r7, r6, lsl #3]
   13680:	add	r6, r6, #1
   13684:	bl	12238 <__assert_fail@plt+0x1330>
   13688:	b	1362c <__assert_fail@plt+0x2724>
   1368c:	strdeq	r6, [r2], -r8
   13690:	andeq	r6, r2, r8, lsr #3
   13694:	andeq	r6, r2, r0, lsl #2
   13698:	ldr	r3, [pc, #4]	; 136a4 <__assert_fail@plt+0x279c>
   1369c:	mvn	r2, #0
   136a0:	b	13218 <__assert_fail@plt+0x2310>
   136a4:	andeq	r6, r2, r8, lsr #5
   136a8:	ldr	r3, [pc]	; 136b0 <__assert_fail@plt+0x27a8>
   136ac:	b	13218 <__assert_fail@plt+0x2310>
   136b0:	andeq	r6, r2, r8, lsr #5
   136b4:	mov	r1, r0
   136b8:	mov	r0, #0
   136bc:	b	13698 <__assert_fail@plt+0x2790>
   136c0:	mov	r2, r1
   136c4:	mov	r1, r0
   136c8:	mov	r0, #0
   136cc:	b	136a8 <__assert_fail@plt+0x27a0>
   136d0:	push	{r4, r5, lr}
   136d4:	sub	sp, sp, #52	; 0x34
   136d8:	mov	r5, r2
   136dc:	mov	r4, r0
   136e0:	mov	r0, sp
   136e4:	bl	123cc <__assert_fail@plt+0x14c4>
   136e8:	mov	r3, sp
   136ec:	mvn	r2, #0
   136f0:	mov	r1, r5
   136f4:	mov	r0, r4
   136f8:	bl	13218 <__assert_fail@plt+0x2310>
   136fc:	add	sp, sp, #52	; 0x34
   13700:	pop	{r4, r5, pc}
   13704:	push	{r4, r5, r6, lr}
   13708:	sub	sp, sp, #48	; 0x30
   1370c:	mov	r5, r2
   13710:	mov	r6, r3
   13714:	mov	r4, r0
   13718:	mov	r0, sp
   1371c:	bl	123cc <__assert_fail@plt+0x14c4>
   13720:	mov	r3, sp
   13724:	mov	r2, r6
   13728:	mov	r1, r5
   1372c:	mov	r0, r4
   13730:	bl	13218 <__assert_fail@plt+0x2310>
   13734:	add	sp, sp, #48	; 0x30
   13738:	pop	{r4, r5, r6, pc}
   1373c:	mov	r2, r1
   13740:	mov	r1, r0
   13744:	mov	r0, #0
   13748:	b	136d0 <__assert_fail@plt+0x27c8>
   1374c:	mov	r3, r2
   13750:	mov	r2, r1
   13754:	mov	r1, r0
   13758:	mov	r0, #0
   1375c:	b	13704 <__assert_fail@plt+0x27fc>
   13760:	push	{r4, r5, r6, lr}
   13764:	mov	r4, r0
   13768:	mov	r5, r1
   1376c:	mov	r6, r2
   13770:	sub	sp, sp, #48	; 0x30
   13774:	mov	ip, sp
   13778:	ldr	lr, [pc, #64]	; 137c0 <__assert_fail@plt+0x28b8>
   1377c:	ldm	lr!, {r0, r1, r2, r3}
   13780:	stmia	ip!, {r0, r1, r2, r3}
   13784:	ldm	lr!, {r0, r1, r2, r3}
   13788:	stmia	ip!, {r0, r1, r2, r3}
   1378c:	ldm	lr, {r0, r1, r2, r3}
   13790:	stm	ip, {r0, r1, r2, r3}
   13794:	mov	r1, r6
   13798:	mov	r2, #1
   1379c:	mov	r0, sp
   137a0:	bl	13424 <__assert_fail@plt+0x251c>
   137a4:	mov	r3, sp
   137a8:	mov	r2, r5
   137ac:	mov	r1, r4
   137b0:	mov	r0, #0
   137b4:	bl	13218 <__assert_fail@plt+0x2310>
   137b8:	add	sp, sp, #48	; 0x30
   137bc:	pop	{r4, r5, r6, pc}
   137c0:	andeq	r6, r2, r8, lsr #5
   137c4:	mov	r2, r1
   137c8:	mvn	r1, #0
   137cc:	b	13760 <__assert_fail@plt+0x2858>
   137d0:	mov	r1, #58	; 0x3a
   137d4:	b	137c4 <__assert_fail@plt+0x28bc>
   137d8:	mov	r2, #58	; 0x3a
   137dc:	b	13760 <__assert_fail@plt+0x2858>
   137e0:	push	{r4, r5, lr}
   137e4:	sub	sp, sp, #100	; 0x64
   137e8:	mov	r4, r0
   137ec:	mov	r0, sp
   137f0:	mov	r5, r2
   137f4:	bl	123cc <__assert_fail@plt+0x14c4>
   137f8:	mov	ip, sp
   137fc:	add	lr, sp, #48	; 0x30
   13800:	ldm	ip!, {r0, r1, r2, r3}
   13804:	stmia	lr!, {r0, r1, r2, r3}
   13808:	ldm	ip!, {r0, r1, r2, r3}
   1380c:	stmia	lr!, {r0, r1, r2, r3}
   13810:	ldm	ip, {r0, r1, r2, r3}
   13814:	stm	lr, {r0, r1, r2, r3}
   13818:	mov	r2, #1
   1381c:	mov	r1, #58	; 0x3a
   13820:	add	r0, sp, #48	; 0x30
   13824:	bl	13424 <__assert_fail@plt+0x251c>
   13828:	add	r3, sp, #48	; 0x30
   1382c:	mvn	r2, #0
   13830:	mov	r1, r5
   13834:	mov	r0, r4
   13838:	bl	13218 <__assert_fail@plt+0x2310>
   1383c:	add	sp, sp, #100	; 0x64
   13840:	pop	{r4, r5, pc}
   13844:	push	{r4, r5, r6, r7, lr}
   13848:	mov	r4, r0
   1384c:	mov	r6, r1
   13850:	mov	r7, r2
   13854:	mov	r5, r3
   13858:	sub	sp, sp, #52	; 0x34
   1385c:	ldr	lr, [pc, #68]	; 138a8 <__assert_fail@plt+0x29a0>
   13860:	mov	ip, sp
   13864:	ldm	lr!, {r0, r1, r2, r3}
   13868:	stmia	ip!, {r0, r1, r2, r3}
   1386c:	ldm	lr!, {r0, r1, r2, r3}
   13870:	stmia	ip!, {r0, r1, r2, r3}
   13874:	ldm	lr, {r0, r1, r2, r3}
   13878:	stm	ip, {r0, r1, r2, r3}
   1387c:	mov	r2, r7
   13880:	mov	r1, r6
   13884:	mov	r0, sp
   13888:	bl	13480 <__assert_fail@plt+0x2578>
   1388c:	ldr	r2, [sp, #72]	; 0x48
   13890:	mov	r3, sp
   13894:	mov	r1, r5
   13898:	mov	r0, r4
   1389c:	bl	13218 <__assert_fail@plt+0x2310>
   138a0:	add	sp, sp, #52	; 0x34
   138a4:	pop	{r4, r5, r6, r7, pc}
   138a8:	andeq	r6, r2, r8, lsr #5
   138ac:	mvn	ip, #0
   138b0:	push	{r0, r1, r2, lr}
   138b4:	str	ip, [sp]
   138b8:	bl	13844 <__assert_fail@plt+0x293c>
   138bc:	add	sp, sp, #12
   138c0:	pop	{pc}		; (ldr pc, [sp], #4)
   138c4:	mov	r3, r2
   138c8:	mov	r2, r1
   138cc:	mov	r1, r0
   138d0:	mov	r0, #0
   138d4:	b	138ac <__assert_fail@plt+0x29a4>
   138d8:	push	{r0, r1, r2, lr}
   138dc:	str	r3, [sp]
   138e0:	mov	r3, r2
   138e4:	mov	r2, r1
   138e8:	mov	r1, r0
   138ec:	mov	r0, #0
   138f0:	bl	13844 <__assert_fail@plt+0x293c>
   138f4:	add	sp, sp, #12
   138f8:	pop	{pc}		; (ldr pc, [sp], #4)
   138fc:	ldr	r3, [pc]	; 13904 <__assert_fail@plt+0x29fc>
   13900:	b	13218 <__assert_fail@plt+0x2310>
   13904:	andeq	r6, r2, r8, lsl #2
   13908:	mov	r2, r1
   1390c:	mov	r1, r0
   13910:	mov	r0, #0
   13914:	b	138fc <__assert_fail@plt+0x29f4>
   13918:	mvn	r2, #0
   1391c:	b	138fc <__assert_fail@plt+0x29f4>
   13920:	mov	r1, r0
   13924:	mov	r0, #0
   13928:	b	13918 <__assert_fail@plt+0x2a10>
   1392c:	push	{r4, r5, r6, lr}
   13930:	cmp	r1, #0
   13934:	sub	sp, sp, #32
   13938:	mov	r5, r0
   1393c:	ldr	r4, [sp, #48]	; 0x30
   13940:	ldr	r6, [sp, #52]	; 0x34
   13944:	beq	139f8 <__assert_fail@plt+0x2af0>
   13948:	strd	r2, [sp]
   1394c:	mov	r3, r1
   13950:	mov	r1, #1
   13954:	ldr	r2, [pc, #856]	; 13cb4 <__assert_fail@plt+0x2dac>
   13958:	bl	10e60 <__fprintf_chk@plt>
   1395c:	mov	r2, #5
   13960:	ldr	r1, [pc, #848]	; 13cb8 <__assert_fail@plt+0x2db0>
   13964:	mov	r0, #0
   13968:	bl	10d4c <dcgettext@plt>
   1396c:	movw	r3, #2022	; 0x7e6
   13970:	ldr	r2, [pc, #836]	; 13cbc <__assert_fail@plt+0x2db4>
   13974:	mov	r1, #1
   13978:	str	r3, [sp]
   1397c:	mov	r3, r0
   13980:	mov	r0, r5
   13984:	bl	10e60 <__fprintf_chk@plt>
   13988:	mov	r1, r5
   1398c:	mov	r0, #10
   13990:	bl	10d34 <fputc_unlocked@plt>
   13994:	mov	r2, #5
   13998:	ldr	r1, [pc, #800]	; 13cc0 <__assert_fail@plt+0x2db8>
   1399c:	mov	r0, #0
   139a0:	bl	10d4c <dcgettext@plt>
   139a4:	mov	r2, r0
   139a8:	mov	r1, #1
   139ac:	ldr	r3, [pc, #784]	; 13cc4 <__assert_fail@plt+0x2dbc>
   139b0:	mov	r0, r5
   139b4:	bl	10e60 <__fprintf_chk@plt>
   139b8:	mov	r1, r5
   139bc:	mov	r0, #10
   139c0:	bl	10d34 <fputc_unlocked@plt>
   139c4:	cmp	r6, #9
   139c8:	ldrls	pc, [pc, r6, lsl #2]
   139cc:	b	13ca8 <__assert_fail@plt+0x2da0>
   139d0:	andeq	r3, r1, r8, ror #21
   139d4:	andeq	r3, r1, r0, lsl sl
   139d8:	andeq	r3, r1, ip, lsr sl
   139dc:	andeq	r3, r1, r0, ror sl
   139e0:	andeq	r3, r1, ip, lsr #21
   139e4:	strdeq	r3, [r1], -r0
   139e8:	andeq	r3, r1, r8, lsr fp
   139ec:	andeq	r3, r1, r8, lsl #23
   139f0:	andeq	r3, r1, r0, ror #23
   139f4:	andeq	r3, r1, r0, asr #24
   139f8:	mov	r1, #1
   139fc:	str	r3, [sp]
   13a00:	mov	r3, r2
   13a04:	ldr	r2, [pc, #700]	; 13cc8 <__assert_fail@plt+0x2dc0>
   13a08:	bl	10e60 <__fprintf_chk@plt>
   13a0c:	b	1395c <__assert_fail@plt+0x2a54>
   13a10:	mov	r2, #5
   13a14:	ldr	r1, [pc, #688]	; 13ccc <__assert_fail@plt+0x2dc4>
   13a18:	mov	r0, #0
   13a1c:	bl	10d4c <dcgettext@plt>
   13a20:	ldr	r3, [r4]
   13a24:	mov	r2, r0
   13a28:	mov	r1, #1
   13a2c:	mov	r0, r5
   13a30:	add	sp, sp, #32
   13a34:	pop	{r4, r5, r6, lr}
   13a38:	b	10e60 <__fprintf_chk@plt>
   13a3c:	mov	r2, #5
   13a40:	ldr	r1, [pc, #648]	; 13cd0 <__assert_fail@plt+0x2dc8>
   13a44:	mov	r0, #0
   13a48:	bl	10d4c <dcgettext@plt>
   13a4c:	ldr	r3, [r4, #4]
   13a50:	mov	r2, r0
   13a54:	mov	r1, #1
   13a58:	mov	r0, r5
   13a5c:	str	r3, [sp, #48]	; 0x30
   13a60:	ldr	r3, [r4]
   13a64:	add	sp, sp, #32
   13a68:	pop	{r4, r5, r6, lr}
   13a6c:	b	10e60 <__fprintf_chk@plt>
   13a70:	mov	r2, #5
   13a74:	ldr	r1, [pc, #600]	; 13cd4 <__assert_fail@plt+0x2dcc>
   13a78:	mov	r0, #0
   13a7c:	bl	10d4c <dcgettext@plt>
   13a80:	ldr	r3, [r4, #8]
   13a84:	mov	r2, r0
   13a88:	mov	r1, #1
   13a8c:	mov	r0, r5
   13a90:	str	r3, [sp, #52]	; 0x34
   13a94:	ldr	r3, [r4, #4]
   13a98:	str	r3, [sp, #48]	; 0x30
   13a9c:	ldr	r3, [r4]
   13aa0:	add	sp, sp, #32
   13aa4:	pop	{r4, r5, r6, lr}
   13aa8:	b	10e60 <__fprintf_chk@plt>
   13aac:	mov	r2, #5
   13ab0:	ldr	r1, [pc, #544]	; 13cd8 <__assert_fail@plt+0x2dd0>
   13ab4:	mov	r0, #0
   13ab8:	bl	10d4c <dcgettext@plt>
   13abc:	ldr	r3, [r4, #12]
   13ac0:	mov	r2, r0
   13ac4:	mov	r1, #1
   13ac8:	mov	r0, r5
   13acc:	str	r3, [sp, #8]
   13ad0:	ldr	r3, [r4, #8]
   13ad4:	str	r3, [sp, #4]
   13ad8:	ldr	r3, [r4, #4]
   13adc:	str	r3, [sp]
   13ae0:	ldr	r3, [r4]
   13ae4:	bl	10e60 <__fprintf_chk@plt>
   13ae8:	add	sp, sp, #32
   13aec:	pop	{r4, r5, r6, pc}
   13af0:	mov	r2, #5
   13af4:	ldr	r1, [pc, #480]	; 13cdc <__assert_fail@plt+0x2dd4>
   13af8:	mov	r0, #0
   13afc:	bl	10d4c <dcgettext@plt>
   13b00:	ldr	r3, [r4, #16]
   13b04:	mov	r2, r0
   13b08:	mov	r1, #1
   13b0c:	mov	r0, r5
   13b10:	str	r3, [sp, #12]
   13b14:	ldr	r3, [r4, #12]
   13b18:	str	r3, [sp, #8]
   13b1c:	ldr	r3, [r4, #8]
   13b20:	str	r3, [sp, #4]
   13b24:	ldr	r3, [r4, #4]
   13b28:	str	r3, [sp]
   13b2c:	ldr	r3, [r4]
   13b30:	bl	10e60 <__fprintf_chk@plt>
   13b34:	b	13ae8 <__assert_fail@plt+0x2be0>
   13b38:	mov	r2, #5
   13b3c:	ldr	r1, [pc, #412]	; 13ce0 <__assert_fail@plt+0x2dd8>
   13b40:	mov	r0, #0
   13b44:	bl	10d4c <dcgettext@plt>
   13b48:	ldr	r3, [r4, #20]
   13b4c:	mov	r2, r0
   13b50:	mov	r1, #1
   13b54:	mov	r0, r5
   13b58:	str	r3, [sp, #16]
   13b5c:	ldr	r3, [r4, #16]
   13b60:	str	r3, [sp, #12]
   13b64:	ldr	r3, [r4, #12]
   13b68:	str	r3, [sp, #8]
   13b6c:	ldr	r3, [r4, #8]
   13b70:	str	r3, [sp, #4]
   13b74:	ldr	r3, [r4, #4]
   13b78:	str	r3, [sp]
   13b7c:	ldr	r3, [r4]
   13b80:	bl	10e60 <__fprintf_chk@plt>
   13b84:	b	13ae8 <__assert_fail@plt+0x2be0>
   13b88:	mov	r2, #5
   13b8c:	ldr	r1, [pc, #336]	; 13ce4 <__assert_fail@plt+0x2ddc>
   13b90:	mov	r0, #0
   13b94:	bl	10d4c <dcgettext@plt>
   13b98:	ldr	r3, [r4, #24]
   13b9c:	mov	r2, r0
   13ba0:	mov	r1, #1
   13ba4:	mov	r0, r5
   13ba8:	str	r3, [sp, #20]
   13bac:	ldr	r3, [r4, #20]
   13bb0:	str	r3, [sp, #16]
   13bb4:	ldr	r3, [r4, #16]
   13bb8:	str	r3, [sp, #12]
   13bbc:	ldr	r3, [r4, #12]
   13bc0:	str	r3, [sp, #8]
   13bc4:	ldr	r3, [r4, #8]
   13bc8:	str	r3, [sp, #4]
   13bcc:	ldr	r3, [r4, #4]
   13bd0:	str	r3, [sp]
   13bd4:	ldr	r3, [r4]
   13bd8:	bl	10e60 <__fprintf_chk@plt>
   13bdc:	b	13ae8 <__assert_fail@plt+0x2be0>
   13be0:	mov	r2, #5
   13be4:	ldr	r1, [pc, #252]	; 13ce8 <__assert_fail@plt+0x2de0>
   13be8:	mov	r0, #0
   13bec:	bl	10d4c <dcgettext@plt>
   13bf0:	ldr	r3, [r4, #28]
   13bf4:	mov	r2, r0
   13bf8:	mov	r1, #1
   13bfc:	mov	r0, r5
   13c00:	str	r3, [sp, #24]
   13c04:	ldr	r3, [r4, #24]
   13c08:	str	r3, [sp, #20]
   13c0c:	ldr	r3, [r4, #20]
   13c10:	str	r3, [sp, #16]
   13c14:	ldr	r3, [r4, #16]
   13c18:	str	r3, [sp, #12]
   13c1c:	ldr	r3, [r4, #12]
   13c20:	str	r3, [sp, #8]
   13c24:	ldr	r3, [r4, #8]
   13c28:	str	r3, [sp, #4]
   13c2c:	ldr	r3, [r4, #4]
   13c30:	str	r3, [sp]
   13c34:	ldr	r3, [r4]
   13c38:	bl	10e60 <__fprintf_chk@plt>
   13c3c:	b	13ae8 <__assert_fail@plt+0x2be0>
   13c40:	ldr	r1, [pc, #164]	; 13cec <__assert_fail@plt+0x2de4>
   13c44:	mov	r2, #5
   13c48:	mov	r0, #0
   13c4c:	bl	10d4c <dcgettext@plt>
   13c50:	ldr	r3, [r4, #32]
   13c54:	mov	r2, r0
   13c58:	mov	r1, #1
   13c5c:	mov	r0, r5
   13c60:	str	r3, [sp, #28]
   13c64:	ldr	r3, [r4, #28]
   13c68:	str	r3, [sp, #24]
   13c6c:	ldr	r3, [r4, #24]
   13c70:	str	r3, [sp, #20]
   13c74:	ldr	r3, [r4, #20]
   13c78:	str	r3, [sp, #16]
   13c7c:	ldr	r3, [r4, #16]
   13c80:	str	r3, [sp, #12]
   13c84:	ldr	r3, [r4, #12]
   13c88:	str	r3, [sp, #8]
   13c8c:	ldr	r3, [r4, #8]
   13c90:	str	r3, [sp, #4]
   13c94:	ldr	r3, [r4, #4]
   13c98:	str	r3, [sp]
   13c9c:	ldr	r3, [r4]
   13ca0:	bl	10e60 <__fprintf_chk@plt>
   13ca4:	b	13ae8 <__assert_fail@plt+0x2be0>
   13ca8:	mov	r2, #5
   13cac:	ldr	r1, [pc, #60]	; 13cf0 <__assert_fail@plt+0x2de8>
   13cb0:	b	13c48 <__assert_fail@plt+0x2d40>
   13cb4:	andeq	r4, r1, r3, lsr pc
   13cb8:	andeq	r4, r1, r6, asr #30
   13cbc:	andeq	r5, r1, r4, lsl r2
   13cc0:	andeq	r4, r1, sl, asr #30
   13cc4:	strdeq	r4, [r1], -r5
   13cc8:	andeq	r4, r1, pc, lsr pc
   13ccc:	andeq	r5, r1, r7, lsl r0
   13cd0:	andeq	r5, r1, r7, lsr #32
   13cd4:	andeq	r5, r1, lr, lsr r0
   13cd8:	andeq	r5, r1, sl, asr r0
   13cdc:	andeq	r5, r1, sl, ror r0
   13ce0:	muleq	r1, lr, r0
   13ce4:	andeq	r5, r1, r6, asr #1
   13ce8:	strdeq	r5, [r1], -r2
   13cec:	andeq	r5, r1, r2, lsr #2
   13cf0:	andeq	r5, r1, r6, asr r1
   13cf4:	push	{r0, r1, r4, lr}
   13cf8:	mov	ip, #0
   13cfc:	ldr	lr, [sp, #16]
   13d00:	ldr	r4, [lr, ip, lsl #2]
   13d04:	cmp	r4, #0
   13d08:	bne	13d20 <__assert_fail@plt+0x2e18>
   13d0c:	str	lr, [sp]
   13d10:	str	ip, [sp, #4]
   13d14:	bl	1392c <__assert_fail@plt+0x2a24>
   13d18:	add	sp, sp, #8
   13d1c:	pop	{r4, pc}
   13d20:	add	ip, ip, #1
   13d24:	b	13d00 <__assert_fail@plt+0x2df8>
   13d28:	push	{r4, r5, r6, lr}
   13d2c:	sub	sp, sp, #48	; 0x30
   13d30:	mov	ip, #0
   13d34:	add	lr, sp, #8
   13d38:	mov	r5, lr
   13d3c:	ldr	r6, [sp, #64]	; 0x40
   13d40:	ldr	r4, [r6, ip, lsl #2]
   13d44:	cmp	r4, #0
   13d48:	str	r4, [lr], #4
   13d4c:	beq	13d5c <__assert_fail@plt+0x2e54>
   13d50:	add	ip, ip, #1
   13d54:	cmp	ip, #10
   13d58:	bne	13d40 <__assert_fail@plt+0x2e38>
   13d5c:	stm	sp, {r5, ip}
   13d60:	bl	1392c <__assert_fail@plt+0x2a24>
   13d64:	add	sp, sp, #48	; 0x30
   13d68:	pop	{r4, r5, r6, pc}
   13d6c:	push	{r3}		; (str r3, [sp, #-4]!)
   13d70:	push	{r0, r1, r2, r3, lr}
   13d74:	add	r3, sp, #24
   13d78:	str	r3, [sp]
   13d7c:	str	r3, [sp, #12]
   13d80:	ldr	r3, [sp, #20]
   13d84:	bl	13d28 <__assert_fail@plt+0x2e20>
   13d88:	add	sp, sp, #16
   13d8c:	pop	{lr}		; (ldr lr, [sp], #4)
   13d90:	add	sp, sp, #4
   13d94:	bx	lr
   13d98:	ldr	r3, [pc, #116]	; 13e14 <__assert_fail@plt+0x2f0c>
   13d9c:	mov	r0, #10
   13da0:	push	{r4, lr}
   13da4:	ldr	r1, [r3]
   13da8:	bl	10d34 <fputc_unlocked@plt>
   13dac:	mov	r2, #5
   13db0:	ldr	r1, [pc, #96]	; 13e18 <__assert_fail@plt+0x2f10>
   13db4:	mov	r0, #0
   13db8:	bl	10d4c <dcgettext@plt>
   13dbc:	mov	r1, r0
   13dc0:	ldr	r2, [pc, #84]	; 13e1c <__assert_fail@plt+0x2f14>
   13dc4:	mov	r0, #1
   13dc8:	bl	10e48 <__printf_chk@plt>
   13dcc:	mov	r2, #5
   13dd0:	ldr	r1, [pc, #72]	; 13e20 <__assert_fail@plt+0x2f18>
   13dd4:	mov	r0, #0
   13dd8:	bl	10d4c <dcgettext@plt>
   13ddc:	mov	r1, r0
   13de0:	ldr	r3, [pc, #60]	; 13e24 <__assert_fail@plt+0x2f1c>
   13de4:	mov	r0, #1
   13de8:	ldr	r2, [pc, #56]	; 13e28 <__assert_fail@plt+0x2f20>
   13dec:	bl	10e48 <__printf_chk@plt>
   13df0:	mov	r2, #5
   13df4:	ldr	r1, [pc, #48]	; 13e2c <__assert_fail@plt+0x2f24>
   13df8:	mov	r0, #0
   13dfc:	bl	10d4c <dcgettext@plt>
   13e00:	mov	r1, r0
   13e04:	ldr	r2, [pc, #36]	; 13e30 <__assert_fail@plt+0x2f28>
   13e08:	mov	r0, #1
   13e0c:	pop	{r4, lr}
   13e10:	b	10e48 <__printf_chk@plt>
   13e14:	andeq	r6, r2, r4, asr r1
   13e18:	muleq	r1, r2, r1
   13e1c:	andeq	r5, r1, r6, lsr #3
   13e20:			; <UNDEFINED> instruction: 0x000151bc
   13e24:	andeq	r4, r1, r9, lsl r9
   13e28:	andeq	r4, r1, r1, asr #18
   13e2c:	ldrdeq	r5, [r1], -r0
   13e30:	strdeq	r5, [r1], -r7
   13e34:	push	{r4, lr}
   13e38:	bl	14180 <__assert_fail@plt+0x3278>
   13e3c:	cmp	r0, #0
   13e40:	popne	{r4, pc}
   13e44:	bl	140ec <__assert_fail@plt+0x31e4>
   13e48:	push	{r4, lr}
   13e4c:	bl	14180 <__assert_fail@plt+0x3278>
   13e50:	cmp	r0, #0
   13e54:	popne	{r4, pc}
   13e58:	bl	140ec <__assert_fail@plt+0x31e4>
   13e5c:	b	13e34 <__assert_fail@plt+0x2f2c>
   13e60:	push	{r4, r5, r6, lr}
   13e64:	mov	r5, r0
   13e68:	mov	r4, r1
   13e6c:	bl	141ac <__assert_fail@plt+0x32a4>
   13e70:	cmp	r0, #0
   13e74:	popne	{r4, r5, r6, pc}
   13e78:	adds	r4, r4, #0
   13e7c:	movne	r4, #1
   13e80:	cmp	r5, #0
   13e84:	moveq	r4, #1
   13e88:	cmp	r4, #0
   13e8c:	popeq	{r4, r5, r6, pc}
   13e90:	bl	140ec <__assert_fail@plt+0x31e4>
   13e94:	push	{r4, lr}
   13e98:	bl	14264 <__assert_fail@plt+0x335c>
   13e9c:	cmp	r0, #0
   13ea0:	popne	{r4, pc}
   13ea4:	bl	140ec <__assert_fail@plt+0x31e4>
   13ea8:	push	{r4, r5, r6, lr}
   13eac:	mov	r6, r0
   13eb0:	mov	r5, r1
   13eb4:	mov	r4, r2
   13eb8:	bl	1430c <__assert_fail@plt+0x3404>
   13ebc:	cmp	r0, #0
   13ec0:	popne	{r4, r5, r6, pc}
   13ec4:	cmp	r6, #0
   13ec8:	beq	13ed8 <__assert_fail@plt+0x2fd0>
   13ecc:	cmp	r5, #0
   13ed0:	cmpne	r4, #0
   13ed4:	popeq	{r4, r5, r6, pc}
   13ed8:	bl	140ec <__assert_fail@plt+0x31e4>
   13edc:	b	13ea8 <__assert_fail@plt+0x2fa0>
   13ee0:	push	{r4, lr}
   13ee4:	bl	14274 <__assert_fail@plt+0x336c>
   13ee8:	cmp	r0, #0
   13eec:	popne	{r4, pc}
   13ef0:	bl	140ec <__assert_fail@plt+0x31e4>
   13ef4:	mov	r2, r1
   13ef8:	mov	r1, r0
   13efc:	mov	r0, #0
   13f00:	b	13ea8 <__assert_fail@plt+0x2fa0>
   13f04:	mov	r2, r1
   13f08:	mov	r1, r0
   13f0c:	mov	r0, #0
   13f10:	b	13ee0 <__assert_fail@plt+0x2fd8>
   13f14:	cmp	r0, #0
   13f18:	push	{r4, r5, r6, lr}
   13f1c:	mov	r5, r1
   13f20:	ldr	r4, [r1]
   13f24:	bne	13f50 <__assert_fail@plt+0x3048>
   13f28:	cmp	r4, #0
   13f2c:	bne	13f40 <__assert_fail@plt+0x3038>
   13f30:	mov	r4, #64	; 0x40
   13f34:	udiv	r4, r4, r2
   13f38:	cmp	r2, #64	; 0x40
   13f3c:	addhi	r4, r4, #1
   13f40:	mov	r1, r4
   13f44:	bl	13ea8 <__assert_fail@plt+0x2fa0>
   13f48:	str	r4, [r5]
   13f4c:	pop	{r4, r5, r6, pc}
   13f50:	lsr	r3, r4, #1
   13f54:	add	r3, r3, #1
   13f58:	adds	r4, r4, r3
   13f5c:	bcc	13f40 <__assert_fail@plt+0x3038>
   13f60:	bl	140ec <__assert_fail@plt+0x31e4>
   13f64:	mov	r2, #1
   13f68:	b	13f14 <__assert_fail@plt+0x300c>
   13f6c:	ldr	ip, [r1]
   13f70:	push	{r4, r5, r6, r7, r8, lr}
   13f74:	mov	r5, r1
   13f78:	mvn	r8, r3
   13f7c:	lsr	r8, r8, #31
   13f80:	ldr	lr, [sp, #24]
   13f84:	asr	r1, ip, #1
   13f88:	adds	r4, ip, r1
   13f8c:	mvnvs	r4, #-2147483648	; 0x80000000
   13f90:	cmp	r3, r4
   13f94:	movge	r1, #0
   13f98:	andlt	r1, r8, #1
   13f9c:	cmp	r1, #0
   13fa0:	movne	r4, r3
   13fa4:	smull	r6, r7, r4, lr
   13fa8:	cmp	r7, r6, asr #31
   13fac:	bne	13fc4 <__assert_fail@plt+0x30bc>
   13fb0:	cmp	r6, #63	; 0x3f
   13fb4:	mov	r1, r6
   13fb8:	bgt	13fd4 <__assert_fail@plt+0x30cc>
   13fbc:	mov	r1, #64	; 0x40
   13fc0:	b	13fc8 <__assert_fail@plt+0x30c0>
   13fc4:	mvn	r1, #-2147483648	; 0x80000000
   13fc8:	sdiv	r4, r1, lr
   13fcc:	mls	r6, lr, r4, r1
   13fd0:	sub	r1, r1, r6
   13fd4:	cmp	r0, #0
   13fd8:	sub	r6, r4, ip
   13fdc:	streq	r0, [r5]
   13fe0:	cmp	r6, r2
   13fe4:	bge	14018 <__assert_fail@plt+0x3110>
   13fe8:	adds	r4, ip, r2
   13fec:	bvs	14014 <__assert_fail@plt+0x310c>
   13ff0:	cmp	r4, r3
   13ff4:	movle	r3, #0
   13ff8:	andgt	r3, r8, #1
   13ffc:	cmp	r3, #0
   14000:	bne	14014 <__assert_fail@plt+0x310c>
   14004:	smull	r2, r3, r4, lr
   14008:	cmp	r3, r2, asr #31
   1400c:	mov	r1, r2
   14010:	beq	14018 <__assert_fail@plt+0x3110>
   14014:	bl	140ec <__assert_fail@plt+0x31e4>
   14018:	bl	13e60 <__assert_fail@plt+0x2f58>
   1401c:	str	r4, [r5]
   14020:	pop	{r4, r5, r6, r7, r8, pc}
   14024:	push	{r4, lr}
   14028:	bl	1412c <__assert_fail@plt+0x3224>
   1402c:	cmp	r0, #0
   14030:	popne	{r4, pc}
   14034:	bl	140ec <__assert_fail@plt+0x31e4>
   14038:	mov	r1, #1
   1403c:	b	14024 <__assert_fail@plt+0x311c>
   14040:	push	{r4, lr}
   14044:	bl	1412c <__assert_fail@plt+0x3224>
   14048:	cmp	r0, #0
   1404c:	popne	{r4, pc}
   14050:	bl	140ec <__assert_fail@plt+0x31e4>
   14054:	mov	r1, #1
   14058:	b	14040 <__assert_fail@plt+0x3138>
   1405c:	push	{r4, r5, r6, lr}
   14060:	mov	r4, r1
   14064:	mov	r5, r0
   14068:	mov	r0, r1
   1406c:	bl	13e34 <__assert_fail@plt+0x2f2c>
   14070:	mov	r2, r4
   14074:	mov	r1, r5
   14078:	pop	{r4, r5, r6, lr}
   1407c:	b	10d04 <memcpy@plt>
   14080:	push	{r4, r5, r6, lr}
   14084:	mov	r4, r1
   14088:	mov	r5, r0
   1408c:	mov	r0, r1
   14090:	bl	13e48 <__assert_fail@plt+0x2f40>
   14094:	mov	r2, r4
   14098:	mov	r1, r5
   1409c:	pop	{r4, r5, r6, lr}
   140a0:	b	10d04 <memcpy@plt>
   140a4:	push	{r4, r5, r6, lr}
   140a8:	mov	r5, r0
   140ac:	add	r0, r1, #1
   140b0:	mov	r4, r1
   140b4:	bl	13e48 <__assert_fail@plt+0x2f40>
   140b8:	mov	r2, #0
   140bc:	mov	r1, r5
   140c0:	strb	r2, [r0, r4]
   140c4:	mov	r2, r4
   140c8:	pop	{r4, r5, r6, lr}
   140cc:	b	10d04 <memcpy@plt>
   140d0:	push	{r4, lr}
   140d4:	mov	r4, r0
   140d8:	bl	10e18 <strlen@plt>
   140dc:	add	r1, r0, #1
   140e0:	mov	r0, r4
   140e4:	pop	{r4, lr}
   140e8:	b	1405c <__assert_fail@plt+0x3154>
   140ec:	ldr	r3, [pc, #44]	; 14120 <__assert_fail@plt+0x3218>
   140f0:	mov	r2, #5
   140f4:	mov	r0, #0
   140f8:	push	{r4, lr}
   140fc:	ldr	r1, [pc, #32]	; 14124 <__assert_fail@plt+0x321c>
   14100:	ldr	r4, [r3]
   14104:	bl	10d4c <dcgettext@plt>
   14108:	mov	r3, r0
   1410c:	ldr	r2, [pc, #20]	; 14128 <__assert_fail@plt+0x3220>
   14110:	mov	r1, #0
   14114:	mov	r0, r4
   14118:	bl	10db8 <error@plt>
   1411c:	bl	10ee4 <abort@plt>
   14120:	strdeq	r6, [r2], -r4
   14124:	andeq	r5, r1, r3, asr #4
   14128:	strdeq	r4, [r1], -fp
   1412c:	cmp	r1, #0
   14130:	cmpne	r0, #0
   14134:	beq	1416c <__assert_fail@plt+0x3264>
   14138:	push	{r4, r5, r6, lr}
   1413c:	umull	r4, r5, r0, r1
   14140:	adds	r3, r5, #0
   14144:	movne	r3, #1
   14148:	cmp	r4, #0
   1414c:	blt	14158 <__assert_fail@plt+0x3250>
   14150:	cmp	r3, #0
   14154:	beq	14178 <__assert_fail@plt+0x3270>
   14158:	bl	10e24 <__errno_location@plt>
   1415c:	mov	r3, #12
   14160:	str	r3, [r0]
   14164:	mov	r0, #0
   14168:	pop	{r4, r5, r6, pc}
   1416c:	mov	r1, #1
   14170:	mov	r0, r1
   14174:	b	10ca4 <calloc@plt>
   14178:	pop	{r4, r5, r6, lr}
   1417c:	b	14174 <__assert_fail@plt+0x326c>
   14180:	cmp	r0, #0
   14184:	beq	141a4 <__assert_fail@plt+0x329c>
   14188:	bge	141a8 <__assert_fail@plt+0x32a0>
   1418c:	push	{r4, lr}
   14190:	bl	10e24 <__errno_location@plt>
   14194:	mov	r3, #12
   14198:	str	r3, [r0]
   1419c:	mov	r0, #0
   141a0:	pop	{r4, pc}
   141a4:	mov	r0, #1
   141a8:	b	10dc4 <malloc@plt>
   141ac:	cmp	r0, #0
   141b0:	bne	141bc <__assert_fail@plt+0x32b4>
   141b4:	mov	r0, r1
   141b8:	b	14180 <__assert_fail@plt+0x3278>
   141bc:	cmp	r1, #0
   141c0:	push	{r4, lr}
   141c4:	bne	141d4 <__assert_fail@plt+0x32cc>
   141c8:	bl	12238 <__assert_fail@plt+0x1330>
   141cc:	mov	r0, #0
   141d0:	pop	{r4, pc}
   141d4:	blt	141e0 <__assert_fail@plt+0x32d8>
   141d8:	pop	{r4, lr}
   141dc:	b	10d58 <realloc@plt>
   141e0:	bl	10e24 <__errno_location@plt>
   141e4:	mov	r3, #12
   141e8:	str	r3, [r0]
   141ec:	b	141cc <__assert_fail@plt+0x32c4>
   141f0:	push	{r4, r5, r6, lr}
   141f4:	mov	r4, r0
   141f8:	bl	10d94 <__fpending@plt>
   141fc:	mov	r5, r0
   14200:	mov	r0, r4
   14204:	bl	10da0 <ferror_unlocked@plt>
   14208:	mov	r6, r0
   1420c:	mov	r0, r4
   14210:	bl	12140 <__assert_fail@plt+0x1238>
   14214:	cmp	r6, #0
   14218:	mov	r4, r0
   1421c:	bne	14248 <__assert_fail@plt+0x3340>
   14220:	cmp	r0, #0
   14224:	beq	14240 <__assert_fail@plt+0x3338>
   14228:	cmp	r5, #0
   1422c:	bne	14258 <__assert_fail@plt+0x3350>
   14230:	bl	10e24 <__errno_location@plt>
   14234:	ldr	r4, [r0]
   14238:	subs	r4, r4, #9
   1423c:	mvnne	r4, #0
   14240:	mov	r0, r4
   14244:	pop	{r4, r5, r6, pc}
   14248:	cmp	r0, #0
   1424c:	bne	14258 <__assert_fail@plt+0x3350>
   14250:	bl	10e24 <__errno_location@plt>
   14254:	str	r4, [r0]
   14258:	mvn	r4, #0
   1425c:	b	14240 <__assert_fail@plt+0x3338>
   14260:	b	14180 <__assert_fail@plt+0x3278>
   14264:	cmp	r1, #0
   14268:	orreq	r1, r1, #1
   1426c:	b	141ac <__assert_fail@plt+0x32a4>
   14270:	b	1412c <__assert_fail@plt+0x3224>
   14274:	cmp	r2, #0
   14278:	cmpne	r1, #0
   1427c:	moveq	r2, #1
   14280:	moveq	r1, r2
   14284:	b	1430c <__assert_fail@plt+0x3404>
   14288:	push	{r4, lr}
   1428c:	mov	r0, #14
   14290:	bl	10e9c <nl_langinfo@plt>
   14294:	cmp	r0, #0
   14298:	beq	142b0 <__assert_fail@plt+0x33a8>
   1429c:	ldrb	r2, [r0]
   142a0:	ldr	r3, [pc, #16]	; 142b8 <__assert_fail@plt+0x33b0>
   142a4:	cmp	r2, #0
   142a8:	moveq	r0, r3
   142ac:	pop	{r4, pc}
   142b0:	ldr	r0, [pc]	; 142b8 <__assert_fail@plt+0x33b0>
   142b4:	pop	{r4, pc}
   142b8:	andeq	r5, r1, r4, asr r2
   142bc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   142c0:	subs	r5, r0, #0
   142c4:	mov	r7, r2
   142c8:	addeq	r5, sp, #4
   142cc:	mov	r6, r1
   142d0:	mov	r0, r5
   142d4:	bl	10dac <mbrtowc@plt>
   142d8:	cmp	r7, #0
   142dc:	cmnne	r0, #3
   142e0:	mov	r4, r0
   142e4:	bls	14300 <__assert_fail@plt+0x33f8>
   142e8:	mov	r0, #0
   142ec:	bl	14338 <__assert_fail@plt+0x3430>
   142f0:	cmp	r0, #0
   142f4:	ldrbeq	r3, [r6]
   142f8:	moveq	r4, #1
   142fc:	streq	r3, [r5]
   14300:	mov	r0, r4
   14304:	add	sp, sp, #12
   14308:	pop	{r4, r5, r6, r7, pc}
   1430c:	umull	r2, r3, r1, r2
   14310:	cmp	r3, #0
   14314:	bne	14320 <__assert_fail@plt+0x3418>
   14318:	mov	r1, r2
   1431c:	b	141ac <__assert_fail@plt+0x32a4>
   14320:	push	{r4, lr}
   14324:	bl	10e24 <__errno_location@plt>
   14328:	mov	r3, #12
   1432c:	str	r3, [r0]
   14330:	mov	r0, #0
   14334:	pop	{r4, pc}
   14338:	push	{lr}		; (str lr, [sp, #-4]!)
   1433c:	sub	sp, sp, #268	; 0x10c
   14340:	movw	r2, #257	; 0x101
   14344:	add	r1, sp, #4
   14348:	bl	14394 <__assert_fail@plt+0x348c>
   1434c:	cmp	r0, #0
   14350:	movne	r0, #0
   14354:	bne	14384 <__assert_fail@plt+0x347c>
   14358:	ldr	r1, [pc, #44]	; 1438c <__assert_fail@plt+0x3484>
   1435c:	add	r0, sp, #4
   14360:	bl	10cc8 <strcmp@plt>
   14364:	cmp	r0, #0
   14368:	beq	14380 <__assert_fail@plt+0x3478>
   1436c:	ldr	r1, [pc, #28]	; 14390 <__assert_fail@plt+0x3488>
   14370:	add	r0, sp, #4
   14374:	bl	10cc8 <strcmp@plt>
   14378:	adds	r0, r0, #0
   1437c:	movne	r0, #1
   14380:	and	r0, r0, #1
   14384:	add	sp, sp, #268	; 0x10c
   14388:	pop	{pc}		; (ldr pc, [sp], #4)
   1438c:	andeq	r5, r1, sl, asr r2
   14390:	andeq	r5, r1, ip, asr r2
   14394:	push	{r4, r5, r6, lr}
   14398:	mov	r5, r1
   1439c:	mov	r1, #0
   143a0:	mov	r4, r2
   143a4:	bl	10e84 <setlocale@plt>
   143a8:	subs	r6, r0, #0
   143ac:	bne	143c0 <__assert_fail@plt+0x34b8>
   143b0:	cmp	r4, #0
   143b4:	mov	r0, #22
   143b8:	strbne	r6, [r5]
   143bc:	pop	{r4, r5, r6, pc}
   143c0:	bl	10e18 <strlen@plt>
   143c4:	cmp	r4, r0
   143c8:	bls	143e4 <__assert_fail@plt+0x34dc>
   143cc:	add	r2, r0, #1
   143d0:	mov	r1, r6
   143d4:	mov	r0, r5
   143d8:	bl	10d04 <memcpy@plt>
   143dc:	mov	r0, #0
   143e0:	pop	{r4, r5, r6, pc}
   143e4:	cmp	r4, #0
   143e8:	beq	14408 <__assert_fail@plt+0x3500>
   143ec:	sub	r4, r4, #1
   143f0:	mov	r1, r6
   143f4:	mov	r2, r4
   143f8:	mov	r0, r5
   143fc:	bl	10d04 <memcpy@plt>
   14400:	mov	r3, #0
   14404:	strb	r3, [r5, r4]
   14408:	mov	r0, #34	; 0x22
   1440c:	pop	{r4, r5, r6, pc}
   14410:	mov	r1, #0
   14414:	b	10e84 <setlocale@plt>
   14418:	cmp	r3, #0
   1441c:	cmpeq	r2, #0
   14420:	bne	14438 <__assert_fail@plt+0x3530>
   14424:	cmp	r1, #0
   14428:	cmpeq	r0, #0
   1442c:	mvnne	r1, #0
   14430:	mvnne	r0, #0
   14434:	b	14454 <__assert_fail@plt+0x354c>
   14438:	sub	sp, sp, #8
   1443c:	push	{sp, lr}
   14440:	bl	14464 <__assert_fail@plt+0x355c>
   14444:	ldr	lr, [sp, #4]
   14448:	add	sp, sp, #8
   1444c:	pop	{r2, r3}
   14450:	bx	lr
   14454:	push	{r1, lr}
   14458:	mov	r0, #8
   1445c:	bl	10cbc <raise@plt>
   14460:	pop	{r1, pc}
   14464:	cmp	r1, r3
   14468:	cmpeq	r0, r2
   1446c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14470:	mov	r4, r0
   14474:	movcc	r0, #0
   14478:	mov	r5, r1
   1447c:	ldr	lr, [sp, #36]	; 0x24
   14480:	movcc	r1, r0
   14484:	bcc	14580 <__assert_fail@plt+0x3678>
   14488:	cmp	r3, #0
   1448c:	clzeq	ip, r2
   14490:	clzne	ip, r3
   14494:	addeq	ip, ip, #32
   14498:	cmp	r5, #0
   1449c:	clzeq	r1, r4
   144a0:	addeq	r1, r1, #32
   144a4:	clzne	r1, r5
   144a8:	sub	ip, ip, r1
   144ac:	sub	sl, ip, #32
   144b0:	lsl	r9, r3, ip
   144b4:	rsb	fp, ip, #32
   144b8:	orr	r9, r9, r2, lsl sl
   144bc:	orr	r9, r9, r2, lsr fp
   144c0:	lsl	r8, r2, ip
   144c4:	cmp	r5, r9
   144c8:	cmpeq	r4, r8
   144cc:	movcc	r0, #0
   144d0:	movcc	r1, r0
   144d4:	bcc	144f0 <__assert_fail@plt+0x35e8>
   144d8:	mov	r0, #1
   144dc:	subs	r4, r4, r8
   144e0:	lsl	r1, r0, sl
   144e4:	orr	r1, r1, r0, lsr fp
   144e8:	lsl	r0, r0, ip
   144ec:	sbc	r5, r5, r9
   144f0:	cmp	ip, #0
   144f4:	beq	14580 <__assert_fail@plt+0x3678>
   144f8:	lsr	r6, r8, #1
   144fc:	orr	r6, r6, r9, lsl #31
   14500:	lsr	r7, r9, #1
   14504:	mov	r2, ip
   14508:	b	1452c <__assert_fail@plt+0x3624>
   1450c:	subs	r3, r4, r6
   14510:	sbc	r8, r5, r7
   14514:	adds	r3, r3, r3
   14518:	adc	r8, r8, r8
   1451c:	adds	r4, r3, #1
   14520:	adc	r5, r8, #0
   14524:	subs	r2, r2, #1
   14528:	beq	14548 <__assert_fail@plt+0x3640>
   1452c:	cmp	r5, r7
   14530:	cmpeq	r4, r6
   14534:	bcs	1450c <__assert_fail@plt+0x3604>
   14538:	adds	r4, r4, r4
   1453c:	adc	r5, r5, r5
   14540:	subs	r2, r2, #1
   14544:	bne	1452c <__assert_fail@plt+0x3624>
   14548:	lsr	r3, r4, ip
   1454c:	orr	r3, r3, r5, lsl fp
   14550:	lsr	r2, r5, ip
   14554:	orr	r3, r3, r5, lsr sl
   14558:	adds	r0, r0, r4
   1455c:	mov	r4, r3
   14560:	lsl	r3, r2, ip
   14564:	orr	r3, r3, r4, lsl sl
   14568:	lsl	ip, r4, ip
   1456c:	orr	r3, r3, r4, lsr fp
   14570:	adc	r1, r1, r5
   14574:	subs	r0, r0, ip
   14578:	mov	r5, r2
   1457c:	sbc	r1, r1, r3
   14580:	cmp	lr, #0
   14584:	strdne	r4, [lr]
   14588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1458c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14590:	mov	r7, r0
   14594:	ldr	r6, [pc, #72]	; 145e4 <__assert_fail@plt+0x36dc>
   14598:	ldr	r5, [pc, #72]	; 145e8 <__assert_fail@plt+0x36e0>
   1459c:	add	r6, pc, r6
   145a0:	add	r5, pc, r5
   145a4:	sub	r6, r6, r5
   145a8:	mov	r8, r1
   145ac:	mov	r9, r2
   145b0:	bl	10c84 <calloc@plt-0x20>
   145b4:	asrs	r6, r6, #2
   145b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   145bc:	mov	r4, #0
   145c0:	add	r4, r4, #1
   145c4:	ldr	r3, [r5], #4
   145c8:	mov	r2, r9
   145cc:	mov	r1, r8
   145d0:	mov	r0, r7
   145d4:	blx	r3
   145d8:	cmp	r6, r4
   145dc:	bne	145c0 <__assert_fail@plt+0x36b8>
   145e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145e4:	andeq	r1, r1, r0, ror r9
   145e8:	andeq	r1, r1, r8, ror #18
   145ec:	bx	lr
   145f0:	ldr	r3, [pc, #12]	; 14604 <__assert_fail@plt+0x36fc>
   145f4:	mov	r1, #0
   145f8:	add	r3, pc, r3
   145fc:	ldr	r2, [r3]
   14600:	b	10e30 <__cxa_atexit@plt>
   14604:	andeq	r1, r1, r4, ror #21

Disassembly of section .fini:

00014608 <.fini>:
   14608:	push	{r3, lr}
   1460c:	pop	{r3, pc}
