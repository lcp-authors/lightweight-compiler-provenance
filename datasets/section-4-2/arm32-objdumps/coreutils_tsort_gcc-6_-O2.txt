
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c24 <.init>:
   10c24:	push	{r3, lr}
   10c28:	bl	11620 <__assert_fail@plt+0x784>
   10c2c:	pop	{r3, pc}

Disassembly of section .plt:

00010c30 <calloc@plt-0x14>:
   10c30:	push	{lr}		; (str lr, [sp, #-4]!)
   10c34:	ldr	lr, [pc, #4]	; 10c40 <calloc@plt-0x4>
   10c38:	add	lr, pc, lr
   10c3c:	ldr	pc, [lr, #8]!
   10c40:	andeq	r6, r1, r0, asr #7

00010c44 <calloc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #90112	; 0x16000
   10c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c50 <fputs_unlocked@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #90112	; 0x16000
   10c58:	ldr	pc, [ip, #952]!	; 0x3b8

00010c5c <raise@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #90112	; 0x16000
   10c64:	ldr	pc, [ip, #944]!	; 0x3b0

00010c68 <strcmp@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #90112	; 0x16000
   10c70:	ldr	pc, [ip, #936]!	; 0x3a8

00010c74 <posix_fadvise64@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #90112	; 0x16000
   10c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c80 <fflush@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #90112	; 0x16000
   10c88:	ldr	pc, [ip, #920]!	; 0x398

00010c8c <free@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #90112	; 0x16000
   10c94:	ldr	pc, [ip, #912]!	; 0x390

00010c98 <_exit@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #90112	; 0x16000
   10ca0:	ldr	pc, [ip, #904]!	; 0x388

00010ca4 <memcpy@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #90112	; 0x16000
   10cac:	ldr	pc, [ip, #896]!	; 0x380

00010cb0 <mbsinit@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #90112	; 0x16000
   10cb8:	ldr	pc, [ip, #888]!	; 0x378

00010cbc <memcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #90112	; 0x16000
   10cc4:	ldr	pc, [ip, #880]!	; 0x370

00010cc8 <fputc_unlocked@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #90112	; 0x16000
   10cd0:	ldr	pc, [ip, #872]!	; 0x368

00010cd4 <dcgettext@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #90112	; 0x16000
   10cdc:	ldr	pc, [ip, #864]!	; 0x360

00010ce0 <dup2@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #90112	; 0x16000
   10ce8:	ldr	pc, [ip, #856]!	; 0x358

00010cec <realloc@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #90112	; 0x16000
   10cf4:	ldr	pc, [ip, #848]!	; 0x350

00010cf8 <textdomain@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #90112	; 0x16000
   10d00:	ldr	pc, [ip, #840]!	; 0x348

00010d04 <iswprint@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #832]!	; 0x340

00010d10 <fwrite@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #824]!	; 0x338

00010d1c <lseek64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #816]!	; 0x330

00010d28 <__ctype_get_mb_cur_max@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #808]!	; 0x328

00010d34 <__fpending@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #800]!	; 0x320

00010d40 <mbrtowc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #792]!	; 0x318

00010d4c <error@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #784]!	; 0x310

00010d58 <open64@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #90112	; 0x16000
   10d60:	ldr	pc, [ip, #776]!	; 0x308

00010d64 <puts@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #90112	; 0x16000
   10d6c:	ldr	pc, [ip, #768]!	; 0x300

00010d70 <malloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #90112	; 0x16000
   10d78:	ldr	pc, [ip, #760]!	; 0x2f8

00010d7c <__libc_start_main@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #752]!	; 0x2f0

00010d88 <__freading@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #744]!	; 0x2e8

00010d94 <__gmon_start__@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00010da0 <freopen64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #728]!	; 0x2d8

00010dac <getopt_long@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #720]!	; 0x2d0

00010db8 <__ctype_b_loc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc4 <exit@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd0 <strlen@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00010ddc <__errno_location@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #688]!	; 0x2b0

00010de8 <__cxa_atexit@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #680]!	; 0x2a8

00010df4 <memset@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00010e00 <__printf_chk@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #664]!	; 0x298

00010e0c <fileno@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #656]!	; 0x290

00010e18 <__fprintf_chk@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #648]!	; 0x288

00010e24 <fclose@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #640]!	; 0x280

00010e30 <fseeko64@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #632]!	; 0x278

00010e3c <__uflow@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #624]!	; 0x270

00010e48 <setlocale@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #616]!	; 0x268

00010e54 <strrchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #608]!	; 0x260

00010e60 <nl_langinfo@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #600]!	; 0x258

00010e6c <bindtextdomain@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #592]!	; 0x250

00010e78 <strncmp@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #584]!	; 0x248

00010e84 <abort@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #576]!	; 0x240

00010e90 <close@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #568]!	; 0x238

00010e9c <__assert_fail@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #560]!	; 0x230

Disassembly of section .text:

00010ea8 <.text>:
   10ea8:	push	{r7, fp, lr}
   10eac:	mov	r5, r0
   10eb0:	sub	sp, sp, #60	; 0x3c
   10eb4:	ldr	r0, [r1]
   10eb8:	mov	r4, r1
   10ebc:	bl	12280 <__assert_fail@plt+0x13e4>
   10ec0:	ldr	r1, [pc, #1696]	; 11568 <__assert_fail@plt+0x6cc>
   10ec4:	mov	r0, #6
   10ec8:	bl	10e48 <setlocale@plt>
   10ecc:	ldr	r1, [pc, #1688]	; 1156c <__assert_fail@plt+0x6d0>
   10ed0:	ldr	r0, [pc, #1688]	; 11570 <__assert_fail@plt+0x6d4>
   10ed4:	bl	10e6c <bindtextdomain@plt>
   10ed8:	ldr	r0, [pc, #1680]	; 11570 <__assert_fail@plt+0x6d4>
   10edc:	bl	10cf8 <textdomain@plt>
   10ee0:	ldr	r0, [pc, #1676]	; 11574 <__assert_fail@plt+0x6d8>
   10ee4:	bl	15710 <__assert_fail@plt+0x4874>
   10ee8:	ldr	r1, [pc, #1672]	; 11578 <__assert_fail@plt+0x6dc>
   10eec:	ldr	r2, [pc, #1672]	; 1157c <__assert_fail@plt+0x6e0>
   10ef0:	ldr	r3, [pc, #1672]	; 11580 <__assert_fail@plt+0x6e4>
   10ef4:	ldr	r1, [r1]
   10ef8:	ldr	r8, [pc, #1668]	; 11584 <__assert_fail@plt+0x6e8>
   10efc:	mov	r7, #1
   10f00:	mov	r6, #0
   10f04:	str	r1, [sp]
   10f08:	str	r2, [sp, #12]
   10f0c:	str	r3, [sp, #8]
   10f10:	ldr	r2, [pc, #1648]	; 11588 <__assert_fail@plt+0x6ec>
   10f14:	ldr	r3, [pc, #1648]	; 1158c <__assert_fail@plt+0x6f0>
   10f18:	mov	r1, r4
   10f1c:	mov	r0, r5
   10f20:	str	r6, [sp, #16]
   10f24:	str	r7, [sp, #4]
   10f28:	bl	121a8 <__assert_fail@plt+0x130c>
   10f2c:	ldr	r3, [r8]
   10f30:	sub	r2, r5, r3
   10f34:	cmp	r2, r7
   10f38:	ble	10f7c <__assert_fail@plt+0xe0>
   10f3c:	mov	r2, #5
   10f40:	ldr	r1, [pc, #1608]	; 11590 <__assert_fail@plt+0x6f4>
   10f44:	mov	r0, r6
   10f48:	bl	10cd4 <dcgettext@plt>
   10f4c:	ldr	r3, [r8]
   10f50:	add	r3, r3, r7
   10f54:	mov	r5, r0
   10f58:	ldr	r0, [r4, r3, lsl #2]
   10f5c:	bl	14140 <__assert_fail@plt+0x32a4>
   10f60:	mov	r2, r5
   10f64:	mov	r1, r6
   10f68:	mov	r3, r0
   10f6c:	mov	r0, r6
   10f70:	bl	10d4c <error@plt>
   10f74:	mov	r0, r7
   10f78:	bl	1190c <__assert_fail@plt+0xa70>
   10f7c:	cmp	r5, r3
   10f80:	beq	1132c <__assert_fail@plt+0x490>
   10f84:	ldr	r3, [r4, r3, lsl #2]
   10f88:	ldr	r1, [pc, #1540]	; 11594 <__assert_fail@plt+0x6f8>
   10f8c:	mov	r0, r3
   10f90:	str	r3, [sp, #40]	; 0x28
   10f94:	bl	10c68 <strcmp@plt>
   10f98:	mov	r4, r0
   10f9c:	str	r0, [sp, #44]	; 0x2c
   10fa0:	mov	r0, #28
   10fa4:	bl	14de4 <__assert_fail@plt+0x3f48>
   10fa8:	ldr	r3, [pc, #1512]	; 11598 <__assert_fail@plt+0x6fc>
   10fac:	cmp	r4, #0
   10fb0:	str	r3, [sp, #32]
   10fb4:	str	r0, [sp, #36]	; 0x24
   10fb8:	beq	10fd4 <__assert_fail@plt+0x138>
   10fbc:	ldr	r1, [pc, #1496]	; 1159c <__assert_fail@plt+0x700>
   10fc0:	ldr	r0, [sp, #40]	; 0x28
   10fc4:	ldr	r2, [r3]
   10fc8:	bl	11edc <__assert_fail@plt+0x1040>
   10fcc:	subs	r4, r0, #0
   10fd0:	beq	11514 <__assert_fail@plt+0x678>
   10fd4:	ldr	r3, [sp, #32]
   10fd8:	mov	r1, #2
   10fdc:	ldr	r0, [r3]
   10fe0:	bl	11d00 <__assert_fail@plt+0xe64>
   10fe4:	add	r0, sp, #48	; 0x30
   10fe8:	bl	14158 <__assert_fail@plt+0x32bc>
   10fec:	mov	r8, #1
   10ff0:	mvn	r9, #0
   10ff4:	mov	r3, #0
   10ff8:	str	r3, [sp, #24]
   10ffc:	ldr	r0, [sp, #32]
   11000:	add	r3, sp, #48	; 0x30
   11004:	mov	r2, #3
   11008:	ldr	r1, [pc, #1424]	; 115a0 <__assert_fail@plt+0x704>
   1100c:	ldr	r0, [r0]
   11010:	bl	14168 <__assert_fail@plt+0x32cc>
   11014:	cmn	r0, #1
   11018:	beq	112d4 <__assert_fail@plt+0x438>
   1101c:	cmp	r0, #0
   11020:	beq	11318 <__assert_fail@plt+0x47c>
   11024:	ldr	r3, [sp, #36]	; 0x24
   11028:	ldr	r4, [sp, #52]	; 0x34
   1102c:	ldr	sl, [r3, #8]
   11030:	cmp	sl, #0
   11034:	beq	1128c <__assert_fail@plt+0x3f0>
   11038:	mov	r6, r3
   1103c:	mov	r5, sl
   11040:	b	11068 <__assert_fail@plt+0x1cc>
   11044:	ldmib	sl, {r2, r3}
   11048:	movlt	r3, r2
   1104c:	cmp	r3, #0
   11050:	beq	110a0 <__assert_fail@plt+0x204>
   11054:	ldrsb	r2, [r3, #12]
   11058:	cmp	r2, #0
   1105c:	movne	r6, sl
   11060:	movne	r5, r3
   11064:	mov	sl, r3
   11068:	cmp	r4, #0
   1106c:	beq	11364 <__assert_fail@plt+0x4c8>
   11070:	ldr	r1, [sl]
   11074:	cmp	r1, #0
   11078:	beq	11364 <__assert_fail@plt+0x4c8>
   1107c:	mov	r0, r4
   11080:	bl	10c68 <strcmp@plt>
   11084:	cmp	r0, #0
   11088:	bne	11044 <__assert_fail@plt+0x1a8>
   1108c:	ldr	r3, [sp, #24]
   11090:	cmp	r3, #0
   11094:	bne	11200 <__assert_fail@plt+0x364>
   11098:	str	sl, [sp, #24]
   1109c:	b	10ffc <__assert_fail@plt+0x160>
   110a0:	mov	fp, r0
   110a4:	mov	r0, #28
   110a8:	bl	14de4 <__assert_fail@plt+0x3f48>
   110ac:	mov	r7, r0
   110b0:	mov	r0, r4
   110b4:	bl	14ee0 <__assert_fail@plt+0x4044>
   110b8:	cmp	fp, #0
   110bc:	str	r0, [r7]
   110c0:	ldr	r1, [r5]
   110c4:	strlt	r7, [sl, #4]
   110c8:	strge	r7, [sl, #8]
   110cc:	cmp	r1, #0
   110d0:	beq	11554 <__assert_fail@plt+0x6b8>
   110d4:	mov	r0, r4
   110d8:	bl	10c68 <strcmp@plt>
   110dc:	cmp	r0, #0
   110e0:	beq	11554 <__assert_fail@plt+0x6b8>
   110e4:	ldmib	r5, {r3, sl}
   110e8:	strlt	r9, [sp, #28]
   110ec:	strge	r8, [sp, #28]
   110f0:	movlt	sl, r3
   110f4:	cmp	sl, r7
   110f8:	beq	11154 <__assert_fail@plt+0x2b8>
   110fc:	cmp	sl, #0
   11100:	beq	11350 <__assert_fail@plt+0x4b4>
   11104:	ldr	r1, [sl]
   11108:	cmp	r1, #0
   1110c:	beq	11350 <__assert_fail@plt+0x4b4>
   11110:	mov	fp, sl
   11114:	b	1112c <__assert_fail@plt+0x290>
   11118:	cmp	fp, #0
   1111c:	beq	11350 <__assert_fail@plt+0x4b4>
   11120:	ldr	r1, [fp]
   11124:	cmp	r1, #0
   11128:	beq	11350 <__assert_fail@plt+0x4b4>
   1112c:	mov	r0, r4
   11130:	bl	10c68 <strcmp@plt>
   11134:	cmp	r0, #0
   11138:	beq	11350 <__assert_fail@plt+0x4b4>
   1113c:	strblt	r9, [fp, #12]
   11140:	strbge	r8, [fp, #12]
   11144:	ldrlt	fp, [fp, #4]
   11148:	ldrge	fp, [fp, #8]
   1114c:	cmp	r7, fp
   11150:	bne	11118 <__assert_fail@plt+0x27c>
   11154:	ldrsb	r3, [r5, #12]
   11158:	cmp	r3, #0
   1115c:	beq	11240 <__assert_fail@plt+0x3a4>
   11160:	ldr	r2, [sp, #28]
   11164:	rsb	r2, r2, #0
   11168:	cmp	r3, r2
   1116c:	beq	11240 <__assert_fail@plt+0x3a4>
   11170:	ldrsb	r3, [sl, #12]
   11174:	ldr	r1, [sp, #28]
   11178:	cmp	r3, r1
   1117c:	beq	11254 <__assert_fail@plt+0x3b8>
   11180:	ldr	r3, [sp, #28]
   11184:	cmp	r3, #0
   11188:	ldmib	sl, {r1, r3}
   1118c:	blt	112b8 <__assert_fail@plt+0x41c>
   11190:	ldr	r0, [r1, #8]
   11194:	mov	r3, r1
   11198:	str	r0, [sl, #4]
   1119c:	ldr	r0, [r1, #4]
   111a0:	str	sl, [r1, #8]
   111a4:	str	r0, [r5, #8]
   111a8:	str	r5, [r1, #4]
   111ac:	mov	r1, #0
   111b0:	strb	r1, [r5, #12]
   111b4:	strb	r1, [sl, #12]
   111b8:	ldrsb	r1, [r3, #12]
   111bc:	ldr	r0, [sp, #28]
   111c0:	cmp	r1, r0
   111c4:	strbeq	r2, [r5, #12]
   111c8:	beq	111d8 <__assert_fail@plt+0x33c>
   111cc:	cmp	r2, r1
   111d0:	ldrbeq	r2, [sp, #28]
   111d4:	strbeq	r2, [sl, #12]
   111d8:	mov	r2, #0
   111dc:	strb	r2, [r3, #12]
   111e0:	ldr	r2, [r6, #8]
   111e4:	mov	sl, r7
   111e8:	cmp	r5, r2
   111ec:	streq	r3, [r6, #8]
   111f0:	strne	r3, [r6, #4]
   111f4:	ldr	r3, [sp, #24]
   111f8:	cmp	r3, #0
   111fc:	beq	11098 <__assert_fail@plt+0x1fc>
   11200:	ldr	r1, [sl]
   11204:	ldr	r0, [r3]
   11208:	bl	10c68 <strcmp@plt>
   1120c:	cmp	r0, #0
   11210:	beq	10fec <__assert_fail@plt+0x150>
   11214:	ldr	r3, [sl, #16]
   11218:	mov	r0, #8
   1121c:	add	r3, r3, #1
   11220:	str	r3, [sl, #16]
   11224:	bl	149b4 <__assert_fail@plt+0x3b18>
   11228:	ldr	r2, [sp, #24]
   1122c:	ldr	r3, [r2, #24]
   11230:	str	sl, [r0]
   11234:	str	r3, [r0, #4]
   11238:	str	r0, [r2, #24]
   1123c:	b	10fec <__assert_fail@plt+0x150>
   11240:	ldr	r2, [sp, #28]
   11244:	mov	sl, r7
   11248:	add	r3, r3, r2
   1124c:	strb	r3, [r5, #12]
   11250:	b	1108c <__assert_fail@plt+0x1f0>
   11254:	cmn	r1, #1
   11258:	mov	r3, r1
   1125c:	ldreq	r3, [sl, #8]
   11260:	ldrne	r3, [sl, #4]
   11264:	streq	r3, [r5, #4]
   11268:	strne	r3, [r5, #8]
   1126c:	mov	r2, #0
   11270:	mov	r3, #0
   11274:	strb	r3, [sl, #12]
   11278:	streq	r5, [sl, #8]
   1127c:	strne	r5, [sl, #4]
   11280:	mov	r3, sl
   11284:	strb	r2, [r5, #12]
   11288:	b	111e0 <__assert_fail@plt+0x344>
   1128c:	mov	r0, #28
   11290:	bl	14de4 <__assert_fail@plt+0x3f48>
   11294:	cmp	r4, #0
   11298:	mov	sl, r0
   1129c:	beq	112ac <__assert_fail@plt+0x410>
   112a0:	mov	r0, r4
   112a4:	bl	14ee0 <__assert_fail@plt+0x4044>
   112a8:	str	r0, [sl]
   112ac:	ldr	r3, [sp, #36]	; 0x24
   112b0:	str	sl, [r3, #8]
   112b4:	b	1108c <__assert_fail@plt+0x1f0>
   112b8:	ldr	r1, [r3, #4]
   112bc:	str	r1, [sl, #8]
   112c0:	ldr	r1, [r3, #8]
   112c4:	str	sl, [r3, #4]
   112c8:	str	r1, [r5, #4]
   112cc:	str	r5, [r3, #8]
   112d0:	b	111ac <__assert_fail@plt+0x310>
   112d4:	ldr	r3, [sp, #24]
   112d8:	cmp	r3, #0
   112dc:	beq	11378 <__assert_fail@plt+0x4dc>
   112e0:	mov	r2, #5
   112e4:	ldr	r1, [pc, #696]	; 115a4 <__assert_fail@plt+0x708>
   112e8:	mov	r0, #0
   112ec:	bl	10cd4 <dcgettext@plt>
   112f0:	ldr	r2, [sp, #40]	; 0x28
   112f4:	mov	r1, #3
   112f8:	mov	r4, r0
   112fc:	mov	r0, #0
   11300:	bl	13fbc <__assert_fail@plt+0x3120>
   11304:	mov	r2, r4
   11308:	mov	r1, #0
   1130c:	mov	r3, r0
   11310:	mov	r0, #1
   11314:	bl	10d4c <error@plt>
   11318:	ldr	r3, [pc, #648]	; 115a8 <__assert_fail@plt+0x70c>
   1131c:	ldr	r2, [pc, #648]	; 115ac <__assert_fail@plt+0x710>
   11320:	ldr	r1, [pc, #648]	; 115b0 <__assert_fail@plt+0x714>
   11324:	ldr	r0, [pc, #648]	; 115b4 <__assert_fail@plt+0x718>
   11328:	bl	10e9c <__assert_fail@plt>
   1132c:	mov	r0, #28
   11330:	str	r6, [sp, #44]	; 0x2c
   11334:	bl	14de4 <__assert_fail@plt+0x3f48>
   11338:	ldr	r3, [pc, #596]	; 11594 <__assert_fail@plt+0x6f8>
   1133c:	str	r3, [sp, #40]	; 0x28
   11340:	ldr	r3, [pc, #592]	; 11598 <__assert_fail@plt+0x6fc>
   11344:	str	r3, [sp, #32]
   11348:	str	r0, [sp, #36]	; 0x24
   1134c:	b	10fd4 <__assert_fail@plt+0x138>
   11350:	ldr	r3, [pc, #608]	; 115b8 <__assert_fail@plt+0x71c>
   11354:	mov	r2, #177	; 0xb1
   11358:	ldr	r1, [pc, #592]	; 115b0 <__assert_fail@plt+0x714>
   1135c:	ldr	r0, [pc, #600]	; 115bc <__assert_fail@plt+0x720>
   11360:	bl	10e9c <__assert_fail@plt>
   11364:	ldr	r3, [pc, #588]	; 115b8 <__assert_fail@plt+0x71c>
   11368:	mov	r2, #140	; 0x8c
   1136c:	ldr	r1, [pc, #572]	; 115b0 <__assert_fail@plt+0x714>
   11370:	ldr	r0, [pc, #584]	; 115c0 <__assert_fail@plt+0x724>
   11374:	bl	10e9c <__assert_fail@plt>
   11378:	ldr	r3, [sp, #36]	; 0x24
   1137c:	ldr	r7, [r3, #8]
   11380:	cmp	r7, #0
   11384:	beq	11394 <__assert_fail@plt+0x4f8>
   11388:	ldr	r1, [pc, #564]	; 115c4 <__assert_fail@plt+0x728>
   1138c:	mov	r0, r7
   11390:	bl	11728 <__assert_fail@plt+0x88c>
   11394:	ldr	r5, [pc, #556]	; 115c8 <__assert_fail@plt+0x72c>
   11398:	ldr	r8, [pc, #556]	; 115cc <__assert_fail@plt+0x730>
   1139c:	ldr	r9, [pc, #556]	; 115d0 <__assert_fail@plt+0x734>
   113a0:	mov	fp, #1
   113a4:	ldr	r3, [r5]
   113a8:	cmp	r3, #0
   113ac:	beq	11454 <__assert_fail@plt+0x5b8>
   113b0:	cmp	r7, #0
   113b4:	beq	114a0 <__assert_fail@plt+0x604>
   113b8:	mov	r1, r8
   113bc:	mov	r0, r7
   113c0:	bl	11728 <__assert_fail@plt+0x88c>
   113c4:	ldr	r3, [r5, #4]
   113c8:	cmp	r3, #0
   113cc:	ldreq	ip, [r5]
   113d0:	beq	1144c <__assert_fail@plt+0x5b0>
   113d4:	mov	sl, #1
   113d8:	mov	r6, #0
   113dc:	ldr	r0, [r3]
   113e0:	ldr	r4, [r3, #24]
   113e4:	bl	10d64 <puts@plt>
   113e8:	ldm	r5, {ip, lr}
   113ec:	cmp	r4, #0
   113f0:	movne	r0, r6
   113f4:	sub	ip, ip, #1
   113f8:	str	ip, [r5]
   113fc:	strb	sl, [lr, #13]
   11400:	ldrne	r1, [r5, #8]
   11404:	beq	1143c <__assert_fail@plt+0x5a0>
   11408:	ldr	r2, [r4]
   1140c:	ldr	r4, [r4, #4]
   11410:	ldr	r3, [r2, #16]
   11414:	sub	r3, r3, #1
   11418:	cmp	r3, #0
   1141c:	str	r3, [r2, #16]
   11420:	moveq	r0, sl
   11424:	streq	r2, [r1, #20]
   11428:	moveq	r1, r2
   1142c:	cmp	r4, #0
   11430:	bne	11408 <__assert_fail@plt+0x56c>
   11434:	cmp	r0, #0
   11438:	strne	r1, [r5, #8]
   1143c:	ldr	r3, [lr, #20]
   11440:	cmp	r3, #0
   11444:	str	r3, [r5, #4]
   11448:	bne	113dc <__assert_fail@plt+0x540>
   1144c:	cmp	ip, #0
   11450:	bne	114ac <__assert_fail@plt+0x610>
   11454:	ldr	r3, [sp, #32]
   11458:	ldr	r0, [r3]
   1145c:	bl	11d34 <__assert_fail@plt+0xe98>
   11460:	cmp	r0, #0
   11464:	beq	1150c <__assert_fail@plt+0x670>
   11468:	bl	10ddc <__errno_location@plt>
   1146c:	ldr	r3, [sp, #44]	; 0x2c
   11470:	cmp	r3, #0
   11474:	ldr	r4, [r0]
   11478:	bne	11540 <__assert_fail@plt+0x6a4>
   1147c:	mov	r0, r3
   11480:	mov	r2, #5
   11484:	ldr	r1, [pc, #328]	; 115d4 <__assert_fail@plt+0x738>
   11488:	bl	10cd4 <dcgettext@plt>
   1148c:	mov	r3, r0
   11490:	mov	r1, r4
   11494:	ldr	r2, [pc, #316]	; 115d8 <__assert_fail@plt+0x73c>
   11498:	mov	r0, #1
   1149c:	bl	10d4c <error@plt>
   114a0:	ldr	r3, [r5, #4]
   114a4:	cmp	r3, #0
   114a8:	bne	113d4 <__assert_fail@plt+0x538>
   114ac:	mov	r2, #5
   114b0:	ldr	r1, [pc, #292]	; 115dc <__assert_fail@plt+0x740>
   114b4:	mov	r0, #0
   114b8:	bl	10cd4 <dcgettext@plt>
   114bc:	ldr	r2, [sp, #40]	; 0x28
   114c0:	mov	r1, #3
   114c4:	mov	fp, #0
   114c8:	mov	r4, r0
   114cc:	mov	r0, #0
   114d0:	bl	13fbc <__assert_fail@plt+0x3120>
   114d4:	mov	r1, #0
   114d8:	mov	r2, r4
   114dc:	mov	r3, r0
   114e0:	mov	r0, r1
   114e4:	bl	10d4c <error@plt>
   114e8:	cmp	r7, #0
   114ec:	beq	114fc <__assert_fail@plt+0x660>
   114f0:	mov	r1, r9
   114f4:	mov	r0, r7
   114f8:	bl	11728 <__assert_fail@plt+0x88c>
   114fc:	ldr	r3, [r5, #12]
   11500:	cmp	r3, #0
   11504:	bne	114e8 <__assert_fail@plt+0x64c>
   11508:	b	113a4 <__assert_fail@plt+0x508>
   1150c:	eor	r0, fp, #1
   11510:	bl	10dc4 <exit@plt>
   11514:	bl	10ddc <__errno_location@plt>
   11518:	ldr	r2, [sp, #40]	; 0x28
   1151c:	mov	r1, #3
   11520:	ldr	r5, [r0]
   11524:	mov	r0, r4
   11528:	bl	13fbc <__assert_fail@plt+0x3120>
   1152c:	mov	r1, r5
   11530:	ldr	r2, [pc, #160]	; 115d8 <__assert_fail@plt+0x73c>
   11534:	mov	r3, r0
   11538:	mov	r0, r7
   1153c:	bl	10d4c <error@plt>
   11540:	ldr	r2, [sp, #40]	; 0x28
   11544:	mov	r1, #3
   11548:	mov	r0, #0
   1154c:	bl	13fbc <__assert_fail@plt+0x3120>
   11550:	b	1148c <__assert_fail@plt+0x5f0>
   11554:	ldr	r3, [pc, #92]	; 115b8 <__assert_fail@plt+0x71c>
   11558:	mov	r2, #163	; 0xa3
   1155c:	ldr	r1, [pc, #76]	; 115b0 <__assert_fail@plt+0x714>
   11560:	ldr	r0, [pc, #120]	; 115e0 <__assert_fail@plt+0x744>
   11564:	bl	10e9c <__assert_fail@plt>
   11568:	andeq	r5, r1, r8, ror r8
   1156c:	andeq	r5, r1, r4, lsr #19
   11570:	strdeq	r5, [r1], -r8
   11574:	andeq	r1, r1, r0, lsl ip
   11578:	andeq	r7, r2, r4, ror #1
   1157c:			; <UNDEFINED> instruction: 0x000159bc
   11580:	andeq	r1, r1, ip, lsl #18
   11584:	andeq	r7, r2, r8, lsr r1
   11588:	andeq	r5, r1, r0, lsl #15
   1158c:	strdeq	r5, [r1], -r4
   11590:	andeq	r5, r1, ip, asr #19
   11594:	andeq	r5, r1, r0, lsr #19
   11598:	andeq	r7, r2, r8, asr #2
   1159c:	andeq	r5, r1, r0, ror #19
   115a0:	andeq	r5, r1, r4, ror #19
   115a4:	andeq	r5, r1, ip, ror #20
   115a8:	andeq	r5, r1, ip, ror #14
   115ac:	andeq	r0, r0, sl, asr #3
   115b0:	andeq	r5, r1, r8, ror #19
   115b4:	strdeq	r5, [r1], -r4
   115b8:	andeq	r5, r1, r4, ror r7
   115bc:	andeq	r5, r1, r0, asr #20
   115c0:	andeq	r5, r1, r0, lsl #20
   115c4:	andeq	r1, r1, ip, lsl #14
   115c8:	andeq	r7, r2, r8, asr r1
   115cc:	muleq	r1, r0, r7
   115d0:	ldrdeq	r1, [r1], -r0
   115d4:			; <UNDEFINED> instruction: 0x00015ab4
   115d8:	andeq	r5, r1, r0, asr fp
   115dc:	muleq	r1, r8, sl
   115e0:	andeq	r5, r1, r4, lsl sl
   115e4:	mov	fp, #0
   115e8:	mov	lr, #0
   115ec:	pop	{r1}		; (ldr r1, [sp], #4)
   115f0:	mov	r2, sp
   115f4:	push	{r2}		; (str r2, [sp, #-4]!)
   115f8:	push	{r0}		; (str r0, [sp, #-4]!)
   115fc:	ldr	ip, [pc, #16]	; 11614 <__assert_fail@plt+0x778>
   11600:	push	{ip}		; (str ip, [sp, #-4]!)
   11604:	ldr	r0, [pc, #12]	; 11618 <__assert_fail@plt+0x77c>
   11608:	ldr	r3, [pc, #12]	; 1161c <__assert_fail@plt+0x780>
   1160c:	bl	10d7c <__libc_start_main@plt>
   11610:	bl	10e84 <abort@plt>
   11614:	andeq	r5, r1, ip, lsl #14
   11618:	andeq	r0, r1, r8, lsr #29
   1161c:	andeq	r5, r1, ip, lsr #13
   11620:	ldr	r3, [pc, #20]	; 1163c <__assert_fail@plt+0x7a0>
   11624:	ldr	r2, [pc, #20]	; 11640 <__assert_fail@plt+0x7a4>
   11628:	add	r3, pc, r3
   1162c:	ldr	r2, [r3, r2]
   11630:	cmp	r2, #0
   11634:	bxeq	lr
   11638:	b	10d94 <__gmon_start__@plt>
   1163c:	ldrdeq	r5, [r1], -r0
   11640:	ldrdeq	r0, [r0], -r8
   11644:	ldr	r3, [pc, #28]	; 11668 <__assert_fail@plt+0x7cc>
   11648:	ldr	r0, [pc, #28]	; 1166c <__assert_fail@plt+0x7d0>
   1164c:	sub	r3, r3, r0
   11650:	cmp	r3, #6
   11654:	bxls	lr
   11658:	ldr	r3, [pc, #16]	; 11670 <__assert_fail@plt+0x7d4>
   1165c:	cmp	r3, #0
   11660:	bxeq	lr
   11664:	bx	r3
   11668:	andeq	r7, r2, pc, lsr #2
   1166c:	andeq	r7, r2, ip, lsr #2
   11670:	andeq	r0, r0, r0
   11674:	ldr	r1, [pc, #36]	; 116a0 <__assert_fail@plt+0x804>
   11678:	ldr	r0, [pc, #36]	; 116a4 <__assert_fail@plt+0x808>
   1167c:	sub	r1, r1, r0
   11680:	asr	r1, r1, #2
   11684:	add	r1, r1, r1, lsr #31
   11688:	asrs	r1, r1, #1
   1168c:	bxeq	lr
   11690:	ldr	r3, [pc, #16]	; 116a8 <__assert_fail@plt+0x80c>
   11694:	cmp	r3, #0
   11698:	bxeq	lr
   1169c:	bx	r3
   116a0:	andeq	r7, r2, ip, lsr #2
   116a4:	andeq	r7, r2, ip, lsr #2
   116a8:	andeq	r0, r0, r0
   116ac:	push	{r4, lr}
   116b0:	ldr	r4, [pc, #24]	; 116d0 <__assert_fail@plt+0x834>
   116b4:	ldrb	r3, [r4]
   116b8:	cmp	r3, #0
   116bc:	popne	{r4, pc}
   116c0:	bl	11644 <__assert_fail@plt+0x7a8>
   116c4:	mov	r3, #1
   116c8:	strb	r3, [r4]
   116cc:	pop	{r4, pc}
   116d0:	andeq	r7, r2, r4, asr r1
   116d4:	ldr	r0, [pc, #40]	; 11704 <__assert_fail@plt+0x868>
   116d8:	ldr	r3, [r0]
   116dc:	cmp	r3, #0
   116e0:	bne	116e8 <__assert_fail@plt+0x84c>
   116e4:	b	11674 <__assert_fail@plt+0x7d8>
   116e8:	ldr	r3, [pc, #24]	; 11708 <__assert_fail@plt+0x86c>
   116ec:	cmp	r3, #0
   116f0:	beq	116e4 <__assert_fail@plt+0x848>
   116f4:	push	{r4, lr}
   116f8:	blx	r3
   116fc:	pop	{r4, lr}
   11700:	b	11674 <__assert_fail@plt+0x7d8>
   11704:	andeq	r6, r2, r4, lsl pc
   11708:	andeq	r0, r0, r0
   1170c:	ldr	r2, [pc, #16]	; 11724 <__assert_fail@plt+0x888>
   11710:	mov	r0, #0
   11714:	ldr	r3, [r2]
   11718:	add	r3, r3, #1
   1171c:	str	r3, [r2]
   11720:	bx	lr
   11724:	andeq	r7, r2, r8, asr r1
   11728:	push	{r4, r5, r6, lr}
   1172c:	mov	r4, r0
   11730:	mov	r5, r1
   11734:	ldr	r3, [r4, #4]
   11738:	mov	r1, r5
   1173c:	subs	r0, r3, #0
   11740:	beq	11778 <__assert_fail@plt+0x8dc>
   11744:	bl	11728 <__assert_fail@plt+0x88c>
   11748:	cmp	r0, #0
   1174c:	bne	11770 <__assert_fail@plt+0x8d4>
   11750:	mov	r0, r4
   11754:	blx	r5
   11758:	cmp	r0, #0
   1175c:	bne	11770 <__assert_fail@plt+0x8d4>
   11760:	ldr	r4, [r4, #8]
   11764:	cmp	r4, #0
   11768:	bne	11734 <__assert_fail@plt+0x898>
   1176c:	pop	{r4, r5, r6, pc}
   11770:	mov	r0, #1
   11774:	pop	{r4, r5, r6, pc}
   11778:	ldr	r3, [r4, #8]
   1177c:	cmp	r3, #0
   11780:	bne	11750 <__assert_fail@plt+0x8b4>
   11784:	mov	r0, r4
   11788:	pop	{r4, r5, r6, lr}
   1178c:	bx	r1
   11790:	ldr	r3, [r0, #16]
   11794:	cmp	r3, #0
   11798:	bne	117c4 <__assert_fail@plt+0x928>
   1179c:	ldrb	r3, [r0, #13]
   117a0:	cmp	r3, #0
   117a4:	bne	117c4 <__assert_fail@plt+0x928>
   117a8:	ldr	r3, [pc, #28]	; 117cc <__assert_fail@plt+0x930>
   117ac:	ldr	r2, [r3, #4]
   117b0:	cmp	r2, #0
   117b4:	streq	r0, [r3, #4]
   117b8:	ldrne	r2, [r3, #8]
   117bc:	str	r0, [r3, #8]
   117c0:	strne	r0, [r2, #20]
   117c4:	mov	r0, #0
   117c8:	bx	lr
   117cc:	andeq	r7, r2, r8, asr r1
   117d0:	ldr	r3, [r0, #16]
   117d4:	cmp	r3, #0
   117d8:	beq	11834 <__assert_fail@plt+0x998>
   117dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117e0:	ldr	r6, [pc, #284]	; 11904 <__assert_fail@plt+0xa68>
   117e4:	ldr	ip, [r6, #12]
   117e8:	cmp	ip, #0
   117ec:	beq	118e0 <__assert_fail@plt+0xa44>
   117f0:	ldr	r2, [r0, #24]
   117f4:	cmp	r2, #0
   117f8:	beq	118fc <__assert_fail@plt+0xa60>
   117fc:	ldr	r3, [r2]
   11800:	cmp	ip, r3
   11804:	addeq	r4, r0, #24
   11808:	bne	11820 <__assert_fail@plt+0x984>
   1180c:	b	11840 <__assert_fail@plt+0x9a4>
   11810:	ldr	r1, [r3]
   11814:	cmp	ip, r1
   11818:	beq	1183c <__assert_fail@plt+0x9a0>
   1181c:	mov	r2, r3
   11820:	ldr	r3, [r2, #4]
   11824:	cmp	r3, #0
   11828:	bne	11810 <__assert_fail@plt+0x974>
   1182c:	mov	r0, r3
   11830:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11834:	mov	r0, r3
   11838:	bx	lr
   1183c:	add	r4, r2, #4
   11840:	ldr	r3, [r0, #20]
   11844:	cmp	r3, #0
   11848:	beq	118ec <__assert_fail@plt+0xa50>
   1184c:	mov	r7, r0
   11850:	ldr	r9, [pc, #176]	; 11908 <__assert_fail@plt+0xa6c>
   11854:	mov	r8, #0
   11858:	b	1186c <__assert_fail@plt+0x9d0>
   1185c:	subs	ip, r5, #0
   11860:	str	r8, [r3, #20]
   11864:	str	r5, [r6, #12]
   11868:	beq	118d8 <__assert_fail@plt+0xa3c>
   1186c:	ldr	r3, [ip]
   11870:	mov	r2, r9
   11874:	mov	r1, r8
   11878:	mov	r0, #0
   1187c:	ldr	r5, [ip, #20]
   11880:	bl	10d4c <error@plt>
   11884:	ldr	r3, [r6, #12]
   11888:	cmp	r7, r3
   1188c:	bne	1185c <__assert_fail@plt+0x9c0>
   11890:	ldr	r3, [r4]
   11894:	mov	r0, r3
   11898:	ldr	r2, [r3]
   1189c:	ldr	r1, [r3, #4]
   118a0:	ldr	r3, [r2, #16]
   118a4:	sub	r3, r3, #1
   118a8:	str	r3, [r2, #16]
   118ac:	str	r1, [r4]
   118b0:	bl	11e34 <__assert_fail@plt+0xf98>
   118b4:	ldr	r3, [r6, #12]
   118b8:	cmp	r3, #0
   118bc:	movne	r1, #0
   118c0:	beq	118d8 <__assert_fail@plt+0xa3c>
   118c4:	ldr	r2, [r3, #20]
   118c8:	str	r1, [r3, #20]
   118cc:	subs	r3, r2, #0
   118d0:	bne	118c4 <__assert_fail@plt+0xa28>
   118d4:	str	r3, [r6, #12]
   118d8:	mov	r0, #1
   118dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118e0:	str	r0, [r6, #12]
   118e4:	mov	r0, ip
   118e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118ec:	str	ip, [r0, #20]
   118f0:	str	r0, [r6, #12]
   118f4:	mov	r0, r3
   118f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118fc:	mov	r0, r2
   11900:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11904:	andeq	r7, r2, r8, asr r1
   11908:	andeq	r5, r1, r0, asr fp
   1190c:	subs	r6, r0, #0
   11910:	push	{r7, lr}
   11914:	sub	sp, sp, #56	; 0x38
   11918:	beq	11954 <__assert_fail@plt+0xab8>
   1191c:	ldr	r3, [pc, #636]	; 11ba0 <__assert_fail@plt+0xd04>
   11920:	mov	r2, #5
   11924:	ldr	r1, [pc, #632]	; 11ba4 <__assert_fail@plt+0xd08>
   11928:	mov	r0, #0
   1192c:	ldr	r4, [r3]
   11930:	bl	10cd4 <dcgettext@plt>
   11934:	ldr	r3, [pc, #620]	; 11ba8 <__assert_fail@plt+0xd0c>
   11938:	mov	r1, #1
   1193c:	ldr	r3, [r3]
   11940:	mov	r2, r0
   11944:	mov	r0, r4
   11948:	bl	10e18 <__fprintf_chk@plt>
   1194c:	mov	r0, r6
   11950:	bl	10dc4 <exit@plt>
   11954:	mov	r2, #5
   11958:	ldr	r1, [pc, #588]	; 11bac <__assert_fail@plt+0xd10>
   1195c:	bl	10cd4 <dcgettext@plt>
   11960:	ldr	r3, [pc, #576]	; 11ba8 <__assert_fail@plt+0xd0c>
   11964:	ldr	r7, [pc, #580]	; 11bb0 <__assert_fail@plt+0xd14>
   11968:	ldr	r4, [pc, #580]	; 11bb4 <__assert_fail@plt+0xd18>
   1196c:	ldr	r2, [r3]
   11970:	mov	r1, r0
   11974:	mov	r0, #1
   11978:	bl	10e00 <__printf_chk@plt>
   1197c:	mov	r2, #5
   11980:	ldr	r1, [pc, #560]	; 11bb8 <__assert_fail@plt+0xd1c>
   11984:	mov	r0, r6
   11988:	bl	10cd4 <dcgettext@plt>
   1198c:	ldr	r1, [r7]
   11990:	bl	10c50 <fputs_unlocked@plt>
   11994:	mov	r2, #5
   11998:	ldr	r1, [pc, #540]	; 11bbc <__assert_fail@plt+0xd20>
   1199c:	mov	r0, r6
   119a0:	bl	10cd4 <dcgettext@plt>
   119a4:	ldr	r1, [r7]
   119a8:	bl	10c50 <fputs_unlocked@plt>
   119ac:	mov	r2, #5
   119b0:	ldr	r1, [pc, #520]	; 11bc0 <__assert_fail@plt+0xd24>
   119b4:	mov	r0, r6
   119b8:	bl	10cd4 <dcgettext@plt>
   119bc:	ldr	r1, [r7]
   119c0:	bl	10c50 <fputs_unlocked@plt>
   119c4:	mov	r2, #5
   119c8:	ldr	r1, [pc, #500]	; 11bc4 <__assert_fail@plt+0xd28>
   119cc:	mov	r0, r6
   119d0:	bl	10cd4 <dcgettext@plt>
   119d4:	ldr	r1, [r7]
   119d8:	bl	10c50 <fputs_unlocked@plt>
   119dc:	ldm	r4!, {r0, r1, r2, r3}
   119e0:	mov	lr, sp
   119e4:	stmia	lr!, {r0, r1, r2, r3}
   119e8:	ldm	r4!, {r0, r1, r2, r3}
   119ec:	ldr	ip, [sp]
   119f0:	stmia	lr!, {r0, r1, r2, r3}
   119f4:	cmp	ip, #0
   119f8:	ldm	r4!, {r0, r1, r2, r3}
   119fc:	stmia	lr!, {r0, r1, r2, r3}
   11a00:	ldm	r4, {r0, r1}
   11a04:	moveq	r4, sp
   11a08:	stm	lr, {r0, r1}
   11a0c:	beq	11a3c <__assert_fail@plt+0xba0>
   11a10:	ldr	r5, [pc, #432]	; 11bc8 <__assert_fail@plt+0xd2c>
   11a14:	mov	r4, sp
   11a18:	b	11a28 <__assert_fail@plt+0xb8c>
   11a1c:	ldr	ip, [r4, #8]!
   11a20:	cmp	ip, #0
   11a24:	beq	11a3c <__assert_fail@plt+0xba0>
   11a28:	mov	r1, ip
   11a2c:	mov	r0, r5
   11a30:	bl	10c68 <strcmp@plt>
   11a34:	cmp	r0, #0
   11a38:	bne	11a1c <__assert_fail@plt+0xb80>
   11a3c:	ldr	r4, [r4, #4]
   11a40:	mov	r2, #5
   11a44:	cmp	r4, #0
   11a48:	ldr	r1, [pc, #380]	; 11bcc <__assert_fail@plt+0xd30>
   11a4c:	beq	11af4 <__assert_fail@plt+0xc58>
   11a50:	mov	r0, #0
   11a54:	bl	10cd4 <dcgettext@plt>
   11a58:	ldr	r3, [pc, #368]	; 11bd0 <__assert_fail@plt+0xd34>
   11a5c:	ldr	r2, [pc, #368]	; 11bd4 <__assert_fail@plt+0xd38>
   11a60:	mov	r1, r0
   11a64:	mov	r0, #1
   11a68:	bl	10e00 <__printf_chk@plt>
   11a6c:	mov	r1, #0
   11a70:	mov	r0, #5
   11a74:	bl	10e48 <setlocale@plt>
   11a78:	cmp	r0, #0
   11a7c:	ldreq	r5, [pc, #324]	; 11bc8 <__assert_fail@plt+0xd2c>
   11a80:	beq	11a9c <__assert_fail@plt+0xc00>
   11a84:	mov	r2, #3
   11a88:	ldr	r1, [pc, #328]	; 11bd8 <__assert_fail@plt+0xd3c>
   11a8c:	bl	10e78 <strncmp@plt>
   11a90:	ldr	r5, [pc, #304]	; 11bc8 <__assert_fail@plt+0xd2c>
   11a94:	cmp	r0, #0
   11a98:	bne	11b84 <__assert_fail@plt+0xce8>
   11a9c:	mov	r2, #5
   11aa0:	ldr	r1, [pc, #308]	; 11bdc <__assert_fail@plt+0xd40>
   11aa4:	mov	r0, #0
   11aa8:	bl	10cd4 <dcgettext@plt>
   11aac:	ldr	r3, [pc, #276]	; 11bc8 <__assert_fail@plt+0xd2c>
   11ab0:	ldr	r2, [pc, #280]	; 11bd0 <__assert_fail@plt+0xd34>
   11ab4:	mov	r1, r0
   11ab8:	mov	r0, #1
   11abc:	bl	10e00 <__printf_chk@plt>
   11ac0:	mov	r2, #5
   11ac4:	ldr	r1, [pc, #276]	; 11be0 <__assert_fail@plt+0xd44>
   11ac8:	mov	r0, #0
   11acc:	bl	10cd4 <dcgettext@plt>
   11ad0:	ldr	r2, [pc, #268]	; 11be4 <__assert_fail@plt+0xd48>
   11ad4:	cmp	r4, r5
   11ad8:	ldr	r3, [pc, #264]	; 11be8 <__assert_fail@plt+0xd4c>
   11adc:	movne	r3, r2
   11ae0:	mov	r1, r0
   11ae4:	mov	r2, r4
   11ae8:	mov	r0, #1
   11aec:	bl	10e00 <__printf_chk@plt>
   11af0:	b	1194c <__assert_fail@plt+0xab0>
   11af4:	mov	r0, r4
   11af8:	bl	10cd4 <dcgettext@plt>
   11afc:	ldr	r3, [pc, #204]	; 11bd0 <__assert_fail@plt+0xd34>
   11b00:	ldr	r2, [pc, #204]	; 11bd4 <__assert_fail@plt+0xd38>
   11b04:	mov	r1, r0
   11b08:	mov	r0, #1
   11b0c:	bl	10e00 <__printf_chk@plt>
   11b10:	mov	r1, r4
   11b14:	mov	r0, #5
   11b18:	bl	10e48 <setlocale@plt>
   11b1c:	cmp	r0, #0
   11b20:	beq	11b38 <__assert_fail@plt+0xc9c>
   11b24:	mov	r2, #3
   11b28:	ldr	r1, [pc, #168]	; 11bd8 <__assert_fail@plt+0xd3c>
   11b2c:	bl	10e78 <strncmp@plt>
   11b30:	cmp	r0, #0
   11b34:	bne	11b7c <__assert_fail@plt+0xce0>
   11b38:	mov	r2, #5
   11b3c:	ldr	r1, [pc, #152]	; 11bdc <__assert_fail@plt+0xd40>
   11b40:	mov	r0, #0
   11b44:	bl	10cd4 <dcgettext@plt>
   11b48:	ldr	r3, [pc, #120]	; 11bc8 <__assert_fail@plt+0xd2c>
   11b4c:	ldr	r2, [pc, #124]	; 11bd0 <__assert_fail@plt+0xd34>
   11b50:	mov	r4, r3
   11b54:	mov	r1, r0
   11b58:	mov	r0, #1
   11b5c:	bl	10e00 <__printf_chk@plt>
   11b60:	ldr	r1, [pc, #120]	; 11be0 <__assert_fail@plt+0xd44>
   11b64:	mov	r2, #5
   11b68:	mov	r0, #0
   11b6c:	bl	10cd4 <dcgettext@plt>
   11b70:	ldr	r3, [pc, #112]	; 11be8 <__assert_fail@plt+0xd4c>
   11b74:	mov	r1, r0
   11b78:	b	11ae4 <__assert_fail@plt+0xc48>
   11b7c:	ldr	r5, [pc, #68]	; 11bc8 <__assert_fail@plt+0xd2c>
   11b80:	mov	r4, r5
   11b84:	mov	r2, #5
   11b88:	ldr	r1, [pc, #92]	; 11bec <__assert_fail@plt+0xd50>
   11b8c:	mov	r0, #0
   11b90:	bl	10cd4 <dcgettext@plt>
   11b94:	ldr	r1, [r7]
   11b98:	bl	10c50 <fputs_unlocked@plt>
   11b9c:	b	11a9c <__assert_fail@plt+0xc00>
   11ba0:	andeq	r7, r2, r0, asr #2
   11ba4:	andeq	r5, r1, r8, lsl #15
   11ba8:	andeq	r7, r2, r0, ror r1
   11bac:			; <UNDEFINED> instruction: 0x000157b0
   11bb0:	andeq	r7, r2, ip, asr #2
   11bb4:	andeq	r5, r1, r4, lsr r7
   11bb8:	andeq	r5, r1, r4, lsl r8
   11bbc:			; <UNDEFINED> instruction: 0x000158b0
   11bc0:	andeq	r5, r1, ip, asr #16
   11bc4:	andeq	r5, r1, ip, ror r8
   11bc8:	andeq	r5, r1, r0, lsl #15
   11bcc:			; <UNDEFINED> instruction: 0x000158b4
   11bd0:	andeq	r5, r1, ip, asr #17
   11bd4:	strdeq	r5, [r1], -r4
   11bd8:	andeq	r5, r1, r4, lsl #18
   11bdc:	andeq	r5, r1, r0, asr r9
   11be0:	andeq	r5, r1, ip, ror #18
   11be4:	andeq	r5, r1, r8, ror r8
   11be8:	andeq	r5, r1, ip, asr #21
   11bec:	andeq	r5, r1, r8, lsl #18
   11bf0:	ldr	r3, [pc, #4]	; 11bfc <__assert_fail@plt+0xd60>
   11bf4:	str	r0, [r3]
   11bf8:	bx	lr
   11bfc:	andeq	r7, r2, r8, ror #2
   11c00:	ldr	r3, [pc, #4]	; 11c0c <__assert_fail@plt+0xd70>
   11c04:	strb	r0, [r3, #4]
   11c08:	bx	lr
   11c0c:	andeq	r7, r2, r8, ror #2
   11c10:	ldr	r3, [pc, #192]	; 11cd8 <__assert_fail@plt+0xe3c>
   11c14:	push	{r4, r5, r6, lr}
   11c18:	sub	sp, sp, #8
   11c1c:	ldr	r0, [r3]
   11c20:	bl	1500c <__assert_fail@plt+0x4170>
   11c24:	cmp	r0, #0
   11c28:	beq	11c4c <__assert_fail@plt+0xdb0>
   11c2c:	ldr	r4, [pc, #168]	; 11cdc <__assert_fail@plt+0xe40>
   11c30:	ldrb	r3, [r4, #4]
   11c34:	cmp	r3, #0
   11c38:	beq	11c68 <__assert_fail@plt+0xdcc>
   11c3c:	bl	10ddc <__errno_location@plt>
   11c40:	ldr	r3, [r0]
   11c44:	cmp	r3, #32
   11c48:	bne	11c68 <__assert_fail@plt+0xdcc>
   11c4c:	ldr	r3, [pc, #140]	; 11ce0 <__assert_fail@plt+0xe44>
   11c50:	ldr	r0, [r3]
   11c54:	bl	1500c <__assert_fail@plt+0x4170>
   11c58:	cmp	r0, #0
   11c5c:	bne	11cb0 <__assert_fail@plt+0xe14>
   11c60:	add	sp, sp, #8
   11c64:	pop	{r4, r5, r6, pc}
   11c68:	mov	r2, #5
   11c6c:	ldr	r1, [pc, #112]	; 11ce4 <__assert_fail@plt+0xe48>
   11c70:	mov	r0, #0
   11c74:	bl	10cd4 <dcgettext@plt>
   11c78:	ldr	r4, [r4]
   11c7c:	cmp	r4, #0
   11c80:	mov	r5, r0
   11c84:	beq	11cbc <__assert_fail@plt+0xe20>
   11c88:	bl	10ddc <__errno_location@plt>
   11c8c:	ldr	r6, [r0]
   11c90:	mov	r0, r4
   11c94:	bl	13fa8 <__assert_fail@plt+0x310c>
   11c98:	mov	r1, r6
   11c9c:	str	r5, [sp]
   11ca0:	ldr	r2, [pc, #64]	; 11ce8 <__assert_fail@plt+0xe4c>
   11ca4:	mov	r3, r0
   11ca8:	mov	r0, #0
   11cac:	bl	10d4c <error@plt>
   11cb0:	ldr	r3, [pc, #52]	; 11cec <__assert_fail@plt+0xe50>
   11cb4:	ldr	r0, [r3]
   11cb8:	bl	10c98 <_exit@plt>
   11cbc:	bl	10ddc <__errno_location@plt>
   11cc0:	mov	r3, r5
   11cc4:	ldr	r2, [pc, #36]	; 11cf0 <__assert_fail@plt+0xe54>
   11cc8:	ldr	r1, [r0]
   11ccc:	mov	r0, r4
   11cd0:	bl	10d4c <error@plt>
   11cd4:	b	11cb0 <__assert_fail@plt+0xe14>
   11cd8:	andeq	r7, r2, ip, asr #2
   11cdc:	andeq	r7, r2, r8, ror #2
   11ce0:	andeq	r7, r2, r0, asr #2
   11ce4:	andeq	r5, r1, r0, asr #22
   11ce8:	andeq	r5, r1, ip, asr #22
   11cec:	andeq	r7, r2, r8, ror #1
   11cf0:	andeq	r5, r1, r0, asr fp
   11cf4:	push	{r4, r5}
   11cf8:	pop	{r4, r5}
   11cfc:	b	10c74 <posix_fadvise64@plt>
   11d00:	cmp	r0, #0
   11d04:	bxeq	lr
   11d08:	push	{r4, lr}
   11d0c:	sub	sp, sp, #16
   11d10:	mov	r4, r1
   11d14:	bl	10e0c <fileno@plt>
   11d18:	mov	r2, #0
   11d1c:	mov	r3, #0
   11d20:	str	r4, [sp, #8]
   11d24:	strd	r2, [sp]
   11d28:	bl	10c74 <posix_fadvise64@plt>
   11d2c:	add	sp, sp, #16
   11d30:	pop	{r4, pc}
   11d34:	push	{r4, r5, lr}
   11d38:	sub	sp, sp, #12
   11d3c:	mov	r4, r0
   11d40:	bl	10e0c <fileno@plt>
   11d44:	cmp	r0, #0
   11d48:	mov	r0, r4
   11d4c:	blt	11dc8 <__assert_fail@plt+0xf2c>
   11d50:	bl	10d88 <__freading@plt>
   11d54:	cmp	r0, #0
   11d58:	bne	11d94 <__assert_fail@plt+0xef8>
   11d5c:	mov	r0, r4
   11d60:	bl	11dd4 <__assert_fail@plt+0xf38>
   11d64:	cmp	r0, #0
   11d68:	beq	11dc4 <__assert_fail@plt+0xf28>
   11d6c:	bl	10ddc <__errno_location@plt>
   11d70:	mov	r5, r0
   11d74:	mov	r0, r4
   11d78:	ldr	r4, [r5]
   11d7c:	bl	10e24 <fclose@plt>
   11d80:	cmp	r4, #0
   11d84:	mvnne	r0, #0
   11d88:	strne	r4, [r5]
   11d8c:	add	sp, sp, #12
   11d90:	pop	{r4, r5, pc}
   11d94:	mov	r0, r4
   11d98:	bl	10e0c <fileno@plt>
   11d9c:	mov	r3, #1
   11da0:	str	r3, [sp]
   11da4:	mov	r2, #0
   11da8:	mov	r3, #0
   11dac:	bl	10d1c <lseek64@plt>
   11db0:	mvn	r3, #0
   11db4:	mvn	r2, #0
   11db8:	cmp	r1, r3
   11dbc:	cmpeq	r0, r2
   11dc0:	bne	11d5c <__assert_fail@plt+0xec0>
   11dc4:	mov	r0, r4
   11dc8:	add	sp, sp, #12
   11dcc:	pop	{r4, r5, lr}
   11dd0:	b	10e24 <fclose@plt>
   11dd4:	push	{r4, lr}
   11dd8:	subs	r4, r0, #0
   11ddc:	sub	sp, sp, #8
   11de0:	beq	11dfc <__assert_fail@plt+0xf60>
   11de4:	bl	10d88 <__freading@plt>
   11de8:	cmp	r0, #0
   11dec:	beq	11dfc <__assert_fail@plt+0xf60>
   11df0:	ldr	r3, [r4]
   11df4:	tst	r3, #256	; 0x100
   11df8:	bne	11e0c <__assert_fail@plt+0xf70>
   11dfc:	mov	r0, r4
   11e00:	add	sp, sp, #8
   11e04:	pop	{r4, lr}
   11e08:	b	10c80 <fflush@plt>
   11e0c:	mov	r3, #1
   11e10:	str	r3, [sp]
   11e14:	mov	r2, #0
   11e18:	mov	r3, #0
   11e1c:	mov	r0, r4
   11e20:	bl	12050 <__assert_fail@plt+0x11b4>
   11e24:	mov	r0, r4
   11e28:	add	sp, sp, #8
   11e2c:	pop	{r4, lr}
   11e30:	b	10c80 <fflush@plt>
   11e34:	push	{r4, r5, lr}
   11e38:	sub	sp, sp, #12
   11e3c:	mov	r5, r0
   11e40:	bl	10ddc <__errno_location@plt>
   11e44:	mov	r2, #0
   11e48:	mov	r4, r0
   11e4c:	ldr	r3, [r0]
   11e50:	str	r2, [r4]
   11e54:	mov	r0, r5
   11e58:	str	r3, [sp]
   11e5c:	str	r3, [sp, #4]
   11e60:	bl	10c8c <free@plt>
   11e64:	ldr	r3, [r4]
   11e68:	add	r2, sp, #8
   11e6c:	cmp	r3, #0
   11e70:	moveq	r3, #4
   11e74:	movne	r3, #0
   11e78:	add	r3, r2, r3
   11e7c:	ldr	r3, [r3, #-8]
   11e80:	str	r3, [r4]
   11e84:	add	sp, sp, #12
   11e88:	pop	{r4, r5, pc}
   11e8c:	push	{r4, lr}
   11e90:	mov	r1, #0
   11e94:	mov	r4, r0
   11e98:	ldr	r0, [pc, #56]	; 11ed8 <__assert_fail@plt+0x103c>
   11e9c:	bl	10d58 <open64@plt>
   11ea0:	cmp	r4, r0
   11ea4:	moveq	r3, #1
   11ea8:	beq	11ed0 <__assert_fail@plt+0x1034>
   11eac:	cmp	r0, #0
   11eb0:	mov	r3, r0
   11eb4:	movlt	r3, #0
   11eb8:	blt	11ed0 <__assert_fail@plt+0x1034>
   11ebc:	bl	10e90 <close@plt>
   11ec0:	bl	10ddc <__errno_location@plt>
   11ec4:	mov	r3, #0
   11ec8:	mov	r2, #9
   11ecc:	str	r2, [r0]
   11ed0:	mov	r0, r3
   11ed4:	pop	{r4, pc}
   11ed8:	andeq	r5, r1, r4, asr fp
   11edc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11ee0:	mov	r9, r0
   11ee4:	mov	r0, r2
   11ee8:	mov	r7, r2
   11eec:	mov	sl, r1
   11ef0:	bl	10e0c <fileno@plt>
   11ef4:	cmp	r0, #1
   11ef8:	beq	12028 <__assert_fail@plt+0x118c>
   11efc:	cmp	r0, #2
   11f00:	beq	12020 <__assert_fail@plt+0x1184>
   11f04:	cmp	r0, #0
   11f08:	beq	11fcc <__assert_fail@plt+0x1130>
   11f0c:	mov	r1, #2
   11f10:	mov	r0, r1
   11f14:	bl	10ce0 <dup2@plt>
   11f18:	subs	r4, r0, #2
   11f1c:	movne	r4, #1
   11f20:	mov	r1, #1
   11f24:	mov	r0, r1
   11f28:	bl	10ce0 <dup2@plt>
   11f2c:	mov	r1, #0
   11f30:	subs	r8, r0, #1
   11f34:	mov	r0, r1
   11f38:	movne	r8, #1
   11f3c:	bl	10ce0 <dup2@plt>
   11f40:	subs	r6, r0, #0
   11f44:	beq	11f64 <__assert_fail@plt+0x10c8>
   11f48:	mov	r0, #0
   11f4c:	bl	11e8c <__assert_fail@plt+0xff0>
   11f50:	cmp	r0, #0
   11f54:	mov	r6, r0
   11f58:	mov	r5, r0
   11f5c:	moveq	r6, #1
   11f60:	beq	11f98 <__assert_fail@plt+0x10fc>
   11f64:	cmp	r8, #0
   11f68:	bne	1200c <__assert_fail@plt+0x1170>
   11f6c:	cmp	r4, #0
   11f70:	beq	11f84 <__assert_fail@plt+0x10e8>
   11f74:	mov	r0, #2
   11f78:	bl	11e8c <__assert_fail@plt+0xff0>
   11f7c:	subs	r5, r0, #0
   11f80:	beq	11ff4 <__assert_fail@plt+0x1158>
   11f84:	mov	r2, r7
   11f88:	mov	r1, sl
   11f8c:	mov	r0, r9
   11f90:	bl	10da0 <freopen64@plt>
   11f94:	mov	r5, r0
   11f98:	bl	10ddc <__errno_location@plt>
   11f9c:	cmp	r4, #0
   11fa0:	mov	r7, r0
   11fa4:	ldr	r4, [r0]
   11fa8:	bne	12000 <__assert_fail@plt+0x1164>
   11fac:	cmp	r8, #0
   11fb0:	bne	11fe8 <__assert_fail@plt+0x114c>
   11fb4:	cmp	r6, #0
   11fb8:	bne	11fdc <__assert_fail@plt+0x1140>
   11fbc:	cmp	r5, #0
   11fc0:	streq	r4, [r7]
   11fc4:	mov	r0, r5
   11fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11fcc:	mov	r4, r0
   11fd0:	mov	r8, r0
   11fd4:	mov	r6, r0
   11fd8:	b	11f84 <__assert_fail@plt+0x10e8>
   11fdc:	mov	r0, #0
   11fe0:	bl	10e90 <close@plt>
   11fe4:	b	11fbc <__assert_fail@plt+0x1120>
   11fe8:	mov	r0, #1
   11fec:	bl	10e90 <close@plt>
   11ff0:	b	11fb4 <__assert_fail@plt+0x1118>
   11ff4:	bl	10ddc <__errno_location@plt>
   11ff8:	ldr	r4, [r0]
   11ffc:	mov	r7, r0
   12000:	mov	r0, #2
   12004:	bl	10e90 <close@plt>
   12008:	b	11fac <__assert_fail@plt+0x1110>
   1200c:	mov	r0, #1
   12010:	bl	11e8c <__assert_fail@plt+0xff0>
   12014:	cmp	r0, #0
   12018:	bne	11f6c <__assert_fail@plt+0x10d0>
   1201c:	b	11f94 <__assert_fail@plt+0x10f8>
   12020:	mov	r4, #0
   12024:	b	11f20 <__assert_fail@plt+0x1084>
   12028:	mov	r1, #0
   1202c:	mov	r0, r1
   12030:	bl	10ce0 <dup2@plt>
   12034:	subs	r4, r0, #0
   12038:	moveq	r8, r4
   1203c:	moveq	r6, r4
   12040:	beq	11f84 <__assert_fail@plt+0x10e8>
   12044:	mov	r4, #0
   12048:	mov	r8, r4
   1204c:	b	11f48 <__assert_fail@plt+0x10ac>
   12050:	push	{r4, r5, r6, r7, r8, lr}
   12054:	sub	sp, sp, #8
   12058:	ldmib	r0, {ip, lr}
   1205c:	mov	r4, r0
   12060:	ldr	r5, [sp, #32]
   12064:	cmp	lr, ip
   12068:	beq	12080 <__assert_fail@plt+0x11e4>
   1206c:	str	r5, [sp, #32]
   12070:	mov	r0, r4
   12074:	add	sp, sp, #8
   12078:	pop	{r4, r5, r6, r7, r8, lr}
   1207c:	b	10e30 <fseeko64@plt>
   12080:	ldr	lr, [r0, #20]
   12084:	ldr	ip, [r0, #16]
   12088:	cmp	lr, ip
   1208c:	bne	1206c <__assert_fail@plt+0x11d0>
   12090:	ldr	r8, [r0, #36]	; 0x24
   12094:	cmp	r8, #0
   12098:	bne	1206c <__assert_fail@plt+0x11d0>
   1209c:	mov	r6, r2
   120a0:	mov	r7, r3
   120a4:	bl	10e0c <fileno@plt>
   120a8:	mov	r2, r6
   120ac:	mov	r3, r7
   120b0:	str	r5, [sp]
   120b4:	bl	10d1c <lseek64@plt>
   120b8:	mvn	r3, #0
   120bc:	mvn	r2, #0
   120c0:	cmp	r1, r3
   120c4:	cmpeq	r0, r2
   120c8:	beq	120e8 <__assert_fail@plt+0x124c>
   120cc:	ldr	r3, [r4]
   120d0:	strd	r0, [r4, #80]	; 0x50
   120d4:	mov	r0, r8
   120d8:	bic	r3, r3, #16
   120dc:	str	r3, [r4]
   120e0:	add	sp, sp, #8
   120e4:	pop	{r4, r5, r6, r7, r8, pc}
   120e8:	mvn	r0, #0
   120ec:	b	120e0 <__assert_fail@plt+0x1244>
   120f0:	push	{r4, r5, r6, r7, r8, lr}
   120f4:	cmp	r0, #2
   120f8:	ldr	r4, [pc, #148]	; 12194 <__assert_fail@plt+0x12f8>
   120fc:	mov	r5, #0
   12100:	sub	sp, sp, #16
   12104:	ldr	r6, [r4]
   12108:	str	r5, [r4]
   1210c:	beq	12128 <__assert_fail@plt+0x128c>
   12110:	ldr	r3, [pc, #128]	; 12198 <__assert_fail@plt+0x12fc>
   12114:	mov	r2, #0
   12118:	str	r6, [r4]
   1211c:	str	r2, [r3]
   12120:	add	sp, sp, #16
   12124:	pop	{r4, r5, r6, r7, r8, pc}
   12128:	mov	r8, r3
   1212c:	mov	r7, r2
   12130:	str	r5, [sp]
   12134:	ldr	r3, [pc, #96]	; 1219c <__assert_fail@plt+0x1300>
   12138:	ldr	r2, [pc, #96]	; 121a0 <__assert_fail@plt+0x1304>
   1213c:	bl	10dac <getopt_long@plt>
   12140:	cmn	r0, #1
   12144:	beq	12110 <__assert_fail@plt+0x1274>
   12148:	cmp	r0, #104	; 0x68
   1214c:	beq	12184 <__assert_fail@plt+0x12e8>
   12150:	cmp	r0, #118	; 0x76
   12154:	bne	12110 <__assert_fail@plt+0x1274>
   12158:	ldr	r3, [pc, #68]	; 121a4 <__assert_fail@plt+0x1308>
   1215c:	add	ip, sp, #48	; 0x30
   12160:	mov	r2, r8
   12164:	ldr	r0, [r3]
   12168:	mov	r1, r7
   1216c:	str	ip, [sp]
   12170:	ldr	r3, [sp, #40]	; 0x28
   12174:	str	ip, [sp, #12]
   12178:	bl	1486c <__assert_fail@plt+0x39d0>
   1217c:	mov	r0, r5
   12180:	bl	10dc4 <exit@plt>
   12184:	mov	r0, r5
   12188:	ldr	r3, [sp, #44]	; 0x2c
   1218c:	blx	r3
   12190:	b	12110 <__assert_fail@plt+0x1274>
   12194:	andeq	r7, r2, r0, asr r1
   12198:	andeq	r7, r2, r8, lsr r1
   1219c:	andeq	r5, r1, r0, ror #22
   121a0:	muleq	r1, r0, fp
   121a4:	andeq	r7, r2, ip, asr #2
   121a8:	push	{r4, r5, r6, r7, r8, lr}
   121ac:	sub	sp, sp, #16
   121b0:	ldr	r5, [pc, #176]	; 12268 <__assert_fail@plt+0x13cc>
   121b4:	ldrb	r8, [sp, #44]	; 0x2c
   121b8:	ldr	r4, [pc, #172]	; 1226c <__assert_fail@plt+0x13d0>
   121bc:	ldr	lr, [pc, #172]	; 12270 <__assert_fail@plt+0x13d4>
   121c0:	cmp	r8, #0
   121c4:	mov	r6, r2
   121c8:	movne	r2, r5
   121cc:	mov	r5, #0
   121d0:	mov	ip, #1
   121d4:	moveq	r2, lr
   121d8:	mov	r7, r3
   121dc:	str	r5, [sp]
   121e0:	ldr	r3, [pc, #140]	; 12274 <__assert_fail@plt+0x13d8>
   121e4:	ldr	r8, [r4]
   121e8:	str	ip, [r4]
   121ec:	bl	10dac <getopt_long@plt>
   121f0:	cmn	r0, #1
   121f4:	beq	12244 <__assert_fail@plt+0x13a8>
   121f8:	cmp	r0, #104	; 0x68
   121fc:	beq	12250 <__assert_fail@plt+0x13b4>
   12200:	cmp	r0, #118	; 0x76
   12204:	bne	12234 <__assert_fail@plt+0x1398>
   12208:	ldr	r3, [pc, #104]	; 12278 <__assert_fail@plt+0x13dc>
   1220c:	add	ip, sp, #52	; 0x34
   12210:	mov	r2, r7
   12214:	ldr	r0, [r3]
   12218:	mov	r1, r6
   1221c:	str	ip, [sp]
   12220:	ldr	r3, [sp, #40]	; 0x28
   12224:	str	ip, [sp, #12]
   12228:	bl	1486c <__assert_fail@plt+0x39d0>
   1222c:	mov	r0, r5
   12230:	bl	10dc4 <exit@plt>
   12234:	ldr	r3, [pc, #64]	; 1227c <__assert_fail@plt+0x13e0>
   12238:	ldr	r0, [r3]
   1223c:	ldr	r3, [sp, #48]	; 0x30
   12240:	blx	r3
   12244:	str	r8, [r4]
   12248:	add	sp, sp, #16
   1224c:	pop	{r4, r5, r6, r7, r8, pc}
   12250:	mov	r0, r5
   12254:	ldr	r3, [sp, #48]	; 0x30
   12258:	blx	r3
   1225c:	str	r8, [r4]
   12260:	add	sp, sp, #16
   12264:	pop	{r4, r5, r6, r7, r8, pc}
   12268:	andeq	r5, r1, r8, ror r8
   1226c:	andeq	r7, r2, r0, asr r1
   12270:	muleq	r1, r0, fp
   12274:	andeq	r5, r1, r0, ror #22
   12278:	andeq	r7, r2, ip, asr #2
   1227c:	andeq	r7, r2, r8, ror #1
   12280:	push	{r4, r5, r6, lr}
   12284:	subs	r4, r0, #0
   12288:	beq	122fc <__assert_fail@plt+0x1460>
   1228c:	mov	r1, #47	; 0x2f
   12290:	bl	10e54 <strrchr@plt>
   12294:	subs	r5, r0, #0
   12298:	beq	122e8 <__assert_fail@plt+0x144c>
   1229c:	add	r6, r5, #1
   122a0:	sub	r3, r6, r4
   122a4:	cmp	r3, #6
   122a8:	ble	122e8 <__assert_fail@plt+0x144c>
   122ac:	mov	r2, #7
   122b0:	ldr	r1, [pc, #96]	; 12318 <__assert_fail@plt+0x147c>
   122b4:	sub	r0, r5, #6
   122b8:	bl	10e78 <strncmp@plt>
   122bc:	cmp	r0, #0
   122c0:	bne	122e8 <__assert_fail@plt+0x144c>
   122c4:	mov	r2, #3
   122c8:	ldr	r1, [pc, #76]	; 1231c <__assert_fail@plt+0x1480>
   122cc:	mov	r0, r6
   122d0:	bl	10e78 <strncmp@plt>
   122d4:	cmp	r0, #0
   122d8:	movne	r4, r6
   122dc:	ldreq	r3, [pc, #60]	; 12320 <__assert_fail@plt+0x1484>
   122e0:	addeq	r4, r5, #4
   122e4:	streq	r4, [r3]
   122e8:	ldr	r2, [pc, #52]	; 12324 <__assert_fail@plt+0x1488>
   122ec:	ldr	r3, [pc, #52]	; 12328 <__assert_fail@plt+0x148c>
   122f0:	str	r4, [r2]
   122f4:	str	r4, [r3]
   122f8:	pop	{r4, r5, r6, pc}
   122fc:	ldr	r3, [pc, #40]	; 1232c <__assert_fail@plt+0x1490>
   12300:	mov	r2, #55	; 0x37
   12304:	mov	r1, #1
   12308:	ldr	r3, [r3]
   1230c:	ldr	r0, [pc, #28]	; 12330 <__assert_fail@plt+0x1494>
   12310:	bl	10d10 <fwrite@plt>
   12314:	bl	10e84 <abort@plt>
   12318:	ldrdeq	r5, [r1], -ip
   1231c:	andeq	r5, r1, r4, ror #23
   12320:	andeq	r7, r2, r0, lsr r1
   12324:	andeq	r7, r2, r0, ror r1
   12328:	andeq	r7, r2, r4, lsr r1
   1232c:	andeq	r7, r2, r0, asr #2
   12330:	andeq	r5, r1, r4, lsr #23
   12334:	push	{r4, r5, r6, lr}
   12338:	mov	r2, #48	; 0x30
   1233c:	mov	r4, r1
   12340:	mov	r1, #0
   12344:	mov	r5, r0
   12348:	bl	10df4 <memset@plt>
   1234c:	cmp	r4, #10
   12350:	beq	12360 <__assert_fail@plt+0x14c4>
   12354:	str	r4, [r5]
   12358:	mov	r0, r5
   1235c:	pop	{r4, r5, r6, pc}
   12360:	bl	10e84 <abort@plt>
   12364:	push	{r4, r5, r6, lr}
   12368:	mov	r4, r0
   1236c:	mov	r5, r1
   12370:	bl	15088 <__assert_fail@plt+0x41ec>
   12374:	ldrb	r3, [r0]
   12378:	bic	r3, r3, #32
   1237c:	cmp	r3, #85	; 0x55
   12380:	bne	123e0 <__assert_fail@plt+0x1544>
   12384:	ldrb	r3, [r0, #1]
   12388:	bic	r3, r3, #32
   1238c:	cmp	r3, #84	; 0x54
   12390:	bne	1241c <__assert_fail@plt+0x1580>
   12394:	ldrb	r3, [r0, #2]
   12398:	bic	r3, r3, #32
   1239c:	cmp	r3, #70	; 0x46
   123a0:	bne	1241c <__assert_fail@plt+0x1580>
   123a4:	ldrb	r3, [r0, #3]
   123a8:	cmp	r3, #45	; 0x2d
   123ac:	bne	1241c <__assert_fail@plt+0x1580>
   123b0:	ldrb	r3, [r0, #4]
   123b4:	cmp	r3, #56	; 0x38
   123b8:	bne	1241c <__assert_fail@plt+0x1580>
   123bc:	ldrb	r3, [r0, #5]
   123c0:	cmp	r3, #0
   123c4:	bne	1241c <__assert_fail@plt+0x1580>
   123c8:	ldrb	r2, [r4]
   123cc:	ldr	r3, [pc, #152]	; 1246c <__assert_fail@plt+0x15d0>
   123d0:	ldr	r0, [pc, #152]	; 12470 <__assert_fail@plt+0x15d4>
   123d4:	cmp	r2, #96	; 0x60
   123d8:	movne	r0, r3
   123dc:	pop	{r4, r5, r6, pc}
   123e0:	cmp	r3, #71	; 0x47
   123e4:	bne	1241c <__assert_fail@plt+0x1580>
   123e8:	ldrb	r3, [r0, #1]
   123ec:	bic	r3, r3, #32
   123f0:	cmp	r3, #66	; 0x42
   123f4:	bne	1241c <__assert_fail@plt+0x1580>
   123f8:	ldrb	r3, [r0, #2]
   123fc:	cmp	r3, #49	; 0x31
   12400:	bne	1241c <__assert_fail@plt+0x1580>
   12404:	ldrb	r3, [r0, #3]
   12408:	cmp	r3, #56	; 0x38
   1240c:	bne	1241c <__assert_fail@plt+0x1580>
   12410:	ldrb	r3, [r0, #4]
   12414:	cmp	r3, #48	; 0x30
   12418:	beq	12430 <__assert_fail@plt+0x1594>
   1241c:	ldr	r3, [pc, #80]	; 12474 <__assert_fail@plt+0x15d8>
   12420:	cmp	r5, #9
   12424:	ldr	r0, [pc, #76]	; 12478 <__assert_fail@plt+0x15dc>
   12428:	movne	r0, r3
   1242c:	pop	{r4, r5, r6, pc}
   12430:	ldrb	r3, [r0, #5]
   12434:	cmp	r3, #51	; 0x33
   12438:	bne	1241c <__assert_fail@plt+0x1580>
   1243c:	ldrb	r3, [r0, #6]
   12440:	cmp	r3, #48	; 0x30
   12444:	bne	1241c <__assert_fail@plt+0x1580>
   12448:	ldrb	r3, [r0, #7]
   1244c:	cmp	r3, #0
   12450:	bne	1241c <__assert_fail@plt+0x1580>
   12454:	ldrb	r2, [r4]
   12458:	ldr	r3, [pc, #28]	; 1247c <__assert_fail@plt+0x15e0>
   1245c:	ldr	r0, [pc, #28]	; 12480 <__assert_fail@plt+0x15e4>
   12460:	cmp	r2, #96	; 0x60
   12464:	movne	r0, r3
   12468:	pop	{r4, r5, r6, pc}
   1246c:	andeq	r5, r1, r0, asr #24
   12470:	andeq	r5, r1, ip, lsr ip
   12474:	andeq	r5, r1, r0, asr ip
   12478:	andeq	r5, r1, ip, asr #24
   1247c:	andeq	r5, r1, r8, asr #24
   12480:	andeq	r5, r1, r4, asr #24
   12484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12488:	sub	sp, sp, #116	; 0x74
   1248c:	mov	sl, r0
   12490:	str	r3, [sp, #24]
   12494:	mov	r3, #1
   12498:	mov	r8, r1
   1249c:	str	r2, [sp, #56]	; 0x38
   124a0:	str	r3, [sp, #36]	; 0x24
   124a4:	bl	10d28 <__ctype_get_mb_cur_max@plt>
   124a8:	ldr	r3, [sp, #156]	; 0x9c
   124ac:	mov	fp, r8
   124b0:	mov	r2, #0
   124b4:	lsr	r3, r3, #1
   124b8:	and	r3, r3, #1
   124bc:	str	r2, [sp, #68]	; 0x44
   124c0:	str	r3, [sp, #28]
   124c4:	str	r2, [sp, #40]	; 0x28
   124c8:	str	r2, [sp, #44]	; 0x2c
   124cc:	str	r2, [sp, #52]	; 0x34
   124d0:	str	r2, [sp, #64]	; 0x40
   124d4:	str	r2, [sp, #72]	; 0x48
   124d8:	str	sl, [sp, #32]
   124dc:	str	r0, [sp, #76]	; 0x4c
   124e0:	ldr	r3, [sp, #152]	; 0x98
   124e4:	cmp	r3, #10
   124e8:	ldrls	pc, [pc, r3, lsl #2]
   124ec:	b	136ac <__assert_fail@plt+0x2810>
   124f0:	andeq	r2, r1, ip, lsl r5
   124f4:	andeq	r2, r1, r4, lsl #16
   124f8:	andeq	r2, r1, r8, lsr #16
   124fc:	andeq	r2, r1, ip, asr #16
   12500:	andeq	r2, r1, r8, ror r9
   12504:	andeq	r2, r1, ip, asr #18
   12508:	andeq	r2, r1, r4, lsr #18
   1250c:	andeq	r2, r1, r0, ror #16
   12510:	andeq	r2, r1, r8, ror r8
   12514:	andeq	r2, r1, r8, ror r8
   12518:	andeq	r2, r1, r8, ror r8
   1251c:	mov	r3, #0
   12520:	mov	r7, r3
   12524:	str	r3, [sp, #28]
   12528:	ldr	r3, [sp, #44]	; 0x2c
   1252c:	mov	sl, #0
   12530:	eor	r3, r3, #1
   12534:	str	r3, [sp, #60]	; 0x3c
   12538:	ldr	r3, [sp, #24]
   1253c:	cmn	r3, #1
   12540:	beq	12aa4 <__assert_fail@plt+0x1c08>
   12544:	ldr	r3, [sp, #24]
   12548:	subs	r5, r3, sl
   1254c:	movne	r5, #1
   12550:	cmp	r5, #0
   12554:	beq	12abc <__assert_fail@plt+0x1c20>
   12558:	ldr	r3, [sp, #152]	; 0x98
   1255c:	ldr	r8, [sp, #44]	; 0x2c
   12560:	cmp	r3, #2
   12564:	moveq	r8, #0
   12568:	andne	r8, r8, #1
   1256c:	ldr	r3, [sp, #52]	; 0x34
   12570:	adds	r9, r3, #0
   12574:	movne	r9, #1
   12578:	ands	r6, r9, r8
   1257c:	beq	12f24 <__assert_fail@plt+0x2088>
   12580:	ldr	r2, [sp, #52]	; 0x34
   12584:	ldr	r1, [sp, #24]
   12588:	cmp	r2, #1
   1258c:	mov	r3, r2
   12590:	movls	r3, #0
   12594:	movhi	r3, #1
   12598:	cmn	r1, #1
   1259c:	movne	r3, #0
   125a0:	cmp	r3, #0
   125a4:	add	r4, sl, r2
   125a8:	beq	125b8 <__assert_fail@plt+0x171c>
   125ac:	ldr	r0, [sp, #56]	; 0x38
   125b0:	bl	10dd0 <strlen@plt>
   125b4:	str	r0, [sp, #24]
   125b8:	ldr	r3, [sp, #24]
   125bc:	cmp	r3, r4
   125c0:	ldr	r3, [sp, #56]	; 0x38
   125c4:	add	r3, r3, sl
   125c8:	str	r3, [sp, #48]	; 0x30
   125cc:	bcc	12f30 <__assert_fail@plt+0x2094>
   125d0:	mov	r0, r3
   125d4:	ldr	r2, [sp, #52]	; 0x34
   125d8:	ldr	r1, [sp, #64]	; 0x40
   125dc:	bl	10cbc <memcmp@plt>
   125e0:	cmp	r0, #0
   125e4:	bne	12f30 <__assert_fail@plt+0x2094>
   125e8:	ldr	r3, [sp, #28]
   125ec:	cmp	r3, #0
   125f0:	bne	137ac <__assert_fail@plt+0x2910>
   125f4:	ldr	r3, [sp, #48]	; 0x30
   125f8:	ldrb	r4, [r3]
   125fc:	cmp	r4, #126	; 0x7e
   12600:	ldrls	pc, [pc, r4, lsl #2]
   12604:	b	12ec4 <__assert_fail@plt+0x2028>
   12608:	andeq	r2, r1, r8, ror #25
   1260c:	andeq	r2, r1, r4, asr #29
   12610:	andeq	r2, r1, r4, asr #29
   12614:	andeq	r2, r1, r4, asr #29
   12618:	andeq	r2, r1, r4, asr #29
   1261c:	andeq	r2, r1, r4, asr #29
   12620:	andeq	r2, r1, r4, asr #29
   12624:	andeq	r2, r1, ip, asr #25
   12628:			; <UNDEFINED> instruction: 0x00012cb0
   1262c:	andeq	r2, r1, ip, lsr #29
   12630:	andeq	r2, r1, r0, lsl ip
   12634:	strdeq	r2, [r1], -r4
   12638:	andeq	r2, r1, r8, lsl #29
   1263c:	andeq	r2, r1, r4, ror #28
   12640:	andeq	r2, r1, r4, asr #29
   12644:	andeq	r2, r1, r4, asr #29
   12648:	andeq	r2, r1, r4, asr #29
   1264c:	andeq	r2, r1, r4, asr #29
   12650:	andeq	r2, r1, r4, asr #29
   12654:	andeq	r2, r1, r4, asr #29
   12658:	andeq	r2, r1, r4, asr #29
   1265c:	andeq	r2, r1, r4, asr #29
   12660:	andeq	r2, r1, r4, asr #29
   12664:	andeq	r2, r1, r4, asr #29
   12668:	andeq	r2, r1, r4, asr #29
   1266c:	andeq	r2, r1, r4, asr #29
   12670:	andeq	r2, r1, r4, asr #29
   12674:	andeq	r2, r1, r4, asr #29
   12678:	andeq	r2, r1, r4, asr #29
   1267c:	andeq	r2, r1, r4, asr #29
   12680:	andeq	r2, r1, r4, asr #29
   12684:	andeq	r2, r1, r4, asr #29
   12688:	andeq	r2, r1, r4, lsr #29
   1268c:	ldrdeq	r2, [r1], -r8
   12690:	ldrdeq	r2, [r1], -r8
   12694:	andeq	r2, r1, r8, ror #19
   12698:	ldrdeq	r2, [r1], -r8
   1269c:	andeq	r2, r1, r0, ror lr
   126a0:	ldrdeq	r2, [r1], -r8
   126a4:	andeq	r2, r1, r4, asr #28
   126a8:	ldrdeq	r2, [r1], -r8
   126ac:	ldrdeq	r2, [r1], -r8
   126b0:	ldrdeq	r2, [r1], -r8
   126b4:	andeq	r2, r1, r0, ror lr
   126b8:	andeq	r2, r1, r0, ror lr
   126bc:	andeq	r2, r1, r0, ror lr
   126c0:	andeq	r2, r1, r0, ror lr
   126c4:	andeq	r2, r1, r0, ror lr
   126c8:	andeq	r2, r1, r0, ror lr
   126cc:	andeq	r2, r1, r0, ror lr
   126d0:	andeq	r2, r1, r0, ror lr
   126d4:	andeq	r2, r1, r0, ror lr
   126d8:	andeq	r2, r1, r0, ror lr
   126dc:	andeq	r2, r1, r0, ror lr
   126e0:	andeq	r2, r1, r0, ror lr
   126e4:	andeq	r2, r1, r0, ror lr
   126e8:	andeq	r2, r1, r0, ror lr
   126ec:	andeq	r2, r1, r0, ror lr
   126f0:	andeq	r2, r1, r0, ror lr
   126f4:	ldrdeq	r2, [r1], -r8
   126f8:	ldrdeq	r2, [r1], -r8
   126fc:	ldrdeq	r2, [r1], -r8
   12700:	ldrdeq	r2, [r1], -r8
   12704:	andeq	r2, r1, r4, lsl lr
   12708:	andeq	r2, r1, r4, asr #29
   1270c:	andeq	r2, r1, r0, ror lr
   12710:	andeq	r2, r1, r0, ror lr
   12714:	andeq	r2, r1, r0, ror lr
   12718:	andeq	r2, r1, r0, ror lr
   1271c:	andeq	r2, r1, r0, ror lr
   12720:	andeq	r2, r1, r0, ror lr
   12724:	andeq	r2, r1, r0, ror lr
   12728:	andeq	r2, r1, r0, ror lr
   1272c:	andeq	r2, r1, r0, ror lr
   12730:	andeq	r2, r1, r0, ror lr
   12734:	andeq	r2, r1, r0, ror lr
   12738:	andeq	r2, r1, r0, ror lr
   1273c:	andeq	r2, r1, r0, ror lr
   12740:	andeq	r2, r1, r0, ror lr
   12744:	andeq	r2, r1, r0, ror lr
   12748:	andeq	r2, r1, r0, ror lr
   1274c:	andeq	r2, r1, r0, ror lr
   12750:	andeq	r2, r1, r0, ror lr
   12754:	andeq	r2, r1, r0, ror lr
   12758:	andeq	r2, r1, r0, ror lr
   1275c:	andeq	r2, r1, r0, ror lr
   12760:	andeq	r2, r1, r0, ror lr
   12764:	andeq	r2, r1, r0, ror lr
   12768:	andeq	r2, r1, r0, ror lr
   1276c:	andeq	r2, r1, r0, ror lr
   12770:	andeq	r2, r1, r0, ror lr
   12774:	ldrdeq	r2, [r1], -r8
   12778:	andeq	r2, r1, r4, lsr fp
   1277c:	andeq	r2, r1, r0, ror lr
   12780:	ldrdeq	r2, [r1], -r8
   12784:	andeq	r2, r1, r0, ror lr
   12788:	ldrdeq	r2, [r1], -r8
   1278c:	andeq	r2, r1, r0, ror lr
   12790:	andeq	r2, r1, r0, ror lr
   12794:	andeq	r2, r1, r0, ror lr
   12798:	andeq	r2, r1, r0, ror lr
   1279c:	andeq	r2, r1, r0, ror lr
   127a0:	andeq	r2, r1, r0, ror lr
   127a4:	andeq	r2, r1, r0, ror lr
   127a8:	andeq	r2, r1, r0, ror lr
   127ac:	andeq	r2, r1, r0, ror lr
   127b0:	andeq	r2, r1, r0, ror lr
   127b4:	andeq	r2, r1, r0, ror lr
   127b8:	andeq	r2, r1, r0, ror lr
   127bc:	andeq	r2, r1, r0, ror lr
   127c0:	andeq	r2, r1, r0, ror lr
   127c4:	andeq	r2, r1, r0, ror lr
   127c8:	andeq	r2, r1, r0, ror lr
   127cc:	andeq	r2, r1, r0, ror lr
   127d0:	andeq	r2, r1, r0, ror lr
   127d4:	andeq	r2, r1, r0, ror lr
   127d8:	andeq	r2, r1, r0, ror lr
   127dc:	andeq	r2, r1, r0, ror lr
   127e0:	andeq	r2, r1, r0, ror lr
   127e4:	andeq	r2, r1, r0, ror lr
   127e8:	andeq	r2, r1, r0, ror lr
   127ec:	andeq	r2, r1, r0, ror lr
   127f0:	andeq	r2, r1, r0, ror lr
   127f4:	andeq	r2, r1, r8, asr #19
   127f8:	ldrdeq	r2, [r1], -r8
   127fc:	andeq	r2, r1, r8, asr #19
   12800:	andeq	r2, r1, r8, ror #19
   12804:	mov	r3, #1
   12808:	str	r3, [sp, #28]
   1280c:	str	r3, [sp, #52]	; 0x34
   12810:	ldr	r3, [pc, #4000]	; 137b8 <__assert_fail@plt+0x291c>
   12814:	mov	r7, #0
   12818:	str	r3, [sp, #64]	; 0x40
   1281c:	mov	r3, #2
   12820:	str	r3, [sp, #152]	; 0x98
   12824:	b	12528 <__assert_fail@plt+0x168c>
   12828:	ldr	r3, [sp, #28]
   1282c:	cmp	r3, #0
   12830:	beq	1298c <__assert_fail@plt+0x1af0>
   12834:	mov	r3, #1
   12838:	str	r3, [sp, #52]	; 0x34
   1283c:	ldr	r3, [pc, #3956]	; 137b8 <__assert_fail@plt+0x291c>
   12840:	mov	r7, #0
   12844:	str	r3, [sp, #64]	; 0x40
   12848:	b	12528 <__assert_fail@plt+0x168c>
   1284c:	mov	r3, #1
   12850:	str	r3, [sp, #44]	; 0x2c
   12854:	str	r3, [sp, #52]	; 0x34
   12858:	str	r3, [sp, #28]
   1285c:	b	12810 <__assert_fail@plt+0x1974>
   12860:	mov	r3, #0
   12864:	str	r3, [sp, #28]
   12868:	mov	r3, #1
   1286c:	str	r3, [sp, #44]	; 0x2c
   12870:	mov	r7, #0
   12874:	b	12528 <__assert_fail@plt+0x168c>
   12878:	ldr	r3, [sp, #152]	; 0x98
   1287c:	cmp	r3, #10
   12880:	beq	128c4 <__assert_fail@plt+0x1a28>
   12884:	mov	r2, #5
   12888:	ldr	r1, [pc, #3884]	; 137bc <__assert_fail@plt+0x2920>
   1288c:	mov	r0, #0
   12890:	bl	10cd4 <dcgettext@plt>
   12894:	ldr	r2, [pc, #3872]	; 137bc <__assert_fail@plt+0x2920>
   12898:	cmp	r0, r2
   1289c:	str	r0, [sp, #164]	; 0xa4
   128a0:	beq	138a8 <__assert_fail@plt+0x2a0c>
   128a4:	mov	r2, #5
   128a8:	ldr	r1, [pc, #3848]	; 137b8 <__assert_fail@plt+0x291c>
   128ac:	mov	r0, #0
   128b0:	bl	10cd4 <dcgettext@plt>
   128b4:	ldr	r2, [pc, #3836]	; 137b8 <__assert_fail@plt+0x291c>
   128b8:	cmp	r0, r2
   128bc:	str	r0, [sp, #168]	; 0xa8
   128c0:	beq	13898 <__assert_fail@plt+0x29fc>
   128c4:	ldr	r7, [sp, #28]
   128c8:	cmp	r7, #0
   128cc:	movne	r7, #0
   128d0:	bne	12904 <__assert_fail@plt+0x1a68>
   128d4:	ldr	r3, [sp, #164]	; 0xa4
   128d8:	ldrb	r3, [r3]
   128dc:	cmp	r3, #0
   128e0:	beq	138b8 <__assert_fail@plt+0x2a1c>
   128e4:	ldr	r2, [sp, #164]	; 0xa4
   128e8:	ldr	r1, [sp, #32]
   128ec:	cmp	fp, r7
   128f0:	strbhi	r3, [r1, r7]
   128f4:	ldrb	r3, [r2, #1]!
   128f8:	add	r7, r7, #1
   128fc:	cmp	r3, #0
   12900:	bne	128ec <__assert_fail@plt+0x1a50>
   12904:	ldr	r0, [sp, #168]	; 0xa8
   12908:	bl	10dd0 <strlen@plt>
   1290c:	ldr	r3, [sp, #168]	; 0xa8
   12910:	str	r3, [sp, #64]	; 0x40
   12914:	mov	r3, #1
   12918:	str	r3, [sp, #44]	; 0x2c
   1291c:	str	r0, [sp, #52]	; 0x34
   12920:	b	12528 <__assert_fail@plt+0x168c>
   12924:	mov	r3, #1
   12928:	str	r3, [sp, #44]	; 0x2c
   1292c:	str	r3, [sp, #52]	; 0x34
   12930:	str	r3, [sp, #28]
   12934:	ldr	r3, [pc, #3716]	; 137c0 <__assert_fail@plt+0x2924>
   12938:	mov	r7, #0
   1293c:	str	r3, [sp, #64]	; 0x40
   12940:	mov	r3, #5
   12944:	str	r3, [sp, #152]	; 0x98
   12948:	b	12528 <__assert_fail@plt+0x168c>
   1294c:	ldr	r3, [sp, #28]
   12950:	cmp	r3, #0
   12954:	beq	13654 <__assert_fail@plt+0x27b8>
   12958:	ldr	r3, [sp, #28]
   1295c:	mov	r7, #0
   12960:	str	r3, [sp, #44]	; 0x2c
   12964:	mov	r3, #1
   12968:	str	r3, [sp, #52]	; 0x34
   1296c:	ldr	r3, [pc, #3660]	; 137c0 <__assert_fail@plt+0x2924>
   12970:	str	r3, [sp, #64]	; 0x40
   12974:	b	12528 <__assert_fail@plt+0x168c>
   12978:	ldr	r3, [sp, #28]
   1297c:	cmp	r3, #0
   12980:	mov	r3, #1
   12984:	streq	r3, [sp, #44]	; 0x2c
   12988:	bne	1280c <__assert_fail@plt+0x1970>
   1298c:	cmp	fp, #0
   12990:	beq	13684 <__assert_fail@plt+0x27e8>
   12994:	ldr	r3, [sp, #32]
   12998:	mov	r2, #39	; 0x27
   1299c:	mov	r7, #1
   129a0:	strb	r2, [r3]
   129a4:	mov	r3, #0
   129a8:	str	r3, [sp, #28]
   129ac:	mov	r3, #1
   129b0:	str	r3, [sp, #52]	; 0x34
   129b4:	ldr	r3, [pc, #3580]	; 137b8 <__assert_fail@plt+0x291c>
   129b8:	str	r3, [sp, #64]	; 0x40
   129bc:	mov	r3, #2
   129c0:	str	r3, [sp, #152]	; 0x98
   129c4:	b	12528 <__assert_fail@plt+0x168c>
   129c8:	ldr	r3, [sp, #24]
   129cc:	cmn	r3, #1
   129d0:	beq	135e8 <__assert_fail@plt+0x274c>
   129d4:	ldr	r3, [sp, #24]
   129d8:	subs	r3, r3, #1
   129dc:	movne	r3, #1
   129e0:	cmp	r3, #0
   129e4:	bne	129f0 <__assert_fail@plt+0x1b54>
   129e8:	cmp	sl, #0
   129ec:	beq	12ddc <__assert_fail@plt+0x1f40>
   129f0:	ldr	r3, [sp, #152]	; 0x98
   129f4:	mov	r5, #0
   129f8:	sub	r2, r3, #2
   129fc:	mov	r8, r5
   12a00:	clz	r2, r2
   12a04:	lsr	r2, r2, #5
   12a08:	ldr	r3, [sp, #60]	; 0x3c
   12a0c:	ldr	r1, [sp, #28]
   12a10:	orr	r3, r2, r3
   12a14:	eor	r3, r3, #1
   12a18:	orr	r3, r1, r3
   12a1c:	tst	r3, #255	; 0xff
   12a20:	bne	1314c <__assert_fail@plt+0x22b0>
   12a24:	cmp	r6, #0
   12a28:	bne	12b78 <__assert_fail@plt+0x1cdc>
   12a2c:	ldr	r3, [sp, #40]	; 0x28
   12a30:	eor	r8, r8, #1
   12a34:	and	r8, r8, r3
   12a38:	add	sl, sl, #1
   12a3c:	uxtb	r6, r8
   12a40:	cmp	r6, #0
   12a44:	beq	12a78 <__assert_fail@plt+0x1bdc>
   12a48:	cmp	fp, r7
   12a4c:	movhi	r2, #39	; 0x27
   12a50:	ldrhi	r3, [sp, #32]
   12a54:	strbhi	r2, [r3, r7]
   12a58:	add	r3, r7, #1
   12a5c:	cmp	fp, r3
   12a60:	movhi	r1, #39	; 0x27
   12a64:	ldrhi	r2, [sp, #32]
   12a68:	add	r7, r7, #2
   12a6c:	strbhi	r1, [r2, r3]
   12a70:	mov	r3, #0
   12a74:	str	r3, [sp, #40]	; 0x28
   12a78:	cmp	r7, fp
   12a7c:	ldrcc	r3, [sp, #32]
   12a80:	strbcc	r4, [r3, r7]
   12a84:	ldr	r3, [sp, #36]	; 0x24
   12a88:	cmp	r5, #0
   12a8c:	moveq	r3, #0
   12a90:	str	r3, [sp, #36]	; 0x24
   12a94:	ldr	r3, [sp, #24]
   12a98:	add	r7, r7, #1
   12a9c:	cmn	r3, #1
   12aa0:	bne	12544 <__assert_fail@plt+0x16a8>
   12aa4:	ldr	r3, [sp, #56]	; 0x38
   12aa8:	ldrb	r5, [r3, sl]
   12aac:	adds	r5, r5, #0
   12ab0:	movne	r5, #1
   12ab4:	cmp	r5, #0
   12ab8:	bne	12558 <__assert_fail@plt+0x16bc>
   12abc:	ldr	r3, [sp, #152]	; 0x98
   12ac0:	ldr	r1, [sp, #28]
   12ac4:	sub	r3, r3, #2
   12ac8:	clz	r3, r3
   12acc:	lsr	r3, r3, #5
   12ad0:	and	r9, r1, r3
   12ad4:	cmp	r7, #0
   12ad8:	movne	r2, #0
   12adc:	andeq	r2, r9, #1
   12ae0:	cmp	r2, #0
   12ae4:	bne	134c0 <__assert_fail@plt+0x2624>
   12ae8:	eor	r2, r1, #1
   12aec:	ands	r3, r3, r2
   12af0:	beq	1397c <__assert_fail@plt+0x2ae0>
   12af4:	ldr	r2, [sp, #68]	; 0x44
   12af8:	cmp	r2, #0
   12afc:	beq	13968 <__assert_fail@plt+0x2acc>
   12b00:	ldr	r3, [sp, #36]	; 0x24
   12b04:	cmp	r3, #0
   12b08:	bne	13920 <__assert_fail@plt+0x2a84>
   12b0c:	ldr	r2, [sp, #72]	; 0x48
   12b10:	clz	r3, fp
   12b14:	cmp	r2, #0
   12b18:	lsr	r3, r3, #5
   12b1c:	moveq	r3, #0
   12b20:	cmp	r3, #0
   12b24:	beq	138c0 <__assert_fail@plt+0x2a24>
   12b28:	str	r3, [sp, #68]	; 0x44
   12b2c:	ldr	fp, [sp, #72]	; 0x48
   12b30:	b	124e0 <__assert_fail@plt+0x1644>
   12b34:	ldr	r3, [sp, #152]	; 0x98
   12b38:	cmp	r3, #2
   12b3c:	beq	13190 <__assert_fail@plt+0x22f4>
   12b40:	ldr	r3, [sp, #44]	; 0x2c
   12b44:	ldr	r2, [sp, #28]
   12b48:	and	r2, r3, r2
   12b4c:	ands	r2, r9, r2
   12b50:	bne	1319c <__assert_fail@plt+0x2300>
   12b54:	mov	r4, #92	; 0x5c
   12b58:	mov	r3, r4
   12b5c:	ldr	r1, [sp, #44]	; 0x2c
   12b60:	cmp	r1, #0
   12b64:	moveq	r5, #0
   12b68:	moveq	r8, r1
   12b6c:	beq	12a08 <__assert_fail@plt+0x1b6c>
   12b70:	mov	r4, r3
   12b74:	mov	r5, #0
   12b78:	ldr	r3, [sp, #28]
   12b7c:	cmp	r3, #0
   12b80:	bne	13184 <__assert_fail@plt+0x22e8>
   12b84:	ldr	r3, [sp, #40]	; 0x28
   12b88:	eor	r9, r3, #1
   12b8c:	and	r9, r9, r2
   12b90:	ands	r9, r9, #255	; 0xff
   12b94:	beq	12bd8 <__assert_fail@plt+0x1d3c>
   12b98:	cmp	fp, r7
   12b9c:	movhi	r2, #39	; 0x27
   12ba0:	ldrhi	r3, [sp, #32]
   12ba4:	str	r9, [sp, #40]	; 0x28
   12ba8:	strbhi	r2, [r3, r7]
   12bac:	add	r3, r7, #1
   12bb0:	cmp	fp, r3
   12bb4:	movhi	r1, #36	; 0x24
   12bb8:	ldrhi	r2, [sp, #32]
   12bbc:	strbhi	r1, [r2, r3]
   12bc0:	add	r3, r7, #2
   12bc4:	cmp	fp, r3
   12bc8:	add	r7, r7, #3
   12bcc:	ldrhi	r2, [sp, #32]
   12bd0:	movhi	r1, #39	; 0x27
   12bd4:	strbhi	r1, [r2, r3]
   12bd8:	cmp	fp, r7
   12bdc:	movhi	r2, #92	; 0x5c
   12be0:	ldrhi	r3, [sp, #32]
   12be4:	add	sl, sl, #1
   12be8:	strbhi	r2, [r3, r7]
   12bec:	add	r7, r7, #1
   12bf0:	b	12a78 <__assert_fail@plt+0x1bdc>
   12bf4:	ldr	r3, [sp, #152]	; 0x98
   12bf8:	mov	r4, #11
   12bfc:	sub	r2, r3, #2
   12c00:	mov	r3, #118	; 0x76
   12c04:	clz	r2, r2
   12c08:	lsr	r2, r2, #5
   12c0c:	b	12b5c <__assert_fail@plt+0x1cc0>
   12c10:	mov	r4, #10
   12c14:	mov	r3, #110	; 0x6e
   12c18:	ldr	r2, [sp, #152]	; 0x98
   12c1c:	ldr	r1, [sp, #28]
   12c20:	sub	r2, r2, #2
   12c24:	clz	r2, r2
   12c28:	lsr	r2, r2, #5
   12c2c:	ands	r1, r1, r2
   12c30:	beq	12b5c <__assert_fail@plt+0x1cc0>
   12c34:	ldr	sl, [sp, #32]
   12c38:	mov	r8, fp
   12c3c:	mov	r2, r1
   12c40:	mov	r3, #2
   12c44:	str	r3, [sp, #152]	; 0x98
   12c48:	ldr	r9, [sp, #44]	; 0x2c
   12c4c:	ldr	r3, [sp, #152]	; 0x98
   12c50:	and	r9, r9, r2
   12c54:	tst	r9, #255	; 0xff
   12c58:	movne	r3, #4
   12c5c:	str	r3, [sp, #152]	; 0x98
   12c60:	ldr	r3, [sp, #156]	; 0x9c
   12c64:	mov	ip, #0
   12c68:	bic	r3, r3, #2
   12c6c:	str	r3, [sp, #4]
   12c70:	ldr	r3, [sp, #168]	; 0xa8
   12c74:	ldr	r2, [sp, #56]	; 0x38
   12c78:	str	r3, [sp, #16]
   12c7c:	ldr	r3, [sp, #164]	; 0xa4
   12c80:	mov	r1, r8
   12c84:	str	r3, [sp, #12]
   12c88:	ldr	r3, [sp, #152]	; 0x98
   12c8c:	mov	r0, sl
   12c90:	str	r3, [sp]
   12c94:	str	ip, [sp, #8]
   12c98:	ldr	r3, [sp, #24]
   12c9c:	bl	12484 <__assert_fail@plt+0x15e8>
   12ca0:	mov	fp, r0
   12ca4:	mov	r0, fp
   12ca8:	add	sp, sp, #116	; 0x74
   12cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cb0:	ldr	r3, [sp, #152]	; 0x98
   12cb4:	mov	r4, #8
   12cb8:	sub	r2, r3, #2
   12cbc:	mov	r3, #98	; 0x62
   12cc0:	clz	r2, r2
   12cc4:	lsr	r2, r2, #5
   12cc8:	b	12b5c <__assert_fail@plt+0x1cc0>
   12ccc:	ldr	r3, [sp, #152]	; 0x98
   12cd0:	mov	r4, #7
   12cd4:	sub	r2, r3, #2
   12cd8:	mov	r3, #97	; 0x61
   12cdc:	clz	r2, r2
   12ce0:	lsr	r2, r2, #5
   12ce4:	b	12b5c <__assert_fail@plt+0x1cc0>
   12ce8:	ldr	r3, [sp, #44]	; 0x2c
   12cec:	cmp	r3, #0
   12cf0:	beq	134d4 <__assert_fail@plt+0x2638>
   12cf4:	ldr	r3, [sp, #28]
   12cf8:	cmp	r3, #0
   12cfc:	bne	137ac <__assert_fail@plt+0x2910>
   12d00:	ldr	r3, [sp, #152]	; 0x98
   12d04:	sub	r2, r3, #2
   12d08:	ldr	r3, [sp, #40]	; 0x28
   12d0c:	clz	r2, r2
   12d10:	eor	r3, r3, #1
   12d14:	lsr	r2, r2, #5
   12d18:	ands	r3, r2, r3
   12d1c:	moveq	r1, r7
   12d20:	beq	12d64 <__assert_fail@plt+0x1ec8>
   12d24:	cmp	fp, r7
   12d28:	movhi	r0, #39	; 0x27
   12d2c:	ldrhi	r1, [sp, #32]
   12d30:	str	r3, [sp, #40]	; 0x28
   12d34:	strbhi	r0, [r1, r7]
   12d38:	add	r1, r7, #1
   12d3c:	cmp	fp, r1
   12d40:	movhi	ip, #36	; 0x24
   12d44:	ldrhi	r0, [sp, #32]
   12d48:	strbhi	ip, [r0, r1]
   12d4c:	add	r1, r7, #2
   12d50:	cmp	fp, r1
   12d54:	movhi	ip, #39	; 0x27
   12d58:	ldrhi	r0, [sp, #32]
   12d5c:	strbhi	ip, [r0, r1]
   12d60:	add	r1, r7, #3
   12d64:	cmp	fp, r1
   12d68:	movhi	r0, #92	; 0x5c
   12d6c:	ldrhi	r3, [sp, #32]
   12d70:	add	r7, r1, #1
   12d74:	strbhi	r0, [r3, r1]
   12d78:	cmp	r8, #0
   12d7c:	beq	136c0 <__assert_fail@plt+0x2824>
   12d80:	ldr	r0, [sp, #24]
   12d84:	add	r3, sl, #1
   12d88:	cmp	r3, r0
   12d8c:	bcs	135fc <__assert_fail@plt+0x2760>
   12d90:	ldr	r0, [sp, #56]	; 0x38
   12d94:	ldrb	r3, [r0, r3]
   12d98:	sub	r3, r3, #48	; 0x30
   12d9c:	cmp	r3, #9
   12da0:	bhi	135fc <__assert_fail@plt+0x2760>
   12da4:	cmp	fp, r7
   12da8:	movhi	r3, #48	; 0x30
   12dac:	ldrhi	r0, [sp, #32]
   12db0:	ldr	r5, [sp, #28]
   12db4:	mov	r4, #48	; 0x30
   12db8:	strbhi	r3, [r0, r7]
   12dbc:	add	r3, r1, #2
   12dc0:	cmp	fp, r3
   12dc4:	movhi	r0, #48	; 0x30
   12dc8:	ldrhi	ip, [sp, #32]
   12dcc:	add	r7, r1, #3
   12dd0:	strbhi	r0, [ip, r3]
   12dd4:	b	12a08 <__assert_fail@plt+0x1b6c>
   12dd8:	mov	r5, #0
   12ddc:	ldr	r3, [sp, #152]	; 0x98
   12de0:	sub	r2, r3, #2
   12de4:	ldr	r3, [sp, #28]
   12de8:	clz	r2, r2
   12dec:	lsr	r2, r2, #5
   12df0:	ands	r8, r3, r2
   12df4:	beq	12a08 <__assert_fail@plt+0x1b6c>
   12df8:	mov	r3, r8
   12dfc:	mov	r2, r3
   12e00:	mov	r3, #2
   12e04:	ldr	sl, [sp, #32]
   12e08:	mov	r8, fp
   12e0c:	str	r3, [sp, #152]	; 0x98
   12e10:	b	12c48 <__assert_fail@plt+0x1dac>
   12e14:	ldr	r3, [sp, #152]	; 0x98
   12e18:	cmp	r3, #2
   12e1c:	beq	13540 <__assert_fail@plt+0x26a4>
   12e20:	cmp	r3, #5
   12e24:	beq	13500 <__assert_fail@plt+0x2664>
   12e28:	mov	r5, #0
   12e2c:	sub	r2, r3, #2
   12e30:	mov	r8, r5
   12e34:	clz	r2, r2
   12e38:	mov	r4, #63	; 0x3f
   12e3c:	lsr	r2, r2, #5
   12e40:	b	12a08 <__assert_fail@plt+0x1b6c>
   12e44:	ldr	r3, [sp, #152]	; 0x98
   12e48:	cmp	r3, #2
   12e4c:	beq	13560 <__assert_fail@plt+0x26c4>
   12e50:	mov	r2, #0
   12e54:	str	r5, [sp, #68]	; 0x44
   12e58:	mov	r8, r2
   12e5c:	mov	r4, #39	; 0x27
   12e60:	b	12a08 <__assert_fail@plt+0x1b6c>
   12e64:	mov	r4, #13
   12e68:	mov	r3, #114	; 0x72
   12e6c:	b	12c18 <__assert_fail@plt+0x1d7c>
   12e70:	ldr	r3, [sp, #152]	; 0x98
   12e74:	mov	r8, #0
   12e78:	sub	r2, r3, #2
   12e7c:	clz	r2, r2
   12e80:	lsr	r2, r2, #5
   12e84:	b	12a08 <__assert_fail@plt+0x1b6c>
   12e88:	ldr	r3, [sp, #152]	; 0x98
   12e8c:	mov	r4, #12
   12e90:	sub	r2, r3, #2
   12e94:	mov	r3, #102	; 0x66
   12e98:	clz	r2, r2
   12e9c:	lsr	r2, r2, #5
   12ea0:	b	12b5c <__assert_fail@plt+0x1cc0>
   12ea4:	mov	r5, r6
   12ea8:	b	12ddc <__assert_fail@plt+0x1f40>
   12eac:	ldr	r3, [sp, #152]	; 0x98
   12eb0:	sub	r2, r3, #2
   12eb4:	mov	r3, #116	; 0x74
   12eb8:	clz	r2, r2
   12ebc:	lsr	r2, r2, #5
   12ec0:	b	12b5c <__assert_fail@plt+0x1cc0>
   12ec4:	ldr	r8, [sp, #76]	; 0x4c
   12ec8:	cmp	r8, #1
   12ecc:	bne	1337c <__assert_fail@plt+0x24e0>
   12ed0:	bl	10db8 <__ctype_b_loc@plt>
   12ed4:	sxth	r3, r4
   12ed8:	mov	ip, r8
   12edc:	lsl	r3, r3, #1
   12ee0:	ldr	r2, [r0]
   12ee4:	ldrh	r3, [r2, r3]
   12ee8:	and	r3, r3, #16384	; 0x4000
   12eec:	cmp	r3, #0
   12ef0:	movne	r5, #1
   12ef4:	moveq	r5, #0
   12ef8:	moveq	r3, #1
   12efc:	movne	r3, #0
   12f00:	ldr	r2, [sp, #44]	; 0x2c
   12f04:	and	r3, r3, r2
   12f08:	ands	r8, r3, #255	; 0xff
   12f0c:	bne	13210 <__assert_fail@plt+0x2374>
   12f10:	ldr	r3, [sp, #152]	; 0x98
   12f14:	sub	r2, r3, #2
   12f18:	clz	r2, r2
   12f1c:	lsr	r2, r2, #5
   12f20:	b	12a08 <__assert_fail@plt+0x1b6c>
   12f24:	ldr	r3, [sp, #56]	; 0x38
   12f28:	add	r3, r3, sl
   12f2c:	str	r3, [sp, #48]	; 0x30
   12f30:	ldr	r3, [sp, #48]	; 0x30
   12f34:	mov	r6, #0
   12f38:	ldrb	r4, [r3]
   12f3c:	cmp	r4, #126	; 0x7e
   12f40:	ldrls	pc, [pc, r4, lsl #2]
   12f44:	b	12ec4 <__assert_fail@plt+0x2028>
   12f48:	andeq	r2, r1, r8, ror #25
   12f4c:	andeq	r2, r1, r4, asr #29
   12f50:	andeq	r2, r1, r4, asr #29
   12f54:	andeq	r2, r1, r4, asr #29
   12f58:	andeq	r2, r1, r4, asr #29
   12f5c:	andeq	r2, r1, r4, asr #29
   12f60:	andeq	r2, r1, r4, asr #29
   12f64:	andeq	r2, r1, ip, asr #25
   12f68:			; <UNDEFINED> instruction: 0x00012cb0
   12f6c:	andeq	r3, r1, r4, asr #2
   12f70:	andeq	r2, r1, r0, lsl ip
   12f74:	strdeq	r2, [r1], -r4
   12f78:	andeq	r2, r1, r8, lsl #29
   12f7c:	andeq	r2, r1, r4, ror #28
   12f80:	andeq	r2, r1, r4, asr #29
   12f84:	andeq	r2, r1, r4, asr #29
   12f88:	andeq	r2, r1, r4, asr #29
   12f8c:	andeq	r2, r1, r4, asr #29
   12f90:	andeq	r2, r1, r4, asr #29
   12f94:	andeq	r2, r1, r4, asr #29
   12f98:	andeq	r2, r1, r4, asr #29
   12f9c:	andeq	r2, r1, r4, asr #29
   12fa0:	andeq	r2, r1, r4, asr #29
   12fa4:	andeq	r2, r1, r4, asr #29
   12fa8:	andeq	r2, r1, r4, asr #29
   12fac:	andeq	r2, r1, r4, asr #29
   12fb0:	andeq	r2, r1, r4, asr #29
   12fb4:	andeq	r2, r1, r4, asr #29
   12fb8:	andeq	r2, r1, r4, asr #29
   12fbc:	andeq	r2, r1, r4, asr #29
   12fc0:	andeq	r2, r1, r4, asr #29
   12fc4:	andeq	r2, r1, r4, asr #29
   12fc8:	ldrdeq	r2, [r1], -ip
   12fcc:	ldrdeq	r2, [r1], -r8
   12fd0:	ldrdeq	r2, [r1], -r8
   12fd4:	andeq	r2, r1, r8, ror #19
   12fd8:	ldrdeq	r2, [r1], -r8
   12fdc:	andeq	r2, r1, r0, ror lr
   12fe0:	ldrdeq	r2, [r1], -r8
   12fe4:	andeq	r2, r1, r4, asr #28
   12fe8:	ldrdeq	r2, [r1], -r8
   12fec:	ldrdeq	r2, [r1], -r8
   12ff0:	ldrdeq	r2, [r1], -r8
   12ff4:	andeq	r2, r1, r0, ror lr
   12ff8:	andeq	r2, r1, r0, ror lr
   12ffc:	andeq	r2, r1, r0, ror lr
   13000:	andeq	r2, r1, r0, ror lr
   13004:	andeq	r2, r1, r0, ror lr
   13008:	andeq	r2, r1, r0, ror lr
   1300c:	andeq	r2, r1, r0, ror lr
   13010:	andeq	r2, r1, r0, ror lr
   13014:	andeq	r2, r1, r0, ror lr
   13018:	andeq	r2, r1, r0, ror lr
   1301c:	andeq	r2, r1, r0, ror lr
   13020:	andeq	r2, r1, r0, ror lr
   13024:	andeq	r2, r1, r0, ror lr
   13028:	andeq	r2, r1, r0, ror lr
   1302c:	andeq	r2, r1, r0, ror lr
   13030:	andeq	r2, r1, r0, ror lr
   13034:	ldrdeq	r2, [r1], -r8
   13038:	ldrdeq	r2, [r1], -r8
   1303c:	ldrdeq	r2, [r1], -r8
   13040:	ldrdeq	r2, [r1], -r8
   13044:	andeq	r2, r1, r4, lsl lr
   13048:	andeq	r2, r1, r4, asr #29
   1304c:	andeq	r2, r1, r0, ror lr
   13050:	andeq	r2, r1, r0, ror lr
   13054:	andeq	r2, r1, r0, ror lr
   13058:	andeq	r2, r1, r0, ror lr
   1305c:	andeq	r2, r1, r0, ror lr
   13060:	andeq	r2, r1, r0, ror lr
   13064:	andeq	r2, r1, r0, ror lr
   13068:	andeq	r2, r1, r0, ror lr
   1306c:	andeq	r2, r1, r0, ror lr
   13070:	andeq	r2, r1, r0, ror lr
   13074:	andeq	r2, r1, r0, ror lr
   13078:	andeq	r2, r1, r0, ror lr
   1307c:	andeq	r2, r1, r0, ror lr
   13080:	andeq	r2, r1, r0, ror lr
   13084:	andeq	r2, r1, r0, ror lr
   13088:	andeq	r2, r1, r0, ror lr
   1308c:	andeq	r2, r1, r0, ror lr
   13090:	andeq	r2, r1, r0, ror lr
   13094:	andeq	r2, r1, r0, ror lr
   13098:	andeq	r2, r1, r0, ror lr
   1309c:	andeq	r2, r1, r0, ror lr
   130a0:	andeq	r2, r1, r0, ror lr
   130a4:	andeq	r2, r1, r0, ror lr
   130a8:	andeq	r2, r1, r0, ror lr
   130ac:	andeq	r2, r1, r0, ror lr
   130b0:	andeq	r2, r1, r0, ror lr
   130b4:	ldrdeq	r2, [r1], -r8
   130b8:	andeq	r2, r1, r4, lsr fp
   130bc:	andeq	r2, r1, r0, ror lr
   130c0:	ldrdeq	r2, [r1], -r8
   130c4:	andeq	r2, r1, r0, ror lr
   130c8:	ldrdeq	r2, [r1], -r8
   130cc:	andeq	r2, r1, r0, ror lr
   130d0:	andeq	r2, r1, r0, ror lr
   130d4:	andeq	r2, r1, r0, ror lr
   130d8:	andeq	r2, r1, r0, ror lr
   130dc:	andeq	r2, r1, r0, ror lr
   130e0:	andeq	r2, r1, r0, ror lr
   130e4:	andeq	r2, r1, r0, ror lr
   130e8:	andeq	r2, r1, r0, ror lr
   130ec:	andeq	r2, r1, r0, ror lr
   130f0:	andeq	r2, r1, r0, ror lr
   130f4:	andeq	r2, r1, r0, ror lr
   130f8:	andeq	r2, r1, r0, ror lr
   130fc:	andeq	r2, r1, r0, ror lr
   13100:	andeq	r2, r1, r0, ror lr
   13104:	andeq	r2, r1, r0, ror lr
   13108:	andeq	r2, r1, r0, ror lr
   1310c:	andeq	r2, r1, r0, ror lr
   13110:	andeq	r2, r1, r0, ror lr
   13114:	andeq	r2, r1, r0, ror lr
   13118:	andeq	r2, r1, r0, ror lr
   1311c:	andeq	r2, r1, r0, ror lr
   13120:	andeq	r2, r1, r0, ror lr
   13124:	andeq	r2, r1, r0, ror lr
   13128:	andeq	r2, r1, r0, ror lr
   1312c:	andeq	r2, r1, r0, ror lr
   13130:	andeq	r2, r1, r0, ror lr
   13134:	andeq	r2, r1, r8, asr #19
   13138:	ldrdeq	r2, [r1], -r8
   1313c:	andeq	r2, r1, r8, asr #19
   13140:	andeq	r2, r1, r8, ror #19
   13144:	mov	r3, #116	; 0x74
   13148:	b	12c18 <__assert_fail@plt+0x1d7c>
   1314c:	ldr	r3, [sp, #160]	; 0xa0
   13150:	cmp	r3, #0
   13154:	beq	12a24 <__assert_fail@plt+0x1b88>
   13158:	lsr	r3, r4, #5
   1315c:	ldr	r0, [sp, #160]	; 0xa0
   13160:	uxtb	r3, r3
   13164:	and	r1, r4, #31
   13168:	ldr	r0, [r0, r3, lsl #2]
   1316c:	lsr	r3, r0, r1
   13170:	tst	r3, #1
   13174:	beq	12a24 <__assert_fail@plt+0x1b88>
   13178:	ldr	r3, [sp, #28]
   1317c:	cmp	r3, #0
   13180:	beq	12b84 <__assert_fail@plt+0x1ce8>
   13184:	ldr	sl, [sp, #32]
   13188:	mov	r8, fp
   1318c:	b	12c48 <__assert_fail@plt+0x1dac>
   13190:	ldr	r3, [sp, #28]
   13194:	cmp	r3, #0
   13198:	bne	136ec <__assert_fail@plt+0x2850>
   1319c:	add	sl, sl, #1
   131a0:	ldr	r6, [sp, #40]	; 0x28
   131a4:	mov	r5, #0
   131a8:	mov	r4, #92	; 0x5c
   131ac:	b	12a40 <__assert_fail@plt+0x1ba4>
   131b0:	cmp	r9, r8
   131b4:	bne	13424 <__assert_fail@plt+0x2588>
   131b8:	ldr	r0, [sp, #100]	; 0x64
   131bc:	bl	10d04 <iswprint@plt>
   131c0:	add	r5, r5, r4
   131c4:	cmp	r0, #0
   131c8:	add	r0, sp, #104	; 0x68
   131cc:	moveq	r6, #0
   131d0:	bl	10cb0 <mbsinit@plt>
   131d4:	cmp	r0, #0
   131d8:	beq	133b8 <__assert_fail@plt+0x251c>
   131dc:	mov	r2, r6
   131e0:	mov	ip, r5
   131e4:	eor	r5, r2, #1
   131e8:	ldr	r4, [sp, #80]	; 0x50
   131ec:	ldr	r6, [sp, #84]	; 0x54
   131f0:	ldr	r7, [sp, #88]	; 0x58
   131f4:	uxtb	r5, r5
   131f8:	cmp	ip, #1
   131fc:	bls	136fc <__assert_fail@plt+0x2860>
   13200:	ldr	r3, [sp, #44]	; 0x2c
   13204:	and	r8, r3, r5
   13208:	mov	r5, r2
   1320c:	uxtb	r8, r8
   13210:	add	r2, sl, ip
   13214:	ldr	r0, [sp, #48]	; 0x30
   13218:	mov	r1, #0
   1321c:	str	r5, [sp, #48]	; 0x30
   13220:	ldr	r9, [sp, #28]
   13224:	ldr	ip, [sp, #40]	; 0x28
   13228:	ldr	r3, [sp, #32]
   1322c:	ldr	r5, [sp, #152]	; 0x98
   13230:	b	132ec <__assert_fail@plt+0x2450>
   13234:	cmp	r9, #0
   13238:	bne	13610 <__assert_fail@plt+0x2774>
   1323c:	eor	r1, ip, #1
   13240:	cmp	r5, #2
   13244:	movne	r1, #0
   13248:	andeq	r1, r1, #1
   1324c:	cmp	r1, #0
   13250:	beq	13288 <__assert_fail@plt+0x23ec>
   13254:	cmp	fp, r7
   13258:	movhi	ip, #39	; 0x27
   1325c:	strbhi	ip, [r3, r7]
   13260:	add	ip, r7, #1
   13264:	cmp	fp, ip
   13268:	movhi	lr, #36	; 0x24
   1326c:	strbhi	lr, [r3, ip]
   13270:	add	ip, r7, #2
   13274:	cmp	fp, ip
   13278:	movhi	lr, #39	; 0x27
   1327c:	strbhi	lr, [r3, ip]
   13280:	add	r7, r7, #3
   13284:	mov	ip, r1
   13288:	cmp	fp, r7
   1328c:	movhi	r1, #92	; 0x5c
   13290:	strbhi	r1, [r3, r7]
   13294:	add	r1, r7, #1
   13298:	cmp	fp, r1
   1329c:	lsrhi	lr, r4, #6
   132a0:	addhi	lr, lr, #48	; 0x30
   132a4:	strbhi	lr, [r3, r1]
   132a8:	add	lr, r7, #2
   132ac:	cmp	fp, lr
   132b0:	lsrhi	r1, r4, #3
   132b4:	andhi	r1, r1, #7
   132b8:	addhi	r1, r1, #48	; 0x30
   132bc:	add	sl, sl, #1
   132c0:	strbhi	r1, [r3, lr]
   132c4:	and	r4, r4, #7
   132c8:	cmp	r2, sl
   132cc:	add	r4, r4, #48	; 0x30
   132d0:	add	r7, r7, #3
   132d4:	bls	13634 <__assert_fail@plt+0x2798>
   132d8:	mov	r1, r8
   132dc:	cmp	fp, r7
   132e0:	strbhi	r4, [r3, r7]
   132e4:	ldrb	r4, [r0, #1]!
   132e8:	add	r7, r7, #1
   132ec:	cmp	r8, #0
   132f0:	bne	13234 <__assert_fail@plt+0x2398>
   132f4:	cmp	r6, #0
   132f8:	bne	13348 <__assert_fail@plt+0x24ac>
   132fc:	eor	r6, r1, #1
   13300:	and	r6, r6, ip
   13304:	add	sl, sl, #1
   13308:	cmp	r2, sl
   1330c:	uxtb	r6, r6
   13310:	bls	13370 <__assert_fail@plt+0x24d4>
   13314:	cmp	r6, #0
   13318:	beq	132dc <__assert_fail@plt+0x2440>
   1331c:	cmp	fp, r7
   13320:	movhi	ip, #39	; 0x27
   13324:	strbhi	ip, [r3, r7]
   13328:	add	ip, r7, #1
   1332c:	cmp	fp, ip
   13330:	movhi	lr, #39	; 0x27
   13334:	strbhi	lr, [r3, ip]
   13338:	add	r7, r7, #2
   1333c:	mov	r6, r8
   13340:	mov	ip, r8
   13344:	b	132dc <__assert_fail@plt+0x2440>
   13348:	cmp	fp, r7
   1334c:	eor	r6, r1, #1
   13350:	movhi	lr, #92	; 0x5c
   13354:	and	r6, r6, ip
   13358:	add	sl, sl, #1
   1335c:	strbhi	lr, [r3, r7]
   13360:	cmp	r2, sl
   13364:	add	r7, r7, #1
   13368:	uxtb	r6, r6
   1336c:	bhi	13314 <__assert_fail@plt+0x2478>
   13370:	str	ip, [sp, #40]	; 0x28
   13374:	ldr	r5, [sp, #48]	; 0x30
   13378:	b	12a40 <__assert_fail@plt+0x1ba4>
   1337c:	ldr	r3, [sp, #24]
   13380:	cmn	r3, #1
   13384:	mov	r3, #0
   13388:	str	r3, [sp, #104]	; 0x68
   1338c:	str	r3, [sp, #108]	; 0x6c
   13390:	beq	136b0 <__assert_fail@plt+0x2814>
   13394:	mov	r2, r5
   13398:	mov	r3, #0
   1339c:	str	r7, [sp, #88]	; 0x58
   133a0:	ldr	r7, [sp, #152]	; 0x98
   133a4:	str	r5, [sp, #92]	; 0x5c
   133a8:	str	r6, [sp, #84]	; 0x54
   133ac:	mov	r5, r3
   133b0:	mov	r6, r2
   133b4:	str	r4, [sp, #80]	; 0x50
   133b8:	ldr	r3, [sp, #56]	; 0x38
   133bc:	add	r9, sl, r5
   133c0:	add	r8, r3, r9
   133c4:	ldr	r3, [sp, #24]
   133c8:	mov	r1, r8
   133cc:	sub	r2, r3, r9
   133d0:	add	r0, sp, #100	; 0x64
   133d4:	add	r3, sp, #104	; 0x68
   133d8:	bl	150bc <__assert_fail@plt+0x4220>
   133dc:	subs	r4, r0, #0
   133e0:	beq	13788 <__assert_fail@plt+0x28ec>
   133e4:	cmn	r4, #1
   133e8:	beq	13768 <__assert_fail@plt+0x28cc>
   133ec:	cmn	r4, #2
   133f0:	beq	13708 <__assert_fail@plt+0x286c>
   133f4:	ldr	r2, [sp, #28]
   133f8:	cmp	r7, #2
   133fc:	movne	r2, #0
   13400:	andeq	r2, r2, #1
   13404:	cmp	r2, #0
   13408:	beq	131b8 <__assert_fail@plt+0x231c>
   1340c:	cmp	r4, #1
   13410:	beq	131b8 <__assert_fail@plt+0x231c>
   13414:	sub	r3, r4, #1
   13418:	add	r9, r3, r9
   1341c:	ldr	r3, [sp, #56]	; 0x38
   13420:	add	r9, r3, r9
   13424:	ldrb	r3, [r8, #1]!
   13428:	sub	r3, r3, #91	; 0x5b
   1342c:	cmp	r3, #33	; 0x21
   13430:	ldrls	pc, [pc, r3, lsl #2]
   13434:	b	131b0 <__assert_fail@plt+0x2314>
   13438:	andeq	r3, r1, r0, asr #9
   1343c:	andeq	r3, r1, r0, asr #9
   13440:			; <UNDEFINED> instruction: 0x000131b0
   13444:	andeq	r3, r1, r0, asr #9
   13448:			; <UNDEFINED> instruction: 0x000131b0
   1344c:	andeq	r3, r1, r0, asr #9
   13450:			; <UNDEFINED> instruction: 0x000131b0
   13454:			; <UNDEFINED> instruction: 0x000131b0
   13458:			; <UNDEFINED> instruction: 0x000131b0
   1345c:			; <UNDEFINED> instruction: 0x000131b0
   13460:			; <UNDEFINED> instruction: 0x000131b0
   13464:			; <UNDEFINED> instruction: 0x000131b0
   13468:			; <UNDEFINED> instruction: 0x000131b0
   1346c:			; <UNDEFINED> instruction: 0x000131b0
   13470:			; <UNDEFINED> instruction: 0x000131b0
   13474:			; <UNDEFINED> instruction: 0x000131b0
   13478:			; <UNDEFINED> instruction: 0x000131b0
   1347c:			; <UNDEFINED> instruction: 0x000131b0
   13480:			; <UNDEFINED> instruction: 0x000131b0
   13484:			; <UNDEFINED> instruction: 0x000131b0
   13488:			; <UNDEFINED> instruction: 0x000131b0
   1348c:			; <UNDEFINED> instruction: 0x000131b0
   13490:			; <UNDEFINED> instruction: 0x000131b0
   13494:			; <UNDEFINED> instruction: 0x000131b0
   13498:			; <UNDEFINED> instruction: 0x000131b0
   1349c:			; <UNDEFINED> instruction: 0x000131b0
   134a0:			; <UNDEFINED> instruction: 0x000131b0
   134a4:			; <UNDEFINED> instruction: 0x000131b0
   134a8:			; <UNDEFINED> instruction: 0x000131b0
   134ac:			; <UNDEFINED> instruction: 0x000131b0
   134b0:			; <UNDEFINED> instruction: 0x000131b0
   134b4:			; <UNDEFINED> instruction: 0x000131b0
   134b8:			; <UNDEFINED> instruction: 0x000131b0
   134bc:	andeq	r3, r1, r0, asr #9
   134c0:	mov	r3, #2
   134c4:	ldr	sl, [sp, #32]
   134c8:	mov	r8, fp
   134cc:	str	r3, [sp, #152]	; 0x98
   134d0:	b	12c48 <__assert_fail@plt+0x1dac>
   134d4:	ldr	r3, [sp, #156]	; 0x9c
   134d8:	tst	r3, #1
   134dc:	bne	13608 <__assert_fail@plt+0x276c>
   134e0:	ldr	r3, [sp, #152]	; 0x98
   134e4:	ldr	r4, [sp, #44]	; 0x2c
   134e8:	sub	r2, r3, #2
   134ec:	mov	r5, #0
   134f0:	clz	r2, r2
   134f4:	mov	r8, r4
   134f8:	lsr	r2, r2, #5
   134fc:	b	12a08 <__assert_fail@plt+0x1b6c>
   13500:	ldr	r3, [sp, #156]	; 0x9c
   13504:	ands	r9, r3, #4
   13508:	beq	13640 <__assert_fail@plt+0x27a4>
   1350c:	ldr	r2, [sp, #24]
   13510:	add	r3, sl, #2
   13514:	cmp	r3, r2
   13518:	bcs	1352c <__assert_fail@plt+0x2690>
   1351c:	ldr	r2, [sp, #48]	; 0x30
   13520:	ldrb	r4, [r2, #1]
   13524:	cmp	r4, #63	; 0x3f
   13528:	beq	137c8 <__assert_fail@plt+0x292c>
   1352c:	mov	r2, #0
   13530:	mov	r8, r2
   13534:	mov	r5, r2
   13538:	mov	r4, #63	; 0x3f
   1353c:	b	12a08 <__assert_fail@plt+0x1b6c>
   13540:	ldr	r3, [sp, #28]
   13544:	cmp	r3, #0
   13548:	bne	1386c <__assert_fail@plt+0x29d0>
   1354c:	mov	r2, r5
   13550:	mov	r8, r3
   13554:	mov	r5, #0
   13558:	mov	r4, #63	; 0x3f
   1355c:	b	12a08 <__assert_fail@plt+0x1b6c>
   13560:	ldr	r3, [sp, #28]
   13564:	cmp	r3, #0
   13568:	bne	1386c <__assert_fail@plt+0x29d0>
   1356c:	ldr	r2, [sp, #72]	; 0x48
   13570:	adds	r3, fp, #0
   13574:	movne	r3, #1
   13578:	cmp	r2, #0
   1357c:	movne	r3, #0
   13580:	cmp	r3, #0
   13584:	strne	fp, [sp, #72]	; 0x48
   13588:	movne	fp, #0
   1358c:	bne	135c8 <__assert_fail@plt+0x272c>
   13590:	cmp	fp, r7
   13594:	movhi	r2, #39	; 0x27
   13598:	ldrhi	r3, [sp, #32]
   1359c:	strbhi	r2, [r3, r7]
   135a0:	add	r3, r7, #1
   135a4:	cmp	fp, r3
   135a8:	movhi	r1, #92	; 0x5c
   135ac:	ldrhi	r2, [sp, #32]
   135b0:	strbhi	r1, [r2, r3]
   135b4:	add	r3, r7, #2
   135b8:	cmp	fp, r3
   135bc:	movhi	r1, #39	; 0x27
   135c0:	ldrhi	r2, [sp, #32]
   135c4:	strbhi	r1, [r2, r3]
   135c8:	ldr	r3, [sp, #28]
   135cc:	add	r7, r7, #3
   135d0:	mov	r2, r5
   135d4:	mov	r8, r3
   135d8:	str	r5, [sp, #68]	; 0x44
   135dc:	str	r3, [sp, #40]	; 0x28
   135e0:	mov	r4, #39	; 0x27
   135e4:	b	12a08 <__assert_fail@plt+0x1b6c>
   135e8:	ldr	r3, [sp, #56]	; 0x38
   135ec:	ldrb	r3, [r3, #1]
   135f0:	adds	r3, r3, #0
   135f4:	movne	r3, #1
   135f8:	b	129e0 <__assert_fail@plt+0x1b44>
   135fc:	ldr	r5, [sp, #28]
   13600:	mov	r4, #48	; 0x30
   13604:	b	12a08 <__assert_fail@plt+0x1b6c>
   13608:	add	sl, sl, #1
   1360c:	b	12538 <__assert_fail@plt+0x169c>
   13610:	mov	sl, r3
   13614:	ldr	r3, [sp, #28]
   13618:	mov	r8, fp
   1361c:	str	r3, [sp, #44]	; 0x2c
   13620:	ldr	r3, [sp, #152]	; 0x98
   13624:	sub	r2, r3, #2
   13628:	clz	r2, r2
   1362c:	lsr	r2, r2, #5
   13630:	b	12c48 <__assert_fail@plt+0x1dac>
   13634:	str	ip, [sp, #40]	; 0x28
   13638:	ldr	r5, [sp, #48]	; 0x30
   1363c:	b	12a78 <__assert_fail@plt+0x1bdc>
   13640:	mov	r2, r9
   13644:	mov	r8, r9
   13648:	mov	r5, #0
   1364c:	mov	r4, #63	; 0x3f
   13650:	b	12a08 <__assert_fail@plt+0x1b6c>
   13654:	cmp	fp, #0
   13658:	beq	136d0 <__assert_fail@plt+0x2834>
   1365c:	ldr	r1, [sp, #32]
   13660:	mov	r3, #34	; 0x22
   13664:	mov	r2, #1
   13668:	strb	r3, [r1]
   1366c:	ldr	r3, [pc, #332]	; 137c0 <__assert_fail@plt+0x2924>
   13670:	str	r2, [sp, #52]	; 0x34
   13674:	mov	r7, r2
   13678:	str	r2, [sp, #44]	; 0x2c
   1367c:	str	r3, [sp, #64]	; 0x40
   13680:	b	12528 <__assert_fail@plt+0x168c>
   13684:	ldr	r3, [pc, #300]	; 137b8 <__assert_fail@plt+0x291c>
   13688:	str	r3, [sp, #64]	; 0x40
   1368c:	mov	r3, #0
   13690:	str	r3, [sp, #28]
   13694:	mov	r3, #1
   13698:	str	r3, [sp, #52]	; 0x34
   1369c:	mov	r7, r3
   136a0:	mov	r3, #2
   136a4:	str	r3, [sp, #152]	; 0x98
   136a8:	b	12528 <__assert_fail@plt+0x168c>
   136ac:	bl	10e84 <abort@plt>
   136b0:	ldr	r0, [sp, #56]	; 0x38
   136b4:	bl	10dd0 <strlen@plt>
   136b8:	str	r0, [sp, #24]
   136bc:	b	13394 <__assert_fail@plt+0x24f8>
   136c0:	mov	r5, r8
   136c4:	mov	r4, #48	; 0x30
   136c8:	ldr	r8, [sp, #44]	; 0x2c
   136cc:	b	12a08 <__assert_fail@plt+0x1b6c>
   136d0:	mov	r3, #1
   136d4:	str	r3, [sp, #52]	; 0x34
   136d8:	mov	r7, r3
   136dc:	str	r3, [sp, #44]	; 0x2c
   136e0:	ldr	r3, [pc, #216]	; 137c0 <__assert_fail@plt+0x2924>
   136e4:	str	r3, [sp, #64]	; 0x40
   136e8:	b	12528 <__assert_fail@plt+0x168c>
   136ec:	ldr	sl, [sp, #32]
   136f0:	mov	r8, fp
   136f4:	mov	r2, r3
   136f8:	b	12c48 <__assert_fail@plt+0x1dac>
   136fc:	mov	r3, r5
   13700:	mov	r5, r2
   13704:	b	12f00 <__assert_fail@plt+0x2064>
   13708:	ldr	r1, [sp, #24]
   1370c:	mov	r2, r5
   13710:	cmp	r1, r9
   13714:	mov	ip, r5
   13718:	ldr	r4, [sp, #80]	; 0x50
   1371c:	ldr	r5, [sp, #92]	; 0x5c
   13720:	ldr	r6, [sp, #84]	; 0x54
   13724:	ldr	r7, [sp, #88]	; 0x58
   13728:	bls	1375c <__assert_fail@plt+0x28c0>
   1372c:	ldrb	r3, [r8]
   13730:	cmp	r3, #0
   13734:	bne	13748 <__assert_fail@plt+0x28ac>
   13738:	b	13760 <__assert_fail@plt+0x28c4>
   1373c:	ldrb	r3, [r8, #1]!
   13740:	cmp	r3, #0
   13744:	beq	13860 <__assert_fail@plt+0x29c4>
   13748:	add	r2, r2, #1
   1374c:	add	r3, sl, r2
   13750:	cmp	r1, r3
   13754:	bhi	1373c <__assert_fail@plt+0x28a0>
   13758:	mov	ip, r2
   1375c:	mov	r3, #0
   13760:	mov	r2, r3
   13764:	b	131f8 <__assert_fail@plt+0x235c>
   13768:	mov	r3, #0
   1376c:	mov	ip, r5
   13770:	ldr	r4, [sp, #80]	; 0x50
   13774:	ldr	r5, [sp, #92]	; 0x5c
   13778:	ldr	r6, [sp, #84]	; 0x54
   1377c:	ldr	r7, [sp, #88]	; 0x58
   13780:	mov	r2, r3
   13784:	b	131f8 <__assert_fail@plt+0x235c>
   13788:	mov	r3, r6
   1378c:	mov	ip, r5
   13790:	eor	r5, r3, #1
   13794:	mov	r2, r6
   13798:	ldr	r4, [sp, #80]	; 0x50
   1379c:	ldr	r6, [sp, #84]	; 0x54
   137a0:	ldr	r7, [sp, #88]	; 0x58
   137a4:	uxtb	r5, r5
   137a8:	b	131f8 <__assert_fail@plt+0x235c>
   137ac:	ldr	sl, [sp, #32]
   137b0:	mov	r8, fp
   137b4:	b	1361c <__assert_fail@plt+0x2780>
   137b8:	andeq	r5, r1, r0, asr ip
   137bc:	andeq	r5, r1, r4, asr ip
   137c0:	andeq	r5, r1, ip, asr #24
   137c4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   137c8:	ldr	r2, [sp, #56]	; 0x38
   137cc:	ldrb	r1, [r2, r3]
   137d0:	sub	r2, r1, #33	; 0x21
   137d4:	uxtb	r2, r2
   137d8:	cmp	r2, #29
   137dc:	bhi	1387c <__assert_fail@plt+0x29e0>
   137e0:	ldr	r0, [pc, #-36]	; 137c4 <__assert_fail@plt+0x2928>
   137e4:	mov	ip, #1
   137e8:	ands	r2, r0, ip, lsl r2
   137ec:	beq	1388c <__assert_fail@plt+0x29f0>
   137f0:	ldr	r2, [sp, #28]
   137f4:	cmp	r2, #0
   137f8:	bne	1398c <__assert_fail@plt+0x2af0>
   137fc:	cmp	fp, r7
   13800:	ldr	r8, [sp, #28]
   13804:	ldrhi	r2, [sp, #32]
   13808:	mov	sl, r3
   1380c:	mov	r5, r8
   13810:	strbhi	r4, [r2, r7]
   13814:	add	r2, r7, #1
   13818:	cmp	fp, r2
   1381c:	movhi	r0, #34	; 0x22
   13820:	ldrhi	ip, [sp, #32]
   13824:	mov	r4, r1
   13828:	strbhi	r0, [ip, r2]
   1382c:	add	r2, r7, #2
   13830:	cmp	fp, r2
   13834:	movhi	r0, #34	; 0x22
   13838:	ldrhi	ip, [sp, #32]
   1383c:	strbhi	r0, [ip, r2]
   13840:	add	r2, r7, #3
   13844:	cmp	fp, r2
   13848:	movhi	r0, #63	; 0x3f
   1384c:	ldrhi	ip, [sp, #32]
   13850:	add	r7, r7, #4
   13854:	strbhi	r0, [ip, r2]
   13858:	mov	r2, r8
   1385c:	b	12a08 <__assert_fail@plt+0x1b6c>
   13860:	mov	ip, r2
   13864:	mov	r2, r3
   13868:	b	131f8 <__assert_fail@plt+0x235c>
   1386c:	ldr	sl, [sp, #32]
   13870:	mov	r8, fp
   13874:	ldr	r2, [sp, #28]
   13878:	b	12c48 <__assert_fail@plt+0x1dac>
   1387c:	mov	r2, #0
   13880:	mov	r8, r2
   13884:	mov	r5, r2
   13888:	b	12a08 <__assert_fail@plt+0x1b6c>
   1388c:	mov	r8, r2
   13890:	mov	r5, #0
   13894:	b	12a08 <__assert_fail@plt+0x1b6c>
   13898:	ldr	r1, [sp, #152]	; 0x98
   1389c:	bl	12364 <__assert_fail@plt+0x14c8>
   138a0:	str	r0, [sp, #168]	; 0xa8
   138a4:	b	128c4 <__assert_fail@plt+0x1a28>
   138a8:	ldr	r1, [sp, #152]	; 0x98
   138ac:	bl	12364 <__assert_fail@plt+0x14c8>
   138b0:	str	r0, [sp, #164]	; 0xa4
   138b4:	b	128a4 <__assert_fail@plt+0x1a08>
   138b8:	ldr	r7, [sp, #28]
   138bc:	b	12904 <__assert_fail@plt+0x1a68>
   138c0:	ldr	sl, [sp, #32]
   138c4:	ldr	r2, [sp, #68]	; 0x44
   138c8:	mov	r8, fp
   138cc:	mov	fp, r7
   138d0:	ldr	r3, [sp, #64]	; 0x40
   138d4:	cmp	r3, #0
   138d8:	moveq	r2, #0
   138dc:	andne	r2, r2, #1
   138e0:	cmp	r2, #0
   138e4:	beq	13910 <__assert_fail@plt+0x2a74>
   138e8:	mov	r2, r3
   138ec:	ldrb	r3, [r3]
   138f0:	cmp	r3, #0
   138f4:	beq	13910 <__assert_fail@plt+0x2a74>
   138f8:	cmp	r8, fp
   138fc:	strbhi	r3, [sl, fp]
   13900:	ldrb	r3, [r2, #1]!
   13904:	add	fp, fp, #1
   13908:	cmp	r3, #0
   1390c:	bne	138f8 <__assert_fail@plt+0x2a5c>
   13910:	cmp	r8, fp
   13914:	movhi	r3, #0
   13918:	strbhi	r3, [sl, fp]
   1391c:	b	12ca4 <__assert_fail@plt+0x1e08>
   13920:	ldr	r3, [sp, #168]	; 0xa8
   13924:	ldr	sl, [sp, #32]
   13928:	str	r3, [sp, #16]
   1392c:	ldr	r3, [sp, #164]	; 0xa4
   13930:	mov	ip, #5
   13934:	str	r3, [sp, #12]
   13938:	ldr	r3, [sp, #160]	; 0xa0
   1393c:	ldr	r2, [sp, #56]	; 0x38
   13940:	str	r3, [sp, #8]
   13944:	ldr	r3, [sp, #156]	; 0x9c
   13948:	ldr	r1, [sp, #72]	; 0x48
   1394c:	str	r3, [sp, #4]
   13950:	mov	r0, sl
   13954:	ldr	r3, [sp, #24]
   13958:	str	ip, [sp]
   1395c:	bl	12484 <__assert_fail@plt+0x15e8>
   13960:	mov	fp, r0
   13964:	b	12ca4 <__assert_fail@plt+0x1e08>
   13968:	mov	r8, fp
   1396c:	ldr	sl, [sp, #32]
   13970:	mov	fp, r7
   13974:	mov	r2, r3
   13978:	b	138d0 <__assert_fail@plt+0x2a34>
   1397c:	mov	r8, fp
   13980:	ldr	sl, [sp, #32]
   13984:	mov	fp, r7
   13988:	b	138d0 <__assert_fail@plt+0x2a34>
   1398c:	ldr	sl, [sp, #32]
   13990:	mov	r8, fp
   13994:	b	12c60 <__assert_fail@plt+0x1dc4>
   13998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1399c:	sub	sp, sp, #52	; 0x34
   139a0:	mov	r4, r0
   139a4:	mov	r5, r3
   139a8:	mov	sl, r1
   139ac:	mov	fp, r2
   139b0:	bl	10ddc <__errno_location@plt>
   139b4:	ldr	r7, [pc, #412]	; 13b58 <__assert_fail@plt+0x2cbc>
   139b8:	cmn	r4, #-2147483647	; 0x80000001
   139bc:	ldr	r6, [r7]
   139c0:	mov	r8, r0
   139c4:	movne	r0, #0
   139c8:	moveq	r0, #1
   139cc:	ldr	r3, [r8]
   139d0:	orrs	r0, r0, r4, lsr #31
   139d4:	str	r3, [sp, #24]
   139d8:	bne	13b54 <__assert_fail@plt+0x2cb8>
   139dc:	ldr	r2, [r7, #4]
   139e0:	cmp	r4, r2
   139e4:	blt	13a44 <__assert_fail@plt+0x2ba8>
   139e8:	add	r9, r7, #8
   139ec:	cmp	r6, r9
   139f0:	str	r2, [sp, #44]	; 0x2c
   139f4:	beq	13b24 <__assert_fail@plt+0x2c88>
   139f8:	mov	r3, #8
   139fc:	sub	r2, r4, r2
   13a00:	mov	r0, r6
   13a04:	str	r3, [sp]
   13a08:	add	r2, r2, #1
   13a0c:	mvn	r3, #-2147483648	; 0x80000000
   13a10:	add	r1, sp, #44	; 0x2c
   13a14:	bl	14b40 <__assert_fail@plt+0x3ca4>
   13a18:	mov	r6, r0
   13a1c:	str	r0, [r7]
   13a20:	ldr	r0, [r7, #4]
   13a24:	ldr	r2, [sp, #44]	; 0x2c
   13a28:	mov	r1, #0
   13a2c:	sub	r2, r2, r0
   13a30:	add	r0, r6, r0, lsl #3
   13a34:	lsl	r2, r2, #3
   13a38:	bl	10df4 <memset@plt>
   13a3c:	ldr	r3, [sp, #44]	; 0x2c
   13a40:	str	r3, [r7, #4]
   13a44:	add	r3, r6, r4, lsl #3
   13a48:	ldr	r1, [r5, #4]
   13a4c:	ldr	r7, [r3, #4]
   13a50:	ldr	r9, [r6, r4, lsl #3]
   13a54:	ldr	r2, [r5, #40]	; 0x28
   13a58:	ldr	ip, [r5, #44]	; 0x2c
   13a5c:	add	r0, r5, #8
   13a60:	str	r3, [sp, #28]
   13a64:	ldr	r3, [r5]
   13a68:	orr	r1, r1, #1
   13a6c:	mov	lr, r0
   13a70:	str	r1, [sp, #32]
   13a74:	str	r0, [sp, #36]	; 0x24
   13a78:	str	r1, [sp, #4]
   13a7c:	str	r2, [sp, #12]
   13a80:	str	r3, [sp]
   13a84:	mov	r0, r7
   13a88:	mov	r1, r9
   13a8c:	str	ip, [sp, #16]
   13a90:	str	lr, [sp, #8]
   13a94:	mov	r3, fp
   13a98:	mov	r2, sl
   13a9c:	bl	12484 <__assert_fail@plt+0x15e8>
   13aa0:	cmp	r9, r0
   13aa4:	bhi	13b10 <__assert_fail@plt+0x2c74>
   13aa8:	ldr	r3, [pc, #172]	; 13b5c <__assert_fail@plt+0x2cc0>
   13aac:	add	r9, r0, #1
   13ab0:	cmp	r7, r3
   13ab4:	str	r9, [r6, r4, lsl #3]
   13ab8:	beq	13ac4 <__assert_fail@plt+0x2c28>
   13abc:	mov	r0, r7
   13ac0:	bl	11e34 <__assert_fail@plt+0xf98>
   13ac4:	mov	r0, r9
   13ac8:	bl	149dc <__assert_fail@plt+0x3b40>
   13acc:	ldr	lr, [sp, #28]
   13ad0:	ldr	ip, [r5, #44]	; 0x2c
   13ad4:	ldr	r4, [r5, #40]	; 0x28
   13ad8:	mov	r3, fp
   13adc:	mov	r2, sl
   13ae0:	mov	r1, r9
   13ae4:	str	r0, [lr, #4]
   13ae8:	ldr	lr, [r5]
   13aec:	ldr	r5, [sp, #36]	; 0x24
   13af0:	str	ip, [sp, #16]
   13af4:	str	r5, [sp, #8]
   13af8:	ldr	r5, [sp, #32]
   13afc:	str	r4, [sp, #12]
   13b00:	str	r5, [sp, #4]
   13b04:	str	lr, [sp]
   13b08:	mov	r7, r0
   13b0c:	bl	12484 <__assert_fail@plt+0x15e8>
   13b10:	ldr	r3, [sp, #24]
   13b14:	mov	r0, r7
   13b18:	str	r3, [r8]
   13b1c:	add	sp, sp, #52	; 0x34
   13b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b24:	mov	r3, #8
   13b28:	sub	r2, r4, r2
   13b2c:	str	r3, [sp]
   13b30:	add	r1, sp, #44	; 0x2c
   13b34:	add	r2, r2, #1
   13b38:	mvn	r3, #-2147483648	; 0x80000000
   13b3c:	bl	14b40 <__assert_fail@plt+0x3ca4>
   13b40:	mov	r6, r0
   13b44:	ldm	r9, {r0, r1}
   13b48:	str	r6, [r7]
   13b4c:	stm	r6, {r0, r1}
   13b50:	b	13a20 <__assert_fail@plt+0x2b84>
   13b54:	bl	10e84 <abort@plt>
   13b58:	andeq	r7, r2, ip, ror #1
   13b5c:	andeq	r7, r2, r4, ror r1
   13b60:	push	{r4, r5, r6, lr}
   13b64:	mov	r5, r0
   13b68:	bl	10ddc <__errno_location@plt>
   13b6c:	cmp	r5, #0
   13b70:	mov	r1, #48	; 0x30
   13b74:	mov	r4, r0
   13b78:	ldr	r0, [pc, #16]	; 13b90 <__assert_fail@plt+0x2cf4>
   13b7c:	ldr	r6, [r4]
   13b80:	movne	r0, r5
   13b84:	bl	14e3c <__assert_fail@plt+0x3fa0>
   13b88:	str	r6, [r4]
   13b8c:	pop	{r4, r5, r6, pc}
   13b90:	andeq	r7, r2, r4, ror r2
   13b94:	ldr	r3, [pc, #12]	; 13ba8 <__assert_fail@plt+0x2d0c>
   13b98:	cmp	r0, #0
   13b9c:	moveq	r0, r3
   13ba0:	ldr	r0, [r0]
   13ba4:	bx	lr
   13ba8:	andeq	r7, r2, r4, ror r2
   13bac:	ldr	r3, [pc, #12]	; 13bc0 <__assert_fail@plt+0x2d24>
   13bb0:	cmp	r0, #0
   13bb4:	moveq	r0, r3
   13bb8:	str	r1, [r0]
   13bbc:	bx	lr
   13bc0:	andeq	r7, r2, r4, ror r2
   13bc4:	ldr	r3, [pc, #52]	; 13c00 <__assert_fail@plt+0x2d64>
   13bc8:	cmp	r0, #0
   13bcc:	moveq	r0, r3
   13bd0:	add	r3, r0, #8
   13bd4:	push	{lr}		; (str lr, [sp, #-4]!)
   13bd8:	lsr	lr, r1, #5
   13bdc:	and	r1, r1, #31
   13be0:	ldr	ip, [r3, lr, lsl #2]
   13be4:	lsr	r0, ip, r1
   13be8:	eor	r2, r2, r0
   13bec:	and	r2, r2, #1
   13bf0:	and	r0, r0, #1
   13bf4:	eor	r1, ip, r2, lsl r1
   13bf8:	str	r1, [r3, lr, lsl #2]
   13bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   13c00:	andeq	r7, r2, r4, ror r2
   13c04:	ldr	r3, [pc, #16]	; 13c1c <__assert_fail@plt+0x2d80>
   13c08:	cmp	r0, #0
   13c0c:	movne	r3, r0
   13c10:	ldr	r0, [r3, #4]
   13c14:	str	r1, [r3, #4]
   13c18:	bx	lr
   13c1c:	andeq	r7, r2, r4, ror r2
   13c20:	ldr	r3, [pc, #44]	; 13c54 <__assert_fail@plt+0x2db8>
   13c24:	cmp	r0, #0
   13c28:	moveq	r0, r3
   13c2c:	mov	ip, #10
   13c30:	cmp	r2, #0
   13c34:	cmpne	r1, #0
   13c38:	str	ip, [r0]
   13c3c:	beq	13c4c <__assert_fail@plt+0x2db0>
   13c40:	str	r1, [r0, #40]	; 0x28
   13c44:	str	r2, [r0, #44]	; 0x2c
   13c48:	bx	lr
   13c4c:	push	{r4, lr}
   13c50:	bl	10e84 <abort@plt>
   13c54:	andeq	r7, r2, r4, ror r2
   13c58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c5c:	sub	sp, sp, #24
   13c60:	ldr	ip, [pc, #108]	; 13cd4 <__assert_fail@plt+0x2e38>
   13c64:	ldr	r4, [sp, #56]	; 0x38
   13c68:	mov	r9, r2
   13c6c:	cmp	r4, #0
   13c70:	moveq	r4, ip
   13c74:	mov	sl, r3
   13c78:	mov	r7, r0
   13c7c:	mov	r8, r1
   13c80:	bl	10ddc <__errno_location@plt>
   13c84:	ldr	r3, [r4, #44]	; 0x2c
   13c88:	mov	r1, r8
   13c8c:	ldr	r6, [r0]
   13c90:	str	r3, [sp, #16]
   13c94:	ldr	r2, [r4, #40]	; 0x28
   13c98:	add	r3, r4, #8
   13c9c:	str	r3, [sp, #8]
   13ca0:	str	r2, [sp, #12]
   13ca4:	ldr	r2, [r4, #4]
   13ca8:	mov	r5, r0
   13cac:	str	r2, [sp, #4]
   13cb0:	ldr	ip, [r4]
   13cb4:	mov	r3, sl
   13cb8:	mov	r2, r9
   13cbc:	mov	r0, r7
   13cc0:	str	ip, [sp]
   13cc4:	bl	12484 <__assert_fail@plt+0x15e8>
   13cc8:	str	r6, [r5]
   13ccc:	add	sp, sp, #24
   13cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cd4:	andeq	r7, r2, r4, ror r2
   13cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cdc:	cmp	r3, #0
   13ce0:	sub	sp, sp, #44	; 0x2c
   13ce4:	ldr	r4, [pc, #192]	; 13dac <__assert_fail@plt+0x2f10>
   13ce8:	mov	r6, r2
   13cec:	movne	r4, r3
   13cf0:	mov	r9, r1
   13cf4:	mov	r8, r0
   13cf8:	bl	10ddc <__errno_location@plt>
   13cfc:	ldr	r3, [r4, #44]	; 0x2c
   13d00:	ldr	r5, [r4, #4]
   13d04:	add	sl, r4, #8
   13d08:	cmp	r6, #0
   13d0c:	orreq	r5, r5, #1
   13d10:	mov	r1, #0
   13d14:	ldr	r2, [r0]
   13d18:	str	r3, [sp, #16]
   13d1c:	ldr	r3, [r4, #40]	; 0x28
   13d20:	stmib	sp, {r5, sl}
   13d24:	str	r3, [sp, #12]
   13d28:	ldr	r3, [r4]
   13d2c:	mov	r7, r0
   13d30:	str	r2, [sp, #28]
   13d34:	str	r3, [sp]
   13d38:	mov	r2, r8
   13d3c:	mov	r3, r9
   13d40:	mov	r0, r1
   13d44:	bl	12484 <__assert_fail@plt+0x15e8>
   13d48:	add	r1, r0, #1
   13d4c:	mov	fp, r0
   13d50:	mov	r0, r1
   13d54:	str	r1, [sp, #36]	; 0x24
   13d58:	bl	149dc <__assert_fail@plt+0x3b40>
   13d5c:	ldr	r3, [r4, #44]	; 0x2c
   13d60:	mov	r2, r8
   13d64:	str	r3, [sp, #16]
   13d68:	ldr	r3, [r4, #40]	; 0x28
   13d6c:	str	r5, [sp, #4]
   13d70:	str	r3, [sp, #12]
   13d74:	str	sl, [sp, #8]
   13d78:	ldr	ip, [r4]
   13d7c:	ldr	r1, [sp, #36]	; 0x24
   13d80:	mov	r3, r9
   13d84:	str	ip, [sp]
   13d88:	str	r0, [sp, #32]
   13d8c:	bl	12484 <__assert_fail@plt+0x15e8>
   13d90:	ldr	r2, [sp, #28]
   13d94:	cmp	r6, #0
   13d98:	str	r2, [r7]
   13d9c:	ldr	r0, [sp, #32]
   13da0:	strne	fp, [r6]
   13da4:	add	sp, sp, #44	; 0x2c
   13da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dac:	andeq	r7, r2, r4, ror r2
   13db0:	mov	r3, r2
   13db4:	mov	r2, #0
   13db8:	b	13cd8 <__assert_fail@plt+0x2e3c>
   13dbc:	push	{r4, r5, r6, r7, r8, lr}
   13dc0:	ldr	r6, [pc, #116]	; 13e3c <__assert_fail@plt+0x2fa0>
   13dc4:	ldr	r3, [r6, #4]
   13dc8:	ldr	r7, [r6]
   13dcc:	cmp	r3, #1
   13dd0:	movgt	r5, r7
   13dd4:	movgt	r4, #1
   13dd8:	ble	13df8 <__assert_fail@plt+0x2f5c>
   13ddc:	ldr	r0, [r5, #12]
   13de0:	bl	11e34 <__assert_fail@plt+0xf98>
   13de4:	ldr	r3, [r6, #4]
   13de8:	add	r4, r4, #1
   13dec:	cmp	r3, r4
   13df0:	add	r5, r5, #8
   13df4:	bgt	13ddc <__assert_fail@plt+0x2f40>
   13df8:	ldr	r0, [r7, #4]
   13dfc:	ldr	r4, [pc, #60]	; 13e40 <__assert_fail@plt+0x2fa4>
   13e00:	cmp	r0, r4
   13e04:	beq	13e18 <__assert_fail@plt+0x2f7c>
   13e08:	bl	11e34 <__assert_fail@plt+0xf98>
   13e0c:	mov	r3, #256	; 0x100
   13e10:	str	r4, [r6, #12]
   13e14:	str	r3, [r6, #8]
   13e18:	ldr	r4, [pc, #36]	; 13e44 <__assert_fail@plt+0x2fa8>
   13e1c:	cmp	r7, r4
   13e20:	beq	13e30 <__assert_fail@plt+0x2f94>
   13e24:	mov	r0, r7
   13e28:	bl	11e34 <__assert_fail@plt+0xf98>
   13e2c:	str	r4, [r6]
   13e30:	mov	r3, #1
   13e34:	str	r3, [r6, #4]
   13e38:	pop	{r4, r5, r6, r7, r8, pc}
   13e3c:	andeq	r7, r2, ip, ror #1
   13e40:	andeq	r7, r2, r4, ror r1
   13e44:	strdeq	r7, [r2], -r4
   13e48:	ldr	r3, [pc, #4]	; 13e54 <__assert_fail@plt+0x2fb8>
   13e4c:	mvn	r2, #0
   13e50:	b	13998 <__assert_fail@plt+0x2afc>
   13e54:	andeq	r7, r2, r4, ror r2
   13e58:	ldr	r3, [pc]	; 13e60 <__assert_fail@plt+0x2fc4>
   13e5c:	b	13998 <__assert_fail@plt+0x2afc>
   13e60:	andeq	r7, r2, r4, ror r2
   13e64:	mov	r1, r0
   13e68:	ldr	r3, [pc, #8]	; 13e78 <__assert_fail@plt+0x2fdc>
   13e6c:	mvn	r2, #0
   13e70:	mov	r0, #0
   13e74:	b	13998 <__assert_fail@plt+0x2afc>
   13e78:	andeq	r7, r2, r4, ror r2
   13e7c:	mov	r2, r1
   13e80:	ldr	r3, [pc, #8]	; 13e90 <__assert_fail@plt+0x2ff4>
   13e84:	mov	r1, r0
   13e88:	mov	r0, #0
   13e8c:	b	13998 <__assert_fail@plt+0x2afc>
   13e90:	andeq	r7, r2, r4, ror r2
   13e94:	push	{r4, r5, lr}
   13e98:	sub	sp, sp, #52	; 0x34
   13e9c:	mov	r5, r2
   13ea0:	mov	r4, r0
   13ea4:	mov	r0, sp
   13ea8:	bl	12334 <__assert_fail@plt+0x1498>
   13eac:	mov	r3, sp
   13eb0:	mov	r1, r5
   13eb4:	mov	r0, r4
   13eb8:	mvn	r2, #0
   13ebc:	bl	13998 <__assert_fail@plt+0x2afc>
   13ec0:	add	sp, sp, #52	; 0x34
   13ec4:	pop	{r4, r5, pc}
   13ec8:	push	{r4, r5, r6, lr}
   13ecc:	sub	sp, sp, #48	; 0x30
   13ed0:	mov	r5, r2
   13ed4:	mov	r6, r3
   13ed8:	mov	r4, r0
   13edc:	mov	r0, sp
   13ee0:	bl	12334 <__assert_fail@plt+0x1498>
   13ee4:	mov	r3, sp
   13ee8:	mov	r2, r6
   13eec:	mov	r1, r5
   13ef0:	mov	r0, r4
   13ef4:	bl	13998 <__assert_fail@plt+0x2afc>
   13ef8:	add	sp, sp, #48	; 0x30
   13efc:	pop	{r4, r5, r6, pc}
   13f00:	mov	r2, r1
   13f04:	mov	r1, r0
   13f08:	mov	r0, #0
   13f0c:	b	13e94 <__assert_fail@plt+0x2ff8>
   13f10:	mov	r3, r2
   13f14:	mov	r2, r1
   13f18:	mov	r1, r0
   13f1c:	mov	r0, #0
   13f20:	b	13ec8 <__assert_fail@plt+0x302c>
   13f24:	push	{r4, r5, r6, r7, r8, lr}
   13f28:	mov	r7, r0
   13f2c:	ldr	lr, [pc, #100]	; 13f98 <__assert_fail@plt+0x30fc>
   13f30:	mov	r8, r1
   13f34:	mov	r4, r2
   13f38:	ldm	lr!, {r0, r1, r2, r3}
   13f3c:	sub	sp, sp, #48	; 0x30
   13f40:	mov	ip, sp
   13f44:	lsr	r5, r4, #5
   13f48:	stmia	ip!, {r0, r1, r2, r3}
   13f4c:	add	r6, sp, #8
   13f50:	ldm	lr!, {r0, r1, r2, r3}
   13f54:	and	r4, r4, #31
   13f58:	stmia	ip!, {r0, r1, r2, r3}
   13f5c:	ldm	lr, {r0, r1, r2, r3}
   13f60:	stm	ip, {r0, r1, r2, r3}
   13f64:	mov	r2, r8
   13f68:	ldr	lr, [r6, r5, lsl #2]
   13f6c:	mov	r1, r7
   13f70:	mov	r3, sp
   13f74:	lsr	ip, lr, r4
   13f78:	eor	ip, ip, #1
   13f7c:	and	ip, ip, #1
   13f80:	mov	r0, #0
   13f84:	eor	r4, lr, ip, lsl r4
   13f88:	str	r4, [r6, r5, lsl #2]
   13f8c:	bl	13998 <__assert_fail@plt+0x2afc>
   13f90:	add	sp, sp, #48	; 0x30
   13f94:	pop	{r4, r5, r6, r7, r8, pc}
   13f98:	andeq	r7, r2, r4, ror r2
   13f9c:	mov	r2, r1
   13fa0:	mvn	r1, #0
   13fa4:	b	13f24 <__assert_fail@plt+0x3088>
   13fa8:	mov	r2, #58	; 0x3a
   13fac:	mvn	r1, #0
   13fb0:	b	13f24 <__assert_fail@plt+0x3088>
   13fb4:	mov	r2, #58	; 0x3a
   13fb8:	b	13f24 <__assert_fail@plt+0x3088>
   13fbc:	push	{r4, r5, r6, r7, lr}
   13fc0:	sub	sp, sp, #100	; 0x64
   13fc4:	mov	r6, r0
   13fc8:	mov	r0, sp
   13fcc:	mov	r7, r2
   13fd0:	bl	12334 <__assert_fail@plt+0x1498>
   13fd4:	mov	ip, sp
   13fd8:	add	lr, sp, #48	; 0x30
   13fdc:	ldm	ip!, {r0, r1, r2, r3}
   13fe0:	stmia	lr!, {r0, r1, r2, r3}
   13fe4:	ldm	ip!, {r0, r1, r2, r3}
   13fe8:	ldr	r5, [sp, #60]	; 0x3c
   13fec:	stmia	lr!, {r0, r1, r2, r3}
   13ff0:	mvn	r4, r5
   13ff4:	ldm	ip, {r0, r1, r2, r3}
   13ff8:	and	ip, r4, #67108864	; 0x4000000
   13ffc:	eor	ip, ip, r5
   14000:	str	ip, [sp, #60]	; 0x3c
   14004:	stm	lr, {r0, r1, r2, r3}
   14008:	mov	r1, r7
   1400c:	mov	r0, r6
   14010:	add	r3, sp, #48	; 0x30
   14014:	mvn	r2, #0
   14018:	bl	13998 <__assert_fail@plt+0x2afc>
   1401c:	add	sp, sp, #100	; 0x64
   14020:	pop	{r4, r5, r6, r7, pc}
   14024:	push	{r4, r5, r6, r7, r8, lr}
   14028:	mov	r5, r1
   1402c:	ldr	lr, [pc, #100]	; 14098 <__assert_fail@plt+0x31fc>
   14030:	mov	r4, r2
   14034:	mov	r7, r0
   14038:	mov	r8, r3
   1403c:	ldm	lr!, {r0, r1, r2, r3}
   14040:	sub	sp, sp, #48	; 0x30
   14044:	mov	ip, sp
   14048:	mov	r6, #10
   1404c:	stmia	ip!, {r0, r1, r2, r3}
   14050:	cmp	r4, #0
   14054:	cmpne	r5, #0
   14058:	ldm	lr!, {r0, r1, r2, r3}
   1405c:	str	r6, [sp]
   14060:	stmia	ip!, {r0, r1, r2, r3}
   14064:	ldm	lr, {r0, r1, r2, r3}
   14068:	stm	ip, {r0, r1, r2, r3}
   1406c:	beq	14094 <__assert_fail@plt+0x31f8>
   14070:	mov	r3, sp
   14074:	mov	r1, r8
   14078:	mov	r0, r7
   1407c:	ldr	r2, [sp, #72]	; 0x48
   14080:	str	r5, [sp, #40]	; 0x28
   14084:	str	r4, [sp, #44]	; 0x2c
   14088:	bl	13998 <__assert_fail@plt+0x2afc>
   1408c:	add	sp, sp, #48	; 0x30
   14090:	pop	{r4, r5, r6, r7, r8, pc}
   14094:	bl	10e84 <abort@plt>
   14098:	andeq	r7, r2, r4, ror r2
   1409c:	push	{lr}		; (str lr, [sp, #-4]!)
   140a0:	sub	sp, sp, #12
   140a4:	mvn	ip, #0
   140a8:	str	ip, [sp]
   140ac:	bl	14024 <__assert_fail@plt+0x3188>
   140b0:	add	sp, sp, #12
   140b4:	pop	{pc}		; (ldr pc, [sp], #4)
   140b8:	push	{lr}		; (str lr, [sp, #-4]!)
   140bc:	sub	sp, sp, #12
   140c0:	mvn	ip, #0
   140c4:	mov	r3, r2
   140c8:	str	ip, [sp]
   140cc:	mov	r2, r1
   140d0:	mov	r1, r0
   140d4:	mov	r0, #0
   140d8:	bl	14024 <__assert_fail@plt+0x3188>
   140dc:	add	sp, sp, #12
   140e0:	pop	{pc}		; (ldr pc, [sp], #4)
   140e4:	push	{lr}		; (str lr, [sp, #-4]!)
   140e8:	sub	sp, sp, #12
   140ec:	str	r3, [sp]
   140f0:	mov	r3, r2
   140f4:	mov	r2, r1
   140f8:	mov	r1, r0
   140fc:	mov	r0, #0
   14100:	bl	14024 <__assert_fail@plt+0x3188>
   14104:	add	sp, sp, #12
   14108:	pop	{pc}		; (ldr pc, [sp], #4)
   1410c:	ldr	r3, [pc]	; 14114 <__assert_fail@plt+0x3278>
   14110:	b	13998 <__assert_fail@plt+0x2afc>
   14114:	strdeq	r7, [r2], -ip
   14118:	mov	r2, r1
   1411c:	ldr	r3, [pc, #8]	; 1412c <__assert_fail@plt+0x3290>
   14120:	mov	r1, r0
   14124:	mov	r0, #0
   14128:	b	13998 <__assert_fail@plt+0x2afc>
   1412c:	strdeq	r7, [r2], -ip
   14130:	ldr	r3, [pc, #4]	; 1413c <__assert_fail@plt+0x32a0>
   14134:	mvn	r2, #0
   14138:	b	13998 <__assert_fail@plt+0x2afc>
   1413c:	strdeq	r7, [r2], -ip
   14140:	mov	r1, r0
   14144:	ldr	r3, [pc, #8]	; 14154 <__assert_fail@plt+0x32b8>
   14148:	mvn	r2, #0
   1414c:	mov	r0, #0
   14150:	b	13998 <__assert_fail@plt+0x2afc>
   14154:	strdeq	r7, [r2], -ip
   14158:	mov	r3, #0
   1415c:	str	r3, [r0]
   14160:	str	r3, [r0, #4]
   14164:	bx	lr
   14168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1416c:	sub	sp, sp, #52	; 0x34
   14170:	add	r4, sp, #16
   14174:	mov	r7, r2
   14178:	mov	r6, r1
   1417c:	mov	r2, #32
   14180:	mov	r1, #0
   14184:	mov	r5, r0
   14188:	mov	r0, r4
   1418c:	mov	r8, r3
   14190:	bl	10df4 <memset@plt>
   14194:	cmp	r7, #0
   14198:	movne	r1, r6
   1419c:	movne	lr, #1
   141a0:	addne	r2, r1, r7
   141a4:	beq	141c8 <__assert_fail@plt+0x332c>
   141a8:	ldrb	r3, [r1], #1
   141ac:	and	ip, r3, #31
   141b0:	lsr	r3, r3, #5
   141b4:	cmp	r2, r1
   141b8:	ldr	r0, [r4, r3, lsl #2]
   141bc:	orr	r0, r0, lr, lsl ip
   141c0:	str	r0, [r4, r3, lsl #2]
   141c4:	bne	141a8 <__assert_fail@plt+0x330c>
   141c8:	ldr	r3, [r5, #4]
   141cc:	ldr	r2, [r5, #8]
   141d0:	cmp	r3, r2
   141d4:	bcs	14338 <__assert_fail@plt+0x349c>
   141d8:	add	r2, r3, #1
   141dc:	str	r2, [r5, #4]
   141e0:	ldrb	r4, [r3]
   141e4:	lsr	r3, r4, #5
   141e8:	add	r2, sp, #48	; 0x30
   141ec:	add	r3, r2, r3, lsl #2
   141f0:	and	r1, r4, #31
   141f4:	ldr	r2, [r3, #-32]	; 0xffffffe0
   141f8:	lsr	r3, r2, r1
   141fc:	tst	r3, #1
   14200:	bne	14228 <__assert_fail@plt+0x338c>
   14204:	b	14254 <__assert_fail@plt+0x33b8>
   14208:	lsr	r2, r4, #5
   1420c:	add	r1, sp, #48	; 0x30
   14210:	add	r2, r1, r2, lsl #2
   14214:	and	r3, r4, #31
   14218:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1421c:	lsr	r3, r2, r3
   14220:	tst	r3, #1
   14224:	beq	14254 <__assert_fail@plt+0x33b8>
   14228:	ldr	r3, [r5, #4]
   1422c:	ldr	r2, [r5, #8]
   14230:	add	r1, r3, #1
   14234:	cmp	r3, r2
   14238:	strcc	r1, [r5, #4]
   1423c:	ldrbcc	r4, [r3]
   14240:	bcc	14208 <__assert_fail@plt+0x336c>
   14244:	mov	r0, r5
   14248:	bl	10e3c <__uflow@plt>
   1424c:	subs	r4, r0, #0
   14250:	bge	14208 <__assert_fail@plt+0x336c>
   14254:	ldr	r3, [r8]
   14258:	add	r7, sp, #48	; 0x30
   1425c:	ldr	fp, [r8, #4]
   14260:	str	r3, [r7, #-36]!	; 0xffffffdc
   14264:	mov	r6, #0
   14268:	mov	sl, #1
   1426c:	mvn	r9, #0
   14270:	b	142c0 <__assert_fail@plt+0x3424>
   14274:	lsr	r3, r4, #5
   14278:	add	r1, sp, #48	; 0x30
   1427c:	cmp	r4, #0
   14280:	and	r2, r4, #31
   14284:	add	r3, r1, r3, lsl #2
   14288:	blt	1430c <__assert_fail@plt+0x3470>
   1428c:	ldr	r3, [r3, #-32]	; 0xffffffe0
   14290:	lsr	r3, r3, r2
   14294:	tst	r3, #1
   14298:	bne	1430c <__assert_fail@plt+0x3470>
   1429c:	strb	r4, [fp, r6]
   142a0:	ldr	r3, [r5, #4]
   142a4:	ldr	r2, [r5, #8]
   142a8:	add	r1, r3, #1
   142ac:	cmp	r3, r2
   142b0:	strcc	r1, [r5, #4]
   142b4:	ldrbcc	r4, [r3]
   142b8:	bcs	142fc <__assert_fail@plt+0x3460>
   142bc:	add	r6, r6, #1
   142c0:	clz	r3, r6
   142c4:	lsr	r3, r3, #5
   142c8:	ands	r3, r3, r4, lsr #31
   142cc:	bne	1432c <__assert_fail@plt+0x3490>
   142d0:	ldr	r3, [sp, #12]
   142d4:	cmp	r6, r3
   142d8:	bne	14274 <__assert_fail@plt+0x33d8>
   142dc:	mov	r0, fp
   142e0:	str	sl, [sp]
   142e4:	mov	r3, r9
   142e8:	mov	r2, #1
   142ec:	mov	r1, r7
   142f0:	bl	14b40 <__assert_fail@plt+0x3ca4>
   142f4:	mov	fp, r0
   142f8:	b	14274 <__assert_fail@plt+0x33d8>
   142fc:	mov	r0, r5
   14300:	bl	10e3c <__uflow@plt>
   14304:	mov	r4, r0
   14308:	b	142bc <__assert_fail@plt+0x3420>
   1430c:	mov	r3, #0
   14310:	strb	r3, [fp, r6]
   14314:	ldr	r3, [sp, #12]
   14318:	mov	r0, r6
   1431c:	str	fp, [r8, #4]
   14320:	str	r3, [r8]
   14324:	add	sp, sp, #52	; 0x34
   14328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1432c:	mvn	r0, #0
   14330:	add	sp, sp, #52	; 0x34
   14334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14338:	mov	r0, r5
   1433c:	bl	10e3c <__uflow@plt>
   14340:	subs	r4, r0, #0
   14344:	bge	141e4 <__assert_fail@plt+0x3348>
   14348:	b	14254 <__assert_fail@plt+0x33b8>
   1434c:	cmp	r1, #0
   14350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14354:	mov	fp, r3
   14358:	sub	sp, sp, #36	; 0x24
   1435c:	moveq	r3, #64	; 0x40
   14360:	mov	sl, r0
   14364:	addne	r0, r1, #1
   14368:	movne	r3, r0
   1436c:	moveq	r0, r3
   14370:	mov	r1, #4
   14374:	str	r3, [sp, #20]
   14378:	str	r2, [sp, #12]
   1437c:	bl	14a9c <__assert_fail@plt+0x3c00>
   14380:	mov	r1, #4
   14384:	mov	r9, #1
   14388:	mov	r7, r0
   1438c:	ldr	r0, [sp, #20]
   14390:	bl	14a9c <__assert_fail@plt+0x3c00>
   14394:	mov	r3, #0
   14398:	mov	r4, r3
   1439c:	str	r3, [sp, #24]
   143a0:	str	r3, [sp, #28]
   143a4:	mov	r8, r0
   143a8:	b	143d8 <__assert_fail@plt+0x353c>
   143ac:	cmn	r5, #1
   143b0:	mov	r1, r9
   143b4:	mov	r0, r6
   143b8:	beq	14444 <__assert_fail@plt+0x35a8>
   143bc:	bl	14a9c <__assert_fail@plt+0x3c00>
   143c0:	str	r5, [r8, r4, lsl #2]
   143c4:	mov	r2, r6
   143c8:	ldr	r1, [sp, #28]
   143cc:	bl	10ca4 <memcpy@plt>
   143d0:	str	r0, [r7, r4, lsl #2]
   143d4:	add	r4, r4, #1
   143d8:	add	r3, sp, #24
   143dc:	mov	r2, fp
   143e0:	ldr	r1, [sp, #12]
   143e4:	mov	r0, sl
   143e8:	bl	14168 <__assert_fail@plt+0x32cc>
   143ec:	ldr	r3, [sp, #20]
   143f0:	cmp	r4, r3
   143f4:	mov	r5, r0
   143f8:	add	r6, r0, #1
   143fc:	blt	143ac <__assert_fail@plt+0x3510>
   14400:	mov	r3, #4
   14404:	str	r3, [sp]
   14408:	mov	r0, r7
   1440c:	mvn	r3, #0
   14410:	mov	r2, r9
   14414:	add	r1, sp, #20
   14418:	bl	14b40 <__assert_fail@plt+0x3ca4>
   1441c:	ldr	r1, [sp, #20]
   14420:	mov	r2, #4
   14424:	mov	r7, r0
   14428:	mov	r0, r8
   1442c:	bl	14a40 <__assert_fail@plt+0x3ba4>
   14430:	cmn	r5, #1
   14434:	mov	r1, r9
   14438:	mov	r8, r0
   1443c:	mov	r0, r6
   14440:	bne	143bc <__assert_fail@plt+0x3520>
   14444:	mov	r3, #0
   14448:	str	r3, [r7, r4, lsl #2]
   1444c:	ldr	r0, [sp, #28]
   14450:	str	r3, [r8, r4, lsl #2]
   14454:	bl	11e34 <__assert_fail@plt+0xf98>
   14458:	ldr	r3, [sp, #76]	; 0x4c
   1445c:	cmp	r3, #0
   14460:	ldr	r3, [sp, #72]	; 0x48
   14464:	str	r7, [r3]
   14468:	ldrne	r3, [sp, #76]	; 0x4c
   1446c:	strne	r8, [r3]
   14470:	beq	14480 <__assert_fail@plt+0x35e4>
   14474:	mov	r0, r4
   14478:	add	sp, sp, #36	; 0x24
   1447c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14480:	mov	r0, r8
   14484:	bl	11e34 <__assert_fail@plt+0xf98>
   14488:	mov	r0, r4
   1448c:	add	sp, sp, #36	; 0x24
   14490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14494:	push	{r4, r5, r6, lr}
   14498:	sub	sp, sp, #32
   1449c:	cmp	r1, #0
   144a0:	mov	r4, r0
   144a4:	ldr	r5, [sp, #48]	; 0x30
   144a8:	ldr	r6, [sp, #52]	; 0x34
   144ac:	beq	147c4 <__assert_fail@plt+0x3928>
   144b0:	stm	sp, {r2, r3}
   144b4:	mov	r3, r1
   144b8:	ldr	r2, [pc, #808]	; 147e8 <__assert_fail@plt+0x394c>
   144bc:	mov	r1, #1
   144c0:	bl	10e18 <__fprintf_chk@plt>
   144c4:	mov	r2, #5
   144c8:	ldr	r1, [pc, #796]	; 147ec <__assert_fail@plt+0x3950>
   144cc:	mov	r0, #0
   144d0:	bl	10cd4 <dcgettext@plt>
   144d4:	ldr	r3, [pc, #788]	; 147f0 <__assert_fail@plt+0x3954>
   144d8:	ldr	r2, [pc, #788]	; 147f4 <__assert_fail@plt+0x3958>
   144dc:	str	r3, [sp]
   144e0:	mov	r1, #1
   144e4:	mov	r3, r0
   144e8:	mov	r0, r4
   144ec:	bl	10e18 <__fprintf_chk@plt>
   144f0:	mov	r1, r4
   144f4:	mov	r0, #10
   144f8:	bl	10cc8 <fputc_unlocked@plt>
   144fc:	mov	r2, #5
   14500:	ldr	r1, [pc, #752]	; 147f8 <__assert_fail@plt+0x395c>
   14504:	mov	r0, #0
   14508:	bl	10cd4 <dcgettext@plt>
   1450c:	mov	r1, #1
   14510:	ldr	r3, [pc, #740]	; 147fc <__assert_fail@plt+0x3960>
   14514:	mov	r2, r0
   14518:	mov	r0, r4
   1451c:	bl	10e18 <__fprintf_chk@plt>
   14520:	mov	r1, r4
   14524:	mov	r0, #10
   14528:	bl	10cc8 <fputc_unlocked@plt>
   1452c:	cmp	r6, #9
   14530:	ldrls	pc, [pc, r6, lsl #2]
   14534:	b	147dc <__assert_fail@plt+0x3940>
   14538:			; <UNDEFINED> instruction: 0x000145bc
   1453c:	andeq	r4, r1, r4, asr #11
   14540:	strdeq	r4, [r1], -r0
   14544:	andeq	r4, r1, r4, lsr #12
   14548:	andeq	r4, r1, r0, ror #12
   1454c:	muleq	r1, ip, r6
   14550:	ldrdeq	r4, [r1], -r8
   14554:	andeq	r4, r1, ip, lsl r7
   14558:	andeq	r4, r1, ip, ror #14
   1455c:	andeq	r4, r1, r0, ror #10
   14560:	ldr	r1, [pc, #664]	; 14800 <__assert_fail@plt+0x3964>
   14564:	mov	r2, #5
   14568:	mov	r0, #0
   1456c:	bl	10cd4 <dcgettext@plt>
   14570:	ldr	ip, [r5, #32]
   14574:	ldr	r1, [r5, #28]
   14578:	ldr	r2, [r5, #24]
   1457c:	ldr	r3, [r5]
   14580:	ldr	r6, [r5, #20]
   14584:	str	ip, [sp, #28]
   14588:	ldr	lr, [r5, #16]
   1458c:	str	r1, [sp, #24]
   14590:	ldr	ip, [r5, #12]
   14594:	str	r2, [sp, #20]
   14598:	ldr	r1, [r5, #8]
   1459c:	ldr	r2, [r5, #4]
   145a0:	str	r6, [sp, #16]
   145a4:	stmib	sp, {r1, ip, lr}
   145a8:	mov	r1, #1
   145ac:	str	r2, [sp]
   145b0:	mov	r2, r0
   145b4:	mov	r0, r4
   145b8:	bl	10e18 <__fprintf_chk@plt>
   145bc:	add	sp, sp, #32
   145c0:	pop	{r4, r5, r6, pc}
   145c4:	mov	r2, #5
   145c8:	ldr	r1, [pc, #564]	; 14804 <__assert_fail@plt+0x3968>
   145cc:	mov	r0, #0
   145d0:	bl	10cd4 <dcgettext@plt>
   145d4:	ldr	r3, [r5]
   145d8:	mov	r1, #1
   145dc:	mov	r2, r0
   145e0:	mov	r0, r4
   145e4:	add	sp, sp, #32
   145e8:	pop	{r4, r5, r6, lr}
   145ec:	b	10e18 <__fprintf_chk@plt>
   145f0:	mov	r2, #5
   145f4:	ldr	r1, [pc, #524]	; 14808 <__assert_fail@plt+0x396c>
   145f8:	mov	r0, #0
   145fc:	bl	10cd4 <dcgettext@plt>
   14600:	ldr	r2, [r5, #4]
   14604:	ldr	r3, [r5]
   14608:	mov	r1, #1
   1460c:	str	r2, [sp, #48]	; 0x30
   14610:	mov	r2, r0
   14614:	mov	r0, r4
   14618:	add	sp, sp, #32
   1461c:	pop	{r4, r5, r6, lr}
   14620:	b	10e18 <__fprintf_chk@plt>
   14624:	mov	r2, #5
   14628:	ldr	r1, [pc, #476]	; 1480c <__assert_fail@plt+0x3970>
   1462c:	mov	r0, #0
   14630:	bl	10cd4 <dcgettext@plt>
   14634:	ldr	r1, [r5, #8]
   14638:	ldr	r2, [r5, #4]
   1463c:	ldr	r3, [r5]
   14640:	str	r1, [sp, #52]	; 0x34
   14644:	str	r2, [sp, #48]	; 0x30
   14648:	mov	r1, #1
   1464c:	mov	r2, r0
   14650:	mov	r0, r4
   14654:	add	sp, sp, #32
   14658:	pop	{r4, r5, r6, lr}
   1465c:	b	10e18 <__fprintf_chk@plt>
   14660:	mov	r2, #5
   14664:	ldr	r1, [pc, #420]	; 14810 <__assert_fail@plt+0x3974>
   14668:	mov	r0, #0
   1466c:	bl	10cd4 <dcgettext@plt>
   14670:	ldr	r1, [r5, #8]
   14674:	ldr	ip, [r5, #12]
   14678:	ldr	r2, [r5, #4]
   1467c:	ldr	r3, [r5]
   14680:	stmib	sp, {r1, ip}
   14684:	str	r2, [sp]
   14688:	mov	r1, #1
   1468c:	mov	r2, r0
   14690:	mov	r0, r4
   14694:	bl	10e18 <__fprintf_chk@plt>
   14698:	b	145bc <__assert_fail@plt+0x3720>
   1469c:	mov	r2, #5
   146a0:	ldr	r1, [pc, #364]	; 14814 <__assert_fail@plt+0x3978>
   146a4:	mov	r0, #0
   146a8:	bl	10cd4 <dcgettext@plt>
   146ac:	add	r1, r5, #8
   146b0:	ldr	r2, [r5, #4]
   146b4:	ldm	r1, {r1, ip, lr}
   146b8:	ldr	r3, [r5]
   146bc:	str	r2, [sp]
   146c0:	stmib	sp, {r1, ip, lr}
   146c4:	mov	r1, #1
   146c8:	mov	r2, r0
   146cc:	mov	r0, r4
   146d0:	bl	10e18 <__fprintf_chk@plt>
   146d4:	b	145bc <__assert_fail@plt+0x3720>
   146d8:	mov	r2, #5
   146dc:	ldr	r1, [pc, #308]	; 14818 <__assert_fail@plt+0x397c>
   146e0:	mov	r0, #0
   146e4:	bl	10cd4 <dcgettext@plt>
   146e8:	add	r1, r5, #8
   146ec:	ldr	r2, [r5, #4]
   146f0:	ldm	r1, {r1, ip, lr}
   146f4:	ldr	r6, [r5, #20]
   146f8:	ldr	r3, [r5]
   146fc:	stmib	sp, {r1, ip, lr}
   14700:	mov	r1, #1
   14704:	str	r2, [sp]
   14708:	str	r6, [sp, #16]
   1470c:	mov	r2, r0
   14710:	mov	r0, r4
   14714:	bl	10e18 <__fprintf_chk@plt>
   14718:	b	145bc <__assert_fail@plt+0x3720>
   1471c:	mov	r2, #5
   14720:	ldr	r1, [pc, #244]	; 1481c <__assert_fail@plt+0x3980>
   14724:	mov	r0, #0
   14728:	bl	10cd4 <dcgettext@plt>
   1472c:	ldr	r2, [r5, #24]
   14730:	ldr	r3, [r5]
   14734:	ldr	r6, [r5, #20]
   14738:	ldr	lr, [r5, #16]
   1473c:	ldr	ip, [r5, #12]
   14740:	str	r2, [sp, #20]
   14744:	ldr	r1, [r5, #8]
   14748:	ldr	r2, [r5, #4]
   1474c:	str	r6, [sp, #16]
   14750:	stmib	sp, {r1, ip, lr}
   14754:	mov	r1, #1
   14758:	str	r2, [sp]
   1475c:	mov	r2, r0
   14760:	mov	r0, r4
   14764:	bl	10e18 <__fprintf_chk@plt>
   14768:	b	145bc <__assert_fail@plt+0x3720>
   1476c:	mov	r2, #5
   14770:	ldr	r1, [pc, #168]	; 14820 <__assert_fail@plt+0x3984>
   14774:	mov	r0, #0
   14778:	bl	10cd4 <dcgettext@plt>
   1477c:	ldr	r1, [r5, #28]
   14780:	ldr	r2, [r5, #24]
   14784:	ldr	r3, [r5]
   14788:	ldr	r6, [r5, #20]
   1478c:	ldr	lr, [r5, #16]
   14790:	str	r1, [sp, #24]
   14794:	ldr	ip, [r5, #12]
   14798:	str	r2, [sp, #20]
   1479c:	ldr	r1, [r5, #8]
   147a0:	ldr	r2, [r5, #4]
   147a4:	str	r6, [sp, #16]
   147a8:	stmib	sp, {r1, ip, lr}
   147ac:	mov	r1, #1
   147b0:	str	r2, [sp]
   147b4:	mov	r2, r0
   147b8:	mov	r0, r4
   147bc:	bl	10e18 <__fprintf_chk@plt>
   147c0:	b	145bc <__assert_fail@plt+0x3720>
   147c4:	str	r3, [sp]
   147c8:	mov	r1, #1
   147cc:	mov	r3, r2
   147d0:	ldr	r2, [pc, #76]	; 14824 <__assert_fail@plt+0x3988>
   147d4:	bl	10e18 <__fprintf_chk@plt>
   147d8:	b	144c4 <__assert_fail@plt+0x3628>
   147dc:	mov	r2, #5
   147e0:	ldr	r1, [pc, #64]	; 14828 <__assert_fail@plt+0x398c>
   147e4:	b	14568 <__assert_fail@plt+0x36cc>
   147e8:	andeq	r5, r1, r0, asr #25
   147ec:	ldrdeq	r5, [r1], -r4
   147f0:	andeq	r0, r0, r6, ror #15
   147f4:	andeq	r5, r1, ip, lsr #31
   147f8:	ldrdeq	r5, [r1], -r8
   147fc:	andeq	r5, r1, r4, lsl #27
   14800:			; <UNDEFINED> instruction: 0x00015eb4
   14804:	andeq	r5, r1, r8, lsr #27
   14808:			; <UNDEFINED> instruction: 0x00015db8
   1480c:	ldrdeq	r5, [r1], -r0
   14810:	andeq	r5, r1, ip, ror #27
   14814:	andeq	r5, r1, ip, lsl #28
   14818:	andeq	r5, r1, r0, lsr lr
   1481c:	andeq	r5, r1, r8, asr lr
   14820:	andeq	r5, r1, r4, lsl #29
   14824:	andeq	r5, r1, ip, asr #25
   14828:	andeq	r5, r1, r8, ror #29
   1482c:	push	{r4, r5, lr}
   14830:	sub	sp, sp, #12
   14834:	ldr	r5, [sp, #24]
   14838:	ldr	ip, [r5]
   1483c:	cmp	ip, #0
   14840:	beq	1485c <__assert_fail@plt+0x39c0>
   14844:	mov	lr, r5
   14848:	mov	ip, #0
   1484c:	ldr	r4, [lr, #4]!
   14850:	add	ip, ip, #1
   14854:	cmp	r4, #0
   14858:	bne	1484c <__assert_fail@plt+0x39b0>
   1485c:	stm	sp, {r5, ip}
   14860:	bl	14494 <__assert_fail@plt+0x35f8>
   14864:	add	sp, sp, #12
   14868:	pop	{r4, r5, pc}
   1486c:	push	{r4, r5, lr}
   14870:	sub	sp, sp, #52	; 0x34
   14874:	add	r5, sp, #4
   14878:	ldr	r4, [sp, #64]	; 0x40
   1487c:	mov	ip, #0
   14880:	sub	r4, r4, #4
   14884:	ldr	lr, [r4, #4]!
   14888:	cmp	lr, #0
   1488c:	str	lr, [r5, #4]!
   14890:	beq	148a0 <__assert_fail@plt+0x3a04>
   14894:	add	ip, ip, #1
   14898:	cmp	ip, #10
   1489c:	bne	14884 <__assert_fail@plt+0x39e8>
   148a0:	add	lr, sp, #8
   148a4:	str	ip, [sp, #4]
   148a8:	str	lr, [sp]
   148ac:	bl	14494 <__assert_fail@plt+0x35f8>
   148b0:	add	sp, sp, #52	; 0x34
   148b4:	pop	{r4, r5, pc}
   148b8:	push	{r3}		; (str r3, [sp, #-4]!)
   148bc:	push	{r4, lr}
   148c0:	sub	sp, sp, #60	; 0x3c
   148c4:	add	lr, sp, #56	; 0x38
   148c8:	add	r3, sp, #72	; 0x48
   148cc:	str	r3, [lr, #-44]!	; 0xffffffd4
   148d0:	add	r4, sp, #68	; 0x44
   148d4:	mov	r3, #0
   148d8:	ldr	ip, [r4, #4]!
   148dc:	cmp	ip, #0
   148e0:	str	ip, [lr, #4]!
   148e4:	beq	148f4 <__assert_fail@plt+0x3a58>
   148e8:	add	r3, r3, #1
   148ec:	cmp	r3, #10
   148f0:	bne	148d8 <__assert_fail@plt+0x3a3c>
   148f4:	add	ip, sp, #16
   148f8:	str	r3, [sp, #4]
   148fc:	str	ip, [sp]
   14900:	ldr	r3, [sp, #68]	; 0x44
   14904:	bl	14494 <__assert_fail@plt+0x35f8>
   14908:	add	sp, sp, #60	; 0x3c
   1490c:	pop	{r4, lr}
   14910:	add	sp, sp, #4
   14914:	bx	lr
   14918:	ldr	r3, [pc, #116]	; 14994 <__assert_fail@plt+0x3af8>
   1491c:	push	{r4, lr}
   14920:	mov	r0, #10
   14924:	ldr	r1, [r3]
   14928:	bl	10cc8 <fputc_unlocked@plt>
   1492c:	mov	r2, #5
   14930:	ldr	r1, [pc, #96]	; 14998 <__assert_fail@plt+0x3afc>
   14934:	mov	r0, #0
   14938:	bl	10cd4 <dcgettext@plt>
   1493c:	ldr	r2, [pc, #88]	; 1499c <__assert_fail@plt+0x3b00>
   14940:	mov	r1, r0
   14944:	mov	r0, #1
   14948:	bl	10e00 <__printf_chk@plt>
   1494c:	mov	r2, #5
   14950:	ldr	r1, [pc, #72]	; 149a0 <__assert_fail@plt+0x3b04>
   14954:	mov	r0, #0
   14958:	bl	10cd4 <dcgettext@plt>
   1495c:	ldr	r3, [pc, #64]	; 149a4 <__assert_fail@plt+0x3b08>
   14960:	ldr	r2, [pc, #64]	; 149a8 <__assert_fail@plt+0x3b0c>
   14964:	mov	r1, r0
   14968:	mov	r0, #1
   1496c:	bl	10e00 <__printf_chk@plt>
   14970:	mov	r2, #5
   14974:	ldr	r1, [pc, #48]	; 149ac <__assert_fail@plt+0x3b10>
   14978:	mov	r0, #0
   1497c:	bl	10cd4 <dcgettext@plt>
   14980:	ldr	r2, [pc, #40]	; 149b0 <__assert_fail@plt+0x3b14>
   14984:	pop	{r4, lr}
   14988:	mov	r1, r0
   1498c:	mov	r0, #1
   14990:	b	10e00 <__printf_chk@plt>
   14994:	andeq	r7, r2, ip, asr #2
   14998:	andeq	r5, r1, r4, lsr #30
   1499c:	andeq	r5, r1, r8, lsr pc
   149a0:	andeq	r5, r1, r0, asr pc
   149a4:	andeq	r5, r1, ip, asr #17
   149a8:	strdeq	r5, [r1], -r4
   149ac:	andeq	r5, r1, r4, ror #30
   149b0:	andeq	r5, r1, ip, lsl #31
   149b4:	push	{r4, lr}
   149b8:	bl	14f84 <__assert_fail@plt+0x40e8>
   149bc:	cmp	r0, #0
   149c0:	popne	{r4, pc}
   149c4:	bl	14efc <__assert_fail@plt+0x4060>
   149c8:	push	{r4, lr}
   149cc:	bl	14f84 <__assert_fail@plt+0x40e8>
   149d0:	cmp	r0, #0
   149d4:	popne	{r4, pc}
   149d8:	bl	14efc <__assert_fail@plt+0x4060>
   149dc:	push	{r4, lr}
   149e0:	bl	14f84 <__assert_fail@plt+0x40e8>
   149e4:	cmp	r0, #0
   149e8:	popne	{r4, pc}
   149ec:	bl	14efc <__assert_fail@plt+0x4060>
   149f0:	push	{r4, r5, r6, lr}
   149f4:	mov	r5, r0
   149f8:	mov	r4, r1
   149fc:	bl	14fb0 <__assert_fail@plt+0x4114>
   14a00:	cmp	r0, #0
   14a04:	popne	{r4, r5, r6, pc}
   14a08:	adds	r4, r4, #0
   14a0c:	movne	r4, #1
   14a10:	cmp	r5, #0
   14a14:	orreq	r4, r4, #1
   14a18:	cmp	r4, #0
   14a1c:	popeq	{r4, r5, r6, pc}
   14a20:	bl	14efc <__assert_fail@plt+0x4060>
   14a24:	push	{r4, lr}
   14a28:	cmp	r1, #0
   14a2c:	orreq	r1, r1, #1
   14a30:	bl	14fb0 <__assert_fail@plt+0x4114>
   14a34:	cmp	r0, #0
   14a38:	popne	{r4, pc}
   14a3c:	bl	14efc <__assert_fail@plt+0x4060>
   14a40:	push	{r4, r5, r6, lr}
   14a44:	mov	r6, r0
   14a48:	mov	r5, r1
   14a4c:	mov	r4, r2
   14a50:	bl	15110 <__assert_fail@plt+0x4274>
   14a54:	cmp	r0, #0
   14a58:	popne	{r4, r5, r6, pc}
   14a5c:	cmp	r6, #0
   14a60:	beq	14a70 <__assert_fail@plt+0x3bd4>
   14a64:	cmp	r5, #0
   14a68:	cmpne	r4, #0
   14a6c:	popeq	{r4, r5, r6, pc}
   14a70:	bl	14efc <__assert_fail@plt+0x4060>
   14a74:	b	14a40 <__assert_fail@plt+0x3ba4>
   14a78:	cmp	r2, #0
   14a7c:	cmpne	r1, #0
   14a80:	moveq	r2, #1
   14a84:	moveq	r1, r2
   14a88:	push	{r4, lr}
   14a8c:	bl	15110 <__assert_fail@plt+0x4274>
   14a90:	cmp	r0, #0
   14a94:	popne	{r4, pc}
   14a98:	bl	14efc <__assert_fail@plt+0x4060>
   14a9c:	mov	r2, r1
   14aa0:	mov	r1, r0
   14aa4:	mov	r0, #0
   14aa8:	b	14a40 <__assert_fail@plt+0x3ba4>
   14aac:	mov	r2, r1
   14ab0:	mov	r1, r0
   14ab4:	mov	r0, #0
   14ab8:	b	14a78 <__assert_fail@plt+0x3bdc>
   14abc:	push	{r4, r5, r6, lr}
   14ac0:	subs	r6, r0, #0
   14ac4:	sub	sp, sp, #8
   14ac8:	mov	r5, r1
   14acc:	ldr	r4, [r1]
   14ad0:	beq	14b0c <__assert_fail@plt+0x3c70>
   14ad4:	lsr	r1, r4, #1
   14ad8:	add	r3, r1, #1
   14adc:	mvn	r3, r3
   14ae0:	cmp	r4, r3
   14ae4:	bhi	14b08 <__assert_fail@plt+0x3c6c>
   14ae8:	add	r4, r4, #1
   14aec:	add	r4, r4, r1
   14af0:	mov	r0, r6
   14af4:	mov	r1, r4
   14af8:	bl	14a40 <__assert_fail@plt+0x3ba4>
   14afc:	str	r4, [r5]
   14b00:	add	sp, sp, #8
   14b04:	pop	{r4, r5, r6, pc}
   14b08:	bl	14efc <__assert_fail@plt+0x4060>
   14b0c:	cmp	r4, #0
   14b10:	bne	14af0 <__assert_fail@plt+0x3c54>
   14b14:	mov	r1, r2
   14b18:	mov	r0, #64	; 0x40
   14b1c:	str	r2, [sp, #4]
   14b20:	bl	15250 <__assert_fail@plt+0x43b4>
   14b24:	ldr	r2, [sp, #4]
   14b28:	cmp	r0, #0
   14b2c:	movne	r4, r0
   14b30:	addeq	r4, r0, #1
   14b34:	b	14af0 <__assert_fail@plt+0x3c54>
   14b38:	mov	r2, #1
   14b3c:	b	14abc <__assert_fail@plt+0x3c20>
   14b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b44:	sub	sp, sp, #12
   14b48:	ldr	r6, [r1]
   14b4c:	mov	sl, r1
   14b50:	mov	r9, r0
   14b54:	asrs	r4, r6, #1
   14b58:	mov	r5, r2
   14b5c:	mov	fp, r3
   14b60:	ldr	r7, [sp, #48]	; 0x30
   14b64:	bmi	14cd0 <__assert_fail@plt+0x3e34>
   14b68:	mvn	r3, #-2147483648	; 0x80000000
   14b6c:	sub	r3, r3, r4
   14b70:	cmp	r6, r3
   14b74:	movle	r3, #0
   14b78:	movgt	r3, #1
   14b7c:	mvn	r8, fp
   14b80:	cmp	r3, #0
   14b84:	addeq	r4, r4, r6
   14b88:	mvnne	r4, #-2147483648	; 0x80000000
   14b8c:	lsr	r8, r8, #31
   14b90:	cmp	fp, r4
   14b94:	movge	r3, #0
   14b98:	andlt	r3, r8, #1
   14b9c:	cmp	r3, #0
   14ba0:	beq	14c88 <__assert_fail@plt+0x3dec>
   14ba4:	cmp	r7, #0
   14ba8:	blt	14d58 <__assert_fail@plt+0x3ebc>
   14bac:	bne	14d50 <__assert_fail@plt+0x3eb4>
   14bb0:	mov	r2, #64	; 0x40
   14bb4:	mov	r1, r7
   14bb8:	mov	r0, r2
   14bbc:	str	r2, [sp, #4]
   14bc0:	bl	1545c <__assert_fail@plt+0x45c0>
   14bc4:	ldr	r2, [sp, #4]
   14bc8:	mov	r1, r7
   14bcc:	mov	r4, r0
   14bd0:	mov	r0, r2
   14bd4:	bl	1567c <__assert_fail@plt+0x47e0>
   14bd8:	ldr	r2, [sp, #4]
   14bdc:	sub	r1, r2, r1
   14be0:	cmp	r9, #0
   14be4:	sub	r3, r4, r6
   14be8:	streq	r9, [sl]
   14bec:	cmp	r3, r5
   14bf0:	bge	14c74 <__assert_fail@plt+0x3dd8>
   14bf4:	cmp	r5, #0
   14bf8:	blt	14ce4 <__assert_fail@plt+0x3e48>
   14bfc:	cmp	r6, #0
   14c00:	blt	14c20 <__assert_fail@plt+0x3d84>
   14c04:	mvn	r3, #-2147483648	; 0x80000000
   14c08:	sub	r3, r3, r5
   14c0c:	cmp	r6, r3
   14c10:	movle	r3, #0
   14c14:	movgt	r3, #1
   14c18:	cmp	r3, #0
   14c1c:	bne	14de0 <__assert_fail@plt+0x3f44>
   14c20:	add	r5, r6, r5
   14c24:	cmp	fp, r5
   14c28:	movge	r8, #0
   14c2c:	andlt	r8, r8, #1
   14c30:	cmp	r8, #0
   14c34:	mov	r4, r5
   14c38:	bne	14de0 <__assert_fail@plt+0x3f44>
   14c3c:	cmp	r7, #0
   14c40:	blt	14cf8 <__assert_fail@plt+0x3e5c>
   14c44:	beq	14c70 <__assert_fail@plt+0x3dd4>
   14c48:	cmp	r5, #0
   14c4c:	blt	14da0 <__assert_fail@plt+0x3f04>
   14c50:	mov	r1, r7
   14c54:	mvn	r0, #-2147483648	; 0x80000000
   14c58:	bl	1545c <__assert_fail@plt+0x45c0>
   14c5c:	cmp	r5, r0
   14c60:	movle	r0, #0
   14c64:	movgt	r0, #1
   14c68:	cmp	r0, #0
   14c6c:	bne	14de0 <__assert_fail@plt+0x3f44>
   14c70:	mul	r1, r5, r7
   14c74:	mov	r0, r9
   14c78:	bl	149f0 <__assert_fail@plt+0x3b54>
   14c7c:	str	r4, [sl]
   14c80:	add	sp, sp, #12
   14c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c88:	cmp	r7, #0
   14c8c:	blt	14d24 <__assert_fail@plt+0x3e88>
   14c90:	beq	14bb0 <__assert_fail@plt+0x3d14>
   14c94:	cmp	r4, #0
   14c98:	blt	14d60 <__assert_fail@plt+0x3ec4>
   14c9c:	mov	r1, r7
   14ca0:	mvn	r0, #-2147483648	; 0x80000000
   14ca4:	bl	1545c <__assert_fail@plt+0x45c0>
   14ca8:	cmp	r0, r4
   14cac:	movge	r0, #0
   14cb0:	movlt	r0, #1
   14cb4:	cmp	r0, #0
   14cb8:	mvnne	r2, #-2147483648	; 0x80000000
   14cbc:	bne	14bb4 <__assert_fail@plt+0x3d18>
   14cc0:	mul	r1, r7, r4
   14cc4:	cmp	r1, #63	; 0x3f
   14cc8:	bgt	14be0 <__assert_fail@plt+0x3d44>
   14ccc:	b	14bb0 <__assert_fail@plt+0x3d14>
   14cd0:	rsb	r3, r4, #-2147483648	; 0x80000000
   14cd4:	cmp	r6, r3
   14cd8:	movge	r3, #0
   14cdc:	movlt	r3, #1
   14ce0:	b	14b7c <__assert_fail@plt+0x3ce0>
   14ce4:	rsb	r3, r5, #-2147483648	; 0x80000000
   14ce8:	cmp	r6, r3
   14cec:	movge	r3, #0
   14cf0:	movlt	r3, #1
   14cf4:	b	14c18 <__assert_fail@plt+0x3d7c>
   14cf8:	cmp	r5, #0
   14cfc:	blt	14d84 <__assert_fail@plt+0x3ee8>
   14d00:	cmn	r7, #1
   14d04:	beq	14c70 <__assert_fail@plt+0x3dd4>
   14d08:	mov	r1, r7
   14d0c:	mov	r0, #-2147483648	; 0x80000000
   14d10:	bl	1545c <__assert_fail@plt+0x45c0>
   14d14:	cmp	r5, r0
   14d18:	movle	r0, #0
   14d1c:	movgt	r0, #1
   14d20:	b	14c68 <__assert_fail@plt+0x3dcc>
   14d24:	cmp	r4, #0
   14d28:	blt	14dc4 <__assert_fail@plt+0x3f28>
   14d2c:	cmn	r7, #1
   14d30:	beq	14cc0 <__assert_fail@plt+0x3e24>
   14d34:	mov	r1, r7
   14d38:	mov	r0, #-2147483648	; 0x80000000
   14d3c:	bl	1545c <__assert_fail@plt+0x45c0>
   14d40:	cmp	r0, r4
   14d44:	movge	r0, #0
   14d48:	movlt	r0, #1
   14d4c:	b	14cb4 <__assert_fail@plt+0x3e18>
   14d50:	mov	r4, fp
   14d54:	b	14c9c <__assert_fail@plt+0x3e00>
   14d58:	mov	r4, fp
   14d5c:	b	14d2c <__assert_fail@plt+0x3e90>
   14d60:	cmn	r4, #1
   14d64:	beq	14cc0 <__assert_fail@plt+0x3e24>
   14d68:	mov	r1, r4
   14d6c:	mov	r0, #-2147483648	; 0x80000000
   14d70:	bl	1545c <__assert_fail@plt+0x45c0>
   14d74:	cmp	r7, r0
   14d78:	movle	r0, #0
   14d7c:	movgt	r0, #1
   14d80:	b	14cb4 <__assert_fail@plt+0x3e18>
   14d84:	mov	r1, r7
   14d88:	mvn	r0, #-2147483648	; 0x80000000
   14d8c:	bl	1545c <__assert_fail@plt+0x45c0>
   14d90:	cmp	r5, r0
   14d94:	movge	r0, #0
   14d98:	movlt	r0, #1
   14d9c:	b	14c68 <__assert_fail@plt+0x3dcc>
   14da0:	cmn	r5, #1
   14da4:	beq	14c70 <__assert_fail@plt+0x3dd4>
   14da8:	mov	r1, r5
   14dac:	mov	r0, #-2147483648	; 0x80000000
   14db0:	bl	1545c <__assert_fail@plt+0x45c0>
   14db4:	cmp	r7, r0
   14db8:	movle	r0, #0
   14dbc:	movgt	r0, #1
   14dc0:	b	14c68 <__assert_fail@plt+0x3dcc>
   14dc4:	mov	r1, r7
   14dc8:	mvn	r0, #-2147483648	; 0x80000000
   14dcc:	bl	1545c <__assert_fail@plt+0x45c0>
   14dd0:	cmp	r0, r4
   14dd4:	movle	r0, #0
   14dd8:	movgt	r0, #1
   14ddc:	b	14cb4 <__assert_fail@plt+0x3e18>
   14de0:	bl	14efc <__assert_fail@plt+0x4060>
   14de4:	push	{r4, lr}
   14de8:	mov	r1, #1
   14dec:	bl	14f3c <__assert_fail@plt+0x40a0>
   14df0:	cmp	r0, #0
   14df4:	popne	{r4, pc}
   14df8:	bl	14efc <__assert_fail@plt+0x4060>
   14dfc:	push	{r4, lr}
   14e00:	mov	r1, #1
   14e04:	bl	14f3c <__assert_fail@plt+0x40a0>
   14e08:	cmp	r0, #0
   14e0c:	popne	{r4, pc}
   14e10:	bl	14efc <__assert_fail@plt+0x4060>
   14e14:	push	{r4, lr}
   14e18:	bl	14f3c <__assert_fail@plt+0x40a0>
   14e1c:	cmp	r0, #0
   14e20:	popne	{r4, pc}
   14e24:	bl	14efc <__assert_fail@plt+0x4060>
   14e28:	push	{r4, lr}
   14e2c:	bl	14f3c <__assert_fail@plt+0x40a0>
   14e30:	cmp	r0, #0
   14e34:	popne	{r4, pc}
   14e38:	bl	14efc <__assert_fail@plt+0x4060>
   14e3c:	push	{r4, r5, r6, lr}
   14e40:	mov	r6, r0
   14e44:	mov	r0, r1
   14e48:	mov	r4, r1
   14e4c:	bl	14f84 <__assert_fail@plt+0x40e8>
   14e50:	subs	r5, r0, #0
   14e54:	beq	14e6c <__assert_fail@plt+0x3fd0>
   14e58:	mov	r2, r4
   14e5c:	mov	r1, r6
   14e60:	bl	10ca4 <memcpy@plt>
   14e64:	mov	r0, r5
   14e68:	pop	{r4, r5, r6, pc}
   14e6c:	bl	14efc <__assert_fail@plt+0x4060>
   14e70:	push	{r4, r5, r6, lr}
   14e74:	mov	r6, r0
   14e78:	mov	r0, r1
   14e7c:	mov	r4, r1
   14e80:	bl	14f84 <__assert_fail@plt+0x40e8>
   14e84:	subs	r5, r0, #0
   14e88:	beq	14ea0 <__assert_fail@plt+0x4004>
   14e8c:	mov	r2, r4
   14e90:	mov	r1, r6
   14e94:	bl	10ca4 <memcpy@plt>
   14e98:	mov	r0, r5
   14e9c:	pop	{r4, r5, r6, pc}
   14ea0:	bl	14efc <__assert_fail@plt+0x4060>
   14ea4:	push	{r4, r5, r6, lr}
   14ea8:	mov	r6, r0
   14eac:	add	r0, r1, #1
   14eb0:	mov	r4, r1
   14eb4:	bl	14f84 <__assert_fail@plt+0x40e8>
   14eb8:	subs	r5, r0, #0
   14ebc:	beq	14edc <__assert_fail@plt+0x4040>
   14ec0:	mov	r3, #0
   14ec4:	mov	r1, r6
   14ec8:	strb	r3, [r5, r4]
   14ecc:	mov	r2, r4
   14ed0:	bl	10ca4 <memcpy@plt>
   14ed4:	mov	r0, r5
   14ed8:	pop	{r4, r5, r6, pc}
   14edc:	bl	14efc <__assert_fail@plt+0x4060>
   14ee0:	push	{r4, lr}
   14ee4:	mov	r4, r0
   14ee8:	bl	10dd0 <strlen@plt>
   14eec:	add	r1, r0, #1
   14ef0:	mov	r0, r4
   14ef4:	pop	{r4, lr}
   14ef8:	b	14e3c <__assert_fail@plt+0x3fa0>
   14efc:	ldr	r3, [pc, #44]	; 14f30 <__assert_fail@plt+0x4094>
   14f00:	push	{r4, lr}
   14f04:	mov	r2, #5
   14f08:	ldr	r1, [pc, #36]	; 14f34 <__assert_fail@plt+0x4098>
   14f0c:	mov	r0, #0
   14f10:	ldr	r4, [r3]
   14f14:	bl	10cd4 <dcgettext@plt>
   14f18:	ldr	r2, [pc, #24]	; 14f38 <__assert_fail@plt+0x409c>
   14f1c:	mov	r1, #0
   14f20:	mov	r3, r0
   14f24:	mov	r0, r4
   14f28:	bl	10d4c <error@plt>
   14f2c:	bl	10e84 <abort@plt>
   14f30:	andeq	r7, r2, r8, ror #1
   14f34:	ldrdeq	r5, [r1], -ip
   14f38:	andeq	r5, r1, r0, asr fp
   14f3c:	cmp	r1, #0
   14f40:	cmpne	r0, #0
   14f44:	moveq	r1, #1
   14f48:	moveq	r0, r1
   14f4c:	umull	r2, r3, r0, r1
   14f50:	adds	r3, r3, #0
   14f54:	movne	r3, #1
   14f58:	cmp	r2, #0
   14f5c:	blt	14f6c <__assert_fail@plt+0x40d0>
   14f60:	cmp	r3, #0
   14f64:	bne	14f6c <__assert_fail@plt+0x40d0>
   14f68:	b	10c44 <calloc@plt>
   14f6c:	push	{r4, lr}
   14f70:	bl	10ddc <__errno_location@plt>
   14f74:	mov	r3, #12
   14f78:	str	r3, [r0]
   14f7c:	mov	r0, #0
   14f80:	pop	{r4, pc}
   14f84:	cmp	r0, #0
   14f88:	moveq	r0, #1
   14f8c:	cmp	r0, #0
   14f90:	blt	14f98 <__assert_fail@plt+0x40fc>
   14f94:	b	10d70 <malloc@plt>
   14f98:	push	{r4, lr}
   14f9c:	bl	10ddc <__errno_location@plt>
   14fa0:	mov	r3, #12
   14fa4:	str	r3, [r0]
   14fa8:	mov	r0, #0
   14fac:	pop	{r4, pc}
   14fb0:	cmp	r0, #0
   14fb4:	beq	14fd8 <__assert_fail@plt+0x413c>
   14fb8:	cmp	r1, #0
   14fbc:	push	{lr}		; (str lr, [sp, #-4]!)
   14fc0:	sub	sp, sp, #12
   14fc4:	beq	14fe0 <__assert_fail@plt+0x4144>
   14fc8:	blt	14ff8 <__assert_fail@plt+0x415c>
   14fcc:	add	sp, sp, #12
   14fd0:	pop	{lr}		; (ldr lr, [sp], #4)
   14fd4:	b	10cec <realloc@plt>
   14fd8:	mov	r0, r1
   14fdc:	b	14f84 <__assert_fail@plt+0x40e8>
   14fe0:	str	r1, [sp, #4]
   14fe4:	bl	11e34 <__assert_fail@plt+0xf98>
   14fe8:	ldr	r3, [sp, #4]
   14fec:	mov	r0, r3
   14ff0:	add	sp, sp, #12
   14ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff8:	bl	10ddc <__errno_location@plt>
   14ffc:	mov	r2, #12
   15000:	mov	r3, #0
   15004:	str	r2, [r0]
   15008:	b	14fec <__assert_fail@plt+0x4150>
   1500c:	push	{r4, r5, r6, lr}
   15010:	mov	r4, r0
   15014:	bl	10d34 <__fpending@plt>
   15018:	ldr	r5, [r4]
   1501c:	and	r5, r5, #32
   15020:	mov	r6, r0
   15024:	mov	r0, r4
   15028:	bl	11d34 <__assert_fail@plt+0xe98>
   1502c:	cmp	r5, #0
   15030:	mov	r4, r0
   15034:	bne	15054 <__assert_fail@plt+0x41b8>
   15038:	cmp	r0, #0
   1503c:	beq	1504c <__assert_fail@plt+0x41b0>
   15040:	cmp	r6, #0
   15044:	beq	15070 <__assert_fail@plt+0x41d4>
   15048:	mvn	r4, #0
   1504c:	mov	r0, r4
   15050:	pop	{r4, r5, r6, pc}
   15054:	cmp	r0, #0
   15058:	bne	15048 <__assert_fail@plt+0x41ac>
   1505c:	bl	10ddc <__errno_location@plt>
   15060:	str	r4, [r0]
   15064:	mvn	r4, #0
   15068:	mov	r0, r4
   1506c:	pop	{r4, r5, r6, pc}
   15070:	bl	10ddc <__errno_location@plt>
   15074:	ldr	r4, [r0]
   15078:	subs	r4, r4, #9
   1507c:	mvnne	r4, #0
   15080:	mov	r0, r4
   15084:	pop	{r4, r5, r6, pc}
   15088:	push	{r4, lr}
   1508c:	mov	r0, #14
   15090:	bl	10e60 <nl_langinfo@plt>
   15094:	cmp	r0, #0
   15098:	beq	150b0 <__assert_fail@plt+0x4214>
   1509c:	ldrb	r2, [r0]
   150a0:	ldr	r3, [pc, #16]	; 150b8 <__assert_fail@plt+0x421c>
   150a4:	cmp	r2, #0
   150a8:	moveq	r0, r3
   150ac:	pop	{r4, pc}
   150b0:	ldr	r0, [pc]	; 150b8 <__assert_fail@plt+0x421c>
   150b4:	pop	{r4, pc}
   150b8:	strdeq	r5, [r1], -r0
   150bc:	push	{r4, r5, r6, r7, lr}
   150c0:	subs	r6, r0, #0
   150c4:	sub	sp, sp, #12
   150c8:	addeq	r6, sp, #4
   150cc:	mov	r0, r6
   150d0:	mov	r5, r2
   150d4:	mov	r7, r1
   150d8:	bl	10d40 <mbrtowc@plt>
   150dc:	cmp	r5, #0
   150e0:	cmnne	r0, #3
   150e4:	mov	r4, r0
   150e8:	bls	15104 <__assert_fail@plt+0x4268>
   150ec:	mov	r0, #0
   150f0:	bl	1515c <__assert_fail@plt+0x42c0>
   150f4:	cmp	r0, #0
   150f8:	moveq	r4, #1
   150fc:	ldrbeq	r3, [r7]
   15100:	streq	r3, [r6]
   15104:	mov	r0, r4
   15108:	add	sp, sp, #12
   1510c:	pop	{r4, r5, r6, r7, pc}
   15110:	push	{r4, r5, r6, lr}
   15114:	subs	r4, r2, #0
   15118:	mov	r6, r0
   1511c:	mov	r5, r1
   15120:	beq	1514c <__assert_fail@plt+0x42b0>
   15124:	mov	r1, r4
   15128:	mvn	r0, #0
   1512c:	bl	15250 <__assert_fail@plt+0x43b4>
   15130:	cmp	r0, r5
   15134:	bcs	1514c <__assert_fail@plt+0x42b0>
   15138:	bl	10ddc <__errno_location@plt>
   1513c:	mov	r3, #12
   15140:	str	r3, [r0]
   15144:	mov	r0, #0
   15148:	pop	{r4, r5, r6, pc}
   1514c:	mul	r1, r5, r4
   15150:	mov	r0, r6
   15154:	pop	{r4, r5, r6, lr}
   15158:	b	14fb0 <__assert_fail@plt+0x4114>
   1515c:	push	{lr}		; (str lr, [sp, #-4]!)
   15160:	sub	sp, sp, #268	; 0x10c
   15164:	add	r1, sp, #4
   15168:	ldr	r2, [pc, #60]	; 151ac <__assert_fail@plt+0x4310>
   1516c:	bl	151b8 <__assert_fail@plt+0x431c>
   15170:	cmp	r0, #0
   15174:	movne	r0, #0
   15178:	bne	151a4 <__assert_fail@plt+0x4308>
   1517c:	ldr	r1, [pc, #44]	; 151b0 <__assert_fail@plt+0x4314>
   15180:	add	r0, sp, #4
   15184:	bl	10c68 <strcmp@plt>
   15188:	cmp	r0, #0
   1518c:	beq	151a4 <__assert_fail@plt+0x4308>
   15190:	add	r0, sp, #4
   15194:	ldr	r1, [pc, #24]	; 151b4 <__assert_fail@plt+0x4318>
   15198:	bl	10c68 <strcmp@plt>
   1519c:	adds	r0, r0, #0
   151a0:	movne	r0, #1
   151a4:	add	sp, sp, #268	; 0x10c
   151a8:	pop	{pc}		; (ldr pc, [sp], #4)
   151ac:	andeq	r0, r0, r1, lsl #2
   151b0:	strdeq	r5, [r1], -r8
   151b4:	strdeq	r5, [r1], -ip
   151b8:	push	{r4, r5, r6, lr}
   151bc:	mov	r5, r1
   151c0:	mov	r1, #0
   151c4:	mov	r4, r2
   151c8:	bl	10e48 <setlocale@plt>
   151cc:	subs	r6, r0, #0
   151d0:	beq	1522c <__assert_fail@plt+0x4390>
   151d4:	bl	10dd0 <strlen@plt>
   151d8:	cmp	r4, r0
   151dc:	bhi	15214 <__assert_fail@plt+0x4378>
   151e0:	cmp	r4, #0
   151e4:	bne	151f0 <__assert_fail@plt+0x4354>
   151e8:	mov	r0, #34	; 0x22
   151ec:	pop	{r4, r5, r6, pc}
   151f0:	sub	r4, r4, #1
   151f4:	mov	r1, r6
   151f8:	mov	r2, r4
   151fc:	mov	r0, r5
   15200:	bl	10ca4 <memcpy@plt>
   15204:	mov	r3, #0
   15208:	strb	r3, [r5, r4]
   1520c:	mov	r0, #34	; 0x22
   15210:	pop	{r4, r5, r6, pc}
   15214:	add	r2, r0, #1
   15218:	mov	r1, r6
   1521c:	mov	r0, r5
   15220:	bl	10ca4 <memcpy@plt>
   15224:	mov	r0, #0
   15228:	pop	{r4, r5, r6, pc}
   1522c:	cmp	r4, #0
   15230:	beq	15240 <__assert_fail@plt+0x43a4>
   15234:	strb	r6, [r5]
   15238:	mov	r0, #22
   1523c:	pop	{r4, r5, r6, pc}
   15240:	mov	r0, #22
   15244:	pop	{r4, r5, r6, pc}
   15248:	mov	r1, #0
   1524c:	b	10e48 <setlocale@plt>
   15250:	subs	r2, r1, #1
   15254:	bxeq	lr
   15258:	bcc	15430 <__assert_fail@plt+0x4594>
   1525c:	cmp	r0, r1
   15260:	bls	15414 <__assert_fail@plt+0x4578>
   15264:	tst	r1, r2
   15268:	beq	15420 <__assert_fail@plt+0x4584>
   1526c:	clz	r3, r0
   15270:	clz	r2, r1
   15274:	sub	r3, r2, r3
   15278:	rsbs	r3, r3, #31
   1527c:	addne	r3, r3, r3, lsl #1
   15280:	mov	r2, #0
   15284:	addne	pc, pc, r3, lsl #2
   15288:	nop			; (mov r0, r0)
   1528c:	cmp	r0, r1, lsl #31
   15290:	adc	r2, r2, r2
   15294:	subcs	r0, r0, r1, lsl #31
   15298:	cmp	r0, r1, lsl #30
   1529c:	adc	r2, r2, r2
   152a0:	subcs	r0, r0, r1, lsl #30
   152a4:	cmp	r0, r1, lsl #29
   152a8:	adc	r2, r2, r2
   152ac:	subcs	r0, r0, r1, lsl #29
   152b0:	cmp	r0, r1, lsl #28
   152b4:	adc	r2, r2, r2
   152b8:	subcs	r0, r0, r1, lsl #28
   152bc:	cmp	r0, r1, lsl #27
   152c0:	adc	r2, r2, r2
   152c4:	subcs	r0, r0, r1, lsl #27
   152c8:	cmp	r0, r1, lsl #26
   152cc:	adc	r2, r2, r2
   152d0:	subcs	r0, r0, r1, lsl #26
   152d4:	cmp	r0, r1, lsl #25
   152d8:	adc	r2, r2, r2
   152dc:	subcs	r0, r0, r1, lsl #25
   152e0:	cmp	r0, r1, lsl #24
   152e4:	adc	r2, r2, r2
   152e8:	subcs	r0, r0, r1, lsl #24
   152ec:	cmp	r0, r1, lsl #23
   152f0:	adc	r2, r2, r2
   152f4:	subcs	r0, r0, r1, lsl #23
   152f8:	cmp	r0, r1, lsl #22
   152fc:	adc	r2, r2, r2
   15300:	subcs	r0, r0, r1, lsl #22
   15304:	cmp	r0, r1, lsl #21
   15308:	adc	r2, r2, r2
   1530c:	subcs	r0, r0, r1, lsl #21
   15310:	cmp	r0, r1, lsl #20
   15314:	adc	r2, r2, r2
   15318:	subcs	r0, r0, r1, lsl #20
   1531c:	cmp	r0, r1, lsl #19
   15320:	adc	r2, r2, r2
   15324:	subcs	r0, r0, r1, lsl #19
   15328:	cmp	r0, r1, lsl #18
   1532c:	adc	r2, r2, r2
   15330:	subcs	r0, r0, r1, lsl #18
   15334:	cmp	r0, r1, lsl #17
   15338:	adc	r2, r2, r2
   1533c:	subcs	r0, r0, r1, lsl #17
   15340:	cmp	r0, r1, lsl #16
   15344:	adc	r2, r2, r2
   15348:	subcs	r0, r0, r1, lsl #16
   1534c:	cmp	r0, r1, lsl #15
   15350:	adc	r2, r2, r2
   15354:	subcs	r0, r0, r1, lsl #15
   15358:	cmp	r0, r1, lsl #14
   1535c:	adc	r2, r2, r2
   15360:	subcs	r0, r0, r1, lsl #14
   15364:	cmp	r0, r1, lsl #13
   15368:	adc	r2, r2, r2
   1536c:	subcs	r0, r0, r1, lsl #13
   15370:	cmp	r0, r1, lsl #12
   15374:	adc	r2, r2, r2
   15378:	subcs	r0, r0, r1, lsl #12
   1537c:	cmp	r0, r1, lsl #11
   15380:	adc	r2, r2, r2
   15384:	subcs	r0, r0, r1, lsl #11
   15388:	cmp	r0, r1, lsl #10
   1538c:	adc	r2, r2, r2
   15390:	subcs	r0, r0, r1, lsl #10
   15394:	cmp	r0, r1, lsl #9
   15398:	adc	r2, r2, r2
   1539c:	subcs	r0, r0, r1, lsl #9
   153a0:	cmp	r0, r1, lsl #8
   153a4:	adc	r2, r2, r2
   153a8:	subcs	r0, r0, r1, lsl #8
   153ac:	cmp	r0, r1, lsl #7
   153b0:	adc	r2, r2, r2
   153b4:	subcs	r0, r0, r1, lsl #7
   153b8:	cmp	r0, r1, lsl #6
   153bc:	adc	r2, r2, r2
   153c0:	subcs	r0, r0, r1, lsl #6
   153c4:	cmp	r0, r1, lsl #5
   153c8:	adc	r2, r2, r2
   153cc:	subcs	r0, r0, r1, lsl #5
   153d0:	cmp	r0, r1, lsl #4
   153d4:	adc	r2, r2, r2
   153d8:	subcs	r0, r0, r1, lsl #4
   153dc:	cmp	r0, r1, lsl #3
   153e0:	adc	r2, r2, r2
   153e4:	subcs	r0, r0, r1, lsl #3
   153e8:	cmp	r0, r1, lsl #2
   153ec:	adc	r2, r2, r2
   153f0:	subcs	r0, r0, r1, lsl #2
   153f4:	cmp	r0, r1, lsl #1
   153f8:	adc	r2, r2, r2
   153fc:	subcs	r0, r0, r1, lsl #1
   15400:	cmp	r0, r1
   15404:	adc	r2, r2, r2
   15408:	subcs	r0, r0, r1
   1540c:	mov	r0, r2
   15410:	bx	lr
   15414:	moveq	r0, #1
   15418:	movne	r0, #0
   1541c:	bx	lr
   15420:	clz	r2, r1
   15424:	rsb	r2, r2, #31
   15428:	lsr	r0, r0, r2
   1542c:	bx	lr
   15430:	cmp	r0, #0
   15434:	mvnne	r0, #0
   15438:	b	1569c <__assert_fail@plt+0x4800>
   1543c:	cmp	r1, #0
   15440:	beq	15430 <__assert_fail@plt+0x4594>
   15444:	push	{r0, r1, lr}
   15448:	bl	15250 <__assert_fail@plt+0x43b4>
   1544c:	pop	{r1, r2, lr}
   15450:	mul	r3, r2, r0
   15454:	sub	r1, r1, r3
   15458:	bx	lr
   1545c:	cmp	r1, #0
   15460:	beq	1566c <__assert_fail@plt+0x47d0>
   15464:	eor	ip, r0, r1
   15468:	rsbmi	r1, r1, #0
   1546c:	subs	r2, r1, #1
   15470:	beq	15638 <__assert_fail@plt+0x479c>
   15474:	movs	r3, r0
   15478:	rsbmi	r3, r0, #0
   1547c:	cmp	r3, r1
   15480:	bls	15644 <__assert_fail@plt+0x47a8>
   15484:	tst	r1, r2
   15488:	beq	15654 <__assert_fail@plt+0x47b8>
   1548c:	clz	r2, r3
   15490:	clz	r0, r1
   15494:	sub	r2, r0, r2
   15498:	rsbs	r2, r2, #31
   1549c:	addne	r2, r2, r2, lsl #1
   154a0:	mov	r0, #0
   154a4:	addne	pc, pc, r2, lsl #2
   154a8:	nop			; (mov r0, r0)
   154ac:	cmp	r3, r1, lsl #31
   154b0:	adc	r0, r0, r0
   154b4:	subcs	r3, r3, r1, lsl #31
   154b8:	cmp	r3, r1, lsl #30
   154bc:	adc	r0, r0, r0
   154c0:	subcs	r3, r3, r1, lsl #30
   154c4:	cmp	r3, r1, lsl #29
   154c8:	adc	r0, r0, r0
   154cc:	subcs	r3, r3, r1, lsl #29
   154d0:	cmp	r3, r1, lsl #28
   154d4:	adc	r0, r0, r0
   154d8:	subcs	r3, r3, r1, lsl #28
   154dc:	cmp	r3, r1, lsl #27
   154e0:	adc	r0, r0, r0
   154e4:	subcs	r3, r3, r1, lsl #27
   154e8:	cmp	r3, r1, lsl #26
   154ec:	adc	r0, r0, r0
   154f0:	subcs	r3, r3, r1, lsl #26
   154f4:	cmp	r3, r1, lsl #25
   154f8:	adc	r0, r0, r0
   154fc:	subcs	r3, r3, r1, lsl #25
   15500:	cmp	r3, r1, lsl #24
   15504:	adc	r0, r0, r0
   15508:	subcs	r3, r3, r1, lsl #24
   1550c:	cmp	r3, r1, lsl #23
   15510:	adc	r0, r0, r0
   15514:	subcs	r3, r3, r1, lsl #23
   15518:	cmp	r3, r1, lsl #22
   1551c:	adc	r0, r0, r0
   15520:	subcs	r3, r3, r1, lsl #22
   15524:	cmp	r3, r1, lsl #21
   15528:	adc	r0, r0, r0
   1552c:	subcs	r3, r3, r1, lsl #21
   15530:	cmp	r3, r1, lsl #20
   15534:	adc	r0, r0, r0
   15538:	subcs	r3, r3, r1, lsl #20
   1553c:	cmp	r3, r1, lsl #19
   15540:	adc	r0, r0, r0
   15544:	subcs	r3, r3, r1, lsl #19
   15548:	cmp	r3, r1, lsl #18
   1554c:	adc	r0, r0, r0
   15550:	subcs	r3, r3, r1, lsl #18
   15554:	cmp	r3, r1, lsl #17
   15558:	adc	r0, r0, r0
   1555c:	subcs	r3, r3, r1, lsl #17
   15560:	cmp	r3, r1, lsl #16
   15564:	adc	r0, r0, r0
   15568:	subcs	r3, r3, r1, lsl #16
   1556c:	cmp	r3, r1, lsl #15
   15570:	adc	r0, r0, r0
   15574:	subcs	r3, r3, r1, lsl #15
   15578:	cmp	r3, r1, lsl #14
   1557c:	adc	r0, r0, r0
   15580:	subcs	r3, r3, r1, lsl #14
   15584:	cmp	r3, r1, lsl #13
   15588:	adc	r0, r0, r0
   1558c:	subcs	r3, r3, r1, lsl #13
   15590:	cmp	r3, r1, lsl #12
   15594:	adc	r0, r0, r0
   15598:	subcs	r3, r3, r1, lsl #12
   1559c:	cmp	r3, r1, lsl #11
   155a0:	adc	r0, r0, r0
   155a4:	subcs	r3, r3, r1, lsl #11
   155a8:	cmp	r3, r1, lsl #10
   155ac:	adc	r0, r0, r0
   155b0:	subcs	r3, r3, r1, lsl #10
   155b4:	cmp	r3, r1, lsl #9
   155b8:	adc	r0, r0, r0
   155bc:	subcs	r3, r3, r1, lsl #9
   155c0:	cmp	r3, r1, lsl #8
   155c4:	adc	r0, r0, r0
   155c8:	subcs	r3, r3, r1, lsl #8
   155cc:	cmp	r3, r1, lsl #7
   155d0:	adc	r0, r0, r0
   155d4:	subcs	r3, r3, r1, lsl #7
   155d8:	cmp	r3, r1, lsl #6
   155dc:	adc	r0, r0, r0
   155e0:	subcs	r3, r3, r1, lsl #6
   155e4:	cmp	r3, r1, lsl #5
   155e8:	adc	r0, r0, r0
   155ec:	subcs	r3, r3, r1, lsl #5
   155f0:	cmp	r3, r1, lsl #4
   155f4:	adc	r0, r0, r0
   155f8:	subcs	r3, r3, r1, lsl #4
   155fc:	cmp	r3, r1, lsl #3
   15600:	adc	r0, r0, r0
   15604:	subcs	r3, r3, r1, lsl #3
   15608:	cmp	r3, r1, lsl #2
   1560c:	adc	r0, r0, r0
   15610:	subcs	r3, r3, r1, lsl #2
   15614:	cmp	r3, r1, lsl #1
   15618:	adc	r0, r0, r0
   1561c:	subcs	r3, r3, r1, lsl #1
   15620:	cmp	r3, r1
   15624:	adc	r0, r0, r0
   15628:	subcs	r3, r3, r1
   1562c:	cmp	ip, #0
   15630:	rsbmi	r0, r0, #0
   15634:	bx	lr
   15638:	teq	ip, r0
   1563c:	rsbmi	r0, r0, #0
   15640:	bx	lr
   15644:	movcc	r0, #0
   15648:	asreq	r0, ip, #31
   1564c:	orreq	r0, r0, #1
   15650:	bx	lr
   15654:	clz	r2, r1
   15658:	rsb	r2, r2, #31
   1565c:	cmp	ip, #0
   15660:	lsr	r0, r3, r2
   15664:	rsbmi	r0, r0, #0
   15668:	bx	lr
   1566c:	cmp	r0, #0
   15670:	mvngt	r0, #-2147483648	; 0x80000000
   15674:	movlt	r0, #-2147483648	; 0x80000000
   15678:	b	1569c <__assert_fail@plt+0x4800>
   1567c:	cmp	r1, #0
   15680:	beq	1566c <__assert_fail@plt+0x47d0>
   15684:	push	{r0, r1, lr}
   15688:	bl	15464 <__assert_fail@plt+0x45c8>
   1568c:	pop	{r1, r2, lr}
   15690:	mul	r3, r2, r0
   15694:	sub	r1, r1, r3
   15698:	bx	lr
   1569c:	push	{r1, lr}
   156a0:	mov	r0, #8
   156a4:	bl	10c5c <raise@plt>
   156a8:	pop	{r1, pc}
   156ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156b0:	mov	r7, r0
   156b4:	ldr	r6, [pc, #72]	; 15704 <__assert_fail@plt+0x4868>
   156b8:	ldr	r5, [pc, #72]	; 15708 <__assert_fail@plt+0x486c>
   156bc:	add	r6, pc, r6
   156c0:	add	r5, pc, r5
   156c4:	sub	r6, r6, r5
   156c8:	mov	r8, r1
   156cc:	mov	r9, r2
   156d0:	bl	10c24 <calloc@plt-0x20>
   156d4:	asrs	r6, r6, #2
   156d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   156dc:	mov	r4, #0
   156e0:	add	r4, r4, #1
   156e4:	ldr	r3, [r5], #4
   156e8:	mov	r2, r9
   156ec:	mov	r1, r8
   156f0:	mov	r0, r7
   156f4:	blx	r3
   156f8:	cmp	r6, r4
   156fc:	bne	156e0 <__assert_fail@plt+0x4844>
   15700:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15704:	andeq	r1, r1, ip, asr #16
   15708:	andeq	r1, r1, r4, asr #16
   1570c:	bx	lr
   15710:	ldr	r3, [pc, #12]	; 15724 <__assert_fail@plt+0x4888>
   15714:	mov	r1, #0
   15718:	add	r3, pc, r3
   1571c:	ldr	r2, [r3]
   15720:	b	10de8 <__cxa_atexit@plt>
   15724:	andeq	r1, r1, r0, asr #19

Disassembly of section .fini:

00015728 <.fini>:
   15728:	push	{r3, lr}
   1572c:	pop	{r3, pc}
