
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010c98 <.init>:
   10c98:	push	{r3, lr}
   10c9c:	bl	11240 <_start@@Base+0x3c>
   10ca0:	pop	{r3, pc}

Disassembly of section .plt:

00010ca4 <strcmp@plt-0x14>:
   10ca4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca8:	ldr	lr, [pc, #4]	; 10cb4 <strcmp@plt-0x4>
   10cac:	add	lr, pc, lr
   10cb0:	ldr	pc, [lr, #8]!
   10cb4:	andeq	r4, r1, ip, asr #6

00010cb8 <strcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #844]!	; 0x34c

00010cc4 <printf@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #836]!	; 0x344

00010cd0 <fopen@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #828]!	; 0x33c

00010cdc <free@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #820]!	; 0x334

00010ce8 <memcpy@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #812]!	; 0x32c

00010cf4 <ftell@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #804]!	; 0x324

00010d00 <rewind@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #796]!	; 0x31c

00010d0c <fwrite@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #788]!	; 0x314

00010d18 <fread@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #780]!	; 0x30c

00010d24 <puts@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #772]!	; 0x304

00010d30 <malloc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #764]!	; 0x2fc

00010d3c <__libc_start_main@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #756]!	; 0x2f4

00010d48 <__gmon_start__@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #748]!	; 0x2ec

00010d54 <exit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d60 <fprintf@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #732]!	; 0x2dc

00010d6c <posix_memalign@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #724]!	; 0x2d4

00010d78 <strncpy@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #716]!	; 0x2cc

00010d84 <fclose@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d90 <fputc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #700]!	; 0x2bc

00010d9c <fseek@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #692]!	; 0x2b4

00010da8 <abort@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #684]!	; 0x2ac

00010db4 <__assert_fail@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #676]!	; 0x2a4

Disassembly of section .text:

00010dc0 <main@@Base>:
   10dc0:	sub	r3, r0, #1
   10dc4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10dc8:	cmp	r3, #1
   10dcc:	strd	r6, [sp, #8]
   10dd0:	strd	r8, [sp, #16]
   10dd4:	strd	sl, [sp, #24]
   10dd8:	str	lr, [sp, #32]
   10ddc:	sub	sp, sp, #44	; 0x2c
   10de0:	bhi	111dc <main@@Base+0x41c>
   10de4:	cmp	r0, #2
   10de8:	movw	r3, #20592	; 0x5070
   10dec:	movt	r3, #2
   10df0:	ldreq	r2, [r1, #4]
   10df4:	movw	r1, #17292	; 0x438c
   10df8:	movt	r1, #1
   10dfc:	streq	r2, [r3]
   10e00:	ldr	r0, [r3]
   10e04:	bl	10cd0 <fopen@plt>
   10e08:	subs	r7, r0, #0
   10e0c:	beq	11138 <main@@Base+0x378>
   10e10:	mov	r2, #2
   10e14:	mov	r1, #0
   10e18:	bl	10d9c <fseek@plt>
   10e1c:	mov	r0, r7
   10e20:	bl	10cf4 <ftell@plt>
   10e24:	mov	r4, r0
   10e28:	mov	r0, r7
   10e2c:	cmp	r4, #1024	; 0x400
   10e30:	bhi	110d4 <main@@Base+0x314>
   10e34:	bl	10d00 <rewind@plt>
   10e38:	cmp	r4, #0
   10e3c:	movne	r0, r4
   10e40:	moveq	r0, #1
   10e44:	bl	10d30 <malloc@plt>
   10e48:	subs	r6, r0, #0
   10e4c:	beq	11190 <main@@Base+0x3d0>
   10e50:	mov	r5, #0
   10e54:	b	10e5c <main@@Base+0x9c>
   10e58:	add	r5, r5, r0
   10e5c:	mov	r3, r7
   10e60:	sub	r2, r4, r5
   10e64:	mov	r1, #1
   10e68:	add	r0, r6, r5
   10e6c:	bl	10d18 <fread@plt>
   10e70:	cmp	r0, #0
   10e74:	bne	10e58 <main@@Base+0x98>
   10e78:	cmp	r4, r5
   10e7c:	mov	r8, r0
   10e80:	mov	r0, r7
   10e84:	bne	11080 <main@@Base+0x2c0>
   10e88:	bl	10d84 <fclose@plt>
   10e8c:	mov	r3, #0
   10e90:	add	r2, r4, #255	; 0xff
   10e94:	add	r9, sp, #20
   10e98:	bic	r2, r2, #255	; 0xff
   10e9c:	mov	r0, r9
   10ea0:	mov	r1, #256	; 0x100
   10ea4:	str	r3, [sp, #20]
   10ea8:	bl	10d6c <posix_memalign@plt>
   10eac:	cmp	r0, #0
   10eb0:	ldreq	r5, [sp, #20]
   10eb4:	beq	10ed8 <main@@Base+0x118>
   10eb8:	ldr	r5, [sp, #20]
   10ebc:	cmp	r5, #0
   10ec0:	beq	10ed8 <main@@Base+0x118>
   10ec4:	mov	r0, r5
   10ec8:	bl	10cdc <free@plt>
   10ecc:	mov	r3, #0
   10ed0:	mov	r5, r3
   10ed4:	str	r3, [sp, #20]
   10ed8:	mov	r2, r4
   10edc:	mov	r1, r6
   10ee0:	mov	r0, r5
   10ee4:	movw	r8, #20600	; 0x5078
   10ee8:	movt	r8, #2
   10eec:	bl	10ce8 <memcpy@plt>
   10ef0:	mov	r0, r6
   10ef4:	bl	10cdc <free@plt>
   10ef8:	ldr	r7, [r8]
   10efc:	movw	r2, #17296	; 0x4390
   10f00:	movt	r2, #1
   10f04:	movw	r1, #17320	; 0x43a8
   10f08:	movt	r1, #1
   10f0c:	mov	r0, r7
   10f10:	bl	10d60 <fprintf@plt>
   10f14:	cmp	r4, #0
   10f18:	beq	10ff0 <main@@Base+0x230>
   10f1c:	movw	r3, #17344	; 0x43c0
   10f20:	movt	r3, #1
   10f24:	sub	sl, r5, #1
   10f28:	mov	fp, #0
   10f2c:	str	r3, [sp, #4]
   10f30:	movw	r3, #17328	; 0x43b0
   10f34:	movt	r3, #1
   10f38:	str	r3, [sp, #8]
   10f3c:	movw	r3, #17352	; 0x43c8
   10f40:	movt	r3, #1
   10f44:	str	r3, [sp, #12]
   10f48:	ands	r6, fp, #15
   10f4c:	bne	110bc <main@@Base+0x2fc>
   10f50:	cmp	fp, #0
   10f54:	beq	10f68 <main@@Base+0x1a8>
   10f58:	mov	r2, r9
   10f5c:	mov	r0, r7
   10f60:	ldr	r1, [sp, #8]
   10f64:	bl	10d60 <fprintf@plt>
   10f68:	mov	r2, fp
   10f6c:	mov	r0, r7
   10f70:	ldr	r1, [sp, #4]
   10f74:	bl	10d60 <fprintf@plt>
   10f78:	ldrb	r2, [sl, #1]!
   10f7c:	mov	r0, r7
   10f80:	ldr	r1, [sp, #12]
   10f84:	bl	10d60 <fprintf@plt>
   10f88:	ldrb	r3, [sl]
   10f8c:	sub	r2, r3, #32
   10f90:	cmp	r2, #94	; 0x5e
   10f94:	bls	11094 <main@@Base+0x2d4>
   10f98:	add	r3, sp, #40	; 0x28
   10f9c:	add	fp, fp, #1
   10fa0:	add	r6, r3, r6
   10fa4:	mov	r2, #46	; 0x2e
   10fa8:	mov	r3, #0
   10fac:	cmp	fp, r4
   10fb0:	strb	r2, [r6, #-20]	; 0xffffffec
   10fb4:	strb	r3, [r6, #-19]	; 0xffffffed
   10fb8:	bne	10f48 <main@@Base+0x188>
   10fbc:	tst	r4, #15
   10fc0:	beq	10ff0 <main@@Base+0x230>
   10fc4:	movw	sl, #17360	; 0x43d0
   10fc8:	movt	sl, #1
   10fcc:	mov	r6, r4
   10fd0:	add	r6, r6, #1
   10fd4:	mov	r3, r7
   10fd8:	mov	r2, #3
   10fdc:	mov	r1, #1
   10fe0:	mov	r0, sl
   10fe4:	bl	10d0c <fwrite@plt>
   10fe8:	tst	r6, #15
   10fec:	bne	10fd0 <main@@Base+0x210>
   10ff0:	mov	r2, r9
   10ff4:	mov	r0, r7
   10ff8:	movw	r1, #17328	; 0x43b0
   10ffc:	movt	r1, #1
   11000:	bl	10d60 <fprintf@plt>
   11004:	movw	r3, #5624	; 0x15f8
   11008:	movt	r3, #1
   1100c:	movw	r2, #17336	; 0x43b8
   11010:	movt	r2, #1
   11014:	mov	r1, r4
   11018:	mov	r0, r5
   1101c:	bl	1320c <flatcc_verify_table_as_root@@Base>
   11020:	cmp	r0, #0
   11024:	bne	1119c <main@@Base+0x3dc>
   11028:	mov	r1, r4
   1102c:	movw	r3, #5624	; 0x15f8
   11030:	movt	r3, #1
   11034:	movw	r2, #17336	; 0x43b8
   11038:	movt	r2, #1
   1103c:	mov	r0, r5
   11040:	bl	1320c <flatcc_verify_table_as_root@@Base>
   11044:	cmp	r0, #0
   11048:	bne	111bc <main@@Base+0x3fc>
   1104c:	mov	r0, r5
   11050:	bl	11d38 <verify_monster@@Base>
   11054:	mov	r4, r0
   11058:	mov	r0, r5
   1105c:	bl	10cdc <free@plt>
   11060:	mov	r0, r4
   11064:	add	sp, sp, #44	; 0x2c
   11068:	ldrd	r4, [sp]
   1106c:	ldrd	r6, [sp, #8]
   11070:	ldrd	r8, [sp, #16]
   11074:	ldrd	sl, [sp, #24]
   11078:	add	sp, sp, #32
   1107c:	pop	{pc}		; (ldr pc, [sp], #4)
   11080:	bl	10d84 <fclose@plt>
   11084:	mov	r0, r6
   11088:	mov	r6, r8
   1108c:	bl	10cdc <free@plt>
   11090:	b	10e8c <main@@Base+0xcc>
   11094:	add	r2, sp, #40	; 0x28
   11098:	add	fp, fp, #1
   1109c:	add	r6, r2, r6
   110a0:	mov	r2, #0
   110a4:	cmp	fp, r4
   110a8:	strb	r3, [r6, #-20]	; 0xffffffec
   110ac:	strb	r2, [r6, #-19]	; 0xffffffed
   110b0:	beq	10fbc <main@@Base+0x1fc>
   110b4:	ands	r6, fp, #15
   110b8:	beq	10f50 <main@@Base+0x190>
   110bc:	tst	fp, #7
   110c0:	bne	10f78 <main@@Base+0x1b8>
   110c4:	mov	r1, r7
   110c8:	mov	r0, #32
   110cc:	bl	10d90 <fputc@plt>
   110d0:	b	10f78 <main@@Base+0x1b8>
   110d4:	bl	10d84 <fclose@plt>
   110d8:	mov	r6, #0
   110dc:	add	r9, sp, #20
   110e0:	add	r2, r4, #255	; 0xff
   110e4:	mov	r1, #256	; 0x100
   110e8:	bic	r2, r2, #255	; 0xff
   110ec:	mov	r0, r9
   110f0:	str	r6, [sp, #20]
   110f4:	bl	10d6c <posix_memalign@plt>
   110f8:	subs	r1, r0, #0
   110fc:	bne	10eb8 <main@@Base+0xf8>
   11100:	ldr	r5, [sp, #20]
   11104:	mov	r2, r4
   11108:	movw	r8, #20600	; 0x5078
   1110c:	movt	r8, #2
   11110:	mov	r0, r5
   11114:	bl	10ce8 <memcpy@plt>
   11118:	ldr	r7, [r8]
   1111c:	movw	r2, #17296	; 0x4390
   11120:	movt	r2, #1
   11124:	movw	r1, #17320	; 0x43a8
   11128:	movt	r1, #1
   1112c:	mov	r0, r7
   11130:	bl	10d60 <fprintf@plt>
   11134:	b	10f1c <main@@Base+0x15c>
   11138:	add	r9, sp, #20
   1113c:	mov	r2, r7
   11140:	str	r7, [sp, #20]
   11144:	mov	r0, r9
   11148:	mov	r1, #256	; 0x100
   1114c:	bl	10d6c <posix_memalign@plt>
   11150:	subs	r4, r0, #0
   11154:	beq	11164 <main@@Base+0x3a4>
   11158:	mov	r6, r7
   1115c:	mov	r4, r7
   11160:	b	10eb8 <main@@Base+0xf8>
   11164:	movw	r8, #20600	; 0x5078
   11168:	movt	r8, #2
   1116c:	ldr	r5, [sp, #20]
   11170:	movw	r2, #17296	; 0x4390
   11174:	movt	r2, #1
   11178:	ldr	r7, [r8]
   1117c:	movw	r1, #17320	; 0x43a8
   11180:	movt	r1, #1
   11184:	mov	r0, r7
   11188:	bl	10d60 <fprintf@plt>
   1118c:	b	10ff0 <main@@Base+0x230>
   11190:	mov	r0, r7
   11194:	bl	10d84 <fclose@plt>
   11198:	b	10e8c <main@@Base+0xcc>
   1119c:	movw	r0, #17364	; 0x43d4
   111a0:	movt	r0, #1
   111a4:	ldr	r3, [r8]
   111a8:	mov	r2, #38	; 0x26
   111ac:	mov	r1, #1
   111b0:	mvn	r4, #0
   111b4:	bl	10d0c <fwrite@plt>
   111b8:	b	11058 <main@@Base+0x298>
   111bc:	movw	r0, #17404	; 0x43fc
   111c0:	movt	r0, #1
   111c4:	ldr	r3, [r8]
   111c8:	mov	r2, #62	; 0x3e
   111cc:	mov	r1, #1
   111d0:	mvn	r4, #0
   111d4:	bl	10d0c <fwrite@plt>
   111d8:	b	11058 <main@@Base+0x298>
   111dc:	movw	r3, #20600	; 0x5078
   111e0:	movt	r3, #2
   111e4:	movw	r0, #17228	; 0x434c
   111e8:	movt	r0, #1
   111ec:	ldr	r3, [r3]
   111f0:	mov	r2, #63	; 0x3f
   111f4:	mov	r1, #1
   111f8:	bl	10d0c <fwrite@plt>
   111fc:	mov	r0, #1
   11200:	bl	10d54 <exit@plt>

00011204 <_start@@Base>:
   11204:	mov	fp, #0
   11208:	mov	lr, #0
   1120c:	pop	{r1}		; (ldr r1, [sp], #4)
   11210:	mov	r2, sp
   11214:	push	{r2}		; (str r2, [sp, #-4]!)
   11218:	push	{r0}		; (str r0, [sp, #-4]!)
   1121c:	ldr	ip, [pc, #16]	; 11234 <_start@@Base+0x30>
   11220:	push	{ip}		; (str ip, [sp, #-4]!)
   11224:	ldr	r0, [pc, #12]	; 11238 <_start@@Base+0x34>
   11228:	ldr	r3, [pc, #12]	; 1123c <_start@@Base+0x38>
   1122c:	bl	10d3c <__libc_start_main@plt>
   11230:	bl	10da8 <abort@plt>
   11234:	andeq	r3, r1, r0, lsr #26
   11238:	andeq	r0, r1, r0, asr #27
   1123c:	andeq	r3, r1, r0, asr #25
   11240:	ldr	r3, [pc, #20]	; 1125c <_start@@Base+0x58>
   11244:	ldr	r2, [pc, #20]	; 11260 <_start@@Base+0x5c>
   11248:	add	r3, pc, r3
   1124c:	ldr	r2, [r3, r2]
   11250:	cmp	r2, #0
   11254:	bxeq	lr
   11258:	b	10d48 <__gmon_start__@plt>
   1125c:			; <UNDEFINED> instruction: 0x00013db0
   11260:	andeq	r0, r0, r4, rrx
   11264:	ldr	r0, [pc, #24]	; 11284 <_start@@Base+0x80>
   11268:	ldr	r3, [pc, #24]	; 11288 <_start@@Base+0x84>
   1126c:	cmp	r3, r0
   11270:	bxeq	lr
   11274:	ldr	r3, [pc, #16]	; 1128c <_start@@Base+0x88>
   11278:	cmp	r3, #0
   1127c:	bxeq	lr
   11280:	bx	r3
   11284:	andeq	r5, r2, r4, ror r0
   11288:	andeq	r5, r2, r4, ror r0
   1128c:	andeq	r0, r0, r0
   11290:	ldr	r0, [pc, #36]	; 112bc <_start@@Base+0xb8>
   11294:	ldr	r1, [pc, #36]	; 112c0 <_start@@Base+0xbc>
   11298:	sub	r1, r1, r0
   1129c:	asr	r1, r1, #2
   112a0:	add	r1, r1, r1, lsr #31
   112a4:	asrs	r1, r1, #1
   112a8:	bxeq	lr
   112ac:	ldr	r3, [pc, #16]	; 112c4 <_start@@Base+0xc0>
   112b0:	cmp	r3, #0
   112b4:	bxeq	lr
   112b8:	bx	r3
   112bc:	andeq	r5, r2, r4, ror r0
   112c0:	andeq	r5, r2, r4, ror r0
   112c4:	andeq	r0, r0, r0
   112c8:	push	{r4, lr}
   112cc:	ldr	r4, [pc, #24]	; 112ec <_start@@Base+0xe8>
   112d0:	ldrb	r3, [r4]
   112d4:	cmp	r3, #0
   112d8:	popne	{r4, pc}
   112dc:	bl	11264 <_start@@Base+0x60>
   112e0:	mov	r3, #1
   112e4:	strb	r3, [r4]
   112e8:	pop	{r4, pc}
   112ec:	andeq	r5, r2, ip, ror r0
   112f0:	b	11290 <_start@@Base+0x8c>
   112f4:	andeq	r0, r0, r0
   112f8:	mov	r0, #0
   112fc:	bx	lr
   11300:	mov	r3, #4
   11304:	mov	r1, #0
   11308:	mov	r2, r3
   1130c:	b	12500 <flatcc_verify_field@@Base>
   11310:	movw	r3, #15664	; 0x3d30
   11314:	movt	r3, #1
   11318:	str	r4, [sp, #-8]!
   1131c:	movw	r1, #15708	; 0x3d5c
   11320:	movt	r1, #1
   11324:	str	lr, [sp, #4]
   11328:	movw	r0, #15808	; 0x3dc0
   1132c:	movt	r0, #1
   11330:	movw	r2, #699	; 0x2bb
   11334:	bl	10db4 <__assert_fail@plt>
   11338:	mov	r3, #8
   1133c:	mov	r1, #0
   11340:	str	r4, [sp, #-8]!
   11344:	mov	r2, r3
   11348:	mov	r4, r0
   1134c:	str	lr, [sp, #4]
   11350:	bl	12500 <flatcc_verify_field@@Base>
   11354:	cmp	r0, #0
   11358:	beq	11368 <_start@@Base+0x164>
   1135c:	ldr	r4, [sp]
   11360:	add	sp, sp, #4
   11364:	pop	{pc}		; (ldr pc, [sp], #4)
   11368:	mov	r3, #4
   1136c:	mov	r0, r4
   11370:	ldr	r4, [sp]
   11374:	mov	r2, r3
   11378:	mov	r1, #1
   1137c:	ldr	lr, [sp, #4]
   11380:	add	sp, sp, #8
   11384:	b	12500 <flatcc_verify_field@@Base>
   11388:	mov	r3, #1
   1138c:	mov	r1, #0
   11390:	str	r4, [sp, #-8]!
   11394:	mov	r2, r3
   11398:	mov	r4, r0
   1139c:	str	lr, [sp, #4]
   113a0:	bl	12500 <flatcc_verify_field@@Base>
   113a4:	cmp	r0, #0
   113a8:	beq	113b8 <_start@@Base+0x1b4>
   113ac:	ldr	r4, [sp]
   113b0:	add	sp, sp, #4
   113b4:	pop	{pc}		; (ldr pc, [sp], #4)
   113b8:	mov	r3, #1
   113bc:	mov	r0, r4
   113c0:	mov	r2, r3
   113c4:	mov	r1, r3
   113c8:	bl	12500 <flatcc_verify_field@@Base>
   113cc:	cmp	r0, #0
   113d0:	bne	113ac <_start@@Base+0x1a8>
   113d4:	mov	r3, #1
   113d8:	mov	r1, #2
   113dc:	mov	r2, r3
   113e0:	mov	r0, r4
   113e4:	bl	12500 <flatcc_verify_field@@Base>
   113e8:	cmp	r0, #0
   113ec:	bne	113ac <_start@@Base+0x1a8>
   113f0:	mov	r3, #1
   113f4:	mov	r0, r4
   113f8:	ldr	r4, [sp]
   113fc:	mov	r2, r3
   11400:	mov	r1, #3
   11404:	ldr	lr, [sp, #4]
   11408:	add	sp, sp, #8
   1140c:	b	12500 <flatcc_verify_field@@Base>
   11410:	mov	r2, #0
   11414:	str	r4, [sp, #-8]!
   11418:	mov	r4, r0
   1141c:	mov	r1, r2
   11420:	str	lr, [sp, #4]
   11424:	bl	1256c <flatcc_verify_string_field@@Base>
   11428:	cmp	r0, #0
   1142c:	beq	1143c <_start@@Base+0x238>
   11430:	ldr	r4, [sp]
   11434:	add	sp, sp, #4
   11438:	pop	{pc}		; (ldr pc, [sp], #4)
   1143c:	mov	r3, #8
   11440:	mov	r1, #1
   11444:	mov	r2, r3
   11448:	mov	r0, r4
   1144c:	bl	12500 <flatcc_verify_field@@Base>
   11450:	cmp	r0, #0
   11454:	bne	11430 <_start@@Base+0x22c>
   11458:	mov	r3, #2
   1145c:	mov	r0, r4
   11460:	ldr	r4, [sp]
   11464:	mov	r2, r3
   11468:	mov	r1, r3
   1146c:	ldr	lr, [sp, #4]
   11470:	add	sp, sp, #8
   11474:	b	12500 <flatcc_verify_field@@Base>
   11478:	mov	r2, #0
   1147c:	str	r4, [sp, #-8]!
   11480:	mov	r4, r0
   11484:	mov	r1, r2
   11488:	str	lr, [sp, #4]
   1148c:	bl	1256c <flatcc_verify_string_field@@Base>
   11490:	cmp	r0, #0
   11494:	beq	114a4 <_start@@Base+0x2a0>
   11498:	ldr	r4, [sp]
   1149c:	add	sp, sp, #4
   114a0:	pop	{pc}		; (ldr pc, [sp], #4)
   114a4:	mov	r3, #4
   114a8:	mov	r1, #1
   114ac:	mov	r2, r3
   114b0:	mov	r0, r4
   114b4:	bl	12500 <flatcc_verify_field@@Base>
   114b8:	cmp	r0, #0
   114bc:	bne	11498 <_start@@Base+0x294>
   114c0:	mov	r2, r0
   114c4:	mov	r1, #2
   114c8:	mov	r0, r4
   114cc:	bl	1256c <flatcc_verify_string_field@@Base>
   114d0:	cmp	r0, #0
   114d4:	bne	11498 <_start@@Base+0x294>
   114d8:	mov	r3, #8
   114dc:	mov	r1, #3
   114e0:	mov	r2, r3
   114e4:	mov	r0, r4
   114e8:	bl	12500 <flatcc_verify_field@@Base>
   114ec:	cmp	r0, #0
   114f0:	bne	11498 <_start@@Base+0x294>
   114f4:	mov	r2, r0
   114f8:	mov	r1, #4
   114fc:	mov	r0, r4
   11500:	bl	1256c <flatcc_verify_string_field@@Base>
   11504:	cmp	r0, #0
   11508:	bne	11498 <_start@@Base+0x294>
   1150c:	mov	r3, #8
   11510:	mov	r1, #5
   11514:	mov	r2, r3
   11518:	mov	r0, r4
   1151c:	bl	12500 <flatcc_verify_field@@Base>
   11520:	cmp	r0, #0
   11524:	bne	11498 <_start@@Base+0x294>
   11528:	mov	r3, #4
   1152c:	mov	r1, #6
   11530:	mov	r2, r3
   11534:	mov	r0, r4
   11538:	bl	12500 <flatcc_verify_field@@Base>
   1153c:	cmp	r0, #0
   11540:	bne	11498 <_start@@Base+0x294>
   11544:	mov	r3, #8
   11548:	mov	r1, #7
   1154c:	mov	r2, r3
   11550:	mov	r0, r4
   11554:	bl	12500 <flatcc_verify_field@@Base>
   11558:	cmp	r0, #0
   1155c:	bne	11498 <_start@@Base+0x294>
   11560:	mov	r3, #4
   11564:	mov	r0, r4
   11568:	ldr	r4, [sp]
   1156c:	mov	r2, r3
   11570:	mov	r1, #8
   11574:	ldr	lr, [sp, #4]
   11578:	add	sp, sp, #8
   1157c:	b	12500 <flatcc_verify_field@@Base>
   11580:	mov	r2, #0
   11584:	movw	r3, #5240	; 0x1478
   11588:	movt	r3, #1
   1158c:	mov	r1, r2
   11590:	str	r4, [sp, #-8]!
   11594:	mov	r4, r0
   11598:	str	lr, [sp, #4]
   1159c:	bl	12934 <flatcc_verify_table_field@@Base>
   115a0:	cmp	r0, #0
   115a4:	beq	115b4 <_start@@Base+0x3b0>
   115a8:	ldr	r4, [sp]
   115ac:	add	sp, sp, #4
   115b0:	pop	{pc}		; (ldr pc, [sp], #4)
   115b4:	mov	r2, r0
   115b8:	movw	r3, #7400	; 0x1ce8
   115bc:	movt	r3, #1
   115c0:	mov	r1, #1
   115c4:	mov	r0, r4
   115c8:	bl	12934 <flatcc_verify_table_field@@Base>
   115cc:	cmp	r0, #0
   115d0:	bne	115a8 <_start@@Base+0x3a4>
   115d4:	mov	r2, r0
   115d8:	movw	r3, #4920	; 0x1338
   115dc:	movt	r3, #1
   115e0:	mov	r0, r4
   115e4:	ldr	r4, [sp]
   115e8:	mov	r1, #2
   115ec:	ldr	lr, [sp, #4]
   115f0:	add	sp, sp, #8
   115f4:	b	12934 <flatcc_verify_table_field@@Base>
   115f8:	mov	r3, #16
   115fc:	mov	r2, #32
   11600:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11604:	mov	r1, #0
   11608:	strd	r6, [sp, #8]
   1160c:	mov	r4, r0
   11610:	str	r8, [sp, #16]
   11614:	str	lr, [sp, #20]
   11618:	sub	sp, sp, #8
   1161c:	bl	12500 <flatcc_verify_field@@Base>
   11620:	cmp	r0, #0
   11624:	beq	11640 <_start@@Base+0x43c>
   11628:	add	sp, sp, #8
   1162c:	ldrd	r4, [sp]
   11630:	ldrd	r6, [sp, #8]
   11634:	ldr	r8, [sp, #16]
   11638:	add	sp, sp, #20
   1163c:	pop	{pc}		; (ldr pc, [sp], #4)
   11640:	mov	r3, #2
   11644:	mov	r0, r4
   11648:	mov	r2, r3
   1164c:	mov	r1, r3
   11650:	bl	12500 <flatcc_verify_field@@Base>
   11654:	cmp	r0, #0
   11658:	bne	11628 <_start@@Base+0x424>
   1165c:	mov	r3, #2
   11660:	mov	r1, #1
   11664:	mov	r2, r3
   11668:	mov	r0, r4
   1166c:	bl	12500 <flatcc_verify_field@@Base>
   11670:	cmp	r0, #0
   11674:	bne	11628 <_start@@Base+0x424>
   11678:	mov	r2, #1
   1167c:	mov	r1, #3
   11680:	mov	r0, r4
   11684:	bl	1256c <flatcc_verify_string_field@@Base>
   11688:	cmp	r0, #0
   1168c:	bne	11628 <_start@@Base+0x424>
   11690:	mov	r3, #1
   11694:	mov	r1, #6
   11698:	mov	r2, r3
   1169c:	mov	r0, r4
   116a0:	bl	12500 <flatcc_verify_field@@Base>
   116a4:	cmp	r0, #0
   116a8:	bne	11628 <_start@@Base+0x424>
   116ac:	mov	r5, #1
   116b0:	mvn	r6, #0
   116b4:	mov	r2, r0
   116b8:	mov	r3, r5
   116bc:	mov	r1, #5
   116c0:	mov	r0, r4
   116c4:	stm	sp, {r5, r6}
   116c8:	bl	1264c <flatcc_verify_vector_field@@Base>
   116cc:	cmp	r0, #0
   116d0:	bne	11628 <_start@@Base+0x424>
   116d4:	mov	r2, r0
   116d8:	movw	r3, #5624	; 0x15f8
   116dc:	movt	r3, #1
   116e0:	mov	r1, #11
   116e4:	mov	r0, r4
   116e8:	bl	12aa0 <flatcc_verify_table_vector_field@@Base>
   116ec:	cmp	r0, #0
   116f0:	bne	11628 <_start@@Base+0x424>
   116f4:	mov	r2, r0
   116f8:	mov	r1, #10
   116fc:	mov	r0, r4
   11700:	bl	12750 <flatcc_verify_string_vector_field@@Base>
   11704:	cmp	r0, #0
   11708:	bne	11628 <_start@@Base+0x424>
   1170c:	mov	r2, r0
   11710:	mov	r1, #28
   11714:	mov	r0, r4
   11718:	bl	12750 <flatcc_verify_string_vector_field@@Base>
   1171c:	cmp	r0, #0
   11720:	bne	11628 <_start@@Base+0x424>
   11724:	mov	r2, r0
   11728:	mov	r3, r5
   1172c:	stm	sp, {r5, r6}
   11730:	mov	r1, #24
   11734:	mov	r0, r4
   11738:	bl	1264c <flatcc_verify_vector_field@@Base>
   1173c:	cmp	r0, #0
   11740:	bne	11628 <_start@@Base+0x424>
   11744:	mvn	ip, #-536870912	; 0xe0000000
   11748:	mov	r5, #4
   1174c:	mov	r3, #8
   11750:	mov	r2, #0
   11754:	mov	r1, #29
   11758:	mov	r0, r4
   1175c:	stm	sp, {r5, ip}
   11760:	bl	1264c <flatcc_verify_vector_field@@Base>
   11764:	cmp	r0, #0
   11768:	bne	11628 <_start@@Base+0x424>
   1176c:	movw	r6, #5624	; 0x15f8
   11770:	movt	r6, #1
   11774:	mov	r2, r0
   11778:	mov	r3, r6
   1177c:	mov	r1, #12
   11780:	mov	r0, r4
   11784:	bl	12934 <flatcc_verify_table_field@@Base>
   11788:	cmp	r0, #0
   1178c:	bne	11628 <_start@@Base+0x424>
   11790:	mov	r2, r0
   11794:	movw	r3, #6888	; 0x1ae8
   11798:	movt	r3, #1
   1179c:	mov	r1, #8
   117a0:	mov	r0, r4
   117a4:	bl	138e0 <flatcc_verify_union_field@@Base>
   117a8:	cmp	r0, #0
   117ac:	bne	11628 <_start@@Base+0x424>
   117b0:	mvn	r7, #-1073741824	; 0xc0000000
   117b4:	mov	r8, #2
   117b8:	mov	r2, r0
   117bc:	mov	r3, r5
   117c0:	mov	r1, #9
   117c4:	mov	r0, r4
   117c8:	str	r8, [sp]
   117cc:	str	r7, [sp, #4]
   117d0:	bl	1264c <flatcc_verify_vector_field@@Base>
   117d4:	cmp	r0, #0
   117d8:	bne	11628 <_start@@Base+0x424>
   117dc:	mov	r2, r0
   117e0:	mov	r3, r5
   117e4:	str	r8, [sp]
   117e8:	mov	r1, #31
   117ec:	mov	r0, r4
   117f0:	str	r7, [sp, #4]
   117f4:	bl	1264c <flatcc_verify_vector_field@@Base>
   117f8:	cmp	r0, #0
   117fc:	bne	11628 <_start@@Base+0x424>
   11800:	mov	r7, #1
   11804:	mov	r3, r0
   11808:	mov	r2, r0
   1180c:	mov	r1, #13
   11810:	mov	r0, r4
   11814:	str	r7, [sp]
   11818:	str	r6, [sp, #4]
   1181c:	bl	13688 <flatcc_verify_table_as_nested_root@@Base>
   11820:	cmp	r0, #0
   11824:	bne	11628 <_start@@Base+0x424>
   11828:	mov	r2, r0
   1182c:	movw	r3, #5136	; 0x1410
   11830:	movt	r3, #1
   11834:	mov	r1, #14
   11838:	mov	r0, r4
   1183c:	bl	12934 <flatcc_verify_table_field@@Base>
   11840:	cmp	r0, #0
   11844:	bne	11628 <_start@@Base+0x424>
   11848:	mov	r3, r7
   1184c:	mov	r2, r7
   11850:	mov	r1, #15
   11854:	mov	r0, r4
   11858:	bl	12500 <flatcc_verify_field@@Base>
   1185c:	cmp	r0, #0
   11860:	bne	11628 <_start@@Base+0x424>
   11864:	mov	r3, r5
   11868:	mov	r2, r5
   1186c:	mov	r1, #16
   11870:	mov	r0, r4
   11874:	bl	12500 <flatcc_verify_field@@Base>
   11878:	cmp	r0, #0
   1187c:	bne	11628 <_start@@Base+0x424>
   11880:	mov	r3, r5
   11884:	mov	r2, r5
   11888:	mov	r1, #17
   1188c:	mov	r0, r4
   11890:	bl	12500 <flatcc_verify_field@@Base>
   11894:	cmp	r0, #0
   11898:	bne	11628 <_start@@Base+0x424>
   1189c:	mov	r3, #8
   118a0:	mov	r1, #18
   118a4:	mov	r2, r3
   118a8:	mov	r0, r4
   118ac:	bl	12500 <flatcc_verify_field@@Base>
   118b0:	cmp	r0, #0
   118b4:	bne	11628 <_start@@Base+0x424>
   118b8:	mov	r3, #8
   118bc:	mov	r1, #19
   118c0:	mov	r2, r3
   118c4:	mov	r0, r4
   118c8:	bl	12500 <flatcc_verify_field@@Base>
   118cc:	cmp	r0, #0
   118d0:	bne	11628 <_start@@Base+0x424>
   118d4:	mov	r3, r5
   118d8:	mov	r1, #20
   118dc:	mov	r2, r5
   118e0:	mov	r0, r4
   118e4:	bl	12500 <flatcc_verify_field@@Base>
   118e8:	cmp	r0, #0
   118ec:	bne	11628 <_start@@Base+0x424>
   118f0:	mov	r3, r5
   118f4:	mov	r1, #21
   118f8:	mov	r2, r5
   118fc:	mov	r0, r4
   11900:	bl	12500 <flatcc_verify_field@@Base>
   11904:	cmp	r0, #0
   11908:	bne	11628 <_start@@Base+0x424>
   1190c:	mov	r3, #8
   11910:	mov	r1, #22
   11914:	mov	r2, r3
   11918:	mov	r0, r4
   1191c:	bl	12500 <flatcc_verify_field@@Base>
   11920:	cmp	r0, #0
   11924:	bne	11628 <_start@@Base+0x424>
   11928:	mov	r3, #8
   1192c:	mov	r1, #23
   11930:	mov	r2, r3
   11934:	mov	r0, r4
   11938:	bl	12500 <flatcc_verify_field@@Base>
   1193c:	cmp	r0, #0
   11940:	bne	11628 <_start@@Base+0x424>
   11944:	mov	r3, r5
   11948:	mov	r1, #25
   1194c:	mov	r2, r5
   11950:	mov	r0, r4
   11954:	bl	12500 <flatcc_verify_field@@Base>
   11958:	cmp	r0, #0
   1195c:	bne	11628 <_start@@Base+0x424>
   11960:	mov	r3, r5
   11964:	mov	r1, #26
   11968:	mov	r2, r5
   1196c:	mov	r0, r4
   11970:	bl	12500 <flatcc_verify_field@@Base>
   11974:	cmp	r0, #0
   11978:	bne	11628 <_start@@Base+0x424>
   1197c:	mov	r3, r5
   11980:	mov	r1, #27
   11984:	mov	r2, r5
   11988:	mov	r0, r4
   1198c:	bl	12500 <flatcc_verify_field@@Base>
   11990:	cmp	r0, #0
   11994:	bne	11628 <_start@@Base+0x424>
   11998:	mvn	ip, #0
   1199c:	mov	r1, r7
   119a0:	mov	r2, r0
   119a4:	mov	r3, r7
   119a8:	mov	r0, r4
   119ac:	stm	sp, {r1, ip}
   119b0:	mov	r1, #30
   119b4:	bl	1264c <flatcc_verify_vector_field@@Base>
   119b8:	cmp	r0, #0
   119bc:	bne	11628 <_start@@Base+0x424>
   119c0:	mov	r5, #8
   119c4:	mvn	r6, #-536870912	; 0xe0000000
   119c8:	mov	r3, r5
   119cc:	mov	r2, #0
   119d0:	mov	r1, #32
   119d4:	mov	r0, r4
   119d8:	stm	sp, {r5, r6}
   119dc:	bl	1264c <flatcc_verify_vector_field@@Base>
   119e0:	cmp	r0, #0
   119e4:	bne	11628 <_start@@Base+0x424>
   119e8:	mov	r2, r0
   119ec:	mov	r3, r5
   119f0:	stm	sp, {r5, r6}
   119f4:	mov	r1, #33	; 0x21
   119f8:	mov	r0, r4
   119fc:	bl	1264c <flatcc_verify_vector_field@@Base>
   11a00:	cmp	r0, #0
   11a04:	bne	11628 <_start@@Base+0x424>
   11a08:	mov	r2, r0
   11a0c:	movw	r3, #4856	; 0x12f8
   11a10:	movt	r3, #1
   11a14:	mov	r1, #34	; 0x22
   11a18:	mov	r0, r4
   11a1c:	bl	12934 <flatcc_verify_table_field@@Base>
   11a20:	cmp	r0, #0
   11a24:	bne	11628 <_start@@Base+0x424>
   11a28:	mov	r2, r0
   11a2c:	movw	r3, #6744	; 0x1a58
   11a30:	movt	r3, #1
   11a34:	mov	r0, r4
   11a38:	mov	r1, #35	; 0x23
   11a3c:	add	sp, sp, #8
   11a40:	ldrd	r4, [sp]
   11a44:	ldrd	r6, [sp, #8]
   11a48:	ldr	r8, [sp, #16]
   11a4c:	ldr	lr, [sp, #20]
   11a50:	add	sp, sp, #24
   11a54:	b	12934 <flatcc_verify_table_field@@Base>
   11a58:	strd	r4, [sp, #-16]!
   11a5c:	mov	r4, #1
   11a60:	mvn	r5, #0
   11a64:	str	r6, [sp, #8]
   11a68:	mov	r2, #0
   11a6c:	mov	r3, r4
   11a70:	str	lr, [sp, #12]
   11a74:	sub	sp, sp, #8
   11a78:	mov	r1, r2
   11a7c:	mov	r6, r0
   11a80:	strd	r4, [sp]
   11a84:	bl	1264c <flatcc_verify_vector_field@@Base>
   11a88:	subs	r2, r0, #0
   11a8c:	beq	11aa8 <_start@@Base+0x8a4>
   11a90:	mov	r0, r2
   11a94:	add	sp, sp, #8
   11a98:	ldrd	r4, [sp]
   11a9c:	ldr	r6, [sp, #8]
   11aa0:	add	sp, sp, #12
   11aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   11aa8:	mov	r3, r4
   11aac:	mov	r1, r4
   11ab0:	strd	r4, [sp]
   11ab4:	mov	r0, r6
   11ab8:	bl	1264c <flatcc_verify_vector_field@@Base>
   11abc:	subs	r2, r0, #0
   11ac0:	bne	11a90 <_start@@Base+0x88c>
   11ac4:	movw	ip, #5624	; 0x15f8
   11ac8:	movt	ip, #1
   11acc:	mov	r3, r2
   11ad0:	mov	r0, r6
   11ad4:	mov	r1, #2
   11ad8:	stm	sp, {r4, ip}
   11adc:	bl	13688 <flatcc_verify_table_as_nested_root@@Base>
   11ae0:	mov	r2, r0
   11ae4:	b	11a90 <_start@@Base+0x88c>
   11ae8:	ldrb	r3, [r0, #12]
   11aec:	sub	r3, r3, #1
   11af0:	cmp	r3, #3
   11af4:	ldrls	pc, [pc, r3, lsl #2]
   11af8:	b	11b3c <_start@@Base+0x938>
   11afc:	andeq	r1, r1, r0, lsr fp
   11b00:	andeq	r1, r1, r4, lsr #22
   11b04:	andeq	r1, r1, r8, lsl fp
   11b08:	andeq	r1, r1, ip, lsl #22
   11b0c:	movw	r1, #6980	; 0x1b44
   11b10:	movt	r1, #1
   11b14:	b	12dbc <flatcc_verify_union_table@@Base>
   11b18:	movw	r1, #7392	; 0x1ce0
   11b1c:	movt	r1, #1
   11b20:	b	12dbc <flatcc_verify_union_table@@Base>
   11b24:	movw	r1, #5000	; 0x1388
   11b28:	movt	r1, #1
   11b2c:	b	12dbc <flatcc_verify_union_table@@Base>
   11b30:	movw	r1, #5624	; 0x15f8
   11b34:	movt	r1, #1
   11b38:	b	12dbc <flatcc_verify_union_table@@Base>
   11b3c:	mov	r0, #0
   11b40:	bx	lr
   11b44:	mov	r2, #0
   11b48:	movw	r3, #5504	; 0x1580
   11b4c:	movt	r3, #1
   11b50:	mov	r1, r2
   11b54:	str	r4, [sp, #-8]!
   11b58:	mov	r4, r0
   11b5c:	str	lr, [sp, #4]
   11b60:	bl	12934 <flatcc_verify_table_field@@Base>
   11b64:	cmp	r0, #0
   11b68:	beq	11b78 <_start@@Base+0x974>
   11b6c:	ldr	r4, [sp]
   11b70:	add	sp, sp, #4
   11b74:	pop	{pc}		; (ldr pc, [sp], #4)
   11b78:	mov	r2, r0
   11b7c:	movw	r3, #7100	; 0x1bbc
   11b80:	movt	r3, #1
   11b84:	mov	r1, #1
   11b88:	mov	r0, r4
   11b8c:	bl	12934 <flatcc_verify_table_field@@Base>
   11b90:	cmp	r0, #0
   11b94:	bne	11b6c <_start@@Base+0x968>
   11b98:	mov	r2, r0
   11b9c:	movw	r3, #6888	; 0x1ae8
   11ba0:	movt	r3, #1
   11ba4:	mov	r0, r4
   11ba8:	ldr	r4, [sp]
   11bac:	mov	r1, #3
   11bb0:	ldr	lr, [sp, #4]
   11bb4:	add	sp, sp, #8
   11bb8:	b	13a34 <flatcc_verify_union_vector_field@@Base>
   11bbc:	movw	r3, #7284	; 0x1c74
   11bc0:	movt	r3, #1
   11bc4:	str	r4, [sp, #-8]!
   11bc8:	mov	r2, #0
   11bcc:	mov	r1, #1
   11bd0:	str	lr, [sp, #4]
   11bd4:	mov	r4, r0
   11bd8:	bl	138e0 <flatcc_verify_union_field@@Base>
   11bdc:	cmp	r0, #0
   11be0:	beq	11bf0 <_start@@Base+0x9ec>
   11be4:	ldr	r4, [sp]
   11be8:	add	sp, sp, #4
   11bec:	pop	{pc}		; (ldr pc, [sp], #4)
   11bf0:	mov	r2, r0
   11bf4:	movw	r3, #7284	; 0x1c74
   11bf8:	movt	r3, #1
   11bfc:	mov	r1, #3
   11c00:	mov	r0, r4
   11c04:	bl	138e0 <flatcc_verify_union_field@@Base>
   11c08:	cmp	r0, #0
   11c0c:	bne	11be4 <_start@@Base+0x9e0>
   11c10:	mov	r2, r0
   11c14:	movw	r3, #7284	; 0x1c74
   11c18:	movt	r3, #1
   11c1c:	mov	r1, #5
   11c20:	mov	r0, r4
   11c24:	bl	138e0 <flatcc_verify_union_field@@Base>
   11c28:	cmp	r0, #0
   11c2c:	bne	11be4 <_start@@Base+0x9e0>
   11c30:	mov	r2, r0
   11c34:	movw	r3, #7284	; 0x1c74
   11c38:	movt	r3, #1
   11c3c:	mov	r1, #7
   11c40:	mov	r0, r4
   11c44:	bl	138e0 <flatcc_verify_union_field@@Base>
   11c48:	cmp	r0, #0
   11c4c:	bne	11be4 <_start@@Base+0x9e0>
   11c50:	mov	r2, r0
   11c54:	movw	r3, #7284	; 0x1c74
   11c58:	movt	r3, #1
   11c5c:	mov	r0, r4
   11c60:	ldr	r4, [sp]
   11c64:	mov	r1, #9
   11c68:	ldr	lr, [sp, #4]
   11c6c:	add	sp, sp, #8
   11c70:	b	13a34 <flatcc_verify_union_vector_field@@Base>
   11c74:	ldrb	r3, [r0, #12]
   11c78:	mov	r2, r0
   11c7c:	cmp	r3, #10
   11c80:	bhi	11ca8 <_start@@Base+0xaa4>
   11c84:	cmp	r3, #9
   11c88:	bcs	11cc0 <_start@@Base+0xabc>
   11c8c:	cmp	r3, #2
   11c90:	beq	11cd4 <_start@@Base+0xad0>
   11c94:	cmp	r3, #8
   11c98:	bne	11ccc <_start@@Base+0xac8>
   11c9c:	mov	r2, #2
   11ca0:	mov	r1, r2
   11ca4:	b	12eb8 <flatcc_verify_union_struct@@Base>
   11ca8:	cmp	r3, #11
   11cac:	beq	11cb8 <_start@@Base+0xab4>
   11cb0:	cmp	r3, #255	; 0xff
   11cb4:	bne	11ccc <_start@@Base+0xac8>
   11cb8:	mov	r0, r2
   11cbc:	b	12f18 <flatcc_verify_union_string@@Base>
   11cc0:	mov	r2, #4
   11cc4:	mov	r1, r2
   11cc8:	b	12eb8 <flatcc_verify_union_struct@@Base>
   11ccc:	mov	r0, #0
   11cd0:	bx	lr
   11cd4:	movw	r1, #4864	; 0x1300
   11cd8:	movt	r1, #1
   11cdc:	b	12dbc <flatcc_verify_union_table@@Base>
   11ce0:	mov	r0, #0
   11ce4:	bx	lr
   11ce8:	mov	r3, #8
   11cec:	mov	r1, #0
   11cf0:	str	r4, [sp, #-8]!
   11cf4:	mov	r2, r3
   11cf8:	mov	r4, r0
   11cfc:	str	lr, [sp, #4]
   11d00:	bl	12500 <flatcc_verify_field@@Base>
   11d04:	cmp	r0, #0
   11d08:	beq	11d18 <_start@@Base+0xb14>
   11d0c:	ldr	r4, [sp]
   11d10:	add	sp, sp, #4
   11d14:	pop	{pc}		; (ldr pc, [sp], #4)
   11d18:	mov	r3, #4
   11d1c:	mov	r0, r4
   11d20:	ldr	r4, [sp]
   11d24:	mov	r2, r3
   11d28:	mov	r1, #1
   11d2c:	ldr	lr, [sp, #4]
   11d30:	add	sp, sp, #8
   11d34:	b	12500 <flatcc_verify_field@@Base>

00011d38 <verify_monster@@Base>:
   11d38:	cmp	r0, #0
   11d3c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11d40:	strd	r6, [sp, #8]
   11d44:	strd	r8, [sp, #16]
   11d48:	str	sl, [sp, #24]
   11d4c:	str	lr, [sp, #28]
   11d50:	beq	11d68 <verify_monster@@Base+0x30>
   11d54:	ldr	r2, [r0, #4]
   11d58:	movw	r3, #20301	; 0x4f4d
   11d5c:	movt	r3, #21326	; 0x534e
   11d60:	cmp	r2, r3
   11d64:	beq	11d90 <verify_monster@@Base+0x58>
   11d68:	movw	r0, #15848	; 0x3de8
   11d6c:	movt	r0, #1
   11d70:	bl	10d24 <puts@plt>
   11d74:	mvn	r0, #0
   11d78:	ldrd	r4, [sp]
   11d7c:	ldrd	r6, [sp, #8]
   11d80:	ldrd	r8, [sp, #16]
   11d84:	ldr	sl, [sp, #24]
   11d88:	add	sp, sp, #28
   11d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d90:	ldr	r3, [r0]
   11d94:	adds	r5, r0, r3
   11d98:	beq	11d68 <verify_monster@@Base+0x30>
   11d9c:	ldr	r4, [r0, r3]
   11da0:	sub	r4, r5, r4
   11da4:	ldrh	r6, [r4]
   11da8:	cmp	r6, #9
   11dac:	bls	120b4 <verify_monster@@Base+0x37c>
   11db0:	ldrh	r3, [r4, #8]
   11db4:	cmp	r3, #0
   11db8:	beq	120b4 <verify_monster@@Base+0x37c>
   11dbc:	ldrsh	r3, [r5, r3]
   11dc0:	cmp	r3, #80	; 0x50
   11dc4:	bne	120b4 <verify_monster@@Base+0x37c>
   11dc8:	ldrh	r3, [r4, #4]
   11dcc:	cmp	r3, #0
   11dd0:	beq	12440 <verify_monster@@Base+0x708>
   11dd4:	adds	r3, r5, r3
   11dd8:	beq	12440 <verify_monster@@Base+0x708>
   11ddc:	sub	r0, r3, r0
   11de0:	tst	r0, #15
   11de4:	bne	1238c <verify_monster@@Base+0x654>
   11de8:	vldr	s15, [pc, #928]	; 12190 <verify_monster@@Base+0x458>
   11dec:	vldr	s14, [r3]
   11df0:	vcmp.f32	s14, s15
   11df4:	vmrs	APSR_nzcv, fpscr
   11df8:	bne	123a0 <verify_monster@@Base+0x668>
   11dfc:	vldr	s15, [pc, #912]	; 12194 <verify_monster@@Base+0x45c>
   11e00:	vldr	s14, [r3, #4]
   11e04:	vcmp.f32	s14, s15
   11e08:	vmrs	APSR_nzcv, fpscr
   11e0c:	bne	12378 <verify_monster@@Base+0x640>
   11e10:	vldr	s15, [pc, #896]	; 12198 <verify_monster@@Base+0x460>
   11e14:	vldr	s14, [r3, #8]
   11e18:	vcmp.f32	s14, s15
   11e1c:	vmrs	APSR_nzcv, fpscr
   11e20:	bne	123b4 <verify_monster@@Base+0x67c>
   11e24:	vldr	d7, [pc, #860]	; 12188 <verify_monster@@Base+0x450>
   11e28:	vldr	d6, [r3, #16]
   11e2c:	vcmp.f64	d6, d7
   11e30:	vmrs	APSR_nzcv, fpscr
   11e34:	bne	123c8 <verify_monster@@Base+0x690>
   11e38:	ldrsb	r2, [r3, #24]
   11e3c:	cmp	r2, #2
   11e40:	bne	12350 <verify_monster@@Base+0x618>
   11e44:	ldrsh	r2, [r3, #26]
   11e48:	cmp	r2, #5
   11e4c:	bne	1232c <verify_monster@@Base+0x5f4>
   11e50:	ldrsb	r3, [r3, #28]
   11e54:	cmp	r3, #6
   11e58:	bne	1232c <verify_monster@@Base+0x5f4>
   11e5c:	cmp	r6, #11
   11e60:	bls	12490 <verify_monster@@Base+0x758>
   11e64:	ldrh	r0, [r4, #10]
   11e68:	cmp	r0, #0
   11e6c:	beq	12490 <verify_monster@@Base+0x758>
   11e70:	ldr	r3, [r5, r0]
   11e74:	add	r0, r5, r0
   11e78:	add	r3, r3, #4
   11e7c:	adds	r0, r0, r3
   11e80:	beq	120a0 <verify_monster@@Base+0x368>
   11e84:	ldr	r3, [r0, #-4]
   11e88:	cmp	r3, #9
   11e8c:	bne	120a0 <verify_monster@@Base+0x368>
   11e90:	movw	r1, #16208	; 0x3f50
   11e94:	movt	r1, #1
   11e98:	bl	10cb8 <strcmp@plt>
   11e9c:	subs	r1, r0, #0
   11ea0:	bne	12364 <verify_monster@@Base+0x62c>
   11ea4:	cmp	r6, #15
   11ea8:	bls	1208c <verify_monster@@Base+0x354>
   11eac:	ldrh	r3, [r4, #14]
   11eb0:	cmp	r3, #0
   11eb4:	beq	1208c <verify_monster@@Base+0x354>
   11eb8:	ldr	ip, [r5, r3]
   11ebc:	add	r3, r5, r3
   11ec0:	add	ip, ip, #4
   11ec4:	adds	r2, r3, ip
   11ec8:	beq	1208c <verify_monster@@Base+0x354>
   11ecc:	ldr	lr, [r2, #-4]
   11ed0:	cmp	lr, #5
   11ed4:	bne	1208c <verify_monster@@Base+0x354>
   11ed8:	ldrb	r3, [r3, ip]
   11edc:	cmp	r3, #0
   11ee0:	bne	120f4 <verify_monster@@Base+0x3bc>
   11ee4:	ldrb	r3, [r2, #1]
   11ee8:	cmp	r3, #1
   11eec:	bne	12340 <verify_monster@@Base+0x608>
   11ef0:	ldrb	r3, [r2, #2]
   11ef4:	cmp	r3, #2
   11ef8:	bne	12348 <verify_monster@@Base+0x610>
   11efc:	ldrb	r3, [r2, #3]
   11f00:	cmp	r3, #3
   11f04:	bne	120f0 <verify_monster@@Base+0x3b8>
   11f08:	ldrb	r3, [r2, #4]
   11f0c:	cmp	r3, #4
   11f10:	movne	r1, #4
   11f14:	bne	120f4 <verify_monster@@Base+0x3bc>
   11f18:	cmp	r6, #25
   11f1c:	bls	124b0 <verify_monster@@Base+0x778>
   11f20:	ldrh	r3, [r4, #24]
   11f24:	cmp	r3, #0
   11f28:	beq	124b0 <verify_monster@@Base+0x778>
   11f2c:	ldr	r2, [r5, r3]
   11f30:	add	r3, r5, r3
   11f34:	add	r2, r2, #4
   11f38:	adds	r7, r3, r2
   11f3c:	beq	124b0 <verify_monster@@Base+0x778>
   11f40:	ldr	r1, [r7, #-4]
   11f44:	cmp	r1, #2
   11f48:	bne	123f0 <verify_monster@@Base+0x6b8>
   11f4c:	ldr	r0, [r3, r2]
   11f50:	movw	r1, #16368	; 0x3ff0
   11f54:	movt	r1, #1
   11f58:	add	r0, r0, #4
   11f5c:	add	r0, r7, r0
   11f60:	bl	10cb8 <strcmp@plt>
   11f64:	cmp	r0, #0
   11f68:	bne	12468 <verify_monster@@Base+0x730>
   11f6c:	ldr	r0, [r7, #4]
   11f70:	movw	r1, #16412	; 0x401c
   11f74:	movt	r1, #1
   11f78:	add	r0, r0, #8
   11f7c:	add	r0, r7, r0
   11f80:	bl	10cb8 <strcmp@plt>
   11f84:	cmp	r0, #0
   11f88:	bne	123dc <verify_monster@@Base+0x6a4>
   11f8c:	ldrh	r3, [r4, #18]
   11f90:	cmp	r3, #0
   11f94:	beq	120c8 <verify_monster@@Base+0x390>
   11f98:	ldrb	r3, [r5, r3]
   11f9c:	cmp	r3, #1
   11fa0:	bne	120c8 <verify_monster@@Base+0x390>
   11fa4:	ldrh	r3, [r4, #20]
   11fa8:	cmp	r3, #0
   11fac:	beq	1247c <verify_monster@@Base+0x744>
   11fb0:	ldr	r2, [r5, r3]
   11fb4:	add	r3, r5, r3
   11fb8:	adds	r0, r3, r2
   11fbc:	beq	1247c <verify_monster@@Base+0x744>
   11fc0:	ldr	r3, [r3, r2]
   11fc4:	sub	r3, r0, r3
   11fc8:	ldrh	r2, [r3]
   11fcc:	cmp	r2, #11
   11fd0:	bls	12490 <verify_monster@@Base+0x758>
   11fd4:	ldrh	r2, [r3, #10]
   11fd8:	cmp	r2, #0
   11fdc:	beq	12490 <verify_monster@@Base+0x758>
   11fe0:	ldr	r3, [r0, r2]
   11fe4:	add	r0, r0, r2
   11fe8:	movw	r1, #16500	; 0x4074
   11fec:	movt	r1, #1
   11ff0:	add	r3, r3, #4
   11ff4:	add	r0, r0, r3
   11ff8:	bl	10cb8 <strcmp@plt>
   11ffc:	cmp	r0, #0
   12000:	bne	12404 <verify_monster@@Base+0x6cc>
   12004:	ldrh	r3, [r4, #22]
   12008:	cmp	r3, #0
   1200c:	beq	120dc <verify_monster@@Base+0x3a4>
   12010:	ldr	r1, [r5, r3]
   12014:	add	r3, r5, r3
   12018:	add	r1, r1, #4
   1201c:	adds	r2, r3, r1
   12020:	beq	120dc <verify_monster@@Base+0x3a4>
   12024:	ldr	ip, [r2, #-4]
   12028:	cmp	ip, #2
   1202c:	bne	120dc <verify_monster@@Base+0x3a4>
   12030:	ldrsh	r3, [r3, r1]
   12034:	cmp	r3, #10
   12038:	bne	12454 <verify_monster@@Base+0x71c>
   1203c:	ldrsb	r3, [r2, #2]
   12040:	cmp	r3, #20
   12044:	bne	1242c <verify_monster@@Base+0x6f4>
   12048:	cmn	r2, #4
   1204c:	beq	12318 <verify_monster@@Base+0x5e0>
   12050:	ldrsh	r3, [r2, #4]
   12054:	cmp	r3, #30
   12058:	bne	12318 <verify_monster@@Base+0x5e0>
   1205c:	ldrsb	r3, [r2, #6]
   12060:	cmp	r3, #40	; 0x28
   12064:	bne	12418 <verify_monster@@Base+0x6e0>
   12068:	cmp	r6, #37	; 0x25
   1206c:	bhi	12108 <verify_monster@@Base+0x3d0>
   12070:	movw	r1, #16664	; 0x4118
   12074:	movt	r1, #1
   12078:	ldr	r3, [pc, #284]	; 1219c <verify_monster@@Base+0x464>
   1207c:	movw	r0, #16748	; 0x416c
   12080:	movt	r0, #1
   12084:	mov	r2, #148	; 0x94
   12088:	bl	10db4 <__assert_fail@plt>
   1208c:	movw	r0, #16240	; 0x3f70
   12090:	movt	r0, #1
   12094:	bl	10d24 <puts@plt>
   12098:	mvn	r0, #0
   1209c:	b	11d78 <verify_monster@@Base+0x40>
   120a0:	movw	r0, #16180	; 0x3f34
   120a4:	movt	r0, #1
   120a8:	bl	10d24 <puts@plt>
   120ac:	mvn	r0, #0
   120b0:	b	11d78 <verify_monster@@Base+0x40>
   120b4:	movw	r0, #15872	; 0x3e00
   120b8:	movt	r0, #1
   120bc:	bl	10d24 <puts@plt>
   120c0:	mvn	r0, #0
   120c4:	b	11d78 <verify_monster@@Base+0x40>
   120c8:	movw	r0, #16460	; 0x404c
   120cc:	movt	r0, #1
   120d0:	bl	10d24 <puts@plt>
   120d4:	mvn	r0, #0
   120d8:	b	11d78 <verify_monster@@Base+0x40>
   120dc:	movw	r0, #16532	; 0x4094
   120e0:	movt	r0, #1
   120e4:	bl	10d24 <puts@plt>
   120e8:	mvn	r0, #0
   120ec:	b	11d78 <verify_monster@@Base+0x40>
   120f0:	mov	r1, #3
   120f4:	movw	r0, #16268	; 0x3f8c
   120f8:	movt	r0, #1
   120fc:	bl	10cc4 <printf@plt>
   12100:	mvn	r0, #0
   12104:	b	11d78 <verify_monster@@Base+0x40>
   12108:	ldrh	r3, [r4, #36]	; 0x24
   1210c:	cmp	r3, #0
   12110:	beq	12070 <verify_monster@@Base+0x338>
   12114:	ldr	r2, [r5, r3]
   12118:	movw	r3, #51521	; 0xc941
   1211c:	movt	r3, #56697	; 0xdd79
   12120:	cmp	r2, r3
   12124:	bne	12070 <verify_monster@@Base+0x338>
   12128:	cmp	r6, #39	; 0x27
   1212c:	bhi	1214c <verify_monster@@Base+0x414>
   12130:	movw	r1, #16664	; 0x4118
   12134:	movt	r1, #1
   12138:	ldr	r3, [pc, #92]	; 1219c <verify_monster@@Base+0x464>
   1213c:	movw	r0, #16804	; 0x41a4
   12140:	movt	r0, #1
   12144:	mov	r2, #149	; 0x95
   12148:	bl	10db4 <__assert_fail@plt>
   1214c:	ldrh	r3, [r4, #38]	; 0x26
   12150:	cmp	r3, #0
   12154:	beq	12130 <verify_monster@@Base+0x3f8>
   12158:	ldr	r3, [r5, r3]
   1215c:	cmp	r3, r2
   12160:	bne	12130 <verify_monster@@Base+0x3f8>
   12164:	cmp	r6, #41	; 0x29
   12168:	bhi	121a0 <verify_monster@@Base+0x468>
   1216c:	movw	r1, #16664	; 0x4118
   12170:	movt	r1, #1
   12174:	ldr	r3, [pc, #32]	; 1219c <verify_monster@@Base+0x464>
   12178:	movw	r0, #16860	; 0x41dc
   1217c:	movt	r0, #1
   12180:	mov	r2, #150	; 0x96
   12184:	bl	10db4 <__assert_fail@plt>
   12188:	andeq	r0, r0, r0
   1218c:	andmi	r0, r8, r0
   12190:	svccc	0x00800000
   12194:	andmi	r0, r0, r0
   12198:	submi	r0, r0, r0
   1219c:	andeq	r3, r1, ip, asr #26
   121a0:	ldrh	r3, [r4, #40]	; 0x28
   121a4:	cmp	r3, #0
   121a8:	beq	1216c <verify_monster@@Base+0x434>
   121ac:	add	r9, pc, #788	; 0x314
   121b0:	ldrd	r8, [r9]
   121b4:	ldrd	r2, [r3, r5]
   121b8:	cmp	r3, r9
   121bc:	cmpeq	r2, r8
   121c0:	bne	1216c <verify_monster@@Base+0x434>
   121c4:	cmp	r6, #43	; 0x2b
   121c8:	bhi	121e8 <verify_monster@@Base+0x4b0>
   121cc:	movw	r1, #16664	; 0x4118
   121d0:	movt	r1, #1
   121d4:	ldr	r3, [pc, #764]	; 124d8 <verify_monster@@Base+0x7a0>
   121d8:	movw	r0, #16924	; 0x421c
   121dc:	movt	r0, #1
   121e0:	mov	r2, #151	; 0x97
   121e4:	bl	10db4 <__assert_fail@plt>
   121e8:	ldrh	r3, [r4, #42]	; 0x2a
   121ec:	cmp	r3, #0
   121f0:	beq	121cc <verify_monster@@Base+0x494>
   121f4:	add	r9, pc, #716	; 0x2cc
   121f8:	ldrd	r8, [r9]
   121fc:	ldrd	r2, [r3, r5]
   12200:	cmp	r3, r9
   12204:	cmpeq	r2, r8
   12208:	bne	121cc <verify_monster@@Base+0x494>
   1220c:	cmp	r6, #45	; 0x2d
   12210:	bhi	12230 <verify_monster@@Base+0x4f8>
   12214:	movw	r1, #16664	; 0x4118
   12218:	movt	r1, #1
   1221c:	ldr	r3, [pc, #692]	; 124d8 <verify_monster@@Base+0x7a0>
   12220:	movw	r0, #16988	; 0x425c
   12224:	movt	r0, #1
   12228:	mov	r2, #152	; 0x98
   1222c:	bl	10db4 <__assert_fail@plt>
   12230:	ldrh	r3, [r4, #44]	; 0x2c
   12234:	cmp	r3, #0
   12238:	beq	12214 <verify_monster@@Base+0x4dc>
   1223c:	ldr	r2, [r5, r3]
   12240:	movw	r3, #42097	; 0xa471
   12244:	movt	r3, #36481	; 0x8e81
   12248:	cmp	r2, r3
   1224c:	bne	12214 <verify_monster@@Base+0x4dc>
   12250:	cmp	r6, #47	; 0x2f
   12254:	bhi	12274 <verify_monster@@Base+0x53c>
   12258:	movw	r1, #16664	; 0x4118
   1225c:	movt	r1, #1
   12260:	ldr	r3, [pc, #624]	; 124d8 <verify_monster@@Base+0x7a0>
   12264:	movw	r0, #17044	; 0x4294
   12268:	movt	r0, #1
   1226c:	mov	r2, #153	; 0x99
   12270:	bl	10db4 <__assert_fail@plt>
   12274:	ldrh	r3, [r4, #46]	; 0x2e
   12278:	cmp	r3, #0
   1227c:	beq	12258 <verify_monster@@Base+0x520>
   12280:	ldr	r3, [r5, r3]
   12284:	cmp	r3, r2
   12288:	bne	12258 <verify_monster@@Base+0x520>
   1228c:	cmp	r6, #49	; 0x31
   12290:	bhi	122b0 <verify_monster@@Base+0x578>
   12294:	movw	r1, #16664	; 0x4118
   12298:	movt	r1, #1
   1229c:	ldr	r3, [pc, #564]	; 124d8 <verify_monster@@Base+0x7a0>
   122a0:	movw	r0, #17100	; 0x42cc
   122a4:	movt	r0, #1
   122a8:	mov	r2, #154	; 0x9a
   122ac:	bl	10db4 <__assert_fail@plt>
   122b0:	ldrh	r3, [r4, #48]	; 0x30
   122b4:	cmp	r3, #0
   122b8:	beq	12294 <verify_monster@@Base+0x55c>
   122bc:	add	r9, pc, #524	; 0x20c
   122c0:	ldrd	r8, [r9]
   122c4:	ldrd	r2, [r3, r5]
   122c8:	cmp	r3, r9
   122cc:	cmpeq	r2, r8
   122d0:	bne	12294 <verify_monster@@Base+0x55c>
   122d4:	cmp	r6, #51	; 0x33
   122d8:	bhi	122f8 <verify_monster@@Base+0x5c0>
   122dc:	movw	r1, #16664	; 0x4118
   122e0:	movt	r1, #1
   122e4:	ldr	r3, [pc, #492]	; 124d8 <verify_monster@@Base+0x7a0>
   122e8:	movw	r0, #17164	; 0x430c
   122ec:	movt	r0, #1
   122f0:	mov	r2, #155	; 0x9b
   122f4:	bl	10db4 <__assert_fail@plt>
   122f8:	ldrh	r1, [r4, #50]	; 0x32
   122fc:	cmp	r1, #0
   12300:	beq	122dc <verify_monster@@Base+0x5a4>
   12304:	ldrd	r4, [r5, r1]
   12308:	cmp	r5, r3
   1230c:	cmpeq	r4, r2
   12310:	beq	11d78 <verify_monster@@Base+0x40>
   12314:	b	122dc <verify_monster@@Base+0x5a4>
   12318:	movw	r0, #16616	; 0x40e8
   1231c:	movt	r0, #1
   12320:	bl	10d24 <puts@plt>
   12324:	mvn	r0, #0
   12328:	b	11d78 <verify_monster@@Base+0x40>
   1232c:	movw	r0, #16120	; 0x3ef8
   12330:	movt	r0, #1
   12334:	bl	10d24 <puts@plt>
   12338:	mvn	r0, #0
   1233c:	b	11d78 <verify_monster@@Base+0x40>
   12340:	mov	r1, #1
   12344:	b	120f4 <verify_monster@@Base+0x3bc>
   12348:	mov	r1, #2
   1234c:	b	120f4 <verify_monster@@Base+0x3bc>
   12350:	movw	r0, #16096	; 0x3ee0
   12354:	movt	r0, #1
   12358:	bl	10d24 <puts@plt>
   1235c:	mvn	r0, #0
   12360:	b	11d78 <verify_monster@@Base+0x40>
   12364:	movw	r0, #16220	; 0x3f5c
   12368:	movt	r0, #1
   1236c:	bl	10d24 <puts@plt>
   12370:	mvn	r0, #0
   12374:	b	11d78 <verify_monster@@Base+0x40>
   12378:	movw	r0, #16004	; 0x3e84
   1237c:	movt	r0, #1
   12380:	bl	10d24 <puts@plt>
   12384:	mvn	r0, #0
   12388:	b	11d78 <verify_monster@@Base+0x40>
   1238c:	movw	r0, #15928	; 0x3e38
   12390:	movt	r0, #1
   12394:	bl	10d24 <puts@plt>
   12398:	mvn	r0, #0
   1239c:	b	11d78 <verify_monster@@Base+0x40>
   123a0:	movw	r0, #15968	; 0x3e60
   123a4:	movt	r0, #1
   123a8:	bl	10d24 <puts@plt>
   123ac:	mvn	r0, #0
   123b0:	b	11d78 <verify_monster@@Base+0x40>
   123b4:	movw	r0, #16040	; 0x3ea8
   123b8:	movt	r0, #1
   123bc:	bl	10d24 <puts@plt>
   123c0:	mvn	r0, #0
   123c4:	b	11d78 <verify_monster@@Base+0x40>
   123c8:	movw	r0, #16076	; 0x3ecc
   123cc:	movt	r0, #1
   123d0:	bl	10d24 <puts@plt>
   123d4:	mvn	r0, #0
   123d8:	b	11d78 <verify_monster@@Base+0x40>
   123dc:	movw	r0, #16420	; 0x4024
   123e0:	movt	r0, #1
   123e4:	bl	10d24 <puts@plt>
   123e8:	mvn	r0, #0
   123ec:	b	11d78 <verify_monster@@Base+0x40>
   123f0:	movw	r0, #16328	; 0x3fc8
   123f4:	movt	r0, #1
   123f8:	bl	10d24 <puts@plt>
   123fc:	mvn	r0, #0
   12400:	b	11d78 <verify_monster@@Base+0x40>
   12404:	movw	r0, #16508	; 0x407c
   12408:	movt	r0, #1
   1240c:	bl	10d24 <puts@plt>
   12410:	mvn	r0, #0
   12414:	b	11d78 <verify_monster@@Base+0x40>
   12418:	movw	r0, #16640	; 0x4100
   1241c:	movt	r0, #1
   12420:	bl	10d24 <puts@plt>
   12424:	mvn	r0, #0
   12428:	b	11d78 <verify_monster@@Base+0x40>
   1242c:	movw	r0, #16592	; 0x40d0
   12430:	movt	r0, #1
   12434:	bl	10d24 <puts@plt>
   12438:	mvn	r0, #0
   1243c:	b	11d78 <verify_monster@@Base+0x40>
   12440:	movw	r0, #15908	; 0x3e24
   12444:	movt	r0, #1
   12448:	bl	10d24 <puts@plt>
   1244c:	mvn	r0, #0
   12450:	b	11d78 <verify_monster@@Base+0x40>
   12454:	movw	r0, #16568	; 0x40b8
   12458:	movt	r0, #1
   1245c:	bl	10d24 <puts@plt>
   12460:	mvn	r0, #0
   12464:	b	11d78 <verify_monster@@Base+0x40>
   12468:	movw	r0, #16376	; 0x3ff8
   1246c:	movt	r0, #1
   12470:	bl	10d24 <puts@plt>
   12474:	mvn	r0, #0
   12478:	b	11d78 <verify_monster@@Base+0x40>
   1247c:	movw	r0, #16476	; 0x405c
   12480:	movt	r0, #1
   12484:	bl	10d24 <puts@plt>
   12488:	mvn	r0, #0
   1248c:	b	11d78 <verify_monster@@Base+0x40>
   12490:	movw	r3, #15664	; 0x3d30
   12494:	movt	r3, #1
   12498:	movw	r1, #15708	; 0x3d5c
   1249c:	movt	r1, #1
   124a0:	movw	r0, #16144	; 0x3f10
   124a4:	movt	r0, #1
   124a8:	movw	r2, #699	; 0x2bb
   124ac:	bl	10db4 <__assert_fail@plt>
   124b0:	movw	r0, #16300	; 0x3fac
   124b4:	movt	r0, #1
   124b8:	bl	10d24 <puts@plt>
   124bc:	mvn	r0, #0
   124c0:	b	11d78 <verify_monster@@Base+0x40>
   124c4:	nop	{0}
   124c8:	vrhadd.s<illegal width 64>	d25, d27, d1
   124cc:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   124d0:			; <UNDEFINED> instruction: 0xc767ddf1
   124d4:	mvnsmi	r4, #220, 16	; 0xdc0000
   124d8:	andeq	r3, r1, ip, asr #26

000124dc <flatcc_verify_error_string@@Base>:
   124dc:	cmp	r0, #36	; 0x24
   124e0:	bhi	124f4 <flatcc_verify_error_string@@Base+0x18>
   124e4:	movw	r3, #17468	; 0x443c
   124e8:	movt	r3, #1
   124ec:	ldr	r0, [r3, r0, lsl #2]
   124f0:	bx	lr
   124f4:	movw	r0, #17616	; 0x44d0
   124f8:	movt	r0, #1
   124fc:	bx	lr

00012500 <flatcc_verify_field@@Base>:
   12500:	ldrh	ip, [r0, #22]
   12504:	add	r1, r1, #2
   12508:	lsl	r1, r1, #1
   1250c:	uxth	r1, r1
   12510:	cmp	ip, r1
   12514:	bls	1255c <flatcc_verify_field@@Base+0x5c>
   12518:	ldr	ip, [r0, #12]
   1251c:	ldrh	r1, [ip, r1]
   12520:	cmp	r1, #0
   12524:	beq	1255c <flatcc_verify_field@@Base+0x5c>
   12528:	ldrh	ip, [r0, #20]
   1252c:	add	r2, r2, r1
   12530:	cmp	r2, ip
   12534:	bhi	12564 <flatcc_verify_field@@Base+0x64>
   12538:	ldr	r2, [r0]
   1253c:	sub	r3, r3, #1
   12540:	ldr	r0, [r0, #16]
   12544:	add	r2, r2, r0
   12548:	add	r1, r2, r1
   1254c:	tst	r1, r3
   12550:	moveq	r0, #0
   12554:	movne	r0, #12
   12558:	bx	lr
   1255c:	mov	r0, #0
   12560:	bx	lr
   12564:	mov	r0, #13
   12568:	bx	lr

0001256c <flatcc_verify_string_field@@Base>:
   1256c:	ldrh	r3, [r0, #22]
   12570:	add	r1, r1, #2
   12574:	lsl	r1, r1, #1
   12578:	uxth	r1, r1
   1257c:	cmp	r3, r1
   12580:	bls	1261c <flatcc_verify_string_field@@Base+0xb0>
   12584:	ldr	r3, [r0, #12]
   12588:	ldrh	r3, [r3, r1]
   1258c:	cmp	r3, #0
   12590:	beq	1261c <flatcc_verify_string_field@@Base+0xb0>
   12594:	ldrh	r2, [r0, #20]
   12598:	add	r1, r3, #4
   1259c:	cmp	r1, r2
   125a0:	bhi	1262c <flatcc_verify_string_field@@Base+0xc0>
   125a4:	ldr	r2, [r0, #16]
   125a8:	add	r3, r3, r2
   125ac:	tst	r3, #3
   125b0:	bne	12634 <flatcc_verify_string_field@@Base+0xc8>
   125b4:	cmp	r3, #0
   125b8:	beq	12644 <flatcc_verify_string_field@@Base+0xd8>
   125bc:	ldr	r1, [r0]
   125c0:	ldr	r2, [r1, r3]
   125c4:	add	r2, r3, r2
   125c8:	cmp	r3, r2
   125cc:	bcs	12614 <flatcc_verify_string_field@@Base+0xa8>
   125d0:	ldr	r3, [r0, #4]
   125d4:	add	r0, r2, #4
   125d8:	cmp	r3, r0
   125dc:	bcc	12614 <flatcc_verify_string_field@@Base+0xa8>
   125e0:	tst	r2, #3
   125e4:	bne	12614 <flatcc_verify_string_field@@Base+0xa8>
   125e8:	ldr	r2, [r1, r2]
   125ec:	sub	r3, r3, r0
   125f0:	add	ip, r2, #1
   125f4:	cmp	r3, ip
   125f8:	bcc	1263c <flatcc_verify_string_field@@Base+0xd0>
   125fc:	add	r1, r1, r0
   12600:	ldrb	r3, [r1, r2]
   12604:	cmp	r3, #0
   12608:	moveq	r0, #0
   1260c:	movne	r0, #7
   12610:	bx	lr
   12614:	mov	r0, #17
   12618:	bx	lr
   1261c:	cmp	r2, #0
   12620:	moveq	r0, #0
   12624:	movne	r0, #4
   12628:	bx	lr
   1262c:	mov	r0, #13
   12630:	bx	lr
   12634:	mov	r0, #12
   12638:	bx	lr
   1263c:	mov	r0, #8
   12640:	bx	lr
   12644:	mov	r0, r3
   12648:	bx	lr

0001264c <flatcc_verify_vector_field@@Base>:
   1264c:	ldrh	ip, [r0, #22]
   12650:	add	r1, r1, #2
   12654:	lsl	r1, r1, #1
   12658:	str	r4, [sp, #-8]!
   1265c:	str	lr, [sp, #4]
   12660:	uxth	r1, r1
   12664:	ldrh	lr, [sp, #8]
   12668:	cmp	ip, r1
   1266c:	bls	12730 <flatcc_verify_vector_field@@Base+0xe4>
   12670:	ldr	ip, [r0, #12]
   12674:	ldrh	r1, [ip, r1]
   12678:	cmp	r1, #0
   1267c:	beq	12730 <flatcc_verify_vector_field@@Base+0xe4>
   12680:	ldrh	r2, [r0, #20]
   12684:	add	ip, r1, #4
   12688:	cmp	ip, r2
   1268c:	movhi	r0, #13
   12690:	bhi	12714 <flatcc_verify_vector_field@@Base+0xc8>
   12694:	ldr	r2, [r0, #16]
   12698:	add	r2, r1, r2
   1269c:	tst	r2, #3
   126a0:	movne	r0, #12
   126a4:	bne	12714 <flatcc_verify_vector_field@@Base+0xc8>
   126a8:	cmp	r2, #0
   126ac:	beq	12748 <flatcc_verify_vector_field@@Base+0xfc>
   126b0:	ldr	r4, [r0]
   126b4:	ldr	ip, [r4, r2]
   126b8:	add	ip, r2, ip
   126bc:	cmp	r2, ip
   126c0:	bcs	12720 <flatcc_verify_vector_field@@Base+0xd4>
   126c4:	ldr	r1, [r0, #4]
   126c8:	add	r0, ip, #4
   126cc:	cmp	r1, r0
   126d0:	bcc	12720 <flatcc_verify_vector_field@@Base+0xd4>
   126d4:	cmp	lr, #4
   126d8:	movcc	lr, #4
   126dc:	sub	lr, lr, #1
   126e0:	orr	lr, lr, #3
   126e4:	tst	lr, r0
   126e8:	bne	12720 <flatcc_verify_vector_field@@Base+0xd4>
   126ec:	ldr	r2, [r4, ip]
   126f0:	ldr	ip, [sp, #12]
   126f4:	cmp	ip, r2
   126f8:	movcc	r0, #25
   126fc:	bcc	12714 <flatcc_verify_vector_field@@Base+0xc8>
   12700:	mul	r2, r2, r3
   12704:	sub	r0, r1, r0
   12708:	cmp	r0, r2
   1270c:	movcc	r0, #26
   12710:	movcs	r0, #0
   12714:	ldr	r4, [sp]
   12718:	add	sp, sp, #4
   1271c:	pop	{pc}		; (ldr pc, [sp], #4)
   12720:	ldr	r4, [sp]
   12724:	add	sp, sp, #4
   12728:	mov	r0, #16
   1272c:	pop	{pc}		; (ldr pc, [sp], #4)
   12730:	cmp	r2, #0
   12734:	ldr	r4, [sp]
   12738:	add	sp, sp, #4
   1273c:	moveq	r0, #0
   12740:	movne	r0, #4
   12744:	pop	{pc}		; (ldr pc, [sp], #4)
   12748:	mov	r0, r2
   1274c:	b	12714 <flatcc_verify_vector_field@@Base+0xc8>

00012750 <flatcc_verify_string_vector_field@@Base>:
   12750:	ldrh	r3, [r0, #22]
   12754:	add	r1, r1, #2
   12758:	lsl	r1, r1, #1
   1275c:	uxth	r1, r1
   12760:	cmp	r3, r1
   12764:	bls	128c0 <flatcc_verify_string_vector_field@@Base+0x170>
   12768:	ldr	r3, [r0, #12]
   1276c:	ldrh	r3, [r3, r1]
   12770:	cmp	r3, #0
   12774:	beq	128c0 <flatcc_verify_string_vector_field@@Base+0x170>
   12778:	ldrh	r2, [r0, #20]
   1277c:	add	r1, r3, #4
   12780:	cmp	r1, r2
   12784:	bhi	128d0 <flatcc_verify_string_vector_field@@Base+0x180>
   12788:	ldr	r2, [r0, #16]
   1278c:	add	r3, r3, r2
   12790:	tst	r3, #3
   12794:	bne	128d8 <flatcc_verify_string_vector_field@@Base+0x188>
   12798:	cmp	r3, #0
   1279c:	beq	12910 <flatcc_verify_string_vector_field@@Base+0x1c0>
   127a0:	ldr	r1, [r0]
   127a4:	ldr	r2, [r1, r3]
   127a8:	add	r2, r3, r2
   127ac:	cmp	r3, r2
   127b0:	bcs	128b8 <flatcc_verify_string_vector_field@@Base+0x168>
   127b4:	ldr	ip, [r0, #4]
   127b8:	add	r0, r2, #4
   127bc:	cmp	ip, r0
   127c0:	bcc	128b8 <flatcc_verify_string_vector_field@@Base+0x168>
   127c4:	tst	r0, #3
   127c8:	bne	128b8 <flatcc_verify_string_vector_field@@Base+0x168>
   127cc:	ldr	r3, [r1, r2]
   127d0:	strd	r4, [sp, #-16]!
   127d4:	str	r6, [sp, #8]
   127d8:	str	lr, [sp, #12]
   127dc:	cmn	r3, #-1073741823	; 0xc0000001
   127e0:	bhi	128e0 <flatcc_verify_string_vector_field@@Base+0x190>
   127e4:	lsl	lr, r3, #2
   127e8:	sub	r4, ip, r0
   127ec:	cmp	r4, lr
   127f0:	bcc	128e0 <flatcc_verify_string_vector_field@@Base+0x190>
   127f4:	cmp	r3, #0
   127f8:	beq	1292c <flatcc_verify_string_vector_field@@Base+0x1dc>
   127fc:	ldr	r2, [r1, r0]
   12800:	add	r2, r0, r2
   12804:	cmp	r0, r2
   12808:	bcs	12924 <flatcc_verify_string_vector_field@@Base+0x1d4>
   1280c:	add	r4, r2, #4
   12810:	cmp	ip, r4
   12814:	bcc	12924 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12818:	tst	r2, #3
   1281c:	bne	12924 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12820:	ldr	r3, [r1, r2]
   12824:	sub	r5, ip, r4
   12828:	add	r6, r3, #1
   1282c:	cmp	r6, r5
   12830:	addls	lr, r0, lr
   12834:	bhi	1288c <flatcc_verify_string_vector_field@@Base+0x13c>
   12838:	add	r3, r1, r3
   1283c:	add	r0, r0, #4
   12840:	ldrb	r3, [r3, r4]
   12844:	cmp	r3, #0
   12848:	bne	12918 <flatcc_verify_string_vector_field@@Base+0x1c8>
   1284c:	cmp	r0, lr
   12850:	beq	1292c <flatcc_verify_string_vector_field@@Base+0x1dc>
   12854:	ldr	r2, [r1, r0]
   12858:	add	r2, r0, r2
   1285c:	cmp	r2, r0
   12860:	add	r4, r2, #4
   12864:	bls	12924 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12868:	cmp	ip, r4
   1286c:	bcc	12924 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12870:	tst	r2, #3
   12874:	sub	r5, ip, r4
   12878:	bne	12924 <flatcc_verify_string_vector_field@@Base+0x1d4>
   1287c:	ldr	r3, [r1, r2]
   12880:	add	r6, r3, #1
   12884:	cmp	r5, r6
   12888:	bcs	12838 <flatcc_verify_string_vector_field@@Base+0xe8>
   1288c:	ldr	r3, [r1, r2]
   12890:	add	r2, r3, #1
   12894:	cmp	r5, r2
   12898:	movcc	r0, #8
   1289c:	bcc	12900 <flatcc_verify_string_vector_field@@Base+0x1b0>
   128a0:	add	r3, r1, r3
   128a4:	ldrb	r3, [r3, r4]
   128a8:	cmp	r3, #0
   128ac:	moveq	r0, #0
   128b0:	movne	r0, #7
   128b4:	b	12900 <flatcc_verify_string_vector_field@@Base+0x1b0>
   128b8:	mov	r0, #16
   128bc:	bx	lr
   128c0:	cmp	r2, #0
   128c4:	movne	r0, #4
   128c8:	moveq	r0, #0
   128cc:	bx	lr
   128d0:	mov	r0, #13
   128d4:	bx	lr
   128d8:	mov	r0, #12
   128dc:	bx	lr
   128e0:	ldr	r3, [r1, r2]
   128e4:	cmn	r3, #-1073741823	; 0xc0000001
   128e8:	movhi	r0, #25
   128ec:	bhi	12900 <flatcc_verify_string_vector_field@@Base+0x1b0>
   128f0:	sub	r0, ip, r0
   128f4:	cmp	r0, r3, lsl #2
   128f8:	movcs	r0, #0
   128fc:	movcc	r0, #26
   12900:	ldrd	r4, [sp]
   12904:	ldr	r6, [sp, #8]
   12908:	add	sp, sp, #12
   1290c:	pop	{pc}		; (ldr pc, [sp], #4)
   12910:	mov	r0, r3
   12914:	bx	lr
   12918:	cmp	ip, r4
   1291c:	subcs	r5, ip, r4
   12920:	bcs	1288c <flatcc_verify_string_vector_field@@Base+0x13c>
   12924:	mov	r0, #17
   12928:	b	12900 <flatcc_verify_string_vector_field@@Base+0x1b0>
   1292c:	mov	r0, r3
   12930:	b	12900 <flatcc_verify_string_vector_field@@Base+0x1b0>

00012934 <flatcc_verify_table_field@@Base>:
   12934:	ldrh	ip, [r0, #22]
   12938:	add	r1, r1, #2
   1293c:	lsl	r1, r1, #1
   12940:	uxth	r1, r1
   12944:	cmp	ip, r1
   12948:	bls	12a68 <flatcc_verify_table_field@@Base+0x134>
   1294c:	ldr	ip, [r0, #12]
   12950:	ldrh	r1, [ip, r1]
   12954:	cmp	r1, #0
   12958:	beq	12a68 <flatcc_verify_table_field@@Base+0x134>
   1295c:	ldrh	r2, [r0, #20]
   12960:	add	ip, r1, #4
   12964:	cmp	ip, r2
   12968:	bhi	12a78 <flatcc_verify_table_field@@Base+0x144>
   1296c:	ldr	r2, [r0, #16]
   12970:	add	r1, r1, r2
   12974:	tst	r1, #3
   12978:	bne	12a80 <flatcc_verify_table_field@@Base+0x14c>
   1297c:	cmp	r1, #0
   12980:	beq	12a88 <flatcc_verify_table_field@@Base+0x154>
   12984:	ldr	ip, [r0]
   12988:	strd	r4, [sp, #-12]!
   1298c:	ldr	r2, [r0, #8]
   12990:	str	lr, [sp, #8]
   12994:	sub	sp, sp, #28
   12998:	ldr	lr, [r0, #4]
   1299c:	ldr	r0, [ip, r1]
   129a0:	sub	r2, r2, #1
   129a4:	cmp	r2, #0
   129a8:	moveq	r0, #3
   129ac:	str	r2, [sp, #8]
   129b0:	beq	12a58 <flatcc_verify_table_field@@Base+0x124>
   129b4:	add	r2, r1, r0
   129b8:	cmp	r1, r2
   129bc:	bcs	12a54 <flatcc_verify_table_field@@Base+0x120>
   129c0:	add	r1, r2, #4
   129c4:	cmp	lr, r1
   129c8:	bcc	12a54 <flatcc_verify_table_field@@Base+0x120>
   129cc:	tst	r2, #3
   129d0:	bne	12a54 <flatcc_verify_table_field@@Base+0x120>
   129d4:	str	r2, [sp, #16]
   129d8:	ldr	r1, [ip, r2]
   129dc:	subs	r1, r2, r1
   129e0:	bmi	12a90 <flatcc_verify_table_field@@Base+0x15c>
   129e4:	tst	r1, #1
   129e8:	bne	12a90 <flatcc_verify_table_field@@Base+0x15c>
   129ec:	add	r4, r1, #2
   129f0:	cmp	lr, r4
   129f4:	movcc	r0, #27
   129f8:	bcc	12a58 <flatcc_verify_table_field@@Base+0x124>
   129fc:	ldrh	r0, [ip, r1]
   12a00:	add	r5, ip, r1
   12a04:	add	r1, r0, r1
   12a08:	strh	r0, [sp, #22]
   12a0c:	cmp	lr, r1
   12a10:	bcc	12a98 <flatcc_verify_table_field@@Base+0x164>
   12a14:	tst	r0, #1
   12a18:	bne	12a98 <flatcc_verify_table_field@@Base+0x164>
   12a1c:	cmp	r0, #3
   12a20:	movls	r0, #28
   12a24:	bls	12a58 <flatcc_verify_table_field@@Base+0x124>
   12a28:	ldrh	r1, [ip, r4]
   12a2c:	sub	r2, lr, r2
   12a30:	cmp	r2, r1
   12a34:	strh	r1, [sp, #20]
   12a38:	movcc	r0, #20
   12a3c:	bcc	12a58 <flatcc_verify_table_field@@Base+0x124>
   12a40:	mov	r0, sp
   12a44:	stm	sp, {ip, lr}
   12a48:	str	r5, [sp, #12]
   12a4c:	blx	r3
   12a50:	b	12a58 <flatcc_verify_table_field@@Base+0x124>
   12a54:	mov	r0, #15
   12a58:	add	sp, sp, #28
   12a5c:	ldrd	r4, [sp]
   12a60:	add	sp, sp, #8
   12a64:	pop	{pc}		; (ldr pc, [sp], #4)
   12a68:	cmp	r2, #0
   12a6c:	moveq	r0, #0
   12a70:	movne	r0, #4
   12a74:	bx	lr
   12a78:	mov	r0, #13
   12a7c:	bx	lr
   12a80:	mov	r0, #12
   12a84:	bx	lr
   12a88:	mov	r0, r1
   12a8c:	bx	lr
   12a90:	mov	r0, #29
   12a94:	b	12a58 <flatcc_verify_table_field@@Base+0x124>
   12a98:	mov	r0, #30
   12a9c:	b	12a58 <flatcc_verify_table_field@@Base+0x124>

00012aa0 <flatcc_verify_table_vector_field@@Base>:
   12aa0:	ldrh	ip, [r0, #22]
   12aa4:	add	r1, r1, #2
   12aa8:	lsl	r1, r1, #1
   12aac:	uxth	r1, r1
   12ab0:	cmp	ip, r1
   12ab4:	bls	12d2c <flatcc_verify_table_vector_field@@Base+0x28c>
   12ab8:	ldr	ip, [r0, #12]
   12abc:	ldrh	r1, [ip, r1]
   12ac0:	cmp	r1, #0
   12ac4:	beq	12d2c <flatcc_verify_table_vector_field@@Base+0x28c>
   12ac8:	ldrh	r2, [r0, #20]
   12acc:	add	ip, r1, #4
   12ad0:	cmp	ip, r2
   12ad4:	bhi	12d3c <flatcc_verify_table_vector_field@@Base+0x29c>
   12ad8:	ldr	r2, [r0, #16]
   12adc:	add	r1, r1, r2
   12ae0:	tst	r1, #3
   12ae4:	bne	12d54 <flatcc_verify_table_vector_field@@Base+0x2b4>
   12ae8:	cmp	r1, #0
   12aec:	beq	12d34 <flatcc_verify_table_vector_field@@Base+0x294>
   12af0:	ldr	ip, [r0, #8]
   12af4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12af8:	strd	r6, [sp, #8]
   12afc:	ldr	r6, [r0]
   12b00:	strd	r8, [sp, #16]
   12b04:	cmp	ip, #0
   12b08:	strd	sl, [sp, #24]
   12b0c:	str	lr, [sp, #32]
   12b10:	sub	sp, sp, #36	; 0x24
   12b14:	ldr	r2, [r6, r1]
   12b18:	ble	12d4c <flatcc_verify_table_vector_field@@Base+0x2ac>
   12b1c:	add	r2, r1, r2
   12b20:	cmp	r1, r2
   12b24:	bcs	12d0c <flatcc_verify_table_vector_field@@Base+0x26c>
   12b28:	ldr	r8, [r0, #4]
   12b2c:	add	r5, r2, #4
   12b30:	cmp	r8, r5
   12b34:	bcc	12d0c <flatcc_verify_table_vector_field@@Base+0x26c>
   12b38:	tst	r5, #3
   12b3c:	bne	12d0c <flatcc_verify_table_vector_field@@Base+0x26c>
   12b40:	ldr	r1, [r6, r2]
   12b44:	cmn	r1, #-1073741823	; 0xc0000001
   12b48:	bhi	12d5c <flatcc_verify_table_vector_field@@Base+0x2bc>
   12b4c:	lsl	r9, r1, #2
   12b50:	sub	r0, r8, r5
   12b54:	cmp	r0, r9
   12b58:	bcc	12d5c <flatcc_verify_table_vector_field@@Base+0x2bc>
   12b5c:	cmp	r1, #0
   12b60:	beq	12d7c <flatcc_verify_table_vector_field@@Base+0x2dc>
   12b64:	sub	r7, ip, #2
   12b68:	add	fp, r6, r5
   12b6c:	ldr	r1, [r6, r5]
   12b70:	cmp	r7, #0
   12b74:	str	r7, [sp, #16]
   12b78:	beq	12d4c <flatcc_verify_table_vector_field@@Base+0x2ac>
   12b7c:	add	r1, r5, r1
   12b80:	mov	sl, r3
   12b84:	cmp	r5, r1
   12b88:	bcs	12d9c <flatcc_verify_table_vector_field@@Base+0x2fc>
   12b8c:	add	r3, r1, #4
   12b90:	cmp	r8, r3
   12b94:	bcc	12d9c <flatcc_verify_table_vector_field@@Base+0x2fc>
   12b98:	tst	r1, #3
   12b9c:	bne	12d9c <flatcc_verify_table_vector_field@@Base+0x2fc>
   12ba0:	movw	r3, #65532	; 0xfffc
   12ba4:	movt	r3, #65535	; 0xffff
   12ba8:	sub	r3, r3, r2
   12bac:	add	r2, r2, #8
   12bb0:	add	r9, r5, r9
   12bb4:	add	fp, fp, r3
   12bb8:	add	r4, r6, r2
   12bbc:	str	r1, [sp, #24]
   12bc0:	add	r3, fp, r5
   12bc4:	ldr	r2, [r6, r1]
   12bc8:	subs	r2, r1, r2
   12bcc:	bmi	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12bd0:	tst	r2, #1
   12bd4:	bne	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12bd8:	add	lr, r2, #2
   12bdc:	cmp	r8, lr
   12be0:	bcc	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12be4:	ldrh	r0, [r6, r2]
   12be8:	add	ip, r6, r2
   12bec:	add	r2, r0, r2
   12bf0:	strh	r0, [sp, #30]
   12bf4:	cmp	r8, r2
   12bf8:	bcc	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12bfc:	tst	r0, #1
   12c00:	bne	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12c04:	cmp	r0, #3
   12c08:	bls	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12c0c:	ldrh	r2, [r6, lr]
   12c10:	sub	r1, r8, r1
   12c14:	cmp	r1, r2
   12c18:	strh	r2, [sp, #28]
   12c1c:	bcc	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12c20:	add	r0, sp, #8
   12c24:	stmib	sp, {r3, r6, r8}
   12c28:	str	ip, [sp, #20]
   12c2c:	blx	sl
   12c30:	cmp	r0, #0
   12c34:	ldr	r3, [sp, #4]
   12c38:	bne	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12c3c:	add	r5, r5, #4
   12c40:	cmp	r5, r9
   12c44:	beq	12d7c <flatcc_verify_table_vector_field@@Base+0x2dc>
   12c48:	mov	r3, r4
   12c4c:	ldr	r1, [r4], #4
   12c50:	str	r7, [sp, #16]
   12c54:	add	r1, r1, r5
   12c58:	cmp	r5, r1
   12c5c:	bcc	12d84 <flatcc_verify_table_vector_field@@Base+0x2e4>
   12c60:	ldr	r3, [r3]
   12c64:	str	r7, [sp, #16]
   12c68:	add	r3, r5, r3
   12c6c:	cmp	r3, r5
   12c70:	bls	12da4 <flatcc_verify_table_vector_field@@Base+0x304>
   12c74:	add	r2, r3, #4
   12c78:	cmp	r8, r2
   12c7c:	bcc	12da4 <flatcc_verify_table_vector_field@@Base+0x304>
   12c80:	tst	r3, #3
   12c84:	bne	12da4 <flatcc_verify_table_vector_field@@Base+0x304>
   12c88:	str	r3, [sp, #24]
   12c8c:	ldr	r2, [r6, r3]
   12c90:	subs	r2, r3, r2
   12c94:	bmi	12dac <flatcc_verify_table_vector_field@@Base+0x30c>
   12c98:	tst	r2, #1
   12c9c:	bne	12dac <flatcc_verify_table_vector_field@@Base+0x30c>
   12ca0:	add	r0, r2, #2
   12ca4:	cmp	r8, r0
   12ca8:	movcc	r0, #27
   12cac:	bcc	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12cb0:	ldrh	r1, [r6, r2]
   12cb4:	add	ip, r6, r2
   12cb8:	add	r2, r1, r2
   12cbc:	strh	r1, [sp, #30]
   12cc0:	cmp	r8, r2
   12cc4:	bcc	12db4 <flatcc_verify_table_vector_field@@Base+0x314>
   12cc8:	tst	r1, #1
   12ccc:	bne	12db4 <flatcc_verify_table_vector_field@@Base+0x314>
   12cd0:	cmp	r1, #3
   12cd4:	movls	r0, #28
   12cd8:	bls	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12cdc:	ldrh	r2, [r6, r0]
   12ce0:	sub	r3, r8, r3
   12ce4:	cmp	r3, r2
   12ce8:	strh	r2, [sp, #28]
   12cec:	movcc	r0, #20
   12cf0:	bcc	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12cf4:	add	r0, sp, #8
   12cf8:	str	r6, [sp, #8]
   12cfc:	str	r8, [sp, #12]
   12d00:	str	ip, [sp, #20]
   12d04:	blx	sl
   12d08:	b	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12d0c:	mov	r0, #16
   12d10:	add	sp, sp, #36	; 0x24
   12d14:	ldrd	r4, [sp]
   12d18:	ldrd	r6, [sp, #8]
   12d1c:	ldrd	r8, [sp, #16]
   12d20:	ldrd	sl, [sp, #24]
   12d24:	add	sp, sp, #32
   12d28:	pop	{pc}		; (ldr pc, [sp], #4)
   12d2c:	cmp	r2, #0
   12d30:	bne	12d44 <flatcc_verify_table_vector_field@@Base+0x2a4>
   12d34:	mov	r0, #0
   12d38:	bx	lr
   12d3c:	mov	r0, #13
   12d40:	bx	lr
   12d44:	mov	r0, #4
   12d48:	bx	lr
   12d4c:	mov	r0, #3
   12d50:	b	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12d54:	mov	r0, #12
   12d58:	bx	lr
   12d5c:	ldr	r3, [r6, r2]
   12d60:	cmn	r3, #-1073741823	; 0xc0000001
   12d64:	movhi	r0, #25
   12d68:	bhi	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12d6c:	sub	r5, r8, r5
   12d70:	cmp	r5, r3, lsl #2
   12d74:	movcc	r0, #26
   12d78:	bcc	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12d7c:	mov	r0, #0
   12d80:	b	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12d84:	add	r2, r1, #4
   12d88:	cmp	r8, r2
   12d8c:	bcc	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12d90:	tst	r1, #3
   12d94:	beq	12bbc <flatcc_verify_table_vector_field@@Base+0x11c>
   12d98:	b	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12d9c:	mov	r3, fp
   12da0:	b	12c60 <flatcc_verify_table_vector_field@@Base+0x1c0>
   12da4:	mov	r0, #15
   12da8:	b	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12dac:	mov	r0, #29
   12db0:	b	12d10 <flatcc_verify_table_vector_field@@Base+0x270>
   12db4:	mov	r0, #30
   12db8:	b	12d10 <flatcc_verify_table_vector_field@@Base+0x270>

00012dbc <flatcc_verify_union_table@@Base>:
   12dbc:	strd	r4, [sp, #-12]!
   12dc0:	ldr	r3, [r0, #8]
   12dc4:	ldr	ip, [r0, #4]
   12dc8:	ldr	r2, [r0, #16]
   12dcc:	sub	r3, r3, #1
   12dd0:	str	lr, [sp, #8]
   12dd4:	sub	sp, sp, #28
   12dd8:	cmp	r3, #0
   12ddc:	ldr	lr, [r0]
   12de0:	str	r3, [sp, #8]
   12de4:	ldr	r3, [r0, #20]
   12de8:	moveq	r0, #3
   12dec:	beq	12e00 <flatcc_verify_union_table@@Base+0x44>
   12df0:	add	r3, r2, r3
   12df4:	cmp	r2, r3
   12df8:	bcc	12e10 <flatcc_verify_union_table@@Base+0x54>
   12dfc:	mov	r0, #15
   12e00:	add	sp, sp, #28
   12e04:	ldrd	r4, [sp]
   12e08:	add	sp, sp, #8
   12e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e10:	add	r2, r3, #4
   12e14:	cmp	ip, r2
   12e18:	bcc	12dfc <flatcc_verify_union_table@@Base+0x40>
   12e1c:	tst	r3, #3
   12e20:	bne	12dfc <flatcc_verify_union_table@@Base+0x40>
   12e24:	str	r3, [sp, #16]
   12e28:	ldr	r2, [lr, r3]
   12e2c:	subs	r2, r3, r2
   12e30:	bmi	12eb0 <flatcc_verify_union_table@@Base+0xf4>
   12e34:	tst	r2, #1
   12e38:	bne	12eb0 <flatcc_verify_union_table@@Base+0xf4>
   12e3c:	add	r4, r2, #2
   12e40:	cmp	ip, r4
   12e44:	movcc	r0, #27
   12e48:	bcc	12e00 <flatcc_verify_union_table@@Base+0x44>
   12e4c:	ldrh	r0, [lr, r2]
   12e50:	add	r5, lr, r2
   12e54:	add	r2, r0, r2
   12e58:	strh	r0, [sp, #22]
   12e5c:	cmp	ip, r2
   12e60:	bcc	12ea8 <flatcc_verify_union_table@@Base+0xec>
   12e64:	tst	r0, #1
   12e68:	bne	12ea8 <flatcc_verify_union_table@@Base+0xec>
   12e6c:	cmp	r0, #3
   12e70:	movls	r0, #28
   12e74:	bls	12e00 <flatcc_verify_union_table@@Base+0x44>
   12e78:	ldrh	r2, [lr, r4]
   12e7c:	sub	r3, ip, r3
   12e80:	cmp	r3, r2
   12e84:	strh	r2, [sp, #20]
   12e88:	movcc	r0, #20
   12e8c:	bcc	12e00 <flatcc_verify_union_table@@Base+0x44>
   12e90:	mov	r0, sp
   12e94:	str	lr, [sp]
   12e98:	str	ip, [sp, #4]
   12e9c:	str	r5, [sp, #12]
   12ea0:	blx	r1
   12ea4:	b	12e00 <flatcc_verify_union_table@@Base+0x44>
   12ea8:	mov	r0, #30
   12eac:	b	12e00 <flatcc_verify_union_table@@Base+0x44>
   12eb0:	mov	r0, #29
   12eb4:	b	12e00 <flatcc_verify_union_table@@Base+0x44>

00012eb8 <flatcc_verify_union_struct@@Base>:
   12eb8:	push	{lr}		; (str lr, [sp, #-4]!)
   12ebc:	ldr	ip, [r0, #20]
   12ec0:	ldr	lr, [r0, #4]
   12ec4:	ldr	r3, [r0, #16]
   12ec8:	cmp	ip, #0
   12ecc:	beq	12f00 <flatcc_verify_union_struct@@Base+0x48>
   12ed0:	add	r3, r3, ip
   12ed4:	cmp	lr, r3
   12ed8:	bcc	12f00 <flatcc_verify_union_struct@@Base+0x48>
   12edc:	adds	r1, r1, r3
   12ee0:	bcs	12f10 <flatcc_verify_union_struct@@Base+0x58>
   12ee4:	cmp	lr, r1
   12ee8:	bcc	12f08 <flatcc_verify_union_struct@@Base+0x50>
   12eec:	sub	r2, r2, #1
   12ef0:	tst	r2, r3
   12ef4:	moveq	r0, #0
   12ef8:	movne	r0, #11
   12efc:	pop	{pc}		; (ldr pc, [sp], #4)
   12f00:	mov	r0, #18
   12f04:	pop	{pc}		; (ldr pc, [sp], #4)
   12f08:	mov	r0, #9
   12f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f10:	mov	r0, #10
   12f14:	b	12efc <flatcc_verify_union_struct@@Base+0x44>

00012f18 <flatcc_verify_union_string@@Base>:
   12f18:	ldrd	r2, [r0, #16]
   12f1c:	add	r3, r2, r3
   12f20:	cmp	r2, r3
   12f24:	bcs	12f70 <flatcc_verify_union_string@@Base+0x58>
   12f28:	ldr	r2, [r0, #4]
   12f2c:	add	r1, r3, #4
   12f30:	cmp	r2, r1
   12f34:	bcc	12f70 <flatcc_verify_union_string@@Base+0x58>
   12f38:	tst	r3, #3
   12f3c:	bne	12f70 <flatcc_verify_union_string@@Base+0x58>
   12f40:	ldr	r0, [r0]
   12f44:	sub	r2, r2, r1
   12f48:	ldr	r3, [r0, r3]
   12f4c:	add	ip, r3, #1
   12f50:	cmp	r2, ip
   12f54:	bcc	12f78 <flatcc_verify_union_string@@Base+0x60>
   12f58:	add	r1, r0, r1
   12f5c:	ldrb	r3, [r1, r3]
   12f60:	cmp	r3, #0
   12f64:	moveq	r0, #0
   12f68:	movne	r0, #7
   12f6c:	bx	lr
   12f70:	mov	r0, #17
   12f74:	bx	lr
   12f78:	mov	r0, #8
   12f7c:	bx	lr

00012f80 <flatcc_verify_buffer_header@@Base>:
   12f80:	tst	r0, #3
   12f84:	bne	12ff0 <flatcc_verify_buffer_header@@Base+0x70>
   12f88:	cmn	r1, #9
   12f8c:	bhi	12ff8 <flatcc_verify_buffer_header@@Base+0x78>
   12f90:	cmp	r1, #7
   12f94:	bls	12fe8 <flatcc_verify_buffer_header@@Base+0x68>
   12f98:	cmp	r2, #0
   12f9c:	beq	13000 <flatcc_verify_buffer_header@@Base+0x80>
   12fa0:	mov	r1, r2
   12fa4:	mov	r2, #4
   12fa8:	str	r4, [sp, #-8]!
   12fac:	str	lr, [sp, #4]
   12fb0:	sub	sp, sp, #8
   12fb4:	mov	r4, r0
   12fb8:	add	r0, sp, r2
   12fbc:	bl	10d78 <strncpy@plt>
   12fc0:	ldr	r2, [r4, #4]
   12fc4:	ldr	r3, [sp, #4]
   12fc8:	cmp	r3, #0
   12fcc:	cmpne	r2, r3
   12fd0:	movne	r0, #2
   12fd4:	moveq	r0, #0
   12fd8:	add	sp, sp, #8
   12fdc:	ldr	r4, [sp]
   12fe0:	add	sp, sp, #4
   12fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fe8:	mov	r0, #1
   12fec:	bx	lr
   12ff0:	mov	r0, #5
   12ff4:	bx	lr
   12ff8:	mov	r0, #6
   12ffc:	bx	lr
   13000:	mov	r0, #0
   13004:	bx	lr

00013008 <flatcc_verify_typed_buffer_header@@Base>:
   13008:	tst	r0, #3
   1300c:	bne	13044 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   13010:	cmn	r1, #9
   13014:	bhi	13054 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   13018:	cmp	r1, #7
   1301c:	bls	1303c <flatcc_verify_typed_buffer_header@@Base+0x34>
   13020:	cmp	r2, #0
   13024:	beq	1304c <flatcc_verify_typed_buffer_header@@Base+0x44>
   13028:	ldr	r0, [r0, #4]
   1302c:	cmp	r2, r0
   13030:	movne	r0, #2
   13034:	moveq	r0, #0
   13038:	bx	lr
   1303c:	mov	r0, #1
   13040:	bx	lr
   13044:	mov	r0, #5
   13048:	bx	lr
   1304c:	mov	r0, r2
   13050:	bx	lr
   13054:	mov	r0, #6
   13058:	bx	lr

0001305c <flatcc_verify_struct_as_root@@Base>:
   1305c:	tst	r0, #3
   13060:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13064:	strd	r6, [sp, #8]
   13068:	movne	r0, #5
   1306c:	strd	r8, [sp, #16]
   13070:	str	lr, [sp, #24]
   13074:	sub	sp, sp, #12
   13078:	ldrh	r5, [sp, #40]	; 0x28
   1307c:	bne	13118 <flatcc_verify_struct_as_root@@Base+0xbc>
   13080:	cmn	r1, #9
   13084:	movhi	r0, #6
   13088:	bhi	13118 <flatcc_verify_struct_as_root@@Base+0xbc>
   1308c:	cmp	r1, #7
   13090:	movls	r0, #1
   13094:	bls	13118 <flatcc_verify_struct_as_root@@Base+0xbc>
   13098:	cmp	r2, #0
   1309c:	mov	r7, r3
   130a0:	mov	r8, r2
   130a4:	mov	r6, r1
   130a8:	mov	r4, r0
   130ac:	beq	130d4 <flatcc_verify_struct_as_root@@Base+0x78>
   130b0:	mov	r2, #4
   130b4:	mov	r1, r8
   130b8:	add	r0, sp, r2
   130bc:	bl	10d78 <strncpy@plt>
   130c0:	ldr	r9, [r4, #4]
   130c4:	ldr	r3, [sp, #4]
   130c8:	cmp	r3, r9
   130cc:	cmpne	r3, #0
   130d0:	bne	13140 <flatcc_verify_struct_as_root@@Base+0xe4>
   130d4:	ldr	r2, [r4]
   130d8:	cmp	r6, r2
   130dc:	movcs	r0, #0
   130e0:	movcc	r0, #1
   130e4:	cmp	r2, #0
   130e8:	moveq	r0, #1
   130ec:	cmp	r0, #0
   130f0:	bne	13130 <flatcc_verify_struct_as_root@@Base+0xd4>
   130f4:	adds	r3, r7, r2
   130f8:	bcs	13168 <flatcc_verify_struct_as_root@@Base+0x10c>
   130fc:	cmp	r6, r3
   13100:	bcc	13138 <flatcc_verify_struct_as_root@@Base+0xdc>
   13104:	sub	r5, r5, #1
   13108:	tst	r5, r2
   1310c:	movne	r0, #11
   13110:	bne	13118 <flatcc_verify_struct_as_root@@Base+0xbc>
   13114:	mov	r0, #0
   13118:	add	sp, sp, #12
   1311c:	ldrd	r4, [sp]
   13120:	ldrd	r6, [sp, #8]
   13124:	ldrd	r8, [sp, #16]
   13128:	add	sp, sp, #24
   1312c:	pop	{pc}		; (ldr pc, [sp], #4)
   13130:	mov	r0, #18
   13134:	b	13118 <flatcc_verify_struct_as_root@@Base+0xbc>
   13138:	mov	r0, #9
   1313c:	b	13118 <flatcc_verify_struct_as_root@@Base+0xbc>
   13140:	mov	r1, r8
   13144:	add	r0, sp, #4
   13148:	mov	r2, #4
   1314c:	bl	10d78 <strncpy@plt>
   13150:	ldr	r3, [sp, #4]
   13154:	cmp	r9, r3
   13158:	cmpne	r3, #0
   1315c:	beq	13114 <flatcc_verify_struct_as_root@@Base+0xb8>
   13160:	mov	r0, #2
   13164:	b	13118 <flatcc_verify_struct_as_root@@Base+0xbc>
   13168:	mov	r0, #10
   1316c:	b	13118 <flatcc_verify_struct_as_root@@Base+0xbc>

00013170 <flatcc_verify_struct_as_typed_root@@Base>:
   13170:	tst	r0, #3
   13174:	push	{lr}		; (str lr, [sp, #-4]!)
   13178:	movne	r0, #5
   1317c:	ldrh	ip, [sp, #4]
   13180:	bne	131f8 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   13184:	cmn	r1, #9
   13188:	movhi	r0, #6
   1318c:	bhi	131f8 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   13190:	cmp	r1, #7
   13194:	movls	r0, #1
   13198:	bls	131f8 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   1319c:	cmp	r2, #0
   131a0:	beq	131b4 <flatcc_verify_struct_as_typed_root@@Base+0x44>
   131a4:	ldr	lr, [r0, #4]
   131a8:	cmp	r2, lr
   131ac:	movne	r0, #2
   131b0:	bne	131f8 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   131b4:	ldr	r2, [r0]
   131b8:	cmp	r1, r2
   131bc:	movcs	r0, #0
   131c0:	movcc	r0, #1
   131c4:	cmp	r2, #0
   131c8:	moveq	r0, #1
   131cc:	cmp	r0, #0
   131d0:	movne	r0, #18
   131d4:	bne	131f8 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   131d8:	adds	r3, r3, r2
   131dc:	bcs	13204 <flatcc_verify_struct_as_typed_root@@Base+0x94>
   131e0:	cmp	r1, r3
   131e4:	bcc	131fc <flatcc_verify_struct_as_typed_root@@Base+0x8c>
   131e8:	sub	ip, ip, #1
   131ec:	tst	ip, r2
   131f0:	moveq	r0, #0
   131f4:	movne	r0, #11
   131f8:	pop	{pc}		; (ldr pc, [sp], #4)
   131fc:	mov	r0, #9
   13200:	b	131f8 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   13204:	mov	r0, #10
   13208:	b	131f8 <flatcc_verify_struct_as_typed_root@@Base+0x88>

0001320c <flatcc_verify_table_as_root@@Base>:
   1320c:	tst	r0, #3
   13210:	bne	13340 <flatcc_verify_table_as_root@@Base+0x134>
   13214:	cmn	r1, #9
   13218:	bhi	13370 <flatcc_verify_table_as_root@@Base+0x164>
   1321c:	cmp	r1, #7
   13220:	bls	1331c <flatcc_verify_table_as_root@@Base+0x110>
   13224:	cmp	r2, #0
   13228:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1322c:	mov	r4, r2
   13230:	mov	r5, r0
   13234:	strd	r6, [sp, #8]
   13238:	mov	r7, r3
   1323c:	mov	r6, r1
   13240:	str	r8, [sp, #16]
   13244:	str	lr, [sp, #20]
   13248:	sub	sp, sp, #24
   1324c:	beq	13274 <flatcc_verify_table_as_root@@Base+0x68>
   13250:	mov	r2, #4
   13254:	mov	r0, sp
   13258:	mov	r1, r4
   1325c:	bl	10d78 <strncpy@plt>
   13260:	ldr	r3, [sp]
   13264:	ldr	r8, [r5, #4]
   13268:	cmp	r3, r8
   1326c:	cmpne	r3, #0
   13270:	bne	13348 <flatcc_verify_table_as_root@@Base+0x13c>
   13274:	ldr	r2, [r5]
   13278:	mov	r3, #99	; 0x63
   1327c:	str	r3, [sp, #8]
   13280:	cmp	r2, #0
   13284:	beq	13324 <flatcc_verify_table_as_root@@Base+0x118>
   13288:	add	r3, r2, #4
   1328c:	cmp	r6, r3
   13290:	bcc	13324 <flatcc_verify_table_as_root@@Base+0x118>
   13294:	tst	r2, #3
   13298:	bne	13324 <flatcc_verify_table_as_root@@Base+0x118>
   1329c:	ldr	r3, [r5, r2]
   132a0:	str	r2, [sp, #16]
   132a4:	subs	r3, r2, r3
   132a8:	bmi	13378 <flatcc_verify_table_as_root@@Base+0x16c>
   132ac:	tst	r3, #1
   132b0:	bne	13378 <flatcc_verify_table_as_root@@Base+0x16c>
   132b4:	add	r0, r3, #2
   132b8:	cmp	r6, r0
   132bc:	movcc	r0, #27
   132c0:	bcc	13328 <flatcc_verify_table_as_root@@Base+0x11c>
   132c4:	ldrh	r1, [r5, r3]
   132c8:	add	ip, r5, r3
   132cc:	add	r3, r1, r3
   132d0:	strh	r1, [sp, #22]
   132d4:	cmp	r6, r3
   132d8:	bcc	13380 <flatcc_verify_table_as_root@@Base+0x174>
   132dc:	tst	r1, #1
   132e0:	bne	13380 <flatcc_verify_table_as_root@@Base+0x174>
   132e4:	cmp	r1, #3
   132e8:	movls	r0, #28
   132ec:	bls	13328 <flatcc_verify_table_as_root@@Base+0x11c>
   132f0:	ldrh	r3, [r5, r0]
   132f4:	sub	r2, r6, r2
   132f8:	cmp	r2, r3
   132fc:	strh	r3, [sp, #20]
   13300:	movcc	r0, #20
   13304:	bcc	13328 <flatcc_verify_table_as_root@@Base+0x11c>
   13308:	mov	r0, sp
   1330c:	stm	sp, {r5, r6}
   13310:	str	ip, [sp, #12]
   13314:	blx	r7
   13318:	b	13328 <flatcc_verify_table_as_root@@Base+0x11c>
   1331c:	mov	r0, #1
   13320:	bx	lr
   13324:	mov	r0, #15
   13328:	add	sp, sp, #24
   1332c:	ldrd	r4, [sp]
   13330:	ldrd	r6, [sp, #8]
   13334:	ldr	r8, [sp, #16]
   13338:	add	sp, sp, #20
   1333c:	pop	{pc}		; (ldr pc, [sp], #4)
   13340:	mov	r0, #5
   13344:	bx	lr
   13348:	mov	r1, r4
   1334c:	mov	r0, sp
   13350:	mov	r2, #4
   13354:	bl	10d78 <strncpy@plt>
   13358:	ldr	r3, [sp]
   1335c:	cmp	r8, r3
   13360:	cmpne	r3, #0
   13364:	moveq	r0, #0
   13368:	movne	r0, #2
   1336c:	b	13328 <flatcc_verify_table_as_root@@Base+0x11c>
   13370:	mov	r0, #6
   13374:	bx	lr
   13378:	mov	r0, #29
   1337c:	b	13328 <flatcc_verify_table_as_root@@Base+0x11c>
   13380:	mov	r0, #30
   13384:	b	13328 <flatcc_verify_table_as_root@@Base+0x11c>

00013388 <flatcc_verify_table_as_typed_root@@Base>:
   13388:	tst	r0, #3
   1338c:	bne	13478 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   13390:	cmn	r1, #9
   13394:	bhi	13494 <flatcc_verify_table_as_typed_root@@Base+0x10c>
   13398:	cmp	r1, #7
   1339c:	bls	13470 <flatcc_verify_table_as_typed_root@@Base+0xe8>
   133a0:	cmp	r2, #0
   133a4:	beq	133b4 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   133a8:	ldr	ip, [r0, #4]
   133ac:	cmp	r2, ip
   133b0:	bne	1349c <flatcc_verify_table_as_typed_root@@Base+0x114>
   133b4:	ldr	r2, [r0]
   133b8:	mov	ip, #99	; 0x63
   133bc:	strd	r4, [sp, #-12]!
   133c0:	str	lr, [sp, #8]
   133c4:	sub	sp, sp, #28
   133c8:	str	ip, [sp, #8]
   133cc:	cmp	r2, #0
   133d0:	beq	13480 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   133d4:	add	ip, r2, #4
   133d8:	cmp	r1, ip
   133dc:	bcc	13480 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   133e0:	tst	r2, #3
   133e4:	bne	13480 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   133e8:	ldr	ip, [r0, r2]
   133ec:	str	r2, [sp, #16]
   133f0:	subs	ip, r2, ip
   133f4:	bmi	134a4 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   133f8:	tst	ip, #1
   133fc:	bne	134a4 <flatcc_verify_table_as_typed_root@@Base+0x11c>
   13400:	add	r4, ip, #2
   13404:	cmp	r1, r4
   13408:	movcc	r0, #27
   1340c:	bcc	13484 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13410:	ldrh	lr, [r0, ip]
   13414:	add	r5, r0, ip
   13418:	add	ip, lr, ip
   1341c:	strh	lr, [sp, #22]
   13420:	cmp	r1, ip
   13424:	bcc	134ac <flatcc_verify_table_as_typed_root@@Base+0x124>
   13428:	tst	lr, #1
   1342c:	bne	134ac <flatcc_verify_table_as_typed_root@@Base+0x124>
   13430:	cmp	lr, #3
   13434:	movls	r0, #28
   13438:	bls	13484 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1343c:	ldrh	ip, [r0, r4]
   13440:	sub	r2, r1, r2
   13444:	cmp	r2, ip
   13448:	strh	ip, [sp, #20]
   1344c:	movcc	r0, #20
   13450:	bcc	13484 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13454:	mov	r2, r0
   13458:	mov	r0, sp
   1345c:	str	r2, [sp]
   13460:	str	r1, [sp, #4]
   13464:	str	r5, [sp, #12]
   13468:	blx	r3
   1346c:	b	13484 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   13470:	mov	r0, #1
   13474:	bx	lr
   13478:	mov	r0, #5
   1347c:	bx	lr
   13480:	mov	r0, #15
   13484:	add	sp, sp, #28
   13488:	ldrd	r4, [sp]
   1348c:	add	sp, sp, #8
   13490:	pop	{pc}		; (ldr pc, [sp], #4)
   13494:	mov	r0, #6
   13498:	bx	lr
   1349c:	mov	r0, #2
   134a0:	bx	lr
   134a4:	mov	r0, #29
   134a8:	b	13484 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   134ac:	mov	r0, #30
   134b0:	b	13484 <flatcc_verify_table_as_typed_root@@Base+0xfc>

000134b4 <flatcc_verify_struct_as_nested_root@@Base>:
   134b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   134b8:	add	ip, r1, #2
   134bc:	lsl	ip, ip, #1
   134c0:	strd	r6, [sp, #8]
   134c4:	str	lr, [sp, #20]
   134c8:	ldrh	lr, [r0, #22]
   134cc:	uxth	ip, ip
   134d0:	str	r8, [sp, #16]
   134d4:	sub	sp, sp, #8
   134d8:	ldrh	r4, [sp, #36]	; 0x24
   134dc:	cmp	lr, ip
   134e0:	bls	13630 <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   134e4:	ldr	r1, [r0, #12]
   134e8:	ldrh	ip, [r1, ip]
   134ec:	cmp	ip, #0
   134f0:	beq	13630 <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   134f4:	ldrh	r2, [r0, #20]
   134f8:	add	r1, ip, #4
   134fc:	cmp	r1, r2
   13500:	movhi	r0, #13
   13504:	bhi	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13508:	ldr	r2, [r0, #16]
   1350c:	add	r2, ip, r2
   13510:	tst	r2, #3
   13514:	movne	r0, #12
   13518:	bne	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   1351c:	cmp	r2, #0
   13520:	ldr	ip, [r0]
   13524:	beq	13568 <flatcc_verify_struct_as_nested_root@@Base+0xb4>
   13528:	ldr	lr, [ip, r2]
   1352c:	add	lr, r2, lr
   13530:	cmp	r2, lr
   13534:	bcs	13628 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   13538:	ldr	r1, [r0, #4]
   1353c:	add	r0, lr, #4
   13540:	cmp	r1, r0
   13544:	bcc	13628 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   13548:	tst	r0, #3
   1354c:	bne	13628 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   13550:	ldr	lr, [ip, lr]
   13554:	sub	r1, r1, r0
   13558:	mul	r0, lr, r4
   1355c:	cmp	r1, r0
   13560:	movcc	r0, #26
   13564:	bcc	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13568:	adds	r1, ip, r2
   1356c:	beq	13638 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   13570:	ldr	r2, [ip, r2]
   13574:	add	r7, r1, r2
   13578:	tst	r7, #3
   1357c:	movne	r0, #5
   13580:	bne	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13584:	ldr	r6, [r1, r2]
   13588:	cmn	r6, #9
   1358c:	movhi	r0, #6
   13590:	bhi	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13594:	cmp	r6, #7
   13598:	movls	r0, #1
   1359c:	bls	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   135a0:	cmp	r3, #0
   135a4:	beq	135d0 <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   135a8:	mov	r2, #4
   135ac:	mov	r1, r3
   135b0:	add	r0, sp, r2
   135b4:	mov	r5, r3
   135b8:	bl	10d78 <strncpy@plt>
   135bc:	ldr	r3, [sp, #4]
   135c0:	ldr	r8, [r7, #8]
   135c4:	cmp	r3, r8
   135c8:	cmpne	r3, #0
   135cc:	bne	13658 <flatcc_verify_struct_as_nested_root@@Base+0x1a4>
   135d0:	ldr	r2, [r7, #4]
   135d4:	clz	r3, r2
   135d8:	lsr	r3, r3, #5
   135dc:	cmp	r6, r2
   135e0:	orrcc	r3, r3, #1
   135e4:	cmp	r3, #0
   135e8:	bne	13648 <flatcc_verify_struct_as_nested_root@@Base+0x194>
   135ec:	ldr	r3, [sp, #32]
   135f0:	adds	r3, r3, r2
   135f4:	bcs	13680 <flatcc_verify_struct_as_nested_root@@Base+0x1cc>
   135f8:	cmp	r6, r3
   135fc:	bcc	13650 <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   13600:	sub	r4, r4, #1
   13604:	tst	r4, r2
   13608:	movne	r0, #11
   1360c:	beq	13638 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   13610:	add	sp, sp, #8
   13614:	ldrd	r4, [sp]
   13618:	ldrd	r6, [sp, #8]
   1361c:	ldr	r8, [sp, #16]
   13620:	add	sp, sp, #20
   13624:	pop	{pc}		; (ldr pc, [sp], #4)
   13628:	mov	r0, #16
   1362c:	b	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13630:	cmp	r2, #0
   13634:	bne	13640 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   13638:	mov	r0, #0
   1363c:	b	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13640:	mov	r0, #4
   13644:	b	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13648:	mov	r0, #18
   1364c:	b	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13650:	mov	r0, #9
   13654:	b	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13658:	mov	r1, r5
   1365c:	add	r0, sp, #4
   13660:	mov	r2, #4
   13664:	bl	10d78 <strncpy@plt>
   13668:	ldr	r3, [sp, #4]
   1366c:	cmp	r8, r3
   13670:	cmpne	r3, #0
   13674:	beq	13638 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   13678:	mov	r0, #2
   1367c:	b	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   13680:	mov	r0, #10
   13684:	b	13610 <flatcc_verify_struct_as_nested_root@@Base+0x15c>

00013688 <flatcc_verify_table_as_nested_root@@Base>:
   13688:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1368c:	add	ip, r1, #2
   13690:	lsl	ip, ip, #1
   13694:	strd	r6, [sp, #8]
   13698:	str	lr, [sp, #24]
   1369c:	ldrh	lr, [r0, #22]
   136a0:	uxth	ip, ip
   136a4:	strd	r8, [sp, #16]
   136a8:	sub	sp, sp, #28
   136ac:	ldrh	r4, [sp, #56]	; 0x38
   136b0:	cmp	lr, ip
   136b4:	bls	13880 <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   136b8:	ldr	r1, [r0, #12]
   136bc:	ldrh	ip, [r1, ip]
   136c0:	cmp	ip, #0
   136c4:	beq	13880 <flatcc_verify_table_as_nested_root@@Base+0x1f8>
   136c8:	ldrh	r2, [r0, #20]
   136cc:	add	r1, ip, #4
   136d0:	cmp	r1, r2
   136d4:	movhi	r0, #13
   136d8:	bhi	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   136dc:	ldr	r2, [r0, #16]
   136e0:	add	r2, ip, r2
   136e4:	tst	r2, #3
   136e8:	movne	r0, #12
   136ec:	bne	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   136f0:	cmp	r2, #0
   136f4:	ldr	ip, [r0]
   136f8:	beq	1373c <flatcc_verify_table_as_nested_root@@Base+0xb4>
   136fc:	ldr	lr, [ip, r2]
   13700:	add	lr, r2, lr
   13704:	cmp	r2, lr
   13708:	bcs	13878 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   1370c:	ldr	r1, [r0, #4]
   13710:	add	r5, lr, #4
   13714:	cmp	r1, r5
   13718:	bcc	13878 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   1371c:	tst	r5, #3
   13720:	bne	13878 <flatcc_verify_table_as_nested_root@@Base+0x1f0>
   13724:	ldr	lr, [ip, lr]
   13728:	sub	r1, r1, r5
   1372c:	mul	r4, lr, r4
   13730:	cmp	r1, r4
   13734:	movcc	r0, #26
   13738:	bcc	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1373c:	adds	r1, ip, r2
   13740:	beq	13888 <flatcc_verify_table_as_nested_root@@Base+0x200>
   13744:	ldr	r2, [ip, r2]
   13748:	add	r6, r1, r2
   1374c:	add	r7, r6, #4
   13750:	tst	r7, #3
   13754:	movne	r0, #5
   13758:	bne	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1375c:	ldr	r8, [r1, r2]
   13760:	cmn	r8, #9
   13764:	movhi	r0, #6
   13768:	bhi	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1376c:	cmp	r8, #7
   13770:	movls	r0, #1
   13774:	bls	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   13778:	cmp	r3, #0
   1377c:	mov	r5, r3
   13780:	mov	r4, r0
   13784:	beq	137ac <flatcc_verify_table_as_nested_root@@Base+0x124>
   13788:	mov	r1, r3
   1378c:	mov	r2, #4
   13790:	mov	r0, sp
   13794:	bl	10d78 <strncpy@plt>
   13798:	ldr	r3, [sp]
   1379c:	ldr	r9, [r6, #8]
   137a0:	cmp	r3, r9
   137a4:	cmpne	r3, #0
   137a8:	bne	138a8 <flatcc_verify_table_as_nested_root@@Base+0x220>
   137ac:	ldr	r3, [r4, #8]
   137b0:	ldr	r2, [r6, #4]
   137b4:	sub	r3, r3, #1
   137b8:	cmp	r3, #0
   137bc:	str	r3, [sp, #8]
   137c0:	beq	138a0 <flatcc_verify_table_as_nested_root@@Base+0x218>
   137c4:	cmp	r2, #0
   137c8:	beq	13890 <flatcc_verify_table_as_nested_root@@Base+0x208>
   137cc:	add	r3, r2, #4
   137d0:	cmp	r8, r3
   137d4:	bcc	13890 <flatcc_verify_table_as_nested_root@@Base+0x208>
   137d8:	tst	r2, #3
   137dc:	bne	13890 <flatcc_verify_table_as_nested_root@@Base+0x208>
   137e0:	str	r2, [sp, #16]
   137e4:	ldr	r3, [r7, r2]
   137e8:	subs	r3, r2, r3
   137ec:	bmi	138d0 <flatcc_verify_table_as_nested_root@@Base+0x248>
   137f0:	tst	r3, #1
   137f4:	bne	138d0 <flatcc_verify_table_as_nested_root@@Base+0x248>
   137f8:	add	r0, r3, #2
   137fc:	cmp	r8, r0
   13800:	movcc	r0, #27
   13804:	bcc	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   13808:	ldrh	r1, [r7, r3]
   1380c:	add	ip, r7, r3
   13810:	add	r3, r1, r3
   13814:	strh	r1, [sp, #22]
   13818:	cmp	r8, r3
   1381c:	bcc	138d8 <flatcc_verify_table_as_nested_root@@Base+0x250>
   13820:	tst	r1, #1
   13824:	bne	138d8 <flatcc_verify_table_as_nested_root@@Base+0x250>
   13828:	cmp	r1, #3
   1382c:	movls	r0, #28
   13830:	bls	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   13834:	ldrh	r3, [r7, r0]
   13838:	sub	r2, r8, r2
   1383c:	cmp	r2, r3
   13840:	strh	r3, [sp, #20]
   13844:	movcc	r0, #20
   13848:	bcc	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   1384c:	mov	r0, sp
   13850:	ldr	r3, [sp, #60]	; 0x3c
   13854:	stm	sp, {r7, r8}
   13858:	str	ip, [sp, #12]
   1385c:	blx	r3
   13860:	add	sp, sp, #28
   13864:	ldrd	r4, [sp]
   13868:	ldrd	r6, [sp, #8]
   1386c:	ldrd	r8, [sp, #16]
   13870:	add	sp, sp, #24
   13874:	pop	{pc}		; (ldr pc, [sp], #4)
   13878:	mov	r0, #16
   1387c:	b	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   13880:	cmp	r2, #0
   13884:	bne	13898 <flatcc_verify_table_as_nested_root@@Base+0x210>
   13888:	mov	r0, #0
   1388c:	b	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   13890:	mov	r0, #15
   13894:	b	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   13898:	mov	r0, #4
   1389c:	b	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   138a0:	mov	r0, #3
   138a4:	b	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   138a8:	mov	r1, r5
   138ac:	mov	r0, sp
   138b0:	mov	r2, #4
   138b4:	bl	10d78 <strncpy@plt>
   138b8:	ldr	r3, [sp]
   138bc:	cmp	r9, r3
   138c0:	cmpne	r3, #0
   138c4:	movne	r0, #2
   138c8:	beq	13888 <flatcc_verify_table_as_nested_root@@Base+0x200>
   138cc:	b	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   138d0:	mov	r0, #29
   138d4:	b	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
   138d8:	mov	r0, #30
   138dc:	b	13860 <flatcc_verify_table_as_nested_root@@Base+0x1d8>

000138e0 <flatcc_verify_union_field@@Base>:
   138e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   138e4:	add	r1, r1, #1
   138e8:	ldr	r4, [r0, #12]
   138ec:	lsl	r1, r1, #1
   138f0:	strd	r6, [sp, #8]
   138f4:	str	lr, [sp, #16]
   138f8:	uxth	r1, r1
   138fc:	sub	sp, sp, #28
   13900:	ldrh	lr, [r0, #22]
   13904:	cmp	r1, lr
   13908:	bcs	139b4 <flatcc_verify_union_field@@Base+0xd4>
   1390c:	ldrh	ip, [r4, r1]
   13910:	cmp	ip, #0
   13914:	beq	139b4 <flatcc_verify_union_field@@Base+0xd4>
   13918:	ldrh	r5, [r0, #20]
   1391c:	add	r6, ip, #1
   13920:	cmp	r6, r5
   13924:	bhi	13a04 <flatcc_verify_union_field@@Base+0x124>
   13928:	ldr	r6, [r0]
   1392c:	add	r1, r1, #2
   13930:	uxth	r1, r1
   13934:	ldr	r7, [r0, #16]
   13938:	cmp	lr, r1
   1393c:	add	lr, ip, r7
   13940:	ldrb	ip, [r6, lr]
   13944:	bls	13a0c <flatcc_verify_union_field@@Base+0x12c>
   13948:	cmp	ip, #0
   1394c:	ldrh	r1, [r4, r1]
   13950:	beq	139f4 <flatcc_verify_union_field@@Base+0x114>
   13954:	cmp	r1, #0
   13958:	beq	13a1c <flatcc_verify_union_field@@Base+0x13c>
   1395c:	add	r2, r1, #4
   13960:	cmp	r5, r2
   13964:	bcc	13a04 <flatcc_verify_union_field@@Base+0x124>
   13968:	add	r1, r1, r7
   1396c:	tst	r1, #3
   13970:	movne	r0, #12
   13974:	bne	139e0 <flatcc_verify_union_field@@Base+0x100>
   13978:	cmp	r1, #0
   1397c:	beq	13a2c <flatcc_verify_union_field@@Base+0x14c>
   13980:	mov	r2, r0
   13984:	str	r1, [sp, #16]
   13988:	mov	r0, sp
   1398c:	ldr	ip, [r2, #4]
   13990:	ldr	r2, [r2, #8]
   13994:	stm	sp, {r6, ip}
   13998:	str	r2, [sp, #8]
   1399c:	ldr	r2, [r6, r1]
   139a0:	str	r2, [sp, #20]
   139a4:	ldrb	r2, [r6, lr]
   139a8:	strb	r2, [sp, #12]
   139ac:	blx	r3
   139b0:	b	139e0 <flatcc_verify_union_field@@Base+0x100>
   139b4:	add	r1, r1, #2
   139b8:	uxth	r1, r1
   139bc:	cmp	lr, r1
   139c0:	bls	139d4 <flatcc_verify_union_field@@Base+0xf4>
   139c4:	ldrh	r3, [r4, r1]
   139c8:	cmp	r3, #0
   139cc:	movne	r0, #23
   139d0:	bne	139e0 <flatcc_verify_union_field@@Base+0x100>
   139d4:	cmp	r2, #0
   139d8:	moveq	r0, #0
   139dc:	movne	r0, #21
   139e0:	add	sp, sp, #28
   139e4:	ldrd	r4, [sp]
   139e8:	ldrd	r6, [sp, #8]
   139ec:	add	sp, sp, #16
   139f0:	pop	{pc}		; (ldr pc, [sp], #4)
   139f4:	cmp	r1, #0
   139f8:	movne	r0, #24
   139fc:	moveq	r0, #0
   13a00:	b	139e0 <flatcc_verify_union_field@@Base+0x100>
   13a04:	mov	r0, #13
   13a08:	b	139e0 <flatcc_verify_union_field@@Base+0x100>
   13a0c:	cmp	ip, #0
   13a10:	bne	13a1c <flatcc_verify_union_field@@Base+0x13c>
   13a14:	mov	r0, ip
   13a18:	b	139e0 <flatcc_verify_union_field@@Base+0x100>
   13a1c:	cmp	r2, #0
   13a20:	moveq	r0, #0
   13a24:	movne	r0, #4
   13a28:	b	139e0 <flatcc_verify_union_field@@Base+0x100>
   13a2c:	mov	r0, r1
   13a30:	b	139e0 <flatcc_verify_union_field@@Base+0x100>

00013a34 <flatcc_verify_union_vector_field@@Base>:
   13a34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13a38:	add	r1, r1, #1
   13a3c:	ldrh	r4, [r0, #22]
   13a40:	lsl	r1, r1, #1
   13a44:	uxth	r1, r1
   13a48:	ldr	r5, [r0, #12]
   13a4c:	strd	r6, [sp, #8]
   13a50:	strd	r8, [sp, #16]
   13a54:	cmp	r1, r4
   13a58:	strd	sl, [sp, #24]
   13a5c:	str	lr, [sp, #32]
   13a60:	sub	sp, sp, #28
   13a64:	bcs	13b6c <flatcc_verify_union_vector_field@@Base+0x138>
   13a68:	ldrh	ip, [r5, r1]
   13a6c:	cmp	ip, #0
   13a70:	beq	13b6c <flatcc_verify_union_vector_field@@Base+0x138>
   13a74:	ldrh	r7, [r0, #20]
   13a78:	add	lr, ip, #4
   13a7c:	cmp	lr, r7
   13a80:	bhi	13ba8 <flatcc_verify_union_vector_field@@Base+0x174>
   13a84:	ldr	r8, [r0, #16]
   13a88:	add	ip, ip, r8
   13a8c:	tst	ip, #3
   13a90:	bne	13bd4 <flatcc_verify_union_vector_field@@Base+0x1a0>
   13a94:	ldr	r6, [r0]
   13a98:	cmp	ip, #0
   13a9c:	add	lr, r6, ip
   13aa0:	beq	13ae4 <flatcc_verify_union_vector_field@@Base+0xb0>
   13aa4:	ldr	r9, [r6, ip]
   13aa8:	add	sl, ip, r9
   13aac:	cmp	ip, sl
   13ab0:	bcs	13b4c <flatcc_verify_union_vector_field@@Base+0x118>
   13ab4:	ldr	ip, [r0, #4]
   13ab8:	add	fp, sl, #4
   13abc:	cmp	ip, fp
   13ac0:	bcc	13b4c <flatcc_verify_union_vector_field@@Base+0x118>
   13ac4:	tst	fp, #3
   13ac8:	bne	13b4c <flatcc_verify_union_vector_field@@Base+0x118>
   13acc:	ldr	sl, [r6, sl]
   13ad0:	sub	ip, ip, fp
   13ad4:	cmp	sl, ip
   13ad8:	bls	13af0 <flatcc_verify_union_vector_field@@Base+0xbc>
   13adc:	mov	r0, #26
   13ae0:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13ae4:	cmp	lr, #0
   13ae8:	beq	13bcc <flatcc_verify_union_vector_field@@Base+0x198>
   13aec:	ldr	r9, [r6]
   13af0:	add	r1, r1, #2
   13af4:	uxth	r1, r1
   13af8:	cmp	r4, r1
   13afc:	bls	13b88 <flatcc_verify_union_vector_field@@Base+0x154>
   13b00:	ldrh	r1, [r5, r1]
   13b04:	cmp	r1, #0
   13b08:	beq	13b88 <flatcc_verify_union_vector_field@@Base+0x154>
   13b0c:	add	r2, r1, #4
   13b10:	cmp	r2, r7
   13b14:	bhi	13ba8 <flatcc_verify_union_vector_field@@Base+0x174>
   13b18:	add	r8, r1, r8
   13b1c:	tst	r8, #3
   13b20:	bne	13bd4 <flatcc_verify_union_vector_field@@Base+0x1a0>
   13b24:	cmp	r8, #0
   13b28:	beq	13bcc <flatcc_verify_union_vector_field@@Base+0x198>
   13b2c:	ldr	r1, [r0, #8]
   13b30:	ldr	r2, [r6, r8]
   13b34:	cmp	r1, #0
   13b38:	movle	r0, #3
   13b3c:	ble	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13b40:	add	r2, r8, r2
   13b44:	cmp	r8, r2
   13b48:	bcc	13bdc <flatcc_verify_union_vector_field@@Base+0x1a8>
   13b4c:	mov	r0, #16
   13b50:	add	sp, sp, #28
   13b54:	ldrd	r4, [sp]
   13b58:	ldrd	r6, [sp, #8]
   13b5c:	ldrd	r8, [sp, #16]
   13b60:	ldrd	sl, [sp, #24]
   13b64:	add	sp, sp, #32
   13b68:	pop	{pc}		; (ldr pc, [sp], #4)
   13b6c:	add	r1, r1, #2
   13b70:	uxth	r1, r1
   13b74:	cmp	r4, r1
   13b78:	bls	13b98 <flatcc_verify_union_vector_field@@Base+0x164>
   13b7c:	ldrh	r3, [r5, r1]
   13b80:	cmp	r3, #0
   13b84:	beq	13b98 <flatcc_verify_union_vector_field@@Base+0x164>
   13b88:	cmp	r2, #0
   13b8c:	moveq	r0, #0
   13b90:	movne	r0, #4
   13b94:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13b98:	cmp	r2, #0
   13b9c:	moveq	r0, #0
   13ba0:	movne	r0, #22
   13ba4:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13ba8:	mov	r0, #13
   13bac:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13bb0:	ldr	r3, [r6, r2]
   13bb4:	cmn	r3, #-1073741823	; 0xc0000001
   13bb8:	movhi	r0, #25
   13bbc:	bhi	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13bc0:	sub	r0, r4, r0
   13bc4:	cmp	r0, r3, lsl #2
   13bc8:	bcc	13adc <flatcc_verify_union_vector_field@@Base+0xa8>
   13bcc:	mov	r0, #0
   13bd0:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13bd4:	mov	r0, #12
   13bd8:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13bdc:	ldr	r4, [r0, #4]
   13be0:	add	r0, r2, #4
   13be4:	cmp	r4, r0
   13be8:	bcc	13b4c <flatcc_verify_union_vector_field@@Base+0x118>
   13bec:	tst	r0, #3
   13bf0:	bne	13b4c <flatcc_verify_union_vector_field@@Base+0x118>
   13bf4:	ldr	ip, [r6, r2]
   13bf8:	add	r5, r6, r2
   13bfc:	cmn	ip, #-1073741823	; 0xc0000001
   13c00:	bhi	13bb0 <flatcc_verify_union_vector_field@@Base+0x17c>
   13c04:	sub	r7, r4, r0
   13c08:	cmp	r7, ip, lsl #2
   13c0c:	bcc	13bb0 <flatcc_verify_union_vector_field@@Base+0x17c>
   13c10:	ldr	r2, [lr, r9]
   13c14:	add	r0, lr, r9
   13c18:	cmp	r2, ip
   13c1c:	bne	13ca8 <flatcc_verify_union_vector_field@@Base+0x274>
   13c20:	sub	r1, r1, #1
   13c24:	cmp	ip, #0
   13c28:	str	r6, [sp]
   13c2c:	str	r4, [sp, #4]
   13c30:	str	r1, [sp, #8]
   13c34:	beq	13bcc <flatcc_verify_union_vector_field@@Base+0x198>
   13c38:	add	ip, ip, #4
   13c3c:	mov	r7, r3
   13c40:	add	r8, ip, r0
   13c44:	add	r4, r0, #4
   13c48:	rsb	r6, r6, #4
   13c4c:	b	13c60 <flatcc_verify_union_vector_field@@Base+0x22c>
   13c50:	cmp	r2, #0
   13c54:	bne	13cb0 <flatcc_verify_union_vector_field@@Base+0x27c>
   13c58:	cmp	r8, r4
   13c5c:	beq	13bcc <flatcc_verify_union_vector_field@@Base+0x198>
   13c60:	add	r1, r6, r5
   13c64:	ldr	r3, [r5, #4]!
   13c68:	mov	r0, sp
   13c6c:	add	r4, r4, #1
   13c70:	ldrb	r2, [r4, #-1]
   13c74:	cmp	r3, #0
   13c78:	beq	13c50 <flatcc_verify_union_vector_field@@Base+0x21c>
   13c7c:	cmp	r2, #0
   13c80:	beq	13cb8 <flatcc_verify_union_vector_field@@Base+0x284>
   13c84:	strb	r2, [sp, #12]
   13c88:	str	r1, [sp, #16]
   13c8c:	str	r3, [sp, #20]
   13c90:	blx	r7
   13c94:	cmp	r0, #0
   13c98:	beq	13c58 <flatcc_verify_union_vector_field@@Base+0x224>
   13c9c:	mov	r0, sp
   13ca0:	blx	r7
   13ca4:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13ca8:	mov	r0, #34	; 0x22
   13cac:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13cb0:	mov	r0, #32
   13cb4:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>
   13cb8:	mov	r0, #33	; 0x21
   13cbc:	b	13b50 <flatcc_verify_union_vector_field@@Base+0x11c>

00013cc0 <__libc_csu_init@@Base>:
   13cc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cc4:	mov	r7, r0
   13cc8:	ldr	r6, [pc, #72]	; 13d18 <__libc_csu_init@@Base+0x58>
   13ccc:	ldr	r5, [pc, #72]	; 13d1c <__libc_csu_init@@Base+0x5c>
   13cd0:	add	r6, pc, r6
   13cd4:	add	r5, pc, r5
   13cd8:	sub	r6, r6, r5
   13cdc:	mov	r8, r1
   13ce0:	mov	r9, r2
   13ce4:	bl	10c98 <strcmp@plt-0x20>
   13ce8:	asrs	r6, r6, #2
   13cec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cf0:	mov	r4, #0
   13cf4:	add	r4, r4, #1
   13cf8:	ldr	r3, [r5], #4
   13cfc:	mov	r2, r9
   13d00:	mov	r1, r8
   13d04:	mov	r0, r7
   13d08:	blx	r3
   13d0c:	cmp	r6, r4
   13d10:	bne	13cf4 <__libc_csu_init@@Base+0x34>
   13d14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d18:	andeq	r1, r1, ip, lsr r2
   13d1c:	andeq	r1, r1, r4, lsr r2

00013d20 <__libc_csu_fini@@Base>:
   13d20:	bx	lr

Disassembly of section .fini:

00013d24 <.fini>:
   13d24:	push	{r3, lr}
   13d28:	pop	{r3, pc}
