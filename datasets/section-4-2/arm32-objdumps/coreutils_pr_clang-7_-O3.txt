
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011294 <.init>:
   11294:	push	{r3, lr}
   11298:	bl	11650 <__assert_fail@plt+0x48>
   1129c:	pop	{r3, pc}

Disassembly of section .plt:

000112a0 <fdopen@plt-0x14>:
   112a0:	push	{lr}		; (str lr, [sp, #-4]!)
   112a4:	ldr	lr, [pc, #4]	; 112b0 <fdopen@plt-0x4>
   112a8:	add	lr, pc, lr
   112ac:	ldr	pc, [lr, #8]!
   112b0:	andeq	r0, r2, r0, asr sp

000112b4 <fdopen@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #32, 20	; 0x20000
   112bc:	ldr	pc, [ip, #3408]!	; 0xd50

000112c0 <calloc@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #32, 20	; 0x20000
   112c8:	ldr	pc, [ip, #3400]!	; 0xd48

000112cc <fputs_unlocked@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #32, 20	; 0x20000
   112d4:	ldr	pc, [ip, #3392]!	; 0xd40

000112d8 <raise@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #32, 20	; 0x20000
   112e0:	ldr	pc, [ip, #3384]!	; 0xd38

000112e4 <gmtime_r@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #32, 20	; 0x20000
   112ec:	ldr	pc, [ip, #3376]!	; 0xd30

000112f0 <strcmp@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #32, 20	; 0x20000
   112f8:	ldr	pc, [ip, #3368]!	; 0xd28

000112fc <strtol@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #32, 20	; 0x20000
   11304:	ldr	pc, [ip, #3360]!	; 0xd20

00011308 <posix_fadvise64@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #32, 20	; 0x20000
   11310:	ldr	pc, [ip, #3352]!	; 0xd18

00011314 <mktime@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #32, 20	; 0x20000
   1131c:	ldr	pc, [ip, #3344]!	; 0xd10

00011320 <fflush@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #32, 20	; 0x20000
   11328:	ldr	pc, [ip, #3336]!	; 0xd08

0001132c <wcwidth@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #32, 20	; 0x20000
   11334:	ldr	pc, [ip, #3328]!	; 0xd00

00011338 <free@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #32, 20	; 0x20000
   11340:	ldr	pc, [ip, #3320]!	; 0xcf8

00011344 <clock_gettime@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #32, 20	; 0x20000
   1134c:	ldr	pc, [ip, #3312]!	; 0xcf0

00011350 <_exit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #32, 20	; 0x20000
   11358:	ldr	pc, [ip, #3304]!	; 0xce8

0001135c <memcpy@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #32, 20	; 0x20000
   11364:	ldr	pc, [ip, #3296]!	; 0xce0

00011368 <__strtoull_internal@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #32, 20	; 0x20000
   11370:	ldr	pc, [ip, #3288]!	; 0xcd8

00011374 <mbsinit@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #32, 20	; 0x20000
   1137c:	ldr	pc, [ip, #3280]!	; 0xcd0

00011380 <memcmp@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #32, 20	; 0x20000
   11388:	ldr	pc, [ip, #3272]!	; 0xcc8

0001138c <dcgettext@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #32, 20	; 0x20000
   11394:	ldr	pc, [ip, #3264]!	; 0xcc0

00011398 <realloc@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #32, 20	; 0x20000
   113a0:	ldr	pc, [ip, #3256]!	; 0xcb8

000113a4 <localtime_r@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #32, 20	; 0x20000
   113ac:	ldr	pc, [ip, #3248]!	; 0xcb0

000113b0 <textdomain@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #32, 20	; 0x20000
   113b8:	ldr	pc, [ip, #3240]!	; 0xca8

000113bc <iswcntrl@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #32, 20	; 0x20000
   113c4:	ldr	pc, [ip, #3232]!	; 0xca0

000113c8 <iswprint@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #32, 20	; 0x20000
   113d0:	ldr	pc, [ip, #3224]!	; 0xc98

000113d4 <tzset@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #32, 20	; 0x20000
   113dc:	ldr	pc, [ip, #3216]!	; 0xc90

000113e0 <__fxstat64@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #32, 20	; 0x20000
   113e8:	ldr	pc, [ip, #3208]!	; 0xc88

000113ec <fwrite@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #32, 20	; 0x20000
   113f4:	ldr	pc, [ip, #3200]!	; 0xc80

000113f8 <lseek64@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #32, 20	; 0x20000
   11400:	ldr	pc, [ip, #3192]!	; 0xc78

00011404 <__ctype_get_mb_cur_max@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #32, 20	; 0x20000
   1140c:	ldr	pc, [ip, #3184]!	; 0xc70

00011410 <__fpending@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #32, 20	; 0x20000
   11418:	ldr	pc, [ip, #3176]!	; 0xc68

0001141c <mbrtowc@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #32, 20	; 0x20000
   11424:	ldr	pc, [ip, #3168]!	; 0xc60

00011428 <error@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #32, 20	; 0x20000
   11430:	ldr	pc, [ip, #3160]!	; 0xc58

00011434 <getenv@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #32, 20	; 0x20000
   1143c:	ldr	pc, [ip, #3152]!	; 0xc50

00011440 <malloc@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #32, 20	; 0x20000
   11448:	ldr	pc, [ip, #3144]!	; 0xc48

0001144c <__libc_start_main@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #32, 20	; 0x20000
   11454:	ldr	pc, [ip, #3136]!	; 0xc40

00011458 <strftime@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #32, 20	; 0x20000
   11460:	ldr	pc, [ip, #3128]!	; 0xc38

00011464 <__freading@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #32, 20	; 0x20000
   1146c:	ldr	pc, [ip, #3120]!	; 0xc30

00011470 <__ctype_tolower_loc@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #32, 20	; 0x20000
   11478:	ldr	pc, [ip, #3112]!	; 0xc28

0001147c <__ctype_toupper_loc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #32, 20	; 0x20000
   11484:	ldr	pc, [ip, #3104]!	; 0xc20

00011488 <__gmon_start__@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #32, 20	; 0x20000
   11490:	ldr	pc, [ip, #3096]!	; 0xc18

00011494 <getopt_long@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #32, 20	; 0x20000
   1149c:	ldr	pc, [ip, #3088]!	; 0xc10

000114a0 <__ctype_b_loc@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #32, 20	; 0x20000
   114a8:	ldr	pc, [ip, #3080]!	; 0xc08

000114ac <exit@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #32, 20	; 0x20000
   114b4:	ldr	pc, [ip, #3072]!	; 0xc00

000114b8 <strlen@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #32, 20	; 0x20000
   114c0:	ldr	pc, [ip, #3064]!	; 0xbf8

000114c4 <strchr@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #32, 20	; 0x20000
   114cc:	ldr	pc, [ip, #3056]!	; 0xbf0

000114d0 <setenv@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #32, 20	; 0x20000
   114d8:	ldr	pc, [ip, #3048]!	; 0xbe8

000114dc <ungetc@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #32, 20	; 0x20000
   114e4:	ldr	pc, [ip, #3040]!	; 0xbe0

000114e8 <__errno_location@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #32, 20	; 0x20000
   114f0:	ldr	pc, [ip, #3032]!	; 0xbd8

000114f4 <__sprintf_chk@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #32, 20	; 0x20000
   114fc:	ldr	pc, [ip, #3024]!	; 0xbd0

00011500 <__cxa_atexit@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #32, 20	; 0x20000
   11508:	ldr	pc, [ip, #3016]!	; 0xbc8

0001150c <memset@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #32, 20	; 0x20000
   11514:	ldr	pc, [ip, #3008]!	; 0xbc0

00011518 <__printf_chk@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #32, 20	; 0x20000
   11520:	ldr	pc, [ip, #3000]!	; 0xbb8

00011524 <fileno@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #32, 20	; 0x20000
   1152c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011530 <__fprintf_chk@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #32, 20	; 0x20000
   11538:	ldr	pc, [ip, #2984]!	; 0xba8

0001153c <fclose@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #32, 20	; 0x20000
   11544:	ldr	pc, [ip, #2976]!	; 0xba0

00011548 <fseeko64@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #32, 20	; 0x20000
   11550:	ldr	pc, [ip, #2968]!	; 0xb98

00011554 <fcntl64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #32, 20	; 0x20000
   1155c:	ldr	pc, [ip, #2960]!	; 0xb90

00011560 <__uflow@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #32, 20	; 0x20000
   11568:	ldr	pc, [ip, #2952]!	; 0xb88

0001156c <__overflow@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #32, 20	; 0x20000
   11574:	ldr	pc, [ip, #2944]!	; 0xb80

00011578 <setlocale@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #32, 20	; 0x20000
   11580:	ldr	pc, [ip, #2936]!	; 0xb78

00011584 <strrchr@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #32, 20	; 0x20000
   1158c:	ldr	pc, [ip, #2928]!	; 0xb70

00011590 <nl_langinfo@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #32, 20	; 0x20000
   11598:	ldr	pc, [ip, #2920]!	; 0xb68

0001159c <timegm@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #32, 20	; 0x20000
   115a4:	ldr	pc, [ip, #2912]!	; 0xb60

000115a8 <clearerr_unlocked@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #32, 20	; 0x20000
   115b0:	ldr	pc, [ip, #2904]!	; 0xb58

000115b4 <__strtoll_internal@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #32, 20	; 0x20000
   115bc:	ldr	pc, [ip, #2896]!	; 0xb50

000115c0 <fopen64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #32, 20	; 0x20000
   115c8:	ldr	pc, [ip, #2888]!	; 0xb48

000115cc <bindtextdomain@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #32, 20	; 0x20000
   115d4:	ldr	pc, [ip, #2880]!	; 0xb40

000115d8 <unsetenv@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #32, 20	; 0x20000
   115e0:	ldr	pc, [ip, #2872]!	; 0xb38

000115e4 <strncmp@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #32, 20	; 0x20000
   115ec:	ldr	pc, [ip, #2864]!	; 0xb30

000115f0 <abort@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #32, 20	; 0x20000
   115f8:	ldr	pc, [ip, #2856]!	; 0xb28

000115fc <close@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #32, 20	; 0x20000
   11604:	ldr	pc, [ip, #2848]!	; 0xb20

00011608 <__assert_fail@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #32, 20	; 0x20000
   11610:	ldr	pc, [ip, #2840]!	; 0xb18

Disassembly of section .text:

00011614 <.text>:
   11614:	mov	fp, #0
   11618:	mov	lr, #0
   1161c:	pop	{r1}		; (ldr r1, [sp], #4)
   11620:	mov	r2, sp
   11624:	push	{r2}		; (str r2, [sp, #-4]!)
   11628:	push	{r0}		; (str r0, [sp, #-4]!)
   1162c:	ldr	ip, [pc, #16]	; 11644 <__assert_fail@plt+0x3c>
   11630:	push	{ip}		; (str ip, [sp, #-4]!)
   11634:	ldr	r0, [pc, #12]	; 11648 <__assert_fail@plt+0x40>
   11638:	ldr	r3, [pc, #12]	; 1164c <__assert_fail@plt+0x44>
   1163c:	bl	1144c <__libc_start_main@plt>
   11640:	bl	115f0 <abort@plt>
   11644:	andeq	pc, r1, r0, asr #9
   11648:	andeq	r1, r1, r4, lsl #14
   1164c:	andeq	pc, r1, r0, ror #8
   11650:	ldr	r3, [pc, #20]	; 1166c <__assert_fail@plt+0x64>
   11654:	ldr	r2, [pc, #20]	; 11670 <__assert_fail@plt+0x68>
   11658:	add	r3, pc, r3
   1165c:	ldr	r2, [r3, r2]
   11660:	cmp	r2, #0
   11664:	bxeq	lr
   11668:	b	11488 <__gmon_start__@plt>
   1166c:	andeq	r0, r2, r0, lsr #19
   11670:	andeq	r0, r0, ip, lsr #2
   11674:	ldr	r0, [pc, #24]	; 11694 <__assert_fail@plt+0x8c>
   11678:	ldr	r3, [pc, #24]	; 11698 <__assert_fail@plt+0x90>
   1167c:	cmp	r3, r0
   11680:	bxeq	lr
   11684:	ldr	r3, [pc, #16]	; 1169c <__assert_fail@plt+0x94>
   11688:	cmp	r3, #0
   1168c:	bxeq	lr
   11690:	bx	r3
   11694:			; <UNDEFINED> instruction: 0x000321b0
   11698:			; <UNDEFINED> instruction: 0x000321b0
   1169c:	andeq	r0, r0, r0
   116a0:	ldr	r0, [pc, #36]	; 116cc <__assert_fail@plt+0xc4>
   116a4:	ldr	r1, [pc, #36]	; 116d0 <__assert_fail@plt+0xc8>
   116a8:	sub	r1, r1, r0
   116ac:	asr	r1, r1, #2
   116b0:	add	r1, r1, r1, lsr #31
   116b4:	asrs	r1, r1, #1
   116b8:	bxeq	lr
   116bc:	ldr	r3, [pc, #16]	; 116d4 <__assert_fail@plt+0xcc>
   116c0:	cmp	r3, #0
   116c4:	bxeq	lr
   116c8:	bx	r3
   116cc:			; <UNDEFINED> instruction: 0x000321b0
   116d0:			; <UNDEFINED> instruction: 0x000321b0
   116d4:	andeq	r0, r0, r0
   116d8:	push	{r4, lr}
   116dc:	ldr	r4, [pc, #24]	; 116fc <__assert_fail@plt+0xf4>
   116e0:	ldrb	r3, [r4]
   116e4:	cmp	r3, #0
   116e8:	popne	{r4, pc}
   116ec:	bl	11674 <__assert_fail@plt+0x6c>
   116f0:	mov	r3, #1
   116f4:	strb	r3, [r4]
   116f8:	pop	{r4, pc}
   116fc:	ldrdeq	r2, [r3], -r4
   11700:	b	116a0 <__assert_fail@plt+0x98>
   11704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11708:	add	fp, sp, #28
   1170c:	sub	sp, sp, #44	; 0x2c
   11710:	mov	r4, #0
   11714:	mov	sl, r0
   11718:	str	r1, [sp, #32]
   1171c:	str	r4, [fp, #-32]	; 0xffffffe0
   11720:	ldr	r0, [r1]
   11724:	bl	184c8 <__assert_fail@plt+0x6ec0>
   11728:	movw	r1, #1972	; 0x7b4
   1172c:	mov	r0, #6
   11730:	movt	r1, #2
   11734:	bl	11578 <setlocale@plt>
   11738:	movw	r5, #63007	; 0xf61f
   1173c:	movw	r1, #62700	; 0xf4ec
   11740:	movt	r5, #1
   11744:	movt	r1, #1
   11748:	mov	r0, r5
   1174c:	bl	115cc <bindtextdomain@plt>
   11750:	mov	r0, r5
   11754:	bl	113b0 <textdomain@plt>
   11758:	movw	r0, #24204	; 0x5e8c
   1175c:	movt	r0, #1
   11760:	bl	1f4c4 <__assert_fail@plt+0xdebc>
   11764:	cmp	sl, #2
   11768:	blt	1177c <__assert_fail@plt+0x174>
   1176c:	sub	r0, sl, #1
   11770:	mov	r1, #4
   11774:	bl	1b5b8 <__assert_fail@plt+0x9fb0>
   11778:	mov	r4, r0
   1177c:	ldr	r1, [sp, #32]
   11780:	mvn	r0, #0
   11784:	movw	r2, #2536	; 0x9e8
   11788:	movw	r3, #2592	; 0xa20
   1178c:	str	r0, [sp, #36]	; 0x24
   11790:	add	r0, sp, #36	; 0x24
   11794:	movt	r2, #2
   11798:	movt	r3, #2
   1179c:	str	r0, [sp]
   117a0:	mov	r0, sl
   117a4:	bl	11494 <getopt_long@plt>
   117a8:	cmn	r0, #1
   117ac:	beq	122fc <__assert_fail@plt+0xcf4>
   117b0:	mov	r8, r0
   117b4:	mov	r0, #0
   117b8:	mov	r9, #0
   117bc:	mov	r6, #0
   117c0:	mov	r7, #0
   117c4:	str	r0, [sp, #20]
   117c8:	mov	r0, #0
   117cc:	str	r0, [sp, #28]
   117d0:	mov	r0, #0
   117d4:	str	r0, [sp, #24]
   117d8:	b	1220c <__assert_fail@plt+0xc04>
   117dc:	add	r0, r8, #3
   117e0:	cmp	r0, #260	; 0x104
   117e4:	bhi	12554 <__assert_fail@plt+0xf4c>
   117e8:	add	r1, pc, #0
   117ec:	ldr	pc, [r1, r0, lsl #2]
   117f0:	andeq	r2, r1, ip, asr r5
   117f4:			; <UNDEFINED> instruction: 0x000125b0
   117f8:	andeq	r2, r1, r4, asr r5
   117fc:	andeq	r2, r1, r4, asr r5
   11800:	andeq	r2, r1, ip, lsr #1
   11804:	andeq	r2, r1, r4, asr r5
   11808:	andeq	r2, r1, r4, asr r5
   1180c:	andeq	r2, r1, r4, asr r5
   11810:	andeq	r2, r1, r4, asr r5
   11814:	andeq	r2, r1, r4, asr r5
   11818:	andeq	r2, r1, r4, asr r5
   1181c:	andeq	r2, r1, r4, asr r5
   11820:	andeq	r2, r1, r4, asr r5
   11824:	andeq	r2, r1, r4, asr r5
   11828:	andeq	r2, r1, r4, asr r5
   1182c:	andeq	r2, r1, r4, asr r5
   11830:	andeq	r2, r1, r4, asr r5
   11834:	andeq	r2, r1, r4, asr r5
   11838:	andeq	r2, r1, r4, asr r5
   1183c:	andeq	r2, r1, r4, asr r5
   11840:	andeq	r2, r1, r4, asr r5
   11844:	andeq	r2, r1, r4, asr r5
   11848:	andeq	r2, r1, r4, asr r5
   1184c:	andeq	r2, r1, r4, asr r5
   11850:	andeq	r2, r1, r4, asr r5
   11854:	andeq	r2, r1, r4, asr r5
   11858:	andeq	r2, r1, r4, asr r5
   1185c:	andeq	r2, r1, r4, asr r5
   11860:	andeq	r2, r1, r4, asr r5
   11864:	andeq	r2, r1, r4, asr r5
   11868:	andeq	r2, r1, r4, asr r5
   1186c:	andeq	r2, r1, r4, asr r5
   11870:	andeq	r2, r1, r4, asr r5
   11874:	andeq	r2, r1, r4, asr r5
   11878:	andeq	r2, r1, r4, asr r5
   1187c:	andeq	r2, r1, r4, asr r5
   11880:	andeq	r2, r1, r4, asr r5
   11884:	andeq	r2, r1, r4, asr r5
   11888:	andeq	r2, r1, r4, asr r5
   1188c:	andeq	r2, r1, r4, asr r5
   11890:	andeq	r2, r1, r4, asr r5
   11894:	andeq	r2, r1, r4, asr r5
   11898:	andeq	r2, r1, r4, asr r5
   1189c:	andeq	r2, r1, r4, asr r5
   118a0:	andeq	r2, r1, r4, asr r5
   118a4:	andeq	r2, r1, r4, asr r5
   118a8:	andeq	r2, r1, r4, asr r5
   118ac:	andeq	r2, r1, r4, asr r5
   118b0:	andeq	r2, r1, r4, asr r5
   118b4:	andeq	r2, r1, r4, asr r5
   118b8:	andeq	r2, r1, r4, asr r5
   118bc:	andeq	r2, r1, r4, asr r5
   118c0:	andeq	r2, r1, r4, asr r5
   118c4:	andeq	r2, r1, r4, asr r5
   118c8:	andeq	r2, r1, r4, asr r5
   118cc:	andeq	r2, r1, r4, asr r5
   118d0:	andeq	r2, r1, r4, asr r5
   118d4:	andeq	r2, r1, r4, asr r5
   118d8:	andeq	r2, r1, r4, asr r5
   118dc:	andeq	r2, r1, r4, asr r5
   118e0:	andeq	r2, r1, r4, asr r5
   118e4:	andeq	r2, r1, r4, asr r5
   118e8:	andeq	r2, r1, r4, asr r5
   118ec:	andeq	r2, r1, r4, asr r5
   118f0:	andeq	r2, r1, r4, asr r5
   118f4:	andeq	r2, r1, r4, asr r5
   118f8:	andeq	r2, r1, r4, asr r5
   118fc:	andeq	r2, r1, r4, asr r5
   11900:	andeq	r2, r1, r4, asr r5
   11904:	andeq	r2, r1, r4, asr r5
   11908:	andeq	r2, r1, r4, asr r5
   1190c:	andeq	r1, r1, ip, asr #31
   11910:	andeq	r2, r1, r4, asr r5
   11914:	andeq	r1, r1, r4, lsl #24
   11918:	andeq	r2, r1, r4, asr r5
   1191c:	andeq	r2, r1, r4, asr r5
   11920:	andeq	r2, r1, r4, asr r5
   11924:	andeq	r2, r1, r0, lsl r1
   11928:	andeq	r2, r1, r4, asr r5
   1192c:	andeq	r2, r1, r4, asr r5
   11930:	andeq	r2, r1, r4, asr r5
   11934:	andeq	r1, r1, r8, ror #29
   11938:	andeq	r2, r1, r4, asr r5
   1193c:	andeq	r2, r1, r4, asr r5
   11940:	andeq	r2, r1, r4, asr r5
   11944:	andeq	r2, r1, r4, asr r5
   11948:	andeq	r1, r1, r0, lsl #29
   1194c:	andeq	r1, r1, r8, asr pc
   11950:	andeq	r2, r1, r4, asr r5
   11954:	andeq	r2, r1, r4, asr r5
   11958:	andeq	r1, r1, r8, lsr sp
   1195c:	andeq	r2, r1, r4, asr r5
   11960:	andeq	r2, r1, r4, asr r5
   11964:	andeq	r2, r1, r4, asr r5
   11968:	andeq	r2, r1, r4, asr r5
   1196c:	andeq	r2, r1, r4, asr r5
   11970:	andeq	r2, r1, r4, asr r5
   11974:	andeq	r2, r1, r4, asr r5
   11978:	andeq	r2, r1, r4, asr r5
   1197c:	andeq	r2, r1, r4, asr r5
   11980:	andeq	r2, r1, r0, asr #2
   11984:			; <UNDEFINED> instruction: 0x00011fb4
   11988:	andeq	r1, r1, r8, ror #28
   1198c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11990:	andeq	r2, r1, r8, lsl #3
   11994:	andeq	r1, r1, r4, lsl #24
   11998:	andeq	r2, r1, r4, asr r5
   1199c:	andeq	r1, r1, r4, ror #30
   119a0:	andeq	r2, r1, r8, asr #3
   119a4:	andeq	r2, r1, r4, asr r5
   119a8:	andeq	r2, r1, r4, asr r5
   119ac:	andeq	r2, r1, ip, asr #32
   119b0:	andeq	r1, r1, ip, lsl sp
   119b4:	andeq	r1, r1, r4, lsr #28
   119b8:	andeq	r1, r1, ip, ror #31
   119bc:	andeq	r2, r1, r4, asr r5
   119c0:	andeq	r2, r1, r4, asr r5
   119c4:	andeq	r1, r1, ip, lsr #27
   119c8:	andeq	r1, r1, r4, asr #27
   119cc:	andeq	r1, r1, r4, lsl #31
   119d0:	andeq	r2, r1, r4, asr r5
   119d4:	andeq	r2, r1, r8, lsr #2
   119d8:	muleq	r1, ip, ip
   119dc:	andeq	r2, r1, r4, asr r5
   119e0:	andeq	r2, r1, r4, asr r5
   119e4:	andeq	r2, r1, r4, asr r5
   119e8:	andeq	r2, r1, r4, asr r5
   119ec:	andeq	r2, r1, r4, asr r5
   119f0:	andeq	r2, r1, r4, asr r5
   119f4:	andeq	r2, r1, r4, asr r5
   119f8:	andeq	r2, r1, r4, asr r5
   119fc:	andeq	r2, r1, r4, asr r5
   11a00:	andeq	r2, r1, r4, asr r5
   11a04:	andeq	r2, r1, r4, asr r5
   11a08:	andeq	r2, r1, r4, asr r5
   11a0c:	andeq	r2, r1, r4, asr r5
   11a10:	andeq	r2, r1, r4, asr r5
   11a14:	andeq	r2, r1, r4, asr r5
   11a18:	andeq	r2, r1, r4, asr r5
   11a1c:	andeq	r2, r1, r4, asr r5
   11a20:	andeq	r2, r1, r4, asr r5
   11a24:	andeq	r2, r1, r4, asr r5
   11a28:	andeq	r2, r1, r4, asr r5
   11a2c:	andeq	r2, r1, r4, asr r5
   11a30:	andeq	r2, r1, r4, asr r5
   11a34:	andeq	r2, r1, r4, asr r5
   11a38:	andeq	r2, r1, r4, asr r5
   11a3c:	andeq	r2, r1, r4, asr r5
   11a40:	andeq	r2, r1, r4, asr r5
   11a44:	andeq	r2, r1, r4, asr r5
   11a48:	andeq	r2, r1, r4, asr r5
   11a4c:	andeq	r2, r1, r4, asr r5
   11a50:	andeq	r2, r1, r4, asr r5
   11a54:	andeq	r2, r1, r4, asr r5
   11a58:	andeq	r2, r1, r4, asr r5
   11a5c:	andeq	r2, r1, r4, asr r5
   11a60:	andeq	r2, r1, r4, asr r5
   11a64:	andeq	r2, r1, r4, asr r5
   11a68:	andeq	r2, r1, r4, asr r5
   11a6c:	andeq	r2, r1, r4, asr r5
   11a70:	andeq	r2, r1, r4, asr r5
   11a74:	andeq	r2, r1, r4, asr r5
   11a78:	andeq	r2, r1, r4, asr r5
   11a7c:	andeq	r2, r1, r4, asr r5
   11a80:	andeq	r2, r1, r4, asr r5
   11a84:	andeq	r2, r1, r4, asr r5
   11a88:	andeq	r2, r1, r4, asr r5
   11a8c:	andeq	r2, r1, r4, asr r5
   11a90:	andeq	r2, r1, r4, asr r5
   11a94:	andeq	r2, r1, r4, asr r5
   11a98:	andeq	r2, r1, r4, asr r5
   11a9c:	andeq	r2, r1, r4, asr r5
   11aa0:	andeq	r2, r1, r4, asr r5
   11aa4:	andeq	r2, r1, r4, asr r5
   11aa8:	andeq	r2, r1, r4, asr r5
   11aac:	andeq	r2, r1, r4, asr r5
   11ab0:	andeq	r2, r1, r4, asr r5
   11ab4:	andeq	r2, r1, r4, asr r5
   11ab8:	andeq	r2, r1, r4, asr r5
   11abc:	andeq	r2, r1, r4, asr r5
   11ac0:	andeq	r2, r1, r4, asr r5
   11ac4:	andeq	r2, r1, r4, asr r5
   11ac8:	andeq	r2, r1, r4, asr r5
   11acc:	andeq	r2, r1, r4, asr r5
   11ad0:	andeq	r2, r1, r4, asr r5
   11ad4:	andeq	r2, r1, r4, asr r5
   11ad8:	andeq	r2, r1, r4, asr r5
   11adc:	andeq	r2, r1, r4, asr r5
   11ae0:	andeq	r2, r1, r4, asr r5
   11ae4:	andeq	r2, r1, r4, asr r5
   11ae8:	andeq	r2, r1, r4, asr r5
   11aec:	andeq	r2, r1, r4, asr r5
   11af0:	andeq	r2, r1, r4, asr r5
   11af4:	andeq	r2, r1, r4, asr r5
   11af8:	andeq	r2, r1, r4, asr r5
   11afc:	andeq	r2, r1, r4, asr r5
   11b00:	andeq	r2, r1, r4, asr r5
   11b04:	andeq	r2, r1, r4, asr r5
   11b08:	andeq	r2, r1, r4, asr r5
   11b0c:	andeq	r2, r1, r4, asr r5
   11b10:	andeq	r2, r1, r4, asr r5
   11b14:	andeq	r2, r1, r4, asr r5
   11b18:	andeq	r2, r1, r4, asr r5
   11b1c:	andeq	r2, r1, r4, asr r5
   11b20:	andeq	r2, r1, r4, asr r5
   11b24:	andeq	r2, r1, r4, asr r5
   11b28:	andeq	r2, r1, r4, asr r5
   11b2c:	andeq	r2, r1, r4, asr r5
   11b30:	andeq	r2, r1, r4, asr r5
   11b34:	andeq	r2, r1, r4, asr r5
   11b38:	andeq	r2, r1, r4, asr r5
   11b3c:	andeq	r2, r1, r4, asr r5
   11b40:	andeq	r2, r1, r4, asr r5
   11b44:	andeq	r2, r1, r4, asr r5
   11b48:	andeq	r2, r1, r4, asr r5
   11b4c:	andeq	r2, r1, r4, asr r5
   11b50:	andeq	r2, r1, r4, asr r5
   11b54:	andeq	r2, r1, r4, asr r5
   11b58:	andeq	r2, r1, r4, asr r5
   11b5c:	andeq	r2, r1, r4, asr r5
   11b60:	andeq	r2, r1, r4, asr r5
   11b64:	andeq	r2, r1, r4, asr r5
   11b68:	andeq	r2, r1, r4, asr r5
   11b6c:	andeq	r2, r1, r4, asr r5
   11b70:	andeq	r2, r1, r4, asr r5
   11b74:	andeq	r2, r1, r4, asr r5
   11b78:	andeq	r2, r1, r4, asr r5
   11b7c:	andeq	r2, r1, r4, asr r5
   11b80:	andeq	r2, r1, r4, asr r5
   11b84:	andeq	r2, r1, r4, asr r5
   11b88:	andeq	r2, r1, r4, asr r5
   11b8c:	andeq	r2, r1, r4, asr r5
   11b90:	andeq	r2, r1, r4, asr r5
   11b94:	andeq	r2, r1, r4, asr r5
   11b98:	andeq	r2, r1, r4, asr r5
   11b9c:	andeq	r2, r1, r4, asr r5
   11ba0:	andeq	r2, r1, r4, asr r5
   11ba4:	andeq	r2, r1, r4, asr r5
   11ba8:	andeq	r2, r1, r4, asr r5
   11bac:	andeq	r2, r1, r4, asr r5
   11bb0:	andeq	r2, r1, r4, asr r5
   11bb4:	andeq	r2, r1, r4, asr r5
   11bb8:	andeq	r2, r1, r4, asr r5
   11bbc:	andeq	r2, r1, r4, asr r5
   11bc0:	andeq	r2, r1, r4, asr r5
   11bc4:	andeq	r2, r1, r4, asr r5
   11bc8:	andeq	r2, r1, r4, asr r5
   11bcc:	andeq	r2, r1, r4, asr r5
   11bd0:	andeq	r2, r1, r4, asr r5
   11bd4:	andeq	r2, r1, r4, asr r5
   11bd8:	andeq	r2, r1, r4, asr r5
   11bdc:	andeq	r2, r1, r4, asr r5
   11be0:	andeq	r2, r1, r4, asr r5
   11be4:	andeq	r2, r1, r4, asr r5
   11be8:	andeq	r2, r1, r4, asr r5
   11bec:	andeq	r2, r1, r4, asr r5
   11bf0:	andeq	r2, r1, r4, asr r5
   11bf4:	andeq	r2, r1, r4, asr r5
   11bf8:	andeq	r2, r1, r4, asr r5
   11bfc:	andeq	r1, r1, ip, lsl ip
   11c00:	andeq	r2, r1, r8, asr r1
   11c04:	movw	r0, #8664	; 0x21d8
   11c08:	mov	r1, #1
   11c0c:	mov	r9, #0
   11c10:	movt	r0, #3
   11c14:	strb	r1, [r0, #6]
   11c18:	b	12248 <__assert_fail@plt+0xc40>
   11c1c:	movw	r0, #8656	; 0x21d0
   11c20:	movw	r1, #1845	; 0x735
   11c24:	mov	r2, #5
   11c28:	mov	r9, #0
   11c2c:	movt	r0, #3
   11c30:	movt	r1, #2
   11c34:	ldr	r8, [r0]
   11c38:	mov	r0, #0
   11c3c:	bl	1138c <dcgettext@plt>
   11c40:	mvn	r1, #-2147483648	; 0x80000000
   11c44:	mov	r2, #1
   11c48:	mov	r3, #0
   11c4c:	mov	r5, #1
   11c50:	stm	sp, {r1, r9}
   11c54:	movw	r1, #1972	; 0x7b4
   11c58:	str	r0, [sp, #12]
   11c5c:	mov	r0, r8
   11c60:	str	r9, [sp, #16]
   11c64:	movt	r1, #2
   11c68:	str	r1, [sp, #8]
   11c6c:	bl	1bb94 <__assert_fail@plt+0xa58c>
   11c70:	movw	r1, #8504	; 0x2138
   11c74:	movt	r1, #3
   11c78:	str	r0, [r1, #32]
   11c7c:	movw	r0, #8664	; 0x21d8
   11c80:	movt	r0, #3
   11c84:	strb	r5, [r0, #18]
   11c88:	mov	r0, r6
   11c8c:	bl	16170 <__assert_fail@plt+0x4b68>
   11c90:	mov	r6, #0
   11c94:	str	r9, [fp, #-32]	; 0xffffffe0
   11c98:	b	12248 <__assert_fail@plt+0xc40>
   11c9c:	movw	r0, #8656	; 0x21d0
   11ca0:	movw	r1, #62910	; 0xf5be
   11ca4:	mov	r2, #5
   11ca8:	mov	r9, #0
   11cac:	movt	r0, #3
   11cb0:	movt	r1, #1
   11cb4:	ldr	r8, [r0]
   11cb8:	mov	r0, #0
   11cbc:	bl	1138c <dcgettext@plt>
   11cc0:	mvn	r1, #-2147483648	; 0x80000000
   11cc4:	mov	r2, #1
   11cc8:	mov	r3, #0
   11ccc:	stm	sp, {r1, r9}
   11cd0:	movw	r1, #1972	; 0x7b4
   11cd4:	str	r0, [sp, #12]
   11cd8:	mov	r0, #1
   11cdc:	str	r9, [sp, #16]
   11ce0:	movt	r1, #2
   11ce4:	str	r0, [sp, #24]
   11ce8:	mov	r0, r8
   11cec:	str	r1, [sp, #8]
   11cf0:	bl	1bb94 <__assert_fail@plt+0xa58c>
   11cf4:	movw	r1, #8664	; 0x21d8
   11cf8:	movt	r1, #3
   11cfc:	ldrb	r1, [r1, #17]
   11d00:	cmp	r1, #0
   11d04:	movweq	r1, #8504	; 0x2138
   11d08:	movteq	r1, #3
   11d0c:	streq	r0, [r1, #28]
   11d10:	mov	r0, #1
   11d14:	str	r0, [sp, #28]
   11d18:	b	12248 <__assert_fail@plt+0xc40>
   11d1c:	movw	r0, #8664	; 0x21d8
   11d20:	mov	r1, #1
   11d24:	mov	r9, #0
   11d28:	movt	r0, #3
   11d2c:	strb	r1, [r0, #1]
   11d30:	strb	r1, [r0, #9]
   11d34:	b	12248 <__assert_fail@plt+0xc40>
   11d38:	movw	r0, #8664	; 0x21d8
   11d3c:	mov	r1, #1
   11d40:	mov	r2, #5
   11d44:	mov	r8, #0
   11d48:	movt	r0, #3
   11d4c:	strb	r1, [r0, #17]
   11d50:	movw	r0, #8656	; 0x21d0
   11d54:	movw	r1, #62955	; 0xf5eb
   11d58:	movt	r0, #3
   11d5c:	movt	r1, #1
   11d60:	ldr	r5, [r0]
   11d64:	mov	r0, #0
   11d68:	bl	1138c <dcgettext@plt>
   11d6c:	mvn	r1, #-2147483648	; 0x80000000
   11d70:	mov	r2, #1
   11d74:	mov	r3, #0
   11d78:	stm	sp, {r1, r8}
   11d7c:	movw	r1, #1972	; 0x7b4
   11d80:	str	r0, [sp, #12]
   11d84:	mov	r0, #0
   11d88:	str	r8, [sp, #16]
   11d8c:	movt	r1, #2
   11d90:	str	r0, [sp, #28]
   11d94:	mov	r0, r5
   11d98:	str	r1, [sp, #8]
   11d9c:	bl	1bb94 <__assert_fail@plt+0xa58c>
   11da0:	movw	r1, #8504	; 0x2138
   11da4:	movt	r1, #3
   11da8:	b	11fe0 <__assert_fail@plt+0x9d8>
   11dac:	movw	r0, #8664	; 0x21d8
   11db0:	mov	r1, #1
   11db4:	mov	r9, #0
   11db8:	movt	r0, #3
   11dbc:	strb	r1, [r0, #12]
   11dc0:	b	12248 <__assert_fail@plt+0xc40>
   11dc4:	movw	r0, #8656	; 0x21d0
   11dc8:	mov	r9, #0
   11dcc:	movt	r0, #3
   11dd0:	ldr	r8, [r0]
   11dd4:	mov	r0, #1
   11dd8:	str	r0, [sp, #24]
   11ddc:	cmp	r8, #0
   11de0:	beq	11e18 <__assert_fail@plt+0x810>
   11de4:	movw	r5, #8664	; 0x21d8
   11de8:	movt	r5, #3
   11dec:	ldrb	r0, [r5, #13]
   11df0:	cmp	r0, #0
   11df4:	bne	11e18 <__assert_fail@plt+0x810>
   11df8:	mov	r0, r8
   11dfc:	bl	114b8 <strlen@plt>
   11e00:	cmn	r0, #1
   11e04:	ble	125b8 <__assert_fail@plt+0xfb0>
   11e08:	movw	r1, #8504	; 0x2138
   11e0c:	str	r0, [r5, #40]	; 0x28
   11e10:	movt	r1, #3
   11e14:	str	r8, [r1, #24]
   11e18:	mov	r0, #1
   11e1c:	str	r0, [sp, #20]
   11e20:	b	12248 <__assert_fail@plt+0xc40>
   11e24:	movw	r0, #8664	; 0x21d8
   11e28:	mov	r1, #1
   11e2c:	mov	r9, #0
   11e30:	movt	r0, #3
   11e34:	strb	r1, [r0, #10]
   11e38:	movw	r0, #8656	; 0x21d0
   11e3c:	movt	r0, #3
   11e40:	ldr	r0, [r0]
   11e44:	cmp	r0, #0
   11e48:	beq	12248 <__assert_fail@plt+0xc40>
   11e4c:	movw	r1, #8504	; 0x2138
   11e50:	movt	r1, #3
   11e54:	add	r2, r1, #2
   11e58:	add	r3, r1, #16
   11e5c:	mov	r1, #110	; 0x6e
   11e60:	bl	12780 <__assert_fail@plt+0x1178>
   11e64:	b	12248 <__assert_fail@plt+0xc40>
   11e68:	movw	r0, #8664	; 0x21d8
   11e6c:	mov	r1, #1
   11e70:	mov	r9, #0
   11e74:	movt	r0, #3
   11e78:	strb	r1, [r0, #3]
   11e7c:	b	12248 <__assert_fail@plt+0xc40>
   11e80:	movw	r8, #8664	; 0x21d8
   11e84:	mov	r0, #0
   11e88:	movw	r9, #8504	; 0x2138
   11e8c:	movt	r8, #3
   11e90:	movt	r9, #3
   11e94:	str	r0, [r8, #40]	; 0x28
   11e98:	movw	r0, #1972	; 0x7b4
   11e9c:	movt	r0, #2
   11ea0:	str	r0, [r9, #24]
   11ea4:	mov	r0, #1
   11ea8:	strb	r0, [r8, #13]
   11eac:	movw	r0, #8656	; 0x21d0
   11eb0:	movt	r0, #3
   11eb4:	ldr	r5, [r0]
   11eb8:	cmp	r5, #0
   11ebc:	beq	11ed8 <__assert_fail@plt+0x8d0>
   11ec0:	mov	r0, r5
   11ec4:	bl	114b8 <strlen@plt>
   11ec8:	cmn	r0, #1
   11ecc:	ble	125b8 <__assert_fail@plt+0xfb0>
   11ed0:	str	r5, [r9, #24]
   11ed4:	str	r0, [r8, #40]	; 0x28
   11ed8:	mov	r0, #0
   11edc:	mov	r9, #0
   11ee0:	str	r0, [sp, #20]
   11ee4:	b	12248 <__assert_fail@plt+0xc40>
   11ee8:	movw	r0, #8664	; 0x21d8
   11eec:	mov	r1, #1
   11ef0:	mov	r2, #5
   11ef4:	mov	r9, #0
   11ef8:	movt	r0, #3
   11efc:	strb	r1, [r0, #11]
   11f00:	movw	r0, #8656	; 0x21d0
   11f04:	movw	r1, #62837	; 0xf575
   11f08:	movt	r0, #3
   11f0c:	movt	r1, #1
   11f10:	ldr	r8, [r0]
   11f14:	mov	r0, #0
   11f18:	bl	1138c <dcgettext@plt>
   11f1c:	mvn	r1, #-2147483648	; 0x80000000
   11f20:	mov	r2, #-2147483648	; 0x80000000
   11f24:	mvn	r3, #0
   11f28:	stm	sp, {r1, r9}
   11f2c:	movw	r1, #1972	; 0x7b4
   11f30:	str	r0, [sp, #12]
   11f34:	mov	r0, r8
   11f38:	str	r9, [sp, #16]
   11f3c:	movt	r1, #2
   11f40:	str	r1, [sp, #8]
   11f44:	bl	1bb94 <__assert_fail@plt+0xa58c>
   11f48:	movw	r1, #8504	; 0x2138
   11f4c:	movt	r1, #3
   11f50:	str	r0, [r1, #20]
   11f54:	b	12248 <__assert_fail@plt+0xc40>
   11f58:	movw	r0, #8664	; 0x21d8
   11f5c:	mov	r1, #1
   11f60:	b	11f8c <__assert_fail@plt+0x984>
   11f64:	movw	r0, #8656	; 0x21d0
   11f68:	movw	r1, #8664	; 0x21d8
   11f6c:	mov	r9, #0
   11f70:	movt	r0, #3
   11f74:	movt	r1, #3
   11f78:	ldr	r0, [r0]
   11f7c:	str	r0, [r1, #32]
   11f80:	b	12248 <__assert_fail@plt+0xc40>
   11f84:	movw	r0, #8664	; 0x21d8
   11f88:	movw	r1, #257	; 0x101
   11f8c:	movt	r0, #3
   11f90:	strh	r1, [r0, #14]
   11f94:	mov	r9, #0
   11f98:	b	12248 <__assert_fail@plt+0xc40>
   11f9c:	movw	r0, #8664	; 0x21d8
   11fa0:	mov	r1, #1
   11fa4:	mov	r9, #0
   11fa8:	movt	r0, #3
   11fac:	strb	r1, [r0, #4]
   11fb0:	b	12248 <__assert_fail@plt+0xc40>
   11fb4:	movw	r0, #8664	; 0x21d8
   11fb8:	mov	r1, #1
   11fbc:	mov	r9, #0
   11fc0:	movt	r0, #3
   11fc4:	strb	r1, [r0, #2]
   11fc8:	b	12248 <__assert_fail@plt+0xc40>
   11fcc:	movw	r0, #8656	; 0x21d0
   11fd0:	movw	r1, #8664	; 0x21d8
   11fd4:	movt	r0, #3
   11fd8:	movt	r1, #3
   11fdc:	ldr	r0, [r0]
   11fe0:	str	r0, [r1, #28]
   11fe4:	mov	r9, #0
   11fe8:	b	12248 <__assert_fail@plt+0xc40>
   11fec:	movw	r0, #8656	; 0x21d0
   11ff0:	movw	r1, #62878	; 0xf59e
   11ff4:	mov	r2, #5
   11ff8:	mov	r9, #0
   11ffc:	movt	r0, #3
   12000:	movt	r1, #1
   12004:	ldr	r8, [r0]
   12008:	mov	r0, #0
   1200c:	bl	1138c <dcgettext@plt>
   12010:	mvn	r1, #-2147483648	; 0x80000000
   12014:	mov	r2, #0
   12018:	mov	r3, #0
   1201c:	stm	sp, {r1, r9}
   12020:	movw	r1, #1972	; 0x7b4
   12024:	str	r0, [sp, #12]
   12028:	mov	r0, r8
   1202c:	str	r9, [sp, #16]
   12030:	movt	r1, #2
   12034:	str	r1, [sp, #8]
   12038:	bl	1bb94 <__assert_fail@plt+0xa58c>
   1203c:	movw	r1, #8664	; 0x21d8
   12040:	movt	r1, #3
   12044:	str	r0, [r1, #36]	; 0x24
   12048:	b	12248 <__assert_fail@plt+0xc40>
   1204c:	movw	r0, #8656	; 0x21d0
   12050:	movw	r1, #62796	; 0xf54c
   12054:	mov	r2, #5
   12058:	mov	r9, #0
   1205c:	movt	r0, #3
   12060:	movt	r1, #1
   12064:	ldr	r8, [r0]
   12068:	mov	r0, #0
   1206c:	bl	1138c <dcgettext@plt>
   12070:	mvn	r1, #-2147483648	; 0x80000000
   12074:	mov	r2, #1
   12078:	mov	r3, #0
   1207c:	stm	sp, {r1, r9}
   12080:	movw	r1, #1972	; 0x7b4
   12084:	str	r0, [sp, #12]
   12088:	mov	r0, r8
   1208c:	str	r9, [sp, #16]
   12090:	movt	r1, #2
   12094:	str	r1, [sp, #8]
   12098:	bl	1bb94 <__assert_fail@plt+0xa58c>
   1209c:	movw	r1, #8504	; 0x2138
   120a0:	movt	r1, #3
   120a4:	str	r0, [r1, #12]
   120a8:	b	12248 <__assert_fail@plt+0xc40>
   120ac:	movw	r0, #8792	; 0x2258
   120b0:	movt	r0, #3
   120b4:	ldrd	r0, [r0, #16]
   120b8:	orrs	r0, r0, r1
   120bc:	bne	120f4 <__assert_fail@plt+0xaec>
   120c0:	movw	r0, #8656	; 0x21d0
   120c4:	movt	r0, #3
   120c8:	ldr	r0, [r0]
   120cc:	ldrb	r1, [r0]
   120d0:	cmp	r1, #43	; 0x2b
   120d4:	bne	120f4 <__assert_fail@plt+0xaec>
   120d8:	add	r2, r0, #1
   120dc:	mvn	r0, #1
   120e0:	mov	r1, #43	; 0x2b
   120e4:	bl	1264c <__assert_fail@plt+0x1044>
   120e8:	mov	r9, #0
   120ec:	cmp	r0, #0
   120f0:	bne	12248 <__assert_fail@plt+0xc40>
   120f4:	movw	r0, #8656	; 0x21d0
   120f8:	mov	r9, #0
   120fc:	movt	r0, #3
   12100:	ldr	r0, [r0]
   12104:	str	r0, [r4, r7, lsl #2]
   12108:	add	r7, r7, #1
   1210c:	b	12248 <__assert_fail@plt+0xc40>
   12110:	movw	r0, #8664	; 0x21d8
   12114:	mov	r1, #1
   12118:	mov	r9, #0
   1211c:	movt	r0, #3
   12120:	strb	r1, [r0, #8]
   12124:	b	12248 <__assert_fail@plt+0xc40>
   12128:	movw	r0, #8664	; 0x21d8
   1212c:	mov	r1, #1
   12130:	mov	r9, #0
   12134:	movt	r0, #3
   12138:	strb	r1, [r0, #16]
   1213c:	b	12248 <__assert_fail@plt+0xc40>
   12140:	movw	r0, #8664	; 0x21d8
   12144:	movw	r1, #257	; 0x101
   12148:	mov	r9, #0
   1214c:	movt	r0, #3
   12150:	strh	r1, [r0]
   12154:	b	12248 <__assert_fail@plt+0xc40>
   12158:	movw	r8, #8656	; 0x21d0
   1215c:	movt	r8, #3
   12160:	ldr	r2, [r8]
   12164:	cmp	r2, #0
   12168:	beq	125bc <__assert_fail@plt+0xfb4>
   1216c:	ldr	r0, [sp, #36]	; 0x24
   12170:	mov	r1, #0
   12174:	mov	r9, #0
   12178:	bl	1264c <__assert_fail@plt+0x1044>
   1217c:	cmp	r0, #0
   12180:	bne	12248 <__assert_fail@plt+0xc40>
   12184:	b	125c8 <__assert_fail@plt+0xfc0>
   12188:	movw	r0, #8656	; 0x21d0
   1218c:	movt	r0, #3
   12190:	ldr	r0, [r0]
   12194:	cmp	r0, #0
   12198:	beq	121b0 <__assert_fail@plt+0xba8>
   1219c:	movw	r2, #8504	; 0x2138
   121a0:	mov	r1, #101	; 0x65
   121a4:	movt	r2, #3
   121a8:	add	r3, r2, #4
   121ac:	bl	12780 <__assert_fail@plt+0x1178>
   121b0:	movw	r0, #8664	; 0x21d8
   121b4:	mov	r1, #1
   121b8:	mov	r9, #0
   121bc:	movt	r0, #3
   121c0:	strb	r1, [r0, #5]
   121c4:	b	12248 <__assert_fail@plt+0xc40>
   121c8:	movw	r0, #8656	; 0x21d0
   121cc:	movt	r0, #3
   121d0:	ldr	r0, [r0]
   121d4:	cmp	r0, #0
   121d8:	beq	121f4 <__assert_fail@plt+0xbec>
   121dc:	movw	r1, #8504	; 0x2138
   121e0:	movt	r1, #3
   121e4:	add	r2, r1, #1
   121e8:	add	r3, r1, #8
   121ec:	mov	r1, #105	; 0x69
   121f0:	bl	12780 <__assert_fail@plt+0x1178>
   121f4:	movw	r0, #8664	; 0x21d8
   121f8:	mov	r1, #1
   121fc:	mov	r9, #0
   12200:	movt	r0, #3
   12204:	strb	r1, [r0, #7]
   12208:	b	12248 <__assert_fail@plt+0xc40>
   1220c:	sub	r0, r8, #48	; 0x30
   12210:	cmp	r0, #9
   12214:	bhi	117dc <__assert_fail@plt+0x1d4>
   12218:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1221c:	add	r5, r9, #1
   12220:	cmp	r5, r0
   12224:	bcc	12238 <__assert_fail@plt+0xc30>
   12228:	mov	r0, r6
   1222c:	sub	r1, fp, #32
   12230:	bl	1b61c <__assert_fail@plt+0xa014>
   12234:	mov	r6, r0
   12238:	mov	r0, #0
   1223c:	strb	r8, [r6, r9]
   12240:	mov	r9, r5
   12244:	strb	r0, [r6, r5]
   12248:	ldr	r1, [sp, #32]
   1224c:	mvn	r0, #0
   12250:	movw	r2, #2536	; 0x9e8
   12254:	movw	r3, #2592	; 0xa20
   12258:	str	r0, [sp, #36]	; 0x24
   1225c:	add	r0, sp, #36	; 0x24
   12260:	movt	r2, #2
   12264:	movt	r3, #2
   12268:	str	r0, [sp]
   1226c:	mov	r0, sl
   12270:	bl	11494 <getopt_long@plt>
   12274:	mov	r8, r0
   12278:	cmn	r0, #1
   1227c:	bne	1220c <__assert_fail@plt+0xc04>
   12280:	cmp	r6, #0
   12284:	beq	122f0 <__assert_fail@plt+0xce8>
   12288:	movw	r1, #1845	; 0x735
   1228c:	mov	r0, #0
   12290:	mov	r2, #5
   12294:	mov	r5, #0
   12298:	movt	r1, #2
   1229c:	bl	1138c <dcgettext@plt>
   122a0:	mvn	r1, #-2147483648	; 0x80000000
   122a4:	mov	r2, #1
   122a8:	mov	r3, #0
   122ac:	stm	sp, {r1, r5}
   122b0:	movw	r1, #1972	; 0x7b4
   122b4:	str	r0, [sp, #12]
   122b8:	mov	r0, r6
   122bc:	str	r5, [sp, #16]
   122c0:	mov	r5, #1
   122c4:	movt	r1, #2
   122c8:	str	r1, [sp, #8]
   122cc:	bl	1bb94 <__assert_fail@plt+0xa58c>
   122d0:	movw	r1, #8504	; 0x2138
   122d4:	movt	r1, #3
   122d8:	str	r0, [r1, #32]
   122dc:	movw	r0, #8664	; 0x21d8
   122e0:	movt	r0, #3
   122e4:	strb	r5, [r0, #18]
   122e8:	mov	r0, r6
   122ec:	bl	16170 <__assert_fail@plt+0x4b68>
   122f0:	ldr	r5, [sp, #20]
   122f4:	ldr	r6, [sp, #24]
   122f8:	b	12310 <__assert_fail@plt+0xd08>
   122fc:	mov	r0, #0
   12300:	mov	r7, #0
   12304:	mov	r5, #0
   12308:	mov	r6, #0
   1230c:	str	r0, [sp, #28]
   12310:	movw	r9, #8664	; 0x21d8
   12314:	movt	r9, #3
   12318:	ldr	r0, [r9, #28]
   1231c:	cmp	r0, #0
   12320:	bne	12368 <__assert_fail@plt+0xd60>
   12324:	movw	r0, #63045	; 0xf645
   12328:	movt	r0, #1
   1232c:	bl	11434 <getenv@plt>
   12330:	cmp	r0, #0
   12334:	beq	1235c <__assert_fail@plt+0xd54>
   12338:	mov	r0, #2
   1233c:	bl	16260 <__assert_fail@plt+0x4c58>
   12340:	movw	r2, #63076	; 0xf664
   12344:	movw	r1, #63061	; 0xf655
   12348:	cmp	r0, #0
   1234c:	movt	r2, #1
   12350:	movt	r1, #1
   12354:	movne	r1, r2
   12358:	b	12364 <__assert_fail@plt+0xd5c>
   1235c:	movw	r1, #63076	; 0xf664
   12360:	movt	r1, #1
   12364:	str	r1, [r9, #28]
   12368:	movw	r0, #63091	; 0xf673
   1236c:	movt	r0, #1
   12370:	bl	11434 <getenv@plt>
   12374:	bl	1a500 <__assert_fail@plt+0x8ef8>
   12378:	str	r0, [r9, #44]	; 0x2c
   1237c:	movw	r0, #8792	; 0x2258
   12380:	movt	r0, #3
   12384:	ldrd	r2, [r0, #16]
   12388:	orrs	r1, r2, r3
   1238c:	beq	123c0 <__assert_fail@plt+0xdb8>
   12390:	ldrb	r8, [r9, #9]
   12394:	cmp	r8, #1
   12398:	bne	123dc <__assert_fail@plt+0xdd4>
   1239c:	ldrb	r0, [r9, #18]
   123a0:	cmp	r0, #1
   123a4:	beq	125fc <__assert_fail@plt+0xff4>
   123a8:	ldrb	r0, [r9]
   123ac:	cmp	r0, #1
   123b0:	bne	123dc <__assert_fail@plt+0xdd4>
   123b4:	movw	r1, #63153	; 0xf6b1
   123b8:	movt	r1, #1
   123bc:	b	12604 <__assert_fail@plt+0xffc>
   123c0:	mov	r2, #1
   123c4:	mov	r1, #0
   123c8:	str	r2, [r0, #16]
   123cc:	str	r1, [r0, #20]
   123d0:	ldrb	r8, [r9, #9]
   123d4:	cmp	r8, #1
   123d8:	beq	1239c <__assert_fail@plt+0xd94>
   123dc:	tst	r6, #1
   123e0:	beq	12478 <__assert_fail@plt+0xe70>
   123e4:	ldr	r0, [sp, #28]
   123e8:	tst	r0, #1
   123ec:	beq	12418 <__assert_fail@plt+0xe10>
   123f0:	cmp	r8, #0
   123f4:	bne	12404 <__assert_fail@plt+0xdfc>
   123f8:	ldrb	r0, [r9, #18]
   123fc:	cmp	r0, #1
   12400:	bne	12458 <__assert_fail@plt+0xe50>
   12404:	mov	r0, #1
   12408:	tst	r5, #1
   1240c:	strb	r0, [r9, #17]
   12410:	bne	12450 <__assert_fail@plt+0xe48>
   12414:	b	12478 <__assert_fail@plt+0xe70>
   12418:	ldrb	r0, [r9, #13]
   1241c:	cmp	r0, #0
   12420:	eoreq	r0, r5, #1
   12424:	tsteq	r0, #1
   12428:	bne	12478 <__assert_fail@plt+0xe70>
   1242c:	cmp	r8, #0
   12430:	bne	12440 <__assert_fail@plt+0xe38>
   12434:	ldrb	r0, [r9, #18]
   12438:	cmp	r0, #1
   1243c:	bne	12478 <__assert_fail@plt+0xe70>
   12440:	ldrb	r0, [r9, #17]
   12444:	cmp	r0, #0
   12448:	beq	12464 <__assert_fail@plt+0xe5c>
   1244c:	mov	r0, #1
   12450:	strb	r0, [r9, #13]
   12454:	b	12478 <__assert_fail@plt+0xe70>
   12458:	mov	r0, #1
   1245c:	strb	r0, [r9, #8]
   12460:	b	12478 <__assert_fail@plt+0xe70>
   12464:	mov	r0, #1
   12468:	strb	r0, [r9, #8]
   1246c:	ldr	r1, [r9, #40]	; 0x28
   12470:	cmp	r1, #1
   12474:	strbge	r0, [r9, #13]
   12478:	movw	r5, #8632	; 0x21b8
   1247c:	movt	r5, #3
   12480:	ldr	r6, [r5]
   12484:	cmp	r6, sl
   12488:	bge	124b0 <__assert_fail@plt+0xea8>
   1248c:	ldr	r1, [sp, #32]
   12490:	sub	r2, sl, r6
   12494:	add	r0, r4, r7, lsl #2
   12498:	lsl	r2, r2, #2
   1249c:	add	r1, r1, r6, lsl #2
   124a0:	bl	1135c <memcpy@plt>
   124a4:	add	r0, r7, sl
   124a8:	str	sl, [r5]
   124ac:	sub	r7, r0, r6
   124b0:	cmp	r7, #0
   124b4:	beq	124e8 <__assert_fail@plt+0xee0>
   124b8:	cmp	r8, #0
   124bc:	beq	124cc <__assert_fail@plt+0xec4>
   124c0:	mov	r0, r7
   124c4:	mov	r1, r4
   124c8:	b	124f0 <__assert_fail@plt+0xee8>
   124cc:	mov	r0, #1
   124d0:	mov	r1, r4
   124d4:	bl	12c24 <__assert_fail@plt+0x161c>
   124d8:	subs	r7, r7, #1
   124dc:	add	r4, r4, #4
   124e0:	bne	124cc <__assert_fail@plt+0xec4>
   124e4:	b	124f4 <__assert_fail@plt+0xeec>
   124e8:	mov	r0, #0
   124ec:	mov	r1, #0
   124f0:	bl	12c24 <__assert_fail@plt+0x161c>
   124f4:	ldr	r0, [r9, #64]	; 0x40
   124f8:	bl	16170 <__assert_fail@plt+0x4b68>
   124fc:	ldr	r0, [r9, #68]	; 0x44
   12500:	bl	16170 <__assert_fail@plt+0x4b68>
   12504:	ldr	r0, [r9, #76]	; 0x4c
   12508:	bl	16170 <__assert_fail@plt+0x4b68>
   1250c:	ldr	r0, [r9, #96]	; 0x60
   12510:	bl	16170 <__assert_fail@plt+0x4b68>
   12514:	ldr	r0, [r9, #100]	; 0x64
   12518:	bl	16170 <__assert_fail@plt+0x4b68>
   1251c:	ldr	r0, [r9, #104]	; 0x68
   12520:	bl	16170 <__assert_fail@plt+0x4b68>
   12524:	ldrb	r0, [r9, #19]
   12528:	cmp	r0, #1
   1252c:	bne	12548 <__assert_fail@plt+0xf40>
   12530:	movw	r0, #8648	; 0x21c8
   12534:	movt	r0, #3
   12538:	ldr	r0, [r0]
   1253c:	bl	15fb8 <__assert_fail@plt+0x49b0>
   12540:	cmn	r0, #1
   12544:	beq	12620 <__assert_fail@plt+0x1018>
   12548:	ldrb	r0, [r9, #20]
   1254c:	sub	sp, fp, #28
   12550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12554:	mov	r0, #1
   12558:	bl	1283c <__assert_fail@plt+0x1234>
   1255c:	movw	r0, #8552	; 0x2168
   12560:	movw	r2, #63030	; 0xf636
   12564:	mov	r1, #0
   12568:	movw	r7, #63017	; 0xf629
   1256c:	movt	r0, #3
   12570:	movt	r2, #1
   12574:	str	r1, [sp, #8]
   12578:	movw	r1, #63000	; 0xf618
   1257c:	movt	r7, #1
   12580:	ldr	r3, [r0]
   12584:	movw	r0, #8652	; 0x21cc
   12588:	str	r2, [sp, #4]
   1258c:	movw	r2, #63003	; 0xf61b
   12590:	movt	r1, #1
   12594:	str	r7, [sp]
   12598:	movt	r0, #3
   1259c:	movt	r2, #1
   125a0:	ldr	r0, [r0]
   125a4:	bl	1b2b4 <__assert_fail@plt+0x9cac>
   125a8:	mov	r0, #0
   125ac:	bl	114ac <exit@plt>
   125b0:	mov	r0, #0
   125b4:	bl	1283c <__assert_fail@plt+0x1234>
   125b8:	bl	14294 <__assert_fail@plt+0x2c8c>
   125bc:	movw	r1, #62724	; 0xf504
   125c0:	movt	r1, #1
   125c4:	b	12604 <__assert_fail@plt+0xffc>
   125c8:	movw	r1, #62774	; 0xf536
   125cc:	mov	r0, #0
   125d0:	mov	r2, #5
   125d4:	movt	r1, #1
   125d8:	bl	1138c <dcgettext@plt>
   125dc:	mov	r4, r0
   125e0:	ldr	r0, [r8]
   125e4:	bl	1a444 <__assert_fail@plt+0x8e3c>
   125e8:	mov	r3, r0
   125ec:	mov	r0, #1
   125f0:	mov	r1, #0
   125f4:	mov	r2, r4
   125f8:	bl	11428 <error@plt>
   125fc:	movw	r1, #63094	; 0xf676
   12600:	movt	r1, #1
   12604:	mov	r0, #0
   12608:	mov	r2, #5
   1260c:	bl	1138c <dcgettext@plt>
   12610:	mov	r2, r0
   12614:	mov	r0, #1
   12618:	mov	r1, #0
   1261c:	bl	11428 <error@plt>
   12620:	bl	114e8 <__errno_location@plt>
   12624:	ldr	r4, [r0]
   12628:	movw	r1, #63214	; 0xf6ee
   1262c:	mov	r0, #0
   12630:	mov	r2, #5
   12634:	movt	r1, #1
   12638:	bl	1138c <dcgettext@plt>
   1263c:	mov	r2, r0
   12640:	mov	r0, #1
   12644:	mov	r1, r4
   12648:	bl	11428 <error@plt>
   1264c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12650:	add	fp, sp, #24
   12654:	sub	sp, sp, #32
   12658:	movw	r6, #1972	; 0x7b4
   1265c:	mvn	r5, #0
   12660:	mov	r8, r1
   12664:	mov	r9, r0
   12668:	mov	r7, r2
   1266c:	mov	r0, r2
   12670:	add	r1, sp, #28
   12674:	add	r3, sp, #16
   12678:	mov	r2, #10
   1267c:	movt	r6, #2
   12680:	str	r5, [sp, #12]
   12684:	str	r5, [sp, #8]
   12688:	str	r6, [sp]
   1268c:	bl	1e154 <__assert_fail@plt+0xcb4c>
   12690:	orr	r1, r0, #2
   12694:	cmp	r1, #2
   12698:	bne	12768 <__assert_fail@plt+0x1160>
   1269c:	ldr	r3, [sp, #28]
   126a0:	mov	r4, #0
   126a4:	cmp	r3, r7
   126a8:	ldrne	r0, [sp, #16]
   126ac:	ldrne	r1, [sp, #20]
   126b0:	orrsne	r2, r0, r1
   126b4:	bne	126c4 <__assert_fail@plt+0x10bc>
   126b8:	mov	r0, r4
   126bc:	sub	sp, fp, #24
   126c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   126c4:	ldrb	r2, [r3]
   126c8:	cmp	r2, #58	; 0x3a
   126cc:	bne	1272c <__assert_fail@plt+0x1124>
   126d0:	add	r5, r3, #1
   126d4:	add	r1, sp, #28
   126d8:	add	r3, sp, #8
   126dc:	mov	r2, #10
   126e0:	str	r6, [sp]
   126e4:	mov	r0, r5
   126e8:	bl	1e154 <__assert_fail@plt+0xcb4c>
   126ec:	cmp	r0, #0
   126f0:	bne	12768 <__assert_fail@plt+0x1160>
   126f4:	ldr	r2, [sp, #28]
   126f8:	cmp	r5, r2
   126fc:	beq	126b8 <__assert_fail@plt+0x10b0>
   12700:	ldr	r0, [sp, #16]
   12704:	ldr	r5, [sp, #8]
   12708:	ldr	r1, [sp, #20]
   1270c:	ldr	r3, [sp, #12]
   12710:	subs	r7, r5, r0
   12714:	sbcs	r7, r3, r1
   12718:	bcc	126b8 <__assert_fail@plt+0x10b0>
   1271c:	ldrb	r2, [r2]
   12720:	cmp	r2, #0
   12724:	bne	126b8 <__assert_fail@plt+0x10b0>
   12728:	b	12738 <__assert_fail@plt+0x1130>
   1272c:	mvn	r3, #0
   12730:	cmp	r2, #0
   12734:	bne	126b8 <__assert_fail@plt+0x10b0>
   12738:	movw	r2, #8504	; 0x2138
   1273c:	movw	r7, #8792	; 0x2258
   12740:	mov	r4, #1
   12744:	movt	r7, #3
   12748:	movt	r2, #3
   1274c:	str	r0, [r7, #16]
   12750:	str	r5, [r2, #40]	; 0x28
   12754:	str	r3, [r2, #44]	; 0x2c
   12758:	str	r1, [r7, #20]
   1275c:	mov	r0, r4
   12760:	sub	sp, fp, #24
   12764:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12768:	movw	r3, #2592	; 0xa20
   1276c:	mov	r1, r9
   12770:	mov	r2, r8
   12774:	str	r7, [sp]
   12778:	movt	r3, #2
   1277c:	bl	1e090 <__assert_fail@plt+0xca88>
   12780:	push	{r4, r5, r6, r7, fp, lr}
   12784:	add	fp, sp, #16
   12788:	sub	sp, sp, #8
   1278c:	mov	r5, r0
   12790:	ldrb	r0, [r0]
   12794:	mov	r4, r1
   12798:	mov	r6, r3
   1279c:	sub	r1, r0, #48	; 0x30
   127a0:	cmp	r1, #10
   127a4:	strbcs	r0, [r2]
   127a8:	ldrbcs	r0, [r5, #1]!
   127ac:	cmp	r0, #0
   127b0:	beq	127ec <__assert_fail@plt+0x11e4>
   127b4:	movw	r0, #1972	; 0x7b4
   127b8:	add	r3, sp, #4
   127bc:	mov	r1, #0
   127c0:	mov	r2, #10
   127c4:	movt	r0, #2
   127c8:	str	r0, [sp]
   127cc:	mov	r0, r5
   127d0:	bl	1d4fc <__assert_fail@plt+0xbef4>
   127d4:	cmp	r0, #0
   127d8:	bne	127f4 <__assert_fail@plt+0x11ec>
   127dc:	ldr	r0, [sp, #4]
   127e0:	cmp	r0, #0
   127e4:	ble	127f4 <__assert_fail@plt+0x11ec>
   127e8:	str	r0, [r6]
   127ec:	sub	sp, fp, #16
   127f0:	pop	{r4, r5, r6, r7, fp, pc}
   127f4:	bl	114e8 <__errno_location@plt>
   127f8:	ldr	r6, [r0]
   127fc:	movw	r1, #1888	; 0x760
   12800:	mov	r0, #0
   12804:	mov	r2, #5
   12808:	movt	r1, #2
   1280c:	bl	1138c <dcgettext@plt>
   12810:	mov	r7, r0
   12814:	mov	r0, r5
   12818:	bl	1a444 <__assert_fail@plt+0x8e3c>
   1281c:	str	r0, [sp]
   12820:	mov	r0, #0
   12824:	mov	r1, r6
   12828:	mov	r2, r7
   1282c:	mov	r3, r4
   12830:	bl	11428 <error@plt>
   12834:	mov	r0, #1
   12838:	bl	1283c <__assert_fail@plt+0x1234>
   1283c:	push	{fp, lr}
   12840:	mov	fp, sp
   12844:	sub	sp, sp, #56	; 0x38
   12848:	mov	r4, r0
   1284c:	cmp	r0, #0
   12850:	bne	12be0 <__assert_fail@plt+0x15d8>
   12854:	movw	r1, #63268	; 0xf724
   12858:	mov	r0, #0
   1285c:	mov	r2, #5
   12860:	movt	r1, #1
   12864:	bl	1138c <dcgettext@plt>
   12868:	mov	r1, r0
   1286c:	movw	r0, #8840	; 0x2288
   12870:	movt	r0, #3
   12874:	ldr	r2, [r0]
   12878:	mov	r0, #1
   1287c:	bl	11518 <__printf_chk@plt>
   12880:	movw	r1, #63301	; 0xf745
   12884:	mov	r0, #0
   12888:	mov	r2, #5
   1288c:	movt	r1, #1
   12890:	bl	1138c <dcgettext@plt>
   12894:	movw	r7, #8652	; 0x21cc
   12898:	movt	r7, #3
   1289c:	ldr	r1, [r7]
   128a0:	bl	112cc <fputs_unlocked@plt>
   128a4:	movw	r1, #2094	; 0x82e
   128a8:	mov	r0, #0
   128ac:	mov	r2, #5
   128b0:	movt	r1, #2
   128b4:	bl	1138c <dcgettext@plt>
   128b8:	ldr	r1, [r7]
   128bc:	bl	112cc <fputs_unlocked@plt>
   128c0:	movw	r1, #2150	; 0x866
   128c4:	mov	r0, #0
   128c8:	mov	r2, #5
   128cc:	movt	r1, #2
   128d0:	bl	1138c <dcgettext@plt>
   128d4:	ldr	r1, [r7]
   128d8:	bl	112cc <fputs_unlocked@plt>
   128dc:	movw	r1, #63346	; 0xf772
   128e0:	mov	r0, #0
   128e4:	mov	r2, #5
   128e8:	movt	r1, #1
   128ec:	bl	1138c <dcgettext@plt>
   128f0:	ldr	r1, [r7]
   128f4:	bl	112cc <fputs_unlocked@plt>
   128f8:	movw	r1, #63680	; 0xf8c0
   128fc:	mov	r0, #0
   12900:	mov	r2, #5
   12904:	movt	r1, #1
   12908:	bl	1138c <dcgettext@plt>
   1290c:	ldr	r1, [r7]
   12910:	bl	112cc <fputs_unlocked@plt>
   12914:	movw	r1, #63950	; 0xf9ce
   12918:	mov	r0, #0
   1291c:	mov	r2, #5
   12920:	movt	r1, #1
   12924:	bl	1138c <dcgettext@plt>
   12928:	ldr	r1, [r7]
   1292c:	bl	112cc <fputs_unlocked@plt>
   12930:	movw	r1, #64350	; 0xfb5e
   12934:	mov	r0, #0
   12938:	mov	r2, #5
   1293c:	movt	r1, #1
   12940:	bl	1138c <dcgettext@plt>
   12944:	ldr	r1, [r7]
   12948:	bl	112cc <fputs_unlocked@plt>
   1294c:	movw	r1, #64777	; 0xfd09
   12950:	mov	r0, #0
   12954:	mov	r2, #5
   12958:	movt	r1, #1
   1295c:	bl	1138c <dcgettext@plt>
   12960:	ldr	r1, [r7]
   12964:	bl	112cc <fputs_unlocked@plt>
   12968:	movw	r1, #64997	; 0xfde5
   1296c:	mov	r0, #0
   12970:	mov	r2, #5
   12974:	movt	r1, #1
   12978:	bl	1138c <dcgettext@plt>
   1297c:	ldr	r1, [r7]
   12980:	bl	112cc <fputs_unlocked@plt>
   12984:	movw	r1, #65141	; 0xfe75
   12988:	mov	r0, #0
   1298c:	mov	r2, #5
   12990:	movt	r1, #1
   12994:	bl	1138c <dcgettext@plt>
   12998:	ldr	r1, [r7]
   1299c:	bl	112cc <fputs_unlocked@plt>
   129a0:	movw	r1, #65487	; 0xffcf
   129a4:	mov	r0, #0
   129a8:	mov	r2, #5
   129ac:	movt	r1, #1
   129b0:	bl	1138c <dcgettext@plt>
   129b4:	ldr	r1, [r7]
   129b8:	bl	112cc <fputs_unlocked@plt>
   129bc:	movw	r1, #204	; 0xcc
   129c0:	mov	r0, #0
   129c4:	mov	r2, #5
   129c8:	movt	r1, #2
   129cc:	bl	1138c <dcgettext@plt>
   129d0:	ldr	r1, [r7]
   129d4:	bl	112cc <fputs_unlocked@plt>
   129d8:	movw	r1, #530	; 0x212
   129dc:	mov	r0, #0
   129e0:	mov	r2, #5
   129e4:	movt	r1, #2
   129e8:	bl	1138c <dcgettext@plt>
   129ec:	ldr	r1, [r7]
   129f0:	bl	112cc <fputs_unlocked@plt>
   129f4:	movw	r1, #766	; 0x2fe
   129f8:	mov	r0, #0
   129fc:	mov	r2, #5
   12a00:	movt	r1, #2
   12a04:	bl	1138c <dcgettext@plt>
   12a08:	ldr	r1, [r7]
   12a0c:	bl	112cc <fputs_unlocked@plt>
   12a10:	movw	r1, #870	; 0x366
   12a14:	mov	r0, #0
   12a18:	mov	r2, #5
   12a1c:	movt	r1, #2
   12a20:	bl	1138c <dcgettext@plt>
   12a24:	ldr	r1, [r7]
   12a28:	bl	112cc <fputs_unlocked@plt>
   12a2c:	movw	r1, #1271	; 0x4f7
   12a30:	mov	r0, #0
   12a34:	mov	r2, #5
   12a38:	movt	r1, #2
   12a3c:	bl	1138c <dcgettext@plt>
   12a40:	ldr	r1, [r7]
   12a44:	bl	112cc <fputs_unlocked@plt>
   12a48:	movw	r1, #1486	; 0x5ce
   12a4c:	mov	r0, #0
   12a50:	mov	r2, #5
   12a54:	movt	r1, #2
   12a58:	bl	1138c <dcgettext@plt>
   12a5c:	ldr	r1, [r7]
   12a60:	bl	112cc <fputs_unlocked@plt>
   12a64:	movw	r1, #1531	; 0x5fb
   12a68:	mov	r0, #0
   12a6c:	mov	r2, #5
   12a70:	movt	r1, #2
   12a74:	bl	1138c <dcgettext@plt>
   12a78:	ldr	r1, [r7]
   12a7c:	bl	112cc <fputs_unlocked@plt>
   12a80:	movw	r0, #3024	; 0xbd0
   12a84:	mov	r2, #48	; 0x30
   12a88:	mov	r6, sp
   12a8c:	movw	r5, #63000	; 0xf618
   12a90:	movt	r0, #2
   12a94:	movt	r5, #1
   12a98:	add	r1, r0, #32
   12a9c:	add	r3, r0, #16
   12aa0:	vld1.64	{d18-d19}, [r0], r2
   12aa4:	vld1.64	{d16-d17}, [r1]
   12aa8:	vld1.64	{d20-d21}, [r3]
   12aac:	add	r1, r6, #32
   12ab0:	vldr	d22, [r0]
   12ab4:	add	r0, r6, #16
   12ab8:	vst1.64	{d16-d17}, [r1]
   12abc:	movw	r1, #2225	; 0x8b1
   12ac0:	vst1.64	{d20-d21}, [r0]
   12ac4:	mov	r0, r6
   12ac8:	vst1.64	{d18-d19}, [r0], r2
   12acc:	movt	r1, #2
   12ad0:	vstr	d22, [r0]
   12ad4:	mov	r0, r5
   12ad8:	bl	112f0 <strcmp@plt>
   12adc:	cmp	r0, #0
   12ae0:	ldrne	r1, [r6, #8]!
   12ae4:	cmpne	r1, #0
   12ae8:	bne	12ad4 <__assert_fail@plt+0x14cc>
   12aec:	ldr	r6, [r6, #4]
   12af0:	movw	r1, #2320	; 0x910
   12af4:	mov	r0, #0
   12af8:	mov	r2, #5
   12afc:	movt	r1, #2
   12b00:	bl	1138c <dcgettext@plt>
   12b04:	movw	r2, #63003	; 0xf61b
   12b08:	movw	r3, #2343	; 0x927
   12b0c:	mov	r1, r0
   12b10:	mov	r0, #1
   12b14:	movt	r2, #1
   12b18:	movt	r3, #2
   12b1c:	bl	11518 <__printf_chk@plt>
   12b20:	cmp	r6, #0
   12b24:	mov	r0, #5
   12b28:	mov	r1, #0
   12b2c:	moveq	r6, r5
   12b30:	bl	11578 <setlocale@plt>
   12b34:	cmp	r0, #0
   12b38:	beq	12b70 <__assert_fail@plt+0x1568>
   12b3c:	movw	r1, #2383	; 0x94f
   12b40:	mov	r2, #3
   12b44:	movt	r1, #2
   12b48:	bl	115e4 <strncmp@plt>
   12b4c:	cmp	r0, #0
   12b50:	beq	12b70 <__assert_fail@plt+0x1568>
   12b54:	movw	r1, #2387	; 0x953
   12b58:	mov	r0, #0
   12b5c:	mov	r2, #5
   12b60:	movt	r1, #2
   12b64:	bl	1138c <dcgettext@plt>
   12b68:	ldr	r1, [r7]
   12b6c:	bl	112cc <fputs_unlocked@plt>
   12b70:	movw	r1, #2458	; 0x99a
   12b74:	mov	r0, #0
   12b78:	mov	r2, #5
   12b7c:	movt	r1, #2
   12b80:	bl	1138c <dcgettext@plt>
   12b84:	movw	r2, #2343	; 0x927
   12b88:	mov	r1, r0
   12b8c:	mov	r0, #1
   12b90:	mov	r3, r5
   12b94:	movt	r2, #2
   12b98:	bl	11518 <__printf_chk@plt>
   12b9c:	movw	r1, #2485	; 0x9b5
   12ba0:	mov	r0, #0
   12ba4:	mov	r2, #5
   12ba8:	movt	r1, #2
   12bac:	bl	1138c <dcgettext@plt>
   12bb0:	movw	r3, #1972	; 0x7b4
   12bb4:	mov	r1, r0
   12bb8:	movw	r0, #2253	; 0x8cd
   12bbc:	cmp	r6, r5
   12bc0:	mov	r2, r6
   12bc4:	movt	r0, #2
   12bc8:	movt	r3, #2
   12bcc:	moveq	r3, r0
   12bd0:	mov	r0, #1
   12bd4:	bl	11518 <__printf_chk@plt>
   12bd8:	mov	r0, r4
   12bdc:	bl	114ac <exit@plt>
   12be0:	movw	r0, #8640	; 0x21c0
   12be4:	movw	r1, #63229	; 0xf6fd
   12be8:	mov	r2, #5
   12bec:	movt	r0, #3
   12bf0:	movt	r1, #1
   12bf4:	ldr	r5, [r0]
   12bf8:	mov	r0, #0
   12bfc:	bl	1138c <dcgettext@plt>
   12c00:	mov	r2, r0
   12c04:	movw	r0, #8840	; 0x2288
   12c08:	mov	r1, #1
   12c0c:	movt	r0, #3
   12c10:	ldr	r3, [r0]
   12c14:	mov	r0, r5
   12c18:	bl	11530 <__fprintf_chk@plt>
   12c1c:	mov	r0, r4
   12c20:	bl	114ac <exit@plt>
   12c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c28:	add	fp, sp, #28
   12c2c:	sub	sp, sp, #44	; 0x2c
   12c30:	mov	r5, r0
   12c34:	movw	r0, #8504	; 0x2138
   12c38:	mov	r4, r1
   12c3c:	movw	r8, #8664	; 0x21d8
   12c40:	movt	r0, #3
   12c44:	movt	r8, #3
   12c48:	ldr	r1, [r0, #12]
   12c4c:	subs	r0, r1, #10
   12c50:	str	r0, [r8, #52]	; 0x34
   12c54:	bgt	12c64 <__assert_fail@plt+0x165c>
   12c58:	movw	r0, #257	; 0x101
   12c5c:	strh	r0, [r8, #14]
   12c60:	b	12c70 <__assert_fail@plt+0x1668>
   12c64:	ldrb	r2, [r8, #14]
   12c68:	cmp	r2, #1
   12c6c:	bne	12c78 <__assert_fail@plt+0x1670>
   12c70:	mov	r0, r1
   12c74:	str	r1, [r8, #52]	; 0x34
   12c78:	ldrb	r1, [r8, #4]
   12c7c:	cmp	r1, #1
   12c80:	addeq	r0, r0, r0, lsr #31
   12c84:	asreq	r0, r0, #1
   12c88:	streq	r0, [r8, #52]	; 0x34
   12c8c:	cmp	r5, #0
   12c90:	beq	12cb4 <__assert_fail@plt+0x16ac>
   12c94:	ldrb	r0, [r8, #9]
   12c98:	mov	r1, #0
   12c9c:	cmp	r0, #1
   12ca0:	movweq	r0, #8504	; 0x2138
   12ca4:	moveq	r1, #1
   12ca8:	movteq	r0, #3
   12cac:	streq	r5, [r0, #32]
   12cb0:	b	12cbc <__assert_fail@plt+0x16b4>
   12cb4:	mov	r1, #0
   12cb8:	strb	r1, [r8, #9]
   12cbc:	ldrb	r0, [r8, #1]
   12cc0:	cmp	r0, #0
   12cc4:	moveq	r0, #1
   12cc8:	strbeq	r0, [r8, #2]
   12ccc:	movw	r0, #8504	; 0x2138
   12cd0:	movt	r0, #3
   12cd4:	ldr	r0, [r0, #32]
   12cd8:	cmp	r0, #2
   12cdc:	blt	12d5c <__assert_fail@plt+0x1754>
   12ce0:	ldrb	r3, [r8, #13]
   12ce4:	ldrb	r2, [r8, #8]
   12ce8:	cmp	r3, #0
   12cec:	beq	12d6c <__assert_fail@plt+0x1764>
   12cf0:	ldr	r3, [r8, #40]	; 0x28
   12cf4:	cmp	r3, #1
   12cf8:	bne	12d30 <__assert_fail@plt+0x1728>
   12cfc:	eors	r7, r2, #1
   12d00:	beq	12d30 <__assert_fail@plt+0x1728>
   12d04:	movw	r7, #8504	; 0x2138
   12d08:	movt	r7, #3
   12d0c:	ldr	r7, [r7, #24]
   12d10:	ldrb	r7, [r7]
   12d14:	cmp	r7, #9
   12d18:	bne	12d30 <__assert_fail@plt+0x1728>
   12d1c:	movw	r7, #1973	; 0x7b5
   12d20:	movw	r6, #8504	; 0x2138
   12d24:	movt	r7, #2
   12d28:	movt	r6, #3
   12d2c:	str	r7, [r6, #24]
   12d30:	mov	r7, #1
   12d34:	cmp	r3, #1
   12d38:	strb	r7, [r8, #17]
   12d3c:	bne	12dac <__assert_fail@plt+0x17a4>
   12d40:	movw	r3, #8504	; 0x2138
   12d44:	movt	r3, #3
   12d48:	ldr	r3, [r3, #24]
   12d4c:	ldrb	r3, [r3]
   12d50:	cmp	r3, #9
   12d54:	bne	12dac <__assert_fail@plt+0x17a4>
   12d58:	b	12db4 <__assert_fail@plt+0x17ac>
   12d5c:	mov	r2, #1
   12d60:	strb	r2, [r8, #1]
   12d64:	ldrb	r2, [r8, #8]
   12d68:	b	12dbc <__assert_fail@plt+0x17b4>
   12d6c:	mov	r3, #1
   12d70:	movw	r7, #1971	; 0x7b3
   12d74:	cmp	r2, #0
   12d78:	str	r3, [r8, #40]	; 0x28
   12d7c:	strb	r3, [r8, #13]
   12d80:	strb	r3, [r8, #17]
   12d84:	movw	r3, #1973	; 0x7b5
   12d88:	movt	r7, #2
   12d8c:	movt	r3, #2
   12d90:	movne	r3, r7
   12d94:	movw	r7, #8504	; 0x2138
   12d98:	movt	r7, #3
   12d9c:	str	r3, [r7, #24]
   12da0:	ldrb	r3, [r3]
   12da4:	cmp	r3, #9
   12da8:	beq	12db4 <__assert_fail@plt+0x17ac>
   12dac:	mov	r3, #1
   12db0:	strb	r3, [r8, #5]
   12db4:	mov	r3, #1
   12db8:	strb	r3, [r8, #7]
   12dbc:	cmp	r2, #0
   12dc0:	mov	r3, #0
   12dc4:	movne	r2, #0
   12dc8:	strbne	r2, [r8, #17]
   12dcc:	ldrb	ip, [r8, #10]
   12dd0:	cmp	ip, #1
   12dd4:	bne	12e1c <__assert_fail@plt+0x1814>
   12dd8:	movw	r2, #8504	; 0x2138
   12ddc:	movt	r2, #3
   12de0:	ldrd	r6, [r2, #16]
   12de4:	str	r7, [r2, #36]	; 0x24
   12de8:	ldrb	r3, [r2, #2]
   12dec:	cmp	r3, #9
   12df0:	bne	12e08 <__assert_fail@plt+0x1800>
   12df4:	asr	r3, r6, #31
   12df8:	add	r3, r6, r3, lsr #29
   12dfc:	bic	r3, r3, #7
   12e00:	add	r3, r3, #8
   12e04:	b	12e0c <__assert_fail@plt+0x1804>
   12e08:	add	r3, r6, #1
   12e0c:	cmp	r1, #0
   12e10:	str	r3, [r8, #56]	; 0x38
   12e14:	movne	r1, r3
   12e18:	mov	r3, r1
   12e1c:	ldr	r1, [r8, #40]	; 0x28
   12e20:	sub	r7, r0, #1
   12e24:	cmn	r1, #1
   12e28:	ble	12e50 <__assert_fail@plt+0x1848>
   12e2c:	cmp	r1, #0
   12e30:	beq	12eac <__assert_fail@plt+0x18a4>
   12e34:	cmp	r0, #0
   12e38:	ble	12e78 <__assert_fail@plt+0x1870>
   12e3c:	mvn	r6, #-2147483648	; 0x80000000
   12e40:	udiv	r2, r6, r1
   12e44:	cmp	r2, r7
   12e48:	bge	12eac <__assert_fail@plt+0x18a4>
   12e4c:	b	12eb0 <__assert_fail@plt+0x18a8>
   12e50:	cmp	r0, #0
   12e54:	ble	12e94 <__assert_fail@plt+0x188c>
   12e58:	cmn	r1, #1
   12e5c:	beq	12eac <__assert_fail@plt+0x18a4>
   12e60:	mov	r2, #-2147483648	; 0x80000000
   12e64:	mvn	r6, #-2147483648	; 0x80000000
   12e68:	sdiv	r2, r2, r1
   12e6c:	cmp	r2, r7
   12e70:	bge	12eac <__assert_fail@plt+0x18a4>
   12e74:	b	12eb0 <__assert_fail@plt+0x18a8>
   12e78:	beq	12ea8 <__assert_fail@plt+0x18a0>
   12e7c:	mov	r2, #-2147483648	; 0x80000000
   12e80:	mvn	r6, #-2147483648	; 0x80000000
   12e84:	sdiv	r2, r2, r7
   12e88:	cmp	r2, r1
   12e8c:	mulge	r6, r7, r1
   12e90:	b	12eb0 <__assert_fail@plt+0x18a8>
   12e94:	mvn	r6, #-2147483648	; 0x80000000
   12e98:	sdiv	r2, r6, r1
   12e9c:	cmp	r0, r2
   12ea0:	bgt	12eac <__assert_fail@plt+0x18a4>
   12ea4:	b	12eb0 <__assert_fail@plt+0x18a8>
   12ea8:	mvn	r7, #0
   12eac:	mul	r6, r7, r1
   12eb0:	movw	r1, #8504	; 0x2138
   12eb4:	movt	r1, #3
   12eb8:	ldr	r1, [r1, #28]
   12ebc:	sub	r1, r1, r3
   12ec0:	subs	r1, r1, r6
   12ec4:	movvs	r1, #0
   12ec8:	sdiv	r0, r1, r0
   12ecc:	cmp	r0, #0
   12ed0:	str	r0, [r8, #60]	; 0x3c
   12ed4:	ble	14270 <__assert_fail@plt+0x2c68>
   12ed8:	cmp	ip, #0
   12edc:	beq	12f08 <__assert_fail@plt+0x1900>
   12ee0:	ldr	r0, [r8, #64]	; 0x40
   12ee4:	bl	16170 <__assert_fail@plt+0x4b68>
   12ee8:	movw	r0, #8504	; 0x2138
   12eec:	movt	r0, #3
   12ef0:	ldr	r0, [r0, #16]
   12ef4:	cmp	r0, #11
   12ef8:	movls	r0, #11
   12efc:	add	r0, r0, #1
   12f00:	bl	1b4e8 <__assert_fail@plt+0x9ee0>
   12f04:	str	r0, [r8, #64]	; 0x40
   12f08:	ldr	r0, [r8, #68]	; 0x44
   12f0c:	bl	16170 <__assert_fail@plt+0x4b68>
   12f10:	movw	r0, #8504	; 0x2138
   12f14:	movt	r0, #3
   12f18:	mov	r6, r0
   12f1c:	ldr	r0, [r0, #4]
   12f20:	cmp	r0, #8
   12f24:	movle	r0, #8
   12f28:	bl	1b4e8 <__assert_fail@plt+0x9ee0>
   12f2c:	mov	r1, #0
   12f30:	str	r0, [r8, #68]	; 0x44
   12f34:	str	r1, [r8, #72]	; 0x48
   12f38:	ldr	r0, [r8, #76]	; 0x4c
   12f3c:	bl	16170 <__assert_fail@plt+0x4b68>
   12f40:	ldr	r0, [r6, #32]
   12f44:	mov	r1, #40	; 0x28
   12f48:	bl	1b5b8 <__assert_fail@plt+0x9fb0>
   12f4c:	str	r0, [r8, #76]	; 0x4c
   12f50:	mov	r6, r0
   12f54:	ldrb	r0, [r8, #9]
   12f58:	cmp	r0, #1
   12f5c:	beq	12fac <__assert_fail@plt+0x19a4>
   12f60:	cmp	r5, #1
   12f64:	blt	13014 <__assert_fail@plt+0x1a0c>
   12f68:	ldr	r0, [r4]
   12f6c:	mov	r1, r6
   12f70:	bl	142c0 <__assert_fail@plt+0x2cb8>
   12f74:	cmp	r0, #0
   12f78:	beq	14110 <__assert_fail@plt+0x2b08>
   12f7c:	ldr	r0, [r6]
   12f80:	ldr	r4, [r4]
   12f84:	bl	11524 <fileno@plt>
   12f88:	mov	r1, r0
   12f8c:	mov	r0, r4
   12f90:	bl	143dc <__assert_fail@plt+0x2dd4>
   12f94:	mov	r0, #0
   12f98:	add	r4, r6, #4
   12f9c:	str	r0, [r6, #24]
   12fa0:	b	13074 <__assert_fail@plt+0x1a6c>
   12fa4:	add	r4, r4, #4
   12fa8:	add	r6, r6, #40	; 0x28
   12fac:	cmp	r5, #0
   12fb0:	beq	12fec <__assert_fail@plt+0x19e4>
   12fb4:	ldr	r0, [r4]
   12fb8:	mov	r1, r6
   12fbc:	bl	142c0 <__assert_fail@plt+0x2cb8>
   12fc0:	sub	r5, r5, #1
   12fc4:	cmp	r0, #0
   12fc8:	bne	12fa4 <__assert_fail@plt+0x199c>
   12fcc:	movw	r0, #8504	; 0x2138
   12fd0:	sub	r6, r6, #40	; 0x28
   12fd4:	movt	r0, #3
   12fd8:	mov	r1, r0
   12fdc:	ldr	r0, [r0, #32]
   12fe0:	sub	r0, r0, #1
   12fe4:	str	r0, [r1, #32]
   12fe8:	b	12fa4 <__assert_fail@plt+0x199c>
   12fec:	movw	r0, #8504	; 0x2138
   12ff0:	movt	r0, #3
   12ff4:	ldr	r0, [r0, #32]
   12ff8:	cmp	r0, #0
   12ffc:	beq	14110 <__assert_fail@plt+0x2b08>
   13000:	movw	r0, #1972	; 0x7b4
   13004:	mvn	r1, #0
   13008:	movt	r0, #2
   1300c:	bl	143dc <__assert_fail@plt+0x2dd4>
   13010:	b	130b4 <__assert_fail@plt+0x1aac>
   13014:	movw	r1, #63214	; 0xf6ee
   13018:	mov	r0, #0
   1301c:	mov	r2, #5
   13020:	mov	r5, #0
   13024:	movt	r1, #1
   13028:	bl	1138c <dcgettext@plt>
   1302c:	mov	r4, r6
   13030:	mvn	r1, #0
   13034:	str	r0, [r4, #4]!
   13038:	movw	r0, #8648	; 0x21c8
   1303c:	movt	r0, #3
   13040:	ldr	r0, [r0]
   13044:	str	r0, [r6]
   13048:	mov	r0, #1
   1304c:	strb	r5, [r6, #37]	; 0x25
   13050:	str	r5, [r6, #8]
   13054:	strb	r0, [r8, #19]
   13058:	ldr	r0, [r8, #72]	; 0x48
   1305c:	add	r0, r0, #1
   13060:	str	r0, [r8, #72]	; 0x48
   13064:	movw	r0, #1972	; 0x7b4
   13068:	movt	r0, #2
   1306c:	bl	143dc <__assert_fail@plt+0x2dd4>
   13070:	str	r5, [r6, #24]
   13074:	movw	r0, #8504	; 0x2138
   13078:	movt	r0, #3
   1307c:	ldr	r2, [r0, #32]
   13080:	cmp	r2, #1
   13084:	beq	130b4 <__assert_fail@plt+0x1aac>
   13088:	ldr	r0, [r6]
   1308c:	ldr	r1, [r4]
   13090:	rsb	r2, r2, #1
   13094:	add	r3, r6, #40	; 0x28
   13098:	mov	r7, #0
   1309c:	stm	r3, {r0, r1, r7}
   130a0:	strb	r7, [r3, #37]	; 0x25
   130a4:	str	r7, [r3, #24]
   130a8:	adds	r2, r2, #1
   130ac:	add	r3, r3, #40	; 0x28
   130b0:	bne	1309c <__assert_fail@plt+0x1a94>
   130b4:	ldr	r0, [r8, #72]	; 0x48
   130b8:	str	r0, [r8, #80]	; 0x50
   130bc:	ldrb	r0, [r8, #1]
   130c0:	cmp	r0, #0
   130c4:	bne	1325c <__assert_fail@plt+0x1c54>
   130c8:	movw	r0, #8504	; 0x2138
   130cc:	movt	r0, #3
   130d0:	ldr	r0, [r0, #32]
   130d4:	cmn	r0, #1
   130d8:	ble	13104 <__assert_fail@plt+0x1afc>
   130dc:	ldr	r1, [r8, #52]	; 0x34
   130e0:	cmp	r0, #0
   130e4:	beq	1315c <__assert_fail@plt+0x1b54>
   130e8:	cmn	r1, #1
   130ec:	ble	1312c <__assert_fail@plt+0x1b24>
   130f0:	mvn	r2, #-2147483648	; 0x80000000
   130f4:	udiv	r2, r2, r0
   130f8:	cmp	r2, r1
   130fc:	bge	1315c <__assert_fail@plt+0x1b54>
   13100:	b	13170 <__assert_fail@plt+0x1b68>
   13104:	ldr	r1, [r8, #52]	; 0x34
   13108:	cmn	r1, #1
   1310c:	ble	13144 <__assert_fail@plt+0x1b3c>
   13110:	cmn	r0, #1
   13114:	beq	1315c <__assert_fail@plt+0x1b54>
   13118:	mov	r2, #-2147483648	; 0x80000000
   1311c:	sdiv	r2, r2, r0
   13120:	cmp	r2, r1
   13124:	bge	1315c <__assert_fail@plt+0x1b54>
   13128:	b	13170 <__assert_fail@plt+0x1b68>
   1312c:	beq	13158 <__assert_fail@plt+0x1b50>
   13130:	mov	r2, #-2147483648	; 0x80000000
   13134:	sdiv	r2, r2, r1
   13138:	cmp	r2, r0
   1313c:	bge	1315c <__assert_fail@plt+0x1b54>
   13140:	b	13170 <__assert_fail@plt+0x1b68>
   13144:	mvn	r2, #-2147483648	; 0x80000000
   13148:	sdiv	r2, r2, r0
   1314c:	cmp	r1, r2
   13150:	bge	1315c <__assert_fail@plt+0x1b54>
   13154:	b	13170 <__assert_fail@plt+0x1b68>
   13158:	mvn	r1, #0
   1315c:	mul	r4, r1, r0
   13160:	adds	r5, r4, #1
   13164:	ldrvc	r0, [r8, #60]	; 0x3c
   13168:	addsvc	r6, r0, #1
   1316c:	bvc	13174 <__assert_fail@plt+0x1b6c>
   13170:	bl	14294 <__assert_fail@plt+0x2c8c>
   13174:	cmn	r6, #1
   13178:	ble	131a0 <__assert_fail@plt+0x1b98>
   1317c:	cmp	r6, #0
   13180:	beq	131ec <__assert_fail@plt+0x1be4>
   13184:	cmn	r4, #1
   13188:	ble	131c4 <__assert_fail@plt+0x1bbc>
   1318c:	mvn	r0, #-2147483648	; 0x80000000
   13190:	udiv	r0, r0, r6
   13194:	cmp	r0, r4
   13198:	bge	131ec <__assert_fail@plt+0x1be4>
   1319c:	b	13170 <__assert_fail@plt+0x1b68>
   131a0:	cmn	r4, #1
   131a4:	ble	131dc <__assert_fail@plt+0x1bd4>
   131a8:	cmn	r6, #1
   131ac:	beq	131ec <__assert_fail@plt+0x1be4>
   131b0:	mov	r0, #-2147483648	; 0x80000000
   131b4:	sdiv	r0, r0, r6
   131b8:	cmp	r0, r4
   131bc:	bge	131ec <__assert_fail@plt+0x1be4>
   131c0:	b	13170 <__assert_fail@plt+0x1b68>
   131c4:	beq	131ec <__assert_fail@plt+0x1be4>
   131c8:	mov	r0, #-2147483648	; 0x80000000
   131cc:	sdiv	r0, r0, r4
   131d0:	cmp	r0, r6
   131d4:	bge	131ec <__assert_fail@plt+0x1be4>
   131d8:	b	13170 <__assert_fail@plt+0x1b68>
   131dc:	mvn	r0, #-2147483648	; 0x80000000
   131e0:	sdiv	r0, r0, r6
   131e4:	cmp	r4, r0
   131e8:	blt	13170 <__assert_fail@plt+0x1b68>
   131ec:	ldr	r0, [r8, #96]	; 0x60
   131f0:	bl	16170 <__assert_fail@plt+0x4b68>
   131f4:	mov	r0, r5
   131f8:	mov	r1, #4
   131fc:	bl	1b5b8 <__assert_fail@plt+0x9fb0>
   13200:	str	r0, [r8, #96]	; 0x60
   13204:	ldr	r0, [r8, #100]	; 0x64
   13208:	bl	16170 <__assert_fail@plt+0x4b68>
   1320c:	mov	r0, r4
   13210:	mov	r1, #4
   13214:	bl	1b5b8 <__assert_fail@plt+0x9fb0>
   13218:	str	r0, [r8, #100]	; 0x64
   1321c:	ldr	r0, [r8, #104]	; 0x68
   13220:	bl	16170 <__assert_fail@plt+0x4b68>
   13224:	ldrb	r0, [r8, #13]
   13228:	mul	r4, r6, r4
   1322c:	mov	r1, #1
   13230:	mov	r5, #1
   13234:	cmp	r0, #0
   13238:	mov	r0, r4
   1323c:	movwne	r1, #2
   13240:	bl	1b5b8 <__assert_fail@plt+0x9fb0>
   13244:	ldrb	r1, [r8, #13]
   13248:	str	r0, [r8, #104]	; 0x68
   1324c:	cmp	r1, #0
   13250:	movwne	r5, #2
   13254:	mul	r1, r5, r4
   13258:	str	r1, [r8, #108]	; 0x6c
   1325c:	movw	r4, #8792	; 0x2258
   13260:	mov	r9, #0
   13264:	mov	r0, #1
   13268:	movt	r4, #3
   1326c:	ldr	r1, [r4, #16]
   13270:	ldr	r2, [r4, #20]
   13274:	str	r1, [sp, #36]	; 0x24
   13278:	subs	r1, r1, #2
   1327c:	str	r2, [fp, #-32]	; 0xffffffe0
   13280:	sbcs	r1, r2, #0
   13284:	mov	r1, #0
   13288:	bcc	134bc <__assert_fail@plt+0x1eb4>
   1328c:	movw	r0, #8504	; 0x2138
   13290:	mov	r9, #1
   13294:	mov	sl, #0
   13298:	movt	r0, #3
   1329c:	ldr	r7, [r0, #32]
   132a0:	ldr	r1, [r8, #52]	; 0x34
   132a4:	cmp	r1, #2
   132a8:	blt	13310 <__assert_fail@plt+0x1d08>
   132ac:	mov	r6, #1
   132b0:	cmp	r7, #1
   132b4:	blt	13304 <__assert_fail@plt+0x1cfc>
   132b8:	ldr	r4, [r8, #76]	; 0x4c
   132bc:	mov	r5, #1
   132c0:	ldr	r0, [r4, #8]
   132c4:	cmp	r0, #0
   132c8:	bne	132e4 <__assert_fail@plt+0x1cdc>
   132cc:	mov	r0, r4
   132d0:	mov	r1, r5
   132d4:	bl	1456c <__assert_fail@plt+0x2f64>
   132d8:	movw	r0, #8504	; 0x2138
   132dc:	movt	r0, #3
   132e0:	ldr	r7, [r0, #32]
   132e4:	add	r0, r5, #1
   132e8:	cmp	r5, r7
   132ec:	add	r4, r4, #40	; 0x28
   132f0:	mov	r5, r0
   132f4:	blt	132c0 <__assert_fail@plt+0x1cb8>
   132f8:	ldr	r1, [r8, #52]	; 0x34
   132fc:	movw	r4, #8792	; 0x2258
   13300:	movt	r4, #3
   13304:	add	r6, r6, #1
   13308:	cmp	r6, r1
   1330c:	blt	132b0 <__assert_fail@plt+0x1ca8>
   13310:	mov	r0, #1
   13314:	cmp	r7, #0
   13318:	strb	r0, [r8, #21]
   1331c:	ble	133b4 <__assert_fail@plt+0x1dac>
   13320:	ldr	r4, [r8, #76]	; 0x4c
   13324:	mov	r5, #1
   13328:	ldr	r0, [r4, #8]
   1332c:	cmp	r0, #0
   13330:	bne	1334c <__assert_fail@plt+0x1d44>
   13334:	mov	r0, r4
   13338:	mov	r1, r5
   1333c:	bl	1456c <__assert_fail@plt+0x2f64>
   13340:	movw	r0, #8504	; 0x2138
   13344:	movt	r0, #3
   13348:	ldr	r7, [r0, #32]
   1334c:	add	r0, r5, #1
   13350:	cmp	r5, r7
   13354:	add	r4, r4, #40	; 0x28
   13358:	mov	r5, r0
   1335c:	blt	13328 <__assert_fail@plt+0x1d20>
   13360:	ldr	r1, [r8, #76]	; 0x4c
   13364:	ldrb	r2, [r8, #1]
   13368:	cmp	r7, #1
   1336c:	mov	r6, #2
   13370:	blt	133c8 <__assert_fail@plt+0x1dc0>
   13374:	movw	r4, #8792	; 0x2258
   13378:	cmp	r2, #0
   1337c:	movt	r4, #3
   13380:	bne	133a8 <__assert_fail@plt+0x1da0>
   13384:	mov	r0, #8
   13388:	mov	r2, r7
   1338c:	ldr	r3, [r1, r0]
   13390:	cmp	r3, #3
   13394:	strne	r6, [r1, r0]
   13398:	add	r0, r0, #40	; 0x28
   1339c:	subs	r2, r2, #1
   133a0:	bne	1338c <__assert_fail@plt+0x1d84>
   133a4:	mov	r2, #0
   133a8:	cmp	r7, #0
   133ac:	bne	133d8 <__assert_fail@plt+0x1dd0>
   133b0:	b	1340c <__assert_fail@plt+0x1e04>
   133b4:	ldr	r1, [r8, #76]	; 0x4c
   133b8:	ldrb	r2, [r8, #1]
   133bc:	cmp	r7, #0
   133c0:	bne	133d8 <__assert_fail@plt+0x1dd0>
   133c4:	b	1340c <__assert_fail@plt+0x1e04>
   133c8:	movw	r4, #8792	; 0x2258
   133cc:	movt	r4, #3
   133d0:	cmp	r7, #0
   133d4:	beq	1340c <__assert_fail@plt+0x1e04>
   133d8:	add	r3, r1, #8
   133dc:	mov	r0, r7
   133e0:	ldr	r6, [r3]
   133e4:	cmp	r6, #2
   133e8:	bne	13400 <__assert_fail@plt+0x1df8>
   133ec:	mov	r6, #0
   133f0:	str	r6, [r3]
   133f4:	ldr	r6, [r8, #80]	; 0x50
   133f8:	add	r6, r6, #1
   133fc:	str	r6, [r8, #80]	; 0x50
   13400:	add	r3, r3, #40	; 0x28
   13404:	subs	r0, r0, #1
   13408:	bne	133e0 <__assert_fail@plt+0x1dd8>
   1340c:	cmp	r2, #0
   13410:	beq	1342c <__assert_fail@plt+0x1e24>
   13414:	mov	r0, #0
   13418:	strb	r0, [r8, #21]
   1341c:	ldr	r0, [r8, #80]	; 0x50
   13420:	cmp	r0, #1
   13424:	bge	13448 <__assert_fail@plt+0x1e40>
   13428:	b	13474 <__assert_fail@plt+0x1e6c>
   1342c:	ldr	r0, [r1, #8]
   13430:	cmp	r0, #3
   13434:	beq	13468 <__assert_fail@plt+0x1e60>
   13438:	mov	r0, #0
   1343c:	strb	r0, [r8, #21]
   13440:	mov	r0, #1
   13444:	str	r0, [r8, #80]	; 0x50
   13448:	ldr	r0, [sp, #36]	; 0x24
   1344c:	adds	r9, r9, #1
   13450:	adc	sl, sl, #0
   13454:	subs	r0, r9, r0
   13458:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1345c:	sbcs	r0, sl, r0
   13460:	bcc	132a0 <__assert_fail@plt+0x1c98>
   13464:	b	134b4 <__assert_fail@plt+0x1eac>
   13468:	mov	r0, #0
   1346c:	strb	r0, [r8, #21]
   13470:	str	r0, [r8, #80]	; 0x50
   13474:	movw	r1, #1983	; 0x7bf
   13478:	mov	r0, #0
   1347c:	mov	r2, #5
   13480:	movt	r1, #2
   13484:	bl	1138c <dcgettext@plt>
   13488:	mov	r2, r0
   1348c:	ldr	r0, [sp, #36]	; 0x24
   13490:	mov	r1, #0
   13494:	str	r0, [sp]
   13498:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1349c:	stmib	sp, {r0, r9, sl}
   134a0:	mov	r0, #0
   134a4:	bl	11428 <error@plt>
   134a8:	ldr	r0, [r8, #80]	; 0x50
   134ac:	cmp	r0, #1
   134b0:	blt	14110 <__assert_fail@plt+0x2b08>
   134b4:	ldrd	r0, [r4, #16]
   134b8:	mov	r9, #0
   134bc:	ldrb	r6, [r8, #17]
   134c0:	strd	r0, [r4, #24]
   134c4:	ldr	r1, [r8, #36]	; 0x24
   134c8:	cmp	r6, #1
   134cc:	bne	13500 <__assert_fail@plt+0x1ef8>
   134d0:	ldrb	r2, [r8, #9]
   134d4:	cmp	r2, #1
   134d8:	ldrbeq	r2, [r8, #10]
   134dc:	cmpeq	r2, #1
   134e0:	beq	134f0 <__assert_fail@plt+0x1ee8>
   134e4:	ldr	r2, [r8, #60]	; 0x3c
   134e8:	add	r9, r2, r1
   134ec:	b	13500 <__assert_fail@plt+0x1ef8>
   134f0:	ldr	r3, [r8, #60]	; 0x3c
   134f4:	ldr	r2, [r8, #56]	; 0x38
   134f8:	add	r3, r3, r1
   134fc:	add	r9, r3, r2
   13500:	ldr	r0, [r8, #40]	; 0x28
   13504:	movw	r2, #8504	; 0x2138
   13508:	ldr	r4, [r8, #76]	; 0x4c
   1350c:	mov	r3, #1
   13510:	movt	r2, #3
   13514:	ldr	r7, [r2, #32]
   13518:	add	ip, r0, r1
   1351c:	ldrb	r1, [r8, #1]
   13520:	cmp	r7, #2
   13524:	blt	13640 <__assert_fail@plt+0x2038>
   13528:	movw	r3, #19712	; 0x4d00
   1352c:	movw	sl, #18740	; 0x4934
   13530:	cmp	r1, #0
   13534:	movw	r5, #19252	; 0x4b34
   13538:	ldr	lr, [r8, #60]	; 0x3c
   1353c:	movt	r3, #1
   13540:	movt	sl, #1
   13544:	movt	r5, #1
   13548:	movne	sl, r3
   1354c:	movw	r3, #18668	; 0x48ec
   13550:	movt	r3, #1
   13554:	movne	r3, r5
   13558:	ldrb	r5, [r8, #10]
   1355c:	cmp	r5, #1
   13560:	bne	14118 <__assert_fail@plt+0x2b10>
   13564:	ldrb	r5, [r8, #9]
   13568:	cmp	r6, #0
   1356c:	eor	r2, r5, #1
   13570:	beq	141ac <__assert_fail@plt+0x2ba4>
   13574:	str	r2, [fp, #-32]	; 0xffffffe0
   13578:	str	r9, [sp, #32]
   1357c:	mov	r6, r9
   13580:	add	r9, r9, r0
   13584:	str	r0, [sp, #28]
   13588:	add	r0, r0, lr
   1358c:	sub	r5, r7, #2
   13590:	mov	lr, #1
   13594:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13598:	str	r0, [sp, #36]	; 0x24
   1359c:	mul	r0, r0, r5
   135a0:	add	r5, r4, #32
   135a4:	str	r0, [sp, #24]
   135a8:	sub	r0, r7, #1
   135ac:	str	r0, [sp, #20]
   135b0:	sub	r0, lr, #1
   135b4:	str	sl, [r5, #-20]	; 0xffffffec
   135b8:	str	r3, [r5, #-16]
   135bc:	str	ip, [r5]
   135c0:	mov	r6, r9
   135c4:	add	lr, lr, #1
   135c8:	clz	r0, r0
   135cc:	cmp	r7, lr
   135d0:	mov	ip, r6
   135d4:	lsr	r0, r0, #5
   135d8:	orr	r0, r0, r2
   135dc:	and	r0, r0, #1
   135e0:	strb	r0, [r5, #4]
   135e4:	ldr	r0, [sp, #36]	; 0x24
   135e8:	add	r5, r5, #40	; 0x28
   135ec:	add	r9, r9, r0
   135f0:	bne	135b0 <__assert_fail@plt+0x1fa8>
   135f4:	ldr	r0, [sp, #20]
   135f8:	ldr	r3, [sp, #28]
   135fc:	add	r0, r0, r0, lsl #2
   13600:	add	r2, r4, r0, lsl #3
   13604:	ldr	r0, [sp, #32]
   13608:	add	r0, r0, r3
   1360c:	ldr	r3, [sp, #24]
   13610:	add	r5, r0, r3
   13614:	mov	r3, r7
   13618:	cmp	r1, #0
   1361c:	bne	13650 <__assert_fail@plt+0x2048>
   13620:	ldrb	r0, [r8, #2]
   13624:	cmp	r0, #0
   13628:	beq	13650 <__assert_fail@plt+0x2048>
   1362c:	movw	r0, #18740	; 0x4934
   13630:	movw	r6, #18668	; 0x48ec
   13634:	movt	r0, #1
   13638:	movt	r6, #1
   1363c:	b	13660 <__assert_fail@plt+0x2058>
   13640:	mov	r5, ip
   13644:	mov	r2, r4
   13648:	cmp	r1, #0
   1364c:	beq	13620 <__assert_fail@plt+0x2018>
   13650:	movw	r0, #19712	; 0x4d00
   13654:	movw	r6, #19252	; 0x4b34
   13658:	movt	r0, #1
   1365c:	movt	r6, #1
   13660:	str	r0, [r2, #12]
   13664:	str	r6, [r2, #16]
   13668:	mov	r6, #0
   1366c:	ldrb	r0, [r8, #10]
   13670:	cmp	r0, #1
   13674:	mov	r0, #0
   13678:	bne	13698 <__assert_fail@plt+0x2090>
   1367c:	sub	r0, r3, #1
   13680:	ldrb	r3, [r8, #9]
   13684:	clz	r0, r0
   13688:	lsr	r0, r0, #5
   1368c:	mvn	r3, r3
   13690:	orr	r0, r0, r3
   13694:	and	r0, r0, #1
   13698:	str	r5, [r2, #32]
   1369c:	strb	r0, [r2, #36]	; 0x24
   136a0:	movw	r0, #8504	; 0x2138
   136a4:	movw	r5, #8792	; 0x2258
   136a8:	movt	r0, #3
   136ac:	movt	r5, #3
   136b0:	ldr	r0, [r0, #36]	; 0x24
   136b4:	str	r0, [r8, #48]	; 0x30
   136b8:	b	136cc <__assert_fail@plt+0x20c4>
   136bc:	ldr	r0, [r4, #8]
   136c0:	subs	r0, r0, #3
   136c4:	movwne	r0, #1
   136c8:	str	r0, [r8, #80]	; 0x50
   136cc:	tst	r1, #1
   136d0:	beq	13740 <__assert_fail@plt+0x2138>
   136d4:	cmp	r7, #0
   136d8:	beq	14110 <__assert_fail@plt+0x2b08>
   136dc:	ldr	r1, [r8, #52]	; 0x34
   136e0:	add	r0, r4, #28
   136e4:	mov	r2, r7
   136e8:	ldr	r3, [r0, #-20]	; 0xffffffec
   136ec:	cmp	r3, #0
   136f0:	mov	r3, #0
   136f4:	moveq	r3, r1
   136f8:	subs	r2, r2, #1
   136fc:	str	r3, [r0]
   13700:	add	r0, r0, #40	; 0x28
   13704:	bne	136e8 <__assert_fail@plt+0x20e0>
   13708:	cmp	r7, #0
   1370c:	beq	14110 <__assert_fail@plt+0x2b08>
   13710:	ldrb	r1, [r8, #1]
   13714:	cmp	r1, #0
   13718:	beq	13898 <__assert_fail@plt+0x2290>
   1371c:	add	r0, r4, #8
   13720:	mov	r2, #0
   13724:	mov	r3, r7
   13728:	ldr	r6, [r0], #40	; 0x28
   1372c:	cmp	r6, #2
   13730:	addcc	r2, r2, #1
   13734:	subs	r3, r3, #1
   13738:	bne	13728 <__assert_fail@plt+0x2120>
   1373c:	b	138e4 <__assert_fail@plt+0x22dc>
   13740:	str	r6, [r8, #112]	; 0x70
   13744:	ldrb	r2, [r8, #2]
   13748:	eor	r0, r2, #1
   1374c:	sub	r3, r7, r0
   13750:	cmp	r3, #1
   13754:	blt	13f1c <__assert_fail@plt+0x2914>
   13758:	add	r0, r4, #24
   1375c:	mov	r1, r3
   13760:	str	r6, [r0], #40	; 0x28
   13764:	subs	r1, r1, #1
   13768:	bne	13760 <__assert_fail@plt+0x2158>
   1376c:	mov	r9, #0
   13770:	cmp	r3, #1
   13774:	blt	13f1c <__assert_fail@plt+0x2914>
   13778:	ldr	r1, [r8, #80]	; 0x50
   1377c:	cmp	r1, #0
   13780:	beq	13f1c <__assert_fail@plt+0x2914>
   13784:	mov	sl, #1
   13788:	mov	r0, #0
   1378c:	mov	r6, #0
   13790:	str	r3, [fp, #-32]	; 0xffffffe0
   13794:	b	13844 <__assert_fail@plt+0x223c>
   13798:	rsb	r7, r2, #1
   1379c:	ldr	r2, [r4, #8]
   137a0:	mov	r5, r0
   137a4:	cmp	r2, #0
   137a8:	bne	137e4 <__assert_fail@plt+0x21dc>
   137ac:	movw	r0, #8792	; 0x2258
   137b0:	movt	r0, #3
   137b4:	str	r9, [r0, #8]
   137b8:	mov	r0, r4
   137bc:	bl	14d00 <__assert_fail@plt+0x36f8>
   137c0:	cmp	r0, #0
   137c4:	moveq	r0, r4
   137c8:	bleq	15d50 <__assert_fail@plt+0x4748>
   137cc:	ldr	r2, [r4, #8]
   137d0:	ldr	r0, [r8, #112]	; 0x70
   137d4:	cmp	r2, #0
   137d8:	beq	13808 <__assert_fail@plt+0x2200>
   137dc:	cmp	r5, r0
   137e0:	bne	13808 <__assert_fail@plt+0x2200>
   137e4:	mov	r0, r5
   137e8:	ldr	r1, [r8, #80]	; 0x50
   137ec:	cmp	r7, #0
   137f0:	beq	13858 <__assert_fail@plt+0x2250>
   137f4:	add	r7, r7, #1
   137f8:	cmp	r1, #0
   137fc:	mov	r5, r0
   13800:	bne	137a4 <__assert_fail@plt+0x219c>
   13804:	b	13858 <__assert_fail@plt+0x2250>
   13808:	ldr	r1, [r4, #24]
   1380c:	movw	r3, #8792	; 0x2258
   13810:	movt	r3, #3
   13814:	add	r1, r1, #1
   13818:	str	r1, [r4, #24]
   1381c:	ldr	r1, [r8, #96]	; 0x60
   13820:	str	r5, [r1, r6, lsl #2]
   13824:	ldr	r1, [r8, #100]	; 0x64
   13828:	ldr	r3, [r3, #8]
   1382c:	str	r3, [r1, r6, lsl #2]
   13830:	add	r6, r6, #1
   13834:	ldr	r1, [r8, #80]	; 0x50
   13838:	cmp	r7, #0
   1383c:	bne	137f4 <__assert_fail@plt+0x21ec>
   13840:	b	13858 <__assert_fail@plt+0x2250>
   13844:	str	r6, [r4, #20]
   13848:	cmp	r1, #0
   1384c:	ldrne	r2, [r8, #52]	; 0x34
   13850:	cmpne	r2, #0
   13854:	bne	13798 <__assert_fail@plt+0x2190>
   13858:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1385c:	movw	r5, #8792	; 0x2258
   13860:	movt	r5, #3
   13864:	cmp	sl, r2
   13868:	bge	1387c <__assert_fail@plt+0x2274>
   1386c:	add	r4, r4, #40	; 0x28
   13870:	add	sl, sl, #1
   13874:	cmp	r1, #0
   13878:	bne	13844 <__assert_fail@plt+0x223c>
   1387c:	ldrb	r2, [r8, #2]
   13880:	ldr	r1, [r8, #96]	; 0x60
   13884:	str	r0, [r1, r6, lsl #2]
   13888:	mov	r1, #0
   1388c:	cmp	r2, #0
   13890:	bne	13f34 <__assert_fail@plt+0x292c>
   13894:	b	13f94 <__assert_fail@plt+0x298c>
   13898:	add	r3, r4, #28
   1389c:	mov	r2, #0
   138a0:	mov	r0, r7
   138a4:	ldr	r6, [r3, #-20]	; 0xffffffec
   138a8:	cmp	r6, #2
   138ac:	bcc	138d4 <__assert_fail@plt+0x22cc>
   138b0:	ldr	r6, [r3, #-4]
   138b4:	cmp	r6, #1
   138b8:	ldrge	r6, [r3]
   138bc:	cmpge	r6, #1
   138c0:	bge	138d4 <__assert_fail@plt+0x22cc>
   138c4:	add	r3, r3, #40	; 0x28
   138c8:	subs	r0, r0, #1
   138cc:	bne	138a4 <__assert_fail@plt+0x229c>
   138d0:	b	138e4 <__assert_fail@plt+0x22dc>
   138d4:	add	r2, r2, #1
   138d8:	add	r3, r3, #40	; 0x28
   138dc:	subs	r0, r0, #1
   138e0:	bne	138a4 <__assert_fail@plt+0x229c>
   138e4:	cmp	r2, #0
   138e8:	mov	r6, #0
   138ec:	beq	14110 <__assert_fail@plt+0x2b08>
   138f0:	ldrb	r0, [r8, #14]
   138f4:	mov	sl, #0
   138f8:	cmp	r0, #0
   138fc:	moveq	r0, #1
   13900:	strbeq	r0, [r8, #23]
   13904:	strb	sl, [r8, #22]
   13908:	ldrb	r0, [r8, #4]
   1390c:	ldr	r2, [r8, #52]	; 0x34
   13910:	lsl	r9, r2, r0
   13914:	cmp	r9, #1
   13918:	blt	13e34 <__assert_fail@plt+0x282c>
   1391c:	mov	sl, #0
   13920:	tst	r1, #1
   13924:	bne	139b8 <__assert_fail@plt+0x23b0>
   13928:	b	13958 <__assert_fail@plt+0x2350>
   1392c:	mov	r7, #0
   13930:	ldr	r9, [fp, #-32]	; 0xffffffe0
   13934:	cmp	r1, #0
   13938:	bne	13d04 <__assert_fail@plt+0x26fc>
   1393c:	b	13d40 <__assert_fail@plt+0x2738>
   13940:	mov	r1, #10
   13944:	bl	1156c <__overflow@plt>
   13948:	b	13e10 <__assert_fail@plt+0x2808>
   1394c:	mov	r1, #10
   13950:	bl	1156c <__overflow@plt>
   13954:	b	13d30 <__assert_fail@plt+0x2728>
   13958:	add	r2, r4, #28
   1395c:	mov	r1, #0
   13960:	mov	r0, r7
   13964:	ldr	r3, [r2, #-20]	; 0xffffffec
   13968:	cmp	r3, #2
   1396c:	bcc	13994 <__assert_fail@plt+0x238c>
   13970:	ldr	r3, [r2, #-4]
   13974:	cmp	r3, #1
   13978:	ldrge	r3, [r2]
   1397c:	cmpge	r3, #1
   13980:	bge	13994 <__assert_fail@plt+0x238c>
   13984:	add	r2, r2, #40	; 0x28
   13988:	subs	r0, r0, #1
   1398c:	bne	13964 <__assert_fail@plt+0x235c>
   13990:	b	139d8 <__assert_fail@plt+0x23d0>
   13994:	add	r1, r1, #1
   13998:	add	r2, r2, #40	; 0x28
   1399c:	subs	r0, r0, #1
   139a0:	bne	13964 <__assert_fail@plt+0x235c>
   139a4:	b	139d8 <__assert_fail@plt+0x23d0>
   139a8:	ldrb	r1, [r8, #1]
   139ac:	ldr	r4, [r8, #76]	; 0x4c
   139b0:	tst	r1, #1
   139b4:	beq	13958 <__assert_fail@plt+0x2350>
   139b8:	add	r0, r4, #8
   139bc:	mov	r1, #0
   139c0:	mov	r2, r7
   139c4:	ldr	r3, [r0], #40	; 0x28
   139c8:	cmp	r3, #2
   139cc:	addcc	r1, r1, #1
   139d0:	subs	r2, r2, #1
   139d4:	bne	139c4 <__assert_fail@plt+0x23bc>
   139d8:	cmp	r1, #0
   139dc:	beq	13e34 <__assert_fail@plt+0x282c>
   139e0:	cmp	r7, #1
   139e4:	mov	r0, #256	; 0x100
   139e8:	str	r6, [r8, #120]	; 0x78
   139ec:	str	r6, [r5]
   139f0:	strb	r6, [r8, #22]
   139f4:	str	r6, [r5, #4]
   139f8:	strh	r0, [r8, #26]
   139fc:	blt	13d40 <__assert_fail@plt+0x2738>
   13a00:	str	r9, [fp, #-32]	; 0xffffffe0
   13a04:	mov	r9, #1
   13a08:	str	r6, [r5, #8]
   13a0c:	ldr	r0, [r4, #28]
   13a10:	cmp	r0, #0
   13a14:	bgt	13a24 <__assert_fail@plt+0x241c>
   13a18:	ldr	r0, [r4, #8]
   13a1c:	cmp	r0, #1
   13a20:	bne	13bd0 <__assert_fail@plt+0x25c8>
   13a24:	strb	r6, [r8, #24]
   13a28:	ldr	r0, [r4, #32]
   13a2c:	str	r0, [r8, #116]	; 0x74
   13a30:	mov	r0, r4
   13a34:	ldr	r1, [r4, #12]
   13a38:	blx	r1
   13a3c:	cmp	r0, #0
   13a40:	moveq	r0, r4
   13a44:	bleq	15d50 <__assert_fail@plt+0x4748>
   13a48:	ldr	r0, [r4, #28]
   13a4c:	ldrb	r1, [r8, #22]
   13a50:	sub	r2, r0, #1
   13a54:	str	r2, [r4, #28]
   13a58:	and	r2, sl, #1
   13a5c:	orrs	sl, r1, r2
   13a60:	movwne	sl, #1
   13a64:	cmp	r0, #1
   13a68:	bgt	13b0c <__assert_fail@plt+0x2504>
   13a6c:	movw	r0, #8504	; 0x2138
   13a70:	movt	r0, #3
   13a74:	ldr	r7, [r0, #32]
   13a78:	cmp	r7, #0
   13a7c:	beq	1392c <__assert_fail@plt+0x2324>
   13a80:	ldrb	r2, [r8, #1]
   13a84:	ldr	r0, [r8, #76]	; 0x4c
   13a88:	cmp	r2, #0
   13a8c:	beq	13ab4 <__assert_fail@plt+0x24ac>
   13a90:	add	r0, r0, #8
   13a94:	mov	r2, #0
   13a98:	mov	r3, r7
   13a9c:	ldr	r6, [r0], #40	; 0x28
   13aa0:	cmp	r6, #2
   13aa4:	addcc	r2, r2, #1
   13aa8:	subs	r3, r3, #1
   13aac:	bne	13a9c <__assert_fail@plt+0x2494>
   13ab0:	b	13b00 <__assert_fail@plt+0x24f8>
   13ab4:	add	r3, r0, #28
   13ab8:	mov	r2, #0
   13abc:	mov	r0, r7
   13ac0:	ldr	r6, [r3, #-20]	; 0xffffffec
   13ac4:	cmp	r6, #2
   13ac8:	bcc	13af0 <__assert_fail@plt+0x24e8>
   13acc:	ldr	r6, [r3, #-4]
   13ad0:	cmp	r6, #1
   13ad4:	ldrge	r6, [r3]
   13ad8:	cmpge	r6, #1
   13adc:	bge	13af0 <__assert_fail@plt+0x24e8>
   13ae0:	add	r3, r3, #40	; 0x28
   13ae4:	subs	r0, r0, #1
   13ae8:	bne	13ac0 <__assert_fail@plt+0x24b8>
   13aec:	b	13b00 <__assert_fail@plt+0x24f8>
   13af0:	add	r2, r2, #1
   13af4:	add	r3, r3, #40	; 0x28
   13af8:	subs	r0, r0, #1
   13afc:	bne	13ac0 <__assert_fail@plt+0x24b8>
   13b00:	cmp	r2, #0
   13b04:	mov	r6, #0
   13b08:	beq	13cf8 <__assert_fail@plt+0x26f0>
   13b0c:	ldrb	r0, [r8, #9]
   13b10:	cmp	r0, #1
   13b14:	bne	13cc0 <__assert_fail@plt+0x26b8>
   13b18:	ldr	r0, [r4, #8]
   13b1c:	cmp	r0, #0
   13b20:	beq	13cc0 <__assert_fail@plt+0x26b8>
   13b24:	ldrb	r1, [r8, #27]
   13b28:	cmp	r1, #1
   13b2c:	beq	13be8 <__assert_fail@plt+0x25e0>
   13b30:	cmp	r0, #3
   13b34:	beq	13b48 <__assert_fail@plt+0x2540>
   13b38:	cmp	r0, #2
   13b3c:	ldrbeq	r0, [r8, #24]
   13b40:	cmpeq	r0, #1
   13b44:	bne	13cc0 <__assert_fail@plt+0x26b8>
   13b48:	ldr	r0, [r4, #32]
   13b4c:	str	r0, [r8, #116]	; 0x74
   13b50:	ldr	r1, [r8, #40]	; 0x28
   13b54:	cmp	r0, r1
   13b58:	ble	13ca4 <__assert_fail@plt+0x269c>
   13b5c:	mov	r2, r5
   13b60:	ldrb	r3, [r8, #7]
   13b64:	sub	r5, r0, r1
   13b68:	ldr	r2, [r2]
   13b6c:	cmp	r3, #0
   13b70:	bne	13c20 <__assert_fail@plt+0x2618>
   13b74:	cmp	r5, r2
   13b78:	ble	13c8c <__assert_fail@plt+0x2684>
   13b7c:	sub	r0, r0, r2
   13b80:	sub	r6, r0, r1
   13b84:	movw	r0, #8652	; 0x21cc
   13b88:	movt	r0, #3
   13b8c:	ldr	r0, [r0]
   13b90:	ldr	r1, [r0, #20]
   13b94:	ldr	r2, [r0, #24]
   13b98:	cmp	r1, r2
   13b9c:	bcs	13bbc <__assert_fail@plt+0x25b4>
   13ba0:	add	r2, r1, #1
   13ba4:	str	r2, [r0, #20]
   13ba8:	mov	r0, #32
   13bac:	strb	r0, [r1]
   13bb0:	subs	r6, r6, #1
   13bb4:	bne	13b84 <__assert_fail@plt+0x257c>
   13bb8:	b	13c8c <__assert_fail@plt+0x2684>
   13bbc:	mov	r1, #32
   13bc0:	bl	1156c <__overflow@plt>
   13bc4:	subs	r6, r6, #1
   13bc8:	bne	13b84 <__assert_fail@plt+0x257c>
   13bcc:	b	13c8c <__assert_fail@plt+0x2684>
   13bd0:	ldrb	r0, [r8, #9]
   13bd4:	cmp	r0, #1
   13bd8:	bne	13cc0 <__assert_fail@plt+0x26b8>
   13bdc:	ldrb	r0, [r8, #27]
   13be0:	cmp	r0, #1
   13be4:	bne	13bf4 <__assert_fail@plt+0x25ec>
   13be8:	mov	r0, #1
   13bec:	strb	r0, [r8, #26]
   13bf0:	b	13cc0 <__assert_fail@plt+0x26b8>
   13bf4:	ldr	r0, [r4, #32]
   13bf8:	str	r0, [r8, #116]	; 0x74
   13bfc:	ldr	r1, [r8, #40]	; 0x28
   13c00:	cmp	r0, r1
   13c04:	ble	13ca4 <__assert_fail@plt+0x269c>
   13c08:	mov	r2, r5
   13c0c:	ldrb	r3, [r8, #7]
   13c10:	sub	r5, r0, r1
   13c14:	ldr	r2, [r2]
   13c18:	cmp	r3, #0
   13c1c:	beq	13c34 <__assert_fail@plt+0x262c>
   13c20:	sub	r0, r5, r2
   13c24:	movw	r5, #8792	; 0x2258
   13c28:	str	r0, [r8, #120]	; 0x78
   13c2c:	movt	r5, #3
   13c30:	b	13ca0 <__assert_fail@plt+0x2698>
   13c34:	cmp	r5, r2
   13c38:	ble	13c8c <__assert_fail@plt+0x2684>
   13c3c:	sub	r0, r0, r2
   13c40:	sub	r6, r0, r1
   13c44:	movw	r0, #8652	; 0x21cc
   13c48:	movt	r0, #3
   13c4c:	ldr	r0, [r0]
   13c50:	ldr	r1, [r0, #20]
   13c54:	ldr	r2, [r0, #24]
   13c58:	cmp	r1, r2
   13c5c:	bcs	13c7c <__assert_fail@plt+0x2674>
   13c60:	add	r2, r1, #1
   13c64:	str	r2, [r0, #20]
   13c68:	mov	r0, #32
   13c6c:	strb	r0, [r1]
   13c70:	subs	r6, r6, #1
   13c74:	bne	13c44 <__assert_fail@plt+0x263c>
   13c78:	b	13c8c <__assert_fail@plt+0x2684>
   13c7c:	mov	r1, #32
   13c80:	bl	1156c <__overflow@plt>
   13c84:	subs	r6, r6, #1
   13c88:	bne	13c44 <__assert_fail@plt+0x263c>
   13c8c:	movw	r0, #8792	; 0x2258
   13c90:	mov	r6, #0
   13c94:	movt	r0, #3
   13c98:	str	r5, [r0]
   13c9c:	mov	r5, r0
   13ca0:	str	r6, [r8, #116]	; 0x74
   13ca4:	ldrb	r0, [r8, #13]
   13ca8:	cmp	r0, #1
   13cac:	bleq	1560c <__assert_fail@plt+0x4004>
   13cb0:	ldrb	r0, [r4, #36]	; 0x24
   13cb4:	cmp	r0, #0
   13cb8:	movne	r0, r4
   13cbc:	blne	15c00 <__assert_fail@plt+0x45f8>
   13cc0:	ldrb	r0, [r8, #13]
   13cc4:	movw	r1, #8504	; 0x2138
   13cc8:	add	r4, r4, #40	; 0x28
   13ccc:	movt	r1, #3
   13cd0:	ldr	r7, [r1, #32]
   13cd4:	cmp	r0, #1
   13cd8:	ldreq	r0, [r5, #4]
   13cdc:	addeq	r0, r0, #1
   13ce0:	streq	r0, [r5, #4]
   13ce4:	add	r0, r9, #1
   13ce8:	cmp	r9, r7
   13cec:	mov	r9, r0
   13cf0:	blt	13a08 <__assert_fail@plt+0x2400>
   13cf4:	ldrb	r1, [r8, #22]
   13cf8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   13cfc:	cmp	r1, #0
   13d00:	beq	13d40 <__assert_fail@plt+0x2738>
   13d04:	movw	r0, #8652	; 0x21cc
   13d08:	movt	r0, #3
   13d0c:	ldr	r0, [r0]
   13d10:	ldr	r1, [r0, #20]
   13d14:	ldr	r2, [r0, #24]
   13d18:	cmp	r1, r2
   13d1c:	bcs	1394c <__assert_fail@plt+0x2344>
   13d20:	add	r2, r1, #1
   13d24:	str	r2, [r0, #20]
   13d28:	mov	r0, #10
   13d2c:	strb	r0, [r1]
   13d30:	movw	r0, #8504	; 0x2138
   13d34:	sub	r9, r9, #1
   13d38:	movt	r0, #3
   13d3c:	ldr	r7, [r0, #32]
   13d40:	cmp	r7, #0
   13d44:	beq	13dc8 <__assert_fail@plt+0x27c0>
   13d48:	ldrb	r1, [r8, #1]
   13d4c:	ldr	r0, [r8, #76]	; 0x4c
   13d50:	cmp	r1, #0
   13d54:	beq	13d78 <__assert_fail@plt+0x2770>
   13d58:	add	r0, r0, #8
   13d5c:	mov	r1, #0
   13d60:	ldr	r2, [r0], #40	; 0x28
   13d64:	cmp	r2, #2
   13d68:	addcc	r1, r1, #1
   13d6c:	subs	r7, r7, #1
   13d70:	bne	13d60 <__assert_fail@plt+0x2758>
   13d74:	b	13dc0 <__assert_fail@plt+0x27b8>
   13d78:	add	r2, r0, #28
   13d7c:	mov	r1, #0
   13d80:	ldr	r0, [r2, #-20]	; 0xffffffec
   13d84:	cmp	r0, #2
   13d88:	bcc	13db0 <__assert_fail@plt+0x27a8>
   13d8c:	ldr	r0, [r2, #-4]
   13d90:	cmp	r0, #1
   13d94:	ldrge	r0, [r2]
   13d98:	cmpge	r0, #1
   13d9c:	bge	13db0 <__assert_fail@plt+0x27a8>
   13da0:	add	r2, r2, #40	; 0x28
   13da4:	subs	r7, r7, #1
   13da8:	bne	13d80 <__assert_fail@plt+0x2778>
   13dac:	b	13dc0 <__assert_fail@plt+0x27b8>
   13db0:	add	r1, r1, #1
   13db4:	add	r2, r2, #40	; 0x28
   13db8:	subs	r7, r7, #1
   13dbc:	bne	13d80 <__assert_fail@plt+0x2778>
   13dc0:	cmp	r1, #0
   13dc4:	bne	13dd4 <__assert_fail@plt+0x27cc>
   13dc8:	ldrb	r0, [r8, #14]
   13dcc:	cmp	r0, #0
   13dd0:	bne	13e34 <__assert_fail@plt+0x282c>
   13dd4:	ldrb	r0, [r8, #4]
   13dd8:	and	r0, sl, r0
   13ddc:	tst	r0, #1
   13de0:	beq	13e14 <__assert_fail@plt+0x280c>
   13de4:	movw	r0, #8652	; 0x21cc
   13de8:	movt	r0, #3
   13dec:	ldr	r0, [r0]
   13df0:	ldr	r1, [r0, #20]
   13df4:	ldr	r2, [r0, #24]
   13df8:	cmp	r1, r2
   13dfc:	bcs	13940 <__assert_fail@plt+0x2338>
   13e00:	add	r2, r1, #1
   13e04:	str	r2, [r0, #20]
   13e08:	mov	r0, #10
   13e0c:	strb	r0, [r1]
   13e10:	sub	r9, r9, #1
   13e14:	cmp	r9, #1
   13e18:	blt	13e34 <__assert_fail@plt+0x282c>
   13e1c:	movw	r0, #8504	; 0x2138
   13e20:	movt	r0, #3
   13e24:	ldr	r7, [r0, #32]
   13e28:	cmp	r7, #0
   13e2c:	bne	139a8 <__assert_fail@plt+0x23a0>
   13e30:	b	13e74 <__assert_fail@plt+0x286c>
   13e34:	cmp	r9, #0
   13e38:	bne	13e74 <__assert_fail@plt+0x286c>
   13e3c:	movw	r0, #8504	; 0x2138
   13e40:	movt	r0, #3
   13e44:	ldr	r0, [r0, #32]
   13e48:	cmp	r0, #1
   13e4c:	blt	13e74 <__assert_fail@plt+0x286c>
   13e50:	ldr	r1, [r8, #76]	; 0x4c
   13e54:	add	r1, r1, #37	; 0x25
   13e58:	ldr	r2, [r1, #-29]	; 0xffffffe3
   13e5c:	cmp	r2, #0
   13e60:	moveq	r2, #1
   13e64:	strbeq	r2, [r1]
   13e68:	subs	r0, r0, #1
   13e6c:	add	r1, r1, #40	; 0x28
   13e70:	bne	13e58 <__assert_fail@plt+0x2850>
   13e74:	ands	r0, sl, #1
   13e78:	strb	r0, [r8, #22]
   13e7c:	beq	13e8c <__assert_fail@plt+0x2884>
   13e80:	ldrb	r0, [r8, #14]
   13e84:	cmp	r0, #0
   13e88:	beq	14014 <__assert_fail@plt+0x2a0c>
   13e8c:	ldrb	r0, [r8, #15]
   13e90:	cmp	r0, #1
   13e94:	ldrbeq	r0, [r8, #25]
   13e98:	cmpeq	r0, #1
   13e9c:	beq	14050 <__assert_fail@plt+0x2a48>
   13ea0:	ldrd	r0, [r5, #24]
   13ea4:	movw	r2, #8504	; 0x2138
   13ea8:	movt	r2, #3
   13eac:	ldrd	r2, [r2, #40]	; 0x28
   13eb0:	adds	r0, r0, #1
   13eb4:	adc	r1, r1, #0
   13eb8:	strd	r0, [r5, #24]
   13ebc:	subs	r0, r2, r0
   13ec0:	sbcs	r0, r3, r1
   13ec4:	bcc	14110 <__assert_fail@plt+0x2b08>
   13ec8:	movw	r0, #8504	; 0x2138
   13ecc:	ldr	r4, [r8, #76]	; 0x4c
   13ed0:	movt	r0, #3
   13ed4:	ldr	r7, [r0, #32]
   13ed8:	cmp	r7, #0
   13edc:	beq	13f0c <__assert_fail@plt+0x2904>
   13ee0:	add	r0, r4, #8
   13ee4:	mov	r1, r7
   13ee8:	ldr	r2, [r0]
   13eec:	cmp	r2, #2
   13ef0:	streq	r6, [r0]
   13ef4:	add	r0, r0, #40	; 0x28
   13ef8:	ldreq	r2, [r8, #80]	; 0x50
   13efc:	addeq	r2, r2, #1
   13f00:	streq	r2, [r8, #80]	; 0x50
   13f04:	subs	r1, r1, #1
   13f08:	bne	13ee8 <__assert_fail@plt+0x28e0>
   13f0c:	ldrb	r1, [r8, #1]
   13f10:	cmp	r1, #0
   13f14:	bne	136cc <__assert_fail@plt+0x20c4>
   13f18:	b	136bc <__assert_fail@plt+0x20b4>
   13f1c:	ldr	r0, [r8, #96]	; 0x60
   13f20:	mov	r6, #0
   13f24:	cmp	r2, #0
   13f28:	mov	r1, #0
   13f2c:	str	r6, [r0]
   13f30:	beq	13f94 <__assert_fail@plt+0x298c>
   13f34:	movw	r0, #8504	; 0x2138
   13f38:	mov	r1, #1
   13f3c:	movt	r0, #3
   13f40:	ldr	r0, [r0, #32]
   13f44:	cmp	r0, #1
   13f48:	blt	13f94 <__assert_fail@plt+0x298c>
   13f4c:	ldr	r7, [r8, #76]	; 0x4c
   13f50:	sdiv	r4, r6, r0
   13f54:	mov	r5, #0
   13f58:	mls	r3, r4, r0, r6
   13f5c:	mov	r6, #0
   13f60:	add	r7, r7, #20
   13f64:	add	r6, r6, #1
   13f68:	mov	r2, r4
   13f6c:	str	r5, [r7]
   13f70:	cmp	r6, r3
   13f74:	addle	r2, r2, #1
   13f78:	cmp	r0, r6
   13f7c:	str	r2, [r7, #4]
   13f80:	add	r5, r2, r5
   13f84:	add	r7, r7, #40	; 0x28
   13f88:	bne	13f64 <__assert_fail@plt+0x295c>
   13f8c:	movw	r5, #8792	; 0x2258
   13f90:	movt	r5, #3
   13f94:	movw	r0, #8504	; 0x2138
   13f98:	ldr	r4, [r8, #76]	; 0x4c
   13f9c:	movt	r0, #3
   13fa0:	ldr	r7, [r0, #32]
   13fa4:	mov	r0, r4
   13fa8:	subs	r2, r7, #1
   13fac:	beq	13fd4 <__assert_fail@plt+0x29cc>
   13fb0:	add	r0, r4, #28
   13fb4:	rsb	r3, r7, #1
   13fb8:	ldr	r6, [r0, #-4]
   13fbc:	adds	r3, r3, #1
   13fc0:	str	r6, [r0]
   13fc4:	add	r0, r0, #40	; 0x28
   13fc8:	bne	13fb8 <__assert_fail@plt+0x29b0>
   13fcc:	add	r0, r2, r2, lsl #2
   13fd0:	add	r0, r4, r0, lsl #3
   13fd4:	cmp	r1, #0
   13fd8:	beq	13ff4 <__assert_fail@plt+0x29ec>
   13fdc:	add	r1, r0, #24
   13fe0:	ldr	r1, [r1]
   13fe4:	str	r1, [r0, #28]
   13fe8:	cmp	r7, #0
   13fec:	bne	13710 <__assert_fail@plt+0x2108>
   13ff0:	b	14110 <__assert_fail@plt+0x2b08>
   13ff4:	ldr	r2, [r0, #8]
   13ff8:	mov	r1, #0
   13ffc:	cmp	r2, #0
   14000:	beq	140e0 <__assert_fail@plt+0x2ad8>
   14004:	str	r1, [r0, #28]
   14008:	cmp	r7, #0
   1400c:	bne	13710 <__assert_fail@plt+0x2108>
   14010:	b	14110 <__assert_fail@plt+0x2b08>
   14014:	ldrb	r0, [r8, #6]
   14018:	cmp	r0, #0
   1401c:	beq	14084 <__assert_fail@plt+0x2a7c>
   14020:	movw	r0, #8652	; 0x21cc
   14024:	movt	r0, #3
   14028:	ldr	r0, [r0]
   1402c:	ldr	r1, [r0, #20]
   14030:	ldr	r2, [r0, #24]
   14034:	cmp	r1, r2
   14038:	bcs	14104 <__assert_fail@plt+0x2afc>
   1403c:	add	r2, r1, #1
   14040:	str	r2, [r0, #20]
   14044:	mov	r0, #12
   14048:	strb	r0, [r1]
   1404c:	b	13ea0 <__assert_fail@plt+0x2898>
   14050:	movw	r0, #8652	; 0x21cc
   14054:	movt	r0, #3
   14058:	ldr	r0, [r0]
   1405c:	ldr	r1, [r0, #20]
   14060:	ldr	r2, [r0, #24]
   14064:	cmp	r1, r2
   14068:	bcs	140f8 <__assert_fail@plt+0x2af0>
   1406c:	add	r2, r1, #1
   14070:	str	r2, [r0, #20]
   14074:	mov	r0, #12
   14078:	strb	r0, [r1]
   1407c:	strb	r6, [r8, #25]
   14080:	b	13ea0 <__assert_fail@plt+0x2898>
   14084:	adds	r0, r9, #5
   14088:	beq	13ea0 <__assert_fail@plt+0x2898>
   1408c:	mvn	r0, #4
   14090:	sub	r4, r0, r9
   14094:	movw	r0, #8652	; 0x21cc
   14098:	movt	r0, #3
   1409c:	ldr	r0, [r0]
   140a0:	ldr	r1, [r0, #20]
   140a4:	ldr	r2, [r0, #24]
   140a8:	cmp	r1, r2
   140ac:	bcs	140cc <__assert_fail@plt+0x2ac4>
   140b0:	add	r2, r1, #1
   140b4:	str	r2, [r0, #20]
   140b8:	mov	r0, #10
   140bc:	strb	r0, [r1]
   140c0:	adds	r4, r4, #1
   140c4:	bne	14094 <__assert_fail@plt+0x2a8c>
   140c8:	b	13ea0 <__assert_fail@plt+0x2898>
   140cc:	mov	r1, #10
   140d0:	bl	1156c <__overflow@plt>
   140d4:	adds	r4, r4, #1
   140d8:	bne	14094 <__assert_fail@plt+0x2a8c>
   140dc:	b	13ea0 <__assert_fail@plt+0x2898>
   140e0:	add	r1, r8, #52	; 0x34
   140e4:	ldr	r1, [r1]
   140e8:	str	r1, [r0, #28]
   140ec:	cmp	r7, #0
   140f0:	bne	13710 <__assert_fail@plt+0x2108>
   140f4:	b	14110 <__assert_fail@plt+0x2b08>
   140f8:	mov	r1, #12
   140fc:	bl	1156c <__overflow@plt>
   14100:	b	1407c <__assert_fail@plt+0x2a74>
   14104:	mov	r1, #12
   14108:	bl	1156c <__overflow@plt>
   1410c:	b	13ea0 <__assert_fail@plt+0x2898>
   14110:	sub	sp, fp, #28
   14114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14118:	cmp	r6, #0
   1411c:	beq	14214 <__assert_fail@plt+0x2c0c>
   14120:	add	r2, r0, lr
   14124:	add	r5, r9, r0
   14128:	str	r0, [sp, #28]
   1412c:	sub	r0, r7, #2
   14130:	str	r9, [sp, #32]
   14134:	sub	r6, r7, #1
   14138:	mov	lr, #1
   1413c:	mov	r9, #0
   14140:	mul	r0, r2, r0
   14144:	str	r6, [sp, #36]	; 0x24
   14148:	str	r0, [fp, #-32]	; 0xffffffe0
   1414c:	add	r0, r4, #32
   14150:	mov	r6, r5
   14154:	add	lr, lr, #1
   14158:	str	sl, [r0, #-20]	; 0xffffffec
   1415c:	str	r3, [r0, #-16]
   14160:	strb	r9, [r0, #4]
   14164:	str	ip, [r0]
   14168:	add	r5, r5, r2
   1416c:	add	r0, r0, #40	; 0x28
   14170:	cmp	r7, lr
   14174:	mov	ip, r6
   14178:	bne	14150 <__assert_fail@plt+0x2b48>
   1417c:	ldr	r0, [sp, #36]	; 0x24
   14180:	ldr	r3, [sp, #28]
   14184:	add	r0, r0, r0, lsl #2
   14188:	add	r2, r4, r0, lsl #3
   1418c:	ldr	r0, [sp, #32]
   14190:	add	r0, r0, r3
   14194:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14198:	add	r5, r0, r3
   1419c:	mov	r3, r7
   141a0:	cmp	r1, #0
   141a4:	beq	13620 <__assert_fail@plt+0x2018>
   141a8:	b	13650 <__assert_fail@plt+0x2048>
   141ac:	mov	r0, #1
   141b0:	str	sl, [r4, #12]
   141b4:	str	r3, [r4, #16]
   141b8:	cmp	r7, #2
   141bc:	strb	r0, [r4, #36]	; 0x24
   141c0:	str	ip, [r4, #32]
   141c4:	sub	ip, r7, #1
   141c8:	beq	141f8 <__assert_fail@plt+0x2bf0>
   141cc:	sub	r6, r7, #2
   141d0:	add	r5, r4, #52	; 0x34
   141d4:	and	r0, r2, #1
   141d8:	mov	lr, #0
   141dc:	str	sl, [r5]
   141e0:	str	r3, [r5, #4]
   141e4:	strb	r0, [r5, #24]
   141e8:	str	lr, [r5, #20]
   141ec:	subs	r6, r6, #1
   141f0:	add	r5, r5, #40	; 0x28
   141f4:	bne	141dc <__assert_fail@plt+0x2bd4>
   141f8:	add	r0, ip, ip, lsl #2
   141fc:	mov	r5, #0
   14200:	mov	r3, r7
   14204:	add	r2, r4, r0, lsl #3
   14208:	cmp	r1, #0
   1420c:	beq	13620 <__assert_fail@plt+0x2018>
   14210:	b	13650 <__assert_fail@plt+0x2048>
   14214:	mov	r5, #0
   14218:	str	sl, [r4, #12]
   1421c:	str	r3, [r4, #16]
   14220:	cmp	r7, #2
   14224:	strb	r5, [r4, #36]	; 0x24
   14228:	str	ip, [r4, #32]
   1422c:	sub	ip, r7, #1
   14230:	beq	14258 <__assert_fail@plt+0x2c50>
   14234:	sub	r6, r7, #2
   14238:	add	r0, r4, #52	; 0x34
   1423c:	str	sl, [r0]
   14240:	str	r3, [r0, #4]
   14244:	strb	r5, [r0, #24]
   14248:	str	r5, [r0, #20]
   1424c:	subs	r6, r6, #1
   14250:	add	r0, r0, #40	; 0x28
   14254:	bne	1423c <__assert_fail@plt+0x2c34>
   14258:	add	r0, ip, ip, lsl #2
   1425c:	mov	r3, r7
   14260:	add	r2, r4, r0, lsl #3
   14264:	cmp	r1, #0
   14268:	beq	13620 <__assert_fail@plt+0x2018>
   1426c:	b	13650 <__assert_fail@plt+0x2048>
   14270:	movw	r1, #1949	; 0x79d
   14274:	mov	r0, #0
   14278:	mov	r2, #5
   1427c:	movt	r1, #2
   14280:	bl	1138c <dcgettext@plt>
   14284:	mov	r2, r0
   14288:	mov	r0, #1
   1428c:	mov	r1, #0
   14290:	bl	11428 <error@plt>
   14294:	push	{fp, lr}
   14298:	mov	fp, sp
   1429c:	movw	r1, #1871	; 0x74f
   142a0:	mov	r0, #0
   142a4:	mov	r2, #5
   142a8:	movt	r1, #2
   142ac:	bl	1138c <dcgettext@plt>
   142b0:	mov	r2, r0
   142b4:	mov	r0, #1
   142b8:	mov	r1, #0
   142bc:	bl	11428 <error@plt>
   142c0:	push	{r4, r5, r6, sl, fp, lr}
   142c4:	add	fp, sp, #16
   142c8:	mov	r5, r1
   142cc:	movw	r1, #4401	; 0x1131
   142d0:	mov	r4, r0
   142d4:	movt	r1, #2
   142d8:	bl	112f0 <strcmp@plt>
   142dc:	cmp	r0, #0
   142e0:	beq	14338 <__assert_fail@plt+0x2d30>
   142e4:	movw	r1, #62876	; 0xf59c
   142e8:	mov	r0, r4
   142ec:	str	r4, [r5, #4]
   142f0:	movt	r1, #1
   142f4:	bl	160bc <__assert_fail@plt+0x4ab4>
   142f8:	str	r0, [r5]
   142fc:	cmp	r0, #0
   14300:	beq	14378 <__assert_fail@plt+0x2d70>
   14304:	mov	r1, #2
   14308:	bl	15f7c <__assert_fail@plt+0x4974>
   1430c:	mov	r0, #0
   14310:	strb	r0, [r5, #37]	; 0x25
   14314:	str	r0, [r5, #8]
   14318:	movw	r0, #8664	; 0x21d8
   1431c:	mov	r5, #1
   14320:	movt	r0, #3
   14324:	ldr	r1, [r0, #72]	; 0x48
   14328:	add	r1, r1, #1
   1432c:	str	r1, [r0, #72]	; 0x48
   14330:	mov	r0, r5
   14334:	pop	{r4, r5, r6, sl, fp, pc}
   14338:	movw	r1, #63214	; 0xf6ee
   1433c:	mov	r0, #0
   14340:	mov	r2, #5
   14344:	movt	r1, #1
   14348:	bl	1138c <dcgettext@plt>
   1434c:	str	r0, [r5, #4]
   14350:	movw	r0, #8648	; 0x21c8
   14354:	movw	r1, #8664	; 0x21d8
   14358:	mov	r2, #1
   1435c:	movt	r0, #3
   14360:	movt	r1, #3
   14364:	ldr	r0, [r0]
   14368:	str	r0, [r5]
   1436c:	strb	r2, [r1, #19]
   14370:	cmp	r0, #0
   14374:	bne	14304 <__assert_fail@plt+0x2cfc>
   14378:	movw	r0, #8664	; 0x21d8
   1437c:	mov	r1, #1
   14380:	mov	r5, #0
   14384:	movt	r0, #3
   14388:	strb	r1, [r0, #20]
   1438c:	ldrb	r0, [r0, #12]
   14390:	cmp	r0, #0
   14394:	beq	143a0 <__assert_fail@plt+0x2d98>
   14398:	mov	r0, r5
   1439c:	pop	{r4, r5, r6, sl, fp, pc}
   143a0:	bl	114e8 <__errno_location@plt>
   143a4:	ldr	r6, [r0]
   143a8:	mov	r0, #0
   143ac:	mov	r1, #3
   143b0:	mov	r2, r4
   143b4:	mov	r5, #0
   143b8:	bl	1a198 <__assert_fail@plt+0x8b90>
   143bc:	movw	r2, #3111	; 0xc27
   143c0:	mov	r3, r0
   143c4:	mov	r0, #0
   143c8:	mov	r1, r6
   143cc:	movt	r2, #2
   143d0:	bl	11428 <error@plt>
   143d4:	mov	r0, r5
   143d8:	pop	{r4, r5, r6, sl, fp, pc}
   143dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143e0:	add	fp, sp, #28
   143e4:	sub	sp, sp, #196	; 0xc4
   143e8:	mov	r9, r1
   143ec:	movw	r1, #4401	; 0x1131
   143f0:	mov	r4, r0
   143f4:	movt	r1, #2
   143f8:	bl	112f0 <strcmp@plt>
   143fc:	cmp	r0, #0
   14400:	mvneq	r9, #0
   14404:	cmp	r9, #0
   14408:	blt	14428 <__assert_fail@plt+0x2e20>
   1440c:	add	r6, sp, #88	; 0x58
   14410:	mov	r0, #3
   14414:	mov	r1, r9
   14418:	mov	r2, r6
   1441c:	bl	113e0 <__fxstat64@plt>
   14420:	cmp	r0, #0
   14424:	beq	14450 <__assert_fail@plt+0x2e48>
   14428:	movw	r0, #8792	; 0x2258
   1442c:	movt	r0, #3
   14430:	mov	r6, r0
   14434:	ldr	r1, [r6, #32]!
   14438:	cmp	r1, #0
   1443c:	bne	14454 <__assert_fail@plt+0x2e4c>
   14440:	add	r6, r0, #32
   14444:	mov	r0, r6
   14448:	bl	1623c <__assert_fail@plt+0x4c34>
   1444c:	b	14454 <__assert_fail@plt+0x2e4c>
   14450:	add	r6, r6, #80	; 0x50
   14454:	ldm	r6, {r0, r5}
   14458:	movw	sl, #8664	; 0x21d8
   1445c:	add	r1, sp, #80	; 0x50
   14460:	add	r2, sp, #36	; 0x24
   14464:	movt	sl, #3
   14468:	str	r0, [sp, #80]	; 0x50
   1446c:	ldr	r0, [sl, #44]	; 0x2c
   14470:	str	r5, [sp, #84]	; 0x54
   14474:	bl	1a5c4 <__assert_fail@plt+0x8fbc>
   14478:	cmp	r0, #0
   1447c:	beq	144d0 <__assert_fail@plt+0x2ec8>
   14480:	ldr	r0, [sl, #44]	; 0x2c
   14484:	ldr	r2, [sl, #28]
   14488:	add	r8, sp, #36	; 0x24
   1448c:	mvn	r1, #0
   14490:	mov	r3, r8
   14494:	stm	sp, {r0, r5}
   14498:	mov	r0, #0
   1449c:	bl	16a30 <__assert_fail@plt+0x5428>
   144a0:	add	r7, r0, #1
   144a4:	mov	r0, r7
   144a8:	bl	1b4e8 <__assert_fail@plt+0x9ee0>
   144ac:	mov	r6, r0
   144b0:	ldr	r0, [sl, #44]	; 0x2c
   144b4:	ldr	r2, [sl, #28]
   144b8:	mov	r1, r7
   144bc:	mov	r3, r8
   144c0:	stm	sp, {r0, r5}
   144c4:	mov	r0, r6
   144c8:	bl	16a30 <__assert_fail@plt+0x5428>
   144cc:	b	14508 <__assert_fail@plt+0x2f00>
   144d0:	mov	r0, #33	; 0x21
   144d4:	bl	1b4e8 <__assert_fail@plt+0x9ee0>
   144d8:	mov	r6, r0
   144dc:	ldr	r0, [sp, #80]	; 0x50
   144e0:	add	r2, sp, #15
   144e4:	asr	r1, r0, #31
   144e8:	bl	162c4 <__assert_fail@plt+0x4cbc>
   144ec:	movw	r3, #1975	; 0x7b7
   144f0:	stm	sp, {r0, r5}
   144f4:	mov	r0, r6
   144f8:	mov	r1, #1
   144fc:	mov	r2, #33	; 0x21
   14500:	movt	r3, #2
   14504:	bl	114f4 <__sprintf_chk@plt>
   14508:	ldr	r0, [sl, #84]	; 0x54
   1450c:	bl	16170 <__assert_fail@plt+0x4b68>
   14510:	movw	r0, #1972	; 0x7b4
   14514:	cmp	r9, #0
   14518:	mov	r1, #0
   1451c:	movt	r0, #2
   14520:	movlt	r4, r0
   14524:	ldr	r0, [sl, #32]
   14528:	str	r6, [sl, #84]	; 0x54
   1452c:	cmp	r0, #0
   14530:	movne	r4, r0
   14534:	movw	r0, #8504	; 0x2138
   14538:	movt	r0, #3
   1453c:	str	r4, [sl, #88]	; 0x58
   14540:	ldr	r4, [r0, #28]
   14544:	mov	r0, r6
   14548:	bl	16384 <__assert_fail@plt+0x4d7c>
   1454c:	sub	r4, r4, r0
   14550:	ldr	r0, [sl, #88]	; 0x58
   14554:	mov	r1, #0
   14558:	bl	16384 <__assert_fail@plt+0x4d7c>
   1455c:	sub	r0, r4, r0
   14560:	str	r0, [sl, #92]	; 0x5c
   14564:	sub	sp, fp, #28
   14568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1456c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14570:	add	fp, sp, #24
   14574:	ldr	r7, [r0]
   14578:	mov	r8, r1
   1457c:	mov	r5, r0
   14580:	ldmib	r7, {r0, r1}
   14584:	cmp	r0, r1
   14588:	bcs	1477c <__assert_fail@plt+0x3174>
   1458c:	add	r1, r0, #1
   14590:	str	r1, [r7, #4]
   14594:	ldrb	r6, [r0]
   14598:	cmp	r6, #12
   1459c:	bne	145ec <__assert_fail@plt+0x2fe4>
   145a0:	ldrb	r0, [r5, #37]	; 0x25
   145a4:	cmp	r0, #0
   145a8:	beq	145e8 <__assert_fail@plt+0x2fe0>
   145ac:	ldmib	r7, {r0, r1}
   145b0:	cmp	r0, r1
   145b4:	bcs	147a8 <__assert_fail@plt+0x31a0>
   145b8:	add	r1, r0, #1
   145bc:	str	r1, [r7, #4]
   145c0:	ldrb	r6, [r0]
   145c4:	cmp	r6, #10
   145c8:	bne	145ec <__assert_fail@plt+0x2fe4>
   145cc:	ldmib	r7, {r0, r1}
   145d0:	cmp	r0, r1
   145d4:	bcs	147c0 <__assert_fail@plt+0x31b8>
   145d8:	add	r1, r0, #1
   145dc:	str	r1, [r7, #4]
   145e0:	ldrb	r6, [r0]
   145e4:	b	145ec <__assert_fail@plt+0x2fe4>
   145e8:	mov	r6, #12
   145ec:	movw	r4, #8664	; 0x21d8
   145f0:	movt	r4, #3
   145f4:	ldrb	r0, [r4, #21]
   145f8:	strb	r0, [r5, #37]	; 0x25
   145fc:	mov	r0, r6
   14600:	cmn	r0, #1
   14604:	bne	14620 <__assert_fail@plt+0x3018>
   14608:	b	1464c <__assert_fail@plt+0x3044>
   1460c:	add	r1, r0, #1
   14610:	str	r1, [r7, #4]
   14614:	ldrb	r0, [r0]
   14618:	cmn	r0, #1
   1461c:	beq	1464c <__assert_fail@plt+0x3044>
   14620:	cmp	r0, #10
   14624:	beq	14740 <__assert_fail@plt+0x3138>
   14628:	cmp	r0, #12
   1462c:	beq	14658 <__assert_fail@plt+0x3050>
   14630:	ldmib	r7, {r0, r1}
   14634:	cmp	r0, r1
   14638:	bcc	1460c <__assert_fail@plt+0x3004>
   1463c:	mov	r0, r7
   14640:	bl	11560 <__uflow@plt>
   14644:	cmn	r0, #1
   14648:	bne	14620 <__assert_fail@plt+0x3018>
   1464c:	mov	r0, r5
   14650:	bl	147d0 <__assert_fail@plt+0x31c8>
   14654:	b	14740 <__assert_fail@plt+0x3138>
   14658:	ldrb	r0, [r4, #21]
   1465c:	cmp	r0, #1
   14660:	bne	146b4 <__assert_fail@plt+0x30ac>
   14664:	ldrb	r0, [r4, #9]
   14668:	cmp	r0, #0
   1466c:	beq	14688 <__assert_fail@plt+0x3080>
   14670:	mov	r0, #0
   14674:	strb	r0, [r5, #37]	; 0x25
   14678:	ldmib	r7, {r0, r1}
   1467c:	cmp	r0, r1
   14680:	bcc	146c0 <__assert_fail@plt+0x30b8>
   14684:	b	14794 <__assert_fail@plt+0x318c>
   14688:	movw	r0, #8504	; 0x2138
   1468c:	movt	r0, #3
   14690:	ldr	r0, [r0, #32]
   14694:	cmp	r0, #0
   14698:	beq	146b4 <__assert_fail@plt+0x30ac>
   1469c:	ldr	r1, [r4, #76]	; 0x4c
   146a0:	mov	r2, #0
   146a4:	add	r1, r1, #37	; 0x25
   146a8:	strb	r2, [r1], #40	; 0x28
   146ac:	subs	r0, r0, #1
   146b0:	bne	146a8 <__assert_fail@plt+0x30a0>
   146b4:	ldmib	r7, {r0, r1}
   146b8:	cmp	r0, r1
   146bc:	bcs	14794 <__assert_fail@plt+0x318c>
   146c0:	add	r1, r0, #1
   146c4:	str	r1, [r7, #4]
   146c8:	ldrb	r0, [r0]
   146cc:	cmp	r0, #10
   146d0:	beq	146dc <__assert_fail@plt+0x30d4>
   146d4:	mov	r1, r7
   146d8:	bl	114dc <ungetc@plt>
   146dc:	ldrb	r0, [r4, #9]
   146e0:	cmp	r0, #0
   146e4:	beq	146f4 <__assert_fail@plt+0x30ec>
   146e8:	mov	r0, #2
   146ec:	str	r0, [r5, #8]
   146f0:	b	1472c <__assert_fail@plt+0x3124>
   146f4:	movw	r0, #8504	; 0x2138
   146f8:	movt	r0, #3
   146fc:	ldr	r0, [r0, #32]
   14700:	cmp	r0, #0
   14704:	beq	1472c <__assert_fail@plt+0x3124>
   14708:	ldrb	r2, [r4, #1]
   1470c:	mov	r1, #1
   14710:	cmp	r2, #0
   14714:	ldr	r2, [r4, #76]	; 0x4c
   14718:	movwne	r1, #2
   1471c:	add	r2, r2, #8
   14720:	str	r1, [r2], #40	; 0x28
   14724:	subs	r0, r0, #1
   14728:	bne	14720 <__assert_fail@plt+0x3118>
   1472c:	mov	r0, #0
   14730:	str	r0, [r5, #28]
   14734:	ldr	r0, [r4, #80]	; 0x50
   14738:	sub	r0, r0, #1
   1473c:	str	r0, [r4, #80]	; 0x50
   14740:	ldrb	r0, [r4, #11]
   14744:	cmp	r0, #0
   14748:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1474c:	subs	r0, r8, #1
   14750:	movwne	r0, #1
   14754:	cmp	r6, #12
   14758:	beq	14778 <__assert_fail@plt+0x3170>
   1475c:	ldrb	r1, [r4, #9]
   14760:	ands	r0, r0, r1
   14764:	movweq	r0, #8504	; 0x2138
   14768:	movteq	r0, #3
   1476c:	ldreq	r1, [r0, #36]	; 0x24
   14770:	addeq	r1, r1, #1
   14774:	streq	r1, [r0, #36]	; 0x24
   14778:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1477c:	mov	r0, r7
   14780:	bl	11560 <__uflow@plt>
   14784:	mov	r6, r0
   14788:	cmp	r6, #12
   1478c:	beq	145a0 <__assert_fail@plt+0x2f98>
   14790:	b	145ec <__assert_fail@plt+0x2fe4>
   14794:	mov	r0, r7
   14798:	bl	11560 <__uflow@plt>
   1479c:	cmp	r0, #10
   147a0:	bne	146d4 <__assert_fail@plt+0x30cc>
   147a4:	b	146dc <__assert_fail@plt+0x30d4>
   147a8:	mov	r0, r7
   147ac:	bl	11560 <__uflow@plt>
   147b0:	mov	r6, r0
   147b4:	cmp	r6, #10
   147b8:	beq	145cc <__assert_fail@plt+0x2fc4>
   147bc:	b	145ec <__assert_fail@plt+0x2fe4>
   147c0:	mov	r0, r7
   147c4:	bl	11560 <__uflow@plt>
   147c8:	mov	r6, r0
   147cc:	b	145ec <__assert_fail@plt+0x2fe4>
   147d0:	push	{r4, r5, r6, sl, fp, lr}
   147d4:	add	fp, sp, #16
   147d8:	mov	r4, r0
   147dc:	ldr	r0, [r0, #8]
   147e0:	cmp	r0, #3
   147e4:	popeq	{r4, r5, r6, sl, fp, pc}
   147e8:	bl	114e8 <__errno_location@plt>
   147ec:	mov	r6, r0
   147f0:	ldr	r1, [r0]
   147f4:	ldr	r0, [r4]
   147f8:	ldr	r2, [r0]
   147fc:	lsl	r2, r2, #26
   14800:	and	r5, r1, r2, asr #31
   14804:	bl	11524 <fileno@plt>
   14808:	mov	r1, r0
   1480c:	ldr	r0, [r4]
   14810:	cmp	r1, #0
   14814:	beq	148b8 <__assert_fail@plt+0x32b0>
   14818:	bl	15fb8 <__assert_fail@plt+0x49b0>
   1481c:	cmp	r5, #0
   14820:	bne	1482c <__assert_fail@plt+0x3224>
   14824:	cmp	r0, #0
   14828:	ldrne	r5, [r6]
   1482c:	cmp	r5, #0
   14830:	bne	148c4 <__assert_fail@plt+0x32bc>
   14834:	movw	r0, #8664	; 0x21d8
   14838:	movt	r0, #3
   1483c:	ldrb	r1, [r0, #9]
   14840:	cmp	r1, #0
   14844:	beq	14868 <__assert_fail@plt+0x3260>
   14848:	mov	r1, #0
   1484c:	str	r1, [r4, #28]
   14850:	mov	r1, #3
   14854:	str	r1, [r4, #8]
   14858:	ldr	r1, [r0, #80]	; 0x50
   1485c:	sub	r1, r1, #1
   14860:	str	r1, [r0, #80]	; 0x50
   14864:	pop	{r4, r5, r6, sl, fp, pc}
   14868:	movw	r1, #8504	; 0x2138
   1486c:	movt	r1, #3
   14870:	ldr	r1, [r1, #32]
   14874:	cmp	r1, #0
   14878:	beq	148a8 <__assert_fail@plt+0x32a0>
   1487c:	ldr	r2, [r0, #76]	; 0x4c
   14880:	mov	r3, #3
   14884:	mov	r6, #0
   14888:	add	r2, r2, #24
   1488c:	str	r3, [r2, #-16]
   14890:	ldr	r5, [r2]
   14894:	cmp	r5, #0
   14898:	streq	r6, [r2, #4]
   1489c:	add	r2, r2, #40	; 0x28
   148a0:	subs	r1, r1, #1
   148a4:	bne	1488c <__assert_fail@plt+0x3284>
   148a8:	ldr	r1, [r0, #80]	; 0x50
   148ac:	sub	r1, r1, #1
   148b0:	str	r1, [r0, #80]	; 0x50
   148b4:	pop	{r4, r5, r6, sl, fp, pc}
   148b8:	bl	115a8 <clearerr_unlocked@plt>
   148bc:	cmp	r5, #0
   148c0:	beq	14834 <__assert_fail@plt+0x322c>
   148c4:	ldr	r2, [r4, #4]
   148c8:	mov	r0, #0
   148cc:	mov	r1, #3
   148d0:	bl	1a198 <__assert_fail@plt+0x8b90>
   148d4:	movw	r2, #3111	; 0xc27
   148d8:	mov	r3, r0
   148dc:	mov	r0, #1
   148e0:	mov	r1, r5
   148e4:	movt	r2, #2
   148e8:	bl	11428 <error@plt>
   148ec:	push	{r4, r5, fp, lr}
   148f0:	add	fp, sp, #8
   148f4:	movw	r5, #8664	; 0x21d8
   148f8:	mov	r4, r0
   148fc:	movt	r5, #3
   14900:	ldr	r2, [r5, #108]	; 0x6c
   14904:	ldr	r1, [r5, #112]	; 0x70
   14908:	ldr	r0, [r5, #104]	; 0x68
   1490c:	cmp	r1, r2
   14910:	bcc	14924 <__assert_fail@plt+0x331c>
   14914:	add	r1, r5, #108	; 0x6c
   14918:	bl	1b61c <__assert_fail@plt+0xa014>
   1491c:	str	r0, [r5, #104]	; 0x68
   14920:	ldr	r1, [r5, #112]	; 0x70
   14924:	add	r2, r1, #1
   14928:	str	r2, [r5, #112]	; 0x70
   1492c:	strb	r4, [r0, r1]
   14930:	pop	{r4, r5, fp, pc}
   14934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14938:	add	fp, sp, #28
   1493c:	sub	sp, sp, #20
   14940:	ldr	r8, [r0, #20]
   14944:	movw	r4, #8664	; 0x21d8
   14948:	mov	r5, r0
   1494c:	movt	r4, #3
   14950:	add	r0, r8, #1
   14954:	str	r0, [r5, #20]
   14958:	ldr	r1, [r4, #96]	; 0x60
   1495c:	ldr	r9, [r1, r0, lsl #2]
   14960:	mov	r0, #1
   14964:	ldr	r6, [r1, r8, lsl #2]
   14968:	strb	r0, [r4, #22]
   1496c:	ldrb	r0, [r4, #23]
   14970:	ldr	sl, [r4, #104]	; 0x68
   14974:	cmp	r0, #1
   14978:	bleq	153a0 <__assert_fail@plt+0x3d98>
   1497c:	ldr	r0, [r5, #8]
   14980:	cmp	r0, #1
   14984:	bne	149c8 <__assert_fail@plt+0x33c0>
   14988:	movw	r0, #8504	; 0x2138
   1498c:	movt	r0, #3
   14990:	ldr	r1, [r0, #32]
   14994:	ldr	r0, [r4, #76]	; 0x4c
   14998:	cmp	r1, #1
   1499c:	blt	149bc <__assert_fail@plt+0x33b4>
   149a0:	add	r2, r0, #8
   149a4:	mov	r3, #0
   149a8:	mov	r7, #2
   149ac:	add	r3, r3, #1
   149b0:	str	r7, [r2], #40	; 0x28
   149b4:	cmp	r3, r1
   149b8:	blt	149ac <__assert_fail@plt+0x33a4>
   149bc:	ldr	r0, [r0, #28]
   149c0:	cmp	r0, #0
   149c4:	ble	14b18 <__assert_fail@plt+0x3510>
   149c8:	ldr	r0, [r4, #40]	; 0x28
   149cc:	ldr	r1, [r4, #116]	; 0x74
   149d0:	cmp	r1, r0
   149d4:	ble	14a94 <__assert_fail@plt+0x348c>
   149d8:	movw	ip, #8792	; 0x2258
   149dc:	ldrb	r3, [r4, #7]
   149e0:	sub	r7, r1, r0
   149e4:	movt	ip, #3
   149e8:	ldr	r2, [ip]
   149ec:	cmp	r3, #0
   149f0:	beq	14a00 <__assert_fail@plt+0x33f8>
   149f4:	sub	r0, r7, r2
   149f8:	str	r0, [r4, #120]	; 0x78
   149fc:	b	14a8c <__assert_fail@plt+0x3484>
   14a00:	str	r6, [sp, #16]
   14a04:	mov	r6, r8
   14a08:	cmp	r7, r2
   14a0c:	str	sl, [sp, #12]
   14a10:	str	r9, [sp, #8]
   14a14:	ble	14a78 <__assert_fail@plt+0x3470>
   14a18:	movw	sl, #8652	; 0x21cc
   14a1c:	sub	r1, r1, r2
   14a20:	mov	r8, #32
   14a24:	sub	r9, r1, r0
   14a28:	movt	sl, #3
   14a2c:	ldr	r0, [sl]
   14a30:	ldr	r1, [r0, #20]
   14a34:	ldr	r2, [r0, #24]
   14a38:	cmp	r1, r2
   14a3c:	bcs	14a58 <__assert_fail@plt+0x3450>
   14a40:	add	r2, r1, #1
   14a44:	str	r2, [r0, #20]
   14a48:	strb	r8, [r1]
   14a4c:	subs	r9, r9, #1
   14a50:	bne	14a2c <__assert_fail@plt+0x3424>
   14a54:	b	14a78 <__assert_fail@plt+0x3470>
   14a58:	mov	r1, #32
   14a5c:	str	r7, [sp, #4]
   14a60:	mov	r7, ip
   14a64:	bl	1156c <__overflow@plt>
   14a68:	mov	ip, r7
   14a6c:	ldr	r7, [sp, #4]
   14a70:	subs	r9, r9, #1
   14a74:	bne	14a2c <__assert_fail@plt+0x3424>
   14a78:	mov	r8, r6
   14a7c:	ldr	r9, [sp, #8]
   14a80:	ldr	r6, [sp, #16]
   14a84:	ldr	sl, [sp, #12]
   14a88:	str	r7, [ip]
   14a8c:	mov	r0, #0
   14a90:	str	r0, [r4, #116]	; 0x74
   14a94:	ldrb	r0, [r4, #13]
   14a98:	cmp	r0, #1
   14a9c:	bleq	1560c <__assert_fail@plt+0x4004>
   14aa0:	cmp	r6, r9
   14aa4:	beq	14ac0 <__assert_fail@plt+0x34b8>
   14aa8:	add	r7, sl, r6
   14aac:	sub	r6, r9, r6
   14ab0:	ldrb	r0, [r7], #1
   14ab4:	bl	14b34 <__assert_fail@plt+0x352c>
   14ab8:	subs	r6, r6, #1
   14abc:	bne	14ab0 <__assert_fail@plt+0x34a8>
   14ac0:	ldr	r0, [r4, #120]	; 0x78
   14ac4:	cmp	r0, #0
   14ac8:	beq	14ad8 <__assert_fail@plt+0x34d0>
   14acc:	mov	r0, #1
   14ad0:	sub	sp, fp, #28
   14ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad8:	ldr	r1, [r4, #100]	; 0x64
   14adc:	ldr	r0, [r4, #40]	; 0x28
   14ae0:	ldr	r7, [r5, #32]
   14ae4:	ldr	r3, [r4, #36]	; 0x24
   14ae8:	movw	r2, #8792	; 0x2258
   14aec:	movt	r2, #3
   14af0:	ldr	r1, [r1, r8, lsl #2]
   14af4:	add	r1, r1, r7
   14af8:	sub	r7, r7, r0
   14afc:	cmp	r7, r3
   14b00:	str	r1, [r2]
   14b04:	subeq	r0, r1, r0
   14b08:	streq	r0, [r2]
   14b0c:	mov	r0, #1
   14b10:	sub	sp, fp, #28
   14b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b18:	ldrb	r0, [r4, #14]
   14b1c:	cmp	r0, #1
   14b20:	moveq	r0, #0
   14b24:	strbeq	r0, [r4, #22]
   14b28:	mov	r0, #1
   14b2c:	sub	sp, fp, #28
   14b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b38:	add	fp, sp, #28
   14b3c:	sub	sp, sp, #4
   14b40:	movw	sl, #8664	; 0x21d8
   14b44:	mov	r8, r0
   14b48:	movt	sl, #3
   14b4c:	ldrb	r0, [sl, #7]
   14b50:	cmp	r0, #1
   14b54:	bne	14cc4 <__assert_fail@plt+0x36bc>
   14b58:	ldr	r1, [sl, #120]	; 0x78
   14b5c:	cmp	r8, #32
   14b60:	addeq	r0, r1, #1
   14b64:	streq	r0, [sl, #120]	; 0x78
   14b68:	subeq	sp, fp, #28
   14b6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b70:	cmp	r1, #1
   14b74:	blt	14c7c <__assert_fail@plt+0x3674>
   14b78:	movw	ip, #8792	; 0x2258
   14b7c:	cmp	r1, #1
   14b80:	movt	ip, #3
   14b84:	ldr	r0, [ip]
   14b88:	add	r7, r0, r1
   14b8c:	beq	14c14 <__assert_fail@plt+0x360c>
   14b90:	movw	r6, #8504	; 0x2138
   14b94:	movw	r9, #8652	; 0x21cc
   14b98:	movt	r6, #3
   14b9c:	movt	r9, #3
   14ba0:	ldr	r1, [r6, #8]
   14ba4:	sdiv	r2, r0, r1
   14ba8:	mul	r2, r2, r1
   14bac:	sub	r2, r2, r0
   14bb0:	add	r1, r1, r2
   14bb4:	add	r5, r1, r0
   14bb8:	cmp	r7, r5
   14bbc:	blt	14c14 <__assert_fail@plt+0x360c>
   14bc0:	ldr	r0, [r9]
   14bc4:	ldrb	r1, [r6, #1]
   14bc8:	ldr	r2, [r0, #20]
   14bcc:	ldr	r3, [r0, #24]
   14bd0:	cmp	r2, r3
   14bd4:	bcs	14bf8 <__assert_fail@plt+0x35f0>
   14bd8:	add	r3, r2, #1
   14bdc:	str	r3, [r0, #20]
   14be0:	strb	r1, [r2]
   14be4:	sub	r0, r7, r5
   14be8:	cmp	r0, #1
   14bec:	mov	r0, r5
   14bf0:	bgt	14ba0 <__assert_fail@plt+0x3598>
   14bf4:	b	14c14 <__assert_fail@plt+0x360c>
   14bf8:	mov	r4, ip
   14bfc:	bl	1156c <__overflow@plt>
   14c00:	mov	ip, r4
   14c04:	sub	r0, r7, r5
   14c08:	cmp	r0, #1
   14c0c:	mov	r0, r5
   14c10:	bgt	14ba0 <__assert_fail@plt+0x3598>
   14c14:	cmp	r0, r7
   14c18:	bge	14c70 <__assert_fail@plt+0x3668>
   14c1c:	movw	r6, #8652	; 0x21cc
   14c20:	sub	r5, r7, r0
   14c24:	mov	r4, #32
   14c28:	movt	r6, #3
   14c2c:	ldr	r0, [r6]
   14c30:	ldr	r1, [r0, #20]
   14c34:	ldr	r2, [r0, #24]
   14c38:	cmp	r1, r2
   14c3c:	bcs	14c58 <__assert_fail@plt+0x3650>
   14c40:	add	r2, r1, #1
   14c44:	str	r2, [r0, #20]
   14c48:	strb	r4, [r1]
   14c4c:	subs	r5, r5, #1
   14c50:	bne	14c2c <__assert_fail@plt+0x3624>
   14c54:	b	14c70 <__assert_fail@plt+0x3668>
   14c58:	mov	r1, #32
   14c5c:	mov	r9, ip
   14c60:	bl	1156c <__overflow@plt>
   14c64:	mov	ip, r9
   14c68:	subs	r5, r5, #1
   14c6c:	bne	14c2c <__assert_fail@plt+0x3624>
   14c70:	mov	r0, #0
   14c74:	str	r7, [ip]
   14c78:	str	r0, [sl, #120]	; 0x78
   14c7c:	bl	114a0 <__ctype_b_loc@plt>
   14c80:	ldr	r0, [r0]
   14c84:	add	r0, r0, r8, lsl #1
   14c88:	ldrb	r0, [r0, #1]
   14c8c:	tst	r0, #64	; 0x40
   14c90:	bne	14cb0 <__assert_fail@plt+0x36a8>
   14c94:	cmp	r8, #8
   14c98:	bne	14cc4 <__assert_fail@plt+0x36bc>
   14c9c:	movw	r0, #8792	; 0x2258
   14ca0:	movt	r0, #3
   14ca4:	ldr	r1, [r0]
   14ca8:	sub	r1, r1, #1
   14cac:	b	14cc0 <__assert_fail@plt+0x36b8>
   14cb0:	movw	r0, #8792	; 0x2258
   14cb4:	movt	r0, #3
   14cb8:	ldr	r1, [r0]
   14cbc:	add	r1, r1, #1
   14cc0:	str	r1, [r0]
   14cc4:	movw	r0, #8652	; 0x21cc
   14cc8:	movt	r0, #3
   14ccc:	ldr	r0, [r0]
   14cd0:	ldr	r1, [r0, #20]
   14cd4:	ldr	r2, [r0, #24]
   14cd8:	cmp	r1, r2
   14cdc:	addcc	r2, r1, #1
   14ce0:	strcc	r2, [r0, #20]
   14ce4:	strbcc	r8, [r1]
   14ce8:	subcc	sp, fp, #28
   14cec:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cf0:	mov	r1, r8
   14cf4:	sub	sp, fp, #28
   14cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cfc:	b	1156c <__overflow@plt>
   14d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d04:	add	fp, sp, #28
   14d08:	sub	sp, sp, #12
   14d0c:	mov	r4, r0
   14d10:	ldr	r0, [r0]
   14d14:	ldmib	r0, {r1, r2}
   14d18:	cmp	r1, r2
   14d1c:	bcs	15330 <__assert_fail@plt+0x3d28>
   14d20:	add	r2, r1, #1
   14d24:	str	r2, [r0, #4]
   14d28:	ldrb	r5, [r1]
   14d2c:	movw	sl, #8792	; 0x2258
   14d30:	cmp	r5, #12
   14d34:	movt	sl, #3
   14d38:	ldr	r8, [sl, #8]
   14d3c:	bne	14d8c <__assert_fail@plt+0x3784>
   14d40:	ldrb	r0, [r4, #37]	; 0x25
   14d44:	cmp	r0, #0
   14d48:	beq	14e68 <__assert_fail@plt+0x3860>
   14d4c:	ldr	r0, [r4]
   14d50:	ldmib	r0, {r1, r2}
   14d54:	cmp	r1, r2
   14d58:	bcs	1534c <__assert_fail@plt+0x3d44>
   14d5c:	add	r2, r1, #1
   14d60:	str	r2, [r0, #4]
   14d64:	ldrb	r5, [r1]
   14d68:	cmp	r5, #10
   14d6c:	bne	14d8c <__assert_fail@plt+0x3784>
   14d70:	ldr	r0, [r4]
   14d74:	ldmib	r0, {r1, r2}
   14d78:	cmp	r1, r2
   14d7c:	bcs	15360 <__assert_fail@plt+0x3d58>
   14d80:	add	r2, r1, #1
   14d84:	str	r2, [r0, #4]
   14d88:	ldrb	r5, [r1]
   14d8c:	mov	r0, #0
   14d90:	cmn	r5, #1
   14d94:	strb	r0, [r4, #37]	; 0x25
   14d98:	beq	15378 <__assert_fail@plt+0x3d70>
   14d9c:	cmp	r5, #10
   14da0:	beq	14dbc <__assert_fail@plt+0x37b4>
   14da4:	cmp	r5, #12
   14da8:	beq	14e70 <__assert_fail@plt+0x3868>
   14dac:	uxtb	r0, r5
   14db0:	bl	15a34 <__assert_fail@plt+0x442c>
   14db4:	mov	r6, r0
   14db8:	b	14dbc <__assert_fail@plt+0x37b4>
   14dbc:	movw	r7, #8664	; 0x21d8
   14dc0:	movt	r7, #3
   14dc4:	ldrb	r0, [r7, #17]
   14dc8:	cmp	r0, #1
   14dcc:	bne	14df4 <__assert_fail@plt+0x37ec>
   14dd0:	ldr	r0, [r7, #60]	; 0x3c
   14dd4:	ldr	r1, [sl, #8]
   14dd8:	cmp	r1, r0
   14ddc:	ble	14df4 <__assert_fail@plt+0x37ec>
   14de0:	str	r8, [sl, #8]
   14de4:	mov	r8, #0
   14de8:	mov	r0, r8
   14dec:	sub	sp, fp, #28
   14df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14df4:	ldr	r0, [r4, #16]
   14df8:	movw	r1, #18668	; 0x48ec
   14dfc:	movt	r1, #1
   14e00:	cmp	r0, r1
   14e04:	beq	14fdc <__assert_fail@plt+0x39d4>
   14e08:	mov	r0, #1
   14e0c:	strb	r0, [r7, #22]
   14e10:	ldrb	r0, [r7, #23]
   14e14:	cmp	r0, #1
   14e18:	ldrbeq	r0, [r7, #1]
   14e1c:	cmpeq	r0, #1
   14e20:	bleq	153a0 <__assert_fail@plt+0x3d98>
   14e24:	ldrb	r0, [r7, #9]
   14e28:	cmp	r0, #1
   14e2c:	ldrbeq	r0, [r7, #26]
   14e30:	cmpeq	r0, #1
   14e34:	beq	150d8 <__assert_fail@plt+0x3ad0>
   14e38:	ldr	r0, [r7, #40]	; 0x28
   14e3c:	ldr	r1, [r7, #116]	; 0x74
   14e40:	cmp	r1, r0
   14e44:	ble	14fd0 <__assert_fail@plt+0x39c8>
   14e48:	ldrb	r3, [r7, #7]
   14e4c:	ldr	r2, [sl]
   14e50:	sub	r8, r1, r0
   14e54:	cmp	r3, #0
   14e58:	beq	14f5c <__assert_fail@plt+0x3954>
   14e5c:	sub	r0, r8, r2
   14e60:	str	r0, [r7, #120]	; 0x78
   14e64:	b	14fc8 <__assert_fail@plt+0x39c0>
   14e68:	mov	r0, #0
   14e6c:	strb	r0, [r4, #37]	; 0x25
   14e70:	ldr	r0, [r4]
   14e74:	ldmib	r0, {r1, r2}
   14e78:	cmp	r1, r2
   14e7c:	bcs	1533c <__assert_fail@plt+0x3d34>
   14e80:	add	r2, r1, #1
   14e84:	str	r2, [r0, #4]
   14e88:	ldrb	r0, [r1]
   14e8c:	cmp	r0, #10
   14e90:	beq	14e9c <__assert_fail@plt+0x3894>
   14e94:	ldr	r1, [r4]
   14e98:	bl	114dc <ungetc@plt>
   14e9c:	movw	r5, #8664	; 0x21d8
   14ea0:	mov	r0, #1
   14ea4:	movt	r5, #3
   14ea8:	strb	r0, [r5, #24]
   14eac:	ldrb	r0, [r5, #23]
   14eb0:	cmp	r0, #1
   14eb4:	ldrbeq	r0, [r5, #1]
   14eb8:	cmpeq	r0, #1
   14ebc:	beq	14ee8 <__assert_fail@plt+0x38e0>
   14ec0:	ldrb	r0, [r5, #15]
   14ec4:	cmp	r0, #1
   14ec8:	moveq	r0, #1
   14ecc:	strbeq	r0, [r5, #25]
   14ed0:	ldrb	r0, [r5, #9]
   14ed4:	cmp	r0, #0
   14ed8:	beq	14f00 <__assert_fail@plt+0x38f8>
   14edc:	mov	r0, #2
   14ee0:	str	r0, [r4, #8]
   14ee4:	b	14f38 <__assert_fail@plt+0x3930>
   14ee8:	mov	r0, #1
   14eec:	strb	r0, [r5, #22]
   14ef0:	bl	153a0 <__assert_fail@plt+0x3d98>
   14ef4:	ldrb	r0, [r5, #9]
   14ef8:	cmp	r0, #0
   14efc:	bne	14edc <__assert_fail@plt+0x38d4>
   14f00:	movw	r0, #8504	; 0x2138
   14f04:	movt	r0, #3
   14f08:	ldr	r0, [r0, #32]
   14f0c:	cmp	r0, #0
   14f10:	beq	14f38 <__assert_fail@plt+0x3930>
   14f14:	ldrb	r2, [r5, #1]
   14f18:	mov	r1, #1
   14f1c:	cmp	r2, #0
   14f20:	ldr	r2, [r5, #76]	; 0x4c
   14f24:	movwne	r1, #2
   14f28:	add	r2, r2, #8
   14f2c:	str	r1, [r2], #40	; 0x28
   14f30:	subs	r0, r0, #1
   14f34:	bne	14f2c <__assert_fail@plt+0x3924>
   14f38:	mov	r0, #0
   14f3c:	str	r0, [r4, #28]
   14f40:	ldr	r0, [r5, #80]	; 0x50
   14f44:	sub	r0, r0, #1
   14f48:	str	r0, [r5, #80]	; 0x50
   14f4c:	mov	r8, #1
   14f50:	mov	r0, r8
   14f54:	sub	sp, fp, #28
   14f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f5c:	cmp	r8, r2
   14f60:	str	r5, [sp, #4]
   14f64:	ble	14fb8 <__assert_fail@plt+0x39b0>
   14f68:	movw	r9, #8652	; 0x21cc
   14f6c:	sub	r1, r1, r2
   14f70:	mov	r7, #32
   14f74:	sub	r5, r1, r0
   14f78:	movt	r9, #3
   14f7c:	ldr	r0, [r9]
   14f80:	ldr	r1, [r0, #20]
   14f84:	ldr	r2, [r0, #24]
   14f88:	cmp	r1, r2
   14f8c:	bcs	14fa8 <__assert_fail@plt+0x39a0>
   14f90:	add	r2, r1, #1
   14f94:	str	r2, [r0, #20]
   14f98:	strb	r7, [r1]
   14f9c:	subs	r5, r5, #1
   14fa0:	bne	14f7c <__assert_fail@plt+0x3974>
   14fa4:	b	14fb8 <__assert_fail@plt+0x39b0>
   14fa8:	mov	r1, #32
   14fac:	bl	1156c <__overflow@plt>
   14fb0:	subs	r5, r5, #1
   14fb4:	bne	14f7c <__assert_fail@plt+0x3974>
   14fb8:	ldr	r5, [sp, #4]
   14fbc:	movw	r7, #8664	; 0x21d8
   14fc0:	str	r8, [sl]
   14fc4:	movt	r7, #3
   14fc8:	mov	r0, #0
   14fcc:	str	r0, [r7, #116]	; 0x74
   14fd0:	ldrb	r0, [r7, #13]
   14fd4:	cmp	r0, #1
   14fd8:	bleq	1560c <__assert_fail@plt+0x4004>
   14fdc:	ldrb	r0, [r4, #36]	; 0x24
   14fe0:	cmp	r0, #0
   14fe4:	movne	r0, r4
   14fe8:	blne	15c00 <__assert_fail@plt+0x45f8>
   14fec:	mov	r0, #0
   14ff0:	mov	r8, #1
   14ff4:	cmp	r5, #10
   14ff8:	strb	r0, [r7, #27]
   14ffc:	beq	150b8 <__assert_fail@plt+0x3ab0>
   15000:	cmp	r6, #0
   15004:	beq	15020 <__assert_fail@plt+0x3a18>
   15008:	ldr	r5, [r7, #68]	; 0x44
   1500c:	ldrb	r0, [r5], #1
   15010:	ldr	r1, [r4, #16]
   15014:	blx	r1
   15018:	subs	r6, r6, #1
   1501c:	bne	1500c <__assert_fail@plt+0x3a04>
   15020:	ldr	r0, [r4]
   15024:	ldmib	r0, {r1, r2}
   15028:	cmp	r1, r2
   1502c:	bcs	150a4 <__assert_fail@plt+0x3a9c>
   15030:	add	r2, r1, #1
   15034:	str	r2, [r0, #4]
   15038:	ldrb	r0, [r1]
   1503c:	cmn	r0, #1
   15040:	beq	150b0 <__assert_fail@plt+0x3aa8>
   15044:	cmp	r0, #10
   15048:	beq	150b8 <__assert_fail@plt+0x3ab0>
   1504c:	cmp	r0, #12
   15050:	beq	15284 <__assert_fail@plt+0x3c7c>
   15054:	ldr	r6, [sl, #8]
   15058:	uxtb	r0, r0
   1505c:	bl	15a34 <__assert_fail@plt+0x442c>
   15060:	mov	r5, r0
   15064:	ldrb	r0, [r7, #17]
   15068:	cmp	r0, #1
   1506c:	bne	15080 <__assert_fail@plt+0x3a78>
   15070:	ldr	r0, [r7, #60]	; 0x3c
   15074:	ldr	r1, [sl, #8]
   15078:	cmp	r1, r0
   1507c:	bgt	150c4 <__assert_fail@plt+0x3abc>
   15080:	cmp	r5, #0
   15084:	beq	15020 <__assert_fail@plt+0x3a18>
   15088:	ldr	r6, [r7, #68]	; 0x44
   1508c:	ldrb	r0, [r6], #1
   15090:	ldr	r1, [r4, #16]
   15094:	blx	r1
   15098:	subs	r5, r5, #1
   1509c:	bne	1508c <__assert_fail@plt+0x3a84>
   150a0:	b	15020 <__assert_fail@plt+0x3a18>
   150a4:	bl	11560 <__uflow@plt>
   150a8:	cmn	r0, #1
   150ac:	bne	15044 <__assert_fail@plt+0x3a3c>
   150b0:	mov	r0, r4
   150b4:	bl	147d0 <__assert_fail@plt+0x31c8>
   150b8:	mov	r0, r8
   150bc:	sub	sp, fp, #28
   150c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150c4:	str	r6, [sl, #8]
   150c8:	mov	r8, #0
   150cc:	mov	r0, r8
   150d0:	sub	sp, fp, #28
   150d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150d8:	ldr	r8, [sl, #4]
   150dc:	mov	r0, #0
   150e0:	str	r5, [sp, #4]
   150e4:	str	r0, [sl, #4]
   150e8:	cmp	r8, #1
   150ec:	blt	15240 <__assert_fail@plt+0x3c38>
   150f0:	movw	r0, #8664	; 0x21d8
   150f4:	movw	ip, #8652	; 0x21cc
   150f8:	mov	r9, #1
   150fc:	mov	lr, #32
   15100:	str	r8, [sp, #8]
   15104:	movt	r0, #3
   15108:	movt	ip, #3
   1510c:	ldr	r7, [r0, #76]	; 0x4c
   15110:	b	151d8 <__assert_fail@plt+0x3bd0>
   15114:	ldrb	r3, [r5, #7]
   15118:	ldr	r2, [sl]
   1511c:	sub	r8, r0, r1
   15120:	cmp	r3, #0
   15124:	beq	15134 <__assert_fail@plt+0x3b2c>
   15128:	sub	r0, r8, r2
   1512c:	str	r0, [r5, #120]	; 0x78
   15130:	b	151a0 <__assert_fail@plt+0x3b98>
   15134:	cmp	r8, r2
   15138:	ble	1518c <__assert_fail@plt+0x3b84>
   1513c:	sub	r0, r0, r2
   15140:	sub	sl, r0, r1
   15144:	ldr	r0, [ip]
   15148:	ldr	r1, [r0, #20]
   1514c:	ldr	r2, [r0, #24]
   15150:	cmp	r1, r2
   15154:	bcs	15170 <__assert_fail@plt+0x3b68>
   15158:	add	r2, r1, #1
   1515c:	str	r2, [r0, #20]
   15160:	strb	lr, [r1]
   15164:	subs	sl, sl, #1
   15168:	bne	15144 <__assert_fail@plt+0x3b3c>
   1516c:	b	1518c <__assert_fail@plt+0x3b84>
   15170:	mov	r1, #32
   15174:	bl	1156c <__overflow@plt>
   15178:	movw	ip, #8652	; 0x21cc
   1517c:	mov	lr, #32
   15180:	movt	ip, #3
   15184:	subs	sl, sl, #1
   15188:	bne	15144 <__assert_fail@plt+0x3b3c>
   1518c:	movw	sl, #8792	; 0x2258
   15190:	movw	r5, #8664	; 0x21d8
   15194:	movt	sl, #3
   15198:	movt	r5, #3
   1519c:	str	r8, [sl]
   151a0:	ldr	r8, [sp, #8]
   151a4:	mov	r0, #0
   151a8:	str	r0, [r5, #116]	; 0x74
   151ac:	ldrb	r0, [r5, #13]
   151b0:	cmp	r0, #1
   151b4:	bne	15200 <__assert_fail@plt+0x3bf8>
   151b8:	bl	1560c <__assert_fail@plt+0x4004>
   151bc:	movw	ip, #8652	; 0x21cc
   151c0:	mov	lr, #32
   151c4:	movt	ip, #3
   151c8:	ldrb	r0, [r7, #36]	; 0x24
   151cc:	cmp	r0, #0
   151d0:	bne	1520c <__assert_fail@plt+0x3c04>
   151d4:	b	15220 <__assert_fail@plt+0x3c18>
   151d8:	ldr	r0, [r7, #32]
   151dc:	movw	r5, #8664	; 0x21d8
   151e0:	movt	r5, #3
   151e4:	str	r0, [r5, #116]	; 0x74
   151e8:	ldr	r1, [r5, #40]	; 0x28
   151ec:	cmp	r0, r1
   151f0:	bgt	15114 <__assert_fail@plt+0x3b0c>
   151f4:	ldrb	r0, [r5, #13]
   151f8:	cmp	r0, #1
   151fc:	beq	151b8 <__assert_fail@plt+0x3bb0>
   15200:	ldrb	r0, [r7, #36]	; 0x24
   15204:	cmp	r0, #0
   15208:	beq	15220 <__assert_fail@plt+0x3c18>
   1520c:	mov	r0, r7
   15210:	bl	15c00 <__assert_fail@plt+0x45f8>
   15214:	movw	ip, #8652	; 0x21cc
   15218:	mov	lr, #32
   1521c:	movt	ip, #3
   15220:	ldr	r0, [sl, #4]
   15224:	add	r7, r7, #40	; 0x28
   15228:	cmp	r9, r8
   1522c:	add	r0, r0, #1
   15230:	str	r0, [sl, #4]
   15234:	add	r0, r9, #1
   15238:	mov	r9, r0
   1523c:	bne	151d8 <__assert_fail@plt+0x3bd0>
   15240:	movw	r7, #8664	; 0x21d8
   15244:	mov	r1, #0
   15248:	ldr	r0, [r4, #32]
   1524c:	ldr	r5, [sp, #4]
   15250:	movt	r7, #3
   15254:	strb	r1, [r7, #26]
   15258:	ldrb	r2, [r7, #17]
   1525c:	ldr	r1, [r7, #60]	; 0x3c
   15260:	str	r0, [r7, #116]	; 0x74
   15264:	cmp	r2, #0
   15268:	moveq	r1, r2
   1526c:	str	r1, [r7, #120]	; 0x78
   15270:	ldr	r0, [r7, #40]	; 0x28
   15274:	ldr	r1, [r7, #116]	; 0x74
   15278:	cmp	r1, r0
   1527c:	bgt	14e48 <__assert_fail@plt+0x3840>
   15280:	b	14fd0 <__assert_fail@plt+0x39c8>
   15284:	ldr	r0, [r4]
   15288:	ldmib	r0, {r1, r2}
   1528c:	cmp	r1, r2
   15290:	bcs	15390 <__assert_fail@plt+0x3d88>
   15294:	add	r2, r1, #1
   15298:	str	r2, [r0, #4]
   1529c:	ldrb	r0, [r1]
   152a0:	cmp	r0, #10
   152a4:	beq	152b0 <__assert_fail@plt+0x3ca8>
   152a8:	ldr	r1, [r4]
   152ac:	bl	114dc <ungetc@plt>
   152b0:	ldrb	r0, [r7, #15]
   152b4:	cmp	r0, #1
   152b8:	moveq	r0, #1
   152bc:	strbeq	r0, [r7, #25]
   152c0:	ldrb	r0, [r7, #9]
   152c4:	cmp	r0, #0
   152c8:	beq	152d8 <__assert_fail@plt+0x3cd0>
   152cc:	mov	r0, #2
   152d0:	str	r0, [r4, #8]
   152d4:	b	15310 <__assert_fail@plt+0x3d08>
   152d8:	movw	r0, #8504	; 0x2138
   152dc:	movt	r0, #3
   152e0:	ldr	r0, [r0, #32]
   152e4:	cmp	r0, #0
   152e8:	beq	15310 <__assert_fail@plt+0x3d08>
   152ec:	ldrb	r2, [r7, #1]
   152f0:	mov	r1, #1
   152f4:	cmp	r2, #0
   152f8:	ldr	r2, [r7, #76]	; 0x4c
   152fc:	movwne	r1, #2
   15300:	add	r2, r2, #8
   15304:	str	r1, [r2], #40	; 0x28
   15308:	subs	r0, r0, #1
   1530c:	bne	15304 <__assert_fail@plt+0x3cfc>
   15310:	mov	r0, #0
   15314:	str	r0, [r4, #28]
   15318:	ldr	r0, [r7, #80]	; 0x50
   1531c:	sub	r0, r0, #1
   15320:	str	r0, [r7, #80]	; 0x50
   15324:	mov	r0, r8
   15328:	sub	sp, fp, #28
   1532c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15330:	bl	11560 <__uflow@plt>
   15334:	mov	r5, r0
   15338:	b	14d2c <__assert_fail@plt+0x3724>
   1533c:	bl	11560 <__uflow@plt>
   15340:	cmp	r0, #10
   15344:	bne	14e94 <__assert_fail@plt+0x388c>
   15348:	b	14e9c <__assert_fail@plt+0x3894>
   1534c:	bl	11560 <__uflow@plt>
   15350:	mov	r5, r0
   15354:	cmp	r5, #10
   15358:	beq	14d70 <__assert_fail@plt+0x3768>
   1535c:	b	14d8c <__assert_fail@plt+0x3784>
   15360:	bl	11560 <__uflow@plt>
   15364:	mov	r5, r0
   15368:	mov	r0, #0
   1536c:	cmn	r5, #1
   15370:	strb	r0, [r4, #37]	; 0x25
   15374:	bne	14d9c <__assert_fail@plt+0x3794>
   15378:	mov	r0, r4
   1537c:	bl	147d0 <__assert_fail@plt+0x31c8>
   15380:	mov	r8, #1
   15384:	mov	r0, r8
   15388:	sub	sp, fp, #28
   1538c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15390:	bl	11560 <__uflow@plt>
   15394:	cmp	r0, #10
   15398:	bne	152a8 <__assert_fail@plt+0x3ca0>
   1539c:	b	152b0 <__assert_fail@plt+0x3ca8>
   153a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   153a4:	add	fp, sp, #24
   153a8:	sub	sp, sp, #312	; 0x138
   153ac:	movw	r9, #8664	; 0x21d8
   153b0:	movw	r8, #8792	; 0x2258
   153b4:	mov	r0, #0
   153b8:	movt	r9, #3
   153bc:	movt	r8, #3
   153c0:	ldrb	r1, [r9, #7]
   153c4:	ldr	r4, [r9, #36]	; 0x24
   153c8:	str	r0, [r8]
   153cc:	cmp	r1, #0
   153d0:	beq	153ec <__assert_fail@plt+0x3de4>
   153d4:	str	r4, [r9, #120]	; 0x78
   153d8:	mov	r1, r4
   153dc:	add	r4, r0, r1
   153e0:	cmp	r1, #2
   153e4:	bge	15458 <__assert_fail@plt+0x3e50>
   153e8:	b	154d4 <__assert_fail@plt+0x3ecc>
   153ec:	cmp	r4, #1
   153f0:	blt	15440 <__assert_fail@plt+0x3e38>
   153f4:	movw	r5, #8652	; 0x21cc
   153f8:	mov	r6, #32
   153fc:	mov	r7, r4
   15400:	movt	r5, #3
   15404:	ldr	r0, [r5]
   15408:	ldr	r1, [r0, #20]
   1540c:	ldr	r2, [r0, #24]
   15410:	cmp	r1, r2
   15414:	bcs	15430 <__assert_fail@plt+0x3e28>
   15418:	add	r2, r1, #1
   1541c:	str	r2, [r0, #20]
   15420:	strb	r6, [r1]
   15424:	subs	r7, r7, #1
   15428:	bne	15404 <__assert_fail@plt+0x3dfc>
   1542c:	b	15440 <__assert_fail@plt+0x3e38>
   15430:	mov	r1, #32
   15434:	bl	1156c <__overflow@plt>
   15438:	subs	r7, r7, #1
   1543c:	bne	15404 <__assert_fail@plt+0x3dfc>
   15440:	ldr	r1, [r9, #120]	; 0x78
   15444:	mov	r0, r4
   15448:	str	r4, [r8]
   1544c:	add	r4, r0, r1
   15450:	cmp	r1, #2
   15454:	blt	154d4 <__assert_fail@plt+0x3ecc>
   15458:	movw	r7, #8504	; 0x2138
   1545c:	movw	r5, #8652	; 0x21cc
   15460:	movt	r7, #3
   15464:	movt	r5, #3
   15468:	ldr	r1, [r7, #8]
   1546c:	sdiv	r2, r0, r1
   15470:	mul	r2, r2, r1
   15474:	sub	r2, r2, r0
   15478:	add	r1, r1, r2
   1547c:	add	r6, r1, r0
   15480:	cmp	r4, r6
   15484:	blt	154d4 <__assert_fail@plt+0x3ecc>
   15488:	ldr	r0, [r5]
   1548c:	ldrb	r1, [r7, #1]
   15490:	ldr	r2, [r0, #20]
   15494:	ldr	r3, [r0, #24]
   15498:	cmp	r2, r3
   1549c:	bcs	154c0 <__assert_fail@plt+0x3eb8>
   154a0:	add	r3, r2, #1
   154a4:	str	r3, [r0, #20]
   154a8:	strb	r1, [r2]
   154ac:	sub	r0, r4, r6
   154b0:	cmp	r0, #1
   154b4:	mov	r0, r6
   154b8:	bgt	15468 <__assert_fail@plt+0x3e60>
   154bc:	b	154d4 <__assert_fail@plt+0x3ecc>
   154c0:	bl	1156c <__overflow@plt>
   154c4:	sub	r0, r4, r6
   154c8:	cmp	r0, #1
   154cc:	mov	r0, r6
   154d0:	bgt	15468 <__assert_fail@plt+0x3e60>
   154d4:	cmp	r0, r4
   154d8:	bge	15528 <__assert_fail@plt+0x3f20>
   154dc:	movw	r6, #8652	; 0x21cc
   154e0:	sub	r5, r4, r0
   154e4:	mov	r7, #32
   154e8:	movt	r6, #3
   154ec:	ldr	r0, [r6]
   154f0:	ldr	r1, [r0, #20]
   154f4:	ldr	r2, [r0, #24]
   154f8:	cmp	r1, r2
   154fc:	bcs	15518 <__assert_fail@plt+0x3f10>
   15500:	add	r2, r1, #1
   15504:	str	r2, [r0, #20]
   15508:	strb	r7, [r1]
   1550c:	subs	r5, r5, #1
   15510:	bne	154ec <__assert_fail@plt+0x3ee4>
   15514:	b	15528 <__assert_fail@plt+0x3f20>
   15518:	mov	r1, #32
   1551c:	bl	1156c <__overflow@plt>
   15520:	subs	r5, r5, #1
   15524:	bne	154ec <__assert_fail@plt+0x3ee4>
   15528:	str	r4, [r8]
   1552c:	mov	r7, #0
   15530:	ldrd	r0, [r8, #24]
   15534:	str	r7, [r9, #120]	; 0x78
   15538:	orrs	r0, r0, r1
   1553c:	beq	155e8 <__assert_fail@plt+0x3fe0>
   15540:	movw	r1, #2054	; 0x806
   15544:	mov	r0, #0
   15548:	mov	r2, #5
   1554c:	movt	r1, #2
   15550:	bl	1138c <dcgettext@plt>
   15554:	mov	r3, r0
   15558:	ldrd	r0, [r8, #24]
   1555c:	add	r4, sp, #32
   15560:	mov	r2, #276	; 0x114
   15564:	stm	sp, {r0, r1}
   15568:	mov	r0, r4
   1556c:	mov	r1, #1
   15570:	bl	114f4 <__sprintf_chk@plt>
   15574:	ldr	r5, [r9, #92]	; 0x5c
   15578:	mov	r0, r4
   1557c:	mov	r1, #0
   15580:	bl	16384 <__assert_fail@plt+0x4d7c>
   15584:	ldr	r1, [r9, #84]	; 0x54
   15588:	ldr	r3, [r9, #88]	; 0x58
   1558c:	sub	r0, r5, r0
   15590:	movw	r5, #1973	; 0x7b5
   15594:	ldr	r2, [r9, #36]	; 0x24
   15598:	bic	r0, r0, r0, asr #31
   1559c:	movt	r5, #2
   155a0:	sub	r6, r0, r0, lsr #1
   155a4:	lsr	r0, r0, #1
   155a8:	str	r1, [sp]
   155ac:	stmib	sp, {r0, r5}
   155b0:	movw	r1, #2064	; 0x810
   155b4:	str	r3, [sp, #12]
   155b8:	movw	r3, #1972	; 0x7b4
   155bc:	mov	r0, #1
   155c0:	str	r6, [sp, #16]
   155c4:	str	r5, [sp, #20]
   155c8:	str	r4, [sp, #24]
   155cc:	movt	r1, #2
   155d0:	movt	r3, #2
   155d4:	bl	11518 <__printf_chk@plt>
   155d8:	strb	r7, [r9, #23]
   155dc:	str	r7, [r8]
   155e0:	sub	sp, fp, #24
   155e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155e8:	movw	r1, #2033	; 0x7f1
   155ec:	mov	r0, #0
   155f0:	mov	r2, #5
   155f4:	movt	r1, #2
   155f8:	bl	1138c <dcgettext@plt>
   155fc:	mov	r2, r0
   15600:	mov	r0, #1
   15604:	mov	r1, #0
   15608:	bl	11428 <error@plt>
   1560c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15610:	add	fp, sp, #28
   15614:	sub	sp, sp, #12
   15618:	movw	ip, #8792	; 0x2258
   1561c:	movt	ip, #3
   15620:	ldr	r0, [ip, #4]
   15624:	cmp	r0, #1
   15628:	blt	15924 <__assert_fail@plt+0x431c>
   1562c:	movw	r5, #8504	; 0x2138
   15630:	movw	r4, #8664	; 0x21d8
   15634:	movw	r6, #8652	; 0x21cc
   15638:	mov	r7, #32
   1563c:	movt	r5, #3
   15640:	movt	r4, #3
   15644:	movt	r6, #3
   15648:	ldr	lr, [r5, #24]
   1564c:	ldr	sl, [r4, #40]	; 0x28
   15650:	subs	r8, sl, #1
   15654:	blt	15664 <__assert_fail@plt+0x405c>
   15658:	str	sl, [sp, #8]
   1565c:	mov	sl, lr
   15660:	b	1579c <__assert_fail@plt+0x4194>
   15664:	mov	sl, r8
   15668:	ldr	r1, [r4, #120]	; 0x78
   1566c:	cmp	r1, #1
   15670:	blt	1590c <__assert_fail@plt+0x4304>
   15674:	ldr	r0, [ip]
   15678:	add	r8, r0, r1
   1567c:	beq	156fc <__assert_fail@plt+0x40f4>
   15680:	ldr	r1, [r5, #8]
   15684:	sdiv	r2, r0, r1
   15688:	mul	r2, r2, r1
   1568c:	sub	r2, r2, r0
   15690:	add	r1, r1, r2
   15694:	add	r4, r1, r0
   15698:	cmp	r8, r4
   1569c:	blt	156fc <__assert_fail@plt+0x40f4>
   156a0:	ldr	r0, [r6]
   156a4:	ldrb	r1, [r5, #1]
   156a8:	ldr	r2, [r0, #20]
   156ac:	ldr	r3, [r0, #24]
   156b0:	cmp	r2, r3
   156b4:	bcs	156d8 <__assert_fail@plt+0x40d0>
   156b8:	add	r3, r2, #1
   156bc:	str	r3, [r0, #20]
   156c0:	strb	r1, [r2]
   156c4:	sub	r0, r8, r4
   156c8:	cmp	r0, #1
   156cc:	mov	r0, r4
   156d0:	bgt	15680 <__assert_fail@plt+0x4078>
   156d4:	b	156fc <__assert_fail@plt+0x40f4>
   156d8:	mov	r9, lr
   156dc:	bl	1156c <__overflow@plt>
   156e0:	movw	ip, #8792	; 0x2258
   156e4:	mov	lr, r9
   156e8:	movt	ip, #3
   156ec:	sub	r0, r8, r4
   156f0:	cmp	r0, #1
   156f4:	mov	r0, r4
   156f8:	bgt	15680 <__assert_fail@plt+0x4078>
   156fc:	cmp	r0, r8
   15700:	bge	15754 <__assert_fail@plt+0x414c>
   15704:	sub	r4, r8, r0
   15708:	ldr	r0, [r6]
   1570c:	ldr	r1, [r0, #20]
   15710:	ldr	r2, [r0, #24]
   15714:	cmp	r1, r2
   15718:	bcs	15734 <__assert_fail@plt+0x412c>
   1571c:	add	r2, r1, #1
   15720:	str	r2, [r0, #20]
   15724:	strb	r7, [r1]
   15728:	subs	r4, r4, #1
   1572c:	bne	15708 <__assert_fail@plt+0x4100>
   15730:	b	15754 <__assert_fail@plt+0x414c>
   15734:	mov	r1, #32
   15738:	mov	r9, lr
   1573c:	bl	1156c <__overflow@plt>
   15740:	movw	ip, #8792	; 0x2258
   15744:	mov	lr, r9
   15748:	movt	ip, #3
   1574c:	subs	r4, r4, #1
   15750:	bne	15708 <__assert_fail@plt+0x4100>
   15754:	movw	r4, #8664	; 0x21d8
   15758:	mov	r0, #0
   1575c:	str	r8, [ip]
   15760:	movt	r4, #3
   15764:	str	r0, [r4, #120]	; 0x78
   15768:	ldr	r0, [ip, #4]
   1576c:	subs	r0, r0, #1
   15770:	str	r0, [ip, #4]
   15774:	bgt	15650 <__assert_fail@plt+0x4048>
   15778:	b	1591c <__assert_fail@plt+0x4314>
   1577c:	mov	r4, lr
   15780:	bl	1156c <__overflow@plt>
   15784:	movw	ip, #8792	; 0x2258
   15788:	mov	lr, r4
   1578c:	movw	r4, #8664	; 0x21d8
   15790:	movt	r4, #3
   15794:	movt	ip, #3
   15798:	b	158d0 <__assert_fail@plt+0x42c8>
   1579c:	mov	r0, r4
   157a0:	ldrb	r1, [sl]
   157a4:	ldr	r2, [r0, #120]!	; 0x78
   157a8:	cmp	r1, #32
   157ac:	beq	158d8 <__assert_fail@plt+0x42d0>
   157b0:	cmp	r2, #1
   157b4:	blt	158b0 <__assert_fail@plt+0x42a8>
   157b8:	ldr	r0, [ip]
   157bc:	add	r9, r0, r2
   157c0:	beq	15840 <__assert_fail@plt+0x4238>
   157c4:	ldr	r1, [r5, #8]
   157c8:	sdiv	r2, r0, r1
   157cc:	mul	r2, r2, r1
   157d0:	sub	r2, r2, r0
   157d4:	add	r1, r1, r2
   157d8:	add	r4, r1, r0
   157dc:	cmp	r9, r4
   157e0:	blt	15840 <__assert_fail@plt+0x4238>
   157e4:	ldr	r0, [r6]
   157e8:	ldrb	r1, [r5, #1]
   157ec:	ldr	r2, [r0, #20]
   157f0:	ldr	r3, [r0, #24]
   157f4:	cmp	r2, r3
   157f8:	bcs	1581c <__assert_fail@plt+0x4214>
   157fc:	add	r3, r2, #1
   15800:	str	r3, [r0, #20]
   15804:	strb	r1, [r2]
   15808:	sub	r0, r9, r4
   1580c:	cmp	r0, #1
   15810:	mov	r0, r4
   15814:	bgt	157c4 <__assert_fail@plt+0x41bc>
   15818:	b	15840 <__assert_fail@plt+0x4238>
   1581c:	str	lr, [sp, #4]
   15820:	bl	1156c <__overflow@plt>
   15824:	ldr	lr, [sp, #4]
   15828:	movw	ip, #8792	; 0x2258
   1582c:	movt	ip, #3
   15830:	sub	r0, r9, r4
   15834:	cmp	r0, #1
   15838:	mov	r0, r4
   1583c:	bgt	157c4 <__assert_fail@plt+0x41bc>
   15840:	cmp	r0, r9
   15844:	bge	15898 <__assert_fail@plt+0x4290>
   15848:	sub	r4, r9, r0
   1584c:	ldr	r0, [r6]
   15850:	ldr	r1, [r0, #20]
   15854:	ldr	r2, [r0, #24]
   15858:	cmp	r1, r2
   1585c:	bcs	15878 <__assert_fail@plt+0x4270>
   15860:	add	r2, r1, #1
   15864:	str	r2, [r0, #20]
   15868:	strb	r7, [r1]
   1586c:	subs	r4, r4, #1
   15870:	bne	1584c <__assert_fail@plt+0x4244>
   15874:	b	15898 <__assert_fail@plt+0x4290>
   15878:	mov	r1, #32
   1587c:	str	lr, [sp, #4]
   15880:	bl	1156c <__overflow@plt>
   15884:	ldr	lr, [sp, #4]
   15888:	movw	ip, #8792	; 0x2258
   1588c:	movt	ip, #3
   15890:	subs	r4, r4, #1
   15894:	bne	1584c <__assert_fail@plt+0x4244>
   15898:	movw	r4, #8664	; 0x21d8
   1589c:	mov	r0, #0
   158a0:	str	r9, [ip]
   158a4:	movt	r4, #3
   158a8:	str	r0, [r4, #120]	; 0x78
   158ac:	ldrb	r1, [sl]
   158b0:	ldr	r0, [r6]
   158b4:	ldr	r2, [r0, #20]
   158b8:	ldr	r3, [r0, #24]
   158bc:	cmp	r2, r3
   158c0:	bcs	1577c <__assert_fail@plt+0x4174>
   158c4:	add	r3, r2, #1
   158c8:	str	r3, [r0, #20]
   158cc:	strb	r1, [r2]
   158d0:	ldr	r2, [ip]
   158d4:	mov	r0, ip
   158d8:	add	r1, r2, #1
   158dc:	add	sl, sl, #1
   158e0:	cmp	r8, #0
   158e4:	str	r1, [r0]
   158e8:	sub	r0, r8, #1
   158ec:	mov	r8, r0
   158f0:	bgt	1579c <__assert_fail@plt+0x4194>
   158f4:	ldr	r0, [sp, #8]
   158f8:	mvn	sl, #0
   158fc:	add	lr, lr, r0
   15900:	ldr	r1, [r4, #120]	; 0x78
   15904:	cmp	r1, #1
   15908:	bge	15674 <__assert_fail@plt+0x406c>
   1590c:	ldr	r0, [ip, #4]
   15910:	subs	r0, r0, #1
   15914:	str	r0, [ip, #4]
   15918:	bgt	15650 <__assert_fail@plt+0x4048>
   1591c:	sub	sp, fp, #28
   15920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15924:	movw	r9, #8664	; 0x21d8
   15928:	movt	r9, #3
   1592c:	ldr	r1, [r9, #120]	; 0x78
   15930:	cmp	r1, #1
   15934:	blt	1591c <__assert_fail@plt+0x4314>
   15938:	movw	r8, #8792	; 0x2258
   1593c:	cmp	r1, #1
   15940:	movt	r8, #3
   15944:	ldr	r0, [r8]
   15948:	add	r6, r0, r1
   1594c:	beq	159cc <__assert_fail@plt+0x43c4>
   15950:	movw	r7, #8504	; 0x2138
   15954:	movw	r5, #8652	; 0x21cc
   15958:	movt	r7, #3
   1595c:	movt	r5, #3
   15960:	ldr	r1, [r7, #8]
   15964:	sdiv	r2, r0, r1
   15968:	mul	r2, r2, r1
   1596c:	sub	r2, r2, r0
   15970:	add	r1, r1, r2
   15974:	add	r4, r1, r0
   15978:	cmp	r6, r4
   1597c:	blt	159cc <__assert_fail@plt+0x43c4>
   15980:	ldr	r0, [r5]
   15984:	ldrb	r1, [r7, #1]
   15988:	ldr	r2, [r0, #20]
   1598c:	ldr	r3, [r0, #24]
   15990:	cmp	r2, r3
   15994:	bcs	159b8 <__assert_fail@plt+0x43b0>
   15998:	add	r3, r2, #1
   1599c:	str	r3, [r0, #20]
   159a0:	strb	r1, [r2]
   159a4:	sub	r0, r6, r4
   159a8:	cmp	r0, #1
   159ac:	mov	r0, r4
   159b0:	bgt	15960 <__assert_fail@plt+0x4358>
   159b4:	b	159cc <__assert_fail@plt+0x43c4>
   159b8:	bl	1156c <__overflow@plt>
   159bc:	sub	r0, r6, r4
   159c0:	cmp	r0, #1
   159c4:	mov	r0, r4
   159c8:	bgt	15960 <__assert_fail@plt+0x4358>
   159cc:	cmp	r0, r6
   159d0:	bge	15a20 <__assert_fail@plt+0x4418>
   159d4:	movw	r5, #8652	; 0x21cc
   159d8:	sub	r4, r6, r0
   159dc:	mov	r7, #32
   159e0:	movt	r5, #3
   159e4:	ldr	r0, [r5]
   159e8:	ldr	r1, [r0, #20]
   159ec:	ldr	r2, [r0, #24]
   159f0:	cmp	r1, r2
   159f4:	bcs	15a10 <__assert_fail@plt+0x4408>
   159f8:	add	r2, r1, #1
   159fc:	str	r2, [r0, #20]
   15a00:	strb	r7, [r1]
   15a04:	subs	r4, r4, #1
   15a08:	bne	159e4 <__assert_fail@plt+0x43dc>
   15a0c:	b	15a20 <__assert_fail@plt+0x4418>
   15a10:	mov	r1, #32
   15a14:	bl	1156c <__overflow@plt>
   15a18:	subs	r4, r4, #1
   15a1c:	bne	159e4 <__assert_fail@plt+0x43dc>
   15a20:	mov	r0, #0
   15a24:	str	r6, [r8]
   15a28:	str	r0, [r9, #120]	; 0x78
   15a2c:	sub	sp, fp, #28
   15a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a38:	add	fp, sp, #24
   15a3c:	sub	sp, sp, #8
   15a40:	mov	r6, r0
   15a44:	movw	r0, #8504	; 0x2138
   15a48:	movw	r5, #8664	; 0x21d8
   15a4c:	movt	r0, #3
   15a50:	movt	r5, #3
   15a54:	ldrb	r1, [r0]
   15a58:	ldr	r0, [r0, #4]
   15a5c:	ldr	r8, [r5, #68]	; 0x44
   15a60:	cmp	r1, r6
   15a64:	movne	r0, #8
   15a68:	cmp	r6, #9
   15a6c:	cmpne	r1, r6
   15a70:	bne	15ad4 <__assert_fail@plt+0x44cc>
   15a74:	movw	r1, #8792	; 0x2258
   15a78:	movt	r1, #3
   15a7c:	ldr	r7, [r1, #8]
   15a80:	sdiv	r1, r7, r0
   15a84:	mul	r1, r1, r0
   15a88:	sub	r1, r1, r7
   15a8c:	add	r4, r0, r1
   15a90:	ldrb	r0, [r5, #5]
   15a94:	cmp	r0, #1
   15a98:	bne	15b3c <__assert_fail@plt+0x4534>
   15a9c:	cmp	r4, #0
   15aa0:	beq	15ba4 <__assert_fail@plt+0x459c>
   15aa4:	mov	r0, r8
   15aa8:	mov	r1, #32
   15aac:	mov	r2, r4
   15ab0:	bl	1150c <memset@plt>
   15ab4:	mov	r0, r4
   15ab8:	mov	r1, #0
   15abc:	cmn	r4, #1
   15ac0:	bgt	15bdc <__assert_fail@plt+0x45d4>
   15ac4:	cmp	r7, #0
   15ac8:	bne	15bdc <__assert_fail@plt+0x45d4>
   15acc:	mov	r0, #0
   15ad0:	b	15bec <__assert_fail@plt+0x45e4>
   15ad4:	bl	114a0 <__ctype_b_loc@plt>
   15ad8:	ldr	r0, [r0]
   15adc:	add	r0, r0, r6, lsl #1
   15ae0:	ldrb	r0, [r0, #1]
   15ae4:	tst	r0, #64	; 0x40
   15ae8:	bne	15b54 <__assert_fail@plt+0x454c>
   15aec:	ldrb	r0, [r5, #16]
   15af0:	cmp	r0, #1
   15af4:	bne	15b74 <__assert_fail@plt+0x456c>
   15af8:	movw	r3, #2085	; 0x825
   15afc:	mov	r0, #92	; 0x5c
   15b00:	mov	r1, #1
   15b04:	mov	r2, #4
   15b08:	mov	r4, #4
   15b0c:	strb	r0, [r8]
   15b10:	add	r0, sp, #4
   15b14:	movt	r3, #2
   15b18:	str	r6, [sp]
   15b1c:	bl	114f4 <__sprintf_chk@plt>
   15b20:	ldrb	r0, [sp, #4]
   15b24:	strb	r0, [r8, #1]
   15b28:	ldrb	r0, [sp, #5]
   15b2c:	strb	r0, [r8, #2]
   15b30:	ldrb	r0, [sp, #6]
   15b34:	strb	r0, [r8, #3]
   15b38:	b	15b5c <__assert_fail@plt+0x4554>
   15b3c:	strb	r6, [r8]
   15b40:	mov	r0, #1
   15b44:	mov	r1, #0
   15b48:	cmn	r4, #1
   15b4c:	ble	15ac4 <__assert_fail@plt+0x44bc>
   15b50:	b	15bdc <__assert_fail@plt+0x45d4>
   15b54:	mov	r4, #1
   15b58:	strb	r6, [r8]
   15b5c:	movw	r0, #8792	; 0x2258
   15b60:	movt	r0, #3
   15b64:	ldr	r7, [r0, #8]
   15b68:	mov	r0, r4
   15b6c:	add	r1, r7, r4
   15b70:	b	15bec <__assert_fail@plt+0x45e4>
   15b74:	ldrb	r0, [r5, #3]
   15b78:	cmp	r0, #1
   15b7c:	bne	15bb0 <__assert_fail@plt+0x45a8>
   15b80:	sxtb	r0, r6
   15b84:	cmp	r0, #0
   15b88:	blt	15af8 <__assert_fail@plt+0x44f0>
   15b8c:	mov	r0, #94	; 0x5e
   15b90:	mov	r4, #2
   15b94:	strb	r0, [r8]
   15b98:	eor	r0, r6, #64	; 0x40
   15b9c:	strb	r0, [r8, #1]
   15ba0:	b	15b5c <__assert_fail@plt+0x4554>
   15ba4:	mov	r4, #0
   15ba8:	mov	r0, #0
   15bac:	b	15b6c <__assert_fail@plt+0x4564>
   15bb0:	movw	r0, #8792	; 0x2258
   15bb4:	strb	r6, [r8]
   15bb8:	mov	r4, #0
   15bbc:	cmp	r6, #8
   15bc0:	movt	r0, #3
   15bc4:	mvneq	r4, #0
   15bc8:	ldr	r7, [r0, #8]
   15bcc:	mov	r0, #1
   15bd0:	mov	r1, #0
   15bd4:	cmn	r4, #1
   15bd8:	ble	15ac4 <__assert_fail@plt+0x44bc>
   15bdc:	rsb	r2, r4, #0
   15be0:	cmp	r7, r2
   15be4:	cmple	r4, #0
   15be8:	addge	r1, r7, r4
   15bec:	movw	r2, #8792	; 0x2258
   15bf0:	movt	r2, #3
   15bf4:	str	r1, [r2, #8]
   15bf8:	sub	sp, fp, #24
   15bfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c04:	add	fp, sp, #24
   15c08:	sub	sp, sp, #8
   15c0c:	movw	r6, #8504	; 0x2138
   15c10:	movw	r8, #8664	; 0x21d8
   15c14:	mov	r4, r0
   15c18:	movw	r3, #2090	; 0x82a
   15c1c:	movt	r8, #3
   15c20:	movt	r6, #3
   15c24:	movt	r3, #2
   15c28:	ldr	r1, [r6, #16]
   15c2c:	ldr	r2, [r8, #48]	; 0x30
   15c30:	ldr	r0, [r8, #64]	; 0x40
   15c34:	stm	sp, {r1, r2}
   15c38:	mov	r1, #1
   15c3c:	mvn	r2, #0
   15c40:	bl	114f4 <__sprintf_chk@plt>
   15c44:	ldr	r1, [r8, #48]	; 0x30
   15c48:	ldr	r7, [r6, #16]
   15c4c:	add	r1, r1, #1
   15c50:	cmp	r7, #1
   15c54:	str	r1, [r8, #48]	; 0x30
   15c58:	blt	15c78 <__assert_fail@plt+0x4670>
   15c5c:	ldr	r1, [r8, #64]	; 0x40
   15c60:	add	r5, r1, r0
   15c64:	ldrb	r0, [r5, -r7]
   15c68:	ldr	r1, [r4, #16]
   15c6c:	blx	r1
   15c70:	subs	r7, r7, #1
   15c74:	bgt	15c64 <__assert_fail@plt+0x465c>
   15c78:	ldr	r0, [r6, #32]
   15c7c:	cmp	r0, #2
   15c80:	blt	15cc8 <__assert_fail@plt+0x46c0>
   15c84:	ldrb	r0, [r6, #2]
   15c88:	cmp	r0, #9
   15c8c:	bne	15d0c <__assert_fail@plt+0x4704>
   15c90:	ldr	r0, [r6, #16]
   15c94:	ldr	r1, [r8, #56]	; 0x38
   15c98:	sub	r2, r1, r0
   15c9c:	cmp	r2, #1
   15ca0:	blt	15d14 <__assert_fail@plt+0x470c>
   15ca4:	add	r1, r1, #1
   15ca8:	sub	r6, r1, r0
   15cac:	ldr	r1, [r4, #16]
   15cb0:	mov	r0, #32
   15cb4:	blx	r1
   15cb8:	sub	r6, r6, #1
   15cbc:	cmp	r6, #1
   15cc0:	bgt	15cac <__assert_fail@plt+0x46a4>
   15cc4:	b	15d14 <__assert_fail@plt+0x470c>
   15cc8:	ldrb	r0, [r6, #2]
   15ccc:	ldr	r1, [r4, #16]
   15cd0:	blx	r1
   15cd4:	ldrb	r0, [r6, #2]
   15cd8:	cmp	r0, #9
   15cdc:	bne	15d14 <__assert_fail@plt+0x470c>
   15ce0:	movw	r0, #8792	; 0x2258
   15ce4:	ldr	r2, [r6, #8]
   15ce8:	movt	r0, #3
   15cec:	ldr	r1, [r0]
   15cf0:	sdiv	r7, r1, r2
   15cf4:	add	r3, r2, r1
   15cf8:	mul	r2, r7, r2
   15cfc:	sub	r1, r2, r1
   15d00:	add	r1, r3, r1
   15d04:	str	r1, [r0]
   15d08:	b	15d14 <__assert_fail@plt+0x470c>
   15d0c:	ldr	r1, [r4, #16]
   15d10:	blx	r1
   15d14:	ldrb	r0, [r8, #17]
   15d18:	cmp	r0, #1
   15d1c:	ldrbeq	r0, [r8, #9]
   15d20:	cmpeq	r0, #0
   15d24:	beq	15d30 <__assert_fail@plt+0x4728>
   15d28:	sub	sp, fp, #24
   15d2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d30:	movw	r1, #8792	; 0x2258
   15d34:	ldr	r0, [r8, #56]	; 0x38
   15d38:	movt	r1, #3
   15d3c:	ldr	r2, [r1, #8]
   15d40:	add	r0, r2, r0
   15d44:	str	r0, [r1, #8]
   15d48:	sub	sp, fp, #24
   15d4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d50:	push	{r4, r5, fp, lr}
   15d54:	add	fp, sp, #8
   15d58:	ldr	r5, [r0]
   15d5c:	mov	r4, r0
   15d60:	ldmib	r5, {r0, r1}
   15d64:	cmp	r0, r1
   15d68:	bcs	15d94 <__assert_fail@plt+0x478c>
   15d6c:	add	r1, r0, #1
   15d70:	str	r1, [r5, #4]
   15d74:	ldrb	r0, [r0]
   15d78:	cmn	r0, #1
   15d7c:	beq	15da4 <__assert_fail@plt+0x479c>
   15d80:	cmp	r0, #10
   15d84:	popeq	{r4, r5, fp, pc}
   15d88:	cmp	r0, #12
   15d8c:	bne	15d60 <__assert_fail@plt+0x4758>
   15d90:	b	15db0 <__assert_fail@plt+0x47a8>
   15d94:	mov	r0, r5
   15d98:	bl	11560 <__uflow@plt>
   15d9c:	cmn	r0, #1
   15da0:	bne	15d80 <__assert_fail@plt+0x4778>
   15da4:	mov	r0, r4
   15da8:	pop	{r4, r5, fp, lr}
   15dac:	b	147d0 <__assert_fail@plt+0x31c8>
   15db0:	ldmib	r5, {r0, r1}
   15db4:	cmp	r0, r1
   15db8:	bcs	15e58 <__assert_fail@plt+0x4850>
   15dbc:	add	r1, r0, #1
   15dc0:	str	r1, [r5, #4]
   15dc4:	ldrb	r0, [r0]
   15dc8:	cmp	r0, #10
   15dcc:	beq	15dd8 <__assert_fail@plt+0x47d0>
   15dd0:	mov	r1, r5
   15dd4:	bl	114dc <ungetc@plt>
   15dd8:	movw	r0, #8664	; 0x21d8
   15ddc:	movt	r0, #3
   15de0:	ldrb	r1, [r0, #15]
   15de4:	cmp	r1, #1
   15de8:	moveq	r1, #1
   15dec:	strbeq	r1, [r0, #25]
   15df0:	ldrb	r1, [r0, #9]
   15df4:	cmp	r1, #0
   15df8:	beq	15e08 <__assert_fail@plt+0x4800>
   15dfc:	mov	r1, #2
   15e00:	str	r1, [r4, #8]
   15e04:	b	15e40 <__assert_fail@plt+0x4838>
   15e08:	movw	r1, #8504	; 0x2138
   15e0c:	movt	r1, #3
   15e10:	ldr	r1, [r1, #32]
   15e14:	cmp	r1, #0
   15e18:	beq	15e40 <__assert_fail@plt+0x4838>
   15e1c:	ldrb	r3, [r0, #1]
   15e20:	mov	r2, #1
   15e24:	cmp	r3, #0
   15e28:	ldr	r3, [r0, #76]	; 0x4c
   15e2c:	movwne	r2, #2
   15e30:	add	r3, r3, #8
   15e34:	str	r2, [r3], #40	; 0x28
   15e38:	subs	r1, r1, #1
   15e3c:	bne	15e34 <__assert_fail@plt+0x482c>
   15e40:	mov	r1, #0
   15e44:	str	r1, [r4, #28]
   15e48:	ldr	r1, [r0, #80]	; 0x50
   15e4c:	sub	r1, r1, #1
   15e50:	str	r1, [r0, #80]	; 0x50
   15e54:	pop	{r4, r5, fp, pc}
   15e58:	mov	r0, r5
   15e5c:	bl	11560 <__uflow@plt>
   15e60:	cmp	r0, #10
   15e64:	bne	15dd0 <__assert_fail@plt+0x47c8>
   15e68:	b	15dd8 <__assert_fail@plt+0x47d0>
   15e6c:	movw	r1, #8832	; 0x2280
   15e70:	movt	r1, #3
   15e74:	str	r0, [r1, #4]
   15e78:	bx	lr
   15e7c:	movw	r1, #8832	; 0x2280
   15e80:	movt	r1, #3
   15e84:	strb	r0, [r1]
   15e88:	bx	lr
   15e8c:	push	{r4, r5, r6, sl, fp, lr}
   15e90:	add	fp, sp, #16
   15e94:	sub	sp, sp, #8
   15e98:	movw	r0, #8652	; 0x21cc
   15e9c:	movt	r0, #3
   15ea0:	ldr	r0, [r0]
   15ea4:	bl	1eee0 <__assert_fail@plt+0xd8d8>
   15ea8:	cmp	r0, #0
   15eac:	beq	15ed4 <__assert_fail@plt+0x48cc>
   15eb0:	movw	r5, #8832	; 0x2280
   15eb4:	movt	r5, #3
   15eb8:	ldrb	r0, [r5]
   15ebc:	cmp	r0, #0
   15ec0:	beq	15f00 <__assert_fail@plt+0x48f8>
   15ec4:	bl	114e8 <__errno_location@plt>
   15ec8:	ldr	r0, [r0]
   15ecc:	cmp	r0, #32
   15ed0:	bne	15f00 <__assert_fail@plt+0x48f8>
   15ed4:	movw	r0, #8640	; 0x21c0
   15ed8:	movt	r0, #3
   15edc:	ldr	r0, [r0]
   15ee0:	bl	1eee0 <__assert_fail@plt+0xd8d8>
   15ee4:	cmp	r0, #0
   15ee8:	subeq	sp, fp, #16
   15eec:	popeq	{r4, r5, r6, sl, fp, pc}
   15ef0:	movw	r0, #8556	; 0x216c
   15ef4:	movt	r0, #3
   15ef8:	ldr	r0, [r0]
   15efc:	bl	11350 <_exit@plt>
   15f00:	movw	r1, #3095	; 0xc17
   15f04:	mov	r0, #0
   15f08:	mov	r2, #5
   15f0c:	movt	r1, #2
   15f10:	bl	1138c <dcgettext@plt>
   15f14:	ldr	r6, [r5, #4]
   15f18:	mov	r4, r0
   15f1c:	bl	114e8 <__errno_location@plt>
   15f20:	ldr	r5, [r0]
   15f24:	cmp	r6, #0
   15f28:	bne	15f44 <__assert_fail@plt+0x493c>
   15f2c:	movw	r2, #3111	; 0xc27
   15f30:	mov	r0, #0
   15f34:	mov	r1, r5
   15f38:	mov	r3, r4
   15f3c:	movt	r2, #2
   15f40:	b	15f64 <__assert_fail@plt+0x495c>
   15f44:	mov	r0, r6
   15f48:	bl	1a0bc <__assert_fail@plt+0x8ab4>
   15f4c:	movw	r2, #3107	; 0xc23
   15f50:	mov	r3, r0
   15f54:	str	r4, [sp]
   15f58:	mov	r0, #0
   15f5c:	mov	r1, r5
   15f60:	movt	r2, #2
   15f64:	bl	11428 <error@plt>
   15f68:	movw	r0, #8556	; 0x216c
   15f6c:	movt	r0, #3
   15f70:	ldr	r0, [r0]
   15f74:	bl	11350 <_exit@plt>
   15f78:	b	11308 <posix_fadvise64@plt>
   15f7c:	cmp	r0, #0
   15f80:	bxeq	lr
   15f84:	push	{r4, sl, fp, lr}
   15f88:	add	fp, sp, #8
   15f8c:	sub	sp, sp, #16
   15f90:	mov	r4, r1
   15f94:	bl	11524 <fileno@plt>
   15f98:	mov	r1, #0
   15f9c:	mov	r2, #0
   15fa0:	mov	r3, #0
   15fa4:	str	r1, [sp]
   15fa8:	stmib	sp, {r1, r4}
   15fac:	bl	11308 <posix_fadvise64@plt>
   15fb0:	sub	sp, fp, #8
   15fb4:	pop	{r4, sl, fp, pc}
   15fb8:	push	{r4, r5, r6, sl, fp, lr}
   15fbc:	add	fp, sp, #16
   15fc0:	sub	sp, sp, #8
   15fc4:	mov	r4, r0
   15fc8:	bl	11524 <fileno@plt>
   15fcc:	cmn	r0, #1
   15fd0:	ble	16044 <__assert_fail@plt+0x4a3c>
   15fd4:	mov	r0, r4
   15fd8:	bl	11464 <__freading@plt>
   15fdc:	cmp	r0, #0
   15fe0:	beq	1600c <__assert_fail@plt+0x4a04>
   15fe4:	mov	r0, r4
   15fe8:	bl	11524 <fileno@plt>
   15fec:	mov	r1, #1
   15ff0:	mov	r2, #0
   15ff4:	mov	r3, #0
   15ff8:	str	r1, [sp]
   15ffc:	bl	113f8 <lseek64@plt>
   16000:	and	r0, r0, r1
   16004:	cmn	r0, #1
   16008:	beq	16044 <__assert_fail@plt+0x4a3c>
   1600c:	mov	r0, r4
   16010:	bl	16054 <__assert_fail@plt+0x4a4c>
   16014:	cmp	r0, #0
   16018:	beq	16044 <__assert_fail@plt+0x4a3c>
   1601c:	bl	114e8 <__errno_location@plt>
   16020:	ldr	r6, [r0]
   16024:	mov	r5, r0
   16028:	mov	r0, r4
   1602c:	bl	1153c <fclose@plt>
   16030:	cmp	r6, #0
   16034:	strne	r6, [r5]
   16038:	mvnne	r0, #0
   1603c:	sub	sp, fp, #16
   16040:	pop	{r4, r5, r6, sl, fp, pc}
   16044:	mov	r0, r4
   16048:	sub	sp, fp, #16
   1604c:	pop	{r4, r5, r6, sl, fp, lr}
   16050:	b	1153c <fclose@plt>
   16054:	push	{r4, sl, fp, lr}
   16058:	add	fp, sp, #8
   1605c:	sub	sp, sp, #8
   16060:	mov	r4, r0
   16064:	cmp	r0, #0
   16068:	beq	16084 <__assert_fail@plt+0x4a7c>
   1606c:	mov	r0, r4
   16070:	bl	11464 <__freading@plt>
   16074:	cmp	r0, #0
   16078:	ldrbne	r0, [r4, #1]
   1607c:	tstne	r0, #1
   16080:	bne	16094 <__assert_fail@plt+0x4a8c>
   16084:	mov	r0, r4
   16088:	sub	sp, fp, #8
   1608c:	pop	{r4, sl, fp, lr}
   16090:	b	11320 <fflush@plt>
   16094:	mov	r0, #1
   16098:	mov	r2, #0
   1609c:	mov	r3, #0
   160a0:	str	r0, [sp]
   160a4:	mov	r0, r4
   160a8:	bl	16198 <__assert_fail@plt+0x4b90>
   160ac:	mov	r0, r4
   160b0:	sub	sp, fp, #8
   160b4:	pop	{r4, sl, fp, lr}
   160b8:	b	11320 <fflush@plt>
   160bc:	push	{r4, r5, r6, r7, fp, lr}
   160c0:	add	fp, sp, #16
   160c4:	mov	r5, r1
   160c8:	bl	115c0 <fopen64@plt>
   160cc:	mov	r4, #0
   160d0:	cmp	r0, #0
   160d4:	beq	16124 <__assert_fail@plt+0x4b1c>
   160d8:	mov	r6, r0
   160dc:	bl	11524 <fileno@plt>
   160e0:	cmp	r0, #2
   160e4:	movhi	r0, r6
   160e8:	pophi	{r4, r5, r6, r7, fp, pc}
   160ec:	bl	1ae1c <__assert_fail@plt+0x9814>
   160f0:	cmn	r0, #1
   160f4:	ble	16150 <__assert_fail@plt+0x4b48>
   160f8:	mov	r7, r0
   160fc:	mov	r0, r6
   16100:	bl	15fb8 <__assert_fail@plt+0x49b0>
   16104:	cmp	r0, #0
   16108:	bne	1612c <__assert_fail@plt+0x4b24>
   1610c:	mov	r0, r7
   16110:	mov	r1, r5
   16114:	bl	112b4 <fdopen@plt>
   16118:	mov	r4, r0
   1611c:	cmp	r0, #0
   16120:	beq	1612c <__assert_fail@plt+0x4b24>
   16124:	mov	r0, r4
   16128:	pop	{r4, r5, r6, r7, fp, pc}
   1612c:	bl	114e8 <__errno_location@plt>
   16130:	ldr	r5, [r0]
   16134:	mov	r4, r0
   16138:	mov	r0, r7
   1613c:	bl	115fc <close@plt>
   16140:	str	r5, [r4]
   16144:	mov	r4, #0
   16148:	mov	r0, r4
   1614c:	pop	{r4, r5, r6, r7, fp, pc}
   16150:	bl	114e8 <__errno_location@plt>
   16154:	ldr	r7, [r0]
   16158:	mov	r5, r0
   1615c:	mov	r0, r6
   16160:	bl	15fb8 <__assert_fail@plt+0x49b0>
   16164:	mov	r0, r4
   16168:	str	r7, [r5]
   1616c:	pop	{r4, r5, r6, r7, fp, pc}
   16170:	push	{r4, r5, r6, sl, fp, lr}
   16174:	add	fp, sp, #16
   16178:	mov	r4, r0
   1617c:	bl	114e8 <__errno_location@plt>
   16180:	ldr	r6, [r0]
   16184:	mov	r5, r0
   16188:	mov	r0, r4
   1618c:	bl	11338 <free@plt>
   16190:	str	r6, [r5]
   16194:	pop	{r4, r5, r6, sl, fp, pc}
   16198:	push	{r4, r5, r6, r7, fp, lr}
   1619c:	add	fp, sp, #16
   161a0:	sub	sp, sp, #8
   161a4:	mov	r4, r0
   161a8:	ldr	r0, [r0, #4]
   161ac:	mov	r5, r3
   161b0:	mov	r6, r2
   161b4:	ldr	r1, [r4, #8]
   161b8:	cmp	r1, r0
   161bc:	bne	161d8 <__assert_fail@plt+0x4bd0>
   161c0:	ldrd	r0, [r4, #16]
   161c4:	cmp	r1, r0
   161c8:	bne	161d8 <__assert_fail@plt+0x4bd0>
   161cc:	ldr	r0, [r4, #36]	; 0x24
   161d0:	cmp	r0, #0
   161d4:	beq	161f0 <__assert_fail@plt+0x4be8>
   161d8:	mov	r0, r4
   161dc:	mov	r2, r6
   161e0:	mov	r3, r5
   161e4:	sub	sp, fp, #16
   161e8:	pop	{r4, r5, r6, r7, fp, lr}
   161ec:	b	11548 <fseeko64@plt>
   161f0:	ldr	r7, [fp, #8]
   161f4:	mov	r0, r4
   161f8:	bl	11524 <fileno@plt>
   161fc:	mov	r2, r6
   16200:	mov	r3, r5
   16204:	str	r7, [sp]
   16208:	bl	113f8 <lseek64@plt>
   1620c:	and	r2, r0, r1
   16210:	cmn	r2, #1
   16214:	mvneq	r0, #0
   16218:	subeq	sp, fp, #16
   1621c:	popeq	{r4, r5, r6, r7, fp, pc}
   16220:	strd	r0, [r4, #80]	; 0x50
   16224:	ldr	r0, [r4]
   16228:	bic	r0, r0, #16
   1622c:	str	r0, [r4]
   16230:	mov	r0, #0
   16234:	sub	sp, fp, #16
   16238:	pop	{r4, r5, r6, r7, fp, pc}
   1623c:	mov	r1, r0
   16240:	mov	r0, #0
   16244:	b	11344 <clock_gettime@plt>
   16248:	push	{fp, lr}
   1624c:	mov	fp, sp
   16250:	mov	r1, r0
   16254:	mov	r0, #0
   16258:	bl	11344 <clock_gettime@plt>
   1625c:	pop	{fp, pc}
   16260:	push	{r4, sl, fp, lr}
   16264:	add	fp, sp, #8
   16268:	sub	sp, sp, #264	; 0x108
   1626c:	add	r1, sp, #7
   16270:	movw	r2, #257	; 0x101
   16274:	bl	1a45c <__assert_fail@plt+0x8e54>
   16278:	mov	r4, #0
   1627c:	cmp	r0, #0
   16280:	bne	162b8 <__assert_fail@plt+0x4cb0>
   16284:	movw	r1, #3114	; 0xc2a
   16288:	add	r0, sp, #7
   1628c:	movt	r1, #2
   16290:	bl	112f0 <strcmp@plt>
   16294:	cmp	r0, #0
   16298:	beq	162b8 <__assert_fail@plt+0x4cb0>
   1629c:	movw	r1, #3116	; 0xc2c
   162a0:	add	r0, sp, #7
   162a4:	movt	r1, #2
   162a8:	bl	112f0 <strcmp@plt>
   162ac:	mov	r4, r0
   162b0:	cmp	r0, #0
   162b4:	movwne	r4, #1
   162b8:	mov	r0, r4
   162bc:	sub	sp, fp, #8
   162c0:	pop	{r4, sl, fp, pc}
   162c4:	push	{r4, r5, r6, sl, fp, lr}
   162c8:	add	fp, sp, #16
   162cc:	mov	r5, r0
   162d0:	mov	r0, #0
   162d4:	mov	r4, r1
   162d8:	add	r6, r2, #19
   162dc:	cmp	r1, #0
   162e0:	strb	r0, [r2, #20]
   162e4:	blt	16334 <__assert_fail@plt+0x4d2c>
   162e8:	mov	r0, r5
   162ec:	mov	r1, r4
   162f0:	mov	r2, #10
   162f4:	mov	r3, #0
   162f8:	bl	1f218 <__assert_fail@plt+0xdc10>
   162fc:	add	r2, r0, r0, lsl #2
   16300:	sub	r2, r5, r2, lsl #1
   16304:	add	r2, r2, #48	; 0x30
   16308:	strb	r2, [r6], #-1
   1630c:	adds	r2, r5, #9
   16310:	mov	r5, r0
   16314:	adc	r3, r4, #0
   16318:	rsbs	r2, r2, #18
   1631c:	mov	r4, r1
   16320:	rscs	r2, r3, #0
   16324:	bcc	162e8 <__assert_fail@plt+0x4ce0>
   16328:	add	r6, r6, #1
   1632c:	mov	r0, r6
   16330:	pop	{r4, r5, r6, sl, fp, pc}
   16334:	mov	r0, r5
   16338:	mov	r1, r4
   1633c:	mov	r2, #10
   16340:	mov	r3, #0
   16344:	bl	1f218 <__assert_fail@plt+0xdc10>
   16348:	add	r2, r0, r0, lsl #2
   1634c:	rsb	r2, r5, r2, lsl #1
   16350:	add	r2, r2, #48	; 0x30
   16354:	strb	r2, [r6], #-1
   16358:	adds	r2, r5, #9
   1635c:	mov	r5, r0
   16360:	adc	r3, r4, #0
   16364:	rsbs	r2, r2, #18
   16368:	mov	r4, r1
   1636c:	rscs	r2, r3, #0
   16370:	bcc	16334 <__assert_fail@plt+0x4d2c>
   16374:	mov	r0, #45	; 0x2d
   16378:	strb	r0, [r6]
   1637c:	mov	r0, r6
   16380:	pop	{r4, r5, r6, sl, fp, pc}
   16384:	push	{r4, r5, fp, lr}
   16388:	add	fp, sp, #8
   1638c:	mov	r4, r1
   16390:	mov	r5, r0
   16394:	bl	114b8 <strlen@plt>
   16398:	mov	r1, r0
   1639c:	mov	r0, r5
   163a0:	mov	r2, r4
   163a4:	pop	{r4, r5, fp, lr}
   163a8:	b	163ac <__assert_fail@plt+0x4da4>
   163ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163b0:	add	fp, sp, #28
   163b4:	sub	sp, sp, #20
   163b8:	mov	r4, r2
   163bc:	mov	r6, r1
   163c0:	mov	r5, r0
   163c4:	add	r7, r0, r1
   163c8:	bl	11404 <__ctype_get_mb_cur_max@plt>
   163cc:	cmp	r0, #1
   163d0:	bls	166b8 <__assert_fail@plt+0x50b0>
   163d4:	cmp	r6, #1
   163d8:	blt	16770 <__assert_fail@plt+0x5168>
   163dc:	and	sl, r4, #1
   163e0:	mov	r3, #0
   163e4:	add	r8, sp, #4
   163e8:	add	r9, sp, #8
   163ec:	tst	r4, #2
   163f0:	eor	r2, sl, #1
   163f4:	bne	16780 <__assert_fail@plt+0x5178>
   163f8:	mov	r4, #0
   163fc:	ldrb	r0, [r5]
   16400:	sub	r0, r0, #32
   16404:	cmp	r0, #94	; 0x5e
   16408:	bhi	165a4 <__assert_fail@plt+0x4f9c>
   1640c:	add	r1, pc, #0
   16410:	ldr	pc, [r1, r0, lsl #2]
   16414:	muleq	r1, r0, r5
   16418:	muleq	r1, r0, r5
   1641c:	muleq	r1, r0, r5
   16420:	muleq	r1, r0, r5
   16424:	andeq	r6, r1, r4, lsr #11
   16428:	muleq	r1, r0, r5
   1642c:	muleq	r1, r0, r5
   16430:	muleq	r1, r0, r5
   16434:	muleq	r1, r0, r5
   16438:	muleq	r1, r0, r5
   1643c:	muleq	r1, r0, r5
   16440:	muleq	r1, r0, r5
   16444:	muleq	r1, r0, r5
   16448:	muleq	r1, r0, r5
   1644c:	muleq	r1, r0, r5
   16450:	muleq	r1, r0, r5
   16454:	muleq	r1, r0, r5
   16458:	muleq	r1, r0, r5
   1645c:	muleq	r1, r0, r5
   16460:	muleq	r1, r0, r5
   16464:	muleq	r1, r0, r5
   16468:	muleq	r1, r0, r5
   1646c:	muleq	r1, r0, r5
   16470:	muleq	r1, r0, r5
   16474:	muleq	r1, r0, r5
   16478:	muleq	r1, r0, r5
   1647c:	muleq	r1, r0, r5
   16480:	muleq	r1, r0, r5
   16484:	muleq	r1, r0, r5
   16488:	muleq	r1, r0, r5
   1648c:	muleq	r1, r0, r5
   16490:	muleq	r1, r0, r5
   16494:	andeq	r6, r1, r4, lsr #11
   16498:	muleq	r1, r0, r5
   1649c:	muleq	r1, r0, r5
   164a0:	muleq	r1, r0, r5
   164a4:	muleq	r1, r0, r5
   164a8:	muleq	r1, r0, r5
   164ac:	muleq	r1, r0, r5
   164b0:	muleq	r1, r0, r5
   164b4:	muleq	r1, r0, r5
   164b8:	muleq	r1, r0, r5
   164bc:	muleq	r1, r0, r5
   164c0:	muleq	r1, r0, r5
   164c4:	muleq	r1, r0, r5
   164c8:	muleq	r1, r0, r5
   164cc:	muleq	r1, r0, r5
   164d0:	muleq	r1, r0, r5
   164d4:	muleq	r1, r0, r5
   164d8:	muleq	r1, r0, r5
   164dc:	muleq	r1, r0, r5
   164e0:	muleq	r1, r0, r5
   164e4:	muleq	r1, r0, r5
   164e8:	muleq	r1, r0, r5
   164ec:	muleq	r1, r0, r5
   164f0:	muleq	r1, r0, r5
   164f4:	muleq	r1, r0, r5
   164f8:	muleq	r1, r0, r5
   164fc:	muleq	r1, r0, r5
   16500:	muleq	r1, r0, r5
   16504:	muleq	r1, r0, r5
   16508:	muleq	r1, r0, r5
   1650c:	muleq	r1, r0, r5
   16510:	muleq	r1, r0, r5
   16514:	andeq	r6, r1, r4, lsr #11
   16518:	muleq	r1, r0, r5
   1651c:	muleq	r1, r0, r5
   16520:	muleq	r1, r0, r5
   16524:	muleq	r1, r0, r5
   16528:	muleq	r1, r0, r5
   1652c:	muleq	r1, r0, r5
   16530:	muleq	r1, r0, r5
   16534:	muleq	r1, r0, r5
   16538:	muleq	r1, r0, r5
   1653c:	muleq	r1, r0, r5
   16540:	muleq	r1, r0, r5
   16544:	muleq	r1, r0, r5
   16548:	muleq	r1, r0, r5
   1654c:	muleq	r1, r0, r5
   16550:	muleq	r1, r0, r5
   16554:	muleq	r1, r0, r5
   16558:	muleq	r1, r0, r5
   1655c:	muleq	r1, r0, r5
   16560:	muleq	r1, r0, r5
   16564:	muleq	r1, r0, r5
   16568:	muleq	r1, r0, r5
   1656c:	muleq	r1, r0, r5
   16570:	muleq	r1, r0, r5
   16574:	muleq	r1, r0, r5
   16578:	muleq	r1, r0, r5
   1657c:	muleq	r1, r0, r5
   16580:	muleq	r1, r0, r5
   16584:	muleq	r1, r0, r5
   16588:	muleq	r1, r0, r5
   1658c:	muleq	r1, r0, r5
   16590:	add	r4, r4, #1
   16594:	add	r5, r5, #1
   16598:	cmp	r5, r7
   1659c:	bcc	163fc <__assert_fail@plt+0x4df4>
   165a0:	b	16a24 <__assert_fail@plt+0x541c>
   165a4:	str	r2, [sp]
   165a8:	str	r3, [sp, #12]
   165ac:	str	r3, [sp, #8]
   165b0:	sub	r2, r7, r5
   165b4:	mov	r0, r8
   165b8:	mov	r1, r5
   165bc:	mov	r3, r9
   165c0:	mov	r6, r5
   165c4:	bl	1f17c <__assert_fail@plt+0xdb74>
   165c8:	cmp	r0, #0
   165cc:	beq	1660c <__assert_fail@plt+0x5004>
   165d0:	mov	r5, r0
   165d4:	cmn	r0, #2
   165d8:	beq	1665c <__assert_fail@plt+0x5054>
   165dc:	cmn	r5, #1
   165e0:	beq	16678 <__assert_fail@plt+0x5070>
   165e4:	ldr	r0, [sp, #4]
   165e8:	bl	1132c <wcwidth@plt>
   165ec:	cmn	r0, #1
   165f0:	ble	16620 <__assert_fail@plt+0x5018>
   165f4:	mvn	r1, #-2147483648	; 0x80000000
   165f8:	sub	r1, r1, r4
   165fc:	cmp	r0, r1
   16600:	bgt	16654 <__assert_fail@plt+0x504c>
   16604:	add	r4, r0, r4
   16608:	b	1663c <__assert_fail@plt+0x5034>
   1660c:	mov	r5, #1
   16610:	ldr	r0, [sp, #4]
   16614:	bl	1132c <wcwidth@plt>
   16618:	cmn	r0, #1
   1661c:	bgt	165f4 <__assert_fail@plt+0x4fec>
   16620:	ldr	r0, [sp, #4]
   16624:	bl	113bc <iswcntrl@plt>
   16628:	cmp	r0, #0
   1662c:	bne	1663c <__assert_fail@plt+0x5034>
   16630:	cmn	r4, #-2147483647	; 0x80000001
   16634:	beq	16654 <__assert_fail@plt+0x504c>
   16638:	add	r4, r4, #1
   1663c:	mov	r0, r9
   16640:	add	r5, r6, r5
   16644:	bl	11374 <mbsinit@plt>
   16648:	cmp	r0, #0
   1664c:	beq	165b0 <__assert_fail@plt+0x4fa8>
   16650:	b	1668c <__assert_fail@plt+0x5084>
   16654:	mov	r0, #7
   16658:	b	166a0 <__assert_fail@plt+0x5098>
   1665c:	ldr	r0, [sp]
   16660:	cmp	sl, #0
   16664:	mov	r5, r7
   16668:	add	r4, r4, r0
   1666c:	mov	r0, #1
   16670:	beq	1668c <__assert_fail@plt+0x5084>
   16674:	b	166a0 <__assert_fail@plt+0x5098>
   16678:	mov	r0, #1
   1667c:	cmp	sl, #0
   16680:	bne	166a0 <__assert_fail@plt+0x5098>
   16684:	add	r4, r4, #1
   16688:	add	r5, r6, #1
   1668c:	ldr	r2, [sp]
   16690:	mov	r3, #0
   16694:	cmp	r5, r7
   16698:	bcc	163fc <__assert_fail@plt+0x4df4>
   1669c:	b	16a24 <__assert_fail@plt+0x541c>
   166a0:	ldr	r2, [sp]
   166a4:	cmp	r0, #0
   166a8:	mov	r5, r6
   166ac:	mov	r3, #0
   166b0:	beq	16598 <__assert_fail@plt+0x4f90>
   166b4:	b	1670c <__assert_fail@plt+0x5104>
   166b8:	tst	r4, #2
   166bc:	bne	16714 <__assert_fail@plt+0x510c>
   166c0:	mov	r4, #0
   166c4:	cmp	r5, r7
   166c8:	bcs	16a24 <__assert_fail@plt+0x541c>
   166cc:	ldrb	r6, [r5], #1
   166d0:	bl	114a0 <__ctype_b_loc@plt>
   166d4:	ldr	r0, [r0]
   166d8:	add	r0, r0, r6, lsl #1
   166dc:	ldrh	r1, [r0]
   166e0:	tst	r1, #16384	; 0x4000
   166e4:	bne	166f4 <__assert_fail@plt+0x50ec>
   166e8:	mov	r0, #0
   166ec:	tst	r1, #2
   166f0:	bne	16704 <__assert_fail@plt+0x50fc>
   166f4:	cmn	r4, #-2147483647	; 0x80000001
   166f8:	mov	r0, #0
   166fc:	mvneq	r0, #0
   16700:	addne	r4, r4, #1
   16704:	ands	r0, r0, #7
   16708:	beq	166c4 <__assert_fail@plt+0x50bc>
   1670c:	mvn	r4, #0
   16710:	b	1675c <__assert_fail@plt+0x5154>
   16714:	mov	r6, #0
   16718:	cmp	r5, r7
   1671c:	bcs	16a20 <__assert_fail@plt+0x5418>
   16720:	ldrb	r4, [r5]
   16724:	bl	114a0 <__ctype_b_loc@plt>
   16728:	ldr	r0, [r0]
   1672c:	add	r0, r0, r4, lsl #1
   16730:	mvn	r4, #0
   16734:	ldrb	r0, [r0, #1]
   16738:	tst	r0, #64	; 0x40
   1673c:	beq	16a24 <__assert_fail@plt+0x541c>
   16740:	cmn	r6, #-2147483647	; 0x80000001
   16744:	mov	r0, #0
   16748:	add	r5, r5, #1
   1674c:	movweq	r0, #7
   16750:	addne	r6, r6, #1
   16754:	cmp	r0, #0
   16758:	beq	16718 <__assert_fail@plt+0x5110>
   1675c:	cmp	r0, #7
   16760:	mvneq	r4, #-2147483648	; 0x80000000
   16764:	mov	r0, r4
   16768:	sub	sp, fp, #28
   1676c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16770:	mov	r4, #0
   16774:	mov	r0, r4
   16778:	sub	sp, fp, #28
   1677c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16780:	mov	r4, #0
   16784:	ldrb	r0, [r5]
   16788:	sub	r0, r0, #32
   1678c:	cmp	r0, #94	; 0x5e
   16790:	bhi	1692c <__assert_fail@plt+0x5324>
   16794:	add	r1, pc, #0
   16798:	ldr	pc, [r1, r0, lsl #2]
   1679c:	andeq	r6, r1, r8, lsl r9
   167a0:	andeq	r6, r1, r8, lsl r9
   167a4:	andeq	r6, r1, r8, lsl r9
   167a8:	andeq	r6, r1, r8, lsl r9
   167ac:	andeq	r6, r1, ip, lsr #18
   167b0:	andeq	r6, r1, r8, lsl r9
   167b4:	andeq	r6, r1, r8, lsl r9
   167b8:	andeq	r6, r1, r8, lsl r9
   167bc:	andeq	r6, r1, r8, lsl r9
   167c0:	andeq	r6, r1, r8, lsl r9
   167c4:	andeq	r6, r1, r8, lsl r9
   167c8:	andeq	r6, r1, r8, lsl r9
   167cc:	andeq	r6, r1, r8, lsl r9
   167d0:	andeq	r6, r1, r8, lsl r9
   167d4:	andeq	r6, r1, r8, lsl r9
   167d8:	andeq	r6, r1, r8, lsl r9
   167dc:	andeq	r6, r1, r8, lsl r9
   167e0:	andeq	r6, r1, r8, lsl r9
   167e4:	andeq	r6, r1, r8, lsl r9
   167e8:	andeq	r6, r1, r8, lsl r9
   167ec:	andeq	r6, r1, r8, lsl r9
   167f0:	andeq	r6, r1, r8, lsl r9
   167f4:	andeq	r6, r1, r8, lsl r9
   167f8:	andeq	r6, r1, r8, lsl r9
   167fc:	andeq	r6, r1, r8, lsl r9
   16800:	andeq	r6, r1, r8, lsl r9
   16804:	andeq	r6, r1, r8, lsl r9
   16808:	andeq	r6, r1, r8, lsl r9
   1680c:	andeq	r6, r1, r8, lsl r9
   16810:	andeq	r6, r1, r8, lsl r9
   16814:	andeq	r6, r1, r8, lsl r9
   16818:	andeq	r6, r1, r8, lsl r9
   1681c:	andeq	r6, r1, ip, lsr #18
   16820:	andeq	r6, r1, r8, lsl r9
   16824:	andeq	r6, r1, r8, lsl r9
   16828:	andeq	r6, r1, r8, lsl r9
   1682c:	andeq	r6, r1, r8, lsl r9
   16830:	andeq	r6, r1, r8, lsl r9
   16834:	andeq	r6, r1, r8, lsl r9
   16838:	andeq	r6, r1, r8, lsl r9
   1683c:	andeq	r6, r1, r8, lsl r9
   16840:	andeq	r6, r1, r8, lsl r9
   16844:	andeq	r6, r1, r8, lsl r9
   16848:	andeq	r6, r1, r8, lsl r9
   1684c:	andeq	r6, r1, r8, lsl r9
   16850:	andeq	r6, r1, r8, lsl r9
   16854:	andeq	r6, r1, r8, lsl r9
   16858:	andeq	r6, r1, r8, lsl r9
   1685c:	andeq	r6, r1, r8, lsl r9
   16860:	andeq	r6, r1, r8, lsl r9
   16864:	andeq	r6, r1, r8, lsl r9
   16868:	andeq	r6, r1, r8, lsl r9
   1686c:	andeq	r6, r1, r8, lsl r9
   16870:	andeq	r6, r1, r8, lsl r9
   16874:	andeq	r6, r1, r8, lsl r9
   16878:	andeq	r6, r1, r8, lsl r9
   1687c:	andeq	r6, r1, r8, lsl r9
   16880:	andeq	r6, r1, r8, lsl r9
   16884:	andeq	r6, r1, r8, lsl r9
   16888:	andeq	r6, r1, r8, lsl r9
   1688c:	andeq	r6, r1, r8, lsl r9
   16890:	andeq	r6, r1, r8, lsl r9
   16894:	andeq	r6, r1, r8, lsl r9
   16898:	andeq	r6, r1, r8, lsl r9
   1689c:	andeq	r6, r1, ip, lsr #18
   168a0:	andeq	r6, r1, r8, lsl r9
   168a4:	andeq	r6, r1, r8, lsl r9
   168a8:	andeq	r6, r1, r8, lsl r9
   168ac:	andeq	r6, r1, r8, lsl r9
   168b0:	andeq	r6, r1, r8, lsl r9
   168b4:	andeq	r6, r1, r8, lsl r9
   168b8:	andeq	r6, r1, r8, lsl r9
   168bc:	andeq	r6, r1, r8, lsl r9
   168c0:	andeq	r6, r1, r8, lsl r9
   168c4:	andeq	r6, r1, r8, lsl r9
   168c8:	andeq	r6, r1, r8, lsl r9
   168cc:	andeq	r6, r1, r8, lsl r9
   168d0:	andeq	r6, r1, r8, lsl r9
   168d4:	andeq	r6, r1, r8, lsl r9
   168d8:	andeq	r6, r1, r8, lsl r9
   168dc:	andeq	r6, r1, r8, lsl r9
   168e0:	andeq	r6, r1, r8, lsl r9
   168e4:	andeq	r6, r1, r8, lsl r9
   168e8:	andeq	r6, r1, r8, lsl r9
   168ec:	andeq	r6, r1, r8, lsl r9
   168f0:	andeq	r6, r1, r8, lsl r9
   168f4:	andeq	r6, r1, r8, lsl r9
   168f8:	andeq	r6, r1, r8, lsl r9
   168fc:	andeq	r6, r1, r8, lsl r9
   16900:	andeq	r6, r1, r8, lsl r9
   16904:	andeq	r6, r1, r8, lsl r9
   16908:	andeq	r6, r1, r8, lsl r9
   1690c:	andeq	r6, r1, r8, lsl r9
   16910:	andeq	r6, r1, r8, lsl r9
   16914:	andeq	r6, r1, r8, lsl r9
   16918:	add	r4, r4, #1
   1691c:	add	r5, r5, #1
   16920:	cmp	r5, r7
   16924:	bcc	16784 <__assert_fail@plt+0x517c>
   16928:	b	16a24 <__assert_fail@plt+0x541c>
   1692c:	mov	r6, r5
   16930:	str	r2, [sp]
   16934:	str	r3, [sp, #12]
   16938:	str	r3, [sp, #8]
   1693c:	sub	r2, r7, r6
   16940:	mov	r0, r8
   16944:	mov	r1, r6
   16948:	mov	r3, r9
   1694c:	bl	1f17c <__assert_fail@plt+0xdb74>
   16950:	cmp	r0, #0
   16954:	beq	16970 <__assert_fail@plt+0x5368>
   16958:	mov	r5, r0
   1695c:	cmn	r0, #2
   16960:	beq	169c4 <__assert_fail@plt+0x53bc>
   16964:	cmn	r5, #1
   16968:	bne	16974 <__assert_fail@plt+0x536c>
   1696c:	b	169e0 <__assert_fail@plt+0x53d8>
   16970:	mov	r5, #1
   16974:	ldr	r0, [sp, #4]
   16978:	bl	1132c <wcwidth@plt>
   1697c:	cmp	r0, #0
   16980:	blt	169b4 <__assert_fail@plt+0x53ac>
   16984:	mvn	r1, #-2147483648	; 0x80000000
   16988:	sub	r1, r1, r4
   1698c:	cmp	r0, r1
   16990:	bgt	169bc <__assert_fail@plt+0x53b4>
   16994:	add	r4, r0, r4
   16998:	mov	r0, r9
   1699c:	add	r6, r6, r5
   169a0:	bl	11374 <mbsinit@plt>
   169a4:	cmp	r0, #0
   169a8:	mov	r5, r6
   169ac:	beq	1693c <__assert_fail@plt+0x5334>
   169b0:	b	169f4 <__assert_fail@plt+0x53ec>
   169b4:	mov	r0, #1
   169b8:	b	16a08 <__assert_fail@plt+0x5400>
   169bc:	mov	r0, #7
   169c0:	b	16a08 <__assert_fail@plt+0x5400>
   169c4:	ldr	r0, [sp]
   169c8:	cmp	sl, #0
   169cc:	mov	r5, r7
   169d0:	add	r4, r4, r0
   169d4:	mov	r0, #1
   169d8:	bne	16a08 <__assert_fail@plt+0x5400>
   169dc:	b	169f4 <__assert_fail@plt+0x53ec>
   169e0:	mov	r0, #1
   169e4:	cmp	sl, #0
   169e8:	bne	16a08 <__assert_fail@plt+0x5400>
   169ec:	add	r4, r4, #1
   169f0:	add	r5, r6, #1
   169f4:	ldr	r2, [sp]
   169f8:	mov	r3, #0
   169fc:	cmp	r5, r7
   16a00:	bcc	16784 <__assert_fail@plt+0x517c>
   16a04:	b	16a24 <__assert_fail@plt+0x541c>
   16a08:	ldr	r2, [sp]
   16a0c:	cmp	r0, #0
   16a10:	mov	r5, r6
   16a14:	mov	r3, #0
   16a18:	beq	16920 <__assert_fail@plt+0x5318>
   16a1c:	b	1670c <__assert_fail@plt+0x5104>
   16a20:	mov	r4, r6
   16a24:	mov	r0, r4
   16a28:	sub	sp, fp, #28
   16a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a30:	push	{fp, lr}
   16a34:	mov	fp, sp
   16a38:	sub	sp, sp, #24
   16a3c:	mvn	ip, #0
   16a40:	str	ip, [sp, #8]
   16a44:	mov	ip, #0
   16a48:	str	ip, [sp, #4]
   16a4c:	str	ip, [sp]
   16a50:	ldr	ip, [fp, #12]
   16a54:	str	ip, [sp, #16]
   16a58:	ldr	ip, [fp, #8]
   16a5c:	str	ip, [sp, #12]
   16a60:	bl	16a6c <__assert_fail@plt+0x5464>
   16a64:	mov	sp, fp
   16a68:	pop	{fp, pc}
   16a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a70:	add	fp, sp, #28
   16a74:	sub	sp, sp, #132	; 0x84
   16a78:	sub	sp, sp, #1024	; 0x400
   16a7c:	mov	r4, r3
   16a80:	mov	sl, r2
   16a84:	str	r1, [sp, #96]	; 0x60
   16a88:	mov	r5, r0
   16a8c:	bl	114e8 <__errno_location@plt>
   16a90:	mov	r2, r4
   16a94:	ldrb	r3, [sl]
   16a98:	str	r0, [sp, #68]	; 0x44
   16a9c:	ldr	r0, [r0]
   16aa0:	movw	r6, #1972	; 0x7b4
   16aa4:	ldr	r1, [r2, #8]!
   16aa8:	movt	r6, #2
   16aac:	str	r0, [sp, #64]	; 0x40
   16ab0:	cmp	r1, #0
   16ab4:	mov	r7, r1
   16ab8:	movweq	r7, #12
   16abc:	cmp	r1, #12
   16ac0:	subgt	r7, r1, #12
   16ac4:	ldr	r1, [r2, #32]
   16ac8:	cmp	r1, #0
   16acc:	movne	r6, r1
   16ad0:	cmp	r3, #0
   16ad4:	beq	18470 <__assert_fail@plt+0x6e68>
   16ad8:	sub	r0, fp, #48	; 0x30
   16adc:	mvn	r1, #13
   16ae0:	ldr	r9, [fp, #16]
   16ae4:	str	r4, [sp, #80]	; 0x50
   16ae8:	sub	r8, r6, #1
   16aec:	str	r6, [sp, #44]	; 0x2c
   16af0:	mov	lr, #0
   16af4:	mov	r6, #-2147483648	; 0x80000000
   16af8:	mov	ip, r5
   16afc:	str	r7, [sp, #52]	; 0x34
   16b00:	str	r2, [sp, #56]	; 0x38
   16b04:	sub	r1, r1, r0
   16b08:	str	r8, [sp, #24]
   16b0c:	str	r1, [sp, #36]	; 0x24
   16b10:	add	r1, r0, #13
   16b14:	add	r0, r0, #14
   16b18:	str	r1, [sp, #28]
   16b1c:	add	r1, sp, #104	; 0x68
   16b20:	str	r0, [sp, #72]	; 0x48
   16b24:	add	r1, r1, #1
   16b28:	str	r1, [sp, #40]	; 0x28
   16b2c:	add	r1, r4, #12
   16b30:	movw	r4, #52428	; 0xcccc
   16b34:	str	r1, [sp, #48]	; 0x30
   16b38:	sub	r1, fp, #53	; 0x35
   16b3c:	movt	r4, #3276	; 0xccc
   16b40:	add	r0, r1, #3
   16b44:	str	r0, [sp, #60]	; 0x3c
   16b48:	add	r0, r1, #2
   16b4c:	str	r0, [sp, #76]	; 0x4c
   16b50:	uxtb	r1, r3
   16b54:	cmp	r1, #37	; 0x25
   16b58:	bne	16b74 <__assert_fail@plt+0x556c>
   16b5c:	ldr	r0, [fp, #8]
   16b60:	mov	r7, #0
   16b64:	mov	r5, #0
   16b68:	str	sl, [sp, #88]	; 0x58
   16b6c:	str	r0, [sp, #100]	; 0x64
   16b70:	b	16c74 <__assert_fail@plt+0x566c>
   16b74:	ldr	r0, [sp, #96]	; 0x60
   16b78:	bic	r1, r9, r9, asr #31
   16b7c:	cmp	r1, #1
   16b80:	mov	r5, r1
   16b84:	movls	r5, #1
   16b88:	sub	r2, r0, lr
   16b8c:	cmp	r5, r2
   16b90:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   16b94:	cmp	ip, #0
   16b98:	beq	16d28 <__assert_fail@plt+0x5720>
   16b9c:	cmp	r1, #2
   16ba0:	bcc	16bdc <__assert_fail@plt+0x55d4>
   16ba4:	sub	r4, r1, #1
   16ba8:	mov	r0, ip
   16bac:	mov	r1, #32
   16bb0:	mov	r6, lr
   16bb4:	mov	r7, ip
   16bb8:	mov	r2, r4
   16bbc:	bl	1150c <memset@plt>
   16bc0:	ldrb	r3, [sl]
   16bc4:	mov	ip, r7
   16bc8:	mov	lr, r6
   16bcc:	mov	r6, #-2147483648	; 0x80000000
   16bd0:	add	ip, r7, r4
   16bd4:	movw	r4, #52428	; 0xcccc
   16bd8:	movt	r4, #3276	; 0xccc
   16bdc:	strb	r3, [ip], #1
   16be0:	add	lr, r5, lr
   16be4:	ldrb	r3, [sl, #1]!
   16be8:	mvn	r9, #0
   16bec:	cmp	r3, #0
   16bf0:	bne	16b50 <__assert_fail@plt+0x5548>
   16bf4:	b	18478 <__assert_fail@plt+0x6e70>
   16bf8:	mov	r7, #1
   16bfc:	b	16c74 <__assert_fail@plt+0x566c>
   16c00:	add	r3, pc, #0
   16c04:	ldr	pc, [r3, r2, lsl #2]
   16c08:	strdeq	r6, [r1], -r8
   16c0c:	muleq	r1, r0, ip
   16c10:	muleq	r1, r0, ip
   16c14:	muleq	r1, r0, ip
   16c18:	muleq	r1, r0, ip
   16c1c:	muleq	r1, r0, ip
   16c20:	muleq	r1, r0, ip
   16c24:	muleq	r1, r0, ip
   16c28:	andeq	r6, r1, r0, asr #24
   16c2c:	muleq	r1, r0, ip
   16c30:	andeq	r6, r1, r0, asr #24
   16c34:	muleq	r1, r0, ip
   16c38:	muleq	r1, r0, ip
   16c3c:	andeq	r6, r1, r0, asr #24
   16c40:	add	r1, r1, #1
   16c44:	add	sl, sl, #1
   16c48:	mov	r5, r0
   16c4c:	ldrb	r0, [sl]
   16c50:	sub	r2, r0, #35	; 0x23
   16c54:	cmp	r2, #13
   16c58:	bls	16c00 <__assert_fail@plt+0x55f8>
   16c5c:	cmp	r0, #95	; 0x5f
   16c60:	beq	16c40 <__assert_fail@plt+0x5638>
   16c64:	cmp	r0, #94	; 0x5e
   16c68:	bne	16c90 <__assert_fail@plt+0x5688>
   16c6c:	mov	r0, #1
   16c70:	str	r0, [sp, #100]	; 0x64
   16c74:	add	r1, sl, #2
   16c78:	add	sl, sl, #1
   16c7c:	ldrb	r0, [sl]
   16c80:	sub	r2, r0, #35	; 0x23
   16c84:	cmp	r2, #13
   16c88:	bls	16c00 <__assert_fail@plt+0x55f8>
   16c8c:	b	16c5c <__assert_fail@plt+0x5654>
   16c90:	sub	r2, r0, #48	; 0x30
   16c94:	cmp	r2, #9
   16c98:	bhi	16d08 <__assert_fail@plt+0x5700>
   16c9c:	mov	r9, #0
   16ca0:	cmn	r9, #1
   16ca4:	ble	16cb4 <__assert_fail@plt+0x56ac>
   16ca8:	cmp	r9, r4
   16cac:	bgt	16cc4 <__assert_fail@plt+0x56bc>
   16cb0:	b	16cdc <__assert_fail@plt+0x56d4>
   16cb4:	beq	16cdc <__assert_fail@plt+0x56d4>
   16cb8:	sdiv	r2, r6, r9
   16cbc:	cmp	r2, #10
   16cc0:	bge	16cdc <__assert_fail@plt+0x56d4>
   16cc4:	mvn	r9, #-2147483648	; 0x80000000
   16cc8:	ldrb	r0, [r1], #1
   16ccc:	sub	r2, r0, #48	; 0x30
   16cd0:	cmp	r2, #10
   16cd4:	bcc	16ca0 <__assert_fail@plt+0x5698>
   16cd8:	b	16d04 <__assert_fail@plt+0x56fc>
   16cdc:	add	r2, r9, r9, lsl #2
   16ce0:	lsl	r3, r2, #1
   16ce4:	uxtab	r0, r3, r0
   16ce8:	sub	r9, r0, #48	; 0x30
   16cec:	cmp	r9, r2, lsl #1
   16cf0:	mvnvs	r9, #-2147483648	; 0x80000000
   16cf4:	ldrb	r0, [r1], #1
   16cf8:	sub	r2, r0, #48	; 0x30
   16cfc:	cmp	r2, #10
   16d00:	bcc	16ca0 <__assert_fail@plt+0x5698>
   16d04:	sub	sl, r1, #1
   16d08:	cmp	r0, #79	; 0x4f
   16d0c:	str	ip, [sp, #92]	; 0x5c
   16d10:	cmpne	r0, #69	; 0x45
   16d14:	bne	16d44 <__assert_fail@plt+0x573c>
   16d18:	ldrb	r1, [sl, #1]!
   16d1c:	cmp	r1, #122	; 0x7a
   16d20:	bls	16d54 <__assert_fail@plt+0x574c>
   16d24:	b	1797c <__assert_fail@plt+0x6374>
   16d28:	mov	ip, #0
   16d2c:	add	lr, r5, lr
   16d30:	ldrb	r3, [sl, #1]!
   16d34:	mvn	r9, #0
   16d38:	cmp	r3, #0
   16d3c:	bne	16b50 <__assert_fail@plt+0x5548>
   16d40:	b	18478 <__assert_fail@plt+0x6e70>
   16d44:	mov	r1, r0
   16d48:	mov	r0, #0
   16d4c:	cmp	r1, #122	; 0x7a
   16d50:	bhi	1797c <__assert_fail@plt+0x6374>
   16d54:	movw	r4, #63085	; 0xf66d
   16d58:	add	r2, pc, #12
   16d5c:	mov	r6, #0
   16d60:	mvn	r8, #0
   16d64:	movt	r4, #1
   16d68:	ldr	pc, [r2, r1, lsl #2]
   16d6c:	andeq	r7, r1, r4, asr #1
   16d70:	andeq	r7, r1, ip, ror r9
   16d74:	andeq	r7, r1, ip, ror r9
   16d78:	andeq	r7, r1, ip, ror r9
   16d7c:	andeq	r7, r1, ip, ror r9
   16d80:	andeq	r7, r1, ip, ror r9
   16d84:	andeq	r7, r1, ip, ror r9
   16d88:	andeq	r7, r1, ip, ror r9
   16d8c:	andeq	r7, r1, ip, ror r9
   16d90:	andeq	r7, r1, ip, ror r9
   16d94:	andeq	r7, r1, ip, ror r9
   16d98:	andeq	r7, r1, ip, ror r9
   16d9c:	andeq	r7, r1, ip, ror r9
   16da0:	andeq	r7, r1, ip, ror r9
   16da4:	andeq	r7, r1, ip, ror r9
   16da8:	andeq	r7, r1, ip, ror r9
   16dac:	andeq	r7, r1, ip, ror r9
   16db0:	andeq	r7, r1, ip, ror r9
   16db4:	andeq	r7, r1, ip, ror r9
   16db8:	andeq	r7, r1, ip, ror r9
   16dbc:	andeq	r7, r1, ip, ror r9
   16dc0:	andeq	r7, r1, ip, ror r9
   16dc4:	andeq	r7, r1, ip, ror r9
   16dc8:	andeq	r7, r1, ip, ror r9
   16dcc:	andeq	r7, r1, ip, ror r9
   16dd0:	andeq	r7, r1, ip, ror r9
   16dd4:	andeq	r7, r1, ip, ror r9
   16dd8:	andeq	r7, r1, ip, ror r9
   16ddc:	andeq	r7, r1, ip, ror r9
   16de0:	andeq	r7, r1, ip, ror r9
   16de4:	andeq	r7, r1, ip, ror r9
   16de8:	andeq	r7, r1, ip, ror r9
   16dec:	andeq	r7, r1, ip, ror r9
   16df0:	andeq	r7, r1, ip, ror r9
   16df4:	andeq	r7, r1, ip, ror r9
   16df8:	andeq	r7, r1, ip, ror r9
   16dfc:	andeq	r7, r1, ip, ror r9
   16e00:	ldrdeq	r7, [r1], -r0
   16e04:	andeq	r7, r1, ip, ror r9
   16e08:	andeq	r7, r1, ip, ror r9
   16e0c:	andeq	r7, r1, ip, ror r9
   16e10:	andeq	r7, r1, ip, ror r9
   16e14:	andeq	r7, r1, ip, ror r9
   16e18:	andeq	r7, r1, ip, ror r9
   16e1c:	andeq	r7, r1, ip, ror r9
   16e20:	andeq	r7, r1, ip, ror r9
   16e24:	andeq	r7, r1, ip, ror r9
   16e28:	andeq	r7, r1, ip, ror r9
   16e2c:	andeq	r7, r1, ip, ror r9
   16e30:	andeq	r7, r1, ip, ror r9
   16e34:	andeq	r7, r1, ip, ror r9
   16e38:	andeq	r7, r1, ip, ror r9
   16e3c:	andeq	r7, r1, ip, ror r9
   16e40:	andeq	r7, r1, ip, ror r9
   16e44:	andeq	r7, r1, ip, ror r9
   16e48:	andeq	r7, r1, ip, ror r9
   16e4c:	andeq	r7, r1, ip, ror r9
   16e50:	andeq	r7, r1, ip, ror r9
   16e54:	andeq	r7, r1, ip, lsr r1
   16e58:	andeq	r7, r1, ip, ror r9
   16e5c:	andeq	r7, r1, ip, ror r9
   16e60:	andeq	r7, r1, ip, ror r9
   16e64:	andeq	r7, r1, ip, ror r9
   16e68:	andeq	r7, r1, ip, ror r9
   16e6c:	andeq	r7, r1, ip, ror r9
   16e70:			; <UNDEFINED> instruction: 0x000171b8
   16e74:	ldrdeq	r7, [r1], -r8
   16e78:	strdeq	r7, [r1], -r8
   16e7c:	andeq	r7, r1, ip, lsl #4
   16e80:	andeq	r7, r1, ip, ror r9
   16e84:	andeq	r7, r1, r0, lsr #4
   16e88:	andeq	r6, r1, r8, asr pc
   16e8c:	andeq	r7, r1, ip, asr #4
   16e90:	andeq	r7, r1, r0, ror #4
   16e94:	andeq	r7, r1, ip, ror r9
   16e98:	andeq	r7, r1, ip, ror r9
   16e9c:	andeq	r7, r1, ip, ror r9
   16ea0:	andeq	r7, r1, r4, ror r2
   16ea4:	andeq	r7, r1, r8, lsl #5
   16ea8:	andeq	r7, r1, ip, ror r9
   16eac:	andeq	r7, r1, ip, lsr #7
   16eb0:	andeq	r7, r1, ip, ror r9
   16eb4:	andeq	r7, r1, r8, ror #7
   16eb8:	andeq	r7, r1, ip, asr #7
   16ebc:	andeq	r7, r1, r0, ror #7
   16ec0:	muleq	r1, r0, r4
   16ec4:	andeq	r6, r1, r8, asr pc
   16ec8:			; <UNDEFINED> instruction: 0x000174bc
   16ecc:	andeq	r7, r1, r8, lsl #10
   16ed0:	andeq	r7, r1, ip, lsl r5
   16ed4:	andeq	r7, r1, r8, asr r5
   16ed8:	andeq	r7, r1, ip, ror r9
   16edc:	andeq	r7, r1, ip, ror r9
   16ee0:	andeq	r7, r1, ip, ror r9
   16ee4:	andeq	r7, r1, ip, ror r9
   16ee8:	andeq	r7, r1, ip, ror r9
   16eec:	andeq	r7, r1, ip, ror r9
   16ef0:	andeq	r7, r1, r8, asr #11
   16ef4:	andeq	r7, r1, r8, lsr #1
   16ef8:	andeq	r7, r1, r8, ror #11
   16efc:	strdeq	r7, [r1], -ip
   16f00:	andeq	r7, r1, r0, lsl r6
   16f04:	andeq	r7, r1, ip, ror r9
   16f08:	andeq	r6, r1, r8, asr pc
   16f0c:	andeq	r7, r1, r8, lsr #1
   16f10:	andeq	r7, r1, ip, ror r9
   16f14:	andeq	r7, r1, r0, lsr #12
   16f18:	andeq	r7, r1, r8, lsr r6
   16f1c:	andeq	r7, r1, ip, asr #12
   16f20:	andeq	r7, r1, r0, lsl #15
   16f24:	andeq	r7, r1, r8, lsr #15
   16f28:	andeq	r7, r1, ip, ror r9
   16f2c:			; <UNDEFINED> instruction: 0x000173b0
   16f30:	andeq	r7, r1, r8, lsl #16
   16f34:	andeq	r8, r1, ip, lsr r2
   16f38:	andeq	r7, r1, r8, lsr #16
   16f3c:	andeq	r7, r1, r8, asr #17
   16f40:	andeq	r7, r1, r8, lsr #18
   16f44:	andeq	r7, r1, ip, ror r9
   16f48:	andeq	r7, r1, ip, asr r9
   16f4c:	andeq	r7, r1, r4, ror r9
   16f50:			; <UNDEFINED> instruction: 0x00017ab8
   16f54:	andeq	r7, r1, r8, ror #2
   16f58:	cmp	r0, #69	; 0x45
   16f5c:	beq	1797c <__assert_fail@plt+0x6374>
   16f60:	ldr	r2, [sp, #80]	; 0x50
   16f64:	str	lr, [sp, #84]	; 0x54
   16f68:	movw	ip, #9363	; 0x2493
   16f6c:	movt	ip, #37449	; 0x9249
   16f70:	ldr	r6, [r2, #28]
   16f74:	ldr	r8, [r2, #24]
   16f78:	ldr	lr, [r2, #20]
   16f7c:	movw	r2, #382	; 0x17e
   16f80:	add	r2, r6, r2
   16f84:	cmp	lr, #0
   16f88:	sub	r2, r2, r8
   16f8c:	smmla	r4, r2, ip, r2
   16f90:	asr	r7, r4, #2
   16f94:	add	r4, r7, r4, lsr #31
   16f98:	rsb	r4, r4, r4, lsl #3
   16f9c:	sub	r2, r4, r2
   16fa0:	add	r2, r6, r2
   16fa4:	add	r4, r2, #3
   16fa8:	mvn	r2, #99	; 0x63
   16fac:	movwlt	r2, #300	; 0x12c
   16fb0:	cmn	r4, #1
   16fb4:	add	r2, r2, lr
   16fb8:	ble	17c44 <__assert_fail@plt+0x663c>
   16fbc:	movw	r7, #365	; 0x16d
   16fc0:	tst	r2, #3
   16fc4:	bne	17010 <__assert_fail@plt+0x5a08>
   16fc8:	movw	r7, #34079	; 0x851f
   16fcc:	mov	ip, #100	; 0x64
   16fd0:	movt	r7, #20971	; 0x51eb
   16fd4:	smmul	r7, r2, r7
   16fd8:	asr	r3, r7, #5
   16fdc:	add	r3, r3, r7, lsr #31
   16fe0:	mls	ip, r3, ip, r2
   16fe4:	asr	r3, r7, #7
   16fe8:	add	r3, r3, r7, lsr #31
   16fec:	mov	r7, #400	; 0x190
   16ff0:	mls	r2, r3, r7, r2
   16ff4:	movw	r7, #365	; 0x16d
   16ff8:	cmp	r2, #0
   16ffc:	movweq	r7, #366	; 0x16e
   17000:	cmp	ip, #0
   17004:	movw	ip, #9363	; 0x2493
   17008:	movt	ip, #37449	; 0x9249
   1700c:	movwne	r7, #366	; 0x16e
   17010:	movw	r3, #382	; 0x17e
   17014:	add	r2, r8, r7
   17018:	add	r3, r6, r3
   1701c:	sub	r2, r3, r2
   17020:	smmla	r2, r2, ip, r2
   17024:	asr	r3, r2, #2
   17028:	add	r2, r3, r2, lsr #31
   1702c:	movw	r3, #379	; 0x17b
   17030:	rsb	r2, r2, r2, lsl #3
   17034:	add	r2, r2, r8
   17038:	sub	r2, r2, r3
   1703c:	mov	r3, #1
   17040:	cmn	r2, #1
   17044:	eor	r3, r3, r2, lsr #31
   17048:	movgt	r4, r2
   1704c:	cmp	r1, #71	; 0x47
   17050:	beq	17cc8 <__assert_fail@plt+0x66c0>
   17054:	cmp	r1, #103	; 0x67
   17058:	bne	17d1c <__assert_fail@plt+0x6714>
   1705c:	movw	r2, #34079	; 0x851f
   17060:	mov	ip, #2
   17064:	movt	r2, #20971	; 0x51eb
   17068:	smmul	r7, lr, r2
   1706c:	asr	r6, r7, #5
   17070:	add	r7, r6, r7, lsr #31
   17074:	mov	r6, #100	; 0x64
   17078:	mls	r7, r7, r6, lr
   1707c:	add	r7, r3, r7
   17080:	smmul	r2, r7, r2
   17084:	asr	r4, r2, #5
   17088:	add	r2, r4, r2, lsr #31
   1708c:	mls	r4, r2, r6, r7
   17090:	mov	r2, #0
   17094:	cmn	r4, #1
   17098:	ble	17f64 <__assert_fail@plt+0x695c>
   1709c:	ldr	lr, [sp, #84]	; 0x54
   170a0:	mov	r3, r4
   170a4:	b	17fa4 <__assert_fail@plt+0x699c>
   170a8:	ldr	r2, [sp, #100]	; 0x64
   170ac:	mov	r6, #0
   170b0:	cmp	r0, #69	; 0x45
   170b4:	orr	r2, r7, r2
   170b8:	str	r2, [sp, #100]	; 0x64
   170bc:	beq	1797c <__assert_fail@plt+0x6374>
   170c0:	b	1823c <__assert_fail@plt+0x6c34>
   170c4:	ldr	ip, [sp, #92]	; 0x5c
   170c8:	sub	r8, sl, #1
   170cc:	b	17984 <__assert_fail@plt+0x637c>
   170d0:	ldr	r0, [sp, #88]	; 0x58
   170d4:	ldr	ip, [sp, #92]	; 0x5c
   170d8:	sub	r8, sl, #1
   170dc:	cmp	r8, r0
   170e0:	bne	17984 <__assert_fail@plt+0x637c>
   170e4:	ldr	r1, [sp, #96]	; 0x60
   170e8:	subs	r0, r5, #45	; 0x2d
   170ec:	bicne	r0, r9, r9, asr #31
   170f0:	cmp	r0, #1
   170f4:	mov	r6, r0
   170f8:	movls	r6, #1
   170fc:	sub	r1, r1, lr
   17100:	cmp	r6, r1
   17104:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   17108:	cmp	ip, #0
   1710c:	beq	17488 <__assert_fail@plt+0x5e80>
   17110:	mov	r1, #37	; 0x25
   17114:	cmp	r0, #2
   17118:	bcc	18460 <__assert_fail@plt+0x6e58>
   1711c:	uxtb	r1, r5
   17120:	sub	r4, r0, #1
   17124:	cmp	r1, #48	; 0x30
   17128:	cmpne	r1, #43	; 0x2b
   1712c:	bne	18438 <__assert_fail@plt+0x6e30>
   17130:	mov	r0, ip
   17134:	mov	r1, #48	; 0x30
   17138:	b	18440 <__assert_fail@plt+0x6e38>
   1713c:	mov	r6, #1
   17140:	ldrb	r2, [sl, r6]
   17144:	cmp	r2, #58	; 0x3a
   17148:	bne	1715c <__assert_fail@plt+0x5b54>
   1714c:	add	r6, r6, #1
   17150:	ldrb	r2, [sl, r6]
   17154:	cmp	r2, #58	; 0x3a
   17158:	beq	1714c <__assert_fail@plt+0x5b44>
   1715c:	cmp	r2, #122	; 0x7a
   17160:	bne	1797c <__assert_fail@plt+0x6374>
   17164:	add	sl, sl, r6
   17168:	ldr	r3, [sp, #80]	; 0x50
   1716c:	ldr	r2, [r3, #32]
   17170:	cmp	r2, #0
   17174:	blt	17cf8 <__assert_fail@plt+0x66f0>
   17178:	str	lr, [sp, #84]	; 0x54
   1717c:	ldr	lr, [r3, #36]	; 0x24
   17180:	cmp	lr, #0
   17184:	blt	17e44 <__assert_fail@plt+0x683c>
   17188:	ldr	ip, [sp, #92]	; 0x5c
   1718c:	mov	r2, #0
   17190:	bne	17e4c <__assert_fail@plt+0x6844>
   17194:	ldr	r2, [sp, #44]	; 0x2c
   17198:	ldrb	r2, [r2]
   1719c:	sub	r2, r2, #45	; 0x2d
   171a0:	clz	r2, r2
   171a4:	lsr	r2, r2, #5
   171a8:	cmp	r6, #3
   171ac:	bls	17e54 <__assert_fail@plt+0x684c>
   171b0:	ldr	lr, [sp, #84]	; 0x54
   171b4:	b	17980 <__assert_fail@plt+0x6378>
   171b8:	cmp	r0, #0
   171bc:	bne	1797c <__assert_fail@plt+0x6374>
   171c0:	ldr	r1, [sp, #100]	; 0x64
   171c4:	mov	r6, #0
   171c8:	orr	r1, r7, r1
   171cc:	str	r1, [sp, #100]	; 0x64
   171d0:	mov	r1, #65	; 0x41
   171d4:	b	1823c <__assert_fail@plt+0x6c34>
   171d8:	cmp	r0, #69	; 0x45
   171dc:	beq	1797c <__assert_fail@plt+0x6374>
   171e0:	ldr	r1, [sp, #100]	; 0x64
   171e4:	mov	r6, #0
   171e8:	orr	r1, r7, r1
   171ec:	str	r1, [sp, #100]	; 0x64
   171f0:	mov	r1, #66	; 0x42
   171f4:	b	1823c <__assert_fail@plt+0x6c34>
   171f8:	cmp	r0, #69	; 0x45
   171fc:	bne	17d38 <__assert_fail@plt+0x6730>
   17200:	mov	r6, #0
   17204:	mov	r1, #67	; 0x43
   17208:	b	1823c <__assert_fail@plt+0x6c34>
   1720c:	cmp	r0, #0
   17210:	bne	1797c <__assert_fail@plt+0x6374>
   17214:	movw	r4, #3122	; 0xc32
   17218:	movt	r4, #2
   1721c:	b	173e8 <__assert_fail@plt+0x5de0>
   17220:	cmp	r0, #0
   17224:	bne	1797c <__assert_fail@plt+0x6374>
   17228:	movw	r4, #3131	; 0xc3b
   1722c:	cmp	r5, #0
   17230:	movt	r4, #2
   17234:	bne	17f84 <__assert_fail@plt+0x697c>
   17238:	cmp	r9, #0
   1723c:	bge	17f84 <__assert_fail@plt+0x697c>
   17240:	mov	r5, #43	; 0x2b
   17244:	mov	r8, #4
   17248:	b	173e8 <__assert_fail@plt+0x5de0>
   1724c:	cmp	r0, #69	; 0x45
   17250:	beq	1797c <__assert_fail@plt+0x6374>
   17254:	ldr	r2, [sp, #56]	; 0x38
   17258:	ldr	r3, [r2]
   1725c:	b	17660 <__assert_fail@plt+0x6058>
   17260:	mov	ip, #2
   17264:	cmp	r0, #69	; 0x45
   17268:	beq	1797c <__assert_fail@plt+0x6374>
   1726c:	ldr	r3, [sp, #52]	; 0x34
   17270:	b	17664 <__assert_fail@plt+0x605c>
   17274:	cmp	r0, #69	; 0x45
   17278:	beq	1797c <__assert_fail@plt+0x6374>
   1727c:	ldr	r2, [sp, #80]	; 0x50
   17280:	ldr	r3, [r2, #4]
   17284:	b	17660 <__assert_fail@plt+0x6058>
   17288:	cmp	r0, #69	; 0x45
   1728c:	beq	1797c <__assert_fail@plt+0x6374>
   17290:	ldr	r0, [fp, #24]
   17294:	cmp	r9, #1
   17298:	mov	r4, #9
   1729c:	mov	r7, #8
   172a0:	movwlt	r9, #9
   172a4:	cmp	r9, r4
   172a8:	bge	172d0 <__assert_fail@plt+0x5cc8>
   172ac:	movw	r1, #26215	; 0x6667
   172b0:	sub	r7, r7, #1
   172b4:	sub	r4, r4, #1
   172b8:	movt	r1, #26214	; 0x6666
   172bc:	smmul	r0, r0, r1
   172c0:	asr	r1, r0, #2
   172c4:	add	r0, r1, r0, lsr #31
   172c8:	cmp	r9, r4
   172cc:	blt	172ac <__assert_fail@plt+0x5ca4>
   172d0:	movw	r1, #26215	; 0x6667
   172d4:	cmp	r4, #2
   172d8:	movt	r1, #26214	; 0x6666
   172dc:	blt	172fc <__assert_fail@plt+0x5cf4>
   172e0:	smmul	r2, r0, r1
   172e4:	asr	r3, r2, #2
   172e8:	add	r2, r3, r2, lsr #31
   172ec:	add	r2, r2, r2, lsl #2
   172f0:	sub	r2, r0, r2, lsl #1
   172f4:	cmp	r2, #0
   172f8:	beq	172ac <__assert_fail@plt+0x5ca4>
   172fc:	cmp	r4, #1
   17300:	mov	r2, r7
   17304:	sub	ip, fp, #48	; 0x30
   17308:	blt	17340 <__assert_fail@plt+0x5d38>
   1730c:	smmul	r3, r0, r1
   17310:	asr	r6, r3, #2
   17314:	add	r3, r6, r3, lsr #31
   17318:	add	r6, r3, r3, lsl #2
   1731c:	sub	r0, r0, r6, lsl #1
   17320:	add	r0, r0, #48	; 0x30
   17324:	strb	r0, [ip, r2]
   17328:	sub	r0, r2, #1
   1732c:	add	r2, r2, #1
   17330:	cmp	r2, #1
   17334:	mov	r2, r0
   17338:	mov	r0, r3
   1733c:	bgt	1730c <__assert_fail@plt+0x5d04>
   17340:	ldr	r0, [sp, #96]	; 0x60
   17344:	cmp	r5, #0
   17348:	movweq	r5, #48	; 0x30
   1734c:	sub	r8, r0, lr
   17350:	cmp	r4, r8
   17354:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   17358:	ldr	r6, [sp, #92]	; 0x5c
   1735c:	mov	ip, #0
   17360:	cmp	r6, #0
   17364:	beq	1805c <__assert_fail@plt+0x6a54>
   17368:	ldr	r0, [sp, #100]	; 0x64
   1736c:	tst	r0, #1
   17370:	beq	18040 <__assert_fail@plt+0x6a38>
   17374:	cmp	r4, #0
   17378:	beq	18058 <__assert_fail@plt+0x6a50>
   1737c:	str	lr, [sp, #84]	; 0x54
   17380:	bl	1147c <__ctype_toupper_loc@plt>
   17384:	ldr	lr, [sp, #84]	; 0x54
   17388:	sub	r3, fp, #48	; 0x30
   1738c:	ldrb	r1, [r3, r7]
   17390:	ldr	r2, [r0]
   17394:	ldr	r1, [r2, r1, lsl #2]
   17398:	strb	r1, [r6, r7]
   1739c:	sub	r7, r7, #1
   173a0:	cmn	r7, #1
   173a4:	bne	1738c <__assert_fail@plt+0x5d84>
   173a8:	b	18058 <__assert_fail@plt+0x6a50>
   173ac:	mov	r6, #1
   173b0:	ldr	r2, [sp, #100]	; 0x64
   173b4:	eor	r1, r7, #1
   173b8:	orr	r6, r7, r6
   173bc:	and	r2, r2, r1
   173c0:	mov	r1, #112	; 0x70
   173c4:	str	r2, [sp, #100]	; 0x64
   173c8:	b	1823c <__assert_fail@plt+0x6c34>
   173cc:	cmp	r0, #69	; 0x45
   173d0:	beq	1797c <__assert_fail@plt+0x6374>
   173d4:	ldr	r2, [sp, #80]	; 0x50
   173d8:	ldr	r3, [r2]
   173dc:	b	17660 <__assert_fail@plt+0x6058>
   173e0:	movw	r4, #3140	; 0xc44
   173e4:	movt	r4, #2
   173e8:	ldr	r0, [sp, #100]	; 0x64
   173ec:	mvn	r1, #0
   173f0:	mov	r2, r4
   173f4:	and	r0, r0, #1
   173f8:	str	r0, [sp, #100]	; 0x64
   173fc:	stm	sp, {r0, r5, r8}
   17400:	ldr	r0, [fp, #20]
   17404:	str	lr, [sp, #84]	; 0x54
   17408:	ldr	r3, [sp, #80]	; 0x50
   1740c:	str	r0, [sp, #12]
   17410:	ldr	r0, [fp, #24]
   17414:	str	r0, [sp, #16]
   17418:	mov	r0, #0
   1741c:	bl	16a6c <__assert_fail@plt+0x5464>
   17420:	mov	r7, r0
   17424:	subs	r0, r5, #45	; 0x2d
   17428:	ldr	lr, [sp, #84]	; 0x54
   1742c:	ldr	r1, [sp, #96]	; 0x60
   17430:	movne	r0, r9
   17434:	cmp	r9, #0
   17438:	mov	r6, r7
   1743c:	movwlt	r0, #0
   17440:	cmp	r0, r7
   17444:	movhi	r6, r0
   17448:	sub	r9, r1, lr
   1744c:	cmp	r6, r9
   17450:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   17454:	ldr	ip, [sp, #92]	; 0x5c
   17458:	cmp	ip, #0
   1745c:	beq	17488 <__assert_fail@plt+0x5e80>
   17460:	cmp	r0, r7
   17464:	bls	17acc <__assert_fail@plt+0x64c4>
   17468:	cmp	r5, #48	; 0x30
   1746c:	sub	r2, r0, r7
   17470:	cmpne	r5, #43	; 0x2b
   17474:	str	r2, [sp, #88]	; 0x58
   17478:	bne	17ee8 <__assert_fail@plt+0x68e0>
   1747c:	mov	r0, ip
   17480:	mov	r1, #48	; 0x30
   17484:	b	17ef0 <__assert_fail@plt+0x68e8>
   17488:	mov	ip, #0
   1748c:	b	17f40 <__assert_fail@plt+0x6938>
   17490:	cmp	r0, #69	; 0x45
   17494:	beq	1797c <__assert_fail@plt+0x6374>
   17498:	ldr	r3, [sp, #80]	; 0x50
   1749c:	ldr	r2, [r3, #24]
   174a0:	ldr	r3, [r3, #28]
   174a4:	add	r3, r3, #7
   174a8:	sub	r2, r3, r2
   174ac:	movw	r3, #9363	; 0x2493
   174b0:	movt	r3, #37449	; 0x9249
   174b4:	smmla	r2, r2, r3, r2
   174b8:	b	174fc <__assert_fail@plt+0x5ef4>
   174bc:	cmp	r0, #69	; 0x45
   174c0:	beq	1797c <__assert_fail@plt+0x6374>
   174c4:	ldr	r3, [sp, #80]	; 0x50
   174c8:	movw	r7, #9363	; 0x2493
   174cc:	movt	r7, #37449	; 0x9249
   174d0:	ldr	r2, [r3, #24]
   174d4:	ldr	r3, [r3, #28]
   174d8:	add	r2, r2, #6
   174dc:	smmla	r6, r2, r7, r2
   174e0:	asr	r4, r6, #2
   174e4:	add	r6, r4, r6, lsr #31
   174e8:	rsb	r6, r6, r6, lsl #3
   174ec:	sub	r2, r6, r2
   174f0:	add	r2, r3, r2
   174f4:	add	r2, r2, #7
   174f8:	smmla	r2, r2, r7, r2
   174fc:	asr	r3, r2, #2
   17500:	add	r3, r3, r2, lsr #31
   17504:	b	17660 <__assert_fail@plt+0x6058>
   17508:	cmp	r0, #79	; 0x4f
   1750c:	beq	1797c <__assert_fail@plt+0x6374>
   17510:	mov	r6, #0
   17514:	mov	r1, #88	; 0x58
   17518:	b	1823c <__assert_fail@plt+0x6c34>
   1751c:	cmp	r0, #69	; 0x45
   17520:	beq	17edc <__assert_fail@plt+0x68d4>
   17524:	cmp	r0, #79	; 0x4f
   17528:	beq	1797c <__assert_fail@plt+0x6374>
   1752c:	ldr	r2, [sp, #80]	; 0x50
   17530:	movw	r7, #63636	; 0xf894
   17534:	mov	ip, #4
   17538:	movt	r7, #65535	; 0xffff
   1753c:	ldr	r3, [r2, #20]
   17540:	mov	r2, #0
   17544:	cmp	r3, r7
   17548:	movw	r7, #1900	; 0x76c
   1754c:	movwlt	r2, #1
   17550:	add	r3, r3, r7
   17554:	b	17fa4 <__assert_fail@plt+0x699c>
   17558:	ldr	r0, [sp, #44]	; 0x2c
   1755c:	ldr	r8, [sp, #100]	; 0x64
   17560:	subs	r6, r5, #45	; 0x2d
   17564:	str	lr, [sp, #84]	; 0x54
   17568:	bicne	r6, r9, r9, asr #31
   1756c:	bl	114b8 <strlen@plt>
   17570:	ldr	lr, [sp, #84]	; 0x54
   17574:	mov	r9, r0
   17578:	cmp	r6, r0
   1757c:	mov	r4, r0
   17580:	ldr	r0, [sp, #96]	; 0x60
   17584:	movhi	r4, r6
   17588:	sub	r0, r0, lr
   1758c:	cmp	r4, r0
   17590:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   17594:	ldr	r0, [sp, #92]	; 0x5c
   17598:	cmp	r0, #0
   1759c:	beq	17dd4 <__assert_fail@plt+0x67cc>
   175a0:	cmp	r6, r9
   175a4:	mov	ip, r0
   175a8:	bls	180c0 <__assert_fail@plt+0x6ab8>
   175ac:	uxtb	r1, r5
   175b0:	sub	r2, r6, r9
   175b4:	cmp	r1, #48	; 0x30
   175b8:	cmpne	r1, #43	; 0x2b
   175bc:	bne	180a8 <__assert_fail@plt+0x6aa0>
   175c0:	mov	r1, #48	; 0x30
   175c4:	b	180ac <__assert_fail@plt+0x6aa4>
   175c8:	cmp	r0, #0
   175cc:	bne	1797c <__assert_fail@plt+0x6374>
   175d0:	ldr	r1, [sp, #100]	; 0x64
   175d4:	mov	r6, #0
   175d8:	orr	r1, r7, r1
   175dc:	str	r1, [sp, #100]	; 0x64
   175e0:	mov	r1, #97	; 0x61
   175e4:	b	1823c <__assert_fail@plt+0x6c34>
   175e8:	cmp	r0, #79	; 0x4f
   175ec:	beq	1797c <__assert_fail@plt+0x6374>
   175f0:	mov	r6, #0
   175f4:	mov	r1, #99	; 0x63
   175f8:	b	1823c <__assert_fail@plt+0x6c34>
   175fc:	cmp	r0, #69	; 0x45
   17600:	beq	1797c <__assert_fail@plt+0x6374>
   17604:	ldr	r2, [sp, #48]	; 0x30
   17608:	ldr	r3, [r2]
   1760c:	b	17660 <__assert_fail@plt+0x6058>
   17610:	ldr	r2, [sp, #48]	; 0x30
   17614:	cmp	r0, #69	; 0x45
   17618:	bne	17644 <__assert_fail@plt+0x603c>
   1761c:	b	1797c <__assert_fail@plt+0x6374>
   17620:	cmp	r0, #69	; 0x45
   17624:	beq	1797c <__assert_fail@plt+0x6374>
   17628:	ldr	r2, [sp, #80]	; 0x50
   1762c:	mov	ip, #3
   17630:	ldr	r3, [r2, #28]
   17634:	b	17794 <__assert_fail@plt+0x618c>
   17638:	ldr	r2, [sp, #56]	; 0x38
   1763c:	cmp	r0, #69	; 0x45
   17640:	beq	1797c <__assert_fail@plt+0x6374>
   17644:	ldr	r3, [r2]
   17648:	b	17658 <__assert_fail@plt+0x6050>
   1764c:	ldr	r3, [sp, #52]	; 0x34
   17650:	cmp	r0, #69	; 0x45
   17654:	beq	1797c <__assert_fail@plt+0x6374>
   17658:	cmp	r5, #0
   1765c:	movweq	r5, #95	; 0x5f
   17660:	mov	ip, #2
   17664:	lsr	r2, r3, #31
   17668:	cmp	r2, #0
   1766c:	mov	r7, #0
   17670:	mov	r4, #0
   17674:	movwne	r2, #1
   17678:	cmp	r0, #79	; 0x4f
   1767c:	moveq	r6, #0
   17680:	cmpeq	r2, #0
   17684:	beq	1823c <__assert_fail@plt+0x6c34>
   17688:	ldr	r8, [sp, #72]	; 0x48
   1768c:	cmp	r2, #0
   17690:	rsbne	r3, r3, #0
   17694:	tst	r7, #1
   17698:	asr	r7, r7, #1
   1769c:	movne	r0, #58	; 0x3a
   176a0:	strbne	r0, [r8, #-1]!
   176a4:	movw	r0, #52429	; 0xcccd
   176a8:	cmp	r3, #9
   176ac:	movt	r0, #52428	; 0xcccc
   176b0:	umull	r0, r1, r3, r0
   176b4:	lsr	r0, r1, #3
   176b8:	add	r1, r0, r0, lsl #2
   176bc:	sub	r1, r3, r1, lsl #1
   176c0:	mov	r3, r0
   176c4:	orr	r1, r1, #48	; 0x30
   176c8:	strb	r1, [r8, #-1]!
   176cc:	bhi	17694 <__assert_fail@plt+0x608c>
   176d0:	cmp	r7, #0
   176d4:	mov	r3, r0
   176d8:	bne	17694 <__assert_fail@plt+0x608c>
   176dc:	cmp	r9, #0
   176e0:	ldr	r7, [sp, #92]	; 0x5c
   176e4:	str	sl, [sp, #88]	; 0x58
   176e8:	movlt	r9, ip
   176ec:	ldr	ip, [sp, #100]	; 0x64
   176f0:	cmp	r4, #0
   176f4:	movwne	r4, #43	; 0x2b
   176f8:	cmp	r5, #0
   176fc:	movweq	r5, #48	; 0x30
   17700:	ldr	r1, [sp, #72]	; 0x48
   17704:	cmp	r2, #0
   17708:	mov	r0, r9
   1770c:	movwne	r4, #45	; 0x2d
   17710:	cmp	r4, #0
   17714:	subne	r0, r0, #1
   17718:	sub	r3, r1, r8
   1771c:	sub	r6, r0, r3
   17720:	cmp	r6, #1
   17724:	movwlt	r6, #0
   17728:	subs	sl, r5, #45	; 0x2d
   1772c:	moveq	r6, sl
   17730:	cmp	r4, #0
   17734:	beq	17778 <__assert_fail@plt+0x6170>
   17738:	cmp	r5, #95	; 0x5f
   1773c:	bne	17ae4 <__assert_fail@plt+0x64dc>
   17740:	cmp	r7, #0
   17744:	beq	17ad8 <__assert_fail@plt+0x64d0>
   17748:	mov	r0, r7
   1774c:	mov	r1, #32
   17750:	mov	r2, r6
   17754:	str	lr, [sp, #84]	; 0x54
   17758:	str	ip, [sp, #100]	; 0x64
   1775c:	str	r3, [sp, #32]
   17760:	bl	1150c <memset@plt>
   17764:	ldr	r3, [sp, #32]
   17768:	ldr	ip, [sp, #100]	; 0x64
   1776c:	ldr	lr, [sp, #84]	; 0x54
   17770:	add	r7, r7, r6
   17774:	b	17adc <__assert_fail@plt+0x64d4>
   17778:	mov	r6, #-2147483648	; 0x80000000
   1777c:	b	17b0c <__assert_fail@plt+0x6504>
   17780:	cmp	r0, #69	; 0x45
   17784:	beq	1797c <__assert_fail@plt+0x6374>
   17788:	ldr	r2, [sp, #80]	; 0x50
   1778c:	mov	ip, #2
   17790:	ldr	r3, [r2, #16]
   17794:	mov	r2, #0
   17798:	cmn	r3, #1
   1779c:	add	r3, r3, #1
   177a0:	movwlt	r2, #1
   177a4:	b	17668 <__assert_fail@plt+0x6060>
   177a8:	ldr	r1, [sp, #96]	; 0x60
   177ac:	subs	r0, r5, #45	; 0x2d
   177b0:	bicne	r0, r9, r9, asr #31
   177b4:	cmp	r0, #1
   177b8:	mov	r6, r0
   177bc:	movls	r6, #1
   177c0:	sub	r1, r1, lr
   177c4:	cmp	r6, r1
   177c8:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   177cc:	ldr	ip, [sp, #92]	; 0x5c
   177d0:	movw	r4, #52428	; 0xcccc
   177d4:	movt	r4, #3276	; 0xccc
   177d8:	cmp	ip, #0
   177dc:	beq	17b74 <__assert_fail@plt+0x656c>
   177e0:	cmp	r0, #2
   177e4:	bcc	181c8 <__assert_fail@plt+0x6bc0>
   177e8:	uxtb	r1, r5
   177ec:	sub	r4, r0, #1
   177f0:	cmp	r1, #48	; 0x30
   177f4:	cmpne	r1, #43	; 0x2b
   177f8:	bne	1819c <__assert_fail@plt+0x6b94>
   177fc:	mov	r0, ip
   17800:	mov	r1, #48	; 0x30
   17804:	b	181a4 <__assert_fail@plt+0x6b9c>
   17808:	ldr	r2, [sp, #80]	; 0x50
   1780c:	mov	r3, #11
   17810:	mov	ip, #1
   17814:	ldr	r2, [r2, #16]
   17818:	mul	r2, r2, r3
   1781c:	add	r3, ip, r2, asr #5
   17820:	mov	r2, #0
   17824:	b	17668 <__assert_fail@plt+0x6060>
   17828:	ldr	r2, [sp, #80]	; 0x50
   1782c:	mov	r0, #28
   17830:	add	r1, sp, #104	; 0x68
   17834:	mov	r6, lr
   17838:	mov	r4, r1
   1783c:	mov	r3, r2
   17840:	add	r2, r2, #16
   17844:	vld1.32	{d16-d17}, [r3], r0
   17848:	vld1.32	{d18-d19}, [r2]
   1784c:	add	r2, r1, #16
   17850:	vld1.32	{d20-d21}, [r3]
   17854:	vst1.64	{d16-d17}, [r4], r0
   17858:	mvn	r0, #0
   1785c:	vst1.64	{d18-d19}, [r2]
   17860:	vst1.32	{d20-d21}, [r4]
   17864:	str	r0, [r4]
   17868:	ldr	r0, [fp, #20]
   1786c:	bl	1aa70 <__assert_fail@plt+0x9468>
   17870:	ldr	r1, [r4]
   17874:	cmp	r1, #0
   17878:	blt	184c0 <__assert_fail@plt+0x6eb8>
   1787c:	cmp	r0, #0
   17880:	blt	17ddc <__assert_fail@plt+0x67d4>
   17884:	ldr	r4, [sp, #100]	; 0x64
   17888:	ldr	r1, [sp, #28]
   1788c:	mov	r2, r0
   17890:	movw	r3, #26215	; 0x6667
   17894:	movt	r3, #26214	; 0x6666
   17898:	smmul	r3, r2, r3
   1789c:	asr	r7, r3, #2
   178a0:	add	r3, r7, r3, lsr #31
   178a4:	add	r7, r3, r3, lsl #2
   178a8:	sub	r7, r2, r7, lsl #1
   178ac:	add	r2, r2, #9
   178b0:	add	r7, r7, #48	; 0x30
   178b4:	cmp	r2, #18
   178b8:	mov	r2, r3
   178bc:	strb	r7, [r1], #-1
   178c0:	bhi	17890 <__assert_fail@plt+0x6288>
   178c4:	b	17e1c <__assert_fail@plt+0x6814>
   178c8:	ldr	r1, [sp, #96]	; 0x60
   178cc:	subs	r0, r5, #45	; 0x2d
   178d0:	bicne	r0, r9, r9, asr #31
   178d4:	cmp	r0, #1
   178d8:	mov	r6, r0
   178dc:	movls	r6, #1
   178e0:	sub	r1, r1, lr
   178e4:	cmp	r6, r1
   178e8:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   178ec:	ldr	ip, [sp, #92]	; 0x5c
   178f0:	movw	r4, #52428	; 0xcccc
   178f4:	movt	r4, #3276	; 0xccc
   178f8:	cmp	ip, #0
   178fc:	beq	17b74 <__assert_fail@plt+0x656c>
   17900:	cmp	r0, #2
   17904:	bcc	18200 <__assert_fail@plt+0x6bf8>
   17908:	uxtb	r1, r5
   1790c:	sub	r4, r0, #1
   17910:	cmp	r1, #48	; 0x30
   17914:	cmpne	r1, #43	; 0x2b
   17918:	bne	181d4 <__assert_fail@plt+0x6bcc>
   1791c:	mov	r0, ip
   17920:	mov	r1, #48	; 0x30
   17924:	b	181dc <__assert_fail@plt+0x6bd4>
   17928:	ldr	r2, [sp, #80]	; 0x50
   1792c:	movw	r3, #9363	; 0x2493
   17930:	mov	ip, #1
   17934:	movt	r3, #37449	; 0x9249
   17938:	ldr	r2, [r2, #24]
   1793c:	add	r2, r2, #6
   17940:	smmla	r3, r2, r3, r2
   17944:	asr	r7, r3, #2
   17948:	add	r3, r7, r3, lsr #31
   1794c:	rsb	r3, r3, r3, lsl #3
   17950:	sub	r2, r2, r3
   17954:	add	r3, r2, #1
   17958:	b	17664 <__assert_fail@plt+0x605c>
   1795c:	cmp	r0, #69	; 0x45
   17960:	beq	1797c <__assert_fail@plt+0x6374>
   17964:	ldr	r2, [sp, #80]	; 0x50
   17968:	mov	ip, #1
   1796c:	ldr	r3, [r2, #24]
   17970:	b	17664 <__assert_fail@plt+0x605c>
   17974:	cmp	r0, #79	; 0x4f
   17978:	bne	17d8c <__assert_fail@plt+0x6784>
   1797c:	ldr	ip, [sp, #92]	; 0x5c
   17980:	mov	r8, sl
   17984:	ldr	r1, [sp, #88]	; 0x58
   17988:	subs	r7, r5, #45	; 0x2d
   1798c:	bicne	r7, r9, r9, asr #31
   17990:	sub	r0, r8, r1
   17994:	add	r6, r0, #1
   17998:	ldr	r0, [sp, #96]	; 0x60
   1799c:	cmp	r7, r6
   179a0:	mov	r4, r6
   179a4:	movhi	r4, r7
   179a8:	sub	r0, r0, lr
   179ac:	cmp	r4, r0
   179b0:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   179b4:	cmp	ip, #0
   179b8:	beq	179ec <__assert_fail@plt+0x63e4>
   179bc:	cmp	r7, r6
   179c0:	mov	r9, ip
   179c4:	bls	17a18 <__assert_fail@plt+0x6410>
   179c8:	uxtb	r0, r5
   179cc:	mov	sl, lr
   179d0:	sub	r9, r7, r6
   179d4:	cmp	r0, #48	; 0x30
   179d8:	cmpne	r0, #43	; 0x2b
   179dc:	bne	179f4 <__assert_fail@plt+0x63ec>
   179e0:	mov	r0, ip
   179e4:	mov	r1, #48	; 0x30
   179e8:	b	179fc <__assert_fail@plt+0x63f4>
   179ec:	mov	ip, #0
   179f0:	b	17a90 <__assert_fail@plt+0x6488>
   179f4:	mov	r0, ip
   179f8:	mov	r1, #32
   179fc:	mov	r2, r9
   17a00:	mov	r5, ip
   17a04:	bl	1150c <memset@plt>
   17a08:	ldr	r1, [sp, #88]	; 0x58
   17a0c:	add	r9, r5, r9
   17a10:	mov	lr, sl
   17a14:	mov	ip, r5
   17a18:	ldr	r0, [sp, #100]	; 0x64
   17a1c:	tst	r0, #1
   17a20:	beq	17a78 <__assert_fail@plt+0x6470>
   17a24:	cmp	r6, #0
   17a28:	beq	17a8c <__assert_fail@plt+0x6484>
   17a2c:	add	r0, r8, #1
   17a30:	sub	r5, r1, r8
   17a34:	mov	sl, lr
   17a38:	sub	r0, r0, r1
   17a3c:	cmp	r7, r0
   17a40:	movhi	r0, r7
   17a44:	add	r0, ip, r0
   17a48:	sub	r7, r0, #1
   17a4c:	bl	1147c <__ctype_toupper_loc@plt>
   17a50:	ldr	r3, [sp, #88]	; 0x58
   17a54:	mov	lr, sl
   17a58:	ldrb	r1, [r3, -r5]
   17a5c:	ldr	r2, [r0]
   17a60:	add	r5, r5, #1
   17a64:	cmp	r5, #1
   17a68:	ldr	r1, [r2, r1, lsl #2]
   17a6c:	strb	r1, [r7], #-1
   17a70:	bne	17a58 <__assert_fail@plt+0x6450>
   17a74:	b	17a8c <__assert_fail@plt+0x6484>
   17a78:	mov	r0, r9
   17a7c:	mov	r2, r6
   17a80:	mov	r5, lr
   17a84:	bl	1135c <memcpy@plt>
   17a88:	mov	lr, r5
   17a8c:	add	ip, r9, r6
   17a90:	add	lr, r4, lr
   17a94:	mov	sl, r8
   17a98:	mov	r6, #-2147483648	; 0x80000000
   17a9c:	movw	r4, #52428	; 0xcccc
   17aa0:	movt	r4, #3276	; 0xccc
   17aa4:	ldrb	r3, [sl, #1]!
   17aa8:	mvn	r9, #0
   17aac:	cmp	r3, #0
   17ab0:	bne	16b50 <__assert_fail@plt+0x5548>
   17ab4:	b	18478 <__assert_fail@plt+0x6e70>
   17ab8:	cmp	r0, #69	; 0x45
   17abc:	bne	17d98 <__assert_fail@plt+0x6790>
   17ac0:	mov	r6, #0
   17ac4:	mov	r1, #121	; 0x79
   17ac8:	b	1823c <__assert_fail@plt+0x6c34>
   17acc:	ldr	r3, [sp, #80]	; 0x50
   17ad0:	ldr	r0, [sp, #100]	; 0x64
   17ad4:	b	17f0c <__assert_fail@plt+0x6904>
   17ad8:	mov	r7, #0
   17adc:	sub	r9, r9, r6
   17ae0:	add	lr, r6, lr
   17ae4:	ldr	r0, [sp, #96]	; 0x60
   17ae8:	mov	r6, #-2147483648	; 0x80000000
   17aec:	sub	r0, r0, lr
   17af0:	cmp	r0, #2
   17af4:	bcc	184a4 <__assert_fail@plt+0x6e9c>
   17af8:	cmp	r7, #0
   17afc:	sub	r9, r9, #1
   17b00:	add	lr, lr, #1
   17b04:	strbne	r4, [r7], #1
   17b08:	moveq	r7, #0
   17b0c:	ldr	r0, [sp, #96]	; 0x60
   17b10:	cmp	r5, #45	; 0x2d
   17b14:	mov	r4, r3
   17b18:	bicne	sl, r9, r9, asr #31
   17b1c:	cmp	sl, r3
   17b20:	movhi	r4, sl
   17b24:	sub	r0, r0, lr
   17b28:	cmp	r4, r0
   17b2c:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   17b30:	cmp	r7, #0
   17b34:	beq	17b6c <__assert_fail@plt+0x6564>
   17b38:	cmp	sl, r3
   17b3c:	mov	r9, r7
   17b40:	bls	17b9c <__assert_fail@plt+0x6594>
   17b44:	cmp	r5, #48	; 0x30
   17b48:	sub	r6, sl, r3
   17b4c:	str	ip, [sp, #100]	; 0x64
   17b50:	str	lr, [sp, #84]	; 0x54
   17b54:	str	r3, [sp, #32]
   17b58:	cmpne	r5, #43	; 0x2b
   17b5c:	bne	17b7c <__assert_fail@plt+0x6574>
   17b60:	mov	r0, r7
   17b64:	mov	r1, #48	; 0x30
   17b68:	b	17b84 <__assert_fail@plt+0x657c>
   17b6c:	mov	ip, #0
   17b70:	b	17c20 <__assert_fail@plt+0x6618>
   17b74:	mov	ip, #0
   17b78:	b	17f48 <__assert_fail@plt+0x6940>
   17b7c:	mov	r0, r7
   17b80:	mov	r1, #32
   17b84:	mov	r2, r6
   17b88:	bl	1150c <memset@plt>
   17b8c:	ldr	lr, [sp, #84]	; 0x54
   17b90:	ldr	ip, [sp, #100]	; 0x64
   17b94:	ldr	r3, [sp, #32]
   17b98:	add	r9, r7, r6
   17b9c:	tst	ip, #1
   17ba0:	beq	17bf8 <__assert_fail@plt+0x65f0>
   17ba4:	cmp	r3, #0
   17ba8:	beq	17c18 <__assert_fail@plt+0x6610>
   17bac:	ldr	r0, [sp, #36]	; 0x24
   17bb0:	cmp	sl, r3
   17bb4:	sub	r6, r8, #1
   17bb8:	movls	sl, r3
   17bbc:	add	r5, r0, r8
   17bc0:	add	r0, r7, sl
   17bc4:	mov	r8, lr
   17bc8:	mov	sl, r3
   17bcc:	sub	r7, r0, #1
   17bd0:	bl	1147c <__ctype_toupper_loc@plt>
   17bd4:	mov	r3, sl
   17bd8:	mov	lr, r8
   17bdc:	ldrb	r1, [r6, -r5]
   17be0:	ldr	r2, [r0]
   17be4:	adds	r5, r5, #1
   17be8:	ldr	r1, [r2, r1, lsl #2]
   17bec:	strb	r1, [r7], #-1
   17bf0:	bne	17bdc <__assert_fail@plt+0x65d4>
   17bf4:	b	17c18 <__assert_fail@plt+0x6610>
   17bf8:	mov	r0, r9
   17bfc:	mov	r1, r8
   17c00:	mov	r2, r3
   17c04:	mov	r5, lr
   17c08:	mov	r6, r3
   17c0c:	bl	1135c <memcpy@plt>
   17c10:	mov	r3, r6
   17c14:	mov	lr, r5
   17c18:	add	ip, r9, r3
   17c1c:	mov	r6, #-2147483648	; 0x80000000
   17c20:	ldr	sl, [sp, #88]	; 0x58
   17c24:	add	lr, r4, lr
   17c28:	movw	r4, #52428	; 0xcccc
   17c2c:	movt	r4, #3276	; 0xccc
   17c30:	ldrb	r3, [sl, #1]!
   17c34:	mvn	r9, #0
   17c38:	cmp	r3, #0
   17c3c:	bne	16b50 <__assert_fail@plt+0x5548>
   17c40:	b	18478 <__assert_fail@plt+0x6e70>
   17c44:	sub	r2, r2, #1
   17c48:	movw	r4, #365	; 0x16d
   17c4c:	tst	r2, #3
   17c50:	bne	17c94 <__assert_fail@plt+0x668c>
   17c54:	movw	r4, #34079	; 0x851f
   17c58:	movt	r4, #20971	; 0x51eb
   17c5c:	smmul	r4, r2, r4
   17c60:	asr	r7, r4, #5
   17c64:	add	r3, r7, r4, lsr #31
   17c68:	mov	r7, #100	; 0x64
   17c6c:	mls	r3, r3, r7, r2
   17c70:	asr	r7, r4, #7
   17c74:	add	r4, r7, r4, lsr #31
   17c78:	mov	r7, #400	; 0x190
   17c7c:	mls	r2, r4, r7, r2
   17c80:	movw	r4, #365	; 0x16d
   17c84:	cmp	r2, #0
   17c88:	movweq	r4, #366	; 0x16e
   17c8c:	cmp	r3, #0
   17c90:	movwne	r4, #366	; 0x16e
   17c94:	add	r2, r4, r6
   17c98:	movw	r4, #382	; 0x17e
   17c9c:	sub	r3, r4, r8
   17ca0:	add	r2, r3, r2
   17ca4:	smmla	r2, r2, ip, r2
   17ca8:	asr	r4, r2, #2
   17cac:	add	r2, r4, r2, lsr #31
   17cb0:	rsb	r2, r2, r2, lsl #3
   17cb4:	sub	r2, r2, r3
   17cb8:	mvn	r3, #0
   17cbc:	add	r4, r2, #3
   17cc0:	cmp	r1, #71	; 0x47
   17cc4:	bne	17054 <__assert_fail@plt+0x5a4c>
   17cc8:	movw	r2, #63636	; 0xf894
   17ccc:	mov	ip, #4
   17cd0:	movt	r2, #65535	; 0xffff
   17cd4:	sub	r7, r2, r3
   17cd8:	add	r3, lr, r3
   17cdc:	mov	r2, #0
   17ce0:	cmp	lr, r7
   17ce4:	ldr	lr, [sp, #84]	; 0x54
   17ce8:	movw	r7, #1900	; 0x76c
   17cec:	movwlt	r2, #1
   17cf0:	add	r3, r3, r7
   17cf4:	b	17fa4 <__assert_fail@plt+0x699c>
   17cf8:	ldr	ip, [sp, #92]	; 0x5c
   17cfc:	movw	r4, #52428	; 0xcccc
   17d00:	mov	r6, #-2147483648	; 0x80000000
   17d04:	movt	r4, #3276	; 0xccc
   17d08:	ldrb	r3, [sl, #1]!
   17d0c:	mvn	r9, #0
   17d10:	cmp	r3, #0
   17d14:	bne	16b50 <__assert_fail@plt+0x5548>
   17d18:	b	18478 <__assert_fail@plt+0x6e70>
   17d1c:	smmla	r2, r4, ip, r4
   17d20:	ldr	lr, [sp, #84]	; 0x54
   17d24:	mov	ip, #2
   17d28:	asr	r3, r2, #2
   17d2c:	add	r2, r3, r2, lsr #31
   17d30:	add	r3, r2, #1
   17d34:	b	17664 <__assert_fail@plt+0x605c>
   17d38:	ldr	r2, [sp, #80]	; 0x50
   17d3c:	movw	r6, #63636	; 0xf894
   17d40:	mov	r3, #0
   17d44:	mvn	r4, #98	; 0x62
   17d48:	mov	ip, #2
   17d4c:	movt	r6, #65535	; 0xffff
   17d50:	ldr	r7, [r2, #20]
   17d54:	mov	r2, #0
   17d58:	cmp	r7, r6
   17d5c:	movwge	r3, #1
   17d60:	cmp	r7, r6
   17d64:	and	r3, r3, r7, lsr #31
   17d68:	movwlt	r2, #1
   17d6c:	smlabb	r3, r3, r4, r7
   17d70:	movw	r4, #34079	; 0x851f
   17d74:	movt	r4, #20971	; 0x51eb
   17d78:	smmul	r3, r3, r4
   17d7c:	asr	r4, r3, #5
   17d80:	add	r3, r4, r3, lsr #31
   17d84:	add	r3, r3, #19
   17d88:	b	17fa4 <__assert_fail@plt+0x699c>
   17d8c:	mov	r6, #0
   17d90:	mov	r1, #120	; 0x78
   17d94:	b	1823c <__assert_fail@plt+0x6c34>
   17d98:	ldr	r2, [sp, #80]	; 0x50
   17d9c:	mov	ip, #2
   17da0:	ldr	r7, [r2, #20]
   17da4:	movw	r2, #34079	; 0x851f
   17da8:	movt	r2, #20971	; 0x51eb
   17dac:	smmul	r2, r7, r2
   17db0:	asr	r3, r2, #5
   17db4:	add	r2, r3, r2, lsr #31
   17db8:	mov	r3, #100	; 0x64
   17dbc:	mls	r6, r2, r3, r7
   17dc0:	mov	r2, #0
   17dc4:	cmn	r6, #1
   17dc8:	ble	17f90 <__assert_fail@plt+0x6988>
   17dcc:	mov	r3, r6
   17dd0:	b	17fa4 <__assert_fail@plt+0x699c>
   17dd4:	mov	ip, #0
   17dd8:	b	18190 <__assert_fail@plt+0x6b88>
   17ddc:	ldr	r4, [sp, #100]	; 0x64
   17de0:	ldr	r1, [sp, #28]
   17de4:	mov	r2, r0
   17de8:	movw	r3, #26215	; 0x6667
   17dec:	movt	r3, #26214	; 0x6666
   17df0:	smmul	r3, r2, r3
   17df4:	asr	r7, r3, #2
   17df8:	add	r3, r7, r3, lsr #31
   17dfc:	add	r7, r3, r3, lsl #2
   17e00:	rsb	r7, r2, r7, lsl #1
   17e04:	add	r2, r2, #9
   17e08:	add	r7, r7, #48	; 0x30
   17e0c:	cmp	r2, #18
   17e10:	mov	r2, r3
   17e14:	strb	r7, [r1], #-1
   17e18:	bhi	17de8 <__assert_fail@plt+0x67e0>
   17e1c:	ldr	r7, [sp, #92]	; 0x5c
   17e20:	cmp	r9, #0
   17e24:	mov	ip, r4
   17e28:	add	r8, r1, #1
   17e2c:	mov	lr, r6
   17e30:	lsr	r2, r0, #31
   17e34:	mov	r4, #0
   17e38:	str	sl, [sp, #88]	; 0x58
   17e3c:	movwlt	r9, #1
   17e40:	b	176f8 <__assert_fail@plt+0x60f0>
   17e44:	ldr	ip, [sp, #92]	; 0x5c
   17e48:	mov	r2, #1
   17e4c:	cmp	r6, #3
   17e50:	bhi	171b0 <__assert_fail@plt+0x5ba8>
   17e54:	movw	ip, #34953	; 0x8889
   17e58:	movt	ip, #34952	; 0x8888
   17e5c:	smmla	r4, lr, ip, lr
   17e60:	asr	r3, r4, #5
   17e64:	add	r4, r3, r4, lsr #31
   17e68:	smmla	r3, r4, ip, r4
   17e6c:	asr	r7, r3, #5
   17e70:	add	r3, r7, r3, lsr #31
   17e74:	rsb	r3, r3, r3, lsl #4
   17e78:	sub	ip, r4, r3, lsl #2
   17e7c:	movw	r3, #46021	; 0xb3c5
   17e80:	rsb	r4, r4, r4, lsl #4
   17e84:	movt	r3, #37282	; 0x91a2
   17e88:	smmla	r3, lr, r3, lr
   17e8c:	asr	r7, r3, #11
   17e90:	add	r3, r7, r3, lsr #31
   17e94:	sub	r7, lr, r4, lsl #2
   17e98:	add	r4, pc, #0
   17e9c:	ldr	pc, [r4, r6, lsl #2]
   17ea0:			; <UNDEFINED> instruction: 0x00017eb0
   17ea4:	andeq	r8, r1, r4, lsl r2
   17ea8:	andeq	r8, r1, ip
   17eac:	andeq	r8, r1, r4
   17eb0:	mov	r7, #100	; 0x64
   17eb4:	mla	r3, r3, r7, ip
   17eb8:	mov	ip, #5
   17ebc:	ldr	lr, [sp, #84]	; 0x54
   17ec0:	mov	r4, #1
   17ec4:	mov	r7, #0
   17ec8:	cmp	r0, #79	; 0x4f
   17ecc:	moveq	r6, #0
   17ed0:	cmpeq	r2, #0
   17ed4:	bne	17688 <__assert_fail@plt+0x6080>
   17ed8:	b	1823c <__assert_fail@plt+0x6c34>
   17edc:	mov	r6, #0
   17ee0:	mov	r1, #89	; 0x59
   17ee4:	b	1823c <__assert_fail@plt+0x6c34>
   17ee8:	mov	r0, ip
   17eec:	mov	r1, #32
   17ef0:	ldr	r2, [sp, #88]	; 0x58
   17ef4:	bl	1150c <memset@plt>
   17ef8:	ldr	r1, [sp, #88]	; 0x58
   17efc:	ldr	ip, [sp, #92]	; 0x5c
   17f00:	ldr	r3, [sp, #80]	; 0x50
   17f04:	ldr	r0, [sp, #100]	; 0x64
   17f08:	add	ip, ip, r1
   17f0c:	stm	sp, {r0, r5, r8}
   17f10:	ldr	r0, [fp, #20]
   17f14:	mov	r2, r4
   17f18:	mov	r1, r9
   17f1c:	mov	r4, ip
   17f20:	str	r0, [sp, #12]
   17f24:	ldr	r0, [fp, #24]
   17f28:	str	r0, [sp, #16]
   17f2c:	mov	r0, ip
   17f30:	bl	16a6c <__assert_fail@plt+0x5464>
   17f34:	ldr	lr, [sp, #84]	; 0x54
   17f38:	mov	ip, r4
   17f3c:	add	ip, r4, r7
   17f40:	movw	r4, #52428	; 0xcccc
   17f44:	movt	r4, #3276	; 0xccc
   17f48:	add	lr, r6, lr
   17f4c:	mov	r6, #-2147483648	; 0x80000000
   17f50:	ldrb	r3, [sl, #1]!
   17f54:	mvn	r9, #0
   17f58:	cmp	r3, #0
   17f5c:	bne	16b50 <__assert_fail@plt+0x5548>
   17f60:	b	18478 <__assert_fail@plt+0x6e70>
   17f64:	movw	r6, #63636	; 0xf894
   17f68:	movt	r6, #65535	; 0xffff
   17f6c:	sub	r6, r6, r3
   17f70:	add	r3, r4, #100	; 0x64
   17f74:	cmp	lr, r6
   17f78:	ldr	lr, [sp, #84]	; 0x54
   17f7c:	rsblt	r3, r4, #0
   17f80:	b	17fa4 <__assert_fail@plt+0x699c>
   17f84:	sub	r0, r9, #6
   17f88:	bic	r8, r0, r0, asr #31
   17f8c:	b	173e8 <__assert_fail@plt+0x5de0>
   17f90:	movw	r4, #63636	; 0xf894
   17f94:	add	r3, r6, #100	; 0x64
   17f98:	movt	r4, #65535	; 0xffff
   17f9c:	cmp	r7, r4
   17fa0:	rsblt	r3, r6, #0
   17fa4:	ldr	r4, [fp, #12]
   17fa8:	cmp	r5, #0
   17fac:	mov	r7, #0
   17fb0:	moveq	r5, r4
   17fb4:	mov	r4, #0
   17fb8:	cmp	r5, #43	; 0x2b
   17fbc:	bne	17678 <__assert_fail@plt+0x6070>
   17fc0:	cmp	ip, r9
   17fc4:	mov	r4, #0
   17fc8:	movw	r6, #9999	; 0x270f
   17fcc:	mov	r8, lr
   17fd0:	mov	lr, #0
   17fd4:	movwlt	r4, #1
   17fd8:	cmp	ip, #2
   17fdc:	movweq	r6, #99	; 0x63
   17fe0:	cmp	r6, r3
   17fe4:	movwcc	lr, #1
   17fe8:	orr	r4, r4, lr
   17fec:	mov	lr, r8
   17ff0:	cmp	r0, #79	; 0x4f
   17ff4:	moveq	r6, #0
   17ff8:	cmpeq	r2, #0
   17ffc:	bne	17688 <__assert_fail@plt+0x6080>
   18000:	b	1823c <__assert_fail@plt+0x6c34>
   18004:	cmp	r7, #0
   18008:	beq	1820c <__assert_fail@plt+0x6c04>
   1800c:	ldr	lr, [sp, #84]	; 0x54
   18010:	movw	r6, #10000	; 0x2710
   18014:	mov	r4, #1
   18018:	mla	r3, r3, r6, r7
   1801c:	mov	r7, #100	; 0x64
   18020:	mla	r3, ip, r7, r3
   18024:	mov	ip, #9
   18028:	mov	r7, #20
   1802c:	cmp	r0, #79	; 0x4f
   18030:	moveq	r6, #0
   18034:	cmpeq	r2, #0
   18038:	bne	17688 <__assert_fail@plt+0x6080>
   1803c:	b	1823c <__assert_fail@plt+0x6c34>
   18040:	sub	r1, fp, #48	; 0x30
   18044:	mov	r0, r6
   18048:	mov	r2, r4
   1804c:	mov	r7, lr
   18050:	bl	1135c <memcpy@plt>
   18054:	mov	lr, r7
   18058:	add	ip, r6, r4
   1805c:	cmp	r5, #45	; 0x2d
   18060:	mov	r7, #0
   18064:	mov	r6, #-2147483648	; 0x80000000
   18068:	subne	r0, r9, r4
   1806c:	bicne	r7, r0, r0, asr #31
   18070:	sub	r0, r8, r4
   18074:	cmp	r7, r0
   18078:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   1807c:	cmp	ip, #0
   18080:	cmpne	r7, #0
   18084:	beq	1842c <__assert_fail@plt+0x6e24>
   18088:	uxtb	r0, r5
   1808c:	cmp	r0, #48	; 0x30
   18090:	cmpne	r0, #43	; 0x2b
   18094:	bne	18408 <__assert_fail@plt+0x6e00>
   18098:	mov	r0, ip
   1809c:	mov	r9, ip
   180a0:	mov	r1, #48	; 0x30
   180a4:	b	18414 <__assert_fail@plt+0x6e0c>
   180a8:	mov	r1, #32
   180ac:	mov	r5, r2
   180b0:	bl	1150c <memset@plt>
   180b4:	ldr	r0, [sp, #92]	; 0x5c
   180b8:	ldr	lr, [sp, #84]	; 0x54
   180bc:	add	ip, r0, r5
   180c0:	tst	r7, #1
   180c4:	beq	18114 <__assert_fail@plt+0x6b0c>
   180c8:	ldr	r8, [sp, #24]
   180cc:	cmp	r9, #0
   180d0:	beq	1818c <__assert_fail@plt+0x6b84>
   180d4:	cmp	r6, r9
   180d8:	movls	r6, r9
   180dc:	add	r0, r0, r6
   180e0:	mov	r6, ip
   180e4:	sub	r5, r0, #1
   180e8:	bl	11470 <__ctype_tolower_loc@plt>
   180ec:	ldr	lr, [sp, #84]	; 0x54
   180f0:	mov	ip, r6
   180f4:	mov	r1, r9
   180f8:	ldrb	r2, [r8, r1]
   180fc:	ldr	r3, [r0]
   18100:	subs	r1, r1, #1
   18104:	ldr	r2, [r3, r2, lsl #2]
   18108:	strb	r2, [r5], #-1
   1810c:	bne	180f8 <__assert_fail@plt+0x6af0>
   18110:	b	1818c <__assert_fail@plt+0x6b84>
   18114:	eor	r1, r7, #1
   18118:	and	r1, r8, r1
   1811c:	tst	r1, #1
   18120:	beq	18170 <__assert_fail@plt+0x6b68>
   18124:	ldr	r8, [sp, #24]
   18128:	cmp	r9, #0
   1812c:	beq	1818c <__assert_fail@plt+0x6b84>
   18130:	cmp	r6, r9
   18134:	movls	r6, r9
   18138:	add	r0, r0, r6
   1813c:	mov	r6, ip
   18140:	sub	r5, r0, #1
   18144:	bl	1147c <__ctype_toupper_loc@plt>
   18148:	ldr	lr, [sp, #84]	; 0x54
   1814c:	mov	ip, r6
   18150:	mov	r1, r9
   18154:	ldrb	r2, [r8, r1]
   18158:	ldr	r3, [r0]
   1815c:	subs	r1, r1, #1
   18160:	ldr	r2, [r3, r2, lsl #2]
   18164:	strb	r2, [r5], #-1
   18168:	bne	18154 <__assert_fail@plt+0x6b4c>
   1816c:	b	1818c <__assert_fail@plt+0x6b84>
   18170:	ldr	r1, [sp, #44]	; 0x2c
   18174:	mov	r0, ip
   18178:	mov	r2, r9
   1817c:	mov	r5, ip
   18180:	bl	1135c <memcpy@plt>
   18184:	ldr	lr, [sp, #84]	; 0x54
   18188:	mov	ip, r5
   1818c:	add	ip, ip, r9
   18190:	mov	r6, #-2147483648	; 0x80000000
   18194:	add	lr, r4, lr
   18198:	b	17a9c <__assert_fail@plt+0x6494>
   1819c:	mov	r0, ip
   181a0:	mov	r1, #32
   181a4:	mov	r2, r4
   181a8:	mov	r5, lr
   181ac:	mov	r7, ip
   181b0:	bl	1150c <memset@plt>
   181b4:	mov	ip, r7
   181b8:	mov	lr, r5
   181bc:	add	ip, r7, r4
   181c0:	movw	r4, #52428	; 0xcccc
   181c4:	movt	r4, #3276	; 0xccc
   181c8:	mov	r0, #10
   181cc:	strb	r0, [ip], #1
   181d0:	b	17f48 <__assert_fail@plt+0x6940>
   181d4:	mov	r0, ip
   181d8:	mov	r1, #32
   181dc:	mov	r2, r4
   181e0:	mov	r5, lr
   181e4:	mov	r7, ip
   181e8:	bl	1150c <memset@plt>
   181ec:	mov	ip, r7
   181f0:	mov	lr, r5
   181f4:	add	ip, r7, r4
   181f8:	movw	r4, #52428	; 0xcccc
   181fc:	movt	r4, #3276	; 0xccc
   18200:	mov	r0, #9
   18204:	strb	r0, [ip], #1
   18208:	b	17f48 <__assert_fail@plt+0x6940>
   1820c:	cmp	ip, #0
   18210:	beq	18468 <__assert_fail@plt+0x6e60>
   18214:	ldr	lr, [sp, #84]	; 0x54
   18218:	mov	r7, #100	; 0x64
   1821c:	mov	r4, #1
   18220:	mla	r3, r3, r7, ip
   18224:	mov	ip, #6
   18228:	mov	r7, #4
   1822c:	cmp	r0, #79	; 0x4f
   18230:	moveq	r6, #0
   18234:	cmpeq	r2, #0
   18238:	bne	17688 <__assert_fail@plt+0x6080>
   1823c:	movw	r2, #9504	; 0x2520
   18240:	cmp	r0, #0
   18244:	ldr	r3, [sp, #80]	; 0x50
   18248:	str	lr, [sp, #84]	; 0x54
   1824c:	strh	r2, [fp, #-53]	; 0xffffffcb
   18250:	ldr	r2, [sp, #76]	; 0x4c
   18254:	strbne	r0, [fp, #-51]	; 0xffffffcd
   18258:	mov	r0, #0
   1825c:	ldrne	r2, [sp, #60]	; 0x3c
   18260:	strb	r0, [r2, #1]
   18264:	strb	r1, [r2]
   18268:	add	r0, sp, #104	; 0x68
   1826c:	sub	r2, fp, #53	; 0x35
   18270:	mov	r1, #1024	; 0x400
   18274:	bl	11458 <strftime@plt>
   18278:	cmp	r0, #0
   1827c:	beq	182e4 <__assert_fail@plt+0x6cdc>
   18280:	subs	r8, r5, #45	; 0x2d
   18284:	sub	r4, r0, #1
   18288:	ldr	lr, [sp, #84]	; 0x54
   1828c:	ldr	r0, [sp, #96]	; 0x60
   18290:	movne	r8, r9
   18294:	cmp	r9, #0
   18298:	mov	r7, r4
   1829c:	movwlt	r8, #0
   182a0:	cmp	r8, r4
   182a4:	movhi	r7, r8
   182a8:	sub	r0, r0, lr
   182ac:	cmp	r7, r0
   182b0:	bcs	184a4 <__assert_fail@plt+0x6e9c>
   182b4:	ldr	r0, [sp, #92]	; 0x5c
   182b8:	cmp	r0, #0
   182bc:	beq	1830c <__assert_fail@plt+0x6d04>
   182c0:	cmp	r8, r4
   182c4:	mov	r9, r0
   182c8:	bls	18330 <__assert_fail@plt+0x6d28>
   182cc:	cmp	r5, #48	; 0x30
   182d0:	sub	r9, r8, r4
   182d4:	cmpne	r5, #43	; 0x2b
   182d8:	bne	18314 <__assert_fail@plt+0x6d0c>
   182dc:	mov	r1, #48	; 0x30
   182e0:	b	18318 <__assert_fail@plt+0x6d10>
   182e4:	ldr	lr, [sp, #84]	; 0x54
   182e8:	ldr	ip, [sp, #92]	; 0x5c
   182ec:	movw	r4, #52428	; 0xcccc
   182f0:	mov	r6, #-2147483648	; 0x80000000
   182f4:	movt	r4, #3276	; 0xccc
   182f8:	ldrb	r3, [sl, #1]!
   182fc:	mvn	r9, #0
   18300:	cmp	r3, #0
   18304:	bne	16b50 <__assert_fail@plt+0x5548>
   18308:	b	18478 <__assert_fail@plt+0x6e70>
   1830c:	mov	ip, #0
   18310:	b	183e4 <__assert_fail@plt+0x6ddc>
   18314:	mov	r1, #32
   18318:	mov	r2, r9
   1831c:	mov	r5, r0
   18320:	bl	1150c <memset@plt>
   18324:	ldr	lr, [sp, #84]	; 0x54
   18328:	add	r9, r5, r9
   1832c:	mov	r0, r5
   18330:	tst	r6, #1
   18334:	beq	1837c <__assert_fail@plt+0x6d74>
   18338:	cmp	r4, #0
   1833c:	add	r6, sp, #104	; 0x68
   18340:	beq	183e0 <__assert_fail@plt+0x6dd8>
   18344:	cmp	r8, r4
   18348:	movls	r8, r4
   1834c:	add	r0, r0, r8
   18350:	sub	r5, r0, #1
   18354:	bl	11470 <__ctype_tolower_loc@plt>
   18358:	ldr	lr, [sp, #84]	; 0x54
   1835c:	mov	r1, r4
   18360:	ldrb	r2, [r6, r1]
   18364:	ldr	r3, [r0]
   18368:	subs	r1, r1, #1
   1836c:	ldr	r2, [r3, r2, lsl #2]
   18370:	strb	r2, [r5], #-1
   18374:	bne	18360 <__assert_fail@plt+0x6d58>
   18378:	b	183e0 <__assert_fail@plt+0x6dd8>
   1837c:	ldr	r1, [sp, #100]	; 0x64
   18380:	add	r6, sp, #104	; 0x68
   18384:	tst	r1, #1
   18388:	beq	183cc <__assert_fail@plt+0x6dc4>
   1838c:	cmp	r4, #0
   18390:	beq	183e0 <__assert_fail@plt+0x6dd8>
   18394:	cmp	r8, r4
   18398:	movls	r8, r4
   1839c:	add	r0, r0, r8
   183a0:	sub	r5, r0, #1
   183a4:	bl	1147c <__ctype_toupper_loc@plt>
   183a8:	ldr	lr, [sp, #84]	; 0x54
   183ac:	mov	r1, r4
   183b0:	ldrb	r2, [r6, r1]
   183b4:	ldr	r3, [r0]
   183b8:	subs	r1, r1, #1
   183bc:	ldr	r2, [r3, r2, lsl #2]
   183c0:	strb	r2, [r5], #-1
   183c4:	bne	183b0 <__assert_fail@plt+0x6da8>
   183c8:	b	183e0 <__assert_fail@plt+0x6dd8>
   183cc:	ldr	r1, [sp, #40]	; 0x28
   183d0:	mov	r0, r9
   183d4:	mov	r2, r4
   183d8:	bl	1135c <memcpy@plt>
   183dc:	ldr	lr, [sp, #84]	; 0x54
   183e0:	add	ip, r9, r4
   183e4:	movw	r4, #52428	; 0xcccc
   183e8:	add	lr, r7, lr
   183ec:	mov	r6, #-2147483648	; 0x80000000
   183f0:	movt	r4, #3276	; 0xccc
   183f4:	ldrb	r3, [sl, #1]!
   183f8:	mvn	r9, #0
   183fc:	cmp	r3, #0
   18400:	bne	16b50 <__assert_fail@plt+0x5548>
   18404:	b	18478 <__assert_fail@plt+0x6e70>
   18408:	mov	r0, ip
   1840c:	mov	r9, ip
   18410:	mov	r1, #32
   18414:	mov	r2, r7
   18418:	mov	r5, lr
   1841c:	bl	1150c <memset@plt>
   18420:	mov	lr, r5
   18424:	add	ip, r9, r7
   18428:	mov	r0, r9
   1842c:	add	r0, r7, lr
   18430:	add	lr, r0, r4
   18434:	b	17a9c <__assert_fail@plt+0x6494>
   18438:	mov	r0, ip
   1843c:	mov	r1, #32
   18440:	mov	r2, r4
   18444:	mov	r5, lr
   18448:	mov	r7, ip
   1844c:	bl	1150c <memset@plt>
   18450:	ldrb	r1, [sl]
   18454:	mov	ip, r7
   18458:	mov	lr, r5
   1845c:	add	ip, r7, r4
   18460:	strb	r1, [ip], #1
   18464:	b	17f40 <__assert_fail@plt+0x6938>
   18468:	mov	ip, #3
   1846c:	b	17ebc <__assert_fail@plt+0x68b4>
   18470:	mov	lr, #0
   18474:	mov	ip, r5
   18478:	ldr	r0, [sp, #96]	; 0x60
   1847c:	ldr	r1, [sp, #64]	; 0x40
   18480:	cmp	r0, #0
   18484:	cmpne	ip, #0
   18488:	movne	r0, #0
   1848c:	strbne	r0, [ip]
   18490:	ldr	r0, [sp, #68]	; 0x44
   18494:	str	r1, [r0]
   18498:	mov	r0, lr
   1849c:	sub	sp, fp, #28
   184a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184a4:	mov	r0, #34	; 0x22
   184a8:	ldr	r1, [sp, #68]	; 0x44
   184ac:	mov	lr, #0
   184b0:	str	r0, [r1]
   184b4:	mov	r0, lr
   184b8:	sub	sp, fp, #28
   184bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184c0:	mov	r0, #75	; 0x4b
   184c4:	b	184a8 <__assert_fail@plt+0x6ea0>
   184c8:	push	{r4, r5, fp, lr}
   184cc:	add	fp, sp, #8
   184d0:	cmp	r0, #0
   184d4:	beq	18568 <__assert_fail@plt+0x6f60>
   184d8:	mov	r1, #47	; 0x2f
   184dc:	mov	r4, r0
   184e0:	bl	11584 <strrchr@plt>
   184e4:	cmp	r0, #0
   184e8:	mov	r5, r4
   184ec:	addne	r5, r0, #1
   184f0:	sub	r0, r5, r4
   184f4:	cmp	r0, #7
   184f8:	blt	1854c <__assert_fail@plt+0x6f44>
   184fc:	movw	r1, #3205	; 0xc85
   18500:	sub	r0, r5, #7
   18504:	mov	r2, #7
   18508:	movt	r1, #2
   1850c:	bl	115e4 <strncmp@plt>
   18510:	cmp	r0, #0
   18514:	bne	1854c <__assert_fail@plt+0x6f44>
   18518:	movw	r1, #3213	; 0xc8d
   1851c:	mov	r0, r5
   18520:	mov	r2, #3
   18524:	movt	r1, #2
   18528:	bl	115e4 <strncmp@plt>
   1852c:	cmp	r0, #0
   18530:	beq	1853c <__assert_fail@plt+0x6f34>
   18534:	mov	r4, r5
   18538:	b	1854c <__assert_fail@plt+0x6f44>
   1853c:	movw	r0, #8624	; 0x21b0
   18540:	add	r4, r5, #3
   18544:	movt	r0, #3
   18548:	str	r4, [r0]
   1854c:	movw	r0, #8628	; 0x21b4
   18550:	movt	r0, #3
   18554:	str	r4, [r0]
   18558:	movw	r0, #8840	; 0x2288
   1855c:	movt	r0, #3
   18560:	str	r4, [r0]
   18564:	pop	{r4, r5, fp, pc}
   18568:	movw	r0, #8640	; 0x21c0
   1856c:	mov	r1, #55	; 0x37
   18570:	mov	r2, #1
   18574:	movt	r0, #3
   18578:	ldr	r3, [r0]
   1857c:	movw	r0, #3149	; 0xc4d
   18580:	movt	r0, #2
   18584:	bl	113ec <fwrite@plt>
   18588:	bl	115f0 <abort@plt>
   1858c:	push	{r4, r5, r6, sl, fp, lr}
   18590:	add	fp, sp, #16
   18594:	mov	r4, r0
   18598:	movw	r0, #8848	; 0x2290
   1859c:	movt	r0, #3
   185a0:	cmp	r4, #0
   185a4:	moveq	r4, r0
   185a8:	bl	114e8 <__errno_location@plt>
   185ac:	ldr	r6, [r0]
   185b0:	mov	r5, r0
   185b4:	mov	r0, r4
   185b8:	mov	r1, #48	; 0x30
   185bc:	bl	1b948 <__assert_fail@plt+0xa340>
   185c0:	str	r6, [r5]
   185c4:	pop	{r4, r5, r6, sl, fp, pc}
   185c8:	movw	r1, #8848	; 0x2290
   185cc:	cmp	r0, #0
   185d0:	movt	r1, #3
   185d4:	movne	r1, r0
   185d8:	ldr	r0, [r1]
   185dc:	bx	lr
   185e0:	movw	r2, #8848	; 0x2290
   185e4:	cmp	r0, #0
   185e8:	movt	r2, #3
   185ec:	movne	r2, r0
   185f0:	str	r1, [r2]
   185f4:	bx	lr
   185f8:	movw	r3, #8848	; 0x2290
   185fc:	cmp	r0, #0
   18600:	movt	r3, #3
   18604:	movne	r3, r0
   18608:	ubfx	r0, r1, #5, #3
   1860c:	and	r1, r1, #31
   18610:	add	r0, r3, r0, lsl #2
   18614:	ldr	r3, [r0, #8]
   18618:	eor	r2, r2, r3, lsr r1
   1861c:	and	r2, r2, #1
   18620:	eor	r2, r3, r2, lsl r1
   18624:	str	r2, [r0, #8]
   18628:	mov	r0, #1
   1862c:	and	r0, r0, r3, lsr r1
   18630:	bx	lr
   18634:	movw	r2, #8848	; 0x2290
   18638:	cmp	r0, #0
   1863c:	movt	r2, #3
   18640:	movne	r2, r0
   18644:	ldr	r0, [r2, #4]
   18648:	str	r1, [r2, #4]
   1864c:	bx	lr
   18650:	movw	r3, #8848	; 0x2290
   18654:	cmp	r0, #0
   18658:	movt	r3, #3
   1865c:	movne	r3, r0
   18660:	cmp	r1, #0
   18664:	mov	r0, #10
   18668:	cmpne	r2, #0
   1866c:	str	r0, [r3]
   18670:	bne	18680 <__assert_fail@plt+0x7078>
   18674:	push	{fp, lr}
   18678:	mov	fp, sp
   1867c:	bl	115f0 <abort@plt>
   18680:	str	r1, [r3, #40]	; 0x28
   18684:	str	r2, [r3, #44]	; 0x2c
   18688:	bx	lr
   1868c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18690:	add	fp, sp, #28
   18694:	sub	sp, sp, #20
   18698:	mov	r7, r0
   1869c:	ldr	r0, [fp, #8]
   186a0:	movw	r5, #8848	; 0x2290
   186a4:	mov	r8, r3
   186a8:	mov	r9, r2
   186ac:	mov	sl, r1
   186b0:	movt	r5, #3
   186b4:	cmp	r0, #0
   186b8:	movne	r5, r0
   186bc:	bl	114e8 <__errno_location@plt>
   186c0:	mov	r4, r0
   186c4:	ldm	r5, {r0, r1}
   186c8:	ldr	r2, [r5, #40]	; 0x28
   186cc:	ldr	r3, [r5, #44]	; 0x2c
   186d0:	add	r5, r5, #8
   186d4:	ldr	r6, [r4]
   186d8:	stm	sp, {r0, r1, r5}
   186dc:	str	r2, [sp, #12]
   186e0:	str	r3, [sp, #16]
   186e4:	mov	r0, r7
   186e8:	mov	r1, sl
   186ec:	mov	r2, r9
   186f0:	mov	r3, r8
   186f4:	bl	18704 <__assert_fail@plt+0x70fc>
   186f8:	str	r6, [r4]
   186fc:	sub	sp, fp, #28
   18700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18708:	add	fp, sp, #28
   1870c:	sub	sp, sp, #156	; 0x9c
   18710:	str	r0, [sp, #76]	; 0x4c
   18714:	ldr	r0, [fp, #12]
   18718:	mov	r6, r1
   1871c:	str	r3, [sp, #84]	; 0x54
   18720:	str	r2, [fp, #-84]	; 0xffffffac
   18724:	and	r1, r0, #4
   18728:	str	r1, [sp, #24]
   1872c:	and	r1, r0, #1
   18730:	str	r1, [sp, #28]
   18734:	ubfx	r8, r0, #1, #1
   18738:	bl	11404 <__ctype_get_mb_cur_max@plt>
   1873c:	str	r0, [sp, #32]
   18740:	ldr	r0, [fp, #24]
   18744:	ldr	r7, [fp, #8]
   18748:	mov	r1, #0
   1874c:	mov	r2, #0
   18750:	mov	r4, #1
   18754:	str	r1, [sp, #52]	; 0x34
   18758:	str	r0, [sp, #72]	; 0x48
   1875c:	ldr	r0, [fp, #20]
   18760:	str	r0, [sp, #68]	; 0x44
   18764:	mov	r0, #0
   18768:	str	r0, [sp, #48]	; 0x30
   1876c:	mov	r0, #0
   18770:	str	r0, [sp, #92]	; 0x5c
   18774:	mov	r0, #0
   18778:	str	r0, [fp, #-76]	; 0xffffffb4
   1877c:	mov	r0, #0
   18780:	cmp	r7, #10
   18784:	bhi	19a6c <__assert_fail@plt+0x8464>
   18788:	add	r1, pc, #28
   1878c:	mov	sl, r6
   18790:	ldr	r6, [sp, #76]	; 0x4c
   18794:	ldr	ip, [fp, #-84]	; 0xffffffac
   18798:	ldr	lr, [sp, #84]	; 0x54
   1879c:	mov	r9, #0
   187a0:	mov	r3, #1
   187a4:	mov	r5, #0
   187a8:	ldr	pc, [r1, r7, lsl #2]
   187ac:	andeq	r8, r1, ip, ror r8
   187b0:			; <UNDEFINED> instruction: 0x000188b8
   187b4:	andeq	r8, r1, ip, lsl #17
   187b8:	andeq	r8, r1, r4, ror r8
   187bc:	andeq	r8, r1, ip, lsr #17
   187c0:	andeq	r8, r1, r0, ror #17
   187c4:	muleq	r1, ip, r8
   187c8:	andeq	r8, r1, ip, ror #21
   187cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187d4:	andeq	r8, r1, r0, lsl #21
   187d8:	mov	r9, r4
   187dc:	movw	r4, #3295	; 0xcdf
   187e0:	mov	r5, r8
   187e4:	mov	r8, r2
   187e8:	mov	r0, #0
   187ec:	mov	r2, #5
   187f0:	movt	r4, #2
   187f4:	mov	r1, r4
   187f8:	bl	1138c <dcgettext@plt>
   187fc:	cmp	r0, r4
   18800:	str	r0, [sp, #68]	; 0x44
   18804:	bne	18994 <__assert_fail@plt+0x738c>
   18808:	bl	1f144 <__assert_fail@plt+0xdb3c>
   1880c:	ldrb	r1, [r0]
   18810:	and	r1, r1, #223	; 0xdf
   18814:	cmp	r1, #71	; 0x47
   18818:	beq	18960 <__assert_fail@plt+0x7358>
   1881c:	cmp	r1, #85	; 0x55
   18820:	bne	18978 <__assert_fail@plt+0x7370>
   18824:	ldrb	r1, [r0, #1]
   18828:	and	r1, r1, #223	; 0xdf
   1882c:	cmp	r1, #84	; 0x54
   18830:	bne	18978 <__assert_fail@plt+0x7370>
   18834:	ldrb	r1, [r0, #2]
   18838:	and	r1, r1, #223	; 0xdf
   1883c:	cmp	r1, #70	; 0x46
   18840:	bne	18978 <__assert_fail@plt+0x7370>
   18844:	ldrb	r1, [r0, #3]
   18848:	cmp	r1, #45	; 0x2d
   1884c:	ldrbeq	r1, [r0, #4]
   18850:	cmpeq	r1, #56	; 0x38
   18854:	bne	18978 <__assert_fail@plt+0x7370>
   18858:	ldrb	r0, [r0, #5]
   1885c:	cmp	r0, #0
   18860:	movw	r0, #3297	; 0xce1
   18864:	movt	r0, #2
   18868:	str	r0, [sp, #68]	; 0x44
   1886c:	bne	18978 <__assert_fail@plt+0x7370>
   18870:	b	18994 <__assert_fail@plt+0x738c>
   18874:	mov	r0, #1
   18878:	b	188b8 <__assert_fail@plt+0x72b0>
   1887c:	mov	r7, #0
   18880:	mov	r9, #0
   18884:	mov	r3, r0
   18888:	b	18958 <__assert_fail@plt+0x7350>
   1888c:	tst	r8, #1
   18890:	bne	188b8 <__assert_fail@plt+0x72b0>
   18894:	mov	r3, r0
   18898:	b	18910 <__assert_fail@plt+0x7308>
   1889c:	mov	r0, #1
   188a0:	mov	r9, #0
   188a4:	mov	r7, #5
   188a8:	b	188f4 <__assert_fail@plt+0x72ec>
   188ac:	mov	r3, #1
   188b0:	tst	r8, #1
   188b4:	beq	18910 <__assert_fail@plt+0x7308>
   188b8:	mov	r1, #1
   188bc:	mov	r9, #0
   188c0:	mov	r7, #2
   188c4:	mov	r3, r0
   188c8:	mov	r5, #1
   188cc:	str	r1, [fp, #-76]	; 0xffffffb4
   188d0:	movw	r1, #4428	; 0x114c
   188d4:	movt	r1, #2
   188d8:	str	r1, [sp, #92]	; 0x5c
   188dc:	b	18aec <__assert_fail@plt+0x74e4>
   188e0:	mov	r7, #5
   188e4:	tst	r8, #1
   188e8:	beq	18930 <__assert_fail@plt+0x7328>
   188ec:	mov	r0, #1
   188f0:	mov	r9, #0
   188f4:	str	r0, [fp, #-76]	; 0xffffffb4
   188f8:	movw	r0, #3293	; 0xcdd
   188fc:	mov	r3, #1
   18900:	mov	r5, #1
   18904:	movt	r0, #2
   18908:	str	r0, [sp, #92]	; 0x5c
   1890c:	b	18aec <__assert_fail@plt+0x74e4>
   18910:	cmp	sl, #0
   18914:	mov	r9, #1
   18918:	mov	r7, #2
   1891c:	movne	r0, #39	; 0x27
   18920:	strbne	r0, [r6]
   18924:	movw	r0, #4428	; 0x114c
   18928:	movt	r0, #2
   1892c:	b	1894c <__assert_fail@plt+0x7344>
   18930:	cmp	sl, #0
   18934:	mov	r9, #1
   18938:	mov	r3, #1
   1893c:	movne	r0, #34	; 0x22
   18940:	strbne	r0, [r6]
   18944:	movw	r0, #3293	; 0xcdd
   18948:	movt	r0, #2
   1894c:	str	r0, [sp, #92]	; 0x5c
   18950:	mov	r0, #1
   18954:	str	r0, [fp, #-76]	; 0xffffffb4
   18958:	mov	r5, #0
   1895c:	b	18aec <__assert_fail@plt+0x74e4>
   18960:	ldrb	r1, [r0, #1]
   18964:	and	r1, r1, #223	; 0xdf
   18968:	cmp	r1, #66	; 0x42
   1896c:	ldrbeq	r1, [r0, #2]
   18970:	cmpeq	r1, #49	; 0x31
   18974:	beq	19894 <__assert_fail@plt+0x828c>
   18978:	movw	r0, #4428	; 0x114c
   1897c:	movw	r1, #3293	; 0xcdd
   18980:	cmp	r7, #9
   18984:	movt	r0, #2
   18988:	movt	r1, #2
   1898c:	moveq	r0, r1
   18990:	str	r0, [sp, #68]	; 0x44
   18994:	movw	r4, #4428	; 0x114c
   18998:	mov	r0, #0
   1899c:	mov	r2, #5
   189a0:	movt	r4, #2
   189a4:	mov	r1, r4
   189a8:	bl	1138c <dcgettext@plt>
   189ac:	cmp	r0, r4
   189b0:	str	r0, [sp, #72]	; 0x48
   189b4:	beq	189c4 <__assert_fail@plt+0x73bc>
   189b8:	mov	r4, r9
   189bc:	mov	r2, r8
   189c0:	b	18a7c <__assert_fail@plt+0x7474>
   189c4:	bl	1f144 <__assert_fail@plt+0xdb3c>
   189c8:	ldrb	r1, [r0]
   189cc:	mov	r4, r9
   189d0:	and	r1, r1, #223	; 0xdf
   189d4:	cmp	r1, #71	; 0x47
   189d8:	beq	18a34 <__assert_fail@plt+0x742c>
   189dc:	cmp	r1, #85	; 0x55
   189e0:	mov	r2, r8
   189e4:	bne	18a5c <__assert_fail@plt+0x7454>
   189e8:	ldrb	r1, [r0, #1]
   189ec:	and	r1, r1, #223	; 0xdf
   189f0:	cmp	r1, #84	; 0x54
   189f4:	bne	18a5c <__assert_fail@plt+0x7454>
   189f8:	ldrb	r1, [r0, #2]
   189fc:	and	r1, r1, #223	; 0xdf
   18a00:	cmp	r1, #70	; 0x46
   18a04:	ldrbeq	r1, [r0, #3]
   18a08:	cmpeq	r1, #45	; 0x2d
   18a0c:	bne	18a5c <__assert_fail@plt+0x7454>
   18a10:	ldrb	r1, [r0, #4]
   18a14:	cmp	r1, #56	; 0x38
   18a18:	ldrbeq	r0, [r0, #5]
   18a1c:	cmpeq	r0, #0
   18a20:	bne	18a5c <__assert_fail@plt+0x7454>
   18a24:	movw	r0, #3301	; 0xce5
   18a28:	movt	r0, #2
   18a2c:	str	r0, [sp, #72]	; 0x48
   18a30:	b	18a7c <__assert_fail@plt+0x7474>
   18a34:	ldrb	r1, [r0, #1]
   18a38:	mov	r2, r8
   18a3c:	and	r1, r1, #223	; 0xdf
   18a40:	cmp	r1, #66	; 0x42
   18a44:	bne	18a5c <__assert_fail@plt+0x7454>
   18a48:	ldrb	r1, [r0, #2]
   18a4c:	cmp	r1, #49	; 0x31
   18a50:	ldrbeq	r1, [r0, #3]
   18a54:	cmpeq	r1, #56	; 0x38
   18a58:	beq	198d8 <__assert_fail@plt+0x82d0>
   18a5c:	movw	r0, #4428	; 0x114c
   18a60:	cmp	r7, #9
   18a64:	movt	r0, #2
   18a68:	mov	r1, r0
   18a6c:	movw	r0, #3293	; 0xcdd
   18a70:	movt	r0, #2
   18a74:	moveq	r1, r0
   18a78:	str	r1, [sp, #72]	; 0x48
   18a7c:	mov	r8, r5
   18a80:	mov	r9, #0
   18a84:	tst	r8, #1
   18a88:	mov	r5, r8
   18a8c:	str	r2, [fp, #-48]	; 0xffffffd0
   18a90:	bne	18ac8 <__assert_fail@plt+0x74c0>
   18a94:	ldr	r0, [sp, #68]	; 0x44
   18a98:	ldrb	r0, [r0]
   18a9c:	cmp	r0, #0
   18aa0:	beq	18ac8 <__assert_fail@plt+0x74c0>
   18aa4:	ldr	r1, [sp, #68]	; 0x44
   18aa8:	mov	r9, #0
   18aac:	add	r1, r1, #1
   18ab0:	cmp	r9, sl
   18ab4:	strbcc	r0, [r6, r9]
   18ab8:	ldrb	r0, [r1, r9]
   18abc:	add	r9, r9, #1
   18ac0:	cmp	r0, #0
   18ac4:	bne	18ab0 <__assert_fail@plt+0x74a8>
   18ac8:	ldr	r8, [sp, #72]	; 0x48
   18acc:	mov	r0, r8
   18ad0:	bl	114b8 <strlen@plt>
   18ad4:	ldr	ip, [fp, #-84]	; 0xffffffac
   18ad8:	ldr	lr, [sp, #84]	; 0x54
   18adc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18ae0:	str	r0, [fp, #-76]	; 0xffffffb4
   18ae4:	str	r8, [sp, #92]	; 0x5c
   18ae8:	mov	r3, #1
   18aec:	ldr	r0, [fp, #16]
   18af0:	str	r7, [fp, #-64]	; 0xffffffc0
   18af4:	str	r5, [fp, #-72]	; 0xffffffb8
   18af8:	str	r3, [sp, #80]	; 0x50
   18afc:	cmp	r0, #0
   18b00:	movwne	r0, #1
   18b04:	and	r0, r0, r5
   18b08:	str	r0, [fp, #-88]	; 0xffffffa8
   18b0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18b10:	cmp	r0, #0
   18b14:	movwne	r0, #1
   18b18:	subs	r7, r7, #2
   18b1c:	and	r1, r0, r5
   18b20:	str	r7, [fp, #-80]	; 0xffffffb0
   18b24:	and	r1, r3, r1
   18b28:	str	r1, [sp, #40]	; 0x28
   18b2c:	clz	r1, r7
   18b30:	lsr	r1, r1, #5
   18b34:	and	r1, r1, r5
   18b38:	eor	r5, r5, #1
   18b3c:	str	r1, [sp, #36]	; 0x24
   18b40:	mov	r1, r7
   18b44:	str	r5, [sp, #88]	; 0x58
   18b48:	mov	r7, #0
   18b4c:	movwne	r1, #1
   18b50:	orr	r5, r1, r5
   18b54:	and	r1, r1, r3
   18b58:	and	r0, r0, r1
   18b5c:	str	r5, [sp, #60]	; 0x3c
   18b60:	str	r1, [fp, #-68]	; 0xffffffbc
   18b64:	str	r0, [fp, #-60]	; 0xffffffc4
   18b68:	eor	r0, r3, #1
   18b6c:	str	r0, [sp, #44]	; 0x2c
   18b70:	cmn	lr, #1
   18b74:	beq	18b84 <__assert_fail@plt+0x757c>
   18b78:	cmp	r7, lr
   18b7c:	bne	18b90 <__assert_fail@plt+0x7588>
   18b80:	b	19808 <__assert_fail@plt+0x8200>
   18b84:	ldrb	r0, [ip, r7]
   18b88:	cmp	r0, #0
   18b8c:	beq	19810 <__assert_fail@plt+0x8208>
   18b90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18b94:	mov	r8, #0
   18b98:	str	r4, [fp, #-52]	; 0xffffffcc
   18b9c:	str	r2, [fp, #-48]	; 0xffffffd0
   18ba0:	cmp	r0, #0
   18ba4:	beq	18bd8 <__assert_fail@plt+0x75d0>
   18ba8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18bac:	add	r4, r7, r0
   18bb0:	cmp	r0, #2
   18bb4:	bcc	18bd0 <__assert_fail@plt+0x75c8>
   18bb8:	cmn	lr, #1
   18bbc:	bne	18bd0 <__assert_fail@plt+0x75c8>
   18bc0:	mov	r0, ip
   18bc4:	bl	114b8 <strlen@plt>
   18bc8:	ldr	ip, [fp, #-84]	; 0xffffffac
   18bcc:	mov	lr, r0
   18bd0:	cmp	r4, lr
   18bd4:	bls	18bf0 <__assert_fail@plt+0x75e8>
   18bd8:	mov	r0, #0
   18bdc:	str	r0, [fp, #-56]	; 0xffffffc8
   18be0:	ldrb	r5, [ip, r7]
   18be4:	cmp	r5, #126	; 0x7e
   18be8:	bls	18c40 <__assert_fail@plt+0x7638>
   18bec:	b	19048 <__assert_fail@plt+0x7a40>
   18bf0:	ldr	r1, [sp, #92]	; 0x5c
   18bf4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18bf8:	add	r0, ip, r7
   18bfc:	mov	r4, lr
   18c00:	bl	11380 <memcmp@plt>
   18c04:	ldr	r2, [sp, #88]	; 0x58
   18c08:	cmp	r0, #0
   18c0c:	mov	r1, r0
   18c10:	movwne	r1, #1
   18c14:	orr	r1, r1, r2
   18c18:	tst	r1, #1
   18c1c:	beq	1991c <__assert_fail@plt+0x8314>
   18c20:	ldr	ip, [fp, #-84]	; 0xffffffac
   18c24:	clz	r0, r0
   18c28:	mov	lr, r4
   18c2c:	lsr	r0, r0, #5
   18c30:	str	r0, [fp, #-56]	; 0xffffffc8
   18c34:	ldrb	r5, [ip, r7]
   18c38:	cmp	r5, #126	; 0x7e
   18c3c:	bhi	19048 <__assert_fail@plt+0x7a40>
   18c40:	add	r3, pc, #16
   18c44:	mov	r4, #1
   18c48:	mov	r2, #110	; 0x6e
   18c4c:	mov	r0, #97	; 0x61
   18c50:	mov	r1, #0
   18c54:	ldr	pc, [r3, r5, lsl #2]
   18c58:	andeq	r8, r1, r8, lsr #30
   18c5c:	andeq	r9, r1, r8, asr #32
   18c60:	andeq	r9, r1, r8, asr #32
   18c64:	andeq	r9, r1, r8, asr #32
   18c68:	andeq	r9, r1, r8, asr #32
   18c6c:	andeq	r9, r1, r8, asr #32
   18c70:	andeq	r9, r1, r8, asr #32
   18c74:	andeq	r9, r1, r4, lsr #2
   18c78:	andeq	r8, r1, r8, lsl #30
   18c7c:	strdeq	r8, [r1], -r0
   18c80:	andeq	r8, r1, r4, lsl pc
   18c84:	andeq	r8, r1, r4, lsr #31
   18c88:	andeq	r8, r1, r8, ror #29
   18c8c:	andeq	r8, r1, r0, lsl pc
   18c90:	andeq	r9, r1, r8, asr #32
   18c94:	andeq	r9, r1, r8, asr #32
   18c98:	andeq	r9, r1, r8, asr #32
   18c9c:	andeq	r9, r1, r8, asr #32
   18ca0:	andeq	r9, r1, r8, asr #32
   18ca4:	andeq	r9, r1, r8, asr #32
   18ca8:	andeq	r9, r1, r8, asr #32
   18cac:	andeq	r9, r1, r8, asr #32
   18cb0:	andeq	r9, r1, r8, asr #32
   18cb4:	andeq	r9, r1, r8, asr #32
   18cb8:	andeq	r9, r1, r8, asr #32
   18cbc:	andeq	r9, r1, r8, asr #32
   18cc0:	andeq	r9, r1, r8, asr #32
   18cc4:	andeq	r9, r1, r8, asr #32
   18cc8:	andeq	r9, r1, r8, asr #32
   18ccc:	andeq	r9, r1, r8, asr #32
   18cd0:	andeq	r9, r1, r8, asr #32
   18cd4:	andeq	r9, r1, r8, asr #32
   18cd8:	andeq	r9, r1, r0, lsr #1
   18cdc:	andeq	r9, r1, r4, lsr #1
   18ce0:	andeq	r9, r1, r4, lsr #1
   18ce4:	andeq	r8, r1, r4, ror lr
   18ce8:	andeq	r9, r1, r4, lsr #1
   18cec:	andeq	r8, r1, r4, asr lr
   18cf0:	andeq	r9, r1, r4, lsr #1
   18cf4:	andeq	r8, r1, ip, lsr #31
   18cf8:	andeq	r9, r1, r4, lsr #1
   18cfc:	andeq	r9, r1, r4, lsr #1
   18d00:	andeq	r9, r1, r4, lsr #1
   18d04:	andeq	r8, r1, r4, asr lr
   18d08:	andeq	r8, r1, r4, asr lr
   18d0c:	andeq	r8, r1, r4, asr lr
   18d10:	andeq	r8, r1, r4, asr lr
   18d14:	andeq	r8, r1, r4, asr lr
   18d18:	andeq	r8, r1, r4, asr lr
   18d1c:	andeq	r8, r1, r4, asr lr
   18d20:	andeq	r8, r1, r4, asr lr
   18d24:	andeq	r8, r1, r4, asr lr
   18d28:	andeq	r8, r1, r4, asr lr
   18d2c:	andeq	r8, r1, r4, asr lr
   18d30:	andeq	r8, r1, r4, asr lr
   18d34:	andeq	r8, r1, r4, asr lr
   18d38:	andeq	r8, r1, r4, asr lr
   18d3c:	andeq	r8, r1, r4, asr lr
   18d40:	andeq	r8, r1, r4, asr lr
   18d44:	andeq	r9, r1, r4, lsr #1
   18d48:	andeq	r9, r1, r4, lsr #1
   18d4c:	andeq	r9, r1, r4, lsr #1
   18d50:	andeq	r9, r1, r4, lsr #1
   18d54:	andeq	r8, r1, r8, ror #30
   18d58:	andeq	r9, r1, r8, asr #32
   18d5c:	andeq	r8, r1, r4, asr lr
   18d60:	andeq	r8, r1, r4, asr lr
   18d64:	andeq	r8, r1, r4, asr lr
   18d68:	andeq	r8, r1, r4, asr lr
   18d6c:	andeq	r8, r1, r4, asr lr
   18d70:	andeq	r8, r1, r4, asr lr
   18d74:	andeq	r8, r1, r4, asr lr
   18d78:	andeq	r8, r1, r4, asr lr
   18d7c:	andeq	r8, r1, r4, asr lr
   18d80:	andeq	r8, r1, r4, asr lr
   18d84:	andeq	r8, r1, r4, asr lr
   18d88:	andeq	r8, r1, r4, asr lr
   18d8c:	andeq	r8, r1, r4, asr lr
   18d90:	andeq	r8, r1, r4, asr lr
   18d94:	andeq	r8, r1, r4, asr lr
   18d98:	andeq	r8, r1, r4, asr lr
   18d9c:	andeq	r8, r1, r4, asr lr
   18da0:	andeq	r8, r1, r4, asr lr
   18da4:	andeq	r8, r1, r4, asr lr
   18da8:	andeq	r8, r1, r4, asr lr
   18dac:	andeq	r8, r1, r4, asr lr
   18db0:	andeq	r8, r1, r4, asr lr
   18db4:	andeq	r8, r1, r4, asr lr
   18db8:	andeq	r8, r1, r4, asr lr
   18dbc:	andeq	r8, r1, r4, asr lr
   18dc0:	andeq	r8, r1, r4, asr lr
   18dc4:	andeq	r9, r1, r4, lsr #1
   18dc8:			; <UNDEFINED> instruction: 0x00018eb4
   18dcc:	andeq	r8, r1, r4, asr lr
   18dd0:	andeq	r9, r1, r4, lsr #1
   18dd4:	andeq	r8, r1, r4, asr lr
   18dd8:	andeq	r9, r1, r4, lsr #1
   18ddc:	andeq	r8, r1, r4, asr lr
   18de0:	andeq	r8, r1, r4, asr lr
   18de4:	andeq	r8, r1, r4, asr lr
   18de8:	andeq	r8, r1, r4, asr lr
   18dec:	andeq	r8, r1, r4, asr lr
   18df0:	andeq	r8, r1, r4, asr lr
   18df4:	andeq	r8, r1, r4, asr lr
   18df8:	andeq	r8, r1, r4, asr lr
   18dfc:	andeq	r8, r1, r4, asr lr
   18e00:	andeq	r8, r1, r4, asr lr
   18e04:	andeq	r8, r1, r4, asr lr
   18e08:	andeq	r8, r1, r4, asr lr
   18e0c:	andeq	r8, r1, r4, asr lr
   18e10:	andeq	r8, r1, r4, asr lr
   18e14:	andeq	r8, r1, r4, asr lr
   18e18:	andeq	r8, r1, r4, asr lr
   18e1c:	andeq	r8, r1, r4, asr lr
   18e20:	andeq	r8, r1, r4, asr lr
   18e24:	andeq	r8, r1, r4, asr lr
   18e28:	andeq	r8, r1, r4, asr lr
   18e2c:	andeq	r8, r1, r4, asr lr
   18e30:	andeq	r8, r1, r4, asr lr
   18e34:	andeq	r8, r1, r4, asr lr
   18e38:	andeq	r8, r1, r4, asr lr
   18e3c:	andeq	r8, r1, r4, asr lr
   18e40:	andeq	r8, r1, r4, asr lr
   18e44:	muleq	r1, r4, lr
   18e48:	andeq	r9, r1, r4, lsr #1
   18e4c:	muleq	r1, r4, lr
   18e50:	andeq	r8, r1, r4, ror lr
   18e54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18e58:	cmp	r0, #0
   18e5c:	beq	19138 <__assert_fail@plt+0x7b30>
   18e60:	ldr	r0, [fp, #16]
   18e64:	cmp	r0, #0
   18e68:	mov	r0, r5
   18e6c:	bne	19148 <__assert_fail@plt+0x7b40>
   18e70:	b	19168 <__assert_fail@plt+0x7b60>
   18e74:	mov	r4, #0
   18e78:	cmp	r7, #0
   18e7c:	beq	190a0 <__assert_fail@plt+0x7a98>
   18e80:	mov	r8, #0
   18e84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18e88:	cmp	r0, #0
   18e8c:	bne	18e60 <__assert_fail@plt+0x7858>
   18e90:	b	19138 <__assert_fail@plt+0x7b30>
   18e94:	mov	r4, #0
   18e98:	cmn	lr, #1
   18e9c:	beq	19078 <__assert_fail@plt+0x7a70>
   18ea0:	cmp	r7, #0
   18ea4:	bne	18e80 <__assert_fail@plt+0x7878>
   18ea8:	cmp	lr, #1
   18eac:	beq	190a0 <__assert_fail@plt+0x7a98>
   18eb0:	b	18e80 <__assert_fail@plt+0x7878>
   18eb4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18eb8:	cmp	r0, #2
   18ebc:	bne	190d0 <__assert_fail@plt+0x7ac8>
   18ec0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18ec4:	tst	r0, #1
   18ec8:	bne	19930 <__assert_fail@plt+0x8328>
   18ecc:	mov	r8, #0
   18ed0:	mov	r0, #92	; 0x5c
   18ed4:	mov	r4, #0
   18ed8:	cmp	r8, #0
   18edc:	beq	190f0 <__assert_fail@plt+0x7ae8>
   18ee0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18ee4:	b	191e4 <__assert_fail@plt+0x7bdc>
   18ee8:	mov	r0, #102	; 0x66
   18eec:	b	19124 <__assert_fail@plt+0x7b1c>
   18ef0:	mov	r2, #116	; 0x74
   18ef4:	ldr	r0, [sp, #60]	; 0x3c
   18ef8:	tst	r0, #1
   18efc:	mov	r0, r2
   18f00:	bne	19124 <__assert_fail@plt+0x7b1c>
   18f04:	b	19930 <__assert_fail@plt+0x8328>
   18f08:	mov	r0, #98	; 0x62
   18f0c:	b	19124 <__assert_fail@plt+0x7b1c>
   18f10:	mov	r2, #114	; 0x72
   18f14:	ldr	r0, [sp, #60]	; 0x3c
   18f18:	tst	r0, #1
   18f1c:	mov	r0, r2
   18f20:	bne	19124 <__assert_fail@plt+0x7b1c>
   18f24:	b	19930 <__assert_fail@plt+0x8328>
   18f28:	ldr	r0, [sp, #80]	; 0x50
   18f2c:	tst	r0, #1
   18f30:	beq	1920c <__assert_fail@plt+0x7c04>
   18f34:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18f38:	tst	r0, #1
   18f3c:	bne	19a58 <__assert_fail@plt+0x8450>
   18f40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18f44:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18f48:	cmp	r0, #2
   18f4c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   18f50:	movwne	r0, #1
   18f54:	orr	r0, r0, r2
   18f58:	tst	r0, #1
   18f5c:	beq	19504 <__assert_fail@plt+0x7efc>
   18f60:	mov	r0, r9
   18f64:	b	19538 <__assert_fail@plt+0x7f30>
   18f68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18f6c:	mov	r8, #0
   18f70:	mov	r5, #63	; 0x3f
   18f74:	cmp	r0, #5
   18f78:	beq	193c0 <__assert_fail@plt+0x7db8>
   18f7c:	cmp	r0, #2
   18f80:	bne	19470 <__assert_fail@plt+0x7e68>
   18f84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18f88:	tst	r0, #1
   18f8c:	bne	19930 <__assert_fail@plt+0x8328>
   18f90:	mov	r4, #0
   18f94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18f98:	cmp	r0, #0
   18f9c:	bne	18e60 <__assert_fail@plt+0x7858>
   18fa0:	b	19138 <__assert_fail@plt+0x7b30>
   18fa4:	mov	r0, #118	; 0x76
   18fa8:	b	19124 <__assert_fail@plt+0x7b1c>
   18fac:	mov	r0, #1
   18fb0:	mov	r5, #39	; 0x27
   18fb4:	str	r0, [sp, #52]	; 0x34
   18fb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18fbc:	cmp	r0, #2
   18fc0:	bne	19034 <__assert_fail@plt+0x7a2c>
   18fc4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18fc8:	tst	r0, #1
   18fcc:	bne	19930 <__assert_fail@plt+0x8328>
   18fd0:	ldr	r2, [sp, #48]	; 0x30
   18fd4:	clz	r1, sl
   18fd8:	mov	r8, #0
   18fdc:	lsr	r1, r1, #5
   18fe0:	cmp	r2, #0
   18fe4:	mov	r0, r2
   18fe8:	movwne	r0, #1
   18fec:	orrs	r0, r0, r1
   18ff0:	moveq	r2, sl
   18ff4:	moveq	sl, r0
   18ff8:	cmp	r9, sl
   18ffc:	str	r2, [sp, #48]	; 0x30
   19000:	movcc	r0, #39	; 0x27
   19004:	strbcc	r0, [r6, r9]
   19008:	add	r0, r9, #1
   1900c:	cmp	r0, sl
   19010:	movcc	r1, #92	; 0x5c
   19014:	strbcc	r1, [r6, r0]
   19018:	add	r0, r9, #2
   1901c:	add	r9, r9, #3
   19020:	cmp	r0, sl
   19024:	movcc	r1, #39	; 0x27
   19028:	strbcc	r1, [r6, r0]
   1902c:	mov	r0, #0
   19030:	str	r0, [fp, #-48]	; 0xffffffd0
   19034:	mov	r4, #1
   19038:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1903c:	cmp	r0, #0
   19040:	bne	18e60 <__assert_fail@plt+0x7858>
   19044:	b	19138 <__assert_fail@plt+0x7b30>
   19048:	ldr	r0, [sp, #32]
   1904c:	cmp	r0, #1
   19050:	bne	1923c <__assert_fail@plt+0x7c34>
   19054:	str	lr, [sp, #84]	; 0x54
   19058:	bl	114a0 <__ctype_b_loc@plt>
   1905c:	ldr	r0, [r0]
   19060:	ldr	ip, [fp, #-84]	; 0xffffffac
   19064:	mov	r1, #1
   19068:	add	r0, r0, r5, lsl #1
   1906c:	ldrb	r0, [r0, #1]
   19070:	ubfx	r4, r0, #6, #1
   19074:	b	19634 <__assert_fail@plt+0x802c>
   19078:	cmp	r7, #0
   1907c:	ldrbeq	r0, [ip, #1]
   19080:	cmpeq	r0, #0
   19084:	beq	190a0 <__assert_fail@plt+0x7a98>
   19088:	mvn	lr, #0
   1908c:	mov	r8, #0
   19090:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19094:	cmp	r0, #0
   19098:	bne	18e60 <__assert_fail@plt+0x7858>
   1909c:	b	19138 <__assert_fail@plt+0x7b30>
   190a0:	mov	r1, #1
   190a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   190a8:	cmp	r0, #2
   190ac:	bne	190bc <__assert_fail@plt+0x7ab4>
   190b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   190b4:	tst	r0, #1
   190b8:	bne	19930 <__assert_fail@plt+0x8328>
   190bc:	mov	r4, r1
   190c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   190c4:	cmp	r0, #0
   190c8:	bne	18e60 <__assert_fail@plt+0x7858>
   190cc:	b	19138 <__assert_fail@plt+0x7b30>
   190d0:	ldr	r1, [sp, #40]	; 0x28
   190d4:	mov	r8, #0
   190d8:	mov	r0, #92	; 0x5c
   190dc:	cmp	r1, #0
   190e0:	beq	19124 <__assert_fail@plt+0x7b1c>
   190e4:	mov	r4, #0
   190e8:	cmp	r8, #0
   190ec:	bne	18ee0 <__assert_fail@plt+0x78d8>
   190f0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   190f4:	tst	r2, #1
   190f8:	beq	191e4 <__assert_fail@plt+0x7bdc>
   190fc:	cmp	r9, sl
   19100:	movcc	r1, #39	; 0x27
   19104:	strbcc	r1, [r6, r9]
   19108:	add	r1, r9, #1
   1910c:	add	r9, r9, #2
   19110:	cmp	r1, sl
   19114:	movcc	r2, #39	; 0x27
   19118:	strbcc	r2, [r6, r1]
   1911c:	mov	r2, #0
   19120:	b	191e4 <__assert_fail@plt+0x7bdc>
   19124:	ldr	r1, [sp, #80]	; 0x50
   19128:	mov	r4, #0
   1912c:	mov	r8, #0
   19130:	tst	r1, #1
   19134:	bne	19174 <__assert_fail@plt+0x7b6c>
   19138:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1913c:	cmp	r0, #0
   19140:	mov	r0, r5
   19144:	beq	19168 <__assert_fail@plt+0x7b60>
   19148:	ldr	r1, [fp, #16]
   1914c:	ubfx	r0, r5, #5, #3
   19150:	mov	r2, #1
   19154:	ldr	r0, [r1, r0, lsl #2]
   19158:	and	r1, r5, #31
   1915c:	tst	r0, r2, lsl r1
   19160:	mov	r0, r5
   19164:	bne	19174 <__assert_fail@plt+0x7b6c>
   19168:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1916c:	cmp	r1, #0
   19170:	beq	195cc <__assert_fail@plt+0x7fc4>
   19174:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19178:	tst	r1, #1
   1917c:	bne	19910 <__assert_fail@plt+0x8308>
   19180:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19184:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19188:	cmp	r1, #2
   1918c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   19190:	movwne	r1, #1
   19194:	orr	r1, r1, r2
   19198:	tst	r1, #1
   1919c:	bne	191d4 <__assert_fail@plt+0x7bcc>
   191a0:	cmp	r9, sl
   191a4:	movcc	r1, #39	; 0x27
   191a8:	strbcc	r1, [r6, r9]
   191ac:	add	r1, r9, #1
   191b0:	cmp	r1, sl
   191b4:	movcc	r2, #36	; 0x24
   191b8:	strbcc	r2, [r6, r1]
   191bc:	add	r1, r9, #2
   191c0:	add	r9, r9, #3
   191c4:	cmp	r1, sl
   191c8:	movcc	r2, #39	; 0x27
   191cc:	strbcc	r2, [r6, r1]
   191d0:	mov	r2, #1
   191d4:	cmp	r9, sl
   191d8:	movcc	r1, #92	; 0x5c
   191dc:	strbcc	r1, [r6, r9]
   191e0:	add	r9, r9, #1
   191e4:	cmp	r9, sl
   191e8:	add	r7, r7, #1
   191ec:	strbcc	r0, [r6, r9]
   191f0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   191f4:	add	r9, r9, #1
   191f8:	and	r0, r0, r4
   191fc:	mov	r4, r0
   19200:	cmn	lr, #1
   19204:	bne	18b78 <__assert_fail@plt+0x7570>
   19208:	b	18b84 <__assert_fail@plt+0x757c>
   1920c:	ldr	r0, [sp, #28]
   19210:	mov	r4, #0
   19214:	mov	r8, #0
   19218:	mov	r5, #0
   1921c:	cmp	r0, #0
   19220:	beq	19138 <__assert_fail@plt+0x7b30>
   19224:	ldr	r4, [fp, #-52]	; 0xffffffcc
   19228:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1922c:	add	r7, r7, #1
   19230:	cmn	lr, #1
   19234:	bne	18b78 <__assert_fail@plt+0x7570>
   19238:	b	18b84 <__assert_fail@plt+0x757c>
   1923c:	mov	r0, #0
   19240:	cmn	lr, #1
   19244:	str	r0, [fp, #-36]	; 0xffffffdc
   19248:	str	r0, [fp, #-40]	; 0xffffffd8
   1924c:	bne	19260 <__assert_fail@plt+0x7c58>
   19250:	mov	r0, ip
   19254:	bl	114b8 <strlen@plt>
   19258:	ldr	ip, [fp, #-84]	; 0xffffffac
   1925c:	mov	lr, r0
   19260:	ldr	r0, [sp, #36]	; 0x24
   19264:	str	sl, [sp, #56]	; 0x38
   19268:	str	lr, [sp, #84]	; 0x54
   1926c:	cmp	r0, #0
   19270:	beq	19488 <__assert_fail@plt+0x7e80>
   19274:	add	r0, ip, r7
   19278:	mov	r4, #1
   1927c:	mov	r6, #0
   19280:	sub	sl, fp, #40	; 0x28
   19284:	str	r0, [sp, #20]
   19288:	str	r6, [sp, #64]	; 0x40
   1928c:	add	r6, r6, r7
   19290:	sub	r0, fp, #44	; 0x2c
   19294:	mov	r3, sl
   19298:	add	r1, ip, r6
   1929c:	sub	r2, lr, r6
   192a0:	bl	1f17c <__assert_fail@plt+0xdb74>
   192a4:	cmn	r0, #2
   192a8:	beq	195e4 <__assert_fail@plt+0x7fdc>
   192ac:	ldr	sl, [sp, #56]	; 0x38
   192b0:	cmn	r0, #1
   192b4:	beq	195d8 <__assert_fail@plt+0x7fd0>
   192b8:	cmp	r0, #0
   192bc:	beq	195dc <__assert_fail@plt+0x7fd4>
   192c0:	cmp	r0, #2
   192c4:	bcc	19384 <__assert_fail@plt+0x7d7c>
   192c8:	ldr	r1, [sp, #64]	; 0x40
   192cc:	ldr	r2, [sp, #20]
   192d0:	add	r1, r2, r1
   192d4:	mov	r2, #1
   192d8:	ldrb	r3, [r1, r2]
   192dc:	sub	r3, r3, #91	; 0x5b
   192e0:	cmp	r3, #33	; 0x21
   192e4:	bhi	19378 <__assert_fail@plt+0x7d70>
   192e8:	add	r6, pc, #0
   192ec:	ldr	pc, [r6, r3, lsl #2]
   192f0:	andeq	r9, r1, ip, lsr r9
   192f4:	andeq	r9, r1, ip, lsr r9
   192f8:	andeq	r9, r1, r8, ror r3
   192fc:	andeq	r9, r1, ip, lsr r9
   19300:	andeq	r9, r1, r8, ror r3
   19304:	andeq	r9, r1, ip, lsr r9
   19308:	andeq	r9, r1, r8, ror r3
   1930c:	andeq	r9, r1, r8, ror r3
   19310:	andeq	r9, r1, r8, ror r3
   19314:	andeq	r9, r1, r8, ror r3
   19318:	andeq	r9, r1, r8, ror r3
   1931c:	andeq	r9, r1, r8, ror r3
   19320:	andeq	r9, r1, r8, ror r3
   19324:	andeq	r9, r1, r8, ror r3
   19328:	andeq	r9, r1, r8, ror r3
   1932c:	andeq	r9, r1, r8, ror r3
   19330:	andeq	r9, r1, r8, ror r3
   19334:	andeq	r9, r1, r8, ror r3
   19338:	andeq	r9, r1, r8, ror r3
   1933c:	andeq	r9, r1, r8, ror r3
   19340:	andeq	r9, r1, r8, ror r3
   19344:	andeq	r9, r1, r8, ror r3
   19348:	andeq	r9, r1, r8, ror r3
   1934c:	andeq	r9, r1, r8, ror r3
   19350:	andeq	r9, r1, r8, ror r3
   19354:	andeq	r9, r1, r8, ror r3
   19358:	andeq	r9, r1, r8, ror r3
   1935c:	andeq	r9, r1, r8, ror r3
   19360:	andeq	r9, r1, r8, ror r3
   19364:	andeq	r9, r1, r8, ror r3
   19368:	andeq	r9, r1, r8, ror r3
   1936c:	andeq	r9, r1, r8, ror r3
   19370:	andeq	r9, r1, r8, ror r3
   19374:	andeq	r9, r1, ip, lsr r9
   19378:	add	r2, r2, #1
   1937c:	cmp	r2, r0
   19380:	bcc	192d8 <__assert_fail@plt+0x7cd0>
   19384:	ldr	r6, [sp, #64]	; 0x40
   19388:	add	r6, r0, r6
   1938c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19390:	bl	113c8 <iswprint@plt>
   19394:	cmp	r0, #0
   19398:	sub	sl, fp, #40	; 0x28
   1939c:	movwne	r0, #1
   193a0:	and	r4, r4, r0
   193a4:	mov	r0, sl
   193a8:	bl	11374 <mbsinit@plt>
   193ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   193b0:	ldr	lr, [sp, #84]	; 0x54
   193b4:	cmp	r0, #0
   193b8:	beq	19288 <__assert_fail@plt+0x7c80>
   193bc:	b	19628 <__assert_fail@plt+0x8020>
   193c0:	ldr	r0, [sp, #24]
   193c4:	cmp	r0, #0
   193c8:	beq	19470 <__assert_fail@plt+0x7e68>
   193cc:	add	r0, r7, #2
   193d0:	cmp	r0, lr
   193d4:	bcs	19470 <__assert_fail@plt+0x7e68>
   193d8:	add	r1, ip, r7
   193dc:	ldrb	r1, [r1, #1]
   193e0:	cmp	r1, #63	; 0x3f
   193e4:	bne	19470 <__assert_fail@plt+0x7e68>
   193e8:	ldrb	r5, [ip, r0]
   193ec:	sub	r1, r5, #33	; 0x21
   193f0:	cmp	r1, #29
   193f4:	bhi	19470 <__assert_fail@plt+0x7e68>
   193f8:	movw	r3, #20929	; 0x51c1
   193fc:	mov	r2, #1
   19400:	movt	r3, #14336	; 0x3800
   19404:	tst	r3, r2, lsl r1
   19408:	beq	19470 <__assert_fail@plt+0x7e68>
   1940c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19410:	tst	r1, #1
   19414:	bne	19a60 <__assert_fail@plt+0x8458>
   19418:	cmp	r9, sl
   1941c:	mov	r7, r0
   19420:	mov	r4, #0
   19424:	movcc	r1, #63	; 0x3f
   19428:	strbcc	r1, [r6, r9]
   1942c:	add	r1, r9, #1
   19430:	cmp	r1, sl
   19434:	movcc	r2, #34	; 0x22
   19438:	strbcc	r2, [r6, r1]
   1943c:	add	r1, r9, #2
   19440:	cmp	r1, sl
   19444:	movcc	r2, #34	; 0x22
   19448:	strbcc	r2, [r6, r1]
   1944c:	add	r1, r9, #3
   19450:	add	r9, r9, #4
   19454:	cmp	r1, sl
   19458:	movcc	r2, #63	; 0x3f
   1945c:	strbcc	r2, [r6, r1]
   19460:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19464:	cmp	r0, #0
   19468:	bne	18e60 <__assert_fail@plt+0x7858>
   1946c:	b	19138 <__assert_fail@plt+0x7b30>
   19470:	mov	r5, #63	; 0x3f
   19474:	mov	r4, #0
   19478:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1947c:	cmp	r0, #0
   19480:	bne	18e60 <__assert_fail@plt+0x7858>
   19484:	b	19138 <__assert_fail@plt+0x7b30>
   19488:	mov	r4, #1
   1948c:	mov	r6, #0
   19490:	sub	sl, fp, #40	; 0x28
   19494:	str	r6, [sp, #64]	; 0x40
   19498:	add	r6, r6, r7
   1949c:	sub	r0, fp, #44	; 0x2c
   194a0:	mov	r3, sl
   194a4:	add	r1, ip, r6
   194a8:	sub	r2, lr, r6
   194ac:	bl	1f17c <__assert_fail@plt+0xdb74>
   194b0:	cmn	r0, #2
   194b4:	beq	195e4 <__assert_fail@plt+0x7fdc>
   194b8:	cmn	r0, #1
   194bc:	beq	195d8 <__assert_fail@plt+0x7fd0>
   194c0:	ldr	r6, [sp, #64]	; 0x40
   194c4:	cmp	r0, #0
   194c8:	beq	19624 <__assert_fail@plt+0x801c>
   194cc:	add	r6, r0, r6
   194d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   194d4:	bl	113c8 <iswprint@plt>
   194d8:	cmp	r0, #0
   194dc:	sub	sl, fp, #40	; 0x28
   194e0:	movwne	r0, #1
   194e4:	and	r4, r4, r0
   194e8:	mov	r0, sl
   194ec:	bl	11374 <mbsinit@plt>
   194f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   194f4:	ldr	lr, [sp, #84]	; 0x54
   194f8:	cmp	r0, #0
   194fc:	beq	19494 <__assert_fail@plt+0x7e8c>
   19500:	b	19628 <__assert_fail@plt+0x8020>
   19504:	cmp	r9, sl
   19508:	mov	r2, #1
   1950c:	movcc	r0, #39	; 0x27
   19510:	strbcc	r0, [r6, r9]
   19514:	add	r0, r9, #1
   19518:	cmp	r0, sl
   1951c:	movcc	r1, #36	; 0x24
   19520:	strbcc	r1, [r6, r0]
   19524:	add	r0, r9, #2
   19528:	cmp	r0, sl
   1952c:	movcc	r1, #39	; 0x27
   19530:	strbcc	r1, [r6, r0]
   19534:	add	r0, r9, #3
   19538:	cmp	r0, sl
   1953c:	add	r9, r0, #1
   19540:	str	r2, [fp, #-48]	; 0xffffffd0
   19544:	movcc	r1, #92	; 0x5c
   19548:	strbcc	r1, [r6, r0]
   1954c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19550:	cmp	r1, #2
   19554:	beq	195b4 <__assert_fail@plt+0x7fac>
   19558:	add	r1, r7, #1
   1955c:	mov	r4, #0
   19560:	mov	r8, #1
   19564:	mov	r5, #48	; 0x30
   19568:	cmp	r1, lr
   1956c:	bcs	18e54 <__assert_fail@plt+0x784c>
   19570:	ldrb	r1, [ip, r1]
   19574:	sub	r1, r1, #48	; 0x30
   19578:	uxtb	r1, r1
   1957c:	cmp	r1, #9
   19580:	bhi	18e54 <__assert_fail@plt+0x784c>
   19584:	cmp	r9, sl
   19588:	movcc	r1, #48	; 0x30
   1958c:	strbcc	r1, [r6, r9]
   19590:	add	r1, r0, #2
   19594:	add	r9, r0, #3
   19598:	cmp	r1, sl
   1959c:	movcc	r2, #48	; 0x30
   195a0:	strbcc	r2, [r6, r1]
   195a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   195a8:	cmp	r0, #0
   195ac:	bne	18e60 <__assert_fail@plt+0x7858>
   195b0:	b	19138 <__assert_fail@plt+0x7b30>
   195b4:	mov	r0, #48	; 0x30
   195b8:	mov	r8, #1
   195bc:	mov	r4, #0
   195c0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   195c4:	cmp	r1, #0
   195c8:	bne	19174 <__assert_fail@plt+0x7b6c>
   195cc:	cmp	r8, #0
   195d0:	beq	190f0 <__assert_fail@plt+0x7ae8>
   195d4:	b	18ee0 <__assert_fail@plt+0x78d8>
   195d8:	mov	r4, #0
   195dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   195e0:	b	1961c <__assert_fail@plt+0x8014>
   195e4:	ldr	r1, [sp, #84]	; 0x54
   195e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   195ec:	mov	r4, #0
   195f0:	cmp	r6, r1
   195f4:	bcs	1961c <__assert_fail@plt+0x8014>
   195f8:	ldrb	r0, [ip, r6]
   195fc:	cmp	r0, #0
   19600:	beq	1961c <__assert_fail@plt+0x8014>
   19604:	ldr	r0, [sp, #64]	; 0x40
   19608:	add	r0, r0, #1
   1960c:	add	r6, r0, r7
   19610:	str	r0, [sp, #64]	; 0x40
   19614:	cmp	r6, r1
   19618:	bcc	195f8 <__assert_fail@plt+0x7ff0>
   1961c:	ldr	r6, [sp, #64]	; 0x40
   19620:	b	19628 <__assert_fail@plt+0x8020>
   19624:	ldr	ip, [fp, #-84]	; 0xffffffac
   19628:	mov	r1, r6
   1962c:	ldr	r6, [sp, #76]	; 0x4c
   19630:	ldr	sl, [sp, #56]	; 0x38
   19634:	ldr	r0, [sp, #44]	; 0x2c
   19638:	cmp	r1, #1
   1963c:	orr	r2, r4, r0
   19640:	mov	r0, r1
   19644:	bhi	19664 <__assert_fail@plt+0x805c>
   19648:	tst	r2, #1
   1964c:	beq	19664 <__assert_fail@plt+0x805c>
   19650:	ldr	lr, [sp, #84]	; 0x54
   19654:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19658:	cmp	r0, #0
   1965c:	bne	18e60 <__assert_fail@plt+0x7858>
   19660:	b	19138 <__assert_fail@plt+0x7b30>
   19664:	str	r2, [sp, #64]	; 0x40
   19668:	add	r0, r0, r7
   1966c:	add	r1, r7, #1
   19670:	ldr	lr, [sp, #84]	; 0x54
   19674:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19678:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1967c:	mov	r3, #0
   19680:	str	r0, [sp, #56]	; 0x38
   19684:	ldr	r0, [sp, #64]	; 0x40
   19688:	tst	r0, #1
   1968c:	bne	19774 <__assert_fail@plt+0x816c>
   19690:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19694:	tst	r0, #1
   19698:	bne	19914 <__assert_fail@plt+0x830c>
   1969c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   196a0:	cmp	r7, #2
   196a4:	movwne	r3, #1
   196a8:	orr	r3, r3, r2
   196ac:	tst	r3, #1
   196b0:	bne	196e8 <__assert_fail@plt+0x80e0>
   196b4:	cmp	r9, sl
   196b8:	add	r3, r9, #1
   196bc:	movcc	r2, #39	; 0x27
   196c0:	strbcc	r2, [r6, r9]
   196c4:	cmp	r3, sl
   196c8:	movcc	r2, #36	; 0x24
   196cc:	strbcc	r2, [r6, r3]
   196d0:	add	r3, r9, #2
   196d4:	add	r9, r9, #3
   196d8:	cmp	r3, sl
   196dc:	movcc	r2, #39	; 0x27
   196e0:	strbcc	r2, [r6, r3]
   196e4:	mov	r2, #1
   196e8:	cmp	r9, sl
   196ec:	mov	r0, r2
   196f0:	movcc	r3, #92	; 0x5c
   196f4:	strbcc	r3, [r6, r9]
   196f8:	add	r3, r9, #1
   196fc:	cmp	r3, sl
   19700:	andcc	r7, r5, #192	; 0xc0
   19704:	movcc	r2, #48	; 0x30
   19708:	orrcc	r7, r2, r7, lsr #6
   1970c:	strbcc	r7, [r6, r3]
   19710:	add	r3, r9, #2
   19714:	add	r9, r9, #3
   19718:	cmp	r3, sl
   1971c:	lsrcc	r7, r5, #3
   19720:	movcc	r2, #6
   19724:	bficc	r7, r2, #3, #29
   19728:	mov	r2, #6
   1972c:	strbcc	r7, [r6, r3]
   19730:	bfi	r5, r2, #3, #29
   19734:	mov	r3, #1
   19738:	mov	r2, r0
   1973c:	ldr	r0, [sp, #56]	; 0x38
   19740:	and	r8, r3, #1
   19744:	cmp	r0, r1
   19748:	bhi	197a8 <__assert_fail@plt+0x81a0>
   1974c:	b	197e8 <__assert_fail@plt+0x81e0>
   19750:	cmp	r9, sl
   19754:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19758:	strbcc	r5, [r6, r9]
   1975c:	add	r9, r9, #1
   19760:	ldrb	r5, [ip, r1]
   19764:	add	r1, r1, #1
   19768:	ldr	r0, [sp, #64]	; 0x40
   1976c:	tst	r0, #1
   19770:	beq	19690 <__assert_fail@plt+0x8088>
   19774:	ldr	r7, [fp, #-56]	; 0xffffffc8
   19778:	tst	r7, #1
   1977c:	beq	19790 <__assert_fail@plt+0x8188>
   19780:	cmp	r9, sl
   19784:	movcc	r7, #92	; 0x5c
   19788:	strbcc	r7, [r6, r9]
   1978c:	add	r9, r9, #1
   19790:	mov	r7, #0
   19794:	str	r7, [fp, #-56]	; 0xffffffc8
   19798:	ldr	r0, [sp, #56]	; 0x38
   1979c:	and	r8, r3, #1
   197a0:	cmp	r0, r1
   197a4:	bls	197e8 <__assert_fail@plt+0x81e0>
   197a8:	cmp	r8, #0
   197ac:	mvn	r7, r2
   197b0:	movwne	r8, #1
   197b4:	orr	r7, r7, r8
   197b8:	tst	r7, #1
   197bc:	bne	19750 <__assert_fail@plt+0x8148>
   197c0:	cmp	r9, sl
   197c4:	movcc	r7, #39	; 0x27
   197c8:	strbcc	r7, [r6, r9]
   197cc:	add	r7, r9, #1
   197d0:	add	r9, r9, #2
   197d4:	cmp	r7, sl
   197d8:	movcc	r2, #39	; 0x27
   197dc:	strbcc	r2, [r6, r7]
   197e0:	mov	r2, #0
   197e4:	b	19750 <__assert_fail@plt+0x8148>
   197e8:	cmp	r8, #0
   197ec:	sub	r7, r1, #1
   197f0:	mov	r0, r5
   197f4:	str	r2, [fp, #-48]	; 0xffffffd0
   197f8:	movwne	r8, #1
   197fc:	cmp	r8, #0
   19800:	beq	190f0 <__assert_fail@plt+0x7ae8>
   19804:	b	18ee0 <__assert_fail@plt+0x78d8>
   19808:	mov	lr, r7
   1980c:	b	19814 <__assert_fail@plt+0x820c>
   19810:	mvn	lr, #0
   19814:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19818:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1981c:	eor	r0, r7, #2
   19820:	orr	r0, r0, r9
   19824:	clz	r0, r0
   19828:	lsr	r0, r0, #5
   1982c:	tst	r1, r0
   19830:	bne	19930 <__assert_fail@plt+0x8328>
   19834:	mov	r0, r1
   19838:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1983c:	cmp	r7, #2
   19840:	movwne	r1, #1
   19844:	orr	r0, r0, r1
   19848:	tst	r0, #1
   1984c:	ldreq	r0, [sp, #52]	; 0x34
   19850:	streq	lr, [sp, #84]	; 0x54
   19854:	eoreq	r0, r0, #1
   19858:	tsteq	r0, #1
   1985c:	bne	199f4 <__assert_fail@plt+0x83ec>
   19860:	tst	r4, #1
   19864:	bne	199b0 <__assert_fail@plt+0x83a8>
   19868:	ldr	r6, [sp, #48]	; 0x30
   1986c:	mov	r8, #0
   19870:	cmp	r6, #0
   19874:	beq	199ec <__assert_fail@plt+0x83e4>
   19878:	ldr	r0, [sp, #80]	; 0x50
   1987c:	mov	r1, #0
   19880:	cmp	sl, #0
   19884:	mov	r4, #0
   19888:	str	r1, [fp, #-72]	; 0xffffffb8
   1988c:	beq	18780 <__assert_fail@plt+0x7178>
   19890:	b	199f4 <__assert_fail@plt+0x83ec>
   19894:	ldrb	r1, [r0, #3]
   19898:	cmp	r1, #56	; 0x38
   1989c:	ldrbeq	r1, [r0, #4]
   198a0:	cmpeq	r1, #48	; 0x30
   198a4:	bne	18978 <__assert_fail@plt+0x7370>
   198a8:	ldrb	r1, [r0, #5]
   198ac:	cmp	r1, #51	; 0x33
   198b0:	ldrbeq	r1, [r0, #6]
   198b4:	cmpeq	r1, #48	; 0x30
   198b8:	bne	18978 <__assert_fail@plt+0x7370>
   198bc:	ldrb	r0, [r0, #7]
   198c0:	cmp	r0, #0
   198c4:	movw	r0, #3305	; 0xce9
   198c8:	movt	r0, #2
   198cc:	str	r0, [sp, #68]	; 0x44
   198d0:	bne	18978 <__assert_fail@plt+0x7370>
   198d4:	b	18994 <__assert_fail@plt+0x738c>
   198d8:	ldrb	r1, [r0, #4]
   198dc:	cmp	r1, #48	; 0x30
   198e0:	ldrbeq	r1, [r0, #5]
   198e4:	cmpeq	r1, #51	; 0x33
   198e8:	bne	18a5c <__assert_fail@plt+0x7454>
   198ec:	ldrb	r1, [r0, #6]
   198f0:	cmp	r1, #48	; 0x30
   198f4:	ldrbeq	r0, [r0, #7]
   198f8:	cmpeq	r0, #0
   198fc:	bne	18a5c <__assert_fail@plt+0x7454>
   19900:	movw	r0, #3309	; 0xced
   19904:	movt	r0, #2
   19908:	str	r0, [sp, #72]	; 0x48
   1990c:	b	18a7c <__assert_fail@plt+0x7474>
   19910:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19914:	ldr	r2, [sp, #80]	; 0x50
   19918:	b	19950 <__assert_fail@plt+0x8348>
   1991c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19920:	mov	r2, #1
   19924:	mov	lr, r4
   19928:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1992c:	b	19950 <__assert_fail@plt+0x8348>
   19930:	ldr	r2, [sp, #80]	; 0x50
   19934:	mov	r7, #2
   19938:	b	19950 <__assert_fail@plt+0x8348>
   1993c:	ldr	r6, [sp, #76]	; 0x4c
   19940:	ldr	ip, [fp, #-84]	; 0xffffffac
   19944:	ldr	lr, [sp, #84]	; 0x54
   19948:	ldr	r2, [sp, #80]	; 0x50
   1994c:	mov	r7, #2
   19950:	mov	r0, #0
   19954:	ldr	r1, [fp, #12]
   19958:	tst	r2, #1
   1995c:	mov	r2, r7
   19960:	mov	r3, lr
   19964:	str	r0, [sp, #8]
   19968:	ldr	r0, [sp, #68]	; 0x44
   1996c:	movwne	r2, #4
   19970:	cmp	r7, #2
   19974:	movne	r2, r7
   19978:	str	r2, [sp]
   1997c:	mov	r2, ip
   19980:	bic	r1, r1, #2
   19984:	str	r0, [sp, #12]
   19988:	ldr	r0, [sp, #72]	; 0x48
   1998c:	str	r1, [sp, #4]
   19990:	mov	r1, sl
   19994:	str	r0, [sp, #16]
   19998:	mov	r0, r6
   1999c:	bl	18704 <__assert_fail@plt+0x70fc>
   199a0:	mov	r9, r0
   199a4:	mov	r0, r9
   199a8:	sub	sp, fp, #28
   199ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199b0:	mov	r0, #5
   199b4:	ldr	r1, [sp, #48]	; 0x30
   199b8:	ldr	r2, [fp, #-84]	; 0xffffffac
   199bc:	ldr	r3, [sp, #84]	; 0x54
   199c0:	str	r0, [sp]
   199c4:	ldr	r0, [fp, #12]
   199c8:	str	r0, [sp, #4]
   199cc:	ldr	r0, [fp, #16]
   199d0:	str	r0, [sp, #8]
   199d4:	ldr	r0, [sp, #68]	; 0x44
   199d8:	str	r0, [sp, #12]
   199dc:	ldr	r0, [sp, #72]	; 0x48
   199e0:	str	r0, [sp, #16]
   199e4:	ldr	r0, [sp, #76]	; 0x4c
   199e8:	b	1999c <__assert_fail@plt+0x8394>
   199ec:	mov	r0, #0
   199f0:	str	r0, [fp, #-72]	; 0xffffffb8
   199f4:	ldr	r1, [sp, #92]	; 0x5c
   199f8:	cmp	r1, #0
   199fc:	beq	19a3c <__assert_fail@plt+0x8434>
   19a00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19a04:	ldr	r2, [sp, #76]	; 0x4c
   19a08:	tst	r0, #1
   19a0c:	bne	19a40 <__assert_fail@plt+0x8438>
   19a10:	ldrb	r0, [r1]
   19a14:	cmp	r0, #0
   19a18:	beq	19a40 <__assert_fail@plt+0x8438>
   19a1c:	add	r1, r1, #1
   19a20:	cmp	r9, sl
   19a24:	strbcc	r0, [r2, r9]
   19a28:	add	r9, r9, #1
   19a2c:	ldrb	r0, [r1], #1
   19a30:	cmp	r0, #0
   19a34:	bne	19a20 <__assert_fail@plt+0x8418>
   19a38:	b	19a40 <__assert_fail@plt+0x8438>
   19a3c:	ldr	r2, [sp, #76]	; 0x4c
   19a40:	cmp	r9, sl
   19a44:	movcc	r0, #0
   19a48:	strbcc	r0, [r2, r9]
   19a4c:	mov	r0, r9
   19a50:	sub	sp, fp, #28
   19a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a58:	mov	r2, #1
   19a5c:	b	19928 <__assert_fail@plt+0x8320>
   19a60:	ldr	r2, [sp, #80]	; 0x50
   19a64:	mov	r7, #5
   19a68:	b	19950 <__assert_fail@plt+0x8348>
   19a6c:	bl	115f0 <abort@plt>
   19a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a74:	add	fp, sp, #28
   19a78:	sub	sp, sp, #28
   19a7c:	movw	r5, #8848	; 0x2290
   19a80:	cmp	r2, #0
   19a84:	mov	r4, r1
   19a88:	mov	r7, r0
   19a8c:	str	r0, [sp, #20]
   19a90:	movt	r5, #3
   19a94:	movne	r5, r2
   19a98:	bl	114e8 <__errno_location@plt>
   19a9c:	mov	sl, r0
   19aa0:	ldm	r5, {r0, r1}
   19aa4:	ldr	r2, [r5, #40]	; 0x28
   19aa8:	ldr	r3, [r5, #44]	; 0x2c
   19aac:	add	r9, r5, #8
   19ab0:	ldr	r6, [sl]
   19ab4:	orr	r8, r1, #1
   19ab8:	mov	r1, #0
   19abc:	str	r6, [sp, #24]
   19ac0:	stm	sp, {r0, r8, r9}
   19ac4:	str	r2, [sp, #12]
   19ac8:	str	r3, [sp, #16]
   19acc:	mov	r0, #0
   19ad0:	mov	r2, r7
   19ad4:	mov	r3, r4
   19ad8:	mov	r6, r4
   19adc:	bl	18704 <__assert_fail@plt+0x70fc>
   19ae0:	add	r7, r0, #1
   19ae4:	mov	r0, r7
   19ae8:	bl	1b518 <__assert_fail@plt+0x9f10>
   19aec:	mov	r4, r0
   19af0:	ldr	r0, [r5]
   19af4:	ldr	r2, [r5, #44]	; 0x2c
   19af8:	ldr	r1, [r5, #40]	; 0x28
   19afc:	mov	r3, r6
   19b00:	stm	sp, {r0, r8, r9}
   19b04:	str	r2, [sp, #16]
   19b08:	str	r1, [sp, #12]
   19b0c:	mov	r0, r4
   19b10:	mov	r1, r7
   19b14:	ldr	r2, [sp, #20]
   19b18:	bl	18704 <__assert_fail@plt+0x70fc>
   19b1c:	ldr	r0, [sp, #24]
   19b20:	str	r0, [sl]
   19b24:	mov	r0, r4
   19b28:	sub	sp, fp, #28
   19b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b34:	add	fp, sp, #28
   19b38:	sub	sp, sp, #36	; 0x24
   19b3c:	movw	r8, #8848	; 0x2290
   19b40:	cmp	r3, #0
   19b44:	mov	r4, r2
   19b48:	str	r2, [sp, #24]
   19b4c:	mov	r5, r1
   19b50:	mov	r6, r0
   19b54:	str	r0, [sp, #20]
   19b58:	movt	r8, #3
   19b5c:	movne	r8, r3
   19b60:	bl	114e8 <__errno_location@plt>
   19b64:	str	r0, [sp, #28]
   19b68:	cmp	r4, #0
   19b6c:	add	sl, r8, #8
   19b70:	ldm	r8, {r3, r9}
   19b74:	ldr	r7, [r0]
   19b78:	ldr	r1, [r8, #40]	; 0x28
   19b7c:	ldr	r2, [r8, #44]	; 0x2c
   19b80:	mov	r0, #0
   19b84:	orreq	r9, r9, #1
   19b88:	str	r7, [sp, #32]
   19b8c:	mov	r7, r5
   19b90:	stm	sp, {r3, r9, sl}
   19b94:	str	r1, [sp, #12]
   19b98:	str	r2, [sp, #16]
   19b9c:	mov	r1, #0
   19ba0:	mov	r2, r6
   19ba4:	mov	r3, r5
   19ba8:	bl	18704 <__assert_fail@plt+0x70fc>
   19bac:	add	r4, r0, #1
   19bb0:	mov	r5, r0
   19bb4:	mov	r0, r4
   19bb8:	bl	1b518 <__assert_fail@plt+0x9f10>
   19bbc:	mov	r6, r0
   19bc0:	ldr	r0, [r8]
   19bc4:	ldr	r2, [r8, #44]	; 0x2c
   19bc8:	ldr	r1, [r8, #40]	; 0x28
   19bcc:	mov	r3, r7
   19bd0:	stm	sp, {r0, r9, sl}
   19bd4:	str	r2, [sp, #16]
   19bd8:	str	r1, [sp, #12]
   19bdc:	mov	r0, r6
   19be0:	mov	r1, r4
   19be4:	ldr	r2, [sp, #20]
   19be8:	bl	18704 <__assert_fail@plt+0x70fc>
   19bec:	ldr	r0, [sp, #24]
   19bf0:	ldr	r1, [sp, #32]
   19bf4:	ldr	r2, [sp, #28]
   19bf8:	cmp	r0, #0
   19bfc:	str	r1, [r2]
   19c00:	strne	r5, [r0]
   19c04:	mov	r0, r6
   19c08:	sub	sp, fp, #28
   19c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c10:	push	{r4, r5, r6, r7, fp, lr}
   19c14:	add	fp, sp, #16
   19c18:	movw	r4, #8608	; 0x21a0
   19c1c:	movt	r4, #3
   19c20:	ldrd	r6, [r4]
   19c24:	cmp	r7, #2
   19c28:	blt	19c54 <__assert_fail@plt+0x864c>
   19c2c:	add	r5, r6, #12
   19c30:	mov	r7, #0
   19c34:	ldr	r0, [r5, r7, lsl #3]
   19c38:	bl	16170 <__assert_fail@plt+0x4b68>
   19c3c:	ldr	r1, [r4, #4]
   19c40:	add	r2, r7, #2
   19c44:	add	r0, r7, #1
   19c48:	mov	r7, r0
   19c4c:	cmp	r2, r1
   19c50:	blt	19c34 <__assert_fail@plt+0x862c>
   19c54:	ldr	r0, [r6, #4]
   19c58:	movw	r5, #8896	; 0x22c0
   19c5c:	movt	r5, #3
   19c60:	cmp	r0, r5
   19c64:	beq	19c78 <__assert_fail@plt+0x8670>
   19c68:	bl	16170 <__assert_fail@plt+0x4b68>
   19c6c:	mov	r0, #256	; 0x100
   19c70:	str	r0, [r4, #8]
   19c74:	str	r5, [r4, #12]
   19c78:	add	r5, r4, #8
   19c7c:	cmp	r6, r5
   19c80:	beq	19c90 <__assert_fail@plt+0x8688>
   19c84:	mov	r0, r6
   19c88:	bl	16170 <__assert_fail@plt+0x4b68>
   19c8c:	str	r5, [r4]
   19c90:	mov	r0, #1
   19c94:	str	r0, [r4, #4]
   19c98:	pop	{r4, r5, r6, r7, fp, pc}
   19c9c:	movw	r3, #8848	; 0x2290
   19ca0:	mvn	r2, #0
   19ca4:	movt	r3, #3
   19ca8:	b	19cac <__assert_fail@plt+0x86a4>
   19cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cb0:	add	fp, sp, #28
   19cb4:	sub	sp, sp, #44	; 0x2c
   19cb8:	mov	r7, r3
   19cbc:	str	r2, [sp, #36]	; 0x24
   19cc0:	str	r1, [sp, #32]
   19cc4:	mov	r5, r0
   19cc8:	bl	114e8 <__errno_location@plt>
   19ccc:	cmp	r5, #0
   19cd0:	blt	19e34 <__assert_fail@plt+0x882c>
   19cd4:	cmn	r5, #-2147483647	; 0x80000001
   19cd8:	beq	19e34 <__assert_fail@plt+0x882c>
   19cdc:	movw	r8, #8608	; 0x21a0
   19ce0:	mov	r4, r0
   19ce4:	movt	r8, #3
   19ce8:	ldr	r6, [r8]
   19cec:	ldr	r1, [r8, #4]
   19cf0:	ldr	r0, [r0]
   19cf4:	str	r4, [sp, #28]
   19cf8:	cmp	r1, r5
   19cfc:	str	r0, [sp, #24]
   19d00:	ble	19d0c <__assert_fail@plt+0x8704>
   19d04:	mov	sl, r6
   19d08:	b	19d70 <__assert_fail@plt+0x8768>
   19d0c:	mov	r0, #8
   19d10:	add	r9, r8, #8
   19d14:	add	r2, r5, #1
   19d18:	str	r1, [fp, #-32]	; 0xffffffe0
   19d1c:	mvn	r3, #-2147483648	; 0x80000000
   19d20:	str	r0, [sp]
   19d24:	subs	r0, r6, r9
   19d28:	sub	r2, r2, r1
   19d2c:	sub	r1, fp, #32
   19d30:	movne	r0, r6
   19d34:	bl	1b718 <__assert_fail@plt+0xa110>
   19d38:	str	r0, [r8]
   19d3c:	cmp	r6, r9
   19d40:	mov	sl, r0
   19d44:	ldrdeq	r0, [r8, #8]
   19d48:	stmeq	sl, {r0, r1}
   19d4c:	ldr	r1, [r8, #4]
   19d50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19d54:	add	r0, sl, r1, lsl #3
   19d58:	sub	r1, r2, r1
   19d5c:	lsl	r2, r1, #3
   19d60:	mov	r1, #0
   19d64:	bl	1150c <memset@plt>
   19d68:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19d6c:	str	r0, [r8, #4]
   19d70:	mov	r9, sl
   19d74:	ldr	r6, [r9, r5, lsl #3]!
   19d78:	ldr	r4, [r9, #4]!
   19d7c:	ldm	r7, {r0, r1}
   19d80:	ldr	r2, [r7, #40]	; 0x28
   19d84:	ldr	r3, [r7, #44]	; 0x2c
   19d88:	orr	r8, r1, #1
   19d8c:	add	r1, r7, #8
   19d90:	stm	sp, {r0, r8}
   19d94:	add	r0, sp, #8
   19d98:	str	r1, [sp, #20]
   19d9c:	stm	r0, {r1, r2, r3}
   19da0:	mov	r0, r4
   19da4:	mov	r1, r6
   19da8:	ldr	r2, [sp, #32]
   19dac:	ldr	r3, [sp, #36]	; 0x24
   19db0:	bl	18704 <__assert_fail@plt+0x70fc>
   19db4:	cmp	r6, r0
   19db8:	bhi	19e1c <__assert_fail@plt+0x8814>
   19dbc:	add	r6, r0, #1
   19dc0:	movw	r0, #8896	; 0x22c0
   19dc4:	movt	r0, #3
   19dc8:	str	r6, [sl, r5, lsl #3]
   19dcc:	cmp	r4, r0
   19dd0:	beq	19ddc <__assert_fail@plt+0x87d4>
   19dd4:	mov	r0, r4
   19dd8:	bl	16170 <__assert_fail@plt+0x4b68>
   19ddc:	mov	r0, r6
   19de0:	bl	1b518 <__assert_fail@plt+0x9f10>
   19de4:	str	r0, [r9]
   19de8:	mov	r4, r0
   19dec:	add	r3, sp, #8
   19df0:	ldr	r0, [r7]
   19df4:	ldr	r1, [r7, #40]	; 0x28
   19df8:	ldr	r2, [r7, #44]	; 0x2c
   19dfc:	stm	sp, {r0, r8}
   19e00:	ldr	r0, [sp, #20]
   19e04:	stm	r3, {r0, r1, r2}
   19e08:	mov	r0, r4
   19e0c:	mov	r1, r6
   19e10:	ldr	r2, [sp, #32]
   19e14:	ldr	r3, [sp, #36]	; 0x24
   19e18:	bl	18704 <__assert_fail@plt+0x70fc>
   19e1c:	ldr	r1, [sp, #24]
   19e20:	ldr	r0, [sp, #28]
   19e24:	str	r1, [r0]
   19e28:	mov	r0, r4
   19e2c:	sub	sp, fp, #28
   19e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e34:	bl	115f0 <abort@plt>
   19e38:	movw	r3, #8848	; 0x2290
   19e3c:	movt	r3, #3
   19e40:	b	19cac <__assert_fail@plt+0x86a4>
   19e44:	movw	r3, #8848	; 0x2290
   19e48:	mov	r1, r0
   19e4c:	mov	r0, #0
   19e50:	mvn	r2, #0
   19e54:	movt	r3, #3
   19e58:	b	19cac <__assert_fail@plt+0x86a4>
   19e5c:	movw	r3, #8848	; 0x2290
   19e60:	mov	r2, r1
   19e64:	mov	r1, r0
   19e68:	mov	r0, #0
   19e6c:	movt	r3, #3
   19e70:	b	19cac <__assert_fail@plt+0x86a4>
   19e74:	push	{fp, lr}
   19e78:	mov	fp, sp
   19e7c:	sub	sp, sp, #48	; 0x30
   19e80:	vmov.i32	q8, #0	; 0x00000000
   19e84:	mov	ip, #32
   19e88:	mov	r3, sp
   19e8c:	mov	lr, r2
   19e90:	cmp	r1, #10
   19e94:	add	r2, r3, #16
   19e98:	vst1.64	{d16-d17}, [r3], ip
   19e9c:	vst1.64	{d16-d17}, [r3]
   19ea0:	vst1.64	{d16-d17}, [r2]
   19ea4:	beq	19ec4 <__assert_fail@plt+0x88bc>
   19ea8:	str	r1, [sp]
   19eac:	mov	r3, sp
   19eb0:	mov	r1, lr
   19eb4:	mvn	r2, #0
   19eb8:	bl	19cac <__assert_fail@plt+0x86a4>
   19ebc:	mov	sp, fp
   19ec0:	pop	{fp, pc}
   19ec4:	bl	115f0 <abort@plt>
   19ec8:	push	{r4, sl, fp, lr}
   19ecc:	add	fp, sp, #8
   19ed0:	sub	sp, sp, #48	; 0x30
   19ed4:	mov	ip, r3
   19ed8:	mov	r3, sp
   19edc:	vmov.i32	q8, #0	; 0x00000000
   19ee0:	mov	lr, #32
   19ee4:	cmp	r1, #10
   19ee8:	add	r4, r3, #16
   19eec:	vst1.64	{d16-d17}, [r3], lr
   19ef0:	vst1.64	{d16-d17}, [r3]
   19ef4:	vst1.64	{d16-d17}, [r4]
   19ef8:	beq	19f18 <__assert_fail@plt+0x8910>
   19efc:	str	r1, [sp]
   19f00:	mov	r1, r2
   19f04:	mov	r3, sp
   19f08:	mov	r2, ip
   19f0c:	bl	19cac <__assert_fail@plt+0x86a4>
   19f10:	sub	sp, fp, #8
   19f14:	pop	{r4, sl, fp, pc}
   19f18:	bl	115f0 <abort@plt>
   19f1c:	push	{fp, lr}
   19f20:	mov	fp, sp
   19f24:	sub	sp, sp, #48	; 0x30
   19f28:	mov	r3, sp
   19f2c:	vmov.i32	q8, #0	; 0x00000000
   19f30:	mov	ip, #32
   19f34:	cmp	r0, #10
   19f38:	add	r2, r3, #16
   19f3c:	vst1.64	{d16-d17}, [r3], ip
   19f40:	vst1.64	{d16-d17}, [r3]
   19f44:	vst1.64	{d16-d17}, [r2]
   19f48:	beq	19f68 <__assert_fail@plt+0x8960>
   19f4c:	str	r0, [sp]
   19f50:	mov	r3, sp
   19f54:	mov	r0, #0
   19f58:	mvn	r2, #0
   19f5c:	bl	19cac <__assert_fail@plt+0x86a4>
   19f60:	mov	sp, fp
   19f64:	pop	{fp, pc}
   19f68:	bl	115f0 <abort@plt>
   19f6c:	push	{fp, lr}
   19f70:	mov	fp, sp
   19f74:	sub	sp, sp, #48	; 0x30
   19f78:	mov	r3, sp
   19f7c:	vmov.i32	q8, #0	; 0x00000000
   19f80:	mov	ip, #32
   19f84:	cmp	r0, #10
   19f88:	add	lr, r3, #16
   19f8c:	vst1.64	{d16-d17}, [r3], ip
   19f90:	vst1.64	{d16-d17}, [r3]
   19f94:	vst1.64	{d16-d17}, [lr]
   19f98:	beq	19fb4 <__assert_fail@plt+0x89ac>
   19f9c:	str	r0, [sp]
   19fa0:	mov	r3, sp
   19fa4:	mov	r0, #0
   19fa8:	bl	19cac <__assert_fail@plt+0x86a4>
   19fac:	mov	sp, fp
   19fb0:	pop	{fp, pc}
   19fb4:	bl	115f0 <abort@plt>
   19fb8:	push	{r4, sl, fp, lr}
   19fbc:	add	fp, sp, #8
   19fc0:	sub	sp, sp, #48	; 0x30
   19fc4:	mov	lr, r0
   19fc8:	movw	r0, #8848	; 0x2290
   19fcc:	mov	r3, #32
   19fd0:	mov	ip, r1
   19fd4:	mov	r4, #1
   19fd8:	movt	r0, #3
   19fdc:	add	r1, r0, #16
   19fe0:	vld1.64	{d16-d17}, [r0], r3
   19fe4:	mov	r3, sp
   19fe8:	vld1.64	{d18-d19}, [r1]
   19fec:	add	r1, r3, #16
   19ff0:	vld1.64	{d20-d21}, [r0]
   19ff4:	add	r0, r3, #32
   19ff8:	vst1.64	{d18-d19}, [r1]
   19ffc:	mov	r1, r3
   1a000:	vst1.64	{d20-d21}, [r0]
   1a004:	mov	r0, #28
   1a008:	and	r0, r0, r2, lsr #3
   1a00c:	and	r2, r2, #31
   1a010:	vst1.64	{d16-d17}, [r1], r0
   1a014:	ldr	r0, [r1, #8]
   1a018:	bic	r4, r4, r0, lsr r2
   1a01c:	eor	r0, r0, r4, lsl r2
   1a020:	mov	r2, ip
   1a024:	str	r0, [r1, #8]
   1a028:	mov	r0, #0
   1a02c:	mov	r1, lr
   1a030:	bl	19cac <__assert_fail@plt+0x86a4>
   1a034:	sub	sp, fp, #8
   1a038:	pop	{r4, sl, fp, pc}
   1a03c:	push	{fp, lr}
   1a040:	mov	fp, sp
   1a044:	sub	sp, sp, #48	; 0x30
   1a048:	mov	ip, r0
   1a04c:	movw	r0, #8848	; 0x2290
   1a050:	mov	r3, #32
   1a054:	movt	r0, #3
   1a058:	add	r2, r0, #16
   1a05c:	vld1.64	{d16-d17}, [r0], r3
   1a060:	mov	r3, sp
   1a064:	vld1.64	{d18-d19}, [r2]
   1a068:	add	r2, r3, #16
   1a06c:	vld1.64	{d20-d21}, [r0]
   1a070:	add	r0, r3, #32
   1a074:	vst1.64	{d18-d19}, [r2]
   1a078:	mov	r2, r3
   1a07c:	vst1.64	{d20-d21}, [r0]
   1a080:	mov	r0, #28
   1a084:	and	r0, r0, r1, lsr #3
   1a088:	and	r1, r1, #31
   1a08c:	vst1.64	{d16-d17}, [r2], r0
   1a090:	mov	r0, #1
   1a094:	ldr	lr, [r2, #8]
   1a098:	bic	r0, r0, lr, lsr r1
   1a09c:	eor	r0, lr, r0, lsl r1
   1a0a0:	mov	r1, ip
   1a0a4:	str	r0, [r2, #8]
   1a0a8:	mov	r0, #0
   1a0ac:	mvn	r2, #0
   1a0b0:	bl	19cac <__assert_fail@plt+0x86a4>
   1a0b4:	mov	sp, fp
   1a0b8:	pop	{fp, pc}
   1a0bc:	push	{fp, lr}
   1a0c0:	mov	fp, sp
   1a0c4:	sub	sp, sp, #48	; 0x30
   1a0c8:	movw	r2, #8848	; 0x2290
   1a0cc:	mov	r3, #32
   1a0d0:	mov	r1, r0
   1a0d4:	movt	r2, #3
   1a0d8:	add	r0, r2, #16
   1a0dc:	vld1.64	{d16-d17}, [r2], r3
   1a0e0:	mov	r3, sp
   1a0e4:	vld1.64	{d18-d19}, [r0]
   1a0e8:	add	r0, r3, #16
   1a0ec:	vld1.64	{d20-d21}, [r2]
   1a0f0:	mov	r2, r3
   1a0f4:	vst1.64	{d18-d19}, [r0]
   1a0f8:	add	r0, r3, #32
   1a0fc:	vst1.64	{d20-d21}, [r0]
   1a100:	mov	r0, #12
   1a104:	vst1.64	{d16-d17}, [r2], r0
   1a108:	ldr	r0, [r2]
   1a10c:	orr	r0, r0, #67108864	; 0x4000000
   1a110:	str	r0, [r2]
   1a114:	mov	r0, #0
   1a118:	mvn	r2, #0
   1a11c:	bl	19cac <__assert_fail@plt+0x86a4>
   1a120:	mov	sp, fp
   1a124:	pop	{fp, pc}
   1a128:	push	{fp, lr}
   1a12c:	mov	fp, sp
   1a130:	sub	sp, sp, #48	; 0x30
   1a134:	mov	ip, r1
   1a138:	mov	r1, r0
   1a13c:	movw	r0, #8848	; 0x2290
   1a140:	mov	r3, #32
   1a144:	movt	r0, #3
   1a148:	add	r2, r0, #16
   1a14c:	vld1.64	{d16-d17}, [r0], r3
   1a150:	mov	r3, sp
   1a154:	vld1.64	{d18-d19}, [r2]
   1a158:	add	r2, r3, #16
   1a15c:	vld1.64	{d20-d21}, [r0]
   1a160:	add	r0, r3, #32
   1a164:	vst1.64	{d18-d19}, [r2]
   1a168:	mov	r2, r3
   1a16c:	vst1.64	{d20-d21}, [r0]
   1a170:	mov	r0, #12
   1a174:	vst1.64	{d16-d17}, [r2], r0
   1a178:	ldr	r0, [r2]
   1a17c:	orr	r0, r0, #67108864	; 0x4000000
   1a180:	str	r0, [r2]
   1a184:	mov	r0, #0
   1a188:	mov	r2, ip
   1a18c:	bl	19cac <__assert_fail@plt+0x86a4>
   1a190:	mov	sp, fp
   1a194:	pop	{fp, pc}
   1a198:	push	{r4, sl, fp, lr}
   1a19c:	add	fp, sp, #8
   1a1a0:	sub	sp, sp, #96	; 0x60
   1a1a4:	mov	ip, r2
   1a1a8:	mov	r2, sp
   1a1ac:	vmov.i32	q8, #0	; 0x00000000
   1a1b0:	mov	r4, #28
   1a1b4:	cmp	r1, #10
   1a1b8:	mov	r3, r2
   1a1bc:	add	lr, r2, #16
   1a1c0:	vst1.64	{d16-d17}, [r3], r4
   1a1c4:	vst1.64	{d16-d17}, [lr]
   1a1c8:	vst1.32	{d16-d17}, [r3]
   1a1cc:	beq	1a21c <__assert_fail@plt+0x8c14>
   1a1d0:	vld1.64	{d16-d17}, [r2], r4
   1a1d4:	vld1.64	{d18-d19}, [lr]
   1a1d8:	add	r3, sp, #48	; 0x30
   1a1dc:	add	r4, r3, #4
   1a1e0:	vld1.32	{d20-d21}, [r2]
   1a1e4:	add	r2, r3, #20
   1a1e8:	vst1.32	{d16-d17}, [r4]
   1a1ec:	vst1.32	{d18-d19}, [r2]
   1a1f0:	add	r2, r3, #32
   1a1f4:	vst1.32	{d20-d21}, [r2]
   1a1f8:	str	r1, [sp, #48]	; 0x30
   1a1fc:	mvn	r2, #0
   1a200:	ldr	r1, [sp, #60]	; 0x3c
   1a204:	orr	r1, r1, #67108864	; 0x4000000
   1a208:	str	r1, [sp, #60]	; 0x3c
   1a20c:	mov	r1, ip
   1a210:	bl	19cac <__assert_fail@plt+0x86a4>
   1a214:	sub	sp, fp, #8
   1a218:	pop	{r4, sl, fp, pc}
   1a21c:	bl	115f0 <abort@plt>
   1a220:	push	{r4, r5, fp, lr}
   1a224:	add	fp, sp, #8
   1a228:	sub	sp, sp, #48	; 0x30
   1a22c:	mov	ip, r3
   1a230:	movw	r3, #8848	; 0x2290
   1a234:	mov	lr, #32
   1a238:	cmp	r1, #0
   1a23c:	mov	r5, sp
   1a240:	movt	r3, #3
   1a244:	cmpne	r2, #0
   1a248:	add	r4, r3, #16
   1a24c:	vld1.64	{d16-d17}, [r3], lr
   1a250:	vld1.64	{d18-d19}, [r4]
   1a254:	add	r4, r5, #16
   1a258:	vld1.64	{d20-d21}, [r3]
   1a25c:	vst1.64	{d16-d17}, [r5], lr
   1a260:	mov	r3, #10
   1a264:	vst1.64	{d18-d19}, [r4]
   1a268:	vst1.64	{d20-d21}, [r5]
   1a26c:	str	r3, [sp]
   1a270:	bne	1a278 <__assert_fail@plt+0x8c70>
   1a274:	bl	115f0 <abort@plt>
   1a278:	str	r2, [sp, #44]	; 0x2c
   1a27c:	str	r1, [sp, #40]	; 0x28
   1a280:	mov	r3, sp
   1a284:	mov	r1, ip
   1a288:	mvn	r2, #0
   1a28c:	bl	19cac <__assert_fail@plt+0x86a4>
   1a290:	sub	sp, fp, #8
   1a294:	pop	{r4, r5, fp, pc}
   1a298:	push	{r4, r5, fp, lr}
   1a29c:	add	fp, sp, #8
   1a2a0:	sub	sp, sp, #48	; 0x30
   1a2a4:	mov	lr, r3
   1a2a8:	movw	r3, #8848	; 0x2290
   1a2ac:	mov	ip, #32
   1a2b0:	cmp	r1, #0
   1a2b4:	mov	r5, sp
   1a2b8:	movt	r3, #3
   1a2bc:	cmpne	r2, #0
   1a2c0:	add	r4, r3, #16
   1a2c4:	vld1.64	{d16-d17}, [r3], ip
   1a2c8:	vld1.64	{d18-d19}, [r4]
   1a2cc:	add	r4, r5, #16
   1a2d0:	vld1.64	{d20-d21}, [r3]
   1a2d4:	vst1.64	{d16-d17}, [r5], ip
   1a2d8:	mov	r3, #10
   1a2dc:	vst1.64	{d18-d19}, [r4]
   1a2e0:	vst1.64	{d20-d21}, [r5]
   1a2e4:	str	r3, [sp]
   1a2e8:	bne	1a2f0 <__assert_fail@plt+0x8ce8>
   1a2ec:	bl	115f0 <abort@plt>
   1a2f0:	ldr	ip, [fp, #8]
   1a2f4:	str	r2, [sp, #44]	; 0x2c
   1a2f8:	str	r1, [sp, #40]	; 0x28
   1a2fc:	mov	r3, sp
   1a300:	mov	r1, lr
   1a304:	mov	r2, ip
   1a308:	bl	19cac <__assert_fail@plt+0x86a4>
   1a30c:	sub	sp, fp, #8
   1a310:	pop	{r4, r5, fp, pc}
   1a314:	push	{r4, sl, fp, lr}
   1a318:	add	fp, sp, #8
   1a31c:	sub	sp, sp, #48	; 0x30
   1a320:	mov	ip, r2
   1a324:	movw	r2, #8848	; 0x2290
   1a328:	mov	lr, #32
   1a32c:	cmp	r0, #0
   1a330:	mov	r4, sp
   1a334:	movt	r2, #3
   1a338:	cmpne	r1, #0
   1a33c:	add	r3, r2, #16
   1a340:	vld1.64	{d16-d17}, [r2], lr
   1a344:	vld1.64	{d18-d19}, [r3]
   1a348:	add	r3, r4, #16
   1a34c:	vld1.64	{d20-d21}, [r2]
   1a350:	vst1.64	{d16-d17}, [r4], lr
   1a354:	mov	r2, #10
   1a358:	vst1.64	{d18-d19}, [r3]
   1a35c:	vst1.64	{d20-d21}, [r4]
   1a360:	str	r2, [sp]
   1a364:	bne	1a36c <__assert_fail@plt+0x8d64>
   1a368:	bl	115f0 <abort@plt>
   1a36c:	str	r1, [sp, #44]	; 0x2c
   1a370:	str	r0, [sp, #40]	; 0x28
   1a374:	mov	r3, sp
   1a378:	mov	r0, #0
   1a37c:	mov	r1, ip
   1a380:	mvn	r2, #0
   1a384:	bl	19cac <__assert_fail@plt+0x86a4>
   1a388:	sub	sp, fp, #8
   1a38c:	pop	{r4, sl, fp, pc}
   1a390:	push	{r4, r5, fp, lr}
   1a394:	add	fp, sp, #8
   1a398:	sub	sp, sp, #48	; 0x30
   1a39c:	mov	lr, r2
   1a3a0:	movw	r2, #8848	; 0x2290
   1a3a4:	mov	ip, r3
   1a3a8:	mov	r3, #32
   1a3ac:	cmp	r0, #0
   1a3b0:	mov	r5, sp
   1a3b4:	movt	r2, #3
   1a3b8:	cmpne	r1, #0
   1a3bc:	add	r4, r2, #16
   1a3c0:	vld1.64	{d16-d17}, [r2], r3
   1a3c4:	vld1.64	{d18-d19}, [r4]
   1a3c8:	add	r4, r5, #16
   1a3cc:	vld1.64	{d20-d21}, [r2]
   1a3d0:	vst1.64	{d16-d17}, [r5], r3
   1a3d4:	mov	r2, #10
   1a3d8:	vst1.64	{d18-d19}, [r4]
   1a3dc:	vst1.64	{d20-d21}, [r5]
   1a3e0:	str	r2, [sp]
   1a3e4:	bne	1a3ec <__assert_fail@plt+0x8de4>
   1a3e8:	bl	115f0 <abort@plt>
   1a3ec:	str	r1, [sp, #44]	; 0x2c
   1a3f0:	str	r0, [sp, #40]	; 0x28
   1a3f4:	mov	r3, sp
   1a3f8:	mov	r0, #0
   1a3fc:	mov	r1, lr
   1a400:	mov	r2, ip
   1a404:	bl	19cac <__assert_fail@plt+0x86a4>
   1a408:	sub	sp, fp, #8
   1a40c:	pop	{r4, r5, fp, pc}
   1a410:	movw	r3, #8560	; 0x2170
   1a414:	movt	r3, #3
   1a418:	b	19cac <__assert_fail@plt+0x86a4>
   1a41c:	movw	r3, #8560	; 0x2170
   1a420:	mov	r2, r1
   1a424:	mov	r1, r0
   1a428:	mov	r0, #0
   1a42c:	movt	r3, #3
   1a430:	b	19cac <__assert_fail@plt+0x86a4>
   1a434:	movw	r3, #8560	; 0x2170
   1a438:	mvn	r2, #0
   1a43c:	movt	r3, #3
   1a440:	b	19cac <__assert_fail@plt+0x86a4>
   1a444:	movw	r3, #8560	; 0x2170
   1a448:	mov	r1, r0
   1a44c:	mov	r0, #0
   1a450:	mvn	r2, #0
   1a454:	movt	r3, #3
   1a458:	b	19cac <__assert_fail@plt+0x86a4>
   1a45c:	push	{r4, r5, r6, r7, fp, lr}
   1a460:	add	fp, sp, #16
   1a464:	mov	r4, r1
   1a468:	mov	r1, #0
   1a46c:	mov	r6, r2
   1a470:	bl	11578 <setlocale@plt>
   1a474:	cmp	r0, #0
   1a478:	beq	1a4a8 <__assert_fail@plt+0x8ea0>
   1a47c:	mov	r7, r0
   1a480:	bl	114b8 <strlen@plt>
   1a484:	cmp	r0, r6
   1a488:	bcs	1a4c8 <__assert_fail@plt+0x8ec0>
   1a48c:	add	r2, r0, #1
   1a490:	mov	r0, r4
   1a494:	mov	r1, r7
   1a498:	bl	1135c <memcpy@plt>
   1a49c:	mov	r5, #0
   1a4a0:	mov	r0, r5
   1a4a4:	pop	{r4, r5, r6, r7, fp, pc}
   1a4a8:	cmp	r6, #0
   1a4ac:	mov	r5, #22
   1a4b0:	movne	r0, #0
   1a4b4:	strbne	r0, [r4]
   1a4b8:	movne	r0, r5
   1a4bc:	popne	{r4, r5, r6, r7, fp, pc}
   1a4c0:	mov	r0, r5
   1a4c4:	pop	{r4, r5, r6, r7, fp, pc}
   1a4c8:	mov	r5, #34	; 0x22
   1a4cc:	cmp	r6, #0
   1a4d0:	beq	1a4f0 <__assert_fail@plt+0x8ee8>
   1a4d4:	sub	r6, r6, #1
   1a4d8:	mov	r0, r4
   1a4dc:	mov	r1, r7
   1a4e0:	mov	r2, r6
   1a4e4:	bl	1135c <memcpy@plt>
   1a4e8:	mov	r0, #0
   1a4ec:	strb	r0, [r4, r6]
   1a4f0:	mov	r0, r5
   1a4f4:	pop	{r4, r5, r6, r7, fp, pc}
   1a4f8:	mov	r1, #0
   1a4fc:	b	11578 <setlocale@plt>
   1a500:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a504:	add	fp, sp, #24
   1a508:	mov	r4, r0
   1a50c:	cmp	r0, #0
   1a510:	beq	1a544 <__assert_fail@plt+0x8f3c>
   1a514:	mov	r0, r4
   1a518:	bl	114b8 <strlen@plt>
   1a51c:	add	r5, r0, #1
   1a520:	cmp	r5, #58	; 0x3a
   1a524:	bls	1a548 <__assert_fail@plt+0x8f40>
   1a528:	add	r0, r0, #10
   1a52c:	bic	r0, r0, #3
   1a530:	bl	1ee5c <__assert_fail@plt+0xd854>
   1a534:	mov	r6, r0
   1a538:	cmp	r0, #0
   1a53c:	bne	1a55c <__assert_fail@plt+0x8f54>
   1a540:	b	1a594 <__assert_fail@plt+0x8f8c>
   1a544:	mov	r5, #0
   1a548:	mov	r0, #64	; 0x40
   1a54c:	bl	1ee5c <__assert_fail@plt+0xd854>
   1a550:	mov	r6, r0
   1a554:	cmp	r0, #0
   1a558:	beq	1a594 <__assert_fail@plt+0x8f8c>
   1a55c:	cmp	r4, #0
   1a560:	mov	r0, r4
   1a564:	mov	r8, #0
   1a568:	mov	r7, r6
   1a56c:	movwne	r0, #1
   1a570:	str	r8, [r6]
   1a574:	strb	r0, [r6, #4]
   1a578:	strb	r8, [r7, #5]!
   1a57c:	beq	1a594 <__assert_fail@plt+0x8f8c>
   1a580:	mov	r0, r7
   1a584:	mov	r1, r4
   1a588:	mov	r2, r5
   1a58c:	bl	1135c <memcpy@plt>
   1a590:	strb	r8, [r7, r5]
   1a594:	mov	r0, r6
   1a598:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a59c:	push	{r4, sl, fp, lr}
   1a5a0:	add	fp, sp, #8
   1a5a4:	cmp	r0, #2
   1a5a8:	popcc	{r4, sl, fp, pc}
   1a5ac:	ldr	r4, [r0]
   1a5b0:	bl	16170 <__assert_fail@plt+0x4b68>
   1a5b4:	cmp	r4, #0
   1a5b8:	mov	r0, r4
   1a5bc:	bne	1a5ac <__assert_fail@plt+0x8fa4>
   1a5c0:	pop	{r4, sl, fp, pc}
   1a5c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5c8:	add	fp, sp, #28
   1a5cc:	sub	sp, sp, #4
   1a5d0:	mov	r9, r2
   1a5d4:	mov	r7, r1
   1a5d8:	cmp	r0, #0
   1a5dc:	beq	1a654 <__assert_fail@plt+0x904c>
   1a5e0:	mov	r6, r0
   1a5e4:	movw	r0, #63091	; 0xf673
   1a5e8:	movt	r0, #1
   1a5ec:	bl	11434 <getenv@plt>
   1a5f0:	mov	r4, r0
   1a5f4:	ldrb	r0, [r6, #4]
   1a5f8:	cmp	r4, #0
   1a5fc:	beq	1a668 <__assert_fail@plt+0x9060>
   1a600:	cmp	r0, #0
   1a604:	beq	1a61c <__assert_fail@plt+0x9014>
   1a608:	add	r0, r6, #5
   1a60c:	mov	r1, r4
   1a610:	bl	112f0 <strcmp@plt>
   1a614:	cmp	r0, #0
   1a618:	beq	1a72c <__assert_fail@plt+0x9124>
   1a61c:	mov	r0, r4
   1a620:	bl	114b8 <strlen@plt>
   1a624:	add	sl, r0, #1
   1a628:	mov	r8, #1
   1a62c:	cmp	sl, #58	; 0x3a
   1a630:	bls	1a678 <__assert_fail@plt+0x9070>
   1a634:	add	r0, r0, #10
   1a638:	bic	r0, r0, #3
   1a63c:	bl	1ee5c <__assert_fail@plt+0xd854>
   1a640:	cmp	r0, #0
   1a644:	bne	1a688 <__assert_fail@plt+0x9080>
   1a648:	mov	r0, #0
   1a64c:	sub	sp, fp, #28
   1a650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a654:	mov	r0, r7
   1a658:	mov	r1, r9
   1a65c:	sub	sp, fp, #28
   1a660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a664:	b	112e4 <gmtime_r@plt>
   1a668:	mov	r8, #0
   1a66c:	cmp	r0, #0
   1a670:	mov	sl, #0
   1a674:	beq	1a72c <__assert_fail@plt+0x9124>
   1a678:	mov	r0, #64	; 0x40
   1a67c:	bl	1ee5c <__assert_fail@plt+0xd854>
   1a680:	cmp	r0, #0
   1a684:	beq	1a648 <__assert_fail@plt+0x9040>
   1a688:	mov	r5, r0
   1a68c:	str	r7, [sp]
   1a690:	strb	r8, [r0, #4]
   1a694:	mov	r0, #0
   1a698:	cmp	r8, #0
   1a69c:	mov	r7, r5
   1a6a0:	str	r0, [r5]
   1a6a4:	strb	r0, [r7, #5]!
   1a6a8:	beq	1a6c4 <__assert_fail@plt+0x90bc>
   1a6ac:	mov	r0, r7
   1a6b0:	mov	r1, r4
   1a6b4:	mov	r2, sl
   1a6b8:	mov	r8, #0
   1a6bc:	bl	1135c <memcpy@plt>
   1a6c0:	strb	r8, [r7, sl]
   1a6c4:	ldrb	r0, [r6, #4]
   1a6c8:	cmp	r0, #0
   1a6cc:	beq	1a734 <__assert_fail@plt+0x912c>
   1a6d0:	movw	r0, #63091	; 0xf673
   1a6d4:	add	r1, r6, #5
   1a6d8:	mov	r2, #1
   1a6dc:	movt	r0, #1
   1a6e0:	bl	114d0 <setenv@plt>
   1a6e4:	ldr	r7, [sp]
   1a6e8:	cmp	r0, #0
   1a6ec:	beq	1a74c <__assert_fail@plt+0x9144>
   1a6f0:	bl	114e8 <__errno_location@plt>
   1a6f4:	ldr	r6, [r0]
   1a6f8:	mov	r4, r0
   1a6fc:	cmp	r5, #2
   1a700:	bcc	1a71c <__assert_fail@plt+0x9114>
   1a704:	ldr	r7, [r5]
   1a708:	mov	r0, r5
   1a70c:	bl	16170 <__assert_fail@plt+0x4b68>
   1a710:	cmp	r7, #0
   1a714:	mov	r5, r7
   1a718:	bne	1a704 <__assert_fail@plt+0x90fc>
   1a71c:	str	r6, [r4]
   1a720:	mov	r0, #0
   1a724:	sub	sp, fp, #28
   1a728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a72c:	mov	r5, #1
   1a730:	b	1a750 <__assert_fail@plt+0x9148>
   1a734:	movw	r0, #63091	; 0xf673
   1a738:	movt	r0, #1
   1a73c:	bl	115d8 <unsetenv@plt>
   1a740:	ldr	r7, [sp]
   1a744:	cmp	r0, #0
   1a748:	bne	1a6f0 <__assert_fail@plt+0x90e8>
   1a74c:	bl	113d4 <tzset@plt>
   1a750:	mov	r0, r7
   1a754:	mov	r1, r9
   1a758:	bl	113a4 <localtime_r@plt>
   1a75c:	cmp	r0, #0
   1a760:	beq	1a7dc <__assert_fail@plt+0x91d4>
   1a764:	mov	r0, r6
   1a768:	mov	r1, r9
   1a76c:	bl	1a8ec <__assert_fail@plt+0x92e4>
   1a770:	mov	r6, r0
   1a774:	cmp	r5, #1
   1a778:	beq	1a848 <__assert_fail@plt+0x9240>
   1a77c:	bl	114e8 <__errno_location@plt>
   1a780:	mov	r8, r0
   1a784:	ldr	sl, [r0]
   1a788:	ldrb	r0, [r5, #4]
   1a78c:	cmp	r0, #0
   1a790:	beq	1a850 <__assert_fail@plt+0x9248>
   1a794:	movw	r0, #63091	; 0xf673
   1a798:	add	r1, r5, #5
   1a79c:	mov	r2, #1
   1a7a0:	movt	r0, #1
   1a7a4:	bl	114d0 <setenv@plt>
   1a7a8:	cmp	r0, #0
   1a7ac:	beq	1a864 <__assert_fail@plt+0x925c>
   1a7b0:	ldr	sl, [r8]
   1a7b4:	mov	r4, #0
   1a7b8:	cmp	r5, #2
   1a7bc:	bcc	1a8cc <__assert_fail@plt+0x92c4>
   1a7c0:	ldr	r7, [r5]
   1a7c4:	mov	r0, r5
   1a7c8:	bl	16170 <__assert_fail@plt+0x4b68>
   1a7cc:	cmp	r7, #0
   1a7d0:	mov	r5, r7
   1a7d4:	bne	1a7c0 <__assert_fail@plt+0x91b8>
   1a7d8:	b	1a8cc <__assert_fail@plt+0x92c4>
   1a7dc:	mov	r6, #0
   1a7e0:	cmp	r5, #1
   1a7e4:	beq	1a848 <__assert_fail@plt+0x9240>
   1a7e8:	bl	114e8 <__errno_location@plt>
   1a7ec:	mov	r8, r0
   1a7f0:	ldr	sl, [r0]
   1a7f4:	ldrb	r0, [r5, #4]
   1a7f8:	cmp	r0, #0
   1a7fc:	beq	1a890 <__assert_fail@plt+0x9288>
   1a800:	movw	r0, #63091	; 0xf673
   1a804:	add	r1, r5, #5
   1a808:	mov	r2, #1
   1a80c:	movt	r0, #1
   1a810:	bl	114d0 <setenv@plt>
   1a814:	cmp	r0, #0
   1a818:	beq	1a8a4 <__assert_fail@plt+0x929c>
   1a81c:	ldr	sl, [r8]
   1a820:	mov	r4, #0
   1a824:	cmp	r5, #2
   1a828:	bcc	1a8cc <__assert_fail@plt+0x92c4>
   1a82c:	ldr	r7, [r5]
   1a830:	mov	r0, r5
   1a834:	bl	16170 <__assert_fail@plt+0x4b68>
   1a838:	cmp	r7, #0
   1a83c:	mov	r5, r7
   1a840:	bne	1a82c <__assert_fail@plt+0x9224>
   1a844:	b	1a8cc <__assert_fail@plt+0x92c4>
   1a848:	mov	r4, #1
   1a84c:	b	1a8d0 <__assert_fail@plt+0x92c8>
   1a850:	movw	r0, #63091	; 0xf673
   1a854:	movt	r0, #1
   1a858:	bl	115d8 <unsetenv@plt>
   1a85c:	cmp	r0, #0
   1a860:	bne	1a7b0 <__assert_fail@plt+0x91a8>
   1a864:	bl	113d4 <tzset@plt>
   1a868:	mov	r4, #1
   1a86c:	cmp	r5, #2
   1a870:	bcc	1a8cc <__assert_fail@plt+0x92c4>
   1a874:	ldr	r7, [r5]
   1a878:	mov	r0, r5
   1a87c:	bl	16170 <__assert_fail@plt+0x4b68>
   1a880:	cmp	r7, #0
   1a884:	mov	r5, r7
   1a888:	bne	1a874 <__assert_fail@plt+0x926c>
   1a88c:	b	1a8cc <__assert_fail@plt+0x92c4>
   1a890:	movw	r0, #63091	; 0xf673
   1a894:	movt	r0, #1
   1a898:	bl	115d8 <unsetenv@plt>
   1a89c:	cmp	r0, #0
   1a8a0:	bne	1a81c <__assert_fail@plt+0x9214>
   1a8a4:	bl	113d4 <tzset@plt>
   1a8a8:	mov	r4, #1
   1a8ac:	cmp	r5, #2
   1a8b0:	bcc	1a8cc <__assert_fail@plt+0x92c4>
   1a8b4:	ldr	r7, [r5]
   1a8b8:	mov	r0, r5
   1a8bc:	bl	16170 <__assert_fail@plt+0x4b68>
   1a8c0:	cmp	r7, #0
   1a8c4:	mov	r5, r7
   1a8c8:	bne	1a8b4 <__assert_fail@plt+0x92ac>
   1a8cc:	str	sl, [r8]
   1a8d0:	cmp	r6, #0
   1a8d4:	moveq	r9, r6
   1a8d8:	cmp	r4, #0
   1a8dc:	moveq	r9, r4
   1a8e0:	mov	r0, r9
   1a8e4:	sub	sp, fp, #28
   1a8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8f0:	add	fp, sp, #28
   1a8f4:	sub	sp, sp, #4
   1a8f8:	ldr	r7, [r1, #40]	; 0x28
   1a8fc:	mov	r8, #1
   1a900:	cmp	r7, #0
   1a904:	beq	1a9a8 <__assert_fail@plt+0x93a0>
   1a908:	mov	r5, r1
   1a90c:	mov	r6, r0
   1a910:	cmp	r7, r1
   1a914:	bcc	1a924 <__assert_fail@plt+0x931c>
   1a918:	add	r0, r5, #44	; 0x2c
   1a91c:	cmp	r7, r0
   1a920:	bcc	1a9a8 <__assert_fail@plt+0x93a0>
   1a924:	ldrb	r0, [r7]
   1a928:	cmp	r0, #0
   1a92c:	beq	1a99c <__assert_fail@plt+0x9394>
   1a930:	add	r4, r6, #5
   1a934:	b	1a948 <__assert_fail@plt+0x9340>
   1a938:	ldr	r0, [r6]
   1a93c:	cmp	r0, #0
   1a940:	addne	r4, r0, #5
   1a944:	movne	r6, r0
   1a948:	mov	r0, r4
   1a94c:	mov	r1, r7
   1a950:	bl	112f0 <strcmp@plt>
   1a954:	cmp	r0, #0
   1a958:	beq	1aa4c <__assert_fail@plt+0x9444>
   1a95c:	ldrb	r0, [r4]
   1a960:	cmp	r0, #0
   1a964:	bne	1a980 <__assert_fail@plt+0x9378>
   1a968:	add	r0, r6, #5
   1a96c:	cmp	r4, r0
   1a970:	bne	1a9b4 <__assert_fail@plt+0x93ac>
   1a974:	ldrb	r0, [r6, #4]
   1a978:	cmp	r0, #0
   1a97c:	beq	1a9b4 <__assert_fail@plt+0x93ac>
   1a980:	mov	r0, r4
   1a984:	bl	114b8 <strlen@plt>
   1a988:	add	r4, r4, r0
   1a98c:	ldrb	r0, [r4, #1]!
   1a990:	cmp	r0, #0
   1a994:	bne	1a948 <__assert_fail@plt+0x9340>
   1a998:	b	1a938 <__assert_fail@plt+0x9330>
   1a99c:	movw	r4, #1972	; 0x7b4
   1a9a0:	movt	r4, #2
   1a9a4:	str	r4, [r5, #40]	; 0x28
   1a9a8:	mov	r0, r8
   1a9ac:	sub	sp, fp, #28
   1a9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9b4:	add	r0, r6, #64	; 0x40
   1a9b8:	sub	sl, r0, r4
   1a9bc:	mov	r0, r7
   1a9c0:	bl	114b8 <strlen@plt>
   1a9c4:	add	r9, r0, #1
   1a9c8:	cmp	r9, sl
   1a9cc:	bge	1a9f8 <__assert_fail@plt+0x93f0>
   1a9d0:	mov	r0, r4
   1a9d4:	mov	r1, r7
   1a9d8:	mov	r2, r9
   1a9dc:	bl	1135c <memcpy@plt>
   1a9e0:	mov	r0, #0
   1a9e4:	strb	r0, [r4, r9]
   1a9e8:	str	r4, [r5, #40]	; 0x28
   1a9ec:	mov	r0, r8
   1a9f0:	sub	sp, fp, #28
   1a9f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9f8:	add	r0, r0, #10
   1a9fc:	cmp	r9, #59	; 0x3b
   1aa00:	bic	r0, r0, #3
   1aa04:	movwcc	r0, #64	; 0x40
   1aa08:	bl	1ee5c <__assert_fail@plt+0xd854>
   1aa0c:	cmp	r0, #0
   1aa10:	beq	1aa5c <__assert_fail@plt+0x9454>
   1aa14:	mov	sl, r0
   1aa18:	mov	r0, #0
   1aa1c:	mov	r1, r7
   1aa20:	mov	r2, r9
   1aa24:	str	r0, [sl]
   1aa28:	mov	r0, #1
   1aa2c:	add	r4, sl, #5
   1aa30:	strh	r0, [sl, #4]
   1aa34:	mov	r0, r4
   1aa38:	bl	1135c <memcpy@plt>
   1aa3c:	mov	r0, #0
   1aa40:	strb	r0, [r4, r9]
   1aa44:	str	sl, [r6]
   1aa48:	strb	r0, [sl, #4]
   1aa4c:	str	r4, [r5, #40]	; 0x28
   1aa50:	mov	r0, r8
   1aa54:	sub	sp, fp, #28
   1aa58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa5c:	mov	r8, #0
   1aa60:	str	r8, [r6]
   1aa64:	mov	r0, r8
   1aa68:	sub	sp, fp, #28
   1aa6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa74:	add	fp, sp, #28
   1aa78:	sub	sp, sp, #52	; 0x34
   1aa7c:	mov	r9, r1
   1aa80:	cmp	r0, #0
   1aa84:	beq	1ab00 <__assert_fail@plt+0x94f8>
   1aa88:	mov	r7, r0
   1aa8c:	movw	r0, #63091	; 0xf673
   1aa90:	movt	r0, #1
   1aa94:	bl	11434 <getenv@plt>
   1aa98:	mov	r6, r0
   1aa9c:	ldrb	r0, [r7, #4]
   1aaa0:	cmp	r6, #0
   1aaa4:	beq	1ab10 <__assert_fail@plt+0x9508>
   1aaa8:	cmp	r0, #0
   1aaac:	beq	1aac4 <__assert_fail@plt+0x94bc>
   1aab0:	add	r0, r7, #5
   1aab4:	mov	r1, r6
   1aab8:	bl	112f0 <strcmp@plt>
   1aabc:	cmp	r0, #0
   1aac0:	beq	1abd4 <__assert_fail@plt+0x95cc>
   1aac4:	mov	r0, r6
   1aac8:	bl	114b8 <strlen@plt>
   1aacc:	add	r8, r0, #1
   1aad0:	mov	sl, #1
   1aad4:	cmp	r8, #58	; 0x3a
   1aad8:	bls	1ab20 <__assert_fail@plt+0x9518>
   1aadc:	add	r0, r0, #10
   1aae0:	bic	r0, r0, #3
   1aae4:	bl	1ee5c <__assert_fail@plt+0xd854>
   1aae8:	mvn	r4, #0
   1aaec:	cmp	r0, #0
   1aaf0:	bne	1ab34 <__assert_fail@plt+0x952c>
   1aaf4:	mov	r0, r4
   1aaf8:	sub	sp, fp, #28
   1aafc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab00:	mov	r0, r9
   1ab04:	sub	sp, fp, #28
   1ab08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab0c:	b	1159c <timegm@plt>
   1ab10:	mov	sl, #0
   1ab14:	cmp	r0, #0
   1ab18:	mov	r8, #0
   1ab1c:	beq	1abd4 <__assert_fail@plt+0x95cc>
   1ab20:	mov	r0, #64	; 0x40
   1ab24:	bl	1ee5c <__assert_fail@plt+0xd854>
   1ab28:	mvn	r4, #0
   1ab2c:	cmp	r0, #0
   1ab30:	beq	1aaf4 <__assert_fail@plt+0x94ec>
   1ab34:	mov	r5, r0
   1ab38:	strb	sl, [r0, #4]
   1ab3c:	mov	r0, #0
   1ab40:	cmp	sl, #0
   1ab44:	mov	r4, r5
   1ab48:	str	r0, [r5]
   1ab4c:	strb	r0, [r4, #5]!
   1ab50:	beq	1ab6c <__assert_fail@plt+0x9564>
   1ab54:	mov	r0, r4
   1ab58:	mov	r1, r6
   1ab5c:	mov	r2, r8
   1ab60:	mov	sl, #0
   1ab64:	bl	1135c <memcpy@plt>
   1ab68:	strb	sl, [r4, r8]
   1ab6c:	ldrb	r0, [r7, #4]
   1ab70:	cmp	r0, #0
   1ab74:	beq	1abdc <__assert_fail@plt+0x95d4>
   1ab78:	movw	r0, #63091	; 0xf673
   1ab7c:	add	r1, r7, #5
   1ab80:	mov	r2, #1
   1ab84:	movt	r0, #1
   1ab88:	bl	114d0 <setenv@plt>
   1ab8c:	mvn	r4, #0
   1ab90:	cmp	r0, #0
   1ab94:	beq	1abf4 <__assert_fail@plt+0x95ec>
   1ab98:	bl	114e8 <__errno_location@plt>
   1ab9c:	ldr	r8, [r0]
   1aba0:	mov	r6, r0
   1aba4:	cmp	r5, #2
   1aba8:	bcc	1abc4 <__assert_fail@plt+0x95bc>
   1abac:	ldr	r7, [r5]
   1abb0:	mov	r0, r5
   1abb4:	bl	16170 <__assert_fail@plt+0x4b68>
   1abb8:	cmp	r7, #0
   1abbc:	mov	r5, r7
   1abc0:	bne	1abac <__assert_fail@plt+0x95a4>
   1abc4:	str	r8, [r6]
   1abc8:	mov	r0, r4
   1abcc:	sub	sp, fp, #28
   1abd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abd4:	mov	r5, #1
   1abd8:	b	1abf8 <__assert_fail@plt+0x95f0>
   1abdc:	movw	r0, #63091	; 0xf673
   1abe0:	movt	r0, #1
   1abe4:	bl	115d8 <unsetenv@plt>
   1abe8:	mvn	r4, #0
   1abec:	cmp	r0, #0
   1abf0:	bne	1ab98 <__assert_fail@plt+0x9590>
   1abf4:	bl	113d4 <tzset@plt>
   1abf8:	mov	r1, #32
   1abfc:	mov	r2, r9
   1ac00:	add	r0, sp, #8
   1ac04:	vld1.32	{d16-d17}, [r2], r1
   1ac08:	mov	r3, r0
   1ac0c:	vst1.32	{d16-d17}, [r3], r1
   1ac10:	ldr	r1, [r9, #16]
   1ac14:	ldr	r6, [r9, #20]
   1ac18:	str	r1, [sp, #24]
   1ac1c:	mvn	r1, #0
   1ac20:	str	r1, [sp, #36]	; 0x24
   1ac24:	str	r6, [sp, #28]
   1ac28:	ldr	r1, [r2]
   1ac2c:	str	r1, [r3]
   1ac30:	bl	11314 <mktime@plt>
   1ac34:	ldr	r1, [sp, #36]	; 0x24
   1ac38:	cmn	r1, #1
   1ac3c:	ble	1acc4 <__assert_fail@plt+0x96bc>
   1ac40:	add	r8, sp, #8
   1ac44:	str	r0, [sp, #4]
   1ac48:	mov	r0, r7
   1ac4c:	mov	r1, r8
   1ac50:	bl	1a8ec <__assert_fail@plt+0x92e4>
   1ac54:	mov	sl, r0
   1ac58:	cmp	r5, #1
   1ac5c:	beq	1ad28 <__assert_fail@plt+0x9720>
   1ac60:	bl	114e8 <__errno_location@plt>
   1ac64:	mov	r7, r0
   1ac68:	ldr	r4, [r0]
   1ac6c:	ldrb	r0, [r5, #4]
   1ac70:	cmp	r0, #0
   1ac74:	beq	1ad48 <__assert_fail@plt+0x9740>
   1ac78:	movw	r0, #63091	; 0xf673
   1ac7c:	add	r1, r5, #5
   1ac80:	mov	r2, #1
   1ac84:	movt	r0, #1
   1ac88:	bl	114d0 <setenv@plt>
   1ac8c:	cmp	r0, #0
   1ac90:	beq	1ad5c <__assert_fail@plt+0x9754>
   1ac94:	ldr	r4, [r7]
   1ac98:	mov	r6, #0
   1ac9c:	cmp	r5, #2
   1aca0:	bcc	1ad8c <__assert_fail@plt+0x9784>
   1aca4:	str	r4, [sp]
   1aca8:	ldr	r4, [r5]
   1acac:	mov	r0, r5
   1acb0:	bl	16170 <__assert_fail@plt+0x4b68>
   1acb4:	cmp	r4, #0
   1acb8:	mov	r5, r4
   1acbc:	bne	1aca8 <__assert_fail@plt+0x96a0>
   1acc0:	b	1ad88 <__assert_fail@plt+0x9780>
   1acc4:	cmp	r5, #1
   1acc8:	beq	1ad38 <__assert_fail@plt+0x9730>
   1accc:	bl	114e8 <__errno_location@plt>
   1acd0:	mov	r4, r0
   1acd4:	ldr	r6, [r0]
   1acd8:	ldrb	r0, [r5, #4]
   1acdc:	cmp	r0, #0
   1ace0:	beq	1add0 <__assert_fail@plt+0x97c8>
   1ace4:	movw	r0, #63091	; 0xf673
   1ace8:	add	r1, r5, #5
   1acec:	mov	r2, #1
   1acf0:	movt	r0, #1
   1acf4:	bl	114d0 <setenv@plt>
   1acf8:	cmp	r0, #0
   1acfc:	beq	1ade4 <__assert_fail@plt+0x97dc>
   1ad00:	ldr	r6, [r4]
   1ad04:	cmp	r5, #2
   1ad08:	bcc	1ae08 <__assert_fail@plt+0x9800>
   1ad0c:	ldr	r7, [r5]
   1ad10:	mov	r0, r5
   1ad14:	bl	16170 <__assert_fail@plt+0x4b68>
   1ad18:	cmp	r7, #0
   1ad1c:	mov	r5, r7
   1ad20:	bne	1ad0c <__assert_fail@plt+0x9704>
   1ad24:	b	1ae08 <__assert_fail@plt+0x9800>
   1ad28:	mov	r6, #1
   1ad2c:	and	r0, sl, r6
   1ad30:	cmp	r0, #1
   1ad34:	beq	1ad9c <__assert_fail@plt+0x9794>
   1ad38:	mvn	r4, #0
   1ad3c:	mov	r0, r4
   1ad40:	sub	sp, fp, #28
   1ad44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad48:	movw	r0, #63091	; 0xf673
   1ad4c:	movt	r0, #1
   1ad50:	bl	115d8 <unsetenv@plt>
   1ad54:	cmp	r0, #0
   1ad58:	bne	1ac94 <__assert_fail@plt+0x968c>
   1ad5c:	bl	113d4 <tzset@plt>
   1ad60:	mov	r6, #1
   1ad64:	cmp	r5, #2
   1ad68:	bcc	1ad8c <__assert_fail@plt+0x9784>
   1ad6c:	str	r4, [sp]
   1ad70:	ldr	r4, [r5]
   1ad74:	mov	r0, r5
   1ad78:	bl	16170 <__assert_fail@plt+0x4b68>
   1ad7c:	cmp	r4, #0
   1ad80:	mov	r5, r4
   1ad84:	bne	1ad70 <__assert_fail@plt+0x9768>
   1ad88:	ldr	r4, [sp]
   1ad8c:	str	r4, [r7]
   1ad90:	and	r0, sl, r6
   1ad94:	cmp	r0, #1
   1ad98:	bne	1ad38 <__assert_fail@plt+0x9730>
   1ad9c:	mov	r0, #28
   1ada0:	add	r1, r8, #16
   1ada4:	ldr	r4, [sp, #4]
   1ada8:	vld1.32	{d16-d17}, [r8], r0
   1adac:	vld1.64	{d18-d19}, [r1]
   1adb0:	add	r1, r9, #16
   1adb4:	vld1.32	{d20-d21}, [r8]
   1adb8:	vst1.32	{d16-d17}, [r9], r0
   1adbc:	vst1.32	{d18-d19}, [r1]
   1adc0:	vst1.32	{d20-d21}, [r9]
   1adc4:	mov	r0, r4
   1adc8:	sub	sp, fp, #28
   1adcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1add0:	movw	r0, #63091	; 0xf673
   1add4:	movt	r0, #1
   1add8:	bl	115d8 <unsetenv@plt>
   1addc:	cmp	r0, #0
   1ade0:	bne	1ad00 <__assert_fail@plt+0x96f8>
   1ade4:	bl	113d4 <tzset@plt>
   1ade8:	cmp	r5, #2
   1adec:	bcc	1ae08 <__assert_fail@plt+0x9800>
   1adf0:	ldr	r7, [r5]
   1adf4:	mov	r0, r5
   1adf8:	bl	16170 <__assert_fail@plt+0x4b68>
   1adfc:	cmp	r7, #0
   1ae00:	mov	r5, r7
   1ae04:	bne	1adf0 <__assert_fail@plt+0x97e8>
   1ae08:	str	r6, [r4]
   1ae0c:	mvn	r4, #0
   1ae10:	mov	r0, r4
   1ae14:	sub	sp, fp, #28
   1ae18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae1c:	mov	r1, #0
   1ae20:	mov	r2, #3
   1ae24:	b	1ef64 <__assert_fail@plt+0xd95c>
   1ae28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ae2c:	add	fp, sp, #24
   1ae30:	sub	sp, sp, #32
   1ae34:	ldr	r6, [fp, #12]
   1ae38:	ldr	r7, [fp, #8]
   1ae3c:	mov	r4, r2
   1ae40:	mov	r8, r0
   1ae44:	cmp	r1, #0
   1ae48:	beq	1ae70 <__assert_fail@plt+0x9868>
   1ae4c:	movw	r2, #3396	; 0xd44
   1ae50:	mov	r5, r1
   1ae54:	str	r3, [sp, #4]
   1ae58:	str	r4, [sp]
   1ae5c:	mov	r0, r8
   1ae60:	mov	r1, #1
   1ae64:	movt	r2, #2
   1ae68:	mov	r3, r5
   1ae6c:	b	1ae88 <__assert_fail@plt+0x9880>
   1ae70:	movw	r2, #3408	; 0xd50
   1ae74:	str	r3, [sp]
   1ae78:	mov	r0, r8
   1ae7c:	mov	r1, #1
   1ae80:	mov	r3, r4
   1ae84:	movt	r2, #2
   1ae88:	bl	11530 <__fprintf_chk@plt>
   1ae8c:	movw	r1, #3415	; 0xd57
   1ae90:	mov	r0, #0
   1ae94:	mov	r2, #5
   1ae98:	movt	r1, #2
   1ae9c:	bl	1138c <dcgettext@plt>
   1aea0:	movw	r2, #4133	; 0x1025
   1aea4:	mov	r3, r0
   1aea8:	movw	r0, #2022	; 0x7e6
   1aeac:	mov	r1, #1
   1aeb0:	str	r0, [sp]
   1aeb4:	movt	r2, #2
   1aeb8:	mov	r0, r8
   1aebc:	bl	11530 <__fprintf_chk@plt>
   1aec0:	movw	r4, #2083	; 0x823
   1aec4:	mov	r1, r8
   1aec8:	movt	r4, #2
   1aecc:	mov	r0, r4
   1aed0:	bl	112cc <fputs_unlocked@plt>
   1aed4:	movw	r1, #3419	; 0xd5b
   1aed8:	mov	r0, #0
   1aedc:	mov	r2, #5
   1aee0:	movt	r1, #2
   1aee4:	bl	1138c <dcgettext@plt>
   1aee8:	movw	r3, #3590	; 0xe06
   1aeec:	mov	r2, r0
   1aef0:	mov	r0, r8
   1aef4:	mov	r1, #1
   1aef8:	movt	r3, #2
   1aefc:	bl	11530 <__fprintf_chk@plt>
   1af00:	mov	r0, r4
   1af04:	mov	r1, r8
   1af08:	bl	112cc <fputs_unlocked@plt>
   1af0c:	cmp	r6, #9
   1af10:	bhi	1af4c <__assert_fail@plt+0x9944>
   1af14:	add	r0, pc, #0
   1af18:	ldr	pc, [r0, r6, lsl #2]
   1af1c:	andeq	sl, r1, r4, asr #30
   1af20:	andeq	sl, r1, r8, asr pc
   1af24:	andeq	sl, r1, r8, lsl #31
   1af28:			; <UNDEFINED> instruction: 0x0001afb0
   1af2c:	ldrdeq	sl, [r1], -r8
   1af30:	andeq	fp, r1, r0
   1af34:	andeq	fp, r1, r8, lsr #32
   1af38:	andeq	fp, r1, r0, rrx
   1af3c:	andeq	fp, r1, r8, lsl #2
   1af40:	strheq	fp, [r1], -r0
   1af44:	sub	sp, fp, #24
   1af48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1af4c:	movw	r1, #3943	; 0xf67
   1af50:	movt	r1, #2
   1af54:	b	1b0b8 <__assert_fail@plt+0x9ab0>
   1af58:	movw	r1, #3624	; 0xe28
   1af5c:	mov	r0, #0
   1af60:	mov	r2, #5
   1af64:	movt	r1, #2
   1af68:	bl	1138c <dcgettext@plt>
   1af6c:	ldr	r3, [r7]
   1af70:	mov	r2, r0
   1af74:	mov	r0, r8
   1af78:	mov	r1, #1
   1af7c:	sub	sp, fp, #24
   1af80:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1af84:	b	11530 <__fprintf_chk@plt>
   1af88:	movw	r1, #3640	; 0xe38
   1af8c:	mov	r0, #0
   1af90:	mov	r2, #5
   1af94:	movt	r1, #2
   1af98:	bl	1138c <dcgettext@plt>
   1af9c:	mov	r2, r0
   1afa0:	ldr	r3, [r7]
   1afa4:	ldr	r0, [r7, #4]
   1afa8:	str	r0, [sp]
   1afac:	b	1b09c <__assert_fail@plt+0x9a94>
   1afb0:	movw	r1, #3663	; 0xe4f
   1afb4:	mov	r0, #0
   1afb8:	mov	r2, #5
   1afbc:	movt	r1, #2
   1afc0:	bl	1138c <dcgettext@plt>
   1afc4:	ldr	r3, [r7]
   1afc8:	mov	r2, r0
   1afcc:	ldmib	r7, {r0, r1}
   1afd0:	stm	sp, {r0, r1}
   1afd4:	b	1b09c <__assert_fail@plt+0x9a94>
   1afd8:	movw	r1, #3691	; 0xe6b
   1afdc:	mov	r0, #0
   1afe0:	mov	r2, #5
   1afe4:	movt	r1, #2
   1afe8:	bl	1138c <dcgettext@plt>
   1afec:	ldr	r3, [r7]
   1aff0:	mov	r2, r0
   1aff4:	ldmib	r7, {r0, r1, r7}
   1aff8:	stm	sp, {r0, r1, r7}
   1affc:	b	1b09c <__assert_fail@plt+0x9a94>
   1b000:	movw	r1, #3723	; 0xe8b
   1b004:	mov	r0, #0
   1b008:	mov	r2, #5
   1b00c:	movt	r1, #2
   1b010:	bl	1138c <dcgettext@plt>
   1b014:	ldr	r3, [r7]
   1b018:	mov	r2, r0
   1b01c:	ldmib	r7, {r0, r1, r6, r7}
   1b020:	stm	sp, {r0, r1, r6, r7}
   1b024:	b	1b09c <__assert_fail@plt+0x9a94>
   1b028:	movw	r1, #3759	; 0xeaf
   1b02c:	mov	r0, #0
   1b030:	mov	r2, #5
   1b034:	movt	r1, #2
   1b038:	bl	1138c <dcgettext@plt>
   1b03c:	ldr	r3, [r7]
   1b040:	mov	r2, r0
   1b044:	ldmib	r7, {r0, r1, r6}
   1b048:	ldr	r5, [r7, #16]
   1b04c:	ldr	r7, [r7, #20]
   1b050:	stm	sp, {r0, r1, r6}
   1b054:	str	r5, [sp, #12]
   1b058:	str	r7, [sp, #16]
   1b05c:	b	1b09c <__assert_fail@plt+0x9a94>
   1b060:	movw	r1, #3799	; 0xed7
   1b064:	mov	r0, #0
   1b068:	mov	r2, #5
   1b06c:	movt	r1, #2
   1b070:	bl	1138c <dcgettext@plt>
   1b074:	ldr	r3, [r7]
   1b078:	mov	r2, r0
   1b07c:	ldmib	r7, {r0, r1, r6}
   1b080:	ldr	r5, [r7, #16]
   1b084:	ldr	r4, [r7, #20]
   1b088:	ldr	r7, [r7, #24]
   1b08c:	stm	sp, {r0, r1, r6}
   1b090:	str	r5, [sp, #12]
   1b094:	str	r4, [sp, #16]
   1b098:	str	r7, [sp, #20]
   1b09c:	mov	r0, r8
   1b0a0:	mov	r1, #1
   1b0a4:	bl	11530 <__fprintf_chk@plt>
   1b0a8:	sub	sp, fp, #24
   1b0ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b0b0:	movw	r1, #3891	; 0xf33
   1b0b4:	movt	r1, #2
   1b0b8:	mov	r0, #0
   1b0bc:	mov	r2, #5
   1b0c0:	bl	1138c <dcgettext@plt>
   1b0c4:	mov	ip, r0
   1b0c8:	ldr	r3, [r7]
   1b0cc:	ldr	r0, [r7, #4]
   1b0d0:	ldr	r1, [r7, #8]
   1b0d4:	ldr	r6, [r7, #12]
   1b0d8:	ldr	r5, [r7, #16]
   1b0dc:	ldr	r4, [r7, #20]
   1b0e0:	ldr	r2, [r7, #24]
   1b0e4:	ldr	lr, [r7, #28]
   1b0e8:	ldr	r7, [r7, #32]
   1b0ec:	stm	sp, {r0, r1, r6}
   1b0f0:	str	r5, [sp, #12]
   1b0f4:	str	r4, [sp, #16]
   1b0f8:	str	r2, [sp, #20]
   1b0fc:	str	lr, [sp, #24]
   1b100:	str	r7, [sp, #28]
   1b104:	b	1b14c <__assert_fail@plt+0x9b44>
   1b108:	movw	r1, #3843	; 0xf03
   1b10c:	mov	r0, #0
   1b110:	mov	r2, #5
   1b114:	movt	r1, #2
   1b118:	bl	1138c <dcgettext@plt>
   1b11c:	mov	ip, r0
   1b120:	ldr	r3, [r7]
   1b124:	ldmib	r7, {r0, r1, r6}
   1b128:	ldr	r5, [r7, #16]
   1b12c:	ldr	r4, [r7, #20]
   1b130:	ldr	r2, [r7, #24]
   1b134:	ldr	r7, [r7, #28]
   1b138:	stm	sp, {r0, r1, r6}
   1b13c:	str	r5, [sp, #12]
   1b140:	str	r4, [sp, #16]
   1b144:	str	r2, [sp, #20]
   1b148:	str	r7, [sp, #24]
   1b14c:	mov	r0, r8
   1b150:	mov	r1, #1
   1b154:	mov	r2, ip
   1b158:	bl	11530 <__fprintf_chk@plt>
   1b15c:	sub	sp, fp, #24
   1b160:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b164:	push	{r4, sl, fp, lr}
   1b168:	add	fp, sp, #8
   1b16c:	sub	sp, sp, #8
   1b170:	ldr	ip, [fp, #8]
   1b174:	mov	lr, #0
   1b178:	ldr	r4, [ip, lr, lsl #2]
   1b17c:	add	lr, lr, #1
   1b180:	cmp	r4, #0
   1b184:	bne	1b178 <__assert_fail@plt+0x9b70>
   1b188:	sub	r4, lr, #1
   1b18c:	str	ip, [sp]
   1b190:	str	r4, [sp, #4]
   1b194:	bl	1ae28 <__assert_fail@plt+0x9820>
   1b198:	sub	sp, fp, #8
   1b19c:	pop	{r4, sl, fp, pc}
   1b1a0:	push	{fp, lr}
   1b1a4:	mov	fp, sp
   1b1a8:	sub	sp, sp, #48	; 0x30
   1b1ac:	ldr	ip, [fp, #8]
   1b1b0:	ldr	lr, [ip]
   1b1b4:	cmp	lr, #0
   1b1b8:	str	lr, [sp, #8]
   1b1bc:	beq	1b258 <__assert_fail@plt+0x9c50>
   1b1c0:	ldr	lr, [ip, #4]
   1b1c4:	cmp	lr, #0
   1b1c8:	str	lr, [sp, #12]
   1b1cc:	beq	1b260 <__assert_fail@plt+0x9c58>
   1b1d0:	ldr	lr, [ip, #8]
   1b1d4:	cmp	lr, #0
   1b1d8:	str	lr, [sp, #16]
   1b1dc:	beq	1b268 <__assert_fail@plt+0x9c60>
   1b1e0:	ldr	lr, [ip, #12]
   1b1e4:	cmp	lr, #0
   1b1e8:	str	lr, [sp, #20]
   1b1ec:	beq	1b270 <__assert_fail@plt+0x9c68>
   1b1f0:	ldr	lr, [ip, #16]
   1b1f4:	cmp	lr, #0
   1b1f8:	str	lr, [sp, #24]
   1b1fc:	beq	1b278 <__assert_fail@plt+0x9c70>
   1b200:	ldr	lr, [ip, #20]
   1b204:	cmp	lr, #0
   1b208:	str	lr, [sp, #28]
   1b20c:	beq	1b280 <__assert_fail@plt+0x9c78>
   1b210:	ldr	lr, [ip, #24]
   1b214:	cmp	lr, #0
   1b218:	str	lr, [sp, #32]
   1b21c:	beq	1b288 <__assert_fail@plt+0x9c80>
   1b220:	ldr	lr, [ip, #28]
   1b224:	cmp	lr, #0
   1b228:	str	lr, [sp, #36]	; 0x24
   1b22c:	beq	1b290 <__assert_fail@plt+0x9c88>
   1b230:	ldr	lr, [ip, #32]
   1b234:	cmp	lr, #0
   1b238:	str	lr, [sp, #40]	; 0x28
   1b23c:	beq	1b298 <__assert_fail@plt+0x9c90>
   1b240:	ldr	lr, [ip, #36]	; 0x24
   1b244:	mov	ip, #10
   1b248:	cmp	lr, #0
   1b24c:	str	lr, [sp, #44]	; 0x2c
   1b250:	movweq	ip, #9
   1b254:	b	1b29c <__assert_fail@plt+0x9c94>
   1b258:	mov	ip, #0
   1b25c:	b	1b29c <__assert_fail@plt+0x9c94>
   1b260:	mov	ip, #1
   1b264:	b	1b29c <__assert_fail@plt+0x9c94>
   1b268:	mov	ip, #2
   1b26c:	b	1b29c <__assert_fail@plt+0x9c94>
   1b270:	mov	ip, #3
   1b274:	b	1b29c <__assert_fail@plt+0x9c94>
   1b278:	mov	ip, #4
   1b27c:	b	1b29c <__assert_fail@plt+0x9c94>
   1b280:	mov	ip, #5
   1b284:	b	1b29c <__assert_fail@plt+0x9c94>
   1b288:	mov	ip, #6
   1b28c:	b	1b29c <__assert_fail@plt+0x9c94>
   1b290:	mov	ip, #7
   1b294:	b	1b29c <__assert_fail@plt+0x9c94>
   1b298:	mov	ip, #8
   1b29c:	add	lr, sp, #8
   1b2a0:	str	ip, [sp, #4]
   1b2a4:	str	lr, [sp]
   1b2a8:	bl	1ae28 <__assert_fail@plt+0x9820>
   1b2ac:	mov	sp, fp
   1b2b0:	pop	{fp, pc}
   1b2b4:	push	{fp, lr}
   1b2b8:	mov	fp, sp
   1b2bc:	sub	sp, sp, #56	; 0x38
   1b2c0:	add	ip, fp, #8
   1b2c4:	str	ip, [sp, #12]
   1b2c8:	ldr	lr, [fp, #8]
   1b2cc:	cmp	lr, #0
   1b2d0:	str	lr, [sp, #16]
   1b2d4:	beq	1b370 <__assert_fail@plt+0x9d68>
   1b2d8:	ldr	lr, [ip, #4]
   1b2dc:	cmp	lr, #0
   1b2e0:	str	lr, [sp, #20]
   1b2e4:	beq	1b378 <__assert_fail@plt+0x9d70>
   1b2e8:	ldr	lr, [ip, #8]
   1b2ec:	cmp	lr, #0
   1b2f0:	str	lr, [sp, #24]
   1b2f4:	beq	1b380 <__assert_fail@plt+0x9d78>
   1b2f8:	ldr	lr, [ip, #12]
   1b2fc:	cmp	lr, #0
   1b300:	str	lr, [sp, #28]
   1b304:	beq	1b388 <__assert_fail@plt+0x9d80>
   1b308:	ldr	lr, [ip, #16]
   1b30c:	cmp	lr, #0
   1b310:	str	lr, [sp, #32]
   1b314:	beq	1b390 <__assert_fail@plt+0x9d88>
   1b318:	ldr	lr, [ip, #20]
   1b31c:	cmp	lr, #0
   1b320:	str	lr, [sp, #36]	; 0x24
   1b324:	beq	1b398 <__assert_fail@plt+0x9d90>
   1b328:	ldr	lr, [ip, #24]
   1b32c:	cmp	lr, #0
   1b330:	str	lr, [sp, #40]	; 0x28
   1b334:	beq	1b3a0 <__assert_fail@plt+0x9d98>
   1b338:	ldr	lr, [ip, #28]
   1b33c:	cmp	lr, #0
   1b340:	str	lr, [sp, #44]	; 0x2c
   1b344:	beq	1b3a8 <__assert_fail@plt+0x9da0>
   1b348:	ldr	lr, [ip, #32]
   1b34c:	cmp	lr, #0
   1b350:	str	lr, [sp, #48]	; 0x30
   1b354:	beq	1b3b0 <__assert_fail@plt+0x9da8>
   1b358:	ldr	lr, [ip, #36]	; 0x24
   1b35c:	mov	ip, #10
   1b360:	cmp	lr, #0
   1b364:	str	lr, [sp, #52]	; 0x34
   1b368:	movweq	ip, #9
   1b36c:	b	1b3b4 <__assert_fail@plt+0x9dac>
   1b370:	mov	ip, #0
   1b374:	b	1b3b4 <__assert_fail@plt+0x9dac>
   1b378:	mov	ip, #1
   1b37c:	b	1b3b4 <__assert_fail@plt+0x9dac>
   1b380:	mov	ip, #2
   1b384:	b	1b3b4 <__assert_fail@plt+0x9dac>
   1b388:	mov	ip, #3
   1b38c:	b	1b3b4 <__assert_fail@plt+0x9dac>
   1b390:	mov	ip, #4
   1b394:	b	1b3b4 <__assert_fail@plt+0x9dac>
   1b398:	mov	ip, #5
   1b39c:	b	1b3b4 <__assert_fail@plt+0x9dac>
   1b3a0:	mov	ip, #6
   1b3a4:	b	1b3b4 <__assert_fail@plt+0x9dac>
   1b3a8:	mov	ip, #7
   1b3ac:	b	1b3b4 <__assert_fail@plt+0x9dac>
   1b3b0:	mov	ip, #8
   1b3b4:	add	lr, sp, #16
   1b3b8:	str	ip, [sp, #4]
   1b3bc:	str	lr, [sp]
   1b3c0:	bl	1ae28 <__assert_fail@plt+0x9820>
   1b3c4:	mov	sp, fp
   1b3c8:	pop	{fp, pc}
   1b3cc:	push	{fp, lr}
   1b3d0:	mov	fp, sp
   1b3d4:	movw	r0, #8652	; 0x21cc
   1b3d8:	movt	r0, #3
   1b3dc:	ldr	r1, [r0]
   1b3e0:	movw	r0, #2083	; 0x823
   1b3e4:	movt	r0, #2
   1b3e8:	bl	112cc <fputs_unlocked@plt>
   1b3ec:	movw	r1, #4003	; 0xfa3
   1b3f0:	mov	r0, #0
   1b3f4:	mov	r2, #5
   1b3f8:	movt	r1, #2
   1b3fc:	bl	1138c <dcgettext@plt>
   1b400:	movw	r2, #4023	; 0xfb7
   1b404:	mov	r1, r0
   1b408:	mov	r0, #1
   1b40c:	movt	r2, #2
   1b410:	bl	11518 <__printf_chk@plt>
   1b414:	movw	r1, #4045	; 0xfcd
   1b418:	mov	r0, #0
   1b41c:	mov	r2, #5
   1b420:	movt	r1, #2
   1b424:	bl	1138c <dcgettext@plt>
   1b428:	movw	r2, #63003	; 0xf61b
   1b42c:	movw	r3, #2343	; 0x927
   1b430:	mov	r1, r0
   1b434:	mov	r0, #1
   1b438:	movt	r2, #1
   1b43c:	movt	r3, #2
   1b440:	bl	11518 <__printf_chk@plt>
   1b444:	movw	r1, #4065	; 0xfe1
   1b448:	mov	r0, #0
   1b44c:	mov	r2, #5
   1b450:	movt	r1, #2
   1b454:	bl	1138c <dcgettext@plt>
   1b458:	movw	r2, #4104	; 0x1008
   1b45c:	mov	r1, r0
   1b460:	mov	r0, #1
   1b464:	movt	r2, #2
   1b468:	pop	{fp, lr}
   1b46c:	b	11518 <__printf_chk@plt>
   1b470:	push	{r4, r5, r6, sl, fp, lr}
   1b474:	add	fp, sp, #16
   1b478:	mov	r4, r2
   1b47c:	mov	r5, r1
   1b480:	mov	r6, r0
   1b484:	bl	1f1dc <__assert_fail@plt+0xdbd4>
   1b488:	cmp	r0, #0
   1b48c:	popne	{r4, r5, r6, sl, fp, pc}
   1b490:	cmp	r6, #0
   1b494:	beq	1b4a8 <__assert_fail@plt+0x9ea0>
   1b498:	cmp	r5, #0
   1b49c:	cmpne	r4, #0
   1b4a0:	bne	1b4a8 <__assert_fail@plt+0x9ea0>
   1b4a4:	pop	{r4, r5, r6, sl, fp, pc}
   1b4a8:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b4ac:	push	{r4, r5, r6, sl, fp, lr}
   1b4b0:	add	fp, sp, #16
   1b4b4:	mov	r4, r2
   1b4b8:	mov	r5, r1
   1b4bc:	mov	r6, r0
   1b4c0:	bl	1f1dc <__assert_fail@plt+0xdbd4>
   1b4c4:	cmp	r0, #0
   1b4c8:	popne	{r4, r5, r6, sl, fp, pc}
   1b4cc:	cmp	r6, #0
   1b4d0:	beq	1b4e4 <__assert_fail@plt+0x9edc>
   1b4d4:	cmp	r5, #0
   1b4d8:	cmpne	r4, #0
   1b4dc:	bne	1b4e4 <__assert_fail@plt+0x9edc>
   1b4e0:	pop	{r4, r5, r6, sl, fp, pc}
   1b4e4:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b4e8:	push	{fp, lr}
   1b4ec:	mov	fp, sp
   1b4f0:	bl	1ee5c <__assert_fail@plt+0xd854>
   1b4f4:	cmp	r0, #0
   1b4f8:	popne	{fp, pc}
   1b4fc:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b500:	push	{fp, lr}
   1b504:	mov	fp, sp
   1b508:	bl	1ee5c <__assert_fail@plt+0xd854>
   1b50c:	cmp	r0, #0
   1b510:	popne	{fp, pc}
   1b514:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b518:	push	{fp, lr}
   1b51c:	mov	fp, sp
   1b520:	bl	1ee5c <__assert_fail@plt+0xd854>
   1b524:	cmp	r0, #0
   1b528:	popne	{fp, pc}
   1b52c:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b530:	push	{r4, r5, fp, lr}
   1b534:	add	fp, sp, #8
   1b538:	mov	r4, r1
   1b53c:	mov	r5, r0
   1b540:	bl	1ee8c <__assert_fail@plt+0xd884>
   1b544:	cmp	r0, #0
   1b548:	popne	{r4, r5, fp, pc}
   1b54c:	cmp	r5, #0
   1b550:	beq	1b560 <__assert_fail@plt+0x9f58>
   1b554:	cmp	r4, #0
   1b558:	bne	1b560 <__assert_fail@plt+0x9f58>
   1b55c:	pop	{r4, r5, fp, pc}
   1b560:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b564:	push	{fp, lr}
   1b568:	mov	fp, sp
   1b56c:	cmp	r1, #0
   1b570:	orreq	r1, r1, #1
   1b574:	bl	1ee8c <__assert_fail@plt+0xd884>
   1b578:	cmp	r0, #0
   1b57c:	popne	{fp, pc}
   1b580:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b584:	push	{fp, lr}
   1b588:	mov	fp, sp
   1b58c:	clz	r3, r2
   1b590:	lsr	ip, r3, #5
   1b594:	clz	r3, r1
   1b598:	lsr	r3, r3, #5
   1b59c:	orrs	r3, r3, ip
   1b5a0:	movwne	r1, #1
   1b5a4:	movwne	r2, #1
   1b5a8:	bl	1f1dc <__assert_fail@plt+0xdbd4>
   1b5ac:	cmp	r0, #0
   1b5b0:	popne	{fp, pc}
   1b5b4:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b5b8:	push	{fp, lr}
   1b5bc:	mov	fp, sp
   1b5c0:	mov	r2, r1
   1b5c4:	mov	r1, r0
   1b5c8:	mov	r0, #0
   1b5cc:	bl	1f1dc <__assert_fail@plt+0xdbd4>
   1b5d0:	cmp	r0, #0
   1b5d4:	popne	{fp, pc}
   1b5d8:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b5dc:	push	{fp, lr}
   1b5e0:	mov	fp, sp
   1b5e4:	mov	r2, r1
   1b5e8:	mov	r1, r0
   1b5ec:	clz	r0, r2
   1b5f0:	clz	r3, r1
   1b5f4:	lsr	r0, r0, #5
   1b5f8:	lsr	r3, r3, #5
   1b5fc:	orrs	r0, r3, r0
   1b600:	movwne	r1, #1
   1b604:	movwne	r2, #1
   1b608:	mov	r0, #0
   1b60c:	bl	1f1dc <__assert_fail@plt+0xdbd4>
   1b610:	cmp	r0, #0
   1b614:	popne	{fp, pc}
   1b618:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b61c:	push	{r4, r5, r6, sl, fp, lr}
   1b620:	add	fp, sp, #16
   1b624:	ldr	r5, [r1]
   1b628:	mov	r4, r1
   1b62c:	mov	r6, r0
   1b630:	cmp	r0, #0
   1b634:	beq	1b64c <__assert_fail@plt+0xa044>
   1b638:	mov	r0, #1
   1b63c:	add	r0, r0, r5, lsr #1
   1b640:	adds	r5, r5, r0
   1b644:	bcc	1b654 <__assert_fail@plt+0xa04c>
   1b648:	b	1b690 <__assert_fail@plt+0xa088>
   1b64c:	cmp	r5, #0
   1b650:	movweq	r5, #64	; 0x40
   1b654:	mov	r0, r6
   1b658:	mov	r1, r5
   1b65c:	mov	r2, #1
   1b660:	bl	1f1dc <__assert_fail@plt+0xdbd4>
   1b664:	cmp	r5, #0
   1b668:	mov	r1, r5
   1b66c:	movwne	r1, #1
   1b670:	cmp	r0, #0
   1b674:	bne	1b688 <__assert_fail@plt+0xa080>
   1b678:	clz	r2, r6
   1b67c:	lsr	r2, r2, #5
   1b680:	orrs	r1, r2, r1
   1b684:	bne	1b690 <__assert_fail@plt+0xa088>
   1b688:	str	r5, [r4]
   1b68c:	pop	{r4, r5, r6, sl, fp, pc}
   1b690:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b694:	push	{r4, r5, r6, r7, fp, lr}
   1b698:	add	fp, sp, #16
   1b69c:	ldr	r5, [r1]
   1b6a0:	mov	r6, r2
   1b6a4:	mov	r4, r1
   1b6a8:	mov	r7, r0
   1b6ac:	cmp	r0, #0
   1b6b0:	beq	1b6c8 <__assert_fail@plt+0xa0c0>
   1b6b4:	mov	r0, #1
   1b6b8:	add	r0, r0, r5, lsr #1
   1b6bc:	adds	r5, r5, r0
   1b6c0:	bcc	1b6e0 <__assert_fail@plt+0xa0d8>
   1b6c4:	b	1b714 <__assert_fail@plt+0xa10c>
   1b6c8:	cmp	r5, #0
   1b6cc:	bne	1b6e0 <__assert_fail@plt+0xa0d8>
   1b6d0:	mov	r0, #64	; 0x40
   1b6d4:	cmp	r6, #64	; 0x40
   1b6d8:	udiv	r5, r0, r6
   1b6dc:	addhi	r5, r5, #1
   1b6e0:	mov	r0, r7
   1b6e4:	mov	r1, r5
   1b6e8:	mov	r2, r6
   1b6ec:	bl	1f1dc <__assert_fail@plt+0xdbd4>
   1b6f0:	cmp	r0, #0
   1b6f4:	bne	1b70c <__assert_fail@plt+0xa104>
   1b6f8:	cmp	r7, #0
   1b6fc:	beq	1b714 <__assert_fail@plt+0xa10c>
   1b700:	cmp	r6, #0
   1b704:	cmpne	r5, #0
   1b708:	bne	1b714 <__assert_fail@plt+0xa10c>
   1b70c:	str	r5, [r4]
   1b710:	pop	{r4, r5, r6, r7, fp, pc}
   1b714:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b718:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b71c:	add	fp, sp, #24
   1b720:	mov	r8, r1
   1b724:	ldr	r1, [r1]
   1b728:	mov	r5, r0
   1b72c:	add	r0, r1, r1, asr #1
   1b730:	cmp	r0, r1
   1b734:	mvnvs	r0, #-2147483648	; 0x80000000
   1b738:	cmp	r0, r3
   1b73c:	mov	r7, r0
   1b740:	movgt	r7, r3
   1b744:	cmn	r3, #1
   1b748:	movle	r7, r0
   1b74c:	ldr	r0, [fp, #8]
   1b750:	cmn	r0, #1
   1b754:	ble	1b77c <__assert_fail@plt+0xa174>
   1b758:	cmp	r0, #0
   1b75c:	beq	1b7d0 <__assert_fail@plt+0xa1c8>
   1b760:	cmn	r7, #1
   1b764:	ble	1b7a4 <__assert_fail@plt+0xa19c>
   1b768:	mvn	r4, #-2147483648	; 0x80000000
   1b76c:	udiv	r6, r4, r0
   1b770:	cmp	r6, r7
   1b774:	bge	1b7d0 <__assert_fail@plt+0xa1c8>
   1b778:	b	1b7e0 <__assert_fail@plt+0xa1d8>
   1b77c:	cmn	r7, #1
   1b780:	ble	1b7c0 <__assert_fail@plt+0xa1b8>
   1b784:	cmn	r0, #1
   1b788:	beq	1b7d0 <__assert_fail@plt+0xa1c8>
   1b78c:	mov	r6, #-2147483648	; 0x80000000
   1b790:	mvn	r4, #-2147483648	; 0x80000000
   1b794:	sdiv	r6, r6, r0
   1b798:	cmp	r6, r7
   1b79c:	bge	1b7d0 <__assert_fail@plt+0xa1c8>
   1b7a0:	b	1b7e0 <__assert_fail@plt+0xa1d8>
   1b7a4:	beq	1b7d0 <__assert_fail@plt+0xa1c8>
   1b7a8:	mov	r6, #-2147483648	; 0x80000000
   1b7ac:	mvn	r4, #-2147483648	; 0x80000000
   1b7b0:	sdiv	r6, r6, r7
   1b7b4:	cmp	r6, r0
   1b7b8:	bge	1b7d0 <__assert_fail@plt+0xa1c8>
   1b7bc:	b	1b7e0 <__assert_fail@plt+0xa1d8>
   1b7c0:	mvn	r4, #-2147483648	; 0x80000000
   1b7c4:	sdiv	r6, r4, r0
   1b7c8:	cmp	r7, r6
   1b7cc:	blt	1b7e0 <__assert_fail@plt+0xa1d8>
   1b7d0:	mul	r6, r7, r0
   1b7d4:	mov	r4, #64	; 0x40
   1b7d8:	cmp	r6, #63	; 0x3f
   1b7dc:	bgt	1b7e8 <__assert_fail@plt+0xa1e0>
   1b7e0:	sdiv	r7, r4, r0
   1b7e4:	mul	r6, r7, r0
   1b7e8:	cmp	r5, #0
   1b7ec:	moveq	r4, #0
   1b7f0:	streq	r4, [r8]
   1b7f4:	sub	r4, r7, r1
   1b7f8:	cmp	r4, r2
   1b7fc:	bge	1b8a8 <__assert_fail@plt+0xa2a0>
   1b800:	add	r7, r1, r2
   1b804:	mov	r6, #0
   1b808:	mov	r2, #0
   1b80c:	cmp	r7, r3
   1b810:	movwgt	r6, #1
   1b814:	cmn	r3, #1
   1b818:	movwgt	r2, #1
   1b81c:	cmp	r7, r1
   1b820:	bvs	1b8dc <__assert_fail@plt+0xa2d4>
   1b824:	ands	r1, r2, r6
   1b828:	bne	1b8dc <__assert_fail@plt+0xa2d4>
   1b82c:	cmn	r0, #1
   1b830:	ble	1b858 <__assert_fail@plt+0xa250>
   1b834:	cmp	r0, #0
   1b838:	beq	1b8a4 <__assert_fail@plt+0xa29c>
   1b83c:	cmn	r7, #1
   1b840:	ble	1b87c <__assert_fail@plt+0xa274>
   1b844:	mvn	r1, #-2147483648	; 0x80000000
   1b848:	udiv	r1, r1, r0
   1b84c:	cmp	r1, r7
   1b850:	bge	1b8a4 <__assert_fail@plt+0xa29c>
   1b854:	b	1b8dc <__assert_fail@plt+0xa2d4>
   1b858:	cmn	r7, #1
   1b85c:	ble	1b894 <__assert_fail@plt+0xa28c>
   1b860:	cmn	r0, #1
   1b864:	beq	1b8a4 <__assert_fail@plt+0xa29c>
   1b868:	mov	r1, #-2147483648	; 0x80000000
   1b86c:	sdiv	r1, r1, r0
   1b870:	cmp	r1, r7
   1b874:	bge	1b8a4 <__assert_fail@plt+0xa29c>
   1b878:	b	1b8dc <__assert_fail@plt+0xa2d4>
   1b87c:	beq	1b8a4 <__assert_fail@plt+0xa29c>
   1b880:	mov	r1, #-2147483648	; 0x80000000
   1b884:	sdiv	r1, r1, r7
   1b888:	cmp	r1, r0
   1b88c:	bge	1b8a4 <__assert_fail@plt+0xa29c>
   1b890:	b	1b8dc <__assert_fail@plt+0xa2d4>
   1b894:	mvn	r1, #-2147483648	; 0x80000000
   1b898:	sdiv	r1, r1, r0
   1b89c:	cmp	r7, r1
   1b8a0:	blt	1b8dc <__assert_fail@plt+0xa2d4>
   1b8a4:	mul	r6, r7, r0
   1b8a8:	mov	r0, r5
   1b8ac:	mov	r1, r6
   1b8b0:	bl	1ee8c <__assert_fail@plt+0xd884>
   1b8b4:	cmp	r6, #0
   1b8b8:	movwne	r6, #1
   1b8bc:	cmp	r0, #0
   1b8c0:	bne	1b8d4 <__assert_fail@plt+0xa2cc>
   1b8c4:	clz	r1, r5
   1b8c8:	lsr	r1, r1, #5
   1b8cc:	orrs	r1, r1, r6
   1b8d0:	bne	1b8dc <__assert_fail@plt+0xa2d4>
   1b8d4:	str	r7, [r8]
   1b8d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b8dc:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b8e0:	push	{fp, lr}
   1b8e4:	mov	fp, sp
   1b8e8:	mov	r1, #1
   1b8ec:	bl	1ee08 <__assert_fail@plt+0xd800>
   1b8f0:	cmp	r0, #0
   1b8f4:	popne	{fp, pc}
   1b8f8:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b8fc:	push	{fp, lr}
   1b900:	mov	fp, sp
   1b904:	bl	1ee08 <__assert_fail@plt+0xd800>
   1b908:	cmp	r0, #0
   1b90c:	popne	{fp, pc}
   1b910:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b914:	push	{fp, lr}
   1b918:	mov	fp, sp
   1b91c:	mov	r1, #1
   1b920:	bl	1ee08 <__assert_fail@plt+0xd800>
   1b924:	cmp	r0, #0
   1b928:	popne	{fp, pc}
   1b92c:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b930:	push	{fp, lr}
   1b934:	mov	fp, sp
   1b938:	bl	1ee08 <__assert_fail@plt+0xd800>
   1b93c:	cmp	r0, #0
   1b940:	popne	{fp, pc}
   1b944:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b948:	push	{r4, r5, r6, sl, fp, lr}
   1b94c:	add	fp, sp, #16
   1b950:	mov	r5, r0
   1b954:	mov	r0, r1
   1b958:	mov	r4, r1
   1b95c:	bl	1ee5c <__assert_fail@plt+0xd854>
   1b960:	cmp	r0, #0
   1b964:	beq	1b980 <__assert_fail@plt+0xa378>
   1b968:	mov	r1, r5
   1b96c:	mov	r2, r4
   1b970:	mov	r6, r0
   1b974:	bl	1135c <memcpy@plt>
   1b978:	mov	r0, r6
   1b97c:	pop	{r4, r5, r6, sl, fp, pc}
   1b980:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b984:	push	{r4, r5, r6, sl, fp, lr}
   1b988:	add	fp, sp, #16
   1b98c:	mov	r5, r0
   1b990:	mov	r0, r1
   1b994:	mov	r4, r1
   1b998:	bl	1ee5c <__assert_fail@plt+0xd854>
   1b99c:	cmp	r0, #0
   1b9a0:	beq	1b9bc <__assert_fail@plt+0xa3b4>
   1b9a4:	mov	r1, r5
   1b9a8:	mov	r2, r4
   1b9ac:	mov	r6, r0
   1b9b0:	bl	1135c <memcpy@plt>
   1b9b4:	mov	r0, r6
   1b9b8:	pop	{r4, r5, r6, sl, fp, pc}
   1b9bc:	bl	1ba48 <__assert_fail@plt+0xa440>
   1b9c0:	push	{r4, r5, r6, sl, fp, lr}
   1b9c4:	add	fp, sp, #16
   1b9c8:	mov	r5, r0
   1b9cc:	add	r0, r1, #1
   1b9d0:	mov	r4, r1
   1b9d4:	bl	1ee5c <__assert_fail@plt+0xd854>
   1b9d8:	cmp	r0, #0
   1b9dc:	beq	1ba04 <__assert_fail@plt+0xa3fc>
   1b9e0:	mov	r6, r0
   1b9e4:	mov	r0, #0
   1b9e8:	mov	r1, r5
   1b9ec:	mov	r2, r4
   1b9f0:	strb	r0, [r6, r4]
   1b9f4:	mov	r0, r6
   1b9f8:	bl	1135c <memcpy@plt>
   1b9fc:	mov	r0, r6
   1ba00:	pop	{r4, r5, r6, sl, fp, pc}
   1ba04:	bl	1ba48 <__assert_fail@plt+0xa440>
   1ba08:	push	{r4, r5, r6, sl, fp, lr}
   1ba0c:	add	fp, sp, #16
   1ba10:	mov	r4, r0
   1ba14:	bl	114b8 <strlen@plt>
   1ba18:	add	r5, r0, #1
   1ba1c:	mov	r0, r5
   1ba20:	bl	1ee5c <__assert_fail@plt+0xd854>
   1ba24:	cmp	r0, #0
   1ba28:	beq	1ba44 <__assert_fail@plt+0xa43c>
   1ba2c:	mov	r1, r4
   1ba30:	mov	r2, r5
   1ba34:	mov	r6, r0
   1ba38:	bl	1135c <memcpy@plt>
   1ba3c:	mov	r0, r6
   1ba40:	pop	{r4, r5, r6, sl, fp, pc}
   1ba44:	bl	1ba48 <__assert_fail@plt+0xa440>
   1ba48:	push	{fp, lr}
   1ba4c:	mov	fp, sp
   1ba50:	movw	r0, #8556	; 0x216c
   1ba54:	movw	r1, #4180	; 0x1054
   1ba58:	mov	r2, #5
   1ba5c:	movt	r0, #3
   1ba60:	movt	r1, #2
   1ba64:	ldr	r4, [r0]
   1ba68:	mov	r0, #0
   1ba6c:	bl	1138c <dcgettext@plt>
   1ba70:	movw	r2, #3111	; 0xc27
   1ba74:	mov	r3, r0
   1ba78:	mov	r0, r4
   1ba7c:	mov	r1, #0
   1ba80:	movt	r2, #2
   1ba84:	bl	11428 <error@plt>
   1ba88:	bl	115f0 <abort@plt>
   1ba8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ba90:	add	fp, sp, #24
   1ba94:	sub	sp, sp, #16
   1ba98:	mov	r8, r0
   1ba9c:	ldr	r0, [fp, #16]
   1baa0:	mov	r7, r3
   1baa4:	mov	r4, r2
   1baa8:	mov	r2, r1
   1baac:	add	r3, sp, #8
   1bab0:	mov	r1, #0
   1bab4:	str	r0, [sp]
   1bab8:	mov	r0, r8
   1babc:	bl	1bb9c <__assert_fail@plt+0xa594>
   1bac0:	cmp	r0, #0
   1bac4:	bne	1bb70 <__assert_fail@plt+0xa568>
   1bac8:	ldr	r6, [sp, #8]
   1bacc:	ldr	r5, [sp, #12]
   1bad0:	subs	r0, r6, r4
   1bad4:	sbcs	r0, r5, r7
   1bad8:	blt	1bafc <__assert_fail@plt+0xa4f4>
   1badc:	ldr	r1, [fp, #8]
   1bae0:	ldr	r0, [fp, #12]
   1bae4:	subs	r1, r1, r6
   1bae8:	sbcs	r0, r0, r5
   1baec:	movge	r0, r6
   1baf0:	movge	r1, r5
   1baf4:	subge	sp, fp, #24
   1baf8:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bafc:	subs	r0, r6, #1073741824	; 0x40000000
   1bb00:	sbcs	r0, r5, #0
   1bb04:	blt	1bb14 <__assert_fail@plt+0xa50c>
   1bb08:	bl	114e8 <__errno_location@plt>
   1bb0c:	mov	r1, #75	; 0x4b
   1bb10:	b	1bb30 <__assert_fail@plt+0xa528>
   1bb14:	bl	114e8 <__errno_location@plt>
   1bb18:	mvn	r2, #1073741824	; 0x40000000
   1bb1c:	mvn	r1, #0
   1bb20:	subs	r2, r2, r6
   1bb24:	sbcs	r1, r1, r5
   1bb28:	movlt	r1, #34	; 0x22
   1bb2c:	movge	r1, #75	; 0x4b
   1bb30:	str	r1, [r0]
   1bb34:	ldr	r6, [r0]
   1bb38:	ldr	r4, [fp, #24]
   1bb3c:	ldr	r5, [fp, #20]
   1bb40:	mov	r0, r8
   1bb44:	bl	1a444 <__assert_fail@plt+0x8e3c>
   1bb48:	subs	r1, r6, #22
   1bb4c:	movw	r2, #3107	; 0xc23
   1bb50:	str	r0, [sp]
   1bb54:	mov	r3, r5
   1bb58:	movne	r1, r6
   1bb5c:	cmp	r4, #0
   1bb60:	movt	r2, #2
   1bb64:	movweq	r4, #1
   1bb68:	mov	r0, r4
   1bb6c:	bl	11428 <error@plt>
   1bb70:	cmp	r0, #1
   1bb74:	beq	1bb08 <__assert_fail@plt+0xa500>
   1bb78:	cmp	r0, #3
   1bb7c:	bne	1bb8c <__assert_fail@plt+0xa584>
   1bb80:	bl	114e8 <__errno_location@plt>
   1bb84:	mov	r1, #0
   1bb88:	b	1bb30 <__assert_fail@plt+0xa528>
   1bb8c:	bl	114e8 <__errno_location@plt>
   1bb90:	b	1bb34 <__assert_fail@plt+0xa52c>
   1bb94:	mov	r1, #10
   1bb98:	b	1ba8c <__assert_fail@plt+0xa484>
   1bb9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bba0:	add	fp, sp, #28
   1bba4:	sub	sp, sp, #36	; 0x24
   1bba8:	cmp	r2, #37	; 0x25
   1bbac:	bcs	1d4dc <__assert_fail@plt+0xbed4>
   1bbb0:	ldr	r8, [fp, #8]
   1bbb4:	mov	r9, r3
   1bbb8:	mov	r6, r2
   1bbbc:	mov	r7, r1
   1bbc0:	mov	r4, r0
   1bbc4:	bl	114e8 <__errno_location@plt>
   1bbc8:	add	sl, sp, #32
   1bbcc:	cmp	r7, #0
   1bbd0:	mov	r5, r0
   1bbd4:	mov	r0, #0
   1bbd8:	mov	r2, r6
   1bbdc:	mov	r3, #0
   1bbe0:	movne	sl, r7
   1bbe4:	str	r0, [r5]
   1bbe8:	mov	r0, r4
   1bbec:	mov	r1, sl
   1bbf0:	bl	115b4 <__strtoll_internal@plt>
   1bbf4:	mov	r7, r1
   1bbf8:	ldr	r1, [sl]
   1bbfc:	cmp	r1, r4
   1bc00:	beq	1bc3c <__assert_fail@plt+0xa634>
   1bc04:	mov	r6, r0
   1bc08:	ldr	r0, [r5]
   1bc0c:	cmp	r0, #0
   1bc10:	beq	1bdc8 <__assert_fail@plt+0xa7c0>
   1bc14:	mov	r5, #4
   1bc18:	cmp	r0, #34	; 0x22
   1bc1c:	bne	1c020 <__assert_fail@plt+0xaa18>
   1bc20:	mov	r5, #1
   1bc24:	cmp	r8, #0
   1bc28:	beq	1bdd4 <__assert_fail@plt+0xa7cc>
   1bc2c:	ldrb	r4, [r1]
   1bc30:	cmp	r4, #0
   1bc34:	bne	1bc84 <__assert_fail@plt+0xa67c>
   1bc38:	b	1bdd4 <__assert_fail@plt+0xa7cc>
   1bc3c:	mov	r5, #4
   1bc40:	cmp	r8, #0
   1bc44:	beq	1c020 <__assert_fail@plt+0xaa18>
   1bc48:	mov	r6, r1
   1bc4c:	ldrb	r1, [r4]
   1bc50:	cmp	r1, #0
   1bc54:	beq	1c020 <__assert_fail@plt+0xaa18>
   1bc58:	mov	r0, r8
   1bc5c:	bl	114c4 <strchr@plt>
   1bc60:	cmp	r0, #0
   1bc64:	beq	1c020 <__assert_fail@plt+0xaa18>
   1bc68:	mov	r1, r6
   1bc6c:	mov	r5, #0
   1bc70:	mov	r6, #1
   1bc74:	mov	r7, #0
   1bc78:	ldrb	r4, [r1]
   1bc7c:	cmp	r4, #0
   1bc80:	beq	1bdd4 <__assert_fail@plt+0xa7cc>
   1bc84:	str	r1, [sp, #20]
   1bc88:	mov	r0, r8
   1bc8c:	mov	r1, r4
   1bc90:	bl	114c4 <strchr@plt>
   1bc94:	cmp	r0, #0
   1bc98:	beq	1c018 <__assert_fail@plt+0xaa10>
   1bc9c:	sub	r0, r4, #69	; 0x45
   1bca0:	mov	r1, #1
   1bca4:	mov	r3, #0
   1bca8:	mov	r2, #1024	; 0x400
   1bcac:	cmp	r0, #47	; 0x2f
   1bcb0:	str	r1, [sp, #16]
   1bcb4:	bhi	1bdec <__assert_fail@plt+0xa7e4>
   1bcb8:	add	r1, pc, #0
   1bcbc:	ldr	pc, [r1, r0, lsl #2]
   1bcc0:	andeq	fp, r1, r0, lsl #27
   1bcc4:	andeq	fp, r1, ip, ror #27
   1bcc8:	andeq	fp, r1, r0, lsl #27
   1bccc:	andeq	fp, r1, ip, ror #27
   1bcd0:	andeq	fp, r1, ip, ror #27
   1bcd4:	andeq	fp, r1, ip, ror #27
   1bcd8:	andeq	fp, r1, r0, lsl #27
   1bcdc:	andeq	fp, r1, ip, ror #27
   1bce0:	andeq	fp, r1, r0, lsl #27
   1bce4:	andeq	fp, r1, ip, ror #27
   1bce8:	andeq	fp, r1, ip, ror #27
   1bcec:	andeq	fp, r1, r0, lsl #27
   1bcf0:	andeq	fp, r1, ip, ror #27
   1bcf4:	andeq	fp, r1, ip, ror #27
   1bcf8:	andeq	fp, r1, ip, ror #27
   1bcfc:	andeq	fp, r1, r0, lsl #27
   1bd00:	andeq	fp, r1, ip, ror #27
   1bd04:	andeq	fp, r1, ip, ror #27
   1bd08:	andeq	fp, r1, ip, ror #27
   1bd0c:	andeq	fp, r1, ip, ror #27
   1bd10:	andeq	fp, r1, r0, lsl #27
   1bd14:	andeq	fp, r1, r0, lsl #27
   1bd18:	andeq	fp, r1, ip, ror #27
   1bd1c:	andeq	fp, r1, ip, ror #27
   1bd20:	andeq	fp, r1, ip, ror #27
   1bd24:	andeq	fp, r1, ip, ror #27
   1bd28:	andeq	fp, r1, ip, ror #27
   1bd2c:	andeq	fp, r1, ip, ror #27
   1bd30:	andeq	fp, r1, ip, ror #27
   1bd34:	andeq	fp, r1, ip, ror #27
   1bd38:	andeq	fp, r1, ip, ror #27
   1bd3c:	andeq	fp, r1, ip, ror #27
   1bd40:	andeq	fp, r1, ip, ror #27
   1bd44:	andeq	fp, r1, ip, ror #27
   1bd48:	andeq	fp, r1, r0, lsl #27
   1bd4c:	andeq	fp, r1, ip, ror #27
   1bd50:	andeq	fp, r1, ip, ror #27
   1bd54:	andeq	fp, r1, ip, ror #27
   1bd58:	andeq	fp, r1, r0, lsl #27
   1bd5c:	andeq	fp, r1, ip, ror #27
   1bd60:	andeq	fp, r1, r0, lsl #27
   1bd64:	andeq	fp, r1, ip, ror #27
   1bd68:	andeq	fp, r1, ip, ror #27
   1bd6c:	andeq	fp, r1, ip, ror #27
   1bd70:	andeq	fp, r1, ip, ror #27
   1bd74:	andeq	fp, r1, ip, ror #27
   1bd78:	andeq	fp, r1, ip, ror #27
   1bd7c:	andeq	fp, r1, r0, lsl #27
   1bd80:	mov	r0, r8
   1bd84:	mov	r1, #48	; 0x30
   1bd88:	bl	114c4 <strchr@plt>
   1bd8c:	cmp	r0, #0
   1bd90:	beq	1bde4 <__assert_fail@plt+0xa7dc>
   1bd94:	ldr	r1, [sp, #20]
   1bd98:	ldrb	r0, [r1, #1]
   1bd9c:	cmp	r0, #66	; 0x42
   1bda0:	cmpne	r0, #68	; 0x44
   1bda4:	bne	1bf20 <__assert_fail@plt+0xa918>
   1bda8:	mov	r0, #2
   1bdac:	mov	r2, #1000	; 0x3e8
   1bdb0:	mov	r3, #0
   1bdb4:	str	r0, [sp, #16]
   1bdb8:	sub	r0, r4, #66	; 0x42
   1bdbc:	cmp	r0, #53	; 0x35
   1bdc0:	bls	1bdf8 <__assert_fail@plt+0xa7f0>
   1bdc4:	b	1c018 <__assert_fail@plt+0xaa10>
   1bdc8:	mov	r5, r0
   1bdcc:	cmp	r8, #0
   1bdd0:	bne	1bc2c <__assert_fail@plt+0xa624>
   1bdd4:	strd	r6, [r9]
   1bdd8:	mov	r0, r5
   1bddc:	sub	sp, fp, #28
   1bde0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bde4:	mov	r3, #0
   1bde8:	mov	r2, #1024	; 0x400
   1bdec:	sub	r0, r4, #66	; 0x42
   1bdf0:	cmp	r0, #53	; 0x35
   1bdf4:	bhi	1c018 <__assert_fail@plt+0xaa10>
   1bdf8:	add	r1, pc, #8
   1bdfc:	str	r3, [sp, #28]
   1be00:	str	r2, [sp, #24]
   1be04:	ldr	pc, [r1, r0, lsl #2]
   1be08:	andeq	ip, r1, r0, ror r0
   1be0c:	andeq	ip, r1, r8, lsl r0
   1be10:	andeq	ip, r1, r8, lsl r0
   1be14:	andeq	ip, r1, r4, lsl #1
   1be18:	andeq	ip, r1, r8, lsl r0
   1be1c:	andeq	fp, r1, r0, ror #29
   1be20:	andeq	ip, r1, r8, lsl r0
   1be24:	andeq	ip, r1, r8, lsl r0
   1be28:	andeq	ip, r1, r8, lsl r0
   1be2c:	andeq	fp, r1, r4, asr pc
   1be30:	andeq	ip, r1, r8, lsl r0
   1be34:	andeq	fp, r1, r4, lsl #31
   1be38:	andeq	ip, r1, r8, lsl r0
   1be3c:	andeq	ip, r1, r8, lsl r0
   1be40:	andeq	ip, r1, r8, asr #1
   1be44:	andeq	ip, r1, r8, lsl r0
   1be48:	andeq	ip, r1, r8, lsl r0
   1be4c:	andeq	ip, r1, r8, lsl r0
   1be50:	andeq	fp, r1, r4, asr #31
   1be54:	andeq	ip, r1, r8, lsl r0
   1be58:	andeq	ip, r1, r8, lsl r0
   1be5c:	andeq	ip, r1, r8, lsl r0
   1be60:	andeq	ip, r1, r8, lsl r0
   1be64:	andeq	ip, r1, ip, lsl #2
   1be68:	andeq	ip, r1, ip, lsr #32
   1be6c:	andeq	ip, r1, r8, lsl r0
   1be70:	andeq	ip, r1, r8, lsl r0
   1be74:	andeq	ip, r1, r8, lsl r0
   1be78:	andeq	ip, r1, r8, lsl r0
   1be7c:	andeq	ip, r1, r8, lsl r0
   1be80:	andeq	ip, r1, r8, lsl r0
   1be84:	andeq	ip, r1, r8, lsl r0
   1be88:	andeq	ip, r1, r0, asr r1
   1be8c:	andeq	sp, r1, r8, asr #1
   1be90:	andeq	ip, r1, r8, lsl r0
   1be94:	andeq	ip, r1, r8, lsl r0
   1be98:	andeq	ip, r1, r8, lsl r0
   1be9c:	andeq	fp, r1, r0, ror #29
   1bea0:	andeq	ip, r1, r8, lsl r0
   1bea4:	andeq	ip, r1, r8, lsl r0
   1bea8:	andeq	ip, r1, r8, lsl r0
   1beac:	andeq	fp, r1, r4, asr pc
   1beb0:	andeq	ip, r1, r8, lsl r0
   1beb4:	andeq	fp, r1, r4, lsl #31
   1beb8:	andeq	ip, r1, r8, lsl r0
   1bebc:	andeq	ip, r1, r8, lsl r0
   1bec0:	andeq	ip, r1, r8, lsl r0
   1bec4:	andeq	ip, r1, r8, lsl r0
   1bec8:	andeq	ip, r1, r8, lsl r0
   1becc:	andeq	ip, r1, r8, lsl r0
   1bed0:	andeq	fp, r1, r4, asr #31
   1bed4:	andeq	ip, r1, r8, lsl r0
   1bed8:	andeq	ip, r1, r8, lsl r0
   1bedc:	andeq	ip, r1, r4, ror #2
   1bee0:	cmn	r7, #1
   1bee4:	str	r9, [sp, #12]
   1bee8:	ble	1c178 <__assert_fail@plt+0xab70>
   1beec:	ldr	r3, [sp, #28]
   1bef0:	mvn	r0, #0
   1bef4:	mvn	r1, #-2147483648	; 0x80000000
   1bef8:	mvn	r8, #0
   1befc:	mvn	r9, #-2147483648	; 0x80000000
   1bf00:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1bf04:	ldr	r2, [sp, #24]
   1bf08:	ldr	r3, [sp, #28]
   1bf0c:	subs	r0, r0, r6
   1bf10:	mov	r4, #1
   1bf14:	sbcs	r0, r1, r7
   1bf18:	bge	1c1b8 <__assert_fail@plt+0xabb0>
   1bf1c:	b	1c1d0 <__assert_fail@plt+0xabc8>
   1bf20:	cmp	r0, #105	; 0x69
   1bf24:	mov	r3, #0
   1bf28:	bne	1c008 <__assert_fail@plt+0xaa00>
   1bf2c:	ldrb	r0, [r1, #2]
   1bf30:	mov	r1, #1
   1bf34:	mov	r2, #1024	; 0x400
   1bf38:	cmp	r0, #66	; 0x42
   1bf3c:	movweq	r1, #3
   1bf40:	str	r1, [sp, #16]
   1bf44:	sub	r0, r4, #66	; 0x42
   1bf48:	cmp	r0, #53	; 0x35
   1bf4c:	bls	1bdf8 <__assert_fail@plt+0xa7f0>
   1bf50:	b	1c018 <__assert_fail@plt+0xaa10>
   1bf54:	cmn	r7, #1
   1bf58:	ble	1c20c <__assert_fail@plt+0xac04>
   1bf5c:	ldr	r3, [sp, #28]
   1bf60:	mvn	r0, #0
   1bf64:	mvn	r1, #-2147483648	; 0x80000000
   1bf68:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1bf6c:	ldr	r2, [sp, #24]
   1bf70:	ldr	r3, [sp, #28]
   1bf74:	subs	r0, r0, r6
   1bf78:	sbcs	r0, r1, r7
   1bf7c:	bge	1c240 <__assert_fail@plt+0xac38>
   1bf80:	b	1c950 <__assert_fail@plt+0xb348>
   1bf84:	cmn	r7, #1
   1bf88:	str	r9, [sp, #12]
   1bf8c:	ble	1c254 <__assert_fail@plt+0xac4c>
   1bf90:	ldr	r3, [sp, #28]
   1bf94:	mvn	r0, #0
   1bf98:	mvn	r1, #-2147483648	; 0x80000000
   1bf9c:	mvn	r8, #0
   1bfa0:	mvn	r9, #-2147483648	; 0x80000000
   1bfa4:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1bfa8:	ldr	r2, [sp, #24]
   1bfac:	ldr	r3, [sp, #28]
   1bfb0:	subs	r0, r0, r6
   1bfb4:	mov	r4, #1
   1bfb8:	sbcs	r0, r1, r7
   1bfbc:	bge	1c294 <__assert_fail@plt+0xac8c>
   1bfc0:	b	1c2ac <__assert_fail@plt+0xaca4>
   1bfc4:	cmn	r7, #1
   1bfc8:	str	r9, [sp, #12]
   1bfcc:	ble	1c2e4 <__assert_fail@plt+0xacdc>
   1bfd0:	ldr	r3, [sp, #28]
   1bfd4:	mvn	r0, #0
   1bfd8:	mvn	r1, #-2147483648	; 0x80000000
   1bfdc:	mvn	r9, #-2147483648	; 0x80000000
   1bfe0:	str	r0, [sp, #8]
   1bfe4:	mvn	r0, #0
   1bfe8:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1bfec:	ldr	r2, [sp, #24]
   1bff0:	ldr	r3, [sp, #28]
   1bff4:	subs	r0, r0, r6
   1bff8:	mov	r4, #1
   1bffc:	sbcs	r0, r1, r7
   1c000:	bge	1c328 <__assert_fail@plt+0xad20>
   1c004:	b	1c344 <__assert_fail@plt+0xad3c>
   1c008:	mov	r2, #1024	; 0x400
   1c00c:	sub	r0, r4, #66	; 0x42
   1c010:	cmp	r0, #53	; 0x35
   1c014:	bls	1bdf8 <__assert_fail@plt+0xa7f0>
   1c018:	orr	r5, r5, #2
   1c01c:	strd	r6, [r9]
   1c020:	mov	r0, r5
   1c024:	sub	sp, fp, #28
   1c028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c02c:	cmp	r7, #0
   1c030:	str	r9, [sp, #12]
   1c034:	blt	1c62c <__assert_fail@plt+0xb024>
   1c038:	ldr	r3, [sp, #28]
   1c03c:	mvn	r0, #0
   1c040:	mvn	r1, #-2147483648	; 0x80000000
   1c044:	mvn	r9, #-2147483648	; 0x80000000
   1c048:	str	r0, [sp, #8]
   1c04c:	mvn	r0, #0
   1c050:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c054:	ldr	r2, [sp, #24]
   1c058:	ldr	r3, [sp, #28]
   1c05c:	subs	r0, r0, r6
   1c060:	mov	r4, #1
   1c064:	sbcs	r0, r1, r7
   1c068:	bge	1c670 <__assert_fail@plt+0xb068>
   1c06c:	b	1c68c <__assert_fail@plt+0xb084>
   1c070:	cmn	r7, #1
   1c074:	ble	1c6c8 <__assert_fail@plt+0xb0c0>
   1c078:	cmp	r7, #2097152	; 0x200000
   1c07c:	blt	1c6f8 <__assert_fail@plt+0xb0f0>
   1c080:	b	1c950 <__assert_fail@plt+0xb348>
   1c084:	cmp	r7, #0
   1c088:	str	r9, [sp, #12]
   1c08c:	blt	1c708 <__assert_fail@plt+0xb100>
   1c090:	ldr	r3, [sp, #28]
   1c094:	mvn	r0, #0
   1c098:	mvn	r1, #-2147483648	; 0x80000000
   1c09c:	mvn	r9, #-2147483648	; 0x80000000
   1c0a0:	str	r0, [sp, #8]
   1c0a4:	mvn	r0, #0
   1c0a8:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c0ac:	ldr	r2, [sp, #24]
   1c0b0:	ldr	r3, [sp, #28]
   1c0b4:	subs	r0, r0, r6
   1c0b8:	mov	r4, #1
   1c0bc:	sbcs	r0, r1, r7
   1c0c0:	bge	1c74c <__assert_fail@plt+0xb144>
   1c0c4:	b	1c768 <__assert_fail@plt+0xb160>
   1c0c8:	cmp	r7, #0
   1c0cc:	str	r9, [sp, #12]
   1c0d0:	blt	1c7a4 <__assert_fail@plt+0xb19c>
   1c0d4:	ldr	r3, [sp, #28]
   1c0d8:	mvn	r0, #0
   1c0dc:	mvn	r1, #-2147483648	; 0x80000000
   1c0e0:	mvn	r8, #-2147483648	; 0x80000000
   1c0e4:	str	r0, [sp, #8]
   1c0e8:	mvn	r0, #0
   1c0ec:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c0f0:	ldr	r2, [sp, #24]
   1c0f4:	ldr	r3, [sp, #28]
   1c0f8:	subs	r0, r0, r6
   1c0fc:	mov	r4, #1
   1c100:	sbcs	r0, r1, r7
   1c104:	bge	1c7e8 <__assert_fail@plt+0xb1e0>
   1c108:	b	1c804 <__assert_fail@plt+0xb1fc>
   1c10c:	cmp	r7, #0
   1c110:	str	r9, [sp, #12]
   1c114:	blt	1c840 <__assert_fail@plt+0xb238>
   1c118:	ldr	r3, [sp, #28]
   1c11c:	mvn	r0, #0
   1c120:	mvn	r1, #-2147483648	; 0x80000000
   1c124:	mvn	r9, #-2147483648	; 0x80000000
   1c128:	str	r0, [sp, #8]
   1c12c:	mvn	r0, #0
   1c130:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c134:	ldr	r2, [sp, #24]
   1c138:	ldr	r3, [sp, #28]
   1c13c:	subs	r0, r0, r6
   1c140:	mov	r4, #1
   1c144:	sbcs	r0, r1, r7
   1c148:	bge	1c884 <__assert_fail@plt+0xb27c>
   1c14c:	b	1c8a0 <__assert_fail@plt+0xb298>
   1c150:	cmn	r7, #1
   1c154:	ble	1c8e0 <__assert_fail@plt+0xb2d8>
   1c158:	cmp	r7, #4194304	; 0x400000
   1c15c:	blt	1c910 <__assert_fail@plt+0xb308>
   1c160:	b	1c950 <__assert_fail@plt+0xb348>
   1c164:	cmn	r7, #1
   1c168:	ble	1c920 <__assert_fail@plt+0xb318>
   1c16c:	cmp	r7, #1073741824	; 0x40000000
   1c170:	bge	1c950 <__assert_fail@plt+0xb348>
   1c174:	b	1c970 <__assert_fail@plt+0xb368>
   1c178:	and	r0, r6, r7
   1c17c:	cmn	r0, #1
   1c180:	beq	1c1b8 <__assert_fail@plt+0xabb0>
   1c184:	mov	r0, #0
   1c188:	mov	r1, #-2147483648	; 0x80000000
   1c18c:	mov	r2, r6
   1c190:	mov	r3, r7
   1c194:	mov	r8, #0
   1c198:	mov	r9, #-2147483648	; 0x80000000
   1c19c:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c1a0:	ldr	r2, [sp, #24]
   1c1a4:	ldr	r3, [sp, #28]
   1c1a8:	mov	r4, #1
   1c1ac:	subs	r0, r0, r2
   1c1b0:	sbcs	r0, r1, r3
   1c1b4:	blt	1c380 <__assert_fail@plt+0xad78>
   1c1b8:	umull	r8, r0, r6, r2
   1c1bc:	mov	r4, #0
   1c1c0:	mla	r0, r6, r3, r0
   1c1c4:	mla	r9, r7, r2, r0
   1c1c8:	cmp	r9, #0
   1c1cc:	blt	1c380 <__assert_fail@plt+0xad78>
   1c1d0:	ldr	r3, [sp, #28]
   1c1d4:	mvn	r0, #-2147483648	; 0x80000000
   1c1d8:	mvn	r1, #-2147483648	; 0x80000000
   1c1dc:	mov	r6, r4
   1c1e0:	mvn	r4, #0
   1c1e4:	str	r0, [sp, #8]
   1c1e8:	mvn	r0, #0
   1c1ec:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c1f0:	ldr	r2, [sp, #24]
   1c1f4:	ldr	r3, [sp, #28]
   1c1f8:	subs	r0, r0, r8
   1c1fc:	mov	r7, #1
   1c200:	sbcs	r0, r1, r9
   1c204:	bge	1c3bc <__assert_fail@plt+0xadb4>
   1c208:	b	1c3d8 <__assert_fail@plt+0xadd0>
   1c20c:	and	r0, r6, r7
   1c210:	cmn	r0, #1
   1c214:	beq	1c240 <__assert_fail@plt+0xac38>
   1c218:	mov	r0, #0
   1c21c:	mov	r1, #-2147483648	; 0x80000000
   1c220:	mov	r2, r6
   1c224:	mov	r3, r7
   1c228:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c22c:	ldr	r2, [sp, #24]
   1c230:	ldr	r3, [sp, #28]
   1c234:	subs	r0, r0, r2
   1c238:	sbcs	r0, r1, r3
   1c23c:	blt	1c950 <__assert_fail@plt+0xb348>
   1c240:	umull	r0, r1, r6, r2
   1c244:	mla	r1, r6, r3, r1
   1c248:	mov	r6, r0
   1c24c:	mla	r7, r7, r2, r1
   1c250:	b	1d0c8 <__assert_fail@plt+0xbac0>
   1c254:	and	r0, r6, r7
   1c258:	cmn	r0, #1
   1c25c:	beq	1c294 <__assert_fail@plt+0xac8c>
   1c260:	mov	r0, #0
   1c264:	mov	r1, #-2147483648	; 0x80000000
   1c268:	mov	r2, r6
   1c26c:	mov	r3, r7
   1c270:	mov	r8, #0
   1c274:	mov	r9, #-2147483648	; 0x80000000
   1c278:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c27c:	ldr	r2, [sp, #24]
   1c280:	ldr	r3, [sp, #28]
   1c284:	mov	r4, #1
   1c288:	subs	r0, r0, r2
   1c28c:	sbcs	r0, r1, r3
   1c290:	blt	1c46c <__assert_fail@plt+0xae64>
   1c294:	umull	r8, r0, r6, r2
   1c298:	mov	r4, #0
   1c29c:	mla	r0, r6, r3, r0
   1c2a0:	mla	r9, r7, r2, r0
   1c2a4:	cmp	r9, #0
   1c2a8:	blt	1c46c <__assert_fail@plt+0xae64>
   1c2ac:	ldr	r3, [sp, #28]
   1c2b0:	mvn	r0, #0
   1c2b4:	mvn	r1, #-2147483648	; 0x80000000
   1c2b8:	str	r4, [sp, #8]
   1c2bc:	mvn	r6, #0
   1c2c0:	mvn	r7, #-2147483648	; 0x80000000
   1c2c4:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c2c8:	ldr	r4, [sp, #24]
   1c2cc:	ldr	r3, [sp, #28]
   1c2d0:	subs	r0, r0, r8
   1c2d4:	mov	r2, #1
   1c2d8:	sbcs	r0, r1, r9
   1c2dc:	bge	1c4a4 <__assert_fail@plt+0xae9c>
   1c2e0:	b	1c5dc <__assert_fail@plt+0xafd4>
   1c2e4:	and	r0, r6, r7
   1c2e8:	cmn	r0, #1
   1c2ec:	beq	1c328 <__assert_fail@plt+0xad20>
   1c2f0:	mov	r0, #0
   1c2f4:	mov	r1, #-2147483648	; 0x80000000
   1c2f8:	mov	r2, r6
   1c2fc:	mov	r3, r7
   1c300:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c304:	ldr	r2, [sp, #24]
   1c308:	ldr	r3, [sp, #28]
   1c30c:	mov	r4, #1
   1c310:	mov	r9, #-2147483648	; 0x80000000
   1c314:	subs	r0, r0, r2
   1c318:	sbcs	r0, r1, r3
   1c31c:	mov	r0, #0
   1c320:	str	r0, [sp, #8]
   1c324:	blt	1c4b8 <__assert_fail@plt+0xaeb0>
   1c328:	umull	r1, r0, r6, r2
   1c32c:	mov	r4, #0
   1c330:	mla	r0, r6, r3, r0
   1c334:	str	r1, [sp, #8]
   1c338:	mla	r9, r7, r2, r0
   1c33c:	cmp	r9, #0
   1c340:	blt	1c4b8 <__assert_fail@plt+0xaeb0>
   1c344:	ldr	r3, [sp, #28]
   1c348:	mvn	r0, #0
   1c34c:	mvn	r1, #-2147483648	; 0x80000000
   1c350:	str	r4, [sp, #4]
   1c354:	mvn	r6, #0
   1c358:	mvn	r8, #-2147483648	; 0x80000000
   1c35c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c360:	ldr	r4, [sp, #8]
   1c364:	ldr	r2, [sp, #24]
   1c368:	ldr	r3, [sp, #28]
   1c36c:	mov	r7, #1
   1c370:	subs	r0, r0, r4
   1c374:	sbcs	r0, r1, r9
   1c378:	bge	1c4f4 <__assert_fail@plt+0xaeec>
   1c37c:	b	1c50c <__assert_fail@plt+0xaf04>
   1c380:	mov	r0, #-2147483648	; 0x80000000
   1c384:	mov	r1, #-2147483648	; 0x80000000
   1c388:	mov	r2, r8
   1c38c:	mov	r3, r9
   1c390:	mov	r6, r4
   1c394:	mov	r4, #0
   1c398:	str	r0, [sp, #8]
   1c39c:	mov	r0, #0
   1c3a0:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c3a4:	ldr	r2, [sp, #24]
   1c3a8:	ldr	r3, [sp, #28]
   1c3ac:	mov	r7, #1
   1c3b0:	subs	r0, r0, r2
   1c3b4:	sbcs	r0, r1, r3
   1c3b8:	blt	1c42c <__assert_fail@plt+0xae24>
   1c3bc:	umull	r4, r0, r8, r2
   1c3c0:	mov	r7, r6
   1c3c4:	mla	r0, r8, r3, r0
   1c3c8:	mla	r0, r9, r2, r0
   1c3cc:	cmp	r0, #0
   1c3d0:	str	r0, [sp, #8]
   1c3d4:	blt	1c42c <__assert_fail@plt+0xae24>
   1c3d8:	ldr	r3, [sp, #28]
   1c3dc:	mvn	r0, #0
   1c3e0:	mvn	r1, #-2147483648	; 0x80000000
   1c3e4:	mov	r9, r7
   1c3e8:	mvn	r6, #0
   1c3ec:	mvn	r7, #-2147483648	; 0x80000000
   1c3f0:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c3f4:	ldr	r8, [sp, #8]
   1c3f8:	ldr	r3, [sp, #24]
   1c3fc:	ldr	ip, [sp, #28]
   1c400:	subs	r0, r0, r4
   1c404:	mov	r2, #1
   1c408:	sbcs	r0, r1, r8
   1c40c:	blt	1c420 <__assert_fail@plt+0xae18>
   1c410:	umull	r6, r0, r4, r3
   1c414:	mov	r2, #0
   1c418:	mla	r0, r4, ip, r0
   1c41c:	mla	r7, r8, r3, r0
   1c420:	orr	r3, r2, r9
   1c424:	ldr	r9, [sp, #12]
   1c428:	b	1d0c8 <__assert_fail@plt+0xbac0>
   1c42c:	ldr	r8, [sp, #8]
   1c430:	mov	r0, #0
   1c434:	mov	r1, #-2147483648	; 0x80000000
   1c438:	mov	r2, r4
   1c43c:	mov	r9, r7
   1c440:	mov	r6, #0
   1c444:	mov	r7, #-2147483648	; 0x80000000
   1c448:	mov	r3, r8
   1c44c:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c450:	ldr	r3, [sp, #24]
   1c454:	ldr	ip, [sp, #28]
   1c458:	mov	r2, #1
   1c45c:	subs	r0, r0, r3
   1c460:	sbcs	r0, r1, ip
   1c464:	bge	1c410 <__assert_fail@plt+0xae08>
   1c468:	b	1c420 <__assert_fail@plt+0xae18>
   1c46c:	mov	r0, #0
   1c470:	mov	r1, #-2147483648	; 0x80000000
   1c474:	mov	r2, r8
   1c478:	mov	r3, r9
   1c47c:	str	r4, [sp, #8]
   1c480:	mov	r6, #0
   1c484:	mov	r7, #-2147483648	; 0x80000000
   1c488:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c48c:	ldr	r4, [sp, #24]
   1c490:	ldr	r3, [sp, #28]
   1c494:	mov	r2, #1
   1c498:	subs	r0, r0, r4
   1c49c:	sbcs	r0, r1, r3
   1c4a0:	blt	1c5dc <__assert_fail@plt+0xafd4>
   1c4a4:	umull	r6, r0, r8, r4
   1c4a8:	mov	r2, #0
   1c4ac:	mla	r0, r8, r3, r0
   1c4b0:	mla	r7, r9, r4, r0
   1c4b4:	b	1c5dc <__assert_fail@plt+0xafd4>
   1c4b8:	str	r4, [sp, #4]
   1c4bc:	ldr	r4, [sp, #8]
   1c4c0:	mov	r0, #0
   1c4c4:	mov	r1, #-2147483648	; 0x80000000
   1c4c8:	mov	r3, r9
   1c4cc:	mov	r2, r4
   1c4d0:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c4d4:	ldr	r2, [sp, #24]
   1c4d8:	ldr	r3, [sp, #28]
   1c4dc:	mov	r7, #1
   1c4e0:	mov	r6, #0
   1c4e4:	mov	r8, #-2147483648	; 0x80000000
   1c4e8:	subs	r0, r0, r2
   1c4ec:	sbcs	r0, r1, r3
   1c4f0:	blt	1c544 <__assert_fail@plt+0xaf3c>
   1c4f4:	umull	r6, r0, r4, r2
   1c4f8:	ldr	r7, [sp, #4]
   1c4fc:	mla	r0, r4, r3, r0
   1c500:	mla	r8, r9, r2, r0
   1c504:	cmp	r8, #0
   1c508:	blt	1c544 <__assert_fail@plt+0xaf3c>
   1c50c:	ldr	r3, [sp, #28]
   1c510:	mvn	r0, #0
   1c514:	mvn	r1, #-2147483648	; 0x80000000
   1c518:	str	r7, [sp, #8]
   1c51c:	mvn	r4, #0
   1c520:	mvn	r9, #-2147483648	; 0x80000000
   1c524:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c528:	ldr	r2, [sp, #24]
   1c52c:	ldr	r3, [sp, #28]
   1c530:	subs	r0, r0, r6
   1c534:	mov	r7, #1
   1c538:	sbcs	r0, r1, r8
   1c53c:	bge	1c57c <__assert_fail@plt+0xaf74>
   1c540:	b	1c594 <__assert_fail@plt+0xaf8c>
   1c544:	mov	r0, #0
   1c548:	mov	r1, #-2147483648	; 0x80000000
   1c54c:	mov	r2, r6
   1c550:	mov	r3, r8
   1c554:	str	r7, [sp, #8]
   1c558:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c55c:	ldr	r2, [sp, #24]
   1c560:	ldr	r3, [sp, #28]
   1c564:	mov	r7, #1
   1c568:	mov	r4, #0
   1c56c:	mov	r9, #-2147483648	; 0x80000000
   1c570:	subs	r0, r0, r2
   1c574:	sbcs	r0, r1, r3
   1c578:	blt	1c5ec <__assert_fail@plt+0xafe4>
   1c57c:	umull	r4, r0, r6, r2
   1c580:	ldr	r7, [sp, #8]
   1c584:	mla	r0, r6, r3, r0
   1c588:	mla	r9, r8, r2, r0
   1c58c:	cmp	r9, #0
   1c590:	blt	1c5ec <__assert_fail@plt+0xafe4>
   1c594:	ldr	r3, [sp, #28]
   1c598:	mvn	r0, #0
   1c59c:	mvn	r1, #-2147483648	; 0x80000000
   1c5a0:	str	r7, [sp, #8]
   1c5a4:	mvn	r6, #0
   1c5a8:	mvn	r7, #-2147483648	; 0x80000000
   1c5ac:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c5b0:	ldr	r3, [sp, #24]
   1c5b4:	ldr	ip, [sp, #28]
   1c5b8:	subs	r0, r0, r4
   1c5bc:	mov	r2, #1
   1c5c0:	mov	r8, r4
   1c5c4:	sbcs	r0, r1, r9
   1c5c8:	blt	1c5dc <__assert_fail@plt+0xafd4>
   1c5cc:	umull	r6, r0, r8, r3
   1c5d0:	mov	r2, #0
   1c5d4:	mla	r0, r8, ip, r0
   1c5d8:	mla	r7, r9, r3, r0
   1c5dc:	ldr	r0, [sp, #8]
   1c5e0:	ldr	r9, [sp, #12]
   1c5e4:	orr	r3, r2, r0
   1c5e8:	b	1d0c8 <__assert_fail@plt+0xbac0>
   1c5ec:	mov	r0, #0
   1c5f0:	mov	r1, #-2147483648	; 0x80000000
   1c5f4:	mov	r2, r4
   1c5f8:	mov	r3, r9
   1c5fc:	str	r7, [sp, #8]
   1c600:	mov	r8, r4
   1c604:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c608:	ldr	r3, [sp, #24]
   1c60c:	ldr	ip, [sp, #28]
   1c610:	mov	r2, #1
   1c614:	mov	r6, #0
   1c618:	mov	r7, #-2147483648	; 0x80000000
   1c61c:	subs	r0, r0, r3
   1c620:	sbcs	r0, r1, ip
   1c624:	bge	1c5cc <__assert_fail@plt+0xafc4>
   1c628:	b	1c5dc <__assert_fail@plt+0xafd4>
   1c62c:	and	r0, r6, r7
   1c630:	cmn	r0, #1
   1c634:	beq	1c670 <__assert_fail@plt+0xb068>
   1c638:	mov	r0, #0
   1c63c:	mov	r1, #-2147483648	; 0x80000000
   1c640:	mov	r2, r6
   1c644:	mov	r3, r7
   1c648:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c64c:	ldr	r2, [sp, #24]
   1c650:	ldr	r3, [sp, #28]
   1c654:	mov	r4, #1
   1c658:	mov	r9, #-2147483648	; 0x80000000
   1c65c:	subs	r0, r0, r2
   1c660:	sbcs	r0, r1, r3
   1c664:	mov	r0, #0
   1c668:	str	r0, [sp, #8]
   1c66c:	blt	1c980 <__assert_fail@plt+0xb378>
   1c670:	umull	r1, r0, r6, r2
   1c674:	mov	r4, #0
   1c678:	mla	r0, r6, r3, r0
   1c67c:	str	r1, [sp, #8]
   1c680:	mla	r9, r7, r2, r0
   1c684:	cmp	r9, #0
   1c688:	blt	1c980 <__assert_fail@plt+0xb378>
   1c68c:	ldr	r3, [sp, #28]
   1c690:	mvn	r0, #0
   1c694:	mvn	r1, #-2147483648	; 0x80000000
   1c698:	str	r4, [sp, #4]
   1c69c:	mvn	r8, #0
   1c6a0:	mvn	r4, #-2147483648	; 0x80000000
   1c6a4:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c6a8:	ldr	r6, [sp, #8]
   1c6ac:	ldr	r2, [sp, #24]
   1c6b0:	ldr	r3, [sp, #28]
   1c6b4:	mov	r7, #1
   1c6b8:	subs	r0, r0, r6
   1c6bc:	sbcs	r0, r1, r9
   1c6c0:	bge	1c9bc <__assert_fail@plt+0xb3b4>
   1c6c4:	b	1c9d4 <__assert_fail@plt+0xb3cc>
   1c6c8:	and	r0, r6, r7
   1c6cc:	cmn	r0, #1
   1c6d0:	beq	1c6f8 <__assert_fail@plt+0xb0f0>
   1c6d4:	mov	r0, #0
   1c6d8:	mov	r1, #-2147483648	; 0x80000000
   1c6dc:	mov	r2, r6
   1c6e0:	mov	r3, r7
   1c6e4:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c6e8:	ldr	r3, [sp, #28]
   1c6ec:	subs	r0, r0, #1024	; 0x400
   1c6f0:	sbcs	r0, r1, #0
   1c6f4:	blt	1c950 <__assert_fail@plt+0xb348>
   1c6f8:	lsl	r0, r7, #10
   1c6fc:	orr	r7, r0, r6, lsr #22
   1c700:	lsl	r6, r6, #10
   1c704:	b	1d0c8 <__assert_fail@plt+0xbac0>
   1c708:	and	r0, r6, r7
   1c70c:	cmn	r0, #1
   1c710:	beq	1c74c <__assert_fail@plt+0xb144>
   1c714:	mov	r0, #0
   1c718:	mov	r1, #-2147483648	; 0x80000000
   1c71c:	mov	r2, r6
   1c720:	mov	r3, r7
   1c724:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c728:	ldr	r2, [sp, #24]
   1c72c:	ldr	r3, [sp, #28]
   1c730:	mov	r4, #1
   1c734:	mov	r9, #-2147483648	; 0x80000000
   1c738:	subs	r0, r0, r2
   1c73c:	sbcs	r0, r1, r3
   1c740:	mov	r0, #0
   1c744:	str	r0, [sp, #8]
   1c748:	blt	1cc98 <__assert_fail@plt+0xb690>
   1c74c:	umull	r1, r0, r6, r2
   1c750:	mov	r4, #0
   1c754:	mla	r0, r6, r3, r0
   1c758:	str	r1, [sp, #8]
   1c75c:	mla	r9, r7, r2, r0
   1c760:	cmp	r9, #0
   1c764:	blt	1cc98 <__assert_fail@plt+0xb690>
   1c768:	ldr	r3, [sp, #28]
   1c76c:	mvn	r0, #0
   1c770:	mvn	r1, #-2147483648	; 0x80000000
   1c774:	str	r4, [sp, #4]
   1c778:	mvn	r8, #0
   1c77c:	mvn	r4, #-2147483648	; 0x80000000
   1c780:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c784:	ldr	r6, [sp, #8]
   1c788:	ldr	r2, [sp, #24]
   1c78c:	ldr	r3, [sp, #28]
   1c790:	mov	r7, #1
   1c794:	subs	r0, r0, r6
   1c798:	sbcs	r0, r1, r9
   1c79c:	bge	1ccd4 <__assert_fail@plt+0xb6cc>
   1c7a0:	b	1ccec <__assert_fail@plt+0xb6e4>
   1c7a4:	and	r0, r6, r7
   1c7a8:	cmn	r0, #1
   1c7ac:	beq	1c7e8 <__assert_fail@plt+0xb1e0>
   1c7b0:	mov	r0, #0
   1c7b4:	mov	r1, #-2147483648	; 0x80000000
   1c7b8:	mov	r2, r6
   1c7bc:	mov	r3, r7
   1c7c0:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c7c4:	ldr	r2, [sp, #24]
   1c7c8:	ldr	r3, [sp, #28]
   1c7cc:	mov	r4, #1
   1c7d0:	mov	r8, #-2147483648	; 0x80000000
   1c7d4:	subs	r0, r0, r2
   1c7d8:	sbcs	r0, r1, r3
   1c7dc:	mov	r0, #0
   1c7e0:	str	r0, [sp, #8]
   1c7e4:	blt	1cf14 <__assert_fail@plt+0xb90c>
   1c7e8:	umull	r1, r0, r6, r2
   1c7ec:	mov	r4, #0
   1c7f0:	mla	r0, r6, r3, r0
   1c7f4:	str	r1, [sp, #8]
   1c7f8:	mla	r8, r7, r2, r0
   1c7fc:	cmp	r8, #0
   1c800:	blt	1cf14 <__assert_fail@plt+0xb90c>
   1c804:	ldr	r3, [sp, #28]
   1c808:	mvn	r0, #0
   1c80c:	mvn	r1, #-2147483648	; 0x80000000
   1c810:	str	r4, [sp, #4]
   1c814:	mvn	r9, #0
   1c818:	mvn	r4, #-2147483648	; 0x80000000
   1c81c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c820:	ldr	r6, [sp, #8]
   1c824:	ldr	r2, [sp, #24]
   1c828:	ldr	r3, [sp, #28]
   1c82c:	mov	r7, #1
   1c830:	subs	r0, r0, r6
   1c834:	sbcs	r0, r1, r8
   1c838:	bge	1cf50 <__assert_fail@plt+0xb948>
   1c83c:	b	1cf68 <__assert_fail@plt+0xb960>
   1c840:	and	r0, r6, r7
   1c844:	cmn	r0, #1
   1c848:	beq	1c884 <__assert_fail@plt+0xb27c>
   1c84c:	mov	r0, #0
   1c850:	mov	r1, #-2147483648	; 0x80000000
   1c854:	mov	r2, r6
   1c858:	mov	r3, r7
   1c85c:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c860:	ldr	r2, [sp, #24]
   1c864:	ldr	r3, [sp, #28]
   1c868:	mov	r4, #1
   1c86c:	mov	r9, #-2147483648	; 0x80000000
   1c870:	subs	r0, r0, r2
   1c874:	sbcs	r0, r1, r3
   1c878:	mov	r0, #0
   1c87c:	str	r0, [sp, #8]
   1c880:	blt	1d130 <__assert_fail@plt+0xbb28>
   1c884:	umull	r1, r0, r6, r2
   1c888:	mov	r4, #0
   1c88c:	mla	r0, r6, r3, r0
   1c890:	str	r1, [sp, #8]
   1c894:	mla	r9, r7, r2, r0
   1c898:	cmp	r9, #0
   1c89c:	blt	1d130 <__assert_fail@plt+0xbb28>
   1c8a0:	ldr	r3, [sp, #28]
   1c8a4:	mvn	r0, #0
   1c8a8:	mvn	r1, #-2147483648	; 0x80000000
   1c8ac:	str	r4, [sp]
   1c8b0:	mvn	r8, #-2147483648	; 0x80000000
   1c8b4:	str	r0, [sp, #4]
   1c8b8:	mvn	r0, #0
   1c8bc:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c8c0:	ldr	r6, [sp, #8]
   1c8c4:	ldr	r2, [sp, #24]
   1c8c8:	ldr	r3, [sp, #28]
   1c8cc:	mov	r7, #1
   1c8d0:	subs	r0, r0, r6
   1c8d4:	sbcs	r0, r1, r9
   1c8d8:	bge	1d170 <__assert_fail@plt+0xbb68>
   1c8dc:	b	1d18c <__assert_fail@plt+0xbb84>
   1c8e0:	and	r0, r6, r7
   1c8e4:	cmn	r0, #1
   1c8e8:	beq	1c910 <__assert_fail@plt+0xb308>
   1c8ec:	mov	r0, #0
   1c8f0:	mov	r1, #-2147483648	; 0x80000000
   1c8f4:	mov	r2, r6
   1c8f8:	mov	r3, r7
   1c8fc:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c900:	ldr	r3, [sp, #28]
   1c904:	subs	r0, r0, #512	; 0x200
   1c908:	sbcs	r0, r1, #0
   1c90c:	blt	1c950 <__assert_fail@plt+0xb348>
   1c910:	lsl	r0, r7, #9
   1c914:	orr	r7, r0, r6, lsr #23
   1c918:	lsl	r6, r6, #9
   1c91c:	b	1d0c8 <__assert_fail@plt+0xbac0>
   1c920:	and	r0, r6, r7
   1c924:	cmn	r0, #1
   1c928:	beq	1c970 <__assert_fail@plt+0xb368>
   1c92c:	mov	r0, #0
   1c930:	mov	r1, #-2147483648	; 0x80000000
   1c934:	mov	r2, r6
   1c938:	mov	r3, r7
   1c93c:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c940:	ldr	r3, [sp, #28]
   1c944:	subs	r0, r0, #2
   1c948:	sbcs	r0, r1, #0
   1c94c:	bge	1c970 <__assert_fail@plt+0xb368>
   1c950:	mvn	r0, #-2147483648	; 0x80000000
   1c954:	cmp	r7, #0
   1c958:	mvn	r6, #0
   1c95c:	mov	r3, #1
   1c960:	movlt	r0, #-2147483648	; 0x80000000
   1c964:	movwlt	r6, #0
   1c968:	mov	r7, r0
   1c96c:	b	1d0c8 <__assert_fail@plt+0xbac0>
   1c970:	lsl	r0, r7, #1
   1c974:	orr	r7, r0, r6, lsr #31
   1c978:	lsl	r6, r6, #1
   1c97c:	b	1d0c8 <__assert_fail@plt+0xbac0>
   1c980:	ldr	r6, [sp, #8]
   1c984:	mov	r0, #0
   1c988:	mov	r1, #-2147483648	; 0x80000000
   1c98c:	mov	r3, r9
   1c990:	str	r4, [sp, #4]
   1c994:	mov	r2, r6
   1c998:	bl	1f218 <__assert_fail@plt+0xdc10>
   1c99c:	ldr	r2, [sp, #24]
   1c9a0:	ldr	r3, [sp, #28]
   1c9a4:	mov	r7, #1
   1c9a8:	mov	r8, #0
   1c9ac:	mov	r4, #-2147483648	; 0x80000000
   1c9b0:	subs	r0, r0, r2
   1c9b4:	sbcs	r0, r1, r3
   1c9b8:	blt	1ca0c <__assert_fail@plt+0xb404>
   1c9bc:	umull	r8, r0, r6, r2
   1c9c0:	ldr	r7, [sp, #4]
   1c9c4:	mla	r0, r6, r3, r0
   1c9c8:	mla	r4, r9, r2, r0
   1c9cc:	cmp	r4, #0
   1c9d0:	blt	1ca0c <__assert_fail@plt+0xb404>
   1c9d4:	ldr	r3, [sp, #28]
   1c9d8:	mvn	r0, #0
   1c9dc:	mvn	r1, #-2147483648	; 0x80000000
   1c9e0:	str	r7, [sp, #8]
   1c9e4:	mvn	r7, #0
   1c9e8:	mvn	r9, #-2147483648	; 0x80000000
   1c9ec:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1c9f0:	ldr	r2, [sp, #24]
   1c9f4:	ldr	r3, [sp, #28]
   1c9f8:	subs	r0, r0, r8
   1c9fc:	mov	r6, #1
   1ca00:	sbcs	r0, r1, r4
   1ca04:	bge	1ca44 <__assert_fail@plt+0xb43c>
   1ca08:	b	1ca5c <__assert_fail@plt+0xb454>
   1ca0c:	mov	r0, #0
   1ca10:	mov	r1, #-2147483648	; 0x80000000
   1ca14:	mov	r2, r8
   1ca18:	mov	r3, r4
   1ca1c:	str	r7, [sp, #8]
   1ca20:	bl	1f218 <__assert_fail@plt+0xdc10>
   1ca24:	ldr	r2, [sp, #24]
   1ca28:	ldr	r3, [sp, #28]
   1ca2c:	mov	r6, #1
   1ca30:	mov	r7, #0
   1ca34:	mov	r9, #-2147483648	; 0x80000000
   1ca38:	subs	r0, r0, r2
   1ca3c:	sbcs	r0, r1, r3
   1ca40:	blt	1ca9c <__assert_fail@plt+0xb494>
   1ca44:	umull	r7, r0, r8, r2
   1ca48:	ldr	r6, [sp, #8]
   1ca4c:	mla	r0, r8, r3, r0
   1ca50:	mla	r9, r4, r2, r0
   1ca54:	cmp	r9, #0
   1ca58:	blt	1ca9c <__assert_fail@plt+0xb494>
   1ca5c:	ldr	r3, [sp, #28]
   1ca60:	mvn	r0, #0
   1ca64:	mvn	r1, #-2147483648	; 0x80000000
   1ca68:	str	r6, [sp, #8]
   1ca6c:	mvn	r8, #0
   1ca70:	mvn	r4, #-2147483648	; 0x80000000
   1ca74:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1ca78:	ldr	r2, [sp, #24]
   1ca7c:	ldr	r3, [sp, #28]
   1ca80:	subs	r0, r0, r7
   1ca84:	sbcs	r0, r1, r9
   1ca88:	bge	1cae0 <__assert_fail@plt+0xb4d8>
   1ca8c:	mov	r0, #1
   1ca90:	mov	r6, #0
   1ca94:	str	r0, [sp, #8]
   1ca98:	b	1caf8 <__assert_fail@plt+0xb4f0>
   1ca9c:	mov	r0, #0
   1caa0:	mov	r1, #-2147483648	; 0x80000000
   1caa4:	mov	r2, r7
   1caa8:	mov	r3, r9
   1caac:	str	r6, [sp, #8]
   1cab0:	bl	1f218 <__assert_fail@plt+0xdc10>
   1cab4:	ldr	r2, [sp, #24]
   1cab8:	ldr	r3, [sp, #28]
   1cabc:	subs	r0, r0, r2
   1cac0:	sbcs	r0, r1, r3
   1cac4:	bge	1cae0 <__assert_fail@plt+0xb4d8>
   1cac8:	mov	r0, #1
   1cacc:	mov	r8, #0
   1cad0:	mov	r4, #-2147483648	; 0x80000000
   1cad4:	mov	r6, #0
   1cad8:	str	r0, [sp, #8]
   1cadc:	b	1cb30 <__assert_fail@plt+0xb528>
   1cae0:	umull	r8, r0, r7, r2
   1cae4:	mov	r6, #0
   1cae8:	mla	r0, r7, r3, r0
   1caec:	mla	r4, r9, r2, r0
   1caf0:	cmp	r4, #0
   1caf4:	blt	1cb30 <__assert_fail@plt+0xb528>
   1caf8:	ldr	r3, [sp, #28]
   1cafc:	mvn	r0, #0
   1cb00:	mvn	r1, #-2147483648	; 0x80000000
   1cb04:	mvn	r9, #0
   1cb08:	mvn	r7, #-2147483648	; 0x80000000
   1cb0c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1cb10:	ldr	r2, [sp, #24]
   1cb14:	ldr	r3, [sp, #28]
   1cb18:	subs	r0, r0, r8
   1cb1c:	sbcs	r0, r1, r4
   1cb20:	bge	1cb6c <__assert_fail@plt+0xb564>
   1cb24:	mov	r0, #1
   1cb28:	str	r0, [sp, #8]
   1cb2c:	b	1cb80 <__assert_fail@plt+0xb578>
   1cb30:	mov	r0, #0
   1cb34:	mov	r1, #-2147483648	; 0x80000000
   1cb38:	mov	r2, r8
   1cb3c:	mov	r3, r4
   1cb40:	bl	1f218 <__assert_fail@plt+0xdc10>
   1cb44:	ldr	r2, [sp, #24]
   1cb48:	ldr	r3, [sp, #28]
   1cb4c:	subs	r0, r0, r2
   1cb50:	sbcs	r0, r1, r3
   1cb54:	bge	1cb6c <__assert_fail@plt+0xb564>
   1cb58:	mov	r0, #1
   1cb5c:	mov	r9, #0
   1cb60:	mov	r7, #-2147483648	; 0x80000000
   1cb64:	str	r0, [sp, #8]
   1cb68:	b	1cbbc <__assert_fail@plt+0xb5b4>
   1cb6c:	umull	r9, r0, r8, r2
   1cb70:	mla	r0, r8, r3, r0
   1cb74:	mla	r7, r4, r2, r0
   1cb78:	cmp	r7, #0
   1cb7c:	blt	1cbbc <__assert_fail@plt+0xb5b4>
   1cb80:	ldr	r3, [sp, #28]
   1cb84:	mvn	r0, #0
   1cb88:	mvn	r1, #-2147483648	; 0x80000000
   1cb8c:	mvn	r8, #0
   1cb90:	mvn	r4, #-2147483648	; 0x80000000
   1cb94:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1cb98:	ldr	r2, [sp, #24]
   1cb9c:	ldr	r3, [sp, #28]
   1cba0:	subs	r0, r0, r9
   1cba4:	sbcs	r0, r1, r7
   1cba8:	bge	1cbfc <__assert_fail@plt+0xb5f4>
   1cbac:	ldr	r9, [sp, #12]
   1cbb0:	mov	r0, #1
   1cbb4:	str	r0, [sp, #8]
   1cbb8:	b	1cc14 <__assert_fail@plt+0xb60c>
   1cbbc:	mov	r0, #0
   1cbc0:	mov	r1, #-2147483648	; 0x80000000
   1cbc4:	mov	r2, r9
   1cbc8:	mov	r3, r7
   1cbcc:	bl	1f218 <__assert_fail@plt+0xdc10>
   1cbd0:	ldr	r2, [sp, #24]
   1cbd4:	ldr	r3, [sp, #28]
   1cbd8:	subs	r0, r0, r2
   1cbdc:	sbcs	r0, r1, r3
   1cbe0:	bge	1cbfc <__assert_fail@plt+0xb5f4>
   1cbe4:	ldr	r9, [sp, #12]
   1cbe8:	mov	r0, #1
   1cbec:	mov	r8, #0
   1cbf0:	mov	r4, #-2147483648	; 0x80000000
   1cbf4:	str	r0, [sp, #8]
   1cbf8:	b	1cc64 <__assert_fail@plt+0xb65c>
   1cbfc:	umull	r8, r0, r9, r2
   1cc00:	mla	r0, r9, r3, r0
   1cc04:	ldr	r9, [sp, #12]
   1cc08:	mla	r4, r7, r2, r0
   1cc0c:	cmp	r4, #0
   1cc10:	blt	1cc64 <__assert_fail@plt+0xb65c>
   1cc14:	ldr	r3, [sp, #28]
   1cc18:	mvn	r0, #0
   1cc1c:	mvn	r1, #-2147483648	; 0x80000000
   1cc20:	mvn	r6, #0
   1cc24:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1cc28:	ldr	r7, [sp, #24]
   1cc2c:	ldr	r3, [sp, #28]
   1cc30:	subs	r0, r0, r8
   1cc34:	mov	r2, #1
   1cc38:	sbcs	r0, r1, r4
   1cc3c:	mvn	r0, #-2147483648	; 0x80000000
   1cc40:	blt	1cc54 <__assert_fail@plt+0xb64c>
   1cc44:	umull	r6, r0, r8, r7
   1cc48:	mov	r2, #0
   1cc4c:	mla	r0, r8, r3, r0
   1cc50:	mla	r0, r4, r7, r0
   1cc54:	ldr	r1, [sp, #8]
   1cc58:	mov	r7, r0
   1cc5c:	orr	r3, r2, r1
   1cc60:	b	1d0c8 <__assert_fail@plt+0xbac0>
   1cc64:	mov	r0, #0
   1cc68:	mov	r1, #-2147483648	; 0x80000000
   1cc6c:	mov	r2, r8
   1cc70:	mov	r3, r4
   1cc74:	bl	1f218 <__assert_fail@plt+0xdc10>
   1cc78:	ldr	r7, [sp, #24]
   1cc7c:	ldr	r3, [sp, #28]
   1cc80:	mov	r2, #1
   1cc84:	subs	r0, r0, r7
   1cc88:	sbcs	r0, r1, r3
   1cc8c:	mov	r0, #-2147483648	; 0x80000000
   1cc90:	bge	1cc44 <__assert_fail@plt+0xb63c>
   1cc94:	b	1cc54 <__assert_fail@plt+0xb64c>
   1cc98:	ldr	r6, [sp, #8]
   1cc9c:	mov	r0, #0
   1cca0:	mov	r1, #-2147483648	; 0x80000000
   1cca4:	mov	r3, r9
   1cca8:	str	r4, [sp, #4]
   1ccac:	mov	r2, r6
   1ccb0:	bl	1f218 <__assert_fail@plt+0xdc10>
   1ccb4:	ldr	r2, [sp, #24]
   1ccb8:	ldr	r3, [sp, #28]
   1ccbc:	mov	r7, #1
   1ccc0:	mov	r8, #0
   1ccc4:	mov	r4, #-2147483648	; 0x80000000
   1ccc8:	subs	r0, r0, r2
   1cccc:	sbcs	r0, r1, r3
   1ccd0:	blt	1cd28 <__assert_fail@plt+0xb720>
   1ccd4:	umull	r8, r0, r6, r2
   1ccd8:	ldr	r7, [sp, #4]
   1ccdc:	mla	r0, r6, r3, r0
   1cce0:	mla	r4, r9, r2, r0
   1cce4:	cmp	r4, #0
   1cce8:	blt	1cd28 <__assert_fail@plt+0xb720>
   1ccec:	ldr	r3, [sp, #28]
   1ccf0:	mvn	r0, #0
   1ccf4:	mvn	r1, #-2147483648	; 0x80000000
   1ccf8:	str	r7, [sp, #4]
   1ccfc:	mvn	r7, #0
   1cd00:	mvn	r9, #-2147483648	; 0x80000000
   1cd04:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1cd08:	ldr	r2, [sp, #24]
   1cd0c:	ldr	r3, [sp, #28]
   1cd10:	subs	r0, r0, r8
   1cd14:	mov	r6, #1
   1cd18:	sbcs	r0, r1, r4
   1cd1c:	str	r6, [sp, #8]
   1cd20:	bge	1cd64 <__assert_fail@plt+0xb75c>
   1cd24:	b	1cd80 <__assert_fail@plt+0xb778>
   1cd28:	mov	r0, #0
   1cd2c:	mov	r1, #-2147483648	; 0x80000000
   1cd30:	mov	r2, r8
   1cd34:	mov	r3, r4
   1cd38:	str	r7, [sp, #4]
   1cd3c:	bl	1f218 <__assert_fail@plt+0xdc10>
   1cd40:	ldr	r2, [sp, #24]
   1cd44:	ldr	r3, [sp, #28]
   1cd48:	mov	r7, #1
   1cd4c:	mov	r9, #-2147483648	; 0x80000000
   1cd50:	str	r7, [sp, #8]
   1cd54:	mov	r7, #0
   1cd58:	subs	r0, r0, r2
   1cd5c:	sbcs	r0, r1, r3
   1cd60:	blt	1cdb8 <__assert_fail@plt+0xb7b0>
   1cd64:	umull	r7, r0, r8, r2
   1cd68:	mla	r0, r8, r3, r0
   1cd6c:	mla	r9, r4, r2, r0
   1cd70:	ldr	r0, [sp, #4]
   1cd74:	cmp	r9, #0
   1cd78:	str	r0, [sp, #8]
   1cd7c:	blt	1cdb8 <__assert_fail@plt+0xb7b0>
   1cd80:	ldr	r3, [sp, #28]
   1cd84:	mvn	r0, #0
   1cd88:	mvn	r1, #-2147483648	; 0x80000000
   1cd8c:	mvn	r4, #0
   1cd90:	mvn	r8, #-2147483648	; 0x80000000
   1cd94:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1cd98:	ldr	r2, [sp, #24]
   1cd9c:	ldr	r3, [sp, #28]
   1cda0:	subs	r0, r0, r7
   1cda4:	sbcs	r0, r1, r9
   1cda8:	bge	1cdf4 <__assert_fail@plt+0xb7ec>
   1cdac:	mov	r0, #1
   1cdb0:	str	r0, [sp, #8]
   1cdb4:	b	1ce08 <__assert_fail@plt+0xb800>
   1cdb8:	mov	r0, #0
   1cdbc:	mov	r1, #-2147483648	; 0x80000000
   1cdc0:	mov	r2, r7
   1cdc4:	mov	r3, r9
   1cdc8:	bl	1f218 <__assert_fail@plt+0xdc10>
   1cdcc:	ldr	r2, [sp, #24]
   1cdd0:	ldr	r3, [sp, #28]
   1cdd4:	subs	r0, r0, r2
   1cdd8:	sbcs	r0, r1, r3
   1cddc:	bge	1cdf4 <__assert_fail@plt+0xb7ec>
   1cde0:	mov	r0, #1
   1cde4:	mov	r4, #0
   1cde8:	mov	r8, #-2147483648	; 0x80000000
   1cdec:	str	r0, [sp, #8]
   1cdf0:	b	1ce3c <__assert_fail@plt+0xb834>
   1cdf4:	umull	r4, r0, r7, r2
   1cdf8:	mla	r0, r7, r3, r0
   1cdfc:	mla	r8, r9, r2, r0
   1ce00:	cmp	r8, #0
   1ce04:	blt	1ce3c <__assert_fail@plt+0xb834>
   1ce08:	ldr	r3, [sp, #28]
   1ce0c:	mvn	r0, #0
   1ce10:	mvn	r1, #-2147483648	; 0x80000000
   1ce14:	mvn	r6, #0
   1ce18:	mvn	r9, #-2147483648	; 0x80000000
   1ce1c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1ce20:	ldr	r2, [sp, #24]
   1ce24:	ldr	r3, [sp, #28]
   1ce28:	subs	r0, r0, r4
   1ce2c:	sbcs	r0, r1, r8
   1ce30:	bge	1ce74 <__assert_fail@plt+0xb86c>
   1ce34:	mov	r8, #1
   1ce38:	b	1ce8c <__assert_fail@plt+0xb884>
   1ce3c:	mov	r0, #0
   1ce40:	mov	r1, #-2147483648	; 0x80000000
   1ce44:	mov	r2, r4
   1ce48:	mov	r3, r8
   1ce4c:	bl	1f218 <__assert_fail@plt+0xdc10>
   1ce50:	ldr	r2, [sp, #24]
   1ce54:	ldr	r3, [sp, #28]
   1ce58:	subs	r0, r0, r2
   1ce5c:	sbcs	r0, r1, r3
   1ce60:	bge	1ce74 <__assert_fail@plt+0xb86c>
   1ce64:	mov	r8, #1
   1ce68:	mov	r6, #0
   1ce6c:	mov	r9, #-2147483648	; 0x80000000
   1ce70:	b	1cedc <__assert_fail@plt+0xb8d4>
   1ce74:	umull	r6, r0, r4, r2
   1ce78:	mla	r0, r4, r3, r0
   1ce7c:	mla	r9, r8, r2, r0
   1ce80:	ldr	r8, [sp, #8]
   1ce84:	cmp	r9, #0
   1ce88:	blt	1cedc <__assert_fail@plt+0xb8d4>
   1ce8c:	ldr	r3, [sp, #28]
   1ce90:	mvn	r0, #0
   1ce94:	mvn	r1, #-2147483648	; 0x80000000
   1ce98:	mvn	r4, #0
   1ce9c:	mvn	r7, #-2147483648	; 0x80000000
   1cea0:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1cea4:	ldr	r3, [sp, #24]
   1cea8:	ldr	ip, [sp, #28]
   1ceac:	subs	r0, r0, r6
   1ceb0:	mov	r2, #1
   1ceb4:	sbcs	r0, r1, r9
   1ceb8:	blt	1cecc <__assert_fail@plt+0xb8c4>
   1cebc:	umull	r4, r0, r6, r3
   1cec0:	mov	r2, #0
   1cec4:	mla	r0, r6, ip, r0
   1cec8:	mla	r7, r9, r3, r0
   1cecc:	ldr	r9, [sp, #12]
   1ced0:	orr	r3, r2, r8
   1ced4:	mov	r6, r4
   1ced8:	b	1d0c8 <__assert_fail@plt+0xbac0>
   1cedc:	mov	r0, #0
   1cee0:	mov	r1, #-2147483648	; 0x80000000
   1cee4:	mov	r2, r6
   1cee8:	mov	r3, r9
   1ceec:	bl	1f218 <__assert_fail@plt+0xdc10>
   1cef0:	ldr	r3, [sp, #24]
   1cef4:	ldr	ip, [sp, #28]
   1cef8:	mov	r2, #1
   1cefc:	mov	r4, #0
   1cf00:	mov	r7, #-2147483648	; 0x80000000
   1cf04:	subs	r0, r0, r3
   1cf08:	sbcs	r0, r1, ip
   1cf0c:	bge	1cebc <__assert_fail@plt+0xb8b4>
   1cf10:	b	1cecc <__assert_fail@plt+0xb8c4>
   1cf14:	ldr	r6, [sp, #8]
   1cf18:	mov	r0, #0
   1cf1c:	mov	r1, #-2147483648	; 0x80000000
   1cf20:	mov	r3, r8
   1cf24:	str	r4, [sp, #4]
   1cf28:	mov	r2, r6
   1cf2c:	bl	1f218 <__assert_fail@plt+0xdc10>
   1cf30:	ldr	r2, [sp, #24]
   1cf34:	ldr	r3, [sp, #28]
   1cf38:	mov	r7, #1
   1cf3c:	mov	r9, #0
   1cf40:	mov	r4, #-2147483648	; 0x80000000
   1cf44:	subs	r0, r0, r2
   1cf48:	sbcs	r0, r1, r3
   1cf4c:	blt	1cfa4 <__assert_fail@plt+0xb99c>
   1cf50:	umull	r9, r0, r6, r2
   1cf54:	ldr	r7, [sp, #4]
   1cf58:	mla	r0, r6, r3, r0
   1cf5c:	mla	r4, r8, r2, r0
   1cf60:	cmp	r4, #0
   1cf64:	blt	1cfa4 <__assert_fail@plt+0xb99c>
   1cf68:	ldr	r3, [sp, #28]
   1cf6c:	mvn	r0, #0
   1cf70:	mvn	r1, #-2147483648	; 0x80000000
   1cf74:	str	r7, [sp, #4]
   1cf78:	mvn	r8, #0
   1cf7c:	mvn	r7, #-2147483648	; 0x80000000
   1cf80:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1cf84:	ldr	r2, [sp, #24]
   1cf88:	ldr	r3, [sp, #28]
   1cf8c:	subs	r0, r0, r9
   1cf90:	mov	r6, #1
   1cf94:	sbcs	r0, r1, r4
   1cf98:	str	r6, [sp, #8]
   1cf9c:	bge	1cfe0 <__assert_fail@plt+0xb9d8>
   1cfa0:	b	1cffc <__assert_fail@plt+0xb9f4>
   1cfa4:	mov	r0, #0
   1cfa8:	mov	r1, #-2147483648	; 0x80000000
   1cfac:	mov	r2, r9
   1cfb0:	mov	r3, r4
   1cfb4:	str	r7, [sp, #4]
   1cfb8:	bl	1f218 <__assert_fail@plt+0xdc10>
   1cfbc:	ldr	r2, [sp, #24]
   1cfc0:	ldr	r3, [sp, #28]
   1cfc4:	mov	r7, #1
   1cfc8:	mov	r8, #0
   1cfcc:	str	r7, [sp, #8]
   1cfd0:	mov	r7, #-2147483648	; 0x80000000
   1cfd4:	subs	r0, r0, r2
   1cfd8:	sbcs	r0, r1, r3
   1cfdc:	blt	1d030 <__assert_fail@plt+0xba28>
   1cfe0:	umull	r8, r0, r9, r2
   1cfe4:	mla	r0, r9, r3, r0
   1cfe8:	mla	r7, r4, r2, r0
   1cfec:	ldr	r0, [sp, #4]
   1cff0:	cmp	r7, #0
   1cff4:	str	r0, [sp, #8]
   1cff8:	blt	1d030 <__assert_fail@plt+0xba28>
   1cffc:	ldr	r3, [sp, #28]
   1d000:	mvn	r0, #0
   1d004:	mvn	r1, #-2147483648	; 0x80000000
   1d008:	mvn	r4, #0
   1d00c:	mvn	r9, #-2147483648	; 0x80000000
   1d010:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1d014:	ldr	r2, [sp, #24]
   1d018:	ldr	r3, [sp, #28]
   1d01c:	subs	r0, r0, r8
   1d020:	sbcs	r0, r1, r7
   1d024:	bge	1d068 <__assert_fail@plt+0xba60>
   1d028:	mov	r8, #1
   1d02c:	b	1d080 <__assert_fail@plt+0xba78>
   1d030:	mov	r0, #0
   1d034:	mov	r1, #-2147483648	; 0x80000000
   1d038:	mov	r2, r8
   1d03c:	mov	r3, r7
   1d040:	bl	1f218 <__assert_fail@plt+0xdc10>
   1d044:	ldr	r2, [sp, #24]
   1d048:	ldr	r3, [sp, #28]
   1d04c:	subs	r0, r0, r2
   1d050:	sbcs	r0, r1, r3
   1d054:	bge	1d068 <__assert_fail@plt+0xba60>
   1d058:	mov	r8, #1
   1d05c:	mov	r4, #0
   1d060:	mov	r9, #-2147483648	; 0x80000000
   1d064:	b	1d0f8 <__assert_fail@plt+0xbaf0>
   1d068:	umull	r4, r0, r8, r2
   1d06c:	mla	r0, r8, r3, r0
   1d070:	ldr	r8, [sp, #8]
   1d074:	mla	r9, r7, r2, r0
   1d078:	cmp	r9, #0
   1d07c:	blt	1d0f8 <__assert_fail@plt+0xbaf0>
   1d080:	ldr	r3, [sp, #28]
   1d084:	mvn	r0, #0
   1d088:	mvn	r1, #-2147483648	; 0x80000000
   1d08c:	mvn	r6, #0
   1d090:	mvn	r7, #-2147483648	; 0x80000000
   1d094:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1d098:	ldr	r3, [sp, #24]
   1d09c:	ldr	ip, [sp, #28]
   1d0a0:	subs	r0, r0, r4
   1d0a4:	mov	r2, #1
   1d0a8:	sbcs	r0, r1, r9
   1d0ac:	blt	1d0c0 <__assert_fail@plt+0xbab8>
   1d0b0:	umull	r6, r0, r4, r3
   1d0b4:	mov	r2, #0
   1d0b8:	mla	r0, r4, ip, r0
   1d0bc:	mla	r7, r9, r3, r0
   1d0c0:	ldr	r9, [sp, #12]
   1d0c4:	orr	r3, r2, r8
   1d0c8:	ldr	r1, [sp, #20]
   1d0cc:	ldr	r2, [sp, #16]
   1d0d0:	orr	r5, r3, r5
   1d0d4:	add	r0, r1, r2
   1d0d8:	str	r0, [sl]
   1d0dc:	ldrb	r0, [r1, r2]
   1d0e0:	cmp	r0, #0
   1d0e4:	orrne	r5, r5, #2
   1d0e8:	strd	r6, [r9]
   1d0ec:	mov	r0, r5
   1d0f0:	sub	sp, fp, #28
   1d0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0f8:	mov	r0, #0
   1d0fc:	mov	r1, #-2147483648	; 0x80000000
   1d100:	mov	r2, r4
   1d104:	mov	r3, r9
   1d108:	bl	1f218 <__assert_fail@plt+0xdc10>
   1d10c:	ldr	r3, [sp, #24]
   1d110:	ldr	ip, [sp, #28]
   1d114:	mov	r2, #1
   1d118:	mov	r6, #0
   1d11c:	mov	r7, #-2147483648	; 0x80000000
   1d120:	subs	r0, r0, r3
   1d124:	sbcs	r0, r1, ip
   1d128:	bge	1d0b0 <__assert_fail@plt+0xbaa8>
   1d12c:	b	1d0c0 <__assert_fail@plt+0xbab8>
   1d130:	ldr	r6, [sp, #8]
   1d134:	mov	r0, #0
   1d138:	mov	r1, #-2147483648	; 0x80000000
   1d13c:	mov	r3, r9
   1d140:	str	r4, [sp]
   1d144:	mov	r2, r6
   1d148:	bl	1f218 <__assert_fail@plt+0xdc10>
   1d14c:	ldr	r2, [sp, #24]
   1d150:	ldr	r3, [sp, #28]
   1d154:	mov	r7, #1
   1d158:	mov	r8, #-2147483648	; 0x80000000
   1d15c:	subs	r0, r0, r2
   1d160:	sbcs	r0, r1, r3
   1d164:	mov	r0, #0
   1d168:	str	r0, [sp, #4]
   1d16c:	blt	1d1cc <__assert_fail@plt+0xbbc4>
   1d170:	umull	r1, r0, r6, r2
   1d174:	ldr	r7, [sp]
   1d178:	mla	r0, r6, r3, r0
   1d17c:	str	r1, [sp, #4]
   1d180:	mla	r8, r9, r2, r0
   1d184:	cmp	r8, #0
   1d188:	blt	1d1cc <__assert_fail@plt+0xbbc4>
   1d18c:	ldr	r3, [sp, #28]
   1d190:	mvn	r0, #0
   1d194:	mvn	r1, #-2147483648	; 0x80000000
   1d198:	str	r7, [sp]
   1d19c:	mvn	r7, #0
   1d1a0:	mvn	r4, #-2147483648	; 0x80000000
   1d1a4:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1d1a8:	mov	r6, #1
   1d1ac:	ldr	r2, [sp, #24]
   1d1b0:	ldr	r3, [sp, #28]
   1d1b4:	str	r6, [sp, #8]
   1d1b8:	ldr	r6, [sp, #4]
   1d1bc:	subs	r0, r0, r6
   1d1c0:	sbcs	r0, r1, r8
   1d1c4:	bge	1d20c <__assert_fail@plt+0xbc04>
   1d1c8:	b	1d228 <__assert_fail@plt+0xbc20>
   1d1cc:	ldr	r6, [sp, #4]
   1d1d0:	mov	r0, #0
   1d1d4:	mov	r1, #-2147483648	; 0x80000000
   1d1d8:	mov	r3, r8
   1d1dc:	str	r7, [sp]
   1d1e0:	mov	r2, r6
   1d1e4:	bl	1f218 <__assert_fail@plt+0xdc10>
   1d1e8:	ldr	r2, [sp, #24]
   1d1ec:	ldr	r3, [sp, #28]
   1d1f0:	mov	r7, #1
   1d1f4:	mov	r4, #-2147483648	; 0x80000000
   1d1f8:	str	r7, [sp, #8]
   1d1fc:	mov	r7, #0
   1d200:	subs	r0, r0, r2
   1d204:	sbcs	r0, r1, r3
   1d208:	blt	1d260 <__assert_fail@plt+0xbc58>
   1d20c:	umull	r7, r0, r6, r2
   1d210:	mla	r0, r6, r3, r0
   1d214:	mla	r4, r8, r2, r0
   1d218:	ldr	r0, [sp]
   1d21c:	cmp	r4, #0
   1d220:	str	r0, [sp, #8]
   1d224:	blt	1d260 <__assert_fail@plt+0xbc58>
   1d228:	ldr	r3, [sp, #28]
   1d22c:	mvn	r0, #0
   1d230:	mvn	r1, #-2147483648	; 0x80000000
   1d234:	mvn	r9, #0
   1d238:	mvn	r8, #-2147483648	; 0x80000000
   1d23c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1d240:	ldr	r2, [sp, #24]
   1d244:	ldr	r3, [sp, #28]
   1d248:	subs	r0, r0, r7
   1d24c:	sbcs	r0, r1, r4
   1d250:	bge	1d29c <__assert_fail@plt+0xbc94>
   1d254:	mov	r0, #1
   1d258:	str	r0, [sp, #8]
   1d25c:	b	1d2b0 <__assert_fail@plt+0xbca8>
   1d260:	mov	r0, #0
   1d264:	mov	r1, #-2147483648	; 0x80000000
   1d268:	mov	r2, r7
   1d26c:	mov	r3, r4
   1d270:	bl	1f218 <__assert_fail@plt+0xdc10>
   1d274:	ldr	r2, [sp, #24]
   1d278:	ldr	r3, [sp, #28]
   1d27c:	subs	r0, r0, r2
   1d280:	sbcs	r0, r1, r3
   1d284:	bge	1d29c <__assert_fail@plt+0xbc94>
   1d288:	mov	r0, #1
   1d28c:	mov	r9, #0
   1d290:	mov	r8, #-2147483648	; 0x80000000
   1d294:	str	r0, [sp, #8]
   1d298:	b	1d2e8 <__assert_fail@plt+0xbce0>
   1d29c:	umull	r9, r0, r7, r2
   1d2a0:	mla	r0, r7, r3, r0
   1d2a4:	mla	r8, r4, r2, r0
   1d2a8:	cmp	r8, #0
   1d2ac:	blt	1d2e8 <__assert_fail@plt+0xbce0>
   1d2b0:	ldr	r3, [sp, #28]
   1d2b4:	mvn	r0, #0
   1d2b8:	mvn	r1, #-2147483648	; 0x80000000
   1d2bc:	mvn	r4, #0
   1d2c0:	mvn	r7, #-2147483648	; 0x80000000
   1d2c4:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1d2c8:	ldr	r2, [sp, #24]
   1d2cc:	ldr	r3, [sp, #28]
   1d2d0:	subs	r0, r0, r9
   1d2d4:	sbcs	r0, r1, r8
   1d2d8:	bge	1d324 <__assert_fail@plt+0xbd1c>
   1d2dc:	mov	r0, #1
   1d2e0:	str	r0, [sp, #8]
   1d2e4:	b	1d338 <__assert_fail@plt+0xbd30>
   1d2e8:	mov	r0, #0
   1d2ec:	mov	r1, #-2147483648	; 0x80000000
   1d2f0:	mov	r2, r9
   1d2f4:	mov	r3, r8
   1d2f8:	bl	1f218 <__assert_fail@plt+0xdc10>
   1d2fc:	ldr	r2, [sp, #24]
   1d300:	ldr	r3, [sp, #28]
   1d304:	subs	r0, r0, r2
   1d308:	sbcs	r0, r1, r3
   1d30c:	bge	1d324 <__assert_fail@plt+0xbd1c>
   1d310:	mov	r0, #1
   1d314:	mov	r4, #0
   1d318:	mov	r7, #-2147483648	; 0x80000000
   1d31c:	str	r0, [sp, #8]
   1d320:	b	1d370 <__assert_fail@plt+0xbd68>
   1d324:	umull	r4, r0, r9, r2
   1d328:	mla	r0, r9, r3, r0
   1d32c:	mla	r7, r8, r2, r0
   1d330:	cmp	r7, #0
   1d334:	blt	1d370 <__assert_fail@plt+0xbd68>
   1d338:	ldr	r3, [sp, #28]
   1d33c:	mvn	r0, #0
   1d340:	mvn	r1, #-2147483648	; 0x80000000
   1d344:	mvn	r8, #0
   1d348:	mvn	r9, #-2147483648	; 0x80000000
   1d34c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1d350:	ldr	r2, [sp, #24]
   1d354:	ldr	r3, [sp, #28]
   1d358:	subs	r0, r0, r4
   1d35c:	sbcs	r0, r1, r7
   1d360:	bge	1d3ac <__assert_fail@plt+0xbda4>
   1d364:	mov	r0, #1
   1d368:	str	r0, [sp, #8]
   1d36c:	b	1d3c0 <__assert_fail@plt+0xbdb8>
   1d370:	mov	r0, #0
   1d374:	mov	r1, #-2147483648	; 0x80000000
   1d378:	mov	r2, r4
   1d37c:	mov	r3, r7
   1d380:	bl	1f218 <__assert_fail@plt+0xdc10>
   1d384:	ldr	r2, [sp, #24]
   1d388:	ldr	r3, [sp, #28]
   1d38c:	subs	r0, r0, r2
   1d390:	sbcs	r0, r1, r3
   1d394:	bge	1d3ac <__assert_fail@plt+0xbda4>
   1d398:	mov	r0, #1
   1d39c:	mov	r8, #0
   1d3a0:	mov	r9, #-2147483648	; 0x80000000
   1d3a4:	str	r0, [sp, #8]
   1d3a8:	b	1d3fc <__assert_fail@plt+0xbdf4>
   1d3ac:	umull	r8, r0, r4, r2
   1d3b0:	mla	r0, r4, r3, r0
   1d3b4:	mla	r9, r7, r2, r0
   1d3b8:	cmp	r9, #0
   1d3bc:	blt	1d3fc <__assert_fail@plt+0xbdf4>
   1d3c0:	ldr	r3, [sp, #28]
   1d3c4:	mvn	r0, #0
   1d3c8:	mvn	r1, #-2147483648	; 0x80000000
   1d3cc:	mvn	r4, #0
   1d3d0:	mvn	r6, #-2147483648	; 0x80000000
   1d3d4:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1d3d8:	ldr	r2, [sp, #24]
   1d3dc:	ldr	r3, [sp, #28]
   1d3e0:	subs	r0, r0, r8
   1d3e4:	sbcs	r0, r1, r9
   1d3e8:	bge	1d43c <__assert_fail@plt+0xbe34>
   1d3ec:	ldr	r9, [sp, #12]
   1d3f0:	mov	r0, #1
   1d3f4:	str	r0, [sp, #8]
   1d3f8:	b	1d454 <__assert_fail@plt+0xbe4c>
   1d3fc:	mov	r0, #0
   1d400:	mov	r1, #-2147483648	; 0x80000000
   1d404:	mov	r2, r8
   1d408:	mov	r3, r9
   1d40c:	bl	1f218 <__assert_fail@plt+0xdc10>
   1d410:	ldr	r2, [sp, #24]
   1d414:	ldr	r3, [sp, #28]
   1d418:	subs	r0, r0, r2
   1d41c:	sbcs	r0, r1, r3
   1d420:	bge	1d43c <__assert_fail@plt+0xbe34>
   1d424:	ldr	r9, [sp, #12]
   1d428:	mov	r0, #1
   1d42c:	mov	r4, #0
   1d430:	mov	r6, #-2147483648	; 0x80000000
   1d434:	str	r0, [sp, #8]
   1d438:	b	1d4a0 <__assert_fail@plt+0xbe98>
   1d43c:	umull	r4, r0, r8, r2
   1d440:	mla	r0, r8, r3, r0
   1d444:	mla	r6, r9, r2, r0
   1d448:	ldr	r9, [sp, #12]
   1d44c:	cmp	r6, #0
   1d450:	blt	1d4a0 <__assert_fail@plt+0xbe98>
   1d454:	ldr	r3, [sp, #28]
   1d458:	mvn	r0, #0
   1d45c:	mvn	r1, #-2147483648	; 0x80000000
   1d460:	mov	r8, r6
   1d464:	mvn	r6, #0
   1d468:	mvn	r7, #-2147483648	; 0x80000000
   1d46c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1d470:	ldr	r3, [sp, #24]
   1d474:	ldr	ip, [sp, #28]
   1d478:	subs	r0, r0, r4
   1d47c:	mov	r2, #1
   1d480:	sbcs	r0, r1, r8
   1d484:	blt	1d498 <__assert_fail@plt+0xbe90>
   1d488:	umull	r6, r0, r4, r3
   1d48c:	mov	r2, #0
   1d490:	mla	r0, r4, ip, r0
   1d494:	mla	r7, r8, r3, r0
   1d498:	ldr	r0, [sp, #8]
   1d49c:	b	1c5e4 <__assert_fail@plt+0xafdc>
   1d4a0:	mov	r0, #0
   1d4a4:	mov	r1, #-2147483648	; 0x80000000
   1d4a8:	mov	r2, r4
   1d4ac:	mov	r3, r6
   1d4b0:	bl	1f218 <__assert_fail@plt+0xdc10>
   1d4b4:	ldr	r3, [sp, #24]
   1d4b8:	ldr	ip, [sp, #28]
   1d4bc:	mov	r8, r6
   1d4c0:	mov	r2, #1
   1d4c4:	mov	r6, #0
   1d4c8:	mov	r7, #-2147483648	; 0x80000000
   1d4cc:	subs	r0, r0, r3
   1d4d0:	sbcs	r0, r1, ip
   1d4d4:	bge	1d488 <__assert_fail@plt+0xbe80>
   1d4d8:	b	1d498 <__assert_fail@plt+0xbe90>
   1d4dc:	movw	r0, #4197	; 0x1065
   1d4e0:	movw	r1, #4235	; 0x108b
   1d4e4:	movw	r3, #4251	; 0x109b
   1d4e8:	mov	r2, #85	; 0x55
   1d4ec:	movt	r0, #2
   1d4f0:	movt	r1, #2
   1d4f4:	movt	r3, #2
   1d4f8:	bl	11608 <__assert_fail@plt>
   1d4fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d500:	add	fp, sp, #28
   1d504:	sub	sp, sp, #12
   1d508:	cmp	r2, #37	; 0x25
   1d50c:	bcs	1e070 <__assert_fail@plt+0xca68>
   1d510:	ldr	r8, [fp, #8]
   1d514:	mov	r9, r3
   1d518:	mov	r7, r2
   1d51c:	mov	r4, r1
   1d520:	mov	r5, r0
   1d524:	bl	114e8 <__errno_location@plt>
   1d528:	add	sl, sp, #8
   1d52c:	cmp	r4, #0
   1d530:	mov	r6, r0
   1d534:	mov	r0, #0
   1d538:	mov	r2, r7
   1d53c:	movne	sl, r4
   1d540:	str	r0, [r6]
   1d544:	mov	r0, r5
   1d548:	mov	r1, sl
   1d54c:	bl	112fc <strtol@plt>
   1d550:	ldr	r4, [sl]
   1d554:	str	r9, [sp, #4]
   1d558:	cmp	r4, r5
   1d55c:	beq	1d6c0 <__assert_fail@plt+0xc0b8>
   1d560:	mov	r7, r0
   1d564:	ldr	r0, [r6]
   1d568:	cmp	r0, #0
   1d56c:	beq	1d6e0 <__assert_fail@plt+0xc0d8>
   1d570:	mov	r9, #4
   1d574:	cmp	r0, #34	; 0x22
   1d578:	bne	1d6d4 <__assert_fail@plt+0xc0cc>
   1d57c:	mov	r9, #1
   1d580:	cmp	r8, #0
   1d584:	beq	1e044 <__assert_fail@plt+0xca3c>
   1d588:	ldrb	r5, [r4]
   1d58c:	cmp	r5, #0
   1d590:	beq	1e044 <__assert_fail@plt+0xca3c>
   1d594:	mov	r0, r8
   1d598:	mov	r1, r5
   1d59c:	bl	114c4 <strchr@plt>
   1d5a0:	cmp	r0, #0
   1d5a4:	beq	1d8c0 <__assert_fail@plt+0xc2b8>
   1d5a8:	sub	r0, r5, #69	; 0x45
   1d5ac:	mov	ip, #1
   1d5b0:	mov	r6, #1024	; 0x400
   1d5b4:	cmp	r0, #47	; 0x2f
   1d5b8:	bhi	1d71c <__assert_fail@plt+0xc114>
   1d5bc:	add	r1, pc, #0
   1d5c0:	ldr	pc, [r1, r0, lsl #2]
   1d5c4:	andeq	sp, r1, r4, lsl #13
   1d5c8:	andeq	sp, r1, ip, lsl r7
   1d5cc:	andeq	sp, r1, r4, lsl #13
   1d5d0:	andeq	sp, r1, ip, lsl r7
   1d5d4:	andeq	sp, r1, ip, lsl r7
   1d5d8:	andeq	sp, r1, ip, lsl r7
   1d5dc:	andeq	sp, r1, r4, lsl #13
   1d5e0:	andeq	sp, r1, ip, lsl r7
   1d5e4:	andeq	sp, r1, r4, lsl #13
   1d5e8:	andeq	sp, r1, ip, lsl r7
   1d5ec:	andeq	sp, r1, ip, lsl r7
   1d5f0:	andeq	sp, r1, r4, lsl #13
   1d5f4:	andeq	sp, r1, ip, lsl r7
   1d5f8:	andeq	sp, r1, ip, lsl r7
   1d5fc:	andeq	sp, r1, ip, lsl r7
   1d600:	andeq	sp, r1, r4, lsl #13
   1d604:	andeq	sp, r1, ip, lsl r7
   1d608:	andeq	sp, r1, ip, lsl r7
   1d60c:	andeq	sp, r1, ip, lsl r7
   1d610:	andeq	sp, r1, ip, lsl r7
   1d614:	andeq	sp, r1, r4, lsl #13
   1d618:	andeq	sp, r1, r4, lsl #13
   1d61c:	andeq	sp, r1, ip, lsl r7
   1d620:	andeq	sp, r1, ip, lsl r7
   1d624:	andeq	sp, r1, ip, lsl r7
   1d628:	andeq	sp, r1, ip, lsl r7
   1d62c:	andeq	sp, r1, ip, lsl r7
   1d630:	andeq	sp, r1, ip, lsl r7
   1d634:	andeq	sp, r1, ip, lsl r7
   1d638:	andeq	sp, r1, ip, lsl r7
   1d63c:	andeq	sp, r1, ip, lsl r7
   1d640:	andeq	sp, r1, ip, lsl r7
   1d644:	andeq	sp, r1, ip, lsl r7
   1d648:	andeq	sp, r1, ip, lsl r7
   1d64c:	andeq	sp, r1, r4, lsl #13
   1d650:	andeq	sp, r1, ip, lsl r7
   1d654:	andeq	sp, r1, ip, lsl r7
   1d658:	andeq	sp, r1, ip, lsl r7
   1d65c:	andeq	sp, r1, r4, lsl #13
   1d660:	andeq	sp, r1, ip, lsl r7
   1d664:	andeq	sp, r1, r4, lsl #13
   1d668:	andeq	sp, r1, ip, lsl r7
   1d66c:	andeq	sp, r1, ip, lsl r7
   1d670:	andeq	sp, r1, ip, lsl r7
   1d674:	andeq	sp, r1, ip, lsl r7
   1d678:	andeq	sp, r1, ip, lsl r7
   1d67c:	andeq	sp, r1, ip, lsl r7
   1d680:	andeq	sp, r1, r4, lsl #13
   1d684:	mov	r0, r8
   1d688:	mov	r1, #48	; 0x30
   1d68c:	bl	114c4 <strchr@plt>
   1d690:	cmp	r0, #0
   1d694:	beq	1d718 <__assert_fail@plt+0xc110>
   1d698:	ldrb	r0, [r4, #1]
   1d69c:	cmp	r0, #66	; 0x42
   1d6a0:	cmpne	r0, #68	; 0x44
   1d6a4:	bne	1d82c <__assert_fail@plt+0xc224>
   1d6a8:	mov	ip, #2
   1d6ac:	mov	r6, #1000	; 0x3e8
   1d6b0:	sub	r1, r5, #66	; 0x42
   1d6b4:	cmp	r1, #53	; 0x35
   1d6b8:	bls	1d728 <__assert_fail@plt+0xc120>
   1d6bc:	b	1d8c0 <__assert_fail@plt+0xc2b8>
   1d6c0:	cmp	r8, #0
   1d6c4:	mov	r9, #4
   1d6c8:	ldrbne	r1, [r5]
   1d6cc:	cmpne	r1, #0
   1d6d0:	bne	1d6f0 <__assert_fail@plt+0xc0e8>
   1d6d4:	mov	r0, r9
   1d6d8:	sub	sp, fp, #28
   1d6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6e0:	mov	r9, r0
   1d6e4:	cmp	r8, #0
   1d6e8:	bne	1d588 <__assert_fail@plt+0xbf80>
   1d6ec:	b	1e044 <__assert_fail@plt+0xca3c>
   1d6f0:	mov	r0, r8
   1d6f4:	bl	114c4 <strchr@plt>
   1d6f8:	cmp	r0, #0
   1d6fc:	beq	1d6d4 <__assert_fail@plt+0xc0cc>
   1d700:	mov	r7, #1
   1d704:	mov	r9, #0
   1d708:	ldrb	r5, [r4]
   1d70c:	cmp	r5, #0
   1d710:	bne	1d594 <__assert_fail@plt+0xbf8c>
   1d714:	b	1e044 <__assert_fail@plt+0xca3c>
   1d718:	mov	ip, #1
   1d71c:	sub	r1, r5, #66	; 0x42
   1d720:	cmp	r1, #53	; 0x35
   1d724:	bhi	1d8c0 <__assert_fail@plt+0xc2b8>
   1d728:	add	r2, pc, #4
   1d72c:	mov	r0, #0
   1d730:	ldr	pc, [r2, r1, lsl #2]
   1d734:	strdeq	sp, [r1], -r8
   1d738:	andeq	sp, r1, r0, asr #17
   1d73c:	andeq	sp, r1, r0, asr #17
   1d740:	andeq	sp, r1, ip, lsl #18
   1d744:	andeq	sp, r1, r0, asr #17
   1d748:	andeq	sp, r1, ip, lsl #16
   1d74c:	andeq	sp, r1, r0, asr #17
   1d750:	andeq	sp, r1, r0, asr #17
   1d754:	andeq	sp, r1, r0, asr #17
   1d758:	andeq	sp, r1, r4, asr r8
   1d75c:	andeq	sp, r1, r0, asr #17
   1d760:	andeq	sp, r1, r0, ror r8
   1d764:	andeq	sp, r1, r0, asr #17
   1d768:	andeq	sp, r1, r0, asr #17
   1d76c:	andeq	sp, r1, ip, lsr #18
   1d770:	andeq	sp, r1, r0, asr #17
   1d774:	andeq	sp, r1, r0, asr #17
   1d778:	andeq	sp, r1, r0, asr #17
   1d77c:	muleq	r1, r0, r8
   1d780:	andeq	sp, r1, r0, asr #17
   1d784:	andeq	sp, r1, r0, asr #17
   1d788:	andeq	sp, r1, r0, asr #17
   1d78c:	andeq	sp, r1, r0, asr #17
   1d790:	andeq	sp, r1, ip, asr #18
   1d794:	ldrdeq	sp, [r1], -r8
   1d798:	andeq	sp, r1, r0, asr #17
   1d79c:	andeq	sp, r1, r0, asr #17
   1d7a0:	andeq	sp, r1, r0, asr #17
   1d7a4:	andeq	sp, r1, r0, asr #17
   1d7a8:	andeq	sp, r1, r0, asr #17
   1d7ac:	andeq	sp, r1, r0, asr #17
   1d7b0:	andeq	sp, r1, r0, asr #17
   1d7b4:	andeq	sp, r1, ip, ror #18
   1d7b8:	andeq	lr, r1, ip, lsr #32
   1d7bc:	andeq	sp, r1, r0, asr #17
   1d7c0:	andeq	sp, r1, r0, asr #17
   1d7c4:	andeq	sp, r1, r0, asr #17
   1d7c8:	andeq	sp, r1, ip, lsl #16
   1d7cc:	andeq	sp, r1, r0, asr #17
   1d7d0:	andeq	sp, r1, r0, asr #17
   1d7d4:	andeq	sp, r1, r0, asr #17
   1d7d8:	andeq	sp, r1, r4, asr r8
   1d7dc:	andeq	sp, r1, r0, asr #17
   1d7e0:	andeq	sp, r1, r0, ror r8
   1d7e4:	andeq	sp, r1, r0, asr #17
   1d7e8:	andeq	sp, r1, r0, asr #17
   1d7ec:	andeq	sp, r1, r0, asr #17
   1d7f0:	andeq	sp, r1, r0, asr #17
   1d7f4:	andeq	sp, r1, r0, asr #17
   1d7f8:	andeq	sp, r1, r0, asr #17
   1d7fc:	muleq	r1, r0, r8
   1d800:	andeq	sp, r1, r0, asr #17
   1d804:	andeq	sp, r1, r0, asr #17
   1d808:	andeq	sp, r1, ip, lsl #19
   1d80c:	cmn	r7, #1
   1d810:	ble	1d9a0 <__assert_fail@plt+0xc398>
   1d814:	mvn	r2, #-2147483648	; 0x80000000
   1d818:	mov	r3, #1
   1d81c:	udiv	r0, r2, r6
   1d820:	cmp	r0, r7
   1d824:	bge	1d9b8 <__assert_fail@plt+0xc3b0>
   1d828:	b	1da78 <__assert_fail@plt+0xc470>
   1d82c:	cmp	r0, #105	; 0x69
   1d830:	bne	1d8b0 <__assert_fail@plt+0xc2a8>
   1d834:	ldrb	r0, [r4, #2]
   1d838:	mov	ip, #1
   1d83c:	cmp	r0, #66	; 0x42
   1d840:	movweq	ip, #3
   1d844:	sub	r1, r5, #66	; 0x42
   1d848:	cmp	r1, #53	; 0x35
   1d84c:	bls	1d728 <__assert_fail@plt+0xc120>
   1d850:	b	1d8c0 <__assert_fail@plt+0xc2b8>
   1d854:	cmn	r7, #1
   1d858:	ble	1d9cc <__assert_fail@plt+0xc3c4>
   1d85c:	mvn	r1, #-2147483648	; 0x80000000
   1d860:	udiv	r1, r1, r6
   1d864:	cmp	r1, r7
   1d868:	bge	1d9e0 <__assert_fail@plt+0xc3d8>
   1d86c:	b	1dc48 <__assert_fail@plt+0xc640>
   1d870:	cmn	r7, #1
   1d874:	ble	1d9e8 <__assert_fail@plt+0xc3e0>
   1d878:	mvn	r1, #-2147483648	; 0x80000000
   1d87c:	mov	r0, #1
   1d880:	udiv	r2, r1, r6
   1d884:	cmp	r2, r7
   1d888:	bge	1da00 <__assert_fail@plt+0xc3f8>
   1d88c:	b	1dab4 <__assert_fail@plt+0xc4ac>
   1d890:	cmn	r7, #1
   1d894:	ble	1da14 <__assert_fail@plt+0xc40c>
   1d898:	mvn	r0, #-2147483648	; 0x80000000
   1d89c:	mov	r1, #1
   1d8a0:	udiv	r2, r0, r6
   1d8a4:	cmp	r2, r7
   1d8a8:	bge	1da2c <__assert_fail@plt+0xc424>
   1d8ac:	b	1da3c <__assert_fail@plt+0xc434>
   1d8b0:	mov	ip, #1
   1d8b4:	sub	r1, r5, #66	; 0x42
   1d8b8:	cmp	r1, #53	; 0x35
   1d8bc:	bls	1d728 <__assert_fail@plt+0xc120>
   1d8c0:	ldr	r0, [sp, #4]
   1d8c4:	orr	r9, r9, #2
   1d8c8:	str	r7, [r0]
   1d8cc:	mov	r0, r9
   1d8d0:	sub	sp, fp, #28
   1d8d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8d8:	cmp	r7, #0
   1d8dc:	blt	1daec <__assert_fail@plt+0xc4e4>
   1d8e0:	mvn	r0, #-2147483648	; 0x80000000
   1d8e4:	mov	r3, #1
   1d8e8:	udiv	r1, r0, r6
   1d8ec:	cmp	r1, r7
   1d8f0:	bge	1db08 <__assert_fail@plt+0xc500>
   1d8f4:	b	1db18 <__assert_fail@plt+0xc510>
   1d8f8:	cmn	r7, #1
   1d8fc:	ble	1db30 <__assert_fail@plt+0xc528>
   1d900:	cmp	r7, #2097152	; 0x200000
   1d904:	blt	1db44 <__assert_fail@plt+0xc53c>
   1d908:	b	1dc48 <__assert_fail@plt+0xc640>
   1d90c:	cmp	r7, #0
   1d910:	blt	1db4c <__assert_fail@plt+0xc544>
   1d914:	mvn	r0, #-2147483648	; 0x80000000
   1d918:	mov	r3, #1
   1d91c:	udiv	r1, r0, r6
   1d920:	cmp	r1, r7
   1d924:	bge	1db68 <__assert_fail@plt+0xc560>
   1d928:	b	1db78 <__assert_fail@plt+0xc570>
   1d92c:	cmp	r7, #0
   1d930:	blt	1db90 <__assert_fail@plt+0xc588>
   1d934:	mvn	r0, #-2147483648	; 0x80000000
   1d938:	mov	r3, #1
   1d93c:	udiv	r1, r0, r6
   1d940:	cmp	r1, r7
   1d944:	bge	1dbac <__assert_fail@plt+0xc5a4>
   1d948:	b	1dbbc <__assert_fail@plt+0xc5b4>
   1d94c:	cmp	r7, #0
   1d950:	blt	1dbd4 <__assert_fail@plt+0xc5cc>
   1d954:	mvn	r0, #-2147483648	; 0x80000000
   1d958:	mov	r3, #1
   1d95c:	udiv	r1, r0, r6
   1d960:	cmp	r1, r7
   1d964:	bge	1dbf0 <__assert_fail@plt+0xc5e8>
   1d968:	b	1dc00 <__assert_fail@plt+0xc5f8>
   1d96c:	cmn	r7, #1
   1d970:	ble	1dc18 <__assert_fail@plt+0xc610>
   1d974:	movw	r1, #65535	; 0xffff
   1d978:	movt	r1, #31
   1d97c:	add	r1, r1, #2097152	; 0x200000
   1d980:	cmp	r7, r1
   1d984:	ble	1dc2c <__assert_fail@plt+0xc624>
   1d988:	b	1dc48 <__assert_fail@plt+0xc640>
   1d98c:	cmn	r7, #1
   1d990:	ble	1dc34 <__assert_fail@plt+0xc62c>
   1d994:	cmp	r7, #1073741824	; 0x40000000
   1d998:	bge	1dc48 <__assert_fail@plt+0xc640>
   1d99c:	b	1dc60 <__assert_fail@plt+0xc658>
   1d9a0:	beq	1d9b8 <__assert_fail@plt+0xc3b0>
   1d9a4:	mov	r2, #-2147483648	; 0x80000000
   1d9a8:	mov	r3, #1
   1d9ac:	sdiv	r0, r2, r7
   1d9b0:	cmp	r0, r6
   1d9b4:	blt	1da90 <__assert_fail@plt+0xc488>
   1d9b8:	mul	r2, r7, r6
   1d9bc:	mov	r3, #0
   1d9c0:	cmp	r2, #0
   1d9c4:	bge	1da78 <__assert_fail@plt+0xc470>
   1d9c8:	b	1da90 <__assert_fail@plt+0xc488>
   1d9cc:	beq	1d9e0 <__assert_fail@plt+0xc3d8>
   1d9d0:	mov	r1, #-2147483648	; 0x80000000
   1d9d4:	sdiv	r1, r1, r7
   1d9d8:	cmp	r1, r6
   1d9dc:	blt	1dc48 <__assert_fail@plt+0xc640>
   1d9e0:	mul	r7, r7, r6
   1d9e4:	b	1e02c <__assert_fail@plt+0xca24>
   1d9e8:	beq	1da00 <__assert_fail@plt+0xc3f8>
   1d9ec:	mov	r1, #-2147483648	; 0x80000000
   1d9f0:	mov	r0, #1
   1d9f4:	sdiv	r2, r1, r7
   1d9f8:	cmp	r2, r6
   1d9fc:	blt	1dacc <__assert_fail@plt+0xc4c4>
   1da00:	mul	r1, r7, r6
   1da04:	mov	r0, #0
   1da08:	cmp	r1, #0
   1da0c:	bge	1dab4 <__assert_fail@plt+0xc4ac>
   1da10:	b	1dacc <__assert_fail@plt+0xc4c4>
   1da14:	beq	1da2c <__assert_fail@plt+0xc424>
   1da18:	mov	r0, #-2147483648	; 0x80000000
   1da1c:	mov	r1, #1
   1da20:	sdiv	r2, r0, r7
   1da24:	cmp	r2, r6
   1da28:	blt	1da54 <__assert_fail@plt+0xc44c>
   1da2c:	mul	r0, r7, r6
   1da30:	mov	r1, #0
   1da34:	cmp	r0, #0
   1da38:	blt	1da54 <__assert_fail@plt+0xc44c>
   1da3c:	mvn	r2, #-2147483648	; 0x80000000
   1da40:	mov	r3, #1
   1da44:	udiv	r7, r2, r6
   1da48:	cmp	r7, r0
   1da4c:	blt	1da78 <__assert_fail@plt+0xc470>
   1da50:	b	1da68 <__assert_fail@plt+0xc460>
   1da54:	mov	r2, #-2147483648	; 0x80000000
   1da58:	mov	r3, #1
   1da5c:	sdiv	r7, r2, r0
   1da60:	cmp	r7, r6
   1da64:	blt	1da90 <__assert_fail@plt+0xc488>
   1da68:	mul	r2, r0, r6
   1da6c:	mov	r3, r1
   1da70:	cmp	r2, #0
   1da74:	blt	1da90 <__assert_fail@plt+0xc488>
   1da78:	mvn	r1, #-2147483648	; 0x80000000
   1da7c:	mov	r0, #1
   1da80:	udiv	r7, r1, r6
   1da84:	cmp	r7, r2
   1da88:	blt	1dab4 <__assert_fail@plt+0xc4ac>
   1da8c:	b	1daa4 <__assert_fail@plt+0xc49c>
   1da90:	mov	r1, #-2147483648	; 0x80000000
   1da94:	mov	r0, #1
   1da98:	sdiv	r7, r1, r2
   1da9c:	cmp	r7, r6
   1daa0:	blt	1dacc <__assert_fail@plt+0xc4c4>
   1daa4:	mul	r1, r2, r6
   1daa8:	mov	r0, r3
   1daac:	cmp	r1, #0
   1dab0:	blt	1dacc <__assert_fail@plt+0xc4c4>
   1dab4:	mvn	r7, #-2147483648	; 0x80000000
   1dab8:	mov	r2, #1
   1dabc:	udiv	r3, r7, r6
   1dac0:	cmp	r3, r1
   1dac4:	blt	1e028 <__assert_fail@plt+0xca20>
   1dac8:	b	1dae0 <__assert_fail@plt+0xc4d8>
   1dacc:	mov	r7, #-2147483648	; 0x80000000
   1dad0:	mov	r2, #1
   1dad4:	sdiv	r3, r7, r1
   1dad8:	cmp	r3, r6
   1dadc:	blt	1e028 <__assert_fail@plt+0xca20>
   1dae0:	mov	r2, #0
   1dae4:	mul	r7, r1, r6
   1dae8:	b	1e028 <__assert_fail@plt+0xca20>
   1daec:	cmn	r7, #1
   1daf0:	beq	1db08 <__assert_fail@plt+0xc500>
   1daf4:	mov	r0, #-2147483648	; 0x80000000
   1daf8:	mov	r3, #1
   1dafc:	sdiv	r1, r0, r7
   1db00:	cmp	r1, r6
   1db04:	blt	1dc68 <__assert_fail@plt+0xc660>
   1db08:	mul	r0, r7, r6
   1db0c:	mov	r3, #0
   1db10:	cmp	r0, #0
   1db14:	blt	1dc68 <__assert_fail@plt+0xc660>
   1db18:	mvn	r1, #-2147483648	; 0x80000000
   1db1c:	mov	r2, #1
   1db20:	udiv	r7, r1, r6
   1db24:	cmp	r7, r0
   1db28:	bge	1dc7c <__assert_fail@plt+0xc674>
   1db2c:	b	1dc8c <__assert_fail@plt+0xc684>
   1db30:	beq	1db44 <__assert_fail@plt+0xc53c>
   1db34:	mov	r1, #-2147483648	; 0x80000000
   1db38:	sdiv	r1, r1, r7
   1db3c:	cmp	r1, #1024	; 0x400
   1db40:	blt	1dc48 <__assert_fail@plt+0xc640>
   1db44:	lsl	r7, r7, #10
   1db48:	b	1e02c <__assert_fail@plt+0xca24>
   1db4c:	cmn	r7, #1
   1db50:	beq	1db68 <__assert_fail@plt+0xc560>
   1db54:	mov	r0, #-2147483648	; 0x80000000
   1db58:	mov	r3, #1
   1db5c:	sdiv	r1, r0, r7
   1db60:	cmp	r1, r6
   1db64:	blt	1dd48 <__assert_fail@plt+0xc740>
   1db68:	mul	r0, r7, r6
   1db6c:	mov	r3, #0
   1db70:	cmp	r0, #0
   1db74:	blt	1dd48 <__assert_fail@plt+0xc740>
   1db78:	mvn	r1, #-2147483648	; 0x80000000
   1db7c:	mov	r2, #1
   1db80:	udiv	r7, r1, r6
   1db84:	cmp	r7, r0
   1db88:	bge	1dd5c <__assert_fail@plt+0xc754>
   1db8c:	b	1dd6c <__assert_fail@plt+0xc764>
   1db90:	cmn	r7, #1
   1db94:	beq	1dbac <__assert_fail@plt+0xc5a4>
   1db98:	mov	r0, #-2147483648	; 0x80000000
   1db9c:	mov	r3, #1
   1dba0:	sdiv	r1, r0, r7
   1dba4:	cmp	r1, r6
   1dba8:	blt	1de28 <__assert_fail@plt+0xc820>
   1dbac:	mul	r0, r7, r6
   1dbb0:	mov	r3, #0
   1dbb4:	cmp	r0, #0
   1dbb8:	blt	1de28 <__assert_fail@plt+0xc820>
   1dbbc:	mvn	r1, #-2147483648	; 0x80000000
   1dbc0:	mov	r2, #1
   1dbc4:	udiv	r7, r1, r6
   1dbc8:	cmp	r7, r0
   1dbcc:	bge	1de3c <__assert_fail@plt+0xc834>
   1dbd0:	b	1de4c <__assert_fail@plt+0xc844>
   1dbd4:	cmn	r7, #1
   1dbd8:	beq	1dbf0 <__assert_fail@plt+0xc5e8>
   1dbdc:	mov	r0, #-2147483648	; 0x80000000
   1dbe0:	mov	r3, #1
   1dbe4:	sdiv	r1, r0, r7
   1dbe8:	cmp	r1, r6
   1dbec:	blt	1de8c <__assert_fail@plt+0xc884>
   1dbf0:	mul	r0, r7, r6
   1dbf4:	mov	r3, #0
   1dbf8:	cmp	r0, #0
   1dbfc:	blt	1de8c <__assert_fail@plt+0xc884>
   1dc00:	mvn	r1, #-2147483648	; 0x80000000
   1dc04:	mov	r2, #1
   1dc08:	udiv	r7, r1, r6
   1dc0c:	cmp	r7, r0
   1dc10:	bge	1dea0 <__assert_fail@plt+0xc898>
   1dc14:	b	1deb0 <__assert_fail@plt+0xc8a8>
   1dc18:	beq	1dc2c <__assert_fail@plt+0xc624>
   1dc1c:	mov	r1, #-2147483648	; 0x80000000
   1dc20:	sdiv	r1, r1, r7
   1dc24:	cmp	r1, #512	; 0x200
   1dc28:	blt	1dc48 <__assert_fail@plt+0xc640>
   1dc2c:	lsl	r7, r7, #9
   1dc30:	b	1e02c <__assert_fail@plt+0xca24>
   1dc34:	beq	1dc60 <__assert_fail@plt+0xc658>
   1dc38:	mov	r1, #-2147483648	; 0x80000000
   1dc3c:	sdiv	r1, r1, r7
   1dc40:	cmp	r1, #2
   1dc44:	bge	1dc60 <__assert_fail@plt+0xc658>
   1dc48:	mvn	r1, #-2147483648	; 0x80000000
   1dc4c:	cmp	r7, #0
   1dc50:	mov	r0, #1
   1dc54:	movlt	r1, #-2147483648	; 0x80000000
   1dc58:	mov	r7, r1
   1dc5c:	b	1e02c <__assert_fail@plt+0xca24>
   1dc60:	lsl	r7, r7, #1
   1dc64:	b	1e02c <__assert_fail@plt+0xca24>
   1dc68:	mov	r1, #-2147483648	; 0x80000000
   1dc6c:	mov	r2, #1
   1dc70:	sdiv	r7, r1, r0
   1dc74:	cmp	r7, r6
   1dc78:	blt	1dca4 <__assert_fail@plt+0xc69c>
   1dc7c:	mul	r1, r0, r6
   1dc80:	mov	r2, r3
   1dc84:	cmp	r1, #0
   1dc88:	blt	1dca4 <__assert_fail@plt+0xc69c>
   1dc8c:	mvn	r3, #-2147483648	; 0x80000000
   1dc90:	mov	r0, #1
   1dc94:	udiv	r7, r3, r6
   1dc98:	cmp	r7, r1
   1dc9c:	bge	1dcb8 <__assert_fail@plt+0xc6b0>
   1dca0:	b	1dcc8 <__assert_fail@plt+0xc6c0>
   1dca4:	mov	r3, #-2147483648	; 0x80000000
   1dca8:	mov	r0, #1
   1dcac:	sdiv	r7, r3, r1
   1dcb0:	cmp	r7, r6
   1dcb4:	blt	1dcf0 <__assert_fail@plt+0xc6e8>
   1dcb8:	mul	r3, r1, r6
   1dcbc:	mov	r0, r2
   1dcc0:	cmp	r3, #0
   1dcc4:	blt	1dcf0 <__assert_fail@plt+0xc6e8>
   1dcc8:	mvn	r1, #-2147483648	; 0x80000000
   1dccc:	udiv	r2, r1, r6
   1dcd0:	cmp	r2, r3
   1dcd4:	bge	1dd08 <__assert_fail@plt+0xc700>
   1dcd8:	mov	r0, #1
   1dcdc:	mvn	r2, #-2147483648	; 0x80000000
   1dce0:	udiv	r3, r2, r6
   1dce4:	cmp	r3, r1
   1dce8:	blt	1ddb8 <__assert_fail@plt+0xc7b0>
   1dcec:	b	1dd38 <__assert_fail@plt+0xc730>
   1dcf0:	mov	r1, #-2147483648	; 0x80000000
   1dcf4:	sdiv	r2, r1, r3
   1dcf8:	cmp	r2, r6
   1dcfc:	bge	1dd08 <__assert_fail@plt+0xc700>
   1dd00:	mov	r0, #1
   1dd04:	b	1dd28 <__assert_fail@plt+0xc720>
   1dd08:	mul	r1, r3, r6
   1dd0c:	cmp	r1, #0
   1dd10:	blt	1dd28 <__assert_fail@plt+0xc720>
   1dd14:	mvn	r2, #-2147483648	; 0x80000000
   1dd18:	udiv	r3, r2, r6
   1dd1c:	cmp	r3, r1
   1dd20:	bge	1dd38 <__assert_fail@plt+0xc730>
   1dd24:	b	1ddb8 <__assert_fail@plt+0xc7b0>
   1dd28:	mov	r2, #-2147483648	; 0x80000000
   1dd2c:	sdiv	r3, r2, r1
   1dd30:	cmp	r3, r6
   1dd34:	blt	1dde0 <__assert_fail@plt+0xc7d8>
   1dd38:	mul	r2, r1, r6
   1dd3c:	cmp	r2, #0
   1dd40:	bge	1ddf4 <__assert_fail@plt+0xc7ec>
   1dd44:	b	1de08 <__assert_fail@plt+0xc800>
   1dd48:	mov	r1, #-2147483648	; 0x80000000
   1dd4c:	mov	r2, #1
   1dd50:	sdiv	r7, r1, r0
   1dd54:	cmp	r7, r6
   1dd58:	blt	1dd84 <__assert_fail@plt+0xc77c>
   1dd5c:	mul	r1, r0, r6
   1dd60:	mov	r2, r3
   1dd64:	cmp	r1, #0
   1dd68:	blt	1dd84 <__assert_fail@plt+0xc77c>
   1dd6c:	mvn	r3, #-2147483648	; 0x80000000
   1dd70:	mov	r0, #1
   1dd74:	udiv	r7, r3, r6
   1dd78:	cmp	r7, r1
   1dd7c:	bge	1dd98 <__assert_fail@plt+0xc790>
   1dd80:	b	1dda8 <__assert_fail@plt+0xc7a0>
   1dd84:	mov	r3, #-2147483648	; 0x80000000
   1dd88:	mov	r0, #1
   1dd8c:	sdiv	r7, r3, r1
   1dd90:	cmp	r7, r6
   1dd94:	blt	1ddd0 <__assert_fail@plt+0xc7c8>
   1dd98:	mul	r3, r1, r6
   1dd9c:	mov	r0, r2
   1dda0:	cmp	r3, #0
   1dda4:	blt	1ddd0 <__assert_fail@plt+0xc7c8>
   1dda8:	mvn	r2, #-2147483648	; 0x80000000
   1ddac:	udiv	r1, r2, r6
   1ddb0:	cmp	r1, r3
   1ddb4:	bge	1dde8 <__assert_fail@plt+0xc7e0>
   1ddb8:	mov	r0, #1
   1ddbc:	mvn	r1, #-2147483648	; 0x80000000
   1ddc0:	udiv	r3, r1, r6
   1ddc4:	cmp	r3, r2
   1ddc8:	bge	1de18 <__assert_fail@plt+0xc810>
   1ddcc:	b	1dfe0 <__assert_fail@plt+0xc9d8>
   1ddd0:	mov	r2, #-2147483648	; 0x80000000
   1ddd4:	sdiv	r1, r2, r3
   1ddd8:	cmp	r1, r6
   1dddc:	bge	1dde8 <__assert_fail@plt+0xc7e0>
   1dde0:	mov	r0, #1
   1dde4:	b	1de08 <__assert_fail@plt+0xc800>
   1dde8:	mul	r2, r3, r6
   1ddec:	cmp	r2, #0
   1ddf0:	blt	1de08 <__assert_fail@plt+0xc800>
   1ddf4:	mvn	r1, #-2147483648	; 0x80000000
   1ddf8:	udiv	r3, r1, r6
   1ddfc:	cmp	r3, r2
   1de00:	blt	1dfe0 <__assert_fail@plt+0xc9d8>
   1de04:	b	1de18 <__assert_fail@plt+0xc810>
   1de08:	mov	r1, #-2147483648	; 0x80000000
   1de0c:	sdiv	r3, r1, r2
   1de10:	cmp	r3, r6
   1de14:	blt	1dff8 <__assert_fail@plt+0xc9f0>
   1de18:	mul	r1, r2, r6
   1de1c:	cmp	r1, #0
   1de20:	bge	1e00c <__assert_fail@plt+0xca04>
   1de24:	b	1e058 <__assert_fail@plt+0xca50>
   1de28:	mov	r1, #-2147483648	; 0x80000000
   1de2c:	mov	r2, #1
   1de30:	sdiv	r7, r1, r0
   1de34:	cmp	r7, r6
   1de38:	blt	1de64 <__assert_fail@plt+0xc85c>
   1de3c:	mul	r1, r0, r6
   1de40:	mov	r2, r3
   1de44:	cmp	r1, #0
   1de48:	blt	1de64 <__assert_fail@plt+0xc85c>
   1de4c:	mvn	r3, #-2147483648	; 0x80000000
   1de50:	mov	r0, #1
   1de54:	udiv	r7, r3, r6
   1de58:	cmp	r7, r1
   1de5c:	bge	1de78 <__assert_fail@plt+0xc870>
   1de60:	b	1dfd0 <__assert_fail@plt+0xc9c8>
   1de64:	mov	r3, #-2147483648	; 0x80000000
   1de68:	mov	r0, #1
   1de6c:	sdiv	r7, r3, r1
   1de70:	cmp	r7, r6
   1de74:	blt	1dfe8 <__assert_fail@plt+0xc9e0>
   1de78:	mul	r3, r1, r6
   1de7c:	mov	r0, r2
   1de80:	cmp	r3, #0
   1de84:	bge	1dfd0 <__assert_fail@plt+0xc9c8>
   1de88:	b	1dfe8 <__assert_fail@plt+0xc9e0>
   1de8c:	mov	r1, #-2147483648	; 0x80000000
   1de90:	mov	r2, #1
   1de94:	sdiv	r7, r1, r0
   1de98:	cmp	r7, r6
   1de9c:	blt	1dec8 <__assert_fail@plt+0xc8c0>
   1dea0:	mul	r1, r0, r6
   1dea4:	mov	r2, r3
   1dea8:	cmp	r1, #0
   1deac:	blt	1dec8 <__assert_fail@plt+0xc8c0>
   1deb0:	mvn	r3, #-2147483648	; 0x80000000
   1deb4:	mov	r0, #1
   1deb8:	udiv	r7, r3, r6
   1debc:	cmp	r7, r1
   1dec0:	bge	1dedc <__assert_fail@plt+0xc8d4>
   1dec4:	b	1deec <__assert_fail@plt+0xc8e4>
   1dec8:	mov	r3, #-2147483648	; 0x80000000
   1decc:	mov	r0, #1
   1ded0:	sdiv	r7, r3, r1
   1ded4:	cmp	r7, r6
   1ded8:	blt	1df14 <__assert_fail@plt+0xc90c>
   1dedc:	mul	r3, r1, r6
   1dee0:	mov	r0, r2
   1dee4:	cmp	r3, #0
   1dee8:	blt	1df14 <__assert_fail@plt+0xc90c>
   1deec:	mvn	r1, #-2147483648	; 0x80000000
   1def0:	udiv	r2, r1, r6
   1def4:	cmp	r2, r3
   1def8:	bge	1df2c <__assert_fail@plt+0xc924>
   1defc:	mov	r0, #1
   1df00:	mvn	r2, #-2147483648	; 0x80000000
   1df04:	udiv	r3, r2, r6
   1df08:	cmp	r3, r1
   1df0c:	blt	1df48 <__assert_fail@plt+0xc940>
   1df10:	b	1df78 <__assert_fail@plt+0xc970>
   1df14:	mov	r1, #-2147483648	; 0x80000000
   1df18:	sdiv	r2, r1, r3
   1df1c:	cmp	r2, r6
   1df20:	bge	1df2c <__assert_fail@plt+0xc924>
   1df24:	mov	r0, #1
   1df28:	b	1df60 <__assert_fail@plt+0xc958>
   1df2c:	mul	r1, r3, r6
   1df30:	cmp	r1, #0
   1df34:	blt	1df60 <__assert_fail@plt+0xc958>
   1df38:	mvn	r2, #-2147483648	; 0x80000000
   1df3c:	udiv	r3, r2, r6
   1df40:	cmp	r3, r1
   1df44:	bge	1df78 <__assert_fail@plt+0xc970>
   1df48:	mov	r0, #1
   1df4c:	mvn	r3, #-2147483648	; 0x80000000
   1df50:	udiv	r1, r3, r6
   1df54:	cmp	r1, r2
   1df58:	bge	1dfc4 <__assert_fail@plt+0xc9bc>
   1df5c:	b	1df94 <__assert_fail@plt+0xc98c>
   1df60:	mov	r2, #-2147483648	; 0x80000000
   1df64:	sdiv	r3, r2, r1
   1df68:	cmp	r3, r6
   1df6c:	bge	1df78 <__assert_fail@plt+0xc970>
   1df70:	mov	r0, #1
   1df74:	b	1dfac <__assert_fail@plt+0xc9a4>
   1df78:	mul	r2, r1, r6
   1df7c:	cmp	r2, #0
   1df80:	blt	1dfac <__assert_fail@plt+0xc9a4>
   1df84:	mvn	r3, #-2147483648	; 0x80000000
   1df88:	udiv	r1, r3, r6
   1df8c:	cmp	r1, r2
   1df90:	bge	1dfc4 <__assert_fail@plt+0xc9bc>
   1df94:	mov	r0, #1
   1df98:	mvn	r1, #-2147483648	; 0x80000000
   1df9c:	udiv	r2, r1, r6
   1dfa0:	cmp	r2, r3
   1dfa4:	bge	1e000 <__assert_fail@plt+0xc9f8>
   1dfa8:	b	1dfe0 <__assert_fail@plt+0xc9d8>
   1dfac:	mov	r3, #-2147483648	; 0x80000000
   1dfb0:	sdiv	r1, r3, r2
   1dfb4:	cmp	r1, r6
   1dfb8:	bge	1dfc4 <__assert_fail@plt+0xc9bc>
   1dfbc:	mov	r0, #1
   1dfc0:	b	1dfe8 <__assert_fail@plt+0xc9e0>
   1dfc4:	mul	r3, r2, r6
   1dfc8:	cmp	r3, #0
   1dfcc:	blt	1dfe8 <__assert_fail@plt+0xc9e0>
   1dfd0:	mvn	r1, #-2147483648	; 0x80000000
   1dfd4:	udiv	r2, r1, r6
   1dfd8:	cmp	r2, r3
   1dfdc:	bge	1e000 <__assert_fail@plt+0xc9f8>
   1dfe0:	mov	r0, #1
   1dfe4:	b	1e00c <__assert_fail@plt+0xca04>
   1dfe8:	mov	r1, #-2147483648	; 0x80000000
   1dfec:	sdiv	r2, r1, r3
   1dff0:	cmp	r2, r6
   1dff4:	bge	1e000 <__assert_fail@plt+0xc9f8>
   1dff8:	mov	r0, #1
   1dffc:	b	1e058 <__assert_fail@plt+0xca50>
   1e000:	mul	r1, r3, r6
   1e004:	cmp	r1, #0
   1e008:	blt	1e058 <__assert_fail@plt+0xca50>
   1e00c:	mvn	r7, #-2147483648	; 0x80000000
   1e010:	mov	r2, #1
   1e014:	udiv	r3, r7, r6
   1e018:	cmp	r3, r1
   1e01c:	blt	1e028 <__assert_fail@plt+0xca20>
   1e020:	mul	r7, r1, r6
   1e024:	mov	r2, #0
   1e028:	orr	r0, r2, r0
   1e02c:	add	r1, r4, ip
   1e030:	orr	r9, r0, r9
   1e034:	str	r1, [sl]
   1e038:	ldrb	r1, [r4, ip]
   1e03c:	cmp	r1, #0
   1e040:	orrne	r9, r9, #2
   1e044:	ldr	r0, [sp, #4]
   1e048:	str	r7, [r0]
   1e04c:	mov	r0, r9
   1e050:	sub	sp, fp, #28
   1e054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e058:	mov	r7, #-2147483648	; 0x80000000
   1e05c:	mov	r2, #1
   1e060:	sdiv	r3, r7, r1
   1e064:	cmp	r3, r6
   1e068:	bge	1e020 <__assert_fail@plt+0xca18>
   1e06c:	b	1e028 <__assert_fail@plt+0xca20>
   1e070:	movw	r0, #4197	; 0x1065
   1e074:	movw	r1, #4237	; 0x108d
   1e078:	movw	r3, #4329	; 0x10e9
   1e07c:	mov	r2, #85	; 0x55
   1e080:	movt	r0, #2
   1e084:	movt	r1, #2
   1e088:	movt	r3, #2
   1e08c:	bl	11608 <__assert_fail@plt>
   1e090:	push	{fp, lr}
   1e094:	mov	fp, sp
   1e098:	sub	sp, sp, #8
   1e09c:	movw	ip, #8556	; 0x216c
   1e0a0:	movt	ip, #3
   1e0a4:	ldr	ip, [ip]
   1e0a8:	str	ip, [sp, #4]
   1e0ac:	ldr	ip, [fp, #8]
   1e0b0:	str	ip, [sp]
   1e0b4:	bl	1e0bc <__assert_fail@plt+0xcab4>
   1e0b8:	bl	115f0 <abort@plt>
   1e0bc:	push	{r4, r5, r6, r7, fp, lr}
   1e0c0:	add	fp, sp, #16
   1e0c4:	sub	sp, sp, #16
   1e0c8:	sub	r0, r0, #1
   1e0cc:	cmp	r0, #4
   1e0d0:	bcs	1e150 <__assert_fail@plt+0xcb48>
   1e0d4:	mov	r5, r1
   1e0d8:	movw	r1, #4496	; 0x1190
   1e0dc:	ldr	r4, [fp, #12]
   1e0e0:	ldr	r6, [fp, #8]
   1e0e4:	movt	r1, #2
   1e0e8:	cmn	r5, #1
   1e0ec:	ldr	r1, [r1, r0, lsl #2]
   1e0f0:	ble	1e104 <__assert_fail@plt+0xcafc>
   1e0f4:	ldr	r7, [r3, r5, lsl #4]
   1e0f8:	movw	r5, #4400	; 0x1130
   1e0fc:	movt	r5, #2
   1e100:	b	1e120 <__assert_fail@plt+0xcb18>
   1e104:	mov	r0, #0
   1e108:	add	r7, sp, #14
   1e10c:	strb	r0, [sp, #15]
   1e110:	movw	r0, #4400	; 0x1130
   1e114:	strb	r2, [sp, #14]
   1e118:	movt	r0, #2
   1e11c:	sub	r5, r0, r5
   1e120:	mov	r0, #0
   1e124:	mov	r2, #5
   1e128:	bl	1138c <dcgettext@plt>
   1e12c:	mov	r2, r0
   1e130:	mov	r0, r4
   1e134:	mov	r1, #0
   1e138:	mov	r3, r5
   1e13c:	str	r7, [sp]
   1e140:	str	r6, [sp, #4]
   1e144:	bl	11428 <error@plt>
   1e148:	sub	sp, fp, #16
   1e14c:	pop	{r4, r5, r6, r7, fp, pc}
   1e150:	bl	115f0 <abort@plt>
   1e154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e158:	add	fp, sp, #28
   1e15c:	sub	sp, sp, #44	; 0x2c
   1e160:	cmp	r2, #37	; 0x25
   1e164:	bcs	1ede8 <__assert_fail@plt+0xd7e0>
   1e168:	ldr	sl, [fp, #8]
   1e16c:	mov	r6, r2
   1e170:	mov	r7, r1
   1e174:	mov	r4, r0
   1e178:	str	r3, [sp, #36]	; 0x24
   1e17c:	bl	114e8 <__errno_location@plt>
   1e180:	mov	r5, r0
   1e184:	mov	r0, #0
   1e188:	str	r0, [r5]
   1e18c:	bl	114a0 <__ctype_b_loc@plt>
   1e190:	ldr	r1, [r0]
   1e194:	mov	r2, r4
   1e198:	ldrb	r0, [r2], #1
   1e19c:	add	r3, r1, r0, lsl #1
   1e1a0:	ldrb	r3, [r3, #1]
   1e1a4:	tst	r3, #32
   1e1a8:	bne	1e198 <__assert_fail@plt+0xcb90>
   1e1ac:	sub	r9, fp, #32
   1e1b0:	cmp	r7, #0
   1e1b4:	mov	r8, #4
   1e1b8:	movne	r9, r7
   1e1bc:	cmp	r0, #45	; 0x2d
   1e1c0:	beq	1e580 <__assert_fail@plt+0xcf78>
   1e1c4:	mov	r0, r4
   1e1c8:	mov	r1, r9
   1e1cc:	mov	r2, r6
   1e1d0:	mov	r3, #0
   1e1d4:	bl	11368 <__strtoull_internal@plt>
   1e1d8:	mov	r7, r1
   1e1dc:	ldr	r1, [r9]
   1e1e0:	cmp	r1, r4
   1e1e4:	beq	1e21c <__assert_fail@plt+0xcc14>
   1e1e8:	mov	r6, r0
   1e1ec:	ldr	r0, [r5]
   1e1f0:	cmp	r0, #0
   1e1f4:	beq	1e538 <__assert_fail@plt+0xcf30>
   1e1f8:	cmp	r0, #34	; 0x22
   1e1fc:	bne	1e580 <__assert_fail@plt+0xcf78>
   1e200:	mov	r8, #1
   1e204:	cmp	sl, #0
   1e208:	beq	1edd4 <__assert_fail@plt+0xd7cc>
   1e20c:	ldrb	r4, [r1]
   1e210:	cmp	r4, #0
   1e214:	bne	1e260 <__assert_fail@plt+0xcc58>
   1e218:	b	1edd4 <__assert_fail@plt+0xd7cc>
   1e21c:	cmp	sl, #0
   1e220:	beq	1e580 <__assert_fail@plt+0xcf78>
   1e224:	mov	r5, r1
   1e228:	ldrb	r1, [r4]
   1e22c:	cmp	r1, #0
   1e230:	beq	1e580 <__assert_fail@plt+0xcf78>
   1e234:	mov	r0, sl
   1e238:	bl	114c4 <strchr@plt>
   1e23c:	cmp	r0, #0
   1e240:	beq	1e580 <__assert_fail@plt+0xcf78>
   1e244:	mov	r1, r5
   1e248:	mov	r8, #0
   1e24c:	mov	r6, #1
   1e250:	mov	r7, #0
   1e254:	ldrb	r4, [r1]
   1e258:	cmp	r4, #0
   1e25c:	beq	1edd4 <__assert_fail@plt+0xd7cc>
   1e260:	str	r1, [sp, #32]
   1e264:	mov	r0, sl
   1e268:	mov	r1, r4
   1e26c:	bl	114c4 <strchr@plt>
   1e270:	cmp	r0, #0
   1e274:	beq	1e574 <__assert_fail@plt+0xcf6c>
   1e278:	sub	r0, r4, #69	; 0x45
   1e27c:	mov	r1, #1
   1e280:	mov	r3, #0
   1e284:	mov	r5, #1024	; 0x400
   1e288:	cmp	r0, #47	; 0x2f
   1e28c:	str	r1, [sp, #28]
   1e290:	bhi	1e394 <__assert_fail@plt+0xcd8c>
   1e294:	add	r1, pc, #0
   1e298:	ldr	pc, [r1, r0, lsl #2]
   1e29c:	andeq	lr, r1, ip, asr r3
   1e2a0:	muleq	r1, r4, r3
   1e2a4:	andeq	lr, r1, ip, asr r3
   1e2a8:	muleq	r1, r4, r3
   1e2ac:	muleq	r1, r4, r3
   1e2b0:	muleq	r1, r4, r3
   1e2b4:	andeq	lr, r1, ip, asr r3
   1e2b8:	muleq	r1, r4, r3
   1e2bc:	andeq	lr, r1, ip, asr r3
   1e2c0:	muleq	r1, r4, r3
   1e2c4:	muleq	r1, r4, r3
   1e2c8:	andeq	lr, r1, ip, asr r3
   1e2cc:	muleq	r1, r4, r3
   1e2d0:	muleq	r1, r4, r3
   1e2d4:	muleq	r1, r4, r3
   1e2d8:	andeq	lr, r1, ip, asr r3
   1e2dc:	muleq	r1, r4, r3
   1e2e0:	muleq	r1, r4, r3
   1e2e4:	muleq	r1, r4, r3
   1e2e8:	muleq	r1, r4, r3
   1e2ec:	andeq	lr, r1, ip, asr r3
   1e2f0:	andeq	lr, r1, ip, asr r3
   1e2f4:	muleq	r1, r4, r3
   1e2f8:	muleq	r1, r4, r3
   1e2fc:	muleq	r1, r4, r3
   1e300:	muleq	r1, r4, r3
   1e304:	muleq	r1, r4, r3
   1e308:	muleq	r1, r4, r3
   1e30c:	muleq	r1, r4, r3
   1e310:	muleq	r1, r4, r3
   1e314:	muleq	r1, r4, r3
   1e318:	muleq	r1, r4, r3
   1e31c:	muleq	r1, r4, r3
   1e320:	muleq	r1, r4, r3
   1e324:	andeq	lr, r1, ip, asr r3
   1e328:	muleq	r1, r4, r3
   1e32c:	muleq	r1, r4, r3
   1e330:	muleq	r1, r4, r3
   1e334:	andeq	lr, r1, ip, asr r3
   1e338:	muleq	r1, r4, r3
   1e33c:	andeq	lr, r1, ip, asr r3
   1e340:	muleq	r1, r4, r3
   1e344:	muleq	r1, r4, r3
   1e348:	muleq	r1, r4, r3
   1e34c:	muleq	r1, r4, r3
   1e350:	muleq	r1, r4, r3
   1e354:	muleq	r1, r4, r3
   1e358:	andeq	lr, r1, ip, asr r3
   1e35c:	mov	r0, sl
   1e360:	mov	r1, #48	; 0x30
   1e364:	bl	114c4 <strchr@plt>
   1e368:	cmp	r0, #0
   1e36c:	beq	1e390 <__assert_fail@plt+0xcd88>
   1e370:	ldr	r1, [sp, #32]
   1e374:	ldrb	r0, [r1, #1]
   1e378:	cmp	r0, #66	; 0x42
   1e37c:	cmpne	r0, #68	; 0x44
   1e380:	bne	1e548 <__assert_fail@plt+0xcf40>
   1e384:	mov	r5, #1000	; 0x3e8
   1e388:	mov	r0, #2
   1e38c:	str	r0, [sp, #28]
   1e390:	mov	r3, #0
   1e394:	sub	r0, r4, #66	; 0x42
   1e398:	cmp	r0, #53	; 0x35
   1e39c:	bhi	1e574 <__assert_fail@plt+0xcf6c>
   1e3a0:	add	r1, pc, #0
   1e3a4:	ldr	pc, [r1, r0, lsl #2]
   1e3a8:	andeq	lr, r1, r4, ror #17
   1e3ac:	andeq	lr, r1, r4, ror r5
   1e3b0:	andeq	lr, r1, r4, ror r5
   1e3b4:	andeq	lr, r1, ip, lsl #18
   1e3b8:	andeq	lr, r1, r4, ror r5
   1e3bc:	andeq	lr, r1, r0, lsl #9
   1e3c0:	andeq	lr, r1, r4, ror r5
   1e3c4:	andeq	lr, r1, r4, ror r5
   1e3c8:	andeq	lr, r1, r4, ror r5
   1e3cc:	andeq	lr, r1, ip, lsl #11
   1e3d0:	andeq	lr, r1, r4, ror r5
   1e3d4:	ldrdeq	lr, [r1], -r4
   1e3d8:	andeq	lr, r1, r4, ror r5
   1e3dc:	andeq	lr, r1, r4, ror r5
   1e3e0:	andeq	lr, r1, r0, ror #20
   1e3e4:	andeq	lr, r1, r4, ror r5
   1e3e8:	andeq	lr, r1, r4, ror r5
   1e3ec:	andeq	lr, r1, r4, ror r5
   1e3f0:	andeq	lr, r1, r0, ror #12
   1e3f4:	andeq	lr, r1, r4, ror r5
   1e3f8:	andeq	lr, r1, r4, ror r5
   1e3fc:	andeq	lr, r1, r4, ror r5
   1e400:	andeq	lr, r1, r4, ror r5
   1e404:	andeq	lr, r1, r8, lsl #23
   1e408:	andeq	lr, r1, r8, asr #14
   1e40c:	andeq	lr, r1, r4, ror r5
   1e410:	andeq	lr, r1, r4, ror r5
   1e414:	andeq	lr, r1, r4, ror r5
   1e418:	andeq	lr, r1, r4, ror r5
   1e41c:	andeq	lr, r1, r4, ror r5
   1e420:	andeq	lr, r1, r4, ror r5
   1e424:	andeq	lr, r1, r4, ror r5
   1e428:	andeq	lr, r1, ip, asr sp
   1e42c:			; <UNDEFINED> instruction: 0x0001edb4
   1e430:	andeq	lr, r1, r4, ror r5
   1e434:	andeq	lr, r1, r4, ror r5
   1e438:	andeq	lr, r1, r4, ror r5
   1e43c:	andeq	lr, r1, r0, lsl #9
   1e440:	andeq	lr, r1, r4, ror r5
   1e444:	andeq	lr, r1, r4, ror r5
   1e448:	andeq	lr, r1, r4, ror r5
   1e44c:	andeq	lr, r1, ip, lsl #11
   1e450:	andeq	lr, r1, r4, ror r5
   1e454:	ldrdeq	lr, [r1], -r4
   1e458:	andeq	lr, r1, r4, ror r5
   1e45c:	andeq	lr, r1, r4, ror r5
   1e460:	andeq	lr, r1, r4, ror r5
   1e464:	andeq	lr, r1, r4, ror r5
   1e468:	andeq	lr, r1, r4, ror r5
   1e46c:	andeq	lr, r1, r4, ror r5
   1e470:	andeq	lr, r1, r0, ror #12
   1e474:	andeq	lr, r1, r4, ror r5
   1e478:	andeq	lr, r1, r4, ror r5
   1e47c:	muleq	r1, r0, sp
   1e480:	mvn	r0, #0
   1e484:	mvn	r1, #0
   1e488:	mov	r2, r5
   1e48c:	mov	sl, r3
   1e490:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1e494:	subs	r3, r0, r6
   1e498:	mov	lr, #0
   1e49c:	umull	r4, r2, r6, r5
   1e4a0:	str	r1, [sp, #20]
   1e4a4:	sbcs	r3, r1, r7
   1e4a8:	mla	ip, r6, sl, r2
   1e4ac:	mov	r2, r1
   1e4b0:	movwcc	lr, #1
   1e4b4:	mla	r7, r7, r5, ip
   1e4b8:	mov	r2, #0
   1e4bc:	cmp	lr, #0
   1e4c0:	mvnne	r4, #0
   1e4c4:	mvnne	r7, #0
   1e4c8:	subs	r6, r0, r4
   1e4cc:	sbcs	r6, r1, r7
   1e4d0:	movwcc	r2, #1
   1e4d4:	umull	r3, r6, r4, r5
   1e4d8:	cmp	r2, #0
   1e4dc:	str	r6, [sp, #16]
   1e4e0:	mvnne	r3, #0
   1e4e4:	cmp	r2, #0
   1e4e8:	umull	r6, ip, r3, r5
   1e4ec:	mla	r1, r3, sl, ip
   1e4f0:	ldr	ip, [sp, #16]
   1e4f4:	str	r1, [sp, #12]
   1e4f8:	mla	r4, r4, sl, ip
   1e4fc:	mla	r4, r7, r5, r4
   1e500:	ldr	r7, [sp, #12]
   1e504:	mvnne	r4, #0
   1e508:	subs	r0, r0, r3
   1e50c:	ldr	r0, [sp, #20]
   1e510:	mla	r7, r4, r5, r7
   1e514:	sbcs	r0, r0, r4
   1e518:	mov	r0, #0
   1e51c:	movwcc	r0, #1
   1e520:	cmp	r0, #0
   1e524:	mov	r1, r0
   1e528:	orr	r0, lr, r2
   1e52c:	mvnne	r7, #0
   1e530:	mvnne	r6, #0
   1e534:	b	1eb80 <__assert_fail@plt+0xd578>
   1e538:	mov	r8, r0
   1e53c:	cmp	sl, #0
   1e540:	bne	1e20c <__assert_fail@plt+0xcc04>
   1e544:	b	1edd4 <__assert_fail@plt+0xd7cc>
   1e548:	cmp	r0, #105	; 0x69
   1e54c:	mov	r3, #0
   1e550:	bne	1e394 <__assert_fail@plt+0xcd8c>
   1e554:	ldrb	r0, [r1, #2]
   1e558:	mov	r1, #1
   1e55c:	cmp	r0, #66	; 0x42
   1e560:	movweq	r1, #3
   1e564:	str	r1, [sp, #28]
   1e568:	sub	r0, r4, #66	; 0x42
   1e56c:	cmp	r0, #53	; 0x35
   1e570:	bls	1e3a0 <__assert_fail@plt+0xcd98>
   1e574:	ldr	r0, [sp, #36]	; 0x24
   1e578:	orr	r8, r8, #2
   1e57c:	strd	r6, [r0]
   1e580:	mov	r0, r8
   1e584:	sub	sp, fp, #28
   1e588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e58c:	mvn	r0, #0
   1e590:	mvn	r1, #0
   1e594:	mov	r2, r5
   1e598:	mov	r4, r3
   1e59c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1e5a0:	subs	r0, r0, r6
   1e5a4:	mov	r2, #0
   1e5a8:	sbcs	r0, r1, r7
   1e5ac:	movwcc	r2, #1
   1e5b0:	umull	r0, r1, r6, r5
   1e5b4:	mla	r1, r6, r4, r1
   1e5b8:	cmp	r2, #0
   1e5bc:	mov	r3, r2
   1e5c0:	mla	r7, r7, r5, r1
   1e5c4:	mvnne	r0, #0
   1e5c8:	mvnne	r7, #0
   1e5cc:	mov	r6, r0
   1e5d0:	b	1edb4 <__assert_fail@plt+0xd7ac>
   1e5d4:	mvn	r0, #0
   1e5d8:	mvn	r1, #0
   1e5dc:	mov	r2, r5
   1e5e0:	str	r3, [sp, #24]
   1e5e4:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1e5e8:	subs	r3, r0, r6
   1e5ec:	mov	ip, r0
   1e5f0:	umull	r4, r0, r6, r5
   1e5f4:	mov	sl, #0
   1e5f8:	sbcs	r3, r1, r7
   1e5fc:	str	r0, [sp, #20]
   1e600:	ldr	r0, [sp, #24]
   1e604:	mov	r3, #0
   1e608:	movwcc	r3, #1
   1e60c:	cmp	r3, #0
   1e610:	mvnne	r4, #0
   1e614:	cmp	r3, #0
   1e618:	umull	lr, r2, r4, r5
   1e61c:	mla	r2, r4, r0, r2
   1e620:	str	r2, [sp, #16]
   1e624:	ldr	r2, [sp, #20]
   1e628:	mla	r6, r6, r0, r2
   1e62c:	ldr	r0, [sp, #16]
   1e630:	mla	r6, r7, r5, r6
   1e634:	mvnne	r6, #0
   1e638:	mla	r7, r6, r5, r0
   1e63c:	subs	r0, ip, r4
   1e640:	sbcs	r0, r1, r6
   1e644:	movwcc	sl, #1
   1e648:	cmp	sl, #0
   1e64c:	orr	r3, r3, sl
   1e650:	mvnne	lr, #0
   1e654:	mvnne	r7, #0
   1e658:	mov	r6, lr
   1e65c:	b	1edb4 <__assert_fail@plt+0xd7ac>
   1e660:	mvn	r0, #0
   1e664:	mvn	r1, #0
   1e668:	mov	r2, r5
   1e66c:	mov	sl, r3
   1e670:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1e674:	subs	r3, r0, r6
   1e678:	mov	ip, r1
   1e67c:	umull	r2, lr, r6, r5
   1e680:	str	r0, [sp, #20]
   1e684:	sbcs	r3, r1, r7
   1e688:	mov	r1, #0
   1e68c:	mla	r6, r6, sl, lr
   1e690:	mov	lr, #0
   1e694:	str	ip, [sp, #16]
   1e698:	movwcc	r1, #1
   1e69c:	mla	r7, r7, r5, r6
   1e6a0:	cmp	r1, #0
   1e6a4:	mvnne	r2, #0
   1e6a8:	cmp	r1, #0
   1e6ac:	umull	r3, r4, r2, r5
   1e6b0:	mvnne	r7, #0
   1e6b4:	mla	r4, r2, sl, r4
   1e6b8:	subs	r2, r0, r2
   1e6bc:	sbcs	r2, ip, r7
   1e6c0:	mla	r4, r7, r5, r4
   1e6c4:	movwcc	lr, #1
   1e6c8:	mov	r2, #0
   1e6cc:	cmp	lr, #0
   1e6d0:	mvnne	r3, #0
   1e6d4:	mvnne	r4, #0
   1e6d8:	subs	r7, r0, r3
   1e6dc:	mov	r0, r5
   1e6e0:	sbcs	r7, ip, r4
   1e6e4:	movwcc	r2, #1
   1e6e8:	umull	r5, r7, r3, r5
   1e6ec:	cmp	r2, #0
   1e6f0:	mla	r3, r3, sl, r7
   1e6f4:	mvnne	r5, #0
   1e6f8:	mla	r3, r4, r0, r3
   1e6fc:	cmp	r2, #0
   1e700:	umull	r6, ip, r5, r0
   1e704:	mvnne	r3, #0
   1e708:	mla	ip, r5, sl, ip
   1e70c:	mla	r7, r3, r0, ip
   1e710:	ldr	r0, [sp, #20]
   1e714:	subs	r0, r0, r5
   1e718:	ldr	r0, [sp, #16]
   1e71c:	sbcs	r0, r0, r3
   1e720:	mov	r0, #0
   1e724:	movwcc	r0, #1
   1e728:	cmp	r0, #0
   1e72c:	mov	r3, r0
   1e730:	orr	r0, r1, lr
   1e734:	orr	r0, r0, r2
   1e738:	mvnne	r7, #0
   1e73c:	mvnne	r6, #0
   1e740:	orr	r3, r0, r3
   1e744:	b	1edb4 <__assert_fail@plt+0xd7ac>
   1e748:	mvn	r0, #0
   1e74c:	mvn	r1, #0
   1e750:	mov	r2, r5
   1e754:	mov	r4, r3
   1e758:	str	r3, [sp, #24]
   1e75c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1e760:	umull	r3, r2, r6, r5
   1e764:	mla	r2, r6, r4, r2
   1e768:	subs	r6, r0, r6
   1e76c:	sbcs	r6, r1, r7
   1e770:	mla	r2, r7, r5, r2
   1e774:	mov	r7, #0
   1e778:	mov	r6, #0
   1e77c:	movwcc	r6, #1
   1e780:	cmp	r6, #0
   1e784:	str	r6, [sp, #20]
   1e788:	mvnne	r3, #0
   1e78c:	mvnne	r2, #0
   1e790:	subs	r4, r0, r3
   1e794:	umull	r6, ip, r3, r5
   1e798:	sbcs	r4, r1, r2
   1e79c:	ldr	r4, [sp, #24]
   1e7a0:	movwcc	r7, #1
   1e7a4:	cmp	r7, #0
   1e7a8:	mov	lr, r7
   1e7ac:	str	r7, [sp, #16]
   1e7b0:	mvnne	r6, #0
   1e7b4:	cmp	lr, #0
   1e7b8:	mov	lr, #0
   1e7bc:	umull	sl, r7, r6, r5
   1e7c0:	mla	r3, r3, r4, ip
   1e7c4:	mla	r7, r6, r4, r7
   1e7c8:	mov	r4, r0
   1e7cc:	mla	r2, r2, r5, r3
   1e7d0:	mvnne	r2, #0
   1e7d4:	subs	r3, r0, r6
   1e7d8:	mov	r0, #0
   1e7dc:	mla	r7, r2, r5, r7
   1e7e0:	sbcs	r2, r1, r2
   1e7e4:	mov	r3, r4
   1e7e8:	movwcc	r0, #1
   1e7ec:	str	r3, [sp, #4]
   1e7f0:	cmp	r0, #0
   1e7f4:	str	r0, [sp, #12]
   1e7f8:	mov	r0, r1
   1e7fc:	mvnne	sl, #0
   1e800:	mvnne	r7, #0
   1e804:	str	r0, [sp, #8]
   1e808:	subs	r2, r4, sl
   1e80c:	ldr	r4, [sp, #24]
   1e810:	sbcs	r2, r1, r7
   1e814:	movwcc	lr, #1
   1e818:	umull	r6, r2, sl, r5
   1e81c:	cmp	lr, #0
   1e820:	mvnne	r6, #0
   1e824:	mla	r2, sl, r4, r2
   1e828:	cmp	lr, #0
   1e82c:	umull	r1, ip, r6, r5
   1e830:	mla	r2, r7, r5, r2
   1e834:	mla	ip, r6, r4, ip
   1e838:	mvnne	r2, #0
   1e83c:	subs	r6, r3, r6
   1e840:	mla	r7, r2, r5, ip
   1e844:	sbcs	r2, r0, r2
   1e848:	mov	ip, #0
   1e84c:	movwcc	ip, #1
   1e850:	mov	r2, #0
   1e854:	cmp	ip, #0
   1e858:	mvnne	r1, #0
   1e85c:	mvnne	r7, #0
   1e860:	subs	r6, r3, r1
   1e864:	ldr	r3, [sp, #24]
   1e868:	sbcs	r6, r0, r7
   1e86c:	umull	r0, sl, r1, r5
   1e870:	movwcc	r2, #1
   1e874:	cmp	r2, #0
   1e878:	mvnne	r0, #0
   1e87c:	mla	r1, r1, r3, sl
   1e880:	cmp	r2, #0
   1e884:	umull	r6, r4, r0, r5
   1e888:	mla	r1, r7, r5, r1
   1e88c:	mla	r4, r0, r3, r4
   1e890:	ldr	r3, [sp, #4]
   1e894:	mvnne	r1, #0
   1e898:	mla	r7, r1, r5, r4
   1e89c:	ldr	r5, [sp, #16]
   1e8a0:	subs	r0, r3, r0
   1e8a4:	ldr	r0, [sp, #8]
   1e8a8:	sbcs	r0, r0, r1
   1e8ac:	mov	r0, #0
   1e8b0:	movwcc	r0, #1
   1e8b4:	cmp	r0, #0
   1e8b8:	mov	r1, r0
   1e8bc:	ldr	r0, [sp, #20]
   1e8c0:	mvnne	r7, #0
   1e8c4:	mvnne	r6, #0
   1e8c8:	orr	r0, r0, r5
   1e8cc:	ldr	r5, [sp, #12]
   1e8d0:	orr	r0, r0, r5
   1e8d4:	orr	r0, r0, lr
   1e8d8:	orr	r0, r0, ip
   1e8dc:	orr	r0, r0, r2
   1e8e0:	b	1ed50 <__assert_fail@plt+0xd748>
   1e8e4:	mov	r1, #0
   1e8e8:	lsl	r2, r7, #10
   1e8ec:	lsl	r0, r6, #10
   1e8f0:	lsr	r3, r7, #22
   1e8f4:	cmp	r1, r7, lsr #22
   1e8f8:	orr	r2, r2, r6, lsr #22
   1e8fc:	mvnne	r0, #0
   1e900:	movwne	r3, #1
   1e904:	cmp	r1, r7, lsr #22
   1e908:	b	1ed80 <__assert_fail@plt+0xd778>
   1e90c:	mvn	r0, #0
   1e910:	mvn	r1, #0
   1e914:	mov	r2, r5
   1e918:	mov	sl, r3
   1e91c:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1e920:	subs	r2, r0, r6
   1e924:	mov	ip, r0
   1e928:	mov	r0, #0
   1e92c:	sbcs	r2, r1, r7
   1e930:	movwcc	r0, #1
   1e934:	umull	r4, r2, r6, r5
   1e938:	cmp	r0, #0
   1e93c:	mla	r2, r6, sl, r2
   1e940:	str	r0, [sp, #20]
   1e944:	mvnne	r4, #0
   1e948:	cmp	r0, #0
   1e94c:	mla	r2, r7, r5, r2
   1e950:	mov	r0, #0
   1e954:	umull	lr, r3, r4, r5
   1e958:	mvnne	r2, #0
   1e95c:	mla	r3, r4, sl, r3
   1e960:	mla	r6, r2, r5, r3
   1e964:	subs	r3, ip, r4
   1e968:	sbcs	r2, r1, r2
   1e96c:	mov	r3, r1
   1e970:	movwcc	r0, #1
   1e974:	str	r3, [sp, #8]
   1e978:	cmp	r0, #0
   1e97c:	str	r0, [sp, #16]
   1e980:	mov	r0, ip
   1e984:	mvnne	lr, #0
   1e988:	mvnne	r6, #0
   1e98c:	str	r0, [sp, #12]
   1e990:	subs	r2, ip, lr
   1e994:	umull	r7, r4, lr, r5
   1e998:	sbcs	r2, r1, r6
   1e99c:	mla	r4, lr, sl, r4
   1e9a0:	mov	r2, #0
   1e9a4:	mla	r6, r6, r5, r4
   1e9a8:	mov	r4, #0
   1e9ac:	movwcc	r2, #1
   1e9b0:	cmp	r2, #0
   1e9b4:	mvnne	r7, #0
   1e9b8:	cmp	r2, #0
   1e9bc:	umull	r1, ip, r7, r5
   1e9c0:	mvnne	r6, #0
   1e9c4:	mla	ip, r7, sl, ip
   1e9c8:	subs	r7, r0, r7
   1e9cc:	mla	lr, r6, r5, ip
   1e9d0:	sbcs	r7, r3, r6
   1e9d4:	mov	ip, #0
   1e9d8:	movwcc	ip, #1
   1e9dc:	cmp	ip, #0
   1e9e0:	mvnne	r1, #0
   1e9e4:	mvnne	lr, #0
   1e9e8:	subs	r7, r0, r1
   1e9ec:	sbcs	r7, r3, lr
   1e9f0:	movwcc	r4, #1
   1e9f4:	umull	r0, r7, r1, r5
   1e9f8:	cmp	r4, #0
   1e9fc:	mla	r1, r1, sl, r7
   1ea00:	mvnne	r0, #0
   1ea04:	mla	r1, lr, r5, r1
   1ea08:	cmp	r4, #0
   1ea0c:	umull	r6, r3, r0, r5
   1ea10:	mvnne	r1, #0
   1ea14:	mla	r3, r0, sl, r3
   1ea18:	mla	r7, r1, r5, r3
   1ea1c:	ldr	r3, [sp, #12]
   1ea20:	subs	r0, r3, r0
   1ea24:	ldr	r3, [sp, #16]
   1ea28:	ldr	r0, [sp, #8]
   1ea2c:	sbcs	r0, r0, r1
   1ea30:	mov	r0, #0
   1ea34:	movwcc	r0, #1
   1ea38:	cmp	r0, #0
   1ea3c:	mov	r1, r0
   1ea40:	ldr	r0, [sp, #20]
   1ea44:	mvnne	r7, #0
   1ea48:	mvnne	r6, #0
   1ea4c:	orr	r0, r0, r3
   1ea50:	orr	r0, r0, r2
   1ea54:	orr	r0, r0, ip
   1ea58:	orr	r0, r0, r4
   1ea5c:	b	1eb80 <__assert_fail@plt+0xd578>
   1ea60:	mvn	r0, #0
   1ea64:	mvn	r1, #0
   1ea68:	mov	r2, r5
   1ea6c:	mov	sl, r3
   1ea70:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1ea74:	umull	r3, r2, r6, r5
   1ea78:	mov	lr, r1
   1ea7c:	mov	r1, r0
   1ea80:	mla	r2, r6, sl, r2
   1ea84:	subs	r6, r0, r6
   1ea88:	mov	r0, #0
   1ea8c:	sbcs	r6, lr, r7
   1ea90:	mla	r2, r7, r5, r2
   1ea94:	movwcc	r0, #1
   1ea98:	cmp	r0, #0
   1ea9c:	str	r0, [sp, #20]
   1eaa0:	mov	r0, r1
   1eaa4:	mvnne	r3, #0
   1eaa8:	mvnne	r2, #0
   1eaac:	str	r0, [sp, #16]
   1eab0:	subs	r4, r1, r3
   1eab4:	umull	r7, ip, r3, r5
   1eab8:	sbcs	r4, lr, r2
   1eabc:	mla	r3, r3, sl, ip
   1eac0:	mov	ip, #0
   1eac4:	mov	r4, #0
   1eac8:	mla	r2, r2, r5, r3
   1eacc:	movwcc	r4, #1
   1ead0:	cmp	r4, #0
   1ead4:	mvnne	r7, #0
   1ead8:	cmp	r4, #0
   1eadc:	umull	r1, r6, r7, r5
   1eae0:	mvnne	r2, #0
   1eae4:	mla	r6, r7, sl, r6
   1eae8:	mla	r3, r2, r5, r6
   1eaec:	subs	r6, r0, r7
   1eaf0:	sbcs	r2, lr, r2
   1eaf4:	movwcc	ip, #1
   1eaf8:	mov	r2, #0
   1eafc:	cmp	ip, #0
   1eb00:	mvnne	r1, #0
   1eb04:	mvnne	r3, #0
   1eb08:	subs	r6, r0, r1
   1eb0c:	sbcs	r6, lr, r3
   1eb10:	movwcc	r2, #1
   1eb14:	umull	r0, r6, r1, r5
   1eb18:	cmp	r2, #0
   1eb1c:	str	r6, [sp, #12]
   1eb20:	mvnne	r0, #0
   1eb24:	cmp	r2, #0
   1eb28:	umull	r6, r7, r0, r5
   1eb2c:	mla	r7, r0, sl, r7
   1eb30:	str	r7, [sp, #8]
   1eb34:	ldr	r7, [sp, #12]
   1eb38:	mla	r1, r1, sl, r7
   1eb3c:	mla	r1, r3, r5, r1
   1eb40:	ldr	r3, [sp, #8]
   1eb44:	mvnne	r1, #0
   1eb48:	mla	r7, r1, r5, r3
   1eb4c:	ldr	r3, [sp, #16]
   1eb50:	subs	r0, r3, r0
   1eb54:	sbcs	r0, lr, r1
   1eb58:	mov	r0, #0
   1eb5c:	movwcc	r0, #1
   1eb60:	cmp	r0, #0
   1eb64:	mov	r1, r0
   1eb68:	ldr	r0, [sp, #20]
   1eb6c:	mvnne	r7, #0
   1eb70:	mvnne	r6, #0
   1eb74:	orr	r0, r0, r4
   1eb78:	orr	r0, r0, ip
   1eb7c:	orr	r0, r0, r2
   1eb80:	orr	r3, r0, r1
   1eb84:	b	1edb4 <__assert_fail@plt+0xd7ac>
   1eb88:	mvn	r0, #0
   1eb8c:	mvn	r1, #0
   1eb90:	mov	r2, r5
   1eb94:	mov	sl, r3
   1eb98:	bl	1f2ec <__assert_fail@plt+0xdce4>
   1eb9c:	mov	ip, r1
   1eba0:	subs	r1, r0, r6
   1eba4:	umull	r3, lr, r6, r5
   1eba8:	mov	r2, r5
   1ebac:	sbcs	r1, ip, r7
   1ebb0:	mla	r6, r6, sl, lr
   1ebb4:	str	ip, [sp, #4]
   1ebb8:	mov	r1, #0
   1ebbc:	mla	r7, r7, r2, r6
   1ebc0:	movwcc	r1, #1
   1ebc4:	cmp	r1, #0
   1ebc8:	str	r1, [sp, #20]
   1ebcc:	mvnne	r3, #0
   1ebd0:	cmp	r1, #0
   1ebd4:	mov	r1, r0
   1ebd8:	umull	r4, r5, r3, r5
   1ebdc:	mvnne	r7, #0
   1ebe0:	mov	lr, r1
   1ebe4:	mla	r5, r3, sl, r5
   1ebe8:	subs	r3, r0, r3
   1ebec:	sbcs	r0, ip, r7
   1ebf0:	mla	r5, r7, r2, r5
   1ebf4:	mov	r0, #0
   1ebf8:	movwcc	r0, #1
   1ebfc:	cmp	r0, #0
   1ec00:	str	r0, [sp, #16]
   1ec04:	mvnne	r4, #0
   1ec08:	mvnne	r5, #0
   1ec0c:	subs	r0, r1, r4
   1ec10:	mov	r1, #0
   1ec14:	sbcs	r0, ip, r5
   1ec18:	movwcc	r1, #1
   1ec1c:	umull	r3, r0, r4, r2
   1ec20:	cmp	r1, #0
   1ec24:	mla	r0, r4, sl, r0
   1ec28:	mov	r4, lr
   1ec2c:	str	r1, [sp, #12]
   1ec30:	mvnne	r3, #0
   1ec34:	mla	r0, r5, r2, r0
   1ec38:	cmp	r1, #0
   1ec3c:	str	r4, [sp]
   1ec40:	umull	r7, r6, r3, r2
   1ec44:	mvnne	r0, #0
   1ec48:	mla	r6, r3, sl, r6
   1ec4c:	subs	r3, lr, r3
   1ec50:	mla	r5, r0, r2, r6
   1ec54:	sbcs	r0, ip, r0
   1ec58:	mov	r3, #0
   1ec5c:	mov	r0, #0
   1ec60:	movwcc	r0, #1
   1ec64:	cmp	r0, #0
   1ec68:	str	r0, [sp, #8]
   1ec6c:	mvnne	r7, #0
   1ec70:	mvnne	r5, #0
   1ec74:	subs	r0, lr, r7
   1ec78:	sbcs	r0, ip, r5
   1ec7c:	movwcc	r3, #1
   1ec80:	umull	r6, r0, r7, r2
   1ec84:	cmp	r3, #0
   1ec88:	mla	r7, r7, sl, r0
   1ec8c:	mov	r0, ip
   1ec90:	mvnne	r6, #0
   1ec94:	mla	r7, r5, r2, r7
   1ec98:	cmp	r3, #0
   1ec9c:	mov	r5, #0
   1eca0:	umull	r1, lr, r6, r2
   1eca4:	mvnne	r7, #0
   1eca8:	mla	lr, r6, sl, lr
   1ecac:	subs	r6, r4, r6
   1ecb0:	mla	lr, r7, r2, lr
   1ecb4:	sbcs	r7, ip, r7
   1ecb8:	mov	ip, #0
   1ecbc:	movwcc	ip, #1
   1ecc0:	cmp	ip, #0
   1ecc4:	mvnne	r1, #0
   1ecc8:	mvnne	lr, #0
   1eccc:	subs	r7, r4, r1
   1ecd0:	sbcs	r7, r0, lr
   1ecd4:	movwcc	r5, #1
   1ecd8:	umull	r0, r7, r1, r2
   1ecdc:	cmp	r5, #0
   1ece0:	mla	r1, r1, sl, r7
   1ece4:	mvnne	r0, #0
   1ece8:	mla	r1, lr, r2, r1
   1ecec:	cmp	r5, #0
   1ecf0:	umull	r6, r4, r0, r2
   1ecf4:	mvnne	r1, #0
   1ecf8:	mla	r4, r0, sl, r4
   1ecfc:	mla	r7, r1, r2, r4
   1ed00:	ldr	r2, [sp]
   1ed04:	subs	r0, r2, r0
   1ed08:	ldr	r2, [sp, #16]
   1ed0c:	ldr	r0, [sp, #4]
   1ed10:	sbcs	r0, r0, r1
   1ed14:	mov	r0, #0
   1ed18:	movwcc	r0, #1
   1ed1c:	cmp	r0, #0
   1ed20:	mov	r1, r0
   1ed24:	ldr	r0, [sp, #20]
   1ed28:	mvnne	r7, #0
   1ed2c:	mvnne	r6, #0
   1ed30:	orr	r0, r0, r2
   1ed34:	ldr	r2, [sp, #12]
   1ed38:	orr	r0, r0, r2
   1ed3c:	ldr	r2, [sp, #8]
   1ed40:	orr	r0, r0, r2
   1ed44:	orr	r0, r0, r3
   1ed48:	orr	r0, r0, ip
   1ed4c:	orr	r0, r0, r5
   1ed50:	orr	r0, r0, r1
   1ed54:	and	r3, r0, #1
   1ed58:	b	1edb4 <__assert_fail@plt+0xd7ac>
   1ed5c:	mov	r1, #0
   1ed60:	lsl	r2, r7, #9
   1ed64:	lsl	r0, r6, #9
   1ed68:	lsr	r3, r7, #23
   1ed6c:	cmp	r1, r7, lsr #23
   1ed70:	orr	r2, r2, r6, lsr #23
   1ed74:	mvnne	r0, #0
   1ed78:	movwne	r3, #1
   1ed7c:	cmp	r1, r7, lsr #23
   1ed80:	mvnne	r2, #0
   1ed84:	mov	r6, r0
   1ed88:	mov	r7, r2
   1ed8c:	b	1edb4 <__assert_fail@plt+0xd7ac>
   1ed90:	lsl	r1, r7, #1
   1ed94:	lsl	r0, r6, #1
   1ed98:	cmp	r7, #0
   1ed9c:	lsr	r3, r7, #31
   1eda0:	orr	r1, r1, r6, lsr #31
   1eda4:	mvnlt	r0, #0
   1eda8:	mvnlt	r1, #0
   1edac:	mov	r6, r0
   1edb0:	mov	r7, r1
   1edb4:	ldr	r1, [sp, #32]
   1edb8:	ldr	r2, [sp, #28]
   1edbc:	orr	r8, r3, r8
   1edc0:	add	r0, r1, r2
   1edc4:	str	r0, [r9]
   1edc8:	ldrb	r0, [r1, r2]
   1edcc:	cmp	r0, #0
   1edd0:	orrne	r8, r8, #2
   1edd4:	ldr	r0, [sp, #36]	; 0x24
   1edd8:	strd	r6, [r0]
   1eddc:	mov	r0, r8
   1ede0:	sub	sp, fp, #28
   1ede4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ede8:	movw	r0, #4197	; 0x1065
   1edec:	movw	r1, #4235	; 0x108b
   1edf0:	movw	r3, #4512	; 0x11a0
   1edf4:	mov	r2, #85	; 0x55
   1edf8:	movt	r0, #2
   1edfc:	movt	r1, #2
   1ee00:	movt	r3, #2
   1ee04:	bl	11608 <__assert_fail@plt>
   1ee08:	clz	r2, r1
   1ee0c:	clz	r3, r0
   1ee10:	lsr	r2, r2, #5
   1ee14:	lsr	r3, r3, #5
   1ee18:	orrs	r2, r3, r2
   1ee1c:	movwne	r1, #1
   1ee20:	movwne	r0, #1
   1ee24:	cmp	r1, #0
   1ee28:	beq	1ee58 <__assert_fail@plt+0xd850>
   1ee2c:	mvn	r2, #-2147483648	; 0x80000000
   1ee30:	udiv	r2, r2, r1
   1ee34:	cmp	r2, r0
   1ee38:	bcs	1ee58 <__assert_fail@plt+0xd850>
   1ee3c:	push	{fp, lr}
   1ee40:	mov	fp, sp
   1ee44:	bl	114e8 <__errno_location@plt>
   1ee48:	mov	r1, #12
   1ee4c:	str	r1, [r0]
   1ee50:	mov	r0, #0
   1ee54:	pop	{fp, pc}
   1ee58:	b	112c0 <calloc@plt>
   1ee5c:	cmp	r0, #0
   1ee60:	movweq	r0, #1
   1ee64:	cmn	r0, #1
   1ee68:	ble	1ee70 <__assert_fail@plt+0xd868>
   1ee6c:	b	11440 <malloc@plt>
   1ee70:	push	{fp, lr}
   1ee74:	mov	fp, sp
   1ee78:	bl	114e8 <__errno_location@plt>
   1ee7c:	mov	r1, #12
   1ee80:	str	r1, [r0]
   1ee84:	mov	r0, #0
   1ee88:	pop	{fp, pc}
   1ee8c:	push	{fp, lr}
   1ee90:	mov	fp, sp
   1ee94:	cmp	r0, #0
   1ee98:	beq	1eeb4 <__assert_fail@plt+0xd8ac>
   1ee9c:	cmp	r1, #0
   1eea0:	beq	1eec0 <__assert_fail@plt+0xd8b8>
   1eea4:	cmn	r1, #1
   1eea8:	ble	1eecc <__assert_fail@plt+0xd8c4>
   1eeac:	pop	{fp, lr}
   1eeb0:	b	11398 <realloc@plt>
   1eeb4:	mov	r0, r1
   1eeb8:	pop	{fp, lr}
   1eebc:	b	1ee5c <__assert_fail@plt+0xd854>
   1eec0:	bl	16170 <__assert_fail@plt+0x4b68>
   1eec4:	mov	r0, #0
   1eec8:	pop	{fp, pc}
   1eecc:	bl	114e8 <__errno_location@plt>
   1eed0:	mov	r1, #12
   1eed4:	str	r1, [r0]
   1eed8:	mov	r0, #0
   1eedc:	pop	{fp, pc}
   1eee0:	push	{r4, r5, r6, sl, fp, lr}
   1eee4:	add	fp, sp, #16
   1eee8:	mov	r4, r0
   1eeec:	bl	11410 <__fpending@plt>
   1eef0:	ldr	r6, [r4]
   1eef4:	mov	r5, r0
   1eef8:	mov	r0, r4
   1eefc:	bl	15fb8 <__assert_fail@plt+0x49b0>
   1ef00:	tst	r6, #32
   1ef04:	bne	1ef3c <__assert_fail@plt+0xd934>
   1ef08:	cmp	r0, #0
   1ef0c:	mov	r4, r0
   1ef10:	mvnne	r4, #0
   1ef14:	cmp	r5, #0
   1ef18:	bne	1ef48 <__assert_fail@plt+0xd940>
   1ef1c:	cmp	r0, #0
   1ef20:	beq	1ef48 <__assert_fail@plt+0xd940>
   1ef24:	bl	114e8 <__errno_location@plt>
   1ef28:	ldr	r0, [r0]
   1ef2c:	subs	r4, r0, #9
   1ef30:	mvnne	r4, #0
   1ef34:	mov	r0, r4
   1ef38:	pop	{r4, r5, r6, sl, fp, pc}
   1ef3c:	mvn	r4, #0
   1ef40:	cmp	r0, #0
   1ef44:	beq	1ef50 <__assert_fail@plt+0xd948>
   1ef48:	mov	r0, r4
   1ef4c:	pop	{r4, r5, r6, sl, fp, pc}
   1ef50:	bl	114e8 <__errno_location@plt>
   1ef54:	mov	r1, #0
   1ef58:	str	r1, [r0]
   1ef5c:	mov	r0, r4
   1ef60:	pop	{r4, r5, r6, sl, fp, pc}
   1ef64:	sub	sp, sp, #8
   1ef68:	push	{r4, r5, r6, r7, fp, lr}
   1ef6c:	add	fp, sp, #16
   1ef70:	sub	sp, sp, #8
   1ef74:	mov	r5, r0
   1ef78:	add	r0, fp, #8
   1ef7c:	cmp	r1, #11
   1ef80:	str	r3, [fp, #12]
   1ef84:	str	r2, [fp, #8]
   1ef88:	str	r0, [sp, #4]
   1ef8c:	bhi	1efc8 <__assert_fail@plt+0xd9c0>
   1ef90:	mov	r0, #1
   1ef94:	movw	r2, #1300	; 0x514
   1ef98:	tst	r2, r0, lsl r1
   1ef9c:	bne	1f088 <__assert_fail@plt+0xda80>
   1efa0:	movw	r2, #2570	; 0xa0a
   1efa4:	tst	r2, r0, lsl r1
   1efa8:	bne	1eff0 <__assert_fail@plt+0xd9e8>
   1efac:	cmp	r1, #0
   1efb0:	bne	1efc8 <__assert_fail@plt+0xd9c0>
   1efb4:	ldr	r0, [sp, #4]
   1efb8:	add	r1, r0, #4
   1efbc:	str	r1, [sp, #4]
   1efc0:	mov	r1, #0
   1efc4:	b	1f094 <__assert_fail@plt+0xda8c>
   1efc8:	sub	r0, r1, #1024	; 0x400
   1efcc:	cmp	r0, #10
   1efd0:	bhi	1f088 <__assert_fail@plt+0xda80>
   1efd4:	mov	r2, #1
   1efd8:	movw	r3, #645	; 0x285
   1efdc:	tst	r3, r2, lsl r0
   1efe0:	bne	1f088 <__assert_fail@plt+0xda80>
   1efe4:	movw	r3, #1282	; 0x502
   1efe8:	tst	r3, r2, lsl r0
   1efec:	beq	1effc <__assert_fail@plt+0xd9f4>
   1eff0:	mov	r0, r5
   1eff4:	bl	11554 <fcntl64@plt>
   1eff8:	b	1f0a0 <__assert_fail@plt+0xda98>
   1effc:	cmp	r0, #6
   1f000:	bne	1f088 <__assert_fail@plt+0xda80>
   1f004:	ldr	r0, [sp, #4]
   1f008:	movw	r7, #9152	; 0x23c0
   1f00c:	movt	r7, #3
   1f010:	add	r1, r0, #4
   1f014:	str	r1, [sp, #4]
   1f018:	ldr	r6, [r0]
   1f01c:	ldr	r0, [r7]
   1f020:	cmp	r0, #0
   1f024:	blt	1f0c4 <__assert_fail@plt+0xdabc>
   1f028:	mov	r0, r5
   1f02c:	movw	r1, #1030	; 0x406
   1f030:	mov	r2, r6
   1f034:	bl	11554 <fcntl64@plt>
   1f038:	mov	r4, r0
   1f03c:	cmn	r0, #1
   1f040:	bgt	1f0b8 <__assert_fail@plt+0xdab0>
   1f044:	bl	114e8 <__errno_location@plt>
   1f048:	ldr	r0, [r0]
   1f04c:	cmp	r0, #22
   1f050:	bne	1f0b8 <__assert_fail@plt+0xdab0>
   1f054:	mov	r0, r5
   1f058:	mov	r1, #0
   1f05c:	mov	r2, r6
   1f060:	bl	11554 <fcntl64@plt>
   1f064:	mov	r4, r0
   1f068:	cmp	r0, #0
   1f06c:	blt	1f0a4 <__assert_fail@plt+0xda9c>
   1f070:	mvn	r0, #0
   1f074:	str	r0, [r7]
   1f078:	mov	r0, #1
   1f07c:	cmp	r0, #0
   1f080:	bne	1f0f0 <__assert_fail@plt+0xdae8>
   1f084:	b	1f0a4 <__assert_fail@plt+0xda9c>
   1f088:	ldr	r0, [sp, #4]
   1f08c:	add	r2, r0, #4
   1f090:	str	r2, [sp, #4]
   1f094:	ldr	r2, [r0]
   1f098:	mov	r0, r5
   1f09c:	bl	11554 <fcntl64@plt>
   1f0a0:	mov	r4, r0
   1f0a4:	mov	r0, r4
   1f0a8:	sub	sp, fp, #16
   1f0ac:	pop	{r4, r5, r6, r7, fp, lr}
   1f0b0:	add	sp, sp, #8
   1f0b4:	bx	lr
   1f0b8:	mov	r0, #1
   1f0bc:	str	r0, [r7]
   1f0c0:	b	1f0a4 <__assert_fail@plt+0xda9c>
   1f0c4:	mov	r0, r5
   1f0c8:	mov	r1, #0
   1f0cc:	mov	r2, r6
   1f0d0:	bl	11554 <fcntl64@plt>
   1f0d4:	mov	r4, r0
   1f0d8:	ldr	r0, [r7]
   1f0dc:	add	r0, r0, #1
   1f0e0:	clz	r0, r0
   1f0e4:	lsr	r0, r0, #5
   1f0e8:	cmp	r0, #0
   1f0ec:	beq	1f0a4 <__assert_fail@plt+0xda9c>
   1f0f0:	cmp	r4, #0
   1f0f4:	blt	1f0a4 <__assert_fail@plt+0xda9c>
   1f0f8:	mov	r0, r4
   1f0fc:	mov	r1, #1
   1f100:	bl	11554 <fcntl64@plt>
   1f104:	cmp	r0, #0
   1f108:	blt	1f124 <__assert_fail@plt+0xdb1c>
   1f10c:	orr	r2, r0, #1
   1f110:	mov	r0, r4
   1f114:	mov	r1, #2
   1f118:	bl	11554 <fcntl64@plt>
   1f11c:	cmn	r0, #1
   1f120:	bne	1f0a4 <__assert_fail@plt+0xda9c>
   1f124:	bl	114e8 <__errno_location@plt>
   1f128:	ldr	r6, [r0]
   1f12c:	mov	r5, r0
   1f130:	mov	r0, r4
   1f134:	bl	115fc <close@plt>
   1f138:	str	r6, [r5]
   1f13c:	mvn	r4, #0
   1f140:	b	1f0a4 <__assert_fail@plt+0xda9c>
   1f144:	push	{fp, lr}
   1f148:	mov	fp, sp
   1f14c:	mov	r0, #14
   1f150:	bl	11590 <nl_langinfo@plt>
   1f154:	movw	r1, #1972	; 0x7b4
   1f158:	cmp	r0, #0
   1f15c:	movt	r1, #2
   1f160:	movne	r1, r0
   1f164:	movw	r0, #4591	; 0x11ef
   1f168:	ldrb	r2, [r1]
   1f16c:	movt	r0, #2
   1f170:	cmp	r2, #0
   1f174:	movne	r0, r1
   1f178:	pop	{fp, pc}
   1f17c:	push	{r4, r5, r6, r7, fp, lr}
   1f180:	add	fp, sp, #16
   1f184:	sub	sp, sp, #8
   1f188:	add	r5, sp, #4
   1f18c:	cmp	r0, #0
   1f190:	mov	r7, r2
   1f194:	mov	r4, r1
   1f198:	movne	r5, r0
   1f19c:	mov	r0, r5
   1f1a0:	bl	1141c <mbrtowc@plt>
   1f1a4:	mov	r6, r0
   1f1a8:	cmp	r7, #0
   1f1ac:	beq	1f1d0 <__assert_fail@plt+0xdbc8>
   1f1b0:	cmn	r6, #2
   1f1b4:	bcc	1f1d0 <__assert_fail@plt+0xdbc8>
   1f1b8:	mov	r0, #0
   1f1bc:	bl	16260 <__assert_fail@plt+0x4c58>
   1f1c0:	cmp	r0, #0
   1f1c4:	ldrbeq	r0, [r4]
   1f1c8:	moveq	r6, #1
   1f1cc:	streq	r0, [r5]
   1f1d0:	mov	r0, r6
   1f1d4:	sub	sp, fp, #16
   1f1d8:	pop	{r4, r5, r6, r7, fp, pc}
   1f1dc:	cmp	r2, #0
   1f1e0:	beq	1f210 <__assert_fail@plt+0xdc08>
   1f1e4:	mvn	r3, #0
   1f1e8:	udiv	r3, r3, r2
   1f1ec:	cmp	r3, r1
   1f1f0:	bcs	1f210 <__assert_fail@plt+0xdc08>
   1f1f4:	push	{fp, lr}
   1f1f8:	mov	fp, sp
   1f1fc:	bl	114e8 <__errno_location@plt>
   1f200:	mov	r1, #12
   1f204:	str	r1, [r0]
   1f208:	mov	r0, #0
   1f20c:	pop	{fp, pc}
   1f210:	mul	r1, r2, r1
   1f214:	b	1ee8c <__assert_fail@plt+0xd884>
   1f218:	cmp	r3, #0
   1f21c:	cmpeq	r2, #0
   1f220:	bne	1f244 <__assert_fail@plt+0xdc3c>
   1f224:	cmp	r1, #0
   1f228:	movlt	r1, #-2147483648	; 0x80000000
   1f22c:	movlt	r0, #0
   1f230:	blt	1f240 <__assert_fail@plt+0xdc38>
   1f234:	cmpeq	r0, #0
   1f238:	mvnne	r1, #-2147483648	; 0x80000000
   1f23c:	mvnne	r0, #0
   1f240:	b	1f328 <__assert_fail@plt+0xdd20>
   1f244:	sub	sp, sp, #8
   1f248:	push	{sp, lr}
   1f24c:	cmp	r1, #0
   1f250:	blt	1f270 <__assert_fail@plt+0xdc68>
   1f254:	cmp	r3, #0
   1f258:	blt	1f2a4 <__assert_fail@plt+0xdc9c>
   1f25c:	bl	1f338 <__assert_fail@plt+0xdd30>
   1f260:	ldr	lr, [sp, #4]
   1f264:	add	sp, sp, #8
   1f268:	pop	{r2, r3}
   1f26c:	bx	lr
   1f270:	rsbs	r0, r0, #0
   1f274:	sbc	r1, r1, r1, lsl #1
   1f278:	cmp	r3, #0
   1f27c:	blt	1f2c8 <__assert_fail@plt+0xdcc0>
   1f280:	bl	1f338 <__assert_fail@plt+0xdd30>
   1f284:	ldr	lr, [sp, #4]
   1f288:	add	sp, sp, #8
   1f28c:	pop	{r2, r3}
   1f290:	rsbs	r0, r0, #0
   1f294:	sbc	r1, r1, r1, lsl #1
   1f298:	rsbs	r2, r2, #0
   1f29c:	sbc	r3, r3, r3, lsl #1
   1f2a0:	bx	lr
   1f2a4:	rsbs	r2, r2, #0
   1f2a8:	sbc	r3, r3, r3, lsl #1
   1f2ac:	bl	1f338 <__assert_fail@plt+0xdd30>
   1f2b0:	ldr	lr, [sp, #4]
   1f2b4:	add	sp, sp, #8
   1f2b8:	pop	{r2, r3}
   1f2bc:	rsbs	r0, r0, #0
   1f2c0:	sbc	r1, r1, r1, lsl #1
   1f2c4:	bx	lr
   1f2c8:	rsbs	r2, r2, #0
   1f2cc:	sbc	r3, r3, r3, lsl #1
   1f2d0:	bl	1f338 <__assert_fail@plt+0xdd30>
   1f2d4:	ldr	lr, [sp, #4]
   1f2d8:	add	sp, sp, #8
   1f2dc:	pop	{r2, r3}
   1f2e0:	rsbs	r2, r2, #0
   1f2e4:	sbc	r3, r3, r3, lsl #1
   1f2e8:	bx	lr
   1f2ec:	cmp	r3, #0
   1f2f0:	cmpeq	r2, #0
   1f2f4:	bne	1f30c <__assert_fail@plt+0xdd04>
   1f2f8:	cmp	r1, #0
   1f2fc:	cmpeq	r0, #0
   1f300:	mvnne	r1, #0
   1f304:	mvnne	r0, #0
   1f308:	b	1f328 <__assert_fail@plt+0xdd20>
   1f30c:	sub	sp, sp, #8
   1f310:	push	{sp, lr}
   1f314:	bl	1f338 <__assert_fail@plt+0xdd30>
   1f318:	ldr	lr, [sp, #4]
   1f31c:	add	sp, sp, #8
   1f320:	pop	{r2, r3}
   1f324:	bx	lr
   1f328:	push	{r1, lr}
   1f32c:	mov	r0, #8
   1f330:	bl	112d8 <raise@plt>
   1f334:	pop	{r1, pc}
   1f338:	cmp	r1, r3
   1f33c:	cmpeq	r0, r2
   1f340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f344:	mov	r4, r0
   1f348:	movcc	r0, #0
   1f34c:	mov	r5, r1
   1f350:	ldr	lr, [sp, #36]	; 0x24
   1f354:	movcc	r1, r0
   1f358:	bcc	1f454 <__assert_fail@plt+0xde4c>
   1f35c:	cmp	r3, #0
   1f360:	clzeq	ip, r2
   1f364:	clzne	ip, r3
   1f368:	addeq	ip, ip, #32
   1f36c:	cmp	r5, #0
   1f370:	clzeq	r1, r4
   1f374:	addeq	r1, r1, #32
   1f378:	clzne	r1, r5
   1f37c:	sub	ip, ip, r1
   1f380:	sub	sl, ip, #32
   1f384:	lsl	r9, r3, ip
   1f388:	rsb	fp, ip, #32
   1f38c:	orr	r9, r9, r2, lsl sl
   1f390:	orr	r9, r9, r2, lsr fp
   1f394:	lsl	r8, r2, ip
   1f398:	cmp	r5, r9
   1f39c:	cmpeq	r4, r8
   1f3a0:	movcc	r0, #0
   1f3a4:	movcc	r1, r0
   1f3a8:	bcc	1f3c4 <__assert_fail@plt+0xddbc>
   1f3ac:	mov	r0, #1
   1f3b0:	subs	r4, r4, r8
   1f3b4:	lsl	r1, r0, sl
   1f3b8:	orr	r1, r1, r0, lsr fp
   1f3bc:	lsl	r0, r0, ip
   1f3c0:	sbc	r5, r5, r9
   1f3c4:	cmp	ip, #0
   1f3c8:	beq	1f454 <__assert_fail@plt+0xde4c>
   1f3cc:	lsr	r6, r8, #1
   1f3d0:	orr	r6, r6, r9, lsl #31
   1f3d4:	lsr	r7, r9, #1
   1f3d8:	mov	r2, ip
   1f3dc:	b	1f400 <__assert_fail@plt+0xddf8>
   1f3e0:	subs	r3, r4, r6
   1f3e4:	sbc	r8, r5, r7
   1f3e8:	adds	r3, r3, r3
   1f3ec:	adc	r8, r8, r8
   1f3f0:	adds	r4, r3, #1
   1f3f4:	adc	r5, r8, #0
   1f3f8:	subs	r2, r2, #1
   1f3fc:	beq	1f41c <__assert_fail@plt+0xde14>
   1f400:	cmp	r5, r7
   1f404:	cmpeq	r4, r6
   1f408:	bcs	1f3e0 <__assert_fail@plt+0xddd8>
   1f40c:	adds	r4, r4, r4
   1f410:	adc	r5, r5, r5
   1f414:	subs	r2, r2, #1
   1f418:	bne	1f400 <__assert_fail@plt+0xddf8>
   1f41c:	lsr	r3, r4, ip
   1f420:	orr	r3, r3, r5, lsl fp
   1f424:	lsr	r2, r5, ip
   1f428:	orr	r3, r3, r5, lsr sl
   1f42c:	adds	r0, r0, r4
   1f430:	mov	r4, r3
   1f434:	lsl	r3, r2, ip
   1f438:	orr	r3, r3, r4, lsl sl
   1f43c:	lsl	ip, r4, ip
   1f440:	orr	r3, r3, r4, lsr fp
   1f444:	adc	r1, r1, r5
   1f448:	subs	r0, r0, ip
   1f44c:	mov	r5, r2
   1f450:	sbc	r1, r1, r3
   1f454:	cmp	lr, #0
   1f458:	strdne	r4, [lr]
   1f45c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f460:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f464:	mov	r7, r0
   1f468:	ldr	r6, [pc, #72]	; 1f4b8 <__assert_fail@plt+0xdeb0>
   1f46c:	ldr	r5, [pc, #72]	; 1f4bc <__assert_fail@plt+0xdeb4>
   1f470:	add	r6, pc, r6
   1f474:	add	r5, pc, r5
   1f478:	sub	r6, r6, r5
   1f47c:	mov	r8, r1
   1f480:	mov	r9, r2
   1f484:	bl	11294 <fdopen@plt-0x20>
   1f488:	asrs	r6, r6, #2
   1f48c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f490:	mov	r4, #0
   1f494:	add	r4, r4, #1
   1f498:	ldr	r3, [r5], #4
   1f49c:	mov	r2, r9
   1f4a0:	mov	r1, r8
   1f4a4:	mov	r0, r7
   1f4a8:	blx	r3
   1f4ac:	cmp	r6, r4
   1f4b0:	bne	1f494 <__assert_fail@plt+0xde8c>
   1f4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f4b8:	muleq	r1, r4, sl
   1f4bc:	andeq	r2, r1, ip, lsl #21
   1f4c0:	bx	lr
   1f4c4:	ldr	r3, [pc, #12]	; 1f4d8 <__assert_fail@plt+0xded0>
   1f4c8:	mov	r1, #0
   1f4cc:	add	r3, pc, r3
   1f4d0:	ldr	r2, [r3]
   1f4d4:	b	11500 <__cxa_atexit@plt>
   1f4d8:	andeq	r2, r1, r0, ror #24

Disassembly of section .fini:

0001f4dc <.fini>:
   1f4dc:	push	{r3, lr}
   1f4e0:	pop	{r3, pc}
