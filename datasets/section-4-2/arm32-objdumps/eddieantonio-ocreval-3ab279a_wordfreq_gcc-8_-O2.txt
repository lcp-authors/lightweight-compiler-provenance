
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109e4 <.init>:
   109e4:	push	{r3, lr}
   109e8:	bl	10c80 <__assert_fail@plt+0xc0>
   109ec:	pop	{r3, pc}

Disassembly of section .plt:

000109f0 <calloc@plt-0x14>:
   109f0:	push	{lr}		; (str lr, [sp, #-4]!)
   109f4:	ldr	lr, [pc, #4]	; 10a00 <calloc@plt-0x4>
   109f8:	add	lr, pc, lr
   109fc:	ldr	pc, [lr, #8]!
   10a00:	andeq	r7, r1, r0, lsl #12

00010a04 <calloc@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #94208	; 0x17000
   10a0c:	ldr	pc, [ip, #1536]!	; 0x600

00010a10 <strcmp@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #94208	; 0x17000
   10a18:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a1c <strtol@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #94208	; 0x17000
   10a24:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a28 <printf@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #94208	; 0x17000
   10a30:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a34 <fopen@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #94208	; 0x17000
   10a3c:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a40 <free@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #94208	; 0x17000
   10a48:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a4c <utf8proc_get_property@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #94208	; 0x17000
   10a54:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a58 <fgets@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #94208	; 0x17000
   10a60:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a64 <utf8proc_encode_char@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #94208	; 0x17000
   10a6c:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a70 <strdup@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #94208	; 0x17000
   10a78:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a7c <rewind@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #94208	; 0x17000
   10a84:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a88 <unlink@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #94208	; 0x17000
   10a90:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a94 <utf8proc_tolower@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #94208	; 0x17000
   10a9c:	ldr	pc, [ip, #1440]!	; 0x5a0

00010aa0 <__xstat@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #94208	; 0x17000
   10aa8:	ldr	pc, [ip, #1432]!	; 0x598

00010aac <fwrite@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #94208	; 0x17000
   10ab4:	ldr	pc, [ip, #1424]!	; 0x590

00010ab8 <fread@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #94208	; 0x17000
   10ac0:	ldr	pc, [ip, #1416]!	; 0x588

00010ac4 <utf8proc_iterate@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #94208	; 0x17000
   10acc:	ldr	pc, [ip, #1408]!	; 0x580

00010ad0 <puts@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #94208	; 0x17000
   10ad8:	ldr	pc, [ip, #1400]!	; 0x578

00010adc <malloc@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #94208	; 0x17000
   10ae4:	ldr	pc, [ip, #1392]!	; 0x570

00010ae8 <__libc_start_main@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #94208	; 0x17000
   10af0:	ldr	pc, [ip, #1384]!	; 0x568

00010af4 <__sysv_signal@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #94208	; 0x17000
   10afc:	ldr	pc, [ip, #1376]!	; 0x560

00010b00 <__gmon_start__@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #94208	; 0x17000
   10b08:	ldr	pc, [ip, #1368]!	; 0x558

00010b0c <getpid@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #94208	; 0x17000
   10b14:	ldr	pc, [ip, #1360]!	; 0x550

00010b18 <exit@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #94208	; 0x17000
   10b20:	ldr	pc, [ip, #1352]!	; 0x548

00010b24 <utf8proc_category@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #94208	; 0x17000
   10b2c:	ldr	pc, [ip, #1344]!	; 0x540

00010b30 <strlen@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #94208	; 0x17000
   10b38:	ldr	pc, [ip, #1336]!	; 0x538

00010b3c <fprintf@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #94208	; 0x17000
   10b44:	ldr	pc, [ip, #1328]!	; 0x530

00010b48 <__isoc99_sscanf@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #94208	; 0x17000
   10b50:	ldr	pc, [ip, #1320]!	; 0x528

00010b54 <fclose@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #94208	; 0x17000
   10b5c:	ldr	pc, [ip, #1312]!	; 0x520

00010b60 <utf8proc_NFC@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #94208	; 0x17000
   10b68:	ldr	pc, [ip, #1304]!	; 0x518

00010b6c <fputc@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #94208	; 0x17000
   10b74:	ldr	pc, [ip, #1296]!	; 0x510

00010b78 <sprintf@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1288]!	; 0x508

00010b84 <utf8proc_errmsg@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1280]!	; 0x500

00010b90 <fputs@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b9c <strncmp@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1264]!	; 0x4f0

00010ba8 <abort@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1256]!	; 0x4e8

00010bb4 <getc@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1248]!	; 0x4e0

00010bc0 <__assert_fail@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1240]!	; 0x4d8

Disassembly of section .text:

00010bd0 <error@@Base-0xdf0>:
   10bd0:	ldr	r2, [pc, #100]	; 10c3c <__assert_fail@plt+0x7c>
   10bd4:	mov	r3, #0
   10bd8:	strd	r4, [sp, #-12]!
   10bdc:	mov	r5, r1
   10be0:	str	lr, [sp, #8]
   10be4:	sub	sp, sp, #12
   10be8:	str	r0, [sp, #4]
   10bec:	add	r0, sp, #4
   10bf0:	add	r2, pc, r2
   10bf4:	bl	11ba4 <error@@Base+0x1e4>
   10bf8:	ldr	r3, [sp, #4]
   10bfc:	cmp	r3, #0
   10c00:	beq	10c30 <__assert_fail@plt+0x70>
   10c04:	subgt	r5, r5, #4
   10c08:	movgt	r4, #0
   10c0c:	ble	10c28 <__assert_fail@plt+0x68>
   10c10:	ldr	r0, [r5, #4]!
   10c14:	add	r4, r4, #1
   10c18:	bl	10d5c <__assert_fail@plt+0x19c>
   10c1c:	ldr	r3, [sp, #4]
   10c20:	cmp	r3, r4
   10c24:	bgt	10c10 <__assert_fail@plt+0x50>
   10c28:	bl	10ef0 <__assert_fail@plt+0x330>
   10c2c:	bl	11944 <__assert_fail@plt+0xd84>
   10c30:	ldr	r0, [pc, #8]	; 10c40 <__assert_fail@plt+0x80>
   10c34:	add	r0, pc, r0
   10c38:	bl	119c0 <error@@Base>
   10c3c:	andeq	r2, r0, r8, lsr #28
   10c40:	andeq	r2, r0, r8, lsl #28
   10c44:	mov	fp, #0
   10c48:	mov	lr, #0
   10c4c:	pop	{r1}		; (ldr r1, [sp], #4)
   10c50:	mov	r2, sp
   10c54:	push	{r2}		; (str r2, [sp, #-4]!)
   10c58:	push	{r0}		; (str r0, [sp, #-4]!)
   10c5c:	ldr	ip, [pc, #16]	; 10c74 <__assert_fail@plt+0xb4>
   10c60:	push	{ip}		; (str ip, [sp, #-4]!)
   10c64:	ldr	r0, [pc, #12]	; 10c78 <__assert_fail@plt+0xb8>
   10c68:	ldr	r3, [pc, #12]	; 10c7c <__assert_fail@plt+0xbc>
   10c6c:	bl	10ae8 <__libc_start_main@plt>
   10c70:	bl	10ba8 <abort@plt>
   10c74:	andeq	r3, r1, r8, ror #19
   10c78:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10c7c:	andeq	r3, r1, r8, lsl #19
   10c80:	ldr	r3, [pc, #20]	; 10c9c <__assert_fail@plt+0xdc>
   10c84:	ldr	r2, [pc, #20]	; 10ca0 <__assert_fail@plt+0xe0>
   10c88:	add	r3, pc, r3
   10c8c:	ldr	r2, [r3, r2]
   10c90:	cmp	r2, #0
   10c94:	bxeq	lr
   10c98:	b	10b00 <__gmon_start__@plt>
   10c9c:	andeq	r7, r1, r0, ror r3
   10ca0:	andeq	r0, r0, r4, asr #1
   10ca4:	ldr	r0, [pc, #24]	; 10cc4 <__assert_fail@plt+0x104>
   10ca8:	ldr	r3, [pc, #24]	; 10cc8 <__assert_fail@plt+0x108>
   10cac:	cmp	r3, r0
   10cb0:	bxeq	lr
   10cb4:	ldr	r3, [pc, #16]	; 10ccc <__assert_fail@plt+0x10c>
   10cb8:	cmp	r3, #0
   10cbc:	bxeq	lr
   10cc0:	bx	r3
   10cc4:	andeq	r8, r2, r8, lsl #2
   10cc8:	andeq	r8, r2, r8, lsl #2
   10ccc:	andeq	r0, r0, r0
   10cd0:	ldr	r0, [pc, #36]	; 10cfc <__assert_fail@plt+0x13c>
   10cd4:	ldr	r1, [pc, #36]	; 10d00 <__assert_fail@plt+0x140>
   10cd8:	sub	r1, r1, r0
   10cdc:	asr	r1, r1, #2
   10ce0:	add	r1, r1, r1, lsr #31
   10ce4:	asrs	r1, r1, #1
   10ce8:	bxeq	lr
   10cec:	ldr	r3, [pc, #16]	; 10d04 <__assert_fail@plt+0x144>
   10cf0:	cmp	r3, #0
   10cf4:	bxeq	lr
   10cf8:	bx	r3
   10cfc:	andeq	r8, r2, r8, lsl #2
   10d00:	andeq	r8, r2, r8, lsl #2
   10d04:	andeq	r0, r0, r0
   10d08:	push	{r4, lr}
   10d0c:	ldr	r4, [pc, #24]	; 10d2c <__assert_fail@plt+0x16c>
   10d10:	ldrb	r3, [r4]
   10d14:	cmp	r3, #0
   10d18:	popne	{r4, pc}
   10d1c:	bl	10ca4 <__assert_fail@plt+0xe4>
   10d20:	mov	r3, #1
   10d24:	strb	r3, [r4]
   10d28:	pop	{r4, pc}
   10d2c:	andeq	r8, r2, r8, lsl #2
   10d30:	b	10cd0 <__assert_fail@plt+0x110>
   10d34:	ldr	r0, [r0, #8]
   10d38:	ldr	r1, [r1, #8]
   10d3c:	b	117c8 <__assert_fail@plt+0xc08>
   10d40:	ldr	r2, [r0, #12]
   10d44:	ldr	r3, [r1, #12]
   10d48:	cmp	r2, r3
   10d4c:	beq	10d58 <__assert_fail@plt+0x198>
   10d50:	sub	r0, r3, r2
   10d54:	bx	lr
   10d58:	b	10d34 <__assert_fail@plt+0x174>
   10d5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10d60:	mov	r1, r0
   10d64:	strd	r6, [sp, #8]
   10d68:	ldr	r6, [pc, #156]	; 10e0c <__assert_fail@plt+0x24c>
   10d6c:	str	r8, [sp, #16]
   10d70:	ldr	r3, [pc, #152]	; 10e10 <__assert_fail@plt+0x250>
   10d74:	str	lr, [sp, #20]
   10d78:	ldr	r2, [pc, #148]	; 10e14 <__assert_fail@plt+0x254>
   10d7c:	add	r6, pc, r6
   10d80:	ldr	r8, [r6, r3]
   10d84:	ldr	r2, [r6, r2]
   10d88:	mov	r0, r8
   10d8c:	bl	132b0 <error@@Base+0x18f0>
   10d90:	ldr	r3, [pc, #128]	; 10e18 <__assert_fail@plt+0x258>
   10d94:	mov	r1, r8
   10d98:	ldr	r7, [r6, r3]
   10d9c:	mov	r0, r7
   10da0:	bl	129f4 <error@@Base+0x1034>
   10da4:	ldr	r4, [r7]
   10da8:	cmp	r4, #0
   10dac:	beq	10dd8 <__assert_fail@plt+0x218>
   10db0:	ldr	r3, [pc, #100]	; 10e1c <__assert_fail@plt+0x25c>
   10db4:	ldr	r5, [r6, r3]
   10db8:	mov	r3, #0
   10dbc:	mov	r2, #1
   10dc0:	mov	r0, r5
   10dc4:	ldr	r1, [r4, #8]
   10dc8:	bl	123ec <error@@Base+0xa2c>
   10dcc:	ldr	r4, [r4, #4]
   10dd0:	cmp	r4, #0
   10dd4:	bne	10db8 <__assert_fail@plt+0x1f8>
   10dd8:	ldr	r3, [pc, #64]	; 10e20 <__assert_fail@plt+0x260>
   10ddc:	mov	r0, r8
   10de0:	ldr	r1, [r6, r3]
   10de4:	bl	111b8 <__assert_fail@plt+0x5f8>
   10de8:	ldr	r3, [pc, #52]	; 10e24 <__assert_fail@plt+0x264>
   10dec:	mov	r0, r7
   10df0:	ldrd	r4, [sp]
   10df4:	ldr	r8, [sp, #16]
   10df8:	ldr	r1, [r6, r3]
   10dfc:	ldrd	r6, [sp, #8]
   10e00:	ldr	lr, [sp, #20]
   10e04:	add	sp, sp, #24
   10e08:	b	111b8 <__assert_fail@plt+0x5f8>
   10e0c:	andeq	r7, r1, ip, ror r2
   10e10:	andeq	r0, r0, r4, lsr #1
   10e14:	strheq	r0, [r0], -r8
   10e18:	strheq	r0, [r0], -ip
   10e1c:	ldrdeq	r0, [r0], -ip
   10e20:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   10e24:	andeq	r0, r0, r8, lsr #1
   10e28:	ldr	r0, [pc, #172]	; 10edc <__assert_fail@plt+0x31c>
   10e2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10e30:	strd	r6, [sp, #8]
   10e34:	str	r8, [sp, #16]
   10e38:	str	lr, [sp, #20]
   10e3c:	add	r0, pc, r0
   10e40:	bl	10ad0 <puts@plt>
   10e44:	ldr	r3, [pc, #148]	; 10ee0 <__assert_fail@plt+0x320>
   10e48:	ldr	r2, [pc, #148]	; 10ee4 <__assert_fail@plt+0x324>
   10e4c:	add	r3, pc, r3
   10e50:	ldr	r3, [r3, r2]
   10e54:	add	r3, r3, #4096	; 0x1000
   10e58:	ldr	r2, [r3, #3956]	; 0xf74
   10e5c:	cmp	r2, #0
   10e60:	ble	10ed4 <__assert_fail@plt+0x314>
   10e64:	ldr	r7, [pc, #124]	; 10ee8 <__assert_fail@plt+0x328>
   10e68:	mov	r6, r3
   10e6c:	mov	r5, #0
   10e70:	mov	r4, r5
   10e74:	ldr	r3, [r3, #3952]	; 0xf70
   10e78:	add	r7, pc, r7
   10e7c:	ldr	r3, [r3, r4, lsl #2]
   10e80:	mov	r0, r7
   10e84:	ldr	r2, [r3, #8]
   10e88:	ldr	r1, [r3, #12]
   10e8c:	bl	10a28 <printf@plt>
   10e90:	ldr	r3, [r6, #3952]	; 0xf70
   10e94:	ldr	r1, [r6, #3956]	; 0xf74
   10e98:	ldr	r2, [r3, r4, lsl #2]
   10e9c:	add	r4, r4, #1
   10ea0:	cmp	r1, r4
   10ea4:	ldr	r2, [r2, #12]
   10ea8:	add	r5, r5, r2
   10eac:	bgt	10e7c <__assert_fail@plt+0x2bc>
   10eb0:	ldr	r0, [pc, #52]	; 10eec <__assert_fail@plt+0x32c>
   10eb4:	mov	r1, r5
   10eb8:	ldrd	r4, [sp]
   10ebc:	ldrd	r6, [sp, #8]
   10ec0:	add	r0, pc, r0
   10ec4:	ldr	r8, [sp, #16]
   10ec8:	ldr	lr, [sp, #20]
   10ecc:	add	sp, sp, #24
   10ed0:	b	10a28 <printf@plt>
   10ed4:	mov	r5, #0
   10ed8:	b	10eb0 <__assert_fail@plt+0x2f0>
   10edc:			; <UNDEFINED> instruction: 0x00002bb4
   10ee0:	andeq	r7, r1, ip, lsr #3
   10ee4:	ldrdeq	r0, [r0], -ip
   10ee8:	andeq	r2, r0, r4, lsl #23
   10eec:	andeq	r2, r0, r8, asr #22
   10ef0:	strd	r4, [sp, #-16]!
   10ef4:	ldr	r4, [pc, #100]	; 10f60 <__assert_fail@plt+0x3a0>
   10ef8:	str	r6, [sp, #8]
   10efc:	ldr	r3, [pc, #96]	; 10f64 <__assert_fail@plt+0x3a4>
   10f00:	str	lr, [sp, #12]
   10f04:	add	r4, pc, r4
   10f08:	ldr	r0, [r4, r3]
   10f0c:	add	r5, r0, #4096	; 0x1000
   10f10:	bl	115c0 <__assert_fail@plt+0xa00>
   10f14:	ldr	r3, [pc, #76]	; 10f68 <__assert_fail@plt+0x3a8>
   10f18:	ldr	r1, [r5, #3952]	; 0xf70
   10f1c:	ldr	r0, [r5, #3956]	; 0xf74
   10f20:	ldr	r2, [r4, r3]
   10f24:	bl	113ac <__assert_fail@plt+0x7ec>
   10f28:	bl	10e28 <__assert_fail@plt+0x268>
   10f2c:	ldr	r0, [pc, #56]	; 10f6c <__assert_fail@plt+0x3ac>
   10f30:	add	r0, pc, r0
   10f34:	bl	10ad0 <puts@plt>
   10f38:	ldr	r3, [pc, #48]	; 10f70 <__assert_fail@plt+0x3b0>
   10f3c:	ldr	r1, [r5, #3952]	; 0xf70
   10f40:	ldr	r0, [r5, #3956]	; 0xf74
   10f44:	ldr	r2, [r4, r3]
   10f48:	bl	113ac <__assert_fail@plt+0x7ec>
   10f4c:	ldrd	r4, [sp]
   10f50:	ldr	r6, [sp, #8]
   10f54:	ldr	lr, [sp, #12]
   10f58:	add	sp, sp, #16
   10f5c:	b	10e28 <__assert_fail@plt+0x268>
   10f60:	strdeq	r7, [r1], -r4
   10f64:	ldrdeq	r0, [r0], -ip
   10f68:	andeq	r0, r0, r4, ror #1
   10f6c:	andeq	r2, r0, r0, ror #25
   10f70:	andeq	r0, r0, r8, ror #1
   10f74:	mov	r3, #0
   10f78:	str	r3, [r0]
   10f7c:	str	r3, [r0, #4]
   10f80:	str	r3, [r0, #8]
   10f84:	str	r3, [r0, #12]
   10f88:	bx	lr
   10f8c:	ldr	r3, [r0]
   10f90:	mov	r2, #0
   10f94:	str	r4, [sp, #-8]!
   10f98:	mov	r4, r0
   10f9c:	str	lr, [sp, #4]
   10fa0:	cmp	r3, r2
   10fa4:	strd	r2, [r1]
   10fa8:	str	r1, [r0]
   10fac:	streq	r1, [r0, #4]
   10fb0:	ldr	r0, [r0, #8]
   10fb4:	strne	r1, [r3]
   10fb8:	cmp	r0, #0
   10fbc:	beq	10fcc <__assert_fail@plt+0x40c>
   10fc0:	bl	10a40 <free@plt>
   10fc4:	mov	r3, #0
   10fc8:	str	r3, [r4, #8]
   10fcc:	ldr	r3, [r4, #12]
   10fd0:	add	r3, r3, #1
   10fd4:	str	r3, [r4, #12]
   10fd8:	ldr	r4, [sp]
   10fdc:	add	sp, sp, #4
   10fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   10fe4:	ldr	r3, [r0, #4]
   10fe8:	mov	r2, #0
   10fec:	str	r4, [sp, #-8]!
   10ff0:	mov	r4, r0
   10ff4:	str	lr, [sp, #4]
   10ff8:	cmp	r3, r2
   10ffc:	str	r3, [r1]
   11000:	str	r2, [r1, #4]
   11004:	streq	r1, [r0]
   11008:	ldr	r0, [r0, #8]
   1100c:	strne	r1, [r3, #4]
   11010:	str	r1, [r4, #4]
   11014:	cmp	r0, #0
   11018:	beq	11028 <__assert_fail@plt+0x468>
   1101c:	bl	10a40 <free@plt>
   11020:	mov	r3, #0
   11024:	str	r3, [r4, #8]
   11028:	ldr	r3, [r4, #12]
   1102c:	add	r3, r3, #1
   11030:	str	r3, [r4, #12]
   11034:	ldr	r4, [sp]
   11038:	add	sp, sp, #4
   1103c:	pop	{pc}		; (ldr pc, [sp], #4)
   11040:	ldr	r3, [r2]
   11044:	str	r4, [sp, #-8]!
   11048:	mov	r4, r0
   1104c:	str	lr, [sp, #4]
   11050:	cmp	r3, #0
   11054:	str	r3, [r1]
   11058:	str	r2, [r1, #4]
   1105c:	streq	r1, [r0]
   11060:	ldr	r0, [r0, #8]
   11064:	strne	r1, [r3, #4]
   11068:	str	r1, [r2]
   1106c:	cmp	r0, #0
   11070:	beq	11080 <__assert_fail@plt+0x4c0>
   11074:	bl	10a40 <free@plt>
   11078:	mov	r3, #0
   1107c:	str	r3, [r4, #8]
   11080:	ldr	r3, [r4, #12]
   11084:	add	r3, r3, #1
   11088:	str	r3, [r4, #12]
   1108c:	ldr	r4, [sp]
   11090:	add	sp, sp, #4
   11094:	pop	{pc}		; (ldr pc, [sp], #4)
   11098:	ldr	r3, [r1, #4]
   1109c:	str	r4, [sp, #-8]!
   110a0:	mov	r4, r0
   110a4:	str	lr, [sp, #4]
   110a8:	cmp	r3, #0
   110ac:	stm	r2, {r1, r3}
   110b0:	str	r2, [r1, #4]
   110b4:	streq	r2, [r0, #4]
   110b8:	ldr	r0, [r0, #8]
   110bc:	strne	r2, [r3]
   110c0:	cmp	r0, #0
   110c4:	beq	110d4 <__assert_fail@plt+0x514>
   110c8:	bl	10a40 <free@plt>
   110cc:	mov	r3, #0
   110d0:	str	r3, [r4, #8]
   110d4:	ldr	r3, [r4, #12]
   110d8:	add	r3, r3, #1
   110dc:	str	r3, [r4, #12]
   110e0:	ldr	r4, [sp]
   110e4:	add	sp, sp, #4
   110e8:	pop	{pc}		; (ldr pc, [sp], #4)
   110ec:	ldrd	r2, [r1]
   110f0:	strd	r4, [sp, #-16]!
   110f4:	mov	r4, r0
   110f8:	mov	r5, #0
   110fc:	str	r6, [sp, #8]
   11100:	str	lr, [sp, #12]
   11104:	cmp	r2, #0
   11108:	strne	r3, [r2, #4]
   1110c:	ldrne	r3, [r1, #4]
   11110:	streq	r3, [r0]
   11114:	cmp	r3, #0
   11118:	streq	r2, [r0, #4]
   1111c:	ldr	r0, [r0, #8]
   11120:	strne	r2, [r3]
   11124:	str	r5, [r1]
   11128:	str	r5, [r1, #4]
   1112c:	cmp	r0, r5
   11130:	beq	1113c <__assert_fail@plt+0x57c>
   11134:	bl	10a40 <free@plt>
   11138:	str	r5, [r4, #8]
   1113c:	ldr	r3, [r4, #12]
   11140:	ldr	r6, [sp, #8]
   11144:	sub	r3, r3, #1
   11148:	str	r3, [r4, #12]
   1114c:	ldrd	r4, [sp]
   11150:	add	sp, sp, #12
   11154:	pop	{pc}		; (ldr pc, [sp], #4)
   11158:	ldr	r3, [r0, #8]
   1115c:	cmp	r3, #0
   11160:	bxne	lr
   11164:	ldr	r3, [r0, #12]
   11168:	cmp	r3, #0
   1116c:	bxeq	lr
   11170:	mov	r1, #4
   11174:	str	r4, [sp, #-8]!
   11178:	mov	r4, r0
   1117c:	mov	r0, r3
   11180:	str	lr, [sp, #4]
   11184:	bl	11a1c <error@@Base+0x5c>
   11188:	ldr	r3, [r4]
   1118c:	str	r0, [r4, #8]
   11190:	cmp	r3, #0
   11194:	beq	111ac <__assert_fail@plt+0x5ec>
   11198:	sub	r0, r0, #4
   1119c:	str	r3, [r0, #4]!
   111a0:	ldr	r3, [r3, #4]
   111a4:	cmp	r3, #0
   111a8:	bne	1119c <__assert_fail@plt+0x5dc>
   111ac:	ldr	r4, [sp]
   111b0:	add	sp, sp, #4
   111b4:	pop	{pc}		; (ldr pc, [sp], #4)
   111b8:	strd	r4, [sp, #-16]!
   111bc:	ldr	r4, [r0]
   111c0:	str	r6, [sp, #8]
   111c4:	str	lr, [sp, #12]
   111c8:	cmp	r4, #0
   111cc:	beq	111f8 <__assert_fail@plt+0x638>
   111d0:	mov	r5, r0
   111d4:	mov	r6, r1
   111d8:	mov	r1, r4
   111dc:	mov	r0, r5
   111e0:	bl	110ec <__assert_fail@plt+0x52c>
   111e4:	mov	r0, r4
   111e8:	blx	r6
   111ec:	ldr	r4, [r5]
   111f0:	cmp	r4, #0
   111f4:	bne	111d8 <__assert_fail@plt+0x618>
   111f8:	ldrd	r4, [sp]
   111fc:	ldr	r6, [sp, #8]
   11200:	add	sp, sp, #12
   11204:	pop	{pc}		; (ldr pc, [sp], #4)
   11208:	ldr	r3, [pc, #400]	; 113a0 <__assert_fail@plt+0x7e0>
   1120c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11210:	strd	r6, [sp, #8]
   11214:	ldr	r6, [pc, #392]	; 113a4 <__assert_fail@plt+0x7e4>
   11218:	strd	r8, [sp, #16]
   1121c:	add	r3, pc, r3
   11220:	strd	sl, [sp, #24]
   11224:	str	lr, [sp, #32]
   11228:	sub	sp, sp, #20
   1122c:	add	r6, pc, r6
   11230:	str	r0, [sp]
   11234:	str	r3, [sp, #8]
   11238:	lsl	r3, r1, #2
   1123c:	str	r1, [sp, #4]
   11240:	str	r3, [sp, #12]
   11244:	ldr	r3, [sp]
   11248:	ldr	r2, [sp, #4]
   1124c:	cmp	r3, r2
   11250:	ldr	r2, [sp, #8]
   11254:	ldr	r1, [r2]
   11258:	ldr	r4, [r1, r3, lsl #2]
   1125c:	bge	11390 <__assert_fail@plt+0x7d0>
   11260:	ldr	r5, [pc, #320]	; 113a8 <__assert_fail@plt+0x7e8>
   11264:	ldm	sp, {r8, fp}
   11268:	add	r5, pc, r5
   1126c:	mov	r0, r4
   11270:	ldr	r1, [r1, fp, lsl #2]
   11274:	lsl	r9, fp, #2
   11278:	ldr	r3, [r5, #4]
   1127c:	blx	r3
   11280:	cmp	r0, #0
   11284:	bge	11318 <__assert_fail@plt+0x758>
   11288:	sub	fp, fp, #1
   1128c:	ldr	r1, [r5]
   11290:	cmp	r8, fp
   11294:	lslge	r9, fp, #2
   11298:	blt	1126c <__assert_fail@plt+0x6ac>
   1129c:	cmp	fp, r8
   112a0:	add	r7, r1, r9
   112a4:	beq	11328 <__assert_fail@plt+0x768>
   112a8:	ldr	r3, [r1, r9]
   112ac:	add	sl, r8, #1
   112b0:	lsl	r7, r8, #2
   112b4:	cmp	fp, sl
   112b8:	str	r3, [r1, r8, lsl #2]
   112bc:	bgt	112d4 <__assert_fail@plt+0x714>
   112c0:	b	11370 <__assert_fail@plt+0x7b0>
   112c4:	add	sl, sl, #1
   112c8:	ldr	r1, [r6]
   112cc:	cmp	fp, sl
   112d0:	beq	11320 <__assert_fail@plt+0x760>
   112d4:	mov	r0, r4
   112d8:	ldr	r1, [r1, sl, lsl #2]
   112dc:	lsl	r7, sl, #2
   112e0:	ldr	r3, [r6, #4]
   112e4:	blx	r3
   112e8:	cmp	r0, #0
   112ec:	bgt	112c4 <__assert_fail@plt+0x704>
   112f0:	ldr	r1, [r6]
   112f4:	mov	r8, sl
   112f8:	add	r7, r1, r7
   112fc:	ldr	r3, [r7]
   11300:	sub	fp, fp, #1
   11304:	cmp	fp, sl
   11308:	str	r3, [r1, r9]
   1130c:	bgt	1126c <__assert_fail@plt+0x6ac>
   11310:	add	r7, r1, fp, lsl #2
   11314:	b	1132c <__assert_fail@plt+0x76c>
   11318:	ldr	r1, [r5]
   1131c:	b	1129c <__assert_fail@plt+0x6dc>
   11320:	add	r7, r1, r9
   11324:	mov	r8, fp
   11328:	mov	fp, r8
   1132c:	ldr	r3, [sp]
   11330:	sub	r1, fp, #1
   11334:	str	r4, [r7]
   11338:	cmp	r3, r1
   1133c:	blt	11384 <__assert_fail@plt+0x7c4>
   11340:	ldr	r2, [sp, #4]
   11344:	add	r3, r8, #1
   11348:	str	r3, [sp]
   1134c:	cmp	r3, r2
   11350:	blt	11244 <__assert_fail@plt+0x684>
   11354:	add	sp, sp, #20
   11358:	ldrd	r4, [sp]
   1135c:	ldrd	r6, [sp, #8]
   11360:	ldrd	r8, [sp, #16]
   11364:	ldrd	sl, [sp, #24]
   11368:	add	sp, sp, #32
   1136c:	pop	{pc}		; (ldr pc, [sp], #4)
   11370:	add	r7, r7, #4
   11374:	add	r7, r1, r7
   11378:	beq	11324 <__assert_fail@plt+0x764>
   1137c:	mov	r8, sl
   11380:	b	112fc <__assert_fail@plt+0x73c>
   11384:	mov	r0, r3
   11388:	bl	11208 <__assert_fail@plt+0x648>
   1138c:	b	11340 <__assert_fail@plt+0x780>
   11390:	ldm	sp, {r8, fp}
   11394:	ldr	r3, [sp, #12]
   11398:	add	r7, r1, r3
   1139c:	b	1132c <__assert_fail@plt+0x76c>
   113a0:	andeq	r6, r1, r8, ror #29
   113a4:	ldrdeq	r6, [r1], -r8
   113a8:	muleq	r1, ip, lr
   113ac:	cmp	r0, #1
   113b0:	mov	ip, r1
   113b4:	ble	113d4 <__assert_fail@plt+0x814>
   113b8:	ldr	r3, [pc, #24]	; 113d8 <__assert_fail@plt+0x818>
   113bc:	sub	r1, r0, #1
   113c0:	mov	r0, #0
   113c4:	add	r3, pc, r3
   113c8:	str	ip, [r3]
   113cc:	str	r2, [r3, #4]
   113d0:	b	11208 <__assert_fail@plt+0x648>
   113d4:	bx	lr
   113d8:	andeq	r6, r1, r0, asr #26
   113dc:	strd	r4, [sp, #-16]!
   113e0:	add	r5, r0, #8000	; 0x1f40
   113e4:	mov	r4, r0
   113e8:	add	r5, r5, #48	; 0x30
   113ec:	str	r6, [sp, #8]
   113f0:	mov	r6, r0
   113f4:	str	lr, [sp, #12]
   113f8:	mov	r0, r4
   113fc:	add	r4, r4, #16
   11400:	bl	10f74 <__assert_fail@plt+0x3b4>
   11404:	cmp	r4, r5
   11408:	bne	113f8 <__assert_fail@plt+0x838>
   1140c:	add	r6, r6, #4096	; 0x1000
   11410:	mov	r3, #0
   11414:	ldrd	r4, [sp]
   11418:	str	r3, [r6, #3952]	; 0xf70
   1141c:	str	r3, [r6, #3956]	; 0xf74
   11420:	ldr	r6, [sp, #8]
   11424:	add	sp, sp, #12
   11428:	pop	{pc}		; (ldr pc, [sp], #4)
   1142c:	strd	r4, [sp, #-16]!
   11430:	mov	r5, r1
   11434:	str	r6, [sp, #8]
   11438:	str	lr, [sp, #12]
   1143c:	ldrb	r3, [r1]
   11440:	cmp	r3, #0
   11444:	beq	11474 <__assert_fail@plt+0x8b4>
   11448:	mov	r2, #0
   1144c:	add	r2, r2, r3
   11450:	ldrb	r3, [r1, #1]!
   11454:	cmp	r3, #0
   11458:	bne	1144c <__assert_fail@plt+0x88c>
   1145c:	movw	r3, #20065	; 0x4e61
   11460:	movt	r3, #33354	; 0x824a
   11464:	movw	r1, #503	; 0x1f7
   11468:	umull	ip, r3, r3, r2
   1146c:	lsr	r3, r3, #8
   11470:	mls	r3, r1, r3, r2
   11474:	ldr	r4, [r0, r3, lsl #4]
   11478:	cmp	r4, #0
   1147c:	bne	11490 <__assert_fail@plt+0x8d0>
   11480:	b	114a4 <__assert_fail@plt+0x8e4>
   11484:	ldr	r4, [r4, #4]
   11488:	cmp	r4, #0
   1148c:	beq	114a4 <__assert_fail@plt+0x8e4>
   11490:	mov	r0, r5
   11494:	ldr	r1, [r4, #8]
   11498:	bl	10a10 <strcmp@plt>
   1149c:	cmp	r0, #0
   114a0:	bne	11484 <__assert_fail@plt+0x8c4>
   114a4:	mov	r0, r4
   114a8:	ldrd	r4, [sp]
   114ac:	ldr	r6, [sp, #8]
   114b0:	add	sp, sp, #12
   114b4:	pop	{pc}		; (ldr pc, [sp], #4)
   114b8:	ldr	r2, [r1, #8]
   114bc:	str	r4, [sp, #-8]!
   114c0:	mov	r4, r0
   114c4:	str	lr, [sp, #4]
   114c8:	ldrb	r3, [r2]
   114cc:	cmp	r3, #0
   114d0:	beq	11504 <__assert_fail@plt+0x944>
   114d4:	mov	r0, #0
   114d8:	add	r0, r0, r3
   114dc:	ldrb	r3, [r2, #1]!
   114e0:	cmp	r3, #0
   114e4:	bne	114d8 <__assert_fail@plt+0x918>
   114e8:	movw	r3, #20065	; 0x4e61
   114ec:	movt	r3, #33354	; 0x824a
   114f0:	movw	r2, #503	; 0x1f7
   114f4:	umull	ip, r3, r3, r0
   114f8:	lsr	r3, r3, #8
   114fc:	mls	r0, r2, r3, r0
   11500:	add	r0, r4, r0, lsl #4
   11504:	add	r4, r4, #4096	; 0x1000
   11508:	bl	10f8c <__assert_fail@plt+0x3cc>
   1150c:	ldr	r0, [r4, #3952]	; 0xf70
   11510:	cmp	r0, #0
   11514:	beq	11524 <__assert_fail@plt+0x964>
   11518:	bl	10a40 <free@plt>
   1151c:	mov	r3, #0
   11520:	str	r3, [r4, #3952]	; 0xf70
   11524:	ldr	r3, [r4, #3956]	; 0xf74
   11528:	add	r3, r3, #1
   1152c:	str	r3, [r4, #3956]	; 0xf74
   11530:	ldr	r4, [sp]
   11534:	add	sp, sp, #4
   11538:	pop	{pc}		; (ldr pc, [sp], #4)
   1153c:	ldr	r2, [r1, #8]
   11540:	str	r4, [sp, #-8]!
   11544:	mov	r4, r0
   11548:	str	lr, [sp, #4]
   1154c:	ldrb	r3, [r2]
   11550:	cmp	r3, #0
   11554:	beq	11588 <__assert_fail@plt+0x9c8>
   11558:	mov	r0, #0
   1155c:	add	r0, r0, r3
   11560:	ldrb	r3, [r2, #1]!
   11564:	cmp	r3, #0
   11568:	bne	1155c <__assert_fail@plt+0x99c>
   1156c:	movw	r3, #20065	; 0x4e61
   11570:	movt	r3, #33354	; 0x824a
   11574:	movw	r2, #503	; 0x1f7
   11578:	umull	ip, r3, r3, r0
   1157c:	lsr	r3, r3, #8
   11580:	mls	r0, r2, r3, r0
   11584:	add	r0, r4, r0, lsl #4
   11588:	add	r4, r4, #4096	; 0x1000
   1158c:	bl	110ec <__assert_fail@plt+0x52c>
   11590:	ldr	r0, [r4, #3952]	; 0xf70
   11594:	cmp	r0, #0
   11598:	beq	115a8 <__assert_fail@plt+0x9e8>
   1159c:	bl	10a40 <free@plt>
   115a0:	mov	r3, #0
   115a4:	str	r3, [r4, #3952]	; 0xf70
   115a8:	ldr	r3, [r4, #3956]	; 0xf74
   115ac:	sub	r3, r3, #1
   115b0:	str	r3, [r4, #3956]	; 0xf74
   115b4:	ldr	r4, [sp]
   115b8:	add	sp, sp, #4
   115bc:	pop	{pc}		; (ldr pc, [sp], #4)
   115c0:	strd	r4, [sp, #-16]!
   115c4:	str	r6, [sp, #8]
   115c8:	add	r6, r0, #4096	; 0x1000
   115cc:	ldr	r4, [r6, #3952]	; 0xf70
   115d0:	str	lr, [sp, #12]
   115d4:	cmp	r4, #0
   115d8:	beq	115ec <__assert_fail@plt+0xa2c>
   115dc:	ldrd	r4, [sp]
   115e0:	ldr	r6, [sp, #8]
   115e4:	add	sp, sp, #12
   115e8:	pop	{pc}		; (ldr pc, [sp], #4)
   115ec:	ldr	r3, [r6, #3956]	; 0xf74
   115f0:	cmp	r3, #0
   115f4:	beq	115dc <__assert_fail@plt+0xa1c>
   115f8:	mov	r5, r0
   115fc:	mov	r1, #4
   11600:	mov	r0, r3
   11604:	bl	11a1c <error@@Base+0x5c>
   11608:	mov	r2, r4
   1160c:	mov	ip, r4
   11610:	str	r0, [r6, #3952]	; 0xf70
   11614:	movw	lr, #503	; 0x1f7
   11618:	ldr	r3, [r5, ip, lsl #4]
   1161c:	cmp	r3, #0
   11620:	beq	1163c <__assert_fail@plt+0xa7c>
   11624:	add	r1, r0, r2, lsl #2
   11628:	str	r3, [r1], #4
   1162c:	add	r2, r2, #1
   11630:	ldr	r3, [r3, #4]
   11634:	cmp	r3, #0
   11638:	bne	11628 <__assert_fail@plt+0xa68>
   1163c:	add	ip, ip, #1
   11640:	cmp	ip, lr
   11644:	bne	11618 <__assert_fail@plt+0xa58>
   11648:	ldrd	r4, [sp]
   1164c:	ldr	r6, [sp, #8]
   11650:	add	sp, sp, #12
   11654:	pop	{pc}		; (ldr pc, [sp], #4)
   11658:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1165c:	add	r5, r0, #8000	; 0x1f40
   11660:	mov	r4, r0
   11664:	add	r5, r5, #48	; 0x30
   11668:	strd	r6, [sp, #8]
   1166c:	mov	r7, r0
   11670:	mov	r6, r1
   11674:	str	r8, [sp, #16]
   11678:	str	lr, [sp, #20]
   1167c:	mov	r0, r4
   11680:	mov	r1, r6
   11684:	add	r4, r4, #16
   11688:	bl	111b8 <__assert_fail@plt+0x5f8>
   1168c:	cmp	r4, r5
   11690:	bne	1167c <__assert_fail@plt+0xabc>
   11694:	add	r7, r7, #4096	; 0x1000
   11698:	ldr	r0, [r7, #3952]	; 0xf70
   1169c:	cmp	r0, #0
   116a0:	beq	116b0 <__assert_fail@plt+0xaf0>
   116a4:	bl	10a40 <free@plt>
   116a8:	mov	r3, #0
   116ac:	str	r3, [r7, #3952]	; 0xf70
   116b0:	mov	r3, #0
   116b4:	ldrd	r4, [sp]
   116b8:	ldr	r8, [sp, #16]
   116bc:	str	r3, [r7, #3956]	; 0xf74
   116c0:	ldrd	r6, [sp, #8]
   116c4:	add	sp, sp, #20
   116c8:	pop	{pc}		; (ldr pc, [sp], #4)
   116cc:	ldr	r3, [pc, #96]	; 11734 <__assert_fail@plt+0xb74>
   116d0:	strd	r4, [sp, #-16]!
   116d4:	ldr	r2, [pc, #92]	; 11738 <__assert_fail@plt+0xb78>
   116d8:	str	r6, [sp, #8]
   116dc:	mov	r6, r0
   116e0:	str	lr, [sp, #12]
   116e4:	sub	sp, sp, #112	; 0x70
   116e8:	add	r3, pc, r3
   116ec:	add	r4, sp, #12
   116f0:	ldr	r3, [r3, r2]
   116f4:	ldr	r5, [r3]
   116f8:	bl	10b0c <getpid@plt>
   116fc:	ldr	r1, [pc, #56]	; 1173c <__assert_fail@plt+0xb7c>
   11700:	mov	r3, r0
   11704:	mov	r0, r4
   11708:	str	r6, [sp]
   1170c:	mov	r2, r5
   11710:	add	r1, pc, r1
   11714:	bl	10b78 <sprintf@plt>
   11718:	mov	r0, r4
   1171c:	bl	10a70 <strdup@plt>
   11720:	add	sp, sp, #112	; 0x70
   11724:	ldrd	r4, [sp]
   11728:	ldr	r6, [sp, #8]
   1172c:	add	sp, sp, #12
   11730:	pop	{pc}		; (ldr pc, [sp], #4)
   11734:	andeq	r6, r1, r0, lsl r9
   11738:	andeq	r0, r0, r8, asr #1
   1173c:	andeq	r2, r0, r4, asr #6
   11740:	ldr	r3, [pc, #116]	; 117bc <__assert_fail@plt+0xbfc>
   11744:	mov	r6, r0
   11748:	str	r7, [sp, #-8]!
   1174c:	ldr	r2, [pc, #108]	; 117c0 <__assert_fail@plt+0xc00>
   11750:	str	lr, [sp, #4]
   11754:	add	r3, pc, r3
   11758:	ldr	r3, [r3, r2]
   1175c:	ldr	r3, [r3]
   11760:	cmp	r3, #0
   11764:	beq	1176c <__assert_fail@plt+0xbac>
   11768:	blx	r3
   1176c:	ldr	r3, [pc, #80]	; 117c4 <__assert_fail@plt+0xc04>
   11770:	add	r3, pc, r3
   11774:	ldrsh	r2, [r3]
   11778:	cmp	r2, #0
   1177c:	ble	117b4 <__assert_fail@plt+0xbf4>
   11780:	mov	r5, r3
   11784:	mov	r4, #1
   11788:	mov	r0, r4
   1178c:	add	r4, r4, #1
   11790:	bl	116cc <__assert_fail@plt+0xb0c>
   11794:	mov	r7, r0
   11798:	sxth	r4, r4
   1179c:	bl	10a88 <unlink@plt>
   117a0:	mov	r0, r7
   117a4:	bl	10a40 <free@plt>
   117a8:	ldrsh	r3, [r5]
   117ac:	cmp	r3, r4
   117b0:	bge	11788 <__assert_fail@plt+0xbc8>
   117b4:	mov	r0, r6
   117b8:	bl	10b18 <exit@plt>
   117bc:	andeq	r6, r1, r4, lsr #17
   117c0:	andeq	r0, r0, ip, asr #1
   117c4:	muleq	r1, ip, r9
   117c8:	ldrb	r3, [r0]
   117cc:	ldrb	r2, [r1]
   117d0:	cmp	r3, #0
   117d4:	beq	117fc <__assert_fail@plt+0xc3c>
   117d8:	cmp	r2, r3
   117dc:	beq	117ec <__assert_fail@plt+0xc2c>
   117e0:	b	11808 <__assert_fail@plt+0xc48>
   117e4:	cmp	r3, r2
   117e8:	bne	11808 <__assert_fail@plt+0xc48>
   117ec:	ldrb	r3, [r0, #1]!
   117f0:	ldrb	r2, [r1, #1]!
   117f4:	cmp	r3, #0
   117f8:	bne	117e4 <__assert_fail@plt+0xc24>
   117fc:	cmp	r2, #0
   11800:	beq	11818 <__assert_fail@plt+0xc58>
   11804:	mov	r3, #0
   11808:	cmp	r3, r2
   1180c:	mvncc	r0, #0
   11810:	movcs	r0, #1
   11814:	bx	lr
   11818:	mov	r0, r2
   1181c:	bx	lr
   11820:	ldr	r3, [pc, #48]	; 11858 <__assert_fail@plt+0xc98>
   11824:	ldr	r1, [pc, #48]	; 1185c <__assert_fail@plt+0xc9c>
   11828:	add	r3, pc, r3
   1182c:	ldr	r1, [r3, r1]
   11830:	ldr	r1, [r1]
   11834:	cmp	r1, r0
   11838:	beq	11854 <__assert_fail@plt+0xc94>
   1183c:	ldr	r1, [pc, #28]	; 11860 <__assert_fail@plt+0xca0>
   11840:	ldr	r3, [r3, r1]
   11844:	ldr	r3, [r3]
   11848:	cmp	r3, r0
   1184c:	beq	11854 <__assert_fail@plt+0xc94>
   11850:	b	10b54 <fclose@plt>
   11854:	bx	lr
   11858:	ldrdeq	r6, [r1], -r0
   1185c:	ldrdeq	r0, [r0], -r4
   11860:	ldrdeq	r0, [r0], -r8
   11864:	push	{lr}		; (str lr, [sp, #-4]!)
   11868:	sub	sp, sp, #92	; 0x5c
   1186c:	mov	r1, r0
   11870:	mov	r2, sp
   11874:	mov	r0, #3
   11878:	bl	10aa0 <__xstat@plt>
   1187c:	clz	r0, r0
   11880:	lsr	r0, r0, #5
   11884:	add	sp, sp, #92	; 0x5c
   11888:	pop	{pc}		; (ldr pc, [sp], #4)
   1188c:	ldr	r2, [pc, #56]	; 118cc <__assert_fail@plt+0xd0c>
   11890:	str	r4, [sp, #-8]!
   11894:	add	r2, pc, r2
   11898:	ldrh	r3, [r2]
   1189c:	str	lr, [sp, #4]
   118a0:	add	r3, r3, #1
   118a4:	sxth	r3, r3
   118a8:	mov	r0, r3
   118ac:	strh	r3, [r2]
   118b0:	bl	116cc <__assert_fail@plt+0xb0c>
   118b4:	mov	r4, r0
   118b8:	bl	10a88 <unlink@plt>
   118bc:	mov	r0, r4
   118c0:	ldr	r4, [sp]
   118c4:	add	sp, sp, #4
   118c8:	pop	{pc}		; (ldr pc, [sp], #4)
   118cc:	andeq	r6, r1, r8, ror r8
   118d0:	str	r4, [sp, #-8]!
   118d4:	mov	r4, r0
   118d8:	str	lr, [sp, #4]
   118dc:	bl	10b30 <strlen@plt>
   118e0:	uxth	r0, r0
   118e4:	sub	r3, r0, #1
   118e8:	sxth	r3, r3
   118ec:	cmp	r3, #0
   118f0:	blt	11930 <__assert_fail@plt+0xd70>
   118f4:	ldrb	r2, [r4, r3]
   118f8:	cmp	r2, #47	; 0x2f
   118fc:	beq	11930 <__assert_fail@plt+0xd70>
   11900:	sub	r0, r0, #2
   11904:	sxth	r3, r0
   11908:	add	r2, r3, #1
   1190c:	add	r2, r4, r2
   11910:	b	11924 <__assert_fail@plt+0xd64>
   11914:	ldrb	r0, [r2, #-1]!
   11918:	cmp	r0, #47	; 0x2f
   1191c:	beq	11930 <__assert_fail@plt+0xd70>
   11920:	mov	r3, r1
   11924:	tst	r3, #32768	; 0x8000
   11928:	sub	r1, r3, #1
   1192c:	beq	11914 <__assert_fail@plt+0xd54>
   11930:	add	r0, r3, #1
   11934:	add	r0, r4, r0
   11938:	ldr	r4, [sp]
   1193c:	add	sp, sp, #4
   11940:	pop	{pc}		; (ldr pc, [sp], #4)
   11944:	mov	r0, #0
   11948:	str	r4, [sp, #-8]!
   1194c:	str	lr, [sp, #4]
   11950:	bl	11740 <__assert_fail@plt+0xb80>
   11954:	ldr	r2, [pc, #80]	; 119ac <__assert_fail@plt+0xdec>
   11958:	str	r4, [sp, #-8]!
   1195c:	ldr	r1, [pc, #76]	; 119b0 <__assert_fail@plt+0xdf0>
   11960:	str	lr, [sp, #4]
   11964:	add	r2, pc, r2
   11968:	ldr	r1, [r2, r1]
   1196c:	ldr	r1, [r1]
   11970:	cmp	r1, #0
   11974:	beq	11980 <__assert_fail@plt+0xdc0>
   11978:	blx	r1
   1197c:	bl	11944 <__assert_fail@plt+0xd84>
   11980:	mov	r3, r0
   11984:	ldr	ip, [pc, #40]	; 119b4 <__assert_fail@plt+0xdf4>
   11988:	ldr	r0, [pc, #40]	; 119b8 <__assert_fail@plt+0xdf8>
   1198c:	ldr	r1, [pc, #40]	; 119bc <__assert_fail@plt+0xdfc>
   11990:	ldr	ip, [r2, ip]
   11994:	ldr	r0, [r2, r0]
   11998:	add	r1, pc, r1
   1199c:	ldr	r2, [ip]
   119a0:	ldr	r0, [r0]
   119a4:	bl	10b3c <fprintf@plt>
   119a8:	b	1197c <__assert_fail@plt+0xdbc>
   119ac:	muleq	r1, r4, r6
   119b0:	strheq	r0, [r0], -r4
   119b4:	andeq	r0, r0, r8, asr #1
   119b8:	andeq	r0, r0, r0, asr #1
   119bc:	andeq	r2, r0, ip, asr #1

000119c0 <error@@Base>:
   119c0:	str	r4, [sp, #-8]!
   119c4:	mov	r3, r0
   119c8:	ldr	r4, [pc, #56]	; 11a08 <error@@Base+0x48>
   119cc:	str	lr, [sp, #4]
   119d0:	ldr	r0, [pc, #52]	; 11a0c <error@@Base+0x4c>
   119d4:	ldr	r2, [pc, #52]	; 11a10 <error@@Base+0x50>
   119d8:	add	r4, pc, r4
   119dc:	ldr	r1, [pc, #48]	; 11a14 <error@@Base+0x54>
   119e0:	ldr	ip, [r4, r0]
   119e4:	ldr	r0, [r4, r2]
   119e8:	add	r1, pc, r1
   119ec:	ldr	r2, [ip]
   119f0:	ldr	r0, [r0]
   119f4:	bl	10b3c <fprintf@plt>
   119f8:	ldr	r3, [pc, #24]	; 11a18 <error@@Base+0x58>
   119fc:	ldr	r3, [r4, r3]
   11a00:	ldr	r0, [r3]
   11a04:	bl	11740 <__assert_fail@plt+0xb80>
   11a08:	andeq	r6, r1, r0, lsr #12
   11a0c:	andeq	r0, r0, r8, asr #1
   11a10:	andeq	r0, r0, r0, asr #1
   11a14:	andeq	r2, r0, ip, lsl #1
   11a18:	andeq	r0, r0, r0, ror #1
   11a1c:	str	r4, [sp, #-8]!
   11a20:	str	lr, [sp, #4]
   11a24:	bl	10a04 <calloc@plt>
   11a28:	cmp	r0, #0
   11a2c:	beq	11a3c <error@@Base+0x7c>
   11a30:	ldr	r4, [sp]
   11a34:	add	sp, sp, #4
   11a38:	pop	{pc}		; (ldr pc, [sp], #4)
   11a3c:	ldr	r0, [pc, #4]	; 11a48 <error@@Base+0x88>
   11a40:	add	r0, pc, r0
   11a44:	bl	119c0 <error@@Base>
   11a48:	andeq	r2, r0, ip, lsr r0
   11a4c:	ldr	r3, [pc, #40]	; 11a7c <error@@Base+0xbc>
   11a50:	add	r3, pc, r3
   11a54:	ldrb	r2, [r3, #2]
   11a58:	cmp	r2, #0
   11a5c:	bxne	lr
   11a60:	ldr	r0, [pc, #24]	; 11a80 <error@@Base+0xc0>
   11a64:	mov	r2, #1
   11a68:	str	r4, [sp, #-8]!
   11a6c:	str	lr, [sp, #4]
   11a70:	strb	r2, [r3, #2]
   11a74:	add	r0, pc, r0
   11a78:	bl	119c0 <error@@Base>
   11a7c:			; <UNDEFINED> instruction: 0x000166bc
   11a80:	andeq	r2, r0, r4, lsr #32
   11a84:	ldr	r4, [pc, #68]	; 11ad0 <error@@Base+0x110>
   11a88:	mov	r3, r0
   11a8c:	push	{lr}		; (str lr, [sp, #-4]!)
   11a90:	sub	sp, sp, #12
   11a94:	ldr	r0, [pc, #56]	; 11ad4 <error@@Base+0x114>
   11a98:	ldr	r2, [pc, #56]	; 11ad8 <error@@Base+0x118>
   11a9c:	add	r4, pc, r4
   11aa0:	ldr	ip, [r4, r0]
   11aa4:	ldr	r0, [r4, r2]
   11aa8:	str	r1, [sp]
   11aac:	ldr	r1, [pc, #40]	; 11adc <error@@Base+0x11c>
   11ab0:	ldr	r2, [ip]
   11ab4:	ldr	r0, [r0]
   11ab8:	add	r1, pc, r1
   11abc:	bl	10b3c <fprintf@plt>
   11ac0:	ldr	r3, [pc, #24]	; 11ae0 <error@@Base+0x120>
   11ac4:	ldr	r3, [r4, r3]
   11ac8:	ldr	r0, [r3]
   11acc:	bl	11740 <__assert_fail@plt+0xb80>
   11ad0:	andeq	r6, r1, ip, asr r5
   11ad4:	andeq	r0, r0, r8, asr #1
   11ad8:	andeq	r0, r0, r0, asr #1
   11adc:	strdeq	r1, [r0], -r0
   11ae0:	andeq	r0, r0, r0, ror #1
   11ae4:	ldr	ip, [pc, #164]	; 11b90 <error@@Base+0x1d0>
   11ae8:	subs	r2, r0, #0
   11aec:	strd	r4, [sp, #-16]!
   11af0:	mov	r4, r1
   11af4:	str	r6, [sp, #8]
   11af8:	str	lr, [sp, #12]
   11afc:	add	ip, pc, ip
   11b00:	beq	11b40 <error@@Base+0x180>
   11b04:	mov	r5, r2
   11b08:	bl	10a34 <fopen@plt>
   11b0c:	cmp	r0, #0
   11b10:	beq	11b24 <error@@Base+0x164>
   11b14:	ldrd	r4, [sp]
   11b18:	ldr	r6, [sp, #8]
   11b1c:	add	sp, sp, #12
   11b20:	pop	{pc}		; (ldr pc, [sp], #4)
   11b24:	ldrb	r3, [r4]
   11b28:	mov	r1, r5
   11b2c:	cmp	r3, #119	; 0x77
   11b30:	beq	11b68 <error@@Base+0x1a8>
   11b34:	ldr	r0, [pc, #88]	; 11b94 <error@@Base+0x1d4>
   11b38:	add	r0, pc, r0
   11b3c:	bl	11a84 <error@@Base+0xc4>
   11b40:	ldrb	r3, [r1]
   11b44:	cmp	r3, #114	; 0x72
   11b48:	beq	11b74 <error@@Base+0x1b4>
   11b4c:	ldr	r3, [pc, #68]	; 11b98 <error@@Base+0x1d8>
   11b50:	ldrd	r4, [sp]
   11b54:	ldr	r6, [sp, #8]
   11b58:	add	sp, sp, #12
   11b5c:	ldr	r3, [ip, r3]
   11b60:	ldr	r0, [r3]
   11b64:	pop	{pc}		; (ldr pc, [sp], #4)
   11b68:	ldr	r0, [pc, #44]	; 11b9c <error@@Base+0x1dc>
   11b6c:	add	r0, pc, r0
   11b70:	bl	11a84 <error@@Base+0xc4>
   11b74:	ldr	r3, [pc, #36]	; 11ba0 <error@@Base+0x1e0>
   11b78:	ldrd	r4, [sp]
   11b7c:	ldr	r6, [sp, #8]
   11b80:	add	sp, sp, #12
   11b84:	ldr	r3, [ip, r3]
   11b88:	ldr	r0, [r3]
   11b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b90:	strdeq	r6, [r1], -ip
   11b94:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   11b98:	ldrdeq	r0, [r0], -r8
   11b9c:	andeq	r1, r0, ip, asr #30
   11ba0:	ldrdeq	r0, [r0], -r4
   11ba4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ba8:	strd	r6, [sp, #8]
   11bac:	mov	r6, r0
   11bb0:	strd	r8, [sp, #16]
   11bb4:	mov	r9, r1
   11bb8:	mov	r8, r3
   11bbc:	strd	sl, [sp, #24]
   11bc0:	str	lr, [sp, #32]
   11bc4:	sub	sp, sp, #20
   11bc8:	ldr	r5, [pc, #600]	; 11e28 <error@@Base+0x468>
   11bcc:	str	r0, [sp]
   11bd0:	ldr	r0, [r1]
   11bd4:	str	r2, [sp, #12]
   11bd8:	bl	118d0 <__assert_fail@plt+0xd10>
   11bdc:	ldr	r3, [pc, #584]	; 11e2c <error@@Base+0x46c>
   11be0:	add	r5, pc, r5
   11be4:	ldr	r4, [pc, #580]	; 11e30 <error@@Base+0x470>
   11be8:	ldr	r3, [r5, r3]
   11bec:	add	r4, pc, r4
   11bf0:	mov	r1, r4
   11bf4:	str	r0, [r3]
   11bf8:	mov	r0, #2
   11bfc:	bl	10af4 <__sysv_signal@plt>
   11c00:	mov	r1, r4
   11c04:	mov	r0, #15
   11c08:	bl	10af4 <__sysv_signal@plt>
   11c0c:	ldr	sl, [r6]
   11c10:	cmp	sl, #1
   11c14:	beq	11dec <error@@Base+0x42c>
   11c18:	movle	r6, #0
   11c1c:	ble	11d74 <error@@Base+0x3b4>
   11c20:	ldr	r3, [pc, #524]	; 11e34 <error@@Base+0x474>
   11c24:	mov	r7, #1
   11c28:	mov	r6, #0
   11c2c:	mov	r4, r7
   11c30:	add	r3, pc, r3
   11c34:	str	r3, [sp, #8]
   11c38:	mov	r3, sl
   11c3c:	mov	sl, r9
   11c40:	b	11c64 <error@@Base+0x2a4>
   11c44:	add	r4, r4, #1
   11c48:	add	r2, r6, #1
   11c4c:	str	r5, [sl, r6, lsl #2]
   11c50:	sxth	r4, r4
   11c54:	sxth	r6, r2
   11c58:	cmp	r4, r3
   11c5c:	mov	r7, r4
   11c60:	bge	11d74 <error@@Base+0x3b4>
   11c64:	ldr	r5, [sl, r4, lsl #2]
   11c68:	lsl	r9, r4, #2
   11c6c:	ldrb	r2, [r5]
   11c70:	cmp	r2, #45	; 0x2d
   11c74:	bne	11c44 <error@@Base+0x284>
   11c78:	ldrb	fp, [r5, #1]
   11c7c:	cmp	fp, #0
   11c80:	beq	11c44 <error@@Base+0x284>
   11c84:	mov	r0, r5
   11c88:	str	r3, [sp, #4]
   11c8c:	bl	10b30 <strlen@plt>
   11c90:	mov	r2, r0
   11c94:	mov	r1, r5
   11c98:	ldr	r0, [sp, #8]
   11c9c:	bl	10b9c <strncmp@plt>
   11ca0:	cmp	r0, #0
   11ca4:	beq	11e00 <error@@Base+0x440>
   11ca8:	ldr	r3, [sp, #4]
   11cac:	add	r7, r7, #1
   11cb0:	cmp	r7, r3
   11cb4:	addlt	r9, sl, r9
   11cb8:	movge	r0, #0
   11cbc:	ldrlt	r0, [r9, #4]
   11cc0:	cmp	r8, #0
   11cc4:	beq	11d08 <error@@Base+0x348>
   11cc8:	ldrb	r2, [r8]
   11ccc:	cmp	r2, #0
   11cd0:	beq	11d08 <error@@Base+0x348>
   11cd4:	cmp	fp, r2
   11cd8:	beq	11d18 <error@@Base+0x358>
   11cdc:	mov	r2, #0
   11ce0:	b	11cec <error@@Base+0x32c>
   11ce4:	cmp	fp, ip
   11ce8:	beq	11d1c <error@@Base+0x35c>
   11cec:	add	r2, r2, #1
   11cf0:	sxth	r2, r2
   11cf4:	add	r1, r2, r2, lsl #1
   11cf8:	ldrb	ip, [r8, r1, lsl #2]
   11cfc:	add	r1, r8, r1, lsl #2
   11d00:	cmp	ip, #0
   11d04:	bne	11ce4 <error@@Base+0x324>
   11d08:	ldr	r0, [pc, #296]	; 11e38 <error@@Base+0x478>
   11d0c:	mov	r1, r5
   11d10:	add	r0, pc, r0
   11d14:	bl	11a84 <error@@Base+0xc4>
   11d18:	mov	r1, r8
   11d1c:	ldr	r2, [r1, #4]
   11d20:	cmp	r2, #0
   11d24:	beq	11dac <error@@Base+0x3ec>
   11d28:	ldrb	ip, [r5, #2]
   11d2c:	cmp	ip, #0
   11d30:	bne	11d98 <error@@Base+0x3d8>
   11d34:	cmp	r0, #0
   11d38:	beq	11e08 <error@@Base+0x448>
   11d3c:	ldr	r1, [r2]
   11d40:	cmp	r1, #0
   11d44:	bne	11e18 <error@@Base+0x458>
   11d48:	str	r0, [r2]
   11d4c:	uxth	r2, r4
   11d50:	ldrb	r1, [r5, #2]
   11d54:	add	r4, r2, #1
   11d58:	sxth	r4, r4
   11d5c:	cmp	r1, #0
   11d60:	addeq	r4, r2, #2
   11d64:	sxtheq	r4, r4
   11d68:	cmp	r4, r3
   11d6c:	mov	r7, r4
   11d70:	blt	11c64 <error@@Base+0x2a4>
   11d74:	ldr	r3, [sp]
   11d78:	str	r6, [r3]
   11d7c:	add	sp, sp, #20
   11d80:	ldrd	r4, [sp]
   11d84:	ldrd	r6, [sp, #8]
   11d88:	ldrd	r8, [sp, #16]
   11d8c:	ldrd	sl, [sp, #24]
   11d90:	add	sp, sp, #32
   11d94:	pop	{pc}		; (ldr pc, [sp], #4)
   11d98:	ldr	r1, [r2]
   11d9c:	cmp	r1, #0
   11da0:	bne	11e18 <error@@Base+0x458>
   11da4:	add	r0, r5, #2
   11da8:	b	11d48 <error@@Base+0x388>
   11dac:	ldr	r3, [r1, #8]
   11db0:	cmp	r3, #0
   11db4:	beq	11d08 <error@@Base+0x348>
   11db8:	ldrb	r2, [r5, #2]
   11dbc:	cmp	r2, #0
   11dc0:	bne	11d08 <error@@Base+0x348>
   11dc4:	ldrb	r2, [r3]
   11dc8:	cmp	r2, #0
   11dcc:	bne	11e18 <error@@Base+0x458>
   11dd0:	mov	r2, #1
   11dd4:	add	r4, r4, #1
   11dd8:	sxth	r4, r4
   11ddc:	strb	r2, [r3]
   11de0:	ldr	r3, [sp]
   11de4:	ldr	r3, [r3]
   11de8:	b	11c58 <error@@Base+0x298>
   11dec:	ldr	r3, [pc, #72]	; 11e3c <error@@Base+0x47c>
   11df0:	ldr	r3, [r5, r3]
   11df4:	ldrb	r6, [r3]
   11df8:	cmp	r6, #0
   11dfc:	beq	11d74 <error@@Base+0x3b4>
   11e00:	ldr	r0, [sp, #12]
   11e04:	bl	11954 <__assert_fail@plt+0xd94>
   11e08:	ldr	r3, [r1, #8]
   11e0c:	cmp	r3, #0
   11e10:	bne	11dc4 <error@@Base+0x404>
   11e14:	b	11d08 <error@@Base+0x348>
   11e18:	ldr	r0, [pc, #32]	; 11e40 <error@@Base+0x480>
   11e1c:	mov	r1, r5
   11e20:	add	r0, pc, r0
   11e24:	bl	11a84 <error@@Base+0xc4>
   11e28:	andeq	r6, r1, r8, lsl r4
   11e2c:	andeq	r0, r0, r8, asr #1
   11e30:			; <UNDEFINED> instruction: 0xfffffe58
   11e34:			; <UNDEFINED> instruction: 0x00001eb4
   11e38:	ldrdeq	r1, [r0], -ip
   11e3c:	andeq	r0, r0, ip, lsr #1
   11e40:	ldrdeq	r1, [r0], -ip
   11e44:	ldr	r2, [pc, #60]	; 11e88 <error@@Base+0x4c8>
   11e48:	mov	r3, r0
   11e4c:	push	{lr}		; (str lr, [sp, #-4]!)
   11e50:	sub	sp, sp, #12
   11e54:	ldr	ip, [pc, #48]	; 11e8c <error@@Base+0x4cc>
   11e58:	ldr	r0, [pc, #48]	; 11e90 <error@@Base+0x4d0>
   11e5c:	add	r2, pc, r2
   11e60:	ldr	ip, [r2, ip]
   11e64:	ldr	r0, [r2, r0]
   11e68:	str	r1, [sp]
   11e6c:	ldr	r1, [pc, #32]	; 11e94 <error@@Base+0x4d4>
   11e70:	ldr	r2, [ip]
   11e74:	ldr	r0, [r0]
   11e78:	add	r1, pc, r1
   11e7c:	bl	10b3c <fprintf@plt>
   11e80:	add	sp, sp, #12
   11e84:	pop	{pc}		; (ldr pc, [sp], #4)
   11e88:	muleq	r1, ip, r1
   11e8c:	andeq	r0, r0, r8, asr #1
   11e90:	andeq	r0, r0, r0, asr #1
   11e94:	andeq	r1, r0, r0, lsr ip
   11e98:	strd	r4, [sp, #-16]!
   11e9c:	mov	r2, r0
   11ea0:	mov	r5, r1
   11ea4:	ldr	r4, [pc, #76]	; 11ef8 <error@@Base+0x538>
   11ea8:	mov	r1, #99	; 0x63
   11eac:	str	r6, [sp, #8]
   11eb0:	str	lr, [sp, #12]
   11eb4:	add	r4, pc, r4
   11eb8:	mov	r0, r4
   11ebc:	bl	10a58 <fgets@plt>
   11ec0:	cmp	r0, #0
   11ec4:	beq	11ee8 <error@@Base+0x528>
   11ec8:	ldr	r1, [pc, #44]	; 11efc <error@@Base+0x53c>
   11ecc:	mov	r2, r5
   11ed0:	mov	r0, r4
   11ed4:	add	r1, pc, r1
   11ed8:	bl	10b48 <__isoc99_sscanf@plt>
   11edc:	sub	r0, r0, #1
   11ee0:	clz	r0, r0
   11ee4:	lsr	r0, r0, #5
   11ee8:	ldrd	r4, [sp]
   11eec:	ldr	r6, [sp, #8]
   11ef0:	add	sp, sp, #12
   11ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ef8:	andeq	r6, r1, ip, asr r2
   11efc:	andeq	r1, r0, r0, asr #24
   11f00:	strd	r4, [sp, #-16]!
   11f04:	mov	r5, r1
   11f08:	mov	r1, #99	; 0x63
   11f0c:	ldr	r4, [pc, #84]	; 11f68 <error@@Base+0x5a8>
   11f10:	str	r6, [sp, #8]
   11f14:	mov	r6, r2
   11f18:	mov	r2, r0
   11f1c:	str	lr, [sp, #12]
   11f20:	add	r4, pc, r4
   11f24:	mov	r0, r4
   11f28:	bl	10a58 <fgets@plt>
   11f2c:	cmp	r0, #0
   11f30:	beq	11f58 <error@@Base+0x598>
   11f34:	ldr	r1, [pc, #48]	; 11f6c <error@@Base+0x5ac>
   11f38:	mov	r3, r6
   11f3c:	mov	r2, r5
   11f40:	mov	r0, r4
   11f44:	add	r1, pc, r1
   11f48:	bl	10b48 <__isoc99_sscanf@plt>
   11f4c:	sub	r0, r0, #2
   11f50:	clz	r0, r0
   11f54:	lsr	r0, r0, #5
   11f58:	ldrd	r4, [sp]
   11f5c:	ldr	r6, [sp, #8]
   11f60:	add	sp, sp, #12
   11f64:	pop	{pc}		; (ldr pc, [sp], #4)
   11f68:	strdeq	r6, [r1], -r0
   11f6c:	andeq	r1, r0, ip, asr #23
   11f70:	ldr	r0, [r0, #8]
   11f74:	ldr	r1, [r1, #8]
   11f78:	b	117c8 <__assert_fail@plt+0xc08>
   11f7c:	subs	ip, r1, #0
   11f80:	mov	r3, r0
   11f84:	bne	11f9c <error@@Base+0x5dc>
   11f88:	ldr	r0, [pc, #72]	; 11fd8 <error@@Base+0x618>
   11f8c:	mov	r2, #8
   11f90:	mov	r1, #1
   11f94:	add	r0, pc, r0
   11f98:	b	10aac <fwrite@plt>
   11f9c:	ldr	r3, [r2]
   11fa0:	vmov	s15, ip
   11fa4:	vldr	d5, [pc, #36]	; 11fd0 <error@@Base+0x610>
   11fa8:	ldr	r1, [pc, #44]	; 11fdc <error@@Base+0x61c>
   11fac:	sub	r3, ip, r3
   11fb0:	vmov	s14, r3
   11fb4:	add	r1, pc, r1
   11fb8:	vcvt.f64.s32	d6, s15
   11fbc:	vcvt.f64.s32	d7, s14
   11fc0:	vmul.f64	d7, d7, d5
   11fc4:	vdiv.f64	d7, d7, d6
   11fc8:	vmov	r2, r3, d7
   11fcc:	b	10b3c <fprintf@plt>
   11fd0:	andeq	r0, r0, r0
   11fd4:	subsmi	r0, r9, r0
   11fd8:	andeq	r1, r0, r4, lsl #23
   11fdc:	andeq	r1, r0, r0, ror fp
   11fe0:	strd	r4, [sp, #-16]!
   11fe4:	subs	r4, r1, #0
   11fe8:	mov	r5, r0
   11fec:	str	r6, [sp, #8]
   11ff0:	str	lr, [sp, #12]
   11ff4:	beq	12040 <error@@Base+0x680>
   11ff8:	ldr	r1, [pc, #92]	; 1205c <error@@Base+0x69c>
   11ffc:	ldrd	r2, [r4]
   12000:	add	r1, pc, r1
   12004:	bl	10b3c <fprintf@plt>
   12008:	mov	r2, r4
   1200c:	mov	r0, r5
   12010:	ldr	r1, [r2], #4
   12014:	bl	11f7c <error@@Base+0x5bc>
   12018:	ldr	r0, [pc, #64]	; 12060 <error@@Base+0x6a0>
   1201c:	mov	r3, r5
   12020:	mov	r2, #3
   12024:	mov	r1, #1
   12028:	ldrd	r4, [sp]
   1202c:	ldr	r6, [sp, #8]
   12030:	add	r0, pc, r0
   12034:	ldr	lr, [sp, #12]
   12038:	add	sp, sp, #16
   1203c:	b	10aac <fwrite@plt>
   12040:	mov	r3, r0
   12044:	ldr	r0, [pc, #24]	; 12064 <error@@Base+0x6a4>
   12048:	mov	r2, #26
   1204c:	mov	r1, #1
   12050:	add	r0, pc, r0
   12054:	bl	10aac <fwrite@plt>
   12058:	b	12018 <error@@Base+0x658>
   1205c:	andeq	r1, r0, ip, lsr #22
   12060:	andeq	r1, r0, r4, lsr #22
   12064:	andeq	r1, r0, r8, ror #21
   12068:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1206c:	mov	r5, r1
   12070:	ldr	r1, [pc, #340]	; 121cc <error@@Base+0x80c>
   12074:	strd	r6, [sp, #8]
   12078:	mov	r6, r0
   1207c:	strd	r8, [sp, #16]
   12080:	mov	r9, r2
   12084:	mov	r2, r3
   12088:	strd	sl, [sp, #24]
   1208c:	str	lr, [sp, #32]
   12090:	sub	sp, sp, #4
   12094:	ldrb	r8, [sp, #40]	; 0x28
   12098:	add	r1, pc, r1
   1209c:	ldrb	sl, [sp, #44]	; 0x2c
   120a0:	bl	10b3c <fprintf@plt>
   120a4:	mov	r0, r6
   120a8:	mov	r1, #0
   120ac:	bl	11fe0 <error@@Base+0x620>
   120b0:	cmp	r8, #0
   120b4:	bne	1215c <error@@Base+0x79c>
   120b8:	ldr	r2, [pc, #272]	; 121d0 <error@@Base+0x810>
   120bc:	add	r2, pc, r2
   120c0:	ldr	r1, [pc, #268]	; 121d4 <error@@Base+0x814>
   120c4:	sub	fp, r9, #1
   120c8:	mov	r0, r6
   120cc:	uxth	fp, fp
   120d0:	mov	r4, #1
   120d4:	ldr	r7, [pc, #252]	; 121d8 <error@@Base+0x818>
   120d8:	add	fp, fp, #2
   120dc:	add	r1, pc, r1
   120e0:	bl	10b3c <fprintf@plt>
   120e4:	add	r7, pc, r7
   120e8:	ldr	r3, [r5, r4, lsl #3]
   120ec:	mov	r0, r6
   120f0:	add	r1, r5, r4, lsl #3
   120f4:	cmp	r3, #0
   120f8:	ble	12110 <error@@Base+0x750>
   120fc:	bl	11fe0 <error@@Base+0x620>
   12100:	mov	r2, r4
   12104:	mov	r1, r7
   12108:	mov	r0, r6
   1210c:	bl	10b3c <fprintf@plt>
   12110:	add	r4, r4, #1
   12114:	cmp	fp, r4
   12118:	bne	120e8 <error@@Base+0x728>
   1211c:	cmp	r8, #0
   12120:	beq	12138 <error@@Base+0x778>
   12124:	add	r1, r9, #1
   12128:	ldr	r3, [r5, r1, lsl #3]
   1212c:	add	r1, r5, r1, lsl #3
   12130:	cmp	r3, #0
   12134:	bgt	12168 <error@@Base+0x7a8>
   12138:	cmp	sl, #0
   1213c:	bne	1218c <error@@Base+0x7cc>
   12140:	add	sp, sp, #4
   12144:	ldrd	r4, [sp]
   12148:	ldrd	r6, [sp, #8]
   1214c:	ldrd	r8, [sp, #16]
   12150:	ldrd	sl, [sp, #24]
   12154:	add	sp, sp, #32
   12158:	pop	{pc}		; (ldr pc, [sp], #4)
   1215c:	ldr	r2, [pc, #120]	; 121dc <error@@Base+0x81c>
   12160:	add	r2, pc, r2
   12164:	b	120c0 <error@@Base+0x700>
   12168:	mov	r0, r6
   1216c:	bl	11fe0 <error@@Base+0x620>
   12170:	ldr	r1, [pc, #104]	; 121e0 <error@@Base+0x820>
   12174:	mov	r2, r9
   12178:	mov	r0, r6
   1217c:	add	r1, pc, r1
   12180:	bl	10b3c <fprintf@plt>
   12184:	cmp	sl, #0
   12188:	beq	12140 <error@@Base+0x780>
   1218c:	mov	r1, r5
   12190:	mov	r0, r6
   12194:	bl	11fe0 <error@@Base+0x620>
   12198:	ldr	r0, [pc, #68]	; 121e4 <error@@Base+0x824>
   1219c:	mov	r3, r6
   121a0:	mov	r2, #7
   121a4:	mov	r1, #1
   121a8:	add	r0, pc, r0
   121ac:	add	sp, sp, #4
   121b0:	ldrd	r4, [sp]
   121b4:	ldrd	r6, [sp, #8]
   121b8:	ldrd	r8, [sp, #16]
   121bc:	ldrd	sl, [sp, #24]
   121c0:	ldr	lr, [sp, #32]
   121c4:	add	sp, sp, #36	; 0x24
   121c8:	b	10aac <fwrite@plt>
   121cc:	ldrdeq	r1, [r0], -r0
   121d0:	andeq	r1, r0, r4, lsr #21
   121d4:	muleq	r0, ip, r9
   121d8:	andeq	r1, r0, ip, lsl #21
   121dc:	strdeq	r1, [r0], -r8
   121e0:	andeq	r1, r0, r0, lsl #20
   121e4:	andeq	r1, r0, r0, ror #19
   121e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   121ec:	add	r5, r1, #4096	; 0x1000
   121f0:	mov	r4, r2
   121f4:	strd	r6, [sp, #8]
   121f8:	mov	r6, r0
   121fc:	mov	r0, r1
   12200:	str	r8, [sp, #16]
   12204:	str	lr, [sp, #20]
   12208:	bl	115c0 <__assert_fail@plt+0xa00>
   1220c:	ldr	r2, [pc, #160]	; 122b4 <error@@Base+0x8f4>
   12210:	ldr	r1, [r5, #3952]	; 0xf70
   12214:	ldr	r0, [r5, #3956]	; 0xf74
   12218:	add	r2, pc, r2
   1221c:	bl	113ac <__assert_fail@plt+0x7ec>
   12220:	ldr	r1, [pc, #144]	; 122b8 <error@@Base+0x8f8>
   12224:	mov	r2, r4
   12228:	mov	r0, r6
   1222c:	add	r1, pc, r1
   12230:	bl	10b3c <fprintf@plt>
   12234:	mov	r0, r6
   12238:	mov	r1, #0
   1223c:	bl	11fe0 <error@@Base+0x620>
   12240:	mov	r1, r6
   12244:	mov	r0, #10
   12248:	bl	10b6c <fputc@plt>
   1224c:	ldr	r3, [r5, #3956]	; 0xf74
   12250:	cmp	r3, #0
   12254:	ble	122a0 <error@@Base+0x8e0>
   12258:	ldr	r7, [pc, #92]	; 122bc <error@@Base+0x8fc>
   1225c:	mov	r4, #0
   12260:	add	r7, pc, r7
   12264:	ldr	r3, [r5, #3952]	; 0xf70
   12268:	mov	r0, r6
   1226c:	ldr	r1, [r3, r4, lsl #2]
   12270:	add	r1, r1, #12
   12274:	bl	11fe0 <error@@Base+0x620>
   12278:	ldr	r3, [r5, #3952]	; 0xf70
   1227c:	mov	r1, r7
   12280:	mov	r0, r6
   12284:	ldr	r3, [r3, r4, lsl #2]
   12288:	add	r4, r4, #1
   1228c:	ldr	r2, [r3, #8]
   12290:	bl	10b3c <fprintf@plt>
   12294:	ldr	r3, [r5, #3956]	; 0xf74
   12298:	cmp	r3, r4
   1229c:	bgt	12264 <error@@Base+0x8a4>
   122a0:	ldrd	r4, [sp]
   122a4:	ldrd	r6, [sp, #8]
   122a8:	ldr	r8, [sp, #16]
   122ac:	add	sp, sp, #20
   122b0:	pop	{pc}		; (ldr pc, [sp], #4)
   122b4:			; <UNDEFINED> instruction: 0xfffffd50
   122b8:	andeq	r1, r0, ip, lsr r9
   122bc:	andeq	r1, r0, r8, lsl r8
   122c0:	ldr	ip, [r0]
   122c4:	ldr	r3, [r0, #4]
   122c8:	add	r1, ip, r1
   122cc:	add	r2, r3, r2
   122d0:	stm	r0, {r1, r2}
   122d4:	bx	lr
   122d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   122dc:	mov	r2, r0
   122e0:	mov	r5, r0
   122e4:	ldr	r4, [pc, #244]	; 123e0 <error@@Base+0xa20>
   122e8:	strd	r6, [sp, #8]
   122ec:	mov	r6, r1
   122f0:	mov	r1, #99	; 0x63
   122f4:	strd	r8, [sp, #16]
   122f8:	str	sl, [sp, #24]
   122fc:	str	lr, [sp, #28]
   12300:	sub	sp, sp, #8
   12304:	add	r4, pc, r4
   12308:	mov	r0, r4
   1230c:	bl	10a58 <fgets@plt>
   12310:	cmp	r0, #0
   12314:	beq	123bc <error@@Base+0x9fc>
   12318:	mov	r0, r4
   1231c:	mov	r2, r5
   12320:	mov	r1, #99	; 0x63
   12324:	bl	10a58 <fgets@plt>
   12328:	cmp	r0, #0
   1232c:	beq	123bc <error@@Base+0x9fc>
   12330:	ldr	r4, [pc, #172]	; 123e4 <error@@Base+0xa24>
   12334:	mov	sl, #0
   12338:	add	r8, sp, #4
   1233c:	mov	r7, sp
   12340:	ldr	r9, [pc, #160]	; 123e8 <error@@Base+0xa28>
   12344:	add	r4, pc, r4
   12348:	add	r4, r4, #29
   1234c:	add	r9, pc, r9
   12350:	b	12368 <error@@Base+0x9a8>
   12354:	ldr	r1, [sp]
   12358:	add	r3, r6, r3, lsl #3
   1235c:	mov	r0, r3
   12360:	ldr	r2, [sp, #4]
   12364:	bl	122c0 <error@@Base+0x900>
   12368:	mov	r2, r8
   1236c:	mov	r1, r7
   12370:	mov	r0, r5
   12374:	bl	11f00 <error@@Base+0x540>
   12378:	mov	r1, #0
   1237c:	mov	r2, #10
   12380:	cmp	r0, r1
   12384:	mov	r0, r4
   12388:	beq	123c0 <error@@Base+0xa00>
   1238c:	bl	10a1c <strtol@plt>
   12390:	subs	r3, r0, #0
   12394:	mov	r1, r9
   12398:	mov	r0, r4
   1239c:	bne	12354 <error@@Base+0x994>
   123a0:	bl	10a10 <strcmp@plt>
   123a4:	ldr	r1, [sp]
   123a8:	cmp	r0, #0
   123ac:	mov	r3, r6
   123b0:	addne	r3, r6, #88	; 0x58
   123b4:	moveq	sl, r1
   123b8:	b	1235c <error@@Base+0x99c>
   123bc:	mov	sl, #0
   123c0:	mov	r0, sl
   123c4:	add	sp, sp, #8
   123c8:	ldrd	r4, [sp]
   123cc:	ldrd	r6, [sp, #8]
   123d0:	ldrd	r8, [sp, #16]
   123d4:	ldr	sl, [sp, #24]
   123d8:	add	sp, sp, #28
   123dc:	pop	{pc}		; (ldr pc, [sp], #4)
   123e0:	andeq	r5, r1, ip, lsl #28
   123e4:	andeq	r5, r1, ip, asr #27
   123e8:	andeq	r1, r0, ip, lsr r8
   123ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   123f0:	mov	r5, r2
   123f4:	strd	r6, [sp, #8]
   123f8:	mov	r6, r3
   123fc:	mov	r7, r0
   12400:	str	r8, [sp, #16]
   12404:	mov	r8, r1
   12408:	str	lr, [sp, #20]
   1240c:	bl	1142c <__assert_fail@plt+0x86c>
   12410:	subs	r4, r0, #0
   12414:	beq	1243c <error@@Base+0xa7c>
   12418:	mov	r2, r6
   1241c:	mov	r1, r5
   12420:	ldrd	r6, [sp, #8]
   12424:	add	r0, r4, #12
   12428:	ldrd	r4, [sp]
   1242c:	ldr	r8, [sp, #16]
   12430:	ldr	lr, [sp, #20]
   12434:	add	sp, sp, #24
   12438:	b	122c0 <error@@Base+0x900>
   1243c:	mov	r1, #20
   12440:	mov	r0, #1
   12444:	bl	11a1c <error@@Base+0x5c>
   12448:	mov	r4, r0
   1244c:	mov	r0, r8
   12450:	bl	10a70 <strdup@plt>
   12454:	mov	r1, r4
   12458:	str	r0, [r4, #8]
   1245c:	mov	r0, r7
   12460:	bl	114b8 <__assert_fail@plt+0x8f8>
   12464:	b	12418 <error@@Base+0xa58>
   12468:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1246c:	mov	r2, r0
   12470:	mov	r5, r0
   12474:	ldr	r4, [pc, #180]	; 12530 <error@@Base+0xb70>
   12478:	strd	r6, [sp, #8]
   1247c:	mov	r6, r1
   12480:	mov	r1, #99	; 0x63
   12484:	strd	r8, [sp, #16]
   12488:	str	sl, [sp, #24]
   1248c:	str	lr, [sp, #28]
   12490:	sub	sp, sp, #8
   12494:	add	r4, pc, r4
   12498:	mov	r0, r4
   1249c:	bl	10a58 <fgets@plt>
   124a0:	cmp	r0, #0
   124a4:	beq	12514 <error@@Base+0xb54>
   124a8:	mov	r0, r4
   124ac:	mov	r2, r5
   124b0:	mov	r1, #99	; 0x63
   124b4:	bl	10a58 <fgets@plt>
   124b8:	cmp	r0, #0
   124bc:	beq	12514 <error@@Base+0xb54>
   124c0:	ldr	r4, [pc, #108]	; 12534 <error@@Base+0xb74>
   124c4:	add	r8, sp, #4
   124c8:	mov	r7, sp
   124cc:	mov	sl, #0
   124d0:	add	r4, pc, r4
   124d4:	add	r9, r4, #29
   124d8:	b	124f8 <error@@Base+0xb38>
   124dc:	bl	10b30 <strlen@plt>
   124e0:	add	ip, r4, r0
   124e4:	mov	r1, r9
   124e8:	ldrd	r2, [sp]
   124ec:	mov	r0, r6
   124f0:	strb	sl, [ip, #-1]
   124f4:	bl	123ec <error@@Base+0xa2c>
   124f8:	mov	r2, r8
   124fc:	mov	r1, r7
   12500:	mov	r0, r5
   12504:	bl	11f00 <error@@Base+0x540>
   12508:	cmp	r0, #0
   1250c:	mov	r0, r4
   12510:	bne	124dc <error@@Base+0xb1c>
   12514:	add	sp, sp, #8
   12518:	ldrd	r4, [sp]
   1251c:	ldrd	r6, [sp, #8]
   12520:	ldrd	r8, [sp, #16]
   12524:	ldr	sl, [sp, #24]
   12528:	add	sp, sp, #28
   1252c:	pop	{pc}		; (ldr pc, [sp], #4)
   12530:	andeq	r5, r1, ip, ror ip
   12534:	andeq	r5, r1, r0, asr #24
   12538:	strd	r4, [sp, #-20]!	; 0xffffffec
   1253c:	strd	r6, [sp, #8]
   12540:	mov	r7, r1
   12544:	mov	r6, r0
   12548:	mov	r0, r1
   1254c:	ldr	r1, [pc, #404]	; 126e8 <error@@Base+0xd28>
   12550:	str	lr, [sp, #16]
   12554:	sub	sp, sp, #12
   12558:	ldr	r5, [pc, #396]	; 126ec <error@@Base+0xd2c>
   1255c:	add	r1, pc, r1
   12560:	bl	11ae4 <error@@Base+0x124>
   12564:	add	r5, pc, r5
   12568:	mov	r2, r0
   1256c:	mov	r4, r0
   12570:	mov	r1, #99	; 0x63
   12574:	mov	r0, r5
   12578:	bl	10a58 <fgets@plt>
   1257c:	cmp	r0, #0
   12580:	beq	126c4 <error@@Base+0xd04>
   12584:	ldr	r1, [pc, #356]	; 126f0 <error@@Base+0xd30>
   12588:	mov	r2, #45	; 0x2d
   1258c:	mov	r0, r5
   12590:	add	r1, pc, r1
   12594:	bl	10b9c <strncmp@plt>
   12598:	cmp	r0, #0
   1259c:	bne	126c4 <error@@Base+0xd04>
   125a0:	mov	r2, r4
   125a4:	mov	r1, #99	; 0x63
   125a8:	mov	r0, r5
   125ac:	bl	10a58 <fgets@plt>
   125b0:	cmp	r0, #0
   125b4:	beq	126c4 <error@@Base+0xd04>
   125b8:	ldr	r1, [pc, #308]	; 126f4 <error@@Base+0xd34>
   125bc:	mov	r0, r5
   125c0:	add	r1, pc, r1
   125c4:	bl	10a10 <strcmp@plt>
   125c8:	cmp	r0, #0
   125cc:	bne	126c4 <error@@Base+0xd04>
   125d0:	mov	r1, sp
   125d4:	mov	r0, r4
   125d8:	bl	11e98 <error@@Base+0x4d8>
   125dc:	cmp	r0, #0
   125e0:	beq	126c4 <error@@Base+0xd04>
   125e4:	add	r1, sp, #4
   125e8:	mov	r0, r4
   125ec:	bl	11e98 <error@@Base+0x4d8>
   125f0:	cmp	r0, #0
   125f4:	beq	126c4 <error@@Base+0xd04>
   125f8:	mov	r2, r4
   125fc:	mov	r1, #99	; 0x63
   12600:	mov	r0, r5
   12604:	bl	10a58 <fgets@plt>
   12608:	cmp	r0, #0
   1260c:	beq	126c4 <error@@Base+0xd04>
   12610:	mov	r0, r5
   12614:	mov	r2, r4
   12618:	mov	r1, #99	; 0x63
   1261c:	bl	10a58 <fgets@plt>
   12620:	cmp	r0, #0
   12624:	beq	126c4 <error@@Base+0xd04>
   12628:	mov	r0, r6
   1262c:	ldm	sp, {r1, r2}
   12630:	bl	122c0 <error@@Base+0x900>
   12634:	add	r1, r6, #8
   12638:	mov	r0, r4
   1263c:	bl	122d8 <error@@Base+0x918>
   12640:	mov	r7, r0
   12644:	add	r1, r6, #416	; 0x1a0
   12648:	mov	r0, r4
   1264c:	bl	122d8 <error@@Base+0x918>
   12650:	mov	r5, r0
   12654:	add	r1, r6, #824	; 0x338
   12658:	mov	r0, r4
   1265c:	bl	122d8 <error@@Base+0x918>
   12660:	ldr	r3, [sp]
   12664:	cmp	r3, #0
   12668:	bgt	12688 <error@@Base+0xcc8>
   1266c:	mov	r0, r4
   12670:	bl	11820 <__assert_fail@plt+0xc60>
   12674:	add	sp, sp, #12
   12678:	ldrd	r4, [sp]
   1267c:	ldrd	r6, [sp, #8]
   12680:	add	sp, sp, #16
   12684:	pop	{pc}		; (ldr pc, [sp], #4)
   12688:	add	r1, r6, #920	; 0x398
   1268c:	mov	r0, r4
   12690:	bl	122d8 <error@@Base+0x918>
   12694:	cmp	r7, #0
   12698:	ble	126a8 <error@@Base+0xce8>
   1269c:	add	r1, r6, #992	; 0x3e0
   126a0:	mov	r0, r4
   126a4:	bl	12468 <error@@Base+0xaa8>
   126a8:	cmp	r5, #0
   126ac:	ble	1266c <error@@Base+0xcac>
   126b0:	add	r1, r6, #9024	; 0x2340
   126b4:	mov	r0, r4
   126b8:	add	r1, r1, #24
   126bc:	bl	12468 <error@@Base+0xaa8>
   126c0:	b	1266c <error@@Base+0xcac>
   126c4:	cmp	r7, #0
   126c8:	beq	126dc <error@@Base+0xd1c>
   126cc:	ldr	r0, [pc, #36]	; 126f8 <error@@Base+0xd38>
   126d0:	mov	r1, r7
   126d4:	add	r0, pc, r0
   126d8:	bl	11a84 <error@@Base+0xc4>
   126dc:	ldr	r7, [pc, #24]	; 126fc <error@@Base+0xd3c>
   126e0:	add	r7, pc, r7
   126e4:	b	126cc <error@@Base+0xd0c>
   126e8:	andeq	r1, r0, ip, lsr r6
   126ec:	andeq	r5, r1, ip, lsr #23
   126f0:	andeq	r1, r0, ip, lsl #12
   126f4:	andeq	r4, r0, ip, lsl #21
   126f8:	strdeq	r1, [r0], -r8
   126fc:			; <UNDEFINED> instruction: 0x000014b0
   12700:	mov	r3, r1
   12704:	ldr	r1, [pc, #404]	; 128a0 <error@@Base+0xee0>
   12708:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1270c:	mov	r5, r0
   12710:	mov	r0, r3
   12714:	strd	r6, [sp, #8]
   12718:	mov	r7, r5
   1271c:	mov	r6, #1
   12720:	strd	r8, [sp, #16]
   12724:	mov	r8, r5
   12728:	mov	r9, #0
   1272c:	str	lr, [sp, #24]
   12730:	sub	sp, sp, #12
   12734:	add	r1, pc, r1
   12738:	bl	11ae4 <error@@Base+0x124>
   1273c:	ldr	r3, [pc, #352]	; 128a4 <error@@Base+0xee4>
   12740:	mov	r4, r0
   12744:	ldr	r2, [pc, #348]	; 128a8 <error@@Base+0xee8>
   12748:	ldr	r1, [pc, #348]	; 128ac <error@@Base+0xeec>
   1274c:	add	r3, pc, r3
   12750:	add	r2, pc, r2
   12754:	add	r1, pc, r1
   12758:	bl	10b3c <fprintf@plt>
   1275c:	ldr	r1, [pc, #332]	; 128b0 <error@@Base+0xef0>
   12760:	mov	r0, r4
   12764:	ldr	r2, [r5]
   12768:	add	r1, pc, r1
   1276c:	bl	10b3c <fprintf@plt>
   12770:	ldr	r1, [pc, #316]	; 128b4 <error@@Base+0xef4>
   12774:	mov	r0, r4
   12778:	ldr	r2, [r8, #4]!
   1277c:	add	r1, pc, r1
   12780:	bl	10b3c <fprintf@plt>
   12784:	mov	r2, r8
   12788:	mov	r0, r4
   1278c:	ldr	r1, [r7], #8
   12790:	bl	11f7c <error@@Base+0x5bc>
   12794:	ldr	r8, [pc, #284]	; 128b8 <error@@Base+0xef8>
   12798:	mov	r3, r4
   1279c:	mov	r2, #12
   127a0:	mov	r1, r6
   127a4:	ldr	r0, [pc, #272]	; 128bc <error@@Base+0xefc>
   127a8:	add	r8, pc, r8
   127ac:	add	r0, pc, r0
   127b0:	bl	10aac <fwrite@plt>
   127b4:	mov	r1, r7
   127b8:	mov	r0, r4
   127bc:	str	r9, [sp]
   127c0:	mov	r3, r8
   127c4:	mov	r2, #50	; 0x32
   127c8:	str	r6, [sp, #4]
   127cc:	bl	12068 <error@@Base+0x6a8>
   127d0:	ldr	r3, [pc, #232]	; 128c0 <error@@Base+0xf00>
   127d4:	add	r1, r5, #416	; 0x1a0
   127d8:	mov	r0, r4
   127dc:	mov	r2, #50	; 0x32
   127e0:	str	r9, [sp]
   127e4:	str	r6, [sp, #4]
   127e8:	add	r3, pc, r3
   127ec:	bl	12068 <error@@Base+0x6a8>
   127f0:	ldr	r3, [pc, #204]	; 128c4 <error@@Base+0xf04>
   127f4:	add	r1, r5, #824	; 0x338
   127f8:	mov	r0, r4
   127fc:	mov	r2, #10
   12800:	str	r6, [sp]
   12804:	str	r6, [sp, #4]
   12808:	add	r3, pc, r3
   1280c:	bl	12068 <error@@Base+0x6a8>
   12810:	ldr	r3, [r5]
   12814:	cmp	r3, r9
   12818:	bgt	1283c <error@@Base+0xe7c>
   1281c:	mov	r0, r4
   12820:	add	sp, sp, #12
   12824:	ldrd	r4, [sp]
   12828:	ldrd	r6, [sp, #8]
   1282c:	ldrd	r8, [sp, #16]
   12830:	ldr	lr, [sp, #24]
   12834:	add	sp, sp, #28
   12838:	b	11820 <__assert_fail@plt+0xc60>
   1283c:	ldr	r3, [pc, #132]	; 128c8 <error@@Base+0xf08>
   12840:	mov	r2, #8
   12844:	add	r1, r5, #920	; 0x398
   12848:	mov	r0, r4
   1284c:	str	r9, [sp]
   12850:	str	r9, [sp, #4]
   12854:	add	r3, pc, r3
   12858:	bl	12068 <error@@Base+0x6a8>
   1285c:	ldr	r3, [r5, #8]
   12860:	cmp	r3, r9
   12864:	ble	12878 <error@@Base+0xeb8>
   12868:	mov	r2, r8
   1286c:	add	r1, r5, #992	; 0x3e0
   12870:	mov	r0, r4
   12874:	bl	121e8 <error@@Base+0x828>
   12878:	ldr	r3, [r5, #416]	; 0x1a0
   1287c:	cmp	r3, #0
   12880:	ble	1281c <error@@Base+0xe5c>
   12884:	ldr	r2, [pc, #64]	; 128cc <error@@Base+0xf0c>
   12888:	add	r1, r5, #9024	; 0x2340
   1288c:	mov	r0, r4
   12890:	add	r1, r1, #24
   12894:	add	r2, pc, r2
   12898:	bl	121e8 <error@@Base+0x828>
   1289c:	b	1281c <error@@Base+0xe5c>
   128a0:	andeq	r1, r0, ip, lsr #9
   128a4:	andeq	r4, r0, r0, lsl #18
   128a8:	andeq	r1, r0, ip, asr #8
   128ac:	muleq	r0, r0, r4
   128b0:	andeq	r1, r0, r4, lsl #9
   128b4:	andeq	r1, r0, r0, lsl #9
   128b8:	andeq	r1, r0, ip, ror r4
   128bc:	andeq	r1, r0, r8, ror #8
   128c0:	andeq	r1, r0, r8, asr #8
   128c4:	andeq	r1, r0, r8, lsr r4
   128c8:	andeq	r1, r0, r4, lsl #8
   128cc:	muleq	r0, ip, r3
   128d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   128d4:	ldr	r5, [pc, #264]	; 129e4 <error@@Base+0x1024>
   128d8:	strd	r6, [sp, #8]
   128dc:	ldr	r4, [pc, #260]	; 129e8 <error@@Base+0x1028>
   128e0:	str	lr, [sp, #16]
   128e4:	ldr	r7, [pc, #256]	; 129ec <error@@Base+0x102c>
   128e8:	add	r5, pc, r5
   128ec:	ldr	r6, [pc, #252]	; 129f0 <error@@Base+0x1030>
   128f0:	add	r4, pc, r4
   128f4:	add	r7, pc, r7
   128f8:	add	r6, pc, r6
   128fc:	ldr	r0, [r0, #4]
   12900:	cmp	r0, #0
   12904:	beq	129b4 <error@@Base+0xff4>
   12908:	movw	ip, #1092	; 0x444
   1290c:	movw	r2, #8294	; 0x2066
   12910:	ldr	lr, [r0, #12]
   12914:	mov	r3, ip
   12918:	mov	r1, #0
   1291c:	b	12928 <error@@Base+0xf68>
   12920:	add	r2, r2, r2, lsl #1
   12924:	ldr	r2, [r4, r2, lsl #2]
   12928:	add	r3, r1, r3, lsr #1
   1292c:	cmp	lr, r2
   12930:	subcc	ip, r3, #1
   12934:	bcc	12950 <error@@Base+0xf90>
   12938:	add	r2, r3, r3, lsl #1
   1293c:	add	r1, r3, #1
   12940:	add	r3, r5, r2, lsl #2
   12944:	ldr	r2, [r3, #4]
   12948:	cmp	lr, r2
   1294c:	bls	129c4 <error@@Base+0x1004>
   12950:	sub	r3, ip, r1
   12954:	cmp	ip, r1
   12958:	add	r2, r1, r3, lsr #1
   1295c:	bcs	12920 <error@@Base+0xf60>
   12960:	movw	r2, #8294	; 0x2066
   12964:	mov	r1, #0
   12968:	movw	ip, #1092	; 0x444
   1296c:	movw	r3, #1092	; 0x444
   12970:	b	1297c <error@@Base+0xfbc>
   12974:	add	r2, r2, r2, lsl #1
   12978:	ldr	r2, [r6, r2, lsl #2]
   1297c:	add	r3, r1, r3, lsr #1
   12980:	cmp	lr, r2
   12984:	subcc	ip, r3, #1
   12988:	bcc	129a4 <error@@Base+0xfe4>
   1298c:	add	r2, r3, r3, lsl #1
   12990:	add	r1, r3, #1
   12994:	add	r3, r7, r2, lsl #2
   12998:	ldr	r2, [r3, #4]
   1299c:	cmp	lr, r2
   129a0:	bls	129d4 <error@@Base+0x1014>
   129a4:	sub	r3, ip, r1
   129a8:	cmp	ip, r1
   129ac:	add	r2, r1, r3, lsr #1
   129b0:	bcs	12974 <error@@Base+0xfb4>
   129b4:	ldrd	r4, [sp]
   129b8:	ldrd	r6, [sp, #8]
   129bc:	add	sp, sp, #16
   129c0:	pop	{pc}		; (ldr pc, [sp], #4)
   129c4:	ldr	r3, [r3, #8]
   129c8:	cmp	r3, #4
   129cc:	beq	128fc <error@@Base+0xf3c>
   129d0:	b	12960 <error@@Base+0xfa0>
   129d4:	ldr	r3, [r3, #8]
   129d8:	cmp	r3, #6
   129dc:	beq	128fc <error@@Base+0xf3c>
   129e0:	b	129b4 <error@@Base+0xff4>
   129e4:	andeq	r1, r0, r0, lsr #7
   129e8:	muleq	r0, r8, r3
   129ec:	muleq	r0, r4, r3
   129f0:	muleq	r0, r0, r3
   129f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   129f8:	strd	r6, [sp, #8]
   129fc:	strd	r8, [sp, #16]
   12a00:	ldr	r9, [r1]
   12a04:	strd	sl, [sp, #24]
   12a08:	str	lr, [sp, #32]
   12a0c:	sub	sp, sp, #52	; 0x34
   12a10:	cmp	r9, #0
   12a14:	str	r9, [sp, #36]	; 0x24
   12a18:	beq	12d70 <error@@Base+0x13b0>
   12a1c:	ldr	r3, [pc, #1996]	; 131f0 <error@@Base+0x1830>
   12a20:	add	r8, sp, #32
   12a24:	str	r0, [sp, #28]
   12a28:	add	r3, pc, r3
   12a2c:	str	r3, [sp, #16]
   12a30:	ldr	r3, [pc, #1980]	; 131f4 <error@@Base+0x1834>
   12a34:	add	r3, pc, r3
   12a38:	str	r3, [sp, #20]
   12a3c:	ldr	r3, [pc, #1972]	; 131f8 <error@@Base+0x1838>
   12a40:	add	r3, pc, r3
   12a44:	str	r3, [sp, #24]
   12a48:	ldr	r3, [pc, #1964]	; 131fc <error@@Base+0x183c>
   12a4c:	mov	r7, #17
   12a50:	mov	r6, r8
   12a54:	add	r3, pc, r3
   12a58:	str	r3, [sp, #4]
   12a5c:	ldr	r3, [pc, #1948]	; 13200 <error@@Base+0x1840>
   12a60:	add	r3, pc, r3
   12a64:	str	r3, [sp, #8]
   12a68:	ldr	r3, [pc, #1940]	; 13204 <error@@Base+0x1844>
   12a6c:	add	r3, pc, r3
   12a70:	str	r3, [sp, #12]
   12a74:	mov	r0, r6
   12a78:	bl	128d0 <error@@Base+0xf10>
   12a7c:	subs	r6, r0, #0
   12a80:	beq	12e4c <error@@Base+0x148c>
   12a84:	ldr	ip, [pc, #1916]	; 13208 <error@@Base+0x1848>
   12a88:	movw	r1, #1092	; 0x444
   12a8c:	movw	lr, #8294	; 0x2066
   12a90:	mov	r2, r1
   12a94:	mov	r3, #0
   12a98:	ldr	r0, [r6, #12]
   12a9c:	add	ip, pc, ip
   12aa0:	b	12ab4 <error@@Base+0x10f4>
   12aa4:	sub	r2, r1, r3
   12aa8:	add	lr, r3, r2, lsr #1
   12aac:	add	lr, lr, lr, lsl #1
   12ab0:	ldr	lr, [ip, lr, lsl #2]
   12ab4:	add	r2, r3, r2, lsr #1
   12ab8:	cmp	r0, lr
   12abc:	subcc	r1, r2, #1
   12ac0:	bcc	12ae0 <error@@Base+0x1120>
   12ac4:	ldr	lr, [sp, #16]
   12ac8:	add	r3, r2, r2, lsl #1
   12acc:	add	r3, lr, r3, lsl #2
   12ad0:	ldr	lr, [r3, #4]
   12ad4:	cmp	r0, lr
   12ad8:	bls	13018 <error@@Base+0x1658>
   12adc:	add	r3, r2, #1
   12ae0:	cmp	r1, r3
   12ae4:	bcs	12aa4 <error@@Base+0x10e4>
   12ae8:	mov	r0, r6
   12aec:	bl	128d0 <error@@Base+0xf10>
   12af0:	cmp	r0, #0
   12af4:	beq	13104 <error@@Base+0x1744>
   12af8:	mov	r5, #0
   12afc:	mov	sl, r5
   12b00:	movw	ip, #1092	; 0x444
   12b04:	movw	r3, #8294	; 0x2066
   12b08:	ldr	lr, [r0, #12]
   12b0c:	mov	r2, ip
   12b10:	mov	r1, #0
   12b14:	b	12b2c <error@@Base+0x116c>
   12b18:	sub	r2, ip, r1
   12b1c:	ldr	r4, [sp, #8]
   12b20:	add	r3, r1, r2, lsr #1
   12b24:	add	r3, r3, r3, lsl #1
   12b28:	ldr	r3, [r4, r3, lsl #2]
   12b2c:	add	r2, r1, r2, lsr #1
   12b30:	cmp	lr, r3
   12b34:	subcc	ip, r2, #1
   12b38:	bcc	12b58 <error@@Base+0x1198>
   12b3c:	ldr	r1, [sp, #4]
   12b40:	add	r3, r2, r2, lsl #1
   12b44:	add	r3, r1, r3, lsl #2
   12b48:	ldr	r1, [r3, #4]
   12b4c:	cmp	lr, r1
   12b50:	bls	13048 <error@@Base+0x1688>
   12b54:	add	r1, r2, #1
   12b58:	cmp	ip, r1
   12b5c:	bcs	12b18 <error@@Base+0x1158>
   12b60:	bl	128d0 <error@@Base+0xf10>
   12b64:	cmp	r0, #0
   12b68:	beq	1314c <error@@Base+0x178c>
   12b6c:	mov	r4, #0
   12b70:	mov	r3, r4
   12b74:	mov	lr, r4
   12b78:	movw	ip, #1092	; 0x444
   12b7c:	movw	fp, #8294	; 0x2066
   12b80:	str	r3, [sp]
   12b84:	mov	r1, ip
   12b88:	mov	r2, #0
   12b8c:	ldr	r0, [r0, #12]
   12b90:	b	12ba8 <error@@Base+0x11e8>
   12b94:	sub	r1, ip, r2
   12b98:	ldr	r3, [sp, #20]
   12b9c:	add	fp, r2, r1, lsr #1
   12ba0:	add	fp, fp, fp, lsl #1
   12ba4:	ldr	fp, [r3, fp, lsl #2]
   12ba8:	add	r1, r2, r1, lsr #1
   12bac:	cmp	r0, fp
   12bb0:	subcc	ip, r1, #1
   12bb4:	bcc	12bd4 <error@@Base+0x1214>
   12bb8:	ldr	r3, [sp, #12]
   12bbc:	add	r2, r1, r1, lsl #1
   12bc0:	add	r2, r3, r2, lsl #2
   12bc4:	ldr	fp, [r2, #4]
   12bc8:	cmp	r0, fp
   12bcc:	bls	1300c <error@@Base+0x164c>
   12bd0:	add	r2, r1, #1
   12bd4:	cmp	ip, r2
   12bd8:	bcs	12b94 <error@@Base+0x11d4>
   12bdc:	ldr	r3, [sp]
   12be0:	mov	r2, #0
   12be4:	cmp	lr, #0
   12be8:	bne	13004 <error@@Base+0x1644>
   12bec:	sub	r1, r5, #2
   12bf0:	cmp	r1, #1
   12bf4:	orrls	sl, sl, #1
   12bf8:	cmp	sl, #0
   12bfc:	bne	12f08 <error@@Base+0x1548>
   12c00:	bic	ip, r4, #2
   12c04:	cmp	ip, #1
   12c08:	orreq	r3, r3, #1
   12c0c:	cmp	r3, #0
   12c10:	bne	12f08 <error@@Base+0x1548>
   12c14:	sub	r3, r5, #8
   12c18:	cmp	r3, #1
   12c1c:	bhi	12e60 <error@@Base+0x14a0>
   12c20:	sub	r1, r4, #8
   12c24:	cmp	r1, #1
   12c28:	bls	12e44 <error@@Base+0x1484>
   12c2c:	sub	r0, r4, #12
   12c30:	sub	r1, r4, #10
   12c34:	clz	r1, r1
   12c38:	cmp	r4, #10
   12c3c:	cmpne	r0, #1
   12c40:	lsr	r1, r1, #5
   12c44:	bhi	12c54 <error@@Base+0x1294>
   12c48:	sub	r0, r2, #8
   12c4c:	cmp	r0, #1
   12c50:	bls	12e44 <error@@Base+0x1484>
   12c54:	sub	r0, r7, #8
   12c58:	cmp	r0, #1
   12c5c:	bls	130f4 <error@@Base+0x1734>
   12c60:	sub	r0, r5, #8
   12c64:	clz	r0, r0
   12c68:	lsr	r0, r0, #5
   12c6c:	tst	r0, r1
   12c70:	beq	12dbc <error@@Base+0x13fc>
   12c74:	mov	r7, #8
   12c78:	ldr	r3, [r6, #4]
   12c7c:	cmp	r3, #0
   12c80:	bne	12a74 <error@@Base+0x10b4>
   12c84:	ldr	r0, [r9, #12]
   12c88:	bl	10a4c <utf8proc_get_property@plt>
   12c8c:	ldrsh	r3, [r0]
   12c90:	cmp	r3, #0
   12c94:	ble	12d60 <error@@Base+0x13a0>
   12c98:	cmp	r3, #12
   12c9c:	ble	12ca8 <error@@Base+0x12e8>
   12ca0:	cmp	r3, #29
   12ca4:	bne	12d60 <error@@Base+0x13a0>
   12ca8:	ldr	r4, [r6, #4]
   12cac:	cmp	r4, r9
   12cb0:	movne	r5, r9
   12cb4:	movne	r7, #0
   12cb8:	bne	12cc8 <error@@Base+0x1308>
   12cbc:	b	1315c <error@@Base+0x179c>
   12cc0:	cmp	r5, #0
   12cc4:	beq	13170 <error@@Base+0x17b0>
   12cc8:	mov	r1, r8
   12ccc:	ldr	r0, [r5, #12]
   12cd0:	bl	10a64 <utf8proc_encode_char@plt>
   12cd4:	cmp	r0, #0
   12cd8:	beq	13190 <error@@Base+0x17d0>
   12cdc:	ldr	r5, [r5, #4]
   12ce0:	add	r7, r7, r0
   12ce4:	cmp	r4, r5
   12ce8:	bne	12cc0 <error@@Base+0x1300>
   12cec:	add	r0, r7, #1
   12cf0:	mov	r7, #0
   12cf4:	bl	10adc <malloc@plt>
   12cf8:	mov	r5, r0
   12cfc:	b	12d08 <error@@Base+0x1348>
   12d00:	cmp	r9, #0
   12d04:	beq	131b0 <error@@Base+0x17f0>
   12d08:	add	r1, r5, r7
   12d0c:	ldr	r0, [r9, #12]
   12d10:	bl	10a64 <utf8proc_encode_char@plt>
   12d14:	ldr	r9, [r9, #4]
   12d18:	add	r7, r7, r0
   12d1c:	cmp	r4, r9
   12d20:	bne	12d00 <error@@Base+0x1340>
   12d24:	add	r7, r5, r7
   12d28:	mov	r3, #0
   12d2c:	mov	r1, #12
   12d30:	mov	r0, #1
   12d34:	strb	r3, [r7]
   12d38:	bl	11a1c <error@@Base+0x5c>
   12d3c:	mov	r4, r0
   12d40:	mov	r0, r5
   12d44:	bl	10b60 <utf8proc_NFC@plt>
   12d48:	mov	r1, r4
   12d4c:	str	r0, [r4, #8]
   12d50:	ldr	r0, [sp, #28]
   12d54:	bl	10fe4 <__assert_fail@plt+0x424>
   12d58:	mov	r0, r5
   12d5c:	bl	10a40 <free@plt>
   12d60:	ldr	r9, [r6, #4]
   12d64:	cmp	r9, #0
   12d68:	str	r9, [sp, #36]	; 0x24
   12d6c:	bne	12a48 <error@@Base+0x1088>
   12d70:	add	sp, sp, #52	; 0x34
   12d74:	ldrd	r4, [sp]
   12d78:	ldrd	r6, [sp, #8]
   12d7c:	ldrd	r8, [sp, #16]
   12d80:	ldrd	sl, [sp, #24]
   12d84:	add	sp, sp, #32
   12d88:	pop	{pc}		; (ldr pc, [sp], #4)
   12d8c:	sub	r1, r5, #10
   12d90:	bics	r1, r1, #2
   12d94:	bne	130f4 <error@@Base+0x1734>
   12d98:	sub	r1, r4, #8
   12d9c:	cmp	r1, #1
   12da0:	bls	12e44 <error@@Base+0x1484>
   12da4:	sub	r1, r4, #10
   12da8:	sub	r0, r5, #8
   12dac:	clz	r1, r1
   12db0:	clz	r0, r0
   12db4:	lsr	r1, r1, #5
   12db8:	lsr	r0, r0, #5
   12dbc:	cmp	r4, #11
   12dc0:	movne	r0, #0
   12dc4:	andeq	r0, r0, #1
   12dc8:	cmp	r0, #0
   12dcc:	beq	12e78 <error@@Base+0x14b8>
   12dd0:	cmp	r2, #8
   12dd4:	beq	12c74 <error@@Base+0x12b4>
   12dd8:	cmp	r3, #1
   12ddc:	sub	r0, r5, #15
   12de0:	movhi	r3, #0
   12de4:	movls	r3, #1
   12de8:	clz	r0, r0
   12dec:	cmp	r5, #15
   12df0:	lsr	r0, r0, #5
   12df4:	mov	lr, #0
   12df8:	beq	130b4 <error@@Base+0x16f4>
   12dfc:	cmp	r7, #15
   12e00:	beq	13134 <error@@Base+0x1774>
   12e04:	sub	r2, r5, #7
   12e08:	sub	r1, r4, #7
   12e0c:	clz	r2, r2
   12e10:	clz	r1, r1
   12e14:	lsr	r2, r2, #5
   12e18:	lsr	r1, r1, #5
   12e1c:	tst	r2, r1
   12e20:	movne	r7, #7
   12e24:	bne	12c78 <error@@Base+0x12b8>
   12e28:	mov	r7, r5
   12e2c:	b	12ebc <error@@Base+0x14fc>
   12e30:	cmp	r5, #13
   12e34:	bne	12d8c <error@@Base+0x13cc>
   12e38:	sub	r1, r4, #8
   12e3c:	cmp	r1, #1
   12e40:	bhi	12e6c <error@@Base+0x14ac>
   12e44:	mov	r7, r5
   12e48:	b	12c78 <error@@Base+0x12b8>
   12e4c:	mov	r4, #18
   12e50:	mov	ip, #16
   12e54:	mov	r5, r4
   12e58:	mov	r2, r4
   12e5c:	mov	r3, #10
   12e60:	sub	r1, r7, #8
   12e64:	cmp	r1, #1
   12e68:	bls	12e30 <error@@Base+0x1470>
   12e6c:	sub	r1, r4, #10
   12e70:	clz	r1, r1
   12e74:	lsr	r1, r1, #5
   12e78:	cmp	r7, #8
   12e7c:	cmpeq	r5, #11
   12e80:	bne	13070 <error@@Base+0x16b0>
   12e84:	cmp	r4, #8
   12e88:	beq	1312c <error@@Base+0x176c>
   12e8c:	sub	lr, r4, #15
   12e90:	mov	r0, #0
   12e94:	clz	lr, lr
   12e98:	mov	r3, r0
   12e9c:	lsr	lr, lr, #5
   12ea0:	sub	r2, r5, #7
   12ea4:	sub	r1, r4, #7
   12ea8:	clz	r2, r2
   12eac:	clz	r1, r1
   12eb0:	lsr	r2, r2, #5
   12eb4:	mov	r7, r5
   12eb8:	lsr	r1, r1, #5
   12ebc:	orrs	r3, r0, r3
   12ec0:	bne	12ed4 <error@@Base+0x1514>
   12ec4:	cmp	r5, #16
   12ec8:	orreq	r2, r2, #1
   12ecc:	cmp	r2, #0
   12ed0:	beq	13118 <error@@Base+0x1758>
   12ed4:	cmp	r4, #16
   12ed8:	beq	12c78 <error@@Base+0x12b8>
   12edc:	cmp	r5, #16
   12ee0:	bne	13118 <error@@Base+0x1758>
   12ee4:	sub	r4, r4, #8
   12ee8:	cmp	r4, #1
   12eec:	orrls	lr, lr, #1
   12ef0:	cmp	lr, #0
   12ef4:	bne	12c78 <error@@Base+0x12b8>
   12ef8:	cmp	r1, #0
   12efc:	bne	12c78 <error@@Base+0x12b8>
   12f00:	cmp	r6, #0
   12f04:	beq	12d70 <error@@Base+0x13b0>
   12f08:	ldr	r4, [pc, #764]	; 1320c <error@@Base+0x184c>
   12f0c:	ldr	lr, [pc, #764]	; 13210 <error@@Base+0x1850>
   12f10:	ldr	ip, [pc, #764]	; 13214 <error@@Base+0x1854>
   12f14:	add	r4, pc, r4
   12f18:	add	lr, pc, lr
   12f1c:	add	ip, pc, ip
   12f20:	ldr	r0, [r6, #4]
   12f24:	cmp	r0, #0
   12f28:	beq	12c84 <error@@Base+0x12c4>
   12f2c:	movw	r5, #1092	; 0x444
   12f30:	movw	r7, #8294	; 0x2066
   12f34:	ldr	r1, [r0, #12]
   12f38:	mov	r3, r5
   12f3c:	mov	r2, #0
   12f40:	b	12f54 <error@@Base+0x1594>
   12f44:	sub	r3, r5, r2
   12f48:	add	r7, r2, r3, lsr #1
   12f4c:	add	r7, r7, r7, lsl #1
   12f50:	ldr	r7, [lr, r7, lsl #2]
   12f54:	add	r3, r2, r3, lsr #1
   12f58:	cmp	r1, r7
   12f5c:	subcc	r5, r3, #1
   12f60:	bcc	12f7c <error@@Base+0x15bc>
   12f64:	add	r2, r3, r3, lsl #1
   12f68:	add	r2, r4, r2, lsl #2
   12f6c:	ldr	r7, [r2, #4]
   12f70:	cmp	r1, r7
   12f74:	bls	12ff4 <error@@Base+0x1634>
   12f78:	add	r2, r3, #1
   12f7c:	cmp	r2, r5
   12f80:	bls	12f44 <error@@Base+0x1584>
   12f84:	movw	r7, #8294	; 0x2066
   12f88:	mov	r2, #0
   12f8c:	movw	r5, #1092	; 0x444
   12f90:	movw	r3, #1092	; 0x444
   12f94:	b	12fa8 <error@@Base+0x15e8>
   12f98:	sub	r3, r5, r2
   12f9c:	add	r7, r2, r3, lsr #1
   12fa0:	add	r7, r7, r7, lsl #1
   12fa4:	ldr	r7, [ip, r7, lsl #2]
   12fa8:	add	r3, r2, r3, lsr #1
   12fac:	cmp	r1, r7
   12fb0:	subcc	r5, r3, #1
   12fb4:	bcc	12fd4 <error@@Base+0x1614>
   12fb8:	ldr	r7, [sp, #24]
   12fbc:	add	r2, r3, r3, lsl #1
   12fc0:	add	r2, r7, r2, lsl #2
   12fc4:	ldr	r7, [r2, #4]
   12fc8:	cmp	r1, r7
   12fcc:	bls	12fe0 <error@@Base+0x1620>
   12fd0:	add	r2, r3, #1
   12fd4:	cmp	r5, r2
   12fd8:	bcs	12f98 <error@@Base+0x15d8>
   12fdc:	b	12c84 <error@@Base+0x12c4>
   12fe0:	ldr	r3, [r2, #8]
   12fe4:	cmp	r3, #6
   12fe8:	bne	12c84 <error@@Base+0x12c4>
   12fec:	mov	r6, r0
   12ff0:	b	12f20 <error@@Base+0x1560>
   12ff4:	ldr	r3, [r2, #8]
   12ff8:	cmp	r3, #4
   12ffc:	beq	12fec <error@@Base+0x162c>
   13000:	b	12f84 <error@@Base+0x15c4>
   13004:	mov	r7, #1
   13008:	b	12c78 <error@@Base+0x12b8>
   1300c:	ldr	r3, [sp]
   13010:	ldr	r2, [r2, #8]
   13014:	b	12be4 <error@@Base+0x1224>
   13018:	ldr	r5, [r3, #8]
   1301c:	mov	r0, r6
   13020:	bl	128d0 <error@@Base+0xf10>
   13024:	cmp	r0, #0
   13028:	sub	sl, r5, #1
   1302c:	clz	sl, sl
   13030:	lsr	sl, sl, #5
   13034:	bne	12b00 <error@@Base+0x1140>
   13038:	mov	r4, #18
   1303c:	mov	r3, r0
   13040:	mov	r2, r4
   13044:	b	12bec <error@@Base+0x122c>
   13048:	ldr	r4, [r3, #8]
   1304c:	bl	128d0 <error@@Base+0xf10>
   13050:	cmp	r0, #0
   13054:	sub	r3, r4, #2
   13058:	clz	r3, r3
   1305c:	lsr	r3, r3, #5
   13060:	and	lr, r3, sl
   13064:	bne	12b78 <error@@Base+0x11b8>
   13068:	mov	r2, #18
   1306c:	b	12be4 <error@@Base+0x1224>
   13070:	sub	r0, r5, #15
   13074:	sub	lr, r4, #15
   13078:	clz	r0, r0
   1307c:	clz	lr, lr
   13080:	lsr	r0, r0, #5
   13084:	lsr	lr, lr, #5
   13088:	tst	r0, lr
   1308c:	beq	13098 <error@@Base+0x16d8>
   13090:	mov	r7, #15
   13094:	b	12c78 <error@@Base+0x12b8>
   13098:	cmp	r3, #1
   1309c:	movhi	r3, #0
   130a0:	movls	r3, #1
   130a4:	tst	lr, r3
   130a8:	bne	12e44 <error@@Base+0x1484>
   130ac:	cmp	r5, #15
   130b0:	bne	12dfc <error@@Base+0x143c>
   130b4:	sub	r7, r4, #8
   130b8:	cmp	r7, #1
   130bc:	bls	13090 <error@@Base+0x16d0>
   130c0:	cmp	ip, #12
   130c4:	orreq	r1, r1, #1
   130c8:	cmp	r1, #0
   130cc:	beq	130d8 <error@@Base+0x1718>
   130d0:	cmp	r2, #15
   130d4:	beq	13090 <error@@Base+0x16d0>
   130d8:	sub	r1, r4, #7
   130dc:	orrs	r3, r3, r0
   130e0:	clz	r1, r1
   130e4:	lsr	r1, r1, #5
   130e8:	beq	13118 <error@@Base+0x1758>
   130ec:	mov	r7, #15
   130f0:	b	12ed4 <error@@Base+0x1514>
   130f4:	sub	r1, r4, #10
   130f8:	clz	r1, r1
   130fc:	lsr	r1, r1, #5
   13100:	b	12c60 <error@@Base+0x12a0>
   13104:	mov	r2, #18
   13108:	mov	r5, r0
   1310c:	mov	r3, r0
   13110:	mov	r4, r2
   13114:	b	12c00 <error@@Base+0x1240>
   13118:	cmp	r5, #5
   1311c:	cmpeq	r4, #5
   13120:	bne	12f00 <error@@Base+0x1540>
   13124:	mov	r7, #5
   13128:	b	12c78 <error@@Base+0x12b8>
   1312c:	mov	r7, #11
   13130:	b	12c78 <error@@Base+0x12b8>
   13134:	cmp	r5, #14
   13138:	bne	131d4 <error@@Base+0x1814>
   1313c:	cmp	r4, #15
   13140:	bne	12ea0 <error@@Base+0x14e0>
   13144:	mov	r7, r5
   13148:	b	12c78 <error@@Base+0x12b8>
   1314c:	mov	r4, r0
   13150:	mov	r2, #18
   13154:	mov	r3, r0
   13158:	b	12bec <error@@Base+0x122c>
   1315c:	mov	r0, #1
   13160:	bl	10adc <malloc@plt>
   13164:	mov	r5, r0
   13168:	mov	r7, r0
   1316c:	b	12d28 <error@@Base+0x1368>
   13170:	ldr	r3, [pc, #160]	; 13218 <error@@Base+0x1858>
   13174:	mov	r2, #249	; 0xf9
   13178:	ldr	r1, [pc, #156]	; 1321c <error@@Base+0x185c>
   1317c:	ldr	r0, [pc, #156]	; 13220 <error@@Base+0x1860>
   13180:	add	r3, pc, r3
   13184:	add	r1, pc, r1
   13188:	add	r0, pc, r0
   1318c:	bl	10bc0 <__assert_fail@plt>
   13190:	ldr	r3, [pc, #140]	; 13224 <error@@Base+0x1864>
   13194:	mov	r2, #253	; 0xfd
   13198:	ldr	r1, [pc, #136]	; 13228 <error@@Base+0x1868>
   1319c:	ldr	r0, [pc, #136]	; 1322c <error@@Base+0x186c>
   131a0:	add	r3, pc, r3
   131a4:	add	r1, pc, r1
   131a8:	add	r0, pc, r0
   131ac:	bl	10bc0 <__assert_fail@plt>
   131b0:	ldr	r3, [pc, #120]	; 13230 <error@@Base+0x1870>
   131b4:	movw	r2, #269	; 0x10d
   131b8:	ldr	r1, [pc, #116]	; 13234 <error@@Base+0x1874>
   131bc:	ldr	r0, [pc, #116]	; 13238 <error@@Base+0x1878>
   131c0:	add	r3, pc, r3
   131c4:	add	r3, r3, #20
   131c8:	add	r1, pc, r1
   131cc:	add	r0, pc, r0
   131d0:	bl	10bc0 <__assert_fail@plt>
   131d4:	sub	r2, r5, #10
   131d8:	bics	r2, r2, #2
   131dc:	bne	12e04 <error@@Base+0x1444>
   131e0:	cmp	r4, #15
   131e4:	bne	12e04 <error@@Base+0x1444>
   131e8:	mov	r7, r5
   131ec:	b	12c78 <error@@Base+0x12b8>
   131f0:	andeq	r1, r0, r0, ror #4
   131f4:	andeq	r1, r0, r4, asr r2
   131f8:	andeq	r1, r0, r8, asr #4
   131fc:	andeq	r1, r0, r4, lsr r2
   13200:	andeq	r1, r0, r8, lsr #4
   13204:	andeq	r1, r0, ip, lsl r2
   13208:	andeq	r1, r0, ip, ror #3
   1320c:	andeq	r0, r0, r4, ror sp
   13210:	andeq	r0, r0, r0, ror sp
   13214:	andeq	r0, r0, ip, ror #26
   13218:	andeq	r0, r0, r0, ror #21
   1321c:	andeq	r3, r0, r0, asr #28
   13220:	andeq	r3, r0, r4, asr #28
   13224:	andeq	r0, r0, r0, asr #21
   13228:	andeq	r3, r0, r0, lsr #28
   1322c:	andeq	r3, r0, r4, lsr lr
   13230:	andeq	r0, r0, r0, lsr #21
   13234:	strdeq	r3, [r0], -ip
   13238:	andeq	r3, r0, r0, lsl #28
   1323c:	str	r4, [sp, #-8]!
   13240:	mov	r4, r0
   13244:	ldr	r0, [r0, #8]
   13248:	str	lr, [sp, #4]
   1324c:	bl	10a40 <free@plt>
   13250:	mov	r0, r4
   13254:	ldr	r4, [sp]
   13258:	ldr	lr, [sp, #4]
   1325c:	add	sp, sp, #8
   13260:	b	10a40 <free@plt>
   13264:	strd	r4, [sp, #-16]!
   13268:	uxtb	r5, r1
   1326c:	mov	r1, #16
   13270:	str	r6, [sp, #8]
   13274:	mov	r6, r0
   13278:	mov	r0, #1
   1327c:	mov	r4, r2
   13280:	str	lr, [sp, #12]
   13284:	bl	11a1c <error@@Base+0x5c>
   13288:	mov	r3, r0
   1328c:	mov	r0, r6
   13290:	mov	r1, r3
   13294:	strb	r5, [r3, #8]
   13298:	str	r4, [r3, #12]
   1329c:	ldrd	r4, [sp]
   132a0:	ldr	r6, [sp, #8]
   132a4:	ldr	lr, [sp, #12]
   132a8:	add	sp, sp, #16
   132ac:	b	10fe4 <__assert_fail@plt+0x424>
   132b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   132b4:	clz	r3, r1
   132b8:	strd	r6, [sp, #8]
   132bc:	lsr	r3, r3, #5
   132c0:	strd	r8, [sp, #16]
   132c4:	strd	sl, [sp, #24]
   132c8:	mov	sl, r2
   132cc:	str	lr, [sp, #32]
   132d0:	sub	sp, sp, #124	; 0x7c
   132d4:	ldrb	r2, [r2]
   132d8:	ldr	r4, [pc, #888]	; 13658 <error@@Base+0x1c98>
   132dc:	cmp	r2, #0
   132e0:	moveq	r3, #0
   132e4:	cmp	r3, #0
   132e8:	add	r4, pc, r4
   132ec:	bne	13644 <error@@Base+0x1c84>
   132f0:	mov	r9, r0
   132f4:	mov	r0, r1
   132f8:	ldr	r1, [pc, #860]	; 1365c <error@@Base+0x1c9c>
   132fc:	ldr	r3, [r9, #4]
   13300:	add	r1, pc, r1
   13304:	str	r3, [sp, #8]
   13308:	bl	11ae4 <error@@Base+0x124>
   1330c:	ldrb	r3, [sl]
   13310:	mov	r7, r0
   13314:	cmp	r3, #0
   13318:	bne	1358c <error@@Base+0x1bcc>
   1331c:	ldr	r8, [sl, #4]
   13320:	mov	r0, r7
   13324:	ldrb	r3, [sl, #1]
   13328:	cmp	r8, #0
   1332c:	moveq	r8, #94	; 0x5e
   13330:	mov	r5, r3
   13334:	bl	10bb4 <getc@plt>
   13338:	cmn	r0, #1
   1333c:	beq	13404 <error@@Base+0x1a44>
   13340:	ldr	r3, [pc, #792]	; 13660 <error@@Base+0x1ca0>
   13344:	ldr	r3, [r4, r3]
   13348:	ldrsb	r4, [r3, r0]
   1334c:	str	r3, [sp]
   13350:	cmp	r4, #0
   13354:	ble	13624 <error@@Base+0x1c64>
   13358:	add	r3, sp, #20
   1335c:	mov	r6, #0
   13360:	add	fp, sp, #17
   13364:	str	r3, [sp, #4]
   13368:	str	sl, [sp, #12]
   1336c:	mov	sl, r5
   13370:	b	13384 <error@@Base+0x19c4>
   13374:	ldr	r3, [sp]
   13378:	ldrsb	r4, [r3, r0]
   1337c:	cmp	r4, #0
   13380:	ble	13624 <error@@Base+0x1c64>
   13384:	cmp	r4, #1
   13388:	strb	r0, [sp, #16]
   1338c:	beq	133b0 <error@@Base+0x19f0>
   13390:	sub	r5, r4, #1
   13394:	mov	r3, r7
   13398:	mov	r2, r5
   1339c:	mov	r1, #1
   133a0:	mov	r0, fp
   133a4:	bl	10ab8 <fread@plt>
   133a8:	cmp	r5, r0
   133ac:	bne	13638 <error@@Base+0x1c78>
   133b0:	mov	r1, #4
   133b4:	add	r0, sp, #16
   133b8:	ldr	r2, [sp, #4]
   133bc:	bl	10ac4 <utf8proc_iterate@plt>
   133c0:	cmp	r0, r4
   133c4:	bne	13630 <error@@Base+0x1c70>
   133c8:	cmp	sl, #0
   133cc:	ldr	r2, [sp, #20]
   133d0:	beq	133e0 <error@@Base+0x1a20>
   133d4:	cmp	r2, r8
   133d8:	moveq	r6, #1
   133dc:	beq	133f0 <error@@Base+0x1a30>
   133e0:	mov	r1, r6
   133e4:	mov	r0, r9
   133e8:	mov	r6, #0
   133ec:	bl	13264 <error@@Base+0x18a4>
   133f0:	mov	r0, r7
   133f4:	bl	10bb4 <getc@plt>
   133f8:	cmn	r0, #1
   133fc:	bne	13374 <error@@Base+0x19b4>
   13400:	ldr	sl, [sp, #12]
   13404:	mov	r0, r7
   13408:	bl	11820 <__assert_fail@plt+0xc60>
   1340c:	ldrb	r3, [sl, #9]
   13410:	cmp	r3, #0
   13414:	beq	1348c <error@@Base+0x1acc>
   13418:	ldr	r3, [sp, #8]
   1341c:	cmp	r3, #0
   13420:	ldrne	r6, [r3, #4]
   13424:	ldreq	r6, [r9]
   13428:	cmp	r6, #0
   1342c:	beq	1348c <error@@Base+0x1acc>
   13430:	mov	r5, r6
   13434:	mov	r7, #32
   13438:	b	13448 <error@@Base+0x1a88>
   1343c:	ldr	r5, [r5, #4]
   13440:	cmp	r5, #0
   13444:	beq	13504 <error@@Base+0x1b44>
   13448:	ldr	r4, [r5, #12]
   1344c:	mov	r0, r4
   13450:	bl	10a4c <utf8proc_get_property@plt>
   13454:	cmp	r4, #13
   13458:	bhi	13580 <error@@Base+0x1bc0>
   1345c:	cmp	r4, #11
   13460:	bcs	13484 <error@@Base+0x1ac4>
   13464:	cmp	r4, #9
   13468:	beq	13484 <error@@Base+0x1ac4>
   1346c:	cmp	r4, #10
   13470:	beq	1343c <error@@Base+0x1a7c>
   13474:	ldrsh	r3, [r0]
   13478:	sub	r3, r3, #23
   1347c:	cmp	r3, #2
   13480:	bhi	1343c <error@@Base+0x1a7c>
   13484:	str	r7, [r5, #12]
   13488:	b	1343c <error@@Base+0x1a7c>
   1348c:	ldrb	r3, [sl, #10]
   13490:	cmp	r3, #0
   13494:	beq	134c4 <error@@Base+0x1b04>
   13498:	ldr	r3, [sp, #8]
   1349c:	cmp	r3, #0
   134a0:	ldrne	r4, [r3, #4]
   134a4:	ldreq	r4, [r9]
   134a8:	b	134bc <error@@Base+0x1afc>
   134ac:	ldr	r0, [r4, #12]
   134b0:	bl	10a94 <utf8proc_tolower@plt>
   134b4:	str	r0, [r4, #12]
   134b8:	ldr	r4, [r4, #4]
   134bc:	cmp	r4, #0
   134c0:	bne	134ac <error@@Base+0x1aec>
   134c4:	add	sp, sp, #124	; 0x7c
   134c8:	ldrd	r4, [sp]
   134cc:	ldrd	r6, [sp, #8]
   134d0:	ldrd	r8, [sp, #16]
   134d4:	ldrd	sl, [sp, #24]
   134d8:	add	sp, sp, #32
   134dc:	pop	{pc}		; (ldr pc, [sp], #4)
   134e0:	cmp	r3, #10
   134e4:	movne	r2, #0
   134e8:	andeq	r2, r2, #1
   134ec:	cmp	r2, #0
   134f0:	bne	13568 <error@@Base+0x1ba8>
   134f4:	subs	r5, r3, #10
   134f8:	movne	r5, #1
   134fc:	subs	r6, r4, #0
   13500:	beq	1348c <error@@Base+0x1acc>
   13504:	eor	r2, r5, #1
   13508:	ldr	r4, [r6, #4]
   1350c:	ldr	r3, [r6, #12]
   13510:	cmp	r3, #32
   13514:	bne	134e0 <error@@Base+0x1b20>
   13518:	cmp	r4, #0
   1351c:	moveq	r2, #1
   13520:	cmp	r2, #0
   13524:	bne	13538 <error@@Base+0x1b78>
   13528:	ldr	r2, [r4, #12]
   1352c:	cmp	r2, #10
   13530:	cmpne	r2, #32
   13534:	bne	134f4 <error@@Base+0x1b34>
   13538:	cmp	r4, #0
   1353c:	movne	r3, r5
   13540:	moveq	r3, #0
   13544:	cmp	r3, #0
   13548:	beq	13568 <error@@Base+0x1ba8>
   1354c:	ldr	r3, [r4, #12]
   13550:	cmp	r3, #32
   13554:	bne	13568 <error@@Base+0x1ba8>
   13558:	ldrb	r3, [r4, #8]
   1355c:	ldrb	r2, [r6, #8]
   13560:	orr	r3, r3, r2
   13564:	strb	r3, [r4, #8]
   13568:	mov	r0, r9
   1356c:	mov	r1, r6
   13570:	bl	110ec <__assert_fail@plt+0x52c>
   13574:	mov	r0, r6
   13578:	bl	10a40 <free@plt>
   1357c:	b	134fc <error@@Base+0x1b3c>
   13580:	cmp	r4, #160	; 0xa0
   13584:	bne	13474 <error@@Base+0x1ab4>
   13588:	b	13484 <error@@Base+0x1ac4>
   1358c:	add	r5, sp, #20
   13590:	mov	r2, r0
   13594:	mov	r1, #99	; 0x63
   13598:	mov	r0, r5
   1359c:	bl	10a58 <fgets@plt>
   135a0:	cmp	r0, #0
   135a4:	beq	135c4 <error@@Base+0x1c04>
   135a8:	ldr	r1, [pc, #180]	; 13664 <error@@Base+0x1ca4>
   135ac:	mov	r2, #51	; 0x33
   135b0:	mov	r0, r5
   135b4:	add	r1, pc, r1
   135b8:	bl	10b9c <strncmp@plt>
   135bc:	subs	r6, r0, #0
   135c0:	beq	135d8 <error@@Base+0x1c18>
   135c4:	mov	r0, r7
   135c8:	bl	10a7c <rewind@plt>
   135cc:	mov	r3, #0
   135d0:	strb	r3, [sl, #11]
   135d4:	b	1331c <error@@Base+0x195c>
   135d8:	ldr	r8, [pc, #136]	; 13668 <error@@Base+0x1ca8>
   135dc:	add	r8, pc, r8
   135e0:	mov	r2, r7
   135e4:	mov	r1, #99	; 0x63
   135e8:	mov	r0, r5
   135ec:	bl	10a58 <fgets@plt>
   135f0:	cmp	r0, #0
   135f4:	beq	1361c <error@@Base+0x1c5c>
   135f8:	mov	r1, r8
   135fc:	mov	r0, r5
   13600:	bl	10a10 <strcmp@plt>
   13604:	cmp	r0, #0
   13608:	bne	135e0 <error@@Base+0x1c20>
   1360c:	add	r6, r6, #1
   13610:	sxth	r6, r6
   13614:	cmp	r6, #2
   13618:	bne	135e0 <error@@Base+0x1c20>
   1361c:	mov	r3, #1
   13620:	b	135d0 <error@@Base+0x1c10>
   13624:	ldr	r0, [pc, #64]	; 1366c <error@@Base+0x1cac>
   13628:	add	r0, pc, r0
   1362c:	bl	119c0 <error@@Base>
   13630:	bl	10b84 <utf8proc_errmsg@plt>
   13634:	bl	119c0 <error@@Base>
   13638:	ldr	r0, [pc, #48]	; 13670 <error@@Base+0x1cb0>
   1363c:	add	r0, pc, r0
   13640:	bl	119c0 <error@@Base>
   13644:	ldr	r1, [pc, #40]	; 13674 <error@@Base+0x1cb4>
   13648:	ldr	r0, [pc, #40]	; 13678 <error@@Base+0x1cb8>
   1364c:	add	r1, pc, r1
   13650:	add	r0, pc, r0
   13654:	bl	11a84 <error@@Base+0xc4>
   13658:	andeq	r4, r1, r0, lsl sp
   1365c:	muleq	r0, r8, r8
   13660:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13664:	andeq	r3, r0, r8, asr sl
   13668:	andeq	r3, r0, r8, ror #20
   1366c:	andeq	r3, r0, r4, asr sl
   13670:	andeq	r3, r0, r8, asr sl
   13674:	andeq	r3, r0, r4, lsr #19
   13678:	andeq	r3, r0, ip, lsr #19
   1367c:	str	r4, [sp, #-8]!
   13680:	str	lr, [sp, #4]
   13684:	bl	10a64 <utf8proc_encode_char@plt>
   13688:	cmp	r0, #0
   1368c:	ble	136a0 <error@@Base+0x1ce0>
   13690:	ldr	r4, [sp]
   13694:	add	sp, sp, #4
   13698:	sxtb	r0, r0
   1369c:	pop	{pc}		; (ldr pc, [sp], #4)
   136a0:	ldr	r0, [pc, #4]	; 136ac <error@@Base+0x1cec>
   136a4:	add	r0, pc, r0
   136a8:	bl	119c0 <error@@Base>
   136ac:	andeq	r3, r0, r8, lsl #20
   136b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   136b4:	uxtb	r4, r0
   136b8:	mov	r5, r1
   136bc:	cmp	r4, #0
   136c0:	strd	r6, [sp, #8]
   136c4:	mov	r7, r2
   136c8:	moveq	r6, r2
   136cc:	str	r8, [sp, #16]
   136d0:	uxtb	r8, r3
   136d4:	str	lr, [sp, #20]
   136d8:	bne	137d8 <error@@Base+0x1e18>
   136dc:	cmp	r5, #10
   136e0:	bne	1371c <error@@Base+0x1d5c>
   136e4:	cmp	r8, #0
   136e8:	bne	13710 <error@@Base+0x1d50>
   136ec:	ldr	r1, [pc, #272]	; 13804 <error@@Base+0x1e44>
   136f0:	add	r1, pc, r1
   136f4:	mov	r0, r6
   136f8:	ldrd	r4, [sp]
   136fc:	ldrd	r6, [sp, #8]
   13700:	ldr	r8, [sp, #16]
   13704:	ldr	lr, [sp, #20]
   13708:	add	sp, sp, #24
   1370c:	b	10b78 <sprintf@plt>
   13710:	ldr	r1, [pc, #240]	; 13808 <error@@Base+0x1e48>
   13714:	add	r1, pc, r1
   13718:	b	136f4 <error@@Base+0x1d34>
   1371c:	mov	r0, r5
   13720:	bl	10a4c <utf8proc_get_property@plt>
   13724:	cmp	r5, #32
   13728:	beq	13748 <error@@Base+0x1d88>
   1372c:	ldrsh	r3, [r0]
   13730:	cmp	r3, #0
   13734:	ble	137a8 <error@@Base+0x1de8>
   13738:	cmp	r3, #22
   1373c:	ble	13748 <error@@Base+0x1d88>
   13740:	cmp	r3, #29
   13744:	bne	137a8 <error@@Base+0x1de8>
   13748:	mov	r0, r5
   1374c:	uxth	r4, r4
   13750:	bl	10b24 <utf8proc_category@plt>
   13754:	sub	r0, r0, #6
   13758:	cmp	r0, #2
   1375c:	bhi	13778 <error@@Base+0x1db8>
   13760:	mov	r1, r6
   13764:	movw	r0, #9676	; 0x25cc
   13768:	bl	1367c <error@@Base+0x1cbc>
   1376c:	add	r4, r4, r0
   13770:	uxth	r4, r4
   13774:	sxtah	r6, r7, r4
   13778:	mov	r1, r6
   1377c:	mov	r0, r5
   13780:	bl	1367c <error@@Base+0x1cbc>
   13784:	add	r4, r4, r0
   13788:	mov	r3, #0
   1378c:	sxth	r4, r4
   13790:	strb	r3, [r7, r4]
   13794:	ldrd	r4, [sp]
   13798:	ldrd	r6, [sp, #8]
   1379c:	ldr	r8, [sp, #16]
   137a0:	add	sp, sp, #20
   137a4:	pop	{pc}		; (ldr pc, [sp], #4)
   137a8:	cmp	r5, #255	; 0xff
   137ac:	bls	137f0 <error@@Base+0x1e30>
   137b0:	ldr	r1, [pc, #84]	; 1380c <error@@Base+0x1e4c>
   137b4:	mov	r2, r5
   137b8:	mov	r0, r6
   137bc:	add	r1, pc, r1
   137c0:	ldrd	r4, [sp]
   137c4:	ldrd	r6, [sp, #8]
   137c8:	ldr	r8, [sp, #16]
   137cc:	ldr	lr, [sp, #20]
   137d0:	add	sp, sp, #24
   137d4:	b	10b78 <sprintf@plt>
   137d8:	mov	r1, r2
   137dc:	mov	r0, #94	; 0x5e
   137e0:	bl	1367c <error@@Base+0x1cbc>
   137e4:	sxth	r4, r0
   137e8:	add	r6, r7, r0
   137ec:	b	136dc <error@@Base+0x1d1c>
   137f0:	ldr	r1, [pc, #24]	; 13810 <error@@Base+0x1e50>
   137f4:	mov	r2, r5
   137f8:	mov	r0, r6
   137fc:	add	r1, pc, r1
   13800:	b	137c0 <error@@Base+0x1e00>
   13804:	andeq	r0, r0, r0, lsr #10
   13808:			; <UNDEFINED> instruction: 0x000039b0
   1380c:	andeq	r3, r0, r8, lsl r9
   13810:	ldrdeq	r3, [r0], -r0
   13814:	mov	r3, r1
   13818:	ldr	r1, [pc, #212]	; 138f4 <error@@Base+0x1f34>
   1381c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13820:	mov	r5, r2
   13824:	strd	r6, [sp, #8]
   13828:	mov	r7, r0
   1382c:	mov	r0, r3
   13830:	str	lr, [sp, #16]
   13834:	sub	sp, sp, #20
   13838:	add	r1, pc, r1
   1383c:	bl	11ae4 <error@@Base+0x124>
   13840:	cmp	r5, #0
   13844:	mov	r6, r0
   13848:	beq	1389c <error@@Base+0x1edc>
   1384c:	mov	r3, r0
   13850:	ldr	r4, [pc, #160]	; 138f8 <error@@Base+0x1f38>
   13854:	mov	r2, #55	; 0x37
   13858:	mov	r1, #1
   1385c:	ldr	r0, [pc, #152]	; 138fc <error@@Base+0x1f3c>
   13860:	add	r4, pc, r4
   13864:	add	r0, pc, r0
   13868:	bl	10aac <fwrite@plt>
   1386c:	mov	r3, r6
   13870:	mov	r2, #55	; 0x37
   13874:	mov	r1, #1
   13878:	mov	r0, r4
   1387c:	bl	10aac <fwrite@plt>
   13880:	mov	r0, r6
   13884:	blx	r5
   13888:	mov	r3, r6
   1388c:	mov	r0, r4
   13890:	mov	r2, #55	; 0x37
   13894:	mov	r1, #1
   13898:	bl	10aac <fwrite@plt>
   1389c:	ldr	r4, [r7]
   138a0:	cmp	r4, #0
   138a4:	beq	138d8 <error@@Base+0x1f18>
   138a8:	add	r5, sp, #4
   138ac:	ldrb	r0, [r4, #8]
   138b0:	mov	r3, #0
   138b4:	mov	r2, r5
   138b8:	ldr	r1, [r4, #12]
   138bc:	bl	136b0 <error@@Base+0x1cf0>
   138c0:	mov	r1, r6
   138c4:	mov	r0, r5
   138c8:	bl	10b90 <fputs@plt>
   138cc:	ldr	r4, [r4, #4]
   138d0:	cmp	r4, #0
   138d4:	bne	138ac <error@@Base+0x1eec>
   138d8:	mov	r0, r6
   138dc:	bl	11820 <__assert_fail@plt+0xc60>
   138e0:	add	sp, sp, #20
   138e4:	ldrd	r4, [sp]
   138e8:	ldrd	r6, [sp, #8]
   138ec:	add	sp, sp, #16
   138f0:	pop	{pc}		; (ldr pc, [sp], #4)
   138f4:	andeq	r0, r0, r8, lsr #7
   138f8:	andeq	r3, r0, r4, ror #15
   138fc:	andeq	r3, r0, r8, lsr #15
   13900:	strd	r4, [sp, #-20]!	; 0xffffffec
   13904:	mov	r2, #0
   13908:	strd	r6, [sp, #8]
   1390c:	str	lr, [sp, #16]
   13910:	sub	sp, sp, #12
   13914:	ldrb	r3, [r1]
   13918:	str	r2, [sp, #4]
   1391c:	cmp	r3, r2
   13920:	beq	13970 <error@@Base+0x1fb0>
   13924:	mov	r4, r1
   13928:	mov	r5, r0
   1392c:	add	r6, sp, #4
   13930:	b	13948 <error@@Base+0x1f88>
   13934:	ldr	r2, [sp, #4]
   13938:	bl	13264 <error@@Base+0x18a4>
   1393c:	ldrb	r3, [r4, r7]!
   13940:	cmp	r3, #0
   13944:	beq	13970 <error@@Base+0x1fb0>
   13948:	mvn	r1, #0
   1394c:	mov	r2, r6
   13950:	mov	r0, r4
   13954:	bl	10ac4 <utf8proc_iterate@plt>
   13958:	subs	r7, r0, #0
   1395c:	mov	r1, #0
   13960:	mov	r0, r5
   13964:	bgt	13934 <error@@Base+0x1f74>
   13968:	mov	r0, #0
   1396c:	b	13974 <error@@Base+0x1fb4>
   13970:	mov	r0, #1
   13974:	add	sp, sp, #12
   13978:	ldrd	r4, [sp]
   1397c:	ldrd	r6, [sp, #8]
   13980:	add	sp, sp, #16
   13984:	pop	{pc}		; (ldr pc, [sp], #4)
   13988:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1398c:	mov	r7, r0
   13990:	ldr	r6, [pc, #72]	; 139e0 <error@@Base+0x2020>
   13994:	ldr	r5, [pc, #72]	; 139e4 <error@@Base+0x2024>
   13998:	add	r6, pc, r6
   1399c:	add	r5, pc, r5
   139a0:	sub	r6, r6, r5
   139a4:	mov	r8, r1
   139a8:	mov	r9, r2
   139ac:	bl	109e4 <calloc@plt-0x20>
   139b0:	asrs	r6, r6, #2
   139b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   139b8:	mov	r4, #0
   139bc:	add	r4, r4, #1
   139c0:	ldr	r3, [r5], #4
   139c4:	mov	r2, r9
   139c8:	mov	r1, r8
   139cc:	mov	r0, r7
   139d0:	blx	r3
   139d4:	cmp	r6, r4
   139d8:	bne	139bc <error@@Base+0x1ffc>
   139dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139e0:	andeq	r4, r1, r4, ror #10
   139e4:	andeq	r4, r1, ip, asr r5
   139e8:	bx	lr

Disassembly of section .fini:

000139ec <.fini>:
   139ec:	push	{r3, lr}
   139f0:	pop	{r3, pc}
