
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010c9c <.init>:
   10c9c:	push	{r3, lr}
   10ca0:	bl	10f74 <__assert_fail@plt+0x48>
   10ca4:	pop	{r3, pc}

Disassembly of section .plt:

00010ca8 <calloc@plt-0x14>:
   10ca8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cac:	ldr	lr, [pc, #4]	; 10cb8 <calloc@plt-0x4>
   10cb0:	add	lr, pc, lr
   10cb4:	ldr	pc, [lr, #8]!
   10cb8:	andeq	r9, r1, r8, asr #6

00010cbc <calloc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #102400	; 0x19000
   10cc4:	ldr	pc, [ip, #840]!	; 0x348

00010cc8 <fputs_unlocked@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #102400	; 0x19000
   10cd0:	ldr	pc, [ip, #832]!	; 0x340

00010cd4 <strcmp@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #102400	; 0x19000
   10cdc:	ldr	pc, [ip, #824]!	; 0x338

00010ce0 <posix_fadvise64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #102400	; 0x19000
   10ce8:	ldr	pc, [ip, #816]!	; 0x330

00010cec <printf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #102400	; 0x19000
   10cf4:	ldr	pc, [ip, #808]!	; 0x328

00010cf8 <fflush@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #102400	; 0x19000
   10d00:	ldr	pc, [ip, #800]!	; 0x320

00010d04 <memmove@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #792]!	; 0x318

00010d10 <free@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #784]!	; 0x310

00010d1c <_exit@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #776]!	; 0x308

00010d28 <memcpy@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #768]!	; 0x300

00010d34 <mbsinit@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d40 <fwrite_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #752]!	; 0x2f0

00010d4c <memcmp@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #744]!	; 0x2e8

00010d58 <fputc_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #736]!	; 0x2e0

00010d64 <getc_unlocked@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d70 <realloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #720]!	; 0x2d0

00010d7c <textdomain@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #712]!	; 0x2c8

00010d88 <iswprint@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #704]!	; 0x2c0

00010d94 <fwrite@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #696]!	; 0x2b8

00010da0 <lseek64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dac <__ctype_get_mb_cur_max@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #680]!	; 0x2a8

00010db8 <__fpending@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc4 <ferror_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #664]!	; 0x298

00010dd0 <mbrtowc@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #656]!	; 0x290

00010ddc <error@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #648]!	; 0x288

00010de8 <malloc@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #640]!	; 0x280

00010df4 <__libc_start_main@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #632]!	; 0x278

00010e00 <__freading@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #624]!	; 0x270

00010e0c <__gmon_start__@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #616]!	; 0x268

00010e18 <getopt_long@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #608]!	; 0x260

00010e24 <__ctype_b_loc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #600]!	; 0x258

00010e30 <exit@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #592]!	; 0x250

00010e3c <gettext@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #584]!	; 0x248

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #576]!	; 0x240

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #568]!	; 0x238

00010e60 <fprintf@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #560]!	; 0x230

00010e6c <__errno_location@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #552]!	; 0x228

00010e78 <__cxa_atexit@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #544]!	; 0x220

00010e84 <memset@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #536]!	; 0x218

00010e90 <fileno@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #528]!	; 0x210

00010e9c <strtoumax@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #520]!	; 0x208

00010ea8 <fclose@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #512]!	; 0x200

00010eb4 <fseeko64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ec0 <setlocale@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #496]!	; 0x1f0

00010ecc <strrchr@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ed8 <nl_langinfo@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ee4 <clearerr_unlocked@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #472]!	; 0x1d8

00010ef0 <fopen64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #464]!	; 0x1d0

00010efc <bindtextdomain@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #456]!	; 0x1c8

00010f08 <strncmp@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #448]!	; 0x1c0

00010f14 <abort@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #440]!	; 0x1b8

00010f20 <putchar_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #432]!	; 0x1b0

00010f2c <__assert_fail@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #424]!	; 0x1a8

Disassembly of section .text:

00010f38 <.text>:
   10f38:	mov	fp, #0
   10f3c:	mov	lr, #0
   10f40:	pop	{r1}		; (ldr r1, [sp], #4)
   10f44:	mov	r2, sp
   10f48:	push	{r2}		; (str r2, [sp, #-4]!)
   10f4c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f50:	ldr	ip, [pc, #16]	; 10f68 <__assert_fail@plt+0x3c>
   10f54:	push	{ip}		; (str ip, [sp, #-4]!)
   10f58:	ldr	r0, [pc, #12]	; 10f6c <__assert_fail@plt+0x40>
   10f5c:	ldr	r3, [pc, #12]	; 10f70 <__assert_fail@plt+0x44>
   10f60:	bl	10df4 <__libc_start_main@plt>
   10f64:	bl	10f14 <abort@plt>
   10f68:	andeq	r8, r1, ip, ror #30
   10f6c:	andeq	r1, r1, r4, ror #7
   10f70:	andeq	r8, r1, ip, lsl #30
   10f74:	ldr	r3, [pc, #20]	; 10f90 <__assert_fail@plt+0x64>
   10f78:	ldr	r2, [pc, #20]	; 10f94 <__assert_fail@plt+0x68>
   10f7c:	add	r3, pc, r3
   10f80:	ldr	r2, [r3, r2]
   10f84:	cmp	r2, #0
   10f88:	bxeq	lr
   10f8c:	b	10e0c <__gmon_start__@plt>
   10f90:	andeq	r9, r1, ip, ror r0
   10f94:	andeq	r0, r0, r0, ror #1
   10f98:	ldr	r0, [pc, #24]	; 10fb8 <__assert_fail@plt+0x8c>
   10f9c:	ldr	r3, [pc, #24]	; 10fbc <__assert_fail@plt+0x90>
   10fa0:	cmp	r3, r0
   10fa4:	bxeq	lr
   10fa8:	ldr	r3, [pc, #16]	; 10fc0 <__assert_fail@plt+0x94>
   10fac:	cmp	r3, #0
   10fb0:	bxeq	lr
   10fb4:	bx	r3
   10fb8:	andeq	sl, r2, r4, lsr r1
   10fbc:	andeq	sl, r2, r4, lsr r1
   10fc0:	andeq	r0, r0, r0
   10fc4:	ldr	r0, [pc, #36]	; 10ff0 <__assert_fail@plt+0xc4>
   10fc8:	ldr	r1, [pc, #36]	; 10ff4 <__assert_fail@plt+0xc8>
   10fcc:	sub	r1, r1, r0
   10fd0:	asr	r1, r1, #2
   10fd4:	add	r1, r1, r1, lsr #31
   10fd8:	asrs	r1, r1, #1
   10fdc:	bxeq	lr
   10fe0:	ldr	r3, [pc, #16]	; 10ff8 <__assert_fail@plt+0xcc>
   10fe4:	cmp	r3, #0
   10fe8:	bxeq	lr
   10fec:	bx	r3
   10ff0:	andeq	sl, r2, r4, lsr r1
   10ff4:	andeq	sl, r2, r4, lsr r1
   10ff8:	andeq	r0, r0, r0
   10ffc:	push	{r4, lr}
   11000:	ldr	r4, [pc, #24]	; 11020 <__assert_fail@plt+0xf4>
   11004:	ldrb	r3, [r4]
   11008:	cmp	r3, #0
   1100c:	popne	{r4, pc}
   11010:	bl	10f98 <__assert_fail@plt+0x6c>
   11014:	mov	r3, #1
   11018:	strb	r3, [r4]
   1101c:	pop	{r4, pc}
   11020:	andeq	sl, r2, ip, asr r1
   11024:	b	10fc4 <__assert_fail@plt+0x98>
   11028:	str	fp, [sp, #-8]!
   1102c:	str	lr, [sp, #4]
   11030:	add	fp, sp, #4
   11034:	movw	r0, #36756	; 0x8f94
   11038:	movt	r0, #1
   1103c:	bl	10e3c <gettext@plt>
   11040:	mov	r2, r0
   11044:	movw	r3, #41300	; 0xa154
   11048:	movt	r3, #2
   1104c:	ldr	r3, [r3]
   11050:	mov	r1, r3
   11054:	mov	r0, r2
   11058:	bl	10cc8 <fputs_unlocked@plt>
   1105c:	nop	{0}
   11060:	sub	sp, fp, #4
   11064:	ldr	fp, [sp]
   11068:	add	sp, sp, #4
   1106c:	pop	{pc}		; (ldr pc, [sp], #4)
   11070:	str	fp, [sp, #-8]!
   11074:	str	lr, [sp, #4]
   11078:	add	fp, sp, #4
   1107c:	movw	r0, #36812	; 0x8fcc
   11080:	movt	r0, #1
   11084:	bl	10e3c <gettext@plt>
   11088:	mov	r2, r0
   1108c:	movw	r3, #41300	; 0xa154
   11090:	movt	r3, #2
   11094:	ldr	r3, [r3]
   11098:	mov	r1, r3
   1109c:	mov	r0, r2
   110a0:	bl	10cc8 <fputs_unlocked@plt>
   110a4:	nop	{0}
   110a8:	sub	sp, fp, #4
   110ac:	ldr	fp, [sp]
   110b0:	add	sp, sp, #4
   110b4:	pop	{pc}		; (ldr pc, [sp], #4)
   110b8:	str	fp, [sp, #-8]!
   110bc:	str	lr, [sp, #4]
   110c0:	add	fp, sp, #4
   110c4:	sub	sp, sp, #80	; 0x50
   110c8:	str	r0, [fp, #-80]	; 0xffffffb0
   110cc:	movw	r2, #37260	; 0x918c
   110d0:	movt	r2, #1
   110d4:	sub	r3, fp, #72	; 0x48
   110d8:	ldrd	r0, [r2]
   110dc:	strd	r0, [r3]
   110e0:	ldrd	r0, [r2, #8]
   110e4:	strd	r0, [r3, #8]
   110e8:	ldrd	r0, [r2, #16]
   110ec:	strd	r0, [r3, #16]
   110f0:	ldrd	r0, [r2, #24]
   110f4:	strd	r0, [r3, #24]
   110f8:	ldrd	r0, [r2, #32]
   110fc:	strd	r0, [r3, #32]
   11100:	ldrd	r0, [r2, #40]	; 0x28
   11104:	strd	r0, [r3, #40]	; 0x28
   11108:	ldrd	r0, [r2, #48]	; 0x30
   1110c:	strd	r0, [r3, #48]	; 0x30
   11110:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11114:	str	r3, [fp, #-8]
   11118:	sub	r3, fp, #72	; 0x48
   1111c:	str	r3, [fp, #-12]
   11120:	b	11130 <__assert_fail@plt+0x204>
   11124:	ldr	r3, [fp, #-12]
   11128:	add	r3, r3, #8
   1112c:	str	r3, [fp, #-12]
   11130:	ldr	r3, [fp, #-12]
   11134:	ldr	r3, [r3]
   11138:	cmp	r3, #0
   1113c:	beq	11160 <__assert_fail@plt+0x234>
   11140:	ldr	r3, [fp, #-12]
   11144:	ldr	r3, [r3]
   11148:	mov	r1, r3
   1114c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11150:	bl	10cd4 <strcmp@plt>
   11154:	mov	r3, r0
   11158:	cmp	r3, #0
   1115c:	bne	11124 <__assert_fail@plt+0x1f8>
   11160:	ldr	r3, [fp, #-12]
   11164:	ldr	r3, [r3, #4]
   11168:	cmp	r3, #0
   1116c:	beq	1117c <__assert_fail@plt+0x250>
   11170:	ldr	r3, [fp, #-12]
   11174:	ldr	r3, [r3, #4]
   11178:	str	r3, [fp, #-8]
   1117c:	movw	r0, #36888	; 0x9018
   11180:	movt	r0, #1
   11184:	bl	10e3c <gettext@plt>
   11188:	mov	r3, r0
   1118c:	movw	r2, #36912	; 0x9030
   11190:	movt	r2, #1
   11194:	movw	r1, #36952	; 0x9058
   11198:	movt	r1, #1
   1119c:	mov	r0, r3
   111a0:	bl	10cec <printf@plt>
   111a4:	mov	r1, #0
   111a8:	mov	r0, #5
   111ac:	bl	10ec0 <setlocale@plt>
   111b0:	str	r0, [fp, #-16]
   111b4:	ldr	r3, [fp, #-16]
   111b8:	cmp	r3, #0
   111bc:	beq	11208 <__assert_fail@plt+0x2dc>
   111c0:	mov	r2, #3
   111c4:	movw	r1, #36968	; 0x9068
   111c8:	movt	r1, #1
   111cc:	ldr	r0, [fp, #-16]
   111d0:	bl	10f08 <strncmp@plt>
   111d4:	mov	r3, r0
   111d8:	cmp	r3, #0
   111dc:	beq	11208 <__assert_fail@plt+0x2dc>
   111e0:	movw	r0, #36972	; 0x906c
   111e4:	movt	r0, #1
   111e8:	bl	10e3c <gettext@plt>
   111ec:	mov	r2, r0
   111f0:	movw	r3, #41300	; 0xa154
   111f4:	movt	r3, #2
   111f8:	ldr	r3, [r3]
   111fc:	mov	r1, r3
   11200:	mov	r0, r2
   11204:	bl	10cc8 <fputs_unlocked@plt>
   11208:	movw	r0, #37044	; 0x90b4
   1120c:	movt	r0, #1
   11210:	bl	10e3c <gettext@plt>
   11214:	mov	r3, r0
   11218:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1121c:	movw	r1, #36912	; 0x9030
   11220:	movt	r1, #1
   11224:	mov	r0, r3
   11228:	bl	10cec <printf@plt>
   1122c:	movw	r0, #37072	; 0x90d0
   11230:	movt	r0, #1
   11234:	bl	10e3c <gettext@plt>
   11238:	ldr	r2, [fp, #-8]
   1123c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11240:	cmp	r2, r3
   11244:	bne	11254 <__assert_fail@plt+0x328>
   11248:	movw	r3, #37124	; 0x9104
   1124c:	movt	r3, #1
   11250:	b	1125c <__assert_fail@plt+0x330>
   11254:	movw	r3, #37136	; 0x9110
   11258:	movt	r3, #1
   1125c:	mov	r2, r3
   11260:	ldr	r1, [fp, #-8]
   11264:	bl	10cec <printf@plt>
   11268:	nop	{0}
   1126c:	sub	sp, fp, #4
   11270:	ldr	fp, [sp]
   11274:	add	sp, sp, #4
   11278:	pop	{pc}		; (ldr pc, [sp], #4)
   1127c:	str	r4, [sp, #-12]!
   11280:	str	fp, [sp, #4]
   11284:	str	lr, [sp, #8]
   11288:	add	fp, sp, #8
   1128c:	sub	sp, sp, #12
   11290:	str	r0, [fp, #-16]
   11294:	ldr	r3, [fp, #-16]
   11298:	cmp	r3, #0
   1129c:	beq	112d8 <__assert_fail@plt+0x3ac>
   112a0:	movw	r3, #41288	; 0xa148
   112a4:	movt	r3, #2
   112a8:	ldr	r4, [r3]
   112ac:	movw	r0, #37316	; 0x91c4
   112b0:	movt	r0, #1
   112b4:	bl	10e3c <gettext@plt>
   112b8:	mov	r1, r0
   112bc:	movw	r3, #8856	; 0x2298
   112c0:	movt	r3, #3
   112c4:	ldr	r3, [r3]
   112c8:	mov	r2, r3
   112cc:	mov	r0, r4
   112d0:	bl	10e60 <fprintf@plt>
   112d4:	b	113dc <__assert_fail@plt+0x4b0>
   112d8:	movw	r0, #37356	; 0x91ec
   112dc:	movt	r0, #1
   112e0:	bl	10e3c <gettext@plt>
   112e4:	mov	r2, r0
   112e8:	movw	r3, #8856	; 0x2298
   112ec:	movt	r3, #3
   112f0:	ldr	r3, [r3]
   112f4:	mov	r1, r3
   112f8:	mov	r0, r2
   112fc:	bl	10cec <printf@plt>
   11300:	movw	r0, #37400	; 0x9218
   11304:	movt	r0, #1
   11308:	bl	10e3c <gettext@plt>
   1130c:	mov	r2, r0
   11310:	movw	r3, #41300	; 0xa154
   11314:	movt	r3, #2
   11318:	ldr	r3, [r3]
   1131c:	mov	r1, r3
   11320:	mov	r0, r2
   11324:	bl	10cc8 <fputs_unlocked@plt>
   11328:	bl	11028 <__assert_fail@plt+0xfc>
   1132c:	bl	11070 <__assert_fail@plt+0x144>
   11330:	movw	r0, #37532	; 0x929c
   11334:	movt	r0, #1
   11338:	bl	10e3c <gettext@plt>
   1133c:	mov	r2, r0
   11340:	movw	r3, #41300	; 0xa154
   11344:	movt	r3, #2
   11348:	ldr	r3, [r3]
   1134c:	mov	r1, r3
   11350:	mov	r0, r2
   11354:	bl	10cc8 <fputs_unlocked@plt>
   11358:	movw	r0, #37812	; 0x93b4
   1135c:	movt	r0, #1
   11360:	bl	10e3c <gettext@plt>
   11364:	mov	r2, r0
   11368:	movw	r3, #41300	; 0xa154
   1136c:	movt	r3, #2
   11370:	ldr	r3, [r3]
   11374:	mov	r1, r3
   11378:	mov	r0, r2
   1137c:	bl	10cc8 <fputs_unlocked@plt>
   11380:	movw	r0, #38100	; 0x94d4
   11384:	movt	r0, #1
   11388:	bl	10e3c <gettext@plt>
   1138c:	mov	r2, r0
   11390:	movw	r3, #41300	; 0xa154
   11394:	movt	r3, #2
   11398:	ldr	r3, [r3]
   1139c:	mov	r1, r3
   113a0:	mov	r0, r2
   113a4:	bl	10cc8 <fputs_unlocked@plt>
   113a8:	movw	r0, #38148	; 0x9504
   113ac:	movt	r0, #1
   113b0:	bl	10e3c <gettext@plt>
   113b4:	mov	r2, r0
   113b8:	movw	r3, #41300	; 0xa154
   113bc:	movt	r3, #2
   113c0:	ldr	r3, [r3]
   113c4:	mov	r1, r3
   113c8:	mov	r0, r2
   113cc:	bl	10cc8 <fputs_unlocked@plt>
   113d0:	movw	r0, #38204	; 0x953c
   113d4:	movt	r0, #1
   113d8:	bl	110b8 <__assert_fail@plt+0x18c>
   113dc:	ldr	r0, [fp, #-16]
   113e0:	bl	10e30 <exit@plt>
   113e4:	strd	r4, [sp, #-16]!
   113e8:	str	fp, [sp, #8]
   113ec:	str	lr, [sp, #12]
   113f0:	add	fp, sp, #12
   113f4:	sub	sp, sp, #64	; 0x40
   113f8:	str	r0, [fp, #-48]	; 0xffffffd0
   113fc:	str	r1, [fp, #-52]	; 0xffffffcc
   11400:	mov	r3, #1
   11404:	strb	r3, [fp, #-13]
   11408:	mov	r3, #0
   1140c:	str	r3, [fp, #-20]	; 0xffffffec
   11410:	mov	r3, #0
   11414:	str	r3, [fp, #-24]	; 0xffffffe8
   11418:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1141c:	ldr	r3, [r3]
   11420:	mov	r0, r3
   11424:	bl	13ae4 <__assert_fail@plt+0x2bb8>
   11428:	movw	r1, #37136	; 0x9110
   1142c:	movt	r1, #1
   11430:	mov	r0, #6
   11434:	bl	10ec0 <setlocale@plt>
   11438:	movw	r1, #38472	; 0x9648
   1143c:	movt	r1, #1
   11440:	movw	r0, #37160	; 0x9128
   11444:	movt	r0, #1
   11448:	bl	10efc <bindtextdomain@plt>
   1144c:	movw	r0, #37160	; 0x9128
   11450:	movt	r0, #1
   11454:	bl	10d7c <textdomain@plt>
   11458:	movw	r0, #13868	; 0x362c
   1145c:	movt	r0, #1
   11460:	bl	18f70 <__assert_fail@plt+0x8044>
   11464:	movw	r3, #41315	; 0xa163
   11468:	movt	r3, #2
   1146c:	mov	r2, #0
   11470:	strb	r2, [r3]
   11474:	movw	r3, #41315	; 0xa163
   11478:	movt	r3, #2
   1147c:	ldrb	r2, [r3]
   11480:	movw	r3, #41314	; 0xa162
   11484:	movt	r3, #2
   11488:	strb	r2, [r3]
   1148c:	movw	r3, #41314	; 0xa162
   11490:	movt	r3, #2
   11494:	ldrb	r2, [r3]
   11498:	movw	r3, #41313	; 0xa161
   1149c:	movt	r3, #2
   114a0:	strb	r2, [r3]
   114a4:	movw	r3, #41313	; 0xa161
   114a8:	movt	r3, #2
   114ac:	ldrb	r2, [r3]
   114b0:	movw	r3, #41312	; 0xa160
   114b4:	movt	r3, #2
   114b8:	strb	r2, [r3]
   114bc:	movw	r3, #41320	; 0xa168
   114c0:	movt	r3, #2
   114c4:	mov	r2, #75	; 0x4b
   114c8:	str	r2, [r3]
   114cc:	movw	r3, #41316	; 0xa164
   114d0:	movt	r3, #2
   114d4:	movw	r2, #37136	; 0x9110
   114d8:	movt	r2, #1
   114dc:	str	r2, [r3]
   114e0:	movw	r3, #41324	; 0xa16c
   114e4:	movt	r3, #2
   114e8:	mov	r2, #0
   114ec:	str	r2, [r3]
   114f0:	movw	r3, #41324	; 0xa16c
   114f4:	movt	r3, #2
   114f8:	ldr	r2, [r3]
   114fc:	movw	r3, #41328	; 0xa170
   11500:	movt	r3, #2
   11504:	str	r2, [r3]
   11508:	movw	r3, #41328	; 0xa170
   1150c:	movt	r3, #2
   11510:	ldr	r2, [r3]
   11514:	movw	r3, #41332	; 0xa174
   11518:	movt	r3, #2
   1151c:	str	r2, [r3]
   11520:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11524:	cmp	r3, #1
   11528:	ble	11760 <__assert_fail@plt+0x834>
   1152c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11530:	add	r3, r3, #4
   11534:	ldr	r3, [r3]
   11538:	ldrb	r3, [r3]
   1153c:	cmp	r3, #45	; 0x2d
   11540:	bne	11760 <__assert_fail@plt+0x834>
   11544:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11548:	add	r3, r3, #4
   1154c:	ldr	r3, [r3]
   11550:	add	r3, r3, #1
   11554:	ldrb	r3, [r3]
   11558:	sub	r3, r3, #48	; 0x30
   1155c:	cmp	r3, #9
   11560:	bhi	11760 <__assert_fail@plt+0x834>
   11564:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11568:	add	r3, r3, #4
   1156c:	ldr	r3, [r3]
   11570:	add	r3, r3, #1
   11574:	str	r3, [fp, #-20]	; 0xffffffec
   11578:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1157c:	add	r3, r3, #4
   11580:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11584:	ldr	r2, [r2]
   11588:	str	r2, [r3]
   1158c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11590:	add	r3, r3, #4
   11594:	str	r3, [fp, #-52]	; 0xffffffcc
   11598:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1159c:	sub	r3, r3, #1
   115a0:	str	r3, [fp, #-48]	; 0xffffffd0
   115a4:	b	11760 <__assert_fail@plt+0x834>
   115a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115ac:	cmp	r3, #112	; 0x70
   115b0:	beq	116f4 <__assert_fail@plt+0x7c8>
   115b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115b8:	cmp	r3, #112	; 0x70
   115bc:	bgt	11604 <__assert_fail@plt+0x6d8>
   115c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115c4:	cmn	r3, #2
   115c8:	beq	1170c <__assert_fail@plt+0x7e0>
   115cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115d0:	cmn	r3, #2
   115d4:	bgt	115e8 <__assert_fail@plt+0x6bc>
   115d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115dc:	cmn	r3, #3
   115e0:	beq	11714 <__assert_fail@plt+0x7e8>
   115e4:	b	11644 <__assert_fail@plt+0x718>
   115e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115ec:	cmp	r3, #99	; 0x63
   115f0:	beq	1167c <__assert_fail@plt+0x750>
   115f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   115f8:	cmp	r3, #103	; 0x67
   115fc:	beq	116e0 <__assert_fail@plt+0x7b4>
   11600:	b	11644 <__assert_fail@plt+0x718>
   11604:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11608:	cmp	r3, #116	; 0x74
   1160c:	beq	116a4 <__assert_fail@plt+0x778>
   11610:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11614:	cmp	r3, #116	; 0x74
   11618:	bgt	1162c <__assert_fail@plt+0x700>
   1161c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11620:	cmp	r3, #115	; 0x73
   11624:	beq	11690 <__assert_fail@plt+0x764>
   11628:	b	11644 <__assert_fail@plt+0x718>
   1162c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11630:	cmp	r3, #117	; 0x75
   11634:	beq	116b8 <__assert_fail@plt+0x78c>
   11638:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1163c:	cmp	r3, #119	; 0x77
   11640:	beq	116cc <__assert_fail@plt+0x7a0>
   11644:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11648:	sub	r3, r3, #48	; 0x30
   1164c:	cmp	r3, #9
   11650:	bhi	11674 <__assert_fail@plt+0x748>
   11654:	movw	r0, #38496	; 0x9660
   11658:	movt	r0, #1
   1165c:	bl	10e3c <gettext@plt>
   11660:	mov	r2, r0
   11664:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11668:	mov	r1, #0
   1166c:	mov	r0, #0
   11670:	bl	10ddc <error@plt>
   11674:	mov	r0, #1
   11678:	bl	1127c <__assert_fail@plt+0x350>
   1167c:	movw	r3, #41312	; 0xa160
   11680:	movt	r3, #2
   11684:	mov	r2, #1
   11688:	strb	r2, [r3]
   1168c:	b	11760 <__assert_fail@plt+0x834>
   11690:	movw	r3, #41314	; 0xa162
   11694:	movt	r3, #2
   11698:	mov	r2, #1
   1169c:	strb	r2, [r3]
   116a0:	b	11760 <__assert_fail@plt+0x834>
   116a4:	movw	r3, #41313	; 0xa161
   116a8:	movt	r3, #2
   116ac:	mov	r2, #1
   116b0:	strb	r2, [r3]
   116b4:	b	11760 <__assert_fail@plt+0x834>
   116b8:	movw	r3, #41315	; 0xa163
   116bc:	movt	r3, #2
   116c0:	mov	r2, #1
   116c4:	strb	r2, [r3]
   116c8:	b	11760 <__assert_fail@plt+0x834>
   116cc:	movw	r3, #41304	; 0xa158
   116d0:	movt	r3, #2
   116d4:	ldr	r3, [r3]
   116d8:	str	r3, [fp, #-20]	; 0xffffffec
   116dc:	b	11760 <__assert_fail@plt+0x834>
   116e0:	movw	r3, #41304	; 0xa158
   116e4:	movt	r3, #2
   116e8:	ldr	r3, [r3]
   116ec:	str	r3, [fp, #-24]	; 0xffffffe8
   116f0:	b	11760 <__assert_fail@plt+0x834>
   116f4:	movw	r3, #41304	; 0xa158
   116f8:	movt	r3, #2
   116fc:	ldr	r3, [r3]
   11700:	mov	r0, r3
   11704:	bl	11ae4 <__assert_fail@plt+0xbb8>
   11708:	b	11760 <__assert_fail@plt+0x834>
   1170c:	mov	r0, #0
   11710:	bl	1127c <__assert_fail@plt+0x350>
   11714:	movw	r3, #41300	; 0xa154
   11718:	movt	r3, #2
   1171c:	ldr	r0, [r3]
   11720:	movw	r3, #41196	; 0xa0ec
   11724:	movt	r3, #2
   11728:	ldr	r2, [r3]
   1172c:	mov	r3, #0
   11730:	str	r3, [sp, #4]
   11734:	movw	r3, #38592	; 0x96c0
   11738:	movt	r3, #1
   1173c:	str	r3, [sp]
   11740:	mov	r3, r2
   11744:	movw	r2, #36952	; 0x9058
   11748:	movt	r2, #1
   1174c:	movw	r1, #38204	; 0x953c
   11750:	movt	r1, #1
   11754:	bl	16b4c <__assert_fail@plt+0x5c20>
   11758:	mov	r0, #0
   1175c:	bl	10e30 <exit@plt>
   11760:	mov	r3, #0
   11764:	str	r3, [sp]
   11768:	movw	r3, #38312	; 0x95a8
   1176c:	movt	r3, #1
   11770:	movw	r2, #38608	; 0x96d0
   11774:	movt	r2, #1
   11778:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1177c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11780:	bl	10e18 <getopt_long@plt>
   11784:	str	r0, [fp, #-32]	; 0xffffffe0
   11788:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1178c:	cmn	r3, #1
   11790:	bne	115a8 <__assert_fail@plt+0x67c>
   11794:	ldr	r3, [fp, #-20]	; 0xffffffec
   11798:	cmp	r3, #0
   1179c:	beq	117f8 <__assert_fail@plt+0x8cc>
   117a0:	movw	r0, #38632	; 0x96e8
   117a4:	movt	r0, #1
   117a8:	bl	10e3c <gettext@plt>
   117ac:	mov	r2, r0
   117b0:	mov	r3, #0
   117b4:	str	r3, [sp, #16]
   117b8:	str	r2, [sp, #12]
   117bc:	movw	r3, #37136	; 0x9110
   117c0:	movt	r3, #1
   117c4:	str	r3, [sp, #8]
   117c8:	movw	r2, #2500	; 0x9c4
   117cc:	mov	r3, #0
   117d0:	strd	r2, [sp]
   117d4:	mov	r2, #0
   117d8:	mov	r3, #0
   117dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   117e0:	bl	17714 <__assert_fail@plt+0x67e8>
   117e4:	mov	r2, r0
   117e8:	mov	r3, r1
   117ec:	movw	r3, #41320	; 0xa168
   117f0:	movt	r3, #2
   117f4:	str	r2, [r3]
   117f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117fc:	cmp	r3, #0
   11800:	beq	11894 <__assert_fail@plt+0x968>
   11804:	movw	r3, #41320	; 0xa168
   11808:	movt	r3, #2
   1180c:	ldr	r3, [r3]
   11810:	mov	r4, r3
   11814:	asr	r5, r4, #31
   11818:	movw	r0, #38632	; 0x96e8
   1181c:	movt	r0, #1
   11820:	bl	10e3c <gettext@plt>
   11824:	mov	r2, r0
   11828:	mov	r3, #0
   1182c:	str	r3, [sp, #16]
   11830:	str	r2, [sp, #12]
   11834:	movw	r3, #37136	; 0x9110
   11838:	movt	r3, #1
   1183c:	str	r3, [sp, #8]
   11840:	strd	r4, [sp]
   11844:	mov	r2, #0
   11848:	mov	r3, #0
   1184c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11850:	bl	17714 <__assert_fail@plt+0x67e8>
   11854:	mov	r2, r0
   11858:	mov	r3, r1
   1185c:	movw	r3, #41336	; 0xa178
   11860:	movt	r3, #2
   11864:	str	r2, [r3]
   11868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1186c:	cmp	r3, #0
   11870:	bne	118cc <__assert_fail@plt+0x9a0>
   11874:	movw	r3, #41336	; 0xa178
   11878:	movt	r3, #2
   1187c:	ldr	r3, [r3]
   11880:	add	r2, r3, #10
   11884:	movw	r3, #41320	; 0xa168
   11888:	movt	r3, #2
   1188c:	str	r2, [r3]
   11890:	b	118cc <__assert_fail@plt+0x9a0>
   11894:	movw	r3, #41320	; 0xa168
   11898:	movt	r3, #2
   1189c:	ldr	r3, [r3]
   118a0:	mov	r2, #187	; 0xbb
   118a4:	mul	r2, r2, r3
   118a8:	movw	r3, #34079	; 0x851f
   118ac:	movt	r3, #20971	; 0x51eb
   118b0:	smull	r1, r3, r3, r2
   118b4:	asr	r1, r3, #6
   118b8:	asr	r3, r2, #31
   118bc:	sub	r2, r1, r3
   118c0:	movw	r3, #41336	; 0xa178
   118c4:	movt	r3, #2
   118c8:	str	r2, [r3]
   118cc:	mov	r3, #0
   118d0:	strb	r3, [fp, #-25]	; 0xffffffe7
   118d4:	movw	r3, #41280	; 0xa140
   118d8:	movt	r3, #2
   118dc:	ldr	r3, [r3]
   118e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   118e4:	cmp	r2, r3
   118e8:	bne	11a4c <__assert_fail@plt+0xb20>
   118ec:	mov	r3, #1
   118f0:	strb	r3, [fp, #-25]	; 0xffffffe7
   118f4:	movw	r3, #41296	; 0xa150
   118f8:	movt	r3, #2
   118fc:	ldr	r3, [r3]
   11900:	movw	r1, #38648	; 0x96f8
   11904:	movt	r1, #1
   11908:	mov	r0, r3
   1190c:	bl	11bf8 <__assert_fail@plt+0xccc>
   11910:	mov	r3, r0
   11914:	strb	r3, [fp, #-13]
   11918:	b	11a64 <__assert_fail@plt+0xb38>
   1191c:	movw	r3, #41280	; 0xa140
   11920:	movt	r3, #2
   11924:	ldr	r3, [r3]
   11928:	lsl	r3, r3, #2
   1192c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11930:	add	r3, r2, r3
   11934:	ldr	r3, [r3]
   11938:	str	r3, [fp, #-36]	; 0xffffffdc
   1193c:	movw	r1, #38648	; 0x96f8
   11940:	movt	r1, #1
   11944:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11948:	bl	10cd4 <strcmp@plt>
   1194c:	mov	r3, r0
   11950:	cmp	r3, #0
   11954:	bne	1199c <__assert_fail@plt+0xa70>
   11958:	movw	r3, #41296	; 0xa150
   1195c:	movt	r3, #2
   11960:	ldr	r3, [r3]
   11964:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11968:	mov	r0, r3
   1196c:	bl	11bf8 <__assert_fail@plt+0xccc>
   11970:	mov	r3, r0
   11974:	mov	r2, r3
   11978:	ldrb	r3, [fp, #-13]
   1197c:	and	r3, r3, r2
   11980:	cmp	r3, #0
   11984:	movne	r3, #1
   11988:	moveq	r3, #0
   1198c:	strb	r3, [fp, #-13]
   11990:	mov	r3, #1
   11994:	strb	r3, [fp, #-25]	; 0xffffffe7
   11998:	b	11a30 <__assert_fail@plt+0xb04>
   1199c:	movw	r1, #38652	; 0x96fc
   119a0:	movt	r1, #1
   119a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   119a8:	bl	10ef0 <fopen64@plt>
   119ac:	str	r0, [fp, #-40]	; 0xffffffd8
   119b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119b4:	cmp	r3, #0
   119b8:	beq	119ec <__assert_fail@plt+0xac0>
   119bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   119c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   119c4:	bl	11bf8 <__assert_fail@plt+0xccc>
   119c8:	mov	r3, r0
   119cc:	mov	r2, r3
   119d0:	ldrb	r3, [fp, #-13]
   119d4:	and	r3, r3, r2
   119d8:	cmp	r3, #0
   119dc:	movne	r3, #1
   119e0:	moveq	r3, #0
   119e4:	strb	r3, [fp, #-13]
   119e8:	b	11a30 <__assert_fail@plt+0xb04>
   119ec:	bl	10e6c <__errno_location@plt>
   119f0:	mov	r3, r0
   119f4:	ldr	r4, [r3]
   119f8:	movw	r0, #38656	; 0x9700
   119fc:	movt	r0, #1
   11a00:	bl	10e3c <gettext@plt>
   11a04:	mov	r5, r0
   11a08:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11a0c:	mov	r0, #4
   11a10:	bl	15f64 <__assert_fail@plt+0x5038>
   11a14:	mov	r3, r0
   11a18:	mov	r2, r5
   11a1c:	mov	r1, r4
   11a20:	mov	r0, #0
   11a24:	bl	10ddc <error@plt>
   11a28:	mov	r3, #0
   11a2c:	strb	r3, [fp, #-13]
   11a30:	movw	r3, #41280	; 0xa140
   11a34:	movt	r3, #2
   11a38:	ldr	r3, [r3]
   11a3c:	add	r2, r3, #1
   11a40:	movw	r3, #41280	; 0xa140
   11a44:	movt	r3, #2
   11a48:	str	r2, [r3]
   11a4c:	movw	r3, #41280	; 0xa140
   11a50:	movt	r3, #2
   11a54:	ldr	r3, [r3]
   11a58:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11a5c:	cmp	r2, r3
   11a60:	bgt	1191c <__assert_fail@plt+0x9f0>
   11a64:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11a68:	cmp	r3, #0
   11a6c:	beq	11ac0 <__assert_fail@plt+0xb94>
   11a70:	movw	r3, #41296	; 0xa150
   11a74:	movt	r3, #2
   11a78:	ldr	r3, [r3]
   11a7c:	mov	r0, r3
   11a80:	bl	13830 <__assert_fail@plt+0x2904>
   11a84:	mov	r3, r0
   11a88:	cmp	r3, #0
   11a8c:	beq	11ac0 <__assert_fail@plt+0xb94>
   11a90:	bl	10e6c <__errno_location@plt>
   11a94:	mov	r3, r0
   11a98:	ldr	r4, [r3]
   11a9c:	movw	r0, #38684	; 0x971c
   11aa0:	movt	r0, #1
   11aa4:	bl	10e3c <gettext@plt>
   11aa8:	mov	r3, r0
   11aac:	movw	r2, #38708	; 0x9734
   11ab0:	movt	r2, #1
   11ab4:	mov	r1, r4
   11ab8:	mov	r0, #1
   11abc:	bl	10ddc <error@plt>
   11ac0:	ldrb	r3, [fp, #-13]
   11ac4:	eor	r3, r3, #1
   11ac8:	uxtb	r3, r3
   11acc:	mov	r0, r3
   11ad0:	sub	sp, fp, #12
   11ad4:	ldrd	r4, [sp]
   11ad8:	ldr	fp, [sp, #8]
   11adc:	add	sp, sp, #12
   11ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ae4:	str	fp, [sp, #-8]!
   11ae8:	str	lr, [sp, #4]
   11aec:	add	fp, sp, #4
   11af0:	sub	sp, sp, #16
   11af4:	str	r0, [fp, #-16]
   11af8:	movw	r3, #41328	; 0xa170
   11afc:	movt	r3, #2
   11b00:	mov	r2, #0
   11b04:	str	r2, [r3]
   11b08:	b	11b34 <__assert_fail@plt+0xc08>
   11b0c:	movw	r3, #41328	; 0xa170
   11b10:	movt	r3, #2
   11b14:	ldr	r3, [r3]
   11b18:	add	r2, r3, #1
   11b1c:	movw	r3, #41328	; 0xa170
   11b20:	movt	r3, #2
   11b24:	str	r2, [r3]
   11b28:	ldr	r3, [fp, #-16]
   11b2c:	add	r3, r3, #1
   11b30:	str	r3, [fp, #-16]
   11b34:	ldr	r3, [fp, #-16]
   11b38:	ldrb	r3, [r3]
   11b3c:	cmp	r3, #32
   11b40:	beq	11b0c <__assert_fail@plt+0xbe0>
   11b44:	movw	r3, #41316	; 0xa164
   11b48:	movt	r3, #2
   11b4c:	ldr	r2, [fp, #-16]
   11b50:	str	r2, [r3]
   11b54:	ldr	r0, [fp, #-16]
   11b58:	bl	10e48 <strlen@plt>
   11b5c:	mov	r3, r0
   11b60:	mov	r2, r3
   11b64:	movw	r3, #41324	; 0xa16c
   11b68:	movt	r3, #2
   11b6c:	str	r2, [r3]
   11b70:	movw	r3, #41324	; 0xa16c
   11b74:	movt	r3, #2
   11b78:	ldr	r3, [r3]
   11b7c:	mov	r2, r3
   11b80:	ldr	r3, [fp, #-16]
   11b84:	add	r3, r3, r2
   11b88:	str	r3, [fp, #-8]
   11b8c:	b	11b9c <__assert_fail@plt+0xc70>
   11b90:	ldr	r3, [fp, #-8]
   11b94:	sub	r3, r3, #1
   11b98:	str	r3, [fp, #-8]
   11b9c:	ldr	r2, [fp, #-8]
   11ba0:	ldr	r3, [fp, #-16]
   11ba4:	cmp	r2, r3
   11ba8:	bls	11bc0 <__assert_fail@plt+0xc94>
   11bac:	ldr	r3, [fp, #-8]
   11bb0:	sub	r3, r3, #1
   11bb4:	ldrb	r3, [r3]
   11bb8:	cmp	r3, #32
   11bbc:	beq	11b90 <__assert_fail@plt+0xc64>
   11bc0:	ldr	r3, [fp, #-8]
   11bc4:	mov	r2, #0
   11bc8:	strb	r2, [r3]
   11bcc:	ldr	r2, [fp, #-8]
   11bd0:	ldr	r3, [fp, #-16]
   11bd4:	sub	r2, r2, r3
   11bd8:	movw	r3, #41332	; 0xa174
   11bdc:	movt	r3, #2
   11be0:	str	r2, [r3]
   11be4:	nop	{0}
   11be8:	sub	sp, fp, #4
   11bec:	ldr	fp, [sp]
   11bf0:	add	sp, sp, #4
   11bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bf8:	str	r4, [sp, #-12]!
   11bfc:	str	fp, [sp, #4]
   11c00:	str	lr, [sp, #8]
   11c04:	add	fp, sp, #8
   11c08:	sub	sp, sp, #20
   11c0c:	str	r0, [fp, #-24]	; 0xffffffe8
   11c10:	str	r1, [fp, #-28]	; 0xffffffe4
   11c14:	mov	r1, #2
   11c18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11c1c:	bl	137c8 <__assert_fail@plt+0x289c>
   11c20:	movw	r3, #8820	; 0x2274
   11c24:	movt	r3, #3
   11c28:	mov	r2, #0
   11c2c:	strb	r2, [r3]
   11c30:	movw	r3, #8832	; 0x2280
   11c34:	movt	r3, #3
   11c38:	mov	r2, #0
   11c3c:	str	r2, [r3]
   11c40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11c44:	bl	12774 <__assert_fail@plt+0x1848>
   11c48:	mov	r2, r0
   11c4c:	movw	r3, #8836	; 0x2284
   11c50:	movt	r3, #3
   11c54:	str	r2, [r3]
   11c58:	b	11c74 <__assert_fail@plt+0xd48>
   11c5c:	bl	12d50 <__assert_fail@plt+0x1e24>
   11c60:	movw	r3, #8816	; 0x2270
   11c64:	movt	r3, #3
   11c68:	ldr	r3, [r3]
   11c6c:	mov	r0, r3
   11c70:	bl	13254 <__assert_fail@plt+0x2328>
   11c74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11c78:	bl	11ee0 <__assert_fail@plt+0xfb4>
   11c7c:	mov	r3, r0
   11c80:	cmp	r3, #0
   11c84:	bne	11c5c <__assert_fail@plt+0xd30>
   11c88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11c8c:	bl	10dc4 <ferror_unlocked@plt>
   11c90:	mov	r3, r0
   11c94:	cmp	r3, #0
   11c98:	beq	11ca4 <__assert_fail@plt+0xd78>
   11c9c:	mov	r3, #0
   11ca0:	b	11ca8 <__assert_fail@plt+0xd7c>
   11ca4:	mvn	r3, #0
   11ca8:	str	r3, [fp, #-16]
   11cac:	movw	r3, #41296	; 0xa150
   11cb0:	movt	r3, #2
   11cb4:	ldr	r3, [r3]
   11cb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11cbc:	cmp	r2, r3
   11cc0:	bne	11cd0 <__assert_fail@plt+0xda4>
   11cc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11cc8:	bl	10ee4 <clearerr_unlocked@plt>
   11ccc:	b	11d00 <__assert_fail@plt+0xdd4>
   11cd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11cd4:	bl	13830 <__assert_fail@plt+0x2904>
   11cd8:	mov	r3, r0
   11cdc:	cmp	r3, #0
   11ce0:	beq	11d00 <__assert_fail@plt+0xdd4>
   11ce4:	ldr	r3, [fp, #-16]
   11ce8:	cmp	r3, #0
   11cec:	bge	11d00 <__assert_fail@plt+0xdd4>
   11cf0:	bl	10e6c <__errno_location@plt>
   11cf4:	mov	r3, r0
   11cf8:	ldr	r3, [r3]
   11cfc:	str	r3, [fp, #-16]
   11d00:	ldr	r3, [fp, #-16]
   11d04:	cmp	r3, #0
   11d08:	blt	11d58 <__assert_fail@plt+0xe2c>
   11d0c:	ldr	r3, [fp, #-16]
   11d10:	cmp	r3, #0
   11d14:	bne	11d2c <__assert_fail@plt+0xe00>
   11d18:	movw	r0, #38712	; 0x9738
   11d1c:	movt	r0, #1
   11d20:	bl	10e3c <gettext@plt>
   11d24:	mov	r4, r0
   11d28:	b	11d34 <__assert_fail@plt+0xe08>
   11d2c:	movw	r4, #38708	; 0x9734
   11d30:	movt	r4, #1
   11d34:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11d38:	mov	r1, #3
   11d3c:	mov	r0, #0
   11d40:	bl	16148 <__assert_fail@plt+0x521c>
   11d44:	mov	r3, r0
   11d48:	mov	r2, r4
   11d4c:	ldr	r1, [fp, #-16]
   11d50:	mov	r0, #0
   11d54:	bl	10ddc <error@plt>
   11d58:	ldr	r3, [fp, #-16]
   11d5c:	lsr	r3, r3, #31
   11d60:	uxtb	r3, r3
   11d64:	mov	r0, r3
   11d68:	sub	sp, fp, #8
   11d6c:	ldr	r4, [sp]
   11d70:	ldr	fp, [sp, #4]
   11d74:	add	sp, sp, #8
   11d78:	pop	{pc}		; (ldr pc, [sp], #4)
   11d7c:	push	{fp}		; (str fp, [sp, #-4]!)
   11d80:	add	fp, sp, #0
   11d84:	sub	sp, sp, #12
   11d88:	mov	r3, r0
   11d8c:	strb	r3, [fp, #-5]
   11d90:	movw	r3, #41314	; 0xa162
   11d94:	movt	r3, #2
   11d98:	ldrb	r3, [r3]
   11d9c:	cmp	r3, #0
   11da0:	beq	11dc0 <__assert_fail@plt+0xe94>
   11da4:	movw	r3, #8828	; 0x227c
   11da8:	movt	r3, #3
   11dac:	ldr	r2, [r3]
   11db0:	movw	r3, #8832	; 0x2280
   11db4:	movt	r3, #3
   11db8:	str	r2, [r3]
   11dbc:	b	11ed0 <__assert_fail@plt+0xfa4>
   11dc0:	movw	r3, #41312	; 0xa160
   11dc4:	movt	r3, #2
   11dc8:	ldrb	r3, [r3]
   11dcc:	cmp	r3, #0
   11dd0:	beq	11e0c <__assert_fail@plt+0xee0>
   11dd4:	ldrb	r3, [fp, #-5]
   11dd8:	cmp	r3, #0
   11ddc:	beq	11df0 <__assert_fail@plt+0xec4>
   11de0:	movw	r3, #41340	; 0xa17c
   11de4:	movt	r3, #2
   11de8:	ldr	r2, [r3]
   11dec:	b	11dfc <__assert_fail@plt+0xed0>
   11df0:	movw	r3, #8828	; 0x227c
   11df4:	movt	r3, #3
   11df8:	ldr	r2, [r3]
   11dfc:	movw	r3, #8832	; 0x2280
   11e00:	movt	r3, #3
   11e04:	str	r2, [r3]
   11e08:	b	11ed0 <__assert_fail@plt+0xfa4>
   11e0c:	movw	r3, #41313	; 0xa161
   11e10:	movt	r3, #2
   11e14:	ldrb	r3, [r3]
   11e18:	cmp	r3, #0
   11e1c:	beq	11eb8 <__assert_fail@plt+0xf8c>
   11e20:	ldrb	r3, [fp, #-5]
   11e24:	cmp	r3, #0
   11e28:	beq	11e68 <__assert_fail@plt+0xf3c>
   11e2c:	movw	r3, #41340	; 0xa17c
   11e30:	movt	r3, #2
   11e34:	ldr	r2, [r3]
   11e38:	movw	r3, #8828	; 0x227c
   11e3c:	movt	r3, #3
   11e40:	ldr	r3, [r3]
   11e44:	cmp	r2, r3
   11e48:	beq	11e68 <__assert_fail@plt+0xf3c>
   11e4c:	movw	r3, #41340	; 0xa17c
   11e50:	movt	r3, #2
   11e54:	ldr	r2, [r3]
   11e58:	movw	r3, #8832	; 0x2280
   11e5c:	movt	r3, #3
   11e60:	str	r2, [r3]
   11e64:	b	11ed0 <__assert_fail@plt+0xfa4>
   11e68:	movw	r3, #8832	; 0x2280
   11e6c:	movt	r3, #3
   11e70:	ldr	r2, [r3]
   11e74:	movw	r3, #8828	; 0x227c
   11e78:	movt	r3, #3
   11e7c:	ldr	r3, [r3]
   11e80:	cmp	r2, r3
   11e84:	bne	11ed0 <__assert_fail@plt+0xfa4>
   11e88:	movw	r3, #8828	; 0x227c
   11e8c:	movt	r3, #3
   11e90:	ldr	r3, [r3]
   11e94:	cmp	r3, #0
   11e98:	bne	11ea4 <__assert_fail@plt+0xf78>
   11e9c:	mov	r2, #3
   11ea0:	b	11ea8 <__assert_fail@plt+0xf7c>
   11ea4:	mov	r2, #0
   11ea8:	movw	r3, #8832	; 0x2280
   11eac:	movt	r3, #3
   11eb0:	str	r2, [r3]
   11eb4:	b	11ed0 <__assert_fail@plt+0xfa4>
   11eb8:	movw	r3, #8828	; 0x227c
   11ebc:	movt	r3, #3
   11ec0:	ldr	r2, [r3]
   11ec4:	movw	r3, #8832	; 0x2280
   11ec8:	movt	r3, #3
   11ecc:	str	r2, [r3]
   11ed0:	nop	{0}
   11ed4:	add	sp, fp, #0
   11ed8:	pop	{fp}		; (ldr fp, [sp], #4)
   11edc:	bx	lr
   11ee0:	str	fp, [sp, #-8]!
   11ee4:	str	lr, [sp, #4]
   11ee8:	add	fp, sp, #4
   11eec:	sub	sp, sp, #16
   11ef0:	str	r0, [fp, #-16]
   11ef4:	movw	r3, #8844	; 0x228c
   11ef8:	movt	r3, #3
   11efc:	mov	r2, #0
   11f00:	str	r2, [r3]
   11f04:	movw	r3, #8836	; 0x2284
   11f08:	movt	r3, #3
   11f0c:	ldr	r3, [r3]
   11f10:	str	r3, [fp, #-8]
   11f14:	b	11f60 <__assert_fail@plt+0x1034>
   11f18:	ldr	r1, [fp, #-8]
   11f1c:	ldr	r0, [fp, #-16]
   11f20:	bl	12244 <__assert_fail@plt+0x1318>
   11f24:	str	r0, [fp, #-8]
   11f28:	ldr	r3, [fp, #-8]
   11f2c:	cmn	r3, #1
   11f30:	bne	11f4c <__assert_fail@plt+0x1020>
   11f34:	movw	r3, #8836	; 0x2284
   11f38:	movt	r3, #3
   11f3c:	mvn	r2, #0
   11f40:	str	r2, [r3]
   11f44:	mov	r3, #0
   11f48:	b	12230 <__assert_fail@plt+0x1304>
   11f4c:	mov	r0, #10
   11f50:	bl	10f20 <putchar_unlocked@plt>
   11f54:	ldr	r0, [fp, #-16]
   11f58:	bl	12774 <__assert_fail@plt+0x1848>
   11f5c:	str	r0, [fp, #-8]
   11f60:	ldr	r3, [fp, #-8]
   11f64:	cmp	r3, #10
   11f68:	beq	11f18 <__assert_fail@plt+0xfec>
   11f6c:	ldr	r3, [fp, #-8]
   11f70:	cmn	r3, #1
   11f74:	beq	11f18 <__assert_fail@plt+0xfec>
   11f78:	movw	r3, #8840	; 0x2288
   11f7c:	movt	r3, #3
   11f80:	ldr	r2, [r3]
   11f84:	movw	r3, #41328	; 0xa170
   11f88:	movt	r3, #2
   11f8c:	ldr	r3, [r3]
   11f90:	cmp	r2, r3
   11f94:	blt	11f18 <__assert_fail@plt+0xfec>
   11f98:	movw	r3, #8840	; 0x2288
   11f9c:	movt	r3, #3
   11fa0:	ldr	r2, [r3]
   11fa4:	movw	r3, #41324	; 0xa16c
   11fa8:	movt	r3, #2
   11fac:	ldr	r3, [r3]
   11fb0:	add	r2, r2, r3
   11fb4:	movw	r3, #41340	; 0xa17c
   11fb8:	movt	r3, #2
   11fbc:	ldr	r3, [r3]
   11fc0:	cmp	r2, r3
   11fc4:	bgt	11f18 <__assert_fail@plt+0xfec>
   11fc8:	movw	r3, #8840	; 0x2288
   11fcc:	movt	r3, #3
   11fd0:	ldr	r2, [r3]
   11fd4:	movw	r3, #8824	; 0x2278
   11fd8:	movt	r3, #3
   11fdc:	str	r2, [r3]
   11fe0:	movw	r3, #41340	; 0xa17c
   11fe4:	movt	r3, #2
   11fe8:	ldr	r2, [r3]
   11fec:	movw	r3, #8828	; 0x227c
   11ff0:	movt	r3, #3
   11ff4:	str	r2, [r3]
   11ff8:	movw	r3, #46348	; 0xb50c
   11ffc:	movt	r3, #2
   12000:	movw	r2, #41348	; 0xa184
   12004:	movt	r2, #2
   12008:	str	r2, [r3]
   1200c:	movw	r3, #8816	; 0x2270
   12010:	movt	r3, #3
   12014:	movw	r2, #46352	; 0xb510
   12018:	movt	r2, #2
   1201c:	str	r2, [r3]
   12020:	ldr	r1, [fp, #-8]
   12024:	ldr	r0, [fp, #-16]
   12028:	bl	12494 <__assert_fail@plt+0x1568>
   1202c:	str	r0, [fp, #-8]
   12030:	ldr	r0, [fp, #-8]
   12034:	bl	123f8 <__assert_fail@plt+0x14cc>
   12038:	mov	r3, r0
   1203c:	mov	r0, r3
   12040:	bl	11d7c <__assert_fail@plt+0xe50>
   12044:	movw	r3, #41314	; 0xa162
   12048:	movt	r3, #2
   1204c:	ldrb	r3, [r3]
   12050:	cmp	r3, #0
   12054:	bne	1219c <__assert_fail@plt+0x1270>
   12058:	movw	r3, #41312	; 0xa160
   1205c:	movt	r3, #2
   12060:	ldrb	r3, [r3]
   12064:	cmp	r3, #0
   12068:	beq	120c8 <__assert_fail@plt+0x119c>
   1206c:	ldr	r0, [fp, #-8]
   12070:	bl	123f8 <__assert_fail@plt+0x14cc>
   12074:	mov	r3, r0
   12078:	cmp	r3, #0
   1207c:	beq	1219c <__assert_fail@plt+0x1270>
   12080:	ldr	r1, [fp, #-8]
   12084:	ldr	r0, [fp, #-16]
   12088:	bl	12494 <__assert_fail@plt+0x1568>
   1208c:	str	r0, [fp, #-8]
   12090:	ldr	r0, [fp, #-8]
   12094:	bl	123f8 <__assert_fail@plt+0x14cc>
   12098:	mov	r3, r0
   1209c:	cmp	r3, #0
   120a0:	beq	1219c <__assert_fail@plt+0x1270>
   120a4:	movw	r3, #41340	; 0xa17c
   120a8:	movt	r3, #2
   120ac:	ldr	r2, [r3]
   120b0:	movw	r3, #8832	; 0x2280
   120b4:	movt	r3, #3
   120b8:	ldr	r3, [r3]
   120bc:	cmp	r2, r3
   120c0:	beq	12080 <__assert_fail@plt+0x1154>
   120c4:	b	1219c <__assert_fail@plt+0x1270>
   120c8:	movw	r3, #41313	; 0xa161
   120cc:	movt	r3, #2
   120d0:	ldrb	r3, [r3]
   120d4:	cmp	r3, #0
   120d8:	beq	12168 <__assert_fail@plt+0x123c>
   120dc:	ldr	r0, [fp, #-8]
   120e0:	bl	123f8 <__assert_fail@plt+0x14cc>
   120e4:	mov	r3, r0
   120e8:	cmp	r3, #0
   120ec:	beq	1219c <__assert_fail@plt+0x1270>
   120f0:	movw	r3, #41340	; 0xa17c
   120f4:	movt	r3, #2
   120f8:	ldr	r2, [r3]
   120fc:	movw	r3, #8828	; 0x227c
   12100:	movt	r3, #3
   12104:	ldr	r3, [r3]
   12108:	cmp	r2, r3
   1210c:	beq	1219c <__assert_fail@plt+0x1270>
   12110:	ldr	r1, [fp, #-8]
   12114:	ldr	r0, [fp, #-16]
   12118:	bl	12494 <__assert_fail@plt+0x1568>
   1211c:	str	r0, [fp, #-8]
   12120:	ldr	r0, [fp, #-8]
   12124:	bl	123f8 <__assert_fail@plt+0x14cc>
   12128:	mov	r3, r0
   1212c:	cmp	r3, #0
   12130:	beq	1219c <__assert_fail@plt+0x1270>
   12134:	movw	r3, #41340	; 0xa17c
   12138:	movt	r3, #2
   1213c:	ldr	r2, [r3]
   12140:	movw	r3, #8832	; 0x2280
   12144:	movt	r3, #3
   12148:	ldr	r3, [r3]
   1214c:	cmp	r2, r3
   12150:	beq	12110 <__assert_fail@plt+0x11e4>
   12154:	b	1219c <__assert_fail@plt+0x1270>
   12158:	ldr	r1, [fp, #-8]
   1215c:	ldr	r0, [fp, #-16]
   12160:	bl	12494 <__assert_fail@plt+0x1568>
   12164:	str	r0, [fp, #-8]
   12168:	ldr	r0, [fp, #-8]
   1216c:	bl	123f8 <__assert_fail@plt+0x14cc>
   12170:	mov	r3, r0
   12174:	cmp	r3, #0
   12178:	beq	1219c <__assert_fail@plt+0x1270>
   1217c:	movw	r3, #41340	; 0xa17c
   12180:	movt	r3, #2
   12184:	ldr	r2, [r3]
   12188:	movw	r3, #8832	; 0x2280
   1218c:	movt	r3, #3
   12190:	ldr	r3, [r3]
   12194:	cmp	r2, r3
   12198:	beq	12158 <__assert_fail@plt+0x122c>
   1219c:	movw	r3, #8816	; 0x2270
   121a0:	movt	r3, #3
   121a4:	ldr	r2, [r3]
   121a8:	movw	r3, #46352	; 0xb510
   121ac:	movt	r3, #2
   121b0:	cmp	r2, r3
   121b4:	bhi	121d8 <__assert_fail@plt+0x12ac>
   121b8:	movw	r3, #38776	; 0x9778
   121bc:	movt	r3, #1
   121c0:	movw	r2, #623	; 0x26f
   121c4:	movw	r1, #38724	; 0x9744
   121c8:	movt	r1, #1
   121cc:	movw	r0, #38736	; 0x9750
   121d0:	movt	r0, #1
   121d4:	bl	10f2c <__assert_fail@plt>
   121d8:	movw	r3, #8816	; 0x2270
   121dc:	movt	r3, #3
   121e0:	ldr	r3, [r3]
   121e4:	sub	r3, r3, #28
   121e8:	ldrb	r2, [r3, #12]
   121ec:	orr	r2, r2, #8
   121f0:	strb	r2, [r3, #12]
   121f4:	movw	r2, #8816	; 0x2270
   121f8:	movt	r2, #3
   121fc:	ldr	r2, [r2]
   12200:	sub	r2, r2, #28
   12204:	ldrb	r3, [r3, #12]
   12208:	ubfx	r3, r3, #3, #1
   1220c:	uxtb	r1, r3
   12210:	ldrb	r3, [r2, #12]
   12214:	bfi	r3, r1, #1, #1
   12218:	strb	r3, [r2, #12]
   1221c:	movw	r3, #8836	; 0x2284
   12220:	movt	r3, #3
   12224:	ldr	r2, [fp, #-8]
   12228:	str	r2, [r3]
   1222c:	mov	r3, #1
   12230:	mov	r0, r3
   12234:	sub	sp, fp, #4
   12238:	ldr	fp, [sp]
   1223c:	add	sp, sp, #4
   12240:	pop	{pc}		; (ldr pc, [sp], #4)
   12244:	str	fp, [sp, #-8]!
   12248:	str	lr, [sp, #4]
   1224c:	add	fp, sp, #4
   12250:	sub	sp, sp, #16
   12254:	str	r0, [fp, #-16]
   12258:	str	r1, [fp, #-20]	; 0xffffffec
   1225c:	movw	r3, #41344	; 0xa180
   12260:	movt	r3, #2
   12264:	mov	r2, #0
   12268:	str	r2, [r3]
   1226c:	movw	r3, #41340	; 0xa17c
   12270:	movt	r3, #2
   12274:	ldr	r2, [r3]
   12278:	movw	r3, #8840	; 0x2288
   1227c:	movt	r3, #3
   12280:	ldr	r3, [r3]
   12284:	cmp	r2, r3
   12288:	bgt	122a4 <__assert_fail@plt+0x1378>
   1228c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12290:	cmp	r3, #10
   12294:	beq	123c8 <__assert_fail@plt+0x149c>
   12298:	ldr	r3, [fp, #-20]	; 0xffffffec
   1229c:	cmn	r3, #1
   122a0:	beq	123c8 <__assert_fail@plt+0x149c>
   122a4:	movw	r3, #8840	; 0x2288
   122a8:	movt	r3, #3
   122ac:	ldr	r3, [r3]
   122b0:	mov	r0, r3
   122b4:	bl	134a0 <__assert_fail@plt+0x2574>
   122b8:	movw	r3, #41316	; 0xa164
   122bc:	movt	r3, #2
   122c0:	ldr	r3, [r3]
   122c4:	str	r3, [fp, #-8]
   122c8:	b	12300 <__assert_fail@plt+0x13d4>
   122cc:	ldr	r3, [fp, #-8]
   122d0:	add	r2, r3, #1
   122d4:	str	r2, [fp, #-8]
   122d8:	ldrb	r3, [r3]
   122dc:	mov	r0, r3
   122e0:	bl	10f20 <putchar_unlocked@plt>
   122e4:	movw	r3, #41344	; 0xa180
   122e8:	movt	r3, #2
   122ec:	ldr	r3, [r3]
   122f0:	add	r2, r3, #1
   122f4:	movw	r3, #41344	; 0xa180
   122f8:	movt	r3, #2
   122fc:	str	r2, [r3]
   12300:	movw	r3, #41344	; 0xa180
   12304:	movt	r3, #2
   12308:	ldr	r2, [r3]
   1230c:	movw	r3, #41340	; 0xa17c
   12310:	movt	r3, #2
   12314:	ldr	r3, [r3]
   12318:	cmp	r2, r3
   1231c:	beq	12330 <__assert_fail@plt+0x1404>
   12320:	ldr	r3, [fp, #-8]
   12324:	ldrb	r3, [r3]
   12328:	cmp	r3, #0
   1232c:	bne	122cc <__assert_fail@plt+0x13a0>
   12330:	ldr	r3, [fp, #-20]	; 0xffffffec
   12334:	cmn	r3, #1
   12338:	beq	1236c <__assert_fail@plt+0x1440>
   1233c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12340:	cmp	r3, #10
   12344:	beq	1236c <__assert_fail@plt+0x1440>
   12348:	movw	r3, #41340	; 0xa17c
   1234c:	movt	r3, #2
   12350:	ldr	r2, [r3]
   12354:	movw	r3, #41344	; 0xa180
   12358:	movt	r3, #2
   1235c:	ldr	r3, [r3]
   12360:	sub	r3, r2, r3
   12364:	mov	r0, r3
   12368:	bl	134a0 <__assert_fail@plt+0x2574>
   1236c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12370:	cmn	r3, #1
   12374:	bne	123c8 <__assert_fail@plt+0x149c>
   12378:	movw	r3, #8840	; 0x2288
   1237c:	movt	r3, #3
   12380:	ldr	r2, [r3]
   12384:	movw	r3, #41332	; 0xa174
   12388:	movt	r3, #2
   1238c:	ldr	r3, [r3]
   12390:	add	r2, r2, r3
   12394:	movw	r3, #41340	; 0xa17c
   12398:	movt	r3, #2
   1239c:	ldr	r3, [r3]
   123a0:	cmp	r2, r3
   123a4:	bgt	123c8 <__assert_fail@plt+0x149c>
   123a8:	mov	r0, #10
   123ac:	bl	10f20 <putchar_unlocked@plt>
   123b0:	b	123c8 <__assert_fail@plt+0x149c>
   123b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   123b8:	bl	10f20 <putchar_unlocked@plt>
   123bc:	ldr	r0, [fp, #-16]
   123c0:	bl	10d64 <getc_unlocked@plt>
   123c4:	str	r0, [fp, #-20]	; 0xffffffec
   123c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   123cc:	cmp	r3, #10
   123d0:	beq	123e0 <__assert_fail@plt+0x14b4>
   123d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   123d8:	cmn	r3, #1
   123dc:	bne	123b4 <__assert_fail@plt+0x1488>
   123e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   123e4:	mov	r0, r3
   123e8:	sub	sp, fp, #4
   123ec:	ldr	fp, [sp]
   123f0:	add	sp, sp, #4
   123f4:	pop	{pc}		; (ldr pc, [sp], #4)
   123f8:	push	{fp}		; (str fp, [sp, #-4]!)
   123fc:	add	fp, sp, #0
   12400:	sub	sp, sp, #12
   12404:	str	r0, [fp, #-8]
   12408:	movw	r3, #8840	; 0x2288
   1240c:	movt	r3, #3
   12410:	ldr	r2, [r3]
   12414:	movw	r3, #8824	; 0x2278
   12418:	movt	r3, #3
   1241c:	ldr	r3, [r3]
   12420:	cmp	r2, r3
   12424:	bne	12478 <__assert_fail@plt+0x154c>
   12428:	movw	r3, #8840	; 0x2288
   1242c:	movt	r3, #3
   12430:	ldr	r2, [r3]
   12434:	movw	r3, #41324	; 0xa16c
   12438:	movt	r3, #2
   1243c:	ldr	r3, [r3]
   12440:	add	r2, r2, r3
   12444:	movw	r3, #41340	; 0xa17c
   12448:	movt	r3, #2
   1244c:	ldr	r3, [r3]
   12450:	cmp	r2, r3
   12454:	bgt	12478 <__assert_fail@plt+0x154c>
   12458:	ldr	r3, [fp, #-8]
   1245c:	cmp	r3, #10
   12460:	beq	12478 <__assert_fail@plt+0x154c>
   12464:	ldr	r3, [fp, #-8]
   12468:	cmn	r3, #1
   1246c:	beq	12478 <__assert_fail@plt+0x154c>
   12470:	mov	r3, #1
   12474:	b	1247c <__assert_fail@plt+0x1550>
   12478:	mov	r3, #0
   1247c:	and	r3, r3, #1
   12480:	uxtb	r3, r3
   12484:	mov	r0, r3
   12488:	add	sp, fp, #0
   1248c:	pop	{fp}		; (ldr fp, [sp], #4)
   12490:	bx	lr
   12494:	str	fp, [sp, #-8]!
   12498:	str	lr, [sp, #4]
   1249c:	add	fp, sp, #4
   124a0:	sub	sp, sp, #24
   124a4:	str	r0, [fp, #-24]	; 0xffffffe8
   124a8:	str	r1, [fp, #-28]	; 0xffffffe4
   124ac:	ldr	r3, [pc, #696]	; 1276c <__assert_fail@plt+0x1840>
   124b0:	str	r3, [fp, #-8]
   124b4:	ldr	r3, [pc, #692]	; 12770 <__assert_fail@plt+0x1844>
   124b8:	str	r3, [fp, #-12]
   124bc:	movw	r3, #8816	; 0x2270
   124c0:	movt	r3, #3
   124c4:	ldr	r2, [r3]
   124c8:	movw	r3, #46348	; 0xb50c
   124cc:	movt	r3, #2
   124d0:	ldr	r3, [r3]
   124d4:	str	r3, [r2]
   124d8:	movw	r3, #46348	; 0xb50c
   124dc:	movt	r3, #2
   124e0:	ldr	r3, [r3]
   124e4:	ldr	r2, [fp, #-8]
   124e8:	cmp	r2, r3
   124ec:	bne	124fc <__assert_fail@plt+0x15d0>
   124f0:	mov	r0, #1
   124f4:	bl	11d7c <__assert_fail@plt+0xe50>
   124f8:	bl	12ad0 <__assert_fail@plt+0x1ba4>
   124fc:	movw	r3, #46348	; 0xb50c
   12500:	movt	r3, #2
   12504:	ldr	r2, [r3]
   12508:	add	r1, r2, #1
   1250c:	movw	r3, #46348	; 0xb50c
   12510:	movt	r3, #2
   12514:	str	r1, [r3]
   12518:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1251c:	uxtb	r3, r3
   12520:	strb	r3, [r2]
   12524:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12528:	bl	10d64 <getc_unlocked@plt>
   1252c:	str	r0, [fp, #-28]	; 0xffffffe4
   12530:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12534:	cmn	r3, #1
   12538:	beq	12564 <__assert_fail@plt+0x1638>
   1253c:	bl	10e24 <__ctype_b_loc@plt>
   12540:	mov	r3, r0
   12544:	ldr	r2, [r3]
   12548:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1254c:	lsl	r3, r3, #1
   12550:	add	r3, r2, r3
   12554:	ldrh	r3, [r3]
   12558:	and	r3, r3, #8192	; 0x2000
   1255c:	cmp	r3, #0
   12560:	beq	124d8 <__assert_fail@plt+0x15ac>
   12564:	movw	r3, #46348	; 0xb50c
   12568:	movt	r3, #2
   1256c:	ldr	r1, [r3]
   12570:	movw	r3, #8816	; 0x2270
   12574:	movt	r3, #3
   12578:	ldr	r3, [r3]
   1257c:	ldr	r2, [r3]
   12580:	movw	r3, #8816	; 0x2270
   12584:	movt	r3, #3
   12588:	ldr	r3, [r3]
   1258c:	sub	r2, r1, r2
   12590:	str	r2, [r3, #4]
   12594:	ldr	r2, [r3, #4]
   12598:	movw	r3, #41340	; 0xa17c
   1259c:	movt	r3, #2
   125a0:	ldr	r3, [r3]
   125a4:	add	r2, r2, r3
   125a8:	movw	r3, #41340	; 0xa17c
   125ac:	movt	r3, #2
   125b0:	str	r2, [r3]
   125b4:	movw	r3, #8816	; 0x2270
   125b8:	movt	r3, #3
   125bc:	ldr	r3, [r3]
   125c0:	mov	r0, r3
   125c4:	bl	1297c <__assert_fail@plt+0x1a50>
   125c8:	movw	r3, #41340	; 0xa17c
   125cc:	movt	r3, #2
   125d0:	ldr	r3, [r3]
   125d4:	str	r3, [fp, #-16]
   125d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   125dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   125e0:	bl	128b8 <__assert_fail@plt+0x198c>
   125e4:	str	r0, [fp, #-28]	; 0xffffffe4
   125e8:	movw	r3, #41340	; 0xa17c
   125ec:	movt	r3, #2
   125f0:	ldr	r1, [r3]
   125f4:	movw	r3, #8816	; 0x2270
   125f8:	movt	r3, #3
   125fc:	ldr	r3, [r3]
   12600:	ldr	r2, [fp, #-16]
   12604:	sub	r2, r1, r2
   12608:	str	r2, [r3, #8]
   1260c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12610:	cmn	r3, #1
   12614:	beq	1265c <__assert_fail@plt+0x1730>
   12618:	movw	r3, #8816	; 0x2270
   1261c:	movt	r3, #3
   12620:	ldr	r3, [r3]
   12624:	ldrb	r3, [r3, #12]
   12628:	and	r3, r3, #2
   1262c:	uxtb	r3, r3
   12630:	cmp	r3, #0
   12634:	beq	12664 <__assert_fail@plt+0x1738>
   12638:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1263c:	cmp	r3, #10
   12640:	beq	1265c <__assert_fail@plt+0x1730>
   12644:	movw	r3, #8816	; 0x2270
   12648:	movt	r3, #3
   1264c:	ldr	r3, [r3]
   12650:	ldr	r3, [r3, #8]
   12654:	cmp	r3, #1
   12658:	ble	12664 <__assert_fail@plt+0x1738>
   1265c:	mov	r1, #1
   12660:	b	12668 <__assert_fail@plt+0x173c>
   12664:	mov	r1, #0
   12668:	movw	r3, #8816	; 0x2270
   1266c:	movt	r3, #3
   12670:	ldr	r2, [r3]
   12674:	mov	r3, r1
   12678:	and	r3, r3, #1
   1267c:	uxtb	r1, r3
   12680:	ldrb	r3, [r2, #12]
   12684:	bfi	r3, r1, #3, #1
   12688:	strb	r3, [r2, #12]
   1268c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12690:	cmp	r3, #10
   12694:	beq	126b8 <__assert_fail@plt+0x178c>
   12698:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1269c:	cmn	r3, #1
   126a0:	beq	126b8 <__assert_fail@plt+0x178c>
   126a4:	movw	r3, #41315	; 0xa163
   126a8:	movt	r3, #2
   126ac:	ldrb	r3, [r3]
   126b0:	cmp	r3, #0
   126b4:	beq	126f4 <__assert_fail@plt+0x17c8>
   126b8:	movw	r3, #8816	; 0x2270
   126bc:	movt	r3, #3
   126c0:	ldr	r3, [r3]
   126c4:	ldrb	r3, [r3, #12]
   126c8:	and	r3, r3, #8
   126cc:	uxtb	r3, r3
   126d0:	cmp	r3, #0
   126d4:	beq	126e0 <__assert_fail@plt+0x17b4>
   126d8:	mov	r2, #2
   126dc:	b	126e4 <__assert_fail@plt+0x17b8>
   126e0:	mov	r2, #1
   126e4:	movw	r3, #8816	; 0x2270
   126e8:	movt	r3, #3
   126ec:	ldr	r3, [r3]
   126f0:	str	r2, [r3, #8]
   126f4:	movw	r3, #8816	; 0x2270
   126f8:	movt	r3, #3
   126fc:	ldr	r3, [r3]
   12700:	ldr	r2, [fp, #-12]
   12704:	cmp	r2, r3
   12708:	bne	12718 <__assert_fail@plt+0x17ec>
   1270c:	mov	r0, #1
   12710:	bl	11d7c <__assert_fail@plt+0xe50>
   12714:	bl	12ad0 <__assert_fail@plt+0x1ba4>
   12718:	movw	r3, #8816	; 0x2270
   1271c:	movt	r3, #3
   12720:	ldr	r3, [r3]
   12724:	add	r2, r3, #28
   12728:	movw	r3, #8816	; 0x2270
   1272c:	movt	r3, #3
   12730:	str	r2, [r3]
   12734:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12738:	cmp	r3, #10
   1273c:	beq	1274c <__assert_fail@plt+0x1820>
   12740:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12744:	cmn	r3, #1
   12748:	bne	124bc <__assert_fail@plt+0x1590>
   1274c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12750:	bl	12774 <__assert_fail@plt+0x1848>
   12754:	mov	r3, r0
   12758:	mov	r0, r3
   1275c:	sub	sp, fp, #4
   12760:	ldr	fp, [sp]
   12764:	add	sp, sp, #4
   12768:	pop	{pc}		; (ldr pc, [sp], #4)
   1276c:	andeq	fp, r2, ip, lsl #10
   12770:	andeq	r2, r3, r8, lsr r2
   12774:	str	fp, [sp, #-8]!
   12778:	str	lr, [sp, #4]
   1277c:	add	fp, sp, #4
   12780:	sub	sp, sp, #24
   12784:	str	r0, [fp, #-24]	; 0xffffffe8
   12788:	movw	r3, #41340	; 0xa17c
   1278c:	movt	r3, #2
   12790:	mov	r2, #0
   12794:	str	r2, [r3]
   12798:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1279c:	bl	10d64 <getc_unlocked@plt>
   127a0:	mov	r3, r0
   127a4:	mov	r1, r3
   127a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   127ac:	bl	128b8 <__assert_fail@plt+0x198c>
   127b0:	str	r0, [fp, #-8]
   127b4:	movw	r3, #41332	; 0xa174
   127b8:	movt	r3, #2
   127bc:	ldr	r3, [r3]
   127c0:	cmp	r3, #0
   127c4:	bne	127fc <__assert_fail@plt+0x18d0>
   127c8:	movw	r3, #41340	; 0xa17c
   127cc:	movt	r3, #2
   127d0:	ldr	r2, [r3]
   127d4:	movw	r3, #41328	; 0xa170
   127d8:	movt	r3, #2
   127dc:	ldr	r3, [r3]
   127e0:	cmp	r2, r3
   127e4:	movlt	r2, r2
   127e8:	movge	r2, r3
   127ec:	movw	r3, #8840	; 0x2288
   127f0:	movt	r3, #3
   127f4:	str	r2, [r3]
   127f8:	b	128a0 <__assert_fail@plt+0x1974>
   127fc:	movw	r3, #41340	; 0xa17c
   12800:	movt	r3, #2
   12804:	ldr	r2, [r3]
   12808:	movw	r3, #8840	; 0x2288
   1280c:	movt	r3, #3
   12810:	str	r2, [r3]
   12814:	movw	r3, #41316	; 0xa164
   12818:	movt	r3, #2
   1281c:	ldr	r3, [r3]
   12820:	str	r3, [fp, #-12]
   12824:	b	12880 <__assert_fail@plt+0x1954>
   12828:	ldr	r3, [fp, #-12]
   1282c:	ldrb	r3, [r3]
   12830:	strb	r3, [fp, #-13]
   12834:	ldrb	r3, [fp, #-13]
   12838:	ldr	r2, [fp, #-8]
   1283c:	cmp	r2, r3
   12840:	beq	1284c <__assert_fail@plt+0x1920>
   12844:	ldr	r3, [fp, #-8]
   12848:	b	128a4 <__assert_fail@plt+0x1978>
   1284c:	movw	r3, #41340	; 0xa17c
   12850:	movt	r3, #2
   12854:	ldr	r3, [r3]
   12858:	add	r2, r3, #1
   1285c:	movw	r3, #41340	; 0xa17c
   12860:	movt	r3, #2
   12864:	str	r2, [r3]
   12868:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1286c:	bl	10d64 <getc_unlocked@plt>
   12870:	str	r0, [fp, #-8]
   12874:	ldr	r3, [fp, #-12]
   12878:	add	r3, r3, #1
   1287c:	str	r3, [fp, #-12]
   12880:	ldr	r3, [fp, #-12]
   12884:	ldrb	r3, [r3]
   12888:	cmp	r3, #0
   1288c:	bne	12828 <__assert_fail@plt+0x18fc>
   12890:	ldr	r1, [fp, #-8]
   12894:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12898:	bl	128b8 <__assert_fail@plt+0x198c>
   1289c:	str	r0, [fp, #-8]
   128a0:	ldr	r3, [fp, #-8]
   128a4:	mov	r0, r3
   128a8:	sub	sp, fp, #4
   128ac:	ldr	fp, [sp]
   128b0:	add	sp, sp, #4
   128b4:	pop	{pc}		; (ldr pc, [sp], #4)
   128b8:	str	fp, [sp, #-8]!
   128bc:	str	lr, [sp, #4]
   128c0:	add	fp, sp, #4
   128c4:	sub	sp, sp, #8
   128c8:	str	r0, [fp, #-8]
   128cc:	str	r1, [fp, #-12]
   128d0:	ldr	r3, [fp, #-12]
   128d4:	cmp	r3, #32
   128d8:	bne	128fc <__assert_fail@plt+0x19d0>
   128dc:	movw	r3, #41340	; 0xa17c
   128e0:	movt	r3, #2
   128e4:	ldr	r3, [r3]
   128e8:	add	r2, r3, #1
   128ec:	movw	r3, #41340	; 0xa17c
   128f0:	movt	r3, #2
   128f4:	str	r2, [r3]
   128f8:	b	12958 <__assert_fail@plt+0x1a2c>
   128fc:	ldr	r3, [fp, #-12]
   12900:	cmp	r3, #9
   12904:	bne	12950 <__assert_fail@plt+0x1a24>
   12908:	movw	r3, #8820	; 0x2274
   1290c:	movt	r3, #3
   12910:	mov	r2, #1
   12914:	strb	r2, [r3]
   12918:	movw	r3, #41340	; 0xa17c
   1291c:	movt	r3, #2
   12920:	ldr	r3, [r3]
   12924:	add	r2, r3, #7
   12928:	cmp	r3, #0
   1292c:	movlt	r3, r2
   12930:	movge	r3, r3
   12934:	asr	r3, r3, #3
   12938:	add	r3, r3, #1
   1293c:	lsl	r2, r3, #3
   12940:	movw	r3, #41340	; 0xa17c
   12944:	movt	r3, #2
   12948:	str	r2, [r3]
   1294c:	b	12958 <__assert_fail@plt+0x1a2c>
   12950:	ldr	r3, [fp, #-12]
   12954:	b	12968 <__assert_fail@plt+0x1a3c>
   12958:	ldr	r0, [fp, #-8]
   1295c:	bl	10d64 <getc_unlocked@plt>
   12960:	str	r0, [fp, #-12]
   12964:	b	128d0 <__assert_fail@plt+0x19a4>
   12968:	mov	r0, r3
   1296c:	sub	sp, fp, #4
   12970:	ldr	fp, [sp]
   12974:	add	sp, sp, #4
   12978:	pop	{pc}		; (ldr pc, [sp], #4)
   1297c:	str	fp, [sp, #-8]!
   12980:	str	lr, [sp, #4]
   12984:	add	fp, sp, #4
   12988:	sub	sp, sp, #24
   1298c:	str	r0, [fp, #-24]	; 0xffffffe8
   12990:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12994:	ldr	r3, [r3]
   12998:	str	r3, [fp, #-12]
   1299c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129a0:	ldr	r3, [r3, #4]
   129a4:	sub	r3, r3, #1
   129a8:	ldr	r2, [fp, #-12]
   129ac:	add	r3, r2, r3
   129b0:	str	r3, [fp, #-8]
   129b4:	ldr	r3, [fp, #-8]
   129b8:	ldrb	r3, [r3]
   129bc:	strb	r3, [fp, #-13]
   129c0:	ldr	r3, [fp, #-12]
   129c4:	ldrb	r3, [r3]
   129c8:	mov	r1, r3
   129cc:	movw	r0, #38756	; 0x9764
   129d0:	movt	r0, #1
   129d4:	bl	10e54 <strchr@plt>
   129d8:	mov	r3, r0
   129dc:	cmp	r3, #0
   129e0:	movne	r3, #1
   129e4:	moveq	r3, #0
   129e8:	uxtb	r1, r3
   129ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   129f0:	ldrb	r3, [r2, #12]
   129f4:	bfi	r3, r1, #0, #1
   129f8:	strb	r3, [r2, #12]
   129fc:	bl	10e24 <__ctype_b_loc@plt>
   12a00:	mov	r3, r0
   12a04:	ldr	r2, [r3]
   12a08:	ldrb	r3, [fp, #-13]
   12a0c:	lsl	r3, r3, #1
   12a10:	add	r3, r2, r3
   12a14:	ldrh	r3, [r3]
   12a18:	and	r3, r3, #4
   12a1c:	cmp	r3, #0
   12a20:	movne	r3, #1
   12a24:	moveq	r3, #0
   12a28:	uxtb	r1, r3
   12a2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12a30:	ldrb	r3, [r2, #12]
   12a34:	bfi	r3, r1, #2, #1
   12a38:	strb	r3, [r2, #12]
   12a3c:	b	12a4c <__assert_fail@plt+0x1b20>
   12a40:	ldr	r3, [fp, #-8]
   12a44:	sub	r3, r3, #1
   12a48:	str	r3, [fp, #-8]
   12a4c:	ldr	r2, [fp, #-12]
   12a50:	ldr	r3, [fp, #-8]
   12a54:	cmp	r2, r3
   12a58:	bcs	12a80 <__assert_fail@plt+0x1b54>
   12a5c:	ldr	r3, [fp, #-8]
   12a60:	ldrb	r3, [r3]
   12a64:	mov	r1, r3
   12a68:	movw	r0, #38764	; 0x976c
   12a6c:	movt	r0, #1
   12a70:	bl	10e54 <strchr@plt>
   12a74:	mov	r3, r0
   12a78:	cmp	r3, #0
   12a7c:	bne	12a40 <__assert_fail@plt+0x1b14>
   12a80:	ldr	r3, [fp, #-8]
   12a84:	ldrb	r3, [r3]
   12a88:	mov	r1, r3
   12a8c:	movw	r0, #38772	; 0x9774
   12a90:	movt	r0, #1
   12a94:	bl	10e54 <strchr@plt>
   12a98:	mov	r3, r0
   12a9c:	cmp	r3, #0
   12aa0:	movne	r3, #1
   12aa4:	moveq	r3, #0
   12aa8:	uxtb	r1, r3
   12aac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ab0:	ldrb	r3, [r2, #12]
   12ab4:	bfi	r3, r1, #1, #1
   12ab8:	strb	r3, [r2, #12]
   12abc:	nop	{0}
   12ac0:	sub	sp, fp, #4
   12ac4:	ldr	fp, [sp]
   12ac8:	add	sp, sp, #4
   12acc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ad0:	str	fp, [sp, #-8]!
   12ad4:	str	lr, [sp, #4]
   12ad8:	add	fp, sp, #4
   12adc:	sub	sp, sp, #16
   12ae0:	movw	r3, #8816	; 0x2270
   12ae4:	movt	r3, #3
   12ae8:	ldr	r2, [r3]
   12aec:	movw	r3, #46352	; 0xb510
   12af0:	movt	r3, #2
   12af4:	cmp	r2, r3
   12af8:	bne	12b4c <__assert_fail@plt+0x1c20>
   12afc:	movw	r3, #46348	; 0xb50c
   12b00:	movt	r3, #2
   12b04:	ldr	r2, [r3]
   12b08:	movw	r3, #41348	; 0xa184
   12b0c:	movt	r3, #2
   12b10:	sub	r3, r2, r3
   12b14:	mov	r2, r3
   12b18:	movw	r3, #41300	; 0xa154
   12b1c:	movt	r3, #2
   12b20:	ldr	r3, [r3]
   12b24:	mov	r1, #1
   12b28:	movw	r0, #41348	; 0xa184
   12b2c:	movt	r0, #2
   12b30:	bl	10d40 <fwrite_unlocked@plt>
   12b34:	movw	r3, #46348	; 0xb50c
   12b38:	movt	r3, #2
   12b3c:	movw	r2, #41348	; 0xa184
   12b40:	movt	r2, #2
   12b44:	str	r2, [r3]
   12b48:	b	12d40 <__assert_fail@plt+0x1e14>
   12b4c:	bl	12d50 <__assert_fail@plt+0x1e24>
   12b50:	movw	r3, #8816	; 0x2270
   12b54:	movt	r3, #3
   12b58:	ldr	r3, [r3]
   12b5c:	str	r3, [fp, #-8]
   12b60:	mvn	r3, #-2147483648	; 0x80000000
   12b64:	str	r3, [fp, #-16]
   12b68:	movw	r3, #46352	; 0xb510
   12b6c:	movt	r3, #2
   12b70:	ldr	r3, [r3, #24]
   12b74:	str	r3, [fp, #-12]
   12b78:	b	12be8 <__assert_fail@plt+0x1cbc>
   12b7c:	ldr	r3, [fp, #-12]
   12b80:	ldr	r2, [r3, #20]
   12b84:	ldr	r3, [fp, #-12]
   12b88:	ldr	r3, [r3, #24]
   12b8c:	ldr	r3, [r3, #20]
   12b90:	sub	r3, r2, r3
   12b94:	ldr	r2, [fp, #-16]
   12b98:	cmp	r2, r3
   12b9c:	ble	12bc4 <__assert_fail@plt+0x1c98>
   12ba0:	ldr	r3, [fp, #-12]
   12ba4:	str	r3, [fp, #-8]
   12ba8:	ldr	r3, [fp, #-12]
   12bac:	ldr	r2, [r3, #20]
   12bb0:	ldr	r3, [fp, #-12]
   12bb4:	ldr	r3, [r3, #24]
   12bb8:	ldr	r3, [r3, #20]
   12bbc:	sub	r3, r2, r3
   12bc0:	str	r3, [fp, #-16]
   12bc4:	ldr	r3, [fp, #-16]
   12bc8:	cmn	r3, #-2147483638	; 0x8000000a
   12bcc:	bgt	12bdc <__assert_fail@plt+0x1cb0>
   12bd0:	ldr	r3, [fp, #-16]
   12bd4:	add	r3, r3, #9
   12bd8:	str	r3, [fp, #-16]
   12bdc:	ldr	r3, [fp, #-12]
   12be0:	ldr	r3, [r3, #24]
   12be4:	str	r3, [fp, #-12]
   12be8:	movw	r3, #8816	; 0x2270
   12bec:	movt	r3, #3
   12bf0:	ldr	r3, [r3]
   12bf4:	ldr	r2, [fp, #-12]
   12bf8:	cmp	r2, r3
   12bfc:	bne	12b7c <__assert_fail@plt+0x1c50>
   12c00:	ldr	r0, [fp, #-8]
   12c04:	bl	13254 <__assert_fail@plt+0x2328>
   12c08:	ldr	r3, [fp, #-8]
   12c0c:	ldr	r1, [r3]
   12c10:	movw	r3, #46348	; 0xb50c
   12c14:	movt	r3, #2
   12c18:	ldr	r2, [r3]
   12c1c:	ldr	r3, [fp, #-8]
   12c20:	ldr	r3, [r3]
   12c24:	sub	r3, r2, r3
   12c28:	mov	r2, r3
   12c2c:	movw	r0, #41348	; 0xa184
   12c30:	movt	r0, #2
   12c34:	bl	10d04 <memmove@plt>
   12c38:	ldr	r3, [fp, #-8]
   12c3c:	ldr	r2, [r3]
   12c40:	movw	r3, #41348	; 0xa184
   12c44:	movt	r3, #2
   12c48:	sub	r3, r2, r3
   12c4c:	str	r3, [fp, #-20]	; 0xffffffec
   12c50:	movw	r3, #46348	; 0xb50c
   12c54:	movt	r3, #2
   12c58:	ldr	r2, [r3]
   12c5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c60:	rsb	r3, r3, #0
   12c64:	add	r2, r2, r3
   12c68:	movw	r3, #46348	; 0xb50c
   12c6c:	movt	r3, #2
   12c70:	str	r2, [r3]
   12c74:	ldr	r3, [fp, #-8]
   12c78:	str	r3, [fp, #-12]
   12c7c:	b	12ca8 <__assert_fail@plt+0x1d7c>
   12c80:	ldr	r3, [fp, #-12]
   12c84:	ldr	r2, [r3]
   12c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c8c:	rsb	r3, r3, #0
   12c90:	add	r2, r2, r3
   12c94:	ldr	r3, [fp, #-12]
   12c98:	str	r2, [r3]
   12c9c:	ldr	r3, [fp, #-12]
   12ca0:	add	r3, r3, #28
   12ca4:	str	r3, [fp, #-12]
   12ca8:	movw	r3, #8816	; 0x2270
   12cac:	movt	r3, #3
   12cb0:	ldr	r3, [r3]
   12cb4:	ldr	r2, [fp, #-12]
   12cb8:	cmp	r2, r3
   12cbc:	bls	12c80 <__assert_fail@plt+0x1d54>
   12cc0:	movw	r3, #8816	; 0x2270
   12cc4:	movt	r3, #3
   12cc8:	ldr	r2, [r3]
   12ccc:	ldr	r3, [fp, #-8]
   12cd0:	sub	r3, r2, r3
   12cd4:	asr	r2, r3, #2
   12cd8:	movw	r3, #28087	; 0x6db7
   12cdc:	movt	r3, #46811	; 0xb6db
   12ce0:	mul	r3, r3, r2
   12ce4:	add	r3, r3, #1
   12ce8:	mov	r2, r3
   12cec:	mov	r3, r2
   12cf0:	lsl	r3, r3, #3
   12cf4:	sub	r3, r3, r2
   12cf8:	lsl	r3, r3, #2
   12cfc:	mov	r2, r3
   12d00:	ldr	r1, [fp, #-8]
   12d04:	movw	r0, #46352	; 0xb510
   12d08:	movt	r0, #2
   12d0c:	bl	10d04 <memmove@plt>
   12d10:	movw	r3, #8816	; 0x2270
   12d14:	movt	r3, #3
   12d18:	ldr	r2, [r3]
   12d1c:	ldr	r1, [fp, #-8]
   12d20:	movw	r3, #46352	; 0xb510
   12d24:	movt	r3, #2
   12d28:	sub	r3, r1, r3
   12d2c:	rsb	r3, r3, #0
   12d30:	add	r2, r2, r3
   12d34:	movw	r3, #8816	; 0x2270
   12d38:	movt	r3, #3
   12d3c:	str	r2, [r3]
   12d40:	sub	sp, fp, #4
   12d44:	ldr	fp, [sp]
   12d48:	add	sp, sp, #4
   12d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d50:	str	fp, [sp, #-8]!
   12d54:	str	lr, [sp, #4]
   12d58:	add	fp, sp, #4
   12d5c:	sub	sp, sp, #24
   12d60:	movw	r3, #8816	; 0x2270
   12d64:	movt	r3, #3
   12d68:	ldr	r3, [r3]
   12d6c:	mov	r2, #0
   12d70:	str	r2, [r3, #20]
   12d74:	movw	r3, #8816	; 0x2270
   12d78:	movt	r3, #3
   12d7c:	ldr	r3, [r3]
   12d80:	ldr	r3, [r3, #4]
   12d84:	str	r3, [fp, #-28]	; 0xffffffe4
   12d88:	movw	r3, #8816	; 0x2270
   12d8c:	movt	r3, #3
   12d90:	ldr	r2, [r3]
   12d94:	movw	r3, #41320	; 0xa168
   12d98:	movt	r3, #2
   12d9c:	ldr	r3, [r3]
   12da0:	str	r3, [r2, #4]
   12da4:	movw	r3, #8816	; 0x2270
   12da8:	movt	r3, #3
   12dac:	ldr	r3, [r3]
   12db0:	sub	r3, r3, #28
   12db4:	str	r3, [fp, #-8]
   12db8:	b	12f88 <__assert_fail@plt+0x205c>
   12dbc:	mvn	r3, #-2147483648	; 0x80000000
   12dc0:	str	r3, [fp, #-24]	; 0xffffffe8
   12dc4:	ldr	r2, [fp, #-8]
   12dc8:	movw	r3, #46352	; 0xb510
   12dcc:	movt	r3, #2
   12dd0:	cmp	r2, r3
   12dd4:	bne	12de8 <__assert_fail@plt+0x1ebc>
   12dd8:	movw	r3, #8828	; 0x227c
   12ddc:	movt	r3, #3
   12de0:	ldr	r3, [r3]
   12de4:	b	12df4 <__assert_fail@plt+0x1ec8>
   12de8:	movw	r3, #8832	; 0x2280
   12dec:	movt	r3, #3
   12df0:	ldr	r3, [r3]
   12df4:	str	r3, [fp, #-16]
   12df8:	ldr	r3, [fp, #-8]
   12dfc:	str	r3, [fp, #-12]
   12e00:	ldr	r3, [fp, #-12]
   12e04:	ldr	r3, [r3, #4]
   12e08:	ldr	r2, [fp, #-16]
   12e0c:	add	r3, r2, r3
   12e10:	str	r3, [fp, #-16]
   12e14:	ldr	r3, [fp, #-12]
   12e18:	add	r3, r3, #28
   12e1c:	str	r3, [fp, #-12]
   12e20:	ldr	r1, [fp, #-16]
   12e24:	ldr	r0, [fp, #-12]
   12e28:	bl	13144 <__assert_fail@plt+0x2218>
   12e2c:	mov	r2, r0
   12e30:	ldr	r3, [fp, #-12]
   12e34:	ldr	r3, [r3, #20]
   12e38:	add	r3, r2, r3
   12e3c:	str	r3, [fp, #-20]	; 0xffffffec
   12e40:	ldr	r2, [fp, #-8]
   12e44:	movw	r3, #46352	; 0xb510
   12e48:	movt	r3, #2
   12e4c:	cmp	r2, r3
   12e50:	bne	12ed4 <__assert_fail@plt+0x1fa8>
   12e54:	movw	r3, #8844	; 0x228c
   12e58:	movt	r3, #3
   12e5c:	ldr	r3, [r3]
   12e60:	cmp	r3, #0
   12e64:	ble	12ed4 <__assert_fail@plt+0x1fa8>
   12e68:	movw	r3, #8844	; 0x228c
   12e6c:	movt	r3, #3
   12e70:	ldr	r3, [r3]
   12e74:	ldr	r2, [fp, #-16]
   12e78:	sub	r2, r2, r3
   12e7c:	mov	r3, r2
   12e80:	lsl	r3, r3, #2
   12e84:	add	r3, r3, r2
   12e88:	lsl	r3, r3, #1
   12e8c:	mov	r1, r3
   12e90:	movw	r3, #8844	; 0x228c
   12e94:	movt	r3, #3
   12e98:	ldr	r3, [r3]
   12e9c:	ldr	r2, [fp, #-16]
   12ea0:	sub	r2, r2, r3
   12ea4:	mov	r3, r2
   12ea8:	lsl	r3, r3, #2
   12eac:	add	r3, r3, r2
   12eb0:	lsl	r3, r3, #1
   12eb4:	mul	r3, r3, r1
   12eb8:	lsr	r2, r3, #31
   12ebc:	add	r3, r2, r3
   12ec0:	asr	r3, r3, #1
   12ec4:	mov	r2, r3
   12ec8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ecc:	add	r3, r3, r2
   12ed0:	str	r3, [fp, #-20]	; 0xffffffec
   12ed4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ed8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12edc:	cmp	r2, r3
   12ee0:	bge	12f04 <__assert_fail@plt+0x1fd8>
   12ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ee8:	str	r3, [fp, #-24]	; 0xffffffe8
   12eec:	ldr	r3, [fp, #-8]
   12ef0:	ldr	r2, [fp, #-12]
   12ef4:	str	r2, [r3, #24]
   12ef8:	ldr	r3, [fp, #-8]
   12efc:	ldr	r2, [fp, #-16]
   12f00:	str	r2, [r3, #16]
   12f04:	movw	r3, #8816	; 0x2270
   12f08:	movt	r3, #3
   12f0c:	ldr	r3, [r3]
   12f10:	ldr	r2, [fp, #-12]
   12f14:	cmp	r2, r3
   12f18:	beq	12f5c <__assert_fail@plt+0x2030>
   12f1c:	ldr	r3, [fp, #-12]
   12f20:	sub	r3, r3, #28
   12f24:	ldr	r2, [r3, #8]
   12f28:	ldr	r3, [fp, #-12]
   12f2c:	ldr	r3, [r3, #4]
   12f30:	add	r3, r2, r3
   12f34:	ldr	r2, [fp, #-16]
   12f38:	add	r3, r2, r3
   12f3c:	str	r3, [fp, #-16]
   12f40:	movw	r3, #41320	; 0xa168
   12f44:	movt	r3, #2
   12f48:	ldr	r3, [r3]
   12f4c:	ldr	r2, [fp, #-16]
   12f50:	cmp	r2, r3
   12f54:	blt	12e14 <__assert_fail@plt+0x1ee8>
   12f58:	b	12f60 <__assert_fail@plt+0x2034>
   12f5c:	nop	{0}
   12f60:	ldr	r0, [fp, #-8]
   12f64:	bl	12fc4 <__assert_fail@plt+0x2098>
   12f68:	mov	r2, r0
   12f6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f70:	add	r2, r2, r3
   12f74:	ldr	r3, [fp, #-8]
   12f78:	str	r2, [r3, #20]
   12f7c:	ldr	r3, [fp, #-8]
   12f80:	sub	r3, r3, #28
   12f84:	str	r3, [fp, #-8]
   12f88:	ldr	r2, [fp, #-8]
   12f8c:	movw	r3, #46352	; 0xb510
   12f90:	movt	r3, #2
   12f94:	cmp	r2, r3
   12f98:	bcs	12dbc <__assert_fail@plt+0x1e90>
   12f9c:	movw	r3, #8816	; 0x2270
   12fa0:	movt	r3, #3
   12fa4:	ldr	r3, [r3]
   12fa8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12fac:	str	r2, [r3, #4]
   12fb0:	nop	{0}
   12fb4:	sub	sp, fp, #4
   12fb8:	ldr	fp, [sp]
   12fbc:	add	sp, sp, #4
   12fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc4:	push	{fp}		; (str fp, [sp, #-4]!)
   12fc8:	add	fp, sp, #0
   12fcc:	sub	sp, sp, #20
   12fd0:	str	r0, [fp, #-16]
   12fd4:	movw	r3, #4900	; 0x1324
   12fd8:	str	r3, [fp, #-8]
   12fdc:	ldr	r2, [fp, #-16]
   12fe0:	movw	r3, #46352	; 0xb510
   12fe4:	movt	r3, #2
   12fe8:	cmp	r2, r3
   12fec:	bls	130cc <__assert_fail@plt+0x21a0>
   12ff0:	ldr	r3, [fp, #-16]
   12ff4:	sub	r3, r3, #28
   12ff8:	ldrb	r3, [r3, #12]
   12ffc:	and	r3, r3, #2
   13000:	uxtb	r3, r3
   13004:	cmp	r3, #0
   13008:	beq	13050 <__assert_fail@plt+0x2124>
   1300c:	ldr	r3, [fp, #-16]
   13010:	sub	r3, r3, #28
   13014:	ldrb	r3, [r3, #12]
   13018:	and	r3, r3, #8
   1301c:	uxtb	r3, r3
   13020:	cmp	r3, #0
   13024:	beq	1303c <__assert_fail@plt+0x2110>
   13028:	ldr	r3, [fp, #-8]
   1302c:	sub	r3, r3, #2496	; 0x9c0
   13030:	sub	r3, r3, #4
   13034:	str	r3, [fp, #-8]
   13038:	b	130cc <__assert_fail@plt+0x21a0>
   1303c:	ldr	r3, [fp, #-8]
   13040:	add	r3, r3, #356352	; 0x57000
   13044:	add	r3, r3, #3648	; 0xe40
   13048:	str	r3, [fp, #-8]
   1304c:	b	130cc <__assert_fail@plt+0x21a0>
   13050:	ldr	r3, [fp, #-16]
   13054:	sub	r3, r3, #28
   13058:	ldrb	r3, [r3, #12]
   1305c:	and	r3, r3, #4
   13060:	uxtb	r3, r3
   13064:	cmp	r3, #0
   13068:	beq	1307c <__assert_fail@plt+0x2150>
   1306c:	ldr	r3, [fp, #-8]
   13070:	sub	r3, r3, #1600	; 0x640
   13074:	str	r3, [fp, #-8]
   13078:	b	130cc <__assert_fail@plt+0x21a0>
   1307c:	ldr	r2, [pc, #188]	; 13140 <__assert_fail@plt+0x2214>
   13080:	ldr	r3, [fp, #-16]
   13084:	cmp	r3, r2
   13088:	bls	130cc <__assert_fail@plt+0x21a0>
   1308c:	ldr	r3, [fp, #-16]
   13090:	sub	r3, r3, #56	; 0x38
   13094:	ldrb	r3, [r3, #12]
   13098:	and	r3, r3, #8
   1309c:	uxtb	r3, r3
   130a0:	cmp	r3, #0
   130a4:	beq	130cc <__assert_fail@plt+0x21a0>
   130a8:	ldr	r3, [fp, #-16]
   130ac:	sub	r3, r3, #28
   130b0:	ldr	r3, [r3, #4]
   130b4:	add	r3, r3, #2
   130b8:	movw	r2, #40000	; 0x9c40
   130bc:	sdiv	r3, r2, r3
   130c0:	ldr	r2, [fp, #-8]
   130c4:	add	r3, r2, r3
   130c8:	str	r3, [fp, #-8]
   130cc:	ldr	r3, [fp, #-16]
   130d0:	ldrb	r3, [r3, #12]
   130d4:	and	r3, r3, #1
   130d8:	uxtb	r3, r3
   130dc:	cmp	r3, #0
   130e0:	beq	130f4 <__assert_fail@plt+0x21c8>
   130e4:	ldr	r3, [fp, #-8]
   130e8:	sub	r3, r3, #1600	; 0x640
   130ec:	str	r3, [fp, #-8]
   130f0:	b	1312c <__assert_fail@plt+0x2200>
   130f4:	ldr	r3, [fp, #-16]
   130f8:	ldrb	r3, [r3, #12]
   130fc:	and	r3, r3, #8
   13100:	uxtb	r3, r3
   13104:	cmp	r3, #0
   13108:	beq	1312c <__assert_fail@plt+0x2200>
   1310c:	ldr	r3, [fp, #-16]
   13110:	ldr	r3, [r3, #4]
   13114:	add	r3, r3, #2
   13118:	movw	r2, #22500	; 0x57e4
   1311c:	sdiv	r3, r2, r3
   13120:	ldr	r2, [fp, #-8]
   13124:	add	r3, r2, r3
   13128:	str	r3, [fp, #-8]
   1312c:	ldr	r3, [fp, #-8]
   13130:	mov	r0, r3
   13134:	add	sp, fp, #0
   13138:	pop	{fp}		; (ldr fp, [sp], #4)
   1313c:	bx	lr
   13140:	andeq	fp, r2, ip, lsr #10
   13144:	push	{fp}		; (str fp, [sp, #-4]!)
   13148:	add	fp, sp, #0
   1314c:	sub	sp, sp, #20
   13150:	str	r0, [fp, #-16]
   13154:	str	r1, [fp, #-20]	; 0xffffffec
   13158:	movw	r3, #8816	; 0x2270
   1315c:	movt	r3, #3
   13160:	ldr	r3, [r3]
   13164:	ldr	r2, [fp, #-16]
   13168:	cmp	r2, r3
   1316c:	bne	13178 <__assert_fail@plt+0x224c>
   13170:	mov	r3, #0
   13174:	b	13244 <__assert_fail@plt+0x2318>
   13178:	movw	r3, #41336	; 0xa178
   1317c:	movt	r3, #2
   13180:	ldr	r2, [r3]
   13184:	ldr	r3, [fp, #-20]	; 0xffffffec
   13188:	sub	r3, r2, r3
   1318c:	str	r3, [fp, #-12]
   13190:	ldr	r2, [fp, #-12]
   13194:	mov	r3, r2
   13198:	lsl	r3, r3, #2
   1319c:	add	r3, r3, r2
   131a0:	lsl	r3, r3, #1
   131a4:	mov	r1, r3
   131a8:	ldr	r2, [fp, #-12]
   131ac:	mov	r3, r2
   131b0:	lsl	r3, r3, #2
   131b4:	add	r3, r3, r2
   131b8:	lsl	r3, r3, #1
   131bc:	mul	r3, r3, r1
   131c0:	str	r3, [fp, #-8]
   131c4:	ldr	r3, [fp, #-16]
   131c8:	ldr	r2, [r3, #24]
   131cc:	movw	r3, #8816	; 0x2270
   131d0:	movt	r3, #3
   131d4:	ldr	r3, [r3]
   131d8:	cmp	r2, r3
   131dc:	beq	13240 <__assert_fail@plt+0x2314>
   131e0:	ldr	r3, [fp, #-16]
   131e4:	ldr	r3, [r3, #16]
   131e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   131ec:	sub	r3, r2, r3
   131f0:	str	r3, [fp, #-12]
   131f4:	ldr	r2, [fp, #-12]
   131f8:	mov	r3, r2
   131fc:	lsl	r3, r3, #2
   13200:	add	r3, r3, r2
   13204:	lsl	r3, r3, #1
   13208:	mov	r1, r3
   1320c:	ldr	r2, [fp, #-12]
   13210:	mov	r3, r2
   13214:	lsl	r3, r3, #2
   13218:	add	r3, r3, r2
   1321c:	lsl	r3, r3, #1
   13220:	mul	r3, r3, r1
   13224:	lsr	r2, r3, #31
   13228:	add	r3, r2, r3
   1322c:	asr	r3, r3, #1
   13230:	mov	r2, r3
   13234:	ldr	r3, [fp, #-8]
   13238:	add	r3, r3, r2
   1323c:	str	r3, [fp, #-8]
   13240:	ldr	r3, [fp, #-8]
   13244:	mov	r0, r3
   13248:	add	sp, fp, #0
   1324c:	pop	{fp}		; (ldr fp, [sp], #4)
   13250:	bx	lr
   13254:	str	fp, [sp, #-8]!
   13258:	str	lr, [sp, #4]
   1325c:	add	fp, sp, #4
   13260:	sub	sp, sp, #16
   13264:	str	r0, [fp, #-16]
   13268:	movw	r3, #8828	; 0x227c
   1326c:	movt	r3, #3
   13270:	ldr	r3, [r3]
   13274:	mov	r1, r3
   13278:	movw	r0, #46352	; 0xb510
   1327c:	movt	r0, #2
   13280:	bl	132e0 <__assert_fail@plt+0x23b4>
   13284:	movw	r3, #46352	; 0xb510
   13288:	movt	r3, #2
   1328c:	ldr	r3, [r3, #24]
   13290:	str	r3, [fp, #-8]
   13294:	b	132bc <__assert_fail@plt+0x2390>
   13298:	movw	r3, #8832	; 0x2280
   1329c:	movt	r3, #3
   132a0:	ldr	r3, [r3]
   132a4:	mov	r1, r3
   132a8:	ldr	r0, [fp, #-8]
   132ac:	bl	132e0 <__assert_fail@plt+0x23b4>
   132b0:	ldr	r3, [fp, #-8]
   132b4:	ldr	r3, [r3, #24]
   132b8:	str	r3, [fp, #-8]
   132bc:	ldr	r2, [fp, #-8]
   132c0:	ldr	r3, [fp, #-16]
   132c4:	cmp	r2, r3
   132c8:	bne	13298 <__assert_fail@plt+0x236c>
   132cc:	nop	{0}
   132d0:	sub	sp, fp, #4
   132d4:	ldr	fp, [sp]
   132d8:	add	sp, sp, #4
   132dc:	pop	{pc}		; (ldr pc, [sp], #4)
   132e0:	str	fp, [sp, #-8]!
   132e4:	str	lr, [sp, #4]
   132e8:	add	fp, sp, #4
   132ec:	sub	sp, sp, #16
   132f0:	str	r0, [fp, #-16]
   132f4:	str	r1, [fp, #-20]	; 0xffffffec
   132f8:	movw	r3, #41344	; 0xa180
   132fc:	movt	r3, #2
   13300:	mov	r2, #0
   13304:	str	r2, [r3]
   13308:	movw	r3, #8824	; 0x2278
   1330c:	movt	r3, #3
   13310:	ldr	r3, [r3]
   13314:	mov	r0, r3
   13318:	bl	134a0 <__assert_fail@plt+0x2574>
   1331c:	movw	r3, #41316	; 0xa164
   13320:	movt	r3, #2
   13324:	ldr	r2, [r3]
   13328:	movw	r3, #41300	; 0xa154
   1332c:	movt	r3, #2
   13330:	ldr	r3, [r3]
   13334:	mov	r1, r3
   13338:	mov	r0, r2
   1333c:	bl	10cc8 <fputs_unlocked@plt>
   13340:	movw	r3, #41344	; 0xa180
   13344:	movt	r3, #2
   13348:	ldr	r2, [r3]
   1334c:	movw	r3, #41332	; 0xa174
   13350:	movt	r3, #2
   13354:	ldr	r3, [r3]
   13358:	add	r2, r2, r3
   1335c:	movw	r3, #41344	; 0xa180
   13360:	movt	r3, #2
   13364:	str	r2, [r3]
   13368:	movw	r3, #41344	; 0xa180
   1336c:	movt	r3, #2
   13370:	ldr	r3, [r3]
   13374:	ldr	r2, [fp, #-20]	; 0xffffffec
   13378:	sub	r3, r2, r3
   1337c:	mov	r0, r3
   13380:	bl	134a0 <__assert_fail@plt+0x2574>
   13384:	ldr	r3, [fp, #-16]
   13388:	ldr	r3, [r3, #24]
   1338c:	sub	r3, r3, #28
   13390:	str	r3, [fp, #-8]
   13394:	b	133bc <__assert_fail@plt+0x2490>
   13398:	ldr	r0, [fp, #-16]
   1339c:	bl	13408 <__assert_fail@plt+0x24dc>
   133a0:	ldr	r3, [fp, #-16]
   133a4:	ldr	r3, [r3, #8]
   133a8:	mov	r0, r3
   133ac:	bl	134a0 <__assert_fail@plt+0x2574>
   133b0:	ldr	r3, [fp, #-16]
   133b4:	add	r3, r3, #28
   133b8:	str	r3, [fp, #-16]
   133bc:	ldr	r2, [fp, #-16]
   133c0:	ldr	r3, [fp, #-8]
   133c4:	cmp	r2, r3
   133c8:	bne	13398 <__assert_fail@plt+0x246c>
   133cc:	ldr	r0, [fp, #-16]
   133d0:	bl	13408 <__assert_fail@plt+0x24dc>
   133d4:	movw	r3, #41344	; 0xa180
   133d8:	movt	r3, #2
   133dc:	ldr	r2, [r3]
   133e0:	movw	r3, #8844	; 0x228c
   133e4:	movt	r3, #3
   133e8:	str	r2, [r3]
   133ec:	mov	r0, #10
   133f0:	bl	10f20 <putchar_unlocked@plt>
   133f4:	nop	{0}
   133f8:	sub	sp, fp, #4
   133fc:	ldr	fp, [sp]
   13400:	add	sp, sp, #4
   13404:	pop	{pc}		; (ldr pc, [sp], #4)
   13408:	str	fp, [sp, #-8]!
   1340c:	str	lr, [sp, #4]
   13410:	add	fp, sp, #4
   13414:	sub	sp, sp, #16
   13418:	str	r0, [fp, #-16]
   1341c:	ldr	r3, [fp, #-16]
   13420:	ldr	r3, [r3]
   13424:	str	r3, [fp, #-8]
   13428:	ldr	r3, [fp, #-16]
   1342c:	ldr	r3, [r3, #4]
   13430:	str	r3, [fp, #-12]
   13434:	b	1345c <__assert_fail@plt+0x2530>
   13438:	ldr	r3, [fp, #-8]
   1343c:	add	r2, r3, #1
   13440:	str	r2, [fp, #-8]
   13444:	ldrb	r3, [r3]
   13448:	mov	r0, r3
   1344c:	bl	10f20 <putchar_unlocked@plt>
   13450:	ldr	r3, [fp, #-12]
   13454:	sub	r3, r3, #1
   13458:	str	r3, [fp, #-12]
   1345c:	ldr	r3, [fp, #-12]
   13460:	cmp	r3, #0
   13464:	bne	13438 <__assert_fail@plt+0x250c>
   13468:	ldr	r3, [fp, #-16]
   1346c:	ldr	r2, [r3, #4]
   13470:	movw	r3, #41344	; 0xa180
   13474:	movt	r3, #2
   13478:	ldr	r3, [r3]
   1347c:	add	r2, r2, r3
   13480:	movw	r3, #41344	; 0xa180
   13484:	movt	r3, #2
   13488:	str	r2, [r3]
   1348c:	nop	{0}
   13490:	sub	sp, fp, #4
   13494:	ldr	fp, [sp]
   13498:	add	sp, sp, #4
   1349c:	pop	{pc}		; (ldr pc, [sp], #4)
   134a0:	str	fp, [sp, #-8]!
   134a4:	str	lr, [sp, #4]
   134a8:	add	fp, sp, #4
   134ac:	sub	sp, sp, #16
   134b0:	str	r0, [fp, #-16]
   134b4:	movw	r3, #41344	; 0xa180
   134b8:	movt	r3, #2
   134bc:	ldr	r3, [r3]
   134c0:	ldr	r2, [fp, #-16]
   134c4:	add	r3, r2, r3
   134c8:	str	r3, [fp, #-8]
   134cc:	movw	r3, #8820	; 0x2274
   134d0:	movt	r3, #3
   134d4:	ldrb	r3, [r3]
   134d8:	cmp	r3, #0
   134dc:	beq	1359c <__assert_fail@plt+0x2670>
   134e0:	ldr	r3, [fp, #-8]
   134e4:	add	r2, r3, #7
   134e8:	cmp	r3, #0
   134ec:	movlt	r3, r2
   134f0:	movge	r3, r3
   134f4:	asr	r3, r3, #3
   134f8:	lsl	r3, r3, #3
   134fc:	str	r3, [fp, #-12]
   13500:	movw	r3, #41344	; 0xa180
   13504:	movt	r3, #2
   13508:	ldr	r3, [r3]
   1350c:	add	r3, r3, #1
   13510:	ldr	r2, [fp, #-12]
   13514:	cmp	r2, r3
   13518:	ble	1359c <__assert_fail@plt+0x2670>
   1351c:	b	1355c <__assert_fail@plt+0x2630>
   13520:	mov	r0, #9
   13524:	bl	10f20 <putchar_unlocked@plt>
   13528:	movw	r3, #41344	; 0xa180
   1352c:	movt	r3, #2
   13530:	ldr	r3, [r3]
   13534:	add	r2, r3, #7
   13538:	cmp	r3, #0
   1353c:	movlt	r3, r2
   13540:	movge	r3, r3
   13544:	asr	r3, r3, #3
   13548:	add	r3, r3, #1
   1354c:	lsl	r2, r3, #3
   13550:	movw	r3, #41344	; 0xa180
   13554:	movt	r3, #2
   13558:	str	r2, [r3]
   1355c:	movw	r3, #41344	; 0xa180
   13560:	movt	r3, #2
   13564:	ldr	r3, [r3]
   13568:	ldr	r2, [fp, #-12]
   1356c:	cmp	r2, r3
   13570:	bgt	13520 <__assert_fail@plt+0x25f4>
   13574:	b	1359c <__assert_fail@plt+0x2670>
   13578:	mov	r0, #32
   1357c:	bl	10f20 <putchar_unlocked@plt>
   13580:	movw	r3, #41344	; 0xa180
   13584:	movt	r3, #2
   13588:	ldr	r3, [r3]
   1358c:	add	r2, r3, #1
   13590:	movw	r3, #41344	; 0xa180
   13594:	movt	r3, #2
   13598:	str	r2, [r3]
   1359c:	movw	r3, #41344	; 0xa180
   135a0:	movt	r3, #2
   135a4:	ldr	r3, [r3]
   135a8:	ldr	r2, [fp, #-8]
   135ac:	cmp	r2, r3
   135b0:	bgt	13578 <__assert_fail@plt+0x264c>
   135b4:	nop	{0}
   135b8:	sub	sp, fp, #4
   135bc:	ldr	fp, [sp]
   135c0:	add	sp, sp, #4
   135c4:	pop	{pc}		; (ldr pc, [sp], #4)
   135c8:	push	{fp}		; (str fp, [sp, #-4]!)
   135cc:	add	fp, sp, #0
   135d0:	sub	sp, sp, #12
   135d4:	str	r0, [fp, #-8]
   135d8:	movw	r3, #8848	; 0x2290
   135dc:	movt	r3, #3
   135e0:	ldr	r2, [fp, #-8]
   135e4:	str	r2, [r3]
   135e8:	nop	{0}
   135ec:	add	sp, fp, #0
   135f0:	pop	{fp}		; (ldr fp, [sp], #4)
   135f4:	bx	lr
   135f8:	push	{fp}		; (str fp, [sp, #-4]!)
   135fc:	add	fp, sp, #0
   13600:	sub	sp, sp, #12
   13604:	mov	r3, r0
   13608:	strb	r3, [fp, #-5]
   1360c:	movw	r3, #8852	; 0x2294
   13610:	movt	r3, #3
   13614:	ldrb	r2, [fp, #-5]
   13618:	strb	r2, [r3]
   1361c:	nop	{0}
   13620:	add	sp, fp, #0
   13624:	pop	{fp}		; (ldr fp, [sp], #4)
   13628:	bx	lr
   1362c:	str	r4, [sp, #-12]!
   13630:	str	fp, [sp, #4]
   13634:	str	lr, [sp, #8]
   13638:	add	fp, sp, #8
   1363c:	sub	sp, sp, #20
   13640:	movw	r3, #41300	; 0xa154
   13644:	movt	r3, #2
   13648:	ldr	r3, [r3]
   1364c:	mov	r0, r3
   13650:	bl	182e0 <__assert_fail@plt+0x73b4>
   13654:	mov	r3, r0
   13658:	cmp	r3, #0
   1365c:	beq	13730 <__assert_fail@plt+0x2804>
   13660:	movw	r3, #8852	; 0x2294
   13664:	movt	r3, #3
   13668:	ldrb	r3, [r3]
   1366c:	eor	r3, r3, #1
   13670:	uxtb	r3, r3
   13674:	cmp	r3, #0
   13678:	bne	13690 <__assert_fail@plt+0x2764>
   1367c:	bl	10e6c <__errno_location@plt>
   13680:	mov	r3, r0
   13684:	ldr	r3, [r3]
   13688:	cmp	r3, #32
   1368c:	beq	13730 <__assert_fail@plt+0x2804>
   13690:	movw	r0, #38808	; 0x9798
   13694:	movt	r0, #1
   13698:	bl	10e3c <gettext@plt>
   1369c:	str	r0, [fp, #-16]
   136a0:	movw	r3, #8848	; 0x2290
   136a4:	movt	r3, #3
   136a8:	ldr	r3, [r3]
   136ac:	cmp	r3, #0
   136b0:	beq	136fc <__assert_fail@plt+0x27d0>
   136b4:	bl	10e6c <__errno_location@plt>
   136b8:	mov	r3, r0
   136bc:	ldr	r4, [r3]
   136c0:	movw	r3, #8848	; 0x2290
   136c4:	movt	r3, #3
   136c8:	ldr	r3, [r3]
   136cc:	mov	r0, r3
   136d0:	bl	160d0 <__assert_fail@plt+0x51a4>
   136d4:	mov	r2, r0
   136d8:	ldr	r3, [fp, #-16]
   136dc:	str	r3, [sp]
   136e0:	mov	r3, r2
   136e4:	movw	r2, #38820	; 0x97a4
   136e8:	movt	r2, #1
   136ec:	mov	r1, r4
   136f0:	mov	r0, #0
   136f4:	bl	10ddc <error@plt>
   136f8:	b	1371c <__assert_fail@plt+0x27f0>
   136fc:	bl	10e6c <__errno_location@plt>
   13700:	mov	r3, r0
   13704:	ldr	r1, [r3]
   13708:	ldr	r3, [fp, #-16]
   1370c:	movw	r2, #38828	; 0x97ac
   13710:	movt	r2, #1
   13714:	mov	r0, #0
   13718:	bl	10ddc <error@plt>
   1371c:	movw	r3, #41200	; 0xa0f0
   13720:	movt	r3, #2
   13724:	ldr	r3, [r3]
   13728:	mov	r0, r3
   1372c:	bl	10d1c <_exit@plt>
   13730:	movw	r3, #41288	; 0xa148
   13734:	movt	r3, #2
   13738:	ldr	r3, [r3]
   1373c:	mov	r0, r3
   13740:	bl	182e0 <__assert_fail@plt+0x73b4>
   13744:	mov	r3, r0
   13748:	cmp	r3, #0
   1374c:	beq	13764 <__assert_fail@plt+0x2838>
   13750:	movw	r3, #41200	; 0xa0f0
   13754:	movt	r3, #2
   13758:	ldr	r3, [r3]
   1375c:	mov	r0, r3
   13760:	bl	10d1c <_exit@plt>
   13764:	nop	{0}
   13768:	sub	sp, fp, #8
   1376c:	ldr	r4, [sp]
   13770:	ldr	fp, [sp, #4]
   13774:	add	sp, sp, #8
   13778:	pop	{pc}		; (ldr pc, [sp], #4)
   1377c:	str	fp, [sp, #-8]!
   13780:	str	lr, [sp, #4]
   13784:	add	fp, sp, #4
   13788:	sub	sp, sp, #40	; 0x28
   1378c:	str	r0, [fp, #-16]
   13790:	strd	r2, [fp, #-28]	; 0xffffffe4
   13794:	ldr	r3, [fp, #12]
   13798:	str	r3, [sp, #8]
   1379c:	ldrd	r2, [fp, #4]
   137a0:	strd	r2, [sp]
   137a4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   137a8:	ldr	r0, [fp, #-16]
   137ac:	bl	10ce0 <posix_fadvise64@plt>
   137b0:	str	r0, [fp, #-8]
   137b4:	nop	{0}
   137b8:	sub	sp, fp, #4
   137bc:	ldr	fp, [sp]
   137c0:	add	sp, sp, #4
   137c4:	pop	{pc}		; (ldr pc, [sp], #4)
   137c8:	str	fp, [sp, #-8]!
   137cc:	str	lr, [sp, #4]
   137d0:	add	fp, sp, #4
   137d4:	sub	sp, sp, #24
   137d8:	str	r0, [fp, #-8]
   137dc:	str	r1, [fp, #-12]
   137e0:	ldr	r3, [fp, #-8]
   137e4:	cmp	r3, #0
   137e8:	beq	1381c <__assert_fail@plt+0x28f0>
   137ec:	ldr	r0, [fp, #-8]
   137f0:	bl	10e90 <fileno@plt>
   137f4:	mov	r1, r0
   137f8:	ldr	r3, [fp, #-12]
   137fc:	str	r3, [sp, #8]
   13800:	mov	r2, #0
   13804:	mov	r3, #0
   13808:	strd	r2, [sp]
   1380c:	mov	r2, #0
   13810:	mov	r3, #0
   13814:	mov	r0, r1
   13818:	bl	1377c <__assert_fail@plt+0x2850>
   1381c:	nop	{0}
   13820:	sub	sp, fp, #4
   13824:	ldr	fp, [sp]
   13828:	add	sp, sp, #4
   1382c:	pop	{pc}		; (ldr pc, [sp], #4)
   13830:	str	fp, [sp, #-8]!
   13834:	str	lr, [sp, #4]
   13838:	add	fp, sp, #4
   1383c:	sub	sp, sp, #32
   13840:	str	r0, [fp, #-24]	; 0xffffffe8
   13844:	mov	r3, #0
   13848:	str	r3, [fp, #-8]
   1384c:	mov	r3, #0
   13850:	str	r3, [fp, #-12]
   13854:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13858:	bl	10e90 <fileno@plt>
   1385c:	str	r0, [fp, #-16]
   13860:	ldr	r3, [fp, #-16]
   13864:	cmp	r3, #0
   13868:	bge	1387c <__assert_fail@plt+0x2950>
   1386c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13870:	bl	10ea8 <fclose@plt>
   13874:	mov	r3, r0
   13878:	b	13920 <__assert_fail@plt+0x29f4>
   1387c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13880:	bl	10e00 <__freading@plt>
   13884:	mov	r3, r0
   13888:	cmp	r3, #0
   1388c:	beq	138c8 <__assert_fail@plt+0x299c>
   13890:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13894:	bl	10e90 <fileno@plt>
   13898:	mov	r1, r0
   1389c:	mov	r3, #1
   138a0:	str	r3, [sp]
   138a4:	mov	r2, #0
   138a8:	mov	r3, #0
   138ac:	mov	r0, r1
   138b0:	bl	10da0 <lseek64@plt>
   138b4:	mvn	r2, #0
   138b8:	mvn	r3, #0
   138bc:	cmp	r1, r3
   138c0:	cmpeq	r0, r2
   138c4:	beq	138ec <__assert_fail@plt+0x29c0>
   138c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   138cc:	bl	13988 <__assert_fail@plt+0x2a5c>
   138d0:	mov	r3, r0
   138d4:	cmp	r3, #0
   138d8:	beq	138ec <__assert_fail@plt+0x29c0>
   138dc:	bl	10e6c <__errno_location@plt>
   138e0:	mov	r3, r0
   138e4:	ldr	r3, [r3]
   138e8:	str	r3, [fp, #-8]
   138ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   138f0:	bl	10ea8 <fclose@plt>
   138f4:	str	r0, [fp, #-12]
   138f8:	ldr	r3, [fp, #-8]
   138fc:	cmp	r3, #0
   13900:	beq	1391c <__assert_fail@plt+0x29f0>
   13904:	bl	10e6c <__errno_location@plt>
   13908:	mov	r2, r0
   1390c:	ldr	r3, [fp, #-8]
   13910:	str	r3, [r2]
   13914:	mvn	r3, #0
   13918:	str	r3, [fp, #-12]
   1391c:	ldr	r3, [fp, #-12]
   13920:	mov	r0, r3
   13924:	sub	sp, fp, #4
   13928:	ldr	fp, [sp]
   1392c:	add	sp, sp, #4
   13930:	pop	{pc}		; (ldr pc, [sp], #4)
   13934:	str	fp, [sp, #-8]!
   13938:	str	lr, [sp, #4]
   1393c:	add	fp, sp, #4
   13940:	sub	sp, sp, #16
   13944:	str	r0, [fp, #-8]
   13948:	ldr	r3, [fp, #-8]
   1394c:	ldr	r3, [r3]
   13950:	and	r3, r3, #256	; 0x100
   13954:	cmp	r3, #0
   13958:	beq	13974 <__assert_fail@plt+0x2a48>
   1395c:	mov	r3, #1
   13960:	str	r3, [sp]
   13964:	mov	r2, #0
   13968:	mov	r3, #0
   1396c:	ldr	r0, [fp, #-8]
   13970:	bl	139f4 <__assert_fail@plt+0x2ac8>
   13974:	nop	{0}
   13978:	sub	sp, fp, #4
   1397c:	ldr	fp, [sp]
   13980:	add	sp, sp, #4
   13984:	pop	{pc}		; (ldr pc, [sp], #4)
   13988:	str	fp, [sp, #-8]!
   1398c:	str	lr, [sp, #4]
   13990:	add	fp, sp, #4
   13994:	sub	sp, sp, #8
   13998:	str	r0, [fp, #-8]
   1399c:	ldr	r3, [fp, #-8]
   139a0:	cmp	r3, #0
   139a4:	beq	139bc <__assert_fail@plt+0x2a90>
   139a8:	ldr	r0, [fp, #-8]
   139ac:	bl	10e00 <__freading@plt>
   139b0:	mov	r3, r0
   139b4:	cmp	r3, #0
   139b8:	bne	139cc <__assert_fail@plt+0x2aa0>
   139bc:	ldr	r0, [fp, #-8]
   139c0:	bl	10cf8 <fflush@plt>
   139c4:	mov	r3, r0
   139c8:	b	139e0 <__assert_fail@plt+0x2ab4>
   139cc:	ldr	r0, [fp, #-8]
   139d0:	bl	13934 <__assert_fail@plt+0x2a08>
   139d4:	ldr	r0, [fp, #-8]
   139d8:	bl	10cf8 <fflush@plt>
   139dc:	mov	r3, r0
   139e0:	mov	r0, r3
   139e4:	sub	sp, fp, #4
   139e8:	ldr	fp, [sp]
   139ec:	add	sp, sp, #4
   139f0:	pop	{pc}		; (ldr pc, [sp], #4)
   139f4:	str	fp, [sp, #-8]!
   139f8:	str	lr, [sp, #4]
   139fc:	add	fp, sp, #4
   13a00:	sub	sp, sp, #32
   13a04:	str	r0, [fp, #-16]
   13a08:	strd	r2, [fp, #-28]	; 0xffffffe4
   13a0c:	ldr	r3, [fp, #-16]
   13a10:	ldr	r2, [r3, #8]
   13a14:	ldr	r3, [fp, #-16]
   13a18:	ldr	r3, [r3, #4]
   13a1c:	cmp	r2, r3
   13a20:	bne	13ab8 <__assert_fail@plt+0x2b8c>
   13a24:	ldr	r3, [fp, #-16]
   13a28:	ldr	r2, [r3, #20]
   13a2c:	ldr	r3, [fp, #-16]
   13a30:	ldr	r3, [r3, #16]
   13a34:	cmp	r2, r3
   13a38:	bne	13ab8 <__assert_fail@plt+0x2b8c>
   13a3c:	ldr	r3, [fp, #-16]
   13a40:	ldr	r3, [r3, #36]	; 0x24
   13a44:	cmp	r3, #0
   13a48:	bne	13ab8 <__assert_fail@plt+0x2b8c>
   13a4c:	ldr	r0, [fp, #-16]
   13a50:	bl	10e90 <fileno@plt>
   13a54:	mov	r1, r0
   13a58:	ldr	r3, [fp, #4]
   13a5c:	str	r3, [sp]
   13a60:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13a64:	mov	r0, r1
   13a68:	bl	10da0 <lseek64@plt>
   13a6c:	strd	r0, [fp, #-12]
   13a70:	ldrd	r2, [fp, #-12]
   13a74:	mvn	r0, #0
   13a78:	mvn	r1, #0
   13a7c:	cmp	r3, r1
   13a80:	cmpeq	r2, r0
   13a84:	bne	13a90 <__assert_fail@plt+0x2b64>
   13a88:	mvn	r3, #0
   13a8c:	b	13ad0 <__assert_fail@plt+0x2ba4>
   13a90:	ldr	r3, [fp, #-16]
   13a94:	ldr	r3, [r3]
   13a98:	bic	r2, r3, #16
   13a9c:	ldr	r3, [fp, #-16]
   13aa0:	str	r2, [r3]
   13aa4:	ldr	r1, [fp, #-16]
   13aa8:	ldrd	r2, [fp, #-12]
   13aac:	strd	r2, [r1, #80]	; 0x50
   13ab0:	mov	r3, #0
   13ab4:	b	13ad0 <__assert_fail@plt+0x2ba4>
   13ab8:	ldr	r3, [fp, #4]
   13abc:	str	r3, [sp]
   13ac0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13ac4:	ldr	r0, [fp, #-16]
   13ac8:	bl	10eb4 <fseeko64@plt>
   13acc:	mov	r3, r0
   13ad0:	mov	r0, r3
   13ad4:	sub	sp, fp, #4
   13ad8:	ldr	fp, [sp]
   13adc:	add	sp, sp, #4
   13ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae4:	str	fp, [sp, #-8]!
   13ae8:	str	lr, [sp, #4]
   13aec:	add	fp, sp, #4
   13af0:	sub	sp, sp, #16
   13af4:	str	r0, [fp, #-16]
   13af8:	ldr	r3, [fp, #-16]
   13afc:	cmp	r3, #0
   13b00:	bne	13b28 <__assert_fail@plt+0x2bfc>
   13b04:	movw	r3, #41288	; 0xa148
   13b08:	movt	r3, #2
   13b0c:	ldr	r3, [r3]
   13b10:	mov	r2, #55	; 0x37
   13b14:	mov	r1, #1
   13b18:	movw	r0, #38832	; 0x97b0
   13b1c:	movt	r0, #1
   13b20:	bl	10d94 <fwrite@plt>
   13b24:	bl	10f14 <abort@plt>
   13b28:	mov	r1, #47	; 0x2f
   13b2c:	ldr	r0, [fp, #-16]
   13b30:	bl	10ecc <strrchr@plt>
   13b34:	str	r0, [fp, #-8]
   13b38:	ldr	r3, [fp, #-8]
   13b3c:	cmp	r3, #0
   13b40:	beq	13b50 <__assert_fail@plt+0x2c24>
   13b44:	ldr	r3, [fp, #-8]
   13b48:	add	r3, r3, #1
   13b4c:	b	13b54 <__assert_fail@plt+0x2c28>
   13b50:	ldr	r3, [fp, #-16]
   13b54:	str	r3, [fp, #-12]
   13b58:	ldr	r2, [fp, #-12]
   13b5c:	ldr	r3, [fp, #-16]
   13b60:	sub	r3, r2, r3
   13b64:	cmp	r3, #6
   13b68:	ble	13bd8 <__assert_fail@plt+0x2cac>
   13b6c:	ldr	r3, [fp, #-12]
   13b70:	sub	r3, r3, #7
   13b74:	mov	r2, #7
   13b78:	movw	r1, #38888	; 0x97e8
   13b7c:	movt	r1, #1
   13b80:	mov	r0, r3
   13b84:	bl	10f08 <strncmp@plt>
   13b88:	mov	r3, r0
   13b8c:	cmp	r3, #0
   13b90:	bne	13bd8 <__assert_fail@plt+0x2cac>
   13b94:	ldr	r3, [fp, #-12]
   13b98:	str	r3, [fp, #-16]
   13b9c:	mov	r2, #3
   13ba0:	movw	r1, #38896	; 0x97f0
   13ba4:	movt	r1, #1
   13ba8:	ldr	r0, [fp, #-12]
   13bac:	bl	10f08 <strncmp@plt>
   13bb0:	mov	r3, r0
   13bb4:	cmp	r3, #0
   13bb8:	bne	13bd8 <__assert_fail@plt+0x2cac>
   13bbc:	ldr	r3, [fp, #-12]
   13bc0:	add	r3, r3, #3
   13bc4:	str	r3, [fp, #-16]
   13bc8:	movw	r3, #41272	; 0xa138
   13bcc:	movt	r3, #2
   13bd0:	ldr	r2, [fp, #-16]
   13bd4:	str	r2, [r3]
   13bd8:	movw	r3, #8856	; 0x2298
   13bdc:	movt	r3, #3
   13be0:	ldr	r2, [fp, #-16]
   13be4:	str	r2, [r3]
   13be8:	movw	r3, #41276	; 0xa13c
   13bec:	movt	r3, #2
   13bf0:	ldr	r2, [fp, #-16]
   13bf4:	str	r2, [r3]
   13bf8:	nop	{0}
   13bfc:	sub	sp, fp, #4
   13c00:	ldr	fp, [sp]
   13c04:	add	sp, sp, #4
   13c08:	pop	{pc}		; (ldr pc, [sp], #4)
   13c0c:	str	fp, [sp, #-8]!
   13c10:	str	lr, [sp, #4]
   13c14:	add	fp, sp, #4
   13c18:	sub	sp, sp, #16
   13c1c:	str	r0, [fp, #-16]
   13c20:	bl	10e6c <__errno_location@plt>
   13c24:	mov	r3, r0
   13c28:	ldr	r3, [r3]
   13c2c:	str	r3, [fp, #-8]
   13c30:	ldr	r3, [fp, #-16]
   13c34:	cmp	r3, #0
   13c38:	beq	13c44 <__assert_fail@plt+0x2d18>
   13c3c:	ldr	r3, [fp, #-16]
   13c40:	b	13c4c <__assert_fail@plt+0x2d20>
   13c44:	movw	r3, #8860	; 0x229c
   13c48:	movt	r3, #3
   13c4c:	mov	r1, #48	; 0x30
   13c50:	mov	r0, r3
   13c54:	bl	173ec <__assert_fail@plt+0x64c0>
   13c58:	mov	r3, r0
   13c5c:	str	r3, [fp, #-12]
   13c60:	bl	10e6c <__errno_location@plt>
   13c64:	mov	r2, r0
   13c68:	ldr	r3, [fp, #-8]
   13c6c:	str	r3, [r2]
   13c70:	ldr	r3, [fp, #-12]
   13c74:	mov	r0, r3
   13c78:	sub	sp, fp, #4
   13c7c:	ldr	fp, [sp]
   13c80:	add	sp, sp, #4
   13c84:	pop	{pc}		; (ldr pc, [sp], #4)
   13c88:	push	{fp}		; (str fp, [sp, #-4]!)
   13c8c:	add	fp, sp, #0
   13c90:	sub	sp, sp, #12
   13c94:	str	r0, [fp, #-8]
   13c98:	ldr	r3, [fp, #-8]
   13c9c:	cmp	r3, #0
   13ca0:	beq	13cac <__assert_fail@plt+0x2d80>
   13ca4:	ldr	r3, [fp, #-8]
   13ca8:	b	13cb4 <__assert_fail@plt+0x2d88>
   13cac:	movw	r3, #8860	; 0x229c
   13cb0:	movt	r3, #3
   13cb4:	ldr	r3, [r3]
   13cb8:	mov	r0, r3
   13cbc:	add	sp, fp, #0
   13cc0:	pop	{fp}		; (ldr fp, [sp], #4)
   13cc4:	bx	lr
   13cc8:	push	{fp}		; (str fp, [sp, #-4]!)
   13ccc:	add	fp, sp, #0
   13cd0:	sub	sp, sp, #12
   13cd4:	str	r0, [fp, #-8]
   13cd8:	str	r1, [fp, #-12]
   13cdc:	ldr	r3, [fp, #-8]
   13ce0:	cmp	r3, #0
   13ce4:	beq	13cf0 <__assert_fail@plt+0x2dc4>
   13ce8:	ldr	r3, [fp, #-8]
   13cec:	b	13cf8 <__assert_fail@plt+0x2dcc>
   13cf0:	movw	r3, #8860	; 0x229c
   13cf4:	movt	r3, #3
   13cf8:	ldr	r2, [fp, #-12]
   13cfc:	str	r2, [r3]
   13d00:	nop	{0}
   13d04:	add	sp, fp, #0
   13d08:	pop	{fp}		; (ldr fp, [sp], #4)
   13d0c:	bx	lr
   13d10:	push	{fp}		; (str fp, [sp, #-4]!)
   13d14:	add	fp, sp, #0
   13d18:	sub	sp, sp, #36	; 0x24
   13d1c:	str	r0, [fp, #-24]	; 0xffffffe8
   13d20:	mov	r3, r1
   13d24:	str	r2, [fp, #-32]	; 0xffffffe0
   13d28:	strb	r3, [fp, #-25]	; 0xffffffe7
   13d2c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13d30:	strb	r3, [fp, #-5]
   13d34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d38:	cmp	r3, #0
   13d3c:	beq	13d48 <__assert_fail@plt+0x2e1c>
   13d40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d44:	b	13d50 <__assert_fail@plt+0x2e24>
   13d48:	movw	r3, #8860	; 0x229c
   13d4c:	movt	r3, #3
   13d50:	add	r2, r3, #8
   13d54:	ldrb	r3, [fp, #-5]
   13d58:	lsr	r3, r3, #5
   13d5c:	uxtb	r3, r3
   13d60:	lsl	r3, r3, #2
   13d64:	add	r3, r2, r3
   13d68:	str	r3, [fp, #-12]
   13d6c:	ldrb	r3, [fp, #-5]
   13d70:	and	r3, r3, #31
   13d74:	str	r3, [fp, #-16]
   13d78:	ldr	r3, [fp, #-12]
   13d7c:	ldr	r2, [r3]
   13d80:	ldr	r3, [fp, #-16]
   13d84:	lsr	r3, r2, r3
   13d88:	and	r3, r3, #1
   13d8c:	str	r3, [fp, #-20]	; 0xffffffec
   13d90:	ldr	r3, [fp, #-12]
   13d94:	ldr	r3, [r3]
   13d98:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13d9c:	and	r1, r2, #1
   13da0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13da4:	eor	r1, r1, r2
   13da8:	ldr	r2, [fp, #-16]
   13dac:	lsl	r2, r1, r2
   13db0:	eor	r2, r2, r3
   13db4:	ldr	r3, [fp, #-12]
   13db8:	str	r2, [r3]
   13dbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dc0:	mov	r0, r3
   13dc4:	add	sp, fp, #0
   13dc8:	pop	{fp}		; (ldr fp, [sp], #4)
   13dcc:	bx	lr
   13dd0:	push	{fp}		; (str fp, [sp, #-4]!)
   13dd4:	add	fp, sp, #0
   13dd8:	sub	sp, sp, #20
   13ddc:	str	r0, [fp, #-16]
   13de0:	str	r1, [fp, #-20]	; 0xffffffec
   13de4:	ldr	r3, [fp, #-16]
   13de8:	cmp	r3, #0
   13dec:	bne	13dfc <__assert_fail@plt+0x2ed0>
   13df0:	movw	r3, #8860	; 0x229c
   13df4:	movt	r3, #3
   13df8:	str	r3, [fp, #-16]
   13dfc:	ldr	r3, [fp, #-16]
   13e00:	ldr	r3, [r3, #4]
   13e04:	str	r3, [fp, #-8]
   13e08:	ldr	r3, [fp, #-16]
   13e0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e10:	str	r2, [r3, #4]
   13e14:	ldr	r3, [fp, #-8]
   13e18:	mov	r0, r3
   13e1c:	add	sp, fp, #0
   13e20:	pop	{fp}		; (ldr fp, [sp], #4)
   13e24:	bx	lr
   13e28:	str	fp, [sp, #-8]!
   13e2c:	str	lr, [sp, #4]
   13e30:	add	fp, sp, #4
   13e34:	sub	sp, sp, #16
   13e38:	str	r0, [fp, #-8]
   13e3c:	str	r1, [fp, #-12]
   13e40:	str	r2, [fp, #-16]
   13e44:	ldr	r3, [fp, #-8]
   13e48:	cmp	r3, #0
   13e4c:	bne	13e5c <__assert_fail@plt+0x2f30>
   13e50:	movw	r3, #8860	; 0x229c
   13e54:	movt	r3, #3
   13e58:	str	r3, [fp, #-8]
   13e5c:	ldr	r3, [fp, #-8]
   13e60:	mov	r2, #10
   13e64:	str	r2, [r3]
   13e68:	ldr	r3, [fp, #-12]
   13e6c:	cmp	r3, #0
   13e70:	beq	13e80 <__assert_fail@plt+0x2f54>
   13e74:	ldr	r3, [fp, #-16]
   13e78:	cmp	r3, #0
   13e7c:	bne	13e84 <__assert_fail@plt+0x2f58>
   13e80:	bl	10f14 <abort@plt>
   13e84:	ldr	r3, [fp, #-8]
   13e88:	ldr	r2, [fp, #-12]
   13e8c:	str	r2, [r3, #40]	; 0x28
   13e90:	ldr	r3, [fp, #-8]
   13e94:	ldr	r2, [fp, #-16]
   13e98:	str	r2, [r3, #44]	; 0x2c
   13e9c:	nop	{0}
   13ea0:	sub	sp, fp, #4
   13ea4:	ldr	fp, [sp]
   13ea8:	add	sp, sp, #4
   13eac:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb0:	str	fp, [sp, #-8]!
   13eb4:	str	lr, [sp, #4]
   13eb8:	add	fp, sp, #4
   13ebc:	sub	sp, sp, #56	; 0x38
   13ec0:	str	r0, [fp, #-56]	; 0xffffffc8
   13ec4:	str	r1, [fp, #-60]	; 0xffffffc4
   13ec8:	sub	r1, fp, #52	; 0x34
   13ecc:	mov	r2, #0
   13ed0:	mov	r3, #0
   13ed4:	strd	r2, [r1]
   13ed8:	strd	r2, [r1, #8]
   13edc:	strd	r2, [r1, #16]
   13ee0:	strd	r2, [r1, #24]
   13ee4:	strd	r2, [r1, #32]
   13ee8:	strd	r2, [r1, #40]	; 0x28
   13eec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13ef0:	cmp	r3, #10
   13ef4:	bne	13efc <__assert_fail@plt+0x2fd0>
   13ef8:	bl	10f14 <abort@plt>
   13efc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13f00:	str	r3, [fp, #-52]	; 0xffffffcc
   13f04:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13f08:	mov	r2, r3
   13f0c:	sub	r3, fp, #52	; 0x34
   13f10:	ldrd	r0, [r3]
   13f14:	strd	r0, [r2]
   13f18:	ldrd	r0, [r3, #8]
   13f1c:	strd	r0, [r2, #8]
   13f20:	ldrd	r0, [r3, #16]
   13f24:	strd	r0, [r2, #16]
   13f28:	ldrd	r0, [r3, #24]
   13f2c:	strd	r0, [r2, #24]
   13f30:	ldrd	r0, [r3, #32]
   13f34:	strd	r0, [r2, #32]
   13f38:	ldrd	r0, [r3, #40]	; 0x28
   13f3c:	strd	r0, [r2, #40]	; 0x28
   13f40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13f44:	sub	sp, fp, #4
   13f48:	ldr	fp, [sp]
   13f4c:	add	sp, sp, #4
   13f50:	pop	{pc}		; (ldr pc, [sp], #4)
   13f54:	str	fp, [sp, #-8]!
   13f58:	str	lr, [sp, #4]
   13f5c:	add	fp, sp, #4
   13f60:	sub	sp, sp, #16
   13f64:	str	r0, [fp, #-16]
   13f68:	str	r1, [fp, #-20]	; 0xffffffec
   13f6c:	ldr	r0, [fp, #-16]
   13f70:	bl	10e3c <gettext@plt>
   13f74:	str	r0, [fp, #-8]
   13f78:	ldr	r2, [fp, #-8]
   13f7c:	ldr	r3, [fp, #-16]
   13f80:	cmp	r2, r3
   13f84:	beq	13f90 <__assert_fail@plt+0x3064>
   13f88:	ldr	r3, [fp, #-8]
   13f8c:	b	14040 <__assert_fail@plt+0x3114>
   13f90:	bl	185e4 <__assert_fail@plt+0x76b8>
   13f94:	str	r0, [fp, #-12]
   13f98:	movw	r1, #39088	; 0x98b0
   13f9c:	movt	r1, #1
   13fa0:	ldr	r0, [fp, #-12]
   13fa4:	bl	18234 <__assert_fail@plt+0x7308>
   13fa8:	mov	r3, r0
   13fac:	cmp	r3, #0
   13fb0:	bne	13fdc <__assert_fail@plt+0x30b0>
   13fb4:	ldr	r3, [fp, #-16]
   13fb8:	ldrb	r3, [r3]
   13fbc:	cmp	r3, #96	; 0x60
   13fc0:	bne	13fd0 <__assert_fail@plt+0x30a4>
   13fc4:	movw	r3, #39096	; 0x98b8
   13fc8:	movt	r3, #1
   13fcc:	b	14040 <__assert_fail@plt+0x3114>
   13fd0:	movw	r3, #39100	; 0x98bc
   13fd4:	movt	r3, #1
   13fd8:	b	14040 <__assert_fail@plt+0x3114>
   13fdc:	movw	r1, #39104	; 0x98c0
   13fe0:	movt	r1, #1
   13fe4:	ldr	r0, [fp, #-12]
   13fe8:	bl	18234 <__assert_fail@plt+0x7308>
   13fec:	mov	r3, r0
   13ff0:	cmp	r3, #0
   13ff4:	bne	14020 <__assert_fail@plt+0x30f4>
   13ff8:	ldr	r3, [fp, #-16]
   13ffc:	ldrb	r3, [r3]
   14000:	cmp	r3, #96	; 0x60
   14004:	bne	14014 <__assert_fail@plt+0x30e8>
   14008:	movw	r3, #39112	; 0x98c8
   1400c:	movt	r3, #1
   14010:	b	14040 <__assert_fail@plt+0x3114>
   14014:	movw	r3, #39116	; 0x98cc
   14018:	movt	r3, #1
   1401c:	b	14040 <__assert_fail@plt+0x3114>
   14020:	ldr	r3, [fp, #-20]	; 0xffffffec
   14024:	cmp	r3, #9
   14028:	bne	14038 <__assert_fail@plt+0x310c>
   1402c:	movw	r3, #39120	; 0x98d0
   14030:	movt	r3, #1
   14034:	b	14040 <__assert_fail@plt+0x3114>
   14038:	movw	r3, #39124	; 0x98d4
   1403c:	movt	r3, #1
   14040:	mov	r0, r3
   14044:	sub	sp, fp, #4
   14048:	ldr	fp, [sp]
   1404c:	add	sp, sp, #4
   14050:	pop	{pc}		; (ldr pc, [sp], #4)
   14054:	str	r4, [sp, #-12]!
   14058:	str	fp, [sp, #4]
   1405c:	str	lr, [sp, #8]
   14060:	add	fp, sp, #8
   14064:	sub	sp, sp, #116	; 0x74
   14068:	str	r0, [fp, #-88]	; 0xffffffa8
   1406c:	str	r1, [fp, #-92]	; 0xffffffa4
   14070:	str	r2, [fp, #-96]	; 0xffffffa0
   14074:	str	r3, [fp, #-100]	; 0xffffff9c
   14078:	mov	r3, #0
   1407c:	str	r3, [fp, #-20]	; 0xffffffec
   14080:	mov	r3, #0
   14084:	str	r3, [fp, #-24]	; 0xffffffe8
   14088:	mov	r3, #0
   1408c:	str	r3, [fp, #-28]	; 0xffffffe4
   14090:	mov	r3, #0
   14094:	str	r3, [fp, #-32]	; 0xffffffe0
   14098:	mov	r3, #0
   1409c:	strb	r3, [fp, #-33]	; 0xffffffdf
   140a0:	bl	10dac <__ctype_get_mb_cur_max@plt>
   140a4:	mov	r3, r0
   140a8:	cmp	r3, #1
   140ac:	moveq	r3, #1
   140b0:	movne	r3, #0
   140b4:	strb	r3, [fp, #-57]	; 0xffffffc7
   140b8:	ldr	r3, [fp, #8]
   140bc:	and	r3, r3, #2
   140c0:	cmp	r3, #0
   140c4:	movne	r3, #1
   140c8:	moveq	r3, #0
   140cc:	strb	r3, [fp, #-34]	; 0xffffffde
   140d0:	mov	r3, #0
   140d4:	strb	r3, [fp, #-35]	; 0xffffffdd
   140d8:	mov	r3, #0
   140dc:	strb	r3, [fp, #-36]	; 0xffffffdc
   140e0:	mov	r3, #1
   140e4:	strb	r3, [fp, #-37]	; 0xffffffdb
   140e8:	ldr	r3, [fp, #4]
   140ec:	cmp	r3, #10
   140f0:	ldrls	pc, [pc, r3, lsl #2]
   140f4:	b	1430c <__assert_fail@plt+0x33e0>
   140f8:	andeq	r4, r1, r0, lsl #6
   140fc:	andeq	r4, r1, r8, ror r2
   14100:	muleq	r1, ip, r2
   14104:	andeq	r4, r1, r0, ror r2
   14108:	andeq	r4, r1, r0, lsl #5
   1410c:	andeq	r4, r1, r4, lsr r1
   14110:	andeq	r4, r1, r4, lsr #2
   14114:	muleq	r1, r8, r1
   14118:	andeq	r4, r1, ip, lsr #3
   1411c:	andeq	r4, r1, ip, lsr #3
   14120:	andeq	r4, r1, ip, lsr #3
   14124:	mov	r3, #5
   14128:	str	r3, [fp, #4]
   1412c:	mov	r3, #1
   14130:	strb	r3, [fp, #-34]	; 0xffffffde
   14134:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14138:	eor	r3, r3, #1
   1413c:	uxtb	r3, r3
   14140:	cmp	r3, #0
   14144:	beq	14178 <__assert_fail@plt+0x324c>
   14148:	ldr	r2, [fp, #-20]	; 0xffffffec
   1414c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14150:	cmp	r2, r3
   14154:	bcs	1416c <__assert_fail@plt+0x3240>
   14158:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1415c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14160:	add	r3, r2, r3
   14164:	mov	r2, #34	; 0x22
   14168:	strb	r2, [r3]
   1416c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14170:	add	r3, r3, #1
   14174:	str	r3, [fp, #-20]	; 0xffffffec
   14178:	mov	r3, #1
   1417c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14180:	movw	r3, #39120	; 0x98d0
   14184:	movt	r3, #1
   14188:	str	r3, [fp, #-28]	; 0xffffffe4
   1418c:	mov	r3, #1
   14190:	str	r3, [fp, #-32]	; 0xffffffe0
   14194:	b	14310 <__assert_fail@plt+0x33e4>
   14198:	mov	r3, #1
   1419c:	strb	r3, [fp, #-33]	; 0xffffffdf
   141a0:	mov	r3, #0
   141a4:	strb	r3, [fp, #-34]	; 0xffffffde
   141a8:	b	14310 <__assert_fail@plt+0x33e4>
   141ac:	ldr	r3, [fp, #4]
   141b0:	cmp	r3, #10
   141b4:	beq	141e0 <__assert_fail@plt+0x32b4>
   141b8:	ldr	r1, [fp, #4]
   141bc:	movw	r0, #39128	; 0x98d8
   141c0:	movt	r0, #1
   141c4:	bl	13f54 <__assert_fail@plt+0x3028>
   141c8:	str	r0, [fp, #16]
   141cc:	ldr	r1, [fp, #4]
   141d0:	movw	r0, #39124	; 0x98d4
   141d4:	movt	r0, #1
   141d8:	bl	13f54 <__assert_fail@plt+0x3028>
   141dc:	str	r0, [fp, #20]
   141e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   141e4:	eor	r3, r3, #1
   141e8:	uxtb	r3, r3
   141ec:	cmp	r3, #0
   141f0:	beq	14250 <__assert_fail@plt+0x3324>
   141f4:	ldr	r3, [fp, #16]
   141f8:	str	r3, [fp, #-28]	; 0xffffffe4
   141fc:	b	14240 <__assert_fail@plt+0x3314>
   14200:	ldr	r2, [fp, #-20]	; 0xffffffec
   14204:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14208:	cmp	r2, r3
   1420c:	bcs	14228 <__assert_fail@plt+0x32fc>
   14210:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14214:	ldr	r3, [fp, #-20]	; 0xffffffec
   14218:	add	r3, r2, r3
   1421c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14220:	ldrb	r2, [r2]
   14224:	strb	r2, [r3]
   14228:	ldr	r3, [fp, #-20]	; 0xffffffec
   1422c:	add	r3, r3, #1
   14230:	str	r3, [fp, #-20]	; 0xffffffec
   14234:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14238:	add	r3, r3, #1
   1423c:	str	r3, [fp, #-28]	; 0xffffffe4
   14240:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14244:	ldrb	r3, [r3]
   14248:	cmp	r3, #0
   1424c:	bne	14200 <__assert_fail@plt+0x32d4>
   14250:	mov	r3, #1
   14254:	strb	r3, [fp, #-33]	; 0xffffffdf
   14258:	ldr	r3, [fp, #20]
   1425c:	str	r3, [fp, #-28]	; 0xffffffe4
   14260:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14264:	bl	10e48 <strlen@plt>
   14268:	str	r0, [fp, #-32]	; 0xffffffe0
   1426c:	b	14310 <__assert_fail@plt+0x33e4>
   14270:	mov	r3, #1
   14274:	strb	r3, [fp, #-33]	; 0xffffffdf
   14278:	mov	r3, #1
   1427c:	strb	r3, [fp, #-34]	; 0xffffffde
   14280:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14284:	eor	r3, r3, #1
   14288:	uxtb	r3, r3
   1428c:	cmp	r3, #0
   14290:	beq	1429c <__assert_fail@plt+0x3370>
   14294:	mov	r3, #1
   14298:	strb	r3, [fp, #-33]	; 0xffffffdf
   1429c:	mov	r3, #2
   142a0:	str	r3, [fp, #4]
   142a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   142a8:	eor	r3, r3, #1
   142ac:	uxtb	r3, r3
   142b0:	cmp	r3, #0
   142b4:	beq	142e8 <__assert_fail@plt+0x33bc>
   142b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   142bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142c0:	cmp	r2, r3
   142c4:	bcs	142dc <__assert_fail@plt+0x33b0>
   142c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   142d0:	add	r3, r2, r3
   142d4:	mov	r2, #39	; 0x27
   142d8:	strb	r2, [r3]
   142dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   142e0:	add	r3, r3, #1
   142e4:	str	r3, [fp, #-20]	; 0xffffffec
   142e8:	movw	r3, #39124	; 0x98d4
   142ec:	movt	r3, #1
   142f0:	str	r3, [fp, #-28]	; 0xffffffe4
   142f4:	mov	r3, #1
   142f8:	str	r3, [fp, #-32]	; 0xffffffe0
   142fc:	b	14310 <__assert_fail@plt+0x33e4>
   14300:	mov	r3, #0
   14304:	strb	r3, [fp, #-34]	; 0xffffffde
   14308:	b	14310 <__assert_fail@plt+0x33e4>
   1430c:	bl	10f14 <abort@plt>
   14310:	mov	r3, #0
   14314:	str	r3, [fp, #-16]
   14318:	b	154b4 <__assert_fail@plt+0x4588>
   1431c:	mov	r3, #0
   14320:	strb	r3, [fp, #-40]	; 0xffffffd8
   14324:	mov	r3, #0
   14328:	strb	r3, [fp, #-41]	; 0xffffffd7
   1432c:	mov	r3, #0
   14330:	strb	r3, [fp, #-42]	; 0xffffffd6
   14334:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14338:	cmp	r3, #0
   1433c:	beq	143d8 <__assert_fail@plt+0x34ac>
   14340:	ldr	r3, [fp, #4]
   14344:	cmp	r3, #2
   14348:	beq	143d8 <__assert_fail@plt+0x34ac>
   1434c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14350:	cmp	r3, #0
   14354:	beq	143d8 <__assert_fail@plt+0x34ac>
   14358:	ldr	r2, [fp, #-16]
   1435c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14360:	add	r4, r2, r3
   14364:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14368:	cmn	r3, #1
   1436c:	bne	14390 <__assert_fail@plt+0x3464>
   14370:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14374:	cmp	r3, #1
   14378:	bls	14390 <__assert_fail@plt+0x3464>
   1437c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14380:	bl	10e48 <strlen@plt>
   14384:	str	r0, [fp, #-100]	; 0xffffff9c
   14388:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1438c:	b	14394 <__assert_fail@plt+0x3468>
   14390:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14394:	cmp	r3, r4
   14398:	bcc	143d8 <__assert_fail@plt+0x34ac>
   1439c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   143a0:	ldr	r3, [fp, #-16]
   143a4:	add	r3, r2, r3
   143a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   143ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   143b0:	mov	r0, r3
   143b4:	bl	10d4c <memcmp@plt>
   143b8:	mov	r3, r0
   143bc:	cmp	r3, #0
   143c0:	bne	143d8 <__assert_fail@plt+0x34ac>
   143c4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   143c8:	cmp	r3, #0
   143cc:	bne	15670 <__assert_fail@plt+0x4744>
   143d0:	mov	r3, #1
   143d4:	strb	r3, [fp, #-40]	; 0xffffffd8
   143d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   143dc:	ldr	r3, [fp, #-16]
   143e0:	add	r3, r2, r3
   143e4:	ldrb	r3, [r3]
   143e8:	strb	r3, [fp, #-38]	; 0xffffffda
   143ec:	ldrb	r3, [fp, #-38]	; 0xffffffda
   143f0:	cmp	r3, #126	; 0x7e
   143f4:	ldrls	pc, [pc, r3, lsl #2]
   143f8:	b	14c30 <__assert_fail@plt+0x3d04>
   143fc:	strdeq	r4, [r1], -r8
   14400:	andeq	r4, r1, r0, lsr ip
   14404:	andeq	r4, r1, r0, lsr ip
   14408:	andeq	r4, r1, r0, lsr ip
   1440c:	andeq	r4, r1, r0, lsr ip
   14410:	andeq	r4, r1, r0, lsr ip
   14414:	andeq	r4, r1, r0, lsr ip
   14418:	andeq	r4, r1, ip, ror #19
   1441c:	strdeq	r4, [r1], -r8
   14420:	andeq	r4, r1, r8, lsr #20
   14424:	andeq	r4, r1, r0, lsl sl
   14428:	andeq	r4, r1, r4, lsr sl
   1442c:	andeq	r4, r1, r4, lsl #20
   14430:	andeq	r4, r1, ip, lsl sl
   14434:	andeq	r4, r1, r0, lsr ip
   14438:	andeq	r4, r1, r0, lsr ip
   1443c:	andeq	r4, r1, r0, lsr ip
   14440:	andeq	r4, r1, r0, lsr ip
   14444:	andeq	r4, r1, r0, lsr ip
   14448:	andeq	r4, r1, r0, lsr ip
   1444c:	andeq	r4, r1, r0, lsr ip
   14450:	andeq	r4, r1, r0, lsr ip
   14454:	andeq	r4, r1, r0, lsr ip
   14458:	andeq	r4, r1, r0, lsr ip
   1445c:	andeq	r4, r1, r0, lsr ip
   14460:	andeq	r4, r1, r0, lsr ip
   14464:	andeq	r4, r1, r0, lsr ip
   14468:	andeq	r4, r1, r0, lsr ip
   1446c:	andeq	r4, r1, r0, lsr ip
   14470:	andeq	r4, r1, r0, lsr ip
   14474:	andeq	r4, r1, r0, lsr ip
   14478:	andeq	r4, r1, r0, lsr ip
   1447c:	andeq	r4, r1, r4, lsl fp
   14480:	andeq	r4, r1, ip, lsl fp
   14484:	andeq	r4, r1, ip, lsl fp
   14488:	andeq	r4, r1, r8, lsl #22
   1448c:	andeq	r4, r1, ip, lsl fp
   14490:	andeq	r4, r1, r4, lsr #24
   14494:	andeq	r4, r1, ip, lsl fp
   14498:	andeq	r4, r1, r8, lsr fp
   1449c:	andeq	r4, r1, ip, lsl fp
   144a0:	andeq	r4, r1, ip, lsl fp
   144a4:	andeq	r4, r1, ip, lsl fp
   144a8:	andeq	r4, r1, r4, lsr #24
   144ac:	andeq	r4, r1, r4, lsr #24
   144b0:	andeq	r4, r1, r4, lsr #24
   144b4:	andeq	r4, r1, r4, lsr #24
   144b8:	andeq	r4, r1, r4, lsr #24
   144bc:	andeq	r4, r1, r4, lsr #24
   144c0:	andeq	r4, r1, r4, lsr #24
   144c4:	andeq	r4, r1, r4, lsr #24
   144c8:	andeq	r4, r1, r4, lsr #24
   144cc:	andeq	r4, r1, r4, lsr #24
   144d0:	andeq	r4, r1, r4, lsr #24
   144d4:	andeq	r4, r1, r4, lsr #24
   144d8:	andeq	r4, r1, r4, lsr #24
   144dc:	andeq	r4, r1, r4, lsr #24
   144e0:	andeq	r4, r1, r4, lsr #24
   144e4:	andeq	r4, r1, r4, lsr #24
   144e8:	andeq	r4, r1, ip, lsl fp
   144ec:	andeq	r4, r1, ip, lsl fp
   144f0:	andeq	r4, r1, ip, lsl fp
   144f4:	andeq	r4, r1, ip, lsl fp
   144f8:	ldrdeq	r4, [r1], -r8
   144fc:	andeq	r4, r1, r0, lsr ip
   14500:	andeq	r4, r1, r4, lsr #24
   14504:	andeq	r4, r1, r4, lsr #24
   14508:	andeq	r4, r1, r4, lsr #24
   1450c:	andeq	r4, r1, r4, lsr #24
   14510:	andeq	r4, r1, r4, lsr #24
   14514:	andeq	r4, r1, r4, lsr #24
   14518:	andeq	r4, r1, r4, lsr #24
   1451c:	andeq	r4, r1, r4, lsr #24
   14520:	andeq	r4, r1, r4, lsr #24
   14524:	andeq	r4, r1, r4, lsr #24
   14528:	andeq	r4, r1, r4, lsr #24
   1452c:	andeq	r4, r1, r4, lsr #24
   14530:	andeq	r4, r1, r4, lsr #24
   14534:	andeq	r4, r1, r4, lsr #24
   14538:	andeq	r4, r1, r4, lsr #24
   1453c:	andeq	r4, r1, r4, lsr #24
   14540:	andeq	r4, r1, r4, lsr #24
   14544:	andeq	r4, r1, r4, lsr #24
   14548:	andeq	r4, r1, r4, lsr #24
   1454c:	andeq	r4, r1, r4, lsr #24
   14550:	andeq	r4, r1, r4, lsr #24
   14554:	andeq	r4, r1, r4, lsr #24
   14558:	andeq	r4, r1, r4, lsr #24
   1455c:	andeq	r4, r1, r4, lsr #24
   14560:	andeq	r4, r1, r4, lsr #24
   14564:	andeq	r4, r1, r4, lsr #24
   14568:	andeq	r4, r1, ip, lsl fp
   1456c:	andeq	r4, r1, r0, asr #20
   14570:	andeq	r4, r1, r4, lsr #24
   14574:	andeq	r4, r1, ip, lsl fp
   14578:	andeq	r4, r1, r4, lsr #24
   1457c:	andeq	r4, r1, ip, lsl fp
   14580:	andeq	r4, r1, r4, lsr #24
   14584:	andeq	r4, r1, r4, lsr #24
   14588:	andeq	r4, r1, r4, lsr #24
   1458c:	andeq	r4, r1, r4, lsr #24
   14590:	andeq	r4, r1, r4, lsr #24
   14594:	andeq	r4, r1, r4, lsr #24
   14598:	andeq	r4, r1, r4, lsr #24
   1459c:	andeq	r4, r1, r4, lsr #24
   145a0:	andeq	r4, r1, r4, lsr #24
   145a4:	andeq	r4, r1, r4, lsr #24
   145a8:	andeq	r4, r1, r4, lsr #24
   145ac:	andeq	r4, r1, r4, lsr #24
   145b0:	andeq	r4, r1, r4, lsr #24
   145b4:	andeq	r4, r1, r4, lsr #24
   145b8:	andeq	r4, r1, r4, lsr #24
   145bc:	andeq	r4, r1, r4, lsr #24
   145c0:	andeq	r4, r1, r4, lsr #24
   145c4:	andeq	r4, r1, r4, lsr #24
   145c8:	andeq	r4, r1, r4, lsr #24
   145cc:	andeq	r4, r1, r4, lsr #24
   145d0:	andeq	r4, r1, r4, lsr #24
   145d4:	andeq	r4, r1, r4, lsr #24
   145d8:	andeq	r4, r1, r4, lsr #24
   145dc:	andeq	r4, r1, r4, lsr #24
   145e0:	andeq	r4, r1, r4, lsr #24
   145e4:	andeq	r4, r1, r4, lsr #24
   145e8:	andeq	r4, r1, r0, asr #21
   145ec:	andeq	r4, r1, ip, lsl fp
   145f0:	andeq	r4, r1, r0, asr #21
   145f4:	andeq	r4, r1, r8, lsl #22
   145f8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   145fc:	cmp	r3, #0
   14600:	beq	147c4 <__assert_fail@plt+0x3898>
   14604:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14608:	cmp	r3, #0
   1460c:	bne	15678 <__assert_fail@plt+0x474c>
   14610:	mov	r3, #1
   14614:	strb	r3, [fp, #-41]	; 0xffffffd7
   14618:	ldr	r3, [fp, #4]
   1461c:	cmp	r3, #2
   14620:	bne	146d0 <__assert_fail@plt+0x37a4>
   14624:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14628:	eor	r3, r3, #1
   1462c:	uxtb	r3, r3
   14630:	cmp	r3, #0
   14634:	beq	146d0 <__assert_fail@plt+0x37a4>
   14638:	ldr	r2, [fp, #-20]	; 0xffffffec
   1463c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14640:	cmp	r2, r3
   14644:	bcs	1465c <__assert_fail@plt+0x3730>
   14648:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1464c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14650:	add	r3, r2, r3
   14654:	mov	r2, #39	; 0x27
   14658:	strb	r2, [r3]
   1465c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14660:	add	r3, r3, #1
   14664:	str	r3, [fp, #-20]	; 0xffffffec
   14668:	ldr	r2, [fp, #-20]	; 0xffffffec
   1466c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14670:	cmp	r2, r3
   14674:	bcs	1468c <__assert_fail@plt+0x3760>
   14678:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1467c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14680:	add	r3, r2, r3
   14684:	mov	r2, #36	; 0x24
   14688:	strb	r2, [r3]
   1468c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14690:	add	r3, r3, #1
   14694:	str	r3, [fp, #-20]	; 0xffffffec
   14698:	ldr	r2, [fp, #-20]	; 0xffffffec
   1469c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146a0:	cmp	r2, r3
   146a4:	bcs	146bc <__assert_fail@plt+0x3790>
   146a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   146b0:	add	r3, r2, r3
   146b4:	mov	r2, #39	; 0x27
   146b8:	strb	r2, [r3]
   146bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   146c0:	add	r3, r3, #1
   146c4:	str	r3, [fp, #-20]	; 0xffffffec
   146c8:	mov	r3, #1
   146cc:	strb	r3, [fp, #-35]	; 0xffffffdd
   146d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   146d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146d8:	cmp	r2, r3
   146dc:	bcs	146f4 <__assert_fail@plt+0x37c8>
   146e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   146e8:	add	r3, r2, r3
   146ec:	mov	r2, #92	; 0x5c
   146f0:	strb	r2, [r3]
   146f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   146f8:	add	r3, r3, #1
   146fc:	str	r3, [fp, #-20]	; 0xffffffec
   14700:	ldr	r3, [fp, #4]
   14704:	cmp	r3, #2
   14708:	beq	147b8 <__assert_fail@plt+0x388c>
   1470c:	ldr	r3, [fp, #-16]
   14710:	add	r3, r3, #1
   14714:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14718:	cmp	r2, r3
   1471c:	bls	147b8 <__assert_fail@plt+0x388c>
   14720:	ldr	r3, [fp, #-16]
   14724:	add	r3, r3, #1
   14728:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1472c:	add	r3, r2, r3
   14730:	ldrb	r3, [r3]
   14734:	cmp	r3, #47	; 0x2f
   14738:	bls	147b8 <__assert_fail@plt+0x388c>
   1473c:	ldr	r3, [fp, #-16]
   14740:	add	r3, r3, #1
   14744:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14748:	add	r3, r2, r3
   1474c:	ldrb	r3, [r3]
   14750:	cmp	r3, #57	; 0x39
   14754:	bhi	147b8 <__assert_fail@plt+0x388c>
   14758:	ldr	r2, [fp, #-20]	; 0xffffffec
   1475c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14760:	cmp	r2, r3
   14764:	bcs	1477c <__assert_fail@plt+0x3850>
   14768:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1476c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14770:	add	r3, r2, r3
   14774:	mov	r2, #48	; 0x30
   14778:	strb	r2, [r3]
   1477c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14780:	add	r3, r3, #1
   14784:	str	r3, [fp, #-20]	; 0xffffffec
   14788:	ldr	r2, [fp, #-20]	; 0xffffffec
   1478c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14790:	cmp	r2, r3
   14794:	bcs	147ac <__assert_fail@plt+0x3880>
   14798:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1479c:	ldr	r3, [fp, #-20]	; 0xffffffec
   147a0:	add	r3, r2, r3
   147a4:	mov	r2, #48	; 0x30
   147a8:	strb	r2, [r3]
   147ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   147b0:	add	r3, r3, #1
   147b4:	str	r3, [fp, #-20]	; 0xffffffec
   147b8:	mov	r3, #48	; 0x30
   147bc:	strb	r3, [fp, #-38]	; 0xffffffda
   147c0:	b	15200 <__assert_fail@plt+0x42d4>
   147c4:	ldr	r3, [fp, #8]
   147c8:	and	r3, r3, #1
   147cc:	cmp	r3, #0
   147d0:	beq	15200 <__assert_fail@plt+0x42d4>
   147d4:	b	154a8 <__assert_fail@plt+0x457c>
   147d8:	ldr	r3, [fp, #4]
   147dc:	cmp	r3, #2
   147e0:	beq	147f4 <__assert_fail@plt+0x38c8>
   147e4:	ldr	r3, [fp, #4]
   147e8:	cmp	r3, #5
   147ec:	beq	14804 <__assert_fail@plt+0x38d8>
   147f0:	b	149e8 <__assert_fail@plt+0x3abc>
   147f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147f8:	cmp	r3, #0
   147fc:	beq	149dc <__assert_fail@plt+0x3ab0>
   14800:	b	156ac <__assert_fail@plt+0x4780>
   14804:	ldr	r3, [fp, #8]
   14808:	and	r3, r3, #4
   1480c:	cmp	r3, #0
   14810:	beq	149e4 <__assert_fail@plt+0x3ab8>
   14814:	ldr	r3, [fp, #-16]
   14818:	add	r3, r3, #2
   1481c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14820:	cmp	r2, r3
   14824:	bls	149e4 <__assert_fail@plt+0x3ab8>
   14828:	ldr	r3, [fp, #-16]
   1482c:	add	r3, r3, #1
   14830:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14834:	add	r3, r2, r3
   14838:	ldrb	r3, [r3]
   1483c:	cmp	r3, #63	; 0x3f
   14840:	bne	149e4 <__assert_fail@plt+0x3ab8>
   14844:	ldr	r3, [fp, #-16]
   14848:	add	r3, r3, #2
   1484c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14850:	add	r3, r2, r3
   14854:	ldrb	r3, [r3]
   14858:	sub	r3, r3, #33	; 0x21
   1485c:	cmp	r3, #29
   14860:	ldrls	pc, [pc, r3, lsl #2]
   14864:	b	149d4 <__assert_fail@plt+0x3aa8>
   14868:	andeq	r4, r1, r0, ror #17
   1486c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14870:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14874:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14878:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1487c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14880:	andeq	r4, r1, r0, ror #17
   14884:	andeq	r4, r1, r0, ror #17
   14888:	andeq	r4, r1, r0, ror #17
   1488c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14890:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14894:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14898:	andeq	r4, r1, r0, ror #17
   1489c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148a0:	andeq	r4, r1, r0, ror #17
   148a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148b0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148b4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148bc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148cc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148d4:	andeq	r4, r1, r0, ror #17
   148d8:	andeq	r4, r1, r0, ror #17
   148dc:	andeq	r4, r1, r0, ror #17
   148e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   148e4:	cmp	r3, #0
   148e8:	bne	15680 <__assert_fail@plt+0x4754>
   148ec:	ldr	r3, [fp, #-16]
   148f0:	add	r3, r3, #2
   148f4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   148f8:	add	r3, r2, r3
   148fc:	ldrb	r3, [r3]
   14900:	strb	r3, [fp, #-38]	; 0xffffffda
   14904:	ldr	r3, [fp, #-16]
   14908:	add	r3, r3, #2
   1490c:	str	r3, [fp, #-16]
   14910:	ldr	r2, [fp, #-20]	; 0xffffffec
   14914:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14918:	cmp	r2, r3
   1491c:	bcs	14934 <__assert_fail@plt+0x3a08>
   14920:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14924:	ldr	r3, [fp, #-20]	; 0xffffffec
   14928:	add	r3, r2, r3
   1492c:	mov	r2, #63	; 0x3f
   14930:	strb	r2, [r3]
   14934:	ldr	r3, [fp, #-20]	; 0xffffffec
   14938:	add	r3, r3, #1
   1493c:	str	r3, [fp, #-20]	; 0xffffffec
   14940:	ldr	r2, [fp, #-20]	; 0xffffffec
   14944:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14948:	cmp	r2, r3
   1494c:	bcs	14964 <__assert_fail@plt+0x3a38>
   14950:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14954:	ldr	r3, [fp, #-20]	; 0xffffffec
   14958:	add	r3, r2, r3
   1495c:	mov	r2, #34	; 0x22
   14960:	strb	r2, [r3]
   14964:	ldr	r3, [fp, #-20]	; 0xffffffec
   14968:	add	r3, r3, #1
   1496c:	str	r3, [fp, #-20]	; 0xffffffec
   14970:	ldr	r2, [fp, #-20]	; 0xffffffec
   14974:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14978:	cmp	r2, r3
   1497c:	bcs	14994 <__assert_fail@plt+0x3a68>
   14980:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14984:	ldr	r3, [fp, #-20]	; 0xffffffec
   14988:	add	r3, r2, r3
   1498c:	mov	r2, #34	; 0x22
   14990:	strb	r2, [r3]
   14994:	ldr	r3, [fp, #-20]	; 0xffffffec
   14998:	add	r3, r3, #1
   1499c:	str	r3, [fp, #-20]	; 0xffffffec
   149a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   149a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   149a8:	cmp	r2, r3
   149ac:	bcs	149c4 <__assert_fail@plt+0x3a98>
   149b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   149b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   149b8:	add	r3, r2, r3
   149bc:	mov	r2, #63	; 0x3f
   149c0:	strb	r2, [r3]
   149c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   149c8:	add	r3, r3, #1
   149cc:	str	r3, [fp, #-20]	; 0xffffffec
   149d0:	b	149d8 <__assert_fail@plt+0x3aac>
   149d4:	nop	{0}
   149d8:	b	149e4 <__assert_fail@plt+0x3ab8>
   149dc:	nop	{0}
   149e0:	b	15234 <__assert_fail@plt+0x4308>
   149e4:	nop	{0}
   149e8:	b	15234 <__assert_fail@plt+0x4308>
   149ec:	mov	r3, #97	; 0x61
   149f0:	strb	r3, [fp, #-39]	; 0xffffffd9
   149f4:	b	14aa8 <__assert_fail@plt+0x3b7c>
   149f8:	mov	r3, #98	; 0x62
   149fc:	strb	r3, [fp, #-39]	; 0xffffffd9
   14a00:	b	14aa8 <__assert_fail@plt+0x3b7c>
   14a04:	mov	r3, #102	; 0x66
   14a08:	strb	r3, [fp, #-39]	; 0xffffffd9
   14a0c:	b	14aa8 <__assert_fail@plt+0x3b7c>
   14a10:	mov	r3, #110	; 0x6e
   14a14:	strb	r3, [fp, #-39]	; 0xffffffd9
   14a18:	b	14a8c <__assert_fail@plt+0x3b60>
   14a1c:	mov	r3, #114	; 0x72
   14a20:	strb	r3, [fp, #-39]	; 0xffffffd9
   14a24:	b	14a8c <__assert_fail@plt+0x3b60>
   14a28:	mov	r3, #116	; 0x74
   14a2c:	strb	r3, [fp, #-39]	; 0xffffffd9
   14a30:	b	14a8c <__assert_fail@plt+0x3b60>
   14a34:	mov	r3, #118	; 0x76
   14a38:	strb	r3, [fp, #-39]	; 0xffffffd9
   14a3c:	b	14aa8 <__assert_fail@plt+0x3b7c>
   14a40:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14a44:	strb	r3, [fp, #-39]	; 0xffffffd9
   14a48:	ldr	r3, [fp, #4]
   14a4c:	cmp	r3, #2
   14a50:	bne	14a64 <__assert_fail@plt+0x3b38>
   14a54:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14a58:	cmp	r3, #0
   14a5c:	beq	153c0 <__assert_fail@plt+0x4494>
   14a60:	b	156ac <__assert_fail@plt+0x4780>
   14a64:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14a68:	cmp	r3, #0
   14a6c:	beq	14a88 <__assert_fail@plt+0x3b5c>
   14a70:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14a74:	cmp	r3, #0
   14a78:	beq	14a88 <__assert_fail@plt+0x3b5c>
   14a7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14a80:	cmp	r3, #0
   14a84:	bne	153c8 <__assert_fail@plt+0x449c>
   14a88:	nop	{0}
   14a8c:	ldr	r3, [fp, #4]
   14a90:	cmp	r3, #2
   14a94:	bne	14aa4 <__assert_fail@plt+0x3b78>
   14a98:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14a9c:	cmp	r3, #0
   14aa0:	bne	15688 <__assert_fail@plt+0x475c>
   14aa4:	nop	{0}
   14aa8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14aac:	cmp	r3, #0
   14ab0:	beq	15208 <__assert_fail@plt+0x42dc>
   14ab4:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   14ab8:	strb	r3, [fp, #-38]	; 0xffffffda
   14abc:	b	152c0 <__assert_fail@plt+0x4394>
   14ac0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14ac4:	cmn	r3, #1
   14ac8:	bne	14aec <__assert_fail@plt+0x3bc0>
   14acc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14ad0:	add	r3, r3, #1
   14ad4:	ldrb	r3, [r3]
   14ad8:	cmp	r3, #0
   14adc:	movne	r3, #1
   14ae0:	moveq	r3, #0
   14ae4:	uxtb	r3, r3
   14ae8:	b	14b00 <__assert_fail@plt+0x3bd4>
   14aec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14af0:	cmp	r3, #1
   14af4:	movne	r3, #1
   14af8:	moveq	r3, #0
   14afc:	uxtb	r3, r3
   14b00:	cmp	r3, #0
   14b04:	bne	15210 <__assert_fail@plt+0x42e4>
   14b08:	ldr	r3, [fp, #-16]
   14b0c:	cmp	r3, #0
   14b10:	bne	15218 <__assert_fail@plt+0x42ec>
   14b14:	mov	r3, #1
   14b18:	strb	r3, [fp, #-42]	; 0xffffffd6
   14b1c:	ldr	r3, [fp, #4]
   14b20:	cmp	r3, #2
   14b24:	bne	15220 <__assert_fail@plt+0x42f4>
   14b28:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14b2c:	cmp	r3, #0
   14b30:	beq	15220 <__assert_fail@plt+0x42f4>
   14b34:	b	156ac <__assert_fail@plt+0x4780>
   14b38:	mov	r3, #1
   14b3c:	strb	r3, [fp, #-36]	; 0xffffffdc
   14b40:	mov	r3, #1
   14b44:	strb	r3, [fp, #-42]	; 0xffffffd6
   14b48:	ldr	r3, [fp, #4]
   14b4c:	cmp	r3, #2
   14b50:	bne	15228 <__assert_fail@plt+0x42fc>
   14b54:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14b58:	cmp	r3, #0
   14b5c:	bne	15690 <__assert_fail@plt+0x4764>
   14b60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b64:	cmp	r3, #0
   14b68:	beq	14b88 <__assert_fail@plt+0x3c5c>
   14b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b70:	cmp	r3, #0
   14b74:	bne	14b88 <__assert_fail@plt+0x3c5c>
   14b78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b7c:	str	r3, [fp, #-24]	; 0xffffffe8
   14b80:	mov	r3, #0
   14b84:	str	r3, [fp, #-92]	; 0xffffffa4
   14b88:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b90:	cmp	r2, r3
   14b94:	bcs	14bac <__assert_fail@plt+0x3c80>
   14b98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ba0:	add	r3, r2, r3
   14ba4:	mov	r2, #39	; 0x27
   14ba8:	strb	r2, [r3]
   14bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bb0:	add	r3, r3, #1
   14bb4:	str	r3, [fp, #-20]	; 0xffffffec
   14bb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14bbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14bc0:	cmp	r2, r3
   14bc4:	bcs	14bdc <__assert_fail@plt+0x3cb0>
   14bc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14bcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bd0:	add	r3, r2, r3
   14bd4:	mov	r2, #92	; 0x5c
   14bd8:	strb	r2, [r3]
   14bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14be0:	add	r3, r3, #1
   14be4:	str	r3, [fp, #-20]	; 0xffffffec
   14be8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14bec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14bf0:	cmp	r2, r3
   14bf4:	bcs	14c0c <__assert_fail@plt+0x3ce0>
   14bf8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c00:	add	r3, r2, r3
   14c04:	mov	r2, #39	; 0x27
   14c08:	strb	r2, [r3]
   14c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c10:	add	r3, r3, #1
   14c14:	str	r3, [fp, #-20]	; 0xffffffec
   14c18:	mov	r3, #0
   14c1c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14c20:	b	15228 <__assert_fail@plt+0x42fc>
   14c24:	mov	r3, #1
   14c28:	strb	r3, [fp, #-42]	; 0xffffffd6
   14c2c:	b	15234 <__assert_fail@plt+0x4308>
   14c30:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   14c34:	cmp	r3, #0
   14c38:	beq	14c78 <__assert_fail@plt+0x3d4c>
   14c3c:	mov	r3, #1
   14c40:	str	r3, [fp, #-48]	; 0xffffffd0
   14c44:	bl	10e24 <__ctype_b_loc@plt>
   14c48:	mov	r3, r0
   14c4c:	ldr	r2, [r3]
   14c50:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14c54:	lsl	r3, r3, #1
   14c58:	add	r3, r2, r3
   14c5c:	ldrh	r3, [r3]
   14c60:	and	r3, r3, #16384	; 0x4000
   14c64:	cmp	r3, #0
   14c68:	movne	r3, #1
   14c6c:	moveq	r3, #0
   14c70:	strb	r3, [fp, #-49]	; 0xffffffcf
   14c74:	b	14ec4 <__assert_fail@plt+0x3f98>
   14c78:	sub	r3, fp, #76	; 0x4c
   14c7c:	mov	r2, #8
   14c80:	mov	r1, #0
   14c84:	mov	r0, r3
   14c88:	bl	10e84 <memset@plt>
   14c8c:	mov	r3, #0
   14c90:	str	r3, [fp, #-48]	; 0xffffffd0
   14c94:	mov	r3, #1
   14c98:	strb	r3, [fp, #-49]	; 0xffffffcf
   14c9c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14ca0:	cmn	r3, #1
   14ca4:	bne	14cb4 <__assert_fail@plt+0x3d88>
   14ca8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14cac:	bl	10e48 <strlen@plt>
   14cb0:	str	r0, [fp, #-100]	; 0xffffff9c
   14cb4:	ldr	r2, [fp, #-16]
   14cb8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14cbc:	add	r3, r2, r3
   14cc0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14cc4:	add	r1, r2, r3
   14cc8:	ldr	r2, [fp, #-16]
   14ccc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14cd0:	add	r3, r2, r3
   14cd4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14cd8:	sub	r2, r2, r3
   14cdc:	sub	r3, fp, #76	; 0x4c
   14ce0:	sub	r0, fp, #80	; 0x50
   14ce4:	bl	1864c <__assert_fail@plt+0x7720>
   14ce8:	str	r0, [fp, #-64]	; 0xffffffc0
   14cec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14cf0:	cmp	r3, #0
   14cf4:	beq	14eb8 <__assert_fail@plt+0x3f8c>
   14cf8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14cfc:	cmn	r3, #1
   14d00:	bne	14d10 <__assert_fail@plt+0x3de4>
   14d04:	mov	r3, #0
   14d08:	strb	r3, [fp, #-49]	; 0xffffffcf
   14d0c:	b	14ec4 <__assert_fail@plt+0x3f98>
   14d10:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14d14:	cmn	r3, #2
   14d18:	bne	14d70 <__assert_fail@plt+0x3e44>
   14d1c:	mov	r3, #0
   14d20:	strb	r3, [fp, #-49]	; 0xffffffcf
   14d24:	b	14d34 <__assert_fail@plt+0x3e08>
   14d28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d2c:	add	r3, r3, #1
   14d30:	str	r3, [fp, #-48]	; 0xffffffd0
   14d34:	ldr	r2, [fp, #-16]
   14d38:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d3c:	add	r3, r2, r3
   14d40:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14d44:	cmp	r2, r3
   14d48:	bls	14ec0 <__assert_fail@plt+0x3f94>
   14d4c:	ldr	r2, [fp, #-16]
   14d50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d54:	add	r3, r2, r3
   14d58:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14d5c:	add	r3, r2, r3
   14d60:	ldrb	r3, [r3]
   14d64:	cmp	r3, #0
   14d68:	bne	14d28 <__assert_fail@plt+0x3dfc>
   14d6c:	b	14ec0 <__assert_fail@plt+0x3f94>
   14d70:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14d74:	cmp	r3, #0
   14d78:	beq	14e6c <__assert_fail@plt+0x3f40>
   14d7c:	ldr	r3, [fp, #4]
   14d80:	cmp	r3, #2
   14d84:	bne	14e6c <__assert_fail@plt+0x3f40>
   14d88:	mov	r3, #1
   14d8c:	str	r3, [fp, #-56]	; 0xffffffc8
   14d90:	b	14e5c <__assert_fail@plt+0x3f30>
   14d94:	ldr	r2, [fp, #-16]
   14d98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d9c:	add	r2, r2, r3
   14da0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14da4:	add	r3, r2, r3
   14da8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14dac:	add	r3, r2, r3
   14db0:	ldrb	r3, [r3]
   14db4:	sub	r3, r3, #91	; 0x5b
   14db8:	cmp	r3, #33	; 0x21
   14dbc:	ldrls	pc, [pc, r3, lsl #2]
   14dc0:	b	14e4c <__assert_fail@plt+0x3f20>
   14dc4:	andeq	r5, r1, ip, lsr #13
   14dc8:	andeq	r5, r1, ip, lsr #13
   14dcc:	andeq	r4, r1, ip, asr #28
   14dd0:	andeq	r5, r1, ip, lsr #13
   14dd4:	andeq	r4, r1, ip, asr #28
   14dd8:	andeq	r5, r1, ip, lsr #13
   14ddc:	andeq	r4, r1, ip, asr #28
   14de0:	andeq	r4, r1, ip, asr #28
   14de4:	andeq	r4, r1, ip, asr #28
   14de8:	andeq	r4, r1, ip, asr #28
   14dec:	andeq	r4, r1, ip, asr #28
   14df0:	andeq	r4, r1, ip, asr #28
   14df4:	andeq	r4, r1, ip, asr #28
   14df8:	andeq	r4, r1, ip, asr #28
   14dfc:	andeq	r4, r1, ip, asr #28
   14e00:	andeq	r4, r1, ip, asr #28
   14e04:	andeq	r4, r1, ip, asr #28
   14e08:	andeq	r4, r1, ip, asr #28
   14e0c:	andeq	r4, r1, ip, asr #28
   14e10:	andeq	r4, r1, ip, asr #28
   14e14:	andeq	r4, r1, ip, asr #28
   14e18:	andeq	r4, r1, ip, asr #28
   14e1c:	andeq	r4, r1, ip, asr #28
   14e20:	andeq	r4, r1, ip, asr #28
   14e24:	andeq	r4, r1, ip, asr #28
   14e28:	andeq	r4, r1, ip, asr #28
   14e2c:	andeq	r4, r1, ip, asr #28
   14e30:	andeq	r4, r1, ip, asr #28
   14e34:	andeq	r4, r1, ip, asr #28
   14e38:	andeq	r4, r1, ip, asr #28
   14e3c:	andeq	r4, r1, ip, asr #28
   14e40:	andeq	r4, r1, ip, asr #28
   14e44:	andeq	r4, r1, ip, asr #28
   14e48:	andeq	r5, r1, ip, lsr #13
   14e4c:	nop	{0}
   14e50:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14e54:	add	r3, r3, #1
   14e58:	str	r3, [fp, #-56]	; 0xffffffc8
   14e5c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14e60:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14e64:	cmp	r2, r3
   14e68:	bcc	14d94 <__assert_fail@plt+0x3e68>
   14e6c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14e70:	mov	r0, r3
   14e74:	bl	10d88 <iswprint@plt>
   14e78:	mov	r3, r0
   14e7c:	cmp	r3, #0
   14e80:	bne	14e8c <__assert_fail@plt+0x3f60>
   14e84:	mov	r3, #0
   14e88:	strb	r3, [fp, #-49]	; 0xffffffcf
   14e8c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14e90:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14e94:	add	r3, r2, r3
   14e98:	str	r3, [fp, #-48]	; 0xffffffd0
   14e9c:	sub	r3, fp, #76	; 0x4c
   14ea0:	mov	r0, r3
   14ea4:	bl	10d34 <mbsinit@plt>
   14ea8:	mov	r3, r0
   14eac:	cmp	r3, #0
   14eb0:	beq	14cb4 <__assert_fail@plt+0x3d88>
   14eb4:	b	14ec4 <__assert_fail@plt+0x3f98>
   14eb8:	nop	{0}
   14ebc:	b	14ec4 <__assert_fail@plt+0x3f98>
   14ec0:	nop	{0}
   14ec4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14ec8:	strb	r3, [fp, #-42]	; 0xffffffd6
   14ecc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14ed0:	cmp	r3, #1
   14ed4:	bhi	14ef8 <__assert_fail@plt+0x3fcc>
   14ed8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14edc:	cmp	r3, #0
   14ee0:	beq	15230 <__assert_fail@plt+0x4304>
   14ee4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14ee8:	eor	r3, r3, #1
   14eec:	uxtb	r3, r3
   14ef0:	cmp	r3, #0
   14ef4:	beq	15230 <__assert_fail@plt+0x4304>
   14ef8:	ldr	r2, [fp, #-16]
   14efc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14f00:	add	r3, r2, r3
   14f04:	str	r3, [fp, #-68]	; 0xffffffbc
   14f08:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14f0c:	cmp	r3, #0
   14f10:	beq	150c4 <__assert_fail@plt+0x4198>
   14f14:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14f18:	eor	r3, r3, #1
   14f1c:	uxtb	r3, r3
   14f20:	cmp	r3, #0
   14f24:	beq	150c4 <__assert_fail@plt+0x4198>
   14f28:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14f2c:	cmp	r3, #0
   14f30:	bne	15698 <__assert_fail@plt+0x476c>
   14f34:	mov	r3, #1
   14f38:	strb	r3, [fp, #-41]	; 0xffffffd7
   14f3c:	ldr	r3, [fp, #4]
   14f40:	cmp	r3, #2
   14f44:	bne	14ff4 <__assert_fail@plt+0x40c8>
   14f48:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14f4c:	eor	r3, r3, #1
   14f50:	uxtb	r3, r3
   14f54:	cmp	r3, #0
   14f58:	beq	14ff4 <__assert_fail@plt+0x40c8>
   14f5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f64:	cmp	r2, r3
   14f68:	bcs	14f80 <__assert_fail@plt+0x4054>
   14f6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f70:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f74:	add	r3, r2, r3
   14f78:	mov	r2, #39	; 0x27
   14f7c:	strb	r2, [r3]
   14f80:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f84:	add	r3, r3, #1
   14f88:	str	r3, [fp, #-20]	; 0xffffffec
   14f8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f94:	cmp	r2, r3
   14f98:	bcs	14fb0 <__assert_fail@plt+0x4084>
   14f9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14fa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fa4:	add	r3, r2, r3
   14fa8:	mov	r2, #36	; 0x24
   14fac:	strb	r2, [r3]
   14fb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fb4:	add	r3, r3, #1
   14fb8:	str	r3, [fp, #-20]	; 0xffffffec
   14fbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14fc0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14fc4:	cmp	r2, r3
   14fc8:	bcs	14fe0 <__assert_fail@plt+0x40b4>
   14fcc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fd4:	add	r3, r2, r3
   14fd8:	mov	r2, #39	; 0x27
   14fdc:	strb	r2, [r3]
   14fe0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fe4:	add	r3, r3, #1
   14fe8:	str	r3, [fp, #-20]	; 0xffffffec
   14fec:	mov	r3, #1
   14ff0:	strb	r3, [fp, #-35]	; 0xffffffdd
   14ff4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ff8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ffc:	cmp	r2, r3
   15000:	bcs	15018 <__assert_fail@plt+0x40ec>
   15004:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15008:	ldr	r3, [fp, #-20]	; 0xffffffec
   1500c:	add	r3, r2, r3
   15010:	mov	r2, #92	; 0x5c
   15014:	strb	r2, [r3]
   15018:	ldr	r3, [fp, #-20]	; 0xffffffec
   1501c:	add	r3, r3, #1
   15020:	str	r3, [fp, #-20]	; 0xffffffec
   15024:	ldr	r2, [fp, #-20]	; 0xffffffec
   15028:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1502c:	cmp	r2, r3
   15030:	bcs	15058 <__assert_fail@plt+0x412c>
   15034:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15038:	lsr	r3, r3, #6
   1503c:	uxtb	r2, r3
   15040:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15044:	ldr	r3, [fp, #-20]	; 0xffffffec
   15048:	add	r3, r1, r3
   1504c:	add	r2, r2, #48	; 0x30
   15050:	uxtb	r2, r2
   15054:	strb	r2, [r3]
   15058:	ldr	r3, [fp, #-20]	; 0xffffffec
   1505c:	add	r3, r3, #1
   15060:	str	r3, [fp, #-20]	; 0xffffffec
   15064:	ldr	r2, [fp, #-20]	; 0xffffffec
   15068:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1506c:	cmp	r2, r3
   15070:	bcs	150a0 <__assert_fail@plt+0x4174>
   15074:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15078:	lsr	r3, r3, #3
   1507c:	uxtb	r3, r3
   15080:	and	r3, r3, #7
   15084:	uxtb	r2, r3
   15088:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1508c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15090:	add	r3, r1, r3
   15094:	add	r2, r2, #48	; 0x30
   15098:	uxtb	r2, r2
   1509c:	strb	r2, [r3]
   150a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   150a4:	add	r3, r3, #1
   150a8:	str	r3, [fp, #-20]	; 0xffffffec
   150ac:	ldrb	r3, [fp, #-38]	; 0xffffffda
   150b0:	and	r3, r3, #7
   150b4:	uxtb	r3, r3
   150b8:	add	r3, r3, #48	; 0x30
   150bc:	strb	r3, [fp, #-38]	; 0xffffffda
   150c0:	b	15108 <__assert_fail@plt+0x41dc>
   150c4:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   150c8:	cmp	r3, #0
   150cc:	beq	15108 <__assert_fail@plt+0x41dc>
   150d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   150d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   150d8:	cmp	r2, r3
   150dc:	bcs	150f4 <__assert_fail@plt+0x41c8>
   150e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   150e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150e8:	add	r3, r2, r3
   150ec:	mov	r2, #92	; 0x5c
   150f0:	strb	r2, [r3]
   150f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150f8:	add	r3, r3, #1
   150fc:	str	r3, [fp, #-20]	; 0xffffffec
   15100:	mov	r3, #0
   15104:	strb	r3, [fp, #-40]	; 0xffffffd8
   15108:	ldr	r3, [fp, #-16]
   1510c:	add	r3, r3, #1
   15110:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15114:	cmp	r2, r3
   15118:	bls	151f8 <__assert_fail@plt+0x42cc>
   1511c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15120:	cmp	r3, #0
   15124:	beq	151a4 <__assert_fail@plt+0x4278>
   15128:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1512c:	eor	r3, r3, #1
   15130:	uxtb	r3, r3
   15134:	cmp	r3, #0
   15138:	beq	151a4 <__assert_fail@plt+0x4278>
   1513c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15140:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15144:	cmp	r2, r3
   15148:	bcs	15160 <__assert_fail@plt+0x4234>
   1514c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15150:	ldr	r3, [fp, #-20]	; 0xffffffec
   15154:	add	r3, r2, r3
   15158:	mov	r2, #39	; 0x27
   1515c:	strb	r2, [r3]
   15160:	ldr	r3, [fp, #-20]	; 0xffffffec
   15164:	add	r3, r3, #1
   15168:	str	r3, [fp, #-20]	; 0xffffffec
   1516c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15170:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15174:	cmp	r2, r3
   15178:	bcs	15190 <__assert_fail@plt+0x4264>
   1517c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15180:	ldr	r3, [fp, #-20]	; 0xffffffec
   15184:	add	r3, r2, r3
   15188:	mov	r2, #39	; 0x27
   1518c:	strb	r2, [r3]
   15190:	ldr	r3, [fp, #-20]	; 0xffffffec
   15194:	add	r3, r3, #1
   15198:	str	r3, [fp, #-20]	; 0xffffffec
   1519c:	mov	r3, #0
   151a0:	strb	r3, [fp, #-35]	; 0xffffffdd
   151a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   151a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   151ac:	cmp	r2, r3
   151b0:	bcs	151c8 <__assert_fail@plt+0x429c>
   151b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   151b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   151bc:	add	r3, r2, r3
   151c0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   151c4:	strb	r2, [r3]
   151c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   151cc:	add	r3, r3, #1
   151d0:	str	r3, [fp, #-20]	; 0xffffffec
   151d4:	ldr	r3, [fp, #-16]
   151d8:	add	r3, r3, #1
   151dc:	str	r3, [fp, #-16]
   151e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   151e4:	ldr	r3, [fp, #-16]
   151e8:	add	r3, r2, r3
   151ec:	ldrb	r3, [r3]
   151f0:	strb	r3, [fp, #-38]	; 0xffffffda
   151f4:	b	14f08 <__assert_fail@plt+0x3fdc>
   151f8:	nop	{0}
   151fc:	b	153d4 <__assert_fail@plt+0x44a8>
   15200:	nop	{0}
   15204:	b	15234 <__assert_fail@plt+0x4308>
   15208:	nop	{0}
   1520c:	b	15234 <__assert_fail@plt+0x4308>
   15210:	nop	{0}
   15214:	b	15234 <__assert_fail@plt+0x4308>
   15218:	nop	{0}
   1521c:	b	15234 <__assert_fail@plt+0x4308>
   15220:	nop	{0}
   15224:	b	15234 <__assert_fail@plt+0x4308>
   15228:	nop	{0}
   1522c:	b	15234 <__assert_fail@plt+0x4308>
   15230:	nop	{0}
   15234:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15238:	eor	r3, r3, #1
   1523c:	uxtb	r3, r3
   15240:	cmp	r3, #0
   15244:	bne	15254 <__assert_fail@plt+0x4328>
   15248:	ldr	r3, [fp, #4]
   1524c:	cmp	r3, #2
   15250:	bne	15268 <__assert_fail@plt+0x433c>
   15254:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15258:	eor	r3, r3, #1
   1525c:	uxtb	r3, r3
   15260:	cmp	r3, #0
   15264:	bne	152a8 <__assert_fail@plt+0x437c>
   15268:	ldr	r3, [fp, #12]
   1526c:	cmp	r3, #0
   15270:	beq	152a8 <__assert_fail@plt+0x437c>
   15274:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15278:	lsr	r3, r3, #5
   1527c:	uxtb	r3, r3
   15280:	lsl	r3, r3, #2
   15284:	ldr	r2, [fp, #12]
   15288:	add	r3, r2, r3
   1528c:	ldr	r2, [r3]
   15290:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15294:	and	r3, r3, #31
   15298:	lsr	r3, r2, r3
   1529c:	and	r3, r3, #1
   152a0:	cmp	r3, #0
   152a4:	bne	152bc <__assert_fail@plt+0x4390>
   152a8:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   152ac:	eor	r3, r3, #1
   152b0:	uxtb	r3, r3
   152b4:	cmp	r3, #0
   152b8:	bne	153d0 <__assert_fail@plt+0x44a4>
   152bc:	nop	{0}
   152c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   152c4:	cmp	r3, #0
   152c8:	bne	156a0 <__assert_fail@plt+0x4774>
   152cc:	mov	r3, #1
   152d0:	strb	r3, [fp, #-41]	; 0xffffffd7
   152d4:	ldr	r3, [fp, #4]
   152d8:	cmp	r3, #2
   152dc:	bne	1538c <__assert_fail@plt+0x4460>
   152e0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   152e4:	eor	r3, r3, #1
   152e8:	uxtb	r3, r3
   152ec:	cmp	r3, #0
   152f0:	beq	1538c <__assert_fail@plt+0x4460>
   152f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   152f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152fc:	cmp	r2, r3
   15300:	bcs	15318 <__assert_fail@plt+0x43ec>
   15304:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15308:	ldr	r3, [fp, #-20]	; 0xffffffec
   1530c:	add	r3, r2, r3
   15310:	mov	r2, #39	; 0x27
   15314:	strb	r2, [r3]
   15318:	ldr	r3, [fp, #-20]	; 0xffffffec
   1531c:	add	r3, r3, #1
   15320:	str	r3, [fp, #-20]	; 0xffffffec
   15324:	ldr	r2, [fp, #-20]	; 0xffffffec
   15328:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1532c:	cmp	r2, r3
   15330:	bcs	15348 <__assert_fail@plt+0x441c>
   15334:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1533c:	add	r3, r2, r3
   15340:	mov	r2, #36	; 0x24
   15344:	strb	r2, [r3]
   15348:	ldr	r3, [fp, #-20]	; 0xffffffec
   1534c:	add	r3, r3, #1
   15350:	str	r3, [fp, #-20]	; 0xffffffec
   15354:	ldr	r2, [fp, #-20]	; 0xffffffec
   15358:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1535c:	cmp	r2, r3
   15360:	bcs	15378 <__assert_fail@plt+0x444c>
   15364:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15368:	ldr	r3, [fp, #-20]	; 0xffffffec
   1536c:	add	r3, r2, r3
   15370:	mov	r2, #39	; 0x27
   15374:	strb	r2, [r3]
   15378:	ldr	r3, [fp, #-20]	; 0xffffffec
   1537c:	add	r3, r3, #1
   15380:	str	r3, [fp, #-20]	; 0xffffffec
   15384:	mov	r3, #1
   15388:	strb	r3, [fp, #-35]	; 0xffffffdd
   1538c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15390:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15394:	cmp	r2, r3
   15398:	bcs	153b0 <__assert_fail@plt+0x4484>
   1539c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   153a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   153a4:	add	r3, r2, r3
   153a8:	mov	r2, #92	; 0x5c
   153ac:	strb	r2, [r3]
   153b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   153b4:	add	r3, r3, #1
   153b8:	str	r3, [fp, #-20]	; 0xffffffec
   153bc:	b	153d4 <__assert_fail@plt+0x44a8>
   153c0:	nop	{0}
   153c4:	b	153d4 <__assert_fail@plt+0x44a8>
   153c8:	nop	{0}
   153cc:	b	153d4 <__assert_fail@plt+0x44a8>
   153d0:	nop	{0}
   153d4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   153d8:	cmp	r3, #0
   153dc:	beq	1545c <__assert_fail@plt+0x4530>
   153e0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   153e4:	eor	r3, r3, #1
   153e8:	uxtb	r3, r3
   153ec:	cmp	r3, #0
   153f0:	beq	1545c <__assert_fail@plt+0x4530>
   153f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   153f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   153fc:	cmp	r2, r3
   15400:	bcs	15418 <__assert_fail@plt+0x44ec>
   15404:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15408:	ldr	r3, [fp, #-20]	; 0xffffffec
   1540c:	add	r3, r2, r3
   15410:	mov	r2, #39	; 0x27
   15414:	strb	r2, [r3]
   15418:	ldr	r3, [fp, #-20]	; 0xffffffec
   1541c:	add	r3, r3, #1
   15420:	str	r3, [fp, #-20]	; 0xffffffec
   15424:	ldr	r2, [fp, #-20]	; 0xffffffec
   15428:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1542c:	cmp	r2, r3
   15430:	bcs	15448 <__assert_fail@plt+0x451c>
   15434:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15438:	ldr	r3, [fp, #-20]	; 0xffffffec
   1543c:	add	r3, r2, r3
   15440:	mov	r2, #39	; 0x27
   15444:	strb	r2, [r3]
   15448:	ldr	r3, [fp, #-20]	; 0xffffffec
   1544c:	add	r3, r3, #1
   15450:	str	r3, [fp, #-20]	; 0xffffffec
   15454:	mov	r3, #0
   15458:	strb	r3, [fp, #-35]	; 0xffffffdd
   1545c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15460:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15464:	cmp	r2, r3
   15468:	bcs	15480 <__assert_fail@plt+0x4554>
   1546c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15470:	ldr	r3, [fp, #-20]	; 0xffffffec
   15474:	add	r3, r2, r3
   15478:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1547c:	strb	r2, [r3]
   15480:	ldr	r3, [fp, #-20]	; 0xffffffec
   15484:	add	r3, r3, #1
   15488:	str	r3, [fp, #-20]	; 0xffffffec
   1548c:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   15490:	eor	r3, r3, #1
   15494:	uxtb	r3, r3
   15498:	cmp	r3, #0
   1549c:	beq	154a8 <__assert_fail@plt+0x457c>
   154a0:	mov	r3, #0
   154a4:	strb	r3, [fp, #-37]	; 0xffffffdb
   154a8:	ldr	r3, [fp, #-16]
   154ac:	add	r3, r3, #1
   154b0:	str	r3, [fp, #-16]
   154b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   154b8:	cmn	r3, #1
   154bc:	bne	154e4 <__assert_fail@plt+0x45b8>
   154c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   154c4:	ldr	r3, [fp, #-16]
   154c8:	add	r3, r2, r3
   154cc:	ldrb	r3, [r3]
   154d0:	cmp	r3, #0
   154d4:	movne	r3, #1
   154d8:	moveq	r3, #0
   154dc:	uxtb	r3, r3
   154e0:	b	154fc <__assert_fail@plt+0x45d0>
   154e4:	ldr	r2, [fp, #-16]
   154e8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   154ec:	cmp	r2, r3
   154f0:	movne	r3, #1
   154f4:	moveq	r3, #0
   154f8:	uxtb	r3, r3
   154fc:	cmp	r3, #0
   15500:	bne	1431c <__assert_fail@plt+0x33f0>
   15504:	ldr	r3, [fp, #-20]	; 0xffffffec
   15508:	cmp	r3, #0
   1550c:	bne	15528 <__assert_fail@plt+0x45fc>
   15510:	ldr	r3, [fp, #4]
   15514:	cmp	r3, #2
   15518:	bne	15528 <__assert_fail@plt+0x45fc>
   1551c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15520:	cmp	r3, #0
   15524:	bne	156a8 <__assert_fail@plt+0x477c>
   15528:	ldr	r3, [fp, #4]
   1552c:	cmp	r3, #2
   15530:	bne	155d0 <__assert_fail@plt+0x46a4>
   15534:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15538:	eor	r3, r3, #1
   1553c:	uxtb	r3, r3
   15540:	cmp	r3, #0
   15544:	beq	155d0 <__assert_fail@plt+0x46a4>
   15548:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   1554c:	cmp	r3, #0
   15550:	beq	155d0 <__assert_fail@plt+0x46a4>
   15554:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15558:	cmp	r3, #0
   1555c:	beq	155a4 <__assert_fail@plt+0x4678>
   15560:	ldr	r3, [fp, #20]
   15564:	str	r3, [sp, #16]
   15568:	ldr	r3, [fp, #16]
   1556c:	str	r3, [sp, #12]
   15570:	ldr	r3, [fp, #12]
   15574:	str	r3, [sp, #8]
   15578:	ldr	r3, [fp, #8]
   1557c:	str	r3, [sp, #4]
   15580:	mov	r3, #5
   15584:	str	r3, [sp]
   15588:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1558c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15590:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15594:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15598:	bl	14054 <__assert_fail@plt+0x3128>
   1559c:	mov	r3, r0
   155a0:	b	15710 <__assert_fail@plt+0x47e4>
   155a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155a8:	cmp	r3, #0
   155ac:	bne	155d0 <__assert_fail@plt+0x46a4>
   155b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155b4:	cmp	r3, #0
   155b8:	beq	155d0 <__assert_fail@plt+0x46a4>
   155bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155c0:	str	r3, [fp, #-92]	; 0xffffffa4
   155c4:	mov	r3, #0
   155c8:	str	r3, [fp, #-20]	; 0xffffffec
   155cc:	b	140e8 <__assert_fail@plt+0x31bc>
   155d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   155d4:	cmp	r3, #0
   155d8:	beq	15644 <__assert_fail@plt+0x4718>
   155dc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   155e0:	eor	r3, r3, #1
   155e4:	uxtb	r3, r3
   155e8:	cmp	r3, #0
   155ec:	beq	15644 <__assert_fail@plt+0x4718>
   155f0:	b	15634 <__assert_fail@plt+0x4708>
   155f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   155f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155fc:	cmp	r2, r3
   15600:	bcs	1561c <__assert_fail@plt+0x46f0>
   15604:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1560c:	add	r3, r2, r3
   15610:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15614:	ldrb	r2, [r2]
   15618:	strb	r2, [r3]
   1561c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15620:	add	r3, r3, #1
   15624:	str	r3, [fp, #-20]	; 0xffffffec
   15628:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1562c:	add	r3, r3, #1
   15630:	str	r3, [fp, #-28]	; 0xffffffe4
   15634:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15638:	ldrb	r3, [r3]
   1563c:	cmp	r3, #0
   15640:	bne	155f4 <__assert_fail@plt+0x46c8>
   15644:	ldr	r2, [fp, #-20]	; 0xffffffec
   15648:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1564c:	cmp	r2, r3
   15650:	bcs	15668 <__assert_fail@plt+0x473c>
   15654:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15658:	ldr	r3, [fp, #-20]	; 0xffffffec
   1565c:	add	r3, r2, r3
   15660:	mov	r2, #0
   15664:	strb	r2, [r3]
   15668:	ldr	r3, [fp, #-20]	; 0xffffffec
   1566c:	b	15710 <__assert_fail@plt+0x47e4>
   15670:	nop	{0}
   15674:	b	156ac <__assert_fail@plt+0x4780>
   15678:	nop	{0}
   1567c:	b	156ac <__assert_fail@plt+0x4780>
   15680:	nop	{0}
   15684:	b	156ac <__assert_fail@plt+0x4780>
   15688:	nop	{0}
   1568c:	b	156ac <__assert_fail@plt+0x4780>
   15690:	nop	{0}
   15694:	b	156ac <__assert_fail@plt+0x4780>
   15698:	nop	{0}
   1569c:	b	156ac <__assert_fail@plt+0x4780>
   156a0:	nop	{0}
   156a4:	b	156ac <__assert_fail@plt+0x4780>
   156a8:	nop	{0}
   156ac:	ldr	r3, [fp, #4]
   156b0:	cmp	r3, #2
   156b4:	bne	156cc <__assert_fail@plt+0x47a0>
   156b8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   156bc:	cmp	r3, #0
   156c0:	beq	156cc <__assert_fail@plt+0x47a0>
   156c4:	mov	r3, #4
   156c8:	str	r3, [fp, #4]
   156cc:	ldr	r3, [fp, #8]
   156d0:	bic	r3, r3, #2
   156d4:	ldr	r2, [fp, #20]
   156d8:	str	r2, [sp, #16]
   156dc:	ldr	r2, [fp, #16]
   156e0:	str	r2, [sp, #12]
   156e4:	mov	r2, #0
   156e8:	str	r2, [sp, #8]
   156ec:	str	r3, [sp, #4]
   156f0:	ldr	r3, [fp, #4]
   156f4:	str	r3, [sp]
   156f8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   156fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15700:	ldr	r1, [fp, #-92]	; 0xffffffa4
   15704:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15708:	bl	14054 <__assert_fail@plt+0x3128>
   1570c:	mov	r3, r0
   15710:	mov	r0, r3
   15714:	sub	sp, fp, #8
   15718:	ldr	r4, [sp]
   1571c:	ldr	fp, [sp, #4]
   15720:	add	sp, sp, #8
   15724:	pop	{pc}		; (ldr pc, [sp], #4)
   15728:	str	fp, [sp, #-8]!
   1572c:	str	lr, [sp, #4]
   15730:	add	fp, sp, #4
   15734:	sub	sp, sp, #56	; 0x38
   15738:	str	r0, [fp, #-24]	; 0xffffffe8
   1573c:	str	r1, [fp, #-28]	; 0xffffffe4
   15740:	str	r2, [fp, #-32]	; 0xffffffe0
   15744:	str	r3, [fp, #-36]	; 0xffffffdc
   15748:	ldr	r3, [fp, #4]
   1574c:	cmp	r3, #0
   15750:	beq	1575c <__assert_fail@plt+0x4830>
   15754:	ldr	r3, [fp, #4]
   15758:	b	15764 <__assert_fail@plt+0x4838>
   1575c:	movw	r3, #8860	; 0x229c
   15760:	movt	r3, #3
   15764:	str	r3, [fp, #-8]
   15768:	bl	10e6c <__errno_location@plt>
   1576c:	mov	r3, r0
   15770:	ldr	r3, [r3]
   15774:	str	r3, [fp, #-12]
   15778:	ldr	r3, [fp, #-8]
   1577c:	ldr	r3, [r3]
   15780:	ldr	r2, [fp, #-8]
   15784:	ldr	r2, [r2, #4]
   15788:	ldr	r1, [fp, #-8]
   1578c:	add	r1, r1, #8
   15790:	ldr	r0, [fp, #-8]
   15794:	ldr	r0, [r0, #40]	; 0x28
   15798:	ldr	ip, [fp, #-8]
   1579c:	ldr	ip, [ip, #44]	; 0x2c
   157a0:	str	ip, [sp, #16]
   157a4:	str	r0, [sp, #12]
   157a8:	str	r1, [sp, #8]
   157ac:	str	r2, [sp, #4]
   157b0:	str	r3, [sp]
   157b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   157b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   157bc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   157c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157c4:	bl	14054 <__assert_fail@plt+0x3128>
   157c8:	str	r0, [fp, #-16]
   157cc:	bl	10e6c <__errno_location@plt>
   157d0:	mov	r2, r0
   157d4:	ldr	r3, [fp, #-12]
   157d8:	str	r3, [r2]
   157dc:	ldr	r3, [fp, #-16]
   157e0:	mov	r0, r3
   157e4:	sub	sp, fp, #4
   157e8:	ldr	fp, [sp]
   157ec:	add	sp, sp, #4
   157f0:	pop	{pc}		; (ldr pc, [sp], #4)
   157f4:	str	fp, [sp, #-8]!
   157f8:	str	lr, [sp, #4]
   157fc:	add	fp, sp, #4
   15800:	sub	sp, sp, #16
   15804:	str	r0, [fp, #-8]
   15808:	str	r1, [fp, #-12]
   1580c:	str	r2, [fp, #-16]
   15810:	ldr	r3, [fp, #-16]
   15814:	mov	r2, #0
   15818:	ldr	r1, [fp, #-12]
   1581c:	ldr	r0, [fp, #-8]
   15820:	bl	1583c <__assert_fail@plt+0x4910>
   15824:	mov	r3, r0
   15828:	mov	r0, r3
   1582c:	sub	sp, fp, #4
   15830:	ldr	fp, [sp]
   15834:	add	sp, sp, #4
   15838:	pop	{pc}		; (ldr pc, [sp], #4)
   1583c:	str	fp, [sp, #-8]!
   15840:	str	lr, [sp, #4]
   15844:	add	fp, sp, #4
   15848:	sub	sp, sp, #64	; 0x40
   1584c:	str	r0, [fp, #-32]	; 0xffffffe0
   15850:	str	r1, [fp, #-36]	; 0xffffffdc
   15854:	str	r2, [fp, #-40]	; 0xffffffd8
   15858:	str	r3, [fp, #-44]	; 0xffffffd4
   1585c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15860:	cmp	r3, #0
   15864:	beq	15870 <__assert_fail@plt+0x4944>
   15868:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1586c:	b	15878 <__assert_fail@plt+0x494c>
   15870:	movw	r3, #8860	; 0x229c
   15874:	movt	r3, #3
   15878:	str	r3, [fp, #-8]
   1587c:	bl	10e6c <__errno_location@plt>
   15880:	mov	r3, r0
   15884:	ldr	r3, [r3]
   15888:	str	r3, [fp, #-12]
   1588c:	ldr	r3, [fp, #-8]
   15890:	ldr	r3, [r3, #4]
   15894:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15898:	cmp	r2, #0
   1589c:	moveq	r2, #1
   158a0:	movne	r2, #0
   158a4:	uxtb	r2, r2
   158a8:	orr	r3, r3, r2
   158ac:	str	r3, [fp, #-16]
   158b0:	ldr	r3, [fp, #-8]
   158b4:	ldr	r3, [r3]
   158b8:	ldr	r2, [fp, #-8]
   158bc:	add	r2, r2, #8
   158c0:	ldr	r1, [fp, #-8]
   158c4:	ldr	r1, [r1, #40]	; 0x28
   158c8:	ldr	r0, [fp, #-8]
   158cc:	ldr	r0, [r0, #44]	; 0x2c
   158d0:	str	r0, [sp, #16]
   158d4:	str	r1, [sp, #12]
   158d8:	str	r2, [sp, #8]
   158dc:	ldr	r2, [fp, #-16]
   158e0:	str	r2, [sp, #4]
   158e4:	str	r3, [sp]
   158e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   158f0:	mov	r1, #0
   158f4:	mov	r0, #0
   158f8:	bl	14054 <__assert_fail@plt+0x3128>
   158fc:	mov	r3, r0
   15900:	add	r3, r3, #1
   15904:	str	r3, [fp, #-20]	; 0xffffffec
   15908:	ldr	r0, [fp, #-20]	; 0xffffffec
   1590c:	bl	16d4c <__assert_fail@plt+0x5e20>
   15910:	mov	r3, r0
   15914:	str	r3, [fp, #-24]	; 0xffffffe8
   15918:	ldr	r3, [fp, #-8]
   1591c:	ldr	r3, [r3]
   15920:	ldr	r2, [fp, #-8]
   15924:	add	r2, r2, #8
   15928:	ldr	r1, [fp, #-8]
   1592c:	ldr	r1, [r1, #40]	; 0x28
   15930:	ldr	r0, [fp, #-8]
   15934:	ldr	r0, [r0, #44]	; 0x2c
   15938:	str	r0, [sp, #16]
   1593c:	str	r1, [sp, #12]
   15940:	str	r2, [sp, #8]
   15944:	ldr	r2, [fp, #-16]
   15948:	str	r2, [sp, #4]
   1594c:	str	r3, [sp]
   15950:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15954:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15958:	ldr	r1, [fp, #-20]	; 0xffffffec
   1595c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15960:	bl	14054 <__assert_fail@plt+0x3128>
   15964:	bl	10e6c <__errno_location@plt>
   15968:	mov	r2, r0
   1596c:	ldr	r3, [fp, #-12]
   15970:	str	r3, [r2]
   15974:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15978:	cmp	r3, #0
   1597c:	beq	15990 <__assert_fail@plt+0x4a64>
   15980:	ldr	r3, [fp, #-20]	; 0xffffffec
   15984:	sub	r2, r3, #1
   15988:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1598c:	str	r2, [r3]
   15990:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15994:	mov	r0, r3
   15998:	sub	sp, fp, #4
   1599c:	ldr	fp, [sp]
   159a0:	add	sp, sp, #4
   159a4:	pop	{pc}		; (ldr pc, [sp], #4)
   159a8:	str	fp, [sp, #-8]!
   159ac:	str	lr, [sp, #4]
   159b0:	add	fp, sp, #4
   159b4:	sub	sp, sp, #8
   159b8:	movw	r3, #41216	; 0xa100
   159bc:	movt	r3, #2
   159c0:	ldr	r3, [r3]
   159c4:	str	r3, [fp, #-12]
   159c8:	mov	r3, #1
   159cc:	str	r3, [fp, #-8]
   159d0:	b	159fc <__assert_fail@plt+0x4ad0>
   159d4:	ldr	r3, [fp, #-8]
   159d8:	lsl	r3, r3, #3
   159dc:	ldr	r2, [fp, #-12]
   159e0:	add	r3, r2, r3
   159e4:	ldr	r3, [r3, #4]
   159e8:	mov	r0, r3
   159ec:	bl	183c4 <__assert_fail@plt+0x7498>
   159f0:	ldr	r3, [fp, #-8]
   159f4:	add	r3, r3, #1
   159f8:	str	r3, [fp, #-8]
   159fc:	movw	r3, #41204	; 0xa0f4
   15a00:	movt	r3, #2
   15a04:	ldr	r3, [r3]
   15a08:	ldr	r2, [fp, #-8]
   15a0c:	cmp	r2, r3
   15a10:	blt	159d4 <__assert_fail@plt+0x4aa8>
   15a14:	ldr	r3, [fp, #-12]
   15a18:	ldr	r2, [r3, #4]
   15a1c:	movw	r3, #8908	; 0x22cc
   15a20:	movt	r3, #3
   15a24:	cmp	r2, r3
   15a28:	beq	15a60 <__assert_fail@plt+0x4b34>
   15a2c:	ldr	r3, [fp, #-12]
   15a30:	ldr	r3, [r3, #4]
   15a34:	mov	r0, r3
   15a38:	bl	183c4 <__assert_fail@plt+0x7498>
   15a3c:	movw	r3, #41208	; 0xa0f8
   15a40:	movt	r3, #2
   15a44:	mov	r2, #256	; 0x100
   15a48:	str	r2, [r3]
   15a4c:	movw	r3, #41208	; 0xa0f8
   15a50:	movt	r3, #2
   15a54:	movw	r2, #8908	; 0x22cc
   15a58:	movt	r2, #3
   15a5c:	str	r2, [r3, #4]
   15a60:	ldr	r2, [fp, #-12]
   15a64:	movw	r3, #41208	; 0xa0f8
   15a68:	movt	r3, #2
   15a6c:	cmp	r2, r3
   15a70:	beq	15a90 <__assert_fail@plt+0x4b64>
   15a74:	ldr	r0, [fp, #-12]
   15a78:	bl	183c4 <__assert_fail@plt+0x7498>
   15a7c:	movw	r3, #41216	; 0xa100
   15a80:	movt	r3, #2
   15a84:	movw	r2, #41208	; 0xa0f8
   15a88:	movt	r2, #2
   15a8c:	str	r2, [r3]
   15a90:	movw	r3, #41204	; 0xa0f4
   15a94:	movt	r3, #2
   15a98:	mov	r2, #1
   15a9c:	str	r2, [r3]
   15aa0:	nop	{0}
   15aa4:	sub	sp, fp, #4
   15aa8:	ldr	fp, [sp]
   15aac:	add	sp, sp, #4
   15ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab4:	str	fp, [sp, #-8]!
   15ab8:	str	lr, [sp, #4]
   15abc:	add	fp, sp, #4
   15ac0:	sub	sp, sp, #80	; 0x50
   15ac4:	str	r0, [fp, #-48]	; 0xffffffd0
   15ac8:	str	r1, [fp, #-52]	; 0xffffffcc
   15acc:	str	r2, [fp, #-56]	; 0xffffffc8
   15ad0:	str	r3, [fp, #-60]	; 0xffffffc4
   15ad4:	bl	10e6c <__errno_location@plt>
   15ad8:	mov	r3, r0
   15adc:	ldr	r3, [r3]
   15ae0:	str	r3, [fp, #-16]
   15ae4:	movw	r3, #41216	; 0xa100
   15ae8:	movt	r3, #2
   15aec:	ldr	r3, [r3]
   15af0:	str	r3, [fp, #-8]
   15af4:	mvn	r3, #-2147483648	; 0x80000000
   15af8:	str	r3, [fp, #-20]	; 0xffffffec
   15afc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15b00:	cmp	r3, #0
   15b04:	blt	15b18 <__assert_fail@plt+0x4bec>
   15b08:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15b0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b10:	cmp	r2, r3
   15b14:	blt	15b1c <__assert_fail@plt+0x4bf0>
   15b18:	bl	10f14 <abort@plt>
   15b1c:	movw	r3, #41204	; 0xa0f4
   15b20:	movt	r3, #2
   15b24:	ldr	r3, [r3]
   15b28:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15b2c:	cmp	r2, r3
   15b30:	blt	15c28 <__assert_fail@plt+0x4cfc>
   15b34:	ldr	r2, [fp, #-8]
   15b38:	movw	r3, #41208	; 0xa0f8
   15b3c:	movt	r3, #2
   15b40:	cmp	r2, r3
   15b44:	moveq	r3, #1
   15b48:	movne	r3, #0
   15b4c:	strb	r3, [fp, #-21]	; 0xffffffeb
   15b50:	movw	r3, #41204	; 0xa0f4
   15b54:	movt	r3, #2
   15b58:	ldr	r3, [r3]
   15b5c:	str	r3, [fp, #-40]	; 0xffffffd8
   15b60:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15b64:	cmp	r3, #0
   15b68:	beq	15b74 <__assert_fail@plt+0x4c48>
   15b6c:	mov	r0, #0
   15b70:	b	15b78 <__assert_fail@plt+0x4c4c>
   15b74:	ldr	r0, [fp, #-8]
   15b78:	movw	r3, #41204	; 0xa0f4
   15b7c:	movt	r3, #2
   15b80:	ldr	r3, [r3]
   15b84:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15b88:	sub	r3, r2, r3
   15b8c:	add	r2, r3, #1
   15b90:	sub	r1, fp, #40	; 0x28
   15b94:	mov	r3, #8
   15b98:	str	r3, [sp]
   15b9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ba0:	bl	170ac <__assert_fail@plt+0x6180>
   15ba4:	str	r0, [fp, #-8]
   15ba8:	movw	r3, #41216	; 0xa100
   15bac:	movt	r3, #2
   15bb0:	ldr	r2, [fp, #-8]
   15bb4:	str	r2, [r3]
   15bb8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15bbc:	cmp	r3, #0
   15bc0:	beq	15bdc <__assert_fail@plt+0x4cb0>
   15bc4:	ldr	r2, [fp, #-8]
   15bc8:	movw	r3, #41208	; 0xa0f8
   15bcc:	movt	r3, #2
   15bd0:	mov	r1, r2
   15bd4:	ldrd	r2, [r3]
   15bd8:	strd	r2, [r1]
   15bdc:	movw	r3, #41204	; 0xa0f4
   15be0:	movt	r3, #2
   15be4:	ldr	r3, [r3]
   15be8:	lsl	r3, r3, #3
   15bec:	ldr	r2, [fp, #-8]
   15bf0:	add	r0, r2, r3
   15bf4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15bf8:	movw	r3, #41204	; 0xa0f4
   15bfc:	movt	r3, #2
   15c00:	ldr	r3, [r3]
   15c04:	sub	r3, r2, r3
   15c08:	lsl	r3, r3, #3
   15c0c:	mov	r2, r3
   15c10:	mov	r1, #0
   15c14:	bl	10e84 <memset@plt>
   15c18:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15c1c:	movw	r3, #41204	; 0xa0f4
   15c20:	movt	r3, #2
   15c24:	str	r2, [r3]
   15c28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15c2c:	lsl	r3, r3, #3
   15c30:	ldr	r2, [fp, #-8]
   15c34:	add	r3, r2, r3
   15c38:	ldr	r3, [r3]
   15c3c:	str	r3, [fp, #-28]	; 0xffffffe4
   15c40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15c44:	lsl	r3, r3, #3
   15c48:	ldr	r2, [fp, #-8]
   15c4c:	add	r3, r2, r3
   15c50:	ldr	r3, [r3, #4]
   15c54:	str	r3, [fp, #-12]
   15c58:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15c5c:	ldr	r3, [r3, #4]
   15c60:	orr	r3, r3, #1
   15c64:	str	r3, [fp, #-32]	; 0xffffffe0
   15c68:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15c6c:	ldr	r3, [r3]
   15c70:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15c74:	add	r2, r2, #8
   15c78:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15c7c:	ldr	r1, [r1, #40]	; 0x28
   15c80:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15c84:	ldr	r0, [r0, #44]	; 0x2c
   15c88:	str	r0, [sp, #16]
   15c8c:	str	r1, [sp, #12]
   15c90:	str	r2, [sp, #8]
   15c94:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15c98:	str	r2, [sp, #4]
   15c9c:	str	r3, [sp]
   15ca0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15ca4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15ca8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15cac:	ldr	r0, [fp, #-12]
   15cb0:	bl	14054 <__assert_fail@plt+0x3128>
   15cb4:	str	r0, [fp, #-36]	; 0xffffffdc
   15cb8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15cbc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15cc0:	cmp	r2, r3
   15cc4:	bhi	15d7c <__assert_fail@plt+0x4e50>
   15cc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ccc:	add	r3, r3, #1
   15cd0:	str	r3, [fp, #-28]	; 0xffffffe4
   15cd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15cd8:	lsl	r3, r3, #3
   15cdc:	ldr	r2, [fp, #-8]
   15ce0:	add	r3, r2, r3
   15ce4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15ce8:	str	r2, [r3]
   15cec:	ldr	r2, [fp, #-12]
   15cf0:	movw	r3, #8908	; 0x22cc
   15cf4:	movt	r3, #3
   15cf8:	cmp	r2, r3
   15cfc:	beq	15d08 <__assert_fail@plt+0x4ddc>
   15d00:	ldr	r0, [fp, #-12]
   15d04:	bl	183c4 <__assert_fail@plt+0x7498>
   15d08:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15d0c:	bl	16d4c <__assert_fail@plt+0x5e20>
   15d10:	mov	r3, r0
   15d14:	str	r3, [fp, #-12]
   15d18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15d1c:	lsl	r3, r3, #3
   15d20:	ldr	r2, [fp, #-8]
   15d24:	add	r3, r2, r3
   15d28:	ldr	r2, [fp, #-12]
   15d2c:	str	r2, [r3, #4]
   15d30:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15d34:	ldr	r3, [r3]
   15d38:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15d3c:	add	r2, r2, #8
   15d40:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15d44:	ldr	r1, [r1, #40]	; 0x28
   15d48:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15d4c:	ldr	r0, [r0, #44]	; 0x2c
   15d50:	str	r0, [sp, #16]
   15d54:	str	r1, [sp, #12]
   15d58:	str	r2, [sp, #8]
   15d5c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15d60:	str	r2, [sp, #4]
   15d64:	str	r3, [sp]
   15d68:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15d6c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15d70:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15d74:	ldr	r0, [fp, #-12]
   15d78:	bl	14054 <__assert_fail@plt+0x3128>
   15d7c:	bl	10e6c <__errno_location@plt>
   15d80:	mov	r2, r0
   15d84:	ldr	r3, [fp, #-16]
   15d88:	str	r3, [r2]
   15d8c:	ldr	r3, [fp, #-12]
   15d90:	mov	r0, r3
   15d94:	sub	sp, fp, #4
   15d98:	ldr	fp, [sp]
   15d9c:	add	sp, sp, #4
   15da0:	pop	{pc}		; (ldr pc, [sp], #4)
   15da4:	str	fp, [sp, #-8]!
   15da8:	str	lr, [sp, #4]
   15dac:	add	fp, sp, #4
   15db0:	sub	sp, sp, #8
   15db4:	str	r0, [fp, #-8]
   15db8:	str	r1, [fp, #-12]
   15dbc:	movw	r3, #8860	; 0x229c
   15dc0:	movt	r3, #3
   15dc4:	mvn	r2, #0
   15dc8:	ldr	r1, [fp, #-12]
   15dcc:	ldr	r0, [fp, #-8]
   15dd0:	bl	15ab4 <__assert_fail@plt+0x4b88>
   15dd4:	mov	r3, r0
   15dd8:	mov	r0, r3
   15ddc:	sub	sp, fp, #4
   15de0:	ldr	fp, [sp]
   15de4:	add	sp, sp, #4
   15de8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dec:	str	fp, [sp, #-8]!
   15df0:	str	lr, [sp, #4]
   15df4:	add	fp, sp, #4
   15df8:	sub	sp, sp, #16
   15dfc:	str	r0, [fp, #-8]
   15e00:	str	r1, [fp, #-12]
   15e04:	str	r2, [fp, #-16]
   15e08:	movw	r3, #8860	; 0x229c
   15e0c:	movt	r3, #3
   15e10:	ldr	r2, [fp, #-16]
   15e14:	ldr	r1, [fp, #-12]
   15e18:	ldr	r0, [fp, #-8]
   15e1c:	bl	15ab4 <__assert_fail@plt+0x4b88>
   15e20:	mov	r3, r0
   15e24:	mov	r0, r3
   15e28:	sub	sp, fp, #4
   15e2c:	ldr	fp, [sp]
   15e30:	add	sp, sp, #4
   15e34:	pop	{pc}		; (ldr pc, [sp], #4)
   15e38:	str	fp, [sp, #-8]!
   15e3c:	str	lr, [sp, #4]
   15e40:	add	fp, sp, #4
   15e44:	sub	sp, sp, #8
   15e48:	str	r0, [fp, #-8]
   15e4c:	ldr	r1, [fp, #-8]
   15e50:	mov	r0, #0
   15e54:	bl	15da4 <__assert_fail@plt+0x4e78>
   15e58:	mov	r3, r0
   15e5c:	mov	r0, r3
   15e60:	sub	sp, fp, #4
   15e64:	ldr	fp, [sp]
   15e68:	add	sp, sp, #4
   15e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e70:	str	fp, [sp, #-8]!
   15e74:	str	lr, [sp, #4]
   15e78:	add	fp, sp, #4
   15e7c:	sub	sp, sp, #8
   15e80:	str	r0, [fp, #-8]
   15e84:	str	r1, [fp, #-12]
   15e88:	ldr	r2, [fp, #-12]
   15e8c:	ldr	r1, [fp, #-8]
   15e90:	mov	r0, #0
   15e94:	bl	15dec <__assert_fail@plt+0x4ec0>
   15e98:	mov	r3, r0
   15e9c:	mov	r0, r3
   15ea0:	sub	sp, fp, #4
   15ea4:	ldr	fp, [sp]
   15ea8:	add	sp, sp, #4
   15eac:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb0:	str	fp, [sp, #-8]!
   15eb4:	str	lr, [sp, #4]
   15eb8:	add	fp, sp, #4
   15ebc:	sub	sp, sp, #64	; 0x40
   15ec0:	str	r0, [fp, #-56]	; 0xffffffc8
   15ec4:	str	r1, [fp, #-60]	; 0xffffffc4
   15ec8:	str	r2, [fp, #-64]	; 0xffffffc0
   15ecc:	sub	r3, fp, #52	; 0x34
   15ed0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ed4:	mov	r0, r3
   15ed8:	bl	13eb0 <__assert_fail@plt+0x2f84>
   15edc:	sub	r3, fp, #52	; 0x34
   15ee0:	mvn	r2, #0
   15ee4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15ee8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15eec:	bl	15ab4 <__assert_fail@plt+0x4b88>
   15ef0:	mov	r3, r0
   15ef4:	mov	r0, r3
   15ef8:	sub	sp, fp, #4
   15efc:	ldr	fp, [sp]
   15f00:	add	sp, sp, #4
   15f04:	pop	{pc}		; (ldr pc, [sp], #4)
   15f08:	str	fp, [sp, #-8]!
   15f0c:	str	lr, [sp, #4]
   15f10:	add	fp, sp, #4
   15f14:	sub	sp, sp, #64	; 0x40
   15f18:	str	r0, [fp, #-56]	; 0xffffffc8
   15f1c:	str	r1, [fp, #-60]	; 0xffffffc4
   15f20:	str	r2, [fp, #-64]	; 0xffffffc0
   15f24:	str	r3, [fp, #-68]	; 0xffffffbc
   15f28:	sub	r3, fp, #52	; 0x34
   15f2c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15f30:	mov	r0, r3
   15f34:	bl	13eb0 <__assert_fail@plt+0x2f84>
   15f38:	sub	r3, fp, #52	; 0x34
   15f3c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15f40:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15f44:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15f48:	bl	15ab4 <__assert_fail@plt+0x4b88>
   15f4c:	mov	r3, r0
   15f50:	mov	r0, r3
   15f54:	sub	sp, fp, #4
   15f58:	ldr	fp, [sp]
   15f5c:	add	sp, sp, #4
   15f60:	pop	{pc}		; (ldr pc, [sp], #4)
   15f64:	str	fp, [sp, #-8]!
   15f68:	str	lr, [sp, #4]
   15f6c:	add	fp, sp, #4
   15f70:	sub	sp, sp, #8
   15f74:	str	r0, [fp, #-8]
   15f78:	str	r1, [fp, #-12]
   15f7c:	ldr	r2, [fp, #-12]
   15f80:	ldr	r1, [fp, #-8]
   15f84:	mov	r0, #0
   15f88:	bl	15eb0 <__assert_fail@plt+0x4f84>
   15f8c:	mov	r3, r0
   15f90:	mov	r0, r3
   15f94:	sub	sp, fp, #4
   15f98:	ldr	fp, [sp]
   15f9c:	add	sp, sp, #4
   15fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fa4:	str	fp, [sp, #-8]!
   15fa8:	str	lr, [sp, #4]
   15fac:	add	fp, sp, #4
   15fb0:	sub	sp, sp, #16
   15fb4:	str	r0, [fp, #-8]
   15fb8:	str	r1, [fp, #-12]
   15fbc:	str	r2, [fp, #-16]
   15fc0:	ldr	r3, [fp, #-16]
   15fc4:	ldr	r2, [fp, #-12]
   15fc8:	ldr	r1, [fp, #-8]
   15fcc:	mov	r0, #0
   15fd0:	bl	15f08 <__assert_fail@plt+0x4fdc>
   15fd4:	mov	r3, r0
   15fd8:	mov	r0, r3
   15fdc:	sub	sp, fp, #4
   15fe0:	ldr	fp, [sp]
   15fe4:	add	sp, sp, #4
   15fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fec:	str	fp, [sp, #-8]!
   15ff0:	str	lr, [sp, #4]
   15ff4:	add	fp, sp, #4
   15ff8:	sub	sp, sp, #64	; 0x40
   15ffc:	str	r0, [fp, #-56]	; 0xffffffc8
   16000:	str	r1, [fp, #-60]	; 0xffffffc4
   16004:	mov	r3, r2
   16008:	strb	r3, [fp, #-61]	; 0xffffffc3
   1600c:	movw	r2, #8860	; 0x229c
   16010:	movt	r2, #3
   16014:	sub	r3, fp, #52	; 0x34
   16018:	ldrd	r0, [r2]
   1601c:	strd	r0, [r3]
   16020:	ldrd	r0, [r2, #8]
   16024:	strd	r0, [r3, #8]
   16028:	ldrd	r0, [r2, #16]
   1602c:	strd	r0, [r3, #16]
   16030:	ldrd	r0, [r2, #24]
   16034:	strd	r0, [r3, #24]
   16038:	ldrd	r0, [r2, #32]
   1603c:	strd	r0, [r3, #32]
   16040:	ldrd	r0, [r2, #40]	; 0x28
   16044:	strd	r0, [r3, #40]	; 0x28
   16048:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1604c:	sub	r3, fp, #52	; 0x34
   16050:	mov	r2, #1
   16054:	mov	r0, r3
   16058:	bl	13d10 <__assert_fail@plt+0x2de4>
   1605c:	sub	r3, fp, #52	; 0x34
   16060:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16064:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16068:	mov	r0, #0
   1606c:	bl	15ab4 <__assert_fail@plt+0x4b88>
   16070:	mov	r3, r0
   16074:	mov	r0, r3
   16078:	sub	sp, fp, #4
   1607c:	ldr	fp, [sp]
   16080:	add	sp, sp, #4
   16084:	pop	{pc}		; (ldr pc, [sp], #4)
   16088:	str	fp, [sp, #-8]!
   1608c:	str	lr, [sp, #4]
   16090:	add	fp, sp, #4
   16094:	sub	sp, sp, #8
   16098:	str	r0, [fp, #-8]
   1609c:	mov	r3, r1
   160a0:	strb	r3, [fp, #-9]
   160a4:	ldrb	r3, [fp, #-9]
   160a8:	mov	r2, r3
   160ac:	mvn	r1, #0
   160b0:	ldr	r0, [fp, #-8]
   160b4:	bl	15fec <__assert_fail@plt+0x50c0>
   160b8:	mov	r3, r0
   160bc:	mov	r0, r3
   160c0:	sub	sp, fp, #4
   160c4:	ldr	fp, [sp]
   160c8:	add	sp, sp, #4
   160cc:	pop	{pc}		; (ldr pc, [sp], #4)
   160d0:	str	fp, [sp, #-8]!
   160d4:	str	lr, [sp, #4]
   160d8:	add	fp, sp, #4
   160dc:	sub	sp, sp, #8
   160e0:	str	r0, [fp, #-8]
   160e4:	mov	r1, #58	; 0x3a
   160e8:	ldr	r0, [fp, #-8]
   160ec:	bl	16088 <__assert_fail@plt+0x515c>
   160f0:	mov	r3, r0
   160f4:	mov	r0, r3
   160f8:	sub	sp, fp, #4
   160fc:	ldr	fp, [sp]
   16100:	add	sp, sp, #4
   16104:	pop	{pc}		; (ldr pc, [sp], #4)
   16108:	str	fp, [sp, #-8]!
   1610c:	str	lr, [sp, #4]
   16110:	add	fp, sp, #4
   16114:	sub	sp, sp, #8
   16118:	str	r0, [fp, #-8]
   1611c:	str	r1, [fp, #-12]
   16120:	mov	r2, #58	; 0x3a
   16124:	ldr	r1, [fp, #-12]
   16128:	ldr	r0, [fp, #-8]
   1612c:	bl	15fec <__assert_fail@plt+0x50c0>
   16130:	mov	r3, r0
   16134:	mov	r0, r3
   16138:	sub	sp, fp, #4
   1613c:	ldr	fp, [sp]
   16140:	add	sp, sp, #4
   16144:	pop	{pc}		; (ldr pc, [sp], #4)
   16148:	str	fp, [sp, #-8]!
   1614c:	str	lr, [sp, #4]
   16150:	add	fp, sp, #4
   16154:	sub	sp, sp, #112	; 0x70
   16158:	str	r0, [fp, #-56]	; 0xffffffc8
   1615c:	str	r1, [fp, #-60]	; 0xffffffc4
   16160:	str	r2, [fp, #-64]	; 0xffffffc0
   16164:	sub	r3, fp, #116	; 0x74
   16168:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1616c:	mov	r0, r3
   16170:	bl	13eb0 <__assert_fail@plt+0x2f84>
   16174:	sub	r3, fp, #52	; 0x34
   16178:	sub	r2, fp, #116	; 0x74
   1617c:	ldrd	r0, [r2]
   16180:	strd	r0, [r3]
   16184:	ldrd	r0, [r2, #8]
   16188:	strd	r0, [r3, #8]
   1618c:	ldrd	r0, [r2, #16]
   16190:	strd	r0, [r3, #16]
   16194:	ldrd	r0, [r2, #24]
   16198:	strd	r0, [r3, #24]
   1619c:	ldrd	r0, [r2, #32]
   161a0:	strd	r0, [r3, #32]
   161a4:	ldrd	r0, [r2, #40]	; 0x28
   161a8:	strd	r0, [r3, #40]	; 0x28
   161ac:	sub	r3, fp, #52	; 0x34
   161b0:	mov	r2, #1
   161b4:	mov	r1, #58	; 0x3a
   161b8:	mov	r0, r3
   161bc:	bl	13d10 <__assert_fail@plt+0x2de4>
   161c0:	sub	r3, fp, #52	; 0x34
   161c4:	mvn	r2, #0
   161c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   161cc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   161d0:	bl	15ab4 <__assert_fail@plt+0x4b88>
   161d4:	mov	r3, r0
   161d8:	mov	r0, r3
   161dc:	sub	sp, fp, #4
   161e0:	ldr	fp, [sp]
   161e4:	add	sp, sp, #4
   161e8:	pop	{pc}		; (ldr pc, [sp], #4)
   161ec:	str	fp, [sp, #-8]!
   161f0:	str	lr, [sp, #4]
   161f4:	add	fp, sp, #4
   161f8:	sub	sp, sp, #24
   161fc:	str	r0, [fp, #-8]
   16200:	str	r1, [fp, #-12]
   16204:	str	r2, [fp, #-16]
   16208:	str	r3, [fp, #-20]	; 0xffffffec
   1620c:	mvn	r3, #0
   16210:	str	r3, [sp]
   16214:	ldr	r3, [fp, #-20]	; 0xffffffec
   16218:	ldr	r2, [fp, #-16]
   1621c:	ldr	r1, [fp, #-12]
   16220:	ldr	r0, [fp, #-8]
   16224:	bl	16240 <__assert_fail@plt+0x5314>
   16228:	mov	r3, r0
   1622c:	mov	r0, r3
   16230:	sub	sp, fp, #4
   16234:	ldr	fp, [sp]
   16238:	add	sp, sp, #4
   1623c:	pop	{pc}		; (ldr pc, [sp], #4)
   16240:	str	fp, [sp, #-8]!
   16244:	str	lr, [sp, #4]
   16248:	add	fp, sp, #4
   1624c:	sub	sp, sp, #64	; 0x40
   16250:	str	r0, [fp, #-56]	; 0xffffffc8
   16254:	str	r1, [fp, #-60]	; 0xffffffc4
   16258:	str	r2, [fp, #-64]	; 0xffffffc0
   1625c:	str	r3, [fp, #-68]	; 0xffffffbc
   16260:	movw	r2, #8860	; 0x229c
   16264:	movt	r2, #3
   16268:	sub	r3, fp, #52	; 0x34
   1626c:	ldrd	r0, [r2]
   16270:	strd	r0, [r3]
   16274:	ldrd	r0, [r2, #8]
   16278:	strd	r0, [r3, #8]
   1627c:	ldrd	r0, [r2, #16]
   16280:	strd	r0, [r3, #16]
   16284:	ldrd	r0, [r2, #24]
   16288:	strd	r0, [r3, #24]
   1628c:	ldrd	r0, [r2, #32]
   16290:	strd	r0, [r3, #32]
   16294:	ldrd	r0, [r2, #40]	; 0x28
   16298:	strd	r0, [r3, #40]	; 0x28
   1629c:	sub	r3, fp, #52	; 0x34
   162a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   162a4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   162a8:	mov	r0, r3
   162ac:	bl	13e28 <__assert_fail@plt+0x2efc>
   162b0:	sub	r3, fp, #52	; 0x34
   162b4:	ldr	r2, [fp, #4]
   162b8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   162bc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   162c0:	bl	15ab4 <__assert_fail@plt+0x4b88>
   162c4:	mov	r3, r0
   162c8:	mov	r0, r3
   162cc:	sub	sp, fp, #4
   162d0:	ldr	fp, [sp]
   162d4:	add	sp, sp, #4
   162d8:	pop	{pc}		; (ldr pc, [sp], #4)
   162dc:	str	fp, [sp, #-8]!
   162e0:	str	lr, [sp, #4]
   162e4:	add	fp, sp, #4
   162e8:	sub	sp, sp, #16
   162ec:	str	r0, [fp, #-8]
   162f0:	str	r1, [fp, #-12]
   162f4:	str	r2, [fp, #-16]
   162f8:	ldr	r3, [fp, #-16]
   162fc:	ldr	r2, [fp, #-12]
   16300:	ldr	r1, [fp, #-8]
   16304:	mov	r0, #0
   16308:	bl	161ec <__assert_fail@plt+0x52c0>
   1630c:	mov	r3, r0
   16310:	mov	r0, r3
   16314:	sub	sp, fp, #4
   16318:	ldr	fp, [sp]
   1631c:	add	sp, sp, #4
   16320:	pop	{pc}		; (ldr pc, [sp], #4)
   16324:	str	fp, [sp, #-8]!
   16328:	str	lr, [sp, #4]
   1632c:	add	fp, sp, #4
   16330:	sub	sp, sp, #24
   16334:	str	r0, [fp, #-8]
   16338:	str	r1, [fp, #-12]
   1633c:	str	r2, [fp, #-16]
   16340:	str	r3, [fp, #-20]	; 0xffffffec
   16344:	ldr	r3, [fp, #-20]	; 0xffffffec
   16348:	str	r3, [sp]
   1634c:	ldr	r3, [fp, #-16]
   16350:	ldr	r2, [fp, #-12]
   16354:	ldr	r1, [fp, #-8]
   16358:	mov	r0, #0
   1635c:	bl	16240 <__assert_fail@plt+0x5314>
   16360:	mov	r3, r0
   16364:	mov	r0, r3
   16368:	sub	sp, fp, #4
   1636c:	ldr	fp, [sp]
   16370:	add	sp, sp, #4
   16374:	pop	{pc}		; (ldr pc, [sp], #4)
   16378:	str	fp, [sp, #-8]!
   1637c:	str	lr, [sp, #4]
   16380:	add	fp, sp, #4
   16384:	sub	sp, sp, #16
   16388:	str	r0, [fp, #-8]
   1638c:	str	r1, [fp, #-12]
   16390:	str	r2, [fp, #-16]
   16394:	movw	r3, #41220	; 0xa104
   16398:	movt	r3, #2
   1639c:	ldr	r2, [fp, #-16]
   163a0:	ldr	r1, [fp, #-12]
   163a4:	ldr	r0, [fp, #-8]
   163a8:	bl	15ab4 <__assert_fail@plt+0x4b88>
   163ac:	mov	r3, r0
   163b0:	mov	r0, r3
   163b4:	sub	sp, fp, #4
   163b8:	ldr	fp, [sp]
   163bc:	add	sp, sp, #4
   163c0:	pop	{pc}		; (ldr pc, [sp], #4)
   163c4:	str	fp, [sp, #-8]!
   163c8:	str	lr, [sp, #4]
   163cc:	add	fp, sp, #4
   163d0:	sub	sp, sp, #8
   163d4:	str	r0, [fp, #-8]
   163d8:	str	r1, [fp, #-12]
   163dc:	ldr	r2, [fp, #-12]
   163e0:	ldr	r1, [fp, #-8]
   163e4:	mov	r0, #0
   163e8:	bl	16378 <__assert_fail@plt+0x544c>
   163ec:	mov	r3, r0
   163f0:	mov	r0, r3
   163f4:	sub	sp, fp, #4
   163f8:	ldr	fp, [sp]
   163fc:	add	sp, sp, #4
   16400:	pop	{pc}		; (ldr pc, [sp], #4)
   16404:	str	fp, [sp, #-8]!
   16408:	str	lr, [sp, #4]
   1640c:	add	fp, sp, #4
   16410:	sub	sp, sp, #8
   16414:	str	r0, [fp, #-8]
   16418:	str	r1, [fp, #-12]
   1641c:	mvn	r2, #0
   16420:	ldr	r1, [fp, #-12]
   16424:	ldr	r0, [fp, #-8]
   16428:	bl	16378 <__assert_fail@plt+0x544c>
   1642c:	mov	r3, r0
   16430:	mov	r0, r3
   16434:	sub	sp, fp, #4
   16438:	ldr	fp, [sp]
   1643c:	add	sp, sp, #4
   16440:	pop	{pc}		; (ldr pc, [sp], #4)
   16444:	str	fp, [sp, #-8]!
   16448:	str	lr, [sp, #4]
   1644c:	add	fp, sp, #4
   16450:	sub	sp, sp, #8
   16454:	str	r0, [fp, #-8]
   16458:	ldr	r1, [fp, #-8]
   1645c:	mov	r0, #0
   16460:	bl	16404 <__assert_fail@plt+0x54d8>
   16464:	mov	r3, r0
   16468:	mov	r0, r3
   1646c:	sub	sp, fp, #4
   16470:	ldr	fp, [sp]
   16474:	add	sp, sp, #4
   16478:	pop	{pc}		; (ldr pc, [sp], #4)
   1647c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16480:	strd	r6, [sp, #8]
   16484:	str	fp, [sp, #16]
   16488:	str	lr, [sp, #20]
   1648c:	add	fp, sp, #20
   16490:	sub	sp, sp, #48	; 0x30
   16494:	str	r0, [fp, #-24]	; 0xffffffe8
   16498:	str	r1, [fp, #-28]	; 0xffffffe4
   1649c:	str	r2, [fp, #-32]	; 0xffffffe0
   164a0:	str	r3, [fp, #-36]	; 0xffffffdc
   164a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   164a8:	cmp	r3, #0
   164ac:	beq	164d4 <__assert_fail@plt+0x55a8>
   164b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   164b4:	str	r3, [sp]
   164b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   164c0:	movw	r1, #39132	; 0x98dc
   164c4:	movt	r1, #1
   164c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164cc:	bl	10e60 <fprintf@plt>
   164d0:	b	164ec <__assert_fail@plt+0x55c0>
   164d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   164d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   164dc:	movw	r1, #39144	; 0x98e8
   164e0:	movt	r1, #1
   164e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164e8:	bl	10e60 <fprintf@plt>
   164ec:	movw	r0, #39152	; 0x98f0
   164f0:	movt	r0, #1
   164f4:	bl	10e3c <gettext@plt>
   164f8:	mov	r2, r0
   164fc:	movw	r3, #2022	; 0x7e6
   16500:	movw	r1, #39936	; 0x9c00
   16504:	movt	r1, #1
   16508:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1650c:	bl	10e60 <fprintf@plt>
   16510:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16514:	mov	r0, #10
   16518:	bl	10d58 <fputc_unlocked@plt>
   1651c:	movw	r0, #39156	; 0x98f4
   16520:	movt	r0, #1
   16524:	bl	10e3c <gettext@plt>
   16528:	mov	r3, r0
   1652c:	movw	r2, #39328	; 0x99a0
   16530:	movt	r2, #1
   16534:	mov	r1, r3
   16538:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1653c:	bl	10e60 <fprintf@plt>
   16540:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16544:	mov	r0, #10
   16548:	bl	10d58 <fputc_unlocked@plt>
   1654c:	ldr	r3, [fp, #8]
   16550:	cmp	r3, #9
   16554:	ldrls	pc, [pc, r3, lsl #2]
   16558:	b	16938 <__assert_fail@plt+0x5a0c>
   1655c:	andeq	r6, r1, r4, ror #19
   16560:	andeq	r6, r1, r4, lsl #11
   16564:	andeq	r6, r1, ip, lsr #11
   16568:	ldrdeq	r6, [r1], -ip
   1656c:	andeq	r6, r1, r0, lsr #12
   16570:	andeq	r6, r1, ip, ror r6
   16574:	andeq	r6, r1, r8, ror #13
   16578:	andeq	r6, r1, r4, ror #14
   1657c:	strdeq	r6, [r1], -r0
   16580:	andeq	r6, r1, ip, lsl #17
   16584:	movw	r0, #39364	; 0x99c4
   16588:	movt	r0, #1
   1658c:	bl	10e3c <gettext@plt>
   16590:	mov	r1, r0
   16594:	ldr	r3, [fp, #4]
   16598:	ldr	r3, [r3]
   1659c:	mov	r2, r3
   165a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   165a4:	bl	10e60 <fprintf@plt>
   165a8:	b	169e8 <__assert_fail@plt+0x5abc>
   165ac:	movw	r0, #39380	; 0x99d4
   165b0:	movt	r0, #1
   165b4:	bl	10e3c <gettext@plt>
   165b8:	mov	r1, r0
   165bc:	ldr	r3, [fp, #4]
   165c0:	ldr	r2, [r3]
   165c4:	ldr	r3, [fp, #4]
   165c8:	add	r3, r3, #4
   165cc:	ldr	r3, [r3]
   165d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   165d4:	bl	10e60 <fprintf@plt>
   165d8:	b	169e8 <__assert_fail@plt+0x5abc>
   165dc:	movw	r0, #39404	; 0x99ec
   165e0:	movt	r0, #1
   165e4:	bl	10e3c <gettext@plt>
   165e8:	ldr	r3, [fp, #4]
   165ec:	ldr	r2, [r3]
   165f0:	ldr	r3, [fp, #4]
   165f4:	add	r3, r3, #4
   165f8:	ldr	r1, [r3]
   165fc:	ldr	r3, [fp, #4]
   16600:	add	r3, r3, #8
   16604:	ldr	r3, [r3]
   16608:	str	r3, [sp]
   1660c:	mov	r3, r1
   16610:	mov	r1, r0
   16614:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16618:	bl	10e60 <fprintf@plt>
   1661c:	b	169e8 <__assert_fail@plt+0x5abc>
   16620:	movw	r0, #39432	; 0x9a08
   16624:	movt	r0, #1
   16628:	bl	10e3c <gettext@plt>
   1662c:	mov	ip, r0
   16630:	ldr	r3, [fp, #4]
   16634:	ldr	r1, [r3]
   16638:	ldr	r3, [fp, #4]
   1663c:	add	r3, r3, #4
   16640:	ldr	r0, [r3]
   16644:	ldr	r3, [fp, #4]
   16648:	add	r3, r3, #8
   1664c:	ldr	r3, [r3]
   16650:	ldr	r2, [fp, #4]
   16654:	add	r2, r2, #12
   16658:	ldr	r2, [r2]
   1665c:	str	r2, [sp, #4]
   16660:	str	r3, [sp]
   16664:	mov	r3, r0
   16668:	mov	r2, r1
   1666c:	mov	r1, ip
   16670:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16674:	bl	10e60 <fprintf@plt>
   16678:	b	169e8 <__assert_fail@plt+0x5abc>
   1667c:	movw	r0, #39464	; 0x9a28
   16680:	movt	r0, #1
   16684:	bl	10e3c <gettext@plt>
   16688:	mov	lr, r0
   1668c:	ldr	r3, [fp, #4]
   16690:	ldr	r0, [r3]
   16694:	ldr	r3, [fp, #4]
   16698:	add	r3, r3, #4
   1669c:	ldr	ip, [r3]
   166a0:	ldr	r3, [fp, #4]
   166a4:	add	r3, r3, #8
   166a8:	ldr	r3, [r3]
   166ac:	ldr	r2, [fp, #4]
   166b0:	add	r2, r2, #12
   166b4:	ldr	r2, [r2]
   166b8:	ldr	r1, [fp, #4]
   166bc:	add	r1, r1, #16
   166c0:	ldr	r1, [r1]
   166c4:	str	r1, [sp, #8]
   166c8:	str	r2, [sp, #4]
   166cc:	str	r3, [sp]
   166d0:	mov	r3, ip
   166d4:	mov	r2, r0
   166d8:	mov	r1, lr
   166dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166e0:	bl	10e60 <fprintf@plt>
   166e4:	b	169e8 <__assert_fail@plt+0x5abc>
   166e8:	movw	r0, #39500	; 0x9a4c
   166ec:	movt	r0, #1
   166f0:	bl	10e3c <gettext@plt>
   166f4:	mov	r4, r0
   166f8:	ldr	r3, [fp, #4]
   166fc:	ldr	ip, [r3]
   16700:	ldr	r3, [fp, #4]
   16704:	add	r3, r3, #4
   16708:	ldr	lr, [r3]
   1670c:	ldr	r3, [fp, #4]
   16710:	add	r3, r3, #8
   16714:	ldr	r3, [r3]
   16718:	ldr	r2, [fp, #4]
   1671c:	add	r2, r2, #12
   16720:	ldr	r2, [r2]
   16724:	ldr	r1, [fp, #4]
   16728:	add	r1, r1, #16
   1672c:	ldr	r1, [r1]
   16730:	ldr	r0, [fp, #4]
   16734:	add	r0, r0, #20
   16738:	ldr	r0, [r0]
   1673c:	str	r0, [sp, #12]
   16740:	str	r1, [sp, #8]
   16744:	str	r2, [sp, #4]
   16748:	str	r3, [sp]
   1674c:	mov	r3, lr
   16750:	mov	r2, ip
   16754:	mov	r1, r4
   16758:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1675c:	bl	10e60 <fprintf@plt>
   16760:	b	169e8 <__assert_fail@plt+0x5abc>
   16764:	movw	r0, #39540	; 0x9a74
   16768:	movt	r0, #1
   1676c:	bl	10e3c <gettext@plt>
   16770:	mov	r5, r0
   16774:	ldr	r3, [fp, #4]
   16778:	ldr	lr, [r3]
   1677c:	ldr	r3, [fp, #4]
   16780:	add	r3, r3, #4
   16784:	ldr	r4, [r3]
   16788:	ldr	r3, [fp, #4]
   1678c:	add	r3, r3, #8
   16790:	ldr	r3, [r3]
   16794:	ldr	r2, [fp, #4]
   16798:	add	r2, r2, #12
   1679c:	ldr	r2, [r2]
   167a0:	ldr	r1, [fp, #4]
   167a4:	add	r1, r1, #16
   167a8:	ldr	r1, [r1]
   167ac:	ldr	r0, [fp, #4]
   167b0:	add	r0, r0, #20
   167b4:	ldr	r0, [r0]
   167b8:	ldr	ip, [fp, #4]
   167bc:	add	ip, ip, #24
   167c0:	ldr	ip, [ip]
   167c4:	str	ip, [sp, #16]
   167c8:	str	r0, [sp, #12]
   167cc:	str	r1, [sp, #8]
   167d0:	str	r2, [sp, #4]
   167d4:	str	r3, [sp]
   167d8:	mov	r3, r4
   167dc:	mov	r2, lr
   167e0:	mov	r1, r5
   167e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   167e8:	bl	10e60 <fprintf@plt>
   167ec:	b	169e8 <__assert_fail@plt+0x5abc>
   167f0:	movw	r0, #39584	; 0x9aa0
   167f4:	movt	r0, #1
   167f8:	bl	10e3c <gettext@plt>
   167fc:	mov	r6, r0
   16800:	ldr	r3, [fp, #4]
   16804:	ldr	r4, [r3]
   16808:	ldr	r3, [fp, #4]
   1680c:	add	r3, r3, #4
   16810:	ldr	r5, [r3]
   16814:	ldr	r3, [fp, #4]
   16818:	add	r3, r3, #8
   1681c:	ldr	r3, [r3]
   16820:	ldr	r2, [fp, #4]
   16824:	add	r2, r2, #12
   16828:	ldr	r2, [r2]
   1682c:	ldr	r1, [fp, #4]
   16830:	add	r1, r1, #16
   16834:	ldr	r1, [r1]
   16838:	ldr	r0, [fp, #4]
   1683c:	add	r0, r0, #20
   16840:	ldr	r0, [r0]
   16844:	ldr	ip, [fp, #4]
   16848:	add	ip, ip, #24
   1684c:	ldr	ip, [ip]
   16850:	ldr	lr, [fp, #4]
   16854:	add	lr, lr, #28
   16858:	ldr	lr, [lr]
   1685c:	str	lr, [sp, #20]
   16860:	str	ip, [sp, #16]
   16864:	str	r0, [sp, #12]
   16868:	str	r1, [sp, #8]
   1686c:	str	r2, [sp, #4]
   16870:	str	r3, [sp]
   16874:	mov	r3, r5
   16878:	mov	r2, r4
   1687c:	mov	r1, r6
   16880:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16884:	bl	10e60 <fprintf@plt>
   16888:	b	169e8 <__assert_fail@plt+0x5abc>
   1688c:	movw	r0, #39632	; 0x9ad0
   16890:	movt	r0, #1
   16894:	bl	10e3c <gettext@plt>
   16898:	mov	r7, r0
   1689c:	ldr	r3, [fp, #4]
   168a0:	ldr	r5, [r3]
   168a4:	ldr	r3, [fp, #4]
   168a8:	add	r3, r3, #4
   168ac:	ldr	r6, [r3]
   168b0:	ldr	r3, [fp, #4]
   168b4:	add	r3, r3, #8
   168b8:	ldr	r3, [r3]
   168bc:	ldr	r2, [fp, #4]
   168c0:	add	r2, r2, #12
   168c4:	ldr	r2, [r2]
   168c8:	ldr	r1, [fp, #4]
   168cc:	add	r1, r1, #16
   168d0:	ldr	r1, [r1]
   168d4:	ldr	r0, [fp, #4]
   168d8:	add	r0, r0, #20
   168dc:	ldr	r0, [r0]
   168e0:	ldr	ip, [fp, #4]
   168e4:	add	ip, ip, #24
   168e8:	ldr	ip, [ip]
   168ec:	ldr	lr, [fp, #4]
   168f0:	add	lr, lr, #28
   168f4:	ldr	lr, [lr]
   168f8:	ldr	r4, [fp, #4]
   168fc:	add	r4, r4, #32
   16900:	ldr	r4, [r4]
   16904:	str	r4, [sp, #24]
   16908:	str	lr, [sp, #20]
   1690c:	str	ip, [sp, #16]
   16910:	str	r0, [sp, #12]
   16914:	str	r1, [sp, #8]
   16918:	str	r2, [sp, #4]
   1691c:	str	r3, [sp]
   16920:	mov	r3, r6
   16924:	mov	r2, r5
   16928:	mov	r1, r7
   1692c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16930:	bl	10e60 <fprintf@plt>
   16934:	b	169e8 <__assert_fail@plt+0x5abc>
   16938:	movw	r0, #39684	; 0x9b04
   1693c:	movt	r0, #1
   16940:	bl	10e3c <gettext@plt>
   16944:	mov	r7, r0
   16948:	ldr	r3, [fp, #4]
   1694c:	ldr	r5, [r3]
   16950:	ldr	r3, [fp, #4]
   16954:	add	r3, r3, #4
   16958:	ldr	r6, [r3]
   1695c:	ldr	r3, [fp, #4]
   16960:	add	r3, r3, #8
   16964:	ldr	r3, [r3]
   16968:	ldr	r2, [fp, #4]
   1696c:	add	r2, r2, #12
   16970:	ldr	r2, [r2]
   16974:	ldr	r1, [fp, #4]
   16978:	add	r1, r1, #16
   1697c:	ldr	r1, [r1]
   16980:	ldr	r0, [fp, #4]
   16984:	add	r0, r0, #20
   16988:	ldr	r0, [r0]
   1698c:	ldr	ip, [fp, #4]
   16990:	add	ip, ip, #24
   16994:	ldr	ip, [ip]
   16998:	ldr	lr, [fp, #4]
   1699c:	add	lr, lr, #28
   169a0:	ldr	lr, [lr]
   169a4:	ldr	r4, [fp, #4]
   169a8:	add	r4, r4, #32
   169ac:	ldr	r4, [r4]
   169b0:	str	r4, [sp, #24]
   169b4:	str	lr, [sp, #20]
   169b8:	str	ip, [sp, #16]
   169bc:	str	r0, [sp, #12]
   169c0:	str	r1, [sp, #8]
   169c4:	str	r2, [sp, #4]
   169c8:	str	r3, [sp]
   169cc:	mov	r3, r6
   169d0:	mov	r2, r5
   169d4:	mov	r1, r7
   169d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   169dc:	bl	10e60 <fprintf@plt>
   169e0:	b	169e8 <__assert_fail@plt+0x5abc>
   169e4:	nop	{0}
   169e8:	nop	{0}
   169ec:	sub	sp, fp, #20
   169f0:	ldrd	r4, [sp]
   169f4:	ldrd	r6, [sp, #8]
   169f8:	ldr	fp, [sp, #16]
   169fc:	add	sp, sp, #20
   16a00:	pop	{pc}		; (ldr pc, [sp], #4)
   16a04:	str	fp, [sp, #-8]!
   16a08:	str	lr, [sp, #4]
   16a0c:	add	fp, sp, #4
   16a10:	sub	sp, sp, #32
   16a14:	str	r0, [fp, #-16]
   16a18:	str	r1, [fp, #-20]	; 0xffffffec
   16a1c:	str	r2, [fp, #-24]	; 0xffffffe8
   16a20:	str	r3, [fp, #-28]	; 0xffffffe4
   16a24:	mov	r3, #0
   16a28:	str	r3, [fp, #-8]
   16a2c:	b	16a3c <__assert_fail@plt+0x5b10>
   16a30:	ldr	r3, [fp, #-8]
   16a34:	add	r3, r3, #1
   16a38:	str	r3, [fp, #-8]
   16a3c:	ldr	r3, [fp, #-8]
   16a40:	lsl	r3, r3, #2
   16a44:	ldr	r2, [fp, #4]
   16a48:	add	r3, r2, r3
   16a4c:	ldr	r3, [r3]
   16a50:	cmp	r3, #0
   16a54:	bne	16a30 <__assert_fail@plt+0x5b04>
   16a58:	ldr	r3, [fp, #-8]
   16a5c:	str	r3, [sp, #4]
   16a60:	ldr	r3, [fp, #4]
   16a64:	str	r3, [sp]
   16a68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16a6c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16a70:	ldr	r1, [fp, #-20]	; 0xffffffec
   16a74:	ldr	r0, [fp, #-16]
   16a78:	bl	1647c <__assert_fail@plt+0x5550>
   16a7c:	nop	{0}
   16a80:	sub	sp, fp, #4
   16a84:	ldr	fp, [sp]
   16a88:	add	sp, sp, #4
   16a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a90:	str	fp, [sp, #-8]!
   16a94:	str	lr, [sp, #4]
   16a98:	add	fp, sp, #4
   16a9c:	sub	sp, sp, #72	; 0x48
   16aa0:	str	r0, [fp, #-56]	; 0xffffffc8
   16aa4:	str	r1, [fp, #-60]	; 0xffffffc4
   16aa8:	str	r2, [fp, #-64]	; 0xffffffc0
   16aac:	str	r3, [fp, #-68]	; 0xffffffbc
   16ab0:	mov	r3, #0
   16ab4:	str	r3, [fp, #-8]
   16ab8:	b	16ac8 <__assert_fail@plt+0x5b9c>
   16abc:	ldr	r3, [fp, #-8]
   16ac0:	add	r3, r3, #1
   16ac4:	str	r3, [fp, #-8]
   16ac8:	ldr	r3, [fp, #-8]
   16acc:	cmp	r3, #9
   16ad0:	bhi	16b14 <__assert_fail@plt+0x5be8>
   16ad4:	ldr	r3, [fp, #4]
   16ad8:	add	r2, r3, #4
   16adc:	str	r2, [fp, #4]
   16ae0:	ldr	r2, [r3]
   16ae4:	ldr	r3, [fp, #-8]
   16ae8:	lsl	r3, r3, #2
   16aec:	sub	r1, fp, #4
   16af0:	add	r3, r1, r3
   16af4:	str	r2, [r3, #-44]	; 0xffffffd4
   16af8:	ldr	r3, [fp, #-8]
   16afc:	lsl	r3, r3, #2
   16b00:	sub	r2, fp, #4
   16b04:	add	r3, r2, r3
   16b08:	ldr	r3, [r3, #-44]	; 0xffffffd4
   16b0c:	cmp	r3, #0
   16b10:	bne	16abc <__assert_fail@plt+0x5b90>
   16b14:	ldr	r3, [fp, #-8]
   16b18:	str	r3, [sp, #4]
   16b1c:	sub	r3, fp, #48	; 0x30
   16b20:	str	r3, [sp]
   16b24:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16b28:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16b2c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16b30:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16b34:	bl	1647c <__assert_fail@plt+0x5550>
   16b38:	nop	{0}
   16b3c:	sub	sp, fp, #4
   16b40:	ldr	fp, [sp]
   16b44:	add	sp, sp, #4
   16b48:	pop	{pc}		; (ldr pc, [sp], #4)
   16b4c:	push	{r3}		; (str r3, [sp, #-4]!)
   16b50:	str	fp, [sp, #-8]!
   16b54:	str	lr, [sp, #4]
   16b58:	add	fp, sp, #4
   16b5c:	sub	sp, sp, #36	; 0x24
   16b60:	str	r0, [fp, #-20]	; 0xffffffec
   16b64:	str	r1, [fp, #-24]	; 0xffffffe8
   16b68:	str	r2, [fp, #-28]	; 0xffffffe4
   16b6c:	add	r3, fp, #8
   16b70:	str	r3, [fp, #-12]
   16b74:	ldr	r3, [fp, #-12]
   16b78:	str	r3, [sp]
   16b7c:	ldr	r3, [fp, #4]
   16b80:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16b84:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16b88:	ldr	r0, [fp, #-20]	; 0xffffffec
   16b8c:	bl	16a90 <__assert_fail@plt+0x5b64>
   16b90:	nop	{0}
   16b94:	sub	sp, fp, #4
   16b98:	ldr	fp, [sp]
   16b9c:	ldr	lr, [sp, #4]
   16ba0:	add	sp, sp, #8
   16ba4:	add	sp, sp, #4
   16ba8:	bx	lr
   16bac:	str	fp, [sp, #-8]!
   16bb0:	str	lr, [sp, #4]
   16bb4:	add	fp, sp, #4
   16bb8:	movw	r3, #41300	; 0xa154
   16bbc:	movt	r3, #2
   16bc0:	ldr	r3, [r3]
   16bc4:	mov	r1, r3
   16bc8:	mov	r0, #10
   16bcc:	bl	10d58 <fputc_unlocked@plt>
   16bd0:	movw	r0, #39744	; 0x9b40
   16bd4:	movt	r0, #1
   16bd8:	bl	10e3c <gettext@plt>
   16bdc:	mov	r3, r0
   16be0:	movw	r1, #39764	; 0x9b54
   16be4:	movt	r1, #1
   16be8:	mov	r0, r3
   16bec:	bl	10cec <printf@plt>
   16bf0:	movw	r0, #39788	; 0x9b6c
   16bf4:	movt	r0, #1
   16bf8:	bl	10e3c <gettext@plt>
   16bfc:	mov	r3, r0
   16c00:	movw	r2, #39808	; 0x9b80
   16c04:	movt	r2, #1
   16c08:	movw	r1, #39848	; 0x9ba8
   16c0c:	movt	r1, #1
   16c10:	mov	r0, r3
   16c14:	bl	10cec <printf@plt>
   16c18:	movw	r0, #39864	; 0x9bb8
   16c1c:	movt	r0, #1
   16c20:	bl	10e3c <gettext@plt>
   16c24:	mov	r3, r0
   16c28:	movw	r1, #39904	; 0x9be0
   16c2c:	movt	r1, #1
   16c30:	mov	r0, r3
   16c34:	bl	10cec <printf@plt>
   16c38:	nop	{0}
   16c3c:	sub	sp, fp, #4
   16c40:	ldr	fp, [sp]
   16c44:	add	sp, sp, #4
   16c48:	pop	{pc}		; (ldr pc, [sp], #4)
   16c4c:	str	fp, [sp, #-8]!
   16c50:	str	lr, [sp, #4]
   16c54:	add	fp, sp, #4
   16c58:	sub	sp, sp, #16
   16c5c:	str	r0, [fp, #-8]
   16c60:	str	r1, [fp, #-12]
   16c64:	str	r2, [fp, #-16]
   16c68:	ldr	r2, [fp, #-16]
   16c6c:	ldr	r1, [fp, #-12]
   16c70:	ldr	r0, [fp, #-8]
   16c74:	bl	16e30 <__assert_fail@plt+0x5f04>
   16c78:	mov	r3, r0
   16c7c:	mov	r0, r3
   16c80:	sub	sp, fp, #4
   16c84:	ldr	fp, [sp]
   16c88:	add	sp, sp, #4
   16c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c90:	str	fp, [sp, #-8]!
   16c94:	str	lr, [sp, #4]
   16c98:	add	fp, sp, #4
   16c9c:	sub	sp, sp, #8
   16ca0:	str	r0, [fp, #-8]
   16ca4:	ldr	r3, [fp, #-8]
   16ca8:	cmp	r3, #0
   16cac:	bne	16cb4 <__assert_fail@plt+0x5d88>
   16cb0:	bl	17540 <__assert_fail@plt+0x6614>
   16cb4:	ldr	r3, [fp, #-8]
   16cb8:	mov	r0, r3
   16cbc:	sub	sp, fp, #4
   16cc0:	ldr	fp, [sp]
   16cc4:	add	sp, sp, #4
   16cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ccc:	str	fp, [sp, #-8]!
   16cd0:	str	lr, [sp, #4]
   16cd4:	add	fp, sp, #4
   16cd8:	sub	sp, sp, #8
   16cdc:	str	r0, [fp, #-8]
   16ce0:	ldr	r0, [fp, #-8]
   16ce4:	bl	180ec <__assert_fail@plt+0x71c0>
   16ce8:	mov	r3, r0
   16cec:	mov	r0, r3
   16cf0:	bl	16c90 <__assert_fail@plt+0x5d64>
   16cf4:	mov	r3, r0
   16cf8:	mov	r0, r3
   16cfc:	sub	sp, fp, #4
   16d00:	ldr	fp, [sp]
   16d04:	add	sp, sp, #4
   16d08:	pop	{pc}		; (ldr pc, [sp], #4)
   16d0c:	str	fp, [sp, #-8]!
   16d10:	str	lr, [sp, #4]
   16d14:	add	fp, sp, #4
   16d18:	sub	sp, sp, #8
   16d1c:	str	r0, [fp, #-8]
   16d20:	ldr	r0, [fp, #-8]
   16d24:	bl	1849c <__assert_fail@plt+0x7570>
   16d28:	mov	r3, r0
   16d2c:	mov	r0, r3
   16d30:	bl	16c90 <__assert_fail@plt+0x5d64>
   16d34:	mov	r3, r0
   16d38:	mov	r0, r3
   16d3c:	sub	sp, fp, #4
   16d40:	ldr	fp, [sp]
   16d44:	add	sp, sp, #4
   16d48:	pop	{pc}		; (ldr pc, [sp], #4)
   16d4c:	str	fp, [sp, #-8]!
   16d50:	str	lr, [sp, #4]
   16d54:	add	fp, sp, #4
   16d58:	sub	sp, sp, #8
   16d5c:	str	r0, [fp, #-8]
   16d60:	ldr	r0, [fp, #-8]
   16d64:	bl	16ccc <__assert_fail@plt+0x5da0>
   16d68:	mov	r3, r0
   16d6c:	mov	r0, r3
   16d70:	sub	sp, fp, #4
   16d74:	ldr	fp, [sp]
   16d78:	add	sp, sp, #4
   16d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d80:	str	fp, [sp, #-8]!
   16d84:	str	lr, [sp, #4]
   16d88:	add	fp, sp, #4
   16d8c:	sub	sp, sp, #16
   16d90:	str	r0, [fp, #-16]
   16d94:	str	r1, [fp, #-20]	; 0xffffffec
   16d98:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d9c:	ldr	r0, [fp, #-16]
   16da0:	bl	1817c <__assert_fail@plt+0x7250>
   16da4:	str	r0, [fp, #-8]
   16da8:	ldr	r3, [fp, #-8]
   16dac:	cmp	r3, #0
   16db0:	bne	16dd0 <__assert_fail@plt+0x5ea4>
   16db4:	ldr	r3, [fp, #-16]
   16db8:	cmp	r3, #0
   16dbc:	beq	16dcc <__assert_fail@plt+0x5ea0>
   16dc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16dc4:	cmp	r3, #0
   16dc8:	beq	16dd0 <__assert_fail@plt+0x5ea4>
   16dcc:	bl	17540 <__assert_fail@plt+0x6614>
   16dd0:	ldr	r3, [fp, #-8]
   16dd4:	mov	r0, r3
   16dd8:	sub	sp, fp, #4
   16ddc:	ldr	fp, [sp]
   16de0:	add	sp, sp, #4
   16de4:	pop	{pc}		; (ldr pc, [sp], #4)
   16de8:	str	fp, [sp, #-8]!
   16dec:	str	lr, [sp, #4]
   16df0:	add	fp, sp, #4
   16df4:	sub	sp, sp, #8
   16df8:	str	r0, [fp, #-8]
   16dfc:	str	r1, [fp, #-12]
   16e00:	ldr	r1, [fp, #-12]
   16e04:	ldr	r0, [fp, #-8]
   16e08:	bl	184d4 <__assert_fail@plt+0x75a8>
   16e0c:	mov	r3, r0
   16e10:	mov	r0, r3
   16e14:	bl	16c90 <__assert_fail@plt+0x5d64>
   16e18:	mov	r3, r0
   16e1c:	mov	r0, r3
   16e20:	sub	sp, fp, #4
   16e24:	ldr	fp, [sp]
   16e28:	add	sp, sp, #4
   16e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e30:	str	fp, [sp, #-8]!
   16e34:	str	lr, [sp, #4]
   16e38:	add	fp, sp, #4
   16e3c:	sub	sp, sp, #24
   16e40:	str	r0, [fp, #-16]
   16e44:	str	r1, [fp, #-20]	; 0xffffffec
   16e48:	str	r2, [fp, #-24]	; 0xffffffe8
   16e4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16e50:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e54:	ldr	r0, [fp, #-16]
   16e58:	bl	18704 <__assert_fail@plt+0x77d8>
   16e5c:	str	r0, [fp, #-8]
   16e60:	ldr	r3, [fp, #-8]
   16e64:	cmp	r3, #0
   16e68:	bne	16e94 <__assert_fail@plt+0x5f68>
   16e6c:	ldr	r3, [fp, #-16]
   16e70:	cmp	r3, #0
   16e74:	beq	16e90 <__assert_fail@plt+0x5f64>
   16e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e7c:	cmp	r3, #0
   16e80:	beq	16e94 <__assert_fail@plt+0x5f68>
   16e84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e88:	cmp	r3, #0
   16e8c:	beq	16e94 <__assert_fail@plt+0x5f68>
   16e90:	bl	17540 <__assert_fail@plt+0x6614>
   16e94:	ldr	r3, [fp, #-8]
   16e98:	mov	r0, r3
   16e9c:	sub	sp, fp, #4
   16ea0:	ldr	fp, [sp]
   16ea4:	add	sp, sp, #4
   16ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   16eac:	str	fp, [sp, #-8]!
   16eb0:	str	lr, [sp, #4]
   16eb4:	add	fp, sp, #4
   16eb8:	sub	sp, sp, #16
   16ebc:	str	r0, [fp, #-8]
   16ec0:	str	r1, [fp, #-12]
   16ec4:	str	r2, [fp, #-16]
   16ec8:	ldr	r2, [fp, #-16]
   16ecc:	ldr	r1, [fp, #-12]
   16ed0:	ldr	r0, [fp, #-8]
   16ed4:	bl	18574 <__assert_fail@plt+0x7648>
   16ed8:	mov	r3, r0
   16edc:	mov	r0, r3
   16ee0:	bl	16c90 <__assert_fail@plt+0x5d64>
   16ee4:	mov	r3, r0
   16ee8:	mov	r0, r3
   16eec:	sub	sp, fp, #4
   16ef0:	ldr	fp, [sp]
   16ef4:	add	sp, sp, #4
   16ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   16efc:	str	fp, [sp, #-8]!
   16f00:	str	lr, [sp, #4]
   16f04:	add	fp, sp, #4
   16f08:	sub	sp, sp, #8
   16f0c:	str	r0, [fp, #-8]
   16f10:	str	r1, [fp, #-12]
   16f14:	ldr	r2, [fp, #-12]
   16f18:	ldr	r1, [fp, #-8]
   16f1c:	mov	r0, #0
   16f20:	bl	16e30 <__assert_fail@plt+0x5f04>
   16f24:	mov	r3, r0
   16f28:	mov	r0, r3
   16f2c:	sub	sp, fp, #4
   16f30:	ldr	fp, [sp]
   16f34:	add	sp, sp, #4
   16f38:	pop	{pc}		; (ldr pc, [sp], #4)
   16f3c:	str	fp, [sp, #-8]!
   16f40:	str	lr, [sp, #4]
   16f44:	add	fp, sp, #4
   16f48:	sub	sp, sp, #8
   16f4c:	str	r0, [fp, #-8]
   16f50:	str	r1, [fp, #-12]
   16f54:	ldr	r2, [fp, #-12]
   16f58:	ldr	r1, [fp, #-8]
   16f5c:	mov	r0, #0
   16f60:	bl	16eac <__assert_fail@plt+0x5f80>
   16f64:	mov	r3, r0
   16f68:	mov	r0, r3
   16f6c:	sub	sp, fp, #4
   16f70:	ldr	fp, [sp]
   16f74:	add	sp, sp, #4
   16f78:	pop	{pc}		; (ldr pc, [sp], #4)
   16f7c:	str	fp, [sp, #-8]!
   16f80:	str	lr, [sp, #4]
   16f84:	add	fp, sp, #4
   16f88:	sub	sp, sp, #8
   16f8c:	str	r0, [fp, #-8]
   16f90:	str	r1, [fp, #-12]
   16f94:	mov	r2, #1
   16f98:	ldr	r1, [fp, #-12]
   16f9c:	ldr	r0, [fp, #-8]
   16fa0:	bl	16fbc <__assert_fail@plt+0x6090>
   16fa4:	mov	r3, r0
   16fa8:	mov	r0, r3
   16fac:	sub	sp, fp, #4
   16fb0:	ldr	fp, [sp]
   16fb4:	add	sp, sp, #4
   16fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fbc:	str	fp, [sp, #-8]!
   16fc0:	str	lr, [sp, #4]
   16fc4:	add	fp, sp, #4
   16fc8:	sub	sp, sp, #24
   16fcc:	str	r0, [fp, #-16]
   16fd0:	str	r1, [fp, #-20]	; 0xffffffec
   16fd4:	str	r2, [fp, #-24]	; 0xffffffe8
   16fd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16fdc:	ldr	r3, [r3]
   16fe0:	str	r3, [fp, #-8]
   16fe4:	ldr	r3, [fp, #-16]
   16fe8:	cmp	r3, #0
   16fec:	bne	17034 <__assert_fail@plt+0x6108>
   16ff0:	ldr	r3, [fp, #-8]
   16ff4:	cmp	r3, #0
   16ff8:	bne	17070 <__assert_fail@plt+0x6144>
   16ffc:	mov	r2, #64	; 0x40
   17000:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17004:	udiv	r3, r2, r3
   17008:	str	r3, [fp, #-8]
   1700c:	ldr	r3, [fp, #-8]
   17010:	cmp	r3, #0
   17014:	moveq	r3, #1
   17018:	movne	r3, #0
   1701c:	uxtb	r3, r3
   17020:	mov	r2, r3
   17024:	ldr	r3, [fp, #-8]
   17028:	add	r3, r2, r3
   1702c:	str	r3, [fp, #-8]
   17030:	b	17070 <__assert_fail@plt+0x6144>
   17034:	ldr	r2, [fp, #-8]
   17038:	ldr	r3, [fp, #-8]
   1703c:	lsr	r3, r3, #1
   17040:	add	r3, r3, #1
   17044:	mov	r1, #0
   17048:	adds	r3, r2, r3
   1704c:	bcc	17054 <__assert_fail@plt+0x6128>
   17050:	mov	r1, #1
   17054:	str	r3, [fp, #-8]
   17058:	mov	r3, r1
   1705c:	and	r3, r3, #1
   17060:	uxtb	r3, r3
   17064:	cmp	r3, #0
   17068:	beq	17070 <__assert_fail@plt+0x6144>
   1706c:	bl	17540 <__assert_fail@plt+0x6614>
   17070:	ldr	r3, [fp, #-8]
   17074:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17078:	mov	r1, r3
   1707c:	ldr	r0, [fp, #-16]
   17080:	bl	16e30 <__assert_fail@plt+0x5f04>
   17084:	str	r0, [fp, #-16]
   17088:	ldr	r2, [fp, #-8]
   1708c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17090:	str	r2, [r3]
   17094:	ldr	r3, [fp, #-16]
   17098:	mov	r0, r3
   1709c:	sub	sp, fp, #4
   170a0:	ldr	fp, [sp]
   170a4:	add	sp, sp, #4
   170a8:	pop	{pc}		; (ldr pc, [sp], #4)
   170ac:	str	fp, [sp, #-8]!
   170b0:	str	lr, [sp, #4]
   170b4:	add	fp, sp, #4
   170b8:	sub	sp, sp, #32
   170bc:	str	r0, [fp, #-24]	; 0xffffffe8
   170c0:	str	r1, [fp, #-28]	; 0xffffffe4
   170c4:	str	r2, [fp, #-32]	; 0xffffffe0
   170c8:	str	r3, [fp, #-36]	; 0xffffffdc
   170cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   170d0:	ldr	r3, [r3]
   170d4:	str	r3, [fp, #-8]
   170d8:	ldr	r3, [fp, #-8]
   170dc:	asr	r3, r3, #1
   170e0:	mov	r1, #0
   170e4:	ldr	r2, [fp, #-8]
   170e8:	adds	r3, r2, r3
   170ec:	bvc	170f4 <__assert_fail@plt+0x61c8>
   170f0:	mov	r1, #1
   170f4:	str	r3, [fp, #-16]
   170f8:	mov	r3, r1
   170fc:	and	r3, r3, #1
   17100:	uxtb	r3, r3
   17104:	cmp	r3, #0
   17108:	beq	17114 <__assert_fail@plt+0x61e8>
   1710c:	mvn	r3, #-2147483648	; 0x80000000
   17110:	str	r3, [fp, #-16]
   17114:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17118:	cmp	r3, #0
   1711c:	blt	17138 <__assert_fail@plt+0x620c>
   17120:	ldr	r3, [fp, #-16]
   17124:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17128:	cmp	r2, r3
   1712c:	bge	17138 <__assert_fail@plt+0x620c>
   17130:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17134:	str	r3, [fp, #-16]
   17138:	ldr	r2, [fp, #-16]
   1713c:	mov	lr, #0
   17140:	ldr	r3, [fp, #4]
   17144:	smull	r2, r3, r2, r3
   17148:	mov	r0, #0
   1714c:	mov	r1, #0
   17150:	mov	r0, r3
   17154:	asr	r1, r3, #31
   17158:	asr	ip, r2, #31
   1715c:	cmp	ip, r0
   17160:	beq	17168 <__assert_fail@plt+0x623c>
   17164:	mov	lr, #1
   17168:	mov	r3, r2
   1716c:	str	r3, [fp, #-20]	; 0xffffffec
   17170:	mov	r3, lr
   17174:	and	r3, r3, #1
   17178:	uxtb	r3, r3
   1717c:	cmp	r3, #0
   17180:	beq	1718c <__assert_fail@plt+0x6260>
   17184:	mvn	r3, #-2147483648	; 0x80000000
   17188:	b	171a4 <__assert_fail@plt+0x6278>
   1718c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17190:	cmp	r3, #63	; 0x3f
   17194:	bgt	171a0 <__assert_fail@plt+0x6274>
   17198:	mov	r3, #64	; 0x40
   1719c:	b	171a4 <__assert_fail@plt+0x6278>
   171a0:	mov	r3, #0
   171a4:	str	r3, [fp, #-12]
   171a8:	ldr	r3, [fp, #-12]
   171ac:	cmp	r3, #0
   171b0:	beq	171e8 <__assert_fail@plt+0x62bc>
   171b4:	ldr	r2, [fp, #-12]
   171b8:	ldr	r3, [fp, #4]
   171bc:	sdiv	r3, r2, r3
   171c0:	str	r3, [fp, #-16]
   171c4:	ldr	r3, [fp, #-12]
   171c8:	ldr	r2, [fp, #4]
   171cc:	sdiv	r2, r3, r2
   171d0:	ldr	r1, [fp, #4]
   171d4:	mul	r2, r1, r2
   171d8:	sub	r3, r3, r2
   171dc:	ldr	r2, [fp, #-12]
   171e0:	sub	r3, r2, r3
   171e4:	str	r3, [fp, #-20]	; 0xffffffec
   171e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171ec:	cmp	r3, #0
   171f0:	bne	17200 <__assert_fail@plt+0x62d4>
   171f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171f8:	mov	r2, #0
   171fc:	str	r2, [r3]
   17200:	ldr	r2, [fp, #-16]
   17204:	ldr	r3, [fp, #-8]
   17208:	sub	r3, r2, r3
   1720c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17210:	cmp	r2, r3
   17214:	ble	172b4 <__assert_fail@plt+0x6388>
   17218:	mov	r1, #0
   1721c:	ldr	r2, [fp, #-8]
   17220:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17224:	adds	r3, r2, r3
   17228:	bvc	17230 <__assert_fail@plt+0x6304>
   1722c:	mov	r1, #1
   17230:	str	r3, [fp, #-16]
   17234:	mov	r3, r1
   17238:	and	r3, r3, #1
   1723c:	uxtb	r3, r3
   17240:	cmp	r3, #0
   17244:	bne	172b0 <__assert_fail@plt+0x6384>
   17248:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1724c:	cmp	r3, #0
   17250:	blt	17264 <__assert_fail@plt+0x6338>
   17254:	ldr	r3, [fp, #-16]
   17258:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1725c:	cmp	r2, r3
   17260:	blt	172b0 <__assert_fail@plt+0x6384>
   17264:	ldr	r2, [fp, #-16]
   17268:	mov	lr, #0
   1726c:	ldr	r3, [fp, #4]
   17270:	smull	r2, r3, r2, r3
   17274:	mov	r0, #0
   17278:	mov	r1, #0
   1727c:	mov	r0, r3
   17280:	asr	r1, r3, #31
   17284:	asr	ip, r2, #31
   17288:	cmp	ip, r0
   1728c:	beq	17294 <__assert_fail@plt+0x6368>
   17290:	mov	lr, #1
   17294:	mov	r3, r2
   17298:	str	r3, [fp, #-20]	; 0xffffffec
   1729c:	mov	r3, lr
   172a0:	and	r3, r3, #1
   172a4:	uxtb	r3, r3
   172a8:	cmp	r3, #0
   172ac:	beq	172b4 <__assert_fail@plt+0x6388>
   172b0:	bl	17540 <__assert_fail@plt+0x6614>
   172b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   172b8:	mov	r1, r3
   172bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   172c0:	bl	16d80 <__assert_fail@plt+0x5e54>
   172c4:	str	r0, [fp, #-24]	; 0xffffffe8
   172c8:	ldr	r2, [fp, #-16]
   172cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   172d0:	str	r2, [r3]
   172d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172d8:	mov	r0, r3
   172dc:	sub	sp, fp, #4
   172e0:	ldr	fp, [sp]
   172e4:	add	sp, sp, #4
   172e8:	pop	{pc}		; (ldr pc, [sp], #4)
   172ec:	str	fp, [sp, #-8]!
   172f0:	str	lr, [sp, #4]
   172f4:	add	fp, sp, #4
   172f8:	sub	sp, sp, #8
   172fc:	str	r0, [fp, #-8]
   17300:	mov	r1, #1
   17304:	ldr	r0, [fp, #-8]
   17308:	bl	1735c <__assert_fail@plt+0x6430>
   1730c:	mov	r3, r0
   17310:	mov	r0, r3
   17314:	sub	sp, fp, #4
   17318:	ldr	fp, [sp]
   1731c:	add	sp, sp, #4
   17320:	pop	{pc}		; (ldr pc, [sp], #4)
   17324:	str	fp, [sp, #-8]!
   17328:	str	lr, [sp, #4]
   1732c:	add	fp, sp, #4
   17330:	sub	sp, sp, #8
   17334:	str	r0, [fp, #-8]
   17338:	mov	r1, #1
   1733c:	ldr	r0, [fp, #-8]
   17340:	bl	173a4 <__assert_fail@plt+0x6478>
   17344:	mov	r3, r0
   17348:	mov	r0, r3
   1734c:	sub	sp, fp, #4
   17350:	ldr	fp, [sp]
   17354:	add	sp, sp, #4
   17358:	pop	{pc}		; (ldr pc, [sp], #4)
   1735c:	str	fp, [sp, #-8]!
   17360:	str	lr, [sp, #4]
   17364:	add	fp, sp, #4
   17368:	sub	sp, sp, #8
   1736c:	str	r0, [fp, #-8]
   17370:	str	r1, [fp, #-12]
   17374:	ldr	r1, [fp, #-12]
   17378:	ldr	r0, [fp, #-8]
   1737c:	bl	1801c <__assert_fail@plt+0x70f0>
   17380:	mov	r3, r0
   17384:	mov	r0, r3
   17388:	bl	16c90 <__assert_fail@plt+0x5d64>
   1738c:	mov	r3, r0
   17390:	mov	r0, r3
   17394:	sub	sp, fp, #4
   17398:	ldr	fp, [sp]
   1739c:	add	sp, sp, #4
   173a0:	pop	{pc}		; (ldr pc, [sp], #4)
   173a4:	str	fp, [sp, #-8]!
   173a8:	str	lr, [sp, #4]
   173ac:	add	fp, sp, #4
   173b0:	sub	sp, sp, #8
   173b4:	str	r0, [fp, #-8]
   173b8:	str	r1, [fp, #-12]
   173bc:	ldr	r1, [fp, #-12]
   173c0:	ldr	r0, [fp, #-8]
   173c4:	bl	18530 <__assert_fail@plt+0x7604>
   173c8:	mov	r3, r0
   173cc:	mov	r0, r3
   173d0:	bl	16c90 <__assert_fail@plt+0x5d64>
   173d4:	mov	r3, r0
   173d8:	mov	r0, r3
   173dc:	sub	sp, fp, #4
   173e0:	ldr	fp, [sp]
   173e4:	add	sp, sp, #4
   173e8:	pop	{pc}		; (ldr pc, [sp], #4)
   173ec:	str	fp, [sp, #-8]!
   173f0:	str	lr, [sp, #4]
   173f4:	add	fp, sp, #4
   173f8:	sub	sp, sp, #8
   173fc:	str	r0, [fp, #-8]
   17400:	str	r1, [fp, #-12]
   17404:	ldr	r0, [fp, #-12]
   17408:	bl	16ccc <__assert_fail@plt+0x5da0>
   1740c:	mov	r3, r0
   17410:	ldr	r2, [fp, #-12]
   17414:	ldr	r1, [fp, #-8]
   17418:	mov	r0, r3
   1741c:	bl	10d28 <memcpy@plt>
   17420:	mov	r3, r0
   17424:	mov	r0, r3
   17428:	sub	sp, fp, #4
   1742c:	ldr	fp, [sp]
   17430:	add	sp, sp, #4
   17434:	pop	{pc}		; (ldr pc, [sp], #4)
   17438:	str	fp, [sp, #-8]!
   1743c:	str	lr, [sp, #4]
   17440:	add	fp, sp, #4
   17444:	sub	sp, sp, #8
   17448:	str	r0, [fp, #-8]
   1744c:	str	r1, [fp, #-12]
   17450:	ldr	r0, [fp, #-12]
   17454:	bl	16d0c <__assert_fail@plt+0x5de0>
   17458:	mov	r3, r0
   1745c:	mov	r0, r3
   17460:	ldr	r3, [fp, #-12]
   17464:	mov	r2, r3
   17468:	ldr	r1, [fp, #-8]
   1746c:	bl	10d28 <memcpy@plt>
   17470:	mov	r3, r0
   17474:	mov	r0, r3
   17478:	sub	sp, fp, #4
   1747c:	ldr	fp, [sp]
   17480:	add	sp, sp, #4
   17484:	pop	{pc}		; (ldr pc, [sp], #4)
   17488:	str	fp, [sp, #-8]!
   1748c:	str	lr, [sp, #4]
   17490:	add	fp, sp, #4
   17494:	sub	sp, sp, #16
   17498:	str	r0, [fp, #-16]
   1749c:	str	r1, [fp, #-20]	; 0xffffffec
   174a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   174a4:	add	r3, r3, #1
   174a8:	mov	r0, r3
   174ac:	bl	16d0c <__assert_fail@plt+0x5de0>
   174b0:	mov	r3, r0
   174b4:	str	r3, [fp, #-8]
   174b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   174bc:	ldr	r2, [fp, #-8]
   174c0:	add	r3, r2, r3
   174c4:	mov	r2, #0
   174c8:	strb	r2, [r3]
   174cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   174d0:	mov	r2, r3
   174d4:	ldr	r1, [fp, #-16]
   174d8:	ldr	r0, [fp, #-8]
   174dc:	bl	10d28 <memcpy@plt>
   174e0:	mov	r3, r0
   174e4:	mov	r0, r3
   174e8:	sub	sp, fp, #4
   174ec:	ldr	fp, [sp]
   174f0:	add	sp, sp, #4
   174f4:	pop	{pc}		; (ldr pc, [sp], #4)
   174f8:	str	fp, [sp, #-8]!
   174fc:	str	lr, [sp, #4]
   17500:	add	fp, sp, #4
   17504:	sub	sp, sp, #8
   17508:	str	r0, [fp, #-8]
   1750c:	ldr	r0, [fp, #-8]
   17510:	bl	10e48 <strlen@plt>
   17514:	mov	r3, r0
   17518:	add	r3, r3, #1
   1751c:	mov	r1, r3
   17520:	ldr	r0, [fp, #-8]
   17524:	bl	173ec <__assert_fail@plt+0x64c0>
   17528:	mov	r3, r0
   1752c:	mov	r0, r3
   17530:	sub	sp, fp, #4
   17534:	ldr	fp, [sp]
   17538:	add	sp, sp, #4
   1753c:	pop	{pc}		; (ldr pc, [sp], #4)
   17540:	strd	r4, [sp, #-16]!
   17544:	str	fp, [sp, #8]
   17548:	str	lr, [sp, #12]
   1754c:	add	fp, sp, #12
   17550:	movw	r3, #41200	; 0xa0f0
   17554:	movt	r3, #2
   17558:	ldr	r4, [r3]
   1755c:	movw	r0, #39984	; 0x9c30
   17560:	movt	r0, #1
   17564:	bl	10e3c <gettext@plt>
   17568:	mov	r3, r0
   1756c:	movw	r2, #40004	; 0x9c44
   17570:	movt	r2, #1
   17574:	mov	r1, #0
   17578:	mov	r0, r4
   1757c:	bl	10ddc <error@plt>
   17580:	bl	10f14 <abort@plt>
   17584:	strd	r4, [sp, #-16]!
   17588:	str	fp, [sp, #8]
   1758c:	str	lr, [sp, #12]
   17590:	add	fp, sp, #12
   17594:	sub	sp, sp, #40	; 0x28
   17598:	str	r0, [fp, #-32]	; 0xffffffe0
   1759c:	str	r1, [fp, #-36]	; 0xffffffdc
   175a0:	strd	r2, [fp, #-44]	; 0xffffffd4
   175a4:	sub	r2, fp, #28
   175a8:	ldr	r3, [fp, #12]
   175ac:	str	r3, [sp]
   175b0:	mov	r3, r2
   175b4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   175b8:	mov	r1, #0
   175bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   175c0:	bl	179c8 <__assert_fail@plt+0x6a9c>
   175c4:	str	r0, [fp, #-16]
   175c8:	ldr	r3, [fp, #-16]
   175cc:	cmp	r3, #0
   175d0:	bne	17644 <__assert_fail@plt+0x6718>
   175d4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   175d8:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   175dc:	cmp	r1, r3
   175e0:	cmpeq	r0, r2
   175e4:	bhi	175fc <__assert_fail@plt+0x66d0>
   175e8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   175ec:	ldrd	r0, [fp, #4]
   175f0:	cmp	r1, r3
   175f4:	cmpeq	r0, r2
   175f8:	bcs	17680 <__assert_fail@plt+0x6754>
   175fc:	mov	r3, #1
   17600:	str	r3, [fp, #-16]
   17604:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17608:	mvn	r0, #-1073741824	; 0xc0000000
   1760c:	mov	r1, #0
   17610:	cmp	r3, r1
   17614:	cmpeq	r2, r0
   17618:	bls	17630 <__assert_fail@plt+0x6704>
   1761c:	bl	10e6c <__errno_location@plt>
   17620:	mov	r2, r0
   17624:	mov	r3, #75	; 0x4b
   17628:	str	r3, [r2]
   1762c:	b	17680 <__assert_fail@plt+0x6754>
   17630:	bl	10e6c <__errno_location@plt>
   17634:	mov	r2, r0
   17638:	mov	r3, #34	; 0x22
   1763c:	str	r3, [r2]
   17640:	b	17680 <__assert_fail@plt+0x6754>
   17644:	ldr	r3, [fp, #-16]
   17648:	cmp	r3, #1
   1764c:	bne	17664 <__assert_fail@plt+0x6738>
   17650:	bl	10e6c <__errno_location@plt>
   17654:	mov	r2, r0
   17658:	mov	r3, #75	; 0x4b
   1765c:	str	r3, [r2]
   17660:	b	17680 <__assert_fail@plt+0x6754>
   17664:	ldr	r3, [fp, #-16]
   17668:	cmp	r3, #3
   1766c:	bne	17680 <__assert_fail@plt+0x6754>
   17670:	bl	10e6c <__errno_location@plt>
   17674:	mov	r2, r0
   17678:	mov	r3, #0
   1767c:	str	r3, [r2]
   17680:	ldr	r3, [fp, #-16]
   17684:	cmp	r3, #0
   17688:	beq	176f4 <__assert_fail@plt+0x67c8>
   1768c:	ldr	r3, [fp, #20]
   17690:	cmp	r3, #0
   17694:	beq	176a0 <__assert_fail@plt+0x6774>
   17698:	ldr	r4, [fp, #20]
   1769c:	b	176a4 <__assert_fail@plt+0x6778>
   176a0:	mov	r4, #1
   176a4:	bl	10e6c <__errno_location@plt>
   176a8:	mov	r3, r0
   176ac:	ldr	r3, [r3]
   176b0:	cmp	r3, #22
   176b4:	beq	176c8 <__assert_fail@plt+0x679c>
   176b8:	bl	10e6c <__errno_location@plt>
   176bc:	mov	r3, r0
   176c0:	ldr	r5, [r3]
   176c4:	b	176cc <__assert_fail@plt+0x67a0>
   176c8:	mov	r5, #0
   176cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   176d0:	bl	16444 <__assert_fail@plt+0x5518>
   176d4:	mov	r3, r0
   176d8:	str	r3, [sp]
   176dc:	ldr	r3, [fp, #16]
   176e0:	movw	r2, #40008	; 0x9c48
   176e4:	movt	r2, #1
   176e8:	mov	r1, r5
   176ec:	mov	r0, r4
   176f0:	bl	10ddc <error@plt>
   176f4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   176f8:	mov	r0, r2
   176fc:	mov	r1, r3
   17700:	sub	sp, fp, #12
   17704:	ldrd	r4, [sp]
   17708:	ldr	fp, [sp, #8]
   1770c:	add	sp, sp, #12
   17710:	pop	{pc}		; (ldr pc, [sp], #4)
   17714:	str	fp, [sp, #-8]!
   17718:	str	lr, [sp, #4]
   1771c:	add	fp, sp, #4
   17720:	sub	sp, sp, #40	; 0x28
   17724:	str	r0, [fp, #-8]
   17728:	strd	r2, [fp, #-20]	; 0xffffffec
   1772c:	ldr	r3, [fp, #20]
   17730:	str	r3, [sp, #16]
   17734:	ldr	r3, [fp, #16]
   17738:	str	r3, [sp, #12]
   1773c:	ldr	r3, [fp, #12]
   17740:	str	r3, [sp, #8]
   17744:	ldrd	r2, [fp, #4]
   17748:	strd	r2, [sp]
   1774c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   17750:	mov	r1, #10
   17754:	ldr	r0, [fp, #-8]
   17758:	bl	17584 <__assert_fail@plt+0x6658>
   1775c:	mov	r2, r0
   17760:	mov	r3, r1
   17764:	mov	r0, r2
   17768:	mov	r1, r3
   1776c:	sub	sp, fp, #4
   17770:	ldr	fp, [sp]
   17774:	add	sp, sp, #4
   17778:	pop	{pc}		; (ldr pc, [sp], #4)
   1777c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17780:	strd	r6, [sp, #8]
   17784:	strd	r8, [sp, #16]
   17788:	str	fp, [sp, #24]
   1778c:	add	fp, sp, #24
   17790:	sub	sp, sp, #44	; 0x2c
   17794:	str	r0, [fp, #-40]	; 0xffffffd8
   17798:	str	r1, [fp, #-44]	; 0xffffffd4
   1779c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   177a0:	ldrd	r4, [r3]
   177a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   177a8:	mov	r6, r3
   177ac:	asr	r7, r6, #31
   177b0:	mov	r2, #0
   177b4:	mov	r3, #0
   177b8:	strd	r2, [fp, #-60]	; 0xffffffc4
   177bc:	cmp	r6, #0
   177c0:	sbcs	r3, r7, #0
   177c4:	bge	177dc <__assert_fail@plt+0x68b0>
   177c8:	orrs	r3, r4, r5
   177cc:	beq	177dc <__assert_fail@plt+0x68b0>
   177d0:	mov	r2, #1
   177d4:	mov	r3, #0
   177d8:	strd	r2, [fp, #-60]	; 0xffffffc4
   177dc:	mov	r0, #0
   177e0:	mov	r1, #0
   177e4:	mov	r0, r7
   177e8:	mov	r1, #0
   177ec:	mov	r2, #0
   177f0:	mov	r3, #0
   177f4:	mov	r2, r5
   177f8:	mov	r3, #0
   177fc:	cmp	r0, #0
   17800:	bne	17824 <__assert_fail@plt+0x68f8>
   17804:	cmp	r2, #0
   17808:	bne	17818 <__assert_fail@plt+0x68ec>
   1780c:	umull	r2, r3, r6, r4
   17810:	strd	r2, [fp, #-52]	; 0xffffffcc
   17814:	b	178f0 <__assert_fail@plt+0x69c4>
   17818:	mov	r3, r2
   1781c:	mov	r2, r6
   17820:	b	17834 <__assert_fail@plt+0x6908>
   17824:	cmp	r2, #0
   17828:	bne	178ac <__assert_fail@plt+0x6980>
   1782c:	mov	r3, r0
   17830:	mov	r2, r4
   17834:	umull	r8, r9, r6, r4
   17838:	umull	r2, r3, r2, r3
   1783c:	mov	r0, r2
   17840:	mov	r1, r3
   17844:	mov	r2, #0
   17848:	mov	r3, #0
   1784c:	mov	r2, r9
   17850:	mov	r3, #0
   17854:	adds	ip, r0, r2
   17858:	str	ip, [fp, #-68]	; 0xffffffbc
   1785c:	adc	r3, r1, r3
   17860:	str	r3, [fp, #-64]	; 0xffffffc0
   17864:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   17868:	mov	r2, #0
   1786c:	mov	r3, #0
   17870:	mov	r2, r1
   17874:	asr	r3, r1, #31
   17878:	cmp	r2, #0
   1787c:	bne	178c8 <__assert_fail@plt+0x699c>
   17880:	mov	r2, #0
   17884:	mov	r3, #0
   17888:	mov	r3, r0
   1788c:	mov	r2, #0
   17890:	mov	r0, r8
   17894:	mov	r1, #0
   17898:	orr	ip, r2, r0
   1789c:	str	ip, [fp, #-52]	; 0xffffffcc
   178a0:	orr	r3, r3, r1
   178a4:	str	r3, [fp, #-48]	; 0xffffffd0
   178a8:	b	178f0 <__assert_fail@plt+0x69c4>
   178ac:	mul	r2, r4, r7
   178b0:	mul	r3, r6, r5
   178b4:	add	r1, r2, r3
   178b8:	umull	r2, r3, r6, r4
   178bc:	add	r1, r1, r3
   178c0:	mov	r3, r1
   178c4:	strd	r2, [fp, #-52]	; 0xffffffcc
   178c8:	mul	r2, r4, r7
   178cc:	mul	r3, r6, r5
   178d0:	add	r1, r2, r3
   178d4:	umull	r2, r3, r6, r4
   178d8:	add	r1, r1, r3
   178dc:	mov	r3, r1
   178e0:	strd	r2, [fp, #-52]	; 0xffffffcc
   178e4:	mov	r2, #1
   178e8:	mov	r3, #0
   178ec:	strd	r2, [fp, #-60]	; 0xffffffc4
   178f0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   178f4:	strd	r2, [fp, #-36]	; 0xffffffdc
   178f8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   178fc:	mov	r3, r2
   17900:	and	r3, r3, #1
   17904:	uxtb	r3, r3
   17908:	cmp	r3, #0
   1790c:	beq	17928 <__assert_fail@plt+0x69fc>
   17910:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17914:	mvn	r2, #0
   17918:	mvn	r3, #0
   1791c:	strd	r2, [r1]
   17920:	mov	r3, #1
   17924:	b	17938 <__assert_fail@plt+0x6a0c>
   17928:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1792c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17930:	strd	r2, [r1]
   17934:	mov	r3, #0
   17938:	mov	r0, r3
   1793c:	sub	sp, fp, #24
   17940:	ldrd	r4, [sp]
   17944:	ldrd	r6, [sp, #8]
   17948:	ldrd	r8, [sp, #16]
   1794c:	ldr	fp, [sp, #24]
   17950:	add	sp, sp, #28
   17954:	bx	lr
   17958:	str	fp, [sp, #-8]!
   1795c:	str	lr, [sp, #4]
   17960:	add	fp, sp, #4
   17964:	sub	sp, sp, #24
   17968:	str	r0, [fp, #-16]
   1796c:	str	r1, [fp, #-20]	; 0xffffffec
   17970:	str	r2, [fp, #-24]	; 0xffffffe8
   17974:	mov	r3, #0
   17978:	str	r3, [fp, #-8]
   1797c:	b	1799c <__assert_fail@plt+0x6a70>
   17980:	ldr	r1, [fp, #-20]	; 0xffffffec
   17984:	ldr	r0, [fp, #-16]
   17988:	bl	1777c <__assert_fail@plt+0x6850>
   1798c:	mov	r2, r0
   17990:	ldr	r3, [fp, #-8]
   17994:	orr	r3, r3, r2
   17998:	str	r3, [fp, #-8]
   1799c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179a0:	sub	r2, r3, #1
   179a4:	str	r2, [fp, #-24]	; 0xffffffe8
   179a8:	cmp	r3, #0
   179ac:	bne	17980 <__assert_fail@plt+0x6a54>
   179b0:	ldr	r3, [fp, #-8]
   179b4:	mov	r0, r3
   179b8:	sub	sp, fp, #4
   179bc:	ldr	fp, [sp]
   179c0:	add	sp, sp, #4
   179c4:	pop	{pc}		; (ldr pc, [sp], #4)
   179c8:	str	fp, [sp, #-8]!
   179cc:	str	lr, [sp, #4]
   179d0:	add	fp, sp, #4
   179d4:	sub	sp, sp, #56	; 0x38
   179d8:	str	r0, [fp, #-48]	; 0xffffffd0
   179dc:	str	r1, [fp, #-52]	; 0xffffffcc
   179e0:	str	r2, [fp, #-56]	; 0xffffffc8
   179e4:	str	r3, [fp, #-60]	; 0xffffffc4
   179e8:	mov	r3, #0
   179ec:	str	r3, [fp, #-8]
   179f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   179f4:	cmp	r3, #0
   179f8:	blt	17a08 <__assert_fail@plt+0x6adc>
   179fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17a00:	cmp	r3, #36	; 0x24
   17a04:	ble	17a28 <__assert_fail@plt+0x6afc>
   17a08:	movw	r3, #40072	; 0x9c88
   17a0c:	movt	r3, #1
   17a10:	mov	r2, #85	; 0x55
   17a14:	movw	r1, #40016	; 0x9c50
   17a18:	movt	r1, #1
   17a1c:	movw	r0, #40032	; 0x9c60
   17a20:	movt	r0, #1
   17a24:	bl	10f2c <__assert_fail@plt>
   17a28:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17a2c:	cmp	r3, #0
   17a30:	bne	17a3c <__assert_fail@plt+0x6b10>
   17a34:	sub	r3, fp, #36	; 0x24
   17a38:	b	17a40 <__assert_fail@plt+0x6b14>
   17a3c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17a40:	str	r3, [fp, #-32]	; 0xffffffe0
   17a44:	bl	10e6c <__errno_location@plt>
   17a48:	mov	r2, r0
   17a4c:	mov	r3, #0
   17a50:	str	r3, [r2]
   17a54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17a58:	str	r3, [fp, #-12]
   17a5c:	ldr	r3, [fp, #-12]
   17a60:	ldrb	r3, [r3]
   17a64:	strb	r3, [fp, #-13]
   17a68:	b	17a84 <__assert_fail@plt+0x6b58>
   17a6c:	ldr	r3, [fp, #-12]
   17a70:	add	r3, r3, #1
   17a74:	str	r3, [fp, #-12]
   17a78:	ldr	r3, [fp, #-12]
   17a7c:	ldrb	r3, [r3]
   17a80:	strb	r3, [fp, #-13]
   17a84:	bl	10e24 <__ctype_b_loc@plt>
   17a88:	mov	r3, r0
   17a8c:	ldr	r2, [r3]
   17a90:	ldrb	r3, [fp, #-13]
   17a94:	lsl	r3, r3, #1
   17a98:	add	r3, r2, r3
   17a9c:	ldrh	r3, [r3]
   17aa0:	and	r3, r3, #8192	; 0x2000
   17aa4:	cmp	r3, #0
   17aa8:	bne	17a6c <__assert_fail@plt+0x6b40>
   17aac:	ldrb	r3, [fp, #-13]
   17ab0:	cmp	r3, #45	; 0x2d
   17ab4:	bne	17ac0 <__assert_fail@plt+0x6b94>
   17ab8:	mov	r3, #4
   17abc:	b	18008 <__assert_fail@plt+0x70dc>
   17ac0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17ac4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17ac8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17acc:	bl	10e9c <strtoumax@plt>
   17ad0:	mov	r2, r0
   17ad4:	mov	r3, r1
   17ad8:	strd	r2, [fp, #-44]	; 0xffffffd4
   17adc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ae0:	ldr	r3, [r3]
   17ae4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17ae8:	cmp	r2, r3
   17aec:	bne	17b4c <__assert_fail@plt+0x6c20>
   17af0:	ldr	r3, [fp, #4]
   17af4:	cmp	r3, #0
   17af8:	beq	17b44 <__assert_fail@plt+0x6c18>
   17afc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b00:	ldr	r3, [r3]
   17b04:	ldrb	r3, [r3]
   17b08:	cmp	r3, #0
   17b0c:	beq	17b44 <__assert_fail@plt+0x6c18>
   17b10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b14:	ldr	r3, [r3]
   17b18:	ldrb	r3, [r3]
   17b1c:	mov	r1, r3
   17b20:	ldr	r0, [fp, #4]
   17b24:	bl	10e54 <strchr@plt>
   17b28:	mov	r3, r0
   17b2c:	cmp	r3, #0
   17b30:	beq	17b44 <__assert_fail@plt+0x6c18>
   17b34:	mov	r2, #1
   17b38:	mov	r3, #0
   17b3c:	strd	r2, [fp, #-44]	; 0xffffffd4
   17b40:	b	17b84 <__assert_fail@plt+0x6c58>
   17b44:	mov	r3, #4
   17b48:	b	18008 <__assert_fail@plt+0x70dc>
   17b4c:	bl	10e6c <__errno_location@plt>
   17b50:	mov	r3, r0
   17b54:	ldr	r3, [r3]
   17b58:	cmp	r3, #0
   17b5c:	beq	17b84 <__assert_fail@plt+0x6c58>
   17b60:	bl	10e6c <__errno_location@plt>
   17b64:	mov	r3, r0
   17b68:	ldr	r3, [r3]
   17b6c:	cmp	r3, #34	; 0x22
   17b70:	beq	17b7c <__assert_fail@plt+0x6c50>
   17b74:	mov	r3, #4
   17b78:	b	18008 <__assert_fail@plt+0x70dc>
   17b7c:	mov	r3, #1
   17b80:	str	r3, [fp, #-8]
   17b84:	ldr	r3, [fp, #4]
   17b88:	cmp	r3, #0
   17b8c:	bne	17ba4 <__assert_fail@plt+0x6c78>
   17b90:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17b94:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17b98:	strd	r2, [r1]
   17b9c:	ldr	r3, [fp, #-8]
   17ba0:	b	18008 <__assert_fail@plt+0x70dc>
   17ba4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ba8:	ldr	r3, [r3]
   17bac:	ldrb	r3, [r3]
   17bb0:	cmp	r3, #0
   17bb4:	beq	17ff8 <__assert_fail@plt+0x70cc>
   17bb8:	mov	r3, #1024	; 0x400
   17bbc:	str	r3, [fp, #-20]	; 0xffffffec
   17bc0:	mov	r3, #1
   17bc4:	str	r3, [fp, #-24]	; 0xffffffe8
   17bc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bcc:	ldr	r3, [r3]
   17bd0:	ldrb	r3, [r3]
   17bd4:	mov	r1, r3
   17bd8:	ldr	r0, [fp, #4]
   17bdc:	bl	10e54 <strchr@plt>
   17be0:	mov	r3, r0
   17be4:	cmp	r3, #0
   17be8:	bne	17c04 <__assert_fail@plt+0x6cd8>
   17bec:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17bf0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17bf4:	strd	r2, [r1]
   17bf8:	ldr	r3, [fp, #-8]
   17bfc:	orr	r3, r3, #2
   17c00:	b	18008 <__assert_fail@plt+0x70dc>
   17c04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c08:	ldr	r3, [r3]
   17c0c:	ldrb	r3, [r3]
   17c10:	sub	r3, r3, #69	; 0x45
   17c14:	cmp	r3, #47	; 0x2f
   17c18:	ldrls	pc, [pc, r3, lsl #2]
   17c1c:	b	17d70 <__assert_fail@plt+0x6e44>
   17c20:	andeq	r7, r1, r0, ror #25
   17c24:	andeq	r7, r1, r0, ror sp
   17c28:	andeq	r7, r1, r0, ror #25
   17c2c:	andeq	r7, r1, r0, ror sp
   17c30:	andeq	r7, r1, r0, ror sp
   17c34:	andeq	r7, r1, r0, ror sp
   17c38:	andeq	r7, r1, r0, ror #25
   17c3c:	andeq	r7, r1, r0, ror sp
   17c40:	andeq	r7, r1, r0, ror #25
   17c44:	andeq	r7, r1, r0, ror sp
   17c48:	andeq	r7, r1, r0, ror sp
   17c4c:	andeq	r7, r1, r0, ror #25
   17c50:	andeq	r7, r1, r0, ror sp
   17c54:	andeq	r7, r1, r0, ror sp
   17c58:	andeq	r7, r1, r0, ror sp
   17c5c:	andeq	r7, r1, r0, ror #25
   17c60:	andeq	r7, r1, r0, ror sp
   17c64:	andeq	r7, r1, r0, ror sp
   17c68:	andeq	r7, r1, r0, ror sp
   17c6c:	andeq	r7, r1, r0, ror sp
   17c70:	andeq	r7, r1, r0, ror #25
   17c74:	andeq	r7, r1, r0, ror #25
   17c78:	andeq	r7, r1, r0, ror sp
   17c7c:	andeq	r7, r1, r0, ror sp
   17c80:	andeq	r7, r1, r0, ror sp
   17c84:	andeq	r7, r1, r0, ror sp
   17c88:	andeq	r7, r1, r0, ror sp
   17c8c:	andeq	r7, r1, r0, ror sp
   17c90:	andeq	r7, r1, r0, ror sp
   17c94:	andeq	r7, r1, r0, ror sp
   17c98:	andeq	r7, r1, r0, ror sp
   17c9c:	andeq	r7, r1, r0, ror sp
   17ca0:	andeq	r7, r1, r0, ror sp
   17ca4:	andeq	r7, r1, r0, ror sp
   17ca8:	andeq	r7, r1, r0, ror #25
   17cac:	andeq	r7, r1, r0, ror sp
   17cb0:	andeq	r7, r1, r0, ror sp
   17cb4:	andeq	r7, r1, r0, ror sp
   17cb8:	andeq	r7, r1, r0, ror #25
   17cbc:	andeq	r7, r1, r0, ror sp
   17cc0:	andeq	r7, r1, r0, ror #25
   17cc4:	andeq	r7, r1, r0, ror sp
   17cc8:	andeq	r7, r1, r0, ror sp
   17ccc:	andeq	r7, r1, r0, ror sp
   17cd0:	andeq	r7, r1, r0, ror sp
   17cd4:	andeq	r7, r1, r0, ror sp
   17cd8:	andeq	r7, r1, r0, ror sp
   17cdc:	andeq	r7, r1, r0, ror #25
   17ce0:	mov	r1, #48	; 0x30
   17ce4:	ldr	r0, [fp, #4]
   17ce8:	bl	10e54 <strchr@plt>
   17cec:	mov	r3, r0
   17cf0:	cmp	r3, #0
   17cf4:	beq	17d64 <__assert_fail@plt+0x6e38>
   17cf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17cfc:	ldr	r3, [r3]
   17d00:	add	r3, r3, #1
   17d04:	ldrb	r3, [r3]
   17d08:	cmp	r3, #68	; 0x44
   17d0c:	beq	17d4c <__assert_fail@plt+0x6e20>
   17d10:	cmp	r3, #105	; 0x69
   17d14:	beq	17d24 <__assert_fail@plt+0x6df8>
   17d18:	cmp	r3, #66	; 0x42
   17d1c:	beq	17d4c <__assert_fail@plt+0x6e20>
   17d20:	b	17d70 <__assert_fail@plt+0x6e44>
   17d24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d28:	ldr	r3, [r3]
   17d2c:	add	r3, r3, #2
   17d30:	ldrb	r3, [r3]
   17d34:	cmp	r3, #66	; 0x42
   17d38:	bne	17d6c <__assert_fail@plt+0x6e40>
   17d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d40:	add	r3, r3, #2
   17d44:	str	r3, [fp, #-24]	; 0xffffffe8
   17d48:	b	17d6c <__assert_fail@plt+0x6e40>
   17d4c:	mov	r3, #1000	; 0x3e8
   17d50:	str	r3, [fp, #-20]	; 0xffffffec
   17d54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d58:	add	r3, r3, #1
   17d5c:	str	r3, [fp, #-24]	; 0xffffffe8
   17d60:	b	17d70 <__assert_fail@plt+0x6e44>
   17d64:	nop	{0}
   17d68:	b	17d70 <__assert_fail@plt+0x6e44>
   17d6c:	nop	{0}
   17d70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d74:	ldr	r3, [r3]
   17d78:	ldrb	r3, [r3]
   17d7c:	sub	r3, r3, #66	; 0x42
   17d80:	cmp	r3, #53	; 0x35
   17d84:	ldrls	pc, [pc, r3, lsl #2]
   17d88:	b	17f98 <__assert_fail@plt+0x706c>
   17d8c:	andeq	r7, r1, ip, ror lr
   17d90:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17d94:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17d98:	andeq	r7, r1, r0, lsr #29
   17d9c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17da0:			; <UNDEFINED> instruction: 0x00017ebc
   17da4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17da8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dac:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17db0:	ldrdeq	r7, [r1], -r8
   17db4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17db8:	strdeq	r7, [r1], -r4
   17dbc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dc0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dc4:	andeq	r7, r1, r0, lsl pc
   17dc8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dcc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dd0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dd4:	andeq	r7, r1, ip, lsr #30
   17dd8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ddc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17de0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17de4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17de8:	andeq	r7, r1, r0, ror #30
   17dec:	andeq	r7, r1, ip, ror pc
   17df0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17df4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17df8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dfc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e00:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e04:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e08:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e0c:	andeq	r7, r1, r4, ror #28
   17e10:	muleq	r1, r4, lr
   17e14:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e1c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e20:			; <UNDEFINED> instruction: 0x00017ebc
   17e24:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e2c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e30:	ldrdeq	r7, [r1], -r8
   17e34:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e38:	strdeq	r7, [r1], -r4
   17e3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e40:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e44:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e54:	andeq	r7, r1, ip, lsr #30
   17e58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e60:	andeq	r7, r1, r8, asr #30
   17e64:	sub	r3, fp, #44	; 0x2c
   17e68:	mov	r1, #512	; 0x200
   17e6c:	mov	r0, r3
   17e70:	bl	1777c <__assert_fail@plt+0x6850>
   17e74:	str	r0, [fp, #-28]	; 0xffffffe4
   17e78:	b	17fb0 <__assert_fail@plt+0x7084>
   17e7c:	sub	r3, fp, #44	; 0x2c
   17e80:	mov	r1, #1024	; 0x400
   17e84:	mov	r0, r3
   17e88:	bl	1777c <__assert_fail@plt+0x6850>
   17e8c:	str	r0, [fp, #-28]	; 0xffffffe4
   17e90:	b	17fb0 <__assert_fail@plt+0x7084>
   17e94:	mov	r3, #0
   17e98:	str	r3, [fp, #-28]	; 0xffffffe4
   17e9c:	b	17fb0 <__assert_fail@plt+0x7084>
   17ea0:	sub	r3, fp, #44	; 0x2c
   17ea4:	mov	r2, #6
   17ea8:	ldr	r1, [fp, #-20]	; 0xffffffec
   17eac:	mov	r0, r3
   17eb0:	bl	17958 <__assert_fail@plt+0x6a2c>
   17eb4:	str	r0, [fp, #-28]	; 0xffffffe4
   17eb8:	b	17fb0 <__assert_fail@plt+0x7084>
   17ebc:	sub	r3, fp, #44	; 0x2c
   17ec0:	mov	r2, #3
   17ec4:	ldr	r1, [fp, #-20]	; 0xffffffec
   17ec8:	mov	r0, r3
   17ecc:	bl	17958 <__assert_fail@plt+0x6a2c>
   17ed0:	str	r0, [fp, #-28]	; 0xffffffe4
   17ed4:	b	17fb0 <__assert_fail@plt+0x7084>
   17ed8:	sub	r3, fp, #44	; 0x2c
   17edc:	mov	r2, #1
   17ee0:	ldr	r1, [fp, #-20]	; 0xffffffec
   17ee4:	mov	r0, r3
   17ee8:	bl	17958 <__assert_fail@plt+0x6a2c>
   17eec:	str	r0, [fp, #-28]	; 0xffffffe4
   17ef0:	b	17fb0 <__assert_fail@plt+0x7084>
   17ef4:	sub	r3, fp, #44	; 0x2c
   17ef8:	mov	r2, #2
   17efc:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f00:	mov	r0, r3
   17f04:	bl	17958 <__assert_fail@plt+0x6a2c>
   17f08:	str	r0, [fp, #-28]	; 0xffffffe4
   17f0c:	b	17fb0 <__assert_fail@plt+0x7084>
   17f10:	sub	r3, fp, #44	; 0x2c
   17f14:	mov	r2, #5
   17f18:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f1c:	mov	r0, r3
   17f20:	bl	17958 <__assert_fail@plt+0x6a2c>
   17f24:	str	r0, [fp, #-28]	; 0xffffffe4
   17f28:	b	17fb0 <__assert_fail@plt+0x7084>
   17f2c:	sub	r3, fp, #44	; 0x2c
   17f30:	mov	r2, #4
   17f34:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f38:	mov	r0, r3
   17f3c:	bl	17958 <__assert_fail@plt+0x6a2c>
   17f40:	str	r0, [fp, #-28]	; 0xffffffe4
   17f44:	b	17fb0 <__assert_fail@plt+0x7084>
   17f48:	sub	r3, fp, #44	; 0x2c
   17f4c:	mov	r1, #2
   17f50:	mov	r0, r3
   17f54:	bl	1777c <__assert_fail@plt+0x6850>
   17f58:	str	r0, [fp, #-28]	; 0xffffffe4
   17f5c:	b	17fb0 <__assert_fail@plt+0x7084>
   17f60:	sub	r3, fp, #44	; 0x2c
   17f64:	mov	r2, #8
   17f68:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f6c:	mov	r0, r3
   17f70:	bl	17958 <__assert_fail@plt+0x6a2c>
   17f74:	str	r0, [fp, #-28]	; 0xffffffe4
   17f78:	b	17fb0 <__assert_fail@plt+0x7084>
   17f7c:	sub	r3, fp, #44	; 0x2c
   17f80:	mov	r2, #7
   17f84:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f88:	mov	r0, r3
   17f8c:	bl	17958 <__assert_fail@plt+0x6a2c>
   17f90:	str	r0, [fp, #-28]	; 0xffffffe4
   17f94:	b	17fb0 <__assert_fail@plt+0x7084>
   17f98:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17f9c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17fa0:	strd	r2, [r1]
   17fa4:	ldr	r3, [fp, #-8]
   17fa8:	orr	r3, r3, #2
   17fac:	b	18008 <__assert_fail@plt+0x70dc>
   17fb0:	ldr	r2, [fp, #-8]
   17fb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17fb8:	orr	r3, r2, r3
   17fbc:	str	r3, [fp, #-8]
   17fc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fc4:	ldr	r2, [r3]
   17fc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fcc:	add	r2, r2, r3
   17fd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fd4:	str	r2, [r3]
   17fd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fdc:	ldr	r3, [r3]
   17fe0:	ldrb	r3, [r3]
   17fe4:	cmp	r3, #0
   17fe8:	beq	17ff8 <__assert_fail@plt+0x70cc>
   17fec:	ldr	r3, [fp, #-8]
   17ff0:	orr	r3, r3, #2
   17ff4:	str	r3, [fp, #-8]
   17ff8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17ffc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18000:	strd	r2, [r1]
   18004:	ldr	r3, [fp, #-8]
   18008:	mov	r0, r3
   1800c:	sub	sp, fp, #4
   18010:	ldr	fp, [sp]
   18014:	add	sp, sp, #4
   18018:	pop	{pc}		; (ldr pc, [sp], #4)
   1801c:	str	fp, [sp, #-8]!
   18020:	str	lr, [sp, #4]
   18024:	add	fp, sp, #4
   18028:	sub	sp, sp, #16
   1802c:	str	r0, [fp, #-16]
   18030:	str	r1, [fp, #-20]	; 0xffffffec
   18034:	ldr	r3, [fp, #-16]
   18038:	cmp	r3, #0
   1803c:	beq	1804c <__assert_fail@plt+0x7120>
   18040:	ldr	r3, [fp, #-20]	; 0xffffffec
   18044:	cmp	r3, #0
   18048:	bne	1805c <__assert_fail@plt+0x7130>
   1804c:	mov	r3, #1
   18050:	str	r3, [fp, #-20]	; 0xffffffec
   18054:	ldr	r3, [fp, #-20]	; 0xffffffec
   18058:	str	r3, [fp, #-16]
   1805c:	mov	ip, #0
   18060:	ldr	r2, [fp, #-16]
   18064:	ldr	r3, [fp, #-20]	; 0xffffffec
   18068:	umull	r0, r1, r2, r3
   1806c:	mov	r2, #0
   18070:	mov	r3, #0
   18074:	mov	r2, r1
   18078:	mov	r3, #0
   1807c:	cmp	r2, #0
   18080:	beq	18088 <__assert_fail@plt+0x715c>
   18084:	mov	ip, #1
   18088:	cmp	r0, #0
   1808c:	bge	18094 <__assert_fail@plt+0x7168>
   18090:	mov	ip, #1
   18094:	mov	r3, ip
   18098:	and	r3, r3, #1
   1809c:	uxtb	r3, r3
   180a0:	cmp	r3, #0
   180a4:	beq	180c0 <__assert_fail@plt+0x7194>
   180a8:	bl	10e6c <__errno_location@plt>
   180ac:	mov	r2, r0
   180b0:	mov	r3, #12
   180b4:	str	r3, [r2]
   180b8:	mov	r3, #0
   180bc:	b	180d8 <__assert_fail@plt+0x71ac>
   180c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   180c4:	ldr	r0, [fp, #-16]
   180c8:	bl	10cbc <calloc@plt>
   180cc:	mov	r3, r0
   180d0:	str	r3, [fp, #-8]
   180d4:	ldr	r3, [fp, #-8]
   180d8:	mov	r0, r3
   180dc:	sub	sp, fp, #4
   180e0:	ldr	fp, [sp]
   180e4:	add	sp, sp, #4
   180e8:	pop	{pc}		; (ldr pc, [sp], #4)
   180ec:	str	fp, [sp, #-8]!
   180f0:	str	lr, [sp, #4]
   180f4:	add	fp, sp, #4
   180f8:	sub	sp, sp, #16
   180fc:	str	r0, [fp, #-16]
   18100:	ldr	r3, [fp, #-16]
   18104:	cmp	r3, #0
   18108:	bne	18114 <__assert_fail@plt+0x71e8>
   1810c:	mov	r3, #1
   18110:	str	r3, [fp, #-16]
   18114:	mov	r2, #0
   18118:	ldr	r3, [fp, #-16]
   1811c:	cmp	r3, #0
   18120:	bge	18128 <__assert_fail@plt+0x71fc>
   18124:	mov	r2, #1
   18128:	mov	r3, r2
   1812c:	and	r3, r3, #1
   18130:	uxtb	r3, r3
   18134:	cmp	r3, #0
   18138:	beq	18154 <__assert_fail@plt+0x7228>
   1813c:	bl	10e6c <__errno_location@plt>
   18140:	mov	r2, r0
   18144:	mov	r3, #12
   18148:	str	r3, [r2]
   1814c:	mov	r3, #0
   18150:	b	18168 <__assert_fail@plt+0x723c>
   18154:	ldr	r0, [fp, #-16]
   18158:	bl	10de8 <malloc@plt>
   1815c:	mov	r3, r0
   18160:	str	r3, [fp, #-8]
   18164:	ldr	r3, [fp, #-8]
   18168:	mov	r0, r3
   1816c:	sub	sp, fp, #4
   18170:	ldr	fp, [sp]
   18174:	add	sp, sp, #4
   18178:	pop	{pc}		; (ldr pc, [sp], #4)
   1817c:	str	fp, [sp, #-8]!
   18180:	str	lr, [sp, #4]
   18184:	add	fp, sp, #4
   18188:	sub	sp, sp, #16
   1818c:	str	r0, [fp, #-16]
   18190:	str	r1, [fp, #-20]	; 0xffffffec
   18194:	ldr	r3, [fp, #-16]
   18198:	cmp	r3, #0
   1819c:	bne	181b0 <__assert_fail@plt+0x7284>
   181a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   181a4:	bl	180ec <__assert_fail@plt+0x71c0>
   181a8:	mov	r3, r0
   181ac:	b	18220 <__assert_fail@plt+0x72f4>
   181b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   181b4:	cmp	r3, #0
   181b8:	bne	181cc <__assert_fail@plt+0x72a0>
   181bc:	ldr	r0, [fp, #-16]
   181c0:	bl	183c4 <__assert_fail@plt+0x7498>
   181c4:	mov	r3, #0
   181c8:	b	18220 <__assert_fail@plt+0x72f4>
   181cc:	mov	r2, #0
   181d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   181d4:	cmp	r3, #0
   181d8:	bge	181e0 <__assert_fail@plt+0x72b4>
   181dc:	mov	r2, #1
   181e0:	mov	r3, r2
   181e4:	and	r3, r3, #1
   181e8:	uxtb	r3, r3
   181ec:	cmp	r3, #0
   181f0:	beq	1820c <__assert_fail@plt+0x72e0>
   181f4:	bl	10e6c <__errno_location@plt>
   181f8:	mov	r2, r0
   181fc:	mov	r3, #12
   18200:	str	r3, [r2]
   18204:	mov	r3, #0
   18208:	b	18220 <__assert_fail@plt+0x72f4>
   1820c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18210:	ldr	r0, [fp, #-16]
   18214:	bl	10d70 <realloc@plt>
   18218:	str	r0, [fp, #-8]
   1821c:	ldr	r3, [fp, #-8]
   18220:	mov	r0, r3
   18224:	sub	sp, fp, #4
   18228:	ldr	fp, [sp]
   1822c:	add	sp, sp, #4
   18230:	pop	{pc}		; (ldr pc, [sp], #4)
   18234:	strd	r4, [sp, #-16]!
   18238:	str	fp, [sp, #8]
   1823c:	str	lr, [sp, #12]
   18240:	add	fp, sp, #12
   18244:	sub	sp, sp, #16
   18248:	str	r0, [fp, #-24]	; 0xffffffe8
   1824c:	str	r1, [fp, #-28]	; 0xffffffe4
   18250:	ldr	r5, [fp, #-24]	; 0xffffffe8
   18254:	ldr	r4, [fp, #-28]	; 0xffffffe4
   18258:	cmp	r5, r4
   1825c:	bne	18268 <__assert_fail@plt+0x733c>
   18260:	mov	r3, #0
   18264:	b	182c8 <__assert_fail@plt+0x739c>
   18268:	ldrb	r3, [r5]
   1826c:	mov	r0, r3
   18270:	bl	18c50 <__assert_fail@plt+0x7d24>
   18274:	mov	r3, r0
   18278:	strb	r3, [fp, #-13]
   1827c:	ldrb	r3, [r4]
   18280:	mov	r0, r3
   18284:	bl	18c50 <__assert_fail@plt+0x7d24>
   18288:	mov	r3, r0
   1828c:	strb	r3, [fp, #-14]
   18290:	ldrb	r3, [fp, #-13]
   18294:	cmp	r3, #0
   18298:	beq	182b8 <__assert_fail@plt+0x738c>
   1829c:	add	r5, r5, #1
   182a0:	add	r4, r4, #1
   182a4:	ldrb	r2, [fp, #-13]
   182a8:	ldrb	r3, [fp, #-14]
   182ac:	cmp	r2, r3
   182b0:	beq	18268 <__assert_fail@plt+0x733c>
   182b4:	b	182bc <__assert_fail@plt+0x7390>
   182b8:	nop	{0}
   182bc:	ldrb	r2, [fp, #-13]
   182c0:	ldrb	r3, [fp, #-14]
   182c4:	sub	r3, r2, r3
   182c8:	mov	r0, r3
   182cc:	sub	sp, fp, #12
   182d0:	ldrd	r4, [sp]
   182d4:	ldr	fp, [sp, #8]
   182d8:	add	sp, sp, #12
   182dc:	pop	{pc}		; (ldr pc, [sp], #4)
   182e0:	str	fp, [sp, #-8]!
   182e4:	str	lr, [sp, #4]
   182e8:	add	fp, sp, #4
   182ec:	sub	sp, sp, #16
   182f0:	str	r0, [fp, #-16]
   182f4:	ldr	r0, [fp, #-16]
   182f8:	bl	10db8 <__fpending@plt>
   182fc:	mov	r3, r0
   18300:	cmp	r3, #0
   18304:	movne	r3, #1
   18308:	moveq	r3, #0
   1830c:	strb	r3, [fp, #-5]
   18310:	ldr	r0, [fp, #-16]
   18314:	bl	10dc4 <ferror_unlocked@plt>
   18318:	mov	r3, r0
   1831c:	cmp	r3, #0
   18320:	movne	r3, #1
   18324:	moveq	r3, #0
   18328:	strb	r3, [fp, #-6]
   1832c:	ldr	r0, [fp, #-16]
   18330:	bl	13830 <__assert_fail@plt+0x2904>
   18334:	mov	r3, r0
   18338:	cmp	r3, #0
   1833c:	movne	r3, #1
   18340:	moveq	r3, #0
   18344:	strb	r3, [fp, #-7]
   18348:	ldrb	r3, [fp, #-6]
   1834c:	cmp	r3, #0
   18350:	bne	18380 <__assert_fail@plt+0x7454>
   18354:	ldrb	r3, [fp, #-7]
   18358:	cmp	r3, #0
   1835c:	beq	183ac <__assert_fail@plt+0x7480>
   18360:	ldrb	r3, [fp, #-5]
   18364:	cmp	r3, #0
   18368:	bne	18380 <__assert_fail@plt+0x7454>
   1836c:	bl	10e6c <__errno_location@plt>
   18370:	mov	r3, r0
   18374:	ldr	r3, [r3]
   18378:	cmp	r3, #9
   1837c:	beq	183ac <__assert_fail@plt+0x7480>
   18380:	ldrb	r3, [fp, #-7]
   18384:	eor	r3, r3, #1
   18388:	uxtb	r3, r3
   1838c:	cmp	r3, #0
   18390:	beq	183a4 <__assert_fail@plt+0x7478>
   18394:	bl	10e6c <__errno_location@plt>
   18398:	mov	r2, r0
   1839c:	mov	r3, #0
   183a0:	str	r3, [r2]
   183a4:	mvn	r3, #0
   183a8:	b	183b0 <__assert_fail@plt+0x7484>
   183ac:	mov	r3, #0
   183b0:	mov	r0, r3
   183b4:	sub	sp, fp, #4
   183b8:	ldr	fp, [sp]
   183bc:	add	sp, sp, #4
   183c0:	pop	{pc}		; (ldr pc, [sp], #4)
   183c4:	str	r4, [sp, #-12]!
   183c8:	str	fp, [sp, #4]
   183cc:	str	lr, [sp, #8]
   183d0:	add	fp, sp, #8
   183d4:	sub	sp, sp, #20
   183d8:	str	r0, [fp, #-24]	; 0xffffffe8
   183dc:	bl	10e6c <__errno_location@plt>
   183e0:	mov	r3, r0
   183e4:	ldr	r3, [r3]
   183e8:	str	r3, [fp, #-20]	; 0xffffffec
   183ec:	bl	10e6c <__errno_location@plt>
   183f0:	mov	r3, r0
   183f4:	ldr	r3, [r3]
   183f8:	str	r3, [fp, #-16]
   183fc:	bl	10e6c <__errno_location@plt>
   18400:	mov	r2, r0
   18404:	mov	r3, #0
   18408:	str	r3, [r2]
   1840c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18410:	bl	10d10 <free@plt>
   18414:	bl	10e6c <__errno_location@plt>
   18418:	mov	r3, r0
   1841c:	ldr	r3, [r3]
   18420:	cmp	r3, #0
   18424:	moveq	r3, #1
   18428:	movne	r3, #0
   1842c:	uxtb	r3, r3
   18430:	mov	r4, r3
   18434:	bl	10e6c <__errno_location@plt>
   18438:	mov	r2, r0
   1843c:	lsl	r3, r4, #2
   18440:	sub	r1, fp, #12
   18444:	add	r3, r1, r3
   18448:	ldr	r3, [r3, #-8]
   1844c:	str	r3, [r2]
   18450:	nop	{0}
   18454:	sub	sp, fp, #8
   18458:	ldr	r4, [sp]
   1845c:	ldr	fp, [sp, #4]
   18460:	add	sp, sp, #8
   18464:	pop	{pc}		; (ldr pc, [sp], #4)
   18468:	str	fp, [sp, #-8]!
   1846c:	str	lr, [sp, #4]
   18470:	add	fp, sp, #4
   18474:	bl	10e6c <__errno_location@plt>
   18478:	mov	r2, r0
   1847c:	mov	r3, #12
   18480:	str	r3, [r2]
   18484:	mov	r3, #0
   18488:	mov	r0, r3
   1848c:	sub	sp, fp, #4
   18490:	ldr	fp, [sp]
   18494:	add	sp, sp, #4
   18498:	pop	{pc}		; (ldr pc, [sp], #4)
   1849c:	str	fp, [sp, #-8]!
   184a0:	str	lr, [sp, #4]
   184a4:	add	fp, sp, #4
   184a8:	sub	sp, sp, #8
   184ac:	str	r0, [fp, #-8]
   184b0:	ldr	r3, [fp, #-8]
   184b4:	mov	r0, r3
   184b8:	bl	180ec <__assert_fail@plt+0x71c0>
   184bc:	mov	r3, r0
   184c0:	mov	r0, r3
   184c4:	sub	sp, fp, #4
   184c8:	ldr	fp, [sp]
   184cc:	add	sp, sp, #4
   184d0:	pop	{pc}		; (ldr pc, [sp], #4)
   184d4:	str	fp, [sp, #-8]!
   184d8:	str	lr, [sp, #4]
   184dc:	add	fp, sp, #4
   184e0:	sub	sp, sp, #8
   184e4:	str	r0, [fp, #-8]
   184e8:	str	r1, [fp, #-12]
   184ec:	ldr	r3, [fp, #-12]
   184f0:	cmp	r3, #0
   184f4:	moveq	r3, #1
   184f8:	movne	r3, #0
   184fc:	uxtb	r3, r3
   18500:	mov	r2, r3
   18504:	ldr	r3, [fp, #-12]
   18508:	orr	r3, r2, r3
   1850c:	mov	r1, r3
   18510:	ldr	r0, [fp, #-8]
   18514:	bl	1817c <__assert_fail@plt+0x7250>
   18518:	mov	r3, r0
   1851c:	mov	r0, r3
   18520:	sub	sp, fp, #4
   18524:	ldr	fp, [sp]
   18528:	add	sp, sp, #4
   1852c:	pop	{pc}		; (ldr pc, [sp], #4)
   18530:	str	fp, [sp, #-8]!
   18534:	str	lr, [sp, #4]
   18538:	add	fp, sp, #4
   1853c:	sub	sp, sp, #8
   18540:	str	r0, [fp, #-8]
   18544:	str	r1, [fp, #-12]
   18548:	ldr	r3, [fp, #-8]
   1854c:	ldr	r2, [fp, #-12]
   18550:	mov	r1, r2
   18554:	mov	r0, r3
   18558:	bl	1801c <__assert_fail@plt+0x70f0>
   1855c:	mov	r3, r0
   18560:	mov	r0, r3
   18564:	sub	sp, fp, #4
   18568:	ldr	fp, [sp]
   1856c:	add	sp, sp, #4
   18570:	pop	{pc}		; (ldr pc, [sp], #4)
   18574:	str	fp, [sp, #-8]!
   18578:	str	lr, [sp, #4]
   1857c:	add	fp, sp, #4
   18580:	sub	sp, sp, #16
   18584:	str	r0, [fp, #-8]
   18588:	str	r1, [fp, #-12]
   1858c:	str	r2, [fp, #-16]
   18590:	ldr	r3, [fp, #-12]
   18594:	cmp	r3, #0
   18598:	beq	185a8 <__assert_fail@plt+0x767c>
   1859c:	ldr	r3, [fp, #-16]
   185a0:	cmp	r3, #0
   185a4:	bne	185b8 <__assert_fail@plt+0x768c>
   185a8:	mov	r3, #1
   185ac:	str	r3, [fp, #-16]
   185b0:	ldr	r3, [fp, #-16]
   185b4:	str	r3, [fp, #-12]
   185b8:	ldr	r3, [fp, #-12]
   185bc:	ldr	r2, [fp, #-16]
   185c0:	mov	r1, r3
   185c4:	ldr	r0, [fp, #-8]
   185c8:	bl	18704 <__assert_fail@plt+0x77d8>
   185cc:	mov	r3, r0
   185d0:	mov	r0, r3
   185d4:	sub	sp, fp, #4
   185d8:	ldr	fp, [sp]
   185dc:	add	sp, sp, #4
   185e0:	pop	{pc}		; (ldr pc, [sp], #4)
   185e4:	str	fp, [sp, #-8]!
   185e8:	str	lr, [sp, #4]
   185ec:	add	fp, sp, #4
   185f0:	sub	sp, sp, #8
   185f4:	mov	r0, #14
   185f8:	bl	10ed8 <nl_langinfo@plt>
   185fc:	str	r0, [fp, #-8]
   18600:	ldr	r3, [fp, #-8]
   18604:	cmp	r3, #0
   18608:	bne	18618 <__assert_fail@plt+0x76ec>
   1860c:	movw	r3, #40084	; 0x9c94
   18610:	movt	r3, #1
   18614:	str	r3, [fp, #-8]
   18618:	ldr	r3, [fp, #-8]
   1861c:	ldrb	r3, [r3]
   18620:	cmp	r3, #0
   18624:	bne	18634 <__assert_fail@plt+0x7708>
   18628:	movw	r3, #40088	; 0x9c98
   1862c:	movt	r3, #1
   18630:	str	r3, [fp, #-8]
   18634:	ldr	r3, [fp, #-8]
   18638:	mov	r0, r3
   1863c:	sub	sp, fp, #4
   18640:	ldr	fp, [sp]
   18644:	add	sp, sp, #4
   18648:	pop	{pc}		; (ldr pc, [sp], #4)
   1864c:	str	fp, [sp, #-8]!
   18650:	str	lr, [sp, #4]
   18654:	add	fp, sp, #4
   18658:	sub	sp, sp, #32
   1865c:	str	r0, [fp, #-24]	; 0xffffffe8
   18660:	str	r1, [fp, #-28]	; 0xffffffe4
   18664:	str	r2, [fp, #-32]	; 0xffffffe0
   18668:	str	r3, [fp, #-36]	; 0xffffffdc
   1866c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18670:	cmp	r3, #0
   18674:	bne	18680 <__assert_fail@plt+0x7754>
   18678:	sub	r3, fp, #16
   1867c:	str	r3, [fp, #-24]	; 0xffffffe8
   18680:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18684:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18688:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1868c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18690:	bl	10dd0 <mbrtowc@plt>
   18694:	str	r0, [fp, #-8]
   18698:	ldr	r3, [fp, #-8]
   1869c:	cmn	r3, #3
   186a0:	bls	186ec <__assert_fail@plt+0x77c0>
   186a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   186a8:	cmp	r3, #0
   186ac:	beq	186ec <__assert_fail@plt+0x77c0>
   186b0:	mov	r0, #0
   186b4:	bl	18cd0 <__assert_fail@plt+0x7da4>
   186b8:	mov	r3, r0
   186bc:	eor	r3, r3, #1
   186c0:	uxtb	r3, r3
   186c4:	cmp	r3, #0
   186c8:	beq	186ec <__assert_fail@plt+0x77c0>
   186cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186d0:	ldrb	r3, [r3]
   186d4:	strb	r3, [fp, #-9]
   186d8:	ldrb	r2, [fp, #-9]
   186dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   186e0:	str	r2, [r3]
   186e4:	mov	r3, #1
   186e8:	b	186f0 <__assert_fail@plt+0x77c4>
   186ec:	ldr	r3, [fp, #-8]
   186f0:	mov	r0, r3
   186f4:	sub	sp, fp, #4
   186f8:	ldr	fp, [sp]
   186fc:	add	sp, sp, #4
   18700:	pop	{pc}		; (ldr pc, [sp], #4)
   18704:	str	fp, [sp, #-8]!
   18708:	str	lr, [sp, #4]
   1870c:	add	fp, sp, #4
   18710:	sub	sp, sp, #24
   18714:	str	r0, [fp, #-16]
   18718:	str	r1, [fp, #-20]	; 0xffffffec
   1871c:	str	r2, [fp, #-24]	; 0xffffffe8
   18720:	mov	ip, #0
   18724:	ldr	r2, [fp, #-20]	; 0xffffffec
   18728:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1872c:	umull	r0, r1, r2, r3
   18730:	mov	r2, #0
   18734:	mov	r3, #0
   18738:	mov	r2, r1
   1873c:	mov	r3, #0
   18740:	cmp	r2, #0
   18744:	beq	1874c <__assert_fail@plt+0x7820>
   18748:	mov	ip, #1
   1874c:	mov	r3, r0
   18750:	str	r3, [fp, #-8]
   18754:	mov	r3, ip
   18758:	and	r3, r3, #1
   1875c:	uxtb	r3, r3
   18760:	cmp	r3, #0
   18764:	beq	18780 <__assert_fail@plt+0x7854>
   18768:	bl	10e6c <__errno_location@plt>
   1876c:	mov	r2, r0
   18770:	mov	r3, #12
   18774:	str	r3, [r2]
   18778:	mov	r3, #0
   1877c:	b	18794 <__assert_fail@plt+0x7868>
   18780:	ldr	r3, [fp, #-8]
   18784:	mov	r1, r3
   18788:	ldr	r0, [fp, #-16]
   1878c:	bl	1817c <__assert_fail@plt+0x7250>
   18790:	mov	r3, r0
   18794:	mov	r0, r3
   18798:	sub	sp, fp, #4
   1879c:	ldr	fp, [sp]
   187a0:	add	sp, sp, #4
   187a4:	pop	{pc}		; (ldr pc, [sp], #4)
   187a8:	push	{fp}		; (str fp, [sp, #-4]!)
   187ac:	add	fp, sp, #0
   187b0:	sub	sp, sp, #12
   187b4:	str	r0, [fp, #-8]
   187b8:	ldr	r3, [fp, #-8]
   187bc:	cmp	r3, #90	; 0x5a
   187c0:	bgt	187e4 <__assert_fail@plt+0x78b8>
   187c4:	ldr	r3, [fp, #-8]
   187c8:	cmp	r3, #65	; 0x41
   187cc:	bge	187f4 <__assert_fail@plt+0x78c8>
   187d0:	ldr	r3, [fp, #-8]
   187d4:	sub	r3, r3, #48	; 0x30
   187d8:	cmp	r3, #9
   187dc:	bhi	187fc <__assert_fail@plt+0x78d0>
   187e0:	b	187f4 <__assert_fail@plt+0x78c8>
   187e4:	ldr	r3, [fp, #-8]
   187e8:	sub	r3, r3, #97	; 0x61
   187ec:	cmp	r3, #25
   187f0:	bhi	187fc <__assert_fail@plt+0x78d0>
   187f4:	mov	r3, #1
   187f8:	b	18800 <__assert_fail@plt+0x78d4>
   187fc:	mov	r3, #0
   18800:	mov	r0, r3
   18804:	add	sp, fp, #0
   18808:	pop	{fp}		; (ldr fp, [sp], #4)
   1880c:	bx	lr
   18810:	push	{fp}		; (str fp, [sp, #-4]!)
   18814:	add	fp, sp, #0
   18818:	sub	sp, sp, #12
   1881c:	str	r0, [fp, #-8]
   18820:	ldr	r3, [fp, #-8]
   18824:	cmp	r3, #65	; 0x41
   18828:	blt	18850 <__assert_fail@plt+0x7924>
   1882c:	ldr	r3, [fp, #-8]
   18830:	cmp	r3, #90	; 0x5a
   18834:	ble	18848 <__assert_fail@plt+0x791c>
   18838:	ldr	r3, [fp, #-8]
   1883c:	sub	r3, r3, #97	; 0x61
   18840:	cmp	r3, #25
   18844:	bhi	18850 <__assert_fail@plt+0x7924>
   18848:	mov	r3, #1
   1884c:	b	18854 <__assert_fail@plt+0x7928>
   18850:	mov	r3, #0
   18854:	mov	r0, r3
   18858:	add	sp, fp, #0
   1885c:	pop	{fp}		; (ldr fp, [sp], #4)
   18860:	bx	lr
   18864:	push	{fp}		; (str fp, [sp, #-4]!)
   18868:	add	fp, sp, #0
   1886c:	sub	sp, sp, #12
   18870:	str	r0, [fp, #-8]
   18874:	ldr	r3, [fp, #-8]
   18878:	cmp	r3, #127	; 0x7f
   1887c:	bhi	18888 <__assert_fail@plt+0x795c>
   18880:	mov	r3, #1
   18884:	b	1888c <__assert_fail@plt+0x7960>
   18888:	mov	r3, #0
   1888c:	mov	r0, r3
   18890:	add	sp, fp, #0
   18894:	pop	{fp}		; (ldr fp, [sp], #4)
   18898:	bx	lr
   1889c:	push	{fp}		; (str fp, [sp, #-4]!)
   188a0:	add	fp, sp, #0
   188a4:	sub	sp, sp, #12
   188a8:	str	r0, [fp, #-8]
   188ac:	ldr	r3, [fp, #-8]
   188b0:	cmp	r3, #32
   188b4:	beq	188c4 <__assert_fail@plt+0x7998>
   188b8:	ldr	r3, [fp, #-8]
   188bc:	cmp	r3, #9
   188c0:	bne	188cc <__assert_fail@plt+0x79a0>
   188c4:	mov	r3, #1
   188c8:	b	188d0 <__assert_fail@plt+0x79a4>
   188cc:	mov	r3, #0
   188d0:	and	r3, r3, #1
   188d4:	uxtb	r3, r3
   188d8:	mov	r0, r3
   188dc:	add	sp, fp, #0
   188e0:	pop	{fp}		; (ldr fp, [sp], #4)
   188e4:	bx	lr
   188e8:	push	{fp}		; (str fp, [sp, #-4]!)
   188ec:	add	fp, sp, #0
   188f0:	sub	sp, sp, #12
   188f4:	str	r0, [fp, #-8]
   188f8:	ldr	r3, [fp, #-8]
   188fc:	cmp	r3, #0
   18900:	blt	18924 <__assert_fail@plt+0x79f8>
   18904:	ldr	r3, [fp, #-8]
   18908:	cmp	r3, #31
   1890c:	ble	1891c <__assert_fail@plt+0x79f0>
   18910:	ldr	r3, [fp, #-8]
   18914:	cmp	r3, #127	; 0x7f
   18918:	bne	18924 <__assert_fail@plt+0x79f8>
   1891c:	mov	r3, #1
   18920:	b	18928 <__assert_fail@plt+0x79fc>
   18924:	mov	r3, #0
   18928:	mov	r0, r3
   1892c:	add	sp, fp, #0
   18930:	pop	{fp}		; (ldr fp, [sp], #4)
   18934:	bx	lr
   18938:	push	{fp}		; (str fp, [sp, #-4]!)
   1893c:	add	fp, sp, #0
   18940:	sub	sp, sp, #12
   18944:	str	r0, [fp, #-8]
   18948:	ldr	r3, [fp, #-8]
   1894c:	sub	r3, r3, #48	; 0x30
   18950:	cmp	r3, #9
   18954:	bhi	18960 <__assert_fail@plt+0x7a34>
   18958:	mov	r3, #1
   1895c:	b	18964 <__assert_fail@plt+0x7a38>
   18960:	mov	r3, #0
   18964:	mov	r0, r3
   18968:	add	sp, fp, #0
   1896c:	pop	{fp}		; (ldr fp, [sp], #4)
   18970:	bx	lr
   18974:	push	{fp}		; (str fp, [sp, #-4]!)
   18978:	add	fp, sp, #0
   1897c:	sub	sp, sp, #12
   18980:	str	r0, [fp, #-8]
   18984:	ldr	r3, [fp, #-8]
   18988:	sub	r3, r3, #33	; 0x21
   1898c:	cmp	r3, #93	; 0x5d
   18990:	bhi	1899c <__assert_fail@plt+0x7a70>
   18994:	mov	r3, #1
   18998:	b	189a0 <__assert_fail@plt+0x7a74>
   1899c:	mov	r3, #0
   189a0:	mov	r0, r3
   189a4:	add	sp, fp, #0
   189a8:	pop	{fp}		; (ldr fp, [sp], #4)
   189ac:	bx	lr
   189b0:	push	{fp}		; (str fp, [sp, #-4]!)
   189b4:	add	fp, sp, #0
   189b8:	sub	sp, sp, #12
   189bc:	str	r0, [fp, #-8]
   189c0:	ldr	r3, [fp, #-8]
   189c4:	sub	r3, r3, #97	; 0x61
   189c8:	cmp	r3, #25
   189cc:	bhi	189d8 <__assert_fail@plt+0x7aac>
   189d0:	mov	r3, #1
   189d4:	b	189dc <__assert_fail@plt+0x7ab0>
   189d8:	mov	r3, #0
   189dc:	mov	r0, r3
   189e0:	add	sp, fp, #0
   189e4:	pop	{fp}		; (ldr fp, [sp], #4)
   189e8:	bx	lr
   189ec:	push	{fp}		; (str fp, [sp, #-4]!)
   189f0:	add	fp, sp, #0
   189f4:	sub	sp, sp, #12
   189f8:	str	r0, [fp, #-8]
   189fc:	ldr	r3, [fp, #-8]
   18a00:	sub	r3, r3, #32
   18a04:	cmp	r3, #94	; 0x5e
   18a08:	bhi	18a14 <__assert_fail@plt+0x7ae8>
   18a0c:	mov	r3, #1
   18a10:	b	18a18 <__assert_fail@plt+0x7aec>
   18a14:	mov	r3, #0
   18a18:	mov	r0, r3
   18a1c:	add	sp, fp, #0
   18a20:	pop	{fp}		; (ldr fp, [sp], #4)
   18a24:	bx	lr
   18a28:	push	{fp}		; (str fp, [sp, #-4]!)
   18a2c:	add	fp, sp, #0
   18a30:	sub	sp, sp, #12
   18a34:	str	r0, [fp, #-8]
   18a38:	ldr	r3, [fp, #-8]
   18a3c:	cmp	r3, #64	; 0x40
   18a40:	bgt	18a64 <__assert_fail@plt+0x7b38>
   18a44:	ldr	r3, [fp, #-8]
   18a48:	cmp	r3, #58	; 0x3a
   18a4c:	bge	18a8c <__assert_fail@plt+0x7b60>
   18a50:	ldr	r3, [fp, #-8]
   18a54:	sub	r3, r3, #33	; 0x21
   18a58:	cmp	r3, #14
   18a5c:	bhi	18a94 <__assert_fail@plt+0x7b68>
   18a60:	b	18a8c <__assert_fail@plt+0x7b60>
   18a64:	ldr	r3, [fp, #-8]
   18a68:	cmp	r3, #91	; 0x5b
   18a6c:	blt	18a94 <__assert_fail@plt+0x7b68>
   18a70:	ldr	r3, [fp, #-8]
   18a74:	cmp	r3, #96	; 0x60
   18a78:	ble	18a8c <__assert_fail@plt+0x7b60>
   18a7c:	ldr	r3, [fp, #-8]
   18a80:	sub	r3, r3, #123	; 0x7b
   18a84:	cmp	r3, #3
   18a88:	bhi	18a94 <__assert_fail@plt+0x7b68>
   18a8c:	mov	r3, #1
   18a90:	b	18a98 <__assert_fail@plt+0x7b6c>
   18a94:	mov	r3, #0
   18a98:	mov	r0, r3
   18a9c:	add	sp, fp, #0
   18aa0:	pop	{fp}		; (ldr fp, [sp], #4)
   18aa4:	bx	lr
   18aa8:	push	{fp}		; (str fp, [sp, #-4]!)
   18aac:	add	fp, sp, #0
   18ab0:	sub	sp, sp, #12
   18ab4:	str	r0, [fp, #-8]
   18ab8:	ldr	r3, [fp, #-8]
   18abc:	cmp	r3, #9
   18ac0:	blt	18ae4 <__assert_fail@plt+0x7bb8>
   18ac4:	ldr	r3, [fp, #-8]
   18ac8:	cmp	r3, #13
   18acc:	ble	18adc <__assert_fail@plt+0x7bb0>
   18ad0:	ldr	r3, [fp, #-8]
   18ad4:	cmp	r3, #32
   18ad8:	bne	18ae4 <__assert_fail@plt+0x7bb8>
   18adc:	mov	r3, #1
   18ae0:	b	18ae8 <__assert_fail@plt+0x7bbc>
   18ae4:	mov	r3, #0
   18ae8:	mov	r0, r3
   18aec:	add	sp, fp, #0
   18af0:	pop	{fp}		; (ldr fp, [sp], #4)
   18af4:	bx	lr
   18af8:	push	{fp}		; (str fp, [sp, #-4]!)
   18afc:	add	fp, sp, #0
   18b00:	sub	sp, sp, #12
   18b04:	str	r0, [fp, #-8]
   18b08:	ldr	r3, [fp, #-8]
   18b0c:	sub	r3, r3, #65	; 0x41
   18b10:	cmp	r3, #25
   18b14:	bhi	18b20 <__assert_fail@plt+0x7bf4>
   18b18:	mov	r3, #1
   18b1c:	b	18b24 <__assert_fail@plt+0x7bf8>
   18b20:	mov	r3, #0
   18b24:	mov	r0, r3
   18b28:	add	sp, fp, #0
   18b2c:	pop	{fp}		; (ldr fp, [sp], #4)
   18b30:	bx	lr
   18b34:	push	{fp}		; (str fp, [sp, #-4]!)
   18b38:	add	fp, sp, #0
   18b3c:	sub	sp, sp, #12
   18b40:	str	r0, [fp, #-8]
   18b44:	ldr	r3, [fp, #-8]
   18b48:	sub	r3, r3, #48	; 0x30
   18b4c:	cmp	r3, #54	; 0x36
   18b50:	ldrls	pc, [pc, r3, lsl #2]
   18b54:	b	18c3c <__assert_fail@plt+0x7d10>
   18b58:	andeq	r8, r1, r4, lsr ip
   18b5c:	andeq	r8, r1, r4, lsr ip
   18b60:	andeq	r8, r1, r4, lsr ip
   18b64:	andeq	r8, r1, r4, lsr ip
   18b68:	andeq	r8, r1, r4, lsr ip
   18b6c:	andeq	r8, r1, r4, lsr ip
   18b70:	andeq	r8, r1, r4, lsr ip
   18b74:	andeq	r8, r1, r4, lsr ip
   18b78:	andeq	r8, r1, r4, lsr ip
   18b7c:	andeq	r8, r1, r4, lsr ip
   18b80:	andeq	r8, r1, ip, lsr ip
   18b84:	andeq	r8, r1, ip, lsr ip
   18b88:	andeq	r8, r1, ip, lsr ip
   18b8c:	andeq	r8, r1, ip, lsr ip
   18b90:	andeq	r8, r1, ip, lsr ip
   18b94:	andeq	r8, r1, ip, lsr ip
   18b98:	andeq	r8, r1, ip, lsr ip
   18b9c:	andeq	r8, r1, r4, lsr ip
   18ba0:	andeq	r8, r1, r4, lsr ip
   18ba4:	andeq	r8, r1, r4, lsr ip
   18ba8:	andeq	r8, r1, r4, lsr ip
   18bac:	andeq	r8, r1, r4, lsr ip
   18bb0:	andeq	r8, r1, r4, lsr ip
   18bb4:	andeq	r8, r1, ip, lsr ip
   18bb8:	andeq	r8, r1, ip, lsr ip
   18bbc:	andeq	r8, r1, ip, lsr ip
   18bc0:	andeq	r8, r1, ip, lsr ip
   18bc4:	andeq	r8, r1, ip, lsr ip
   18bc8:	andeq	r8, r1, ip, lsr ip
   18bcc:	andeq	r8, r1, ip, lsr ip
   18bd0:	andeq	r8, r1, ip, lsr ip
   18bd4:	andeq	r8, r1, ip, lsr ip
   18bd8:	andeq	r8, r1, ip, lsr ip
   18bdc:	andeq	r8, r1, ip, lsr ip
   18be0:	andeq	r8, r1, ip, lsr ip
   18be4:	andeq	r8, r1, ip, lsr ip
   18be8:	andeq	r8, r1, ip, lsr ip
   18bec:	andeq	r8, r1, ip, lsr ip
   18bf0:	andeq	r8, r1, ip, lsr ip
   18bf4:	andeq	r8, r1, ip, lsr ip
   18bf8:	andeq	r8, r1, ip, lsr ip
   18bfc:	andeq	r8, r1, ip, lsr ip
   18c00:	andeq	r8, r1, ip, lsr ip
   18c04:	andeq	r8, r1, ip, lsr ip
   18c08:	andeq	r8, r1, ip, lsr ip
   18c0c:	andeq	r8, r1, ip, lsr ip
   18c10:	andeq	r8, r1, ip, lsr ip
   18c14:	andeq	r8, r1, ip, lsr ip
   18c18:	andeq	r8, r1, ip, lsr ip
   18c1c:	andeq	r8, r1, r4, lsr ip
   18c20:	andeq	r8, r1, r4, lsr ip
   18c24:	andeq	r8, r1, r4, lsr ip
   18c28:	andeq	r8, r1, r4, lsr ip
   18c2c:	andeq	r8, r1, r4, lsr ip
   18c30:	andeq	r8, r1, r4, lsr ip
   18c34:	mov	r3, #1
   18c38:	b	18c40 <__assert_fail@plt+0x7d14>
   18c3c:	mov	r3, #0
   18c40:	mov	r0, r3
   18c44:	add	sp, fp, #0
   18c48:	pop	{fp}		; (ldr fp, [sp], #4)
   18c4c:	bx	lr
   18c50:	push	{fp}		; (str fp, [sp, #-4]!)
   18c54:	add	fp, sp, #0
   18c58:	sub	sp, sp, #12
   18c5c:	str	r0, [fp, #-8]
   18c60:	ldr	r3, [fp, #-8]
   18c64:	sub	r3, r3, #65	; 0x41
   18c68:	cmp	r3, #25
   18c6c:	bhi	18c7c <__assert_fail@plt+0x7d50>
   18c70:	ldr	r3, [fp, #-8]
   18c74:	add	r3, r3, #32
   18c78:	b	18c80 <__assert_fail@plt+0x7d54>
   18c7c:	ldr	r3, [fp, #-8]
   18c80:	mov	r0, r3
   18c84:	add	sp, fp, #0
   18c88:	pop	{fp}		; (ldr fp, [sp], #4)
   18c8c:	bx	lr
   18c90:	push	{fp}		; (str fp, [sp, #-4]!)
   18c94:	add	fp, sp, #0
   18c98:	sub	sp, sp, #12
   18c9c:	str	r0, [fp, #-8]
   18ca0:	ldr	r3, [fp, #-8]
   18ca4:	sub	r3, r3, #97	; 0x61
   18ca8:	cmp	r3, #25
   18cac:	bhi	18cbc <__assert_fail@plt+0x7d90>
   18cb0:	ldr	r3, [fp, #-8]
   18cb4:	sub	r3, r3, #32
   18cb8:	b	18cc0 <__assert_fail@plt+0x7d94>
   18cbc:	ldr	r3, [fp, #-8]
   18cc0:	mov	r0, r3
   18cc4:	add	sp, fp, #0
   18cc8:	pop	{fp}		; (ldr fp, [sp], #4)
   18ccc:	bx	lr
   18cd0:	str	fp, [sp, #-8]!
   18cd4:	str	lr, [sp, #4]
   18cd8:	add	fp, sp, #4
   18cdc:	sub	sp, sp, #272	; 0x110
   18ce0:	str	r0, [fp, #-272]	; 0xfffffef0
   18ce4:	sub	r3, fp, #264	; 0x108
   18ce8:	movw	r2, #257	; 0x101
   18cec:	mov	r1, r3
   18cf0:	ldr	r0, [fp, #-272]	; 0xfffffef0
   18cf4:	bl	18e94 <__assert_fail@plt+0x7f68>
   18cf8:	mov	r3, r0
   18cfc:	cmp	r3, #0
   18d00:	beq	18d0c <__assert_fail@plt+0x7de0>
   18d04:	mov	r3, #0
   18d08:	b	18d60 <__assert_fail@plt+0x7e34>
   18d0c:	sub	r3, fp, #264	; 0x108
   18d10:	movw	r1, #40096	; 0x9ca0
   18d14:	movt	r1, #1
   18d18:	mov	r0, r3
   18d1c:	bl	10cd4 <strcmp@plt>
   18d20:	mov	r3, r0
   18d24:	cmp	r3, #0
   18d28:	beq	18d54 <__assert_fail@plt+0x7e28>
   18d2c:	sub	r3, fp, #264	; 0x108
   18d30:	movw	r1, #40100	; 0x9ca4
   18d34:	movt	r1, #1
   18d38:	mov	r0, r3
   18d3c:	bl	10cd4 <strcmp@plt>
   18d40:	mov	r3, r0
   18d44:	cmp	r3, #0
   18d48:	beq	18d54 <__assert_fail@plt+0x7e28>
   18d4c:	mov	r3, #1
   18d50:	b	18d58 <__assert_fail@plt+0x7e2c>
   18d54:	mov	r3, #0
   18d58:	and	r3, r3, #1
   18d5c:	uxtb	r3, r3
   18d60:	mov	r0, r3
   18d64:	sub	sp, fp, #4
   18d68:	ldr	fp, [sp]
   18d6c:	add	sp, sp, #4
   18d70:	pop	{pc}		; (ldr pc, [sp], #4)
   18d74:	str	fp, [sp, #-8]!
   18d78:	str	lr, [sp, #4]
   18d7c:	add	fp, sp, #4
   18d80:	sub	sp, sp, #16
   18d84:	str	r0, [fp, #-16]
   18d88:	mov	r1, #0
   18d8c:	ldr	r0, [fp, #-16]
   18d90:	bl	10ec0 <setlocale@plt>
   18d94:	str	r0, [fp, #-8]
   18d98:	ldr	r3, [fp, #-8]
   18d9c:	mov	r0, r3
   18da0:	sub	sp, fp, #4
   18da4:	ldr	fp, [sp]
   18da8:	add	sp, sp, #4
   18dac:	pop	{pc}		; (ldr pc, [sp], #4)
   18db0:	str	fp, [sp, #-8]!
   18db4:	str	lr, [sp, #4]
   18db8:	add	fp, sp, #4
   18dbc:	sub	sp, sp, #24
   18dc0:	str	r0, [fp, #-16]
   18dc4:	str	r1, [fp, #-20]	; 0xffffffec
   18dc8:	str	r2, [fp, #-24]	; 0xffffffe8
   18dcc:	ldr	r0, [fp, #-16]
   18dd0:	bl	18d74 <__assert_fail@plt+0x7e48>
   18dd4:	str	r0, [fp, #-8]
   18dd8:	ldr	r3, [fp, #-8]
   18ddc:	cmp	r3, #0
   18de0:	bne	18e04 <__assert_fail@plt+0x7ed8>
   18de4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18de8:	cmp	r3, #0
   18dec:	beq	18dfc <__assert_fail@plt+0x7ed0>
   18df0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18df4:	mov	r2, #0
   18df8:	strb	r2, [r3]
   18dfc:	mov	r3, #22
   18e00:	b	18e80 <__assert_fail@plt+0x7f54>
   18e04:	ldr	r0, [fp, #-8]
   18e08:	bl	10e48 <strlen@plt>
   18e0c:	str	r0, [fp, #-12]
   18e10:	ldr	r2, [fp, #-12]
   18e14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e18:	cmp	r2, r3
   18e1c:	bcs	18e40 <__assert_fail@plt+0x7f14>
   18e20:	ldr	r3, [fp, #-12]
   18e24:	add	r3, r3, #1
   18e28:	mov	r2, r3
   18e2c:	ldr	r1, [fp, #-8]
   18e30:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e34:	bl	10d28 <memcpy@plt>
   18e38:	mov	r3, #0
   18e3c:	b	18e80 <__assert_fail@plt+0x7f54>
   18e40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e44:	cmp	r3, #0
   18e48:	beq	18e7c <__assert_fail@plt+0x7f50>
   18e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e50:	sub	r3, r3, #1
   18e54:	mov	r2, r3
   18e58:	ldr	r1, [fp, #-8]
   18e5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e60:	bl	10d28 <memcpy@plt>
   18e64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e68:	sub	r3, r3, #1
   18e6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18e70:	add	r3, r2, r3
   18e74:	mov	r2, #0
   18e78:	strb	r2, [r3]
   18e7c:	mov	r3, #34	; 0x22
   18e80:	mov	r0, r3
   18e84:	sub	sp, fp, #4
   18e88:	ldr	fp, [sp]
   18e8c:	add	sp, sp, #4
   18e90:	pop	{pc}		; (ldr pc, [sp], #4)
   18e94:	str	fp, [sp, #-8]!
   18e98:	str	lr, [sp, #4]
   18e9c:	add	fp, sp, #4
   18ea0:	sub	sp, sp, #16
   18ea4:	str	r0, [fp, #-8]
   18ea8:	str	r1, [fp, #-12]
   18eac:	str	r2, [fp, #-16]
   18eb0:	ldr	r2, [fp, #-16]
   18eb4:	ldr	r1, [fp, #-12]
   18eb8:	ldr	r0, [fp, #-8]
   18ebc:	bl	18db0 <__assert_fail@plt+0x7e84>
   18ec0:	mov	r3, r0
   18ec4:	mov	r0, r3
   18ec8:	sub	sp, fp, #4
   18ecc:	ldr	fp, [sp]
   18ed0:	add	sp, sp, #4
   18ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ed8:	str	fp, [sp, #-8]!
   18edc:	str	lr, [sp, #4]
   18ee0:	add	fp, sp, #4
   18ee4:	sub	sp, sp, #8
   18ee8:	str	r0, [fp, #-8]
   18eec:	ldr	r0, [fp, #-8]
   18ef0:	bl	18d74 <__assert_fail@plt+0x7e48>
   18ef4:	mov	r3, r0
   18ef8:	mov	r0, r3
   18efc:	sub	sp, fp, #4
   18f00:	ldr	fp, [sp]
   18f04:	add	sp, sp, #4
   18f08:	pop	{pc}		; (ldr pc, [sp], #4)
   18f0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f10:	mov	r7, r0
   18f14:	ldr	r6, [pc, #72]	; 18f64 <__assert_fail@plt+0x8038>
   18f18:	ldr	r5, [pc, #72]	; 18f68 <__assert_fail@plt+0x803c>
   18f1c:	add	r6, pc, r6
   18f20:	add	r5, pc, r5
   18f24:	sub	r6, r6, r5
   18f28:	mov	r8, r1
   18f2c:	mov	r9, r2
   18f30:	bl	10c9c <calloc@plt-0x20>
   18f34:	asrs	r6, r6, #2
   18f38:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f3c:	mov	r4, #0
   18f40:	add	r4, r4, #1
   18f44:	ldr	r3, [r5], #4
   18f48:	mov	r2, r9
   18f4c:	mov	r1, r8
   18f50:	mov	r0, r7
   18f54:	blx	r3
   18f58:	cmp	r6, r4
   18f5c:	bne	18f40 <__assert_fail@plt+0x8014>
   18f60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f64:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   18f68:	andeq	r0, r1, r8, ror #31
   18f6c:	bx	lr
   18f70:	ldr	r3, [pc, #12]	; 18f84 <__assert_fail@plt+0x8058>
   18f74:	mov	r1, #0
   18f78:	add	r3, pc, r3
   18f7c:	ldr	r2, [r3]
   18f80:	b	10e78 <__cxa_atexit@plt>
   18f84:	andeq	r1, r1, r8, ror #2

Disassembly of section .fini:

00018f88 <.fini>:
   18f88:	push	{r3, lr}
   18f8c:	pop	{r3, pc}
