
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

000111a0 <.init>:
   111a0:	push	{r3, lr}
   111a4:	bl	1153c <__assert_fail@plt+0x4c>
   111a8:	pop	{r3, pc}

Disassembly of section .plt:

000111ac <fstatfs64@plt-0x14>:
   111ac:	push	{lr}		; (str lr, [sp, #-4]!)
   111b0:	ldr	lr, [pc, #4]	; 111bc <fstatfs64@plt-0x4>
   111b4:	add	lr, pc, lr
   111b8:	ldr	pc, [lr, #8]!
   111bc:	andeq	r9, r1, r4, asr #28

000111c0 <fstatfs64@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #102400	; 0x19000
   111c8:	ldr	pc, [ip, #3652]!	; 0xe44

000111cc <calloc@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #102400	; 0x19000
   111d4:	ldr	pc, [ip, #3644]!	; 0xe3c

000111d8 <endgrent@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #102400	; 0x19000
   111e0:	ldr	pc, [ip, #3636]!	; 0xe34

000111e4 <fputs_unlocked@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #102400	; 0x19000
   111ec:	ldr	pc, [ip, #3628]!	; 0xe2c

000111f0 <raise@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #102400	; 0x19000
   111f8:	ldr	pc, [ip, #3620]!	; 0xe24

000111fc <strcmp@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #102400	; 0x19000
   11204:	ldr	pc, [ip, #3612]!	; 0xe1c

00011208 <getpwuid@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #102400	; 0x19000
   11210:	ldr	pc, [ip, #3604]!	; 0xe14

00011214 <fflush@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011220 <memmove@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3588]!	; 0xe04

0001122c <free@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3580]!	; 0xdfc

00011238 <_exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3572]!	; 0xdf4

00011244 <memcpy@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3564]!	; 0xdec

00011250 <mbsinit@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3556]!	; 0xde4

0001125c <memcmp@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3548]!	; 0xddc

00011268 <stpcpy@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3540]!	; 0xdd4

00011274 <dcgettext@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011280 <realloc@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3524]!	; 0xdc4

0001128c <textdomain@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3516]!	; 0xdbc

00011298 <__fxstatat64@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3508]!	; 0xdb4

000112a4 <iswprint@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3500]!	; 0xdac

000112b0 <__fxstat64@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3492]!	; 0xda4

000112bc <lseek64@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3484]!	; 0xd9c

000112c8 <__ctype_get_mb_cur_max@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3476]!	; 0xd94

000112d4 <__fpending@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #102400	; 0x19000
   112dc:	ldr	pc, [ip, #3468]!	; 0xd8c

000112e0 <ferror_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #102400	; 0x19000
   112e8:	ldr	pc, [ip, #3460]!	; 0xd84

000112ec <mbrtowc@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #102400	; 0x19000
   112f4:	ldr	pc, [ip, #3452]!	; 0xd7c

000112f8 <error@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #102400	; 0x19000
   11300:	ldr	pc, [ip, #3444]!	; 0xd74

00011304 <open64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #102400	; 0x19000
   1130c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011310 <malloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #102400	; 0x19000
   11318:	ldr	pc, [ip, #3428]!	; 0xd64

0001131c <__libc_start_main@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #102400	; 0x19000
   11324:	ldr	pc, [ip, #3420]!	; 0xd5c

00011328 <__freading@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #102400	; 0x19000
   11330:	ldr	pc, [ip, #3412]!	; 0xd54

00011334 <__gmon_start__@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #102400	; 0x19000
   1133c:	ldr	pc, [ip, #3404]!	; 0xd4c

00011340 <getopt_long@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #102400	; 0x19000
   11348:	ldr	pc, [ip, #3396]!	; 0xd44

0001134c <__ctype_b_loc@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #102400	; 0x19000
   11354:	ldr	pc, [ip, #3388]!	; 0xd3c

00011358 <exit@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #102400	; 0x19000
   11360:	ldr	pc, [ip, #3380]!	; 0xd34

00011364 <strlen@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #102400	; 0x19000
   1136c:	ldr	pc, [ip, #3372]!	; 0xd2c

00011370 <strchr@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #102400	; 0x19000
   11378:	ldr	pc, [ip, #3364]!	; 0xd24

0001137c <openat64@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #102400	; 0x19000
   11384:	ldr	pc, [ip, #3356]!	; 0xd1c

00011388 <fchown@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #102400	; 0x19000
   11390:	ldr	pc, [ip, #3348]!	; 0xd14

00011394 <__errno_location@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #102400	; 0x19000
   1139c:	ldr	pc, [ip, #3340]!	; 0xd0c

000113a0 <__cxa_atexit@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #102400	; 0x19000
   113a8:	ldr	pc, [ip, #3332]!	; 0xd04

000113ac <memset@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #102400	; 0x19000
   113b4:	ldr	pc, [ip, #3324]!	; 0xcfc

000113b8 <__printf_chk@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #102400	; 0x19000
   113c0:	ldr	pc, [ip, #3316]!	; 0xcf4

000113c4 <fileno@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #102400	; 0x19000
   113cc:	ldr	pc, [ip, #3308]!	; 0xcec

000113d0 <strtoumax@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #102400	; 0x19000
   113d8:	ldr	pc, [ip, #3300]!	; 0xce4

000113dc <__fprintf_chk@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #102400	; 0x19000
   113e4:	ldr	pc, [ip, #3292]!	; 0xcdc

000113e8 <fclose@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #102400	; 0x19000
   113f0:	ldr	pc, [ip, #3284]!	; 0xcd4

000113f4 <fseeko64@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #102400	; 0x19000
   113fc:	ldr	pc, [ip, #3276]!	; 0xccc

00011400 <fcntl64@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #102400	; 0x19000
   11408:	ldr	pc, [ip, #3268]!	; 0xcc4

0001140c <setlocale@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #102400	; 0x19000
   11414:	ldr	pc, [ip, #3260]!	; 0xcbc

00011418 <strrchr@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #102400	; 0x19000
   11420:	ldr	pc, [ip, #3252]!	; 0xcb4

00011424 <nl_langinfo@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #102400	; 0x19000
   1142c:	ldr	pc, [ip, #3244]!	; 0xcac

00011430 <readdir64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #102400	; 0x19000
   11438:	ldr	pc, [ip, #3236]!	; 0xca4

0001143c <fdopendir@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #102400	; 0x19000
   11444:	ldr	pc, [ip, #3228]!	; 0xc9c

00011448 <dirfd@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #102400	; 0x19000
   11450:	ldr	pc, [ip, #3220]!	; 0xc94

00011454 <fchdir@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #102400	; 0x19000
   1145c:	ldr	pc, [ip, #3212]!	; 0xc8c

00011460 <qsort@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #102400	; 0x19000
   11468:	ldr	pc, [ip, #3204]!	; 0xc84

0001146c <fchownat@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #102400	; 0x19000
   11474:	ldr	pc, [ip, #3196]!	; 0xc7c

00011478 <bindtextdomain@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #102400	; 0x19000
   11480:	ldr	pc, [ip, #3188]!	; 0xc74

00011484 <__xstat64@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #102400	; 0x19000
   1148c:	ldr	pc, [ip, #3180]!	; 0xc6c

00011490 <fputs@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #102400	; 0x19000
   11498:	ldr	pc, [ip, #3172]!	; 0xc64

0001149c <strncmp@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #102400	; 0x19000
   114a4:	ldr	pc, [ip, #3164]!	; 0xc5c

000114a8 <abort@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #102400	; 0x19000
   114b0:	ldr	pc, [ip, #3156]!	; 0xc54

000114b4 <close@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #102400	; 0x19000
   114bc:	ldr	pc, [ip, #3148]!	; 0xc4c

000114c0 <__lxstat64@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #102400	; 0x19000
   114c8:	ldr	pc, [ip, #3140]!	; 0xc44

000114cc <closedir@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #102400	; 0x19000
   114d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000114d8 <getgrgid@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #102400	; 0x19000
   114e0:	ldr	pc, [ip, #3124]!	; 0xc34

000114e4 <getgrnam@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #102400	; 0x19000
   114ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000114f0 <__assert_fail@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #102400	; 0x19000
   114f8:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00011500 <.text>:
   11500:	mov	fp, #0
   11504:	mov	lr, #0
   11508:	pop	{r1}		; (ldr r1, [sp], #4)
   1150c:	mov	r2, sp
   11510:	push	{r2}		; (str r2, [sp, #-4]!)
   11514:	push	{r0}		; (str r0, [sp, #-4]!)
   11518:	ldr	ip, [pc, #16]	; 11530 <__assert_fail@plt+0x40>
   1151c:	push	{ip}		; (str ip, [sp, #-4]!)
   11520:	ldr	r0, [pc, #12]	; 11534 <__assert_fail@plt+0x44>
   11524:	ldr	r3, [pc, #12]	; 11538 <__assert_fail@plt+0x48>
   11528:	bl	1131c <__libc_start_main@plt>
   1152c:	bl	114a8 <abort@plt>
   11530:	andeq	r9, r1, ip, lsl #8
   11534:	andeq	r1, r1, r4, lsl #18
   11538:	andeq	r9, r1, ip, lsr #7
   1153c:	ldr	r3, [pc, #20]	; 11558 <__assert_fail@plt+0x68>
   11540:	ldr	r2, [pc, #20]	; 1155c <__assert_fail@plt+0x6c>
   11544:	add	r3, pc, r3
   11548:	ldr	r2, [r3, r2]
   1154c:	cmp	r2, #0
   11550:	bxeq	lr
   11554:	b	11334 <__gmon_start__@plt>
   11558:			; <UNDEFINED> instruction: 0x00019ab4
   1155c:	andeq	r0, r0, r0, lsr #2
   11560:	ldr	r0, [pc, #24]	; 11580 <__assert_fail@plt+0x90>
   11564:	ldr	r3, [pc, #24]	; 11584 <__assert_fail@plt+0x94>
   11568:	cmp	r3, r0
   1156c:	bxeq	lr
   11570:	ldr	r3, [pc, #16]	; 11588 <__assert_fail@plt+0x98>
   11574:	cmp	r3, #0
   11578:	bxeq	lr
   1157c:	bx	r3
   11580:	andeq	fp, r2, r8, ror r1
   11584:	andeq	fp, r2, r8, ror r1
   11588:	andeq	r0, r0, r0
   1158c:	ldr	r0, [pc, #36]	; 115b8 <__assert_fail@plt+0xc8>
   11590:	ldr	r1, [pc, #36]	; 115bc <__assert_fail@plt+0xcc>
   11594:	sub	r1, r1, r0
   11598:	asr	r1, r1, #2
   1159c:	add	r1, r1, r1, lsr #31
   115a0:	asrs	r1, r1, #1
   115a4:	bxeq	lr
   115a8:	ldr	r3, [pc, #16]	; 115c0 <__assert_fail@plt+0xd0>
   115ac:	cmp	r3, #0
   115b0:	bxeq	lr
   115b4:	bx	r3
   115b8:	andeq	fp, r2, r8, ror r1
   115bc:	andeq	fp, r2, r8, ror r1
   115c0:	andeq	r0, r0, r0
   115c4:	push	{r4, lr}
   115c8:	ldr	r4, [pc, #24]	; 115e8 <__assert_fail@plt+0xf8>
   115cc:	ldrb	r3, [r4]
   115d0:	cmp	r3, #0
   115d4:	popne	{r4, pc}
   115d8:	bl	11560 <__assert_fail@plt+0x70>
   115dc:	mov	r3, #1
   115e0:	strb	r3, [r4]
   115e4:	pop	{r4, pc}
   115e8:	muleq	r2, r4, r1
   115ec:	b	1158c <__assert_fail@plt+0x9c>
   115f0:	push	{fp, lr}
   115f4:	mov	fp, sp
   115f8:	sub	sp, sp, #56	; 0x38
   115fc:	mov	r8, r0
   11600:	cmp	r0, #0
   11604:	bne	118c4 <__assert_fail@plt+0x3d4>
   11608:	movw	r1, #38075	; 0x94bb
   1160c:	mov	r0, #0
   11610:	mov	r2, #5
   11614:	movt	r1, #1
   11618:	bl	11274 <dcgettext@plt>
   1161c:	movw	r5, #45496	; 0xb1b8
   11620:	mov	r1, r0
   11624:	mov	r0, #1
   11628:	movt	r5, #2
   1162c:	ldr	r2, [r5]
   11630:	mov	r3, r2
   11634:	bl	113b8 <__printf_chk@plt>
   11638:	movw	r1, #38160	; 0x9510
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	movt	r1, #1
   11648:	bl	11274 <dcgettext@plt>
   1164c:	movw	r9, #45452	; 0xb18c
   11650:	movt	r9, #2
   11654:	ldr	r1, [r9]
   11658:	bl	111e4 <fputs_unlocked@plt>
   1165c:	movw	r1, #38268	; 0x957c
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #1
   1166c:	bl	11274 <dcgettext@plt>
   11670:	ldr	r1, [r9]
   11674:	bl	111e4 <fputs_unlocked@plt>
   11678:	movw	r1, #38469	; 0x9645
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	movt	r1, #1
   11688:	bl	11274 <dcgettext@plt>
   1168c:	ldr	r1, [r9]
   11690:	bl	111e4 <fputs_unlocked@plt>
   11694:	movw	r1, #38700	; 0x972c
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	movt	r1, #1
   116a4:	bl	11274 <dcgettext@plt>
   116a8:	ldr	r1, [r9]
   116ac:	bl	111e4 <fputs_unlocked@plt>
   116b0:	movw	r1, #38819	; 0x97a3
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #1
   116c0:	bl	11274 <dcgettext@plt>
   116c4:	ldr	r1, [r9]
   116c8:	bl	111e4 <fputs_unlocked@plt>
   116cc:	movw	r1, #38947	; 0x9823
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	11274 <dcgettext@plt>
   116e0:	ldr	r1, [r9]
   116e4:	bl	111e4 <fputs_unlocked@plt>
   116e8:	movw	r1, #39053	; 0x988d
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	11274 <dcgettext@plt>
   116fc:	ldr	r1, [r9]
   11700:	bl	111e4 <fputs_unlocked@plt>
   11704:	movw	r1, #39124	; 0x98d4
   11708:	mov	r0, #0
   1170c:	mov	r2, #5
   11710:	movt	r1, #1
   11714:	bl	11274 <dcgettext@plt>
   11718:	ldr	r1, [r9]
   1171c:	bl	111e4 <fputs_unlocked@plt>
   11720:	movw	r1, #39589	; 0x9aa5
   11724:	mov	r0, #0
   11728:	mov	r2, #5
   1172c:	movt	r1, #1
   11730:	bl	11274 <dcgettext@plt>
   11734:	ldr	r1, [r9]
   11738:	bl	111e4 <fputs_unlocked@plt>
   1173c:	movw	r1, #39634	; 0x9ad2
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #1
   1174c:	bl	11274 <dcgettext@plt>
   11750:	ldr	r1, [r9]
   11754:	bl	111e4 <fputs_unlocked@plt>
   11758:	movw	r1, #39688	; 0x9b08
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	movt	r1, #1
   11768:	bl	11274 <dcgettext@plt>
   1176c:	ldr	r2, [r5]
   11770:	mov	r1, r0
   11774:	mov	r0, #1
   11778:	mov	r3, r2
   1177c:	bl	113b8 <__printf_chk@plt>
   11780:	movw	r0, #40640	; 0x9ec0
   11784:	mov	r6, sp
   11788:	movt	r0, #1
   1178c:	mov	r1, r6
   11790:	ldm	r0!, {r2, r3, r4, r5}
   11794:	stmia	r1!, {r2, r3, r4, r5}
   11798:	ldm	r0!, {r2, r3, r4, r5, r7}
   1179c:	stmia	r1!, {r2, r3, r4, r5, r7}
   117a0:	ldm	r0, {r2, r3, r4, r5, r7}
   117a4:	stm	r1, {r2, r3, r4, r5, r7}
   117a8:	movw	r1, #40017	; 0x9c51
   117ac:	movw	r5, #39821	; 0x9b8d
   117b0:	movt	r1, #1
   117b4:	movt	r5, #1
   117b8:	mov	r0, r5
   117bc:	bl	111fc <strcmp@plt>
   117c0:	cmp	r0, #0
   117c4:	ldrne	r1, [r6, #8]!
   117c8:	cmpne	r1, #0
   117cc:	bne	117b8 <__assert_fail@plt+0x2c8>
   117d0:	ldr	r6, [r6, #4]
   117d4:	movw	r1, #40112	; 0x9cb0
   117d8:	mov	r0, #0
   117dc:	mov	r2, #5
   117e0:	movt	r1, #1
   117e4:	bl	11274 <dcgettext@plt>
   117e8:	movw	r2, #39860	; 0x9bb4
   117ec:	movw	r3, #40135	; 0x9cc7
   117f0:	mov	r1, r0
   117f4:	mov	r0, #1
   117f8:	movt	r2, #1
   117fc:	movt	r3, #1
   11800:	bl	113b8 <__printf_chk@plt>
   11804:	cmp	r6, #0
   11808:	mov	r0, #5
   1180c:	mov	r1, #0
   11810:	moveq	r6, r5
   11814:	bl	1140c <setlocale@plt>
   11818:	cmp	r0, #0
   1181c:	beq	11854 <__assert_fail@plt+0x364>
   11820:	movw	r1, #40175	; 0x9cef
   11824:	mov	r2, #3
   11828:	movt	r1, #1
   1182c:	bl	1149c <strncmp@plt>
   11830:	cmp	r0, #0
   11834:	beq	11854 <__assert_fail@plt+0x364>
   11838:	movw	r1, #40179	; 0x9cf3
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	11274 <dcgettext@plt>
   1184c:	ldr	r1, [r9]
   11850:	bl	111e4 <fputs_unlocked@plt>
   11854:	movw	r1, #40250	; 0x9d3a
   11858:	mov	r0, #0
   1185c:	mov	r2, #5
   11860:	movt	r1, #1
   11864:	bl	11274 <dcgettext@plt>
   11868:	movw	r2, #40135	; 0x9cc7
   1186c:	mov	r1, r0
   11870:	mov	r0, #1
   11874:	mov	r3, r5
   11878:	movt	r2, #1
   1187c:	bl	113b8 <__printf_chk@plt>
   11880:	movw	r1, #40277	; 0x9d55
   11884:	mov	r0, #0
   11888:	mov	r2, #5
   1188c:	movt	r1, #1
   11890:	bl	11274 <dcgettext@plt>
   11894:	movw	r3, #39588	; 0x9aa4
   11898:	mov	r1, r0
   1189c:	movw	r0, #40045	; 0x9c6d
   118a0:	cmp	r6, r5
   118a4:	mov	r2, r6
   118a8:	movt	r0, #1
   118ac:	movt	r3, #1
   118b0:	moveq	r3, r0
   118b4:	mov	r0, #1
   118b8:	bl	113b8 <__printf_chk@plt>
   118bc:	mov	r0, r8
   118c0:	bl	11358 <exit@plt>
   118c4:	movw	r0, #45448	; 0xb188
   118c8:	movw	r1, #38036	; 0x9494
   118cc:	mov	r2, #5
   118d0:	movt	r0, #2
   118d4:	movt	r1, #1
   118d8:	ldr	r5, [r0]
   118dc:	mov	r0, #0
   118e0:	bl	11274 <dcgettext@plt>
   118e4:	mov	r2, r0
   118e8:	movw	r0, #45496	; 0xb1b8
   118ec:	mov	r1, #1
   118f0:	movt	r0, #2
   118f4:	ldr	r3, [r0]
   118f8:	mov	r0, r5
   118fc:	bl	113dc <__fprintf_chk@plt>
   11900:	b	118bc <__assert_fail@plt+0x3cc>
   11904:	push	{fp, lr}
   11908:	mov	fp, sp
   1190c:	sub	sp, sp, #144	; 0x90
   11910:	mov	r7, r0
   11914:	ldr	r0, [r1]
   11918:	mov	r4, r1
   1191c:	bl	15e14 <__assert_fail@plt+0x4924>
   11920:	movw	r1, #39588	; 0x9aa4
   11924:	mov	r0, #6
   11928:	movt	r1, #1
   1192c:	bl	1140c <setlocale@plt>
   11930:	movw	r5, #39864	; 0x9bb8
   11934:	movw	r1, #39827	; 0x9b93
   11938:	movt	r5, #1
   1193c:	movt	r1, #1
   11940:	mov	r0, r5
   11944:	bl	11478 <bindtextdomain@plt>
   11948:	mov	r0, r5
   1194c:	bl	1128c <textdomain@plt>
   11950:	movw	r0, #11208	; 0x2bc8
   11954:	movt	r0, #1
   11958:	bl	19410 <__assert_fail@plt+0x7f20>
   1195c:	sub	r0, fp, #24
   11960:	bl	11dcc <__assert_fail@plt+0x8dc>
   11964:	movw	r5, #39851	; 0x9bab
   11968:	movw	r6, #40432	; 0x9df0
   1196c:	mov	sl, #0
   11970:	mov	r8, #16
   11974:	mvn	r9, #0
   11978:	movt	r5, #1
   1197c:	movt	r6, #1
   11980:	mov	r0, #0
   11984:	str	r0, [sp, #12]
   11988:	mov	r0, r7
   1198c:	mov	r1, r4
   11990:	mov	r2, r5
   11994:	mov	r3, r6
   11998:	str	sl, [sp]
   1199c:	bl	11340 <getopt_long@plt>
   119a0:	cmp	r0, #103	; 0x67
   119a4:	bgt	119d4 <__assert_fail@plt+0x4e4>
   119a8:	cmp	r0, #81	; 0x51
   119ac:	bgt	11a00 <__assert_fail@plt+0x510>
   119b0:	cmp	r0, #71	; 0x47
   119b4:	ble	11a90 <__assert_fail@plt+0x5a0>
   119b8:	mov	r8, #17
   119bc:	cmp	r0, #72	; 0x48
   119c0:	beq	11988 <__assert_fail@plt+0x498>
   119c4:	cmp	r0, #76	; 0x4c
   119c8:	bne	11a78 <__assert_fail@plt+0x588>
   119cc:	mov	r8, #2
   119d0:	b	11988 <__assert_fail@plt+0x498>
   119d4:	sub	r1, r0, #256	; 0x100
   119d8:	cmp	r1, #3
   119dc:	bhi	11a1c <__assert_fail@plt+0x52c>
   119e0:	add	r0, pc, #0
   119e4:	ldr	pc, [r0, r1, lsl #2]
   119e8:	strdeq	r1, [r1], -r8
   119ec:	andeq	r1, r1, r0, lsl #19
   119f0:	andeq	r1, r1, r8, lsl #21
   119f4:	andeq	r1, r1, ip, lsr #20
   119f8:	mov	r9, #1
   119fc:	b	11988 <__assert_fail@plt+0x498>
   11a00:	cmp	r0, #82	; 0x52
   11a04:	beq	11a48 <__assert_fail@plt+0x558>
   11a08:	cmp	r0, #99	; 0x63
   11a0c:	bne	11a54 <__assert_fail@plt+0x564>
   11a10:	mov	r0, #1
   11a14:	str	r0, [fp, #-24]	; 0xffffffe8
   11a18:	b	11988 <__assert_fail@plt+0x498>
   11a1c:	cmp	r0, #104	; 0x68
   11a20:	bne	11a68 <__assert_fail@plt+0x578>
   11a24:	mov	r9, #0
   11a28:	b	11988 <__assert_fail@plt+0x498>
   11a2c:	movw	r0, #45456	; 0xb190
   11a30:	movw	r1, #45464	; 0xb198
   11a34:	movt	r0, #2
   11a38:	movt	r1, #2
   11a3c:	ldr	r0, [r0]
   11a40:	str	r0, [r1]
   11a44:	b	11988 <__assert_fail@plt+0x498>
   11a48:	mov	r0, #1
   11a4c:	strb	r0, [fp, #-20]	; 0xffffffec
   11a50:	b	11988 <__assert_fail@plt+0x498>
   11a54:	cmp	r0, #102	; 0x66
   11a58:	bne	11c2c <__assert_fail@plt+0x73c>
   11a5c:	mov	r0, #1
   11a60:	strb	r0, [fp, #-11]
   11a64:	b	11988 <__assert_fail@plt+0x498>
   11a68:	cmp	r0, #118	; 0x76
   11a6c:	bne	11c2c <__assert_fail@plt+0x73c>
   11a70:	str	sl, [fp, #-24]	; 0xffffffe8
   11a74:	b	11988 <__assert_fail@plt+0x498>
   11a78:	cmp	r0, #80	; 0x50
   11a7c:	bne	11c2c <__assert_fail@plt+0x73c>
   11a80:	mov	r8, #16
   11a84:	b	11988 <__assert_fail@plt+0x498>
   11a88:	mov	r0, #1
   11a8c:	b	11984 <__assert_fail@plt+0x494>
   11a90:	cmn	r0, #3
   11a94:	beq	11aa8 <__assert_fail@plt+0x5b8>
   11a98:	cmn	r0, #2
   11a9c:	bne	11afc <__assert_fail@plt+0x60c>
   11aa0:	mov	r0, #0
   11aa4:	bl	115f0 <__assert_fail@plt+0x100>
   11aa8:	movw	r0, #45360	; 0xb130
   11aac:	movw	r2, #39890	; 0x9bd2
   11ab0:	mov	r1, #0
   11ab4:	movw	r7, #39874	; 0x9bc2
   11ab8:	movt	r0, #2
   11abc:	movt	r2, #1
   11ac0:	str	r1, [sp, #8]
   11ac4:	movw	r1, #39821	; 0x9b8d
   11ac8:	movt	r7, #1
   11acc:	ldr	r3, [r0]
   11ad0:	movw	r0, #45452	; 0xb18c
   11ad4:	str	r2, [sp, #4]
   11ad8:	movw	r2, #39860	; 0x9bb4
   11adc:	movt	r1, #1
   11ae0:	str	r7, [sp]
   11ae4:	movt	r0, #2
   11ae8:	movt	r2, #1
   11aec:	ldr	r0, [r0]
   11af0:	bl	17d94 <__assert_fail@plt+0x68a4>
   11af4:	mov	r0, #0
   11af8:	bl	11358 <exit@plt>
   11afc:	cmn	r0, #1
   11b00:	bne	11c2c <__assert_fail@plt+0x73c>
   11b04:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11b08:	mov	sl, #16
   11b0c:	cmp	r0, #0
   11b10:	bne	11b1c <__assert_fail@plt+0x62c>
   11b14:	mov	r0, r9
   11b18:	b	11b5c <__assert_fail@plt+0x66c>
   11b1c:	cmp	r8, #16
   11b20:	bne	11b54 <__assert_fail@plt+0x664>
   11b24:	mov	r0, #0
   11b28:	cmp	r9, #1
   11b2c:	bne	11b5c <__assert_fail@plt+0x66c>
   11b30:	movw	r1, #39903	; 0x9bdf
   11b34:	mov	r0, #0
   11b38:	mov	r2, #5
   11b3c:	movt	r1, #1
   11b40:	bl	11274 <dcgettext@plt>
   11b44:	mov	r2, r0
   11b48:	mov	r0, #1
   11b4c:	mov	r1, #0
   11b50:	bl	112f8 <error@plt>
   11b54:	mov	r0, r9
   11b58:	mov	sl, r8
   11b5c:	cmp	r0, #0
   11b60:	movw	r8, #45440	; 0xb180
   11b64:	mov	r2, #2
   11b68:	movwne	r0, #1
   11b6c:	movt	r8, #2
   11b70:	strb	r0, [fp, #-12]
   11b74:	movw	r0, #45464	; 0xb198
   11b78:	ldr	r1, [r8]
   11b7c:	movt	r0, #2
   11b80:	ldr	r0, [r0]
   11b84:	sub	r3, r7, r1
   11b88:	cmp	r0, #0
   11b8c:	movwne	r2, #1
   11b90:	cmp	r3, r2
   11b94:	bge	11bdc <__assert_fail@plt+0x6ec>
   11b98:	cmp	r1, r7
   11b9c:	bge	11c08 <__assert_fail@plt+0x718>
   11ba0:	movw	r1, #39961	; 0x9c19
   11ba4:	mov	r0, #0
   11ba8:	mov	r2, #5
   11bac:	movt	r1, #1
   11bb0:	bl	11274 <dcgettext@plt>
   11bb4:	mov	r5, r0
   11bb8:	add	r0, r4, r7, lsl #2
   11bbc:	ldr	r0, [r0, #-4]
   11bc0:	bl	17818 <__assert_fail@plt+0x6328>
   11bc4:	mov	r3, r0
   11bc8:	mov	r0, #0
   11bcc:	mov	r1, #0
   11bd0:	mov	r2, r5
   11bd4:	bl	112f8 <error@plt>
   11bd8:	b	11c2c <__assert_fail@plt+0x73c>
   11bdc:	cmp	r0, #0
   11be0:	beq	11c34 <__assert_fail@plt+0x744>
   11be4:	add	r1, sp, #16
   11be8:	bl	19428 <__assert_fail@plt+0x7f38>
   11bec:	cmp	r0, #0
   11bf0:	bne	11ce0 <__assert_fail@plt+0x7f0>
   11bf4:	ldr	r6, [sp, #44]	; 0x2c
   11bf8:	mov	r0, r6
   11bfc:	bl	11e14 <__assert_fail@plt+0x924>
   11c00:	str	r0, [fp, #-4]
   11c04:	b	11d20 <__assert_fail@plt+0x830>
   11c08:	movw	r1, #39945	; 0x9c09
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	movt	r1, #1
   11c18:	bl	11274 <dcgettext@plt>
   11c1c:	mov	r2, r0
   11c20:	mov	r0, #0
   11c24:	mov	r1, #0
   11c28:	bl	112f8 <error@plt>
   11c2c:	mov	r0, #1
   11c30:	bl	115f0 <__assert_fail@plt+0x100>
   11c34:	add	r0, r1, #1
   11c38:	str	r0, [r8]
   11c3c:	mov	r0, #0
   11c40:	ldr	r5, [r4, r1, lsl #2]
   11c44:	ldrb	r1, [r5]
   11c48:	cmp	r1, #0
   11c4c:	beq	11c58 <__assert_fail@plt+0x768>
   11c50:	mov	r0, r5
   11c54:	bl	182ac <__assert_fail@plt+0x6dbc>
   11c58:	str	r0, [fp, #-4]
   11c5c:	mvn	r6, #0
   11c60:	ldrb	r0, [r5]
   11c64:	cmp	r0, #0
   11c68:	beq	11d20 <__assert_fail@plt+0x830>
   11c6c:	mov	r0, r5
   11c70:	bl	114e4 <getgrnam@plt>
   11c74:	cmp	r0, #0
   11c78:	bne	11d10 <__assert_fail@plt+0x820>
   11c7c:	movw	r0, #39588	; 0x9aa4
   11c80:	add	r3, sp, #16
   11c84:	mov	r1, #0
   11c88:	mov	r2, #10
   11c8c:	movt	r0, #1
   11c90:	str	r0, [sp]
   11c94:	mov	r0, r5
   11c98:	bl	183ac <__assert_fail@plt+0x6ebc>
   11c9c:	cmp	r0, #0
   11ca0:	ldreq	r0, [sp, #20]
   11ca4:	cmpeq	r0, #0
   11ca8:	beq	11d18 <__assert_fail@plt+0x828>
   11cac:	movw	r1, #40412	; 0x9ddc
   11cb0:	mov	r0, #0
   11cb4:	mov	r2, #5
   11cb8:	movt	r1, #1
   11cbc:	bl	11274 <dcgettext@plt>
   11cc0:	mov	r4, r0
   11cc4:	mov	r0, r5
   11cc8:	bl	17818 <__assert_fail@plt+0x6328>
   11ccc:	mov	r3, r0
   11cd0:	mov	r0, #1
   11cd4:	mov	r1, #0
   11cd8:	mov	r2, r4
   11cdc:	bl	112f8 <error@plt>
   11ce0:	bl	11394 <__errno_location@plt>
   11ce4:	ldr	r4, [r0]
   11ce8:	movw	r1, #39986	; 0x9c32
   11cec:	mov	r0, #0
   11cf0:	mov	r2, #5
   11cf4:	movt	r1, #1
   11cf8:	bl	11274 <dcgettext@plt>
   11cfc:	mov	r5, r0
   11d00:	movw	r0, #45464	; 0xb198
   11d04:	movt	r0, #2
   11d08:	ldr	r1, [r0]
   11d0c:	b	11d7c <__assert_fail@plt+0x88c>
   11d10:	ldr	r6, [r0, #8]
   11d14:	b	11d1c <__assert_fail@plt+0x82c>
   11d18:	ldr	r6, [sp, #16]
   11d1c:	bl	111d8 <endgrent@plt>
   11d20:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11d24:	cmp	r0, #0
   11d28:	beq	11d98 <__assert_fail@plt+0x8a8>
   11d2c:	ldr	r0, [sp, #12]
   11d30:	eor	r0, r0, #1
   11d34:	tst	r0, #1
   11d38:	bne	11d98 <__assert_fail@plt+0x8a8>
   11d3c:	movw	r0, #45472	; 0xb1a0
   11d40:	movt	r0, #2
   11d44:	bl	17950 <__assert_fail@plt+0x6460>
   11d48:	cmp	r0, #0
   11d4c:	str	r0, [fp, #-16]
   11d50:	bne	11d98 <__assert_fail@plt+0x8a8>
   11d54:	bl	11394 <__errno_location@plt>
   11d58:	ldr	r4, [r0]
   11d5c:	movw	r1, #39986	; 0x9c32
   11d60:	mov	r0, #0
   11d64:	mov	r2, #5
   11d68:	movt	r1, #1
   11d6c:	bl	11274 <dcgettext@plt>
   11d70:	movw	r1, #42831	; 0xa74f
   11d74:	mov	r5, r0
   11d78:	movt	r1, #1
   11d7c:	mov	r0, #4
   11d80:	bl	174e0 <__assert_fail@plt+0x5ff0>
   11d84:	mov	r3, r0
   11d88:	mov	r0, #1
   11d8c:	mov	r1, r4
   11d90:	mov	r2, r5
   11d94:	bl	112f8 <error@plt>
   11d98:	ldr	r0, [r8]
   11d9c:	mvn	r1, #0
   11da0:	mvn	r2, #0
   11da4:	mov	r3, r6
   11da8:	str	r1, [sp]
   11dac:	str	r1, [sp, #4]
   11db0:	sub	r1, fp, #24
   11db4:	str	r1, [sp, #8]
   11db8:	orr	r1, sl, #1024	; 0x400
   11dbc:	add	r0, r4, r0, lsl #2
   11dc0:	bl	11e94 <__assert_fail@plt+0x9a4>
   11dc4:	eor	r0, r0, #1
   11dc8:	bl	11358 <exit@plt>
   11dcc:	mov	r1, #0
   11dd0:	mov	r2, #2
   11dd4:	str	r1, [r0, #8]
   11dd8:	str	r2, [r0]
   11ddc:	mov	r2, #1
   11de0:	strb	r1, [r0, #4]
   11de4:	strh	r2, [r0, #12]
   11de8:	str	r1, [r0, #16]
   11dec:	str	r1, [r0, #20]
   11df0:	bx	lr
   11df4:	push	{r4, sl, fp, lr}
   11df8:	add	fp, sp, #8
   11dfc:	mov	r4, r0
   11e00:	ldr	r0, [r0, #16]
   11e04:	bl	12cb0 <__assert_fail@plt+0x17c0>
   11e08:	ldr	r0, [r4, #20]
   11e0c:	pop	{r4, sl, fp, lr}
   11e10:	b	12cb0 <__assert_fail@plt+0x17c0>
   11e14:	push	{r4, sl, fp, lr}
   11e18:	add	fp, sp, #8
   11e1c:	sub	sp, sp, #24
   11e20:	mov	r4, r0
   11e24:	bl	114d8 <getgrgid@plt>
   11e28:	cmp	r0, #0
   11e2c:	beq	11e38 <__assert_fail@plt+0x948>
   11e30:	ldr	r0, [r0]
   11e34:	b	11e48 <__assert_fail@plt+0x958>
   11e38:	add	r2, sp, #3
   11e3c:	mov	r0, r4
   11e40:	mov	r1, #0
   11e44:	bl	15d18 <__assert_fail@plt+0x4828>
   11e48:	bl	182ac <__assert_fail@plt+0x6dbc>
   11e4c:	sub	sp, fp, #8
   11e50:	pop	{r4, sl, fp, pc}
   11e54:	push	{r4, sl, fp, lr}
   11e58:	add	fp, sp, #8
   11e5c:	sub	sp, sp, #24
   11e60:	mov	r4, r0
   11e64:	bl	11208 <getpwuid@plt>
   11e68:	cmp	r0, #0
   11e6c:	beq	11e78 <__assert_fail@plt+0x988>
   11e70:	ldr	r0, [r0]
   11e74:	b	11e88 <__assert_fail@plt+0x998>
   11e78:	add	r2, sp, #3
   11e7c:	mov	r0, r4
   11e80:	mov	r1, #0
   11e84:	bl	15d18 <__assert_fail@plt+0x4828>
   11e88:	bl	182ac <__assert_fail@plt+0x6dbc>
   11e8c:	sub	sp, fp, #8
   11e90:	pop	{r4, sl, fp, pc}
   11e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e98:	add	fp, sp, #28
   11e9c:	sub	sp, sp, #268	; 0x10c
   11ea0:	str	r3, [sp, #32]
   11ea4:	str	r2, [sp, #40]	; 0x28
   11ea8:	ldr	r2, [fp, #8]
   11eac:	ldr	r3, [fp, #12]
   11eb0:	ldr	r5, [fp, #16]
   11eb4:	and	r3, r3, r2
   11eb8:	mov	r2, #0
   11ebc:	cmn	r3, #1
   11ec0:	str	r3, [sp, #44]	; 0x2c
   11ec4:	bne	11ee8 <__assert_fail@plt+0x9f8>
   11ec8:	ldrb	r3, [r5, #12]
   11ecc:	cmp	r3, #0
   11ed0:	bne	11ee8 <__assert_fail@plt+0x9f8>
   11ed4:	ldr	r2, [r5]
   11ed8:	sub	r2, r2, #2
   11edc:	clz	r2, r2
   11ee0:	lsr	r2, r2, #5
   11ee4:	lsl	r2, r2, #3
   11ee8:	orr	r1, r2, r1
   11eec:	mov	r2, #0
   11ef0:	bl	18330 <__assert_fail@plt+0x6e40>
   11ef4:	str	r0, [sp, #52]	; 0x34
   11ef8:	bl	13590 <__assert_fail@plt+0x20a0>
   11efc:	cmp	r0, #0
   11f00:	beq	11f3c <__assert_fail@plt+0xa4c>
   11f04:	ldr	r1, [sp, #40]	; 0x28
   11f08:	movw	r2, #41131	; 0xa0ab
   11f0c:	mov	sl, r0
   11f10:	movw	r0, #41156	; 0xa0c4
   11f14:	mov	r8, #1
   11f18:	movt	r0, #1
   11f1c:	movt	r2, #1
   11f20:	cmn	r1, #1
   11f24:	moveq	r2, r0
   11f28:	sub	r0, fp, #136	; 0x88
   11f2c:	add	r0, r0, #96	; 0x60
   11f30:	str	r2, [sp, #12]
   11f34:	str	r0, [sp, #8]
   11f38:	b	11f5c <__assert_fail@plt+0xa6c>
   11f3c:	mov	r8, #1
   11f40:	b	12a80 <__assert_fail@plt+0x1590>
   11f44:	ldr	r0, [sp, #36]	; 0x24
   11f48:	bl	114b4 <close@plt>
   11f4c:	cmp	r0, #0
   11f50:	mov	r0, #6
   11f54:	movweq	r0, #2
   11f58:	b	12558 <__assert_fail@plt+0x1068>
   11f5c:	ldr	r7, [sl, #24]
   11f60:	ldr	r4, [sl, #28]
   11f64:	ldrh	r0, [sl, #56]	; 0x38
   11f68:	sub	r0, r0, #1
   11f6c:	cmp	r0, #9
   11f70:	bhi	12170 <__assert_fail@plt+0xc80>
   11f74:	add	r1, pc, #0
   11f78:	ldr	pc, [r1, r0, lsl #2]
   11f7c:	andeq	r1, r1, r4, lsr #31
   11f80:	andeq	r2, r1, r8, lsl #2
   11f84:	andeq	r2, r1, r0, ror r1
   11f88:	andeq	r2, r1, r8, rrx
   11f8c:	andeq	r2, r1, r0, ror r1
   11f90:	andeq	r2, r1, r4, ror #2
   11f94:	andeq	r2, r1, ip, ror #4
   11f98:	andeq	r2, r1, r0, ror r1
   11f9c:	andeq	r2, r1, r0, ror r1
   11fa0:	muleq	r1, r8, r0
   11fa4:	ldrb	r0, [r5, #4]
   11fa8:	cmp	r0, #0
   11fac:	beq	12170 <__assert_fail@plt+0xc80>
   11fb0:	ldr	r0, [r5, #8]
   11fb4:	mov	r6, r4
   11fb8:	mov	r4, #1
   11fbc:	cmp	r0, #0
   11fc0:	beq	12a68 <__assert_fail@plt+0x1578>
   11fc4:	ldrd	r2, [r0]
   11fc8:	ldrd	r4, [sl, #160]	; 0xa0
   11fcc:	eor	r1, r5, r3
   11fd0:	eor	r2, r4, r2
   11fd4:	orrs	r1, r2, r1
   11fd8:	bne	122e4 <__assert_fail@plt+0xdf4>
   11fdc:	ldrd	r0, [r0, #8]
   11fe0:	ldrd	r2, [sl, #64]	; 0x40
   11fe4:	ldr	r5, [fp, #16]
   11fe8:	mov	r4, #1
   11fec:	eor	r1, r3, r1
   11ff0:	eor	r0, r2, r0
   11ff4:	orrs	r0, r0, r1
   11ff8:	bne	12a68 <__assert_fail@plt+0x1578>
   11ffc:	movw	r7, #42831	; 0xa74f
   12000:	mov	r0, r6
   12004:	mov	r4, r6
   12008:	movt	r7, #1
   1200c:	mov	r1, r7
   12010:	bl	111fc <strcmp@plt>
   12014:	cmp	r0, #0
   12018:	beq	12948 <__assert_fail@plt+0x1458>
   1201c:	movw	r1, #40774	; 0x9f46
   12020:	mov	r0, #0
   12024:	mov	r2, #5
   12028:	movt	r1, #1
   1202c:	bl	11274 <dcgettext@plt>
   12030:	mov	r6, r0
   12034:	mov	r0, #0
   12038:	mov	r1, #4
   1203c:	mov	r2, r4
   12040:	bl	17438 <__assert_fail@plt+0x5f48>
   12044:	mov	r5, r0
   12048:	mov	r0, #1
   1204c:	mov	r1, #4
   12050:	mov	r2, r7
   12054:	bl	17438 <__assert_fail@plt+0x5f48>
   12058:	mov	r3, r5
   1205c:	ldr	r5, [fp, #16]
   12060:	str	r0, [sp]
   12064:	b	12970 <__assert_fail@plt+0x1480>
   12068:	ldrb	r0, [r5, #13]
   1206c:	mov	r9, #0
   12070:	mov	r6, #1
   12074:	str	r4, [sp, #48]	; 0x30
   12078:	cmp	r0, #0
   1207c:	bne	122b4 <__assert_fail@plt+0xdc4>
   12080:	ldr	r7, [sl, #32]
   12084:	movw	r1, #40898	; 0x9fc2
   12088:	mov	r9, #0
   1208c:	mov	r0, #0
   12090:	movt	r1, #1
   12094:	b	120dc <__assert_fail@plt+0xbec>
   12098:	ldr	r0, [sl, #48]	; 0x30
   1209c:	cmp	r0, #0
   120a0:	bne	120b0 <__assert_fail@plt+0xbc0>
   120a4:	ldr	r0, [sl, #16]
   120a8:	cmp	r0, #0
   120ac:	beq	1245c <__assert_fail@plt+0xf6c>
   120b0:	ldrb	r0, [r5, #13]
   120b4:	mov	r9, #0
   120b8:	mov	r6, #1
   120bc:	str	r4, [sp, #48]	; 0x30
   120c0:	cmp	r0, #0
   120c4:	bne	122b4 <__assert_fail@plt+0xdc4>
   120c8:	ldr	r7, [sl, #32]
   120cc:	movw	r1, #40881	; 0x9fb1
   120d0:	mov	r9, #0
   120d4:	mov	r0, #0
   120d8:	movt	r1, #1
   120dc:	mov	r2, #5
   120e0:	bl	11274 <dcgettext@plt>
   120e4:	mov	r5, r0
   120e8:	mov	r0, #4
   120ec:	mov	r1, r4
   120f0:	bl	174e0 <__assert_fail@plt+0x5ff0>
   120f4:	mov	r3, r0
   120f8:	mov	r0, #0
   120fc:	mov	r1, r7
   12100:	mov	r2, r5
   12104:	b	122b0 <__assert_fail@plt+0xdc0>
   12108:	ldr	r0, [sp, #52]	; 0x34
   1210c:	mov	r1, sl
   12110:	bl	1837c <__assert_fail@plt+0x6e8c>
   12114:	cmp	r0, #0
   12118:	beq	12170 <__assert_fail@plt+0xc80>
   1211c:	movw	r1, #40923	; 0x9fdb
   12120:	mov	r0, #0
   12124:	mov	r2, #5
   12128:	mov	r6, r4
   1212c:	movt	r1, #1
   12130:	bl	11274 <dcgettext@plt>
   12134:	mov	r4, r0
   12138:	mov	r0, #0
   1213c:	mov	r1, #3
   12140:	mov	r2, r6
   12144:	bl	17684 <__assert_fail@plt+0x6194>
   12148:	mov	r3, r0
   1214c:	mov	r2, r4
   12150:	mov	r0, #0
   12154:	mov	r1, #0
   12158:	mov	r4, #0
   1215c:	bl	112f8 <error@plt>
   12160:	b	12a68 <__assert_fail@plt+0x1578>
   12164:	ldrb	r0, [r5, #4]
   12168:	cmp	r0, #0
   1216c:	beq	122e8 <__assert_fail@plt+0xdf8>
   12170:	ldr	r0, [sp, #44]	; 0x2c
   12174:	cmn	r0, #1
   12178:	bne	12190 <__assert_fail@plt+0xca0>
   1217c:	ldr	r0, [r5]
   12180:	cmp	r0, #2
   12184:	ldreq	r0, [r5, #8]
   12188:	cmpeq	r0, #0
   1218c:	beq	122f0 <__assert_fail@plt+0xe00>
   12190:	ldrb	r0, [r5, #12]
   12194:	add	r9, sl, #64	; 0x40
   12198:	cmp	r0, #0
   1219c:	beq	12238 <__assert_fail@plt+0xd48>
   121a0:	ldr	r0, [sl, #80]	; 0x50
   121a4:	and	r0, r0, #61440	; 0xf000
   121a8:	cmp	r0, #40960	; 0xa000
   121ac:	bne	12238 <__assert_fail@plt+0xd48>
   121b0:	ldr	r0, [sp, #52]	; 0x34
   121b4:	add	r9, sp, #56	; 0x38
   121b8:	mov	r1, r7
   121bc:	mov	r3, #0
   121c0:	mov	r2, r9
   121c4:	ldr	r0, [r0, #32]
   121c8:	bl	19458 <__assert_fail@plt+0x7f68>
   121cc:	cmp	r0, #0
   121d0:	beq	12238 <__assert_fail@plt+0xd48>
   121d4:	ldrb	r0, [r5, #13]
   121d8:	str	r4, [sp, #48]	; 0x30
   121dc:	mov	r4, #0
   121e0:	mov	r6, #1
   121e4:	cmp	r0, #0
   121e8:	bne	12230 <__assert_fail@plt+0xd40>
   121ec:	bl	11394 <__errno_location@plt>
   121f0:	ldr	r4, [r0]
   121f4:	movw	r1, #41109	; 0xa095
   121f8:	mov	r0, #0
   121fc:	mov	r2, #5
   12200:	movt	r1, #1
   12204:	bl	11274 <dcgettext@plt>
   12208:	ldr	r1, [sp, #48]	; 0x30
   1220c:	mov	r5, r0
   12210:	mov	r0, #4
   12214:	bl	174e0 <__assert_fail@plt+0x5ff0>
   12218:	mov	r3, r0
   1221c:	mov	r1, r4
   12220:	mov	r0, #0
   12224:	mov	r2, r5
   12228:	mov	r4, #0
   1222c:	bl	112f8 <error@plt>
   12230:	add	r9, sp, #56	; 0x38
   12234:	b	12590 <__assert_fail@plt+0x10a0>
   12238:	ldr	r2, [fp, #8]
   1223c:	cmn	r2, #1
   12240:	beq	122c0 <__assert_fail@plt+0xdd0>
   12244:	ldr	r1, [r9, #24]
   12248:	ldr	r3, [fp, #12]
   1224c:	sub	r0, r1, r2
   12250:	cmn	r3, #1
   12254:	clz	r0, r0
   12258:	lsr	r0, r0, #5
   1225c:	beq	12304 <__assert_fail@plt+0xe14>
   12260:	cmp	r1, r2
   12264:	beq	122cc <__assert_fail@plt+0xddc>
   12268:	b	12304 <__assert_fail@plt+0xe14>
   1226c:	ldrb	r0, [r5, #13]
   12270:	mov	r9, #0
   12274:	mov	r6, #1
   12278:	str	r4, [sp, #48]	; 0x30
   1227c:	cmp	r0, #0
   12280:	bne	122b4 <__assert_fail@plt+0xdc4>
   12284:	ldr	r5, [sl, #32]
   12288:	mov	r0, #0
   1228c:	mov	r1, #3
   12290:	mov	r2, r4
   12294:	mov	r9, #0
   12298:	bl	17684 <__assert_fail@plt+0x6194>
   1229c:	movw	r2, #40427	; 0x9deb
   122a0:	mov	r3, r0
   122a4:	mov	r0, #0
   122a8:	mov	r1, r5
   122ac:	movt	r2, #1
   122b0:	bl	112f8 <error@plt>
   122b4:	mov	r5, #1
   122b8:	mov	r4, #0
   122bc:	b	12594 <__assert_fail@plt+0x10a4>
   122c0:	ldr	r0, [fp, #12]
   122c4:	cmn	r0, #1
   122c8:	beq	12300 <__assert_fail@plt+0xe10>
   122cc:	ldr	r0, [r9, #28]
   122d0:	ldr	r1, [fp, #12]
   122d4:	sub	r0, r0, r1
   122d8:	clz	r0, r0
   122dc:	lsr	r0, r0, #5
   122e0:	b	12304 <__assert_fail@plt+0xe14>
   122e4:	ldr	r5, [fp, #16]
   122e8:	mov	r4, #1
   122ec:	b	12a68 <__assert_fail@plt+0x1578>
   122f0:	ldrb	r0, [r5, #12]
   122f4:	add	r9, sl, #64	; 0x40
   122f8:	cmp	r0, #0
   122fc:	bne	121a0 <__assert_fail@plt+0xcb0>
   12300:	mov	r0, #1
   12304:	ldrh	r1, [sl, #56]	; 0x38
   12308:	cmp	r1, #6
   1230c:	bhi	12328 <__assert_fail@plt+0xe38>
   12310:	mov	r2, #1
   12314:	mov	r3, #86	; 0x56
   12318:	tst	r3, r2, lsl r1
   1231c:	ldrne	r1, [r5, #8]
   12320:	cmpne	r1, #0
   12324:	bne	12378 <__assert_fail@plt+0xe88>
   12328:	str	r4, [sp, #48]	; 0x30
   1232c:	mov	r4, #1
   12330:	cmp	r0, #0
   12334:	beq	1258c <__assert_fail@plt+0x109c>
   12338:	ldr	r0, [sp, #52]	; 0x34
   1233c:	ldr	r6, [r0, #32]
   12340:	ldrb	r0, [r5, #12]
   12344:	cmp	r0, #0
   12348:	beq	1241c <__assert_fail@plt+0xf2c>
   1234c:	ldr	r0, [sp, #44]	; 0x2c
   12350:	cmn	r0, #1
   12354:	beq	127ac <__assert_fail@plt+0x12bc>
   12358:	ldr	r0, [r9, #16]
   1235c:	and	r0, r0, #61440	; 0xf000
   12360:	cmp	r0, #32768	; 0x8000
   12364:	beq	1247c <__assert_fail@plt+0xf8c>
   12368:	cmp	r0, #16384	; 0x4000
   1236c:	bne	127ac <__assert_fail@plt+0x12bc>
   12370:	mov	r5, #18688	; 0x4900
   12374:	b	12480 <__assert_fail@plt+0xf90>
   12378:	ldrd	r2, [r1]
   1237c:	ldr	r6, [r9, #96]	; 0x60
   12380:	ldr	r5, [r9, #100]	; 0x64
   12384:	eor	r3, r5, r3
   12388:	ldr	r5, [fp, #16]
   1238c:	eor	r2, r6, r2
   12390:	orrs	r2, r2, r3
   12394:	bne	12328 <__assert_fail@plt+0xe38>
   12398:	ldrd	r2, [r1, #8]
   1239c:	ldr	r6, [r9]
   123a0:	ldr	r1, [r9, #4]
   123a4:	eor	r1, r1, r3
   123a8:	eor	r2, r6, r2
   123ac:	orrs	r1, r2, r1
   123b0:	bne	12328 <__assert_fail@plt+0xe38>
   123b4:	movw	r7, #42831	; 0xa74f
   123b8:	mov	r0, r4
   123bc:	movt	r7, #1
   123c0:	mov	r1, r7
   123c4:	bl	111fc <strcmp@plt>
   123c8:	cmp	r0, #0
   123cc:	beq	128c8 <__assert_fail@plt+0x13d8>
   123d0:	movw	r1, #40774	; 0x9f46
   123d4:	mov	r0, #0
   123d8:	mov	r2, #5
   123dc:	movt	r1, #1
   123e0:	bl	11274 <dcgettext@plt>
   123e4:	mov	r6, r0
   123e8:	mov	r0, #0
   123ec:	mov	r1, #4
   123f0:	mov	r2, r4
   123f4:	bl	17438 <__assert_fail@plt+0x5f48>
   123f8:	mov	r5, r0
   123fc:	mov	r0, #1
   12400:	mov	r1, #4
   12404:	mov	r2, r7
   12408:	bl	17438 <__assert_fail@plt+0x5f48>
   1240c:	mov	r3, r5
   12410:	ldr	r5, [fp, #16]
   12414:	str	r0, [sp]
   12418:	b	128f0 <__assert_fail@plt+0x1400>
   1241c:	ldr	r2, [sp, #40]	; 0x28
   12420:	ldr	r3, [sp, #32]
   12424:	mov	r0, #256	; 0x100
   12428:	mov	r1, r7
   1242c:	str	r0, [sp]
   12430:	mov	r0, r6
   12434:	bl	1146c <fchownat@plt>
   12438:	cmp	r0, #0
   1243c:	beq	12474 <__assert_fail@plt+0xf84>
   12440:	bl	11394 <__errno_location@plt>
   12444:	ldr	r0, [r0]
   12448:	mov	r6, #0
   1244c:	cmp	r0, #95	; 0x5f
   12450:	bne	127d4 <__assert_fail@plt+0x12e4>
   12454:	mov	r5, #0
   12458:	b	12594 <__assert_fail@plt+0x10a4>
   1245c:	ldr	r0, [sp, #52]	; 0x34
   12460:	mov	r4, #1
   12464:	mov	r1, sl
   12468:	mov	r2, #1
   1246c:	str	r4, [sl, #16]
   12470:	b	12a64 <__assert_fail@plt+0x1574>
   12474:	mov	r5, #0
   12478:	b	12830 <__assert_fail@plt+0x1340>
   1247c:	mov	r5, #2304	; 0x900
   12480:	mov	r0, r6
   12484:	mov	r1, r7
   12488:	mov	r2, r5
   1248c:	bl	1137c <openat64@plt>
   12490:	cmn	r0, #1
   12494:	ble	12760 <__assert_fail@plt+0x1270>
   12498:	sub	r1, fp, #136	; 0x88
   1249c:	str	r0, [sp, #36]	; 0x24
   124a0:	bl	19438 <__assert_fail@plt+0x7f48>
   124a4:	mov	r6, #6
   124a8:	cmp	r0, #0
   124ac:	bne	12538 <__assert_fail@plt+0x1048>
   124b0:	ldr	r0, [sp, #8]
   124b4:	ldrd	r2, [r9, #96]	; 0x60
   124b8:	mov	r6, #4
   124bc:	ldrd	r0, [r0]
   124c0:	eor	r1, r3, r1
   124c4:	eor	r0, r2, r0
   124c8:	orrs	r0, r0, r1
   124cc:	bne	12538 <__assert_fail@plt+0x1048>
   124d0:	ldrd	r0, [r9]
   124d4:	ldr	r2, [fp, #-136]	; 0xffffff78
   124d8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   124dc:	eor	r1, r1, r3
   124e0:	eor	r0, r0, r2
   124e4:	orrs	r0, r0, r1
   124e8:	bne	12538 <__assert_fail@plt+0x1048>
   124ec:	ldr	r1, [fp, #8]
   124f0:	mov	r6, #2
   124f4:	cmn	r1, #1
   124f8:	ldrne	r0, [fp, #-112]	; 0xffffff90
   124fc:	cmpne	r0, r1
   12500:	bne	12538 <__assert_fail@plt+0x1048>
   12504:	ldr	r0, [fp, #12]
   12508:	cmn	r0, #1
   1250c:	ldrne	r0, [fp, #-108]	; 0xffffff94
   12510:	ldrne	r1, [fp, #12]
   12514:	cmpne	r0, r1
   12518:	bne	12538 <__assert_fail@plt+0x1048>
   1251c:	ldr	r0, [sp, #36]	; 0x24
   12520:	ldr	r1, [sp, #40]	; 0x28
   12524:	ldr	r2, [sp, #32]
   12528:	bl	11388 <fchown@plt>
   1252c:	cmp	r0, #0
   12530:	mov	r6, #6
   12534:	beq	11f44 <__assert_fail@plt+0xa54>
   12538:	str	r6, [sp, #28]
   1253c:	bl	11394 <__errno_location@plt>
   12540:	mov	r5, r0
   12544:	ldr	r6, [r0]
   12548:	ldr	r0, [sp, #36]	; 0x24
   1254c:	bl	114b4 <close@plt>
   12550:	ldr	r0, [sp, #28]
   12554:	str	r6, [r5]
   12558:	sub	r0, r0, #2
   1255c:	cmp	r0, #4
   12560:	bhi	12b18 <__assert_fail@plt+0x1628>
   12564:	add	r1, pc, #8
   12568:	mov	r5, #0
   1256c:	mov	r6, #1
   12570:	ldr	pc, [r1, r0, lsl #2]
   12574:	muleq	r1, r4, r5
   12578:	andeq	r2, r1, r8, lsl #11
   1257c:	andeq	r2, r1, r8, lsl #11
   12580:	andeq	r2, r1, ip, lsr #15
   12584:	ldrdeq	r2, [r1], -r4
   12588:	mov	r4, #0
   1258c:	mov	r6, #1
   12590:	mov	r5, #1
   12594:	ldr	r0, [fp, #16]
   12598:	ldr	r1, [r0]
   1259c:	cmp	r1, #2
   125a0:	beq	12a48 <__assert_fail@plt+0x1558>
   125a4:	eor	r0, r4, #1
   125a8:	orrs	r0, r5, r0
   125ac:	eorseq	r0, r6, #1
   125b0:	beq	125e4 <__assert_fail@plt+0x10f4>
   125b4:	cmp	r1, #0
   125b8:	bne	12a48 <__assert_fail@plt+0x1558>
   125bc:	cmp	r6, #0
   125c0:	mov	r5, #1
   125c4:	mov	r0, #3
   125c8:	movwne	r5, #4
   125cc:	cmp	r4, #0
   125d0:	moveq	r5, r0
   125d4:	cmp	r9, #0
   125d8:	beq	12650 <__assert_fail@plt+0x1160>
   125dc:	ldr	r0, [r9, #24]
   125e0:	b	12638 <__assert_fail@plt+0x1148>
   125e4:	ldr	r0, [sp, #40]	; 0x28
   125e8:	cmn	r0, #1
   125ec:	beq	12600 <__assert_fail@plt+0x1110>
   125f0:	ldr	r0, [r9, #24]
   125f4:	ldr	r2, [sp, #40]	; 0x28
   125f8:	cmp	r0, r2
   125fc:	bne	12620 <__assert_fail@plt+0x1130>
   12600:	ldr	r0, [sp, #32]
   12604:	cmn	r0, #1
   12608:	beq	125b4 <__assert_fail@plt+0x10c4>
   1260c:	ldr	r0, [r9, #28]
   12610:	ldr	r2, [sp, #32]
   12614:	cmp	r0, r2
   12618:	beq	125b4 <__assert_fail@plt+0x10c4>
   1261c:	ldr	r0, [r9, #24]
   12620:	cmp	r6, #0
   12624:	mov	r5, #1
   12628:	mov	r1, #3
   1262c:	movwne	r5, #2
   12630:	cmp	r4, #0
   12634:	moveq	r5, r1
   12638:	bl	11e54 <__assert_fail@plt+0x964>
   1263c:	mov	r6, r0
   12640:	ldr	r0, [r9, #28]
   12644:	bl	11e14 <__assert_fail@plt+0x924>
   12648:	mov	r7, r0
   1264c:	b	12658 <__assert_fail@plt+0x1168>
   12650:	mov	r6, #0
   12654:	mov	r7, #0
   12658:	cmp	r5, #1
   1265c:	str	r4, [sp, #36]	; 0x24
   12660:	bne	126a0 <__assert_fail@plt+0x11b0>
   12664:	movw	r1, #41177	; 0xa0d9
   12668:	mov	r0, #0
   1266c:	mov	r2, #5
   12670:	movt	r1, #1
   12674:	bl	11274 <dcgettext@plt>
   12678:	ldr	r1, [sp, #48]	; 0x30
   1267c:	mov	r4, r0
   12680:	mov	r0, #4
   12684:	bl	174e0 <__assert_fail@plt+0x5ff0>
   12688:	mov	r2, r0
   1268c:	mov	r0, #1
   12690:	mov	r1, r4
   12694:	bl	113b8 <__printf_chk@plt>
   12698:	ldr	r4, [sp, #36]	; 0x24
   1269c:	b	12a38 <__assert_fail@plt+0x1548>
   126a0:	ldr	r0, [fp, #16]
   126a4:	ldr	r9, [r0, #20]
   126a8:	ldr	r4, [r0, #16]
   126ac:	mov	r0, r4
   126b0:	mov	r1, r9
   126b4:	bl	12b1c <__assert_fail@plt+0x162c>
   126b8:	str	r0, [sp, #16]
   126bc:	cmp	r4, #0
   126c0:	mov	r0, r4
   126c4:	mov	r1, r9
   126c8:	str	r6, [sp, #24]
   126cc:	str	r7, [sp, #20]
   126d0:	movne	r0, r6
   126d4:	cmp	r9, #0
   126d8:	movne	r1, r7
   126dc:	bl	12b1c <__assert_fail@plt+0x162c>
   126e0:	cmp	r5, #4
   126e4:	beq	12738 <__assert_fail@plt+0x1248>
   126e8:	cmp	r5, #3
   126ec:	beq	12714 <__assert_fail@plt+0x1224>
   126f0:	cmp	r5, #2
   126f4:	bne	12b18 <__assert_fail@plt+0x1628>
   126f8:	cmp	r4, #0
   126fc:	str	r0, [sp, #28]
   12700:	beq	12838 <__assert_fail@plt+0x1348>
   12704:	movw	r1, #41233	; 0xa111
   12708:	mov	r0, #0
   1270c:	movt	r1, #1
   12710:	b	12750 <__assert_fail@plt+0x1260>
   12714:	cmp	r0, #0
   12718:	beq	12854 <__assert_fail@plt+0x1364>
   1271c:	cmp	r4, #0
   12720:	str	r0, [sp, #28]
   12724:	beq	1292c <__assert_fail@plt+0x143c>
   12728:	movw	r1, #41337	; 0xa179
   1272c:	mov	r0, #0
   12730:	movt	r1, #1
   12734:	b	12750 <__assert_fail@plt+0x1260>
   12738:	cmp	r4, #0
   1273c:	str	r0, [sp, #28]
   12740:	beq	128ac <__assert_fail@plt+0x13bc>
   12744:	movw	r1, #41539	; 0xa243
   12748:	mov	r0, #0
   1274c:	movt	r1, #1
   12750:	mov	r2, #5
   12754:	bl	11274 <dcgettext@plt>
   12758:	ldr	r4, [sp, #36]	; 0x24
   1275c:	b	129f0 <__assert_fail@plt+0x1500>
   12760:	bl	11394 <__errno_location@plt>
   12764:	ldr	r1, [r0]
   12768:	cmp	r1, #13
   1276c:	bne	127d4 <__assert_fail@plt+0x12e4>
   12770:	ldr	r1, [r9, #16]
   12774:	and	r1, r1, #61440	; 0xf000
   12778:	cmp	r1, #32768	; 0x8000
   1277c:	bne	127ac <__assert_fail@plt+0x12bc>
   12780:	str	r0, [sp, #36]	; 0x24
   12784:	orr	r2, r5, #1
   12788:	mov	r0, r6
   1278c:	mov	r1, r7
   12790:	bl	1137c <openat64@plt>
   12794:	cmn	r0, #1
   12798:	bgt	12498 <__assert_fail@plt+0xfa8>
   1279c:	ldr	r0, [sp, #36]	; 0x24
   127a0:	ldr	r0, [r0]
   127a4:	cmp	r0, #13
   127a8:	bne	127d4 <__assert_fail@plt+0x12e4>
   127ac:	ldr	r0, [sp, #52]	; 0x34
   127b0:	ldr	r2, [sp, #40]	; 0x28
   127b4:	ldr	r3, [sp, #32]
   127b8:	mov	r5, #0
   127bc:	mov	r1, r7
   127c0:	str	r5, [sp]
   127c4:	ldr	r0, [r0, #32]
   127c8:	bl	1146c <fchownat@plt>
   127cc:	cmp	r0, #0
   127d0:	beq	12830 <__assert_fail@plt+0x1340>
   127d4:	ldr	r0, [fp, #16]
   127d8:	mov	r5, #0
   127dc:	ldrb	r0, [r0, #13]
   127e0:	cmp	r0, #0
   127e4:	bne	12828 <__assert_fail@plt+0x1338>
   127e8:	bl	11394 <__errno_location@plt>
   127ec:	ldr	r1, [sp, #12]
   127f0:	ldr	r4, [r0]
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	mov	r5, #0
   12800:	bl	11274 <dcgettext@plt>
   12804:	ldr	r1, [sp, #48]	; 0x30
   12808:	mov	r6, r0
   1280c:	mov	r0, #4
   12810:	bl	174e0 <__assert_fail@plt+0x5ff0>
   12814:	mov	r3, r0
   12818:	mov	r0, #0
   1281c:	mov	r1, r4
   12820:	mov	r2, r6
   12824:	bl	112f8 <error@plt>
   12828:	mov	r6, #1
   1282c:	b	122b8 <__assert_fail@plt+0xdc8>
   12830:	mov	r6, #1
   12834:	b	12594 <__assert_fail@plt+0x10a4>
   12838:	ldr	r4, [sp, #36]	; 0x24
   1283c:	cmp	r9, #0
   12840:	mov	r0, #0
   12844:	beq	129c8 <__assert_fail@plt+0x14d8>
   12848:	movw	r1, #41272	; 0xa138
   1284c:	movt	r1, #1
   12850:	b	129e8 <__assert_fail@plt+0x14f8>
   12854:	movw	r1, #41429	; 0xa1d5
   12858:	movw	r0, #41503	; 0xa21f
   1285c:	cmp	r9, #0
   12860:	mov	r2, #5
   12864:	movt	r1, #1
   12868:	movt	r0, #1
   1286c:	movne	r1, r0
   12870:	movw	r0, #41463	; 0xa1f7
   12874:	cmp	r4, #0
   12878:	movt	r0, #1
   1287c:	movne	r1, r0
   12880:	mov	r0, #0
   12884:	bl	11274 <dcgettext@plt>
   12888:	mov	r6, r0
   1288c:	mov	r0, #0
   12890:	bl	12cb0 <__assert_fail@plt+0x17c0>
   12894:	ldr	r0, [sp, #16]
   12898:	ldr	r4, [sp, #36]	; 0x24
   1289c:	ldr	r7, [sp, #20]
   128a0:	mov	r5, #0
   128a4:	str	r0, [sp, #28]
   128a8:	b	129fc <__assert_fail@plt+0x150c>
   128ac:	ldr	r4, [sp, #36]	; 0x24
   128b0:	cmp	r9, #0
   128b4:	mov	r0, #0
   128b8:	beq	129d4 <__assert_fail@plt+0x14e4>
   128bc:	movw	r1, #41571	; 0xa263
   128c0:	movt	r1, #1
   128c4:	b	129e8 <__assert_fail@plt+0x14f8>
   128c8:	movw	r1, #40729	; 0x9f19
   128cc:	mov	r0, #0
   128d0:	mov	r2, #5
   128d4:	movt	r1, #1
   128d8:	bl	11274 <dcgettext@plt>
   128dc:	mov	r6, r0
   128e0:	mov	r0, #4
   128e4:	mov	r1, r4
   128e8:	bl	174e0 <__assert_fail@plt+0x5ff0>
   128ec:	mov	r3, r0
   128f0:	mov	r0, #0
   128f4:	mov	r1, #0
   128f8:	mov	r2, r6
   128fc:	bl	112f8 <error@plt>
   12900:	movw	r1, #40832	; 0x9f80
   12904:	mov	r0, #0
   12908:	mov	r2, #5
   1290c:	mov	r4, #0
   12910:	movt	r1, #1
   12914:	bl	11274 <dcgettext@plt>
   12918:	mov	r2, r0
   1291c:	mov	r0, #0
   12920:	mov	r1, #0
   12924:	bl	112f8 <error@plt>
   12928:	b	12a68 <__assert_fail@plt+0x1578>
   1292c:	ldr	r4, [sp, #36]	; 0x24
   12930:	cmp	r9, #0
   12934:	mov	r0, #0
   12938:	beq	129e0 <__assert_fail@plt+0x14f0>
   1293c:	movw	r1, #41385	; 0xa1a9
   12940:	movt	r1, #1
   12944:	b	129e8 <__assert_fail@plt+0x14f8>
   12948:	movw	r1, #40729	; 0x9f19
   1294c:	mov	r0, #0
   12950:	mov	r2, #5
   12954:	movt	r1, #1
   12958:	bl	11274 <dcgettext@plt>
   1295c:	mov	r6, r0
   12960:	mov	r0, #4
   12964:	mov	r1, r4
   12968:	bl	174e0 <__assert_fail@plt+0x5ff0>
   1296c:	mov	r3, r0
   12970:	mov	r0, #0
   12974:	mov	r1, #0
   12978:	mov	r2, r6
   1297c:	bl	112f8 <error@plt>
   12980:	movw	r1, #40832	; 0x9f80
   12984:	mov	r0, #0
   12988:	mov	r2, #5
   1298c:	movt	r1, #1
   12990:	bl	11274 <dcgettext@plt>
   12994:	mov	r2, r0
   12998:	mov	r0, #0
   1299c:	mov	r1, #0
   129a0:	bl	112f8 <error@plt>
   129a4:	ldr	r4, [sp, #52]	; 0x34
   129a8:	mov	r1, sl
   129ac:	mov	r2, #4
   129b0:	mov	r0, r4
   129b4:	bl	14954 <__assert_fail@plt+0x3464>
   129b8:	mov	r0, r4
   129bc:	mov	r4, #0
   129c0:	bl	13590 <__assert_fail@plt+0x20a0>
   129c4:	b	12a68 <__assert_fail@plt+0x1578>
   129c8:	movw	r1, #41307	; 0xa15b
   129cc:	movt	r1, #1
   129d0:	b	129e8 <__assert_fail@plt+0x14f8>
   129d4:	movw	r1, #41599	; 0xa27f
   129d8:	movt	r1, #1
   129dc:	b	129e8 <__assert_fail@plt+0x14f8>
   129e0:	movw	r1, #41429	; 0xa1d5
   129e4:	movt	r1, #1
   129e8:	mov	r2, #5
   129ec:	bl	11274 <dcgettext@plt>
   129f0:	mov	r6, r0
   129f4:	ldr	r7, [sp, #20]
   129f8:	ldr	r5, [sp, #16]
   129fc:	ldr	r1, [sp, #48]	; 0x30
   12a00:	mov	r0, #4
   12a04:	bl	174e0 <__assert_fail@plt+0x5ff0>
   12a08:	mov	r1, r6
   12a0c:	ldr	r6, [sp, #28]
   12a10:	mov	r2, r0
   12a14:	mov	r0, #1
   12a18:	str	r5, [sp]
   12a1c:	mov	r3, r6
   12a20:	bl	113b8 <__printf_chk@plt>
   12a24:	mov	r0, r6
   12a28:	bl	12cb0 <__assert_fail@plt+0x17c0>
   12a2c:	mov	r0, r5
   12a30:	bl	12cb0 <__assert_fail@plt+0x17c0>
   12a34:	ldr	r6, [sp, #24]
   12a38:	mov	r0, r6
   12a3c:	bl	12cb0 <__assert_fail@plt+0x17c0>
   12a40:	mov	r0, r7
   12a44:	bl	12cb0 <__assert_fail@plt+0x17c0>
   12a48:	ldr	r5, [fp, #16]
   12a4c:	ldrb	r0, [r5, #4]
   12a50:	cmp	r0, #0
   12a54:	bne	12a68 <__assert_fail@plt+0x1578>
   12a58:	ldr	r0, [sp, #52]	; 0x34
   12a5c:	mov	r1, sl
   12a60:	mov	r2, #4
   12a64:	bl	14954 <__assert_fail@plt+0x3464>
   12a68:	ldr	r0, [sp, #52]	; 0x34
   12a6c:	and	r8, r8, r4
   12a70:	bl	13590 <__assert_fail@plt+0x20a0>
   12a74:	mov	sl, r0
   12a78:	cmp	r0, #0
   12a7c:	bne	11f5c <__assert_fail@plt+0xa6c>
   12a80:	bl	11394 <__errno_location@plt>
   12a84:	ldr	r4, [r0]
   12a88:	mov	r5, r0
   12a8c:	cmp	r4, #0
   12a90:	beq	12ad0 <__assert_fail@plt+0x15e0>
   12a94:	ldr	r0, [fp, #16]
   12a98:	mov	r8, #0
   12a9c:	ldrb	r0, [r0, #13]
   12aa0:	cmp	r0, #0
   12aa4:	bne	12ad0 <__assert_fail@plt+0x15e0>
   12aa8:	movw	r1, #40696	; 0x9ef8
   12aac:	mov	r0, #0
   12ab0:	mov	r2, #5
   12ab4:	mov	r8, #0
   12ab8:	movt	r1, #1
   12abc:	bl	11274 <dcgettext@plt>
   12ac0:	mov	r2, r0
   12ac4:	mov	r0, #0
   12ac8:	mov	r1, r4
   12acc:	bl	112f8 <error@plt>
   12ad0:	ldr	r0, [sp, #52]	; 0x34
   12ad4:	bl	13410 <__assert_fail@plt+0x1f20>
   12ad8:	cmp	r0, #0
   12adc:	beq	12b0c <__assert_fail@plt+0x161c>
   12ae0:	ldr	r4, [r5]
   12ae4:	movw	r1, #40712	; 0x9f08
   12ae8:	mov	r0, #0
   12aec:	mov	r2, #5
   12af0:	mov	r8, #0
   12af4:	movt	r1, #1
   12af8:	bl	11274 <dcgettext@plt>
   12afc:	mov	r2, r0
   12b00:	mov	r0, #0
   12b04:	mov	r1, r4
   12b08:	bl	112f8 <error@plt>
   12b0c:	mov	r0, r8
   12b10:	sub	sp, fp, #28
   12b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b18:	bl	114a8 <abort@plt>
   12b1c:	push	{r4, r5, r6, sl, fp, lr}
   12b20:	add	fp, sp, #16
   12b24:	mov	r4, r1
   12b28:	cmp	r0, #0
   12b2c:	beq	12b7c <__assert_fail@plt+0x168c>
   12b30:	mov	r5, r0
   12b34:	cmp	r4, #0
   12b38:	beq	12b8c <__assert_fail@plt+0x169c>
   12b3c:	mov	r0, r5
   12b40:	bl	11364 <strlen@plt>
   12b44:	mov	r6, r0
   12b48:	mov	r0, r4
   12b4c:	bl	11364 <strlen@plt>
   12b50:	add	r0, r6, r0
   12b54:	add	r0, r0, #2
   12b58:	bl	17e9c <__assert_fail@plt+0x69ac>
   12b5c:	mov	r1, r5
   12b60:	mov	r6, r0
   12b64:	bl	11268 <stpcpy@plt>
   12b68:	mov	r1, #58	; 0x3a
   12b6c:	strh	r1, [r0], #1
   12b70:	mov	r1, r4
   12b74:	bl	11268 <stpcpy@plt>
   12b78:	b	12ba0 <__assert_fail@plt+0x16b0>
   12b7c:	cmp	r4, #0
   12b80:	beq	12b9c <__assert_fail@plt+0x16ac>
   12b84:	mov	r0, r4
   12b88:	b	12b90 <__assert_fail@plt+0x16a0>
   12b8c:	mov	r0, r5
   12b90:	bl	182ac <__assert_fail@plt+0x6dbc>
   12b94:	mov	r6, r0
   12b98:	b	12ba0 <__assert_fail@plt+0x16b0>
   12b9c:	mov	r6, #0
   12ba0:	mov	r0, r6
   12ba4:	pop	{r4, r5, r6, sl, fp, pc}
   12ba8:	movw	r1, #45488	; 0xb1b0
   12bac:	movt	r1, #2
   12bb0:	str	r0, [r1]
   12bb4:	bx	lr
   12bb8:	movw	r1, #45492	; 0xb1b4
   12bbc:	movt	r1, #2
   12bc0:	strb	r0, [r1]
   12bc4:	bx	lr
   12bc8:	push	{r4, r5, r6, sl, fp, lr}
   12bcc:	add	fp, sp, #16
   12bd0:	sub	sp, sp, #8
   12bd4:	movw	r0, #45452	; 0xb18c
   12bd8:	movt	r0, #2
   12bdc:	ldr	r0, [r0]
   12be0:	bl	18b38 <__assert_fail@plt+0x7648>
   12be4:	cmp	r0, #0
   12be8:	beq	12c10 <__assert_fail@plt+0x1720>
   12bec:	movw	r0, #45492	; 0xb1b4
   12bf0:	movt	r0, #2
   12bf4:	ldrb	r0, [r0]
   12bf8:	cmp	r0, #0
   12bfc:	beq	12c30 <__assert_fail@plt+0x1740>
   12c00:	bl	11394 <__errno_location@plt>
   12c04:	ldr	r0, [r0]
   12c08:	cmp	r0, #32
   12c0c:	bne	12c30 <__assert_fail@plt+0x1740>
   12c10:	movw	r0, #45448	; 0xb188
   12c14:	movt	r0, #2
   12c18:	ldr	r0, [r0]
   12c1c:	bl	18b38 <__assert_fail@plt+0x7648>
   12c20:	cmp	r0, #0
   12c24:	subeq	sp, fp, #16
   12c28:	popeq	{r4, r5, r6, sl, fp, pc}
   12c2c:	b	12ca0 <__assert_fail@plt+0x17b0>
   12c30:	movw	r1, #41640	; 0xa2a8
   12c34:	mov	r0, #0
   12c38:	mov	r2, #5
   12c3c:	movt	r1, #1
   12c40:	bl	11274 <dcgettext@plt>
   12c44:	mov	r4, r0
   12c48:	movw	r0, #45488	; 0xb1b0
   12c4c:	movt	r0, #2
   12c50:	ldr	r6, [r0]
   12c54:	bl	11394 <__errno_location@plt>
   12c58:	ldr	r5, [r0]
   12c5c:	cmp	r6, #0
   12c60:	bne	12c7c <__assert_fail@plt+0x178c>
   12c64:	movw	r2, #40427	; 0x9deb
   12c68:	mov	r0, #0
   12c6c:	mov	r1, r5
   12c70:	mov	r3, r4
   12c74:	movt	r2, #1
   12c78:	b	12c9c <__assert_fail@plt+0x17ac>
   12c7c:	mov	r0, r6
   12c80:	bl	175d8 <__assert_fail@plt+0x60e8>
   12c84:	movw	r2, #41652	; 0xa2b4
   12c88:	mov	r3, r0
   12c8c:	str	r4, [sp]
   12c90:	mov	r0, #0
   12c94:	mov	r1, r5
   12c98:	movt	r2, #1
   12c9c:	bl	112f8 <error@plt>
   12ca0:	movw	r0, #45364	; 0xb134
   12ca4:	movt	r0, #2
   12ca8:	ldr	r0, [r0]
   12cac:	bl	11238 <_exit@plt>
   12cb0:	push	{r4, r5, r6, sl, fp, lr}
   12cb4:	add	fp, sp, #16
   12cb8:	mov	r4, r0
   12cbc:	bl	11394 <__errno_location@plt>
   12cc0:	ldr	r6, [r0]
   12cc4:	mov	r5, r0
   12cc8:	mov	r0, r4
   12ccc:	bl	1122c <free@plt>
   12cd0:	str	r6, [r5]
   12cd4:	pop	{r4, r5, r6, sl, fp, pc}
   12cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cdc:	add	fp, sp, #28
   12ce0:	sub	sp, sp, #12
   12ce4:	cmp	r1, #4096	; 0x1000
   12ce8:	bcs	12d04 <__assert_fail@plt+0x1814>
   12cec:	mov	r6, r0
   12cf0:	and	r0, r1, #516	; 0x204
   12cf4:	mov	r5, r1
   12cf8:	cmp	r0, #516	; 0x204
   12cfc:	tstne	r5, #18
   12d00:	bne	12d20 <__assert_fail@plt+0x1830>
   12d04:	bl	11394 <__errno_location@plt>
   12d08:	mov	r1, #22
   12d0c:	str	r1, [r0]
   12d10:	mov	r8, #0
   12d14:	mov	r0, r8
   12d18:	sub	sp, fp, #28
   12d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d20:	mov	r0, #1
   12d24:	mov	r1, #96	; 0x60
   12d28:	mov	r9, r2
   12d2c:	bl	18a64 <__assert_fail@plt+0x7574>
   12d30:	cmp	r0, #0
   12d34:	beq	12d10 <__assert_fail@plt+0x1820>
   12d38:	mov	r8, r0
   12d3c:	mvn	r0, #99	; 0x63
   12d40:	tst	r5, #2
   12d44:	mov	r1, r5
   12d48:	str	r0, [r8, #32]
   12d4c:	bic	r0, r5, #516	; 0x204
   12d50:	str	r9, [r8, #44]	; 0x2c
   12d54:	orrne	r1, r0, #4
   12d58:	str	r1, [r8, #48]	; 0x30
   12d5c:	ldr	r0, [r6]
   12d60:	cmp	r0, #0
   12d64:	beq	12d98 <__assert_fail@plt+0x18a8>
   12d68:	add	r4, r6, #4
   12d6c:	mov	r7, #0
   12d70:	bl	11364 <strlen@plt>
   12d74:	cmp	r0, r7
   12d78:	movhi	r7, r0
   12d7c:	ldr	r0, [r4], #4
   12d80:	cmp	r0, #0
   12d84:	bne	12d70 <__assert_fail@plt+0x1880>
   12d88:	add	r1, r7, #1
   12d8c:	cmp	r1, #4096	; 0x1000
   12d90:	movls	r1, #4096	; 0x1000
   12d94:	b	12d9c <__assert_fail@plt+0x18ac>
   12d98:	mov	r1, #4096	; 0x1000
   12d9c:	mov	r0, r8
   12da0:	bl	12ff4 <__assert_fail@plt+0x1b04>
   12da4:	cmp	r0, #0
   12da8:	beq	12fe8 <__assert_fail@plt+0x1af8>
   12dac:	ldr	r0, [r6]
   12db0:	cmp	r0, #0
   12db4:	beq	12de4 <__assert_fail@plt+0x18f4>
   12db8:	movw	r1, #39588	; 0x9aa4
   12dbc:	mov	r0, r8
   12dc0:	mov	r2, #0
   12dc4:	movt	r1, #1
   12dc8:	bl	13068 <__assert_fail@plt+0x1b78>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12fe0 <__assert_fail@plt+0x1af0>
   12dd4:	mov	r4, r0
   12dd8:	mvn	r0, #0
   12ddc:	str	r0, [r4, #48]	; 0x30
   12de0:	b	12de8 <__assert_fail@plt+0x18f8>
   12de4:	mov	r4, #0
   12de8:	cmp	r9, #0
   12dec:	ldrbne	r0, [r8, #49]	; 0x31
   12df0:	ubfxne	r0, r0, #2, #1
   12df4:	ldr	r7, [r6]
   12df8:	moveq	r0, #1
   12dfc:	cmp	r7, #0
   12e00:	beq	12f20 <__assert_fail@plt+0x1a30>
   12e04:	eor	r0, r0, #1
   12e08:	and	r1, r5, #2048	; 0x800
   12e0c:	mov	sl, #0
   12e10:	mov	r5, #0
   12e14:	str	r0, [sp, #4]
   12e18:	mov	r0, #0
   12e1c:	str	r1, [sp, #8]
   12e20:	str	r0, [sp]
   12e24:	mov	r0, r7
   12e28:	bl	11364 <strlen@plt>
   12e2c:	mov	r2, r0
   12e30:	ldr	r0, [sp, #8]
   12e34:	cmp	r0, #0
   12e38:	bne	12e70 <__assert_fail@plt+0x1980>
   12e3c:	cmp	r2, #3
   12e40:	bcc	12e70 <__assert_fail@plt+0x1980>
   12e44:	add	r0, r7, r2
   12e48:	ldrb	r0, [r0, #-1]
   12e4c:	cmp	r0, #47	; 0x2f
   12e50:	bne	12e70 <__assert_fail@plt+0x1980>
   12e54:	sub	r0, r7, #2
   12e58:	ldrb	r1, [r0, r2]
   12e5c:	cmp	r1, #47	; 0x2f
   12e60:	bne	12e70 <__assert_fail@plt+0x1980>
   12e64:	sub	r2, r2, #1
   12e68:	cmp	r2, #1
   12e6c:	bhi	12e58 <__assert_fail@plt+0x1968>
   12e70:	mov	r0, r8
   12e74:	mov	r1, r7
   12e78:	bl	13068 <__assert_fail@plt+0x1b78>
   12e7c:	cmp	r0, #0
   12e80:	beq	12fd0 <__assert_fail@plt+0x1ae0>
   12e84:	mov	r1, #0
   12e88:	ldr	r2, [sp, #4]
   12e8c:	str	r4, [r0, #4]
   12e90:	mov	r7, r0
   12e94:	str	r1, [r0, #48]	; 0x30
   12e98:	add	r0, r0, #168	; 0xa8
   12e9c:	str	r0, [r7, #24]
   12ea0:	clz	r0, sl
   12ea4:	lsr	r0, r0, #5
   12ea8:	orrs	r0, r2, r0
   12eac:	bne	12ec0 <__assert_fail@plt+0x19d0>
   12eb0:	mov	r0, #2
   12eb4:	strd	r0, [r7, #112]	; 0x70
   12eb8:	mov	r0, #11
   12ebc:	b	12ed4 <__assert_fail@plt+0x19e4>
   12ec0:	mov	r0, r8
   12ec4:	mov	r1, r7
   12ec8:	mov	r2, #0
   12ecc:	bl	130e8 <__assert_fail@plt+0x1bf8>
   12ed0:	mov	r1, #0
   12ed4:	cmp	r9, #0
   12ed8:	strh	r0, [r7, #56]	; 0x38
   12edc:	beq	12eec <__assert_fail@plt+0x19fc>
   12ee0:	str	sl, [r7, #8]
   12ee4:	mov	sl, r7
   12ee8:	b	12f04 <__assert_fail@plt+0x1a14>
   12eec:	cmp	sl, #0
   12ef0:	str	r1, [r7, #8]
   12ef4:	beq	12f18 <__assert_fail@plt+0x1a28>
   12ef8:	ldr	r0, [sp]
   12efc:	str	r7, [sp]
   12f00:	str	r7, [r0, #8]
   12f04:	ldr	r7, [r6, #4]!
   12f08:	add	r5, r5, #1
   12f0c:	cmp	r7, #0
   12f10:	bne	12e24 <__assert_fail@plt+0x1934>
   12f14:	b	12f28 <__assert_fail@plt+0x1a38>
   12f18:	str	r7, [sp]
   12f1c:	b	12ee4 <__assert_fail@plt+0x19f4>
   12f20:	mov	sl, #0
   12f24:	b	12f4c <__assert_fail@plt+0x1a5c>
   12f28:	cmp	r9, #0
   12f2c:	beq	12f4c <__assert_fail@plt+0x1a5c>
   12f30:	cmp	r5, #2
   12f34:	bcc	12f4c <__assert_fail@plt+0x1a5c>
   12f38:	mov	r0, r8
   12f3c:	mov	r1, sl
   12f40:	mov	r2, r5
   12f44:	bl	1321c <__assert_fail@plt+0x1d2c>
   12f48:	mov	sl, r0
   12f4c:	movw	r1, #39588	; 0x9aa4
   12f50:	mov	r0, r8
   12f54:	mov	r2, #0
   12f58:	movt	r1, #1
   12f5c:	bl	13068 <__assert_fail@plt+0x1b78>
   12f60:	cmp	r0, #0
   12f64:	str	r0, [r8]
   12f68:	beq	12fd0 <__assert_fail@plt+0x1ae0>
   12f6c:	mov	r1, #9
   12f70:	strh	r1, [r0, #56]	; 0x38
   12f74:	mov	r1, #1
   12f78:	str	sl, [r0, #8]
   12f7c:	str	r1, [r0, #48]	; 0x30
   12f80:	mov	r0, r8
   12f84:	bl	13314 <__assert_fail@plt+0x1e24>
   12f88:	cmp	r0, #0
   12f8c:	beq	12fd0 <__assert_fail@plt+0x1ae0>
   12f90:	ldrh	r0, [r8, #48]	; 0x30
   12f94:	tst	r0, #516	; 0x204
   12f98:	bne	12fc0 <__assert_fail@plt+0x1ad0>
   12f9c:	movw	r1, #41660	; 0xa2bc
   12fa0:	mov	r0, r8
   12fa4:	movt	r1, #1
   12fa8:	bl	133a0 <__assert_fail@plt+0x1eb0>
   12fac:	str	r0, [r8, #28]
   12fb0:	cmn	r0, #1
   12fb4:	ldrle	r0, [r8, #48]	; 0x30
   12fb8:	orrle	r0, r0, #4
   12fbc:	strle	r0, [r8, #48]	; 0x30
   12fc0:	add	r0, r8, #60	; 0x3c
   12fc4:	mvn	r1, #0
   12fc8:	bl	15c38 <__assert_fail@plt+0x4748>
   12fcc:	b	12d14 <__assert_fail@plt+0x1824>
   12fd0:	mov	r0, sl
   12fd4:	bl	133d0 <__assert_fail@plt+0x1ee0>
   12fd8:	mov	r0, r4
   12fdc:	bl	12cb0 <__assert_fail@plt+0x17c0>
   12fe0:	ldr	r0, [r8, #24]
   12fe4:	bl	12cb0 <__assert_fail@plt+0x17c0>
   12fe8:	mov	r0, r8
   12fec:	bl	12cb0 <__assert_fail@plt+0x17c0>
   12ff0:	b	12d10 <__assert_fail@plt+0x1820>
   12ff4:	push	{r4, r5, fp, lr}
   12ff8:	add	fp, sp, #8
   12ffc:	mov	r4, r0
   13000:	ldr	r0, [r0, #36]	; 0x24
   13004:	add	r1, r1, #256	; 0x100
   13008:	adds	r1, r1, r0
   1300c:	bcc	13030 <__assert_fail@plt+0x1b40>
   13010:	ldr	r0, [r4, #24]
   13014:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13018:	mov	r5, #0
   1301c:	str	r5, [r4, #24]
   13020:	bl	11394 <__errno_location@plt>
   13024:	mov	r1, #36	; 0x24
   13028:	str	r1, [r0]
   1302c:	b	13060 <__assert_fail@plt+0x1b70>
   13030:	str	r1, [r4, #36]	; 0x24
   13034:	ldr	r0, [r4, #24]
   13038:	bl	18ae8 <__assert_fail@plt+0x75f8>
   1303c:	cmp	r0, #0
   13040:	beq	13050 <__assert_fail@plt+0x1b60>
   13044:	mov	r5, #1
   13048:	str	r0, [r4, #24]
   1304c:	b	13060 <__assert_fail@plt+0x1b70>
   13050:	ldr	r0, [r4, #24]
   13054:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13058:	mov	r5, #0
   1305c:	str	r5, [r4, #24]
   13060:	mov	r0, r5
   13064:	pop	{r4, r5, fp, pc}
   13068:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1306c:	add	fp, sp, #24
   13070:	mov	r5, r0
   13074:	add	r0, r2, #176	; 0xb0
   13078:	mov	r6, r2
   1307c:	mov	r8, r1
   13080:	bic	r0, r0, #7
   13084:	bl	18ab8 <__assert_fail@plt+0x75c8>
   13088:	cmp	r0, #0
   1308c:	beq	130dc <__assert_fail@plt+0x1bec>
   13090:	add	r7, r0, #168	; 0xa8
   13094:	mov	r4, r0
   13098:	mov	r1, r8
   1309c:	mov	r2, r6
   130a0:	mov	r0, r7
   130a4:	bl	11244 <memcpy@plt>
   130a8:	mov	r0, #0
   130ac:	mov	r2, #196608	; 0x30000
   130b0:	strb	r0, [r7, r6]
   130b4:	str	r6, [r4, #52]	; 0x34
   130b8:	str	r5, [r4, #44]	; 0x2c
   130bc:	ldr	r1, [r5, #24]
   130c0:	str	r2, [r4, #58]	; 0x3a
   130c4:	str	r0, [r4, #12]
   130c8:	str	r0, [r4, #16]
   130cc:	str	r0, [r4, #20]
   130d0:	str	r1, [r4, #28]
   130d4:	str	r0, [r4, #32]
   130d8:	b	130e0 <__assert_fail@plt+0x1bf0>
   130dc:	mov	r4, #0
   130e0:	mov	r0, r4
   130e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130e8:	push	{r4, r5, r6, sl, fp, lr}
   130ec:	add	fp, sp, #16
   130f0:	mov	r4, r1
   130f4:	ldr	r1, [r0, #48]	; 0x30
   130f8:	ldr	r3, [r4, #48]	; 0x30
   130fc:	add	r5, r4, #64	; 0x40
   13100:	cmp	r3, #0
   13104:	andeq	r3, r1, #1
   13108:	orreq	r2, r3, r2
   1310c:	cmp	r2, #0
   13110:	andseq	r1, r1, #2
   13114:	beq	13164 <__assert_fail@plt+0x1c74>
   13118:	ldr	r0, [r4, #24]
   1311c:	mov	r1, r5
   13120:	bl	19428 <__assert_fail@plt+0x7f38>
   13124:	cmp	r0, #0
   13128:	beq	131a8 <__assert_fail@plt+0x1cb8>
   1312c:	bl	11394 <__errno_location@plt>
   13130:	mov	r6, r0
   13134:	ldr	r0, [r0]
   13138:	cmp	r0, #2
   1313c:	bne	1318c <__assert_fail@plt+0x1c9c>
   13140:	ldr	r0, [r4, #24]
   13144:	mov	r1, r5
   13148:	bl	19448 <__assert_fail@plt+0x7f58>
   1314c:	cmp	r0, #0
   13150:	bne	13188 <__assert_fail@plt+0x1c98>
   13154:	mov	r0, #0
   13158:	str	r0, [r6]
   1315c:	mov	r0, #13
   13160:	pop	{r4, r5, r6, sl, fp, pc}
   13164:	ldr	r1, [r4, #24]
   13168:	ldr	r0, [r0, #32]
   1316c:	mov	r2, r5
   13170:	mov	r3, #256	; 0x100
   13174:	bl	19458 <__assert_fail@plt+0x7f68>
   13178:	cmp	r0, #0
   1317c:	beq	131a8 <__assert_fail@plt+0x1cb8>
   13180:	bl	11394 <__errno_location@plt>
   13184:	mov	r6, r0
   13188:	ldr	r0, [r6]
   1318c:	str	r0, [r4, #32]
   13190:	mov	r0, r5
   13194:	mov	r1, #0
   13198:	mov	r2, #104	; 0x68
   1319c:	bl	113ac <memset@plt>
   131a0:	mov	r0, #10
   131a4:	pop	{r4, r5, r6, sl, fp, pc}
   131a8:	ldr	r0, [r4, #80]	; 0x50
   131ac:	and	r0, r0, #61440	; 0xf000
   131b0:	cmp	r0, #40960	; 0xa000
   131b4:	moveq	r0, #12
   131b8:	popeq	{r4, r5, r6, sl, fp, pc}
   131bc:	cmp	r0, #32768	; 0x8000
   131c0:	moveq	r0, #8
   131c4:	popeq	{r4, r5, r6, sl, fp, pc}
   131c8:	cmp	r0, #16384	; 0x4000
   131cc:	bne	13200 <__assert_fail@plt+0x1d10>
   131d0:	ldrb	r1, [r4, #168]	; 0xa8
   131d4:	mov	r0, #1
   131d8:	cmp	r1, #46	; 0x2e
   131dc:	popne	{r4, r5, r6, sl, fp, pc}
   131e0:	ldrb	r1, [r4, #169]	; 0xa9
   131e4:	cmp	r1, #0
   131e8:	beq	13208 <__assert_fail@plt+0x1d18>
   131ec:	cmp	r1, #46	; 0x2e
   131f0:	ldrbeq	r1, [r4, #170]	; 0xaa
   131f4:	cmpeq	r1, #0
   131f8:	beq	13208 <__assert_fail@plt+0x1d18>
   131fc:	pop	{r4, r5, r6, sl, fp, pc}
   13200:	mov	r0, #3
   13204:	pop	{r4, r5, r6, sl, fp, pc}
   13208:	ldr	r1, [r4, #48]	; 0x30
   1320c:	mov	r0, #5
   13210:	cmp	r1, #0
   13214:	movweq	r0, #1
   13218:	pop	{r4, r5, r6, sl, fp, pc}
   1321c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13220:	add	fp, sp, #24
   13224:	ldrd	r8, [r0, #40]	; 0x28
   13228:	mov	r5, r2
   1322c:	mov	r4, r1
   13230:	mov	r6, r0
   13234:	cmp	r8, r2
   13238:	bcs	13270 <__assert_fail@plt+0x1d80>
   1323c:	add	r1, r5, #40	; 0x28
   13240:	cmn	r1, #-1073741823	; 0xc0000001
   13244:	str	r1, [r6, #40]	; 0x28
   13248:	bhi	132f8 <__assert_fail@plt+0x1e08>
   1324c:	add	r7, r6, #8
   13250:	lsl	r1, r1, #2
   13254:	ldr	r0, [r7]
   13258:	bl	18ae8 <__assert_fail@plt+0x75f8>
   1325c:	cmp	r0, #0
   13260:	beq	132f8 <__assert_fail@plt+0x1e08>
   13264:	mov	r6, r7
   13268:	str	r0, [r7]
   1326c:	b	13274 <__assert_fail@plt+0x1d84>
   13270:	ldr	r0, [r6, #8]!
   13274:	cmp	r4, #0
   13278:	beq	13290 <__assert_fail@plt+0x1da0>
   1327c:	str	r4, [r0], #4
   13280:	ldr	r4, [r4, #8]
   13284:	cmp	r4, #0
   13288:	bne	1327c <__assert_fail@plt+0x1d8c>
   1328c:	ldr	r0, [r6]
   13290:	mov	r1, r5
   13294:	mov	r2, #4
   13298:	mov	r3, r9
   1329c:	bl	11460 <qsort@plt>
   132a0:	ldr	r7, [r6]
   132a4:	subs	r0, r5, #1
   132a8:	ldr	r4, [r7]
   132ac:	mov	r1, r4
   132b0:	beq	132ec <__assert_fail@plt+0x1dfc>
   132b4:	mov	r1, r7
   132b8:	cmp	r5, #2
   132bc:	ldr	r2, [r1, #4]!
   132c0:	str	r2, [r4, #8]
   132c4:	beq	132e8 <__assert_fail@plt+0x1df8>
   132c8:	rsb	r3, r5, #2
   132cc:	mov	r2, r1
   132d0:	ldr	r6, [r2, #4]!
   132d4:	ldr	r1, [r1]
   132d8:	adds	r3, r3, #1
   132dc:	str	r6, [r1, #8]
   132e0:	mov	r1, r2
   132e4:	bne	132d0 <__assert_fail@plt+0x1de0>
   132e8:	ldr	r1, [r7, r0, lsl #2]
   132ec:	mov	r0, #0
   132f0:	str	r0, [r1, #8]
   132f4:	b	1330c <__assert_fail@plt+0x1e1c>
   132f8:	ldr	r0, [r6, #8]
   132fc:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13300:	mov	r0, #0
   13304:	str	r0, [r6, #40]	; 0x28
   13308:	str	r0, [r6, #8]
   1330c:	mov	r0, r4
   13310:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13314:	push	{r4, r5, fp, lr}
   13318:	add	fp, sp, #8
   1331c:	sub	sp, sp, #8
   13320:	mov	r4, r0
   13324:	ldrh	r0, [r0, #48]	; 0x30
   13328:	movw	r1, #258	; 0x102
   1332c:	tst	r0, r1
   13330:	beq	13370 <__assert_fail@plt+0x1e80>
   13334:	movw	r0, #11440	; 0x2cb0
   13338:	movw	r2, #19172	; 0x4ae4
   1333c:	movw	r3, #19204	; 0x4b04
   13340:	mov	r1, #0
   13344:	mov	r5, #0
   13348:	movt	r0, #1
   1334c:	movt	r2, #1
   13350:	movt	r3, #1
   13354:	str	r0, [sp]
   13358:	mov	r0, #31
   1335c:	bl	15160 <__assert_fail@plt+0x3c70>
   13360:	cmp	r0, #0
   13364:	str	r0, [r4, #56]	; 0x38
   13368:	movne	r5, #1
   1336c:	b	13394 <__assert_fail@plt+0x1ea4>
   13370:	mov	r0, #32
   13374:	bl	18ab8 <__assert_fail@plt+0x75c8>
   13378:	cmp	r0, #0
   1337c:	str	r0, [r4, #56]	; 0x38
   13380:	beq	13390 <__assert_fail@plt+0x1ea0>
   13384:	bl	18bb8 <__assert_fail@plt+0x76c8>
   13388:	mov	r5, #1
   1338c:	b	13394 <__assert_fail@plt+0x1ea4>
   13390:	mov	r5, #0
   13394:	mov	r0, r5
   13398:	sub	sp, fp, #8
   1339c:	pop	{r4, r5, fp, pc}
   133a0:	ldr	r3, [r0, #48]	; 0x30
   133a4:	mov	r2, #32768	; 0x8000
   133a8:	and	r2, r2, r3, lsl #11
   133ac:	tst	r3, #512	; 0x200
   133b0:	orr	r2, r2, #18688	; 0x4900
   133b4:	orr	r2, r2, #524288	; 0x80000
   133b8:	bne	133c8 <__assert_fail@plt+0x1ed8>
   133bc:	mov	r0, r1
   133c0:	mov	r1, r2
   133c4:	b	18f18 <__assert_fail@plt+0x7a28>
   133c8:	ldr	r0, [r0, #32]
   133cc:	b	15d74 <__assert_fail@plt+0x4884>
   133d0:	push	{r4, r6, r7, sl, fp, lr}
   133d4:	add	fp, sp, #16
   133d8:	cmp	r0, #0
   133dc:	popeq	{r4, r6, r7, sl, fp, pc}
   133e0:	mov	r4, r0
   133e4:	ldrd	r6, [r4, #8]
   133e8:	cmp	r7, #0
   133ec:	beq	133f8 <__assert_fail@plt+0x1f08>
   133f0:	mov	r0, r7
   133f4:	bl	114cc <closedir@plt>
   133f8:	mov	r0, r4
   133fc:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13400:	cmp	r6, #0
   13404:	mov	r4, r6
   13408:	bne	133e4 <__assert_fail@plt+0x1ef4>
   1340c:	pop	{r4, r6, r7, sl, fp, pc}
   13410:	push	{r4, r5, fp, lr}
   13414:	add	fp, sp, #8
   13418:	mov	r4, r0
   1341c:	ldr	r0, [r0]
   13420:	cmp	r0, #0
   13424:	beq	13464 <__assert_fail@plt+0x1f74>
   13428:	ldr	r1, [r0, #48]	; 0x30
   1342c:	cmp	r1, #0
   13430:	blt	13458 <__assert_fail@plt+0x1f68>
   13434:	ldr	r5, [r0, #8]
   13438:	cmp	r5, #0
   1343c:	ldreq	r5, [r0, #4]
   13440:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13444:	ldr	r0, [r5, #48]	; 0x30
   13448:	cmn	r0, #1
   1344c:	mov	r0, r5
   13450:	bgt	13434 <__assert_fail@plt+0x1f44>
   13454:	b	1345c <__assert_fail@plt+0x1f6c>
   13458:	mov	r5, r0
   1345c:	mov	r0, r5
   13460:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13464:	ldr	r0, [r4, #4]
   13468:	cmp	r0, #0
   1346c:	blne	133d0 <__assert_fail@plt+0x1ee0>
   13470:	ldr	r0, [r4, #8]
   13474:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13478:	ldr	r0, [r4, #24]
   1347c:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13480:	ldr	r0, [r4, #48]	; 0x30
   13484:	tst	r0, #512	; 0x200
   13488:	bne	134b4 <__assert_fail@plt+0x1fc4>
   1348c:	mov	r5, #0
   13490:	tst	r0, #4
   13494:	bne	134f0 <__assert_fail@plt+0x2000>
   13498:	ldr	r0, [r4, #28]
   1349c:	bl	11454 <fchdir@plt>
   134a0:	cmp	r0, #0
   134a4:	beq	134cc <__assert_fail@plt+0x1fdc>
   134a8:	bl	11394 <__errno_location@plt>
   134ac:	ldr	r5, [r0]
   134b0:	b	134d0 <__assert_fail@plt+0x1fe0>
   134b4:	ldr	r0, [r4, #32]
   134b8:	mov	r5, #0
   134bc:	cmp	r0, #0
   134c0:	blt	134f0 <__assert_fail@plt+0x2000>
   134c4:	bl	114b4 <close@plt>
   134c8:	b	134e0 <__assert_fail@plt+0x1ff0>
   134cc:	mov	r5, #0
   134d0:	ldr	r0, [r4, #28]
   134d4:	bl	114b4 <close@plt>
   134d8:	cmp	r5, #0
   134dc:	bne	134f0 <__assert_fail@plt+0x2000>
   134e0:	cmp	r0, #0
   134e4:	beq	134f0 <__assert_fail@plt+0x2000>
   134e8:	bl	11394 <__errno_location@plt>
   134ec:	ldr	r5, [r0]
   134f0:	add	r0, r4, #60	; 0x3c
   134f4:	bl	13534 <__assert_fail@plt+0x2044>
   134f8:	ldr	r0, [r4, #52]	; 0x34
   134fc:	cmp	r0, #0
   13500:	beq	13508 <__assert_fail@plt+0x2018>
   13504:	bl	1548c <__assert_fail@plt+0x3f9c>
   13508:	mov	r0, r4
   1350c:	bl	13568 <__assert_fail@plt+0x2078>
   13510:	mov	r0, r4
   13514:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13518:	cmp	r5, #0
   1351c:	moveq	r0, #0
   13520:	popeq	{r4, r5, fp, pc}
   13524:	bl	11394 <__errno_location@plt>
   13528:	str	r5, [r0]
   1352c:	mvn	r0, #0
   13530:	pop	{r4, r5, fp, pc}
   13534:	push	{r4, sl, fp, lr}
   13538:	add	fp, sp, #8
   1353c:	mov	r4, r0
   13540:	bl	15c6c <__assert_fail@plt+0x477c>
   13544:	cmp	r0, #0
   13548:	popne	{r4, sl, fp, pc}
   1354c:	mov	r0, r4
   13550:	bl	15cc0 <__assert_fail@plt+0x47d0>
   13554:	cmp	r0, #0
   13558:	blt	13560 <__assert_fail@plt+0x2070>
   1355c:	bl	114b4 <close@plt>
   13560:	mov	r0, r4
   13564:	b	13540 <__assert_fail@plt+0x2050>
   13568:	ldrh	r1, [r0, #48]	; 0x30
   1356c:	movw	r2, #258	; 0x102
   13570:	tst	r1, r2
   13574:	beq	13588 <__assert_fail@plt+0x2098>
   13578:	ldr	r0, [r0, #56]	; 0x38
   1357c:	cmp	r0, #0
   13580:	bxeq	lr
   13584:	b	1548c <__assert_fail@plt+0x3f9c>
   13588:	ldr	r0, [r0, #56]	; 0x38
   1358c:	b	12cb0 <__assert_fail@plt+0x17c0>
   13590:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13594:	add	fp, sp, #24
   13598:	ldr	r6, [r0]
   1359c:	mov	r5, #0
   135a0:	cmp	r6, #0
   135a4:	beq	13b98 <__assert_fail@plt+0x26a8>
   135a8:	ldr	r1, [r0, #48]	; 0x30
   135ac:	mov	r4, r0
   135b0:	tst	r1, #8192	; 0x2000
   135b4:	bne	13b98 <__assert_fail@plt+0x26a8>
   135b8:	ldrh	r0, [r6, #60]	; 0x3c
   135bc:	mov	r2, #3
   135c0:	strh	r2, [r6, #60]	; 0x3c
   135c4:	cmp	r0, #1
   135c8:	beq	13618 <__assert_fail@plt+0x2128>
   135cc:	mov	r7, r6
   135d0:	cmp	r0, #2
   135d4:	bne	13630 <__assert_fail@plt+0x2140>
   135d8:	ldrh	r2, [r7, #56]!	; 0x38
   135dc:	movw	r3, #65534	; 0xfffe
   135e0:	and	r3, r2, r3
   135e4:	cmp	r3, #12
   135e8:	bne	13634 <__assert_fail@plt+0x2144>
   135ec:	mov	r0, r4
   135f0:	mov	r1, r6
   135f4:	mov	r2, #1
   135f8:	bl	130e8 <__assert_fail@plt+0x1bf8>
   135fc:	strh	r0, [r6, #56]	; 0x38
   13600:	cmp	r0, #1
   13604:	ldrbeq	r0, [r4, #48]	; 0x30
   13608:	tsteq	r0, #4
   1360c:	beq	13800 <__assert_fail@plt+0x2310>
   13610:	mov	r5, r6
   13614:	b	13928 <__assert_fail@plt+0x2438>
   13618:	mov	r0, r4
   1361c:	mov	r1, r6
   13620:	mov	r2, #0
   13624:	bl	130e8 <__assert_fail@plt+0x1bf8>
   13628:	strh	r0, [r6, #56]	; 0x38
   1362c:	b	13684 <__assert_fail@plt+0x2194>
   13630:	ldrh	r2, [r7, #56]!	; 0x38
   13634:	cmp	r2, #1
   13638:	bne	1368c <__assert_fail@plt+0x219c>
   1363c:	cmp	r0, #4
   13640:	bne	136f8 <__assert_fail@plt+0x2208>
   13644:	ldrb	r0, [r6, #58]	; 0x3a
   13648:	tst	r0, #2
   1364c:	beq	13658 <__assert_fail@plt+0x2168>
   13650:	ldr	r0, [r6, #36]	; 0x24
   13654:	bl	114b4 <close@plt>
   13658:	ldr	r0, [r4, #4]
   1365c:	cmp	r0, #0
   13660:	beq	13670 <__assert_fail@plt+0x2180>
   13664:	bl	133d0 <__assert_fail@plt+0x1ee0>
   13668:	mov	r0, #0
   1366c:	str	r0, [r4, #4]
   13670:	mov	r0, #6
   13674:	strh	r0, [r6, #56]	; 0x38
   13678:	mov	r0, r4
   1367c:	mov	r1, r6
   13680:	bl	13ba4 <__assert_fail@plt+0x26b4>
   13684:	mov	r5, r6
   13688:	b	13b98 <__assert_fail@plt+0x26a8>
   1368c:	ldr	r5, [r6, #8]
   13690:	cmp	r5, #0
   13694:	beq	13790 <__assert_fail@plt+0x22a0>
   13698:	mov	r0, r6
   1369c:	str	r5, [r4]
   136a0:	bl	12cb0 <__assert_fail@plt+0x17c0>
   136a4:	ldr	r0, [r5, #48]	; 0x30
   136a8:	cmp	r0, #0
   136ac:	beq	137dc <__assert_fail@plt+0x22ec>
   136b0:	ldrh	r0, [r5, #60]	; 0x3c
   136b4:	mov	r6, r5
   136b8:	cmp	r0, #4
   136bc:	beq	1368c <__assert_fail@plt+0x219c>
   136c0:	cmp	r0, #2
   136c4:	bne	138ec <__assert_fail@plt+0x23fc>
   136c8:	mov	r0, r4
   136cc:	mov	r1, r5
   136d0:	mov	r2, #1
   136d4:	bl	130e8 <__assert_fail@plt+0x1bf8>
   136d8:	strh	r0, [r5, #56]	; 0x38
   136dc:	cmp	r0, #1
   136e0:	ldrbeq	r0, [r4, #48]	; 0x30
   136e4:	tsteq	r0, #4
   136e8:	beq	13afc <__assert_fail@plt+0x260c>
   136ec:	mov	r0, #3
   136f0:	strh	r0, [r5, #60]	; 0x3c
   136f4:	b	138ec <__assert_fail@plt+0x23fc>
   136f8:	tst	r1, #64	; 0x40
   136fc:	beq	13720 <__assert_fail@plt+0x2230>
   13700:	ldr	r0, [r4, #16]
   13704:	ldr	r3, [r4, #20]
   13708:	ldr	r2, [r6, #64]	; 0x40
   1370c:	ldr	r5, [r6, #68]	; 0x44
   13710:	eor	r3, r5, r3
   13714:	eor	r0, r2, r0
   13718:	orrs	r0, r0, r3
   1371c:	bne	13644 <__assert_fail@plt+0x2154>
   13720:	ldr	r0, [r4, #4]
   13724:	cmp	r0, #0
   13728:	beq	138c8 <__assert_fail@plt+0x23d8>
   1372c:	tst	r1, #4096	; 0x1000
   13730:	bne	138b4 <__assert_fail@plt+0x23c4>
   13734:	ldr	r3, [r6, #24]
   13738:	mov	r0, r4
   1373c:	mov	r1, r6
   13740:	mvn	r2, #0
   13744:	bl	13c70 <__assert_fail@plt+0x2780>
   13748:	cmp	r0, #0
   1374c:	beq	138e0 <__assert_fail@plt+0x23f0>
   13750:	bl	11394 <__errno_location@plt>
   13754:	ldr	r0, [r0]
   13758:	str	r0, [r6, #32]
   1375c:	ldrh	r0, [r6, #58]	; 0x3a
   13760:	orr	r0, r0, #1
   13764:	strh	r0, [r6, #58]	; 0x3a
   13768:	ldr	r0, [r4, #4]
   1376c:	cmp	r0, #0
   13770:	beq	138e0 <__assert_fail@plt+0x23f0>
   13774:	ldmib	r0, {r1, r2}
   13778:	ldr	r1, [r1, #24]
   1377c:	cmp	r2, #0
   13780:	str	r1, [r0, #24]
   13784:	mov	r0, r2
   13788:	bne	13774 <__assert_fail@plt+0x2284>
   1378c:	b	138e0 <__assert_fail@plt+0x23f0>
   13790:	ldr	r5, [r6, #4]
   13794:	ldr	r0, [r5, #12]
   13798:	cmp	r0, #0
   1379c:	beq	139e4 <__assert_fail@plt+0x24f4>
   137a0:	str	r5, [r4]
   137a4:	ldr	r1, [r5, #40]	; 0x28
   137a8:	ldr	r0, [r4, #24]
   137ac:	mov	r5, #0
   137b0:	strb	r5, [r0, r1]
   137b4:	mov	r0, r4
   137b8:	mov	r1, #3
   137bc:	bl	13e48 <__assert_fail@plt+0x2958>
   137c0:	cmp	r0, #0
   137c4:	beq	139d4 <__assert_fail@plt+0x24e4>
   137c8:	mov	r7, r0
   137cc:	mov	r0, r6
   137d0:	bl	12cb0 <__assert_fail@plt+0x17c0>
   137d4:	mov	r5, r7
   137d8:	b	138ec <__assert_fail@plt+0x23fc>
   137dc:	mov	r0, r4
   137e0:	bl	147dc <__assert_fail@plt+0x32ec>
   137e4:	cmp	r0, #0
   137e8:	beq	1382c <__assert_fail@plt+0x233c>
   137ec:	ldr	r0, [r4, #48]	; 0x30
   137f0:	mov	r5, #0
   137f4:	orr	r0, r0, #8192	; 0x2000
   137f8:	str	r0, [r4, #48]	; 0x30
   137fc:	b	13b98 <__assert_fail@plt+0x26a8>
   13800:	movw	r1, #41660	; 0xa2bc
   13804:	mov	r0, r4
   13808:	movt	r1, #1
   1380c:	bl	133a0 <__assert_fail@plt+0x1eb0>
   13810:	cmn	r0, #1
   13814:	str	r0, [r6, #36]	; 0x24
   13818:	ble	13a70 <__assert_fail@plt+0x2580>
   1381c:	ldrh	r0, [r6, #58]	; 0x3a
   13820:	orr	r0, r0, #2
   13824:	strh	r0, [r6, #58]	; 0x3a
   13828:	b	13610 <__assert_fail@plt+0x2120>
   1382c:	mov	r0, r4
   13830:	bl	13568 <__assert_fail@plt+0x2078>
   13834:	ldr	r1, [r5, #52]	; 0x34
   13838:	add	r6, r5, #168	; 0xa8
   1383c:	str	r1, [r5, #40]	; 0x28
   13840:	add	r2, r1, #1
   13844:	mov	r1, r6
   13848:	ldr	r0, [r4, #24]
   1384c:	bl	11220 <memmove@plt>
   13850:	mov	r0, r6
   13854:	mov	r1, #47	; 0x2f
   13858:	bl	11418 <strrchr@plt>
   1385c:	cmp	r0, #0
   13860:	beq	1389c <__assert_fail@plt+0x23ac>
   13864:	cmp	r0, r6
   13868:	bne	13878 <__assert_fail@plt+0x2388>
   1386c:	ldrb	r1, [r5, #169]	; 0xa9
   13870:	cmp	r1, #0
   13874:	beq	1389c <__assert_fail@plt+0x23ac>
   13878:	add	r7, r0, #1
   1387c:	mov	r0, r7
   13880:	bl	11364 <strlen@plt>
   13884:	mov	r8, r0
   13888:	add	r2, r0, #1
   1388c:	mov	r0, r6
   13890:	mov	r1, r7
   13894:	bl	11220 <memmove@plt>
   13898:	str	r8, [r5, #52]	; 0x34
   1389c:	ldr	r0, [r4, #24]
   138a0:	str	r0, [r5, #24]
   138a4:	str	r0, [r5, #28]
   138a8:	mov	r0, r4
   138ac:	bl	13314 <__assert_fail@plt+0x1e24>
   138b0:	b	13928 <__assert_fail@plt+0x2438>
   138b4:	bic	r1, r1, #4096	; 0x1000
   138b8:	str	r1, [r4, #48]	; 0x30
   138bc:	bl	133d0 <__assert_fail@plt+0x1ee0>
   138c0:	mov	r0, #0
   138c4:	str	r0, [r4, #4]
   138c8:	mov	r0, r4
   138cc:	mov	r1, #3
   138d0:	bl	13e48 <__assert_fail@plt+0x2958>
   138d4:	cmp	r0, #0
   138d8:	str	r0, [r4, #4]
   138dc:	beq	139a8 <__assert_fail@plt+0x24b8>
   138e0:	ldr	r5, [r4, #4]
   138e4:	mov	r0, #0
   138e8:	str	r0, [r4, #4]
   138ec:	ldr	r0, [r5, #4]
   138f0:	ldr	r1, [r0, #28]
   138f4:	ldr	r0, [r0, #40]	; 0x28
   138f8:	sub	r2, r0, #1
   138fc:	ldrb	r1, [r1, r2]
   13900:	cmp	r1, #47	; 0x2f
   13904:	ldr	r1, [r4, #24]
   13908:	moveq	r0, r2
   1390c:	mov	r2, #47	; 0x2f
   13910:	strb	r2, [r1, r0]!
   13914:	ldr	r2, [r5, #52]	; 0x34
   13918:	add	r0, r1, #1
   1391c:	add	r1, r5, #168	; 0xa8
   13920:	add	r2, r2, #1
   13924:	bl	11220 <memmove@plt>
   13928:	str	r5, [r4]
   1392c:	ldrh	r0, [r5, #56]	; 0x38
   13930:	cmp	r0, #11
   13934:	bne	13968 <__assert_fail@plt+0x2478>
   13938:	ldrd	r0, [r5, #112]	; 0x70
   1393c:	eor	r2, r0, #1
   13940:	orrs	r2, r2, r1
   13944:	beq	13b98 <__assert_fail@plt+0x26a8>
   13948:	eor	r0, r0, #2
   1394c:	orrs	r0, r0, r1
   13950:	bne	13ba0 <__assert_fail@plt+0x26b0>
   13954:	mov	r0, r4
   13958:	mov	r1, r5
   1395c:	mov	r2, #0
   13960:	bl	130e8 <__assert_fail@plt+0x1bf8>
   13964:	strh	r0, [r5, #56]	; 0x38
   13968:	cmp	r0, #1
   1396c:	bne	13b98 <__assert_fail@plt+0x26a8>
   13970:	ldr	r0, [r5, #48]	; 0x30
   13974:	cmp	r0, #0
   13978:	ldrdeq	r0, [r5, #64]	; 0x40
   1397c:	strdeq	r0, [r4, #16]
   13980:	mov	r0, r4
   13984:	mov	r1, r5
   13988:	bl	14838 <__assert_fail@plt+0x3348>
   1398c:	cmp	r0, #0
   13990:	bne	13b98 <__assert_fail@plt+0x26a8>
   13994:	bl	11394 <__errno_location@plt>
   13998:	mov	r1, #12
   1399c:	mov	r5, #0
   139a0:	str	r1, [r0]
   139a4:	b	13b98 <__assert_fail@plt+0x26a8>
   139a8:	ldrb	r0, [r4, #49]	; 0x31
   139ac:	mov	r5, #0
   139b0:	tst	r0, #32
   139b4:	bne	13b98 <__assert_fail@plt+0x26a8>
   139b8:	ldr	r0, [r6, #32]
   139bc:	cmp	r0, #0
   139c0:	ldrhne	r0, [r7]
   139c4:	cmpne	r0, #4
   139c8:	movne	r0, #7
   139cc:	strhne	r0, [r7]
   139d0:	b	13678 <__assert_fail@plt+0x2188>
   139d4:	ldrb	r0, [r4, #49]	; 0x31
   139d8:	tst	r0, #32
   139dc:	bne	13b98 <__assert_fail@plt+0x26a8>
   139e0:	ldr	r5, [r6, #4]
   139e4:	mov	r0, r6
   139e8:	str	r5, [r4]
   139ec:	bl	12cb0 <__assert_fail@plt+0x17c0>
   139f0:	ldr	r0, [r5, #48]	; 0x30
   139f4:	cmn	r0, #1
   139f8:	beq	13a54 <__assert_fail@plt+0x2564>
   139fc:	ldrh	r0, [r5, #56]	; 0x38
   13a00:	cmp	r0, #11
   13a04:	beq	13ba0 <__assert_fail@plt+0x26b0>
   13a08:	ldr	r0, [r5, #40]	; 0x28
   13a0c:	ldr	r1, [r4, #24]
   13a10:	mov	r2, #0
   13a14:	strb	r2, [r1, r0]
   13a18:	ldr	r0, [r5, #48]	; 0x30
   13a1c:	cmp	r0, #0
   13a20:	beq	13a88 <__assert_fail@plt+0x2598>
   13a24:	ldrh	r0, [r5, #58]	; 0x3a
   13a28:	tst	r0, #2
   13a2c:	bne	13ab4 <__assert_fail@plt+0x25c4>
   13a30:	tst	r0, #1
   13a34:	bne	13b5c <__assert_fail@plt+0x266c>
   13a38:	ldr	r1, [r5, #4]
   13a3c:	movw	r3, #41659	; 0xa2bb
   13a40:	mov	r0, r4
   13a44:	mvn	r2, #0
   13a48:	movt	r3, #1
   13a4c:	bl	13c70 <__assert_fail@plt+0x2780>
   13a50:	b	13a90 <__assert_fail@plt+0x25a0>
   13a54:	mov	r0, r5
   13a58:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13a5c:	bl	11394 <__errno_location@plt>
   13a60:	mov	r5, #0
   13a64:	str	r5, [r0]
   13a68:	str	r5, [r4]
   13a6c:	b	13b98 <__assert_fail@plt+0x26a8>
   13a70:	bl	11394 <__errno_location@plt>
   13a74:	ldr	r0, [r0]
   13a78:	mov	r1, #7
   13a7c:	strh	r1, [r6, #56]	; 0x38
   13a80:	str	r0, [r6, #32]
   13a84:	b	13610 <__assert_fail@plt+0x2120>
   13a88:	mov	r0, r4
   13a8c:	bl	147dc <__assert_fail@plt+0x32ec>
   13a90:	cmp	r0, #0
   13a94:	beq	13b5c <__assert_fail@plt+0x266c>
   13a98:	bl	11394 <__errno_location@plt>
   13a9c:	ldr	r0, [r0]
   13aa0:	str	r0, [r5, #32]
   13aa4:	ldr	r0, [r4, #48]	; 0x30
   13aa8:	orr	r0, r0, #8192	; 0x2000
   13aac:	str	r0, [r4, #48]	; 0x30
   13ab0:	b	13b5c <__assert_fail@plt+0x266c>
   13ab4:	ldr	r0, [r4, #48]	; 0x30
   13ab8:	tst	r0, #4
   13abc:	bne	13b28 <__assert_fail@plt+0x2638>
   13ac0:	mov	r6, r5
   13ac4:	tst	r0, #512	; 0x200
   13ac8:	ldr	r1, [r6, #36]!	; 0x24
   13acc:	bne	13b48 <__assert_fail@plt+0x2658>
   13ad0:	mov	r0, r1
   13ad4:	bl	11454 <fchdir@plt>
   13ad8:	cmp	r0, #0
   13adc:	beq	13b54 <__assert_fail@plt+0x2664>
   13ae0:	bl	11394 <__errno_location@plt>
   13ae4:	ldr	r0, [r0]
   13ae8:	str	r0, [r5, #32]
   13aec:	ldr	r0, [r4, #48]	; 0x30
   13af0:	orr	r0, r0, #8192	; 0x2000
   13af4:	str	r0, [r4, #48]	; 0x30
   13af8:	b	13b54 <__assert_fail@plt+0x2664>
   13afc:	movw	r1, #41660	; 0xa2bc
   13b00:	mov	r0, r4
   13b04:	movt	r1, #1
   13b08:	bl	133a0 <__assert_fail@plt+0x1eb0>
   13b0c:	cmn	r0, #1
   13b10:	str	r0, [r5, #36]	; 0x24
   13b14:	ble	13b30 <__assert_fail@plt+0x2640>
   13b18:	ldrh	r0, [r5, #58]	; 0x3a
   13b1c:	orr	r0, r0, #2
   13b20:	strh	r0, [r5, #58]	; 0x3a
   13b24:	b	136ec <__assert_fail@plt+0x21fc>
   13b28:	add	r6, r5, #36	; 0x24
   13b2c:	b	13b54 <__assert_fail@plt+0x2664>
   13b30:	bl	11394 <__errno_location@plt>
   13b34:	ldr	r0, [r0]
   13b38:	mov	r1, #7
   13b3c:	strh	r1, [r5, #56]	; 0x38
   13b40:	str	r0, [r5, #32]
   13b44:	b	136ec <__assert_fail@plt+0x21fc>
   13b48:	mov	r0, r4
   13b4c:	mov	r2, #1
   13b50:	bl	148ec <__assert_fail@plt+0x33fc>
   13b54:	ldr	r0, [r6]
   13b58:	bl	114b4 <close@plt>
   13b5c:	ldrh	r0, [r5, #56]	; 0x38
   13b60:	cmp	r0, #2
   13b64:	beq	13b8c <__assert_fail@plt+0x269c>
   13b68:	ldr	r0, [r5, #32]
   13b6c:	mov	r1, #7
   13b70:	cmp	r0, #0
   13b74:	movweq	r1, #6
   13b78:	strh	r1, [r5, #56]	; 0x38
   13b7c:	bne	13b8c <__assert_fail@plt+0x269c>
   13b80:	mov	r0, r4
   13b84:	mov	r1, r5
   13b88:	bl	13ba4 <__assert_fail@plt+0x26b4>
   13b8c:	ldrb	r0, [r4, #49]	; 0x31
   13b90:	tst	r0, #32
   13b94:	movne	r5, #0
   13b98:	mov	r0, r5
   13b9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ba0:	bl	114a8 <abort@plt>
   13ba4:	push	{r4, r5, r6, r7, fp, lr}
   13ba8:	add	fp, sp, #16
   13bac:	sub	sp, sp, #24
   13bb0:	ldrh	r2, [r0, #48]	; 0x30
   13bb4:	movw	r3, #258	; 0x102
   13bb8:	add	lr, r1, #64	; 0x40
   13bbc:	tst	r2, r3
   13bc0:	beq	13bf8 <__assert_fail@plt+0x2708>
   13bc4:	ldrd	r2, [lr]
   13bc8:	stm	sp, {r2, r3}
   13bcc:	ldrd	r2, [r1, #160]	; 0xa0
   13bd0:	mov	r1, sp
   13bd4:	str	r3, [sp, #12]
   13bd8:	str	r2, [sp, #8]
   13bdc:	ldr	r0, [r0, #56]	; 0x38
   13be0:	bl	15b28 <__assert_fail@plt+0x4638>
   13be4:	cmp	r0, #0
   13be8:	beq	13c6c <__assert_fail@plt+0x277c>
   13bec:	bl	12cb0 <__assert_fail@plt+0x17c0>
   13bf0:	sub	sp, fp, #16
   13bf4:	pop	{r4, r5, r6, r7, fp, pc}
   13bf8:	ldr	r2, [r1, #4]
   13bfc:	cmp	r2, #0
   13c00:	beq	13bf0 <__assert_fail@plt+0x2700>
   13c04:	ldr	r3, [r2, #48]	; 0x30
   13c08:	cmp	r3, #0
   13c0c:	blt	13bf0 <__assert_fail@plt+0x2700>
   13c10:	ldr	ip, [r0, #56]	; 0x38
   13c14:	ldrd	r4, [ip, #16]
   13c18:	orrs	r3, r4, r5
   13c1c:	beq	13c6c <__assert_fail@plt+0x277c>
   13c20:	ldrd	r4, [r1, #160]	; 0xa0
   13c24:	ldrd	r6, [ip]
   13c28:	eor	r1, r7, r5
   13c2c:	eor	r3, r6, r4
   13c30:	orrs	r1, r3, r1
   13c34:	bne	13bf0 <__assert_fail@plt+0x2700>
   13c38:	ldr	r1, [ip, #8]!
   13c3c:	ldrd	r4, [lr]
   13c40:	ldr	r3, [ip, #4]
   13c44:	eor	r1, r1, r4
   13c48:	eor	r3, r3, r5
   13c4c:	orrs	r1, r1, r3
   13c50:	bne	13bf0 <__assert_fail@plt+0x2700>
   13c54:	ldrd	r4, [r2, #64]	; 0x40
   13c58:	strd	r4, [ip]
   13c5c:	ldr	r0, [r0, #56]	; 0x38
   13c60:	ldrd	r2, [r2, #160]	; 0xa0
   13c64:	strd	r2, [r0]
   13c68:	b	13bf0 <__assert_fail@plt+0x2700>
   13c6c:	bl	114a8 <abort@plt>
   13c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c74:	add	fp, sp, #28
   13c78:	sub	sp, sp, #108	; 0x6c
   13c7c:	mov	r7, r3
   13c80:	mov	r4, r2
   13c84:	mov	r8, r1
   13c88:	mov	sl, r0
   13c8c:	cmp	r3, #0
   13c90:	beq	13cb4 <__assert_fail@plt+0x27c4>
   13c94:	movw	r1, #41659	; 0xa2bb
   13c98:	mov	r0, r7
   13c9c:	movt	r1, #1
   13ca0:	bl	111fc <strcmp@plt>
   13ca4:	mov	r6, r0
   13ca8:	cmp	r0, #0
   13cac:	movwne	r6, #1
   13cb0:	b	13cb8 <__assert_fail@plt+0x27c8>
   13cb4:	mov	r6, #1
   13cb8:	ldr	r0, [sl, #48]	; 0x30
   13cbc:	tst	r0, #4
   13cc0:	bne	13d18 <__assert_fail@plt+0x2828>
   13cc4:	cmn	r4, #1
   13cc8:	mov	r1, #0
   13ccc:	mov	r9, #0
   13cd0:	movwgt	r1, #1
   13cd4:	orrs	r1, r1, r6
   13cd8:	bne	13d38 <__assert_fail@plt+0x2848>
   13cdc:	ands	r0, r0, #512	; 0x200
   13ce0:	beq	13d38 <__assert_fail@plt+0x2848>
   13ce4:	add	r4, sl, #60	; 0x3c
   13ce8:	mov	r0, r4
   13cec:	bl	15c6c <__assert_fail@plt+0x477c>
   13cf0:	cmp	r0, #0
   13cf4:	bne	13d40 <__assert_fail@plt+0x2850>
   13cf8:	mov	r0, r4
   13cfc:	bl	15cc0 <__assert_fail@plt+0x47d0>
   13d00:	cmn	r0, #1
   13d04:	ble	13d40 <__assert_fail@plt+0x2850>
   13d08:	mov	r4, r0
   13d0c:	mov	r9, #0
   13d10:	mov	r7, #0
   13d14:	b	13d5c <__assert_fail@plt+0x286c>
   13d18:	mov	r5, #0
   13d1c:	cmp	r4, #0
   13d20:	blt	13e3c <__assert_fail@plt+0x294c>
   13d24:	ands	r0, r0, #512	; 0x200
   13d28:	beq	13e3c <__assert_fail@plt+0x294c>
   13d2c:	mov	r0, r4
   13d30:	bl	114b4 <close@plt>
   13d34:	b	13e3c <__assert_fail@plt+0x294c>
   13d38:	cmn	r4, #1
   13d3c:	bgt	13d5c <__assert_fail@plt+0x286c>
   13d40:	mov	r0, sl
   13d44:	mov	r1, r7
   13d48:	bl	133a0 <__assert_fail@plt+0x1eb0>
   13d4c:	cmp	r0, #0
   13d50:	blt	13dec <__assert_fail@plt+0x28fc>
   13d54:	mov	r4, r0
   13d58:	mov	r9, #1
   13d5c:	ldr	r5, [sl, #48]	; 0x30
   13d60:	tst	r5, #2
   13d64:	bne	13d88 <__assert_fail@plt+0x2898>
   13d68:	cmp	r7, #0
   13d6c:	beq	13dd4 <__assert_fail@plt+0x28e4>
   13d70:	movw	r1, #41659	; 0xa2bb
   13d74:	mov	r0, r7
   13d78:	movt	r1, #1
   13d7c:	bl	111fc <strcmp@plt>
   13d80:	cmp	r0, #0
   13d84:	bne	13dd4 <__assert_fail@plt+0x28e4>
   13d88:	mov	r1, sp
   13d8c:	mov	r0, r4
   13d90:	bl	19438 <__assert_fail@plt+0x7f48>
   13d94:	cmp	r0, #0
   13d98:	bne	13e18 <__assert_fail@plt+0x2928>
   13d9c:	ldrd	r0, [r8, #64]	; 0x40
   13da0:	ldm	sp, {r2, r3}
   13da4:	eor	r1, r1, r3
   13da8:	eor	r0, r0, r2
   13dac:	orrs	r0, r0, r1
   13db0:	bne	13e0c <__assert_fail@plt+0x291c>
   13db4:	ldrd	r0, [r8, #160]	; 0xa0
   13db8:	ldr	r2, [sp, #96]	; 0x60
   13dbc:	ldr	r3, [sp, #100]	; 0x64
   13dc0:	eor	r1, r1, r3
   13dc4:	eor	r0, r0, r2
   13dc8:	orrs	r0, r0, r1
   13dcc:	bne	13e0c <__assert_fail@plt+0x291c>
   13dd0:	ldr	r5, [sl, #48]	; 0x30
   13dd4:	tst	r5, #512	; 0x200
   13dd8:	bne	13df4 <__assert_fail@plt+0x2904>
   13ddc:	mov	r0, r4
   13de0:	bl	11454 <fchdir@plt>
   13de4:	mov	r5, r0
   13de8:	b	13e1c <__assert_fail@plt+0x292c>
   13dec:	mvn	r5, #0
   13df0:	b	13e3c <__assert_fail@plt+0x294c>
   13df4:	mov	r0, sl
   13df8:	mov	r1, r4
   13dfc:	mov	r2, r6
   13e00:	bl	148ec <__assert_fail@plt+0x33fc>
   13e04:	mov	r5, #0
   13e08:	b	13e3c <__assert_fail@plt+0x294c>
   13e0c:	bl	11394 <__errno_location@plt>
   13e10:	mov	r1, #2
   13e14:	str	r1, [r0]
   13e18:	mvn	r5, #0
   13e1c:	cmp	r9, #0
   13e20:	beq	13e3c <__assert_fail@plt+0x294c>
   13e24:	bl	11394 <__errno_location@plt>
   13e28:	ldr	r7, [r0]
   13e2c:	mov	r6, r0
   13e30:	mov	r0, r4
   13e34:	bl	114b4 <close@plt>
   13e38:	str	r7, [r6]
   13e3c:	mov	r0, r5
   13e40:	sub	sp, fp, #28
   13e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e4c:	add	fp, sp, #28
   13e50:	sub	sp, sp, #68	; 0x44
   13e54:	ldr	r8, [r0]
   13e58:	mov	r4, r1
   13e5c:	mov	r6, r0
   13e60:	str	r0, [fp, #-40]	; 0xffffffd8
   13e64:	ldr	r5, [r8, #12]
   13e68:	cmp	r5, #0
   13e6c:	beq	13eb0 <__assert_fail@plt+0x29c0>
   13e70:	mov	r0, r5
   13e74:	bl	11448 <dirfd@plt>
   13e78:	cmn	r0, #1
   13e7c:	str	r0, [fp, #-32]	; 0xffffffe0
   13e80:	ble	13eec <__assert_fail@plt+0x29fc>
   13e84:	ldr	r0, [r6, #44]!	; 0x2c
   13e88:	mvn	r2, #0
   13e8c:	str	r5, [sp, #12]
   13e90:	cmp	r0, #0
   13e94:	str	r6, [sp, #44]	; 0x2c
   13e98:	add	r9, r6, #4
   13e9c:	mov	r6, #0
   13ea0:	movweq	r2, #34464	; 0x86a0
   13ea4:	movteq	r2, #1
   13ea8:	str	r2, [sp, #24]
   13eac:	b	140e0 <__assert_fail@plt+0x2bf0>
   13eb0:	mov	r9, r6
   13eb4:	mvn	r0, #99	; 0x63
   13eb8:	mov	r2, #0
   13ebc:	str	r5, [sp, #12]
   13ec0:	ldr	r3, [r9, #48]!	; 0x30
   13ec4:	and	r1, r3, #516	; 0x204
   13ec8:	cmp	r1, #512	; 0x200
   13ecc:	ldr	r1, [r8, #24]
   13ed0:	ldreq	r0, [r6, #32]
   13ed4:	tst	r3, #16
   13ed8:	beq	13f0c <__assert_fail@plt+0x2a1c>
   13edc:	tst	r3, #1
   13ee0:	bne	13f00 <__assert_fail@plt+0x2a10>
   13ee4:	mov	r2, #32768	; 0x8000
   13ee8:	b	13f0c <__assert_fail@plt+0x2a1c>
   13eec:	ldr	r0, [r8, #12]
   13ef0:	bl	114cc <closedir@plt>
   13ef4:	mov	r5, #0
   13ef8:	str	r5, [r8, #12]
   13efc:	b	13f48 <__assert_fail@plt+0x2a58>
   13f00:	ldr	r3, [r8, #48]	; 0x30
   13f04:	cmp	r3, #0
   13f08:	movne	r2, #32768	; 0x8000
   13f0c:	sub	r3, fp, #32
   13f10:	bl	15db8 <__assert_fail@plt+0x48c8>
   13f14:	cmp	r0, #0
   13f18:	str	r0, [r8, #12]
   13f1c:	beq	13f44 <__assert_fail@plt+0x2a54>
   13f20:	ldrh	r0, [r8, #56]	; 0x38
   13f24:	cmp	r0, #11
   13f28:	bne	13f68 <__assert_fail@plt+0x2a78>
   13f2c:	mov	r0, r6
   13f30:	mov	r1, r8
   13f34:	mov	r2, #0
   13f38:	bl	130e8 <__assert_fail@plt+0x1bf8>
   13f3c:	strh	r0, [r8, #56]	; 0x38
   13f40:	b	13fa8 <__assert_fail@plt+0x2ab8>
   13f44:	mov	r5, #0
   13f48:	cmp	r4, #3
   13f4c:	bne	14778 <__assert_fail@plt+0x3288>
   13f50:	mov	r0, #4
   13f54:	strh	r0, [r8, #56]	; 0x38
   13f58:	bl	11394 <__errno_location@plt>
   13f5c:	ldr	r0, [r0]
   13f60:	str	r0, [r8, #32]
   13f64:	b	14778 <__assert_fail@plt+0x3288>
   13f68:	ldrb	r0, [r9, #1]
   13f6c:	tst	r0, #1
   13f70:	beq	13fa8 <__assert_fail@plt+0x2ab8>
   13f74:	mov	r0, r6
   13f78:	mov	r1, r8
   13f7c:	bl	13ba4 <__assert_fail@plt+0x26b4>
   13f80:	mov	r0, r6
   13f84:	mov	r1, r8
   13f88:	mov	r2, #0
   13f8c:	mov	r5, #0
   13f90:	bl	130e8 <__assert_fail@plt+0x1bf8>
   13f94:	mov	r0, r6
   13f98:	mov	r1, r8
   13f9c:	bl	14838 <__assert_fail@plt+0x3348>
   13fa0:	cmp	r0, #0
   13fa4:	beq	1458c <__assert_fail@plt+0x309c>
   13fa8:	mov	r1, r6
   13fac:	mov	sl, r6
   13fb0:	ldr	r0, [r1, #44]!	; 0x2c
   13fb4:	str	r1, [sp, #44]	; 0x2c
   13fb8:	mvn	r1, #0
   13fbc:	cmp	r0, #0
   13fc0:	movweq	r1, #34464	; 0x86a0
   13fc4:	movteq	r1, #1
   13fc8:	cmp	r4, #2
   13fcc:	str	r1, [sp, #24]
   13fd0:	bne	13ff4 <__assert_fail@plt+0x2b04>
   13fd4:	mov	r6, #1
   13fd8:	cmp	r4, #3
   13fdc:	bne	140e0 <__assert_fail@plt+0x2bf0>
   13fe0:	sub	r0, r4, #3
   13fe4:	mov	r7, r8
   13fe8:	mov	r8, r4
   13fec:	mov	r5, #0
   13ff0:	b	1401c <__assert_fail@plt+0x2b2c>
   13ff4:	ldr	r0, [r9]
   13ff8:	and	r0, r0, #56	; 0x38
   13ffc:	cmp	r0, #24
   14000:	ldreq	r0, [r8, #84]	; 0x54
   14004:	cmpeq	r0, #2
   14008:	beq	14784 <__assert_fail@plt+0x3294>
   1400c:	sub	r0, r4, #3
   14010:	mov	r7, r8
   14014:	mov	r8, r4
   14018:	mov	r5, #1
   1401c:	clz	r0, r0
   14020:	lsr	r4, r0, #5
   14024:	ldrb	r0, [r9, #1]
   14028:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1402c:	tst	r0, #2
   14030:	beq	1404c <__assert_fail@plt+0x2b5c>
   14034:	mov	r0, r2
   14038:	movw	r1, #1030	; 0x406
   1403c:	mov	r2, #3
   14040:	bl	18d40 <__assert_fail@plt+0x7850>
   14044:	mov	r2, r0
   14048:	str	r0, [fp, #-32]	; 0xffffffe0
   1404c:	cmp	r2, #0
   14050:	blt	1406c <__assert_fail@plt+0x2b7c>
   14054:	mov	r0, sl
   14058:	mov	r1, r7
   1405c:	mov	r3, #0
   14060:	bl	13c70 <__assert_fail@plt+0x2780>
   14064:	cmp	r0, #0
   14068:	beq	140d4 <__assert_fail@plt+0x2be4>
   1406c:	and	r0, r4, r5
   14070:	cmp	r0, #1
   14074:	bne	14084 <__assert_fail@plt+0x2b94>
   14078:	bl	11394 <__errno_location@plt>
   1407c:	ldr	r0, [r0]
   14080:	str	r0, [r7, #32]
   14084:	ldrh	r0, [r7, #58]	; 0x3a
   14088:	orr	r0, r0, #1
   1408c:	strh	r0, [r7, #58]	; 0x3a
   14090:	ldr	r0, [r7, #12]
   14094:	bl	114cc <closedir@plt>
   14098:	mov	r4, #0
   1409c:	mov	r5, r7
   140a0:	str	r4, [r7, #12]
   140a4:	ldr	r0, [r9]
   140a8:	tst	r0, #512	; 0x200
   140ac:	beq	140c0 <__assert_fail@plt+0x2bd0>
   140b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   140b4:	cmp	r0, #0
   140b8:	blt	140c0 <__assert_fail@plt+0x2bd0>
   140bc:	bl	114b4 <close@plt>
   140c0:	str	r4, [r5, #12]
   140c4:	mov	r4, r8
   140c8:	mov	r6, #1
   140cc:	mov	r8, r5
   140d0:	b	140e0 <__assert_fail@plt+0x2bf0>
   140d4:	mov	r4, r8
   140d8:	mov	r6, #0
   140dc:	mov	r8, r7
   140e0:	ldr	r0, [r8, #40]	; 0x28
   140e4:	ldr	r1, [r8, #28]
   140e8:	mov	r5, #0
   140ec:	str	r4, [sp, #4]
   140f0:	sub	r2, r0, #1
   140f4:	ldrb	r1, [r1, r2]
   140f8:	cmp	r1, #47	; 0x2f
   140fc:	ldrb	r1, [r9]
   14100:	moveq	r0, r2
   14104:	tst	r1, #4
   14108:	mov	r1, #0
   1410c:	str	r1, [sp, #36]	; 0x24
   14110:	beq	1412c <__assert_fail@plt+0x2c3c>
   14114:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14118:	mov	r2, #47	; 0x2f
   1411c:	ldr	r1, [r1, #24]
   14120:	strb	r2, [r1, r0]!
   14124:	add	r1, r1, #1
   14128:	str	r1, [sp, #36]	; 0x24
   1412c:	ldr	r4, [r8, #12]
   14130:	add	r0, r0, #1
   14134:	str	r0, [sp, #48]	; 0x30
   14138:	cmp	r4, #0
   1413c:	beq	14464 <__assert_fail@plt+0x2f74>
   14140:	mov	r1, r0
   14144:	ldr	r0, [r8, #48]	; 0x30
   14148:	str	r6, [sp]
   1414c:	mov	r6, #0
   14150:	add	r0, r0, #1
   14154:	str	r0, [sp, #20]
   14158:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1415c:	ldr	r0, [r0, #36]	; 0x24
   14160:	sub	r0, r0, r1
   14164:	str	r0, [fp, #-44]	; 0xffffffd4
   14168:	bl	11394 <__errno_location@plt>
   1416c:	str	r0, [sp, #28]
   14170:	mov	r0, #0
   14174:	mov	r5, #0
   14178:	mov	r7, #0
   1417c:	str	r8, [sp, #32]
   14180:	str	r9, [fp, #-36]	; 0xffffffdc
   14184:	str	r0, [sp, #40]	; 0x28
   14188:	mov	r0, #0
   1418c:	str	r0, [sp, #16]
   14190:	mov	r0, #0
   14194:	str	r0, [sp, #8]
   14198:	ldr	r0, [sp, #28]
   1419c:	str	r6, [r0]
   141a0:	mov	r0, r4
   141a4:	bl	11430 <readdir64@plt>
   141a8:	cmp	r0, #0
   141ac:	beq	144c4 <__assert_fail@plt+0x2fd4>
   141b0:	mov	sl, r0
   141b4:	ldrb	r0, [r9]
   141b8:	ldr	r6, [fp, #-40]	; 0xffffffd8
   141bc:	add	r4, sl, #19
   141c0:	tst	r0, #32
   141c4:	ldrbeq	r0, [r4]
   141c8:	cmpeq	r0, #46	; 0x2e
   141cc:	beq	1426c <__assert_fail@plt+0x2d7c>
   141d0:	mov	r0, r4
   141d4:	bl	11364 <strlen@plt>
   141d8:	mov	r8, r0
   141dc:	mov	r0, r6
   141e0:	mov	r1, r4
   141e4:	mov	r2, r8
   141e8:	bl	13068 <__assert_fail@plt+0x1b78>
   141ec:	mov	r9, r0
   141f0:	cmp	r0, #0
   141f4:	beq	14478 <__assert_fail@plt+0x2f88>
   141f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   141fc:	cmp	r8, r1
   14200:	bcs	14214 <__assert_fail@plt+0x2d24>
   14204:	ldr	r2, [sp, #48]	; 0x30
   14208:	add	r4, r8, r2
   1420c:	mov	r8, r6
   14210:	b	142a0 <__assert_fail@plt+0x2db0>
   14214:	ldr	r1, [sp, #48]	; 0x30
   14218:	add	r4, r8, r1
   1421c:	mov	r8, r6
   14220:	ldr	r6, [r6, #24]
   14224:	add	r1, r4, #1
   14228:	mov	r0, r8
   1422c:	bl	12ff4 <__assert_fail@plt+0x1b04>
   14230:	cmp	r0, #0
   14234:	beq	14478 <__assert_fail@plt+0x2f88>
   14238:	ldr	r0, [r8, #24]
   1423c:	cmp	r6, r0
   14240:	beq	14294 <__assert_fail@plt+0x2da4>
   14244:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14248:	ldr	r2, [sp, #48]	; 0x30
   1424c:	ldrb	r1, [r1]
   14250:	tst	r1, #4
   14254:	ldr	r1, [sp, #36]	; 0x24
   14258:	addne	r1, r0, r2
   1425c:	mov	r0, #1
   14260:	str	r1, [sp, #36]	; 0x24
   14264:	str	r0, [sp, #8]
   14268:	b	14298 <__assert_fail@plt+0x2da8>
   1426c:	ldrb	r0, [sl, #20]
   14270:	cmp	r0, #0
   14274:	beq	14288 <__assert_fail@plt+0x2d98>
   14278:	cmp	r0, #46	; 0x2e
   1427c:	ldrbeq	r0, [sl, #21]
   14280:	cmpeq	r0, #0
   14284:	bne	141d0 <__assert_fail@plt+0x2ce0>
   14288:	ldr	r8, [sp, #32]
   1428c:	mov	r6, #0
   14290:	b	1444c <__assert_fail@plt+0x2f5c>
   14294:	ldr	r2, [sp, #48]	; 0x30
   14298:	ldr	r0, [r8, #36]	; 0x24
   1429c:	sub	r1, r0, r2
   142a0:	cmp	r4, r2
   142a4:	bcc	1451c <__assert_fail@plt+0x302c>
   142a8:	ldr	r0, [sp, #20]
   142ac:	str	r1, [fp, #-44]	; 0xffffffd4
   142b0:	str	r0, [r9, #48]	; 0x30
   142b4:	ldr	r0, [r8]
   142b8:	str	r4, [r9, #40]	; 0x28
   142bc:	str	r0, [r9, #4]
   142c0:	ldrd	r0, [sl]
   142c4:	strd	r0, [r9, #160]	; 0xa0
   142c8:	ldrb	r0, [r8, #48]	; 0x30
   142cc:	tst	r0, #4
   142d0:	bne	142e0 <__assert_fail@plt+0x2df0>
   142d4:	add	r0, r9, #168	; 0xa8
   142d8:	str	r0, [r9, #24]
   142dc:	b	142fc <__assert_fail@plt+0x2e0c>
   142e0:	ldr	r0, [r9, #28]
   142e4:	ldr	r2, [r9, #52]	; 0x34
   142e8:	add	r1, r9, #168	; 0xa8
   142ec:	str	r0, [r9, #24]
   142f0:	ldr	r0, [sp, #36]	; 0x24
   142f4:	add	r2, r2, #1
   142f8:	bl	11220 <memmove@plt>
   142fc:	ldr	r0, [sp, #44]	; 0x2c
   14300:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14304:	ldr	r0, [r0]
   14308:	ldr	r2, [r1]
   1430c:	cmp	r0, #0
   14310:	beq	14338 <__assert_fail@plt+0x2e48>
   14314:	ands	r0, r2, #1024	; 0x400
   14318:	bne	14338 <__assert_fail@plt+0x2e48>
   1431c:	mov	r0, r8
   14320:	mov	r1, r9
   14324:	mov	r2, #0
   14328:	bl	130e8 <__assert_fail@plt+0x1bf8>
   1432c:	mov	r6, #0
   14330:	strh	r0, [r9, #56]	; 0x38
   14334:	b	143ac <__assert_fail@plt+0x2ebc>
   14338:	ldrb	r3, [sl, #18]
   1433c:	mov	r0, #0
   14340:	tst	r2, #8
   14344:	mov	r1, #0
   14348:	beq	1436c <__assert_fail@plt+0x2e7c>
   1434c:	orr	r1, r3, #4
   14350:	cmp	r1, #4
   14354:	mov	r1, #0
   14358:	beq	1436c <__assert_fail@plt+0x2e7c>
   1435c:	eor	r1, r3, #10
   14360:	and	r2, r2, #16
   14364:	orrs	r1, r2, r1
   14368:	movwne	r1, #1
   1436c:	mov	r2, #11
   14370:	mov	r6, #0
   14374:	strh	r2, [r9, #56]	; 0x38
   14378:	sub	r2, r3, #1
   1437c:	uxtb	r3, r2
   14380:	cmp	r3, #11
   14384:	sxtbls	r0, r2
   14388:	movwls	r2, #41664	; 0xa2c0
   1438c:	movtls	r2, #1
   14390:	ldrls	r0, [r2, r0, lsl #2]
   14394:	cmp	r1, #0
   14398:	str	r0, [r9, #80]	; 0x50
   1439c:	mov	r0, #2
   143a0:	movwne	r0, #1
   143a4:	str	r0, [r9, #112]	; 0x70
   143a8:	str	r6, [r9, #116]	; 0x74
   143ac:	cmp	r5, #0
   143b0:	mov	r4, r9
   143b4:	str	r6, [r9, #8]
   143b8:	ldrne	r0, [sp, #40]	; 0x28
   143bc:	movne	r4, r5
   143c0:	strne	r9, [r0, #8]
   143c4:	movw	r0, #10000	; 0x2710
   143c8:	cmp	r7, r0
   143cc:	bne	14420 <__assert_fail@plt+0x2f30>
   143d0:	ldr	r0, [sp, #44]	; 0x2c
   143d4:	ldr	r0, [r0]
   143d8:	cmp	r0, #0
   143dc:	bne	14420 <__assert_fail@plt+0x2f30>
   143e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   143e4:	ldr	r0, [sp, #32]
   143e8:	bl	14b84 <__assert_fail@plt+0x3694>
   143ec:	mov	r1, #0
   143f0:	str	r1, [sp, #16]
   143f4:	movw	r1, #19778	; 0x4d42
   143f8:	movt	r1, #65363	; 0xff53
   143fc:	cmp	r0, r1
   14400:	movwne	r1, #26985	; 0x6969
   14404:	cmpne	r0, r1
   14408:	beq	14420 <__assert_fail@plt+0x2f30>
   1440c:	movw	r1, #6548	; 0x1994
   14410:	movt	r1, #258	; 0x102
   14414:	cmp	r0, r1
   14418:	movne	r0, #1
   1441c:	strne	r0, [sp, #16]
   14420:	ldr	r0, [sp, #24]
   14424:	add	r7, r7, #1
   14428:	cmp	r0, r7
   1442c:	mov	r0, #0
   14430:	movwls	r0, #15
   14434:	cmp	r0, #0
   14438:	bne	14568 <__assert_fail@plt+0x3078>
   1443c:	str	r9, [sp, #40]	; 0x28
   14440:	ldr	r9, [fp, #-36]	; 0xffffffdc
   14444:	ldr	r8, [sp, #32]
   14448:	mov	r5, r4
   1444c:	ldr	r4, [r8, #12]
   14450:	cmp	r4, #0
   14454:	bne	14198 <__assert_fail@plt+0x2ca8>
   14458:	ldr	r0, [sp, #8]
   1445c:	ldr	r4, [sp, #4]
   14460:	b	1450c <__assert_fail@plt+0x301c>
   14464:	ldr	r4, [sp, #4]
   14468:	mov	r7, #0
   1446c:	mov	r0, #0
   14470:	str	r0, [sp, #16]
   14474:	b	14634 <__assert_fail@plt+0x3144>
   14478:	ldr	r4, [sp, #28]
   1447c:	mov	r0, r9
   14480:	ldr	r8, [r4]
   14484:	bl	12cb0 <__assert_fail@plt+0x17c0>
   14488:	mov	r0, r5
   1448c:	bl	133d0 <__assert_fail@plt+0x1ee0>
   14490:	ldr	r6, [sp, #32]
   14494:	ldr	r0, [r6, #12]
   14498:	bl	114cc <closedir@plt>
   1449c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   144a0:	mov	r5, #0
   144a4:	mov	r0, #7
   144a8:	str	r5, [r6, #12]
   144ac:	strh	r0, [r6, #56]	; 0x38
   144b0:	ldr	r0, [r7]
   144b4:	orr	r0, r0, #8192	; 0x2000
   144b8:	str	r0, [r7]
   144bc:	str	r8, [r4]
   144c0:	b	14778 <__assert_fail@plt+0x3288>
   144c4:	ldr	r0, [sp, #28]
   144c8:	ldr	r0, [r0]
   144cc:	cmp	r0, #0
   144d0:	beq	144ec <__assert_fail@plt+0x2ffc>
   144d4:	str	r0, [r8, #32]
   144d8:	ldr	r0, [sp, #12]
   144dc:	orrs	r0, r0, r7
   144e0:	mov	r0, #4
   144e4:	movwne	r0, #7
   144e8:	strh	r0, [r8, #56]	; 0x38
   144ec:	ldr	r0, [r8, #12]
   144f0:	ldr	r4, [sp, #4]
   144f4:	cmp	r0, #0
   144f8:	beq	1459c <__assert_fail@plt+0x30ac>
   144fc:	bl	114cc <closedir@plt>
   14500:	mov	r0, #0
   14504:	str	r0, [r8, #12]
   14508:	ldr	r0, [sp, #8]
   1450c:	tst	r0, #1
   14510:	ldr	r6, [sp]
   14514:	bne	145ac <__assert_fail@plt+0x30bc>
   14518:	b	14634 <__assert_fail@plt+0x3144>
   1451c:	mov	r0, r9
   14520:	bl	12cb0 <__assert_fail@plt+0x17c0>
   14524:	mov	r0, r5
   14528:	bl	133d0 <__assert_fail@plt+0x1ee0>
   1452c:	ldr	r4, [sp, #32]
   14530:	ldr	r0, [r4, #12]
   14534:	bl	114cc <closedir@plt>
   14538:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1453c:	mov	r5, #0
   14540:	mov	r0, #7
   14544:	ldr	r1, [sp, #28]
   14548:	str	r5, [r4, #12]
   1454c:	strh	r0, [r4, #56]	; 0x38
   14550:	ldr	r0, [r7]
   14554:	orr	r0, r0, #8192	; 0x2000
   14558:	str	r0, [r7]
   1455c:	mov	r0, #36	; 0x24
   14560:	str	r0, [r1]
   14564:	b	14778 <__assert_fail@plt+0x3288>
   14568:	ldr	r6, [sp]
   1456c:	cmp	r0, #15
   14570:	bne	14774 <__assert_fail@plt+0x3284>
   14574:	mov	r5, r4
   14578:	ldr	r9, [fp, #-36]	; 0xffffffdc
   1457c:	ldr	r4, [sp, #4]
   14580:	ldr	r0, [sp, #8]
   14584:	ldr	r8, [sp, #32]
   14588:	b	145a4 <__assert_fail@plt+0x30b4>
   1458c:	bl	11394 <__errno_location@plt>
   14590:	mov	r1, #12
   14594:	str	r1, [r0]
   14598:	b	14778 <__assert_fail@plt+0x3288>
   1459c:	ldr	r6, [sp]
   145a0:	ldr	r0, [sp, #8]
   145a4:	tst	r0, #1
   145a8:	beq	14634 <__assert_fail@plt+0x3144>
   145ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   145b0:	ldr	r1, [r0, #4]
   145b4:	ldr	r0, [r0, #24]
   145b8:	b	145e0 <__assert_fail@plt+0x30f0>
   145bc:	ldr	r2, [r1, #24]
   145c0:	add	r3, r1, #168	; 0xa8
   145c4:	cmp	r2, r3
   145c8:	ldrne	r3, [r1, #28]
   145cc:	subne	r2, r2, r3
   145d0:	addne	r2, r0, r2
   145d4:	strne	r2, [r1, #24]
   145d8:	str	r0, [r1, #28]
   145dc:	ldr	r1, [r1, #8]
   145e0:	cmp	r1, #0
   145e4:	bne	145bc <__assert_fail@plt+0x30cc>
   145e8:	ldr	r1, [r5, #48]	; 0x30
   145ec:	cmp	r1, #0
   145f0:	blt	14634 <__assert_fail@plt+0x3144>
   145f4:	mov	r1, r5
   145f8:	ldr	r2, [r1, #24]
   145fc:	add	r3, r1, #168	; 0xa8
   14600:	cmp	r2, r3
   14604:	ldrne	r3, [r1, #28]
   14608:	subne	r2, r2, r3
   1460c:	addne	r2, r0, r2
   14610:	strne	r2, [r1, #24]
   14614:	str	r0, [r1, #28]
   14618:	ldr	r2, [r1, #8]
   1461c:	cmp	r2, #0
   14620:	ldreq	r2, [r1, #4]
   14624:	ldr	r1, [r2, #48]	; 0x30
   14628:	cmn	r1, #1
   1462c:	mov	r1, r2
   14630:	bgt	145f8 <__assert_fail@plt+0x3108>
   14634:	ldrb	r0, [r9]
   14638:	tst	r0, #4
   1463c:	beq	1466c <__assert_fail@plt+0x317c>
   14640:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14644:	ldr	r2, [sp, #36]	; 0x24
   14648:	ldr	r3, [sp, #48]	; 0x30
   1464c:	ldr	r0, [r0, #36]	; 0x24
   14650:	sub	r1, r2, #1
   14654:	cmp	r3, r0
   14658:	mov	r0, #0
   1465c:	moveq	r2, r1
   14660:	cmp	r7, #0
   14664:	moveq	r2, r1
   14668:	strb	r0, [r2]
   1466c:	ldr	r0, [sp, #12]
   14670:	cmp	r0, #0
   14674:	movwne	r0, #1
   14678:	orrs	r0, r0, r6
   1467c:	beq	146a8 <__assert_fail@plt+0x31b8>
   14680:	cmp	r7, #0
   14684:	bne	146dc <__assert_fail@plt+0x31ec>
   14688:	cmp	r4, #3
   1468c:	bne	1476c <__assert_fail@plt+0x327c>
   14690:	ldrh	r0, [r8, #56]	; 0x38
   14694:	cmp	r0, #4
   14698:	cmpne	r0, #7
   1469c:	movne	r0, #6
   146a0:	strhne	r0, [r8, #56]	; 0x38
   146a4:	b	1476c <__assert_fail@plt+0x327c>
   146a8:	cmp	r4, #1
   146ac:	cmpne	r7, #0
   146b0:	bne	146dc <__assert_fail@plt+0x31ec>
   146b4:	ldr	r0, [r8, #48]	; 0x30
   146b8:	cmp	r0, #0
   146bc:	beq	14748 <__assert_fail@plt+0x3258>
   146c0:	ldr	r1, [r8, #4]
   146c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   146c8:	movw	r3, #41659	; 0xa2bb
   146cc:	mvn	r2, #0
   146d0:	movt	r3, #1
   146d4:	bl	13c70 <__assert_fail@plt+0x2780>
   146d8:	b	14750 <__assert_fail@plt+0x3260>
   146dc:	ldr	r0, [sp, #16]
   146e0:	tst	r0, #1
   146e4:	beq	14718 <__assert_fail@plt+0x3228>
   146e8:	ldr	r4, [fp, #-40]	; 0xffffffd8
   146ec:	movw	r0, #19276	; 0x4b4c
   146f0:	mov	r1, r5
   146f4:	mov	r2, r7
   146f8:	movt	r0, #1
   146fc:	str	r0, [r4, #44]	; 0x2c
   14700:	mov	r0, r4
   14704:	bl	1321c <__assert_fail@plt+0x1d2c>
   14708:	mov	r5, r0
   1470c:	mov	r0, #0
   14710:	str	r0, [r4, #44]	; 0x2c
   14714:	b	14778 <__assert_fail@plt+0x3288>
   14718:	cmp	r7, #2
   1471c:	bcc	14778 <__assert_fail@plt+0x3288>
   14720:	ldr	r0, [sp, #44]	; 0x2c
   14724:	ldr	r0, [r0]
   14728:	cmp	r0, #0
   1472c:	beq	14778 <__assert_fail@plt+0x3288>
   14730:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14734:	mov	r1, r5
   14738:	mov	r2, r7
   1473c:	bl	1321c <__assert_fail@plt+0x1d2c>
   14740:	mov	r5, r0
   14744:	b	14778 <__assert_fail@plt+0x3288>
   14748:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1474c:	bl	147dc <__assert_fail@plt+0x32ec>
   14750:	cmp	r0, #0
   14754:	beq	14680 <__assert_fail@plt+0x3190>
   14758:	mov	r0, #7
   1475c:	strh	r0, [r8, #56]	; 0x38
   14760:	ldr	r0, [r9]
   14764:	orr	r0, r0, #8192	; 0x2000
   14768:	str	r0, [r9]
   1476c:	mov	r0, r5
   14770:	bl	133d0 <__assert_fail@plt+0x1ee0>
   14774:	mov	r5, #0
   14778:	mov	r0, r5
   1477c:	sub	sp, fp, #28
   14780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14784:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14788:	mov	r0, r8
   1478c:	bl	14b84 <__assert_fail@plt+0x3694>
   14790:	movw	r1, #26984	; 0x6968
   14794:	cmp	r0, r1
   14798:	ble	147c4 <__assert_fail@plt+0x32d4>
   1479c:	movw	r1, #26985	; 0x6969
   147a0:	cmp	r0, r1
   147a4:	movwne	r1, #16719	; 0x414f
   147a8:	movtne	r1, #21318	; 0x5346
   147ac:	cmpne	r0, r1
   147b0:	beq	1400c <__assert_fail@plt+0x2b1c>
   147b4:	movw	r1, #40864	; 0x9fa0
   147b8:	cmp	r0, r1
   147bc:	beq	1400c <__assert_fail@plt+0x2b1c>
   147c0:	b	13fd4 <__assert_fail@plt+0x2ae4>
   147c4:	movw	r1, #19778	; 0x4d42
   147c8:	movt	r1, #65363	; 0xff53
   147cc:	cmp	r0, r1
   147d0:	cmpne	r0, #0
   147d4:	beq	1400c <__assert_fail@plt+0x2b1c>
   147d8:	b	13fd4 <__assert_fail@plt+0x2ae4>
   147dc:	push	{r4, r5, fp, lr}
   147e0:	add	fp, sp, #8
   147e4:	mov	r4, r0
   147e8:	ldr	r0, [r0, #48]	; 0x30
   147ec:	mov	r5, #0
   147f0:	tst	r0, #4
   147f4:	bne	14828 <__assert_fail@plt+0x3338>
   147f8:	tst	r0, #512	; 0x200
   147fc:	bne	14818 <__assert_fail@plt+0x3328>
   14800:	ldr	r0, [r4, #28]
   14804:	bl	11454 <fchdir@plt>
   14808:	mov	r5, r0
   1480c:	cmp	r0, #0
   14810:	movwne	r5, #1
   14814:	b	14828 <__assert_fail@plt+0x3338>
   14818:	mov	r0, r4
   1481c:	mvn	r1, #99	; 0x63
   14820:	mov	r2, #1
   14824:	bl	148ec <__assert_fail@plt+0x33fc>
   14828:	add	r0, r4, #60	; 0x3c
   1482c:	bl	13534 <__assert_fail@plt+0x2044>
   14830:	mov	r0, r5
   14834:	pop	{r4, r5, fp, pc}
   14838:	push	{r4, r5, r6, r7, fp, lr}
   1483c:	add	fp, sp, #16
   14840:	mov	r6, r0
   14844:	ldrh	r0, [r0, #48]	; 0x30
   14848:	mov	r4, r1
   1484c:	movw	r1, #258	; 0x102
   14850:	tst	r0, r1
   14854:	beq	148c4 <__assert_fail@plt+0x33d4>
   14858:	mov	r0, #24
   1485c:	bl	18ab8 <__assert_fail@plt+0x75c8>
   14860:	mov	r5, #0
   14864:	cmp	r0, #0
   14868:	beq	148e4 <__assert_fail@plt+0x33f4>
   1486c:	mov	r7, r0
   14870:	ldrd	r0, [r4, #64]	; 0x40
   14874:	add	r2, r7, #8
   14878:	stm	r7, {r0, r1}
   1487c:	ldrd	r0, [r4, #160]	; 0xa0
   14880:	stm	r2, {r0, r1, r4}
   14884:	mov	r1, r7
   14888:	ldr	r0, [r6, #56]	; 0x38
   1488c:	bl	15ae8 <__assert_fail@plt+0x45f8>
   14890:	cmp	r0, r7
   14894:	beq	148bc <__assert_fail@plt+0x33cc>
   14898:	mov	r6, r0
   1489c:	mov	r0, r7
   148a0:	bl	12cb0 <__assert_fail@plt+0x17c0>
   148a4:	cmp	r6, #0
   148a8:	beq	148e4 <__assert_fail@plt+0x33f4>
   148ac:	ldr	r0, [r6, #16]
   148b0:	mov	r1, #2
   148b4:	strh	r1, [r4, #56]	; 0x38
   148b8:	str	r0, [r4]
   148bc:	mov	r5, #1
   148c0:	b	148e4 <__assert_fail@plt+0x33f4>
   148c4:	ldr	r0, [r6, #56]	; 0x38
   148c8:	add	r1, r4, #64	; 0x40
   148cc:	bl	18bd4 <__assert_fail@plt+0x76e4>
   148d0:	cmp	r0, #0
   148d4:	mov	r5, #1
   148d8:	movne	r0, #2
   148dc:	strhne	r0, [r4, #56]	; 0x38
   148e0:	strne	r4, [r4]
   148e4:	mov	r0, r5
   148e8:	pop	{r4, r5, r6, r7, fp, pc}
   148ec:	push	{r4, r5, fp, lr}
   148f0:	add	fp, sp, #8
   148f4:	mov	r4, r1
   148f8:	ldr	r1, [r0, #32]
   148fc:	mov	r5, r0
   14900:	cmp	r1, r4
   14904:	bne	14910 <__assert_fail@plt+0x3420>
   14908:	cmn	r1, #100	; 0x64
   1490c:	bne	14950 <__assert_fail@plt+0x3460>
   14910:	cmp	r2, #0
   14914:	beq	1492c <__assert_fail@plt+0x343c>
   14918:	add	r0, r5, #60	; 0x3c
   1491c:	bl	15c74 <__assert_fail@plt+0x4784>
   14920:	cmp	r0, #0
   14924:	bge	14944 <__assert_fail@plt+0x3454>
   14928:	b	14948 <__assert_fail@plt+0x3458>
   1492c:	cmp	r1, #0
   14930:	blt	14948 <__assert_fail@plt+0x3458>
   14934:	ldr	r0, [r5, #48]	; 0x30
   14938:	ands	r0, r0, #4
   1493c:	bne	14948 <__assert_fail@plt+0x3458>
   14940:	mov	r0, r1
   14944:	bl	114b4 <close@plt>
   14948:	str	r4, [r5, #32]
   1494c:	pop	{r4, r5, fp, pc}
   14950:	bl	114a8 <abort@plt>
   14954:	cmp	r2, #5
   14958:	movcc	r0, #0
   1495c:	strhcc	r2, [r1, #60]	; 0x3c
   14960:	bxcc	lr
   14964:	push	{fp, lr}
   14968:	mov	fp, sp
   1496c:	bl	11394 <__errno_location@plt>
   14970:	mov	r1, #22
   14974:	str	r1, [r0]
   14978:	mov	r0, #1
   1497c:	pop	{fp, pc}
   14980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14984:	add	fp, sp, #28
   14988:	sub	sp, sp, #4
   1498c:	mov	r5, r0
   14990:	orr	r0, r1, #4096	; 0x1000
   14994:	cmp	r0, #4096	; 0x1000
   14998:	bne	149d8 <__assert_fail@plt+0x34e8>
   1499c:	ldr	r6, [r5]
   149a0:	mov	r7, r1
   149a4:	bl	11394 <__errno_location@plt>
   149a8:	mov	r4, #0
   149ac:	mov	sl, r0
   149b0:	str	r4, [r0]
   149b4:	ldrb	r0, [r5, #49]	; 0x31
   149b8:	tst	r0, #32
   149bc:	bne	149e8 <__assert_fail@plt+0x34f8>
   149c0:	ldrh	r0, [r6, #56]	; 0x38
   149c4:	cmp	r0, #1
   149c8:	beq	149f4 <__assert_fail@plt+0x3504>
   149cc:	cmp	r0, #9
   149d0:	ldreq	r4, [r6, #8]
   149d4:	b	149e8 <__assert_fail@plt+0x34f8>
   149d8:	bl	11394 <__errno_location@plt>
   149dc:	mov	r1, #22
   149e0:	mov	r4, #0
   149e4:	str	r1, [r0]
   149e8:	mov	r0, r4
   149ec:	sub	sp, fp, #28
   149f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149f4:	ldr	r0, [r5, #4]
   149f8:	cmp	r0, #0
   149fc:	blne	133d0 <__assert_fail@plt+0x1ee0>
   14a00:	cmp	r7, #4096	; 0x1000
   14a04:	mov	r9, #1
   14a08:	ldreq	r0, [r5, #48]	; 0x30
   14a0c:	moveq	r9, #2
   14a10:	orreq	r0, r0, #4096	; 0x1000
   14a14:	streq	r0, [r5, #48]	; 0x30
   14a18:	ldr	r0, [r6, #48]	; 0x30
   14a1c:	cmp	r0, #0
   14a20:	bne	14a9c <__assert_fail@plt+0x35ac>
   14a24:	ldr	r0, [r6, #24]
   14a28:	ldrb	r0, [r0]
   14a2c:	cmp	r0, #47	; 0x2f
   14a30:	beq	14a9c <__assert_fail@plt+0x35ac>
   14a34:	ldrb	r0, [r5, #48]	; 0x30
   14a38:	tst	r0, #4
   14a3c:	bne	14a9c <__assert_fail@plt+0x35ac>
   14a40:	movw	r1, #41660	; 0xa2bc
   14a44:	mov	r0, r5
   14a48:	movt	r1, #1
   14a4c:	bl	133a0 <__assert_fail@plt+0x1eb0>
   14a50:	cmn	r0, #1
   14a54:	ble	14ab4 <__assert_fail@plt+0x35c4>
   14a58:	mov	r8, r0
   14a5c:	mov	r0, r5
   14a60:	mov	r1, r9
   14a64:	bl	13e48 <__assert_fail@plt+0x2958>
   14a68:	str	r0, [r5, #4]
   14a6c:	ldrb	r0, [r5, #49]	; 0x31
   14a70:	tst	r0, #2
   14a74:	bne	14ac0 <__assert_fail@plt+0x35d0>
   14a78:	mov	r0, r8
   14a7c:	bl	11454 <fchdir@plt>
   14a80:	cmp	r0, #0
   14a84:	beq	14ad4 <__assert_fail@plt+0x35e4>
   14a88:	ldr	r5, [sl]
   14a8c:	mov	r0, r8
   14a90:	bl	114b4 <close@plt>
   14a94:	str	r5, [sl]
   14a98:	b	149e8 <__assert_fail@plt+0x34f8>
   14a9c:	mov	r0, r5
   14aa0:	mov	r1, r9
   14aa4:	bl	13e48 <__assert_fail@plt+0x2958>
   14aa8:	mov	r4, r0
   14aac:	str	r0, [r5, #4]
   14ab0:	b	149e8 <__assert_fail@plt+0x34f8>
   14ab4:	mov	r4, #0
   14ab8:	str	r4, [r5, #4]
   14abc:	b	149e8 <__assert_fail@plt+0x34f8>
   14ac0:	mov	r0, r5
   14ac4:	mov	r1, r8
   14ac8:	mov	r2, #1
   14acc:	bl	148ec <__assert_fail@plt+0x33fc>
   14ad0:	b	14adc <__assert_fail@plt+0x35ec>
   14ad4:	mov	r0, r8
   14ad8:	bl	114b4 <close@plt>
   14adc:	ldr	r4, [r5, #4]
   14ae0:	b	149e8 <__assert_fail@plt+0x34f8>
   14ae4:	push	{fp, lr}
   14ae8:	mov	fp, sp
   14aec:	mov	r2, r1
   14af0:	ldrd	r0, [r0, #8]
   14af4:	mov	r3, #0
   14af8:	bl	19238 <__assert_fail@plt+0x7d48>
   14afc:	mov	r0, r2
   14b00:	pop	{fp, pc}
   14b04:	push	{r4, r5, fp, lr}
   14b08:	add	fp, sp, #8
   14b0c:	ldrd	r2, [r1, #8]
   14b10:	ldrd	r4, [r0, #8]
   14b14:	eor	r3, r5, r3
   14b18:	eor	r2, r4, r2
   14b1c:	orrs	r2, r2, r3
   14b20:	mov	r2, #0
   14b24:	bne	14b44 <__assert_fail@plt+0x3654>
   14b28:	ldrd	r2, [r1]
   14b2c:	ldrd	r0, [r0]
   14b30:	eor	r1, r1, r3
   14b34:	eor	r0, r0, r2
   14b38:	orr	r0, r0, r1
   14b3c:	clz	r0, r0
   14b40:	lsr	r2, r0, #5
   14b44:	mov	r0, r2
   14b48:	pop	{r4, r5, fp, pc}
   14b4c:	push	{r4, r5, fp, lr}
   14b50:	add	fp, sp, #8
   14b54:	ldr	r0, [r0]
   14b58:	ldrd	r2, [r0, #160]	; 0xa0
   14b5c:	ldr	r0, [r1]
   14b60:	ldrd	r4, [r0, #160]	; 0xa0
   14b64:	mov	r0, #0
   14b68:	subs	r1, r4, r2
   14b6c:	sbcs	r1, r5, r3
   14b70:	movwcc	r0, #1
   14b74:	subs	r1, r2, r4
   14b78:	sbcs	r1, r3, r5
   14b7c:	subcc	r0, r0, #1
   14b80:	pop	{r4, r5, fp, pc}
   14b84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b88:	add	fp, sp, #24
   14b8c:	sub	sp, sp, #96	; 0x60
   14b90:	ldr	r7, [r0, #44]	; 0x2c
   14b94:	mov	r4, r0
   14b98:	mov	r5, #0
   14b9c:	ldrb	r0, [r7, #49]	; 0x31
   14ba0:	tst	r0, #2
   14ba4:	beq	14c98 <__assert_fail@plt+0x37a8>
   14ba8:	ldr	r6, [r7, #52]	; 0x34
   14bac:	mov	r9, r1
   14bb0:	cmp	r6, #0
   14bb4:	bne	14bf4 <__assert_fail@plt+0x3704>
   14bb8:	movw	r0, #11440	; 0x2cb0
   14bbc:	movw	r2, #19620	; 0x4ca4
   14bc0:	movw	r3, #19652	; 0x4cc4
   14bc4:	mov	r1, #0
   14bc8:	mov	r8, #0
   14bcc:	movt	r0, #1
   14bd0:	movt	r2, #1
   14bd4:	movt	r3, #1
   14bd8:	str	r0, [sp]
   14bdc:	mov	r0, #13
   14be0:	bl	15160 <__assert_fail@plt+0x3c70>
   14be4:	mov	r6, r0
   14be8:	cmp	r0, #0
   14bec:	str	r0, [r7, #52]	; 0x34
   14bf0:	beq	14c24 <__assert_fail@plt+0x3734>
   14bf4:	ldrd	r0, [r4, #64]	; 0x40
   14bf8:	str	r1, [sp, #12]
   14bfc:	str	r0, [sp, #8]
   14c00:	add	r1, sp, #8
   14c04:	mov	r0, r6
   14c08:	bl	14ec0 <__assert_fail@plt+0x39d0>
   14c0c:	cmp	r0, #0
   14c10:	beq	14c1c <__assert_fail@plt+0x372c>
   14c14:	ldr	r5, [r0, #8]
   14c18:	b	14c98 <__assert_fail@plt+0x37a8>
   14c1c:	mov	r8, #1
   14c20:	b	14c28 <__assert_fail@plt+0x3738>
   14c24:	mov	r6, #0
   14c28:	cmp	r9, #0
   14c2c:	blt	14c98 <__assert_fail@plt+0x37a8>
   14c30:	add	r1, sp, #8
   14c34:	mov	r0, r9
   14c38:	bl	111c0 <fstatfs64@plt>
   14c3c:	cmp	r0, #0
   14c40:	bne	14c98 <__assert_fail@plt+0x37a8>
   14c44:	cmp	r8, #0
   14c48:	beq	14c94 <__assert_fail@plt+0x37a4>
   14c4c:	mov	r0, #16
   14c50:	bl	18ab8 <__assert_fail@plt+0x75c8>
   14c54:	cmp	r0, #0
   14c58:	beq	14c94 <__assert_fail@plt+0x37a4>
   14c5c:	mov	r5, r0
   14c60:	ldrd	r0, [r4, #64]	; 0x40
   14c64:	ldr	r2, [sp, #8]
   14c68:	stm	r5, {r0, r1, r2}
   14c6c:	mov	r0, r6
   14c70:	mov	r1, r5
   14c74:	bl	15ae8 <__assert_fail@plt+0x45f8>
   14c78:	cmp	r0, #0
   14c7c:	beq	14c8c <__assert_fail@plt+0x379c>
   14c80:	cmp	r0, r5
   14c84:	beq	14c94 <__assert_fail@plt+0x37a4>
   14c88:	bl	114a8 <abort@plt>
   14c8c:	mov	r0, r5
   14c90:	bl	12cb0 <__assert_fail@plt+0x17c0>
   14c94:	ldr	r5, [sp, #8]
   14c98:	mov	r0, r5
   14c9c:	sub	sp, fp, #24
   14ca0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ca4:	push	{fp, lr}
   14ca8:	mov	fp, sp
   14cac:	mov	r2, r1
   14cb0:	ldrd	r0, [r0]
   14cb4:	mov	r3, #0
   14cb8:	bl	19238 <__assert_fail@plt+0x7d48>
   14cbc:	mov	r0, r2
   14cc0:	pop	{fp, pc}
   14cc4:	ldrd	r2, [r1]
   14cc8:	ldrd	r0, [r0]
   14ccc:	eor	r1, r1, r3
   14cd0:	eor	r0, r0, r2
   14cd4:	orr	r0, r0, r1
   14cd8:	clz	r0, r0
   14cdc:	lsr	r0, r0, #5
   14ce0:	bx	lr
   14ce4:	andeq	r0, r0, r0
   14ce8:	ldr	r0, [r0, #8]
   14cec:	bx	lr
   14cf0:	ldr	r0, [r0, #12]
   14cf4:	bx	lr
   14cf8:	ldr	r0, [r0, #16]
   14cfc:	bx	lr
   14d00:	ldm	r0, {r2, ip}
   14d04:	mov	r0, #0
   14d08:	cmp	r2, ip
   14d0c:	bxcs	lr
   14d10:	mov	r0, #0
   14d14:	ldr	r1, [r2]
   14d18:	cmp	r1, #0
   14d1c:	beq	14d40 <__assert_fail@plt+0x3850>
   14d20:	mov	r3, #0
   14d24:	mov	r1, r2
   14d28:	ldr	r1, [r1, #4]
   14d2c:	add	r3, r3, #1
   14d30:	cmp	r1, #0
   14d34:	bne	14d28 <__assert_fail@plt+0x3838>
   14d38:	cmp	r3, r0
   14d3c:	movhi	r0, r3
   14d40:	add	r2, r2, #8
   14d44:	cmp	r2, ip
   14d48:	bcc	14d14 <__assert_fail@plt+0x3824>
   14d4c:	bx	lr
   14d50:	push	{fp, lr}
   14d54:	mov	fp, sp
   14d58:	ldm	r0, {r3, ip}
   14d5c:	mov	lr, #0
   14d60:	mov	r1, #0
   14d64:	cmp	r3, ip
   14d68:	bcs	14da4 <__assert_fail@plt+0x38b4>
   14d6c:	mov	r1, #0
   14d70:	mov	lr, #0
   14d74:	ldr	r2, [r3]
   14d78:	cmp	r2, #0
   14d7c:	beq	14d98 <__assert_fail@plt+0x38a8>
   14d80:	mov	r2, r3
   14d84:	ldr	r2, [r2, #4]
   14d88:	add	r1, r1, #1
   14d8c:	cmp	r2, #0
   14d90:	bne	14d84 <__assert_fail@plt+0x3894>
   14d94:	add	lr, lr, #1
   14d98:	add	r3, r3, #8
   14d9c:	cmp	r3, ip
   14da0:	bcc	14d74 <__assert_fail@plt+0x3884>
   14da4:	ldr	r2, [r0, #12]
   14da8:	cmp	lr, r2
   14dac:	bne	14dc4 <__assert_fail@plt+0x38d4>
   14db0:	ldr	r2, [r0, #16]
   14db4:	mov	r0, #1
   14db8:	cmp	r1, r2
   14dbc:	movne	r0, #0
   14dc0:	pop	{fp, pc}
   14dc4:	mov	r0, #0
   14dc8:	pop	{fp, pc}
   14dcc:	nop	{0}
   14dd0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14dd4:	add	fp, sp, #24
   14dd8:	sub	sp, sp, #8
   14ddc:	ldr	r6, [r0]
   14de0:	ldmib	r0, {r2, r7, r8}
   14de4:	ldr	r3, [r0, #16]
   14de8:	mov	r4, r1
   14dec:	mov	r5, #0
   14df0:	cmp	r6, r2
   14df4:	bcs	14e34 <__assert_fail@plt+0x3944>
   14df8:	mov	r5, #0
   14dfc:	ldr	r0, [r6]
   14e00:	cmp	r0, #0
   14e04:	beq	14e28 <__assert_fail@plt+0x3938>
   14e08:	mov	r0, #0
   14e0c:	mov	r1, r6
   14e10:	ldr	r1, [r1, #4]
   14e14:	add	r0, r0, #1
   14e18:	cmp	r1, #0
   14e1c:	bne	14e10 <__assert_fail@plt+0x3920>
   14e20:	cmp	r0, r5
   14e24:	movhi	r5, r0
   14e28:	add	r6, r6, #8
   14e2c:	cmp	r6, r2
   14e30:	bcc	14dfc <__assert_fail@plt+0x390c>
   14e34:	movw	r2, #41712	; 0xa2f0
   14e38:	mov	r0, r4
   14e3c:	mov	r1, #1
   14e40:	movt	r2, #1
   14e44:	bl	113dc <__fprintf_chk@plt>
   14e48:	movw	r2, #41736	; 0xa308
   14e4c:	mov	r0, r4
   14e50:	mov	r1, #1
   14e54:	mov	r3, r7
   14e58:	movt	r2, #1
   14e5c:	bl	113dc <__fprintf_chk@plt>
   14e60:	vldr	d16, [pc, #80]	; 14eb8 <__assert_fail@plt+0x39c8>
   14e64:	vmov	s0, r8
   14e68:	movw	r2, #41760	; 0xa320
   14e6c:	mov	r0, r4
   14e70:	mov	r1, #1
   14e74:	mov	r3, r8
   14e78:	vcvt.f64.u32	d17, s0
   14e7c:	vmov	s0, r7
   14e80:	movt	r2, #1
   14e84:	vcvt.f64.u32	d18, s0
   14e88:	vmul.f64	d16, d17, d16
   14e8c:	vdiv.f64	d16, d16, d18
   14e90:	vstr	d16, [sp]
   14e94:	bl	113dc <__fprintf_chk@plt>
   14e98:	movw	r2, #41793	; 0xa341
   14e9c:	mov	r0, r4
   14ea0:	mov	r1, #1
   14ea4:	mov	r3, r5
   14ea8:	movt	r2, #1
   14eac:	sub	sp, fp, #24
   14eb0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14eb4:	b	113dc <__fprintf_chk@plt>
   14eb8:	andeq	r0, r0, r0
   14ebc:	subsmi	r0, r9, r0
   14ec0:	push	{r4, r5, r6, r7, fp, lr}
   14ec4:	add	fp, sp, #16
   14ec8:	mov	r4, r1
   14ecc:	ldr	r1, [r0, #8]
   14ed0:	ldr	r2, [r0, #24]
   14ed4:	mov	r5, r0
   14ed8:	mov	r0, r4
   14edc:	blx	r2
   14ee0:	ldr	r1, [r5, #8]
   14ee4:	cmp	r0, r1
   14ee8:	bcs	14f48 <__assert_fail@plt+0x3a58>
   14eec:	ldr	r7, [r5]
   14ef0:	mov	r6, #0
   14ef4:	ldr	r1, [r7, r0, lsl #3]!
   14ef8:	cmp	r1, #0
   14efc:	cmpne	r7, #0
   14f00:	bne	14f30 <__assert_fail@plt+0x3a40>
   14f04:	mov	r0, r6
   14f08:	pop	{r4, r5, r6, r7, fp, pc}
   14f0c:	ldr	r2, [r5, #28]
   14f10:	mov	r0, r4
   14f14:	blx	r2
   14f18:	cmp	r0, #0
   14f1c:	bne	14f40 <__assert_fail@plt+0x3a50>
   14f20:	ldr	r7, [r7, #4]
   14f24:	cmp	r7, #0
   14f28:	beq	14f04 <__assert_fail@plt+0x3a14>
   14f2c:	ldr	r1, [r7]
   14f30:	cmp	r1, r4
   14f34:	bne	14f0c <__assert_fail@plt+0x3a1c>
   14f38:	mov	r6, r4
   14f3c:	b	14f04 <__assert_fail@plt+0x3a14>
   14f40:	ldr	r6, [r7]
   14f44:	b	14f04 <__assert_fail@plt+0x3a14>
   14f48:	bl	114a8 <abort@plt>
   14f4c:	ldr	r1, [r0, #16]
   14f50:	cmp	r1, #0
   14f54:	moveq	r0, #0
   14f58:	bxeq	lr
   14f5c:	ldm	r0, {r1, r2}
   14f60:	b	14f70 <__assert_fail@plt+0x3a80>
   14f64:	ldr	r0, [r1], #8
   14f68:	cmp	r0, #0
   14f6c:	bxne	lr
   14f70:	cmp	r1, r2
   14f74:	bcc	14f64 <__assert_fail@plt+0x3a74>
   14f78:	push	{fp, lr}
   14f7c:	mov	fp, sp
   14f80:	bl	114a8 <abort@plt>
   14f84:	push	{r4, r5, fp, lr}
   14f88:	add	fp, sp, #8
   14f8c:	mov	r5, r1
   14f90:	ldr	r1, [r0, #8]
   14f94:	ldr	r2, [r0, #24]
   14f98:	mov	r4, r0
   14f9c:	mov	r0, r5
   14fa0:	blx	r2
   14fa4:	ldr	r1, [r4, #8]
   14fa8:	cmp	r0, r1
   14fac:	bcs	15008 <__assert_fail@plt+0x3b18>
   14fb0:	ldr	r1, [r4]
   14fb4:	add	r2, r1, r0, lsl #3
   14fb8:	ldr	r3, [r2]
   14fbc:	ldr	r2, [r2, #4]
   14fc0:	cmp	r3, r5
   14fc4:	beq	14fd4 <__assert_fail@plt+0x3ae4>
   14fc8:	cmp	r2, #0
   14fcc:	bne	14fb8 <__assert_fail@plt+0x3ac8>
   14fd0:	b	14fe0 <__assert_fail@plt+0x3af0>
   14fd4:	cmp	r2, #0
   14fd8:	ldrne	r0, [r2]
   14fdc:	popne	{r4, r5, fp, pc}
   14fe0:	ldr	r2, [r4, #4]
   14fe4:	add	r0, r1, r0, lsl #3
   14fe8:	add	r1, r0, #8
   14fec:	cmp	r1, r2
   14ff0:	movcs	r0, #0
   14ff4:	popcs	{r4, r5, fp, pc}
   14ff8:	ldr	r0, [r1], #8
   14ffc:	cmp	r0, #0
   15000:	popne	{r4, r5, fp, pc}
   15004:	b	14fec <__assert_fail@plt+0x3afc>
   15008:	bl	114a8 <abort@plt>
   1500c:	push	{r4, r5, fp, lr}
   15010:	add	fp, sp, #8
   15014:	ldm	r0, {r5, lr}
   15018:	mov	ip, r0
   1501c:	mov	r0, #0
   15020:	cmp	r5, lr
   15024:	bcs	15070 <__assert_fail@plt+0x3b80>
   15028:	mov	r0, #0
   1502c:	ldr	r3, [r5]
   15030:	cmp	r3, #0
   15034:	cmpne	r5, #0
   15038:	beq	15064 <__assert_fail@plt+0x3b74>
   1503c:	mov	r3, r5
   15040:	cmp	r0, r2
   15044:	popcs	{r4, r5, fp, pc}
   15048:	ldr	r4, [r3]
   1504c:	str	r4, [r1, r0, lsl #2]
   15050:	add	r0, r0, #1
   15054:	ldr	r3, [r3, #4]
   15058:	cmp	r3, #0
   1505c:	bne	15040 <__assert_fail@plt+0x3b50>
   15060:	ldr	lr, [ip, #4]
   15064:	add	r5, r5, #8
   15068:	cmp	r5, lr
   1506c:	bcc	1502c <__assert_fail@plt+0x3b3c>
   15070:	pop	{r4, r5, fp, pc}
   15074:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15078:	add	fp, sp, #24
   1507c:	mov	r5, r1
   15080:	ldr	r4, [r0]
   15084:	ldr	r1, [r0, #4]
   15088:	mov	r6, #0
   1508c:	cmp	r4, r1
   15090:	bcs	15104 <__assert_fail@plt+0x3c14>
   15094:	mov	r9, r2
   15098:	mov	r8, r0
   1509c:	mov	r6, #0
   150a0:	b	150e8 <__assert_fail@plt+0x3bf8>
   150a4:	mov	r1, r9
   150a8:	blx	r5
   150ac:	cmp	r0, #0
   150b0:	beq	15104 <__assert_fail@plt+0x3c14>
   150b4:	mov	r7, r4
   150b8:	ldr	r7, [r7, #4]
   150bc:	add	r6, r6, #1
   150c0:	cmp	r7, #0
   150c4:	beq	150e0 <__assert_fail@plt+0x3bf0>
   150c8:	ldr	r0, [r7]
   150cc:	mov	r1, r9
   150d0:	blx	r5
   150d4:	cmp	r0, #0
   150d8:	bne	150b8 <__assert_fail@plt+0x3bc8>
   150dc:	b	15104 <__assert_fail@plt+0x3c14>
   150e0:	ldr	r1, [r8, #4]
   150e4:	b	150f8 <__assert_fail@plt+0x3c08>
   150e8:	ldr	r0, [r4]
   150ec:	cmp	r0, #0
   150f0:	cmpne	r4, #0
   150f4:	bne	150a4 <__assert_fail@plt+0x3bb4>
   150f8:	add	r4, r4, #8
   150fc:	cmp	r4, r1
   15100:	bcc	150e8 <__assert_fail@plt+0x3bf8>
   15104:	mov	r0, r6
   15108:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1510c:	ldrb	r2, [r0]
   15110:	cmp	r2, #0
   15114:	moveq	r0, #0
   15118:	bxeq	lr
   1511c:	add	r3, r0, #1
   15120:	mov	r0, #0
   15124:	rsb	r0, r0, r0, lsl #5
   15128:	uxtab	r0, r0, r2
   1512c:	udiv	r2, r0, r1
   15130:	mls	r0, r2, r1, r0
   15134:	ldrb	r2, [r3], #1
   15138:	cmp	r2, #0
   1513c:	bne	15124 <__assert_fail@plt+0x3c34>
   15140:	bx	lr
   15144:	movw	r1, #41824	; 0xa360
   15148:	movt	r1, #1
   1514c:	vld1.32	{d16-d17}, [r1]!
   15150:	ldr	r1, [r1]
   15154:	vst1.32	{d16-d17}, [r0]!
   15158:	str	r1, [r0]
   1515c:	bx	lr
   15160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15164:	add	fp, sp, #28
   15168:	sub	sp, sp, #4
   1516c:	movw	sl, #21076	; 0x5254
   15170:	movw	r5, #21056	; 0x5240
   15174:	cmp	r3, #0
   15178:	mov	r8, r0
   1517c:	mov	r0, #40	; 0x28
   15180:	mov	r7, r1
   15184:	movt	sl, #1
   15188:	movt	r5, #1
   1518c:	movne	sl, r3
   15190:	cmp	r2, #0
   15194:	movne	r5, r2
   15198:	bl	18ab8 <__assert_fail@plt+0x75c8>
   1519c:	mov	r9, #0
   151a0:	cmp	r0, #0
   151a4:	beq	15234 <__assert_fail@plt+0x3d44>
   151a8:	movw	r6, #41824	; 0xa360
   151ac:	cmp	r7, #0
   151b0:	mov	r4, r0
   151b4:	movt	r6, #1
   151b8:	movne	r6, r7
   151bc:	str	r6, [r0, #20]
   151c0:	bl	15264 <__assert_fail@plt+0x3d74>
   151c4:	cmp	r0, #0
   151c8:	beq	1522c <__assert_fail@plt+0x3d3c>
   151cc:	mov	r0, r8
   151d0:	mov	r1, r6
   151d4:	bl	15310 <__assert_fail@plt+0x3e20>
   151d8:	cmp	r0, #0
   151dc:	str	r0, [r4, #8]
   151e0:	beq	1522c <__assert_fail@plt+0x3d3c>
   151e4:	mov	r1, #8
   151e8:	bl	18a64 <__assert_fail@plt+0x7574>
   151ec:	cmp	r0, #0
   151f0:	str	r0, [r4]
   151f4:	beq	1522c <__assert_fail@plt+0x3d3c>
   151f8:	ldr	r1, [fp, #8]
   151fc:	mov	r2, #0
   15200:	mov	r9, r4
   15204:	str	r2, [r4, #12]
   15208:	str	r2, [r4, #16]
   1520c:	str	r5, [r4, #24]
   15210:	str	sl, [r4, #28]
   15214:	str	r1, [r4, #32]
   15218:	str	r2, [r4, #36]	; 0x24
   1521c:	ldr	r1, [r4, #8]
   15220:	add	r0, r0, r1, lsl #3
   15224:	str	r0, [r4, #4]
   15228:	b	15234 <__assert_fail@plt+0x3d44>
   1522c:	mov	r0, r4
   15230:	bl	12cb0 <__assert_fail@plt+0x17c0>
   15234:	mov	r0, r9
   15238:	sub	sp, fp, #28
   1523c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15240:	ror	r2, r0, #3
   15244:	udiv	r2, r2, r1
   15248:	mul	r1, r2, r1
   1524c:	rsb	r0, r1, r0, ror #3
   15250:	bx	lr
   15254:	sub	r0, r0, r1
   15258:	clz	r0, r0
   1525c:	lsr	r0, r0, #5
   15260:	bx	lr
   15264:	ldr	r3, [r0, #20]
   15268:	movw	r2, #41824	; 0xa360
   1526c:	mov	r1, r0
   15270:	mov	r0, #1
   15274:	movt	r2, #1
   15278:	cmp	r3, r2
   1527c:	beq	15300 <__assert_fail@plt+0x3e10>
   15280:	vldr	s2, [pc, #124]	; 15304 <__assert_fail@plt+0x3e14>
   15284:	vldr	s0, [r3, #8]
   15288:	vcmpe.f32	s0, s2
   1528c:	vmrs	APSR_nzcv, fpscr
   15290:	ble	152f8 <__assert_fail@plt+0x3e08>
   15294:	vldr	s4, [pc, #108]	; 15308 <__assert_fail@plt+0x3e18>
   15298:	vcmpe.f32	s0, s4
   1529c:	vmrs	APSR_nzcv, fpscr
   152a0:	bpl	152f8 <__assert_fail@plt+0x3e08>
   152a4:	vldr	s4, [pc, #96]	; 1530c <__assert_fail@plt+0x3e1c>
   152a8:	vldr	s6, [r3, #12]
   152ac:	vcmpe.f32	s6, s4
   152b0:	vmrs	APSR_nzcv, fpscr
   152b4:	ble	152f8 <__assert_fail@plt+0x3e08>
   152b8:	vldr	s4, [r3]
   152bc:	vcmpe.f32	s4, #0.0
   152c0:	vmrs	APSR_nzcv, fpscr
   152c4:	blt	152f8 <__assert_fail@plt+0x3e08>
   152c8:	vadd.f32	s2, s4, s2
   152cc:	vcmpe.f32	s2, s0
   152d0:	vmrs	APSR_nzcv, fpscr
   152d4:	bpl	152f8 <__assert_fail@plt+0x3e08>
   152d8:	vldr	s0, [r3, #4]
   152dc:	vmov.f32	s4, #112	; 0x3f800000  1.0
   152e0:	vcmpe.f32	s0, s4
   152e4:	vmrs	APSR_nzcv, fpscr
   152e8:	bhi	152f8 <__assert_fail@plt+0x3e08>
   152ec:	vcmpe.f32	s2, s0
   152f0:	vmrs	APSR_nzcv, fpscr
   152f4:	bxmi	lr
   152f8:	mov	r0, #0
   152fc:	str	r2, [r1, #20]
   15300:	bx	lr
   15304:	stclcc	12, cr12, [ip, #820]	; 0x334
   15308:	svccc	0x00666666
   1530c:	svccc	0x008ccccd
   15310:	ldrb	r2, [r1, #16]
   15314:	cmp	r2, #0
   15318:	bne	15348 <__assert_fail@plt+0x3e58>
   1531c:	vldr	s0, [r1, #8]
   15320:	vldr	s4, [pc, #160]	; 153c8 <__assert_fail@plt+0x3ed8>
   15324:	vmov	s2, r0
   15328:	mov	r0, #0
   1532c:	vcvt.f32.u32	s2, s2
   15330:	vdiv.f32	s2, s2, s0
   15334:	vcmpe.f32	s2, s4
   15338:	vcvt.u32.f32	s0, s2
   1533c:	vmrs	APSR_nzcv, fpscr
   15340:	bxge	lr
   15344:	vmov	r0, s0
   15348:	cmp	r0, #10
   1534c:	movls	r0, #10
   15350:	orr	r0, r0, #1
   15354:	b	153ac <__assert_fail@plt+0x3ebc>
   15358:	mov	r1, #3
   1535c:	cmp	r0, #10
   15360:	bcc	15398 <__assert_fail@plt+0x3ea8>
   15364:	mov	r1, #3
   15368:	mov	ip, #9
   1536c:	mov	r2, #12
   15370:	udiv	r3, r0, r1
   15374:	mls	r3, r3, r1, r0
   15378:	cmp	r3, #0
   1537c:	beq	15398 <__assert_fail@plt+0x3ea8>
   15380:	add	r3, ip, r2
   15384:	add	r2, r2, #8
   15388:	add	r1, r1, #2
   1538c:	add	ip, r3, #4
   15390:	cmp	ip, r0
   15394:	bcc	15370 <__assert_fail@plt+0x3e80>
   15398:	udiv	r2, r0, r1
   1539c:	mls	r1, r2, r1, r0
   153a0:	cmp	r1, #0
   153a4:	bne	153bc <__assert_fail@plt+0x3ecc>
   153a8:	add	r0, r0, #2
   153ac:	cmn	r0, #1
   153b0:	bne	15358 <__assert_fail@plt+0x3e68>
   153b4:	mov	r0, #0
   153b8:	bx	lr
   153bc:	cmp	r0, #536870912	; 0x20000000
   153c0:	movcs	r0, #0
   153c4:	bx	lr
   153c8:	svcmi	0x00800000
   153cc:	push	{r4, r5, r6, r7, fp, lr}
   153d0:	add	fp, sp, #16
   153d4:	mov	r4, r0
   153d8:	ldr	r5, [r0]
   153dc:	ldr	r0, [r0, #4]
   153e0:	cmp	r5, r0
   153e4:	bcs	1547c <__assert_fail@plt+0x3f8c>
   153e8:	mov	r6, #0
   153ec:	ldr	r1, [r5]
   153f0:	cmp	r1, #0
   153f4:	beq	15470 <__assert_fail@plt+0x3f80>
   153f8:	ldr	r1, [r4, #32]
   153fc:	ldr	r7, [r5, #4]
   15400:	cmp	r1, #0
   15404:	mov	r0, r1
   15408:	movwne	r0, #1
   1540c:	cmp	r7, #0
   15410:	beq	15454 <__assert_fail@plt+0x3f64>
   15414:	tst	r0, #1
   15418:	beq	15428 <__assert_fail@plt+0x3f38>
   1541c:	ldr	r0, [r7]
   15420:	blx	r1
   15424:	ldr	r1, [r4, #32]
   15428:	str	r6, [r7]
   1542c:	cmp	r1, #0
   15430:	ldr	r0, [r4, #36]	; 0x24
   15434:	ldr	r2, [r7, #4]
   15438:	str	r0, [r7, #4]
   1543c:	mov	r0, r1
   15440:	str	r7, [r4, #36]	; 0x24
   15444:	mov	r7, r2
   15448:	movwne	r0, #1
   1544c:	cmp	r2, #0
   15450:	bne	15414 <__assert_fail@plt+0x3f24>
   15454:	cmp	r0, #0
   15458:	beq	15464 <__assert_fail@plt+0x3f74>
   1545c:	ldr	r0, [r5]
   15460:	blx	r1
   15464:	str	r6, [r5]
   15468:	str	r6, [r5, #4]
   1546c:	ldr	r0, [r4, #4]
   15470:	add	r5, r5, #8
   15474:	cmp	r5, r0
   15478:	bcc	153ec <__assert_fail@plt+0x3efc>
   1547c:	mov	r0, #0
   15480:	str	r0, [r4, #12]
   15484:	str	r0, [r4, #16]
   15488:	pop	{r4, r5, r6, r7, fp, pc}
   1548c:	push	{r4, r5, r6, sl, fp, lr}
   15490:	add	fp, sp, #16
   15494:	mov	r4, r0
   15498:	ldr	r0, [r0, #32]
   1549c:	cmp	r0, #0
   154a0:	ldrne	r0, [r4, #16]
   154a4:	cmpne	r0, #0
   154a8:	beq	15500 <__assert_fail@plt+0x4010>
   154ac:	ldr	r5, [r4]
   154b0:	ldr	r1, [r4, #4]
   154b4:	b	154f8 <__assert_fail@plt+0x4008>
   154b8:	ldr	r0, [r5]
   154bc:	cmp	r0, #0
   154c0:	cmpne	r5, #0
   154c4:	beq	154f4 <__assert_fail@plt+0x4004>
   154c8:	ldr	r1, [r4, #32]
   154cc:	blx	r1
   154d0:	ldr	r6, [r5, #4]
   154d4:	b	154e8 <__assert_fail@plt+0x3ff8>
   154d8:	ldr	r1, [r4, #32]
   154dc:	ldr	r0, [r6]
   154e0:	blx	r1
   154e4:	ldr	r6, [r6, #4]
   154e8:	cmp	r6, #0
   154ec:	bne	154d8 <__assert_fail@plt+0x3fe8>
   154f0:	ldr	r1, [r4, #4]
   154f4:	add	r5, r5, #8
   154f8:	cmp	r5, r1
   154fc:	bcc	154b8 <__assert_fail@plt+0x3fc8>
   15500:	ldr	r5, [r4]
   15504:	ldr	r1, [r4, #4]
   15508:	b	15534 <__assert_fail@plt+0x4044>
   1550c:	ldr	r0, [r5, #4]
   15510:	cmp	r0, #0
   15514:	beq	15530 <__assert_fail@plt+0x4040>
   15518:	ldr	r6, [r0, #4]
   1551c:	bl	12cb0 <__assert_fail@plt+0x17c0>
   15520:	cmp	r6, #0
   15524:	mov	r0, r6
   15528:	bne	15518 <__assert_fail@plt+0x4028>
   1552c:	ldr	r1, [r4, #4]
   15530:	add	r5, r5, #8
   15534:	cmp	r5, r1
   15538:	bcc	1550c <__assert_fail@plt+0x401c>
   1553c:	ldr	r0, [r4, #36]	; 0x24
   15540:	cmp	r0, #0
   15544:	beq	1555c <__assert_fail@plt+0x406c>
   15548:	ldr	r5, [r0, #4]
   1554c:	bl	12cb0 <__assert_fail@plt+0x17c0>
   15550:	cmp	r5, #0
   15554:	mov	r0, r5
   15558:	bne	15548 <__assert_fail@plt+0x4058>
   1555c:	ldr	r0, [r4]
   15560:	bl	12cb0 <__assert_fail@plt+0x17c0>
   15564:	mov	r0, r4
   15568:	pop	{r4, r5, r6, sl, fp, lr}
   1556c:	b	12cb0 <__assert_fail@plt+0x17c0>
   15570:	push	{r4, r5, r6, r7, fp, lr}
   15574:	add	fp, sp, #16
   15578:	sub	sp, sp, #40	; 0x28
   1557c:	mov	r7, r0
   15580:	mov	r2, r1
   15584:	mov	r4, r0
   15588:	ldr	r1, [r7, #20]!
   1558c:	mov	r0, r2
   15590:	bl	15310 <__assert_fail@plt+0x3e20>
   15594:	mov	r5, #0
   15598:	cmp	r0, #0
   1559c:	beq	15630 <__assert_fail@plt+0x4140>
   155a0:	mov	r6, r0
   155a4:	ldr	r0, [r4, #8]
   155a8:	cmp	r6, r0
   155ac:	beq	1562c <__assert_fail@plt+0x413c>
   155b0:	mov	r0, r6
   155b4:	mov	r1, #8
   155b8:	bl	18a64 <__assert_fail@plt+0x7574>
   155bc:	cmp	r0, #0
   155c0:	str	r0, [sp]
   155c4:	beq	15630 <__assert_fail@plt+0x4140>
   155c8:	mov	r1, #0
   155cc:	add	r0, r0, r6, lsl #3
   155d0:	str	r6, [sp, #8]
   155d4:	mov	r5, sp
   155d8:	mov	r2, #0
   155dc:	str	r1, [sp, #12]
   155e0:	str	r1, [sp, #16]
   155e4:	str	r0, [sp, #4]
   155e8:	add	r0, r5, #20
   155ec:	mov	r1, r4
   155f0:	vld1.32	{d16-d17}, [r7]
   155f4:	vst1.32	{d16-d17}, [r0]
   155f8:	ldr	r0, [r4, #36]	; 0x24
   155fc:	str	r0, [sp, #36]	; 0x24
   15600:	mov	r0, r5
   15604:	bl	15688 <__assert_fail@plt+0x4198>
   15608:	cmp	r0, #0
   1560c:	beq	1563c <__assert_fail@plt+0x414c>
   15610:	ldr	r0, [r4]
   15614:	bl	12cb0 <__assert_fail@plt+0x17c0>
   15618:	mov	r0, #36	; 0x24
   1561c:	vld1.32	{d16-d17}, [r5], r0
   15620:	vst1.32	{d16-d17}, [r4], r0
   15624:	ldr	r0, [r5]
   15628:	str	r0, [r4]
   1562c:	mov	r5, #1
   15630:	mov	r0, r5
   15634:	sub	sp, fp, #16
   15638:	pop	{r4, r5, r6, r7, fp, pc}
   1563c:	ldr	r0, [sp, #36]	; 0x24
   15640:	mov	r1, sp
   15644:	mov	r2, #1
   15648:	str	r0, [r4, #36]	; 0x24
   1564c:	mov	r0, r4
   15650:	bl	15688 <__assert_fail@plt+0x4198>
   15654:	cmp	r0, #0
   15658:	beq	15684 <__assert_fail@plt+0x4194>
   1565c:	mov	r1, sp
   15660:	mov	r0, r4
   15664:	mov	r2, #0
   15668:	mov	r5, #0
   1566c:	bl	15688 <__assert_fail@plt+0x4198>
   15670:	cmp	r0, #0
   15674:	beq	15684 <__assert_fail@plt+0x4194>
   15678:	ldr	r0, [sp]
   1567c:	bl	12cb0 <__assert_fail@plt+0x17c0>
   15680:	b	15630 <__assert_fail@plt+0x4140>
   15684:	bl	114a8 <abort@plt>
   15688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1568c:	add	fp, sp, #28
   15690:	sub	sp, sp, #12
   15694:	ldr	sl, [r1]
   15698:	str	r1, [sp, #8]
   1569c:	ldr	r1, [r1, #4]
   156a0:	mov	r7, r0
   156a4:	mov	r0, #1
   156a8:	str	r2, [sp, #4]
   156ac:	cmp	sl, r1
   156b0:	bcs	1580c <__assert_fail@plt+0x431c>
   156b4:	add	r8, r7, #36	; 0x24
   156b8:	mov	r9, #0
   156bc:	ldr	r4, [sl]
   156c0:	cmp	r4, #0
   156c4:	beq	157f4 <__assert_fail@plt+0x4304>
   156c8:	ldr	r5, [sl, #4]
   156cc:	cmp	r5, #0
   156d0:	beq	15748 <__assert_fail@plt+0x4258>
   156d4:	ldr	r1, [r7, #8]
   156d8:	ldr	r4, [r5]
   156dc:	ldr	r2, [r7, #24]
   156e0:	mov	r0, r4
   156e4:	blx	r2
   156e8:	ldr	r1, [r7, #8]
   156ec:	cmp	r0, r1
   156f0:	bcs	1581c <__assert_fail@plt+0x432c>
   156f4:	ldr	r3, [r7]
   156f8:	ldr	r2, [r5, #4]
   156fc:	ldr	r6, [r3, r0, lsl #3]
   15700:	cmp	r6, #0
   15704:	beq	15714 <__assert_fail@plt+0x4224>
   15708:	add	r0, r3, r0, lsl #3
   1570c:	add	r0, r0, #4
   15710:	b	1572c <__assert_fail@plt+0x423c>
   15714:	str	r4, [r3, r0, lsl #3]
   15718:	ldr	r0, [r7, #12]
   1571c:	add	r0, r0, #1
   15720:	str	r0, [r7, #12]
   15724:	mov	r0, r8
   15728:	str	r9, [r5]
   1572c:	ldr	r3, [r0]
   15730:	cmp	r2, #0
   15734:	str	r3, [r5, #4]
   15738:	str	r5, [r0]
   1573c:	mov	r5, r2
   15740:	bne	156d8 <__assert_fail@plt+0x41e8>
   15744:	ldr	r4, [sl]
   15748:	ldr	r0, [sp, #4]
   1574c:	str	r9, [sl, #4]
   15750:	cmp	r0, #0
   15754:	bne	157f4 <__assert_fail@plt+0x4304>
   15758:	ldr	r1, [r7, #8]
   1575c:	ldr	r2, [r7, #24]
   15760:	mov	r0, r4
   15764:	blx	r2
   15768:	mov	r5, r0
   1576c:	ldr	r0, [r7, #8]
   15770:	cmp	r5, r0
   15774:	bcs	1581c <__assert_fail@plt+0x432c>
   15778:	ldr	r6, [r7]
   1577c:	ldr	r0, [r6, r5, lsl #3]
   15780:	cmp	r0, #0
   15784:	beq	157a4 <__assert_fail@plt+0x42b4>
   15788:	ldr	r0, [r8]
   1578c:	cmp	r0, #0
   15790:	beq	157b8 <__assert_fail@plt+0x42c8>
   15794:	mov	r1, r0
   15798:	ldr	r2, [r1, #4]!
   1579c:	str	r2, [r8]
   157a0:	b	157cc <__assert_fail@plt+0x42dc>
   157a4:	str	r4, [r6, r5, lsl #3]
   157a8:	ldr	r0, [r7, #12]
   157ac:	add	r0, r0, #1
   157b0:	str	r0, [r7, #12]
   157b4:	b	157e0 <__assert_fail@plt+0x42f0>
   157b8:	mov	r0, #8
   157bc:	bl	18ab8 <__assert_fail@plt+0x75c8>
   157c0:	cmp	r0, #0
   157c4:	beq	15814 <__assert_fail@plt+0x4324>
   157c8:	add	r1, r0, #4
   157cc:	str	r4, [r0]
   157d0:	add	r2, r6, r5, lsl #3
   157d4:	ldr	r3, [r2, #4]
   157d8:	str	r3, [r1]
   157dc:	str	r0, [r2, #4]
   157e0:	ldr	r1, [sp, #8]
   157e4:	str	r9, [sl]
   157e8:	ldr	r0, [r1, #12]
   157ec:	sub	r0, r0, #1
   157f0:	str	r0, [r1, #12]
   157f4:	ldr	r0, [sp, #8]
   157f8:	add	sl, sl, #8
   157fc:	ldr	r0, [r0, #4]
   15800:	cmp	sl, r0
   15804:	bcc	156bc <__assert_fail@plt+0x41cc>
   15808:	mov	r0, #1
   1580c:	sub	sp, fp, #28
   15810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15814:	mov	r0, #0
   15818:	b	1580c <__assert_fail@plt+0x431c>
   1581c:	bl	114a8 <abort@plt>
   15820:	push	{r4, r5, r6, r7, fp, lr}
   15824:	add	fp, sp, #16
   15828:	sub	sp, sp, #8
   1582c:	cmp	r1, #0
   15830:	beq	159b0 <__assert_fail@plt+0x44c0>
   15834:	mov	r7, r2
   15838:	add	r2, sp, #4
   1583c:	mov	r3, #0
   15840:	mov	r5, r1
   15844:	mov	r4, r0
   15848:	mov	r6, #0
   1584c:	bl	159b8 <__assert_fail@plt+0x44c8>
   15850:	cmp	r0, #0
   15854:	beq	15864 <__assert_fail@plt+0x4374>
   15858:	cmp	r7, #0
   1585c:	strne	r0, [r7]
   15860:	b	1599c <__assert_fail@plt+0x44ac>
   15864:	ldr	r0, [r4, #20]
   15868:	vldr	s0, [r4, #8]
   1586c:	vldr	s2, [r4, #12]
   15870:	vldr	s4, [r0, #8]
   15874:	vcvt.f32.u32	s0, s0
   15878:	vcvt.f32.u32	s2, s2
   1587c:	vmul.f32	s0, s4, s0
   15880:	vcmpe.f32	s0, s2
   15884:	vmrs	APSR_nzcv, fpscr
   15888:	bpl	1591c <__assert_fail@plt+0x442c>
   1588c:	mov	r0, r4
   15890:	bl	15264 <__assert_fail@plt+0x3d74>
   15894:	vldr	s0, [r4, #8]
   15898:	ldr	r0, [r4, #20]
   1589c:	vldr	s4, [r4, #12]
   158a0:	vcvt.f32.u32	s2, s0
   158a4:	vldr	s0, [r0, #8]
   158a8:	vcvt.f32.u32	s4, s4
   158ac:	vmul.f32	s6, s0, s2
   158b0:	vcmpe.f32	s6, s4
   158b4:	vmrs	APSR_nzcv, fpscr
   158b8:	bpl	1591c <__assert_fail@plt+0x442c>
   158bc:	vldr	s4, [r0, #12]
   158c0:	ldrb	r0, [r0, #16]
   158c4:	mvn	r6, #0
   158c8:	vmul.f32	s2, s4, s2
   158cc:	vldr	s4, [pc, #224]	; 159b4 <__assert_fail@plt+0x44c4>
   158d0:	cmp	r0, #0
   158d4:	vmul.f32	s0, s0, s2
   158d8:	vseleq.f32	s0, s0, s2
   158dc:	vcmpe.f32	s0, s4
   158e0:	vmrs	APSR_nzcv, fpscr
   158e4:	bge	1599c <__assert_fail@plt+0x44ac>
   158e8:	vcvt.u32.f32	s0, s0
   158ec:	mov	r0, r4
   158f0:	vmov	r1, s0
   158f4:	bl	15570 <__assert_fail@plt+0x4080>
   158f8:	cmp	r0, #0
   158fc:	beq	1599c <__assert_fail@plt+0x44ac>
   15900:	add	r2, sp, #4
   15904:	mov	r0, r4
   15908:	mov	r1, r5
   1590c:	mov	r3, #0
   15910:	bl	159b8 <__assert_fail@plt+0x44c8>
   15914:	cmp	r0, #0
   15918:	bne	159b0 <__assert_fail@plt+0x44c0>
   1591c:	ldr	r6, [sp, #4]
   15920:	ldr	r0, [r6]
   15924:	cmp	r0, #0
   15928:	beq	15948 <__assert_fail@plt+0x4458>
   1592c:	ldr	r0, [r4, #36]	; 0x24
   15930:	cmp	r0, #0
   15934:	beq	15968 <__assert_fail@plt+0x4478>
   15938:	mov	r1, r0
   1593c:	ldr	r2, [r1, #4]!
   15940:	str	r2, [r4, #36]	; 0x24
   15944:	b	1597c <__assert_fail@plt+0x448c>
   15948:	str	r5, [r6]
   1594c:	ldr	r0, [r4, #12]
   15950:	ldr	r1, [r4, #16]
   15954:	add	r0, r0, #1
   15958:	add	r1, r1, #1
   1595c:	str	r0, [r4, #12]
   15960:	str	r1, [r4, #16]
   15964:	b	15998 <__assert_fail@plt+0x44a8>
   15968:	mov	r0, #8
   1596c:	bl	18ab8 <__assert_fail@plt+0x75c8>
   15970:	cmp	r0, #0
   15974:	beq	159a8 <__assert_fail@plt+0x44b8>
   15978:	add	r1, r0, #4
   1597c:	str	r5, [r0]
   15980:	ldr	r2, [r6, #4]
   15984:	str	r2, [r1]
   15988:	str	r0, [r6, #4]
   1598c:	ldr	r0, [r4, #16]
   15990:	add	r0, r0, #1
   15994:	str	r0, [r4, #16]
   15998:	mov	r6, #1
   1599c:	mov	r0, r6
   159a0:	sub	sp, fp, #16
   159a4:	pop	{r4, r5, r6, r7, fp, pc}
   159a8:	mvn	r6, #0
   159ac:	b	1599c <__assert_fail@plt+0x44ac>
   159b0:	bl	114a8 <abort@plt>
   159b4:	svcmi	0x00800000
   159b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159bc:	add	fp, sp, #24
   159c0:	mov	r7, r2
   159c4:	mov	r4, r1
   159c8:	ldr	r1, [r0, #8]
   159cc:	ldr	r2, [r0, #24]
   159d0:	mov	r5, r0
   159d4:	mov	r8, r3
   159d8:	mov	r0, r4
   159dc:	blx	r2
   159e0:	ldr	r1, [r5, #8]
   159e4:	cmp	r0, r1
   159e8:	bcs	15ae4 <__assert_fail@plt+0x45f4>
   159ec:	ldr	r1, [r5]
   159f0:	add	r6, r1, r0, lsl #3
   159f4:	str	r6, [r7]
   159f8:	ldr	r1, [r1, r0, lsl #3]
   159fc:	cmp	r1, #0
   15a00:	beq	15a98 <__assert_fail@plt+0x45a8>
   15a04:	cmp	r1, r4
   15a08:	beq	15a24 <__assert_fail@plt+0x4534>
   15a0c:	ldr	r2, [r5, #28]
   15a10:	mov	r0, r4
   15a14:	blx	r2
   15a18:	cmp	r0, #0
   15a1c:	beq	15a58 <__assert_fail@plt+0x4568>
   15a20:	ldr	r4, [r6]
   15a24:	cmp	r8, #0
   15a28:	beq	15a9c <__assert_fail@plt+0x45ac>
   15a2c:	ldr	r0, [r6, #4]
   15a30:	cmp	r0, #0
   15a34:	beq	15aa4 <__assert_fail@plt+0x45b4>
   15a38:	ldm	r0, {r1, r2}
   15a3c:	stm	r6, {r1, r2}
   15a40:	mov	r1, #0
   15a44:	str	r1, [r0]
   15a48:	ldr	r1, [r5, #36]	; 0x24
   15a4c:	str	r1, [r0, #4]
   15a50:	str	r0, [r5, #36]	; 0x24
   15a54:	b	15a9c <__assert_fail@plt+0x45ac>
   15a58:	ldr	r0, [r6, #4]!
   15a5c:	cmp	r0, #0
   15a60:	beq	15a98 <__assert_fail@plt+0x45a8>
   15a64:	ldr	r1, [r0]
   15a68:	cmp	r1, r4
   15a6c:	beq	15ab0 <__assert_fail@plt+0x45c0>
   15a70:	ldr	r2, [r5, #28]
   15a74:	mov	r0, r4
   15a78:	blx	r2
   15a7c:	ldr	r1, [r6]
   15a80:	cmp	r0, #0
   15a84:	bne	15ab8 <__assert_fail@plt+0x45c8>
   15a88:	ldr	r0, [r1, #4]!
   15a8c:	cmp	r0, #0
   15a90:	mov	r6, r1
   15a94:	bne	15a64 <__assert_fail@plt+0x4574>
   15a98:	mov	r4, #0
   15a9c:	mov	r0, r4
   15aa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15aa4:	mov	r0, #0
   15aa8:	str	r0, [r6]
   15aac:	b	15a9c <__assert_fail@plt+0x45ac>
   15ab0:	mov	r1, r0
   15ab4:	b	15abc <__assert_fail@plt+0x45cc>
   15ab8:	ldr	r4, [r1]
   15abc:	cmp	r8, #0
   15ac0:	beq	15a9c <__assert_fail@plt+0x45ac>
   15ac4:	ldr	r0, [r1, #4]
   15ac8:	str	r0, [r6]
   15acc:	mov	r0, #0
   15ad0:	str	r0, [r1]
   15ad4:	ldr	r0, [r5, #36]	; 0x24
   15ad8:	str	r0, [r1, #4]
   15adc:	str	r1, [r5, #36]	; 0x24
   15ae0:	b	15a9c <__assert_fail@plt+0x45ac>
   15ae4:	bl	114a8 <abort@plt>
   15ae8:	push	{r4, sl, fp, lr}
   15aec:	add	fp, sp, #8
   15af0:	sub	sp, sp, #8
   15af4:	add	r2, sp, #4
   15af8:	mov	r4, r1
   15afc:	bl	15820 <__assert_fail@plt+0x4330>
   15b00:	cmn	r0, #1
   15b04:	beq	15b18 <__assert_fail@plt+0x4628>
   15b08:	ldr	r1, [sp, #4]
   15b0c:	cmp	r0, #0
   15b10:	moveq	r4, r1
   15b14:	b	15b1c <__assert_fail@plt+0x462c>
   15b18:	mov	r4, #0
   15b1c:	mov	r0, r4
   15b20:	sub	sp, fp, #8
   15b24:	pop	{r4, sl, fp, pc}
   15b28:	push	{r4, r5, r6, sl, fp, lr}
   15b2c:	add	fp, sp, #16
   15b30:	sub	sp, sp, #8
   15b34:	add	r2, sp, #4
   15b38:	mov	r3, #1
   15b3c:	mov	r4, r0
   15b40:	bl	159b8 <__assert_fail@plt+0x44c8>
   15b44:	mov	r5, r0
   15b48:	cmp	r0, #0
   15b4c:	beq	15c28 <__assert_fail@plt+0x4738>
   15b50:	ldr	r0, [r4, #16]
   15b54:	sub	r0, r0, #1
   15b58:	str	r0, [r4, #16]
   15b5c:	ldr	r0, [sp, #4]
   15b60:	ldr	r0, [r0]
   15b64:	cmp	r0, #0
   15b68:	bne	15c28 <__assert_fail@plt+0x4738>
   15b6c:	ldr	r0, [r4, #12]
   15b70:	vldr	s0, [r4, #8]
   15b74:	sub	r0, r0, #1
   15b78:	str	r0, [r4, #12]
   15b7c:	vmov	s4, r0
   15b80:	ldr	r1, [r4, #20]
   15b84:	vldr	s2, [r1]
   15b88:	vcvt.f32.u32	s0, s0
   15b8c:	vcvt.f32.u32	s4, s4
   15b90:	vmul.f32	s0, s2, s0
   15b94:	vcmpe.f32	s0, s4
   15b98:	vmrs	APSR_nzcv, fpscr
   15b9c:	ble	15c28 <__assert_fail@plt+0x4738>
   15ba0:	mov	r0, r4
   15ba4:	bl	15264 <__assert_fail@plt+0x3d74>
   15ba8:	vldr	s0, [r4, #8]
   15bac:	ldr	r0, [r4, #20]
   15bb0:	vldr	s2, [r4, #12]
   15bb4:	vcvt.f32.u32	s0, s0
   15bb8:	vldr	s4, [r0]
   15bbc:	vcvt.f32.u32	s2, s2
   15bc0:	vmul.f32	s4, s4, s0
   15bc4:	vcmpe.f32	s4, s2
   15bc8:	vmrs	APSR_nzcv, fpscr
   15bcc:	ble	15c28 <__assert_fail@plt+0x4738>
   15bd0:	ldrb	r1, [r0, #16]
   15bd4:	vldr	s2, [r0, #4]
   15bd8:	cmp	r1, #0
   15bdc:	vmul.f32	s0, s2, s0
   15be0:	vldreq	s2, [r0, #8]
   15be4:	mov	r0, r4
   15be8:	vmuleq.f32	s0, s0, s2
   15bec:	vcvt.u32.f32	s0, s0
   15bf0:	vmov	r1, s0
   15bf4:	bl	15570 <__assert_fail@plt+0x4080>
   15bf8:	cmp	r0, #0
   15bfc:	bne	15c28 <__assert_fail@plt+0x4738>
   15c00:	ldr	r0, [r4, #36]	; 0x24
   15c04:	cmp	r0, #0
   15c08:	beq	15c20 <__assert_fail@plt+0x4730>
   15c0c:	ldr	r6, [r0, #4]
   15c10:	bl	12cb0 <__assert_fail@plt+0x17c0>
   15c14:	cmp	r6, #0
   15c18:	mov	r0, r6
   15c1c:	bne	15c0c <__assert_fail@plt+0x471c>
   15c20:	mov	r0, #0
   15c24:	str	r0, [r4, #36]	; 0x24
   15c28:	mov	r0, r5
   15c2c:	sub	sp, fp, #16
   15c30:	pop	{r4, r5, r6, sl, fp, pc}
   15c34:	b	15b28 <__assert_fail@plt+0x4638>
   15c38:	mov	r3, #1
   15c3c:	mov	r2, #0
   15c40:	vdup.32	q8, r1
   15c44:	strb	r3, [r0, #28]
   15c48:	str	r2, [r0, #20]
   15c4c:	str	r2, [r0, #24]
   15c50:	add	r3, r0, r2
   15c54:	add	r2, r2, #16
   15c58:	cmp	r2, #16
   15c5c:	vst1.32	{d16-d17}, [r3]
   15c60:	bne	15c50 <__assert_fail@plt+0x4760>
   15c64:	str	r1, [r0, #16]
   15c68:	bx	lr
   15c6c:	ldrb	r0, [r0, #28]
   15c70:	bx	lr
   15c74:	push	{fp, lr}
   15c78:	mov	fp, sp
   15c7c:	ldrb	r3, [r0, #28]
   15c80:	ldr	r2, [r0, #20]
   15c84:	eor	lr, r3, #1
   15c88:	add	r2, r2, lr
   15c8c:	and	r3, r2, #3
   15c90:	ldr	ip, [r0, r3, lsl #2]
   15c94:	str	r1, [r0, r3, lsl #2]
   15c98:	str	r3, [r0, #20]
   15c9c:	ldr	r1, [r0, #24]
   15ca0:	cmp	r3, r1
   15ca4:	addeq	r1, r2, lr
   15ca8:	andeq	r1, r1, #3
   15cac:	streq	r1, [r0, #24]
   15cb0:	mov	r1, #0
   15cb4:	strb	r1, [r0, #28]
   15cb8:	mov	r0, ip
   15cbc:	pop	{fp, pc}
   15cc0:	ldrb	r1, [r0, #28]
   15cc4:	cmp	r1, #0
   15cc8:	bne	15d0c <__assert_fail@plt+0x481c>
   15ccc:	ldr	r3, [r0, #20]
   15cd0:	ldr	r2, [r0, #16]
   15cd4:	ldr	r1, [r0, r3, lsl #2]
   15cd8:	str	r2, [r0, r3, lsl #2]
   15cdc:	ldr	r2, [r0, #20]
   15ce0:	ldr	r3, [r0, #24]
   15ce4:	cmp	r2, r3
   15ce8:	bne	15cf8 <__assert_fail@plt+0x4808>
   15cec:	mov	r2, #1
   15cf0:	strb	r2, [r0, #28]
   15cf4:	b	15d04 <__assert_fail@plt+0x4814>
   15cf8:	sub	r2, r2, #1
   15cfc:	and	r2, r2, #3
   15d00:	str	r2, [r0, #20]
   15d04:	mov	r0, r1
   15d08:	bx	lr
   15d0c:	push	{fp, lr}
   15d10:	mov	fp, sp
   15d14:	bl	114a8 <abort@plt>
   15d18:	push	{r4, r5, r6, sl, fp, lr}
   15d1c:	add	fp, sp, #16
   15d20:	mov	r5, r0
   15d24:	mov	r0, #0
   15d28:	mov	r4, r1
   15d2c:	add	r6, r2, #19
   15d30:	strb	r0, [r2, #20]
   15d34:	mov	r0, r5
   15d38:	mov	r1, r4
   15d3c:	mov	r2, #10
   15d40:	mov	r3, #0
   15d44:	bl	19238 <__assert_fail@plt+0x7d48>
   15d48:	add	r2, r0, r0, lsl #2
   15d4c:	sub	r2, r5, r2, lsl #1
   15d50:	orr	r2, r2, #48	; 0x30
   15d54:	strb	r2, [r6], #-1
   15d58:	rsbs	r2, r5, #9
   15d5c:	mov	r5, r0
   15d60:	rscs	r2, r4, #0
   15d64:	mov	r4, r1
   15d68:	bcc	15d34 <__assert_fail@plt+0x4844>
   15d6c:	add	r0, r6, #1
   15d70:	pop	{r4, r5, r6, sl, fp, pc}
   15d74:	sub	sp, sp, #4
   15d78:	push	{fp, lr}
   15d7c:	mov	fp, sp
   15d80:	sub	sp, sp, #4
   15d84:	str	r3, [fp, #8]
   15d88:	mov	r3, #0
   15d8c:	tst	r2, #64	; 0x40
   15d90:	addne	r3, fp, #8
   15d94:	addne	r3, r3, #4
   15d98:	strne	r3, [sp]
   15d9c:	ldrne	r3, [fp, #8]
   15da0:	bl	1137c <openat64@plt>
   15da4:	bl	1799c <__assert_fail@plt+0x64ac>
   15da8:	mov	sp, fp
   15dac:	pop	{fp, lr}
   15db0:	add	sp, sp, #4
   15db4:	bx	lr
   15db8:	push	{r4, r5, r6, sl, fp, lr}
   15dbc:	add	fp, sp, #16
   15dc0:	orr	r2, r2, #18688	; 0x4900
   15dc4:	mov	r4, r3
   15dc8:	orr	r2, r2, #524288	; 0x80000
   15dcc:	bl	15d74 <__assert_fail@plt+0x4884>
   15dd0:	mov	r5, r0
   15dd4:	mov	r0, #0
   15dd8:	cmp	r5, #0
   15ddc:	poplt	{r4, r5, r6, sl, fp, pc}
   15de0:	mov	r0, r5
   15de4:	bl	1143c <fdopendir@plt>
   15de8:	cmp	r0, #0
   15dec:	strne	r5, [r4]
   15df0:	popne	{r4, r5, r6, sl, fp, pc}
   15df4:	bl	11394 <__errno_location@plt>
   15df8:	ldr	r6, [r0]
   15dfc:	mov	r4, r0
   15e00:	mov	r0, r5
   15e04:	bl	114b4 <close@plt>
   15e08:	mov	r0, #0
   15e0c:	str	r6, [r4]
   15e10:	pop	{r4, r5, r6, sl, fp, pc}
   15e14:	push	{r4, r5, fp, lr}
   15e18:	add	fp, sp, #8
   15e1c:	cmp	r0, #0
   15e20:	beq	15eb4 <__assert_fail@plt+0x49c4>
   15e24:	mov	r1, #47	; 0x2f
   15e28:	mov	r4, r0
   15e2c:	bl	11418 <strrchr@plt>
   15e30:	cmp	r0, #0
   15e34:	mov	r5, r4
   15e38:	addne	r5, r0, #1
   15e3c:	sub	r0, r5, r4
   15e40:	cmp	r0, #7
   15e44:	blt	15e98 <__assert_fail@plt+0x49a8>
   15e48:	movw	r1, #41900	; 0xa3ac
   15e4c:	sub	r0, r5, #7
   15e50:	mov	r2, #7
   15e54:	movt	r1, #1
   15e58:	bl	1149c <strncmp@plt>
   15e5c:	cmp	r0, #0
   15e60:	bne	15e98 <__assert_fail@plt+0x49a8>
   15e64:	movw	r1, #41908	; 0xa3b4
   15e68:	mov	r0, r5
   15e6c:	mov	r2, #3
   15e70:	movt	r1, #1
   15e74:	bl	1149c <strncmp@plt>
   15e78:	cmp	r0, #0
   15e7c:	beq	15e88 <__assert_fail@plt+0x4998>
   15e80:	mov	r4, r5
   15e84:	b	15e98 <__assert_fail@plt+0x49a8>
   15e88:	movw	r0, #45432	; 0xb178
   15e8c:	add	r4, r5, #3
   15e90:	movt	r0, #2
   15e94:	str	r4, [r0]
   15e98:	movw	r0, #45436	; 0xb17c
   15e9c:	movt	r0, #2
   15ea0:	str	r4, [r0]
   15ea4:	movw	r0, #45496	; 0xb1b8
   15ea8:	movt	r0, #2
   15eac:	str	r4, [r0]
   15eb0:	pop	{r4, r5, fp, pc}
   15eb4:	movw	r0, #45448	; 0xb188
   15eb8:	movt	r0, #2
   15ebc:	ldr	r1, [r0]
   15ec0:	movw	r0, #41844	; 0xa374
   15ec4:	movt	r0, #1
   15ec8:	bl	11490 <fputs@plt>
   15ecc:	bl	114a8 <abort@plt>
   15ed0:	push	{r4, r5, r6, sl, fp, lr}
   15ed4:	add	fp, sp, #16
   15ed8:	mov	r4, r0
   15edc:	movw	r0, #45504	; 0xb1c0
   15ee0:	movt	r0, #2
   15ee4:	cmp	r4, #0
   15ee8:	moveq	r4, r0
   15eec:	bl	11394 <__errno_location@plt>
   15ef0:	ldr	r6, [r0]
   15ef4:	mov	r5, r0
   15ef8:	mov	r0, r4
   15efc:	mov	r1, #48	; 0x30
   15f00:	bl	181ec <__assert_fail@plt+0x6cfc>
   15f04:	str	r6, [r5]
   15f08:	pop	{r4, r5, r6, sl, fp, pc}
   15f0c:	movw	r1, #45504	; 0xb1c0
   15f10:	cmp	r0, #0
   15f14:	movt	r1, #2
   15f18:	movne	r1, r0
   15f1c:	ldr	r0, [r1]
   15f20:	bx	lr
   15f24:	movw	r2, #45504	; 0xb1c0
   15f28:	cmp	r0, #0
   15f2c:	movt	r2, #2
   15f30:	movne	r2, r0
   15f34:	str	r1, [r2]
   15f38:	bx	lr
   15f3c:	movw	r3, #45504	; 0xb1c0
   15f40:	cmp	r0, #0
   15f44:	movt	r3, #2
   15f48:	movne	r3, r0
   15f4c:	ubfx	r0, r1, #5, #3
   15f50:	and	r1, r1, #31
   15f54:	add	r0, r3, r0, lsl #2
   15f58:	ldr	r3, [r0, #8]
   15f5c:	eor	r2, r2, r3, lsr r1
   15f60:	and	r2, r2, #1
   15f64:	eor	r2, r3, r2, lsl r1
   15f68:	str	r2, [r0, #8]
   15f6c:	mov	r0, #1
   15f70:	and	r0, r0, r3, lsr r1
   15f74:	bx	lr
   15f78:	movw	r2, #45504	; 0xb1c0
   15f7c:	cmp	r0, #0
   15f80:	movt	r2, #2
   15f84:	movne	r2, r0
   15f88:	ldr	r0, [r2, #4]
   15f8c:	str	r1, [r2, #4]
   15f90:	bx	lr
   15f94:	movw	r3, #45504	; 0xb1c0
   15f98:	cmp	r0, #0
   15f9c:	movt	r3, #2
   15fa0:	movne	r3, r0
   15fa4:	cmp	r1, #0
   15fa8:	mov	r0, #10
   15fac:	cmpne	r2, #0
   15fb0:	str	r0, [r3]
   15fb4:	bne	15fc4 <__assert_fail@plt+0x4ad4>
   15fb8:	push	{fp, lr}
   15fbc:	mov	fp, sp
   15fc0:	bl	114a8 <abort@plt>
   15fc4:	str	r1, [r3, #40]	; 0x28
   15fc8:	str	r2, [r3, #44]	; 0x2c
   15fcc:	bx	lr
   15fd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fd4:	add	fp, sp, #28
   15fd8:	sub	sp, sp, #20
   15fdc:	mov	r7, r0
   15fe0:	ldr	r0, [fp, #8]
   15fe4:	movw	r5, #45504	; 0xb1c0
   15fe8:	mov	r8, r3
   15fec:	mov	r9, r2
   15ff0:	mov	sl, r1
   15ff4:	movt	r5, #2
   15ff8:	cmp	r0, #0
   15ffc:	movne	r5, r0
   16000:	bl	11394 <__errno_location@plt>
   16004:	mov	r4, r0
   16008:	ldm	r5, {r0, r1}
   1600c:	ldr	r2, [r5, #40]	; 0x28
   16010:	ldr	r3, [r5, #44]	; 0x2c
   16014:	add	r5, r5, #8
   16018:	ldr	r6, [r4]
   1601c:	stm	sp, {r0, r1, r5}
   16020:	str	r2, [sp, #12]
   16024:	str	r3, [sp, #16]
   16028:	mov	r0, r7
   1602c:	mov	r1, sl
   16030:	mov	r2, r9
   16034:	mov	r3, r8
   16038:	bl	16048 <__assert_fail@plt+0x4b58>
   1603c:	str	r6, [r4]
   16040:	sub	sp, fp, #28
   16044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1604c:	add	fp, sp, #28
   16050:	sub	sp, sp, #156	; 0x9c
   16054:	str	r0, [fp, #-56]	; 0xffffffc8
   16058:	ldr	r0, [fp, #12]
   1605c:	mov	r4, r1
   16060:	str	r3, [sp, #80]	; 0x50
   16064:	str	r2, [fp, #-84]	; 0xffffffac
   16068:	and	r1, r0, #4
   1606c:	str	r1, [sp, #24]
   16070:	and	r1, r0, #1
   16074:	str	r1, [sp, #28]
   16078:	ubfx	r7, r0, #1, #1
   1607c:	bl	112c8 <__ctype_get_mb_cur_max@plt>
   16080:	str	r0, [sp, #32]
   16084:	ldr	r0, [fp, #24]
   16088:	ldr	r9, [fp, #8]
   1608c:	mov	r2, #0
   16090:	mov	r1, #0
   16094:	mov	r5, #0
   16098:	str	r2, [sp, #52]	; 0x34
   1609c:	mov	r2, #1
   160a0:	str	r0, [sp, #72]	; 0x48
   160a4:	ldr	r0, [fp, #20]
   160a8:	str	r0, [sp, #64]	; 0x40
   160ac:	mov	r0, #0
   160b0:	str	r0, [sp, #92]	; 0x5c
   160b4:	mov	r0, #0
   160b8:	str	r0, [fp, #-76]	; 0xffffffb4
   160bc:	mov	r0, #0
   160c0:	cmp	r9, #10
   160c4:	str	r1, [sp, #68]	; 0x44
   160c8:	bhi	170c8 <__assert_fail@plt+0x5bd8>
   160cc:	add	r1, pc, #28
   160d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   160d4:	ldr	lr, [sp, #80]	; 0x50
   160d8:	mov	r6, r4
   160dc:	mov	r8, #0
   160e0:	mov	r3, #1
   160e4:	mov	sl, #0
   160e8:	mov	r4, r2
   160ec:	ldr	pc, [r1, r9, lsl #2]
   160f0:	andeq	r6, r1, r0, asr #3
   160f4:	strdeq	r6, [r1], -ip
   160f8:	ldrdeq	r6, [r1], -r0
   160fc:			; <UNDEFINED> instruction: 0x000161b8
   16100:	strdeq	r6, [r1], -r0
   16104:	andeq	r6, r1, r8, asr #4
   16108:	andeq	r6, r1, r0, ror #3
   1610c:	andeq	r6, r1, r8, lsr #5
   16110:	andeq	r6, r1, ip, lsl r1
   16114:	andeq	r6, r1, ip, lsl r1
   16118:	andeq	r6, r1, r4, asr #2
   1611c:	movw	r0, #41990	; 0xa406
   16120:	mov	r1, r9
   16124:	movt	r0, #1
   16128:	bl	17830 <__assert_fail@plt+0x6340>
   1612c:	str	r0, [sp, #64]	; 0x40
   16130:	movw	r0, #41992	; 0xa408
   16134:	mov	r1, r9
   16138:	movt	r0, #1
   1613c:	bl	17830 <__assert_fail@plt+0x6340>
   16140:	str	r0, [sp, #72]	; 0x48
   16144:	mov	r8, #0
   16148:	mov	sl, r7
   1614c:	tst	r7, #1
   16150:	str	r5, [fp, #-48]	; 0xffffffd0
   16154:	bne	16190 <__assert_fail@plt+0x4ca0>
   16158:	ldr	r0, [sp, #64]	; 0x40
   1615c:	ldrb	r0, [r0]
   16160:	cmp	r0, #0
   16164:	beq	16190 <__assert_fail@plt+0x4ca0>
   16168:	ldr	r1, [sp, #64]	; 0x40
   1616c:	mov	r8, #0
   16170:	add	r1, r1, #1
   16174:	cmp	r8, r6
   16178:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1617c:	strbcc	r0, [r2, r8]
   16180:	ldrb	r0, [r1, r8]
   16184:	add	r8, r8, #1
   16188:	cmp	r0, #0
   1618c:	bne	16174 <__assert_fail@plt+0x4c84>
   16190:	ldr	r7, [sp, #72]	; 0x48
   16194:	mov	r0, r7
   16198:	bl	11364 <strlen@plt>
   1619c:	ldr	ip, [fp, #-84]	; 0xffffffac
   161a0:	ldr	lr, [sp, #80]	; 0x50
   161a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   161a8:	str	r0, [fp, #-76]	; 0xffffffb4
   161ac:	str	r7, [sp, #92]	; 0x5c
   161b0:	mov	r3, #1
   161b4:	b	162a8 <__assert_fail@plt+0x4db8>
   161b8:	mov	r0, #1
   161bc:	b	161fc <__assert_fail@plt+0x4d0c>
   161c0:	mov	r9, #0
   161c4:	mov	r8, #0
   161c8:	mov	r3, r0
   161cc:	b	162a4 <__assert_fail@plt+0x4db4>
   161d0:	tst	r7, #1
   161d4:	bne	161fc <__assert_fail@plt+0x4d0c>
   161d8:	mov	r3, r0
   161dc:	b	16224 <__assert_fail@plt+0x4d34>
   161e0:	mov	r0, #1
   161e4:	mov	r8, #0
   161e8:	mov	r9, #5
   161ec:	b	1625c <__assert_fail@plt+0x4d6c>
   161f0:	mov	r3, #1
   161f4:	tst	r7, #1
   161f8:	beq	16224 <__assert_fail@plt+0x4d34>
   161fc:	mov	r1, #1
   16200:	mov	r8, #0
   16204:	mov	r9, #2
   16208:	mov	r3, r0
   1620c:	mov	sl, #1
   16210:	str	r1, [fp, #-76]	; 0xffffffb4
   16214:	movw	r1, #41992	; 0xa408
   16218:	movt	r1, #1
   1621c:	str	r1, [sp, #92]	; 0x5c
   16220:	b	162a8 <__assert_fail@plt+0x4db8>
   16224:	cmp	r6, #0
   16228:	mov	r8, #1
   1622c:	mov	r9, #2
   16230:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   16234:	movne	r0, #39	; 0x27
   16238:	strbne	r0, [r1]
   1623c:	movw	r0, #41992	; 0xa408
   16240:	movt	r0, #1
   16244:	b	16298 <__assert_fail@plt+0x4da8>
   16248:	mov	r9, #5
   1624c:	tst	r7, #1
   16250:	beq	16278 <__assert_fail@plt+0x4d88>
   16254:	mov	r0, #1
   16258:	mov	r8, #0
   1625c:	str	r0, [fp, #-76]	; 0xffffffb4
   16260:	movw	r0, #41988	; 0xa404
   16264:	mov	r3, #1
   16268:	mov	sl, #1
   1626c:	movt	r0, #1
   16270:	str	r0, [sp, #92]	; 0x5c
   16274:	b	162a8 <__assert_fail@plt+0x4db8>
   16278:	cmp	r6, #0
   1627c:	mov	r8, #1
   16280:	mov	r3, #1
   16284:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   16288:	movne	r0, #34	; 0x22
   1628c:	strbne	r0, [r1]
   16290:	movw	r0, #41988	; 0xa404
   16294:	movt	r0, #1
   16298:	str	r0, [sp, #92]	; 0x5c
   1629c:	mov	r0, #1
   162a0:	str	r0, [fp, #-76]	; 0xffffffb4
   162a4:	mov	sl, #0
   162a8:	ldr	r0, [fp, #16]
   162ac:	mov	r7, #0
   162b0:	str	r9, [fp, #-64]	; 0xffffffc0
   162b4:	str	sl, [fp, #-72]	; 0xffffffb8
   162b8:	str	r3, [sp, #84]	; 0x54
   162bc:	cmp	r0, #0
   162c0:	movwne	r0, #1
   162c4:	and	r0, r0, sl
   162c8:	str	r0, [fp, #-88]	; 0xffffffa8
   162cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   162d0:	cmp	r0, #0
   162d4:	movwne	r0, #1
   162d8:	subs	r2, r9, #2
   162dc:	and	r1, r0, sl
   162e0:	str	r2, [fp, #-80]	; 0xffffffb0
   162e4:	and	r1, r3, r1
   162e8:	str	r1, [sp, #44]	; 0x2c
   162ec:	clz	r1, r2
   162f0:	lsr	r1, r1, #5
   162f4:	and	r1, r1, sl
   162f8:	str	r1, [sp, #56]	; 0x38
   162fc:	mov	r1, r2
   16300:	eor	r2, sl, #1
   16304:	movwne	r1, #1
   16308:	str	r2, [sp, #88]	; 0x58
   1630c:	orr	r2, r1, r2
   16310:	and	r1, r1, r3
   16314:	and	r0, r0, r1
   16318:	str	r2, [sp, #60]	; 0x3c
   1631c:	str	r1, [fp, #-68]	; 0xffffffbc
   16320:	str	r0, [fp, #-60]	; 0xffffffc4
   16324:	eor	r0, r3, #1
   16328:	str	r0, [sp, #48]	; 0x30
   1632c:	cmn	lr, #1
   16330:	beq	16340 <__assert_fail@plt+0x4e50>
   16334:	cmp	r7, lr
   16338:	bne	1634c <__assert_fail@plt+0x4e5c>
   1633c:	b	16ef8 <__assert_fail@plt+0x5a08>
   16340:	ldrb	r0, [ip, r7]
   16344:	cmp	r0, #0
   16348:	beq	16f00 <__assert_fail@plt+0x5a10>
   1634c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16350:	mov	r9, #0
   16354:	str	r5, [fp, #-48]	; 0xffffffd0
   16358:	str	r6, [fp, #-52]	; 0xffffffcc
   1635c:	cmp	r0, #0
   16360:	beq	163a0 <__assert_fail@plt+0x4eb0>
   16364:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16368:	mov	r5, r4
   1636c:	add	r4, r7, r0
   16370:	cmp	r0, #2
   16374:	bcc	16390 <__assert_fail@plt+0x4ea0>
   16378:	cmn	lr, #1
   1637c:	bne	16390 <__assert_fail@plt+0x4ea0>
   16380:	mov	r0, ip
   16384:	bl	11364 <strlen@plt>
   16388:	ldr	ip, [fp, #-84]	; 0xffffffac
   1638c:	mov	lr, r0
   16390:	cmp	r4, lr
   16394:	bls	163a8 <__assert_fail@plt+0x4eb8>
   16398:	mov	r6, #0
   1639c:	b	163e8 <__assert_fail@plt+0x4ef8>
   163a0:	mov	r6, #0
   163a4:	b	163ec <__assert_fail@plt+0x4efc>
   163a8:	ldr	r1, [sp, #92]	; 0x5c
   163ac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   163b0:	add	r0, ip, r7
   163b4:	mov	r4, lr
   163b8:	bl	1125c <memcmp@plt>
   163bc:	ldr	r2, [sp, #88]	; 0x58
   163c0:	cmp	r0, #0
   163c4:	mov	r1, r0
   163c8:	movwne	r1, #1
   163cc:	orr	r1, r1, r2
   163d0:	tst	r1, #1
   163d4:	beq	16f94 <__assert_fail@plt+0x5aa4>
   163d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   163dc:	clz	r0, r0
   163e0:	mov	lr, r4
   163e4:	lsr	r6, r0, #5
   163e8:	mov	r4, r5
   163ec:	ldrb	r5, [ip, r7]
   163f0:	cmp	r5, #126	; 0x7e
   163f4:	bhi	167bc <__assert_fail@plt+0x52cc>
   163f8:	add	r3, pc, #16
   163fc:	mov	sl, #1
   16400:	mov	r2, #110	; 0x6e
   16404:	mov	r0, #97	; 0x61
   16408:	mov	r1, #0
   1640c:	ldr	pc, [r3, r5, lsl #2]
   16410:	andeq	r6, r1, r0, lsr #13
   16414:			; <UNDEFINED> instruction: 0x000167bc
   16418:			; <UNDEFINED> instruction: 0x000167bc
   1641c:			; <UNDEFINED> instruction: 0x000167bc
   16420:			; <UNDEFINED> instruction: 0x000167bc
   16424:			; <UNDEFINED> instruction: 0x000167bc
   16428:			; <UNDEFINED> instruction: 0x000167bc
   1642c:	andeq	r6, r1, r0, ror #16
   16430:	andeq	r6, r1, r0, lsl #13
   16434:	andeq	r6, r1, r8, ror r6
   16438:	andeq	r6, r1, ip, lsl #13
   1643c:	andeq	r6, r1, r0, lsl r7
   16440:	andeq	r6, r1, r0, ror r6
   16444:	andeq	r6, r1, r8, lsl #13
   16448:			; <UNDEFINED> instruction: 0x000167bc
   1644c:			; <UNDEFINED> instruction: 0x000167bc
   16450:			; <UNDEFINED> instruction: 0x000167bc
   16454:			; <UNDEFINED> instruction: 0x000167bc
   16458:			; <UNDEFINED> instruction: 0x000167bc
   1645c:			; <UNDEFINED> instruction: 0x000167bc
   16460:			; <UNDEFINED> instruction: 0x000167bc
   16464:			; <UNDEFINED> instruction: 0x000167bc
   16468:			; <UNDEFINED> instruction: 0x000167bc
   1646c:			; <UNDEFINED> instruction: 0x000167bc
   16470:			; <UNDEFINED> instruction: 0x000167bc
   16474:			; <UNDEFINED> instruction: 0x000167bc
   16478:			; <UNDEFINED> instruction: 0x000167bc
   1647c:			; <UNDEFINED> instruction: 0x000167bc
   16480:			; <UNDEFINED> instruction: 0x000167bc
   16484:			; <UNDEFINED> instruction: 0x000167bc
   16488:			; <UNDEFINED> instruction: 0x000167bc
   1648c:			; <UNDEFINED> instruction: 0x000167bc
   16490:	andeq	r6, r1, r0, lsr #16
   16494:	andeq	r6, r1, r4, lsr #16
   16498:	andeq	r6, r1, r4, lsr #16
   1649c:	andeq	r6, r1, r0, lsr #12
   164a0:	andeq	r6, r1, r4, lsr #16
   164a4:	andeq	r6, r1, ip, lsl #12
   164a8:	andeq	r6, r1, r4, lsr #16
   164ac:	andeq	r6, r1, r8, lsl r7
   164b0:	andeq	r6, r1, r4, lsr #16
   164b4:	andeq	r6, r1, r4, lsr #16
   164b8:	andeq	r6, r1, r4, lsr #16
   164bc:	andeq	r6, r1, ip, lsl #12
   164c0:	andeq	r6, r1, ip, lsl #12
   164c4:	andeq	r6, r1, ip, lsl #12
   164c8:	andeq	r6, r1, ip, lsl #12
   164cc:	andeq	r6, r1, ip, lsl #12
   164d0:	andeq	r6, r1, ip, lsl #12
   164d4:	andeq	r6, r1, ip, lsl #12
   164d8:	andeq	r6, r1, ip, lsl #12
   164dc:	andeq	r6, r1, ip, lsl #12
   164e0:	andeq	r6, r1, ip, lsl #12
   164e4:	andeq	r6, r1, ip, lsl #12
   164e8:	andeq	r6, r1, ip, lsl #12
   164ec:	andeq	r6, r1, ip, lsl #12
   164f0:	andeq	r6, r1, ip, lsl #12
   164f4:	andeq	r6, r1, ip, lsl #12
   164f8:	andeq	r6, r1, ip, lsl #12
   164fc:	andeq	r6, r1, r4, lsr #16
   16500:	andeq	r6, r1, r4, lsr #16
   16504:	andeq	r6, r1, r4, lsr #16
   16508:	andeq	r6, r1, r4, lsr #16
   1650c:	andeq	r6, r1, r4, ror #13
   16510:			; <UNDEFINED> instruction: 0x000167bc
   16514:	andeq	r6, r1, ip, lsl #12
   16518:	andeq	r6, r1, ip, lsl #12
   1651c:	andeq	r6, r1, ip, lsl #12
   16520:	andeq	r6, r1, ip, lsl #12
   16524:	andeq	r6, r1, ip, lsl #12
   16528:	andeq	r6, r1, ip, lsl #12
   1652c:	andeq	r6, r1, ip, lsl #12
   16530:	andeq	r6, r1, ip, lsl #12
   16534:	andeq	r6, r1, ip, lsl #12
   16538:	andeq	r6, r1, ip, lsl #12
   1653c:	andeq	r6, r1, ip, lsl #12
   16540:	andeq	r6, r1, ip, lsl #12
   16544:	andeq	r6, r1, ip, lsl #12
   16548:	andeq	r6, r1, ip, lsl #12
   1654c:	andeq	r6, r1, ip, lsl #12
   16550:	andeq	r6, r1, ip, lsl #12
   16554:	andeq	r6, r1, ip, lsl #12
   16558:	andeq	r6, r1, ip, lsl #12
   1655c:	andeq	r6, r1, ip, lsl #12
   16560:	andeq	r6, r1, ip, lsl #12
   16564:	andeq	r6, r1, ip, lsl #12
   16568:	andeq	r6, r1, ip, lsl #12
   1656c:	andeq	r6, r1, ip, lsl #12
   16570:	andeq	r6, r1, ip, lsl #12
   16574:	andeq	r6, r1, ip, lsl #12
   16578:	andeq	r6, r1, ip, lsl #12
   1657c:	andeq	r6, r1, r4, lsr #16
   16580:	andeq	r6, r1, ip, asr #12
   16584:	andeq	r6, r1, ip, lsl #12
   16588:	andeq	r6, r1, r4, lsr #16
   1658c:	andeq	r6, r1, ip, lsl #12
   16590:	andeq	r6, r1, r4, lsr #16
   16594:	andeq	r6, r1, ip, lsl #12
   16598:	andeq	r6, r1, ip, lsl #12
   1659c:	andeq	r6, r1, ip, lsl #12
   165a0:	andeq	r6, r1, ip, lsl #12
   165a4:	andeq	r6, r1, ip, lsl #12
   165a8:	andeq	r6, r1, ip, lsl #12
   165ac:	andeq	r6, r1, ip, lsl #12
   165b0:	andeq	r6, r1, ip, lsl #12
   165b4:	andeq	r6, r1, ip, lsl #12
   165b8:	andeq	r6, r1, ip, lsl #12
   165bc:	andeq	r6, r1, ip, lsl #12
   165c0:	andeq	r6, r1, ip, lsl #12
   165c4:	andeq	r6, r1, ip, lsl #12
   165c8:	andeq	r6, r1, ip, lsl #12
   165cc:	andeq	r6, r1, ip, lsl #12
   165d0:	andeq	r6, r1, ip, lsl #12
   165d4:	andeq	r6, r1, ip, lsl #12
   165d8:	andeq	r6, r1, ip, lsl #12
   165dc:	andeq	r6, r1, ip, lsl #12
   165e0:	andeq	r6, r1, ip, lsl #12
   165e4:	andeq	r6, r1, ip, lsl #12
   165e8:	andeq	r6, r1, ip, lsl #12
   165ec:	andeq	r6, r1, ip, lsl #12
   165f0:	andeq	r6, r1, ip, lsl #12
   165f4:	andeq	r6, r1, ip, lsl #12
   165f8:	andeq	r6, r1, ip, lsl #12
   165fc:	andeq	r6, r1, r0, lsr r6
   16600:	andeq	r6, r1, r4, lsr #16
   16604:	andeq	r6, r1, r0, lsr r6
   16608:	andeq	r6, r1, r0, lsr #12
   1660c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16610:	cmp	r0, #0
   16614:	beq	16874 <__assert_fail@plt+0x5384>
   16618:	ldr	r0, [fp, #16]
   1661c:	b	16878 <__assert_fail@plt+0x5388>
   16620:	mov	sl, #0
   16624:	cmp	r7, #0
   16628:	bne	16a90 <__assert_fail@plt+0x55a0>
   1662c:	b	16820 <__assert_fail@plt+0x5330>
   16630:	mov	sl, #0
   16634:	cmn	lr, #1
   16638:	beq	1680c <__assert_fail@plt+0x531c>
   1663c:	cmp	r7, #0
   16640:	cmpeq	lr, #1
   16644:	bne	16a90 <__assert_fail@plt+0x55a0>
   16648:	b	16820 <__assert_fail@plt+0x5330>
   1664c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16650:	cmp	r0, #2
   16654:	bne	16844 <__assert_fail@plt+0x5354>
   16658:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1665c:	tst	r0, #1
   16660:	bne	16fb0 <__assert_fail@plt+0x5ac0>
   16664:	mov	r9, #0
   16668:	mov	r0, #92	; 0x5c
   1666c:	b	16858 <__assert_fail@plt+0x5368>
   16670:	mov	r0, #102	; 0x66
   16674:	b	16860 <__assert_fail@plt+0x5370>
   16678:	mov	r2, #116	; 0x74
   1667c:	b	1668c <__assert_fail@plt+0x519c>
   16680:	mov	r0, #98	; 0x62
   16684:	b	16860 <__assert_fail@plt+0x5370>
   16688:	mov	r2, #114	; 0x72
   1668c:	ldr	r0, [sp, #60]	; 0x3c
   16690:	tst	r0, #1
   16694:	mov	r0, r2
   16698:	bne	16860 <__assert_fail@plt+0x5370>
   1669c:	b	16fb0 <__assert_fail@plt+0x5ac0>
   166a0:	ldr	r0, [sp, #84]	; 0x54
   166a4:	tst	r0, #1
   166a8:	beq	1694c <__assert_fail@plt+0x545c>
   166ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   166b0:	tst	r0, #1
   166b4:	bne	170b8 <__assert_fail@plt+0x5bc8>
   166b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   166bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   166c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   166c4:	cmp	r0, #2
   166c8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   166cc:	movwne	r0, #1
   166d0:	orr	r0, r0, r3
   166d4:	tst	r0, #1
   166d8:	beq	16dcc <__assert_fail@plt+0x58dc>
   166dc:	mov	r0, r8
   166e0:	b	16e0c <__assert_fail@plt+0x591c>
   166e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   166e8:	mov	r9, #0
   166ec:	mov	r5, #63	; 0x3f
   166f0:	cmp	r0, #5
   166f4:	beq	16a98 <__assert_fail@plt+0x55a8>
   166f8:	cmp	r0, #2
   166fc:	bne	16b58 <__assert_fail@plt+0x5668>
   16700:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16704:	tst	r0, #1
   16708:	beq	16b5c <__assert_fail@plt+0x566c>
   1670c:	b	16fb0 <__assert_fail@plt+0x5ac0>
   16710:	mov	r0, #118	; 0x76
   16714:	b	16860 <__assert_fail@plt+0x5370>
   16718:	mov	r0, #1
   1671c:	mov	r5, #39	; 0x27
   16720:	str	r0, [sp, #52]	; 0x34
   16724:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16728:	cmp	r0, #2
   1672c:	bne	167b4 <__assert_fail@plt+0x52c4>
   16730:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16734:	tst	r0, #1
   16738:	bne	16fb0 <__assert_fail@plt+0x5ac0>
   1673c:	ldr	r3, [sp, #68]	; 0x44
   16740:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16744:	mov	r9, #0
   16748:	clz	r1, r2
   1674c:	cmp	r3, #0
   16750:	mov	r0, r3
   16754:	movwne	r0, #1
   16758:	lsr	r1, r1, #5
   1675c:	orrs	r0, r0, r1
   16760:	moveq	r3, r2
   16764:	moveq	r2, r0
   16768:	cmp	r8, r2
   1676c:	str	r3, [sp, #68]	; 0x44
   16770:	str	r2, [fp, #-52]	; 0xffffffcc
   16774:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   16778:	movcc	r0, #39	; 0x27
   1677c:	strbcc	r0, [r1, r8]
   16780:	add	r0, r8, #1
   16784:	cmp	r0, r2
   16788:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1678c:	movcc	r1, #92	; 0x5c
   16790:	strbcc	r1, [r3, r0]
   16794:	add	r0, r8, #2
   16798:	add	r8, r8, #3
   1679c:	cmp	r0, r2
   167a0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   167a4:	movcc	r1, #39	; 0x27
   167a8:	strbcc	r1, [r2, r0]
   167ac:	mov	r0, #0
   167b0:	str	r0, [fp, #-48]	; 0xffffffd0
   167b4:	mov	sl, #1
   167b8:	b	1660c <__assert_fail@plt+0x511c>
   167bc:	ldr	r0, [sp, #32]
   167c0:	cmp	r0, #1
   167c4:	bne	16970 <__assert_fail@plt+0x5480>
   167c8:	str	lr, [sp, #80]	; 0x50
   167cc:	bl	1134c <__ctype_b_loc@plt>
   167d0:	ldr	r0, [r0]
   167d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   167d8:	mov	r1, #1
   167dc:	add	r0, r0, r5, lsl #1
   167e0:	ldrb	r0, [r0, #1]
   167e4:	ubfx	sl, r0, #6, #1
   167e8:	ldr	r0, [sp, #48]	; 0x30
   167ec:	mov	r2, r1
   167f0:	cmp	r1, #1
   167f4:	orr	r0, sl, r0
   167f8:	bhi	16b64 <__assert_fail@plt+0x5674>
   167fc:	tst	r0, #1
   16800:	beq	16b64 <__assert_fail@plt+0x5674>
   16804:	ldr	lr, [sp, #80]	; 0x50
   16808:	b	1660c <__assert_fail@plt+0x511c>
   1680c:	cmp	r7, #0
   16810:	bne	16a8c <__assert_fail@plt+0x559c>
   16814:	ldrb	r0, [ip, #1]
   16818:	cmp	r0, #0
   1681c:	bne	16a8c <__assert_fail@plt+0x559c>
   16820:	mov	r1, #1
   16824:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16828:	cmp	r0, #2
   1682c:	bne	1683c <__assert_fail@plt+0x534c>
   16830:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16834:	tst	r0, #1
   16838:	bne	16fb0 <__assert_fail@plt+0x5ac0>
   1683c:	mov	sl, r1
   16840:	b	1660c <__assert_fail@plt+0x511c>
   16844:	ldr	r1, [sp, #44]	; 0x2c
   16848:	mov	r9, #0
   1684c:	mov	r0, #92	; 0x5c
   16850:	cmp	r1, #0
   16854:	beq	16860 <__assert_fail@plt+0x5370>
   16858:	mov	sl, #0
   1685c:	b	16d78 <__assert_fail@plt+0x5888>
   16860:	ldr	r1, [sp, #84]	; 0x54
   16864:	mov	sl, #0
   16868:	mov	r9, #0
   1686c:	tst	r1, #1
   16870:	bne	168ac <__assert_fail@plt+0x53bc>
   16874:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16878:	cmp	r0, #0
   1687c:	mov	r0, r5
   16880:	beq	168a4 <__assert_fail@plt+0x53b4>
   16884:	ldr	r1, [fp, #16]
   16888:	ubfx	r0, r5, #5, #3
   1688c:	mov	r2, #1
   16890:	ldr	r0, [r1, r0, lsl #2]
   16894:	and	r1, r5, #31
   16898:	tst	r0, r2, lsl r1
   1689c:	mov	r0, r5
   168a0:	bne	168ac <__assert_fail@plt+0x53bc>
   168a4:	cmp	r6, #0
   168a8:	beq	16d78 <__assert_fail@plt+0x5888>
   168ac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   168b0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   168b4:	tst	r1, #1
   168b8:	bne	16f8c <__assert_fail@plt+0x5a9c>
   168bc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   168c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   168c4:	cmp	r1, #2
   168c8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   168cc:	movwne	r1, #1
   168d0:	orr	r1, r1, r5
   168d4:	tst	r1, #1
   168d8:	bne	1691c <__assert_fail@plt+0x542c>
   168dc:	cmp	r8, r6
   168e0:	mov	r5, #1
   168e4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   168e8:	movcc	r1, #39	; 0x27
   168ec:	strbcc	r1, [r2, r8]
   168f0:	add	r1, r8, #1
   168f4:	cmp	r1, r6
   168f8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   168fc:	movcc	r2, #36	; 0x24
   16900:	strbcc	r2, [r3, r1]
   16904:	add	r1, r8, #2
   16908:	add	r8, r8, #3
   1690c:	cmp	r1, r6
   16910:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16914:	movcc	r2, #39	; 0x27
   16918:	strbcc	r2, [r3, r1]
   1691c:	cmp	r8, r6
   16920:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16924:	movcc	r1, #92	; 0x5c
   16928:	strbcc	r1, [r2, r8]
   1692c:	add	r8, r8, #1
   16930:	cmp	r8, r6
   16934:	and	r4, r4, sl
   16938:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1693c:	strbcc	r0, [r1, r8]
   16940:	add	r8, r8, #1
   16944:	add	r7, r7, #1
   16948:	b	1632c <__assert_fail@plt+0x4e3c>
   1694c:	ldr	r0, [sp, #28]
   16950:	mov	sl, #0
   16954:	mov	r9, #0
   16958:	mov	r5, #0
   1695c:	cmp	r0, #0
   16960:	beq	16874 <__assert_fail@plt+0x5384>
   16964:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16968:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1696c:	b	16944 <__assert_fail@plt+0x5454>
   16970:	mov	r0, #0
   16974:	cmn	lr, #1
   16978:	str	r6, [sp, #76]	; 0x4c
   1697c:	str	r4, [sp, #20]
   16980:	str	r0, [fp, #-36]	; 0xffffffdc
   16984:	str	r0, [fp, #-40]	; 0xffffffd8
   16988:	bne	1699c <__assert_fail@plt+0x54ac>
   1698c:	mov	r0, ip
   16990:	bl	11364 <strlen@plt>
   16994:	ldr	ip, [fp, #-84]	; 0xffffffac
   16998:	mov	lr, r0
   1699c:	add	r0, ip, r7
   169a0:	mov	sl, #1
   169a4:	mov	r6, #0
   169a8:	sub	r4, fp, #40	; 0x28
   169ac:	str	lr, [sp, #80]	; 0x50
   169b0:	str	r0, [sp, #36]	; 0x24
   169b4:	str	r6, [sp, #40]	; 0x28
   169b8:	add	r6, r6, r7
   169bc:	sub	r0, fp, #44	; 0x2c
   169c0:	mov	r3, r4
   169c4:	add	r1, ip, r6
   169c8:	sub	r2, lr, r6
   169cc:	bl	19098 <__assert_fail@plt+0x7ba8>
   169d0:	cmp	r0, #0
   169d4:	beq	16ee0 <__assert_fail@plt+0x59f0>
   169d8:	cmn	r0, #1
   169dc:	beq	16ea0 <__assert_fail@plt+0x59b0>
   169e0:	ldr	lr, [sp, #80]	; 0x50
   169e4:	cmn	r0, #2
   169e8:	beq	16ea8 <__assert_fail@plt+0x59b8>
   169ec:	ldr	r2, [sp, #56]	; 0x38
   169f0:	cmp	r0, #2
   169f4:	mov	r1, #0
   169f8:	movwcc	r1, #1
   169fc:	eor	r2, r2, #1
   16a00:	orrs	r1, r2, r1
   16a04:	bne	16a50 <__assert_fail@plt+0x5560>
   16a08:	ldr	r1, [sp, #40]	; 0x28
   16a0c:	ldr	r2, [sp, #36]	; 0x24
   16a10:	add	ip, r2, r1
   16a14:	mov	r2, #1
   16a18:	ldrb	r3, [ip, r2]
   16a1c:	sub	r6, r3, #94	; 0x5e
   16a20:	cmp	r6, #30
   16a24:	bhi	16a38 <__assert_fail@plt+0x5548>
   16a28:	mov	r4, #1
   16a2c:	mov	r1, #1073741829	; 0x40000005
   16a30:	tst	r1, r4, lsl r6
   16a34:	bne	16fac <__assert_fail@plt+0x5abc>
   16a38:	sub	r3, r3, #91	; 0x5b
   16a3c:	cmp	r3, #2
   16a40:	bcc	16fac <__assert_fail@plt+0x5abc>
   16a44:	add	r2, r2, #1
   16a48:	cmp	r2, r0
   16a4c:	bcc	16a18 <__assert_fail@plt+0x5528>
   16a50:	ldr	r6, [sp, #40]	; 0x28
   16a54:	add	r6, r0, r6
   16a58:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16a5c:	bl	112a4 <iswprint@plt>
   16a60:	cmp	r0, #0
   16a64:	sub	r4, fp, #40	; 0x28
   16a68:	movwne	r0, #1
   16a6c:	and	sl, sl, r0
   16a70:	mov	r0, r4
   16a74:	bl	11250 <mbsinit@plt>
   16a78:	ldr	lr, [sp, #80]	; 0x50
   16a7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16a80:	cmp	r0, #0
   16a84:	beq	169b4 <__assert_fail@plt+0x54c4>
   16a88:	b	16ee8 <__assert_fail@plt+0x59f8>
   16a8c:	mvn	lr, #0
   16a90:	mov	r9, #0
   16a94:	b	1660c <__assert_fail@plt+0x511c>
   16a98:	ldr	r0, [sp, #24]
   16a9c:	cmp	r0, #0
   16aa0:	beq	16b58 <__assert_fail@plt+0x5668>
   16aa4:	add	r0, r7, #2
   16aa8:	cmp	r0, lr
   16aac:	bcs	16b58 <__assert_fail@plt+0x5668>
   16ab0:	add	r1, ip, r7
   16ab4:	ldrb	r1, [r1, #1]
   16ab8:	cmp	r1, #63	; 0x3f
   16abc:	bne	16b58 <__assert_fail@plt+0x5668>
   16ac0:	ldrb	r5, [ip, r0]
   16ac4:	sub	r1, r5, #33	; 0x21
   16ac8:	cmp	r1, #29
   16acc:	bhi	16b58 <__assert_fail@plt+0x5668>
   16ad0:	movw	r3, #20929	; 0x51c1
   16ad4:	mov	r2, #1
   16ad8:	movt	r3, #14336	; 0x3800
   16adc:	tst	r3, r2, lsl r1
   16ae0:	beq	16b58 <__assert_fail@plt+0x5668>
   16ae4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16ae8:	tst	r1, #1
   16aec:	bne	170c0 <__assert_fail@plt+0x5bd0>
   16af0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16af4:	mov	r7, r0
   16af8:	cmp	r8, r1
   16afc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16b00:	movcc	r1, #63	; 0x3f
   16b04:	strbcc	r1, [r2, r8]
   16b08:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16b0c:	add	r1, r8, #1
   16b10:	cmp	r1, r2
   16b14:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16b18:	movcc	r2, #34	; 0x22
   16b1c:	strbcc	r2, [r3, r1]
   16b20:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16b24:	add	r1, r8, #2
   16b28:	cmp	r1, r2
   16b2c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16b30:	movcc	r2, #34	; 0x22
   16b34:	strbcc	r2, [r3, r1]
   16b38:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16b3c:	add	r1, r8, #3
   16b40:	add	r8, r8, #4
   16b44:	cmp	r1, r2
   16b48:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16b4c:	movcc	r2, #63	; 0x3f
   16b50:	strbcc	r2, [r3, r1]
   16b54:	b	16b5c <__assert_fail@plt+0x566c>
   16b58:	mov	r5, #63	; 0x3f
   16b5c:	mov	sl, #0
   16b60:	b	1660c <__assert_fail@plt+0x511c>
   16b64:	str	r0, [sp, #40]	; 0x28
   16b68:	add	r0, r2, r7
   16b6c:	str	r6, [sp, #76]	; 0x4c
   16b70:	add	r1, r7, #1
   16b74:	ldr	lr, [sp, #80]	; 0x50
   16b78:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16b7c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16b80:	mov	r3, #0
   16b84:	str	r0, [sp, #36]	; 0x24
   16b88:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16b8c:	b	16c20 <__assert_fail@plt+0x5730>
   16b90:	str	r0, [sp, #76]	; 0x4c
   16b94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16b98:	cmp	r9, #0
   16b9c:	movwne	r9, #1
   16ba0:	mvn	r7, r0
   16ba4:	orr	r7, r7, r9
   16ba8:	tst	r7, #1
   16bac:	bne	16bfc <__assert_fail@plt+0x570c>
   16bb0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16bb4:	cmp	r8, r6
   16bb8:	bcs	16bd0 <__assert_fail@plt+0x56e0>
   16bbc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   16bc0:	mov	r2, r4
   16bc4:	mov	r4, #39	; 0x27
   16bc8:	strb	r4, [r7, r8]
   16bcc:	mov	r4, r2
   16bd0:	add	r7, r8, #1
   16bd4:	cmp	r7, r6
   16bd8:	bcs	16bf0 <__assert_fail@plt+0x5700>
   16bdc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16be0:	mov	r2, r4
   16be4:	mov	r4, #39	; 0x27
   16be8:	strb	r4, [r0, r7]
   16bec:	mov	r4, r2
   16bf0:	add	r8, r8, #2
   16bf4:	mov	r0, #0
   16bf8:	b	16c04 <__assert_fail@plt+0x5714>
   16bfc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16c00:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16c04:	cmp	r8, r6
   16c08:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16c0c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16c10:	strbcc	r5, [r2, r8]
   16c14:	add	r8, r8, #1
   16c18:	ldrb	r5, [ip, r1]
   16c1c:	add	r1, r1, #1
   16c20:	ldr	r2, [sp, #40]	; 0x28
   16c24:	tst	r2, #1
   16c28:	beq	16c64 <__assert_fail@plt+0x5774>
   16c2c:	ldr	r2, [sp, #76]	; 0x4c
   16c30:	str	r0, [fp, #-48]	; 0xffffffd0
   16c34:	tst	r2, #1
   16c38:	beq	16c5c <__assert_fail@plt+0x576c>
   16c3c:	cmp	r8, r6
   16c40:	bcs	16c58 <__assert_fail@plt+0x5768>
   16c44:	ldr	r6, [fp, #-56]	; 0xffffffc8
   16c48:	mov	r2, r4
   16c4c:	mov	r4, #92	; 0x5c
   16c50:	strb	r4, [r6, r8]
   16c54:	mov	r4, r2
   16c58:	add	r8, r8, #1
   16c5c:	mov	r0, #0
   16c60:	b	16d58 <__assert_fail@plt+0x5868>
   16c64:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16c68:	tst	r2, #1
   16c6c:	bne	16fb8 <__assert_fail@plt+0x5ac8>
   16c70:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16c74:	cmp	r7, #2
   16c78:	movwne	r3, #1
   16c7c:	orr	r3, r3, r0
   16c80:	tst	r3, #1
   16c84:	bne	16ce0 <__assert_fail@plt+0x57f0>
   16c88:	cmp	r8, r6
   16c8c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16c90:	movcc	r3, #39	; 0x27
   16c94:	strbcc	r3, [r2, r8]
   16c98:	add	r3, r8, #1
   16c9c:	cmp	r3, r6
   16ca0:	bcs	16cb8 <__assert_fail@plt+0x57c8>
   16ca4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16ca8:	mov	r7, r4
   16cac:	mov	r4, #36	; 0x24
   16cb0:	strb	r4, [r2, r3]
   16cb4:	mov	r4, r7
   16cb8:	add	r3, r8, #2
   16cbc:	cmp	r3, r6
   16cc0:	bcs	16cd8 <__assert_fail@plt+0x57e8>
   16cc4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16cc8:	mov	r7, r4
   16ccc:	mov	r4, #39	; 0x27
   16cd0:	strb	r4, [r2, r3]
   16cd4:	mov	r4, r7
   16cd8:	add	r8, r8, #3
   16cdc:	mov	r0, #1
   16ce0:	cmp	r8, r6
   16ce4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16ce8:	movcc	r3, #92	; 0x5c
   16cec:	strbcc	r3, [r2, r8]
   16cf0:	add	r3, r8, #1
   16cf4:	cmp	r3, r6
   16cf8:	bcs	16d18 <__assert_fail@plt+0x5828>
   16cfc:	mov	r2, r4
   16d00:	and	r7, r5, #192	; 0xc0
   16d04:	mov	r4, #48	; 0x30
   16d08:	orr	r7, r4, r7, lsr #6
   16d0c:	mov	r4, r2
   16d10:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16d14:	strb	r7, [r2, r3]
   16d18:	add	r3, r8, #2
   16d1c:	cmp	r3, r6
   16d20:	bcs	16d40 <__assert_fail@plt+0x5850>
   16d24:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16d28:	mov	r6, r4
   16d2c:	lsr	r7, r5, #3
   16d30:	mov	r4, #6
   16d34:	bfi	r7, r4, #3, #29
   16d38:	mov	r4, r6
   16d3c:	strb	r7, [r2, r3]
   16d40:	str	r0, [fp, #-48]	; 0xffffffd0
   16d44:	ldr	r0, [sp, #76]	; 0x4c
   16d48:	mov	r3, #6
   16d4c:	add	r8, r8, #3
   16d50:	bfi	r5, r3, #3, #29
   16d54:	mov	r3, #1
   16d58:	ldr	r2, [sp, #36]	; 0x24
   16d5c:	and	r9, r3, #1
   16d60:	cmp	r2, r1
   16d64:	bhi	16b90 <__assert_fail@plt+0x56a0>
   16d68:	cmp	r9, #0
   16d6c:	sub	r7, r1, #1
   16d70:	mov	r0, r5
   16d74:	movwne	r9, #1
   16d78:	cmp	r9, #0
   16d7c:	bne	16dc0 <__assert_fail@plt+0x58d0>
   16d80:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16d84:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16d88:	tst	r5, #1
   16d8c:	beq	16930 <__assert_fail@plt+0x5440>
   16d90:	cmp	r8, r6
   16d94:	mov	r5, #0
   16d98:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16d9c:	movcc	r1, #39	; 0x27
   16da0:	strbcc	r1, [r2, r8]
   16da4:	add	r1, r8, #1
   16da8:	add	r8, r8, #2
   16dac:	cmp	r1, r6
   16db0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16db4:	movcc	r2, #39	; 0x27
   16db8:	strbcc	r2, [r3, r1]
   16dbc:	b	16930 <__assert_fail@plt+0x5440>
   16dc0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16dc4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16dc8:	b	16930 <__assert_fail@plt+0x5440>
   16dcc:	cmp	r8, r1
   16dd0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16dd4:	movcc	r0, #39	; 0x27
   16dd8:	strbcc	r0, [r2, r8]
   16ddc:	add	r0, r8, #1
   16de0:	cmp	r0, r1
   16de4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16de8:	movcc	r2, #36	; 0x24
   16dec:	strbcc	r2, [r3, r0]
   16df0:	add	r0, r8, #2
   16df4:	cmp	r0, r1
   16df8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16dfc:	movcc	r2, #39	; 0x27
   16e00:	strbcc	r2, [r3, r0]
   16e04:	add	r0, r8, #3
   16e08:	mov	r3, #1
   16e0c:	cmp	r0, r1
   16e10:	add	r8, r0, #1
   16e14:	str	r3, [fp, #-48]	; 0xffffffd0
   16e18:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16e1c:	movcc	r1, #92	; 0x5c
   16e20:	strbcc	r1, [r2, r0]
   16e24:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16e28:	cmp	r1, #2
   16e2c:	beq	16e90 <__assert_fail@plt+0x59a0>
   16e30:	add	r1, r7, #1
   16e34:	mov	sl, #0
   16e38:	mov	r9, #1
   16e3c:	mov	r5, #48	; 0x30
   16e40:	cmp	r1, lr
   16e44:	bcs	1660c <__assert_fail@plt+0x511c>
   16e48:	ldrb	r1, [ip, r1]
   16e4c:	sub	r1, r1, #48	; 0x30
   16e50:	uxtb	r1, r1
   16e54:	cmp	r1, #9
   16e58:	bhi	1660c <__assert_fail@plt+0x511c>
   16e5c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16e60:	cmp	r8, r1
   16e64:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16e68:	movcc	r1, #48	; 0x30
   16e6c:	strbcc	r1, [r2, r8]
   16e70:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16e74:	add	r1, r0, #2
   16e78:	add	r8, r0, #3
   16e7c:	cmp	r1, r2
   16e80:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16e84:	movcc	r2, #48	; 0x30
   16e88:	strbcc	r2, [r3, r1]
   16e8c:	b	1660c <__assert_fail@plt+0x511c>
   16e90:	mov	r0, #48	; 0x30
   16e94:	mov	r9, #1
   16e98:	mov	sl, #0
   16e9c:	b	168a4 <__assert_fail@plt+0x53b4>
   16ea0:	mov	sl, #0
   16ea4:	b	16ee0 <__assert_fail@plt+0x59f0>
   16ea8:	mov	sl, #0
   16eac:	cmp	lr, r6
   16eb0:	bls	16ee0 <__assert_fail@plt+0x59f0>
   16eb4:	ldr	ip, [fp, #-84]	; 0xffffffac
   16eb8:	ldr	r6, [sp, #40]	; 0x28
   16ebc:	ldr	r0, [sp, #36]	; 0x24
   16ec0:	ldrb	r0, [r0, r6]
   16ec4:	cmp	r0, #0
   16ec8:	beq	16ee8 <__assert_fail@plt+0x59f8>
   16ecc:	add	r6, r6, #1
   16ed0:	add	r0, r7, r6
   16ed4:	cmp	r0, lr
   16ed8:	bcc	16ebc <__assert_fail@plt+0x59cc>
   16edc:	b	16ee8 <__assert_fail@plt+0x59f8>
   16ee0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ee4:	ldr	r6, [sp, #40]	; 0x28
   16ee8:	mov	r1, r6
   16eec:	ldr	r4, [sp, #20]
   16ef0:	ldr	r6, [sp, #76]	; 0x4c
   16ef4:	b	167e8 <__assert_fail@plt+0x52f8>
   16ef8:	mov	lr, r7
   16efc:	b	16f04 <__assert_fail@plt+0x5a14>
   16f00:	mvn	lr, #0
   16f04:	ldr	r9, [fp, #-64]	; 0xffffffc0
   16f08:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16f0c:	eor	r0, r9, #2
   16f10:	orr	r0, r0, r8
   16f14:	clz	r0, r0
   16f18:	lsr	r0, r0, #5
   16f1c:	tst	r1, r0
   16f20:	bne	1701c <__assert_fail@plt+0x5b2c>
   16f24:	mov	r0, r1
   16f28:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16f2c:	cmp	r9, #2
   16f30:	movwne	r1, #1
   16f34:	orr	r0, r0, r1
   16f38:	tst	r0, #1
   16f3c:	bne	1705c <__assert_fail@plt+0x5b6c>
   16f40:	ldr	r0, [sp, #52]	; 0x34
   16f44:	ldr	r1, [sp, #68]	; 0x44
   16f48:	str	lr, [sp, #80]	; 0x50
   16f4c:	eor	r0, r0, #1
   16f50:	tst	r0, #1
   16f54:	bne	1705c <__assert_fail@plt+0x5b6c>
   16f58:	tst	r4, #1
   16f5c:	bne	17024 <__assert_fail@plt+0x5b34>
   16f60:	mov	r7, #0
   16f64:	cmp	r1, #0
   16f68:	beq	17054 <__assert_fail@plt+0x5b64>
   16f6c:	ldr	r0, [sp, #84]	; 0x54
   16f70:	mov	r3, #0
   16f74:	cmp	r6, #0
   16f78:	mov	r2, #0
   16f7c:	mov	r4, r1
   16f80:	str	r3, [fp, #-72]	; 0xffffffb8
   16f84:	beq	160c0 <__assert_fail@plt+0x4bd0>
   16f88:	b	1705c <__assert_fail@plt+0x5b6c>
   16f8c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16f90:	b	16fb8 <__assert_fail@plt+0x5ac8>
   16f94:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f98:	mov	r2, #1
   16f9c:	mov	lr, r4
   16fa0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16fa4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16fa8:	b	16fbc <__assert_fail@plt+0x5acc>
   16fac:	ldr	ip, [fp, #-84]	; 0xffffffac
   16fb0:	mov	r7, #2
   16fb4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16fb8:	ldr	r2, [sp, #84]	; 0x54
   16fbc:	mov	r0, #0
   16fc0:	ldr	r1, [fp, #12]
   16fc4:	tst	r2, #1
   16fc8:	mov	r2, r7
   16fcc:	mov	r3, lr
   16fd0:	str	r0, [sp, #8]
   16fd4:	ldr	r0, [sp, #64]	; 0x40
   16fd8:	movwne	r2, #4
   16fdc:	cmp	r7, #2
   16fe0:	movne	r2, r7
   16fe4:	str	r2, [sp]
   16fe8:	mov	r2, ip
   16fec:	bic	r1, r1, #2
   16ff0:	str	r0, [sp, #12]
   16ff4:	ldr	r0, [sp, #72]	; 0x48
   16ff8:	str	r1, [sp, #4]
   16ffc:	mov	r1, r6
   17000:	str	r0, [sp, #16]
   17004:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17008:	bl	16048 <__assert_fail@plt+0x4b58>
   1700c:	mov	r8, r0
   17010:	mov	r0, r8
   17014:	sub	sp, fp, #28
   17018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1701c:	mov	r7, #2
   17020:	b	16fb8 <__assert_fail@plt+0x5ac8>
   17024:	mov	r0, #5
   17028:	ldr	r2, [fp, #-84]	; 0xffffffac
   1702c:	ldr	r3, [sp, #80]	; 0x50
   17030:	str	r0, [sp]
   17034:	ldr	r0, [fp, #12]
   17038:	str	r0, [sp, #4]
   1703c:	ldr	r0, [fp, #16]
   17040:	str	r0, [sp, #8]
   17044:	ldr	r0, [sp, #64]	; 0x40
   17048:	str	r0, [sp, #12]
   1704c:	ldr	r0, [sp, #72]	; 0x48
   17050:	b	17000 <__assert_fail@plt+0x5b10>
   17054:	mov	r0, #0
   17058:	str	r0, [fp, #-72]	; 0xffffffb8
   1705c:	ldr	r1, [sp, #92]	; 0x5c
   17060:	cmp	r1, #0
   17064:	beq	170a4 <__assert_fail@plt+0x5bb4>
   17068:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1706c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17070:	tst	r0, #1
   17074:	bne	170a8 <__assert_fail@plt+0x5bb8>
   17078:	ldrb	r0, [r1]
   1707c:	cmp	r0, #0
   17080:	beq	170a8 <__assert_fail@plt+0x5bb8>
   17084:	add	r1, r1, #1
   17088:	cmp	r8, r6
   1708c:	strbcc	r0, [r2, r8]
   17090:	add	r8, r8, #1
   17094:	ldrb	r0, [r1], #1
   17098:	cmp	r0, #0
   1709c:	bne	17088 <__assert_fail@plt+0x5b98>
   170a0:	b	170a8 <__assert_fail@plt+0x5bb8>
   170a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   170a8:	cmp	r8, r6
   170ac:	movcc	r0, #0
   170b0:	strbcc	r0, [r2, r8]
   170b4:	b	17010 <__assert_fail@plt+0x5b20>
   170b8:	mov	r2, #1
   170bc:	b	16fa0 <__assert_fail@plt+0x5ab0>
   170c0:	mov	r7, #5
   170c4:	b	16fb4 <__assert_fail@plt+0x5ac4>
   170c8:	bl	114a8 <abort@plt>
   170cc:	mov	r3, r2
   170d0:	mov	r2, #0
   170d4:	b	170d8 <__assert_fail@plt+0x5be8>
   170d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170dc:	add	fp, sp, #28
   170e0:	sub	sp, sp, #36	; 0x24
   170e4:	movw	r8, #45504	; 0xb1c0
   170e8:	cmp	r3, #0
   170ec:	mov	r4, r2
   170f0:	str	r2, [sp, #24]
   170f4:	mov	r5, r1
   170f8:	mov	r6, r0
   170fc:	str	r0, [sp, #20]
   17100:	movt	r8, #2
   17104:	movne	r8, r3
   17108:	bl	11394 <__errno_location@plt>
   1710c:	str	r0, [sp, #28]
   17110:	cmp	r4, #0
   17114:	add	sl, r8, #8
   17118:	ldm	r8, {r3, r9}
   1711c:	ldr	r7, [r0]
   17120:	ldr	r1, [r8, #40]	; 0x28
   17124:	ldr	r2, [r8, #44]	; 0x2c
   17128:	mov	r0, #0
   1712c:	orreq	r9, r9, #1
   17130:	str	r7, [sp, #32]
   17134:	mov	r7, r5
   17138:	stm	sp, {r3, r9, sl}
   1713c:	str	r1, [sp, #12]
   17140:	str	r2, [sp, #16]
   17144:	mov	r1, #0
   17148:	mov	r2, r6
   1714c:	mov	r3, r5
   17150:	bl	16048 <__assert_fail@plt+0x4b58>
   17154:	add	r4, r0, #1
   17158:	mov	r5, r0
   1715c:	mov	r0, r4
   17160:	bl	17ecc <__assert_fail@plt+0x69dc>
   17164:	mov	r6, r0
   17168:	ldr	r0, [r8]
   1716c:	ldr	r2, [r8, #44]	; 0x2c
   17170:	ldr	r1, [r8, #40]	; 0x28
   17174:	mov	r3, r7
   17178:	stm	sp, {r0, r9, sl}
   1717c:	str	r2, [sp, #16]
   17180:	str	r1, [sp, #12]
   17184:	mov	r0, r6
   17188:	mov	r1, r4
   1718c:	ldr	r2, [sp, #20]
   17190:	bl	16048 <__assert_fail@plt+0x4b58>
   17194:	ldr	r0, [sp, #24]
   17198:	ldr	r1, [sp, #32]
   1719c:	ldr	r2, [sp, #28]
   171a0:	cmp	r0, #0
   171a4:	str	r1, [r2]
   171a8:	strne	r5, [r0]
   171ac:	mov	r0, r6
   171b0:	sub	sp, fp, #28
   171b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   171bc:	add	fp, sp, #24
   171c0:	movw	r5, #45372	; 0xb13c
   171c4:	movw	r8, #45368	; 0xb138
   171c8:	movt	r5, #2
   171cc:	movt	r8, #2
   171d0:	ldr	r0, [r5]
   171d4:	ldr	r4, [r8]
   171d8:	cmp	r0, #2
   171dc:	blt	17208 <__assert_fail@plt+0x5d18>
   171e0:	add	r7, r4, #12
   171e4:	mov	r6, #0
   171e8:	ldr	r0, [r7, r6, lsl #3]
   171ec:	bl	12cb0 <__assert_fail@plt+0x17c0>
   171f0:	ldr	r1, [r5]
   171f4:	add	r2, r6, #2
   171f8:	add	r0, r6, #1
   171fc:	mov	r6, r0
   17200:	cmp	r2, r1
   17204:	blt	171e8 <__assert_fail@plt+0x5cf8>
   17208:	ldr	r0, [r4, #4]
   1720c:	movw	r7, #45552	; 0xb1f0
   17210:	movt	r7, #2
   17214:	cmp	r0, r7
   17218:	beq	17230 <__assert_fail@plt+0x5d40>
   1721c:	bl	12cb0 <__assert_fail@plt+0x17c0>
   17220:	movw	r0, #45376	; 0xb140
   17224:	mov	r6, #256	; 0x100
   17228:	movt	r0, #2
   1722c:	strd	r6, [r0]
   17230:	movw	r6, #45376	; 0xb140
   17234:	movt	r6, #2
   17238:	cmp	r4, r6
   1723c:	beq	1724c <__assert_fail@plt+0x5d5c>
   17240:	mov	r0, r4
   17244:	bl	12cb0 <__assert_fail@plt+0x17c0>
   17248:	str	r6, [r8]
   1724c:	mov	r0, #1
   17250:	str	r0, [r5]
   17254:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17258:	movw	r3, #45504	; 0xb1c0
   1725c:	mvn	r2, #0
   17260:	movt	r3, #2
   17264:	b	17268 <__assert_fail@plt+0x5d78>
   17268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1726c:	add	fp, sp, #28
   17270:	sub	sp, sp, #44	; 0x2c
   17274:	mov	r7, r3
   17278:	str	r2, [sp, #36]	; 0x24
   1727c:	str	r1, [sp, #32]
   17280:	mov	r5, r0
   17284:	bl	11394 <__errno_location@plt>
   17288:	cmp	r5, #0
   1728c:	blt	173f8 <__assert_fail@plt+0x5f08>
   17290:	cmn	r5, #-2147483647	; 0x80000001
   17294:	beq	173f8 <__assert_fail@plt+0x5f08>
   17298:	movw	r8, #45372	; 0xb13c
   1729c:	movw	r4, #45368	; 0xb138
   172a0:	str	r0, [sp, #28]
   172a4:	ldr	r0, [r0]
   172a8:	movt	r8, #2
   172ac:	movt	r4, #2
   172b0:	ldr	r1, [r8]
   172b4:	ldr	r6, [r4]
   172b8:	str	r0, [sp, #24]
   172bc:	cmp	r1, r5
   172c0:	ble	172cc <__assert_fail@plt+0x5ddc>
   172c4:	mov	sl, r6
   172c8:	b	17334 <__assert_fail@plt+0x5e44>
   172cc:	movw	r9, #45376	; 0xb140
   172d0:	mov	r0, #8
   172d4:	add	r2, r5, #1
   172d8:	str	r1, [fp, #-32]	; 0xffffffe0
   172dc:	mvn	r3, #-2147483648	; 0x80000000
   172e0:	movt	r9, #2
   172e4:	str	r0, [sp]
   172e8:	sub	r2, r2, r1
   172ec:	sub	r1, fp, #32
   172f0:	subs	r0, r6, r9
   172f4:	movne	r0, r6
   172f8:	bl	17ffc <__assert_fail@plt+0x6b0c>
   172fc:	cmp	r6, r9
   17300:	mov	sl, r0
   17304:	str	r0, [r4]
   17308:	ldrdeq	r0, [r9]
   1730c:	stmeq	sl, {r0, r1}
   17310:	ldr	r1, [r8]
   17314:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17318:	add	r0, sl, r1, lsl #3
   1731c:	sub	r1, r2, r1
   17320:	lsl	r2, r1, #3
   17324:	mov	r1, #0
   17328:	bl	113ac <memset@plt>
   1732c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17330:	str	r0, [r8]
   17334:	mov	r9, sl
   17338:	ldr	r6, [r9, r5, lsl #3]!
   1733c:	ldr	r4, [r9, #4]!
   17340:	ldm	r7, {r0, r1}
   17344:	ldr	r2, [r7, #40]	; 0x28
   17348:	ldr	r3, [r7, #44]	; 0x2c
   1734c:	orr	r8, r1, #1
   17350:	add	r1, r7, #8
   17354:	stm	sp, {r0, r8}
   17358:	add	r0, sp, #8
   1735c:	str	r1, [sp, #20]
   17360:	stm	r0, {r1, r2, r3}
   17364:	mov	r0, r4
   17368:	mov	r1, r6
   1736c:	ldr	r2, [sp, #32]
   17370:	ldr	r3, [sp, #36]	; 0x24
   17374:	bl	16048 <__assert_fail@plt+0x4b58>
   17378:	cmp	r6, r0
   1737c:	bhi	173e0 <__assert_fail@plt+0x5ef0>
   17380:	add	r6, r0, #1
   17384:	movw	r0, #45552	; 0xb1f0
   17388:	movt	r0, #2
   1738c:	str	r6, [sl, r5, lsl #3]
   17390:	cmp	r4, r0
   17394:	beq	173a0 <__assert_fail@plt+0x5eb0>
   17398:	mov	r0, r4
   1739c:	bl	12cb0 <__assert_fail@plt+0x17c0>
   173a0:	mov	r0, r6
   173a4:	bl	17ecc <__assert_fail@plt+0x69dc>
   173a8:	str	r0, [r9]
   173ac:	mov	r4, r0
   173b0:	add	r3, sp, #8
   173b4:	ldr	r0, [r7]
   173b8:	ldr	r1, [r7, #40]	; 0x28
   173bc:	ldr	r2, [r7, #44]	; 0x2c
   173c0:	stm	sp, {r0, r8}
   173c4:	ldr	r0, [sp, #20]
   173c8:	stm	r3, {r0, r1, r2}
   173cc:	mov	r0, r4
   173d0:	mov	r1, r6
   173d4:	ldr	r2, [sp, #32]
   173d8:	ldr	r3, [sp, #36]	; 0x24
   173dc:	bl	16048 <__assert_fail@plt+0x4b58>
   173e0:	ldr	r0, [sp, #28]
   173e4:	ldr	r1, [sp, #24]
   173e8:	str	r1, [r0]
   173ec:	mov	r0, r4
   173f0:	sub	sp, fp, #28
   173f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173f8:	bl	114a8 <abort@plt>
   173fc:	movw	r3, #45504	; 0xb1c0
   17400:	movt	r3, #2
   17404:	b	17268 <__assert_fail@plt+0x5d78>
   17408:	movw	r3, #45504	; 0xb1c0
   1740c:	mov	r1, r0
   17410:	mov	r0, #0
   17414:	mvn	r2, #0
   17418:	movt	r3, #2
   1741c:	b	17268 <__assert_fail@plt+0x5d78>
   17420:	movw	r3, #45504	; 0xb1c0
   17424:	mov	r2, r1
   17428:	mov	r1, r0
   1742c:	mov	r0, #0
   17430:	movt	r3, #2
   17434:	b	17268 <__assert_fail@plt+0x5d78>
   17438:	push	{fp, lr}
   1743c:	mov	fp, sp
   17440:	sub	sp, sp, #48	; 0x30
   17444:	vmov.i32	q8, #0	; 0x00000000
   17448:	mov	ip, #32
   1744c:	mov	r3, sp
   17450:	mov	lr, r2
   17454:	cmp	r1, #10
   17458:	add	r2, r3, #16
   1745c:	vst1.64	{d16-d17}, [r3], ip
   17460:	vst1.64	{d16-d17}, [r3]
   17464:	vst1.64	{d16-d17}, [r2]
   17468:	beq	17488 <__assert_fail@plt+0x5f98>
   1746c:	str	r1, [sp]
   17470:	mov	r3, sp
   17474:	mov	r1, lr
   17478:	mvn	r2, #0
   1747c:	bl	17268 <__assert_fail@plt+0x5d78>
   17480:	mov	sp, fp
   17484:	pop	{fp, pc}
   17488:	bl	114a8 <abort@plt>
   1748c:	push	{r4, sl, fp, lr}
   17490:	add	fp, sp, #8
   17494:	sub	sp, sp, #48	; 0x30
   17498:	mov	ip, r3
   1749c:	mov	r3, sp
   174a0:	vmov.i32	q8, #0	; 0x00000000
   174a4:	mov	lr, #32
   174a8:	cmp	r1, #10
   174ac:	add	r4, r3, #16
   174b0:	vst1.64	{d16-d17}, [r3], lr
   174b4:	vst1.64	{d16-d17}, [r3]
   174b8:	vst1.64	{d16-d17}, [r4]
   174bc:	beq	174dc <__assert_fail@plt+0x5fec>
   174c0:	str	r1, [sp]
   174c4:	mov	r1, r2
   174c8:	mov	r3, sp
   174cc:	mov	r2, ip
   174d0:	bl	17268 <__assert_fail@plt+0x5d78>
   174d4:	sub	sp, fp, #8
   174d8:	pop	{r4, sl, fp, pc}
   174dc:	bl	114a8 <abort@plt>
   174e0:	mov	r2, r1
   174e4:	mov	r1, r0
   174e8:	mov	r0, #0
   174ec:	b	17438 <__assert_fail@plt+0x5f48>
   174f0:	mov	r3, r2
   174f4:	mov	r2, r1
   174f8:	mov	r1, r0
   174fc:	mov	r0, #0
   17500:	b	1748c <__assert_fail@plt+0x5f9c>
   17504:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17508:	add	fp, sp, #24
   1750c:	sub	sp, sp, #48	; 0x30
   17510:	movw	r8, #45504	; 0xb1c0
   17514:	mov	lr, r0
   17518:	mov	r3, sp
   1751c:	mov	ip, r1
   17520:	movt	r8, #2
   17524:	mov	r1, r3
   17528:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1752c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   17530:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   17534:	stm	r1, {r0, r4, r5, r6, r7, r9}
   17538:	ubfx	r0, r2, #5, #3
   1753c:	and	r2, r2, #31
   17540:	mov	r4, #1
   17544:	add	r0, r3, r0, lsl #2
   17548:	ldr	r1, [r0, #8]
   1754c:	bic	r4, r4, r1, lsr r2
   17550:	eor	r1, r1, r4, lsl r2
   17554:	mov	r2, ip
   17558:	str	r1, [r0, #8]
   1755c:	mov	r0, #0
   17560:	mov	r1, lr
   17564:	bl	17268 <__assert_fail@plt+0x5d78>
   17568:	sub	sp, fp, #24
   1756c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17570:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17574:	add	fp, sp, #24
   17578:	sub	sp, sp, #48	; 0x30
   1757c:	movw	lr, #45504	; 0xb1c0
   17580:	mov	ip, r0
   17584:	mov	r3, sp
   17588:	movt	lr, #2
   1758c:	mov	r2, r3
   17590:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   17594:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   17598:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   1759c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   175a0:	ubfx	r0, r1, #5, #3
   175a4:	and	r1, r1, #31
   175a8:	mov	r7, #1
   175ac:	add	r0, r3, r0, lsl #2
   175b0:	ldr	r2, [r0, #8]
   175b4:	bic	r7, r7, r2, lsr r1
   175b8:	eor	r1, r2, r7, lsl r1
   175bc:	mvn	r2, #0
   175c0:	str	r1, [r0, #8]
   175c4:	mov	r0, #0
   175c8:	mov	r1, ip
   175cc:	bl	17268 <__assert_fail@plt+0x5d78>
   175d0:	sub	sp, fp, #24
   175d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175d8:	push	{r4, r5, r6, r7, fp, lr}
   175dc:	add	fp, sp, #16
   175e0:	sub	sp, sp, #48	; 0x30
   175e4:	movw	lr, #45504	; 0xb1c0
   175e8:	mov	ip, r0
   175ec:	mov	r3, sp
   175f0:	movt	lr, #2
   175f4:	mov	r2, r3
   175f8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   175fc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17600:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   17604:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17608:	mov	r1, ip
   1760c:	mvn	r2, #0
   17610:	ldr	r0, [sp, #12]
   17614:	orr	r0, r0, #67108864	; 0x4000000
   17618:	str	r0, [sp, #12]
   1761c:	mov	r0, #0
   17620:	bl	17268 <__assert_fail@plt+0x5d78>
   17624:	sub	sp, fp, #16
   17628:	pop	{r4, r5, r6, r7, fp, pc}
   1762c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17630:	add	fp, sp, #24
   17634:	sub	sp, sp, #48	; 0x30
   17638:	movw	r8, #45504	; 0xb1c0
   1763c:	mov	ip, r1
   17640:	mov	lr, r0
   17644:	mov	r3, sp
   17648:	movt	r8, #2
   1764c:	mov	r2, r3
   17650:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   17654:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17658:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1765c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17660:	mov	r1, lr
   17664:	mov	r2, ip
   17668:	ldr	r0, [sp, #12]
   1766c:	orr	r0, r0, #67108864	; 0x4000000
   17670:	str	r0, [sp, #12]
   17674:	mov	r0, #0
   17678:	bl	17268 <__assert_fail@plt+0x5d78>
   1767c:	sub	sp, fp, #24
   17680:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17684:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17688:	add	fp, sp, #24
   1768c:	sub	sp, sp, #96	; 0x60
   17690:	mov	lr, sp
   17694:	vmov.i32	q8, #0	; 0x00000000
   17698:	mov	ip, r2
   1769c:	cmp	r1, #10
   176a0:	add	r3, lr, #16
   176a4:	mov	r2, lr
   176a8:	vst1.64	{d16-d17}, [r3]
   176ac:	mov	r3, #28
   176b0:	vst1.64	{d16-d17}, [r2], r3
   176b4:	vst1.32	{d16-d17}, [r2]
   176b8:	beq	176f8 <__assert_fail@plt+0x6208>
   176bc:	str	r1, [sp, #48]	; 0x30
   176c0:	add	r3, sp, #48	; 0x30
   176c4:	ldm	lr!, {r2, r4, r5, r6, r7}
   176c8:	add	r1, r3, #4
   176cc:	stmia	r1!, {r2, r4, r5, r6, r7}
   176d0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   176d4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   176d8:	mvn	r2, #0
   176dc:	ldr	r1, [sp, #60]	; 0x3c
   176e0:	orr	r1, r1, #67108864	; 0x4000000
   176e4:	str	r1, [sp, #60]	; 0x3c
   176e8:	mov	r1, ip
   176ec:	bl	17268 <__assert_fail@plt+0x5d78>
   176f0:	sub	sp, fp, #24
   176f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   176f8:	bl	114a8 <abort@plt>
   176fc:	push	{fp, lr}
   17700:	mov	fp, sp
   17704:	sub	sp, sp, #8
   17708:	mvn	ip, #0
   1770c:	str	ip, [sp]
   17710:	bl	1771c <__assert_fail@plt+0x622c>
   17714:	mov	sp, fp
   17718:	pop	{fp, pc}
   1771c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17720:	add	fp, sp, #24
   17724:	sub	sp, sp, #48	; 0x30
   17728:	movw	ip, #45504	; 0xb1c0
   1772c:	mov	lr, r3
   17730:	mov	r3, sp
   17734:	cmp	r1, #0
   17738:	movt	ip, #2
   1773c:	cmpne	r2, #0
   17740:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   17744:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   17748:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1774c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   17750:	mov	r3, #10
   17754:	str	r3, [sp]
   17758:	bne	17760 <__assert_fail@plt+0x6270>
   1775c:	bl	114a8 <abort@plt>
   17760:	ldr	ip, [fp, #8]
   17764:	str	r2, [sp, #44]	; 0x2c
   17768:	str	r1, [sp, #40]	; 0x28
   1776c:	mov	r3, sp
   17770:	mov	r1, lr
   17774:	mov	r2, ip
   17778:	bl	17268 <__assert_fail@plt+0x5d78>
   1777c:	sub	sp, fp, #24
   17780:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17784:	push	{fp, lr}
   17788:	mov	fp, sp
   1778c:	sub	sp, sp, #8
   17790:	mov	r3, r2
   17794:	mov	r2, r1
   17798:	mov	r1, r0
   1779c:	mvn	r0, #0
   177a0:	str	r0, [sp]
   177a4:	mov	r0, #0
   177a8:	bl	1771c <__assert_fail@plt+0x622c>
   177ac:	mov	sp, fp
   177b0:	pop	{fp, pc}
   177b4:	push	{fp, lr}
   177b8:	mov	fp, sp
   177bc:	sub	sp, sp, #8
   177c0:	mov	ip, r2
   177c4:	mov	r2, r1
   177c8:	mov	r1, r0
   177cc:	str	r3, [sp]
   177d0:	mov	r0, #0
   177d4:	mov	r3, ip
   177d8:	bl	1771c <__assert_fail@plt+0x622c>
   177dc:	mov	sp, fp
   177e0:	pop	{fp, pc}
   177e4:	movw	r3, #45384	; 0xb148
   177e8:	movt	r3, #2
   177ec:	b	17268 <__assert_fail@plt+0x5d78>
   177f0:	movw	r3, #45384	; 0xb148
   177f4:	mov	r2, r1
   177f8:	mov	r1, r0
   177fc:	mov	r0, #0
   17800:	movt	r3, #2
   17804:	b	17268 <__assert_fail@plt+0x5d78>
   17808:	movw	r3, #45384	; 0xb148
   1780c:	mvn	r2, #0
   17810:	movt	r3, #2
   17814:	b	17268 <__assert_fail@plt+0x5d78>
   17818:	movw	r3, #45384	; 0xb148
   1781c:	mov	r1, r0
   17820:	mov	r0, #0
   17824:	mvn	r2, #0
   17828:	movt	r3, #2
   1782c:	b	17268 <__assert_fail@plt+0x5d78>
   17830:	push	{r4, r5, fp, lr}
   17834:	add	fp, sp, #8
   17838:	mov	r5, r0
   1783c:	mov	r4, r1
   17840:	mov	r0, #0
   17844:	mov	r2, #5
   17848:	mov	r1, r5
   1784c:	bl	11274 <dcgettext@plt>
   17850:	cmp	r0, r5
   17854:	popne	{r4, r5, fp, pc}
   17858:	bl	19060 <__assert_fail@plt+0x7b70>
   1785c:	ldrb	r1, [r0]
   17860:	and	r1, r1, #223	; 0xdf
   17864:	cmp	r1, #71	; 0x47
   17868:	beq	178d0 <__assert_fail@plt+0x63e0>
   1786c:	cmp	r1, #85	; 0x55
   17870:	bne	178f4 <__assert_fail@plt+0x6404>
   17874:	ldrb	r1, [r0, #1]
   17878:	and	r1, r1, #223	; 0xdf
   1787c:	cmp	r1, #84	; 0x54
   17880:	bne	178f4 <__assert_fail@plt+0x6404>
   17884:	ldrb	r1, [r0, #2]
   17888:	and	r1, r1, #223	; 0xdf
   1788c:	cmp	r1, #70	; 0x46
   17890:	ldrbeq	r1, [r0, #3]
   17894:	cmpeq	r1, #45	; 0x2d
   17898:	bne	178f4 <__assert_fail@plt+0x6404>
   1789c:	ldrb	r1, [r0, #4]
   178a0:	cmp	r1, #56	; 0x38
   178a4:	ldrbeq	r0, [r0, #5]
   178a8:	cmpeq	r0, #0
   178ac:	bne	178f4 <__assert_fail@plt+0x6404>
   178b0:	ldrb	r1, [r5]
   178b4:	movw	r2, #41994	; 0xa40a
   178b8:	movw	r0, #41998	; 0xa40e
   178bc:	movt	r2, #1
   178c0:	movt	r0, #1
   178c4:	cmp	r1, #96	; 0x60
   178c8:	moveq	r0, r2
   178cc:	pop	{r4, r5, fp, pc}
   178d0:	ldrb	r1, [r0, #1]
   178d4:	and	r1, r1, #223	; 0xdf
   178d8:	cmp	r1, #66	; 0x42
   178dc:	bne	178f4 <__assert_fail@plt+0x6404>
   178e0:	ldrb	r1, [r0, #2]
   178e4:	cmp	r1, #49	; 0x31
   178e8:	ldrbeq	r1, [r0, #3]
   178ec:	cmpeq	r1, #56	; 0x38
   178f0:	beq	17910 <__assert_fail@plt+0x6420>
   178f4:	movw	r1, #41988	; 0xa404
   178f8:	movw	r0, #41992	; 0xa408
   178fc:	cmp	r4, #9
   17900:	movt	r1, #1
   17904:	movt	r0, #1
   17908:	moveq	r0, r1
   1790c:	pop	{r4, r5, fp, pc}
   17910:	ldrb	r1, [r0, #4]
   17914:	cmp	r1, #48	; 0x30
   17918:	ldrbeq	r1, [r0, #5]
   1791c:	cmpeq	r1, #51	; 0x33
   17920:	bne	178f4 <__assert_fail@plt+0x6404>
   17924:	ldrb	r1, [r0, #6]
   17928:	cmp	r1, #48	; 0x30
   1792c:	ldrbeq	r0, [r0, #7]
   17930:	cmpeq	r0, #0
   17934:	bne	178f4 <__assert_fail@plt+0x6404>
   17938:	ldrb	r1, [r5]
   1793c:	movw	r2, #42002	; 0xa412
   17940:	movw	r0, #42006	; 0xa416
   17944:	movt	r2, #1
   17948:	movt	r0, #1
   1794c:	b	178c4 <__assert_fail@plt+0x63d4>
   17950:	push	{r4, sl, fp, lr}
   17954:	add	fp, sp, #8
   17958:	sub	sp, sp, #104	; 0x68
   1795c:	mov	r4, r0
   17960:	movw	r0, #42831	; 0xa74f
   17964:	mov	r1, sp
   17968:	movt	r0, #1
   1796c:	bl	19448 <__assert_fail@plt+0x7f58>
   17970:	mov	r1, r0
   17974:	mov	r0, #0
   17978:	cmp	r1, #0
   1797c:	bne	17994 <__assert_fail@plt+0x64a4>
   17980:	ldr	r0, [sp, #96]	; 0x60
   17984:	ldr	r1, [sp, #100]	; 0x64
   17988:	ldm	sp, {r2, r3}
   1798c:	stm	r4, {r0, r1, r2, r3}
   17990:	mov	r0, r4
   17994:	sub	sp, fp, #8
   17998:	pop	{r4, sl, fp, pc}
   1799c:	push	{r4, r5, r6, r7, fp, lr}
   179a0:	add	fp, sp, #16
   179a4:	mov	r4, r0
   179a8:	cmp	r0, #2
   179ac:	movhi	r0, r4
   179b0:	pophi	{r4, r5, r6, r7, fp, pc}
   179b4:	mov	r0, r4
   179b8:	bl	19134 <__assert_fail@plt+0x7c44>
   179bc:	mov	r5, r0
   179c0:	bl	11394 <__errno_location@plt>
   179c4:	ldr	r7, [r0]
   179c8:	mov	r6, r0
   179cc:	mov	r0, r4
   179d0:	bl	114b4 <close@plt>
   179d4:	mov	r0, r5
   179d8:	str	r7, [r6]
   179dc:	pop	{r4, r5, r6, r7, fp, pc}
   179e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   179e4:	add	fp, sp, #24
   179e8:	sub	sp, sp, #32
   179ec:	ldr	r6, [fp, #12]
   179f0:	ldr	r7, [fp, #8]
   179f4:	mov	r4, r2
   179f8:	mov	r8, r0
   179fc:	cmp	r1, #0
   17a00:	beq	17a28 <__assert_fail@plt+0x6538>
   17a04:	movw	r2, #42096	; 0xa470
   17a08:	mov	r5, r1
   17a0c:	str	r3, [sp, #4]
   17a10:	str	r4, [sp]
   17a14:	mov	r0, r8
   17a18:	mov	r1, #1
   17a1c:	movt	r2, #1
   17a20:	mov	r3, r5
   17a24:	b	17a40 <__assert_fail@plt+0x6550>
   17a28:	movw	r2, #42108	; 0xa47c
   17a2c:	str	r3, [sp]
   17a30:	mov	r0, r8
   17a34:	mov	r1, #1
   17a38:	mov	r3, r4
   17a3c:	movt	r2, #1
   17a40:	bl	113dc <__fprintf_chk@plt>
   17a44:	movw	r1, #42115	; 0xa483
   17a48:	mov	r0, #0
   17a4c:	mov	r2, #5
   17a50:	movt	r1, #1
   17a54:	bl	11274 <dcgettext@plt>
   17a58:	movw	r2, #42833	; 0xa751
   17a5c:	mov	r3, r0
   17a60:	movw	r0, #2022	; 0x7e6
   17a64:	mov	r1, #1
   17a68:	str	r0, [sp]
   17a6c:	movt	r2, #1
   17a70:	mov	r0, r8
   17a74:	bl	113dc <__fprintf_chk@plt>
   17a78:	movw	r4, #39587	; 0x9aa3
   17a7c:	mov	r1, r8
   17a80:	movt	r4, #1
   17a84:	mov	r0, r4
   17a88:	bl	111e4 <fputs_unlocked@plt>
   17a8c:	movw	r1, #42119	; 0xa487
   17a90:	mov	r0, #0
   17a94:	mov	r2, #5
   17a98:	movt	r1, #1
   17a9c:	bl	11274 <dcgettext@plt>
   17aa0:	movw	r3, #42290	; 0xa532
   17aa4:	mov	r2, r0
   17aa8:	mov	r0, r8
   17aac:	mov	r1, #1
   17ab0:	movt	r3, #1
   17ab4:	bl	113dc <__fprintf_chk@plt>
   17ab8:	mov	r0, r4
   17abc:	mov	r1, r8
   17ac0:	bl	111e4 <fputs_unlocked@plt>
   17ac4:	cmp	r6, #9
   17ac8:	bhi	17b2c <__assert_fail@plt+0x663c>
   17acc:	add	r0, pc, #0
   17ad0:	ldr	pc, [r0, r6, lsl #2]
   17ad4:	andeq	r7, r1, r4, lsl #26
   17ad8:	strdeq	r7, [r1], -ip
   17adc:	andeq	r7, r1, r8, lsr fp
   17ae0:	andeq	r7, r1, r0, ror #22
   17ae4:	andeq	r7, r1, r8, lsl #23
   17ae8:			; <UNDEFINED> instruction: 0x00017bb0
   17aec:	ldrdeq	r7, [r1], -r8
   17af0:	andeq	r7, r1, r0, lsl ip
   17af4:			; <UNDEFINED> instruction: 0x00017cb0
   17af8:	andeq	r7, r1, r8, asr ip
   17afc:	movw	r1, #42324	; 0xa554
   17b00:	mov	r0, #0
   17b04:	mov	r2, #5
   17b08:	movt	r1, #1
   17b0c:	bl	11274 <dcgettext@plt>
   17b10:	ldr	r3, [r7]
   17b14:	mov	r2, r0
   17b18:	mov	r0, r8
   17b1c:	mov	r1, #1
   17b20:	sub	sp, fp, #24
   17b24:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b28:	b	113dc <__fprintf_chk@plt>
   17b2c:	movw	r1, #42643	; 0xa693
   17b30:	movt	r1, #1
   17b34:	b	17c60 <__assert_fail@plt+0x6770>
   17b38:	movw	r1, #42340	; 0xa564
   17b3c:	mov	r0, #0
   17b40:	mov	r2, #5
   17b44:	movt	r1, #1
   17b48:	bl	11274 <dcgettext@plt>
   17b4c:	mov	r2, r0
   17b50:	ldr	r3, [r7]
   17b54:	ldr	r0, [r7, #4]
   17b58:	str	r0, [sp]
   17b5c:	b	17c4c <__assert_fail@plt+0x675c>
   17b60:	movw	r1, #42363	; 0xa57b
   17b64:	mov	r0, #0
   17b68:	mov	r2, #5
   17b6c:	movt	r1, #1
   17b70:	bl	11274 <dcgettext@plt>
   17b74:	ldr	r3, [r7]
   17b78:	mov	r2, r0
   17b7c:	ldmib	r7, {r0, r1}
   17b80:	stm	sp, {r0, r1}
   17b84:	b	17c4c <__assert_fail@plt+0x675c>
   17b88:	movw	r1, #42391	; 0xa597
   17b8c:	mov	r0, #0
   17b90:	mov	r2, #5
   17b94:	movt	r1, #1
   17b98:	bl	11274 <dcgettext@plt>
   17b9c:	ldr	r3, [r7]
   17ba0:	mov	r2, r0
   17ba4:	ldmib	r7, {r0, r1, r7}
   17ba8:	stm	sp, {r0, r1, r7}
   17bac:	b	17c4c <__assert_fail@plt+0x675c>
   17bb0:	movw	r1, #42423	; 0xa5b7
   17bb4:	mov	r0, #0
   17bb8:	mov	r2, #5
   17bbc:	movt	r1, #1
   17bc0:	bl	11274 <dcgettext@plt>
   17bc4:	ldr	r3, [r7]
   17bc8:	mov	r2, r0
   17bcc:	ldmib	r7, {r0, r1, r6, r7}
   17bd0:	stm	sp, {r0, r1, r6, r7}
   17bd4:	b	17c4c <__assert_fail@plt+0x675c>
   17bd8:	movw	r1, #42459	; 0xa5db
   17bdc:	mov	r0, #0
   17be0:	mov	r2, #5
   17be4:	movt	r1, #1
   17be8:	bl	11274 <dcgettext@plt>
   17bec:	ldr	r3, [r7]
   17bf0:	mov	r2, r0
   17bf4:	ldmib	r7, {r0, r1, r6}
   17bf8:	ldr	r5, [r7, #16]
   17bfc:	ldr	r7, [r7, #20]
   17c00:	stm	sp, {r0, r1, r6}
   17c04:	str	r5, [sp, #12]
   17c08:	str	r7, [sp, #16]
   17c0c:	b	17c4c <__assert_fail@plt+0x675c>
   17c10:	movw	r1, #42499	; 0xa603
   17c14:	mov	r0, #0
   17c18:	mov	r2, #5
   17c1c:	movt	r1, #1
   17c20:	bl	11274 <dcgettext@plt>
   17c24:	ldr	r3, [r7]
   17c28:	mov	r2, r0
   17c2c:	ldmib	r7, {r0, r1, r6}
   17c30:	ldr	r5, [r7, #16]
   17c34:	ldr	r4, [r7, #20]
   17c38:	ldr	r7, [r7, #24]
   17c3c:	stm	sp, {r0, r1, r6}
   17c40:	str	r5, [sp, #12]
   17c44:	str	r4, [sp, #16]
   17c48:	str	r7, [sp, #20]
   17c4c:	mov	r0, r8
   17c50:	mov	r1, #1
   17c54:	b	17d00 <__assert_fail@plt+0x6810>
   17c58:	movw	r1, #42591	; 0xa65f
   17c5c:	movt	r1, #1
   17c60:	mov	r0, #0
   17c64:	mov	r2, #5
   17c68:	bl	11274 <dcgettext@plt>
   17c6c:	mov	ip, r0
   17c70:	ldr	r3, [r7]
   17c74:	ldr	r0, [r7, #4]
   17c78:	ldr	r1, [r7, #8]
   17c7c:	ldr	r6, [r7, #12]
   17c80:	ldr	r5, [r7, #16]
   17c84:	ldr	r4, [r7, #20]
   17c88:	ldr	r2, [r7, #24]
   17c8c:	ldr	lr, [r7, #28]
   17c90:	ldr	r7, [r7, #32]
   17c94:	stm	sp, {r0, r1, r6}
   17c98:	str	r5, [sp, #12]
   17c9c:	str	r4, [sp, #16]
   17ca0:	str	r2, [sp, #20]
   17ca4:	str	lr, [sp, #24]
   17ca8:	str	r7, [sp, #28]
   17cac:	b	17cf4 <__assert_fail@plt+0x6804>
   17cb0:	movw	r1, #42543	; 0xa62f
   17cb4:	mov	r0, #0
   17cb8:	mov	r2, #5
   17cbc:	movt	r1, #1
   17cc0:	bl	11274 <dcgettext@plt>
   17cc4:	mov	ip, r0
   17cc8:	ldr	r3, [r7]
   17ccc:	ldmib	r7, {r0, r1, r6}
   17cd0:	ldr	r5, [r7, #16]
   17cd4:	ldr	r4, [r7, #20]
   17cd8:	ldr	r2, [r7, #24]
   17cdc:	ldr	r7, [r7, #28]
   17ce0:	stm	sp, {r0, r1, r6}
   17ce4:	str	r5, [sp, #12]
   17ce8:	str	r4, [sp, #16]
   17cec:	str	r2, [sp, #20]
   17cf0:	str	r7, [sp, #24]
   17cf4:	mov	r0, r8
   17cf8:	mov	r1, #1
   17cfc:	mov	r2, ip
   17d00:	bl	113dc <__fprintf_chk@plt>
   17d04:	sub	sp, fp, #24
   17d08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d0c:	push	{r4, sl, fp, lr}
   17d10:	add	fp, sp, #8
   17d14:	sub	sp, sp, #8
   17d18:	ldr	ip, [fp, #8]
   17d1c:	mov	lr, #0
   17d20:	ldr	r4, [ip, lr, lsl #2]
   17d24:	add	lr, lr, #1
   17d28:	cmp	r4, #0
   17d2c:	bne	17d20 <__assert_fail@plt+0x6830>
   17d30:	sub	r4, lr, #1
   17d34:	str	ip, [sp]
   17d38:	str	r4, [sp, #4]
   17d3c:	bl	179e0 <__assert_fail@plt+0x64f0>
   17d40:	sub	sp, fp, #8
   17d44:	pop	{r4, sl, fp, pc}
   17d48:	push	{r4, r5, fp, lr}
   17d4c:	add	fp, sp, #8
   17d50:	sub	sp, sp, #48	; 0x30
   17d54:	ldr	r4, [fp, #8]
   17d58:	mov	ip, #0
   17d5c:	add	lr, sp, #8
   17d60:	ldr	r5, [r4]
   17d64:	cmp	r5, #0
   17d68:	str	r5, [lr, ip, lsl #2]
   17d6c:	beq	17d80 <__assert_fail@plt+0x6890>
   17d70:	add	ip, ip, #1
   17d74:	add	r4, r4, #4
   17d78:	cmp	ip, #10
   17d7c:	bcc	17d60 <__assert_fail@plt+0x6870>
   17d80:	str	lr, [sp]
   17d84:	str	ip, [sp, #4]
   17d88:	bl	179e0 <__assert_fail@plt+0x64f0>
   17d8c:	sub	sp, fp, #8
   17d90:	pop	{r4, r5, fp, pc}
   17d94:	push	{fp, lr}
   17d98:	mov	fp, sp
   17d9c:	sub	sp, sp, #8
   17da0:	add	ip, fp, #8
   17da4:	str	ip, [sp, #4]
   17da8:	str	ip, [sp]
   17dac:	bl	17d48 <__assert_fail@plt+0x6858>
   17db0:	mov	sp, fp
   17db4:	pop	{fp, pc}
   17db8:	push	{fp, lr}
   17dbc:	mov	fp, sp
   17dc0:	movw	r0, #45452	; 0xb18c
   17dc4:	movt	r0, #2
   17dc8:	ldr	r1, [r0]
   17dcc:	movw	r0, #39587	; 0x9aa3
   17dd0:	movt	r0, #1
   17dd4:	bl	111e4 <fputs_unlocked@plt>
   17dd8:	movw	r1, #42703	; 0xa6cf
   17ddc:	mov	r0, #0
   17de0:	mov	r2, #5
   17de4:	movt	r1, #1
   17de8:	bl	11274 <dcgettext@plt>
   17dec:	movw	r2, #42723	; 0xa6e3
   17df0:	mov	r1, r0
   17df4:	mov	r0, #1
   17df8:	movt	r2, #1
   17dfc:	bl	113b8 <__printf_chk@plt>
   17e00:	movw	r1, #42745	; 0xa6f9
   17e04:	mov	r0, #0
   17e08:	mov	r2, #5
   17e0c:	movt	r1, #1
   17e10:	bl	11274 <dcgettext@plt>
   17e14:	movw	r2, #39860	; 0x9bb4
   17e18:	movw	r3, #40135	; 0x9cc7
   17e1c:	mov	r1, r0
   17e20:	mov	r0, #1
   17e24:	movt	r2, #1
   17e28:	movt	r3, #1
   17e2c:	bl	113b8 <__printf_chk@plt>
   17e30:	movw	r1, #42765	; 0xa70d
   17e34:	mov	r0, #0
   17e38:	mov	r2, #5
   17e3c:	movt	r1, #1
   17e40:	bl	11274 <dcgettext@plt>
   17e44:	movw	r2, #42804	; 0xa734
   17e48:	mov	r1, r0
   17e4c:	mov	r0, #1
   17e50:	movt	r2, #1
   17e54:	pop	{fp, lr}
   17e58:	b	113b8 <__printf_chk@plt>
   17e5c:	b	17e60 <__assert_fail@plt+0x6970>
   17e60:	push	{r4, r5, r6, sl, fp, lr}
   17e64:	add	fp, sp, #16
   17e68:	mov	r4, r2
   17e6c:	mov	r5, r1
   17e70:	mov	r6, r0
   17e74:	bl	190f8 <__assert_fail@plt+0x7c08>
   17e78:	cmp	r0, #0
   17e7c:	popne	{r4, r5, r6, sl, fp, pc}
   17e80:	cmp	r6, #0
   17e84:	beq	17e98 <__assert_fail@plt+0x69a8>
   17e88:	cmp	r5, #0
   17e8c:	cmpne	r4, #0
   17e90:	bne	17e98 <__assert_fail@plt+0x69a8>
   17e94:	pop	{r4, r5, r6, sl, fp, pc}
   17e98:	bl	182ec <__assert_fail@plt+0x6dfc>
   17e9c:	push	{fp, lr}
   17ea0:	mov	fp, sp
   17ea4:	bl	18ab8 <__assert_fail@plt+0x75c8>
   17ea8:	cmp	r0, #0
   17eac:	popne	{fp, pc}
   17eb0:	bl	182ec <__assert_fail@plt+0x6dfc>
   17eb4:	push	{fp, lr}
   17eb8:	mov	fp, sp
   17ebc:	bl	18ab8 <__assert_fail@plt+0x75c8>
   17ec0:	cmp	r0, #0
   17ec4:	popne	{fp, pc}
   17ec8:	bl	182ec <__assert_fail@plt+0x6dfc>
   17ecc:	push	{fp, lr}
   17ed0:	mov	fp, sp
   17ed4:	bl	18ab8 <__assert_fail@plt+0x75c8>
   17ed8:	cmp	r0, #0
   17edc:	popne	{fp, pc}
   17ee0:	bl	182ec <__assert_fail@plt+0x6dfc>
   17ee4:	push	{r4, r5, fp, lr}
   17ee8:	add	fp, sp, #8
   17eec:	mov	r4, r1
   17ef0:	mov	r5, r0
   17ef4:	bl	18ae8 <__assert_fail@plt+0x75f8>
   17ef8:	cmp	r0, #0
   17efc:	popne	{r4, r5, fp, pc}
   17f00:	cmp	r5, #0
   17f04:	beq	17f14 <__assert_fail@plt+0x6a24>
   17f08:	cmp	r4, #0
   17f0c:	bne	17f14 <__assert_fail@plt+0x6a24>
   17f10:	pop	{r4, r5, fp, pc}
   17f14:	bl	182ec <__assert_fail@plt+0x6dfc>
   17f18:	push	{fp, lr}
   17f1c:	mov	fp, sp
   17f20:	cmp	r1, #0
   17f24:	orreq	r1, r1, #1
   17f28:	bl	18ae8 <__assert_fail@plt+0x75f8>
   17f2c:	cmp	r0, #0
   17f30:	popne	{fp, pc}
   17f34:	bl	182ec <__assert_fail@plt+0x6dfc>
   17f38:	push	{fp, lr}
   17f3c:	mov	fp, sp
   17f40:	clz	r3, r2
   17f44:	lsr	ip, r3, #5
   17f48:	clz	r3, r1
   17f4c:	lsr	r3, r3, #5
   17f50:	orrs	r3, r3, ip
   17f54:	movwne	r1, #1
   17f58:	movwne	r2, #1
   17f5c:	bl	190f8 <__assert_fail@plt+0x7c08>
   17f60:	cmp	r0, #0
   17f64:	popne	{fp, pc}
   17f68:	bl	182ec <__assert_fail@plt+0x6dfc>
   17f6c:	push	{fp, lr}
   17f70:	mov	fp, sp
   17f74:	mov	r2, r1
   17f78:	mov	r1, r0
   17f7c:	mov	r0, #0
   17f80:	bl	190f8 <__assert_fail@plt+0x7c08>
   17f84:	cmp	r0, #0
   17f88:	popne	{fp, pc}
   17f8c:	bl	182ec <__assert_fail@plt+0x6dfc>
   17f90:	mov	r2, r1
   17f94:	mov	r1, r0
   17f98:	mov	r0, #0
   17f9c:	b	17f38 <__assert_fail@plt+0x6a48>
   17fa0:	mov	r2, #1
   17fa4:	b	17fa8 <__assert_fail@plt+0x6ab8>
   17fa8:	push	{r4, r5, fp, lr}
   17fac:	add	fp, sp, #8
   17fb0:	ldr	r5, [r1]
   17fb4:	mov	r4, r1
   17fb8:	cmp	r0, #0
   17fbc:	beq	17fd4 <__assert_fail@plt+0x6ae4>
   17fc0:	mov	r1, #1
   17fc4:	add	r1, r1, r5, lsr #1
   17fc8:	adds	r5, r5, r1
   17fcc:	bcc	17fec <__assert_fail@plt+0x6afc>
   17fd0:	bl	182ec <__assert_fail@plt+0x6dfc>
   17fd4:	cmp	r5, #0
   17fd8:	bne	17fec <__assert_fail@plt+0x6afc>
   17fdc:	mov	r1, #64	; 0x40
   17fe0:	cmp	r2, #64	; 0x40
   17fe4:	udiv	r5, r1, r2
   17fe8:	addhi	r5, r5, #1
   17fec:	mov	r1, r5
   17ff0:	bl	17e60 <__assert_fail@plt+0x6970>
   17ff4:	str	r5, [r4]
   17ff8:	pop	{r4, r5, fp, pc}
   17ffc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18000:	add	fp, sp, #24
   18004:	ldr	r6, [r1]
   18008:	mov	r8, r1
   1800c:	ldr	r4, [fp, #8]
   18010:	add	r1, r6, r6, asr #1
   18014:	cmp	r1, r6
   18018:	mvnvs	r1, #-2147483648	; 0x80000000
   1801c:	cmp	r1, r3
   18020:	mov	r5, r1
   18024:	movgt	r5, r3
   18028:	cmn	r3, #1
   1802c:	movle	r5, r1
   18030:	cmn	r4, #1
   18034:	ble	18054 <__assert_fail@plt+0x6b64>
   18038:	cmp	r4, #0
   1803c:	beq	180a8 <__assert_fail@plt+0x6bb8>
   18040:	cmn	r5, #1
   18044:	ble	1807c <__assert_fail@plt+0x6b8c>
   18048:	mvn	r7, #-2147483648	; 0x80000000
   1804c:	udiv	r1, r7, r4
   18050:	b	18070 <__assert_fail@plt+0x6b80>
   18054:	cmn	r5, #1
   18058:	ble	18098 <__assert_fail@plt+0x6ba8>
   1805c:	cmn	r4, #1
   18060:	beq	180a8 <__assert_fail@plt+0x6bb8>
   18064:	mov	r1, #-2147483648	; 0x80000000
   18068:	mvn	r7, #-2147483648	; 0x80000000
   1806c:	sdiv	r1, r1, r4
   18070:	cmp	r1, r5
   18074:	bge	180a8 <__assert_fail@plt+0x6bb8>
   18078:	b	180b8 <__assert_fail@plt+0x6bc8>
   1807c:	beq	180a8 <__assert_fail@plt+0x6bb8>
   18080:	mov	r1, #-2147483648	; 0x80000000
   18084:	mvn	r7, #-2147483648	; 0x80000000
   18088:	sdiv	r1, r1, r5
   1808c:	cmp	r1, r4
   18090:	bge	180a8 <__assert_fail@plt+0x6bb8>
   18094:	b	180b8 <__assert_fail@plt+0x6bc8>
   18098:	mvn	r7, #-2147483648	; 0x80000000
   1809c:	sdiv	r1, r7, r4
   180a0:	cmp	r5, r1
   180a4:	blt	180b8 <__assert_fail@plt+0x6bc8>
   180a8:	mul	r1, r5, r4
   180ac:	mov	r7, #64	; 0x40
   180b0:	cmp	r1, #63	; 0x3f
   180b4:	bgt	180c0 <__assert_fail@plt+0x6bd0>
   180b8:	sdiv	r5, r7, r4
   180bc:	mul	r1, r5, r4
   180c0:	cmp	r0, #0
   180c4:	moveq	r7, #0
   180c8:	streq	r7, [r8]
   180cc:	sub	r7, r5, r6
   180d0:	cmp	r7, r2
   180d4:	bge	18178 <__assert_fail@plt+0x6c88>
   180d8:	add	r5, r6, r2
   180dc:	mov	r2, #0
   180e0:	mov	r1, #0
   180e4:	cmp	r5, r3
   180e8:	movwgt	r2, #1
   180ec:	cmn	r3, #1
   180f0:	movwgt	r1, #1
   180f4:	cmp	r5, r6
   180f8:	bvs	18160 <__assert_fail@plt+0x6c70>
   180fc:	ands	r1, r1, r2
   18100:	bne	18160 <__assert_fail@plt+0x6c70>
   18104:	cmn	r4, #1
   18108:	ble	18128 <__assert_fail@plt+0x6c38>
   1810c:	cmp	r4, #0
   18110:	beq	18174 <__assert_fail@plt+0x6c84>
   18114:	cmn	r5, #1
   18118:	ble	1814c <__assert_fail@plt+0x6c5c>
   1811c:	mvn	r1, #-2147483648	; 0x80000000
   18120:	udiv	r1, r1, r4
   18124:	b	18140 <__assert_fail@plt+0x6c50>
   18128:	cmn	r5, #1
   1812c:	ble	18164 <__assert_fail@plt+0x6c74>
   18130:	cmn	r4, #1
   18134:	beq	18174 <__assert_fail@plt+0x6c84>
   18138:	mov	r1, #-2147483648	; 0x80000000
   1813c:	sdiv	r1, r1, r4
   18140:	cmp	r1, r5
   18144:	bge	18174 <__assert_fail@plt+0x6c84>
   18148:	b	18160 <__assert_fail@plt+0x6c70>
   1814c:	beq	18174 <__assert_fail@plt+0x6c84>
   18150:	mov	r1, #-2147483648	; 0x80000000
   18154:	sdiv	r1, r1, r5
   18158:	cmp	r1, r4
   1815c:	bge	18174 <__assert_fail@plt+0x6c84>
   18160:	bl	182ec <__assert_fail@plt+0x6dfc>
   18164:	mvn	r1, #-2147483648	; 0x80000000
   18168:	sdiv	r1, r1, r4
   1816c:	cmp	r5, r1
   18170:	blt	18160 <__assert_fail@plt+0x6c70>
   18174:	mul	r1, r5, r4
   18178:	bl	17ee4 <__assert_fail@plt+0x69f4>
   1817c:	str	r5, [r8]
   18180:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18184:	push	{fp, lr}
   18188:	mov	fp, sp
   1818c:	mov	r1, #1
   18190:	bl	18a64 <__assert_fail@plt+0x7574>
   18194:	cmp	r0, #0
   18198:	popne	{fp, pc}
   1819c:	bl	182ec <__assert_fail@plt+0x6dfc>
   181a0:	push	{fp, lr}
   181a4:	mov	fp, sp
   181a8:	bl	18a64 <__assert_fail@plt+0x7574>
   181ac:	cmp	r0, #0
   181b0:	popne	{fp, pc}
   181b4:	bl	182ec <__assert_fail@plt+0x6dfc>
   181b8:	push	{fp, lr}
   181bc:	mov	fp, sp
   181c0:	mov	r1, #1
   181c4:	bl	18a64 <__assert_fail@plt+0x7574>
   181c8:	cmp	r0, #0
   181cc:	popne	{fp, pc}
   181d0:	bl	182ec <__assert_fail@plt+0x6dfc>
   181d4:	push	{fp, lr}
   181d8:	mov	fp, sp
   181dc:	bl	18a64 <__assert_fail@plt+0x7574>
   181e0:	cmp	r0, #0
   181e4:	popne	{fp, pc}
   181e8:	bl	182ec <__assert_fail@plt+0x6dfc>
   181ec:	push	{r4, r5, r6, sl, fp, lr}
   181f0:	add	fp, sp, #16
   181f4:	mov	r5, r0
   181f8:	mov	r0, r1
   181fc:	mov	r4, r1
   18200:	bl	18ab8 <__assert_fail@plt+0x75c8>
   18204:	cmp	r0, #0
   18208:	beq	18224 <__assert_fail@plt+0x6d34>
   1820c:	mov	r1, r5
   18210:	mov	r2, r4
   18214:	mov	r6, r0
   18218:	bl	11244 <memcpy@plt>
   1821c:	mov	r0, r6
   18220:	pop	{r4, r5, r6, sl, fp, pc}
   18224:	bl	182ec <__assert_fail@plt+0x6dfc>
   18228:	push	{r4, r5, r6, sl, fp, lr}
   1822c:	add	fp, sp, #16
   18230:	mov	r5, r0
   18234:	mov	r0, r1
   18238:	mov	r4, r1
   1823c:	bl	18ab8 <__assert_fail@plt+0x75c8>
   18240:	cmp	r0, #0
   18244:	beq	18260 <__assert_fail@plt+0x6d70>
   18248:	mov	r1, r5
   1824c:	mov	r2, r4
   18250:	mov	r6, r0
   18254:	bl	11244 <memcpy@plt>
   18258:	mov	r0, r6
   1825c:	pop	{r4, r5, r6, sl, fp, pc}
   18260:	bl	182ec <__assert_fail@plt+0x6dfc>
   18264:	push	{r4, r5, r6, sl, fp, lr}
   18268:	add	fp, sp, #16
   1826c:	mov	r5, r0
   18270:	add	r0, r1, #1
   18274:	mov	r4, r1
   18278:	bl	18ab8 <__assert_fail@plt+0x75c8>
   1827c:	cmp	r0, #0
   18280:	beq	182a8 <__assert_fail@plt+0x6db8>
   18284:	mov	r6, r0
   18288:	mov	r0, #0
   1828c:	mov	r1, r5
   18290:	mov	r2, r4
   18294:	strb	r0, [r6, r4]
   18298:	mov	r0, r6
   1829c:	bl	11244 <memcpy@plt>
   182a0:	mov	r0, r6
   182a4:	pop	{r4, r5, r6, sl, fp, pc}
   182a8:	bl	182ec <__assert_fail@plt+0x6dfc>
   182ac:	push	{r4, r5, r6, sl, fp, lr}
   182b0:	add	fp, sp, #16
   182b4:	mov	r4, r0
   182b8:	bl	11364 <strlen@plt>
   182bc:	add	r5, r0, #1
   182c0:	mov	r0, r5
   182c4:	bl	18ab8 <__assert_fail@plt+0x75c8>
   182c8:	cmp	r0, #0
   182cc:	beq	182e8 <__assert_fail@plt+0x6df8>
   182d0:	mov	r1, r4
   182d4:	mov	r2, r5
   182d8:	mov	r6, r0
   182dc:	bl	11244 <memcpy@plt>
   182e0:	mov	r0, r6
   182e4:	pop	{r4, r5, r6, sl, fp, pc}
   182e8:	bl	182ec <__assert_fail@plt+0x6dfc>
   182ec:	push	{fp, lr}
   182f0:	mov	fp, sp
   182f4:	movw	r0, #45364	; 0xb134
   182f8:	movw	r1, #42880	; 0xa780
   182fc:	mov	r2, #5
   18300:	movt	r0, #2
   18304:	movt	r1, #1
   18308:	ldr	r4, [r0]
   1830c:	mov	r0, #0
   18310:	bl	11274 <dcgettext@plt>
   18314:	movw	r2, #40427	; 0x9deb
   18318:	mov	r3, r0
   1831c:	mov	r0, r4
   18320:	mov	r1, #0
   18324:	movt	r2, #1
   18328:	bl	112f8 <error@plt>
   1832c:	bl	114a8 <abort@plt>
   18330:	push	{fp, lr}
   18334:	mov	fp, sp
   18338:	orr	r1, r1, #512	; 0x200
   1833c:	bl	12cd8 <__assert_fail@plt+0x17e8>
   18340:	cmp	r0, #0
   18344:	popne	{fp, pc}
   18348:	bl	11394 <__errno_location@plt>
   1834c:	ldr	r0, [r0]
   18350:	cmp	r0, #22
   18354:	bne	18378 <__assert_fail@plt+0x6e88>
   18358:	movw	r0, #42897	; 0xa791
   1835c:	movw	r1, #42913	; 0xa7a1
   18360:	movw	r3, #42924	; 0xa7ac
   18364:	mov	r2, #41	; 0x29
   18368:	movt	r0, #1
   1836c:	movt	r1, #1
   18370:	movt	r3, #1
   18374:	bl	114f0 <__assert_fail@plt>
   18378:	bl	182ec <__assert_fail@plt+0x6dfc>
   1837c:	ldr	r0, [r0, #48]	; 0x30
   18380:	and	r0, r0, #17
   18384:	cmp	r0, #16
   18388:	moveq	r0, #1
   1838c:	bxeq	lr
   18390:	cmp	r0, #17
   18394:	movne	r0, #0
   18398:	bxne	lr
   1839c:	ldr	r0, [r1, #48]	; 0x30
   183a0:	cmp	r0, #0
   183a4:	movwne	r0, #1
   183a8:	bx	lr
   183ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183b0:	add	fp, sp, #28
   183b4:	sub	sp, sp, #20
   183b8:	cmp	r2, #37	; 0x25
   183bc:	bcs	18a44 <__assert_fail@plt+0x7554>
   183c0:	mov	r8, r3
   183c4:	mov	r5, r2
   183c8:	mov	r6, r1
   183cc:	mov	r4, r0
   183d0:	bl	11394 <__errno_location@plt>
   183d4:	mov	r7, r0
   183d8:	mov	r0, #0
   183dc:	str	r0, [r7]
   183e0:	bl	1134c <__ctype_b_loc@plt>
   183e4:	ldr	r1, [r0]
   183e8:	mov	r2, r4
   183ec:	ldrb	r0, [r2], #1
   183f0:	add	r3, r1, r0, lsl #1
   183f4:	ldrb	r3, [r3, #1]
   183f8:	tst	r3, #32
   183fc:	bne	183ec <__assert_fail@plt+0x6efc>
   18400:	add	sl, sp, #16
   18404:	cmp	r6, #0
   18408:	movne	sl, r6
   1840c:	mov	r6, #4
   18410:	cmp	r0, #45	; 0x2d
   18414:	beq	18a38 <__assert_fail@plt+0x7548>
   18418:	mov	r0, r4
   1841c:	mov	r1, sl
   18420:	mov	r2, r5
   18424:	str	r8, [sp, #12]
   18428:	bl	113d0 <strtoumax@plt>
   1842c:	ldr	r5, [sl]
   18430:	cmp	r5, r4
   18434:	beq	1845c <__assert_fail@plt+0x6f6c>
   18438:	mov	r8, r0
   1843c:	ldr	r0, [r7]
   18440:	mov	r9, r1
   18444:	cmp	r0, #0
   18448:	beq	1848c <__assert_fail@plt+0x6f9c>
   1844c:	cmp	r0, #34	; 0x22
   18450:	bne	18a38 <__assert_fail@plt+0x7548>
   18454:	mov	r6, #1
   18458:	b	18490 <__assert_fail@plt+0x6fa0>
   1845c:	ldr	r0, [fp, #8]
   18460:	cmp	r0, #0
   18464:	ldrbne	r1, [r4]
   18468:	cmpne	r1, #0
   1846c:	beq	18a38 <__assert_fail@plt+0x7548>
   18470:	bl	11370 <strchr@plt>
   18474:	cmp	r0, #0
   18478:	beq	18a38 <__assert_fail@plt+0x7548>
   1847c:	mov	r6, #0
   18480:	mov	r8, #1
   18484:	mov	r9, #0
   18488:	b	1849c <__assert_fail@plt+0x6fac>
   1848c:	mov	r6, r0
   18490:	ldr	r0, [fp, #8]
   18494:	cmp	r0, #0
   18498:	beq	18a30 <__assert_fail@plt+0x7540>
   1849c:	ldrb	r7, [r5]
   184a0:	cmp	r7, #0
   184a4:	beq	18a30 <__assert_fail@plt+0x7540>
   184a8:	ldr	r0, [fp, #8]
   184ac:	mov	r1, r7
   184b0:	bl	11370 <strchr@plt>
   184b4:	cmp	r0, #0
   184b8:	beq	185c0 <__assert_fail@plt+0x70d0>
   184bc:	sub	r0, r7, #69	; 0x45
   184c0:	mov	r1, #1
   184c4:	mov	r3, #0
   184c8:	mov	r4, #1024	; 0x400
   184cc:	cmp	r0, #21
   184d0:	str	r1, [sp, #8]
   184d4:	bhi	184ec <__assert_fail@plt+0x6ffc>
   184d8:	movw	r2, #35141	; 0x8945
   184dc:	mov	r1, #1
   184e0:	movt	r2, #48	; 0x30
   184e4:	tst	r2, r1, lsl r0
   184e8:	bne	18508 <__assert_fail@plt+0x7018>
   184ec:	sub	r0, r7, #103	; 0x67
   184f0:	cmp	r0, #13
   184f4:	bhi	1853c <__assert_fail@plt+0x704c>
   184f8:	mov	r1, #1
   184fc:	movw	r2, #8273	; 0x2051
   18500:	tst	r2, r1, lsl r0
   18504:	beq	1853c <__assert_fail@plt+0x704c>
   18508:	ldr	r0, [fp, #8]
   1850c:	mov	r1, #48	; 0x30
   18510:	bl	11370 <strchr@plt>
   18514:	cmp	r0, #0
   18518:	beq	18538 <__assert_fail@plt+0x7048>
   1851c:	ldrb	r0, [r5, #1]
   18520:	cmp	r0, #66	; 0x42
   18524:	cmpne	r0, #68	; 0x44
   18528:	bne	18650 <__assert_fail@plt+0x7160>
   1852c:	mov	r4, #1000	; 0x3e8
   18530:	mov	r0, #2
   18534:	str	r0, [sp, #8]
   18538:	mov	r3, #0
   1853c:	cmp	r7, #89	; 0x59
   18540:	stm	sp, {r5, r6}
   18544:	bgt	185cc <__assert_fail@plt+0x70dc>
   18548:	sub	r0, r7, #66	; 0x42
   1854c:	cmp	r0, #14
   18550:	bhi	18674 <__assert_fail@plt+0x7184>
   18554:	add	r1, pc, #0
   18558:	ldr	pc, [r1, r0, lsl #2]
   1855c:	muleq	r1, r8, r5
   18560:	andeq	r8, r1, r4, lsr #18
   18564:	andeq	r8, r1, r4, lsr #18
   18568:	andeq	r8, r1, r8, lsr r9
   1856c:	andeq	r8, r1, r4, lsr #18
   18570:	andeq	r8, r1, r8, lsr #14
   18574:	andeq	r8, r1, r4, lsr #18
   18578:	andeq	r8, r1, r4, lsr #18
   1857c:	andeq	r8, r1, r4, lsr #18
   18580:	muleq	r1, r4, r7
   18584:	andeq	r8, r1, r4, lsr #18
   18588:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1858c:	andeq	r8, r1, r4, lsr #18
   18590:	andeq	r8, r1, r4, lsr #18
   18594:	andeq	r8, r1, r4, lsr #19
   18598:	mov	r1, #0
   1859c:	lsl	r3, r9, #10
   185a0:	lsl	r0, r8, #10
   185a4:	lsr	r2, r9, #22
   185a8:	cmp	r1, r9, lsr #22
   185ac:	orr	r3, r3, r8, lsr #22
   185b0:	mvnne	r0, #0
   185b4:	movwne	r2, #1
   185b8:	cmp	r1, r9, lsr #22
   185bc:	b	18640 <__assert_fail@plt+0x7150>
   185c0:	ldr	r0, [sp, #12]
   185c4:	orr	r6, r6, #2
   185c8:	b	18a34 <__assert_fail@plt+0x7544>
   185cc:	cmp	r7, #115	; 0x73
   185d0:	bgt	186f0 <__assert_fail@plt+0x7200>
   185d4:	sub	r0, r7, #98	; 0x62
   185d8:	cmp	r0, #11
   185dc:	bhi	188b0 <__assert_fail@plt+0x73c0>
   185e0:	add	r1, pc, #4
   185e4:	mov	r2, #0
   185e8:	ldr	pc, [r1, r0, lsl #2]
   185ec:	andeq	r8, r1, ip, lsl r6
   185f0:	andeq	r8, r1, ip, lsl #20
   185f4:	andeq	r8, r1, r4, lsr #18
   185f8:	andeq	r8, r1, r4, lsr #18
   185fc:	andeq	r8, r1, r4, lsr #18
   18600:	andeq	r8, r1, r8, lsr #14
   18604:	andeq	r8, r1, r4, lsr #18
   18608:	andeq	r8, r1, r4, lsr #18
   1860c:	andeq	r8, r1, r4, lsr #18
   18610:	muleq	r1, r4, r7
   18614:	andeq	r8, r1, r4, lsr #18
   18618:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1861c:	mov	r1, #0
   18620:	lsl	r3, r9, #9
   18624:	lsl	r0, r8, #9
   18628:	lsr	r2, r9, #23
   1862c:	cmp	r1, r9, lsr #23
   18630:	orr	r3, r3, r8, lsr #23
   18634:	mvnne	r0, #0
   18638:	movwne	r2, #1
   1863c:	cmp	r1, r9, lsr #23
   18640:	mvnne	r3, #0
   18644:	mov	r8, r0
   18648:	mov	r9, r3
   1864c:	b	18a0c <__assert_fail@plt+0x751c>
   18650:	cmp	r0, #105	; 0x69
   18654:	mov	r3, #0
   18658:	bne	1853c <__assert_fail@plt+0x704c>
   1865c:	ldrb	r0, [r5, #2]
   18660:	mov	r1, #1
   18664:	cmp	r0, #66	; 0x42
   18668:	movweq	r1, #3
   1866c:	str	r1, [sp, #8]
   18670:	b	1853c <__assert_fail@plt+0x704c>
   18674:	cmp	r7, #84	; 0x54
   18678:	beq	18844 <__assert_fail@plt+0x7354>
   1867c:	cmp	r7, #89	; 0x59
   18680:	bne	18924 <__assert_fail@plt+0x7434>
   18684:	mvn	r0, #0
   18688:	mvn	r1, #0
   1868c:	mov	r2, r4
   18690:	mov	r5, r3
   18694:	bl	19238 <__assert_fail@plt+0x7d48>
   18698:	mov	ip, r5
   1869c:	mvn	lr, #0
   186a0:	mov	r2, #0
   186a4:	mvn	r3, #7
   186a8:	mov	r5, r8
   186ac:	mov	r7, r9
   186b0:	umull	r8, r6, r5, r4
   186b4:	mvn	r9, #0
   186b8:	mla	r6, r5, ip, r6
   186bc:	subs	r5, r0, r5
   186c0:	sbcs	r5, r1, r7
   186c4:	mov	r5, #0
   186c8:	movwcc	r5, #1
   186cc:	cmp	r5, #0
   186d0:	mlaeq	r9, r7, r4, r6
   186d4:	movne	r8, lr
   186d8:	orrne	r2, r2, #1
   186dc:	adds	r3, r3, #1
   186e0:	mov	r5, r8
   186e4:	mov	r7, r9
   186e8:	bne	186b0 <__assert_fail@plt+0x71c0>
   186ec:	b	18a0c <__assert_fail@plt+0x751c>
   186f0:	cmp	r7, #116	; 0x74
   186f4:	beq	18844 <__assert_fail@plt+0x7354>
   186f8:	cmp	r7, #119	; 0x77
   186fc:	bne	18924 <__assert_fail@plt+0x7434>
   18700:	lsl	r1, r9, #1
   18704:	lsl	r0, r8, #1
   18708:	cmp	r9, #0
   1870c:	lsr	r2, r9, #31
   18710:	orr	r1, r1, r8, lsr #31
   18714:	mvnlt	r0, #0
   18718:	mvnlt	r1, #0
   1871c:	mov	r8, r0
   18720:	mov	r9, r1
   18724:	b	18a0c <__assert_fail@plt+0x751c>
   18728:	mvn	r0, #0
   1872c:	mvn	r1, #0
   18730:	mov	r2, r4
   18734:	mov	r5, r3
   18738:	bl	19238 <__assert_fail@plt+0x7d48>
   1873c:	mov	ip, r5
   18740:	mvn	lr, #0
   18744:	mov	r2, #0
   18748:	mvn	r3, #2
   1874c:	mov	r6, r8
   18750:	mov	r5, r9
   18754:	umull	r8, r7, r6, r4
   18758:	mvn	r9, #0
   1875c:	mla	r7, r6, ip, r7
   18760:	subs	r6, r0, r6
   18764:	sbcs	r6, r1, r5
   18768:	mov	r6, #0
   1876c:	movwcc	r6, #1
   18770:	cmp	r6, #0
   18774:	mlaeq	r9, r5, r4, r7
   18778:	movne	r8, lr
   1877c:	orrne	r2, r2, #1
   18780:	adds	r3, r3, #1
   18784:	mov	r6, r8
   18788:	mov	r5, r9
   1878c:	bne	18754 <__assert_fail@plt+0x7264>
   18790:	b	18a0c <__assert_fail@plt+0x751c>
   18794:	mvn	r0, #0
   18798:	mvn	r1, #0
   1879c:	mov	r2, r4
   187a0:	mov	r5, r3
   187a4:	bl	19238 <__assert_fail@plt+0x7d48>
   187a8:	subs	r0, r0, r8
   187ac:	mov	r2, #0
   187b0:	sbcs	r0, r1, r9
   187b4:	movwcc	r2, #1
   187b8:	umull	r0, r1, r8, r4
   187bc:	mla	r1, r8, r5, r1
   187c0:	cmp	r2, #0
   187c4:	mla	r9, r9, r4, r1
   187c8:	mvnne	r0, #0
   187cc:	mvnne	r9, #0
   187d0:	mov	r8, r0
   187d4:	b	18a0c <__assert_fail@plt+0x751c>
   187d8:	mvn	r0, #0
   187dc:	mvn	r1, #0
   187e0:	mov	r2, r4
   187e4:	mov	r5, r3
   187e8:	bl	19238 <__assert_fail@plt+0x7d48>
   187ec:	mov	ip, r5
   187f0:	mvn	lr, #0
   187f4:	mov	r2, #0
   187f8:	mvn	r3, #1
   187fc:	mov	r6, r8
   18800:	mov	r5, r9
   18804:	umull	r8, r7, r6, r4
   18808:	mvn	r9, #0
   1880c:	mla	r7, r6, ip, r7
   18810:	subs	r6, r0, r6
   18814:	sbcs	r6, r1, r5
   18818:	mov	r6, #0
   1881c:	movwcc	r6, #1
   18820:	cmp	r6, #0
   18824:	mlaeq	r9, r5, r4, r7
   18828:	movne	r8, lr
   1882c:	orrne	r2, r2, #1
   18830:	adds	r3, r3, #1
   18834:	mov	r6, r8
   18838:	mov	r5, r9
   1883c:	bne	18804 <__assert_fail@plt+0x7314>
   18840:	b	18a0c <__assert_fail@plt+0x751c>
   18844:	mvn	r0, #0
   18848:	mvn	r1, #0
   1884c:	mov	r2, r4
   18850:	mov	r5, r3
   18854:	bl	19238 <__assert_fail@plt+0x7d48>
   18858:	mov	ip, r5
   1885c:	mvn	lr, #0
   18860:	mov	r2, #0
   18864:	mvn	r3, #3
   18868:	mov	r6, r8
   1886c:	mov	r5, r9
   18870:	umull	r8, r7, r6, r4
   18874:	mvn	r9, #0
   18878:	mla	r7, r6, ip, r7
   1887c:	subs	r6, r0, r6
   18880:	sbcs	r6, r1, r5
   18884:	mov	r6, #0
   18888:	movwcc	r6, #1
   1888c:	cmp	r6, #0
   18890:	mlaeq	r9, r5, r4, r7
   18894:	movne	r8, lr
   18898:	orrne	r2, r2, #1
   1889c:	adds	r3, r3, #1
   188a0:	mov	r6, r8
   188a4:	mov	r5, r9
   188a8:	bne	18870 <__assert_fail@plt+0x7380>
   188ac:	b	18a0c <__assert_fail@plt+0x751c>
   188b0:	cmp	r7, #90	; 0x5a
   188b4:	bne	18924 <__assert_fail@plt+0x7434>
   188b8:	mvn	r0, #0
   188bc:	mvn	r1, #0
   188c0:	mov	r2, r4
   188c4:	mov	r5, r3
   188c8:	bl	19238 <__assert_fail@plt+0x7d48>
   188cc:	mov	ip, r5
   188d0:	mvn	lr, #0
   188d4:	mov	r2, #0
   188d8:	mvn	r3, #6
   188dc:	mov	r5, r8
   188e0:	mov	r7, r9
   188e4:	umull	r8, r6, r5, r4
   188e8:	mvn	r9, #0
   188ec:	mla	r6, r5, ip, r6
   188f0:	subs	r5, r0, r5
   188f4:	sbcs	r5, r1, r7
   188f8:	mov	r5, #0
   188fc:	movwcc	r5, #1
   18900:	cmp	r5, #0
   18904:	mlaeq	r9, r7, r4, r6
   18908:	movne	r8, lr
   1890c:	orrne	r2, r2, #1
   18910:	adds	r3, r3, #1
   18914:	mov	r5, r8
   18918:	mov	r7, r9
   1891c:	bne	188e4 <__assert_fail@plt+0x73f4>
   18920:	b	18a0c <__assert_fail@plt+0x751c>
   18924:	ldr	r0, [sp, #12]
   18928:	strd	r8, [r0]
   1892c:	ldr	r6, [sp, #4]
   18930:	orr	r6, r6, #2
   18934:	b	18a38 <__assert_fail@plt+0x7548>
   18938:	mvn	r0, #0
   1893c:	mvn	r1, #0
   18940:	mov	r2, r4
   18944:	mov	r5, r3
   18948:	bl	19238 <__assert_fail@plt+0x7d48>
   1894c:	mov	ip, r5
   18950:	mvn	lr, #0
   18954:	mov	r2, #0
   18958:	mvn	r3, #5
   1895c:	mov	r5, r8
   18960:	mov	r7, r9
   18964:	umull	r8, r6, r5, r4
   18968:	mvn	r9, #0
   1896c:	mla	r6, r5, ip, r6
   18970:	subs	r5, r0, r5
   18974:	sbcs	r5, r1, r7
   18978:	mov	r5, #0
   1897c:	movwcc	r5, #1
   18980:	cmp	r5, #0
   18984:	mlaeq	r9, r7, r4, r6
   18988:	movne	r8, lr
   1898c:	orrne	r2, r2, #1
   18990:	adds	r3, r3, #1
   18994:	mov	r5, r8
   18998:	mov	r7, r9
   1899c:	bne	18964 <__assert_fail@plt+0x7474>
   189a0:	b	18a0c <__assert_fail@plt+0x751c>
   189a4:	mvn	r0, #0
   189a8:	mvn	r1, #0
   189ac:	mov	r2, r4
   189b0:	mov	r5, r3
   189b4:	bl	19238 <__assert_fail@plt+0x7d48>
   189b8:	mov	ip, r5
   189bc:	mvn	lr, #0
   189c0:	mov	r2, #0
   189c4:	mvn	r3, #4
   189c8:	mov	r5, r8
   189cc:	mov	r7, r9
   189d0:	umull	r8, r6, r5, r4
   189d4:	mvn	r9, #0
   189d8:	mla	r6, r5, ip, r6
   189dc:	subs	r5, r0, r5
   189e0:	sbcs	r5, r1, r7
   189e4:	mov	r5, #0
   189e8:	movwcc	r5, #1
   189ec:	cmp	r5, #0
   189f0:	mlaeq	r9, r7, r4, r6
   189f4:	movne	r8, lr
   189f8:	orrne	r2, r2, #1
   189fc:	adds	r3, r3, #1
   18a00:	mov	r5, r8
   18a04:	mov	r7, r9
   18a08:	bne	189d0 <__assert_fail@plt+0x74e0>
   18a0c:	ldr	r1, [sp]
   18a10:	ldr	r3, [sp, #8]
   18a14:	ldr	r6, [sp, #4]
   18a18:	add	r0, r1, r3
   18a1c:	orr	r6, r2, r6
   18a20:	str	r0, [sl]
   18a24:	ldrb	r0, [r1, r3]
   18a28:	cmp	r0, #0
   18a2c:	orrne	r6, r6, #2
   18a30:	ldr	r0, [sp, #12]
   18a34:	strd	r8, [r0]
   18a38:	mov	r0, r6
   18a3c:	sub	sp, fp, #28
   18a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a44:	movw	r0, #43002	; 0xa7fa
   18a48:	movw	r1, #43040	; 0xa820
   18a4c:	movw	r3, #43056	; 0xa830
   18a50:	mov	r2, #85	; 0x55
   18a54:	movt	r0, #1
   18a58:	movt	r1, #1
   18a5c:	movt	r3, #1
   18a60:	bl	114f0 <__assert_fail@plt>
   18a64:	clz	r2, r1
   18a68:	clz	r3, r0
   18a6c:	lsr	r2, r2, #5
   18a70:	lsr	r3, r3, #5
   18a74:	orrs	r2, r3, r2
   18a78:	movwne	r1, #1
   18a7c:	movwne	r0, #1
   18a80:	cmp	r1, #0
   18a84:	beq	18ab4 <__assert_fail@plt+0x75c4>
   18a88:	mvn	r2, #-2147483648	; 0x80000000
   18a8c:	udiv	r2, r2, r1
   18a90:	cmp	r2, r0
   18a94:	bcs	18ab4 <__assert_fail@plt+0x75c4>
   18a98:	push	{fp, lr}
   18a9c:	mov	fp, sp
   18aa0:	bl	11394 <__errno_location@plt>
   18aa4:	mov	r1, #12
   18aa8:	str	r1, [r0]
   18aac:	mov	r0, #0
   18ab0:	pop	{fp, pc}
   18ab4:	b	111cc <calloc@plt>
   18ab8:	cmp	r0, #0
   18abc:	movweq	r0, #1
   18ac0:	cmn	r0, #1
   18ac4:	ble	18acc <__assert_fail@plt+0x75dc>
   18ac8:	b	11310 <malloc@plt>
   18acc:	push	{fp, lr}
   18ad0:	mov	fp, sp
   18ad4:	bl	11394 <__errno_location@plt>
   18ad8:	mov	r1, #12
   18adc:	str	r1, [r0]
   18ae0:	mov	r0, #0
   18ae4:	pop	{fp, pc}
   18ae8:	push	{fp, lr}
   18aec:	mov	fp, sp
   18af0:	cmp	r0, #0
   18af4:	beq	18b10 <__assert_fail@plt+0x7620>
   18af8:	cmp	r1, #0
   18afc:	beq	18b1c <__assert_fail@plt+0x762c>
   18b00:	cmn	r1, #1
   18b04:	ble	18b24 <__assert_fail@plt+0x7634>
   18b08:	pop	{fp, lr}
   18b0c:	b	11280 <realloc@plt>
   18b10:	mov	r0, r1
   18b14:	pop	{fp, lr}
   18b18:	b	18ab8 <__assert_fail@plt+0x75c8>
   18b1c:	bl	12cb0 <__assert_fail@plt+0x17c0>
   18b20:	b	18b30 <__assert_fail@plt+0x7640>
   18b24:	bl	11394 <__errno_location@plt>
   18b28:	mov	r1, #12
   18b2c:	str	r1, [r0]
   18b30:	mov	r0, #0
   18b34:	pop	{fp, pc}
   18b38:	push	{r4, r5, r6, sl, fp, lr}
   18b3c:	add	fp, sp, #16
   18b40:	mov	r4, r0
   18b44:	bl	112d4 <__fpending@plt>
   18b48:	mov	r5, r0
   18b4c:	mov	r0, r4
   18b50:	bl	112e0 <ferror_unlocked@plt>
   18b54:	mov	r6, r0
   18b58:	mov	r0, r4
   18b5c:	bl	18ca4 <__assert_fail@plt+0x77b4>
   18b60:	cmp	r6, #0
   18b64:	beq	18b84 <__assert_fail@plt+0x7694>
   18b68:	mvn	r4, #0
   18b6c:	cmp	r0, #0
   18b70:	bne	18bb0 <__assert_fail@plt+0x76c0>
   18b74:	bl	11394 <__errno_location@plt>
   18b78:	mov	r1, #0
   18b7c:	str	r1, [r0]
   18b80:	b	18bb0 <__assert_fail@plt+0x76c0>
   18b84:	cmp	r0, #0
   18b88:	mov	r4, r0
   18b8c:	mvnne	r4, #0
   18b90:	cmp	r5, #0
   18b94:	bne	18bb0 <__assert_fail@plt+0x76c0>
   18b98:	cmp	r0, #0
   18b9c:	beq	18bb0 <__assert_fail@plt+0x76c0>
   18ba0:	bl	11394 <__errno_location@plt>
   18ba4:	ldr	r0, [r0]
   18ba8:	subs	r4, r0, #9
   18bac:	mvnne	r4, #0
   18bb0:	mov	r0, r4
   18bb4:	pop	{r4, r5, r6, sl, fp, pc}
   18bb8:	movw	r2, #62998	; 0xf616
   18bbc:	mov	r1, #0
   18bc0:	movt	r2, #149	; 0x95
   18bc4:	str	r1, [r0, #16]
   18bc8:	str	r1, [r0, #20]
   18bcc:	str	r2, [r0, #24]
   18bd0:	bx	lr
   18bd4:	push	{r4, r5, r6, r7, fp, lr}
   18bd8:	add	fp, sp, #16
   18bdc:	ldr	r2, [r0, #24]
   18be0:	movw	r3, #62998	; 0xf616
   18be4:	movt	r3, #149	; 0x95
   18be8:	cmp	r2, r3
   18bec:	bne	18c84 <__assert_fail@plt+0x7794>
   18bf0:	mov	r3, r0
   18bf4:	ldr	r2, [r3, #16]!
   18bf8:	ldr	lr, [r3, #4]
   18bfc:	orrs	r5, r2, lr
   18c00:	beq	18c38 <__assert_fail@plt+0x7748>
   18c04:	ldrd	r4, [r0]
   18c08:	ldrd	r6, [r1, #96]	; 0x60
   18c0c:	eor	r7, r7, r5
   18c10:	eor	r6, r6, r4
   18c14:	orrs	r7, r6, r7
   18c18:	bne	18c38 <__assert_fail@plt+0x7748>
   18c1c:	ldrd	r4, [r0, #8]
   18c20:	ldrd	r6, [r1]
   18c24:	mov	ip, #1
   18c28:	eor	r7, r7, r5
   18c2c:	eor	r6, r6, r4
   18c30:	orrs	r7, r6, r7
   18c34:	beq	18c7c <__assert_fail@plt+0x778c>
   18c38:	adds	r4, r2, #1
   18c3c:	mov	ip, #0
   18c40:	adc	r5, lr, #0
   18c44:	and	r2, r4, r2
   18c48:	strd	r4, [r3]
   18c4c:	and	r3, r5, lr
   18c50:	orrs	r2, r2, r3
   18c54:	bne	18c7c <__assert_fail@plt+0x778c>
   18c58:	orrs	r2, r4, r5
   18c5c:	beq	18c78 <__assert_fail@plt+0x7788>
   18c60:	ldrd	r2, [r1]
   18c64:	str	r3, [r0, #12]
   18c68:	str	r2, [r0, #8]
   18c6c:	ldrd	r2, [r1, #96]	; 0x60
   18c70:	stm	r0, {r2, r3}
   18c74:	b	18c7c <__assert_fail@plt+0x778c>
   18c78:	mov	ip, #1
   18c7c:	mov	r0, ip
   18c80:	pop	{r4, r5, r6, r7, fp, pc}
   18c84:	movw	r0, #43135	; 0xa87f
   18c88:	movw	r1, #43159	; 0xa897
   18c8c:	movw	r3, #43177	; 0xa8a9
   18c90:	mov	r2, #60	; 0x3c
   18c94:	movt	r0, #1
   18c98:	movt	r1, #1
   18c9c:	movt	r3, #1
   18ca0:	bl	114f0 <__assert_fail@plt>
   18ca4:	push	{r4, r5, r6, sl, fp, lr}
   18ca8:	add	fp, sp, #16
   18cac:	sub	sp, sp, #8
   18cb0:	mov	r4, r0
   18cb4:	bl	113c4 <fileno@plt>
   18cb8:	cmn	r0, #1
   18cbc:	ble	18d30 <__assert_fail@plt+0x7840>
   18cc0:	mov	r0, r4
   18cc4:	bl	11328 <__freading@plt>
   18cc8:	cmp	r0, #0
   18ccc:	beq	18cf8 <__assert_fail@plt+0x7808>
   18cd0:	mov	r0, r4
   18cd4:	bl	113c4 <fileno@plt>
   18cd8:	mov	r1, #1
   18cdc:	mov	r2, #0
   18ce0:	mov	r3, #0
   18ce4:	str	r1, [sp]
   18ce8:	bl	112bc <lseek64@plt>
   18cec:	and	r0, r0, r1
   18cf0:	cmn	r0, #1
   18cf4:	beq	18d30 <__assert_fail@plt+0x7840>
   18cf8:	mov	r0, r4
   18cfc:	bl	18f60 <__assert_fail@plt+0x7a70>
   18d00:	cmp	r0, #0
   18d04:	beq	18d30 <__assert_fail@plt+0x7840>
   18d08:	bl	11394 <__errno_location@plt>
   18d0c:	ldr	r6, [r0]
   18d10:	mov	r5, r0
   18d14:	mov	r0, r4
   18d18:	bl	113e8 <fclose@plt>
   18d1c:	cmp	r6, #0
   18d20:	strne	r6, [r5]
   18d24:	mvnne	r0, #0
   18d28:	sub	sp, fp, #16
   18d2c:	pop	{r4, r5, r6, sl, fp, pc}
   18d30:	mov	r0, r4
   18d34:	sub	sp, fp, #16
   18d38:	pop	{r4, r5, r6, sl, fp, lr}
   18d3c:	b	113e8 <fclose@plt>
   18d40:	sub	sp, sp, #8
   18d44:	push	{r4, r5, r6, r7, fp, lr}
   18d48:	add	fp, sp, #16
   18d4c:	sub	sp, sp, #8
   18d50:	mov	r5, r0
   18d54:	add	r0, fp, #8
   18d58:	cmp	r1, #11
   18d5c:	str	r3, [fp, #12]
   18d60:	str	r2, [fp, #8]
   18d64:	str	r0, [sp, #4]
   18d68:	bhi	18da4 <__assert_fail@plt+0x78b4>
   18d6c:	mov	r0, #1
   18d70:	movw	r2, #1300	; 0x514
   18d74:	tst	r2, r0, lsl r1
   18d78:	bne	18e5c <__assert_fail@plt+0x796c>
   18d7c:	movw	r2, #2570	; 0xa0a
   18d80:	tst	r2, r0, lsl r1
   18d84:	bne	18dcc <__assert_fail@plt+0x78dc>
   18d88:	cmp	r1, #0
   18d8c:	bne	18da4 <__assert_fail@plt+0x78b4>
   18d90:	ldr	r0, [sp, #4]
   18d94:	add	r1, r0, #4
   18d98:	str	r1, [sp, #4]
   18d9c:	mov	r1, #0
   18da0:	b	18e68 <__assert_fail@plt+0x7978>
   18da4:	sub	r0, r1, #1024	; 0x400
   18da8:	cmp	r0, #10
   18dac:	bhi	18e5c <__assert_fail@plt+0x796c>
   18db0:	mov	r2, #1
   18db4:	movw	r3, #645	; 0x285
   18db8:	tst	r3, r2, lsl r0
   18dbc:	bne	18e5c <__assert_fail@plt+0x796c>
   18dc0:	movw	r3, #1282	; 0x502
   18dc4:	tst	r3, r2, lsl r0
   18dc8:	beq	18dd8 <__assert_fail@plt+0x78e8>
   18dcc:	mov	r0, r5
   18dd0:	bl	11400 <fcntl64@plt>
   18dd4:	b	18e74 <__assert_fail@plt+0x7984>
   18dd8:	cmp	r0, #6
   18ddc:	bne	18e5c <__assert_fail@plt+0x796c>
   18de0:	ldr	r0, [sp, #4]
   18de4:	movw	r7, #45808	; 0xb2f0
   18de8:	movt	r7, #2
   18dec:	add	r1, r0, #4
   18df0:	str	r1, [sp, #4]
   18df4:	ldr	r6, [r0]
   18df8:	ldr	r0, [r7]
   18dfc:	cmp	r0, #0
   18e00:	blt	18e98 <__assert_fail@plt+0x79a8>
   18e04:	mov	r0, r5
   18e08:	movw	r1, #1030	; 0x406
   18e0c:	mov	r2, r6
   18e10:	bl	11400 <fcntl64@plt>
   18e14:	mov	r4, r0
   18e18:	cmn	r0, #1
   18e1c:	bgt	18e8c <__assert_fail@plt+0x799c>
   18e20:	bl	11394 <__errno_location@plt>
   18e24:	ldr	r0, [r0]
   18e28:	cmp	r0, #22
   18e2c:	bne	18e8c <__assert_fail@plt+0x799c>
   18e30:	mov	r0, r5
   18e34:	mov	r1, #0
   18e38:	mov	r2, r6
   18e3c:	bl	11400 <fcntl64@plt>
   18e40:	mov	r4, r0
   18e44:	cmp	r0, #0
   18e48:	blt	18e78 <__assert_fail@plt+0x7988>
   18e4c:	mvn	r0, #0
   18e50:	str	r0, [r7]
   18e54:	mov	r0, #1
   18e58:	b	18ebc <__assert_fail@plt+0x79cc>
   18e5c:	ldr	r0, [sp, #4]
   18e60:	add	r2, r0, #4
   18e64:	str	r2, [sp, #4]
   18e68:	ldr	r2, [r0]
   18e6c:	mov	r0, r5
   18e70:	bl	11400 <fcntl64@plt>
   18e74:	mov	r4, r0
   18e78:	mov	r0, r4
   18e7c:	sub	sp, fp, #16
   18e80:	pop	{r4, r5, r6, r7, fp, lr}
   18e84:	add	sp, sp, #8
   18e88:	bx	lr
   18e8c:	mov	r0, #1
   18e90:	str	r0, [r7]
   18e94:	b	18e78 <__assert_fail@plt+0x7988>
   18e98:	mov	r0, r5
   18e9c:	mov	r1, #0
   18ea0:	mov	r2, r6
   18ea4:	bl	11400 <fcntl64@plt>
   18ea8:	mov	r4, r0
   18eac:	ldr	r0, [r7]
   18eb0:	add	r0, r0, #1
   18eb4:	clz	r0, r0
   18eb8:	lsr	r0, r0, #5
   18ebc:	cmp	r0, #0
   18ec0:	beq	18e78 <__assert_fail@plt+0x7988>
   18ec4:	cmp	r4, #0
   18ec8:	blt	18e78 <__assert_fail@plt+0x7988>
   18ecc:	mov	r0, r4
   18ed0:	mov	r1, #1
   18ed4:	bl	11400 <fcntl64@plt>
   18ed8:	cmp	r0, #0
   18edc:	blt	18ef8 <__assert_fail@plt+0x7a08>
   18ee0:	orr	r2, r0, #1
   18ee4:	mov	r0, r4
   18ee8:	mov	r1, #2
   18eec:	bl	11400 <fcntl64@plt>
   18ef0:	cmn	r0, #1
   18ef4:	bne	18e78 <__assert_fail@plt+0x7988>
   18ef8:	bl	11394 <__errno_location@plt>
   18efc:	ldr	r6, [r0]
   18f00:	mov	r5, r0
   18f04:	mov	r0, r4
   18f08:	bl	114b4 <close@plt>
   18f0c:	str	r6, [r5]
   18f10:	mvn	r4, #0
   18f14:	b	18e78 <__assert_fail@plt+0x7988>
   18f18:	sub	sp, sp, #8
   18f1c:	push	{fp, lr}
   18f20:	mov	fp, sp
   18f24:	sub	sp, sp, #8
   18f28:	str	r2, [fp, #8]
   18f2c:	mov	r2, #0
   18f30:	tst	r1, #64	; 0x40
   18f34:	str	r3, [fp, #12]
   18f38:	addne	r2, fp, #8
   18f3c:	orrne	r2, r2, #4
   18f40:	strne	r2, [sp, #4]
   18f44:	ldrne	r2, [fp, #8]
   18f48:	bl	11304 <open64@plt>
   18f4c:	bl	1799c <__assert_fail@plt+0x64ac>
   18f50:	mov	sp, fp
   18f54:	pop	{fp, lr}
   18f58:	add	sp, sp, #8
   18f5c:	bx	lr
   18f60:	push	{r4, sl, fp, lr}
   18f64:	add	fp, sp, #8
   18f68:	sub	sp, sp, #8
   18f6c:	mov	r4, r0
   18f70:	cmp	r0, #0
   18f74:	beq	18f90 <__assert_fail@plt+0x7aa0>
   18f78:	mov	r0, r4
   18f7c:	bl	11328 <__freading@plt>
   18f80:	cmp	r0, #0
   18f84:	ldrbne	r0, [r4, #1]
   18f88:	tstne	r0, #1
   18f8c:	bne	18fa0 <__assert_fail@plt+0x7ab0>
   18f90:	mov	r0, r4
   18f94:	sub	sp, fp, #8
   18f98:	pop	{r4, sl, fp, lr}
   18f9c:	b	11214 <fflush@plt>
   18fa0:	mov	r0, #1
   18fa4:	mov	r2, #0
   18fa8:	mov	r3, #0
   18fac:	str	r0, [sp]
   18fb0:	mov	r0, r4
   18fb4:	bl	18fbc <__assert_fail@plt+0x7acc>
   18fb8:	b	18f90 <__assert_fail@plt+0x7aa0>
   18fbc:	push	{r4, r5, r6, r7, fp, lr}
   18fc0:	add	fp, sp, #16
   18fc4:	sub	sp, sp, #8
   18fc8:	mov	r4, r0
   18fcc:	ldr	r0, [r0, #4]
   18fd0:	mov	r5, r3
   18fd4:	mov	r6, r2
   18fd8:	ldr	r1, [r4, #8]
   18fdc:	cmp	r1, r0
   18fe0:	bne	18ffc <__assert_fail@plt+0x7b0c>
   18fe4:	ldrd	r0, [r4, #16]
   18fe8:	cmp	r1, r0
   18fec:	bne	18ffc <__assert_fail@plt+0x7b0c>
   18ff0:	ldr	r0, [r4, #36]	; 0x24
   18ff4:	cmp	r0, #0
   18ff8:	beq	19014 <__assert_fail@plt+0x7b24>
   18ffc:	mov	r0, r4
   19000:	mov	r2, r6
   19004:	mov	r3, r5
   19008:	sub	sp, fp, #16
   1900c:	pop	{r4, r5, r6, r7, fp, lr}
   19010:	b	113f4 <fseeko64@plt>
   19014:	ldr	r7, [fp, #8]
   19018:	mov	r0, r4
   1901c:	bl	113c4 <fileno@plt>
   19020:	mov	r2, r6
   19024:	mov	r3, r5
   19028:	str	r7, [sp]
   1902c:	bl	112bc <lseek64@plt>
   19030:	and	r2, r0, r1
   19034:	cmn	r2, #1
   19038:	beq	19054 <__assert_fail@plt+0x7b64>
   1903c:	strd	r0, [r4, #80]	; 0x50
   19040:	ldr	r0, [r4]
   19044:	bic	r0, r0, #16
   19048:	str	r0, [r4]
   1904c:	mov	r0, #0
   19050:	b	19058 <__assert_fail@plt+0x7b68>
   19054:	mvn	r0, #0
   19058:	sub	sp, fp, #16
   1905c:	pop	{r4, r5, r6, r7, fp, pc}
   19060:	push	{fp, lr}
   19064:	mov	fp, sp
   19068:	mov	r0, #14
   1906c:	bl	11424 <nl_langinfo@plt>
   19070:	movw	r1, #39588	; 0x9aa4
   19074:	cmp	r0, #0
   19078:	movt	r1, #1
   1907c:	movne	r1, r0
   19080:	movw	r0, #43244	; 0xa8ec
   19084:	ldrb	r2, [r1]
   19088:	movt	r0, #1
   1908c:	cmp	r2, #0
   19090:	movne	r0, r1
   19094:	pop	{fp, pc}
   19098:	push	{r4, r5, r6, r7, fp, lr}
   1909c:	add	fp, sp, #16
   190a0:	sub	sp, sp, #8
   190a4:	add	r5, sp, #4
   190a8:	cmp	r0, #0
   190ac:	mov	r7, r2
   190b0:	mov	r4, r1
   190b4:	movne	r5, r0
   190b8:	mov	r0, r5
   190bc:	bl	112ec <mbrtowc@plt>
   190c0:	mov	r6, r0
   190c4:	cmp	r7, #0
   190c8:	beq	190ec <__assert_fail@plt+0x7bfc>
   190cc:	cmn	r6, #2
   190d0:	bcc	190ec <__assert_fail@plt+0x7bfc>
   190d4:	mov	r0, #0
   190d8:	bl	19140 <__assert_fail@plt+0x7c50>
   190dc:	cmp	r0, #0
   190e0:	ldrbeq	r0, [r4]
   190e4:	moveq	r6, #1
   190e8:	streq	r0, [r5]
   190ec:	mov	r0, r6
   190f0:	sub	sp, fp, #16
   190f4:	pop	{r4, r5, r6, r7, fp, pc}
   190f8:	cmp	r2, #0
   190fc:	beq	1912c <__assert_fail@plt+0x7c3c>
   19100:	mvn	r3, #0
   19104:	udiv	r3, r3, r2
   19108:	cmp	r3, r1
   1910c:	bcs	1912c <__assert_fail@plt+0x7c3c>
   19110:	push	{fp, lr}
   19114:	mov	fp, sp
   19118:	bl	11394 <__errno_location@plt>
   1911c:	mov	r1, #12
   19120:	str	r1, [r0]
   19124:	mov	r0, #0
   19128:	pop	{fp, pc}
   1912c:	mul	r1, r2, r1
   19130:	b	18ae8 <__assert_fail@plt+0x75f8>
   19134:	mov	r1, #0
   19138:	mov	r2, #3
   1913c:	b	18d40 <__assert_fail@plt+0x7850>
   19140:	push	{r4, sl, fp, lr}
   19144:	add	fp, sp, #8
   19148:	sub	sp, sp, #264	; 0x108
   1914c:	add	r1, sp, #7
   19150:	movw	r2, #257	; 0x101
   19154:	bl	191a4 <__assert_fail@plt+0x7cb4>
   19158:	mov	r4, #0
   1915c:	cmp	r0, #0
   19160:	bne	19198 <__assert_fail@plt+0x7ca8>
   19164:	movw	r1, #43250	; 0xa8f2
   19168:	add	r0, sp, #7
   1916c:	movt	r1, #1
   19170:	bl	111fc <strcmp@plt>
   19174:	cmp	r0, #0
   19178:	beq	19198 <__assert_fail@plt+0x7ca8>
   1917c:	movw	r1, #43252	; 0xa8f4
   19180:	add	r0, sp, #7
   19184:	movt	r1, #1
   19188:	bl	111fc <strcmp@plt>
   1918c:	mov	r4, r0
   19190:	cmp	r0, #0
   19194:	movwne	r4, #1
   19198:	mov	r0, r4
   1919c:	sub	sp, fp, #8
   191a0:	pop	{r4, sl, fp, pc}
   191a4:	push	{r4, r5, r6, r7, fp, lr}
   191a8:	add	fp, sp, #16
   191ac:	mov	r4, r1
   191b0:	mov	r1, #0
   191b4:	mov	r6, r2
   191b8:	bl	1140c <setlocale@plt>
   191bc:	cmp	r0, #0
   191c0:	beq	191ec <__assert_fail@plt+0x7cfc>
   191c4:	mov	r7, r0
   191c8:	bl	11364 <strlen@plt>
   191cc:	cmp	r0, r6
   191d0:	bcs	19200 <__assert_fail@plt+0x7d10>
   191d4:	add	r2, r0, #1
   191d8:	mov	r0, r4
   191dc:	mov	r1, r7
   191e0:	bl	11244 <memcpy@plt>
   191e4:	mov	r5, #0
   191e8:	b	19228 <__assert_fail@plt+0x7d38>
   191ec:	cmp	r6, #0
   191f0:	mov	r5, #22
   191f4:	movne	r0, #0
   191f8:	strbne	r0, [r4]
   191fc:	b	19228 <__assert_fail@plt+0x7d38>
   19200:	mov	r5, #34	; 0x22
   19204:	cmp	r6, #0
   19208:	beq	19228 <__assert_fail@plt+0x7d38>
   1920c:	sub	r6, r6, #1
   19210:	mov	r0, r4
   19214:	mov	r1, r7
   19218:	mov	r2, r6
   1921c:	bl	11244 <memcpy@plt>
   19220:	mov	r0, #0
   19224:	strb	r0, [r4, r6]
   19228:	mov	r0, r5
   1922c:	pop	{r4, r5, r6, r7, fp, pc}
   19230:	mov	r1, #0
   19234:	b	1140c <setlocale@plt>
   19238:	cmp	r3, #0
   1923c:	cmpeq	r2, #0
   19240:	bne	19258 <__assert_fail@plt+0x7d68>
   19244:	cmp	r1, #0
   19248:	cmpeq	r0, #0
   1924c:	mvnne	r1, #0
   19250:	mvnne	r0, #0
   19254:	b	19274 <__assert_fail@plt+0x7d84>
   19258:	sub	sp, sp, #8
   1925c:	push	{sp, lr}
   19260:	bl	19284 <__assert_fail@plt+0x7d94>
   19264:	ldr	lr, [sp, #4]
   19268:	add	sp, sp, #8
   1926c:	pop	{r2, r3}
   19270:	bx	lr
   19274:	push	{r1, lr}
   19278:	mov	r0, #8
   1927c:	bl	111f0 <raise@plt>
   19280:	pop	{r1, pc}
   19284:	cmp	r1, r3
   19288:	cmpeq	r0, r2
   1928c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19290:	mov	r4, r0
   19294:	movcc	r0, #0
   19298:	mov	r5, r1
   1929c:	ldr	lr, [sp, #36]	; 0x24
   192a0:	movcc	r1, r0
   192a4:	bcc	193a0 <__assert_fail@plt+0x7eb0>
   192a8:	cmp	r3, #0
   192ac:	clzeq	ip, r2
   192b0:	clzne	ip, r3
   192b4:	addeq	ip, ip, #32
   192b8:	cmp	r5, #0
   192bc:	clzeq	r1, r4
   192c0:	addeq	r1, r1, #32
   192c4:	clzne	r1, r5
   192c8:	sub	ip, ip, r1
   192cc:	sub	sl, ip, #32
   192d0:	lsl	r9, r3, ip
   192d4:	rsb	fp, ip, #32
   192d8:	orr	r9, r9, r2, lsl sl
   192dc:	orr	r9, r9, r2, lsr fp
   192e0:	lsl	r8, r2, ip
   192e4:	cmp	r5, r9
   192e8:	cmpeq	r4, r8
   192ec:	movcc	r0, #0
   192f0:	movcc	r1, r0
   192f4:	bcc	19310 <__assert_fail@plt+0x7e20>
   192f8:	mov	r0, #1
   192fc:	subs	r4, r4, r8
   19300:	lsl	r1, r0, sl
   19304:	orr	r1, r1, r0, lsr fp
   19308:	lsl	r0, r0, ip
   1930c:	sbc	r5, r5, r9
   19310:	cmp	ip, #0
   19314:	beq	193a0 <__assert_fail@plt+0x7eb0>
   19318:	lsr	r6, r8, #1
   1931c:	orr	r6, r6, r9, lsl #31
   19320:	lsr	r7, r9, #1
   19324:	mov	r2, ip
   19328:	b	1934c <__assert_fail@plt+0x7e5c>
   1932c:	subs	r3, r4, r6
   19330:	sbc	r8, r5, r7
   19334:	adds	r3, r3, r3
   19338:	adc	r8, r8, r8
   1933c:	adds	r4, r3, #1
   19340:	adc	r5, r8, #0
   19344:	subs	r2, r2, #1
   19348:	beq	19368 <__assert_fail@plt+0x7e78>
   1934c:	cmp	r5, r7
   19350:	cmpeq	r4, r6
   19354:	bcs	1932c <__assert_fail@plt+0x7e3c>
   19358:	adds	r4, r4, r4
   1935c:	adc	r5, r5, r5
   19360:	subs	r2, r2, #1
   19364:	bne	1934c <__assert_fail@plt+0x7e5c>
   19368:	lsr	r3, r4, ip
   1936c:	orr	r3, r3, r5, lsl fp
   19370:	lsr	r2, r5, ip
   19374:	orr	r3, r3, r5, lsr sl
   19378:	adds	r0, r0, r4
   1937c:	mov	r4, r3
   19380:	lsl	r3, r2, ip
   19384:	orr	r3, r3, r4, lsl sl
   19388:	lsl	ip, r4, ip
   1938c:	orr	r3, r3, r4, lsr fp
   19390:	adc	r1, r1, r5
   19394:	subs	r0, r0, ip
   19398:	mov	r5, r2
   1939c:	sbc	r1, r1, r3
   193a0:	cmp	lr, #0
   193a4:	strdne	r4, [lr]
   193a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   193b0:	mov	r7, r0
   193b4:	ldr	r6, [pc, #72]	; 19404 <__assert_fail@plt+0x7f14>
   193b8:	ldr	r5, [pc, #72]	; 19408 <__assert_fail@plt+0x7f18>
   193bc:	add	r6, pc, r6
   193c0:	add	r5, pc, r5
   193c4:	sub	r6, r6, r5
   193c8:	mov	r8, r1
   193cc:	mov	r9, r2
   193d0:	bl	111a0 <fstatfs64@plt-0x20>
   193d4:	asrs	r6, r6, #2
   193d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   193dc:	mov	r4, #0
   193e0:	add	r4, r4, #1
   193e4:	ldr	r3, [r5], #4
   193e8:	mov	r2, r9
   193ec:	mov	r1, r8
   193f0:	mov	r0, r7
   193f4:	blx	r3
   193f8:	cmp	r6, r4
   193fc:	bne	193e0 <__assert_fail@plt+0x7ef0>
   19400:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19404:	andeq	r1, r1, r8, asr #22
   19408:	andeq	r1, r1, r0, asr #22
   1940c:	bx	lr
   19410:	ldr	r3, [pc, #12]	; 19424 <__assert_fail@plt+0x7f34>
   19414:	mov	r1, #0
   19418:	add	r3, pc, r3
   1941c:	ldr	r2, [r3]
   19420:	b	113a0 <__cxa_atexit@plt>
   19424:	andeq	r1, r1, ip, lsl #26
   19428:	mov	r2, r1
   1942c:	mov	r1, r0
   19430:	mov	r0, #3
   19434:	b	11484 <__xstat64@plt>
   19438:	mov	r2, r1
   1943c:	mov	r1, r0
   19440:	mov	r0, #3
   19444:	b	112b0 <__fxstat64@plt>
   19448:	mov	r2, r1
   1944c:	mov	r1, r0
   19450:	mov	r0, #3
   19454:	b	114c0 <__lxstat64@plt>
   19458:	push	{lr}		; (str lr, [sp, #-4]!)
   1945c:	sub	sp, sp, #12
   19460:	str	r3, [sp]
   19464:	mov	r3, r2
   19468:	mov	r2, r1
   1946c:	mov	r1, r0
   19470:	mov	r0, #3
   19474:	bl	11298 <__fxstatat64@plt>
   19478:	add	sp, sp, #12
   1947c:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019480 <.fini>:
   19480:	push	{r3, lr}
   19484:	pop	{r3, pc}
