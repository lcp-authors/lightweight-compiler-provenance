
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f58 <.init>:
   11f58:	push	{r3, lr}
   11f5c:	bl	12074 <_start@@Base+0x3c>
   11f60:	pop	{r3, pc}

Disassembly of section .plt:

00011f64 <strcmp@plt-0x14>:
   11f64:	push	{lr}		; (str lr, [sp, #-4]!)
   11f68:	ldr	lr, [pc, #4]	; 11f74 <strcmp@plt-0x4>
   11f6c:	add	lr, pc, lr
   11f70:	ldr	pc, [lr, #8]!
   11f74:	andeq	ip, r1, ip, lsl #1

00011f78 <strcmp@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #28, 20	; 0x1c000
   11f80:	ldr	pc, [ip, #140]!	; 0x8c

00011f84 <free@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #28, 20	; 0x1c000
   11f8c:	ldr	pc, [ip, #132]!	; 0x84

00011f90 <memcpy@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #28, 20	; 0x1c000
   11f98:	ldr	pc, [ip, #124]!	; 0x7c

00011f9c <memcmp@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #28, 20	; 0x1c000
   11fa4:	ldr	pc, [ip, #116]!	; 0x74

00011fa8 <realloc@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #28, 20	; 0x1c000
   11fb0:	ldr	pc, [ip, #108]!	; 0x6c

00011fb4 <puts@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #28, 20	; 0x1c000
   11fbc:	ldr	pc, [ip, #100]!	; 0x64

00011fc0 <malloc@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #28, 20	; 0x1c000
   11fc8:	ldr	pc, [ip, #92]!	; 0x5c

00011fcc <__libc_start_main@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #28, 20	; 0x1c000
   11fd4:	ldr	pc, [ip, #84]!	; 0x54

00011fd8 <__gmon_start__@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #28, 20	; 0x1c000
   11fe0:	ldr	pc, [ip, #76]!	; 0x4c

00011fe4 <strlen@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #28, 20	; 0x1c000
   11fec:	ldr	pc, [ip, #68]!	; 0x44

00011ff0 <posix_memalign@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #28, 20	; 0x1c000
   11ff8:	ldr	pc, [ip, #60]!	; 0x3c

00011ffc <memset@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #28, 20	; 0x1c000
   12004:	ldr	pc, [ip, #52]!	; 0x34

00012008 <strncpy@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #28, 20	; 0x1c000
   12010:	ldr	pc, [ip, #44]!	; 0x2c

00012014 <memchr@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #28, 20	; 0x1c000
   1201c:	ldr	pc, [ip, #36]!	; 0x24

00012020 <abort@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #28, 20	; 0x1c000
   12028:	ldr	pc, [ip, #28]!

0001202c <__assert_fail@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #28, 20	; 0x1c000
   12034:	ldr	pc, [ip, #20]!

Disassembly of section .text:

00012038 <_start@@Base>:
   12038:	mov	fp, #0
   1203c:	mov	lr, #0
   12040:	pop	{r1}		; (ldr r1, [sp], #4)
   12044:	mov	r2, sp
   12048:	push	{r2}		; (str r2, [sp, #-4]!)
   1204c:	push	{r0}		; (str r0, [sp, #-4]!)
   12050:	ldr	ip, [pc, #16]	; 12068 <_start@@Base+0x30>
   12054:	push	{ip}		; (str ip, [sp, #-4]!)
   12058:	ldr	r0, [pc, #12]	; 1206c <_start@@Base+0x34>
   1205c:	ldr	r3, [pc, #12]	; 12070 <_start@@Base+0x38>
   12060:	bl	11fcc <__libc_start_main@plt>
   12064:	bl	12020 <abort@plt>
   12068:	andeq	fp, r1, r0, lsr #29
   1206c:	muleq	r1, r4, lr
   12070:	andeq	fp, r1, r0, asr #28
   12074:	ldr	r3, [pc, #20]	; 12090 <_start@@Base+0x58>
   12078:	ldr	r2, [pc, #20]	; 12094 <_start@@Base+0x5c>
   1207c:	add	r3, pc, r3
   12080:	ldr	r2, [r3, r2]
   12084:	cmp	r2, #0
   12088:	bxeq	lr
   1208c:	b	11fd8 <__gmon_start__@plt>
   12090:	andeq	fp, r1, ip, ror pc
   12094:	andeq	r0, r0, r0, asr r0
   12098:	ldr	r3, [pc, #28]	; 120bc <_start@@Base+0x84>
   1209c:	ldr	r0, [pc, #28]	; 120c0 <_start@@Base+0x88>
   120a0:	sub	r3, r3, r0
   120a4:	cmp	r3, #6
   120a8:	bxls	lr
   120ac:	ldr	r3, [pc, #16]	; 120c4 <_start@@Base+0x8c>
   120b0:	cmp	r3, #0
   120b4:	bxeq	lr
   120b8:	bx	r3
   120bc:	andeq	lr, r2, pc, rrx
   120c0:	andeq	lr, r2, ip, rrx
   120c4:	andeq	r0, r0, r0
   120c8:	ldr	r1, [pc, #36]	; 120f4 <_start@@Base+0xbc>
   120cc:	ldr	r0, [pc, #36]	; 120f8 <_start@@Base+0xc0>
   120d0:	sub	r1, r1, r0
   120d4:	asr	r1, r1, #2
   120d8:	add	r1, r1, r1, lsr #31
   120dc:	asrs	r1, r1, #1
   120e0:	bxeq	lr
   120e4:	ldr	r3, [pc, #16]	; 120fc <_start@@Base+0xc4>
   120e8:	cmp	r3, #0
   120ec:	bxeq	lr
   120f0:	bx	r3
   120f4:	andeq	lr, r2, ip, rrx
   120f8:	andeq	lr, r2, ip, rrx
   120fc:	andeq	r0, r0, r0
   12100:	push	{r4, lr}
   12104:	ldr	r4, [pc, #24]	; 12124 <_start@@Base+0xec>
   12108:	ldrb	r3, [r4]
   1210c:	cmp	r3, #0
   12110:	popne	{r4, pc}
   12114:	bl	12098 <_start@@Base+0x60>
   12118:	mov	r3, #1
   1211c:	strb	r3, [r4]
   12120:	pop	{r4, pc}
   12124:	andeq	lr, r2, ip, rrx
   12128:	ldr	r0, [pc, #40]	; 12158 <_start@@Base+0x120>
   1212c:	ldr	r3, [r0]
   12130:	cmp	r3, #0
   12134:	bne	1213c <_start@@Base+0x104>
   12138:	b	120c8 <_start@@Base+0x90>
   1213c:	ldr	r3, [pc, #24]	; 1215c <_start@@Base+0x124>
   12140:	cmp	r3, #0
   12144:	beq	12138 <_start@@Base+0x100>
   12148:	push	{r4, lr}
   1214c:	blx	r3
   12150:	pop	{r4, lr}
   12154:	b	120c8 <_start@@Base+0x90>
   12158:	andeq	sp, r2, r4, lsl pc
   1215c:	andeq	r0, r0, r0
   12160:	push	{fp}		; (str fp, [sp, #-4]!)
   12164:	add	fp, sp, #0
   12168:	sub	sp, sp, #12
   1216c:	mov	r3, r0
   12170:	strb	r3, [fp, #-5]
   12174:	ldrb	r3, [fp, #-5]
   12178:	mov	r0, r3
   1217c:	add	sp, fp, #0
   12180:	pop	{fp}		; (ldr fp, [sp], #4)
   12184:	bx	lr
   12188:	push	{fp, lr}
   1218c:	add	fp, sp, #4
   12190:	sub	sp, sp, #8
   12194:	str	r0, [fp, #-8]
   12198:	ldr	r3, [fp, #-8]
   1219c:	ldrb	r3, [r3]
   121a0:	mov	r0, r3
   121a4:	bl	12160 <_start@@Base+0x128>
   121a8:	mov	r3, r0
   121ac:	mov	r0, r3
   121b0:	sub	sp, fp, #4
   121b4:	pop	{fp, pc}
   121b8:	push	{fp}		; (str fp, [sp, #-4]!)
   121bc:	add	fp, sp, #0
   121c0:	sub	sp, sp, #12
   121c4:	mov	r3, r0
   121c8:	strh	r3, [fp, #-6]
   121cc:	ldrsh	r3, [fp, #-6]
   121d0:	mov	r0, r3
   121d4:	add	sp, fp, #0
   121d8:	pop	{fp}		; (ldr fp, [sp], #4)
   121dc:	bx	lr
   121e0:	push	{fp}		; (str fp, [sp, #-4]!)
   121e4:	add	fp, sp, #0
   121e8:	sub	sp, sp, #12
   121ec:	mov	r3, r0
   121f0:	strh	r3, [fp, #-6]
   121f4:	ldrsh	r3, [fp, #-6]
   121f8:	mov	r0, r3
   121fc:	add	sp, fp, #0
   12200:	pop	{fp}		; (ldr fp, [sp], #4)
   12204:	bx	lr
   12208:	push	{fp, lr}
   1220c:	add	fp, sp, #4
   12210:	sub	sp, sp, #8
   12214:	str	r0, [fp, #-8]
   12218:	ldr	r3, [fp, #-8]
   1221c:	ldrsh	r3, [r3]
   12220:	mov	r0, r3
   12224:	bl	121b8 <_start@@Base+0x180>
   12228:	mov	r3, r0
   1222c:	mov	r0, r3
   12230:	sub	sp, fp, #4
   12234:	pop	{fp, pc}
   12238:	push	{fp}		; (str fp, [sp, #-4]!)
   1223c:	add	fp, sp, #0
   12240:	sub	sp, sp, #20
   12244:	vstr	s0, [fp, #-16]
   12248:	ldr	r3, [fp, #-16]
   1224c:	str	r3, [fp, #-8]
   12250:	ldr	r3, [fp, #-8]
   12254:	str	r3, [fp, #-8]
   12258:	ldr	r3, [fp, #-8]
   1225c:	vmov	s15, r3
   12260:	vmov.f32	s0, s15
   12264:	add	sp, fp, #0
   12268:	pop	{fp}		; (ldr fp, [sp], #4)
   1226c:	bx	lr
   12270:	push	{fp}		; (str fp, [sp, #-4]!)
   12274:	add	fp, sp, #0
   12278:	sub	sp, sp, #20
   1227c:	vstr	s0, [fp, #-16]
   12280:	ldr	r3, [fp, #-16]
   12284:	str	r3, [fp, #-8]
   12288:	ldr	r3, [fp, #-8]
   1228c:	str	r3, [fp, #-8]
   12290:	ldr	r3, [fp, #-8]
   12294:	vmov	s15, r3
   12298:	vmov.f32	s0, s15
   1229c:	add	sp, fp, #0
   122a0:	pop	{fp}		; (ldr fp, [sp], #4)
   122a4:	bx	lr
   122a8:	push	{fp, lr}
   122ac:	add	fp, sp, #4
   122b0:	sub	sp, sp, #8
   122b4:	str	r0, [fp, #-8]
   122b8:	ldr	r3, [fp, #-8]
   122bc:	vldr	s15, [r3]
   122c0:	vmov.f32	s0, s15
   122c4:	bl	12238 <_start@@Base+0x200>
   122c8:	vmov.f32	s15, s0
   122cc:	vmov.f32	s0, s15
   122d0:	sub	sp, fp, #4
   122d4:	pop	{fp, pc}
   122d8:	push	{fp}		; (str fp, [sp, #-4]!)
   122dc:	add	fp, sp, #0
   122e0:	sub	sp, sp, #12
   122e4:	str	r0, [fp, #-8]
   122e8:	ldr	r3, [fp, #-8]
   122ec:	mov	r0, r3
   122f0:	add	sp, fp, #0
   122f4:	pop	{fp}		; (ldr fp, [sp], #4)
   122f8:	bx	lr
   122fc:	push	{fp, lr}
   12300:	add	fp, sp, #4
   12304:	sub	sp, sp, #8
   12308:	str	r0, [fp, #-8]
   1230c:	ldr	r3, [fp, #-8]
   12310:	ldr	r3, [r3]
   12314:	mov	r0, r3
   12318:	bl	122d8 <_start@@Base+0x2a0>
   1231c:	mov	r3, r0
   12320:	mov	r0, r3
   12324:	sub	sp, fp, #4
   12328:	pop	{fp, pc}
   1232c:	push	{fp}		; (str fp, [sp, #-4]!)
   12330:	add	fp, sp, #0
   12334:	sub	sp, sp, #12
   12338:	str	r0, [fp, #-8]
   1233c:	ldr	r3, [fp, #-8]
   12340:	mov	r0, r3
   12344:	add	sp, fp, #0
   12348:	pop	{fp}		; (ldr fp, [sp], #4)
   1234c:	bx	lr
   12350:	push	{fp, lr}
   12354:	add	fp, sp, #4
   12358:	sub	sp, sp, #8
   1235c:	str	r0, [fp, #-8]
   12360:	ldr	r3, [fp, #-8]
   12364:	ldr	r3, [r3]
   12368:	mov	r0, r3
   1236c:	bl	1232c <_start@@Base+0x2f4>
   12370:	mov	r3, r0
   12374:	mov	r0, r3
   12378:	sub	sp, fp, #4
   1237c:	pop	{fp, pc}
   12380:	push	{fp}		; (str fp, [sp, #-4]!)
   12384:	add	fp, sp, #0
   12388:	sub	sp, sp, #12
   1238c:	mov	r3, r0
   12390:	strh	r3, [fp, #-6]
   12394:	ldrh	r3, [fp, #-6]
   12398:	mov	r0, r3
   1239c:	add	sp, fp, #0
   123a0:	pop	{fp}		; (ldr fp, [sp], #4)
   123a4:	bx	lr
   123a8:	push	{fp, lr}
   123ac:	add	fp, sp, #4
   123b0:	sub	sp, sp, #8
   123b4:	str	r0, [fp, #-8]
   123b8:	ldr	r3, [fp, #-8]
   123bc:	ldrh	r3, [r3]
   123c0:	mov	r0, r3
   123c4:	bl	12380 <_start@@Base+0x348>
   123c8:	mov	r3, r0
   123cc:	mov	r0, r3
   123d0:	sub	sp, fp, #4
   123d4:	pop	{fp, pc}
   123d8:	push	{fp}		; (str fp, [sp, #-4]!)
   123dc:	add	fp, sp, #0
   123e0:	sub	sp, sp, #12
   123e4:	mov	r3, r0
   123e8:	strb	r3, [fp, #-5]
   123ec:	ldrb	r3, [fp, #-5]
   123f0:	mov	r0, r3
   123f4:	add	sp, fp, #0
   123f8:	pop	{fp}		; (ldr fp, [sp], #4)
   123fc:	bx	lr
   12400:	push	{fp, lr}
   12404:	add	fp, sp, #4
   12408:	sub	sp, sp, #8
   1240c:	str	r0, [fp, #-8]
   12410:	ldr	r3, [fp, #-8]
   12414:	ldrb	r3, [r3]
   12418:	mov	r0, r3
   1241c:	bl	123d8 <_start@@Base+0x3a0>
   12420:	mov	r3, r0
   12424:	mov	r0, r3
   12428:	sub	sp, fp, #4
   1242c:	pop	{fp, pc}
   12430:	push	{fp}		; (str fp, [sp, #-4]!)
   12434:	add	fp, sp, #0
   12438:	sub	sp, sp, #12
   1243c:	str	r0, [fp, #-8]
   12440:	ldr	r3, [fp, #-8]
   12444:	mov	r0, r3
   12448:	add	sp, fp, #0
   1244c:	pop	{fp}		; (ldr fp, [sp], #4)
   12450:	bx	lr
   12454:	push	{fp}		; (str fp, [sp, #-4]!)
   12458:	add	fp, sp, #0
   1245c:	sub	sp, sp, #12
   12460:	str	r0, [fp, #-8]
   12464:	ldr	r3, [fp, #-8]
   12468:	mov	r0, r3
   1246c:	add	sp, fp, #0
   12470:	pop	{fp}		; (ldr fp, [sp], #4)
   12474:	bx	lr
   12478:	push	{fp, lr}
   1247c:	add	fp, sp, #4
   12480:	sub	sp, sp, #8
   12484:	str	r0, [fp, #-8]
   12488:	ldr	r3, [fp, #-8]
   1248c:	ldr	r3, [r3]
   12490:	mov	r0, r3
   12494:	bl	12430 <_start@@Base+0x3f8>
   12498:	mov	r3, r0
   1249c:	mov	r0, r3
   124a0:	sub	sp, fp, #4
   124a4:	pop	{fp, pc}
   124a8:	push	{fp, lr}
   124ac:	add	fp, sp, #4
   124b0:	sub	sp, sp, #8
   124b4:	str	r0, [fp, #-8]
   124b8:	ldr	r3, [fp, #-8]
   124bc:	cmp	r3, #0
   124c0:	beq	124dc <_start@@Base+0x4a4>
   124c4:	ldr	r3, [fp, #-8]
   124c8:	sub	r3, r3, #4
   124cc:	mov	r0, r3
   124d0:	bl	122fc <_start@@Base+0x2c4>
   124d4:	mov	r3, r0
   124d8:	b	124e0 <_start@@Base+0x4a8>
   124dc:	mov	r3, #0
   124e0:	mov	r0, r3
   124e4:	sub	sp, fp, #4
   124e8:	pop	{fp, pc}
   124ec:	push	{fp, lr}
   124f0:	add	fp, sp, #4
   124f4:	sub	sp, sp, #8
   124f8:	str	r0, [fp, #-8]
   124fc:	ldr	r3, [fp, #-8]
   12500:	cmp	r3, #0
   12504:	beq	12520 <_start@@Base+0x4e8>
   12508:	ldr	r3, [fp, #-8]
   1250c:	sub	r3, r3, #4
   12510:	mov	r0, r3
   12514:	bl	122fc <_start@@Base+0x2c4>
   12518:	mov	r3, r0
   1251c:	b	12524 <_start@@Base+0x4ec>
   12520:	mov	r3, #0
   12524:	mov	r0, r3
   12528:	sub	sp, fp, #4
   1252c:	pop	{fp, pc}
   12530:	push	{fp, lr}
   12534:	add	fp, sp, #4
   12538:	sub	sp, sp, #8
   1253c:	str	r0, [fp, #-8]
   12540:	ldr	r0, [fp, #-8]
   12544:	bl	124a8 <_start@@Base+0x470>
   12548:	mov	r3, r0
   1254c:	mov	r0, r3
   12550:	sub	sp, fp, #4
   12554:	pop	{fp, pc}
   12558:	push	{fp, lr}
   1255c:	add	fp, sp, #4
   12560:	sub	sp, sp, #8
   12564:	str	r0, [fp, #-8]
   12568:	str	r1, [fp, #-12]
   1256c:	ldr	r0, [fp, #-8]
   12570:	bl	124a8 <_start@@Base+0x470>
   12574:	mov	r2, r0
   12578:	ldr	r3, [fp, #-12]
   1257c:	cmp	r2, r3
   12580:	bhi	125a4 <_start@@Base+0x56c>
   12584:	ldr	r3, [pc, #60]	; 125c8 <_start@@Base+0x590>
   12588:	add	r3, pc, r3
   1258c:	ldr	r2, [pc, #56]	; 125cc <_start@@Base+0x594>
   12590:	ldr	r1, [pc, #56]	; 125d0 <_start@@Base+0x598>
   12594:	add	r1, pc, r1
   12598:	ldr	r0, [pc, #52]	; 125d4 <_start@@Base+0x59c>
   1259c:	add	r0, pc, r0
   125a0:	bl	1202c <__assert_fail@plt>
   125a4:	ldr	r2, [fp, #-8]
   125a8:	ldr	r3, [fp, #-12]
   125ac:	add	r3, r2, r3
   125b0:	mov	r0, r3
   125b4:	bl	12188 <_start@@Base+0x150>
   125b8:	mov	r3, r0
   125bc:	mov	r0, r3
   125c0:	sub	sp, fp, #4
   125c4:	pop	{fp, pc}
   125c8:	andeq	r9, r0, r4, lsr #28
   125cc:	andeq	r0, r0, fp, lsl #3
   125d0:	andeq	r9, r0, r8, lsl r9
   125d4:	muleq	r0, r0, r9
   125d8:	push	{fp, lr}
   125dc:	add	fp, sp, #4
   125e0:	sub	sp, sp, #16
   125e4:	str	r0, [fp, #-16]
   125e8:	str	r1, [fp, #-20]	; 0xffffffec
   125ec:	mov	r3, #0
   125f0:	str	r3, [fp, #-12]
   125f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   125f8:	cmp	r3, #0
   125fc:	bne	12608 <_start@@Base+0x5d0>
   12600:	mov	r3, #1
   12604:	b	1266c <_start@@Base+0x634>
   12608:	sub	r3, fp, #12
   1260c:	mov	r2, #4
   12610:	ldr	r1, [fp, #-20]	; 0xffffffec
   12614:	mov	r0, r3
   12618:	bl	12008 <strncpy@plt>
   1261c:	ldr	r3, [fp, #-12]
   12620:	mov	r0, r3
   12624:	bl	12454 <_start@@Base+0x41c>
   12628:	mov	r3, r0
   1262c:	str	r3, [fp, #-12]
   12630:	ldr	r3, [fp, #-16]
   12634:	add	r3, r3, #4
   12638:	mov	r0, r3
   1263c:	bl	12478 <_start@@Base+0x440>
   12640:	str	r0, [fp, #-8]
   12644:	ldr	r3, [fp, #-12]
   12648:	cmp	r3, #0
   1264c:	beq	12660 <_start@@Base+0x628>
   12650:	ldr	r3, [fp, #-12]
   12654:	ldr	r2, [fp, #-8]
   12658:	cmp	r2, r3
   1265c:	bne	12668 <_start@@Base+0x630>
   12660:	mov	r3, #1
   12664:	b	1266c <_start@@Base+0x634>
   12668:	mov	r3, #0
   1266c:	mov	r0, r3
   12670:	sub	sp, fp, #4
   12674:	pop	{fp, pc}
   12678:	push	{fp}		; (str fp, [sp, #-4]!)
   1267c:	add	fp, sp, #0
   12680:	sub	sp, sp, #12
   12684:	mov	r3, r0
   12688:	strb	r3, [fp, #-5]
   1268c:	ldrsb	r3, [fp, #-5]
   12690:	mov	r0, r3
   12694:	add	sp, fp, #0
   12698:	pop	{fp}		; (ldr fp, [sp], #4)
   1269c:	bx	lr
   126a0:	push	{fp, lr}
   126a4:	add	fp, sp, #4
   126a8:	sub	sp, sp, #8
   126ac:	str	r0, [fp, #-8]
   126b0:	ldr	r3, [fp, #-8]
   126b4:	cmp	r3, #0
   126b8:	beq	126d0 <_start@@Base+0x698>
   126bc:	ldr	r3, [fp, #-8]
   126c0:	mov	r0, r3
   126c4:	bl	122a8 <_start@@Base+0x270>
   126c8:	vmov.f32	s15, s0
   126cc:	b	126d4 <_start@@Base+0x69c>
   126d0:	vldr	s15, [pc, #8]	; 126e0 <_start@@Base+0x6a8>
   126d4:	vmov.f32	s0, s15
   126d8:	sub	sp, fp, #4
   126dc:	pop	{fp, pc}
   126e0:	andeq	r0, r0, r0
   126e4:	push	{fp, lr}
   126e8:	add	fp, sp, #4
   126ec:	sub	sp, sp, #8
   126f0:	str	r0, [fp, #-8]
   126f4:	ldr	r3, [fp, #-8]
   126f8:	cmp	r3, #0
   126fc:	beq	12718 <_start@@Base+0x6e0>
   12700:	ldr	r3, [fp, #-8]
   12704:	add	r3, r3, #4
   12708:	mov	r0, r3
   1270c:	bl	122a8 <_start@@Base+0x270>
   12710:	vmov.f32	s15, s0
   12714:	b	1271c <_start@@Base+0x6e4>
   12718:	vldr	s15, [pc, #8]	; 12728 <_start@@Base+0x6f0>
   1271c:	vmov.f32	s0, s15
   12720:	sub	sp, fp, #4
   12724:	pop	{fp, pc}
   12728:	andeq	r0, r0, r0
   1272c:	push	{fp, lr}
   12730:	add	fp, sp, #4
   12734:	sub	sp, sp, #8
   12738:	str	r0, [fp, #-8]
   1273c:	ldr	r3, [fp, #-8]
   12740:	cmp	r3, #0
   12744:	beq	12760 <_start@@Base+0x728>
   12748:	ldr	r3, [fp, #-8]
   1274c:	add	r3, r3, #8
   12750:	mov	r0, r3
   12754:	bl	122a8 <_start@@Base+0x270>
   12758:	vmov.f32	s15, s0
   1275c:	b	12764 <_start@@Base+0x72c>
   12760:	vldr	s15, [pc, #8]	; 12770 <_start@@Base+0x738>
   12764:	vmov.f32	s0, s15
   12768:	sub	sp, fp, #4
   1276c:	pop	{fp, pc}
   12770:	andeq	r0, r0, r0
   12774:	push	{fp, lr}
   12778:	add	fp, sp, #4
   1277c:	sub	sp, sp, #16
   12780:	str	r0, [fp, #-16]
   12784:	mov	r3, #0
   12788:	str	r3, [fp, #-8]
   1278c:	ldr	r3, [fp, #-16]
   12790:	cmp	r3, #0
   12794:	beq	127c8 <_start@@Base+0x790>
   12798:	ldr	r1, [fp, #-8]
   1279c:	ldr	r0, [fp, #-16]
   127a0:	bl	125d8 <_start@@Base+0x5a0>
   127a4:	mov	r3, r0
   127a8:	cmp	r3, #0
   127ac:	beq	127c8 <_start@@Base+0x790>
   127b0:	ldr	r0, [fp, #-16]
   127b4:	bl	122fc <_start@@Base+0x2c4>
   127b8:	mov	r2, r0
   127bc:	ldr	r3, [fp, #-16]
   127c0:	add	r3, r3, r2
   127c4:	b	127cc <_start@@Base+0x794>
   127c8:	mov	r3, #0
   127cc:	mov	r0, r3
   127d0:	sub	sp, fp, #4
   127d4:	pop	{fp, pc}
   127d8:	push	{fp, lr}
   127dc:	add	fp, sp, #4
   127e0:	sub	sp, sp, #16
   127e4:	str	r0, [fp, #-16]
   127e8:	mov	r3, #0
   127ec:	strh	r3, [fp, #-6]
   127f0:	ldr	r3, [fp, #-16]
   127f4:	cmp	r3, #0
   127f8:	bne	1281c <_start@@Base+0x7e4>
   127fc:	ldr	r3, [pc, #176]	; 128b4 <_start@@Base+0x87c>
   12800:	add	r3, pc, r3
   12804:	mov	r2, #129	; 0x81
   12808:	ldr	r1, [pc, #168]	; 128b8 <_start@@Base+0x880>
   1280c:	add	r1, pc, r1
   12810:	ldr	r0, [pc, #164]	; 128bc <_start@@Base+0x884>
   12814:	add	r0, pc, r0
   12818:	bl	1202c <__assert_fail@plt>
   1281c:	mov	r3, #0
   12820:	strh	r3, [fp, #-8]
   12824:	ldr	r0, [fp, #-16]
   12828:	bl	12350 <_start@@Base+0x318>
   1282c:	mov	r3, r0
   12830:	rsb	r3, r3, #0
   12834:	ldr	r2, [fp, #-16]
   12838:	add	r3, r2, r3
   1283c:	str	r3, [fp, #-12]
   12840:	ldr	r0, [fp, #-12]
   12844:	bl	123a8 <_start@@Base+0x370>
   12848:	mov	r3, r0
   1284c:	mov	r2, r3
   12850:	ldrh	r3, [fp, #-8]
   12854:	add	r3, r3, #3
   12858:	lsl	r3, r3, #1
   1285c:	cmp	r2, r3
   12860:	bcc	12888 <_start@@Base+0x850>
   12864:	ldrh	r3, [fp, #-8]
   12868:	add	r3, r3, #2
   1286c:	lsl	r3, r3, #1
   12870:	ldr	r2, [fp, #-12]
   12874:	add	r3, r2, r3
   12878:	mov	r0, r3
   1287c:	bl	123a8 <_start@@Base+0x370>
   12880:	mov	r3, r0
   12884:	strh	r3, [fp, #-6]
   12888:	ldrh	r3, [fp, #-6]
   1288c:	cmp	r3, #0
   12890:	beq	128a4 <_start@@Base+0x86c>
   12894:	ldrh	r3, [fp, #-6]
   12898:	ldr	r2, [fp, #-16]
   1289c:	add	r3, r2, r3
   128a0:	b	128a8 <_start@@Base+0x870>
   128a4:	mov	r3, #0
   128a8:	mov	r0, r3
   128ac:	sub	sp, fp, #4
   128b0:	pop	{fp, pc}
   128b4:	andeq	r9, r0, r0, ror fp
   128b8:	andeq	r9, r0, r8, asr r7
   128bc:	andeq	r9, r0, r4, asr #15
   128c0:	push	{fp, lr}
   128c4:	add	fp, sp, #4
   128c8:	sub	sp, sp, #16
   128cc:	str	r0, [fp, #-16]
   128d0:	mov	r3, #0
   128d4:	strh	r3, [fp, #-6]
   128d8:	ldr	r3, [fp, #-16]
   128dc:	cmp	r3, #0
   128e0:	bne	12904 <_start@@Base+0x8cc>
   128e4:	ldr	r3, [pc, #188]	; 129a8 <_start@@Base+0x970>
   128e8:	add	r3, pc, r3
   128ec:	mov	r2, #130	; 0x82
   128f0:	ldr	r1, [pc, #180]	; 129ac <_start@@Base+0x974>
   128f4:	add	r1, pc, r1
   128f8:	ldr	r0, [pc, #176]	; 129b0 <_start@@Base+0x978>
   128fc:	add	r0, pc, r0
   12900:	bl	1202c <__assert_fail@plt>
   12904:	mov	r3, #1
   12908:	strh	r3, [fp, #-8]
   1290c:	ldr	r0, [fp, #-16]
   12910:	bl	12350 <_start@@Base+0x318>
   12914:	mov	r3, r0
   12918:	rsb	r3, r3, #0
   1291c:	ldr	r2, [fp, #-16]
   12920:	add	r3, r2, r3
   12924:	str	r3, [fp, #-12]
   12928:	ldr	r0, [fp, #-12]
   1292c:	bl	123a8 <_start@@Base+0x370>
   12930:	mov	r3, r0
   12934:	mov	r2, r3
   12938:	ldrh	r3, [fp, #-8]
   1293c:	add	r3, r3, #3
   12940:	lsl	r3, r3, #1
   12944:	cmp	r2, r3
   12948:	bcc	12970 <_start@@Base+0x938>
   1294c:	ldrh	r3, [fp, #-8]
   12950:	add	r3, r3, #2
   12954:	lsl	r3, r3, #1
   12958:	ldr	r2, [fp, #-12]
   1295c:	add	r3, r2, r3
   12960:	mov	r0, r3
   12964:	bl	123a8 <_start@@Base+0x370>
   12968:	mov	r3, r0
   1296c:	strh	r3, [fp, #-6]
   12970:	ldrh	r3, [fp, #-6]
   12974:	cmp	r3, #0
   12978:	beq	12998 <_start@@Base+0x960>
   1297c:	ldrh	r3, [fp, #-6]
   12980:	ldr	r2, [fp, #-16]
   12984:	add	r3, r2, r3
   12988:	mov	r0, r3
   1298c:	bl	12208 <_start@@Base+0x1d0>
   12990:	mov	r3, r0
   12994:	b	1299c <_start@@Base+0x964>
   12998:	mov	r3, #150	; 0x96
   1299c:	mov	r0, r3
   129a0:	sub	sp, fp, #4
   129a4:	pop	{fp, pc}
   129a8:	andeq	r9, r0, r4, lsl #20
   129ac:	andeq	r9, r0, r0, ror r6
   129b0:	ldrdeq	r9, [r0], -ip
   129b4:	push	{fp, lr}
   129b8:	add	fp, sp, #4
   129bc:	sub	sp, sp, #16
   129c0:	str	r0, [fp, #-16]
   129c4:	mov	r3, #0
   129c8:	strh	r3, [fp, #-6]
   129cc:	ldr	r3, [fp, #-16]
   129d0:	cmp	r3, #0
   129d4:	bne	129f8 <_start@@Base+0x9c0>
   129d8:	ldr	r3, [pc, #164]	; 12a84 <_start@@Base+0xa4c>
   129dc:	add	r3, pc, r3
   129e0:	mov	r2, #130	; 0x82
   129e4:	ldr	r1, [pc, #156]	; 12a88 <_start@@Base+0xa50>
   129e8:	add	r1, pc, r1
   129ec:	ldr	r0, [pc, #152]	; 12a8c <_start@@Base+0xa54>
   129f0:	add	r0, pc, r0
   129f4:	bl	1202c <__assert_fail@plt>
   129f8:	mov	r3, #1
   129fc:	strh	r3, [fp, #-8]
   12a00:	ldr	r0, [fp, #-16]
   12a04:	bl	12350 <_start@@Base+0x318>
   12a08:	mov	r3, r0
   12a0c:	rsb	r3, r3, #0
   12a10:	ldr	r2, [fp, #-16]
   12a14:	add	r3, r2, r3
   12a18:	str	r3, [fp, #-12]
   12a1c:	ldr	r0, [fp, #-12]
   12a20:	bl	123a8 <_start@@Base+0x370>
   12a24:	mov	r3, r0
   12a28:	mov	r2, r3
   12a2c:	ldrh	r3, [fp, #-8]
   12a30:	add	r3, r3, #3
   12a34:	lsl	r3, r3, #1
   12a38:	cmp	r2, r3
   12a3c:	bcc	12a64 <_start@@Base+0xa2c>
   12a40:	ldrh	r3, [fp, #-8]
   12a44:	add	r3, r3, #2
   12a48:	lsl	r3, r3, #1
   12a4c:	ldr	r2, [fp, #-12]
   12a50:	add	r3, r2, r3
   12a54:	mov	r0, r3
   12a58:	bl	123a8 <_start@@Base+0x370>
   12a5c:	mov	r3, r0
   12a60:	strh	r3, [fp, #-6]
   12a64:	ldrh	r3, [fp, #-6]
   12a68:	cmp	r3, #0
   12a6c:	movne	r3, #1
   12a70:	moveq	r3, #0
   12a74:	uxtb	r3, r3
   12a78:	mov	r0, r3
   12a7c:	sub	sp, fp, #4
   12a80:	pop	{fp, pc}
   12a84:	andeq	r9, r0, ip, ror #18
   12a88:	andeq	r9, r0, ip, ror r5
   12a8c:	andeq	r9, r0, r8, ror #11
   12a90:	push	{fp, lr}
   12a94:	add	fp, sp, #4
   12a98:	sub	sp, sp, #16
   12a9c:	str	r0, [fp, #-16]
   12aa0:	mov	r3, #0
   12aa4:	strh	r3, [fp, #-6]
   12aa8:	ldr	r3, [fp, #-16]
   12aac:	cmp	r3, #0
   12ab0:	bne	12ad4 <_start@@Base+0xa9c>
   12ab4:	ldr	r3, [pc, #188]	; 12b78 <_start@@Base+0xb40>
   12ab8:	add	r3, pc, r3
   12abc:	mov	r2, #131	; 0x83
   12ac0:	ldr	r1, [pc, #180]	; 12b7c <_start@@Base+0xb44>
   12ac4:	add	r1, pc, r1
   12ac8:	ldr	r0, [pc, #176]	; 12b80 <_start@@Base+0xb48>
   12acc:	add	r0, pc, r0
   12ad0:	bl	1202c <__assert_fail@plt>
   12ad4:	mov	r3, #2
   12ad8:	strh	r3, [fp, #-8]
   12adc:	ldr	r0, [fp, #-16]
   12ae0:	bl	12350 <_start@@Base+0x318>
   12ae4:	mov	r3, r0
   12ae8:	rsb	r3, r3, #0
   12aec:	ldr	r2, [fp, #-16]
   12af0:	add	r3, r2, r3
   12af4:	str	r3, [fp, #-12]
   12af8:	ldr	r0, [fp, #-12]
   12afc:	bl	123a8 <_start@@Base+0x370>
   12b00:	mov	r3, r0
   12b04:	mov	r2, r3
   12b08:	ldrh	r3, [fp, #-8]
   12b0c:	add	r3, r3, #3
   12b10:	lsl	r3, r3, #1
   12b14:	cmp	r2, r3
   12b18:	bcc	12b40 <_start@@Base+0xb08>
   12b1c:	ldrh	r3, [fp, #-8]
   12b20:	add	r3, r3, #2
   12b24:	lsl	r3, r3, #1
   12b28:	ldr	r2, [fp, #-12]
   12b2c:	add	r3, r2, r3
   12b30:	mov	r0, r3
   12b34:	bl	123a8 <_start@@Base+0x370>
   12b38:	mov	r3, r0
   12b3c:	strh	r3, [fp, #-6]
   12b40:	ldrh	r3, [fp, #-6]
   12b44:	cmp	r3, #0
   12b48:	beq	12b68 <_start@@Base+0xb30>
   12b4c:	ldrh	r3, [fp, #-6]
   12b50:	ldr	r2, [fp, #-16]
   12b54:	add	r3, r2, r3
   12b58:	mov	r0, r3
   12b5c:	bl	12208 <_start@@Base+0x1d0>
   12b60:	mov	r3, r0
   12b64:	b	12b6c <_start@@Base+0xb34>
   12b68:	mov	r3, #100	; 0x64
   12b6c:	mov	r0, r3
   12b70:	sub	sp, fp, #4
   12b74:	pop	{fp, pc}
   12b78:	andeq	r9, r0, r8, lsl r8
   12b7c:	andeq	r9, r0, r0, lsr #9
   12b80:	andeq	r9, r0, ip, lsl #10
   12b84:	push	{fp, lr}
   12b88:	add	fp, sp, #4
   12b8c:	sub	sp, sp, #16
   12b90:	str	r0, [fp, #-16]
   12b94:	mov	r3, #0
   12b98:	strh	r3, [fp, #-6]
   12b9c:	ldr	r3, [fp, #-16]
   12ba0:	cmp	r3, #0
   12ba4:	bne	12bc8 <_start@@Base+0xb90>
   12ba8:	ldr	r3, [pc, #164]	; 12c54 <_start@@Base+0xc1c>
   12bac:	add	r3, pc, r3
   12bb0:	mov	r2, #131	; 0x83
   12bb4:	ldr	r1, [pc, #156]	; 12c58 <_start@@Base+0xc20>
   12bb8:	add	r1, pc, r1
   12bbc:	ldr	r0, [pc, #152]	; 12c5c <_start@@Base+0xc24>
   12bc0:	add	r0, pc, r0
   12bc4:	bl	1202c <__assert_fail@plt>
   12bc8:	mov	r3, #2
   12bcc:	strh	r3, [fp, #-8]
   12bd0:	ldr	r0, [fp, #-16]
   12bd4:	bl	12350 <_start@@Base+0x318>
   12bd8:	mov	r3, r0
   12bdc:	rsb	r3, r3, #0
   12be0:	ldr	r2, [fp, #-16]
   12be4:	add	r3, r2, r3
   12be8:	str	r3, [fp, #-12]
   12bec:	ldr	r0, [fp, #-12]
   12bf0:	bl	123a8 <_start@@Base+0x370>
   12bf4:	mov	r3, r0
   12bf8:	mov	r2, r3
   12bfc:	ldrh	r3, [fp, #-8]
   12c00:	add	r3, r3, #3
   12c04:	lsl	r3, r3, #1
   12c08:	cmp	r2, r3
   12c0c:	bcc	12c34 <_start@@Base+0xbfc>
   12c10:	ldrh	r3, [fp, #-8]
   12c14:	add	r3, r3, #2
   12c18:	lsl	r3, r3, #1
   12c1c:	ldr	r2, [fp, #-12]
   12c20:	add	r3, r2, r3
   12c24:	mov	r0, r3
   12c28:	bl	123a8 <_start@@Base+0x370>
   12c2c:	mov	r3, r0
   12c30:	strh	r3, [fp, #-6]
   12c34:	ldrh	r3, [fp, #-6]
   12c38:	cmp	r3, #0
   12c3c:	movne	r3, #1
   12c40:	moveq	r3, #0
   12c44:	uxtb	r3, r3
   12c48:	mov	r0, r3
   12c4c:	sub	sp, fp, #4
   12c50:	pop	{fp, pc}
   12c54:	andeq	r9, r0, r8, ror r7
   12c58:	andeq	r9, r0, ip, lsr #7
   12c5c:	andeq	r9, r0, r8, lsl r4
   12c60:	push	{fp, lr}
   12c64:	add	fp, sp, #4
   12c68:	sub	sp, sp, #24
   12c6c:	str	r0, [fp, #-24]	; 0xffffffe8
   12c70:	mov	r3, #0
   12c74:	strh	r3, [fp, #-6]
   12c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c7c:	cmp	r3, #0
   12c80:	bne	12ca4 <_start@@Base+0xc6c>
   12c84:	ldr	r3, [pc, #204]	; 12d58 <_start@@Base+0xd20>
   12c88:	add	r3, pc, r3
   12c8c:	mov	r2, #132	; 0x84
   12c90:	ldr	r1, [pc, #196]	; 12d5c <_start@@Base+0xd24>
   12c94:	add	r1, pc, r1
   12c98:	ldr	r0, [pc, #192]	; 12d60 <_start@@Base+0xd28>
   12c9c:	add	r0, pc, r0
   12ca0:	bl	1202c <__assert_fail@plt>
   12ca4:	mov	r3, #3
   12ca8:	strh	r3, [fp, #-8]
   12cac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12cb0:	bl	12350 <_start@@Base+0x318>
   12cb4:	mov	r3, r0
   12cb8:	rsb	r3, r3, #0
   12cbc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12cc0:	add	r3, r2, r3
   12cc4:	str	r3, [fp, #-12]
   12cc8:	ldr	r0, [fp, #-12]
   12ccc:	bl	123a8 <_start@@Base+0x370>
   12cd0:	mov	r3, r0
   12cd4:	mov	r2, r3
   12cd8:	ldrh	r3, [fp, #-8]
   12cdc:	add	r3, r3, #3
   12ce0:	lsl	r3, r3, #1
   12ce4:	cmp	r2, r3
   12ce8:	bcc	12d10 <_start@@Base+0xcd8>
   12cec:	ldrh	r3, [fp, #-8]
   12cf0:	add	r3, r3, #2
   12cf4:	lsl	r3, r3, #1
   12cf8:	ldr	r2, [fp, #-12]
   12cfc:	add	r3, r2, r3
   12d00:	mov	r0, r3
   12d04:	bl	123a8 <_start@@Base+0x370>
   12d08:	mov	r3, r0
   12d0c:	strh	r3, [fp, #-6]
   12d10:	ldrh	r3, [fp, #-6]
   12d14:	cmp	r3, #0
   12d18:	beq	12d48 <_start@@Base+0xd10>
   12d1c:	ldrh	r3, [fp, #-6]
   12d20:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12d24:	add	r3, r2, r3
   12d28:	str	r3, [fp, #-16]
   12d2c:	ldr	r0, [fp, #-16]
   12d30:	bl	122fc <_start@@Base+0x2c4>
   12d34:	mov	r3, r0
   12d38:	add	r3, r3, #4
   12d3c:	ldr	r2, [fp, #-16]
   12d40:	add	r3, r2, r3
   12d44:	b	12d4c <_start@@Base+0xd14>
   12d48:	mov	r3, #0
   12d4c:	mov	r0, r3
   12d50:	sub	sp, fp, #4
   12d54:	pop	{fp, pc}
   12d58:	andeq	r9, r0, r0, lsl #13
   12d5c:	ldrdeq	r9, [r0], -r0
   12d60:	andeq	r9, r0, ip, lsr r3
   12d64:	push	{fp, lr}
   12d68:	add	fp, sp, #4
   12d6c:	sub	sp, sp, #24
   12d70:	str	r0, [fp, #-24]	; 0xffffffe8
   12d74:	mov	r3, #0
   12d78:	strh	r3, [fp, #-6]
   12d7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d80:	cmp	r3, #0
   12d84:	bne	12da8 <_start@@Base+0xd70>
   12d88:	ldr	r3, [pc, #204]	; 12e5c <_start@@Base+0xe24>
   12d8c:	add	r3, pc, r3
   12d90:	mov	r2, #135	; 0x87
   12d94:	ldr	r1, [pc, #196]	; 12e60 <_start@@Base+0xe28>
   12d98:	add	r1, pc, r1
   12d9c:	ldr	r0, [pc, #192]	; 12e64 <_start@@Base+0xe2c>
   12da0:	add	r0, pc, r0
   12da4:	bl	1202c <__assert_fail@plt>
   12da8:	mov	r3, #5
   12dac:	strh	r3, [fp, #-8]
   12db0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12db4:	bl	12350 <_start@@Base+0x318>
   12db8:	mov	r3, r0
   12dbc:	rsb	r3, r3, #0
   12dc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12dc4:	add	r3, r2, r3
   12dc8:	str	r3, [fp, #-12]
   12dcc:	ldr	r0, [fp, #-12]
   12dd0:	bl	123a8 <_start@@Base+0x370>
   12dd4:	mov	r3, r0
   12dd8:	mov	r2, r3
   12ddc:	ldrh	r3, [fp, #-8]
   12de0:	add	r3, r3, #3
   12de4:	lsl	r3, r3, #1
   12de8:	cmp	r2, r3
   12dec:	bcc	12e14 <_start@@Base+0xddc>
   12df0:	ldrh	r3, [fp, #-8]
   12df4:	add	r3, r3, #2
   12df8:	lsl	r3, r3, #1
   12dfc:	ldr	r2, [fp, #-12]
   12e00:	add	r3, r2, r3
   12e04:	mov	r0, r3
   12e08:	bl	123a8 <_start@@Base+0x370>
   12e0c:	mov	r3, r0
   12e10:	strh	r3, [fp, #-6]
   12e14:	ldrh	r3, [fp, #-6]
   12e18:	cmp	r3, #0
   12e1c:	beq	12e4c <_start@@Base+0xe14>
   12e20:	ldrh	r3, [fp, #-6]
   12e24:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12e28:	add	r3, r2, r3
   12e2c:	str	r3, [fp, #-16]
   12e30:	ldr	r0, [fp, #-16]
   12e34:	bl	122fc <_start@@Base+0x2c4>
   12e38:	mov	r3, r0
   12e3c:	add	r3, r3, #4
   12e40:	ldr	r2, [fp, #-16]
   12e44:	add	r3, r2, r3
   12e48:	b	12e50 <_start@@Base+0xe18>
   12e4c:	mov	r3, #0
   12e50:	mov	r0, r3
   12e54:	sub	sp, fp, #4
   12e58:	pop	{fp, pc}
   12e5c:	andeq	r9, r0, r0, lsl #12
   12e60:	andeq	r9, r0, ip, asr #3
   12e64:	andeq	r9, r0, r8, lsr r2
   12e68:	push	{fp, lr}
   12e6c:	add	fp, sp, #4
   12e70:	sub	sp, sp, #24
   12e74:	str	r0, [fp, #-24]	; 0xffffffe8
   12e78:	mov	r3, #0
   12e7c:	strh	r3, [fp, #-6]
   12e80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e84:	cmp	r3, #0
   12e88:	bne	12eac <_start@@Base+0xe74>
   12e8c:	ldr	r3, [pc, #204]	; 12f60 <_start@@Base+0xf28>
   12e90:	add	r3, pc, r3
   12e94:	mov	r2, #137	; 0x89
   12e98:	ldr	r1, [pc, #196]	; 12f64 <_start@@Base+0xf2c>
   12e9c:	add	r1, pc, r1
   12ea0:	ldr	r0, [pc, #192]	; 12f68 <_start@@Base+0xf30>
   12ea4:	add	r0, pc, r0
   12ea8:	bl	1202c <__assert_fail@plt>
   12eac:	mov	r3, #7
   12eb0:	strh	r3, [fp, #-8]
   12eb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12eb8:	bl	12350 <_start@@Base+0x318>
   12ebc:	mov	r3, r0
   12ec0:	rsb	r3, r3, #0
   12ec4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ec8:	add	r3, r2, r3
   12ecc:	str	r3, [fp, #-12]
   12ed0:	ldr	r0, [fp, #-12]
   12ed4:	bl	123a8 <_start@@Base+0x370>
   12ed8:	mov	r3, r0
   12edc:	mov	r2, r3
   12ee0:	ldrh	r3, [fp, #-8]
   12ee4:	add	r3, r3, #3
   12ee8:	lsl	r3, r3, #1
   12eec:	cmp	r2, r3
   12ef0:	bcc	12f18 <_start@@Base+0xee0>
   12ef4:	ldrh	r3, [fp, #-8]
   12ef8:	add	r3, r3, #2
   12efc:	lsl	r3, r3, #1
   12f00:	ldr	r2, [fp, #-12]
   12f04:	add	r3, r2, r3
   12f08:	mov	r0, r3
   12f0c:	bl	123a8 <_start@@Base+0x370>
   12f10:	mov	r3, r0
   12f14:	strh	r3, [fp, #-6]
   12f18:	ldrh	r3, [fp, #-6]
   12f1c:	cmp	r3, #0
   12f20:	beq	12f50 <_start@@Base+0xf18>
   12f24:	ldrh	r3, [fp, #-6]
   12f28:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12f2c:	add	r3, r2, r3
   12f30:	str	r3, [fp, #-16]
   12f34:	ldr	r0, [fp, #-16]
   12f38:	bl	122fc <_start@@Base+0x2c4>
   12f3c:	mov	r3, r0
   12f40:	add	r3, r3, #4
   12f44:	ldr	r2, [fp, #-16]
   12f48:	add	r3, r2, r3
   12f4c:	b	12f54 <_start@@Base+0xf1c>
   12f50:	mov	r3, #0
   12f54:	mov	r0, r3
   12f58:	sub	sp, fp, #4
   12f5c:	pop	{fp, pc}
   12f60:	andeq	r9, r0, r8, lsr r5
   12f64:	andeq	r9, r0, r8, asr #1
   12f68:	andeq	r9, r0, r4, lsr r1
   12f6c:	push	{fp, lr}
   12f70:	add	fp, sp, #4
   12f74:	sub	sp, sp, #16
   12f78:	str	r0, [fp, #-16]
   12f7c:	mov	r3, #0
   12f80:	strh	r3, [fp, #-6]
   12f84:	ldr	r3, [fp, #-16]
   12f88:	cmp	r3, #0
   12f8c:	bne	12fb0 <_start@@Base+0xf78>
   12f90:	ldr	r3, [pc, #188]	; 13054 <_start@@Base+0x101c>
   12f94:	add	r3, pc, r3
   12f98:	mov	r2, #138	; 0x8a
   12f9c:	ldr	r1, [pc, #180]	; 13058 <_start@@Base+0x1020>
   12fa0:	add	r1, pc, r1
   12fa4:	ldr	r0, [pc, #176]	; 1305c <_start@@Base+0x1024>
   12fa8:	add	r0, pc, r0
   12fac:	bl	1202c <__assert_fail@plt>
   12fb0:	mov	r3, #8
   12fb4:	strh	r3, [fp, #-8]
   12fb8:	ldr	r0, [fp, #-16]
   12fbc:	bl	12350 <_start@@Base+0x318>
   12fc0:	mov	r3, r0
   12fc4:	rsb	r3, r3, #0
   12fc8:	ldr	r2, [fp, #-16]
   12fcc:	add	r3, r2, r3
   12fd0:	str	r3, [fp, #-12]
   12fd4:	ldr	r0, [fp, #-12]
   12fd8:	bl	123a8 <_start@@Base+0x370>
   12fdc:	mov	r3, r0
   12fe0:	mov	r2, r3
   12fe4:	ldrh	r3, [fp, #-8]
   12fe8:	add	r3, r3, #3
   12fec:	lsl	r3, r3, #1
   12ff0:	cmp	r2, r3
   12ff4:	bcc	1301c <_start@@Base+0xfe4>
   12ff8:	ldrh	r3, [fp, #-8]
   12ffc:	add	r3, r3, #2
   13000:	lsl	r3, r3, #1
   13004:	ldr	r2, [fp, #-12]
   13008:	add	r3, r2, r3
   1300c:	mov	r0, r3
   13010:	bl	123a8 <_start@@Base+0x370>
   13014:	mov	r3, r0
   13018:	strh	r3, [fp, #-6]
   1301c:	ldrh	r3, [fp, #-6]
   13020:	cmp	r3, #0
   13024:	beq	13044 <_start@@Base+0x100c>
   13028:	ldrh	r3, [fp, #-6]
   1302c:	ldr	r2, [fp, #-16]
   13030:	add	r3, r2, r3
   13034:	mov	r0, r3
   13038:	bl	12400 <_start@@Base+0x3c8>
   1303c:	mov	r3, r0
   13040:	b	13048 <_start@@Base+0x1010>
   13044:	mov	r3, #0
   13048:	mov	r0, r3
   1304c:	sub	sp, fp, #4
   13050:	pop	{fp, pc}
   13054:	andeq	r9, r0, r0, ror r4
   13058:	andeq	r8, r0, r4, asr #31
   1305c:	andeq	r9, r0, r0, lsr r0
   13060:	push	{fp, lr}
   13064:	add	fp, sp, #4
   13068:	sub	sp, sp, #24
   1306c:	str	r0, [fp, #-24]	; 0xffffffe8
   13070:	mov	r3, #0
   13074:	strh	r3, [fp, #-6]
   13078:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1307c:	cmp	r3, #0
   13080:	bne	130a4 <_start@@Base+0x106c>
   13084:	ldr	r3, [pc, #200]	; 13154 <_start@@Base+0x111c>
   13088:	add	r3, pc, r3
   1308c:	mov	r2, #138	; 0x8a
   13090:	ldr	r1, [pc, #192]	; 13158 <_start@@Base+0x1120>
   13094:	add	r1, pc, r1
   13098:	ldr	r0, [pc, #188]	; 1315c <_start@@Base+0x1124>
   1309c:	add	r0, pc, r0
   130a0:	bl	1202c <__assert_fail@plt>
   130a4:	mov	r3, #9
   130a8:	strh	r3, [fp, #-8]
   130ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   130b0:	bl	12350 <_start@@Base+0x318>
   130b4:	mov	r3, r0
   130b8:	rsb	r3, r3, #0
   130bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   130c0:	add	r3, r2, r3
   130c4:	str	r3, [fp, #-12]
   130c8:	ldr	r0, [fp, #-12]
   130cc:	bl	123a8 <_start@@Base+0x370>
   130d0:	mov	r3, r0
   130d4:	mov	r2, r3
   130d8:	ldrh	r3, [fp, #-8]
   130dc:	add	r3, r3, #3
   130e0:	lsl	r3, r3, #1
   130e4:	cmp	r2, r3
   130e8:	bcc	13110 <_start@@Base+0x10d8>
   130ec:	ldrh	r3, [fp, #-8]
   130f0:	add	r3, r3, #2
   130f4:	lsl	r3, r3, #1
   130f8:	ldr	r2, [fp, #-12]
   130fc:	add	r3, r2, r3
   13100:	mov	r0, r3
   13104:	bl	123a8 <_start@@Base+0x370>
   13108:	mov	r3, r0
   1310c:	strh	r3, [fp, #-6]
   13110:	ldrh	r3, [fp, #-6]
   13114:	cmp	r3, #0
   13118:	beq	13144 <_start@@Base+0x110c>
   1311c:	ldrh	r3, [fp, #-6]
   13120:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13124:	add	r3, r2, r3
   13128:	str	r3, [fp, #-16]
   1312c:	ldr	r0, [fp, #-16]
   13130:	bl	122fc <_start@@Base+0x2c4>
   13134:	mov	r2, r0
   13138:	ldr	r3, [fp, #-16]
   1313c:	add	r3, r3, r2
   13140:	b	13148 <_start@@Base+0x1110>
   13144:	mov	r3, #0
   13148:	mov	r0, r3
   1314c:	sub	sp, fp, #4
   13150:	pop	{fp, pc}
   13154:	andeq	r9, r0, r0, lsr #7
   13158:	ldrdeq	r8, [r0], -r0
   1315c:	andeq	r8, r0, ip, lsr pc
   13160:	push	{fp, lr}
   13164:	add	fp, sp, #4
   13168:	sub	sp, sp, #8
   1316c:	str	r0, [fp, #-8]
   13170:	ldr	r3, [fp, #-8]
   13174:	cmp	r3, #0
   13178:	beq	13194 <_start@@Base+0x115c>
   1317c:	ldr	r3, [fp, #-8]
   13180:	sub	r3, r3, #4
   13184:	mov	r0, r3
   13188:	bl	122fc <_start@@Base+0x2c4>
   1318c:	mov	r3, r0
   13190:	b	13198 <_start@@Base+0x1160>
   13194:	mov	r3, #0
   13198:	mov	r0, r3
   1319c:	sub	sp, fp, #4
   131a0:	pop	{fp, pc}
   131a4:	push	{fp, lr}
   131a8:	add	fp, sp, #4
   131ac:	sub	sp, sp, #16
   131b0:	str	r0, [fp, #-16]
   131b4:	str	r1, [fp, #-20]	; 0xffffffec
   131b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131bc:	lsl	r3, r3, #2
   131c0:	ldr	r2, [fp, #-16]
   131c4:	add	r3, r2, r3
   131c8:	str	r3, [fp, #-8]
   131cc:	ldr	r0, [fp, #-16]
   131d0:	bl	124a8 <_start@@Base+0x470>
   131d4:	mov	r2, r0
   131d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131dc:	cmp	r2, r3
   131e0:	bhi	13204 <_start@@Base+0x11cc>
   131e4:	ldr	r3, [pc, #56]	; 13224 <_start@@Base+0x11ec>
   131e8:	add	r3, pc, r3
   131ec:	mov	r2, #145	; 0x91
   131f0:	ldr	r1, [pc, #48]	; 13228 <_start@@Base+0x11f0>
   131f4:	add	r1, pc, r1
   131f8:	ldr	r0, [pc, #44]	; 1322c <_start@@Base+0x11f4>
   131fc:	add	r0, pc, r0
   13200:	bl	1202c <__assert_fail@plt>
   13204:	ldr	r0, [fp, #-8]
   13208:	bl	122fc <_start@@Base+0x2c4>
   1320c:	mov	r2, r0
   13210:	ldr	r3, [fp, #-8]
   13214:	add	r3, r3, r2
   13218:	mov	r0, r3
   1321c:	sub	sp, fp, #4
   13220:	pop	{fp, pc}
   13224:	andeq	r9, r0, r0, lsl #4
   13228:	andeq	r8, r0, r0, ror sp
   1322c:	andeq	r8, r0, r0, lsr sp
   13230:	push	{fp, lr}
   13234:	add	fp, sp, #4
   13238:	sub	sp, sp, #24
   1323c:	str	r0, [fp, #-24]	; 0xffffffe8
   13240:	mov	r3, #0
   13244:	strh	r3, [fp, #-6]
   13248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1324c:	cmp	r3, #0
   13250:	bne	13274 <_start@@Base+0x123c>
   13254:	ldr	r3, [pc, #204]	; 13328 <_start@@Base+0x12f0>
   13258:	add	r3, pc, r3
   1325c:	mov	r2, #148	; 0x94
   13260:	ldr	r1, [pc, #196]	; 1332c <_start@@Base+0x12f4>
   13264:	add	r1, pc, r1
   13268:	ldr	r0, [pc, #192]	; 13330 <_start@@Base+0x12f8>
   1326c:	add	r0, pc, r0
   13270:	bl	1202c <__assert_fail@plt>
   13274:	mov	r3, #0
   13278:	strh	r3, [fp, #-8]
   1327c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13280:	bl	12350 <_start@@Base+0x318>
   13284:	mov	r3, r0
   13288:	rsb	r3, r3, #0
   1328c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13290:	add	r3, r2, r3
   13294:	str	r3, [fp, #-12]
   13298:	ldr	r0, [fp, #-12]
   1329c:	bl	123a8 <_start@@Base+0x370>
   132a0:	mov	r3, r0
   132a4:	mov	r2, r3
   132a8:	ldrh	r3, [fp, #-8]
   132ac:	add	r3, r3, #3
   132b0:	lsl	r3, r3, #1
   132b4:	cmp	r2, r3
   132b8:	bcc	132e0 <_start@@Base+0x12a8>
   132bc:	ldrh	r3, [fp, #-8]
   132c0:	add	r3, r3, #2
   132c4:	lsl	r3, r3, #1
   132c8:	ldr	r2, [fp, #-12]
   132cc:	add	r3, r2, r3
   132d0:	mov	r0, r3
   132d4:	bl	123a8 <_start@@Base+0x370>
   132d8:	mov	r3, r0
   132dc:	strh	r3, [fp, #-6]
   132e0:	ldrh	r3, [fp, #-6]
   132e4:	cmp	r3, #0
   132e8:	beq	13318 <_start@@Base+0x12e0>
   132ec:	ldrh	r3, [fp, #-6]
   132f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   132f4:	add	r3, r2, r3
   132f8:	str	r3, [fp, #-16]
   132fc:	ldr	r0, [fp, #-16]
   13300:	bl	122fc <_start@@Base+0x2c4>
   13304:	mov	r3, r0
   13308:	add	r3, r3, #4
   1330c:	ldr	r2, [fp, #-16]
   13310:	add	r3, r2, r3
   13314:	b	1331c <_start@@Base+0x12e4>
   13318:	mov	r3, #0
   1331c:	mov	r0, r3
   13320:	sub	sp, fp, #4
   13324:	pop	{fp, pc}
   13328:	strdeq	r9, [r0], -r0
   1332c:	andeq	r8, r0, r0, lsl #26
   13330:	andeq	r8, r0, ip, ror #26
   13334:	push	{fp, lr}
   13338:	add	fp, sp, #4
   1333c:	sub	sp, sp, #16
   13340:	str	r0, [fp, #-16]
   13344:	mov	r3, #0
   13348:	strh	r3, [fp, #-6]
   1334c:	ldr	r3, [fp, #-16]
   13350:	cmp	r3, #0
   13354:	bne	13378 <_start@@Base+0x1340>
   13358:	ldr	r3, [pc, #188]	; 1341c <_start@@Base+0x13e4>
   1335c:	add	r3, pc, r3
   13360:	mov	r2, #149	; 0x95
   13364:	ldr	r1, [pc, #180]	; 13420 <_start@@Base+0x13e8>
   13368:	add	r1, pc, r1
   1336c:	ldr	r0, [pc, #176]	; 13424 <_start@@Base+0x13ec>
   13370:	add	r0, pc, r0
   13374:	bl	1202c <__assert_fail@plt>
   13378:	mov	r3, #1
   1337c:	strh	r3, [fp, #-8]
   13380:	ldr	r0, [fp, #-16]
   13384:	bl	12350 <_start@@Base+0x318>
   13388:	mov	r3, r0
   1338c:	rsb	r3, r3, #0
   13390:	ldr	r2, [fp, #-16]
   13394:	add	r3, r2, r3
   13398:	str	r3, [fp, #-12]
   1339c:	ldr	r0, [fp, #-12]
   133a0:	bl	123a8 <_start@@Base+0x370>
   133a4:	mov	r3, r0
   133a8:	mov	r2, r3
   133ac:	ldrh	r3, [fp, #-8]
   133b0:	add	r3, r3, #3
   133b4:	lsl	r3, r3, #1
   133b8:	cmp	r2, r3
   133bc:	bcc	133e4 <_start@@Base+0x13ac>
   133c0:	ldrh	r3, [fp, #-8]
   133c4:	add	r3, r3, #2
   133c8:	lsl	r3, r3, #1
   133cc:	ldr	r2, [fp, #-12]
   133d0:	add	r3, r2, r3
   133d4:	mov	r0, r3
   133d8:	bl	123a8 <_start@@Base+0x370>
   133dc:	mov	r3, r0
   133e0:	strh	r3, [fp, #-6]
   133e4:	ldrh	r3, [fp, #-6]
   133e8:	cmp	r3, #0
   133ec:	beq	1340c <_start@@Base+0x13d4>
   133f0:	ldrh	r3, [fp, #-6]
   133f4:	ldr	r2, [fp, #-16]
   133f8:	add	r3, r2, r3
   133fc:	mov	r0, r3
   13400:	bl	12208 <_start@@Base+0x1d0>
   13404:	mov	r3, r0
   13408:	b	13410 <_start@@Base+0x13d8>
   1340c:	mov	r3, #0
   13410:	mov	r0, r3
   13414:	sub	sp, fp, #4
   13418:	pop	{fp, pc}
   1341c:	andeq	r9, r0, r8, lsl #2
   13420:	strdeq	r8, [r0], -ip
   13424:	andeq	r8, r0, r8, ror #24
   13428:	push	{fp, lr}
   1342c:	add	fp, sp, #4
   13430:	sub	sp, sp, #24
   13434:	str	r0, [fp, #-8]
   13438:	str	r1, [fp, #-12]
   1343c:	str	r2, [fp, #-16]
   13440:	mvn	r3, #0
   13444:	str	r3, [sp, #4]
   13448:	mov	r3, #1
   1344c:	str	r3, [sp]
   13450:	mov	r3, #1
   13454:	ldr	r2, [fp, #-16]
   13458:	ldr	r1, [fp, #-12]
   1345c:	ldr	r0, [fp, #-8]
   13460:	bl	1906c <flatcc_builder_create_vector@@Base>
   13464:	mov	r3, r0
   13468:	mov	r0, r3
   1346c:	sub	sp, fp, #4
   13470:	pop	{fp, pc}
   13474:	push	{fp, lr}
   13478:	add	fp, sp, #4
   1347c:	sub	sp, sp, #8
   13480:	str	r0, [fp, #-8]
   13484:	mov	r3, r1
   13488:	strh	r3, [fp, #-10]
   1348c:	ldrsh	r3, [fp, #-10]
   13490:	mov	r0, r3
   13494:	bl	121e0 <_start@@Base+0x1a8>
   13498:	mov	r3, r0
   1349c:	mov	r2, r3
   134a0:	ldr	r3, [fp, #-8]
   134a4:	strh	r2, [r3]
   134a8:	ldr	r3, [fp, #-8]
   134ac:	mov	r0, r3
   134b0:	sub	sp, fp, #4
   134b4:	pop	{fp, pc}
   134b8:	push	{fp, lr}
   134bc:	add	fp, sp, #4
   134c0:	sub	sp, sp, #8
   134c4:	str	r0, [fp, #-8]
   134c8:	str	r1, [fp, #-12]
   134cc:	ldr	r3, [fp, #-12]
   134d0:	vldr	s15, [r3]
   134d4:	vmov.f32	s0, s15
   134d8:	bl	12238 <_start@@Base+0x200>
   134dc:	vmov.f32	s15, s0
   134e0:	ldr	r3, [fp, #-8]
   134e4:	vstr	s15, [r3]
   134e8:	ldr	r3, [fp, #-8]
   134ec:	mov	r0, r3
   134f0:	sub	sp, fp, #4
   134f4:	pop	{fp, pc}
   134f8:	push	{fp, lr}
   134fc:	add	fp, sp, #4
   13500:	sub	sp, sp, #8
   13504:	str	r0, [fp, #-8]
   13508:	str	r1, [fp, #-12]
   1350c:	ldr	r3, [fp, #-12]
   13510:	vldr	s15, [r3]
   13514:	vmov.f32	s0, s15
   13518:	bl	12270 <_start@@Base+0x238>
   1351c:	vmov.f32	s15, s0
   13520:	ldr	r3, [fp, #-8]
   13524:	vstr	s15, [r3]
   13528:	ldr	r3, [fp, #-8]
   1352c:	mov	r0, r3
   13530:	sub	sp, fp, #4
   13534:	pop	{fp, pc}
   13538:	push	{fp, lr}
   1353c:	add	fp, sp, #4
   13540:	sub	sp, sp, #8
   13544:	str	r0, [fp, #-8]
   13548:	vstr	s0, [fp, #-12]
   1354c:	vldr	s0, [fp, #-12]
   13550:	bl	12270 <_start@@Base+0x238>
   13554:	vmov.f32	s15, s0
   13558:	ldr	r3, [fp, #-8]
   1355c:	vstr	s15, [r3]
   13560:	ldr	r3, [fp, #-8]
   13564:	mov	r0, r3
   13568:	sub	sp, fp, #4
   1356c:	pop	{fp, pc}
   13570:	push	{fp, lr}
   13574:	add	fp, sp, #4
   13578:	sub	sp, sp, #8
   1357c:	str	r0, [fp, #-8]
   13580:	str	r1, [fp, #-12]
   13584:	ldr	r1, [fp, #-12]
   13588:	ldr	r0, [fp, #-8]
   1358c:	bl	1a5f8 <flatcc_builder_create_string_str@@Base>
   13590:	mov	r3, r0
   13594:	mov	r0, r3
   13598:	sub	sp, fp, #4
   1359c:	pop	{fp, pc}
   135a0:	push	{fp, lr}
   135a4:	add	fp, sp, #4
   135a8:	sub	sp, sp, #8
   135ac:	str	r0, [fp, #-8]
   135b0:	str	r1, [fp, #-12]
   135b4:	mov	r3, #0
   135b8:	mov	r2, #0
   135bc:	ldr	r1, [fp, #-12]
   135c0:	ldr	r0, [fp, #-8]
   135c4:	bl	17288 <flatcc_builder_start_buffer@@Base>
   135c8:	mov	r3, r0
   135cc:	mov	r0, r3
   135d0:	sub	sp, fp, #4
   135d4:	pop	{fp, pc}
   135d8:	push	{fp, lr}
   135dc:	add	fp, sp, #4
   135e0:	sub	sp, sp, #8
   135e4:	str	r0, [fp, #-8]
   135e8:	str	r1, [fp, #-12]
   135ec:	ldr	r1, [fp, #-12]
   135f0:	ldr	r0, [fp, #-8]
   135f4:	bl	173e0 <flatcc_builder_end_buffer@@Base>
   135f8:	mov	r3, r0
   135fc:	mov	r0, r3
   13600:	sub	sp, fp, #4
   13604:	pop	{fp, pc}
   13608:	push	{fp, lr}
   1360c:	add	fp, sp, #4
   13610:	sub	sp, sp, #8
   13614:	str	r0, [fp, #-8]
   13618:	mov	r3, r1
   1361c:	strb	r3, [fp, #-9]
   13620:	ldrsb	r3, [fp, #-9]
   13624:	mov	r0, r3
   13628:	bl	12678 <_start@@Base+0x640>
   1362c:	mov	r3, r0
   13630:	mov	r2, r3
   13634:	ldr	r3, [fp, #-8]
   13638:	strb	r2, [r3]
   1363c:	ldr	r3, [fp, #-8]
   13640:	mov	r0, r3
   13644:	sub	sp, fp, #4
   13648:	pop	{fp, pc}
   1364c:	push	{fp, lr}
   13650:	add	fp, sp, #4
   13654:	sub	sp, sp, #16
   13658:	str	r0, [fp, #-8]
   1365c:	vstr	s0, [fp, #-12]
   13660:	vstr	s1, [fp, #-16]
   13664:	vstr	s2, [fp, #-20]	; 0xffffffec
   13668:	ldr	r3, [fp, #-8]
   1366c:	vldr	s0, [fp, #-12]
   13670:	mov	r0, r3
   13674:	bl	13538 <_start@@Base+0x1500>
   13678:	ldr	r3, [fp, #-8]
   1367c:	add	r3, r3, #4
   13680:	vldr	s0, [fp, #-16]
   13684:	mov	r0, r3
   13688:	bl	13538 <_start@@Base+0x1500>
   1368c:	ldr	r3, [fp, #-8]
   13690:	add	r3, r3, #8
   13694:	vldr	s0, [fp, #-20]	; 0xffffffec
   13698:	mov	r0, r3
   1369c:	bl	13538 <_start@@Base+0x1500>
   136a0:	ldr	r3, [fp, #-8]
   136a4:	mov	r0, r3
   136a8:	sub	sp, fp, #4
   136ac:	pop	{fp, pc}
   136b0:	push	{fp, lr}
   136b4:	add	fp, sp, #4
   136b8:	sub	sp, sp, #8
   136bc:	str	r0, [fp, #-8]
   136c0:	str	r1, [fp, #-12]
   136c4:	ldr	r3, [fp, #-8]
   136c8:	ldr	r2, [fp, #-12]
   136cc:	mov	r1, r2
   136d0:	mov	r0, r3
   136d4:	bl	134f8 <_start@@Base+0x14c0>
   136d8:	ldr	r3, [fp, #-8]
   136dc:	add	r2, r3, #4
   136e0:	ldr	r3, [fp, #-12]
   136e4:	add	r3, r3, #4
   136e8:	mov	r1, r3
   136ec:	mov	r0, r2
   136f0:	bl	134f8 <_start@@Base+0x14c0>
   136f4:	ldr	r3, [fp, #-8]
   136f8:	add	r2, r3, #8
   136fc:	ldr	r3, [fp, #-12]
   13700:	add	r3, r3, #8
   13704:	mov	r1, r3
   13708:	mov	r0, r2
   1370c:	bl	134f8 <_start@@Base+0x14c0>
   13710:	ldr	r3, [fp, #-8]
   13714:	mov	r0, r3
   13718:	sub	sp, fp, #4
   1371c:	pop	{fp, pc}
   13720:	push	{fp, lr}
   13724:	add	fp, sp, #4
   13728:	sub	sp, sp, #8
   1372c:	str	r0, [fp, #-8]
   13730:	str	r1, [fp, #-12]
   13734:	ldr	r3, [fp, #-8]
   13738:	ldr	r2, [fp, #-12]
   1373c:	mov	r1, r2
   13740:	mov	r0, r3
   13744:	bl	134b8 <_start@@Base+0x1480>
   13748:	ldr	r3, [fp, #-8]
   1374c:	add	r2, r3, #4
   13750:	ldr	r3, [fp, #-12]
   13754:	add	r3, r3, #4
   13758:	mov	r1, r3
   1375c:	mov	r0, r2
   13760:	bl	134b8 <_start@@Base+0x1480>
   13764:	ldr	r3, [fp, #-8]
   13768:	add	r2, r3, #8
   1376c:	ldr	r3, [fp, #-12]
   13770:	add	r3, r3, #8
   13774:	mov	r1, r3
   13778:	mov	r0, r2
   1377c:	bl	134b8 <_start@@Base+0x1480>
   13780:	ldr	r3, [fp, #-8]
   13784:	mov	r0, r3
   13788:	sub	sp, fp, #4
   1378c:	pop	{fp, pc}
   13790:	push	{fp, lr}
   13794:	add	fp, sp, #4
   13798:	sub	sp, sp, #8
   1379c:	str	r0, [fp, #-8]
   137a0:	mov	r1, #10
   137a4:	ldr	r0, [fp, #-8]
   137a8:	bl	182cc <flatcc_builder_start_table@@Base>
   137ac:	mov	r3, r0
   137b0:	mov	r0, r3
   137b4:	sub	sp, fp, #4
   137b8:	pop	{fp, pc}
   137bc:	push	{fp, lr}
   137c0:	add	fp, sp, #4
   137c4:	sub	sp, sp, #8
   137c8:	str	r0, [fp, #-8]
   137cc:	mov	r2, #0
   137d0:	ldr	r3, [pc, #80]	; 13828 <_start@@Base+0x17f0>
   137d4:	add	r3, pc, r3
   137d8:	mov	r1, r3
   137dc:	ldr	r0, [fp, #-8]
   137e0:	bl	18d44 <flatcc_builder_check_required@@Base>
   137e4:	mov	r3, r0
   137e8:	cmp	r3, #0
   137ec:	bne	13810 <_start@@Base+0x17d8>
   137f0:	ldr	r3, [pc, #52]	; 1382c <_start@@Base+0x17f4>
   137f4:	add	r3, pc, r3
   137f8:	mov	r2, #50	; 0x32
   137fc:	ldr	r1, [pc, #44]	; 13830 <_start@@Base+0x17f8>
   13800:	add	r1, pc, r1
   13804:	ldr	r0, [pc, #40]	; 13834 <_start@@Base+0x17fc>
   13808:	add	r0, pc, r0
   1380c:	bl	1202c <__assert_fail@plt>
   13810:	ldr	r0, [fp, #-8]
   13814:	bl	18e30 <flatcc_builder_end_table@@Base>
   13818:	mov	r3, r0
   1381c:	mov	r0, r3
   13820:	sub	sp, fp, #4
   13824:	pop	{fp, pc}
   13828:	andeq	r8, r0, ip, lsr #16
   1382c:	andeq	r8, r0, r8, lsr #21
   13830:	andeq	r8, r0, r4, lsl #16
   13834:	andeq	r8, r0, r0, ror r8
   13838:	push	{fp, lr}
   1383c:	add	fp, sp, #4
   13840:	sub	sp, sp, #8
   13844:	str	r0, [fp, #-8]
   13848:	mov	r1, #2
   1384c:	ldr	r0, [fp, #-8]
   13850:	bl	182cc <flatcc_builder_start_table@@Base>
   13854:	mov	r3, r0
   13858:	mov	r0, r3
   1385c:	sub	sp, fp, #4
   13860:	pop	{fp, pc}
   13864:	push	{fp, lr}
   13868:	add	fp, sp, #4
   1386c:	sub	sp, sp, #8
   13870:	str	r0, [fp, #-8]
   13874:	mov	r2, #0
   13878:	ldr	r3, [pc, #80]	; 138d0 <_start@@Base+0x1898>
   1387c:	add	r3, pc, r3
   13880:	mov	r1, r3
   13884:	ldr	r0, [fp, #-8]
   13888:	bl	18d44 <flatcc_builder_check_required@@Base>
   1388c:	mov	r3, r0
   13890:	cmp	r3, #0
   13894:	bne	138b8 <_start@@Base+0x1880>
   13898:	ldr	r3, [pc, #52]	; 138d4 <_start@@Base+0x189c>
   1389c:	add	r3, pc, r3
   138a0:	mov	r2, #52	; 0x34
   138a4:	ldr	r1, [pc, #44]	; 138d8 <_start@@Base+0x18a0>
   138a8:	add	r1, pc, r1
   138ac:	ldr	r0, [pc, #40]	; 138dc <_start@@Base+0x18a4>
   138b0:	add	r0, pc, r0
   138b4:	bl	1202c <__assert_fail@plt>
   138b8:	ldr	r0, [fp, #-8]
   138bc:	bl	18e30 <flatcc_builder_end_table@@Base>
   138c0:	mov	r3, r0
   138c4:	mov	r0, r3
   138c8:	sub	sp, fp, #4
   138cc:	pop	{fp, pc}
   138d0:	muleq	r0, ip, r8
   138d4:	andeq	r8, r0, r4, ror #19
   138d8:	andeq	r8, r0, ip, asr r7
   138dc:	andeq	r8, r0, ip, ror #16
   138e0:	push	{fp, lr}
   138e4:	add	fp, sp, #4
   138e8:	sub	sp, sp, #8
   138ec:	str	r0, [fp, #-8]
   138f0:	ldr	r0, [fp, #-8]
   138f4:	bl	180e0 <flatcc_builder_start_offset_vector@@Base>
   138f8:	mov	r3, r0
   138fc:	mov	r0, r3
   13900:	sub	sp, fp, #4
   13904:	pop	{fp, pc}
   13908:	push	{fp, lr}
   1390c:	add	fp, sp, #4
   13910:	sub	sp, sp, #8
   13914:	str	r0, [fp, #-8]
   13918:	ldr	r0, [fp, #-8]
   1391c:	bl	19734 <flatcc_builder_end_offset_vector@@Base>
   13920:	mov	r3, r0
   13924:	mov	r0, r3
   13928:	sub	sp, fp, #4
   1392c:	pop	{fp, pc}
   13930:	push	{fp, lr}
   13934:	add	fp, sp, #4
   13938:	sub	sp, sp, #8
   1393c:	str	r0, [fp, #-8]
   13940:	str	r1, [fp, #-12]
   13944:	ldr	r3, [fp, #-12]
   13948:	cmp	r3, #0
   1394c:	beq	13964 <_start@@Base+0x192c>
   13950:	ldr	r1, [fp, #-12]
   13954:	ldr	r0, [fp, #-8]
   13958:	bl	179e8 <flatcc_builder_offset_vector_push@@Base>
   1395c:	mov	r3, r0
   13960:	b	13968 <_start@@Base+0x1930>
   13964:	mov	r3, #0
   13968:	mov	r0, r3
   1396c:	sub	sp, fp, #4
   13970:	pop	{fp, pc}
   13974:	push	{fp}		; (str fp, [sp, #-4]!)
   13978:	add	fp, sp, #0
   1397c:	sub	sp, sp, #20
   13980:	str	r0, [fp, #-16]
   13984:	str	r1, [fp, #-20]	; 0xffffffec
   13988:	mov	r3, #1
   1398c:	strb	r3, [fp, #-12]
   13990:	ldr	r3, [fp, #-20]	; 0xffffffec
   13994:	str	r3, [fp, #-8]
   13998:	ldr	r3, [fp, #-16]
   1399c:	mov	r2, r3
   139a0:	sub	r3, fp, #12
   139a4:	ldm	r3, {r0, r1}
   139a8:	stm	r2, {r0, r1}
   139ac:	ldr	r0, [fp, #-16]
   139b0:	add	sp, fp, #0
   139b4:	pop	{fp}		; (ldr fp, [sp], #4)
   139b8:	bx	lr
   139bc:	push	{fp, lr}
   139c0:	add	fp, sp, #4
   139c4:	sub	sp, sp, #8
   139c8:	str	r0, [fp, #-8]
   139cc:	mov	r3, #4
   139d0:	mov	r2, #12
   139d4:	mov	r1, #0
   139d8:	ldr	r0, [fp, #-8]
   139dc:	bl	1a7c0 <flatcc_builder_table_add@@Base>
   139e0:	mov	r3, r0
   139e4:	mov	r0, r3
   139e8:	sub	sp, fp, #4
   139ec:	pop	{fp, pc}
   139f0:	push	{fp, lr}
   139f4:	add	fp, sp, #4
   139f8:	sub	sp, sp, #24
   139fc:	str	r0, [fp, #-16]
   13a00:	vstr	s0, [fp, #-20]	; 0xffffffec
   13a04:	vstr	s1, [fp, #-24]	; 0xffffffe8
   13a08:	vstr	s2, [fp, #-28]	; 0xffffffe4
   13a0c:	ldr	r0, [fp, #-16]
   13a10:	bl	139bc <_start@@Base+0x1984>
   13a14:	str	r0, [fp, #-8]
   13a18:	ldr	r3, [fp, #-8]
   13a1c:	cmp	r3, #0
   13a20:	bne	13a2c <_start@@Base+0x19f4>
   13a24:	mov	r3, #0
   13a28:	b	13a44 <_start@@Base+0x1a0c>
   13a2c:	vldr	s2, [fp, #-28]	; 0xffffffe4
   13a30:	vldr	s1, [fp, #-24]	; 0xffffffe8
   13a34:	vldr	s0, [fp, #-20]	; 0xffffffec
   13a38:	ldr	r0, [fp, #-8]
   13a3c:	bl	1364c <_start@@Base+0x1614>
   13a40:	mov	r3, #0
   13a44:	mov	r0, r3
   13a48:	sub	sp, fp, #4
   13a4c:	pop	{fp, pc}
   13a50:	push	{fp, lr}
   13a54:	add	fp, sp, #4
   13a58:	sub	sp, sp, #16
   13a5c:	str	r0, [fp, #-16]
   13a60:	str	r1, [fp, #-20]	; 0xffffffec
   13a64:	ldr	r0, [fp, #-16]
   13a68:	bl	139bc <_start@@Base+0x1984>
   13a6c:	str	r0, [fp, #-8]
   13a70:	ldr	r3, [fp, #-8]
   13a74:	cmp	r3, #0
   13a78:	bne	13a84 <_start@@Base+0x1a4c>
   13a7c:	mvn	r3, #0
   13a80:	b	13a94 <_start@@Base+0x1a5c>
   13a84:	ldr	r1, [fp, #-20]	; 0xffffffec
   13a88:	ldr	r0, [fp, #-8]
   13a8c:	bl	136b0 <_start@@Base+0x1678>
   13a90:	mov	r3, #0
   13a94:	mov	r0, r3
   13a98:	sub	sp, fp, #4
   13a9c:	pop	{fp, pc}
   13aa0:	push	{fp, lr}
   13aa4:	add	fp, sp, #4
   13aa8:	sub	sp, sp, #16
   13aac:	str	r0, [fp, #-16]
   13ab0:	mov	r3, r1
   13ab4:	strh	r3, [fp, #-18]	; 0xffffffee
   13ab8:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   13abc:	cmp	r3, #150	; 0x96
   13ac0:	bne	13acc <_start@@Base+0x1a94>
   13ac4:	mov	r3, #0
   13ac8:	b	13b0c <_start@@Base+0x1ad4>
   13acc:	mov	r3, #2
   13ad0:	mov	r2, #2
   13ad4:	mov	r1, #1
   13ad8:	ldr	r0, [fp, #-16]
   13adc:	bl	1a7c0 <flatcc_builder_table_add@@Base>
   13ae0:	str	r0, [fp, #-8]
   13ae4:	ldr	r3, [fp, #-8]
   13ae8:	cmp	r3, #0
   13aec:	bne	13af8 <_start@@Base+0x1ac0>
   13af0:	mvn	r3, #0
   13af4:	b	13b0c <_start@@Base+0x1ad4>
   13af8:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   13afc:	mov	r1, r3
   13b00:	ldr	r0, [fp, #-8]
   13b04:	bl	13474 <_start@@Base+0x143c>
   13b08:	mov	r3, #0
   13b0c:	mov	r0, r3
   13b10:	sub	sp, fp, #4
   13b14:	pop	{fp, pc}
   13b18:	push	{fp, lr}
   13b1c:	add	fp, sp, #4
   13b20:	sub	sp, sp, #16
   13b24:	str	r0, [fp, #-16]
   13b28:	mov	r3, r1
   13b2c:	strh	r3, [fp, #-18]	; 0xffffffee
   13b30:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   13b34:	cmp	r3, #100	; 0x64
   13b38:	bne	13b44 <_start@@Base+0x1b0c>
   13b3c:	mov	r3, #0
   13b40:	b	13b84 <_start@@Base+0x1b4c>
   13b44:	mov	r3, #2
   13b48:	mov	r2, #2
   13b4c:	mov	r1, #2
   13b50:	ldr	r0, [fp, #-16]
   13b54:	bl	1a7c0 <flatcc_builder_table_add@@Base>
   13b58:	str	r0, [fp, #-8]
   13b5c:	ldr	r3, [fp, #-8]
   13b60:	cmp	r3, #0
   13b64:	bne	13b70 <_start@@Base+0x1b38>
   13b68:	mvn	r3, #0
   13b6c:	b	13b84 <_start@@Base+0x1b4c>
   13b70:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   13b74:	mov	r1, r3
   13b78:	ldr	r0, [fp, #-8]
   13b7c:	bl	13474 <_start@@Base+0x143c>
   13b80:	mov	r3, #0
   13b84:	mov	r0, r3
   13b88:	sub	sp, fp, #4
   13b8c:	pop	{fp, pc}
   13b90:	push	{fp, lr}
   13b94:	add	fp, sp, #4
   13b98:	sub	sp, sp, #16
   13b9c:	str	r0, [fp, #-16]
   13ba0:	str	r1, [fp, #-20]	; 0xffffffec
   13ba4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ba8:	cmp	r3, #0
   13bac:	beq	13be0 <_start@@Base+0x1ba8>
   13bb0:	mov	r1, #3
   13bb4:	ldr	r0, [fp, #-16]
   13bb8:	bl	1aa1c <flatcc_builder_table_add_offset@@Base>
   13bbc:	str	r0, [fp, #-8]
   13bc0:	ldr	r3, [fp, #-8]
   13bc4:	cmp	r3, #0
   13bc8:	beq	13be0 <_start@@Base+0x1ba8>
   13bcc:	ldr	r3, [fp, #-8]
   13bd0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bd4:	str	r2, [r3]
   13bd8:	mov	r3, #0
   13bdc:	b	13be4 <_start@@Base+0x1bac>
   13be0:	mvn	r3, #0
   13be4:	mov	r0, r3
   13be8:	sub	sp, fp, #4
   13bec:	pop	{fp, pc}
   13bf0:	push	{fp, lr}
   13bf4:	add	fp, sp, #4
   13bf8:	sub	sp, sp, #8
   13bfc:	str	r0, [fp, #-8]
   13c00:	str	r1, [fp, #-12]
   13c04:	ldr	r1, [fp, #-12]
   13c08:	ldr	r0, [fp, #-8]
   13c0c:	bl	1a5f8 <flatcc_builder_create_string_str@@Base>
   13c10:	mov	r3, r0
   13c14:	mov	r1, r3
   13c18:	ldr	r0, [fp, #-8]
   13c1c:	bl	13b90 <_start@@Base+0x1b58>
   13c20:	mov	r3, r0
   13c24:	mov	r0, r3
   13c28:	sub	sp, fp, #4
   13c2c:	pop	{fp, pc}
   13c30:	push	{fp, lr}
   13c34:	add	fp, sp, #4
   13c38:	sub	sp, sp, #16
   13c3c:	str	r0, [fp, #-16]
   13c40:	str	r1, [fp, #-20]	; 0xffffffec
   13c44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c48:	cmp	r3, #0
   13c4c:	beq	13c80 <_start@@Base+0x1c48>
   13c50:	mov	r1, #5
   13c54:	ldr	r0, [fp, #-16]
   13c58:	bl	1aa1c <flatcc_builder_table_add_offset@@Base>
   13c5c:	str	r0, [fp, #-8]
   13c60:	ldr	r3, [fp, #-8]
   13c64:	cmp	r3, #0
   13c68:	beq	13c80 <_start@@Base+0x1c48>
   13c6c:	ldr	r3, [fp, #-8]
   13c70:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c74:	str	r2, [r3]
   13c78:	mov	r3, #0
   13c7c:	b	13c84 <_start@@Base+0x1c4c>
   13c80:	mvn	r3, #0
   13c84:	mov	r0, r3
   13c88:	sub	sp, fp, #4
   13c8c:	pop	{fp, pc}
   13c90:	push	{fp, lr}
   13c94:	add	fp, sp, #4
   13c98:	sub	sp, sp, #16
   13c9c:	str	r0, [fp, #-8]
   13ca0:	str	r1, [fp, #-12]
   13ca4:	str	r2, [fp, #-16]
   13ca8:	ldr	r2, [fp, #-16]
   13cac:	ldr	r1, [fp, #-12]
   13cb0:	ldr	r0, [fp, #-8]
   13cb4:	bl	13428 <_start@@Base+0x13f0>
   13cb8:	mov	r3, r0
   13cbc:	mov	r1, r3
   13cc0:	ldr	r0, [fp, #-8]
   13cc4:	bl	13c30 <_start@@Base+0x1bf8>
   13cc8:	mov	r3, r0
   13ccc:	mov	r0, r3
   13cd0:	sub	sp, fp, #4
   13cd4:	pop	{fp, pc}
   13cd8:	push	{fp, lr}
   13cdc:	add	fp, sp, #4
   13ce0:	sub	sp, sp, #16
   13ce4:	str	r0, [fp, #-16]
   13ce8:	mov	r3, r1
   13cec:	strb	r3, [fp, #-17]	; 0xffffffef
   13cf0:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   13cf4:	cmp	r3, #2
   13cf8:	bne	13d04 <_start@@Base+0x1ccc>
   13cfc:	mov	r3, #0
   13d00:	b	13d44 <_start@@Base+0x1d0c>
   13d04:	mov	r3, #1
   13d08:	mov	r2, #1
   13d0c:	mov	r1, #6
   13d10:	ldr	r0, [fp, #-16]
   13d14:	bl	1a7c0 <flatcc_builder_table_add@@Base>
   13d18:	str	r0, [fp, #-8]
   13d1c:	ldr	r3, [fp, #-8]
   13d20:	cmp	r3, #0
   13d24:	bne	13d30 <_start@@Base+0x1cf8>
   13d28:	mvn	r3, #0
   13d2c:	b	13d44 <_start@@Base+0x1d0c>
   13d30:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   13d34:	mov	r1, r3
   13d38:	ldr	r0, [fp, #-8]
   13d3c:	bl	13608 <_start@@Base+0x15d0>
   13d40:	mov	r3, #0
   13d44:	mov	r0, r3
   13d48:	sub	sp, fp, #4
   13d4c:	pop	{fp, pc}
   13d50:	push	{fp, lr}
   13d54:	add	fp, sp, #4
   13d58:	sub	sp, sp, #16
   13d5c:	str	r0, [fp, #-16]
   13d60:	str	r1, [fp, #-20]	; 0xffffffec
   13d64:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d68:	cmp	r3, #0
   13d6c:	beq	13da0 <_start@@Base+0x1d68>
   13d70:	mov	r1, #7
   13d74:	ldr	r0, [fp, #-16]
   13d78:	bl	1aa1c <flatcc_builder_table_add_offset@@Base>
   13d7c:	str	r0, [fp, #-8]
   13d80:	ldr	r3, [fp, #-8]
   13d84:	cmp	r3, #0
   13d88:	beq	13da0 <_start@@Base+0x1d68>
   13d8c:	ldr	r3, [fp, #-8]
   13d90:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d94:	str	r2, [r3]
   13d98:	mov	r3, #0
   13d9c:	b	13da4 <_start@@Base+0x1d6c>
   13da0:	mvn	r3, #0
   13da4:	mov	r0, r3
   13da8:	sub	sp, fp, #4
   13dac:	pop	{fp, pc}
   13db0:	push	{fp, lr}
   13db4:	add	fp, sp, #4
   13db8:	sub	sp, sp, #8
   13dbc:	str	r0, [fp, #-8]
   13dc0:	ldr	r0, [fp, #-8]
   13dc4:	bl	180e0 <flatcc_builder_start_offset_vector@@Base>
   13dc8:	mov	r3, r0
   13dcc:	mov	r0, r3
   13dd0:	sub	sp, fp, #4
   13dd4:	pop	{fp, pc}
   13dd8:	push	{fp, lr}
   13ddc:	add	fp, sp, #4
   13de0:	sub	sp, sp, #8
   13de4:	str	r0, [fp, #-8]
   13de8:	ldr	r0, [fp, #-8]
   13dec:	bl	19734 <flatcc_builder_end_offset_vector@@Base>
   13df0:	mov	r3, r0
   13df4:	mov	r1, r3
   13df8:	ldr	r0, [fp, #-8]
   13dfc:	bl	13d50 <_start@@Base+0x1d18>
   13e00:	mov	r3, r0
   13e04:	mov	r0, r3
   13e08:	sub	sp, fp, #4
   13e0c:	pop	{fp, pc}
   13e10:	push	{fp, lr}
   13e14:	add	fp, sp, #4
   13e18:	sub	sp, sp, #8
   13e1c:	str	r0, [fp, #-8]
   13e20:	str	r1, [fp, #-12]
   13e24:	ldr	r3, [fp, #-12]
   13e28:	cmp	r3, #0
   13e2c:	beq	13e44 <_start@@Base+0x1e0c>
   13e30:	ldr	r1, [fp, #-12]
   13e34:	ldr	r0, [fp, #-8]
   13e38:	bl	179e8 <flatcc_builder_offset_vector_push@@Base>
   13e3c:	mov	r3, r0
   13e40:	b	13e48 <_start@@Base+0x1e10>
   13e44:	mov	r3, #0
   13e48:	mov	r0, r3
   13e4c:	sub	sp, fp, #4
   13e50:	pop	{fp, pc}
   13e54:	push	{fp, lr}
   13e58:	add	fp, sp, #4
   13e5c:	sub	sp, sp, #16
   13e60:	str	r0, [fp, #-8]
   13e64:	str	r1, [fp, #-12]
   13e68:	mov	r3, r2
   13e6c:	strh	r3, [fp, #-14]
   13e70:	ldrsh	r3, [fp, #-14]
   13e74:	mov	r2, r3
   13e78:	ldr	r1, [fp, #-12]
   13e7c:	ldr	r0, [fp, #-8]
   13e80:	bl	143b4 <_start@@Base+0x237c>
   13e84:	mov	r3, r0
   13e88:	mov	r1, r3
   13e8c:	ldr	r0, [fp, #-8]
   13e90:	bl	13e10 <_start@@Base+0x1dd8>
   13e94:	mov	r3, r0
   13e98:	mov	r0, r3
   13e9c:	sub	sp, fp, #4
   13ea0:	pop	{fp, pc}
   13ea4:	push	{fp, lr}
   13ea8:	add	fp, sp, #4
   13eac:	sub	sp, sp, #24
   13eb0:	str	r0, [fp, #-16]
   13eb4:	sub	r3, fp, #24
   13eb8:	stm	r3, {r1, r2}
   13ebc:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   13ec0:	cmp	r3, #0
   13ec4:	bne	13ed0 <_start@@Base+0x1e98>
   13ec8:	mov	r3, #0
   13ecc:	b	13f48 <_start@@Base+0x1f10>
   13ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ed4:	cmp	r3, #0
   13ed8:	bne	13ee4 <_start@@Base+0x1eac>
   13edc:	mvn	r3, #0
   13ee0:	b	13f48 <_start@@Base+0x1f10>
   13ee4:	mov	r3, #1
   13ee8:	mov	r2, #1
   13eec:	mov	r1, #8
   13ef0:	ldr	r0, [fp, #-16]
   13ef4:	bl	1a7c0 <flatcc_builder_table_add@@Base>
   13ef8:	str	r0, [fp, #-8]
   13efc:	ldr	r3, [fp, #-8]
   13f00:	cmp	r3, #0
   13f04:	beq	13f24 <_start@@Base+0x1eec>
   13f08:	mov	r1, #9
   13f0c:	ldr	r0, [fp, #-16]
   13f10:	bl	1aa1c <flatcc_builder_table_add_offset@@Base>
   13f14:	str	r0, [fp, #-12]
   13f18:	ldr	r3, [fp, #-12]
   13f1c:	cmp	r3, #0
   13f20:	bne	13f2c <_start@@Base+0x1ef4>
   13f24:	mvn	r3, #0
   13f28:	b	13f48 <_start@@Base+0x1f10>
   13f2c:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   13f30:	ldr	r3, [fp, #-8]
   13f34:	strb	r2, [r3]
   13f38:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f3c:	ldr	r3, [fp, #-12]
   13f40:	str	r2, [r3]
   13f44:	mov	r3, #0
   13f48:	mov	r0, r3
   13f4c:	sub	sp, fp, #4
   13f50:	pop	{fp, pc}
   13f54:	push	{fp, lr}
   13f58:	add	fp, sp, #4
   13f5c:	sub	sp, sp, #16
   13f60:	str	r0, [fp, #-16]
   13f64:	mov	r3, r1
   13f68:	strb	r3, [fp, #-17]	; 0xffffffef
   13f6c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13f70:	cmp	r3, #0
   13f74:	bne	13f80 <_start@@Base+0x1f48>
   13f78:	mov	r3, #0
   13f7c:	b	13fbc <_start@@Base+0x1f84>
   13f80:	mov	r3, #1
   13f84:	mov	r2, #1
   13f88:	mov	r1, #8
   13f8c:	ldr	r0, [fp, #-16]
   13f90:	bl	1a7c0 <flatcc_builder_table_add@@Base>
   13f94:	str	r0, [fp, #-8]
   13f98:	ldr	r3, [fp, #-8]
   13f9c:	cmp	r3, #0
   13fa0:	beq	13fb8 <_start@@Base+0x1f80>
   13fa4:	ldr	r3, [fp, #-8]
   13fa8:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13fac:	strb	r2, [r3]
   13fb0:	mov	r3, #0
   13fb4:	b	13fbc <_start@@Base+0x1f84>
   13fb8:	mvn	r3, #0
   13fbc:	mov	r0, r3
   13fc0:	sub	sp, fp, #4
   13fc4:	pop	{fp, pc}
   13fc8:	push	{fp, lr}
   13fcc:	add	fp, sp, #4
   13fd0:	sub	sp, sp, #24
   13fd4:	str	r0, [fp, #-16]
   13fd8:	sub	r3, fp, #24
   13fdc:	stm	r3, {r1, r2}
   13fe0:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   13fe4:	cmp	r3, #0
   13fe8:	bne	13ff4 <_start@@Base+0x1fbc>
   13fec:	mov	r3, #0
   13ff0:	b	14028 <_start@@Base+0x1ff0>
   13ff4:	mov	r1, #9
   13ff8:	ldr	r0, [fp, #-16]
   13ffc:	bl	1aa1c <flatcc_builder_table_add_offset@@Base>
   14000:	str	r0, [fp, #-8]
   14004:	ldr	r3, [fp, #-8]
   14008:	cmp	r3, #0
   1400c:	beq	14024 <_start@@Base+0x1fec>
   14010:	ldr	r2, [fp, #-20]	; 0xffffffec
   14014:	ldr	r3, [fp, #-8]
   14018:	str	r2, [r3]
   1401c:	mov	r3, #0
   14020:	b	14028 <_start@@Base+0x1ff0>
   14024:	mvn	r3, #0
   14028:	mov	r0, r3
   1402c:	sub	sp, fp, #4
   14030:	pop	{fp, pc}
   14034:	push	{fp, lr}
   14038:	add	fp, sp, #4
   1403c:	sub	sp, sp, #16
   14040:	str	r0, [fp, #-16]
   14044:	str	r1, [fp, #-20]	; 0xffffffec
   14048:	sub	r3, fp, #12
   1404c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14050:	mov	r0, r3
   14054:	bl	13974 <_start@@Base+0x193c>
   14058:	sub	r3, fp, #12
   1405c:	ldm	r3, {r1, r2}
   14060:	ldr	r0, [fp, #-16]
   14064:	bl	13ea4 <_start@@Base+0x1e6c>
   14068:	mov	r3, r0
   1406c:	mov	r0, r3
   14070:	sub	sp, fp, #4
   14074:	pop	{fp, pc}
   14078:	push	{fp, lr}
   1407c:	add	fp, sp, #4
   14080:	sub	sp, sp, #16
   14084:	str	r0, [fp, #-8]
   14088:	str	r1, [fp, #-12]
   1408c:	strh	r2, [fp, #-14]
   14090:	strh	r3, [fp, #-16]
   14094:	ldr	r0, [fp, #-8]
   14098:	bl	13790 <_start@@Base+0x1758>
   1409c:	mov	r3, r0
   140a0:	cmp	r3, #0
   140a4:	bne	14194 <_start@@Base+0x215c>
   140a8:	ldr	r1, [fp, #-12]
   140ac:	ldr	r0, [fp, #-8]
   140b0:	bl	13a50 <_start@@Base+0x1a18>
   140b4:	mov	r3, r0
   140b8:	cmp	r3, #0
   140bc:	bne	14194 <_start@@Base+0x215c>
   140c0:	ldr	r1, [fp, #4]
   140c4:	ldr	r0, [fp, #-8]
   140c8:	bl	13b90 <_start@@Base+0x1b58>
   140cc:	mov	r3, r0
   140d0:	cmp	r3, #0
   140d4:	bne	14194 <_start@@Base+0x215c>
   140d8:	ldr	r1, [fp, #8]
   140dc:	ldr	r0, [fp, #-8]
   140e0:	bl	13c30 <_start@@Base+0x1bf8>
   140e4:	mov	r3, r0
   140e8:	cmp	r3, #0
   140ec:	bne	14194 <_start@@Base+0x215c>
   140f0:	ldr	r1, [fp, #16]
   140f4:	ldr	r0, [fp, #-8]
   140f8:	bl	13d50 <_start@@Base+0x1d18>
   140fc:	mov	r3, r0
   14100:	cmp	r3, #0
   14104:	bne	14194 <_start@@Base+0x215c>
   14108:	add	r3, fp, #20
   1410c:	ldm	r3, {r1, r2}
   14110:	ldr	r0, [fp, #-8]
   14114:	bl	13fc8 <_start@@Base+0x1f90>
   14118:	mov	r3, r0
   1411c:	cmp	r3, #0
   14120:	bne	14194 <_start@@Base+0x215c>
   14124:	ldrsh	r3, [fp, #-14]
   14128:	mov	r1, r3
   1412c:	ldr	r0, [fp, #-8]
   14130:	bl	13aa0 <_start@@Base+0x1a68>
   14134:	mov	r3, r0
   14138:	cmp	r3, #0
   1413c:	bne	14194 <_start@@Base+0x215c>
   14140:	ldrsh	r3, [fp, #-16]
   14144:	mov	r1, r3
   14148:	ldr	r0, [fp, #-8]
   1414c:	bl	13b18 <_start@@Base+0x1ae0>
   14150:	mov	r3, r0
   14154:	cmp	r3, #0
   14158:	bne	14194 <_start@@Base+0x215c>
   1415c:	ldrsb	r3, [fp, #12]
   14160:	mov	r1, r3
   14164:	ldr	r0, [fp, #-8]
   14168:	bl	13cd8 <_start@@Base+0x1ca0>
   1416c:	mov	r3, r0
   14170:	cmp	r3, #0
   14174:	bne	14194 <_start@@Base+0x215c>
   14178:	ldrb	r3, [fp, #20]
   1417c:	mov	r1, r3
   14180:	ldr	r0, [fp, #-8]
   14184:	bl	13f54 <_start@@Base+0x1f1c>
   14188:	mov	r3, r0
   1418c:	cmp	r3, #0
   14190:	beq	1419c <_start@@Base+0x2164>
   14194:	mov	r3, #0
   14198:	b	141a8 <_start@@Base+0x2170>
   1419c:	ldr	r0, [fp, #-8]
   141a0:	bl	137bc <_start@@Base+0x1784>
   141a4:	mov	r3, r0
   141a8:	mov	r0, r3
   141ac:	sub	sp, fp, #4
   141b0:	pop	{fp, pc}
   141b4:	push	{fp, lr}
   141b8:	add	fp, sp, #4
   141bc:	sub	sp, sp, #8
   141c0:	str	r0, [fp, #-8]
   141c4:	mov	r1, #0
   141c8:	ldr	r0, [fp, #-8]
   141cc:	bl	135a0 <_start@@Base+0x1568>
   141d0:	mov	r3, r0
   141d4:	cmp	r3, #0
   141d8:	bne	141ec <_start@@Base+0x21b4>
   141dc:	ldr	r0, [fp, #-8]
   141e0:	bl	13790 <_start@@Base+0x1758>
   141e4:	mov	r3, r0
   141e8:	b	141f0 <_start@@Base+0x21b8>
   141ec:	mvn	r3, #0
   141f0:	mov	r0, r3
   141f4:	sub	sp, fp, #4
   141f8:	pop	{fp, pc}
   141fc:	push	{fp, lr}
   14200:	add	fp, sp, #4
   14204:	sub	sp, sp, #8
   14208:	str	r0, [fp, #-8]
   1420c:	ldr	r0, [fp, #-8]
   14210:	bl	137bc <_start@@Base+0x1784>
   14214:	mov	r3, r0
   14218:	mov	r1, r3
   1421c:	ldr	r0, [fp, #-8]
   14220:	bl	135d8 <_start@@Base+0x15a0>
   14224:	mov	r3, r0
   14228:	mov	r0, r3
   1422c:	sub	sp, fp, #4
   14230:	pop	{fp, pc}
   14234:	push	{fp, lr}
   14238:	add	fp, sp, #4
   1423c:	sub	sp, sp, #40	; 0x28
   14240:	str	r0, [fp, #-8]
   14244:	str	r1, [fp, #-12]
   14248:	strh	r2, [fp, #-14]
   1424c:	strh	r3, [fp, #-16]
   14250:	mov	r1, #0
   14254:	ldr	r0, [fp, #-8]
   14258:	bl	135a0 <_start@@Base+0x1568>
   1425c:	mov	r3, r0
   14260:	cmp	r3, #0
   14264:	beq	14270 <_start@@Base+0x2238>
   14268:	mov	r3, #0
   1426c:	b	142d0 <_start@@Base+0x2298>
   14270:	ldrsh	lr, [fp, #-16]
   14274:	ldrsh	ip, [fp, #-14]
   14278:	add	r2, sp, #16
   1427c:	add	r3, fp, #20
   14280:	ldm	r3, {r0, r1}
   14284:	stm	r2, {r0, r1}
   14288:	ldr	r3, [fp, #16]
   1428c:	str	r3, [sp, #12]
   14290:	ldrsb	r3, [fp, #12]
   14294:	str	r3, [sp, #8]
   14298:	ldr	r3, [fp, #8]
   1429c:	str	r3, [sp, #4]
   142a0:	ldr	r3, [fp, #4]
   142a4:	str	r3, [sp]
   142a8:	mov	r3, lr
   142ac:	mov	r2, ip
   142b0:	ldr	r1, [fp, #-12]
   142b4:	ldr	r0, [fp, #-8]
   142b8:	bl	14078 <_start@@Base+0x2040>
   142bc:	mov	r3, r0
   142c0:	mov	r1, r3
   142c4:	ldr	r0, [fp, #-8]
   142c8:	bl	135d8 <_start@@Base+0x15a0>
   142cc:	mov	r3, r0
   142d0:	mov	r0, r3
   142d4:	sub	sp, fp, #4
   142d8:	pop	{fp, pc}
   142dc:	push	{fp, lr}
   142e0:	add	fp, sp, #4
   142e4:	sub	sp, sp, #16
   142e8:	str	r0, [fp, #-16]
   142ec:	str	r1, [fp, #-20]	; 0xffffffec
   142f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   142f4:	cmp	r3, #0
   142f8:	beq	1432c <_start@@Base+0x22f4>
   142fc:	mov	r1, #0
   14300:	ldr	r0, [fp, #-16]
   14304:	bl	1aa1c <flatcc_builder_table_add_offset@@Base>
   14308:	str	r0, [fp, #-8]
   1430c:	ldr	r3, [fp, #-8]
   14310:	cmp	r3, #0
   14314:	beq	1432c <_start@@Base+0x22f4>
   14318:	ldr	r3, [fp, #-8]
   1431c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14320:	str	r2, [r3]
   14324:	mov	r3, #0
   14328:	b	14330 <_start@@Base+0x22f8>
   1432c:	mvn	r3, #0
   14330:	mov	r0, r3
   14334:	sub	sp, fp, #4
   14338:	pop	{fp, pc}
   1433c:	push	{fp, lr}
   14340:	add	fp, sp, #4
   14344:	sub	sp, sp, #16
   14348:	str	r0, [fp, #-16]
   1434c:	mov	r3, r1
   14350:	strh	r3, [fp, #-18]	; 0xffffffee
   14354:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   14358:	cmp	r3, #0
   1435c:	bne	14368 <_start@@Base+0x2330>
   14360:	mov	r3, #0
   14364:	b	143a8 <_start@@Base+0x2370>
   14368:	mov	r3, #2
   1436c:	mov	r2, #2
   14370:	mov	r1, #1
   14374:	ldr	r0, [fp, #-16]
   14378:	bl	1a7c0 <flatcc_builder_table_add@@Base>
   1437c:	str	r0, [fp, #-8]
   14380:	ldr	r3, [fp, #-8]
   14384:	cmp	r3, #0
   14388:	bne	14394 <_start@@Base+0x235c>
   1438c:	mvn	r3, #0
   14390:	b	143a8 <_start@@Base+0x2370>
   14394:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   14398:	mov	r1, r3
   1439c:	ldr	r0, [fp, #-8]
   143a0:	bl	13474 <_start@@Base+0x143c>
   143a4:	mov	r3, #0
   143a8:	mov	r0, r3
   143ac:	sub	sp, fp, #4
   143b0:	pop	{fp, pc}
   143b4:	push	{fp, lr}
   143b8:	add	fp, sp, #4
   143bc:	sub	sp, sp, #16
   143c0:	str	r0, [fp, #-8]
   143c4:	str	r1, [fp, #-12]
   143c8:	mov	r3, r2
   143cc:	strh	r3, [fp, #-14]
   143d0:	ldr	r0, [fp, #-8]
   143d4:	bl	13838 <_start@@Base+0x1800>
   143d8:	mov	r3, r0
   143dc:	cmp	r3, #0
   143e0:	bne	14418 <_start@@Base+0x23e0>
   143e4:	ldr	r1, [fp, #-12]
   143e8:	ldr	r0, [fp, #-8]
   143ec:	bl	142dc <_start@@Base+0x22a4>
   143f0:	mov	r3, r0
   143f4:	cmp	r3, #0
   143f8:	bne	14418 <_start@@Base+0x23e0>
   143fc:	ldrsh	r3, [fp, #-14]
   14400:	mov	r1, r3
   14404:	ldr	r0, [fp, #-8]
   14408:	bl	1433c <_start@@Base+0x2304>
   1440c:	mov	r3, r0
   14410:	cmp	r3, #0
   14414:	beq	14420 <_start@@Base+0x23e8>
   14418:	mov	r3, #0
   1441c:	b	1442c <_start@@Base+0x23f4>
   14420:	ldr	r0, [fp, #-8]
   14424:	bl	13864 <_start@@Base+0x182c>
   14428:	mov	r3, r0
   1442c:	mov	r0, r3
   14430:	sub	sp, fp, #4
   14434:	pop	{fp, pc}

00014438 <create_monster_bottom_up@@Base>:
   14438:	push	{r4, fp, lr}
   1443c:	add	fp, sp, #8
   14440:	sub	sp, sp, #108	; 0x6c
   14444:	str	r0, [fp, #-88]	; 0xffffffa8
   14448:	str	r1, [fp, #-92]	; 0xffffffa4
   1444c:	ldr	r3, [pc, #512]	; 14654 <create_monster_bottom_up@@Base+0x21c>
   14450:	add	r3, pc, r3
   14454:	mov	r1, r3
   14458:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1445c:	bl	13570 <_start@@Base+0x1538>
   14460:	str	r0, [fp, #-16]
   14464:	mov	r3, #3
   14468:	strh	r3, [fp, #-18]	; 0xffffffee
   1446c:	ldr	r3, [pc, #484]	; 14658 <create_monster_bottom_up@@Base+0x220>
   14470:	add	r3, pc, r3
   14474:	mov	r1, r3
   14478:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1447c:	bl	13570 <_start@@Base+0x1538>
   14480:	str	r0, [fp, #-24]	; 0xffffffe8
   14484:	mov	r3, #5
   14488:	strh	r3, [fp, #-26]	; 0xffffffe6
   1448c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   14490:	mov	r2, r3
   14494:	ldr	r1, [fp, #-16]
   14498:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1449c:	bl	143b4 <_start@@Base+0x237c>
   144a0:	str	r0, [fp, #-32]	; 0xffffffe0
   144a4:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   144a8:	mov	r2, r3
   144ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   144b0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   144b4:	bl	143b4 <_start@@Base+0x237c>
   144b8:	str	r0, [fp, #-36]	; 0xffffffdc
   144bc:	ldr	r3, [pc, #408]	; 1465c <create_monster_bottom_up@@Base+0x224>
   144c0:	add	r3, pc, r3
   144c4:	mov	r1, r3
   144c8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   144cc:	bl	13570 <_start@@Base+0x1538>
   144d0:	str	r0, [fp, #-40]	; 0xffffffd8
   144d4:	ldr	r2, [pc, #388]	; 14660 <create_monster_bottom_up@@Base+0x228>
   144d8:	add	r2, pc, r2
   144dc:	sub	r3, fp, #64	; 0x40
   144e0:	ldm	r2, {r0, r1, r2}
   144e4:	stmia	r3!, {r0, r1}
   144e8:	strh	r2, [r3]
   144ec:	sub	r3, fp, #64	; 0x40
   144f0:	mov	r2, #10
   144f4:	mov	r1, r3
   144f8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   144fc:	bl	13428 <_start@@Base+0x13f0>
   14500:	str	r0, [fp, #-44]	; 0xffffffd4
   14504:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14508:	bl	138e0 <_start@@Base+0x18a8>
   1450c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14510:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14514:	bl	13930 <_start@@Base+0x18f8>
   14518:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1451c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14520:	bl	13930 <_start@@Base+0x18f8>
   14524:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14528:	bl	13908 <_start@@Base+0x18d0>
   1452c:	str	r0, [fp, #-48]	; 0xffffffd0
   14530:	ldr	r2, [pc, #300]	; 14664 <create_monster_bottom_up@@Base+0x22c>
   14534:	add	r2, pc, r2
   14538:	sub	r3, fp, #76	; 0x4c
   1453c:	ldm	r2, {r0, r1, r2}
   14540:	stm	r3, {r0, r1, r2}
   14544:	mov	r3, #300	; 0x12c
   14548:	strh	r3, [fp, #-50]	; 0xffffffce
   1454c:	mov	r3, #150	; 0x96
   14550:	strh	r3, [fp, #-52]	; 0xffffffcc
   14554:	sub	r3, fp, #84	; 0x54
   14558:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1455c:	mov	r0, r3
   14560:	bl	13974 <_start@@Base+0x193c>
   14564:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14568:	cmp	r3, #0
   1456c:	bne	145c4 <create_monster_bottom_up@@Base+0x18c>
   14570:	ldrsh	lr, [fp, #-52]	; 0xffffffcc
   14574:	ldrsh	r4, [fp, #-50]	; 0xffffffce
   14578:	sub	ip, fp, #76	; 0x4c
   1457c:	add	r2, sp, #16
   14580:	sub	r3, fp, #84	; 0x54
   14584:	ldm	r3, {r0, r1}
   14588:	stm	r2, {r0, r1}
   1458c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14590:	str	r3, [sp, #12]
   14594:	mov	r3, #0
   14598:	str	r3, [sp, #8]
   1459c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   145a0:	str	r3, [sp, #4]
   145a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   145a8:	str	r3, [sp]
   145ac:	mov	r3, r4
   145b0:	mov	r2, lr
   145b4:	mov	r1, ip
   145b8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   145bc:	bl	14234 <_start@@Base+0x21fc>
   145c0:	b	14638 <create_monster_bottom_up@@Base+0x200>
   145c4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   145c8:	bl	141b4 <_start@@Base+0x217c>
   145cc:	vldr	s2, [pc, #116]	; 14648 <create_monster_bottom_up@@Base+0x210>
   145d0:	vldr	s1, [pc, #116]	; 1464c <create_monster_bottom_up@@Base+0x214>
   145d4:	vldr	s0, [pc, #116]	; 14650 <create_monster_bottom_up@@Base+0x218>
   145d8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   145dc:	bl	139f0 <_start@@Base+0x19b8>
   145e0:	ldrsh	r3, [fp, #-50]	; 0xffffffce
   145e4:	mov	r1, r3
   145e8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   145ec:	bl	13b18 <_start@@Base+0x1ae0>
   145f0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   145f4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   145f8:	bl	13b90 <_start@@Base+0x1b58>
   145fc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14600:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14604:	bl	13c30 <_start@@Base+0x1bf8>
   14608:	mov	r1, #0
   1460c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14610:	bl	13cd8 <_start@@Base+0x1ca0>
   14614:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14618:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1461c:	bl	13d50 <_start@@Base+0x1d18>
   14620:	sub	r3, fp, #84	; 0x54
   14624:	ldm	r3, {r1, r2}
   14628:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1462c:	bl	13ea4 <_start@@Base+0x1e6c>
   14630:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14634:	bl	141fc <_start@@Base+0x21c4>
   14638:	mov	r3, #0
   1463c:	mov	r0, r3
   14640:	sub	sp, fp, #8
   14644:	pop	{r4, fp, pc}
   14648:	submi	r0, r0, r0
   1464c:	andmi	r0, r0, r0
   14650:	svccc	0x00800000
   14654:	andeq	r7, r0, r8, ror #26
   14658:	andeq	r7, r0, r0, asr sp
   1465c:	andeq	r7, r0, r4, lsl #26
   14660:	strdeq	r7, [r0], -r0
   14664:	andeq	r7, r0, r0, lsr #25

00014668 <create_monster_top_down@@Base>:
   14668:	push	{fp, lr}
   1466c:	add	fp, sp, #4
   14670:	sub	sp, sp, #32
   14674:	str	r0, [fp, #-32]	; 0xffffffe0
   14678:	ldr	r2, [pc, #272]	; 14790 <create_monster_top_down@@Base+0x128>
   1467c:	add	r2, pc, r2
   14680:	sub	r3, fp, #24
   14684:	ldm	r2, {r0, r1, r2}
   14688:	stmia	r3!, {r0, r1}
   1468c:	strh	r2, [r3]
   14690:	mov	r3, #10
   14694:	str	r3, [fp, #-8]
   14698:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1469c:	bl	141b4 <_start@@Base+0x217c>
   146a0:	vldr	s2, [pc, #220]	; 14784 <create_monster_top_down@@Base+0x11c>
   146a4:	vldr	s1, [pc, #220]	; 14788 <create_monster_top_down@@Base+0x120>
   146a8:	vldr	s0, [pc, #220]	; 1478c <create_monster_top_down@@Base+0x124>
   146ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146b0:	bl	139f0 <_start@@Base+0x19b8>
   146b4:	mov	r1, #300	; 0x12c
   146b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146bc:	bl	13b18 <_start@@Base+0x1ae0>
   146c0:	ldr	r3, [pc, #204]	; 14794 <create_monster_top_down@@Base+0x12c>
   146c4:	add	r3, pc, r3
   146c8:	mov	r1, r3
   146cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146d0:	bl	13bf0 <_start@@Base+0x1bb8>
   146d4:	sub	r3, fp, #24
   146d8:	ldr	r2, [fp, #-8]
   146dc:	mov	r1, r3
   146e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146e4:	bl	13c90 <_start@@Base+0x1c58>
   146e8:	mov	r1, #0
   146ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146f0:	bl	13cd8 <_start@@Base+0x1ca0>
   146f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146f8:	bl	13db0 <_start@@Base+0x1d78>
   146fc:	ldr	r3, [pc, #148]	; 14798 <create_monster_top_down@@Base+0x130>
   14700:	add	r3, pc, r3
   14704:	mov	r1, r3
   14708:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1470c:	bl	13570 <_start@@Base+0x1538>
   14710:	mov	r3, r0
   14714:	mov	r2, #3
   14718:	mov	r1, r3
   1471c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14720:	bl	13e54 <_start@@Base+0x1e1c>
   14724:	ldr	r3, [pc, #112]	; 1479c <create_monster_top_down@@Base+0x134>
   14728:	add	r3, pc, r3
   1472c:	mov	r1, r3
   14730:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14734:	bl	13570 <_start@@Base+0x1538>
   14738:	mov	r3, r0
   1473c:	mov	r2, #5
   14740:	mov	r1, r3
   14744:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14748:	bl	13e54 <_start@@Base+0x1e1c>
   1474c:	mov	r3, r0
   14750:	ldr	r3, [r3]
   14754:	str	r3, [fp, #-12]
   14758:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1475c:	bl	13dd8 <_start@@Base+0x1da0>
   14760:	ldr	r1, [fp, #-12]
   14764:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14768:	bl	14034 <_start@@Base+0x1ffc>
   1476c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14770:	bl	141fc <_start@@Base+0x21c4>
   14774:	mov	r3, #0
   14778:	mov	r0, r3
   1477c:	sub	sp, fp, #4
   14780:	pop	{fp, pc}
   14784:	submi	r0, r0, r0
   14788:	andmi	r0, r0, r0
   1478c:	svccc	0x00800000
   14790:	andeq	r7, r0, ip, asr #22
   14794:	andeq	r7, r0, r0, lsl #22
   14798:			; <UNDEFINED> instruction: 0x00007ab8
   1479c:	muleq	r0, r8, sl

000147a0 <access_monster_buffer@@Base>:
   147a0:	push	{fp, lr}
   147a4:	add	fp, sp, #4
   147a8:	sub	sp, sp, #104	; 0x68
   147ac:	str	r0, [fp, #-104]	; 0xffffff98
   147b0:	ldr	r0, [fp, #-104]	; 0xffffff98
   147b4:	bl	12774 <_start@@Base+0x73c>
   147b8:	str	r0, [fp, #-8]
   147bc:	ldr	r3, [fp, #-8]
   147c0:	cmp	r3, #0
   147c4:	bne	147e8 <access_monster_buffer@@Base+0x48>
   147c8:	ldr	r3, [pc, #1428]	; 14d64 <access_monster_buffer@@Base+0x5c4>
   147cc:	add	r3, pc, r3
   147d0:	mov	r2, #211	; 0xd3
   147d4:	ldr	r1, [pc, #1420]	; 14d68 <access_monster_buffer@@Base+0x5c8>
   147d8:	add	r1, pc, r1
   147dc:	ldr	r0, [pc, #1416]	; 14d6c <access_monster_buffer@@Base+0x5cc>
   147e0:	add	r0, pc, r0
   147e4:	bl	1202c <__assert_fail@plt>
   147e8:	ldr	r0, [fp, #-8]
   147ec:	bl	12a90 <_start@@Base+0xa58>
   147f0:	mov	r3, r0
   147f4:	strh	r3, [fp, #-10]
   147f8:	ldr	r0, [fp, #-8]
   147fc:	bl	128c0 <_start@@Base+0x888>
   14800:	mov	r3, r0
   14804:	strh	r3, [fp, #-12]
   14808:	ldr	r0, [fp, #-8]
   1480c:	bl	12c60 <_start@@Base+0xc28>
   14810:	str	r0, [fp, #-16]
   14814:	ldr	r0, [fp, #-16]
   14818:	bl	124ec <_start@@Base+0x4b4>
   1481c:	str	r0, [fp, #-20]	; 0xffffffec
   14820:	ldrh	r3, [fp, #-10]
   14824:	cmp	r3, #300	; 0x12c
   14828:	beq	1484c <access_monster_buffer@@Base+0xac>
   1482c:	ldr	r3, [pc, #1340]	; 14d70 <access_monster_buffer@@Base+0x5d0>
   14830:	add	r3, pc, r3
   14834:	mov	r2, #219	; 0xdb
   14838:	ldr	r1, [pc, #1332]	; 14d74 <access_monster_buffer@@Base+0x5d4>
   1483c:	add	r1, pc, r1
   14840:	ldr	r0, [pc, #1328]	; 14d78 <access_monster_buffer@@Base+0x5d8>
   14844:	add	r0, pc, r0
   14848:	bl	1202c <__assert_fail@plt>
   1484c:	ldrh	r3, [fp, #-12]
   14850:	cmp	r3, #150	; 0x96
   14854:	beq	14878 <access_monster_buffer@@Base+0xd8>
   14858:	ldr	r3, [pc, #1308]	; 14d7c <access_monster_buffer@@Base+0x5dc>
   1485c:	add	r3, pc, r3
   14860:	mov	r2, #221	; 0xdd
   14864:	ldr	r1, [pc, #1300]	; 14d80 <access_monster_buffer@@Base+0x5e0>
   14868:	add	r1, pc, r1
   1486c:	ldr	r0, [pc, #1296]	; 14d84 <access_monster_buffer@@Base+0x5e4>
   14870:	add	r0, pc, r0
   14874:	bl	1202c <__assert_fail@plt>
   14878:	ldr	r3, [pc, #1288]	; 14d88 <access_monster_buffer@@Base+0x5e8>
   1487c:	add	r3, pc, r3
   14880:	mov	r1, r3
   14884:	ldr	r0, [fp, #-16]
   14888:	bl	11f78 <strcmp@plt>
   1488c:	mov	r3, r0
   14890:	cmp	r3, #0
   14894:	beq	148b8 <access_monster_buffer@@Base+0x118>
   14898:	ldr	r3, [pc, #1260]	; 14d8c <access_monster_buffer@@Base+0x5ec>
   1489c:	add	r3, pc, r3
   148a0:	mov	r2, #222	; 0xde
   148a4:	ldr	r1, [pc, #1252]	; 14d90 <access_monster_buffer@@Base+0x5f0>
   148a8:	add	r1, pc, r1
   148ac:	ldr	r0, [pc, #1248]	; 14d94 <access_monster_buffer@@Base+0x5f4>
   148b0:	add	r0, pc, r0
   148b4:	bl	1202c <__assert_fail@plt>
   148b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   148bc:	cmp	r3, #3
   148c0:	beq	148e4 <access_monster_buffer@@Base+0x144>
   148c4:	ldr	r3, [pc, #1228]	; 14d98 <access_monster_buffer@@Base+0x5f8>
   148c8:	add	r3, pc, r3
   148cc:	mov	r2, #223	; 0xdf
   148d0:	ldr	r1, [pc, #1220]	; 14d9c <access_monster_buffer@@Base+0x5fc>
   148d4:	add	r1, pc, r1
   148d8:	ldr	r0, [pc, #1216]	; 14da0 <access_monster_buffer@@Base+0x600>
   148dc:	add	r0, pc, r0
   148e0:	bl	1202c <__assert_fail@plt>
   148e4:	ldr	r0, [fp, #-8]
   148e8:	bl	12b84 <_start@@Base+0xb4c>
   148ec:	str	r0, [fp, #-24]	; 0xffffffe8
   148f0:	ldr	r0, [fp, #-8]
   148f4:	bl	129b4 <_start@@Base+0x97c>
   148f8:	str	r0, [fp, #-28]	; 0xffffffe4
   148fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14900:	cmp	r3, #0
   14904:	bne	14928 <access_monster_buffer@@Base+0x188>
   14908:	ldr	r3, [pc, #1172]	; 14da4 <access_monster_buffer@@Base+0x604>
   1490c:	add	r3, pc, r3
   14910:	mov	r2, #227	; 0xe3
   14914:	ldr	r1, [pc, #1164]	; 14da8 <access_monster_buffer@@Base+0x608>
   14918:	add	r1, pc, r1
   1491c:	ldr	r0, [pc, #1160]	; 14dac <access_monster_buffer@@Base+0x60c>
   14920:	add	r0, pc, r0
   14924:	bl	1202c <__assert_fail@plt>
   14928:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1492c:	cmp	r3, #0
   14930:	beq	14954 <access_monster_buffer@@Base+0x1b4>
   14934:	ldr	r3, [pc, #1140]	; 14db0 <access_monster_buffer@@Base+0x610>
   14938:	add	r3, pc, r3
   1493c:	mov	r2, #228	; 0xe4
   14940:	ldr	r1, [pc, #1132]	; 14db4 <access_monster_buffer@@Base+0x614>
   14944:	add	r1, pc, r1
   14948:	ldr	r0, [pc, #1128]	; 14db8 <access_monster_buffer@@Base+0x618>
   1494c:	add	r0, pc, r0
   14950:	bl	1202c <__assert_fail@plt>
   14954:	ldr	r0, [fp, #-8]
   14958:	bl	127d8 <_start@@Base+0x7a0>
   1495c:	str	r0, [fp, #-32]	; 0xffffffe0
   14960:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14964:	cmp	r3, #0
   14968:	bne	1498c <access_monster_buffer@@Base+0x1ec>
   1496c:	ldr	r3, [pc, #1096]	; 14dbc <access_monster_buffer@@Base+0x61c>
   14970:	add	r3, pc, r3
   14974:	mov	r2, #232	; 0xe8
   14978:	ldr	r1, [pc, #1088]	; 14dc0 <access_monster_buffer@@Base+0x620>
   1497c:	add	r1, pc, r1
   14980:	ldr	r0, [pc, #1084]	; 14dc4 <access_monster_buffer@@Base+0x624>
   14984:	add	r0, pc, r0
   14988:	bl	1202c <__assert_fail@plt>
   1498c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14990:	bl	126a0 <_start@@Base+0x668>
   14994:	vstr	s0, [fp, #-36]	; 0xffffffdc
   14998:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1499c:	bl	126e4 <_start@@Base+0x6ac>
   149a0:	vstr	s0, [fp, #-40]	; 0xffffffd8
   149a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   149a8:	bl	1272c <_start@@Base+0x6f4>
   149ac:	vstr	s0, [fp, #-44]	; 0xffffffd4
   149b0:	vldr	s15, [fp, #-36]	; 0xffffffdc
   149b4:	vldr	s14, [pc, #924]	; 14d58 <access_monster_buffer@@Base+0x5b8>
   149b8:	vcmp.f32	s15, s14
   149bc:	vmrs	APSR_nzcv, fpscr
   149c0:	beq	149e4 <access_monster_buffer@@Base+0x244>
   149c4:	ldr	r3, [pc, #1020]	; 14dc8 <access_monster_buffer@@Base+0x628>
   149c8:	add	r3, pc, r3
   149cc:	mov	r2, #240	; 0xf0
   149d0:	ldr	r1, [pc, #1012]	; 14dcc <access_monster_buffer@@Base+0x62c>
   149d4:	add	r1, pc, r1
   149d8:	ldr	r0, [pc, #1008]	; 14dd0 <access_monster_buffer@@Base+0x630>
   149dc:	add	r0, pc, r0
   149e0:	bl	1202c <__assert_fail@plt>
   149e4:	vldr	s15, [fp, #-40]	; 0xffffffd8
   149e8:	vldr	s14, [pc, #876]	; 14d5c <access_monster_buffer@@Base+0x5bc>
   149ec:	vcmp.f32	s15, s14
   149f0:	vmrs	APSR_nzcv, fpscr
   149f4:	beq	14a18 <access_monster_buffer@@Base+0x278>
   149f8:	ldr	r3, [pc, #980]	; 14dd4 <access_monster_buffer@@Base+0x634>
   149fc:	add	r3, pc, r3
   14a00:	mov	r2, #241	; 0xf1
   14a04:	ldr	r1, [pc, #972]	; 14dd8 <access_monster_buffer@@Base+0x638>
   14a08:	add	r1, pc, r1
   14a0c:	ldr	r0, [pc, #968]	; 14ddc <access_monster_buffer@@Base+0x63c>
   14a10:	add	r0, pc, r0
   14a14:	bl	1202c <__assert_fail@plt>
   14a18:	vldr	s15, [fp, #-44]	; 0xffffffd4
   14a1c:	vldr	s14, [pc, #828]	; 14d60 <access_monster_buffer@@Base+0x5c0>
   14a20:	vcmp.f32	s15, s14
   14a24:	vmrs	APSR_nzcv, fpscr
   14a28:	beq	14a4c <access_monster_buffer@@Base+0x2ac>
   14a2c:	ldr	r3, [pc, #940]	; 14de0 <access_monster_buffer@@Base+0x640>
   14a30:	add	r3, pc, r3
   14a34:	mov	r2, #242	; 0xf2
   14a38:	ldr	r1, [pc, #932]	; 14de4 <access_monster_buffer@@Base+0x644>
   14a3c:	add	r1, pc, r1
   14a40:	ldr	r0, [pc, #928]	; 14de8 <access_monster_buffer@@Base+0x648>
   14a44:	add	r0, pc, r0
   14a48:	bl	1202c <__assert_fail@plt>
   14a4c:	sub	r3, fp, #96	; 0x60
   14a50:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14a54:	mov	r0, r3
   14a58:	bl	13720 <_start@@Base+0x16e8>
   14a5c:	vldr	s15, [fp, #-96]	; 0xffffffa0
   14a60:	vldr	s14, [pc, #752]	; 14d58 <access_monster_buffer@@Base+0x5b8>
   14a64:	vcmp.f32	s15, s14
   14a68:	vmrs	APSR_nzcv, fpscr
   14a6c:	beq	14a90 <access_monster_buffer@@Base+0x2f0>
   14a70:	ldr	r3, [pc, #884]	; 14dec <access_monster_buffer@@Base+0x64c>
   14a74:	add	r3, pc, r3
   14a78:	mov	r2, #250	; 0xfa
   14a7c:	ldr	r1, [pc, #876]	; 14df0 <access_monster_buffer@@Base+0x650>
   14a80:	add	r1, pc, r1
   14a84:	ldr	r0, [pc, #872]	; 14df4 <access_monster_buffer@@Base+0x654>
   14a88:	add	r0, pc, r0
   14a8c:	bl	1202c <__assert_fail@plt>
   14a90:	vldr	s15, [fp, #-92]	; 0xffffffa4
   14a94:	vldr	s14, [pc, #704]	; 14d5c <access_monster_buffer@@Base+0x5bc>
   14a98:	vcmp.f32	s15, s14
   14a9c:	vmrs	APSR_nzcv, fpscr
   14aa0:	beq	14ac4 <access_monster_buffer@@Base+0x324>
   14aa4:	ldr	r3, [pc, #844]	; 14df8 <access_monster_buffer@@Base+0x658>
   14aa8:	add	r3, pc, r3
   14aac:	mov	r2, #251	; 0xfb
   14ab0:	ldr	r1, [pc, #836]	; 14dfc <access_monster_buffer@@Base+0x65c>
   14ab4:	add	r1, pc, r1
   14ab8:	ldr	r0, [pc, #832]	; 14e00 <access_monster_buffer@@Base+0x660>
   14abc:	add	r0, pc, r0
   14ac0:	bl	1202c <__assert_fail@plt>
   14ac4:	vldr	s15, [fp, #-88]	; 0xffffffa8
   14ac8:	vldr	s14, [pc, #656]	; 14d60 <access_monster_buffer@@Base+0x5c0>
   14acc:	vcmp.f32	s15, s14
   14ad0:	vmrs	APSR_nzcv, fpscr
   14ad4:	beq	14af8 <access_monster_buffer@@Base+0x358>
   14ad8:	ldr	r3, [pc, #804]	; 14e04 <access_monster_buffer@@Base+0x664>
   14adc:	add	r3, pc, r3
   14ae0:	mov	r2, #252	; 0xfc
   14ae4:	ldr	r1, [pc, #796]	; 14e08 <access_monster_buffer@@Base+0x668>
   14ae8:	add	r1, pc, r1
   14aec:	ldr	r0, [pc, #792]	; 14e0c <access_monster_buffer@@Base+0x66c>
   14af0:	add	r0, pc, r0
   14af4:	bl	1202c <__assert_fail@plt>
   14af8:	ldr	r0, [fp, #-8]
   14afc:	bl	12d64 <_start@@Base+0xd2c>
   14b00:	str	r0, [fp, #-48]	; 0xffffffd0
   14b04:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b08:	bl	12530 <_start@@Base+0x4f8>
   14b0c:	str	r0, [fp, #-52]	; 0xffffffcc
   14b10:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b14:	cmp	r3, #0
   14b18:	bne	14b3c <access_monster_buffer@@Base+0x39c>
   14b1c:	ldr	r3, [pc, #748]	; 14e10 <access_monster_buffer@@Base+0x670>
   14b20:	add	r3, pc, r3
   14b24:	ldr	r2, [pc, #744]	; 14e14 <access_monster_buffer@@Base+0x674>
   14b28:	ldr	r1, [pc, #744]	; 14e18 <access_monster_buffer@@Base+0x678>
   14b2c:	add	r1, pc, r1
   14b30:	ldr	r0, [pc, #740]	; 14e1c <access_monster_buffer@@Base+0x67c>
   14b34:	add	r0, pc, r0
   14b38:	bl	1202c <__assert_fail@plt>
   14b3c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14b40:	cmp	r3, #10
   14b44:	beq	14b68 <access_monster_buffer@@Base+0x3c8>
   14b48:	ldr	r3, [pc, #720]	; 14e20 <access_monster_buffer@@Base+0x680>
   14b4c:	add	r3, pc, r3
   14b50:	ldr	r2, [pc, #716]	; 14e24 <access_monster_buffer@@Base+0x684>
   14b54:	ldr	r1, [pc, #716]	; 14e28 <access_monster_buffer@@Base+0x688>
   14b58:	add	r1, pc, r1
   14b5c:	ldr	r0, [pc, #712]	; 14e2c <access_monster_buffer@@Base+0x68c>
   14b60:	add	r0, pc, r0
   14b64:	bl	1202c <__assert_fail@plt>
   14b68:	mov	r1, #2
   14b6c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b70:	bl	12558 <_start@@Base+0x520>
   14b74:	mov	r3, r0
   14b78:	strb	r3, [fp, #-53]	; 0xffffffcb
   14b7c:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   14b80:	cmp	r3, #2
   14b84:	beq	14ba8 <access_monster_buffer@@Base+0x408>
   14b88:	ldr	r3, [pc, #672]	; 14e30 <access_monster_buffer@@Base+0x690>
   14b8c:	add	r3, pc, r3
   14b90:	ldr	r2, [pc, #668]	; 14e34 <access_monster_buffer@@Base+0x694>
   14b94:	ldr	r1, [pc, #668]	; 14e38 <access_monster_buffer@@Base+0x698>
   14b98:	add	r1, pc, r1
   14b9c:	ldr	r0, [pc, #664]	; 14e3c <access_monster_buffer@@Base+0x69c>
   14ba0:	add	r0, pc, r0
   14ba4:	bl	1202c <__assert_fail@plt>
   14ba8:	ldr	r0, [fp, #-8]
   14bac:	bl	12e68 <_start@@Base+0xe30>
   14bb0:	str	r0, [fp, #-60]	; 0xffffffc4
   14bb4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14bb8:	bl	13160 <_start@@Base+0x1128>
   14bbc:	str	r0, [fp, #-64]	; 0xffffffc0
   14bc0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14bc4:	cmp	r3, #2
   14bc8:	beq	14bec <access_monster_buffer@@Base+0x44c>
   14bcc:	ldr	r3, [pc, #620]	; 14e40 <access_monster_buffer@@Base+0x6a0>
   14bd0:	add	r3, pc, r3
   14bd4:	ldr	r2, [pc, #616]	; 14e44 <access_monster_buffer@@Base+0x6a4>
   14bd8:	ldr	r1, [pc, #616]	; 14e48 <access_monster_buffer@@Base+0x6a8>
   14bdc:	add	r1, pc, r1
   14be0:	ldr	r0, [pc, #612]	; 14e4c <access_monster_buffer@@Base+0x6ac>
   14be4:	add	r0, pc, r0
   14be8:	bl	1202c <__assert_fail@plt>
   14bec:	mov	r1, #1
   14bf0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14bf4:	bl	131a4 <_start@@Base+0x116c>
   14bf8:	mov	r3, r0
   14bfc:	mov	r0, r3
   14c00:	bl	13230 <_start@@Base+0x11f8>
   14c04:	str	r0, [fp, #-68]	; 0xffffffbc
   14c08:	mov	r1, #1
   14c0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14c10:	bl	131a4 <_start@@Base+0x116c>
   14c14:	mov	r3, r0
   14c18:	mov	r0, r3
   14c1c:	bl	13334 <_start@@Base+0x12fc>
   14c20:	mov	r3, r0
   14c24:	strh	r3, [fp, #-70]	; 0xffffffba
   14c28:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14c2c:	cmp	r3, #0
   14c30:	beq	14c54 <access_monster_buffer@@Base+0x4b4>
   14c34:	ldr	r3, [pc, #532]	; 14e50 <access_monster_buffer@@Base+0x6b0>
   14c38:	add	r3, pc, r3
   14c3c:	mov	r1, r3
   14c40:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14c44:	bl	11f78 <strcmp@plt>
   14c48:	mov	r3, r0
   14c4c:	cmp	r3, #0
   14c50:	beq	14c74 <access_monster_buffer@@Base+0x4d4>
   14c54:	ldr	r3, [pc, #504]	; 14e54 <access_monster_buffer@@Base+0x6b4>
   14c58:	add	r3, pc, r3
   14c5c:	ldr	r2, [pc, #500]	; 14e58 <access_monster_buffer@@Base+0x6b8>
   14c60:	ldr	r1, [pc, #500]	; 14e5c <access_monster_buffer@@Base+0x6bc>
   14c64:	add	r1, pc, r1
   14c68:	ldr	r0, [pc, #496]	; 14e60 <access_monster_buffer@@Base+0x6c0>
   14c6c:	add	r0, pc, r0
   14c70:	bl	1202c <__assert_fail@plt>
   14c74:	ldrh	r3, [fp, #-70]	; 0xffffffba
   14c78:	cmp	r3, #5
   14c7c:	beq	14ca0 <access_monster_buffer@@Base+0x500>
   14c80:	ldr	r3, [pc, #476]	; 14e64 <access_monster_buffer@@Base+0x6c4>
   14c84:	add	r3, pc, r3
   14c88:	mov	r2, #276	; 0x114
   14c8c:	ldr	r1, [pc, #468]	; 14e68 <access_monster_buffer@@Base+0x6c8>
   14c90:	add	r1, pc, r1
   14c94:	ldr	r0, [pc, #464]	; 14e6c <access_monster_buffer@@Base+0x6cc>
   14c98:	add	r0, pc, r0
   14c9c:	bl	1202c <__assert_fail@plt>
   14ca0:	ldr	r0, [fp, #-8]
   14ca4:	bl	12f6c <_start@@Base+0xf34>
   14ca8:	mov	r3, r0
   14cac:	cmp	r3, #1
   14cb0:	bne	14d48 <access_monster_buffer@@Base+0x5a8>
   14cb4:	ldr	r0, [fp, #-8]
   14cb8:	bl	13060 <_start@@Base+0x1028>
   14cbc:	str	r0, [fp, #-76]	; 0xffffffb4
   14cc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14cc4:	bl	13230 <_start@@Base+0x11f8>
   14cc8:	str	r0, [fp, #-80]	; 0xffffffb0
   14ccc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14cd0:	bl	13334 <_start@@Base+0x12fc>
   14cd4:	mov	r3, r0
   14cd8:	strh	r3, [fp, #-82]	; 0xffffffae
   14cdc:	ldr	r3, [pc, #396]	; 14e70 <access_monster_buffer@@Base+0x6d0>
   14ce0:	add	r3, pc, r3
   14ce4:	mov	r1, r3
   14ce8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14cec:	bl	11f78 <strcmp@plt>
   14cf0:	mov	r3, r0
   14cf4:	cmp	r3, #0
   14cf8:	beq	14d1c <access_monster_buffer@@Base+0x57c>
   14cfc:	ldr	r3, [pc, #368]	; 14e74 <access_monster_buffer@@Base+0x6d4>
   14d00:	add	r3, pc, r3
   14d04:	ldr	r2, [pc, #364]	; 14e78 <access_monster_buffer@@Base+0x6d8>
   14d08:	ldr	r1, [pc, #364]	; 14e7c <access_monster_buffer@@Base+0x6dc>
   14d0c:	add	r1, pc, r1
   14d10:	ldr	r0, [pc, #360]	; 14e80 <access_monster_buffer@@Base+0x6e0>
   14d14:	add	r0, pc, r0
   14d18:	bl	1202c <__assert_fail@plt>
   14d1c:	ldrh	r3, [fp, #-82]	; 0xffffffae
   14d20:	cmp	r3, #5
   14d24:	beq	14d48 <access_monster_buffer@@Base+0x5a8>
   14d28:	ldr	r3, [pc, #340]	; 14e84 <access_monster_buffer@@Base+0x6e4>
   14d2c:	add	r3, pc, r3
   14d30:	ldr	r2, [pc, #336]	; 14e88 <access_monster_buffer@@Base+0x6e8>
   14d34:	ldr	r1, [pc, #336]	; 14e8c <access_monster_buffer@@Base+0x6ec>
   14d38:	add	r1, pc, r1
   14d3c:	ldr	r0, [pc, #332]	; 14e90 <access_monster_buffer@@Base+0x6f0>
   14d40:	add	r0, pc, r0
   14d44:	bl	1202c <__assert_fail@plt>
   14d48:	mov	r3, #0
   14d4c:	mov	r0, r3
   14d50:	sub	sp, fp, #4
   14d54:	pop	{fp, pc}
   14d58:	svccc	0x00800000
   14d5c:	andmi	r0, r0, r0
   14d60:	submi	r0, r0, r0
   14d64:	andeq	r7, r0, ip, ror #21
   14d68:	andeq	r7, r0, r8, lsl #20
   14d6c:	andeq	r7, r0, r4, ror #20
   14d70:	andeq	r7, r0, r8, lsl #21
   14d74:	andeq	r7, r0, r4, lsr #19
   14d78:	andeq	r7, r0, r0, lsl #20
   14d7c:	andeq	r7, r0, ip, asr sl
   14d80:	andeq	r7, r0, r8, ror r9
   14d84:	ldrdeq	r7, [r0], -r4
   14d88:	andeq	r7, r0, r8, asr #18
   14d8c:	andeq	r7, r0, ip, lsl sl
   14d90:	andeq	r7, r0, r8, lsr r9
   14d94:	muleq	r0, r4, r9
   14d98:	strdeq	r7, [r0], -r0
   14d9c:	andeq	r7, r0, ip, lsl #18
   14da0:	andeq	r7, r0, r8, ror #18
   14da4:	andeq	r7, r0, ip, lsr #19
   14da8:	andeq	r7, r0, r8, asr #17
   14dac:	andeq	r7, r0, r4, lsr #18
   14db0:	andeq	r7, r0, r0, lsl #19
   14db4:	muleq	r0, ip, r8
   14db8:	strdeq	r7, [r0], -r8
   14dbc:	andeq	r7, r0, r8, asr #18
   14dc0:	andeq	r7, r0, r4, ror #16
   14dc4:	andeq	r7, r0, r0, asr #17
   14dc8:	strdeq	r7, [r0], -r0
   14dcc:	andeq	r7, r0, ip, lsl #16
   14dd0:	andeq	r7, r0, r8, ror #16
   14dd4:			; <UNDEFINED> instruction: 0x000078bc
   14dd8:	ldrdeq	r7, [r0], -r8
   14ddc:	andeq	r7, r0, r4, lsr r8
   14de0:	andeq	r7, r0, r8, lsl #17
   14de4:	andeq	r7, r0, r4, lsr #15
   14de8:	andeq	r7, r0, r0, lsl #16
   14dec:	andeq	r7, r0, r4, asr #16
   14df0:	andeq	r7, r0, r0, ror #14
   14df4:			; <UNDEFINED> instruction: 0x000077bc
   14df8:	andeq	r7, r0, r0, lsl r8
   14dfc:	andeq	r7, r0, ip, lsr #14
   14e00:	andeq	r7, r0, r8, lsl #15
   14e04:	ldrdeq	r7, [r0], -ip
   14e08:	strdeq	r7, [r0], -r8
   14e0c:	andeq	r7, r0, r4, asr r7
   14e10:	muleq	r0, r8, r7
   14e14:	andeq	r0, r0, r5, lsl #2
   14e18:			; <UNDEFINED> instruction: 0x000076b4
   14e1c:	andeq	r7, r0, r0, lsl r7
   14e20:	andeq	r7, r0, ip, ror #14
   14e24:	andeq	r0, r0, r7, lsl #2
   14e28:	andeq	r7, r0, r8, lsl #13
   14e2c:	andeq	r7, r0, r4, ror #13
   14e30:	andeq	r7, r0, ip, lsr #14
   14e34:	andeq	r0, r0, fp, lsl #2
   14e38:	andeq	r7, r0, r8, asr #12
   14e3c:	andeq	r7, r0, r4, lsr #13
   14e40:	andeq	r7, r0, r8, ror #13
   14e44:	andeq	r0, r0, pc, lsl #2
   14e48:	andeq	r7, r0, r4, lsl #12
   14e4c:	andeq	r7, r0, r0, ror #12
   14e50:	andeq	r7, r0, r8, lsl #11
   14e54:	andeq	r7, r0, r0, ror #12
   14e58:	andeq	r0, r0, r3, lsl r1
   14e5c:	andeq	r7, r0, ip, ror r5
   14e60:	ldrdeq	r7, [r0], -r8
   14e64:	andeq	r7, r0, r4, lsr r6
   14e68:	andeq	r7, r0, r0, asr r5
   14e6c:	andeq	r7, r0, ip, lsr #11
   14e70:	andeq	r7, r0, r0, ror #9
   14e74:			; <UNDEFINED> instruction: 0x000075b8
   14e78:	andeq	r0, r0, lr, lsl r1
   14e7c:	ldrdeq	r7, [r0], -r4
   14e80:	andeq	r7, r0, r0, lsr r5
   14e84:	andeq	r7, r0, ip, lsl #11
   14e88:	andeq	r0, r0, pc, lsl r1
   14e8c:	andeq	r7, r0, r8, lsr #9
   14e90:	andeq	r7, r0, r4, lsl #10

00014e94 <main@@Base>:
   14e94:	push	{fp, lr}
   14e98:	add	fp, sp, #4
   14e9c:	sub	sp, sp, #248	; 0xf8
   14ea0:	str	r0, [fp, #-248]	; 0xffffff08
   14ea4:	str	r1, [fp, #-252]	; 0xffffff04
   14ea8:	sub	r3, fp, #240	; 0xf0
   14eac:	mov	r0, r3
   14eb0:	bl	15d68 <flatcc_builder_init@@Base>
   14eb4:	sub	r3, fp, #240	; 0xf0
   14eb8:	mov	r1, #0
   14ebc:	mov	r0, r3
   14ec0:	bl	14438 <create_monster_bottom_up@@Base>
   14ec4:	mov	r3, r0
   14ec8:	cmp	r3, #0
   14ecc:	beq	14ef0 <main@@Base+0x5c>
   14ed0:	ldr	r3, [pc, #320]	; 15018 <main@@Base+0x184>
   14ed4:	add	r3, pc, r3
   14ed8:	mov	r2, #308	; 0x134
   14edc:	ldr	r1, [pc, #312]	; 1501c <main@@Base+0x188>
   14ee0:	add	r1, pc, r1
   14ee4:	ldr	r0, [pc, #308]	; 15020 <main@@Base+0x18c>
   14ee8:	add	r0, pc, r0
   14eec:	bl	1202c <__assert_fail@plt>
   14ef0:	sub	r2, fp, #244	; 0xf4
   14ef4:	sub	r3, fp, #240	; 0xf0
   14ef8:	mov	r1, r2
   14efc:	mov	r0, r3
   14f00:	bl	1b0d4 <flatcc_builder_finalize_aligned_buffer@@Base>
   14f04:	str	r0, [fp, #-8]
   14f08:	ldr	r0, [fp, #-8]
   14f0c:	bl	1b1f0 <flatcc_builder_aligned_free@@Base>
   14f10:	sub	r3, fp, #240	; 0xf0
   14f14:	mov	r0, r3
   14f18:	bl	15fec <flatcc_builder_reset@@Base>
   14f1c:	sub	r3, fp, #240	; 0xf0
   14f20:	mov	r1, #1
   14f24:	mov	r0, r3
   14f28:	bl	14438 <create_monster_bottom_up@@Base>
   14f2c:	mov	r3, r0
   14f30:	cmp	r3, #0
   14f34:	beq	14f58 <main@@Base+0xc4>
   14f38:	ldr	r3, [pc, #228]	; 15024 <main@@Base+0x190>
   14f3c:	add	r3, pc, r3
   14f40:	ldr	r2, [pc, #224]	; 15028 <main@@Base+0x194>
   14f44:	ldr	r1, [pc, #224]	; 1502c <main@@Base+0x198>
   14f48:	add	r1, pc, r1
   14f4c:	ldr	r0, [pc, #220]	; 15030 <main@@Base+0x19c>
   14f50:	add	r0, pc, r0
   14f54:	bl	1202c <__assert_fail@plt>
   14f58:	sub	r2, fp, #244	; 0xf4
   14f5c:	sub	r3, fp, #240	; 0xf0
   14f60:	mov	r1, r2
   14f64:	mov	r0, r3
   14f68:	bl	1b0d4 <flatcc_builder_finalize_aligned_buffer@@Base>
   14f6c:	str	r0, [fp, #-8]
   14f70:	ldr	r0, [fp, #-8]
   14f74:	bl	147a0 <access_monster_buffer@@Base>
   14f78:	ldr	r0, [fp, #-8]
   14f7c:	bl	1b1f0 <flatcc_builder_aligned_free@@Base>
   14f80:	sub	r3, fp, #240	; 0xf0
   14f84:	mov	r0, r3
   14f88:	bl	15fec <flatcc_builder_reset@@Base>
   14f8c:	sub	r3, fp, #240	; 0xf0
   14f90:	mov	r0, r3
   14f94:	bl	14668 <create_monster_top_down@@Base>
   14f98:	sub	r2, fp, #244	; 0xf4
   14f9c:	sub	r3, fp, #240	; 0xf0
   14fa0:	mov	r1, r2
   14fa4:	mov	r0, r3
   14fa8:	bl	1afd0 <flatcc_builder_finalize_buffer@@Base>
   14fac:	str	r0, [fp, #-8]
   14fb0:	ldr	r0, [fp, #-8]
   14fb4:	bl	147a0 <access_monster_buffer@@Base>
   14fb8:	mov	r3, r0
   14fbc:	cmp	r3, #0
   14fc0:	beq	14fe4 <main@@Base+0x150>
   14fc4:	ldr	r3, [pc, #104]	; 15034 <main@@Base+0x1a0>
   14fc8:	add	r3, pc, r3
   14fcc:	ldr	r2, [pc, #100]	; 15038 <main@@Base+0x1a4>
   14fd0:	ldr	r1, [pc, #100]	; 1503c <main@@Base+0x1a8>
   14fd4:	add	r1, pc, r1
   14fd8:	ldr	r0, [pc, #96]	; 15040 <main@@Base+0x1ac>
   14fdc:	add	r0, pc, r0
   14fe0:	bl	1202c <__assert_fail@plt>
   14fe4:	ldr	r0, [fp, #-8]
   14fe8:	bl	11f84 <free@plt>
   14fec:	sub	r3, fp, #240	; 0xf0
   14ff0:	mov	r0, r3
   14ff4:	bl	1601c <flatcc_builder_clear@@Base>
   14ff8:	ldr	r3, [pc, #68]	; 15044 <main@@Base+0x1b0>
   14ffc:	add	r3, pc, r3
   15000:	mov	r0, r3
   15004:	bl	11fb4 <puts@plt>
   15008:	mov	r3, #0
   1500c:	mov	r0, r3
   15010:	sub	sp, fp, #4
   15014:	pop	{fp, pc}
   15018:	andeq	r7, r0, ip, lsr #11
   1501c:	andeq	r7, r0, r0, lsl #6
   15020:	andeq	r7, r0, ip, asr r3
   15024:	andeq	r7, r0, r4, asr #10
   15028:	andeq	r0, r0, pc, asr #2
   1502c:	muleq	r0, r8, r2
   15030:	strdeq	r7, [r0], -r4
   15034:			; <UNDEFINED> instruction: 0x000074b8
   15038:	andeq	r0, r0, r6, asr r1
   1503c:	andeq	r7, r0, ip, lsl #4
   15040:	andeq	r7, r0, r8, ror #4
   15044:	andeq	r7, r0, ip, asr #4
   15048:	push	{fp, lr}
   1504c:	add	fp, sp, #4
   15050:	sub	sp, sp, #16
   15054:	str	r0, [fp, #-16]
   15058:	str	r1, [fp, #-20]	; 0xffffffec
   1505c:	mov	r3, #0
   15060:	str	r3, [fp, #-12]
   15064:	ldr	r3, [fp, #-16]
   15068:	cmp	r3, #3
   1506c:	bhi	15078 <main@@Base+0x1e4>
   15070:	mov	r3, #4
   15074:	str	r3, [fp, #-16]
   15078:	sub	r3, fp, #12
   1507c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15080:	ldr	r1, [fp, #-16]
   15084:	mov	r0, r3
   15088:	bl	11ff0 <posix_memalign@plt>
   1508c:	str	r0, [fp, #-8]
   15090:	ldr	r3, [fp, #-8]
   15094:	cmp	r3, #0
   15098:	beq	150bc <main@@Base+0x228>
   1509c:	ldr	r3, [fp, #-12]
   150a0:	cmp	r3, #0
   150a4:	beq	150bc <main@@Base+0x228>
   150a8:	ldr	r3, [fp, #-12]
   150ac:	mov	r0, r3
   150b0:	bl	11f84 <free@plt>
   150b4:	mov	r3, #0
   150b8:	str	r3, [fp, #-12]
   150bc:	ldr	r3, [fp, #-12]
   150c0:	mov	r0, r3
   150c4:	sub	sp, fp, #4
   150c8:	pop	{fp, pc}
   150cc:	push	{fp}		; (str fp, [sp, #-4]!)
   150d0:	add	fp, sp, #0
   150d4:	sub	sp, sp, #12
   150d8:	str	r0, [fp, #-8]
   150dc:	ldr	r3, [fp, #-8]
   150e0:	mov	r0, r3
   150e4:	add	sp, fp, #0
   150e8:	pop	{fp}		; (ldr fp, [sp], #4)
   150ec:	bx	lr
   150f0:	push	{fp}		; (str fp, [sp, #-4]!)
   150f4:	add	fp, sp, #0
   150f8:	sub	sp, sp, #12
   150fc:	mov	r3, r0
   15100:	strb	r3, [fp, #-5]
   15104:	ldrb	r3, [fp, #-5]
   15108:	mov	r0, r3
   1510c:	add	sp, fp, #0
   15110:	pop	{fp}		; (ldr fp, [sp], #4)
   15114:	bx	lr
   15118:	push	{fp}		; (str fp, [sp, #-4]!)
   1511c:	add	fp, sp, #0
   15120:	sub	sp, sp, #12
   15124:	str	r0, [fp, #-8]
   15128:	ldr	r3, [fp, #-8]
   1512c:	mov	r0, r3
   15130:	add	sp, fp, #0
   15134:	pop	{fp}		; (ldr fp, [sp], #4)
   15138:	bx	lr
   1513c:	push	{fp}		; (str fp, [sp, #-4]!)
   15140:	add	fp, sp, #0
   15144:	sub	sp, sp, #12
   15148:	str	r0, [fp, #-8]
   1514c:	str	r1, [fp, #-12]
   15150:	ldr	r3, [fp, #-8]
   15154:	ldr	r2, [r3]
   15158:	ldr	r3, [fp, #-8]
   1515c:	ldr	r3, [r3, #4]
   15160:	cmp	r2, r3
   15164:	bne	15190 <main@@Base+0x2fc>
   15168:	ldr	r3, [fp, #-12]
   1516c:	cmp	r3, #0
   15170:	beq	15184 <main@@Base+0x2f0>
   15174:	ldr	r3, [fp, #-8]
   15178:	ldr	r2, [r3, #24]
   1517c:	ldr	r3, [fp, #-12]
   15180:	str	r2, [r3]
   15184:	ldr	r3, [fp, #-8]
   15188:	ldr	r3, [r3, #8]
   1518c:	b	151ac <main@@Base+0x318>
   15190:	ldr	r3, [fp, #-12]
   15194:	cmp	r3, #0
   15198:	beq	151a8 <main@@Base+0x314>
   1519c:	ldr	r3, [fp, #-12]
   151a0:	mov	r2, #0
   151a4:	str	r2, [r3]
   151a8:	mov	r3, #0
   151ac:	mov	r0, r3
   151b0:	add	sp, fp, #0
   151b4:	pop	{fp}		; (ldr fp, [sp], #4)
   151b8:	bx	lr
   151bc:	push	{fp, lr}
   151c0:	add	fp, sp, #4
   151c4:	sub	sp, sp, #16
   151c8:	str	r0, [fp, #-16]
   151cc:	str	r1, [fp, #-20]	; 0xffffffec
   151d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   151d4:	mov	r1, #0
   151d8:	ldr	r0, [fp, #-16]
   151dc:	bl	12014 <memchr@plt>
   151e0:	str	r0, [fp, #-8]
   151e4:	ldr	r3, [fp, #-8]
   151e8:	cmp	r3, #0
   151ec:	beq	15200 <main@@Base+0x36c>
   151f0:	ldr	r2, [fp, #-8]
   151f4:	ldr	r3, [fp, #-16]
   151f8:	sub	r3, r2, r3
   151fc:	b	15204 <main@@Base+0x370>
   15200:	ldr	r3, [fp, #-20]	; 0xffffffec
   15204:	mov	r0, r3
   15208:	sub	sp, fp, #4
   1520c:	pop	{fp, pc}

00015210 <flatcc_builder_default_alloc@@Base>:
   15210:	push	{fp, lr}
   15214:	add	fp, sp, #4
   15218:	sub	sp, sp, #24
   1521c:	str	r0, [fp, #-16]
   15220:	str	r1, [fp, #-20]	; 0xffffffec
   15224:	str	r2, [fp, #-24]	; 0xffffffe8
   15228:	str	r3, [fp, #-28]	; 0xffffffe4
   1522c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15230:	cmp	r3, #0
   15234:	bne	15278 <flatcc_builder_default_alloc@@Base+0x68>
   15238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1523c:	ldr	r3, [r3]
   15240:	cmp	r3, #0
   15244:	beq	15270 <flatcc_builder_default_alloc@@Base+0x60>
   15248:	ldr	r3, [fp, #-20]	; 0xffffffec
   1524c:	ldr	r3, [r3]
   15250:	mov	r0, r3
   15254:	bl	11f84 <free@plt>
   15258:	ldr	r3, [fp, #-20]	; 0xffffffec
   1525c:	mov	r2, #0
   15260:	str	r2, [r3]
   15264:	ldr	r3, [fp, #-20]	; 0xffffffec
   15268:	mov	r2, #0
   1526c:	str	r2, [r3, #4]
   15270:	mov	r3, #0
   15274:	b	153cc <flatcc_builder_default_alloc@@Base+0x1bc>
   15278:	ldr	r3, [fp, #4]
   1527c:	sub	r3, r3, #1
   15280:	cmp	r3, #6
   15284:	addls	pc, pc, r3, lsl #2
   15288:	b	152d8 <flatcc_builder_default_alloc@@Base+0xc8>
   1528c:	b	152a8 <flatcc_builder_default_alloc@@Base+0x98>
   15290:	b	152d8 <flatcc_builder_default_alloc@@Base+0xc8>
   15294:	b	152d8 <flatcc_builder_default_alloc@@Base+0xc8>
   15298:	b	152c0 <flatcc_builder_default_alloc@@Base+0xb0>
   1529c:	b	152b4 <flatcc_builder_default_alloc@@Base+0xa4>
   152a0:	b	152d8 <flatcc_builder_default_alloc@@Base+0xc8>
   152a4:	b	152cc <flatcc_builder_default_alloc@@Base+0xbc>
   152a8:	mov	r3, #256	; 0x100
   152ac:	str	r3, [fp, #-8]
   152b0:	b	152e4 <flatcc_builder_default_alloc@@Base+0xd4>
   152b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   152b8:	str	r3, [fp, #-8]
   152bc:	b	152e4 <flatcc_builder_default_alloc@@Base+0xd4>
   152c0:	mov	r3, #288	; 0x120
   152c4:	str	r3, [fp, #-8]
   152c8:	b	152e4 <flatcc_builder_default_alloc@@Base+0xd4>
   152cc:	mov	r3, #64	; 0x40
   152d0:	str	r3, [fp, #-8]
   152d4:	b	152e4 <flatcc_builder_default_alloc@@Base+0xd4>
   152d8:	mov	r3, #32
   152dc:	str	r3, [fp, #-8]
   152e0:	nop			; (mov r0, r0)
   152e4:	b	152f4 <flatcc_builder_default_alloc@@Base+0xe4>
   152e8:	ldr	r3, [fp, #-8]
   152ec:	lsl	r3, r3, #1
   152f0:	str	r3, [fp, #-8]
   152f4:	ldr	r2, [fp, #-8]
   152f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   152fc:	cmp	r2, r3
   15300:	bcc	152e8 <flatcc_builder_default_alloc@@Base+0xd8>
   15304:	ldr	r3, [fp, #-20]	; 0xffffffec
   15308:	ldr	r2, [r3, #4]
   1530c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15310:	cmp	r2, r3
   15314:	bcc	15338 <flatcc_builder_default_alloc@@Base+0x128>
   15318:	ldr	r3, [fp, #-20]	; 0xffffffec
   1531c:	ldr	r3, [r3, #4]
   15320:	lsr	r2, r3, #1
   15324:	ldr	r3, [fp, #-8]
   15328:	cmp	r2, r3
   1532c:	bcc	15338 <flatcc_builder_default_alloc@@Base+0x128>
   15330:	mov	r3, #0
   15334:	b	153cc <flatcc_builder_default_alloc@@Base+0x1bc>
   15338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1533c:	ldr	r3, [r3]
   15340:	ldr	r1, [fp, #-8]
   15344:	mov	r0, r3
   15348:	bl	11fa8 <realloc@plt>
   1534c:	str	r0, [fp, #-12]
   15350:	ldr	r3, [fp, #-12]
   15354:	cmp	r3, #0
   15358:	bne	15364 <flatcc_builder_default_alloc@@Base+0x154>
   1535c:	mvn	r3, #0
   15360:	b	153cc <flatcc_builder_default_alloc@@Base+0x1bc>
   15364:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15368:	cmp	r3, #0
   1536c:	beq	153b0 <flatcc_builder_default_alloc@@Base+0x1a0>
   15370:	ldr	r3, [fp, #-20]	; 0xffffffec
   15374:	ldr	r2, [r3, #4]
   15378:	ldr	r3, [fp, #-8]
   1537c:	cmp	r2, r3
   15380:	bcs	153b0 <flatcc_builder_default_alloc@@Base+0x1a0>
   15384:	ldr	r3, [fp, #-20]	; 0xffffffec
   15388:	ldr	r3, [r3, #4]
   1538c:	ldr	r2, [fp, #-12]
   15390:	add	r0, r2, r3
   15394:	ldr	r3, [fp, #-20]	; 0xffffffec
   15398:	ldr	r3, [r3, #4]
   1539c:	ldr	r2, [fp, #-8]
   153a0:	sub	r3, r2, r3
   153a4:	mov	r2, r3
   153a8:	mov	r1, #0
   153ac:	bl	11ffc <memset@plt>
   153b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   153b4:	ldr	r2, [fp, #-12]
   153b8:	str	r2, [r3]
   153bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   153c0:	ldr	r2, [fp, #-8]
   153c4:	str	r2, [r3, #4]
   153c8:	mov	r3, #0
   153cc:	mov	r0, r3
   153d0:	sub	sp, fp, #4
   153d4:	pop	{fp, pc}
   153d8:	push	{fp}		; (str fp, [sp, #-4]!)
   153dc:	add	fp, sp, #0
   153e0:	sub	sp, sp, #20
   153e4:	str	r0, [fp, #-16]
   153e8:	str	r1, [fp, #-20]	; 0xffffffec
   153ec:	ldr	r3, [fp, #-16]
   153f0:	add	r3, r3, #52	; 0x34
   153f4:	add	r3, r3, #8
   153f8:	str	r3, [fp, #-8]
   153fc:	ldr	r3, [fp, #-16]
   15400:	ldr	r2, [r3, #60]	; 0x3c
   15404:	ldr	r3, [fp, #-16]
   15408:	ldr	r3, [r3, #28]
   1540c:	add	r2, r2, r3
   15410:	ldr	r3, [fp, #-16]
   15414:	str	r2, [r3, #16]
   15418:	ldr	r3, [fp, #-8]
   1541c:	ldr	r2, [r3, #4]
   15420:	ldr	r3, [fp, #-16]
   15424:	ldr	r3, [r3, #28]
   15428:	sub	r2, r2, r3
   1542c:	ldr	r3, [fp, #-16]
   15430:	str	r2, [r3, #24]
   15434:	ldr	r3, [fp, #-16]
   15438:	ldr	r2, [r3, #24]
   1543c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15440:	cmp	r2, r3
   15444:	bls	15454 <flatcc_builder_default_alloc@@Base+0x244>
   15448:	ldr	r3, [fp, #-16]
   1544c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15450:	str	r2, [r3, #24]
   15454:	ldr	r3, [fp, #-16]
   15458:	ldr	r3, [r3, #32]
   1545c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15460:	str	r2, [r3, #4]
   15464:	nop			; (mov r0, r0)
   15468:	add	sp, fp, #0
   1546c:	pop	{fp}		; (ldr fp, [sp], #4)
   15470:	bx	lr
   15474:	push	{r4, fp, lr}
   15478:	add	fp, sp, #8
   1547c:	sub	sp, sp, #36	; 0x24
   15480:	str	r0, [fp, #-24]	; 0xffffffe8
   15484:	str	r1, [fp, #-28]	; 0xffffffe4
   15488:	str	r2, [fp, #-32]	; 0xffffffe0
   1548c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15490:	add	r3, r3, #52	; 0x34
   15494:	add	r3, r3, #8
   15498:	str	r3, [fp, #-16]
   1549c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154a0:	ldr	r4, [r3, #48]	; 0x30
   154a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154a8:	ldr	r0, [r3, #40]	; 0x28
   154ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154b0:	ldr	r2, [r3, #28]
   154b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   154b8:	add	r2, r2, r3
   154bc:	mov	r3, #1
   154c0:	str	r3, [sp]
   154c4:	mov	r3, #1
   154c8:	ldr	r1, [fp, #-16]
   154cc:	blx	r4
   154d0:	mov	r3, r0
   154d4:	cmp	r3, #0
   154d8:	beq	154e4 <flatcc_builder_default_alloc@@Base+0x2d4>
   154dc:	mvn	r3, #0
   154e0:	b	154f4 <flatcc_builder_default_alloc@@Base+0x2e4>
   154e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   154e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154ec:	bl	153d8 <flatcc_builder_default_alloc@@Base+0x1c8>
   154f0:	mov	r3, #0
   154f4:	mov	r0, r3
   154f8:	sub	sp, fp, #8
   154fc:	pop	{r4, fp, pc}
   15500:	push	{fp, lr}
   15504:	add	fp, sp, #4
   15508:	sub	sp, sp, #16
   1550c:	str	r0, [fp, #-16]
   15510:	str	r1, [fp, #-20]	; 0xffffffec
   15514:	ldr	r3, [fp, #-16]
   15518:	ldr	r3, [r3, #20]
   1551c:	str	r3, [fp, #-8]
   15520:	ldr	r3, [fp, #-16]
   15524:	ldr	r2, [r3, #20]
   15528:	ldr	r3, [fp, #-20]	; 0xffffffec
   1552c:	add	r2, r2, r3
   15530:	ldr	r3, [fp, #-16]
   15534:	str	r2, [r3, #20]
   15538:	ldr	r3, [fp, #-16]
   1553c:	ldr	r2, [r3, #20]
   15540:	ldr	r3, [fp, #-16]
   15544:	ldr	r3, [r3, #24]
   15548:	cmp	r2, r3
   1554c:	bcc	15580 <flatcc_builder_default_alloc@@Base+0x370>
   15550:	ldr	r3, [fp, #-16]
   15554:	ldr	r3, [r3, #20]
   15558:	add	r3, r3, #1
   1555c:	mvn	r2, #3
   15560:	mov	r1, r3
   15564:	ldr	r0, [fp, #-16]
   15568:	bl	15474 <flatcc_builder_default_alloc@@Base+0x264>
   1556c:	mov	r3, r0
   15570:	cmp	r3, #0
   15574:	beq	15580 <flatcc_builder_default_alloc@@Base+0x370>
   15578:	mov	r3, #0
   1557c:	b	15590 <flatcc_builder_default_alloc@@Base+0x380>
   15580:	ldr	r3, [fp, #-16]
   15584:	ldr	r2, [r3, #16]
   15588:	ldr	r3, [fp, #-8]
   1558c:	add	r3, r2, r3
   15590:	mov	r0, r3
   15594:	sub	sp, fp, #4
   15598:	pop	{fp, pc}
   1559c:	push	{fp, lr}
   155a0:	add	fp, sp, #4
   155a4:	sub	sp, sp, #8
   155a8:	str	r0, [fp, #-8]
   155ac:	str	r1, [fp, #-12]
   155b0:	ldr	r3, [fp, #-8]
   155b4:	ldr	r2, [r3, #20]
   155b8:	ldr	r3, [fp, #-12]
   155bc:	sub	r2, r2, r3
   155c0:	ldr	r3, [fp, #-8]
   155c4:	str	r2, [r3, #20]
   155c8:	ldr	r3, [fp, #-8]
   155cc:	ldr	r2, [r3, #16]
   155d0:	ldr	r3, [fp, #-8]
   155d4:	ldr	r3, [r3, #20]
   155d8:	add	r3, r2, r3
   155dc:	ldr	r2, [fp, #-12]
   155e0:	mov	r1, #0
   155e4:	mov	r0, r3
   155e8:	bl	11ffc <memset@plt>
   155ec:	nop			; (mov r0, r0)
   155f0:	sub	sp, fp, #4
   155f4:	pop	{fp, pc}
   155f8:	push	{fp, lr}
   155fc:	add	fp, sp, #4
   15600:	sub	sp, sp, #24
   15604:	str	r0, [fp, #-16]
   15608:	str	r1, [fp, #-20]	; 0xffffffec
   1560c:	str	r2, [fp, #-24]	; 0xffffffe8
   15610:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15614:	ldr	r0, [fp, #-16]
   15618:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   1561c:	str	r0, [fp, #-8]
   15620:	ldr	r3, [fp, #-8]
   15624:	cmp	r3, #0
   15628:	bne	15634 <flatcc_builder_default_alloc@@Base+0x424>
   1562c:	mov	r3, #0
   15630:	b	15648 <flatcc_builder_default_alloc@@Base+0x438>
   15634:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15638:	ldr	r1, [fp, #-20]	; 0xffffffec
   1563c:	ldr	r0, [fp, #-8]
   15640:	bl	11f90 <memcpy@plt>
   15644:	ldr	r3, [fp, #-8]
   15648:	mov	r0, r3
   1564c:	sub	sp, fp, #4
   15650:	pop	{fp, pc}
   15654:	push	{fp, lr}
   15658:	add	fp, sp, #4
   1565c:	sub	sp, sp, #24
   15660:	str	r0, [fp, #-16]
   15664:	str	r1, [fp, #-20]	; 0xffffffec
   15668:	strh	r2, [fp, #-22]	; 0xffffffea
   1566c:	strh	r3, [fp, #-24]	; 0xffffffe8
   15670:	ldr	r3, [fp, #-16]
   15674:	ldr	r2, [r3, #20]
   15678:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1567c:	add	r3, r2, r3
   15680:	sub	r3, r3, #1
   15684:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15688:	rsb	r2, r2, #0
   1568c:	and	r3, r3, r2
   15690:	str	r3, [fp, #-8]
   15694:	ldr	r2, [fp, #-8]
   15698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1569c:	add	r2, r2, r3
   156a0:	ldr	r3, [fp, #-16]
   156a4:	str	r2, [r3, #20]
   156a8:	ldr	r3, [fp, #-16]
   156ac:	ldr	r2, [r3, #20]
   156b0:	ldr	r3, [fp, #-16]
   156b4:	ldr	r3, [r3, #24]
   156b8:	cmp	r2, r3
   156bc:	bcc	156f0 <flatcc_builder_default_alloc@@Base+0x4e0>
   156c0:	ldr	r3, [fp, #-16]
   156c4:	ldr	r3, [r3, #20]
   156c8:	add	r3, r3, #1
   156cc:	ldr	r2, [pc, #136]	; 1575c <flatcc_builder_default_alloc@@Base+0x54c>
   156d0:	mov	r1, r3
   156d4:	ldr	r0, [fp, #-16]
   156d8:	bl	15474 <flatcc_builder_default_alloc@@Base+0x264>
   156dc:	mov	r3, r0
   156e0:	cmp	r3, #0
   156e4:	beq	156f0 <flatcc_builder_default_alloc@@Base+0x4e0>
   156e8:	mov	r3, #0
   156ec:	b	15750 <flatcc_builder_default_alloc@@Base+0x540>
   156f0:	ldr	r3, [fp, #-16]
   156f4:	ldr	r2, [r3, #4]
   156f8:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   156fc:	lsl	r3, r3, #1
   15700:	add	r3, r2, r3
   15704:	ldr	r2, [fp, #-8]
   15708:	uxth	r2, r2
   1570c:	add	r2, r2, #4
   15710:	uxth	r2, r2
   15714:	strh	r2, [r3]
   15718:	ldr	r3, [fp, #-16]
   1571c:	ldrh	r3, [r3, #8]
   15720:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   15724:	cmp	r2, r3
   15728:	bcc	15740 <flatcc_builder_default_alloc@@Base+0x530>
   1572c:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   15730:	add	r3, r3, #1
   15734:	uxth	r2, r3
   15738:	ldr	r3, [fp, #-16]
   1573c:	strh	r2, [r3, #8]
   15740:	ldr	r3, [fp, #-16]
   15744:	ldr	r2, [r3, #16]
   15748:	ldr	r3, [fp, #-8]
   1574c:	add	r3, r2, r3
   15750:	mov	r0, r3
   15754:	sub	sp, fp, #4
   15758:	pop	{fp, pc}
   1575c:	strdeq	pc, [r0], -ip
   15760:	push	{fp, lr}
   15764:	add	fp, sp, #4
   15768:	sub	sp, sp, #16
   1576c:	str	r0, [fp, #-16]
   15770:	mov	r3, r1
   15774:	strh	r3, [fp, #-18]	; 0xffffffee
   15778:	ldr	r3, [fp, #-16]
   1577c:	ldr	r3, [r3, #20]
   15780:	add	r3, r3, #3
   15784:	bic	r3, r3, #3
   15788:	str	r3, [fp, #-8]
   1578c:	ldr	r3, [fp, #-8]
   15790:	add	r2, r3, #4
   15794:	ldr	r3, [fp, #-16]
   15798:	str	r2, [r3, #20]
   1579c:	ldr	r3, [fp, #-16]
   157a0:	ldr	r2, [r3, #20]
   157a4:	ldr	r3, [fp, #-16]
   157a8:	ldr	r3, [r3, #24]
   157ac:	cmp	r2, r3
   157b0:	bls	157e0 <flatcc_builder_default_alloc@@Base+0x5d0>
   157b4:	ldr	r3, [fp, #-16]
   157b8:	ldr	r3, [r3, #20]
   157bc:	ldr	r2, [pc, #168]	; 1586c <flatcc_builder_default_alloc@@Base+0x65c>
   157c0:	mov	r1, r3
   157c4:	ldr	r0, [fp, #-16]
   157c8:	bl	15474 <flatcc_builder_default_alloc@@Base+0x264>
   157cc:	mov	r3, r0
   157d0:	cmp	r3, #0
   157d4:	beq	157e0 <flatcc_builder_default_alloc@@Base+0x5d0>
   157d8:	mov	r3, #0
   157dc:	b	15860 <flatcc_builder_default_alloc@@Base+0x650>
   157e0:	ldr	r3, [fp, #-16]
   157e4:	ldr	r2, [r3, #4]
   157e8:	ldrh	r3, [fp, #-18]	; 0xffffffee
   157ec:	lsl	r3, r3, #1
   157f0:	add	r3, r2, r3
   157f4:	ldr	r2, [fp, #-8]
   157f8:	uxth	r2, r2
   157fc:	add	r2, r2, #4
   15800:	uxth	r2, r2
   15804:	strh	r2, [r3]
   15808:	ldr	r3, [fp, #-16]
   1580c:	ldrh	r3, [r3, #8]
   15810:	ldrh	r2, [fp, #-18]	; 0xffffffee
   15814:	cmp	r2, r3
   15818:	bcc	15830 <flatcc_builder_default_alloc@@Base+0x620>
   1581c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   15820:	add	r3, r3, #1
   15824:	uxth	r2, r3
   15828:	ldr	r3, [fp, #-16]
   1582c:	strh	r2, [r3, #8]
   15830:	ldr	r3, [fp, #-16]
   15834:	ldr	r3, [r3]
   15838:	add	r1, r3, #2
   1583c:	ldr	r2, [fp, #-16]
   15840:	str	r1, [r2]
   15844:	ldr	r2, [fp, #-8]
   15848:	uxth	r2, r2
   1584c:	strh	r2, [r3]
   15850:	ldr	r3, [fp, #-16]
   15854:	ldr	r2, [r3, #16]
   15858:	ldr	r3, [fp, #-8]
   1585c:	add	r3, r2, r3
   15860:	mov	r0, r3
   15864:	sub	sp, fp, #4
   15868:	pop	{fp, pc}
   1586c:	strdeq	pc, [r0], -ip
   15870:	push	{r4, fp, lr}
   15874:	add	fp, sp, #8
   15878:	sub	sp, sp, #36	; 0x24
   1587c:	str	r0, [fp, #-24]	; 0xffffffe8
   15880:	str	r1, [fp, #-28]	; 0xffffffe4
   15884:	str	r2, [fp, #-32]	; 0xffffffe0
   15888:	str	r3, [fp, #-36]	; 0xffffffdc
   1588c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15890:	add	r2, r3, #52	; 0x34
   15894:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15898:	lsl	r3, r3, #3
   1589c:	add	r3, r2, r3
   158a0:	str	r3, [fp, #-16]
   158a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   158a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158ac:	add	r2, r2, r3
   158b0:	ldr	r3, [fp, #-16]
   158b4:	ldr	r3, [r3, #4]
   158b8:	cmp	r2, r3
   158bc:	bls	1591c <flatcc_builder_default_alloc@@Base+0x70c>
   158c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158c4:	ldr	r4, [r3, #48]	; 0x30
   158c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158cc:	ldr	r0, [r3, #40]	; 0x28
   158d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   158d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158d8:	add	r2, r2, r3
   158dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   158e0:	str	r3, [sp]
   158e4:	ldr	r3, [fp, #4]
   158e8:	ldr	r1, [fp, #-16]
   158ec:	blx	r4
   158f0:	mov	r3, r0
   158f4:	cmp	r3, #0
   158f8:	beq	1591c <flatcc_builder_default_alloc@@Base+0x70c>
   158fc:	ldr	r3, [pc, #56]	; 1593c <flatcc_builder_default_alloc@@Base+0x72c>
   15900:	add	r3, pc, r3
   15904:	mov	r2, #308	; 0x134
   15908:	ldr	r1, [pc, #48]	; 15940 <flatcc_builder_default_alloc@@Base+0x730>
   1590c:	add	r1, pc, r1
   15910:	ldr	r0, [pc, #44]	; 15944 <flatcc_builder_default_alloc@@Base+0x734>
   15914:	add	r0, pc, r0
   15918:	bl	1202c <__assert_fail@plt>
   1591c:	ldr	r3, [fp, #-16]
   15920:	ldr	r3, [r3]
   15924:	mov	r2, r3
   15928:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1592c:	add	r3, r2, r3
   15930:	mov	r0, r3
   15934:	sub	sp, fp, #8
   15938:	pop	{r4, fp, pc}
   1593c:	andeq	r7, r0, r0, asr #3
   15940:	andeq	r6, r0, r0, lsl #27
   15944:	ldrdeq	r6, [r0], -r8
   15948:	push	{fp, lr}
   1594c:	add	fp, sp, #4
   15950:	sub	sp, sp, #24
   15954:	str	r0, [fp, #-16]
   15958:	str	r1, [fp, #-20]	; 0xffffffec
   1595c:	ldr	r3, [fp, #-16]
   15960:	ldr	r3, [r3, #32]
   15964:	ldr	r2, [r3, #16]
   15968:	ldr	r3, [fp, #-16]
   1596c:	ldr	r3, [r3, #32]
   15970:	ldrh	r3, [r3, #28]
   15974:	lsl	r3, r3, #1
   15978:	add	r3, r2, r3
   1597c:	str	r3, [fp, #-8]
   15980:	ldr	r3, [fp, #-20]	; 0xffffffec
   15984:	add	r3, r3, #2
   15988:	lsl	r3, r3, #1
   1598c:	str	r3, [fp, #-12]
   15990:	mov	r3, #1
   15994:	str	r3, [sp]
   15998:	ldr	r3, [fp, #-12]
   1599c:	ldr	r2, [fp, #-8]
   159a0:	mov	r1, #0
   159a4:	ldr	r0, [fp, #-16]
   159a8:	bl	15870 <flatcc_builder_default_alloc@@Base+0x660>
   159ac:	mov	r2, r0
   159b0:	ldr	r3, [fp, #-16]
   159b4:	str	r2, [r3, #4]
   159b8:	ldr	r3, [fp, #-16]
   159bc:	ldr	r3, [r3, #4]
   159c0:	cmp	r3, #0
   159c4:	bne	159d0 <flatcc_builder_default_alloc@@Base+0x7c0>
   159c8:	mvn	r3, #0
   159cc:	b	15a48 <flatcc_builder_default_alloc@@Base+0x838>
   159d0:	ldr	r3, [fp, #-16]
   159d4:	ldr	r3, [r3, #4]
   159d8:	add	r2, r3, #4
   159dc:	ldr	r3, [fp, #-16]
   159e0:	str	r2, [r3, #4]
   159e4:	ldr	r3, [fp, #-16]
   159e8:	ldr	r3, [r3, #32]
   159ec:	ldr	r3, [r3, #20]
   159f0:	str	r3, [fp, #-8]
   159f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   159f8:	lsl	r3, r3, #1
   159fc:	add	r3, r3, #1
   15a00:	str	r3, [fp, #-12]
   15a04:	mov	r3, #0
   15a08:	str	r3, [sp]
   15a0c:	ldr	r3, [fp, #-12]
   15a10:	ldr	r2, [fp, #-8]
   15a14:	mov	r1, #3
   15a18:	ldr	r0, [fp, #-16]
   15a1c:	bl	15870 <flatcc_builder_default_alloc@@Base+0x660>
   15a20:	mov	r2, r0
   15a24:	ldr	r3, [fp, #-16]
   15a28:	str	r2, [r3]
   15a2c:	ldr	r3, [fp, #-16]
   15a30:	ldr	r3, [r3]
   15a34:	cmp	r3, #0
   15a38:	bne	15a44 <flatcc_builder_default_alloc@@Base+0x834>
   15a3c:	mvn	r3, #0
   15a40:	b	15a48 <flatcc_builder_default_alloc@@Base+0x838>
   15a44:	mov	r3, #0
   15a48:	mov	r0, r3
   15a4c:	sub	sp, fp, #4
   15a50:	pop	{fp, pc}
   15a54:	push	{r4, fp, lr}
   15a58:	add	fp, sp, #8
   15a5c:	sub	sp, sp, #36	; 0x24
   15a60:	str	r0, [fp, #-32]	; 0xffffffe0
   15a64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a68:	add	r3, r3, #52	; 0x34
   15a6c:	add	r3, r3, #40	; 0x28
   15a70:	str	r3, [fp, #-24]	; 0xffffffe8
   15a74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a78:	ldr	r3, [r3, #124]	; 0x7c
   15a7c:	cmp	r3, #0
   15a80:	beq	15aa4 <flatcc_builder_default_alloc@@Base+0x894>
   15a84:	ldr	r3, [pc, #280]	; 15ba4 <flatcc_builder_default_alloc@@Base+0x994>
   15a88:	add	r3, pc, r3
   15a8c:	ldr	r2, [pc, #276]	; 15ba8 <flatcc_builder_default_alloc@@Base+0x998>
   15a90:	ldr	r1, [pc, #276]	; 15bac <flatcc_builder_default_alloc@@Base+0x99c>
   15a94:	add	r1, pc, r1
   15a98:	ldr	r0, [pc, #272]	; 15bb0 <flatcc_builder_default_alloc@@Base+0x9a0>
   15a9c:	add	r0, pc, r0
   15aa0:	bl	1202c <__assert_fail@plt>
   15aa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15aa8:	ldr	r2, [r3, #124]	; 0x7c
   15aac:	mov	r3, #0
   15ab0:	str	r3, [sp]
   15ab4:	mov	r3, #16
   15ab8:	mov	r1, #6
   15abc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15ac0:	bl	15870 <flatcc_builder_default_alloc@@Base+0x660>
   15ac4:	mov	r3, r0
   15ac8:	cmp	r3, #0
   15acc:	bne	15ad8 <flatcc_builder_default_alloc@@Base+0x8c8>
   15ad0:	mvn	r3, #0
   15ad4:	b	15b98 <flatcc_builder_default_alloc@@Base+0x988>
   15ad8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15adc:	mov	r2, #16
   15ae0:	str	r2, [r3, #124]	; 0x7c
   15ae4:	mov	r3, #256	; 0x100
   15ae8:	str	r3, [fp, #-16]
   15aec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15af0:	ldr	r4, [r3, #48]	; 0x30
   15af4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15af8:	ldr	r0, [r3, #40]	; 0x28
   15afc:	mov	r3, #5
   15b00:	str	r3, [sp]
   15b04:	mov	r3, #1
   15b08:	ldr	r2, [fp, #-16]
   15b0c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15b10:	blx	r4
   15b14:	mov	r3, r0
   15b18:	cmp	r3, #0
   15b1c:	beq	15b34 <flatcc_builder_default_alloc@@Base+0x924>
   15b20:	mvn	r3, #0
   15b24:	b	15b98 <flatcc_builder_default_alloc@@Base+0x988>
   15b28:	ldr	r3, [fp, #-16]
   15b2c:	lsl	r3, r3, #1
   15b30:	str	r3, [fp, #-16]
   15b34:	ldr	r3, [fp, #-16]
   15b38:	lsl	r2, r3, #1
   15b3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b40:	ldr	r3, [r3, #4]
   15b44:	cmp	r2, r3
   15b48:	bls	15b28 <flatcc_builder_default_alloc@@Base+0x918>
   15b4c:	ldr	r3, [fp, #-16]
   15b50:	lsr	r3, r3, #2
   15b54:	str	r3, [fp, #-16]
   15b58:	mov	r3, #0
   15b5c:	str	r3, [fp, #-20]	; 0xffffffec
   15b60:	b	15b70 <flatcc_builder_default_alloc@@Base+0x960>
   15b64:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b68:	add	r3, r3, #1
   15b6c:	str	r3, [fp, #-20]	; 0xffffffec
   15b70:	mov	r2, #1
   15b74:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b78:	lsl	r2, r2, r3
   15b7c:	ldr	r3, [fp, #-16]
   15b80:	cmp	r2, r3
   15b84:	bcc	15b64 <flatcc_builder_default_alloc@@Base+0x954>
   15b88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b90:	str	r2, [r3, #116]	; 0x74
   15b94:	mov	r3, #0
   15b98:	mov	r0, r3
   15b9c:	sub	sp, fp, #8
   15ba0:	pop	{r4, fp, pc}
   15ba4:	andeq	r7, r0, ip, lsr #32
   15ba8:	andeq	r0, r0, r6, asr r1
   15bac:	strdeq	r6, [r0], -r8
   15bb0:	andeq	r6, r0, r4, asr ip
   15bb4:	push	{fp, lr}
   15bb8:	add	fp, sp, #4
   15bbc:	sub	sp, sp, #16
   15bc0:	str	r0, [fp, #-16]
   15bc4:	str	r1, [fp, #-20]	; 0xffffffec
   15bc8:	ldr	r3, [fp, #-16]
   15bcc:	ldr	r3, [r3, #116]	; 0x74
   15bd0:	cmp	r3, #0
   15bd4:	bne	15bf4 <flatcc_builder_default_alloc@@Base+0x9e4>
   15bd8:	ldr	r0, [fp, #-16]
   15bdc:	bl	15a54 <flatcc_builder_default_alloc@@Base+0x844>
   15be0:	mov	r3, r0
   15be4:	cmp	r3, #0
   15be8:	beq	15bf4 <flatcc_builder_default_alloc@@Base+0x9e4>
   15bec:	mov	r3, #0
   15bf0:	b	15c20 <flatcc_builder_default_alloc@@Base+0xa10>
   15bf4:	ldr	r3, [fp, #-16]
   15bf8:	ldr	r3, [r3, #92]	; 0x5c
   15bfc:	str	r3, [fp, #-8]
   15c00:	ldr	r3, [fp, #-16]
   15c04:	ldr	r3, [r3, #116]	; 0x74
   15c08:	rsb	r3, r3, #32
   15c0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15c10:	lsr	r3, r2, r3
   15c14:	lsl	r3, r3, #2
   15c18:	ldr	r2, [fp, #-8]
   15c1c:	add	r3, r2, r3
   15c20:	mov	r0, r3
   15c24:	sub	sp, fp, #4
   15c28:	pop	{fp, pc}

00015c2c <flatcc_builder_flush_vtable_cache@@Base>:
   15c2c:	push	{fp, lr}
   15c30:	add	fp, sp, #4
   15c34:	sub	sp, sp, #16
   15c38:	str	r0, [fp, #-16]
   15c3c:	ldr	r3, [fp, #-16]
   15c40:	add	r3, r3, #52	; 0x34
   15c44:	add	r3, r3, #40	; 0x28
   15c48:	str	r3, [fp, #-8]
   15c4c:	ldr	r3, [fp, #-16]
   15c50:	ldr	r3, [r3, #116]	; 0x74
   15c54:	cmp	r3, #0
   15c58:	beq	15c94 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   15c5c:	ldr	r3, [fp, #-8]
   15c60:	ldr	r0, [r3]
   15c64:	ldr	r3, [fp, #-8]
   15c68:	ldr	r3, [r3, #4]
   15c6c:	mov	r2, r3
   15c70:	mov	r1, #0
   15c74:	bl	11ffc <memset@plt>
   15c78:	ldr	r3, [fp, #-16]
   15c7c:	mov	r2, #16
   15c80:	str	r2, [r3, #124]	; 0x7c
   15c84:	ldr	r3, [fp, #-16]
   15c88:	mov	r2, #0
   15c8c:	str	r2, [r3, #120]	; 0x78
   15c90:	b	15c98 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   15c94:	nop			; (mov r0, r0)
   15c98:	sub	sp, fp, #4
   15c9c:	pop	{fp, pc}

00015ca0 <flatcc_builder_custom_init@@Base>:
   15ca0:	push	{r4, fp, lr}
   15ca4:	add	fp, sp, #8
   15ca8:	sub	sp, sp, #20
   15cac:	str	r0, [fp, #-16]
   15cb0:	str	r1, [fp, #-20]	; 0xffffffec
   15cb4:	str	r2, [fp, #-24]	; 0xffffffe8
   15cb8:	str	r3, [fp, #-28]	; 0xffffffe4
   15cbc:	ldr	r4, [pc, #152]	; 15d5c <flatcc_builder_custom_init@@Base+0xbc>
   15cc0:	add	r4, pc, r4
   15cc4:	mov	r2, #232	; 0xe8
   15cc8:	mov	r1, #0
   15ccc:	ldr	r0, [fp, #-16]
   15cd0:	bl	11ffc <memset@plt>
   15cd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15cd8:	cmp	r3, #0
   15cdc:	bne	15d04 <flatcc_builder_custom_init@@Base+0x64>
   15ce0:	ldr	r3, [fp, #-16]
   15ce4:	mov	r2, #1
   15ce8:	str	r2, [r3, #184]	; 0xb8
   15cec:	ldr	r3, [pc, #108]	; 15d60 <flatcc_builder_custom_init@@Base+0xc0>
   15cf0:	ldr	r3, [r4, r3]
   15cf4:	str	r3, [fp, #-20]	; 0xffffffec
   15cf8:	ldr	r3, [fp, #-16]
   15cfc:	add	r3, r3, #188	; 0xbc
   15d00:	str	r3, [fp, #-24]	; 0xffffffe8
   15d04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d08:	cmp	r3, #0
   15d0c:	bne	15d1c <flatcc_builder_custom_init@@Base+0x7c>
   15d10:	ldr	r3, [pc, #76]	; 15d64 <flatcc_builder_custom_init@@Base+0xc4>
   15d14:	ldr	r3, [r4, r3]
   15d18:	str	r3, [fp, #-28]	; 0xffffffe4
   15d1c:	ldr	r3, [fp, #-16]
   15d20:	ldr	r2, [fp, #4]
   15d24:	str	r2, [r3, #40]	; 0x28
   15d28:	ldr	r3, [fp, #-16]
   15d2c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15d30:	str	r2, [r3, #48]	; 0x30
   15d34:	ldr	r3, [fp, #-16]
   15d38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15d3c:	str	r2, [r3, #36]	; 0x24
   15d40:	ldr	r3, [fp, #-16]
   15d44:	ldr	r2, [fp, #-20]	; 0xffffffec
   15d48:	str	r2, [r3, #44]	; 0x2c
   15d4c:	mov	r3, #0
   15d50:	mov	r0, r3
   15d54:	sub	sp, fp, #8
   15d58:	pop	{r4, fp, pc}
   15d5c:	andeq	r8, r1, r8, lsr r3
   15d60:	andeq	r0, r0, r8, asr r0
   15d64:	andeq	r0, r0, r4, asr r0

00015d68 <flatcc_builder_init@@Base>:
   15d68:	push	{fp, lr}
   15d6c:	add	fp, sp, #4
   15d70:	sub	sp, sp, #16
   15d74:	str	r0, [fp, #-8]
   15d78:	mov	r3, #0
   15d7c:	str	r3, [sp]
   15d80:	mov	r3, #0
   15d84:	mov	r2, #0
   15d88:	mov	r1, #0
   15d8c:	ldr	r0, [fp, #-8]
   15d90:	bl	15ca0 <flatcc_builder_custom_init@@Base>
   15d94:	mov	r3, r0
   15d98:	mov	r0, r3
   15d9c:	sub	sp, fp, #4
   15da0:	pop	{fp, pc}

00015da4 <flatcc_builder_custom_reset@@Base>:
   15da4:	push	{r4, fp, lr}
   15da8:	add	fp, sp, #8
   15dac:	sub	sp, sp, #36	; 0x24
   15db0:	str	r0, [fp, #-24]	; 0xffffffe8
   15db4:	str	r1, [fp, #-28]	; 0xffffffe4
   15db8:	str	r2, [fp, #-32]	; 0xffffffe0
   15dbc:	mov	r3, #0
   15dc0:	str	r3, [fp, #-16]
   15dc4:	b	15ea0 <flatcc_builder_custom_reset@@Base+0xfc>
   15dc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15dcc:	add	r2, r3, #52	; 0x34
   15dd0:	ldr	r3, [fp, #-16]
   15dd4:	lsl	r3, r3, #3
   15dd8:	add	r3, r2, r3
   15ddc:	str	r3, [fp, #-20]	; 0xffffffec
   15de0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15de4:	ldr	r3, [r3]
   15de8:	cmp	r3, #0
   15dec:	beq	15e64 <flatcc_builder_custom_reset@@Base+0xc0>
   15df0:	ldr	r3, [fp, #-16]
   15df4:	cmp	r3, #5
   15df8:	beq	15e44 <flatcc_builder_custom_reset@@Base+0xa0>
   15dfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e00:	cmp	r3, #0
   15e04:	beq	15e44 <flatcc_builder_custom_reset@@Base+0xa0>
   15e08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e0c:	ldr	r4, [r3, #48]	; 0x30
   15e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e14:	ldr	r0, [r3, #40]	; 0x28
   15e18:	ldr	r3, [fp, #-16]
   15e1c:	str	r3, [sp]
   15e20:	mov	r3, #1
   15e24:	mov	r2, #1
   15e28:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e2c:	blx	r4
   15e30:	mov	r3, r0
   15e34:	cmp	r3, #0
   15e38:	beq	15e44 <flatcc_builder_custom_reset@@Base+0xa0>
   15e3c:	mvn	r3, #0
   15e40:	b	15fd0 <flatcc_builder_custom_reset@@Base+0x22c>
   15e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e48:	ldr	r0, [r3]
   15e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e50:	ldr	r3, [r3, #4]
   15e54:	mov	r2, r3
   15e58:	mov	r1, #0
   15e5c:	bl	11ffc <memset@plt>
   15e60:	b	15e94 <flatcc_builder_custom_reset@@Base+0xf0>
   15e64:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e68:	ldr	r3, [r3, #4]
   15e6c:	cmp	r3, #0
   15e70:	beq	15e94 <flatcc_builder_custom_reset@@Base+0xf0>
   15e74:	ldr	r3, [pc, #352]	; 15fdc <flatcc_builder_custom_reset@@Base+0x238>
   15e78:	add	r3, pc, r3
   15e7c:	ldr	r2, [pc, #348]	; 15fe0 <flatcc_builder_custom_reset@@Base+0x23c>
   15e80:	ldr	r1, [pc, #348]	; 15fe4 <flatcc_builder_custom_reset@@Base+0x240>
   15e84:	add	r1, pc, r1
   15e88:	ldr	r0, [pc, #344]	; 15fe8 <flatcc_builder_custom_reset@@Base+0x244>
   15e8c:	add	r0, pc, r0
   15e90:	bl	1202c <__assert_fail@plt>
   15e94:	ldr	r3, [fp, #-16]
   15e98:	add	r3, r3, #1
   15e9c:	str	r3, [fp, #-16]
   15ea0:	ldr	r3, [fp, #-16]
   15ea4:	cmp	r3, #7
   15ea8:	ble	15dc8 <flatcc_builder_custom_reset@@Base+0x24>
   15eac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15eb0:	mov	r2, #0
   15eb4:	str	r2, [r3, #120]	; 0x78
   15eb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ebc:	ldr	r3, [r3, #124]	; 0x7c
   15ec0:	cmp	r3, #0
   15ec4:	beq	15ed4 <flatcc_builder_custom_reset@@Base+0x130>
   15ec8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ecc:	mov	r2, #16
   15ed0:	str	r2, [r3, #124]	; 0x7c
   15ed4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ed8:	mov	r2, #0
   15edc:	strh	r2, [r3, #128]	; 0x80
   15ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ee4:	mov	r2, #0
   15ee8:	str	r2, [r3, #136]	; 0x88
   15eec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ef0:	mov	r2, #0
   15ef4:	str	r2, [r3, #140]	; 0x8c
   15ef8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15efc:	mov	r2, #0
   15f00:	str	r2, [r3, #156]	; 0x9c
   15f04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f08:	mov	r2, #0
   15f0c:	str	r2, [r3, #160]	; 0xa0
   15f10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f14:	mov	r2, #0
   15f18:	str	r2, [r3, #20]
   15f1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f20:	mov	r2, #0
   15f24:	str	r2, [r3, #24]
   15f28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f2c:	mov	r2, #0
   15f30:	str	r2, [r3, #148]	; 0x94
   15f34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f38:	mov	r2, #0
   15f3c:	str	r2, [r3, #152]	; 0x98
   15f40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f44:	ldr	r2, [r3, #60]	; 0x3c
   15f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f4c:	str	r2, [r3, #16]
   15f50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f54:	ldr	r2, [r3, #76]	; 0x4c
   15f58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f5c:	str	r2, [r3]
   15f60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f64:	ldr	r2, [r3, #52]	; 0x34
   15f68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f6c:	str	r2, [r3, #4]
   15f70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f74:	mov	r2, #0
   15f78:	str	r2, [r3, #32]
   15f7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f80:	cmp	r3, #0
   15f84:	beq	15fac <flatcc_builder_custom_reset@@Base+0x208>
   15f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f8c:	mov	r2, #0
   15f90:	str	r2, [r3, #172]	; 0xac
   15f94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f98:	mov	r2, #0
   15f9c:	str	r2, [r3, #176]	; 0xb0
   15fa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15fa4:	mov	r2, #0
   15fa8:	str	r2, [r3, #180]	; 0xb4
   15fac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15fb0:	ldr	r3, [r3, #184]	; 0xb8
   15fb4:	cmp	r3, #0
   15fb8:	beq	15fcc <flatcc_builder_custom_reset@@Base+0x228>
   15fbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15fc0:	add	r3, r3, #188	; 0xbc
   15fc4:	mov	r0, r3
   15fc8:	bl	1b8c8 <flatcc_emitter_reset@@Base>
   15fcc:	mov	r3, #0
   15fd0:	mov	r0, r3
   15fd4:	sub	sp, fp, #8
   15fd8:	pop	{r4, fp, pc}
   15fdc:	andeq	r6, r0, r8, asr ip
   15fe0:			; <UNDEFINED> instruction: 0x000001b2
   15fe4:	andeq	r6, r0, r8, lsl #16
   15fe8:	andeq	r6, r0, r4, ror r8

00015fec <flatcc_builder_reset@@Base>:
   15fec:	push	{fp, lr}
   15ff0:	add	fp, sp, #4
   15ff4:	sub	sp, sp, #8
   15ff8:	str	r0, [fp, #-8]
   15ffc:	mov	r2, #0
   16000:	mov	r1, #0
   16004:	ldr	r0, [fp, #-8]
   16008:	bl	15da4 <flatcc_builder_custom_reset@@Base>
   1600c:	mov	r3, r0
   16010:	mov	r0, r3
   16014:	sub	sp, fp, #4
   16018:	pop	{fp, pc}

0001601c <flatcc_builder_clear@@Base>:
   1601c:	push	{r4, fp, lr}
   16020:	add	fp, sp, #8
   16024:	sub	sp, sp, #28
   16028:	str	r0, [fp, #-24]	; 0xffffffe8
   1602c:	mov	r3, #0
   16030:	str	r3, [fp, #-16]
   16034:	b	16084 <flatcc_builder_clear@@Base+0x68>
   16038:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1603c:	add	r2, r3, #52	; 0x34
   16040:	ldr	r3, [fp, #-16]
   16044:	lsl	r3, r3, #3
   16048:	add	r3, r2, r3
   1604c:	str	r3, [fp, #-20]	; 0xffffffec
   16050:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16054:	ldr	r4, [r3, #48]	; 0x30
   16058:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1605c:	ldr	r0, [r3, #40]	; 0x28
   16060:	ldr	r3, [fp, #-16]
   16064:	str	r3, [sp]
   16068:	mov	r3, #0
   1606c:	mov	r2, #0
   16070:	ldr	r1, [fp, #-20]	; 0xffffffec
   16074:	blx	r4
   16078:	ldr	r3, [fp, #-16]
   1607c:	add	r3, r3, #1
   16080:	str	r3, [fp, #-16]
   16084:	ldr	r3, [fp, #-16]
   16088:	cmp	r3, #7
   1608c:	ble	16038 <flatcc_builder_clear@@Base+0x1c>
   16090:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16094:	ldr	r3, [r3, #184]	; 0xb8
   16098:	cmp	r3, #0
   1609c:	beq	160b0 <flatcc_builder_clear@@Base+0x94>
   160a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   160a4:	add	r3, r3, #188	; 0xbc
   160a8:	mov	r0, r3
   160ac:	bl	1ba54 <flatcc_emitter_clear@@Base>
   160b0:	mov	r2, #232	; 0xe8
   160b4:	mov	r1, #0
   160b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   160bc:	bl	11ffc <memset@plt>
   160c0:	nop			; (mov r0, r0)
   160c4:	sub	sp, fp, #8
   160c8:	pop	{r4, fp, pc}
   160cc:	push	{fp}		; (str fp, [sp, #-4]!)
   160d0:	add	fp, sp, #0
   160d4:	sub	sp, sp, #12
   160d8:	str	r0, [fp, #-8]
   160dc:	mov	r3, r1
   160e0:	strh	r3, [fp, #-10]
   160e4:	ldr	r3, [fp, #-8]
   160e8:	ldrh	r3, [r3, #128]	; 0x80
   160ec:	ldrh	r2, [fp, #-10]
   160f0:	cmp	r2, r3
   160f4:	bls	16104 <flatcc_builder_clear@@Base+0xe8>
   160f8:	ldr	r3, [fp, #-8]
   160fc:	ldrh	r2, [fp, #-10]
   16100:	strh	r2, [r3, #128]	; 0x80
   16104:	nop			; (mov r0, r0)
   16108:	add	sp, fp, #0
   1610c:	pop	{fp}		; (ldr fp, [sp], #4)
   16110:	bx	lr
   16114:	push	{fp}		; (str fp, [sp, #-4]!)
   16118:	add	fp, sp, #0
   1611c:	sub	sp, sp, #12
   16120:	str	r0, [fp, #-8]
   16124:	mov	r3, r1
   16128:	strh	r3, [fp, #-10]
   1612c:	ldr	r3, [fp, #-8]
   16130:	ldrh	r3, [r3]
   16134:	ldrh	r2, [fp, #-10]
   16138:	cmp	r2, r3
   1613c:	bls	1614c <flatcc_builder_clear@@Base+0x130>
   16140:	ldr	r3, [fp, #-8]
   16144:	ldrh	r2, [fp, #-10]
   16148:	strh	r2, [r3]
   1614c:	nop			; (mov r0, r0)
   16150:	add	sp, fp, #0
   16154:	pop	{fp}		; (ldr fp, [sp], #4)
   16158:	bx	lr

0001615c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1615c:	push	{fp, lr}
   16160:	add	fp, sp, #4
   16164:	sub	sp, sp, #24
   16168:	str	r0, [fp, #-16]
   1616c:	str	r1, [fp, #-20]	; 0xffffffec
   16170:	ldr	r3, [fp, #-20]	; 0xffffffec
   16174:	add	r3, r3, #3
   16178:	bic	r3, r3, #3
   1617c:	add	r3, r3, #4
   16180:	str	r3, [fp, #-20]	; 0xffffffec
   16184:	ldr	r3, [fp, #-16]
   16188:	ldr	r2, [r3, #228]	; 0xe4
   1618c:	mov	r3, #0
   16190:	str	r3, [sp]
   16194:	ldr	r3, [fp, #-20]	; 0xffffffec
   16198:	mov	r1, #7
   1619c:	ldr	r0, [fp, #-16]
   161a0:	bl	15870 <flatcc_builder_default_alloc@@Base+0x660>
   161a4:	str	r0, [fp, #-8]
   161a8:	ldr	r3, [fp, #-8]
   161ac:	cmp	r3, #0
   161b0:	bne	161bc <flatcc_builder_enter_user_frame_ptr@@Base+0x60>
   161b4:	mov	r3, #0
   161b8:	b	16214 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   161bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   161c0:	mov	r1, #0
   161c4:	ldr	r0, [fp, #-8]
   161c8:	bl	11ffc <memset@plt>
   161cc:	ldr	r3, [fp, #-8]
   161d0:	add	r2, r3, #4
   161d4:	str	r2, [fp, #-8]
   161d8:	ldr	r2, [fp, #-16]
   161dc:	ldr	r2, [r2, #224]	; 0xe0
   161e0:	str	r2, [r3]
   161e4:	ldr	r3, [fp, #-16]
   161e8:	ldr	r3, [r3, #228]	; 0xe4
   161ec:	add	r2, r3, #4
   161f0:	ldr	r3, [fp, #-16]
   161f4:	str	r2, [r3, #224]	; 0xe0
   161f8:	ldr	r3, [fp, #-16]
   161fc:	ldr	r2, [r3, #228]	; 0xe4
   16200:	ldr	r3, [fp, #-20]	; 0xffffffec
   16204:	add	r2, r2, r3
   16208:	ldr	r3, [fp, #-16]
   1620c:	str	r2, [r3, #228]	; 0xe4
   16210:	ldr	r3, [fp, #-8]
   16214:	mov	r0, r3
   16218:	sub	sp, fp, #4
   1621c:	pop	{fp, pc}

00016220 <flatcc_builder_enter_user_frame@@Base>:
   16220:	push	{fp, lr}
   16224:	add	fp, sp, #4
   16228:	sub	sp, sp, #24
   1622c:	str	r0, [fp, #-16]
   16230:	str	r1, [fp, #-20]	; 0xffffffec
   16234:	ldr	r3, [fp, #-20]	; 0xffffffec
   16238:	add	r3, r3, #3
   1623c:	bic	r3, r3, #3
   16240:	add	r3, r3, #4
   16244:	str	r3, [fp, #-20]	; 0xffffffec
   16248:	ldr	r3, [fp, #-16]
   1624c:	ldr	r2, [r3, #228]	; 0xe4
   16250:	mov	r3, #0
   16254:	str	r3, [sp]
   16258:	ldr	r3, [fp, #-20]	; 0xffffffec
   1625c:	mov	r1, #7
   16260:	ldr	r0, [fp, #-16]
   16264:	bl	15870 <flatcc_builder_default_alloc@@Base+0x660>
   16268:	str	r0, [fp, #-8]
   1626c:	ldr	r3, [fp, #-8]
   16270:	cmp	r3, #0
   16274:	bne	16280 <flatcc_builder_enter_user_frame@@Base+0x60>
   16278:	mov	r3, #0
   1627c:	b	162dc <flatcc_builder_enter_user_frame@@Base+0xbc>
   16280:	ldr	r2, [fp, #-20]	; 0xffffffec
   16284:	mov	r1, #0
   16288:	ldr	r0, [fp, #-8]
   1628c:	bl	11ffc <memset@plt>
   16290:	ldr	r3, [fp, #-8]
   16294:	add	r2, r3, #4
   16298:	str	r2, [fp, #-8]
   1629c:	ldr	r2, [fp, #-16]
   162a0:	ldr	r2, [r2, #224]	; 0xe0
   162a4:	str	r2, [r3]
   162a8:	ldr	r3, [fp, #-16]
   162ac:	ldr	r3, [r3, #228]	; 0xe4
   162b0:	add	r2, r3, #4
   162b4:	ldr	r3, [fp, #-16]
   162b8:	str	r2, [r3, #224]	; 0xe0
   162bc:	ldr	r3, [fp, #-16]
   162c0:	ldr	r2, [r3, #228]	; 0xe4
   162c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   162c8:	add	r2, r2, r3
   162cc:	ldr	r3, [fp, #-16]
   162d0:	str	r2, [r3, #228]	; 0xe4
   162d4:	ldr	r3, [fp, #-16]
   162d8:	ldr	r3, [r3, #224]	; 0xe0
   162dc:	mov	r0, r3
   162e0:	sub	sp, fp, #4
   162e4:	pop	{fp, pc}

000162e8 <flatcc_builder_exit_user_frame@@Base>:
   162e8:	push	{fp, lr}
   162ec:	add	fp, sp, #4
   162f0:	sub	sp, sp, #16
   162f4:	str	r0, [fp, #-16]
   162f8:	ldr	r3, [fp, #-16]
   162fc:	ldr	r3, [r3, #224]	; 0xe0
   16300:	cmp	r3, #0
   16304:	bne	16328 <flatcc_builder_exit_user_frame@@Base+0x40>
   16308:	ldr	r3, [pc, #104]	; 16378 <flatcc_builder_exit_user_frame@@Base+0x90>
   1630c:	add	r3, pc, r3
   16310:	ldr	r2, [pc, #100]	; 1637c <flatcc_builder_exit_user_frame@@Base+0x94>
   16314:	ldr	r1, [pc, #100]	; 16380 <flatcc_builder_exit_user_frame@@Base+0x98>
   16318:	add	r1, pc, r1
   1631c:	ldr	r0, [pc, #96]	; 16384 <flatcc_builder_exit_user_frame@@Base+0x9c>
   16320:	add	r0, pc, r0
   16324:	bl	1202c <__assert_fail@plt>
   16328:	ldr	r3, [fp, #-16]
   1632c:	ldr	r2, [r3, #108]	; 0x6c
   16330:	ldr	r3, [fp, #-16]
   16334:	ldr	r3, [r3, #224]	; 0xe0
   16338:	add	r3, r2, r3
   1633c:	str	r3, [fp, #-8]
   16340:	ldr	r3, [fp, #-16]
   16344:	ldr	r3, [r3, #224]	; 0xe0
   16348:	sub	r2, r3, #4
   1634c:	ldr	r3, [fp, #-16]
   16350:	str	r2, [r3, #228]	; 0xe4
   16354:	ldr	r3, [fp, #-8]
   16358:	ldr	r2, [r3, #-4]
   1635c:	ldr	r3, [fp, #-16]
   16360:	str	r2, [r3, #224]	; 0xe0
   16364:	ldr	r3, [fp, #-16]
   16368:	ldr	r3, [r3, #224]	; 0xe0
   1636c:	mov	r0, r3
   16370:	sub	sp, fp, #4
   16374:	pop	{fp, pc}
   16378:	andeq	r6, r0, r0, ror #15
   1637c:	andeq	r0, r0, lr, lsl r2
   16380:	andeq	r6, r0, r4, ror r3
   16384:	strdeq	r6, [r0], -r4

00016388 <flatcc_builder_exit_user_frame_at@@Base>:
   16388:	push	{fp, lr}
   1638c:	add	fp, sp, #4
   16390:	sub	sp, sp, #8
   16394:	str	r0, [fp, #-8]
   16398:	str	r1, [fp, #-12]
   1639c:	ldr	r3, [fp, #-8]
   163a0:	ldr	r2, [r3, #224]	; 0xe0
   163a4:	ldr	r3, [fp, #-12]
   163a8:	cmp	r2, r3
   163ac:	bcs	163d0 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   163b0:	ldr	r3, [pc, #60]	; 163f4 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   163b4:	add	r3, pc, r3
   163b8:	ldr	r2, [pc, #56]	; 163f8 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   163bc:	ldr	r1, [pc, #56]	; 163fc <flatcc_builder_exit_user_frame_at@@Base+0x74>
   163c0:	add	r1, pc, r1
   163c4:	ldr	r0, [pc, #52]	; 16400 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   163c8:	add	r0, pc, r0
   163cc:	bl	1202c <__assert_fail@plt>
   163d0:	ldr	r3, [fp, #-8]
   163d4:	ldr	r2, [fp, #-12]
   163d8:	str	r2, [r3, #224]	; 0xe0
   163dc:	ldr	r0, [fp, #-8]
   163e0:	bl	162e8 <flatcc_builder_exit_user_frame@@Base>
   163e4:	mov	r3, r0
   163e8:	mov	r0, r3
   163ec:	sub	sp, fp, #4
   163f0:	pop	{fp, pc}
   163f4:	andeq	r6, r0, r8, asr r7
   163f8:	andeq	r0, r0, r7, lsr #4
   163fc:	andeq	r6, r0, ip, asr #5
   16400:	andeq	r6, r0, r8, ror #6

00016404 <flatcc_builder_get_current_user_frame@@Base>:
   16404:	push	{fp}		; (str fp, [sp, #-4]!)
   16408:	add	fp, sp, #0
   1640c:	sub	sp, sp, #12
   16410:	str	r0, [fp, #-8]
   16414:	ldr	r3, [fp, #-8]
   16418:	ldr	r3, [r3, #224]	; 0xe0
   1641c:	mov	r0, r3
   16420:	add	sp, fp, #0
   16424:	pop	{fp}		; (ldr fp, [sp], #4)
   16428:	bx	lr

0001642c <flatcc_builder_get_user_frame_ptr@@Base>:
   1642c:	push	{fp}		; (str fp, [sp, #-4]!)
   16430:	add	fp, sp, #0
   16434:	sub	sp, sp, #12
   16438:	str	r0, [fp, #-8]
   1643c:	str	r1, [fp, #-12]
   16440:	ldr	r3, [fp, #-8]
   16444:	ldr	r2, [r3, #108]	; 0x6c
   16448:	ldr	r3, [fp, #-12]
   1644c:	add	r3, r2, r3
   16450:	mov	r0, r3
   16454:	add	sp, fp, #0
   16458:	pop	{fp}		; (ldr fp, [sp], #4)
   1645c:	bx	lr
   16460:	push	{fp, lr}
   16464:	add	fp, sp, #4
   16468:	sub	sp, sp, #16
   1646c:	str	r0, [fp, #-8]
   16470:	mov	r3, r1
   16474:	strh	r3, [fp, #-10]
   16478:	ldr	r3, [fp, #-8]
   1647c:	ldr	r3, [r3, #156]	; 0x9c
   16480:	add	r2, r3, #1
   16484:	ldr	r3, [fp, #-8]
   16488:	str	r2, [r3, #156]	; 0x9c
   1648c:	ldr	r3, [fp, #-8]
   16490:	ldr	r2, [r3, #156]	; 0x9c
   16494:	ldr	r3, [fp, #-8]
   16498:	ldr	r3, [r3, #160]	; 0xa0
   1649c:	cmp	r2, r3
   164a0:	ble	16590 <flatcc_builder_get_user_frame_ptr@@Base+0x164>
   164a4:	ldr	r3, [fp, #-8]
   164a8:	ldr	r3, [r3, #176]	; 0xb0
   164ac:	cmp	r3, #0
   164b0:	ble	164d4 <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   164b4:	ldr	r3, [fp, #-8]
   164b8:	ldr	r2, [r3, #156]	; 0x9c
   164bc:	ldr	r3, [fp, #-8]
   164c0:	ldr	r3, [r3, #176]	; 0xb0
   164c4:	cmp	r2, r3
   164c8:	ble	164d4 <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   164cc:	mvn	r3, #0
   164d0:	b	16630 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   164d4:	ldr	r3, [fp, #-8]
   164d8:	ldr	r3, [r3, #156]	; 0x9c
   164dc:	sub	r3, r3, #1
   164e0:	mov	r2, r3
   164e4:	mov	r3, r2
   164e8:	lsl	r3, r3, #3
   164ec:	add	r3, r3, r2
   164f0:	lsl	r3, r3, #2
   164f4:	mov	r2, r3
   164f8:	mov	r3, #0
   164fc:	str	r3, [sp]
   16500:	mov	r3, #36	; 0x24
   16504:	mov	r1, #4
   16508:	ldr	r0, [fp, #-8]
   1650c:	bl	15870 <flatcc_builder_default_alloc@@Base+0x660>
   16510:	mov	r2, r0
   16514:	ldr	r3, [fp, #-8]
   16518:	str	r2, [r3, #32]
   1651c:	ldr	r3, [fp, #-8]
   16520:	ldr	r3, [r3, #32]
   16524:	cmp	r3, #0
   16528:	bne	16534 <flatcc_builder_get_user_frame_ptr@@Base+0x108>
   1652c:	mvn	r3, #0
   16530:	b	16630 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   16534:	ldr	r3, [fp, #-8]
   16538:	ldr	r3, [r3, #88]	; 0x58
   1653c:	ldr	r2, [pc, #248]	; 1663c <flatcc_builder_get_user_frame_ptr@@Base+0x210>
   16540:	umull	r2, r3, r2, r3
   16544:	lsr	r3, r3, #3
   16548:	mov	r2, r3
   1654c:	ldr	r3, [fp, #-8]
   16550:	str	r2, [r3, #160]	; 0xa0
   16554:	ldr	r3, [fp, #-8]
   16558:	ldr	r3, [r3, #176]	; 0xb0
   1655c:	cmp	r3, #0
   16560:	ble	165a4 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   16564:	ldr	r3, [fp, #-8]
   16568:	ldr	r2, [r3, #176]	; 0xb0
   1656c:	ldr	r3, [fp, #-8]
   16570:	ldr	r3, [r3, #160]	; 0xa0
   16574:	cmp	r2, r3
   16578:	bge	165a4 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   1657c:	ldr	r3, [fp, #-8]
   16580:	ldr	r2, [r3, #176]	; 0xb0
   16584:	ldr	r3, [fp, #-8]
   16588:	str	r2, [r3, #160]	; 0xa0
   1658c:	b	165a4 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   16590:	ldr	r3, [fp, #-8]
   16594:	ldr	r3, [r3, #32]
   16598:	add	r2, r3, #36	; 0x24
   1659c:	ldr	r3, [fp, #-8]
   165a0:	str	r2, [r3, #32]
   165a4:	ldr	r3, [fp, #-8]
   165a8:	ldr	r3, [r3, #32]
   165ac:	ldr	r2, [fp, #-8]
   165b0:	ldr	r2, [r2, #20]
   165b4:	str	r2, [r3, #8]
   165b8:	ldr	r3, [fp, #-8]
   165bc:	ldr	r3, [r3, #32]
   165c0:	ldr	r2, [fp, #-8]
   165c4:	ldrh	r2, [r2, #130]	; 0x82
   165c8:	strh	r2, [r3, #12]
   165cc:	ldr	r3, [fp, #-8]
   165d0:	ldrh	r2, [fp, #-10]
   165d4:	strh	r2, [r3, #130]	; 0x82
   165d8:	ldr	r3, [fp, #-8]
   165dc:	ldr	r3, [r3, #32]
   165e0:	ldr	r2, [fp, #-8]
   165e4:	ldr	r2, [r2, #28]
   165e8:	str	r2, [r3]
   165ec:	ldr	r3, [fp, #-8]
   165f0:	ldr	r3, [r3, #32]
   165f4:	mvn	r2, #3
   165f8:	str	r2, [r3, #4]
   165fc:	ldr	r3, [fp, #-8]
   16600:	ldr	r2, [r3, #28]
   16604:	ldr	r3, [fp, #-8]
   16608:	ldr	r3, [r3, #20]
   1660c:	add	r3, r2, r3
   16610:	add	r3, r3, #7
   16614:	bic	r2, r3, #7
   16618:	ldr	r3, [fp, #-8]
   1661c:	str	r2, [r3, #28]
   16620:	ldr	r3, [fp, #-8]
   16624:	mov	r2, #0
   16628:	str	r2, [r3, #20]
   1662c:	mov	r3, #0
   16630:	mov	r0, r3
   16634:	sub	sp, fp, #4
   16638:	pop	{fp, pc}
   1663c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   16640:	push	{fp, lr}
   16644:	add	fp, sp, #4
   16648:	sub	sp, sp, #8
   1664c:	str	r0, [fp, #-8]
   16650:	ldr	r3, [fp, #-8]
   16654:	ldr	r0, [r3, #16]
   16658:	ldr	r3, [fp, #-8]
   1665c:	ldr	r3, [r3, #20]
   16660:	mov	r2, r3
   16664:	mov	r1, #0
   16668:	bl	11ffc <memset@plt>
   1666c:	ldr	r3, [fp, #-8]
   16670:	ldr	r3, [r3, #32]
   16674:	ldr	r2, [r3, #8]
   16678:	ldr	r3, [fp, #-8]
   1667c:	str	r2, [r3, #20]
   16680:	ldr	r3, [fp, #-8]
   16684:	ldr	r3, [r3, #32]
   16688:	ldr	r2, [r3]
   1668c:	ldr	r3, [fp, #-8]
   16690:	str	r2, [r3, #28]
   16694:	ldr	r3, [fp, #-8]
   16698:	ldr	r3, [r3, #32]
   1669c:	ldr	r3, [r3, #4]
   166a0:	mov	r1, r3
   166a4:	ldr	r0, [fp, #-8]
   166a8:	bl	153d8 <flatcc_builder_default_alloc@@Base+0x1c8>
   166ac:	ldr	r3, [fp, #-8]
   166b0:	ldrh	r3, [r3, #130]	; 0x82
   166b4:	mov	r1, r3
   166b8:	ldr	r0, [fp, #-8]
   166bc:	bl	160cc <flatcc_builder_clear@@Base+0xb0>
   166c0:	ldr	r3, [fp, #-8]
   166c4:	ldr	r3, [r3, #32]
   166c8:	ldrh	r2, [r3, #12]
   166cc:	ldr	r3, [fp, #-8]
   166d0:	strh	r2, [r3, #130]	; 0x82
   166d4:	ldr	r3, [fp, #-8]
   166d8:	ldr	r3, [r3, #32]
   166dc:	sub	r2, r3, #36	; 0x24
   166e0:	ldr	r3, [fp, #-8]
   166e4:	str	r2, [r3, #32]
   166e8:	ldr	r3, [fp, #-8]
   166ec:	ldr	r3, [r3, #156]	; 0x9c
   166f0:	sub	r2, r3, #1
   166f4:	ldr	r3, [fp, #-8]
   166f8:	str	r2, [r3, #156]	; 0x9c
   166fc:	nop			; (mov r0, r0)
   16700:	sub	sp, fp, #4
   16704:	pop	{fp, pc}
   16708:	push	{fp}		; (str fp, [sp, #-4]!)
   1670c:	add	fp, sp, #0
   16710:	sub	sp, sp, #20
   16714:	str	r0, [fp, #-8]
   16718:	str	r1, [fp, #-12]
   1671c:	mov	r3, r2
   16720:	strh	r3, [fp, #-14]
   16724:	ldr	r3, [fp, #-8]
   16728:	ldr	r3, [r3, #136]	; 0x88
   1672c:	mov	r2, r3
   16730:	ldr	r3, [fp, #-12]
   16734:	sub	r3, r2, r3
   16738:	ldrh	r2, [fp, #-14]
   1673c:	sub	r2, r2, #1
   16740:	and	r3, r3, r2
   16744:	mov	r0, r3
   16748:	add	sp, fp, #0
   1674c:	pop	{fp}		; (ldr fp, [sp], #4)
   16750:	bx	lr
   16754:	push	{fp}		; (str fp, [sp, #-4]!)
   16758:	add	fp, sp, #0
   1675c:	sub	sp, sp, #12
   16760:	str	r0, [fp, #-8]
   16764:	mov	r3, r1
   16768:	strh	r3, [fp, #-10]
   1676c:	ldr	r3, [fp, #-8]
   16770:	ldr	r2, [r3, #140]	; 0x8c
   16774:	ldrh	r3, [fp, #-10]
   16778:	sub	r3, r3, #1
   1677c:	and	r3, r3, r2
   16780:	mov	r0, r3
   16784:	add	sp, fp, #0
   16788:	pop	{fp}		; (ldr fp, [sp], #4)
   1678c:	bx	lr
   16790:	push	{r4, fp, lr}
   16794:	add	fp, sp, #8
   16798:	sub	sp, sp, #28
   1679c:	str	r0, [fp, #-24]	; 0xffffffe8
   167a0:	str	r1, [fp, #-28]	; 0xffffffe4
   167a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167a8:	ldr	r3, [r3, #136]	; 0x88
   167ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   167b0:	ldr	r2, [r2]
   167b4:	sub	r3, r3, r2
   167b8:	str	r3, [fp, #-16]
   167bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167c0:	ldr	r2, [r3, #136]	; 0x88
   167c4:	ldr	r3, [fp, #-16]
   167c8:	cmp	r2, r3
   167cc:	bgt	167f0 <flatcc_builder_get_user_frame_ptr@@Base+0x3c4>
   167d0:	ldr	r3, [pc, #152]	; 16870 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   167d4:	add	r3, pc, r3
   167d8:	ldr	r2, [pc, #148]	; 16874 <flatcc_builder_get_user_frame_ptr@@Base+0x448>
   167dc:	ldr	r1, [pc, #148]	; 16878 <flatcc_builder_get_user_frame_ptr@@Base+0x44c>
   167e0:	add	r1, pc, r1
   167e4:	ldr	r0, [pc, #144]	; 1687c <flatcc_builder_get_user_frame_ptr@@Base+0x450>
   167e8:	add	r0, pc, r0
   167ec:	bl	1202c <__assert_fail@plt>
   167f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167f4:	ldr	r4, [r3, #44]	; 0x2c
   167f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167fc:	ldr	r0, [r3, #36]	; 0x24
   16800:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16804:	add	r1, r3, #8
   16808:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1680c:	ldr	r2, [r3, #4]
   16810:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16814:	ldr	r3, [r3]
   16818:	str	r3, [sp]
   1681c:	ldr	r3, [fp, #-16]
   16820:	blx	r4
   16824:	mov	r3, r0
   16828:	cmp	r3, #0
   1682c:	beq	16850 <flatcc_builder_get_user_frame_ptr@@Base+0x424>
   16830:	ldr	r3, [pc, #72]	; 16880 <flatcc_builder_get_user_frame_ptr@@Base+0x454>
   16834:	add	r3, pc, r3
   16838:	ldr	r2, [pc, #68]	; 16884 <flatcc_builder_get_user_frame_ptr@@Base+0x458>
   1683c:	ldr	r1, [pc, #68]	; 16888 <flatcc_builder_get_user_frame_ptr@@Base+0x45c>
   16840:	add	r1, pc, r1
   16844:	ldr	r0, [pc, #64]	; 1688c <flatcc_builder_get_user_frame_ptr@@Base+0x460>
   16848:	add	r0, pc, r0
   1684c:	bl	1202c <__assert_fail@plt>
   16850:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16854:	ldr	r2, [fp, #-16]
   16858:	str	r2, [r3, #136]	; 0x88
   1685c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16860:	ldr	r3, [r3, #136]	; 0x88
   16864:	mov	r0, r3
   16868:	sub	sp, fp, #8
   1686c:	pop	{r4, fp, pc}
   16870:	andeq	r6, r0, r8, ror r3
   16874:	andeq	r0, r0, r7, lsl #5
   16878:	andeq	r5, r0, ip, lsr #29
   1687c:	andeq	r5, r0, r4, lsl #30
   16880:	andeq	r6, r0, r8, lsl r3
   16884:	andeq	r0, r0, fp, lsl #5
   16888:	andeq	r5, r0, ip, asr #28
   1688c:	andeq	r5, r0, r4, lsr #29
   16890:	push	{r4, fp, lr}
   16894:	add	fp, sp, #8
   16898:	sub	sp, sp, #28
   1689c:	str	r0, [fp, #-24]	; 0xffffffe8
   168a0:	str	r1, [fp, #-28]	; 0xffffffe4
   168a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168a8:	ldr	r3, [r3, #140]	; 0x8c
   168ac:	str	r3, [fp, #-16]
   168b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   168b4:	ldr	r3, [r3]
   168b8:	mov	r2, r3
   168bc:	ldr	r3, [fp, #-16]
   168c0:	add	r2, r2, r3
   168c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168c8:	str	r2, [r3, #140]	; 0x8c
   168cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168d0:	ldr	r2, [r3, #140]	; 0x8c
   168d4:	ldr	r3, [fp, #-16]
   168d8:	cmp	r2, r3
   168dc:	bge	16900 <flatcc_builder_get_user_frame_ptr@@Base+0x4d4>
   168e0:	ldr	r3, [pc, #140]	; 16974 <flatcc_builder_get_user_frame_ptr@@Base+0x548>
   168e4:	add	r3, pc, r3
   168e8:	ldr	r2, [pc, #136]	; 16978 <flatcc_builder_get_user_frame_ptr@@Base+0x54c>
   168ec:	ldr	r1, [pc, #136]	; 1697c <flatcc_builder_get_user_frame_ptr@@Base+0x550>
   168f0:	add	r1, pc, r1
   168f4:	ldr	r0, [pc, #132]	; 16980 <flatcc_builder_get_user_frame_ptr@@Base+0x554>
   168f8:	add	r0, pc, r0
   168fc:	bl	1202c <__assert_fail@plt>
   16900:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16904:	ldr	r4, [r3, #44]	; 0x2c
   16908:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1690c:	ldr	r0, [r3, #36]	; 0x24
   16910:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16914:	add	r1, r3, #8
   16918:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1691c:	ldr	r2, [r3, #4]
   16920:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16924:	ldr	r3, [r3]
   16928:	str	r3, [sp]
   1692c:	ldr	r3, [fp, #-16]
   16930:	blx	r4
   16934:	mov	r3, r0
   16938:	cmp	r3, #0
   1693c:	beq	16960 <flatcc_builder_get_user_frame_ptr@@Base+0x534>
   16940:	ldr	r3, [pc, #60]	; 16984 <flatcc_builder_get_user_frame_ptr@@Base+0x558>
   16944:	add	r3, pc, r3
   16948:	ldr	r2, [pc, #56]	; 16988 <flatcc_builder_get_user_frame_ptr@@Base+0x55c>
   1694c:	ldr	r1, [pc, #56]	; 1698c <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   16950:	add	r1, pc, r1
   16954:	ldr	r0, [pc, #52]	; 16990 <flatcc_builder_get_user_frame_ptr@@Base+0x564>
   16958:	add	r0, pc, r0
   1695c:	bl	1202c <__assert_fail@plt>
   16960:	ldr	r3, [fp, #-16]
   16964:	add	r3, r3, #1
   16968:	mov	r0, r3
   1696c:	sub	sp, fp, #8
   16970:	pop	{r4, fp, pc}
   16974:	andeq	r6, r0, ip, asr r2
   16978:	andeq	r0, r0, r1, lsr #5
   1697c:	muleq	r0, ip, sp
   16980:	strdeq	r5, [r0], -r4
   16984:	strdeq	r6, [r0], -ip
   16988:	andeq	r0, r0, r5, lsr #5
   1698c:	andeq	r5, r0, ip, lsr sp
   16990:	muleq	r0, r4, sp
   16994:	push	{r4, fp, lr}
   16998:	add	fp, sp, #8
   1699c:	sub	sp, sp, #100	; 0x64
   169a0:	str	r0, [fp, #-96]	; 0xffffffa0
   169a4:	str	r1, [fp, #-100]	; 0xffffff9c
   169a8:	str	r3, [fp, #-108]	; 0xffffff94
   169ac:	strh	r2, [fp, #-102]	; 0xffffff9a
   169b0:	ldr	r4, [pc, #320]	; 16af8 <flatcc_builder_get_user_frame_ptr@@Base+0x6cc>
   169b4:	add	r4, pc, r4
   169b8:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   169bc:	cmp	r3, #0
   169c0:	bne	169e8 <flatcc_builder_get_user_frame_ptr@@Base+0x5bc>
   169c4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   169c8:	ldrh	r3, [r3, #132]	; 0x84
   169cc:	cmp	r3, #0
   169d0:	beq	169e0 <flatcc_builder_get_user_frame_ptr@@Base+0x5b4>
   169d4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   169d8:	ldrh	r3, [r3, #132]	; 0x84
   169dc:	b	169ec <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   169e0:	mov	r3, #1
   169e4:	b	169ec <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   169e8:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   169ec:	strh	r3, [fp, #-102]	; 0xffffff9a
   169f0:	mov	r1, #4
   169f4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   169f8:	bl	16114 <flatcc_builder_clear@@Base+0xf8>
   169fc:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   16a00:	mov	r1, r3
   16a04:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16a08:	bl	16114 <flatcc_builder_clear@@Base+0xf8>
   16a0c:	ldr	r3, [fp, #-108]	; 0xffffff94
   16a10:	cmp	r3, #0
   16a14:	bne	16ae8 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   16a18:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   16a1c:	mov	r1, r3
   16a20:	ldr	r0, [fp, #-96]	; 0xffffffa0
   16a24:	bl	16754 <flatcc_builder_get_user_frame_ptr@@Base+0x328>
   16a28:	str	r0, [fp, #-16]
   16a2c:	ldr	r3, [fp, #-16]
   16a30:	cmp	r3, #0
   16a34:	beq	16ae8 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   16a38:	mov	r3, #0
   16a3c:	str	r3, [fp, #-88]	; 0xffffffa8
   16a40:	mov	r3, #0
   16a44:	str	r3, [fp, #-84]	; 0xffffffac
   16a48:	ldr	r3, [fp, #-16]
   16a4c:	cmp	r3, #0
   16a50:	beq	16aac <flatcc_builder_get_user_frame_ptr@@Base+0x680>
   16a54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16a58:	ldr	r3, [fp, #-16]
   16a5c:	add	r3, r2, r3
   16a60:	str	r3, [fp, #-88]	; 0xffffffa8
   16a64:	ldr	r3, [fp, #-84]	; 0xffffffac
   16a68:	add	r3, r3, #1
   16a6c:	lsl	r3, r3, #3
   16a70:	sub	r2, fp, #12
   16a74:	add	r3, r2, r3
   16a78:	ldr	r2, [pc, #124]	; 16afc <flatcc_builder_get_user_frame_ptr@@Base+0x6d0>
   16a7c:	ldr	r2, [r4, r2]
   16a80:	str	r2, [r3, #-76]	; 0xffffffb4
   16a84:	ldr	r3, [fp, #-84]	; 0xffffffac
   16a88:	add	r3, r3, #1
   16a8c:	lsl	r3, r3, #3
   16a90:	sub	r2, fp, #12
   16a94:	add	r3, r2, r3
   16a98:	ldr	r2, [fp, #-16]
   16a9c:	str	r2, [r3, #-72]	; 0xffffffb8
   16aa0:	ldr	r3, [fp, #-84]	; 0xffffffac
   16aa4:	add	r3, r3, #1
   16aa8:	str	r3, [fp, #-84]	; 0xffffffac
   16aac:	sub	r3, fp, #88	; 0x58
   16ab0:	mov	r1, r3
   16ab4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   16ab8:	bl	16890 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   16abc:	mov	r3, r0
   16ac0:	cmp	r3, #0
   16ac4:	bne	16ae8 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   16ac8:	ldr	r3, [pc, #48]	; 16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x6d4>
   16acc:	add	r3, pc, r3
   16ad0:	ldr	r2, [pc, #44]	; 16b04 <flatcc_builder_get_user_frame_ptr@@Base+0x6d8>
   16ad4:	ldr	r1, [pc, #44]	; 16b08 <flatcc_builder_get_user_frame_ptr@@Base+0x6dc>
   16ad8:	add	r1, pc, r1
   16adc:	ldr	r0, [pc, #40]	; 16b0c <flatcc_builder_get_user_frame_ptr@@Base+0x6e0>
   16ae0:	add	r0, pc, r0
   16ae4:	bl	1202c <__assert_fail@plt>
   16ae8:	mov	r3, #0
   16aec:	mov	r0, r3
   16af0:	sub	sp, fp, #8
   16af4:	pop	{r4, fp, pc}
   16af8:	andeq	r7, r1, r4, asr #12
   16afc:	andeq	r0, r0, ip, asr #32
   16b00:	andeq	r6, r0, r4, rrx
   16b04:			; <UNDEFINED> instruction: 0x000002be
   16b08:			; <UNDEFINED> instruction: 0x00005bb4
   16b0c:	andeq	r5, r0, ip, lsl #24

00016b10 <flatcc_builder_embed_buffer@@Base>:
   16b10:	push	{r4, fp, lr}
   16b14:	add	fp, sp, #8
   16b18:	sub	sp, sp, #108	; 0x6c
   16b1c:	str	r0, [fp, #-104]	; 0xffffff98
   16b20:	str	r2, [fp, #-112]	; 0xffffff90
   16b24:	str	r3, [fp, #-116]	; 0xffffff8c
   16b28:	strh	r1, [fp, #-106]	; 0xffffff96
   16b2c:	ldr	r4, [pc, #492]	; 16d20 <flatcc_builder_embed_buffer@@Base+0x210>
   16b30:	add	r4, pc, r4
   16b34:	ldr	r3, [fp, #8]
   16b38:	and	r3, r3, #2
   16b3c:	str	r3, [fp, #-16]
   16b40:	ldr	r3, [fp, #-104]	; 0xffffff98
   16b44:	ldr	r3, [r3, #152]	; 0x98
   16b48:	cmp	r3, #0
   16b4c:	movne	r3, #1
   16b50:	moveq	r3, #0
   16b54:	uxtb	r3, r3
   16b58:	ldrh	r2, [fp, #-106]	; 0xffffff96
   16b5c:	add	r1, fp, #4
   16b60:	ldr	r0, [fp, #-104]	; 0xffffff98
   16b64:	bl	16994 <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   16b68:	mov	r3, r0
   16b6c:	cmp	r3, #0
   16b70:	beq	16b7c <flatcc_builder_embed_buffer@@Base+0x6c>
   16b74:	mov	r3, #0
   16b78:	b	16d14 <flatcc_builder_embed_buffer@@Base+0x204>
   16b7c:	ldr	r3, [fp, #-16]
   16b80:	cmp	r3, #0
   16b84:	beq	16b90 <flatcc_builder_embed_buffer@@Base+0x80>
   16b88:	mov	r2, #4
   16b8c:	b	16b94 <flatcc_builder_embed_buffer@@Base+0x84>
   16b90:	mov	r2, #0
   16b94:	ldr	r3, [fp, #-116]	; 0xffffff8c
   16b98:	add	r3, r2, r3
   16b9c:	ldrh	r2, [fp, #4]
   16ba0:	mov	r1, r3
   16ba4:	ldr	r0, [fp, #-104]	; 0xffffff98
   16ba8:	bl	16708 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   16bac:	str	r0, [fp, #-20]	; 0xffffffec
   16bb0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16bb8:	add	r3, r2, r3
   16bbc:	mov	r0, r3
   16bc0:	bl	150cc <main@@Base+0x238>
   16bc4:	mov	r3, r0
   16bc8:	str	r3, [fp, #-24]	; 0xffffffe8
   16bcc:	mov	r3, #0
   16bd0:	str	r3, [fp, #-96]	; 0xffffffa0
   16bd4:	mov	r3, #0
   16bd8:	str	r3, [fp, #-92]	; 0xffffffa4
   16bdc:	ldr	r3, [fp, #-104]	; 0xffffff98
   16be0:	ldr	r3, [r3, #152]	; 0x98
   16be4:	cmp	r3, #0
   16be8:	beq	16c3c <flatcc_builder_embed_buffer@@Base+0x12c>
   16bec:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16bf0:	add	r3, r3, #4
   16bf4:	str	r3, [fp, #-96]	; 0xffffffa0
   16bf8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16bfc:	add	r3, r3, #1
   16c00:	lsl	r3, r3, #3
   16c04:	sub	r2, fp, #12
   16c08:	add	r3, r2, r3
   16c0c:	sub	r2, fp, #24
   16c10:	str	r2, [r3, #-84]	; 0xffffffac
   16c14:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16c18:	add	r3, r3, #1
   16c1c:	lsl	r3, r3, #3
   16c20:	sub	r2, fp, #12
   16c24:	add	r3, r2, r3
   16c28:	mov	r2, #4
   16c2c:	str	r2, [r3, #-80]	; 0xffffffb0
   16c30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16c34:	add	r3, r3, #1
   16c38:	str	r3, [fp, #-92]	; 0xffffffa4
   16c3c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   16c40:	cmp	r3, #0
   16c44:	beq	16c9c <flatcc_builder_embed_buffer@@Base+0x18c>
   16c48:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16c4c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   16c50:	add	r3, r2, r3
   16c54:	str	r3, [fp, #-96]	; 0xffffffa0
   16c58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16c5c:	add	r3, r3, #1
   16c60:	lsl	r3, r3, #3
   16c64:	sub	r2, fp, #12
   16c68:	add	r3, r2, r3
   16c6c:	ldr	r2, [fp, #-112]	; 0xffffff90
   16c70:	str	r2, [r3, #-84]	; 0xffffffac
   16c74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16c78:	add	r3, r3, #1
   16c7c:	lsl	r3, r3, #3
   16c80:	sub	r2, fp, #12
   16c84:	add	r3, r2, r3
   16c88:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16c8c:	str	r2, [r3, #-80]	; 0xffffffb0
   16c90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16c94:	add	r3, r3, #1
   16c98:	str	r3, [fp, #-92]	; 0xffffffa4
   16c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ca0:	cmp	r3, #0
   16ca4:	beq	16d00 <flatcc_builder_embed_buffer@@Base+0x1f0>
   16ca8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16cac:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cb0:	add	r3, r2, r3
   16cb4:	str	r3, [fp, #-96]	; 0xffffffa0
   16cb8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16cbc:	add	r3, r3, #1
   16cc0:	lsl	r3, r3, #3
   16cc4:	sub	r2, fp, #12
   16cc8:	add	r3, r2, r3
   16ccc:	ldr	r2, [pc, #80]	; 16d24 <flatcc_builder_embed_buffer@@Base+0x214>
   16cd0:	ldr	r2, [r4, r2]
   16cd4:	str	r2, [r3, #-84]	; 0xffffffac
   16cd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16cdc:	add	r3, r3, #1
   16ce0:	lsl	r3, r3, #3
   16ce4:	sub	r2, fp, #12
   16ce8:	add	r3, r2, r3
   16cec:	ldr	r2, [fp, #-20]	; 0xffffffec
   16cf0:	str	r2, [r3, #-80]	; 0xffffffb0
   16cf4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16cf8:	add	r3, r3, #1
   16cfc:	str	r3, [fp, #-92]	; 0xffffffa4
   16d00:	sub	r3, fp, #96	; 0x60
   16d04:	mov	r1, r3
   16d08:	ldr	r0, [fp, #-104]	; 0xffffff98
   16d0c:	bl	16790 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   16d10:	mov	r3, r0
   16d14:	mov	r0, r3
   16d18:	sub	sp, fp, #8
   16d1c:	pop	{r4, fp, pc}
   16d20:	andeq	r7, r1, r8, asr #9
   16d24:	andeq	r0, r0, ip, asr #32

00016d28 <flatcc_builder_create_buffer@@Base>:
   16d28:	push	{r4, fp, lr}
   16d2c:	add	fp, sp, #8
   16d30:	sub	sp, sp, #132	; 0x84
   16d34:	str	r0, [fp, #-128]	; 0xffffff80
   16d38:	str	r1, [fp, #-132]	; 0xffffff7c
   16d3c:	str	r3, [fp, #-140]	; 0xffffff74
   16d40:	strh	r2, [fp, #-134]	; 0xffffff7a
   16d44:	ldr	r4, [pc, #932]	; 170f0 <flatcc_builder_create_buffer@@Base+0x3c8>
   16d48:	add	r4, pc, r4
   16d4c:	mov	r3, #0
   16d50:	str	r3, [fp, #-16]
   16d54:	mov	r3, #0
   16d58:	str	r3, [fp, #-120]	; 0xffffff88
   16d5c:	ldr	r3, [fp, #8]
   16d60:	and	r3, r3, #1
   16d64:	cmp	r3, #0
   16d68:	movne	r3, #1
   16d6c:	moveq	r3, #0
   16d70:	uxtb	r3, r3
   16d74:	str	r3, [fp, #-20]	; 0xffffffec
   16d78:	ldr	r3, [fp, #8]
   16d7c:	and	r3, r3, #2
   16d80:	cmp	r3, #0
   16d84:	movne	r3, #1
   16d88:	moveq	r3, #0
   16d8c:	uxtb	r3, r3
   16d90:	str	r3, [fp, #-24]	; 0xffffffe8
   16d94:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   16d98:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d9c:	add	r1, fp, #4
   16da0:	ldr	r0, [fp, #-128]	; 0xffffff80
   16da4:	bl	16994 <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   16da8:	mov	r3, r0
   16dac:	cmp	r3, #0
   16db0:	beq	16dbc <flatcc_builder_create_buffer@@Base+0x94>
   16db4:	mov	r3, #0
   16db8:	b	170e4 <flatcc_builder_create_buffer@@Base+0x3bc>
   16dbc:	ldrh	r3, [fp, #4]
   16dc0:	mov	r1, r3
   16dc4:	ldr	r0, [fp, #-128]	; 0xffffff80
   16dc8:	bl	160cc <flatcc_builder_clear@@Base+0xb0>
   16dcc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16dd0:	cmp	r3, #0
   16dd4:	beq	16e0c <flatcc_builder_create_buffer@@Base+0xe4>
   16dd8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16ddc:	ldr	r3, [r3]
   16de0:	str	r3, [fp, #-120]	; 0xffffff88
   16de4:	ldr	r3, [fp, #-120]	; 0xffffff88
   16de8:	mov	r0, r3
   16dec:	bl	15118 <main@@Base+0x284>
   16df0:	mov	r3, r0
   16df4:	str	r3, [fp, #-120]	; 0xffffff88
   16df8:	ldr	r3, [fp, #-120]	; 0xffffff88
   16dfc:	mov	r0, r3
   16e00:	bl	150cc <main@@Base+0x238>
   16e04:	mov	r3, r0
   16e08:	str	r3, [fp, #-120]	; 0xffffff88
   16e0c:	ldr	r3, [fp, #-120]	; 0xffffff88
   16e10:	cmp	r3, #0
   16e14:	beq	16e20 <flatcc_builder_create_buffer@@Base+0xf8>
   16e18:	mov	r3, #4
   16e1c:	b	16e24 <flatcc_builder_create_buffer@@Base+0xfc>
   16e20:	mov	r3, #0
   16e24:	str	r3, [fp, #-16]
   16e28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e2c:	cmp	r3, #0
   16e30:	beq	16e3c <flatcc_builder_create_buffer@@Base+0x114>
   16e34:	mov	r2, #4
   16e38:	b	16e40 <flatcc_builder_create_buffer@@Base+0x118>
   16e3c:	mov	r2, #0
   16e40:	ldr	r3, [fp, #-16]
   16e44:	add	r3, r2, r3
   16e48:	add	r3, r3, #4
   16e4c:	ldrh	r2, [fp, #4]
   16e50:	mov	r1, r3
   16e54:	ldr	r0, [fp, #-128]	; 0xffffff80
   16e58:	bl	16708 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   16e5c:	str	r0, [fp, #-28]	; 0xffffffe4
   16e60:	mov	r3, #0
   16e64:	str	r3, [fp, #-116]	; 0xffffff8c
   16e68:	mov	r3, #0
   16e6c:	str	r3, [fp, #-112]	; 0xffffff90
   16e70:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e74:	cmp	r3, #0
   16e78:	bne	16e88 <flatcc_builder_create_buffer@@Base+0x160>
   16e7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e80:	cmp	r3, #0
   16e84:	beq	16ed8 <flatcc_builder_create_buffer@@Base+0x1b0>
   16e88:	ldr	r3, [fp, #-116]	; 0xffffff8c
   16e8c:	add	r3, r3, #4
   16e90:	str	r3, [fp, #-116]	; 0xffffff8c
   16e94:	ldr	r3, [fp, #-112]	; 0xffffff90
   16e98:	add	r3, r3, #1
   16e9c:	lsl	r3, r3, #3
   16ea0:	sub	r2, fp, #12
   16ea4:	add	r3, r2, r3
   16ea8:	sub	r2, fp, #44	; 0x2c
   16eac:	str	r2, [r3, #-104]	; 0xffffff98
   16eb0:	ldr	r3, [fp, #-112]	; 0xffffff90
   16eb4:	add	r3, r3, #1
   16eb8:	lsl	r3, r3, #3
   16ebc:	sub	r2, fp, #12
   16ec0:	add	r3, r2, r3
   16ec4:	mov	r2, #4
   16ec8:	str	r2, [r3, #-100]	; 0xffffff9c
   16ecc:	ldr	r3, [fp, #-112]	; 0xffffff90
   16ed0:	add	r3, r3, #1
   16ed4:	str	r3, [fp, #-112]	; 0xffffff90
   16ed8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   16edc:	add	r3, r3, #4
   16ee0:	str	r3, [fp, #-116]	; 0xffffff8c
   16ee4:	ldr	r3, [fp, #-112]	; 0xffffff90
   16ee8:	add	r3, r3, #1
   16eec:	lsl	r3, r3, #3
   16ef0:	sub	r2, fp, #12
   16ef4:	add	r3, r2, r3
   16ef8:	sub	r2, fp, #40	; 0x28
   16efc:	str	r2, [r3, #-104]	; 0xffffff98
   16f00:	ldr	r3, [fp, #-112]	; 0xffffff90
   16f04:	add	r3, r3, #1
   16f08:	lsl	r3, r3, #3
   16f0c:	sub	r2, fp, #12
   16f10:	add	r3, r2, r3
   16f14:	mov	r2, #4
   16f18:	str	r2, [r3, #-100]	; 0xffffff9c
   16f1c:	ldr	r3, [fp, #-112]	; 0xffffff90
   16f20:	add	r3, r3, #1
   16f24:	str	r3, [fp, #-112]	; 0xffffff90
   16f28:	ldr	r3, [fp, #-16]
   16f2c:	cmp	r3, #0
   16f30:	beq	16f88 <flatcc_builder_create_buffer@@Base+0x260>
   16f34:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16f38:	ldr	r3, [fp, #-16]
   16f3c:	add	r3, r2, r3
   16f40:	str	r3, [fp, #-116]	; 0xffffff8c
   16f44:	ldr	r3, [fp, #-112]	; 0xffffff90
   16f48:	add	r3, r3, #1
   16f4c:	lsl	r3, r3, #3
   16f50:	sub	r2, fp, #12
   16f54:	add	r3, r2, r3
   16f58:	sub	r2, fp, #120	; 0x78
   16f5c:	str	r2, [r3, #-104]	; 0xffffff98
   16f60:	ldr	r3, [fp, #-112]	; 0xffffff90
   16f64:	add	r3, r3, #1
   16f68:	lsl	r3, r3, #3
   16f6c:	sub	r2, fp, #12
   16f70:	add	r3, r2, r3
   16f74:	ldr	r2, [fp, #-16]
   16f78:	str	r2, [r3, #-100]	; 0xffffff9c
   16f7c:	ldr	r3, [fp, #-112]	; 0xffffff90
   16f80:	add	r3, r3, #1
   16f84:	str	r3, [fp, #-112]	; 0xffffff90
   16f88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f8c:	cmp	r3, #0
   16f90:	beq	16fec <flatcc_builder_create_buffer@@Base+0x2c4>
   16f94:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16f98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f9c:	add	r3, r2, r3
   16fa0:	str	r3, [fp, #-116]	; 0xffffff8c
   16fa4:	ldr	r3, [fp, #-112]	; 0xffffff90
   16fa8:	add	r3, r3, #1
   16fac:	lsl	r3, r3, #3
   16fb0:	sub	r2, fp, #12
   16fb4:	add	r3, r2, r3
   16fb8:	ldr	r2, [pc, #308]	; 170f4 <flatcc_builder_create_buffer@@Base+0x3cc>
   16fbc:	ldr	r2, [r4, r2]
   16fc0:	str	r2, [r3, #-104]	; 0xffffff98
   16fc4:	ldr	r3, [fp, #-112]	; 0xffffff90
   16fc8:	add	r3, r3, #1
   16fcc:	lsl	r3, r3, #3
   16fd0:	sub	r2, fp, #12
   16fd4:	add	r3, r2, r3
   16fd8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16fdc:	str	r2, [r3, #-100]	; 0xffffff9c
   16fe0:	ldr	r3, [fp, #-112]	; 0xffffff90
   16fe4:	add	r3, r3, #1
   16fe8:	str	r3, [fp, #-112]	; 0xffffff90
   16fec:	ldr	r3, [fp, #-128]	; 0xffffff80
   16ff0:	ldr	r3, [r3, #136]	; 0x88
   16ff4:	mov	r2, r3
   16ff8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   16ffc:	sub	r2, r2, r3
   17000:	ldr	r3, [fp, #-20]	; 0xffffffec
   17004:	cmp	r3, #0
   17008:	bne	17018 <flatcc_builder_create_buffer@@Base+0x2f0>
   1700c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17010:	cmp	r3, #0
   17014:	beq	17020 <flatcc_builder_create_buffer@@Base+0x2f8>
   17018:	mov	r3, #4
   1701c:	b	17024 <flatcc_builder_create_buffer@@Base+0x2fc>
   17020:	mov	r3, #0
   17024:	add	r3, r2, r3
   17028:	str	r3, [fp, #-32]	; 0xffffffe0
   1702c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17030:	cmp	r3, #0
   17034:	beq	17060 <flatcc_builder_create_buffer@@Base+0x338>
   17038:	ldr	r3, [fp, #-128]	; 0xffffff80
   1703c:	ldr	r3, [r3, #144]	; 0x90
   17040:	mov	r2, r3
   17044:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17048:	sub	r3, r2, r3
   1704c:	mov	r0, r3
   17050:	bl	150cc <main@@Base+0x238>
   17054:	mov	r3, r0
   17058:	str	r3, [fp, #-44]	; 0xffffffd4
   1705c:	b	17084 <flatcc_builder_create_buffer@@Base+0x35c>
   17060:	ldr	r3, [fp, #-128]	; 0xffffff80
   17064:	ldr	r3, [r3, #140]	; 0x8c
   17068:	mov	r2, r3
   1706c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17070:	sub	r3, r2, r3
   17074:	mov	r0, r3
   17078:	bl	150cc <main@@Base+0x238>
   1707c:	mov	r3, r0
   17080:	str	r3, [fp, #-44]	; 0xffffffd4
   17084:	ldr	r2, [fp, #-140]	; 0xffffff74
   17088:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1708c:	sub	r3, r2, r3
   17090:	mov	r0, r3
   17094:	bl	150cc <main@@Base+0x238>
   17098:	mov	r3, r0
   1709c:	str	r3, [fp, #-40]	; 0xffffffd8
   170a0:	sub	r3, fp, #116	; 0x74
   170a4:	mov	r1, r3
   170a8:	ldr	r0, [fp, #-128]	; 0xffffff80
   170ac:	bl	16790 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   170b0:	str	r0, [fp, #-36]	; 0xffffffdc
   170b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   170b8:	cmp	r3, #0
   170bc:	bne	170e0 <flatcc_builder_create_buffer@@Base+0x3b8>
   170c0:	ldr	r3, [pc, #48]	; 170f8 <flatcc_builder_create_buffer@@Base+0x3d0>
   170c4:	add	r3, pc, r3
   170c8:	mov	r2, #772	; 0x304
   170cc:	ldr	r1, [pc, #40]	; 170fc <flatcc_builder_create_buffer@@Base+0x3d4>
   170d0:	add	r1, pc, r1
   170d4:	ldr	r0, [pc, #36]	; 17100 <flatcc_builder_create_buffer@@Base+0x3d8>
   170d8:	add	r0, pc, r0
   170dc:	bl	1202c <__assert_fail@plt>
   170e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   170e4:	mov	r0, r3
   170e8:	sub	sp, fp, #8
   170ec:	pop	{r4, fp, pc}
   170f0:			; <UNDEFINED> instruction: 0x000172b0
   170f4:	andeq	r0, r0, ip, asr #32
   170f8:	muleq	r0, r4, sl
   170fc:			; <UNDEFINED> instruction: 0x000055bc
   17100:	andeq	r5, r0, r4, lsl r6

00017104 <flatcc_builder_create_struct@@Base>:
   17104:	push	{r4, fp, lr}
   17108:	add	fp, sp, #8
   1710c:	sub	sp, sp, #100	; 0x64
   17110:	str	r0, [fp, #-96]	; 0xffffffa0
   17114:	str	r1, [fp, #-100]	; 0xffffff9c
   17118:	str	r2, [fp, #-104]	; 0xffffff98
   1711c:	strh	r3, [fp, #-106]	; 0xffffff96
   17120:	ldr	r4, [pc, #328]	; 17270 <flatcc_builder_create_struct@@Base+0x16c>
   17124:	add	r4, pc, r4
   17128:	ldrh	r3, [fp, #-106]	; 0xffffff96
   1712c:	cmp	r3, #0
   17130:	bne	17154 <flatcc_builder_create_struct@@Base+0x50>
   17134:	ldr	r3, [pc, #312]	; 17274 <flatcc_builder_create_struct@@Base+0x170>
   17138:	add	r3, pc, r3
   1713c:	ldr	r2, [pc, #308]	; 17278 <flatcc_builder_create_struct@@Base+0x174>
   17140:	ldr	r1, [pc, #308]	; 1727c <flatcc_builder_create_struct@@Base+0x178>
   17144:	add	r1, pc, r1
   17148:	ldr	r0, [pc, #304]	; 17280 <flatcc_builder_create_struct@@Base+0x17c>
   1714c:	add	r0, pc, r0
   17150:	bl	1202c <__assert_fail@plt>
   17154:	ldrh	r3, [fp, #-106]	; 0xffffff96
   17158:	mov	r1, r3
   1715c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17160:	bl	160cc <flatcc_builder_clear@@Base+0xb0>
   17164:	ldrh	r3, [fp, #-106]	; 0xffffff96
   17168:	mov	r2, r3
   1716c:	ldr	r1, [fp, #-104]	; 0xffffff98
   17170:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17174:	bl	16708 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   17178:	str	r0, [fp, #-16]
   1717c:	mov	r3, #0
   17180:	str	r3, [fp, #-88]	; 0xffffffa8
   17184:	mov	r3, #0
   17188:	str	r3, [fp, #-84]	; 0xffffffac
   1718c:	ldr	r3, [fp, #-104]	; 0xffffff98
   17190:	cmp	r3, #0
   17194:	beq	171ec <flatcc_builder_create_struct@@Base+0xe8>
   17198:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1719c:	ldr	r3, [fp, #-104]	; 0xffffff98
   171a0:	add	r3, r2, r3
   171a4:	str	r3, [fp, #-88]	; 0xffffffa8
   171a8:	ldr	r3, [fp, #-84]	; 0xffffffac
   171ac:	add	r3, r3, #1
   171b0:	lsl	r3, r3, #3
   171b4:	sub	r2, fp, #12
   171b8:	add	r3, r2, r3
   171bc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   171c0:	str	r2, [r3, #-76]	; 0xffffffb4
   171c4:	ldr	r3, [fp, #-84]	; 0xffffffac
   171c8:	add	r3, r3, #1
   171cc:	lsl	r3, r3, #3
   171d0:	sub	r2, fp, #12
   171d4:	add	r3, r2, r3
   171d8:	ldr	r2, [fp, #-104]	; 0xffffff98
   171dc:	str	r2, [r3, #-72]	; 0xffffffb8
   171e0:	ldr	r3, [fp, #-84]	; 0xffffffac
   171e4:	add	r3, r3, #1
   171e8:	str	r3, [fp, #-84]	; 0xffffffac
   171ec:	ldr	r3, [fp, #-16]
   171f0:	cmp	r3, #0
   171f4:	beq	17250 <flatcc_builder_create_struct@@Base+0x14c>
   171f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   171fc:	ldr	r3, [fp, #-16]
   17200:	add	r3, r2, r3
   17204:	str	r3, [fp, #-88]	; 0xffffffa8
   17208:	ldr	r3, [fp, #-84]	; 0xffffffac
   1720c:	add	r3, r3, #1
   17210:	lsl	r3, r3, #3
   17214:	sub	r2, fp, #12
   17218:	add	r3, r2, r3
   1721c:	ldr	r2, [pc, #96]	; 17284 <flatcc_builder_create_struct@@Base+0x180>
   17220:	ldr	r2, [r4, r2]
   17224:	str	r2, [r3, #-76]	; 0xffffffb4
   17228:	ldr	r3, [fp, #-84]	; 0xffffffac
   1722c:	add	r3, r3, #1
   17230:	lsl	r3, r3, #3
   17234:	sub	r2, fp, #12
   17238:	add	r3, r2, r3
   1723c:	ldr	r2, [fp, #-16]
   17240:	str	r2, [r3, #-72]	; 0xffffffb8
   17244:	ldr	r3, [fp, #-84]	; 0xffffffac
   17248:	add	r3, r3, #1
   1724c:	str	r3, [fp, #-84]	; 0xffffffac
   17250:	sub	r3, fp, #88	; 0x58
   17254:	mov	r1, r3
   17258:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1725c:	bl	16790 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   17260:	mov	r3, r0
   17264:	mov	r0, r3
   17268:	sub	sp, fp, #8
   1726c:	pop	{r4, fp, pc}
   17270:	ldrdeq	r6, [r1], -r4
   17274:	andeq	r5, r0, r0, asr #20
   17278:	andeq	r0, r0, pc, lsl #6
   1727c:	andeq	r5, r0, r8, asr #10
   17280:	andeq	r5, r0, r4, lsl #12
   17284:	andeq	r0, r0, ip, asr #32

00017288 <flatcc_builder_start_buffer@@Base>:
   17288:	push	{r4, fp, lr}
   1728c:	add	fp, sp, #8
   17290:	sub	sp, sp, #20
   17294:	str	r0, [fp, #-16]
   17298:	str	r1, [fp, #-20]	; 0xffffffec
   1729c:	str	r3, [fp, #-28]	; 0xffffffe4
   172a0:	strh	r2, [fp, #-22]	; 0xffffffea
   172a4:	ldr	r4, [pc, #300]	; 173d8 <flatcc_builder_start_buffer@@Base+0x150>
   172a8:	add	r4, pc, r4
   172ac:	ldr	r3, [fp, #-16]
   172b0:	ldrh	r3, [r3, #128]	; 0x80
   172b4:	mov	r1, r3
   172b8:	ldr	r0, [fp, #-16]
   172bc:	bl	16460 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   172c0:	mov	r3, r0
   172c4:	cmp	r3, #0
   172c8:	beq	172d4 <flatcc_builder_start_buffer@@Base+0x4c>
   172cc:	mvn	r3, #0
   172d0:	b	173cc <flatcc_builder_start_buffer@@Base+0x144>
   172d4:	ldr	r3, [fp, #-16]
   172d8:	mov	r2, #1
   172dc:	strh	r2, [r3, #128]	; 0x80
   172e0:	ldr	r3, [fp, #-16]
   172e4:	ldr	r3, [r3, #32]
   172e8:	ldr	r2, [fp, #-16]
   172ec:	ldrh	r2, [r2, #132]	; 0x84
   172f0:	strh	r2, [r3, #34]	; 0x22
   172f4:	ldr	r3, [fp, #-16]
   172f8:	ldrh	r2, [fp, #-22]	; 0xffffffea
   172fc:	strh	r2, [r3, #132]	; 0x84
   17300:	ldr	r3, [fp, #-16]
   17304:	ldr	r3, [r3, #32]
   17308:	ldr	r2, [fp, #-16]
   1730c:	ldrh	r2, [r2, #164]	; 0xa4
   17310:	strh	r2, [r3, #32]
   17314:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17318:	uxth	r2, r3
   1731c:	ldr	r3, [fp, #-16]
   17320:	strh	r2, [r3, #164]	; 0xa4
   17324:	ldr	r3, [fp, #-16]
   17328:	ldr	r3, [r3, #32]
   1732c:	ldr	r2, [fp, #-16]
   17330:	ldr	r2, [r2, #144]	; 0x90
   17334:	str	r2, [r3, #20]
   17338:	ldr	r3, [fp, #-16]
   1733c:	ldr	r3, [r3, #32]
   17340:	ldr	r2, [fp, #-16]
   17344:	ldr	r2, [r2, #152]	; 0x98
   17348:	str	r2, [r3, #28]
   1734c:	ldr	r3, [fp, #-16]
   17350:	ldr	r2, [r3, #136]	; 0x88
   17354:	ldr	r3, [fp, #-16]
   17358:	str	r2, [r3, #144]	; 0x90
   1735c:	ldr	r3, [fp, #-16]
   17360:	ldr	r3, [r3, #148]	; 0x94
   17364:	add	r1, r3, #1
   17368:	ldr	r2, [fp, #-16]
   1736c:	str	r1, [r2, #148]	; 0x94
   17370:	ldr	r2, [fp, #-16]
   17374:	str	r3, [r2, #152]	; 0x98
   17378:	ldr	r3, [fp, #-16]
   1737c:	ldr	r3, [r3, #32]
   17380:	ldr	r2, [fp, #-16]
   17384:	ldr	r2, [r2, #168]	; 0xa8
   17388:	str	r2, [r3, #16]
   1738c:	ldr	r3, [fp, #-16]
   17390:	add	r2, r3, #168	; 0xa8
   17394:	ldr	r3, [fp, #-20]	; 0xffffffec
   17398:	cmp	r3, #0
   1739c:	beq	173a8 <flatcc_builder_start_buffer@@Base+0x120>
   173a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   173a4:	b	173b0 <flatcc_builder_start_buffer@@Base+0x128>
   173a8:	ldr	r3, [pc, #44]	; 173dc <flatcc_builder_start_buffer@@Base+0x154>
   173ac:	ldr	r3, [r4, r3]
   173b0:	ldr	r3, [r3]
   173b4:	str	r3, [r2]
   173b8:	ldr	r3, [fp, #-16]
   173bc:	ldr	r3, [r3, #32]
   173c0:	mov	r2, #1
   173c4:	strh	r2, [r3, #14]
   173c8:	mov	r3, #0
   173cc:	mov	r0, r3
   173d0:	sub	sp, fp, #8
   173d4:	pop	{r4, fp, pc}
   173d8:	andeq	r6, r1, r0, asr sp
   173dc:	andeq	r0, r0, ip, asr #32

000173e0 <flatcc_builder_end_buffer@@Base>:
   173e0:	push	{fp, lr}
   173e4:	add	fp, sp, #4
   173e8:	sub	sp, sp, #24
   173ec:	str	r0, [fp, #-16]
   173f0:	str	r1, [fp, #-20]	; 0xffffffec
   173f4:	ldr	r3, [fp, #-16]
   173f8:	ldrh	r3, [r3, #164]	; 0xa4
   173fc:	and	r3, r3, #2
   17400:	str	r3, [fp, #-8]
   17404:	ldr	r3, [fp, #-16]
   17408:	ldr	r3, [r3, #152]	; 0x98
   1740c:	cmp	r3, #0
   17410:	movne	r3, #1
   17414:	moveq	r3, #0
   17418:	uxtb	r3, r3
   1741c:	mov	r2, r3
   17420:	ldr	r3, [fp, #-8]
   17424:	orr	r3, r3, r2
   17428:	str	r3, [fp, #-8]
   1742c:	ldr	r3, [fp, #-16]
   17430:	ldr	r3, [r3, #32]
   17434:	ldrh	r3, [r3, #14]
   17438:	cmp	r3, #1
   1743c:	beq	17460 <flatcc_builder_end_buffer@@Base+0x80>
   17440:	ldr	r3, [pc, #224]	; 17528 <flatcc_builder_end_buffer@@Base+0x148>
   17444:	add	r3, pc, r3
   17448:	ldr	r2, [pc, #220]	; 1752c <flatcc_builder_end_buffer@@Base+0x14c>
   1744c:	ldr	r1, [pc, #220]	; 17530 <flatcc_builder_end_buffer@@Base+0x150>
   17450:	add	r1, pc, r1
   17454:	ldr	r0, [pc, #216]	; 17534 <flatcc_builder_end_buffer@@Base+0x154>
   17458:	add	r0, pc, r0
   1745c:	bl	1202c <__assert_fail@plt>
   17460:	ldr	r3, [fp, #-16]
   17464:	ldrh	r3, [r3, #132]	; 0x84
   17468:	mov	r1, r3
   1746c:	ldr	r0, [fp, #-16]
   17470:	bl	160cc <flatcc_builder_clear@@Base+0xb0>
   17474:	ldr	r3, [fp, #-16]
   17478:	add	r1, r3, #168	; 0xa8
   1747c:	ldr	r3, [fp, #-16]
   17480:	ldrh	r0, [r3, #132]	; 0x84
   17484:	ldr	r3, [fp, #-16]
   17488:	ldrh	r3, [r3, #128]	; 0x80
   1748c:	ldr	r2, [fp, #-8]
   17490:	str	r2, [sp, #4]
   17494:	str	r3, [sp]
   17498:	ldr	r3, [fp, #-20]	; 0xffffffec
   1749c:	mov	r2, r0
   174a0:	ldr	r0, [fp, #-16]
   174a4:	bl	16d28 <flatcc_builder_create_buffer@@Base>
   174a8:	str	r0, [fp, #-12]
   174ac:	ldr	r3, [fp, #-12]
   174b0:	cmp	r3, #0
   174b4:	bne	174c0 <flatcc_builder_end_buffer@@Base+0xe0>
   174b8:	mov	r3, #0
   174bc:	b	1751c <flatcc_builder_end_buffer@@Base+0x13c>
   174c0:	ldr	r3, [fp, #-16]
   174c4:	ldr	r3, [r3, #32]
   174c8:	ldr	r2, [r3, #20]
   174cc:	ldr	r3, [fp, #-16]
   174d0:	str	r2, [r3, #144]	; 0x90
   174d4:	ldr	r3, [fp, #-16]
   174d8:	ldr	r3, [r3, #32]
   174dc:	ldr	r2, [r3, #28]
   174e0:	ldr	r3, [fp, #-16]
   174e4:	str	r2, [r3, #152]	; 0x98
   174e8:	ldr	r3, [fp, #-16]
   174ec:	ldr	r3, [r3, #32]
   174f0:	ldr	r2, [r3, #16]
   174f4:	ldr	r3, [fp, #-16]
   174f8:	str	r2, [r3, #168]	; 0xa8
   174fc:	ldr	r3, [fp, #-16]
   17500:	ldr	r3, [r3, #32]
   17504:	ldrh	r2, [r3, #32]
   17508:	ldr	r3, [fp, #-16]
   1750c:	strh	r2, [r3, #164]	; 0xa4
   17510:	ldr	r0, [fp, #-16]
   17514:	bl	16640 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   17518:	ldr	r3, [fp, #-12]
   1751c:	mov	r0, r3
   17520:	sub	sp, fp, #4
   17524:	pop	{fp, pc}
   17528:	andeq	r5, r0, r4, asr r7
   1752c:	andeq	r0, r0, r6, asr #6
   17530:	andeq	r5, r0, ip, lsr r2
   17534:	andeq	r5, r0, r4, lsl #6

00017538 <flatcc_builder_start_struct@@Base>:
   17538:	push	{fp, lr}
   1753c:	add	fp, sp, #4
   17540:	sub	sp, sp, #16
   17544:	str	r0, [fp, #-8]
   17548:	str	r1, [fp, #-12]
   1754c:	mov	r3, r2
   17550:	strh	r3, [fp, #-14]
   17554:	ldrh	r3, [fp, #-14]
   17558:	mov	r1, r3
   1755c:	ldr	r0, [fp, #-8]
   17560:	bl	16460 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   17564:	mov	r3, r0
   17568:	cmp	r3, #0
   1756c:	beq	17578 <flatcc_builder_start_struct@@Base+0x40>
   17570:	mov	r3, #0
   17574:	b	175a4 <flatcc_builder_start_struct@@Base+0x6c>
   17578:	ldr	r3, [fp, #-8]
   1757c:	ldr	r3, [r3, #32]
   17580:	mov	r2, #2
   17584:	strh	r2, [r3, #14]
   17588:	mvn	r1, #3
   1758c:	ldr	r0, [fp, #-8]
   17590:	bl	153d8 <flatcc_builder_default_alloc@@Base+0x1c8>
   17594:	ldr	r1, [fp, #-12]
   17598:	ldr	r0, [fp, #-8]
   1759c:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   175a0:	mov	r3, r0
   175a4:	mov	r0, r3
   175a8:	sub	sp, fp, #4
   175ac:	pop	{fp, pc}

000175b0 <flatcc_builder_struct_edit@@Base>:
   175b0:	push	{fp}		; (str fp, [sp, #-4]!)
   175b4:	add	fp, sp, #0
   175b8:	sub	sp, sp, #12
   175bc:	str	r0, [fp, #-8]
   175c0:	ldr	r3, [fp, #-8]
   175c4:	ldr	r3, [r3, #16]
   175c8:	mov	r0, r3
   175cc:	add	sp, fp, #0
   175d0:	pop	{fp}		; (ldr fp, [sp], #4)
   175d4:	bx	lr

000175d8 <flatcc_builder_end_struct@@Base>:
   175d8:	push	{fp, lr}
   175dc:	add	fp, sp, #4
   175e0:	sub	sp, sp, #16
   175e4:	str	r0, [fp, #-16]
   175e8:	ldr	r3, [fp, #-16]
   175ec:	ldr	r3, [r3, #32]
   175f0:	ldrh	r3, [r3, #14]
   175f4:	cmp	r3, #2
   175f8:	beq	1761c <flatcc_builder_end_struct@@Base+0x44>
   175fc:	ldr	r3, [pc, #104]	; 1766c <flatcc_builder_end_struct@@Base+0x94>
   17600:	add	r3, pc, r3
   17604:	mov	r2, #872	; 0x368
   17608:	ldr	r1, [pc, #96]	; 17670 <flatcc_builder_end_struct@@Base+0x98>
   1760c:	add	r1, pc, r1
   17610:	ldr	r0, [pc, #92]	; 17674 <flatcc_builder_end_struct@@Base+0x9c>
   17614:	add	r0, pc, r0
   17618:	bl	1202c <__assert_fail@plt>
   1761c:	ldr	r3, [fp, #-16]
   17620:	ldr	r1, [r3, #16]
   17624:	ldr	r3, [fp, #-16]
   17628:	ldr	r2, [r3, #20]
   1762c:	ldr	r3, [fp, #-16]
   17630:	ldrh	r3, [r3, #130]	; 0x82
   17634:	ldr	r0, [fp, #-16]
   17638:	bl	17104 <flatcc_builder_create_struct@@Base>
   1763c:	str	r0, [fp, #-8]
   17640:	ldr	r3, [fp, #-8]
   17644:	cmp	r3, #0
   17648:	bne	17654 <flatcc_builder_end_struct@@Base+0x7c>
   1764c:	mov	r3, #0
   17650:	b	17660 <flatcc_builder_end_struct@@Base+0x88>
   17654:	ldr	r0, [fp, #-16]
   17658:	bl	16640 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1765c:	ldr	r3, [fp, #-8]
   17660:	mov	r0, r3
   17664:	sub	sp, fp, #4
   17668:	pop	{fp, pc}
   1766c:			; <UNDEFINED> instruction: 0x000055b4
   17670:	andeq	r5, r0, r0, lsl #1
   17674:	andeq	r5, r0, r4, ror r1
   17678:	push	{fp, lr}
   1767c:	add	fp, sp, #4
   17680:	sub	sp, sp, #24
   17684:	str	r0, [fp, #-16]
   17688:	str	r1, [fp, #-20]	; 0xffffffec
   1768c:	str	r2, [fp, #-24]	; 0xffffffe8
   17690:	ldr	r3, [fp, #-16]
   17694:	ldr	r3, [r3, #32]
   17698:	ldr	r3, [r3, #20]
   1769c:	str	r3, [fp, #-8]
   176a0:	ldr	r2, [fp, #-8]
   176a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   176a8:	add	r3, r2, r3
   176ac:	str	r3, [fp, #-12]
   176b0:	ldr	r2, [fp, #-8]
   176b4:	ldr	r3, [fp, #-12]
   176b8:	cmp	r2, r3
   176bc:	bhi	176d0 <flatcc_builder_end_struct@@Base+0xf8>
   176c0:	ldr	r2, [fp, #-12]
   176c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176c8:	cmp	r2, r3
   176cc:	bls	17718 <flatcc_builder_end_struct@@Base+0x140>
   176d0:	ldr	r2, [fp, #-8]
   176d4:	ldr	r3, [fp, #-12]
   176d8:	cmp	r2, r3
   176dc:	bhi	176f0 <flatcc_builder_end_struct@@Base+0x118>
   176e0:	ldr	r2, [fp, #-12]
   176e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176e8:	cmp	r2, r3
   176ec:	bls	17710 <flatcc_builder_end_struct@@Base+0x138>
   176f0:	ldr	r3, [pc, #64]	; 17738 <flatcc_builder_end_struct@@Base+0x160>
   176f4:	add	r3, pc, r3
   176f8:	mov	r2, #892	; 0x37c
   176fc:	ldr	r1, [pc, #56]	; 1773c <flatcc_builder_end_struct@@Base+0x164>
   17700:	add	r1, pc, r1
   17704:	ldr	r0, [pc, #52]	; 17740 <flatcc_builder_end_struct@@Base+0x168>
   17708:	add	r0, pc, r0
   1770c:	bl	1202c <__assert_fail@plt>
   17710:	mvn	r3, #0
   17714:	b	1772c <flatcc_builder_end_struct@@Base+0x154>
   17718:	ldr	r3, [fp, #-16]
   1771c:	ldr	r3, [r3, #32]
   17720:	ldr	r2, [fp, #-12]
   17724:	str	r2, [r3, #20]
   17728:	mov	r3, #0
   1772c:	mov	r0, r3
   17730:	sub	sp, fp, #4
   17734:	pop	{fp, pc}
   17738:	ldrdeq	r5, [r0], -ip
   1773c:	andeq	r4, r0, ip, lsl #31
   17740:	andeq	r5, r0, ip, lsr #1

00017744 <flatcc_builder_extend_vector@@Base>:
   17744:	push	{fp, lr}
   17748:	add	fp, sp, #4
   1774c:	sub	sp, sp, #8
   17750:	str	r0, [fp, #-8]
   17754:	str	r1, [fp, #-12]
   17758:	ldr	r3, [fp, #-8]
   1775c:	ldr	r3, [r3, #32]
   17760:	ldr	r3, [r3, #24]
   17764:	mov	r2, r3
   17768:	ldr	r1, [fp, #-12]
   1776c:	ldr	r0, [fp, #-8]
   17770:	bl	17678 <flatcc_builder_end_struct@@Base+0xa0>
   17774:	mov	r3, r0
   17778:	cmp	r3, #0
   1777c:	beq	17788 <flatcc_builder_extend_vector@@Base+0x44>
   17780:	mov	r3, #0
   17784:	b	177ac <flatcc_builder_extend_vector@@Base+0x68>
   17788:	ldr	r3, [fp, #-8]
   1778c:	ldr	r3, [r3, #32]
   17790:	ldr	r3, [r3, #16]
   17794:	ldr	r2, [fp, #-12]
   17798:	mul	r3, r2, r3
   1779c:	mov	r1, r3
   177a0:	ldr	r0, [fp, #-8]
   177a4:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   177a8:	mov	r3, r0
   177ac:	mov	r0, r3
   177b0:	sub	sp, fp, #4
   177b4:	pop	{fp, pc}

000177b8 <flatcc_builder_vector_push@@Base>:
   177b8:	push	{fp, lr}
   177bc:	add	fp, sp, #4
   177c0:	sub	sp, sp, #8
   177c4:	str	r0, [fp, #-8]
   177c8:	str	r1, [fp, #-12]
   177cc:	ldr	r3, [fp, #-8]
   177d0:	ldr	r3, [r3, #32]
   177d4:	ldrh	r3, [r3, #14]
   177d8:	cmp	r3, #4
   177dc:	beq	17800 <flatcc_builder_vector_push@@Base+0x48>
   177e0:	ldr	r3, [pc, #200]	; 178b0 <flatcc_builder_vector_push@@Base+0xf8>
   177e4:	add	r3, pc, r3
   177e8:	ldr	r2, [pc, #196]	; 178b4 <flatcc_builder_vector_push@@Base+0xfc>
   177ec:	ldr	r1, [pc, #196]	; 178b8 <flatcc_builder_vector_push@@Base+0x100>
   177f0:	add	r1, pc, r1
   177f4:	ldr	r0, [pc, #192]	; 178bc <flatcc_builder_vector_push@@Base+0x104>
   177f8:	add	r0, pc, r0
   177fc:	bl	1202c <__assert_fail@plt>
   17800:	ldr	r3, [fp, #-8]
   17804:	ldr	r3, [r3, #32]
   17808:	ldr	r2, [r3, #20]
   1780c:	ldr	r3, [fp, #-8]
   17810:	ldr	r3, [r3, #32]
   17814:	ldr	r3, [r3, #24]
   17818:	cmp	r2, r3
   1781c:	bls	17868 <flatcc_builder_vector_push@@Base+0xb0>
   17820:	ldr	r3, [fp, #-8]
   17824:	ldr	r3, [r3, #32]
   17828:	ldr	r2, [r3, #20]
   1782c:	ldr	r3, [fp, #-8]
   17830:	ldr	r3, [r3, #32]
   17834:	ldr	r3, [r3, #24]
   17838:	cmp	r2, r3
   1783c:	bls	17860 <flatcc_builder_vector_push@@Base+0xa8>
   17840:	ldr	r3, [pc, #120]	; 178c0 <flatcc_builder_vector_push@@Base+0x108>
   17844:	add	r3, pc, r3
   17848:	mov	r2, #908	; 0x38c
   1784c:	ldr	r1, [pc, #112]	; 178c4 <flatcc_builder_vector_push@@Base+0x10c>
   17850:	add	r1, pc, r1
   17854:	ldr	r0, [pc, #108]	; 178c8 <flatcc_builder_vector_push@@Base+0x110>
   17858:	add	r0, pc, r0
   1785c:	bl	1202c <__assert_fail@plt>
   17860:	mov	r3, #0
   17864:	b	178a4 <flatcc_builder_vector_push@@Base+0xec>
   17868:	ldr	r3, [fp, #-8]
   1786c:	ldr	r3, [r3, #32]
   17870:	ldr	r2, [fp, #-8]
   17874:	ldr	r2, [r2, #32]
   17878:	ldr	r2, [r2, #20]
   1787c:	add	r2, r2, #1
   17880:	str	r2, [r3, #20]
   17884:	ldr	r3, [fp, #-8]
   17888:	ldr	r3, [r3, #32]
   1788c:	ldr	r3, [r3, #16]
   17890:	mov	r2, r3
   17894:	ldr	r1, [fp, #-12]
   17898:	ldr	r0, [fp, #-8]
   1789c:	bl	155f8 <flatcc_builder_default_alloc@@Base+0x3e8>
   178a0:	mov	r3, r0
   178a4:	mov	r0, r3
   178a8:	sub	sp, fp, #4
   178ac:	pop	{fp, pc}
   178b0:	andeq	r5, r0, r0, lsl #8
   178b4:	andeq	r0, r0, fp, lsl #7
   178b8:	muleq	r0, ip, lr
   178bc:	ldrdeq	r4, [r0], -r8
   178c0:	andeq	r5, r0, r0, lsr #7
   178c4:	andeq	r4, r0, ip, lsr lr
   178c8:	andeq	r4, r0, r4, lsr #31

000178cc <flatcc_builder_append_vector@@Base>:
   178cc:	push	{fp, lr}
   178d0:	add	fp, sp, #4
   178d4:	sub	sp, sp, #16
   178d8:	str	r0, [fp, #-8]
   178dc:	str	r1, [fp, #-12]
   178e0:	str	r2, [fp, #-16]
   178e4:	ldr	r3, [fp, #-8]
   178e8:	ldr	r3, [r3, #32]
   178ec:	ldrh	r3, [r3, #14]
   178f0:	cmp	r3, #4
   178f4:	beq	17918 <flatcc_builder_append_vector@@Base+0x4c>
   178f8:	ldr	r3, [pc, #124]	; 1797c <flatcc_builder_append_vector@@Base+0xb0>
   178fc:	add	r3, pc, r3
   17900:	ldr	r2, [pc, #120]	; 17980 <flatcc_builder_append_vector@@Base+0xb4>
   17904:	ldr	r1, [pc, #120]	; 17984 <flatcc_builder_append_vector@@Base+0xb8>
   17908:	add	r1, pc, r1
   1790c:	ldr	r0, [pc, #116]	; 17988 <flatcc_builder_append_vector@@Base+0xbc>
   17910:	add	r0, pc, r0
   17914:	bl	1202c <__assert_fail@plt>
   17918:	ldr	r3, [fp, #-8]
   1791c:	ldr	r3, [r3, #32]
   17920:	ldr	r3, [r3, #24]
   17924:	mov	r2, r3
   17928:	ldr	r1, [fp, #-16]
   1792c:	ldr	r0, [fp, #-8]
   17930:	bl	17678 <flatcc_builder_end_struct@@Base+0xa0>
   17934:	mov	r3, r0
   17938:	cmp	r3, #0
   1793c:	beq	17948 <flatcc_builder_append_vector@@Base+0x7c>
   17940:	mov	r3, #0
   17944:	b	17970 <flatcc_builder_append_vector@@Base+0xa4>
   17948:	ldr	r3, [fp, #-8]
   1794c:	ldr	r3, [r3, #32]
   17950:	ldr	r3, [r3, #16]
   17954:	ldr	r2, [fp, #-16]
   17958:	mul	r3, r2, r3
   1795c:	mov	r2, r3
   17960:	ldr	r1, [fp, #-12]
   17964:	ldr	r0, [fp, #-8]
   17968:	bl	155f8 <flatcc_builder_default_alloc@@Base+0x3e8>
   1796c:	mov	r3, r0
   17970:	mov	r0, r3
   17974:	sub	sp, fp, #4
   17978:	pop	{fp, pc}
   1797c:	andeq	r5, r0, r4, lsl #6
   17980:	muleq	r0, r3, r3
   17984:	andeq	r4, r0, r4, lsl #27
   17988:	andeq	r4, r0, r0, asr #29

0001798c <flatcc_builder_extend_offset_vector@@Base>:
   1798c:	push	{fp, lr}
   17990:	add	fp, sp, #4
   17994:	sub	sp, sp, #8
   17998:	str	r0, [fp, #-8]
   1799c:	str	r1, [fp, #-12]
   179a0:	mvn	r2, #-1073741824	; 0xc0000000
   179a4:	ldr	r1, [fp, #-12]
   179a8:	ldr	r0, [fp, #-8]
   179ac:	bl	17678 <flatcc_builder_end_struct@@Base+0xa0>
   179b0:	mov	r3, r0
   179b4:	cmp	r3, #0
   179b8:	beq	179c4 <flatcc_builder_extend_offset_vector@@Base+0x38>
   179bc:	mov	r3, #0
   179c0:	b	179dc <flatcc_builder_extend_offset_vector@@Base+0x50>
   179c4:	ldr	r3, [fp, #-12]
   179c8:	lsl	r3, r3, #2
   179cc:	mov	r1, r3
   179d0:	ldr	r0, [fp, #-8]
   179d4:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   179d8:	mov	r3, r0
   179dc:	mov	r0, r3
   179e0:	sub	sp, fp, #4
   179e4:	pop	{fp, pc}

000179e8 <flatcc_builder_offset_vector_push@@Base>:
   179e8:	push	{fp, lr}
   179ec:	add	fp, sp, #4
   179f0:	sub	sp, sp, #16
   179f4:	str	r0, [fp, #-16]
   179f8:	str	r1, [fp, #-20]	; 0xffffffec
   179fc:	ldr	r3, [fp, #-16]
   17a00:	ldr	r3, [r3, #32]
   17a04:	ldrh	r3, [r3, #14]
   17a08:	cmp	r3, #5
   17a0c:	beq	17a30 <flatcc_builder_offset_vector_push@@Base+0x48>
   17a10:	ldr	r3, [pc, #144]	; 17aa8 <flatcc_builder_offset_vector_push@@Base+0xc0>
   17a14:	add	r3, pc, r3
   17a18:	ldr	r2, [pc, #140]	; 17aac <flatcc_builder_offset_vector_push@@Base+0xc4>
   17a1c:	ldr	r1, [pc, #140]	; 17ab0 <flatcc_builder_offset_vector_push@@Base+0xc8>
   17a20:	add	r1, pc, r1
   17a24:	ldr	r0, [pc, #136]	; 17ab4 <flatcc_builder_offset_vector_push@@Base+0xcc>
   17a28:	add	r0, pc, r0
   17a2c:	bl	1202c <__assert_fail@plt>
   17a30:	ldr	r3, [fp, #-16]
   17a34:	ldr	r3, [r3, #32]
   17a38:	ldr	r3, [r3, #20]
   17a3c:	cmn	r3, #-1073741823	; 0xc0000001
   17a40:	bne	17a4c <flatcc_builder_offset_vector_push@@Base+0x64>
   17a44:	mov	r3, #0
   17a48:	b	17a9c <flatcc_builder_offset_vector_push@@Base+0xb4>
   17a4c:	ldr	r3, [fp, #-16]
   17a50:	ldr	r3, [r3, #32]
   17a54:	ldr	r2, [fp, #-16]
   17a58:	ldr	r2, [r2, #32]
   17a5c:	ldr	r2, [r2, #20]
   17a60:	add	r2, r2, #1
   17a64:	str	r2, [r3, #20]
   17a68:	mov	r1, #4
   17a6c:	ldr	r0, [fp, #-16]
   17a70:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   17a74:	str	r0, [fp, #-8]
   17a78:	ldr	r3, [fp, #-8]
   17a7c:	cmp	r3, #0
   17a80:	bne	17a8c <flatcc_builder_offset_vector_push@@Base+0xa4>
   17a84:	mov	r3, #0
   17a88:	b	17a9c <flatcc_builder_offset_vector_push@@Base+0xb4>
   17a8c:	ldr	r3, [fp, #-8]
   17a90:	ldr	r2, [fp, #-20]	; 0xffffffec
   17a94:	str	r2, [r3]
   17a98:	ldr	r3, [fp, #-8]
   17a9c:	mov	r0, r3
   17aa0:	sub	sp, fp, #4
   17aa4:	pop	{fp, pc}
   17aa8:	andeq	r5, r0, ip, lsl #4
   17aac:	andeq	r0, r0, r6, lsr #7
   17ab0:	andeq	r4, r0, ip, ror #24
   17ab4:	andeq	r4, r0, r4, lsl lr

00017ab8 <flatcc_builder_append_offset_vector@@Base>:
   17ab8:	push	{fp, lr}
   17abc:	add	fp, sp, #4
   17ac0:	sub	sp, sp, #16
   17ac4:	str	r0, [fp, #-8]
   17ac8:	str	r1, [fp, #-12]
   17acc:	str	r2, [fp, #-16]
   17ad0:	ldr	r3, [fp, #-8]
   17ad4:	ldr	r3, [r3, #32]
   17ad8:	ldrh	r3, [r3, #14]
   17adc:	cmp	r3, #5
   17ae0:	beq	17b04 <flatcc_builder_append_offset_vector@@Base+0x4c>
   17ae4:	ldr	r3, [pc, #100]	; 17b50 <flatcc_builder_append_offset_vector@@Base+0x98>
   17ae8:	add	r3, pc, r3
   17aec:	mov	r2, #948	; 0x3b4
   17af0:	ldr	r1, [pc, #92]	; 17b54 <flatcc_builder_append_offset_vector@@Base+0x9c>
   17af4:	add	r1, pc, r1
   17af8:	ldr	r0, [pc, #88]	; 17b58 <flatcc_builder_append_offset_vector@@Base+0xa0>
   17afc:	add	r0, pc, r0
   17b00:	bl	1202c <__assert_fail@plt>
   17b04:	mvn	r2, #-1073741824	; 0xc0000000
   17b08:	ldr	r1, [fp, #-16]
   17b0c:	ldr	r0, [fp, #-8]
   17b10:	bl	17678 <flatcc_builder_end_struct@@Base+0xa0>
   17b14:	mov	r3, r0
   17b18:	cmp	r3, #0
   17b1c:	beq	17b28 <flatcc_builder_append_offset_vector@@Base+0x70>
   17b20:	mov	r3, #0
   17b24:	b	17b44 <flatcc_builder_append_offset_vector@@Base+0x8c>
   17b28:	ldr	r3, [fp, #-16]
   17b2c:	lsl	r3, r3, #2
   17b30:	mov	r2, r3
   17b34:	ldr	r1, [fp, #-12]
   17b38:	ldr	r0, [fp, #-8]
   17b3c:	bl	155f8 <flatcc_builder_default_alloc@@Base+0x3e8>
   17b40:	mov	r3, r0
   17b44:	mov	r0, r3
   17b48:	sub	sp, fp, #4
   17b4c:	pop	{fp, pc}
   17b50:	andeq	r5, r0, ip, asr r1
   17b54:	muleq	r0, r8, fp
   17b58:	andeq	r4, r0, r0, asr #26

00017b5c <flatcc_builder_extend_string@@Base>:
   17b5c:	push	{fp, lr}
   17b60:	add	fp, sp, #4
   17b64:	sub	sp, sp, #8
   17b68:	str	r0, [fp, #-8]
   17b6c:	str	r1, [fp, #-12]
   17b70:	ldr	r3, [fp, #-8]
   17b74:	ldr	r3, [r3, #32]
   17b78:	ldrh	r3, [r3, #14]
   17b7c:	cmp	r3, #6
   17b80:	beq	17ba4 <flatcc_builder_extend_string@@Base+0x48>
   17b84:	ldr	r3, [pc, #88]	; 17be4 <flatcc_builder_extend_string@@Base+0x88>
   17b88:	add	r3, pc, r3
   17b8c:	ldr	r2, [pc, #84]	; 17be8 <flatcc_builder_extend_string@@Base+0x8c>
   17b90:	ldr	r1, [pc, #84]	; 17bec <flatcc_builder_extend_string@@Base+0x90>
   17b94:	add	r1, pc, r1
   17b98:	ldr	r0, [pc, #80]	; 17bf0 <flatcc_builder_extend_string@@Base+0x94>
   17b9c:	add	r0, pc, r0
   17ba0:	bl	1202c <__assert_fail@plt>
   17ba4:	mvn	r2, #0
   17ba8:	ldr	r1, [fp, #-12]
   17bac:	ldr	r0, [fp, #-8]
   17bb0:	bl	17678 <flatcc_builder_end_struct@@Base+0xa0>
   17bb4:	mov	r3, r0
   17bb8:	cmp	r3, #0
   17bbc:	beq	17bc8 <flatcc_builder_extend_string@@Base+0x6c>
   17bc0:	mov	r3, #0
   17bc4:	b	17bd8 <flatcc_builder_extend_string@@Base+0x7c>
   17bc8:	ldr	r1, [fp, #-12]
   17bcc:	ldr	r0, [fp, #-8]
   17bd0:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   17bd4:	mov	r3, r0
   17bd8:	mov	r0, r3
   17bdc:	sub	sp, fp, #4
   17be0:	pop	{fp, pc}
   17be4:	andeq	r5, r0, r0, ror #1
   17be8:			; <UNDEFINED> instruction: 0x000003bd
   17bec:	strdeq	r4, [r0], -r8
   17bf0:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>

00017bf4 <flatcc_builder_append_string@@Base>:
   17bf4:	push	{fp, lr}
   17bf8:	add	fp, sp, #4
   17bfc:	sub	sp, sp, #16
   17c00:	str	r0, [fp, #-8]
   17c04:	str	r1, [fp, #-12]
   17c08:	str	r2, [fp, #-16]
   17c0c:	ldr	r3, [fp, #-8]
   17c10:	ldr	r3, [r3, #32]
   17c14:	ldrh	r3, [r3, #14]
   17c18:	cmp	r3, #6
   17c1c:	beq	17c40 <flatcc_builder_append_string@@Base+0x4c>
   17c20:	ldr	r3, [pc, #92]	; 17c84 <flatcc_builder_append_string@@Base+0x90>
   17c24:	add	r3, pc, r3
   17c28:	ldr	r2, [pc, #88]	; 17c88 <flatcc_builder_append_string@@Base+0x94>
   17c2c:	ldr	r1, [pc, #88]	; 17c8c <flatcc_builder_append_string@@Base+0x98>
   17c30:	add	r1, pc, r1
   17c34:	ldr	r0, [pc, #84]	; 17c90 <flatcc_builder_append_string@@Base+0x9c>
   17c38:	add	r0, pc, r0
   17c3c:	bl	1202c <__assert_fail@plt>
   17c40:	mvn	r2, #0
   17c44:	ldr	r1, [fp, #-16]
   17c48:	ldr	r0, [fp, #-8]
   17c4c:	bl	17678 <flatcc_builder_end_struct@@Base+0xa0>
   17c50:	mov	r3, r0
   17c54:	cmp	r3, #0
   17c58:	beq	17c64 <flatcc_builder_append_string@@Base+0x70>
   17c5c:	mov	r3, #0
   17c60:	b	17c78 <flatcc_builder_append_string@@Base+0x84>
   17c64:	ldr	r2, [fp, #-16]
   17c68:	ldr	r1, [fp, #-12]
   17c6c:	ldr	r0, [fp, #-8]
   17c70:	bl	155f8 <flatcc_builder_default_alloc@@Base+0x3e8>
   17c74:	mov	r3, r0
   17c78:	mov	r0, r3
   17c7c:	sub	sp, fp, #4
   17c80:	pop	{fp, pc}
   17c84:	andeq	r5, r0, r4, rrx
   17c88:	andeq	r0, r0, r6, asr #7
   17c8c:	andeq	r4, r0, ip, asr sl
   17c90:	andeq	r4, r0, r8, lsr ip

00017c94 <flatcc_builder_append_string_str@@Base>:
   17c94:	push	{fp, lr}
   17c98:	add	fp, sp, #4
   17c9c:	sub	sp, sp, #8
   17ca0:	str	r0, [fp, #-8]
   17ca4:	str	r1, [fp, #-12]
   17ca8:	ldr	r0, [fp, #-12]
   17cac:	bl	11fe4 <strlen@plt>
   17cb0:	mov	r3, r0
   17cb4:	mov	r2, r3
   17cb8:	ldr	r1, [fp, #-12]
   17cbc:	ldr	r0, [fp, #-8]
   17cc0:	bl	17bf4 <flatcc_builder_append_string@@Base>
   17cc4:	mov	r3, r0
   17cc8:	mov	r0, r3
   17ccc:	sub	sp, fp, #4
   17cd0:	pop	{fp, pc}

00017cd4 <flatcc_builder_append_string_strn@@Base>:
   17cd4:	push	{fp, lr}
   17cd8:	add	fp, sp, #4
   17cdc:	sub	sp, sp, #16
   17ce0:	str	r0, [fp, #-8]
   17ce4:	str	r1, [fp, #-12]
   17ce8:	str	r2, [fp, #-16]
   17cec:	ldr	r1, [fp, #-16]
   17cf0:	ldr	r0, [fp, #-12]
   17cf4:	bl	151bc <main@@Base+0x328>
   17cf8:	mov	r3, r0
   17cfc:	mov	r2, r3
   17d00:	ldr	r1, [fp, #-12]
   17d04:	ldr	r0, [fp, #-8]
   17d08:	bl	17bf4 <flatcc_builder_append_string@@Base>
   17d0c:	mov	r3, r0
   17d10:	mov	r0, r3
   17d14:	sub	sp, fp, #4
   17d18:	pop	{fp, pc}

00017d1c <flatcc_builder_truncate_vector@@Base>:
   17d1c:	push	{fp, lr}
   17d20:	add	fp, sp, #4
   17d24:	sub	sp, sp, #8
   17d28:	str	r0, [fp, #-8]
   17d2c:	str	r1, [fp, #-12]
   17d30:	ldr	r3, [fp, #-8]
   17d34:	ldr	r3, [r3, #32]
   17d38:	ldrh	r3, [r3, #14]
   17d3c:	cmp	r3, #4
   17d40:	beq	17d64 <flatcc_builder_truncate_vector@@Base+0x48>
   17d44:	ldr	r3, [pc, #192]	; 17e0c <flatcc_builder_truncate_vector@@Base+0xf0>
   17d48:	add	r3, pc, r3
   17d4c:	ldr	r2, [pc, #188]	; 17e10 <flatcc_builder_truncate_vector@@Base+0xf4>
   17d50:	ldr	r1, [pc, #188]	; 17e14 <flatcc_builder_truncate_vector@@Base+0xf8>
   17d54:	add	r1, pc, r1
   17d58:	ldr	r0, [pc, #184]	; 17e18 <flatcc_builder_truncate_vector@@Base+0xfc>
   17d5c:	add	r0, pc, r0
   17d60:	bl	1202c <__assert_fail@plt>
   17d64:	ldr	r3, [fp, #-8]
   17d68:	ldr	r3, [r3, #32]
   17d6c:	ldr	r2, [r3, #20]
   17d70:	ldr	r3, [fp, #-12]
   17d74:	cmp	r2, r3
   17d78:	bcs	17dbc <flatcc_builder_truncate_vector@@Base+0xa0>
   17d7c:	ldr	r3, [fp, #-8]
   17d80:	ldr	r3, [r3, #32]
   17d84:	ldr	r2, [r3, #20]
   17d88:	ldr	r3, [fp, #-12]
   17d8c:	cmp	r2, r3
   17d90:	bcs	17db4 <flatcc_builder_truncate_vector@@Base+0x98>
   17d94:	ldr	r3, [pc, #128]	; 17e1c <flatcc_builder_truncate_vector@@Base+0x100>
   17d98:	add	r3, pc, r3
   17d9c:	ldr	r2, [pc, #124]	; 17e20 <flatcc_builder_truncate_vector@@Base+0x104>
   17da0:	ldr	r1, [pc, #124]	; 17e24 <flatcc_builder_truncate_vector@@Base+0x108>
   17da4:	add	r1, pc, r1
   17da8:	ldr	r0, [pc, #120]	; 17e28 <flatcc_builder_truncate_vector@@Base+0x10c>
   17dac:	add	r0, pc, r0
   17db0:	bl	1202c <__assert_fail@plt>
   17db4:	mvn	r3, #0
   17db8:	b	17e00 <flatcc_builder_truncate_vector@@Base+0xe4>
   17dbc:	ldr	r3, [fp, #-8]
   17dc0:	ldr	r3, [r3, #32]
   17dc4:	ldr	r2, [fp, #-8]
   17dc8:	ldr	r2, [r2, #32]
   17dcc:	ldr	r1, [r2, #20]
   17dd0:	ldr	r2, [fp, #-12]
   17dd4:	sub	r2, r1, r2
   17dd8:	str	r2, [r3, #20]
   17ddc:	ldr	r3, [fp, #-8]
   17de0:	ldr	r3, [r3, #32]
   17de4:	ldr	r3, [r3, #16]
   17de8:	ldr	r2, [fp, #-12]
   17dec:	mul	r3, r2, r3
   17df0:	mov	r1, r3
   17df4:	ldr	r0, [fp, #-8]
   17df8:	bl	1559c <flatcc_builder_default_alloc@@Base+0x38c>
   17dfc:	mov	r3, #0
   17e00:	mov	r0, r3
   17e04:	sub	sp, fp, #4
   17e08:	pop	{fp, pc}
   17e0c:	andeq	r4, r0, r0, ror #30
   17e10:	ldrdeq	r0, [r0], -r9
   17e14:	andeq	r4, r0, r8, lsr r9
   17e18:	andeq	r4, r0, r4, ror sl
   17e1c:	andeq	r4, r0, r0, lsl pc
   17e20:	ldrdeq	r0, [r0], -sl
   17e24:	andeq	r4, r0, r8, ror #17
   17e28:	strdeq	r4, [r0], -r0

00017e2c <flatcc_builder_truncate_offset_vector@@Base>:
   17e2c:	push	{fp, lr}
   17e30:	add	fp, sp, #4
   17e34:	sub	sp, sp, #8
   17e38:	str	r0, [fp, #-8]
   17e3c:	str	r1, [fp, #-12]
   17e40:	ldr	r3, [fp, #-8]
   17e44:	ldr	r3, [r3, #32]
   17e48:	ldrh	r3, [r3, #14]
   17e4c:	cmp	r3, #5
   17e50:	beq	17e74 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   17e54:	ldr	r3, [pc, #192]	; 17f1c <flatcc_builder_truncate_offset_vector@@Base+0xf0>
   17e58:	add	r3, pc, r3
   17e5c:	ldr	r2, [pc, #188]	; 17f20 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   17e60:	ldr	r1, [pc, #188]	; 17f24 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   17e64:	add	r1, pc, r1
   17e68:	ldr	r0, [pc, #184]	; 17f28 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   17e6c:	add	r0, pc, r0
   17e70:	bl	1202c <__assert_fail@plt>
   17e74:	ldr	r3, [fp, #-8]
   17e78:	ldr	r3, [r3, #32]
   17e7c:	ldr	r2, [r3, #20]
   17e80:	ldr	r3, [fp, #-12]
   17e84:	cmp	r2, r3
   17e88:	bcs	17ecc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   17e8c:	ldr	r3, [fp, #-8]
   17e90:	ldr	r3, [r3, #32]
   17e94:	ldr	r2, [r3, #20]
   17e98:	ldr	r3, [fp, #-12]
   17e9c:	cmp	r2, r3
   17ea0:	bcs	17ec4 <flatcc_builder_truncate_offset_vector@@Base+0x98>
   17ea4:	ldr	r3, [pc, #128]	; 17f2c <flatcc_builder_truncate_offset_vector@@Base+0x100>
   17ea8:	add	r3, pc, r3
   17eac:	ldr	r2, [pc, #124]	; 17f30 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   17eb0:	ldr	r1, [pc, #124]	; 17f34 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   17eb4:	add	r1, pc, r1
   17eb8:	ldr	r0, [pc, #120]	; 17f38 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   17ebc:	add	r0, pc, r0
   17ec0:	bl	1202c <__assert_fail@plt>
   17ec4:	mvn	r3, #0
   17ec8:	b	17f10 <flatcc_builder_truncate_offset_vector@@Base+0xe4>
   17ecc:	ldr	r3, [fp, #-8]
   17ed0:	ldr	r3, [r3, #32]
   17ed4:	ldr	r2, [fp, #-8]
   17ed8:	ldr	r2, [r2, #32]
   17edc:	ldr	r1, [r2, #20]
   17ee0:	ldr	r2, [fp, #-12]
   17ee4:	sub	r2, r1, r2
   17ee8:	str	r2, [r3, #20]
   17eec:	ldr	r3, [fp, #-8]
   17ef0:	ldr	r3, [r3, #32]
   17ef4:	ldr	r3, [r3, #16]
   17ef8:	ldr	r2, [fp, #-12]
   17efc:	mul	r3, r2, r3
   17f00:	mov	r1, r3
   17f04:	ldr	r0, [fp, #-8]
   17f08:	bl	1559c <flatcc_builder_default_alloc@@Base+0x38c>
   17f0c:	mov	r3, #0
   17f10:	mov	r0, r3
   17f14:	sub	sp, fp, #4
   17f18:	pop	{fp, pc}
   17f1c:	andeq	r4, r0, r0, ror lr
   17f20:	andeq	r0, r0, r2, ror #7
   17f24:	andeq	r4, r0, r8, lsr #16
   17f28:	ldrdeq	r4, [r0], -r0
   17f2c:	andeq	r4, r0, r0, lsr #28
   17f30:	andeq	r0, r0, r3, ror #7
   17f34:	ldrdeq	r4, [r0], -r8
   17f38:	andeq	r4, r0, r4, lsl #20

00017f3c <flatcc_builder_truncate_string@@Base>:
   17f3c:	push	{fp, lr}
   17f40:	add	fp, sp, #4
   17f44:	sub	sp, sp, #8
   17f48:	str	r0, [fp, #-8]
   17f4c:	str	r1, [fp, #-12]
   17f50:	ldr	r3, [fp, #-8]
   17f54:	ldr	r3, [r3, #32]
   17f58:	ldrh	r3, [r3, #14]
   17f5c:	cmp	r3, #6
   17f60:	beq	17f84 <flatcc_builder_truncate_string@@Base+0x48>
   17f64:	ldr	r3, [pc, #172]	; 18018 <flatcc_builder_truncate_string@@Base+0xdc>
   17f68:	add	r3, pc, r3
   17f6c:	ldr	r2, [pc, #168]	; 1801c <flatcc_builder_truncate_string@@Base+0xe0>
   17f70:	ldr	r1, [pc, #168]	; 18020 <flatcc_builder_truncate_string@@Base+0xe4>
   17f74:	add	r1, pc, r1
   17f78:	ldr	r0, [pc, #164]	; 18024 <flatcc_builder_truncate_string@@Base+0xe8>
   17f7c:	add	r0, pc, r0
   17f80:	bl	1202c <__assert_fail@plt>
   17f84:	ldr	r3, [fp, #-8]
   17f88:	ldr	r3, [r3, #32]
   17f8c:	ldr	r2, [r3, #20]
   17f90:	ldr	r3, [fp, #-12]
   17f94:	cmp	r2, r3
   17f98:	bcs	17fdc <flatcc_builder_truncate_string@@Base+0xa0>
   17f9c:	ldr	r3, [fp, #-8]
   17fa0:	ldr	r3, [r3, #32]
   17fa4:	ldr	r2, [r3, #20]
   17fa8:	ldr	r3, [fp, #-12]
   17fac:	cmp	r2, r3
   17fb0:	bcs	17fd4 <flatcc_builder_truncate_string@@Base+0x98>
   17fb4:	ldr	r3, [pc, #108]	; 18028 <flatcc_builder_truncate_string@@Base+0xec>
   17fb8:	add	r3, pc, r3
   17fbc:	mov	r2, #1004	; 0x3ec
   17fc0:	ldr	r1, [pc, #100]	; 1802c <flatcc_builder_truncate_string@@Base+0xf0>
   17fc4:	add	r1, pc, r1
   17fc8:	ldr	r0, [pc, #96]	; 18030 <flatcc_builder_truncate_string@@Base+0xf4>
   17fcc:	add	r0, pc, r0
   17fd0:	bl	1202c <__assert_fail@plt>
   17fd4:	mvn	r3, #0
   17fd8:	b	1800c <flatcc_builder_truncate_string@@Base+0xd0>
   17fdc:	ldr	r3, [fp, #-8]
   17fe0:	ldr	r3, [r3, #32]
   17fe4:	ldr	r2, [fp, #-8]
   17fe8:	ldr	r2, [r2, #32]
   17fec:	ldr	r1, [r2, #20]
   17ff0:	ldr	r2, [fp, #-12]
   17ff4:	sub	r2, r1, r2
   17ff8:	str	r2, [r3, #20]
   17ffc:	ldr	r1, [fp, #-12]
   18000:	ldr	r0, [fp, #-8]
   18004:	bl	1559c <flatcc_builder_default_alloc@@Base+0x38c>
   18008:	mov	r3, #0
   1800c:	mov	r0, r3
   18010:	sub	sp, fp, #4
   18014:	pop	{fp, pc}
   18018:	andeq	r4, r0, r8, lsl #27
   1801c:	andeq	r0, r0, fp, ror #7
   18020:	andeq	r4, r0, r8, lsl r7
   18024:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   18028:	andeq	r4, r0, r8, lsr sp
   1802c:	andeq	r4, r0, r8, asr #13
   18030:	andeq	r4, r0, r0, lsr r9

00018034 <flatcc_builder_start_vector@@Base>:
   18034:	push	{fp, lr}
   18038:	add	fp, sp, #4
   1803c:	sub	sp, sp, #16
   18040:	str	r0, [fp, #-8]
   18044:	str	r1, [fp, #-12]
   18048:	str	r3, [fp, #-20]	; 0xffffffec
   1804c:	strh	r2, [fp, #-14]
   18050:	sub	r3, fp, #14
   18054:	mov	r1, #4
   18058:	mov	r0, r3
   1805c:	bl	16114 <flatcc_builder_clear@@Base+0xf8>
   18060:	ldrh	r3, [fp, #-14]
   18064:	mov	r1, r3
   18068:	ldr	r0, [fp, #-8]
   1806c:	bl	16460 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18070:	mov	r3, r0
   18074:	cmp	r3, #0
   18078:	beq	18084 <flatcc_builder_start_vector@@Base+0x50>
   1807c:	mvn	r3, #0
   18080:	b	180d4 <flatcc_builder_start_vector@@Base+0xa0>
   18084:	ldr	r3, [fp, #-8]
   18088:	ldr	r3, [r3, #32]
   1808c:	ldr	r2, [fp, #-12]
   18090:	str	r2, [r3, #16]
   18094:	ldr	r3, [fp, #-8]
   18098:	ldr	r3, [r3, #32]
   1809c:	mov	r2, #0
   180a0:	str	r2, [r3, #20]
   180a4:	ldr	r3, [fp, #-8]
   180a8:	ldr	r3, [r3, #32]
   180ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   180b0:	str	r2, [r3, #24]
   180b4:	ldr	r3, [fp, #-8]
   180b8:	ldr	r3, [r3, #32]
   180bc:	mov	r2, #4
   180c0:	strh	r2, [r3, #14]
   180c4:	mvn	r1, #3
   180c8:	ldr	r0, [fp, #-8]
   180cc:	bl	153d8 <flatcc_builder_default_alloc@@Base+0x1c8>
   180d0:	mov	r3, #0
   180d4:	mov	r0, r3
   180d8:	sub	sp, fp, #4
   180dc:	pop	{fp, pc}

000180e0 <flatcc_builder_start_offset_vector@@Base>:
   180e0:	push	{fp, lr}
   180e4:	add	fp, sp, #4
   180e8:	sub	sp, sp, #8
   180ec:	str	r0, [fp, #-8]
   180f0:	mov	r1, #4
   180f4:	ldr	r0, [fp, #-8]
   180f8:	bl	16460 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   180fc:	mov	r3, r0
   18100:	cmp	r3, #0
   18104:	beq	18110 <flatcc_builder_start_offset_vector@@Base+0x30>
   18108:	mvn	r3, #0
   1810c:	b	18150 <flatcc_builder_start_offset_vector@@Base+0x70>
   18110:	ldr	r3, [fp, #-8]
   18114:	ldr	r3, [r3, #32]
   18118:	mov	r2, #4
   1811c:	str	r2, [r3, #16]
   18120:	ldr	r3, [fp, #-8]
   18124:	ldr	r3, [r3, #32]
   18128:	mov	r2, #0
   1812c:	str	r2, [r3, #20]
   18130:	ldr	r3, [fp, #-8]
   18134:	ldr	r3, [r3, #32]
   18138:	mov	r2, #5
   1813c:	strh	r2, [r3, #14]
   18140:	mvn	r1, #3
   18144:	ldr	r0, [fp, #-8]
   18148:	bl	153d8 <flatcc_builder_default_alloc@@Base+0x1c8>
   1814c:	mov	r3, #0
   18150:	mov	r0, r3
   18154:	sub	sp, fp, #4
   18158:	pop	{fp, pc}

0001815c <flatcc_builder_create_offset_vector@@Base>:
   1815c:	push	{fp, lr}
   18160:	add	fp, sp, #4
   18164:	sub	sp, sp, #24
   18168:	str	r0, [fp, #-16]
   1816c:	str	r1, [fp, #-20]	; 0xffffffec
   18170:	str	r2, [fp, #-24]	; 0xffffffe8
   18174:	ldr	r0, [fp, #-16]
   18178:	bl	180e0 <flatcc_builder_start_offset_vector@@Base>
   1817c:	mov	r3, r0
   18180:	cmp	r3, #0
   18184:	beq	18190 <flatcc_builder_create_offset_vector@@Base+0x34>
   18188:	mov	r3, #0
   1818c:	b	181d8 <flatcc_builder_create_offset_vector@@Base+0x7c>
   18190:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18194:	ldr	r0, [fp, #-16]
   18198:	bl	1798c <flatcc_builder_extend_offset_vector@@Base>
   1819c:	str	r0, [fp, #-8]
   181a0:	ldr	r3, [fp, #-8]
   181a4:	cmp	r3, #0
   181a8:	bne	181b4 <flatcc_builder_create_offset_vector@@Base+0x58>
   181ac:	mov	r3, #0
   181b0:	b	181d8 <flatcc_builder_create_offset_vector@@Base+0x7c>
   181b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   181b8:	lsl	r3, r3, #2
   181bc:	mov	r2, r3
   181c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   181c4:	ldr	r0, [fp, #-8]
   181c8:	bl	11f90 <memcpy@plt>
   181cc:	ldr	r0, [fp, #-16]
   181d0:	bl	19734 <flatcc_builder_end_offset_vector@@Base>
   181d4:	mov	r3, r0
   181d8:	mov	r0, r3
   181dc:	sub	sp, fp, #4
   181e0:	pop	{fp, pc}

000181e4 <flatcc_builder_start_string@@Base>:
   181e4:	push	{fp, lr}
   181e8:	add	fp, sp, #4
   181ec:	sub	sp, sp, #8
   181f0:	str	r0, [fp, #-8]
   181f4:	mov	r1, #1
   181f8:	ldr	r0, [fp, #-8]
   181fc:	bl	16460 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18200:	mov	r3, r0
   18204:	cmp	r3, #0
   18208:	beq	18214 <flatcc_builder_start_string@@Base+0x30>
   1820c:	mvn	r3, #0
   18210:	b	18254 <flatcc_builder_start_string@@Base+0x70>
   18214:	ldr	r3, [fp, #-8]
   18218:	ldr	r3, [r3, #32]
   1821c:	mov	r2, #1
   18220:	str	r2, [r3, #16]
   18224:	ldr	r3, [fp, #-8]
   18228:	ldr	r3, [r3, #32]
   1822c:	mov	r2, #0
   18230:	str	r2, [r3, #20]
   18234:	ldr	r3, [fp, #-8]
   18238:	ldr	r3, [r3, #32]
   1823c:	mov	r2, #6
   18240:	strh	r2, [r3, #14]
   18244:	mvn	r1, #3
   18248:	ldr	r0, [fp, #-8]
   1824c:	bl	153d8 <flatcc_builder_default_alloc@@Base+0x1c8>
   18250:	mov	r3, #0
   18254:	mov	r0, r3
   18258:	sub	sp, fp, #4
   1825c:	pop	{fp, pc}

00018260 <flatcc_builder_reserve_table@@Base>:
   18260:	push	{fp, lr}
   18264:	add	fp, sp, #4
   18268:	sub	sp, sp, #8
   1826c:	str	r0, [fp, #-8]
   18270:	str	r1, [fp, #-12]
   18274:	ldr	r3, [fp, #-12]
   18278:	cmp	r3, #0
   1827c:	bge	182a0 <flatcc_builder_reserve_table@@Base+0x40>
   18280:	ldr	r3, [pc, #52]	; 182bc <flatcc_builder_reserve_table@@Base+0x5c>
   18284:	add	r3, pc, r3
   18288:	ldr	r2, [pc, #48]	; 182c0 <flatcc_builder_reserve_table@@Base+0x60>
   1828c:	ldr	r1, [pc, #48]	; 182c4 <flatcc_builder_reserve_table@@Base+0x64>
   18290:	add	r1, pc, r1
   18294:	ldr	r0, [pc, #44]	; 182c8 <flatcc_builder_reserve_table@@Base+0x68>
   18298:	add	r0, pc, r0
   1829c:	bl	1202c <__assert_fail@plt>
   182a0:	ldr	r1, [fp, #-12]
   182a4:	ldr	r0, [fp, #-8]
   182a8:	bl	15948 <flatcc_builder_default_alloc@@Base+0x738>
   182ac:	mov	r3, r0
   182b0:	mov	r0, r3
   182b4:	sub	sp, fp, #4
   182b8:	pop	{fp, pc}
   182bc:	andeq	r4, r0, ip, lsl #21
   182c0:	andeq	r0, r0, r9, lsr #8
   182c4:	strdeq	r4, [r0], -ip
   182c8:	andeq	r4, r0, r8, lsl #13

000182cc <flatcc_builder_start_table@@Base>:
   182cc:	push	{fp, lr}
   182d0:	add	fp, sp, #4
   182d4:	sub	sp, sp, #8
   182d8:	str	r0, [fp, #-8]
   182dc:	str	r1, [fp, #-12]
   182e0:	mov	r1, #4
   182e4:	ldr	r0, [fp, #-8]
   182e8:	bl	16460 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   182ec:	mov	r3, r0
   182f0:	cmp	r3, #0
   182f4:	beq	18300 <flatcc_builder_start_table@@Base+0x34>
   182f8:	mvn	r3, #0
   182fc:	b	183d4 <flatcc_builder_start_table@@Base+0x108>
   18300:	ldr	r3, [fp, #-8]
   18304:	ldr	r3, [r3, #32]
   18308:	ldr	r2, [fp, #-8]
   1830c:	ldr	r2, [r2, #4]
   18310:	mov	r1, r2
   18314:	ldr	r2, [fp, #-8]
   18318:	ldr	r2, [r2, #52]	; 0x34
   1831c:	sub	r2, r1, r2
   18320:	str	r2, [r3, #16]
   18324:	ldr	r3, [fp, #-8]
   18328:	ldr	r3, [r3, #32]
   1832c:	ldr	r2, [fp, #-8]
   18330:	ldr	r2, [r2]
   18334:	mov	r1, r2
   18338:	ldr	r2, [fp, #-8]
   1833c:	ldr	r2, [r2, #76]	; 0x4c
   18340:	sub	r2, r1, r2
   18344:	str	r2, [r3, #20]
   18348:	ldr	r3, [fp, #-8]
   1834c:	ldr	r3, [r3, #32]
   18350:	ldr	r2, [fp, #-8]
   18354:	ldr	r2, [r2, #12]
   18358:	str	r2, [r3, #24]
   1835c:	ldr	r3, [fp, #-8]
   18360:	ldr	r3, [r3, #32]
   18364:	ldr	r2, [fp, #-8]
   18368:	ldrh	r2, [r2, #8]
   1836c:	strh	r2, [r3, #28]
   18370:	ldr	r3, [fp, #-8]
   18374:	mov	r2, #0
   18378:	str	r2, [r3, #12]
   1837c:	ldr	r3, [fp, #-8]
   18380:	ldr	r2, [pc, #88]	; 183e0 <flatcc_builder_start_table@@Base+0x114>
   18384:	str	r2, [r3, #12]
   18388:	ldr	r3, [fp, #-8]
   1838c:	mov	r2, #0
   18390:	strh	r2, [r3, #8]
   18394:	ldr	r3, [fp, #-8]
   18398:	ldr	r3, [r3, #32]
   1839c:	mov	r2, #3
   183a0:	strh	r2, [r3, #14]
   183a4:	ldr	r1, [fp, #-12]
   183a8:	ldr	r0, [fp, #-8]
   183ac:	bl	15948 <flatcc_builder_default_alloc@@Base+0x738>
   183b0:	mov	r3, r0
   183b4:	cmp	r3, #0
   183b8:	beq	183c4 <flatcc_builder_start_table@@Base+0xf8>
   183bc:	mvn	r3, #0
   183c0:	b	183d4 <flatcc_builder_start_table@@Base+0x108>
   183c4:	ldr	r1, [pc, #24]	; 183e4 <flatcc_builder_start_table@@Base+0x118>
   183c8:	ldr	r0, [fp, #-8]
   183cc:	bl	153d8 <flatcc_builder_default_alloc@@Base+0x1c8>
   183d0:	mov	r3, #0
   183d4:	mov	r0, r3
   183d8:	sub	sp, fp, #4
   183dc:	pop	{fp, pc}
   183e0:	svccs	0x00693b52
   183e4:	strdeq	pc, [r0], -ip

000183e8 <flatcc_builder_create_vtable@@Base>:
   183e8:	push	{fp, lr}
   183ec:	add	fp, sp, #4
   183f0:	sub	sp, sp, #96	; 0x60
   183f4:	str	r0, [fp, #-88]	; 0xffffffa8
   183f8:	str	r1, [fp, #-92]	; 0xffffffa4
   183fc:	mov	r3, r2
   18400:	strh	r3, [fp, #-94]	; 0xffffffa2
   18404:	mov	r3, #0
   18408:	str	r3, [fp, #-80]	; 0xffffffb0
   1840c:	mov	r3, #0
   18410:	str	r3, [fp, #-76]	; 0xffffffb4
   18414:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   18418:	cmp	r3, #0
   1841c:	beq	18474 <flatcc_builder_create_vtable@@Base+0x8c>
   18420:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18424:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   18428:	add	r3, r2, r3
   1842c:	str	r3, [fp, #-80]	; 0xffffffb0
   18430:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18434:	add	r3, r3, #1
   18438:	lsl	r3, r3, #3
   1843c:	sub	r2, fp, #4
   18440:	add	r3, r2, r3
   18444:	ldr	r2, [fp, #-92]	; 0xffffffa4
   18448:	str	r2, [r3, #-76]	; 0xffffffb4
   1844c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18450:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   18454:	add	r3, r3, #1
   18458:	lsl	r3, r3, #3
   1845c:	sub	r1, fp, #4
   18460:	add	r3, r1, r3
   18464:	str	r2, [r3, #-72]	; 0xffffffb8
   18468:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1846c:	add	r3, r3, #1
   18470:	str	r3, [fp, #-76]	; 0xffffffb4
   18474:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18478:	ldr	r3, [r3, #152]	; 0x98
   1847c:	cmp	r3, #0
   18480:	bne	184bc <flatcc_builder_create_vtable@@Base+0xd4>
   18484:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18488:	ldr	r3, [r3, #180]	; 0xb4
   1848c:	cmp	r3, #0
   18490:	bne	184bc <flatcc_builder_create_vtable@@Base+0xd4>
   18494:	sub	r3, fp, #80	; 0x50
   18498:	mov	r1, r3
   1849c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   184a0:	bl	16890 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   184a4:	str	r0, [fp, #-8]
   184a8:	ldr	r3, [fp, #-8]
   184ac:	cmp	r3, #0
   184b0:	bne	184f0 <flatcc_builder_create_vtable@@Base+0x108>
   184b4:	mov	r3, #0
   184b8:	b	184f4 <flatcc_builder_create_vtable@@Base+0x10c>
   184bc:	sub	r3, fp, #80	; 0x50
   184c0:	mov	r1, r3
   184c4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   184c8:	bl	16790 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   184cc:	str	r0, [fp, #-8]
   184d0:	ldr	r3, [fp, #-8]
   184d4:	cmp	r3, #0
   184d8:	bne	184e4 <flatcc_builder_create_vtable@@Base+0xfc>
   184dc:	mov	r3, #0
   184e0:	b	184f4 <flatcc_builder_create_vtable@@Base+0x10c>
   184e4:	ldr	r3, [fp, #-8]
   184e8:	add	r3, r3, #1
   184ec:	str	r3, [fp, #-8]
   184f0:	ldr	r3, [fp, #-8]
   184f4:	mov	r0, r3
   184f8:	sub	sp, fp, #4
   184fc:	pop	{fp, pc}

00018500 <flatcc_builder_create_cached_vtable@@Base>:
   18500:	push	{fp, lr}
   18504:	add	fp, sp, #4
   18508:	sub	sp, sp, #48	; 0x30
   1850c:	str	r0, [fp, #-32]	; 0xffffffe0
   18510:	str	r1, [fp, #-36]	; 0xffffffdc
   18514:	str	r3, [fp, #-44]	; 0xffffffd4
   18518:	strh	r2, [fp, #-38]	; 0xffffffda
   1851c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18520:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18524:	bl	15bb4 <flatcc_builder_default_alloc@@Base+0x9a4>
   18528:	str	r0, [fp, #-20]	; 0xffffffec
   1852c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18530:	cmp	r3, #0
   18534:	bne	18540 <flatcc_builder_create_cached_vtable@@Base+0x40>
   18538:	mov	r3, #0
   1853c:	b	18804 <flatcc_builder_create_cached_vtable@@Base+0x304>
   18540:	ldr	r3, [fp, #-20]	; 0xffffffec
   18544:	str	r3, [fp, #-12]
   18548:	ldr	r3, [fp, #-12]
   1854c:	ldr	r3, [r3]
   18550:	str	r3, [fp, #-16]
   18554:	mov	r3, #0
   18558:	str	r3, [fp, #-8]
   1855c:	b	18660 <flatcc_builder_create_cached_vtable@@Base+0x160>
   18560:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18564:	ldr	r2, [r3, #100]	; 0x64
   18568:	ldr	r3, [fp, #-16]
   1856c:	add	r3, r2, r3
   18570:	str	r3, [fp, #-24]	; 0xffffffe8
   18574:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18578:	ldr	r2, [r3, #68]	; 0x44
   1857c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18580:	ldr	r3, [r3, #8]
   18584:	add	r3, r2, r3
   18588:	str	r3, [fp, #-28]	; 0xffffffe4
   1858c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18590:	ldrh	r3, [r3]
   18594:	ldrh	r2, [fp, #-38]	; 0xffffffda
   18598:	cmp	r2, r3
   1859c:	bne	185c0 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   185a0:	ldrh	r3, [fp, #-38]	; 0xffffffda
   185a4:	mov	r2, r3
   185a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   185ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   185b0:	bl	11f9c <memcmp@plt>
   185b4:	mov	r3, r0
   185b8:	cmp	r3, #0
   185bc:	beq	185dc <flatcc_builder_create_cached_vtable@@Base+0xdc>
   185c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185c4:	add	r3, r3, #12
   185c8:	str	r3, [fp, #-12]
   185cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185d0:	ldr	r3, [r3, #12]
   185d4:	str	r3, [fp, #-16]
   185d8:	b	18660 <flatcc_builder_create_cached_vtable@@Base+0x160>
   185dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185e0:	ldr	r2, [r3, #4]
   185e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   185e8:	ldr	r3, [r3, #152]	; 0x98
   185ec:	cmp	r2, r3
   185f0:	beq	18618 <flatcc_builder_create_cached_vtable@@Base+0x118>
   185f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185f8:	str	r3, [fp, #-8]
   185fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18600:	add	r3, r3, #12
   18604:	str	r3, [fp, #-12]
   18608:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1860c:	ldr	r3, [r3, #12]
   18610:	str	r3, [fp, #-16]
   18614:	b	18660 <flatcc_builder_create_cached_vtable@@Base+0x160>
   18618:	ldr	r2, [fp, #-12]
   1861c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18620:	cmp	r2, r3
   18624:	beq	18654 <flatcc_builder_create_cached_vtable@@Base+0x154>
   18628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1862c:	ldr	r2, [r3, #12]
   18630:	ldr	r3, [fp, #-12]
   18634:	str	r2, [r3]
   18638:	ldr	r3, [fp, #-20]	; 0xffffffec
   1863c:	ldr	r2, [r3]
   18640:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18644:	str	r2, [r3, #12]
   18648:	ldr	r3, [fp, #-20]	; 0xffffffec
   1864c:	ldr	r2, [fp, #-16]
   18650:	str	r2, [r3]
   18654:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18658:	ldr	r3, [r3]
   1865c:	b	18804 <flatcc_builder_create_cached_vtable@@Base+0x304>
   18660:	ldr	r3, [fp, #-16]
   18664:	cmp	r3, #0
   18668:	bne	18560 <flatcc_builder_create_cached_vtable@@Base+0x60>
   1866c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18670:	ldr	r2, [r3, #124]	; 0x7c
   18674:	mov	r3, #0
   18678:	str	r3, [sp]
   1867c:	mov	r3, #16
   18680:	mov	r1, #6
   18684:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18688:	bl	15870 <flatcc_builder_default_alloc@@Base+0x660>
   1868c:	str	r0, [fp, #-24]	; 0xffffffe8
   18690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18694:	cmp	r3, #0
   18698:	bne	186a4 <flatcc_builder_create_cached_vtable@@Base+0x1a4>
   1869c:	mov	r3, #0
   186a0:	b	18804 <flatcc_builder_create_cached_vtable@@Base+0x304>
   186a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   186a8:	ldr	r3, [r3, #124]	; 0x7c
   186ac:	str	r3, [fp, #-16]
   186b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   186b4:	ldr	r3, [r3, #124]	; 0x7c
   186b8:	add	r2, r3, #16
   186bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   186c0:	str	r2, [r3, #124]	; 0x7c
   186c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   186c8:	ldr	r2, [r3, #152]	; 0x98
   186cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   186d0:	str	r2, [r3, #4]
   186d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   186d8:	ldr	r2, [r3]
   186dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   186e0:	str	r2, [r3, #12]
   186e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   186e8:	ldr	r2, [fp, #-16]
   186ec:	str	r2, [r3]
   186f0:	ldrh	r3, [fp, #-38]	; 0xffffffda
   186f4:	mov	r2, r3
   186f8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   186fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18700:	bl	183e8 <flatcc_builder_create_vtable@@Base>
   18704:	mov	r2, r0
   18708:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1870c:	str	r2, [r3]
   18710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18714:	ldr	r3, [r3]
   18718:	cmp	r3, #0
   1871c:	bne	18728 <flatcc_builder_create_cached_vtable@@Base+0x228>
   18720:	mov	r3, #0
   18724:	b	18804 <flatcc_builder_create_cached_vtable@@Base+0x304>
   18728:	ldr	r3, [fp, #-8]
   1872c:	cmp	r3, #0
   18730:	beq	18748 <flatcc_builder_create_cached_vtable@@Base+0x248>
   18734:	ldr	r3, [fp, #-8]
   18738:	ldr	r2, [r3, #8]
   1873c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18740:	str	r2, [r3, #8]
   18744:	b	187fc <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   18748:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1874c:	ldr	r3, [r3, #172]	; 0xac
   18750:	cmp	r3, #0
   18754:	beq	18784 <flatcc_builder_create_cached_vtable@@Base+0x284>
   18758:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1875c:	ldr	r2, [r3, #172]	; 0xac
   18760:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18764:	ldr	r1, [r3, #120]	; 0x78
   18768:	ldrh	r3, [fp, #-38]	; 0xffffffda
   1876c:	add	r3, r1, r3
   18770:	cmp	r2, r3
   18774:	bcs	18784 <flatcc_builder_create_cached_vtable@@Base+0x284>
   18778:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1877c:	bl	15c2c <flatcc_builder_flush_vtable_cache@@Base>
   18780:	b	187fc <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   18784:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18788:	ldr	r2, [r3, #120]	; 0x78
   1878c:	ldrh	r1, [fp, #-38]	; 0xffffffda
   18790:	mov	r3, #0
   18794:	str	r3, [sp]
   18798:	mov	r3, r1
   1879c:	mov	r1, #2
   187a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   187a4:	bl	15870 <flatcc_builder_default_alloc@@Base+0x660>
   187a8:	str	r0, [fp, #-28]	; 0xffffffe4
   187ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   187b0:	cmp	r3, #0
   187b4:	bne	187c0 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
   187b8:	mvn	r3, #0
   187bc:	b	18804 <flatcc_builder_create_cached_vtable@@Base+0x304>
   187c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   187c4:	ldr	r2, [r3, #120]	; 0x78
   187c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187cc:	str	r2, [r3, #8]
   187d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   187d4:	ldr	r2, [r3, #120]	; 0x78
   187d8:	ldrh	r3, [fp, #-38]	; 0xffffffda
   187dc:	add	r2, r2, r3
   187e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   187e4:	str	r2, [r3, #120]	; 0x78
   187e8:	ldrh	r3, [fp, #-38]	; 0xffffffda
   187ec:	mov	r2, r3
   187f0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   187f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   187f8:	bl	11f90 <memcpy@plt>
   187fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18800:	ldr	r3, [r3]
   18804:	mov	r0, r3
   18808:	sub	sp, fp, #4
   1880c:	pop	{fp, pc}

00018810 <flatcc_builder_create_table@@Base>:
   18810:	push	{r4, fp, lr}
   18814:	add	fp, sp, #8
   18818:	sub	sp, sp, #124	; 0x7c
   1881c:	str	r0, [fp, #-120]	; 0xffffff88
   18820:	str	r1, [fp, #-124]	; 0xffffff84
   18824:	str	r2, [fp, #-128]	; 0xffffff80
   18828:	strh	r3, [fp, #-130]	; 0xffffff7e
   1882c:	ldr	r4, [pc, #728]	; 18b0c <flatcc_builder_create_table@@Base+0x2fc>
   18830:	add	r4, pc, r4
   18834:	ldr	r3, [fp, #8]
   18838:	cmp	r3, #0
   1883c:	bge	18860 <flatcc_builder_create_table@@Base+0x50>
   18840:	ldr	r3, [pc, #712]	; 18b10 <flatcc_builder_create_table@@Base+0x300>
   18844:	add	r3, pc, r3
   18848:	ldr	r2, [pc, #708]	; 18b14 <flatcc_builder_create_table@@Base+0x304>
   1884c:	ldr	r1, [pc, #708]	; 18b18 <flatcc_builder_create_table@@Base+0x308>
   18850:	add	r1, pc, r1
   18854:	ldr	r0, [pc, #704]	; 18b1c <flatcc_builder_create_table@@Base+0x30c>
   18858:	add	r0, pc, r0
   1885c:	bl	1202c <__assert_fail@plt>
   18860:	ldr	r3, [fp, #12]
   18864:	and	r3, r3, #1
   18868:	cmp	r3, #0
   1886c:	bne	18890 <flatcc_builder_create_table@@Base+0x80>
   18870:	ldr	r3, [pc, #680]	; 18b20 <flatcc_builder_create_table@@Base+0x310>
   18874:	add	r3, pc, r3
   18878:	ldr	r2, [pc, #676]	; 18b24 <flatcc_builder_create_table@@Base+0x314>
   1887c:	ldr	r1, [pc, #676]	; 18b28 <flatcc_builder_create_table@@Base+0x318>
   18880:	add	r1, pc, r1
   18884:	ldr	r0, [pc, #672]	; 18b2c <flatcc_builder_create_table@@Base+0x31c>
   18888:	add	r0, pc, r0
   1888c:	bl	1202c <__assert_fail@plt>
   18890:	sub	r3, fp, #130	; 0x82
   18894:	mov	r1, #4
   18898:	mov	r0, r3
   1889c:	bl	16114 <flatcc_builder_clear@@Base+0xf8>
   188a0:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   188a4:	mov	r1, r3
   188a8:	ldr	r0, [fp, #-120]	; 0xffffff88
   188ac:	bl	160cc <flatcc_builder_clear@@Base+0xb0>
   188b0:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   188b4:	mov	r2, r3
   188b8:	ldr	r1, [fp, #-128]	; 0xffffff80
   188bc:	ldr	r0, [fp, #-120]	; 0xffffff88
   188c0:	bl	16708 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   188c4:	str	r0, [fp, #-20]	; 0xffffffec
   188c8:	ldr	r3, [fp, #-120]	; 0xffffff88
   188cc:	ldr	r3, [r3, #136]	; 0x88
   188d0:	mov	r1, r3
   188d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   188d8:	ldr	r3, [fp, #-128]	; 0xffffff80
   188dc:	add	r3, r2, r3
   188e0:	sub	r3, r1, r3
   188e4:	sub	r3, r3, #4
   188e8:	str	r3, [fp, #-24]	; 0xffffffe8
   188ec:	ldr	r3, [fp, #12]
   188f0:	sub	r3, r3, #1
   188f4:	str	r3, [fp, #-28]	; 0xffffffe4
   188f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   188fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18900:	sub	r3, r2, r3
   18904:	str	r3, [fp, #-32]	; 0xffffffe0
   18908:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1890c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18910:	sub	r2, r2, r3
   18914:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18918:	cmp	r2, r3
   1891c:	beq	18928 <flatcc_builder_create_table@@Base+0x118>
   18920:	mvn	r3, #0
   18924:	b	18b00 <flatcc_builder_create_table@@Base+0x2f0>
   18928:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1892c:	bl	150cc <main@@Base+0x238>
   18930:	mov	r3, r0
   18934:	str	r3, [fp, #-44]	; 0xffffffd4
   18938:	mov	r3, #0
   1893c:	str	r3, [fp, #-16]
   18940:	b	189b8 <flatcc_builder_create_table@@Base+0x1a8>
   18944:	ldr	r3, [fp, #-16]
   18948:	lsl	r3, r3, #1
   1894c:	ldr	r2, [fp, #4]
   18950:	add	r3, r2, r3
   18954:	ldrh	r3, [r3]
   18958:	mov	r2, r3
   1895c:	ldr	r3, [fp, #-124]	; 0xffffff84
   18960:	add	r3, r2, r3
   18964:	str	r3, [fp, #-36]	; 0xffffffdc
   18968:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1896c:	ldr	r2, [r3]
   18970:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18974:	sub	r3, r2, r3
   18978:	ldr	r2, [fp, #-16]
   1897c:	lsl	r2, r2, #1
   18980:	ldr	r1, [fp, #4]
   18984:	add	r2, r1, r2
   18988:	ldrh	r2, [r2]
   1898c:	sub	r3, r3, r2
   18990:	sub	r3, r3, #4
   18994:	str	r3, [fp, #-40]	; 0xffffffd8
   18998:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1899c:	bl	150cc <main@@Base+0x238>
   189a0:	mov	r2, r0
   189a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   189a8:	str	r2, [r3]
   189ac:	ldr	r3, [fp, #-16]
   189b0:	add	r3, r3, #1
   189b4:	str	r3, [fp, #-16]
   189b8:	ldr	r2, [fp, #-16]
   189bc:	ldr	r3, [fp, #8]
   189c0:	cmp	r2, r3
   189c4:	blt	18944 <flatcc_builder_create_table@@Base+0x134>
   189c8:	mov	r3, #0
   189cc:	str	r3, [fp, #-116]	; 0xffffff8c
   189d0:	mov	r3, #0
   189d4:	str	r3, [fp, #-112]	; 0xffffff90
   189d8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   189dc:	add	r3, r3, #4
   189e0:	str	r3, [fp, #-116]	; 0xffffff8c
   189e4:	ldr	r3, [fp, #-112]	; 0xffffff90
   189e8:	add	r3, r3, #1
   189ec:	lsl	r3, r3, #3
   189f0:	sub	r2, fp, #12
   189f4:	add	r3, r2, r3
   189f8:	sub	r2, fp, #44	; 0x2c
   189fc:	str	r2, [r3, #-104]	; 0xffffff98
   18a00:	ldr	r3, [fp, #-112]	; 0xffffff90
   18a04:	add	r3, r3, #1
   18a08:	lsl	r3, r3, #3
   18a0c:	sub	r2, fp, #12
   18a10:	add	r3, r2, r3
   18a14:	mov	r2, #4
   18a18:	str	r2, [r3, #-100]	; 0xffffff9c
   18a1c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18a20:	add	r3, r3, #1
   18a24:	str	r3, [fp, #-112]	; 0xffffff90
   18a28:	ldr	r3, [fp, #-128]	; 0xffffff80
   18a2c:	cmp	r3, #0
   18a30:	beq	18a88 <flatcc_builder_create_table@@Base+0x278>
   18a34:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18a38:	ldr	r3, [fp, #-128]	; 0xffffff80
   18a3c:	add	r3, r2, r3
   18a40:	str	r3, [fp, #-116]	; 0xffffff8c
   18a44:	ldr	r3, [fp, #-112]	; 0xffffff90
   18a48:	add	r3, r3, #1
   18a4c:	lsl	r3, r3, #3
   18a50:	sub	r2, fp, #12
   18a54:	add	r3, r2, r3
   18a58:	ldr	r2, [fp, #-124]	; 0xffffff84
   18a5c:	str	r2, [r3, #-104]	; 0xffffff98
   18a60:	ldr	r3, [fp, #-112]	; 0xffffff90
   18a64:	add	r3, r3, #1
   18a68:	lsl	r3, r3, #3
   18a6c:	sub	r2, fp, #12
   18a70:	add	r3, r2, r3
   18a74:	ldr	r2, [fp, #-128]	; 0xffffff80
   18a78:	str	r2, [r3, #-100]	; 0xffffff9c
   18a7c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18a80:	add	r3, r3, #1
   18a84:	str	r3, [fp, #-112]	; 0xffffff90
   18a88:	ldr	r3, [fp, #-20]	; 0xffffffec
   18a8c:	cmp	r3, #0
   18a90:	beq	18aec <flatcc_builder_create_table@@Base+0x2dc>
   18a94:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18a98:	ldr	r3, [fp, #-20]	; 0xffffffec
   18a9c:	add	r3, r2, r3
   18aa0:	str	r3, [fp, #-116]	; 0xffffff8c
   18aa4:	ldr	r3, [fp, #-112]	; 0xffffff90
   18aa8:	add	r3, r3, #1
   18aac:	lsl	r3, r3, #3
   18ab0:	sub	r2, fp, #12
   18ab4:	add	r3, r2, r3
   18ab8:	ldr	r2, [pc, #112]	; 18b30 <flatcc_builder_create_table@@Base+0x320>
   18abc:	ldr	r2, [r4, r2]
   18ac0:	str	r2, [r3, #-104]	; 0xffffff98
   18ac4:	ldr	r3, [fp, #-112]	; 0xffffff90
   18ac8:	add	r3, r3, #1
   18acc:	lsl	r3, r3, #3
   18ad0:	sub	r2, fp, #12
   18ad4:	add	r3, r2, r3
   18ad8:	ldr	r2, [fp, #-20]	; 0xffffffec
   18adc:	str	r2, [r3, #-100]	; 0xffffff9c
   18ae0:	ldr	r3, [fp, #-112]	; 0xffffff90
   18ae4:	add	r3, r3, #1
   18ae8:	str	r3, [fp, #-112]	; 0xffffff90
   18aec:	sub	r3, fp, #116	; 0x74
   18af0:	mov	r1, r3
   18af4:	ldr	r0, [fp, #-120]	; 0xffffff88
   18af8:	bl	16790 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   18afc:	mov	r3, r0
   18b00:	mov	r0, r3
   18b04:	sub	sp, fp, #8
   18b08:	pop	{r4, fp, pc}
   18b0c:	andeq	r5, r1, r8, asr #15
   18b10:	andeq	r4, r0, ip, ror #9
   18b14:	ldrdeq	r0, [r0], -r5
   18b18:	andeq	r3, r0, ip, lsr lr
   18b1c:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   18b20:			; <UNDEFINED> instruction: 0x000044bc
   18b24:	ldrdeq	r0, [r0], -fp
   18b28:	andeq	r3, r0, ip, lsl #28
   18b2c:	strheq	r4, [r0], -r8
   18b30:	andeq	r0, r0, ip, asr #32

00018b34 <flatcc_builder_check_required_field@@Base>:
   18b34:	push	{fp, lr}
   18b38:	add	fp, sp, #4
   18b3c:	sub	sp, sp, #8
   18b40:	str	r0, [fp, #-8]
   18b44:	mov	r3, r1
   18b48:	strh	r3, [fp, #-10]
   18b4c:	ldr	r3, [fp, #-8]
   18b50:	ldr	r3, [r3, #32]
   18b54:	ldrh	r3, [r3, #14]
   18b58:	cmp	r3, #3
   18b5c:	beq	18b80 <flatcc_builder_check_required_field@@Base+0x4c>
   18b60:	ldr	r3, [pc, #100]	; 18bcc <flatcc_builder_check_required_field@@Base+0x98>
   18b64:	add	r3, pc, r3
   18b68:	ldr	r2, [pc, #96]	; 18bd0 <flatcc_builder_check_required_field@@Base+0x9c>
   18b6c:	ldr	r1, [pc, #96]	; 18bd4 <flatcc_builder_check_required_field@@Base+0xa0>
   18b70:	add	r1, pc, r1
   18b74:	ldr	r0, [pc, #92]	; 18bd8 <flatcc_builder_check_required_field@@Base+0xa4>
   18b78:	add	r0, pc, r0
   18b7c:	bl	1202c <__assert_fail@plt>
   18b80:	ldr	r3, [fp, #-8]
   18b84:	ldrh	r3, [r3, #8]
   18b88:	ldrh	r2, [fp, #-10]
   18b8c:	cmp	r2, r3
   18b90:	bcs	18bbc <flatcc_builder_check_required_field@@Base+0x88>
   18b94:	ldr	r3, [fp, #-8]
   18b98:	ldr	r2, [r3, #4]
   18b9c:	ldrh	r3, [fp, #-10]
   18ba0:	lsl	r3, r3, #1
   18ba4:	add	r3, r2, r3
   18ba8:	ldrh	r3, [r3]
   18bac:	cmp	r3, #0
   18bb0:	beq	18bbc <flatcc_builder_check_required_field@@Base+0x88>
   18bb4:	mov	r3, #1
   18bb8:	b	18bc0 <flatcc_builder_check_required_field@@Base+0x8c>
   18bbc:	mov	r3, #0
   18bc0:	mov	r0, r3
   18bc4:	sub	sp, fp, #4
   18bc8:	pop	{fp, pc}
   18bcc:	andeq	r4, r0, r8, ror #3
   18bd0:	strdeq	r0, [r0], -r8
   18bd4:	andeq	r3, r0, ip, lsl fp
   18bd8:	ldrdeq	r3, [r0], -r4

00018bdc <flatcc_builder_check_union_field@@Base>:
   18bdc:	push	{fp, lr}
   18be0:	add	fp, sp, #4
   18be4:	sub	sp, sp, #8
   18be8:	str	r0, [fp, #-8]
   18bec:	mov	r3, r1
   18bf0:	strh	r3, [fp, #-10]
   18bf4:	ldr	r3, [fp, #-8]
   18bf8:	ldr	r3, [r3, #32]
   18bfc:	ldrh	r3, [r3, #14]
   18c00:	cmp	r3, #3
   18c04:	beq	18c28 <flatcc_builder_check_union_field@@Base+0x4c>
   18c08:	ldr	r3, [pc, #292]	; 18d34 <flatcc_builder_check_union_field@@Base+0x158>
   18c0c:	add	r3, pc, r3
   18c10:	ldr	r2, [pc, #288]	; 18d38 <flatcc_builder_check_union_field@@Base+0x15c>
   18c14:	ldr	r1, [pc, #288]	; 18d3c <flatcc_builder_check_union_field@@Base+0x160>
   18c18:	add	r1, pc, r1
   18c1c:	ldr	r0, [pc, #284]	; 18d40 <flatcc_builder_check_union_field@@Base+0x164>
   18c20:	add	r0, pc, r0
   18c24:	bl	1202c <__assert_fail@plt>
   18c28:	ldrh	r3, [fp, #-10]
   18c2c:	cmp	r3, #0
   18c30:	beq	18c48 <flatcc_builder_check_union_field@@Base+0x6c>
   18c34:	ldr	r3, [fp, #-8]
   18c38:	ldrh	r3, [r3, #8]
   18c3c:	ldrh	r2, [fp, #-10]
   18c40:	cmp	r2, r3
   18c44:	bcc	18c50 <flatcc_builder_check_union_field@@Base+0x74>
   18c48:	mov	r3, #0
   18c4c:	b	18d28 <flatcc_builder_check_union_field@@Base+0x14c>
   18c50:	ldr	r3, [fp, #-8]
   18c54:	ldr	r2, [r3, #4]
   18c58:	ldrh	r3, [fp, #-10]
   18c5c:	sub	r3, r3, #-2147483647	; 0x80000001
   18c60:	lsl	r3, r3, #1
   18c64:	add	r3, r2, r3
   18c68:	ldrh	r3, [r3]
   18c6c:	cmp	r3, #0
   18c70:	bne	18ca0 <flatcc_builder_check_union_field@@Base+0xc4>
   18c74:	ldr	r3, [fp, #-8]
   18c78:	ldr	r2, [r3, #4]
   18c7c:	ldrh	r3, [fp, #-10]
   18c80:	lsl	r3, r3, #1
   18c84:	add	r3, r2, r3
   18c88:	ldrh	r3, [r3]
   18c8c:	cmp	r3, #0
   18c90:	moveq	r3, #1
   18c94:	movne	r3, #0
   18c98:	uxtb	r3, r3
   18c9c:	b	18d28 <flatcc_builder_check_union_field@@Base+0x14c>
   18ca0:	ldr	r3, [fp, #-8]
   18ca4:	ldr	r3, [r3, #16]
   18ca8:	ldr	r2, [fp, #-8]
   18cac:	ldr	r1, [r2, #4]
   18cb0:	ldrh	r2, [fp, #-10]
   18cb4:	sub	r2, r2, #-2147483647	; 0x80000001
   18cb8:	lsl	r2, r2, #1
   18cbc:	add	r2, r1, r2
   18cc0:	ldrh	r2, [r2]
   18cc4:	add	r3, r3, r2
   18cc8:	ldrb	r3, [r3]
   18ccc:	cmp	r3, #0
   18cd0:	beq	18d00 <flatcc_builder_check_union_field@@Base+0x124>
   18cd4:	ldr	r3, [fp, #-8]
   18cd8:	ldr	r2, [r3, #4]
   18cdc:	ldrh	r3, [fp, #-10]
   18ce0:	lsl	r3, r3, #1
   18ce4:	add	r3, r2, r3
   18ce8:	ldrh	r3, [r3]
   18cec:	cmp	r3, #0
   18cf0:	movne	r3, #1
   18cf4:	moveq	r3, #0
   18cf8:	uxtb	r3, r3
   18cfc:	b	18d28 <flatcc_builder_check_union_field@@Base+0x14c>
   18d00:	ldr	r3, [fp, #-8]
   18d04:	ldr	r2, [r3, #4]
   18d08:	ldrh	r3, [fp, #-10]
   18d0c:	lsl	r3, r3, #1
   18d10:	add	r3, r2, r3
   18d14:	ldrh	r3, [r3]
   18d18:	cmp	r3, #0
   18d1c:	moveq	r3, #1
   18d20:	movne	r3, #0
   18d24:	uxtb	r3, r3
   18d28:	mov	r0, r3
   18d2c:	sub	sp, fp, #4
   18d30:	pop	{fp, pc}
   18d34:	andeq	r4, r0, r4, ror #2
   18d38:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18d3c:	andeq	r3, r0, r4, ror sl
   18d40:	andeq	r3, r0, ip, lsr #26

00018d44 <flatcc_builder_check_required@@Base>:
   18d44:	push	{fp, lr}
   18d48:	add	fp, sp, #4
   18d4c:	sub	sp, sp, #24
   18d50:	str	r0, [fp, #-16]
   18d54:	str	r1, [fp, #-20]	; 0xffffffec
   18d58:	str	r2, [fp, #-24]	; 0xffffffe8
   18d5c:	ldr	r3, [fp, #-16]
   18d60:	ldr	r3, [r3, #32]
   18d64:	ldrh	r3, [r3, #14]
   18d68:	cmp	r3, #3
   18d6c:	beq	18d90 <flatcc_builder_check_required@@Base+0x4c>
   18d70:	ldr	r3, [pc, #168]	; 18e20 <flatcc_builder_check_required@@Base+0xdc>
   18d74:	add	r3, pc, r3
   18d78:	ldr	r2, [pc, #164]	; 18e24 <flatcc_builder_check_required@@Base+0xe0>
   18d7c:	ldr	r1, [pc, #164]	; 18e28 <flatcc_builder_check_required@@Base+0xe4>
   18d80:	add	r1, pc, r1
   18d84:	ldr	r0, [pc, #160]	; 18e2c <flatcc_builder_check_required@@Base+0xe8>
   18d88:	add	r0, pc, r0
   18d8c:	bl	1202c <__assert_fail@plt>
   18d90:	ldr	r3, [fp, #-16]
   18d94:	ldrh	r3, [r3, #8]
   18d98:	mov	r2, r3
   18d9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18da0:	cmp	r2, r3
   18da4:	bge	18db0 <flatcc_builder_check_required@@Base+0x6c>
   18da8:	mov	r3, #0
   18dac:	b	18e14 <flatcc_builder_check_required@@Base+0xd0>
   18db0:	mov	r3, #0
   18db4:	str	r3, [fp, #-8]
   18db8:	b	18e00 <flatcc_builder_check_required@@Base+0xbc>
   18dbc:	ldr	r3, [fp, #-16]
   18dc0:	ldr	r2, [r3, #4]
   18dc4:	ldr	r3, [fp, #-8]
   18dc8:	lsl	r3, r3, #1
   18dcc:	ldr	r1, [fp, #-20]	; 0xffffffec
   18dd0:	add	r3, r1, r3
   18dd4:	ldrh	r3, [r3]
   18dd8:	lsl	r3, r3, #1
   18ddc:	add	r3, r2, r3
   18de0:	ldrh	r3, [r3]
   18de4:	cmp	r3, #0
   18de8:	bne	18df4 <flatcc_builder_check_required@@Base+0xb0>
   18dec:	mov	r3, #0
   18df0:	b	18e14 <flatcc_builder_check_required@@Base+0xd0>
   18df4:	ldr	r3, [fp, #-8]
   18df8:	add	r3, r3, #1
   18dfc:	str	r3, [fp, #-8]
   18e00:	ldr	r2, [fp, #-8]
   18e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e08:	cmp	r2, r3
   18e0c:	blt	18dbc <flatcc_builder_check_required@@Base+0x78>
   18e10:	mov	r3, #1
   18e14:	mov	r0, r3
   18e18:	sub	sp, fp, #4
   18e1c:	pop	{fp, pc}
   18e20:	andeq	r4, r0, r0, lsr #32
   18e24:	andeq	r0, r0, r1, lsl r5
   18e28:	andeq	r3, r0, ip, lsl #18
   18e2c:	andeq	r3, r0, r4, asr #23

00018e30 <flatcc_builder_end_table@@Base>:
   18e30:	push	{fp, lr}
   18e34:	add	fp, sp, #4
   18e38:	sub	sp, sp, #48	; 0x30
   18e3c:	str	r0, [fp, #-32]	; 0xffffffe0
   18e40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e44:	ldr	r3, [r3, #32]
   18e48:	ldrh	r3, [r3, #14]
   18e4c:	cmp	r3, #3
   18e50:	beq	18e74 <flatcc_builder_end_table@@Base+0x44>
   18e54:	ldr	r3, [pc, #508]	; 19058 <flatcc_builder_end_table@@Base+0x228>
   18e58:	add	r3, pc, r3
   18e5c:	ldr	r2, [pc, #504]	; 1905c <flatcc_builder_end_table@@Base+0x22c>
   18e60:	ldr	r1, [pc, #504]	; 19060 <flatcc_builder_end_table@@Base+0x230>
   18e64:	add	r1, pc, r1
   18e68:	ldr	r0, [pc, #500]	; 19064 <flatcc_builder_end_table@@Base+0x234>
   18e6c:	add	r0, pc, r0
   18e70:	bl	1202c <__assert_fail@plt>
   18e74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e78:	ldr	r3, [r3, #4]
   18e7c:	sub	r3, r3, #4
   18e80:	str	r3, [fp, #-8]
   18e84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e88:	ldrh	r3, [r3, #8]
   18e8c:	add	r3, r3, #2
   18e90:	uxth	r3, r3
   18e94:	lsl	r3, r3, #1
   18e98:	strh	r3, [fp, #-10]
   18e9c:	ldr	r3, [fp, #-8]
   18ea0:	ldrh	r2, [fp, #-10]
   18ea4:	strh	r2, [r3]
   18ea8:	ldr	r3, [fp, #-8]
   18eac:	add	r3, r3, #2
   18eb0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18eb4:	ldr	r2, [r2, #20]
   18eb8:	uxth	r2, r2
   18ebc:	add	r2, r2, #4
   18ec0:	uxth	r2, r2
   18ec4:	strh	r2, [r3]
   18ec8:	ldr	r3, [fp, #-8]
   18ecc:	ldrh	r3, [r3]
   18ed0:	mov	r2, r3
   18ed4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ed8:	ldr	r3, [r3, #12]
   18edc:	eor	r3, r3, r2
   18ee0:	ldr	r2, [pc, #384]	; 19068 <flatcc_builder_end_table@@Base+0x238>
   18ee4:	mul	r3, r2, r3
   18ee8:	ldr	r2, [fp, #-8]
   18eec:	add	r2, r2, #2
   18ef0:	ldrh	r2, [r2]
   18ef4:	eor	r3, r3, r2
   18ef8:	ldr	r2, [pc, #360]	; 19068 <flatcc_builder_end_table@@Base+0x238>
   18efc:	mul	r2, r2, r3
   18f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f04:	str	r2, [r3, #12]
   18f08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f0c:	ldr	r3, [r3, #12]
   18f10:	ldrh	r2, [fp, #-10]
   18f14:	ldr	r1, [fp, #-8]
   18f18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18f1c:	bl	18500 <flatcc_builder_create_cached_vtable@@Base>
   18f20:	str	r0, [fp, #-16]
   18f24:	ldr	r3, [fp, #-16]
   18f28:	cmp	r3, #0
   18f2c:	bne	18f38 <flatcc_builder_end_table@@Base+0x108>
   18f30:	mov	r3, #0
   18f34:	b	1904c <flatcc_builder_end_table@@Base+0x21c>
   18f38:	ldrh	r3, [fp, #-10]
   18f3c:	mov	r2, r3
   18f40:	mov	r1, #0
   18f44:	ldr	r0, [fp, #-8]
   18f48:	bl	11ffc <memset@plt>
   18f4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f50:	ldr	r2, [r3, #76]	; 0x4c
   18f54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f58:	ldr	r3, [r3, #32]
   18f5c:	ldr	r3, [r3, #20]
   18f60:	add	r3, r2, r3
   18f64:	str	r3, [fp, #-20]	; 0xffffffec
   18f68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f6c:	ldr	r3, [r3]
   18f70:	mov	r2, r3
   18f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f78:	sub	r3, r2, r3
   18f7c:	asr	r3, r3, #1
   18f80:	str	r3, [fp, #-24]	; 0xffffffe8
   18f84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f88:	ldr	r1, [r3, #16]
   18f8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f90:	ldr	r2, [r3, #20]
   18f94:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f98:	ldrh	r0, [r3, #130]	; 0x82
   18f9c:	ldr	r3, [fp, #-16]
   18fa0:	str	r3, [sp, #8]
   18fa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18fa8:	str	r3, [sp, #4]
   18fac:	ldr	r3, [fp, #-20]	; 0xffffffec
   18fb0:	str	r3, [sp]
   18fb4:	mov	r3, r0
   18fb8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18fbc:	bl	18810 <flatcc_builder_create_table@@Base>
   18fc0:	str	r0, [fp, #-28]	; 0xffffffe4
   18fc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18fc8:	cmp	r3, #0
   18fcc:	bne	18fd8 <flatcc_builder_end_table@@Base+0x1a8>
   18fd0:	mov	r3, #0
   18fd4:	b	1904c <flatcc_builder_end_table@@Base+0x21c>
   18fd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18fdc:	ldr	r3, [r3, #32]
   18fe0:	ldr	r2, [r3, #24]
   18fe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18fe8:	str	r2, [r3, #12]
   18fec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ff0:	ldr	r3, [r3, #32]
   18ff4:	ldrh	r2, [r3, #28]
   18ff8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ffc:	strh	r2, [r3, #8]
   19000:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19004:	ldr	r2, [r3, #52]	; 0x34
   19008:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1900c:	ldr	r3, [r3, #32]
   19010:	ldr	r3, [r3, #16]
   19014:	add	r2, r2, r3
   19018:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1901c:	str	r2, [r3, #4]
   19020:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19024:	ldr	r2, [r3, #76]	; 0x4c
   19028:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1902c:	ldr	r3, [r3, #32]
   19030:	ldr	r3, [r3, #20]
   19034:	add	r2, r2, r3
   19038:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1903c:	str	r2, [r3]
   19040:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19044:	bl	16640 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   19048:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1904c:	mov	r0, r3
   19050:	sub	sp, fp, #4
   19054:	pop	{fp, pc}
   19058:	andeq	r3, r0, ip, asr pc
   1905c:	andeq	r0, r0, r5, lsr #10
   19060:	andeq	r3, r0, r8, lsr #16
   19064:	andeq	r3, r0, r0, ror #21
   19068:			; <UNDEFINED> instruction: 0x9e3779b1

0001906c <flatcc_builder_create_vector@@Base>:
   1906c:	push	{r4, fp, lr}
   19070:	add	fp, sp, #8
   19074:	sub	sp, sp, #108	; 0x6c
   19078:	str	r0, [fp, #-104]	; 0xffffff98
   1907c:	str	r1, [fp, #-108]	; 0xffffff94
   19080:	str	r2, [fp, #-112]	; 0xffffff90
   19084:	str	r3, [fp, #-116]	; 0xffffff8c
   19088:	ldr	r4, [pc, #484]	; 19274 <flatcc_builder_create_vector@@Base+0x208>
   1908c:	add	r4, pc, r4
   19090:	ldr	r2, [fp, #-112]	; 0xffffff90
   19094:	ldr	r3, [fp, #8]
   19098:	cmp	r2, r3
   1909c:	bls	190d8 <flatcc_builder_create_vector@@Base+0x6c>
   190a0:	ldr	r2, [fp, #-112]	; 0xffffff90
   190a4:	ldr	r3, [fp, #8]
   190a8:	cmp	r2, r3
   190ac:	bls	190d0 <flatcc_builder_create_vector@@Base+0x64>
   190b0:	ldr	r3, [pc, #448]	; 19278 <flatcc_builder_create_vector@@Base+0x20c>
   190b4:	add	r3, pc, r3
   190b8:	ldr	r2, [pc, #444]	; 1927c <flatcc_builder_create_vector@@Base+0x210>
   190bc:	ldr	r1, [pc, #444]	; 19280 <flatcc_builder_create_vector@@Base+0x214>
   190c0:	add	r1, pc, r1
   190c4:	ldr	r0, [pc, #440]	; 19284 <flatcc_builder_create_vector@@Base+0x218>
   190c8:	add	r0, pc, r0
   190cc:	bl	1202c <__assert_fail@plt>
   190d0:	mov	r3, #0
   190d4:	b	19268 <flatcc_builder_create_vector@@Base+0x1fc>
   190d8:	mov	r1, #4
   190dc:	add	r3, fp, #4
   190e0:	mov	r0, r3
   190e4:	bl	16114 <flatcc_builder_clear@@Base+0xf8>
   190e8:	ldrh	r3, [fp, #4]
   190ec:	mov	r1, r3
   190f0:	ldr	r0, [fp, #-104]	; 0xffffff98
   190f4:	bl	160cc <flatcc_builder_clear@@Base+0xb0>
   190f8:	ldr	r3, [fp, #-112]	; 0xffffff90
   190fc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19100:	mul	r3, r2, r3
   19104:	str	r3, [fp, #-16]
   19108:	ldr	r0, [fp, #-112]	; 0xffffff90
   1910c:	bl	150cc <main@@Base+0x238>
   19110:	mov	r3, r0
   19114:	str	r3, [fp, #-24]	; 0xffffffe8
   19118:	ldrh	r3, [fp, #4]
   1911c:	mov	r2, r3
   19120:	ldr	r1, [fp, #-16]
   19124:	ldr	r0, [fp, #-104]	; 0xffffff98
   19128:	bl	16708 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   1912c:	str	r0, [fp, #-20]	; 0xffffffec
   19130:	mov	r3, #0
   19134:	str	r3, [fp, #-96]	; 0xffffffa0
   19138:	mov	r3, #0
   1913c:	str	r3, [fp, #-92]	; 0xffffffa4
   19140:	ldr	r3, [fp, #-96]	; 0xffffffa0
   19144:	add	r3, r3, #4
   19148:	str	r3, [fp, #-96]	; 0xffffffa0
   1914c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19150:	add	r3, r3, #1
   19154:	lsl	r3, r3, #3
   19158:	sub	r2, fp, #12
   1915c:	add	r3, r2, r3
   19160:	sub	r2, fp, #24
   19164:	str	r2, [r3, #-84]	; 0xffffffac
   19168:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1916c:	add	r3, r3, #1
   19170:	lsl	r3, r3, #3
   19174:	sub	r2, fp, #12
   19178:	add	r3, r2, r3
   1917c:	mov	r2, #4
   19180:	str	r2, [r3, #-80]	; 0xffffffb0
   19184:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19188:	add	r3, r3, #1
   1918c:	str	r3, [fp, #-92]	; 0xffffffa4
   19190:	ldr	r3, [fp, #-16]
   19194:	cmp	r3, #0
   19198:	beq	191f0 <flatcc_builder_create_vector@@Base+0x184>
   1919c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   191a0:	ldr	r3, [fp, #-16]
   191a4:	add	r3, r2, r3
   191a8:	str	r3, [fp, #-96]	; 0xffffffa0
   191ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   191b0:	add	r3, r3, #1
   191b4:	lsl	r3, r3, #3
   191b8:	sub	r2, fp, #12
   191bc:	add	r3, r2, r3
   191c0:	ldr	r2, [fp, #-108]	; 0xffffff94
   191c4:	str	r2, [r3, #-84]	; 0xffffffac
   191c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   191cc:	add	r3, r3, #1
   191d0:	lsl	r3, r3, #3
   191d4:	sub	r2, fp, #12
   191d8:	add	r3, r2, r3
   191dc:	ldr	r2, [fp, #-16]
   191e0:	str	r2, [r3, #-80]	; 0xffffffb0
   191e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   191e8:	add	r3, r3, #1
   191ec:	str	r3, [fp, #-92]	; 0xffffffa4
   191f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   191f4:	cmp	r3, #0
   191f8:	beq	19254 <flatcc_builder_create_vector@@Base+0x1e8>
   191fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19200:	ldr	r3, [fp, #-20]	; 0xffffffec
   19204:	add	r3, r2, r3
   19208:	str	r3, [fp, #-96]	; 0xffffffa0
   1920c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19210:	add	r3, r3, #1
   19214:	lsl	r3, r3, #3
   19218:	sub	r2, fp, #12
   1921c:	add	r3, r2, r3
   19220:	ldr	r2, [pc, #96]	; 19288 <flatcc_builder_create_vector@@Base+0x21c>
   19224:	ldr	r2, [r4, r2]
   19228:	str	r2, [r3, #-84]	; 0xffffffac
   1922c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19230:	add	r3, r3, #1
   19234:	lsl	r3, r3, #3
   19238:	sub	r2, fp, #12
   1923c:	add	r3, r2, r3
   19240:	ldr	r2, [fp, #-20]	; 0xffffffec
   19244:	str	r2, [r3, #-80]	; 0xffffffb0
   19248:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1924c:	add	r3, r3, #1
   19250:	str	r3, [fp, #-92]	; 0xffffffa4
   19254:	sub	r3, fp, #96	; 0x60
   19258:	mov	r1, r3
   1925c:	ldr	r0, [fp, #-104]	; 0xffffff98
   19260:	bl	16790 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   19264:	mov	r3, r0
   19268:	mov	r0, r3
   1926c:	sub	sp, fp, #8
   19270:	pop	{r4, fp, pc}
   19274:	andeq	r4, r1, ip, ror #30
   19278:	andeq	r3, r0, ip, lsl sp
   1927c:	andeq	r0, r0, r5, asr r5
   19280:	andeq	r3, r0, ip, asr #11
   19284:			; <UNDEFINED> instruction: 0x000038b0
   19288:	andeq	r0, r0, ip, asr #32

0001928c <flatcc_builder_end_vector@@Base>:
   1928c:	push	{fp, lr}
   19290:	add	fp, sp, #4
   19294:	sub	sp, sp, #24
   19298:	str	r0, [fp, #-16]
   1929c:	ldr	r3, [fp, #-16]
   192a0:	ldr	r3, [r3, #32]
   192a4:	ldrh	r3, [r3, #14]
   192a8:	cmp	r3, #4
   192ac:	beq	192d0 <flatcc_builder_end_vector@@Base+0x44>
   192b0:	ldr	r3, [pc, #148]	; 1934c <flatcc_builder_end_vector@@Base+0xc0>
   192b4:	add	r3, pc, r3
   192b8:	ldr	r2, [pc, #144]	; 19350 <flatcc_builder_end_vector@@Base+0xc4>
   192bc:	ldr	r1, [pc, #144]	; 19354 <flatcc_builder_end_vector@@Base+0xc8>
   192c0:	add	r1, pc, r1
   192c4:	ldr	r0, [pc, #140]	; 19358 <flatcc_builder_end_vector@@Base+0xcc>
   192c8:	add	r0, pc, r0
   192cc:	bl	1202c <__assert_fail@plt>
   192d0:	ldr	r3, [fp, #-16]
   192d4:	ldr	r1, [r3, #16]
   192d8:	ldr	r3, [fp, #-16]
   192dc:	ldr	r3, [r3, #32]
   192e0:	ldr	r0, [r3, #20]
   192e4:	ldr	r3, [fp, #-16]
   192e8:	ldr	r3, [r3, #32]
   192ec:	ldr	ip, [r3, #16]
   192f0:	ldr	r3, [fp, #-16]
   192f4:	ldrh	r3, [r3, #130]	; 0x82
   192f8:	ldr	r2, [fp, #-16]
   192fc:	ldr	r2, [r2, #32]
   19300:	ldr	r2, [r2, #24]
   19304:	str	r2, [sp, #4]
   19308:	str	r3, [sp]
   1930c:	mov	r3, ip
   19310:	mov	r2, r0
   19314:	ldr	r0, [fp, #-16]
   19318:	bl	1906c <flatcc_builder_create_vector@@Base>
   1931c:	str	r0, [fp, #-8]
   19320:	ldr	r3, [fp, #-8]
   19324:	cmp	r3, #0
   19328:	bne	19334 <flatcc_builder_end_vector@@Base+0xa8>
   1932c:	mov	r3, #0
   19330:	b	19340 <flatcc_builder_end_vector@@Base+0xb4>
   19334:	ldr	r0, [fp, #-16]
   19338:	bl	16640 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1933c:	ldr	r3, [fp, #-8]
   19340:	mov	r0, r3
   19344:	sub	sp, fp, #4
   19348:	pop	{fp, pc}
   1934c:	andeq	r3, r0, ip, lsr fp
   19350:	andeq	r0, r0, r8, ror r5
   19354:	andeq	r3, r0, ip, asr #7
   19358:	andeq	r3, r0, r8, lsl #10

0001935c <flatcc_builder_vector_count@@Base>:
   1935c:	push	{fp}		; (str fp, [sp, #-4]!)
   19360:	add	fp, sp, #0
   19364:	sub	sp, sp, #12
   19368:	str	r0, [fp, #-8]
   1936c:	ldr	r3, [fp, #-8]
   19370:	ldr	r3, [r3, #32]
   19374:	ldr	r3, [r3, #20]
   19378:	mov	r0, r3
   1937c:	add	sp, fp, #0
   19380:	pop	{fp}		; (ldr fp, [sp], #4)
   19384:	bx	lr

00019388 <flatcc_builder_vector_edit@@Base>:
   19388:	push	{fp}		; (str fp, [sp, #-4]!)
   1938c:	add	fp, sp, #0
   19390:	sub	sp, sp, #12
   19394:	str	r0, [fp, #-8]
   19398:	ldr	r3, [fp, #-8]
   1939c:	ldr	r3, [r3, #16]
   193a0:	mov	r0, r3
   193a4:	add	sp, fp, #0
   193a8:	pop	{fp}		; (ldr fp, [sp], #4)
   193ac:	bx	lr
   193b0:	push	{r4, fp, lr}
   193b4:	add	fp, sp, #8
   193b8:	sub	sp, sp, #116	; 0x74
   193bc:	str	r0, [fp, #-112]	; 0xffffff90
   193c0:	str	r1, [fp, #-116]	; 0xffffff8c
   193c4:	str	r2, [fp, #-120]	; 0xffffff88
   193c8:	str	r3, [fp, #-124]	; 0xffffff84
   193cc:	ldr	r4, [pc, #748]	; 196c0 <flatcc_builder_vector_edit@@Base+0x338>
   193d0:	add	r4, pc, r4
   193d4:	ldr	r3, [fp, #-120]	; 0xffffff88
   193d8:	cmn	r3, #-1073741823	; 0xc0000001
   193dc:	bls	193e8 <flatcc_builder_vector_edit@@Base+0x60>
   193e0:	mov	r3, #0
   193e4:	b	196b4 <flatcc_builder_vector_edit@@Base+0x32c>
   193e8:	mov	r1, #4
   193ec:	ldr	r0, [fp, #-112]	; 0xffffff90
   193f0:	bl	160cc <flatcc_builder_clear@@Base+0xb0>
   193f4:	ldr	r3, [fp, #-120]	; 0xffffff88
   193f8:	lsl	r3, r3, #2
   193fc:	str	r3, [fp, #-20]	; 0xffffffec
   19400:	ldr	r0, [fp, #-120]	; 0xffffff88
   19404:	bl	150cc <main@@Base+0x238>
   19408:	mov	r3, r0
   1940c:	str	r3, [fp, #-36]	; 0xffffffdc
   19410:	mov	r2, #4
   19414:	ldr	r1, [fp, #-20]	; 0xffffffec
   19418:	ldr	r0, [fp, #-112]	; 0xffffff90
   1941c:	bl	16708 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   19420:	str	r0, [fp, #-24]	; 0xffffffe8
   19424:	mov	r3, #0
   19428:	str	r3, [fp, #-108]	; 0xffffff94
   1942c:	mov	r3, #0
   19430:	str	r3, [fp, #-104]	; 0xffffff98
   19434:	ldr	r3, [fp, #-108]	; 0xffffff94
   19438:	add	r3, r3, #4
   1943c:	str	r3, [fp, #-108]	; 0xffffff94
   19440:	ldr	r3, [fp, #-104]	; 0xffffff98
   19444:	add	r3, r3, #1
   19448:	lsl	r3, r3, #3
   1944c:	sub	r2, fp, #12
   19450:	add	r3, r2, r3
   19454:	sub	r2, fp, #36	; 0x24
   19458:	str	r2, [r3, #-96]	; 0xffffffa0
   1945c:	ldr	r3, [fp, #-104]	; 0xffffff98
   19460:	add	r3, r3, #1
   19464:	lsl	r3, r3, #3
   19468:	sub	r2, fp, #12
   1946c:	add	r3, r2, r3
   19470:	mov	r2, #4
   19474:	str	r2, [r3, #-92]	; 0xffffffa4
   19478:	ldr	r3, [fp, #-104]	; 0xffffff98
   1947c:	add	r3, r3, #1
   19480:	str	r3, [fp, #-104]	; 0xffffff98
   19484:	ldr	r3, [fp, #-20]	; 0xffffffec
   19488:	cmp	r3, #0
   1948c:	beq	194e4 <flatcc_builder_vector_edit@@Base+0x15c>
   19490:	ldr	r2, [fp, #-108]	; 0xffffff94
   19494:	ldr	r3, [fp, #-20]	; 0xffffffec
   19498:	add	r3, r2, r3
   1949c:	str	r3, [fp, #-108]	; 0xffffff94
   194a0:	ldr	r3, [fp, #-104]	; 0xffffff98
   194a4:	add	r3, r3, #1
   194a8:	lsl	r3, r3, #3
   194ac:	sub	r2, fp, #12
   194b0:	add	r3, r2, r3
   194b4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   194b8:	str	r2, [r3, #-96]	; 0xffffffa0
   194bc:	ldr	r3, [fp, #-104]	; 0xffffff98
   194c0:	add	r3, r3, #1
   194c4:	lsl	r3, r3, #3
   194c8:	sub	r2, fp, #12
   194cc:	add	r3, r2, r3
   194d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   194d4:	str	r2, [r3, #-92]	; 0xffffffa4
   194d8:	ldr	r3, [fp, #-104]	; 0xffffff98
   194dc:	add	r3, r3, #1
   194e0:	str	r3, [fp, #-104]	; 0xffffff98
   194e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   194e8:	cmp	r3, #0
   194ec:	beq	19548 <flatcc_builder_vector_edit@@Base+0x1c0>
   194f0:	ldr	r2, [fp, #-108]	; 0xffffff94
   194f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   194f8:	add	r3, r2, r3
   194fc:	str	r3, [fp, #-108]	; 0xffffff94
   19500:	ldr	r3, [fp, #-104]	; 0xffffff98
   19504:	add	r3, r3, #1
   19508:	lsl	r3, r3, #3
   1950c:	sub	r2, fp, #12
   19510:	add	r3, r2, r3
   19514:	ldr	r2, [pc, #424]	; 196c4 <flatcc_builder_vector_edit@@Base+0x33c>
   19518:	ldr	r2, [r4, r2]
   1951c:	str	r2, [r3, #-96]	; 0xffffffa0
   19520:	ldr	r3, [fp, #-104]	; 0xffffff98
   19524:	add	r3, r3, #1
   19528:	lsl	r3, r3, #3
   1952c:	sub	r2, fp, #12
   19530:	add	r3, r2, r3
   19534:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19538:	str	r2, [r3, #-92]	; 0xffffffa4
   1953c:	ldr	r3, [fp, #-104]	; 0xffffff98
   19540:	add	r3, r3, #1
   19544:	str	r3, [fp, #-104]	; 0xffffff98
   19548:	ldr	r3, [fp, #-112]	; 0xffffff90
   1954c:	ldr	r3, [r3, #136]	; 0x88
   19550:	mov	r2, r3
   19554:	ldr	r3, [fp, #-108]	; 0xffffff94
   19558:	sub	r3, r2, r3
   1955c:	str	r3, [fp, #-28]	; 0xffffffe4
   19560:	mov	r3, #0
   19564:	str	r3, [fp, #-16]
   19568:	b	19690 <flatcc_builder_vector_edit@@Base+0x308>
   1956c:	ldr	r3, [fp, #-16]
   19570:	lsl	r3, r3, #2
   19574:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19578:	add	r3, r2, r3
   1957c:	ldr	r3, [r3]
   19580:	cmp	r3, #0
   19584:	beq	19620 <flatcc_builder_vector_edit@@Base+0x298>
   19588:	ldr	r3, [fp, #-16]
   1958c:	lsl	r3, r3, #2
   19590:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19594:	add	r3, r2, r3
   19598:	ldr	r3, [r3]
   1959c:	mov	r2, r3
   195a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   195a4:	sub	r2, r2, r3
   195a8:	ldr	r3, [fp, #-16]
   195ac:	lsl	r3, r3, #2
   195b0:	sub	r3, r2, r3
   195b4:	sub	r3, r3, #4
   195b8:	str	r3, [fp, #-32]	; 0xffffffe0
   195bc:	ldr	r3, [fp, #-16]
   195c0:	lsl	r3, r3, #2
   195c4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   195c8:	add	r4, r2, r3
   195cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   195d0:	bl	150cc <main@@Base+0x238>
   195d4:	mov	r3, r0
   195d8:	str	r3, [r4]
   195dc:	ldr	r3, [fp, #-124]	; 0xffffff84
   195e0:	cmp	r3, #0
   195e4:	beq	19684 <flatcc_builder_vector_edit@@Base+0x2fc>
   195e8:	ldr	r2, [fp, #-124]	; 0xffffff84
   195ec:	ldr	r3, [fp, #-16]
   195f0:	add	r3, r2, r3
   195f4:	ldrb	r3, [r3]
   195f8:	cmp	r3, #0
   195fc:	bne	19684 <flatcc_builder_vector_edit@@Base+0x2fc>
   19600:	ldr	r3, [pc, #192]	; 196c8 <flatcc_builder_vector_edit@@Base+0x340>
   19604:	add	r3, pc, r3
   19608:	ldr	r2, [pc, #188]	; 196cc <flatcc_builder_vector_edit@@Base+0x344>
   1960c:	ldr	r1, [pc, #188]	; 196d0 <flatcc_builder_vector_edit@@Base+0x348>
   19610:	add	r1, pc, r1
   19614:	ldr	r0, [pc, #184]	; 196d4 <flatcc_builder_vector_edit@@Base+0x34c>
   19618:	add	r0, pc, r0
   1961c:	bl	1202c <__assert_fail@plt>
   19620:	ldr	r3, [fp, #-124]	; 0xffffff84
   19624:	cmp	r3, #0
   19628:	beq	19664 <flatcc_builder_vector_edit@@Base+0x2dc>
   1962c:	ldr	r2, [fp, #-124]	; 0xffffff84
   19630:	ldr	r3, [fp, #-16]
   19634:	add	r3, r2, r3
   19638:	ldrb	r3, [r3]
   1963c:	cmp	r3, #0
   19640:	beq	19684 <flatcc_builder_vector_edit@@Base+0x2fc>
   19644:	ldr	r3, [pc, #140]	; 196d8 <flatcc_builder_vector_edit@@Base+0x350>
   19648:	add	r3, pc, r3
   1964c:	ldr	r2, [pc, #136]	; 196dc <flatcc_builder_vector_edit@@Base+0x354>
   19650:	ldr	r1, [pc, #136]	; 196e0 <flatcc_builder_vector_edit@@Base+0x358>
   19654:	add	r1, pc, r1
   19658:	ldr	r0, [pc, #132]	; 196e4 <flatcc_builder_vector_edit@@Base+0x35c>
   1965c:	add	r0, pc, r0
   19660:	bl	1202c <__assert_fail@plt>
   19664:	ldr	r3, [pc, #124]	; 196e8 <flatcc_builder_vector_edit@@Base+0x360>
   19668:	add	r3, pc, r3
   1966c:	ldr	r2, [pc, #120]	; 196ec <flatcc_builder_vector_edit@@Base+0x364>
   19670:	ldr	r1, [pc, #120]	; 196f0 <flatcc_builder_vector_edit@@Base+0x368>
   19674:	add	r1, pc, r1
   19678:	ldr	r0, [pc, #116]	; 196f4 <flatcc_builder_vector_edit@@Base+0x36c>
   1967c:	add	r0, pc, r0
   19680:	bl	1202c <__assert_fail@plt>
   19684:	ldr	r3, [fp, #-16]
   19688:	add	r3, r3, #1
   1968c:	str	r3, [fp, #-16]
   19690:	ldr	r2, [fp, #-16]
   19694:	ldr	r3, [fp, #-120]	; 0xffffff88
   19698:	cmp	r2, r3
   1969c:	bcc	1956c <flatcc_builder_vector_edit@@Base+0x1e4>
   196a0:	sub	r3, fp, #108	; 0x6c
   196a4:	mov	r1, r3
   196a8:	ldr	r0, [fp, #-112]	; 0xffffff90
   196ac:	bl	16790 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   196b0:	mov	r3, r0
   196b4:	mov	r0, r3
   196b8:	sub	sp, fp, #8
   196bc:	pop	{r4, fp, pc}
   196c0:	andeq	r4, r1, r8, lsr #24
   196c4:	andeq	r0, r0, ip, asr #32
   196c8:	andeq	r3, r0, r8, lsl #16
   196cc:			; <UNDEFINED> instruction: 0x000005b1
   196d0:	andeq	r3, r0, ip, ror r0
   196d4:	andeq	r3, r0, r4, ror r3
   196d8:	andeq	r3, r0, r4, asr #15
   196dc:			; <UNDEFINED> instruction: 0x000005b5
   196e0:	andeq	r3, r0, r8, lsr r0
   196e4:	andeq	r3, r0, r0, asr #6
   196e8:	andeq	r3, r0, r4, lsr #15
   196ec:			; <UNDEFINED> instruction: 0x000005b7
   196f0:	andeq	r3, r0, r8, lsl r0
   196f4:	andeq	r3, r0, r0, ror r0

000196f8 <flatcc_builder_create_offset_vector_direct@@Base>:
   196f8:	push	{fp, lr}
   196fc:	add	fp, sp, #4
   19700:	sub	sp, sp, #16
   19704:	str	r0, [fp, #-8]
   19708:	str	r1, [fp, #-12]
   1970c:	str	r2, [fp, #-16]
   19710:	mov	r3, #0
   19714:	ldr	r2, [fp, #-16]
   19718:	ldr	r1, [fp, #-12]
   1971c:	ldr	r0, [fp, #-8]
   19720:	bl	193b0 <flatcc_builder_vector_edit@@Base+0x28>
   19724:	mov	r3, r0
   19728:	mov	r0, r3
   1972c:	sub	sp, fp, #4
   19730:	pop	{fp, pc}

00019734 <flatcc_builder_end_offset_vector@@Base>:
   19734:	push	{fp, lr}
   19738:	add	fp, sp, #4
   1973c:	sub	sp, sp, #16
   19740:	str	r0, [fp, #-16]
   19744:	ldr	r3, [fp, #-16]
   19748:	ldr	r3, [r3, #32]
   1974c:	ldrh	r3, [r3, #14]
   19750:	cmp	r3, #5
   19754:	beq	19778 <flatcc_builder_end_offset_vector@@Base+0x44>
   19758:	ldr	r3, [pc, #104]	; 197c8 <flatcc_builder_end_offset_vector@@Base+0x94>
   1975c:	add	r3, pc, r3
   19760:	ldr	r2, [pc, #100]	; 197cc <flatcc_builder_end_offset_vector@@Base+0x98>
   19764:	ldr	r1, [pc, #100]	; 197d0 <flatcc_builder_end_offset_vector@@Base+0x9c>
   19768:	add	r1, pc, r1
   1976c:	ldr	r0, [pc, #96]	; 197d4 <flatcc_builder_end_offset_vector@@Base+0xa0>
   19770:	add	r0, pc, r0
   19774:	bl	1202c <__assert_fail@plt>
   19778:	ldr	r3, [fp, #-16]
   1977c:	ldr	r1, [r3, #16]
   19780:	ldr	r3, [fp, #-16]
   19784:	ldr	r3, [r3, #32]
   19788:	ldr	r3, [r3, #20]
   1978c:	mov	r2, r3
   19790:	ldr	r0, [fp, #-16]
   19794:	bl	196f8 <flatcc_builder_create_offset_vector_direct@@Base>
   19798:	str	r0, [fp, #-8]
   1979c:	ldr	r3, [fp, #-8]
   197a0:	cmp	r3, #0
   197a4:	bne	197b0 <flatcc_builder_end_offset_vector@@Base+0x7c>
   197a8:	mov	r3, #0
   197ac:	b	197bc <flatcc_builder_end_offset_vector@@Base+0x88>
   197b0:	ldr	r0, [fp, #-16]
   197b4:	bl	16640 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   197b8:	ldr	r3, [fp, #-8]
   197bc:	mov	r0, r3
   197c0:	sub	sp, fp, #4
   197c4:	pop	{fp, pc}
   197c8:	ldrdeq	r3, [r0], -r0
   197cc:	andeq	r0, r0, r8, asr #11
   197d0:	andeq	r2, r0, r4, lsr #30
   197d4:	andeq	r3, r0, ip, asr #1

000197d8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   197d8:	push	{fp, lr}
   197dc:	add	fp, sp, #4
   197e0:	sub	sp, sp, #16
   197e4:	str	r0, [fp, #-16]
   197e8:	str	r1, [fp, #-20]	; 0xffffffec
   197ec:	ldr	r3, [fp, #-16]
   197f0:	ldr	r3, [r3, #32]
   197f4:	ldrh	r3, [r3, #14]
   197f8:	cmp	r3, #5
   197fc:	beq	19820 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   19800:	ldr	r3, [pc, #104]	; 19870 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   19804:	add	r3, pc, r3
   19808:	ldr	r2, [pc, #100]	; 19874 <flatcc_builder_end_offset_vector_for_unions@@Base+0x9c>
   1980c:	ldr	r1, [pc, #100]	; 19878 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa0>
   19810:	add	r1, pc, r1
   19814:	ldr	r0, [pc, #96]	; 1987c <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   19818:	add	r0, pc, r0
   1981c:	bl	1202c <__assert_fail@plt>
   19820:	ldr	r3, [fp, #-16]
   19824:	ldr	r1, [r3, #16]
   19828:	ldr	r3, [fp, #-16]
   1982c:	ldr	r3, [r3, #32]
   19830:	ldr	r2, [r3, #20]
   19834:	ldr	r3, [fp, #-20]	; 0xffffffec
   19838:	ldr	r0, [fp, #-16]
   1983c:	bl	193b0 <flatcc_builder_vector_edit@@Base+0x28>
   19840:	str	r0, [fp, #-8]
   19844:	ldr	r3, [fp, #-8]
   19848:	cmp	r3, #0
   1984c:	bne	19858 <flatcc_builder_end_offset_vector_for_unions@@Base+0x80>
   19850:	mov	r3, #0
   19854:	b	19864 <flatcc_builder_end_offset_vector_for_unions@@Base+0x8c>
   19858:	ldr	r0, [fp, #-16]
   1985c:	bl	16640 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   19860:	ldr	r3, [fp, #-8]
   19864:	mov	r0, r3
   19868:	sub	sp, fp, #4
   1986c:	pop	{fp, pc}
   19870:	andeq	r3, r0, ip, asr #12
   19874:	ldrdeq	r0, [r0], -r5
   19878:	andeq	r2, r0, ip, ror lr
   1987c:	andeq	r3, r0, r4, lsr #32

00019880 <flatcc_builder_offset_vector_edit@@Base>:
   19880:	push	{fp}		; (str fp, [sp, #-4]!)
   19884:	add	fp, sp, #0
   19888:	sub	sp, sp, #12
   1988c:	str	r0, [fp, #-8]
   19890:	ldr	r3, [fp, #-8]
   19894:	ldr	r3, [r3, #16]
   19898:	mov	r0, r3
   1989c:	add	sp, fp, #0
   198a0:	pop	{fp}		; (ldr fp, [sp], #4)
   198a4:	bx	lr

000198a8 <flatcc_builder_offset_vector_count@@Base>:
   198a8:	push	{fp}		; (str fp, [sp, #-4]!)
   198ac:	add	fp, sp, #0
   198b0:	sub	sp, sp, #12
   198b4:	str	r0, [fp, #-8]
   198b8:	ldr	r3, [fp, #-8]
   198bc:	ldr	r3, [r3, #32]
   198c0:	ldr	r3, [r3, #20]
   198c4:	mov	r0, r3
   198c8:	add	sp, fp, #0
   198cc:	pop	{fp}		; (ldr fp, [sp], #4)
   198d0:	bx	lr

000198d4 <flatcc_builder_table_add_union@@Base>:
   198d4:	push	{fp, lr}
   198d8:	add	fp, sp, #4
   198dc:	sub	sp, sp, #24
   198e0:	str	r0, [fp, #-16]
   198e4:	str	r1, [fp, #-20]	; 0xffffffec
   198e8:	sub	r1, fp, #28
   198ec:	stm	r1, {r2, r3}
   198f0:	ldr	r3, [fp, #-16]
   198f4:	ldr	r3, [r3, #32]
   198f8:	ldrh	r3, [r3, #14]
   198fc:	cmp	r3, #3
   19900:	beq	19924 <flatcc_builder_table_add_union@@Base+0x50>
   19904:	ldr	r3, [pc, #352]	; 19a6c <flatcc_builder_table_add_union@@Base+0x198>
   19908:	add	r3, pc, r3
   1990c:	ldr	r2, [pc, #348]	; 19a70 <flatcc_builder_table_add_union@@Base+0x19c>
   19910:	ldr	r1, [pc, #348]	; 19a74 <flatcc_builder_table_add_union@@Base+0x1a0>
   19914:	add	r1, pc, r1
   19918:	ldr	r0, [pc, #344]	; 19a78 <flatcc_builder_table_add_union@@Base+0x1a4>
   1991c:	add	r0, pc, r0
   19920:	bl	1202c <__assert_fail@plt>
   19924:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   19928:	cmp	r3, #0
   1992c:	bne	1997c <flatcc_builder_table_add_union@@Base+0xa8>
   19930:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19934:	cmp	r3, #0
   19938:	beq	1997c <flatcc_builder_table_add_union@@Base+0xa8>
   1993c:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   19940:	cmp	r3, #0
   19944:	bne	19974 <flatcc_builder_table_add_union@@Base+0xa0>
   19948:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1994c:	cmp	r3, #0
   19950:	beq	19974 <flatcc_builder_table_add_union@@Base+0xa0>
   19954:	ldr	r3, [pc, #288]	; 19a7c <flatcc_builder_table_add_union@@Base+0x1a8>
   19958:	add	r3, pc, r3
   1995c:	ldr	r2, [pc, #284]	; 19a80 <flatcc_builder_table_add_union@@Base+0x1ac>
   19960:	ldr	r1, [pc, #284]	; 19a84 <flatcc_builder_table_add_union@@Base+0x1b0>
   19964:	add	r1, pc, r1
   19968:	ldr	r0, [pc, #280]	; 19a88 <flatcc_builder_table_add_union@@Base+0x1b4>
   1996c:	add	r0, pc, r0
   19970:	bl	1202c <__assert_fail@plt>
   19974:	mvn	r3, #0
   19978:	b	19a60 <flatcc_builder_table_add_union@@Base+0x18c>
   1997c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19980:	cmp	r3, #0
   19984:	beq	199e4 <flatcc_builder_table_add_union@@Base+0x110>
   19988:	ldr	r1, [fp, #-20]	; 0xffffffec
   1998c:	ldr	r0, [fp, #-16]
   19990:	bl	1aa1c <flatcc_builder_table_add_offset@@Base>
   19994:	str	r0, [fp, #-8]
   19998:	ldr	r3, [fp, #-8]
   1999c:	cmp	r3, #0
   199a0:	bne	199d8 <flatcc_builder_table_add_union@@Base+0x104>
   199a4:	ldr	r3, [fp, #-8]
   199a8:	cmp	r3, #0
   199ac:	bne	199d0 <flatcc_builder_table_add_union@@Base+0xfc>
   199b0:	ldr	r3, [pc, #212]	; 19a8c <flatcc_builder_table_add_union@@Base+0x1b8>
   199b4:	add	r3, pc, r3
   199b8:	ldr	r2, [pc, #208]	; 19a90 <flatcc_builder_table_add_union@@Base+0x1bc>
   199bc:	ldr	r1, [pc, #208]	; 19a94 <flatcc_builder_table_add_union@@Base+0x1c0>
   199c0:	add	r1, pc, r1
   199c4:	ldr	r0, [pc, #204]	; 19a98 <flatcc_builder_table_add_union@@Base+0x1c4>
   199c8:	add	r0, pc, r0
   199cc:	bl	1202c <__assert_fail@plt>
   199d0:	mvn	r3, #0
   199d4:	b	19a60 <flatcc_builder_table_add_union@@Base+0x18c>
   199d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   199dc:	ldr	r3, [fp, #-8]
   199e0:	str	r2, [r3]
   199e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   199e8:	sub	r1, r3, #1
   199ec:	mov	r3, #1
   199f0:	mov	r2, #1
   199f4:	ldr	r0, [fp, #-16]
   199f8:	bl	1a7c0 <flatcc_builder_table_add@@Base>
   199fc:	str	r0, [fp, #-12]
   19a00:	ldr	r3, [fp, #-12]
   19a04:	cmp	r3, #0
   19a08:	bne	19a40 <flatcc_builder_table_add_union@@Base+0x16c>
   19a0c:	ldr	r3, [fp, #-12]
   19a10:	cmp	r3, #0
   19a14:	bne	19a38 <flatcc_builder_table_add_union@@Base+0x164>
   19a18:	ldr	r3, [pc, #124]	; 19a9c <flatcc_builder_table_add_union@@Base+0x1c8>
   19a1c:	add	r3, pc, r3
   19a20:	ldr	r2, [pc, #120]	; 19aa0 <flatcc_builder_table_add_union@@Base+0x1cc>
   19a24:	ldr	r1, [pc, #120]	; 19aa4 <flatcc_builder_table_add_union@@Base+0x1d0>
   19a28:	add	r1, pc, r1
   19a2c:	ldr	r0, [pc, #116]	; 19aa8 <flatcc_builder_table_add_union@@Base+0x1d4>
   19a30:	add	r0, pc, r0
   19a34:	bl	1202c <__assert_fail@plt>
   19a38:	mvn	r3, #0
   19a3c:	b	19a60 <flatcc_builder_table_add_union@@Base+0x18c>
   19a40:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   19a44:	mov	r0, r3
   19a48:	bl	150f0 <main@@Base+0x25c>
   19a4c:	mov	r3, r0
   19a50:	mov	r2, r3
   19a54:	ldr	r3, [fp, #-12]
   19a58:	strb	r2, [r3]
   19a5c:	mov	r3, #0
   19a60:	mov	r0, r3
   19a64:	sub	sp, fp, #4
   19a68:	pop	{fp, pc}
   19a6c:	andeq	r3, r0, r4, ror r5
   19a70:	andeq	r0, r0, lr, ror #11
   19a74:	andeq	r2, r0, r8, ror sp
   19a78:	andeq	r3, r0, r0, lsr r0
   19a7c:	andeq	r3, r0, r4, lsr #10
   19a80:	andeq	r0, r0, pc, ror #11
   19a84:	andeq	r2, r0, r8, lsr #26
   19a88:	andeq	r3, r0, r0, asr #32
   19a8c:	andeq	r3, r0, r8, asr #9
   19a90:	strdeq	r0, [r0], -r2
   19a94:	andeq	r2, r0, ip, asr #25
   19a98:	andeq	r3, r0, r8
   19a9c:	andeq	r3, r0, r0, ror #8
   19aa0:	strdeq	r0, [r0], -r6
   19aa4:	andeq	r2, r0, r4, ror #24
   19aa8:	andeq	r2, r0, ip, lsr #31

00019aac <flatcc_builder_table_add_union_vector@@Base>:
   19aac:	push	{fp, lr}
   19ab0:	add	fp, sp, #4
   19ab4:	sub	sp, sp, #24
   19ab8:	str	r0, [fp, #-16]
   19abc:	str	r1, [fp, #-20]	; 0xffffffec
   19ac0:	sub	r1, fp, #28
   19ac4:	stm	r1, {r2, r3}
   19ac8:	ldr	r3, [fp, #-16]
   19acc:	ldr	r3, [r3, #32]
   19ad0:	ldrh	r3, [r3, #14]
   19ad4:	cmp	r3, #3
   19ad8:	beq	19afc <flatcc_builder_table_add_union_vector@@Base+0x50>
   19adc:	ldr	r3, [pc, #396]	; 19c70 <flatcc_builder_table_add_union_vector@@Base+0x1c4>
   19ae0:	add	r3, pc, r3
   19ae4:	mov	r2, #1536	; 0x600
   19ae8:	ldr	r1, [pc, #388]	; 19c74 <flatcc_builder_table_add_union_vector@@Base+0x1c8>
   19aec:	add	r1, pc, r1
   19af0:	ldr	r0, [pc, #384]	; 19c78 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   19af4:	add	r0, pc, r0
   19af8:	bl	1202c <__assert_fail@plt>
   19afc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19b00:	cmp	r3, #0
   19b04:	moveq	r3, #1
   19b08:	movne	r3, #0
   19b0c:	uxtb	r2, r3
   19b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19b14:	cmp	r3, #0
   19b18:	moveq	r3, #1
   19b1c:	movne	r3, #0
   19b20:	uxtb	r3, r3
   19b24:	eor	r3, r3, r2
   19b28:	uxtb	r3, r3
   19b2c:	cmp	r3, #0
   19b30:	beq	19b94 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   19b34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19b38:	cmp	r3, #0
   19b3c:	movne	r3, #1
   19b40:	moveq	r3, #0
   19b44:	uxtb	r2, r3
   19b48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19b4c:	cmp	r3, #0
   19b50:	moveq	r3, #1
   19b54:	movne	r3, #0
   19b58:	uxtb	r3, r3
   19b5c:	eor	r3, r3, r2
   19b60:	uxtb	r3, r3
   19b64:	cmp	r3, #0
   19b68:	bne	19b8c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   19b6c:	ldr	r3, [pc, #264]	; 19c7c <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   19b70:	add	r3, pc, r3
   19b74:	ldr	r2, [pc, #260]	; 19c80 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   19b78:	ldr	r1, [pc, #260]	; 19c84 <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   19b7c:	add	r1, pc, r1
   19b80:	ldr	r0, [pc, #256]	; 19c88 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   19b84:	add	r0, pc, r0
   19b88:	bl	1202c <__assert_fail@plt>
   19b8c:	mvn	r3, #0
   19b90:	b	19c64 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   19b94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19b98:	cmp	r3, #0
   19b9c:	beq	19c60 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   19ba0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ba4:	sub	r3, r3, #1
   19ba8:	mov	r1, r3
   19bac:	ldr	r0, [fp, #-16]
   19bb0:	bl	1aa1c <flatcc_builder_table_add_offset@@Base>
   19bb4:	str	r0, [fp, #-8]
   19bb8:	ldr	r3, [fp, #-8]
   19bbc:	cmp	r3, #0
   19bc0:	bne	19bf8 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   19bc4:	ldr	r3, [fp, #-8]
   19bc8:	cmp	r3, #0
   19bcc:	bne	19bf0 <flatcc_builder_table_add_union_vector@@Base+0x144>
   19bd0:	ldr	r3, [pc, #180]	; 19c8c <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   19bd4:	add	r3, pc, r3
   19bd8:	ldr	r2, [pc, #176]	; 19c90 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   19bdc:	ldr	r1, [pc, #176]	; 19c94 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   19be0:	add	r1, pc, r1
   19be4:	ldr	r0, [pc, #172]	; 19c98 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   19be8:	add	r0, pc, r0
   19bec:	bl	1202c <__assert_fail@plt>
   19bf0:	mvn	r3, #0
   19bf4:	b	19c64 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   19bf8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19bfc:	ldr	r3, [fp, #-8]
   19c00:	str	r2, [r3]
   19c04:	ldr	r1, [fp, #-20]	; 0xffffffec
   19c08:	ldr	r0, [fp, #-16]
   19c0c:	bl	1aa1c <flatcc_builder_table_add_offset@@Base>
   19c10:	str	r0, [fp, #-8]
   19c14:	ldr	r3, [fp, #-8]
   19c18:	cmp	r3, #0
   19c1c:	bne	19c54 <flatcc_builder_table_add_union_vector@@Base+0x1a8>
   19c20:	ldr	r3, [fp, #-8]
   19c24:	cmp	r3, #0
   19c28:	bne	19c4c <flatcc_builder_table_add_union_vector@@Base+0x1a0>
   19c2c:	ldr	r3, [pc, #104]	; 19c9c <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   19c30:	add	r3, pc, r3
   19c34:	ldr	r2, [pc, #100]	; 19ca0 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   19c38:	ldr	r1, [pc, #100]	; 19ca4 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   19c3c:	add	r1, pc, r1
   19c40:	ldr	r0, [pc, #96]	; 19ca8 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   19c44:	add	r0, pc, r0
   19c48:	bl	1202c <__assert_fail@plt>
   19c4c:	mvn	r3, #0
   19c50:	b	19c64 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   19c54:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19c58:	ldr	r3, [fp, #-8]
   19c5c:	str	r2, [r3]
   19c60:	mov	r3, #0
   19c64:	mov	r0, r3
   19c68:	sub	sp, fp, #4
   19c6c:	pop	{fp, pc}
   19c70:			; <UNDEFINED> instruction: 0x000033bc
   19c74:	andeq	r2, r0, r0, lsr #23
   19c78:	andeq	r2, r0, r8, asr lr
   19c7c:	andeq	r3, r0, ip, lsr #6
   19c80:	andeq	r0, r0, r1, lsl #12
   19c84:	andeq	r2, r0, r0, lsl fp
   19c88:	andeq	r2, r0, r4, ror #28
   19c8c:	andeq	r3, r0, r8, asr #5
   19c90:	andeq	r0, r0, r4, lsl #12
   19c94:	andeq	r2, r0, ip, lsr #21
   19c98:	andeq	r2, r0, r8, ror #27
   19c9c:	andeq	r3, r0, ip, ror #4
   19ca0:	andeq	r0, r0, r8, lsl #12
   19ca4:	andeq	r2, r0, r0, asr sl
   19ca8:	andeq	r2, r0, ip, lsl #27

00019cac <flatcc_builder_create_union_vector@@Base>:
   19cac:	push	{fp, lr}
   19cb0:	add	fp, sp, #4
   19cb4:	sub	sp, sp, #48	; 0x30
   19cb8:	str	r0, [fp, #-32]	; 0xffffffe0
   19cbc:	str	r1, [fp, #-36]	; 0xffffffdc
   19cc0:	str	r2, [fp, #-40]	; 0xffffffd8
   19cc4:	str	r3, [fp, #-44]	; 0xffffffd4
   19cc8:	mov	r3, #0
   19ccc:	str	r3, [fp, #-24]	; 0xffffffe8
   19cd0:	mov	r3, #0
   19cd4:	str	r3, [fp, #-20]	; 0xffffffec
   19cd8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19cdc:	bl	180e0 <flatcc_builder_start_offset_vector@@Base>
   19ce0:	mov	r3, r0
   19ce4:	cmp	r3, #0
   19ce8:	beq	19d04 <flatcc_builder_create_union_vector@@Base+0x58>
   19cec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19cf0:	mov	r2, r3
   19cf4:	sub	r3, fp, #24
   19cf8:	ldm	r3, {r0, r1}
   19cfc:	stm	r2, {r0, r1}
   19d00:	b	19e20 <flatcc_builder_create_union_vector@@Base+0x174>
   19d04:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19d08:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19d0c:	bl	1798c <flatcc_builder_extend_offset_vector@@Base>
   19d10:	mov	r3, r0
   19d14:	cmp	r3, #0
   19d18:	bne	19d34 <flatcc_builder_create_union_vector@@Base+0x88>
   19d1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d20:	mov	r2, r3
   19d24:	sub	r3, fp, #24
   19d28:	ldm	r3, {r0, r1}
   19d2c:	stm	r2, {r0, r1}
   19d30:	b	19e20 <flatcc_builder_create_union_vector@@Base+0x174>
   19d34:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19d38:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19d3c:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   19d40:	str	r0, [fp, #-12]
   19d44:	ldr	r3, [fp, #-12]
   19d48:	cmp	r3, #0
   19d4c:	bne	19d68 <flatcc_builder_create_union_vector@@Base+0xbc>
   19d50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d54:	mov	r2, r3
   19d58:	sub	r3, fp, #24
   19d5c:	ldm	r3, {r0, r1}
   19d60:	stm	r2, {r0, r1}
   19d64:	b	19e20 <flatcc_builder_create_union_vector@@Base+0x174>
   19d68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19d6c:	bl	19880 <flatcc_builder_offset_vector_edit@@Base>
   19d70:	str	r0, [fp, #-16]
   19d74:	mov	r3, #0
   19d78:	str	r3, [fp, #-8]
   19d7c:	b	19dd8 <flatcc_builder_create_union_vector@@Base+0x12c>
   19d80:	ldr	r2, [fp, #-12]
   19d84:	ldr	r3, [fp, #-8]
   19d88:	add	r3, r2, r3
   19d8c:	ldr	r2, [fp, #-8]
   19d90:	lsl	r2, r2, #3
   19d94:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19d98:	add	r2, r1, r2
   19d9c:	ldrb	r2, [r2]
   19da0:	strb	r2, [r3]
   19da4:	ldr	r3, [fp, #-8]
   19da8:	lsl	r3, r3, #2
   19dac:	ldr	r2, [fp, #-16]
   19db0:	add	r3, r2, r3
   19db4:	ldr	r2, [fp, #-8]
   19db8:	lsl	r2, r2, #3
   19dbc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19dc0:	add	r2, r1, r2
   19dc4:	ldr	r2, [r2, #4]
   19dc8:	str	r2, [r3]
   19dcc:	ldr	r3, [fp, #-8]
   19dd0:	add	r3, r3, #1
   19dd4:	str	r3, [fp, #-8]
   19dd8:	ldr	r2, [fp, #-8]
   19ddc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19de0:	cmp	r2, r3
   19de4:	bcc	19d80 <flatcc_builder_create_union_vector@@Base+0xd4>
   19de8:	sub	r0, fp, #24
   19dec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19df0:	str	r3, [sp]
   19df4:	ldr	r3, [fp, #-16]
   19df8:	ldr	r2, [fp, #-12]
   19dfc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19e00:	bl	19e2c <flatcc_builder_create_union_vector_direct@@Base>
   19e04:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19e08:	bl	16640 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   19e0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19e10:	mov	r2, r3
   19e14:	sub	r3, fp, #24
   19e18:	ldm	r3, {r0, r1}
   19e1c:	stm	r2, {r0, r1}
   19e20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19e24:	sub	sp, fp, #4
   19e28:	pop	{fp, pc}

00019e2c <flatcc_builder_create_union_vector_direct@@Base>:
   19e2c:	push	{fp, lr}
   19e30:	add	fp, sp, #4
   19e34:	sub	sp, sp, #32
   19e38:	str	r0, [fp, #-16]
   19e3c:	str	r1, [fp, #-20]	; 0xffffffec
   19e40:	str	r2, [fp, #-24]	; 0xffffffe8
   19e44:	str	r3, [fp, #-28]	; 0xffffffe4
   19e48:	mov	r3, #0
   19e4c:	str	r3, [fp, #-12]
   19e50:	mov	r3, #0
   19e54:	str	r3, [fp, #-8]
   19e58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e5c:	ldr	r2, [fp, #4]
   19e60:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19e64:	ldr	r0, [fp, #-20]	; 0xffffffec
   19e68:	bl	193b0 <flatcc_builder_vector_edit@@Base+0x28>
   19e6c:	mov	r3, r0
   19e70:	str	r3, [fp, #-8]
   19e74:	ldr	r3, [fp, #-8]
   19e78:	cmp	r3, #0
   19e7c:	bne	19e98 <flatcc_builder_create_union_vector_direct@@Base+0x6c>
   19e80:	ldr	r3, [fp, #-16]
   19e84:	mov	r2, r3
   19e88:	sub	r3, fp, #12
   19e8c:	ldm	r3, {r0, r1}
   19e90:	stm	r2, {r0, r1}
   19e94:	b	19efc <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   19e98:	mvn	r3, #0
   19e9c:	str	r3, [sp, #4]
   19ea0:	mov	r3, #1
   19ea4:	str	r3, [sp]
   19ea8:	mov	r3, #1
   19eac:	ldr	r2, [fp, #4]
   19eb0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19eb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   19eb8:	bl	1906c <flatcc_builder_create_vector@@Base>
   19ebc:	mov	r3, r0
   19ec0:	str	r3, [fp, #-12]
   19ec4:	ldr	r3, [fp, #-12]
   19ec8:	cmp	r3, #0
   19ecc:	bne	19ee8 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   19ed0:	ldr	r3, [fp, #-16]
   19ed4:	mov	r2, r3
   19ed8:	sub	r3, fp, #12
   19edc:	ldm	r3, {r0, r1}
   19ee0:	stm	r2, {r0, r1}
   19ee4:	b	19efc <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   19ee8:	ldr	r3, [fp, #-16]
   19eec:	mov	r2, r3
   19ef0:	sub	r3, fp, #12
   19ef4:	ldm	r3, {r0, r1}
   19ef8:	stm	r2, {r0, r1}
   19efc:	ldr	r0, [fp, #-16]
   19f00:	sub	sp, fp, #4
   19f04:	pop	{fp, pc}

00019f08 <flatcc_builder_start_union_vector@@Base>:
   19f08:	push	{fp, lr}
   19f0c:	add	fp, sp, #4
   19f10:	sub	sp, sp, #8
   19f14:	str	r0, [fp, #-8]
   19f18:	mov	r1, #4
   19f1c:	ldr	r0, [fp, #-8]
   19f20:	bl	16460 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   19f24:	mov	r3, r0
   19f28:	cmp	r3, #0
   19f2c:	beq	19f38 <flatcc_builder_start_union_vector@@Base+0x30>
   19f30:	mvn	r3, #0
   19f34:	b	19f78 <flatcc_builder_start_union_vector@@Base+0x70>
   19f38:	ldr	r3, [fp, #-8]
   19f3c:	ldr	r3, [r3, #32]
   19f40:	mov	r2, #8
   19f44:	str	r2, [r3, #16]
   19f48:	ldr	r3, [fp, #-8]
   19f4c:	ldr	r3, [r3, #32]
   19f50:	mov	r2, #0
   19f54:	str	r2, [r3, #20]
   19f58:	ldr	r3, [fp, #-8]
   19f5c:	ldr	r3, [r3, #32]
   19f60:	mov	r2, #7
   19f64:	strh	r2, [r3, #14]
   19f68:	mvn	r1, #3
   19f6c:	ldr	r0, [fp, #-8]
   19f70:	bl	153d8 <flatcc_builder_default_alloc@@Base+0x1c8>
   19f74:	mov	r3, #0
   19f78:	mov	r0, r3
   19f7c:	sub	sp, fp, #4
   19f80:	pop	{fp, pc}

00019f84 <flatcc_builder_end_union_vector@@Base>:
   19f84:	push	{fp, lr}
   19f88:	add	fp, sp, #4
   19f8c:	sub	sp, sp, #48	; 0x30
   19f90:	str	r0, [fp, #-40]	; 0xffffffd8
   19f94:	str	r1, [fp, #-44]	; 0xffffffd4
   19f98:	mov	r3, #0
   19f9c:	str	r3, [fp, #-32]	; 0xffffffe0
   19fa0:	mov	r3, #0
   19fa4:	str	r3, [fp, #-28]	; 0xffffffe4
   19fa8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19fac:	ldr	r3, [r3, #32]
   19fb0:	ldrh	r3, [r3, #14]
   19fb4:	cmp	r3, #7
   19fb8:	beq	19fdc <flatcc_builder_end_union_vector@@Base+0x58>
   19fbc:	ldr	r3, [pc, #320]	; 1a104 <flatcc_builder_end_union_vector@@Base+0x180>
   19fc0:	add	r3, pc, r3
   19fc4:	ldr	r2, [pc, #316]	; 1a108 <flatcc_builder_end_union_vector@@Base+0x184>
   19fc8:	ldr	r1, [pc, #316]	; 1a10c <flatcc_builder_end_union_vector@@Base+0x188>
   19fcc:	add	r1, pc, r1
   19fd0:	ldr	r0, [pc, #312]	; 1a110 <flatcc_builder_end_union_vector@@Base+0x18c>
   19fd4:	add	r0, pc, r0
   19fd8:	bl	1202c <__assert_fail@plt>
   19fdc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19fe0:	bl	1a13c <flatcc_builder_union_vector_count@@Base>
   19fe4:	str	r0, [fp, #-12]
   19fe8:	ldr	r2, [fp, #-12]
   19fec:	mov	r3, r2
   19ff0:	lsl	r3, r3, #2
   19ff4:	add	r3, r3, r2
   19ff8:	mov	r1, r3
   19ffc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a000:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   1a004:	str	r0, [fp, #-16]
   1a008:	ldr	r3, [fp, #-16]
   1a00c:	cmp	r3, #0
   1a010:	bne	1a02c <flatcc_builder_end_union_vector@@Base+0xa8>
   1a014:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a018:	mov	r2, r3
   1a01c:	sub	r3, fp, #32
   1a020:	ldm	r3, {r0, r1}
   1a024:	stm	r2, {r0, r1}
   1a028:	b	1a0f8 <flatcc_builder_end_union_vector@@Base+0x174>
   1a02c:	ldr	r3, [fp, #-12]
   1a030:	lsl	r3, r3, #2
   1a034:	ldr	r2, [fp, #-16]
   1a038:	add	r3, r2, r3
   1a03c:	str	r3, [fp, #-20]	; 0xffffffec
   1a040:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a044:	bl	1a114 <flatcc_builder_union_vector_edit@@Base>
   1a048:	str	r0, [fp, #-24]	; 0xffffffe8
   1a04c:	mov	r3, #0
   1a050:	str	r3, [fp, #-8]
   1a054:	b	1a0b0 <flatcc_builder_end_union_vector@@Base+0x12c>
   1a058:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a05c:	ldr	r3, [fp, #-8]
   1a060:	add	r3, r2, r3
   1a064:	ldr	r2, [fp, #-8]
   1a068:	lsl	r2, r2, #3
   1a06c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a070:	add	r2, r1, r2
   1a074:	ldrb	r2, [r2]
   1a078:	strb	r2, [r3]
   1a07c:	ldr	r3, [fp, #-8]
   1a080:	lsl	r3, r3, #2
   1a084:	ldr	r2, [fp, #-16]
   1a088:	add	r3, r2, r3
   1a08c:	ldr	r2, [fp, #-8]
   1a090:	lsl	r2, r2, #3
   1a094:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a098:	add	r2, r1, r2
   1a09c:	ldr	r2, [r2, #4]
   1a0a0:	str	r2, [r3]
   1a0a4:	ldr	r3, [fp, #-8]
   1a0a8:	add	r3, r3, #1
   1a0ac:	str	r3, [fp, #-8]
   1a0b0:	ldr	r2, [fp, #-8]
   1a0b4:	ldr	r3, [fp, #-12]
   1a0b8:	cmp	r2, r3
   1a0bc:	bcc	1a058 <flatcc_builder_end_union_vector@@Base+0xd4>
   1a0c0:	sub	r0, fp, #32
   1a0c4:	ldr	r3, [fp, #-12]
   1a0c8:	str	r3, [sp]
   1a0cc:	ldr	r3, [fp, #-16]
   1a0d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a0d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1a0d8:	bl	19e2c <flatcc_builder_create_union_vector_direct@@Base>
   1a0dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a0e0:	bl	16640 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1a0e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a0e8:	mov	r2, r3
   1a0ec:	sub	r3, fp, #32
   1a0f0:	ldm	r3, {r0, r1}
   1a0f4:	stm	r2, {r0, r1}
   1a0f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a0fc:	sub	sp, fp, #4
   1a100:	pop	{fp, pc}
   1a104:	andeq	r2, r0, r4, lsl #30
   1a108:	andeq	r0, r0, r1, asr r6
   1a10c:	andeq	r2, r0, r0, asr #13
   1a110:	andeq	r2, r0, ip, lsr sl

0001a114 <flatcc_builder_union_vector_edit@@Base>:
   1a114:	push	{fp}		; (str fp, [sp, #-4]!)
   1a118:	add	fp, sp, #0
   1a11c:	sub	sp, sp, #12
   1a120:	str	r0, [fp, #-8]
   1a124:	ldr	r3, [fp, #-8]
   1a128:	ldr	r3, [r3, #16]
   1a12c:	mov	r0, r3
   1a130:	add	sp, fp, #0
   1a134:	pop	{fp}		; (ldr fp, [sp], #4)
   1a138:	bx	lr

0001a13c <flatcc_builder_union_vector_count@@Base>:
   1a13c:	push	{fp}		; (str fp, [sp, #-4]!)
   1a140:	add	fp, sp, #0
   1a144:	sub	sp, sp, #12
   1a148:	str	r0, [fp, #-8]
   1a14c:	ldr	r3, [fp, #-8]
   1a150:	ldr	r3, [r3, #32]
   1a154:	ldr	r3, [r3, #20]
   1a158:	mov	r0, r3
   1a15c:	add	sp, fp, #0
   1a160:	pop	{fp}		; (ldr fp, [sp], #4)
   1a164:	bx	lr

0001a168 <flatcc_builder_extend_union_vector@@Base>:
   1a168:	push	{fp, lr}
   1a16c:	add	fp, sp, #4
   1a170:	sub	sp, sp, #8
   1a174:	str	r0, [fp, #-8]
   1a178:	str	r1, [fp, #-12]
   1a17c:	mvn	r2, #-536870912	; 0xe0000000
   1a180:	ldr	r1, [fp, #-12]
   1a184:	ldr	r0, [fp, #-8]
   1a188:	bl	17678 <flatcc_builder_end_struct@@Base+0xa0>
   1a18c:	mov	r3, r0
   1a190:	cmp	r3, #0
   1a194:	beq	1a1a0 <flatcc_builder_extend_union_vector@@Base+0x38>
   1a198:	mov	r3, #0
   1a19c:	b	1a1b8 <flatcc_builder_extend_union_vector@@Base+0x50>
   1a1a0:	ldr	r3, [fp, #-12]
   1a1a4:	lsl	r3, r3, #3
   1a1a8:	mov	r1, r3
   1a1ac:	ldr	r0, [fp, #-8]
   1a1b0:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   1a1b4:	mov	r3, r0
   1a1b8:	mov	r0, r3
   1a1bc:	sub	sp, fp, #4
   1a1c0:	pop	{fp, pc}

0001a1c4 <flatcc_builder_truncate_union_vector@@Base>:
   1a1c4:	push	{fp, lr}
   1a1c8:	add	fp, sp, #4
   1a1cc:	sub	sp, sp, #8
   1a1d0:	str	r0, [fp, #-8]
   1a1d4:	str	r1, [fp, #-12]
   1a1d8:	ldr	r3, [fp, #-8]
   1a1dc:	ldr	r3, [r3, #32]
   1a1e0:	ldrh	r3, [r3, #14]
   1a1e4:	cmp	r3, #7
   1a1e8:	beq	1a20c <flatcc_builder_truncate_union_vector@@Base+0x48>
   1a1ec:	ldr	r3, [pc, #192]	; 1a2b4 <flatcc_builder_truncate_union_vector@@Base+0xf0>
   1a1f0:	add	r3, pc, r3
   1a1f4:	ldr	r2, [pc, #188]	; 1a2b8 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   1a1f8:	ldr	r1, [pc, #188]	; 1a2bc <flatcc_builder_truncate_union_vector@@Base+0xf8>
   1a1fc:	add	r1, pc, r1
   1a200:	ldr	r0, [pc, #184]	; 1a2c0 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   1a204:	add	r0, pc, r0
   1a208:	bl	1202c <__assert_fail@plt>
   1a20c:	ldr	r3, [fp, #-8]
   1a210:	ldr	r3, [r3, #32]
   1a214:	ldr	r2, [r3, #20]
   1a218:	ldr	r3, [fp, #-12]
   1a21c:	cmp	r2, r3
   1a220:	bcs	1a264 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   1a224:	ldr	r3, [fp, #-8]
   1a228:	ldr	r3, [r3, #32]
   1a22c:	ldr	r2, [r3, #20]
   1a230:	ldr	r3, [fp, #-12]
   1a234:	cmp	r2, r3
   1a238:	bcs	1a25c <flatcc_builder_truncate_union_vector@@Base+0x98>
   1a23c:	ldr	r3, [pc, #128]	; 1a2c4 <flatcc_builder_truncate_union_vector@@Base+0x100>
   1a240:	add	r3, pc, r3
   1a244:	ldr	r2, [pc, #124]	; 1a2c8 <flatcc_builder_truncate_union_vector@@Base+0x104>
   1a248:	ldr	r1, [pc, #124]	; 1a2cc <flatcc_builder_truncate_union_vector@@Base+0x108>
   1a24c:	add	r1, pc, r1
   1a250:	ldr	r0, [pc, #120]	; 1a2d0 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   1a254:	add	r0, pc, r0
   1a258:	bl	1202c <__assert_fail@plt>
   1a25c:	mvn	r3, #0
   1a260:	b	1a2a8 <flatcc_builder_truncate_union_vector@@Base+0xe4>
   1a264:	ldr	r3, [fp, #-8]
   1a268:	ldr	r3, [r3, #32]
   1a26c:	ldr	r2, [fp, #-8]
   1a270:	ldr	r2, [r2, #32]
   1a274:	ldr	r1, [r2, #20]
   1a278:	ldr	r2, [fp, #-12]
   1a27c:	sub	r2, r1, r2
   1a280:	str	r2, [r3, #20]
   1a284:	ldr	r3, [fp, #-8]
   1a288:	ldr	r3, [r3, #32]
   1a28c:	ldr	r3, [r3, #16]
   1a290:	ldr	r2, [fp, #-12]
   1a294:	mul	r3, r2, r3
   1a298:	mov	r1, r3
   1a29c:	ldr	r0, [fp, #-8]
   1a2a0:	bl	1559c <flatcc_builder_default_alloc@@Base+0x38c>
   1a2a4:	mov	r3, #0
   1a2a8:	mov	r0, r3
   1a2ac:	sub	sp, fp, #4
   1a2b0:	pop	{fp, pc}
   1a2b4:	strdeq	r2, [r0], -r4
   1a2b8:	andeq	r0, r0, r1, lsl #13
   1a2bc:	muleq	r0, r0, r4
   1a2c0:	andeq	r2, r0, ip, lsl #16
   1a2c4:	andeq	r2, r0, r4, lsr #25
   1a2c8:	andeq	r0, r0, r2, lsl #13
   1a2cc:	andeq	r2, r0, r0, asr #8
   1a2d0:	andeq	r2, r0, ip, ror #12

0001a2d4 <flatcc_builder_union_vector_push@@Base>:
   1a2d4:	push	{fp, lr}
   1a2d8:	add	fp, sp, #4
   1a2dc:	sub	sp, sp, #24
   1a2e0:	str	r0, [fp, #-16]
   1a2e4:	sub	r3, fp, #24
   1a2e8:	stm	r3, {r1, r2}
   1a2ec:	ldr	r3, [fp, #-16]
   1a2f0:	ldr	r3, [r3, #32]
   1a2f4:	ldrh	r3, [r3, #14]
   1a2f8:	cmp	r3, #7
   1a2fc:	beq	1a320 <flatcc_builder_union_vector_push@@Base+0x4c>
   1a300:	ldr	r3, [pc, #152]	; 1a3a0 <flatcc_builder_union_vector_push@@Base+0xcc>
   1a304:	add	r3, pc, r3
   1a308:	ldr	r2, [pc, #148]	; 1a3a4 <flatcc_builder_union_vector_push@@Base+0xd0>
   1a30c:	ldr	r1, [pc, #148]	; 1a3a8 <flatcc_builder_union_vector_push@@Base+0xd4>
   1a310:	add	r1, pc, r1
   1a314:	ldr	r0, [pc, #144]	; 1a3ac <flatcc_builder_union_vector_push@@Base+0xd8>
   1a318:	add	r0, pc, r0
   1a31c:	bl	1202c <__assert_fail@plt>
   1a320:	ldr	r3, [fp, #-16]
   1a324:	ldr	r3, [r3, #32]
   1a328:	ldr	r3, [r3, #20]
   1a32c:	cmn	r3, #-536870911	; 0xe0000001
   1a330:	bne	1a33c <flatcc_builder_union_vector_push@@Base+0x68>
   1a334:	mov	r3, #0
   1a338:	b	1a394 <flatcc_builder_union_vector_push@@Base+0xc0>
   1a33c:	ldr	r3, [fp, #-16]
   1a340:	ldr	r3, [r3, #32]
   1a344:	ldr	r2, [fp, #-16]
   1a348:	ldr	r2, [r2, #32]
   1a34c:	ldr	r2, [r2, #20]
   1a350:	add	r2, r2, #1
   1a354:	str	r2, [r3, #20]
   1a358:	mov	r1, #8
   1a35c:	ldr	r0, [fp, #-16]
   1a360:	bl	15500 <flatcc_builder_default_alloc@@Base+0x2f0>
   1a364:	str	r0, [fp, #-8]
   1a368:	ldr	r3, [fp, #-8]
   1a36c:	cmp	r3, #0
   1a370:	bne	1a37c <flatcc_builder_union_vector_push@@Base+0xa8>
   1a374:	mov	r3, #0
   1a378:	b	1a394 <flatcc_builder_union_vector_push@@Base+0xc0>
   1a37c:	ldr	r3, [fp, #-8]
   1a380:	mov	r2, r3
   1a384:	sub	r3, fp, #24
   1a388:	ldm	r3, {r0, r1}
   1a38c:	stm	r2, {r0, r1}
   1a390:	ldr	r3, [fp, #-8]
   1a394:	mov	r0, r3
   1a398:	sub	sp, fp, #4
   1a39c:	pop	{fp, pc}
   1a3a0:	andeq	r2, r0, r8, lsl #24
   1a3a4:	andeq	r0, r0, sp, lsl #13
   1a3a8:	andeq	r2, r0, ip, ror r3
   1a3ac:	strdeq	r2, [r0], -r8

0001a3b0 <flatcc_builder_append_union_vector@@Base>:
   1a3b0:	push	{fp, lr}
   1a3b4:	add	fp, sp, #4
   1a3b8:	sub	sp, sp, #16
   1a3bc:	str	r0, [fp, #-8]
   1a3c0:	str	r1, [fp, #-12]
   1a3c4:	str	r2, [fp, #-16]
   1a3c8:	ldr	r3, [fp, #-8]
   1a3cc:	ldr	r3, [r3, #32]
   1a3d0:	ldrh	r3, [r3, #14]
   1a3d4:	cmp	r3, #7
   1a3d8:	beq	1a3fc <flatcc_builder_append_union_vector@@Base+0x4c>
   1a3dc:	ldr	r3, [pc, #100]	; 1a448 <flatcc_builder_append_union_vector@@Base+0x98>
   1a3e0:	add	r3, pc, r3
   1a3e4:	ldr	r2, [pc, #96]	; 1a44c <flatcc_builder_append_union_vector@@Base+0x9c>
   1a3e8:	ldr	r1, [pc, #96]	; 1a450 <flatcc_builder_append_union_vector@@Base+0xa0>
   1a3ec:	add	r1, pc, r1
   1a3f0:	ldr	r0, [pc, #92]	; 1a454 <flatcc_builder_append_union_vector@@Base+0xa4>
   1a3f4:	add	r0, pc, r0
   1a3f8:	bl	1202c <__assert_fail@plt>
   1a3fc:	mvn	r2, #-536870912	; 0xe0000000
   1a400:	ldr	r1, [fp, #-16]
   1a404:	ldr	r0, [fp, #-8]
   1a408:	bl	17678 <flatcc_builder_end_struct@@Base+0xa0>
   1a40c:	mov	r3, r0
   1a410:	cmp	r3, #0
   1a414:	beq	1a420 <flatcc_builder_append_union_vector@@Base+0x70>
   1a418:	mov	r3, #0
   1a41c:	b	1a43c <flatcc_builder_append_union_vector@@Base+0x8c>
   1a420:	ldr	r3, [fp, #-16]
   1a424:	lsl	r3, r3, #3
   1a428:	mov	r2, r3
   1a42c:	ldr	r1, [fp, #-12]
   1a430:	ldr	r0, [fp, #-8]
   1a434:	bl	155f8 <flatcc_builder_default_alloc@@Base+0x3e8>
   1a438:	mov	r3, r0
   1a43c:	mov	r0, r3
   1a440:	sub	sp, fp, #4
   1a444:	pop	{fp, pc}
   1a448:	andeq	r2, r0, r0, asr fp
   1a44c:	muleq	r0, ip, r6
   1a450:	andeq	r2, r0, r0, lsr #5
   1a454:	andeq	r2, r0, ip, lsl r6

0001a458 <flatcc_builder_create_string@@Base>:
   1a458:	push	{r4, fp, lr}
   1a45c:	add	fp, sp, #8
   1a460:	sub	sp, sp, #100	; 0x64
   1a464:	str	r0, [fp, #-96]	; 0xffffffa0
   1a468:	str	r1, [fp, #-100]	; 0xffffff9c
   1a46c:	str	r2, [fp, #-104]	; 0xffffff98
   1a470:	ldr	r4, [pc, #376]	; 1a5f0 <flatcc_builder_create_string@@Base+0x198>
   1a474:	add	r4, pc, r4
   1a478:	ldr	r0, [fp, #-104]	; 0xffffff98
   1a47c:	bl	150cc <main@@Base+0x238>
   1a480:	mov	r3, r0
   1a484:	str	r3, [fp, #-20]	; 0xffffffec
   1a488:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a48c:	add	r3, r3, #1
   1a490:	mov	r2, #4
   1a494:	mov	r1, r3
   1a498:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1a49c:	bl	16708 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   1a4a0:	mov	r3, r0
   1a4a4:	add	r3, r3, #1
   1a4a8:	str	r3, [fp, #-16]
   1a4ac:	mov	r3, #0
   1a4b0:	str	r3, [fp, #-92]	; 0xffffffa4
   1a4b4:	mov	r3, #0
   1a4b8:	str	r3, [fp, #-88]	; 0xffffffa8
   1a4bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a4c0:	add	r3, r3, #4
   1a4c4:	str	r3, [fp, #-92]	; 0xffffffa4
   1a4c8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a4cc:	add	r3, r3, #1
   1a4d0:	lsl	r3, r3, #3
   1a4d4:	sub	r2, fp, #12
   1a4d8:	add	r3, r2, r3
   1a4dc:	sub	r2, fp, #20
   1a4e0:	str	r2, [r3, #-80]	; 0xffffffb0
   1a4e4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a4e8:	add	r3, r3, #1
   1a4ec:	lsl	r3, r3, #3
   1a4f0:	sub	r2, fp, #12
   1a4f4:	add	r3, r2, r3
   1a4f8:	mov	r2, #4
   1a4fc:	str	r2, [r3, #-76]	; 0xffffffb4
   1a500:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a504:	add	r3, r3, #1
   1a508:	str	r3, [fp, #-88]	; 0xffffffa8
   1a50c:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a510:	cmp	r3, #0
   1a514:	beq	1a56c <flatcc_builder_create_string@@Base+0x114>
   1a518:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1a51c:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a520:	add	r3, r2, r3
   1a524:	str	r3, [fp, #-92]	; 0xffffffa4
   1a528:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a52c:	add	r3, r3, #1
   1a530:	lsl	r3, r3, #3
   1a534:	sub	r2, fp, #12
   1a538:	add	r3, r2, r3
   1a53c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1a540:	str	r2, [r3, #-80]	; 0xffffffb0
   1a544:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a548:	add	r3, r3, #1
   1a54c:	lsl	r3, r3, #3
   1a550:	sub	r2, fp, #12
   1a554:	add	r3, r2, r3
   1a558:	ldr	r2, [fp, #-104]	; 0xffffff98
   1a55c:	str	r2, [r3, #-76]	; 0xffffffb4
   1a560:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a564:	add	r3, r3, #1
   1a568:	str	r3, [fp, #-88]	; 0xffffffa8
   1a56c:	ldr	r3, [fp, #-16]
   1a570:	cmp	r3, #0
   1a574:	beq	1a5d0 <flatcc_builder_create_string@@Base+0x178>
   1a578:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1a57c:	ldr	r3, [fp, #-16]
   1a580:	add	r3, r2, r3
   1a584:	str	r3, [fp, #-92]	; 0xffffffa4
   1a588:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a58c:	add	r3, r3, #1
   1a590:	lsl	r3, r3, #3
   1a594:	sub	r2, fp, #12
   1a598:	add	r3, r2, r3
   1a59c:	ldr	r2, [pc, #80]	; 1a5f4 <flatcc_builder_create_string@@Base+0x19c>
   1a5a0:	ldr	r2, [r4, r2]
   1a5a4:	str	r2, [r3, #-80]	; 0xffffffb0
   1a5a8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a5ac:	add	r3, r3, #1
   1a5b0:	lsl	r3, r3, #3
   1a5b4:	sub	r2, fp, #12
   1a5b8:	add	r3, r2, r3
   1a5bc:	ldr	r2, [fp, #-16]
   1a5c0:	str	r2, [r3, #-76]	; 0xffffffb4
   1a5c4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a5c8:	add	r3, r3, #1
   1a5cc:	str	r3, [fp, #-88]	; 0xffffffa8
   1a5d0:	sub	r3, fp, #92	; 0x5c
   1a5d4:	mov	r1, r3
   1a5d8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1a5dc:	bl	16790 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   1a5e0:	mov	r3, r0
   1a5e4:	mov	r0, r3
   1a5e8:	sub	sp, fp, #8
   1a5ec:	pop	{r4, fp, pc}
   1a5f0:	andeq	r3, r1, r4, lsl #23
   1a5f4:	andeq	r0, r0, ip, asr #32

0001a5f8 <flatcc_builder_create_string_str@@Base>:
   1a5f8:	push	{fp, lr}
   1a5fc:	add	fp, sp, #4
   1a600:	sub	sp, sp, #8
   1a604:	str	r0, [fp, #-8]
   1a608:	str	r1, [fp, #-12]
   1a60c:	ldr	r0, [fp, #-12]
   1a610:	bl	11fe4 <strlen@plt>
   1a614:	mov	r3, r0
   1a618:	mov	r2, r3
   1a61c:	ldr	r1, [fp, #-12]
   1a620:	ldr	r0, [fp, #-8]
   1a624:	bl	1a458 <flatcc_builder_create_string@@Base>
   1a628:	mov	r3, r0
   1a62c:	mov	r0, r3
   1a630:	sub	sp, fp, #4
   1a634:	pop	{fp, pc}

0001a638 <flatcc_builder_create_string_strn@@Base>:
   1a638:	push	{fp, lr}
   1a63c:	add	fp, sp, #4
   1a640:	sub	sp, sp, #16
   1a644:	str	r0, [fp, #-8]
   1a648:	str	r1, [fp, #-12]
   1a64c:	str	r2, [fp, #-16]
   1a650:	ldr	r1, [fp, #-16]
   1a654:	ldr	r0, [fp, #-12]
   1a658:	bl	151bc <main@@Base+0x328>
   1a65c:	mov	r3, r0
   1a660:	mov	r2, r3
   1a664:	ldr	r1, [fp, #-12]
   1a668:	ldr	r0, [fp, #-8]
   1a66c:	bl	1a458 <flatcc_builder_create_string@@Base>
   1a670:	mov	r3, r0
   1a674:	mov	r0, r3
   1a678:	sub	sp, fp, #4
   1a67c:	pop	{fp, pc}

0001a680 <flatcc_builder_end_string@@Base>:
   1a680:	push	{fp, lr}
   1a684:	add	fp, sp, #4
   1a688:	sub	sp, sp, #16
   1a68c:	str	r0, [fp, #-16]
   1a690:	ldr	r3, [fp, #-16]
   1a694:	ldr	r3, [r3, #32]
   1a698:	ldrh	r3, [r3, #14]
   1a69c:	cmp	r3, #6
   1a6a0:	beq	1a6c4 <flatcc_builder_end_string@@Base+0x44>
   1a6a4:	ldr	r3, [pc, #160]	; 1a74c <flatcc_builder_end_string@@Base+0xcc>
   1a6a8:	add	r3, pc, r3
   1a6ac:	ldr	r2, [pc, #156]	; 1a750 <flatcc_builder_end_string@@Base+0xd0>
   1a6b0:	ldr	r1, [pc, #156]	; 1a754 <flatcc_builder_end_string@@Base+0xd4>
   1a6b4:	add	r1, pc, r1
   1a6b8:	ldr	r0, [pc, #152]	; 1a758 <flatcc_builder_end_string@@Base+0xd8>
   1a6bc:	add	r0, pc, r0
   1a6c0:	bl	1202c <__assert_fail@plt>
   1a6c4:	ldr	r3, [fp, #-16]
   1a6c8:	ldr	r3, [r3, #32]
   1a6cc:	ldr	r2, [r3, #20]
   1a6d0:	ldr	r3, [fp, #-16]
   1a6d4:	ldr	r3, [r3, #20]
   1a6d8:	cmp	r2, r3
   1a6dc:	beq	1a700 <flatcc_builder_end_string@@Base+0x80>
   1a6e0:	ldr	r3, [pc, #116]	; 1a75c <flatcc_builder_end_string@@Base+0xdc>
   1a6e4:	add	r3, pc, r3
   1a6e8:	ldr	r2, [pc, #112]	; 1a760 <flatcc_builder_end_string@@Base+0xe0>
   1a6ec:	ldr	r1, [pc, #112]	; 1a764 <flatcc_builder_end_string@@Base+0xe4>
   1a6f0:	add	r1, pc, r1
   1a6f4:	ldr	r0, [pc, #108]	; 1a768 <flatcc_builder_end_string@@Base+0xe8>
   1a6f8:	add	r0, pc, r0
   1a6fc:	bl	1202c <__assert_fail@plt>
   1a700:	ldr	r3, [fp, #-16]
   1a704:	ldr	r1, [r3, #16]
   1a708:	ldr	r3, [fp, #-16]
   1a70c:	ldr	r3, [r3, #20]
   1a710:	mov	r2, r3
   1a714:	ldr	r0, [fp, #-16]
   1a718:	bl	1a458 <flatcc_builder_create_string@@Base>
   1a71c:	str	r0, [fp, #-8]
   1a720:	ldr	r3, [fp, #-8]
   1a724:	cmp	r3, #0
   1a728:	bne	1a734 <flatcc_builder_end_string@@Base+0xb4>
   1a72c:	mov	r3, #0
   1a730:	b	1a740 <flatcc_builder_end_string@@Base+0xc0>
   1a734:	ldr	r0, [fp, #-16]
   1a738:	bl	16640 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1a73c:	ldr	r3, [fp, #-8]
   1a740:	mov	r0, r3
   1a744:	sub	sp, fp, #4
   1a748:	pop	{fp, pc}
   1a74c:	andeq	r2, r0, ip, lsr #17
   1a750:	andeq	r0, r0, r4, asr #13
   1a754:	ldrdeq	r1, [r0], -r8
   1a758:			; <UNDEFINED> instruction: 0x000021b4
   1a75c:	andeq	r2, r0, r0, ror r8
   1a760:	andeq	r0, r0, r5, asr #13
   1a764:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1a768:	andeq	r2, r0, ip, asr #6

0001a76c <flatcc_builder_string_edit@@Base>:
   1a76c:	push	{fp}		; (str fp, [sp, #-4]!)
   1a770:	add	fp, sp, #0
   1a774:	sub	sp, sp, #12
   1a778:	str	r0, [fp, #-8]
   1a77c:	ldr	r3, [fp, #-8]
   1a780:	ldr	r3, [r3, #16]
   1a784:	mov	r0, r3
   1a788:	add	sp, fp, #0
   1a78c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a790:	bx	lr

0001a794 <flatcc_builder_string_len@@Base>:
   1a794:	push	{fp}		; (str fp, [sp, #-4]!)
   1a798:	add	fp, sp, #0
   1a79c:	sub	sp, sp, #12
   1a7a0:	str	r0, [fp, #-8]
   1a7a4:	ldr	r3, [fp, #-8]
   1a7a8:	ldr	r3, [r3, #32]
   1a7ac:	ldr	r3, [r3, #20]
   1a7b0:	mov	r0, r3
   1a7b4:	add	sp, fp, #0
   1a7b8:	pop	{fp}		; (ldr fp, [sp], #4)
   1a7bc:	bx	lr

0001a7c0 <flatcc_builder_table_add@@Base>:
   1a7c0:	push	{fp, lr}
   1a7c4:	add	fp, sp, #4
   1a7c8:	sub	sp, sp, #16
   1a7cc:	str	r0, [fp, #-8]
   1a7d0:	str	r1, [fp, #-12]
   1a7d4:	str	r2, [fp, #-16]
   1a7d8:	strh	r3, [fp, #-18]	; 0xffffffee
   1a7dc:	ldr	r3, [fp, #-8]
   1a7e0:	ldr	r3, [r3, #32]
   1a7e4:	ldrh	r3, [r3, #14]
   1a7e8:	cmp	r3, #3
   1a7ec:	beq	1a810 <flatcc_builder_table_add@@Base+0x50>
   1a7f0:	ldr	r3, [pc, #268]	; 1a904 <flatcc_builder_table_add@@Base+0x144>
   1a7f4:	add	r3, pc, r3
   1a7f8:	ldr	r2, [pc, #264]	; 1a908 <flatcc_builder_table_add@@Base+0x148>
   1a7fc:	ldr	r1, [pc, #264]	; 1a90c <flatcc_builder_table_add@@Base+0x14c>
   1a800:	add	r1, pc, r1
   1a804:	ldr	r0, [pc, #260]	; 1a910 <flatcc_builder_table_add@@Base+0x150>
   1a808:	add	r0, pc, r0
   1a80c:	bl	1202c <__assert_fail@plt>
   1a810:	ldr	r3, [fp, #-12]
   1a814:	cmp	r3, #0
   1a818:	blt	1a82c <flatcc_builder_table_add@@Base+0x6c>
   1a81c:	ldr	r3, [fp, #-12]
   1a820:	ldr	r2, [pc, #236]	; 1a914 <flatcc_builder_table_add@@Base+0x154>
   1a824:	cmp	r3, r2
   1a828:	ble	1a84c <flatcc_builder_table_add@@Base+0x8c>
   1a82c:	ldr	r3, [pc, #228]	; 1a918 <flatcc_builder_table_add@@Base+0x158>
   1a830:	add	r3, pc, r3
   1a834:	ldr	r2, [pc, #224]	; 1a91c <flatcc_builder_table_add@@Base+0x15c>
   1a838:	ldr	r1, [pc, #224]	; 1a920 <flatcc_builder_table_add@@Base+0x160>
   1a83c:	add	r1, pc, r1
   1a840:	ldr	r0, [pc, #220]	; 1a924 <flatcc_builder_table_add@@Base+0x164>
   1a844:	add	r0, pc, r0
   1a848:	bl	1202c <__assert_fail@plt>
   1a84c:	ldr	r3, [fp, #-8]
   1a850:	ldrh	r3, [r3, #130]	; 0x82
   1a854:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1a858:	cmp	r2, r3
   1a85c:	bls	1a86c <flatcc_builder_table_add@@Base+0xac>
   1a860:	ldr	r3, [fp, #-8]
   1a864:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1a868:	strh	r2, [r3, #130]	; 0x82
   1a86c:	ldr	r3, [fp, #-8]
   1a870:	ldr	r2, [r3, #4]
   1a874:	ldr	r3, [fp, #-12]
   1a878:	lsl	r3, r3, #1
   1a87c:	add	r3, r2, r3
   1a880:	ldrh	r3, [r3]
   1a884:	cmp	r3, #0
   1a888:	beq	1a8ac <flatcc_builder_table_add@@Base+0xec>
   1a88c:	ldr	r3, [pc, #148]	; 1a928 <flatcc_builder_table_add@@Base+0x168>
   1a890:	add	r3, pc, r3
   1a894:	ldr	r2, [pc, #144]	; 1a92c <flatcc_builder_table_add@@Base+0x16c>
   1a898:	ldr	r1, [pc, #144]	; 1a930 <flatcc_builder_table_add@@Base+0x170>
   1a89c:	add	r1, pc, r1
   1a8a0:	ldr	r0, [pc, #140]	; 1a934 <flatcc_builder_table_add@@Base+0x174>
   1a8a4:	add	r0, pc, r0
   1a8a8:	bl	1202c <__assert_fail@plt>
   1a8ac:	ldr	r3, [fp, #-8]
   1a8b0:	ldr	r2, [r3, #12]
   1a8b4:	ldr	r3, [fp, #-12]
   1a8b8:	eor	r3, r3, r2
   1a8bc:	ldr	r2, [pc, #116]	; 1a938 <flatcc_builder_table_add@@Base+0x178>
   1a8c0:	mul	r2, r2, r3
   1a8c4:	ldr	r3, [fp, #-16]
   1a8c8:	eor	r3, r3, r2
   1a8cc:	ldr	r2, [pc, #100]	; 1a938 <flatcc_builder_table_add@@Base+0x178>
   1a8d0:	mul	r2, r2, r3
   1a8d4:	ldr	r3, [fp, #-8]
   1a8d8:	str	r2, [r3, #12]
   1a8dc:	ldr	r3, [fp, #-12]
   1a8e0:	uxth	r3, r3
   1a8e4:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1a8e8:	ldr	r1, [fp, #-16]
   1a8ec:	ldr	r0, [fp, #-8]
   1a8f0:	bl	15654 <flatcc_builder_default_alloc@@Base+0x444>
   1a8f4:	mov	r3, r0
   1a8f8:	mov	r0, r3
   1a8fc:	sub	sp, fp, #4
   1a900:	pop	{fp, pc}
   1a904:	andeq	r2, r0, ip, ror r7
   1a908:	andeq	r0, r0, sp, ror #13
   1a90c:	andeq	r1, r0, ip, lsl #29
   1a910:	andeq	r2, r0, r4, asr #2
   1a914:	strdeq	r7, [r0], -ip
   1a918:	andeq	r2, r0, r0, asr #14
   1a91c:	andeq	r0, r0, lr, ror #13
   1a920:	andeq	r1, r0, r0, asr lr
   1a924:	andeq	r2, r0, r4, lsr #4
   1a928:	andeq	r2, r0, r0, ror #13
   1a92c:	strdeq	r0, [r0], -r8
   1a930:	strdeq	r1, [r0], -r0
   1a934:	andeq	r1, r0, r8, asr #28
   1a938:			; <UNDEFINED> instruction: 0x9e3779b1

0001a93c <flatcc_builder_table_edit@@Base>:
   1a93c:	push	{fp, lr}
   1a940:	add	fp, sp, #4
   1a944:	sub	sp, sp, #8
   1a948:	str	r0, [fp, #-8]
   1a94c:	str	r1, [fp, #-12]
   1a950:	ldr	r3, [fp, #-8]
   1a954:	ldr	r3, [r3, #32]
   1a958:	ldrh	r3, [r3, #14]
   1a95c:	cmp	r3, #3
   1a960:	beq	1a984 <flatcc_builder_table_edit@@Base+0x48>
   1a964:	ldr	r3, [pc, #64]	; 1a9ac <flatcc_builder_table_edit@@Base+0x70>
   1a968:	add	r3, pc, r3
   1a96c:	ldr	r2, [pc, #60]	; 1a9b0 <flatcc_builder_table_edit@@Base+0x74>
   1a970:	ldr	r1, [pc, #60]	; 1a9b4 <flatcc_builder_table_edit@@Base+0x78>
   1a974:	add	r1, pc, r1
   1a978:	ldr	r0, [pc, #56]	; 1a9b8 <flatcc_builder_table_edit@@Base+0x7c>
   1a97c:	add	r0, pc, r0
   1a980:	bl	1202c <__assert_fail@plt>
   1a984:	ldr	r3, [fp, #-8]
   1a988:	ldr	r2, [r3, #16]
   1a98c:	ldr	r3, [fp, #-8]
   1a990:	ldr	r1, [r3, #20]
   1a994:	ldr	r3, [fp, #-12]
   1a998:	sub	r3, r1, r3
   1a99c:	add	r3, r2, r3
   1a9a0:	mov	r0, r3
   1a9a4:	sub	sp, fp, #4
   1a9a8:	pop	{fp, pc}
   1a9ac:	andeq	r2, r0, r4, lsr #12
   1a9b0:	andeq	r0, r0, r2, lsl #14
   1a9b4:	andeq	r1, r0, r8, lsl sp
   1a9b8:	ldrdeq	r1, [r0], -r0

0001a9bc <flatcc_builder_table_add_copy@@Base>:
   1a9bc:	push	{fp, lr}
   1a9c0:	add	fp, sp, #4
   1a9c4:	sub	sp, sp, #24
   1a9c8:	str	r0, [fp, #-16]
   1a9cc:	str	r1, [fp, #-20]	; 0xffffffec
   1a9d0:	str	r2, [fp, #-24]	; 0xffffffe8
   1a9d4:	str	r3, [fp, #-28]	; 0xffffffe4
   1a9d8:	ldrh	r3, [fp, #4]
   1a9dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a9e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a9e4:	ldr	r0, [fp, #-16]
   1a9e8:	bl	1a7c0 <flatcc_builder_table_add@@Base>
   1a9ec:	str	r0, [fp, #-8]
   1a9f0:	ldr	r3, [fp, #-8]
   1a9f4:	cmp	r3, #0
   1a9f8:	beq	1aa0c <flatcc_builder_table_add_copy@@Base+0x50>
   1a9fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1aa00:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1aa04:	ldr	r0, [fp, #-8]
   1aa08:	bl	11f90 <memcpy@plt>
   1aa0c:	ldr	r3, [fp, #-8]
   1aa10:	mov	r0, r3
   1aa14:	sub	sp, fp, #4
   1aa18:	pop	{fp, pc}

0001aa1c <flatcc_builder_table_add_offset@@Base>:
   1aa1c:	push	{fp, lr}
   1aa20:	add	fp, sp, #4
   1aa24:	sub	sp, sp, #8
   1aa28:	str	r0, [fp, #-8]
   1aa2c:	str	r1, [fp, #-12]
   1aa30:	ldr	r3, [fp, #-8]
   1aa34:	ldr	r3, [r3, #32]
   1aa38:	ldrh	r3, [r3, #14]
   1aa3c:	cmp	r3, #3
   1aa40:	beq	1aa64 <flatcc_builder_table_add_offset@@Base+0x48>
   1aa44:	ldr	r3, [pc, #228]	; 1ab30 <flatcc_builder_table_add_offset@@Base+0x114>
   1aa48:	add	r3, pc, r3
   1aa4c:	ldr	r2, [pc, #224]	; 1ab34 <flatcc_builder_table_add_offset@@Base+0x118>
   1aa50:	ldr	r1, [pc, #224]	; 1ab38 <flatcc_builder_table_add_offset@@Base+0x11c>
   1aa54:	add	r1, pc, r1
   1aa58:	ldr	r0, [pc, #220]	; 1ab3c <flatcc_builder_table_add_offset@@Base+0x120>
   1aa5c:	add	r0, pc, r0
   1aa60:	bl	1202c <__assert_fail@plt>
   1aa64:	ldr	r3, [fp, #-12]
   1aa68:	cmp	r3, #0
   1aa6c:	blt	1aa80 <flatcc_builder_table_add_offset@@Base+0x64>
   1aa70:	ldr	r3, [fp, #-12]
   1aa74:	ldr	r2, [pc, #196]	; 1ab40 <flatcc_builder_table_add_offset@@Base+0x124>
   1aa78:	cmp	r3, r2
   1aa7c:	ble	1aaa0 <flatcc_builder_table_add_offset@@Base+0x84>
   1aa80:	ldr	r3, [pc, #188]	; 1ab44 <flatcc_builder_table_add_offset@@Base+0x128>
   1aa84:	add	r3, pc, r3
   1aa88:	ldr	r2, [pc, #184]	; 1ab48 <flatcc_builder_table_add_offset@@Base+0x12c>
   1aa8c:	ldr	r1, [pc, #184]	; 1ab4c <flatcc_builder_table_add_offset@@Base+0x130>
   1aa90:	add	r1, pc, r1
   1aa94:	ldr	r0, [pc, #180]	; 1ab50 <flatcc_builder_table_add_offset@@Base+0x134>
   1aa98:	add	r0, pc, r0
   1aa9c:	bl	1202c <__assert_fail@plt>
   1aaa0:	ldr	r3, [fp, #-8]
   1aaa4:	ldr	r2, [r3, #4]
   1aaa8:	ldr	r3, [fp, #-12]
   1aaac:	lsl	r3, r3, #1
   1aab0:	add	r3, r2, r3
   1aab4:	ldrh	r3, [r3]
   1aab8:	cmp	r3, #0
   1aabc:	beq	1aae0 <flatcc_builder_table_add_offset@@Base+0xc4>
   1aac0:	ldr	r3, [pc, #140]	; 1ab54 <flatcc_builder_table_add_offset@@Base+0x138>
   1aac4:	add	r3, pc, r3
   1aac8:	ldr	r2, [pc, #136]	; 1ab58 <flatcc_builder_table_add_offset@@Base+0x13c>
   1aacc:	ldr	r1, [pc, #136]	; 1ab5c <flatcc_builder_table_add_offset@@Base+0x140>
   1aad0:	add	r1, pc, r1
   1aad4:	ldr	r0, [pc, #132]	; 1ab60 <flatcc_builder_table_add_offset@@Base+0x144>
   1aad8:	add	r0, pc, r0
   1aadc:	bl	1202c <__assert_fail@plt>
   1aae0:	ldr	r3, [fp, #-8]
   1aae4:	ldr	r2, [r3, #12]
   1aae8:	ldr	r3, [fp, #-12]
   1aaec:	eor	r3, r3, r2
   1aaf0:	ldr	r2, [pc, #108]	; 1ab64 <flatcc_builder_table_add_offset@@Base+0x148>
   1aaf4:	mul	r3, r2, r3
   1aaf8:	eor	r3, r3, #4
   1aafc:	ldr	r2, [pc, #96]	; 1ab64 <flatcc_builder_table_add_offset@@Base+0x148>
   1ab00:	mul	r2, r2, r3
   1ab04:	ldr	r3, [fp, #-8]
   1ab08:	str	r2, [r3, #12]
   1ab0c:	ldr	r3, [fp, #-12]
   1ab10:	uxth	r3, r3
   1ab14:	mov	r1, r3
   1ab18:	ldr	r0, [fp, #-8]
   1ab1c:	bl	15760 <flatcc_builder_default_alloc@@Base+0x550>
   1ab20:	mov	r3, r0
   1ab24:	mov	r0, r3
   1ab28:	sub	sp, fp, #4
   1ab2c:	pop	{fp, pc}
   1ab30:	andeq	r2, r0, r0, ror #10
   1ab34:	andeq	r0, r0, r3, lsl r7
   1ab38:	andeq	r1, r0, r8, lsr ip
   1ab3c:	strdeq	r1, [r0], -r0
   1ab40:	strdeq	r7, [r0], -ip
   1ab44:	andeq	r2, r0, r4, lsr #10
   1ab48:	andeq	r0, r0, r4, lsl r7
   1ab4c:	strdeq	r1, [r0], -ip
   1ab50:	ldrdeq	r1, [r0], -r0
   1ab54:	andeq	r2, r0, r4, ror #9
   1ab58:	andeq	r0, r0, fp, lsl r7
   1ab5c:			; <UNDEFINED> instruction: 0x00001bbc
   1ab60:	andeq	r1, r0, r4, lsl ip
   1ab64:			; <UNDEFINED> instruction: 0x9e3779b1

0001ab68 <flatcc_builder_push_buffer_alignment@@Base>:
   1ab68:	push	{fp}		; (str fp, [sp, #-4]!)
   1ab6c:	add	fp, sp, #0
   1ab70:	sub	sp, sp, #20
   1ab74:	str	r0, [fp, #-16]
   1ab78:	ldr	r3, [fp, #-16]
   1ab7c:	ldrh	r3, [r3, #128]	; 0x80
   1ab80:	strh	r3, [fp, #-6]
   1ab84:	ldr	r3, [fp, #-16]
   1ab88:	mov	r2, #4
   1ab8c:	strh	r2, [r3, #128]	; 0x80
   1ab90:	ldrh	r3, [fp, #-6]
   1ab94:	mov	r0, r3
   1ab98:	add	sp, fp, #0
   1ab9c:	pop	{fp}		; (ldr fp, [sp], #4)
   1aba0:	bx	lr

0001aba4 <flatcc_builder_pop_buffer_alignment@@Base>:
   1aba4:	push	{fp, lr}
   1aba8:	add	fp, sp, #4
   1abac:	sub	sp, sp, #8
   1abb0:	str	r0, [fp, #-8]
   1abb4:	mov	r3, r1
   1abb8:	strh	r3, [fp, #-10]
   1abbc:	ldrh	r3, [fp, #-10]
   1abc0:	mov	r1, r3
   1abc4:	ldr	r0, [fp, #-8]
   1abc8:	bl	160cc <flatcc_builder_clear@@Base+0xb0>
   1abcc:	nop			; (mov r0, r0)
   1abd0:	sub	sp, fp, #4
   1abd4:	pop	{fp, pc}

0001abd8 <flatcc_builder_get_buffer_alignment@@Base>:
   1abd8:	push	{fp}		; (str fp, [sp, #-4]!)
   1abdc:	add	fp, sp, #0
   1abe0:	sub	sp, sp, #12
   1abe4:	str	r0, [fp, #-8]
   1abe8:	ldr	r3, [fp, #-8]
   1abec:	ldrh	r3, [r3, #128]	; 0x80
   1abf0:	mov	r0, r3
   1abf4:	add	sp, fp, #0
   1abf8:	pop	{fp}		; (ldr fp, [sp], #4)
   1abfc:	bx	lr

0001ac00 <flatcc_builder_set_vtable_clustering@@Base>:
   1ac00:	push	{fp}		; (str fp, [sp, #-4]!)
   1ac04:	add	fp, sp, #0
   1ac08:	sub	sp, sp, #12
   1ac0c:	str	r0, [fp, #-8]
   1ac10:	str	r1, [fp, #-12]
   1ac14:	ldr	r3, [fp, #-12]
   1ac18:	cmp	r3, #0
   1ac1c:	moveq	r3, #1
   1ac20:	movne	r3, #0
   1ac24:	uxtb	r3, r3
   1ac28:	mov	r2, r3
   1ac2c:	ldr	r3, [fp, #-8]
   1ac30:	str	r2, [r3, #180]	; 0xb4
   1ac34:	nop			; (mov r0, r0)
   1ac38:	add	sp, fp, #0
   1ac3c:	pop	{fp}		; (ldr fp, [sp], #4)
   1ac40:	bx	lr

0001ac44 <flatcc_builder_set_block_align@@Base>:
   1ac44:	push	{fp}		; (str fp, [sp, #-4]!)
   1ac48:	add	fp, sp, #0
   1ac4c:	sub	sp, sp, #12
   1ac50:	str	r0, [fp, #-8]
   1ac54:	mov	r3, r1
   1ac58:	strh	r3, [fp, #-10]
   1ac5c:	ldr	r3, [fp, #-8]
   1ac60:	ldrh	r2, [fp, #-10]
   1ac64:	strh	r2, [r3, #132]	; 0x84
   1ac68:	nop			; (mov r0, r0)
   1ac6c:	add	sp, fp, #0
   1ac70:	pop	{fp}		; (ldr fp, [sp], #4)
   1ac74:	bx	lr

0001ac78 <flatcc_builder_get_level@@Base>:
   1ac78:	push	{fp}		; (str fp, [sp, #-4]!)
   1ac7c:	add	fp, sp, #0
   1ac80:	sub	sp, sp, #12
   1ac84:	str	r0, [fp, #-8]
   1ac88:	ldr	r3, [fp, #-8]
   1ac8c:	ldr	r3, [r3, #156]	; 0x9c
   1ac90:	mov	r0, r3
   1ac94:	add	sp, fp, #0
   1ac98:	pop	{fp}		; (ldr fp, [sp], #4)
   1ac9c:	bx	lr

0001aca0 <flatcc_builder_set_max_level@@Base>:
   1aca0:	push	{fp}		; (str fp, [sp, #-4]!)
   1aca4:	add	fp, sp, #0
   1aca8:	sub	sp, sp, #12
   1acac:	str	r0, [fp, #-8]
   1acb0:	str	r1, [fp, #-12]
   1acb4:	ldr	r3, [fp, #-8]
   1acb8:	ldr	r2, [fp, #-12]
   1acbc:	str	r2, [r3, #176]	; 0xb0
   1acc0:	ldr	r3, [fp, #-8]
   1acc4:	ldr	r2, [r3, #160]	; 0xa0
   1acc8:	ldr	r3, [fp, #-8]
   1accc:	ldr	r3, [r3, #176]	; 0xb0
   1acd0:	cmp	r2, r3
   1acd4:	bge	1ace8 <flatcc_builder_set_max_level@@Base+0x48>
   1acd8:	ldr	r3, [fp, #-8]
   1acdc:	ldr	r2, [r3, #176]	; 0xb0
   1ace0:	ldr	r3, [fp, #-8]
   1ace4:	str	r2, [r3, #160]	; 0xa0
   1ace8:	nop			; (mov r0, r0)
   1acec:	add	sp, fp, #0
   1acf0:	pop	{fp}		; (ldr fp, [sp], #4)
   1acf4:	bx	lr

0001acf8 <flatcc_builder_get_buffer_size@@Base>:
   1acf8:	push	{fp}		; (str fp, [sp, #-4]!)
   1acfc:	add	fp, sp, #0
   1ad00:	sub	sp, sp, #12
   1ad04:	str	r0, [fp, #-8]
   1ad08:	ldr	r3, [fp, #-8]
   1ad0c:	ldr	r2, [r3, #140]	; 0x8c
   1ad10:	ldr	r3, [fp, #-8]
   1ad14:	ldr	r3, [r3, #136]	; 0x88
   1ad18:	sub	r3, r2, r3
   1ad1c:	mov	r0, r3
   1ad20:	add	sp, fp, #0
   1ad24:	pop	{fp}		; (ldr fp, [sp], #4)
   1ad28:	bx	lr

0001ad2c <flatcc_builder_get_buffer_start@@Base>:
   1ad2c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ad30:	add	fp, sp, #0
   1ad34:	sub	sp, sp, #12
   1ad38:	str	r0, [fp, #-8]
   1ad3c:	ldr	r3, [fp, #-8]
   1ad40:	ldr	r3, [r3, #136]	; 0x88
   1ad44:	mov	r0, r3
   1ad48:	add	sp, fp, #0
   1ad4c:	pop	{fp}		; (ldr fp, [sp], #4)
   1ad50:	bx	lr

0001ad54 <flatcc_builder_get_buffer_end@@Base>:
   1ad54:	push	{fp}		; (str fp, [sp, #-4]!)
   1ad58:	add	fp, sp, #0
   1ad5c:	sub	sp, sp, #12
   1ad60:	str	r0, [fp, #-8]
   1ad64:	ldr	r3, [fp, #-8]
   1ad68:	ldr	r3, [r3, #140]	; 0x8c
   1ad6c:	mov	r0, r3
   1ad70:	add	sp, fp, #0
   1ad74:	pop	{fp}		; (ldr fp, [sp], #4)
   1ad78:	bx	lr

0001ad7c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1ad7c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ad80:	add	fp, sp, #0
   1ad84:	sub	sp, sp, #12
   1ad88:	str	r0, [fp, #-8]
   1ad8c:	str	r1, [fp, #-12]
   1ad90:	ldr	r3, [fp, #-8]
   1ad94:	ldr	r2, [fp, #-12]
   1ad98:	str	r2, [r3, #172]	; 0xac
   1ad9c:	nop			; (mov r0, r0)
   1ada0:	add	sp, fp, #0
   1ada4:	pop	{fp}		; (ldr fp, [sp], #4)
   1ada8:	bx	lr

0001adac <flatcc_builder_set_identifier@@Base>:
   1adac:	push	{fp}		; (str fp, [sp, #-4]!)
   1adb0:	add	fp, sp, #0
   1adb4:	sub	sp, sp, #12
   1adb8:	str	r0, [fp, #-8]
   1adbc:	str	r1, [fp, #-12]
   1adc0:	ldr	r1, [pc, #60]	; 1ae04 <flatcc_builder_set_identifier@@Base+0x58>
   1adc4:	add	r1, pc, r1
   1adc8:	ldr	r3, [fp, #-8]
   1adcc:	add	r2, r3, #168	; 0xa8
   1add0:	ldr	r3, [fp, #-12]
   1add4:	cmp	r3, #0
   1add8:	beq	1ade4 <flatcc_builder_set_identifier@@Base+0x38>
   1addc:	ldr	r3, [fp, #-12]
   1ade0:	b	1adec <flatcc_builder_set_identifier@@Base+0x40>
   1ade4:	ldr	r3, [pc, #28]	; 1ae08 <flatcc_builder_set_identifier@@Base+0x5c>
   1ade8:	ldr	r3, [r1, r3]
   1adec:	ldr	r3, [r3]
   1adf0:	str	r3, [r2]
   1adf4:	nop			; (mov r0, r0)
   1adf8:	add	sp, fp, #0
   1adfc:	pop	{fp}		; (ldr fp, [sp], #4)
   1ae00:	bx	lr
   1ae04:	andeq	r3, r1, r4, lsr r2
   1ae08:	andeq	r0, r0, ip, asr #32

0001ae0c <flatcc_builder_get_type@@Base>:
   1ae0c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ae10:	add	fp, sp, #0
   1ae14:	sub	sp, sp, #12
   1ae18:	str	r0, [fp, #-8]
   1ae1c:	ldr	r3, [fp, #-8]
   1ae20:	ldr	r3, [r3, #32]
   1ae24:	cmp	r3, #0
   1ae28:	beq	1ae3c <flatcc_builder_get_type@@Base+0x30>
   1ae2c:	ldr	r3, [fp, #-8]
   1ae30:	ldr	r3, [r3, #32]
   1ae34:	ldrh	r3, [r3, #14]
   1ae38:	b	1ae40 <flatcc_builder_get_type@@Base+0x34>
   1ae3c:	mov	r3, #0
   1ae40:	mov	r0, r3
   1ae44:	add	sp, fp, #0
   1ae48:	pop	{fp}		; (ldr fp, [sp], #4)
   1ae4c:	bx	lr

0001ae50 <flatcc_builder_get_type_at@@Base>:
   1ae50:	push	{fp}		; (str fp, [sp, #-4]!)
   1ae54:	add	fp, sp, #0
   1ae58:	sub	sp, sp, #12
   1ae5c:	str	r0, [fp, #-8]
   1ae60:	str	r1, [fp, #-12]
   1ae64:	ldr	r3, [fp, #-12]
   1ae68:	cmp	r3, #0
   1ae6c:	ble	1ae84 <flatcc_builder_get_type_at@@Base+0x34>
   1ae70:	ldr	r3, [fp, #-8]
   1ae74:	ldr	r2, [r3, #156]	; 0x9c
   1ae78:	ldr	r3, [fp, #-12]
   1ae7c:	cmp	r2, r3
   1ae80:	bge	1ae8c <flatcc_builder_get_type_at@@Base+0x3c>
   1ae84:	mov	r3, #0
   1ae88:	b	1aec0 <flatcc_builder_get_type_at@@Base+0x70>
   1ae8c:	ldr	r3, [fp, #-8]
   1ae90:	ldr	r2, [r3, #32]
   1ae94:	ldr	r3, [fp, #-8]
   1ae98:	ldr	r3, [r3, #156]	; 0x9c
   1ae9c:	ldr	r1, [fp, #-12]
   1aea0:	sub	r3, r1, r3
   1aea4:	mov	r1, r3
   1aea8:	mov	r3, r1
   1aeac:	lsl	r3, r3, #3
   1aeb0:	add	r3, r3, r1
   1aeb4:	lsl	r3, r3, #2
   1aeb8:	add	r3, r2, r3
   1aebc:	ldrh	r3, [r3, #14]
   1aec0:	mov	r0, r3
   1aec4:	add	sp, fp, #0
   1aec8:	pop	{fp}		; (ldr fp, [sp], #4)
   1aecc:	bx	lr

0001aed0 <flatcc_builder_get_direct_buffer@@Base>:
   1aed0:	push	{fp, lr}
   1aed4:	add	fp, sp, #4
   1aed8:	sub	sp, sp, #8
   1aedc:	str	r0, [fp, #-8]
   1aee0:	str	r1, [fp, #-12]
   1aee4:	ldr	r3, [fp, #-8]
   1aee8:	ldr	r3, [r3, #184]	; 0xb8
   1aeec:	cmp	r3, #0
   1aef0:	beq	1af10 <flatcc_builder_get_direct_buffer@@Base+0x40>
   1aef4:	ldr	r3, [fp, #-8]
   1aef8:	add	r3, r3, #188	; 0xbc
   1aefc:	ldr	r1, [fp, #-12]
   1af00:	mov	r0, r3
   1af04:	bl	1513c <main@@Base+0x2a8>
   1af08:	mov	r3, r0
   1af0c:	b	1af2c <flatcc_builder_get_direct_buffer@@Base+0x5c>
   1af10:	ldr	r3, [fp, #-12]
   1af14:	cmp	r3, #0
   1af18:	beq	1af28 <flatcc_builder_get_direct_buffer@@Base+0x58>
   1af1c:	ldr	r3, [fp, #-12]
   1af20:	mov	r2, #0
   1af24:	str	r2, [r3]
   1af28:	mov	r3, #0
   1af2c:	mov	r0, r3
   1af30:	sub	sp, fp, #4
   1af34:	pop	{fp, pc}

0001af38 <flatcc_builder_copy_buffer@@Base>:
   1af38:	push	{fp, lr}
   1af3c:	add	fp, sp, #4
   1af40:	sub	sp, sp, #16
   1af44:	str	r0, [fp, #-8]
   1af48:	str	r1, [fp, #-12]
   1af4c:	str	r2, [fp, #-16]
   1af50:	ldr	r3, [fp, #-8]
   1af54:	ldr	r3, [r3, #184]	; 0xb8
   1af58:	cmp	r3, #0
   1af5c:	bne	1af68 <flatcc_builder_copy_buffer@@Base+0x30>
   1af60:	mov	r3, #0
   1af64:	b	1afb4 <flatcc_builder_copy_buffer@@Base+0x7c>
   1af68:	ldr	r3, [fp, #-8]
   1af6c:	add	r3, r3, #188	; 0xbc
   1af70:	ldr	r2, [fp, #-16]
   1af74:	ldr	r1, [fp, #-12]
   1af78:	mov	r0, r3
   1af7c:	bl	1bd00 <flatcc_emitter_copy_buffer@@Base>
   1af80:	str	r0, [fp, #-12]
   1af84:	ldr	r3, [fp, #-12]
   1af88:	cmp	r3, #0
   1af8c:	bne	1afb0 <flatcc_builder_copy_buffer@@Base+0x78>
   1af90:	ldr	r3, [pc, #40]	; 1afc0 <flatcc_builder_copy_buffer@@Base+0x88>
   1af94:	add	r3, pc, r3
   1af98:	ldr	r2, [pc, #36]	; 1afc4 <flatcc_builder_copy_buffer@@Base+0x8c>
   1af9c:	ldr	r1, [pc, #36]	; 1afc8 <flatcc_builder_copy_buffer@@Base+0x90>
   1afa0:	add	r1, pc, r1
   1afa4:	ldr	r0, [pc, #32]	; 1afcc <flatcc_builder_copy_buffer@@Base+0x94>
   1afa8:	add	r0, pc, r0
   1afac:	bl	1202c <__assert_fail@plt>
   1afb0:	ldr	r3, [fp, #-12]
   1afb4:	mov	r0, r3
   1afb8:	sub	sp, fp, #4
   1afbc:	pop	{fp, pc}
   1afc0:	andeq	r2, r0, r4, lsr r0
   1afc4:	andeq	r0, r0, r6, lsl #15
   1afc8:	andeq	r1, r0, ip, ror #13
   1afcc:	andeq	r1, r0, r4, lsl #22

0001afd0 <flatcc_builder_finalize_buffer@@Base>:
   1afd0:	push	{fp, lr}
   1afd4:	add	fp, sp, #4
   1afd8:	sub	sp, sp, #16
   1afdc:	str	r0, [fp, #-16]
   1afe0:	str	r1, [fp, #-20]	; 0xffffffec
   1afe4:	ldr	r0, [fp, #-16]
   1afe8:	bl	1acf8 <flatcc_builder_get_buffer_size@@Base>
   1afec:	str	r0, [fp, #-8]
   1aff0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aff4:	cmp	r3, #0
   1aff8:	beq	1b008 <flatcc_builder_finalize_buffer@@Base+0x38>
   1affc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b000:	ldr	r2, [fp, #-8]
   1b004:	str	r2, [r3]
   1b008:	ldr	r0, [fp, #-8]
   1b00c:	bl	11fc0 <malloc@plt>
   1b010:	mov	r3, r0
   1b014:	str	r3, [fp, #-12]
   1b018:	ldr	r3, [fp, #-12]
   1b01c:	cmp	r3, #0
   1b020:	bne	1b044 <flatcc_builder_finalize_buffer@@Base+0x74>
   1b024:	ldr	r3, [pc, #136]	; 1b0b4 <flatcc_builder_finalize_buffer@@Base+0xe4>
   1b028:	add	r3, pc, r3
   1b02c:	ldr	r2, [pc, #132]	; 1b0b8 <flatcc_builder_finalize_buffer@@Base+0xe8>
   1b030:	ldr	r1, [pc, #132]	; 1b0bc <flatcc_builder_finalize_buffer@@Base+0xec>
   1b034:	add	r1, pc, r1
   1b038:	ldr	r0, [pc, #128]	; 1b0c0 <flatcc_builder_finalize_buffer@@Base+0xf0>
   1b03c:	add	r0, pc, r0
   1b040:	bl	1202c <__assert_fail@plt>
   1b044:	ldr	r2, [fp, #-8]
   1b048:	ldr	r1, [fp, #-12]
   1b04c:	ldr	r0, [fp, #-16]
   1b050:	bl	1af38 <flatcc_builder_copy_buffer@@Base>
   1b054:	mov	r3, r0
   1b058:	cmp	r3, #0
   1b05c:	bne	1b080 <flatcc_builder_finalize_buffer@@Base+0xb0>
   1b060:	ldr	r3, [pc, #92]	; 1b0c4 <flatcc_builder_finalize_buffer@@Base+0xf4>
   1b064:	add	r3, pc, r3
   1b068:	ldr	r2, [pc, #88]	; 1b0c8 <flatcc_builder_finalize_buffer@@Base+0xf8>
   1b06c:	ldr	r1, [pc, #88]	; 1b0cc <flatcc_builder_finalize_buffer@@Base+0xfc>
   1b070:	add	r1, pc, r1
   1b074:	ldr	r0, [pc, #84]	; 1b0d0 <flatcc_builder_finalize_buffer@@Base+0x100>
   1b078:	add	r0, pc, r0
   1b07c:	bl	1202c <__assert_fail@plt>
   1b080:	ldr	r3, [fp, #-12]
   1b084:	cmp	r3, #0
   1b088:	bne	1b0a4 <flatcc_builder_finalize_buffer@@Base+0xd4>
   1b08c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b090:	cmp	r3, #0
   1b094:	beq	1b0a4 <flatcc_builder_finalize_buffer@@Base+0xd4>
   1b098:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b09c:	mov	r2, #0
   1b0a0:	str	r2, [r3]
   1b0a4:	ldr	r3, [fp, #-12]
   1b0a8:	mov	r0, r3
   1b0ac:	sub	sp, fp, #4
   1b0b0:	pop	{fp, pc}
   1b0b4:			; <UNDEFINED> instruction: 0x00001fbc
   1b0b8:	muleq	r0, r8, r7
   1b0bc:	andeq	r1, r0, r8, asr r6
   1b0c0:			; <UNDEFINED> instruction: 0x000016b0
   1b0c4:	andeq	r1, r0, r0, lsl #31
   1b0c8:	muleq	r0, ip, r7
   1b0cc:	andeq	r1, r0, ip, lsl r6
   1b0d0:	andeq	r1, r0, r4, ror r6

0001b0d4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   1b0d4:	push	{fp, lr}
   1b0d8:	add	fp, sp, #4
   1b0dc:	sub	sp, sp, #24
   1b0e0:	str	r0, [fp, #-24]	; 0xffffffe8
   1b0e4:	str	r1, [fp, #-28]	; 0xffffffe4
   1b0e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0ec:	bl	1acf8 <flatcc_builder_get_buffer_size@@Base>
   1b0f0:	str	r0, [fp, #-12]
   1b0f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b0f8:	cmp	r3, #0
   1b0fc:	beq	1b10c <flatcc_builder_finalize_aligned_buffer@@Base+0x38>
   1b100:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b104:	ldr	r2, [fp, #-12]
   1b108:	str	r2, [r3]
   1b10c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b110:	bl	1abd8 <flatcc_builder_get_buffer_alignment@@Base>
   1b114:	mov	r3, r0
   1b118:	str	r3, [fp, #-16]
   1b11c:	ldr	r2, [fp, #-12]
   1b120:	ldr	r3, [fp, #-16]
   1b124:	add	r3, r2, r3
   1b128:	sub	r2, r3, #1
   1b12c:	ldr	r3, [fp, #-16]
   1b130:	rsb	r3, r3, #0
   1b134:	and	r3, r3, r2
   1b138:	str	r3, [fp, #-12]
   1b13c:	ldr	r1, [fp, #-12]
   1b140:	ldr	r0, [fp, #-16]
   1b144:	bl	15048 <main@@Base+0x1b4>
   1b148:	str	r0, [fp, #-8]
   1b14c:	ldr	r3, [fp, #-8]
   1b150:	cmp	r3, #0
   1b154:	beq	1b188 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   1b158:	ldr	r2, [fp, #-12]
   1b15c:	ldr	r1, [fp, #-8]
   1b160:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b164:	bl	1af38 <flatcc_builder_copy_buffer@@Base>
   1b168:	mov	r3, r0
   1b16c:	cmp	r3, #0
   1b170:	bne	1b18c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1b174:	ldr	r0, [fp, #-8]
   1b178:	bl	11f84 <free@plt>
   1b17c:	mov	r3, #0
   1b180:	str	r3, [fp, #-8]
   1b184:	b	1b18c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1b188:	nop			; (mov r0, r0)
   1b18c:	ldr	r3, [fp, #-8]
   1b190:	cmp	r3, #0
   1b194:	bne	1b1b0 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   1b198:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b19c:	cmp	r3, #0
   1b1a0:	beq	1b1b0 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   1b1a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b1a8:	mov	r2, #0
   1b1ac:	str	r2, [r3]
   1b1b0:	ldr	r3, [fp, #-8]
   1b1b4:	mov	r0, r3
   1b1b8:	sub	sp, fp, #4
   1b1bc:	pop	{fp, pc}

0001b1c0 <flatcc_builder_aligned_alloc@@Base>:
   1b1c0:	push	{fp, lr}
   1b1c4:	add	fp, sp, #4
   1b1c8:	sub	sp, sp, #8
   1b1cc:	str	r0, [fp, #-8]
   1b1d0:	str	r1, [fp, #-12]
   1b1d4:	ldr	r1, [fp, #-12]
   1b1d8:	ldr	r0, [fp, #-8]
   1b1dc:	bl	15048 <main@@Base+0x1b4>
   1b1e0:	mov	r3, r0
   1b1e4:	mov	r0, r3
   1b1e8:	sub	sp, fp, #4
   1b1ec:	pop	{fp, pc}

0001b1f0 <flatcc_builder_aligned_free@@Base>:
   1b1f0:	push	{fp, lr}
   1b1f4:	add	fp, sp, #4
   1b1f8:	sub	sp, sp, #8
   1b1fc:	str	r0, [fp, #-8]
   1b200:	ldr	r0, [fp, #-8]
   1b204:	bl	11f84 <free@plt>
   1b208:	nop			; (mov r0, r0)
   1b20c:	sub	sp, fp, #4
   1b210:	pop	{fp, pc}

0001b214 <flatcc_builder_get_emit_context@@Base>:
   1b214:	push	{fp}		; (str fp, [sp, #-4]!)
   1b218:	add	fp, sp, #0
   1b21c:	sub	sp, sp, #12
   1b220:	str	r0, [fp, #-8]
   1b224:	ldr	r3, [fp, #-8]
   1b228:	ldr	r3, [r3, #36]	; 0x24
   1b22c:	mov	r0, r3
   1b230:	add	sp, fp, #0
   1b234:	pop	{fp}		; (ldr fp, [sp], #4)
   1b238:	bx	lr
   1b23c:	push	{fp, lr}
   1b240:	add	fp, sp, #4
   1b244:	sub	sp, sp, #16
   1b248:	str	r0, [fp, #-16]
   1b24c:	mov	r3, #0
   1b250:	str	r3, [fp, #-8]
   1b254:	ldr	r3, [fp, #-16]
   1b258:	ldr	r3, [r3]
   1b25c:	cmp	r3, #0
   1b260:	beq	1b2b8 <flatcc_builder_get_emit_context@@Base+0xa4>
   1b264:	ldr	r3, [fp, #-16]
   1b268:	ldr	r3, [r3]
   1b26c:	ldr	r2, [r3, #2948]	; 0xb84
   1b270:	ldr	r3, [fp, #-16]
   1b274:	ldr	r3, [r3, #4]
   1b278:	cmp	r2, r3
   1b27c:	beq	1b2b8 <flatcc_builder_get_emit_context@@Base+0xa4>
   1b280:	ldr	r3, [fp, #-16]
   1b284:	ldr	r3, [r3]
   1b288:	ldr	r3, [r3, #2948]	; 0xb84
   1b28c:	ldr	r2, [fp, #-16]
   1b290:	ldr	r2, [r2]
   1b294:	ldr	r2, [r2, #2952]	; 0xb88
   1b298:	sub	r2, r2, #2944	; 0xb80
   1b29c:	str	r2, [r3, #2952]	; 0xb88
   1b2a0:	ldr	r3, [fp, #-16]
   1b2a4:	ldr	r3, [r3]
   1b2a8:	ldr	r2, [r3, #2948]	; 0xb84
   1b2ac:	ldr	r3, [fp, #-16]
   1b2b0:	str	r2, [r3]
   1b2b4:	b	1b3e0 <flatcc_builder_get_emit_context@@Base+0x1cc>
   1b2b8:	ldr	r0, [pc, #368]	; 1b430 <flatcc_builder_get_emit_context@@Base+0x21c>
   1b2bc:	bl	11fc0 <malloc@plt>
   1b2c0:	mov	r3, r0
   1b2c4:	str	r3, [fp, #-8]
   1b2c8:	ldr	r3, [fp, #-8]
   1b2cc:	cmp	r3, #0
   1b2d0:	bne	1b2dc <flatcc_builder_get_emit_context@@Base+0xc8>
   1b2d4:	mvn	r3, #0
   1b2d8:	b	1b424 <flatcc_builder_get_emit_context@@Base+0x210>
   1b2dc:	ldr	r3, [fp, #-16]
   1b2e0:	ldr	r3, [r3, #28]
   1b2e4:	add	r2, r3, #2944	; 0xb80
   1b2e8:	ldr	r3, [fp, #-16]
   1b2ec:	str	r2, [r3, #28]
   1b2f0:	ldr	r3, [fp, #-16]
   1b2f4:	ldr	r3, [r3]
   1b2f8:	cmp	r3, #0
   1b2fc:	beq	1b350 <flatcc_builder_get_emit_context@@Base+0x13c>
   1b300:	ldr	r3, [fp, #-16]
   1b304:	ldr	r2, [r3, #4]
   1b308:	ldr	r3, [fp, #-8]
   1b30c:	str	r2, [r3, #2948]	; 0xb84
   1b310:	ldr	r3, [fp, #-16]
   1b314:	ldr	r2, [r3]
   1b318:	ldr	r3, [fp, #-8]
   1b31c:	str	r2, [r3, #2944]	; 0xb80
   1b320:	ldr	r3, [fp, #-16]
   1b324:	ldr	r3, [r3]
   1b328:	ldr	r2, [fp, #-8]
   1b32c:	str	r2, [r3, #2948]	; 0xb84
   1b330:	ldr	r3, [fp, #-16]
   1b334:	ldr	r3, [r3, #4]
   1b338:	ldr	r2, [fp, #-8]
   1b33c:	str	r2, [r3, #2944]	; 0xb80
   1b340:	ldr	r3, [fp, #-16]
   1b344:	ldr	r2, [fp, #-8]
   1b348:	str	r2, [r3]
   1b34c:	b	1b3e0 <flatcc_builder_get_emit_context@@Base+0x1cc>
   1b350:	ldr	r3, [fp, #-16]
   1b354:	ldr	r2, [fp, #-8]
   1b358:	str	r2, [r3]
   1b35c:	ldr	r3, [fp, #-16]
   1b360:	ldr	r2, [fp, #-8]
   1b364:	str	r2, [r3, #4]
   1b368:	ldr	r3, [fp, #-8]
   1b36c:	ldr	r2, [fp, #-8]
   1b370:	str	r2, [r3, #2944]	; 0xb80
   1b374:	ldr	r3, [fp, #-8]
   1b378:	ldr	r2, [fp, #-8]
   1b37c:	str	r2, [r3, #2948]	; 0xb84
   1b380:	ldr	r3, [fp, #-16]
   1b384:	ldr	r3, [r3]
   1b388:	add	r2, r3, #1472	; 0x5c0
   1b38c:	ldr	r3, [fp, #-16]
   1b390:	str	r2, [r3, #8]
   1b394:	ldr	r3, [fp, #-16]
   1b398:	ldr	r2, [r3, #8]
   1b39c:	ldr	r3, [fp, #-16]
   1b3a0:	str	r2, [r3, #16]
   1b3a4:	ldr	r3, [fp, #-16]
   1b3a8:	mov	r2, #1472	; 0x5c0
   1b3ac:	str	r2, [r3, #12]
   1b3b0:	ldr	r3, [fp, #-16]
   1b3b4:	ldr	r3, [r3, #12]
   1b3b8:	rsb	r2, r3, #2944	; 0xb80
   1b3bc:	ldr	r3, [fp, #-16]
   1b3c0:	str	r2, [r3, #20]
   1b3c4:	ldr	r3, [fp, #-16]
   1b3c8:	ldr	r3, [r3, #12]
   1b3cc:	rsb	r2, r3, #0
   1b3d0:	ldr	r3, [fp, #-8]
   1b3d4:	str	r2, [r3, #2952]	; 0xb88
   1b3d8:	mov	r3, #0
   1b3dc:	b	1b424 <flatcc_builder_get_emit_context@@Base+0x210>
   1b3e0:	ldr	r3, [fp, #-16]
   1b3e4:	ldr	r3, [r3]
   1b3e8:	add	r2, r3, #2944	; 0xb80
   1b3ec:	ldr	r3, [fp, #-16]
   1b3f0:	str	r2, [r3, #8]
   1b3f4:	ldr	r3, [fp, #-16]
   1b3f8:	mov	r2, #2944	; 0xb80
   1b3fc:	str	r2, [r3, #12]
   1b400:	ldr	r3, [fp, #-16]
   1b404:	ldr	r3, [r3]
   1b408:	ldr	r2, [fp, #-16]
   1b40c:	ldr	r2, [r2]
   1b410:	ldr	r2, [r2, #2944]	; 0xb80
   1b414:	ldr	r2, [r2, #2952]	; 0xb88
   1b418:	sub	r2, r2, #2944	; 0xb80
   1b41c:	str	r2, [r3, #2952]	; 0xb88
   1b420:	mov	r3, #0
   1b424:	mov	r0, r3
   1b428:	sub	sp, fp, #4
   1b42c:	pop	{fp, pc}
   1b430:	andeq	r0, r0, ip, lsl #23
   1b434:	push	{fp, lr}
   1b438:	add	fp, sp, #4
   1b43c:	sub	sp, sp, #16
   1b440:	str	r0, [fp, #-16]
   1b444:	mov	r3, #0
   1b448:	str	r3, [fp, #-8]
   1b44c:	ldr	r3, [fp, #-16]
   1b450:	ldr	r3, [r3, #4]
   1b454:	cmp	r3, #0
   1b458:	beq	1b490 <flatcc_builder_get_emit_context@@Base+0x27c>
   1b45c:	ldr	r3, [fp, #-16]
   1b460:	ldr	r3, [r3, #4]
   1b464:	ldr	r2, [r3, #2944]	; 0xb80
   1b468:	ldr	r3, [fp, #-16]
   1b46c:	ldr	r3, [r3]
   1b470:	cmp	r2, r3
   1b474:	beq	1b490 <flatcc_builder_get_emit_context@@Base+0x27c>
   1b478:	ldr	r3, [fp, #-16]
   1b47c:	ldr	r3, [r3, #4]
   1b480:	ldr	r2, [r3, #2944]	; 0xb80
   1b484:	ldr	r3, [fp, #-16]
   1b488:	str	r2, [r3, #4]
   1b48c:	b	1b5b8 <flatcc_builder_get_emit_context@@Base+0x3a4>
   1b490:	ldr	r0, [pc, #368]	; 1b608 <flatcc_builder_get_emit_context@@Base+0x3f4>
   1b494:	bl	11fc0 <malloc@plt>
   1b498:	mov	r3, r0
   1b49c:	str	r3, [fp, #-8]
   1b4a0:	ldr	r3, [fp, #-8]
   1b4a4:	cmp	r3, #0
   1b4a8:	bne	1b4b4 <flatcc_builder_get_emit_context@@Base+0x2a0>
   1b4ac:	mvn	r3, #0
   1b4b0:	b	1b5fc <flatcc_builder_get_emit_context@@Base+0x3e8>
   1b4b4:	ldr	r3, [fp, #-16]
   1b4b8:	ldr	r3, [r3, #28]
   1b4bc:	add	r2, r3, #2944	; 0xb80
   1b4c0:	ldr	r3, [fp, #-16]
   1b4c4:	str	r2, [r3, #28]
   1b4c8:	ldr	r3, [fp, #-16]
   1b4cc:	ldr	r3, [r3, #4]
   1b4d0:	cmp	r3, #0
   1b4d4:	beq	1b528 <flatcc_builder_get_emit_context@@Base+0x314>
   1b4d8:	ldr	r3, [fp, #-16]
   1b4dc:	ldr	r2, [r3, #4]
   1b4e0:	ldr	r3, [fp, #-8]
   1b4e4:	str	r2, [r3, #2948]	; 0xb84
   1b4e8:	ldr	r3, [fp, #-16]
   1b4ec:	ldr	r2, [r3]
   1b4f0:	ldr	r3, [fp, #-8]
   1b4f4:	str	r2, [r3, #2944]	; 0xb80
   1b4f8:	ldr	r3, [fp, #-16]
   1b4fc:	ldr	r3, [r3]
   1b500:	ldr	r2, [fp, #-8]
   1b504:	str	r2, [r3, #2948]	; 0xb84
   1b508:	ldr	r3, [fp, #-16]
   1b50c:	ldr	r3, [r3, #4]
   1b510:	ldr	r2, [fp, #-8]
   1b514:	str	r2, [r3, #2944]	; 0xb80
   1b518:	ldr	r3, [fp, #-16]
   1b51c:	ldr	r2, [fp, #-8]
   1b520:	str	r2, [r3, #4]
   1b524:	b	1b5b8 <flatcc_builder_get_emit_context@@Base+0x3a4>
   1b528:	ldr	r3, [fp, #-16]
   1b52c:	ldr	r2, [fp, #-8]
   1b530:	str	r2, [r3]
   1b534:	ldr	r3, [fp, #-16]
   1b538:	ldr	r2, [fp, #-8]
   1b53c:	str	r2, [r3, #4]
   1b540:	ldr	r3, [fp, #-8]
   1b544:	ldr	r2, [fp, #-8]
   1b548:	str	r2, [r3, #2944]	; 0xb80
   1b54c:	ldr	r3, [fp, #-8]
   1b550:	ldr	r2, [fp, #-8]
   1b554:	str	r2, [r3, #2948]	; 0xb84
   1b558:	ldr	r3, [fp, #-16]
   1b55c:	ldr	r3, [r3]
   1b560:	add	r2, r3, #1472	; 0x5c0
   1b564:	ldr	r3, [fp, #-16]
   1b568:	str	r2, [r3, #8]
   1b56c:	ldr	r3, [fp, #-16]
   1b570:	ldr	r2, [r3, #8]
   1b574:	ldr	r3, [fp, #-16]
   1b578:	str	r2, [r3, #16]
   1b57c:	ldr	r3, [fp, #-16]
   1b580:	mov	r2, #1472	; 0x5c0
   1b584:	str	r2, [r3, #12]
   1b588:	ldr	r3, [fp, #-16]
   1b58c:	ldr	r3, [r3, #12]
   1b590:	rsb	r2, r3, #2944	; 0xb80
   1b594:	ldr	r3, [fp, #-16]
   1b598:	str	r2, [r3, #20]
   1b59c:	ldr	r3, [fp, #-16]
   1b5a0:	ldr	r3, [r3, #12]
   1b5a4:	rsb	r2, r3, #0
   1b5a8:	ldr	r3, [fp, #-8]
   1b5ac:	str	r2, [r3, #2952]	; 0xb88
   1b5b0:	mov	r3, #0
   1b5b4:	b	1b5fc <flatcc_builder_get_emit_context@@Base+0x3e8>
   1b5b8:	ldr	r3, [fp, #-16]
   1b5bc:	ldr	r3, [r3, #4]
   1b5c0:	mov	r2, r3
   1b5c4:	ldr	r3, [fp, #-16]
   1b5c8:	str	r2, [r3, #16]
   1b5cc:	ldr	r3, [fp, #-16]
   1b5d0:	mov	r2, #2944	; 0xb80
   1b5d4:	str	r2, [r3, #20]
   1b5d8:	ldr	r3, [fp, #-16]
   1b5dc:	ldr	r3, [r3, #4]
   1b5e0:	ldr	r2, [fp, #-16]
   1b5e4:	ldr	r2, [r2, #4]
   1b5e8:	ldr	r2, [r2, #2948]	; 0xb84
   1b5ec:	ldr	r2, [r2, #2952]	; 0xb88
   1b5f0:	add	r2, r2, #2944	; 0xb80
   1b5f4:	str	r2, [r3, #2952]	; 0xb88
   1b5f8:	mov	r3, #0
   1b5fc:	mov	r0, r3
   1b600:	sub	sp, fp, #4
   1b604:	pop	{fp, pc}
   1b608:	andeq	r0, r0, ip, lsl #23
   1b60c:	push	{fp, lr}
   1b610:	add	fp, sp, #4
   1b614:	sub	sp, sp, #24
   1b618:	str	r0, [fp, #-16]
   1b61c:	str	r1, [fp, #-20]	; 0xffffffec
   1b620:	str	r2, [fp, #-24]	; 0xffffffe8
   1b624:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b62c:	add	r3, r2, r3
   1b630:	str	r3, [fp, #-20]	; 0xffffffec
   1b634:	b	1b6f8 <flatcc_builder_get_emit_context@@Base+0x4e4>
   1b638:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b63c:	str	r3, [fp, #-8]
   1b640:	ldr	r3, [fp, #-16]
   1b644:	ldr	r2, [r3, #12]
   1b648:	ldr	r3, [fp, #-8]
   1b64c:	cmp	r2, r3
   1b650:	bcs	1b688 <flatcc_builder_get_emit_context@@Base+0x474>
   1b654:	ldr	r3, [fp, #-16]
   1b658:	ldr	r3, [r3, #12]
   1b65c:	str	r3, [fp, #-8]
   1b660:	ldr	r3, [fp, #-8]
   1b664:	cmp	r3, #0
   1b668:	bne	1b688 <flatcc_builder_get_emit_context@@Base+0x474>
   1b66c:	ldr	r0, [fp, #-16]
   1b670:	bl	1b23c <flatcc_builder_get_emit_context@@Base+0x28>
   1b674:	mov	r3, r0
   1b678:	cmp	r3, #0
   1b67c:	beq	1b6f8 <flatcc_builder_get_emit_context@@Base+0x4e4>
   1b680:	mvn	r3, #0
   1b684:	b	1b708 <flatcc_builder_get_emit_context@@Base+0x4f4>
   1b688:	ldr	r3, [fp, #-16]
   1b68c:	ldr	r2, [r3, #8]
   1b690:	ldr	r3, [fp, #-8]
   1b694:	rsb	r3, r3, #0
   1b698:	add	r2, r2, r3
   1b69c:	ldr	r3, [fp, #-16]
   1b6a0:	str	r2, [r3, #8]
   1b6a4:	ldr	r3, [fp, #-16]
   1b6a8:	ldr	r2, [r3, #12]
   1b6ac:	ldr	r3, [fp, #-8]
   1b6b0:	sub	r2, r2, r3
   1b6b4:	ldr	r3, [fp, #-16]
   1b6b8:	str	r2, [r3, #12]
   1b6bc:	ldr	r3, [fp, #-8]
   1b6c0:	rsb	r3, r3, #0
   1b6c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b6c8:	add	r3, r2, r3
   1b6cc:	str	r3, [fp, #-20]	; 0xffffffec
   1b6d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b6d4:	ldr	r3, [fp, #-8]
   1b6d8:	sub	r3, r2, r3
   1b6dc:	str	r3, [fp, #-24]	; 0xffffffe8
   1b6e0:	ldr	r3, [fp, #-16]
   1b6e4:	ldr	r3, [r3, #8]
   1b6e8:	ldr	r2, [fp, #-8]
   1b6ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b6f0:	mov	r0, r3
   1b6f4:	bl	11f90 <memcpy@plt>
   1b6f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b6fc:	cmp	r3, #0
   1b700:	bne	1b638 <flatcc_builder_get_emit_context@@Base+0x424>
   1b704:	mov	r3, #0
   1b708:	mov	r0, r3
   1b70c:	sub	sp, fp, #4
   1b710:	pop	{fp, pc}
   1b714:	push	{fp, lr}
   1b718:	add	fp, sp, #4
   1b71c:	sub	sp, sp, #24
   1b720:	str	r0, [fp, #-16]
   1b724:	str	r1, [fp, #-20]	; 0xffffffec
   1b728:	str	r2, [fp, #-24]	; 0xffffffe8
   1b72c:	b	1b7e8 <flatcc_builder_get_emit_context@@Base+0x5d4>
   1b730:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b734:	str	r3, [fp, #-8]
   1b738:	ldr	r3, [fp, #-16]
   1b73c:	ldr	r2, [r3, #20]
   1b740:	ldr	r3, [fp, #-8]
   1b744:	cmp	r2, r3
   1b748:	bcs	1b780 <flatcc_builder_get_emit_context@@Base+0x56c>
   1b74c:	ldr	r3, [fp, #-16]
   1b750:	ldr	r3, [r3, #20]
   1b754:	str	r3, [fp, #-8]
   1b758:	ldr	r3, [fp, #-8]
   1b75c:	cmp	r3, #0
   1b760:	bne	1b780 <flatcc_builder_get_emit_context@@Base+0x56c>
   1b764:	ldr	r0, [fp, #-16]
   1b768:	bl	1b434 <flatcc_builder_get_emit_context@@Base+0x220>
   1b76c:	mov	r3, r0
   1b770:	cmp	r3, #0
   1b774:	beq	1b7e8 <flatcc_builder_get_emit_context@@Base+0x5d4>
   1b778:	mvn	r3, #0
   1b77c:	b	1b7f8 <flatcc_builder_get_emit_context@@Base+0x5e4>
   1b780:	ldr	r3, [fp, #-16]
   1b784:	ldr	r3, [r3, #16]
   1b788:	ldr	r2, [fp, #-8]
   1b78c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b790:	mov	r0, r3
   1b794:	bl	11f90 <memcpy@plt>
   1b798:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b79c:	ldr	r3, [fp, #-8]
   1b7a0:	sub	r3, r2, r3
   1b7a4:	str	r3, [fp, #-24]	; 0xffffffe8
   1b7a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b7ac:	ldr	r3, [fp, #-8]
   1b7b0:	add	r3, r2, r3
   1b7b4:	str	r3, [fp, #-20]	; 0xffffffec
   1b7b8:	ldr	r3, [fp, #-16]
   1b7bc:	ldr	r2, [r3, #16]
   1b7c0:	ldr	r3, [fp, #-8]
   1b7c4:	add	r2, r2, r3
   1b7c8:	ldr	r3, [fp, #-16]
   1b7cc:	str	r2, [r3, #16]
   1b7d0:	ldr	r3, [fp, #-16]
   1b7d4:	ldr	r2, [r3, #20]
   1b7d8:	ldr	r3, [fp, #-8]
   1b7dc:	sub	r2, r2, r3
   1b7e0:	ldr	r3, [fp, #-16]
   1b7e4:	str	r2, [r3, #20]
   1b7e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b7ec:	cmp	r3, #0
   1b7f0:	bne	1b730 <flatcc_builder_get_emit_context@@Base+0x51c>
   1b7f4:	mov	r3, #0
   1b7f8:	mov	r0, r3
   1b7fc:	sub	sp, fp, #4
   1b800:	pop	{fp, pc}

0001b804 <flatcc_emitter_recycle_page@@Base>:
   1b804:	push	{fp}		; (str fp, [sp, #-4]!)
   1b808:	add	fp, sp, #0
   1b80c:	sub	sp, sp, #12
   1b810:	str	r0, [fp, #-8]
   1b814:	str	r1, [fp, #-12]
   1b818:	ldr	r3, [fp, #-8]
   1b81c:	ldr	r2, [r3]
   1b820:	ldr	r3, [fp, #-12]
   1b824:	cmp	r2, r3
   1b828:	beq	1b840 <flatcc_emitter_recycle_page@@Base+0x3c>
   1b82c:	ldr	r3, [fp, #-8]
   1b830:	ldr	r2, [r3, #4]
   1b834:	ldr	r3, [fp, #-12]
   1b838:	cmp	r2, r3
   1b83c:	bne	1b848 <flatcc_emitter_recycle_page@@Base+0x44>
   1b840:	mvn	r3, #0
   1b844:	b	1b8b8 <flatcc_emitter_recycle_page@@Base+0xb4>
   1b848:	ldr	r3, [fp, #-12]
   1b84c:	ldr	r3, [r3, #2944]	; 0xb80
   1b850:	ldr	r2, [fp, #-12]
   1b854:	ldr	r2, [r2, #2948]	; 0xb84
   1b858:	str	r2, [r3, #2948]	; 0xb84
   1b85c:	ldr	r3, [fp, #-12]
   1b860:	ldr	r3, [r3, #2948]	; 0xb84
   1b864:	ldr	r2, [fp, #-12]
   1b868:	ldr	r2, [r2, #2944]	; 0xb80
   1b86c:	str	r2, [r3, #2944]	; 0xb80
   1b870:	ldr	r3, [fp, #-8]
   1b874:	ldr	r3, [r3]
   1b878:	ldr	r2, [r3, #2948]	; 0xb84
   1b87c:	ldr	r3, [fp, #-12]
   1b880:	str	r2, [r3, #2948]	; 0xb84
   1b884:	ldr	r3, [fp, #-8]
   1b888:	ldr	r2, [r3]
   1b88c:	ldr	r3, [fp, #-12]
   1b890:	str	r2, [r3, #2944]	; 0xb80
   1b894:	ldr	r3, [fp, #-12]
   1b898:	ldr	r3, [r3, #2948]	; 0xb84
   1b89c:	ldr	r2, [fp, #-12]
   1b8a0:	str	r2, [r3, #2944]	; 0xb80
   1b8a4:	ldr	r3, [fp, #-12]
   1b8a8:	ldr	r3, [r3, #2944]	; 0xb80
   1b8ac:	ldr	r2, [fp, #-12]
   1b8b0:	str	r2, [r3, #2948]	; 0xb84
   1b8b4:	mov	r3, #0
   1b8b8:	mov	r0, r3
   1b8bc:	add	sp, fp, #0
   1b8c0:	pop	{fp}		; (ldr fp, [sp], #4)
   1b8c4:	bx	lr

0001b8c8 <flatcc_emitter_reset@@Base>:
   1b8c8:	push	{fp, lr}
   1b8cc:	add	fp, sp, #4
   1b8d0:	sub	sp, sp, #16
   1b8d4:	str	r0, [fp, #-16]
   1b8d8:	ldr	r3, [fp, #-16]
   1b8dc:	ldr	r3, [r3]
   1b8e0:	str	r3, [fp, #-8]
   1b8e4:	ldr	r3, [fp, #-16]
   1b8e8:	ldr	r3, [r3]
   1b8ec:	cmp	r3, #0
   1b8f0:	beq	1ba48 <flatcc_emitter_reset@@Base+0x180>
   1b8f4:	ldr	r3, [fp, #-16]
   1b8f8:	ldr	r2, [r3]
   1b8fc:	ldr	r3, [fp, #-16]
   1b900:	str	r2, [r3, #4]
   1b904:	ldr	r3, [fp, #-16]
   1b908:	ldr	r3, [r3]
   1b90c:	add	r2, r3, #1472	; 0x5c0
   1b910:	ldr	r3, [fp, #-16]
   1b914:	str	r2, [r3, #8]
   1b918:	ldr	r3, [fp, #-16]
   1b91c:	ldr	r2, [r3, #8]
   1b920:	ldr	r3, [fp, #-16]
   1b924:	str	r2, [r3, #16]
   1b928:	ldr	r3, [fp, #-16]
   1b92c:	mov	r2, #1472	; 0x5c0
   1b930:	str	r2, [r3, #12]
   1b934:	ldr	r3, [fp, #-16]
   1b938:	mov	r2, #1472	; 0x5c0
   1b93c:	str	r2, [r3, #20]
   1b940:	ldr	r3, [fp, #-16]
   1b944:	ldr	r3, [r3]
   1b948:	ldr	r2, [fp, #-16]
   1b94c:	ldr	r2, [r2, #12]
   1b950:	rsb	r2, r2, #0
   1b954:	str	r2, [r3, #2952]	; 0xb88
   1b958:	ldr	r3, [fp, #-16]
   1b95c:	ldr	r3, [r3, #32]
   1b960:	cmp	r3, #0
   1b964:	bne	1b978 <flatcc_emitter_reset@@Base+0xb0>
   1b968:	ldr	r3, [fp, #-16]
   1b96c:	ldr	r2, [r3, #24]
   1b970:	ldr	r3, [fp, #-16]
   1b974:	str	r2, [r3, #32]
   1b978:	ldr	r3, [fp, #-16]
   1b97c:	ldr	r2, [r3, #32]
   1b980:	mov	r3, r2
   1b984:	lsl	r3, r3, #1
   1b988:	add	r3, r3, r2
   1b98c:	lsr	r2, r3, #2
   1b990:	ldr	r3, [fp, #-16]
   1b994:	ldr	r3, [r3, #24]
   1b998:	lsr	r3, r3, #2
   1b99c:	add	r2, r2, r3
   1b9a0:	ldr	r3, [fp, #-16]
   1b9a4:	str	r2, [r3, #32]
   1b9a8:	ldr	r3, [fp, #-16]
   1b9ac:	mov	r2, #0
   1b9b0:	str	r2, [r3, #24]
   1b9b4:	b	1ba0c <flatcc_emitter_reset@@Base+0x144>
   1b9b8:	ldr	r3, [fp, #-16]
   1b9bc:	ldr	r3, [r3, #4]
   1b9c0:	ldr	r3, [r3, #2944]	; 0xb80
   1b9c4:	str	r3, [fp, #-8]
   1b9c8:	ldr	r3, [fp, #-16]
   1b9cc:	ldr	r3, [r3, #4]
   1b9d0:	ldr	r2, [fp, #-8]
   1b9d4:	ldr	r2, [r2, #2944]	; 0xb80
   1b9d8:	str	r2, [r3, #2944]	; 0xb80
   1b9dc:	ldr	r3, [fp, #-8]
   1b9e0:	ldr	r3, [r3, #2944]	; 0xb80
   1b9e4:	ldr	r2, [fp, #-16]
   1b9e8:	ldr	r2, [r2, #4]
   1b9ec:	str	r2, [r3, #2948]	; 0xb84
   1b9f0:	ldr	r0, [fp, #-8]
   1b9f4:	bl	11f84 <free@plt>
   1b9f8:	ldr	r3, [fp, #-16]
   1b9fc:	ldr	r3, [r3, #28]
   1ba00:	sub	r2, r3, #2944	; 0xb80
   1ba04:	ldr	r3, [fp, #-16]
   1ba08:	str	r2, [r3, #28]
   1ba0c:	ldr	r3, [fp, #-16]
   1ba10:	ldr	r3, [r3, #32]
   1ba14:	lsl	r2, r3, #1
   1ba18:	ldr	r3, [fp, #-16]
   1ba1c:	ldr	r3, [r3, #28]
   1ba20:	cmp	r2, r3
   1ba24:	bcs	1ba4c <flatcc_emitter_reset@@Base+0x184>
   1ba28:	ldr	r3, [fp, #-16]
   1ba2c:	ldr	r3, [r3, #4]
   1ba30:	ldr	r2, [r3, #2944]	; 0xb80
   1ba34:	ldr	r3, [fp, #-16]
   1ba38:	ldr	r3, [r3]
   1ba3c:	cmp	r2, r3
   1ba40:	bne	1b9b8 <flatcc_emitter_reset@@Base+0xf0>
   1ba44:	b	1ba4c <flatcc_emitter_reset@@Base+0x184>
   1ba48:	nop			; (mov r0, r0)
   1ba4c:	sub	sp, fp, #4
   1ba50:	pop	{fp, pc}

0001ba54 <flatcc_emitter_clear@@Base>:
   1ba54:	push	{fp, lr}
   1ba58:	add	fp, sp, #4
   1ba5c:	sub	sp, sp, #16
   1ba60:	str	r0, [fp, #-16]
   1ba64:	ldr	r3, [fp, #-16]
   1ba68:	ldr	r3, [r3]
   1ba6c:	str	r3, [fp, #-8]
   1ba70:	ldr	r3, [fp, #-8]
   1ba74:	cmp	r3, #0
   1ba78:	beq	1bad8 <flatcc_emitter_clear@@Base+0x84>
   1ba7c:	ldr	r3, [fp, #-8]
   1ba80:	ldr	r3, [r3, #2948]	; 0xb84
   1ba84:	mov	r2, #0
   1ba88:	str	r2, [r3, #2944]	; 0xb80
   1ba8c:	b	1baac <flatcc_emitter_clear@@Base+0x58>
   1ba90:	ldr	r3, [fp, #-8]
   1ba94:	ldr	r3, [r3, #2944]	; 0xb80
   1ba98:	str	r3, [fp, #-8]
   1ba9c:	ldr	r3, [fp, #-8]
   1baa0:	ldr	r3, [r3, #2948]	; 0xb84
   1baa4:	mov	r0, r3
   1baa8:	bl	11f84 <free@plt>
   1baac:	ldr	r3, [fp, #-8]
   1bab0:	ldr	r3, [r3, #2944]	; 0xb80
   1bab4:	cmp	r3, #0
   1bab8:	bne	1ba90 <flatcc_emitter_clear@@Base+0x3c>
   1babc:	ldr	r0, [fp, #-8]
   1bac0:	bl	11f84 <free@plt>
   1bac4:	mov	r2, #36	; 0x24
   1bac8:	mov	r1, #0
   1bacc:	ldr	r0, [fp, #-16]
   1bad0:	bl	11ffc <memset@plt>
   1bad4:	b	1badc <flatcc_emitter_clear@@Base+0x88>
   1bad8:	nop			; (mov r0, r0)
   1badc:	sub	sp, fp, #4
   1bae0:	pop	{fp, pc}

0001bae4 <flatcc_emitter@@Base>:
   1bae4:	push	{fp, lr}
   1bae8:	add	fp, sp, #4
   1baec:	sub	sp, sp, #24
   1baf0:	str	r0, [fp, #-16]
   1baf4:	str	r1, [fp, #-20]	; 0xffffffec
   1baf8:	str	r2, [fp, #-24]	; 0xffffffe8
   1bafc:	str	r3, [fp, #-28]	; 0xffffffe4
   1bb00:	ldr	r3, [fp, #-16]
   1bb04:	str	r3, [fp, #-12]
   1bb08:	ldr	r3, [fp, #-12]
   1bb0c:	ldr	r2, [r3, #24]
   1bb10:	ldr	r3, [fp, #4]
   1bb14:	add	r2, r2, r3
   1bb18:	ldr	r3, [fp, #-12]
   1bb1c:	str	r2, [r3, #24]
   1bb20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bb24:	cmp	r3, #0
   1bb28:	bge	1bbf0 <flatcc_emitter@@Base+0x10c>
   1bb2c:	ldr	r3, [fp, #-12]
   1bb30:	ldr	r2, [r3, #12]
   1bb34:	ldr	r3, [fp, #4]
   1bb38:	cmp	r2, r3
   1bb3c:	bcc	1bb84 <flatcc_emitter@@Base+0xa0>
   1bb40:	ldr	r3, [fp, #-12]
   1bb44:	ldr	r2, [r3, #8]
   1bb48:	ldr	r3, [fp, #4]
   1bb4c:	rsb	r3, r3, #0
   1bb50:	add	r2, r2, r3
   1bb54:	ldr	r3, [fp, #-12]
   1bb58:	str	r2, [r3, #8]
   1bb5c:	ldr	r3, [fp, #-12]
   1bb60:	ldr	r2, [r3, #12]
   1bb64:	ldr	r3, [fp, #4]
   1bb68:	sub	r2, r2, r3
   1bb6c:	ldr	r3, [fp, #-12]
   1bb70:	str	r2, [r3, #12]
   1bb74:	ldr	r3, [fp, #-12]
   1bb78:	ldr	r3, [r3, #8]
   1bb7c:	str	r3, [fp, #-8]
   1bb80:	b	1bc9c <flatcc_emitter@@Base+0x1b8>
   1bb84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bb88:	lsl	r3, r3, #3
   1bb8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bb90:	add	r3, r2, r3
   1bb94:	str	r3, [fp, #-20]	; 0xffffffec
   1bb98:	b	1bbd8 <flatcc_emitter@@Base+0xf4>
   1bb9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bba0:	sub	r3, r3, #8
   1bba4:	str	r3, [fp, #-20]	; 0xffffffec
   1bba8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bbac:	ldr	r1, [r3]
   1bbb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bbb4:	ldr	r3, [r3, #4]
   1bbb8:	mov	r2, r3
   1bbbc:	ldr	r0, [fp, #-12]
   1bbc0:	bl	1b60c <flatcc_builder_get_emit_context@@Base+0x3f8>
   1bbc4:	mov	r3, r0
   1bbc8:	cmp	r3, #0
   1bbcc:	beq	1bbd8 <flatcc_emitter@@Base+0xf4>
   1bbd0:	mvn	r3, #0
   1bbd4:	b	1bcf4 <flatcc_emitter@@Base+0x210>
   1bbd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bbdc:	sub	r2, r3, #1
   1bbe0:	str	r2, [fp, #-24]	; 0xffffffe8
   1bbe4:	cmp	r3, #0
   1bbe8:	bne	1bb9c <flatcc_emitter@@Base+0xb8>
   1bbec:	b	1bc94 <flatcc_emitter@@Base+0x1b0>
   1bbf0:	ldr	r3, [fp, #-12]
   1bbf4:	ldr	r2, [r3, #20]
   1bbf8:	ldr	r3, [fp, #4]
   1bbfc:	cmp	r2, r3
   1bc00:	bcc	1bc80 <flatcc_emitter@@Base+0x19c>
   1bc04:	ldr	r3, [fp, #-12]
   1bc08:	ldr	r3, [r3, #16]
   1bc0c:	str	r3, [fp, #-8]
   1bc10:	ldr	r3, [fp, #-12]
   1bc14:	ldr	r2, [r3, #16]
   1bc18:	ldr	r3, [fp, #4]
   1bc1c:	add	r2, r2, r3
   1bc20:	ldr	r3, [fp, #-12]
   1bc24:	str	r2, [r3, #16]
   1bc28:	ldr	r3, [fp, #-12]
   1bc2c:	ldr	r2, [r3, #20]
   1bc30:	ldr	r3, [fp, #4]
   1bc34:	sub	r2, r2, r3
   1bc38:	ldr	r3, [fp, #-12]
   1bc3c:	str	r2, [r3, #20]
   1bc40:	b	1bc9c <flatcc_emitter@@Base+0x1b8>
   1bc44:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc48:	ldr	r1, [r3]
   1bc4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc50:	ldr	r3, [r3, #4]
   1bc54:	mov	r2, r3
   1bc58:	ldr	r0, [fp, #-12]
   1bc5c:	bl	1b714 <flatcc_builder_get_emit_context@@Base+0x500>
   1bc60:	mov	r3, r0
   1bc64:	cmp	r3, #0
   1bc68:	beq	1bc74 <flatcc_emitter@@Base+0x190>
   1bc6c:	mvn	r3, #0
   1bc70:	b	1bcf4 <flatcc_emitter@@Base+0x210>
   1bc74:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc78:	add	r3, r3, #8
   1bc7c:	str	r3, [fp, #-20]	; 0xffffffec
   1bc80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bc84:	sub	r2, r3, #1
   1bc88:	str	r2, [fp, #-24]	; 0xffffffe8
   1bc8c:	cmp	r3, #0
   1bc90:	bne	1bc44 <flatcc_emitter@@Base+0x160>
   1bc94:	mov	r3, #0
   1bc98:	b	1bcf4 <flatcc_emitter@@Base+0x210>
   1bc9c:	b	1bcdc <flatcc_emitter@@Base+0x1f8>
   1bca0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bca4:	ldr	r1, [r3]
   1bca8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bcac:	ldr	r3, [r3, #4]
   1bcb0:	mov	r2, r3
   1bcb4:	ldr	r0, [fp, #-8]
   1bcb8:	bl	11f90 <memcpy@plt>
   1bcbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bcc0:	ldr	r3, [r3, #4]
   1bcc4:	ldr	r2, [fp, #-8]
   1bcc8:	add	r3, r2, r3
   1bccc:	str	r3, [fp, #-8]
   1bcd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bcd4:	add	r3, r3, #8
   1bcd8:	str	r3, [fp, #-20]	; 0xffffffec
   1bcdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bce0:	sub	r2, r3, #1
   1bce4:	str	r2, [fp, #-24]	; 0xffffffe8
   1bce8:	cmp	r3, #0
   1bcec:	bne	1bca0 <flatcc_emitter@@Base+0x1bc>
   1bcf0:	mov	r3, #0
   1bcf4:	mov	r0, r3
   1bcf8:	sub	sp, fp, #4
   1bcfc:	pop	{fp, pc}

0001bd00 <flatcc_emitter_copy_buffer@@Base>:
   1bd00:	push	{fp, lr}
   1bd04:	add	fp, sp, #4
   1bd08:	sub	sp, sp, #24
   1bd0c:	str	r0, [fp, #-16]
   1bd10:	str	r1, [fp, #-20]	; 0xffffffec
   1bd14:	str	r2, [fp, #-24]	; 0xffffffe8
   1bd18:	ldr	r3, [fp, #-16]
   1bd1c:	ldr	r2, [r3, #24]
   1bd20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bd24:	cmp	r2, r3
   1bd28:	bls	1bd34 <flatcc_emitter_copy_buffer@@Base+0x34>
   1bd2c:	mov	r3, #0
   1bd30:	b	1be34 <flatcc_emitter_copy_buffer@@Base+0x134>
   1bd34:	ldr	r3, [fp, #-16]
   1bd38:	ldr	r3, [r3]
   1bd3c:	cmp	r3, #0
   1bd40:	bne	1bd4c <flatcc_emitter_copy_buffer@@Base+0x4c>
   1bd44:	mov	r3, #0
   1bd48:	b	1be34 <flatcc_emitter_copy_buffer@@Base+0x134>
   1bd4c:	ldr	r3, [fp, #-16]
   1bd50:	ldr	r2, [r3]
   1bd54:	ldr	r3, [fp, #-16]
   1bd58:	ldr	r3, [r3, #4]
   1bd5c:	cmp	r2, r3
   1bd60:	bne	1bd88 <flatcc_emitter_copy_buffer@@Base+0x88>
   1bd64:	ldr	r3, [fp, #-16]
   1bd68:	ldr	r1, [r3, #8]
   1bd6c:	ldr	r3, [fp, #-16]
   1bd70:	ldr	r3, [r3, #24]
   1bd74:	mov	r2, r3
   1bd78:	ldr	r0, [fp, #-20]	; 0xffffffec
   1bd7c:	bl	11f90 <memcpy@plt>
   1bd80:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd84:	b	1be34 <flatcc_emitter_copy_buffer@@Base+0x134>
   1bd88:	ldr	r3, [fp, #-16]
   1bd8c:	ldr	r3, [r3, #12]
   1bd90:	rsb	r3, r3, #2944	; 0xb80
   1bd94:	str	r3, [fp, #-12]
   1bd98:	ldr	r3, [fp, #-16]
   1bd9c:	ldr	r3, [r3, #8]
   1bda0:	ldr	r2, [fp, #-12]
   1bda4:	mov	r1, r3
   1bda8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1bdac:	bl	11f90 <memcpy@plt>
   1bdb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bdb4:	ldr	r3, [fp, #-12]
   1bdb8:	add	r3, r2, r3
   1bdbc:	str	r3, [fp, #-20]	; 0xffffffec
   1bdc0:	ldr	r3, [fp, #-16]
   1bdc4:	ldr	r3, [r3]
   1bdc8:	ldr	r3, [r3, #2944]	; 0xb80
   1bdcc:	str	r3, [fp, #-8]
   1bdd0:	b	1be00 <flatcc_emitter_copy_buffer@@Base+0x100>
   1bdd4:	ldr	r3, [fp, #-8]
   1bdd8:	mov	r2, #2944	; 0xb80
   1bddc:	mov	r1, r3
   1bde0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1bde4:	bl	11f90 <memcpy@plt>
   1bde8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bdec:	add	r3, r3, #2944	; 0xb80
   1bdf0:	str	r3, [fp, #-20]	; 0xffffffec
   1bdf4:	ldr	r3, [fp, #-8]
   1bdf8:	ldr	r3, [r3, #2944]	; 0xb80
   1bdfc:	str	r3, [fp, #-8]
   1be00:	ldr	r3, [fp, #-16]
   1be04:	ldr	r2, [r3, #4]
   1be08:	ldr	r3, [fp, #-8]
   1be0c:	cmp	r2, r3
   1be10:	bne	1bdd4 <flatcc_emitter_copy_buffer@@Base+0xd4>
   1be14:	ldr	r1, [fp, #-8]
   1be18:	ldr	r3, [fp, #-16]
   1be1c:	ldr	r3, [r3, #20]
   1be20:	rsb	r3, r3, #2944	; 0xb80
   1be24:	mov	r2, r3
   1be28:	ldr	r0, [fp, #-20]	; 0xffffffec
   1be2c:	bl	11f90 <memcpy@plt>
   1be30:	ldr	r3, [fp, #-20]	; 0xffffffec
   1be34:	mov	r0, r3
   1be38:	sub	sp, fp, #4
   1be3c:	pop	{fp, pc}

0001be40 <__libc_csu_init@@Base>:
   1be40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1be44:	mov	r7, r0
   1be48:	ldr	r6, [pc, #72]	; 1be98 <__libc_csu_init@@Base+0x58>
   1be4c:	ldr	r5, [pc, #72]	; 1be9c <__libc_csu_init@@Base+0x5c>
   1be50:	add	r6, pc, r6
   1be54:	add	r5, pc, r5
   1be58:	sub	r6, r6, r5
   1be5c:	mov	r8, r1
   1be60:	mov	r9, r2
   1be64:	bl	11f58 <strcmp@plt-0x20>
   1be68:	asrs	r6, r6, #2
   1be6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1be70:	mov	r4, #0
   1be74:	add	r4, r4, #1
   1be78:	ldr	r3, [r5], #4
   1be7c:	mov	r2, r9
   1be80:	mov	r1, r8
   1be84:	mov	r0, r7
   1be88:	blx	r3
   1be8c:	cmp	r6, r4
   1be90:	bne	1be74 <__libc_csu_init@@Base+0x34>
   1be94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1be98:	strheq	r2, [r1], -r8
   1be9c:	strheq	r2, [r1], -r0

0001bea0 <__libc_csu_fini@@Base>:
   1bea0:	bx	lr

Disassembly of section .fini:

0001bea4 <.fini>:
   1bea4:	push	{r3, lr}
   1bea8:	pop	{r3, pc}
