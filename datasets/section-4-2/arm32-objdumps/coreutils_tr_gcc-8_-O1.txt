
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010c84 <.init>:
   10c84:	push	{r3, lr}
   10c88:	bl	10f5c <__assert_fail@plt+0x48>
   10c8c:	pop	{r3, pc}

Disassembly of section .plt:

00010c90 <calloc@plt-0x14>:
   10c90:	push	{lr}		; (str lr, [sp, #-4]!)
   10c94:	ldr	lr, [pc, #4]	; 10ca0 <calloc@plt-0x4>
   10c98:	add	lr, pc, lr
   10c9c:	ldr	pc, [lr, #8]!
   10ca0:	andeq	r8, r1, r0, ror #6

00010ca4 <calloc@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #24, 20	; 0x18000
   10cac:	ldr	pc, [ip, #864]!	; 0x360

00010cb0 <fputs_unlocked@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #24, 20	; 0x18000
   10cb8:	ldr	pc, [ip, #856]!	; 0x358

00010cbc <strcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #24, 20	; 0x18000
   10cc4:	ldr	pc, [ip, #848]!	; 0x350

00010cc8 <posix_fadvise64@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #840]!	; 0x348

00010cd4 <read@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #832]!	; 0x340

00010ce0 <fflush@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #824]!	; 0x338

00010cec <free@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #816]!	; 0x330

00010cf8 <_exit@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #808]!	; 0x328

00010d04 <memcpy@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #800]!	; 0x320

00010d10 <__strtoull_internal@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #792]!	; 0x318

00010d1c <mbsinit@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #784]!	; 0x310

00010d28 <fwrite_unlocked@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #776]!	; 0x308

00010d34 <memcmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #768]!	; 0x300

00010d40 <stpcpy@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #760]!	; 0x2f8

00010d4c <fputc_unlocked@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #752]!	; 0x2f0

00010d58 <dcgettext@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #744]!	; 0x2e8

00010d64 <realloc@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d70 <textdomain@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #728]!	; 0x2d8

00010d7c <iswprint@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #720]!	; 0x2d0

00010d88 <fwrite@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #712]!	; 0x2c8

00010d94 <lseek64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #704]!	; 0x2c0

00010da0 <__ctype_get_mb_cur_max@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dac <__fpending@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #688]!	; 0x2b0

00010db8 <mbrtowc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc4 <error@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd0 <malloc@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #664]!	; 0x298

00010ddc <__libc_start_main@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #656]!	; 0x290

00010de8 <__freading@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #648]!	; 0x288

00010df4 <__ctype_tolower_loc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #640]!	; 0x280

00010e00 <__ctype_toupper_loc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #632]!	; 0x278

00010e0c <__gmon_start__@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #624]!	; 0x270

00010e18 <getopt_long@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #616]!	; 0x268

00010e24 <__ctype_b_loc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #608]!	; 0x260

00010e30 <exit@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #600]!	; 0x258

00010e3c <strlen@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #592]!	; 0x250

00010e48 <strchr@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #584]!	; 0x248

00010e54 <__errno_location@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #576]!	; 0x240

00010e60 <__sprintf_chk@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #568]!	; 0x238

00010e6c <__cxa_atexit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #560]!	; 0x230

00010e78 <memset@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #552]!	; 0x228

00010e84 <__printf_chk@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #544]!	; 0x220

00010e90 <fileno@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #536]!	; 0x218

00010e9c <__fprintf_chk@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #528]!	; 0x210

00010ea8 <fclose@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #520]!	; 0x208

00010eb4 <fseeko64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #512]!	; 0x200

00010ec0 <setlocale@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ecc <strrchr@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed8 <nl_langinfo@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee4 <bindtextdomain@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef0 <strncmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #472]!	; 0x1d8

00010efc <abort@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #464]!	; 0x1d0

00010f08 <close@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #456]!	; 0x1c8

00010f14 <__assert_fail@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #448]!	; 0x1c0

Disassembly of section .text:

00010f20 <.text>:
   10f20:	mov	fp, #0
   10f24:	mov	lr, #0
   10f28:	pop	{r1}		; (ldr r1, [sp], #4)
   10f2c:	mov	r2, sp
   10f30:	push	{r2}		; (str r2, [sp, #-4]!)
   10f34:	push	{r0}		; (str r0, [sp, #-4]!)
   10f38:	ldr	ip, [pc, #16]	; 10f50 <__assert_fail@plt+0x3c>
   10f3c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f40:	ldr	r0, [pc, #12]	; 10f54 <__assert_fail@plt+0x40>
   10f44:	ldr	r3, [pc, #12]	; 10f58 <__assert_fail@plt+0x44>
   10f48:	bl	10ddc <__libc_start_main@plt>
   10f4c:	bl	10efc <abort@plt>
   10f50:	andeq	r7, r1, r8, lsr r6
   10f54:	ldrdeq	r2, [r1], -r0
   10f58:	ldrdeq	r7, [r1], -r8
   10f5c:	ldr	r3, [pc, #20]	; 10f78 <__assert_fail@plt+0x64>
   10f60:	ldr	r2, [pc, #20]	; 10f7c <__assert_fail@plt+0x68>
   10f64:	add	r3, pc, r3
   10f68:	ldr	r2, [r3, r2]
   10f6c:	cmp	r2, #0
   10f70:	bxeq	lr
   10f74:	b	10e0c <__gmon_start__@plt>
   10f78:	muleq	r1, r4, r0
   10f7c:	andeq	r0, r0, r0, ror #1
   10f80:	ldr	r0, [pc, #24]	; 10fa0 <__assert_fail@plt+0x8c>
   10f84:	ldr	r3, [pc, #24]	; 10fa4 <__assert_fail@plt+0x90>
   10f88:	cmp	r3, r0
   10f8c:	bxeq	lr
   10f90:	ldr	r3, [pc, #16]	; 10fa8 <__assert_fail@plt+0x94>
   10f94:	cmp	r3, #0
   10f98:	bxeq	lr
   10f9c:	bx	r3
   10fa0:	andeq	r9, r2, r4, lsr r1
   10fa4:	andeq	r9, r2, r4, lsr r1
   10fa8:	andeq	r0, r0, r0
   10fac:	ldr	r0, [pc, #36]	; 10fd8 <__assert_fail@plt+0xc4>
   10fb0:	ldr	r1, [pc, #36]	; 10fdc <__assert_fail@plt+0xc8>
   10fb4:	sub	r1, r1, r0
   10fb8:	asr	r1, r1, #2
   10fbc:	add	r1, r1, r1, lsr #31
   10fc0:	asrs	r1, r1, #1
   10fc4:	bxeq	lr
   10fc8:	ldr	r3, [pc, #16]	; 10fe0 <__assert_fail@plt+0xcc>
   10fcc:	cmp	r3, #0
   10fd0:	bxeq	lr
   10fd4:	bx	r3
   10fd8:	andeq	r9, r2, r4, lsr r1
   10fdc:	andeq	r9, r2, r4, lsr r1
   10fe0:	andeq	r0, r0, r0
   10fe4:	push	{r4, lr}
   10fe8:	ldr	r4, [pc, #24]	; 11008 <__assert_fail@plt+0xf4>
   10fec:	ldrb	r3, [r4]
   10ff0:	cmp	r3, #0
   10ff4:	popne	{r4, pc}
   10ff8:	bl	10f80 <__assert_fail@plt+0x6c>
   10ffc:	mov	r3, #1
   11000:	strb	r3, [r4]
   11004:	pop	{r4, pc}
   11008:	andeq	r9, r2, r8, asr r1
   1100c:	b	10fac <__assert_fail@plt+0x98>
   11010:	strd	r4, [sp, #-16]!
   11014:	str	r6, [sp, #8]
   11018:	str	lr, [sp, #12]
   1101c:	ldr	r5, [r0]
   11020:	ldrb	r2, [r5, r1]
   11024:	cmp	r2, #42	; 0x2a
   11028:	movne	r0, #0
   1102c:	beq	11040 <__assert_fail@plt+0x12c>
   11030:	ldrd	r4, [sp]
   11034:	ldr	r6, [sp, #8]
   11038:	add	sp, sp, #12
   1103c:	pop	{pc}		; (ldr pc, [sp], #4)
   11040:	mov	r3, r0
   11044:	ldr	r6, [r0, #4]
   11048:	ldrb	r0, [r6, r1]
   1104c:	cmp	r0, #0
   11050:	movne	r0, #0
   11054:	bne	11030 <__assert_fail@plt+0x11c>
   11058:	add	r1, r1, #1
   1105c:	ldr	r4, [r3, #8]
   11060:	cmp	r1, r4
   11064:	bcs	11030 <__assert_fail@plt+0x11c>
   11068:	add	r3, r5, r1
   1106c:	ldrb	r2, [r5, r1]
   11070:	sub	r0, r2, #48	; 0x30
   11074:	cmp	r0, #9
   11078:	bhi	110cc <__assert_fail@plt+0x1b8>
   1107c:	add	ip, r6, r1
   11080:	ldrb	r0, [r6, r1]
   11084:	cmp	r0, #0
   11088:	subeq	r4, r4, #1
   1108c:	addeq	r4, r5, r4
   11090:	rsbeq	r5, r5, #1
   11094:	bne	110e4 <__assert_fail@plt+0x1d0>
   11098:	add	r1, r5, r3
   1109c:	cmp	r3, r4
   110a0:	beq	11030 <__assert_fail@plt+0x11c>
   110a4:	ldrb	r2, [r3, #1]!
   110a8:	sub	lr, r2, #48	; 0x30
   110ac:	cmp	lr, #9
   110b0:	bhi	110cc <__assert_fail@plt+0x1b8>
   110b4:	ldrb	r2, [ip, #1]!
   110b8:	cmp	r2, #0
   110bc:	beq	11098 <__assert_fail@plt+0x184>
   110c0:	mov	r0, #0
   110c4:	and	r0, r0, #1
   110c8:	b	11030 <__assert_fail@plt+0x11c>
   110cc:	cmp	r2, #93	; 0x5d
   110d0:	movne	r0, #0
   110d4:	bne	110c4 <__assert_fail@plt+0x1b0>
   110d8:	ldrb	r0, [r6, r1]
   110dc:	eor	r0, r0, #1
   110e0:	b	110c4 <__assert_fail@plt+0x1b0>
   110e4:	mov	r0, #0
   110e8:	b	110c4 <__assert_fail@plt+0x1b0>
   110ec:	str	r4, [sp, #-8]!
   110f0:	str	lr, [sp, #4]
   110f4:	mov	r2, r1
   110f8:	mov	r1, r0
   110fc:	mov	r0, #0
   11100:	bl	15eb0 <__assert_fail@plt+0x4f9c>
   11104:	cmn	r0, #1
   11108:	beq	11118 <__assert_fail@plt+0x204>
   1110c:	ldr	r4, [sp]
   11110:	add	sp, sp, #4
   11114:	pop	{pc}		; (ldr pc, [sp], #4)
   11118:	bl	10e54 <__errno_location@plt>
   1111c:	ldr	r4, [r0]
   11120:	mov	r2, #5
   11124:	movw	r1, #30680	; 0x77d8
   11128:	movt	r1, #1
   1112c:	mov	r0, #0
   11130:	bl	10d58 <dcgettext@plt>
   11134:	mov	r2, r0
   11138:	mov	r1, r4
   1113c:	mov	r0, #1
   11140:	bl	10dc4 <error@plt>
   11144:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11148:	strd	r6, [sp, #8]
   1114c:	str	r8, [sp, #16]
   11150:	str	lr, [sp, #20]
   11154:	mov	r4, r0
   11158:	mov	r6, r1
   1115c:	movw	r5, #37212	; 0x915c
   11160:	movt	r5, #2
   11164:	mov	r7, #0
   11168:	b	111d4 <__assert_fail@plt+0x2c0>
   1116c:	mov	r3, ip
   11170:	add	ip, r3, #1
   11174:	cmp	r0, ip
   11178:	beq	11214 <__assert_fail@plt+0x300>
   1117c:	ldrb	r1, [r2, #1]!
   11180:	ldrb	r1, [r5, r1]
   11184:	cmp	r1, #0
   11188:	beq	1116c <__assert_fail@plt+0x258>
   1118c:	add	r3, r3, #2
   11190:	cmp	r0, r3
   11194:	bls	111cc <__assert_fail@plt+0x2b8>
   11198:	sub	r3, r3, #1
   1119c:	add	r3, r4, r3
   111a0:	add	r1, r3, #1
   111a4:	ldrb	r2, [r3, #1]
   111a8:	ldrb	lr, [r5, r2]
   111ac:	cmp	lr, #0
   111b0:	strbeq	r2, [r4, ip]
   111b4:	addeq	ip, ip, #1
   111b8:	add	r3, r3, #2
   111bc:	sub	r2, r3, r4
   111c0:	mov	r3, r1
   111c4:	cmp	r0, r2
   111c8:	bhi	111a0 <__assert_fail@plt+0x28c>
   111cc:	cmp	ip, #0
   111d0:	bne	11220 <__assert_fail@plt+0x30c>
   111d4:	mov	r1, r6
   111d8:	mov	r0, r4
   111dc:	bl	110ec <__assert_fail@plt+0x1d8>
   111e0:	cmp	r0, #0
   111e4:	beq	11224 <__assert_fail@plt+0x310>
   111e8:	ldrb	r3, [r4]
   111ec:	ldrb	r3, [r5, r3]
   111f0:	cmp	r3, #0
   111f4:	moveq	r2, r4
   111f8:	moveq	r3, r7
   111fc:	beq	11170 <__assert_fail@plt+0x25c>
   11200:	cmp	r0, #1
   11204:	movhi	ip, r7
   11208:	movhi	r3, #1
   1120c:	bhi	11198 <__assert_fail@plt+0x284>
   11210:	b	111d4 <__assert_fail@plt+0x2c0>
   11214:	add	r3, r3, #2
   11218:	cmp	r0, r3
   1121c:	bhi	11198 <__assert_fail@plt+0x284>
   11220:	mov	r0, ip
   11224:	ldrd	r4, [sp]
   11228:	ldrd	r6, [sp, #8]
   1122c:	ldr	r8, [sp, #16]
   11230:	add	sp, sp, #20
   11234:	pop	{pc}		; (ldr pc, [sp], #4)
   11238:	str	r4, [sp, #-8]!
   1123c:	str	lr, [sp, #4]
   11240:	mov	r4, r0
   11244:	bl	110ec <__assert_fail@plt+0x1d8>
   11248:	cmp	r0, #0
   1124c:	beq	11278 <__assert_fail@plt+0x364>
   11250:	sub	r3, r4, #1
   11254:	add	ip, r3, r0
   11258:	movw	r1, #37212	; 0x915c
   1125c:	movt	r1, #2
   11260:	ldrb	r2, [r3, #1]!
   11264:	add	r2, r1, r2
   11268:	ldrb	r2, [r2, #256]	; 0x100
   1126c:	strb	r2, [r3]
   11270:	cmp	r3, ip
   11274:	bne	11260 <__assert_fail@plt+0x34c>
   11278:	ldr	r4, [sp]
   1127c:	add	sp, sp, #4
   11280:	pop	{pc}		; (ldr pc, [sp], #4)
   11284:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11288:	strd	r6, [sp, #8]
   1128c:	str	r8, [sp, #16]
   11290:	str	lr, [sp, #20]
   11294:	mov	r4, r0
   11298:	mov	r5, r1
   1129c:	mov	r6, r2
   112a0:	mov	r7, r3
   112a4:	mov	r0, #24
   112a8:	bl	164fc <__assert_fail@plt+0x55e8>
   112ac:	mov	r3, #0
   112b0:	str	r3, [r0, #4]
   112b4:	mov	r3, #4
   112b8:	str	r3, [r0]
   112bc:	strb	r5, [r0, #8]
   112c0:	strd	r6, [r0, #16]
   112c4:	ldr	r3, [r4, #4]
   112c8:	cmp	r3, #0
   112cc:	beq	112ec <__assert_fail@plt+0x3d8>
   112d0:	str	r0, [r3, #4]
   112d4:	str	r0, [r4, #4]
   112d8:	ldrd	r4, [sp]
   112dc:	ldrd	r6, [sp, #8]
   112e0:	ldr	r8, [sp, #16]
   112e4:	add	sp, sp, #20
   112e8:	pop	{pc}		; (ldr pc, [sp], #4)
   112ec:	movw	r3, #30304	; 0x7660
   112f0:	movt	r3, #1
   112f4:	movw	r2, #721	; 0x2d1
   112f8:	movw	r1, #30692	; 0x77e4
   112fc:	movt	r1, #1
   11300:	movw	r0, #30704	; 0x77f0
   11304:	movt	r0, #1
   11308:	bl	10f14 <__assert_fail@plt>
   1130c:	strd	r4, [sp, #-16]!
   11310:	str	r6, [sp, #8]
   11314:	str	lr, [sp, #12]
   11318:	mov	r4, r0
   1131c:	mov	r5, r1
   11320:	mov	r0, #24
   11324:	bl	164fc <__assert_fail@plt+0x55e8>
   11328:	mov	r3, #0
   1132c:	str	r3, [r0, #4]
   11330:	str	r3, [r0]
   11334:	strb	r5, [r0, #8]
   11338:	ldr	r3, [r4, #4]
   1133c:	cmp	r3, #0
   11340:	beq	1135c <__assert_fail@plt+0x448>
   11344:	str	r0, [r3, #4]
   11348:	str	r0, [r4, #4]
   1134c:	ldrd	r4, [sp]
   11350:	ldr	r6, [sp, #8]
   11354:	add	sp, sp, #12
   11358:	pop	{pc}		; (ldr pc, [sp], #4)
   1135c:	ldr	r3, [pc, #20]	; 11378 <__assert_fail@plt+0x464>
   11360:	movw	r2, #649	; 0x289
   11364:	movw	r1, #30692	; 0x77e4
   11368:	movt	r1, #1
   1136c:	movw	r0, #30704	; 0x77f0
   11370:	movt	r0, #1
   11374:	bl	10f14 <__assert_fail@plt>
   11378:	andeq	r7, r1, r8, ror r6
   1137c:	strd	r4, [sp, #-12]!
   11380:	str	lr, [sp, #8]
   11384:	sub	sp, sp, #12
   11388:	mov	r5, r0
   1138c:	mov	r0, #5
   11390:	bl	164fc <__assert_fail@plt+0x55e8>
   11394:	mov	r4, r0
   11398:	bl	10e24 <__ctype_b_loc@plt>
   1139c:	ldr	r2, [r0]
   113a0:	lsl	r3, r5, #1
   113a4:	ldrh	r3, [r2, r3]
   113a8:	tst	r3, #16384	; 0x4000
   113ac:	beq	113d0 <__assert_fail@plt+0x4bc>
   113b0:	strb	r5, [r4]
   113b4:	mov	r3, #0
   113b8:	strb	r3, [r4, #1]
   113bc:	mov	r0, r4
   113c0:	add	sp, sp, #12
   113c4:	ldrd	r4, [sp]
   113c8:	add	sp, sp, #8
   113cc:	pop	{pc}		; (ldr pc, [sp], #4)
   113d0:	str	r5, [sp]
   113d4:	movw	r3, #30716	; 0x77fc
   113d8:	movt	r3, #1
   113dc:	mov	r2, #5
   113e0:	mov	r1, #1
   113e4:	mov	r0, r4
   113e8:	bl	10e60 <__sprintf_chk@plt>
   113ec:	b	113bc <__assert_fail@plt+0x4a8>
   113f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   113f4:	strd	r6, [sp, #8]
   113f8:	strd	r8, [sp, #16]
   113fc:	strd	sl, [sp, #24]
   11400:	str	lr, [sp, #32]
   11404:	sub	sp, sp, #20
   11408:	mov	r5, r0
   1140c:	mov	r7, r1
   11410:	mov	r1, #4
   11414:	add	r0, r7, #1
   11418:	bl	1667c <__assert_fail@plt+0x5768>
   1141c:	mov	fp, r0
   11420:	cmp	r7, #0
   11424:	beq	11534 <__assert_fail@plt+0x620>
   11428:	sub	r5, r5, #1
   1142c:	add	r7, r5, r7
   11430:	mov	r6, r0
   11434:	movw	r9, #30736	; 0x7810
   11438:	movt	r9, #1
   1143c:	movw	sl, #30716	; 0x77fc
   11440:	movt	sl, #1
   11444:	movw	r8, #30732	; 0x780c
   11448:	movt	r8, #1
   1144c:	b	11488 <__assert_fail@plt+0x574>
   11450:	cmp	r4, #8
   11454:	beq	1151c <__assert_fail@plt+0x608>
   11458:	movwhi	r1, #30744	; 0x7818
   1145c:	movthi	r1, #1
   11460:	bhi	11474 <__assert_fail@plt+0x560>
   11464:	cmp	r4, #7
   11468:	movweq	r1, #30752	; 0x7820
   1146c:	movteq	r1, #1
   11470:	bne	114c8 <__assert_fail@plt+0x5b4>
   11474:	mov	r0, r6
   11478:	bl	10d40 <stpcpy@plt>
   1147c:	mov	r6, r0
   11480:	cmp	r5, r7
   11484:	beq	11534 <__assert_fail@plt+0x620>
   11488:	ldrb	r4, [r5, #1]!
   1148c:	cmp	r4, #10
   11490:	beq	11514 <__assert_fail@plt+0x600>
   11494:	bls	11450 <__assert_fail@plt+0x53c>
   11498:	cmp	r4, #12
   1149c:	moveq	r1, r8
   114a0:	beq	11474 <__assert_fail@plt+0x560>
   114a4:	bcc	11528 <__assert_fail@plt+0x614>
   114a8:	cmp	r4, #13
   114ac:	movweq	r1, #30740	; 0x7814
   114b0:	movteq	r1, #1
   114b4:	beq	11474 <__assert_fail@plt+0x560>
   114b8:	cmp	r4, #92	; 0x5c
   114bc:	movweq	r1, #30724	; 0x7804
   114c0:	movteq	r1, #1
   114c4:	beq	11474 <__assert_fail@plt+0x560>
   114c8:	bl	10e24 <__ctype_b_loc@plt>
   114cc:	ldr	r2, [r0]
   114d0:	lsl	r3, r4, #1
   114d4:	ldrh	r3, [r2, r3]
   114d8:	tst	r3, #16384	; 0x4000
   114dc:	beq	114f4 <__assert_fail@plt+0x5e0>
   114e0:	strb	r4, [sp, #8]
   114e4:	mov	r3, #0
   114e8:	strb	r3, [sp, #9]
   114ec:	add	r1, sp, #8
   114f0:	b	11474 <__assert_fail@plt+0x560>
   114f4:	str	r4, [sp]
   114f8:	mov	r3, sl
   114fc:	mov	r2, #5
   11500:	mov	r1, #1
   11504:	add	r0, sp, #8
   11508:	bl	10e60 <__sprintf_chk@plt>
   1150c:	add	r1, sp, #8
   11510:	b	11474 <__assert_fail@plt+0x560>
   11514:	mov	r1, r9
   11518:	b	11474 <__assert_fail@plt+0x560>
   1151c:	movw	r1, #30728	; 0x7808
   11520:	movt	r1, #1
   11524:	b	11474 <__assert_fail@plt+0x560>
   11528:	movw	r1, #30748	; 0x781c
   1152c:	movt	r1, #1
   11530:	b	11474 <__assert_fail@plt+0x560>
   11534:	mov	r0, fp
   11538:	add	sp, sp, #20
   1153c:	ldrd	r4, [sp]
   11540:	ldrd	r6, [sp, #8]
   11544:	ldrd	r8, [sp, #16]
   11548:	ldrd	sl, [sp, #24]
   1154c:	add	sp, sp, #32
   11550:	pop	{pc}		; (ldr pc, [sp], #4)
   11554:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11558:	strd	r6, [sp, #8]
   1155c:	strd	r8, [sp, #16]
   11560:	strd	sl, [sp, #24]
   11564:	str	lr, [sp, #32]
   11568:	sub	sp, sp, #100	; 0x64
   1156c:	mov	r8, r0
   11570:	str	r1, [sp, #28]
   11574:	bl	10e3c <strlen@plt>
   11578:	mov	r4, r0
   1157c:	bl	164fc <__assert_fail@plt+0x55e8>
   11580:	str	r0, [sp, #84]	; 0x54
   11584:	mov	r1, #1
   11588:	mov	r0, r4
   1158c:	bl	16838 <__assert_fail@plt+0x5924>
   11590:	str	r0, [sp, #88]	; 0x58
   11594:	ldrb	r6, [r8]
   11598:	cmp	r6, #0
   1159c:	beq	11760 <__assert_fail@plt+0x84c>
   115a0:	mov	r7, #1
   115a4:	mov	r5, #0
   115a8:	movw	r3, #30756	; 0x7824
   115ac:	movt	r3, #1
   115b0:	str	r3, [sp, #36]	; 0x24
   115b4:	movw	fp, #30856	; 0x7888
   115b8:	movt	fp, #1
   115bc:	str	fp, [sp, #32]
   115c0:	b	1170c <__assert_fail@plt+0x7f8>
   115c4:	cmp	r4, #55	; 0x37
   115c8:	bhi	11610 <__assert_fail@plt+0x6fc>
   115cc:	cmp	r4, #48	; 0x30
   115d0:	bcs	11648 <__assert_fail@plt+0x734>
   115d4:	cmp	r4, #0
   115d8:	bne	11620 <__assert_fail@plt+0x70c>
   115dc:	mov	r2, #5
   115e0:	ldr	r1, [sp, #32]
   115e4:	mov	r0, #0
   115e8:	bl	10d58 <dcgettext@plt>
   115ec:	mov	r2, r0
   115f0:	mov	r1, #0
   115f4:	mov	r0, r1
   115f8:	bl	10dc4 <error@plt>
   115fc:	mov	r3, #0
   11600:	strb	r3, [sl, r9]
   11604:	sub	r5, r5, #1
   11608:	mov	r4, r6
   1160c:	b	11620 <__assert_fail@plt+0x70c>
   11610:	cmp	r4, #92	; 0x5c
   11614:	beq	11620 <__assert_fail@plt+0x70c>
   11618:	cmp	r4, #97	; 0x61
   1161c:	moveq	r4, #7
   11620:	add	r5, r5, #1
   11624:	ldr	r3, [sp, #84]	; 0x54
   11628:	strb	r4, [r3, r9]
   1162c:	b	116f4 <__assert_fail@plt+0x7e0>
   11630:	cmp	r4, #116	; 0x74
   11634:	moveq	r4, #9
   11638:	beq	11620 <__assert_fail@plt+0x70c>
   1163c:	cmp	r4, #118	; 0x76
   11640:	moveq	r4, #11
   11644:	b	11620 <__assert_fail@plt+0x70c>
   11648:	sub	r4, r4, #48	; 0x30
   1164c:	uxtb	r4, r4
   11650:	add	r6, r5, #2
   11654:	ldrb	r3, [r8, r6]
   11658:	sub	r2, r3, #48	; 0x30
   1165c:	cmp	r2, #7
   11660:	bhi	11620 <__assert_fail@plt+0x70c>
   11664:	add	r4, r2, r4, lsl #3
   11668:	and	r4, r4, #255	; 0xff
   1166c:	add	r5, r5, #3
   11670:	ldrb	r3, [r8, r5]
   11674:	sub	r2, r3, #48	; 0x30
   11678:	cmp	r2, #7
   1167c:	movhi	r5, fp
   11680:	bhi	11620 <__assert_fail@plt+0x70c>
   11684:	add	r2, r2, r4, lsl #3
   11688:	cmp	r2, #255	; 0xff
   1168c:	bgt	1169c <__assert_fail@plt+0x788>
   11690:	and	r4, r2, #255	; 0xff
   11694:	mov	r5, r6
   11698:	b	11620 <__assert_fail@plt+0x70c>
   1169c:	mov	r2, #5
   116a0:	ldr	r1, [sp, #36]	; 0x24
   116a4:	mov	r0, #0
   116a8:	bl	10d58 <dcgettext@plt>
   116ac:	ldrb	r3, [r8, fp]
   116b0:	ldrb	r2, [r8, r6]
   116b4:	ldrb	r1, [r8, r5]
   116b8:	str	r1, [sp, #16]
   116bc:	str	r2, [sp, #12]
   116c0:	str	r3, [sp, #8]
   116c4:	str	r1, [sp, #4]
   116c8:	str	r2, [sp]
   116cc:	mov	r2, r0
   116d0:	mov	r1, #0
   116d4:	mov	r0, r1
   116d8:	bl	10dc4 <error@plt>
   116dc:	mov	r5, fp
   116e0:	b	11620 <__assert_fail@plt+0x70c>
   116e4:	mov	r4, #8
   116e8:	b	11620 <__assert_fail@plt+0x70c>
   116ec:	ldr	r3, [sp, #84]	; 0x54
   116f0:	strb	r6, [r3, r9]
   116f4:	add	r5, r5, #1
   116f8:	ldrb	r6, [r8, r5]
   116fc:	add	r3, r7, #1
   11700:	cmp	r6, #0
   11704:	beq	11764 <__assert_fail@plt+0x850>
   11708:	mov	r7, r3
   1170c:	sub	r9, r7, #1
   11710:	cmp	r6, #92	; 0x5c
   11714:	bne	116ec <__assert_fail@plt+0x7d8>
   11718:	ldr	sl, [sp, #88]	; 0x58
   1171c:	mov	r3, #1
   11720:	strb	r3, [sl, r9]
   11724:	add	fp, r5, #1
   11728:	ldrb	r4, [r8, fp]
   1172c:	cmp	r4, #98	; 0x62
   11730:	beq	116e4 <__assert_fail@plt+0x7d0>
   11734:	bls	115c4 <__assert_fail@plt+0x6b0>
   11738:	cmp	r4, #114	; 0x72
   1173c:	moveq	r4, #13
   11740:	beq	11620 <__assert_fail@plt+0x70c>
   11744:	bhi	11630 <__assert_fail@plt+0x71c>
   11748:	cmp	r4, #102	; 0x66
   1174c:	moveq	r4, #12
   11750:	beq	11620 <__assert_fail@plt+0x70c>
   11754:	cmp	r4, #110	; 0x6e
   11758:	moveq	r4, #10
   1175c:	b	11620 <__assert_fail@plt+0x70c>
   11760:	mov	r7, #0
   11764:	str	r7, [sp, #92]	; 0x5c
   11768:	ldr	r9, [sp, #84]	; 0x54
   1176c:	mov	fp, #0
   11770:	movw	r3, #30304	; 0x7660
   11774:	movt	r3, #1
   11778:	str	r3, [sp, #52]	; 0x34
   1177c:	b	11c3c <__assert_fail@plt+0xd28>
   11780:	ldr	r7, [sp, #88]	; 0x58
   11784:	ldrb	r3, [r7, fp]
   11788:	str	r3, [sp, #40]	; 0x28
   1178c:	cmp	r3, #0
   11790:	bne	11c60 <__assert_fail@plt+0xd4c>
   11794:	add	r6, fp, #1
   11798:	ldrb	r3, [sl, r6]
   1179c:	str	r3, [sp, #44]	; 0x2c
   117a0:	cmp	r3, #58	; 0x3a
   117a4:	beq	11830 <__assert_fail@plt+0x91c>
   117a8:	ldr	r3, [sp, #44]	; 0x2c
   117ac:	cmp	r3, #61	; 0x3d
   117b0:	beq	11860 <__assert_fail@plt+0x94c>
   117b4:	ldrb	r3, [sl, r5]
   117b8:	cmp	r3, #42	; 0x2a
   117bc:	bne	11c60 <__assert_fail@plt+0xd4c>
   117c0:	ldrb	r3, [r7, r5]
   117c4:	cmp	r3, #0
   117c8:	bne	11c60 <__assert_fail@plt+0xd4c>
   117cc:	add	r3, fp, #3
   117d0:	ldr	r2, [sp, #32]
   117d4:	cmp	r2, r3
   117d8:	bls	11c60 <__assert_fail@plt+0xd4c>
   117dc:	add	r2, r7, r3
   117e0:	ldrb	r1, [r7, r3]
   117e4:	cmp	r1, #0
   117e8:	bne	11c60 <__assert_fail@plt+0xd4c>
   117ec:	add	r8, sl, r3
   117f0:	ldrb	r0, [sl, r3]
   117f4:	cmp	r0, #93	; 0x5d
   117f8:	movne	r1, r8
   117fc:	beq	11b70 <__assert_fail@plt+0xc5c>
   11800:	add	r4, r3, #1
   11804:	ldr	ip, [sp, #32]
   11808:	cmp	ip, r4
   1180c:	bls	11c60 <__assert_fail@plt+0xd4c>
   11810:	ldrb	ip, [r2, #1]!
   11814:	cmp	ip, #0
   11818:	bne	11c60 <__assert_fail@plt+0xd4c>
   1181c:	ldrb	ip, [r1, #1]!
   11820:	cmp	ip, #93	; 0x5d
   11824:	beq	11af4 <__assert_fail@plt+0xbe0>
   11828:	mov	r3, r4
   1182c:	b	11800 <__assert_fail@plt+0x8ec>
   11830:	ldrb	r3, [r7, r6]
   11834:	cmp	r3, #0
   11838:	bne	117b4 <__assert_fail@plt+0x8a0>
   1183c:	ldrb	r1, [r9, r6]
   11840:	ldr	r3, [sp, #32]
   11844:	sub	r0, r3, #1
   11848:	cmp	r5, r0
   1184c:	bcs	117b4 <__assert_fail@plt+0x8a0>
   11850:	add	r2, sl, r5
   11854:	add	r3, r7, r5
   11858:	mov	r4, r5
   1185c:	b	11880 <__assert_fail@plt+0x96c>
   11860:	ldrb	r3, [r7, r6]
   11864:	cmp	r3, #0
   11868:	bne	117b4 <__assert_fail@plt+0x8a0>
   1186c:	b	1183c <__assert_fail@plt+0x928>
   11870:	add	r4, r4, #1
   11874:	add	r3, r3, #1
   11878:	cmp	r4, r0
   1187c:	bcs	117b4 <__assert_fail@plt+0x8a0>
   11880:	ldrb	ip, [r2], #1
   11884:	cmp	r1, ip
   11888:	bne	11870 <__assert_fail@plt+0x95c>
   1188c:	ldrb	ip, [r2]
   11890:	cmp	ip, #93	; 0x5d
   11894:	bne	11870 <__assert_fail@plt+0x95c>
   11898:	ldrb	ip, [r3]
   1189c:	cmp	ip, #0
   118a0:	bne	11870 <__assert_fail@plt+0x95c>
   118a4:	ldrb	ip, [r3, #1]
   118a8:	cmp	ip, #0
   118ac:	bne	11870 <__assert_fail@plt+0x95c>
   118b0:	sub	r3, r4, fp
   118b4:	add	r2, r9, r5
   118b8:	str	r2, [sp, #48]	; 0x30
   118bc:	subs	r3, r3, #2
   118c0:	str	r3, [sp, #36]	; 0x24
   118c4:	beq	11934 <__assert_fail@plt+0xa20>
   118c8:	cmp	r1, #58	; 0x3a
   118cc:	beq	11968 <__assert_fail@plt+0xa54>
   118d0:	ldr	r3, [sp, #36]	; 0x24
   118d4:	cmp	r3, #1
   118d8:	beq	11a98 <__assert_fail@plt+0xb84>
   118dc:	mov	r1, r5
   118e0:	add	r0, sp, #84	; 0x54
   118e4:	bl	11010 <__assert_fail@plt+0xfc>
   118e8:	cmp	r0, #0
   118ec:	bne	117b4 <__assert_fail@plt+0x8a0>
   118f0:	ldr	r1, [sp, #36]	; 0x24
   118f4:	ldr	r0, [sp, #48]	; 0x30
   118f8:	bl	113f0 <__assert_fail@plt+0x4dc>
   118fc:	mov	r4, r0
   11900:	mov	r2, #5
   11904:	movw	r1, #31032	; 0x7938
   11908:	movt	r1, #1
   1190c:	mov	r0, #0
   11910:	bl	10d58 <dcgettext@plt>
   11914:	mov	r3, r4
   11918:	mov	r2, r0
   1191c:	mov	r1, #0
   11920:	mov	r0, r1
   11924:	bl	10dc4 <error@plt>
   11928:	mov	r0, r4
   1192c:	bl	13b34 <__assert_fail@plt+0x2c20>
   11930:	b	11cd4 <__assert_fail@plt+0xdc0>
   11934:	cmp	r1, #58	; 0x3a
   11938:	mov	r2, #5
   1193c:	movweq	r1, #30924	; 0x78cc
   11940:	movteq	r1, #1
   11944:	movwne	r1, #30960	; 0x78f0
   11948:	movtne	r1, #1
   1194c:	mov	r0, #0
   11950:	bl	10d58 <dcgettext@plt>
   11954:	mov	r2, r0
   11958:	mov	r1, #0
   1195c:	mov	r0, r1
   11960:	bl	10dc4 <error@plt>
   11964:	b	11cd4 <__assert_fail@plt+0xdc0>
   11968:	ldr	r3, [sp, #52]	; 0x34
   1196c:	add	r3, r3, #44	; 0x2c
   11970:	mov	r8, #0
   11974:	str	sl, [sp, #56]	; 0x38
   11978:	str	r4, [sp, #60]	; 0x3c
   1197c:	mov	sl, r3
   11980:	b	11990 <__assert_fail@plt+0xa7c>
   11984:	add	r8, r8, #1
   11988:	cmp	r8, #11
   1198c:	bhi	11a14 <__assert_fail@plt+0xb00>
   11990:	ldr	r4, [sl], #4
   11994:	ldr	r2, [sp, #36]	; 0x24
   11998:	mov	r1, r4
   1199c:	ldr	r0, [sp, #48]	; 0x30
   119a0:	bl	10ef0 <strncmp@plt>
   119a4:	cmp	r0, #0
   119a8:	bne	11984 <__assert_fail@plt+0xa70>
   119ac:	mov	r0, r4
   119b0:	bl	10e3c <strlen@plt>
   119b4:	ldr	r3, [sp, #36]	; 0x24
   119b8:	cmp	r3, r0
   119bc:	bne	11984 <__assert_fail@plt+0xa70>
   119c0:	ldr	sl, [sp, #56]	; 0x38
   119c4:	ldr	r4, [sp, #60]	; 0x3c
   119c8:	movw	r3, #9999	; 0x270f
   119cc:	cmp	r8, r3
   119d0:	beq	11a18 <__assert_fail@plt+0xb04>
   119d4:	mov	r0, #24
   119d8:	bl	164fc <__assert_fail@plt+0x55e8>
   119dc:	mov	r3, #0
   119e0:	str	r3, [r0, #4]
   119e4:	mov	r3, #2
   119e8:	str	r3, [r0]
   119ec:	str	r8, [r0, #8]
   119f0:	ldr	r3, [sp, #28]
   119f4:	ldr	r3, [r3, #4]
   119f8:	cmp	r3, #0
   119fc:	beq	11a7c <__assert_fail@plt+0xb68>
   11a00:	str	r0, [r3, #4]
   11a04:	ldr	r3, [sp, #28]
   11a08:	str	r0, [r3, #4]
   11a0c:	add	r4, r4, #2
   11a10:	b	11c38 <__assert_fail@plt+0xd24>
   11a14:	ldr	sl, [sp, #56]	; 0x38
   11a18:	mov	r1, r5
   11a1c:	add	r0, sp, #84	; 0x54
   11a20:	bl	11010 <__assert_fail@plt+0xfc>
   11a24:	cmp	r0, #0
   11a28:	bne	117b4 <__assert_fail@plt+0x8a0>
   11a2c:	ldr	r1, [sp, #36]	; 0x24
   11a30:	ldr	r0, [sp, #48]	; 0x30
   11a34:	bl	113f0 <__assert_fail@plt+0x4dc>
   11a38:	mov	r4, r0
   11a3c:	mov	r2, #5
   11a40:	movw	r1, #31004	; 0x791c
   11a44:	movt	r1, #1
   11a48:	mov	r0, #0
   11a4c:	bl	10d58 <dcgettext@plt>
   11a50:	mov	r5, r0
   11a54:	mov	r0, r4
   11a58:	bl	15e90 <__assert_fail@plt+0x4f7c>
   11a5c:	mov	r3, r0
   11a60:	mov	r2, r5
   11a64:	mov	r1, #0
   11a68:	mov	r0, r1
   11a6c:	bl	10dc4 <error@plt>
   11a70:	mov	r0, r4
   11a74:	bl	13b34 <__assert_fail@plt+0x2c20>
   11a78:	b	11cd4 <__assert_fail@plt+0xdc0>
   11a7c:	ldr	r3, [pc, #736]	; 11d64 <__assert_fail@plt+0xe50>
   11a80:	movw	r2, #701	; 0x2bd
   11a84:	movw	r1, #30692	; 0x77e4
   11a88:	movt	r1, #1
   11a8c:	movw	r0, #30704	; 0x77f0
   11a90:	movt	r0, #1
   11a94:	bl	10f14 <__assert_fail@plt>
   11a98:	mov	r0, #24
   11a9c:	bl	164fc <__assert_fail@plt+0x55e8>
   11aa0:	mov	r3, #0
   11aa4:	str	r3, [r0, #4]
   11aa8:	mov	r3, #3
   11aac:	str	r3, [r0]
   11ab0:	ldrb	r3, [r9, r5]
   11ab4:	strb	r3, [r0, #8]
   11ab8:	ldr	r3, [sp, #28]
   11abc:	ldr	r3, [r3, #4]
   11ac0:	cmp	r3, #0
   11ac4:	beq	11ad8 <__assert_fail@plt+0xbc4>
   11ac8:	str	r0, [r3, #4]
   11acc:	ldr	r3, [sp, #28]
   11ad0:	str	r0, [r3, #4]
   11ad4:	b	11a0c <__assert_fail@plt+0xaf8>
   11ad8:	ldr	r3, [pc, #648]	; 11d68 <__assert_fail@plt+0xe54>
   11adc:	movw	r2, #743	; 0x2e7
   11ae0:	movw	r1, #30692	; 0x77e4
   11ae4:	movt	r1, #1
   11ae8:	movw	r0, #30704	; 0x77f0
   11aec:	movt	r0, #1
   11af0:	bl	10f14 <__assert_fail@plt>
   11af4:	mvn	r6, r6
   11af8:	adds	r6, r6, r3
   11afc:	beq	11b6c <__assert_fail@plt+0xc58>
   11b00:	cmp	r0, #48	; 0x30
   11b04:	mov	r3, #0
   11b08:	str	r3, [sp]
   11b0c:	add	r3, sp, #72	; 0x48
   11b10:	moveq	r2, #8
   11b14:	movne	r2, #10
   11b18:	add	r1, sp, #68	; 0x44
   11b1c:	mov	r0, r8
   11b20:	bl	16af8 <__assert_fail@plt+0x5be4>
   11b24:	cmp	r0, #0
   11b28:	bne	11b84 <__assert_fail@plt+0xc70>
   11b2c:	ldrd	r2, [sp, #72]	; 0x48
   11b30:	mvn	r0, #0
   11b34:	mvn	r1, #0
   11b38:	cmp	r3, r1
   11b3c:	cmpeq	r2, r0
   11b40:	beq	11b84 <__assert_fail@plt+0xc70>
   11b44:	add	r3, r8, r6
   11b48:	ldr	r2, [sp, #68]	; 0x44
   11b4c:	cmp	r2, r3
   11b50:	bne	11b84 <__assert_fail@plt+0xc70>
   11b54:	ldrd	r2, [sp, #72]	; 0x48
   11b58:	ldr	r1, [sp, #44]	; 0x2c
   11b5c:	ldr	r0, [sp, #28]
   11b60:	bl	11284 <__assert_fail@plt+0x370>
   11b64:	add	r4, r4, #1
   11b68:	b	11c38 <__assert_fail@plt+0xd24>
   11b6c:	mov	r3, r4
   11b70:	mov	r0, #0
   11b74:	mov	r1, #0
   11b78:	strd	r0, [sp, #72]	; 0x48
   11b7c:	mov	r4, r3
   11b80:	b	11b54 <__assert_fail@plt+0xc40>
   11b84:	mov	r1, r6
   11b88:	mov	r0, r8
   11b8c:	bl	113f0 <__assert_fail@plt+0x4dc>
   11b90:	mov	r4, r0
   11b94:	mov	r2, #5
   11b98:	movw	r1, #31092	; 0x7974
   11b9c:	movt	r1, #1
   11ba0:	mov	r0, #0
   11ba4:	bl	10d58 <dcgettext@plt>
   11ba8:	mov	r5, r0
   11bac:	mov	r0, r4
   11bb0:	bl	15e90 <__assert_fail@plt+0x4f7c>
   11bb4:	mov	r3, r0
   11bb8:	mov	r2, r5
   11bbc:	mov	r1, #0
   11bc0:	mov	r0, r1
   11bc4:	bl	10dc4 <error@plt>
   11bc8:	mov	r0, r4
   11bcc:	bl	13b34 <__assert_fail@plt+0x2c20>
   11bd0:	b	11cd4 <__assert_fail@plt+0xdc0>
   11bd4:	ldr	r3, [sp, #88]	; 0x58
   11bd8:	ldrb	r3, [r3, r4]
   11bdc:	str	r3, [sp, #40]	; 0x28
   11be0:	cmp	r3, #0
   11be4:	bne	11c70 <__assert_fail@plt+0xd5c>
   11be8:	ldrb	r4, [r9, fp]
   11bec:	ldrb	r5, [r9, r5]
   11bf0:	cmp	r4, r5
   11bf4:	bhi	11c80 <__assert_fail@plt+0xd6c>
   11bf8:	mov	r0, #24
   11bfc:	bl	164fc <__assert_fail@plt+0x55e8>
   11c00:	mov	r3, #0
   11c04:	str	r3, [r0, #4]
   11c08:	mov	r3, #1
   11c0c:	str	r3, [r0]
   11c10:	strb	r4, [r0, #8]
   11c14:	strb	r5, [r0, #9]
   11c18:	ldr	r3, [sp, #28]
   11c1c:	ldr	r3, [r3, #4]
   11c20:	cmp	r3, #0
   11c24:	beq	11d04 <__assert_fail@plt+0xdf0>
   11c28:	str	r0, [r3, #4]
   11c2c:	ldr	r3, [sp, #28]
   11c30:	str	r0, [r3, #4]
   11c34:	add	r4, fp, #3
   11c38:	mov	fp, r4
   11c3c:	add	r5, fp, #2
   11c40:	ldr	r3, [sp, #92]	; 0x5c
   11c44:	str	r3, [sp, #32]
   11c48:	cmp	r5, r3
   11c4c:	bcs	11d20 <__assert_fail@plt+0xe0c>
   11c50:	ldr	sl, [sp, #84]	; 0x54
   11c54:	ldrb	r3, [sl, fp]
   11c58:	cmp	r3, #91	; 0x5b
   11c5c:	beq	11780 <__assert_fail@plt+0x86c>
   11c60:	add	r4, fp, #1
   11c64:	ldrb	r3, [sl, r4]
   11c68:	cmp	r3, #45	; 0x2d
   11c6c:	beq	11bd4 <__assert_fail@plt+0xcc0>
   11c70:	ldrb	r1, [r9, fp]
   11c74:	ldr	r0, [sp, #28]
   11c78:	bl	1130c <__assert_fail@plt+0x3f8>
   11c7c:	b	11c38 <__assert_fail@plt+0xd24>
   11c80:	mov	r0, r4
   11c84:	bl	1137c <__assert_fail@plt+0x468>
   11c88:	mov	r6, r0
   11c8c:	mov	r0, r5
   11c90:	bl	1137c <__assert_fail@plt+0x468>
   11c94:	mov	r4, r0
   11c98:	mov	r2, #5
   11c9c:	movw	r1, #31136	; 0x79a0
   11ca0:	movt	r1, #1
   11ca4:	mov	r0, #0
   11ca8:	bl	10d58 <dcgettext@plt>
   11cac:	str	r4, [sp]
   11cb0:	mov	r3, r6
   11cb4:	mov	r2, r0
   11cb8:	mov	r1, #0
   11cbc:	mov	r0, r1
   11cc0:	bl	10dc4 <error@plt>
   11cc4:	mov	r0, r6
   11cc8:	bl	13b34 <__assert_fail@plt+0x2c20>
   11ccc:	mov	r0, r4
   11cd0:	bl	13b34 <__assert_fail@plt+0x2c20>
   11cd4:	ldr	r0, [sp, #84]	; 0x54
   11cd8:	bl	13b34 <__assert_fail@plt+0x2c20>
   11cdc:	ldr	r0, [sp, #88]	; 0x58
   11ce0:	bl	13b34 <__assert_fail@plt+0x2c20>
   11ce4:	ldr	r0, [sp, #40]	; 0x28
   11ce8:	add	sp, sp, #100	; 0x64
   11cec:	ldrd	r4, [sp]
   11cf0:	ldrd	r6, [sp, #8]
   11cf4:	ldrd	r8, [sp, #16]
   11cf8:	ldrd	sl, [sp, #24]
   11cfc:	add	sp, sp, #32
   11d00:	pop	{pc}		; (ldr pc, [sp], #4)
   11d04:	ldr	r3, [pc, #96]	; 11d6c <__assert_fail@plt+0xe58>
   11d08:	movw	r2, #679	; 0x2a7
   11d0c:	movw	r1, #30692	; 0x77e4
   11d10:	movt	r1, #1
   11d14:	movw	r0, #30704	; 0x77f0
   11d18:	movt	r0, #1
   11d1c:	bl	10f14 <__assert_fail@plt>
   11d20:	cmp	fp, r3
   11d24:	bcs	11d58 <__assert_fail@plt+0xe44>
   11d28:	sub	r4, fp, #1
   11d2c:	add	r4, r9, r4
   11d30:	sub	r5, r9, #1
   11d34:	add	r5, r5, r3
   11d38:	ldrb	r1, [r4, #1]!
   11d3c:	ldr	r0, [sp, #28]
   11d40:	bl	1130c <__assert_fail@plt+0x3f8>
   11d44:	cmp	r5, r4
   11d48:	bne	11d38 <__assert_fail@plt+0xe24>
   11d4c:	mov	r3, #1
   11d50:	str	r3, [sp, #40]	; 0x28
   11d54:	b	11cd4 <__assert_fail@plt+0xdc0>
   11d58:	mov	r3, #1
   11d5c:	str	r3, [sp, #40]	; 0x28
   11d60:	b	11cd4 <__assert_fail@plt+0xdc0>
   11d64:			; <UNDEFINED> instruction: 0x000176bc
   11d68:	ldrdeq	r7, [r1], -r0
   11d6c:	andeq	r7, r1, r4, ror #13
   11d70:	str	r4, [sp, #-8]!
   11d74:	str	lr, [sp, #4]
   11d78:	mov	r4, r1
   11d7c:	cmp	r0, #11
   11d80:	ldrls	pc, [pc, r0, lsl #2]
   11d84:	b	11ee8 <__assert_fail@plt+0xfd4>
   11d88:			; <UNDEFINED> instruction: 0x00011db8
   11d8c:	andeq	r1, r1, r0, ror #27
   11d90:	strdeq	r1, [r1], -r8
   11d94:	andeq	r1, r1, r0, lsl lr
   11d98:	andeq	r1, r1, r8, lsr #28
   11d9c:	andeq	r1, r1, r0, asr #28
   11da0:	andeq	r1, r1, r8, asr lr
   11da4:	andeq	r1, r1, r0, ror lr
   11da8:	andeq	r1, r1, r8, lsl #29
   11dac:	andeq	r1, r1, r0, lsr #29
   11db0:			; <UNDEFINED> instruction: 0x00011eb8
   11db4:	ldrdeq	r1, [r1], -r0
   11db8:	bl	10e24 <__ctype_b_loc@plt>
   11dbc:	ldr	r3, [r0]
   11dc0:	lsl	r4, r4, #1
   11dc4:	ldrh	r0, [r3, r4]
   11dc8:	and	r0, r0, #8
   11dcc:	adds	r0, r0, #0
   11dd0:	movne	r0, #1
   11dd4:	ldr	r4, [sp]
   11dd8:	add	sp, sp, #4
   11ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   11de0:	bl	10e24 <__ctype_b_loc@plt>
   11de4:	ldr	r3, [r0]
   11de8:	lsl	r4, r4, #1
   11dec:	ldrh	r0, [r3, r4]
   11df0:	and	r0, r0, #1024	; 0x400
   11df4:	b	11dcc <__assert_fail@plt+0xeb8>
   11df8:	bl	10e24 <__ctype_b_loc@plt>
   11dfc:	ldr	r3, [r0]
   11e00:	lsl	r4, r4, #1
   11e04:	ldrh	r0, [r3, r4]
   11e08:	and	r0, r0, #1
   11e0c:	b	11dcc <__assert_fail@plt+0xeb8>
   11e10:	bl	10e24 <__ctype_b_loc@plt>
   11e14:	ldr	r3, [r0]
   11e18:	lsl	r4, r4, #1
   11e1c:	ldrh	r0, [r3, r4]
   11e20:	and	r0, r0, #2
   11e24:	b	11dcc <__assert_fail@plt+0xeb8>
   11e28:	bl	10e24 <__ctype_b_loc@plt>
   11e2c:	ldr	r3, [r0]
   11e30:	lsl	r4, r4, #1
   11e34:	ldrh	r0, [r3, r4]
   11e38:	and	r0, r0, #2048	; 0x800
   11e3c:	b	11dcc <__assert_fail@plt+0xeb8>
   11e40:	bl	10e24 <__ctype_b_loc@plt>
   11e44:	ldr	r3, [r0]
   11e48:	lsl	r4, r4, #1
   11e4c:	ldrh	r0, [r3, r4]
   11e50:	and	r0, r0, #32768	; 0x8000
   11e54:	b	11dcc <__assert_fail@plt+0xeb8>
   11e58:	bl	10e24 <__ctype_b_loc@plt>
   11e5c:	ldr	r3, [r0]
   11e60:	lsl	r4, r4, #1
   11e64:	ldrh	r0, [r3, r4]
   11e68:	and	r0, r0, #512	; 0x200
   11e6c:	b	11dcc <__assert_fail@plt+0xeb8>
   11e70:	bl	10e24 <__ctype_b_loc@plt>
   11e74:	ldr	r3, [r0]
   11e78:	lsl	r4, r4, #1
   11e7c:	ldrh	r0, [r3, r4]
   11e80:	and	r0, r0, #16384	; 0x4000
   11e84:	b	11dcc <__assert_fail@plt+0xeb8>
   11e88:	bl	10e24 <__ctype_b_loc@plt>
   11e8c:	ldr	r3, [r0]
   11e90:	lsl	r4, r4, #1
   11e94:	ldrh	r0, [r3, r4]
   11e98:	and	r0, r0, #4
   11e9c:	b	11dcc <__assert_fail@plt+0xeb8>
   11ea0:	bl	10e24 <__ctype_b_loc@plt>
   11ea4:	ldr	r3, [r0]
   11ea8:	lsl	r4, r4, #1
   11eac:	ldrh	r0, [r3, r4]
   11eb0:	and	r0, r0, #8192	; 0x2000
   11eb4:	b	11dcc <__assert_fail@plt+0xeb8>
   11eb8:	bl	10e24 <__ctype_b_loc@plt>
   11ebc:	ldr	r3, [r0]
   11ec0:	lsl	r4, r4, #1
   11ec4:	ldrh	r0, [r3, r4]
   11ec8:	and	r0, r0, #256	; 0x100
   11ecc:	b	11dcc <__assert_fail@plt+0xeb8>
   11ed0:	bl	10e24 <__ctype_b_loc@plt>
   11ed4:	ldr	r3, [r0]
   11ed8:	lsl	r4, r4, #1
   11edc:	ldrh	r0, [r3, r4]
   11ee0:	and	r0, r0, #4096	; 0x1000
   11ee4:	b	11dcc <__assert_fail@plt+0xeb8>
   11ee8:	bl	10efc <abort@plt>
   11eec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ef0:	strd	r6, [sp, #8]
   11ef4:	strd	r8, [sp, #16]
   11ef8:	strd	sl, [sp, #24]
   11efc:	str	lr, [sp, #32]
   11f00:	sub	sp, sp, #20
   11f04:	mov	fp, r0
   11f08:	mov	r3, #0
   11f0c:	str	r3, [r0, #24]
   11f10:	strb	r3, [r0, #32]
   11f14:	strb	r3, [r0, #34]	; 0x22
   11f18:	strb	r3, [r0, #33]	; 0x21
   11f1c:	ldr	r3, [r0]
   11f20:	ldr	sl, [r3, #4]
   11f24:	cmp	sl, #0
   11f28:	beq	12130 <__assert_fail@plt+0x121c>
   11f2c:	mov	r2, #0
   11f30:	mov	r3, #0
   11f34:	mov	r6, r2
   11f38:	mov	r7, r3
   11f3c:	str	r0, [sp]
   11f40:	b	120c4 <__assert_fail@plt+0x11b0>
   11f44:	ldrb	r3, [sl, #9]
   11f48:	ldrb	r4, [sl, #8]
   11f4c:	cmp	r3, r4
   11f50:	bcc	11f64 <__assert_fail@plt+0x1050>
   11f54:	sub	r4, r3, r4
   11f58:	add	r4, r4, #1
   11f5c:	asr	r5, r4, #31
   11f60:	b	12080 <__assert_fail@plt+0x116c>
   11f64:	ldr	r3, [pc, #464]	; 1213c <__assert_fail@plt+0x1228>
   11f68:	movw	r2, #1265	; 0x4f1
   11f6c:	movw	r1, #30692	; 0x77e4
   11f70:	movt	r1, #1
   11f74:	movw	r0, #31204	; 0x79e4
   11f78:	movt	r0, #1
   11f7c:	bl	10f14 <__assert_fail@plt>
   11f80:	ldr	r3, [sp]
   11f84:	mov	r2, #1
   11f88:	strb	r2, [r3, #33]	; 0x21
   11f8c:	ldr	r3, [sl, #8]
   11f90:	str	r3, [sp, #4]
   11f94:	mov	fp, #0
   11f98:	mov	r4, #0
   11f9c:	mov	r5, #0
   11fa0:	strd	r6, [sp, #8]
   11fa4:	mov	r7, sl
   11fa8:	mov	sl, r3
   11fac:	b	11fbc <__assert_fail@plt+0x10a8>
   11fb0:	add	fp, fp, #1
   11fb4:	cmp	fp, #256	; 0x100
   11fb8:	beq	11fdc <__assert_fail@plt+0x10c8>
   11fbc:	uxtb	r1, fp
   11fc0:	mov	r0, sl
   11fc4:	bl	11d70 <__assert_fail@plt+0xe5c>
   11fc8:	cmp	r0, #0
   11fcc:	beq	11fb0 <__assert_fail@plt+0x109c>
   11fd0:	adds	r4, r4, #1
   11fd4:	adc	r5, r5, #0
   11fd8:	b	11fb0 <__assert_fail@plt+0x109c>
   11fdc:	mov	sl, r7
   11fe0:	ldrd	r6, [sp, #8]
   11fe4:	ldr	r3, [sp, #4]
   11fe8:	cmp	r3, #6
   11fec:	beq	12080 <__assert_fail@plt+0x116c>
   11ff0:	cmp	r3, #10
   11ff4:	beq	12080 <__assert_fail@plt+0x116c>
   11ff8:	ldr	r3, [sp]
   11ffc:	mov	r2, #1
   12000:	strb	r2, [r3, #34]	; 0x22
   12004:	b	12080 <__assert_fail@plt+0x116c>
   12008:	ldrb	r1, [sl, #8]
   1200c:	mov	r3, #0
   12010:	mov	r4, #0
   12014:	mov	r5, #0
   12018:	b	12028 <__assert_fail@plt+0x1114>
   1201c:	add	r3, r3, #1
   12020:	cmp	r3, #256	; 0x100
   12024:	beq	12040 <__assert_fail@plt+0x112c>
   12028:	uxtb	r2, r3
   1202c:	cmp	r1, r2
   12030:	bne	1201c <__assert_fail@plt+0x1108>
   12034:	adds	r4, r4, #1
   12038:	adc	r5, r5, #0
   1203c:	b	1201c <__assert_fail@plt+0x1108>
   12040:	ldr	r3, [sp]
   12044:	mov	r2, #1
   12048:	strb	r2, [r3, #32]
   1204c:	b	12080 <__assert_fail@plt+0x116c>
   12050:	ldrd	r4, [sl, #16]
   12054:	orrs	r3, r4, r5
   12058:	bne	12080 <__assert_fail@plt+0x116c>
   1205c:	ldr	r2, [sp]
   12060:	str	sl, [r2, #28]
   12064:	ldr	r3, [r2, #24]
   12068:	add	r3, r3, #1
   1206c:	str	r3, [r2, #24]
   12070:	b	12080 <__assert_fail@plt+0x116c>
   12074:	bl	10efc <abort@plt>
   12078:	mov	r4, #1
   1207c:	mov	r5, #0
   12080:	adds	r8, r4, r6
   12084:	adc	r9, r5, r7
   12088:	cmp	r9, r7
   1208c:	cmpeq	r8, r6
   12090:	movcc	r2, #1
   12094:	movcs	r2, #0
   12098:	and	r3, r8, r9
   1209c:	cmn	r3, #1
   120a0:	movne	r3, #0
   120a4:	moveq	r3, #1
   120a8:	orrs	r3, r2, r3
   120ac:	bne	120e8 <__assert_fail@plt+0x11d4>
   120b0:	ldr	sl, [sl, #4]
   120b4:	mov	r6, r8
   120b8:	mov	r7, r9
   120bc:	cmp	sl, #0
   120c0:	beq	1210c <__assert_fail@plt+0x11f8>
   120c4:	ldr	r3, [sl]
   120c8:	cmp	r3, #4
   120cc:	ldrls	pc, [pc, r3, lsl #2]
   120d0:	b	12074 <__assert_fail@plt+0x1160>
   120d4:	andeq	r2, r1, r8, ror r0
   120d8:	andeq	r1, r1, r4, asr #30
   120dc:	andeq	r1, r1, r0, lsl #31
   120e0:	andeq	r2, r1, r8
   120e4:	andeq	r2, r1, r0, asr r0
   120e8:	mov	r2, #5
   120ec:	movw	r1, #31252	; 0x7a14
   120f0:	movt	r1, #1
   120f4:	mov	r0, #0
   120f8:	bl	10d58 <dcgettext@plt>
   120fc:	mov	r2, r0
   12100:	mov	r1, #0
   12104:	mov	r0, #1
   12108:	bl	10dc4 <error@plt>
   1210c:	ldr	fp, [sp]
   12110:	strd	r8, [fp, #16]
   12114:	add	sp, sp, #20
   12118:	ldrd	r4, [sp]
   1211c:	ldrd	r6, [sp, #8]
   12120:	ldrd	r8, [sp, #16]
   12124:	ldrd	sl, [sp, #24]
   12128:	add	sp, sp, #32
   1212c:	pop	{pc}		; (ldr pc, [sp], #4)
   12130:	mov	r8, #0
   12134:	mov	r9, #0
   12138:	b	12110 <__assert_fail@plt+0x11fc>
   1213c:	strdeq	r7, [r1], -r4
   12140:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12144:	strd	r6, [sp, #8]
   12148:	strd	r8, [sp, #16]
   1214c:	strd	sl, [sp, #24]
   12150:	str	lr, [sp, #32]
   12154:	sub	sp, sp, #4
   12158:	cmp	r1, #0
   1215c:	movne	r3, #2
   12160:	strne	r3, [r1]
   12164:	ldrd	r2, [r0, #8]
   12168:	mvn	r4, #1
   1216c:	mvn	r5, #0
   12170:	cmp	r3, r5
   12174:	cmpeq	r2, r4
   12178:	beq	121b0 <__assert_fail@plt+0x129c>
   1217c:	ldr	r5, [r0, #4]
   12180:	cmp	r5, #0
   12184:	beq	1244c <__assert_fail@plt+0x1538>
   12188:	mov	r4, r0
   1218c:	ldr	r3, [r5]
   12190:	cmp	r3, #4
   12194:	ldrls	pc, [pc, r3, lsl #2]
   12198:	b	12448 <__assert_fail@plt+0x1534>
   1219c:	andeq	r2, r1, ip, asr #3
   121a0:	andeq	r2, r1, r4, lsl #4
   121a4:	andeq	r2, r1, r4, ror #4
   121a8:	muleq	r1, r8, r3
   121ac:			; <UNDEFINED> instruction: 0x000123b4
   121b0:	ldr	r3, [r0]
   121b4:	ldr	r3, [r3, #4]
   121b8:	str	r3, [r0, #4]
   121bc:	mvn	r2, #0
   121c0:	mvn	r3, #0
   121c4:	strd	r2, [r0, #8]
   121c8:	b	1217c <__assert_fail@plt+0x1268>
   121cc:	ldrb	r6, [r5, #8]
   121d0:	mvn	r2, #0
   121d4:	mvn	r3, #0
   121d8:	strd	r2, [r0, #8]
   121dc:	ldr	r3, [r5, #4]
   121e0:	str	r3, [r0, #4]
   121e4:	mov	r0, r6
   121e8:	add	sp, sp, #4
   121ec:	ldrd	r4, [sp]
   121f0:	ldrd	r6, [sp, #8]
   121f4:	ldrd	r8, [sp, #16]
   121f8:	ldrd	sl, [sp, #24]
   121fc:	add	sp, sp, #32
   12200:	pop	{pc}		; (ldr pc, [sp], #4)
   12204:	ldrd	r2, [r0, #8]
   12208:	mvn	r0, #0
   1220c:	mvn	r1, #0
   12210:	cmp	r3, r1
   12214:	cmpeq	r2, r0
   12218:	beq	12258 <__assert_fail@plt+0x1344>
   1221c:	adds	r8, r2, #1
   12220:	adc	r9, r3, #0
   12224:	strd	r8, [r4, #8]
   12228:	mov	r6, r8
   1222c:	ldrb	r2, [r5, #9]
   12230:	mov	r3, #0
   12234:	cmp	r3, r9
   12238:	cmpeq	r2, r8
   1223c:	bne	121e4 <__assert_fail@plt+0x12d0>
   12240:	ldr	r3, [r5, #4]
   12244:	str	r3, [r4, #4]
   12248:	mvn	r2, #0
   1224c:	mvn	r3, #0
   12250:	strd	r2, [r4, #8]
   12254:	b	121e4 <__assert_fail@plt+0x12d0>
   12258:	ldrb	r8, [r5, #8]
   1225c:	mov	r9, #0
   12260:	b	12224 <__assert_fail@plt+0x1310>
   12264:	cmp	r1, #0
   12268:	beq	12284 <__assert_fail@plt+0x1370>
   1226c:	ldr	r3, [r5, #8]
   12270:	cmp	r3, #6
   12274:	beq	12300 <__assert_fail@plt+0x13ec>
   12278:	cmp	r3, #10
   1227c:	moveq	r3, #1
   12280:	streq	r3, [r1]
   12284:	ldrd	r2, [r4, #8]
   12288:	mvn	r0, #0
   1228c:	mvn	r1, #0
   12290:	cmp	r3, r1
   12294:	cmpeq	r2, r0
   12298:	beq	1230c <__assert_fail@plt+0x13f8>
   1229c:	ldr	r8, [r5, #8]
   122a0:	ldr	r7, [r4, #8]
   122a4:	uxtb	r1, r7
   122a8:	mov	r0, r8
   122ac:	bl	11d70 <__assert_fail@plt+0xe5c>
   122b0:	cmp	r0, #0
   122b4:	beq	12364 <__assert_fail@plt+0x1450>
   122b8:	mov	r6, r7
   122bc:	add	r7, r7, #1
   122c0:	cmp	r7, #255	; 0xff
   122c4:	bgt	122e8 <__assert_fail@plt+0x13d4>
   122c8:	uxtb	r1, r7
   122cc:	mov	r0, r8
   122d0:	bl	11d70 <__assert_fail@plt+0xe5c>
   122d4:	cmp	r0, #0
   122d8:	bne	12380 <__assert_fail@plt+0x146c>
   122dc:	add	r7, r7, #1
   122e0:	cmp	r7, #256	; 0x100
   122e4:	bne	122c8 <__assert_fail@plt+0x13b4>
   122e8:	ldr	r3, [r5, #4]
   122ec:	str	r3, [r4, #4]
   122f0:	mvn	r2, #0
   122f4:	mvn	r3, #0
   122f8:	strd	r2, [r4, #8]
   122fc:	b	121e4 <__assert_fail@plt+0x12d0>
   12300:	mov	r3, #0
   12304:	str	r3, [r1]
   12308:	b	12284 <__assert_fail@plt+0x1370>
   1230c:	ldr	r7, [r5, #8]
   12310:	mov	r6, #0
   12314:	uxtb	r1, r6
   12318:	mov	r0, r7
   1231c:	bl	11d70 <__assert_fail@plt+0xe5c>
   12320:	cmp	r0, #0
   12324:	bne	12350 <__assert_fail@plt+0x143c>
   12328:	add	r6, r6, #1
   1232c:	cmp	r6, #256	; 0x100
   12330:	bne	12314 <__assert_fail@plt+0x1400>
   12334:	ldr	r3, [pc, #280]	; 12454 <__assert_fail@plt+0x1540>
   12338:	movw	r2, #1079	; 0x437
   1233c:	movw	r1, #30692	; 0x77e4
   12340:	movt	r1, #1
   12344:	movw	r0, #31280	; 0x7a30
   12348:	movt	r0, #1
   1234c:	bl	10f14 <__assert_fail@plt>
   12350:	cmp	r6, #255	; 0xff
   12354:	asrle	r7, r6, #31
   12358:	strdle	r6, [r4, #8]
   1235c:	ble	1229c <__assert_fail@plt+0x1388>
   12360:	b	12334 <__assert_fail@plt+0x1420>
   12364:	ldr	r3, [pc, #232]	; 12454 <__assert_fail@plt+0x1540>
   12368:	movw	r2, #1082	; 0x43a
   1236c:	movw	r1, #30692	; 0x77e4
   12370:	movt	r1, #1
   12374:	movw	r0, #31292	; 0x7a3c
   12378:	movt	r0, #1
   1237c:	bl	10f14 <__assert_fail@plt>
   12380:	cmp	r7, #255	; 0xff
   12384:	bgt	122e8 <__assert_fail@plt+0x13d4>
   12388:	mov	r2, r7
   1238c:	asr	r3, r7, #31
   12390:	strd	r2, [r4, #8]
   12394:	b	121e4 <__assert_fail@plt+0x12d0>
   12398:	ldrb	r6, [r5, #8]
   1239c:	mvn	r2, #0
   123a0:	mvn	r3, #0
   123a4:	strd	r2, [r0, #8]
   123a8:	ldr	r3, [r5, #4]
   123ac:	str	r3, [r0, #4]
   123b0:	b	121e4 <__assert_fail@plt+0x12d0>
   123b4:	ldrd	r2, [r5, #16]
   123b8:	orrs	r3, r2, r3
   123bc:	beq	12418 <__assert_fail@plt+0x1504>
   123c0:	ldrd	r2, [r0, #8]
   123c4:	mvn	r0, #0
   123c8:	mvn	r1, #0
   123cc:	cmp	r3, r1
   123d0:	cmpeq	r2, r0
   123d4:	beq	12438 <__assert_fail@plt+0x1524>
   123d8:	ldr	r3, [r4, #8]
   123dc:	ldr	r2, [r4, #12]
   123e0:	adds	sl, r3, #1
   123e4:	adc	fp, r2, #0
   123e8:	strd	sl, [r4, #8]
   123ec:	ldrb	r6, [r5, #8]
   123f0:	ldrd	r2, [r5, #16]
   123f4:	cmp	fp, r3
   123f8:	cmpeq	sl, r2
   123fc:	bne	121e4 <__assert_fail@plt+0x12d0>
   12400:	ldr	r3, [r5, #4]
   12404:	str	r3, [r4, #4]
   12408:	mvn	r2, #0
   1240c:	mvn	r3, #0
   12410:	strd	r2, [r4, #8]
   12414:	b	121e4 <__assert_fail@plt+0x12d0>
   12418:	ldr	r3, [r5, #4]
   1241c:	str	r3, [r0, #4]
   12420:	mvn	r2, #0
   12424:	mvn	r3, #0
   12428:	strd	r2, [r0, #8]
   1242c:	bl	12140 <__assert_fail@plt+0x122c>
   12430:	mov	r6, r0
   12434:	b	121e4 <__assert_fail@plt+0x12d0>
   12438:	mov	r2, #0
   1243c:	mov	r3, #0
   12440:	strd	r2, [r4, #8]
   12444:	b	123d8 <__assert_fail@plt+0x14c4>
   12448:	bl	10efc <abort@plt>
   1244c:	mvn	r6, #0
   12450:	b	121e4 <__assert_fail@plt+0x12d0>
   12454:	andeq	r7, r1, r4, lsl #14
   12458:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1245c:	strd	r6, [sp, #8]
   12460:	str	r8, [sp, #16]
   12464:	str	lr, [sp, #20]
   12468:	mov	r5, r0
   1246c:	mov	r8, r1
   12470:	mov	r4, r2
   12474:	mvn	r2, #1
   12478:	mvn	r3, #0
   1247c:	strd	r2, [r0, #8]
   12480:	mov	r6, #0
   12484:	mov	r7, #1
   12488:	b	12490 <__assert_fail@plt+0x157c>
   1248c:	strb	r7, [r4, r0]
   12490:	mov	r1, r6
   12494:	mov	r0, r5
   12498:	bl	12140 <__assert_fail@plt+0x122c>
   1249c:	cmn	r0, #1
   124a0:	bne	1248c <__assert_fail@plt+0x1578>
   124a4:	cmp	r8, #0
   124a8:	beq	124c8 <__assert_fail@plt+0x15b4>
   124ac:	sub	r3, r4, #1
   124b0:	add	r1, r4, #255	; 0xff
   124b4:	ldrb	r2, [r3, #1]!
   124b8:	eor	r2, r2, #1
   124bc:	strb	r2, [r3]
   124c0:	cmp	r3, r1
   124c4:	bne	124b4 <__assert_fail@plt+0x15a0>
   124c8:	ldrd	r4, [sp]
   124cc:	ldrd	r6, [sp, #8]
   124d0:	ldr	r8, [sp, #16]
   124d4:	add	sp, sp, #20
   124d8:	pop	{pc}		; (ldr pc, [sp], #4)
   124dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   124e0:	strd	r6, [sp, #8]
   124e4:	strd	r8, [sp, #16]
   124e8:	strd	sl, [sp, #24]
   124ec:	str	lr, [sp, #32]
   124f0:	sub	sp, sp, #12
   124f4:	mov	r5, r0
   124f8:	str	r1, [sp, #4]
   124fc:	mov	r8, r2
   12500:	mov	r4, #0
   12504:	mov	r0, r4
   12508:	mvn	r6, #-2147483648	; 0x80000000
   1250c:	movw	sl, #37212	; 0x915c
   12510:	movt	sl, #2
   12514:	movw	fp, #37204	; 0x9154
   12518:	movt	fp, #2
   1251c:	b	1266c <__assert_fail@plt+0x1758>
   12520:	mov	r0, #0
   12524:	ldrb	r3, [r5, r0]
   12528:	add	r3, sl, r3
   1252c:	ldrb	r3, [r3, #512]	; 0x200
   12530:	cmp	r3, #0
   12534:	movne	r7, r0
   12538:	beq	12558 <__assert_fail@plt+0x1644>
   1253c:	cmp	r7, r4
   12540:	bcc	1257c <__assert_fail@plt+0x1668>
   12544:	subs	r6, r4, r0
   12548:	bne	126a8 <__assert_fail@plt+0x1794>
   1254c:	mov	r0, r7
   12550:	mvn	r6, #-2147483648	; 0x80000000
   12554:	b	1266c <__assert_fail@plt+0x1758>
   12558:	mov	r3, r0
   1255c:	add	r7, r3, #2
   12560:	cmp	r7, r4
   12564:	bcs	125fc <__assert_fail@plt+0x16e8>
   12568:	ldrb	r3, [r5, r7]
   1256c:	add	r3, sl, r3
   12570:	ldrb	r3, [r3, #512]	; 0x200
   12574:	cmp	r3, #0
   12578:	beq	12620 <__assert_fail@plt+0x170c>
   1257c:	ldrb	r2, [r5, r7]
   12580:	mov	r6, r2
   12584:	sub	r3, r7, r0
   12588:	add	r9, r3, #1
   1258c:	cmp	r7, #0
   12590:	beq	125a4 <__assert_fail@plt+0x1690>
   12594:	add	r1, r5, r7
   12598:	ldrb	r1, [r1, #-1]
   1259c:	cmp	r1, r2
   125a0:	moveq	r9, r3
   125a4:	add	r7, r7, #1
   125a8:	cmp	r9, #0
   125ac:	moveq	r0, r7
   125b0:	beq	12694 <__assert_fail@plt+0x1780>
   125b4:	ldr	r3, [fp]
   125b8:	mov	r2, r9
   125bc:	mov	r1, #1
   125c0:	add	r0, r5, r0
   125c4:	bl	10d28 <fwrite_unlocked@plt>
   125c8:	cmp	r9, r0
   125cc:	beq	126a0 <__assert_fail@plt+0x178c>
   125d0:	bl	10e54 <__errno_location@plt>
   125d4:	ldr	r4, [r0]
   125d8:	mov	r2, #5
   125dc:	movw	r1, #31344	; 0x7a70
   125e0:	movt	r1, #1
   125e4:	mov	r0, #0
   125e8:	bl	10d58 <dcgettext@plt>
   125ec:	mov	r2, r0
   125f0:	mov	r1, r4
   125f4:	mov	r0, #1
   125f8:	bl	10dc4 <error@plt>
   125fc:	bne	12544 <__assert_fail@plt+0x1630>
   12600:	add	r3, r3, #1
   12604:	ldrb	r2, [r5, r3]
   12608:	add	r2, sl, r2
   1260c:	ldrb	r2, [r2, #512]	; 0x200
   12610:	cmp	r2, #0
   12614:	movne	r7, r3
   12618:	bne	1253c <__assert_fail@plt+0x1628>
   1261c:	b	12544 <__assert_fail@plt+0x1630>
   12620:	mov	r3, r7
   12624:	b	1255c <__assert_fail@plt+0x1648>
   12628:	sub	r2, r5, #1
   1262c:	add	r2, r2, r4
   12630:	rsb	ip, r5, #1
   12634:	add	r0, ip, r3
   12638:	cmp	r3, r2
   1263c:	beq	1266c <__assert_fail@plt+0x1758>
   12640:	ldrb	r1, [r3, #1]!
   12644:	cmp	r1, r6
   12648:	bne	12668 <__assert_fail@plt+0x1754>
   1264c:	b	12634 <__assert_fail@plt+0x1720>
   12650:	cmn	r6, #-2147483647	; 0x80000001
   12654:	beq	12524 <__assert_fail@plt+0x1610>
   12658:	add	r3, r5, r0
   1265c:	ldrb	r2, [r5, r0]
   12660:	cmp	r6, r2
   12664:	beq	12628 <__assert_fail@plt+0x1714>
   12668:	mvn	r6, #-2147483648	; 0x80000000
   1266c:	cmp	r0, r4
   12670:	bcc	12650 <__assert_fail@plt+0x173c>
   12674:	ldr	r1, [sp, #4]
   12678:	mov	r0, r5
   1267c:	blx	r8
   12680:	subs	r4, r0, #0
   12684:	beq	126d0 <__assert_fail@plt+0x17bc>
   12688:	cmn	r6, #-2147483647	; 0x80000001
   1268c:	movne	r0, #0
   12690:	beq	12520 <__assert_fail@plt+0x160c>
   12694:	cmp	r0, r4
   12698:	bcs	1266c <__assert_fail@plt+0x1758>
   1269c:	b	12658 <__assert_fail@plt+0x1744>
   126a0:	mov	r0, r7
   126a4:	b	12694 <__assert_fail@plt+0x1780>
   126a8:	ldr	r3, [fp]
   126ac:	mov	r2, r6
   126b0:	mov	r1, #1
   126b4:	add	r0, r5, r0
   126b8:	bl	10d28 <fwrite_unlocked@plt>
   126bc:	cmp	r6, r0
   126c0:	bne	125d0 <__assert_fail@plt+0x16bc>
   126c4:	mov	r0, r7
   126c8:	mvn	r6, #-2147483648	; 0x80000000
   126cc:	b	1266c <__assert_fail@plt+0x1758>
   126d0:	add	sp, sp, #12
   126d4:	ldrd	r4, [sp]
   126d8:	ldrd	r6, [sp, #8]
   126dc:	ldrd	r8, [sp, #16]
   126e0:	ldrd	sl, [sp, #24]
   126e4:	add	sp, sp, #32
   126e8:	pop	{pc}		; (ldr pc, [sp], #4)
   126ec:	push	{lr}		; (str lr, [sp, #-4]!)
   126f0:	sub	sp, sp, #60	; 0x3c
   126f4:	subs	r5, r0, #0
   126f8:	beq	12740 <__assert_fail@plt+0x182c>
   126fc:	movw	r3, #37192	; 0x9148
   12700:	movt	r3, #2
   12704:	ldr	r4, [r3]
   12708:	mov	r2, #5
   1270c:	movw	r1, #31360	; 0x7a80
   12710:	movt	r1, #1
   12714:	mov	r0, #0
   12718:	bl	10d58 <dcgettext@plt>
   1271c:	movw	r3, #46188	; 0xb46c
   12720:	movt	r3, #2
   12724:	ldr	r3, [r3]
   12728:	mov	r2, r0
   1272c:	mov	r1, #1
   12730:	mov	r0, r4
   12734:	bl	10e9c <__fprintf_chk@plt>
   12738:	mov	r0, r5
   1273c:	bl	10e30 <exit@plt>
   12740:	mov	r2, #5
   12744:	movw	r1, #31400	; 0x7aa8
   12748:	movt	r1, #1
   1274c:	mov	r0, #0
   12750:	bl	10d58 <dcgettext@plt>
   12754:	movw	r3, #46188	; 0xb46c
   12758:	movt	r3, #2
   1275c:	ldr	r2, [r3]
   12760:	mov	r1, r0
   12764:	mov	r0, #1
   12768:	bl	10e84 <__printf_chk@plt>
   1276c:	mov	r2, #5
   12770:	movw	r1, #31436	; 0x7acc
   12774:	movt	r1, #1
   12778:	mov	r0, #0
   1277c:	bl	10d58 <dcgettext@plt>
   12780:	movw	r4, #37204	; 0x9154
   12784:	movt	r4, #2
   12788:	ldr	r1, [r4]
   1278c:	bl	10cb0 <fputs_unlocked@plt>
   12790:	mov	r2, #5
   12794:	movw	r1, #31932	; 0x7cbc
   12798:	movt	r1, #1
   1279c:	mov	r0, #0
   127a0:	bl	10d58 <dcgettext@plt>
   127a4:	ldr	r1, [r4]
   127a8:	bl	10cb0 <fputs_unlocked@plt>
   127ac:	mov	r2, #5
   127b0:	movw	r1, #31980	; 0x7cec
   127b4:	movt	r1, #1
   127b8:	mov	r0, #0
   127bc:	bl	10d58 <dcgettext@plt>
   127c0:	ldr	r1, [r4]
   127c4:	bl	10cb0 <fputs_unlocked@plt>
   127c8:	mov	r2, #5
   127cc:	movw	r1, #32036	; 0x7d24
   127d0:	movt	r1, #1
   127d4:	mov	r0, #0
   127d8:	bl	10d58 <dcgettext@plt>
   127dc:	ldr	r1, [r4]
   127e0:	bl	10cb0 <fputs_unlocked@plt>
   127e4:	mov	r2, #5
   127e8:	movw	r1, #32412	; 0x7e9c
   127ec:	movt	r1, #1
   127f0:	mov	r0, #0
   127f4:	bl	10d58 <dcgettext@plt>
   127f8:	ldr	r1, [r4]
   127fc:	bl	10cb0 <fputs_unlocked@plt>
   12800:	mov	r2, #5
   12804:	movw	r1, #32840	; 0x8048
   12808:	movt	r1, #1
   1280c:	mov	r0, #0
   12810:	bl	10d58 <dcgettext@plt>
   12814:	ldr	r1, [r4]
   12818:	bl	10cb0 <fputs_unlocked@plt>
   1281c:	mov	r2, #5
   12820:	movw	r1, #33252	; 0x81e4
   12824:	movt	r1, #1
   12828:	mov	r0, #0
   1282c:	bl	10d58 <dcgettext@plt>
   12830:	ldr	r1, [r4]
   12834:	bl	10cb0 <fputs_unlocked@plt>
   12838:	movw	r3, #30304	; 0x7660
   1283c:	movt	r3, #1
   12840:	add	r0, r3, #176	; 0xb0
   12844:	ldr	r1, [r3, #176]	; 0xb0
   12848:	ldr	r3, [r3, #180]	; 0xb4
   1284c:	str	r1, [sp]
   12850:	str	r3, [sp, #4]
   12854:	ldrd	r2, [r0, #8]
   12858:	strd	r2, [sp, #8]
   1285c:	ldrd	r2, [r0, #16]
   12860:	strd	r2, [sp, #16]
   12864:	ldrd	r2, [r0, #24]
   12868:	strd	r2, [sp, #24]
   1286c:	ldrd	r2, [r0, #32]
   12870:	strd	r2, [sp, #32]
   12874:	ldrd	r2, [r0, #40]	; 0x28
   12878:	strd	r2, [sp, #40]	; 0x28
   1287c:	ldrd	r2, [r0, #48]	; 0x30
   12880:	strd	r2, [sp, #48]	; 0x30
   12884:	cmp	r1, #0
   12888:	moveq	r4, sp
   1288c:	beq	128b8 <__assert_fail@plt+0x19a4>
   12890:	mov	r4, sp
   12894:	movw	r6, #31356	; 0x7a7c
   12898:	movt	r6, #1
   1289c:	mov	r0, r6
   128a0:	bl	10cbc <strcmp@plt>
   128a4:	cmp	r0, #0
   128a8:	beq	128b8 <__assert_fail@plt+0x19a4>
   128ac:	ldr	r1, [r4, #8]!
   128b0:	cmp	r1, #0
   128b4:	bne	1289c <__assert_fail@plt+0x1988>
   128b8:	ldr	r4, [r4, #4]
   128bc:	cmp	r4, #0
   128c0:	beq	12a1c <__assert_fail@plt+0x1b08>
   128c4:	mov	r2, #5
   128c8:	movw	r1, #33724	; 0x83bc
   128cc:	movt	r1, #1
   128d0:	mov	r0, #0
   128d4:	bl	10d58 <dcgettext@plt>
   128d8:	movw	r3, #33748	; 0x83d4
   128dc:	movt	r3, #1
   128e0:	movw	r2, #33788	; 0x83fc
   128e4:	movt	r2, #1
   128e8:	mov	r1, r0
   128ec:	mov	r0, #1
   128f0:	bl	10e84 <__printf_chk@plt>
   128f4:	mov	r1, #0
   128f8:	mov	r0, #5
   128fc:	bl	10ec0 <setlocale@plt>
   12900:	cmp	r0, #0
   12904:	beq	12920 <__assert_fail@plt+0x1a0c>
   12908:	mov	r2, #3
   1290c:	movw	r1, #33804	; 0x840c
   12910:	movt	r1, #1
   12914:	bl	10ef0 <strncmp@plt>
   12918:	cmp	r0, #0
   1291c:	bne	1299c <__assert_fail@plt+0x1a88>
   12920:	mov	r2, #5
   12924:	movw	r1, #33880	; 0x8458
   12928:	movt	r1, #1
   1292c:	mov	r0, #0
   12930:	bl	10d58 <dcgettext@plt>
   12934:	movw	r6, #31356	; 0x7a7c
   12938:	movt	r6, #1
   1293c:	mov	r3, r6
   12940:	movw	r2, #33748	; 0x83d4
   12944:	movt	r2, #1
   12948:	mov	r1, r0
   1294c:	mov	r0, #1
   12950:	bl	10e84 <__printf_chk@plt>
   12954:	mov	r2, #5
   12958:	movw	r1, #33908	; 0x8474
   1295c:	movt	r1, #1
   12960:	mov	r0, #0
   12964:	bl	10d58 <dcgettext@plt>
   12968:	mov	r1, r0
   1296c:	movw	r2, #35044	; 0x88e4
   12970:	movt	r2, #1
   12974:	movw	r3, #32408	; 0x7e98
   12978:	movt	r3, #1
   1297c:	cmp	r4, r6
   12980:	moveq	r3, r2
   12984:	mov	r2, r4
   12988:	mov	r0, #1
   1298c:	bl	10e84 <__printf_chk@plt>
   12990:	b	12738 <__assert_fail@plt+0x1824>
   12994:	movw	r4, #31356	; 0x7a7c
   12998:	movt	r4, #1
   1299c:	mov	r2, #5
   129a0:	movw	r1, #33808	; 0x8410
   129a4:	movt	r1, #1
   129a8:	mov	r0, #0
   129ac:	bl	10d58 <dcgettext@plt>
   129b0:	movw	r3, #37204	; 0x9154
   129b4:	movt	r3, #2
   129b8:	ldr	r1, [r3]
   129bc:	bl	10cb0 <fputs_unlocked@plt>
   129c0:	b	12920 <__assert_fail@plt+0x1a0c>
   129c4:	mov	r2, #5
   129c8:	movw	r1, #33880	; 0x8458
   129cc:	movt	r1, #1
   129d0:	mov	r0, #0
   129d4:	bl	10d58 <dcgettext@plt>
   129d8:	movw	r4, #31356	; 0x7a7c
   129dc:	movt	r4, #1
   129e0:	mov	r3, r4
   129e4:	movw	r2, #33748	; 0x83d4
   129e8:	movt	r2, #1
   129ec:	mov	r1, r0
   129f0:	mov	r0, #1
   129f4:	bl	10e84 <__printf_chk@plt>
   129f8:	mov	r2, #5
   129fc:	movw	r1, #33908	; 0x8474
   12a00:	movt	r1, #1
   12a04:	mov	r0, #0
   12a08:	bl	10d58 <dcgettext@plt>
   12a0c:	mov	r1, r0
   12a10:	movw	r3, #35044	; 0x88e4
   12a14:	movt	r3, #1
   12a18:	b	12984 <__assert_fail@plt+0x1a70>
   12a1c:	mov	r2, #5
   12a20:	movw	r1, #33724	; 0x83bc
   12a24:	movt	r1, #1
   12a28:	mov	r0, #0
   12a2c:	bl	10d58 <dcgettext@plt>
   12a30:	movw	r3, #33748	; 0x83d4
   12a34:	movt	r3, #1
   12a38:	movw	r2, #33788	; 0x83fc
   12a3c:	movt	r2, #1
   12a40:	mov	r1, r0
   12a44:	mov	r0, #1
   12a48:	bl	10e84 <__printf_chk@plt>
   12a4c:	mov	r1, #0
   12a50:	mov	r0, #5
   12a54:	bl	10ec0 <setlocale@plt>
   12a58:	cmp	r0, #0
   12a5c:	beq	129c4 <__assert_fail@plt+0x1ab0>
   12a60:	mov	r2, #3
   12a64:	movw	r1, #33804	; 0x840c
   12a68:	movt	r1, #1
   12a6c:	bl	10ef0 <strncmp@plt>
   12a70:	cmp	r0, #0
   12a74:	bne	12994 <__assert_fail@plt+0x1a80>
   12a78:	mov	r2, #5
   12a7c:	movw	r1, #33880	; 0x8458
   12a80:	movt	r1, #1
   12a84:	mov	r0, #0
   12a88:	bl	10d58 <dcgettext@plt>
   12a8c:	movw	r4, #31356	; 0x7a7c
   12a90:	movt	r4, #1
   12a94:	mov	r3, r4
   12a98:	movw	r2, #33748	; 0x83d4
   12a9c:	movt	r2, #1
   12aa0:	mov	r1, r0
   12aa4:	mov	r0, #1
   12aa8:	bl	10e84 <__printf_chk@plt>
   12aac:	mov	r2, #5
   12ab0:	movw	r1, #33908	; 0x8474
   12ab4:	movt	r1, #1
   12ab8:	mov	r0, #0
   12abc:	bl	10d58 <dcgettext@plt>
   12ac0:	mov	r1, r0
   12ac4:	movw	r3, #35044	; 0x88e4
   12ac8:	movt	r3, #1
   12acc:	b	12984 <__assert_fail@plt+0x1a70>
   12ad0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ad4:	strd	r6, [sp, #8]
   12ad8:	strd	r8, [sp, #16]
   12adc:	strd	sl, [sp, #24]
   12ae0:	str	lr, [sp, #32]
   12ae4:	sub	sp, sp, #380	; 0x17c
   12ae8:	mov	r6, r0
   12aec:	mov	r5, r1
   12af0:	ldr	r0, [r1]
   12af4:	bl	13b94 <__assert_fail@plt+0x2c80>
   12af8:	movw	r1, #32408	; 0x7e98
   12afc:	movt	r1, #1
   12b00:	mov	r0, #6
   12b04:	bl	10ec0 <setlocale@plt>
   12b08:	movw	r4, #33792	; 0x8400
   12b0c:	movt	r4, #1
   12b10:	movw	r1, #34072	; 0x8518
   12b14:	movt	r1, #1
   12b18:	mov	r0, r4
   12b1c:	bl	10ee4 <bindtextdomain@plt>
   12b20:	mov	r0, r4
   12b24:	bl	10d70 <textdomain@plt>
   12b28:	movw	r0, #14772	; 0x39b4
   12b2c:	movt	r0, #1
   12b30:	bl	1763c <__assert_fail@plt+0x6728>
   12b34:	ldr	r8, [pc, #3652]	; 13980 <__assert_fail@plt+0x2a6c>
   12b38:	movw	r4, #34116	; 0x8544
   12b3c:	movt	r4, #1
   12b40:	movw	r7, #37212	; 0x915c
   12b44:	movt	r7, #2
   12b48:	mov	r3, #0
   12b4c:	str	r3, [sp]
   12b50:	mov	r3, r8
   12b54:	mov	r2, r4
   12b58:	mov	r1, r5
   12b5c:	mov	r0, r6
   12b60:	bl	10e18 <getopt_long@plt>
   12b64:	cmn	r0, #1
   12b68:	beq	12c60 <__assert_fail@plt+0x1d4c>
   12b6c:	cmp	r0, #67	; 0x43
   12b70:	beq	12bc8 <__assert_fail@plt+0x1cb4>
   12b74:	ble	12ba0 <__assert_fail@plt+0x1c8c>
   12b78:	cmp	r0, #100	; 0x64
   12b7c:	beq	12bf8 <__assert_fail@plt+0x1ce4>
   12b80:	ble	12bc0 <__assert_fail@plt+0x1cac>
   12b84:	cmp	r0, #115	; 0x73
   12b88:	beq	12c04 <__assert_fail@plt+0x1cf0>
   12b8c:	cmp	r0, #116	; 0x74
   12b90:	bne	12bb8 <__assert_fail@plt+0x1ca4>
   12b94:	mov	r3, #1
   12b98:	strb	r3, [r7, #771]	; 0x303
   12b9c:	b	12b48 <__assert_fail@plt+0x1c34>
   12ba0:	cmn	r0, #2
   12ba4:	beq	12c10 <__assert_fail@plt+0x1cfc>
   12ba8:	cmp	r0, #65	; 0x41
   12bac:	beq	12bd4 <__assert_fail@plt+0x1cc0>
   12bb0:	cmn	r0, #3
   12bb4:	beq	12c18 <__assert_fail@plt+0x1d04>
   12bb8:	mov	r0, #1
   12bbc:	bl	126ec <__assert_fail@plt+0x17d8>
   12bc0:	cmp	r0, #99	; 0x63
   12bc4:	bne	12bb8 <__assert_fail@plt+0x1ca4>
   12bc8:	mov	r3, #1
   12bcc:	strb	r3, [r7, #768]	; 0x300
   12bd0:	b	12b48 <__assert_fail@plt+0x1c34>
   12bd4:	movw	r9, #34096	; 0x8530
   12bd8:	movt	r9, #1
   12bdc:	mov	r1, r9
   12be0:	mov	r0, #3
   12be4:	bl	10ec0 <setlocale@plt>
   12be8:	mov	r1, r9
   12bec:	mov	r0, #0
   12bf0:	bl	10ec0 <setlocale@plt>
   12bf4:	b	12b48 <__assert_fail@plt+0x1c34>
   12bf8:	mov	r3, #1
   12bfc:	strb	r3, [r7, #769]	; 0x301
   12c00:	b	12b48 <__assert_fail@plt+0x1c34>
   12c04:	mov	r3, #1
   12c08:	strb	r3, [r7, #770]	; 0x302
   12c0c:	b	12b48 <__assert_fail@plt+0x1c34>
   12c10:	mov	r0, #0
   12c14:	bl	126ec <__assert_fail@plt+0x17d8>
   12c18:	movw	r3, #37100	; 0x90ec
   12c1c:	movt	r3, #2
   12c20:	movw	r0, #37204	; 0x9154
   12c24:	movt	r0, #2
   12c28:	mov	r4, #0
   12c2c:	str	r4, [sp, #4]
   12c30:	movw	r2, #34100	; 0x8534
   12c34:	movt	r2, #1
   12c38:	str	r2, [sp]
   12c3c:	ldr	r3, [r3]
   12c40:	movw	r2, #33788	; 0x83fc
   12c44:	movt	r2, #1
   12c48:	movw	r1, #31356	; 0x7a7c
   12c4c:	movt	r1, #1
   12c50:	ldr	r0, [r0]
   12c54:	bl	16424 <__assert_fail@plt+0x5510>
   12c58:	mov	r0, r4
   12c5c:	bl	10e30 <exit@plt>
   12c60:	movw	r3, #37184	; 0x9140
   12c64:	movt	r3, #2
   12c68:	ldr	r7, [r3]
   12c6c:	sub	r7, r6, r7
   12c70:	cmp	r7, #2
   12c74:	beq	12e28 <__assert_fail@plt+0x1f14>
   12c78:	movw	r3, #37212	; 0x915c
   12c7c:	movt	r3, #2
   12c80:	mov	r2, #0
   12c84:	strb	r2, [r3, #772]	; 0x304
   12c88:	ldrb	r2, [r3, #769]	; 0x301
   12c8c:	ldrb	r3, [r3, #770]	; 0x302
   12c90:	cmp	r2, r3
   12c94:	beq	12e54 <__assert_fail@plt+0x1f40>
   12c98:	cmp	r3, r2
   12c9c:	bcs	12e60 <__assert_fail@plt+0x1f4c>
   12ca0:	mov	r3, #1
   12ca4:	mov	r4, r3
   12ca8:	cmp	r7, r3
   12cac:	blt	12e6c <__assert_fail@plt+0x1f58>
   12cb0:	cmp	r4, r7
   12cb4:	blt	12f30 <__assert_fail@plt+0x201c>
   12cb8:	mov	r0, #24
   12cbc:	bl	164fc <__assert_fail@plt+0x55e8>
   12cc0:	str	r0, [sp, #340]	; 0x154
   12cc4:	str	r0, [sp, #336]	; 0x150
   12cc8:	mov	r3, #0
   12ccc:	str	r3, [r0, #4]
   12cd0:	movw	r3, #37184	; 0x9140
   12cd4:	movt	r3, #2
   12cd8:	ldr	r3, [r3]
   12cdc:	add	r1, sp, #336	; 0x150
   12ce0:	ldr	r0, [r5, r3, lsl #2]
   12ce4:	bl	11554 <__assert_fail@plt+0x640>
   12ce8:	cmp	r0, #0
   12cec:	beq	13000 <__assert_fail@plt+0x20ec>
   12cf0:	cmp	r7, #2
   12cf4:	movne	r4, #0
   12cf8:	beq	12fc0 <__assert_fail@plt+0x20ac>
   12cfc:	add	r0, sp, #336	; 0x150
   12d00:	bl	11eec <__assert_fail@plt+0xfd8>
   12d04:	movw	r3, #37212	; 0x915c
   12d08:	movt	r3, #2
   12d0c:	ldrb	r3, [r3, #768]	; 0x300
   12d10:	cmp	r3, #0
   12d14:	bne	13020 <__assert_fail@plt+0x210c>
   12d18:	ldr	r8, [sp, #360]	; 0x168
   12d1c:	cmp	r8, #0
   12d20:	bne	13090 <__assert_fail@plt+0x217c>
   12d24:	cmp	r4, #0
   12d28:	beq	1344c <__assert_fail@plt+0x2538>
   12d2c:	add	r3, sp, #352	; 0x160
   12d30:	ldrd	sl, [r3]
   12d34:	mov	r0, r4
   12d38:	bl	11eec <__assert_fail@plt+0xfd8>
   12d3c:	ldrd	r2, [r4, #16]
   12d40:	strd	r2, [sp, #8]
   12d44:	cmp	fp, r3
   12d48:	cmpeq	sl, r2
   12d4c:	bcc	12d5c <__assert_fail@plt+0x1e48>
   12d50:	ldr	r1, [r4, #24]
   12d54:	cmp	r1, #1
   12d58:	beq	130b4 <__assert_fail@plt+0x21a0>
   12d5c:	ldr	r2, [r4, #24]
   12d60:	cmp	r2, #1
   12d64:	bhi	130d8 <__assert_fail@plt+0x21c4>
   12d68:	movw	r3, #37212	; 0x915c
   12d6c:	movt	r3, #2
   12d70:	ldrb	r3, [r3, #772]	; 0x304
   12d74:	cmp	r3, #0
   12d78:	beq	13444 <__assert_fail@plt+0x2530>
   12d7c:	ldrb	r3, [r4, #32]
   12d80:	cmp	r3, #0
   12d84:	bne	130fc <__assert_fail@plt+0x21e8>
   12d88:	ldrb	r3, [r4, #34]	; 0x22
   12d8c:	cmp	r3, #0
   12d90:	bne	13120 <__assert_fail@plt+0x220c>
   12d94:	movw	r3, #37212	; 0x915c
   12d98:	movt	r3, #2
   12d9c:	ldrb	r3, [r3, #768]	; 0x300
   12da0:	cmp	r3, #0
   12da4:	bne	13950 <__assert_fail@plt+0x2a3c>
   12da8:	ldrb	r5, [r4, #33]	; 0x21
   12dac:	cmp	r5, #0
   12db0:	beq	132a8 <__assert_fail@plt+0x2394>
   12db4:	bl	10e24 <__ctype_b_loc@plt>
   12db8:	ldr	r1, [r0]
   12dbc:	sub	r3, r1, #2
   12dc0:	add	r1, r1, #508	; 0x1fc
   12dc4:	add	r1, r1, #2
   12dc8:	mov	r9, r8
   12dcc:	ldrh	r2, [r3, #2]!
   12dd0:	tst	r2, #256	; 0x100
   12dd4:	addne	r8, r8, #1
   12dd8:	tst	r2, #512	; 0x200
   12ddc:	addne	r9, r9, #1
   12de0:	cmp	r1, r3
   12de4:	bne	12dcc <__assert_fail@plt+0x1eb8>
   12de8:	add	r3, sp, #352	; 0x160
   12dec:	ldrd	r2, [r3]
   12df0:	strd	r2, [sp, #8]
   12df4:	ldrd	r2, [r4, #16]
   12df8:	strd	r2, [sp, #16]
   12dfc:	ldr	fp, [sp, #340]	; 0x154
   12e00:	ldr	r3, [r4, #4]
   12e04:	str	r3, [sp, #28]
   12e08:	mvn	r2, #1
   12e0c:	mvn	r3, #0
   12e10:	add	r1, sp, #344	; 0x158
   12e14:	strd	r2, [r1]
   12e18:	strd	r2, [r4, #8]
   12e1c:	mov	r6, r5
   12e20:	mov	sl, r7
   12e24:	b	13204 <__assert_fail@plt+0x22f0>
   12e28:	movw	r3, #37212	; 0x915c
   12e2c:	movt	r3, #2
   12e30:	ldrb	r1, [r3, #769]	; 0x301
   12e34:	eor	r2, r1, #1
   12e38:	and	r2, r2, #1
   12e3c:	strb	r2, [r3, #772]	; 0x304
   12e40:	mov	r2, r1
   12e44:	ldrb	r3, [r3, #770]	; 0x302
   12e48:	cmp	r3, r1
   12e4c:	bne	12c98 <__assert_fail@plt+0x1d84>
   12e50:	b	12cb8 <__assert_fail@plt+0x1da4>
   12e54:	mov	r3, #2
   12e58:	mov	r4, r3
   12e5c:	b	12ca8 <__assert_fail@plt+0x1d94>
   12e60:	mov	r3, #1
   12e64:	mov	r4, #2
   12e68:	b	12ca8 <__assert_fail@plt+0x1d94>
   12e6c:	cmp	r7, #0
   12e70:	bne	12ea0 <__assert_fail@plt+0x1f8c>
   12e74:	mov	r2, #5
   12e78:	movw	r1, #34124	; 0x854c
   12e7c:	movt	r1, #1
   12e80:	mov	r0, #0
   12e84:	bl	10d58 <dcgettext@plt>
   12e88:	mov	r2, r0
   12e8c:	mov	r1, #0
   12e90:	mov	r0, r1
   12e94:	bl	10dc4 <error@plt>
   12e98:	mov	r0, #1
   12e9c:	bl	126ec <__assert_fail@plt+0x17d8>
   12ea0:	mov	r2, #5
   12ea4:	movw	r1, #34140	; 0x855c
   12ea8:	movt	r1, #1
   12eac:	mov	r0, #0
   12eb0:	bl	10d58 <dcgettext@plt>
   12eb4:	mov	r4, r0
   12eb8:	sub	r6, r6, #-1073741823	; 0xc0000001
   12ebc:	ldr	r0, [r5, r6, lsl #2]
   12ec0:	bl	15e90 <__assert_fail@plt+0x4f7c>
   12ec4:	mov	r3, r0
   12ec8:	mov	r2, r4
   12ecc:	mov	r1, #0
   12ed0:	mov	r0, r1
   12ed4:	bl	10dc4 <error@plt>
   12ed8:	movw	r3, #37192	; 0x9148
   12edc:	movt	r3, #2
   12ee0:	ldr	r4, [r3]
   12ee4:	movw	r3, #37212	; 0x915c
   12ee8:	movt	r3, #2
   12eec:	ldrb	r0, [r3, #770]	; 0x302
   12ef0:	movw	r1, #33960	; 0x84a8
   12ef4:	movt	r1, #1
   12ef8:	movw	r3, #34028	; 0x84ec
   12efc:	movt	r3, #1
   12f00:	mov	r2, #5
   12f04:	cmp	r0, #0
   12f08:	moveq	r1, r3
   12f0c:	mov	r0, #0
   12f10:	bl	10d58 <dcgettext@plt>
   12f14:	mov	r3, r0
   12f18:	movw	r2, #35620	; 0x8b24
   12f1c:	movt	r2, #1
   12f20:	mov	r1, #1
   12f24:	mov	r0, r4
   12f28:	bl	10e9c <__fprintf_chk@plt>
   12f2c:	b	12e98 <__assert_fail@plt+0x1f84>
   12f30:	mov	r2, #5
   12f34:	movw	r1, #34168	; 0x8578
   12f38:	movt	r1, #1
   12f3c:	mov	r0, #0
   12f40:	bl	10d58 <dcgettext@plt>
   12f44:	mov	r6, r0
   12f48:	movw	r3, #37184	; 0x9140
   12f4c:	movt	r3, #2
   12f50:	ldr	r3, [r3]
   12f54:	add	r4, r4, r3
   12f58:	ldr	r0, [r5, r4, lsl #2]
   12f5c:	bl	15e90 <__assert_fail@plt+0x4f7c>
   12f60:	mov	r3, r0
   12f64:	mov	r2, r6
   12f68:	mov	r1, #0
   12f6c:	mov	r0, r1
   12f70:	bl	10dc4 <error@plt>
   12f74:	cmp	r7, #2
   12f78:	beq	12f84 <__assert_fail@plt+0x2070>
   12f7c:	mov	r0, #1
   12f80:	bl	126ec <__assert_fail@plt+0x17d8>
   12f84:	movw	r3, #37192	; 0x9148
   12f88:	movt	r3, #2
   12f8c:	ldr	r4, [r3]
   12f90:	mov	r2, #5
   12f94:	movw	r1, #34188	; 0x858c
   12f98:	movt	r1, #1
   12f9c:	mov	r0, #0
   12fa0:	bl	10d58 <dcgettext@plt>
   12fa4:	mov	r3, r0
   12fa8:	movw	r2, #35620	; 0x8b24
   12fac:	movt	r2, #1
   12fb0:	mov	r1, #1
   12fb4:	mov	r0, r4
   12fb8:	bl	10e9c <__fprintf_chk@plt>
   12fbc:	b	12f7c <__assert_fail@plt+0x2068>
   12fc0:	mov	r0, #24
   12fc4:	bl	164fc <__assert_fail@plt+0x55e8>
   12fc8:	str	r0, [sp, #300]	; 0x12c
   12fcc:	str	r0, [sp, #296]	; 0x128
   12fd0:	mov	r3, #0
   12fd4:	str	r3, [r0, #4]
   12fd8:	movw	r3, #37184	; 0x9140
   12fdc:	movt	r3, #2
   12fe0:	ldr	r3, [r3]
   12fe4:	add	r3, r3, #1
   12fe8:	add	r1, sp, #296	; 0x128
   12fec:	ldr	r0, [r5, r3, lsl #2]
   12ff0:	bl	11554 <__assert_fail@plt+0x640>
   12ff4:	cmp	r0, #0
   12ff8:	addne	r4, sp, #296	; 0x128
   12ffc:	bne	12cfc <__assert_fail@plt+0x1de8>
   13000:	mov	r0, #1
   13004:	add	sp, sp, #380	; 0x17c
   13008:	ldrd	r4, [sp]
   1300c:	ldrd	r6, [sp, #8]
   13010:	ldrd	r8, [sp, #16]
   13014:	ldrd	sl, [sp, #24]
   13018:	add	sp, sp, #32
   1301c:	pop	{pc}		; (ldr pc, [sp], #4)
   13020:	mov	r5, #256	; 0x100
   13024:	mov	r2, r5
   13028:	mov	r1, #0
   1302c:	add	r0, sp, #40	; 0x28
   13030:	bl	10e78 <memset@plt>
   13034:	mvn	r2, #1
   13038:	mvn	r3, #0
   1303c:	add	r1, sp, #344	; 0x158
   13040:	strd	r2, [r1]
   13044:	mov	r6, #0
   13048:	mov	r8, #1
   1304c:	b	13068 <__assert_fail@plt+0x2154>
   13050:	add	r3, sp, #376	; 0x178
   13054:	add	r0, r3, r0
   13058:	ldrb	r3, [r0, #-336]	; 0xfffffeb0
   1305c:	eor	r3, r3, #1
   13060:	sub	r5, r5, r3
   13064:	strb	r8, [r0, #-336]	; 0xfffffeb0
   13068:	mov	r1, r6
   1306c:	add	r0, sp, #336	; 0x150
   13070:	bl	12140 <__assert_fail@plt+0x122c>
   13074:	cmn	r0, #1
   13078:	bne	13050 <__assert_fail@plt+0x213c>
   1307c:	mov	r2, r5
   13080:	asr	r3, r5, #31
   13084:	add	r1, sp, #352	; 0x160
   13088:	strd	r2, [r1]
   1308c:	b	12d18 <__assert_fail@plt+0x1e04>
   13090:	mov	r2, #5
   13094:	movw	r1, #34260	; 0x85d4
   13098:	movt	r1, #1
   1309c:	mov	r0, #0
   130a0:	bl	10d58 <dcgettext@plt>
   130a4:	mov	r2, r0
   130a8:	mov	r1, #0
   130ac:	mov	r0, #1
   130b0:	bl	10dc4 <error@plt>
   130b4:	ldr	r1, [r4, #28]
   130b8:	ldr	r3, [sp, #8]
   130bc:	subs	r2, sl, r3
   130c0:	ldr	r3, [sp, #12]
   130c4:	sbc	r3, fp, r3
   130c8:	str	r2, [r1, #16]
   130cc:	str	r3, [r1, #20]
   130d0:	strd	sl, [r4, #16]
   130d4:	b	12d5c <__assert_fail@plt+0x1e48>
   130d8:	mov	r2, #5
   130dc:	movw	r1, #34312	; 0x8608
   130e0:	movt	r1, #1
   130e4:	mov	r0, #0
   130e8:	bl	10d58 <dcgettext@plt>
   130ec:	mov	r2, r0
   130f0:	mov	r1, #0
   130f4:	mov	r0, #1
   130f8:	bl	10dc4 <error@plt>
   130fc:	mov	r2, #5
   13100:	movw	r1, #34368	; 0x8640
   13104:	movt	r1, #1
   13108:	mov	r0, #0
   1310c:	bl	10d58 <dcgettext@plt>
   13110:	mov	r2, r0
   13114:	mov	r1, #0
   13118:	mov	r0, #1
   1311c:	bl	10dc4 <error@plt>
   13120:	mov	r2, #5
   13124:	movw	r1, #34432	; 0x8680
   13128:	movt	r1, #1
   1312c:	mov	r0, #0
   13130:	bl	10d58 <dcgettext@plt>
   13134:	mov	r2, r0
   13138:	mov	r1, #0
   1313c:	mov	r0, #1
   13140:	bl	10dc4 <error@plt>
   13144:	ldr	r1, [sp, #40]	; 0x28
   13148:	cmp	r1, #2
   1314c:	beq	131c8 <__assert_fail@plt+0x22b4>
   13150:	ldr	r3, [sp, #340]	; 0x154
   13154:	ldr	r3, [r3, #4]
   13158:	str	r3, [sp, #340]	; 0x154
   1315c:	add	ip, sp, #344	; 0x158
   13160:	mvn	r2, #0
   13164:	mvn	r3, #0
   13168:	strd	r2, [ip]
   1316c:	ldr	r3, [r4, #4]
   13170:	ldr	r3, [r3, #4]
   13174:	str	r3, [r4, #4]
   13178:	mvn	r2, #0
   1317c:	mvn	r3, #0
   13180:	strd	r2, [r4, #8]
   13184:	add	r3, sp, #352	; 0x160
   13188:	ldrd	r2, [r3]
   1318c:	ldr	ip, [sp, #36]	; 0x24
   13190:	cmp	ip, #1
   13194:	subeq	ip, r8, #1
   13198:	subne	ip, r9, #1
   1319c:	subs	r2, r2, ip
   131a0:	sbc	r3, r3, #0
   131a4:	add	ip, sp, #352	; 0x160
   131a8:	strd	r2, [ip]
   131ac:	ldrd	r2, [r4, #16]
   131b0:	cmp	r1, #1
   131b4:	subeq	r1, r8, #1
   131b8:	subne	r1, r9, #1
   131bc:	subs	r2, r2, r1
   131c0:	sbc	r3, r3, #0
   131c4:	strd	r2, [r4, #16]
   131c8:	ldr	r6, [sp, #344]	; 0x158
   131cc:	ldr	r3, [sp, #348]	; 0x15c
   131d0:	and	r6, r6, r3
   131d4:	cmn	r6, #1
   131d8:	movne	r6, #0
   131dc:	moveq	r6, #1
   131e0:	ldr	r5, [r4, #8]
   131e4:	ldr	r3, [r4, #12]
   131e8:	and	r5, r5, r3
   131ec:	cmn	r5, #1
   131f0:	movne	r5, #0
   131f4:	moveq	r5, #1
   131f8:	cmn	r0, #1
   131fc:	cmnne	r7, #1
   13200:	beq	1326c <__assert_fail@plt+0x2358>
   13204:	add	r1, sp, #36	; 0x24
   13208:	add	r0, sp, #336	; 0x150
   1320c:	bl	12140 <__assert_fail@plt+0x122c>
   13210:	mov	r7, r0
   13214:	add	r1, sp, #40	; 0x28
   13218:	mov	r0, r4
   1321c:	bl	12140 <__assert_fail@plt+0x122c>
   13220:	cmp	r5, #0
   13224:	beq	13144 <__assert_fail@plt+0x2230>
   13228:	ldr	r1, [sp, #40]	; 0x28
   1322c:	cmp	r1, #2
   13230:	beq	131c8 <__assert_fail@plt+0x22b4>
   13234:	cmp	r6, #0
   13238:	beq	13248 <__assert_fail@plt+0x2334>
   1323c:	ldr	r3, [sp, #36]	; 0x24
   13240:	cmp	r3, #2
   13244:	bne	13150 <__assert_fail@plt+0x223c>
   13248:	mov	r2, #5
   1324c:	movw	r1, #34528	; 0x86e0
   13250:	movt	r1, #1
   13254:	mov	r0, #0
   13258:	bl	10d58 <dcgettext@plt>
   1325c:	mov	r2, r0
   13260:	mov	r1, #0
   13264:	mov	r0, #1
   13268:	bl	10dc4 <error@plt>
   1326c:	mov	r7, sl
   13270:	add	r3, sp, #352	; 0x160
   13274:	ldrd	r2, [r3]
   13278:	ldrd	r0, [sp, #8]
   1327c:	cmp	r1, r3
   13280:	cmpeq	r0, r2
   13284:	bcc	13304 <__assert_fail@plt+0x23f0>
   13288:	ldrd	r2, [r4, #16]
   1328c:	ldrd	r0, [sp, #16]
   13290:	cmp	r1, r3
   13294:	cmpeq	r0, r2
   13298:	strcs	fp, [sp, #340]	; 0x154
   1329c:	ldrcs	r3, [sp, #28]
   132a0:	strcs	r3, [r4, #4]
   132a4:	bcc	13304 <__assert_fail@plt+0x23f0>
   132a8:	add	r3, sp, #352	; 0x160
   132ac:	ldrd	r8, [r3]
   132b0:	ldrd	r0, [r4, #16]
   132b4:	cmp	r9, r1
   132b8:	cmpeq	r8, r0
   132bc:	bls	1344c <__assert_fail@plt+0x2538>
   132c0:	movw	r3, #37212	; 0x915c
   132c4:	movt	r3, #2
   132c8:	ldrb	r3, [r3, #771]	; 0x303
   132cc:	cmp	r3, #0
   132d0:	bne	1344c <__assert_fail@plt+0x2538>
   132d4:	orrs	r3, r0, r1
   132d8:	beq	13320 <__assert_fail@plt+0x240c>
   132dc:	ldr	r3, [r4, #4]
   132e0:	ldr	r2, [r3]
   132e4:	cmp	r2, #4
   132e8:	ldrls	pc, [pc, r2, lsl #2]
   132ec:	b	13440 <__assert_fail@plt+0x252c>
   132f0:	andeq	r3, r1, r4, asr #6
   132f4:	andeq	r3, r1, r8, lsl #8
   132f8:	andeq	r3, r1, r0, lsl r4
   132fc:	andeq	r3, r1, ip, lsr r4
   13300:	andeq	r3, r1, r4, lsr r4
   13304:	ldr	r3, [pc, #1656]	; 13984 <__assert_fail@plt+0x2a70>
   13308:	movw	r2, #1224	; 0x4c8
   1330c:	movw	r1, #30692	; 0x77e4
   13310:	movt	r1, #1
   13314:	movw	r0, #34576	; 0x8710
   13318:	movt	r0, #1
   1331c:	bl	10f14 <__assert_fail@plt>
   13320:	mov	r2, #5
   13324:	movw	r1, #34632	; 0x8748
   13328:	movt	r1, #1
   1332c:	mov	r0, #0
   13330:	bl	10d58 <dcgettext@plt>
   13334:	mov	r2, r0
   13338:	mov	r1, #0
   1333c:	mov	r0, #1
   13340:	bl	10dc4 <error@plt>
   13344:	ldrb	ip, [r3, #8]
   13348:	subs	r2, r8, r0
   1334c:	sbc	r3, r9, r1
   13350:	mov	r1, ip
   13354:	mov	r0, r4
   13358:	bl	11284 <__assert_fail@plt+0x370>
   1335c:	add	r3, sp, #352	; 0x160
   13360:	ldrd	r2, [r3]
   13364:	strd	r2, [r4, #16]
   13368:	movw	r3, #37212	; 0x915c
   1336c:	movt	r3, #2
   13370:	ldrb	r3, [r3, #768]	; 0x300
   13374:	cmp	r3, #0
   13378:	beq	1344c <__assert_fail@plt+0x2538>
   1337c:	ldrb	r3, [sp, #369]	; 0x171
   13380:	cmp	r3, #0
   13384:	beq	1344c <__assert_fail@plt+0x2538>
   13388:	ldrd	r0, [r4, #16]
   1338c:	add	r3, sp, #352	; 0x160
   13390:	ldrd	r2, [r3]
   13394:	cmp	r1, r3
   13398:	cmpeq	r0, r2
   1339c:	bne	133e4 <__assert_fail@plt+0x24d0>
   133a0:	mvn	r2, #1
   133a4:	mvn	r3, #0
   133a8:	strd	r2, [r4, #8]
   133ac:	mov	r1, #0
   133b0:	mov	r0, r4
   133b4:	bl	12140 <__assert_fail@plt+0x122c>
   133b8:	mov	r5, r0
   133bc:	cmn	r0, #1
   133c0:	movne	r6, #0
   133c4:	beq	133e4 <__assert_fail@plt+0x24d0>
   133c8:	mov	r1, r6
   133cc:	mov	r0, r4
   133d0:	bl	12140 <__assert_fail@plt+0x122c>
   133d4:	cmn	r0, #1
   133d8:	beq	1344c <__assert_fail@plt+0x2538>
   133dc:	cmp	r5, r0
   133e0:	beq	133c8 <__assert_fail@plt+0x24b4>
   133e4:	mov	r2, #5
   133e8:	movw	r1, #34792	; 0x87e8
   133ec:	movt	r1, #1
   133f0:	mov	r0, #0
   133f4:	bl	10d58 <dcgettext@plt>
   133f8:	mov	r2, r0
   133fc:	mov	r1, #0
   13400:	mov	r0, #1
   13404:	bl	10dc4 <error@plt>
   13408:	ldrb	ip, [r3, #9]
   1340c:	b	13348 <__assert_fail@plt+0x2434>
   13410:	mov	r2, #5
   13414:	movw	r1, #34684	; 0x877c
   13418:	movt	r1, #1
   1341c:	mov	r0, #0
   13420:	bl	10d58 <dcgettext@plt>
   13424:	mov	r2, r0
   13428:	mov	r1, #0
   1342c:	mov	r0, #1
   13430:	bl	10dc4 <error@plt>
   13434:	ldrb	ip, [r3, #8]
   13438:	b	13348 <__assert_fail@plt+0x2434>
   1343c:	bl	10efc <abort@plt>
   13440:	bl	10efc <abort@plt>
   13444:	cmp	r2, #0
   13448:	bne	13510 <__assert_fail@plt+0x25fc>
   1344c:	movw	r3, #37200	; 0x9150
   13450:	movt	r3, #2
   13454:	mov	r1, #2
   13458:	ldr	r0, [r3]
   1345c:	bl	13af4 <__assert_fail@plt+0x2be0>
   13460:	movw	r3, #37212	; 0x915c
   13464:	movt	r3, #2
   13468:	ldrb	r3, [r3, #770]	; 0x302
   1346c:	cmp	r7, #1
   13470:	movne	r1, #0
   13474:	moveq	r1, #1
   13478:	tst	r3, r1
   1347c:	bne	13534 <__assert_fail@plt+0x2620>
   13480:	movw	r2, #37212	; 0x915c
   13484:	movt	r2, #2
   13488:	ldrb	r2, [r2, #769]	; 0x301
   1348c:	tst	r2, r1
   13490:	bne	13568 <__assert_fail@plt+0x2654>
   13494:	and	r3, r3, r2
   13498:	cmp	r7, #2
   1349c:	movne	r7, #0
   134a0:	andeq	r7, r3, #1
   134a4:	cmp	r7, #0
   134a8:	bne	135f0 <__assert_fail@plt+0x26dc>
   134ac:	movw	r3, #37212	; 0x915c
   134b0:	movt	r3, #2
   134b4:	ldrb	r3, [r3, #772]	; 0x304
   134b8:	cmp	r3, #0
   134bc:	beq	1390c <__assert_fail@plt+0x29f8>
   134c0:	movw	r3, #37212	; 0x915c
   134c4:	movt	r3, #2
   134c8:	ldrb	r3, [r3, #768]	; 0x300
   134cc:	cmp	r3, #0
   134d0:	ldreq	r2, [pc, #1200]	; 13988 <__assert_fail@plt+0x2a74>
   134d4:	moveq	r3, #0
   134d8:	bne	13634 <__assert_fail@plt+0x2720>
   134dc:	strb	r3, [r2, #1]!
   134e0:	add	r3, r3, #1
   134e4:	cmp	r3, #256	; 0x100
   134e8:	bne	134dc <__assert_fail@plt+0x25c8>
   134ec:	mvn	r2, #1
   134f0:	mvn	r3, #0
   134f4:	add	r1, sp, #344	; 0x158
   134f8:	strd	r2, [r1]
   134fc:	strd	r2, [r4, #8]
   13500:	movw	r8, #37212	; 0x915c
   13504:	movt	r8, #2
   13508:	add	r7, r8, #256	; 0x100
   1350c:	b	137e0 <__assert_fail@plt+0x28cc>
   13510:	mov	r2, #5
   13514:	movw	r1, #34900	; 0x8854
   13518:	movt	r1, #1
   1351c:	mov	r0, #0
   13520:	bl	10d58 <dcgettext@plt>
   13524:	mov	r2, r0
   13528:	mov	r1, #0
   1352c:	mov	r0, #1
   13530:	bl	10dc4 <error@plt>
   13534:	movw	r3, #37212	; 0x915c
   13538:	movt	r3, #2
   1353c:	add	r2, r3, #512	; 0x200
   13540:	ldrb	r1, [r3, #768]	; 0x300
   13544:	add	r0, sp, #336	; 0x150
   13548:	bl	12458 <__assert_fail@plt+0x1544>
   1354c:	movw	r2, #4332	; 0x10ec
   13550:	movt	r2, #1
   13554:	mov	r1, #8192	; 0x2000
   13558:	movw	r0, #37988	; 0x9464
   1355c:	movt	r0, #2
   13560:	bl	124dc <__assert_fail@plt+0x15c8>
   13564:	b	1390c <__assert_fail@plt+0x29f8>
   13568:	movw	r3, #37212	; 0x915c
   1356c:	movt	r3, #2
   13570:	mov	r2, r3
   13574:	ldrb	r1, [r3, #768]	; 0x300
   13578:	add	r0, sp, #336	; 0x150
   1357c:	bl	12458 <__assert_fail@plt+0x1544>
   13580:	movw	r5, #37988	; 0x9464
   13584:	movt	r5, #2
   13588:	mov	r7, #8192	; 0x2000
   1358c:	movw	r6, #37204	; 0x9154
   13590:	movt	r6, #2
   13594:	mov	r1, r7
   13598:	mov	r0, r5
   1359c:	bl	11144 <__assert_fail@plt+0x230>
   135a0:	subs	r4, r0, #0
   135a4:	beq	1390c <__assert_fail@plt+0x29f8>
   135a8:	ldr	r3, [r6]
   135ac:	mov	r2, r4
   135b0:	mov	r1, #1
   135b4:	mov	r0, r5
   135b8:	bl	10d28 <fwrite_unlocked@plt>
   135bc:	cmp	r4, r0
   135c0:	beq	13594 <__assert_fail@plt+0x2680>
   135c4:	bl	10e54 <__errno_location@plt>
   135c8:	ldr	r4, [r0]
   135cc:	mov	r2, #5
   135d0:	movw	r1, #31344	; 0x7a70
   135d4:	movt	r1, #1
   135d8:	mov	r0, #0
   135dc:	bl	10d58 <dcgettext@plt>
   135e0:	mov	r2, r0
   135e4:	mov	r1, r4
   135e8:	mov	r0, #1
   135ec:	bl	10dc4 <error@plt>
   135f0:	movw	r5, #37212	; 0x915c
   135f4:	movt	r5, #2
   135f8:	mov	r2, r5
   135fc:	ldrb	r1, [r5, #768]	; 0x300
   13600:	add	r0, sp, #336	; 0x150
   13604:	bl	12458 <__assert_fail@plt+0x1544>
   13608:	add	r2, r5, #512	; 0x200
   1360c:	mov	r1, #0
   13610:	mov	r0, r4
   13614:	bl	12458 <__assert_fail@plt+0x1544>
   13618:	movw	r2, #4420	; 0x1144
   1361c:	movt	r2, #1
   13620:	mov	r1, #8192	; 0x2000
   13624:	movw	r0, #37988	; 0x9464
   13628:	movt	r0, #2
   1362c:	bl	124dc <__assert_fail@plt+0x15c8>
   13630:	b	1390c <__assert_fail@plt+0x29f8>
   13634:	movw	r5, #37212	; 0x915c
   13638:	movt	r5, #2
   1363c:	mov	r2, r5
   13640:	mov	r1, #0
   13644:	add	r0, sp, #336	; 0x150
   13648:	bl	12458 <__assert_fail@plt+0x1544>
   1364c:	mvn	r2, #1
   13650:	mvn	r3, #0
   13654:	strd	r2, [r4, #8]
   13658:	add	r2, r5, #255	; 0xff
   1365c:	mov	r3, #0
   13660:	strb	r3, [r2, #1]!
   13664:	add	r3, r3, #1
   13668:	cmp	r3, #256	; 0x100
   1366c:	bne	13660 <__assert_fail@plt+0x274c>
   13670:	movw	r6, #37212	; 0x915c
   13674:	movt	r6, #2
   13678:	mov	r5, #0
   1367c:	mov	r7, r5
   13680:	add	r8, r6, #256	; 0x100
   13684:	b	136b4 <__assert_fail@plt+0x27a0>
   13688:	ldr	r3, [pc, #764]	; 1398c <__assert_fail@plt+0x2a78>
   1368c:	mov	r2, #1840	; 0x730
   13690:	movw	r1, #30692	; 0x77e4
   13694:	movt	r1, #1
   13698:	movw	r0, #34964	; 0x8894
   1369c:	movt	r0, #1
   136a0:	bl	10f14 <__assert_fail@plt>
   136a4:	strb	r0, [r5, r8]
   136a8:	add	r5, r5, #1
   136ac:	cmp	r5, #256	; 0x100
   136b0:	beq	136e8 <__assert_fail@plt+0x27d4>
   136b4:	ldrb	r3, [r6], #1
   136b8:	cmp	r3, #0
   136bc:	bne	136a8 <__assert_fail@plt+0x2794>
   136c0:	mov	r1, r7
   136c4:	mov	r0, r4
   136c8:	bl	12140 <__assert_fail@plt+0x122c>
   136cc:	cmn	r0, #1
   136d0:	bne	136a4 <__assert_fail@plt+0x2790>
   136d4:	movw	r3, #37212	; 0x915c
   136d8:	movt	r3, #2
   136dc:	ldrb	r3, [r3, #771]	; 0x303
   136e0:	cmp	r3, #0
   136e4:	beq	13688 <__assert_fail@plt+0x2774>
   136e8:	movw	r3, #37212	; 0x915c
   136ec:	movt	r3, #2
   136f0:	ldrb	r3, [r3, #770]	; 0x302
   136f4:	cmp	r3, #0
   136f8:	bne	138e4 <__assert_fail@plt+0x29d0>
   136fc:	movw	r5, #37988	; 0x9464
   13700:	movt	r5, #2
   13704:	mov	r7, #8192	; 0x2000
   13708:	movw	r6, #37204	; 0x9154
   1370c:	movt	r6, #2
   13710:	mov	r1, r7
   13714:	mov	r0, r5
   13718:	bl	11238 <__assert_fail@plt+0x324>
   1371c:	subs	r4, r0, #0
   13720:	beq	1390c <__assert_fail@plt+0x29f8>
   13724:	ldr	r3, [r6]
   13728:	mov	r2, r4
   1372c:	mov	r1, #1
   13730:	mov	r0, r5
   13734:	bl	10d28 <fwrite_unlocked@plt>
   13738:	cmp	r4, r0
   1373c:	beq	13710 <__assert_fail@plt+0x27fc>
   13740:	bl	10e54 <__errno_location@plt>
   13744:	ldr	r4, [r0]
   13748:	mov	r2, #5
   1374c:	movw	r1, #31344	; 0x7a70
   13750:	movt	r1, #1
   13754:	mov	r0, #0
   13758:	bl	10d58 <dcgettext@plt>
   1375c:	mov	r2, r0
   13760:	mov	r1, r4
   13764:	mov	r0, #1
   13768:	bl	10dc4 <error@plt>
   1376c:	strb	r3, [r9, r7]
   13770:	add	r5, r5, #1
   13774:	cmp	r5, #256	; 0x100
   13778:	beq	1387c <__assert_fail@plt+0x2968>
   1377c:	ldrh	r3, [r6, #2]!
   13780:	tst	r3, #512	; 0x200
   13784:	beq	13770 <__assert_fail@plt+0x285c>
   13788:	mov	r9, r5
   1378c:	add	r3, r5, #128	; 0x80
   13790:	cmp	r3, #384	; 0x180
   13794:	movcs	r3, r5
   13798:	bcs	1376c <__assert_fail@plt+0x2858>
   1379c:	bl	10e00 <__ctype_toupper_loc@plt>
   137a0:	ldr	r3, [r0]
   137a4:	ldr	r3, [r3, r5, lsl #2]
   137a8:	b	1376c <__assert_fail@plt+0x2858>
   137ac:	cmp	r3, #1
   137b0:	bne	137c0 <__assert_fail@plt+0x28ac>
   137b4:	ldr	r3, [sp, #40]	; 0x28
   137b8:	cmp	r3, #0
   137bc:	beq	13828 <__assert_fail@plt+0x2914>
   137c0:	cmn	r5, #1
   137c4:	cmnne	r0, #1
   137c8:	beq	138ac <__assert_fail@plt+0x2998>
   137cc:	add	r5, r8, r5
   137d0:	strb	r0, [r5, #256]	; 0x100
   137d4:	ldr	r3, [sp, #40]	; 0x28
   137d8:	cmp	r3, #2
   137dc:	bne	1387c <__assert_fail@plt+0x2968>
   137e0:	add	r1, sp, #36	; 0x24
   137e4:	add	r0, sp, #336	; 0x150
   137e8:	bl	12140 <__assert_fail@plt+0x122c>
   137ec:	mov	r5, r0
   137f0:	add	r1, sp, #40	; 0x28
   137f4:	mov	r0, r4
   137f8:	bl	12140 <__assert_fail@plt+0x122c>
   137fc:	ldr	r3, [sp, #36]	; 0x24
   13800:	cmp	r3, #0
   13804:	bne	137ac <__assert_fail@plt+0x2898>
   13808:	ldr	r3, [sp, #40]	; 0x28
   1380c:	cmp	r3, #1
   13810:	bne	137c0 <__assert_fail@plt+0x28ac>
   13814:	bl	10e24 <__ctype_b_loc@plt>
   13818:	ldr	r6, [r0]
   1381c:	sub	r6, r6, #2
   13820:	mov	r5, #0
   13824:	b	1377c <__assert_fail@plt+0x2868>
   13828:	bl	10e24 <__ctype_b_loc@plt>
   1382c:	ldr	r6, [r0]
   13830:	sub	r6, r6, #2
   13834:	mov	r5, #0
   13838:	b	1384c <__assert_fail@plt+0x2938>
   1383c:	strb	r3, [r9, r7]
   13840:	add	r5, r5, #1
   13844:	cmp	r5, #256	; 0x100
   13848:	beq	1387c <__assert_fail@plt+0x2968>
   1384c:	ldrh	r3, [r6, #2]!
   13850:	tst	r3, #256	; 0x100
   13854:	beq	13840 <__assert_fail@plt+0x292c>
   13858:	mov	r9, r5
   1385c:	add	r3, r5, #128	; 0x80
   13860:	cmp	r3, #384	; 0x180
   13864:	movcs	r3, r5
   13868:	bcs	1383c <__assert_fail@plt+0x2928>
   1386c:	bl	10df4 <__ctype_tolower_loc@plt>
   13870:	ldr	r3, [r0]
   13874:	ldr	r3, [r3, r5, lsl #2]
   13878:	b	1383c <__assert_fail@plt+0x2928>
   1387c:	ldr	r3, [sp, #340]	; 0x154
   13880:	ldr	r3, [r3, #4]
   13884:	str	r3, [sp, #340]	; 0x154
   13888:	mvn	r2, #0
   1388c:	mvn	r3, #0
   13890:	add	r1, sp, #344	; 0x158
   13894:	strd	r2, [r1]
   13898:	ldr	r1, [r4, #4]
   1389c:	ldr	r1, [r1, #4]
   138a0:	str	r1, [r4, #4]
   138a4:	strd	r2, [r4, #8]
   138a8:	b	137e0 <__assert_fail@plt+0x28cc>
   138ac:	cmn	r5, #1
   138b0:	beq	136e8 <__assert_fail@plt+0x27d4>
   138b4:	movw	r3, #37212	; 0x915c
   138b8:	movt	r3, #2
   138bc:	ldrb	r3, [r3, #771]	; 0x303
   138c0:	cmp	r3, #0
   138c4:	bne	136e8 <__assert_fail@plt+0x27d4>
   138c8:	ldr	r3, [pc, #188]	; 1398c <__assert_fail@plt+0x2a78>
   138cc:	movw	r2, #1893	; 0x765
   138d0:	movw	r1, #30692	; 0x77e4
   138d4:	movt	r1, #1
   138d8:	movw	r0, #34992	; 0x88b0
   138dc:	movt	r0, #1
   138e0:	bl	10f14 <__assert_fail@plt>
   138e4:	ldr	r2, [pc, #164]	; 13990 <__assert_fail@plt+0x2a7c>
   138e8:	mov	r1, #0
   138ec:	mov	r0, r4
   138f0:	bl	12458 <__assert_fail@plt+0x1544>
   138f4:	movw	r2, #4664	; 0x1238
   138f8:	movt	r2, #1
   138fc:	mov	r1, #8192	; 0x2000
   13900:	movw	r0, #37988	; 0x9464
   13904:	movt	r0, #2
   13908:	bl	124dc <__assert_fail@plt+0x15c8>
   1390c:	mov	r0, #0
   13910:	bl	10f08 <close@plt>
   13914:	cmp	r0, #0
   13918:	bne	13924 <__assert_fail@plt+0x2a10>
   1391c:	mov	r0, #0
   13920:	bl	10e30 <exit@plt>
   13924:	bl	10e54 <__errno_location@plt>
   13928:	ldr	r4, [r0]
   1392c:	mov	r2, #5
   13930:	movw	r1, #35020	; 0x88cc
   13934:	movt	r1, #1
   13938:	mov	r0, #0
   1393c:	bl	10d58 <dcgettext@plt>
   13940:	mov	r2, r0
   13944:	mov	r1, r4
   13948:	mov	r0, #1
   1394c:	bl	10dc4 <error@plt>
   13950:	add	r3, sp, #352	; 0x160
   13954:	ldrd	r8, [r3]
   13958:	ldrd	r0, [r4, #16]
   1395c:	cmp	r9, r1
   13960:	cmpeq	r8, r0
   13964:	bls	1337c <__assert_fail@plt+0x2468>
   13968:	movw	r3, #37212	; 0x915c
   1396c:	movt	r3, #2
   13970:	ldrb	r3, [r3, #771]	; 0x303
   13974:	cmp	r3, #0
   13978:	bne	1337c <__assert_fail@plt+0x2468>
   1397c:	b	132d4 <__assert_fail@plt+0x23c0>
   13980:	andeq	r7, r1, r8, asr #14
   13984:			; <UNDEFINED> instruction: 0x000177b8
   13988:	andeq	r9, r2, fp, asr r2
   1398c:	ldrdeq	r7, [r1], -r0
   13990:	andeq	r9, r2, ip, asr r3
   13994:	movw	r3, #46180	; 0xb464
   13998:	movt	r3, #2
   1399c:	str	r0, [r3]
   139a0:	bx	lr
   139a4:	movw	r3, #46180	; 0xb464
   139a8:	movt	r3, #2
   139ac:	strb	r0, [r3, #4]
   139b0:	bx	lr
   139b4:	strd	r4, [sp, #-16]!
   139b8:	str	r6, [sp, #8]
   139bc:	str	lr, [sp, #12]
   139c0:	sub	sp, sp, #8
   139c4:	movw	r3, #37204	; 0x9154
   139c8:	movt	r3, #2
   139cc:	ldr	r0, [r3]
   139d0:	bl	17154 <__assert_fail@plt+0x6240>
   139d4:	cmp	r0, #0
   139d8:	beq	13a00 <__assert_fail@plt+0x2aec>
   139dc:	movw	r3, #46180	; 0xb464
   139e0:	movt	r3, #2
   139e4:	ldrb	r3, [r3, #4]
   139e8:	cmp	r3, #0
   139ec:	beq	13a2c <__assert_fail@plt+0x2b18>
   139f0:	bl	10e54 <__errno_location@plt>
   139f4:	ldr	r3, [r0]
   139f8:	cmp	r3, #32
   139fc:	bne	13a2c <__assert_fail@plt+0x2b18>
   13a00:	movw	r3, #37192	; 0x9148
   13a04:	movt	r3, #2
   13a08:	ldr	r0, [r3]
   13a0c:	bl	17154 <__assert_fail@plt+0x6240>
   13a10:	cmp	r0, #0
   13a14:	bne	13ab4 <__assert_fail@plt+0x2ba0>
   13a18:	add	sp, sp, #8
   13a1c:	ldrd	r4, [sp]
   13a20:	ldr	r6, [sp, #8]
   13a24:	add	sp, sp, #12
   13a28:	pop	{pc}		; (ldr pc, [sp], #4)
   13a2c:	mov	r2, #5
   13a30:	movw	r1, #31344	; 0x7a70
   13a34:	movt	r1, #1
   13a38:	mov	r0, #0
   13a3c:	bl	10d58 <dcgettext@plt>
   13a40:	mov	r4, r0
   13a44:	movw	r3, #46180	; 0xb464
   13a48:	movt	r3, #2
   13a4c:	ldr	r5, [r3]
   13a50:	cmp	r5, #0
   13a54:	beq	13a94 <__assert_fail@plt+0x2b80>
   13a58:	bl	10e54 <__errno_location@plt>
   13a5c:	ldr	r6, [r0]
   13a60:	mov	r0, r5
   13a64:	bl	15c8c <__assert_fail@plt+0x4d78>
   13a68:	str	r4, [sp]
   13a6c:	mov	r3, r0
   13a70:	movw	r2, #35324	; 0x89fc
   13a74:	movt	r2, #1
   13a78:	mov	r1, r6
   13a7c:	mov	r0, #0
   13a80:	bl	10dc4 <error@plt>
   13a84:	movw	r3, #37104	; 0x90f0
   13a88:	movt	r3, #2
   13a8c:	ldr	r0, [r3]
   13a90:	bl	10cf8 <_exit@plt>
   13a94:	bl	10e54 <__errno_location@plt>
   13a98:	mov	r3, r4
   13a9c:	movw	r2, #35328	; 0x8a00
   13aa0:	movt	r2, #1
   13aa4:	ldr	r1, [r0]
   13aa8:	mov	r0, #0
   13aac:	bl	10dc4 <error@plt>
   13ab0:	b	13a84 <__assert_fail@plt+0x2b70>
   13ab4:	movw	r3, #37104	; 0x90f0
   13ab8:	movt	r3, #2
   13abc:	ldr	r0, [r3]
   13ac0:	bl	10cf8 <_exit@plt>
   13ac4:	strd	r4, [sp, #-12]!
   13ac8:	str	lr, [sp, #8]
   13acc:	sub	sp, sp, #20
   13ad0:	ldr	r1, [sp, #40]	; 0x28
   13ad4:	str	r1, [sp, #8]
   13ad8:	ldrd	r4, [sp, #32]
   13adc:	strd	r4, [sp]
   13ae0:	bl	10cc8 <posix_fadvise64@plt>
   13ae4:	add	sp, sp, #20
   13ae8:	ldrd	r4, [sp]
   13aec:	add	sp, sp, #8
   13af0:	pop	{pc}		; (ldr pc, [sp], #4)
   13af4:	cmp	r0, #0
   13af8:	bxeq	lr
   13afc:	str	r4, [sp, #-8]!
   13b00:	str	lr, [sp, #4]
   13b04:	sub	sp, sp, #16
   13b08:	mov	r4, r1
   13b0c:	bl	10e90 <fileno@plt>
   13b10:	str	r4, [sp, #8]
   13b14:	mov	r2, #0
   13b18:	mov	r3, #0
   13b1c:	strd	r2, [sp]
   13b20:	bl	10cc8 <posix_fadvise64@plt>
   13b24:	add	sp, sp, #16
   13b28:	ldr	r4, [sp]
   13b2c:	add	sp, sp, #4
   13b30:	pop	{pc}		; (ldr pc, [sp], #4)
   13b34:	strd	r4, [sp, #-12]!
   13b38:	str	lr, [sp, #8]
   13b3c:	sub	sp, sp, #12
   13b40:	mov	r5, r0
   13b44:	bl	10e54 <__errno_location@plt>
   13b48:	mov	r4, r0
   13b4c:	ldr	r3, [r0]
   13b50:	str	r3, [sp]
   13b54:	str	r3, [sp, #4]
   13b58:	mov	r3, #0
   13b5c:	str	r3, [r0]
   13b60:	mov	r0, r5
   13b64:	bl	10cec <free@plt>
   13b68:	ldr	r3, [r4]
   13b6c:	clz	r3, r3
   13b70:	lsr	r3, r3, #5
   13b74:	add	r2, sp, #8
   13b78:	add	r3, r2, r3, lsl #2
   13b7c:	ldr	r3, [r3, #-8]
   13b80:	str	r3, [r4]
   13b84:	add	sp, sp, #12
   13b88:	ldrd	r4, [sp]
   13b8c:	add	sp, sp, #8
   13b90:	pop	{pc}		; (ldr pc, [sp], #4)
   13b94:	strd	r4, [sp, #-16]!
   13b98:	str	r6, [sp, #8]
   13b9c:	str	lr, [sp, #12]
   13ba0:	subs	r4, r0, #0
   13ba4:	beq	13c40 <__assert_fail@plt+0x2d2c>
   13ba8:	mov	r1, #47	; 0x2f
   13bac:	mov	r0, r4
   13bb0:	bl	10ecc <strrchr@plt>
   13bb4:	subs	r5, r0, #0
   13bb8:	beq	13c18 <__assert_fail@plt+0x2d04>
   13bbc:	add	r6, r5, #1
   13bc0:	sub	r3, r6, r4
   13bc4:	cmp	r3, #6
   13bc8:	ble	13c18 <__assert_fail@plt+0x2d04>
   13bcc:	mov	r2, #7
   13bd0:	movw	r1, #35388	; 0x8a3c
   13bd4:	movt	r1, #1
   13bd8:	sub	r0, r5, #6
   13bdc:	bl	10ef0 <strncmp@plt>
   13be0:	cmp	r0, #0
   13be4:	bne	13c18 <__assert_fail@plt+0x2d04>
   13be8:	mov	r2, #3
   13bec:	movw	r1, #35396	; 0x8a44
   13bf0:	movt	r1, #1
   13bf4:	mov	r0, r6
   13bf8:	bl	10ef0 <strncmp@plt>
   13bfc:	cmp	r0, #0
   13c00:	movne	r4, r6
   13c04:	bne	13c18 <__assert_fail@plt+0x2d04>
   13c08:	add	r4, r5, #4
   13c0c:	movw	r3, #37176	; 0x9138
   13c10:	movt	r3, #2
   13c14:	str	r4, [r3]
   13c18:	movw	r3, #46188	; 0xb46c
   13c1c:	movt	r3, #2
   13c20:	str	r4, [r3]
   13c24:	movw	r3, #37180	; 0x913c
   13c28:	movt	r3, #2
   13c2c:	str	r4, [r3]
   13c30:	ldrd	r4, [sp]
   13c34:	ldr	r6, [sp, #8]
   13c38:	add	sp, sp, #12
   13c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c40:	movw	r3, #37192	; 0x9148
   13c44:	movt	r3, #2
   13c48:	ldr	r3, [r3]
   13c4c:	mov	r2, #55	; 0x37
   13c50:	mov	r1, #1
   13c54:	movw	r0, #35332	; 0x8a04
   13c58:	movt	r0, #1
   13c5c:	bl	10d88 <fwrite@plt>
   13c60:	bl	10efc <abort@plt>
   13c64:	mov	r2, #0
   13c68:	mov	r3, #0
   13c6c:	strd	r2, [r0]
   13c70:	strd	r2, [r0, #8]
   13c74:	strd	r2, [r0, #16]
   13c78:	strd	r2, [r0, #24]
   13c7c:	strd	r2, [r0, #32]
   13c80:	strd	r2, [r0, #40]	; 0x28
   13c84:	cmp	r1, #10
   13c88:	beq	13c94 <__assert_fail@plt+0x2d80>
   13c8c:	str	r1, [r0]
   13c90:	bx	lr
   13c94:	str	r4, [sp, #-8]!
   13c98:	str	lr, [sp, #4]
   13c9c:	bl	10efc <abort@plt>
   13ca0:	strd	r4, [sp, #-16]!
   13ca4:	str	r6, [sp, #8]
   13ca8:	str	lr, [sp, #12]
   13cac:	mov	r5, r0
   13cb0:	mov	r6, r1
   13cb4:	mov	r2, #5
   13cb8:	mov	r1, r0
   13cbc:	mov	r0, #0
   13cc0:	bl	10d58 <dcgettext@plt>
   13cc4:	mov	r4, r0
   13cc8:	cmp	r5, r0
   13ccc:	beq	13ce4 <__assert_fail@plt+0x2dd0>
   13cd0:	mov	r0, r4
   13cd4:	ldrd	r4, [sp]
   13cd8:	ldr	r6, [sp, #8]
   13cdc:	add	sp, sp, #12
   13ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ce4:	bl	173cc <__assert_fail@plt+0x64b8>
   13ce8:	ldrb	r3, [r0]
   13cec:	bic	r3, r3, #32
   13cf0:	cmp	r3, #85	; 0x55
   13cf4:	bne	13d78 <__assert_fail@plt+0x2e64>
   13cf8:	ldrb	r3, [r0, #1]
   13cfc:	bic	r3, r3, #32
   13d00:	cmp	r3, #84	; 0x54
   13d04:	bne	13d3c <__assert_fail@plt+0x2e28>
   13d08:	ldrb	r3, [r0, #2]
   13d0c:	bic	r3, r3, #32
   13d10:	cmp	r3, #70	; 0x46
   13d14:	bne	13d3c <__assert_fail@plt+0x2e28>
   13d18:	ldrb	r3, [r0, #3]
   13d1c:	cmp	r3, #45	; 0x2d
   13d20:	bne	13d3c <__assert_fail@plt+0x2e28>
   13d24:	ldrb	r3, [r0, #4]
   13d28:	cmp	r3, #56	; 0x38
   13d2c:	bne	13d3c <__assert_fail@plt+0x2e28>
   13d30:	ldrb	r3, [r0, #5]
   13d34:	cmp	r3, #0
   13d38:	beq	13d58 <__assert_fail@plt+0x2e44>
   13d3c:	movw	r4, #35484	; 0x8a9c
   13d40:	movt	r4, #1
   13d44:	movw	r3, #35504	; 0x8ab0
   13d48:	movt	r3, #1
   13d4c:	cmp	r6, #9
   13d50:	movne	r4, r3
   13d54:	b	13cd0 <__assert_fail@plt+0x2dbc>
   13d58:	ldrb	r2, [r4]
   13d5c:	movw	r4, #35500	; 0x8aac
   13d60:	movt	r4, #1
   13d64:	movw	r3, #35488	; 0x8aa0
   13d68:	movt	r3, #1
   13d6c:	cmp	r2, #96	; 0x60
   13d70:	movne	r4, r3
   13d74:	b	13cd0 <__assert_fail@plt+0x2dbc>
   13d78:	cmp	r3, #71	; 0x47
   13d7c:	bne	13d3c <__assert_fail@plt+0x2e28>
   13d80:	ldrb	r3, [r0, #1]
   13d84:	bic	r3, r3, #32
   13d88:	cmp	r3, #66	; 0x42
   13d8c:	bne	13d3c <__assert_fail@plt+0x2e28>
   13d90:	ldrb	r3, [r0, #2]
   13d94:	cmp	r3, #49	; 0x31
   13d98:	bne	13d3c <__assert_fail@plt+0x2e28>
   13d9c:	ldrb	r3, [r0, #3]
   13da0:	cmp	r3, #56	; 0x38
   13da4:	bne	13d3c <__assert_fail@plt+0x2e28>
   13da8:	ldrb	r3, [r0, #4]
   13dac:	cmp	r3, #48	; 0x30
   13db0:	bne	13d3c <__assert_fail@plt+0x2e28>
   13db4:	ldrb	r3, [r0, #5]
   13db8:	cmp	r3, #51	; 0x33
   13dbc:	bne	13d3c <__assert_fail@plt+0x2e28>
   13dc0:	ldrb	r3, [r0, #6]
   13dc4:	cmp	r3, #48	; 0x30
   13dc8:	bne	13d3c <__assert_fail@plt+0x2e28>
   13dcc:	ldrb	r3, [r0, #7]
   13dd0:	cmp	r3, #0
   13dd4:	bne	13d3c <__assert_fail@plt+0x2e28>
   13dd8:	ldrb	r2, [r4]
   13ddc:	movw	r4, #35496	; 0x8aa8
   13de0:	movt	r4, #1
   13de4:	movw	r3, #35492	; 0x8aa4
   13de8:	movt	r3, #1
   13dec:	cmp	r2, #96	; 0x60
   13df0:	movne	r4, r3
   13df4:	b	13cd0 <__assert_fail@plt+0x2dbc>
   13df8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13dfc:	strd	r6, [sp, #8]
   13e00:	strd	r8, [sp, #16]
   13e04:	strd	sl, [sp, #24]
   13e08:	str	lr, [sp, #32]
   13e0c:	sub	sp, sp, #116	; 0x74
   13e10:	str	r0, [sp, #64]	; 0x40
   13e14:	mov	r8, r1
   13e18:	str	r2, [sp, #48]	; 0x30
   13e1c:	str	r3, [sp, #24]
   13e20:	ldr	r7, [sp, #152]	; 0x98
   13e24:	bl	10da0 <__ctype_get_mb_cur_max@plt>
   13e28:	str	r0, [sp, #76]	; 0x4c
   13e2c:	ldr	r3, [sp, #156]	; 0x9c
   13e30:	ubfx	r3, r3, #1, #1
   13e34:	str	r3, [sp, #32]
   13e38:	mov	r3, #1
   13e3c:	str	r3, [sp, #40]	; 0x28
   13e40:	mov	r3, #0
   13e44:	str	r3, [sp, #68]	; 0x44
   13e48:	str	r3, [sp, #36]	; 0x24
   13e4c:	str	r3, [sp, #28]
   13e50:	str	r3, [sp, #52]	; 0x34
   13e54:	str	r3, [sp, #60]	; 0x3c
   13e58:	str	r3, [sp, #72]	; 0x48
   13e5c:	movw	r3, #35508	; 0x8ab4
   13e60:	movt	r3, #1
   13e64:	str	r3, [sp, #80]	; 0x50
   13e68:	mov	r9, r8
   13e6c:	mov	sl, r7
   13e70:	cmp	sl, #10
   13e74:	ldrls	pc, [pc, sl, lsl #2]
   13e78:	b	1403c <__assert_fail@plt+0x3128>
   13e7c:	ldrdeq	r3, [r1], -ip
   13e80:			; <UNDEFINED> instruction: 0x00013eb0
   13e84:	andeq	r4, r1, r4, lsl r0
   13e88:	andeq	r3, r1, r8, lsr #29
   13e8c:	andeq	r3, r1, r8, asr #31
   13e90:	andeq	r3, r1, ip, ror #29
   13e94:			; <UNDEFINED> instruction: 0x000152b8
   13e98:	andeq	r4, r1, r0, asr #32
   13e9c:	andeq	r3, r1, r8, lsr #30
   13ea0:	andeq	r3, r1, r8, lsr #30
   13ea4:	andeq	r3, r1, r8, lsr #30
   13ea8:	mov	r3, #1
   13eac:	str	r3, [sp, #28]
   13eb0:	mov	r3, #1
   13eb4:	str	r3, [sp, #32]
   13eb8:	str	r3, [sp, #52]	; 0x34
   13ebc:	movw	r3, #35504	; 0x8ab0
   13ec0:	movt	r3, #1
   13ec4:	str	r3, [sp, #60]	; 0x3c
   13ec8:	mov	fp, #0
   13ecc:	mov	sl, #2
   13ed0:	mov	r6, #0
   13ed4:	ldr	r8, [sp, #64]	; 0x40
   13ed8:	b	14750 <__assert_fail@plt+0x383c>
   13edc:	mov	fp, sl
   13ee0:	mov	r3, #0
   13ee4:	str	r3, [sp, #32]
   13ee8:	b	13ed0 <__assert_fail@plt+0x2fbc>
   13eec:	ldr	r3, [sp, #32]
   13ef0:	cmp	r3, #0
   13ef4:	bne	14054 <__assert_fail@plt+0x3140>
   13ef8:	cmp	r9, #0
   13efc:	beq	14078 <__assert_fail@plt+0x3164>
   13f00:	mov	r3, #34	; 0x22
   13f04:	ldr	r2, [sp, #64]	; 0x40
   13f08:	strb	r3, [r2]
   13f0c:	mov	fp, #1
   13f10:	str	fp, [sp, #28]
   13f14:	str	fp, [sp, #52]	; 0x34
   13f18:	movw	r3, #35484	; 0x8a9c
   13f1c:	movt	r3, #1
   13f20:	str	r3, [sp, #60]	; 0x3c
   13f24:	b	13ed0 <__assert_fail@plt+0x2fbc>
   13f28:	cmp	sl, #10
   13f2c:	bne	13f60 <__assert_fail@plt+0x304c>
   13f30:	ldr	r3, [sp, #32]
   13f34:	cmp	r3, #0
   13f38:	movne	fp, #0
   13f3c:	beq	13f88 <__assert_fail@plt+0x3074>
   13f40:	ldr	r0, [sp, #168]	; 0xa8
   13f44:	bl	10e3c <strlen@plt>
   13f48:	str	r0, [sp, #52]	; 0x34
   13f4c:	ldr	r3, [sp, #168]	; 0xa8
   13f50:	str	r3, [sp, #60]	; 0x3c
   13f54:	mov	r3, #1
   13f58:	str	r3, [sp, #28]
   13f5c:	b	13ed0 <__assert_fail@plt+0x2fbc>
   13f60:	mov	r1, sl
   13f64:	ldr	r0, [sp, #80]	; 0x50
   13f68:	bl	13ca0 <__assert_fail@plt+0x2d8c>
   13f6c:	str	r0, [sp, #164]	; 0xa4
   13f70:	mov	r1, sl
   13f74:	movw	r0, #35504	; 0x8ab0
   13f78:	movt	r0, #1
   13f7c:	bl	13ca0 <__assert_fail@plt+0x2d8c>
   13f80:	str	r0, [sp, #168]	; 0xa8
   13f84:	b	13f30 <__assert_fail@plt+0x301c>
   13f88:	ldr	r3, [sp, #164]	; 0xa4
   13f8c:	ldrb	r3, [r3]
   13f90:	cmp	r3, #0
   13f94:	beq	13fc0 <__assert_fail@plt+0x30ac>
   13f98:	ldr	r2, [sp, #164]	; 0xa4
   13f9c:	mov	fp, #0
   13fa0:	ldr	r1, [sp, #64]	; 0x40
   13fa4:	cmp	r9, fp
   13fa8:	strbhi	r3, [r1, fp]
   13fac:	add	fp, fp, #1
   13fb0:	ldrb	r3, [r2, #1]!
   13fb4:	cmp	r3, #0
   13fb8:	bne	13fa4 <__assert_fail@plt+0x3090>
   13fbc:	b	13f40 <__assert_fail@plt+0x302c>
   13fc0:	mov	fp, #0
   13fc4:	b	13f40 <__assert_fail@plt+0x302c>
   13fc8:	ldr	r3, [sp, #32]
   13fcc:	cmp	r3, #0
   13fd0:	bne	13eb0 <__assert_fail@plt+0x2f9c>
   13fd4:	mov	r3, #1
   13fd8:	str	r3, [sp, #28]
   13fdc:	cmp	r9, #0
   13fe0:	beq	14094 <__assert_fail@plt+0x3180>
   13fe4:	mov	r3, #39	; 0x27
   13fe8:	ldr	r2, [sp, #64]	; 0x40
   13fec:	strb	r3, [r2]
   13ff0:	mov	r3, #0
   13ff4:	str	r3, [sp, #32]
   13ff8:	mov	fp, #1
   13ffc:	str	fp, [sp, #52]	; 0x34
   14000:	movw	r3, #35504	; 0x8ab0
   14004:	movt	r3, #1
   14008:	str	r3, [sp, #60]	; 0x3c
   1400c:	mov	sl, #2
   14010:	b	13ed0 <__assert_fail@plt+0x2fbc>
   14014:	ldr	r3, [sp, #32]
   14018:	cmp	r3, #0
   1401c:	beq	13fdc <__assert_fail@plt+0x30c8>
   14020:	mov	r3, #1
   14024:	str	r3, [sp, #52]	; 0x34
   14028:	movw	r3, #35504	; 0x8ab0
   1402c:	movt	r3, #1
   14030:	str	r3, [sp, #60]	; 0x3c
   14034:	mov	fp, #0
   14038:	b	13ed0 <__assert_fail@plt+0x2fbc>
   1403c:	bl	10efc <abort@plt>
   14040:	mov	fp, #0
   14044:	str	fp, [sp, #32]
   14048:	mov	r3, #1
   1404c:	str	r3, [sp, #28]
   14050:	b	13ed0 <__assert_fail@plt+0x2fbc>
   14054:	ldr	r3, [sp, #32]
   14058:	str	r3, [sp, #28]
   1405c:	mov	r3, #1
   14060:	str	r3, [sp, #52]	; 0x34
   14064:	movw	r3, #35484	; 0x8a9c
   14068:	movt	r3, #1
   1406c:	str	r3, [sp, #60]	; 0x3c
   14070:	mov	fp, #0
   14074:	b	13ed0 <__assert_fail@plt+0x2fbc>
   14078:	mov	fp, #1
   1407c:	str	fp, [sp, #28]
   14080:	str	fp, [sp, #52]	; 0x34
   14084:	movw	r3, #35484	; 0x8a9c
   14088:	movt	r3, #1
   1408c:	str	r3, [sp, #60]	; 0x3c
   14090:	b	13ed0 <__assert_fail@plt+0x2fbc>
   14094:	mov	r3, #0
   14098:	str	r3, [sp, #32]
   1409c:	mov	fp, #1
   140a0:	str	fp, [sp, #52]	; 0x34
   140a4:	movw	r3, #35504	; 0x8ab0
   140a8:	movt	r3, #1
   140ac:	str	r3, [sp, #60]	; 0x3c
   140b0:	mov	sl, #2
   140b4:	b	13ed0 <__assert_fail@plt+0x2fbc>
   140b8:	mov	r3, r2
   140bc:	add	r4, r6, r2
   140c0:	ldr	r2, [sp, #24]
   140c4:	cmp	r3, #1
   140c8:	movls	r3, #0
   140cc:	movhi	r3, #1
   140d0:	cmn	r2, #1
   140d4:	movne	r3, #0
   140d8:	cmp	r3, #0
   140dc:	beq	140ec <__assert_fail@plt+0x31d8>
   140e0:	ldr	r0, [sp, #48]	; 0x30
   140e4:	bl	10e3c <strlen@plt>
   140e8:	str	r0, [sp, #24]
   140ec:	ldr	r3, [sp, #24]
   140f0:	cmp	r4, r3
   140f4:	bhi	152e0 <__assert_fail@plt+0x43cc>
   140f8:	ldr	r3, [sp, #48]	; 0x30
   140fc:	add	r4, r3, r6
   14100:	ldr	r2, [sp, #52]	; 0x34
   14104:	ldr	r1, [sp, #60]	; 0x3c
   14108:	mov	r0, r4
   1410c:	bl	10d34 <memcmp@plt>
   14110:	cmp	r0, #0
   14114:	bne	152e0 <__assert_fail@plt+0x43cc>
   14118:	ldr	r3, [sp, #32]
   1411c:	cmp	r3, #0
   14120:	bne	14330 <__assert_fail@plt+0x341c>
   14124:	ldrb	r4, [r4]
   14128:	cmp	r4, #126	; 0x7e
   1412c:	ldrls	pc, [pc, r4, lsl #2]
   14130:	b	14be4 <__assert_fail@plt+0x3cd0>
   14134:	andeq	r4, r1, r4, ror r3
   14138:	andeq	r4, r1, r4, ror #23
   1413c:	andeq	r4, r1, r4, ror #23
   14140:	andeq	r4, r1, r4, ror #23
   14144:	andeq	r4, r1, r4, ror #23
   14148:	andeq	r4, r1, r4, ror #23
   1414c:	andeq	r4, r1, r4, ror #23
   14150:	andeq	r4, r1, ip, lsl #21
   14154:	andeq	r4, r1, r0, lsl r6
   14158:			; <UNDEFINED> instruction: 0x000149b4
   1415c:	andeq	r4, r1, r0, ror #20
   14160:	andeq	r4, r1, r8, asr #19
   14164:	andeq	r4, r1, r4, lsr #12
   14168:	andeq	r4, r1, r8, lsr r6
   1416c:	andeq	r4, r1, r4, ror #23
   14170:	andeq	r4, r1, r4, ror #23
   14174:	andeq	r4, r1, r4, ror #23
   14178:	andeq	r4, r1, r4, ror #23
   1417c:	andeq	r4, r1, r4, ror #23
   14180:	andeq	r4, r1, r4, ror #23
   14184:	andeq	r4, r1, r4, ror #23
   14188:	andeq	r4, r1, r4, ror #23
   1418c:	andeq	r4, r1, r4, ror #23
   14190:	andeq	r4, r1, r4, ror #23
   14194:	andeq	r4, r1, r4, ror #23
   14198:	andeq	r4, r1, r4, ror #23
   1419c:	andeq	r4, r1, r4, ror #23
   141a0:	andeq	r4, r1, r4, ror #23
   141a4:	andeq	r4, r1, r4, ror #23
   141a8:	andeq	r4, r1, r4, ror #23
   141ac:	andeq	r4, r1, r4, ror #23
   141b0:	andeq	r4, r1, r4, ror #23
   141b4:	andeq	r4, r1, r0, lsl #22
   141b8:	andeq	r4, r1, r4, lsr #22
   141bc:	andeq	r4, r1, r4, lsr #22
   141c0:			; <UNDEFINED> instruction: 0x00014abc
   141c4:	andeq	r4, r1, r4, lsr #22
   141c8:	andeq	r5, r1, r4, asr #32
   141cc:	andeq	r4, r1, r4, lsr #22
   141d0:	andeq	r4, r1, r4, asr #22
   141d4:	andeq	r4, r1, r4, lsr #22
   141d8:	andeq	r4, r1, r4, lsr #22
   141dc:	andeq	r4, r1, r4, lsr #22
   141e0:	andeq	r5, r1, r4, asr #32
   141e4:	andeq	r5, r1, r4, asr #32
   141e8:	andeq	r5, r1, r4, asr #32
   141ec:	andeq	r5, r1, r4, asr #32
   141f0:	andeq	r5, r1, r4, asr #32
   141f4:	andeq	r5, r1, r4, asr #32
   141f8:	andeq	r5, r1, r4, asr #32
   141fc:	andeq	r5, r1, r4, asr #32
   14200:	andeq	r5, r1, r4, asr #32
   14204:	andeq	r5, r1, r4, asr #32
   14208:	andeq	r5, r1, r4, asr #32
   1420c:	andeq	r5, r1, r4, asr #32
   14210:	andeq	r5, r1, r4, asr #32
   14214:	andeq	r5, r1, r4, asr #32
   14218:	andeq	r5, r1, r4, asr #32
   1421c:	andeq	r5, r1, r4, asr #32
   14220:	andeq	r4, r1, r4, lsr #22
   14224:	andeq	r4, r1, r4, lsr #22
   14228:	andeq	r4, r1, r4, lsr #22
   1422c:	andeq	r4, r1, r4, lsr #22
   14230:	andeq	r4, r1, r4, lsr #9
   14234:	andeq	r4, r1, r4, ror #23
   14238:	andeq	r5, r1, r4, asr #32
   1423c:	andeq	r5, r1, r4, asr #32
   14240:	andeq	r5, r1, r4, asr #32
   14244:	andeq	r5, r1, r4, asr #32
   14248:	andeq	r5, r1, r4, asr #32
   1424c:	andeq	r5, r1, r4, asr #32
   14250:	andeq	r5, r1, r4, asr #32
   14254:	andeq	r5, r1, r4, asr #32
   14258:	andeq	r5, r1, r4, asr #32
   1425c:	andeq	r5, r1, r4, asr #32
   14260:	andeq	r5, r1, r4, asr #32
   14264:	andeq	r5, r1, r4, asr #32
   14268:	andeq	r5, r1, r4, asr #32
   1426c:	andeq	r5, r1, r4, asr #32
   14270:	andeq	r5, r1, r4, asr #32
   14274:	andeq	r5, r1, r4, asr #32
   14278:	andeq	r5, r1, r4, asr #32
   1427c:	andeq	r5, r1, r4, asr #32
   14280:	andeq	r5, r1, r4, asr #32
   14284:	andeq	r5, r1, r4, asr #32
   14288:	andeq	r5, r1, r4, asr #32
   1428c:	andeq	r5, r1, r4, asr #32
   14290:	andeq	r5, r1, r4, asr #32
   14294:	andeq	r5, r1, r4, asr #32
   14298:	andeq	r5, r1, r4, asr #32
   1429c:	andeq	r5, r1, r4, asr #32
   142a0:	andeq	r4, r1, r4, lsr #22
   142a4:	ldrdeq	r4, [r1], -ip
   142a8:	andeq	r5, r1, r4, asr #32
   142ac:	andeq	r4, r1, r4, lsr #22
   142b0:	andeq	r5, r1, r4, asr #32
   142b4:	andeq	r4, r1, r4, lsr #22
   142b8:	andeq	r5, r1, r4, asr #32
   142bc:	andeq	r5, r1, r4, asr #32
   142c0:	andeq	r5, r1, r4, asr #32
   142c4:	andeq	r5, r1, r4, asr #32
   142c8:	andeq	r5, r1, r4, asr #32
   142cc:	andeq	r5, r1, r4, asr #32
   142d0:	andeq	r5, r1, r4, asr #32
   142d4:	andeq	r5, r1, r4, asr #32
   142d8:	andeq	r5, r1, r4, asr #32
   142dc:	andeq	r5, r1, r4, asr #32
   142e0:	andeq	r5, r1, r4, asr #32
   142e4:	andeq	r5, r1, r4, asr #32
   142e8:	andeq	r5, r1, r4, asr #32
   142ec:	andeq	r5, r1, r4, asr #32
   142f0:	andeq	r5, r1, r4, asr #32
   142f4:	andeq	r5, r1, r4, asr #32
   142f8:	andeq	r5, r1, r4, asr #32
   142fc:	andeq	r5, r1, r4, asr #32
   14300:	andeq	r5, r1, r4, asr #32
   14304:	andeq	r5, r1, r4, asr #32
   14308:	andeq	r5, r1, r4, asr #32
   1430c:	andeq	r5, r1, r4, asr #32
   14310:	andeq	r5, r1, r4, asr #32
   14314:	andeq	r5, r1, r4, asr #32
   14318:	andeq	r5, r1, r4, asr #32
   1431c:	andeq	r5, r1, r4, asr #32
   14320:	muleq	r1, ip, sl
   14324:	andeq	r4, r1, r4, lsr #22
   14328:	muleq	r1, ip, sl
   1432c:			; <UNDEFINED> instruction: 0x00014abc
   14330:	mov	r8, r9
   14334:	mov	r7, sl
   14338:	b	15238 <__assert_fail@plt+0x4324>
   1433c:	ldr	r3, [sp, #28]
   14340:	cmp	r3, #0
   14344:	bne	14364 <__assert_fail@plt+0x3450>
   14348:	ldr	r3, [sp, #156]	; 0x9c
   1434c:	tst	r3, #1
   14350:	bne	1474c <__assert_fail@plt+0x3838>
   14354:	ldr	r3, [sp, #28]
   14358:	str	r3, [sp, #44]	; 0x2c
   1435c:	mov	r5, r3
   14360:	b	1466c <__assert_fail@plt+0x3758>
   14364:	ldr	r3, [sp, #32]
   14368:	cmp	r3, #0
   1436c:	bne	151e8 <__assert_fail@plt+0x42d4>
   14370:	str	r3, [sp, #44]	; 0x2c
   14374:	ldr	r3, [sp, #36]	; 0x24
   14378:	eor	r3, r3, #1
   1437c:	cmp	sl, #2
   14380:	movne	r3, #0
   14384:	andeq	r3, r3, #1
   14388:	cmp	r3, #0
   1438c:	beq	143e4 <__assert_fail@plt+0x34d0>
   14390:	cmp	r9, fp
   14394:	movhi	r2, #39	; 0x27
   14398:	strbhi	r2, [r8, fp]
   1439c:	add	r2, fp, #1
   143a0:	cmp	r9, r2
   143a4:	movhi	r1, #36	; 0x24
   143a8:	strbhi	r1, [r8, r2]
   143ac:	add	r2, fp, #2
   143b0:	cmp	r9, r2
   143b4:	movhi	r1, #39	; 0x27
   143b8:	strbhi	r1, [r8, r2]
   143bc:	add	r2, fp, #3
   143c0:	cmp	r9, r2
   143c4:	bls	152a4 <__assert_fail@plt+0x4390>
   143c8:	mov	r1, #92	; 0x5c
   143cc:	strb	r1, [r8, r2]
   143d0:	add	fp, fp, #4
   143d4:	str	r3, [sp, #36]	; 0x24
   143d8:	mov	r5, #0
   143dc:	mov	r4, #48	; 0x30
   143e0:	b	146b8 <__assert_fail@plt+0x37a4>
   143e4:	cmp	r9, fp
   143e8:	bhi	14410 <__assert_fail@plt+0x34fc>
   143ec:	add	r1, fp, #1
   143f0:	ldr	r2, [sp, #56]	; 0x38
   143f4:	cmp	r2, #0
   143f8:	bne	14438 <__assert_fail@plt+0x3524>
   143fc:	mov	r3, r5
   14400:	ldr	r5, [sp, #56]	; 0x38
   14404:	mov	fp, r1
   14408:	mov	r4, #48	; 0x30
   1440c:	b	1466c <__assert_fail@plt+0x3758>
   14410:	mov	r2, #92	; 0x5c
   14414:	strb	r2, [r8, fp]
   14418:	add	r1, fp, #1
   1441c:	ldr	r2, [sp, #56]	; 0x38
   14420:	cmp	r2, #0
   14424:	moveq	r3, r5
   14428:	moveq	r5, r2
   1442c:	moveq	fp, r1
   14430:	moveq	r4, #48	; 0x30
   14434:	beq	146b8 <__assert_fail@plt+0x37a4>
   14438:	add	r2, r6, #1
   1443c:	ldr	r0, [sp, #24]
   14440:	cmp	r2, r0
   14444:	bcs	14460 <__assert_fail@plt+0x354c>
   14448:	ldr	r0, [sp, #48]	; 0x30
   1444c:	ldrb	r2, [r0, r2]
   14450:	sub	r2, r2, #48	; 0x30
   14454:	uxtb	r2, r2
   14458:	cmp	r2, #9
   1445c:	bls	14478 <__assert_fail@plt+0x3564>
   14460:	mov	r2, r3
   14464:	mov	r3, r5
   14468:	mov	r5, r2
   1446c:	mov	fp, r1
   14470:	mov	r4, #48	; 0x30
   14474:	b	14690 <__assert_fail@plt+0x377c>
   14478:	cmp	r9, r1
   1447c:	movhi	r2, #48	; 0x30
   14480:	strbhi	r2, [r8, r1]
   14484:	add	r2, fp, #2
   14488:	cmp	r9, r2
   1448c:	movhi	r1, #48	; 0x30
   14490:	strbhi	r1, [r8, r2]
   14494:	add	r1, fp, #3
   14498:	b	14460 <__assert_fail@plt+0x354c>
   1449c:	mov	r3, #0
   144a0:	str	r3, [sp, #44]	; 0x2c
   144a4:	cmp	sl, #2
   144a8:	beq	144c4 <__assert_fail@plt+0x35b0>
   144ac:	cmp	sl, #5
   144b0:	beq	144dc <__assert_fail@plt+0x35c8>
   144b4:	mov	r5, #0
   144b8:	mov	r3, r5
   144bc:	mov	r4, #63	; 0x3f
   144c0:	b	1466c <__assert_fail@plt+0x3758>
   144c4:	ldr	r3, [sp, #32]
   144c8:	cmp	r3, #0
   144cc:	bne	151f4 <__assert_fail@plt+0x42e0>
   144d0:	mov	r5, r3
   144d4:	mov	r4, #63	; 0x3f
   144d8:	b	14bd4 <__assert_fail@plt+0x3cc0>
   144dc:	ldr	r3, [sp, #156]	; 0x9c
   144e0:	tst	r3, #4
   144e4:	beq	1500c <__assert_fail@plt+0x40f8>
   144e8:	add	r2, r6, #2
   144ec:	ldr	r3, [sp, #24]
   144f0:	cmp	r2, r3
   144f4:	bcs	1501c <__assert_fail@plt+0x4108>
   144f8:	ldr	r3, [sp, #48]	; 0x30
   144fc:	add	r3, r3, r6
   14500:	ldrb	r4, [r3, #1]
   14504:	cmp	r4, #63	; 0x3f
   14508:	movne	r5, #0
   1450c:	movne	r3, r5
   14510:	movne	r4, #63	; 0x3f
   14514:	bne	1466c <__assert_fail@plt+0x3758>
   14518:	ldr	r3, [sp, #48]	; 0x30
   1451c:	ldrb	r1, [r3, r2]
   14520:	sub	r3, r1, #33	; 0x21
   14524:	cmp	r3, #29
   14528:	ldrls	pc, [pc, r3, lsl #2]
   1452c:	b	1502c <__assert_fail@plt+0x4118>
   14530:	andeq	r4, r1, r8, lsr #11
   14534:	andeq	r5, r1, ip, lsr #32
   14538:	andeq	r5, r1, ip, lsr #32
   1453c:	andeq	r5, r1, ip, lsr #32
   14540:	andeq	r5, r1, ip, lsr #32
   14544:	andeq	r5, r1, ip, lsr #32
   14548:	andeq	r4, r1, r8, lsr #11
   1454c:	andeq	r4, r1, r8, lsr #11
   14550:	andeq	r4, r1, r8, lsr #11
   14554:	andeq	r5, r1, ip, lsr #32
   14558:	andeq	r5, r1, ip, lsr #32
   1455c:	andeq	r5, r1, ip, lsr #32
   14560:	andeq	r4, r1, r8, lsr #11
   14564:	andeq	r5, r1, ip, lsr #32
   14568:	andeq	r4, r1, r8, lsr #11
   1456c:	andeq	r5, r1, ip, lsr #32
   14570:	andeq	r5, r1, ip, lsr #32
   14574:	andeq	r5, r1, ip, lsr #32
   14578:	andeq	r5, r1, ip, lsr #32
   1457c:	andeq	r5, r1, ip, lsr #32
   14580:	andeq	r5, r1, ip, lsr #32
   14584:	andeq	r5, r1, ip, lsr #32
   14588:	andeq	r5, r1, ip, lsr #32
   1458c:	andeq	r5, r1, ip, lsr #32
   14590:	andeq	r5, r1, ip, lsr #32
   14594:	andeq	r5, r1, ip, lsr #32
   14598:	andeq	r5, r1, ip, lsr #32
   1459c:	andeq	r4, r1, r8, lsr #11
   145a0:	andeq	r4, r1, r8, lsr #11
   145a4:	andeq	r4, r1, r8, lsr #11
   145a8:	ldr	r3, [sp, #32]
   145ac:	cmp	r3, #0
   145b0:	bne	15298 <__assert_fail@plt+0x4384>
   145b4:	cmp	r9, fp
   145b8:	movhi	r3, #63	; 0x3f
   145bc:	strbhi	r3, [r8, fp]
   145c0:	add	r3, fp, #1
   145c4:	cmp	r9, r3
   145c8:	movhi	r0, #34	; 0x22
   145cc:	strbhi	r0, [r8, r3]
   145d0:	add	r3, fp, #2
   145d4:	cmp	r9, r3
   145d8:	movhi	r0, #34	; 0x22
   145dc:	strbhi	r0, [r8, r3]
   145e0:	add	r3, fp, #3
   145e4:	cmp	r9, r3
   145e8:	movhi	r0, #63	; 0x3f
   145ec:	strbhi	r0, [r8, r3]
   145f0:	add	fp, fp, #4
   145f4:	ldr	r3, [sp, #32]
   145f8:	mov	r5, r3
   145fc:	mov	r4, r1
   14600:	mov	r6, r2
   14604:	b	1466c <__assert_fail@plt+0x3758>
   14608:	mov	r3, #0
   1460c:	str	r3, [sp, #44]	; 0x2c
   14610:	mov	r4, #8
   14614:	mov	r3, #98	; 0x62
   14618:	b	14658 <__assert_fail@plt+0x3744>
   1461c:	mov	r3, #0
   14620:	str	r3, [sp, #44]	; 0x2c
   14624:	mov	r4, #12
   14628:	mov	r3, #102	; 0x66
   1462c:	b	14658 <__assert_fail@plt+0x3744>
   14630:	mov	r3, #0
   14634:	str	r3, [sp, #44]	; 0x2c
   14638:	mov	r4, #13
   1463c:	mov	r3, #114	; 0x72
   14640:	ldr	r2, [sp, #32]
   14644:	cmp	sl, #2
   14648:	movne	r2, #0
   1464c:	andeq	r2, r2, #1
   14650:	cmp	r2, #0
   14654:	bne	14a78 <__assert_fail@plt+0x3b64>
   14658:	ldr	r2, [sp, #28]
   1465c:	cmp	r2, #0
   14660:	bne	15060 <__assert_fail@plt+0x414c>
   14664:	mov	r5, r2
   14668:	mov	r3, r2
   1466c:	ldr	r2, [sp, #28]
   14670:	eor	r2, r2, #1
   14674:	cmp	sl, #2
   14678:	orreq	r2, r2, #1
   1467c:	eor	r2, r2, #1
   14680:	ldr	r1, [sp, #32]
   14684:	orr	r2, r1, r2
   14688:	tst	r2, #255	; 0xff
   1468c:	beq	146b8 <__assert_fail@plt+0x37a4>
   14690:	ldr	r2, [sp, #160]	; 0xa0
   14694:	cmp	r2, #0
   14698:	beq	146b8 <__assert_fail@plt+0x37a4>
   1469c:	ubfx	r1, r4, #5, #8
   146a0:	and	r2, r4, #31
   146a4:	ldr	r0, [sp, #160]	; 0xa0
   146a8:	ldr	r1, [r0, r1, lsl #2]
   146ac:	lsr	r2, r1, r2
   146b0:	tst	r2, #1
   146b4:	bne	146c4 <__assert_fail@plt+0x37b0>
   146b8:	ldr	r2, [sp, #44]	; 0x2c
   146bc:	cmp	r2, #0
   146c0:	beq	14a18 <__assert_fail@plt+0x3b04>
   146c4:	ldr	r3, [sp, #32]
   146c8:	cmp	r3, #0
   146cc:	bne	15218 <__assert_fail@plt+0x4304>
   146d0:	ldr	r3, [sp, #36]	; 0x24
   146d4:	eor	r3, r3, #1
   146d8:	cmp	sl, #2
   146dc:	movne	r3, #0
   146e0:	andeq	r3, r3, #1
   146e4:	cmp	r3, #0
   146e8:	beq	14720 <__assert_fail@plt+0x380c>
   146ec:	cmp	r9, fp
   146f0:	movhi	r2, #39	; 0x27
   146f4:	strbhi	r2, [r8, fp]
   146f8:	add	r2, fp, #1
   146fc:	cmp	r9, r2
   14700:	movhi	r1, #36	; 0x24
   14704:	strbhi	r1, [r8, r2]
   14708:	add	r2, fp, #2
   1470c:	cmp	r9, r2
   14710:	movhi	r1, #39	; 0x27
   14714:	strbhi	r1, [r8, r2]
   14718:	add	fp, fp, #3
   1471c:	str	r3, [sp, #36]	; 0x24
   14720:	cmp	r9, fp
   14724:	movhi	r3, #92	; 0x5c
   14728:	strbhi	r3, [r8, fp]
   1472c:	add	fp, fp, #1
   14730:	cmp	fp, r9
   14734:	strbcc	r4, [r8, fp]
   14738:	add	fp, fp, #1
   1473c:	cmp	r5, #0
   14740:	ldr	r3, [sp, #40]	; 0x28
   14744:	moveq	r3, r5
   14748:	str	r3, [sp, #40]	; 0x28
   1474c:	add	r6, r6, #1
   14750:	ldr	r3, [sp, #24]
   14754:	cmn	r3, #1
   14758:	beq	15088 <__assert_fail@plt+0x4174>
   1475c:	ldr	r3, [sp, #24]
   14760:	subs	r5, r3, r6
   14764:	movne	r5, #1
   14768:	cmp	r5, #0
   1476c:	beq	1509c <__assert_fail@plt+0x4188>
   14770:	ldr	r3, [sp, #28]
   14774:	cmp	sl, #2
   14778:	moveq	r3, #0
   1477c:	andne	r3, r3, #1
   14780:	str	r3, [sp, #56]	; 0x38
   14784:	ldr	r2, [sp, #52]	; 0x34
   14788:	adds	r7, r2, #0
   1478c:	movne	r7, #1
   14790:	ands	r3, r3, r7
   14794:	str	r3, [sp, #44]	; 0x2c
   14798:	bne	140b8 <__assert_fail@plt+0x31a4>
   1479c:	ldr	r3, [sp, #48]	; 0x30
   147a0:	ldrb	r4, [r3, r6]
   147a4:	cmp	r4, #126	; 0x7e
   147a8:	ldrls	pc, [pc, r4, lsl #2]
   147ac:	b	14be4 <__assert_fail@plt+0x3cd0>
   147b0:	andeq	r4, r1, ip, lsr r3
   147b4:	andeq	r4, r1, r4, ror #23
   147b8:	andeq	r4, r1, r4, ror #23
   147bc:	andeq	r4, r1, r4, ror #23
   147c0:	andeq	r4, r1, r4, ror #23
   147c4:	andeq	r4, r1, r4, ror #23
   147c8:	andeq	r4, r1, r4, ror #23
   147cc:	andeq	r4, r1, r4, lsl #21
   147d0:	andeq	r4, r1, r0, lsl r6
   147d4:			; <UNDEFINED> instruction: 0x000149b4
   147d8:	andeq	r4, r1, r8, asr sl
   147dc:	andeq	r4, r1, r8, asr #19
   147e0:	andeq	r4, r1, r4, lsr #12
   147e4:	andeq	r4, r1, r8, lsr r6
   147e8:	andeq	r4, r1, r4, ror #23
   147ec:	andeq	r4, r1, r4, ror #23
   147f0:	andeq	r4, r1, r4, ror #23
   147f4:	andeq	r4, r1, r4, ror #23
   147f8:	andeq	r4, r1, r4, ror #23
   147fc:	andeq	r4, r1, r4, ror #23
   14800:	andeq	r4, r1, r4, ror #23
   14804:	andeq	r4, r1, r4, ror #23
   14808:	andeq	r4, r1, r4, ror #23
   1480c:	andeq	r4, r1, r4, ror #23
   14810:	andeq	r4, r1, r4, ror #23
   14814:	andeq	r4, r1, r4, ror #23
   14818:	andeq	r4, r1, r4, ror #23
   1481c:	andeq	r4, r1, r4, ror #23
   14820:	andeq	r4, r1, r4, ror #23
   14824:	andeq	r4, r1, r4, ror #23
   14828:	andeq	r4, r1, r4, ror #23
   1482c:	andeq	r4, r1, r4, ror #23
   14830:	andeq	r4, r1, r0, lsl #22
   14834:	strdeq	r4, [r1], -ip
   14838:	strdeq	r4, [r1], -ip
   1483c:			; <UNDEFINED> instruction: 0x00014abc
   14840:	strdeq	r4, [r1], -ip
   14844:	andeq	r5, r1, r4
   14848:	strdeq	r4, [r1], -ip
   1484c:	andeq	r4, r1, r4, asr #22
   14850:	strdeq	r4, [r1], -ip
   14854:	strdeq	r4, [r1], -ip
   14858:	strdeq	r4, [r1], -ip
   1485c:	andeq	r5, r1, r4
   14860:	andeq	r5, r1, r4
   14864:	andeq	r5, r1, r4
   14868:	andeq	r5, r1, r4
   1486c:	andeq	r5, r1, r4
   14870:	andeq	r5, r1, r4
   14874:	andeq	r5, r1, r4
   14878:	andeq	r5, r1, r4
   1487c:	andeq	r5, r1, r4
   14880:	andeq	r5, r1, r4
   14884:	andeq	r5, r1, r4
   14888:	andeq	r5, r1, r4
   1488c:	andeq	r5, r1, r4
   14890:	andeq	r5, r1, r4
   14894:	andeq	r5, r1, r4
   14898:	andeq	r5, r1, r4
   1489c:	strdeq	r4, [r1], -ip
   148a0:	strdeq	r4, [r1], -ip
   148a4:	strdeq	r4, [r1], -ip
   148a8:	strdeq	r4, [r1], -ip
   148ac:	andeq	r4, r1, r4, lsr #9
   148b0:	andeq	r4, r1, r4, ror #23
   148b4:	andeq	r5, r1, r4
   148b8:	andeq	r5, r1, r4
   148bc:	andeq	r5, r1, r4
   148c0:	andeq	r5, r1, r4
   148c4:	andeq	r5, r1, r4
   148c8:	andeq	r5, r1, r4
   148cc:	andeq	r5, r1, r4
   148d0:	andeq	r5, r1, r4
   148d4:	andeq	r5, r1, r4
   148d8:	andeq	r5, r1, r4
   148dc:	andeq	r5, r1, r4
   148e0:	andeq	r5, r1, r4
   148e4:	andeq	r5, r1, r4
   148e8:	andeq	r5, r1, r4
   148ec:	andeq	r5, r1, r4
   148f0:	andeq	r5, r1, r4
   148f4:	andeq	r5, r1, r4
   148f8:	andeq	r5, r1, r4
   148fc:	andeq	r5, r1, r4
   14900:	andeq	r5, r1, r4
   14904:	andeq	r5, r1, r4
   14908:	andeq	r5, r1, r4
   1490c:	andeq	r5, r1, r4
   14910:	andeq	r5, r1, r4
   14914:	andeq	r5, r1, r4
   14918:	andeq	r5, r1, r4
   1491c:	strdeq	r4, [r1], -ip
   14920:	ldrdeq	r4, [r1], -ip
   14924:	andeq	r5, r1, r4
   14928:	strdeq	r4, [r1], -ip
   1492c:	andeq	r5, r1, r4
   14930:	strdeq	r4, [r1], -ip
   14934:	andeq	r5, r1, r4
   14938:	andeq	r5, r1, r4
   1493c:	andeq	r5, r1, r4
   14940:	andeq	r5, r1, r4
   14944:	andeq	r5, r1, r4
   14948:	andeq	r5, r1, r4
   1494c:	andeq	r5, r1, r4
   14950:	andeq	r5, r1, r4
   14954:	andeq	r5, r1, r4
   14958:	andeq	r5, r1, r4
   1495c:	andeq	r5, r1, r4
   14960:	andeq	r5, r1, r4
   14964:	andeq	r5, r1, r4
   14968:	andeq	r5, r1, r4
   1496c:	andeq	r5, r1, r4
   14970:	andeq	r5, r1, r4
   14974:	andeq	r5, r1, r4
   14978:	andeq	r5, r1, r4
   1497c:	andeq	r5, r1, r4
   14980:	andeq	r5, r1, r4
   14984:	andeq	r5, r1, r4
   14988:	andeq	r5, r1, r4
   1498c:	andeq	r5, r1, r4
   14990:	andeq	r5, r1, r4
   14994:	andeq	r5, r1, r4
   14998:	andeq	r5, r1, r4
   1499c:	muleq	r1, ip, sl
   149a0:	strdeq	r4, [r1], -ip
   149a4:	muleq	r1, ip, sl
   149a8:			; <UNDEFINED> instruction: 0x00014abc
   149ac:	mov	r3, #0
   149b0:	str	r3, [sp, #44]	; 0x2c
   149b4:	mov	r4, #9
   149b8:	mov	r3, #116	; 0x74
   149bc:	b	14640 <__assert_fail@plt+0x372c>
   149c0:	mov	r3, #0
   149c4:	str	r3, [sp, #44]	; 0x2c
   149c8:	mov	r4, #11
   149cc:	mov	r3, #118	; 0x76
   149d0:	b	14658 <__assert_fail@plt+0x3744>
   149d4:	mov	r3, #0
   149d8:	str	r3, [sp, #44]	; 0x2c
   149dc:	cmp	sl, #2
   149e0:	beq	14a04 <__assert_fail@plt+0x3af0>
   149e4:	ldr	r3, [sp, #28]
   149e8:	ldr	r2, [sp, #32]
   149ec:	and	r3, r3, r2
   149f0:	tst	r7, r3
   149f4:	bne	15078 <__assert_fail@plt+0x4164>
   149f8:	mov	r4, #92	; 0x5c
   149fc:	mov	r3, r4
   14a00:	b	14658 <__assert_fail@plt+0x3744>
   14a04:	ldr	r3, [sp, #32]
   14a08:	cmp	r3, #0
   14a0c:	bne	15200 <__assert_fail@plt+0x42ec>
   14a10:	mov	r5, r3
   14a14:	mov	r4, #92	; 0x5c
   14a18:	eor	r3, r3, #1
   14a1c:	ldr	r2, [sp, #36]	; 0x24
   14a20:	and	r3, r3, r2
   14a24:	tst	r3, #255	; 0xff
   14a28:	beq	14730 <__assert_fail@plt+0x381c>
   14a2c:	cmp	r9, fp
   14a30:	movhi	r3, #39	; 0x27
   14a34:	strbhi	r3, [r8, fp]
   14a38:	add	r3, fp, #1
   14a3c:	cmp	r9, r3
   14a40:	movhi	r2, #39	; 0x27
   14a44:	strbhi	r2, [r8, r3]
   14a48:	add	fp, fp, #2
   14a4c:	mov	r3, #0
   14a50:	str	r3, [sp, #36]	; 0x24
   14a54:	b	14730 <__assert_fail@plt+0x381c>
   14a58:	mov	r3, #110	; 0x6e
   14a5c:	b	14640 <__assert_fail@plt+0x372c>
   14a60:	mov	r3, #110	; 0x6e
   14a64:	b	14640 <__assert_fail@plt+0x372c>
   14a68:	mov	r3, #0
   14a6c:	str	r3, [sp, #44]	; 0x2c
   14a70:	mov	r3, #110	; 0x6e
   14a74:	b	14640 <__assert_fail@plt+0x372c>
   14a78:	mov	r8, r9
   14a7c:	mov	r7, #2
   14a80:	b	15220 <__assert_fail@plt+0x430c>
   14a84:	mov	r3, #97	; 0x61
   14a88:	b	14658 <__assert_fail@plt+0x3744>
   14a8c:	mov	r3, #97	; 0x61
   14a90:	b	14658 <__assert_fail@plt+0x3744>
   14a94:	mov	r3, #0
   14a98:	str	r3, [sp, #44]	; 0x2c
   14a9c:	ldr	r3, [sp, #24]
   14aa0:	cmn	r3, #1
   14aa4:	beq	14ad0 <__assert_fail@plt+0x3bbc>
   14aa8:	ldr	r3, [sp, #24]
   14aac:	subs	r3, r3, #1
   14ab0:	movne	r3, #1
   14ab4:	cmp	r3, #0
   14ab8:	bne	15038 <__assert_fail@plt+0x4124>
   14abc:	cmp	r6, #0
   14ac0:	beq	14b00 <__assert_fail@plt+0x3bec>
   14ac4:	mov	r5, #0
   14ac8:	mov	r3, r5
   14acc:	b	1466c <__assert_fail@plt+0x3758>
   14ad0:	ldr	r3, [sp, #48]	; 0x30
   14ad4:	ldrb	r3, [r3, #1]
   14ad8:	adds	r3, r3, #0
   14adc:	movne	r3, #1
   14ae0:	b	14ab4 <__assert_fail@plt+0x3ba0>
   14ae4:	mov	r3, #0
   14ae8:	str	r3, [sp, #44]	; 0x2c
   14aec:	b	14abc <__assert_fail@plt+0x3ba8>
   14af0:	mov	r3, #0
   14af4:	str	r3, [sp, #44]	; 0x2c
   14af8:	b	14b00 <__assert_fail@plt+0x3bec>
   14afc:	ldr	r5, [sp, #44]	; 0x2c
   14b00:	ldr	r3, [sp, #32]
   14b04:	cmp	sl, #2
   14b08:	movne	r3, #0
   14b0c:	andeq	r3, r3, #1
   14b10:	cmp	r3, #0
   14b14:	beq	1466c <__assert_fail@plt+0x3758>
   14b18:	mov	r8, r9
   14b1c:	mov	r7, #2
   14b20:	b	15220 <__assert_fail@plt+0x430c>
   14b24:	ldr	r5, [sp, #32]
   14b28:	b	14b00 <__assert_fail@plt+0x3bec>
   14b2c:	mov	r3, #0
   14b30:	str	r3, [sp, #44]	; 0x2c
   14b34:	mov	r5, r3
   14b38:	b	14b00 <__assert_fail@plt+0x3bec>
   14b3c:	mov	r3, #0
   14b40:	str	r3, [sp, #44]	; 0x2c
   14b44:	cmp	sl, #2
   14b48:	strne	r5, [sp, #68]	; 0x44
   14b4c:	movne	r3, #0
   14b50:	movne	r4, #39	; 0x27
   14b54:	bne	1466c <__assert_fail@plt+0x3758>
   14b58:	ldr	r3, [sp, #32]
   14b5c:	cmp	r3, #0
   14b60:	bne	1520c <__assert_fail@plt+0x42f8>
   14b64:	ldr	r3, [sp, #72]	; 0x48
   14b68:	clz	r3, r3
   14b6c:	lsr	r3, r3, #5
   14b70:	cmp	r9, #0
   14b74:	moveq	r3, #0
   14b78:	cmp	r3, #0
   14b7c:	movne	r3, #0
   14b80:	bne	14ba8 <__assert_fail@plt+0x3c94>
   14b84:	cmp	r9, fp
   14b88:	movhi	r3, #39	; 0x27
   14b8c:	strbhi	r3, [r8, fp]
   14b90:	add	r3, fp, #1
   14b94:	cmp	r9, r3
   14b98:	movhi	r2, #92	; 0x5c
   14b9c:	strbhi	r2, [r8, r3]
   14ba0:	mov	r3, r9
   14ba4:	ldr	r9, [sp, #72]	; 0x48
   14ba8:	add	r2, fp, #2
   14bac:	cmp	r2, r3
   14bb0:	movcc	r1, #39	; 0x27
   14bb4:	strbcc	r1, [r8, r2]
   14bb8:	add	fp, fp, #3
   14bbc:	str	r5, [sp, #68]	; 0x44
   14bc0:	ldr	r2, [sp, #32]
   14bc4:	str	r2, [sp, #36]	; 0x24
   14bc8:	str	r9, [sp, #72]	; 0x48
   14bcc:	mov	r9, r3
   14bd0:	mov	r4, #39	; 0x27
   14bd4:	mov	r3, #0
   14bd8:	b	146b8 <__assert_fail@plt+0x37a4>
   14bdc:	mov	r3, #0
   14be0:	str	r3, [sp, #44]	; 0x2c
   14be4:	ldr	r7, [sp, #76]	; 0x4c
   14be8:	cmp	r7, #1
   14bec:	bne	14c24 <__assert_fail@plt+0x3d10>
   14bf0:	bl	10e24 <__ctype_b_loc@plt>
   14bf4:	ldr	r2, [r0]
   14bf8:	lsl	r3, r4, #1
   14bfc:	ldrh	r5, [r2, r3]
   14c00:	ubfx	r5, r5, #14, #1
   14c04:	mov	ip, r7
   14c08:	eor	r3, r5, #1
   14c0c:	ldr	r2, [sp, #28]
   14c10:	and	r3, r3, r2
   14c14:	ands	r3, r3, #255	; 0xff
   14c18:	beq	1466c <__assert_fail@plt+0x3758>
   14c1c:	mov	r5, #0
   14c20:	b	14e80 <__assert_fail@plt+0x3f6c>
   14c24:	mov	r2, #0
   14c28:	mov	r3, #0
   14c2c:	strd	r2, [sp, #104]	; 0x68
   14c30:	ldr	r3, [sp, #24]
   14c34:	cmn	r3, #1
   14c38:	beq	14c5c <__assert_fail@plt+0x3d48>
   14c3c:	mov	r3, #0
   14c40:	str	r4, [sp, #88]	; 0x58
   14c44:	str	fp, [sp, #92]	; 0x5c
   14c48:	str	r8, [sp, #56]	; 0x38
   14c4c:	mov	r8, r3
   14c50:	str	r9, [sp, #84]	; 0x54
   14c54:	ldr	r9, [sp, #48]	; 0x30
   14c58:	b	14da8 <__assert_fail@plt+0x3e94>
   14c5c:	ldr	r0, [sp, #48]	; 0x30
   14c60:	bl	10e3c <strlen@plt>
   14c64:	str	r0, [sp, #24]
   14c68:	b	14c3c <__assert_fail@plt+0x3d28>
   14c6c:	mov	r1, fp
   14c70:	ldr	r4, [sp, #88]	; 0x58
   14c74:	mov	r2, r8
   14c78:	mov	ip, r8
   14c7c:	ldr	fp, [sp, #92]	; 0x5c
   14c80:	ldr	r8, [sp, #56]	; 0x38
   14c84:	ldr	r9, [sp, #84]	; 0x54
   14c88:	ldr	r0, [sp, #24]
   14c8c:	cmp	r7, r0
   14c90:	bcs	14e48 <__assert_fail@plt+0x3f34>
   14c94:	ldrb	r3, [r1]
   14c98:	cmp	r3, #0
   14c9c:	beq	14e50 <__assert_fail@plt+0x3f3c>
   14ca0:	mov	r3, r1
   14ca4:	add	r2, r2, #1
   14ca8:	add	r1, r6, r2
   14cac:	cmp	r0, r1
   14cb0:	bls	14e58 <__assert_fail@plt+0x3f44>
   14cb4:	ldrb	r1, [r3, #1]!
   14cb8:	cmp	r1, #0
   14cbc:	bne	14ca4 <__assert_fail@plt+0x3d90>
   14cc0:	mov	ip, r2
   14cc4:	mov	r5, #0
   14cc8:	b	14e78 <__assert_fail@plt+0x3f64>
   14ccc:	ldr	r3, [sp, #56]	; 0x38
   14cd0:	str	r3, [sp, #64]	; 0x40
   14cd4:	ldr	r8, [sp, #84]	; 0x54
   14cd8:	mov	r7, #2
   14cdc:	b	15220 <__assert_fail@plt+0x430c>
   14ce0:	cmp	r2, r7
   14ce4:	beq	14d84 <__assert_fail@plt+0x3e70>
   14ce8:	ldrb	r3, [r2], #1
   14cec:	sub	r3, r3, #91	; 0x5b
   14cf0:	cmp	r3, #33	; 0x21
   14cf4:	ldrls	pc, [pc, r3, lsl #2]
   14cf8:	b	14ce0 <__assert_fail@plt+0x3dcc>
   14cfc:	andeq	r4, r1, ip, asr #25
   14d00:	andeq	r4, r1, ip, asr #25
   14d04:	andeq	r4, r1, r0, ror #25
   14d08:	andeq	r4, r1, ip, asr #25
   14d0c:	andeq	r4, r1, r0, ror #25
   14d10:	andeq	r4, r1, ip, asr #25
   14d14:	andeq	r4, r1, r0, ror #25
   14d18:	andeq	r4, r1, r0, ror #25
   14d1c:	andeq	r4, r1, r0, ror #25
   14d20:	andeq	r4, r1, r0, ror #25
   14d24:	andeq	r4, r1, r0, ror #25
   14d28:	andeq	r4, r1, r0, ror #25
   14d2c:	andeq	r4, r1, r0, ror #25
   14d30:	andeq	r4, r1, r0, ror #25
   14d34:	andeq	r4, r1, r0, ror #25
   14d38:	andeq	r4, r1, r0, ror #25
   14d3c:	andeq	r4, r1, r0, ror #25
   14d40:	andeq	r4, r1, r0, ror #25
   14d44:	andeq	r4, r1, r0, ror #25
   14d48:	andeq	r4, r1, r0, ror #25
   14d4c:	andeq	r4, r1, r0, ror #25
   14d50:	andeq	r4, r1, r0, ror #25
   14d54:	andeq	r4, r1, r0, ror #25
   14d58:	andeq	r4, r1, r0, ror #25
   14d5c:	andeq	r4, r1, r0, ror #25
   14d60:	andeq	r4, r1, r0, ror #25
   14d64:	andeq	r4, r1, r0, ror #25
   14d68:	andeq	r4, r1, r0, ror #25
   14d6c:	andeq	r4, r1, r0, ror #25
   14d70:	andeq	r4, r1, r0, ror #25
   14d74:	andeq	r4, r1, r0, ror #25
   14d78:	andeq	r4, r1, r0, ror #25
   14d7c:	andeq	r4, r1, r0, ror #25
   14d80:	andeq	r4, r1, ip, asr #25
   14d84:	ldr	r0, [sp, #100]	; 0x64
   14d88:	bl	10d7c <iswprint@plt>
   14d8c:	cmp	r0, #0
   14d90:	moveq	r5, #0
   14d94:	add	r8, r8, r4
   14d98:	add	r0, sp, #104	; 0x68
   14d9c:	bl	10d1c <mbsinit@plt>
   14da0:	cmp	r0, #0
   14da4:	bne	14e14 <__assert_fail@plt+0x3f00>
   14da8:	add	r7, r6, r8
   14dac:	add	fp, r9, r7
   14db0:	add	r3, sp, #104	; 0x68
   14db4:	ldr	r2, [sp, #24]
   14db8:	sub	r2, r2, r7
   14dbc:	mov	r1, fp
   14dc0:	add	r0, sp, #100	; 0x64
   14dc4:	bl	17410 <__assert_fail@plt+0x64fc>
   14dc8:	subs	r4, r0, #0
   14dcc:	beq	14e64 <__assert_fail@plt+0x3f50>
   14dd0:	cmn	r4, #1
   14dd4:	beq	14e2c <__assert_fail@plt+0x3f18>
   14dd8:	cmn	r4, #2
   14ddc:	beq	14c6c <__assert_fail@plt+0x3d58>
   14de0:	ldr	r3, [sp, #32]
   14de4:	cmp	sl, #2
   14de8:	movne	r3, #0
   14dec:	andeq	r3, r3, #1
   14df0:	cmp	r3, #0
   14df4:	beq	14d84 <__assert_fail@plt+0x3e70>
   14df8:	cmp	r4, #1
   14dfc:	bls	14d84 <__assert_fail@plt+0x3e70>
   14e00:	add	r2, r7, #1
   14e04:	add	r2, r9, r2
   14e08:	add	r3, r9, r4
   14e0c:	add	r7, r3, r7
   14e10:	b	14ce8 <__assert_fail@plt+0x3dd4>
   14e14:	ldr	r4, [sp, #88]	; 0x58
   14e18:	mov	ip, r8
   14e1c:	ldr	fp, [sp, #92]	; 0x5c
   14e20:	ldr	r8, [sp, #56]	; 0x38
   14e24:	ldr	r9, [sp, #84]	; 0x54
   14e28:	b	14e78 <__assert_fail@plt+0x3f64>
   14e2c:	ldr	r4, [sp, #88]	; 0x58
   14e30:	mov	ip, r8
   14e34:	ldr	fp, [sp, #92]	; 0x5c
   14e38:	ldr	r8, [sp, #56]	; 0x38
   14e3c:	ldr	r9, [sp, #84]	; 0x54
   14e40:	mov	r5, #0
   14e44:	b	14e78 <__assert_fail@plt+0x3f64>
   14e48:	mov	r5, #0
   14e4c:	b	14e78 <__assert_fail@plt+0x3f64>
   14e50:	mov	r5, #0
   14e54:	b	14e78 <__assert_fail@plt+0x3f64>
   14e58:	mov	ip, r2
   14e5c:	mov	r5, #0
   14e60:	b	14e78 <__assert_fail@plt+0x3f64>
   14e64:	ldr	r4, [sp, #88]	; 0x58
   14e68:	mov	ip, r8
   14e6c:	ldr	fp, [sp, #92]	; 0x5c
   14e70:	ldr	r8, [sp, #56]	; 0x38
   14e74:	ldr	r9, [sp, #84]	; 0x54
   14e78:	cmp	ip, #1
   14e7c:	bls	14c08 <__assert_fail@plt+0x3cf4>
   14e80:	add	lr, r6, ip
   14e84:	ldr	r3, [sp, #48]	; 0x30
   14e88:	add	r1, r3, r6
   14e8c:	mov	r3, #0
   14e90:	eor	r0, r5, #1
   14e94:	ldr	r2, [sp, #28]
   14e98:	and	r0, r0, r2
   14e9c:	uxtb	r0, r0
   14ea0:	str	r0, [sp, #56]	; 0x38
   14ea4:	mov	r7, #92	; 0x5c
   14ea8:	ldr	ip, [sp, #36]	; 0x24
   14eac:	str	r5, [sp, #84]	; 0x54
   14eb0:	ldr	r2, [sp, #44]	; 0x2c
   14eb4:	b	14f24 <__assert_fail@plt+0x4010>
   14eb8:	cmp	r2, #0
   14ebc:	beq	14ecc <__assert_fail@plt+0x3fb8>
   14ec0:	cmp	r9, fp
   14ec4:	strbhi	r7, [r8, fp]
   14ec8:	add	fp, fp, #1
   14ecc:	add	r5, r6, #1
   14ed0:	cmp	r5, lr
   14ed4:	bcs	14fe0 <__assert_fail@plt+0x40cc>
   14ed8:	eor	r2, r3, #1
   14edc:	and	r2, r2, ip
   14ee0:	ands	r2, r2, #255	; 0xff
   14ee4:	beq	14ffc <__assert_fail@plt+0x40e8>
   14ee8:	cmp	r9, fp
   14eec:	movhi	r2, #39	; 0x27
   14ef0:	strbhi	r2, [r8, fp]
   14ef4:	add	r2, fp, #1
   14ef8:	cmp	r9, r2
   14efc:	movhi	ip, #39	; 0x27
   14f00:	strbhi	ip, [r8, r2]
   14f04:	add	fp, fp, #2
   14f08:	ldr	ip, [sp, #56]	; 0x38
   14f0c:	mov	r2, ip
   14f10:	mov	r6, r5
   14f14:	cmp	r9, fp
   14f18:	strbhi	r4, [r8, fp]
   14f1c:	add	fp, fp, #1
   14f20:	ldrb	r4, [r1, #1]!
   14f24:	cmp	r0, #0
   14f28:	beq	14eb8 <__assert_fail@plt+0x3fa4>
   14f2c:	ldr	r3, [sp, #32]
   14f30:	cmp	r3, #0
   14f34:	bne	151c8 <__assert_fail@plt+0x42b4>
   14f38:	eor	r3, ip, #1
   14f3c:	cmp	sl, #2
   14f40:	movne	r3, #0
   14f44:	andeq	r3, r3, #1
   14f48:	cmp	r3, #0
   14f4c:	beq	14f84 <__assert_fail@plt+0x4070>
   14f50:	cmp	r9, fp
   14f54:	movhi	ip, #39	; 0x27
   14f58:	strbhi	ip, [r8, fp]
   14f5c:	add	ip, fp, #1
   14f60:	cmp	r9, ip
   14f64:	movhi	r5, #36	; 0x24
   14f68:	strbhi	r5, [r8, ip]
   14f6c:	add	ip, fp, #2
   14f70:	cmp	r9, ip
   14f74:	movhi	r5, #39	; 0x27
   14f78:	strbhi	r5, [r8, ip]
   14f7c:	add	fp, fp, #3
   14f80:	mov	ip, r3
   14f84:	cmp	r9, fp
   14f88:	strbhi	r7, [r8, fp]
   14f8c:	add	r3, fp, #1
   14f90:	cmp	r9, r3
   14f94:	bls	14fa4 <__assert_fail@plt+0x4090>
   14f98:	lsr	r5, r4, #6
   14f9c:	add	r5, r5, #48	; 0x30
   14fa0:	strb	r5, [r8, r3]
   14fa4:	add	r3, fp, #2
   14fa8:	cmp	r9, r3
   14fac:	bls	14fbc <__assert_fail@plt+0x40a8>
   14fb0:	ubfx	r5, r4, #3, #3
   14fb4:	add	r5, r5, #48	; 0x30
   14fb8:	strb	r5, [r8, r3]
   14fbc:	add	fp, fp, #3
   14fc0:	and	r4, r4, #7
   14fc4:	add	r4, r4, #48	; 0x30
   14fc8:	add	r5, r6, #1
   14fcc:	cmp	r5, lr
   14fd0:	bcs	14fec <__assert_fail@plt+0x40d8>
   14fd4:	ldr	r3, [sp, #56]	; 0x38
   14fd8:	mov	r6, r5
   14fdc:	b	14f14 <__assert_fail@plt+0x4000>
   14fe0:	str	ip, [sp, #36]	; 0x24
   14fe4:	ldr	r5, [sp, #84]	; 0x54
   14fe8:	b	14a18 <__assert_fail@plt+0x3b04>
   14fec:	str	ip, [sp, #36]	; 0x24
   14ff0:	ldr	r5, [sp, #84]	; 0x54
   14ff4:	mov	r3, r0
   14ff8:	b	14a18 <__assert_fail@plt+0x3b04>
   14ffc:	mov	r6, r5
   15000:	b	14f14 <__assert_fail@plt+0x4000>
   15004:	ldr	r3, [sp, #44]	; 0x2c
   15008:	b	1466c <__assert_fail@plt+0x3758>
   1500c:	mov	r5, #0
   15010:	mov	r3, r5
   15014:	mov	r4, #63	; 0x3f
   15018:	b	1466c <__assert_fail@plt+0x3758>
   1501c:	mov	r5, #0
   15020:	mov	r3, r5
   15024:	mov	r4, #63	; 0x3f
   15028:	b	1466c <__assert_fail@plt+0x3758>
   1502c:	mov	r5, #0
   15030:	mov	r3, r5
   15034:	b	1466c <__assert_fail@plt+0x3758>
   15038:	mov	r5, #0
   1503c:	mov	r3, r5
   15040:	b	1466c <__assert_fail@plt+0x3758>
   15044:	ldr	r5, [sp, #44]	; 0x2c
   15048:	ldr	r3, [sp, #32]
   1504c:	b	1466c <__assert_fail@plt+0x3758>
   15050:	ldr	r5, [sp, #44]	; 0x2c
   15054:	mov	r3, #0
   15058:	str	r3, [sp, #44]	; 0x2c
   1505c:	b	1466c <__assert_fail@plt+0x3758>
   15060:	mov	r4, r3
   15064:	mov	r5, #0
   15068:	b	146c4 <__assert_fail@plt+0x37b0>
   1506c:	mov	r5, #0
   15070:	mov	r4, #97	; 0x61
   15074:	b	146c4 <__assert_fail@plt+0x37b0>
   15078:	mov	r5, #0
   1507c:	mov	r3, r5
   15080:	mov	r4, #92	; 0x5c
   15084:	b	14a18 <__assert_fail@plt+0x3b04>
   15088:	ldr	r3, [sp, #48]	; 0x30
   1508c:	ldrb	r5, [r3, r6]
   15090:	adds	r5, r5, #0
   15094:	movne	r5, #1
   15098:	b	14768 <__assert_fail@plt+0x3854>
   1509c:	cmp	sl, #2
   150a0:	movne	r3, #0
   150a4:	moveq	r3, #1
   150a8:	ldr	r1, [sp, #32]
   150ac:	cmp	fp, #0
   150b0:	andeq	r2, r3, r1
   150b4:	movne	r2, #0
   150b8:	cmp	r2, #0
   150bc:	bne	151dc <__assert_fail@plt+0x42c8>
   150c0:	eor	r2, r1, #1
   150c4:	uxtb	r2, r2
   150c8:	and	r3, r3, r2
   150cc:	ldr	r1, [sp, #68]	; 0x44
   150d0:	ands	r3, r1, r3
   150d4:	beq	15168 <__assert_fail@plt+0x4254>
   150d8:	ldr	r2, [sp, #40]	; 0x28
   150dc:	cmp	r2, #0
   150e0:	bne	15118 <__assert_fail@plt+0x4204>
   150e4:	ldr	r2, [sp, #72]	; 0x48
   150e8:	adds	r2, r2, #0
   150ec:	movne	r2, #1
   150f0:	cmp	r9, #0
   150f4:	movne	r2, #0
   150f8:	str	r2, [sp, #68]	; 0x44
   150fc:	mov	sl, #2
   15100:	ldr	r1, [sp, #40]	; 0x28
   15104:	str	r1, [sp, #32]
   15108:	cmp	r2, #0
   1510c:	beq	1515c <__assert_fail@plt+0x4248>
   15110:	ldr	r9, [sp, #72]	; 0x48
   15114:	b	13e70 <__assert_fail@plt+0x2f5c>
   15118:	ldr	r3, [sp, #168]	; 0xa8
   1511c:	str	r3, [sp, #16]
   15120:	ldr	r3, [sp, #164]	; 0xa4
   15124:	str	r3, [sp, #12]
   15128:	ldr	r3, [sp, #160]	; 0xa0
   1512c:	str	r3, [sp, #8]
   15130:	ldr	r3, [sp, #156]	; 0x9c
   15134:	str	r3, [sp, #4]
   15138:	mov	r3, #5
   1513c:	str	r3, [sp]
   15140:	ldr	r3, [sp, #24]
   15144:	ldr	r2, [sp, #48]	; 0x30
   15148:	ldr	r1, [sp, #72]	; 0x48
   1514c:	ldr	r0, [sp, #64]	; 0x40
   15150:	bl	13df8 <__assert_fail@plt+0x2ee4>
   15154:	mov	fp, r0
   15158:	b	15278 <__assert_fail@plt+0x4364>
   1515c:	mov	r8, r9
   15160:	mov	r2, r3
   15164:	b	1516c <__assert_fail@plt+0x4258>
   15168:	mov	r8, r9
   1516c:	ldr	r3, [sp, #60]	; 0x3c
   15170:	cmp	r3, #0
   15174:	moveq	r2, #0
   15178:	andne	r2, r2, #1
   1517c:	cmp	r2, #0
   15180:	beq	151b0 <__assert_fail@plt+0x429c>
   15184:	mov	r2, r3
   15188:	ldrb	r3, [r3]
   1518c:	cmp	r3, #0
   15190:	beq	151b0 <__assert_fail@plt+0x429c>
   15194:	ldr	r1, [sp, #64]	; 0x40
   15198:	cmp	r8, fp
   1519c:	strbhi	r3, [r1, fp]
   151a0:	add	fp, fp, #1
   151a4:	ldrb	r3, [r2, #1]!
   151a8:	cmp	r3, #0
   151ac:	bne	15198 <__assert_fail@plt+0x4284>
   151b0:	cmp	r8, fp
   151b4:	bls	15278 <__assert_fail@plt+0x4364>
   151b8:	mov	r3, #0
   151bc:	ldr	r2, [sp, #64]	; 0x40
   151c0:	strb	r3, [r2, fp]
   151c4:	b	15278 <__assert_fail@plt+0x4364>
   151c8:	mov	r8, r9
   151cc:	mov	r7, sl
   151d0:	ldr	r3, [sp, #32]
   151d4:	str	r3, [sp, #28]
   151d8:	b	15220 <__assert_fail@plt+0x430c>
   151dc:	mov	r8, r9
   151e0:	mov	r7, #2
   151e4:	b	15220 <__assert_fail@plt+0x430c>
   151e8:	mov	r8, r9
   151ec:	mov	r7, sl
   151f0:	b	15220 <__assert_fail@plt+0x430c>
   151f4:	mov	r8, r9
   151f8:	mov	r7, sl
   151fc:	b	15220 <__assert_fail@plt+0x430c>
   15200:	mov	r8, r9
   15204:	mov	r7, sl
   15208:	b	15220 <__assert_fail@plt+0x430c>
   1520c:	mov	r8, r9
   15210:	mov	r7, sl
   15214:	b	15220 <__assert_fail@plt+0x430c>
   15218:	mov	r8, r9
   1521c:	mov	r7, sl
   15220:	ldr	r3, [sp, #28]
   15224:	cmp	r7, #2
   15228:	movne	r3, #0
   1522c:	andeq	r3, r3, #1
   15230:	cmp	r3, #0
   15234:	movne	r7, #4
   15238:	ldr	r3, [sp, #168]	; 0xa8
   1523c:	str	r3, [sp, #16]
   15240:	ldr	r3, [sp, #164]	; 0xa4
   15244:	str	r3, [sp, #12]
   15248:	mov	r3, #0
   1524c:	str	r3, [sp, #8]
   15250:	ldr	r3, [sp, #156]	; 0x9c
   15254:	bic	r3, r3, #2
   15258:	str	r3, [sp, #4]
   1525c:	str	r7, [sp]
   15260:	ldr	r3, [sp, #24]
   15264:	ldr	r2, [sp, #48]	; 0x30
   15268:	mov	r1, r8
   1526c:	ldr	r0, [sp, #64]	; 0x40
   15270:	bl	13df8 <__assert_fail@plt+0x2ee4>
   15274:	mov	fp, r0
   15278:	mov	r0, fp
   1527c:	add	sp, sp, #116	; 0x74
   15280:	ldrd	r4, [sp]
   15284:	ldrd	r6, [sp, #8]
   15288:	ldrd	r8, [sp, #16]
   1528c:	ldrd	sl, [sp, #24]
   15290:	add	sp, sp, #32
   15294:	pop	{pc}		; (ldr pc, [sp], #4)
   15298:	mov	r8, r9
   1529c:	mov	r7, sl
   152a0:	b	15238 <__assert_fail@plt+0x4324>
   152a4:	add	fp, fp, #4
   152a8:	str	r3, [sp, #36]	; 0x24
   152ac:	mov	r5, #0
   152b0:	mov	r4, #48	; 0x30
   152b4:	b	1466c <__assert_fail@plt+0x3758>
   152b8:	mov	r3, #1
   152bc:	str	r3, [sp, #32]
   152c0:	str	r3, [sp, #28]
   152c4:	str	r3, [sp, #52]	; 0x34
   152c8:	movw	r3, #35484	; 0x8a9c
   152cc:	movt	r3, #1
   152d0:	str	r3, [sp, #60]	; 0x3c
   152d4:	mov	fp, #0
   152d8:	mov	sl, #5
   152dc:	b	13ed0 <__assert_fail@plt+0x2fbc>
   152e0:	ldr	r3, [sp, #48]	; 0x30
   152e4:	ldrb	r4, [r3, r6]
   152e8:	cmp	r4, #126	; 0x7e
   152ec:	ldrls	pc, [pc, r4, lsl #2]
   152f0:	b	14bdc <__assert_fail@plt+0x3cc8>
   152f4:	andeq	r4, r1, r4, ror #6
   152f8:	ldrdeq	r4, [r1], -ip
   152fc:	ldrdeq	r4, [r1], -ip
   15300:	ldrdeq	r4, [r1], -ip
   15304:	ldrdeq	r4, [r1], -ip
   15308:	ldrdeq	r4, [r1], -ip
   1530c:	ldrdeq	r4, [r1], -ip
   15310:	andeq	r5, r1, ip, rrx
   15314:	andeq	r4, r1, r8, lsl #12
   15318:	andeq	r4, r1, ip, lsr #19
   1531c:	andeq	r4, r1, r8, ror #20
   15320:	andeq	r4, r1, r0, asr #19
   15324:	andeq	r4, r1, ip, lsl r6
   15328:	andeq	r4, r1, r0, lsr r6
   1532c:	ldrdeq	r4, [r1], -ip
   15330:	ldrdeq	r4, [r1], -ip
   15334:	ldrdeq	r4, [r1], -ip
   15338:	ldrdeq	r4, [r1], -ip
   1533c:	ldrdeq	r4, [r1], -ip
   15340:	ldrdeq	r4, [r1], -ip
   15344:	ldrdeq	r4, [r1], -ip
   15348:	ldrdeq	r4, [r1], -ip
   1534c:	ldrdeq	r4, [r1], -ip
   15350:	ldrdeq	r4, [r1], -ip
   15354:	ldrdeq	r4, [r1], -ip
   15358:	ldrdeq	r4, [r1], -ip
   1535c:	ldrdeq	r4, [r1], -ip
   15360:	ldrdeq	r4, [r1], -ip
   15364:	ldrdeq	r4, [r1], -ip
   15368:	ldrdeq	r4, [r1], -ip
   1536c:	ldrdeq	r4, [r1], -ip
   15370:	ldrdeq	r4, [r1], -ip
   15374:	strdeq	r4, [r1], -r0
   15378:	andeq	r4, r1, ip, lsr #22
   1537c:	andeq	r4, r1, ip, lsr #22
   15380:	andeq	r4, r1, r4, ror #21
   15384:	andeq	r4, r1, ip, lsr #22
   15388:	andeq	r5, r1, r0, asr r0
   1538c:	andeq	r4, r1, ip, lsr #22
   15390:	andeq	r4, r1, ip, lsr fp
   15394:	andeq	r4, r1, ip, lsr #22
   15398:	andeq	r4, r1, ip, lsr #22
   1539c:	andeq	r4, r1, ip, lsr #22
   153a0:	andeq	r5, r1, r0, asr r0
   153a4:	andeq	r5, r1, r0, asr r0
   153a8:	andeq	r5, r1, r0, asr r0
   153ac:	andeq	r5, r1, r0, asr r0
   153b0:	andeq	r5, r1, r0, asr r0
   153b4:	andeq	r5, r1, r0, asr r0
   153b8:	andeq	r5, r1, r0, asr r0
   153bc:	andeq	r5, r1, r0, asr r0
   153c0:	andeq	r5, r1, r0, asr r0
   153c4:	andeq	r5, r1, r0, asr r0
   153c8:	andeq	r5, r1, r0, asr r0
   153cc:	andeq	r5, r1, r0, asr r0
   153d0:	andeq	r5, r1, r0, asr r0
   153d4:	andeq	r5, r1, r0, asr r0
   153d8:	andeq	r5, r1, r0, asr r0
   153dc:	andeq	r5, r1, r0, asr r0
   153e0:	andeq	r4, r1, ip, lsr #22
   153e4:	andeq	r4, r1, ip, lsr #22
   153e8:	andeq	r4, r1, ip, lsr #22
   153ec:	andeq	r4, r1, ip, lsr #22
   153f0:	muleq	r1, ip, r4
   153f4:	ldrdeq	r4, [r1], -ip
   153f8:	andeq	r5, r1, r0, asr r0
   153fc:	andeq	r5, r1, r0, asr r0
   15400:	andeq	r5, r1, r0, asr r0
   15404:	andeq	r5, r1, r0, asr r0
   15408:	andeq	r5, r1, r0, asr r0
   1540c:	andeq	r5, r1, r0, asr r0
   15410:	andeq	r5, r1, r0, asr r0
   15414:	andeq	r5, r1, r0, asr r0
   15418:	andeq	r5, r1, r0, asr r0
   1541c:	andeq	r5, r1, r0, asr r0
   15420:	andeq	r5, r1, r0, asr r0
   15424:	andeq	r5, r1, r0, asr r0
   15428:	andeq	r5, r1, r0, asr r0
   1542c:	andeq	r5, r1, r0, asr r0
   15430:	andeq	r5, r1, r0, asr r0
   15434:	andeq	r5, r1, r0, asr r0
   15438:	andeq	r5, r1, r0, asr r0
   1543c:	andeq	r5, r1, r0, asr r0
   15440:	andeq	r5, r1, r0, asr r0
   15444:	andeq	r5, r1, r0, asr r0
   15448:	andeq	r5, r1, r0, asr r0
   1544c:	andeq	r5, r1, r0, asr r0
   15450:	andeq	r5, r1, r0, asr r0
   15454:	andeq	r5, r1, r0, asr r0
   15458:	andeq	r5, r1, r0, asr r0
   1545c:	andeq	r5, r1, r0, asr r0
   15460:	andeq	r4, r1, ip, lsr #22
   15464:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15468:	andeq	r5, r1, r0, asr r0
   1546c:	andeq	r4, r1, ip, lsr #22
   15470:	andeq	r5, r1, r0, asr r0
   15474:	andeq	r4, r1, ip, lsr #22
   15478:	andeq	r5, r1, r0, asr r0
   1547c:	andeq	r5, r1, r0, asr r0
   15480:	andeq	r5, r1, r0, asr r0
   15484:	andeq	r5, r1, r0, asr r0
   15488:	andeq	r5, r1, r0, asr r0
   1548c:	andeq	r5, r1, r0, asr r0
   15490:	andeq	r5, r1, r0, asr r0
   15494:	andeq	r5, r1, r0, asr r0
   15498:	andeq	r5, r1, r0, asr r0
   1549c:	andeq	r5, r1, r0, asr r0
   154a0:	andeq	r5, r1, r0, asr r0
   154a4:	andeq	r5, r1, r0, asr r0
   154a8:	andeq	r5, r1, r0, asr r0
   154ac:	andeq	r5, r1, r0, asr r0
   154b0:	andeq	r5, r1, r0, asr r0
   154b4:	andeq	r5, r1, r0, asr r0
   154b8:	andeq	r5, r1, r0, asr r0
   154bc:	andeq	r5, r1, r0, asr r0
   154c0:	andeq	r5, r1, r0, asr r0
   154c4:	andeq	r5, r1, r0, asr r0
   154c8:	andeq	r5, r1, r0, asr r0
   154cc:	andeq	r5, r1, r0, asr r0
   154d0:	andeq	r5, r1, r0, asr r0
   154d4:	andeq	r5, r1, r0, asr r0
   154d8:	andeq	r5, r1, r0, asr r0
   154dc:	andeq	r5, r1, r0, asr r0
   154e0:	muleq	r1, r4, sl
   154e4:	andeq	r4, r1, ip, lsr #22
   154e8:	muleq	r1, r4, sl
   154ec:	andeq	r4, r1, r4, ror #21
   154f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   154f4:	strd	r6, [sp, #8]
   154f8:	strd	r8, [sp, #16]
   154fc:	strd	sl, [sp, #24]
   15500:	str	lr, [sp, #32]
   15504:	sub	sp, sp, #52	; 0x34
   15508:	mov	r5, r0
   1550c:	str	r1, [sp, #24]
   15510:	str	r2, [sp, #28]
   15514:	mov	r4, r3
   15518:	bl	10e54 <__errno_location@plt>
   1551c:	str	r0, [sp, #32]
   15520:	ldr	r3, [r0]
   15524:	str	r3, [sp, #36]	; 0x24
   15528:	movw	r3, #37108	; 0x90f4
   1552c:	movt	r3, #2
   15530:	ldr	r6, [r3]
   15534:	cmn	r5, #-2147483647	; 0x80000001
   15538:	movne	r3, #0
   1553c:	moveq	r3, #1
   15540:	orrs	r3, r3, r5, lsr #31
   15544:	bne	156a8 <__assert_fail@plt+0x4794>
   15548:	movw	r3, #37108	; 0x90f4
   1554c:	movt	r3, #2
   15550:	ldr	r2, [r3, #4]
   15554:	cmp	r2, r5
   15558:	bgt	155c8 <__assert_fail@plt+0x46b4>
   1555c:	str	r2, [sp, #44]	; 0x2c
   15560:	add	r3, r3, #8
   15564:	cmp	r6, r3
   15568:	beq	156ac <__assert_fail@plt+0x4798>
   1556c:	sub	r2, r5, r2
   15570:	mov	r3, #8
   15574:	str	r3, [sp]
   15578:	mvn	r3, #-2147483648	; 0x80000000
   1557c:	add	r2, r2, #1
   15580:	add	r1, sp, #44	; 0x2c
   15584:	mov	r0, r6
   15588:	bl	16748 <__assert_fail@plt+0x5834>
   1558c:	mov	r6, r0
   15590:	movw	r3, #37108	; 0x90f4
   15594:	movt	r3, #2
   15598:	str	r0, [r3]
   1559c:	movw	r7, #37108	; 0x90f4
   155a0:	movt	r7, #2
   155a4:	ldr	r0, [r7, #4]
   155a8:	ldr	r2, [sp, #44]	; 0x2c
   155ac:	sub	r2, r2, r0
   155b0:	lsl	r2, r2, #3
   155b4:	mov	r1, #0
   155b8:	add	r0, r6, r0, lsl #3
   155bc:	bl	10e78 <memset@plt>
   155c0:	ldr	r3, [sp, #44]	; 0x2c
   155c4:	str	r3, [r7, #4]
   155c8:	add	fp, r6, r5, lsl #3
   155cc:	ldr	r8, [r6, r5, lsl #3]
   155d0:	ldr	r7, [fp, #4]
   155d4:	ldr	r3, [r4, #4]
   155d8:	orr	r9, r3, #1
   155dc:	add	sl, r4, #8
   155e0:	ldr	r3, [r4, #44]	; 0x2c
   155e4:	str	r3, [sp, #16]
   155e8:	ldr	r3, [r4, #40]	; 0x28
   155ec:	str	r3, [sp, #12]
   155f0:	str	sl, [sp, #8]
   155f4:	str	r9, [sp, #4]
   155f8:	ldr	r3, [r4]
   155fc:	str	r3, [sp]
   15600:	ldr	r3, [sp, #28]
   15604:	ldr	r2, [sp, #24]
   15608:	mov	r1, r8
   1560c:	mov	r0, r7
   15610:	bl	13df8 <__assert_fail@plt+0x2ee4>
   15614:	cmp	r8, r0
   15618:	bhi	1567c <__assert_fail@plt+0x4768>
   1561c:	add	r8, r0, #1
   15620:	str	r8, [r6, r5, lsl #3]
   15624:	movw	r3, #46192	; 0xb470
   15628:	movt	r3, #2
   1562c:	cmp	r7, r3
   15630:	beq	1563c <__assert_fail@plt+0x4728>
   15634:	mov	r0, r7
   15638:	bl	13b34 <__assert_fail@plt+0x2c20>
   1563c:	mov	r0, r8
   15640:	bl	16544 <__assert_fail@plt+0x5630>
   15644:	mov	r7, r0
   15648:	str	r0, [fp, #4]
   1564c:	ldr	r3, [r4, #44]	; 0x2c
   15650:	str	r3, [sp, #16]
   15654:	ldr	r3, [r4, #40]	; 0x28
   15658:	str	r3, [sp, #12]
   1565c:	str	sl, [sp, #8]
   15660:	str	r9, [sp, #4]
   15664:	ldr	r3, [r4]
   15668:	str	r3, [sp]
   1566c:	ldr	r3, [sp, #28]
   15670:	ldr	r2, [sp, #24]
   15674:	mov	r1, r8
   15678:	bl	13df8 <__assert_fail@plt+0x2ee4>
   1567c:	ldr	r3, [sp, #32]
   15680:	ldr	r2, [sp, #36]	; 0x24
   15684:	str	r2, [r3]
   15688:	mov	r0, r7
   1568c:	add	sp, sp, #52	; 0x34
   15690:	ldrd	r4, [sp]
   15694:	ldrd	r6, [sp, #8]
   15698:	ldrd	r8, [sp, #16]
   1569c:	ldrd	sl, [sp, #24]
   156a0:	add	sp, sp, #32
   156a4:	pop	{pc}		; (ldr pc, [sp], #4)
   156a8:	bl	10efc <abort@plt>
   156ac:	sub	r2, r5, r2
   156b0:	mov	r3, #8
   156b4:	str	r3, [sp]
   156b8:	mvn	r3, #-2147483648	; 0x80000000
   156bc:	add	r2, r2, #1
   156c0:	add	r1, sp, #44	; 0x2c
   156c4:	mov	r0, #0
   156c8:	bl	16748 <__assert_fail@plt+0x5834>
   156cc:	mov	r6, r0
   156d0:	movw	r3, #37108	; 0x90f4
   156d4:	movt	r3, #2
   156d8:	str	r0, [r3]
   156dc:	ldrd	r2, [r3, #8]
   156e0:	strd	r2, [r0]
   156e4:	b	1559c <__assert_fail@plt+0x4688>
   156e8:	strd	r4, [sp, #-16]!
   156ec:	str	r6, [sp, #8]
   156f0:	str	lr, [sp, #12]
   156f4:	mov	r4, r0
   156f8:	bl	10e54 <__errno_location@plt>
   156fc:	mov	r5, r0
   15700:	ldr	r6, [r0]
   15704:	cmp	r4, #0
   15708:	ldr	r3, [pc, #32]	; 15730 <__assert_fail@plt+0x481c>
   1570c:	moveq	r4, r3
   15710:	mov	r1, #48	; 0x30
   15714:	mov	r0, r4
   15718:	bl	168b8 <__assert_fail@plt+0x59a4>
   1571c:	str	r6, [r5]
   15720:	ldrd	r4, [sp]
   15724:	ldr	r6, [sp, #8]
   15728:	add	sp, sp, #12
   1572c:	pop	{pc}		; (ldr pc, [sp], #4)
   15730:	andeq	fp, r2, r0, ror r5
   15734:	subs	r3, r0, #0
   15738:	ldr	r2, [pc, #8]	; 15748 <__assert_fail@plt+0x4834>
   1573c:	moveq	r3, r2
   15740:	ldr	r0, [r3]
   15744:	bx	lr
   15748:	andeq	fp, r2, r0, ror r5
   1574c:	subs	r3, r0, #0
   15750:	ldr	r2, [pc, #8]	; 15760 <__assert_fail@plt+0x484c>
   15754:	moveq	r3, r2
   15758:	str	r1, [r3]
   1575c:	bx	lr
   15760:	andeq	fp, r2, r0, ror r5
   15764:	push	{lr}		; (str lr, [sp, #-4]!)
   15768:	subs	r3, r0, #0
   1576c:	ldr	r0, [pc, #44]	; 157a0 <__assert_fail@plt+0x488c>
   15770:	moveq	r3, r0
   15774:	add	r3, r3, #8
   15778:	lsr	lr, r1, #5
   1577c:	and	r1, r1, #31
   15780:	ldr	ip, [r3, lr, lsl #2]
   15784:	lsr	r0, ip, r1
   15788:	eor	r2, r2, r0
   1578c:	and	r2, r2, #1
   15790:	eor	r1, ip, r2, lsl r1
   15794:	str	r1, [r3, lr, lsl #2]
   15798:	and	r0, r0, #1
   1579c:	pop	{pc}		; (ldr pc, [sp], #4)
   157a0:	andeq	fp, r2, r0, ror r5
   157a4:	subs	r3, r0, #0
   157a8:	ldr	r2, [pc, #12]	; 157bc <__assert_fail@plt+0x48a8>
   157ac:	moveq	r3, r2
   157b0:	ldr	r0, [r3, #4]
   157b4:	str	r1, [r3, #4]
   157b8:	bx	lr
   157bc:	andeq	fp, r2, r0, ror r5
   157c0:	subs	r3, r0, #0
   157c4:	ldr	r0, [pc, #44]	; 157f8 <__assert_fail@plt+0x48e4>
   157c8:	moveq	r3, r0
   157cc:	mov	r0, #10
   157d0:	str	r0, [r3]
   157d4:	cmp	r2, #0
   157d8:	cmpne	r1, #0
   157dc:	beq	157ec <__assert_fail@plt+0x48d8>
   157e0:	str	r1, [r3, #40]	; 0x28
   157e4:	str	r2, [r3, #44]	; 0x2c
   157e8:	bx	lr
   157ec:	str	r4, [sp, #-8]!
   157f0:	str	lr, [sp, #4]
   157f4:	bl	10efc <abort@plt>
   157f8:	andeq	fp, r2, r0, ror r5
   157fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15800:	strd	r6, [sp, #8]
   15804:	strd	r8, [sp, #16]
   15808:	str	sl, [sp, #24]
   1580c:	str	lr, [sp, #28]
   15810:	sub	sp, sp, #24
   15814:	mov	r7, r0
   15818:	mov	r8, r1
   1581c:	mov	r9, r2
   15820:	mov	sl, r3
   15824:	ldr	r4, [sp, #56]	; 0x38
   15828:	cmp	r4, #0
   1582c:	ldr	r3, [pc, #104]	; 1589c <__assert_fail@plt+0x4988>
   15830:	moveq	r4, r3
   15834:	bl	10e54 <__errno_location@plt>
   15838:	mov	r5, r0
   1583c:	ldr	r6, [r0]
   15840:	ldr	r3, [r4, #44]	; 0x2c
   15844:	str	r3, [sp, #16]
   15848:	ldr	r3, [r4, #40]	; 0x28
   1584c:	str	r3, [sp, #12]
   15850:	add	r3, r4, #8
   15854:	str	r3, [sp, #8]
   15858:	ldr	r3, [r4, #4]
   1585c:	str	r3, [sp, #4]
   15860:	ldr	r3, [r4]
   15864:	str	r3, [sp]
   15868:	mov	r3, sl
   1586c:	mov	r2, r9
   15870:	mov	r1, r8
   15874:	mov	r0, r7
   15878:	bl	13df8 <__assert_fail@plt+0x2ee4>
   1587c:	str	r6, [r5]
   15880:	add	sp, sp, #24
   15884:	ldrd	r4, [sp]
   15888:	ldrd	r6, [sp, #8]
   1588c:	ldrd	r8, [sp, #16]
   15890:	ldr	sl, [sp, #24]
   15894:	add	sp, sp, #28
   15898:	pop	{pc}		; (ldr pc, [sp], #4)
   1589c:	andeq	fp, r2, r0, ror r5
   158a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158a4:	strd	r6, [sp, #8]
   158a8:	strd	r8, [sp, #16]
   158ac:	strd	sl, [sp, #24]
   158b0:	str	lr, [sp, #32]
   158b4:	sub	sp, sp, #44	; 0x2c
   158b8:	mov	r8, r0
   158bc:	mov	sl, r1
   158c0:	mov	r6, r2
   158c4:	subs	r4, r3, #0
   158c8:	ldr	r3, [pc, #200]	; 15998 <__assert_fail@plt+0x4a84>
   158cc:	moveq	r4, r3
   158d0:	bl	10e54 <__errno_location@plt>
   158d4:	mov	r7, r0
   158d8:	ldr	fp, [r0]
   158dc:	ldr	r5, [r4, #4]
   158e0:	cmp	r6, #0
   158e4:	orreq	r5, r5, #1
   158e8:	add	r9, r4, #8
   158ec:	ldr	r3, [r4, #44]	; 0x2c
   158f0:	str	r3, [sp, #16]
   158f4:	ldr	r3, [r4, #40]	; 0x28
   158f8:	str	r3, [sp, #12]
   158fc:	str	r9, [sp, #8]
   15900:	str	r5, [sp, #4]
   15904:	ldr	r3, [r4]
   15908:	str	r3, [sp]
   1590c:	str	sl, [sp, #36]	; 0x24
   15910:	mov	r3, sl
   15914:	str	r8, [sp, #32]
   15918:	mov	r2, r8
   1591c:	mov	r1, #0
   15920:	mov	r0, r1
   15924:	bl	13df8 <__assert_fail@plt+0x2ee4>
   15928:	mov	sl, r0
   1592c:	add	r8, r0, #1
   15930:	mov	r0, r8
   15934:	bl	16544 <__assert_fail@plt+0x5630>
   15938:	str	r0, [sp, #28]
   1593c:	ldr	r3, [r4, #44]	; 0x2c
   15940:	str	r3, [sp, #16]
   15944:	ldr	r3, [r4, #40]	; 0x28
   15948:	str	r3, [sp, #12]
   1594c:	str	r9, [sp, #8]
   15950:	str	r5, [sp, #4]
   15954:	ldr	r3, [r4]
   15958:	str	r3, [sp]
   1595c:	ldr	r3, [sp, #36]	; 0x24
   15960:	ldr	r2, [sp, #32]
   15964:	mov	r1, r8
   15968:	bl	13df8 <__assert_fail@plt+0x2ee4>
   1596c:	str	fp, [r7]
   15970:	cmp	r6, #0
   15974:	strne	sl, [r6]
   15978:	ldr	r0, [sp, #28]
   1597c:	add	sp, sp, #44	; 0x2c
   15980:	ldrd	r4, [sp]
   15984:	ldrd	r6, [sp, #8]
   15988:	ldrd	r8, [sp, #16]
   1598c:	ldrd	sl, [sp, #24]
   15990:	add	sp, sp, #32
   15994:	pop	{pc}		; (ldr pc, [sp], #4)
   15998:	andeq	fp, r2, r0, ror r5
   1599c:	str	r4, [sp, #-8]!
   159a0:	str	lr, [sp, #4]
   159a4:	mov	r3, r2
   159a8:	mov	r2, #0
   159ac:	bl	158a0 <__assert_fail@plt+0x498c>
   159b0:	ldr	r4, [sp]
   159b4:	add	sp, sp, #4
   159b8:	pop	{pc}		; (ldr pc, [sp], #4)
   159bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159c0:	strd	r6, [sp, #8]
   159c4:	str	r8, [sp, #16]
   159c8:	str	lr, [sp, #20]
   159cc:	movw	r3, #37108	; 0x90f4
   159d0:	movt	r3, #2
   159d4:	ldr	r7, [r3]
   159d8:	ldr	r3, [r3, #4]
   159dc:	cmp	r3, #1
   159e0:	ble	15a0c <__assert_fail@plt+0x4af8>
   159e4:	mov	r4, #1
   159e8:	add	r6, r7, #4
   159ec:	movw	r5, #37108	; 0x90f4
   159f0:	movt	r5, #2
   159f4:	ldr	r0, [r6, r4, lsl #3]
   159f8:	bl	13b34 <__assert_fail@plt+0x2c20>
   159fc:	add	r4, r4, #1
   15a00:	ldr	r3, [r5, #4]
   15a04:	cmp	r3, r4
   15a08:	bgt	159f4 <__assert_fail@plt+0x4ae0>
   15a0c:	ldr	r0, [r7, #4]
   15a10:	movw	r3, #46192	; 0xb470
   15a14:	movt	r3, #2
   15a18:	cmp	r0, r3
   15a1c:	beq	15a40 <__assert_fail@plt+0x4b2c>
   15a20:	bl	13b34 <__assert_fail@plt+0x2c20>
   15a24:	movw	r3, #37108	; 0x90f4
   15a28:	movt	r3, #2
   15a2c:	mov	r2, #256	; 0x100
   15a30:	str	r2, [r3, #8]
   15a34:	movw	r2, #46192	; 0xb470
   15a38:	movt	r2, #2
   15a3c:	str	r2, [r3, #12]
   15a40:	ldr	r3, [pc, #64]	; 15a88 <__assert_fail@plt+0x4b74>
   15a44:	cmp	r7, r3
   15a48:	beq	15a64 <__assert_fail@plt+0x4b50>
   15a4c:	mov	r0, r7
   15a50:	bl	13b34 <__assert_fail@plt+0x2c20>
   15a54:	movw	r3, #37108	; 0x90f4
   15a58:	movt	r3, #2
   15a5c:	add	r2, r3, #8
   15a60:	str	r2, [r3]
   15a64:	movw	r3, #37108	; 0x90f4
   15a68:	movt	r3, #2
   15a6c:	mov	r2, #1
   15a70:	str	r2, [r3, #4]
   15a74:	ldrd	r4, [sp]
   15a78:	ldrd	r6, [sp, #8]
   15a7c:	ldr	r8, [sp, #16]
   15a80:	add	sp, sp, #20
   15a84:	pop	{pc}		; (ldr pc, [sp], #4)
   15a88:	strdeq	r9, [r2], -ip
   15a8c:	str	r4, [sp, #-8]!
   15a90:	str	lr, [sp, #4]
   15a94:	ldr	r3, [pc, #16]	; 15aac <__assert_fail@plt+0x4b98>
   15a98:	mvn	r2, #0
   15a9c:	bl	154f0 <__assert_fail@plt+0x45dc>
   15aa0:	ldr	r4, [sp]
   15aa4:	add	sp, sp, #4
   15aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aac:	andeq	fp, r2, r0, ror r5
   15ab0:	str	r4, [sp, #-8]!
   15ab4:	str	lr, [sp, #4]
   15ab8:	ldr	r3, [pc, #12]	; 15acc <__assert_fail@plt+0x4bb8>
   15abc:	bl	154f0 <__assert_fail@plt+0x45dc>
   15ac0:	ldr	r4, [sp]
   15ac4:	add	sp, sp, #4
   15ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   15acc:	andeq	fp, r2, r0, ror r5
   15ad0:	str	r4, [sp, #-8]!
   15ad4:	str	lr, [sp, #4]
   15ad8:	mov	r1, r0
   15adc:	mov	r0, #0
   15ae0:	bl	15a8c <__assert_fail@plt+0x4b78>
   15ae4:	ldr	r4, [sp]
   15ae8:	add	sp, sp, #4
   15aec:	pop	{pc}		; (ldr pc, [sp], #4)
   15af0:	str	r4, [sp, #-8]!
   15af4:	str	lr, [sp, #4]
   15af8:	mov	r2, r1
   15afc:	mov	r1, r0
   15b00:	mov	r0, #0
   15b04:	bl	15ab0 <__assert_fail@plt+0x4b9c>
   15b08:	ldr	r4, [sp]
   15b0c:	add	sp, sp, #4
   15b10:	pop	{pc}		; (ldr pc, [sp], #4)
   15b14:	strd	r4, [sp, #-12]!
   15b18:	str	lr, [sp, #8]
   15b1c:	sub	sp, sp, #52	; 0x34
   15b20:	mov	r4, r0
   15b24:	mov	r5, r2
   15b28:	mov	r0, sp
   15b2c:	bl	13c64 <__assert_fail@plt+0x2d50>
   15b30:	mov	r3, sp
   15b34:	mvn	r2, #0
   15b38:	mov	r1, r5
   15b3c:	mov	r0, r4
   15b40:	bl	154f0 <__assert_fail@plt+0x45dc>
   15b44:	add	sp, sp, #52	; 0x34
   15b48:	ldrd	r4, [sp]
   15b4c:	add	sp, sp, #8
   15b50:	pop	{pc}		; (ldr pc, [sp], #4)
   15b54:	strd	r4, [sp, #-16]!
   15b58:	str	r6, [sp, #8]
   15b5c:	str	lr, [sp, #12]
   15b60:	sub	sp, sp, #48	; 0x30
   15b64:	mov	r4, r0
   15b68:	mov	r5, r2
   15b6c:	mov	r6, r3
   15b70:	mov	r0, sp
   15b74:	bl	13c64 <__assert_fail@plt+0x2d50>
   15b78:	mov	r3, sp
   15b7c:	mov	r2, r6
   15b80:	mov	r1, r5
   15b84:	mov	r0, r4
   15b88:	bl	154f0 <__assert_fail@plt+0x45dc>
   15b8c:	add	sp, sp, #48	; 0x30
   15b90:	ldrd	r4, [sp]
   15b94:	ldr	r6, [sp, #8]
   15b98:	add	sp, sp, #12
   15b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15ba0:	str	r4, [sp, #-8]!
   15ba4:	str	lr, [sp, #4]
   15ba8:	mov	r2, r1
   15bac:	mov	r1, r0
   15bb0:	mov	r0, #0
   15bb4:	bl	15b14 <__assert_fail@plt+0x4c00>
   15bb8:	ldr	r4, [sp]
   15bbc:	add	sp, sp, #4
   15bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc4:	str	r4, [sp, #-8]!
   15bc8:	str	lr, [sp, #4]
   15bcc:	mov	r3, r2
   15bd0:	mov	r2, r1
   15bd4:	mov	r1, r0
   15bd8:	mov	r0, #0
   15bdc:	bl	15b54 <__assert_fail@plt+0x4c40>
   15be0:	ldr	r4, [sp]
   15be4:	add	sp, sp, #4
   15be8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bec:	strd	r4, [sp, #-12]!
   15bf0:	str	lr, [sp, #8]
   15bf4:	sub	sp, sp, #52	; 0x34
   15bf8:	mov	r4, r0
   15bfc:	mov	r5, r1
   15c00:	mov	r1, r2
   15c04:	ldr	r0, [pc, #92]	; 15c68 <__assert_fail@plt+0x4d54>
   15c08:	ldrd	r2, [r0]
   15c0c:	strd	r2, [sp]
   15c10:	ldrd	r2, [r0, #8]
   15c14:	strd	r2, [sp, #8]
   15c18:	ldrd	r2, [r0, #16]
   15c1c:	strd	r2, [sp, #16]
   15c20:	ldrd	r2, [r0, #24]
   15c24:	strd	r2, [sp, #24]
   15c28:	ldrd	r2, [r0, #32]
   15c2c:	strd	r2, [sp, #32]
   15c30:	ldrd	r2, [r0, #40]	; 0x28
   15c34:	strd	r2, [sp, #40]	; 0x28
   15c38:	mov	r2, #1
   15c3c:	mov	r0, sp
   15c40:	bl	15764 <__assert_fail@plt+0x4850>
   15c44:	mov	r3, sp
   15c48:	mov	r2, r5
   15c4c:	mov	r1, r4
   15c50:	mov	r0, #0
   15c54:	bl	154f0 <__assert_fail@plt+0x45dc>
   15c58:	add	sp, sp, #52	; 0x34
   15c5c:	ldrd	r4, [sp]
   15c60:	add	sp, sp, #8
   15c64:	pop	{pc}		; (ldr pc, [sp], #4)
   15c68:	andeq	fp, r2, r0, ror r5
   15c6c:	str	r4, [sp, #-8]!
   15c70:	str	lr, [sp, #4]
   15c74:	mov	r2, r1
   15c78:	mvn	r1, #0
   15c7c:	bl	15bec <__assert_fail@plt+0x4cd8>
   15c80:	ldr	r4, [sp]
   15c84:	add	sp, sp, #4
   15c88:	pop	{pc}		; (ldr pc, [sp], #4)
   15c8c:	str	r4, [sp, #-8]!
   15c90:	str	lr, [sp, #4]
   15c94:	mov	r1, #58	; 0x3a
   15c98:	bl	15c6c <__assert_fail@plt+0x4d58>
   15c9c:	ldr	r4, [sp]
   15ca0:	add	sp, sp, #4
   15ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ca8:	str	r4, [sp, #-8]!
   15cac:	str	lr, [sp, #4]
   15cb0:	mov	r2, #58	; 0x3a
   15cb4:	bl	15bec <__assert_fail@plt+0x4cd8>
   15cb8:	ldr	r4, [sp]
   15cbc:	add	sp, sp, #4
   15cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cc4:	strd	r4, [sp, #-12]!
   15cc8:	str	lr, [sp, #8]
   15ccc:	sub	sp, sp, #100	; 0x64
   15cd0:	mov	r4, r0
   15cd4:	mov	r5, r2
   15cd8:	mov	r0, sp
   15cdc:	bl	13c64 <__assert_fail@plt+0x2d50>
   15ce0:	ldrd	r2, [sp]
   15ce4:	strd	r2, [sp, #48]	; 0x30
   15ce8:	ldrd	r2, [sp, #8]
   15cec:	strd	r2, [sp, #56]	; 0x38
   15cf0:	ldrd	r2, [sp, #16]
   15cf4:	strd	r2, [sp, #64]	; 0x40
   15cf8:	ldrd	r2, [sp, #24]
   15cfc:	strd	r2, [sp, #72]	; 0x48
   15d00:	ldrd	r2, [sp, #32]
   15d04:	strd	r2, [sp, #80]	; 0x50
   15d08:	ldrd	r2, [sp, #40]	; 0x28
   15d0c:	strd	r2, [sp, #88]	; 0x58
   15d10:	mov	r2, #1
   15d14:	mov	r1, #58	; 0x3a
   15d18:	add	r0, sp, #48	; 0x30
   15d1c:	bl	15764 <__assert_fail@plt+0x4850>
   15d20:	add	r3, sp, #48	; 0x30
   15d24:	mvn	r2, #0
   15d28:	mov	r1, r5
   15d2c:	mov	r0, r4
   15d30:	bl	154f0 <__assert_fail@plt+0x45dc>
   15d34:	add	sp, sp, #100	; 0x64
   15d38:	ldrd	r4, [sp]
   15d3c:	add	sp, sp, #8
   15d40:	pop	{pc}		; (ldr pc, [sp], #4)
   15d44:	strd	r4, [sp, #-20]!	; 0xffffffec
   15d48:	strd	r6, [sp, #8]
   15d4c:	str	lr, [sp, #16]
   15d50:	sub	sp, sp, #52	; 0x34
   15d54:	mov	r4, r0
   15d58:	mov	r5, r3
   15d5c:	ldr	r3, [pc, #92]	; 15dc0 <__assert_fail@plt+0x4eac>
   15d60:	ldrd	r6, [r3]
   15d64:	strd	r6, [sp]
   15d68:	ldrd	r6, [r3, #8]
   15d6c:	strd	r6, [sp, #8]
   15d70:	ldrd	r6, [r3, #16]
   15d74:	strd	r6, [sp, #16]
   15d78:	ldrd	r6, [r3, #24]
   15d7c:	strd	r6, [sp, #24]
   15d80:	ldrd	r6, [r3, #32]
   15d84:	strd	r6, [sp, #32]
   15d88:	ldrd	r6, [r3, #40]	; 0x28
   15d8c:	strd	r6, [sp, #40]	; 0x28
   15d90:	mov	r0, sp
   15d94:	bl	157c0 <__assert_fail@plt+0x48ac>
   15d98:	mov	r3, sp
   15d9c:	ldr	r2, [sp, #72]	; 0x48
   15da0:	mov	r1, r5
   15da4:	mov	r0, r4
   15da8:	bl	154f0 <__assert_fail@plt+0x45dc>
   15dac:	add	sp, sp, #52	; 0x34
   15db0:	ldrd	r4, [sp]
   15db4:	ldrd	r6, [sp, #8]
   15db8:	add	sp, sp, #16
   15dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc0:	andeq	fp, r2, r0, ror r5
   15dc4:	push	{lr}		; (str lr, [sp, #-4]!)
   15dc8:	sub	sp, sp, #12
   15dcc:	mvn	ip, #0
   15dd0:	str	ip, [sp]
   15dd4:	bl	15d44 <__assert_fail@plt+0x4e30>
   15dd8:	add	sp, sp, #12
   15ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   15de0:	str	r4, [sp, #-8]!
   15de4:	str	lr, [sp, #4]
   15de8:	mov	r3, r2
   15dec:	mov	r2, r1
   15df0:	mov	r1, r0
   15df4:	mov	r0, #0
   15df8:	bl	15dc4 <__assert_fail@plt+0x4eb0>
   15dfc:	ldr	r4, [sp]
   15e00:	add	sp, sp, #4
   15e04:	pop	{pc}		; (ldr pc, [sp], #4)
   15e08:	push	{lr}		; (str lr, [sp, #-4]!)
   15e0c:	sub	sp, sp, #12
   15e10:	str	r3, [sp]
   15e14:	mov	r3, r2
   15e18:	mov	r2, r1
   15e1c:	mov	r1, r0
   15e20:	mov	r0, #0
   15e24:	bl	15d44 <__assert_fail@plt+0x4e30>
   15e28:	add	sp, sp, #12
   15e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e30:	str	r4, [sp, #-8]!
   15e34:	str	lr, [sp, #4]
   15e38:	ldr	r3, [pc, #12]	; 15e4c <__assert_fail@plt+0x4f38>
   15e3c:	bl	154f0 <__assert_fail@plt+0x45dc>
   15e40:	ldr	r4, [sp]
   15e44:	add	sp, sp, #4
   15e48:	pop	{pc}		; (ldr pc, [sp], #4)
   15e4c:	andeq	r9, r2, r4, lsl #2
   15e50:	str	r4, [sp, #-8]!
   15e54:	str	lr, [sp, #4]
   15e58:	mov	r2, r1
   15e5c:	mov	r1, r0
   15e60:	mov	r0, #0
   15e64:	bl	15e30 <__assert_fail@plt+0x4f1c>
   15e68:	ldr	r4, [sp]
   15e6c:	add	sp, sp, #4
   15e70:	pop	{pc}		; (ldr pc, [sp], #4)
   15e74:	str	r4, [sp, #-8]!
   15e78:	str	lr, [sp, #4]
   15e7c:	mvn	r2, #0
   15e80:	bl	15e30 <__assert_fail@plt+0x4f1c>
   15e84:	ldr	r4, [sp]
   15e88:	add	sp, sp, #4
   15e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e90:	str	r4, [sp, #-8]!
   15e94:	str	lr, [sp, #4]
   15e98:	mov	r1, r0
   15e9c:	mov	r0, #0
   15ea0:	bl	15e74 <__assert_fail@plt+0x4f60>
   15ea4:	ldr	r4, [sp]
   15ea8:	add	sp, sp, #4
   15eac:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15eb4:	strd	r6, [sp, #8]
   15eb8:	strd	r8, [sp, #16]
   15ebc:	str	sl, [sp, #24]
   15ec0:	str	lr, [sp, #28]
   15ec4:	mov	r8, r0
   15ec8:	mov	r7, r1
   15ecc:	mov	r9, r2
   15ed0:	mov	r5, #0
   15ed4:	movt	r5, #32752	; 0x7ff0
   15ed8:	b	15ee0 <__assert_fail@plt+0x4fcc>
   15edc:	mov	r9, r5
   15ee0:	mov	r2, r9
   15ee4:	mov	r1, r7
   15ee8:	mov	r0, r8
   15eec:	bl	10cd4 <read@plt>
   15ef0:	subs	r6, r0, #0
   15ef4:	bge	15f40 <__assert_fail@plt+0x502c>
   15ef8:	bl	10e54 <__errno_location@plt>
   15efc:	ldr	r3, [r0]
   15f00:	cmp	r3, #4
   15f04:	beq	15ee0 <__assert_fail@plt+0x4fcc>
   15f08:	cmp	r9, r5
   15f0c:	movls	r4, #0
   15f10:	movhi	r4, #1
   15f14:	cmp	r3, #22
   15f18:	movne	r4, #0
   15f1c:	cmp	r4, #0
   15f20:	bne	15edc <__assert_fail@plt+0x4fc8>
   15f24:	mov	r0, r6
   15f28:	ldrd	r4, [sp]
   15f2c:	ldrd	r6, [sp, #8]
   15f30:	ldrd	r8, [sp, #16]
   15f34:	ldr	sl, [sp, #24]
   15f38:	add	sp, sp, #28
   15f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f40:	mov	r0, r6
   15f44:	b	15f28 <__assert_fail@plt+0x5014>
   15f48:	strd	r4, [sp, #-16]!
   15f4c:	str	r6, [sp, #8]
   15f50:	str	lr, [sp, #12]
   15f54:	sub	sp, sp, #32
   15f58:	mov	r4, r0
   15f5c:	ldr	r5, [sp, #48]	; 0x30
   15f60:	ldr	r6, [sp, #52]	; 0x34
   15f64:	cmp	r1, #0
   15f68:	beq	16034 <__assert_fail@plt+0x5120>
   15f6c:	str	r3, [sp, #4]
   15f70:	str	r2, [sp]
   15f74:	mov	r3, r1
   15f78:	movw	r2, #35612	; 0x8b1c
   15f7c:	movt	r2, #1
   15f80:	mov	r1, #1
   15f84:	bl	10e9c <__fprintf_chk@plt>
   15f88:	mov	r2, #5
   15f8c:	movw	r1, #35632	; 0x8b30
   15f90:	movt	r1, #1
   15f94:	mov	r0, #0
   15f98:	bl	10d58 <dcgettext@plt>
   15f9c:	movw	r3, #2022	; 0x7e6
   15fa0:	str	r3, [sp]
   15fa4:	mov	r3, r0
   15fa8:	movw	r2, #36360	; 0x8e08
   15fac:	movt	r2, #1
   15fb0:	mov	r1, #1
   15fb4:	mov	r0, r4
   15fb8:	bl	10e9c <__fprintf_chk@plt>
   15fbc:	mov	r1, r4
   15fc0:	mov	r0, #10
   15fc4:	bl	10d4c <fputc_unlocked@plt>
   15fc8:	mov	r2, #5
   15fcc:	movw	r1, #35636	; 0x8b34
   15fd0:	movt	r1, #1
   15fd4:	mov	r0, #0
   15fd8:	bl	10d58 <dcgettext@plt>
   15fdc:	movw	r3, #35808	; 0x8be0
   15fe0:	movt	r3, #1
   15fe4:	mov	r2, r0
   15fe8:	mov	r1, #1
   15fec:	mov	r0, r4
   15ff0:	bl	10e9c <__fprintf_chk@plt>
   15ff4:	mov	r1, r4
   15ff8:	mov	r0, #10
   15ffc:	bl	10d4c <fputc_unlocked@plt>
   16000:	cmp	r6, #9
   16004:	ldrls	pc, [pc, r6, lsl #2]
   16008:	b	1630c <__assert_fail@plt+0x53f8>
   1600c:	andeq	r6, r1, r8, ror r0
   16010:	andeq	r6, r1, r0, asr r0
   16014:	andeq	r6, r1, ip, lsl #1
   16018:	andeq	r6, r1, r0, asr #1
   1601c:	strdeq	r6, [r1], -ip
   16020:	andeq	r6, r1, r0, asr #2
   16024:	andeq	r6, r1, ip, lsl #3
   16028:	andeq	r6, r1, r0, ror #3
   1602c:	andeq	r6, r1, ip, lsr r2
   16030:	andeq	r6, r1, r0, lsr #5
   16034:	str	r3, [sp]
   16038:	mov	r3, r2
   1603c:	movw	r2, #35624	; 0x8b28
   16040:	movt	r2, #1
   16044:	mov	r1, #1
   16048:	bl	10e9c <__fprintf_chk@plt>
   1604c:	b	15f88 <__assert_fail@plt+0x5074>
   16050:	mov	r2, #5
   16054:	movw	r1, #35844	; 0x8c04
   16058:	movt	r1, #1
   1605c:	mov	r0, #0
   16060:	bl	10d58 <dcgettext@plt>
   16064:	ldr	r3, [r5]
   16068:	mov	r2, r0
   1606c:	mov	r1, #1
   16070:	mov	r0, r4
   16074:	bl	10e9c <__fprintf_chk@plt>
   16078:	add	sp, sp, #32
   1607c:	ldrd	r4, [sp]
   16080:	ldr	r6, [sp, #8]
   16084:	add	sp, sp, #12
   16088:	pop	{pc}		; (ldr pc, [sp], #4)
   1608c:	mov	r2, #5
   16090:	movw	r1, #35860	; 0x8c14
   16094:	movt	r1, #1
   16098:	mov	r0, #0
   1609c:	bl	10d58 <dcgettext@plt>
   160a0:	ldr	r3, [r5, #4]
   160a4:	str	r3, [sp]
   160a8:	ldr	r3, [r5]
   160ac:	mov	r2, r0
   160b0:	mov	r1, #1
   160b4:	mov	r0, r4
   160b8:	bl	10e9c <__fprintf_chk@plt>
   160bc:	b	16078 <__assert_fail@plt+0x5164>
   160c0:	mov	r2, #5
   160c4:	movw	r1, #35884	; 0x8c2c
   160c8:	movt	r1, #1
   160cc:	mov	r0, #0
   160d0:	bl	10d58 <dcgettext@plt>
   160d4:	ldr	r3, [r5, #8]
   160d8:	str	r3, [sp, #4]
   160dc:	ldr	r3, [r5, #4]
   160e0:	str	r3, [sp]
   160e4:	ldr	r3, [r5]
   160e8:	mov	r2, r0
   160ec:	mov	r1, #1
   160f0:	mov	r0, r4
   160f4:	bl	10e9c <__fprintf_chk@plt>
   160f8:	b	16078 <__assert_fail@plt+0x5164>
   160fc:	mov	r2, #5
   16100:	movw	r1, #35912	; 0x8c48
   16104:	movt	r1, #1
   16108:	mov	r0, #0
   1610c:	bl	10d58 <dcgettext@plt>
   16110:	ldr	r3, [r5, #12]
   16114:	str	r3, [sp, #8]
   16118:	ldr	r3, [r5, #8]
   1611c:	str	r3, [sp, #4]
   16120:	ldr	r3, [r5, #4]
   16124:	str	r3, [sp]
   16128:	ldr	r3, [r5]
   1612c:	mov	r2, r0
   16130:	mov	r1, #1
   16134:	mov	r0, r4
   16138:	bl	10e9c <__fprintf_chk@plt>
   1613c:	b	16078 <__assert_fail@plt+0x5164>
   16140:	mov	r2, #5
   16144:	movw	r1, #35944	; 0x8c68
   16148:	movt	r1, #1
   1614c:	mov	r0, #0
   16150:	bl	10d58 <dcgettext@plt>
   16154:	ldr	r3, [r5, #16]
   16158:	str	r3, [sp, #12]
   1615c:	ldr	r3, [r5, #12]
   16160:	str	r3, [sp, #8]
   16164:	ldr	r3, [r5, #8]
   16168:	str	r3, [sp, #4]
   1616c:	ldr	r3, [r5, #4]
   16170:	str	r3, [sp]
   16174:	ldr	r3, [r5]
   16178:	mov	r2, r0
   1617c:	mov	r1, #1
   16180:	mov	r0, r4
   16184:	bl	10e9c <__fprintf_chk@plt>
   16188:	b	16078 <__assert_fail@plt+0x5164>
   1618c:	mov	r2, #5
   16190:	movw	r1, #35980	; 0x8c8c
   16194:	movt	r1, #1
   16198:	mov	r0, #0
   1619c:	bl	10d58 <dcgettext@plt>
   161a0:	ldr	r3, [r5, #20]
   161a4:	str	r3, [sp, #16]
   161a8:	ldr	r3, [r5, #16]
   161ac:	str	r3, [sp, #12]
   161b0:	ldr	r3, [r5, #12]
   161b4:	str	r3, [sp, #8]
   161b8:	ldr	r3, [r5, #8]
   161bc:	str	r3, [sp, #4]
   161c0:	ldr	r3, [r5, #4]
   161c4:	str	r3, [sp]
   161c8:	ldr	r3, [r5]
   161cc:	mov	r2, r0
   161d0:	mov	r1, #1
   161d4:	mov	r0, r4
   161d8:	bl	10e9c <__fprintf_chk@plt>
   161dc:	b	16078 <__assert_fail@plt+0x5164>
   161e0:	mov	r2, #5
   161e4:	movw	r1, #36020	; 0x8cb4
   161e8:	movt	r1, #1
   161ec:	mov	r0, #0
   161f0:	bl	10d58 <dcgettext@plt>
   161f4:	ldr	r3, [r5, #24]
   161f8:	str	r3, [sp, #20]
   161fc:	ldr	r3, [r5, #20]
   16200:	str	r3, [sp, #16]
   16204:	ldr	r3, [r5, #16]
   16208:	str	r3, [sp, #12]
   1620c:	ldr	r3, [r5, #12]
   16210:	str	r3, [sp, #8]
   16214:	ldr	r3, [r5, #8]
   16218:	str	r3, [sp, #4]
   1621c:	ldr	r3, [r5, #4]
   16220:	str	r3, [sp]
   16224:	ldr	r3, [r5]
   16228:	mov	r2, r0
   1622c:	mov	r1, #1
   16230:	mov	r0, r4
   16234:	bl	10e9c <__fprintf_chk@plt>
   16238:	b	16078 <__assert_fail@plt+0x5164>
   1623c:	mov	r2, #5
   16240:	movw	r1, #36064	; 0x8ce0
   16244:	movt	r1, #1
   16248:	mov	r0, #0
   1624c:	bl	10d58 <dcgettext@plt>
   16250:	ldr	r3, [r5, #28]
   16254:	str	r3, [sp, #24]
   16258:	ldr	r3, [r5, #24]
   1625c:	str	r3, [sp, #20]
   16260:	ldr	r3, [r5, #20]
   16264:	str	r3, [sp, #16]
   16268:	ldr	r3, [r5, #16]
   1626c:	str	r3, [sp, #12]
   16270:	ldr	r3, [r5, #12]
   16274:	str	r3, [sp, #8]
   16278:	ldr	r3, [r5, #8]
   1627c:	str	r3, [sp, #4]
   16280:	ldr	r3, [r5, #4]
   16284:	str	r3, [sp]
   16288:	ldr	r3, [r5]
   1628c:	mov	r2, r0
   16290:	mov	r1, #1
   16294:	mov	r0, r4
   16298:	bl	10e9c <__fprintf_chk@plt>
   1629c:	b	16078 <__assert_fail@plt+0x5164>
   162a0:	mov	r2, #5
   162a4:	movw	r1, #36112	; 0x8d10
   162a8:	movt	r1, #1
   162ac:	mov	r0, #0
   162b0:	bl	10d58 <dcgettext@plt>
   162b4:	ldr	r3, [r5, #32]
   162b8:	str	r3, [sp, #28]
   162bc:	ldr	r3, [r5, #28]
   162c0:	str	r3, [sp, #24]
   162c4:	ldr	r3, [r5, #24]
   162c8:	str	r3, [sp, #20]
   162cc:	ldr	r3, [r5, #20]
   162d0:	str	r3, [sp, #16]
   162d4:	ldr	r3, [r5, #16]
   162d8:	str	r3, [sp, #12]
   162dc:	ldr	r3, [r5, #12]
   162e0:	str	r3, [sp, #8]
   162e4:	ldr	r3, [r5, #8]
   162e8:	str	r3, [sp, #4]
   162ec:	ldr	r3, [r5, #4]
   162f0:	str	r3, [sp]
   162f4:	ldr	r3, [r5]
   162f8:	mov	r2, r0
   162fc:	mov	r1, #1
   16300:	mov	r0, r4
   16304:	bl	10e9c <__fprintf_chk@plt>
   16308:	b	16078 <__assert_fail@plt+0x5164>
   1630c:	mov	r2, #5
   16310:	movw	r1, #36164	; 0x8d44
   16314:	movt	r1, #1
   16318:	mov	r0, #0
   1631c:	bl	10d58 <dcgettext@plt>
   16320:	ldr	r3, [r5, #32]
   16324:	str	r3, [sp, #28]
   16328:	ldr	r3, [r5, #28]
   1632c:	str	r3, [sp, #24]
   16330:	ldr	r3, [r5, #24]
   16334:	str	r3, [sp, #20]
   16338:	ldr	r3, [r5, #20]
   1633c:	str	r3, [sp, #16]
   16340:	ldr	r3, [r5, #16]
   16344:	str	r3, [sp, #12]
   16348:	ldr	r3, [r5, #12]
   1634c:	str	r3, [sp, #8]
   16350:	ldr	r3, [r5, #8]
   16354:	str	r3, [sp, #4]
   16358:	ldr	r3, [r5, #4]
   1635c:	str	r3, [sp]
   16360:	ldr	r3, [r5]
   16364:	mov	r2, r0
   16368:	mov	r1, #1
   1636c:	mov	r0, r4
   16370:	bl	10e9c <__fprintf_chk@plt>
   16374:	b	16078 <__assert_fail@plt+0x5164>
   16378:	strd	r4, [sp, #-12]!
   1637c:	str	lr, [sp, #8]
   16380:	sub	sp, sp, #12
   16384:	ldr	r5, [sp, #24]
   16388:	ldr	ip, [r5]
   1638c:	cmp	ip, #0
   16390:	beq	163c8 <__assert_fail@plt+0x54b4>
   16394:	mov	lr, r5
   16398:	mov	ip, #0
   1639c:	add	ip, ip, #1
   163a0:	ldr	r4, [lr, #4]!
   163a4:	cmp	r4, #0
   163a8:	bne	1639c <__assert_fail@plt+0x5488>
   163ac:	str	ip, [sp, #4]
   163b0:	str	r5, [sp]
   163b4:	bl	15f48 <__assert_fail@plt+0x5034>
   163b8:	add	sp, sp, #12
   163bc:	ldrd	r4, [sp]
   163c0:	add	sp, sp, #8
   163c4:	pop	{pc}		; (ldr pc, [sp], #4)
   163c8:	mov	ip, #0
   163cc:	b	163ac <__assert_fail@plt+0x5498>
   163d0:	strd	r4, [sp, #-12]!
   163d4:	str	lr, [sp, #8]
   163d8:	sub	sp, sp, #52	; 0x34
   163dc:	ldr	r5, [sp, #64]	; 0x40
   163e0:	add	r4, sp, #8
   163e4:	mov	ip, #0
   163e8:	ldr	lr, [r5], #4
   163ec:	str	lr, [r4], #4
   163f0:	cmp	lr, #0
   163f4:	beq	16404 <__assert_fail@plt+0x54f0>
   163f8:	add	ip, ip, #1
   163fc:	cmp	ip, #10
   16400:	bne	163e8 <__assert_fail@plt+0x54d4>
   16404:	str	ip, [sp, #4]
   16408:	add	ip, sp, #8
   1640c:	str	ip, [sp]
   16410:	bl	15f48 <__assert_fail@plt+0x5034>
   16414:	add	sp, sp, #52	; 0x34
   16418:	ldrd	r4, [sp]
   1641c:	add	sp, sp, #8
   16420:	pop	{pc}		; (ldr pc, [sp], #4)
   16424:	push	{r3}		; (str r3, [sp, #-4]!)
   16428:	push	{lr}		; (str lr, [sp, #-4]!)
   1642c:	sub	sp, sp, #16
   16430:	add	r3, sp, #24
   16434:	str	r3, [sp, #12]
   16438:	str	r3, [sp]
   1643c:	ldr	r3, [sp, #20]
   16440:	bl	163d0 <__assert_fail@plt+0x54bc>
   16444:	add	sp, sp, #16
   16448:	pop	{lr}		; (ldr lr, [sp], #4)
   1644c:	add	sp, sp, #4
   16450:	bx	lr
   16454:	str	r4, [sp, #-8]!
   16458:	str	lr, [sp, #4]
   1645c:	movw	r3, #37204	; 0x9154
   16460:	movt	r3, #2
   16464:	ldr	r1, [r3]
   16468:	mov	r0, #10
   1646c:	bl	10d4c <fputc_unlocked@plt>
   16470:	mov	r2, #5
   16474:	movw	r1, #36224	; 0x8d80
   16478:	movt	r1, #1
   1647c:	mov	r0, #0
   16480:	bl	10d58 <dcgettext@plt>
   16484:	movw	r2, #36244	; 0x8d94
   16488:	movt	r2, #1
   1648c:	mov	r1, r0
   16490:	mov	r0, #1
   16494:	bl	10e84 <__printf_chk@plt>
   16498:	mov	r2, #5
   1649c:	movw	r1, #36268	; 0x8dac
   164a0:	movt	r1, #1
   164a4:	mov	r0, #0
   164a8:	bl	10d58 <dcgettext@plt>
   164ac:	movw	r3, #33748	; 0x83d4
   164b0:	movt	r3, #1
   164b4:	movw	r2, #33788	; 0x83fc
   164b8:	movt	r2, #1
   164bc:	mov	r1, r0
   164c0:	mov	r0, #1
   164c4:	bl	10e84 <__printf_chk@plt>
   164c8:	mov	r2, #5
   164cc:	movw	r1, #36288	; 0x8dc0
   164d0:	movt	r1, #1
   164d4:	mov	r0, #0
   164d8:	bl	10d58 <dcgettext@plt>
   164dc:	movw	r2, #36328	; 0x8de8
   164e0:	movt	r2, #1
   164e4:	mov	r1, r0
   164e8:	mov	r0, #1
   164ec:	bl	10e84 <__printf_chk@plt>
   164f0:	ldr	r4, [sp]
   164f4:	add	sp, sp, #4
   164f8:	pop	{pc}		; (ldr pc, [sp], #4)
   164fc:	str	r4, [sp, #-8]!
   16500:	str	lr, [sp, #4]
   16504:	bl	170bc <__assert_fail@plt+0x61a8>
   16508:	cmp	r0, #0
   1650c:	beq	1651c <__assert_fail@plt+0x5608>
   16510:	ldr	r4, [sp]
   16514:	add	sp, sp, #4
   16518:	pop	{pc}		; (ldr pc, [sp], #4)
   1651c:	bl	16990 <__assert_fail@plt+0x5a7c>
   16520:	str	r4, [sp, #-8]!
   16524:	str	lr, [sp, #4]
   16528:	bl	170bc <__assert_fail@plt+0x61a8>
   1652c:	cmp	r0, #0
   16530:	beq	16540 <__assert_fail@plt+0x562c>
   16534:	ldr	r4, [sp]
   16538:	add	sp, sp, #4
   1653c:	pop	{pc}		; (ldr pc, [sp], #4)
   16540:	bl	16990 <__assert_fail@plt+0x5a7c>
   16544:	str	r4, [sp, #-8]!
   16548:	str	lr, [sp, #4]
   1654c:	bl	164fc <__assert_fail@plt+0x55e8>
   16550:	ldr	r4, [sp]
   16554:	add	sp, sp, #4
   16558:	pop	{pc}		; (ldr pc, [sp], #4)
   1655c:	strd	r4, [sp, #-16]!
   16560:	str	r6, [sp, #8]
   16564:	str	lr, [sp, #12]
   16568:	mov	r5, r0
   1656c:	mov	r4, r1
   16570:	bl	170f8 <__assert_fail@plt+0x61e4>
   16574:	cmp	r0, #0
   16578:	beq	1658c <__assert_fail@plt+0x5678>
   1657c:	ldrd	r4, [sp]
   16580:	ldr	r6, [sp, #8]
   16584:	add	sp, sp, #12
   16588:	pop	{pc}		; (ldr pc, [sp], #4)
   1658c:	adds	r4, r4, #0
   16590:	movne	r4, #1
   16594:	cmp	r5, #0
   16598:	moveq	r4, #1
   1659c:	cmp	r4, #0
   165a0:	beq	1657c <__assert_fail@plt+0x5668>
   165a4:	bl	16990 <__assert_fail@plt+0x5a7c>
   165a8:	str	r4, [sp, #-8]!
   165ac:	str	lr, [sp, #4]
   165b0:	cmp	r1, #0
   165b4:	orreq	r1, r1, #1
   165b8:	bl	170f8 <__assert_fail@plt+0x61e4>
   165bc:	cmp	r0, #0
   165c0:	beq	165d0 <__assert_fail@plt+0x56bc>
   165c4:	ldr	r4, [sp]
   165c8:	add	sp, sp, #4
   165cc:	pop	{pc}		; (ldr pc, [sp], #4)
   165d0:	bl	16990 <__assert_fail@plt+0x5a7c>
   165d4:	strd	r4, [sp, #-16]!
   165d8:	str	r6, [sp, #8]
   165dc:	str	lr, [sp, #12]
   165e0:	mov	r4, r0
   165e4:	mov	r6, r1
   165e8:	mov	r5, r2
   165ec:	bl	17480 <__assert_fail@plt+0x656c>
   165f0:	cmp	r0, #0
   165f4:	beq	16608 <__assert_fail@plt+0x56f4>
   165f8:	ldrd	r4, [sp]
   165fc:	ldr	r6, [sp, #8]
   16600:	add	sp, sp, #12
   16604:	pop	{pc}		; (ldr pc, [sp], #4)
   16608:	cmp	r4, #0
   1660c:	beq	1661c <__assert_fail@plt+0x5708>
   16610:	cmp	r6, #0
   16614:	cmpne	r5, #0
   16618:	beq	165f8 <__assert_fail@plt+0x56e4>
   1661c:	bl	16990 <__assert_fail@plt+0x5a7c>
   16620:	str	r4, [sp, #-8]!
   16624:	str	lr, [sp, #4]
   16628:	bl	165d4 <__assert_fail@plt+0x56c0>
   1662c:	ldr	r4, [sp]
   16630:	add	sp, sp, #4
   16634:	pop	{pc}		; (ldr pc, [sp], #4)
   16638:	str	r4, [sp, #-8]!
   1663c:	str	lr, [sp, #4]
   16640:	mov	ip, r1
   16644:	mov	r3, r2
   16648:	cmp	r2, #0
   1664c:	cmpne	r1, #0
   16650:	moveq	r3, #1
   16654:	moveq	ip, r3
   16658:	mov	r2, r3
   1665c:	mov	r1, ip
   16660:	bl	17480 <__assert_fail@plt+0x656c>
   16664:	cmp	r0, #0
   16668:	beq	16678 <__assert_fail@plt+0x5764>
   1666c:	ldr	r4, [sp]
   16670:	add	sp, sp, #4
   16674:	pop	{pc}		; (ldr pc, [sp], #4)
   16678:	bl	16990 <__assert_fail@plt+0x5a7c>
   1667c:	str	r4, [sp, #-8]!
   16680:	str	lr, [sp, #4]
   16684:	mov	r2, r1
   16688:	mov	r1, r0
   1668c:	mov	r0, #0
   16690:	bl	165d4 <__assert_fail@plt+0x56c0>
   16694:	ldr	r4, [sp]
   16698:	add	sp, sp, #4
   1669c:	pop	{pc}		; (ldr pc, [sp], #4)
   166a0:	str	r4, [sp, #-8]!
   166a4:	str	lr, [sp, #4]
   166a8:	mov	r2, r1
   166ac:	mov	r1, r0
   166b0:	mov	r0, #0
   166b4:	bl	16638 <__assert_fail@plt+0x5724>
   166b8:	ldr	r4, [sp]
   166bc:	add	sp, sp, #4
   166c0:	pop	{pc}		; (ldr pc, [sp], #4)
   166c4:	strd	r4, [sp, #-16]!
   166c8:	str	r6, [sp, #8]
   166cc:	str	lr, [sp, #12]
   166d0:	mov	r5, r1
   166d4:	ldr	r4, [r1]
   166d8:	cmp	r0, #0
   166dc:	beq	1670c <__assert_fail@plt+0x57f8>
   166e0:	lsr	r3, r4, #1
   166e4:	add	r3, r3, #1
   166e8:	adds	r4, r4, r3
   166ec:	bcs	16728 <__assert_fail@plt+0x5814>
   166f0:	mov	r1, r4
   166f4:	bl	165d4 <__assert_fail@plt+0x56c0>
   166f8:	str	r4, [r5]
   166fc:	ldrd	r4, [sp]
   16700:	ldr	r6, [sp, #8]
   16704:	add	sp, sp, #12
   16708:	pop	{pc}		; (ldr pc, [sp], #4)
   1670c:	cmp	r4, #0
   16710:	bne	166f0 <__assert_fail@plt+0x57dc>
   16714:	mov	r4, #64	; 0x40
   16718:	udiv	r4, r4, r2
   1671c:	cmp	r2, #64	; 0x40
   16720:	addhi	r4, r4, #1
   16724:	b	166f0 <__assert_fail@plt+0x57dc>
   16728:	bl	16990 <__assert_fail@plt+0x5a7c>
   1672c:	str	r4, [sp, #-8]!
   16730:	str	lr, [sp, #4]
   16734:	mov	r2, #1
   16738:	bl	166c4 <__assert_fail@plt+0x57b0>
   1673c:	ldr	r4, [sp]
   16740:	add	sp, sp, #4
   16744:	pop	{pc}		; (ldr pc, [sp], #4)
   16748:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1674c:	strd	r6, [sp, #8]
   16750:	str	r8, [sp, #16]
   16754:	str	lr, [sp, #20]
   16758:	mov	r5, r1
   1675c:	ldr	lr, [sp, #24]
   16760:	ldr	ip, [r1]
   16764:	asr	r4, ip, #1
   16768:	adds	r4, ip, r4
   1676c:	movvs	r1, #1
   16770:	movvc	r1, #0
   16774:	cmp	r1, #0
   16778:	mvnne	r4, #-2147483648	; 0x80000000
   1677c:	mvn	r8, r3
   16780:	lsr	r8, r8, #31
   16784:	cmp	r3, r4
   16788:	movge	r1, #0
   1678c:	andlt	r1, r8, #1
   16790:	cmp	r1, #0
   16794:	movne	r4, r3
   16798:	smull	r6, r7, r4, lr
   1679c:	asr	r1, r6, #31
   167a0:	cmp	r1, r7
   167a4:	bne	167bc <__assert_fail@plt+0x58a8>
   167a8:	mov	r1, r6
   167ac:	cmp	r6, #63	; 0x3f
   167b0:	movle	r1, #64	; 0x40
   167b4:	ble	167c0 <__assert_fail@plt+0x58ac>
   167b8:	b	167cc <__assert_fail@plt+0x58b8>
   167bc:	mvn	r1, #-2147483648	; 0x80000000
   167c0:	sdiv	r4, r1, lr
   167c4:	mls	r6, lr, r4, r1
   167c8:	sub	r1, r1, r6
   167cc:	cmp	r0, #0
   167d0:	moveq	r6, #0
   167d4:	streq	r6, [r5]
   167d8:	sub	r6, r4, ip
   167dc:	cmp	r6, r2
   167e0:	bge	16818 <__assert_fail@plt+0x5904>
   167e4:	adds	r2, ip, r2
   167e8:	mov	r4, r2
   167ec:	bvs	16834 <__assert_fail@plt+0x5920>
   167f0:	cmp	r2, r3
   167f4:	movle	r3, #0
   167f8:	andgt	r3, r8, #1
   167fc:	cmp	r3, #0
   16800:	bne	16834 <__assert_fail@plt+0x5920>
   16804:	smull	r2, r3, r2, lr
   16808:	asr	ip, r2, #31
   1680c:	mov	r1, r2
   16810:	cmp	ip, r3
   16814:	bne	16834 <__assert_fail@plt+0x5920>
   16818:	bl	1655c <__assert_fail@plt+0x5648>
   1681c:	str	r4, [r5]
   16820:	ldrd	r4, [sp]
   16824:	ldrd	r6, [sp, #8]
   16828:	ldr	r8, [sp, #16]
   1682c:	add	sp, sp, #20
   16830:	pop	{pc}		; (ldr pc, [sp], #4)
   16834:	bl	16990 <__assert_fail@plt+0x5a7c>
   16838:	str	r4, [sp, #-8]!
   1683c:	str	lr, [sp, #4]
   16840:	bl	17048 <__assert_fail@plt+0x6134>
   16844:	cmp	r0, #0
   16848:	beq	16858 <__assert_fail@plt+0x5944>
   1684c:	ldr	r4, [sp]
   16850:	add	sp, sp, #4
   16854:	pop	{pc}		; (ldr pc, [sp], #4)
   16858:	bl	16990 <__assert_fail@plt+0x5a7c>
   1685c:	str	r4, [sp, #-8]!
   16860:	str	lr, [sp, #4]
   16864:	mov	r1, #1
   16868:	bl	16838 <__assert_fail@plt+0x5924>
   1686c:	ldr	r4, [sp]
   16870:	add	sp, sp, #4
   16874:	pop	{pc}		; (ldr pc, [sp], #4)
   16878:	str	r4, [sp, #-8]!
   1687c:	str	lr, [sp, #4]
   16880:	bl	17048 <__assert_fail@plt+0x6134>
   16884:	cmp	r0, #0
   16888:	beq	16898 <__assert_fail@plt+0x5984>
   1688c:	ldr	r4, [sp]
   16890:	add	sp, sp, #4
   16894:	pop	{pc}		; (ldr pc, [sp], #4)
   16898:	bl	16990 <__assert_fail@plt+0x5a7c>
   1689c:	str	r4, [sp, #-8]!
   168a0:	str	lr, [sp, #4]
   168a4:	mov	r1, #1
   168a8:	bl	16878 <__assert_fail@plt+0x5964>
   168ac:	ldr	r4, [sp]
   168b0:	add	sp, sp, #4
   168b4:	pop	{pc}		; (ldr pc, [sp], #4)
   168b8:	strd	r4, [sp, #-16]!
   168bc:	str	r6, [sp, #8]
   168c0:	str	lr, [sp, #12]
   168c4:	mov	r5, r0
   168c8:	mov	r4, r1
   168cc:	mov	r0, r1
   168d0:	bl	164fc <__assert_fail@plt+0x55e8>
   168d4:	mov	r2, r4
   168d8:	mov	r1, r5
   168dc:	bl	10d04 <memcpy@plt>
   168e0:	ldrd	r4, [sp]
   168e4:	ldr	r6, [sp, #8]
   168e8:	add	sp, sp, #12
   168ec:	pop	{pc}		; (ldr pc, [sp], #4)
   168f0:	strd	r4, [sp, #-16]!
   168f4:	str	r6, [sp, #8]
   168f8:	str	lr, [sp, #12]
   168fc:	mov	r5, r0
   16900:	mov	r4, r1
   16904:	mov	r0, r1
   16908:	bl	16520 <__assert_fail@plt+0x560c>
   1690c:	mov	r2, r4
   16910:	mov	r1, r5
   16914:	bl	10d04 <memcpy@plt>
   16918:	ldrd	r4, [sp]
   1691c:	ldr	r6, [sp, #8]
   16920:	add	sp, sp, #12
   16924:	pop	{pc}		; (ldr pc, [sp], #4)
   16928:	strd	r4, [sp, #-16]!
   1692c:	str	r6, [sp, #8]
   16930:	str	lr, [sp, #12]
   16934:	mov	r5, r0
   16938:	mov	r4, r1
   1693c:	add	r0, r1, #1
   16940:	bl	16520 <__assert_fail@plt+0x560c>
   16944:	mov	r2, #0
   16948:	strb	r2, [r0, r4]
   1694c:	mov	r2, r4
   16950:	mov	r1, r5
   16954:	bl	10d04 <memcpy@plt>
   16958:	ldrd	r4, [sp]
   1695c:	ldr	r6, [sp, #8]
   16960:	add	sp, sp, #12
   16964:	pop	{pc}		; (ldr pc, [sp], #4)
   16968:	str	r4, [sp, #-8]!
   1696c:	str	lr, [sp, #4]
   16970:	mov	r4, r0
   16974:	bl	10e3c <strlen@plt>
   16978:	add	r1, r0, #1
   1697c:	mov	r0, r4
   16980:	bl	168b8 <__assert_fail@plt+0x59a4>
   16984:	ldr	r4, [sp]
   16988:	add	sp, sp, #4
   1698c:	pop	{pc}		; (ldr pc, [sp], #4)
   16990:	str	r4, [sp, #-8]!
   16994:	str	lr, [sp, #4]
   16998:	movw	r3, #37104	; 0x90f0
   1699c:	movt	r3, #2
   169a0:	ldr	r4, [r3]
   169a4:	mov	r2, #5
   169a8:	movw	r1, #36408	; 0x8e38
   169ac:	movt	r1, #1
   169b0:	mov	r0, #0
   169b4:	bl	10d58 <dcgettext@plt>
   169b8:	mov	r3, r0
   169bc:	movw	r2, #35328	; 0x8a00
   169c0:	movt	r2, #1
   169c4:	mov	r1, #0
   169c8:	mov	r0, r4
   169cc:	bl	10dc4 <error@plt>
   169d0:	bl	10efc <abort@plt>
   169d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   169d8:	strd	r6, [sp, #8]
   169dc:	strd	r8, [sp, #16]
   169e0:	strd	sl, [sp, #24]
   169e4:	str	lr, [sp, #32]
   169e8:	sub	sp, sp, #12
   169ec:	str	r0, [sp, #4]
   169f0:	cmp	r2, #0
   169f4:	beq	16af0 <__assert_fail@plt+0x5bdc>
   169f8:	sub	ip, r2, #1
   169fc:	ldrd	r2, [r0]
   16a00:	mov	r0, #0
   16a04:	mov	r8, r1
   16a08:	asr	r9, r1, #31
   16a0c:	str	r1, [sp]
   16a10:	b	16a60 <__assert_fail@plt+0x5b4c>
   16a14:	orrs	r4, r2, r3
   16a18:	movne	lr, #1
   16a1c:	b	16a70 <__assert_fail@plt+0x5b5c>
   16a20:	mov	sl, r3
   16a24:	ldr	fp, [sp]
   16a28:	umull	r6, r7, r1, r2
   16a2c:	mov	r4, r7
   16a30:	mov	r5, #0
   16a34:	umlal	r4, r5, sl, fp
   16a38:	cmp	r5, #0
   16a3c:	bne	16aa4 <__assert_fail@plt+0x5b90>
   16a40:	cmp	lr, #0
   16a44:	bne	16abc <__assert_fail@plt+0x5ba8>
   16a48:	mov	r2, r6
   16a4c:	mov	r3, r4
   16a50:	orr	r0, r0, lr
   16a54:	sub	ip, ip, #1
   16a58:	cmn	ip, #1
   16a5c:	beq	16acc <__assert_fail@plt+0x5bb8>
   16a60:	mov	lr, #0
   16a64:	cmp	r8, #0
   16a68:	sbcs	r4, r9, #0
   16a6c:	blt	16a14 <__assert_fail@plt+0x5b00>
   16a70:	cmp	r9, #0
   16a74:	bne	16a90 <__assert_fail@plt+0x5b7c>
   16a78:	cmp	r3, #0
   16a7c:	bne	16a20 <__assert_fail@plt+0x5b0c>
   16a80:	umull	r2, r3, r1, r2
   16a84:	mov	r6, r2
   16a88:	mov	r4, r3
   16a8c:	b	16a40 <__assert_fail@plt+0x5b2c>
   16a90:	cmp	r3, #0
   16a94:	bne	16aa4 <__assert_fail@plt+0x5b90>
   16a98:	mov	sl, r9
   16a9c:	mov	fp, r2
   16aa0:	b	16a28 <__assert_fail@plt+0x5b14>
   16aa4:	mul	r4, r1, r3
   16aa8:	mla	r4, r2, r9, r4
   16aac:	umull	r6, r7, r1, r2
   16ab0:	add	r4, r4, r7
   16ab4:	mov	lr, #1
   16ab8:	b	16a40 <__assert_fail@plt+0x5b2c>
   16abc:	mvn	r2, #0
   16ac0:	mvn	r3, #0
   16ac4:	mov	lr, #1
   16ac8:	b	16a50 <__assert_fail@plt+0x5b3c>
   16acc:	ldr	r1, [sp, #4]
   16ad0:	strd	r2, [r1]
   16ad4:	add	sp, sp, #12
   16ad8:	ldrd	r4, [sp]
   16adc:	ldrd	r6, [sp, #8]
   16ae0:	ldrd	r8, [sp, #16]
   16ae4:	ldrd	sl, [sp, #24]
   16ae8:	add	sp, sp, #32
   16aec:	pop	{pc}		; (ldr pc, [sp], #4)
   16af0:	mov	r0, #0
   16af4:	b	16ad4 <__assert_fail@plt+0x5bc0>
   16af8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16afc:	strd	r6, [sp, #8]
   16b00:	strd	r8, [sp, #16]
   16b04:	str	lr, [sp, #24]
   16b08:	sub	sp, sp, #20
   16b0c:	cmp	r2, #36	; 0x24
   16b10:	bhi	16b64 <__assert_fail@plt+0x5c50>
   16b14:	mov	r5, r0
   16b18:	mov	r6, r1
   16b1c:	mov	r7, r2
   16b20:	mov	r9, r3
   16b24:	cmp	r1, #0
   16b28:	addeq	r6, sp, #12
   16b2c:	bl	10e54 <__errno_location@plt>
   16b30:	mov	r8, r0
   16b34:	mov	r3, #0
   16b38:	str	r3, [r0]
   16b3c:	ldrb	r4, [r5]
   16b40:	bl	10e24 <__ctype_b_loc@plt>
   16b44:	ldr	r1, [r0]
   16b48:	mov	r2, r5
   16b4c:	lsl	r3, r4, #1
   16b50:	ldrh	r3, [r1, r3]
   16b54:	tst	r3, #8192	; 0x2000
   16b58:	beq	16b84 <__assert_fail@plt+0x5c70>
   16b5c:	ldrb	r4, [r2, #1]!
   16b60:	b	16b4c <__assert_fail@plt+0x5c38>
   16b64:	movw	r3, #36428	; 0x8e4c
   16b68:	movt	r3, #1
   16b6c:	mov	r2, #85	; 0x55
   16b70:	movw	r1, #36440	; 0x8e58
   16b74:	movt	r1, #1
   16b78:	movw	r0, #36456	; 0x8e68
   16b7c:	movt	r0, #1
   16b80:	bl	10f14 <__assert_fail@plt>
   16b84:	cmp	r4, #45	; 0x2d
   16b88:	moveq	r4, #4
   16b8c:	beq	16d20 <__assert_fail@plt+0x5e0c>
   16b90:	mov	r3, #0
   16b94:	mov	r2, r7
   16b98:	mov	r1, r6
   16b9c:	mov	r0, r5
   16ba0:	bl	10d10 <__strtoull_internal@plt>
   16ba4:	strd	r0, [sp]
   16ba8:	ldr	r7, [r6]
   16bac:	cmp	r7, r5
   16bb0:	beq	16bd4 <__assert_fail@plt+0x5cc0>
   16bb4:	ldr	r3, [r8]
   16bb8:	cmp	r3, #0
   16bbc:	beq	16cf8 <__assert_fail@plt+0x5de4>
   16bc0:	cmp	r3, #34	; 0x22
   16bc4:	moveq	r4, #1
   16bc8:	beq	16cfc <__assert_fail@plt+0x5de8>
   16bcc:	mov	r4, #4
   16bd0:	b	16d20 <__assert_fail@plt+0x5e0c>
   16bd4:	ldr	r3, [sp, #48]	; 0x30
   16bd8:	cmp	r3, #0
   16bdc:	beq	17038 <__assert_fail@plt+0x6124>
   16be0:	ldrb	r1, [r5]
   16be4:	cmp	r1, #0
   16be8:	moveq	r4, #4
   16bec:	beq	16d20 <__assert_fail@plt+0x5e0c>
   16bf0:	mov	r0, r3
   16bf4:	bl	10e48 <strchr@plt>
   16bf8:	cmp	r0, #0
   16bfc:	beq	17040 <__assert_fail@plt+0x612c>
   16c00:	mov	r2, #1
   16c04:	mov	r3, #0
   16c08:	strd	r2, [sp]
   16c0c:	ldrb	r5, [r7]
   16c10:	mov	r4, #0
   16c14:	mov	r1, r5
   16c18:	ldr	r0, [sp, #48]	; 0x30
   16c1c:	bl	10e48 <strchr@plt>
   16c20:	cmp	r0, #0
   16c24:	beq	16d3c <__assert_fail@plt+0x5e28>
   16c28:	sub	r3, r5, #69	; 0x45
   16c2c:	cmp	r3, #47	; 0x2f
   16c30:	ldrls	pc, [pc, r3, lsl #2]
   16c34:	b	16e88 <__assert_fail@plt+0x5f74>
   16c38:	andeq	r6, r1, ip, asr #26
   16c3c:	andeq	r6, r1, r8, lsl #29
   16c40:	andeq	r6, r1, ip, asr #26
   16c44:	andeq	r6, r1, r8, lsl #29
   16c48:	andeq	r6, r1, r8, lsl #29
   16c4c:	andeq	r6, r1, r8, lsl #29
   16c50:	andeq	r6, r1, ip, asr #26
   16c54:	andeq	r6, r1, r8, lsl #29
   16c58:	andeq	r6, r1, ip, asr #26
   16c5c:	andeq	r6, r1, r8, lsl #29
   16c60:	andeq	r6, r1, r8, lsl #29
   16c64:	andeq	r6, r1, ip, asr #26
   16c68:	andeq	r6, r1, r8, lsl #29
   16c6c:	andeq	r6, r1, r8, lsl #29
   16c70:	andeq	r6, r1, r8, lsl #29
   16c74:	andeq	r6, r1, ip, asr #26
   16c78:	andeq	r6, r1, r8, lsl #29
   16c7c:	andeq	r6, r1, r8, lsl #29
   16c80:	andeq	r6, r1, r8, lsl #29
   16c84:	andeq	r6, r1, r8, lsl #29
   16c88:	andeq	r6, r1, ip, asr #26
   16c8c:	andeq	r6, r1, ip, asr #26
   16c90:	andeq	r6, r1, r8, lsl #29
   16c94:	andeq	r6, r1, r8, lsl #29
   16c98:	andeq	r6, r1, r8, lsl #29
   16c9c:	andeq	r6, r1, r8, lsl #29
   16ca0:	andeq	r6, r1, r8, lsl #29
   16ca4:	andeq	r6, r1, r8, lsl #29
   16ca8:	andeq	r6, r1, r8, lsl #29
   16cac:	andeq	r6, r1, r8, lsl #29
   16cb0:	andeq	r6, r1, r8, lsl #29
   16cb4:	andeq	r6, r1, r8, lsl #29
   16cb8:	andeq	r6, r1, r8, lsl #29
   16cbc:	andeq	r6, r1, r8, lsl #29
   16cc0:	andeq	r6, r1, ip, asr #26
   16cc4:	andeq	r6, r1, r8, lsl #29
   16cc8:	andeq	r6, r1, r8, lsl #29
   16ccc:	andeq	r6, r1, r8, lsl #29
   16cd0:	andeq	r6, r1, ip, asr #26
   16cd4:	andeq	r6, r1, r8, lsl #29
   16cd8:	andeq	r6, r1, ip, asr #26
   16cdc:	andeq	r6, r1, r8, lsl #29
   16ce0:	andeq	r6, r1, r8, lsl #29
   16ce4:	andeq	r6, r1, r8, lsl #29
   16ce8:	andeq	r6, r1, r8, lsl #29
   16cec:	andeq	r6, r1, r8, lsl #29
   16cf0:	andeq	r6, r1, r8, lsl #29
   16cf4:	andeq	r6, r1, ip, asr #26
   16cf8:	mov	r4, #0
   16cfc:	ldr	r3, [sp, #48]	; 0x30
   16d00:	cmp	r3, #0
   16d04:	strdeq	r0, [r9]
   16d08:	beq	16d20 <__assert_fail@plt+0x5e0c>
   16d0c:	ldrb	r5, [r7]
   16d10:	cmp	r5, #0
   16d14:	bne	16c14 <__assert_fail@plt+0x5d00>
   16d18:	ldrd	r2, [sp]
   16d1c:	strd	r2, [r9]
   16d20:	mov	r0, r4
   16d24:	add	sp, sp, #20
   16d28:	ldrd	r4, [sp]
   16d2c:	ldrd	r6, [sp, #8]
   16d30:	ldrd	r8, [sp, #16]
   16d34:	add	sp, sp, #24
   16d38:	pop	{pc}		; (ldr pc, [sp], #4)
   16d3c:	ldrd	r2, [sp]
   16d40:	strd	r2, [r9]
   16d44:	orr	r4, r4, #2
   16d48:	b	16d20 <__assert_fail@plt+0x5e0c>
   16d4c:	mov	r1, #48	; 0x30
   16d50:	ldr	r0, [sp, #48]	; 0x30
   16d54:	bl	10e48 <strchr@plt>
   16d58:	cmp	r0, #0
   16d5c:	beq	16e94 <__assert_fail@plt+0x5f80>
   16d60:	ldrb	r3, [r7, #1]
   16d64:	cmp	r3, #68	; 0x44
   16d68:	beq	16ea0 <__assert_fail@plt+0x5f8c>
   16d6c:	cmp	r3, #105	; 0x69
   16d70:	beq	16e70 <__assert_fail@plt+0x5f5c>
   16d74:	cmp	r3, #66	; 0x42
   16d78:	moveq	r7, #2
   16d7c:	movne	r7, #1
   16d80:	moveq	r1, #1000	; 0x3e8
   16d84:	movne	r1, #1024	; 0x400
   16d88:	sub	r5, r5, #66	; 0x42
   16d8c:	cmp	r5, #53	; 0x35
   16d90:	ldrls	pc, [pc, r5, lsl #2]
   16d94:	b	17004 <__assert_fail@plt+0x60f0>
   16d98:	strdeq	r6, [r1], -r4
   16d9c:	andeq	r7, r1, r4
   16da0:	andeq	r7, r1, r4
   16da4:	andeq	r6, r1, ip, lsr pc
   16da8:	andeq	r7, r1, r4
   16dac:	andeq	r6, r1, ip, asr #30
   16db0:	andeq	r7, r1, r4
   16db4:	andeq	r7, r1, r4
   16db8:	andeq	r7, r1, r4
   16dbc:	andeq	r6, r1, ip, asr pc
   16dc0:	andeq	r7, r1, r4
   16dc4:	andeq	r6, r1, ip, ror #30
   16dc8:	andeq	r7, r1, r4
   16dcc:	andeq	r7, r1, r4
   16dd0:	andeq	r6, r1, ip, ror pc
   16dd4:	andeq	r7, r1, r4
   16dd8:	andeq	r7, r1, r4
   16ddc:	andeq	r7, r1, r4
   16de0:	andeq	r6, r1, ip, lsl #31
   16de4:	andeq	r7, r1, r4
   16de8:	andeq	r7, r1, r4
   16dec:	andeq	r7, r1, r4
   16df0:	andeq	r7, r1, r4
   16df4:	andeq	r6, r1, r4, ror #31
   16df8:	strdeq	r6, [r1], -r4
   16dfc:	andeq	r7, r1, r4
   16e00:	andeq	r7, r1, r4
   16e04:	andeq	r7, r1, r4
   16e08:	andeq	r7, r1, r4
   16e0c:	andeq	r7, r1, r4
   16e10:	andeq	r7, r1, r4
   16e14:	andeq	r7, r1, r4
   16e18:	andeq	r6, r1, ip, lsr #29
   16e1c:	andeq	r7, r1, r4, lsl r0
   16e20:	andeq	r7, r1, r4
   16e24:	andeq	r7, r1, r4
   16e28:	andeq	r7, r1, r4
   16e2c:	andeq	r6, r1, ip, asr #30
   16e30:	andeq	r7, r1, r4
   16e34:	andeq	r7, r1, r4
   16e38:	andeq	r7, r1, r4
   16e3c:	andeq	r6, r1, ip, asr pc
   16e40:	andeq	r7, r1, r4
   16e44:	andeq	r6, r1, ip, ror #30
   16e48:	andeq	r7, r1, r4
   16e4c:	andeq	r7, r1, r4
   16e50:	andeq	r7, r1, r4
   16e54:	andeq	r7, r1, r4
   16e58:	andeq	r7, r1, r4
   16e5c:	andeq	r7, r1, r4
   16e60:	andeq	r6, r1, ip, lsl #31
   16e64:	andeq	r7, r1, r4
   16e68:	andeq	r7, r1, r4
   16e6c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16e70:	ldrb	r3, [r7, #2]
   16e74:	cmp	r3, #66	; 0x42
   16e78:	movne	r7, #1
   16e7c:	moveq	r7, #3
   16e80:	mov	r1, #1024	; 0x400
   16e84:	b	16d88 <__assert_fail@plt+0x5e74>
   16e88:	mov	r7, #1
   16e8c:	mov	r1, #1024	; 0x400
   16e90:	b	16d88 <__assert_fail@plt+0x5e74>
   16e94:	mov	r7, #1
   16e98:	mov	r1, #1024	; 0x400
   16e9c:	b	16d88 <__assert_fail@plt+0x5e74>
   16ea0:	mov	r7, #2
   16ea4:	mov	r1, #1000	; 0x3e8
   16ea8:	b	16d88 <__assert_fail@plt+0x5e74>
   16eac:	ldr	r3, [sp]
   16eb0:	ldr	ip, [sp, #4]
   16eb4:	lsl	r2, ip, #9
   16eb8:	orr	r2, r2, r3, lsr #23
   16ebc:	lsl	r3, r3, #9
   16ec0:	mov	r0, #0
   16ec4:	mov	r1, r0
   16ec8:	lsr	r0, ip, #23
   16ecc:	orrs	r1, r0, r1
   16ed0:	streq	r3, [sp]
   16ed4:	streq	r2, [sp, #4]
   16ed8:	moveq	r0, #0
   16edc:	beq	17018 <__assert_fail@plt+0x6104>
   16ee0:	mvn	r2, #0
   16ee4:	mvn	r3, #0
   16ee8:	strd	r2, [sp]
   16eec:	mov	r0, #1
   16ef0:	b	17018 <__assert_fail@plt+0x6104>
   16ef4:	ldr	r3, [sp]
   16ef8:	ldr	ip, [sp, #4]
   16efc:	lsl	r2, ip, #10
   16f00:	orr	r2, r2, r3, lsr #22
   16f04:	lsl	r3, r3, #10
   16f08:	mov	r0, #0
   16f0c:	mov	r1, r0
   16f10:	lsr	r0, ip, #22
   16f14:	orrs	r1, r0, r1
   16f18:	streq	r3, [sp]
   16f1c:	streq	r2, [sp, #4]
   16f20:	moveq	r0, #0
   16f24:	beq	17018 <__assert_fail@plt+0x6104>
   16f28:	mvn	r2, #0
   16f2c:	mvn	r3, #0
   16f30:	strd	r2, [sp]
   16f34:	mov	r0, #1
   16f38:	b	17018 <__assert_fail@plt+0x6104>
   16f3c:	mov	r2, #6
   16f40:	mov	r0, sp
   16f44:	bl	169d4 <__assert_fail@plt+0x5ac0>
   16f48:	b	17018 <__assert_fail@plt+0x6104>
   16f4c:	mov	r2, #3
   16f50:	mov	r0, sp
   16f54:	bl	169d4 <__assert_fail@plt+0x5ac0>
   16f58:	b	17018 <__assert_fail@plt+0x6104>
   16f5c:	mov	r2, #1
   16f60:	mov	r0, sp
   16f64:	bl	169d4 <__assert_fail@plt+0x5ac0>
   16f68:	b	17018 <__assert_fail@plt+0x6104>
   16f6c:	mov	r2, #2
   16f70:	mov	r0, sp
   16f74:	bl	169d4 <__assert_fail@plt+0x5ac0>
   16f78:	b	17018 <__assert_fail@plt+0x6104>
   16f7c:	mov	r2, #5
   16f80:	mov	r0, sp
   16f84:	bl	169d4 <__assert_fail@plt+0x5ac0>
   16f88:	b	17018 <__assert_fail@plt+0x6104>
   16f8c:	mov	r2, #4
   16f90:	mov	r0, sp
   16f94:	bl	169d4 <__assert_fail@plt+0x5ac0>
   16f98:	b	17018 <__assert_fail@plt+0x6104>
   16f9c:	ldr	r3, [sp]
   16fa0:	ldr	r2, [sp, #4]
   16fa4:	adds	r3, r3, r3
   16fa8:	adc	r2, r2, r2
   16fac:	mov	r1, #0
   16fb0:	mov	r0, r1
   16fb4:	ldr	r1, [sp, #4]
   16fb8:	lsr	r1, r1, #31
   16fbc:	orrs	r1, r1, r0
   16fc0:	streq	r3, [sp]
   16fc4:	streq	r2, [sp, #4]
   16fc8:	moveq	r0, #0
   16fcc:	beq	17018 <__assert_fail@plt+0x6104>
   16fd0:	mvn	r2, #0
   16fd4:	mvn	r3, #0
   16fd8:	strd	r2, [sp]
   16fdc:	mov	r0, #1
   16fe0:	b	17018 <__assert_fail@plt+0x6104>
   16fe4:	mov	r2, #8
   16fe8:	mov	r0, sp
   16fec:	bl	169d4 <__assert_fail@plt+0x5ac0>
   16ff0:	b	17018 <__assert_fail@plt+0x6104>
   16ff4:	mov	r2, #7
   16ff8:	mov	r0, sp
   16ffc:	bl	169d4 <__assert_fail@plt+0x5ac0>
   17000:	b	17018 <__assert_fail@plt+0x6104>
   17004:	ldrd	r2, [sp]
   17008:	strd	r2, [r9]
   1700c:	orr	r4, r4, #2
   17010:	b	16d20 <__assert_fail@plt+0x5e0c>
   17014:	mov	r0, #0
   17018:	orr	r4, r4, r0
   1701c:	ldr	r3, [r6]
   17020:	add	r2, r3, r7
   17024:	str	r2, [r6]
   17028:	ldrb	r3, [r3, r7]
   1702c:	cmp	r3, #0
   17030:	orrne	r4, r4, #2
   17034:	b	16d18 <__assert_fail@plt+0x5e04>
   17038:	mov	r4, #4
   1703c:	b	16d20 <__assert_fail@plt+0x5e0c>
   17040:	mov	r4, #4
   17044:	b	16d20 <__assert_fail@plt+0x5e0c>
   17048:	strd	r4, [sp, #-16]!
   1704c:	str	r6, [sp, #8]
   17050:	str	lr, [sp, #12]
   17054:	cmp	r1, #0
   17058:	cmpne	r0, #0
   1705c:	beq	17098 <__assert_fail@plt+0x6184>
   17060:	mov	r2, r0
   17064:	mov	r3, r1
   17068:	umull	r4, r5, r0, r1
   1706c:	adds	r1, r5, #0
   17070:	movne	r1, #1
   17074:	cmp	r4, #0
   17078:	movlt	r1, #1
   1707c:	cmp	r1, #0
   17080:	beq	170a0 <__assert_fail@plt+0x618c>
   17084:	bl	10e54 <__errno_location@plt>
   17088:	mov	r3, #12
   1708c:	str	r3, [r0]
   17090:	mov	r0, #0
   17094:	b	170ac <__assert_fail@plt+0x6198>
   17098:	mov	r3, #1
   1709c:	mov	r2, r3
   170a0:	mov	r1, r3
   170a4:	mov	r0, r2
   170a8:	bl	10ca4 <calloc@plt>
   170ac:	ldrd	r4, [sp]
   170b0:	ldr	r6, [sp, #8]
   170b4:	add	sp, sp, #12
   170b8:	pop	{pc}		; (ldr pc, [sp], #4)
   170bc:	str	r4, [sp, #-8]!
   170c0:	str	lr, [sp, #4]
   170c4:	cmp	r0, #0
   170c8:	beq	170e4 <__assert_fail@plt+0x61d0>
   170cc:	bge	170e8 <__assert_fail@plt+0x61d4>
   170d0:	bl	10e54 <__errno_location@plt>
   170d4:	mov	r3, #12
   170d8:	str	r3, [r0]
   170dc:	mov	r0, #0
   170e0:	b	170ec <__assert_fail@plt+0x61d8>
   170e4:	mov	r0, #1
   170e8:	bl	10dd0 <malloc@plt>
   170ec:	ldr	r4, [sp]
   170f0:	add	sp, sp, #4
   170f4:	pop	{pc}		; (ldr pc, [sp], #4)
   170f8:	str	r4, [sp, #-8]!
   170fc:	str	lr, [sp, #4]
   17100:	cmp	r0, #0
   17104:	beq	17128 <__assert_fail@plt+0x6214>
   17108:	cmp	r1, #0
   1710c:	beq	17134 <__assert_fail@plt+0x6220>
   17110:	cmp	r1, #0
   17114:	blt	17140 <__assert_fail@plt+0x622c>
   17118:	bl	10d64 <realloc@plt>
   1711c:	ldr	r4, [sp]
   17120:	add	sp, sp, #4
   17124:	pop	{pc}		; (ldr pc, [sp], #4)
   17128:	mov	r0, r1
   1712c:	bl	170bc <__assert_fail@plt+0x61a8>
   17130:	b	1711c <__assert_fail@plt+0x6208>
   17134:	bl	13b34 <__assert_fail@plt+0x2c20>
   17138:	mov	r0, #0
   1713c:	b	1711c <__assert_fail@plt+0x6208>
   17140:	bl	10e54 <__errno_location@plt>
   17144:	mov	r3, #12
   17148:	str	r3, [r0]
   1714c:	mov	r0, #0
   17150:	b	1711c <__assert_fail@plt+0x6208>
   17154:	strd	r4, [sp, #-16]!
   17158:	str	r6, [sp, #8]
   1715c:	str	lr, [sp, #12]
   17160:	mov	r5, r0
   17164:	bl	10dac <__fpending@plt>
   17168:	mov	r6, r0
   1716c:	ldr	r4, [r5]
   17170:	and	r4, r4, #32
   17174:	mov	r0, r5
   17178:	bl	171e0 <__assert_fail@plt+0x62cc>
   1717c:	cmp	r4, #0
   17180:	bne	171b4 <__assert_fail@plt+0x62a0>
   17184:	cmp	r0, #0
   17188:	beq	171a4 <__assert_fail@plt+0x6290>
   1718c:	cmp	r6, #0
   17190:	bne	171d0 <__assert_fail@plt+0x62bc>
   17194:	bl	10e54 <__errno_location@plt>
   17198:	ldr	r0, [r0]
   1719c:	subs	r0, r0, #9
   171a0:	mvnne	r0, #0
   171a4:	ldrd	r4, [sp]
   171a8:	ldr	r6, [sp, #8]
   171ac:	add	sp, sp, #12
   171b0:	pop	{pc}		; (ldr pc, [sp], #4)
   171b4:	cmp	r0, #0
   171b8:	bne	171d8 <__assert_fail@plt+0x62c4>
   171bc:	bl	10e54 <__errno_location@plt>
   171c0:	mov	r3, #0
   171c4:	str	r3, [r0]
   171c8:	mvn	r0, #0
   171cc:	b	171a4 <__assert_fail@plt+0x6290>
   171d0:	mvn	r0, #0
   171d4:	b	171a4 <__assert_fail@plt+0x6290>
   171d8:	mvn	r0, #0
   171dc:	b	171a4 <__assert_fail@plt+0x6290>
   171e0:	strd	r4, [sp, #-16]!
   171e4:	str	r6, [sp, #8]
   171e8:	str	lr, [sp, #12]
   171ec:	sub	sp, sp, #8
   171f0:	mov	r4, r0
   171f4:	bl	10e90 <fileno@plt>
   171f8:	cmp	r0, #0
   171fc:	blt	17274 <__assert_fail@plt+0x6360>
   17200:	mov	r0, r4
   17204:	bl	10de8 <__freading@plt>
   17208:	cmp	r0, #0
   1720c:	beq	17240 <__assert_fail@plt+0x632c>
   17210:	mov	r0, r4
   17214:	bl	10e90 <fileno@plt>
   17218:	mov	r3, #1
   1721c:	str	r3, [sp]
   17220:	mov	r2, #0
   17224:	mov	r3, #0
   17228:	bl	10d94 <lseek64@plt>
   1722c:	mvn	r2, #0
   17230:	mvn	r3, #0
   17234:	cmp	r1, r3
   17238:	cmpeq	r0, r2
   1723c:	beq	17280 <__assert_fail@plt+0x636c>
   17240:	mov	r0, r4
   17244:	bl	1729c <__assert_fail@plt+0x6388>
   17248:	cmp	r0, #0
   1724c:	beq	17280 <__assert_fail@plt+0x636c>
   17250:	bl	10e54 <__errno_location@plt>
   17254:	mov	r5, r0
   17258:	ldr	r6, [r0]
   1725c:	mov	r0, r4
   17260:	bl	10ea8 <fclose@plt>
   17264:	cmp	r6, #0
   17268:	strne	r6, [r5]
   1726c:	mvnne	r0, #0
   17270:	b	17288 <__assert_fail@plt+0x6374>
   17274:	mov	r0, r4
   17278:	bl	10ea8 <fclose@plt>
   1727c:	b	17288 <__assert_fail@plt+0x6374>
   17280:	mov	r0, r4
   17284:	bl	10ea8 <fclose@plt>
   17288:	add	sp, sp, #8
   1728c:	ldrd	r4, [sp]
   17290:	ldr	r6, [sp, #8]
   17294:	add	sp, sp, #12
   17298:	pop	{pc}		; (ldr pc, [sp], #4)
   1729c:	str	r4, [sp, #-8]!
   172a0:	str	lr, [sp, #4]
   172a4:	sub	sp, sp, #8
   172a8:	subs	r4, r0, #0
   172ac:	beq	172c0 <__assert_fail@plt+0x63ac>
   172b0:	mov	r0, r4
   172b4:	bl	10de8 <__freading@plt>
   172b8:	cmp	r0, #0
   172bc:	bne	172d8 <__assert_fail@plt+0x63c4>
   172c0:	mov	r0, r4
   172c4:	bl	10ce0 <fflush@plt>
   172c8:	add	sp, sp, #8
   172cc:	ldr	r4, [sp]
   172d0:	add	sp, sp, #4
   172d4:	pop	{pc}		; (ldr pc, [sp], #4)
   172d8:	ldr	r3, [r4]
   172dc:	tst	r3, #256	; 0x100
   172e0:	bne	172f0 <__assert_fail@plt+0x63dc>
   172e4:	mov	r0, r4
   172e8:	bl	10ce0 <fflush@plt>
   172ec:	b	172c8 <__assert_fail@plt+0x63b4>
   172f0:	mov	r3, #1
   172f4:	str	r3, [sp]
   172f8:	mov	r2, #0
   172fc:	mov	r3, #0
   17300:	mov	r0, r4
   17304:	bl	1730c <__assert_fail@plt+0x63f8>
   17308:	b	172e4 <__assert_fail@plt+0x63d0>
   1730c:	str	r4, [sp, #-16]!
   17310:	strd	r6, [sp, #4]
   17314:	str	lr, [sp, #12]
   17318:	sub	sp, sp, #8
   1731c:	mov	r4, r0
   17320:	mov	r6, r2
   17324:	mov	r7, r3
   17328:	ldr	r2, [r0, #8]
   1732c:	ldr	r3, [r0, #4]
   17330:	cmp	r2, r3
   17334:	beq	17364 <__assert_fail@plt+0x6450>
   17338:	ldr	r3, [sp, #24]
   1733c:	str	r3, [sp]
   17340:	mov	r2, r6
   17344:	mov	r3, r7
   17348:	mov	r0, r4
   1734c:	bl	10eb4 <fseeko64@plt>
   17350:	add	sp, sp, #8
   17354:	ldr	r4, [sp]
   17358:	ldrd	r6, [sp, #4]
   1735c:	add	sp, sp, #12
   17360:	pop	{pc}		; (ldr pc, [sp], #4)
   17364:	ldr	r2, [r0, #20]
   17368:	ldr	r3, [r0, #16]
   1736c:	cmp	r2, r3
   17370:	bne	17338 <__assert_fail@plt+0x6424>
   17374:	ldr	r3, [r0, #36]	; 0x24
   17378:	cmp	r3, #0
   1737c:	bne	17338 <__assert_fail@plt+0x6424>
   17380:	bl	10e90 <fileno@plt>
   17384:	ldr	r3, [sp, #24]
   17388:	str	r3, [sp]
   1738c:	mov	r2, r6
   17390:	mov	r3, r7
   17394:	bl	10d94 <lseek64@plt>
   17398:	mvn	r2, #0
   1739c:	mvn	r3, #0
   173a0:	cmp	r1, r3
   173a4:	cmpeq	r0, r2
   173a8:	beq	173c4 <__assert_fail@plt+0x64b0>
   173ac:	ldr	r3, [r4]
   173b0:	bic	r3, r3, #16
   173b4:	str	r3, [r4]
   173b8:	strd	r0, [r4, #80]	; 0x50
   173bc:	mov	r0, #0
   173c0:	b	17350 <__assert_fail@plt+0x643c>
   173c4:	mvn	r0, #0
   173c8:	b	17350 <__assert_fail@plt+0x643c>
   173cc:	str	r4, [sp, #-8]!
   173d0:	str	lr, [sp, #4]
   173d4:	mov	r0, #14
   173d8:	bl	10ed8 <nl_langinfo@plt>
   173dc:	cmp	r0, #0
   173e0:	beq	17404 <__assert_fail@plt+0x64f0>
   173e4:	ldrb	r2, [r0]
   173e8:	movw	r3, #36496	; 0x8e90
   173ec:	movt	r3, #1
   173f0:	cmp	r2, #0
   173f4:	moveq	r0, r3
   173f8:	ldr	r4, [sp]
   173fc:	add	sp, sp, #4
   17400:	pop	{pc}		; (ldr pc, [sp], #4)
   17404:	movw	r0, #36496	; 0x8e90
   17408:	movt	r0, #1
   1740c:	b	173f8 <__assert_fail@plt+0x64e4>
   17410:	strd	r4, [sp, #-20]!	; 0xffffffec
   17414:	strd	r6, [sp, #8]
   17418:	str	lr, [sp, #16]
   1741c:	sub	sp, sp, #12
   17420:	mov	r7, r1
   17424:	mov	r5, r2
   17428:	subs	r6, r0, #0
   1742c:	addeq	r6, sp, #4
   17430:	mov	r0, r6
   17434:	bl	10db8 <mbrtowc@plt>
   17438:	mov	r4, r0
   1743c:	cmp	r5, #0
   17440:	cmnne	r0, #3
   17444:	bhi	17460 <__assert_fail@plt+0x654c>
   17448:	mov	r0, r4
   1744c:	add	sp, sp, #12
   17450:	ldrd	r4, [sp]
   17454:	ldrd	r6, [sp, #8]
   17458:	add	sp, sp, #16
   1745c:	pop	{pc}		; (ldr pc, [sp], #4)
   17460:	mov	r0, #0
   17464:	bl	174bc <__assert_fail@plt+0x65a8>
   17468:	cmp	r0, #0
   1746c:	bne	17448 <__assert_fail@plt+0x6534>
   17470:	ldrb	r3, [r7]
   17474:	str	r3, [r6]
   17478:	mov	r4, #1
   1747c:	b	17448 <__assert_fail@plt+0x6534>
   17480:	str	r4, [sp, #-8]!
   17484:	str	lr, [sp, #4]
   17488:	umull	r2, r3, r1, r2
   1748c:	cmp	r3, #0
   17490:	bne	174a8 <__assert_fail@plt+0x6594>
   17494:	mov	r1, r2
   17498:	bl	170f8 <__assert_fail@plt+0x61e4>
   1749c:	ldr	r4, [sp]
   174a0:	add	sp, sp, #4
   174a4:	pop	{pc}		; (ldr pc, [sp], #4)
   174a8:	bl	10e54 <__errno_location@plt>
   174ac:	mov	r3, #12
   174b0:	str	r3, [r0]
   174b4:	mov	r0, #0
   174b8:	b	1749c <__assert_fail@plt+0x6588>
   174bc:	push	{lr}		; (str lr, [sp, #-4]!)
   174c0:	sub	sp, sp, #268	; 0x10c
   174c4:	movw	r2, #257	; 0x101
   174c8:	add	r1, sp, #4
   174cc:	bl	17518 <__assert_fail@plt+0x6604>
   174d0:	cmp	r0, #0
   174d4:	movne	r0, #0
   174d8:	bne	17510 <__assert_fail@plt+0x65fc>
   174dc:	movw	r1, #34096	; 0x8530
   174e0:	movt	r1, #1
   174e4:	add	r0, sp, #4
   174e8:	bl	10cbc <strcmp@plt>
   174ec:	cmp	r0, #0
   174f0:	beq	1750c <__assert_fail@plt+0x65f8>
   174f4:	movw	r1, #36504	; 0x8e98
   174f8:	movt	r1, #1
   174fc:	add	r0, sp, #4
   17500:	bl	10cbc <strcmp@plt>
   17504:	adds	r0, r0, #0
   17508:	movne	r0, #1
   1750c:	and	r0, r0, #1
   17510:	add	sp, sp, #268	; 0x10c
   17514:	pop	{pc}		; (ldr pc, [sp], #4)
   17518:	strd	r4, [sp, #-16]!
   1751c:	str	r6, [sp, #8]
   17520:	str	lr, [sp, #12]
   17524:	mov	r6, r1
   17528:	mov	r4, r2
   1752c:	mov	r1, #0
   17530:	bl	10ec0 <setlocale@plt>
   17534:	subs	r5, r0, #0
   17538:	beq	1757c <__assert_fail@plt+0x6668>
   1753c:	mov	r0, r5
   17540:	bl	10e3c <strlen@plt>
   17544:	cmp	r4, r0
   17548:	bhi	17598 <__assert_fail@plt+0x6684>
   1754c:	cmp	r4, #0
   17550:	moveq	r0, #34	; 0x22
   17554:	beq	175ac <__assert_fail@plt+0x6698>
   17558:	sub	r4, r4, #1
   1755c:	mov	r2, r4
   17560:	mov	r1, r5
   17564:	mov	r0, r6
   17568:	bl	10d04 <memcpy@plt>
   1756c:	mov	r3, #0
   17570:	strb	r3, [r6, r4]
   17574:	mov	r0, #34	; 0x22
   17578:	b	175ac <__assert_fail@plt+0x6698>
   1757c:	cmp	r4, #0
   17580:	moveq	r0, #22
   17584:	beq	175ac <__assert_fail@plt+0x6698>
   17588:	mov	r3, #0
   1758c:	strb	r3, [r6]
   17590:	mov	r0, #22
   17594:	b	175ac <__assert_fail@plt+0x6698>
   17598:	add	r2, r0, #1
   1759c:	mov	r1, r5
   175a0:	mov	r0, r6
   175a4:	bl	10d04 <memcpy@plt>
   175a8:	mov	r0, #0
   175ac:	ldrd	r4, [sp]
   175b0:	ldr	r6, [sp, #8]
   175b4:	add	sp, sp, #12
   175b8:	pop	{pc}		; (ldr pc, [sp], #4)
   175bc:	str	r4, [sp, #-8]!
   175c0:	str	lr, [sp, #4]
   175c4:	mov	r1, #0
   175c8:	bl	10ec0 <setlocale@plt>
   175cc:	ldr	r4, [sp]
   175d0:	add	sp, sp, #4
   175d4:	pop	{pc}		; (ldr pc, [sp], #4)
   175d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175dc:	mov	r7, r0
   175e0:	ldr	r6, [pc, #72]	; 17630 <__assert_fail@plt+0x671c>
   175e4:	ldr	r5, [pc, #72]	; 17634 <__assert_fail@plt+0x6720>
   175e8:	add	r6, pc, r6
   175ec:	add	r5, pc, r5
   175f0:	sub	r6, r6, r5
   175f4:	mov	r8, r1
   175f8:	mov	r9, r2
   175fc:	bl	10c84 <calloc@plt-0x20>
   17600:	asrs	r6, r6, #2
   17604:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17608:	mov	r4, #0
   1760c:	add	r4, r4, #1
   17610:	ldr	r3, [r5], #4
   17614:	mov	r2, r9
   17618:	mov	r1, r8
   1761c:	mov	r0, r7
   17620:	blx	r3
   17624:	cmp	r6, r4
   17628:	bne	1760c <__assert_fail@plt+0x66f8>
   1762c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17630:	andeq	r1, r1, r4, lsr #18
   17634:	andeq	r1, r1, ip, lsl r9
   17638:	bx	lr
   1763c:	ldr	r3, [pc, #12]	; 17650 <__assert_fail@plt+0x673c>
   17640:	mov	r1, #0
   17644:	add	r3, pc, r3
   17648:	ldr	r2, [r3]
   1764c:	b	10e6c <__cxa_atexit@plt>
   17650:	muleq	r1, ip, sl

Disassembly of section .fini:

00017654 <.fini>:
   17654:	push	{r3, lr}
   17658:	pop	{r3, pc}
