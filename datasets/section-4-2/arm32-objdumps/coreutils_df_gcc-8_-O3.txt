
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000112c4 <.init>:
   112c4:	push	{r3, lr}
   112c8:	bl	12d50 <__assert_fail@plt+0x164c>
   112cc:	pop	{r3, pc}

Disassembly of section .plt:

000112d0 <calloc@plt-0x14>:
   112d0:	push	{lr}		; (str lr, [sp, #-4]!)
   112d4:	ldr	lr, [pc, #4]	; 112e0 <calloc@plt-0x4>
   112d8:	add	lr, pc, lr
   112dc:	ldr	pc, [lr, #8]!
   112e0:	andeq	r1, r2, r0, lsr #26

000112e4 <calloc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #135168	; 0x21000
   112ec:	ldr	pc, [ip, #3360]!	; 0xd20

000112f0 <fputs_unlocked@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #135168	; 0x21000
   112f8:	ldr	pc, [ip, #3352]!	; 0xd18

000112fc <raise@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #135168	; 0x21000
   11304:	ldr	pc, [ip, #3344]!	; 0xd10

00011308 <strverscmp@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #135168	; 0x21000
   11310:	ldr	pc, [ip, #3336]!	; 0xd08

00011314 <__getdelim@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #135168	; 0x21000
   1131c:	ldr	pc, [ip, #3328]!	; 0xd00

00011320 <strcmp@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #135168	; 0x21000
   11328:	ldr	pc, [ip, #3320]!	; 0xcf8

0001132c <fflush@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #135168	; 0x21000
   11334:	ldr	pc, [ip, #3312]!	; 0xcf0

00011338 <wcwidth@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #135168	; 0x21000
   11340:	ldr	pc, [ip, #3304]!	; 0xce8

00011344 <memmove@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #135168	; 0x21000
   1134c:	ldr	pc, [ip, #3296]!	; 0xce0

00011350 <free@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #135168	; 0x21000
   11358:	ldr	pc, [ip, #3288]!	; 0xcd8

0001135c <faccessat@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #135168	; 0x21000
   11364:	ldr	pc, [ip, #3280]!	; 0xcd0

00011368 <_exit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #135168	; 0x21000
   11370:	ldr	pc, [ip, #3272]!	; 0xcc8

00011374 <memcpy@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #135168	; 0x21000
   1137c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011380 <__strtoull_internal@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #135168	; 0x21000
   11388:	ldr	pc, [ip, #3256]!	; 0xcb8

0001138c <mbsinit@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #135168	; 0x21000
   11394:	ldr	pc, [ip, #3248]!	; 0xcb0

00011398 <memcmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #135168	; 0x21000
   113a0:	ldr	pc, [ip, #3240]!	; 0xca8

000113a4 <fputc_unlocked@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #135168	; 0x21000
   113ac:	ldr	pc, [ip, #3232]!	; 0xca0

000113b0 <uname@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #135168	; 0x21000
   113b8:	ldr	pc, [ip, #3224]!	; 0xc98

000113bc <dcgettext@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #135168	; 0x21000
   113c4:	ldr	pc, [ip, #3216]!	; 0xc90

000113c8 <strdup@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #135168	; 0x21000
   113d0:	ldr	pc, [ip, #3208]!	; 0xc88

000113d4 <realloc@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #135168	; 0x21000
   113dc:	ldr	pc, [ip, #3200]!	; 0xc80

000113e0 <textdomain@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #135168	; 0x21000
   113e8:	ldr	pc, [ip, #3192]!	; 0xc78

000113ec <iswcntrl@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #135168	; 0x21000
   113f4:	ldr	pc, [ip, #3184]!	; 0xc70

000113f8 <rawmemchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #135168	; 0x21000
   11400:	ldr	pc, [ip, #3176]!	; 0xc68

00011404 <chdir@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #135168	; 0x21000
   1140c:	ldr	pc, [ip, #3168]!	; 0xc60

00011410 <iswprint@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #135168	; 0x21000
   11418:	ldr	pc, [ip, #3160]!	; 0xc58

0001141c <__fxstat64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #135168	; 0x21000
   11424:	ldr	pc, [ip, #3152]!	; 0xc50

00011428 <readlink@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #135168	; 0x21000
   11430:	ldr	pc, [ip, #3144]!	; 0xc48

00011434 <__memcpy_chk@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #135168	; 0x21000
   1143c:	ldr	pc, [ip, #3136]!	; 0xc40

00011440 <fwrite@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #135168	; 0x21000
   11448:	ldr	pc, [ip, #3128]!	; 0xc38

0001144c <lseek64@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #135168	; 0x21000
   11454:	ldr	pc, [ip, #3120]!	; 0xc30

00011458 <__ctype_get_mb_cur_max@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #135168	; 0x21000
   11460:	ldr	pc, [ip, #3112]!	; 0xc28

00011464 <hasmntopt@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #135168	; 0x21000
   1146c:	ldr	pc, [ip, #3104]!	; 0xc20

00011470 <__fpending@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #135168	; 0x21000
   11478:	ldr	pc, [ip, #3096]!	; 0xc18

0001147c <mbrtowc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #135168	; 0x21000
   11484:	ldr	pc, [ip, #3088]!	; 0xc10

00011488 <wcstombs@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #135168	; 0x21000
   11490:	ldr	pc, [ip, #3080]!	; 0xc08

00011494 <error@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #135168	; 0x21000
   1149c:	ldr	pc, [ip, #3072]!	; 0xc00

000114a0 <getmntent@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #135168	; 0x21000
   114a8:	ldr	pc, [ip, #3064]!	; 0xbf8

000114ac <open64@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #135168	; 0x21000
   114b4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114b8 <__asprintf_chk@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #135168	; 0x21000
   114c0:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c4 <getenv@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #135168	; 0x21000
   114cc:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d0 <malloc@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #135168	; 0x21000
   114d8:	ldr	pc, [ip, #3032]!	; 0xbd8

000114dc <__libc_start_main@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #135168	; 0x21000
   114e4:	ldr	pc, [ip, #3024]!	; 0xbd0

000114e8 <__freading@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #135168	; 0x21000
   114f0:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f4 <__gmon_start__@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #135168	; 0x21000
   114fc:	ldr	pc, [ip, #3008]!	; 0xbc0

00011500 <mempcpy@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #135168	; 0x21000
   11508:	ldr	pc, [ip, #3000]!	; 0xbb8

0001150c <getopt_long@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #135168	; 0x21000
   11514:	ldr	pc, [ip, #2992]!	; 0xbb0

00011518 <__ctype_b_loc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #135168	; 0x21000
   11520:	ldr	pc, [ip, #2984]!	; 0xba8

00011524 <getcwd@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #135168	; 0x21000
   1152c:	ldr	pc, [ip, #2976]!	; 0xba0

00011530 <exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #135168	; 0x21000
   11538:	ldr	pc, [ip, #2968]!	; 0xb98

0001153c <strlen@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #135168	; 0x21000
   11544:	ldr	pc, [ip, #2960]!	; 0xb90

00011548 <strchr@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #135168	; 0x21000
   11550:	ldr	pc, [ip, #2952]!	; 0xb88

00011554 <openat64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #135168	; 0x21000
   1155c:	ldr	pc, [ip, #2944]!	; 0xb80

00011560 <memrchr@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #135168	; 0x21000
   11568:	ldr	pc, [ip, #2936]!	; 0xb78

0001156c <__errno_location@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #135168	; 0x21000
   11574:	ldr	pc, [ip, #2928]!	; 0xb70

00011578 <__sprintf_chk@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #135168	; 0x21000
   11580:	ldr	pc, [ip, #2920]!	; 0xb68

00011584 <__cxa_atexit@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #135168	; 0x21000
   1158c:	ldr	pc, [ip, #2912]!	; 0xb60

00011590 <memset@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #135168	; 0x21000
   11598:	ldr	pc, [ip, #2904]!	; 0xb58

0001159c <__printf_chk@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #135168	; 0x21000
   115a4:	ldr	pc, [ip, #2896]!	; 0xb50

000115a8 <statvfs64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #135168	; 0x21000
   115b0:	ldr	pc, [ip, #2888]!	; 0xb48

000115b4 <fileno@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #135168	; 0x21000
   115bc:	ldr	pc, [ip, #2880]!	; 0xb40

000115c0 <__fprintf_chk@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #135168	; 0x21000
   115c8:	ldr	pc, [ip, #2872]!	; 0xb38

000115cc <memchr@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #135168	; 0x21000
   115d4:	ldr	pc, [ip, #2864]!	; 0xb30

000115d8 <fclose@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #135168	; 0x21000
   115e0:	ldr	pc, [ip, #2856]!	; 0xb28

000115e4 <fseeko64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #135168	; 0x21000
   115ec:	ldr	pc, [ip, #2848]!	; 0xb20

000115f0 <endmntent@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #135168	; 0x21000
   115f8:	ldr	pc, [ip, #2840]!	; 0xb18

000115fc <fcntl64@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #135168	; 0x21000
   11604:	ldr	pc, [ip, #2832]!	; 0xb10

00011608 <__overflow@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #135168	; 0x21000
   11610:	ldr	pc, [ip, #2824]!	; 0xb08

00011614 <setlocale@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #135168	; 0x21000
   1161c:	ldr	pc, [ip, #2816]!	; 0xb00

00011620 <wcswidth@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #135168	; 0x21000
   11628:	ldr	pc, [ip, #2808]!	; 0xaf8

0001162c <strrchr@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #135168	; 0x21000
   11634:	ldr	pc, [ip, #2800]!	; 0xaf0

00011638 <statfs64@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #135168	; 0x21000
   11640:	ldr	pc, [ip, #2792]!	; 0xae8

00011644 <nl_langinfo@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #135168	; 0x21000
   1164c:	ldr	pc, [ip, #2784]!	; 0xae0

00011650 <sscanf@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #135168	; 0x21000
   11658:	ldr	pc, [ip, #2776]!	; 0xad8

0001165c <localeconv@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #135168	; 0x21000
   11664:	ldr	pc, [ip, #2768]!	; 0xad0

00011668 <mbstowcs@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #135168	; 0x21000
   11670:	ldr	pc, [ip, #2760]!	; 0xac8

00011674 <fchdir@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #135168	; 0x21000
   1167c:	ldr	pc, [ip, #2752]!	; 0xac0

00011680 <canonicalize_file_name@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #135168	; 0x21000
   11688:	ldr	pc, [ip, #2744]!	; 0xab8

0001168c <fopen64@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #135168	; 0x21000
   11694:	ldr	pc, [ip, #2736]!	; 0xab0

00011698 <setmntent@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #135168	; 0x21000
   116a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000116a4 <bindtextdomain@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #135168	; 0x21000
   116ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000116b0 <sync@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #135168	; 0x21000
   116b8:	ldr	pc, [ip, #2712]!	; 0xa98

000116bc <__xstat64@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #135168	; 0x21000
   116c4:	ldr	pc, [ip, #2704]!	; 0xa90

000116c8 <isatty@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #135168	; 0x21000
   116d0:	ldr	pc, [ip, #2696]!	; 0xa88

000116d4 <strncmp@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #135168	; 0x21000
   116dc:	ldr	pc, [ip, #2688]!	; 0xa80

000116e0 <abort@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #135168	; 0x21000
   116e8:	ldr	pc, [ip, #2680]!	; 0xa78

000116ec <close@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #135168	; 0x21000
   116f4:	ldr	pc, [ip, #2672]!	; 0xa70

000116f8 <strspn@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #135168	; 0x21000
   11700:	ldr	pc, [ip, #2664]!	; 0xa68

00011704 <__assert_fail@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #135168	; 0x21000
   1170c:	ldr	pc, [ip, #2656]!	; 0xa60

Disassembly of section .text:

00011710 <.text>:
   11710:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11714:	mov	r5, r0
   11718:	mov	r4, r1
   1171c:	ldr	r0, [r1]
   11720:	strd	r6, [sp, #8]
   11724:	movw	r6, #7704	; 0x1e18
   11728:	movt	r6, #2
   1172c:	strd	r8, [sp, #16]
   11730:	movw	r8, #13112	; 0x3338
   11734:	movt	r8, #3
   11738:	strd	sl, [sp, #24]
   1173c:	movw	sl, #13120	; 0x3340
   11740:	movt	sl, #3
   11744:	str	lr, [sp, #32]
   11748:	sub	sp, sp, #212	; 0xd4
   1174c:	mov	fp, #0
   11750:	bl	197b4 <__assert_fail@plt+0x80b0>
   11754:	movw	r1, #8892	; 0x22bc
   11758:	movt	r1, #2
   1175c:	ldr	r7, [pc, #4000]	; 12704 <__assert_fail@plt+0x1000>
   11760:	mov	r0, #6
   11764:	mov	r9, fp
   11768:	bl	11614 <setlocale@plt>
   1176c:	movw	r1, #7636	; 0x1dd4
   11770:	movt	r1, #2
   11774:	movw	r0, #7360	; 0x1cc0
   11778:	movt	r0, #2
   1177c:	bl	116a4 <bindtextdomain@plt>
   11780:	movw	r0, #7360	; 0x1cc0
   11784:	movt	r0, #2
   11788:	bl	113e0 <textdomain@plt>
   1178c:	movw	r0, #21232	; 0x52f0
   11790:	movt	r0, #1
   11794:	bl	2116c <__assert_fail@plt+0xfa68>
   11798:	mvn	r1, #0
   1179c:	mov	r2, #1
   117a0:	mov	r3, #0
   117a4:	mov	r0, fp
   117a8:	str	r1, [sl, #20]
   117ac:	movw	r1, #7660	; 0x1dec
   117b0:	movt	r1, #2
   117b4:	strb	fp, [sl, #33]	; 0x21
   117b8:	strd	r2, [sl, #56]	; 0x38
   117bc:	mov	r2, #5
   117c0:	strb	fp, [sl, #34]	; 0x22
   117c4:	str	fp, [sl, #36]	; 0x24
   117c8:	str	fp, [sl, #40]	; 0x28
   117cc:	str	fp, [sl, #44]	; 0x2c
   117d0:	strb	fp, [sl, #52]	; 0x34
   117d4:	strb	fp, [sl, #53]	; 0x35
   117d8:	strb	fp, [sl, #112]	; 0x70
   117dc:	bl	113bc <dcgettext@plt>
   117e0:	str	r0, [sp, #28]
   117e4:	add	r2, sp, #104	; 0x68
   117e8:	mvn	ip, #0
   117ec:	mov	r3, r7
   117f0:	mov	r1, r4
   117f4:	mov	r0, r5
   117f8:	str	r2, [sp]
   117fc:	mov	r2, r6
   11800:	str	ip, [sp, #104]	; 0x68
   11804:	bl	1150c <getopt_long@plt>
   11808:	cmn	r0, #1
   1180c:	mov	fp, r0
   11810:	beq	11ad4 <__assert_fail@plt+0x3d0>
   11814:	cmp	r0, #105	; 0x69
   11818:	beq	11a8c <__assert_fail@plt+0x388>
   1181c:	ble	11864 <__assert_fail@plt+0x160>
   11820:	cmp	r0, #118	; 0x76
   11824:	beq	117e4 <__assert_fail@plt+0xe0>
   11828:	ble	118a4 <__assert_fail@plt+0x1a0>
   1182c:	movw	r3, #257	; 0x101
   11830:	cmp	r0, r3
   11834:	beq	11aa4 <__assert_fail@plt+0x3a0>
   11838:	bgt	118d0 <__assert_fail@plt+0x1cc>
   1183c:	cmp	r0, #120	; 0x78
   11840:	bne	11890 <__assert_fail@plt+0x18c>
   11844:	mov	r0, #8
   11848:	ldr	fp, [r8]
   1184c:	bl	1dc74 <__assert_fail@plt+0xc570>
   11850:	ldr	r3, [sl, #40]	; 0x28
   11854:	str	r0, [sl, #40]	; 0x28
   11858:	str	fp, [r0]
   1185c:	str	r3, [r0, #4]
   11860:	b	117e4 <__assert_fail@plt+0xe0>
   11864:	cmp	r0, #72	; 0x48
   11868:	beq	11abc <__assert_fail@plt+0x3b8>
   1186c:	ble	1196c <__assert_fail@plt+0x268>
   11870:	cmp	r0, #84	; 0x54
   11874:	beq	11a74 <__assert_fail@plt+0x370>
   11878:	ble	118e8 <__assert_fail@plt+0x1e4>
   1187c:	cmp	r0, #97	; 0x61
   11880:	bne	11904 <__assert_fail@plt+0x200>
   11884:	mov	r3, #1
   11888:	strb	r3, [sl, #33]	; 0x21
   1188c:	b	117e4 <__assert_fail@plt+0xe0>
   11890:	cmp	r0, #256	; 0x100
   11894:	bne	11a0c <__assert_fail@plt+0x308>
   11898:	mov	r3, #0
   1189c:	strb	r3, [sl, #113]	; 0x71
   118a0:	b	117e4 <__assert_fail@plt+0xe0>
   118a4:	cmp	r0, #108	; 0x6c
   118a8:	beq	11ab0 <__assert_fail@plt+0x3ac>
   118ac:	ble	1194c <__assert_fail@plt+0x248>
   118b0:	cmp	r0, #109	; 0x6d
   118b4:	bne	11924 <__assert_fail@plt+0x220>
   118b8:	mov	r1, #0
   118bc:	mov	r2, #1048576	; 0x100000
   118c0:	mov	r3, #0
   118c4:	str	r1, [sl, #20]
   118c8:	strd	r2, [sl, #24]
   118cc:	b	117e4 <__assert_fail@plt+0xe0>
   118d0:	movw	r3, #258	; 0x102
   118d4:	cmp	r0, r3
   118d8:	bne	119b0 <__assert_fail@plt+0x2ac>
   118dc:	mov	r3, #1
   118e0:	strb	r3, [sl, #53]	; 0x35
   118e4:	b	117e4 <__assert_fail@plt+0xe0>
   118e8:	cmp	r0, #80	; 0x50
   118ec:	bne	11a0c <__assert_fail@plt+0x308>
   118f0:	ldr	r3, [sl, #16]
   118f4:	cmp	r3, #4
   118f8:	beq	12ca0 <__assert_fail@plt+0x159c>
   118fc:	mov	r9, #1
   11900:	b	117e4 <__assert_fail@plt+0xe0>
   11904:	cmp	r0, #104	; 0x68
   11908:	bne	11a0c <__assert_fail@plt+0x308>
   1190c:	mov	r1, #176	; 0xb0
   11910:	mov	r2, #1
   11914:	mov	r3, #0
   11918:	str	r1, [sl, #20]
   1191c:	strd	r2, [sl, #24]
   11920:	b	117e4 <__assert_fail@plt+0xe0>
   11924:	cmp	r0, #116	; 0x74
   11928:	bne	11a0c <__assert_fail@plt+0x308>
   1192c:	mov	r0, #8
   11930:	ldr	fp, [r8]
   11934:	bl	1dc74 <__assert_fail@plt+0xc570>
   11938:	ldr	r3, [sl, #36]	; 0x24
   1193c:	str	r0, [sl, #36]	; 0x24
   11940:	str	fp, [r0]
   11944:	str	r3, [r0, #4]
   11948:	b	117e4 <__assert_fail@plt+0xe0>
   1194c:	cmp	r0, #107	; 0x6b
   11950:	bne	11a0c <__assert_fail@plt+0x308>
   11954:	mov	r1, #0
   11958:	mov	r2, #1024	; 0x400
   1195c:	mov	r3, #0
   11960:	str	r1, [sl, #20]
   11964:	strd	r2, [sl, #24]
   11968:	b	117e4 <__assert_fail@plt+0xe0>
   1196c:	cmn	r0, #2
   11970:	beq	12ab0 <__assert_fail@plt+0x13ac>
   11974:	ble	11a14 <__assert_fail@plt+0x310>
   11978:	cmp	r0, #66	; 0x42
   1197c:	bne	11a04 <__assert_fail@plt+0x300>
   11980:	ldr	r2, [pc, #3456]	; 12708 <__assert_fail@plt+0x1004>
   11984:	ldr	r0, [r8]
   11988:	sub	r1, r2, #4
   1198c:	bl	17f8c <__assert_fail@plt+0x6888>
   11990:	cmp	r0, #0
   11994:	beq	117e4 <__assert_fail@plt+0xe0>
   11998:	ldr	ip, [r8]
   1199c:	mov	r2, fp
   119a0:	ldr	r3, [pc, #3420]	; 12704 <__assert_fail@plt+0x1000>
   119a4:	ldr	r1, [sp, #104]	; 0x68
   119a8:	str	ip, [sp]
   119ac:	bl	1e2b0 <__assert_fail@plt+0xcbac>
   119b0:	movw	r3, #259	; 0x103
   119b4:	cmp	r0, r3
   119b8:	bne	11a0c <__assert_fail@plt+0x308>
   119bc:	ldr	r3, [sl, #16]
   119c0:	cmp	r3, #1
   119c4:	beq	12ccc <__assert_fail@plt+0x15c8>
   119c8:	cmp	r3, #0
   119cc:	moveq	r3, r9
   119d0:	movne	r3, #0
   119d4:	cmp	r3, #0
   119d8:	bne	12ca0 <__assert_fail@plt+0x159c>
   119dc:	ldrb	r2, [sl, #112]	; 0x70
   119e0:	cmp	r2, #0
   119e4:	bne	12c74 <__assert_fail@plt+0x1570>
   119e8:	ldr	r0, [r8]
   119ec:	mov	r3, #4
   119f0:	str	r3, [sl, #16]
   119f4:	cmp	r0, #0
   119f8:	beq	117e4 <__assert_fail@plt+0xe0>
   119fc:	bl	143d8 <__assert_fail@plt+0x2cd4>
   11a00:	b	117e4 <__assert_fail@plt+0xe0>
   11a04:	cmp	r0, #70	; 0x46
   11a08:	beq	1192c <__assert_fail@plt+0x228>
   11a0c:	mov	r0, #1
   11a10:	bl	13fb8 <__assert_fail@plt+0x28b4>
   11a14:	cmn	r0, #3
   11a18:	bne	11a0c <__assert_fail@plt+0x308>
   11a1c:	mov	r4, #0
   11a20:	movw	r3, #7748	; 0x1e44
   11a24:	movt	r3, #2
   11a28:	movw	r1, #7760	; 0x1e50
   11a2c:	movt	r1, #2
   11a30:	movw	r2, #7776	; 0x1e60
   11a34:	movt	r2, #2
   11a38:	movw	r0, #13108	; 0x3334
   11a3c:	movt	r0, #3
   11a40:	stmib	sp, {r1, r3, r4}
   11a44:	movw	r3, #13008	; 0x32d0
   11a48:	movt	r3, #3
   11a4c:	movw	r1, #4980	; 0x1374
   11a50:	movt	r1, #2
   11a54:	str	r2, [sp]
   11a58:	movw	r2, #7356	; 0x1cbc
   11a5c:	movt	r2, #2
   11a60:	ldr	r0, [r0]
   11a64:	ldr	r3, [r3]
   11a68:	bl	1da64 <__assert_fail@plt+0xc360>
   11a6c:	mov	r0, r4
   11a70:	bl	11530 <exit@plt>
   11a74:	ldr	r3, [sl, #16]
   11a78:	cmp	r3, #4
   11a7c:	beq	12ab8 <__assert_fail@plt+0x13b4>
   11a80:	mov	r3, #1
   11a84:	strb	r3, [sl, #112]	; 0x70
   11a88:	b	117e4 <__assert_fail@plt+0xe0>
   11a8c:	ldr	r3, [sl, #16]
   11a90:	cmp	r3, #4
   11a94:	beq	12ccc <__assert_fail@plt+0x15c8>
   11a98:	mov	r3, #1
   11a9c:	str	r3, [sl, #16]
   11aa0:	b	117e4 <__assert_fail@plt+0xe0>
   11aa4:	mov	r3, #1
   11aa8:	strb	r3, [sl, #113]	; 0x71
   11aac:	b	117e4 <__assert_fail@plt+0xe0>
   11ab0:	mov	r3, #1
   11ab4:	strb	r3, [sl, #32]
   11ab8:	b	117e4 <__assert_fail@plt+0xe0>
   11abc:	mov	r1, #144	; 0x90
   11ac0:	mov	r2, #1
   11ac4:	mov	r3, #0
   11ac8:	str	r1, [sl, #20]
   11acc:	strd	r2, [sl, #24]
   11ad0:	b	117e4 <__assert_fail@plt+0xe0>
   11ad4:	ldr	r3, [sl, #20]
   11ad8:	cmn	r3, #1
   11adc:	beq	11c44 <__assert_fail@plt+0x540>
   11ae0:	ldr	r3, [sl, #16]
   11ae4:	cmp	r3, #4
   11ae8:	cmpne	r3, #1
   11aec:	bne	11c00 <__assert_fail@plt+0x4fc>
   11af0:	ldr	r8, [sl, #36]	; 0x24
   11af4:	cmp	r8, #0
   11af8:	beq	11b8c <__assert_fail@plt+0x488>
   11afc:	mov	r3, #0
   11b00:	movw	r9, #7828	; 0x1e94
   11b04:	movt	r9, #2
   11b08:	mov	fp, r3
   11b0c:	str	r4, [sp, #28]
   11b10:	ldr	r4, [sl, #40]	; 0x28
   11b14:	cmp	r4, #0
   11b18:	beq	11b74 <__assert_fail@plt+0x470>
   11b1c:	ldr	r6, [r8]
   11b20:	b	11b30 <__assert_fail@plt+0x42c>
   11b24:	ldr	r4, [r4, #4]
   11b28:	cmp	r4, #0
   11b2c:	beq	11b74 <__assert_fail@plt+0x470>
   11b30:	mov	r0, r6
   11b34:	ldr	r1, [r4]
   11b38:	bl	11320 <strcmp@plt>
   11b3c:	subs	r7, r0, #0
   11b40:	bne	11b24 <__assert_fail@plt+0x420>
   11b44:	mov	r2, #5
   11b48:	mov	r1, r9
   11b4c:	bl	113bc <dcgettext@plt>
   11b50:	mov	r6, r0
   11b54:	ldr	r0, [r8]
   11b58:	mov	fp, #1
   11b5c:	bl	1d124 <__assert_fail@plt+0xba20>
   11b60:	mov	r3, r0
   11b64:	mov	r2, r6
   11b68:	mov	r1, r7
   11b6c:	mov	r0, r7
   11b70:	bl	11494 <error@plt>
   11b74:	ldr	r8, [r8, #4]
   11b78:	cmp	r8, #0
   11b7c:	bne	11b10 <__assert_fail@plt+0x40c>
   11b80:	cmp	fp, #0
   11b84:	ldr	r4, [sp, #28]
   11b88:	bne	11c24 <__assert_fail@plt+0x520>
   11b8c:	movw	r3, #13096	; 0x3328
   11b90:	movt	r3, #3
   11b94:	ldr	r0, [r3]
   11b98:	str	r3, [sp, #68]	; 0x44
   11b9c:	cmp	r0, r5
   11ba0:	movge	r3, #0
   11ba4:	strge	r3, [sp, #52]	; 0x34
   11ba8:	blt	11c80 <__assert_fail@plt+0x57c>
   11bac:	ldr	r3, [sl, #36]	; 0x24
   11bb0:	cmp	r3, #0
   11bb4:	beq	11e48 <__assert_fail@plt+0x744>
   11bb8:	mov	r0, #1
   11bbc:	and	r0, r0, #1
   11bc0:	bl	18e00 <__assert_fail@plt+0x76fc>
   11bc4:	cmp	r0, #0
   11bc8:	str	r0, [sl, #116]	; 0x74
   11bcc:	beq	11da8 <__assert_fail@plt+0x6a4>
   11bd0:	ldrb	r3, [sl, #113]	; 0x71
   11bd4:	cmp	r3, #0
   11bd8:	bne	11c78 <__assert_fail@plt+0x574>
   11bdc:	ldr	r3, [sl, #16]
   11be0:	cmp	r3, #4
   11be4:	ldrls	pc, [pc, r3, lsl #2]
   11be8:	b	12cf8 <__assert_fail@plt+0x15f4>
   11bec:	andeq	r2, r1, r0, asr #6
   11bf0:	andeq	r2, r1, r0, lsl #6
   11bf4:	andeq	r2, r1, ip, lsr #4
   11bf8:	muleq	r1, ip, r1
   11bfc:	muleq	r1, r8, lr
   11c00:	ldr	r3, [sl, #20]
   11c04:	tst	r3, #16
   11c08:	movne	r3, #2
   11c0c:	strne	r3, [sl, #16]
   11c10:	bne	11af0 <__assert_fail@plt+0x3ec>
   11c14:	cmp	r9, #0
   11c18:	movne	r3, #3
   11c1c:	strne	r3, [sl, #16]
   11c20:	b	11af0 <__assert_fail@plt+0x3ec>
   11c24:	mov	r0, #1
   11c28:	add	sp, sp, #212	; 0xd4
   11c2c:	ldrd	r4, [sp]
   11c30:	ldrd	r6, [sp, #8]
   11c34:	ldrd	r8, [sp, #16]
   11c38:	ldrd	sl, [sp, #24]
   11c3c:	add	sp, sp, #32
   11c40:	pop	{pc}		; (ldr pc, [sp], #4)
   11c44:	cmp	r9, #0
   11c48:	beq	11e7c <__assert_fail@plt+0x778>
   11c4c:	mov	r3, #0
   11c50:	movw	r0, #7796	; 0x1e74
   11c54:	movt	r0, #2
   11c58:	str	r3, [sl, #20]
   11c5c:	bl	114c4 <getenv@plt>
   11c60:	cmp	r0, #0
   11c64:	mov	r3, #0
   11c68:	moveq	r2, #1024	; 0x400
   11c6c:	movne	r2, #512	; 0x200
   11c70:	strd	r2, [sl, #24]
   11c74:	b	11ae0 <__assert_fail@plt+0x3dc>
   11c78:	bl	116b0 <sync@plt>
   11c7c:	b	11bdc <__assert_fail@plt+0x4d8>
   11c80:	sub	r0, r5, r0
   11c84:	mov	r1, #104	; 0x68
   11c88:	bl	1ddd8 <__assert_fail@plt+0xc6d4>
   11c8c:	movw	r3, #8780	; 0x224c
   11c90:	movt	r3, #2
   11c94:	str	sl, [sp, #32]
   11c98:	mov	fp, #104	; 0x68
   11c9c:	str	r3, [sp, #36]	; 0x24
   11ca0:	ldr	r3, [sp, #68]	; 0x44
   11ca4:	str	r0, [sp, #52]	; 0x34
   11ca8:	mov	sl, r3
   11cac:	ldr	r6, [r3]
   11cb0:	b	11d10 <__assert_fail@plt+0x60c>
   11cb4:	bl	1156c <__errno_location@plt>
   11cb8:	ldr	r8, [r0]
   11cbc:	mov	r3, r0
   11cc0:	cmp	r8, #20
   11cc4:	cmpne	r8, #2
   11cc8:	bne	11d78 <__assert_fail@plt+0x674>
   11ccc:	cmp	r8, #0
   11cd0:	beq	11d0c <__assert_fail@plt+0x608>
   11cd4:	mov	r1, #3
   11cd8:	mov	r0, #0
   11cdc:	ldr	r2, [r4, r6, lsl #2]
   11ce0:	bl	1c978 <__assert_fail@plt+0xb274>
   11ce4:	mov	r3, r0
   11ce8:	mov	r1, r8
   11cec:	ldr	r2, [sp, #36]	; 0x24
   11cf0:	mov	r0, #0
   11cf4:	bl	11494 <error@plt>
   11cf8:	mov	r2, #0
   11cfc:	mov	r3, #1
   11d00:	str	r2, [r4, r6, lsl #2]
   11d04:	ldr	r2, [sp, #32]
   11d08:	str	r3, [r2, #44]	; 0x2c
   11d0c:	add	r6, r6, #1
   11d10:	cmp	r6, r5
   11d14:	bge	11da0 <__assert_fail@plt+0x69c>
   11d18:	ldr	r7, [sl]
   11d1c:	mov	r1, #2304	; 0x900
   11d20:	ldr	r9, [r4, r6, lsl #2]
   11d24:	ldr	r3, [sp, #52]	; 0x34
   11d28:	sub	r7, r6, r7
   11d2c:	mov	r0, r9
   11d30:	mla	r7, fp, r7, r3
   11d34:	bl	114ac <open64@plt>
   11d38:	subs	r3, r0, #0
   11d3c:	blt	11cb4 <__assert_fail@plt+0x5b0>
   11d40:	mov	r1, r3
   11d44:	mov	r2, r7
   11d48:	str	r3, [sp, #28]
   11d4c:	mov	r0, #3
   11d50:	bl	1141c <__fxstat64@plt>
   11d54:	subs	r8, r0, #0
   11d58:	ldr	r3, [sp, #28]
   11d5c:	beq	11d6c <__assert_fail@plt+0x668>
   11d60:	bl	1156c <__errno_location@plt>
   11d64:	ldr	r8, [r0]
   11d68:	ldr	r3, [sp, #28]
   11d6c:	mov	r0, r3
   11d70:	bl	116ec <close@plt>
   11d74:	b	11ccc <__assert_fail@plt+0x5c8>
   11d78:	mov	r2, r7
   11d7c:	mov	r1, r9
   11d80:	str	r3, [sp, #28]
   11d84:	mov	r0, #3
   11d88:	bl	116bc <__xstat64@plt>
   11d8c:	cmp	r0, #0
   11d90:	ldrne	r3, [sp, #28]
   11d94:	ldrne	r8, [r3]
   11d98:	bne	11ccc <__assert_fail@plt+0x5c8>
   11d9c:	b	11d0c <__assert_fail@plt+0x608>
   11da0:	ldr	sl, [sp, #32]
   11da4:	b	11bac <__assert_fail@plt+0x4a8>
   11da8:	ldr	r3, [sp, #68]	; 0x44
   11dac:	ldr	r3, [r3]
   11db0:	cmp	r3, r5
   11db4:	bge	11e00 <__assert_fail@plt+0x6fc>
   11db8:	ldrb	r3, [sl, #33]	; 0x21
   11dbc:	cmp	r3, #0
   11dc0:	bne	11e00 <__assert_fail@plt+0x6fc>
   11dc4:	ldrb	r3, [sl, #32]
   11dc8:	cmp	r3, #0
   11dcc:	bne	11e00 <__assert_fail@plt+0x6fc>
   11dd0:	ldr	r3, [sl, #36]	; 0x24
   11dd4:	cmp	r3, #0
   11dd8:	bne	11e00 <__assert_fail@plt+0x6fc>
   11ddc:	ldr	r6, [sl, #40]	; 0x28
   11de0:	cmp	r6, #0
   11de4:	bne	11e00 <__assert_fail@plt+0x6fc>
   11de8:	movw	r1, #7876	; 0x1ec4
   11dec:	movt	r1, #2
   11df0:	mov	r2, #5
   11df4:	bl	113bc <dcgettext@plt>
   11df8:	mov	r8, r0
   11dfc:	b	11e0c <__assert_fail@plt+0x708>
   11e00:	movw	r8, #8892	; 0x22bc
   11e04:	movt	r8, #2
   11e08:	mov	r6, #1
   11e0c:	bl	1156c <__errno_location@plt>
   11e10:	ldr	r7, [r0]
   11e14:	mov	r2, #5
   11e18:	movw	r1, #7888	; 0x1ed0
   11e1c:	movt	r1, #2
   11e20:	mov	r0, #0
   11e24:	bl	113bc <dcgettext@plt>
   11e28:	mov	r3, r8
   11e2c:	movw	r2, #7932	; 0x1efc
   11e30:	movt	r2, #2
   11e34:	str	r0, [sp]
   11e38:	mov	r0, r6
   11e3c:	mov	r1, r7
   11e40:	bl	11494 <error@plt>
   11e44:	b	11bd0 <__assert_fail@plt+0x4cc>
   11e48:	ldr	r3, [sl, #40]	; 0x28
   11e4c:	cmp	r3, #0
   11e50:	bne	11bb8 <__assert_fail@plt+0x4b4>
   11e54:	ldrb	r3, [sl, #112]	; 0x70
   11e58:	cmp	r3, #0
   11e5c:	bne	11bb8 <__assert_fail@plt+0x4b4>
   11e60:	movw	r3, #12668	; 0x317c
   11e64:	movt	r3, #3
   11e68:	ldrb	r3, [r3, #52]	; 0x34
   11e6c:	cmp	r3, #0
   11e70:	ldrbeq	r0, [sl, #32]
   11e74:	beq	11bbc <__assert_fail@plt+0x4b8>
   11e78:	b	11bb8 <__assert_fail@plt+0x4b4>
   11e7c:	movw	r0, #7812	; 0x1e84
   11e80:	movt	r0, #2
   11e84:	bl	114c4 <getenv@plt>
   11e88:	ldr	r2, [pc, #2168]	; 12708 <__assert_fail@plt+0x1004>
   11e8c:	sub	r1, r2, #4
   11e90:	bl	17f8c <__assert_fail@plt+0x6888>
   11e94:	b	11ae0 <__assert_fail@plt+0x3dc>
   11e98:	ldr	r3, [sl]
   11e9c:	cmp	r3, #0
   11ea0:	beq	12a70 <__assert_fail@plt+0x136c>
   11ea4:	bl	13014 <__assert_fail@plt+0x1910>
   11ea8:	ldr	r3, [sp, #52]	; 0x34
   11eac:	cmp	r3, #0
   11eb0:	beq	126f4 <__assert_fail@plt+0xff0>
   11eb4:	ldr	r3, [sp, #68]	; 0x44
   11eb8:	ldr	r3, [r3]
   11ebc:	mov	r2, r3
   11ec0:	mov	r3, #1
   11ec4:	cmp	r5, r2
   11ec8:	strb	r3, [sl, #34]	; 0x22
   11ecc:	str	r2, [sp, #40]	; 0x28
   11ed0:	ble	123ec <__assert_fail@plt+0xce8>
   11ed4:	add	r3, r4, r5, lsl #2
   11ed8:	str	sl, [sp, #36]	; 0x24
   11edc:	str	r3, [sp, #56]	; 0x38
   11ee0:	ldr	r3, [sp, #40]	; 0x28
   11ee4:	add	r3, r4, r3, lsl #2
   11ee8:	str	r3, [sp, #32]
   11eec:	ldr	r3, [sp, #32]
   11ef0:	ldr	r1, [r3], #4
   11ef4:	subs	r4, r1, #0
   11ef8:	str	r3, [sp, #32]
   11efc:	str	r1, [sp, #44]	; 0x2c
   11f00:	beq	123cc <__assert_fail@plt+0xcc8>
   11f04:	ldr	r0, [sp, #40]	; 0x28
   11f08:	mov	r2, #104	; 0x68
   11f0c:	ldr	r3, [sp, #68]	; 0x44
   11f10:	ldr	r3, [r3]
   11f14:	sub	r3, r0, r3
   11f18:	ldr	r0, [sp, #52]	; 0x34
   11f1c:	mla	fp, r2, r3, r0
   11f20:	ldr	r3, [fp, #16]
   11f24:	and	r3, r3, #45056	; 0xb000
   11f28:	cmp	r3, #8192	; 0x2000
   11f2c:	bne	120b4 <__assert_fail@plt+0x9b0>
   11f30:	mov	r0, r4
   11f34:	bl	11680 <canonicalize_file_name@plt>
   11f38:	subs	r3, r0, #0
   11f3c:	ldreq	r9, [sp, #44]	; 0x2c
   11f40:	str	r3, [sp, #72]	; 0x48
   11f44:	beq	11f58 <__assert_fail@plt+0x854>
   11f48:	ldrb	r9, [r3]
   11f4c:	cmp	r9, #47	; 0x2f
   11f50:	moveq	r4, r3
   11f54:	mov	r9, r4
   11f58:	ldr	r3, [sp, #36]	; 0x24
   11f5c:	ldr	r6, [r3, #116]	; 0x74
   11f60:	cmp	r6, #0
   11f64:	beq	12a5c <__assert_fail@plt+0x1358>
   11f68:	mov	r3, #0
   11f6c:	mvn	r2, #0
   11f70:	str	r3, [sp, #28]
   11f74:	str	fp, [sp, #76]	; 0x4c
   11f78:	mov	fp, r3
   11f7c:	str	r2, [sp, #48]	; 0x30
   11f80:	str	r3, [sp, #60]	; 0x3c
   11f84:	ldr	r8, [r6]
   11f88:	mov	r0, r8
   11f8c:	bl	11680 <canonicalize_file_name@plt>
   11f90:	subs	r7, r0, #0
   11f94:	beq	11fa4 <__assert_fail@plt+0x8a0>
   11f98:	ldrb	r3, [r7]
   11f9c:	cmp	r3, #47	; 0x2f
   11fa0:	moveq	r8, r7
   11fa4:	mov	r1, r8
   11fa8:	mov	r0, r9
   11fac:	bl	11320 <strcmp@plt>
   11fb0:	subs	sl, r0, #0
   11fb4:	bne	1207c <__assert_fail@plt+0x978>
   11fb8:	ldr	r3, [sp, #36]	; 0x24
   11fbc:	ldr	r5, [r6, #4]
   11fc0:	ldr	r4, [r3, #116]	; 0x74
   11fc4:	cmp	r4, #0
   11fc8:	beq	1203c <__assert_fail@plt+0x938>
   11fcc:	mov	r1, r5
   11fd0:	ldr	r0, [r4, #4]
   11fd4:	bl	11320 <strcmp@plt>
   11fd8:	cmp	r0, #0
   11fdc:	moveq	sl, r4
   11fe0:	ldr	r4, [r4, #28]
   11fe4:	cmp	r4, #0
   11fe8:	bne	11fcc <__assert_fail@plt+0x8c8>
   11fec:	cmp	sl, #0
   11ff0:	beq	1203c <__assert_fail@plt+0x938>
   11ff4:	ldr	r0, [sl]
   11ff8:	bl	11680 <canonicalize_file_name@plt>
   11ffc:	subs	r4, r0, #0
   12000:	beq	12010 <__assert_fail@plt+0x90c>
   12004:	ldrb	r3, [r4]
   12008:	cmp	r3, #47	; 0x2f
   1200c:	beq	12024 <__assert_fail@plt+0x920>
   12010:	mov	r0, r4
   12014:	bl	156a4 <__assert_fail@plt+0x3fa0>
   12018:	ldr	r0, [sl]
   1201c:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   12020:	mov	r4, r0
   12024:	mov	r1, r8
   12028:	mov	r0, r4
   1202c:	bl	11320 <strcmp@plt>
   12030:	cmp	r0, #0
   12034:	bne	1240c <__assert_fail@plt+0xd08>
   12038:	ldr	r5, [r6, #4]
   1203c:	mov	r0, r5
   12040:	bl	1153c <strlen@plt>
   12044:	ldr	r2, [sp, #28]
   12048:	mov	r3, r0
   1204c:	eor	r8, r2, #1
   12050:	ldr	r2, [sp, #48]	; 0x30
   12054:	uxtb	r8, r8
   12058:	cmp	r2, r0
   1205c:	movls	sl, #0
   12060:	movhi	sl, #1
   12064:	orrs	fp, r8, sl
   12068:	moveq	r3, #1
   1206c:	streq	r3, [sp, #28]
   12070:	bne	12414 <__assert_fail@plt+0xd10>
   12074:	mov	r0, r4
   12078:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1207c:	mov	r0, r7
   12080:	bl	156a4 <__assert_fail@plt+0x3fa0>
   12084:	ldr	r6, [r6, #28]
   12088:	cmp	r6, #0
   1208c:	bne	11f84 <__assert_fail@plt+0x880>
   12090:	ldr	r0, [sp, #72]	; 0x48
   12094:	mov	r4, fp
   12098:	ldr	fp, [sp, #76]	; 0x4c
   1209c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   120a0:	ldr	r3, [sp, #60]	; 0x3c
   120a4:	cmp	r3, #0
   120a8:	bne	125f8 <__assert_fail@plt+0xef4>
   120ac:	cmp	r4, #0
   120b0:	bne	126a8 <__assert_fail@plt+0xfa4>
   120b4:	ldr	r0, [sp, #44]	; 0x2c
   120b8:	bl	11680 <canonicalize_file_name@plt>
   120bc:	subs	r6, r0, #0
   120c0:	beq	120d0 <__assert_fail@plt+0x9cc>
   120c4:	ldrb	r3, [r6]
   120c8:	cmp	r3, #47	; 0x2f
   120cc:	beq	124f4 <__assert_fail@plt+0xdf0>
   120d0:	mov	r0, r6
   120d4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   120d8:	ldr	r3, [sp, #36]	; 0x24
   120dc:	ldr	r5, [r3, #116]	; 0x74
   120e0:	cmp	r5, #0
   120e4:	beq	12380 <__assert_fail@plt+0xc7c>
   120e8:	mov	r4, #0
   120ec:	mvn	r8, #0
   120f0:	mvn	r9, #0
   120f4:	b	12104 <__assert_fail@plt+0xa00>
   120f8:	ldr	r5, [r5, #28]
   120fc:	cmp	r5, #0
   12100:	beq	124a4 <__assert_fail@plt+0xda0>
   12104:	ldrd	r0, [r5, #16]
   12108:	cmp	r1, r9
   1210c:	cmpeq	r0, r8
   12110:	beq	1245c <__assert_fail@plt+0xd58>
   12114:	ldrd	r2, [fp]
   12118:	cmp	r3, r1
   1211c:	cmpeq	r2, r0
   12120:	bne	120f8 <__assert_fail@plt+0x9f4>
   12124:	movw	r1, #8104	; 0x1fa8
   12128:	movt	r1, #2
   1212c:	ldr	r0, [r5, #12]
   12130:	bl	11320 <strcmp@plt>
   12134:	cmp	r0, #0
   12138:	beq	120f8 <__assert_fail@plt+0x9f4>
   1213c:	cmp	r4, #0
   12140:	beq	1215c <__assert_fail@plt+0xa58>
   12144:	ldrb	r3, [r4, #24]
   12148:	tst	r3, #1
   1214c:	bne	1215c <__assert_fail@plt+0xa58>
   12150:	ldrb	r3, [r5, #24]
   12154:	tst	r3, #1
   12158:	bne	120f8 <__assert_fail@plt+0x9f4>
   1215c:	add	r2, sp, #104	; 0x68
   12160:	mov	r0, #3
   12164:	ldr	r1, [r5, #4]
   12168:	bl	116bc <__xstat64@plt>
   1216c:	cmp	r0, #0
   12170:	bne	1218c <__assert_fail@plt+0xa88>
   12174:	ldrd	r2, [r5, #16]
   12178:	ldrd	r0, [sp, #104]	; 0x68
   1217c:	cmp	r1, r3
   12180:	cmpeq	r0, r2
   12184:	moveq	r4, r5
   12188:	beq	120f8 <__assert_fail@plt+0x9f4>
   1218c:	mvn	r2, #1
   12190:	mvn	r3, #0
   12194:	strd	r2, [r5, #16]
   12198:	b	120f8 <__assert_fail@plt+0x9f4>
   1219c:	mov	r0, #0
   121a0:	bl	12f9c <__assert_fail@plt+0x1898>
   121a4:	ldrb	r3, [sl, #112]	; 0x70
   121a8:	cmp	r3, #0
   121ac:	bne	12a8c <__assert_fail@plt+0x1388>
   121b0:	mov	r0, #2
   121b4:	bl	12f9c <__assert_fail@plt+0x1898>
   121b8:	mov	r0, #3
   121bc:	bl	12f9c <__assert_fail@plt+0x1898>
   121c0:	mov	r0, #4
   121c4:	bl	12f9c <__assert_fail@plt+0x1898>
   121c8:	ldr	r3, [sl]
   121cc:	mov	r2, #4
   121d0:	ldr	r0, [sl, #4]
   121d4:	add	r3, r3, #1
   121d8:	mov	r1, r3
   121dc:	str	r3, [sl]
   121e0:	bl	1dd58 <__assert_fail@plt+0xc654>
   121e4:	movw	r3, #12668	; 0x317c
   121e8:	movt	r3, #3
   121ec:	ldr	r1, [sl]
   121f0:	movw	r2, #7940	; 0x1f04
   121f4:	movt	r2, #2
   121f8:	str	r0, [sl, #4]
   121fc:	ldrb	lr, [r3, #164]	; 0xa4
   12200:	add	ip, r3, #140	; 0x8c
   12204:	sub	r1, r1, #-1073741823	; 0xc0000001
   12208:	cmp	lr, #0
   1220c:	str	ip, [r0, r1, lsl #2]
   12210:	str	r2, [r3, #152]	; 0x98
   12214:	bne	12ae4 <__assert_fail@plt+0x13e0>
   12218:	mov	r2, #1
   1221c:	mov	r0, #10
   12220:	strb	r2, [r3, #164]	; 0xa4
   12224:	bl	12f9c <__assert_fail@plt+0x1898>
   12228:	b	11ea4 <__assert_fail@plt+0x7a0>
   1222c:	mov	r0, #0
   12230:	bl	12f9c <__assert_fail@plt+0x1898>
   12234:	ldrb	r3, [sl, #112]	; 0x70
   12238:	cmp	r3, #0
   1223c:	bne	12a98 <__assert_fail@plt+0x1394>
   12240:	ldr	r3, [sl]
   12244:	mov	r2, #4
   12248:	movw	r6, #12668	; 0x317c
   1224c:	movt	r6, #3
   12250:	ldr	r0, [sl, #4]
   12254:	add	r3, r3, #1
   12258:	mov	r1, r3
   1225c:	str	r3, [sl]
   12260:	bl	1dd58 <__assert_fail@plt+0xc654>
   12264:	ldr	r2, [sl]
   12268:	add	r1, r6, #56	; 0x38
   1226c:	movw	r3, #7620	; 0x1dc4
   12270:	movt	r3, #2
   12274:	str	r0, [sl, #4]
   12278:	ldrb	ip, [r6, #80]	; 0x50
   1227c:	sub	r2, r2, #-1073741823	; 0xc0000001
   12280:	cmp	ip, #0
   12284:	str	r1, [r0, r2, lsl #2]
   12288:	str	r3, [r6, #68]	; 0x44
   1228c:	bne	12ae4 <__assert_fail@plt+0x13e0>
   12290:	mov	r7, #1
   12294:	mov	r0, #3
   12298:	strb	r7, [r6, #80]	; 0x50
   1229c:	bl	12f9c <__assert_fail@plt+0x1898>
   122a0:	ldr	r3, [sl]
   122a4:	mov	r2, #4
   122a8:	ldr	r0, [sl, #4]
   122ac:	add	r3, r3, r7
   122b0:	mov	r1, r3
   122b4:	str	r3, [sl]
   122b8:	bl	1dd58 <__assert_fail@plt+0xc654>
   122bc:	ldr	r2, [sl]
   122c0:	add	r1, r6, #112	; 0x70
   122c4:	movw	r3, #7612	; 0x1dbc
   122c8:	movt	r3, #2
   122cc:	str	r0, [sl, #4]
   122d0:	ldrb	ip, [r6, #136]	; 0x88
   122d4:	sub	r2, r2, #-1073741823	; 0xc0000001
   122d8:	cmp	ip, #0
   122dc:	str	r1, [r0, r2, lsl #2]
   122e0:	str	r3, [r6, #124]	; 0x7c
   122e4:	bne	12ae4 <__assert_fail@plt+0x13e0>
   122e8:	mov	r0, #5
   122ec:	strb	r7, [r6, #136]	; 0x88
   122f0:	bl	12f9c <__assert_fail@plt+0x1898>
   122f4:	mov	r0, #10
   122f8:	bl	12f9c <__assert_fail@plt+0x1898>
   122fc:	b	11ea4 <__assert_fail@plt+0x7a0>
   12300:	mov	r0, #0
   12304:	bl	12f9c <__assert_fail@plt+0x1898>
   12308:	ldrb	r3, [sl, #112]	; 0x70
   1230c:	cmp	r3, #0
   12310:	bne	12aa4 <__assert_fail@plt+0x13a0>
   12314:	mov	r0, #6
   12318:	bl	12f9c <__assert_fail@plt+0x1898>
   1231c:	mov	r0, #7
   12320:	bl	12f9c <__assert_fail@plt+0x1898>
   12324:	mov	r0, #8
   12328:	bl	12f9c <__assert_fail@plt+0x1898>
   1232c:	mov	r0, #9
   12330:	bl	12f9c <__assert_fail@plt+0x1898>
   12334:	mov	r0, #10
   12338:	bl	12f9c <__assert_fail@plt+0x1898>
   1233c:	b	11ea4 <__assert_fail@plt+0x7a0>
   12340:	mov	r0, #0
   12344:	bl	12f9c <__assert_fail@plt+0x1898>
   12348:	ldrb	r3, [sl, #112]	; 0x70
   1234c:	cmp	r3, #0
   12350:	bne	12a80 <__assert_fail@plt+0x137c>
   12354:	mov	r0, #2
   12358:	bl	12f9c <__assert_fail@plt+0x1898>
   1235c:	mov	r0, #3
   12360:	bl	12f9c <__assert_fail@plt+0x1898>
   12364:	mov	r0, #4
   12368:	bl	12f9c <__assert_fail@plt+0x1898>
   1236c:	mov	r0, #5
   12370:	bl	12f9c <__assert_fail@plt+0x1898>
   12374:	mov	r0, #10
   12378:	bl	12f9c <__assert_fail@plt+0x1898>
   1237c:	b	11ea4 <__assert_fail@plt+0x7a0>
   12380:	ldr	r5, [sp, #44]	; 0x2c
   12384:	mov	r1, fp
   12388:	mov	r0, r5
   1238c:	bl	14860 <__assert_fail@plt+0x315c>
   12390:	subs	r4, r0, #0
   12394:	beq	123cc <__assert_fail@plt+0xcc8>
   12398:	mov	ip, #0
   1239c:	mov	r2, r5
   123a0:	mov	r0, ip
   123a4:	mov	r3, ip
   123a8:	mov	r1, r4
   123ac:	str	ip, [sp]
   123b0:	str	ip, [sp, #4]
   123b4:	str	ip, [sp, #8]
   123b8:	str	ip, [sp, #12]
   123bc:	str	ip, [sp, #16]
   123c0:	bl	13368 <__assert_fail@plt+0x1c64>
   123c4:	mov	r0, r4
   123c8:	bl	156a4 <__assert_fail@plt+0x3fa0>
   123cc:	ldr	r2, [sp, #32]
   123d0:	ldr	r3, [sp, #56]	; 0x38
   123d4:	cmp	r3, r2
   123d8:	ldr	r3, [sp, #40]	; 0x28
   123dc:	add	r3, r3, #1
   123e0:	str	r3, [sp, #40]	; 0x28
   123e4:	bne	11eec <__assert_fail@plt+0x7e8>
   123e8:	ldr	sl, [sp, #36]	; 0x24
   123ec:	ldrb	r3, [sl, #52]	; 0x34
   123f0:	cmp	r3, #0
   123f4:	bne	12b10 <__assert_fail@plt+0x140c>
   123f8:	ldr	r4, [sl, #44]	; 0x2c
   123fc:	cmp	r4, #0
   12400:	beq	12aec <__assert_fail@plt+0x13e8>
   12404:	ldr	r0, [sl, #44]	; 0x2c
   12408:	bl	11530 <exit@plt>
   1240c:	mov	fp, #1
   12410:	b	12074 <__assert_fail@plt+0x970>
   12414:	mov	r1, r5
   12418:	add	r2, sp, #104	; 0x68
   1241c:	str	r3, [sp, #64]	; 0x40
   12420:	mov	r0, #3
   12424:	bl	116bc <__xstat64@plt>
   12428:	cmp	r0, #0
   1242c:	ldr	r3, [sp, #64]	; 0x40
   12430:	beq	12440 <__assert_fail@plt+0xd3c>
   12434:	tst	r8, sl
   12438:	beq	124ec <__assert_fail@plt+0xde8>
   1243c:	mov	fp, #0
   12440:	cmp	r3, #1
   12444:	beq	125dc <__assert_fail@plt+0xed8>
   12448:	str	r3, [sp, #48]	; 0x30
   1244c:	str	r6, [sp, #60]	; 0x3c
   12450:	str	fp, [sp, #28]
   12454:	mov	fp, #0
   12458:	b	12074 <__assert_fail@plt+0x970>
   1245c:	add	r2, sp, #104	; 0x68
   12460:	mov	r0, #3
   12464:	ldr	r1, [r5, #4]
   12468:	bl	116bc <__xstat64@plt>
   1246c:	cmp	r0, #0
   12470:	ldrdeq	r0, [sp, #104]	; 0x68
   12474:	strdeq	r0, [r5, #16]
   12478:	beq	12114 <__assert_fail@plt+0xa10>
   1247c:	bl	1156c <__errno_location@plt>
   12480:	ldr	r6, [r0]
   12484:	cmp	r6, #5
   12488:	beq	12670 <__assert_fail@plt+0xf6c>
   1248c:	mvn	r0, #1
   12490:	mvn	r1, #0
   12494:	mov	r2, r0
   12498:	mov	r3, r1
   1249c:	strd	r2, [r5, #16]
   124a0:	b	12114 <__assert_fail@plt+0xa10>
   124a4:	cmp	r4, #0
   124a8:	beq	12380 <__assert_fail@plt+0xc7c>
   124ac:	mov	r1, #0
   124b0:	ldr	r3, [sp, #44]	; 0x2c
   124b4:	str	r1, [sp, #12]
   124b8:	str	r1, [sp, #16]
   124bc:	ldrb	r1, [r4, #24]
   124c0:	mov	r2, r3
   124c4:	ubfx	r1, r1, #1, #1
   124c8:	str	r1, [sp, #8]
   124cc:	ldrb	r1, [r4, #24]
   124d0:	and	r1, r1, #1
   124d4:	str	r1, [sp, #4]
   124d8:	ldr	r1, [r4, #12]
   124dc:	str	r1, [sp]
   124e0:	ldrd	r0, [r4]
   124e4:	bl	13368 <__assert_fail@plt+0x1c64>
   124e8:	b	123cc <__assert_fail@plt+0xcc8>
   124ec:	ldr	fp, [sp, #28]
   124f0:	b	12450 <__assert_fail@plt+0xd4c>
   124f4:	bl	1153c <strlen@plt>
   124f8:	ldr	r3, [sp, #36]	; 0x24
   124fc:	ldr	r5, [r3, #116]	; 0x74
   12500:	cmp	r5, #0
   12504:	beq	120d0 <__assert_fail@plt+0x9cc>
   12508:	mov	r9, #0
   1250c:	movw	r7, #8104	; 0x1fa8
   12510:	movt	r7, #2
   12514:	mov	r4, r9
   12518:	str	fp, [sp, #28]
   1251c:	mov	sl, r0
   12520:	mov	r1, r7
   12524:	ldr	r0, [r5, #12]
   12528:	bl	11320 <strcmp@plt>
   1252c:	cmp	r0, #0
   12530:	beq	1258c <__assert_fail@plt+0xe88>
   12534:	cmp	r4, #0
   12538:	beq	12554 <__assert_fail@plt+0xe50>
   1253c:	ldrb	r3, [r4, #24]
   12540:	tst	r3, #1
   12544:	bne	12554 <__assert_fail@plt+0xe50>
   12548:	ldrb	r3, [r5, #24]
   1254c:	tst	r3, #1
   12550:	bne	1258c <__assert_fail@plt+0xe88>
   12554:	ldr	fp, [r5, #4]
   12558:	mov	r0, fp
   1255c:	bl	1153c <strlen@plt>
   12560:	cmp	r0, r9
   12564:	cmpcs	sl, r0
   12568:	mov	r8, r0
   1256c:	bcc	1258c <__assert_fail@plt+0xe88>
   12570:	cmp	r0, #1
   12574:	beq	12664 <__assert_fail@plt+0xf60>
   12578:	cmp	sl, r0
   1257c:	beq	12644 <__assert_fail@plt+0xf40>
   12580:	ldrb	r2, [r6, r0]
   12584:	cmp	r2, #47	; 0x2f
   12588:	beq	12644 <__assert_fail@plt+0xf40>
   1258c:	ldr	r5, [r5, #28]
   12590:	cmp	r5, #0
   12594:	bne	12520 <__assert_fail@plt+0xe1c>
   12598:	mov	r0, r6
   1259c:	ldr	fp, [sp, #28]
   125a0:	bl	156a4 <__assert_fail@plt+0x3fa0>
   125a4:	cmp	r4, #0
   125a8:	beq	120d8 <__assert_fail@plt+0x9d4>
   125ac:	add	r2, sp, #104	; 0x68
   125b0:	mov	r0, #3
   125b4:	ldr	r1, [r4, #4]
   125b8:	bl	116bc <__xstat64@plt>
   125bc:	cmp	r0, #0
   125c0:	bne	120d8 <__assert_fail@plt+0x9d4>
   125c4:	ldrd	r2, [fp]
   125c8:	ldrd	r0, [sp, #104]	; 0x68
   125cc:	cmp	r1, r3
   125d0:	cmpeq	r0, r2
   125d4:	bne	120d8 <__assert_fail@plt+0x9d4>
   125d8:	b	124ac <__assert_fail@plt+0xda8>
   125dc:	mov	r0, r4
   125e0:	str	r6, [sp, #60]	; 0x3c
   125e4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   125e8:	mov	r0, r7
   125ec:	bl	156a4 <__assert_fail@plt+0x3fa0>
   125f0:	ldr	r0, [sp, #72]	; 0x48
   125f4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   125f8:	mov	r1, #0
   125fc:	ldr	r2, [sp, #44]	; 0x2c
   12600:	mov	r3, r1
   12604:	ldr	r0, [sp, #60]	; 0x3c
   12608:	str	r1, [sp, #12]
   1260c:	str	r1, [sp, #16]
   12610:	ldrb	r1, [r0, #24]
   12614:	ubfx	r1, r1, #1, #1
   12618:	str	r1, [sp, #8]
   1261c:	ldrb	r1, [r0, #24]
   12620:	and	r1, r1, #1
   12624:	str	r1, [sp, #4]
   12628:	ldr	r1, [r0, #12]
   1262c:	str	r1, [sp]
   12630:	mov	r1, r0
   12634:	ldr	r0, [r0]
   12638:	ldr	r1, [r1, #4]
   1263c:	bl	13368 <__assert_fail@plt+0x1c64>
   12640:	b	123cc <__assert_fail@plt+0xcc8>
   12644:	mov	r0, fp
   12648:	mov	r2, r8
   1264c:	mov	r1, r6
   12650:	bl	116d4 <strncmp@plt>
   12654:	cmp	r0, #0
   12658:	moveq	r9, r8
   1265c:	moveq	r4, r5
   12660:	b	1258c <__assert_fail@plt+0xe88>
   12664:	mov	r9, r0
   12668:	mov	r4, r5
   1266c:	b	1258c <__assert_fail@plt+0xe88>
   12670:	mov	r1, #3
   12674:	mov	r0, #0
   12678:	ldr	r2, [r5, #4]
   1267c:	bl	1c978 <__assert_fail@plt+0xb274>
   12680:	mov	r3, r0
   12684:	mov	r1, r6
   12688:	movw	r2, #8780	; 0x224c
   1268c:	movt	r2, #2
   12690:	mov	r0, #0
   12694:	bl	11494 <error@plt>
   12698:	ldr	r2, [sp, #36]	; 0x24
   1269c:	mov	r3, #1
   126a0:	str	r3, [r2, #44]	; 0x2c
   126a4:	b	1248c <__assert_fail@plt+0xd88>
   126a8:	ldr	r5, [sp, #60]	; 0x3c
   126ac:	mov	r2, #5
   126b0:	movw	r1, #8052	; 0x1f74
   126b4:	movt	r1, #2
   126b8:	mov	r0, r5
   126bc:	bl	113bc <dcgettext@plt>
   126c0:	mov	r4, r0
   126c4:	mov	r0, #4
   126c8:	ldr	r1, [sp, #44]	; 0x2c
   126cc:	bl	1bdf8 <__assert_fail@plt+0xa6f4>
   126d0:	mov	r3, r0
   126d4:	mov	r2, r4
   126d8:	mov	r1, r5
   126dc:	mov	r0, r5
   126e0:	bl	11494 <error@plt>
   126e4:	ldr	r2, [sp, #36]	; 0x24
   126e8:	mov	r3, #1
   126ec:	str	r3, [r2, #44]	; 0x2c
   126f0:	b	123cc <__assert_fail@plt+0xcc8>
   126f4:	ldrb	r7, [sl, #33]	; 0x21
   126f8:	ldr	r0, [sp, #52]	; 0x34
   126fc:	ldr	r5, [sl, #116]	; 0x74
   12700:	b	1271c <__assert_fail@plt+0x1018>
   12704:	ldrdeq	r1, [r2], -ip
   12708:	andeq	r3, r3, r8, asr r3
   1270c:	andeq	r3, r3, r8, ror r3
   12710:	andeq	r1, r2, ip, ror #5
   12714:	ldr	r5, [r5, #28]
   12718:	add	r0, r0, #1
   1271c:	cmp	r5, #0
   12720:	bne	12714 <__assert_fail@plt+0x1010>
   12724:	movw	r1, #11924	; 0x2e94
   12728:	movt	r1, #1
   1272c:	movw	r3, #11884	; 0x2e6c
   12730:	movt	r3, #1
   12734:	movw	r2, #11844	; 0x2e44
   12738:	movt	r2, #1
   1273c:	str	r1, [sp]
   12740:	mov	r1, r5
   12744:	bl	161fc <__assert_fail@plt+0x4af8>
   12748:	cmp	r0, #0
   1274c:	str	r0, [sl, #48]	; 0x30
   12750:	ldrne	r4, [sl, #116]	; 0x74
   12754:	beq	12ae8 <__assert_fail@plt+0x13e4>
   12758:	cmp	r4, #0
   1275c:	beq	129c0 <__assert_fail@plt+0x12bc>
   12760:	ldrb	r3, [r4, #24]
   12764:	tst	r3, #2
   12768:	beq	12778 <__assert_fail@plt+0x1074>
   1276c:	ldrb	r2, [sl, #32]
   12770:	cmp	r2, #0
   12774:	bne	127d0 <__assert_fail@plt+0x10cc>
   12778:	tst	r3, #1
   1277c:	beq	12798 <__assert_fail@plt+0x1094>
   12780:	ldrb	r3, [sl, #33]	; 0x21
   12784:	cmp	r3, #0
   12788:	bne	12798 <__assert_fail@plt+0x1094>
   1278c:	ldrb	r3, [sl, #34]	; 0x22
   12790:	cmp	r3, #0
   12794:	beq	127d0 <__assert_fail@plt+0x10cc>
   12798:	ldr	r6, [sl, #36]	; 0x24
   1279c:	ldr	r8, [r4, #12]
   127a0:	cmp	r6, #0
   127a4:	beq	12814 <__assert_fail@plt+0x1110>
   127a8:	cmp	r8, #0
   127ac:	beq	12844 <__assert_fail@plt+0x1140>
   127b0:	mov	r0, r8
   127b4:	ldr	r1, [r6]
   127b8:	bl	11320 <strcmp@plt>
   127bc:	cmp	r0, #0
   127c0:	beq	129b0 <__assert_fail@plt+0x12ac>
   127c4:	ldr	r6, [r6, #4]
   127c8:	cmp	r6, #0
   127cc:	bne	127b0 <__assert_fail@plt+0x10ac>
   127d0:	ldrd	r2, [r4, #16]
   127d4:	strd	r2, [sp, #104]	; 0x68
   127d8:	mov	r0, #24
   127dc:	bl	1dc74 <__assert_fail@plt+0xc570>
   127e0:	ldrd	r2, [sp, #104]	; 0x68
   127e4:	mov	r6, r0
   127e8:	mov	r1, r0
   127ec:	ldr	r0, [sl, #48]	; 0x30
   127f0:	strd	r2, [r6]
   127f4:	strd	r4, [r6, #8]
   127f8:	bl	16a64 <__assert_fail@plt+0x5360>
   127fc:	cmp	r0, #0
   12800:	beq	12ae8 <__assert_fail@plt+0x13e4>
   12804:	mov	r5, r6
   12808:	ldr	r4, [r4, #28]
   1280c:	str	r6, [r0, #16]
   12810:	b	12758 <__assert_fail@plt+0x1054>
   12814:	ldr	r6, [sl, #40]	; 0x28
   12818:	cmp	r8, #0
   1281c:	cmpne	r6, #0
   12820:	beq	12844 <__assert_fail@plt+0x1140>
   12824:	mov	r0, r8
   12828:	ldr	r1, [r6]
   1282c:	bl	11320 <strcmp@plt>
   12830:	cmp	r0, #0
   12834:	beq	127d0 <__assert_fail@plt+0x10cc>
   12838:	ldr	r6, [r6, #4]
   1283c:	cmp	r6, #0
   12840:	bne	12824 <__assert_fail@plt+0x1120>
   12844:	add	r2, sp, #104	; 0x68
   12848:	mov	r0, #3
   1284c:	ldr	r1, [r4, #4]
   12850:	bl	116bc <__xstat64@plt>
   12854:	cmn	r0, #1
   12858:	beq	127d0 <__assert_fail@plt+0x10cc>
   1285c:	ldr	r0, [sl, #48]	; 0x30
   12860:	ldrd	r2, [sp, #104]	; 0x68
   12864:	cmp	r0, #0
   12868:	beq	127d8 <__assert_fail@plt+0x10d4>
   1286c:	add	r1, sp, #80	; 0x50
   12870:	strd	r2, [sp, #80]	; 0x50
   12874:	bl	15e78 <__assert_fail@plt+0x4774>
   12878:	cmp	r0, #0
   1287c:	beq	127d8 <__assert_fail@plt+0x10d4>
   12880:	ldr	r9, [r0, #16]
   12884:	cmp	r9, #0
   12888:	beq	127d8 <__assert_fail@plt+0x10d4>
   1288c:	ldr	r8, [r9, #8]
   12890:	ldr	r0, [r8, #8]
   12894:	cmp	r0, #0
   12898:	moveq	r6, r0
   1289c:	beq	128c8 <__assert_fail@plt+0x11c4>
   128a0:	ldr	r6, [r4, #8]
   128a4:	cmp	r6, #0
   128a8:	beq	128c8 <__assert_fail@plt+0x11c4>
   128ac:	bl	1153c <strlen@plt>
   128b0:	mov	fp, r0
   128b4:	mov	r0, r6
   128b8:	bl	1153c <strlen@plt>
   128bc:	cmp	fp, r0
   128c0:	movcs	r6, #0
   128c4:	movcc	r6, #1
   128c8:	ldrb	r3, [sl, #53]	; 0x35
   128cc:	ldr	fp, [r4]
   128d0:	cmp	r3, #0
   128d4:	bne	12904 <__assert_fail@plt+0x1200>
   128d8:	ldrb	r3, [r4, #24]
   128dc:	tst	r3, #2
   128e0:	beq	12904 <__assert_fail@plt+0x1200>
   128e4:	ldrb	r3, [r8, #24]
   128e8:	tst	r3, #2
   128ec:	beq	12904 <__assert_fail@plt+0x1200>
   128f0:	mov	r1, fp
   128f4:	ldr	r0, [r8]
   128f8:	bl	11320 <strcmp@plt>
   128fc:	cmp	r0, #0
   12900:	bne	127d8 <__assert_fail@plt+0x10d4>
   12904:	mov	r1, #47	; 0x2f
   12908:	mov	r0, fp
   1290c:	bl	11548 <strchr@plt>
   12910:	cmp	r0, #0
   12914:	beq	1292c <__assert_fail@plt+0x1228>
   12918:	mov	r1, #47	; 0x2f
   1291c:	ldr	r0, [r8]
   12920:	bl	11548 <strchr@plt>
   12924:	cmp	r0, #0
   12928:	beq	12a68 <__assert_fail@plt+0x1364>
   1292c:	ldr	r3, [r8, #4]
   12930:	eor	r6, r6, #1
   12934:	mov	r0, r3
   12938:	str	r3, [sp, #28]
   1293c:	bl	1153c <strlen@plt>
   12940:	ldr	r2, [r4, #4]
   12944:	mov	r3, r0
   12948:	mov	r0, r2
   1294c:	strd	r2, [sp, #32]
   12950:	bl	1153c <strlen@plt>
   12954:	ldr	r3, [sp, #36]	; 0x24
   12958:	cmp	r3, r0
   1295c:	movls	r6, #0
   12960:	andhi	r6, r6, #1
   12964:	cmp	r6, #0
   12968:	bne	12a68 <__assert_fail@plt+0x1364>
   1296c:	mov	r1, fp
   12970:	ldr	r0, [r8]
   12974:	bl	11320 <strcmp@plt>
   12978:	cmp	r0, #0
   1297c:	beq	12994 <__assert_fail@plt+0x1290>
   12980:	ldr	r1, [sp, #28]
   12984:	ldr	r0, [sp, #32]
   12988:	bl	11320 <strcmp@plt>
   1298c:	cmp	r0, #0
   12990:	beq	12a68 <__assert_fail@plt+0x1364>
   12994:	mov	r8, r4
   12998:	cmp	r7, #0
   1299c:	ldr	r4, [r4, #28]
   129a0:	bne	12758 <__assert_fail@plt+0x1054>
   129a4:	mov	r0, r8
   129a8:	bl	19764 <__assert_fail@plt+0x8060>
   129ac:	b	12758 <__assert_fail@plt+0x1054>
   129b0:	ldr	r6, [sl, #40]	; 0x28
   129b4:	cmp	r6, #0
   129b8:	bne	12824 <__assert_fail@plt+0x1120>
   129bc:	b	12844 <__assert_fail@plt+0x1140>
   129c0:	cmp	r7, #0
   129c4:	streq	r7, [sl, #116]	; 0x74
   129c8:	beq	12a38 <__assert_fail@plt+0x1334>
   129cc:	mov	r6, #1
   129d0:	mov	r5, #0
   129d4:	ldr	r4, [sl, #116]	; 0x74
   129d8:	b	12a18 <__assert_fail@plt+0x1314>
   129dc:	str	r5, [sp, #12]
   129e0:	mov	r3, #0
   129e4:	str	r6, [sp, #16]
   129e8:	mov	r2, r3
   129ec:	ldrb	r1, [r4, #24]
   129f0:	ubfx	r1, r1, #1, #1
   129f4:	str	r1, [sp, #8]
   129f8:	ldrb	r1, [r4, #24]
   129fc:	and	r1, r1, #1
   12a00:	str	r1, [sp, #4]
   12a04:	ldr	r1, [r4, #12]
   12a08:	str	r1, [sp]
   12a0c:	ldrd	r0, [r4]
   12a10:	bl	13368 <__assert_fail@plt+0x1c64>
   12a14:	ldr	r4, [r4, #28]
   12a18:	cmp	r4, #0
   12a1c:	bne	129dc <__assert_fail@plt+0x12d8>
   12a20:	b	123ec <__assert_fail@plt+0xce8>
   12a24:	ldr	r3, [r5, #8]
   12a28:	mov	r7, #1
   12a2c:	ldr	r5, [r5, #12]
   12a30:	str	r4, [r3, #28]
   12a34:	mov	r4, r3
   12a38:	cmp	r5, #0
   12a3c:	bne	12a24 <__assert_fail@plt+0x1320>
   12a40:	cmp	r7, #0
   12a44:	ldr	r0, [sl, #48]	; 0x30
   12a48:	strne	r4, [sl, #116]	; 0x74
   12a4c:	bl	1653c <__assert_fail@plt+0x4e38>
   12a50:	mov	r3, #0
   12a54:	str	r3, [sl, #48]	; 0x30
   12a58:	b	129cc <__assert_fail@plt+0x12c8>
   12a5c:	ldr	r0, [sp, #72]	; 0x48
   12a60:	bl	156a4 <__assert_fail@plt+0x3fa0>
   12a64:	b	120b4 <__assert_fail@plt+0x9b0>
   12a68:	str	r4, [r9, #8]
   12a6c:	b	12998 <__assert_fail@plt+0x1294>
   12a70:	movw	r0, #7952	; 0x1f10
   12a74:	movt	r0, #2
   12a78:	bl	143d8 <__assert_fail@plt+0x2cd4>
   12a7c:	b	11ea4 <__assert_fail@plt+0x7a0>
   12a80:	mov	r0, #1
   12a84:	bl	12f9c <__assert_fail@plt+0x1898>
   12a88:	b	12354 <__assert_fail@plt+0xc50>
   12a8c:	mov	r0, #1
   12a90:	bl	12f9c <__assert_fail@plt+0x1898>
   12a94:	b	121b0 <__assert_fail@plt+0xaac>
   12a98:	mov	r0, #1
   12a9c:	bl	12f9c <__assert_fail@plt+0x1898>
   12aa0:	b	12240 <__assert_fail@plt+0xb3c>
   12aa4:	mov	r0, #1
   12aa8:	bl	12f9c <__assert_fail@plt+0x1898>
   12aac:	b	12314 <__assert_fail@plt+0xc10>
   12ab0:	mov	r0, #0
   12ab4:	bl	13fb8 <__assert_fail@plt+0x28b4>
   12ab8:	movw	ip, #7728	; 0x1e30
   12abc:	movt	ip, #2
   12ac0:	ldr	r2, [sp, #28]
   12ac4:	mov	r1, #0
   12ac8:	movw	r3, #7740	; 0x1e3c
   12acc:	movt	r3, #2
   12ad0:	mov	r0, r1
   12ad4:	str	ip, [sp]
   12ad8:	bl	11494 <error@plt>
   12adc:	mov	r0, #1
   12ae0:	bl	13fb8 <__assert_fail@plt+0x28b4>
   12ae4:	bl	12e98 <__assert_fail@plt+0x1794>
   12ae8:	bl	1e22c <__assert_fail@plt+0xcb28>
   12aec:	mov	r2, #5
   12af0:	movw	r1, #8112	; 0x1fb0
   12af4:	movt	r1, #2
   12af8:	mov	r0, r4
   12afc:	bl	113bc <dcgettext@plt>
   12b00:	mov	r2, r0
   12b04:	mov	r1, r4
   12b08:	mov	r0, #1
   12b0c:	bl	11494 <error@plt>
   12b10:	ldrb	r3, [sl, #53]	; 0x35
   12b14:	cmp	r3, #0
   12b18:	beq	12b68 <__assert_fail@plt+0x1464>
   12b1c:	movw	r3, #12668	; 0x317c
   12b20:	movt	r3, #3
   12b24:	ldr	ip, [pc, #-1056]	; 1270c <__assert_fail@plt+0x1008>
   12b28:	movw	r2, #4904	; 0x1328
   12b2c:	movt	r2, #2
   12b30:	ldrb	r1, [r3, #24]
   12b34:	mov	r3, #0
   12b38:	movw	r0, #7628	; 0x1dcc
   12b3c:	movt	r0, #2
   12b40:	str	r3, [sp]
   12b44:	str	r3, [sp, #4]
   12b48:	str	r3, [sp, #8]
   12b4c:	cmp	r1, r3
   12b50:	str	ip, [sp, #12]
   12b54:	movne	r1, r2
   12b58:	moveq	r1, r0
   12b5c:	str	r3, [sp, #16]
   12b60:	mov	r2, r3
   12b64:	bl	13368 <__assert_fail@plt+0x1c64>
   12b68:	movw	r5, #13108	; 0x3334
   12b6c:	movt	r5, #3
   12b70:	mov	r6, #0
   12b74:	mov	r8, #32
   12b78:	ldr	r3, [sl, #8]
   12b7c:	cmp	r6, r3
   12b80:	bcs	12404 <__assert_fail@plt+0xd00>
   12b84:	lsl	r7, r6, #2
   12b88:	mov	r4, #0
   12b8c:	b	12c24 <__assert_fail@plt+0x1520>
   12b90:	ldr	r3, [sl, #12]
   12b94:	cmp	r4, #0
   12b98:	lsl	r9, r4, #2
   12b9c:	ldr	r3, [r3, r7]
   12ba0:	ldr	fp, [r3, r4, lsl #2]
   12ba4:	beq	12bc8 <__assert_fail@plt+0x14c4>
   12ba8:	ldr	r0, [r5]
   12bac:	ldr	r3, [r0, #20]
   12bb0:	ldr	r2, [r0, #24]
   12bb4:	cmp	r3, r2
   12bb8:	addcc	r2, r3, #1
   12bbc:	strcc	r2, [r0, #20]
   12bc0:	strbcc	r8, [r3]
   12bc4:	bcs	12c5c <__assert_fail@plt+0x1558>
   12bc8:	ldr	r3, [sl]
   12bcc:	mov	r0, fp
   12bd0:	add	r1, sp, #104	; 0x68
   12bd4:	ldr	r2, [sl, #4]
   12bd8:	sub	r3, r3, #1
   12bdc:	cmp	r4, r3
   12be0:	add	r4, r4, #1
   12be4:	ldr	r2, [r2, r9]
   12be8:	moveq	r3, #8
   12bec:	movne	r3, #0
   12bf0:	ldr	ip, [r2, #16]
   12bf4:	ldr	r2, [r2, #20]
   12bf8:	str	ip, [sp, #104]	; 0x68
   12bfc:	bl	185fc <__assert_fail@plt+0x6ef8>
   12c00:	subs	fp, r0, #0
   12c04:	ldr	r1, [r5]
   12c08:	movne	r0, fp
   12c0c:	ldreq	r3, [sl, #12]
   12c10:	ldreq	r3, [r3, r7]
   12c14:	ldreq	r0, [r3, r9]
   12c18:	bl	112f0 <fputs_unlocked@plt>
   12c1c:	mov	r0, fp
   12c20:	bl	156a4 <__assert_fail@plt+0x3fa0>
   12c24:	ldr	r3, [sl]
   12c28:	cmp	r4, r3
   12c2c:	bcc	12b90 <__assert_fail@plt+0x148c>
   12c30:	ldr	r0, [r5]
   12c34:	ldr	r3, [r0, #20]
   12c38:	ldr	r2, [r0, #24]
   12c3c:	cmp	r3, r2
   12c40:	addcc	r1, r3, #1
   12c44:	movcc	r2, #10
   12c48:	strcc	r1, [r0, #20]
   12c4c:	strbcc	r2, [r3]
   12c50:	bcs	12c68 <__assert_fail@plt+0x1564>
   12c54:	add	r6, r6, #1
   12c58:	b	12b78 <__assert_fail@plt+0x1474>
   12c5c:	mov	r1, #32
   12c60:	bl	11608 <__overflow@plt>
   12c64:	b	12bc8 <__assert_fail@plt+0x14c4>
   12c68:	mov	r1, #10
   12c6c:	bl	11608 <__overflow@plt>
   12c70:	b	12c54 <__assert_fail@plt+0x1550>
   12c74:	movw	r0, #7728	; 0x1e30
   12c78:	movt	r0, #2
   12c7c:	ldr	r2, [sp, #28]
   12c80:	mov	r1, r3
   12c84:	movw	r3, #7740	; 0x1e3c
   12c88:	movt	r3, #2
   12c8c:	str	r0, [sp]
   12c90:	mov	r0, r1
   12c94:	bl	11494 <error@plt>
   12c98:	mov	r0, #1
   12c9c:	bl	13fb8 <__assert_fail@plt+0x28b4>
   12ca0:	movw	ip, #7728	; 0x1e30
   12ca4:	movt	ip, #2
   12ca8:	ldr	r2, [sp, #28]
   12cac:	mov	r1, #0
   12cb0:	movw	r3, #7744	; 0x1e40
   12cb4:	movt	r3, #2
   12cb8:	mov	r0, r1
   12cbc:	str	ip, [sp]
   12cc0:	bl	11494 <error@plt>
   12cc4:	mov	r0, #1
   12cc8:	bl	13fb8 <__assert_fail@plt+0x28b4>
   12ccc:	movw	ip, #7728	; 0x1e30
   12cd0:	movt	ip, #2
   12cd4:	ldr	r2, [sp, #28]
   12cd8:	mov	r1, #0
   12cdc:	movw	r3, #7724	; 0x1e2c
   12ce0:	movt	r3, #2
   12ce4:	mov	r0, r1
   12ce8:	str	ip, [sp]
   12cec:	bl	11494 <error@plt>
   12cf0:	mov	r0, #1
   12cf4:	bl	13fb8 <__assert_fail@plt+0x28b4>
   12cf8:	movw	r1, #4860	; 0x12fc
   12cfc:	movt	r1, #2
   12d00:	ldr	r3, [pc, #-1528]	; 12710 <__assert_fail@plt+0x100c>
   12d04:	movw	r0, #8028	; 0x1f5c
   12d08:	movt	r0, #2
   12d0c:	movw	r2, #565	; 0x235
   12d10:	bl	11704 <__assert_fail@plt>
   12d14:	mov	fp, #0
   12d18:	mov	lr, #0
   12d1c:	pop	{r1}		; (ldr r1, [sp], #4)
   12d20:	mov	r2, sp
   12d24:	push	{r2}		; (str r2, [sp, #-4]!)
   12d28:	push	{r0}		; (str r0, [sp, #-4]!)
   12d2c:	ldr	ip, [pc, #16]	; 12d44 <__assert_fail@plt+0x1640>
   12d30:	push	{ip}		; (str ip, [sp, #-4]!)
   12d34:	ldr	r0, [pc, #12]	; 12d48 <__assert_fail@plt+0x1644>
   12d38:	ldr	r3, [pc, #12]	; 12d4c <__assert_fail@plt+0x1648>
   12d3c:	bl	114dc <__libc_start_main@plt>
   12d40:	bl	116e0 <abort@plt>
   12d44:	andeq	r1, r2, r8, ror #2
   12d48:	andeq	r1, r1, r0, lsl r7
   12d4c:	andeq	r1, r2, r8, lsl #2
   12d50:	ldr	r3, [pc, #20]	; 12d6c <__assert_fail@plt+0x1668>
   12d54:	ldr	r2, [pc, #20]	; 12d70 <__assert_fail@plt+0x166c>
   12d58:	add	r3, pc, r3
   12d5c:	ldr	r2, [r3, r2]
   12d60:	cmp	r2, #0
   12d64:	bxeq	lr
   12d68:	b	114f4 <__gmon_start__@plt>
   12d6c:	andeq	r0, r2, r0, lsr #5
   12d70:	andeq	r0, r0, r0, ror r1
   12d74:	ldr	r0, [pc, #24]	; 12d94 <__assert_fail@plt+0x1690>
   12d78:	ldr	r3, [pc, #24]	; 12d98 <__assert_fail@plt+0x1694>
   12d7c:	cmp	r3, r0
   12d80:	bxeq	lr
   12d84:	ldr	r3, [pc, #16]	; 12d9c <__assert_fail@plt+0x1698>
   12d88:	cmp	r3, #0
   12d8c:	bxeq	lr
   12d90:	bx	r3
   12d94:	andeq	r3, r3, r0, lsr #6
   12d98:	andeq	r3, r3, r0, lsr #6
   12d9c:	andeq	r0, r0, r0
   12da0:	ldr	r0, [pc, #36]	; 12dcc <__assert_fail@plt+0x16c8>
   12da4:	ldr	r1, [pc, #36]	; 12dd0 <__assert_fail@plt+0x16cc>
   12da8:	sub	r1, r1, r0
   12dac:	asr	r1, r1, #2
   12db0:	add	r1, r1, r1, lsr #31
   12db4:	asrs	r1, r1, #1
   12db8:	bxeq	lr
   12dbc:	ldr	r3, [pc, #16]	; 12dd4 <__assert_fail@plt+0x16d0>
   12dc0:	cmp	r3, #0
   12dc4:	bxeq	lr
   12dc8:	bx	r3
   12dcc:	andeq	r3, r3, r0, lsr #6
   12dd0:	andeq	r3, r3, r0, lsr #6
   12dd4:	andeq	r0, r0, r0
   12dd8:	push	{r4, lr}
   12ddc:	ldr	r4, [pc, #24]	; 12dfc <__assert_fail@plt+0x16f8>
   12de0:	ldrb	r3, [r4]
   12de4:	cmp	r3, #0
   12de8:	popne	{r4, pc}
   12dec:	bl	12d74 <__assert_fail@plt+0x1670>
   12df0:	mov	r3, #1
   12df4:	strb	r3, [r4]
   12df8:	pop	{r4, pc}
   12dfc:	andeq	r3, r3, ip, lsr r3
   12e00:	b	12da0 <__assert_fail@plt+0x169c>
   12e04:	andeq	r0, r0, r0
   12e08:	ldrb	r3, [r0]
   12e0c:	cmp	r3, #0
   12e10:	beq	12e40 <__assert_fail@plt+0x173c>
   12e14:	mov	r2, #63	; 0x3f
   12e18:	cmp	r3, #0
   12e1c:	beq	12e34 <__assert_fail@plt+0x1730>
   12e20:	cmp	r3, #31
   12e24:	bls	12e30 <__assert_fail@plt+0x172c>
   12e28:	cmp	r3, #127	; 0x7f
   12e2c:	bne	12e34 <__assert_fail@plt+0x1730>
   12e30:	strb	r2, [r0]
   12e34:	ldrb	r3, [r0, #1]!
   12e38:	cmp	r3, #0
   12e3c:	bne	12e18 <__assert_fail@plt+0x1714>
   12e40:	bx	lr
   12e44:	mov	r2, r1
   12e48:	mov	r3, #0
   12e4c:	str	r4, [sp, #-8]!
   12e50:	ldrd	r0, [r0]
   12e54:	str	lr, [sp, #4]
   12e58:	bl	20f50 <__assert_fail@plt+0xf84c>
   12e5c:	ldr	r4, [sp]
   12e60:	add	sp, sp, #4
   12e64:	mov	r0, r2
   12e68:	pop	{pc}		; (ldr pc, [sp], #4)
   12e6c:	strd	r4, [sp, #-8]!
   12e70:	ldrd	r2, [r1]
   12e74:	ldrd	r4, [r0]
   12e78:	cmp	r5, r3
   12e7c:	cmpeq	r4, r2
   12e80:	ldrd	r4, [sp]
   12e84:	add	sp, sp, #8
   12e88:	moveq	r0, #1
   12e8c:	movne	r0, #0
   12e90:	bx	lr
   12e94:	b	156a4 <__assert_fail@plt+0x3fa0>
   12e98:	movw	r3, #4496	; 0x1190
   12e9c:	movt	r3, #2
   12ea0:	str	r4, [sp, #-8]!
   12ea4:	movw	r1, #4860	; 0x12fc
   12ea8:	movt	r1, #2
   12eac:	str	lr, [sp, #4]
   12eb0:	movw	r0, #4872	; 0x1308
   12eb4:	movt	r0, #2
   12eb8:	movw	r2, #425	; 0x1a9
   12ebc:	bl	11704 <__assert_fail@plt>
   12ec0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ec4:	mov	r5, r0
   12ec8:	strd	r6, [sp, #8]
   12ecc:	strd	r8, [sp, #16]
   12ed0:	mov	r9, #0
   12ed4:	strd	sl, [sp, #24]
   12ed8:	str	lr, [sp, #32]
   12edc:	sub	sp, sp, #20
   12ee0:	bl	1153c <strlen@plt>
   12ee4:	add	r7, r5, r0
   12ee8:	str	r9, [sp, #8]
   12eec:	cmp	r5, r7
   12ef0:	str	r9, [sp, #12]
   12ef4:	beq	12f78 <__assert_fail@plt+0x1874>
   12ef8:	mov	r8, r9
   12efc:	mov	r4, r5
   12f00:	mov	sl, #63	; 0x3f
   12f04:	b	12f38 <__assert_fail@plt+0x1834>
   12f08:	ldr	r0, [sp, #4]
   12f0c:	bl	113ec <iswcntrl@plt>
   12f10:	cmp	r0, #0
   12f14:	mov	r2, fp
   12f18:	mov	r0, r5
   12f1c:	mov	r1, r4
   12f20:	bne	12f60 <__assert_fail@plt+0x185c>
   12f24:	add	r4, r4, fp
   12f28:	add	r5, r5, fp
   12f2c:	bl	11344 <memmove@plt>
   12f30:	cmp	r7, r4
   12f34:	beq	12f78 <__assert_fail@plt+0x1874>
   12f38:	sub	r6, r7, r4
   12f3c:	add	r3, sp, #8
   12f40:	mov	r2, r6
   12f44:	mov	r1, r4
   12f48:	add	r0, sp, #4
   12f4c:	bl	18200 <__assert_fail@plt+0x6afc>
   12f50:	cmp	r6, r0
   12f54:	mov	fp, r0
   12f58:	bcs	12f08 <__assert_fail@plt+0x1804>
   12f5c:	mov	fp, #1
   12f60:	add	r4, r4, fp
   12f64:	strb	sl, [r5], #1
   12f68:	cmp	r7, r4
   12f6c:	str	r9, [sp, #8]
   12f70:	str	r8, [sp, #12]
   12f74:	bne	12f38 <__assert_fail@plt+0x1834>
   12f78:	mov	r3, #0
   12f7c:	strb	r3, [r5]
   12f80:	add	sp, sp, #20
   12f84:	ldrd	r4, [sp]
   12f88:	ldrd	r6, [sp, #8]
   12f8c:	ldrd	r8, [sp, #16]
   12f90:	ldrd	sl, [sp, #24]
   12f94:	add	sp, sp, #32
   12f98:	pop	{pc}		; (ldr pc, [sp], #4)
   12f9c:	strd	r4, [sp, #-16]!
   12fa0:	movw	r4, #13120	; 0x3340
   12fa4:	movt	r4, #3
   12fa8:	ldr	r3, [r4]
   12fac:	mov	r2, #4
   12fb0:	rsb	r5, r0, r0, lsl #3
   12fb4:	str	r6, [sp, #8]
   12fb8:	ldr	r0, [r4, #4]
   12fbc:	str	lr, [sp, #12]
   12fc0:	add	r3, r3, #1
   12fc4:	mov	r1, r3
   12fc8:	str	r3, [r4]
   12fcc:	bl	1dd58 <__assert_fail@plt+0xc654>
   12fd0:	movw	r3, #12668	; 0x317c
   12fd4:	movt	r3, #3
   12fd8:	ldr	r2, [r4]
   12fdc:	add	r3, r3, r5, lsl #2
   12fe0:	str	r0, [r4, #4]
   12fe4:	ldrb	r1, [r3, #24]
   12fe8:	sub	r2, r2, #-1073741823	; 0xc0000001
   12fec:	str	r3, [r0, r2, lsl #2]
   12ff0:	cmp	r1, #0
   12ff4:	bne	13010 <__assert_fail@plt+0x190c>
   12ff8:	mov	r2, #1
   12ffc:	ldrd	r4, [sp]
   13000:	ldr	r6, [sp, #8]
   13004:	add	sp, sp, #12
   13008:	strb	r2, [r3, #24]
   1300c:	pop	{pc}		; (ldr pc, [sp], #4)
   13010:	bl	12e98 <__assert_fail@plt+0x1794>
   13014:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13018:	mov	r2, #4
   1301c:	strd	r6, [sp, #8]
   13020:	strd	sl, [sp, #24]
   13024:	movw	sl, #13120	; 0x3340
   13028:	movt	sl, #3
   1302c:	ldr	r3, [sl, #8]
   13030:	strd	r8, [sp, #16]
   13034:	str	lr, [sp, #32]
   13038:	sub	sp, sp, #716	; 0x2cc
   1303c:	ldr	r0, [sl, #12]
   13040:	add	r3, r3, #1
   13044:	mov	r1, r3
   13048:	str	r3, [sl, #8]
   1304c:	bl	1dd58 <__assert_fail@plt+0xc654>
   13050:	mov	r5, r0
   13054:	mov	r1, #4
   13058:	ldr	r0, [sl]
   1305c:	ldr	r4, [sl, #8]
   13060:	str	r5, [sl, #12]
   13064:	bl	1ddd8 <__assert_fail@plt+0xc6d4>
   13068:	ldr	r3, [sl]
   1306c:	sub	r4, r4, #-1073741823	; 0xc0000001
   13070:	str	r0, [r5, r4, lsl #2]
   13074:	cmp	r3, #0
   13078:	beq	13324 <__assert_fail@plt+0x1c20>
   1307c:	movw	r3, #4888	; 0x1318
   13080:	movt	r3, #2
   13084:	ldr	r6, [sl, #4]
   13088:	mov	fp, #0
   1308c:	str	r3, [sp, #52]	; 0x34
   13090:	b	1312c <__assert_fail@plt+0x1a28>
   13094:	mov	r0, r5
   13098:	bl	113c8 <strdup@plt>
   1309c:	mov	r5, r0
   130a0:	str	r0, [sp, #56]	; 0x38
   130a4:	cmp	r5, #0
   130a8:	beq	13358 <__assert_fail@plt+0x1c54>
   130ac:	movw	r4, #12668	; 0x317c
   130b0:	movt	r4, #3
   130b4:	ldr	r1, [r4, #336]	; 0x150
   130b8:	cmp	r1, #0
   130bc:	blt	131cc <__assert_fail@plt+0x1ac8>
   130c0:	cmp	r1, #0
   130c4:	movw	r2, #11784	; 0x2e08
   130c8:	movt	r2, #1
   130cc:	mov	r0, r5
   130d0:	movw	r3, #11968	; 0x2ec0
   130d4:	movt	r3, #1
   130d8:	moveq	r3, r2
   130dc:	add	fp, fp, #1
   130e0:	blx	r3
   130e4:	ldr	r3, [sl, #8]
   130e8:	mov	r1, #0
   130ec:	ldr	r0, [sl, #12]
   130f0:	ldr	r4, [sp, #24]
   130f4:	sub	r3, r3, #-1073741823	; 0xc0000001
   130f8:	ldr	r2, [sp, #56]	; 0x38
   130fc:	ldr	r3, [r0, r3, lsl #2]
   13100:	mov	r0, r2
   13104:	str	r2, [r3, r4]
   13108:	bl	18d0c <__assert_fail@plt+0x7608>
   1310c:	ldm	sl, {r1, r6}
   13110:	ldr	r2, [r6, r4]
   13114:	ldr	r3, [r2, #16]
   13118:	cmp	r3, r0
   1311c:	movcs	r0, r3
   13120:	cmp	r1, fp
   13124:	str	r0, [r2, #16]
   13128:	bls	13324 <__assert_fail@plt+0x1c20>
   1312c:	ldr	r3, [r6, fp, lsl #2]
   13130:	lsl	r1, fp, #2
   13134:	mov	r4, #0
   13138:	mov	r2, #5
   1313c:	mov	r0, r4
   13140:	str	r1, [sp, #24]
   13144:	str	r4, [sp, #56]	; 0x38
   13148:	ldr	r1, [r3, #12]
   1314c:	bl	113bc <dcgettext@plt>
   13150:	ldr	r3, [r6, fp, lsl #2]
   13154:	mov	r5, r0
   13158:	ldr	r3, [r3]
   1315c:	cmp	r3, #2
   13160:	bne	13094 <__assert_fail@plt+0x1990>
   13164:	ldr	r3, [sl, #16]
   13168:	cmp	r3, r4
   1316c:	beq	131ec <__assert_fail@plt+0x1ae8>
   13170:	cmp	r3, #4
   13174:	beq	131e0 <__assert_fail@plt+0x1adc>
   13178:	cmp	r3, #3
   1317c:	bne	13094 <__assert_fail@plt+0x1990>
   13180:	add	r2, sp, #60	; 0x3c
   13184:	ldrd	r0, [sl, #24]
   13188:	bl	18188 <__assert_fail@plt+0x6a84>
   1318c:	mov	r6, r0
   13190:	mov	r2, #5
   13194:	movw	r1, #4896	; 0x1320
   13198:	movt	r1, #2
   1319c:	mov	r0, r4
   131a0:	bl	113bc <dcgettext@plt>
   131a4:	mov	r2, r0
   131a8:	mov	r3, r6
   131ac:	str	r5, [sp]
   131b0:	mov	r1, #1
   131b4:	add	r0, sp, #56	; 0x38
   131b8:	bl	114b8 <__asprintf_chk@plt>
   131bc:	cmn	r0, #1
   131c0:	streq	r4, [sp, #56]	; 0x38
   131c4:	ldr	r5, [sp, #56]	; 0x38
   131c8:	b	130a4 <__assert_fail@plt+0x19a0>
   131cc:	mov	r0, #1
   131d0:	bl	116c8 <isatty@plt>
   131d4:	mov	r1, r0
   131d8:	str	r0, [r4, #336]	; 0x150
   131dc:	b	130c0 <__assert_fail@plt+0x19bc>
   131e0:	ldr	r3, [sl, #20]
   131e4:	tst	r3, #16
   131e8:	bne	13094 <__assert_fail@plt+0x1990>
   131ec:	ldr	r1, [sl, #20]
   131f0:	str	fp, [sp, #36]	; 0x24
   131f4:	ldr	r3, [sl, #24]
   131f8:	ldr	r2, [sl, #28]
   131fc:	mov	r4, r3
   13200:	mov	r9, r3
   13204:	str	r1, [sp, #48]	; 0x30
   13208:	and	r1, r1, #292	; 0x124
   1320c:	str	r3, [sp, #28]
   13210:	mov	r8, r2
   13214:	mov	r7, r2
   13218:	str	r2, [sp, #32]
   1321c:	str	sl, [sp, #40]	; 0x28
   13220:	str	r1, [sp, #44]	; 0x2c
   13224:	mov	r0, r9
   13228:	mov	r1, r7
   1322c:	mov	r2, #1000	; 0x3e8
   13230:	mov	r3, #0
   13234:	bl	20f50 <__assert_fail@plt+0xf84c>
   13238:	mov	r6, r2
   1323c:	mov	r5, r3
   13240:	mov	r0, r9
   13244:	mov	r1, r7
   13248:	mov	r2, #1000	; 0x3e8
   1324c:	mov	r3, #0
   13250:	bl	20f50 <__assert_fail@plt+0xf84c>
   13254:	ubfx	r3, r4, #0, #10
   13258:	mov	fp, r5
   1325c:	mov	r9, r0
   13260:	lsr	r4, r4, #10
   13264:	mov	r7, r1
   13268:	orr	sl, r3, r6
   1326c:	orrs	r2, sl, fp
   13270:	orr	r4, r4, r8, lsl #22
   13274:	lsr	r8, r8, #10
   13278:	beq	13224 <__assert_fail@plt+0x1b20>
   1327c:	clz	r3, r3
   13280:	orrs	r2, r6, r5
   13284:	strd	sl, [sp, #16]
   13288:	lsr	r3, r3, #5
   1328c:	moveq	r2, #1
   13290:	movne	r2, #0
   13294:	ldr	fp, [sp, #36]	; 0x24
   13298:	cmp	r2, r3
   1329c:	ldr	sl, [sp, #40]	; 0x28
   132a0:	bcs	13340 <__assert_fail@plt+0x1c3c>
   132a4:	ldr	r3, [sp, #44]	; 0x2c
   132a8:	orr	r3, r3, #184	; 0xb8
   132ac:	tst	r3, #32
   132b0:	beq	13350 <__assert_fail@plt+0x1c4c>
   132b4:	mov	r4, #1
   132b8:	mov	r5, #0
   132bc:	ldrd	r0, [sp, #28]
   132c0:	add	r2, sp, #60	; 0x3c
   132c4:	strd	r4, [sp]
   132c8:	strd	r4, [sp, #8]
   132cc:	bl	170a8 <__assert_fail@plt+0x59a4>
   132d0:	mov	r5, r0
   132d4:	mov	r2, #5
   132d8:	ldr	r1, [sp, #52]	; 0x34
   132dc:	mov	r0, #0
   132e0:	bl	113bc <dcgettext@plt>
   132e4:	mov	r4, r0
   132e8:	mov	r2, #5
   132ec:	movw	r1, #4896	; 0x1320
   132f0:	movt	r1, #2
   132f4:	mov	r0, #0
   132f8:	bl	113bc <dcgettext@plt>
   132fc:	mov	r2, r0
   13300:	mov	r3, r5
   13304:	str	r4, [sp]
   13308:	mov	r1, #1
   1330c:	add	r0, sp, #56	; 0x38
   13310:	bl	114b8 <__asprintf_chk@plt>
   13314:	cmn	r0, #1
   13318:	moveq	r3, #0
   1331c:	streq	r3, [sp, #56]	; 0x38
   13320:	b	131c4 <__assert_fail@plt+0x1ac0>
   13324:	add	sp, sp, #716	; 0x2cc
   13328:	ldrd	r4, [sp]
   1332c:	ldrd	r6, [sp, #8]
   13330:	ldrd	r8, [sp, #16]
   13334:	ldrd	sl, [sp, #24]
   13338:	add	sp, sp, #32
   1333c:	pop	{pc}		; (ldr pc, [sp], #4)
   13340:	bls	1335c <__assert_fail@plt+0x1c58>
   13344:	ldr	r3, [sp, #48]	; 0x30
   13348:	and	r3, r3, #260	; 0x104
   1334c:	orr	r3, r3, #152	; 0x98
   13350:	orr	r3, r3, #256	; 0x100
   13354:	b	132b4 <__assert_fail@plt+0x1bb0>
   13358:	bl	1e22c <__assert_fail@plt+0xcb28>
   1335c:	ldr	r3, [sp, #44]	; 0x2c
   13360:	orr	r3, r3, #152	; 0x98
   13364:	b	132ac <__assert_fail@plt+0x1ba8>
   13368:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1336c:	strd	r6, [sp, #8]
   13370:	mov	r7, r0
   13374:	strd	r8, [sp, #16]
   13378:	mov	r9, r3
   1337c:	strd	sl, [sp, #24]
   13380:	movw	sl, #13120	; 0x3340
   13384:	movt	sl, #3
   13388:	str	lr, [sp, #32]
   1338c:	vpush	{d8-d11}
   13390:	sub	sp, sp, #932	; 0x3a4
   13394:	ldrb	r5, [sp, #1008]	; 0x3f0
   13398:	str	r1, [sp, #20]
   1339c:	ldrb	r3, [sp, #1004]	; 0x3ec
   133a0:	str	r2, [sp, #40]	; 0x28
   133a4:	ldrb	r8, [sp, #1016]	; 0x3f8
   133a8:	cmp	r5, #0
   133ac:	ldr	fp, [sp, #1000]	; 0x3e8
   133b0:	ldr	r4, [sp, #1012]	; 0x3f4
   133b4:	beq	133c4 <__assert_fail@plt+0x1cc0>
   133b8:	ldrb	r2, [sl, #32]
   133bc:	cmp	r2, #0
   133c0:	bne	13400 <__assert_fail@plt+0x1cfc>
   133c4:	cmp	r3, #0
   133c8:	bne	13420 <__assert_fail@plt+0x1d1c>
   133cc:	ldr	r6, [sl, #36]	; 0x24
   133d0:	cmp	r6, #0
   133d4:	beq	13444 <__assert_fail@plt+0x1d40>
   133d8:	cmp	fp, #0
   133dc:	beq	13474 <__assert_fail@plt+0x1d70>
   133e0:	mov	r0, fp
   133e4:	ldr	r1, [r6]
   133e8:	bl	11320 <strcmp@plt>
   133ec:	cmp	r0, #0
   133f0:	beq	13778 <__assert_fail@plt+0x2074>
   133f4:	ldr	r6, [r6, #4]
   133f8:	cmp	r6, #0
   133fc:	bne	133e0 <__assert_fail@plt+0x1cdc>
   13400:	add	sp, sp, #932	; 0x3a4
   13404:	vpop	{d8-d11}
   13408:	ldrd	r4, [sp]
   1340c:	ldrd	r6, [sp, #8]
   13410:	ldrd	r8, [sp, #16]
   13414:	ldrd	sl, [sp, #24]
   13418:	add	sp, sp, #32
   1341c:	pop	{pc}		; (ldr pc, [sp], #4)
   13420:	ldrb	r3, [sl, #33]	; 0x21
   13424:	cmp	r3, #0
   13428:	bne	133cc <__assert_fail@plt+0x1cc8>
   1342c:	ldrb	r3, [sl, #34]	; 0x22
   13430:	cmp	r3, #0
   13434:	beq	13400 <__assert_fail@plt+0x1cfc>
   13438:	ldr	r6, [sl, #36]	; 0x24
   1343c:	cmp	r6, #0
   13440:	bne	133d8 <__assert_fail@plt+0x1cd4>
   13444:	ldr	r6, [sl, #40]	; 0x28
   13448:	cmp	fp, #0
   1344c:	cmpne	r6, #0
   13450:	beq	13474 <__assert_fail@plt+0x1d70>
   13454:	mov	r0, fp
   13458:	ldr	r1, [r6]
   1345c:	bl	11320 <strcmp@plt>
   13460:	cmp	r0, #0
   13464:	beq	13400 <__assert_fail@plt+0x1cfc>
   13468:	ldr	r6, [r6, #4]
   1346c:	cmp	r6, #0
   13470:	bne	13454 <__assert_fail@plt+0x1d50>
   13474:	ldr	r2, [sp, #20]
   13478:	clz	r6, r4
   1347c:	lsr	r6, r6, #5
   13480:	cmp	r2, #0
   13484:	movne	r3, r6
   13488:	moveq	r3, #0
   1348c:	cmp	r3, #0
   13490:	bne	13788 <__assert_fail@plt+0x2084>
   13494:	cmp	r9, #0
   13498:	beq	13cc8 <__assert_fail@plt+0x25c4>
   1349c:	cmp	r4, #0
   134a0:	beq	1379c <__assert_fail@plt+0x2098>
   134a4:	ldrd	r0, [r4]
   134a8:	add	r5, sp, #96	; 0x60
   134ac:	ldrd	r2, [r4, #8]
   134b0:	strd	r0, [sp, #88]	; 0x58
   134b4:	ldrd	r0, [r4, #32]
   134b8:	orrs	ip, r2, r3
   134bc:	strd	r2, [sp, #96]	; 0x60
   134c0:	ldrd	r2, [r4, #24]
   134c4:	strd	r0, [sp, #120]	; 0x78
   134c8:	ldrd	r0, [r4, #16]
   134cc:	strd	r0, [sp, #104]	; 0x68
   134d0:	strd	r2, [sp, #112]	; 0x70
   134d4:	ldrd	r0, [r4, #40]	; 0x28
   134d8:	ldrd	r2, [r4, #48]	; 0x30
   134dc:	strd	r0, [sp, #128]	; 0x80
   134e0:	strd	r2, [sp, #136]	; 0x88
   134e4:	bne	13500 <__assert_fail@plt+0x1dfc>
   134e8:	ldrb	r3, [sl, #33]	; 0x21
   134ec:	cmp	r3, #0
   134f0:	bne	13500 <__assert_fail@plt+0x1dfc>
   134f4:	ldrb	r3, [sl, #34]	; 0x22
   134f8:	cmp	r3, #0
   134fc:	beq	13400 <__assert_fail@plt+0x1cfc>
   13500:	ldr	r3, [sl, #8]
   13504:	mov	r2, #4
   13508:	ldr	r0, [sl, #12]
   1350c:	add	r3, r3, #1
   13510:	mov	r1, r3
   13514:	str	r3, [sl, #8]
   13518:	bl	1dd58 <__assert_fail@plt+0xc654>
   1351c:	mov	r9, r0
   13520:	mov	r1, #4
   13524:	ldr	r0, [sl]
   13528:	ldr	r4, [sl, #8]
   1352c:	str	r9, [sl, #12]
   13530:	bl	1ddd8 <__assert_fail@plt+0xc6d4>
   13534:	ldr	r1, [sp, #40]	; 0x28
   13538:	cmp	r7, #0
   1353c:	movw	r3, #4904	; 0x1328
   13540:	movt	r3, #2
   13544:	sub	r4, r4, #-1073741823	; 0xc0000001
   13548:	str	r0, [r9, r4, lsl #2]
   1354c:	movne	r0, r7
   13550:	moveq	r0, r3
   13554:	subs	r2, r1, #0
   13558:	moveq	r2, r3
   1355c:	str	r2, [sp, #40]	; 0x28
   13560:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   13564:	cmp	r8, #0
   13568:	mov	r4, r0
   1356c:	str	r0, [sp, #44]	; 0x2c
   13570:	beq	1359c <__assert_fail@plt+0x1e98>
   13574:	bl	1153c <strlen@plt>
   13578:	cmp	r0, #36	; 0x24
   1357c:	bls	1359c <__assert_fail@plt+0x1e98>
   13580:	sub	r0, r0, #36	; 0x24
   13584:	movw	r1, #4908	; 0x132c
   13588:	movt	r1, #2
   1358c:	add	r0, r4, r0
   13590:	bl	116f8 <strspn@plt>
   13594:	cmp	r0, #36	; 0x24
   13598:	beq	13ca4 <__assert_fail@plt+0x25a0>
   1359c:	cmp	fp, #0
   135a0:	movw	r1, #4904	; 0x1328
   135a4:	movt	r1, #2
   135a8:	ldrd	r2, [r5, #32]
   135ac:	moveq	fp, r1
   135b0:	ldrd	r0, [r5, #40]	; 0x28
   135b4:	mov	r8, r2
   135b8:	mov	r9, r3
   135bc:	mvn	r3, #0
   135c0:	mvn	r2, #2
   135c4:	cmp	r9, r3
   135c8:	strd	r0, [sp, #24]
   135cc:	mov	r1, #0
   135d0:	cmpeq	r8, r2
   135d4:	strd	r8, [sp, #48]	; 0x30
   135d8:	mvn	r0, #0
   135dc:	strd	r8, [sp, #224]	; 0xe0
   135e0:	movhi	ip, r1
   135e4:	movls	ip, #1
   135e8:	ldrd	r8, [sp, #24]
   135ec:	strb	r1, [sp, #240]	; 0xf0
   135f0:	strb	r1, [sp, #264]	; 0x108
   135f4:	mvn	r1, #0
   135f8:	cmp	r9, r3
   135fc:	mov	r3, r9
   13600:	cmpeq	r8, r2
   13604:	mov	r2, r8
   13608:	movhi	ip, #0
   1360c:	andls	ip, ip, #1
   13610:	cmp	ip, #0
   13614:	add	ip, sp, #256	; 0x100
   13618:	strd	r2, [sp, #232]	; 0xe8
   1361c:	strd	r2, [sp, #248]	; 0xf8
   13620:	mov	r2, #1
   13624:	mov	r3, #0
   13628:	strd	r0, [ip]
   1362c:	strd	r2, [sp, #208]	; 0xd0
   13630:	strd	r2, [sp, #216]	; 0xd8
   13634:	bne	13b98 <__assert_fail@plt+0x2494>
   13638:	mvn	r3, #0
   1363c:	ldrb	lr, [sp, #120]	; 0x78
   13640:	mvn	r2, #2
   13644:	ldrd	r0, [r5, #16]
   13648:	ldr	ip, [r5, #-8]
   1364c:	ldrd	r8, [r5]
   13650:	cmp	r1, r3
   13654:	cmpeq	r0, r2
   13658:	ldr	r4, [r5, #-4]
   1365c:	movhi	lr, #0
   13660:	andls	lr, lr, #1
   13664:	strd	r0, [sp, #168]	; 0xa8
   13668:	cmp	r9, r3
   1366c:	strd	r8, [sp, #56]	; 0x38
   13670:	strd	r0, [sp, #64]	; 0x40
   13674:	cmpeq	r8, r2
   13678:	ldrd	r0, [r5, #8]
   1367c:	movls	r5, #1
   13680:	movhi	r5, #0
   13684:	cmp	r1, r3
   13688:	strd	r0, [sp, #32]
   1368c:	mvn	r1, #0
   13690:	cmpeq	r0, r2
   13694:	mov	r2, #0
   13698:	str	ip, [sp, #144]	; 0x90
   1369c:	movhi	r3, #0
   136a0:	andls	r3, r5, #1
   136a4:	str	r4, [sp, #148]	; 0x94
   136a8:	cmp	r3, r2
   136ac:	mvn	r0, #0
   136b0:	strd	r8, [sp, #160]	; 0xa0
   136b4:	strb	r2, [sp, #200]	; 0xc8
   136b8:	ldrd	r2, [sp, #32]
   136bc:	strb	lr, [sp, #176]	; 0xb0
   136c0:	strd	r2, [sp, #184]	; 0xb8
   136c4:	ldrd	r2, [sl, #24]
   136c8:	strd	r0, [sp, #192]	; 0xc0
   136cc:	strd	r2, [sp, #152]	; 0x98
   136d0:	bne	13b64 <__assert_fail@plt+0x2460>
   136d4:	ldrb	r3, [sl, #53]	; 0x35
   136d8:	tst	r6, r3
   136dc:	bne	13cd4 <__assert_fail@plt+0x25d0>
   136e0:	ldr	r3, [sl]
   136e4:	cmp	r3, #0
   136e8:	beq	13880 <__assert_fail@plt+0x217c>
   136ec:	vldr	d10, [pc, #1004]	; 13ae0 <__assert_fail@plt+0x23dc>
   136f0:	movw	r3, #4904	; 0x1328
   136f4:	movt	r3, #2
   136f8:	mov	r5, #0
   136fc:	mvn	r8, #2
   13700:	str	fp, [sp, #1000]	; 0x3e8
   13704:	vldr	d9, [pc, #988]	; 13ae8 <__assert_fail@plt+0x23e4>
   13708:	mvn	r9, #0
   1370c:	mov	fp, r3
   13710:	vldr	d8, [pc, #984]	; 13af0 <__assert_fail@plt+0x23ec>
   13714:	ldr	r2, [sl, #4]
   13718:	lsl	r4, r5, #2
   1371c:	ldr	r2, [r2, r5, lsl #2]
   13720:	ldr	r3, [r2, #8]
   13724:	cmp	r3, #1
   13728:	beq	13990 <__assert_fail@plt+0x228c>
   1372c:	cmp	r3, #0
   13730:	bne	13980 <__assert_fail@plt+0x227c>
   13734:	add	ip, sp, #144	; 0x90
   13738:	ldr	r3, [r2]
   1373c:	cmp	r3, #11
   13740:	ldrls	pc, [pc, r3, lsl #2]
   13744:	b	13f9c <__assert_fail@plt+0x2898>
   13748:	andeq	r3, r1, ip, ror #18
   1374c:	andeq	r3, r1, r8, asr r9
   13750:	andeq	r3, r1, r0, asr #18
   13754:	andeq	r3, r1, r4, lsr r9
   13758:	andeq	r3, r1, ip, asr #17
   1375c:	andeq	r3, r1, r0, lsr #17
   13760:	andeq	r3, r1, r0, asr #18
   13764:	andeq	r3, r1, r4, lsr r9
   13768:	andeq	r3, r1, ip, asr #17
   1376c:	andeq	r3, r1, r0, lsr #17
   13770:	andeq	r3, r1, ip, lsl #17
   13774:	strdeq	r3, [r1], -r8
   13778:	ldr	r6, [sl, #40]	; 0x28
   1377c:	cmp	r6, #0
   13780:	bne	13454 <__assert_fail@plt+0x1d50>
   13784:	b	13474 <__assert_fail@plt+0x1d70>
   13788:	ldrb	r3, [r2]
   1378c:	cmp	r3, #47	; 0x2f
   13790:	bne	13400 <__assert_fail@plt+0x1cfc>
   13794:	cmp	r9, #0
   13798:	moveq	r9, r2
   1379c:	add	r2, sp, #88	; 0x58
   137a0:	mov	r1, r7
   137a4:	mov	r0, r9
   137a8:	bl	15704 <__assert_fail@plt+0x4000>
   137ac:	cmp	r0, #0
   137b0:	bne	13c44 <__assert_fail@plt+0x2540>
   137b4:	cmp	r8, #0
   137b8:	beq	13e4c <__assert_fail@plt+0x2748>
   137bc:	ldrb	r3, [sl, #33]	; 0x21
   137c0:	cmp	r3, #0
   137c4:	bne	13ebc <__assert_fail@plt+0x27b8>
   137c8:	add	r5, sp, #96	; 0x60
   137cc:	ldrd	r2, [r5]
   137d0:	orrs	r3, r2, r3
   137d4:	bne	137ec <__assert_fail@plt+0x20e8>
   137d8:	ldrb	r3, [sl, #34]	; 0x22
   137dc:	cmp	r3, #0
   137e0:	beq	13400 <__assert_fail@plt+0x1cfc>
   137e4:	cmp	r4, #0
   137e8:	bne	13500 <__assert_fail@plt+0x1dfc>
   137ec:	mov	r3, #1
   137f0:	strb	r3, [sl, #52]	; 0x34
   137f4:	b	13500 <__assert_fail@plt+0x1dfc>
   137f8:	ldr	r0, [sp, #40]	; 0x28
   137fc:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   13800:	mov	r7, r0
   13804:	str	r0, [sp, #84]	; 0x54
   13808:	movw	r6, #12668	; 0x317c
   1380c:	movt	r6, #3
   13810:	ldr	r1, [r6, #336]	; 0x150
   13814:	cmp	r1, #0
   13818:	blt	13998 <__assert_fail@plt+0x2294>
   1381c:	cmp	r1, #0
   13820:	movw	r2, #11784	; 0x2e08
   13824:	movt	r2, #1
   13828:	mov	r0, r7
   1382c:	movw	r3, #11968	; 0x2ec0
   13830:	movt	r3, #1
   13834:	moveq	r3, r2
   13838:	add	r5, r5, #1
   1383c:	blx	r3
   13840:	mov	r1, #0
   13844:	ldr	r0, [sp, #84]	; 0x54
   13848:	bl	18d0c <__assert_fail@plt+0x7608>
   1384c:	ldmib	sl, {r2, ip, lr}
   13850:	ldr	r1, [r2, r4]
   13854:	sub	ip, ip, #-1073741823	; 0xc0000001
   13858:	ldr	ip, [lr, ip, lsl #2]
   1385c:	ldr	lr, [sl]
   13860:	ldr	r3, [r1, #16]
   13864:	cmp	r3, r0
   13868:	movcs	r0, r3
   1386c:	ldr	r3, [sp, #84]	; 0x54
   13870:	cmp	lr, r5
   13874:	str	r0, [r1, #16]
   13878:	str	r3, [ip, r4]
   1387c:	bhi	13718 <__assert_fail@plt+0x2014>
   13880:	ldr	r0, [sp, #44]	; 0x2c
   13884:	bl	156a4 <__assert_fail@plt+0x3fa0>
   13888:	b	13400 <__assert_fail@plt+0x1cfc>
   1388c:	ldr	r0, [sp, #20]
   13890:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   13894:	mov	r7, r0
   13898:	str	r0, [sp, #84]	; 0x54
   1389c:	b	13808 <__assert_fail@plt+0x2104>
   138a0:	ldrd	r6, [ip, #48]	; 0x30
   138a4:	cmp	r7, r9
   138a8:	cmpeq	r6, r8
   138ac:	bls	139d4 <__assert_fail@plt+0x22d0>
   138b0:	mov	r0, fp
   138b4:	bl	113c8 <strdup@plt>
   138b8:	mov	r7, r0
   138bc:	str	r0, [sp, #84]	; 0x54
   138c0:	cmp	r7, #0
   138c4:	bne	13808 <__assert_fail@plt+0x2104>
   138c8:	b	13b2c <__assert_fail@plt+0x2428>
   138cc:	ldrb	r2, [ip, #32]
   138d0:	ldrd	r0, [ip, #24]
   138d4:	cmp	r1, r9
   138d8:	ldrd	r6, [ip]
   138dc:	cmpeq	r0, r8
   138e0:	strd	r6, [sp, #24]
   138e4:	ldrd	r6, [ip, #8]
   138e8:	strd	r6, [sp, #32]
   138ec:	bls	139ac <__assert_fail@plt+0x22a8>
   138f0:	cmp	r2, #0
   138f4:	beq	13950 <__assert_fail@plt+0x224c>
   138f8:	ldr	r3, [sl, #20]
   138fc:	rsbs	r0, r0, #0
   13900:	add	ip, sp, #272	; 0x110
   13904:	ldrd	r6, [sp, #24]
   13908:	add	r2, ip, r2
   1390c:	rsc	r1, r1, #0
   13910:	strd	r6, [sp]
   13914:	ldrd	r6, [sp, #32]
   13918:	strd	r6, [sp, #8]
   1391c:	bl	170a8 <__assert_fail@plt+0x59a4>
   13920:	mov	r3, r0
   13924:	mov	r2, #45	; 0x2d
   13928:	sub	r0, r0, #1
   1392c:	strb	r2, [r3, #-1]
   13930:	b	137fc <__assert_fail@plt+0x20f8>
   13934:	ldrb	r2, [ip, #56]	; 0x38
   13938:	ldrd	r0, [ip, #48]	; 0x30
   1393c:	b	138d4 <__assert_fail@plt+0x21d0>
   13940:	ldrd	r0, [ip, #16]
   13944:	cmp	r1, r9
   13948:	cmpeq	r0, r8
   1394c:	bls	13b04 <__assert_fail@plt+0x2400>
   13950:	mov	r0, fp
   13954:	b	137fc <__assert_fail@plt+0x20f8>
   13958:	ldr	r0, [sp, #1000]	; 0x3e8
   1395c:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   13960:	mov	r7, r0
   13964:	str	r0, [sp, #84]	; 0x54
   13968:	b	13808 <__assert_fail@plt+0x2104>
   1396c:	ldr	r0, [sp, #44]	; 0x2c
   13970:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   13974:	mov	r7, r0
   13978:	str	r0, [sp, #84]	; 0x54
   1397c:	b	13808 <__assert_fail@plt+0x2104>
   13980:	cmp	r3, #2
   13984:	bne	13ea0 <__assert_fail@plt+0x279c>
   13988:	mov	ip, #0
   1398c:	b	13738 <__assert_fail@plt+0x2034>
   13990:	add	ip, sp, #208	; 0xd0
   13994:	b	13738 <__assert_fail@plt+0x2034>
   13998:	mov	r0, #1
   1399c:	bl	116c8 <isatty@plt>
   139a0:	mov	r1, r0
   139a4:	str	r0, [r6, #336]	; 0x150
   139a8:	b	1381c <__assert_fail@plt+0x2118>
   139ac:	cmp	r2, #0
   139b0:	ldr	r3, [sl, #20]
   139b4:	bne	138fc <__assert_fail@plt+0x21f8>
   139b8:	ldrd	r6, [sp, #24]
   139bc:	add	r2, sp, #272	; 0x110
   139c0:	strd	r6, [sp]
   139c4:	ldrd	r6, [sp, #32]
   139c8:	strd	r6, [sp, #8]
   139cc:	bl	170a8 <__assert_fail@plt+0x59a4>
   139d0:	b	137fc <__assert_fail@plt+0x20f8>
   139d4:	ldrd	r2, [ip, #24]
   139d8:	cmp	r3, r9
   139dc:	cmpeq	r2, r8
   139e0:	bhi	138b0 <__assert_fail@plt+0x21ac>
   139e4:	ldrb	r1, [ip, #56]	; 0x38
   139e8:	ldrb	r0, [ip, #32]
   139ec:	cmp	r1, #0
   139f0:	str	r0, [sp, #24]
   139f4:	bne	13b44 <__assert_fail@plt+0x2440>
   139f8:	add	r1, pc, #248	; 0xf8
   139fc:	ldrd	r0, [r1]
   13a00:	cmp	r7, r1
   13a04:	cmpeq	r6, r0
   13a08:	bhi	13a30 <__assert_fail@plt+0x232c>
   13a0c:	adds	r0, r6, r2
   13a10:	mov	ip, #0
   13a14:	adcs	r1, r7, r3
   13a18:	mov	lr, ip
   13a1c:	movcs	ip, #1
   13a20:	strd	r0, [sp, #32]
   13a24:	ldrd	r0, [sp, #32]
   13a28:	orrs	r1, r0, r1
   13a2c:	bne	13bc4 <__assert_fail@plt+0x24c0>
   13a30:	mov	r0, r6
   13a34:	mov	r1, r7
   13a38:	strd	r2, [sp, #32]
   13a3c:	bl	20edc <__assert_fail@plt+0xf7d8>
   13a40:	vmov	d11, r0, r1
   13a44:	ldrd	r2, [sp, #32]
   13a48:	ldr	r1, [sp, #24]
   13a4c:	cmp	r1, #0
   13a50:	beq	13b30 <__assert_fail@plt+0x242c>
   13a54:	rsbs	r0, r2, #0
   13a58:	rsc	r1, r3, #0
   13a5c:	bl	20edc <__assert_fail@plt+0xf7d8>
   13a60:	vmov	d7, r0, r1
   13a64:	vneg.f64	d6, d7
   13a68:	vadd.f64	d6, d11, d6
   13a6c:	vcmp.f64	d6, #0.0
   13a70:	vmrs	APSR_nzcv, fpscr
   13a74:	beq	138b0 <__assert_fail@plt+0x21ac>
   13a78:	vmul.f64	d11, d11, d9
   13a7c:	vdiv.f64	d7, d11, d6
   13a80:	vcvt.s32.f64	s12, d7
   13a84:	vcvt.f64.s32	d6, s12
   13a88:	vsub.f64	d5, d6, d8
   13a8c:	vcmpe.f64	d5, d7
   13a90:	vmrs	APSR_nzcv, fpscr
   13a94:	bpl	13aa8 <__assert_fail@plt+0x23a4>
   13a98:	vadd.f64	d5, d6, d8
   13a9c:	vcmpe.f64	d5, d7
   13aa0:	vmrs	APSR_nzcv, fpscr
   13aa4:	bge	13c30 <__assert_fail@plt+0x252c>
   13aa8:	vcmpe.f64	d7, #0.0
   13aac:	vmrs	APSR_nzcv, fpscr
   13ab0:	blt	138b0 <__assert_fail@plt+0x21ac>
   13ab4:	movw	r2, #4952	; 0x1358
   13ab8:	movt	r2, #2
   13abc:	vstr	d7, [sp]
   13ac0:	mov	r1, #1
   13ac4:	add	r0, sp, #84	; 0x54
   13ac8:	bl	114b8 <__asprintf_chk@plt>
   13acc:	cmn	r0, #1
   13ad0:	beq	13b24 <__assert_fail@plt+0x2420>
   13ad4:	ldr	r7, [sp, #84]	; 0x54
   13ad8:	b	138c0 <__assert_fail@plt+0x21bc>
   13adc:	nop	{0}
	...
   13aec:	subsmi	r0, r9, r0
   13af0:	andeq	r0, r0, r0
   13af4:	svccc	0x00f00000	; IMB
   13af8:			; <UNDEFINED> instruction: 0xf5c28f5c
   13afc:	addeq	r5, pc, #40, 24	; 0x2800
   13b00:	muleq	r2, ip, r1
   13b04:	ldrd	r6, [ip, #8]
   13b08:	add	r2, sp, #272	; 0x110
   13b0c:	ldr	r3, [sl, #20]
   13b10:	strd	r6, [sp, #8]
   13b14:	ldrd	r6, [ip]
   13b18:	strd	r6, [sp]
   13b1c:	bl	170a8 <__assert_fail@plt+0x59a4>
   13b20:	b	137fc <__assert_fail@plt+0x20f8>
   13b24:	mov	r3, #0
   13b28:	str	r3, [sp, #84]	; 0x54
   13b2c:	bl	1e22c <__assert_fail@plt+0xcb28>
   13b30:	mov	r0, r2
   13b34:	mov	r1, r3
   13b38:	bl	20edc <__assert_fail@plt+0xf7d8>
   13b3c:	vmov	d6, r0, r1
   13b40:	b	13a68 <__assert_fail@plt+0x2364>
   13b44:	rsbs	r0, r6, #0
   13b48:	strd	r2, [sp, #32]
   13b4c:	rsc	r1, r7, #0
   13b50:	bl	20edc <__assert_fail@plt+0xf7d8>
   13b54:	vmov	d7, r0, r1
   13b58:	ldrd	r2, [sp, #32]
   13b5c:	vneg.f64	d11, d7
   13b60:	b	13a48 <__assert_fail@plt+0x2344>
   13b64:	mov	r0, r8
   13b68:	mov	r1, r9
   13b6c:	ldrd	r8, [sp, #32]
   13b70:	subs	r3, r0, r8
   13b74:	sbc	r2, r1, r9
   13b78:	cmp	r1, r9
   13b7c:	cmpeq	r0, r8
   13b80:	str	r3, [sp, #192]	; 0xc0
   13b84:	movcc	r3, #1
   13b88:	movcs	r3, #0
   13b8c:	str	r2, [sp, #196]	; 0xc4
   13b90:	strb	r3, [sp, #200]	; 0xc8
   13b94:	b	136d4 <__assert_fail@plt+0x1fd0>
   13b98:	ldrd	r0, [sp, #48]	; 0x30
   13b9c:	subs	r3, r0, r8
   13ba0:	sbc	r2, r1, r9
   13ba4:	cmp	r1, r9
   13ba8:	cmpeq	r0, r8
   13bac:	str	r3, [sp, #256]	; 0x100
   13bb0:	movcc	r3, #1
   13bb4:	movcs	r3, #0
   13bb8:	str	r2, [sp, #260]	; 0x104
   13bbc:	strb	r3, [sp, #264]	; 0x108
   13bc0:	b	13638 <__assert_fail@plt+0x1f34>
   13bc4:	ldr	r0, [sp, #24]
   13bc8:	orrs	r1, lr, ip
   13bcc:	movne	r1, #1
   13bd0:	moveq	r1, #0
   13bd4:	cmp	r1, r0
   13bd8:	bne	13a30 <__assert_fail@plt+0x232c>
   13bdc:	adds	r1, r6, r6
   13be0:	ldrd	r2, [sp, #32]
   13be4:	adc	lr, r7, r7
   13be8:	adds	r1, r1, r6
   13bec:	adc	lr, lr, r7
   13bf0:	lsl	r0, r1, #5
   13bf4:	lsl	ip, lr, #5
   13bf8:	adds	r0, r1, r0
   13bfc:	orr	ip, ip, r1, lsr #27
   13c00:	adc	r1, lr, ip
   13c04:	adds	r0, r0, r6
   13c08:	adc	r1, r1, r7
   13c0c:	bl	20f50 <__assert_fail@plt+0xf84c>
   13c10:	orrs	r3, r2, r3
   13c14:	movne	r3, #1
   13c18:	moveq	r3, #0
   13c1c:	adds	r0, r0, r3
   13c20:	adc	r1, r1, #0
   13c24:	bl	20edc <__assert_fail@plt+0xf7d8>
   13c28:	vmov	d7, r0, r1
   13c2c:	b	13aa8 <__assert_fail@plt+0x23a4>
   13c30:	vcmpe.f64	d7, d6
   13c34:	vmrs	APSR_nzcv, fpscr
   13c38:	vaddle.f64	d7, d6, d10
   13c3c:	vmovgt.f64	d7, d5
   13c40:	b	13aa8 <__assert_fail@plt+0x23a4>
   13c44:	bl	1156c <__errno_location@plt>
   13c48:	cmp	r8, #0
   13c4c:	ldr	r4, [r0]
   13c50:	beq	13e6c <__assert_fail@plt+0x2768>
   13c54:	cmp	r4, #2
   13c58:	cmpne	r4, #13
   13c5c:	bne	13e6c <__assert_fail@plt+0x2768>
   13c60:	ldrb	r3, [sl, #33]	; 0x21
   13c64:	cmp	r3, #0
   13c68:	beq	13400 <__assert_fail@plt+0x1cfc>
   13c6c:	add	r5, sp, #96	; 0x60
   13c70:	mvn	r2, #0
   13c74:	mvn	r3, #0
   13c78:	mov	r1, #0
   13c7c:	movw	fp, #4904	; 0x1328
   13c80:	movt	fp, #2
   13c84:	strd	r2, [r5, #-8]
   13c88:	strd	r2, [r5]
   13c8c:	strd	r2, [r5, #8]
   13c90:	strd	r2, [r5, #16]
   13c94:	strd	r2, [r5, #32]
   13c98:	strd	r2, [r5, #40]	; 0x28
   13c9c:	strb	r1, [sp, #120]	; 0x78
   13ca0:	b	137ec <__assert_fail@plt+0x20e8>
   13ca4:	mov	r0, r4
   13ca8:	mov	r1, #0
   13cac:	bl	14b68 <__assert_fail@plt+0x3464>
   13cb0:	subs	r3, r0, #0
   13cb4:	beq	1359c <__assert_fail@plt+0x1e98>
   13cb8:	ldr	r0, [sp, #44]	; 0x2c
   13cbc:	str	r3, [sp, #44]	; 0x2c
   13cc0:	bl	156a4 <__assert_fail@plt+0x3fa0>
   13cc4:	b	1359c <__assert_fail@plt+0x1e98>
   13cc8:	subs	r9, r2, #0
   13ccc:	moveq	r9, r7
   13cd0:	b	1349c <__assert_fail@plt+0x1d98>
   13cd4:	ldrd	r0, [sp, #48]	; 0x30
   13cd8:	mvn	r3, #0
   13cdc:	mvn	r2, #2
   13ce0:	cmp	r1, r3
   13ce4:	cmpeq	r0, r2
   13ce8:	bhi	13d04 <__assert_fail@plt+0x2600>
   13cec:	ldr	r3, [sl, #96]	; 0x60
   13cf0:	ldr	r2, [sl, #100]	; 0x64
   13cf4:	adds	r3, r3, r0
   13cf8:	adc	r2, r2, r1
   13cfc:	str	r3, [sl, #96]	; 0x60
   13d00:	str	r2, [sl, #100]	; 0x64
   13d04:	ldrd	r0, [sp, #24]
   13d08:	mvn	r3, #0
   13d0c:	mvn	r2, #2
   13d10:	cmp	r1, r3
   13d14:	cmpeq	r0, r2
   13d18:	bhi	13d34 <__assert_fail@plt+0x2630>
   13d1c:	ldr	r3, [sl, #104]	; 0x68
   13d20:	ldr	r2, [sl, #108]	; 0x6c
   13d24:	adds	r3, r3, r0
   13d28:	adc	r2, r2, r1
   13d2c:	str	r3, [sl, #104]	; 0x68
   13d30:	str	r2, [sl, #108]	; 0x6c
   13d34:	ldrd	r6, [sp, #56]	; 0x38
   13d38:	mvn	r3, #0
   13d3c:	mvn	r2, #2
   13d40:	cmp	r7, r3
   13d44:	cmpeq	r6, r2
   13d48:	bhi	13d74 <__assert_fail@plt+0x2670>
   13d4c:	mul	r3, ip, r7
   13d50:	ldr	r2, [sl, #64]	; 0x40
   13d54:	umull	r0, r1, ip, r6
   13d58:	ldr	r5, [sl, #68]	; 0x44
   13d5c:	mla	r3, r4, r6, r3
   13d60:	add	r1, r3, r1
   13d64:	adds	r3, r2, r0
   13d68:	adc	r2, r5, r1
   13d6c:	str	r3, [sl, #64]	; 0x40
   13d70:	str	r2, [sl, #68]	; 0x44
   13d74:	ldrd	r6, [sp, #32]
   13d78:	mvn	r3, #0
   13d7c:	mvn	r2, #2
   13d80:	cmp	r7, r3
   13d84:	cmpeq	r6, r2
   13d88:	bhi	13db4 <__assert_fail@plt+0x26b0>
   13d8c:	mul	r1, ip, r7
   13d90:	ldr	r0, [sl, #72]	; 0x48
   13d94:	umull	r2, r3, ip, r6
   13d98:	ldr	r5, [sl, #76]	; 0x4c
   13d9c:	mla	r1, r4, r6, r1
   13da0:	adds	r0, r0, r2
   13da4:	add	r3, r1, r3
   13da8:	adc	r5, r5, r3
   13dac:	str	r0, [sl, #72]	; 0x48
   13db0:	str	r5, [sl, #76]	; 0x4c
   13db4:	ldrd	r0, [sp, #64]	; 0x40
   13db8:	mvn	r3, #0
   13dbc:	mvn	r2, #2
   13dc0:	cmp	r1, r3
   13dc4:	cmpeq	r0, r2
   13dc8:	bhi	136e0 <__assert_fail@plt+0x1fdc>
   13dcc:	mul	r1, ip, r1
   13dd0:	ldrb	r5, [sl, #88]	; 0x58
   13dd4:	mov	r2, r0
   13dd8:	umull	r6, r7, ip, r2
   13ddc:	mla	r4, r4, r2, r1
   13de0:	ldrd	r0, [sl, #80]	; 0x50
   13de4:	cmp	r5, lr
   13de8:	add	r7, r4, r7
   13dec:	beq	13f8c <__assert_fail@plt+0x2888>
   13df0:	cmp	r5, #0
   13df4:	beq	13e04 <__assert_fail@plt+0x2700>
   13df8:	rsbs	r0, r0, #0
   13dfc:	rsc	r1, r1, #0
   13e00:	strd	r0, [sl, #80]	; 0x50
   13e04:	cmp	lr, #0
   13e08:	beq	13e14 <__assert_fail@plt+0x2710>
   13e0c:	rsbs	r6, r6, #0
   13e10:	rsc	r7, r7, #0
   13e14:	cmp	r7, r1
   13e18:	cmpeq	r6, r0
   13e1c:	bcs	13f70 <__assert_fail@plt+0x286c>
   13e20:	subs	r3, r0, r6
   13e24:	str	r3, [sp, #72]	; 0x48
   13e28:	sbc	r3, r1, r7
   13e2c:	str	r3, [sp, #76]	; 0x4c
   13e30:	cmp	r5, #0
   13e34:	ldrd	r2, [sp, #72]	; 0x48
   13e38:	beq	13e44 <__assert_fail@plt+0x2740>
   13e3c:	rsbs	r2, r2, #0
   13e40:	rsc	r3, r3, #0
   13e44:	strd	r2, [sl, #80]	; 0x50
   13e48:	b	136e0 <__assert_fail@plt+0x1fdc>
   13e4c:	add	r5, sp, #96	; 0x60
   13e50:	ldrd	r2, [r5]
   13e54:	orrs	r3, r2, r3
   13e58:	bne	137ec <__assert_fail@plt+0x20e8>
   13e5c:	ldrb	r3, [sl, #33]	; 0x21
   13e60:	cmp	r3, #0
   13e64:	bne	137ec <__assert_fail@plt+0x20e8>
   13e68:	b	137d8 <__assert_fail@plt+0x20d4>
   13e6c:	mov	r2, r9
   13e70:	mov	r1, #3
   13e74:	mov	r0, #0
   13e78:	bl	1c978 <__assert_fail@plt+0xb274>
   13e7c:	mov	r3, r0
   13e80:	mov	r1, r4
   13e84:	movw	r2, #8780	; 0x224c
   13e88:	movt	r2, #2
   13e8c:	mov	r0, #0
   13e90:	bl	11494 <error@plt>
   13e94:	mov	r3, #1
   13e98:	str	r3, [sl, #44]	; 0x2c
   13e9c:	b	13400 <__assert_fail@plt+0x1cfc>
   13ea0:	movw	r1, #4860	; 0x12fc
   13ea4:	movt	r1, #2
   13ea8:	ldr	r3, [pc, #-944]	; 13b00 <__assert_fail@plt+0x23fc>
   13eac:	movw	r0, #4932	; 0x1344
   13eb0:	movt	r0, #2
   13eb4:	movw	r2, #1158	; 0x486
   13eb8:	bl	11704 <__assert_fail@plt>
   13ebc:	mov	r1, r9
   13ec0:	add	r2, sp, #272	; 0x110
   13ec4:	mov	r0, #3
   13ec8:	bl	116bc <__xstat64@plt>
   13ecc:	cmp	r0, #0
   13ed0:	bne	13e4c <__assert_fail@plt+0x2748>
   13ed4:	ldr	r0, [sl, #48]	; 0x30
   13ed8:	add	r3, sp, #272	; 0x110
   13edc:	ldrd	r2, [r3]
   13ee0:	cmp	r0, #0
   13ee4:	beq	13e4c <__assert_fail@plt+0x2748>
   13ee8:	add	r1, sp, #208	; 0xd0
   13eec:	strd	r2, [sp, #208]	; 0xd0
   13ef0:	bl	15e78 <__assert_fail@plt+0x4774>
   13ef4:	cmp	r0, #0
   13ef8:	beq	13e4c <__assert_fail@plt+0x2748>
   13efc:	ldr	r3, [r0, #16]
   13f00:	cmp	r3, #0
   13f04:	beq	13e4c <__assert_fail@plt+0x2748>
   13f08:	ldr	r9, [r3, #8]
   13f0c:	cmp	r9, #0
   13f10:	beq	13e4c <__assert_fail@plt+0x2748>
   13f14:	mov	r1, r7
   13f18:	ldr	r0, [r9]
   13f1c:	bl	11320 <strcmp@plt>
   13f20:	cmp	r0, #0
   13f24:	beq	13e4c <__assert_fail@plt+0x2748>
   13f28:	ldrb	r3, [r9, #24]
   13f2c:	ubfx	r3, r3, #1, #1
   13f30:	tst	r5, r3
   13f34:	bne	13e4c <__assert_fail@plt+0x2748>
   13f38:	add	r5, sp, #96	; 0x60
   13f3c:	mvn	r2, #0
   13f40:	mvn	r3, #0
   13f44:	mov	r1, #0
   13f48:	movw	fp, #4904	; 0x1328
   13f4c:	movt	fp, #2
   13f50:	strd	r2, [r5, #-8]
   13f54:	strd	r2, [r5]
   13f58:	strd	r2, [r5, #8]
   13f5c:	strd	r2, [r5, #16]
   13f60:	strd	r2, [r5, #32]
   13f64:	strd	r2, [r5, #40]	; 0x28
   13f68:	strb	r1, [sp, #120]	; 0x78
   13f6c:	b	13e50 <__assert_fail@plt+0x274c>
   13f70:	subs	r3, r6, r0
   13f74:	mov	r5, lr
   13f78:	strb	lr, [sl, #88]	; 0x58
   13f7c:	str	r3, [sp, #72]	; 0x48
   13f80:	sbc	r3, r7, r1
   13f84:	str	r3, [sp, #76]	; 0x4c
   13f88:	b	13e30 <__assert_fail@plt+0x272c>
   13f8c:	adds	r2, r6, r0
   13f90:	adc	r3, r7, r1
   13f94:	strd	r2, [sl, #80]	; 0x50
   13f98:	b	136e0 <__assert_fail@plt+0x1fdc>
   13f9c:	movw	r1, #4860	; 0x12fc
   13fa0:	movt	r1, #2
   13fa4:	ldr	r3, [pc, #-1196]	; 13b00 <__assert_fail@plt+0x23fc>
   13fa8:	movw	r0, #4960	; 0x1360
   13fac:	movt	r0, #2
   13fb0:	movw	r2, #1260	; 0x4ec
   13fb4:	bl	11704 <__assert_fail@plt>
   13fb8:	subs	r4, r0, #0
   13fbc:	str	r7, [sp, #-8]!
   13fc0:	str	lr, [sp, #4]
   13fc4:	sub	sp, sp, #56	; 0x38
   13fc8:	beq	14010 <__assert_fail@plt+0x290c>
   13fcc:	movw	r3, #13104	; 0x3330
   13fd0:	movt	r3, #3
   13fd4:	ldr	r5, [r3]
   13fd8:	mov	r2, #5
   13fdc:	movw	r1, #4984	; 0x1378
   13fe0:	movt	r1, #2
   13fe4:	mov	r0, #0
   13fe8:	bl	113bc <dcgettext@plt>
   13fec:	movw	r3, #13248	; 0x33c0
   13ff0:	movt	r3, #3
   13ff4:	mov	r2, r0
   13ff8:	mov	r1, #1
   13ffc:	ldr	r3, [r3]
   14000:	mov	r0, r5
   14004:	bl	115c0 <__fprintf_chk@plt>
   14008:	mov	r0, r4
   1400c:	bl	11530 <exit@plt>
   14010:	mov	r2, #5
   14014:	movw	r1, #5024	; 0x13a0
   14018:	movt	r1, #2
   1401c:	movw	r5, #13108	; 0x3334
   14020:	movt	r5, #3
   14024:	bl	113bc <dcgettext@plt>
   14028:	movw	r3, #13248	; 0x33c0
   1402c:	movt	r3, #3
   14030:	mov	r1, r0
   14034:	mov	r0, #1
   14038:	ldr	r2, [r3]
   1403c:	bl	1159c <__printf_chk@plt>
   14040:	mov	r2, #5
   14044:	movw	r1, #5060	; 0x13c4
   14048:	movt	r1, #2
   1404c:	mov	r0, r4
   14050:	bl	113bc <dcgettext@plt>
   14054:	ldr	r1, [r5]
   14058:	bl	112f0 <fputs_unlocked@plt>
   1405c:	mov	r2, #5
   14060:	movw	r1, #5160	; 0x1428
   14064:	movt	r1, #2
   14068:	mov	r0, r4
   1406c:	bl	113bc <dcgettext@plt>
   14070:	ldr	r1, [r5]
   14074:	bl	112f0 <fputs_unlocked@plt>
   14078:	mov	r2, #5
   1407c:	movw	r1, #5236	; 0x1474
   14080:	movt	r1, #2
   14084:	mov	r0, r4
   14088:	bl	113bc <dcgettext@plt>
   1408c:	ldr	r1, [r5]
   14090:	bl	112f0 <fputs_unlocked@plt>
   14094:	mov	r2, #5
   14098:	movw	r1, #5648	; 0x1610
   1409c:	movt	r1, #2
   140a0:	mov	r0, r4
   140a4:	bl	113bc <dcgettext@plt>
   140a8:	ldr	r1, [r5]
   140ac:	bl	112f0 <fputs_unlocked@plt>
   140b0:	mov	r2, #5
   140b4:	movw	r1, #5904	; 0x1710
   140b8:	movt	r1, #2
   140bc:	mov	r0, r4
   140c0:	bl	113bc <dcgettext@plt>
   140c4:	ldr	r1, [r5]
   140c8:	bl	112f0 <fputs_unlocked@plt>
   140cc:	mov	r2, #5
   140d0:	movw	r1, #6172	; 0x181c
   140d4:	movt	r1, #2
   140d8:	mov	r0, r4
   140dc:	bl	113bc <dcgettext@plt>
   140e0:	ldr	r1, [r5]
   140e4:	bl	112f0 <fputs_unlocked@plt>
   140e8:	mov	r2, #5
   140ec:	movw	r1, #6304	; 0x18a0
   140f0:	movt	r1, #2
   140f4:	mov	r0, r4
   140f8:	bl	113bc <dcgettext@plt>
   140fc:	ldr	r1, [r5]
   14100:	bl	112f0 <fputs_unlocked@plt>
   14104:	mov	r2, #5
   14108:	movw	r1, #6528	; 0x1980
   1410c:	movt	r1, #2
   14110:	mov	r0, r4
   14114:	bl	113bc <dcgettext@plt>
   14118:	ldr	r1, [r5]
   1411c:	bl	112f0 <fputs_unlocked@plt>
   14120:	mov	r2, #5
   14124:	movw	r1, #6576	; 0x19b0
   14128:	movt	r1, #2
   1412c:	mov	r0, r4
   14130:	bl	113bc <dcgettext@plt>
   14134:	ldr	r1, [r5]
   14138:	bl	112f0 <fputs_unlocked@plt>
   1413c:	mov	r2, #5
   14140:	movw	r1, #6632	; 0x19e8
   14144:	movt	r1, #2
   14148:	mov	r0, r4
   1414c:	bl	113bc <dcgettext@plt>
   14150:	mov	r1, r0
   14154:	movw	r2, #6856	; 0x1ac8
   14158:	movt	r2, #2
   1415c:	mov	r0, #1
   14160:	bl	1159c <__printf_chk@plt>
   14164:	mov	r2, #5
   14168:	movw	r1, #6860	; 0x1acc
   1416c:	movt	r1, #2
   14170:	mov	r0, r4
   14174:	bl	113bc <dcgettext@plt>
   14178:	ldr	r1, [r5]
   1417c:	bl	112f0 <fputs_unlocked@plt>
   14180:	mov	r2, #5
   14184:	movw	r1, #7072	; 0x1ba0
   14188:	movt	r1, #2
   1418c:	mov	r0, r4
   14190:	bl	113bc <dcgettext@plt>
   14194:	ldr	r1, [r5]
   14198:	bl	112f0 <fputs_unlocked@plt>
   1419c:	movw	r0, #4496	; 0x1190
   141a0:	movt	r0, #2
   141a4:	ldr	ip, [r0, #20]
   141a8:	ldrd	r2, [r0, #28]
   141ac:	ldr	r6, [r0, #24]
   141b0:	subs	r1, ip, #0
   141b4:	str	ip, [sp]
   141b8:	ldrd	r8, [r0, #36]	; 0x24
   141bc:	strd	r2, [sp, #8]
   141c0:	ldrd	r2, [r0, #44]	; 0x2c
   141c4:	str	r6, [sp, #4]
   141c8:	ldrd	r6, [r0, #52]	; 0x34
   141cc:	strd	r8, [sp, #16]
   141d0:	ldrd	r8, [r0, #60]	; 0x3c
   141d4:	strd	r2, [sp, #24]
   141d8:	ldrd	r2, [r0, #68]	; 0x44
   141dc:	strd	r6, [sp, #32]
   141e0:	movwne	r7, #4980	; 0x1374
   141e4:	mov	r6, sp
   141e8:	movtne	r7, #2
   141ec:	strd	r8, [sp, #40]	; 0x28
   141f0:	strd	r2, [sp, #48]	; 0x30
   141f4:	bne	142ec <__assert_fail@plt+0x2be8>
   141f8:	ldr	r6, [r6, #4]
   141fc:	movw	r1, #7292	; 0x1c7c
   14200:	movt	r1, #2
   14204:	mov	r2, #5
   14208:	cmp	r6, #0
   1420c:	beq	14300 <__assert_fail@plt+0x2bfc>
   14210:	mov	r0, #0
   14214:	bl	113bc <dcgettext@plt>
   14218:	mov	r1, r0
   1421c:	movw	r3, #7316	; 0x1c94
   14220:	movt	r3, #2
   14224:	movw	r2, #7356	; 0x1cbc
   14228:	movt	r2, #2
   1422c:	mov	r0, #1
   14230:	bl	1159c <__printf_chk@plt>
   14234:	mov	r1, #0
   14238:	mov	r0, #5
   1423c:	bl	11614 <setlocale@plt>
   14240:	cmp	r0, #0
   14244:	movweq	r7, #4980	; 0x1374
   14248:	movteq	r7, #2
   1424c:	beq	14270 <__assert_fail@plt+0x2b6c>
   14250:	movw	r1, #7372	; 0x1ccc
   14254:	movt	r1, #2
   14258:	mov	r2, #3
   1425c:	movw	r7, #4980	; 0x1374
   14260:	movt	r7, #2
   14264:	bl	116d4 <strncmp@plt>
   14268:	cmp	r0, #0
   1426c:	bne	143b8 <__assert_fail@plt+0x2cb4>
   14270:	mov	r2, #5
   14274:	movw	r1, #7448	; 0x1d18
   14278:	movt	r1, #2
   1427c:	mov	r0, #0
   14280:	bl	113bc <dcgettext@plt>
   14284:	mov	r1, r0
   14288:	movw	r3, #4980	; 0x1374
   1428c:	movt	r3, #2
   14290:	movw	r2, #7316	; 0x1c94
   14294:	movt	r2, #2
   14298:	mov	r0, #1
   1429c:	bl	1159c <__printf_chk@plt>
   142a0:	mov	r2, #5
   142a4:	movw	r1, #7476	; 0x1d34
   142a8:	movt	r1, #2
   142ac:	mov	r0, #0
   142b0:	bl	113bc <dcgettext@plt>
   142b4:	movw	r2, #8148	; 0x1fd4
   142b8:	movt	r2, #2
   142bc:	cmp	r6, r7
   142c0:	movw	r3, #8892	; 0x22bc
   142c4:	movt	r3, #2
   142c8:	mov	r1, r0
   142cc:	moveq	r3, r2
   142d0:	mov	r2, r6
   142d4:	mov	r0, #1
   142d8:	bl	1159c <__printf_chk@plt>
   142dc:	b	14008 <__assert_fail@plt+0x2904>
   142e0:	ldr	r1, [r6, #8]!
   142e4:	cmp	r1, #0
   142e8:	beq	141f8 <__assert_fail@plt+0x2af4>
   142ec:	mov	r0, r7
   142f0:	bl	11320 <strcmp@plt>
   142f4:	cmp	r0, #0
   142f8:	bne	142e0 <__assert_fail@plt+0x2bdc>
   142fc:	b	141f8 <__assert_fail@plt+0x2af4>
   14300:	mov	r0, r6
   14304:	bl	113bc <dcgettext@plt>
   14308:	mov	r1, r0
   1430c:	movw	r3, #7316	; 0x1c94
   14310:	movt	r3, #2
   14314:	movw	r2, #7356	; 0x1cbc
   14318:	movt	r2, #2
   1431c:	mov	r0, #1
   14320:	bl	1159c <__printf_chk@plt>
   14324:	mov	r1, r6
   14328:	mov	r0, #5
   1432c:	bl	11614 <setlocale@plt>
   14330:	cmp	r0, #0
   14334:	beq	14350 <__assert_fail@plt+0x2c4c>
   14338:	movw	r1, #7372	; 0x1ccc
   1433c:	movt	r1, #2
   14340:	mov	r2, #3
   14344:	bl	116d4 <strncmp@plt>
   14348:	cmp	r0, #0
   1434c:	bne	143ac <__assert_fail@plt+0x2ca8>
   14350:	mov	r2, #5
   14354:	movw	r1, #7448	; 0x1d18
   14358:	movt	r1, #2
   1435c:	mov	r0, #0
   14360:	bl	113bc <dcgettext@plt>
   14364:	mov	r1, r0
   14368:	movw	r3, #4980	; 0x1374
   1436c:	movt	r3, #2
   14370:	movw	r2, #7316	; 0x1c94
   14374:	movt	r2, #2
   14378:	mov	r0, #1
   1437c:	bl	1159c <__printf_chk@plt>
   14380:	movw	r1, #7476	; 0x1d34
   14384:	movt	r1, #2
   14388:	mov	r2, #5
   1438c:	mov	r0, #0
   14390:	bl	113bc <dcgettext@plt>
   14394:	movw	r6, #4980	; 0x1374
   14398:	movt	r6, #2
   1439c:	movw	r3, #8148	; 0x1fd4
   143a0:	movt	r3, #2
   143a4:	mov	r1, r0
   143a8:	b	142d0 <__assert_fail@plt+0x2bcc>
   143ac:	movw	r7, #4980	; 0x1374
   143b0:	movt	r7, #2
   143b4:	mov	r6, r7
   143b8:	mov	r2, #5
   143bc:	movw	r1, #7376	; 0x1cd0
   143c0:	movt	r1, #2
   143c4:	mov	r0, #0
   143c8:	bl	113bc <dcgettext@plt>
   143cc:	ldr	r1, [r5]
   143d0:	bl	112f0 <fputs_unlocked@plt>
   143d4:	b	14270 <__assert_fail@plt+0x2b6c>
   143d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   143dc:	movw	r4, #12668	; 0x317c
   143e0:	movt	r4, #3
   143e4:	strd	r6, [sp, #8]
   143e8:	movw	r7, #13120	; 0x3340
   143ec:	movt	r7, #3
   143f0:	strd	r8, [sp, #16]
   143f4:	movw	r8, #7620	; 0x1dc4
   143f8:	movt	r8, #2
   143fc:	str	sl, [sp, #24]
   14400:	add	r9, r4, #56	; 0x38
   14404:	str	lr, [sp, #28]
   14408:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   1440c:	mov	sl, r0
   14410:	mov	r5, r0
   14414:	mov	r1, #44	; 0x2c
   14418:	mov	r0, r5
   1441c:	bl	11548 <strchr@plt>
   14420:	subs	r6, r0, #0
   14424:	mov	r1, r5
   14428:	ldr	r0, [r4, #4]
   1442c:	movne	r3, #0
   14430:	strbne	r3, [r6], #1
   14434:	bl	11320 <strcmp@plt>
   14438:	cmp	r0, #0
   1443c:	beq	14558 <__assert_fail@plt+0x2e54>
   14440:	mov	r1, r5
   14444:	ldr	r0, [r4, #32]
   14448:	bl	11320 <strcmp@plt>
   1444c:	cmp	r0, #0
   14450:	beq	145d8 <__assert_fail@plt+0x2ed4>
   14454:	mov	r1, r5
   14458:	ldr	r0, [r4, #60]	; 0x3c
   1445c:	bl	11320 <strcmp@plt>
   14460:	cmp	r0, #0
   14464:	beq	145f8 <__assert_fail@plt+0x2ef4>
   14468:	mov	r1, r5
   1446c:	ldr	r0, [r4, #88]	; 0x58
   14470:	bl	11320 <strcmp@plt>
   14474:	cmp	r0, #0
   14478:	beq	1464c <__assert_fail@plt+0x2f48>
   1447c:	mov	r1, r5
   14480:	ldr	r0, [r4, #116]	; 0x74
   14484:	bl	11320 <strcmp@plt>
   14488:	cmp	r0, #0
   1448c:	beq	1466c <__assert_fail@plt+0x2f68>
   14490:	mov	r1, r5
   14494:	ldr	r0, [r4, #144]	; 0x90
   14498:	bl	11320 <strcmp@plt>
   1449c:	cmp	r0, #0
   144a0:	beq	146cc <__assert_fail@plt+0x2fc8>
   144a4:	mov	r1, r5
   144a8:	ldr	r0, [r4, #172]	; 0xac
   144ac:	bl	11320 <strcmp@plt>
   144b0:	cmp	r0, #0
   144b4:	beq	146ec <__assert_fail@plt+0x2fe8>
   144b8:	mov	r1, r5
   144bc:	ldr	r0, [r4, #200]	; 0xc8
   144c0:	bl	11320 <strcmp@plt>
   144c4:	cmp	r0, #0
   144c8:	beq	1470c <__assert_fail@plt+0x3008>
   144cc:	mov	r1, r5
   144d0:	ldr	r0, [r4, #228]	; 0xe4
   144d4:	bl	11320 <strcmp@plt>
   144d8:	cmp	r0, #0
   144dc:	beq	1472c <__assert_fail@plt+0x3028>
   144e0:	mov	r1, r5
   144e4:	ldr	r0, [r4, #256]	; 0x100
   144e8:	bl	11320 <strcmp@plt>
   144ec:	cmp	r0, #0
   144f0:	beq	1474c <__assert_fail@plt+0x3048>
   144f4:	mov	r1, r5
   144f8:	ldr	r0, [r4, #284]	; 0x11c
   144fc:	bl	11320 <strcmp@plt>
   14500:	cmp	r0, #0
   14504:	beq	1476c <__assert_fail@plt+0x3068>
   14508:	mov	r1, r5
   1450c:	ldr	r0, [r4, #312]	; 0x138
   14510:	bl	11320 <strcmp@plt>
   14514:	cmp	r0, #0
   14518:	beq	1478c <__assert_fail@plt+0x3088>
   1451c:	mov	r2, #5
   14520:	movw	r1, #7528	; 0x1d68
   14524:	movt	r1, #2
   14528:	mov	r0, #0
   1452c:	bl	113bc <dcgettext@plt>
   14530:	mov	r4, r0
   14534:	mov	r0, r5
   14538:	bl	1d124 <__assert_fail@plt+0xba20>
   1453c:	mov	r3, r0
   14540:	mov	r2, r4
   14544:	mov	r1, #0
   14548:	mov	r0, r1
   1454c:	bl	11494 <error@plt>
   14550:	mov	r0, #1
   14554:	bl	13fb8 <__assert_fail@plt+0x28b4>
   14558:	ldrb	r5, [r4, #24]
   1455c:	cmp	r5, #0
   14560:	bne	147cc <__assert_fail@plt+0x30c8>
   14564:	ldr	r2, [r7]
   14568:	ldr	r0, [r7, #4]
   1456c:	add	r3, r2, #1
   14570:	rsb	r5, r5, r5, lsl #3
   14574:	mov	r1, r3
   14578:	mov	r2, #4
   1457c:	str	r3, [r7]
   14580:	bl	1dd58 <__assert_fail@plt+0xc654>
   14584:	add	r3, r4, r5, lsl #2
   14588:	ldr	r2, [r7]
   1458c:	str	r0, [r7, #4]
   14590:	ldrb	r1, [r3, #24]
   14594:	sub	r2, r2, #-1073741823	; 0xc0000001
   14598:	cmp	r1, #0
   1459c:	str	r3, [r0, r2, lsl #2]
   145a0:	bne	147ac <__assert_fail@plt+0x30a8>
   145a4:	mov	r2, #1
   145a8:	strb	r2, [r3, #24]
   145ac:	cmp	r6, #0
   145b0:	mov	r5, r6
   145b4:	bne	14414 <__assert_fail@plt+0x2d10>
   145b8:	mov	r0, sl
   145bc:	ldrd	r4, [sp]
   145c0:	ldrd	r6, [sp, #8]
   145c4:	ldrd	r8, [sp, #16]
   145c8:	ldr	sl, [sp, #24]
   145cc:	ldr	lr, [sp, #28]
   145d0:	add	sp, sp, #32
   145d4:	b	156a4 <__assert_fail@plt+0x3fa0>
   145d8:	ldrb	r3, [r4, #52]	; 0x34
   145dc:	cmp	r3, #0
   145e0:	bne	14854 <__assert_fail@plt+0x3150>
   145e4:	ldr	r3, [r7]
   145e8:	mov	r5, #1
   145ec:	ldr	r0, [r7, #4]
   145f0:	add	r3, r3, r5
   145f4:	b	14570 <__assert_fail@plt+0x2e6c>
   145f8:	ldrb	r3, [r4, #80]	; 0x50
   145fc:	cmp	r3, #0
   14600:	bne	1484c <__assert_fail@plt+0x3148>
   14604:	ldr	r3, [r7]
   14608:	mov	r2, #4
   1460c:	ldr	r0, [r7, #4]
   14610:	add	r3, r3, #1
   14614:	mov	r1, r3
   14618:	str	r3, [r7]
   1461c:	bl	1dd58 <__assert_fail@plt+0xc654>
   14620:	ldr	r3, [r7]
   14624:	str	r0, [r7, #4]
   14628:	ldrb	r2, [r4, #80]	; 0x50
   1462c:	sub	r3, r3, #-1073741823	; 0xc0000001
   14630:	cmp	r2, #0
   14634:	str	r9, [r0, r3, lsl #2]
   14638:	str	r8, [r4, #68]	; 0x44
   1463c:	bne	147ac <__assert_fail@plt+0x30a8>
   14640:	mov	r3, #1
   14644:	strb	r3, [r4, #80]	; 0x50
   14648:	b	145ac <__assert_fail@plt+0x2ea8>
   1464c:	ldrb	r3, [r4, #108]	; 0x6c
   14650:	cmp	r3, #0
   14654:	bne	14844 <__assert_fail@plt+0x3140>
   14658:	ldr	r3, [r7]
   1465c:	mov	r5, #3
   14660:	ldr	r0, [r7, #4]
   14664:	add	r3, r3, #1
   14668:	b	14570 <__assert_fail@plt+0x2e6c>
   1466c:	ldrb	r3, [r4, #136]	; 0x88
   14670:	cmp	r3, #0
   14674:	bne	1483c <__assert_fail@plt+0x3138>
   14678:	ldr	r3, [r7]
   1467c:	mov	r2, #4
   14680:	ldr	r0, [r7, #4]
   14684:	add	r3, r3, #1
   14688:	mov	r1, r3
   1468c:	str	r3, [r7]
   14690:	bl	1dd58 <__assert_fail@plt+0xc654>
   14694:	ldr	r2, [r7]
   14698:	movw	r3, #7612	; 0x1dbc
   1469c:	movt	r3, #2
   146a0:	str	r0, [r7, #4]
   146a4:	ldrb	ip, [r4, #136]	; 0x88
   146a8:	ldr	r1, [pc, #428]	; 1485c <__assert_fail@plt+0x3158>
   146ac:	sub	r2, r2, #-1073741823	; 0xc0000001
   146b0:	cmp	ip, #0
   146b4:	str	r1, [r0, r2, lsl #2]
   146b8:	str	r3, [r4, #124]	; 0x7c
   146bc:	bne	147ac <__assert_fail@plt+0x30a8>
   146c0:	mov	r3, #1
   146c4:	strb	r3, [r4, #136]	; 0x88
   146c8:	b	145ac <__assert_fail@plt+0x2ea8>
   146cc:	ldrb	r3, [r4, #164]	; 0xa4
   146d0:	cmp	r3, #0
   146d4:	bne	14834 <__assert_fail@plt+0x3130>
   146d8:	ldr	r3, [r7]
   146dc:	mov	r5, #5
   146e0:	ldr	r0, [r7, #4]
   146e4:	add	r3, r3, #1
   146e8:	b	14570 <__assert_fail@plt+0x2e6c>
   146ec:	ldrb	r3, [r4, #192]	; 0xc0
   146f0:	cmp	r3, #0
   146f4:	bne	1482c <__assert_fail@plt+0x3128>
   146f8:	ldr	r3, [r7]
   146fc:	mov	r5, #6
   14700:	ldr	r0, [r7, #4]
   14704:	add	r3, r3, #1
   14708:	b	14570 <__assert_fail@plt+0x2e6c>
   1470c:	ldrb	r3, [r4, #220]	; 0xdc
   14710:	cmp	r3, #0
   14714:	bne	14824 <__assert_fail@plt+0x3120>
   14718:	ldr	r3, [r7]
   1471c:	mov	r5, #7
   14720:	ldr	r0, [r7, #4]
   14724:	add	r3, r3, #1
   14728:	b	14570 <__assert_fail@plt+0x2e6c>
   1472c:	ldrb	r3, [r4, #248]	; 0xf8
   14730:	cmp	r3, #0
   14734:	bne	1481c <__assert_fail@plt+0x3118>
   14738:	ldr	r3, [r7]
   1473c:	mov	r5, #8
   14740:	ldr	r0, [r7, #4]
   14744:	add	r3, r3, #1
   14748:	b	14570 <__assert_fail@plt+0x2e6c>
   1474c:	ldrb	r3, [r4, #276]	; 0x114
   14750:	cmp	r3, #0
   14754:	bne	14814 <__assert_fail@plt+0x3110>
   14758:	ldr	r3, [r7]
   1475c:	mov	r5, #9
   14760:	ldr	r0, [r7, #4]
   14764:	add	r3, r3, #1
   14768:	b	14570 <__assert_fail@plt+0x2e6c>
   1476c:	ldrb	r3, [r4, #304]	; 0x130
   14770:	cmp	r3, #0
   14774:	bne	1480c <__assert_fail@plt+0x3108>
   14778:	ldr	r3, [r7]
   1477c:	mov	r5, #10
   14780:	ldr	r0, [r7, #4]
   14784:	add	r3, r3, #1
   14788:	b	14570 <__assert_fail@plt+0x2e6c>
   1478c:	ldrb	r3, [r4, #332]	; 0x14c
   14790:	cmp	r3, #0
   14794:	bne	14804 <__assert_fail@plt+0x3100>
   14798:	ldr	r3, [r7]
   1479c:	mov	r5, #11
   147a0:	ldr	r0, [r7, #4]
   147a4:	add	r3, r3, #1
   147a8:	b	14570 <__assert_fail@plt+0x2e6c>
   147ac:	movw	r3, #4496	; 0x1190
   147b0:	movt	r3, #2
   147b4:	movw	r1, #4860	; 0x12fc
   147b8:	movt	r1, #2
   147bc:	movw	r0, #4872	; 0x1308
   147c0:	movt	r0, #2
   147c4:	movw	r2, #425	; 0x1a9
   147c8:	bl	11704 <__assert_fail@plt>
   147cc:	mov	r5, r0
   147d0:	mov	r2, #5
   147d4:	movw	r1, #7564	; 0x1d8c
   147d8:	movt	r1, #2
   147dc:	mov	r0, #0
   147e0:	bl	113bc <dcgettext@plt>
   147e4:	mov	r6, r0
   147e8:	rsb	r0, r5, r5, lsl #3
   147ec:	add	r4, r4, r0, lsl #2
   147f0:	ldr	r0, [r4, #4]
   147f4:	bl	1d124 <__assert_fail@plt+0xba20>
   147f8:	mov	r3, r0
   147fc:	mov	r2, r6
   14800:	b	14544 <__assert_fail@plt+0x2e40>
   14804:	mov	r5, #11
   14808:	b	147d0 <__assert_fail@plt+0x30cc>
   1480c:	mov	r5, #10
   14810:	b	147d0 <__assert_fail@plt+0x30cc>
   14814:	mov	r5, #9
   14818:	b	147d0 <__assert_fail@plt+0x30cc>
   1481c:	mov	r5, #8
   14820:	b	147d0 <__assert_fail@plt+0x30cc>
   14824:	mov	r5, #7
   14828:	b	147d0 <__assert_fail@plt+0x30cc>
   1482c:	mov	r5, #6
   14830:	b	147d0 <__assert_fail@plt+0x30cc>
   14834:	mov	r5, #5
   14838:	b	147d0 <__assert_fail@plt+0x30cc>
   1483c:	mov	r5, #4
   14840:	b	147d0 <__assert_fail@plt+0x30cc>
   14844:	mov	r5, #3
   14848:	b	147d0 <__assert_fail@plt+0x30cc>
   1484c:	mov	r5, #2
   14850:	b	147d0 <__assert_fail@plt+0x30cc>
   14854:	mov	r5, #1
   14858:	b	147d0 <__assert_fail@plt+0x30cc>
   1485c:	andeq	r3, r3, ip, ror #3
   14860:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14864:	strd	r6, [sp, #8]
   14868:	mov	r7, r1
   1486c:	strd	r8, [sp, #16]
   14870:	mov	r8, r0
   14874:	str	fp, [sp, #24]
   14878:	add	fp, sp, #28
   1487c:	str	lr, [sp, #28]
   14880:	sub	sp, sp, #216	; 0xd8
   14884:	sub	r0, fp, #244	; 0xf4
   14888:	bl	1d2b8 <__assert_fail@plt+0xbbb4>
   1488c:	mov	r4, r0
   14890:	bl	1156c <__errno_location@plt>
   14894:	cmp	r4, #0
   14898:	mov	r6, r0
   1489c:	bne	14acc <__assert_fail@plt+0x33c8>
   148a0:	ldr	r3, [r7, #16]
   148a4:	and	r3, r3, #61440	; 0xf000
   148a8:	cmp	r3, #16384	; 0x4000
   148ac:	beq	14a14 <__assert_fail@plt+0x3310>
   148b0:	mov	r0, r8
   148b4:	bl	153dc <__assert_fail@plt+0x3cd8>
   148b8:	mov	r5, r0
   148bc:	bl	1153c <strlen@plt>
   148c0:	add	r3, r0, #8
   148c4:	add	r2, r0, #1
   148c8:	bic	r3, r3, #7
   148cc:	mov	r1, r5
   148d0:	sub	sp, sp, r3
   148d4:	mov	r0, sp
   148d8:	bl	11374 <memcpy@plt>
   148dc:	mov	r7, r0
   148e0:	mov	r0, r5
   148e4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   148e8:	mov	r0, r7
   148ec:	bl	11404 <chdir@plt>
   148f0:	cmp	r0, #0
   148f4:	blt	14afc <__assert_fail@plt+0x33f8>
   148f8:	sub	r5, fp, #236	; 0xec
   148fc:	movw	r1, #8632	; 0x21b8
   14900:	movt	r1, #2
   14904:	mov	r2, r5
   14908:	mov	r0, #3
   1490c:	bl	116bc <__xstat64@plt>
   14910:	cmp	r0, #0
   14914:	blt	14a7c <__assert_fail@plt+0x3378>
   14918:	movw	r4, #8676	; 0x21e4
   1491c:	movt	r4, #2
   14920:	b	1496c <__assert_fail@plt+0x3268>
   14924:	ldrd	r2, [fp, #-236]	; 0xffffff14
   14928:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1492c:	cmp	r1, r3
   14930:	cmpeq	r0, r2
   14934:	bne	149cc <__assert_fail@plt+0x32c8>
   14938:	ldrd	r2, [fp, #-140]	; 0xffffff74
   1493c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   14940:	cmp	r1, r3
   14944:	cmpeq	r0, r2
   14948:	beq	149cc <__assert_fail@plt+0x32c8>
   1494c:	mov	r0, r4
   14950:	bl	11404 <chdir@plt>
   14954:	cmp	r0, #0
   14958:	blt	14ac0 <__assert_fail@plt+0x33bc>
   1495c:	mov	r2, #104	; 0x68
   14960:	sub	r1, fp, #132	; 0x84
   14964:	mov	r0, r5
   14968:	bl	11374 <memcpy@plt>
   1496c:	sub	r2, fp, #132	; 0x84
   14970:	mov	r1, r4
   14974:	mov	r0, #3
   14978:	bl	116bc <__xstat64@plt>
   1497c:	cmp	r0, #0
   14980:	bge	14924 <__assert_fail@plt+0x3220>
   14984:	movw	r1, #8680	; 0x21e8
   14988:	movt	r1, #2
   1498c:	ldr	r4, [r6]
   14990:	mov	r2, #5
   14994:	mov	r0, #0
   14998:	bl	113bc <dcgettext@plt>
   1499c:	mov	r5, r0
   149a0:	movw	r1, #8676	; 0x21e4
   149a4:	movt	r1, #2
   149a8:	mov	r0, #4
   149ac:	bl	1bdf8 <__assert_fail@plt+0xa6f4>
   149b0:	mov	r3, r0
   149b4:	mov	r2, r5
   149b8:	mov	r1, r4
   149bc:	mov	r0, #0
   149c0:	bl	11494 <error@plt>
   149c4:	mov	r5, #0
   149c8:	b	149d4 <__assert_fail@plt+0x32d0>
   149cc:	bl	1e270 <__assert_fail@plt+0xcb6c>
   149d0:	mov	r5, r0
   149d4:	sub	r0, fp, #244	; 0xf4
   149d8:	ldr	r4, [r6]
   149dc:	bl	1d32c <__assert_fail@plt+0xbc28>
   149e0:	cmp	r0, #0
   149e4:	bne	14b40 <__assert_fail@plt+0x343c>
   149e8:	sub	r0, fp, #244	; 0xf4
   149ec:	bl	1d348 <__assert_fail@plt+0xbc44>
   149f0:	str	r4, [r6]
   149f4:	mov	r0, r5
   149f8:	sub	sp, fp, #28
   149fc:	ldrd	r4, [sp]
   14a00:	ldrd	r6, [sp, #8]
   14a04:	ldrd	r8, [sp, #16]
   14a08:	ldr	fp, [sp, #24]
   14a0c:	add	sp, sp, #28
   14a10:	pop	{pc}		; (ldr pc, [sp], #4)
   14a14:	sub	r5, fp, #236	; 0xec
   14a18:	mov	r1, r7
   14a1c:	mov	r2, #104	; 0x68
   14a20:	mov	r0, r5
   14a24:	bl	11374 <memcpy@plt>
   14a28:	mov	r0, r8
   14a2c:	bl	11404 <chdir@plt>
   14a30:	cmp	r0, #0
   14a34:	bge	14918 <__assert_fail@plt+0x3214>
   14a38:	ldr	r6, [r6]
   14a3c:	mov	r2, #5
   14a40:	mov	r0, r4
   14a44:	movw	r1, #8600	; 0x2198
   14a48:	movt	r1, #2
   14a4c:	bl	113bc <dcgettext@plt>
   14a50:	mov	r7, r0
   14a54:	mov	r1, r8
   14a58:	mov	r0, #4
   14a5c:	mov	r5, r4
   14a60:	bl	1bdf8 <__assert_fail@plt+0xa6f4>
   14a64:	mov	r3, r0
   14a68:	mov	r2, r7
   14a6c:	mov	r1, r6
   14a70:	mov	r0, r4
   14a74:	bl	11494 <error@plt>
   14a78:	b	149f4 <__assert_fail@plt+0x32f0>
   14a7c:	ldr	r8, [r6]
   14a80:	mov	r2, #5
   14a84:	mov	r0, r4
   14a88:	movw	r1, #8636	; 0x21bc
   14a8c:	movt	r1, #2
   14a90:	bl	113bc <dcgettext@plt>
   14a94:	mov	r9, r0
   14a98:	mov	r1, r7
   14a9c:	mov	r0, #4
   14aa0:	mov	r5, r4
   14aa4:	bl	1bdf8 <__assert_fail@plt+0xa6f4>
   14aa8:	mov	r3, r0
   14aac:	mov	r2, r9
   14ab0:	mov	r1, r8
   14ab4:	mov	r0, r4
   14ab8:	bl	11494 <error@plt>
   14abc:	b	149d4 <__assert_fail@plt+0x32d0>
   14ac0:	movw	r1, #8600	; 0x2198
   14ac4:	movt	r1, #2
   14ac8:	b	1498c <__assert_fail@plt+0x3288>
   14acc:	ldr	r4, [r6]
   14ad0:	mov	r2, #5
   14ad4:	movw	r1, #8568	; 0x2178
   14ad8:	movt	r1, #2
   14adc:	mov	r0, #0
   14ae0:	bl	113bc <dcgettext@plt>
   14ae4:	mov	r2, r0
   14ae8:	mov	r0, #0
   14aec:	mov	r5, r0
   14af0:	mov	r1, r4
   14af4:	bl	11494 <error@plt>
   14af8:	b	149f4 <__assert_fail@plt+0x32f0>
   14afc:	ldr	r6, [r6]
   14b00:	mov	r2, #5
   14b04:	mov	r0, r4
   14b08:	movw	r1, #8600	; 0x2198
   14b0c:	movt	r1, #2
   14b10:	bl	113bc <dcgettext@plt>
   14b14:	mov	r8, r0
   14b18:	mov	r1, r7
   14b1c:	mov	r0, #4
   14b20:	mov	r5, r4
   14b24:	bl	1bdf8 <__assert_fail@plt+0xa6f4>
   14b28:	mov	r3, r0
   14b2c:	mov	r2, r8
   14b30:	mov	r1, r6
   14b34:	mov	r0, r4
   14b38:	bl	11494 <error@plt>
   14b3c:	b	149f4 <__assert_fail@plt+0x32f0>
   14b40:	ldr	r4, [r6]
   14b44:	mov	r2, #5
   14b48:	movw	r1, #8696	; 0x21f8
   14b4c:	movt	r1, #2
   14b50:	mov	r0, #0
   14b54:	bl	113bc <dcgettext@plt>
   14b58:	mov	r2, r0
   14b5c:	mov	r0, #1
   14b60:	mov	r1, r4
   14b64:	bl	11494 <error@plt>
   14b68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b6c:	strd	r6, [sp, #8]
   14b70:	strd	sl, [sp, #24]
   14b74:	and	fp, r1, #3
   14b78:	sub	r3, fp, #1
   14b7c:	strd	r8, [sp, #16]
   14b80:	tst	r3, fp
   14b84:	str	lr, [sp, #32]
   14b88:	sub	sp, sp, #3248	; 0xcb0
   14b8c:	sub	sp, sp, #4
   14b90:	bne	14cac <__assert_fail@plt+0x35a8>
   14b94:	cmp	r0, #0
   14b98:	mov	r5, r0
   14b9c:	beq	14cac <__assert_fail@plt+0x35a8>
   14ba0:	ldrb	r9, [r0]
   14ba4:	cmp	r9, #0
   14ba8:	beq	15080 <__assert_fail@plt+0x397c>
   14bac:	add	r3, sp, #1184	; 0x4a0
   14bb0:	cmp	r9, #47	; 0x2f
   14bb4:	add	r3, r3, #8
   14bb8:	mov	r6, r1
   14bbc:	addne	r4, sp, #160	; 0xa0
   14bc0:	mov	r1, #1024	; 0x400
   14bc4:	str	r3, [sp, #1184]	; 0x4a0
   14bc8:	add	r3, sp, #160	; 0xa0
   14bcc:	str	r3, [sp, #152]	; 0x98
   14bd0:	add	r3, sp, #2224	; 0x8b0
   14bd4:	str	r1, [sp, #156]	; 0x9c
   14bd8:	str	r1, [sp, #1188]	; 0x4a4
   14bdc:	str	r3, [sp, #2216]	; 0x8a8
   14be0:	movne	r3, r4
   14be4:	subne	r7, r3, #8
   14be8:	str	r1, [sp, #2220]	; 0x8ac
   14bec:	beq	14cc0 <__assert_fail@plt+0x35bc>
   14bf0:	mov	r0, r4
   14bf4:	bl	11524 <getcwd@plt>
   14bf8:	cmp	r0, #0
   14bfc:	bne	1520c <__assert_fail@plt+0x3b08>
   14c00:	bl	1156c <__errno_location@plt>
   14c04:	ldr	r3, [r0]
   14c08:	cmp	r3, #12
   14c0c:	beq	151d0 <__assert_fail@plt+0x3acc>
   14c10:	cmp	r3, #34	; 0x22
   14c14:	beq	14c90 <__assert_fail@plt+0x358c>
   14c18:	mov	r6, r4
   14c1c:	mov	r7, #1
   14c20:	ldr	r0, [sp, #1184]	; 0x4a0
   14c24:	add	r3, sp, #1184	; 0x4a0
   14c28:	add	r3, r3, #8
   14c2c:	cmp	r0, r3
   14c30:	beq	14c38 <__assert_fail@plt+0x3534>
   14c34:	bl	156a4 <__assert_fail@plt+0x3fa0>
   14c38:	ldr	r0, [sp, #2216]	; 0x8a8
   14c3c:	add	r3, sp, #2224	; 0x8b0
   14c40:	cmp	r0, r3
   14c44:	beq	14c4c <__assert_fail@plt+0x3548>
   14c48:	bl	156a4 <__assert_fail@plt+0x3fa0>
   14c4c:	cmp	r7, #0
   14c50:	bne	15060 <__assert_fail@plt+0x395c>
   14c54:	add	r0, sp, #152	; 0x98
   14c58:	strb	r7, [r4], #1
   14c5c:	sub	r1, r4, r6
   14c60:	bl	1d378 <__assert_fail@plt+0xbc74>
   14c64:	subs	r9, r0, #0
   14c68:	beq	151d0 <__assert_fail@plt+0x3acc>
   14c6c:	mov	r0, r9
   14c70:	add	sp, sp, #3248	; 0xcb0
   14c74:	add	sp, sp, #4
   14c78:	ldrd	r4, [sp]
   14c7c:	ldrd	r6, [sp, #8]
   14c80:	ldrd	r8, [sp, #16]
   14c84:	ldrd	sl, [sp, #24]
   14c88:	add	sp, sp, #32
   14c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c90:	mov	r0, r7
   14c94:	bl	1d3e8 <__assert_fail@plt+0xbce4>
   14c98:	cmp	r0, #0
   14c9c:	beq	151d0 <__assert_fail@plt+0x3acc>
   14ca0:	ldr	r4, [sp, #152]	; 0x98
   14ca4:	ldr	r1, [sp, #156]	; 0x9c
   14ca8:	b	14bf0 <__assert_fail@plt+0x34ec>
   14cac:	bl	1156c <__errno_location@plt>
   14cb0:	mov	r3, #22
   14cb4:	mov	r9, #0
   14cb8:	str	r3, [r0]
   14cbc:	b	14c6c <__assert_fail@plt+0x3568>
   14cc0:	and	r3, r6, #4
   14cc4:	add	r4, sp, #161	; 0xa1
   14cc8:	str	r3, [sp, #12]
   14ccc:	add	r3, sp, #160	; 0xa0
   14cd0:	mov	r6, r3
   14cd4:	strb	r9, [sp, #160]	; 0xa0
   14cd8:	mov	r3, #0
   14cdc:	movw	r2, #8760	; 0x2238
   14ce0:	movt	r2, #2
   14ce4:	str	fp, [sp, #16]
   14ce8:	str	r3, [sp, #20]
   14cec:	strd	r2, [sp, #24]
   14cf0:	str	r3, [sp, #32]
   14cf4:	movw	r3, #8632	; 0x21b8
   14cf8:	movt	r3, #2
   14cfc:	str	r3, [sp, #36]	; 0x24
   14d00:	movw	r3, #28796	; 0x707c
   14d04:	movt	r3, #1
   14d08:	str	r3, [sp, #40]	; 0x28
   14d0c:	cmp	r9, #47	; 0x2f
   14d10:	movne	r3, r9
   14d14:	movne	r7, r5
   14d18:	bne	14d34 <__assert_fail@plt+0x3630>
   14d1c:	ldrb	r3, [r5, #1]!
   14d20:	cmp	r3, #47	; 0x2f
   14d24:	beq	14d1c <__assert_fail@plt+0x3618>
   14d28:	cmp	r3, #0
   14d2c:	beq	14eac <__assert_fail@plt+0x37a8>
   14d30:	mov	r7, r5
   14d34:	mov	r8, r5
   14d38:	ldrb	r9, [r5, #1]!
   14d3c:	cmp	r9, #0
   14d40:	cmpne	r9, #47	; 0x2f
   14d44:	bne	14d34 <__assert_fail@plt+0x3630>
   14d48:	subs	sl, r5, r7
   14d4c:	beq	14eac <__assert_fail@plt+0x37a8>
   14d50:	cmp	sl, #1
   14d54:	beq	14ed4 <__assert_fail@plt+0x37d0>
   14d58:	cmp	r3, #46	; 0x2e
   14d5c:	cmpeq	sl, #2
   14d60:	beq	14ee8 <__assert_fail@plt+0x37e4>
   14d64:	ldrb	r3, [r4, #-1]
   14d68:	cmp	r3, #47	; 0x2f
   14d6c:	beq	14d78 <__assert_fail@plt+0x3674>
   14d70:	mov	r3, #47	; 0x2f
   14d74:	strb	r3, [r4], #1
   14d78:	ldr	r3, [sp, #156]	; 0x9c
   14d7c:	add	r9, sl, #2
   14d80:	add	r3, r6, r3
   14d84:	sub	r3, r3, r4
   14d88:	cmp	r3, r9
   14d8c:	bcs	14dbc <__assert_fail@plt+0x36b8>
   14d90:	add	r0, sp, #152	; 0x98
   14d94:	sub	r4, r4, r6
   14d98:	bl	1d47c <__assert_fail@plt+0xbd78>
   14d9c:	cmp	r0, #0
   14da0:	beq	151d0 <__assert_fail@plt+0x3acc>
   14da4:	ldr	r6, [sp, #152]	; 0x98
   14da8:	ldr	r3, [sp, #156]	; 0x9c
   14dac:	sub	r3, r3, r4
   14db0:	add	r4, r6, r4
   14db4:	cmp	r3, r9
   14db8:	bcc	14d90 <__assert_fail@plt+0x368c>
   14dbc:	mov	r2, sl
   14dc0:	mov	r0, r4
   14dc4:	mov	r1, r7
   14dc8:	bl	11500 <mempcpy@plt>
   14dcc:	ldr	r2, [sp, #12]
   14dd0:	mov	r3, #0
   14dd4:	mov	r4, r0
   14dd8:	strb	r3, [r0]
   14ddc:	cmp	r2, r3
   14de0:	beq	14f20 <__assert_fail@plt+0x381c>
   14de4:	ldr	r3, [sp, #16]
   14de8:	ldrb	r9, [r8, #1]
   14dec:	cmp	r3, #2
   14df0:	beq	14ea4 <__assert_fail@plt+0x37a0>
   14df4:	cmp	r9, #47	; 0x2f
   14df8:	bne	14e48 <__assert_fail@plt+0x3744>
   14dfc:	mov	r3, r5
   14e00:	ldrb	r2, [r3, #1]
   14e04:	add	r0, r3, #1
   14e08:	cmp	r2, #47	; 0x2f
   14e0c:	moveq	r3, r0
   14e10:	beq	14e00 <__assert_fail@plt+0x36fc>
   14e14:	cmp	r2, #0
   14e18:	add	r3, r3, #2
   14e1c:	beq	1500c <__assert_fail@plt+0x3908>
   14e20:	cmp	r2, #46	; 0x2e
   14e24:	bne	14e48 <__assert_fail@plt+0x3744>
   14e28:	ldrb	r2, [r0, #1]
   14e2c:	cmp	r2, #0
   14e30:	beq	1500c <__assert_fail@plt+0x3908>
   14e34:	cmp	r2, #46	; 0x2e
   14e38:	beq	1515c <__assert_fail@plt+0x3a58>
   14e3c:	cmp	r2, #47	; 0x2f
   14e40:	beq	14e00 <__assert_fail@plt+0x36fc>
   14e44:	b	1516c <__assert_fail@plt+0x3a68>
   14e48:	ldr	r3, [sp, #12]
   14e4c:	cmp	r3, #0
   14e50:	bne	15038 <__assert_fail@plt+0x3934>
   14e54:	bl	1156c <__errno_location@plt>
   14e58:	ldr	r7, [r0]
   14e5c:	subs	r7, r7, #22
   14e60:	movne	r7, #1
   14e64:	cmp	r7, #0
   14e68:	beq	14ea0 <__assert_fail@plt+0x379c>
   14e6c:	ldr	r3, [sp, #16]
   14e70:	cmp	r3, #1
   14e74:	bne	14ebc <__assert_fail@plt+0x37b8>
   14e78:	bl	1156c <__errno_location@plt>
   14e7c:	ldr	r3, [r0]
   14e80:	cmp	r3, #2
   14e84:	bne	14ebc <__assert_fail@plt+0x37b8>
   14e88:	mov	r0, r5
   14e8c:	ldr	r1, [sp, #24]
   14e90:	bl	116f8 <strspn@plt>
   14e94:	ldrb	r3, [r5, r0]
   14e98:	cmp	r3, #0
   14e9c:	bne	14ebc <__assert_fail@plt+0x37b8>
   14ea0:	ldrb	r9, [r8, #1]
   14ea4:	cmp	r9, #0
   14ea8:	bne	14d0c <__assert_fail@plt+0x3608>
   14eac:	add	r3, r6, #1
   14eb0:	cmp	r4, r3
   14eb4:	bhi	151f4 <__assert_fail@plt+0x3af0>
   14eb8:	mov	r7, #0
   14ebc:	ldr	r3, [sp, #20]
   14ec0:	cmp	r3, #0
   14ec4:	beq	14c20 <__assert_fail@plt+0x351c>
   14ec8:	mov	r0, r3
   14ecc:	bl	1653c <__assert_fail@plt+0x4e38>
   14ed0:	b	14c20 <__assert_fail@plt+0x351c>
   14ed4:	cmp	r3, #46	; 0x2e
   14ed8:	bne	14d64 <__assert_fail@plt+0x3660>
   14edc:	cmp	r9, #0
   14ee0:	bne	14d0c <__assert_fail@plt+0x3608>
   14ee4:	b	14eac <__assert_fail@plt+0x37a8>
   14ee8:	ldrb	r3, [r7, #1]
   14eec:	cmp	r3, #46	; 0x2e
   14ef0:	bne	14d64 <__assert_fail@plt+0x3660>
   14ef4:	add	r3, r6, #1
   14ef8:	cmp	r4, r3
   14efc:	bls	14ea4 <__assert_fail@plt+0x37a0>
   14f00:	sub	r3, r4, #1
   14f04:	cmp	r3, r6
   14f08:	bls	14f18 <__assert_fail@plt+0x3814>
   14f0c:	ldrb	r2, [r4, #-2]
   14f10:	cmp	r2, #47	; 0x2f
   14f14:	bne	151d4 <__assert_fail@plt+0x3ad0>
   14f18:	mov	r4, r3
   14f1c:	b	14ea4 <__assert_fail@plt+0x37a0>
   14f20:	add	r3, sp, #2224	; 0x8b0
   14f24:	sub	r9, r3, #8
   14f28:	b	14f3c <__assert_fail@plt+0x3838>
   14f2c:	mov	r0, r9
   14f30:	bl	1d3e8 <__assert_fail@plt+0xbce4>
   14f34:	cmp	r0, #0
   14f38:	beq	151d0 <__assert_fail@plt+0x3acc>
   14f3c:	ldr	sl, [sp, #2216]	; 0x8a8
   14f40:	mov	r0, r6
   14f44:	ldr	fp, [sp, #2220]	; 0x8ac
   14f48:	mov	r1, sl
   14f4c:	sub	fp, fp, #1
   14f50:	mov	r2, fp
   14f54:	bl	11428 <readlink@plt>
   14f58:	cmp	fp, r0
   14f5c:	ble	14f2c <__assert_fail@plt+0x3828>
   14f60:	cmp	r0, #0
   14f64:	mov	r9, r0
   14f68:	blt	14de4 <__assert_fail@plt+0x36e0>
   14f6c:	ldr	r3, [sp, #32]
   14f70:	cmp	r3, #19
   14f74:	addle	r3, r3, #1
   14f78:	strle	r3, [sp, #32]
   14f7c:	ble	150a0 <__assert_fail@plt+0x399c>
   14f80:	ldrb	r3, [r7]
   14f84:	cmp	r3, #0
   14f88:	beq	150a0 <__assert_fail@plt+0x399c>
   14f8c:	mov	r3, #0
   14f90:	sub	fp, r7, r5
   14f94:	mov	r0, #3
   14f98:	add	r2, sp, #48	; 0x30
   14f9c:	strb	r3, [r4, fp]
   14fa0:	ldrb	r1, [r6]
   14fa4:	ldr	r3, [sp, #36]	; 0x24
   14fa8:	cmp	r1, #0
   14fac:	movne	r3, r6
   14fb0:	mov	r1, r3
   14fb4:	bl	116bc <__xstat64@plt>
   14fb8:	cmp	r0, #0
   14fbc:	bne	15004 <__assert_fail@plt+0x3900>
   14fc0:	ldr	r2, [sp, #20]
   14fc4:	ldrb	r3, [r7]
   14fc8:	cmp	r2, #0
   14fcc:	strb	r3, [r4, fp]
   14fd0:	beq	151a0 <__assert_fail@plt+0x3a9c>
   14fd4:	add	r2, sp, #48	; 0x30
   14fd8:	mov	r1, r7
   14fdc:	ldr	r0, [sp, #20]
   14fe0:	bl	15650 <__assert_fail@plt+0x3f4c>
   14fe4:	cmp	r0, #0
   14fe8:	beq	15090 <__assert_fail@plt+0x398c>
   14fec:	ldr	r3, [sp, #16]
   14ff0:	cmp	r3, #2
   14ff4:	beq	14ea0 <__assert_fail@plt+0x379c>
   14ff8:	bl	1156c <__errno_location@plt>
   14ffc:	mov	r3, #40	; 0x28
   15000:	str	r3, [r0]
   15004:	mov	r7, #1
   15008:	b	14ebc <__assert_fail@plt+0x37b8>
   1500c:	ldr	r3, [sp, #24]
   15010:	mov	r2, #0
   15014:	mov	r1, r6
   15018:	mvn	r0, #99	; 0x63
   1501c:	ldrh	ip, [r3]
   15020:	mov	r3, #512	; 0x200
   15024:	strh	ip, [r4]
   15028:	bl	1135c <faccessat@plt>
   1502c:	adds	r7, r0, #0
   15030:	movne	r7, #1
   15034:	b	14e64 <__assert_fail@plt+0x3760>
   15038:	cmp	r9, #0
   1503c:	bne	14ea4 <__assert_fail@plt+0x37a0>
   15040:	mov	r2, r9
   15044:	mov	r3, #512	; 0x200
   15048:	mov	r1, r6
   1504c:	mvn	r0, #99	; 0x63
   15050:	bl	1135c <faccessat@plt>
   15054:	adds	r7, r0, #0
   15058:	movne	r7, #1
   1505c:	b	14e64 <__assert_fail@plt+0x3760>
   15060:	ldr	r0, [sp, #152]	; 0x98
   15064:	add	r3, sp, #160	; 0xa0
   15068:	cmp	r0, r3
   1506c:	moveq	r9, #0
   15070:	beq	14c6c <__assert_fail@plt+0x3568>
   15074:	bl	156a4 <__assert_fail@plt+0x3fa0>
   15078:	mov	r9, #0
   1507c:	b	14c6c <__assert_fail@plt+0x3568>
   15080:	bl	1156c <__errno_location@plt>
   15084:	mov	r3, #2
   15088:	str	r3, [r0]
   1508c:	b	14c6c <__assert_fail@plt+0x3568>
   15090:	add	r2, sp, #48	; 0x30
   15094:	mov	r1, r7
   15098:	ldr	r0, [sp, #20]
   1509c:	bl	155b8 <__assert_fail@plt+0x3eb4>
   150a0:	ldr	r2, [sp, #28]
   150a4:	mov	r3, #0
   150a8:	mov	r0, r5
   150ac:	strb	r3, [sl, r9]
   150b0:	ldr	fp, [sp, #1184]	; 0x4a0
   150b4:	cmp	r2, r3
   150b8:	beq	1517c <__assert_fail@plt+0x3a78>
   150bc:	sub	r3, r5, fp
   150c0:	str	r3, [sp, #44]	; 0x2c
   150c4:	bl	1153c <strlen@plt>
   150c8:	ldr	r2, [sp, #1188]	; 0x4a4
   150cc:	add	r7, r0, r9
   150d0:	mov	r8, r0
   150d4:	cmp	r7, r2
   150d8:	bcc	15108 <__assert_fail@plt+0x3a04>
   150dc:	add	r0, sp, #1184	; 0x4a0
   150e0:	bl	1d47c <__assert_fail@plt+0xbd78>
   150e4:	cmp	r0, #0
   150e8:	beq	151d0 <__assert_fail@plt+0x3acc>
   150ec:	ldr	r3, [sp, #1188]	; 0x4a4
   150f0:	cmp	r3, r7
   150f4:	bls	150dc <__assert_fail@plt+0x39d8>
   150f8:	ldr	r3, [sp, #28]
   150fc:	ldr	fp, [sp, #1184]	; 0x4a0
   15100:	cmp	r3, #0
   15104:	beq	15110 <__assert_fail@plt+0x3a0c>
   15108:	ldr	r3, [sp, #44]	; 0x2c
   1510c:	add	r5, fp, r3
   15110:	mov	r1, r5
   15114:	add	r2, r8, #1
   15118:	add	r0, fp, r9
   1511c:	bl	11344 <memmove@plt>
   15120:	mov	r2, r9
   15124:	mov	r1, sl
   15128:	mov	r0, fp
   1512c:	bl	11374 <memcpy@plt>
   15130:	ldrb	r3, [sl]
   15134:	mov	r5, r0
   15138:	add	r2, r6, #1
   1513c:	cmp	r3, #47	; 0x2f
   15140:	beq	15298 <__assert_fail@plt+0x3b94>
   15144:	cmp	r4, r2
   15148:	ldrb	r9, [r0]
   1514c:	bhi	1525c <__assert_fail@plt+0x3b58>
   15150:	mov	r3, #1
   15154:	str	r3, [sp, #28]
   15158:	b	14ea4 <__assert_fail@plt+0x37a0>
   1515c:	ldrb	r3, [r0, #2]
   15160:	cmp	r3, #47	; 0x2f
   15164:	cmpne	r3, #0
   15168:	beq	1500c <__assert_fail@plt+0x3908>
   1516c:	ldr	r3, [sp, #12]
   15170:	cmp	r3, #0
   15174:	beq	14e54 <__assert_fail@plt+0x3750>
   15178:	b	14ea4 <__assert_fail@plt+0x37a0>
   1517c:	bl	1153c <strlen@plt>
   15180:	ldr	r2, [sp, #1188]	; 0x4a4
   15184:	add	r7, r9, r0
   15188:	mov	r8, r0
   1518c:	cmp	r7, r2
   15190:	bcc	15110 <__assert_fail@plt+0x3a0c>
   15194:	ldr	r3, [sp, #28]
   15198:	str	r3, [sp, #44]	; 0x2c
   1519c:	b	150dc <__assert_fail@plt+0x39d8>
   151a0:	ldr	ip, [sp, #40]	; 0x28
   151a4:	mov	r1, r2
   151a8:	movw	r3, #28688	; 0x7010
   151ac:	movt	r3, #1
   151b0:	movw	r2, #28616	; 0x6fc8
   151b4:	movt	r2, #1
   151b8:	mov	r0, #7
   151bc:	str	ip, [sp]
   151c0:	bl	161fc <__assert_fail@plt+0x4af8>
   151c4:	subs	r3, r0, #0
   151c8:	str	r3, [sp, #20]
   151cc:	bne	14fd4 <__assert_fail@plt+0x38d0>
   151d0:	bl	1e22c <__assert_fail@plt+0xcb28>
   151d4:	sub	r3, r4, #2
   151d8:	cmp	r3, r6
   151dc:	mov	r4, r3
   151e0:	beq	14ea4 <__assert_fail@plt+0x37a0>
   151e4:	ldrb	r2, [r3, #-1]!
   151e8:	cmp	r2, #47	; 0x2f
   151ec:	beq	14ea4 <__assert_fail@plt+0x37a0>
   151f0:	b	151d8 <__assert_fail@plt+0x3ad4>
   151f4:	ldrb	r3, [r4, #-1]
   151f8:	cmp	r3, #47	; 0x2f
   151fc:	bne	14eb8 <__assert_fail@plt+0x37b4>
   15200:	sub	r4, r4, #1
   15204:	mov	r7, #0
   15208:	b	14ebc <__assert_fail@plt+0x37b8>
   1520c:	mov	r0, r4
   15210:	mov	r1, #0
   15214:	bl	113f8 <rawmemchr@plt>
   15218:	ldrb	r9, [r5]
   1521c:	and	r3, r6, #4
   15220:	str	r3, [sp, #12]
   15224:	cmp	r9, #0
   15228:	movne	r6, r4
   1522c:	movne	r4, r0
   15230:	bne	14cd8 <__assert_fail@plt+0x35d4>
   15234:	add	r3, r4, #1
   15238:	cmp	r0, r3
   1523c:	bls	1524c <__assert_fail@plt+0x3b48>
   15240:	ldrb	r3, [r0, #-1]
   15244:	cmp	r3, #47	; 0x2f
   15248:	beq	152c0 <__assert_fail@plt+0x3bbc>
   1524c:	mov	r6, r4
   15250:	mov	r7, r9
   15254:	mov	r4, r0
   15258:	b	14c20 <__assert_fail@plt+0x351c>
   1525c:	sub	r3, r4, #1
   15260:	cmp	r3, r6
   15264:	bls	152b0 <__assert_fail@plt+0x3bac>
   15268:	ldrb	r2, [r4, #-2]
   1526c:	cmp	r2, #47	; 0x2f
   15270:	beq	152b0 <__assert_fail@plt+0x3bac>
   15274:	sub	r3, r4, #2
   15278:	cmp	r6, r3
   1527c:	mov	r4, r3
   15280:	beq	15150 <__assert_fail@plt+0x3a4c>
   15284:	ldrb	r2, [r3, #-1]
   15288:	sub	r3, r3, #1
   1528c:	cmp	r2, #47	; 0x2f
   15290:	beq	15150 <__assert_fail@plt+0x3a4c>
   15294:	b	15278 <__assert_fail@plt+0x3b74>
   15298:	mov	r4, r2
   1529c:	mov	r2, #1
   152a0:	strb	r3, [r6]
   152a4:	ldrb	r9, [r0]
   152a8:	str	r2, [sp, #28]
   152ac:	b	14ea4 <__assert_fail@plt+0x37a0>
   152b0:	mov	r4, r3
   152b4:	mov	r3, #1
   152b8:	str	r3, [sp, #28]
   152bc:	b	14ea4 <__assert_fail@plt+0x37a0>
   152c0:	mov	r6, r4
   152c4:	mov	r4, r0
   152c8:	str	r9, [sp, #20]
   152cc:	b	15200 <__assert_fail@plt+0x3afc>
   152d0:	movw	r3, #13240	; 0x33b8
   152d4:	movt	r3, #3
   152d8:	str	r0, [r3]
   152dc:	bx	lr
   152e0:	movw	r3, #13240	; 0x33b8
   152e4:	movt	r3, #3
   152e8:	strb	r0, [r3, #4]
   152ec:	bx	lr
   152f0:	movw	r3, #13108	; 0x3334
   152f4:	movt	r3, #3
   152f8:	strd	r4, [sp, #-16]!
   152fc:	ldr	r0, [r3]
   15300:	str	r6, [sp, #8]
   15304:	str	lr, [sp, #12]
   15308:	sub	sp, sp, #8
   1530c:	bl	204c0 <__assert_fail@plt+0xedbc>
   15310:	cmp	r0, #0
   15314:	beq	15340 <__assert_fail@plt+0x3c3c>
   15318:	movw	r4, #13240	; 0x33b8
   1531c:	movt	r4, #3
   15320:	ldrb	r6, [r4, #4]
   15324:	bl	1156c <__errno_location@plt>
   15328:	mov	r5, r0
   1532c:	cmp	r6, #0
   15330:	beq	1536c <__assert_fail@plt+0x3c68>
   15334:	ldr	r3, [r0]
   15338:	cmp	r3, #32
   1533c:	bne	1536c <__assert_fail@plt+0x3c68>
   15340:	movw	r3, #13104	; 0x3330
   15344:	movt	r3, #3
   15348:	ldr	r0, [r3]
   1534c:	bl	204c0 <__assert_fail@plt+0xedbc>
   15350:	cmp	r0, #0
   15354:	bne	153b4 <__assert_fail@plt+0x3cb0>
   15358:	add	sp, sp, #8
   1535c:	ldrd	r4, [sp]
   15360:	ldr	r6, [sp, #8]
   15364:	add	sp, sp, #12
   15368:	pop	{pc}		; (ldr pc, [sp], #4)
   1536c:	movw	r1, #8764	; 0x223c
   15370:	movt	r1, #2
   15374:	mov	r2, #5
   15378:	mov	r0, #0
   1537c:	bl	113bc <dcgettext@plt>
   15380:	mov	r6, r0
   15384:	ldr	r0, [r4]
   15388:	cmp	r0, #0
   1538c:	beq	153c4 <__assert_fail@plt+0x3cc0>
   15390:	ldr	r4, [r5]
   15394:	bl	1c5a8 <__assert_fail@plt+0xaea4>
   15398:	mov	r3, r0
   1539c:	movw	r2, #8776	; 0x2248
   153a0:	movt	r2, #2
   153a4:	mov	r0, #0
   153a8:	str	r6, [sp]
   153ac:	mov	r1, r4
   153b0:	bl	11494 <error@plt>
   153b4:	movw	r3, #13012	; 0x32d4
   153b8:	movt	r3, #3
   153bc:	ldr	r0, [r3]
   153c0:	bl	11368 <_exit@plt>
   153c4:	mov	r3, r6
   153c8:	movw	r2, #8780	; 0x224c
   153cc:	movt	r2, #2
   153d0:	ldr	r1, [r5]
   153d4:	bl	11494 <error@plt>
   153d8:	b	153b4 <__assert_fail@plt+0x3cb0>
   153dc:	str	r4, [sp, #-8]!
   153e0:	str	lr, [sp, #4]
   153e4:	bl	154a0 <__assert_fail@plt+0x3d9c>
   153e8:	cmp	r0, #0
   153ec:	beq	153fc <__assert_fail@plt+0x3cf8>
   153f0:	ldr	r4, [sp]
   153f4:	add	sp, sp, #4
   153f8:	pop	{pc}		; (ldr pc, [sp], #4)
   153fc:	bl	1e22c <__assert_fail@plt+0xcb28>
   15400:	strd	r4, [sp, #-16]!
   15404:	mov	r4, r0
   15408:	str	r6, [sp, #8]
   1540c:	str	lr, [sp, #12]
   15410:	ldrb	ip, [r0]
   15414:	sub	r5, ip, #47	; 0x2f
   15418:	clz	r5, r5
   1541c:	bl	20078 <__assert_fail@plt+0xe974>
   15420:	lsr	r5, r5, #5
   15424:	sub	r0, r0, r4
   15428:	cmp	r0, r5
   1542c:	bls	15488 <__assert_fail@plt+0x3d84>
   15430:	sub	r3, r0, #1
   15434:	ldrb	r2, [r4, r3]
   15438:	cmp	r2, #47	; 0x2f
   1543c:	bne	15488 <__assert_fail@plt+0x3d84>
   15440:	cmp	r3, r5
   15444:	bls	15498 <__assert_fail@plt+0x3d94>
   15448:	add	r2, r4, r0
   1544c:	ldrb	r2, [r2, #-2]
   15450:	cmp	r2, #47	; 0x2f
   15454:	bne	15498 <__assert_fail@plt+0x3d94>
   15458:	sub	r0, r0, #3
   1545c:	sub	ip, r4, #1
   15460:	add	r3, r4, r0
   15464:	add	ip, ip, r5
   15468:	rsb	r2, r4, #1
   1546c:	b	1547c <__assert_fail@plt+0x3d78>
   15470:	ldrb	r1, [r3], #-1
   15474:	cmp	r1, #47	; 0x2f
   15478:	bne	15488 <__assert_fail@plt+0x3d84>
   1547c:	cmp	r3, ip
   15480:	add	r0, r2, r3
   15484:	bne	15470 <__assert_fail@plt+0x3d6c>
   15488:	ldrd	r4, [sp]
   1548c:	ldr	r6, [sp, #8]
   15490:	add	sp, sp, #12
   15494:	pop	{pc}		; (ldr pc, [sp], #4)
   15498:	mov	r0, r3
   1549c:	b	15488 <__assert_fail@plt+0x3d84>
   154a0:	strd	r4, [sp, #-16]!
   154a4:	mov	r5, r0
   154a8:	str	r6, [sp, #8]
   154ac:	str	lr, [sp, #12]
   154b0:	ldrb	r6, [r0]
   154b4:	bl	20078 <__assert_fail@plt+0xe974>
   154b8:	sub	r4, r0, r5
   154bc:	sub	r6, r6, #47	; 0x2f
   154c0:	clz	r6, r6
   154c4:	lsr	r6, r6, #5
   154c8:	cmp	r6, r4
   154cc:	bcs	15528 <__assert_fail@plt+0x3e24>
   154d0:	sub	r3, r4, #1
   154d4:	ldrb	r2, [r5, r3]
   154d8:	cmp	r2, #47	; 0x2f
   154dc:	bne	15580 <__assert_fail@plt+0x3e7c>
   154e0:	cmp	r6, r3
   154e4:	bcs	155b0 <__assert_fail@plt+0x3eac>
   154e8:	add	r2, r5, r4
   154ec:	ldrb	r2, [r2, #-2]
   154f0:	cmp	r2, #47	; 0x2f
   154f4:	bne	1557c <__assert_fail@plt+0x3e78>
   154f8:	sub	r4, r4, #3
   154fc:	sub	r2, r5, #1
   15500:	add	r3, r5, r4
   15504:	add	r6, r2, r6
   15508:	rsb	r1, r5, #1
   1550c:	b	1551c <__assert_fail@plt+0x3e18>
   15510:	ldrb	r2, [r3], #-1
   15514:	cmp	r2, #47	; 0x2f
   15518:	bne	15580 <__assert_fail@plt+0x3e7c>
   1551c:	cmp	r3, r6
   15520:	add	r4, r1, r3
   15524:	bne	15510 <__assert_fail@plt+0x3e0c>
   15528:	add	r0, r4, #1
   1552c:	cmp	r4, #0
   15530:	addeq	r0, r0, #1
   15534:	bl	1f110 <__assert_fail@plt+0xda0c>
   15538:	subs	r6, r0, #0
   1553c:	beq	155a8 <__assert_fail@plt+0x3ea4>
   15540:	mov	r1, r5
   15544:	mov	r2, r4
   15548:	bl	11374 <memcpy@plt>
   1554c:	cmp	r4, #0
   15550:	bne	15560 <__assert_fail@plt+0x3e5c>
   15554:	mov	r3, #46	; 0x2e
   15558:	mov	r4, #1
   1555c:	strb	r3, [r6]
   15560:	mov	r3, #0
   15564:	strb	r3, [r6, r4]
   15568:	mov	r0, r6
   1556c:	ldrd	r4, [sp]
   15570:	ldr	r6, [sp, #8]
   15574:	add	sp, sp, #12
   15578:	pop	{pc}		; (ldr pc, [sp], #4)
   1557c:	mov	r4, r3
   15580:	add	r0, r4, #1
   15584:	cmp	r4, #0
   15588:	addeq	r0, r0, #1
   1558c:	bl	1f110 <__assert_fail@plt+0xda0c>
   15590:	subs	r6, r0, #0
   15594:	beq	155a8 <__assert_fail@plt+0x3ea4>
   15598:	mov	r1, r5
   1559c:	mov	r2, r4
   155a0:	bl	11374 <memcpy@plt>
   155a4:	b	15560 <__assert_fail@plt+0x3e5c>
   155a8:	mov	r6, #0
   155ac:	b	15568 <__assert_fail@plt+0x3e64>
   155b0:	mov	r4, r3
   155b4:	b	15528 <__assert_fail@plt+0x3e24>
   155b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   155bc:	strd	r6, [sp, #8]
   155c0:	str	r8, [sp, #16]
   155c4:	subs	r8, r0, #0
   155c8:	str	lr, [sp, #20]
   155cc:	beq	15638 <__assert_fail@plt+0x3f34>
   155d0:	mov	r0, #24
   155d4:	mov	r4, r1
   155d8:	mov	r7, r2
   155dc:	bl	1dc74 <__assert_fail@plt+0xc570>
   155e0:	mov	r6, r0
   155e4:	mov	r0, r4
   155e8:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   155ec:	ldrd	r4, [r7]
   155f0:	mov	r1, r6
   155f4:	str	r0, [r6]
   155f8:	mov	r0, r8
   155fc:	ldrd	r2, [r7, #96]	; 0x60
   15600:	strd	r2, [r6, #8]
   15604:	strd	r4, [r6, #16]
   15608:	bl	16a64 <__assert_fail@plt+0x5360>
   1560c:	cmp	r0, #0
   15610:	beq	1564c <__assert_fail@plt+0x3f48>
   15614:	cmp	r6, r0
   15618:	beq	15638 <__assert_fail@plt+0x3f34>
   1561c:	mov	r0, r6
   15620:	ldrd	r4, [sp]
   15624:	ldrd	r6, [sp, #8]
   15628:	ldr	r8, [sp, #16]
   1562c:	ldr	lr, [sp, #20]
   15630:	add	sp, sp, #24
   15634:	b	1707c <__assert_fail@plt+0x5978>
   15638:	ldrd	r4, [sp]
   1563c:	ldrd	r6, [sp, #8]
   15640:	ldr	r8, [sp, #16]
   15644:	add	sp, sp, #20
   15648:	pop	{pc}		; (ldr pc, [sp], #4)
   1564c:	bl	1e22c <__assert_fail@plt+0xcb28>
   15650:	subs	r3, r0, #0
   15654:	beq	1569c <__assert_fail@plt+0x3f98>
   15658:	mov	r3, r1
   1565c:	strd	r4, [sp, #-12]!
   15660:	ldrd	r4, [r2, #96]	; 0x60
   15664:	str	lr, [sp, #8]
   15668:	sub	sp, sp, #28
   1566c:	mov	r1, sp
   15670:	str	r3, [sp]
   15674:	ldrd	r2, [r2]
   15678:	strd	r4, [sp, #8]
   1567c:	strd	r2, [sp, #16]
   15680:	bl	15e78 <__assert_fail@plt+0x4774>
   15684:	adds	r0, r0, #0
   15688:	movne	r0, #1
   1568c:	add	sp, sp, #28
   15690:	ldrd	r4, [sp]
   15694:	add	sp, sp, #8
   15698:	pop	{pc}		; (ldr pc, [sp], #4)
   1569c:	mov	r0, r3
   156a0:	bx	lr
   156a4:	strd	r4, [sp, #-12]!
   156a8:	mov	r5, r0
   156ac:	str	lr, [sp, #8]
   156b0:	sub	sp, sp, #12
   156b4:	bl	1156c <__errno_location@plt>
   156b8:	mov	r4, r0
   156bc:	mov	r2, #0
   156c0:	ldr	r3, [r4]
   156c4:	mov	r0, r5
   156c8:	str	r2, [r4]
   156cc:	str	r3, [sp]
   156d0:	str	r3, [sp, #4]
   156d4:	bl	11350 <free@plt>
   156d8:	ldr	r3, [r4]
   156dc:	add	r2, sp, #8
   156e0:	clz	r3, r3
   156e4:	lsr	r3, r3, #5
   156e8:	add	r3, r2, r3, lsl #2
   156ec:	ldr	r3, [r3, #-8]
   156f0:	str	r3, [r4]
   156f4:	add	sp, sp, #12
   156f8:	ldrd	r4, [sp]
   156fc:	add	sp, sp, #8
   15700:	pop	{pc}		; (ldr pc, [sp], #4)
   15704:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15708:	movw	r4, #13016	; 0x32d8
   1570c:	movt	r4, #3
   15710:	ldr	r3, [r4]
   15714:	strd	r6, [sp, #8]
   15718:	mov	r6, r0
   1571c:	strd	r8, [sp, #16]
   15720:	str	sl, [sp, #24]
   15724:	mov	sl, r2
   15728:	str	lr, [sp, #28]
   1572c:	sub	sp, sp, #392	; 0x188
   15730:	cmp	r3, #0
   15734:	mov	r5, sp
   15738:	blt	15778 <__assert_fail@plt+0x4074>
   1573c:	beq	15790 <__assert_fail@plt+0x408c>
   15740:	mov	r1, r5
   15744:	mov	r0, r6
   15748:	bl	115a8 <statvfs64@plt>
   1574c:	cmp	r0, #0
   15750:	blt	1582c <__assert_fail@plt+0x4128>
   15754:	ldr	r3, [sp, #4]
   15758:	cmp	r3, #0
   1575c:	beq	15834 <__assert_fail@plt+0x4130>
   15760:	cmn	r3, #1
   15764:	mov	r2, r3
   15768:	movne	r3, #0
   1576c:	bne	15840 <__assert_fail@plt+0x413c>
   15770:	mov	r3, r2
   15774:	b	15840 <__assert_fail@plt+0x413c>
   15778:	mov	r0, r5
   1577c:	bl	113b0 <uname@plt>
   15780:	subs	r7, r0, #0
   15784:	movne	r3, #0
   15788:	strne	r3, [r4]
   1578c:	beq	15898 <__assert_fail@plt+0x4194>
   15790:	mov	r1, r5
   15794:	mov	r0, r6
   15798:	bl	11638 <statfs64@plt>
   1579c:	cmp	r0, #0
   157a0:	blt	1582c <__assert_fail@plt+0x4128>
   157a4:	mov	ip, #0
   157a8:	ldrd	r4, [sp, #8]
   157ac:	mov	r0, ip
   157b0:	ldr	r2, [sp, #60]	; 0x3c
   157b4:	ldr	r1, [sp, #28]
   157b8:	strd	r4, [sl, #8]
   157bc:	ldrd	r4, [sp, #40]	; 0x28
   157c0:	cmn	r2, #1
   157c4:	asrne	r3, r2, #31
   157c8:	mvneq	r2, #0
   157cc:	mvneq	r3, #0
   157d0:	rsbs	r6, ip, #0
   157d4:	ldr	ip, [sp, #24]
   157d8:	and	r7, r1, #-2147483648	; 0x80000000
   157dc:	rsc	r7, r7, #0
   157e0:	orr	lr, r7, r1
   157e4:	strd	r2, [sl]
   157e8:	lsr	r1, r1, #31
   157ec:	ldrd	r2, [sp, #16]
   157f0:	orr	ip, r6, ip
   157f4:	ldrd	r6, [sp, #32]
   157f8:	strd	r2, [sl, #16]
   157fc:	str	ip, [sl, #24]
   15800:	str	lr, [sl, #28]
   15804:	strb	r1, [sl, #32]
   15808:	strd	r6, [sl, #40]	; 0x28
   1580c:	strd	r4, [sl, #48]	; 0x30
   15810:	add	sp, sp, #392	; 0x188
   15814:	ldrd	r4, [sp]
   15818:	ldrd	r6, [sp, #8]
   1581c:	ldrd	r8, [sp, #16]
   15820:	ldr	sl, [sp, #24]
   15824:	add	sp, sp, #28
   15828:	pop	{pc}		; (ldr pc, [sp], #4)
   1582c:	mvn	r0, #0
   15830:	b	15810 <__assert_fail@plt+0x410c>
   15834:	ldr	r2, [sp]
   15838:	cmn	r2, #1
   1583c:	beq	15770 <__assert_fail@plt+0x406c>
   15840:	ldrd	r6, [sp, #8]
   15844:	mov	ip, #0
   15848:	strd	r2, [sl]
   1584c:	rsbs	r4, ip, #0
   15850:	mov	r0, ip
   15854:	ldrd	r2, [sp, #16]
   15858:	ldr	r1, [sp, #28]
   1585c:	strd	r6, [sl, #8]
   15860:	ldr	ip, [sp, #24]
   15864:	strd	r2, [sl, #16]
   15868:	ldrd	r8, [sp, #32]
   1586c:	and	r5, r1, #-2147483648	; 0x80000000
   15870:	ldrd	r6, [sp, #40]	; 0x28
   15874:	rsc	r5, r5, #0
   15878:	orr	r3, r5, r1
   1587c:	lsr	r1, r1, #31
   15880:	orr	r2, r4, ip
   15884:	strd	r2, [sl, #24]
   15888:	strb	r1, [sl, #32]
   1588c:	strd	r8, [sl, #40]	; 0x28
   15890:	strd	r6, [sl, #48]	; 0x30
   15894:	b	15810 <__assert_fail@plt+0x410c>
   15898:	movw	r1, #8784	; 0x2250
   1589c:	movt	r1, #2
   158a0:	add	r0, r5, #130	; 0x82
   158a4:	bl	11308 <strverscmp@plt>
   158a8:	cmp	r0, #0
   158ac:	movge	r3, #1
   158b0:	strlt	r7, [r4]
   158b4:	strge	r3, [r4]
   158b8:	bge	15740 <__assert_fail@plt+0x403c>
   158bc:	b	15790 <__assert_fail@plt+0x408c>
   158c0:	ror	r0, r0, #3
   158c4:	udiv	r3, r0, r1
   158c8:	mls	r0, r3, r1, r0
   158cc:	bx	lr
   158d0:	sub	r0, r1, r0
   158d4:	clz	r0, r0
   158d8:	lsr	r0, r0, #5
   158dc:	bx	lr
   158e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158e4:	mov	r5, r1
   158e8:	strd	r6, [sp, #8]
   158ec:	mov	r6, r0
   158f0:	mov	r7, r3
   158f4:	mov	r0, r1
   158f8:	strd	r8, [sp, #16]
   158fc:	strd	sl, [sp, #24]
   15900:	mov	fp, r2
   15904:	str	lr, [sp, #32]
   15908:	sub	sp, sp, #4
   1590c:	ldr	r1, [r6, #8]
   15910:	ldr	r3, [r6, #24]
   15914:	blx	r3
   15918:	ldr	r3, [r6, #8]
   1591c:	cmp	r0, r3
   15920:	bcs	15a3c <__assert_fail@plt+0x4338>
   15924:	ldr	r8, [r6]
   15928:	lsl	r9, r0, #3
   1592c:	mov	sl, r0
   15930:	add	r4, r8, r9
   15934:	str	r4, [fp]
   15938:	ldr	r1, [r8, r0, lsl #3]
   1593c:	cmp	r1, #0
   15940:	beq	15a34 <__assert_fail@plt+0x4330>
   15944:	cmp	r1, r5
   15948:	beq	159fc <__assert_fail@plt+0x42f8>
   1594c:	mov	r0, r5
   15950:	ldr	r3, [r6, #28]
   15954:	blx	r3
   15958:	cmp	r0, #0
   1595c:	bne	159f8 <__assert_fail@plt+0x42f4>
   15960:	ldr	r3, [r4, #4]
   15964:	cmp	r3, #0
   15968:	beq	15a34 <__assert_fail@plt+0x4330>
   1596c:	ldr	r1, [r3]
   15970:	cmp	r5, r1
   15974:	bne	15998 <__assert_fail@plt+0x4294>
   15978:	b	159b4 <__assert_fail@plt+0x42b0>
   1597c:	ldr	r4, [r4, #4]
   15980:	ldr	r3, [r4, #4]
   15984:	cmp	r3, #0
   15988:	beq	15a34 <__assert_fail@plt+0x4330>
   1598c:	ldr	r1, [r3]
   15990:	cmp	r1, r5
   15994:	beq	159b4 <__assert_fail@plt+0x42b0>
   15998:	mov	r0, r5
   1599c:	ldr	r3, [r6, #28]
   159a0:	blx	r3
   159a4:	cmp	r0, #0
   159a8:	beq	1597c <__assert_fail@plt+0x4278>
   159ac:	ldr	r3, [r4, #4]
   159b0:	ldr	r1, [r3]
   159b4:	cmp	r7, #0
   159b8:	beq	159d8 <__assert_fail@plt+0x42d4>
   159bc:	ldr	r0, [r3, #4]
   159c0:	mov	r2, #0
   159c4:	str	r0, [r4, #4]
   159c8:	str	r2, [r3]
   159cc:	ldr	r2, [r6, #36]	; 0x24
   159d0:	str	r2, [r3, #4]
   159d4:	str	r3, [r6, #36]	; 0x24
   159d8:	mov	r0, r1
   159dc:	add	sp, sp, #4
   159e0:	ldrd	r4, [sp]
   159e4:	ldrd	r6, [sp, #8]
   159e8:	ldrd	r8, [sp, #16]
   159ec:	ldrd	sl, [sp, #24]
   159f0:	add	sp, sp, #32
   159f4:	pop	{pc}		; (ldr pc, [sp], #4)
   159f8:	ldr	r1, [r8, sl, lsl #3]
   159fc:	cmp	r7, #0
   15a00:	beq	159d8 <__assert_fail@plt+0x42d4>
   15a04:	ldr	r0, [r4, #4]
   15a08:	cmp	r0, #0
   15a0c:	streq	r0, [r8, sl, lsl #3]
   15a10:	beq	159d8 <__assert_fail@plt+0x42d4>
   15a14:	ldrd	r2, [r0]
   15a18:	mov	ip, #0
   15a1c:	strd	r2, [r8, r9]
   15a20:	str	ip, [r0]
   15a24:	ldr	r3, [r6, #36]	; 0x24
   15a28:	str	r3, [r0, #4]
   15a2c:	str	r0, [r6, #36]	; 0x24
   15a30:	b	159d8 <__assert_fail@plt+0x42d4>
   15a34:	mov	r1, #0
   15a38:	b	159d8 <__assert_fail@plt+0x42d4>
   15a3c:	bl	116e0 <abort@plt>
   15a40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15a44:	ldr	r3, [r1, #4]
   15a48:	strd	r6, [sp, #8]
   15a4c:	ldr	r6, [r1]
   15a50:	strd	r8, [sp, #16]
   15a54:	str	sl, [sp, #24]
   15a58:	str	lr, [sp, #28]
   15a5c:	cmp	r6, r3
   15a60:	bcs	15b40 <__assert_fail@plt+0x443c>
   15a64:	mov	r8, r2
   15a68:	mov	r5, r0
   15a6c:	mov	r7, r1
   15a70:	add	r6, r6, #8
   15a74:	mov	r9, #0
   15a78:	b	15a88 <__assert_fail@plt+0x4384>
   15a7c:	cmp	r3, r6
   15a80:	add	r6, r6, #8
   15a84:	bls	15b40 <__assert_fail@plt+0x443c>
   15a88:	ldr	sl, [r6, #-8]
   15a8c:	cmp	sl, #0
   15a90:	beq	15a7c <__assert_fail@plt+0x4378>
   15a94:	ldr	r4, [r6, #-4]
   15a98:	cmp	r4, #0
   15a9c:	beq	15b24 <__assert_fail@plt+0x4420>
   15aa0:	ldr	r1, [r5, #8]
   15aa4:	b	15ac0 <__assert_fail@plt+0x43bc>
   15aa8:	ldr	r3, [ip, #4]
   15aac:	cmp	r2, #0
   15ab0:	str	r3, [r4, #4]
   15ab4:	str	r4, [ip, #4]
   15ab8:	mov	r4, r2
   15abc:	beq	15b20 <__assert_fail@plt+0x441c>
   15ac0:	ldr	sl, [r4]
   15ac4:	ldr	r3, [r5, #24]
   15ac8:	mov	r0, sl
   15acc:	blx	r3
   15ad0:	ldr	r1, [r5, #8]
   15ad4:	cmp	r0, r1
   15ad8:	bcs	15bf4 <__assert_fail@plt+0x44f0>
   15adc:	ldr	r3, [r5]
   15ae0:	ldr	r2, [r4, #4]
   15ae4:	ldr	lr, [r3, r0, lsl #3]
   15ae8:	add	ip, r3, r0, lsl #3
   15aec:	cmp	lr, #0
   15af0:	bne	15aa8 <__assert_fail@plt+0x43a4>
   15af4:	ldr	ip, [r5, #12]
   15af8:	cmp	r2, #0
   15afc:	str	sl, [r3, r0, lsl #3]
   15b00:	add	ip, ip, #1
   15b04:	str	ip, [r5, #12]
   15b08:	str	lr, [r4]
   15b0c:	ldr	r3, [r5, #36]	; 0x24
   15b10:	str	r3, [r4, #4]
   15b14:	str	r4, [r5, #36]	; 0x24
   15b18:	mov	r4, r2
   15b1c:	bne	15ac0 <__assert_fail@plt+0x43bc>
   15b20:	ldr	sl, [r6, #-8]
   15b24:	cmp	r8, #0
   15b28:	str	r9, [r6, #-4]
   15b2c:	beq	15b5c <__assert_fail@plt+0x4458>
   15b30:	ldr	r3, [r7, #4]
   15b34:	cmp	r3, r6
   15b38:	add	r6, r6, #8
   15b3c:	bhi	15a88 <__assert_fail@plt+0x4384>
   15b40:	mov	r0, #1
   15b44:	ldrd	r4, [sp]
   15b48:	ldrd	r6, [sp, #8]
   15b4c:	ldrd	r8, [sp, #16]
   15b50:	ldr	sl, [sp, #24]
   15b54:	add	sp, sp, #28
   15b58:	pop	{pc}		; (ldr pc, [sp], #4)
   15b5c:	mov	r0, sl
   15b60:	ldr	r1, [r5, #8]
   15b64:	ldr	r3, [r5, #24]
   15b68:	blx	r3
   15b6c:	ldr	r3, [r5, #8]
   15b70:	cmp	r0, r3
   15b74:	bcs	15bf4 <__assert_fail@plt+0x44f0>
   15b78:	ldr	r3, [r5]
   15b7c:	ldr	r2, [r3, r0, lsl #3]
   15b80:	add	r4, r3, r0, lsl #3
   15b84:	cmp	r2, #0
   15b88:	beq	15bc8 <__assert_fail@plt+0x44c4>
   15b8c:	ldr	r0, [r5, #36]	; 0x24
   15b90:	cmp	r0, #0
   15b94:	beq	15bdc <__assert_fail@plt+0x44d8>
   15b98:	ldr	r3, [r0, #4]
   15b9c:	str	r3, [r5, #36]	; 0x24
   15ba0:	ldr	r3, [r4, #4]
   15ba4:	str	sl, [r0]
   15ba8:	str	r3, [r0, #4]
   15bac:	str	r0, [r4, #4]
   15bb0:	ldr	r2, [r7, #12]
   15bb4:	str	r9, [r6, #-8]
   15bb8:	ldr	r3, [r7, #4]
   15bbc:	sub	r2, r2, #1
   15bc0:	str	r2, [r7, #12]
   15bc4:	b	15a7c <__assert_fail@plt+0x4378>
   15bc8:	ldr	r2, [r5, #12]
   15bcc:	str	sl, [r3, r0, lsl #3]
   15bd0:	add	r2, r2, #1
   15bd4:	str	r2, [r5, #12]
   15bd8:	b	15bb0 <__assert_fail@plt+0x44ac>
   15bdc:	mov	r0, #8
   15be0:	bl	1f110 <__assert_fail@plt+0xda0c>
   15be4:	cmp	r0, #0
   15be8:	bne	15ba0 <__assert_fail@plt+0x449c>
   15bec:	mov	r0, r8
   15bf0:	b	15b44 <__assert_fail@plt+0x4440>
   15bf4:	bl	116e0 <abort@plt>
   15bf8:	ldr	r0, [r0, #8]
   15bfc:	bx	lr
   15c00:	ldr	r0, [r0, #12]
   15c04:	bx	lr
   15c08:	ldr	r0, [r0, #16]
   15c0c:	bx	lr
   15c10:	ldm	r0, {r1, r3}
   15c14:	cmp	r1, r3
   15c18:	bcs	15c8c <__assert_fail@plt+0x4588>
   15c1c:	sub	ip, r3, #1
   15c20:	add	r3, r1, #16
   15c24:	sub	ip, ip, r1
   15c28:	mov	r0, #0
   15c2c:	bic	ip, ip, #7
   15c30:	add	r1, r1, #8
   15c34:	add	ip, ip, r3
   15c38:	b	15c48 <__assert_fail@plt+0x4544>
   15c3c:	add	r1, r1, #8
   15c40:	cmp	r1, ip
   15c44:	beq	15c88 <__assert_fail@plt+0x4584>
   15c48:	ldr	r3, [r1, #-8]
   15c4c:	cmp	r3, #0
   15c50:	beq	15c3c <__assert_fail@plt+0x4538>
   15c54:	ldr	r3, [r1, #-4]
   15c58:	mov	r2, #1
   15c5c:	cmp	r3, #0
   15c60:	beq	15c74 <__assert_fail@plt+0x4570>
   15c64:	ldr	r3, [r3, #4]
   15c68:	add	r2, r2, #1
   15c6c:	cmp	r3, #0
   15c70:	bne	15c64 <__assert_fail@plt+0x4560>
   15c74:	cmp	r0, r2
   15c78:	add	r1, r1, #8
   15c7c:	movcc	r0, r2
   15c80:	cmp	r1, ip
   15c84:	bne	15c48 <__assert_fail@plt+0x4544>
   15c88:	bx	lr
   15c8c:	mov	r0, #0
   15c90:	bx	lr
   15c94:	ldm	r0, {r1, r3}
   15c98:	push	{lr}		; (str lr, [sp, #-4]!)
   15c9c:	cmp	r1, r3
   15ca0:	bcs	15d34 <__assert_fail@plt+0x4630>
   15ca4:	sub	ip, r3, #1
   15ca8:	mov	r2, #0
   15cac:	sub	ip, ip, r1
   15cb0:	add	r3, r1, #16
   15cb4:	bic	ip, ip, #7
   15cb8:	add	r1, r1, #8
   15cbc:	add	ip, ip, r3
   15cc0:	mov	lr, r2
   15cc4:	b	15cd4 <__assert_fail@plt+0x45d0>
   15cc8:	add	r1, r1, #8
   15ccc:	cmp	r1, ip
   15cd0:	beq	15d10 <__assert_fail@plt+0x460c>
   15cd4:	ldr	r3, [r1, #-8]
   15cd8:	cmp	r3, #0
   15cdc:	beq	15cc8 <__assert_fail@plt+0x45c4>
   15ce0:	ldr	r3, [r1, #-4]
   15ce4:	add	lr, lr, #1
   15ce8:	add	r2, r2, #1
   15cec:	cmp	r3, #0
   15cf0:	beq	15cc8 <__assert_fail@plt+0x45c4>
   15cf4:	ldr	r3, [r3, #4]
   15cf8:	add	r2, r2, #1
   15cfc:	cmp	r3, #0
   15d00:	bne	15cf4 <__assert_fail@plt+0x45f0>
   15d04:	add	r1, r1, #8
   15d08:	cmp	r1, ip
   15d0c:	bne	15cd4 <__assert_fail@plt+0x45d0>
   15d10:	ldr	r3, [r0, #12]
   15d14:	cmp	r3, lr
   15d18:	movne	r0, #0
   15d1c:	bne	15d30 <__assert_fail@plt+0x462c>
   15d20:	ldr	r0, [r0, #16]
   15d24:	sub	r0, r0, r2
   15d28:	clz	r0, r0
   15d2c:	lsr	r0, r0, #5
   15d30:	pop	{pc}		; (ldr pc, [sp], #4)
   15d34:	mov	r2, #0
   15d38:	mov	lr, r2
   15d3c:	b	15d10 <__assert_fail@plt+0x460c>
   15d40:	strd	r4, [sp, #-20]!	; 0xffffffec
   15d44:	mov	r4, r1
   15d48:	ldr	r2, [r0]
   15d4c:	ldr	r1, [r0, #4]
   15d50:	ldr	r3, [r0, #16]
   15d54:	strd	r6, [sp, #8]
   15d58:	str	lr, [sp, #16]
   15d5c:	sub	sp, sp, #12
   15d60:	cmp	r2, r1
   15d64:	ldrd	r6, [r0, #8]
   15d68:	bcs	15e68 <__assert_fail@plt+0x4764>
   15d6c:	sub	ip, r1, #1
   15d70:	add	r1, r2, #16
   15d74:	sub	ip, ip, r2
   15d78:	add	r0, r2, #8
   15d7c:	bic	ip, ip, #7
   15d80:	mov	r5, #0
   15d84:	add	ip, ip, r1
   15d88:	b	15d98 <__assert_fail@plt+0x4694>
   15d8c:	add	r0, r0, #8
   15d90:	cmp	r0, ip
   15d94:	beq	15dd8 <__assert_fail@plt+0x46d4>
   15d98:	ldr	r2, [r0, #-8]
   15d9c:	cmp	r2, #0
   15da0:	beq	15d8c <__assert_fail@plt+0x4688>
   15da4:	ldr	r2, [r0, #-4]
   15da8:	mov	r1, #1
   15dac:	cmp	r2, #0
   15db0:	beq	15dc4 <__assert_fail@plt+0x46c0>
   15db4:	ldr	r2, [r2, #4]
   15db8:	add	r1, r1, #1
   15dbc:	cmp	r2, #0
   15dc0:	bne	15db4 <__assert_fail@plt+0x46b0>
   15dc4:	cmp	r5, r1
   15dc8:	add	r0, r0, #8
   15dcc:	movcc	r5, r1
   15dd0:	cmp	r0, ip
   15dd4:	bne	15d98 <__assert_fail@plt+0x4694>
   15dd8:	mov	r1, #1
   15ddc:	mov	r0, r4
   15de0:	movw	r2, #8812	; 0x226c
   15de4:	movt	r2, #2
   15de8:	bl	115c0 <__fprintf_chk@plt>
   15dec:	mov	r3, r6
   15df0:	mov	r1, #1
   15df4:	mov	r0, r4
   15df8:	movw	r2, #8836	; 0x2284
   15dfc:	movt	r2, #2
   15e00:	bl	115c0 <__fprintf_chk@plt>
   15e04:	vmov	s15, r7
   15e08:	mov	r3, r7
   15e0c:	mov	r1, #1
   15e10:	vldr	d5, [pc, #88]	; 15e70 <__assert_fail@plt+0x476c>
   15e14:	mov	r0, r4
   15e18:	movw	r2, #8860	; 0x229c
   15e1c:	movt	r2, #2
   15e20:	vcvt.f64.u32	d6, s15
   15e24:	vmov	s15, r6
   15e28:	vmul.f64	d6, d6, d5
   15e2c:	vcvt.f64.u32	d7, s15
   15e30:	vdiv.f64	d5, d6, d7
   15e34:	vstr	d5, [sp]
   15e38:	bl	115c0 <__fprintf_chk@plt>
   15e3c:	mov	r3, r5
   15e40:	mov	r0, r4
   15e44:	movw	r2, #8896	; 0x22c0
   15e48:	movt	r2, #2
   15e4c:	mov	r1, #1
   15e50:	add	sp, sp, #12
   15e54:	ldrd	r4, [sp]
   15e58:	ldrd	r6, [sp, #8]
   15e5c:	ldr	lr, [sp, #16]
   15e60:	add	sp, sp, #20
   15e64:	b	115c0 <__fprintf_chk@plt>
   15e68:	mov	r5, #0
   15e6c:	b	15dd8 <__assert_fail@plt+0x46d4>
   15e70:	andeq	r0, r0, r0
   15e74:	subsmi	r0, r9, r0
   15e78:	strd	r4, [sp, #-16]!
   15e7c:	mov	r5, r1
   15e80:	str	r6, [sp, #8]
   15e84:	mov	r6, r0
   15e88:	mov	r0, r1
   15e8c:	str	lr, [sp, #12]
   15e90:	ldr	r1, [r6, #8]
   15e94:	ldr	r3, [r6, #24]
   15e98:	blx	r3
   15e9c:	ldr	r3, [r6, #8]
   15ea0:	cmp	r0, r3
   15ea4:	bcs	15f14 <__assert_fail@plt+0x4810>
   15ea8:	ldr	r4, [r6]
   15eac:	ldr	r1, [r4, r0, lsl #3]
   15eb0:	add	r4, r4, r0, lsl #3
   15eb4:	cmp	r1, #0
   15eb8:	beq	15ef4 <__assert_fail@plt+0x47f0>
   15ebc:	cmp	r1, r5
   15ec0:	bne	15ed4 <__assert_fail@plt+0x47d0>
   15ec4:	b	15ef8 <__assert_fail@plt+0x47f4>
   15ec8:	ldr	r1, [r4]
   15ecc:	cmp	r5, r1
   15ed0:	beq	15ef8 <__assert_fail@plt+0x47f4>
   15ed4:	mov	r0, r5
   15ed8:	ldr	r3, [r6, #28]
   15edc:	blx	r3
   15ee0:	cmp	r0, #0
   15ee4:	bne	15f0c <__assert_fail@plt+0x4808>
   15ee8:	ldr	r4, [r4, #4]
   15eec:	cmp	r4, #0
   15ef0:	bne	15ec8 <__assert_fail@plt+0x47c4>
   15ef4:	mov	r1, #0
   15ef8:	ldrd	r4, [sp]
   15efc:	mov	r0, r1
   15f00:	ldr	r6, [sp, #8]
   15f04:	add	sp, sp, #12
   15f08:	pop	{pc}		; (ldr pc, [sp], #4)
   15f0c:	ldr	r1, [r4]
   15f10:	b	15ef8 <__assert_fail@plt+0x47f4>
   15f14:	bl	116e0 <abort@plt>
   15f18:	ldr	r3, [r0, #16]
   15f1c:	cmp	r3, #0
   15f20:	beq	15f74 <__assert_fail@plt+0x4870>
   15f24:	ldr	r3, [r0]
   15f28:	ldr	r2, [r0, #4]
   15f2c:	cmp	r3, r2
   15f30:	bcs	15f68 <__assert_fail@plt+0x4864>
   15f34:	ldr	r0, [r3]
   15f38:	cmp	r0, #0
   15f3c:	bxne	lr
   15f40:	sub	r2, r2, #1
   15f44:	sub	r2, r2, r3
   15f48:	bic	r2, r2, #7
   15f4c:	add	r2, r3, r2
   15f50:	b	15f60 <__assert_fail@plt+0x485c>
   15f54:	ldr	r0, [r3, #8]!
   15f58:	cmp	r0, #0
   15f5c:	bxne	lr
   15f60:	cmp	r3, r2
   15f64:	bne	15f54 <__assert_fail@plt+0x4850>
   15f68:	str	r4, [sp, #-8]!
   15f6c:	str	lr, [sp, #4]
   15f70:	bl	116e0 <abort@plt>
   15f74:	mov	r0, r3
   15f78:	bx	lr
   15f7c:	strd	r4, [sp, #-16]!
   15f80:	mov	r5, r0
   15f84:	mov	r4, r1
   15f88:	mov	r0, r1
   15f8c:	ldr	r1, [r5, #8]
   15f90:	ldr	r3, [r5, #24]
   15f94:	str	r6, [sp, #8]
   15f98:	str	lr, [sp, #12]
   15f9c:	blx	r3
   15fa0:	ldr	r3, [r5, #8]
   15fa4:	cmp	r0, r3
   15fa8:	bcs	16010 <__assert_fail@plt+0x490c>
   15fac:	ldr	r2, [r5]
   15fb0:	add	r2, r2, r0, lsl #3
   15fb4:	mov	r3, r2
   15fb8:	b	15fc4 <__assert_fail@plt+0x48c0>
   15fbc:	cmp	r3, #0
   15fc0:	beq	15fdc <__assert_fail@plt+0x48d8>
   15fc4:	ldm	r3, {r1, r3}
   15fc8:	cmp	r1, r4
   15fcc:	bne	15fbc <__assert_fail@plt+0x48b8>
   15fd0:	cmp	r3, #0
   15fd4:	ldrne	r0, [r3]
   15fd8:	bne	16000 <__assert_fail@plt+0x48fc>
   15fdc:	ldr	r3, [r5, #4]
   15fe0:	b	15ff0 <__assert_fail@plt+0x48ec>
   15fe4:	ldr	r0, [r2]
   15fe8:	cmp	r0, #0
   15fec:	bne	16000 <__assert_fail@plt+0x48fc>
   15ff0:	add	r2, r2, #8
   15ff4:	cmp	r3, r2
   15ff8:	bhi	15fe4 <__assert_fail@plt+0x48e0>
   15ffc:	mov	r0, #0
   16000:	ldrd	r4, [sp]
   16004:	ldr	r6, [sp, #8]
   16008:	add	sp, sp, #12
   1600c:	pop	{pc}		; (ldr pc, [sp], #4)
   16010:	bl	116e0 <abort@plt>
   16014:	strd	r4, [sp, #-16]!
   16018:	mov	r3, #0
   1601c:	ldr	r5, [r0]
   16020:	str	r6, [sp, #8]
   16024:	str	lr, [sp, #12]
   16028:	ldr	lr, [r0, #4]
   1602c:	cmp	lr, r5
   16030:	bls	1604c <__assert_fail@plt+0x4948>
   16034:	ldr	ip, [r5]
   16038:	cmp	ip, #0
   1603c:	bne	16060 <__assert_fail@plt+0x495c>
   16040:	add	r5, r5, #8
   16044:	cmp	r5, lr
   16048:	bcc	16034 <__assert_fail@plt+0x4930>
   1604c:	ldrd	r4, [sp]
   16050:	mov	r0, r3
   16054:	ldr	r6, [sp, #8]
   16058:	add	sp, sp, #12
   1605c:	pop	{pc}		; (ldr pc, [sp], #4)
   16060:	cmp	r2, r3
   16064:	bls	1604c <__assert_fail@plt+0x4948>
   16068:	str	ip, [r1, r3, lsl #2]
   1606c:	add	r4, r3, #1
   16070:	lsl	lr, r3, #2
   16074:	ldr	ip, [r5, #4]
   16078:	cmp	ip, #0
   1607c:	beq	160dc <__assert_fail@plt+0x49d8>
   16080:	cmp	r2, r4
   16084:	bls	160d0 <__assert_fail@plt+0x49cc>
   16088:	ldr	r6, [ip]
   1608c:	add	r3, r3, #2
   16090:	str	r6, [r1, r4, lsl #2]
   16094:	ldr	ip, [ip, #4]
   16098:	cmp	ip, #0
   1609c:	beq	160c8 <__assert_fail@plt+0x49c4>
   160a0:	add	lr, lr, #4
   160a4:	add	lr, r1, lr
   160a8:	cmp	r2, r3
   160ac:	add	r3, r3, #1
   160b0:	beq	160d4 <__assert_fail@plt+0x49d0>
   160b4:	ldr	r4, [ip]
   160b8:	str	r4, [lr, #4]!
   160bc:	ldr	ip, [ip, #4]
   160c0:	cmp	ip, #0
   160c4:	bne	160a8 <__assert_fail@plt+0x49a4>
   160c8:	ldr	lr, [r0, #4]
   160cc:	b	16040 <__assert_fail@plt+0x493c>
   160d0:	mov	r2, r4
   160d4:	mov	r3, r2
   160d8:	b	1604c <__assert_fail@plt+0x4948>
   160dc:	mov	r3, r4
   160e0:	ldr	lr, [r0, #4]
   160e4:	b	16040 <__assert_fail@plt+0x493c>
   160e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   160ec:	ldr	r3, [r0, #4]
   160f0:	strd	r6, [sp, #8]
   160f4:	strd	r8, [sp, #16]
   160f8:	ldr	r8, [r0]
   160fc:	str	sl, [sp, #24]
   16100:	str	lr, [sp, #28]
   16104:	cmp	r3, r8
   16108:	bls	16184 <__assert_fail@plt+0x4a80>
   1610c:	mov	r7, r2
   16110:	mov	r6, r1
   16114:	mov	r9, r0
   16118:	mov	r5, #0
   1611c:	ldr	r0, [r8]
   16120:	cmp	r0, #0
   16124:	bne	16150 <__assert_fail@plt+0x4a4c>
   16128:	add	r8, r8, #8
   1612c:	cmp	r8, r3
   16130:	bcc	1611c <__assert_fail@plt+0x4a18>
   16134:	mov	r0, r5
   16138:	ldrd	r4, [sp]
   1613c:	ldrd	r6, [sp, #8]
   16140:	ldrd	r8, [sp, #16]
   16144:	ldr	sl, [sp, #24]
   16148:	add	sp, sp, #28
   1614c:	pop	{pc}		; (ldr pc, [sp], #4)
   16150:	mov	r4, r8
   16154:	b	1615c <__assert_fail@plt+0x4a58>
   16158:	ldr	r0, [r4]
   1615c:	mov	r1, r7
   16160:	blx	r6
   16164:	cmp	r0, #0
   16168:	beq	16134 <__assert_fail@plt+0x4a30>
   1616c:	ldr	r4, [r4, #4]
   16170:	add	r5, r5, #1
   16174:	cmp	r4, #0
   16178:	bne	16158 <__assert_fail@plt+0x4a54>
   1617c:	ldr	r3, [r9, #4]
   16180:	b	16128 <__assert_fail@plt+0x4a24>
   16184:	mov	r5, #0
   16188:	b	16134 <__assert_fail@plt+0x4a30>
   1618c:	ldrb	r2, [r0]
   16190:	cmp	r2, #0
   16194:	beq	161c0 <__assert_fail@plt+0x4abc>
   16198:	mov	r3, #0
   1619c:	rsb	r3, r3, r3, lsl #5
   161a0:	add	r3, r3, r2
   161a4:	ldrb	r2, [r0, #1]!
   161a8:	udiv	ip, r3, r1
   161ac:	cmp	r2, #0
   161b0:	mls	r3, r1, ip, r3
   161b4:	bne	1619c <__assert_fail@plt+0x4a98>
   161b8:	mov	r0, r3
   161bc:	bx	lr
   161c0:	mov	r3, r2
   161c4:	mov	r0, r3
   161c8:	bx	lr
   161cc:	movw	r3, #8792	; 0x2258
   161d0:	movt	r3, #2
   161d4:	strd	r4, [sp, #-8]!
   161d8:	ldrd	r4, [r3]
   161dc:	ldr	r1, [r3, #16]
   161e0:	ldrd	r2, [r3, #8]
   161e4:	strd	r4, [r0]
   161e8:	ldrd	r4, [sp]
   161ec:	add	sp, sp, #8
   161f0:	strd	r2, [r0, #8]
   161f4:	str	r1, [r0, #16]
   161f8:	bx	lr
   161fc:	cmp	r2, #0
   16200:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16204:	movw	r4, #22720	; 0x58c0
   16208:	movt	r4, #1
   1620c:	movne	r4, r2
   16210:	strd	r6, [sp, #8]
   16214:	cmp	r3, #0
   16218:	str	r8, [sp, #16]
   1621c:	mov	r8, r0
   16220:	mov	r0, #40	; 0x28
   16224:	movw	r5, #22736	; 0x58d0
   16228:	movt	r5, #1
   1622c:	mov	r7, r1
   16230:	str	lr, [sp, #20]
   16234:	movne	r5, r3
   16238:	bl	1f110 <__assert_fail@plt+0xda0c>
   1623c:	subs	r6, r0, #0
   16240:	beq	16284 <__assert_fail@plt+0x4b80>
   16244:	cmp	r7, #0
   16248:	movw	r3, #8792	; 0x2258
   1624c:	movt	r3, #2
   16250:	beq	16310 <__assert_fail@plt+0x4c0c>
   16254:	cmp	r7, r3
   16258:	str	r7, [r6, #20]
   1625c:	beq	16314 <__assert_fail@plt+0x4c10>
   16260:	vldr	s14, [pc, #456]	; 16430 <__assert_fail@plt+0x4d2c>
   16264:	vldr	s15, [r7, #8]
   16268:	vcmpe.f32	s15, s14
   1626c:	vmrs	APSR_nzcv, fpscr
   16270:	bgt	1629c <__assert_fail@plt+0x4b98>
   16274:	str	r3, [r6, #20]
   16278:	mov	r0, r6
   1627c:	mov	r6, #0
   16280:	bl	156a4 <__assert_fail@plt+0x3fa0>
   16284:	mov	r0, r6
   16288:	ldrd	r4, [sp]
   1628c:	ldrd	r6, [sp, #8]
   16290:	ldr	r8, [sp, #16]
   16294:	add	sp, sp, #20
   16298:	pop	{pc}		; (ldr pc, [sp], #4)
   1629c:	vldr	s13, [pc, #400]	; 16434 <__assert_fail@plt+0x4d30>
   162a0:	vcmpe.f32	s15, s13
   162a4:	vmrs	APSR_nzcv, fpscr
   162a8:	bpl	16274 <__assert_fail@plt+0x4b70>
   162ac:	vldr	s13, [pc, #388]	; 16438 <__assert_fail@plt+0x4d34>
   162b0:	vldr	s12, [r7, #12]
   162b4:	vcmpe.f32	s12, s13
   162b8:	vmrs	APSR_nzcv, fpscr
   162bc:	ble	16274 <__assert_fail@plt+0x4b70>
   162c0:	vldr	s13, [r7]
   162c4:	vcmpe.f32	s13, #0.0
   162c8:	vmrs	APSR_nzcv, fpscr
   162cc:	blt	16274 <__assert_fail@plt+0x4b70>
   162d0:	vadd.f32	s14, s13, s14
   162d4:	vldr	s13, [r7, #4]
   162d8:	vcmpe.f32	s14, s13
   162dc:	vmrs	APSR_nzcv, fpscr
   162e0:	bpl	16274 <__assert_fail@plt+0x4b70>
   162e4:	vldr	s12, [pc, #336]	; 1643c <__assert_fail@plt+0x4d38>
   162e8:	vcmpe.f32	s13, s12
   162ec:	vmrs	APSR_nzcv, fpscr
   162f0:	bhi	16274 <__assert_fail@plt+0x4b70>
   162f4:	vcmpe.f32	s15, s14
   162f8:	vmrs	APSR_nzcv, fpscr
   162fc:	ble	16274 <__assert_fail@plt+0x4b70>
   16300:	ldrb	r3, [r7, #16]
   16304:	cmp	r3, #0
   16308:	bne	1633c <__assert_fail@plt+0x4c38>
   1630c:	b	16318 <__assert_fail@plt+0x4c14>
   16310:	str	r3, [r6, #20]
   16314:	vldr	s15, [pc, #292]	; 16440 <__assert_fail@plt+0x4d3c>
   16318:	vmov	s14, r8
   1631c:	vldr	s13, [pc, #288]	; 16444 <__assert_fail@plt+0x4d40>
   16320:	vcvt.f32.u32	s12, s14
   16324:	vdiv.f32	s14, s12, s15
   16328:	vcmpe.f32	s14, s13
   1632c:	vmrs	APSR_nzcv, fpscr
   16330:	bge	163c4 <__assert_fail@plt+0x4cc0>
   16334:	vcvt.u32.f32	s15, s14
   16338:	vmov	r8, s15
   1633c:	cmp	r8, #10
   16340:	movcs	r3, r8
   16344:	movcc	r3, #10
   16348:	orr	r3, r3, #1
   1634c:	cmn	r3, #1
   16350:	beq	163c4 <__assert_fail@plt+0x4cc0>
   16354:	movw	lr, #43691	; 0xaaab
   16358:	movt	lr, #43690	; 0xaaaa
   1635c:	umull	r1, r2, lr, r3
   16360:	cmp	r3, #9
   16364:	lsr	r2, r2, #1
   16368:	add	r2, r2, r2, lsl #1
   1636c:	sub	r2, r3, r2
   16370:	bls	163b0 <__assert_fail@plt+0x4cac>
   16374:	cmp	r2, #0
   16378:	beq	163b8 <__assert_fail@plt+0x4cb4>
   1637c:	mov	ip, #16
   16380:	mov	r0, #9
   16384:	mov	r1, #3
   16388:	b	16394 <__assert_fail@plt+0x4c90>
   1638c:	cmp	r2, #0
   16390:	beq	163b8 <__assert_fail@plt+0x4cb4>
   16394:	add	r1, r1, #2
   16398:	add	r0, r0, ip
   1639c:	cmp	r0, r3
   163a0:	add	ip, ip, #8
   163a4:	udiv	r2, r3, r1
   163a8:	mls	r2, r1, r2, r3
   163ac:	bcc	1638c <__assert_fail@plt+0x4c88>
   163b0:	cmp	r2, #0
   163b4:	bne	163d0 <__assert_fail@plt+0x4ccc>
   163b8:	add	r3, r3, #2
   163bc:	cmn	r3, #1
   163c0:	bne	1635c <__assert_fail@plt+0x4c58>
   163c4:	mov	r3, #0
   163c8:	str	r3, [r6, #8]
   163cc:	b	16278 <__assert_fail@plt+0x4b74>
   163d0:	lsrs	r2, r3, #30
   163d4:	movne	r7, #1
   163d8:	moveq	r7, #0
   163dc:	tst	r3, #536870912	; 0x20000000
   163e0:	bne	163c4 <__assert_fail@plt+0x4cc0>
   163e4:	cmp	r7, #0
   163e8:	bne	163c4 <__assert_fail@plt+0x4cc0>
   163ec:	mov	r0, r3
   163f0:	mov	r1, #8
   163f4:	str	r3, [r6, #8]
   163f8:	bl	1f09c <__assert_fail@plt+0xd998>
   163fc:	cmp	r0, #0
   16400:	str	r0, [r6]
   16404:	beq	16278 <__assert_fail@plt+0x4b74>
   16408:	ldr	r3, [r6, #8]
   1640c:	str	r7, [r6, #12]
   16410:	str	r7, [r6, #16]
   16414:	strd	r4, [r6, #24]
   16418:	str	r7, [r6, #36]	; 0x24
   1641c:	add	r0, r0, r3, lsl #3
   16420:	ldr	r3, [sp, #24]
   16424:	str	r0, [r6, #4]
   16428:	str	r3, [r6, #32]
   1642c:	b	16284 <__assert_fail@plt+0x4b80>
   16430:	stclcc	12, cr12, [ip, #820]	; 0x334
   16434:	svccc	0x00666666
   16438:	svccc	0x008ccccd
   1643c:	svccc	0x00800000
   16440:	svccc	0x004ccccd
   16444:	svcmi	0x00800000
   16448:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1644c:	mov	r5, r0
   16450:	ldr	r2, [r0, #4]
   16454:	strd	r6, [sp, #8]
   16458:	ldr	r6, [r0]
   1645c:	str	r8, [sp, #16]
   16460:	str	lr, [sp, #20]
   16464:	cmp	r6, r2
   16468:	addcc	r6, r6, #8
   1646c:	movcc	r7, #0
   16470:	bcc	16484 <__assert_fail@plt+0x4d80>
   16474:	b	164f8 <__assert_fail@plt+0x4df4>
   16478:	cmp	r2, r6
   1647c:	add	r6, r6, #8
   16480:	bls	164f8 <__assert_fail@plt+0x4df4>
   16484:	ldr	r3, [r6, #-8]
   16488:	cmp	r3, #0
   1648c:	beq	16478 <__assert_fail@plt+0x4d74>
   16490:	ldr	r4, [r6, #-4]
   16494:	ldr	r3, [r5, #32]
   16498:	cmp	r4, #0
   1649c:	beq	164d0 <__assert_fail@plt+0x4dcc>
   164a0:	cmp	r3, #0
   164a4:	beq	16518 <__assert_fail@plt+0x4e14>
   164a8:	ldr	r0, [r4]
   164ac:	blx	r3
   164b0:	ldr	r1, [r4, #4]
   164b4:	ldr	r3, [r5, #32]
   164b8:	ldr	r2, [r5, #36]	; 0x24
   164bc:	str	r7, [r4]
   164c0:	str	r2, [r4, #4]
   164c4:	str	r4, [r5, #36]	; 0x24
   164c8:	subs	r4, r1, #0
   164cc:	bne	164a0 <__assert_fail@plt+0x4d9c>
   164d0:	cmp	r3, #0
   164d4:	beq	164e0 <__assert_fail@plt+0x4ddc>
   164d8:	ldr	r0, [r6, #-8]
   164dc:	blx	r3
   164e0:	str	r7, [r6, #-8]
   164e4:	str	r7, [r6, #-4]
   164e8:	ldr	r2, [r5, #4]
   164ec:	cmp	r2, r6
   164f0:	add	r6, r6, #8
   164f4:	bhi	16484 <__assert_fail@plt+0x4d80>
   164f8:	mov	r3, #0
   164fc:	ldrd	r6, [sp, #8]
   16500:	ldr	r8, [sp, #16]
   16504:	str	r3, [r5, #12]
   16508:	str	r3, [r5, #16]
   1650c:	ldrd	r4, [sp]
   16510:	add	sp, sp, #20
   16514:	pop	{pc}		; (ldr pc, [sp], #4)
   16518:	ldr	r2, [r5, #36]	; 0x24
   1651c:	str	r7, [r4]
   16520:	ldr	r3, [r4, #4]
   16524:	str	r2, [r4, #4]
   16528:	mov	r2, r4
   1652c:	str	r2, [r5, #36]	; 0x24
   16530:	subs	r4, r3, #0
   16534:	bne	1651c <__assert_fail@plt+0x4e18>
   16538:	b	164e0 <__assert_fail@plt+0x4ddc>
   1653c:	strd	r4, [sp, #-16]!
   16540:	ldr	r2, [r0, #32]
   16544:	ldr	r5, [r0]
   16548:	ldr	r3, [r0, #4]
   1654c:	cmp	r2, #0
   16550:	str	r6, [sp, #8]
   16554:	mov	r6, r0
   16558:	str	lr, [sp, #12]
   1655c:	beq	165c4 <__assert_fail@plt+0x4ec0>
   16560:	ldr	r2, [r0, #16]
   16564:	cmp	r2, #0
   16568:	beq	165c4 <__assert_fail@plt+0x4ec0>
   1656c:	cmp	r5, r3
   16570:	bcc	16584 <__assert_fail@plt+0x4e80>
   16574:	b	165f8 <__assert_fail@plt+0x4ef4>
   16578:	add	r5, r5, #8
   1657c:	cmp	r5, r3
   16580:	bcs	165c0 <__assert_fail@plt+0x4ebc>
   16584:	ldr	r0, [r5]
   16588:	cmp	r0, #0
   1658c:	beq	16578 <__assert_fail@plt+0x4e74>
   16590:	mov	r4, r5
   16594:	b	1659c <__assert_fail@plt+0x4e98>
   16598:	ldr	r0, [r4]
   1659c:	ldr	r3, [r6, #32]
   165a0:	blx	r3
   165a4:	ldr	r4, [r4, #4]
   165a8:	cmp	r4, #0
   165ac:	bne	16598 <__assert_fail@plt+0x4e94>
   165b0:	ldr	r3, [r6, #4]
   165b4:	add	r5, r5, #8
   165b8:	cmp	r5, r3
   165bc:	bcc	16584 <__assert_fail@plt+0x4e80>
   165c0:	ldr	r5, [r6]
   165c4:	cmp	r3, r5
   165c8:	bls	165f8 <__assert_fail@plt+0x4ef4>
   165cc:	ldr	r0, [r5, #4]
   165d0:	cmp	r0, #0
   165d4:	beq	165ec <__assert_fail@plt+0x4ee8>
   165d8:	ldr	r4, [r0, #4]
   165dc:	bl	156a4 <__assert_fail@plt+0x3fa0>
   165e0:	subs	r0, r4, #0
   165e4:	bne	165d8 <__assert_fail@plt+0x4ed4>
   165e8:	ldr	r3, [r6, #4]
   165ec:	add	r5, r5, #8
   165f0:	cmp	r5, r3
   165f4:	bcc	165cc <__assert_fail@plt+0x4ec8>
   165f8:	ldr	r0, [r6, #36]	; 0x24
   165fc:	cmp	r0, #0
   16600:	beq	16614 <__assert_fail@plt+0x4f10>
   16604:	ldr	r4, [r0, #4]
   16608:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1660c:	subs	r0, r4, #0
   16610:	bne	16604 <__assert_fail@plt+0x4f00>
   16614:	ldr	r0, [r6]
   16618:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1661c:	mov	r0, r6
   16620:	ldrd	r4, [sp]
   16624:	ldr	r6, [sp, #8]
   16628:	ldr	lr, [sp, #12]
   1662c:	add	sp, sp, #16
   16630:	b	156a4 <__assert_fail@plt+0x3fa0>
   16634:	ldr	r3, [r0, #20]
   16638:	strd	r4, [sp, #-20]!	; 0xffffffec
   1663c:	mov	r5, r0
   16640:	ldrb	r2, [r3, #16]
   16644:	strd	r6, [sp, #8]
   16648:	str	lr, [sp, #16]
   1664c:	sub	sp, sp, #44	; 0x2c
   16650:	cmp	r2, #0
   16654:	bne	16680 <__assert_fail@plt+0x4f7c>
   16658:	vmov	s15, r1
   1665c:	vldr	s12, [r3, #8]
   16660:	vldr	s13, [pc, #444]	; 16824 <__assert_fail@plt+0x5120>
   16664:	vcvt.f32.u32	s15, s15
   16668:	vdiv.f32	s14, s15, s12
   1666c:	vcmpe.f32	s14, s13
   16670:	vmrs	APSR_nzcv, fpscr
   16674:	vcvtlt.u32.f32	s15, s14
   16678:	vmovlt	r1, s15
   1667c:	bge	16704 <__assert_fail@plt+0x5000>
   16680:	cmp	r1, #10
   16684:	movcc	r1, #10
   16688:	orr	r4, r1, #1
   1668c:	cmn	r4, #1
   16690:	beq	16704 <__assert_fail@plt+0x5000>
   16694:	movw	ip, #43691	; 0xaaab
   16698:	movt	ip, #43690	; 0xaaaa
   1669c:	umull	r2, r3, ip, r4
   166a0:	cmp	r4, #9
   166a4:	lsr	r3, r3, #1
   166a8:	add	r3, r3, r3, lsl #1
   166ac:	sub	r3, r4, r3
   166b0:	bls	166f0 <__assert_fail@plt+0x4fec>
   166b4:	cmp	r3, #0
   166b8:	beq	166f8 <__assert_fail@plt+0x4ff4>
   166bc:	mov	r0, #16
   166c0:	mov	r1, #9
   166c4:	mov	r2, #3
   166c8:	b	166d8 <__assert_fail@plt+0x4fd4>
   166cc:	cmp	r3, #0
   166d0:	add	r0, r0, #8
   166d4:	beq	166f8 <__assert_fail@plt+0x4ff4>
   166d8:	add	r2, r2, #2
   166dc:	add	r1, r1, r0
   166e0:	cmp	r1, r4
   166e4:	udiv	r3, r4, r2
   166e8:	mls	r3, r2, r3, r4
   166ec:	bcc	166cc <__assert_fail@plt+0x4fc8>
   166f0:	cmp	r3, #0
   166f4:	bne	16720 <__assert_fail@plt+0x501c>
   166f8:	add	r4, r4, #2
   166fc:	cmn	r4, #1
   16700:	bne	1669c <__assert_fail@plt+0x4f98>
   16704:	mov	r4, #0
   16708:	mov	r0, r4
   1670c:	add	sp, sp, #44	; 0x2c
   16710:	ldrd	r4, [sp]
   16714:	ldrd	r6, [sp, #8]
   16718:	add	sp, sp, #16
   1671c:	pop	{pc}		; (ldr pc, [sp], #4)
   16720:	lsrs	r3, r4, #30
   16724:	movne	r6, #1
   16728:	moveq	r6, #0
   1672c:	tst	r4, #536870912	; 0x20000000
   16730:	bne	16704 <__assert_fail@plt+0x5000>
   16734:	cmp	r6, #0
   16738:	bne	16704 <__assert_fail@plt+0x5000>
   1673c:	ldr	r3, [r5, #8]
   16740:	cmp	r3, r4
   16744:	beq	167ec <__assert_fail@plt+0x50e8>
   16748:	mov	r1, #8
   1674c:	mov	r0, r4
   16750:	bl	1f09c <__assert_fail@plt+0xd998>
   16754:	cmp	r0, #0
   16758:	str	r0, [sp]
   1675c:	beq	16704 <__assert_fail@plt+0x5000>
   16760:	add	r3, r0, r4, lsl #3
   16764:	ldr	r7, [r5, #20]
   16768:	mov	r2, r6
   1676c:	mov	r0, sp
   16770:	mov	r1, r5
   16774:	ldr	lr, [r5, #28]
   16778:	stmib	sp, {r3, r4, r6}
   1677c:	ldr	r4, [r5, #24]
   16780:	strd	r6, [sp, #16]
   16784:	ldr	ip, [r5, #32]
   16788:	ldr	r3, [r5, #36]	; 0x24
   1678c:	str	r4, [sp, #24]
   16790:	str	lr, [sp, #28]
   16794:	str	ip, [sp, #32]
   16798:	str	r3, [sp, #36]	; 0x24
   1679c:	bl	15a40 <__assert_fail@plt+0x433c>
   167a0:	subs	r4, r0, #0
   167a4:	bne	167f4 <__assert_fail@plt+0x50f0>
   167a8:	ldr	r3, [sp, #36]	; 0x24
   167ac:	mov	r2, #1
   167b0:	mov	r1, sp
   167b4:	mov	r0, r5
   167b8:	str	r3, [r5, #36]	; 0x24
   167bc:	bl	15a40 <__assert_fail@plt+0x433c>
   167c0:	cmp	r0, #0
   167c4:	beq	16820 <__assert_fail@plt+0x511c>
   167c8:	mov	r1, sp
   167cc:	mov	r0, r5
   167d0:	mov	r2, r4
   167d4:	bl	15a40 <__assert_fail@plt+0x433c>
   167d8:	cmp	r0, #0
   167dc:	beq	16820 <__assert_fail@plt+0x511c>
   167e0:	ldr	r0, [sp]
   167e4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   167e8:	b	16708 <__assert_fail@plt+0x5004>
   167ec:	mov	r4, #1
   167f0:	b	16708 <__assert_fail@plt+0x5004>
   167f4:	ldr	r0, [r5]
   167f8:	bl	156a4 <__assert_fail@plt+0x3fa0>
   167fc:	ldrd	r2, [sp]
   16800:	ldr	r1, [sp, #8]
   16804:	strd	r2, [r5]
   16808:	ldr	r2, [sp, #12]
   1680c:	str	r1, [r5, #8]
   16810:	ldr	r3, [sp, #36]	; 0x24
   16814:	str	r2, [r5, #12]
   16818:	str	r3, [r5, #36]	; 0x24
   1681c:	b	16708 <__assert_fail@plt+0x5004>
   16820:	bl	116e0 <abort@plt>
   16824:	svcmi	0x00800000
   16828:	strd	r4, [sp, #-16]!
   1682c:	str	r6, [sp, #8]
   16830:	subs	r6, r1, #0
   16834:	str	lr, [sp, #12]
   16838:	sub	sp, sp, #8
   1683c:	beq	169c8 <__assert_fail@plt+0x52c4>
   16840:	mov	r3, #0
   16844:	mov	r5, r2
   16848:	add	r2, sp, #4
   1684c:	mov	r4, r0
   16850:	bl	158e0 <__assert_fail@plt+0x41dc>
   16854:	subs	r3, r0, #0
   16858:	beq	16884 <__assert_fail@plt+0x5180>
   1685c:	cmp	r5, #0
   16860:	moveq	r0, r5
   16864:	beq	16870 <__assert_fail@plt+0x516c>
   16868:	mov	r0, #0
   1686c:	str	r3, [r5]
   16870:	add	sp, sp, #8
   16874:	ldrd	r4, [sp]
   16878:	ldr	r6, [sp, #8]
   1687c:	add	sp, sp, #12
   16880:	pop	{pc}		; (ldr pc, [sp], #4)
   16884:	vldr	s15, [r4, #8]
   16888:	vldr	s14, [r4, #12]
   1688c:	ldr	r3, [r4, #20]
   16890:	vcvt.f32.u32	s15, s15
   16894:	vcvt.f32.u32	s14, s14
   16898:	vldr	s13, [r3, #8]
   1689c:	vmul.f32	s12, s13, s15
   168a0:	vcmpe.f32	s14, s12
   168a4:	vmrs	APSR_nzcv, fpscr
   168a8:	bgt	168f0 <__assert_fail@plt+0x51ec>
   168ac:	ldr	r2, [sp, #4]
   168b0:	ldr	r3, [r2]
   168b4:	cmp	r3, #0
   168b8:	beq	169f4 <__assert_fail@plt+0x52f0>
   168bc:	ldr	r3, [r4, #36]	; 0x24
   168c0:	cmp	r3, #0
   168c4:	beq	16a18 <__assert_fail@plt+0x5314>
   168c8:	ldr	r1, [r3, #4]
   168cc:	str	r1, [r4, #36]	; 0x24
   168d0:	ldr	r1, [r4, #16]
   168d4:	mov	r0, #1
   168d8:	ldr	ip, [r2, #4]
   168dc:	add	r1, r1, r0
   168e0:	stm	r3, {r6, ip}
   168e4:	str	r3, [r2, #4]
   168e8:	str	r1, [r4, #16]
   168ec:	b	16870 <__assert_fail@plt+0x516c>
   168f0:	movw	r2, #8792	; 0x2258
   168f4:	movt	r2, #2
   168f8:	cmp	r3, r2
   168fc:	beq	16a30 <__assert_fail@plt+0x532c>
   16900:	vldr	s12, [pc, #320]	; 16a48 <__assert_fail@plt+0x5344>
   16904:	vcmpe.f32	s13, s12
   16908:	vmrs	APSR_nzcv, fpscr
   1690c:	ble	169cc <__assert_fail@plt+0x52c8>
   16910:	vldr	s11, [pc, #308]	; 16a4c <__assert_fail@plt+0x5348>
   16914:	vcmpe.f32	s13, s11
   16918:	vmrs	APSR_nzcv, fpscr
   1691c:	bpl	169cc <__assert_fail@plt+0x52c8>
   16920:	vldr	s10, [pc, #296]	; 16a50 <__assert_fail@plt+0x534c>
   16924:	vldr	s11, [r3, #12]
   16928:	vcmpe.f32	s11, s10
   1692c:	vmrs	APSR_nzcv, fpscr
   16930:	ble	169cc <__assert_fail@plt+0x52c8>
   16934:	vldr	s10, [r3]
   16938:	vcmpe.f32	s10, #0.0
   1693c:	vmrs	APSR_nzcv, fpscr
   16940:	blt	169cc <__assert_fail@plt+0x52c8>
   16944:	vadd.f32	s12, s10, s12
   16948:	vldr	s10, [r3, #4]
   1694c:	vcmpe.f32	s12, s10
   16950:	vmrs	APSR_nzcv, fpscr
   16954:	bpl	169cc <__assert_fail@plt+0x52c8>
   16958:	vldr	s9, [pc, #244]	; 16a54 <__assert_fail@plt+0x5350>
   1695c:	vcmpe.f32	s10, s9
   16960:	vmrs	APSR_nzcv, fpscr
   16964:	bhi	169cc <__assert_fail@plt+0x52c8>
   16968:	vcmpe.f32	s13, s12
   1696c:	vmrs	APSR_nzcv, fpscr
   16970:	ble	169cc <__assert_fail@plt+0x52c8>
   16974:	ldrb	r3, [r3, #16]
   16978:	vmul.f32	s15, s15, s11
   1697c:	cmp	r3, #0
   16980:	beq	169ec <__assert_fail@plt+0x52e8>
   16984:	vldr	s14, [pc, #204]	; 16a58 <__assert_fail@plt+0x5354>
   16988:	vcmpe.f32	s15, s14
   1698c:	vmrs	APSR_nzcv, fpscr
   16990:	bge	16a28 <__assert_fail@plt+0x5324>
   16994:	vcvt.u32.f32	s15, s15
   16998:	mov	r0, r4
   1699c:	vmov	r1, s15
   169a0:	bl	16634 <__assert_fail@plt+0x4f30>
   169a4:	cmp	r0, #0
   169a8:	beq	16a28 <__assert_fail@plt+0x5324>
   169ac:	add	r2, sp, #4
   169b0:	mov	r3, #0
   169b4:	mov	r1, r6
   169b8:	mov	r0, r4
   169bc:	bl	158e0 <__assert_fail@plt+0x41dc>
   169c0:	cmp	r0, #0
   169c4:	beq	168ac <__assert_fail@plt+0x51a8>
   169c8:	bl	116e0 <abort@plt>
   169cc:	vldr	s13, [pc, #136]	; 16a5c <__assert_fail@plt+0x5358>
   169d0:	str	r2, [r4, #20]
   169d4:	vmul.f32	s12, s15, s13
   169d8:	vcmpe.f32	s14, s12
   169dc:	vmrs	APSR_nzcv, fpscr
   169e0:	ble	168ac <__assert_fail@plt+0x51a8>
   169e4:	vldr	s14, [pc, #116]	; 16a60 <__assert_fail@plt+0x535c>
   169e8:	vmul.f32	s15, s15, s14
   169ec:	vmul.f32	s15, s15, s13
   169f0:	b	16984 <__assert_fail@plt+0x5280>
   169f4:	ldr	r1, [r4, #12]
   169f8:	mov	r0, #1
   169fc:	ldr	r3, [r4, #16]
   16a00:	str	r6, [r2]
   16a04:	add	r2, r1, r0
   16a08:	add	r3, r3, r0
   16a0c:	str	r2, [r4, #12]
   16a10:	str	r3, [r4, #16]
   16a14:	b	16870 <__assert_fail@plt+0x516c>
   16a18:	mov	r0, #8
   16a1c:	bl	1f110 <__assert_fail@plt+0xda0c>
   16a20:	subs	r3, r0, #0
   16a24:	bne	16a40 <__assert_fail@plt+0x533c>
   16a28:	mvn	r0, #0
   16a2c:	b	16870 <__assert_fail@plt+0x516c>
   16a30:	vldr	s14, [pc, #40]	; 16a60 <__assert_fail@plt+0x535c>
   16a34:	vldr	s13, [pc, #32]	; 16a5c <__assert_fail@plt+0x5358>
   16a38:	vmul.f32	s15, s15, s14
   16a3c:	b	169ec <__assert_fail@plt+0x52e8>
   16a40:	ldr	r2, [sp, #4]
   16a44:	b	168d0 <__assert_fail@plt+0x51cc>
   16a48:	stclcc	12, cr12, [ip, #820]	; 0x334
   16a4c:	svccc	0x00666666
   16a50:	svccc	0x008ccccd
   16a54:	svccc	0x00800000
   16a58:	svcmi	0x00800000
   16a5c:	svccc	0x004ccccd
   16a60:	svccc	0x00b4fdf4
   16a64:	strd	r4, [sp, #-16]!
   16a68:	str	r6, [sp, #8]
   16a6c:	subs	r6, r1, #0
   16a70:	str	lr, [sp, #12]
   16a74:	sub	sp, sp, #8
   16a78:	beq	16bf4 <__assert_fail@plt+0x54f0>
   16a7c:	mov	r3, #0
   16a80:	add	r2, sp, #4
   16a84:	mov	r4, r0
   16a88:	bl	158e0 <__assert_fail@plt+0x41dc>
   16a8c:	subs	r5, r0, #0
   16a90:	beq	16aac <__assert_fail@plt+0x53a8>
   16a94:	mov	r0, r5
   16a98:	add	sp, sp, #8
   16a9c:	ldrd	r4, [sp]
   16aa0:	ldr	r6, [sp, #8]
   16aa4:	add	sp, sp, #12
   16aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   16aac:	vldr	s15, [r4, #8]
   16ab0:	vldr	s14, [r4, #12]
   16ab4:	ldr	r3, [r4, #20]
   16ab8:	vcvt.f32.u32	s15, s15
   16abc:	vcvt.f32.u32	s14, s14
   16ac0:	vldr	s13, [r3, #8]
   16ac4:	vmul.f32	s12, s13, s15
   16ac8:	vcmpe.f32	s14, s12
   16acc:	vmrs	APSR_nzcv, fpscr
   16ad0:	bgt	16b1c <__assert_fail@plt+0x5418>
   16ad4:	ldr	r3, [sp, #4]
   16ad8:	ldr	r2, [r3]
   16adc:	cmp	r2, #0
   16ae0:	beq	16c20 <__assert_fail@plt+0x551c>
   16ae4:	ldr	r0, [r4, #36]	; 0x24
   16ae8:	cmp	r0, #0
   16aec:	beq	16c44 <__assert_fail@plt+0x5540>
   16af0:	ldr	r2, [r0, #4]
   16af4:	str	r2, [r4, #36]	; 0x24
   16af8:	ldr	r2, [r4, #16]
   16afc:	mov	r5, r6
   16b00:	ldr	r1, [r3, #4]
   16b04:	str	r6, [r0]
   16b08:	add	r2, r2, #1
   16b0c:	str	r1, [r0, #4]
   16b10:	str	r0, [r3, #4]
   16b14:	str	r2, [r4, #16]
   16b18:	b	16a94 <__assert_fail@plt+0x5390>
   16b1c:	movw	r2, #8792	; 0x2258
   16b20:	movt	r2, #2
   16b24:	cmp	r3, r2
   16b28:	beq	16c5c <__assert_fail@plt+0x5558>
   16b2c:	vldr	s12, [pc, #312]	; 16c6c <__assert_fail@plt+0x5568>
   16b30:	vcmpe.f32	s13, s12
   16b34:	vmrs	APSR_nzcv, fpscr
   16b38:	ble	16bf8 <__assert_fail@plt+0x54f4>
   16b3c:	vldr	s11, [pc, #300]	; 16c70 <__assert_fail@plt+0x556c>
   16b40:	vcmpe.f32	s13, s11
   16b44:	vmrs	APSR_nzcv, fpscr
   16b48:	bpl	16bf8 <__assert_fail@plt+0x54f4>
   16b4c:	vldr	s10, [pc, #288]	; 16c74 <__assert_fail@plt+0x5570>
   16b50:	vldr	s11, [r3, #12]
   16b54:	vcmpe.f32	s11, s10
   16b58:	vmrs	APSR_nzcv, fpscr
   16b5c:	ble	16bf8 <__assert_fail@plt+0x54f4>
   16b60:	vldr	s10, [r3]
   16b64:	vcmpe.f32	s10, #0.0
   16b68:	vmrs	APSR_nzcv, fpscr
   16b6c:	blt	16bf8 <__assert_fail@plt+0x54f4>
   16b70:	vadd.f32	s12, s10, s12
   16b74:	vldr	s10, [r3, #4]
   16b78:	vcmpe.f32	s12, s10
   16b7c:	vmrs	APSR_nzcv, fpscr
   16b80:	bpl	16bf8 <__assert_fail@plt+0x54f4>
   16b84:	vldr	s9, [pc, #236]	; 16c78 <__assert_fail@plt+0x5574>
   16b88:	vcmpe.f32	s10, s9
   16b8c:	vmrs	APSR_nzcv, fpscr
   16b90:	bhi	16bf8 <__assert_fail@plt+0x54f4>
   16b94:	vcmpe.f32	s13, s12
   16b98:	vmrs	APSR_nzcv, fpscr
   16b9c:	ble	16bf8 <__assert_fail@plt+0x54f4>
   16ba0:	ldrb	r3, [r3, #16]
   16ba4:	vmul.f32	s15, s15, s11
   16ba8:	cmp	r3, #0
   16bac:	beq	16c18 <__assert_fail@plt+0x5514>
   16bb0:	vldr	s14, [pc, #196]	; 16c7c <__assert_fail@plt+0x5578>
   16bb4:	vcmpe.f32	s15, s14
   16bb8:	vmrs	APSR_nzcv, fpscr
   16bbc:	bge	16a94 <__assert_fail@plt+0x5390>
   16bc0:	vcvt.u32.f32	s15, s15
   16bc4:	mov	r0, r4
   16bc8:	vmov	r1, s15
   16bcc:	bl	16634 <__assert_fail@plt+0x4f30>
   16bd0:	cmp	r0, #0
   16bd4:	beq	16a94 <__assert_fail@plt+0x5390>
   16bd8:	add	r2, sp, #4
   16bdc:	mov	r3, #0
   16be0:	mov	r1, r6
   16be4:	mov	r0, r4
   16be8:	bl	158e0 <__assert_fail@plt+0x41dc>
   16bec:	cmp	r0, #0
   16bf0:	beq	16ad4 <__assert_fail@plt+0x53d0>
   16bf4:	bl	116e0 <abort@plt>
   16bf8:	vldr	s13, [pc, #128]	; 16c80 <__assert_fail@plt+0x557c>
   16bfc:	str	r2, [r4, #20]
   16c00:	vmul.f32	s12, s15, s13
   16c04:	vcmpe.f32	s14, s12
   16c08:	vmrs	APSR_nzcv, fpscr
   16c0c:	ble	16ad4 <__assert_fail@plt+0x53d0>
   16c10:	vldr	s14, [pc, #108]	; 16c84 <__assert_fail@plt+0x5580>
   16c14:	vmul.f32	s15, s15, s14
   16c18:	vmul.f32	s15, s15, s13
   16c1c:	b	16bb0 <__assert_fail@plt+0x54ac>
   16c20:	ldr	r2, [r4, #12]
   16c24:	mov	r5, r6
   16c28:	str	r6, [r3]
   16c2c:	ldr	r3, [r4, #16]
   16c30:	add	r2, r2, #1
   16c34:	add	r3, r3, #1
   16c38:	str	r2, [r4, #12]
   16c3c:	str	r3, [r4, #16]
   16c40:	b	16a94 <__assert_fail@plt+0x5390>
   16c44:	mov	r0, #8
   16c48:	bl	1f110 <__assert_fail@plt+0xda0c>
   16c4c:	cmp	r0, #0
   16c50:	beq	16a94 <__assert_fail@plt+0x5390>
   16c54:	ldr	r3, [sp, #4]
   16c58:	b	16af8 <__assert_fail@plt+0x53f4>
   16c5c:	vldr	s14, [pc, #32]	; 16c84 <__assert_fail@plt+0x5580>
   16c60:	vldr	s13, [pc, #24]	; 16c80 <__assert_fail@plt+0x557c>
   16c64:	vmul.f32	s15, s15, s14
   16c68:	b	16c18 <__assert_fail@plt+0x5514>
   16c6c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16c70:	svccc	0x00666666
   16c74:	svccc	0x008ccccd
   16c78:	svccc	0x00800000
   16c7c:	svcmi	0x00800000
   16c80:	svccc	0x004ccccd
   16c84:	svccc	0x00b4fdf4
   16c88:	strd	r4, [sp, #-16]!
   16c8c:	mov	r3, #1
   16c90:	mov	r4, r0
   16c94:	str	r6, [sp, #8]
   16c98:	str	lr, [sp, #12]
   16c9c:	sub	sp, sp, #8
   16ca0:	add	r2, sp, #4
   16ca4:	bl	158e0 <__assert_fail@plt+0x41dc>
   16ca8:	subs	r5, r0, #0
   16cac:	beq	16ccc <__assert_fail@plt+0x55c8>
   16cb0:	ldr	r2, [sp, #4]
   16cb4:	ldr	r3, [r4, #16]
   16cb8:	ldr	r2, [r2]
   16cbc:	sub	r3, r3, #1
   16cc0:	str	r3, [r4, #16]
   16cc4:	cmp	r2, #0
   16cc8:	beq	16ce4 <__assert_fail@plt+0x55e0>
   16ccc:	mov	r0, r5
   16cd0:	add	sp, sp, #8
   16cd4:	ldrd	r4, [sp]
   16cd8:	ldr	r6, [sp, #8]
   16cdc:	add	sp, sp, #12
   16ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ce4:	vldr	s15, [r4, #8]
   16ce8:	ldr	r3, [r4, #12]
   16cec:	ldr	r2, [r4, #20]
   16cf0:	vcvt.f32.u32	s15, s15
   16cf4:	sub	r3, r3, #1
   16cf8:	vmov	s14, r3
   16cfc:	vldr	s13, [r2]
   16d00:	str	r3, [r4, #12]
   16d04:	vmul.f32	s12, s13, s15
   16d08:	vcvt.f32.u32	s14, s14
   16d0c:	vcmpe.f32	s14, s12
   16d10:	vmrs	APSR_nzcv, fpscr
   16d14:	bpl	16ccc <__assert_fail@plt+0x55c8>
   16d18:	movw	r3, #8792	; 0x2258
   16d1c:	movt	r3, #2
   16d20:	cmp	r2, r3
   16d24:	beq	16e04 <__assert_fail@plt+0x5700>
   16d28:	vldr	s11, [pc, #224]	; 16e10 <__assert_fail@plt+0x570c>
   16d2c:	vldr	s12, [r2, #8]
   16d30:	vcmpe.f32	s12, s11
   16d34:	vmrs	APSR_nzcv, fpscr
   16d38:	ble	16dec <__assert_fail@plt+0x56e8>
   16d3c:	vldr	s10, [pc, #208]	; 16e14 <__assert_fail@plt+0x5710>
   16d40:	vcmpe.f32	s12, s10
   16d44:	vmrs	APSR_nzcv, fpscr
   16d48:	bpl	16dec <__assert_fail@plt+0x56e8>
   16d4c:	vldr	s10, [pc, #196]	; 16e18 <__assert_fail@plt+0x5714>
   16d50:	vldr	s9, [r2, #12]
   16d54:	vcmpe.f32	s9, s10
   16d58:	vmrs	APSR_nzcv, fpscr
   16d5c:	ble	16dec <__assert_fail@plt+0x56e8>
   16d60:	vcmpe.f32	s13, #0.0
   16d64:	vmrs	APSR_nzcv, fpscr
   16d68:	blt	16dec <__assert_fail@plt+0x56e8>
   16d6c:	vadd.f32	s13, s13, s11
   16d70:	vldr	s11, [r2, #4]
   16d74:	vcmpe.f32	s13, s11
   16d78:	vmrs	APSR_nzcv, fpscr
   16d7c:	bpl	16dec <__assert_fail@plt+0x56e8>
   16d80:	vldr	s10, [pc, #148]	; 16e1c <__assert_fail@plt+0x5718>
   16d84:	vcmpe.f32	s11, s10
   16d88:	vmrs	APSR_nzcv, fpscr
   16d8c:	bhi	16dec <__assert_fail@plt+0x56e8>
   16d90:	vcmpe.f32	s12, s13
   16d94:	vmrs	APSR_nzcv, fpscr
   16d98:	ble	16dec <__assert_fail@plt+0x56e8>
   16d9c:	ldrb	r3, [r2, #16]
   16da0:	vmul.f32	s15, s15, s11
   16da4:	cmp	r3, #0
   16da8:	beq	16e08 <__assert_fail@plt+0x5704>
   16dac:	vcvt.u32.f32	s15, s15
   16db0:	mov	r0, r4
   16db4:	vmov	r1, s15
   16db8:	bl	16634 <__assert_fail@plt+0x4f30>
   16dbc:	cmp	r0, #0
   16dc0:	bne	16ccc <__assert_fail@plt+0x55c8>
   16dc4:	ldr	r0, [r4, #36]	; 0x24
   16dc8:	cmp	r0, #0
   16dcc:	beq	16de0 <__assert_fail@plt+0x56dc>
   16dd0:	ldr	r6, [r0, #4]
   16dd4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   16dd8:	subs	r0, r6, #0
   16ddc:	bne	16dd0 <__assert_fail@plt+0x56cc>
   16de0:	mov	r3, #0
   16de4:	str	r3, [r4, #36]	; 0x24
   16de8:	b	16ccc <__assert_fail@plt+0x55c8>
   16dec:	vldr	s13, [pc, #44]	; 16e20 <__assert_fail@plt+0x571c>
   16df0:	str	r3, [r4, #20]
   16df4:	vmul.f32	s13, s15, s13
   16df8:	vcmpe.f32	s14, s13
   16dfc:	vmrs	APSR_nzcv, fpscr
   16e00:	bpl	16ccc <__assert_fail@plt+0x55c8>
   16e04:	vldr	s12, [pc, #24]	; 16e24 <__assert_fail@plt+0x5720>
   16e08:	vmul.f32	s15, s15, s12
   16e0c:	b	16dac <__assert_fail@plt+0x56a8>
   16e10:	stclcc	12, cr12, [ip, #820]	; 0x334
   16e14:	svccc	0x00666666
   16e18:	svccc	0x008ccccd
   16e1c:	svccc	0x00800000
   16e20:	andeq	r0, r0, r0
   16e24:	svccc	0x004ccccd
   16e28:	strd	r4, [sp, #-16]!
   16e2c:	mov	r3, #1
   16e30:	mov	r4, r0
   16e34:	str	r6, [sp, #8]
   16e38:	str	lr, [sp, #12]
   16e3c:	sub	sp, sp, #8
   16e40:	add	r2, sp, #4
   16e44:	bl	158e0 <__assert_fail@plt+0x41dc>
   16e48:	subs	r5, r0, #0
   16e4c:	beq	16e6c <__assert_fail@plt+0x5768>
   16e50:	ldr	r2, [sp, #4]
   16e54:	ldr	r3, [r4, #16]
   16e58:	ldr	r2, [r2]
   16e5c:	sub	r3, r3, #1
   16e60:	str	r3, [r4, #16]
   16e64:	cmp	r2, #0
   16e68:	beq	16e84 <__assert_fail@plt+0x5780>
   16e6c:	mov	r0, r5
   16e70:	add	sp, sp, #8
   16e74:	ldrd	r4, [sp]
   16e78:	ldr	r6, [sp, #8]
   16e7c:	add	sp, sp, #12
   16e80:	pop	{pc}		; (ldr pc, [sp], #4)
   16e84:	vldr	s15, [r4, #8]
   16e88:	ldr	r3, [r4, #12]
   16e8c:	ldr	r2, [r4, #20]
   16e90:	vcvt.f32.u32	s15, s15
   16e94:	sub	r3, r3, #1
   16e98:	vmov	s14, r3
   16e9c:	vldr	s13, [r2]
   16ea0:	str	r3, [r4, #12]
   16ea4:	vmul.f32	s12, s13, s15
   16ea8:	vcvt.f32.u32	s14, s14
   16eac:	vcmpe.f32	s14, s12
   16eb0:	vmrs	APSR_nzcv, fpscr
   16eb4:	bpl	16e6c <__assert_fail@plt+0x5768>
   16eb8:	movw	r3, #8792	; 0x2258
   16ebc:	movt	r3, #2
   16ec0:	cmp	r2, r3
   16ec4:	beq	16fa4 <__assert_fail@plt+0x58a0>
   16ec8:	vldr	s11, [pc, #224]	; 16fb0 <__assert_fail@plt+0x58ac>
   16ecc:	vldr	s12, [r2, #8]
   16ed0:	vcmpe.f32	s12, s11
   16ed4:	vmrs	APSR_nzcv, fpscr
   16ed8:	ble	16f8c <__assert_fail@plt+0x5888>
   16edc:	vldr	s10, [pc, #208]	; 16fb4 <__assert_fail@plt+0x58b0>
   16ee0:	vcmpe.f32	s12, s10
   16ee4:	vmrs	APSR_nzcv, fpscr
   16ee8:	bpl	16f8c <__assert_fail@plt+0x5888>
   16eec:	vldr	s10, [pc, #196]	; 16fb8 <__assert_fail@plt+0x58b4>
   16ef0:	vldr	s9, [r2, #12]
   16ef4:	vcmpe.f32	s9, s10
   16ef8:	vmrs	APSR_nzcv, fpscr
   16efc:	ble	16f8c <__assert_fail@plt+0x5888>
   16f00:	vcmpe.f32	s13, #0.0
   16f04:	vmrs	APSR_nzcv, fpscr
   16f08:	blt	16f8c <__assert_fail@plt+0x5888>
   16f0c:	vadd.f32	s13, s13, s11
   16f10:	vldr	s11, [r2, #4]
   16f14:	vcmpe.f32	s13, s11
   16f18:	vmrs	APSR_nzcv, fpscr
   16f1c:	bpl	16f8c <__assert_fail@plt+0x5888>
   16f20:	vldr	s10, [pc, #148]	; 16fbc <__assert_fail@plt+0x58b8>
   16f24:	vcmpe.f32	s11, s10
   16f28:	vmrs	APSR_nzcv, fpscr
   16f2c:	bhi	16f8c <__assert_fail@plt+0x5888>
   16f30:	vcmpe.f32	s12, s13
   16f34:	vmrs	APSR_nzcv, fpscr
   16f38:	ble	16f8c <__assert_fail@plt+0x5888>
   16f3c:	ldrb	r3, [r2, #16]
   16f40:	vmul.f32	s15, s15, s11
   16f44:	cmp	r3, #0
   16f48:	beq	16fa8 <__assert_fail@plt+0x58a4>
   16f4c:	vcvt.u32.f32	s15, s15
   16f50:	mov	r0, r4
   16f54:	vmov	r1, s15
   16f58:	bl	16634 <__assert_fail@plt+0x4f30>
   16f5c:	cmp	r0, #0
   16f60:	bne	16e6c <__assert_fail@plt+0x5768>
   16f64:	ldr	r0, [r4, #36]	; 0x24
   16f68:	cmp	r0, #0
   16f6c:	beq	16f80 <__assert_fail@plt+0x587c>
   16f70:	ldr	r6, [r0, #4]
   16f74:	bl	156a4 <__assert_fail@plt+0x3fa0>
   16f78:	subs	r0, r6, #0
   16f7c:	bne	16f70 <__assert_fail@plt+0x586c>
   16f80:	mov	r3, #0
   16f84:	str	r3, [r4, #36]	; 0x24
   16f88:	b	16e6c <__assert_fail@plt+0x5768>
   16f8c:	vldr	s13, [pc, #44]	; 16fc0 <__assert_fail@plt+0x58bc>
   16f90:	str	r3, [r4, #20]
   16f94:	vmul.f32	s13, s15, s13
   16f98:	vcmpe.f32	s14, s13
   16f9c:	vmrs	APSR_nzcv, fpscr
   16fa0:	bpl	16e6c <__assert_fail@plt+0x5768>
   16fa4:	vldr	s12, [pc, #24]	; 16fc4 <__assert_fail@plt+0x58c0>
   16fa8:	vmul.f32	s15, s15, s12
   16fac:	b	16f4c <__assert_fail@plt+0x5848>
   16fb0:	stclcc	12, cr12, [ip, #820]	; 0x334
   16fb4:	svccc	0x00666666
   16fb8:	svccc	0x008ccccd
   16fbc:	svccc	0x00800000
   16fc0:	andeq	r0, r0, r0
   16fc4:	svccc	0x004ccccd
   16fc8:	strd	r4, [sp, #-16]!
   16fcc:	mov	r4, r0
   16fd0:	mov	r5, r1
   16fd4:	ldr	r0, [r0]
   16fd8:	str	r6, [sp, #8]
   16fdc:	str	lr, [sp, #12]
   16fe0:	bl	207c4 <__assert_fail@plt+0xf0c0>
   16fe4:	ldr	ip, [r4, #8]
   16fe8:	mov	r2, r5
   16fec:	mov	r3, #0
   16ff0:	ldr	r1, [r4, #12]
   16ff4:	eor	r0, r0, ip
   16ff8:	bl	20f50 <__assert_fail@plt+0xf84c>
   16ffc:	ldrd	r4, [sp]
   17000:	mov	r0, r2
   17004:	ldr	r6, [sp, #8]
   17008:	add	sp, sp, #12
   1700c:	pop	{pc}		; (ldr pc, [sp], #4)
   17010:	strd	r4, [sp, #-16]!
   17014:	ldrd	r2, [r1, #8]
   17018:	ldrd	r4, [r0, #8]
   1701c:	str	r6, [sp, #8]
   17020:	str	lr, [sp, #12]
   17024:	cmp	r5, r3
   17028:	cmpeq	r4, r2
   1702c:	beq	17044 <__assert_fail@plt+0x5940>
   17030:	ldrd	r4, [sp]
   17034:	mov	r0, #0
   17038:	ldr	r6, [sp, #8]
   1703c:	add	sp, sp, #12
   17040:	pop	{pc}		; (ldr pc, [sp], #4)
   17044:	ldrd	r4, [r0, #16]
   17048:	ldrd	r2, [r1, #16]
   1704c:	cmp	r5, r3
   17050:	cmpeq	r4, r2
   17054:	bne	17030 <__assert_fail@plt+0x592c>
   17058:	ldr	r0, [r0]
   1705c:	ldr	r1, [r1]
   17060:	bl	11320 <strcmp@plt>
   17064:	clz	r0, r0
   17068:	ldrd	r4, [sp]
   1706c:	lsr	r0, r0, #5
   17070:	ldr	r6, [sp, #8]
   17074:	add	sp, sp, #12
   17078:	pop	{pc}		; (ldr pc, [sp], #4)
   1707c:	str	r4, [sp, #-8]!
   17080:	mov	r4, r0
   17084:	ldr	r0, [r0]
   17088:	str	lr, [sp, #4]
   1708c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   17090:	mov	r0, r4
   17094:	ldr	r4, [sp]
   17098:	ldr	lr, [sp, #4]
   1709c:	add	sp, sp, #8
   170a0:	b	156a4 <__assert_fail@plt+0x3fa0>
   170a4:	andeq	r0, r0, r0
   170a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   170ac:	strd	r6, [sp, #8]
   170b0:	mov	r6, r3
   170b4:	ands	r3, r3, #32
   170b8:	strd	r8, [sp, #16]
   170bc:	mov	r9, r1
   170c0:	moveq	r1, #1000	; 0x3e8
   170c4:	strd	sl, [sp, #24]
   170c8:	movne	r1, #1024	; 0x400
   170cc:	mov	r8, r0
   170d0:	str	lr, [sp, #32]
   170d4:	vpush	{d8-d9}
   170d8:	sub	sp, sp, #108	; 0x6c
   170dc:	str	r2, [sp, #12]
   170e0:	moveq	r2, #1000	; 0x3e8
   170e4:	movne	r2, #1024	; 0x400
   170e8:	str	r3, [sp, #40]	; 0x28
   170ec:	and	r3, r6, #3
   170f0:	str	r1, [sp, #16]
   170f4:	str	r3, [sp, #32]
   170f8:	mov	r3, #0
   170fc:	strd	r2, [sp, #24]
   17100:	str	r1, [sp, #36]	; 0x24
   17104:	bl	1165c <localeconv@plt>
   17108:	ldr	r3, [sp, #12]
   1710c:	mov	r4, r0
   17110:	add	r2, r3, #644	; 0x284
   17114:	ldr	r3, [r0]
   17118:	add	r2, r2, #3
   1711c:	str	r2, [sp, #32]
   17120:	mov	r0, r3
   17124:	mov	r5, r3
   17128:	bl	1153c <strlen@plt>
   1712c:	ldmib	r4, {r7, sl}
   17130:	sub	r2, r0, #1
   17134:	movw	r3, #8632	; 0x21b8
   17138:	movt	r3, #2
   1713c:	cmp	r2, #16
   17140:	movcc	r3, r5
   17144:	mov	fp, r0
   17148:	movcs	fp, #1
   1714c:	str	r3, [sp, #44]	; 0x2c
   17150:	mov	r0, r7
   17154:	bl	1153c <strlen@plt>
   17158:	cmp	r0, #16
   1715c:	movw	r3, #8892	; 0x22bc
   17160:	movt	r3, #2
   17164:	ldrd	r0, [sp, #160]	; 0xa0
   17168:	movhi	r7, r3
   1716c:	ldrd	r2, [sp, #168]	; 0xa8
   17170:	cmp	r3, r1
   17174:	cmpeq	r2, r0
   17178:	bhi	17490 <__assert_fail@plt+0x5d8c>
   1717c:	bl	20f50 <__assert_fail@plt+0xf84c>
   17180:	orrs	r3, r2, r3
   17184:	bne	171b8 <__assert_fail@plt+0x5ab4>
   17188:	mul	ip, r0, r9
   1718c:	mov	r3, r1
   17190:	mov	r2, r0
   17194:	umull	r4, r5, r0, r8
   17198:	mla	r1, r8, r1, ip
   1719c:	mov	r0, r4
   171a0:	add	r5, r1, r5
   171a4:	mov	r1, r5
   171a8:	bl	20f50 <__assert_fail@plt+0xf84c>
   171ac:	cmp	r1, r9
   171b0:	cmpeq	r0, r8
   171b4:	beq	17a90 <__assert_fail@plt+0x638c>
   171b8:	ldrd	r0, [sp, #160]	; 0xa0
   171bc:	bl	20edc <__assert_fail@plt+0xf7d8>
   171c0:	vmov	d9, r0, r1
   171c4:	ldrd	r0, [sp, #168]	; 0xa8
   171c8:	bl	20edc <__assert_fail@plt+0xf7d8>
   171cc:	vmov	d7, r0, r1
   171d0:	mov	r0, r8
   171d4:	mov	r1, r9
   171d8:	vdiv.f64	d8, d9, d7
   171dc:	bl	20edc <__assert_fail@plt+0xf7d8>
   171e0:	vmov	d7, r0, r1
   171e4:	tst	r6, #16
   171e8:	vmul.f64	d8, d8, d7
   171ec:	beq	173b8 <__assert_fail@plt+0x5cb4>
   171f0:	vldr	s15, [sp, #16]
   171f4:	vcvt.f64.s32	d7, s15
   171f8:	vmul.f64	d6, d7, d7
   171fc:	vcmpe.f64	d8, d6
   17200:	vmrs	APSR_nzcv, fpscr
   17204:	blt	17cec <__assert_fail@plt+0x65e8>
   17208:	vmul.f64	d5, d7, d6
   1720c:	vcmpe.f64	d8, d5
   17210:	vmrs	APSR_nzcv, fpscr
   17214:	blt	17cf8 <__assert_fail@plt+0x65f4>
   17218:	vmul.f64	d6, d7, d5
   1721c:	vcmpe.f64	d8, d6
   17220:	vmrs	APSR_nzcv, fpscr
   17224:	blt	17d08 <__assert_fail@plt+0x6604>
   17228:	vmul.f64	d5, d7, d6
   1722c:	vcmpe.f64	d8, d5
   17230:	vmrs	APSR_nzcv, fpscr
   17234:	blt	17d2c <__assert_fail@plt+0x6628>
   17238:	vmul.f64	d6, d7, d5
   1723c:	vcmpe.f64	d8, d6
   17240:	vmrs	APSR_nzcv, fpscr
   17244:	blt	17d3c <__assert_fail@plt+0x6638>
   17248:	vmul.f64	d5, d7, d6
   1724c:	vcmpe.f64	d8, d5
   17250:	vmrs	APSR_nzcv, fpscr
   17254:	blt	17d4c <__assert_fail@plt+0x6648>
   17258:	vmul.f64	d7, d7, d5
   1725c:	vcmpe.f64	d8, d7
   17260:	vmrs	APSR_nzcv, fpscr
   17264:	movlt	r3, #7
   17268:	vmovlt.f64	d7, d5
   1726c:	strlt	r3, [sp, #16]
   17270:	blt	1727c <__assert_fail@plt+0x5b78>
   17274:	mov	r3, #8
   17278:	str	r3, [sp, #16]
   1727c:	ands	r3, r6, #32
   17280:	and	r9, r6, #3
   17284:	vdiv.f64	d9, d8, d7
   17288:	clz	r4, r3
   1728c:	add	fp, fp, #1
   17290:	lsr	r4, r4, #5
   17294:	cmp	r9, #1
   17298:	add	r4, r4, #1
   1729c:	add	r4, r4, fp
   172a0:	beq	17b48 <__assert_fail@plt+0x6444>
   172a4:	vldr	d7, [pc, #468]	; 17480 <__assert_fail@plt+0x5d7c>
   172a8:	vcmpe.f64	d9, d7
   172ac:	vmrs	APSR_nzcv, fpscr
   172b0:	vmovpl.f64	d7, d9
   172b4:	bpl	172f4 <__assert_fail@plt+0x5bf0>
   172b8:	vmov	r0, r1, d9
   172bc:	bl	20fa0 <__assert_fail@plt+0xf89c>
   172c0:	mov	r5, r0
   172c4:	mov	r8, r1
   172c8:	bl	20edc <__assert_fail@plt+0xf7d8>
   172cc:	cmp	r9, #0
   172d0:	vmov	d7, r0, r1
   172d4:	bne	172f4 <__assert_fail@plt+0x5bf0>
   172d8:	vcmp.f64	d9, d7
   172dc:	vmrs	APSR_nzcv, fpscr
   172e0:	beq	172f4 <__assert_fail@plt+0x5bf0>
   172e4:	adds	r0, r5, #1
   172e8:	adc	r1, r8, #0
   172ec:	bl	20edc <__assert_fail@plt+0xf7d8>
   172f0:	vmov	d7, r0, r1
   172f4:	ldr	r5, [sp, #12]
   172f8:	mvn	r2, #0
   172fc:	mov	r1, #1
   17300:	movw	r3, #8960	; 0x2300
   17304:	movt	r3, #2
   17308:	vstr	d7, [sp]
   1730c:	mov	r0, r5
   17310:	bl	11578 <__sprintf_chk@plt>
   17314:	mov	r0, r5
   17318:	bl	1153c <strlen@plt>
   1731c:	cmp	r0, r4
   17320:	bls	17a28 <__assert_fail@plt+0x6324>
   17324:	vldr	d7, [pc, #348]	; 17488 <__assert_fail@plt+0x5d84>
   17328:	vmul.f64	d9, d9, d7
   1732c:	vldr	d7, [pc, #332]	; 17480 <__assert_fail@plt+0x5d7c>
   17330:	vcmpe.f64	d9, d7
   17334:	vmrs	APSR_nzcv, fpscr
   17338:	bpl	17380 <__assert_fail@plt+0x5c7c>
   1733c:	vmov	r0, r1, d9
   17340:	bl	20fa0 <__assert_fail@plt+0xf89c>
   17344:	mov	r4, r0
   17348:	mov	r5, r1
   1734c:	bl	20edc <__assert_fail@plt+0xf7d8>
   17350:	and	r3, r6, #3
   17354:	vmov	d7, r0, r1
   17358:	cmp	r3, #0
   1735c:	bne	1737c <__assert_fail@plt+0x5c78>
   17360:	vcmp.f64	d9, d7
   17364:	vmrs	APSR_nzcv, fpscr
   17368:	beq	1737c <__assert_fail@plt+0x5c78>
   1736c:	adds	r0, r4, #1
   17370:	adc	r1, r5, #0
   17374:	bl	20edc <__assert_fail@plt+0xf7d8>
   17378:	vmov	d7, r0, r1
   1737c:	vmov.f64	d9, d7
   17380:	vldr	d6, [pc, #256]	; 17488 <__assert_fail@plt+0x5d84>
   17384:	mvn	r2, #0
   17388:	mov	r1, #1
   1738c:	movw	r3, #8952	; 0x22f8
   17390:	movt	r3, #2
   17394:	ldr	r4, [sp, #12]
   17398:	vdiv.f64	d7, d9, d6
   1739c:	mov	r0, r4
   173a0:	vstr	d7, [sp]
   173a4:	bl	11578 <__sprintf_chk@plt>
   173a8:	mov	r0, r4
   173ac:	bl	1153c <strlen@plt>
   173b0:	mov	r9, r0
   173b4:	b	17404 <__assert_fail@plt+0x5d00>
   173b8:	and	r8, r6, #3
   173bc:	cmp	r8, #1
   173c0:	beq	173d4 <__assert_fail@plt+0x5cd0>
   173c4:	vldr	d7, [pc, #180]	; 17480 <__assert_fail@plt+0x5d7c>
   173c8:	vcmpe.f64	d8, d7
   173cc:	vmrs	APSR_nzcv, fpscr
   173d0:	bmi	17a4c <__assert_fail@plt+0x6348>
   173d4:	ldr	r4, [sp, #12]
   173d8:	mvn	r2, #0
   173dc:	mov	r1, #1
   173e0:	movw	r3, #8952	; 0x22f8
   173e4:	movt	r3, #2
   173e8:	vstr	d8, [sp]
   173ec:	str	r2, [sp, #16]
   173f0:	mov	r0, r4
   173f4:	bl	11578 <__sprintf_chk@plt>
   173f8:	mov	r0, r4
   173fc:	bl	1153c <strlen@plt>
   17400:	mov	r9, r0
   17404:	mov	r2, r0
   17408:	ldr	r1, [sp, #12]
   1740c:	ldr	r3, [sp, #32]
   17410:	sub	r8, r3, r0
   17414:	mov	r0, r8
   17418:	add	r9, r8, r9
   1741c:	bl	11344 <memmove@plt>
   17420:	tst	r6, #4
   17424:	bne	1781c <__assert_fail@plt+0x6118>
   17428:	tst	r6, #128	; 0x80
   1742c:	beq	1744c <__assert_fail@plt+0x5d48>
   17430:	ldr	r3, [sp, #16]
   17434:	cmn	r3, #1
   17438:	beq	178bc <__assert_fail@plt+0x61b8>
   1743c:	ldr	r2, [sp, #16]
   17440:	and	r3, r6, #256	; 0x100
   17444:	orrs	r2, r3, r2
   17448:	bne	17bc0 <__assert_fail@plt+0x64bc>
   1744c:	ldr	r2, [sp, #32]
   17450:	mov	r3, #0
   17454:	mov	r0, r8
   17458:	strb	r3, [r2]
   1745c:	add	sp, sp, #108	; 0x6c
   17460:	vpop	{d8-d9}
   17464:	ldrd	r4, [sp]
   17468:	ldrd	r6, [sp, #8]
   1746c:	ldrd	r8, [sp, #16]
   17470:	ldrd	sl, [sp, #24]
   17474:	add	sp, sp, #32
   17478:	pop	{pc}		; (ldr pc, [sp], #4)
   1747c:	nop	{0}
   17480:	andeq	r0, r0, r0
   17484:	mvnsmi	r0, #0
   17488:	andeq	r0, r0, r0
   1748c:	eormi	r0, r4, r0
   17490:	mov	r2, r0
   17494:	mov	r3, r1
   17498:	orrs	r3, r2, r3
   1749c:	beq	171b8 <__assert_fail@plt+0x5ab4>
   174a0:	ldrd	r2, [sp, #160]	; 0xa0
   174a4:	ldrd	r0, [sp, #168]	; 0xa8
   174a8:	bl	20f50 <__assert_fail@plt+0xf84c>
   174ac:	orrs	r3, r2, r3
   174b0:	mov	r4, r0
   174b4:	mov	r5, r1
   174b8:	bne	171b8 <__assert_fail@plt+0x5ab4>
   174bc:	mov	r0, r8
   174c0:	mov	r1, r9
   174c4:	mov	r2, r4
   174c8:	mov	r3, r5
   174cc:	bl	20f50 <__assert_fail@plt+0xf84c>
   174d0:	mov	lr, r2
   174d4:	mov	r8, r1
   174d8:	lsl	r1, r3, #2
   174dc:	mov	r9, r0
   174e0:	lsl	r0, lr, #2
   174e4:	mov	ip, r3
   174e8:	orr	r1, r1, lr, lsr #30
   174ec:	mov	r2, r4
   174f0:	mov	r3, r5
   174f4:	adds	r0, r0, lr
   174f8:	strd	r4, [sp, #16]
   174fc:	mov	r4, r9
   17500:	adc	r1, r1, ip
   17504:	adds	r0, r0, r0
   17508:	adc	r1, r1, r1
   1750c:	mov	r5, r8
   17510:	bl	20f50 <__assert_fail@plt+0xf84c>
   17514:	adds	r1, r2, r2
   17518:	adc	r3, r3, r3
   1751c:	str	r1, [sp, #48]	; 0x30
   17520:	str	r3, [sp, #52]	; 0x34
   17524:	ldrd	r2, [sp, #16]
   17528:	ldrd	r8, [sp, #48]	; 0x30
   1752c:	str	r0, [sp, #48]	; 0x30
   17530:	cmp	r3, r9
   17534:	cmpeq	r2, r8
   17538:	bls	17bb4 <__assert_fail@plt+0x64b0>
   1753c:	mov	r3, r8
   17540:	orrs	r3, r3, r9
   17544:	movne	r8, #1
   17548:	moveq	r8, #0
   1754c:	ands	r3, r6, #16
   17550:	str	r3, [sp, #16]
   17554:	beq	17aa4 <__assert_fail@plt+0x63a0>
   17558:	ldrd	r2, [sp, #24]
   1755c:	cmp	r5, r3
   17560:	cmpeq	r4, r2
   17564:	bcc	17c0c <__assert_fail@plt+0x6508>
   17568:	mov	r0, r4
   1756c:	mov	r1, r5
   17570:	bl	20f50 <__assert_fail@plt+0xf84c>
   17574:	ldr	ip, [sp, #48]	; 0x30
   17578:	add	r2, r2, r2, lsl #2
   1757c:	mov	r4, r0
   17580:	asr	r3, r8, #1
   17584:	mov	r5, r1
   17588:	add	r2, ip, r2, lsl #1
   1758c:	ldr	ip, [sp, #36]	; 0x24
   17590:	udiv	r9, r2, ip
   17594:	mls	r2, ip, r9, r2
   17598:	str	r9, [sp, #48]	; 0x30
   1759c:	add	r2, r3, r2, lsl #1
   175a0:	cmp	ip, r2
   175a4:	add	r2, r8, r2
   175a8:	bhi	17c44 <__assert_fail@plt+0x6540>
   175ac:	cmp	ip, r2
   175b0:	mov	ip, #1
   175b4:	movcc	r8, #3
   175b8:	movcs	r8, #2
   175bc:	ldrd	r2, [sp, #24]
   175c0:	cmp	r1, r3
   175c4:	cmpeq	r0, r2
   175c8:	bcc	17e90 <__assert_fail@plt+0x678c>
   175cc:	bl	20f50 <__assert_fail@plt+0xf84c>
   175d0:	add	r2, r2, r2, lsl #2
   175d4:	ldr	ip, [sp, #36]	; 0x24
   175d8:	mov	r4, r0
   175dc:	asr	r3, r8, #1
   175e0:	mov	r5, r1
   175e4:	add	r2, r9, r2, lsl #1
   175e8:	udiv	r9, r2, ip
   175ec:	mls	r2, ip, r9, r2
   175f0:	str	r9, [sp, #48]	; 0x30
   175f4:	add	r3, r3, r2, lsl #1
   175f8:	cmp	ip, r3
   175fc:	add	r3, r8, r3
   17600:	bhi	17c84 <__assert_fail@plt+0x6580>
   17604:	cmp	ip, r3
   17608:	mov	ip, #1
   1760c:	movcc	r8, #3
   17610:	movcs	r8, #2
   17614:	ldrd	r2, [sp, #24]
   17618:	cmp	r1, r3
   1761c:	cmpeq	r0, r2
   17620:	bcc	17ea8 <__assert_fail@plt+0x67a4>
   17624:	bl	20f50 <__assert_fail@plt+0xf84c>
   17628:	add	r2, r2, r2, lsl #2
   1762c:	mov	r4, r0
   17630:	mov	r5, r1
   17634:	asr	r3, r8, #1
   17638:	add	r9, r9, r2, lsl #1
   1763c:	ldr	r2, [sp, #36]	; 0x24
   17640:	udiv	ip, r9, r2
   17644:	mls	r9, r2, ip, r9
   17648:	str	ip, [sp, #16]
   1764c:	str	ip, [sp, #48]	; 0x30
   17650:	add	r3, r3, r9, lsl #1
   17654:	cmp	r2, r3
   17658:	add	r3, r8, r3
   1765c:	bhi	17c94 <__assert_fail@plt+0x6590>
   17660:	cmp	r2, r3
   17664:	mov	ip, #1
   17668:	movcc	r8, #3
   1766c:	movcs	r8, #2
   17670:	ldrd	r2, [sp, #24]
   17674:	cmp	r1, r3
   17678:	cmpeq	r0, r2
   1767c:	bcc	17e9c <__assert_fail@plt+0x6798>
   17680:	bl	20f50 <__assert_fail@plt+0xf84c>
   17684:	ldr	ip, [sp, #16]
   17688:	add	r2, r2, r2, lsl #2
   1768c:	mov	r4, r0
   17690:	asr	r3, r8, #1
   17694:	mov	r5, r1
   17698:	add	r2, ip, r2, lsl #1
   1769c:	ldr	ip, [sp, #36]	; 0x24
   176a0:	udiv	r9, r2, ip
   176a4:	mls	r2, ip, r9, r2
   176a8:	str	r9, [sp, #48]	; 0x30
   176ac:	add	r3, r3, r2, lsl #1
   176b0:	cmp	ip, r3
   176b4:	add	r3, r8, r3
   176b8:	bhi	17cbc <__assert_fail@plt+0x65b8>
   176bc:	cmp	r3, ip
   176c0:	mov	ip, #1
   176c4:	movhi	r8, #3
   176c8:	movls	r8, #2
   176cc:	ldrd	r2, [sp, #24]
   176d0:	cmp	r1, r3
   176d4:	cmpeq	r0, r2
   176d8:	bcc	17eb4 <__assert_fail@plt+0x67b0>
   176dc:	bl	20f50 <__assert_fail@plt+0xf84c>
   176e0:	add	r2, r2, r2, lsl #2
   176e4:	mov	r4, r0
   176e8:	mov	r5, r1
   176ec:	asr	r3, r8, #1
   176f0:	add	r9, r9, r2, lsl #1
   176f4:	ldr	r2, [sp, #36]	; 0x24
   176f8:	udiv	ip, r9, r2
   176fc:	mls	r9, r2, ip, r9
   17700:	str	ip, [sp, #16]
   17704:	str	ip, [sp, #48]	; 0x30
   17708:	add	r3, r3, r9, lsl #1
   1770c:	cmp	r2, r3
   17710:	add	r3, r8, r3
   17714:	bhi	17ccc <__assert_fail@plt+0x65c8>
   17718:	cmp	r2, r3
   1771c:	mov	ip, #1
   17720:	movcc	r8, #3
   17724:	movcs	r8, #2
   17728:	ldrd	r2, [sp, #24]
   1772c:	cmp	r1, r3
   17730:	cmpeq	r0, r2
   17734:	bcc	17ecc <__assert_fail@plt+0x67c8>
   17738:	bl	20f50 <__assert_fail@plt+0xf84c>
   1773c:	mov	r5, r1
   17740:	ldr	r1, [sp, #16]
   17744:	add	r2, r2, r2, lsl #2
   17748:	mov	r4, r0
   1774c:	asr	r3, r8, #1
   17750:	ldr	r0, [sp, #36]	; 0x24
   17754:	add	r1, r1, r2, lsl #1
   17758:	udiv	r2, r1, r0
   1775c:	mls	r1, r0, r2, r1
   17760:	str	r2, [sp, #48]	; 0x30
   17764:	add	r3, r3, r1, lsl #1
   17768:	cmp	r0, r3
   1776c:	add	r3, r8, r3
   17770:	bhi	17cdc <__assert_fail@plt+0x65d8>
   17774:	cmp	r0, r3
   17778:	mov	ip, #1
   1777c:	movcs	r8, #2
   17780:	movcc	r8, #3
   17784:	mov	r3, #6
   17788:	str	r3, [sp, #16]
   1778c:	cmp	r5, #0
   17790:	cmpeq	r4, #9
   17794:	bhi	17aac <__assert_fail@plt+0x63a8>
   17798:	and	r3, r6, #3
   1779c:	cmp	r3, #1
   177a0:	beq	17d5c <__assert_fail@plt+0x6658>
   177a4:	and	r3, r6, #3
   177a8:	cmp	r3, #0
   177ac:	moveq	r3, ip
   177b0:	movne	r3, #0
   177b4:	cmp	r3, #0
   177b8:	ldr	r3, [sp, #48]	; 0x30
   177bc:	bne	17d18 <__assert_fail@plt+0x6614>
   177c0:	cmp	r3, #0
   177c4:	addne	r3, r3, #48	; 0x30
   177c8:	uxtbne	r3, r3
   177cc:	bne	177dc <__assert_fail@plt+0x60d8>
   177d0:	tst	r6, #8
   177d4:	bne	17e64 <__assert_fail@plt+0x6760>
   177d8:	mov	r3, #48	; 0x30
   177dc:	ldr	r1, [sp, #12]
   177e0:	mov	r2, fp
   177e4:	mov	r8, #0
   177e8:	add	r9, r1, #644	; 0x284
   177ec:	strb	r3, [r1, #646]	; 0x286
   177f0:	add	r9, r9, #2
   177f4:	ldr	r1, [sp, #44]	; 0x2c
   177f8:	sub	r9, r9, fp
   177fc:	mov	r0, r9
   17800:	bl	11374 <memcpy@plt>
   17804:	and	r3, r6, #3
   17808:	cmp	r3, #1
   1780c:	beq	17afc <__assert_fail@plt+0x63f8>
   17810:	mov	r3, #0
   17814:	str	r3, [sp, #48]	; 0x30
   17818:	b	17abc <__assert_fail@plt+0x63b8>
   1781c:	mov	r0, r7
   17820:	sub	r4, r9, r8
   17824:	bl	1153c <strlen@plt>
   17828:	mov	fp, r0
   1782c:	mov	r1, r8
   17830:	mov	r2, r4
   17834:	add	r0, sp, #60	; 0x3c
   17838:	mov	r3, #41	; 0x29
   1783c:	mvn	r5, #0
   17840:	bl	11434 <__memcpy_chk@plt>
   17844:	ldrb	r3, [sl]
   17848:	cmp	r3, #0
   1784c:	beq	17860 <__assert_fail@plt+0x615c>
   17850:	cmp	r3, #255	; 0xff
   17854:	add	sl, sl, #1
   17858:	movne	r5, r3
   1785c:	moveq	r5, r4
   17860:	sub	r8, r9, r5
   17864:	cmp	r5, r4
   17868:	mov	r2, r5
   1786c:	mov	r0, r8
   17870:	bls	1788c <__assert_fail@plt+0x6188>
   17874:	sub	r8, r9, r4
   17878:	mov	r2, r4
   1787c:	add	r1, sp, #60	; 0x3c
   17880:	mov	r0, r8
   17884:	bl	11374 <memcpy@plt>
   17888:	b	17428 <__assert_fail@plt+0x5d24>
   1788c:	sub	r4, r4, r5
   17890:	add	r3, sp, #60	; 0x3c
   17894:	add	r1, r3, r4
   17898:	sub	r9, r8, fp
   1789c:	bl	11374 <memcpy@plt>
   178a0:	cmp	r4, #0
   178a4:	mov	r2, fp
   178a8:	mov	r1, r7
   178ac:	mov	r0, r9
   178b0:	beq	17428 <__assert_fail@plt+0x5d24>
   178b4:	bl	11374 <memcpy@plt>
   178b8:	b	17844 <__assert_fail@plt+0x6140>
   178bc:	ldrd	r2, [sp, #168]	; 0xa8
   178c0:	cmp	r3, #0
   178c4:	cmpeq	r2, #1
   178c8:	bls	17c78 <__assert_fail@plt+0x6574>
   178cc:	mov	r0, r2
   178d0:	mov	r1, r3
   178d4:	ldrd	r2, [sp, #24]
   178d8:	cmp	r1, r3
   178dc:	cmpeq	r0, r2
   178e0:	bls	17f0c <__assert_fail@plt+0x6808>
   178e4:	mul	r1, r2, r3
   178e8:	mov	r4, r2
   178ec:	mov	r5, r3
   178f0:	umull	sl, fp, r2, r2
   178f4:	add	fp, fp, r1, lsl #1
   178f8:	ldrd	r0, [sp, #168]	; 0xa8
   178fc:	cmp	r1, fp
   17900:	cmpeq	r0, sl
   17904:	bls	17d78 <__assert_fail@plt+0x6674>
   17908:	mul	r3, r2, fp
   1790c:	umull	r0, r1, r4, sl
   17910:	mla	r2, sl, r5, r3
   17914:	strd	r0, [sp, #16]
   17918:	add	r3, r2, r1
   1791c:	str	r3, [sp, #20]
   17920:	ldrd	sl, [sp, #16]
   17924:	ldrd	r2, [sp, #168]	; 0xa8
   17928:	cmp	r3, fp
   1792c:	cmpeq	r2, sl
   17930:	bls	17dac <__assert_fail@plt+0x66a8>
   17934:	ldr	r2, [sp, #16]
   17938:	mul	r1, r4, fp
   1793c:	umull	sl, fp, r4, sl
   17940:	mla	r0, r2, r5, r1
   17944:	ldrd	r2, [sp, #168]	; 0xa8
   17948:	add	fp, r0, fp
   1794c:	cmp	r3, fp
   17950:	cmpeq	r2, sl
   17954:	bls	17ed8 <__assert_fail@plt+0x67d4>
   17958:	mul	r3, r4, fp
   1795c:	umull	r0, r1, r4, sl
   17960:	mla	r2, sl, r5, r3
   17964:	add	r1, r2, r1
   17968:	ldrd	r2, [sp, #168]	; 0xa8
   1796c:	cmp	r3, r1
   17970:	cmpeq	r2, r0
   17974:	bls	17de0 <__assert_fail@plt+0x66dc>
   17978:	mul	ip, r0, r5
   1797c:	mov	lr, r4
   17980:	umull	r2, r3, r0, r4
   17984:	mla	r1, r4, r1, ip
   17988:	add	r3, r1, r3
   1798c:	ldrd	r0, [sp, #168]	; 0xa8
   17990:	cmp	r1, r3
   17994:	cmpeq	r0, r2
   17998:	bls	17e14 <__assert_fail@plt+0x6710>
   1799c:	mul	ip, r2, r5
   179a0:	umull	r0, r1, r2, r4
   179a4:	mla	r3, r4, r3, ip
   179a8:	add	r1, r3, r1
   179ac:	ldrd	r2, [sp, #168]	; 0xa8
   179b0:	cmp	r3, r1
   179b4:	cmpeq	r2, r0
   179b8:	bls	17f58 <__assert_fail@plt+0x6854>
   179bc:	tst	r6, #64	; 0x40
   179c0:	and	r3, r6, #256	; 0x100
   179c4:	beq	179dc <__assert_fail@plt+0x62d8>
   179c8:	ldr	r1, [sp, #12]
   179cc:	mov	r2, #32
   179d0:	add	r0, r1, #648	; 0x288
   179d4:	strb	r2, [r1, #647]	; 0x287
   179d8:	str	r0, [sp, #32]
   179dc:	mov	r2, #8
   179e0:	str	r2, [sp, #16]
   179e4:	ldr	r2, [sp, #40]	; 0x28
   179e8:	adds	r1, r2, #0
   179ec:	movne	r1, #1
   179f0:	ldr	r0, [sp, #16]
   179f4:	movw	r2, #8920	; 0x22d8
   179f8:	movt	r2, #2
   179fc:	cmp	r3, #0
   17a00:	ldrb	r0, [r2, r0]
   17a04:	ldr	r2, [sp, #32]
   17a08:	strb	r0, [r2], #1
   17a0c:	beq	17c04 <__assert_fail@plt+0x6500>
   17a10:	cmp	r1, #0
   17a14:	bne	17c18 <__assert_fail@plt+0x6514>
   17a18:	mov	r3, #66	; 0x42
   17a1c:	strb	r3, [r2], #1
   17a20:	str	r2, [sp, #32]
   17a24:	b	1744c <__assert_fail@plt+0x5d48>
   17a28:	tst	r6, #8
   17a2c:	beq	17a44 <__assert_fail@plt+0x6340>
   17a30:	ldr	r3, [sp, #12]
   17a34:	add	r3, r3, r0
   17a38:	ldrb	r3, [r3, #-1]
   17a3c:	cmp	r3, #48	; 0x30
   17a40:	beq	17ca4 <__assert_fail@plt+0x65a0>
   17a44:	sub	r9, r0, fp
   17a48:	b	17404 <__assert_fail@plt+0x5d00>
   17a4c:	vmov	r0, r1, d8
   17a50:	bl	20fa0 <__assert_fail@plt+0xf89c>
   17a54:	mov	r4, r0
   17a58:	mov	r5, r1
   17a5c:	bl	20edc <__assert_fail@plt+0xf7d8>
   17a60:	cmp	r8, #0
   17a64:	vmov	d7, r0, r1
   17a68:	bne	17a88 <__assert_fail@plt+0x6384>
   17a6c:	vcmp.f64	d8, d7
   17a70:	vmrs	APSR_nzcv, fpscr
   17a74:	beq	17a88 <__assert_fail@plt+0x6384>
   17a78:	adds	r0, r4, #1
   17a7c:	adc	r1, r5, #0
   17a80:	bl	20edc <__assert_fail@plt+0xf7d8>
   17a84:	vmov	d7, r0, r1
   17a88:	vmov.f64	d8, d7
   17a8c:	b	173d4 <__assert_fail@plt+0x5cd0>
   17a90:	mov	r8, #0
   17a94:	ands	r3, r6, #16
   17a98:	str	r3, [sp, #16]
   17a9c:	str	r8, [sp, #48]	; 0x30
   17aa0:	bne	17558 <__assert_fail@plt+0x5e54>
   17aa4:	mvn	r3, #0
   17aa8:	str	r3, [sp, #16]
   17aac:	and	r3, r6, #3
   17ab0:	cmp	r3, #1
   17ab4:	beq	17b84 <__assert_fail@plt+0x6480>
   17ab8:	ldr	r9, [sp, #32]
   17abc:	and	r3, r6, #3
   17ac0:	cmp	r3, #0
   17ac4:	bne	17afc <__assert_fail@plt+0x63f8>
   17ac8:	ldr	r3, [sp, #48]	; 0x30
   17acc:	add	r3, r8, r3
   17ad0:	cmp	r3, #0
   17ad4:	ble	17afc <__assert_fail@plt+0x63f8>
   17ad8:	adds	r4, r4, #1
   17adc:	adc	r5, r5, #0
   17ae0:	ands	r3, r6, #16
   17ae4:	cmp	r3, #0
   17ae8:	beq	17afc <__assert_fail@plt+0x63f8>
   17aec:	ldrd	r2, [sp, #24]
   17af0:	cmp	r5, r3
   17af4:	cmpeq	r4, r2
   17af8:	beq	17c54 <__assert_fail@plt+0x6550>
   17afc:	mov	r8, r9
   17b00:	mov	r0, r4
   17b04:	mov	r1, r5
   17b08:	mov	r2, #10
   17b0c:	mov	r3, #0
   17b10:	bl	20f50 <__assert_fail@plt+0xf84c>
   17b14:	add	r2, r2, #48	; 0x30
   17b18:	mov	r0, r4
   17b1c:	mov	r1, r5
   17b20:	mov	r3, #0
   17b24:	strb	r2, [r8, #-1]!
   17b28:	mov	r2, #10
   17b2c:	bl	20f50 <__assert_fail@plt+0xf84c>
   17b30:	cmp	r5, #0
   17b34:	mov	r5, r1
   17b38:	cmpeq	r4, #9
   17b3c:	mov	r4, r0
   17b40:	bhi	17b00 <__assert_fail@plt+0x63fc>
   17b44:	b	17420 <__assert_fail@plt+0x5d1c>
   17b48:	ldr	r5, [sp, #12]
   17b4c:	mvn	r2, #0
   17b50:	and	r1, r6, #3
   17b54:	movw	r3, #8960	; 0x2300
   17b58:	movt	r3, #2
   17b5c:	vstr	d9, [sp]
   17b60:	mov	r0, r5
   17b64:	bl	11578 <__sprintf_chk@plt>
   17b68:	mov	r0, r5
   17b6c:	bl	1153c <strlen@plt>
   17b70:	cmp	r0, r4
   17b74:	bls	17a28 <__assert_fail@plt+0x6324>
   17b78:	vldr	d7, [pc, #976]	; 17f50 <__assert_fail@plt+0x684c>
   17b7c:	vmul.f64	d9, d9, d7
   17b80:	b	17380 <__assert_fail@plt+0x5c7c>
   17b84:	and	r0, r4, #1
   17b88:	mov	r1, #0
   17b8c:	ldr	r9, [sp, #32]
   17b90:	adds	r2, r0, r8
   17b94:	adc	r3, r1, r8, asr #31
   17b98:	orr	r2, r2, r3
   17b9c:	ldr	r3, [sp, #48]	; 0x30
   17ba0:	cmp	r2, r1
   17ba4:	addne	r3, r3, #1
   17ba8:	cmp	r3, #5
   17bac:	bgt	17ad8 <__assert_fail@plt+0x63d4>
   17bb0:	b	17afc <__assert_fail@plt+0x63f8>
   17bb4:	movcs	r8, #2
   17bb8:	movcc	r8, #3
   17bbc:	b	1754c <__assert_fail@plt+0x5e48>
   17bc0:	tst	r6, #64	; 0x40
   17bc4:	bne	17c2c <__assert_fail@plt+0x6528>
   17bc8:	ldr	r2, [sp, #16]
   17bcc:	cmp	r2, #0
   17bd0:	beq	17f40 <__assert_fail@plt+0x683c>
   17bd4:	ldr	r0, [sp, #16]
   17bd8:	ldr	r2, [sp, #40]	; 0x28
   17bdc:	adds	r1, r2, #0
   17be0:	movne	r1, #1
   17be4:	cmp	r2, #0
   17be8:	cmpeq	r0, #1
   17bec:	bne	179f0 <__assert_fail@plt+0x62ec>
   17bf0:	ldr	r2, [sp, #32]
   17bf4:	mov	r1, #107	; 0x6b
   17bf8:	cmp	r3, #0
   17bfc:	strb	r1, [r2], #1
   17c00:	bne	17a18 <__assert_fail@plt+0x6314>
   17c04:	str	r2, [sp, #32]
   17c08:	b	1744c <__assert_fail@plt+0x5d48>
   17c0c:	mov	r3, #0
   17c10:	str	r3, [sp, #16]
   17c14:	b	17aac <__assert_fail@plt+0x63a8>
   17c18:	ldr	r1, [sp, #32]
   17c1c:	mov	r3, #105	; 0x69
   17c20:	add	r2, r1, #2
   17c24:	strb	r3, [r1, #1]
   17c28:	b	17a18 <__assert_fail@plt+0x6314>
   17c2c:	ldr	r1, [sp, #12]
   17c30:	mov	r2, #32
   17c34:	add	r0, r1, #648	; 0x288
   17c38:	strb	r2, [r1, #647]	; 0x287
   17c3c:	str	r0, [sp, #32]
   17c40:	b	17bc8 <__assert_fail@plt+0x64c4>
   17c44:	adds	r8, r2, #0
   17c48:	movne	r8, #1
   17c4c:	mov	ip, r8
   17c50:	b	175bc <__assert_fail@plt+0x5eb8>
   17c54:	ldr	r3, [sp, #16]
   17c58:	tst	r6, #8
   17c5c:	add	r3, r3, #1
   17c60:	str	r3, [sp, #16]
   17c64:	beq	17e6c <__assert_fail@plt+0x6768>
   17c68:	mov	r3, #49	; 0x31
   17c6c:	sub	r8, r9, #1
   17c70:	strb	r3, [r9, #-1]
   17c74:	b	17420 <__assert_fail@plt+0x5d1c>
   17c78:	mov	r3, #0
   17c7c:	str	r3, [sp, #16]
   17c80:	b	1743c <__assert_fail@plt+0x5d38>
   17c84:	adds	ip, r3, #0
   17c88:	movne	ip, #1
   17c8c:	mov	r8, ip
   17c90:	b	17614 <__assert_fail@plt+0x5f10>
   17c94:	adds	ip, r3, #0
   17c98:	movne	ip, #1
   17c9c:	mov	r8, ip
   17ca0:	b	17670 <__assert_fail@plt+0x5f6c>
   17ca4:	vldr	d7, [pc, #676]	; 17f50 <__assert_fail@plt+0x684c>
   17ca8:	and	r3, r6, #3
   17cac:	cmp	r3, #1
   17cb0:	vmul.f64	d9, d9, d7
   17cb4:	bne	1732c <__assert_fail@plt+0x5c28>
   17cb8:	b	17380 <__assert_fail@plt+0x5c7c>
   17cbc:	adds	ip, r3, #0
   17cc0:	movne	ip, #1
   17cc4:	mov	r8, ip
   17cc8:	b	176cc <__assert_fail@plt+0x5fc8>
   17ccc:	adds	ip, r3, #0
   17cd0:	movne	ip, #1
   17cd4:	mov	r8, ip
   17cd8:	b	17728 <__assert_fail@plt+0x6024>
   17cdc:	adds	ip, r3, #0
   17ce0:	movne	ip, #1
   17ce4:	mov	r8, ip
   17ce8:	b	17784 <__assert_fail@plt+0x6080>
   17cec:	mov	r3, #1
   17cf0:	str	r3, [sp, #16]
   17cf4:	b	1727c <__assert_fail@plt+0x5b78>
   17cf8:	mov	r3, #2
   17cfc:	vmov.f64	d7, d6
   17d00:	str	r3, [sp, #16]
   17d04:	b	1727c <__assert_fail@plt+0x5b78>
   17d08:	mov	r3, #3
   17d0c:	vmov.f64	d7, d5
   17d10:	str	r3, [sp, #16]
   17d14:	b	1727c <__assert_fail@plt+0x5b78>
   17d18:	cmp	r3, #9
   17d1c:	beq	17e48 <__assert_fail@plt+0x6744>
   17d20:	add	r3, r3, #49	; 0x31
   17d24:	uxtb	r3, r3
   17d28:	b	177dc <__assert_fail@plt+0x60d8>
   17d2c:	mov	r3, #4
   17d30:	vmov.f64	d7, d6
   17d34:	str	r3, [sp, #16]
   17d38:	b	1727c <__assert_fail@plt+0x5b78>
   17d3c:	mov	r3, #5
   17d40:	vmov.f64	d7, d5
   17d44:	str	r3, [sp, #16]
   17d48:	b	1727c <__assert_fail@plt+0x5b78>
   17d4c:	mov	r3, #6
   17d50:	vmov.f64	d7, d6
   17d54:	str	r3, [sp, #16]
   17d58:	b	1727c <__assert_fail@plt+0x5b78>
   17d5c:	ldr	r3, [sp, #48]	; 0x30
   17d60:	and	r3, r3, #1
   17d64:	add	r3, r3, r8
   17d68:	cmp	r3, #2
   17d6c:	movle	r3, #0
   17d70:	movgt	r3, #1
   17d74:	b	177b4 <__assert_fail@plt+0x60b0>
   17d78:	tst	r6, #64	; 0x40
   17d7c:	and	r3, r6, #256	; 0x100
   17d80:	moveq	r2, #2
   17d84:	streq	r2, [sp, #16]
   17d88:	beq	179e4 <__assert_fail@plt+0x62e0>
   17d8c:	ldr	r1, [sp, #12]
   17d90:	mov	r2, #32
   17d94:	add	r0, r1, #648	; 0x288
   17d98:	strb	r2, [r1, #647]	; 0x287
   17d9c:	mov	r2, #2
   17da0:	str	r2, [sp, #16]
   17da4:	str	r0, [sp, #32]
   17da8:	b	179e4 <__assert_fail@plt+0x62e0>
   17dac:	tst	r6, #64	; 0x40
   17db0:	and	r3, r6, #256	; 0x100
   17db4:	moveq	r2, #3
   17db8:	streq	r2, [sp, #16]
   17dbc:	beq	179e4 <__assert_fail@plt+0x62e0>
   17dc0:	ldr	r1, [sp, #12]
   17dc4:	mov	r2, #32
   17dc8:	add	r0, r1, #648	; 0x288
   17dcc:	strb	r2, [r1, #647]	; 0x287
   17dd0:	mov	r2, #3
   17dd4:	str	r2, [sp, #16]
   17dd8:	str	r0, [sp, #32]
   17ddc:	b	179e4 <__assert_fail@plt+0x62e0>
   17de0:	tst	r6, #64	; 0x40
   17de4:	and	r3, r6, #256	; 0x100
   17de8:	moveq	r2, #5
   17dec:	streq	r2, [sp, #16]
   17df0:	beq	179e4 <__assert_fail@plt+0x62e0>
   17df4:	ldr	r1, [sp, #12]
   17df8:	mov	r2, #32
   17dfc:	add	r0, r1, #648	; 0x288
   17e00:	strb	r2, [r1, #647]	; 0x287
   17e04:	mov	r2, #5
   17e08:	str	r2, [sp, #16]
   17e0c:	str	r0, [sp, #32]
   17e10:	b	179e4 <__assert_fail@plt+0x62e0>
   17e14:	tst	r6, #64	; 0x40
   17e18:	and	r3, r6, #256	; 0x100
   17e1c:	moveq	r2, #6
   17e20:	streq	r2, [sp, #16]
   17e24:	beq	179e4 <__assert_fail@plt+0x62e0>
   17e28:	ldr	r1, [sp, #12]
   17e2c:	mov	r2, #32
   17e30:	add	r0, r1, #648	; 0x288
   17e34:	strb	r2, [r1, #647]	; 0x287
   17e38:	mov	r2, #6
   17e3c:	str	r2, [sp, #16]
   17e40:	str	r0, [sp, #32]
   17e44:	b	179e4 <__assert_fail@plt+0x62e0>
   17e48:	adds	r4, r4, #1
   17e4c:	adc	r5, r5, #0
   17e50:	cmp	r5, #0
   17e54:	cmpeq	r4, #10
   17e58:	beq	17ec0 <__assert_fail@plt+0x67bc>
   17e5c:	mov	r8, #0
   17e60:	b	177d0 <__assert_fail@plt+0x60cc>
   17e64:	ldr	r9, [sp, #32]
   17e68:	b	17804 <__assert_fail@plt+0x6100>
   17e6c:	mov	r0, #48	; 0x30
   17e70:	mvn	r3, fp
   17e74:	ldr	r1, [sp, #44]	; 0x2c
   17e78:	mov	r2, fp
   17e7c:	strb	r0, [r9, #-1]
   17e80:	add	r9, r9, r3
   17e84:	mov	r0, r9
   17e88:	bl	11374 <memcpy@plt>
   17e8c:	b	17c68 <__assert_fail@plt+0x6564>
   17e90:	mov	r3, #1
   17e94:	str	r3, [sp, #16]
   17e98:	b	1778c <__assert_fail@plt+0x6088>
   17e9c:	mov	r3, #3
   17ea0:	str	r3, [sp, #16]
   17ea4:	b	1778c <__assert_fail@plt+0x6088>
   17ea8:	mov	r3, #2
   17eac:	str	r3, [sp, #16]
   17eb0:	b	1778c <__assert_fail@plt+0x6088>
   17eb4:	mov	r3, #4
   17eb8:	str	r3, [sp, #16]
   17ebc:	b	1778c <__assert_fail@plt+0x6088>
   17ec0:	mov	r8, #0
   17ec4:	ldr	r9, [sp, #32]
   17ec8:	b	17804 <__assert_fail@plt+0x6100>
   17ecc:	mov	r3, #5
   17ed0:	str	r3, [sp, #16]
   17ed4:	b	1778c <__assert_fail@plt+0x6088>
   17ed8:	tst	r6, #64	; 0x40
   17edc:	and	r3, r6, #256	; 0x100
   17ee0:	moveq	r2, #4
   17ee4:	streq	r2, [sp, #16]
   17ee8:	beq	179e4 <__assert_fail@plt+0x62e0>
   17eec:	ldr	r1, [sp, #12]
   17ef0:	mov	r2, #32
   17ef4:	add	r0, r1, #648	; 0x288
   17ef8:	strb	r2, [r1, #647]	; 0x287
   17efc:	mov	r2, #4
   17f00:	str	r2, [sp, #16]
   17f04:	str	r0, [sp, #32]
   17f08:	b	179e4 <__assert_fail@plt+0x62e0>
   17f0c:	tst	r6, #64	; 0x40
   17f10:	and	r3, r6, #256	; 0x100
   17f14:	moveq	r2, #1
   17f18:	streq	r2, [sp, #16]
   17f1c:	beq	17bd4 <__assert_fail@plt+0x64d0>
   17f20:	ldr	r1, [sp, #12]
   17f24:	mov	r2, #32
   17f28:	add	r0, r1, #648	; 0x288
   17f2c:	strb	r2, [r1, #647]	; 0x287
   17f30:	mov	r2, #1
   17f34:	str	r2, [sp, #16]
   17f38:	str	r0, [sp, #32]
   17f3c:	b	17bd4 <__assert_fail@plt+0x64d0>
   17f40:	cmp	r3, #0
   17f44:	ldrne	r2, [sp, #32]
   17f48:	bne	17a18 <__assert_fail@plt+0x6314>
   17f4c:	b	1744c <__assert_fail@plt+0x5d48>
   17f50:	andeq	r0, r0, r0
   17f54:	eormi	r0, r4, r0
   17f58:	tst	r6, #64	; 0x40
   17f5c:	and	r3, r6, #256	; 0x100
   17f60:	moveq	r2, #7
   17f64:	streq	r2, [sp, #16]
   17f68:	beq	179e4 <__assert_fail@plt+0x62e0>
   17f6c:	ldr	r1, [sp, #12]
   17f70:	mov	r2, #32
   17f74:	add	r0, r1, #648	; 0x288
   17f78:	strb	r2, [r1, #647]	; 0x287
   17f7c:	mov	r2, #7
   17f80:	str	r2, [sp, #16]
   17f84:	str	r0, [sp, #32]
   17f88:	b	179e4 <__assert_fail@plt+0x62e0>
   17f8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17f90:	subs	r4, r0, #0
   17f94:	strd	r6, [sp, #8]
   17f98:	mov	r7, r1
   17f9c:	mov	r6, r2
   17fa0:	strd	r8, [sp, #16]
   17fa4:	strd	sl, [sp, #24]
   17fa8:	str	lr, [sp, #32]
   17fac:	sub	sp, sp, #20
   17fb0:	beq	180f0 <__assert_fail@plt+0x69ec>
   17fb4:	ldrb	r3, [r4]
   17fb8:	cmp	r3, #39	; 0x27
   17fbc:	beq	18030 <__assert_fail@plt+0x692c>
   17fc0:	mov	r9, #160	; 0xa0
   17fc4:	mov	fp, #416	; 0x1a0
   17fc8:	mov	sl, #384	; 0x180
   17fcc:	mov	r8, #0
   17fd0:	movw	r5, #8920	; 0x22d8
   17fd4:	movt	r5, #2
   17fd8:	add	r2, r5, #12
   17fdc:	add	r1, r5, #20
   17fe0:	mov	r3, #4
   17fe4:	mov	r0, r4
   17fe8:	bl	1fb3c <__assert_fail@plt+0xe438>
   17fec:	cmp	r0, #0
   17ff0:	blt	18048 <__assert_fail@plt+0x6944>
   17ff4:	add	r5, r5, r0, lsl #2
   17ff8:	mov	r2, #1
   17ffc:	mov	r3, #0
   18000:	mov	r0, #0
   18004:	ldr	r1, [r5, #12]
   18008:	strd	r2, [r6]
   1800c:	orr	r8, r8, r1
   18010:	str	r8, [r7]
   18014:	add	sp, sp, #20
   18018:	ldrd	r4, [sp]
   1801c:	ldrd	r6, [sp, #8]
   18020:	ldrd	r8, [sp, #16]
   18024:	ldrd	sl, [sp, #24]
   18028:	add	sp, sp, #32
   1802c:	pop	{pc}		; (ldr pc, [sp], #4)
   18030:	add	r4, r4, #1
   18034:	mov	r9, #164	; 0xa4
   18038:	mov	fp, #420	; 0x1a4
   1803c:	mov	sl, #388	; 0x184
   18040:	mov	r8, #4
   18044:	b	17fd0 <__assert_fail@plt+0x68cc>
   18048:	movw	r0, #8992	; 0x2320
   1804c:	movt	r0, #2
   18050:	mov	r3, r6
   18054:	mov	r2, #0
   18058:	add	r1, sp, #12
   1805c:	str	r0, [sp]
   18060:	mov	r0, r4
   18064:	bl	1e340 <__assert_fail@plt+0xcc3c>
   18068:	cmp	r0, #0
   1806c:	bne	180b4 <__assert_fail@plt+0x69b0>
   18070:	ldrb	r3, [r4]
   18074:	sub	r3, r3, #48	; 0x30
   18078:	cmp	r3, #9
   1807c:	bls	180a8 <__assert_fail@plt+0x69a4>
   18080:	ldr	r2, [sp, #12]
   18084:	cmp	r4, r2
   18088:	bne	18098 <__assert_fail@plt+0x6994>
   1808c:	b	18144 <__assert_fail@plt+0x6a40>
   18090:	cmp	r2, r4
   18094:	beq	18144 <__assert_fail@plt+0x6a40>
   18098:	ldrb	r3, [r4, #1]!
   1809c:	sub	r3, r3, #48	; 0x30
   180a0:	cmp	r3, #9
   180a4:	bhi	18090 <__assert_fail@plt+0x698c>
   180a8:	ldrd	r2, [r6]
   180ac:	str	r8, [r7]
   180b0:	b	180c0 <__assert_fail@plt+0x69bc>
   180b4:	mov	r1, #0
   180b8:	ldrd	r2, [r6]
   180bc:	str	r1, [r7]
   180c0:	orrs	r3, r2, r3
   180c4:	bne	18014 <__assert_fail@plt+0x6910>
   180c8:	movw	r0, #7796	; 0x1e74
   180cc:	movt	r0, #2
   180d0:	bl	114c4 <getenv@plt>
   180d4:	cmp	r0, #0
   180d8:	mov	r3, #0
   180dc:	moveq	r2, #1024	; 0x400
   180e0:	movne	r2, #512	; 0x200
   180e4:	mov	r0, #4
   180e8:	strd	r2, [r6]
   180ec:	b	18014 <__assert_fail@plt+0x6910>
   180f0:	movw	r0, #8968	; 0x2308
   180f4:	movt	r0, #2
   180f8:	bl	114c4 <getenv@plt>
   180fc:	subs	r4, r0, #0
   18100:	bne	17fb4 <__assert_fail@plt+0x68b0>
   18104:	movw	r0, #8980	; 0x2314
   18108:	movt	r0, #2
   1810c:	bl	114c4 <getenv@plt>
   18110:	subs	r4, r0, #0
   18114:	bne	17fb4 <__assert_fail@plt+0x68b0>
   18118:	movw	r0, #7796	; 0x1e74
   1811c:	movt	r0, #2
   18120:	bl	114c4 <getenv@plt>
   18124:	subs	r3, r0, #0
   18128:	beq	18170 <__assert_fail@plt+0x6a6c>
   1812c:	mov	r2, #512	; 0x200
   18130:	mov	r3, #0
   18134:	mov	r0, r4
   18138:	strd	r2, [r6]
   1813c:	str	r4, [r7]
   18140:	b	18014 <__assert_fail@plt+0x6910>
   18144:	ldrb	r3, [r2, #-1]
   18148:	cmp	r3, #66	; 0x42
   1814c:	beq	18158 <__assert_fail@plt+0x6a54>
   18150:	mov	r8, r9
   18154:	b	180a8 <__assert_fail@plt+0x69a4>
   18158:	ldrb	r3, [r2, #-2]
   1815c:	cmp	r3, #105	; 0x69
   18160:	movne	r8, sl
   18164:	bne	180a8 <__assert_fail@plt+0x69a4>
   18168:	mov	r9, fp
   1816c:	b	18150 <__assert_fail@plt+0x6a4c>
   18170:	mov	r4, #1024	; 0x400
   18174:	mov	r5, #0
   18178:	mov	r0, r3
   1817c:	strd	r4, [r6]
   18180:	str	r3, [r7]
   18184:	b	18014 <__assert_fail@plt+0x6910>
   18188:	mov	r3, #0
   1818c:	strd	r4, [sp, #-16]!
   18190:	mov	r4, r0
   18194:	mov	r5, r1
   18198:	str	r6, [sp, #8]
   1819c:	add	r6, r2, #20
   181a0:	str	lr, [sp, #12]
   181a4:	strb	r3, [r2, #20]
   181a8:	mov	r0, r4
   181ac:	mov	r1, r5
   181b0:	mov	r2, #10
   181b4:	mov	r3, #0
   181b8:	bl	20f50 <__assert_fail@plt+0xf84c>
   181bc:	add	ip, r2, #48	; 0x30
   181c0:	mov	r0, r4
   181c4:	mov	r1, r5
   181c8:	mov	r2, #10
   181cc:	mov	r3, #0
   181d0:	strb	ip, [r6, #-1]!
   181d4:	bl	20f50 <__assert_fail@plt+0xf84c>
   181d8:	cmp	r5, #0
   181dc:	mov	r5, r1
   181e0:	cmpeq	r4, #9
   181e4:	mov	r4, r0
   181e8:	bhi	181a8 <__assert_fail@plt+0x6aa4>
   181ec:	mov	r0, r6
   181f0:	ldrd	r4, [sp]
   181f4:	ldr	r6, [sp, #8]
   181f8:	add	sp, sp, #12
   181fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18200:	strd	r4, [sp, #-20]!	; 0xffffffec
   18204:	mov	r5, r2
   18208:	strd	r6, [sp, #8]
   1820c:	subs	r6, r0, #0
   18210:	mov	r7, r1
   18214:	str	lr, [sp, #16]
   18218:	sub	sp, sp, #12
   1821c:	addeq	r6, sp, #4
   18220:	mov	r0, r6
   18224:	bl	1147c <mbrtowc@plt>
   18228:	cmp	r5, #0
   1822c:	cmnne	r0, #3
   18230:	mov	r4, r0
   18234:	bhi	18250 <__assert_fail@plt+0x6b4c>
   18238:	mov	r0, r4
   1823c:	add	sp, sp, #12
   18240:	ldrd	r4, [sp]
   18244:	ldrd	r6, [sp, #8]
   18248:	add	sp, sp, #16
   1824c:	pop	{pc}		; (ldr pc, [sp], #4)
   18250:	mov	r0, #0
   18254:	bl	2076c <__assert_fail@plt+0xf068>
   18258:	cmp	r0, #0
   1825c:	bne	18238 <__assert_fail@plt+0x6b34>
   18260:	ldrb	r3, [r7]
   18264:	mov	r4, #1
   18268:	str	r3, [r6]
   1826c:	b	18238 <__assert_fail@plt+0x6b34>
   18270:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18274:	mov	r4, r2
   18278:	strd	r6, [sp, #8]
   1827c:	mov	r6, r1
   18280:	strd	r8, [sp, #16]
   18284:	mov	r9, r3
   18288:	strd	sl, [sp, #24]
   1828c:	str	lr, [sp, #32]
   18290:	sub	sp, sp, #12
   18294:	ldr	r7, [sp, #52]	; 0x34
   18298:	str	r0, [sp]
   1829c:	bl	1153c <strlen@plt>
   182a0:	mov	fp, r0
   182a4:	ands	sl, r7, #2
   182a8:	beq	183fc <__assert_fail@plt+0x6cf8>
   182ac:	mov	r8, #0
   182b0:	mov	r5, fp
   182b4:	mov	sl, r8
   182b8:	ldr	r2, [r9]
   182bc:	cmp	r2, r5
   182c0:	movcc	fp, r2
   182c4:	movcc	r1, #0
   182c8:	bcs	183cc <__assert_fail@plt+0x6cc8>
   182cc:	ldr	r3, [sp, #48]	; 0x30
   182d0:	str	r2, [r9]
   182d4:	cmp	r3, #0
   182d8:	beq	183f0 <__assert_fail@plt+0x6cec>
   182dc:	cmp	r3, #1
   182e0:	moveq	r5, #0
   182e4:	beq	182f4 <__assert_fail@plt+0x6bf0>
   182e8:	lsr	r5, r1, #1
   182ec:	and	r1, r1, #1
   182f0:	add	r1, r1, r5
   182f4:	tst	r7, #4
   182f8:	addeq	r9, r1, fp
   182fc:	movne	r9, fp
   18300:	movne	r1, #0
   18304:	tst	r7, #8
   18308:	addeq	r9, r9, r5
   1830c:	movne	r5, #0
   18310:	cmp	r4, #0
   18314:	beq	18398 <__assert_fail@plt+0x6c94>
   18318:	sub	r4, r4, #1
   1831c:	mov	r0, r6
   18320:	add	r4, r6, r4
   18324:	cmp	r1, #0
   18328:	cmpne	r6, r4
   1832c:	bcs	1834c <__assert_fail@plt+0x6c48>
   18330:	mov	lr, #32
   18334:	rsb	r3, r1, #0
   18338:	strb	lr, [r0], #1
   1833c:	sub	r2, r6, r0
   18340:	cmp	r3, r2
   18344:	cmpne	r4, r0
   18348:	bhi	18334 <__assert_fail@plt+0x6c30>
   1834c:	sub	r2, r4, r0
   18350:	mov	ip, #0
   18354:	ldr	r1, [sp]
   18358:	cmp	r2, fp
   1835c:	movcs	r2, fp
   18360:	strb	ip, [r0]
   18364:	bl	11500 <mempcpy@plt>
   18368:	cmp	r5, #0
   1836c:	cmpne	r4, r0
   18370:	mov	r3, r0
   18374:	bls	18390 <__assert_fail@plt+0x6c8c>
   18378:	mov	r1, #32
   1837c:	strb	r1, [r3], #1
   18380:	sub	r2, r3, r5
   18384:	cmp	r0, r2
   18388:	cmpne	r4, r3
   1838c:	bhi	1837c <__assert_fail@plt+0x6c78>
   18390:	mov	r2, #0
   18394:	strb	r2, [r3]
   18398:	mov	r0, r8
   1839c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   183a0:	mov	r0, sl
   183a4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   183a8:	mov	r0, r9
   183ac:	add	sp, sp, #12
   183b0:	ldrd	r4, [sp]
   183b4:	ldrd	r6, [sp, #8]
   183b8:	ldrd	r8, [sp, #16]
   183bc:	ldrd	sl, [sp, #24]
   183c0:	add	sp, sp, #32
   183c4:	pop	{pc}		; (ldr pc, [sp], #4)
   183c8:	mov	sl, #0
   183cc:	ldr	r3, [sp, #48]	; 0x30
   183d0:	cmp	r2, r5
   183d4:	subhi	r1, r2, r5
   183d8:	movls	r2, r5
   183dc:	movhi	r2, r5
   183e0:	movls	r1, #0
   183e4:	str	r2, [r9]
   183e8:	cmp	r3, #0
   183ec:	bne	182dc <__assert_fail@plt+0x6bd8>
   183f0:	mov	r5, r1
   183f4:	ldr	r1, [sp, #48]	; 0x30
   183f8:	b	182f4 <__assert_fail@plt+0x6bf0>
   183fc:	bl	11458 <__ctype_get_mb_cur_max@plt>
   18400:	cmp	r0, #1
   18404:	bls	182ac <__assert_fail@plt+0x6ba8>
   18408:	mov	r2, sl
   1840c:	mov	r0, sl
   18410:	ldr	r1, [sp]
   18414:	bl	11668 <mbstowcs@plt>
   18418:	cmn	r0, #1
   1841c:	bne	18438 <__assert_fail@plt+0x6d34>
   18420:	tst	r7, #1
   18424:	bne	182ac <__assert_fail@plt+0x6ba8>
   18428:	mov	r8, #0
   1842c:	mvn	r9, #0
   18430:	mov	sl, r8
   18434:	b	18398 <__assert_fail@plt+0x6c94>
   18438:	add	r5, r0, #1
   1843c:	lsl	r3, r5, #2
   18440:	mov	r0, r3
   18444:	str	r3, [sp, #4]
   18448:	bl	1f110 <__assert_fail@plt+0xda0c>
   1844c:	subs	r8, r0, #0
   18450:	beq	18568 <__assert_fail@plt+0x6e64>
   18454:	mov	r2, r5
   18458:	ldr	r1, [sp]
   1845c:	bl	11668 <mbstowcs@plt>
   18460:	cmp	r0, #0
   18464:	beq	185d0 <__assert_fail@plt+0x6ecc>
   18468:	ldr	r3, [sp, #4]
   1846c:	add	r3, r8, r3
   18470:	str	sl, [r3, #-4]
   18474:	ldr	r0, [r8]
   18478:	cmp	r0, #0
   1847c:	beq	185e8 <__assert_fail@plt+0x6ee4>
   18480:	str	r4, [sp, #4]
   18484:	mov	r4, r8
   18488:	bl	11410 <iswprint@plt>
   1848c:	cmp	r0, #0
   18490:	bne	1858c <__assert_fail@plt+0x6e88>
   18494:	movw	r3, #65533	; 0xfffd
   18498:	mov	sl, #1
   1849c:	str	r3, [r4]
   184a0:	ldr	r0, [r4, #4]!
   184a4:	cmp	r0, #0
   184a8:	bne	18488 <__assert_fail@plt+0x6d84>
   184ac:	mov	r1, r5
   184b0:	mov	r0, r8
   184b4:	ldr	r4, [sp, #4]
   184b8:	bl	11620 <wcswidth@plt>
   184bc:	mov	r5, r0
   184c0:	mov	r2, #0
   184c4:	mov	r1, r8
   184c8:	mov	r0, r2
   184cc:	bl	11488 <wcstombs@plt>
   184d0:	add	r3, r0, #1
   184d4:	mov	r0, r3
   184d8:	str	r3, [sp, #4]
   184dc:	bl	1f110 <__assert_fail@plt+0xda0c>
   184e0:	subs	sl, r0, #0
   184e4:	beq	1857c <__assert_fail@plt+0x6e78>
   184e8:	ldr	r0, [r8]
   184ec:	ldr	r3, [r9]
   184f0:	cmp	r0, #0
   184f4:	beq	185dc <__assert_fail@plt+0x6ed8>
   184f8:	mov	fp, r8
   184fc:	mov	r5, #0
   18500:	str	r4, [sp]
   18504:	mov	r4, r3
   18508:	b	1851c <__assert_fail@plt+0x6e18>
   1850c:	ldr	r0, [fp, #4]!
   18510:	mov	r5, r3
   18514:	cmp	r0, #0
   18518:	beq	18540 <__assert_fail@plt+0x6e3c>
   1851c:	bl	11338 <wcwidth@plt>
   18520:	cmn	r0, #1
   18524:	bne	18534 <__assert_fail@plt+0x6e30>
   18528:	movw	r3, #65533	; 0xfffd
   1852c:	mov	r0, #1
   18530:	str	r3, [fp]
   18534:	add	r3, r0, r5
   18538:	cmp	r4, r3
   1853c:	bcs	1850c <__assert_fail@plt+0x6e08>
   18540:	ldr	r4, [sp]
   18544:	mov	r0, #0
   18548:	mov	r1, r8
   1854c:	str	sl, [sp]
   18550:	ldr	r2, [sp, #4]
   18554:	str	r0, [fp]
   18558:	mov	r0, sl
   1855c:	bl	11488 <wcstombs@plt>
   18560:	mov	fp, r0
   18564:	b	182b8 <__assert_fail@plt+0x6bb4>
   18568:	tst	r7, #1
   1856c:	movne	r5, fp
   18570:	movne	sl, r8
   18574:	bne	182b8 <__assert_fail@plt+0x6bb4>
   18578:	b	18428 <__assert_fail@plt+0x6d24>
   1857c:	tst	r7, #1
   18580:	mvneq	r9, #0
   18584:	bne	182b8 <__assert_fail@plt+0x6bb4>
   18588:	b	18398 <__assert_fail@plt+0x6c94>
   1858c:	ldr	r0, [r4, #4]!
   18590:	cmp	r0, #0
   18594:	bne	18488 <__assert_fail@plt+0x6d84>
   18598:	mov	r1, r5
   1859c:	mov	r0, r8
   185a0:	ldr	r4, [sp, #4]
   185a4:	bl	11620 <wcswidth@plt>
   185a8:	cmp	sl, #0
   185ac:	mov	r5, r0
   185b0:	bne	184c0 <__assert_fail@plt+0x6dbc>
   185b4:	ldr	r2, [r9]
   185b8:	cmp	r2, r5
   185bc:	bcs	183c8 <__assert_fail@plt+0x6cc4>
   185c0:	add	r3, fp, #1
   185c4:	mov	r0, r3
   185c8:	str	r3, [sp, #4]
   185cc:	b	184dc <__assert_fail@plt+0x6dd8>
   185d0:	mov	sl, r0
   185d4:	mov	r5, fp
   185d8:	b	182b8 <__assert_fail@plt+0x6bb4>
   185dc:	mov	r5, r0
   185e0:	mov	fp, r8
   185e4:	b	18544 <__assert_fail@plt+0x6e40>
   185e8:	mov	r1, r5
   185ec:	mov	r0, r8
   185f0:	bl	11620 <wcswidth@plt>
   185f4:	mov	r5, r0
   185f8:	b	185b4 <__assert_fail@plt+0x6eb0>
   185fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18600:	strd	r6, [sp, #8]
   18604:	mov	r6, #0
   18608:	strd	r8, [sp, #16]
   1860c:	strd	sl, [sp, #24]
   18610:	str	lr, [sp, #32]
   18614:	sub	sp, sp, #44	; 0x2c
   18618:	ldr	sl, [r1]
   1861c:	str	r1, [sp, #4]
   18620:	str	r2, [sp, #20]
   18624:	and	r2, r3, #2
   18628:	str	r0, [sp, #8]
   1862c:	str	r2, [sp, #16]
   18630:	and	r2, r3, #1
   18634:	mov	fp, sl
   18638:	str	sl, [sp, #12]
   1863c:	str	r2, [sp, #36]	; 0x24
   18640:	and	r2, r3, #4
   18644:	and	r3, r3, #8
   18648:	strd	r2, [sp, #24]
   1864c:	add	r8, fp, #1
   18650:	mov	r0, r6
   18654:	mov	r1, r8
   18658:	bl	1f14c <__assert_fail@plt+0xda48>
   1865c:	subs	r5, r0, #0
   18660:	beq	188e0 <__assert_fail@plt+0x71dc>
   18664:	ldr	r3, [sp, #4]
   18668:	ldr	r0, [sp, #8]
   1866c:	ldr	r2, [sp, #12]
   18670:	str	r2, [r3]
   18674:	bl	1153c <strlen@plt>
   18678:	ldr	r3, [sp, #16]
   1867c:	mov	r9, r0
   18680:	cmp	r3, #0
   18684:	beq	187e4 <__assert_fail@plt+0x70e0>
   18688:	ldr	r1, [sp, #8]
   1868c:	mov	r7, #0
   18690:	mov	r4, r0
   18694:	mov	r6, r7
   18698:	ldr	r2, [sp, #12]
   1869c:	cmp	r4, r2
   186a0:	movhi	r9, r2
   186a4:	movhi	r3, #0
   186a8:	bls	187cc <__assert_fail@plt+0x70c8>
   186ac:	ldr	ip, [sp, #4]
   186b0:	ldr	r0, [sp, #20]
   186b4:	str	r2, [ip]
   186b8:	cmp	r0, #0
   186bc:	beq	1880c <__assert_fail@plt+0x7108>
   186c0:	cmp	r0, #1
   186c4:	moveq	sl, #0
   186c8:	beq	186d8 <__assert_fail@plt+0x6fd4>
   186cc:	lsr	sl, r3, #1
   186d0:	and	r3, r3, #1
   186d4:	add	r3, r3, sl
   186d8:	ldr	r2, [sp, #24]
   186dc:	cmp	r2, #0
   186e0:	ldr	r2, [sp, #28]
   186e4:	addeq	r4, r3, r9
   186e8:	movne	r4, r9
   186ec:	movne	r3, #0
   186f0:	cmp	r2, #0
   186f4:	addeq	r4, r4, sl
   186f8:	movne	sl, #0
   186fc:	cmp	r8, #0
   18700:	beq	187a8 <__assert_fail@plt+0x70a4>
   18704:	add	fp, r5, fp
   18708:	mov	r0, r5
   1870c:	cmp	r3, #0
   18710:	cmpne	r5, fp
   18714:	bcs	18734 <__assert_fail@plt+0x7030>
   18718:	mov	lr, #32
   1871c:	rsb	r2, r3, #0
   18720:	strb	lr, [r0], #1
   18724:	sub	ip, r5, r0
   18728:	cmp	r2, ip
   1872c:	cmpne	fp, r0
   18730:	bhi	1871c <__assert_fail@plt+0x7018>
   18734:	sub	r2, fp, r0
   18738:	mov	r3, #0
   1873c:	cmp	r2, r9
   18740:	movcs	r2, r9
   18744:	strb	r3, [r0]
   18748:	bl	11500 <mempcpy@plt>
   1874c:	cmp	sl, #0
   18750:	cmpne	fp, r0
   18754:	mov	r3, r0
   18758:	bls	18774 <__assert_fail@plt+0x7070>
   1875c:	mov	r1, #32
   18760:	strb	r1, [r3], #1
   18764:	sub	r2, r3, sl
   18768:	cmp	r0, r2
   1876c:	cmpne	fp, r3
   18770:	bhi	18760 <__assert_fail@plt+0x705c>
   18774:	mov	r2, #0
   18778:	mov	r0, r7
   1877c:	strb	r2, [r3]
   18780:	bl	156a4 <__assert_fail@plt+0x3fa0>
   18784:	mov	r0, r6
   18788:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1878c:	cmn	r4, #1
   18790:	beq	1886c <__assert_fail@plt+0x7168>
   18794:	cmp	r8, r4
   18798:	bhi	18878 <__assert_fail@plt+0x7174>
   1879c:	mov	r6, r5
   187a0:	mov	fp, r4
   187a4:	b	1864c <__assert_fail@plt+0x6f48>
   187a8:	mov	r0, r7
   187ac:	bl	156a4 <__assert_fail@plt+0x3fa0>
   187b0:	mov	r0, r6
   187b4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   187b8:	cmn	r4, #1
   187bc:	bne	1879c <__assert_fail@plt+0x7098>
   187c0:	b	1886c <__assert_fail@plt+0x7168>
   187c4:	ldr	r1, [sp, #8]
   187c8:	mov	r6, #0
   187cc:	cmp	r4, r2
   187d0:	subcc	r3, r2, r4
   187d4:	movcs	r2, r4
   187d8:	movcc	r2, r4
   187dc:	movcs	r3, #0
   187e0:	b	186ac <__assert_fail@plt+0x6fa8>
   187e4:	bl	11458 <__ctype_get_mb_cur_max@plt>
   187e8:	cmp	r0, #1
   187ec:	bhi	18818 <__assert_fail@plt+0x7114>
   187f0:	ldr	r3, [sp, #4]
   187f4:	mov	r4, r9
   187f8:	ldr	r1, [sp, #8]
   187fc:	ldr	r6, [sp, #16]
   18800:	ldr	r2, [r3]
   18804:	mov	r7, r6
   18808:	b	1869c <__assert_fail@plt+0x6f98>
   1880c:	mov	sl, r3
   18810:	ldr	r3, [sp, #20]
   18814:	b	186d8 <__assert_fail@plt+0x6fd4>
   18818:	ldr	r7, [sp, #8]
   1881c:	ldr	r6, [sp, #16]
   18820:	mov	r1, r7
   18824:	mov	r2, r6
   18828:	mov	r0, r6
   1882c:	bl	11668 <mbstowcs@plt>
   18830:	cmn	r0, #1
   18834:	bne	18898 <__assert_fail@plt+0x7194>
   18838:	ldr	r3, [sp, #36]	; 0x24
   1883c:	cmp	r3, #0
   18840:	beq	1885c <__assert_fail@plt+0x7158>
   18844:	ldr	r3, [sp, #4]
   18848:	mov	r1, r7
   1884c:	mov	r4, r9
   18850:	mov	r7, r6
   18854:	ldr	r2, [r3]
   18858:	b	1869c <__assert_fail@plt+0x6f98>
   1885c:	mov	r0, #0
   18860:	bl	156a4 <__assert_fail@plt+0x3fa0>
   18864:	mov	r0, #0
   18868:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1886c:	mov	r0, r5
   18870:	mov	r5, #0
   18874:	bl	156a4 <__assert_fail@plt+0x3fa0>
   18878:	mov	r0, r5
   1887c:	add	sp, sp, #44	; 0x2c
   18880:	ldrd	r4, [sp]
   18884:	ldrd	r6, [sp, #8]
   18888:	ldrd	r8, [sp, #16]
   1888c:	ldrd	sl, [sp, #24]
   18890:	add	sp, sp, #32
   18894:	pop	{pc}		; (ldr pc, [sp], #4)
   18898:	add	r4, r0, #1
   1889c:	lsl	r6, r4, #2
   188a0:	mov	r0, r6
   188a4:	bl	1f110 <__assert_fail@plt+0xda0c>
   188a8:	subs	r7, r0, #0
   188ac:	beq	189e8 <__assert_fail@plt+0x72e4>
   188b0:	ldr	sl, [sp, #8]
   188b4:	mov	r2, r4
   188b8:	mov	r1, sl
   188bc:	bl	11668 <mbstowcs@plt>
   188c0:	cmp	r0, #0
   188c4:	bne	188ec <__assert_fail@plt+0x71e8>
   188c8:	ldr	r3, [sp, #4]
   188cc:	mov	r4, r9
   188d0:	mov	r1, sl
   188d4:	ldr	r6, [sp, #16]
   188d8:	ldr	r2, [r3]
   188dc:	b	1869c <__assert_fail@plt+0x6f98>
   188e0:	mov	r0, r6
   188e4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   188e8:	b	18878 <__assert_fail@plt+0x7174>
   188ec:	ldr	r3, [sp, #16]
   188f0:	add	r6, r7, r6
   188f4:	str	r3, [r6, #-4]
   188f8:	ldr	r0, [r7]
   188fc:	cmp	r0, #0
   18900:	beq	18a8c <__assert_fail@plt+0x7388>
   18904:	mov	sl, r7
   18908:	mov	r6, r3
   1890c:	bl	11410 <iswprint@plt>
   18910:	cmp	r0, #0
   18914:	bne	18a28 <__assert_fail@plt+0x7324>
   18918:	movw	r3, #65533	; 0xfffd
   1891c:	mov	r6, #1
   18920:	str	r3, [sl]
   18924:	ldr	r0, [sl, #4]!
   18928:	cmp	r0, #0
   1892c:	bne	1890c <__assert_fail@plt+0x7208>
   18930:	mov	r1, r4
   18934:	mov	r0, r7
   18938:	bl	11620 <wcswidth@plt>
   1893c:	mov	r4, r0
   18940:	mov	r2, #0
   18944:	mov	r1, r7
   18948:	mov	r0, r2
   1894c:	bl	11488 <wcstombs@plt>
   18950:	add	r3, r0, #1
   18954:	mov	r0, r3
   18958:	str	r3, [sp, #32]
   1895c:	bl	1f110 <__assert_fail@plt+0xda0c>
   18960:	subs	r6, r0, #0
   18964:	beq	18a0c <__assert_fail@plt+0x7308>
   18968:	ldr	r0, [r7]
   1896c:	ldr	r3, [sp, #4]
   18970:	cmp	r0, #0
   18974:	ldr	r9, [r3]
   18978:	beq	18a80 <__assert_fail@plt+0x737c>
   1897c:	mov	sl, r7
   18980:	mov	r4, #0
   18984:	b	18998 <__assert_fail@plt+0x7294>
   18988:	ldr	r0, [sl, #4]!
   1898c:	mov	r4, r3
   18990:	cmp	r0, #0
   18994:	beq	189bc <__assert_fail@plt+0x72b8>
   18998:	bl	11338 <wcwidth@plt>
   1899c:	cmn	r0, #1
   189a0:	bne	189b0 <__assert_fail@plt+0x72ac>
   189a4:	movw	r3, #65533	; 0xfffd
   189a8:	mov	r0, #1
   189ac:	str	r3, [sl]
   189b0:	add	r3, r4, r0
   189b4:	cmp	r9, r3
   189b8:	bcs	18988 <__assert_fail@plt+0x7284>
   189bc:	mov	r3, #0
   189c0:	mov	r1, r7
   189c4:	ldr	r2, [sp, #32]
   189c8:	mov	r0, r6
   189cc:	str	r3, [sl]
   189d0:	bl	11488 <wcstombs@plt>
   189d4:	ldr	r3, [sp, #4]
   189d8:	mov	r9, r0
   189dc:	mov	r1, r6
   189e0:	ldr	r2, [r3]
   189e4:	b	1869c <__assert_fail@plt+0x6f98>
   189e8:	ldr	r3, [sp, #36]	; 0x24
   189ec:	cmp	r3, #0
   189f0:	beq	1885c <__assert_fail@plt+0x7158>
   189f4:	ldr	r3, [sp, #4]
   189f8:	mov	r4, r9
   189fc:	ldr	r1, [sp, #8]
   18a00:	ldr	r6, [sp, #16]
   18a04:	ldr	r2, [r3]
   18a08:	b	1869c <__assert_fail@plt+0x6f98>
   18a0c:	ldr	r3, [sp, #36]	; 0x24
   18a10:	cmp	r3, #0
   18a14:	beq	18a6c <__assert_fail@plt+0x7368>
   18a18:	ldr	r3, [sp, #4]
   18a1c:	ldr	r1, [sp, #8]
   18a20:	ldr	r2, [r3]
   18a24:	b	1869c <__assert_fail@plt+0x6f98>
   18a28:	ldr	r0, [sl, #4]!
   18a2c:	cmp	r0, #0
   18a30:	bne	1890c <__assert_fail@plt+0x7208>
   18a34:	mov	r1, r4
   18a38:	mov	r0, r7
   18a3c:	bl	11620 <wcswidth@plt>
   18a40:	cmp	r6, #0
   18a44:	mov	r4, r0
   18a48:	bne	18940 <__assert_fail@plt+0x723c>
   18a4c:	ldr	r3, [sp, #4]
   18a50:	ldr	r2, [r3]
   18a54:	cmp	r2, r4
   18a58:	bcs	187c4 <__assert_fail@plt+0x70c0>
   18a5c:	add	r3, r9, #1
   18a60:	mov	r0, r3
   18a64:	str	r3, [sp, #32]
   18a68:	b	1895c <__assert_fail@plt+0x7258>
   18a6c:	mov	r0, r7
   18a70:	bl	156a4 <__assert_fail@plt+0x3fa0>
   18a74:	ldr	r0, [sp, #36]	; 0x24
   18a78:	bl	156a4 <__assert_fail@plt+0x3fa0>
   18a7c:	b	1886c <__assert_fail@plt+0x7168>
   18a80:	mov	r4, r0
   18a84:	mov	sl, r7
   18a88:	b	189bc <__assert_fail@plt+0x72b8>
   18a8c:	mov	r1, r4
   18a90:	mov	r0, r7
   18a94:	bl	11620 <wcswidth@plt>
   18a98:	mov	r4, r0
   18a9c:	b	18a4c <__assert_fail@plt+0x7348>
   18aa0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18aa4:	mov	r4, r0
   18aa8:	strd	r6, [sp, #8]
   18aac:	add	r6, r0, r1
   18ab0:	strd	r8, [sp, #16]
   18ab4:	mov	r9, r2
   18ab8:	strd	sl, [sp, #24]
   18abc:	str	lr, [sp, #32]
   18ac0:	sub	sp, sp, #20
   18ac4:	bl	11458 <__ctype_get_mb_cur_max@plt>
   18ac8:	cmp	r0, #1
   18acc:	bls	18c64 <__assert_fail@plt+0x7560>
   18ad0:	cmp	r4, r6
   18ad4:	bcs	18cd0 <__assert_fail@plt+0x75cc>
   18ad8:	and	sl, r9, #2
   18adc:	mov	r5, #0
   18ae0:	and	r9, r9, #1
   18ae4:	mvn	r8, #-2147483648	; 0x80000000
   18ae8:	b	18b10 <__assert_fail@plt+0x740c>
   18aec:	cmp	r3, #37	; 0x25
   18af0:	bcs	18b00 <__assert_fail@plt+0x73fc>
   18af4:	sub	r3, r3, #32
   18af8:	cmp	r3, #3
   18afc:	bhi	18b38 <__assert_fail@plt+0x7434>
   18b00:	add	r4, r4, #1
   18b04:	add	r5, r5, #1
   18b08:	cmp	r4, r6
   18b0c:	bcs	18bd8 <__assert_fail@plt+0x74d4>
   18b10:	ldrb	r3, [r4]
   18b14:	cmp	r3, #63	; 0x3f
   18b18:	bls	18aec <__assert_fail@plt+0x73e8>
   18b1c:	cmp	r3, #65	; 0x41
   18b20:	bcc	18b38 <__assert_fail@plt+0x7434>
   18b24:	cmp	r3, #95	; 0x5f
   18b28:	bls	18b00 <__assert_fail@plt+0x73fc>
   18b2c:	sub	r3, r3, #97	; 0x61
   18b30:	cmp	r3, #29
   18b34:	bls	18b00 <__assert_fail@plt+0x73fc>
   18b38:	mov	r2, #0
   18b3c:	mov	r3, #0
   18b40:	cmp	sl, #0
   18b44:	add	fp, sp, #4
   18b48:	strd	r2, [sp, #8]
   18b4c:	beq	18b74 <__assert_fail@plt+0x7470>
   18b50:	b	18c10 <__assert_fail@plt+0x750c>
   18b54:	cmp	r3, r0
   18b58:	add	r5, r5, r0
   18b5c:	blt	18bd4 <__assert_fail@plt+0x74d0>
   18b60:	add	r0, sp, #8
   18b64:	add	r4, r4, r7
   18b68:	bl	1138c <mbsinit@plt>
   18b6c:	cmp	r0, #0
   18b70:	bne	18b08 <__assert_fail@plt+0x7404>
   18b74:	add	r3, sp, #8
   18b78:	sub	r2, r6, r4
   18b7c:	mov	r1, r4
   18b80:	mov	r0, fp
   18b84:	bl	18200 <__assert_fail@plt+0x6afc>
   18b88:	cmn	r0, #1
   18b8c:	mov	r7, r0
   18b90:	beq	18cb0 <__assert_fail@plt+0x75ac>
   18b94:	cmn	r0, #2
   18b98:	beq	18cbc <__assert_fail@plt+0x75b8>
   18b9c:	cmp	r0, #0
   18ba0:	ldr	r0, [sp, #4]
   18ba4:	moveq	r7, #1
   18ba8:	bl	11338 <wcwidth@plt>
   18bac:	cmp	r0, #0
   18bb0:	sub	r3, r8, r5
   18bb4:	bge	18b54 <__assert_fail@plt+0x7450>
   18bb8:	ldr	r0, [sp, #4]
   18bbc:	bl	113ec <iswcntrl@plt>
   18bc0:	cmp	r0, #0
   18bc4:	bne	18b60 <__assert_fail@plt+0x745c>
   18bc8:	cmn	r5, #-2147483647	; 0x80000001
   18bcc:	add	r5, r5, #1
   18bd0:	bne	18b60 <__assert_fail@plt+0x745c>
   18bd4:	mvn	r5, #-2147483648	; 0x80000000
   18bd8:	mov	r0, r5
   18bdc:	add	sp, sp, #20
   18be0:	ldrd	r4, [sp]
   18be4:	ldrd	r6, [sp, #8]
   18be8:	ldrd	r8, [sp, #16]
   18bec:	ldrd	sl, [sp, #24]
   18bf0:	add	sp, sp, #32
   18bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   18bf8:	cmp	r3, r2
   18bfc:	add	r4, r4, r7
   18c00:	bgt	18bd4 <__assert_fail@plt+0x74d0>
   18c04:	bl	1138c <mbsinit@plt>
   18c08:	cmp	r0, #0
   18c0c:	bne	18b08 <__assert_fail@plt+0x7404>
   18c10:	add	r3, sp, #8
   18c14:	sub	r2, r6, r4
   18c18:	mov	r1, r4
   18c1c:	mov	r0, fp
   18c20:	bl	18200 <__assert_fail@plt+0x6afc>
   18c24:	cmn	r0, #1
   18c28:	mov	r7, r0
   18c2c:	beq	18cb0 <__assert_fail@plt+0x75ac>
   18c30:	cmn	r0, #2
   18c34:	beq	18cbc <__assert_fail@plt+0x75b8>
   18c38:	cmp	r0, #0
   18c3c:	ldr	r0, [sp, #4]
   18c40:	moveq	r7, #1
   18c44:	bl	11338 <wcwidth@plt>
   18c48:	subs	r3, r0, #0
   18c4c:	sub	r2, r8, r5
   18c50:	add	r0, sp, #8
   18c54:	add	r5, r5, r3
   18c58:	bge	18bf8 <__assert_fail@plt+0x74f4>
   18c5c:	mvn	r5, #0
   18c60:	b	18bd8 <__assert_fail@plt+0x74d4>
   18c64:	cmp	r4, r6
   18c68:	bcs	18cd0 <__assert_fail@plt+0x75cc>
   18c6c:	bl	11518 <__ctype_b_loc@plt>
   18c70:	ands	r5, r9, #2
   18c74:	ldr	r2, [r0]
   18c78:	bne	18cd8 <__assert_fail@plt+0x75d4>
   18c7c:	ldrb	r3, [r4], #1
   18c80:	lsl	r3, r3, #1
   18c84:	ldrh	r3, [r2, r3]
   18c88:	tst	r3, #16384	; 0x4000
   18c8c:	bne	18c98 <__assert_fail@plt+0x7594>
   18c90:	tst	r3, #2
   18c94:	bne	18ca4 <__assert_fail@plt+0x75a0>
   18c98:	cmn	r5, #-2147483647	; 0x80000001
   18c9c:	beq	18bd8 <__assert_fail@plt+0x74d4>
   18ca0:	add	r5, r5, #1
   18ca4:	cmp	r6, r4
   18ca8:	bne	18c7c <__assert_fail@plt+0x7578>
   18cac:	b	18bd8 <__assert_fail@plt+0x74d4>
   18cb0:	cmp	r9, #0
   18cb4:	beq	18b00 <__assert_fail@plt+0x73fc>
   18cb8:	b	18c5c <__assert_fail@plt+0x7558>
   18cbc:	cmp	r9, #0
   18cc0:	bne	18c5c <__assert_fail@plt+0x7558>
   18cc4:	add	r5, r5, #1
   18cc8:	mov	r4, r6
   18ccc:	b	18b08 <__assert_fail@plt+0x7404>
   18cd0:	mov	r5, #0
   18cd4:	b	18bd8 <__assert_fail@plt+0x74d4>
   18cd8:	mov	r5, #0
   18cdc:	b	18cf4 <__assert_fail@plt+0x75f0>
   18ce0:	cmn	r5, #-2147483647	; 0x80000001
   18ce4:	beq	18bd8 <__assert_fail@plt+0x74d4>
   18ce8:	cmp	r6, r4
   18cec:	add	r5, r5, #1
   18cf0:	beq	18bd8 <__assert_fail@plt+0x74d4>
   18cf4:	ldrb	r3, [r4], #1
   18cf8:	lsl	r3, r3, #1
   18cfc:	ldrh	r3, [r2, r3]
   18d00:	tst	r3, #16384	; 0x4000
   18d04:	beq	18c5c <__assert_fail@plt+0x7558>
   18d08:	b	18ce0 <__assert_fail@plt+0x75dc>
   18d0c:	strd	r4, [sp, #-16]!
   18d10:	mov	r5, r1
   18d14:	mov	r4, r0
   18d18:	str	r6, [sp, #8]
   18d1c:	str	lr, [sp, #12]
   18d20:	bl	1153c <strlen@plt>
   18d24:	mov	r1, r0
   18d28:	mov	r2, r5
   18d2c:	ldr	r6, [sp, #8]
   18d30:	mov	r0, r4
   18d34:	ldrd	r4, [sp]
   18d38:	ldr	lr, [sp, #12]
   18d3c:	add	sp, sp, #16
   18d40:	b	18aa0 <__assert_fail@plt+0x739c>
   18d44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18d48:	mov	r4, r0
   18d4c:	strd	r6, [sp, #8]
   18d50:	str	r8, [sp, #16]
   18d54:	str	lr, [sp, #20]
   18d58:	bl	1153c <strlen@plt>
   18d5c:	add	r0, r0, #1
   18d60:	mov	ip, r4
   18d64:	mov	r3, #0
   18d68:	b	18d7c <__assert_fail@plt+0x7678>
   18d6c:	cmp	r0, r2
   18d70:	strb	r1, [ip], #1
   18d74:	bls	18dec <__assert_fail@plt+0x76e8>
   18d78:	mov	r3, r2
   18d7c:	ldrb	r1, [r4, r3]
   18d80:	add	r2, r3, #1
   18d84:	cmp	r1, #92	; 0x5c
   18d88:	bne	18d6c <__assert_fail@plt+0x7668>
   18d8c:	add	lr, r3, #4
   18d90:	cmp	lr, r0
   18d94:	bcs	18d6c <__assert_fail@plt+0x7668>
   18d98:	ldrb	r5, [r4, r2]
   18d9c:	sub	r5, r5, #48	; 0x30
   18da0:	uxtb	r6, r5
   18da4:	cmp	r6, #3
   18da8:	bhi	18d6c <__assert_fail@plt+0x7668>
   18dac:	add	r3, r4, r3
   18db0:	ldrb	r6, [r3, #2]
   18db4:	sub	r6, r6, #48	; 0x30
   18db8:	uxtb	r7, r6
   18dbc:	cmp	r7, #7
   18dc0:	bhi	18d6c <__assert_fail@plt+0x7668>
   18dc4:	ldrb	r3, [r3, #3]
   18dc8:	sub	r3, r3, #48	; 0x30
   18dcc:	uxtb	r3, r3
   18dd0:	cmp	r3, #7
   18dd4:	bhi	18d6c <__assert_fail@plt+0x7668>
   18dd8:	add	r5, r6, r5, lsl #3
   18ddc:	mov	r2, lr
   18de0:	add	r5, r3, r5, lsl #3
   18de4:	strb	r5, [ip], #1
   18de8:	b	18d78 <__assert_fail@plt+0x7674>
   18dec:	ldrd	r4, [sp]
   18df0:	ldrd	r6, [sp, #8]
   18df4:	ldr	r8, [sp, #16]
   18df8:	add	sp, sp, #20
   18dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   18e00:	movw	r1, #9168	; 0x23d0
   18e04:	movt	r1, #2
   18e08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e0c:	movw	r0, #9012	; 0x2334
   18e10:	movt	r0, #2
   18e14:	strd	r6, [sp, #8]
   18e18:	strd	r8, [sp, #16]
   18e1c:	strd	sl, [sp, #24]
   18e20:	str	lr, [sp, #32]
   18e24:	sub	sp, sp, #44	; 0x2c
   18e28:	bl	1168c <fopen64@plt>
   18e2c:	subs	r8, r0, #0
   18e30:	beq	192b8 <__assert_fail@plt+0x7bb4>
   18e34:	movw	r2, #9056	; 0x2360
   18e38:	movt	r2, #2
   18e3c:	mov	r3, #0
   18e40:	movw	r9, #9036	; 0x234c
   18e44:	movt	r9, #2
   18e48:	add	sl, sp, #16
   18e4c:	str	r2, [sp, #8]
   18e50:	mov	r2, #65280	; 0xff00
   18e54:	movt	r2, #15
   18e58:	str	r2, [sp, #12]
   18e5c:	str	r3, [sp, #20]
   18e60:	str	r3, [sp, #24]
   18e64:	mov	r3, r8
   18e68:	mov	r2, #10
   18e6c:	add	r1, sp, #24
   18e70:	add	r0, sp, #20
   18e74:	bl	11314 <__getdelim@plt>
   18e78:	cmn	r0, #1
   18e7c:	beq	19044 <__assert_fail@plt+0x7940>
   18e80:	add	ip, sp, #36	; 0x24
   18e84:	add	r3, sp, #32
   18e88:	ldr	r0, [sp, #20]
   18e8c:	add	r2, sp, #28
   18e90:	mov	r1, r9
   18e94:	str	ip, [sp]
   18e98:	bl	11650 <sscanf@plt>
   18e9c:	sub	r0, r0, #2
   18ea0:	cmp	r0, #1
   18ea4:	bhi	18e64 <__assert_fail@plt+0x7760>
   18ea8:	ldr	r5, [sp, #20]
   18eac:	mov	r1, #32
   18eb0:	ldr	r3, [sp, #36]	; 0x24
   18eb4:	add	r5, r5, r3
   18eb8:	mov	r0, r5
   18ebc:	bl	11548 <strchr@plt>
   18ec0:	subs	r4, r0, #0
   18ec4:	beq	18e64 <__assert_fail@plt+0x7760>
   18ec8:	mov	r6, #0
   18ecc:	mov	r1, #32
   18ed0:	strb	r6, [r4], #1
   18ed4:	mov	r0, r4
   18ed8:	bl	11548 <strchr@plt>
   18edc:	cmp	r0, #0
   18ee0:	beq	18e64 <__assert_fail@plt+0x7760>
   18ee4:	strb	r6, [r0], #1
   18ee8:	ldr	r1, [sp, #8]
   18eec:	bl	1f72c <__assert_fail@plt+0xe028>
   18ef0:	cmp	r0, #0
   18ef4:	beq	18e64 <__assert_fail@plt+0x7760>
   18ef8:	add	r7, r0, #3
   18efc:	mov	r1, #32
   18f00:	mov	r0, r7
   18f04:	bl	11548 <strchr@plt>
   18f08:	subs	fp, r0, #0
   18f0c:	beq	18e64 <__assert_fail@plt+0x7760>
   18f10:	mov	r1, #32
   18f14:	strb	r6, [fp], #1
   18f18:	mov	r0, fp
   18f1c:	bl	11548 <strchr@plt>
   18f20:	cmp	r0, #0
   18f24:	beq	18e64 <__assert_fail@plt+0x7760>
   18f28:	strb	r6, [r0]
   18f2c:	mov	r0, fp
   18f30:	bl	18d44 <__assert_fail@plt+0x7640>
   18f34:	mov	r0, r4
   18f38:	bl	18d44 <__assert_fail@plt+0x7640>
   18f3c:	mov	r0, r5
   18f40:	bl	18d44 <__assert_fail@plt+0x7640>
   18f44:	mov	r0, r7
   18f48:	bl	18d44 <__assert_fail@plt+0x7640>
   18f4c:	mov	r0, #32
   18f50:	bl	1dc74 <__assert_fail@plt+0xc570>
   18f54:	mov	r6, r0
   18f58:	mov	r0, fp
   18f5c:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   18f60:	str	r0, [r6]
   18f64:	mov	r0, r4
   18f68:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   18f6c:	str	r0, [r6, #4]
   18f70:	mov	r0, r5
   18f74:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   18f78:	str	r0, [r6, #8]
   18f7c:	mov	r0, r7
   18f80:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   18f84:	ldr	r1, [sp, #12]
   18f88:	mov	r2, #0
   18f8c:	movt	r2, #65520	; 0xfff0
   18f90:	str	r0, [r6, #12]
   18f94:	mov	r4, r0
   18f98:	ldr	ip, [sp, #28]
   18f9c:	ldr	r5, [sp, #32]
   18fa0:	ldrb	r3, [r6, #24]
   18fa4:	and	lr, r1, ip, lsl #8
   18fa8:	bic	ip, ip, #4080	; 0xff0
   18fac:	bic	ip, ip, #15
   18fb0:	and	r1, r2, r5, lsl #12
   18fb4:	uxtb	r2, r5
   18fb8:	orr	ip, ip, r5, lsr #20
   18fbc:	orr	r2, r2, lr
   18fc0:	orr	r2, r1, r2
   18fc4:	orr	r3, r3, #4
   18fc8:	movw	r1, #9060	; 0x2364
   18fcc:	movt	r1, #2
   18fd0:	str	r2, [r6, #16]
   18fd4:	str	ip, [r6, #20]
   18fd8:	strb	r3, [r6, #24]
   18fdc:	bl	11320 <strcmp@plt>
   18fe0:	cmp	r0, #0
   18fe4:	beq	19000 <__assert_fail@plt+0x78fc>
   18fe8:	movw	r1, #9068	; 0x236c
   18fec:	movt	r1, #2
   18ff0:	mov	r0, r4
   18ff4:	bl	11320 <strcmp@plt>
   18ff8:	cmp	r0, #0
   18ffc:	bne	19094 <__assert_fail@plt+0x7990>
   19000:	mov	r0, #1
   19004:	ldrb	r3, [r6, #24]
   19008:	mov	r1, #58	; 0x3a
   1900c:	ldr	r5, [r6]
   19010:	bfi	r3, r0, #0, #1
   19014:	mov	r0, r5
   19018:	strb	r3, [r6, #24]
   1901c:	bl	11548 <strchr@plt>
   19020:	cmp	r0, #0
   19024:	beq	191b8 <__assert_fail@plt+0x7ab4>
   19028:	mov	r0, #1
   1902c:	ldrb	r3, [r6, #24]
   19030:	bfi	r3, r0, #1, #1
   19034:	strb	r3, [r6, #24]
   19038:	str	r6, [sl]
   1903c:	add	sl, r6, #28
   19040:	b	18e64 <__assert_fail@plt+0x7760>
   19044:	ldr	r0, [sp, #20]
   19048:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1904c:	ldr	r3, [r8]
   19050:	tst	r3, #32
   19054:	bne	19698 <__assert_fail@plt+0x7f94>
   19058:	mov	r0, r8
   1905c:	bl	20548 <__assert_fail@plt+0xee44>
   19060:	cmn	r0, #1
   19064:	beq	1950c <__assert_fail@plt+0x7e08>
   19068:	mov	r3, #0
   1906c:	str	r3, [sl]
   19070:	ldr	r6, [sp, #16]
   19074:	mov	r0, r6
   19078:	add	sp, sp, #44	; 0x2c
   1907c:	ldrd	r4, [sp]
   19080:	ldrd	r6, [sp, #8]
   19084:	ldrd	r8, [sp, #16]
   19088:	ldrd	sl, [sp, #24]
   1908c:	add	sp, sp, #32
   19090:	pop	{pc}		; (ldr pc, [sp], #4)
   19094:	movw	r1, #9076	; 0x2374
   19098:	movt	r1, #2
   1909c:	mov	r0, r4
   190a0:	bl	11320 <strcmp@plt>
   190a4:	cmp	r0, #0
   190a8:	beq	19000 <__assert_fail@plt+0x78fc>
   190ac:	movw	r1, #9084	; 0x237c
   190b0:	movt	r1, #2
   190b4:	mov	r0, r4
   190b8:	bl	11320 <strcmp@plt>
   190bc:	cmp	r0, #0
   190c0:	beq	19000 <__assert_fail@plt+0x78fc>
   190c4:	movw	r1, #9092	; 0x2384
   190c8:	movt	r1, #2
   190cc:	mov	r0, r4
   190d0:	bl	11320 <strcmp@plt>
   190d4:	cmp	r0, #0
   190d8:	beq	19000 <__assert_fail@plt+0x78fc>
   190dc:	movw	r1, #9100	; 0x238c
   190e0:	movt	r1, #2
   190e4:	mov	r0, r4
   190e8:	bl	11320 <strcmp@plt>
   190ec:	cmp	r0, #0
   190f0:	beq	19000 <__assert_fail@plt+0x78fc>
   190f4:	movw	r1, #9108	; 0x2394
   190f8:	movt	r1, #2
   190fc:	mov	r0, r4
   19100:	bl	11320 <strcmp@plt>
   19104:	cmp	r0, #0
   19108:	beq	19000 <__assert_fail@plt+0x78fc>
   1910c:	movw	r1, #9120	; 0x23a0
   19110:	movt	r1, #2
   19114:	mov	r0, r4
   19118:	bl	11320 <strcmp@plt>
   1911c:	cmp	r0, #0
   19120:	beq	19000 <__assert_fail@plt+0x78fc>
   19124:	movw	r1, #9128	; 0x23a8
   19128:	movt	r1, #2
   1912c:	mov	r0, r4
   19130:	bl	11320 <strcmp@plt>
   19134:	cmp	r0, #0
   19138:	beq	19000 <__assert_fail@plt+0x78fc>
   1913c:	movw	r1, #9140	; 0x23b4
   19140:	movt	r1, #2
   19144:	mov	r0, r4
   19148:	bl	11320 <strcmp@plt>
   1914c:	cmp	r0, #0
   19150:	beq	19000 <__assert_fail@plt+0x78fc>
   19154:	movw	r1, #9148	; 0x23bc
   19158:	movt	r1, #2
   1915c:	mov	r0, r4
   19160:	bl	11320 <strcmp@plt>
   19164:	cmp	r0, #0
   19168:	beq	19000 <__assert_fail@plt+0x78fc>
   1916c:	movw	r1, #9156	; 0x23c4
   19170:	movt	r1, #2
   19174:	mov	r0, r4
   19178:	bl	11320 <strcmp@plt>
   1917c:	cmp	r0, #0
   19180:	beq	19000 <__assert_fail@plt+0x78fc>
   19184:	movw	r1, #9164	; 0x23cc
   19188:	movt	r1, #2
   1918c:	mov	r0, r4
   19190:	bl	11320 <strcmp@plt>
   19194:	cmp	r0, #0
   19198:	beq	19000 <__assert_fail@plt+0x78fc>
   1919c:	movw	r1, #9172	; 0x23d4
   191a0:	movt	r1, #2
   191a4:	mov	r0, r4
   191a8:	bl	11320 <strcmp@plt>
   191ac:	clz	r0, r0
   191b0:	lsr	r0, r0, #5
   191b4:	b	19004 <__assert_fail@plt+0x7900>
   191b8:	ldrb	r3, [r5]
   191bc:	cmp	r3, #47	; 0x2f
   191c0:	beq	1970c <__assert_fail@plt+0x8008>
   191c4:	movw	r1, #9204	; 0x23f4
   191c8:	movt	r1, #2
   191cc:	mov	r0, r4
   191d0:	bl	11320 <strcmp@plt>
   191d4:	cmp	r0, #0
   191d8:	beq	19028 <__assert_fail@plt+0x7924>
   191dc:	movw	r1, #9212	; 0x23fc
   191e0:	movt	r1, #2
   191e4:	mov	r0, r4
   191e8:	bl	11320 <strcmp@plt>
   191ec:	cmp	r0, #0
   191f0:	beq	19028 <__assert_fail@plt+0x7924>
   191f4:	movw	r1, #9216	; 0x2400
   191f8:	movt	r1, #2
   191fc:	mov	r0, r4
   19200:	bl	11320 <strcmp@plt>
   19204:	cmp	r0, #0
   19208:	beq	19028 <__assert_fail@plt+0x7924>
   1920c:	movw	r1, #9224	; 0x2408
   19210:	movt	r1, #2
   19214:	mov	r0, r4
   19218:	bl	11320 <strcmp@plt>
   1921c:	cmp	r0, #0
   19220:	beq	19028 <__assert_fail@plt+0x7924>
   19224:	movw	r1, #9236	; 0x2414
   19228:	movt	r1, #2
   1922c:	mov	r0, r4
   19230:	bl	11320 <strcmp@plt>
   19234:	cmp	r0, #0
   19238:	beq	19028 <__assert_fail@plt+0x7924>
   1923c:	movw	r1, #9244	; 0x241c
   19240:	movt	r1, #2
   19244:	mov	r0, r4
   19248:	bl	11320 <strcmp@plt>
   1924c:	cmp	r0, #0
   19250:	beq	19028 <__assert_fail@plt+0x7924>
   19254:	movw	r1, #9252	; 0x2424
   19258:	movt	r1, #2
   1925c:	mov	r0, r4
   19260:	bl	11320 <strcmp@plt>
   19264:	cmp	r0, #0
   19268:	beq	19028 <__assert_fail@plt+0x7924>
   1926c:	movw	r1, #9260	; 0x242c
   19270:	movt	r1, #2
   19274:	mov	r0, r4
   19278:	bl	11320 <strcmp@plt>
   1927c:	cmp	r0, #0
   19280:	beq	19028 <__assert_fail@plt+0x7924>
   19284:	mov	r0, r4
   19288:	movw	r1, #9268	; 0x2434
   1928c:	movt	r1, #2
   19290:	bl	11320 <strcmp@plt>
   19294:	cmp	r0, #0
   19298:	beq	19028 <__assert_fail@plt+0x7924>
   1929c:	mov	r1, r5
   192a0:	movw	r0, #9276	; 0x243c
   192a4:	movt	r0, #2
   192a8:	bl	11320 <strcmp@plt>
   192ac:	clz	r0, r0
   192b0:	lsr	r0, r0, #5
   192b4:	b	1902c <__assert_fail@plt+0x7928>
   192b8:	movw	r1, #9284	; 0x2444
   192bc:	movt	r1, #2
   192c0:	movw	r0, #9288	; 0x2448
   192c4:	movt	r0, #2
   192c8:	bl	11698 <setmntent@plt>
   192cc:	subs	r6, r0, #0
   192d0:	beq	19074 <__assert_fail@plt+0x7970>
   192d4:	mov	r0, r6
   192d8:	movw	r8, #9300	; 0x2454
   192dc:	movt	r8, #2
   192e0:	movw	r7, #9060	; 0x2364
   192e4:	movt	r7, #2
   192e8:	movw	fp, #9068	; 0x236c
   192ec:	movt	fp, #2
   192f0:	add	sl, sp, #16
   192f4:	bl	114a0 <getmntent@plt>
   192f8:	subs	r5, r0, #0
   192fc:	beq	194fc <__assert_fail@plt+0x7df8>
   19300:	mov	r1, r8
   19304:	bl	11464 <hasmntopt@plt>
   19308:	mov	r9, r0
   1930c:	mov	r0, #32
   19310:	bl	1dc74 <__assert_fail@plt+0xc570>
   19314:	mov	r4, r0
   19318:	ldr	r0, [r5]
   1931c:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   19320:	str	r0, [r4]
   19324:	ldr	r0, [r5, #4]
   19328:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   1932c:	mov	r3, #0
   19330:	str	r0, [r4, #4]
   19334:	ldr	r0, [r5, #8]
   19338:	str	r3, [r4, #8]
   1933c:	bl	1e1e0 <__assert_fail@plt+0xcadc>
   19340:	ldrb	r3, [r4, #24]
   19344:	mov	r1, r7
   19348:	mov	r5, r0
   1934c:	str	r0, [r4, #12]
   19350:	orr	r3, r3, #4
   19354:	strb	r3, [r4, #24]
   19358:	bl	11320 <strcmp@plt>
   1935c:	cmp	r0, #0
   19360:	beq	194a0 <__assert_fail@plt+0x7d9c>
   19364:	mov	r1, fp
   19368:	mov	r0, r5
   1936c:	bl	11320 <strcmp@plt>
   19370:	cmp	r0, #0
   19374:	beq	194a0 <__assert_fail@plt+0x7d9c>
   19378:	movw	r1, #9076	; 0x2374
   1937c:	movt	r1, #2
   19380:	mov	r0, r5
   19384:	bl	11320 <strcmp@plt>
   19388:	cmp	r0, #0
   1938c:	beq	194a0 <__assert_fail@plt+0x7d9c>
   19390:	movw	r1, #9084	; 0x237c
   19394:	movt	r1, #2
   19398:	mov	r0, r5
   1939c:	bl	11320 <strcmp@plt>
   193a0:	cmp	r0, #0
   193a4:	beq	194a0 <__assert_fail@plt+0x7d9c>
   193a8:	movw	r1, #9092	; 0x2384
   193ac:	movt	r1, #2
   193b0:	mov	r0, r5
   193b4:	bl	11320 <strcmp@plt>
   193b8:	cmp	r0, #0
   193bc:	beq	194a0 <__assert_fail@plt+0x7d9c>
   193c0:	movw	r1, #9100	; 0x238c
   193c4:	movt	r1, #2
   193c8:	mov	r0, r5
   193cc:	bl	11320 <strcmp@plt>
   193d0:	cmp	r0, #0
   193d4:	beq	194a0 <__assert_fail@plt+0x7d9c>
   193d8:	movw	r1, #9108	; 0x2394
   193dc:	movt	r1, #2
   193e0:	mov	r0, r5
   193e4:	bl	11320 <strcmp@plt>
   193e8:	cmp	r0, #0
   193ec:	beq	194a0 <__assert_fail@plt+0x7d9c>
   193f0:	movw	r1, #9120	; 0x23a0
   193f4:	movt	r1, #2
   193f8:	mov	r0, r5
   193fc:	bl	11320 <strcmp@plt>
   19400:	cmp	r0, #0
   19404:	beq	194a0 <__assert_fail@plt+0x7d9c>
   19408:	movw	r1, #9128	; 0x23a8
   1940c:	movt	r1, #2
   19410:	mov	r0, r5
   19414:	bl	11320 <strcmp@plt>
   19418:	cmp	r0, #0
   1941c:	beq	194a0 <__assert_fail@plt+0x7d9c>
   19420:	movw	r1, #9140	; 0x23b4
   19424:	movt	r1, #2
   19428:	mov	r0, r5
   1942c:	bl	11320 <strcmp@plt>
   19430:	cmp	r0, #0
   19434:	beq	194a0 <__assert_fail@plt+0x7d9c>
   19438:	movw	r1, #9148	; 0x23bc
   1943c:	movt	r1, #2
   19440:	mov	r0, r5
   19444:	bl	11320 <strcmp@plt>
   19448:	cmp	r0, #0
   1944c:	beq	194a0 <__assert_fail@plt+0x7d9c>
   19450:	movw	r1, #9156	; 0x23c4
   19454:	movt	r1, #2
   19458:	mov	r0, r5
   1945c:	bl	11320 <strcmp@plt>
   19460:	cmp	r0, #0
   19464:	beq	194a0 <__assert_fail@plt+0x7d9c>
   19468:	movw	r1, #9164	; 0x23cc
   1946c:	movt	r1, #2
   19470:	mov	r0, r5
   19474:	bl	11320 <strcmp@plt>
   19478:	cmp	r0, #0
   1947c:	beq	194a0 <__assert_fail@plt+0x7d9c>
   19480:	movw	r1, #9172	; 0x23d4
   19484:	movt	r1, #2
   19488:	mov	r0, r5
   1948c:	bl	11320 <strcmp@plt>
   19490:	orrs	r3, r9, r0
   19494:	moveq	r2, #1
   19498:	movne	r2, #0
   1949c:	b	194a4 <__assert_fail@plt+0x7da0>
   194a0:	mov	r2, #1
   194a4:	ldrb	r3, [r4, #24]
   194a8:	mov	r1, #58	; 0x3a
   194ac:	ldr	r9, [r4]
   194b0:	bfi	r3, r2, #0, #1
   194b4:	mov	r0, r9
   194b8:	strb	r3, [r4, #24]
   194bc:	bl	11548 <strchr@plt>
   194c0:	cmp	r0, #0
   194c4:	beq	19598 <__assert_fail@plt+0x7e94>
   194c8:	mov	r0, #1
   194cc:	ldrb	r1, [r4, #24]
   194d0:	mvn	r2, #0
   194d4:	mvn	r3, #0
   194d8:	strd	r2, [r4, #16]
   194dc:	bfi	r1, r0, #1, #1
   194e0:	mov	r0, r6
   194e4:	strb	r1, [r4, #24]
   194e8:	str	r4, [sl]
   194ec:	add	sl, r4, #28
   194f0:	bl	114a0 <getmntent@plt>
   194f4:	subs	r5, r0, #0
   194f8:	bne	19300 <__assert_fail@plt+0x7bfc>
   194fc:	mov	r0, r6
   19500:	bl	115f0 <endmntent@plt>
   19504:	cmp	r0, #0
   19508:	bne	19068 <__assert_fail@plt+0x7964>
   1950c:	bl	1156c <__errno_location@plt>
   19510:	ldr	r8, [r0]
   19514:	mov	r7, r0
   19518:	mov	r3, #0
   1951c:	str	r3, [sl]
   19520:	ldr	r4, [sp, #16]
   19524:	cmp	r4, r3
   19528:	bne	19544 <__assert_fail@plt+0x7e40>
   1952c:	b	1958c <__assert_fail@plt+0x7e88>
   19530:	bl	156a4 <__assert_fail@plt+0x3fa0>
   19534:	cmp	r5, #0
   19538:	str	r5, [sp, #16]
   1953c:	beq	1958c <__assert_fail@plt+0x7e88>
   19540:	mov	r4, r5
   19544:	ldr	r0, [r4]
   19548:	ldr	r5, [r4, #28]
   1954c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   19550:	ldr	r0, [r4, #4]
   19554:	bl	156a4 <__assert_fail@plt+0x3fa0>
   19558:	ldr	r0, [r4, #8]
   1955c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   19560:	ldrb	r3, [r4, #24]
   19564:	mov	r0, r4
   19568:	tst	r3, #4
   1956c:	beq	19530 <__assert_fail@plt+0x7e2c>
   19570:	ldr	r0, [r4, #12]
   19574:	bl	156a4 <__assert_fail@plt+0x3fa0>
   19578:	mov	r0, r4
   1957c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   19580:	cmp	r5, #0
   19584:	str	r5, [sp, #16]
   19588:	bne	19540 <__assert_fail@plt+0x7e3c>
   1958c:	mov	r6, #0
   19590:	str	r8, [r7]
   19594:	b	19074 <__assert_fail@plt+0x7970>
   19598:	ldrb	r3, [r9]
   1959c:	cmp	r3, #47	; 0x2f
   195a0:	beq	196b4 <__assert_fail@plt+0x7fb0>
   195a4:	movw	r1, #9204	; 0x23f4
   195a8:	movt	r1, #2
   195ac:	mov	r0, r5
   195b0:	bl	11320 <strcmp@plt>
   195b4:	cmp	r0, #0
   195b8:	beq	194c8 <__assert_fail@plt+0x7dc4>
   195bc:	movw	r1, #9212	; 0x23fc
   195c0:	movt	r1, #2
   195c4:	mov	r0, r5
   195c8:	bl	11320 <strcmp@plt>
   195cc:	cmp	r0, #0
   195d0:	beq	194c8 <__assert_fail@plt+0x7dc4>
   195d4:	movw	r1, #9216	; 0x2400
   195d8:	movt	r1, #2
   195dc:	mov	r0, r5
   195e0:	bl	11320 <strcmp@plt>
   195e4:	cmp	r0, #0
   195e8:	beq	194c8 <__assert_fail@plt+0x7dc4>
   195ec:	movw	r1, #9224	; 0x2408
   195f0:	movt	r1, #2
   195f4:	mov	r0, r5
   195f8:	bl	11320 <strcmp@plt>
   195fc:	cmp	r0, #0
   19600:	beq	194c8 <__assert_fail@plt+0x7dc4>
   19604:	movw	r1, #9236	; 0x2414
   19608:	movt	r1, #2
   1960c:	mov	r0, r5
   19610:	bl	11320 <strcmp@plt>
   19614:	cmp	r0, #0
   19618:	beq	194c8 <__assert_fail@plt+0x7dc4>
   1961c:	movw	r1, #9244	; 0x241c
   19620:	movt	r1, #2
   19624:	mov	r0, r5
   19628:	bl	11320 <strcmp@plt>
   1962c:	cmp	r0, #0
   19630:	beq	194c8 <__assert_fail@plt+0x7dc4>
   19634:	movw	r1, #9252	; 0x2424
   19638:	movt	r1, #2
   1963c:	mov	r0, r5
   19640:	bl	11320 <strcmp@plt>
   19644:	cmp	r0, #0
   19648:	beq	194c8 <__assert_fail@plt+0x7dc4>
   1964c:	movw	r1, #9260	; 0x242c
   19650:	movt	r1, #2
   19654:	mov	r0, r5
   19658:	bl	11320 <strcmp@plt>
   1965c:	cmp	r0, #0
   19660:	beq	194c8 <__assert_fail@plt+0x7dc4>
   19664:	mov	r0, r5
   19668:	movw	r1, #9268	; 0x2434
   1966c:	movt	r1, #2
   19670:	bl	11320 <strcmp@plt>
   19674:	cmp	r0, #0
   19678:	beq	194c8 <__assert_fail@plt+0x7dc4>
   1967c:	mov	r1, r9
   19680:	movw	r0, #9276	; 0x243c
   19684:	movt	r0, #2
   19688:	bl	11320 <strcmp@plt>
   1968c:	clz	r0, r0
   19690:	lsr	r0, r0, #5
   19694:	b	194cc <__assert_fail@plt+0x7dc8>
   19698:	bl	1156c <__errno_location@plt>
   1969c:	mov	r7, r0
   196a0:	mov	r0, r8
   196a4:	ldr	r8, [r7]
   196a8:	bl	20548 <__assert_fail@plt+0xee44>
   196ac:	str	r8, [r7]
   196b0:	b	19518 <__assert_fail@plt+0x7e14>
   196b4:	ldrb	r3, [r9, #1]
   196b8:	cmp	r3, #47	; 0x2f
   196bc:	bne	195a4 <__assert_fail@plt+0x7ea0>
   196c0:	movw	r1, #9180	; 0x23dc
   196c4:	movt	r1, #2
   196c8:	mov	r0, r5
   196cc:	bl	11320 <strcmp@plt>
   196d0:	cmp	r0, #0
   196d4:	beq	194c8 <__assert_fail@plt+0x7dc4>
   196d8:	movw	r1, #9188	; 0x23e4
   196dc:	movt	r1, #2
   196e0:	mov	r0, r5
   196e4:	bl	11320 <strcmp@plt>
   196e8:	cmp	r0, #0
   196ec:	beq	194c8 <__assert_fail@plt+0x7dc4>
   196f0:	movw	r1, #9196	; 0x23ec
   196f4:	movt	r1, #2
   196f8:	mov	r0, r5
   196fc:	bl	11320 <strcmp@plt>
   19700:	cmp	r0, #0
   19704:	beq	194c8 <__assert_fail@plt+0x7dc4>
   19708:	b	195a4 <__assert_fail@plt+0x7ea0>
   1970c:	ldrb	r3, [r5, #1]
   19710:	cmp	r3, #47	; 0x2f
   19714:	bne	191c4 <__assert_fail@plt+0x7ac0>
   19718:	movw	r1, #9180	; 0x23dc
   1971c:	movt	r1, #2
   19720:	mov	r0, r4
   19724:	bl	11320 <strcmp@plt>
   19728:	cmp	r0, #0
   1972c:	beq	19028 <__assert_fail@plt+0x7924>
   19730:	movw	r1, #9188	; 0x23e4
   19734:	movt	r1, #2
   19738:	mov	r0, r4
   1973c:	bl	11320 <strcmp@plt>
   19740:	cmp	r0, #0
   19744:	beq	19028 <__assert_fail@plt+0x7924>
   19748:	movw	r1, #9196	; 0x23ec
   1974c:	movt	r1, #2
   19750:	mov	r0, r4
   19754:	bl	11320 <strcmp@plt>
   19758:	cmp	r0, #0
   1975c:	beq	19028 <__assert_fail@plt+0x7924>
   19760:	b	191c4 <__assert_fail@plt+0x7ac0>
   19764:	str	r4, [sp, #-8]!
   19768:	mov	r4, r0
   1976c:	ldr	r0, [r0]
   19770:	str	lr, [sp, #4]
   19774:	bl	156a4 <__assert_fail@plt+0x3fa0>
   19778:	ldr	r0, [r4, #4]
   1977c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   19780:	ldr	r0, [r4, #8]
   19784:	bl	156a4 <__assert_fail@plt+0x3fa0>
   19788:	ldrb	r3, [r4, #24]
   1978c:	tst	r3, #4
   19790:	bne	197a8 <__assert_fail@plt+0x80a4>
   19794:	mov	r0, r4
   19798:	ldr	r4, [sp]
   1979c:	ldr	lr, [sp, #4]
   197a0:	add	sp, sp, #8
   197a4:	b	156a4 <__assert_fail@plt+0x3fa0>
   197a8:	ldr	r0, [r4, #12]
   197ac:	bl	156a4 <__assert_fail@plt+0x3fa0>
   197b0:	b	19794 <__assert_fail@plt+0x8090>
   197b4:	strd	r4, [sp, #-16]!
   197b8:	subs	r4, r0, #0
   197bc:	str	r6, [sp, #8]
   197c0:	str	lr, [sp, #12]
   197c4:	beq	1985c <__assert_fail@plt+0x8158>
   197c8:	mov	r1, #47	; 0x2f
   197cc:	bl	1162c <strrchr@plt>
   197d0:	subs	r5, r0, #0
   197d4:	beq	19834 <__assert_fail@plt+0x8130>
   197d8:	add	r6, r5, #1
   197dc:	sub	r3, r6, r4
   197e0:	cmp	r3, #6
   197e4:	ble	19834 <__assert_fail@plt+0x8130>
   197e8:	movw	r1, #9364	; 0x2494
   197ec:	movt	r1, #2
   197f0:	mov	r2, #7
   197f4:	sub	r0, r5, #6
   197f8:	bl	116d4 <strncmp@plt>
   197fc:	cmp	r0, #0
   19800:	bne	19834 <__assert_fail@plt+0x8130>
   19804:	movw	r1, #9372	; 0x249c
   19808:	movt	r1, #2
   1980c:	mov	r2, #3
   19810:	mov	r0, r6
   19814:	bl	116d4 <strncmp@plt>
   19818:	cmp	r0, #0
   1981c:	movne	r4, r6
   19820:	bne	19834 <__assert_fail@plt+0x8130>
   19824:	add	r4, r5, #4
   19828:	movw	r3, #13088	; 0x3320
   1982c:	movt	r3, #3
   19830:	str	r4, [r3]
   19834:	movw	r2, #13248	; 0x33c0
   19838:	movt	r2, #3
   1983c:	ldr	r6, [sp, #8]
   19840:	movw	r3, #13092	; 0x3324
   19844:	movt	r3, #3
   19848:	str	r4, [r2]
   1984c:	str	r4, [r3]
   19850:	ldrd	r4, [sp]
   19854:	add	sp, sp, #12
   19858:	pop	{pc}		; (ldr pc, [sp], #4)
   1985c:	movw	r3, #13104	; 0x3330
   19860:	movt	r3, #3
   19864:	movw	r0, #9308	; 0x245c
   19868:	movt	r0, #2
   1986c:	ldr	r3, [r3]
   19870:	mov	r2, #55	; 0x37
   19874:	mov	r1, #1
   19878:	bl	11440 <fwrite@plt>
   1987c:	bl	116e0 <abort@plt>
   19880:	mov	r2, #5
   19884:	strd	r4, [sp, #-16]!
   19888:	mov	r5, r0
   1988c:	str	r6, [sp, #8]
   19890:	mov	r6, r1
   19894:	mov	r1, r0
   19898:	mov	r0, #0
   1989c:	str	lr, [sp, #12]
   198a0:	bl	113bc <dcgettext@plt>
   198a4:	cmp	r5, r0
   198a8:	mov	r4, r0
   198ac:	beq	198c4 <__assert_fail@plt+0x81c0>
   198b0:	mov	r0, r4
   198b4:	ldrd	r4, [sp]
   198b8:	ldr	r6, [sp, #8]
   198bc:	add	sp, sp, #12
   198c0:	pop	{pc}		; (ldr pc, [sp], #4)
   198c4:	bl	207f8 <__assert_fail@plt+0xf0f4>
   198c8:	ldrb	r3, [r0]
   198cc:	bic	r3, r3, #32
   198d0:	cmp	r3, #85	; 0x55
   198d4:	bne	1993c <__assert_fail@plt+0x8238>
   198d8:	ldrb	r3, [r0, #1]
   198dc:	bic	r3, r3, #32
   198e0:	cmp	r3, #84	; 0x54
   198e4:	bne	199bc <__assert_fail@plt+0x82b8>
   198e8:	ldrb	r3, [r0, #2]
   198ec:	bic	r3, r3, #32
   198f0:	cmp	r3, #70	; 0x46
   198f4:	bne	199bc <__assert_fail@plt+0x82b8>
   198f8:	ldrb	r3, [r0, #3]
   198fc:	cmp	r3, #45	; 0x2d
   19900:	bne	199bc <__assert_fail@plt+0x82b8>
   19904:	ldrb	r3, [r0, #4]
   19908:	cmp	r3, #56	; 0x38
   1990c:	bne	199bc <__assert_fail@plt+0x82b8>
   19910:	ldrb	r3, [r0, #5]
   19914:	cmp	r3, #0
   19918:	bne	199bc <__assert_fail@plt+0x82b8>
   1991c:	ldrb	r2, [r4]
   19920:	movw	r3, #9460	; 0x24f4
   19924:	movt	r3, #2
   19928:	movw	r4, #9472	; 0x2500
   1992c:	movt	r4, #2
   19930:	cmp	r2, #96	; 0x60
   19934:	movne	r4, r3
   19938:	b	198b0 <__assert_fail@plt+0x81ac>
   1993c:	cmp	r3, #71	; 0x47
   19940:	bne	199bc <__assert_fail@plt+0x82b8>
   19944:	ldrb	r3, [r0, #1]
   19948:	bic	r3, r3, #32
   1994c:	cmp	r3, #66	; 0x42
   19950:	bne	199bc <__assert_fail@plt+0x82b8>
   19954:	ldrb	r3, [r0, #2]
   19958:	cmp	r3, #49	; 0x31
   1995c:	bne	199bc <__assert_fail@plt+0x82b8>
   19960:	ldrb	r3, [r0, #3]
   19964:	cmp	r3, #56	; 0x38
   19968:	bne	199bc <__assert_fail@plt+0x82b8>
   1996c:	ldrb	r3, [r0, #4]
   19970:	cmp	r3, #48	; 0x30
   19974:	bne	199bc <__assert_fail@plt+0x82b8>
   19978:	ldrb	r3, [r0, #5]
   1997c:	cmp	r3, #51	; 0x33
   19980:	bne	199bc <__assert_fail@plt+0x82b8>
   19984:	ldrb	r3, [r0, #6]
   19988:	cmp	r3, #48	; 0x30
   1998c:	bne	199bc <__assert_fail@plt+0x82b8>
   19990:	ldrb	r3, [r0, #7]
   19994:	cmp	r3, #0
   19998:	bne	199bc <__assert_fail@plt+0x82b8>
   1999c:	ldrb	r2, [r4]
   199a0:	movw	r3, #9464	; 0x24f8
   199a4:	movt	r3, #2
   199a8:	movw	r4, #9468	; 0x24fc
   199ac:	movt	r4, #2
   199b0:	cmp	r2, #96	; 0x60
   199b4:	movne	r4, r3
   199b8:	b	198b0 <__assert_fail@plt+0x81ac>
   199bc:	movw	r3, #9476	; 0x2504
   199c0:	movt	r3, #2
   199c4:	cmp	r6, #9
   199c8:	movw	r4, #4884	; 0x1314
   199cc:	movt	r4, #2
   199d0:	movne	r4, r3
   199d4:	b	198b0 <__assert_fail@plt+0x81ac>
   199d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   199dc:	strd	r6, [sp, #8]
   199e0:	strd	r8, [sp, #16]
   199e4:	mov	r8, r3
   199e8:	strd	sl, [sp, #24]
   199ec:	mov	fp, r0
   199f0:	mov	sl, r1
   199f4:	str	lr, [sp, #32]
   199f8:	sub	sp, sp, #140	; 0x8c
   199fc:	ldr	r3, [sp, #180]	; 0xb4
   19a00:	str	r2, [sp, #28]
   19a04:	and	r4, r3, #2
   19a08:	ubfx	r3, r3, #1, #1
   19a0c:	str	r3, [sp, #44]	; 0x2c
   19a10:	bl	11458 <__ctype_get_mb_cur_max@plt>
   19a14:	ldr	r3, [sp, #176]	; 0xb0
   19a18:	str	r0, [sp, #76]	; 0x4c
   19a1c:	cmp	r3, #10
   19a20:	ldrls	pc, [pc, r3, lsl #2]
   19a24:	b	1b3c0 <__assert_fail@plt+0x9cbc>
   19a28:	andeq	r9, r1, r8, lsr #29
   19a2c:	andeq	r9, r1, r4, asr #31
   19a30:	andeq	sl, r1, r0, asr #10
   19a34:	andeq	sl, r1, r0, lsr r0
   19a38:			; <UNDEFINED> instruction: 0x00019db0
   19a3c:	andeq	r9, r1, ip, lsr #28
   19a40:	andeq	r9, r1, r4, lsl #30
   19a44:	andeq	r9, r1, ip, ror #30
   19a48:	andeq	r9, r1, r4, asr sl
   19a4c:	andeq	r9, r1, r4, asr sl
   19a50:	andeq	r9, r1, r4, asr sl
   19a54:	ldr	r3, [sp, #176]	; 0xb0
   19a58:	cmp	r3, #10
   19a5c:	beq	19a88 <__assert_fail@plt+0x8384>
   19a60:	mov	r1, r3
   19a64:	movw	r0, #9480	; 0x2508
   19a68:	movt	r0, #2
   19a6c:	bl	19880 <__assert_fail@plt+0x817c>
   19a70:	str	r0, [sp, #188]	; 0xbc
   19a74:	movw	r0, #9476	; 0x2504
   19a78:	movt	r0, #2
   19a7c:	ldr	r1, [sp, #176]	; 0xb0
   19a80:	bl	19880 <__assert_fail@plt+0x817c>
   19a84:	str	r0, [sp, #192]	; 0xc0
   19a88:	cmp	r4, #0
   19a8c:	movne	r4, #0
   19a90:	beq	1b14c <__assert_fail@plt+0x9a48>
   19a94:	mov	r5, #0
   19a98:	ldr	r0, [sp, #192]	; 0xc0
   19a9c:	mov	r9, r5
   19aa0:	str	r5, [sp, #64]	; 0x40
   19aa4:	bl	1153c <strlen@plt>
   19aa8:	mov	r3, #1
   19aac:	ldr	r2, [sp, #44]	; 0x2c
   19ab0:	cmp	r0, r5
   19ab4:	moveq	r2, r5
   19ab8:	str	r3, [sp, #32]
   19abc:	str	r3, [sp, #48]	; 0x30
   19ac0:	str	r5, [sp, #52]	; 0x34
   19ac4:	str	r3, [sp, #60]	; 0x3c
   19ac8:	ldr	r3, [sp, #180]	; 0xb4
   19acc:	str	r0, [sp, #56]	; 0x38
   19ad0:	str	r5, [sp, #68]	; 0x44
   19ad4:	str	r5, [sp, #80]	; 0x50
   19ad8:	str	r5, [sp, #84]	; 0x54
   19adc:	and	r3, r3, #1
   19ae0:	str	r2, [sp, #88]	; 0x58
   19ae4:	str	r3, [sp, #92]	; 0x5c
   19ae8:	ldr	r3, [sp, #180]	; 0xb4
   19aec:	and	r3, r3, #4
   19af0:	str	r3, [sp, #96]	; 0x60
   19af4:	ldr	r3, [sp, #192]	; 0xc0
   19af8:	str	r3, [sp, #72]	; 0x48
   19afc:	mov	r3, fp
   19b00:	mov	r7, #0
   19b04:	mov	fp, r9
   19b08:	mov	r9, r3
   19b0c:	cmn	r8, #1
   19b10:	beq	1a114 <__assert_fail@plt+0x8a10>
   19b14:	subs	r6, r8, r7
   19b18:	movne	r6, #1
   19b1c:	cmp	r6, #0
   19b20:	beq	1a12c <__assert_fail@plt+0x8a28>
   19b24:	ldr	r0, [sp, #28]
   19b28:	ldr	r3, [sp, #48]	; 0x30
   19b2c:	cmp	r3, #0
   19b30:	add	r3, r0, r7
   19b34:	str	r3, [sp, #36]	; 0x24
   19b38:	beq	1a5b8 <__assert_fail@plt+0x8eb4>
   19b3c:	ldr	r2, [sp, #56]	; 0x38
   19b40:	cmp	r2, #0
   19b44:	beq	1aab8 <__assert_fail@plt+0x93b4>
   19b48:	cmp	r2, #1
   19b4c:	mov	r3, r2
   19b50:	movls	r3, #0
   19b54:	movhi	r3, #1
   19b58:	cmn	r8, #1
   19b5c:	add	r5, r7, r2
   19b60:	movne	r3, #0
   19b64:	cmp	r3, #0
   19b68:	beq	19b74 <__assert_fail@plt+0x8470>
   19b6c:	bl	1153c <strlen@plt>
   19b70:	mov	r8, r0
   19b74:	cmp	r5, r8
   19b78:	bhi	1aab8 <__assert_fail@plt+0x93b4>
   19b7c:	ldr	r0, [sp, #36]	; 0x24
   19b80:	ldr	r2, [sp, #56]	; 0x38
   19b84:	ldr	r1, [sp, #72]	; 0x48
   19b88:	bl	11398 <memcmp@plt>
   19b8c:	cmp	r0, #0
   19b90:	bne	1aab8 <__assert_fail@plt+0x93b4>
   19b94:	ldr	r3, [sp, #44]	; 0x2c
   19b98:	cmp	r3, #0
   19b9c:	bne	1b264 <__assert_fail@plt+0x9b60>
   19ba0:	ldr	r3, [sp, #36]	; 0x24
   19ba4:	ldrb	r5, [r3]
   19ba8:	cmp	r5, #126	; 0x7e
   19bac:	ldrls	pc, [pc, r5, lsl #2]
   19bb0:	b	1b04c <__assert_fail@plt+0x9948>
   19bb4:	andeq	sl, r1, r8, lsl #5
   19bb8:	andeq	fp, r1, ip, asr #32
   19bbc:	andeq	fp, r1, ip, asr #32
   19bc0:	andeq	fp, r1, ip, asr #32
   19bc4:	andeq	fp, r1, ip, asr #32
   19bc8:	andeq	fp, r1, ip, asr #32
   19bcc:	andeq	fp, r1, ip, asr #32
   19bd0:	andeq	sl, r1, r0, ror #3
   19bd4:	ldrdeq	sl, [r1], -r8
   19bd8:	andeq	sl, r1, r8, ror #3
   19bdc:	andeq	sl, r1, ip, ror #6
   19be0:	andeq	sl, r1, ip, asr r3
   19be4:	andeq	sl, r1, r4, lsl #1
   19be8:	andeq	sl, r1, r8, lsr r3
   19bec:	andeq	fp, r1, ip, asr #32
   19bf0:	andeq	fp, r1, ip, asr #32
   19bf4:	andeq	fp, r1, ip, asr #32
   19bf8:	andeq	fp, r1, ip, asr #32
   19bfc:	andeq	fp, r1, ip, asr #32
   19c00:	andeq	fp, r1, ip, asr #32
   19c04:	andeq	fp, r1, ip, asr #32
   19c08:	andeq	fp, r1, ip, asr #32
   19c0c:	andeq	fp, r1, ip, asr #32
   19c10:	andeq	fp, r1, ip, asr #32
   19c14:	andeq	fp, r1, ip, asr #32
   19c18:	andeq	fp, r1, ip, asr #32
   19c1c:	andeq	fp, r1, ip, asr #32
   19c20:	andeq	fp, r1, ip, asr #32
   19c24:	andeq	fp, r1, ip, asr #32
   19c28:	andeq	fp, r1, ip, asr #32
   19c2c:	andeq	fp, r1, ip, asr #32
   19c30:	andeq	fp, r1, ip, asr #32
   19c34:	andeq	sl, r1, r4, ror #7
   19c38:	ldrdeq	sl, [r1], -r8
   19c3c:	ldrdeq	sl, [r1], -r8
   19c40:	andeq	sl, r1, ip, asr #7
   19c44:	ldrdeq	sl, [r1], -r8
   19c48:			; <UNDEFINED> instruction: 0x0001a4b0
   19c4c:	ldrdeq	sl, [r1], -r8
   19c50:	andeq	sl, r1, r0, lsr #10
   19c54:	ldrdeq	sl, [r1], -r8
   19c58:	ldrdeq	sl, [r1], -r8
   19c5c:	ldrdeq	sl, [r1], -r8
   19c60:			; <UNDEFINED> instruction: 0x0001a4b0
   19c64:			; <UNDEFINED> instruction: 0x0001a4b0
   19c68:			; <UNDEFINED> instruction: 0x0001a4b0
   19c6c:			; <UNDEFINED> instruction: 0x0001a4b0
   19c70:			; <UNDEFINED> instruction: 0x0001a4b0
   19c74:			; <UNDEFINED> instruction: 0x0001a4b0
   19c78:			; <UNDEFINED> instruction: 0x0001a4b0
   19c7c:			; <UNDEFINED> instruction: 0x0001a4b0
   19c80:			; <UNDEFINED> instruction: 0x0001a4b0
   19c84:			; <UNDEFINED> instruction: 0x0001a4b0
   19c88:			; <UNDEFINED> instruction: 0x0001a4b0
   19c8c:			; <UNDEFINED> instruction: 0x0001a4b0
   19c90:			; <UNDEFINED> instruction: 0x0001a4b0
   19c94:			; <UNDEFINED> instruction: 0x0001a4b0
   19c98:			; <UNDEFINED> instruction: 0x0001a4b0
   19c9c:			; <UNDEFINED> instruction: 0x0001a4b0
   19ca0:	ldrdeq	sl, [r1], -r8
   19ca4:	ldrdeq	sl, [r1], -r8
   19ca8:	ldrdeq	sl, [r1], -r8
   19cac:	ldrdeq	sl, [r1], -r8
   19cb0:	ldrdeq	sl, [r1], -r0
   19cb4:	andeq	fp, r1, ip, asr #32
   19cb8:			; <UNDEFINED> instruction: 0x0001a4b0
   19cbc:			; <UNDEFINED> instruction: 0x0001a4b0
   19cc0:			; <UNDEFINED> instruction: 0x0001a4b0
   19cc4:			; <UNDEFINED> instruction: 0x0001a4b0
   19cc8:			; <UNDEFINED> instruction: 0x0001a4b0
   19ccc:			; <UNDEFINED> instruction: 0x0001a4b0
   19cd0:			; <UNDEFINED> instruction: 0x0001a4b0
   19cd4:			; <UNDEFINED> instruction: 0x0001a4b0
   19cd8:			; <UNDEFINED> instruction: 0x0001a4b0
   19cdc:			; <UNDEFINED> instruction: 0x0001a4b0
   19ce0:			; <UNDEFINED> instruction: 0x0001a4b0
   19ce4:			; <UNDEFINED> instruction: 0x0001a4b0
   19ce8:			; <UNDEFINED> instruction: 0x0001a4b0
   19cec:			; <UNDEFINED> instruction: 0x0001a4b0
   19cf0:			; <UNDEFINED> instruction: 0x0001a4b0
   19cf4:			; <UNDEFINED> instruction: 0x0001a4b0
   19cf8:			; <UNDEFINED> instruction: 0x0001a4b0
   19cfc:			; <UNDEFINED> instruction: 0x0001a4b0
   19d00:			; <UNDEFINED> instruction: 0x0001a4b0
   19d04:			; <UNDEFINED> instruction: 0x0001a4b0
   19d08:			; <UNDEFINED> instruction: 0x0001a4b0
   19d0c:			; <UNDEFINED> instruction: 0x0001a4b0
   19d10:			; <UNDEFINED> instruction: 0x0001a4b0
   19d14:			; <UNDEFINED> instruction: 0x0001a4b0
   19d18:			; <UNDEFINED> instruction: 0x0001a4b0
   19d1c:			; <UNDEFINED> instruction: 0x0001a4b0
   19d20:	ldrdeq	sl, [r1], -r8
   19d24:	andeq	sl, r1, r4, ror r4
   19d28:			; <UNDEFINED> instruction: 0x0001a4b0
   19d2c:	ldrdeq	sl, [r1], -r8
   19d30:			; <UNDEFINED> instruction: 0x0001a4b0
   19d34:	ldrdeq	sl, [r1], -r8
   19d38:			; <UNDEFINED> instruction: 0x0001a4b0
   19d3c:			; <UNDEFINED> instruction: 0x0001a4b0
   19d40:			; <UNDEFINED> instruction: 0x0001a4b0
   19d44:			; <UNDEFINED> instruction: 0x0001a4b0
   19d48:			; <UNDEFINED> instruction: 0x0001a4b0
   19d4c:			; <UNDEFINED> instruction: 0x0001a4b0
   19d50:			; <UNDEFINED> instruction: 0x0001a4b0
   19d54:			; <UNDEFINED> instruction: 0x0001a4b0
   19d58:			; <UNDEFINED> instruction: 0x0001a4b0
   19d5c:			; <UNDEFINED> instruction: 0x0001a4b0
   19d60:			; <UNDEFINED> instruction: 0x0001a4b0
   19d64:			; <UNDEFINED> instruction: 0x0001a4b0
   19d68:			; <UNDEFINED> instruction: 0x0001a4b0
   19d6c:			; <UNDEFINED> instruction: 0x0001a4b0
   19d70:			; <UNDEFINED> instruction: 0x0001a4b0
   19d74:			; <UNDEFINED> instruction: 0x0001a4b0
   19d78:			; <UNDEFINED> instruction: 0x0001a4b0
   19d7c:			; <UNDEFINED> instruction: 0x0001a4b0
   19d80:			; <UNDEFINED> instruction: 0x0001a4b0
   19d84:			; <UNDEFINED> instruction: 0x0001a4b0
   19d88:			; <UNDEFINED> instruction: 0x0001a4b0
   19d8c:			; <UNDEFINED> instruction: 0x0001a4b0
   19d90:			; <UNDEFINED> instruction: 0x0001a4b0
   19d94:			; <UNDEFINED> instruction: 0x0001a4b0
   19d98:			; <UNDEFINED> instruction: 0x0001a4b0
   19d9c:			; <UNDEFINED> instruction: 0x0001a4b0
   19da0:	andeq	sl, r1, r0, lsl #7
   19da4:	ldrdeq	sl, [r1], -r8
   19da8:	andeq	sl, r1, r0, lsl #7
   19dac:	andeq	sl, r1, ip, asr #7
   19db0:	ldr	r3, [sp, #180]	; 0xb4
   19db4:	cmp	r4, #0
   19db8:	and	r3, r3, #1
   19dbc:	str	r3, [sp, #92]	; 0x5c
   19dc0:	ldr	r3, [sp, #180]	; 0xb4
   19dc4:	and	r3, r3, #4
   19dc8:	str	r3, [sp, #96]	; 0x60
   19dcc:	moveq	r3, #1
   19dd0:	streq	r3, [sp, #60]	; 0x3c
   19dd4:	beq	1a564 <__assert_fail@plt+0x8e60>
   19dd8:	mov	r3, #0
   19ddc:	mov	r2, #1
   19de0:	mov	r4, r3
   19de4:	mov	r9, r3
   19de8:	str	r2, [sp, #32]
   19dec:	str	r2, [sp, #44]	; 0x2c
   19df0:	str	r3, [sp, #48]	; 0x30
   19df4:	str	r2, [sp, #52]	; 0x34
   19df8:	str	r2, [sp, #56]	; 0x38
   19dfc:	str	r3, [sp, #60]	; 0x3c
   19e00:	str	r2, [sp, #64]	; 0x40
   19e04:	str	r2, [sp, #68]	; 0x44
   19e08:	str	r3, [sp, #80]	; 0x50
   19e0c:	str	r3, [sp, #84]	; 0x54
   19e10:	str	r3, [sp, #88]	; 0x58
   19e14:	movw	r3, #9476	; 0x2504
   19e18:	movt	r3, #2
   19e1c:	str	r3, [sp, #72]	; 0x48
   19e20:	mov	r3, #2
   19e24:	str	r3, [sp, #176]	; 0xb0
   19e28:	b	19afc <__assert_fail@plt+0x83f8>
   19e2c:	ldr	r3, [sp, #180]	; 0xb4
   19e30:	cmp	r4, #0
   19e34:	and	r3, r3, #1
   19e38:	str	r3, [sp, #92]	; 0x5c
   19e3c:	ldr	r3, [sp, #180]	; 0xb4
   19e40:	and	r3, r3, #4
   19e44:	str	r3, [sp, #96]	; 0x60
   19e48:	bne	1b21c <__assert_fail@plt+0x9b18>
   19e4c:	cmp	sl, #0
   19e50:	beq	1afc8 <__assert_fail@plt+0x98c4>
   19e54:	mov	r3, #34	; 0x22
   19e58:	mov	r2, r4
   19e5c:	mov	r1, #1
   19e60:	mov	r9, r2
   19e64:	strb	r3, [fp]
   19e68:	movw	r3, #4884	; 0x1314
   19e6c:	movt	r3, #2
   19e70:	mov	r4, r1
   19e74:	str	r1, [sp, #32]
   19e78:	str	r2, [sp, #44]	; 0x2c
   19e7c:	str	r1, [sp, #48]	; 0x30
   19e80:	str	r2, [sp, #52]	; 0x34
   19e84:	str	r1, [sp, #56]	; 0x38
   19e88:	str	r1, [sp, #60]	; 0x3c
   19e8c:	str	r2, [sp, #64]	; 0x40
   19e90:	str	r2, [sp, #68]	; 0x44
   19e94:	str	r3, [sp, #72]	; 0x48
   19e98:	str	r2, [sp, #80]	; 0x50
   19e9c:	str	r2, [sp, #84]	; 0x54
   19ea0:	str	r2, [sp, #88]	; 0x58
   19ea4:	b	19afc <__assert_fail@plt+0x83f8>
   19ea8:	mov	r3, #0
   19eac:	mov	r2, #1
   19eb0:	mov	r9, r3
   19eb4:	str	r2, [sp, #32]
   19eb8:	str	r3, [sp, #44]	; 0x2c
   19ebc:	str	r3, [sp, #48]	; 0x30
   19ec0:	str	r3, [sp, #52]	; 0x34
   19ec4:	str	r3, [sp, #60]	; 0x3c
   19ec8:	strd	r2, [sp, #64]	; 0x40
   19ecc:	str	r3, [sp, #72]	; 0x48
   19ed0:	str	r3, [sp, #80]	; 0x50
   19ed4:	str	r3, [sp, #88]	; 0x58
   19ed8:	ldr	r3, [sp, #180]	; 0xb4
   19edc:	and	r3, r3, r2
   19ee0:	str	r3, [sp, #92]	; 0x5c
   19ee4:	ldr	r3, [sp, #180]	; 0xb4
   19ee8:	and	r3, r3, #4
   19eec:	str	r3, [sp, #96]	; 0x60
   19ef0:	ldr	r3, [sp, #176]	; 0xb0
   19ef4:	mov	r4, r3
   19ef8:	str	r3, [sp, #56]	; 0x38
   19efc:	str	r3, [sp, #84]	; 0x54
   19f00:	b	19afc <__assert_fail@plt+0x83f8>
   19f04:	mov	r3, #1
   19f08:	mov	r4, #0
   19f0c:	mov	r9, r4
   19f10:	str	r3, [sp, #32]
   19f14:	str	r3, [sp, #44]	; 0x2c
   19f18:	str	r3, [sp, #48]	; 0x30
   19f1c:	str	r4, [sp, #52]	; 0x34
   19f20:	str	r3, [sp, #56]	; 0x38
   19f24:	str	r3, [sp, #60]	; 0x3c
   19f28:	str	r3, [sp, #88]	; 0x58
   19f2c:	movw	r3, #4884	; 0x1314
   19f30:	movt	r3, #2
   19f34:	str	r4, [sp, #64]	; 0x40
   19f38:	str	r4, [sp, #68]	; 0x44
   19f3c:	str	r3, [sp, #72]	; 0x48
   19f40:	ldr	r3, [sp, #180]	; 0xb4
   19f44:	str	r4, [sp, #80]	; 0x50
   19f48:	str	r4, [sp, #84]	; 0x54
   19f4c:	and	r3, r3, #1
   19f50:	str	r3, [sp, #92]	; 0x5c
   19f54:	ldr	r3, [sp, #180]	; 0xb4
   19f58:	and	r3, r3, #4
   19f5c:	str	r3, [sp, #96]	; 0x60
   19f60:	mov	r3, #5
   19f64:	str	r3, [sp, #176]	; 0xb0
   19f68:	b	19afc <__assert_fail@plt+0x83f8>
   19f6c:	mov	r3, #1
   19f70:	mov	r4, #0
   19f74:	mov	r9, r4
   19f78:	str	r3, [sp, #32]
   19f7c:	str	r4, [sp, #44]	; 0x2c
   19f80:	str	r3, [sp, #48]	; 0x30
   19f84:	str	r3, [sp, #60]	; 0x3c
   19f88:	ldr	r3, [sp, #180]	; 0xb4
   19f8c:	str	r4, [sp, #52]	; 0x34
   19f90:	str	r4, [sp, #56]	; 0x38
   19f94:	str	r4, [sp, #64]	; 0x40
   19f98:	str	r4, [sp, #68]	; 0x44
   19f9c:	and	r3, r3, #1
   19fa0:	str	r4, [sp, #72]	; 0x48
   19fa4:	str	r4, [sp, #80]	; 0x50
   19fa8:	str	r4, [sp, #84]	; 0x54
   19fac:	str	r3, [sp, #92]	; 0x5c
   19fb0:	ldr	r3, [sp, #180]	; 0xb4
   19fb4:	str	r4, [sp, #88]	; 0x58
   19fb8:	and	r3, r3, #4
   19fbc:	str	r3, [sp, #96]	; 0x60
   19fc0:	b	19afc <__assert_fail@plt+0x83f8>
   19fc4:	mov	r3, #0
   19fc8:	mov	r2, #1
   19fcc:	ldr	r1, [sp, #176]	; 0xb0
   19fd0:	mov	r4, r3
   19fd4:	mov	r9, r3
   19fd8:	movw	r3, #9476	; 0x2504
   19fdc:	movt	r3, #2
   19fe0:	str	r2, [sp, #32]
   19fe4:	str	r2, [sp, #44]	; 0x2c
   19fe8:	str	r4, [sp, #48]	; 0x30
   19fec:	strd	r2, [sp, #68]	; 0x44
   19ff0:	ldr	r3, [sp, #180]	; 0xb4
   19ff4:	str	r2, [sp, #52]	; 0x34
   19ff8:	str	r1, [sp, #56]	; 0x38
   19ffc:	str	r4, [sp, #60]	; 0x3c
   1a000:	str	r2, [sp, #64]	; 0x40
   1a004:	and	r3, r3, r2
   1a008:	str	r4, [sp, #80]	; 0x50
   1a00c:	str	r4, [sp, #84]	; 0x54
   1a010:	str	r4, [sp, #88]	; 0x58
   1a014:	str	r3, [sp, #92]	; 0x5c
   1a018:	ldr	r3, [sp, #180]	; 0xb4
   1a01c:	and	r3, r3, #4
   1a020:	str	r3, [sp, #96]	; 0x60
   1a024:	mov	r3, #2
   1a028:	str	r3, [sp, #176]	; 0xb0
   1a02c:	b	19afc <__assert_fail@plt+0x83f8>
   1a030:	mov	r3, #1
   1a034:	mov	r2, #0
   1a038:	mov	r4, r2
   1a03c:	mov	r9, r2
   1a040:	str	r3, [sp, #32]
   1a044:	str	r3, [sp, #44]	; 0x2c
   1a048:	str	r2, [sp, #48]	; 0x30
   1a04c:	str	r3, [sp, #52]	; 0x34
   1a050:	str	r3, [sp, #56]	; 0x38
   1a054:	str	r3, [sp, #60]	; 0x3c
   1a058:	str	r3, [sp, #64]	; 0x40
   1a05c:	str	r3, [sp, #68]	; 0x44
   1a060:	str	r3, [sp, #88]	; 0x58
   1a064:	movw	r3, #9476	; 0x2504
   1a068:	movt	r3, #2
   1a06c:	str	r3, [sp, #72]	; 0x48
   1a070:	ldr	r3, [sp, #180]	; 0xb4
   1a074:	str	r2, [sp, #80]	; 0x50
   1a078:	str	r2, [sp, #84]	; 0x54
   1a07c:	and	r3, r3, #1
   1a080:	b	1a014 <__assert_fail@plt+0x8910>
   1a084:	mov	r5, #102	; 0x66
   1a088:	mov	r6, #0
   1a08c:	ldr	r3, [sp, #44]	; 0x2c
   1a090:	cmp	r3, #0
   1a094:	bne	1af44 <__assert_fail@plt+0x9840>
   1a098:	ldr	r2, [sp, #52]	; 0x34
   1a09c:	eor	r3, fp, #1
   1a0a0:	ands	r3, r2, r3
   1a0a4:	beq	1a0dc <__assert_fail@plt+0x89d8>
   1a0a8:	cmp	sl, r4
   1a0ac:	mov	fp, r3
   1a0b0:	movhi	r2, #39	; 0x27
   1a0b4:	strbhi	r2, [r9, r4]
   1a0b8:	add	r2, r4, #1
   1a0bc:	cmp	sl, r2
   1a0c0:	movhi	r1, #36	; 0x24
   1a0c4:	strbhi	r1, [r9, r2]
   1a0c8:	add	r2, r4, #2
   1a0cc:	add	r4, r4, #3
   1a0d0:	cmp	sl, r2
   1a0d4:	movhi	r1, #39	; 0x27
   1a0d8:	strbhi	r1, [r9, r2]
   1a0dc:	cmp	sl, r4
   1a0e0:	add	r7, r7, #1
   1a0e4:	movhi	r3, #92	; 0x5c
   1a0e8:	strbhi	r3, [r9, r4]
   1a0ec:	add	r4, r4, #1
   1a0f0:	cmp	r4, sl
   1a0f4:	ldr	r3, [sp, #32]
   1a0f8:	strbcc	r5, [r9, r4]
   1a0fc:	cmp	r6, #0
   1a100:	add	r4, r4, #1
   1a104:	moveq	r3, #0
   1a108:	cmn	r8, #1
   1a10c:	str	r3, [sp, #32]
   1a110:	bne	19b14 <__assert_fail@plt+0x8410>
   1a114:	ldr	r3, [sp, #28]
   1a118:	ldrb	r6, [r3, r7]
   1a11c:	adds	r6, r6, #0
   1a120:	movne	r6, #1
   1a124:	cmp	r6, #0
   1a128:	bne	19b24 <__assert_fail@plt+0x8420>
   1a12c:	mov	r3, r9
   1a130:	mov	r9, fp
   1a134:	mov	fp, r3
   1a138:	ldr	r3, [sp, #68]	; 0x44
   1a13c:	cmp	r4, #0
   1a140:	movne	r3, #0
   1a144:	cmp	r3, #0
   1a148:	bne	1b33c <__assert_fail@plt+0x9c38>
   1a14c:	ldr	r3, [sp, #44]	; 0x2c
   1a150:	ldr	r2, [sp, #52]	; 0x34
   1a154:	eor	r3, r3, #1
   1a158:	ands	r2, r3, r2
   1a15c:	beq	1b274 <__assert_fail@plt+0x9b70>
   1a160:	ldr	r3, [sp, #80]	; 0x50
   1a164:	cmp	r3, #0
   1a168:	beq	1b278 <__assert_fail@plt+0x9b74>
   1a16c:	ldr	r3, [sp, #32]
   1a170:	cmp	r3, #0
   1a174:	bne	1b2ec <__assert_fail@plt+0x9be8>
   1a178:	ldr	r3, [sp, #84]	; 0x54
   1a17c:	adds	r3, r3, #0
   1a180:	movne	r3, #1
   1a184:	cmp	sl, #0
   1a188:	movne	r3, #0
   1a18c:	cmp	r3, #0
   1a190:	ldreq	r2, [sp, #80]	; 0x50
   1a194:	beq	1b278 <__assert_fail@plt+0x9b74>
   1a198:	ldr	r2, [sp, #84]	; 0x54
   1a19c:	mov	sl, r2
   1a1a0:	mov	r0, #0
   1a1a4:	mov	r4, #1
   1a1a8:	mov	r1, #39	; 0x27
   1a1ac:	str	r0, [sp, #44]	; 0x2c
   1a1b0:	strb	r1, [fp]
   1a1b4:	str	r0, [sp, #48]	; 0x30
   1a1b8:	str	r4, [sp, #52]	; 0x34
   1a1bc:	str	r4, [sp, #56]	; 0x38
   1a1c0:	str	r4, [sp, #64]	; 0x40
   1a1c4:	str	r0, [sp, #68]	; 0x44
   1a1c8:	str	r3, [sp, #80]	; 0x50
   1a1cc:	str	r2, [sp, #84]	; 0x54
   1a1d0:	str	r0, [sp, #88]	; 0x58
   1a1d4:	b	19e14 <__assert_fail@plt+0x8710>
   1a1d8:	mov	r5, #98	; 0x62
   1a1dc:	b	1a088 <__assert_fail@plt+0x8984>
   1a1e0:	mov	r5, #97	; 0x61
   1a1e4:	b	1a088 <__assert_fail@plt+0x8984>
   1a1e8:	ldr	r3, [sp, #48]	; 0x30
   1a1ec:	str	r3, [sp, #40]	; 0x28
   1a1f0:	mov	r3, #116	; 0x74
   1a1f4:	ldr	r2, [sp, #68]	; 0x44
   1a1f8:	cmp	r2, #0
   1a1fc:	bne	1a3f8 <__assert_fail@plt+0x8cf4>
   1a200:	ldr	r2, [sp, #60]	; 0x3c
   1a204:	cmp	r2, #0
   1a208:	bne	1a354 <__assert_fail@plt+0x8c50>
   1a20c:	ldr	r3, [sp, #44]	; 0x2c
   1a210:	mov	r6, #0
   1a214:	cmp	r3, #0
   1a218:	beq	1a3c4 <__assert_fail@plt+0x8cc0>
   1a21c:	mov	r3, fp
   1a220:	ldr	r2, [sp, #184]	; 0xb8
   1a224:	cmp	r2, #0
   1a228:	beq	1a248 <__assert_fail@plt+0x8b44>
   1a22c:	ubfx	r1, r5, #5, #8
   1a230:	mov	r0, r2
   1a234:	and	r2, r5, #31
   1a238:	ldr	r1, [r0, r1, lsl #2]
   1a23c:	lsr	r2, r1, r2
   1a240:	tst	r2, #1
   1a244:	bne	1a08c <__assert_fail@plt+0x8988>
   1a248:	ldr	r2, [sp, #40]	; 0x28
   1a24c:	cmp	r2, #0
   1a250:	addeq	r7, r7, #1
   1a254:	bne	1a08c <__assert_fail@plt+0x8988>
   1a258:	cmp	r3, #0
   1a25c:	beq	1a0f0 <__assert_fail@plt+0x89ec>
   1a260:	cmp	sl, r4
   1a264:	mov	fp, #0
   1a268:	movhi	r3, #39	; 0x27
   1a26c:	strbhi	r3, [r9, r4]
   1a270:	add	r3, r4, #1
   1a274:	add	r4, r4, #2
   1a278:	cmp	sl, r3
   1a27c:	movhi	r2, #39	; 0x27
   1a280:	strbhi	r2, [r9, r3]
   1a284:	b	1a0f0 <__assert_fail@plt+0x89ec>
   1a288:	ldr	r3, [sp, #48]	; 0x30
   1a28c:	str	r3, [sp, #40]	; 0x28
   1a290:	eor	r3, fp, #1
   1a294:	ldr	r2, [sp, #52]	; 0x34
   1a298:	ands	r2, r2, r3
   1a29c:	beq	1af5c <__assert_fail@plt+0x9858>
   1a2a0:	cmp	sl, r4
   1a2a4:	movhi	r3, #39	; 0x27
   1a2a8:	strbhi	r3, [r9, r4]
   1a2ac:	add	r3, r4, #1
   1a2b0:	cmp	sl, r3
   1a2b4:	movhi	r1, #36	; 0x24
   1a2b8:	strbhi	r1, [r9, r3]
   1a2bc:	add	r3, r4, #2
   1a2c0:	cmp	sl, r3
   1a2c4:	movhi	r1, #39	; 0x27
   1a2c8:	strbhi	r1, [r9, r3]
   1a2cc:	add	r3, r4, #3
   1a2d0:	cmp	sl, r3
   1a2d4:	bls	1afa8 <__assert_fail@plt+0x98a4>
   1a2d8:	mov	r4, r3
   1a2dc:	mov	r3, #92	; 0x5c
   1a2e0:	mov	fp, r2
   1a2e4:	mov	r2, r4
   1a2e8:	strb	r3, [r9, r4]
   1a2ec:	ldr	r3, [sp, #176]	; 0xb0
   1a2f0:	add	r4, r4, #1
   1a2f4:	cmp	r3, #2
   1a2f8:	beq	1b010 <__assert_fail@plt+0x990c>
   1a2fc:	add	r3, r7, #1
   1a300:	cmp	r3, r8
   1a304:	bcs	1a31c <__assert_fail@plt+0x8c18>
   1a308:	ldr	r1, [sp, #28]
   1a30c:	ldrb	r3, [r1, r3]
   1a310:	sub	r3, r3, #48	; 0x30
   1a314:	cmp	r3, #9
   1a318:	bls	1b020 <__assert_fail@plt+0x991c>
   1a31c:	mov	r3, #0
   1a320:	mov	r5, #48	; 0x30
   1a324:	ldr	r6, [sp, #64]	; 0x40
   1a328:	cmp	r6, #0
   1a32c:	beq	1a220 <__assert_fail@plt+0x8b1c>
   1a330:	mov	r6, #0
   1a334:	b	1a248 <__assert_fail@plt+0x8b44>
   1a338:	ldr	r3, [sp, #48]	; 0x30
   1a33c:	str	r3, [sp, #40]	; 0x28
   1a340:	ldr	r2, [sp, #60]	; 0x3c
   1a344:	mov	r5, #13
   1a348:	mov	r3, #114	; 0x72
   1a34c:	cmp	r2, #0
   1a350:	beq	1a20c <__assert_fail@plt+0x8b08>
   1a354:	mov	r5, r3
   1a358:	b	1a088 <__assert_fail@plt+0x8984>
   1a35c:	ldr	r3, [sp, #48]	; 0x30
   1a360:	str	r3, [sp, #40]	; 0x28
   1a364:	mov	r3, #118	; 0x76
   1a368:	b	1a200 <__assert_fail@plt+0x8afc>
   1a36c:	ldr	r3, [sp, #48]	; 0x30
   1a370:	str	r3, [sp, #40]	; 0x28
   1a374:	mov	r5, #10
   1a378:	mov	r3, #110	; 0x6e
   1a37c:	b	1a200 <__assert_fail@plt+0x8afc>
   1a380:	ldr	r3, [sp, #48]	; 0x30
   1a384:	cmn	r8, #1
   1a388:	str	r3, [sp, #40]	; 0x28
   1a38c:	beq	1a7d4 <__assert_fail@plt+0x90d0>
   1a390:	subs	r3, r8, #1
   1a394:	movne	r3, #1
   1a398:	cmp	r3, #0
   1a39c:	bne	1a3a8 <__assert_fail@plt+0x8ca4>
   1a3a0:	cmp	r7, #0
   1a3a4:	beq	1a3ec <__assert_fail@plt+0x8ce8>
   1a3a8:	mov	r6, #0
   1a3ac:	ldr	r3, [sp, #64]	; 0x40
   1a3b0:	cmp	r3, #0
   1a3b4:	beq	1a21c <__assert_fail@plt+0x8b18>
   1a3b8:	ldr	r3, [sp, #44]	; 0x2c
   1a3bc:	cmp	r3, #0
   1a3c0:	bne	1a21c <__assert_fail@plt+0x8b18>
   1a3c4:	mov	r3, fp
   1a3c8:	b	1a248 <__assert_fail@plt+0x8b44>
   1a3cc:	ldr	r3, [sp, #48]	; 0x30
   1a3d0:	str	r3, [sp, #40]	; 0x28
   1a3d4:	b	1a3a0 <__assert_fail@plt+0x8c9c>
   1a3d8:	ldr	r3, [sp, #48]	; 0x30
   1a3dc:	str	r3, [sp, #40]	; 0x28
   1a3e0:	b	1a3a8 <__assert_fail@plt+0x8ca4>
   1a3e4:	ldr	r6, [sp, #48]	; 0x30
   1a3e8:	str	r6, [sp, #40]	; 0x28
   1a3ec:	ldr	r3, [sp, #68]	; 0x44
   1a3f0:	cmp	r3, #0
   1a3f4:	beq	1a3ac <__assert_fail@plt+0x8ca8>
   1a3f8:	mov	r3, #2
   1a3fc:	mov	fp, r9
   1a400:	str	r3, [sp, #176]	; 0xb0
   1a404:	ldr	r3, [sp, #60]	; 0x3c
   1a408:	cmp	r3, #0
   1a40c:	ldr	r3, [sp, #176]	; 0xb0
   1a410:	movne	r3, #4
   1a414:	str	r3, [sp, #176]	; 0xb0
   1a418:	mov	lr, #0
   1a41c:	mov	r0, fp
   1a420:	ldr	r2, [sp, #28]
   1a424:	ldr	r3, [sp, #180]	; 0xb4
   1a428:	ldr	r1, [sp, #188]	; 0xbc
   1a42c:	bic	ip, r3, #2
   1a430:	ldr	r3, [sp, #176]	; 0xb0
   1a434:	stm	sp, {r3, ip, lr}
   1a438:	mov	r3, r8
   1a43c:	ldr	ip, [sp, #192]	; 0xc0
   1a440:	str	r1, [sp, #12]
   1a444:	mov	r1, sl
   1a448:	str	ip, [sp, #16]
   1a44c:	bl	199d8 <__assert_fail@plt+0x82d4>
   1a450:	mov	r4, r0
   1a454:	mov	r0, r4
   1a458:	add	sp, sp, #140	; 0x8c
   1a45c:	ldrd	r4, [sp]
   1a460:	ldrd	r6, [sp, #8]
   1a464:	ldrd	r8, [sp, #16]
   1a468:	ldrd	sl, [sp, #24]
   1a46c:	add	sp, sp, #32
   1a470:	pop	{pc}		; (ldr pc, [sp], #4)
   1a474:	ldr	r3, [sp, #48]	; 0x30
   1a478:	str	r3, [sp, #40]	; 0x28
   1a47c:	ldr	r3, [sp, #176]	; 0xb0
   1a480:	cmp	r3, #2
   1a484:	beq	1a7fc <__assert_fail@plt+0x90f8>
   1a488:	ldr	r3, [sp, #88]	; 0x58
   1a48c:	cmp	r3, #0
   1a490:	moveq	r5, #92	; 0x5c
   1a494:	moveq	r3, r5
   1a498:	beq	1a200 <__assert_fail@plt+0x8afc>
   1a49c:	add	r7, r7, #1
   1a4a0:	mov	r3, fp
   1a4a4:	mov	r6, #0
   1a4a8:	mov	r5, #92	; 0x5c
   1a4ac:	b	1a258 <__assert_fail@plt+0x8b54>
   1a4b0:	ldr	r3, [sp, #64]	; 0x40
   1a4b4:	cmp	r3, #0
   1a4b8:	bne	1b330 <__assert_fail@plt+0x9c2c>
   1a4bc:	ldr	r2, [sp, #48]	; 0x30
   1a4c0:	mov	r3, fp
   1a4c4:	mov	r6, r2
   1a4c8:	str	r2, [sp, #40]	; 0x28
   1a4cc:	b	1a220 <__assert_fail@plt+0x8b1c>
   1a4d0:	ldr	r3, [sp, #176]	; 0xb0
   1a4d4:	cmp	r3, #2
   1a4d8:	beq	1b26c <__assert_fail@plt+0x9b68>
   1a4dc:	cmp	r3, #5
   1a4e0:	ldr	r3, [sp, #48]	; 0x30
   1a4e4:	str	r3, [sp, #40]	; 0x28
   1a4e8:	bne	1a514 <__assert_fail@plt+0x8e10>
   1a4ec:	ldr	r3, [sp, #96]	; 0x60
   1a4f0:	cmp	r3, #0
   1a4f4:	beq	1af70 <__assert_fail@plt+0x986c>
   1a4f8:	add	r3, r7, #2
   1a4fc:	cmp	r3, r8
   1a500:	bcs	1a514 <__assert_fail@plt+0x8e10>
   1a504:	ldr	r2, [sp, #36]	; 0x24
   1a508:	ldrb	r5, [r2, #1]
   1a50c:	cmp	r5, #63	; 0x3f
   1a510:	beq	1b058 <__assert_fail@plt+0x9954>
   1a514:	mov	r6, #0
   1a518:	mov	r5, #63	; 0x3f
   1a51c:	b	1a3ac <__assert_fail@plt+0x8ca8>
   1a520:	ldr	r3, [sp, #176]	; 0xb0
   1a524:	cmp	r3, #2
   1a528:	ldr	r3, [sp, #48]	; 0x30
   1a52c:	beq	1ad14 <__assert_fail@plt+0x9610>
   1a530:	mov	r5, #39	; 0x27
   1a534:	str	r3, [sp, #40]	; 0x28
   1a538:	str	r6, [sp, #80]	; 0x50
   1a53c:	b	1a3ac <__assert_fail@plt+0x8ca8>
   1a540:	ldr	r3, [sp, #180]	; 0xb4
   1a544:	cmp	r4, #0
   1a548:	and	r3, r3, #1
   1a54c:	str	r3, [sp, #92]	; 0x5c
   1a550:	ldr	r3, [sp, #180]	; 0xb4
   1a554:	and	r3, r3, #4
   1a558:	str	r3, [sp, #96]	; 0x60
   1a55c:	bne	1b37c <__assert_fail@plt+0x9c78>
   1a560:	str	r4, [sp, #60]	; 0x3c
   1a564:	cmp	sl, #0
   1a568:	bne	1b360 <__assert_fail@plt+0x9c5c>
   1a56c:	mov	r3, #1
   1a570:	movw	r2, #9476	; 0x2504
   1a574:	movt	r2, #2
   1a578:	mov	r4, r3
   1a57c:	mov	r3, #2
   1a580:	mov	r9, sl
   1a584:	str	r4, [sp, #32]
   1a588:	str	sl, [sp, #44]	; 0x2c
   1a58c:	str	sl, [sp, #48]	; 0x30
   1a590:	str	r4, [sp, #52]	; 0x34
   1a594:	str	r4, [sp, #56]	; 0x38
   1a598:	str	r4, [sp, #64]	; 0x40
   1a59c:	str	sl, [sp, #68]	; 0x44
   1a5a0:	str	r2, [sp, #72]	; 0x48
   1a5a4:	str	sl, [sp, #80]	; 0x50
   1a5a8:	str	sl, [sp, #84]	; 0x54
   1a5ac:	str	sl, [sp, #88]	; 0x58
   1a5b0:	str	r3, [sp, #176]	; 0xb0
   1a5b4:	b	19afc <__assert_fail@plt+0x83f8>
   1a5b8:	ldrb	r5, [r0, r7]
   1a5bc:	cmp	r5, #126	; 0x7e
   1a5c0:	ldrls	pc, [pc, r5, lsl #2]
   1a5c4:	b	1a928 <__assert_fail@plt+0x9224>
   1a5c8:	strdeq	sl, [r1], -r4
   1a5cc:	andeq	sl, r1, r8, lsr #18
   1a5d0:	andeq	sl, r1, r8, lsr #18
   1a5d4:	andeq	sl, r1, r8, lsr #18
   1a5d8:	andeq	sl, r1, r8, lsr #18
   1a5dc:	andeq	sl, r1, r8, lsr #18
   1a5e0:	andeq	sl, r1, r8, lsr #18
   1a5e4:	andeq	sl, r1, r4, ror #17
   1a5e8:	ldrdeq	sl, [r1], -r4
   1a5ec:	andeq	sl, r1, r8, asr r8
   1a5f0:	andeq	sl, r1, r4, asr #17
   1a5f4:	andeq	sl, r1, r8, lsr r8
   1a5f8:	andeq	sl, r1, r8, lsl r9
   1a5fc:	andeq	sl, r1, r4, lsr #17
   1a600:	andeq	sl, r1, r8, lsr #18
   1a604:	andeq	sl, r1, r8, lsr #18
   1a608:	andeq	sl, r1, r8, lsr #18
   1a60c:	andeq	sl, r1, r8, lsr #18
   1a610:	andeq	sl, r1, r8, lsr #18
   1a614:	andeq	sl, r1, r8, lsr #18
   1a618:	andeq	sl, r1, r8, lsr #18
   1a61c:	andeq	sl, r1, r8, lsr #18
   1a620:	andeq	sl, r1, r8, lsr #18
   1a624:	andeq	sl, r1, r8, lsr #18
   1a628:	andeq	sl, r1, r8, lsr #18
   1a62c:	andeq	sl, r1, r8, lsr #18
   1a630:	andeq	sl, r1, r8, lsr #18
   1a634:	andeq	sl, r1, r8, lsr #18
   1a638:	andeq	sl, r1, r8, lsr #18
   1a63c:	andeq	sl, r1, r8, lsr #18
   1a640:	andeq	sl, r1, r8, lsr #18
   1a644:	andeq	sl, r1, r8, lsr #18
   1a648:	andeq	sl, r1, ip, asr #16
   1a64c:			; <UNDEFINED> instruction: 0x0001a8b4
   1a650:			; <UNDEFINED> instruction: 0x0001a8b4
   1a654:	andeq	sl, r1, ip, lsr #16
   1a658:			; <UNDEFINED> instruction: 0x0001a8b4
   1a65c:	andeq	sl, r1, r0, lsr #16
   1a660:			; <UNDEFINED> instruction: 0x0001a8b4
   1a664:	muleq	r1, r0, r8
   1a668:			; <UNDEFINED> instruction: 0x0001a8b4
   1a66c:			; <UNDEFINED> instruction: 0x0001a8b4
   1a670:			; <UNDEFINED> instruction: 0x0001a8b4
   1a674:	andeq	sl, r1, r0, lsr #16
   1a678:	andeq	sl, r1, r0, lsr #16
   1a67c:	andeq	sl, r1, r0, lsr #16
   1a680:	andeq	sl, r1, r0, lsr #16
   1a684:	andeq	sl, r1, r0, lsr #16
   1a688:	andeq	sl, r1, r0, lsr #16
   1a68c:	andeq	sl, r1, r0, lsr #16
   1a690:	andeq	sl, r1, r0, lsr #16
   1a694:	andeq	sl, r1, r0, lsr #16
   1a698:	andeq	sl, r1, r0, lsr #16
   1a69c:	andeq	sl, r1, r0, lsr #16
   1a6a0:	andeq	sl, r1, r0, lsr #16
   1a6a4:	andeq	sl, r1, r0, lsr #16
   1a6a8:	andeq	sl, r1, r0, lsr #16
   1a6ac:	andeq	sl, r1, r0, lsr #16
   1a6b0:	andeq	sl, r1, r0, lsr #16
   1a6b4:			; <UNDEFINED> instruction: 0x0001a8b4
   1a6b8:			; <UNDEFINED> instruction: 0x0001a8b4
   1a6bc:			; <UNDEFINED> instruction: 0x0001a8b4
   1a6c0:			; <UNDEFINED> instruction: 0x0001a8b4
   1a6c4:	andeq	sl, r1, r8, ror #16
   1a6c8:	andeq	sl, r1, r8, lsr #18
   1a6cc:	andeq	sl, r1, r0, lsr #16
   1a6d0:	andeq	sl, r1, r0, lsr #16
   1a6d4:	andeq	sl, r1, r0, lsr #16
   1a6d8:	andeq	sl, r1, r0, lsr #16
   1a6dc:	andeq	sl, r1, r0, lsr #16
   1a6e0:	andeq	sl, r1, r0, lsr #16
   1a6e4:	andeq	sl, r1, r0, lsr #16
   1a6e8:	andeq	sl, r1, r0, lsr #16
   1a6ec:	andeq	sl, r1, r0, lsr #16
   1a6f0:	andeq	sl, r1, r0, lsr #16
   1a6f4:	andeq	sl, r1, r0, lsr #16
   1a6f8:	andeq	sl, r1, r0, lsr #16
   1a6fc:	andeq	sl, r1, r0, lsr #16
   1a700:	andeq	sl, r1, r0, lsr #16
   1a704:	andeq	sl, r1, r0, lsr #16
   1a708:	andeq	sl, r1, r0, lsr #16
   1a70c:	andeq	sl, r1, r0, lsr #16
   1a710:	andeq	sl, r1, r0, lsr #16
   1a714:	andeq	sl, r1, r0, lsr #16
   1a718:	andeq	sl, r1, r0, lsr #16
   1a71c:	andeq	sl, r1, r0, lsr #16
   1a720:	andeq	sl, r1, r0, lsr #16
   1a724:	andeq	sl, r1, r0, lsr #16
   1a728:	andeq	sl, r1, r0, lsr #16
   1a72c:	andeq	sl, r1, r0, lsr #16
   1a730:	andeq	sl, r1, r0, lsr #16
   1a734:			; <UNDEFINED> instruction: 0x0001a8b4
   1a738:	andeq	sl, r1, r8, ror #15
   1a73c:	andeq	sl, r1, r0, lsr #16
   1a740:			; <UNDEFINED> instruction: 0x0001a8b4
   1a744:	andeq	sl, r1, r0, lsr #16
   1a748:			; <UNDEFINED> instruction: 0x0001a8b4
   1a74c:	andeq	sl, r1, r0, lsr #16
   1a750:	andeq	sl, r1, r0, lsr #16
   1a754:	andeq	sl, r1, r0, lsr #16
   1a758:	andeq	sl, r1, r0, lsr #16
   1a75c:	andeq	sl, r1, r0, lsr #16
   1a760:	andeq	sl, r1, r0, lsr #16
   1a764:	andeq	sl, r1, r0, lsr #16
   1a768:	andeq	sl, r1, r0, lsr #16
   1a76c:	andeq	sl, r1, r0, lsr #16
   1a770:	andeq	sl, r1, r0, lsr #16
   1a774:	andeq	sl, r1, r0, lsr #16
   1a778:	andeq	sl, r1, r0, lsr #16
   1a77c:	andeq	sl, r1, r0, lsr #16
   1a780:	andeq	sl, r1, r0, lsr #16
   1a784:	andeq	sl, r1, r0, lsr #16
   1a788:	andeq	sl, r1, r0, lsr #16
   1a78c:	andeq	sl, r1, r0, lsr #16
   1a790:	andeq	sl, r1, r0, lsr #16
   1a794:	andeq	sl, r1, r0, lsr #16
   1a798:	andeq	sl, r1, r0, lsr #16
   1a79c:	andeq	sl, r1, r0, lsr #16
   1a7a0:	andeq	sl, r1, r0, lsr #16
   1a7a4:	andeq	sl, r1, r0, lsr #16
   1a7a8:	andeq	sl, r1, r0, lsr #16
   1a7ac:	andeq	sl, r1, r0, lsr #16
   1a7b0:	andeq	sl, r1, r0, lsr #16
   1a7b4:	andeq	sl, r1, r4, asr #15
   1a7b8:			; <UNDEFINED> instruction: 0x0001a8b4
   1a7bc:	andeq	sl, r1, r4, asr #15
   1a7c0:	andeq	sl, r1, ip, lsr #16
   1a7c4:	mov	r3, #0
   1a7c8:	cmn	r8, #1
   1a7cc:	str	r3, [sp, #40]	; 0x28
   1a7d0:	bne	1a390 <__assert_fail@plt+0x8c8c>
   1a7d4:	ldr	r3, [sp, #28]
   1a7d8:	ldrb	r3, [r3, #1]
   1a7dc:	adds	r3, r3, #0
   1a7e0:	movne	r3, #1
   1a7e4:	b	1a398 <__assert_fail@plt+0x8c94>
   1a7e8:	mov	r3, #0
   1a7ec:	str	r3, [sp, #40]	; 0x28
   1a7f0:	ldr	r3, [sp, #176]	; 0xb0
   1a7f4:	cmp	r3, #2
   1a7f8:	bne	1a488 <__assert_fail@plt+0x8d84>
   1a7fc:	ldr	r3, [sp, #44]	; 0x2c
   1a800:	cmp	r3, #0
   1a804:	bne	1b144 <__assert_fail@plt+0x9a40>
   1a808:	mov	r6, r3
   1a80c:	add	r7, r7, #1
   1a810:	mov	r3, fp
   1a814:	mov	r5, #92	; 0x5c
   1a818:	b	1a258 <__assert_fail@plt+0x8b54>
   1a81c:	ldr	r6, [sp, #48]	; 0x30
   1a820:	mov	r3, #0
   1a824:	str	r3, [sp, #40]	; 0x28
   1a828:	b	1a3ac <__assert_fail@plt+0x8ca8>
   1a82c:	mov	r3, #0
   1a830:	str	r3, [sp, #40]	; 0x28
   1a834:	b	1a3a0 <__assert_fail@plt+0x8c9c>
   1a838:	mov	r3, #0
   1a83c:	str	r3, [sp, #40]	; 0x28
   1a840:	mov	r3, #118	; 0x76
   1a844:	b	1a200 <__assert_fail@plt+0x8afc>
   1a848:	ldr	r6, [sp, #48]	; 0x30
   1a84c:	mov	r3, #0
   1a850:	str	r3, [sp, #40]	; 0x28
   1a854:	b	1a3ec <__assert_fail@plt+0x8ce8>
   1a858:	mov	r3, #0
   1a85c:	str	r3, [sp, #40]	; 0x28
   1a860:	mov	r3, #116	; 0x74
   1a864:	b	1a1f4 <__assert_fail@plt+0x8af0>
   1a868:	ldr	r3, [sp, #176]	; 0xb0
   1a86c:	cmp	r3, #2
   1a870:	beq	1ad80 <__assert_fail@plt+0x967c>
   1a874:	cmp	r3, #5
   1a878:	mov	r3, #0
   1a87c:	str	r3, [sp, #40]	; 0x28
   1a880:	beq	1a4ec <__assert_fail@plt+0x8de8>
   1a884:	mov	r6, #0
   1a888:	mov	r5, #63	; 0x3f
   1a88c:	b	1a3ac <__assert_fail@plt+0x8ca8>
   1a890:	ldr	r3, [sp, #176]	; 0xb0
   1a894:	cmp	r3, #2
   1a898:	beq	1ad08 <__assert_fail@plt+0x9604>
   1a89c:	mov	r3, #0
   1a8a0:	b	1a530 <__assert_fail@plt+0x8e2c>
   1a8a4:	mov	r3, #0
   1a8a8:	str	r3, [sp, #40]	; 0x28
   1a8ac:	mov	r3, #114	; 0x72
   1a8b0:	b	1a1f4 <__assert_fail@plt+0x8af0>
   1a8b4:	mov	r3, #0
   1a8b8:	mov	r6, r3
   1a8bc:	str	r3, [sp, #40]	; 0x28
   1a8c0:	b	1a3ec <__assert_fail@plt+0x8ce8>
   1a8c4:	mov	r3, #0
   1a8c8:	str	r3, [sp, #40]	; 0x28
   1a8cc:	mov	r3, #110	; 0x6e
   1a8d0:	b	1a1f4 <__assert_fail@plt+0x8af0>
   1a8d4:	mov	r3, #0
   1a8d8:	str	r3, [sp, #40]	; 0x28
   1a8dc:	mov	r3, #98	; 0x62
   1a8e0:	b	1a200 <__assert_fail@plt+0x8afc>
   1a8e4:	mov	r3, #0
   1a8e8:	str	r3, [sp, #40]	; 0x28
   1a8ec:	mov	r3, #97	; 0x61
   1a8f0:	b	1a200 <__assert_fail@plt+0x8afc>
   1a8f4:	ldr	r3, [sp, #60]	; 0x3c
   1a8f8:	cmp	r3, #0
   1a8fc:	bne	1acec <__assert_fail@plt+0x95e8>
   1a900:	ldr	r3, [sp, #92]	; 0x5c
   1a904:	cmp	r3, #0
   1a908:	addne	r7, r7, #1
   1a90c:	bne	19b0c <__assert_fail@plt+0x8408>
   1a910:	str	r3, [sp, #40]	; 0x28
   1a914:	b	1a20c <__assert_fail@plt+0x8b08>
   1a918:	mov	r3, #0
   1a91c:	str	r3, [sp, #40]	; 0x28
   1a920:	mov	r3, #102	; 0x66
   1a924:	b	1a200 <__assert_fail@plt+0x8afc>
   1a928:	mov	r3, #0
   1a92c:	str	r3, [sp, #40]	; 0x28
   1a930:	ldr	r3, [sp, #76]	; 0x4c
   1a934:	cmp	r3, #1
   1a938:	bne	1ada0 <__assert_fail@plt+0x969c>
   1a93c:	bl	11518 <__ctype_b_loc@plt>
   1a940:	ldr	r2, [r0]
   1a944:	sxth	r3, r5
   1a948:	lsl	r3, r3, #1
   1a94c:	ldr	r1, [sp, #76]	; 0x4c
   1a950:	ldrh	r3, [r2, r3]
   1a954:	mov	r0, r1
   1a958:	and	r3, r3, #16384	; 0x4000
   1a95c:	cmp	r3, #0
   1a960:	ldr	r3, [sp, #60]	; 0x3c
   1a964:	movne	r6, #1
   1a968:	moveq	r6, #0
   1a96c:	movne	r2, #0
   1a970:	andeq	r2, r3, #1
   1a974:	cmp	r2, #0
   1a978:	beq	1a3ac <__assert_fail@plt+0x8ca8>
   1a97c:	ldr	r2, [sp, #60]	; 0x3c
   1a980:	mov	r6, #0
   1a984:	add	r1, r0, r7
   1a988:	mov	ip, #39	; 0x27
   1a98c:	str	r6, [sp, #100]	; 0x64
   1a990:	mov	r0, #0
   1a994:	ldr	lr, [sp, #36]	; 0x24
   1a998:	str	r8, [sp, #36]	; 0x24
   1a99c:	ldr	r6, [sp, #40]	; 0x28
   1a9a0:	ldr	r8, [sp, #44]	; 0x2c
   1a9a4:	b	1aa54 <__assert_fail@plt+0x9350>
   1a9a8:	cmp	r8, #0
   1a9ac:	bne	1af88 <__assert_fail@plt+0x9884>
   1a9b0:	ldr	r0, [sp, #52]	; 0x34
   1a9b4:	eor	r3, fp, #1
   1a9b8:	ands	r3, r0, r3
   1a9bc:	beq	1a9ec <__assert_fail@plt+0x92e8>
   1a9c0:	cmp	sl, r4
   1a9c4:	add	r0, r4, #1
   1a9c8:	strbhi	ip, [r9, r4]
   1a9cc:	cmp	sl, r0
   1a9d0:	movhi	fp, #36	; 0x24
   1a9d4:	strbhi	fp, [r9, r0]
   1a9d8:	add	r0, r4, #2
   1a9dc:	mov	fp, r3
   1a9e0:	cmp	sl, r0
   1a9e4:	add	r4, r4, #3
   1a9e8:	strbhi	ip, [r9, r0]
   1a9ec:	cmp	sl, r4
   1a9f0:	movhi	r3, #92	; 0x5c
   1a9f4:	strbhi	r3, [r9, r4]
   1a9f8:	add	r3, r4, #1
   1a9fc:	cmp	sl, r3
   1aa00:	bls	1aa10 <__assert_fail@plt+0x930c>
   1aa04:	lsr	r0, r5, #6
   1aa08:	add	r0, r0, #48	; 0x30
   1aa0c:	strb	r0, [r9, r3]
   1aa10:	add	r3, r4, #2
   1aa14:	cmp	sl, r3
   1aa18:	bls	1aa28 <__assert_fail@plt+0x9324>
   1aa1c:	ubfx	r0, r5, #3, #3
   1aa20:	add	r0, r0, #48	; 0x30
   1aa24:	strb	r0, [r9, r3]
   1aa28:	add	r7, r7, #1
   1aa2c:	and	r5, r5, #7
   1aa30:	cmp	r1, r7
   1aa34:	add	r5, r5, #48	; 0x30
   1aa38:	add	r4, r4, #3
   1aa3c:	bls	1af9c <__assert_fail@plt+0x9898>
   1aa40:	mov	r0, r2
   1aa44:	cmp	sl, r4
   1aa48:	strbhi	r5, [r9, r4]
   1aa4c:	add	r4, r4, #1
   1aa50:	ldrb	r5, [lr, #1]!
   1aa54:	cmp	r2, #0
   1aa58:	bne	1a9a8 <__assert_fail@plt+0x92a4>
   1aa5c:	eor	r3, r0, #1
   1aa60:	cmp	r6, #0
   1aa64:	and	r3, r3, fp
   1aa68:	uxtb	r3, r3
   1aa6c:	beq	1aa80 <__assert_fail@plt+0x937c>
   1aa70:	cmp	sl, r4
   1aa74:	movhi	r6, #92	; 0x5c
   1aa78:	strbhi	r6, [r9, r4]
   1aa7c:	add	r4, r4, #1
   1aa80:	add	r7, r7, #1
   1aa84:	cmp	r7, r1
   1aa88:	bcs	1af7c <__assert_fail@plt+0x9878>
   1aa8c:	cmp	r3, #0
   1aa90:	beq	1afc0 <__assert_fail@plt+0x98bc>
   1aa94:	cmp	sl, r4
   1aa98:	add	r3, r4, #1
   1aa9c:	mov	r6, #0
   1aaa0:	strbhi	ip, [r9, r4]
   1aaa4:	cmp	sl, r3
   1aaa8:	add	r4, r4, #2
   1aaac:	mov	fp, r6
   1aab0:	strbhi	ip, [r9, r3]
   1aab4:	b	1aa44 <__assert_fail@plt+0x9340>
   1aab8:	ldr	r3, [sp, #36]	; 0x24
   1aabc:	ldrb	r5, [r3]
   1aac0:	cmp	r5, #126	; 0x7e
   1aac4:	ldrls	pc, [pc, r5, lsl #2]
   1aac8:	b	1a928 <__assert_fail@plt+0x9224>
   1aacc:	andeq	sl, r1, ip, ror #25
   1aad0:	andeq	sl, r1, r8, lsr #18
   1aad4:	andeq	sl, r1, r8, lsr #18
   1aad8:	andeq	sl, r1, r8, lsr #18
   1aadc:	andeq	sl, r1, r8, lsr #18
   1aae0:	andeq	sl, r1, r8, lsr #18
   1aae4:	andeq	sl, r1, r8, lsr #18
   1aae8:	andeq	sl, r1, r0, ror #3
   1aaec:	ldrdeq	sl, [r1], -r8
   1aaf0:	andeq	sl, r1, r8, asr r8
   1aaf4:	andeq	sl, r1, r0, ror #25
   1aaf8:	andeq	sl, r1, r8, lsr r8
   1aafc:	andeq	sl, r1, r4, lsl #1
   1ab00:	ldrdeq	sl, [r1], -r4
   1ab04:	andeq	sl, r1, r8, lsr #18
   1ab08:	andeq	sl, r1, r8, lsr #18
   1ab0c:	andeq	sl, r1, r8, lsr #18
   1ab10:	andeq	sl, r1, r8, lsr #18
   1ab14:	andeq	sl, r1, r8, lsr #18
   1ab18:	andeq	sl, r1, r8, lsr #18
   1ab1c:	andeq	sl, r1, r8, lsr #18
   1ab20:	andeq	sl, r1, r8, lsr #18
   1ab24:	andeq	sl, r1, r8, lsr #18
   1ab28:	andeq	sl, r1, r8, lsr #18
   1ab2c:	andeq	sl, r1, r8, lsr #18
   1ab30:	andeq	sl, r1, r8, lsr #18
   1ab34:	andeq	sl, r1, r8, lsr #18
   1ab38:	andeq	sl, r1, r8, lsr #18
   1ab3c:	andeq	sl, r1, r8, lsr #18
   1ab40:	andeq	sl, r1, r8, lsr #18
   1ab44:	andeq	sl, r1, r8, lsr #18
   1ab48:	andeq	sl, r1, r8, lsr #18
   1ab4c:	andeq	sl, r1, r8, asr #16
   1ab50:	andeq	sl, r1, r8, asr #25
   1ab54:	andeq	sl, r1, r8, asr #25
   1ab58:	andeq	sl, r1, ip, lsr #16
   1ab5c:	andeq	sl, r1, r8, asr #25
   1ab60:	andeq	sl, r1, ip, lsl r8
   1ab64:	andeq	sl, r1, r8, asr #25
   1ab68:	muleq	r1, r0, r8
   1ab6c:	andeq	sl, r1, r8, asr #25
   1ab70:	andeq	sl, r1, r8, asr #25
   1ab74:	andeq	sl, r1, r8, asr #25
   1ab78:	andeq	sl, r1, ip, lsl r8
   1ab7c:	andeq	sl, r1, ip, lsl r8
   1ab80:	andeq	sl, r1, ip, lsl r8
   1ab84:	andeq	sl, r1, ip, lsl r8
   1ab88:	andeq	sl, r1, ip, lsl r8
   1ab8c:	andeq	sl, r1, ip, lsl r8
   1ab90:	andeq	sl, r1, ip, lsl r8
   1ab94:	andeq	sl, r1, ip, lsl r8
   1ab98:	andeq	sl, r1, ip, lsl r8
   1ab9c:	andeq	sl, r1, ip, lsl r8
   1aba0:	andeq	sl, r1, ip, lsl r8
   1aba4:	andeq	sl, r1, ip, lsl r8
   1aba8:	andeq	sl, r1, ip, lsl r8
   1abac:	andeq	sl, r1, ip, lsl r8
   1abb0:	andeq	sl, r1, ip, lsl r8
   1abb4:	andeq	sl, r1, ip, lsl r8
   1abb8:	andeq	sl, r1, r8, asr #25
   1abbc:	andeq	sl, r1, r8, asr #25
   1abc0:	andeq	sl, r1, r8, asr #25
   1abc4:	andeq	sl, r1, r8, asr #25
   1abc8:	andeq	sl, r1, r8, ror #16
   1abcc:	andeq	sl, r1, r8, lsr #18
   1abd0:	andeq	sl, r1, ip, lsl r8
   1abd4:	andeq	sl, r1, ip, lsl r8
   1abd8:	andeq	sl, r1, ip, lsl r8
   1abdc:	andeq	sl, r1, ip, lsl r8
   1abe0:	andeq	sl, r1, ip, lsl r8
   1abe4:	andeq	sl, r1, ip, lsl r8
   1abe8:	andeq	sl, r1, ip, lsl r8
   1abec:	andeq	sl, r1, ip, lsl r8
   1abf0:	andeq	sl, r1, ip, lsl r8
   1abf4:	andeq	sl, r1, ip, lsl r8
   1abf8:	andeq	sl, r1, ip, lsl r8
   1abfc:	andeq	sl, r1, ip, lsl r8
   1ac00:	andeq	sl, r1, ip, lsl r8
   1ac04:	andeq	sl, r1, ip, lsl r8
   1ac08:	andeq	sl, r1, ip, lsl r8
   1ac0c:	andeq	sl, r1, ip, lsl r8
   1ac10:	andeq	sl, r1, ip, lsl r8
   1ac14:	andeq	sl, r1, ip, lsl r8
   1ac18:	andeq	sl, r1, ip, lsl r8
   1ac1c:	andeq	sl, r1, ip, lsl r8
   1ac20:	andeq	sl, r1, ip, lsl r8
   1ac24:	andeq	sl, r1, ip, lsl r8
   1ac28:	andeq	sl, r1, ip, lsl r8
   1ac2c:	andeq	sl, r1, ip, lsl r8
   1ac30:	andeq	sl, r1, ip, lsl r8
   1ac34:	andeq	sl, r1, ip, lsl r8
   1ac38:	andeq	sl, r1, r8, asr #25
   1ac3c:	andeq	sl, r1, r8, ror #15
   1ac40:	andeq	sl, r1, ip, lsl r8
   1ac44:	andeq	sl, r1, r8, asr #25
   1ac48:	andeq	sl, r1, ip, lsl r8
   1ac4c:	andeq	sl, r1, r8, asr #25
   1ac50:	andeq	sl, r1, ip, lsl r8
   1ac54:	andeq	sl, r1, ip, lsl r8
   1ac58:	andeq	sl, r1, ip, lsl r8
   1ac5c:	andeq	sl, r1, ip, lsl r8
   1ac60:	andeq	sl, r1, ip, lsl r8
   1ac64:	andeq	sl, r1, ip, lsl r8
   1ac68:	andeq	sl, r1, ip, lsl r8
   1ac6c:	andeq	sl, r1, ip, lsl r8
   1ac70:	andeq	sl, r1, ip, lsl r8
   1ac74:	andeq	sl, r1, ip, lsl r8
   1ac78:	andeq	sl, r1, ip, lsl r8
   1ac7c:	andeq	sl, r1, ip, lsl r8
   1ac80:	andeq	sl, r1, ip, lsl r8
   1ac84:	andeq	sl, r1, ip, lsl r8
   1ac88:	andeq	sl, r1, ip, lsl r8
   1ac8c:	andeq	sl, r1, ip, lsl r8
   1ac90:	andeq	sl, r1, ip, lsl r8
   1ac94:	andeq	sl, r1, ip, lsl r8
   1ac98:	andeq	sl, r1, ip, lsl r8
   1ac9c:	andeq	sl, r1, ip, lsl r8
   1aca0:	andeq	sl, r1, ip, lsl r8
   1aca4:	andeq	sl, r1, ip, lsl r8
   1aca8:	andeq	sl, r1, ip, lsl r8
   1acac:	andeq	sl, r1, ip, lsl r8
   1acb0:	andeq	sl, r1, ip, lsl r8
   1acb4:	andeq	sl, r1, ip, lsl r8
   1acb8:	andeq	sl, r1, r4, asr #15
   1acbc:	andeq	sl, r1, r8, asr #25
   1acc0:	andeq	sl, r1, r4, asr #15
   1acc4:	andeq	sl, r1, ip, lsr #16
   1acc8:	mov	r3, #0
   1accc:	str	r3, [sp, #40]	; 0x28
   1acd0:	b	1a3a8 <__assert_fail@plt+0x8ca4>
   1acd4:	mov	r3, #0
   1acd8:	str	r3, [sp, #40]	; 0x28
   1acdc:	b	1a340 <__assert_fail@plt+0x8c3c>
   1ace0:	mov	r3, #0
   1ace4:	str	r3, [sp, #40]	; 0x28
   1ace8:	b	1a374 <__assert_fail@plt+0x8c70>
   1acec:	ldr	r3, [sp, #44]	; 0x2c
   1acf0:	cmp	r3, #0
   1acf4:	beq	1a28c <__assert_fail@plt+0x8b88>
   1acf8:	ldr	r3, [sp, #52]	; 0x34
   1acfc:	mov	fp, r9
   1ad00:	str	r3, [sp, #60]	; 0x3c
   1ad04:	b	1a404 <__assert_fail@plt+0x8d00>
   1ad08:	ldr	r3, [sp, #44]	; 0x2c
   1ad0c:	cmp	r3, #0
   1ad10:	bne	1b144 <__assert_fail@plt+0x9a40>
   1ad14:	str	r3, [sp, #40]	; 0x28
   1ad18:	cmp	sl, #0
   1ad1c:	ldr	r3, [sp, #84]	; 0x54
   1ad20:	clz	r3, r3
   1ad24:	lsr	r3, r3, #5
   1ad28:	moveq	r3, #0
   1ad2c:	cmp	r3, #0
   1ad30:	strne	sl, [sp, #84]	; 0x54
   1ad34:	movne	sl, #0
   1ad38:	bne	1ad68 <__assert_fail@plt+0x9664>
   1ad3c:	cmp	sl, r4
   1ad40:	movhi	r3, #39	; 0x27
   1ad44:	strbhi	r3, [r9, r4]
   1ad48:	add	r3, r4, #1
   1ad4c:	cmp	sl, r3
   1ad50:	movhi	r2, #92	; 0x5c
   1ad54:	strbhi	r2, [r9, r3]
   1ad58:	add	r3, r4, #2
   1ad5c:	cmp	sl, r3
   1ad60:	movhi	r2, #39	; 0x27
   1ad64:	strbhi	r2, [r9, r3]
   1ad68:	mov	r3, #0
   1ad6c:	add	r4, r4, #3
   1ad70:	str	r6, [sp, #80]	; 0x50
   1ad74:	mov	fp, r3
   1ad78:	mov	r5, #39	; 0x27
   1ad7c:	b	1a248 <__assert_fail@plt+0x8b44>
   1ad80:	ldr	r3, [sp, #44]	; 0x2c
   1ad84:	cmp	r3, #0
   1ad88:	bne	1b144 <__assert_fail@plt+0x9a40>
   1ad8c:	mov	r6, #0
   1ad90:	mov	r5, #63	; 0x3f
   1ad94:	str	r3, [sp, #40]	; 0x28
   1ad98:	mov	r3, fp
   1ad9c:	b	1a248 <__assert_fail@plt+0x8b44>
   1ada0:	mov	r2, #0
   1ada4:	mov	r3, #0
   1ada8:	cmn	r8, #1
   1adac:	strd	r2, [sp, #128]	; 0x80
   1adb0:	bne	1adc0 <__assert_fail@plt+0x96bc>
   1adb4:	ldr	r0, [sp, #28]
   1adb8:	bl	1153c <strlen@plt>
   1adbc:	mov	r8, r0
   1adc0:	str	r9, [sp, #100]	; 0x64
   1adc4:	mov	r3, #0
   1adc8:	strd	sl, [sp, #104]	; 0x68
   1adcc:	ldr	sl, [sp, #28]
   1add0:	str	r5, [sp, #112]	; 0x70
   1add4:	mov	r5, r3
   1add8:	ldr	r9, [sp, #68]	; 0x44
   1addc:	str	r4, [sp, #116]	; 0x74
   1ade0:	add	r4, r7, r5
   1ade4:	add	r3, sp, #128	; 0x80
   1ade8:	add	fp, sl, r4
   1adec:	sub	r2, r8, r4
   1adf0:	mov	r1, fp
   1adf4:	add	r0, sp, #124	; 0x7c
   1adf8:	bl	18200 <__assert_fail@plt+0x6afc>
   1adfc:	subs	r1, r0, #0
   1ae00:	beq	1ae40 <__assert_fail@plt+0x973c>
   1ae04:	cmn	r1, #1
   1ae08:	beq	1b198 <__assert_fail@plt+0x9a94>
   1ae0c:	cmn	r1, #2
   1ae10:	beq	1b1b8 <__assert_fail@plt+0x9ab4>
   1ae14:	cmp	r9, #0
   1ae18:	bne	1ae70 <__assert_fail@plt+0x976c>
   1ae1c:	ldr	r0, [sp, #124]	; 0x7c
   1ae20:	add	r5, r5, r1
   1ae24:	bl	11410 <iswprint@plt>
   1ae28:	cmp	r0, #0
   1ae2c:	add	r0, sp, #128	; 0x80
   1ae30:	moveq	r6, #0
   1ae34:	bl	1138c <mbsinit@plt>
   1ae38:	cmp	r0, #0
   1ae3c:	beq	1ade0 <__assert_fail@plt+0x96dc>
   1ae40:	ldr	r3, [sp, #60]	; 0x3c
   1ae44:	add	r9, sp, #100	; 0x64
   1ae48:	mov	r0, r5
   1ae4c:	ldm	r9, {r9, sl, fp}
   1ae50:	eor	r2, r6, #1
   1ae54:	ldr	r5, [sp, #112]	; 0x70
   1ae58:	and	r2, r2, r3
   1ae5c:	uxtb	r2, r2
   1ae60:	ldr	r4, [sp, #116]	; 0x74
   1ae64:	cmp	r0, #1
   1ae68:	bhi	1a984 <__assert_fail@plt+0x9280>
   1ae6c:	b	1a974 <__assert_fail@plt+0x9270>
   1ae70:	cmp	r1, #1
   1ae74:	beq	1ae1c <__assert_fail@plt+0x9718>
   1ae78:	add	r2, r4, #1
   1ae7c:	add	r3, sl, r1
   1ae80:	add	r2, sl, r2
   1ae84:	add	r4, r3, r4
   1ae88:	ldrb	r3, [r2], #1
   1ae8c:	sub	r3, r3, #91	; 0x5b
   1ae90:	cmp	r3, #33	; 0x21
   1ae94:	ldrls	pc, [pc, r3, lsl #2]
   1ae98:	b	1af24 <__assert_fail@plt+0x9820>
   1ae9c:	andeq	sl, r1, r0, lsr pc
   1aea0:	andeq	sl, r1, r0, lsr pc
   1aea4:	andeq	sl, r1, r4, lsr #30
   1aea8:	andeq	sl, r1, r0, lsr pc
   1aeac:	andeq	sl, r1, r4, lsr #30
   1aeb0:	andeq	sl, r1, r0, lsr pc
   1aeb4:	andeq	sl, r1, r4, lsr #30
   1aeb8:	andeq	sl, r1, r4, lsr #30
   1aebc:	andeq	sl, r1, r4, lsr #30
   1aec0:	andeq	sl, r1, r4, lsr #30
   1aec4:	andeq	sl, r1, r4, lsr #30
   1aec8:	andeq	sl, r1, r4, lsr #30
   1aecc:	andeq	sl, r1, r4, lsr #30
   1aed0:	andeq	sl, r1, r4, lsr #30
   1aed4:	andeq	sl, r1, r4, lsr #30
   1aed8:	andeq	sl, r1, r4, lsr #30
   1aedc:	andeq	sl, r1, r4, lsr #30
   1aee0:	andeq	sl, r1, r4, lsr #30
   1aee4:	andeq	sl, r1, r4, lsr #30
   1aee8:	andeq	sl, r1, r4, lsr #30
   1aeec:	andeq	sl, r1, r4, lsr #30
   1aef0:	andeq	sl, r1, r4, lsr #30
   1aef4:	andeq	sl, r1, r4, lsr #30
   1aef8:	andeq	sl, r1, r4, lsr #30
   1aefc:	andeq	sl, r1, r4, lsr #30
   1af00:	andeq	sl, r1, r4, lsr #30
   1af04:	andeq	sl, r1, r4, lsr #30
   1af08:	andeq	sl, r1, r4, lsr #30
   1af0c:	andeq	sl, r1, r4, lsr #30
   1af10:	andeq	sl, r1, r4, lsr #30
   1af14:	andeq	sl, r1, r4, lsr #30
   1af18:	andeq	sl, r1, r4, lsr #30
   1af1c:	andeq	sl, r1, r4, lsr #30
   1af20:	andeq	sl, r1, r0, lsr pc
   1af24:	cmp	r4, r2
   1af28:	bne	1ae88 <__assert_fail@plt+0x9784>
   1af2c:	b	1ae1c <__assert_fail@plt+0x9718>
   1af30:	mov	r3, #2
   1af34:	ldr	fp, [sp, #100]	; 0x64
   1af38:	str	r3, [sp, #176]	; 0xb0
   1af3c:	ldr	sl, [sp, #104]	; 0x68
   1af40:	b	1a404 <__assert_fail@plt+0x8d00>
   1af44:	ldr	r2, [sp, #52]	; 0x34
   1af48:	mov	fp, r9
   1af4c:	ldr	r3, [sp, #60]	; 0x3c
   1af50:	and	r3, r3, r2
   1af54:	str	r3, [sp, #60]	; 0x3c
   1af58:	b	1a404 <__assert_fail@plt+0x8d00>
   1af5c:	cmp	sl, r4
   1af60:	movhi	r2, fp
   1af64:	bhi	1a2dc <__assert_fail@plt+0x8bd8>
   1af68:	mov	r2, r4
   1af6c:	b	1a2ec <__assert_fail@plt+0x8be8>
   1af70:	mov	r6, r3
   1af74:	mov	r5, #63	; 0x3f
   1af78:	b	1a3ac <__assert_fail@plt+0x8ca8>
   1af7c:	ldr	r8, [sp, #36]	; 0x24
   1af80:	ldr	r6, [sp, #100]	; 0x64
   1af84:	b	1a258 <__assert_fail@plt+0x8b54>
   1af88:	mov	fp, r9
   1af8c:	ldr	r8, [sp, #36]	; 0x24
   1af90:	ldr	r3, [sp, #52]	; 0x34
   1af94:	str	r3, [sp, #60]	; 0x3c
   1af98:	b	1a404 <__assert_fail@plt+0x8d00>
   1af9c:	ldr	r8, [sp, #36]	; 0x24
   1afa0:	ldr	r6, [sp, #100]	; 0x64
   1afa4:	b	1a0f0 <__assert_fail@plt+0x89ec>
   1afa8:	mov	r3, #0
   1afac:	add	r4, r4, #4
   1afb0:	mov	fp, r2
   1afb4:	mov	r6, r3
   1afb8:	mov	r5, #48	; 0x30
   1afbc:	b	1a248 <__assert_fail@plt+0x8b44>
   1afc0:	mov	r6, r3
   1afc4:	b	1aa44 <__assert_fail@plt+0x9340>
   1afc8:	mov	r3, #1
   1afcc:	movw	r2, #4884	; 0x1314
   1afd0:	movt	r2, #2
   1afd4:	mov	r4, r3
   1afd8:	mov	r9, sl
   1afdc:	str	r3, [sp, #32]
   1afe0:	str	sl, [sp, #44]	; 0x2c
   1afe4:	str	r3, [sp, #48]	; 0x30
   1afe8:	str	sl, [sp, #52]	; 0x34
   1afec:	str	r3, [sp, #56]	; 0x38
   1aff0:	str	r3, [sp, #60]	; 0x3c
   1aff4:	str	sl, [sp, #64]	; 0x40
   1aff8:	str	sl, [sp, #68]	; 0x44
   1affc:	str	r2, [sp, #72]	; 0x48
   1b000:	str	sl, [sp, #80]	; 0x50
   1b004:	str	sl, [sp, #84]	; 0x54
   1b008:	str	sl, [sp, #88]	; 0x58
   1b00c:	b	19afc <__assert_fail@plt+0x83f8>
   1b010:	mov	r3, #0
   1b014:	mov	r5, #48	; 0x30
   1b018:	mov	r6, r3
   1b01c:	b	1a248 <__assert_fail@plt+0x8b44>
   1b020:	cmp	sl, r4
   1b024:	mov	r5, #48	; 0x30
   1b028:	movhi	r3, #48	; 0x30
   1b02c:	strbhi	r3, [r9, r4]
   1b030:	add	r3, r2, #2
   1b034:	add	r4, r2, #3
   1b038:	cmp	sl, r3
   1b03c:	movhi	r1, #48	; 0x30
   1b040:	strbhi	r1, [r9, r3]
   1b044:	mov	r3, #0
   1b048:	b	1a324 <__assert_fail@plt+0x8c20>
   1b04c:	ldr	r3, [sp, #48]	; 0x30
   1b050:	str	r3, [sp, #40]	; 0x28
   1b054:	b	1a930 <__assert_fail@plt+0x922c>
   1b058:	ldr	r2, [sp, #28]
   1b05c:	ldrb	r2, [r2, r3]
   1b060:	sub	r1, r2, #33	; 0x21
   1b064:	cmp	r1, #29
   1b068:	ldrls	pc, [pc, r1, lsl #2]
   1b06c:	b	1a3a8 <__assert_fail@plt+0x8ca4>
   1b070:	andeq	fp, r1, r8, ror #1
   1b074:	andeq	sl, r1, r8, lsr #7
   1b078:	andeq	sl, r1, r8, lsr #7
   1b07c:	andeq	sl, r1, r8, lsr #7
   1b080:	andeq	sl, r1, r8, lsr #7
   1b084:	andeq	sl, r1, r8, lsr #7
   1b088:	andeq	fp, r1, r8, ror #1
   1b08c:	andeq	fp, r1, r8, ror #1
   1b090:	andeq	fp, r1, r8, ror #1
   1b094:	andeq	sl, r1, r8, lsr #7
   1b098:	andeq	sl, r1, r8, lsr #7
   1b09c:	andeq	sl, r1, r8, lsr #7
   1b0a0:	andeq	fp, r1, r8, ror #1
   1b0a4:	andeq	sl, r1, r8, lsr #7
   1b0a8:	andeq	fp, r1, r8, ror #1
   1b0ac:	andeq	sl, r1, r8, lsr #7
   1b0b0:	andeq	sl, r1, r8, lsr #7
   1b0b4:	andeq	sl, r1, r8, lsr #7
   1b0b8:	andeq	sl, r1, r8, lsr #7
   1b0bc:	andeq	sl, r1, r8, lsr #7
   1b0c0:	andeq	sl, r1, r8, lsr #7
   1b0c4:	andeq	sl, r1, r8, lsr #7
   1b0c8:	andeq	sl, r1, r8, lsr #7
   1b0cc:	andeq	sl, r1, r8, lsr #7
   1b0d0:	andeq	sl, r1, r8, lsr #7
   1b0d4:	andeq	sl, r1, r8, lsr #7
   1b0d8:	andeq	sl, r1, r8, lsr #7
   1b0dc:	andeq	fp, r1, r8, ror #1
   1b0e0:	andeq	fp, r1, r8, ror #1
   1b0e4:	andeq	fp, r1, r8, ror #1
   1b0e8:	ldr	r1, [sp, #44]	; 0x2c
   1b0ec:	cmp	r1, #0
   1b0f0:	bne	1b350 <__assert_fail@plt+0x9c4c>
   1b0f4:	cmp	sl, r4
   1b0f8:	mov	r7, r3
   1b0fc:	movhi	r1, #63	; 0x3f
   1b100:	mov	r5, r2
   1b104:	mov	r3, fp
   1b108:	strbhi	r1, [r9, r4]
   1b10c:	add	r1, r4, #1
   1b110:	cmp	sl, r1
   1b114:	movhi	r0, #34	; 0x22
   1b118:	strbhi	r0, [r9, r1]
   1b11c:	add	r1, r4, #2
   1b120:	cmp	sl, r1
   1b124:	movhi	r0, #34	; 0x22
   1b128:	strbhi	r0, [r9, r1]
   1b12c:	add	r1, r4, #3
   1b130:	add	r4, r4, #4
   1b134:	cmp	sl, r1
   1b138:	movhi	r0, #63	; 0x3f
   1b13c:	strbhi	r0, [r9, r1]
   1b140:	b	1a324 <__assert_fail@plt+0x8c20>
   1b144:	mov	fp, r9
   1b148:	b	1a404 <__assert_fail@plt+0x8d00>
   1b14c:	ldr	r3, [sp, #188]	; 0xbc
   1b150:	ldrb	r3, [r3]
   1b154:	cmp	r3, #0
   1b158:	beq	19a94 <__assert_fail@plt+0x8390>
   1b15c:	ldr	r2, [sp, #188]	; 0xbc
   1b160:	cmp	sl, r4
   1b164:	bls	1b184 <__assert_fail@plt+0x9a80>
   1b168:	strb	r3, [fp, r4]
   1b16c:	add	r4, r4, #1
   1b170:	ldrb	r3, [r2, #1]!
   1b174:	cmp	r3, #0
   1b178:	beq	19a94 <__assert_fail@plt+0x8390>
   1b17c:	cmp	sl, r4
   1b180:	bhi	1b168 <__assert_fail@plt+0x9a64>
   1b184:	ldrb	r3, [r2, #1]!
   1b188:	add	r4, r4, #1
   1b18c:	cmp	r3, #0
   1b190:	bne	1b160 <__assert_fail@plt+0x9a5c>
   1b194:	b	19a94 <__assert_fail@plt+0x8390>
   1b198:	add	r9, sp, #100	; 0x64
   1b19c:	mov	r0, r5
   1b1a0:	ldr	r2, [sp, #60]	; 0x3c
   1b1a4:	mov	r6, #0
   1b1a8:	ldm	r9, {r9, sl, fp}
   1b1ac:	ldr	r5, [sp, #112]	; 0x70
   1b1b0:	ldr	r4, [sp, #116]	; 0x74
   1b1b4:	b	1ae64 <__assert_fail@plt+0x9760>
   1b1b8:	cmp	r4, r8
   1b1bc:	add	r9, sp, #100	; 0x64
   1b1c0:	mov	r1, r4
   1b1c4:	mov	r2, fp
   1b1c8:	ldm	r9, {r9, sl, fp}
   1b1cc:	mov	r3, r5
   1b1d0:	mov	r0, r5
   1b1d4:	ldr	r5, [sp, #112]	; 0x70
   1b1d8:	ldr	r4, [sp, #116]	; 0x74
   1b1dc:	bcs	1b210 <__assert_fail@plt+0x9b0c>
   1b1e0:	ldrb	r6, [r2]
   1b1e4:	cmp	r6, #0
   1b1e8:	bne	1b1fc <__assert_fail@plt+0x9af8>
   1b1ec:	b	1b348 <__assert_fail@plt+0x9c44>
   1b1f0:	ldrb	r6, [r2, #1]!
   1b1f4:	cmp	r6, #0
   1b1f8:	beq	1b2e0 <__assert_fail@plt+0x9bdc>
   1b1fc:	add	r3, r3, #1
   1b200:	add	r1, r7, r3
   1b204:	cmp	r8, r1
   1b208:	bhi	1b1f0 <__assert_fail@plt+0x9aec>
   1b20c:	mov	r0, r3
   1b210:	mov	r6, #0
   1b214:	ldr	r2, [sp, #60]	; 0x3c
   1b218:	b	1ae64 <__assert_fail@plt+0x9760>
   1b21c:	mov	r3, #1
   1b220:	mov	r4, #0
   1b224:	mov	r9, r4
   1b228:	str	r3, [sp, #32]
   1b22c:	str	r3, [sp, #44]	; 0x2c
   1b230:	str	r3, [sp, #48]	; 0x30
   1b234:	str	r4, [sp, #52]	; 0x34
   1b238:	str	r3, [sp, #56]	; 0x38
   1b23c:	str	r3, [sp, #60]	; 0x3c
   1b240:	str	r3, [sp, #88]	; 0x58
   1b244:	movw	r3, #4884	; 0x1314
   1b248:	movt	r3, #2
   1b24c:	str	r4, [sp, #64]	; 0x40
   1b250:	str	r4, [sp, #68]	; 0x44
   1b254:	str	r3, [sp, #72]	; 0x48
   1b258:	str	r4, [sp, #80]	; 0x50
   1b25c:	str	r4, [sp, #84]	; 0x54
   1b260:	b	19afc <__assert_fail@plt+0x83f8>
   1b264:	mov	fp, r9
   1b268:	b	1a418 <__assert_fail@plt+0x8d14>
   1b26c:	ldr	r3, [sp, #48]	; 0x30
   1b270:	b	1ad8c <__assert_fail@plt+0x9688>
   1b274:	mov	r2, r3
   1b278:	ldr	r3, [sp, #72]	; 0x48
   1b27c:	cmp	r3, #0
   1b280:	moveq	r2, #0
   1b284:	andne	r2, r2, #1
   1b288:	cmp	r2, #0
   1b28c:	beq	1b2bc <__assert_fail@plt+0x9bb8>
   1b290:	mov	r2, r3
   1b294:	ldrb	r3, [r3]
   1b298:	cmp	r3, #0
   1b29c:	beq	1b2bc <__assert_fail@plt+0x9bb8>
   1b2a0:	cmp	sl, r4
   1b2a4:	bls	1b2cc <__assert_fail@plt+0x9bc8>
   1b2a8:	strb	r3, [fp, r4]
   1b2ac:	add	r4, r4, #1
   1b2b0:	ldrb	r3, [r2, #1]!
   1b2b4:	cmp	r3, #0
   1b2b8:	bne	1b2a0 <__assert_fail@plt+0x9b9c>
   1b2bc:	cmp	sl, r4
   1b2c0:	movhi	r3, #0
   1b2c4:	strbhi	r3, [fp, r4]
   1b2c8:	b	1a454 <__assert_fail@plt+0x8d50>
   1b2cc:	ldrb	r3, [r2, #1]!
   1b2d0:	add	r4, r4, #1
   1b2d4:	cmp	r3, #0
   1b2d8:	bne	1b2a0 <__assert_fail@plt+0x9b9c>
   1b2dc:	b	1b2bc <__assert_fail@plt+0x9bb8>
   1b2e0:	mov	r0, r3
   1b2e4:	ldr	r2, [sp, #60]	; 0x3c
   1b2e8:	b	1ae64 <__assert_fail@plt+0x9760>
   1b2ec:	mov	ip, #5
   1b2f0:	mov	r3, r8
   1b2f4:	ldr	r1, [sp, #84]	; 0x54
   1b2f8:	str	ip, [sp]
   1b2fc:	ldr	r2, [sp, #180]	; 0xb4
   1b300:	ldr	ip, [sp, #188]	; 0xbc
   1b304:	ldr	r0, [sp, #184]	; 0xb8
   1b308:	str	r2, [sp, #4]
   1b30c:	ldr	r2, [sp, #28]
   1b310:	str	ip, [sp, #12]
   1b314:	ldr	ip, [sp, #192]	; 0xc0
   1b318:	str	r0, [sp, #8]
   1b31c:	mov	r0, fp
   1b320:	str	ip, [sp, #16]
   1b324:	bl	199d8 <__assert_fail@plt+0x82d4>
   1b328:	mov	r4, r0
   1b32c:	b	1a454 <__assert_fail@plt+0x8d50>
   1b330:	mov	r6, r3
   1b334:	str	r3, [sp, #40]	; 0x28
   1b338:	b	1a3c4 <__assert_fail@plt+0x8cc0>
   1b33c:	mov	r3, #2
   1b340:	str	r3, [sp, #176]	; 0xb0
   1b344:	b	1a404 <__assert_fail@plt+0x8d00>
   1b348:	ldr	r2, [sp, #60]	; 0x3c
   1b34c:	b	1ae64 <__assert_fail@plt+0x9760>
   1b350:	mov	r3, #5
   1b354:	mov	fp, r9
   1b358:	str	r3, [sp, #176]	; 0xb0
   1b35c:	b	1a418 <__assert_fail@plt+0x8d14>
   1b360:	mov	r1, #1
   1b364:	mov	r9, #0
   1b368:	mov	r3, r9
   1b36c:	mov	r2, r9
   1b370:	str	r1, [sp, #32]
   1b374:	str	sl, [sp, #84]	; 0x54
   1b378:	b	1a1a0 <__assert_fail@plt+0x8a9c>
   1b37c:	mov	r3, #0
   1b380:	mov	r2, #1
   1b384:	mov	r9, r3
   1b388:	mov	r4, r3
   1b38c:	str	r2, [sp, #32]
   1b390:	strd	r2, [sp, #44]	; 0x2c
   1b394:	strd	r2, [sp, #56]	; 0x38
   1b398:	str	r3, [sp, #80]	; 0x50
   1b39c:	str	r3, [sp, #84]	; 0x54
   1b3a0:	str	r3, [sp, #88]	; 0x58
   1b3a4:	movw	r3, #9476	; 0x2504
   1b3a8:	movt	r3, #2
   1b3ac:	str	r2, [sp, #52]	; 0x34
   1b3b0:	str	r2, [sp, #64]	; 0x40
   1b3b4:	str	r2, [sp, #68]	; 0x44
   1b3b8:	str	r3, [sp, #72]	; 0x48
   1b3bc:	b	19afc <__assert_fail@plt+0x83f8>
   1b3c0:	bl	116e0 <abort@plt>
   1b3c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b3c8:	mov	r4, r0
   1b3cc:	mov	r5, r3
   1b3d0:	strd	r6, [sp, #8]
   1b3d4:	movw	r7, #13020	; 0x32dc
   1b3d8:	movt	r7, #3
   1b3dc:	strd	r8, [sp, #16]
   1b3e0:	strd	sl, [sp, #24]
   1b3e4:	mov	sl, r1
   1b3e8:	mov	fp, r2
   1b3ec:	str	lr, [sp, #32]
   1b3f0:	sub	sp, sp, #60	; 0x3c
   1b3f4:	bl	1156c <__errno_location@plt>
   1b3f8:	mov	r8, r0
   1b3fc:	cmn	r4, #-2147483647	; 0x80000001
   1b400:	ldr	r6, [r7]
   1b404:	movne	r0, #0
   1b408:	moveq	r0, #1
   1b40c:	ldr	r3, [r8]
   1b410:	orrs	r0, r0, r4, lsr #31
   1b414:	str	r3, [sp, #28]
   1b418:	bne	1b5a8 <__assert_fail@plt+0x9ea4>
   1b41c:	ldr	r3, [r7, #4]
   1b420:	cmp	r3, r4
   1b424:	bgt	1b484 <__assert_fail@plt+0x9d80>
   1b428:	add	r1, r7, #8
   1b42c:	sub	r2, r4, r3
   1b430:	str	r3, [sp, #52]	; 0x34
   1b434:	cmp	r6, r1
   1b438:	add	r2, r2, #1
   1b43c:	beq	1b580 <__assert_fail@plt+0x9e7c>
   1b440:	mov	r1, #8
   1b444:	mov	r0, r6
   1b448:	mvn	r3, #-2147483648	; 0x80000000
   1b44c:	str	r1, [sp]
   1b450:	add	r1, sp, #52	; 0x34
   1b454:	bl	1df60 <__assert_fail@plt+0xc85c>
   1b458:	mov	r6, r0
   1b45c:	str	r0, [r7]
   1b460:	ldr	r0, [r7, #4]
   1b464:	mov	r1, #0
   1b468:	ldr	r2, [sp, #52]	; 0x34
   1b46c:	sub	r2, r2, r0
   1b470:	add	r0, r6, r0, lsl #3
   1b474:	lsl	r2, r2, #3
   1b478:	bl	11590 <memset@plt>
   1b47c:	ldr	r3, [sp, #52]	; 0x34
   1b480:	str	r3, [r7, #4]
   1b484:	ldr	r1, [r5, #4]
   1b488:	add	r0, r6, r4, lsl #3
   1b48c:	add	ip, r5, #8
   1b490:	mov	r3, fp
   1b494:	mov	r2, sl
   1b498:	ldr	r7, [r0, #4]
   1b49c:	str	r0, [sp, #36]	; 0x24
   1b4a0:	str	ip, [sp, #40]	; 0x28
   1b4a4:	orr	r0, r1, #1
   1b4a8:	ldr	r9, [r6, r4, lsl #3]
   1b4ac:	str	ip, [sp, #8]
   1b4b0:	ldr	lr, [r5, #44]	; 0x2c
   1b4b4:	str	r0, [sp, #4]
   1b4b8:	ldr	ip, [r5]
   1b4bc:	mov	r1, r9
   1b4c0:	str	ip, [sp, #32]
   1b4c4:	ldr	ip, [r5, #40]	; 0x28
   1b4c8:	str	ip, [sp, #12]
   1b4cc:	ldr	ip, [sp, #32]
   1b4d0:	str	lr, [sp, #16]
   1b4d4:	str	r0, [sp, #44]	; 0x2c
   1b4d8:	mov	r0, r7
   1b4dc:	str	ip, [sp]
   1b4e0:	bl	199d8 <__assert_fail@plt+0x82d4>
   1b4e4:	cmp	r9, r0
   1b4e8:	bhi	1b558 <__assert_fail@plt+0x9e54>
   1b4ec:	add	r9, r0, #1
   1b4f0:	movw	r3, #13252	; 0x33c4
   1b4f4:	movt	r3, #3
   1b4f8:	cmp	r7, r3
   1b4fc:	str	r9, [r6, r4, lsl #3]
   1b500:	beq	1b50c <__assert_fail@plt+0x9e08>
   1b504:	mov	r0, r7
   1b508:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1b50c:	mov	r0, r9
   1b510:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1b514:	ldr	ip, [r5]
   1b518:	mov	r3, fp
   1b51c:	mov	r2, sl
   1b520:	mov	r1, r9
   1b524:	mov	r7, r0
   1b528:	ldr	lr, [sp, #36]	; 0x24
   1b52c:	ldr	r4, [r5, #40]	; 0x28
   1b530:	str	r0, [lr, #4]
   1b534:	ldr	lr, [r5, #44]	; 0x2c
   1b538:	str	ip, [sp]
   1b53c:	ldr	ip, [sp, #44]	; 0x2c
   1b540:	str	ip, [sp, #4]
   1b544:	ldr	ip, [sp, #40]	; 0x28
   1b548:	str	r4, [sp, #12]
   1b54c:	str	lr, [sp, #16]
   1b550:	str	ip, [sp, #8]
   1b554:	bl	199d8 <__assert_fail@plt+0x82d4>
   1b558:	ldr	r3, [sp, #28]
   1b55c:	mov	r0, r7
   1b560:	str	r3, [r8]
   1b564:	add	sp, sp, #60	; 0x3c
   1b568:	ldrd	r4, [sp]
   1b56c:	ldrd	r6, [sp, #8]
   1b570:	ldrd	r8, [sp, #16]
   1b574:	ldrd	sl, [sp, #24]
   1b578:	add	sp, sp, #32
   1b57c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b580:	mov	r1, #8
   1b584:	mvn	r3, #-2147483648	; 0x80000000
   1b588:	str	r1, [sp]
   1b58c:	add	r1, sp, #52	; 0x34
   1b590:	bl	1df60 <__assert_fail@plt+0xc85c>
   1b594:	ldrd	r2, [r7, #8]
   1b598:	mov	r6, r0
   1b59c:	str	r0, [r7]
   1b5a0:	strd	r2, [r0]
   1b5a4:	b	1b460 <__assert_fail@plt+0x9d5c>
   1b5a8:	bl	116e0 <abort@plt>
   1b5ac:	strd	r4, [sp, #-16]!
   1b5b0:	mov	r5, r0
   1b5b4:	str	r6, [sp, #8]
   1b5b8:	str	lr, [sp, #12]
   1b5bc:	bl	1156c <__errno_location@plt>
   1b5c0:	mov	r4, r0
   1b5c4:	cmp	r5, #0
   1b5c8:	ldr	r0, [pc, #32]	; 1b5f0 <__assert_fail@plt+0x9eec>
   1b5cc:	mov	r1, #48	; 0x30
   1b5d0:	movne	r0, r5
   1b5d4:	ldr	r6, [r4]
   1b5d8:	bl	1e100 <__assert_fail@plt+0xc9fc>
   1b5dc:	str	r6, [r4]
   1b5e0:	ldrd	r4, [sp]
   1b5e4:	ldr	r6, [sp, #8]
   1b5e8:	add	sp, sp, #12
   1b5ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5f0:	andeq	r3, r3, r4, asr #9
   1b5f4:	ldr	r3, [pc, #12]	; 1b608 <__assert_fail@plt+0x9f04>
   1b5f8:	cmp	r0, #0
   1b5fc:	moveq	r0, r3
   1b600:	ldr	r0, [r0]
   1b604:	bx	lr
   1b608:	andeq	r3, r3, r4, asr #9
   1b60c:	ldr	r3, [pc, #12]	; 1b620 <__assert_fail@plt+0x9f1c>
   1b610:	cmp	r0, #0
   1b614:	moveq	r0, r3
   1b618:	str	r1, [r0]
   1b61c:	bx	lr
   1b620:	andeq	r3, r3, r4, asr #9
   1b624:	ldr	r3, [pc, #52]	; 1b660 <__assert_fail@plt+0x9f5c>
   1b628:	cmp	r0, #0
   1b62c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b630:	lsr	lr, r1, #5
   1b634:	and	r1, r1, #31
   1b638:	moveq	r0, r3
   1b63c:	add	r3, r0, #8
   1b640:	ldr	ip, [r3, lr, lsl #2]
   1b644:	lsr	r0, ip, r1
   1b648:	eor	r2, r2, r0
   1b64c:	and	r0, r0, #1
   1b650:	and	r2, r2, #1
   1b654:	eor	r1, ip, r2, lsl r1
   1b658:	str	r1, [r3, lr, lsl #2]
   1b65c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b660:	andeq	r3, r3, r4, asr #9
   1b664:	ldr	r3, [pc, #16]	; 1b67c <__assert_fail@plt+0x9f78>
   1b668:	cmp	r0, #0
   1b66c:	movne	r3, r0
   1b670:	ldr	r0, [r3, #4]
   1b674:	str	r1, [r3, #4]
   1b678:	bx	lr
   1b67c:	andeq	r3, r3, r4, asr #9
   1b680:	ldr	r3, [pc, #48]	; 1b6b8 <__assert_fail@plt+0x9fb4>
   1b684:	cmp	r0, #0
   1b688:	mov	ip, #10
   1b68c:	moveq	r0, r3
   1b690:	cmp	r2, #0
   1b694:	cmpne	r1, #0
   1b698:	str	ip, [r0]
   1b69c:	beq	1b6ac <__assert_fail@plt+0x9fa8>
   1b6a0:	str	r1, [r0, #40]	; 0x28
   1b6a4:	str	r2, [r0, #44]	; 0x2c
   1b6a8:	bx	lr
   1b6ac:	str	r4, [sp, #-8]!
   1b6b0:	str	lr, [sp, #4]
   1b6b4:	bl	116e0 <abort@plt>
   1b6b8:	andeq	r3, r3, r4, asr #9
   1b6bc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1b6c0:	strd	r6, [sp, #8]
   1b6c4:	mov	r7, r0
   1b6c8:	mov	r6, r1
   1b6cc:	strd	r8, [sp, #16]
   1b6d0:	mov	r8, r2
   1b6d4:	mov	r9, r3
   1b6d8:	str	lr, [sp, #24]
   1b6dc:	sub	sp, sp, #28
   1b6e0:	ldr	r4, [sp, #56]	; 0x38
   1b6e4:	ldr	ip, [pc, #104]	; 1b754 <__assert_fail@plt+0xa050>
   1b6e8:	cmp	r4, #0
   1b6ec:	moveq	r4, ip
   1b6f0:	bl	1156c <__errno_location@plt>
   1b6f4:	ldr	ip, [r4, #44]	; 0x2c
   1b6f8:	mov	r5, r0
   1b6fc:	mov	r1, r6
   1b700:	add	lr, r4, #8
   1b704:	mov	r3, r9
   1b708:	ldr	r6, [r5]
   1b70c:	mov	r2, r8
   1b710:	mov	r0, r7
   1b714:	str	ip, [sp, #16]
   1b718:	ldr	ip, [r4, #40]	; 0x28
   1b71c:	str	lr, [sp, #8]
   1b720:	str	ip, [sp, #12]
   1b724:	ldr	ip, [r4, #4]
   1b728:	str	ip, [sp, #4]
   1b72c:	ldr	ip, [r4]
   1b730:	str	ip, [sp]
   1b734:	bl	199d8 <__assert_fail@plt+0x82d4>
   1b738:	str	r6, [r5]
   1b73c:	add	sp, sp, #28
   1b740:	ldrd	r4, [sp]
   1b744:	ldrd	r6, [sp, #8]
   1b748:	ldrd	r8, [sp, #16]
   1b74c:	add	sp, sp, #24
   1b750:	pop	{pc}		; (ldr pc, [sp], #4)
   1b754:	andeq	r3, r3, r4, asr #9
   1b758:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b75c:	cmp	r2, #0
   1b760:	ldr	r4, [pc, #192]	; 1b828 <__assert_fail@plt+0xa124>
   1b764:	movne	r4, r2
   1b768:	strd	r6, [sp, #8]
   1b76c:	strd	r8, [sp, #16]
   1b770:	mov	r9, r1
   1b774:	mov	r8, r0
   1b778:	strd	sl, [sp, #24]
   1b77c:	str	lr, [sp, #32]
   1b780:	sub	sp, sp, #36	; 0x24
   1b784:	bl	1156c <__errno_location@plt>
   1b788:	ldr	r5, [r4, #4]
   1b78c:	mov	r6, r0
   1b790:	add	r7, r4, #8
   1b794:	mov	r1, #0
   1b798:	mov	r3, r9
   1b79c:	ldr	ip, [r4, #44]	; 0x2c
   1b7a0:	mov	r2, r8
   1b7a4:	mov	r0, r1
   1b7a8:	ldr	sl, [r6]
   1b7ac:	orr	r5, r5, #1
   1b7b0:	str	ip, [sp, #16]
   1b7b4:	ldr	ip, [r4, #40]	; 0x28
   1b7b8:	stmib	sp, {r5, r7, ip}
   1b7bc:	ldr	ip, [r4]
   1b7c0:	str	ip, [sp]
   1b7c4:	bl	199d8 <__assert_fail@plt+0x82d4>
   1b7c8:	add	r1, r0, #1
   1b7cc:	mov	r0, r1
   1b7d0:	str	r1, [sp, #28]
   1b7d4:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1b7d8:	ldr	ip, [r4, #44]	; 0x2c
   1b7dc:	mov	fp, r0
   1b7e0:	mov	r3, r9
   1b7e4:	mov	r2, r8
   1b7e8:	ldr	r1, [sp, #28]
   1b7ec:	str	ip, [sp, #16]
   1b7f0:	ldr	ip, [r4, #40]	; 0x28
   1b7f4:	stmib	sp, {r5, r7, ip}
   1b7f8:	ldr	ip, [r4]
   1b7fc:	str	ip, [sp]
   1b800:	bl	199d8 <__assert_fail@plt+0x82d4>
   1b804:	mov	r0, fp
   1b808:	str	sl, [r6]
   1b80c:	add	sp, sp, #36	; 0x24
   1b810:	ldrd	r4, [sp]
   1b814:	ldrd	r6, [sp, #8]
   1b818:	ldrd	r8, [sp, #16]
   1b81c:	ldrd	sl, [sp, #24]
   1b820:	add	sp, sp, #32
   1b824:	pop	{pc}		; (ldr pc, [sp], #4)
   1b828:	andeq	r3, r3, r4, asr #9
   1b82c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b830:	cmp	r3, #0
   1b834:	ldr	r4, [pc, #220]	; 1b918 <__assert_fail@plt+0xa214>
   1b838:	movne	r4, r3
   1b83c:	strd	r6, [sp, #8]
   1b840:	mov	r6, r2
   1b844:	strd	r8, [sp, #16]
   1b848:	mov	r9, r0
   1b84c:	strd	sl, [sp, #24]
   1b850:	mov	sl, r1
   1b854:	str	lr, [sp, #32]
   1b858:	sub	sp, sp, #44	; 0x2c
   1b85c:	bl	1156c <__errno_location@plt>
   1b860:	ldr	r5, [r4, #4]
   1b864:	mov	r7, r0
   1b868:	mov	r1, #0
   1b86c:	add	r8, r4, #8
   1b870:	mov	r3, sl
   1b874:	ldr	ip, [r4, #44]	; 0x2c
   1b878:	mov	r2, r9
   1b87c:	mov	r0, r1
   1b880:	ldr	lr, [r7]
   1b884:	cmp	r6, r1
   1b888:	orreq	r5, r5, #1
   1b88c:	str	ip, [sp, #16]
   1b890:	ldr	ip, [r4, #40]	; 0x28
   1b894:	stmib	sp, {r5, r8, ip}
   1b898:	ldr	ip, [r4]
   1b89c:	str	lr, [sp, #28]
   1b8a0:	str	ip, [sp]
   1b8a4:	bl	199d8 <__assert_fail@plt+0x82d4>
   1b8a8:	add	r1, r0, #1
   1b8ac:	mov	fp, r0
   1b8b0:	mov	r0, r1
   1b8b4:	str	r1, [sp, #36]	; 0x24
   1b8b8:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1b8bc:	ldr	ip, [r4, #44]	; 0x2c
   1b8c0:	mov	r3, sl
   1b8c4:	mov	r2, r9
   1b8c8:	ldr	r1, [sp, #36]	; 0x24
   1b8cc:	str	ip, [sp, #16]
   1b8d0:	ldr	ip, [r4, #40]	; 0x28
   1b8d4:	str	r0, [sp, #32]
   1b8d8:	stmib	sp, {r5, r8, ip}
   1b8dc:	ldr	ip, [r4]
   1b8e0:	str	ip, [sp]
   1b8e4:	bl	199d8 <__assert_fail@plt+0x82d4>
   1b8e8:	ldr	lr, [sp, #28]
   1b8ec:	cmp	r6, #0
   1b8f0:	ldr	r0, [sp, #32]
   1b8f4:	str	lr, [r7]
   1b8f8:	strne	fp, [r6]
   1b8fc:	add	sp, sp, #44	; 0x2c
   1b900:	ldrd	r4, [sp]
   1b904:	ldrd	r6, [sp, #8]
   1b908:	ldrd	r8, [sp, #16]
   1b90c:	ldrd	sl, [sp, #24]
   1b910:	add	sp, sp, #32
   1b914:	pop	{pc}		; (ldr pc, [sp], #4)
   1b918:	andeq	r3, r3, r4, asr #9
   1b91c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b920:	movw	r5, #13020	; 0x32dc
   1b924:	movt	r5, #3
   1b928:	ldr	r3, [r5, #4]
   1b92c:	strd	r6, [sp, #8]
   1b930:	str	r8, [sp, #16]
   1b934:	str	lr, [sp, #20]
   1b938:	ldr	r7, [r5]
   1b93c:	cmp	r3, #1
   1b940:	ble	1b964 <__assert_fail@plt+0xa260>
   1b944:	mov	r4, #1
   1b948:	add	r6, r7, #4
   1b94c:	ldr	r0, [r6, r4, lsl #3]
   1b950:	add	r4, r4, #1
   1b954:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1b958:	ldr	r3, [r5, #4]
   1b95c:	cmp	r3, r4
   1b960:	bgt	1b94c <__assert_fail@plt+0xa248>
   1b964:	ldr	r0, [r7, #4]
   1b968:	movw	r4, #13252	; 0x33c4
   1b96c:	movt	r4, #3
   1b970:	cmp	r0, r4
   1b974:	beq	1b988 <__assert_fail@plt+0xa284>
   1b978:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1b97c:	mov	r3, #256	; 0x100
   1b980:	str	r3, [r5, #8]
   1b984:	str	r4, [r5, #12]
   1b988:	ldr	r4, [pc, #44]	; 1b9bc <__assert_fail@plt+0xa2b8>
   1b98c:	cmp	r7, r4
   1b990:	beq	1b9a0 <__assert_fail@plt+0xa29c>
   1b994:	mov	r0, r7
   1b998:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1b99c:	str	r4, [r5]
   1b9a0:	mov	r3, #1
   1b9a4:	ldrd	r6, [sp, #8]
   1b9a8:	str	r3, [r5, #4]
   1b9ac:	ldrd	r4, [sp]
   1b9b0:	ldr	r8, [sp, #16]
   1b9b4:	add	sp, sp, #20
   1b9b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9bc:	andeq	r3, r3, r4, ror #5
   1b9c0:	ldr	r3, [pc, #4]	; 1b9cc <__assert_fail@plt+0xa2c8>
   1b9c4:	mvn	r2, #0
   1b9c8:	b	1b3c4 <__assert_fail@plt+0x9cc0>
   1b9cc:	andeq	r3, r3, r4, asr #9
   1b9d0:	ldr	r3, [pc]	; 1b9d8 <__assert_fail@plt+0xa2d4>
   1b9d4:	b	1b3c4 <__assert_fail@plt+0x9cc0>
   1b9d8:	andeq	r3, r3, r4, asr #9
   1b9dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b9e0:	movw	r4, #13020	; 0x32dc
   1b9e4:	movt	r4, #3
   1b9e8:	strd	r6, [sp, #8]
   1b9ec:	strd	r8, [sp, #16]
   1b9f0:	strd	sl, [sp, #24]
   1b9f4:	mov	sl, r0
   1b9f8:	str	lr, [sp, #32]
   1b9fc:	sub	sp, sp, #44	; 0x2c
   1ba00:	bl	1156c <__errno_location@plt>
   1ba04:	ldr	r3, [r0]
   1ba08:	mov	r8, r0
   1ba0c:	ldr	r2, [r4, #4]
   1ba10:	ldr	r5, [r4]
   1ba14:	str	r3, [sp, #28]
   1ba18:	cmp	r2, #0
   1ba1c:	bgt	1ba78 <__assert_fail@plt+0xa374>
   1ba20:	add	r3, r4, #8
   1ba24:	str	r2, [sp, #36]	; 0x24
   1ba28:	rsb	r2, r2, #1
   1ba2c:	cmp	r5, r3
   1ba30:	beq	1bb44 <__assert_fail@plt+0xa440>
   1ba34:	mov	r1, #8
   1ba38:	mov	r0, r5
   1ba3c:	mvn	r3, #-2147483648	; 0x80000000
   1ba40:	str	r1, [sp]
   1ba44:	add	r1, sp, #36	; 0x24
   1ba48:	bl	1df60 <__assert_fail@plt+0xc85c>
   1ba4c:	mov	r5, r0
   1ba50:	str	r0, [r4]
   1ba54:	ldr	r0, [r4, #4]
   1ba58:	mov	r1, #0
   1ba5c:	ldr	r2, [sp, #36]	; 0x24
   1ba60:	sub	r2, r2, r0
   1ba64:	add	r0, r5, r0, lsl #3
   1ba68:	lsl	r2, r2, #3
   1ba6c:	bl	11590 <memset@plt>
   1ba70:	ldr	r3, [sp, #36]	; 0x24
   1ba74:	str	r3, [r4, #4]
   1ba78:	movw	r4, #13252	; 0x33c4
   1ba7c:	movt	r4, #3
   1ba80:	ldr	r9, [r5]
   1ba84:	add	fp, r4, #264	; 0x108
   1ba88:	mvn	r3, #0
   1ba8c:	ldr	r7, [r4, #260]	; 0x104
   1ba90:	mov	r2, sl
   1ba94:	ldr	r6, [r5, #4]
   1ba98:	str	fp, [sp, #8]
   1ba9c:	mov	r1, r9
   1baa0:	ldr	ip, [r4, #256]	; 0x100
   1baa4:	orr	r7, r7, #1
   1baa8:	ldr	lr, [r4, #300]	; 0x12c
   1baac:	mov	r0, r6
   1bab0:	str	ip, [sp]
   1bab4:	str	r7, [sp, #4]
   1bab8:	str	lr, [sp, #16]
   1babc:	ldr	ip, [r4, #296]	; 0x128
   1bac0:	str	ip, [sp, #12]
   1bac4:	bl	199d8 <__assert_fail@plt+0x82d4>
   1bac8:	cmp	r9, r0
   1bacc:	bhi	1bb1c <__assert_fail@plt+0xa418>
   1bad0:	add	r9, r0, #1
   1bad4:	cmp	r6, r4
   1bad8:	str	r9, [r5]
   1badc:	beq	1bae8 <__assert_fail@plt+0xa3e4>
   1bae0:	mov	r0, r6
   1bae4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1bae8:	mov	r0, r9
   1baec:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1baf0:	ldr	r3, [r4, #256]	; 0x100
   1baf4:	mov	r2, sl
   1baf8:	mov	r1, r9
   1bafc:	mov	r6, r0
   1bb00:	ldr	lr, [r4, #296]	; 0x128
   1bb04:	ldr	ip, [r4, #300]	; 0x12c
   1bb08:	str	r0, [r5, #4]
   1bb0c:	stm	sp, {r3, r7, fp, lr}
   1bb10:	mvn	r3, #0
   1bb14:	str	ip, [sp, #16]
   1bb18:	bl	199d8 <__assert_fail@plt+0x82d4>
   1bb1c:	ldr	r3, [sp, #28]
   1bb20:	mov	r0, r6
   1bb24:	str	r3, [r8]
   1bb28:	add	sp, sp, #44	; 0x2c
   1bb2c:	ldrd	r4, [sp]
   1bb30:	ldrd	r6, [sp, #8]
   1bb34:	ldrd	r8, [sp, #16]
   1bb38:	ldrd	sl, [sp, #24]
   1bb3c:	add	sp, sp, #32
   1bb40:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb44:	mov	r0, #8
   1bb48:	mvn	r3, #-2147483648	; 0x80000000
   1bb4c:	add	r1, sp, #36	; 0x24
   1bb50:	str	r0, [sp]
   1bb54:	mov	r0, #0
   1bb58:	bl	1df60 <__assert_fail@plt+0xc85c>
   1bb5c:	ldrd	r2, [r4, #8]
   1bb60:	mov	r5, r0
   1bb64:	str	r0, [r4]
   1bb68:	strd	r2, [r0]
   1bb6c:	b	1ba54 <__assert_fail@plt+0xa350>
   1bb70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bb74:	movw	r4, #13020	; 0x32dc
   1bb78:	movt	r4, #3
   1bb7c:	strd	r6, [sp, #8]
   1bb80:	strd	r8, [sp, #16]
   1bb84:	strd	sl, [sp, #24]
   1bb88:	mov	sl, r0
   1bb8c:	mov	fp, r1
   1bb90:	str	lr, [sp, #32]
   1bb94:	sub	sp, sp, #44	; 0x2c
   1bb98:	bl	1156c <__errno_location@plt>
   1bb9c:	ldr	r3, [r0]
   1bba0:	mov	r8, r0
   1bba4:	ldr	r2, [r4, #4]
   1bba8:	ldr	r5, [r4]
   1bbac:	str	r3, [sp, #28]
   1bbb0:	cmp	r2, #0
   1bbb4:	bgt	1bc10 <__assert_fail@plt+0xa50c>
   1bbb8:	add	r3, r4, #8
   1bbbc:	str	r2, [sp, #36]	; 0x24
   1bbc0:	rsb	r2, r2, #1
   1bbc4:	cmp	r5, r3
   1bbc8:	beq	1bcec <__assert_fail@plt+0xa5e8>
   1bbcc:	mov	r1, #8
   1bbd0:	mov	r0, r5
   1bbd4:	mvn	r3, #-2147483648	; 0x80000000
   1bbd8:	str	r1, [sp]
   1bbdc:	add	r1, sp, #36	; 0x24
   1bbe0:	bl	1df60 <__assert_fail@plt+0xc85c>
   1bbe4:	mov	r5, r0
   1bbe8:	str	r0, [r4]
   1bbec:	ldr	r0, [r4, #4]
   1bbf0:	mov	r1, #0
   1bbf4:	ldr	r2, [sp, #36]	; 0x24
   1bbf8:	sub	r2, r2, r0
   1bbfc:	add	r0, r5, r0, lsl #3
   1bc00:	lsl	r2, r2, #3
   1bc04:	bl	11590 <memset@plt>
   1bc08:	ldr	r3, [sp, #36]	; 0x24
   1bc0c:	str	r3, [r4, #4]
   1bc10:	movw	r4, #13252	; 0x33c4
   1bc14:	movt	r4, #3
   1bc18:	ldr	r9, [r5]
   1bc1c:	add	r0, r4, #264	; 0x108
   1bc20:	mov	r3, fp
   1bc24:	ldr	r7, [r4, #260]	; 0x104
   1bc28:	mov	r2, sl
   1bc2c:	ldr	r6, [r5, #4]
   1bc30:	str	r0, [sp, #8]
   1bc34:	mov	r1, r9
   1bc38:	ldr	ip, [r4, #256]	; 0x100
   1bc3c:	orr	r7, r7, #1
   1bc40:	ldr	lr, [r4, #300]	; 0x12c
   1bc44:	mov	r0, r6
   1bc48:	str	ip, [sp]
   1bc4c:	str	r7, [sp, #4]
   1bc50:	str	lr, [sp, #16]
   1bc54:	ldr	ip, [r4, #296]	; 0x128
   1bc58:	str	ip, [sp, #12]
   1bc5c:	bl	199d8 <__assert_fail@plt+0x82d4>
   1bc60:	cmp	r9, r0
   1bc64:	bhi	1bcc4 <__assert_fail@plt+0xa5c0>
   1bc68:	add	r9, r0, #1
   1bc6c:	cmp	r6, r4
   1bc70:	str	r9, [r5]
   1bc74:	beq	1bc80 <__assert_fail@plt+0xa57c>
   1bc78:	mov	r0, r6
   1bc7c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1bc80:	mov	r0, r9
   1bc84:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1bc88:	ldr	ip, [r4, #256]	; 0x100
   1bc8c:	mov	r1, r9
   1bc90:	mov	r3, fp
   1bc94:	mov	r2, sl
   1bc98:	mov	r6, r0
   1bc9c:	ldr	r9, [r4, #296]	; 0x128
   1bca0:	ldr	lr, [r4, #300]	; 0x12c
   1bca4:	str	r0, [r5, #4]
   1bca8:	str	ip, [sp]
   1bcac:	ldr	ip, [pc, #100]	; 1bd18 <__assert_fail@plt+0xa614>
   1bcb0:	str	r7, [sp, #4]
   1bcb4:	str	ip, [sp, #8]
   1bcb8:	str	r9, [sp, #12]
   1bcbc:	str	lr, [sp, #16]
   1bcc0:	bl	199d8 <__assert_fail@plt+0x82d4>
   1bcc4:	ldr	r3, [sp, #28]
   1bcc8:	mov	r0, r6
   1bccc:	str	r3, [r8]
   1bcd0:	add	sp, sp, #44	; 0x2c
   1bcd4:	ldrd	r4, [sp]
   1bcd8:	ldrd	r6, [sp, #8]
   1bcdc:	ldrd	r8, [sp, #16]
   1bce0:	ldrd	sl, [sp, #24]
   1bce4:	add	sp, sp, #32
   1bce8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcec:	mov	r0, #8
   1bcf0:	mvn	r3, #-2147483648	; 0x80000000
   1bcf4:	add	r1, sp, #36	; 0x24
   1bcf8:	str	r0, [sp]
   1bcfc:	mov	r0, #0
   1bd00:	bl	1df60 <__assert_fail@plt+0xc85c>
   1bd04:	ldrd	r2, [r4, #8]
   1bd08:	mov	r5, r0
   1bd0c:	str	r0, [r4]
   1bd10:	strd	r2, [r0]
   1bd14:	b	1bbec <__assert_fail@plt+0xa4e8>
   1bd18:	andeq	r3, r3, ip, asr #9
   1bd1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1bd20:	mov	r4, #0
   1bd24:	mov	r5, #0
   1bd28:	strd	r6, [sp, #8]
   1bd2c:	cmp	r1, #10
   1bd30:	str	lr, [sp, #16]
   1bd34:	sub	sp, sp, #100	; 0x64
   1bd38:	strd	r4, [sp, #48]	; 0x30
   1bd3c:	beq	1bd84 <__assert_fail@plt+0xa680>
   1bd40:	mov	r3, sp
   1bd44:	strd	r4, [sp, #8]
   1bd48:	str	r1, [sp, #48]	; 0x30
   1bd4c:	mov	r1, r2
   1bd50:	mvn	r2, #0
   1bd54:	ldrd	r6, [sp, #48]	; 0x30
   1bd58:	strd	r6, [sp]
   1bd5c:	strd	r4, [sp, #16]
   1bd60:	strd	r4, [sp, #24]
   1bd64:	strd	r4, [sp, #32]
   1bd68:	strd	r4, [sp, #40]	; 0x28
   1bd6c:	bl	1b3c4 <__assert_fail@plt+0x9cc0>
   1bd70:	add	sp, sp, #100	; 0x64
   1bd74:	ldrd	r4, [sp]
   1bd78:	ldrd	r6, [sp, #8]
   1bd7c:	add	sp, sp, #16
   1bd80:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd84:	bl	116e0 <abort@plt>
   1bd88:	strd	r4, [sp, #-20]!	; 0xffffffec
   1bd8c:	mov	r4, #0
   1bd90:	mov	r5, #0
   1bd94:	strd	r6, [sp, #8]
   1bd98:	cmp	r1, #10
   1bd9c:	str	lr, [sp, #16]
   1bda0:	sub	sp, sp, #100	; 0x64
   1bda4:	strd	r4, [sp, #48]	; 0x30
   1bda8:	beq	1bdf4 <__assert_fail@plt+0xa6f0>
   1bdac:	mov	ip, r2
   1bdb0:	mov	r2, r3
   1bdb4:	strd	r4, [sp, #8]
   1bdb8:	str	r1, [sp, #48]	; 0x30
   1bdbc:	mov	r3, sp
   1bdc0:	mov	r1, ip
   1bdc4:	ldrd	r6, [sp, #48]	; 0x30
   1bdc8:	strd	r6, [sp]
   1bdcc:	strd	r4, [sp, #16]
   1bdd0:	strd	r4, [sp, #24]
   1bdd4:	strd	r4, [sp, #32]
   1bdd8:	strd	r4, [sp, #40]	; 0x28
   1bddc:	bl	1b3c4 <__assert_fail@plt+0x9cc0>
   1bde0:	add	sp, sp, #100	; 0x64
   1bde4:	ldrd	r4, [sp]
   1bde8:	ldrd	r6, [sp, #8]
   1bdec:	add	sp, sp, #16
   1bdf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdf4:	bl	116e0 <abort@plt>
   1bdf8:	mov	r2, #0
   1bdfc:	mov	r3, #0
   1be00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be04:	strd	r6, [sp, #8]
   1be08:	cmp	r0, #10
   1be0c:	strd	r8, [sp, #16]
   1be10:	strd	sl, [sp, #24]
   1be14:	str	lr, [sp, #32]
   1be18:	sub	sp, sp, #124	; 0x7c
   1be1c:	strd	r2, [sp, #72]	; 0x48
   1be20:	strd	r2, [sp, #80]	; 0x50
   1be24:	strd	r2, [sp, #88]	; 0x58
   1be28:	strd	r2, [sp, #96]	; 0x60
   1be2c:	strd	r2, [sp, #104]	; 0x68
   1be30:	strd	r2, [sp, #112]	; 0x70
   1be34:	beq	1bfd8 <__assert_fail@plt+0xa8d4>
   1be38:	mov	r6, r1
   1be3c:	movw	r4, #13020	; 0x32dc
   1be40:	movt	r4, #3
   1be44:	str	r0, [sp, #72]	; 0x48
   1be48:	ldrd	r0, [sp, #72]	; 0x48
   1be4c:	strd	r0, [sp, #24]
   1be50:	strd	r2, [sp, #32]
   1be54:	strd	r2, [sp, #40]	; 0x28
   1be58:	strd	r2, [sp, #48]	; 0x30
   1be5c:	strd	r2, [sp, #56]	; 0x38
   1be60:	strd	r2, [sp, #64]	; 0x40
   1be64:	bl	1156c <__errno_location@plt>
   1be68:	mov	r8, r0
   1be6c:	ldr	r5, [r4]
   1be70:	ldr	r2, [r4, #4]
   1be74:	ldr	r9, [r0]
   1be78:	cmp	r2, #0
   1be7c:	bgt	1bed8 <__assert_fail@plt+0xa7d4>
   1be80:	add	r3, r4, #8
   1be84:	str	r2, [sp, #72]	; 0x48
   1be88:	rsb	r2, r2, #1
   1be8c:	cmp	r5, r3
   1be90:	beq	1bfac <__assert_fail@plt+0xa8a8>
   1be94:	mov	r3, #8
   1be98:	mov	r0, r5
   1be9c:	add	r1, sp, #72	; 0x48
   1bea0:	str	r3, [sp]
   1bea4:	mvn	r3, #-2147483648	; 0x80000000
   1bea8:	bl	1df60 <__assert_fail@plt+0xc85c>
   1beac:	mov	r5, r0
   1beb0:	str	r0, [r4]
   1beb4:	ldr	r0, [r4, #4]
   1beb8:	mov	r1, #0
   1bebc:	ldr	r2, [sp, #72]	; 0x48
   1bec0:	sub	r2, r2, r0
   1bec4:	add	r0, r5, r0, lsl #3
   1bec8:	lsl	r2, r2, #3
   1becc:	bl	11590 <memset@plt>
   1bed0:	ldr	r3, [sp, #72]	; 0x48
   1bed4:	str	r3, [r4, #4]
   1bed8:	ldr	sl, [r5]
   1bedc:	add	r0, sp, #32
   1bee0:	mvn	r3, #0
   1bee4:	mov	r2, r6
   1bee8:	ldr	r7, [sp, #28]
   1beec:	ldr	r4, [r5, #4]
   1bef0:	mov	r1, sl
   1bef4:	str	r0, [sp, #8]
   1bef8:	ldr	lr, [sp, #24]
   1befc:	orr	r7, r7, #1
   1bf00:	ldr	ip, [sp, #64]	; 0x40
   1bf04:	mov	r0, r4
   1bf08:	ldr	fp, [sp, #68]	; 0x44
   1bf0c:	str	lr, [sp]
   1bf10:	str	r7, [sp, #4]
   1bf14:	str	ip, [sp, #12]
   1bf18:	str	fp, [sp, #16]
   1bf1c:	bl	199d8 <__assert_fail@plt+0x82d4>
   1bf20:	cmp	sl, r0
   1bf24:	bhi	1bf88 <__assert_fail@plt+0xa884>
   1bf28:	add	sl, r0, #1
   1bf2c:	movw	r3, #13252	; 0x33c4
   1bf30:	movt	r3, #3
   1bf34:	cmp	r4, r3
   1bf38:	str	sl, [r5]
   1bf3c:	beq	1bf48 <__assert_fail@plt+0xa844>
   1bf40:	mov	r0, r4
   1bf44:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1bf48:	mov	r0, sl
   1bf4c:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1bf50:	ldr	r3, [sp, #24]
   1bf54:	mov	r2, r6
   1bf58:	mov	r1, sl
   1bf5c:	mov	r4, r0
   1bf60:	ldr	lr, [sp, #64]	; 0x40
   1bf64:	ldr	ip, [sp, #68]	; 0x44
   1bf68:	str	r0, [r5, #4]
   1bf6c:	add	r5, sp, #32
   1bf70:	stm	sp, {r3, r7}
   1bf74:	mvn	r3, #0
   1bf78:	str	r5, [sp, #8]
   1bf7c:	str	lr, [sp, #12]
   1bf80:	str	ip, [sp, #16]
   1bf84:	bl	199d8 <__assert_fail@plt+0x82d4>
   1bf88:	mov	r0, r4
   1bf8c:	str	r9, [r8]
   1bf90:	add	sp, sp, #124	; 0x7c
   1bf94:	ldrd	r4, [sp]
   1bf98:	ldrd	r6, [sp, #8]
   1bf9c:	ldrd	r8, [sp, #16]
   1bfa0:	ldrd	sl, [sp, #24]
   1bfa4:	add	sp, sp, #32
   1bfa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfac:	mov	r0, #8
   1bfb0:	mvn	r3, #-2147483648	; 0x80000000
   1bfb4:	add	r1, sp, #72	; 0x48
   1bfb8:	str	r0, [sp]
   1bfbc:	mov	r0, #0
   1bfc0:	bl	1df60 <__assert_fail@plt+0xc85c>
   1bfc4:	ldrd	r2, [r4, #8]
   1bfc8:	mov	r5, r0
   1bfcc:	str	r0, [r4]
   1bfd0:	strd	r2, [r0]
   1bfd4:	b	1beb4 <__assert_fail@plt+0xa7b0>
   1bfd8:	bl	116e0 <abort@plt>
   1bfdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bfe0:	cmp	r0, #10
   1bfe4:	strd	r6, [sp, #8]
   1bfe8:	mov	r6, #0
   1bfec:	mov	r7, #0
   1bff0:	strd	r8, [sp, #16]
   1bff4:	strd	sl, [sp, #24]
   1bff8:	str	lr, [sp, #32]
   1bffc:	sub	sp, sp, #124	; 0x7c
   1c000:	strd	r6, [sp, #72]	; 0x48
   1c004:	strd	r6, [sp, #80]	; 0x50
   1c008:	strd	r6, [sp, #88]	; 0x58
   1c00c:	strd	r6, [sp, #96]	; 0x60
   1c010:	strd	r6, [sp, #104]	; 0x68
   1c014:	strd	r6, [sp, #112]	; 0x70
   1c018:	beq	1c1c4 <__assert_fail@plt+0xaac0>
   1c01c:	mov	sl, r2
   1c020:	movw	r5, #13020	; 0x32dc
   1c024:	movt	r5, #3
   1c028:	str	r0, [sp, #72]	; 0x48
   1c02c:	mov	r9, r1
   1c030:	ldrd	r2, [sp, #72]	; 0x48
   1c034:	strd	r2, [sp, #24]
   1c038:	strd	r6, [sp, #32]
   1c03c:	strd	r6, [sp, #40]	; 0x28
   1c040:	strd	r6, [sp, #48]	; 0x30
   1c044:	strd	r6, [sp, #56]	; 0x38
   1c048:	strd	r6, [sp, #64]	; 0x40
   1c04c:	bl	1156c <__errno_location@plt>
   1c050:	mov	r7, r0
   1c054:	ldr	r4, [r5]
   1c058:	ldr	r2, [r5, #4]
   1c05c:	ldr	fp, [r0]
   1c060:	cmp	r2, #0
   1c064:	bgt	1c0c0 <__assert_fail@plt+0xa9bc>
   1c068:	add	r3, r5, #8
   1c06c:	str	r2, [sp, #72]	; 0x48
   1c070:	rsb	r2, r2, #1
   1c074:	cmp	r4, r3
   1c078:	beq	1c198 <__assert_fail@plt+0xaa94>
   1c07c:	mov	r3, #8
   1c080:	mov	r0, r4
   1c084:	add	r1, sp, #72	; 0x48
   1c088:	str	r3, [sp]
   1c08c:	mvn	r3, #-2147483648	; 0x80000000
   1c090:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c094:	mov	r4, r0
   1c098:	str	r0, [r5]
   1c09c:	ldr	r0, [r5, #4]
   1c0a0:	mov	r1, #0
   1c0a4:	ldr	r2, [sp, #72]	; 0x48
   1c0a8:	sub	r2, r2, r0
   1c0ac:	add	r0, r4, r0, lsl #3
   1c0b0:	lsl	r2, r2, #3
   1c0b4:	bl	11590 <memset@plt>
   1c0b8:	ldr	r3, [sp, #72]	; 0x48
   1c0bc:	str	r3, [r5, #4]
   1c0c0:	ldr	ip, [sp, #24]
   1c0c4:	add	r0, sp, #32
   1c0c8:	mov	r3, sl
   1c0cc:	mov	r2, r9
   1c0d0:	ldr	r6, [sp, #28]
   1c0d4:	ldr	r8, [r4]
   1c0d8:	ldr	r5, [r4, #4]
   1c0dc:	str	ip, [sp]
   1c0e0:	orr	r6, r6, #1
   1c0e4:	ldr	ip, [sp, #64]	; 0x40
   1c0e8:	mov	r1, r8
   1c0ec:	str	r6, [sp, #4]
   1c0f0:	ldr	lr, [sp, #68]	; 0x44
   1c0f4:	str	r0, [sp, #8]
   1c0f8:	mov	r0, r5
   1c0fc:	str	ip, [sp, #12]
   1c100:	str	lr, [sp, #16]
   1c104:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c108:	cmp	r8, r0
   1c10c:	bhi	1c174 <__assert_fail@plt+0xaa70>
   1c110:	add	r8, r0, #1
   1c114:	movw	r3, #13252	; 0x33c4
   1c118:	movt	r3, #3
   1c11c:	cmp	r5, r3
   1c120:	str	r8, [r4]
   1c124:	beq	1c130 <__assert_fail@plt+0xaa2c>
   1c128:	mov	r0, r5
   1c12c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1c130:	mov	r0, r8
   1c134:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1c138:	ldr	lr, [sp, #24]
   1c13c:	mov	r1, r8
   1c140:	mov	r3, sl
   1c144:	mov	r2, r9
   1c148:	mov	r5, r0
   1c14c:	ldr	r8, [sp, #64]	; 0x40
   1c150:	ldr	ip, [sp, #68]	; 0x44
   1c154:	str	r0, [r4, #4]
   1c158:	str	lr, [sp]
   1c15c:	add	lr, sp, #32
   1c160:	str	r6, [sp, #4]
   1c164:	str	lr, [sp, #8]
   1c168:	str	r8, [sp, #12]
   1c16c:	str	ip, [sp, #16]
   1c170:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c174:	mov	r0, r5
   1c178:	str	fp, [r7]
   1c17c:	add	sp, sp, #124	; 0x7c
   1c180:	ldrd	r4, [sp]
   1c184:	ldrd	r6, [sp, #8]
   1c188:	ldrd	r8, [sp, #16]
   1c18c:	ldrd	sl, [sp, #24]
   1c190:	add	sp, sp, #32
   1c194:	pop	{pc}		; (ldr pc, [sp], #4)
   1c198:	mov	r0, #8
   1c19c:	mvn	r3, #-2147483648	; 0x80000000
   1c1a0:	add	r1, sp, #72	; 0x48
   1c1a4:	str	r0, [sp]
   1c1a8:	mov	r0, #0
   1c1ac:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c1b0:	ldrd	r2, [r5, #8]
   1c1b4:	mov	r4, r0
   1c1b8:	str	r0, [r5]
   1c1bc:	strd	r2, [r0]
   1c1c0:	b	1c09c <__assert_fail@plt+0xa998>
   1c1c4:	bl	116e0 <abort@plt>
   1c1c8:	ldr	r3, [pc, #492]	; 1c3bc <__assert_fail@plt+0xacb8>
   1c1cc:	lsr	ip, r2, #5
   1c1d0:	and	r2, r2, #31
   1c1d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c1d8:	movw	r5, #13020	; 0x32dc
   1c1dc:	movt	r5, #3
   1c1e0:	strd	r6, [sp, #8]
   1c1e4:	strd	r8, [sp, #16]
   1c1e8:	strd	sl, [sp, #24]
   1c1ec:	mov	sl, r0
   1c1f0:	mov	fp, r1
   1c1f4:	ldrd	r0, [r3]
   1c1f8:	str	lr, [sp, #32]
   1c1fc:	sub	sp, sp, #92	; 0x5c
   1c200:	ldrd	r8, [r3, #8]
   1c204:	add	r6, sp, #48	; 0x30
   1c208:	strd	r0, [sp, #40]	; 0x28
   1c20c:	ldrd	r0, [r3, #16]
   1c210:	strd	r8, [sp, #48]	; 0x30
   1c214:	ldrd	r8, [r3, #24]
   1c218:	strd	r0, [sp, #56]	; 0x38
   1c21c:	ldrd	r0, [r3, #32]
   1c220:	strd	r8, [sp, #64]	; 0x40
   1c224:	ldrd	r8, [r3, #40]	; 0x28
   1c228:	strd	r0, [sp, #72]	; 0x48
   1c22c:	strd	r8, [sp, #80]	; 0x50
   1c230:	ldr	r3, [r6, ip, lsl #2]
   1c234:	mvn	r1, r3, lsr r2
   1c238:	and	r1, r1, #1
   1c23c:	eor	r2, r3, r1, lsl r2
   1c240:	str	r2, [r6, ip, lsl #2]
   1c244:	bl	1156c <__errno_location@plt>
   1c248:	ldr	r3, [r0]
   1c24c:	mov	r8, r0
   1c250:	ldr	r2, [r5, #4]
   1c254:	ldr	r4, [r5]
   1c258:	str	r3, [sp, #28]
   1c25c:	cmp	r2, #0
   1c260:	bgt	1c2bc <__assert_fail@plt+0xabb8>
   1c264:	add	r3, r5, #8
   1c268:	str	r2, [sp, #36]	; 0x24
   1c26c:	rsb	r2, r2, #1
   1c270:	cmp	r4, r3
   1c274:	beq	1c390 <__assert_fail@plt+0xac8c>
   1c278:	mov	r1, #8
   1c27c:	mov	r0, r4
   1c280:	mvn	r3, #-2147483648	; 0x80000000
   1c284:	str	r1, [sp]
   1c288:	add	r1, sp, #36	; 0x24
   1c28c:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c290:	mov	r4, r0
   1c294:	str	r0, [r5]
   1c298:	ldr	r0, [r5, #4]
   1c29c:	mov	r1, #0
   1c2a0:	ldr	r2, [sp, #36]	; 0x24
   1c2a4:	sub	r2, r2, r0
   1c2a8:	add	r0, r4, r0, lsl #3
   1c2ac:	lsl	r2, r2, #3
   1c2b0:	bl	11590 <memset@plt>
   1c2b4:	ldr	r3, [sp, #36]	; 0x24
   1c2b8:	str	r3, [r5, #4]
   1c2bc:	ldr	ip, [sp, #40]	; 0x28
   1c2c0:	mov	r3, fp
   1c2c4:	mov	r2, sl
   1c2c8:	ldr	r7, [sp, #44]	; 0x2c
   1c2cc:	ldr	r9, [r4]
   1c2d0:	ldr	r5, [r4, #4]
   1c2d4:	str	ip, [sp]
   1c2d8:	orr	r7, r7, #1
   1c2dc:	ldr	ip, [sp, #80]	; 0x50
   1c2e0:	mov	r1, r9
   1c2e4:	str	r7, [sp, #4]
   1c2e8:	ldr	lr, [sp, #84]	; 0x54
   1c2ec:	mov	r0, r5
   1c2f0:	str	r6, [sp, #8]
   1c2f4:	str	ip, [sp, #12]
   1c2f8:	str	lr, [sp, #16]
   1c2fc:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c300:	cmp	r9, r0
   1c304:	bhi	1c368 <__assert_fail@plt+0xac64>
   1c308:	add	r9, r0, #1
   1c30c:	movw	r3, #13252	; 0x33c4
   1c310:	movt	r3, #3
   1c314:	cmp	r5, r3
   1c318:	str	r9, [r4]
   1c31c:	beq	1c328 <__assert_fail@plt+0xac24>
   1c320:	mov	r0, r5
   1c324:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1c328:	mov	r0, r9
   1c32c:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1c330:	mov	r1, r9
   1c334:	ldr	ip, [sp, #40]	; 0x28
   1c338:	mov	r3, fp
   1c33c:	mov	r2, sl
   1c340:	mov	r5, r0
   1c344:	ldr	r9, [sp, #80]	; 0x50
   1c348:	ldr	lr, [sp, #84]	; 0x54
   1c34c:	str	r0, [r4, #4]
   1c350:	str	ip, [sp]
   1c354:	str	r7, [sp, #4]
   1c358:	str	r6, [sp, #8]
   1c35c:	str	r9, [sp, #12]
   1c360:	str	lr, [sp, #16]
   1c364:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c368:	ldr	r3, [sp, #28]
   1c36c:	mov	r0, r5
   1c370:	str	r3, [r8]
   1c374:	add	sp, sp, #92	; 0x5c
   1c378:	ldrd	r4, [sp]
   1c37c:	ldrd	r6, [sp, #8]
   1c380:	ldrd	r8, [sp, #16]
   1c384:	ldrd	sl, [sp, #24]
   1c388:	add	sp, sp, #32
   1c38c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c390:	mov	r0, #8
   1c394:	mvn	r3, #-2147483648	; 0x80000000
   1c398:	add	r1, sp, #36	; 0x24
   1c39c:	str	r0, [sp]
   1c3a0:	mov	r0, #0
   1c3a4:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c3a8:	ldrd	r2, [r5, #8]
   1c3ac:	mov	r4, r0
   1c3b0:	str	r0, [r5]
   1c3b4:	strd	r2, [r0]
   1c3b8:	b	1c298 <__assert_fail@plt+0xab94>
   1c3bc:	andeq	r3, r3, r4, asr #9
   1c3c0:	ldr	ip, [pc, #476]	; 1c5a4 <__assert_fail@plt+0xaea0>
   1c3c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c3c8:	movw	r4, #13020	; 0x32dc
   1c3cc:	movt	r4, #3
   1c3d0:	ldrd	r2, [ip, #8]
   1c3d4:	strd	r6, [sp, #8]
   1c3d8:	lsr	r7, r1, #5
   1c3dc:	mov	r6, r0
   1c3e0:	strd	r8, [sp, #16]
   1c3e4:	str	lr, [sp, #32]
   1c3e8:	and	lr, r1, #31
   1c3ec:	ldrd	r0, [ip]
   1c3f0:	strd	sl, [sp, #24]
   1c3f4:	sub	sp, sp, #84	; 0x54
   1c3f8:	add	r5, sp, #40	; 0x28
   1c3fc:	strd	r0, [sp, #32]
   1c400:	strd	r2, [sp, #40]	; 0x28
   1c404:	ldrd	r0, [ip, #16]
   1c408:	ldrd	r2, [ip, #24]
   1c40c:	strd	r0, [sp, #48]	; 0x30
   1c410:	ldrd	r0, [ip, #32]
   1c414:	strd	r2, [sp, #56]	; 0x38
   1c418:	ldrd	r2, [ip, #40]	; 0x28
   1c41c:	strd	r0, [sp, #64]	; 0x40
   1c420:	strd	r2, [sp, #72]	; 0x48
   1c424:	ldr	r1, [r5, r7, lsl #2]
   1c428:	mvn	r3, r1, lsr lr
   1c42c:	and	r3, r3, #1
   1c430:	eor	r1, r1, r3, lsl lr
   1c434:	str	r1, [r5, r7, lsl #2]
   1c438:	bl	1156c <__errno_location@plt>
   1c43c:	mov	r9, r0
   1c440:	ldr	sl, [r0]
   1c444:	ldr	r2, [r4, #4]
   1c448:	ldr	r7, [r4]
   1c44c:	cmp	r2, #0
   1c450:	bgt	1c4ac <__assert_fail@plt+0xada8>
   1c454:	add	r3, r4, #8
   1c458:	str	r2, [sp, #28]
   1c45c:	rsb	r2, r2, #1
   1c460:	cmp	r7, r3
   1c464:	beq	1c578 <__assert_fail@plt+0xae74>
   1c468:	mov	r1, #8
   1c46c:	mov	r0, r7
   1c470:	mvn	r3, #-2147483648	; 0x80000000
   1c474:	str	r1, [sp]
   1c478:	add	r1, sp, #28
   1c47c:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c480:	mov	r7, r0
   1c484:	str	r0, [r4]
   1c488:	ldr	r0, [r4, #4]
   1c48c:	mov	r1, #0
   1c490:	ldr	r2, [sp, #28]
   1c494:	sub	r2, r2, r0
   1c498:	add	r0, r7, r0, lsl #3
   1c49c:	lsl	r2, r2, #3
   1c4a0:	bl	11590 <memset@plt>
   1c4a4:	ldr	r3, [sp, #28]
   1c4a8:	str	r3, [r4, #4]
   1c4ac:	ldr	ip, [sp, #32]
   1c4b0:	mvn	r3, #0
   1c4b4:	mov	r2, r6
   1c4b8:	ldr	r8, [sp, #36]	; 0x24
   1c4bc:	ldr	fp, [r7]
   1c4c0:	ldr	r4, [r7, #4]
   1c4c4:	str	ip, [sp]
   1c4c8:	orr	r8, r8, #1
   1c4cc:	ldr	ip, [sp, #72]	; 0x48
   1c4d0:	mov	r1, fp
   1c4d4:	str	r8, [sp, #4]
   1c4d8:	ldr	lr, [sp, #76]	; 0x4c
   1c4dc:	mov	r0, r4
   1c4e0:	str	r5, [sp, #8]
   1c4e4:	str	ip, [sp, #12]
   1c4e8:	str	lr, [sp, #16]
   1c4ec:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c4f0:	cmp	fp, r0
   1c4f4:	bhi	1c554 <__assert_fail@plt+0xae50>
   1c4f8:	add	fp, r0, #1
   1c4fc:	movw	r3, #13252	; 0x33c4
   1c500:	movt	r3, #3
   1c504:	cmp	r4, r3
   1c508:	str	fp, [r7]
   1c50c:	beq	1c518 <__assert_fail@plt+0xae14>
   1c510:	mov	r0, r4
   1c514:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1c518:	mov	r0, fp
   1c51c:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1c520:	ldr	r3, [sp, #32]
   1c524:	mov	r2, r6
   1c528:	mov	r1, fp
   1c52c:	mov	r4, r0
   1c530:	ldr	lr, [sp, #72]	; 0x48
   1c534:	ldr	ip, [sp, #76]	; 0x4c
   1c538:	str	r0, [r7, #4]
   1c53c:	stm	sp, {r3, r8}
   1c540:	mvn	r3, #0
   1c544:	str	r5, [sp, #8]
   1c548:	str	lr, [sp, #12]
   1c54c:	str	ip, [sp, #16]
   1c550:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c554:	mov	r0, r4
   1c558:	str	sl, [r9]
   1c55c:	add	sp, sp, #84	; 0x54
   1c560:	ldrd	r4, [sp]
   1c564:	ldrd	r6, [sp, #8]
   1c568:	ldrd	r8, [sp, #16]
   1c56c:	ldrd	sl, [sp, #24]
   1c570:	add	sp, sp, #32
   1c574:	pop	{pc}		; (ldr pc, [sp], #4)
   1c578:	mov	r0, #8
   1c57c:	mvn	r3, #-2147483648	; 0x80000000
   1c580:	add	r1, sp, #28
   1c584:	str	r0, [sp]
   1c588:	mov	r0, #0
   1c58c:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c590:	ldrd	r2, [r4, #8]
   1c594:	mov	r7, r0
   1c598:	str	r0, [r4]
   1c59c:	strd	r2, [r0]
   1c5a0:	b	1c488 <__assert_fail@plt+0xad84>
   1c5a4:	andeq	r3, r3, r4, asr #9
   1c5a8:	ldr	ip, [pc, #472]	; 1c788 <__assert_fail@plt+0xb084>
   1c5ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c5b0:	mov	r5, r0
   1c5b4:	movw	r4, #13020	; 0x32dc
   1c5b8:	movt	r4, #3
   1c5bc:	ldrd	r2, [ip]
   1c5c0:	ldrd	r0, [ip, #8]
   1c5c4:	strd	r6, [sp, #8]
   1c5c8:	strd	r8, [sp, #16]
   1c5cc:	strd	sl, [sp, #24]
   1c5d0:	str	lr, [sp, #32]
   1c5d4:	sub	sp, sp, #84	; 0x54
   1c5d8:	strd	r2, [sp, #32]
   1c5dc:	strd	r0, [sp, #40]	; 0x28
   1c5e0:	ldr	r6, [sp, #44]	; 0x2c
   1c5e4:	ldrd	r2, [ip, #16]
   1c5e8:	ldrd	r0, [ip, #24]
   1c5ec:	mvn	lr, r6
   1c5f0:	and	lr, lr, #67108864	; 0x4000000
   1c5f4:	eor	lr, lr, r6
   1c5f8:	ldrd	r6, [ip, #40]	; 0x28
   1c5fc:	strd	r2, [sp, #48]	; 0x30
   1c600:	ldrd	r2, [ip, #32]
   1c604:	str	lr, [sp, #44]	; 0x2c
   1c608:	strd	r0, [sp, #56]	; 0x38
   1c60c:	strd	r2, [sp, #64]	; 0x40
   1c610:	strd	r6, [sp, #72]	; 0x48
   1c614:	bl	1156c <__errno_location@plt>
   1c618:	mov	r8, r0
   1c61c:	ldr	r9, [r0]
   1c620:	ldr	r2, [r4, #4]
   1c624:	ldr	r6, [r4]
   1c628:	cmp	r2, #0
   1c62c:	bgt	1c688 <__assert_fail@plt+0xaf84>
   1c630:	add	r3, r4, #8
   1c634:	str	r2, [sp, #28]
   1c638:	rsb	r2, r2, #1
   1c63c:	cmp	r6, r3
   1c640:	beq	1c75c <__assert_fail@plt+0xb058>
   1c644:	mov	r1, #8
   1c648:	mov	r0, r6
   1c64c:	mvn	r3, #-2147483648	; 0x80000000
   1c650:	str	r1, [sp]
   1c654:	add	r1, sp, #28
   1c658:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c65c:	mov	r6, r0
   1c660:	str	r0, [r4]
   1c664:	ldr	r0, [r4, #4]
   1c668:	mov	r1, #0
   1c66c:	ldr	r2, [sp, #28]
   1c670:	sub	r2, r2, r0
   1c674:	add	r0, r6, r0, lsl #3
   1c678:	lsl	r2, r2, #3
   1c67c:	bl	11590 <memset@plt>
   1c680:	ldr	r3, [sp, #28]
   1c684:	str	r3, [r4, #4]
   1c688:	ldr	sl, [r6]
   1c68c:	add	r0, sp, #40	; 0x28
   1c690:	mvn	r3, #0
   1c694:	mov	r2, r5
   1c698:	ldr	r7, [sp, #36]	; 0x24
   1c69c:	ldr	r4, [r6, #4]
   1c6a0:	mov	r1, sl
   1c6a4:	str	r0, [sp, #8]
   1c6a8:	ldr	lr, [sp, #32]
   1c6ac:	orr	r7, r7, #1
   1c6b0:	ldr	ip, [sp, #72]	; 0x48
   1c6b4:	mov	r0, r4
   1c6b8:	ldr	fp, [sp, #76]	; 0x4c
   1c6bc:	str	lr, [sp]
   1c6c0:	str	r7, [sp, #4]
   1c6c4:	str	ip, [sp, #12]
   1c6c8:	str	fp, [sp, #16]
   1c6cc:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c6d0:	cmp	sl, r0
   1c6d4:	bhi	1c738 <__assert_fail@plt+0xb034>
   1c6d8:	add	sl, r0, #1
   1c6dc:	movw	r3, #13252	; 0x33c4
   1c6e0:	movt	r3, #3
   1c6e4:	cmp	r4, r3
   1c6e8:	str	sl, [r6]
   1c6ec:	beq	1c6f8 <__assert_fail@plt+0xaff4>
   1c6f0:	mov	r0, r4
   1c6f4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1c6f8:	mov	r0, sl
   1c6fc:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1c700:	ldr	r3, [sp, #32]
   1c704:	mov	r2, r5
   1c708:	add	r5, sp, #40	; 0x28
   1c70c:	mov	r1, sl
   1c710:	mov	r4, r0
   1c714:	ldr	lr, [sp, #72]	; 0x48
   1c718:	ldr	ip, [sp, #76]	; 0x4c
   1c71c:	str	r0, [r6, #4]
   1c720:	stm	sp, {r3, r7}
   1c724:	mvn	r3, #0
   1c728:	str	r5, [sp, #8]
   1c72c:	str	lr, [sp, #12]
   1c730:	str	ip, [sp, #16]
   1c734:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c738:	mov	r0, r4
   1c73c:	str	r9, [r8]
   1c740:	add	sp, sp, #84	; 0x54
   1c744:	ldrd	r4, [sp]
   1c748:	ldrd	r6, [sp, #8]
   1c74c:	ldrd	r8, [sp, #16]
   1c750:	ldrd	sl, [sp, #24]
   1c754:	add	sp, sp, #32
   1c758:	pop	{pc}		; (ldr pc, [sp], #4)
   1c75c:	mov	r0, #8
   1c760:	mvn	r3, #-2147483648	; 0x80000000
   1c764:	add	r1, sp, #28
   1c768:	str	r0, [sp]
   1c76c:	mov	r0, #0
   1c770:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c774:	ldrd	r2, [r4, #8]
   1c778:	mov	r6, r0
   1c77c:	str	r0, [r4]
   1c780:	strd	r2, [r0]
   1c784:	b	1c664 <__assert_fail@plt+0xaf60>
   1c788:	andeq	r3, r3, r4, asr #9
   1c78c:	ldr	ip, [pc, #480]	; 1c974 <__assert_fail@plt+0xb270>
   1c790:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c794:	mov	r5, r0
   1c798:	movw	r4, #13020	; 0x32dc
   1c79c:	movt	r4, #3
   1c7a0:	ldrd	r2, [ip]
   1c7a4:	strd	r6, [sp, #8]
   1c7a8:	mov	r6, r1
   1c7ac:	ldrd	r0, [ip, #8]
   1c7b0:	strd	r8, [sp, #16]
   1c7b4:	strd	sl, [sp, #24]
   1c7b8:	str	lr, [sp, #32]
   1c7bc:	sub	sp, sp, #84	; 0x54
   1c7c0:	ldrd	r8, [ip, #40]	; 0x28
   1c7c4:	strd	r2, [sp, #32]
   1c7c8:	strd	r0, [sp, #40]	; 0x28
   1c7cc:	ldrd	r2, [ip, #16]
   1c7d0:	ldr	r7, [sp, #44]	; 0x2c
   1c7d4:	ldrd	r0, [ip, #24]
   1c7d8:	strd	r2, [sp, #48]	; 0x30
   1c7dc:	ldrd	r2, [ip, #32]
   1c7e0:	mvn	lr, r7
   1c7e4:	and	lr, lr, #67108864	; 0x4000000
   1c7e8:	eor	lr, lr, r7
   1c7ec:	str	lr, [sp, #44]	; 0x2c
   1c7f0:	strd	r0, [sp, #56]	; 0x38
   1c7f4:	strd	r2, [sp, #64]	; 0x40
   1c7f8:	strd	r8, [sp, #72]	; 0x48
   1c7fc:	bl	1156c <__errno_location@plt>
   1c800:	mov	r9, r0
   1c804:	ldr	sl, [r0]
   1c808:	ldr	r2, [r4, #4]
   1c80c:	ldr	r7, [r4]
   1c810:	cmp	r2, #0
   1c814:	bgt	1c870 <__assert_fail@plt+0xb16c>
   1c818:	add	r3, r4, #8
   1c81c:	str	r2, [sp, #28]
   1c820:	rsb	r2, r2, #1
   1c824:	cmp	r7, r3
   1c828:	beq	1c948 <__assert_fail@plt+0xb244>
   1c82c:	mov	r1, #8
   1c830:	mov	r0, r7
   1c834:	mvn	r3, #-2147483648	; 0x80000000
   1c838:	str	r1, [sp]
   1c83c:	add	r1, sp, #28
   1c840:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c844:	mov	r7, r0
   1c848:	str	r0, [r4]
   1c84c:	ldr	r0, [r4, #4]
   1c850:	mov	r1, #0
   1c854:	ldr	r2, [sp, #28]
   1c858:	sub	r2, r2, r0
   1c85c:	add	r0, r7, r0, lsl #3
   1c860:	lsl	r2, r2, #3
   1c864:	bl	11590 <memset@plt>
   1c868:	ldr	r3, [sp, #28]
   1c86c:	str	r3, [r4, #4]
   1c870:	ldr	ip, [sp, #32]
   1c874:	add	r0, sp, #40	; 0x28
   1c878:	mov	r3, r6
   1c87c:	mov	r2, r5
   1c880:	ldr	r8, [sp, #36]	; 0x24
   1c884:	ldr	fp, [r7]
   1c888:	ldr	r4, [r7, #4]
   1c88c:	str	ip, [sp]
   1c890:	orr	r8, r8, #1
   1c894:	ldr	ip, [sp, #72]	; 0x48
   1c898:	mov	r1, fp
   1c89c:	str	r8, [sp, #4]
   1c8a0:	ldr	lr, [sp, #76]	; 0x4c
   1c8a4:	str	r0, [sp, #8]
   1c8a8:	mov	r0, r4
   1c8ac:	str	ip, [sp, #12]
   1c8b0:	str	lr, [sp, #16]
   1c8b4:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c8b8:	cmp	fp, r0
   1c8bc:	bhi	1c924 <__assert_fail@plt+0xb220>
   1c8c0:	add	fp, r0, #1
   1c8c4:	movw	r3, #13252	; 0x33c4
   1c8c8:	movt	r3, #3
   1c8cc:	cmp	r4, r3
   1c8d0:	str	fp, [r7]
   1c8d4:	beq	1c8e0 <__assert_fail@plt+0xb1dc>
   1c8d8:	mov	r0, r4
   1c8dc:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1c8e0:	mov	r0, fp
   1c8e4:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1c8e8:	ldr	lr, [sp, #32]
   1c8ec:	mov	r2, r5
   1c8f0:	mov	r3, r6
   1c8f4:	mov	r1, fp
   1c8f8:	mov	r4, r0
   1c8fc:	ldr	r5, [sp, #72]	; 0x48
   1c900:	ldr	ip, [sp, #76]	; 0x4c
   1c904:	str	r0, [r7, #4]
   1c908:	str	lr, [sp]
   1c90c:	add	lr, sp, #40	; 0x28
   1c910:	str	r8, [sp, #4]
   1c914:	str	lr, [sp, #8]
   1c918:	str	r5, [sp, #12]
   1c91c:	str	ip, [sp, #16]
   1c920:	bl	199d8 <__assert_fail@plt+0x82d4>
   1c924:	mov	r0, r4
   1c928:	str	sl, [r9]
   1c92c:	add	sp, sp, #84	; 0x54
   1c930:	ldrd	r4, [sp]
   1c934:	ldrd	r6, [sp, #8]
   1c938:	ldrd	r8, [sp, #16]
   1c93c:	ldrd	sl, [sp, #24]
   1c940:	add	sp, sp, #32
   1c944:	pop	{pc}		; (ldr pc, [sp], #4)
   1c948:	mov	r0, #8
   1c94c:	mvn	r3, #-2147483648	; 0x80000000
   1c950:	add	r1, sp, #28
   1c954:	str	r0, [sp]
   1c958:	mov	r0, #0
   1c95c:	bl	1df60 <__assert_fail@plt+0xc85c>
   1c960:	ldrd	r2, [r4, #8]
   1c964:	mov	r7, r0
   1c968:	str	r0, [r4]
   1c96c:	strd	r2, [r0]
   1c970:	b	1c84c <__assert_fail@plt+0xb148>
   1c974:	andeq	r3, r3, r4, asr #9
   1c978:	strd	r4, [sp, #-12]!
   1c97c:	mov	r4, #0
   1c980:	mov	r5, #0
   1c984:	str	lr, [sp, #8]
   1c988:	sub	sp, sp, #100	; 0x64
   1c98c:	cmp	r1, #10
   1c990:	strd	r4, [sp]
   1c994:	strd	r4, [sp, #8]
   1c998:	strd	r4, [sp, #16]
   1c99c:	strd	r4, [sp, #24]
   1c9a0:	strd	r4, [sp, #32]
   1c9a4:	strd	r4, [sp, #40]	; 0x28
   1c9a8:	beq	1c9d8 <__assert_fail@plt+0xb2d4>
   1c9ac:	mov	ip, #67108864	; 0x4000000
   1c9b0:	mov	r3, sp
   1c9b4:	str	r1, [sp]
   1c9b8:	mov	r1, r2
   1c9bc:	mvn	r2, #0
   1c9c0:	str	ip, [sp, #12]
   1c9c4:	bl	1b3c4 <__assert_fail@plt+0x9cc0>
   1c9c8:	add	sp, sp, #100	; 0x64
   1c9cc:	ldrd	r4, [sp]
   1c9d0:	add	sp, sp, #8
   1c9d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9d8:	bl	116e0 <abort@plt>
   1c9dc:	ldr	ip, [pc, #156]	; 1ca80 <__assert_fail@plt+0xb37c>
   1c9e0:	cmp	r2, #0
   1c9e4:	cmpne	r1, #0
   1c9e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c9ec:	strd	r6, [sp, #8]
   1c9f0:	mov	r6, r2
   1c9f4:	str	r8, [sp, #16]
   1c9f8:	mov	r8, r3
   1c9fc:	strd	sl, [sp, #20]
   1ca00:	ldrd	r4, [ip]
   1ca04:	str	lr, [sp, #28]
   1ca08:	sub	sp, sp, #48	; 0x30
   1ca0c:	mov	lr, #10
   1ca10:	ldrd	r2, [ip, #8]
   1ca14:	ldrd	sl, [ip, #16]
   1ca18:	strd	r4, [sp]
   1ca1c:	ldrd	r4, [ip, #32]
   1ca20:	str	lr, [sp]
   1ca24:	strd	r2, [sp, #8]
   1ca28:	strd	sl, [sp, #16]
   1ca2c:	ldrd	r2, [ip, #24]
   1ca30:	ldrd	sl, [ip, #40]	; 0x28
   1ca34:	strd	r2, [sp, #24]
   1ca38:	strd	r4, [sp, #32]
   1ca3c:	strd	sl, [sp, #40]	; 0x28
   1ca40:	beq	1ca7c <__assert_fail@plt+0xb378>
   1ca44:	mov	r7, r1
   1ca48:	mov	r3, sp
   1ca4c:	mov	r1, r8
   1ca50:	mvn	r2, #0
   1ca54:	str	r7, [sp, #40]	; 0x28
   1ca58:	str	r6, [sp, #44]	; 0x2c
   1ca5c:	bl	1b3c4 <__assert_fail@plt+0x9cc0>
   1ca60:	add	sp, sp, #48	; 0x30
   1ca64:	ldrd	r4, [sp]
   1ca68:	ldrd	r6, [sp, #8]
   1ca6c:	ldr	r8, [sp, #16]
   1ca70:	ldrd	sl, [sp, #20]
   1ca74:	add	sp, sp, #28
   1ca78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca7c:	bl	116e0 <abort@plt>
   1ca80:	andeq	r3, r3, r4, asr #9
   1ca84:	ldr	ip, [pc, #156]	; 1cb28 <__assert_fail@plt+0xb424>
   1ca88:	cmp	r2, #0
   1ca8c:	cmpne	r1, #0
   1ca90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1ca94:	strd	r6, [sp, #8]
   1ca98:	mov	r6, r2
   1ca9c:	str	r8, [sp, #16]
   1caa0:	mov	r8, r3
   1caa4:	strd	sl, [sp, #20]
   1caa8:	ldrd	r4, [ip]
   1caac:	str	lr, [sp, #28]
   1cab0:	sub	sp, sp, #48	; 0x30
   1cab4:	mov	lr, #10
   1cab8:	ldrd	r2, [ip, #8]
   1cabc:	ldrd	sl, [ip, #16]
   1cac0:	strd	r4, [sp]
   1cac4:	ldrd	r4, [ip, #32]
   1cac8:	str	lr, [sp]
   1cacc:	strd	r2, [sp, #8]
   1cad0:	strd	sl, [sp, #16]
   1cad4:	ldrd	r2, [ip, #24]
   1cad8:	ldrd	sl, [ip, #40]	; 0x28
   1cadc:	strd	r2, [sp, #24]
   1cae0:	strd	r4, [sp, #32]
   1cae4:	strd	sl, [sp, #40]	; 0x28
   1cae8:	beq	1cb24 <__assert_fail@plt+0xb420>
   1caec:	ldr	r2, [sp, #80]	; 0x50
   1caf0:	mov	r7, r1
   1caf4:	mov	r3, sp
   1caf8:	mov	r1, r8
   1cafc:	str	r7, [sp, #40]	; 0x28
   1cb00:	str	r6, [sp, #44]	; 0x2c
   1cb04:	bl	1b3c4 <__assert_fail@plt+0x9cc0>
   1cb08:	add	sp, sp, #48	; 0x30
   1cb0c:	ldrd	r4, [sp]
   1cb10:	ldrd	r6, [sp, #8]
   1cb14:	ldr	r8, [sp, #16]
   1cb18:	ldrd	sl, [sp, #20]
   1cb1c:	add	sp, sp, #28
   1cb20:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb24:	bl	116e0 <abort@plt>
   1cb28:	andeq	r3, r3, r4, asr #9
   1cb2c:	ldr	ip, [pc, #512]	; 1cd34 <__assert_fail@plt+0xb630>
   1cb30:	cmp	r0, #0
   1cb34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cb38:	ldrd	r4, [ip, #16]
   1cb3c:	strd	r6, [sp, #8]
   1cb40:	clz	r6, r1
   1cb44:	mov	r7, r1
   1cb48:	strd	r8, [sp, #16]
   1cb4c:	mov	r8, r0
   1cb50:	lsr	r6, r6, #5
   1cb54:	strd	sl, [sp, #24]
   1cb58:	mov	fp, r2
   1cb5c:	mov	sl, #10
   1cb60:	ldrd	r2, [ip]
   1cb64:	moveq	r6, #1
   1cb68:	str	lr, [sp, #32]
   1cb6c:	sub	sp, sp, #92	; 0x5c
   1cb70:	cmp	r6, #0
   1cb74:	ldrd	r0, [ip, #8]
   1cb78:	strd	r2, [sp, #40]	; 0x28
   1cb7c:	strd	r4, [sp, #56]	; 0x38
   1cb80:	ldrd	r2, [ip, #24]
   1cb84:	strd	r0, [sp, #48]	; 0x30
   1cb88:	ldrd	r0, [ip, #32]
   1cb8c:	str	sl, [sp, #40]	; 0x28
   1cb90:	ldrd	r4, [ip, #40]	; 0x28
   1cb94:	strd	r2, [sp, #64]	; 0x40
   1cb98:	strd	r0, [sp, #72]	; 0x48
   1cb9c:	strd	r4, [sp, #80]	; 0x50
   1cba0:	bne	1cd30 <__assert_fail@plt+0xb62c>
   1cba4:	movw	r5, #13020	; 0x32dc
   1cba8:	movt	r5, #3
   1cbac:	str	r8, [sp, #80]	; 0x50
   1cbb0:	str	r7, [sp, #84]	; 0x54
   1cbb4:	bl	1156c <__errno_location@plt>
   1cbb8:	ldr	r3, [r0]
   1cbbc:	mov	r9, r0
   1cbc0:	ldr	r2, [r5, #4]
   1cbc4:	ldr	r4, [r5]
   1cbc8:	str	r3, [sp, #28]
   1cbcc:	cmp	r2, #0
   1cbd0:	movgt	r1, sl
   1cbd4:	bgt	1cc3c <__assert_fail@plt+0xb538>
   1cbd8:	add	r3, r5, #8
   1cbdc:	str	r2, [sp, #36]	; 0x24
   1cbe0:	rsb	r2, r2, #1
   1cbe4:	cmp	r4, r3
   1cbe8:	beq	1cd04 <__assert_fail@plt+0xb600>
   1cbec:	mov	r1, #8
   1cbf0:	mov	r0, r4
   1cbf4:	mvn	r3, #-2147483648	; 0x80000000
   1cbf8:	str	r1, [sp]
   1cbfc:	add	r1, sp, #36	; 0x24
   1cc00:	bl	1df60 <__assert_fail@plt+0xc85c>
   1cc04:	mov	r4, r0
   1cc08:	str	r0, [r5]
   1cc0c:	ldr	r0, [r5, #4]
   1cc10:	mov	r1, #0
   1cc14:	ldr	r2, [sp, #36]	; 0x24
   1cc18:	sub	r2, r2, r0
   1cc1c:	add	r0, r4, r0, lsl #3
   1cc20:	lsl	r2, r2, #3
   1cc24:	bl	11590 <memset@plt>
   1cc28:	ldr	r3, [sp, #36]	; 0x24
   1cc2c:	ldr	r1, [sp, #40]	; 0x28
   1cc30:	ldr	r8, [sp, #80]	; 0x50
   1cc34:	str	r3, [r5, #4]
   1cc38:	ldr	r7, [sp, #84]	; 0x54
   1cc3c:	mvn	r3, #0
   1cc40:	mov	r2, fp
   1cc44:	ldr	r6, [sp, #44]	; 0x2c
   1cc48:	ldr	sl, [r4]
   1cc4c:	ldr	r5, [r4, #4]
   1cc50:	orr	r6, r6, #1
   1cc54:	stm	sp, {r1, r6}
   1cc58:	add	r1, sp, #48	; 0x30
   1cc5c:	str	r8, [sp, #12]
   1cc60:	mov	r0, r5
   1cc64:	str	r1, [sp, #8]
   1cc68:	mov	r1, sl
   1cc6c:	str	r7, [sp, #16]
   1cc70:	bl	199d8 <__assert_fail@plt+0x82d4>
   1cc74:	cmp	sl, r0
   1cc78:	bhi	1ccdc <__assert_fail@plt+0xb5d8>
   1cc7c:	add	r7, r0, #1
   1cc80:	movw	r3, #13252	; 0x33c4
   1cc84:	movt	r3, #3
   1cc88:	cmp	r5, r3
   1cc8c:	str	r7, [r4]
   1cc90:	beq	1cc9c <__assert_fail@plt+0xb598>
   1cc94:	mov	r0, r5
   1cc98:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1cc9c:	mov	r0, r7
   1cca0:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1cca4:	ldr	r3, [sp, #40]	; 0x28
   1cca8:	mov	r2, fp
   1ccac:	mov	r1, r7
   1ccb0:	mov	r5, r0
   1ccb4:	ldr	lr, [sp, #80]	; 0x50
   1ccb8:	ldr	ip, [sp, #84]	; 0x54
   1ccbc:	str	r0, [r4, #4]
   1ccc0:	add	r4, sp, #48	; 0x30
   1ccc4:	stm	sp, {r3, r6}
   1ccc8:	mvn	r3, #0
   1cccc:	str	r4, [sp, #8]
   1ccd0:	str	lr, [sp, #12]
   1ccd4:	str	ip, [sp, #16]
   1ccd8:	bl	199d8 <__assert_fail@plt+0x82d4>
   1ccdc:	ldr	r3, [sp, #28]
   1cce0:	mov	r0, r5
   1cce4:	str	r3, [r9]
   1cce8:	add	sp, sp, #92	; 0x5c
   1ccec:	ldrd	r4, [sp]
   1ccf0:	ldrd	r6, [sp, #8]
   1ccf4:	ldrd	r8, [sp, #16]
   1ccf8:	ldrd	sl, [sp, #24]
   1ccfc:	add	sp, sp, #32
   1cd00:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd04:	mov	r1, #8
   1cd08:	mvn	r3, #-2147483648	; 0x80000000
   1cd0c:	mov	r0, r6
   1cd10:	str	r1, [sp]
   1cd14:	add	r1, sp, #36	; 0x24
   1cd18:	bl	1df60 <__assert_fail@plt+0xc85c>
   1cd1c:	ldrd	r2, [r5, #8]
   1cd20:	mov	r4, r0
   1cd24:	str	r0, [r5]
   1cd28:	strd	r2, [r0]
   1cd2c:	b	1cc0c <__assert_fail@plt+0xb508>
   1cd30:	bl	116e0 <abort@plt>
   1cd34:	andeq	r3, r3, r4, asr #9
   1cd38:	ldr	ip, [pc, #536]	; 1cf58 <__assert_fail@plt+0xb854>
   1cd3c:	cmp	r0, #0
   1cd40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cd44:	ldrd	r4, [ip, #16]
   1cd48:	strd	r6, [sp, #8]
   1cd4c:	mov	r6, r1
   1cd50:	mov	r7, r0
   1cd54:	strd	r8, [sp, #16]
   1cd58:	mov	r9, #10
   1cd5c:	strd	sl, [sp, #24]
   1cd60:	mov	sl, r2
   1cd64:	mov	fp, r3
   1cd68:	str	lr, [sp, #32]
   1cd6c:	clz	lr, r1
   1cd70:	sub	sp, sp, #92	; 0x5c
   1cd74:	ldrd	r2, [ip]
   1cd78:	lsr	lr, lr, #5
   1cd7c:	moveq	lr, #1
   1cd80:	ldrd	r0, [ip, #8]
   1cd84:	cmp	lr, #0
   1cd88:	strd	r4, [sp, #56]	; 0x38
   1cd8c:	ldrd	r4, [ip, #40]	; 0x28
   1cd90:	str	lr, [sp, #28]
   1cd94:	strd	r2, [sp, #40]	; 0x28
   1cd98:	ldrd	r2, [ip, #24]
   1cd9c:	strd	r0, [sp, #48]	; 0x30
   1cda0:	ldrd	r0, [ip, #32]
   1cda4:	str	r9, [sp, #40]	; 0x28
   1cda8:	strd	r2, [sp, #64]	; 0x40
   1cdac:	strd	r4, [sp, #80]	; 0x50
   1cdb0:	strd	r0, [sp, #72]	; 0x48
   1cdb4:	bne	1cf54 <__assert_fail@plt+0xb850>
   1cdb8:	movw	r5, #13020	; 0x32dc
   1cdbc:	movt	r5, #3
   1cdc0:	str	r7, [sp, #80]	; 0x50
   1cdc4:	str	r6, [sp, #84]	; 0x54
   1cdc8:	bl	1156c <__errno_location@plt>
   1cdcc:	ldr	r3, [r0]
   1cdd0:	mov	r8, r0
   1cdd4:	ldr	r2, [r5, #4]
   1cdd8:	ldr	r4, [r5]
   1cddc:	str	r3, [sp, #24]
   1cde0:	cmp	r2, #0
   1cde4:	movgt	r1, r9
   1cde8:	bgt	1ce50 <__assert_fail@plt+0xb74c>
   1cdec:	add	r3, r5, #8
   1cdf0:	str	r2, [sp, #36]	; 0x24
   1cdf4:	rsb	r2, r2, #1
   1cdf8:	cmp	r4, r3
   1cdfc:	beq	1cf28 <__assert_fail@plt+0xb824>
   1ce00:	mov	r1, #8
   1ce04:	mov	r0, r4
   1ce08:	mvn	r3, #-2147483648	; 0x80000000
   1ce0c:	str	r1, [sp]
   1ce10:	add	r1, sp, #36	; 0x24
   1ce14:	bl	1df60 <__assert_fail@plt+0xc85c>
   1ce18:	mov	r4, r0
   1ce1c:	str	r0, [r5]
   1ce20:	ldr	r0, [r5, #4]
   1ce24:	mov	r1, #0
   1ce28:	ldr	r2, [sp, #36]	; 0x24
   1ce2c:	sub	r2, r2, r0
   1ce30:	add	r0, r4, r0, lsl #3
   1ce34:	lsl	r2, r2, #3
   1ce38:	bl	11590 <memset@plt>
   1ce3c:	ldr	r3, [sp, #36]	; 0x24
   1ce40:	ldr	r1, [sp, #40]	; 0x28
   1ce44:	ldr	r7, [sp, #80]	; 0x50
   1ce48:	str	r3, [r5, #4]
   1ce4c:	ldr	r6, [sp, #84]	; 0x54
   1ce50:	mov	r3, fp
   1ce54:	mov	r2, sl
   1ce58:	ldr	r0, [sp, #44]	; 0x2c
   1ce5c:	ldr	r9, [r4]
   1ce60:	ldr	r5, [r4, #4]
   1ce64:	orr	r0, r0, #1
   1ce68:	str	r1, [sp]
   1ce6c:	add	r1, sp, #48	; 0x30
   1ce70:	str	r0, [sp, #4]
   1ce74:	str	r1, [sp, #8]
   1ce78:	mov	r1, r9
   1ce7c:	str	r7, [sp, #12]
   1ce80:	str	r6, [sp, #16]
   1ce84:	str	r0, [sp, #28]
   1ce88:	mov	r0, r5
   1ce8c:	bl	199d8 <__assert_fail@plt+0x82d4>
   1ce90:	cmp	r9, r0
   1ce94:	bhi	1cf00 <__assert_fail@plt+0xb7fc>
   1ce98:	add	r6, r0, #1
   1ce9c:	movw	r3, #13252	; 0x33c4
   1cea0:	movt	r3, #3
   1cea4:	cmp	r5, r3
   1cea8:	str	r6, [r4]
   1ceac:	beq	1ceb8 <__assert_fail@plt+0xb7b4>
   1ceb0:	mov	r0, r5
   1ceb4:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1ceb8:	mov	r0, r6
   1cebc:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1cec0:	ldr	lr, [sp, #40]	; 0x28
   1cec4:	mov	r1, r6
   1cec8:	mov	r3, fp
   1cecc:	mov	r2, sl
   1ced0:	mov	r5, r0
   1ced4:	ldr	r6, [sp, #80]	; 0x50
   1ced8:	ldr	ip, [sp, #84]	; 0x54
   1cedc:	str	r0, [r4, #4]
   1cee0:	str	lr, [sp]
   1cee4:	ldr	lr, [sp, #28]
   1cee8:	str	lr, [sp, #4]
   1ceec:	add	lr, sp, #48	; 0x30
   1cef0:	str	r6, [sp, #12]
   1cef4:	str	lr, [sp, #8]
   1cef8:	str	ip, [sp, #16]
   1cefc:	bl	199d8 <__assert_fail@plt+0x82d4>
   1cf00:	ldr	r3, [sp, #24]
   1cf04:	mov	r0, r5
   1cf08:	str	r3, [r8]
   1cf0c:	add	sp, sp, #92	; 0x5c
   1cf10:	ldrd	r4, [sp]
   1cf14:	ldrd	r6, [sp, #8]
   1cf18:	ldrd	r8, [sp, #16]
   1cf1c:	ldrd	sl, [sp, #24]
   1cf20:	add	sp, sp, #32
   1cf24:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf28:	mov	r1, #8
   1cf2c:	mvn	r3, #-2147483648	; 0x80000000
   1cf30:	ldr	r0, [sp, #28]
   1cf34:	str	r1, [sp]
   1cf38:	add	r1, sp, #36	; 0x24
   1cf3c:	bl	1df60 <__assert_fail@plt+0xc85c>
   1cf40:	ldrd	r2, [r5, #8]
   1cf44:	mov	r4, r0
   1cf48:	str	r0, [r5]
   1cf4c:	strd	r2, [r0]
   1cf50:	b	1ce20 <__assert_fail@plt+0xb71c>
   1cf54:	bl	116e0 <abort@plt>
   1cf58:	andeq	r3, r3, r4, asr #9
   1cf5c:	ldr	r3, [pc]	; 1cf64 <__assert_fail@plt+0xb860>
   1cf60:	b	1b3c4 <__assert_fail@plt+0x9cc0>
   1cf64:	andeq	r3, r3, ip, ror #5
   1cf68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cf6c:	movw	r4, #13020	; 0x32dc
   1cf70:	movt	r4, #3
   1cf74:	strd	r6, [sp, #8]
   1cf78:	strd	r8, [sp, #16]
   1cf7c:	strd	sl, [sp, #24]
   1cf80:	mov	sl, r0
   1cf84:	mov	fp, r1
   1cf88:	str	lr, [sp, #32]
   1cf8c:	sub	sp, sp, #44	; 0x2c
   1cf90:	bl	1156c <__errno_location@plt>
   1cf94:	ldr	r3, [r0]
   1cf98:	mov	r8, r0
   1cf9c:	ldr	r2, [r4, #4]
   1cfa0:	ldr	r5, [r4]
   1cfa4:	str	r3, [sp, #28]
   1cfa8:	cmp	r2, #0
   1cfac:	bgt	1d008 <__assert_fail@plt+0xb904>
   1cfb0:	add	r3, r4, #8
   1cfb4:	str	r2, [sp, #36]	; 0x24
   1cfb8:	rsb	r2, r2, #1
   1cfbc:	cmp	r5, r3
   1cfc0:	beq	1d0e4 <__assert_fail@plt+0xb9e0>
   1cfc4:	mov	r1, #8
   1cfc8:	mov	r0, r5
   1cfcc:	mvn	r3, #-2147483648	; 0x80000000
   1cfd0:	str	r1, [sp]
   1cfd4:	add	r1, sp, #36	; 0x24
   1cfd8:	bl	1df60 <__assert_fail@plt+0xc85c>
   1cfdc:	mov	r5, r0
   1cfe0:	str	r0, [r4]
   1cfe4:	ldr	r0, [r4, #4]
   1cfe8:	mov	r1, #0
   1cfec:	ldr	r2, [sp, #36]	; 0x24
   1cff0:	sub	r2, r2, r0
   1cff4:	add	r0, r5, r0, lsl #3
   1cff8:	lsl	r2, r2, #3
   1cffc:	bl	11590 <memset@plt>
   1d000:	ldr	r3, [sp, #36]	; 0x24
   1d004:	str	r3, [r4, #4]
   1d008:	ldr	ip, [r4, #16]
   1d00c:	mov	r3, fp
   1d010:	mov	r2, sl
   1d014:	ldr	r7, [r4, #20]
   1d018:	ldr	r0, [pc, #240]	; 1d110 <__assert_fail@plt+0xba0c>
   1d01c:	ldr	r9, [r5]
   1d020:	orr	r7, r7, #1
   1d024:	ldr	r6, [r5, #4]
   1d028:	str	ip, [sp]
   1d02c:	ldr	ip, [r4, #56]	; 0x38
   1d030:	mov	r1, r9
   1d034:	str	r7, [sp, #4]
   1d038:	ldr	lr, [r4, #60]	; 0x3c
   1d03c:	str	r0, [sp, #8]
   1d040:	mov	r0, r6
   1d044:	str	ip, [sp, #12]
   1d048:	str	lr, [sp, #16]
   1d04c:	bl	199d8 <__assert_fail@plt+0x82d4>
   1d050:	cmp	r9, r0
   1d054:	bhi	1d0bc <__assert_fail@plt+0xb9b8>
   1d058:	add	r9, r0, #1
   1d05c:	movw	r3, #13252	; 0x33c4
   1d060:	movt	r3, #3
   1d064:	cmp	r6, r3
   1d068:	str	r9, [r5]
   1d06c:	beq	1d078 <__assert_fail@plt+0xb974>
   1d070:	mov	r0, r6
   1d074:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1d078:	mov	r0, r9
   1d07c:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1d080:	ldr	ip, [r4, #16]
   1d084:	mov	r1, r9
   1d088:	mov	r3, fp
   1d08c:	mov	r2, sl
   1d090:	mov	r6, r0
   1d094:	ldr	r9, [r4, #56]	; 0x38
   1d098:	ldr	lr, [r4, #60]	; 0x3c
   1d09c:	str	r0, [r5, #4]
   1d0a0:	str	ip, [sp]
   1d0a4:	ldr	ip, [pc, #100]	; 1d110 <__assert_fail@plt+0xba0c>
   1d0a8:	str	r7, [sp, #4]
   1d0ac:	str	ip, [sp, #8]
   1d0b0:	str	r9, [sp, #12]
   1d0b4:	str	lr, [sp, #16]
   1d0b8:	bl	199d8 <__assert_fail@plt+0x82d4>
   1d0bc:	ldr	r3, [sp, #28]
   1d0c0:	mov	r0, r6
   1d0c4:	str	r3, [r8]
   1d0c8:	add	sp, sp, #44	; 0x2c
   1d0cc:	ldrd	r4, [sp]
   1d0d0:	ldrd	r6, [sp, #8]
   1d0d4:	ldrd	r8, [sp, #16]
   1d0d8:	ldrd	sl, [sp, #24]
   1d0dc:	add	sp, sp, #32
   1d0e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0e4:	mov	r0, #8
   1d0e8:	mvn	r3, #-2147483648	; 0x80000000
   1d0ec:	add	r1, sp, #36	; 0x24
   1d0f0:	str	r0, [sp]
   1d0f4:	mov	r0, #0
   1d0f8:	bl	1df60 <__assert_fail@plt+0xc85c>
   1d0fc:	ldrd	r2, [r4, #8]
   1d100:	mov	r5, r0
   1d104:	str	r0, [r4]
   1d108:	strd	r2, [r0]
   1d10c:	b	1cfe4 <__assert_fail@plt+0xb8e0>
   1d110:	strdeq	r3, [r3], -r4
   1d114:	ldr	r3, [pc, #4]	; 1d120 <__assert_fail@plt+0xba1c>
   1d118:	mvn	r2, #0
   1d11c:	b	1b3c4 <__assert_fail@plt+0x9cc0>
   1d120:	andeq	r3, r3, ip, ror #5
   1d124:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d128:	movw	r4, #13020	; 0x32dc
   1d12c:	movt	r4, #3
   1d130:	strd	r6, [sp, #8]
   1d134:	strd	r8, [sp, #16]
   1d138:	strd	sl, [sp, #24]
   1d13c:	mov	sl, r0
   1d140:	str	lr, [sp, #32]
   1d144:	sub	sp, sp, #44	; 0x2c
   1d148:	bl	1156c <__errno_location@plt>
   1d14c:	ldr	r3, [r0]
   1d150:	mov	r8, r0
   1d154:	ldr	r2, [r4, #4]
   1d158:	ldr	r5, [r4]
   1d15c:	str	r3, [sp, #28]
   1d160:	cmp	r2, #0
   1d164:	bgt	1d1c0 <__assert_fail@plt+0xbabc>
   1d168:	add	r3, r4, #8
   1d16c:	str	r2, [sp, #36]	; 0x24
   1d170:	rsb	r2, r2, #1
   1d174:	cmp	r5, r3
   1d178:	beq	1d288 <__assert_fail@plt+0xbb84>
   1d17c:	mov	r1, #8
   1d180:	mov	r0, r5
   1d184:	mvn	r3, #-2147483648	; 0x80000000
   1d188:	str	r1, [sp]
   1d18c:	add	r1, sp, #36	; 0x24
   1d190:	bl	1df60 <__assert_fail@plt+0xc85c>
   1d194:	mov	r5, r0
   1d198:	str	r0, [r4]
   1d19c:	ldr	r0, [r4, #4]
   1d1a0:	mov	r1, #0
   1d1a4:	ldr	r2, [sp, #36]	; 0x24
   1d1a8:	sub	r2, r2, r0
   1d1ac:	add	r0, r5, r0, lsl #3
   1d1b0:	lsl	r2, r2, #3
   1d1b4:	bl	11590 <memset@plt>
   1d1b8:	ldr	r3, [sp, #36]	; 0x24
   1d1bc:	str	r3, [r4, #4]
   1d1c0:	ldr	ip, [r4, #16]
   1d1c4:	mvn	r3, #0
   1d1c8:	mov	r2, sl
   1d1cc:	ldr	r7, [r4, #20]
   1d1d0:	ldr	fp, [pc, #220]	; 1d2b4 <__assert_fail@plt+0xbbb0>
   1d1d4:	ldr	r9, [r5]
   1d1d8:	orr	r7, r7, #1
   1d1dc:	ldr	r6, [r5, #4]
   1d1e0:	str	ip, [sp]
   1d1e4:	ldr	ip, [r4, #56]	; 0x38
   1d1e8:	mov	r1, r9
   1d1ec:	stmib	sp, {r7, fp}
   1d1f0:	ldr	lr, [r4, #60]	; 0x3c
   1d1f4:	mov	r0, r6
   1d1f8:	str	ip, [sp, #12]
   1d1fc:	str	lr, [sp, #16]
   1d200:	bl	199d8 <__assert_fail@plt+0x82d4>
   1d204:	cmp	r9, r0
   1d208:	bhi	1d260 <__assert_fail@plt+0xbb5c>
   1d20c:	add	r9, r0, #1
   1d210:	movw	r3, #13252	; 0x33c4
   1d214:	movt	r3, #3
   1d218:	cmp	r6, r3
   1d21c:	str	r9, [r5]
   1d220:	beq	1d22c <__assert_fail@plt+0xbb28>
   1d224:	mov	r0, r6
   1d228:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1d22c:	mov	r0, r9
   1d230:	bl	1dcbc <__assert_fail@plt+0xc5b8>
   1d234:	ldr	r3, [r4, #16]
   1d238:	mov	r2, sl
   1d23c:	mov	r1, r9
   1d240:	mov	r6, r0
   1d244:	ldr	lr, [r4, #56]	; 0x38
   1d248:	ldr	ip, [r4, #60]	; 0x3c
   1d24c:	str	r0, [r5, #4]
   1d250:	stm	sp, {r3, r7, fp, lr}
   1d254:	mvn	r3, #0
   1d258:	str	ip, [sp, #16]
   1d25c:	bl	199d8 <__assert_fail@plt+0x82d4>
   1d260:	ldr	r3, [sp, #28]
   1d264:	mov	r0, r6
   1d268:	str	r3, [r8]
   1d26c:	add	sp, sp, #44	; 0x2c
   1d270:	ldrd	r4, [sp]
   1d274:	ldrd	r6, [sp, #8]
   1d278:	ldrd	r8, [sp, #16]
   1d27c:	ldrd	sl, [sp, #24]
   1d280:	add	sp, sp, #32
   1d284:	pop	{pc}		; (ldr pc, [sp], #4)
   1d288:	mov	r0, #8
   1d28c:	mvn	r3, #-2147483648	; 0x80000000
   1d290:	add	r1, sp, #36	; 0x24
   1d294:	str	r0, [sp]
   1d298:	mov	r0, #0
   1d29c:	bl	1df60 <__assert_fail@plt+0xc85c>
   1d2a0:	ldrd	r2, [r4, #8]
   1d2a4:	mov	r5, r0
   1d2a8:	str	r0, [r4]
   1d2ac:	strd	r2, [r0]
   1d2b0:	b	1d19c <__assert_fail@plt+0xba98>
   1d2b4:	strdeq	r3, [r3], -r4
   1d2b8:	strd	r4, [sp, #-16]!
   1d2bc:	mov	r5, r0
   1d2c0:	mov	r4, #0
   1d2c4:	movw	r0, #8632	; 0x21b8
   1d2c8:	movt	r0, #2
   1d2cc:	str	r6, [sp, #8]
   1d2d0:	mov	r1, #524288	; 0x80000
   1d2d4:	str	lr, [sp, #12]
   1d2d8:	str	r4, [r5, #4]
   1d2dc:	bl	205fc <__assert_fail@plt+0xeef8>
   1d2e0:	cmp	r0, r4
   1d2e4:	str	r0, [r5]
   1d2e8:	movge	r0, r4
   1d2ec:	blt	1d300 <__assert_fail@plt+0xbbfc>
   1d2f0:	ldrd	r4, [sp]
   1d2f4:	ldr	r6, [sp, #8]
   1d2f8:	add	sp, sp, #12
   1d2fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d300:	mov	r1, r4
   1d304:	mov	r0, r4
   1d308:	bl	11524 <getcwd@plt>
   1d30c:	clz	r4, r0
   1d310:	str	r0, [r5, #4]
   1d314:	lsr	r4, r4, #5
   1d318:	ldr	r6, [sp, #8]
   1d31c:	rsb	r0, r4, #0
   1d320:	ldrd	r4, [sp]
   1d324:	add	sp, sp, #12
   1d328:	pop	{pc}		; (ldr pc, [sp], #4)
   1d32c:	ldr	r3, [r0]
   1d330:	cmp	r3, #0
   1d334:	blt	1d340 <__assert_fail@plt+0xbc3c>
   1d338:	mov	r0, r3
   1d33c:	b	11674 <fchdir@plt>
   1d340:	ldr	r0, [r0, #4]
   1d344:	b	20174 <__assert_fail@plt+0xea70>
   1d348:	str	r4, [sp, #-8]!
   1d34c:	mov	r4, r0
   1d350:	ldr	r0, [r0]
   1d354:	str	lr, [sp, #4]
   1d358:	cmp	r0, #0
   1d35c:	blt	1d364 <__assert_fail@plt+0xbc60>
   1d360:	bl	116ec <close@plt>
   1d364:	ldr	r0, [r4, #4]
   1d368:	ldr	r4, [sp]
   1d36c:	ldr	lr, [sp, #4]
   1d370:	add	sp, sp, #8
   1d374:	b	156a4 <__assert_fail@plt+0x3fa0>
   1d378:	strd	r4, [sp, #-16]!
   1d37c:	ldr	r4, [r0], #8
   1d380:	str	r6, [sp, #8]
   1d384:	str	lr, [sp, #12]
   1d388:	cmp	r4, r0
   1d38c:	beq	1d3b8 <__assert_fail@plt+0xbcb4>
   1d390:	mov	r0, r4
   1d394:	bl	1f14c <__assert_fail@plt+0xda48>
   1d398:	cmp	r0, #0
   1d39c:	movne	r3, r0
   1d3a0:	moveq	r3, r4
   1d3a4:	ldrd	r4, [sp]
   1d3a8:	mov	r0, r3
   1d3ac:	ldr	r6, [sp, #8]
   1d3b0:	add	sp, sp, #12
   1d3b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3b8:	mov	r0, r1
   1d3bc:	mov	r5, r1
   1d3c0:	bl	1f110 <__assert_fail@plt+0xda0c>
   1d3c4:	subs	r3, r0, #0
   1d3c8:	beq	1d3a4 <__assert_fail@plt+0xbca0>
   1d3cc:	mov	r2, r5
   1d3d0:	mov	r1, r4
   1d3d4:	ldrd	r4, [sp]
   1d3d8:	ldr	r6, [sp, #8]
   1d3dc:	ldr	lr, [sp, #12]
   1d3e0:	add	sp, sp, #16
   1d3e4:	b	11374 <memcpy@plt>
   1d3e8:	strd	r4, [sp, #-16]!
   1d3ec:	mov	r5, r0
   1d3f0:	mov	r4, r0
   1d3f4:	ldr	r3, [r0, #4]
   1d3f8:	ldr	r0, [r5], #8
   1d3fc:	str	r6, [sp, #8]
   1d400:	str	lr, [sp, #12]
   1d404:	lsl	r6, r3, #1
   1d408:	cmp	r0, r5
   1d40c:	beq	1d418 <__assert_fail@plt+0xbd14>
   1d410:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1d414:	ldr	r3, [r4, #4]
   1d418:	cmp	r6, r3
   1d41c:	bcc	1d454 <__assert_fail@plt+0xbd50>
   1d420:	mov	r0, r6
   1d424:	bl	1f110 <__assert_fail@plt+0xda0c>
   1d428:	cmp	r0, #0
   1d42c:	mov	r3, r0
   1d430:	mov	r2, r0
   1d434:	beq	1d470 <__assert_fail@plt+0xbd6c>
   1d438:	mov	r2, #1
   1d43c:	stm	r4, {r3, r6}
   1d440:	mov	r0, r2
   1d444:	ldrd	r4, [sp]
   1d448:	ldr	r6, [sp, #8]
   1d44c:	add	sp, sp, #12
   1d450:	pop	{pc}		; (ldr pc, [sp], #4)
   1d454:	bl	1156c <__errno_location@plt>
   1d458:	mov	r1, #12
   1d45c:	mov	r3, r5
   1d460:	mov	r6, #1024	; 0x400
   1d464:	mov	r2, #0
   1d468:	str	r1, [r0]
   1d46c:	b	1d43c <__assert_fail@plt+0xbd38>
   1d470:	mov	r3, r5
   1d474:	mov	r6, #1024	; 0x400
   1d478:	b	1d43c <__assert_fail@plt+0xbd38>
   1d47c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d480:	mov	r5, r0
   1d484:	mov	r4, r0
   1d488:	ldr	r3, [r0, #4]
   1d48c:	strd	r6, [sp, #8]
   1d490:	ldr	r7, [r5], #8
   1d494:	str	r8, [sp, #16]
   1d498:	str	lr, [sp, #20]
   1d49c:	lsl	r6, r3, #1
   1d4a0:	cmp	r7, r5
   1d4a4:	beq	1d4e8 <__assert_fail@plt+0xbde4>
   1d4a8:	cmp	r3, r6
   1d4ac:	bhi	1d50c <__assert_fail@plt+0xbe08>
   1d4b0:	mov	r0, r7
   1d4b4:	mov	r1, r6
   1d4b8:	bl	1f14c <__assert_fail@plt+0xda48>
   1d4bc:	subs	r8, r0, #0
   1d4c0:	ldreq	r7, [r4]
   1d4c4:	beq	1d518 <__assert_fail@plt+0xbe14>
   1d4c8:	mov	r0, #1
   1d4cc:	str	r8, [r4]
   1d4d0:	str	r6, [r4, #4]
   1d4d4:	ldrd	r4, [sp]
   1d4d8:	ldrd	r6, [sp, #8]
   1d4dc:	ldr	r8, [sp, #16]
   1d4e0:	add	sp, sp, #20
   1d4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4e8:	mov	r0, r6
   1d4ec:	bl	1f110 <__assert_fail@plt+0xda0c>
   1d4f0:	subs	r8, r0, #0
   1d4f4:	moveq	r0, r8
   1d4f8:	beq	1d4d4 <__assert_fail@plt+0xbdd0>
   1d4fc:	mov	r1, r7
   1d500:	ldr	r2, [r4, #4]
   1d504:	bl	11374 <memcpy@plt>
   1d508:	b	1d4c8 <__assert_fail@plt+0xbdc4>
   1d50c:	bl	1156c <__errno_location@plt>
   1d510:	mov	r3, #12
   1d514:	str	r3, [r0]
   1d518:	mov	r0, r7
   1d51c:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1d520:	mov	r3, #1024	; 0x400
   1d524:	mov	r0, #0
   1d528:	str	r5, [r4]
   1d52c:	str	r3, [r4, #4]
   1d530:	b	1d4d4 <__assert_fail@plt+0xbdd0>
   1d534:	cmp	r1, #0
   1d538:	strd	r4, [sp, #-16]!
   1d53c:	mov	ip, r3
   1d540:	str	r6, [sp, #8]
   1d544:	mov	r4, r0
   1d548:	str	lr, [sp, #12]
   1d54c:	sub	sp, sp, #32
   1d550:	ldr	r5, [sp, #48]	; 0x30
   1d554:	ldr	r6, [sp, #52]	; 0x34
   1d558:	beq	1d69c <__assert_fail@plt+0xbf98>
   1d55c:	mov	r3, r1
   1d560:	mov	r1, #1
   1d564:	stm	sp, {r2, ip}
   1d568:	movw	r2, #9584	; 0x2570
   1d56c:	movt	r2, #2
   1d570:	bl	115c0 <__fprintf_chk@plt>
   1d574:	mov	r2, #5
   1d578:	movw	r1, #9604	; 0x2584
   1d57c:	movt	r1, #2
   1d580:	mov	r0, #0
   1d584:	bl	113bc <dcgettext@plt>
   1d588:	movw	ip, #2022	; 0x7e6
   1d58c:	mov	r3, r0
   1d590:	mov	r1, #1
   1d594:	movw	r2, #10332	; 0x285c
   1d598:	movt	r2, #2
   1d59c:	mov	r0, r4
   1d5a0:	str	ip, [sp]
   1d5a4:	bl	115c0 <__fprintf_chk@plt>
   1d5a8:	mov	r1, r4
   1d5ac:	mov	r0, #10
   1d5b0:	bl	113a4 <fputc_unlocked@plt>
   1d5b4:	mov	r2, #5
   1d5b8:	movw	r1, #9608	; 0x2588
   1d5bc:	movt	r1, #2
   1d5c0:	mov	r0, #0
   1d5c4:	bl	113bc <dcgettext@plt>
   1d5c8:	mov	r2, r0
   1d5cc:	mov	r1, #1
   1d5d0:	movw	r3, #9780	; 0x2634
   1d5d4:	movt	r3, #2
   1d5d8:	mov	r0, r4
   1d5dc:	bl	115c0 <__fprintf_chk@plt>
   1d5e0:	mov	r1, r4
   1d5e4:	mov	r0, #10
   1d5e8:	bl	113a4 <fputc_unlocked@plt>
   1d5ec:	cmp	r6, #9
   1d5f0:	ldrls	pc, [pc, r6, lsl #2]
   1d5f4:	b	1d908 <__assert_fail@plt+0xc204>
   1d5f8:	andeq	sp, r1, r8, lsl #13
   1d5fc:			; <UNDEFINED> instruction: 0x0001d6b8
   1d600:	strdeq	sp, [r1], -r4
   1d604:	andeq	sp, r1, r4, lsr r7
   1d608:	andeq	sp, r1, ip, ror r7
   1d60c:			; <UNDEFINED> instruction: 0x0001d7b4
   1d610:	strdeq	sp, [r1], -ip
   1d614:	andeq	sp, r1, r0, asr r8
   1d618:	andeq	sp, r1, r8, lsr #17
   1d61c:	andeq	sp, r1, r0, lsr #12
   1d620:	movw	r1, #10084	; 0x2764
   1d624:	movt	r1, #2
   1d628:	mov	r2, #5
   1d62c:	mov	r0, #0
   1d630:	bl	113bc <dcgettext@plt>
   1d634:	ldr	lr, [r5, #4]
   1d638:	mov	r2, r0
   1d63c:	mov	r1, #1
   1d640:	mov	r0, r4
   1d644:	ldr	r3, [r5, #8]
   1d648:	ldr	ip, [r5, #32]
   1d64c:	str	lr, [sp]
   1d650:	ldr	lr, [r5, #12]
   1d654:	str	ip, [sp, #28]
   1d658:	ldr	ip, [r5, #28]
   1d65c:	str	r3, [sp, #4]
   1d660:	ldr	r3, [r5, #16]
   1d664:	str	lr, [sp, #8]
   1d668:	ldr	lr, [r5, #20]
   1d66c:	str	ip, [sp, #24]
   1d670:	ldr	ip, [r5, #24]
   1d674:	str	r3, [sp, #12]
   1d678:	ldr	r3, [r5]
   1d67c:	str	lr, [sp, #16]
   1d680:	str	ip, [sp, #20]
   1d684:	bl	115c0 <__fprintf_chk@plt>
   1d688:	add	sp, sp, #32
   1d68c:	ldrd	r4, [sp]
   1d690:	ldr	r6, [sp, #8]
   1d694:	add	sp, sp, #12
   1d698:	pop	{pc}		; (ldr pc, [sp], #4)
   1d69c:	mov	r3, r2
   1d6a0:	mov	r1, #1
   1d6a4:	str	ip, [sp]
   1d6a8:	movw	r2, #9596	; 0x257c
   1d6ac:	movt	r2, #2
   1d6b0:	bl	115c0 <__fprintf_chk@plt>
   1d6b4:	b	1d574 <__assert_fail@plt+0xbe70>
   1d6b8:	mov	r2, #5
   1d6bc:	movw	r1, #9816	; 0x2658
   1d6c0:	movt	r1, #2
   1d6c4:	mov	r0, #0
   1d6c8:	bl	113bc <dcgettext@plt>
   1d6cc:	ldr	r3, [r5]
   1d6d0:	mov	r2, r0
   1d6d4:	mov	r1, #1
   1d6d8:	mov	r0, r4
   1d6dc:	add	sp, sp, #32
   1d6e0:	ldrd	r4, [sp]
   1d6e4:	ldr	r6, [sp, #8]
   1d6e8:	ldr	lr, [sp, #12]
   1d6ec:	add	sp, sp, #16
   1d6f0:	b	115c0 <__fprintf_chk@plt>
   1d6f4:	mov	r2, #5
   1d6f8:	movw	r1, #9832	; 0x2668
   1d6fc:	movt	r1, #2
   1d700:	mov	r0, #0
   1d704:	bl	113bc <dcgettext@plt>
   1d708:	ldm	r5, {r3, ip}
   1d70c:	mov	r2, r0
   1d710:	mov	r1, #1
   1d714:	mov	r0, r4
   1d718:	str	ip, [sp, #48]	; 0x30
   1d71c:	add	sp, sp, #32
   1d720:	ldrd	r4, [sp]
   1d724:	ldr	r6, [sp, #8]
   1d728:	ldr	lr, [sp, #12]
   1d72c:	add	sp, sp, #16
   1d730:	b	115c0 <__fprintf_chk@plt>
   1d734:	mov	r2, #5
   1d738:	movw	r1, #9856	; 0x2680
   1d73c:	movt	r1, #2
   1d740:	mov	r0, #0
   1d744:	bl	113bc <dcgettext@plt>
   1d748:	ldm	r5, {r3, lr}
   1d74c:	mov	r2, r0
   1d750:	mov	r1, #1
   1d754:	mov	r0, r4
   1d758:	ldr	ip, [r5, #8]
   1d75c:	str	lr, [sp, #48]	; 0x30
   1d760:	str	ip, [sp, #52]	; 0x34
   1d764:	add	sp, sp, #32
   1d768:	ldrd	r4, [sp]
   1d76c:	ldr	r6, [sp, #8]
   1d770:	ldr	lr, [sp, #12]
   1d774:	add	sp, sp, #16
   1d778:	b	115c0 <__fprintf_chk@plt>
   1d77c:	mov	r2, #5
   1d780:	movw	r1, #9884	; 0x269c
   1d784:	movt	r1, #2
   1d788:	mov	r0, #0
   1d78c:	bl	113bc <dcgettext@plt>
   1d790:	ldmib	r5, {r3, ip, lr}
   1d794:	mov	r2, r0
   1d798:	mov	r1, #1
   1d79c:	mov	r0, r4
   1d7a0:	str	r3, [sp]
   1d7a4:	ldr	r3, [r5]
   1d7a8:	stmib	sp, {ip, lr}
   1d7ac:	bl	115c0 <__fprintf_chk@plt>
   1d7b0:	b	1d688 <__assert_fail@plt+0xbf84>
   1d7b4:	mov	r2, #5
   1d7b8:	movw	r1, #9916	; 0x26bc
   1d7bc:	movt	r1, #2
   1d7c0:	mov	r0, #0
   1d7c4:	bl	113bc <dcgettext@plt>
   1d7c8:	ldmib	r5, {ip, lr}
   1d7cc:	mov	r2, r0
   1d7d0:	mov	r1, #1
   1d7d4:	mov	r0, r4
   1d7d8:	ldr	r3, [r5, #16]
   1d7dc:	str	ip, [sp]
   1d7e0:	ldr	ip, [r5, #12]
   1d7e4:	str	r3, [sp, #12]
   1d7e8:	ldr	r3, [r5]
   1d7ec:	str	lr, [sp, #4]
   1d7f0:	str	ip, [sp, #8]
   1d7f4:	bl	115c0 <__fprintf_chk@plt>
   1d7f8:	b	1d688 <__assert_fail@plt+0xbf84>
   1d7fc:	mov	r2, #5
   1d800:	movw	r1, #9952	; 0x26e0
   1d804:	movt	r1, #2
   1d808:	mov	r0, #0
   1d80c:	bl	113bc <dcgettext@plt>
   1d810:	ldr	lr, [r5, #4]
   1d814:	mov	r2, r0
   1d818:	mov	r1, #1
   1d81c:	mov	r0, r4
   1d820:	ldr	r3, [r5, #8]
   1d824:	ldr	ip, [r5, #20]
   1d828:	str	lr, [sp]
   1d82c:	ldr	lr, [r5, #12]
   1d830:	str	ip, [sp, #16]
   1d834:	ldr	ip, [r5, #16]
   1d838:	str	r3, [sp, #4]
   1d83c:	ldr	r3, [r5]
   1d840:	str	lr, [sp, #8]
   1d844:	str	ip, [sp, #12]
   1d848:	bl	115c0 <__fprintf_chk@plt>
   1d84c:	b	1d688 <__assert_fail@plt+0xbf84>
   1d850:	mov	r2, #5
   1d854:	movw	r1, #9992	; 0x2708
   1d858:	movt	r1, #2
   1d85c:	mov	r0, #0
   1d860:	bl	113bc <dcgettext@plt>
   1d864:	ldmib	r5, {r3, ip}
   1d868:	mov	r2, r0
   1d86c:	mov	r1, #1
   1d870:	mov	r0, r4
   1d874:	ldr	lr, [r5, #24]
   1d878:	str	r3, [sp]
   1d87c:	ldr	r3, [r5, #12]
   1d880:	str	lr, [sp, #20]
   1d884:	ldr	lr, [r5, #20]
   1d888:	str	ip, [sp, #4]
   1d88c:	ldr	ip, [r5, #16]
   1d890:	str	r3, [sp, #8]
   1d894:	ldr	r3, [r5]
   1d898:	str	ip, [sp, #12]
   1d89c:	str	lr, [sp, #16]
   1d8a0:	bl	115c0 <__fprintf_chk@plt>
   1d8a4:	b	1d688 <__assert_fail@plt+0xbf84>
   1d8a8:	mov	r2, #5
   1d8ac:	movw	r1, #10036	; 0x2734
   1d8b0:	movt	r1, #2
   1d8b4:	mov	r0, #0
   1d8b8:	bl	113bc <dcgettext@plt>
   1d8bc:	ldmib	r5, {ip, lr}
   1d8c0:	mov	r2, r0
   1d8c4:	mov	r1, #1
   1d8c8:	mov	r0, r4
   1d8cc:	ldr	r3, [r5, #28]
   1d8d0:	str	ip, [sp]
   1d8d4:	ldr	ip, [r5, #12]
   1d8d8:	str	r3, [sp, #24]
   1d8dc:	ldr	r3, [r5, #24]
   1d8e0:	str	lr, [sp, #4]
   1d8e4:	ldr	lr, [r5, #16]
   1d8e8:	str	ip, [sp, #8]
   1d8ec:	ldr	ip, [r5, #20]
   1d8f0:	str	r3, [sp, #20]
   1d8f4:	ldr	r3, [r5]
   1d8f8:	str	lr, [sp, #12]
   1d8fc:	str	ip, [sp, #16]
   1d900:	bl	115c0 <__fprintf_chk@plt>
   1d904:	b	1d688 <__assert_fail@plt+0xbf84>
   1d908:	movw	r1, #10136	; 0x2798
   1d90c:	movt	r1, #2
   1d910:	b	1d628 <__assert_fail@plt+0xbf24>
   1d914:	strd	r4, [sp, #-12]!
   1d918:	str	lr, [sp, #8]
   1d91c:	sub	sp, sp, #12
   1d920:	ldr	r5, [sp, #24]
   1d924:	ldr	ip, [r5]
   1d928:	cmp	ip, #0
   1d92c:	beq	1d948 <__assert_fail@plt+0xc244>
   1d930:	mov	lr, r5
   1d934:	mov	ip, #0
   1d938:	ldr	r4, [lr, #4]!
   1d93c:	add	ip, ip, #1
   1d940:	cmp	r4, #0
   1d944:	bne	1d938 <__assert_fail@plt+0xc234>
   1d948:	stm	sp, {r5, ip}
   1d94c:	bl	1d534 <__assert_fail@plt+0xbe30>
   1d950:	add	sp, sp, #12
   1d954:	ldrd	r4, [sp]
   1d958:	add	sp, sp, #8
   1d95c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d960:	push	{lr}		; (str lr, [sp, #-4]!)
   1d964:	sub	sp, sp, #52	; 0x34
   1d968:	ldr	ip, [sp, #56]	; 0x38
   1d96c:	ldr	lr, [ip]
   1d970:	cmp	lr, #0
   1d974:	str	lr, [sp, #8]
   1d978:	beq	1da10 <__assert_fail@plt+0xc30c>
   1d97c:	ldr	lr, [ip, #4]
   1d980:	cmp	lr, #0
   1d984:	str	lr, [sp, #12]
   1d988:	beq	1da24 <__assert_fail@plt+0xc320>
   1d98c:	ldr	lr, [ip, #8]
   1d990:	cmp	lr, #0
   1d994:	str	lr, [sp, #16]
   1d998:	beq	1da2c <__assert_fail@plt+0xc328>
   1d99c:	ldr	lr, [ip, #12]
   1d9a0:	cmp	lr, #0
   1d9a4:	str	lr, [sp, #20]
   1d9a8:	beq	1da34 <__assert_fail@plt+0xc330>
   1d9ac:	ldr	lr, [ip, #16]
   1d9b0:	cmp	lr, #0
   1d9b4:	str	lr, [sp, #24]
   1d9b8:	beq	1da3c <__assert_fail@plt+0xc338>
   1d9bc:	ldr	lr, [ip, #20]
   1d9c0:	cmp	lr, #0
   1d9c4:	str	lr, [sp, #28]
   1d9c8:	beq	1da44 <__assert_fail@plt+0xc340>
   1d9cc:	ldr	lr, [ip, #24]
   1d9d0:	cmp	lr, #0
   1d9d4:	str	lr, [sp, #32]
   1d9d8:	beq	1da4c <__assert_fail@plt+0xc348>
   1d9dc:	ldr	lr, [ip, #28]
   1d9e0:	cmp	lr, #0
   1d9e4:	str	lr, [sp, #36]	; 0x24
   1d9e8:	beq	1da54 <__assert_fail@plt+0xc350>
   1d9ec:	ldr	lr, [ip, #32]
   1d9f0:	cmp	lr, #0
   1d9f4:	str	lr, [sp, #40]	; 0x28
   1d9f8:	beq	1da5c <__assert_fail@plt+0xc358>
   1d9fc:	ldr	ip, [ip, #36]	; 0x24
   1da00:	cmp	ip, #0
   1da04:	str	ip, [sp, #44]	; 0x2c
   1da08:	movne	lr, #10
   1da0c:	moveq	lr, #9
   1da10:	add	ip, sp, #8
   1da14:	stm	sp, {ip, lr}
   1da18:	bl	1d534 <__assert_fail@plt+0xbe30>
   1da1c:	add	sp, sp, #52	; 0x34
   1da20:	pop	{pc}		; (ldr pc, [sp], #4)
   1da24:	mov	lr, #1
   1da28:	b	1da10 <__assert_fail@plt+0xc30c>
   1da2c:	mov	lr, #2
   1da30:	b	1da10 <__assert_fail@plt+0xc30c>
   1da34:	mov	lr, #3
   1da38:	b	1da10 <__assert_fail@plt+0xc30c>
   1da3c:	mov	lr, #4
   1da40:	b	1da10 <__assert_fail@plt+0xc30c>
   1da44:	mov	lr, #5
   1da48:	b	1da10 <__assert_fail@plt+0xc30c>
   1da4c:	mov	lr, #6
   1da50:	b	1da10 <__assert_fail@plt+0xc30c>
   1da54:	mov	lr, #7
   1da58:	b	1da10 <__assert_fail@plt+0xc30c>
   1da5c:	mov	lr, #8
   1da60:	b	1da10 <__assert_fail@plt+0xc30c>
   1da64:	push	{r3}		; (str r3, [sp, #-4]!)
   1da68:	push	{lr}		; (str lr, [sp, #-4]!)
   1da6c:	sub	sp, sp, #56	; 0x38
   1da70:	ldr	ip, [sp, #64]	; 0x40
   1da74:	add	r3, sp, #64	; 0x40
   1da78:	str	r3, [sp, #12]
   1da7c:	cmp	ip, #0
   1da80:	str	ip, [sp, #16]
   1da84:	beq	1db1c <__assert_fail@plt+0xc418>
   1da88:	ldr	ip, [sp, #68]	; 0x44
   1da8c:	cmp	ip, #0
   1da90:	str	ip, [sp, #20]
   1da94:	beq	1db40 <__assert_fail@plt+0xc43c>
   1da98:	ldr	ip, [sp, #72]	; 0x48
   1da9c:	cmp	ip, #0
   1daa0:	str	ip, [sp, #24]
   1daa4:	beq	1db48 <__assert_fail@plt+0xc444>
   1daa8:	ldr	ip, [sp, #76]	; 0x4c
   1daac:	cmp	ip, #0
   1dab0:	str	ip, [sp, #28]
   1dab4:	beq	1db50 <__assert_fail@plt+0xc44c>
   1dab8:	ldr	ip, [sp, #80]	; 0x50
   1dabc:	cmp	ip, #0
   1dac0:	str	ip, [sp, #32]
   1dac4:	beq	1db58 <__assert_fail@plt+0xc454>
   1dac8:	ldr	ip, [sp, #84]	; 0x54
   1dacc:	cmp	ip, #0
   1dad0:	str	ip, [sp, #36]	; 0x24
   1dad4:	beq	1db60 <__assert_fail@plt+0xc45c>
   1dad8:	ldr	ip, [sp, #88]	; 0x58
   1dadc:	cmp	ip, #0
   1dae0:	str	ip, [sp, #40]	; 0x28
   1dae4:	beq	1db68 <__assert_fail@plt+0xc464>
   1dae8:	ldr	ip, [sp, #92]	; 0x5c
   1daec:	cmp	ip, #0
   1daf0:	str	ip, [sp, #44]	; 0x2c
   1daf4:	beq	1db70 <__assert_fail@plt+0xc46c>
   1daf8:	ldr	ip, [sp, #96]	; 0x60
   1dafc:	cmp	ip, #0
   1db00:	str	ip, [sp, #48]	; 0x30
   1db04:	beq	1db78 <__assert_fail@plt+0xc474>
   1db08:	ldr	r3, [sp, #100]	; 0x64
   1db0c:	cmp	r3, #0
   1db10:	str	r3, [sp, #52]	; 0x34
   1db14:	movne	ip, #10
   1db18:	moveq	ip, #9
   1db1c:	ldr	r3, [sp, #60]	; 0x3c
   1db20:	add	lr, sp, #16
   1db24:	str	lr, [sp]
   1db28:	str	ip, [sp, #4]
   1db2c:	bl	1d534 <__assert_fail@plt+0xbe30>
   1db30:	add	sp, sp, #56	; 0x38
   1db34:	pop	{lr}		; (ldr lr, [sp], #4)
   1db38:	add	sp, sp, #4
   1db3c:	bx	lr
   1db40:	mov	ip, #1
   1db44:	b	1db1c <__assert_fail@plt+0xc418>
   1db48:	mov	ip, #2
   1db4c:	b	1db1c <__assert_fail@plt+0xc418>
   1db50:	mov	ip, #3
   1db54:	b	1db1c <__assert_fail@plt+0xc418>
   1db58:	mov	ip, #4
   1db5c:	b	1db1c <__assert_fail@plt+0xc418>
   1db60:	mov	ip, #5
   1db64:	b	1db1c <__assert_fail@plt+0xc418>
   1db68:	mov	ip, #6
   1db6c:	b	1db1c <__assert_fail@plt+0xc418>
   1db70:	mov	ip, #7
   1db74:	b	1db1c <__assert_fail@plt+0xc418>
   1db78:	mov	ip, #8
   1db7c:	b	1db1c <__assert_fail@plt+0xc418>
   1db80:	movw	r3, #13108	; 0x3334
   1db84:	movt	r3, #3
   1db88:	str	r4, [sp, #-8]!
   1db8c:	mov	r0, #10
   1db90:	ldr	r1, [r3]
   1db94:	str	lr, [sp, #4]
   1db98:	bl	113a4 <fputc_unlocked@plt>
   1db9c:	mov	r2, #5
   1dba0:	movw	r1, #10196	; 0x27d4
   1dba4:	movt	r1, #2
   1dba8:	mov	r0, #0
   1dbac:	bl	113bc <dcgettext@plt>
   1dbb0:	mov	r1, r0
   1dbb4:	movw	r2, #10216	; 0x27e8
   1dbb8:	movt	r2, #2
   1dbbc:	mov	r0, #1
   1dbc0:	bl	1159c <__printf_chk@plt>
   1dbc4:	mov	r2, #5
   1dbc8:	movw	r1, #10240	; 0x2800
   1dbcc:	movt	r1, #2
   1dbd0:	mov	r0, #0
   1dbd4:	bl	113bc <dcgettext@plt>
   1dbd8:	mov	r1, r0
   1dbdc:	movw	r3, #7316	; 0x1c94
   1dbe0:	movt	r3, #2
   1dbe4:	movw	r2, #7356	; 0x1cbc
   1dbe8:	movt	r2, #2
   1dbec:	mov	r0, #1
   1dbf0:	bl	1159c <__printf_chk@plt>
   1dbf4:	mov	r2, #5
   1dbf8:	movw	r1, #10260	; 0x2814
   1dbfc:	movt	r1, #2
   1dc00:	mov	r0, #0
   1dc04:	bl	113bc <dcgettext@plt>
   1dc08:	mov	r1, r0
   1dc0c:	movw	r2, #10300	; 0x283c
   1dc10:	movt	r2, #2
   1dc14:	mov	r0, #1
   1dc18:	ldr	r4, [sp]
   1dc1c:	ldr	lr, [sp, #4]
   1dc20:	add	sp, sp, #8
   1dc24:	b	1159c <__printf_chk@plt>
   1dc28:	strd	r4, [sp, #-16]!
   1dc2c:	mov	r4, r0
   1dc30:	mov	r5, r2
   1dc34:	str	r6, [sp, #8]
   1dc38:	mov	r6, r1
   1dc3c:	str	lr, [sp, #12]
   1dc40:	bl	20844 <__assert_fail@plt+0xf140>
   1dc44:	cmp	r0, #0
   1dc48:	beq	1dc5c <__assert_fail@plt+0xc558>
   1dc4c:	ldrd	r4, [sp]
   1dc50:	ldr	r6, [sp, #8]
   1dc54:	add	sp, sp, #12
   1dc58:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc5c:	cmp	r4, #0
   1dc60:	beq	1dc70 <__assert_fail@plt+0xc56c>
   1dc64:	cmp	r6, #0
   1dc68:	cmpne	r5, #0
   1dc6c:	beq	1dc4c <__assert_fail@plt+0xc548>
   1dc70:	bl	1e22c <__assert_fail@plt+0xcb28>
   1dc74:	str	r4, [sp, #-8]!
   1dc78:	str	lr, [sp, #4]
   1dc7c:	bl	1f110 <__assert_fail@plt+0xda0c>
   1dc80:	cmp	r0, #0
   1dc84:	beq	1dc94 <__assert_fail@plt+0xc590>
   1dc88:	ldr	r4, [sp]
   1dc8c:	add	sp, sp, #4
   1dc90:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc94:	bl	1e22c <__assert_fail@plt+0xcb28>
   1dc98:	str	r4, [sp, #-8]!
   1dc9c:	str	lr, [sp, #4]
   1dca0:	bl	1f110 <__assert_fail@plt+0xda0c>
   1dca4:	cmp	r0, #0
   1dca8:	beq	1dcb8 <__assert_fail@plt+0xc5b4>
   1dcac:	ldr	r4, [sp]
   1dcb0:	add	sp, sp, #4
   1dcb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dcb8:	bl	1e22c <__assert_fail@plt+0xcb28>
   1dcbc:	str	r4, [sp, #-8]!
   1dcc0:	str	lr, [sp, #4]
   1dcc4:	bl	1f110 <__assert_fail@plt+0xda0c>
   1dcc8:	cmp	r0, #0
   1dccc:	beq	1dcdc <__assert_fail@plt+0xc5d8>
   1dcd0:	ldr	r4, [sp]
   1dcd4:	add	sp, sp, #4
   1dcd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1dcdc:	bl	1e22c <__assert_fail@plt+0xcb28>
   1dce0:	strd	r4, [sp, #-16]!
   1dce4:	mov	r5, r0
   1dce8:	mov	r4, r1
   1dcec:	str	r6, [sp, #8]
   1dcf0:	str	lr, [sp, #12]
   1dcf4:	bl	1f14c <__assert_fail@plt+0xda48>
   1dcf8:	cmp	r0, #0
   1dcfc:	beq	1dd10 <__assert_fail@plt+0xc60c>
   1dd00:	ldrd	r4, [sp]
   1dd04:	ldr	r6, [sp, #8]
   1dd08:	add	sp, sp, #12
   1dd0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd10:	adds	r4, r4, #0
   1dd14:	movne	r4, #1
   1dd18:	cmp	r5, #0
   1dd1c:	moveq	r4, #1
   1dd20:	cmp	r4, #0
   1dd24:	beq	1dd00 <__assert_fail@plt+0xc5fc>
   1dd28:	bl	1e22c <__assert_fail@plt+0xcb28>
   1dd2c:	cmp	r1, #0
   1dd30:	orreq	r1, r1, #1
   1dd34:	str	r4, [sp, #-8]!
   1dd38:	str	lr, [sp, #4]
   1dd3c:	bl	1f14c <__assert_fail@plt+0xda48>
   1dd40:	cmp	r0, #0
   1dd44:	beq	1dd54 <__assert_fail@plt+0xc650>
   1dd48:	ldr	r4, [sp]
   1dd4c:	add	sp, sp, #4
   1dd50:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd54:	bl	1e22c <__assert_fail@plt+0xcb28>
   1dd58:	strd	r4, [sp, #-16]!
   1dd5c:	mov	r4, r0
   1dd60:	mov	r5, r2
   1dd64:	str	r6, [sp, #8]
   1dd68:	mov	r6, r1
   1dd6c:	str	lr, [sp, #12]
   1dd70:	bl	20844 <__assert_fail@plt+0xf140>
   1dd74:	cmp	r0, #0
   1dd78:	beq	1dd8c <__assert_fail@plt+0xc688>
   1dd7c:	ldrd	r4, [sp]
   1dd80:	ldr	r6, [sp, #8]
   1dd84:	add	sp, sp, #12
   1dd88:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd8c:	cmp	r4, #0
   1dd90:	beq	1dda0 <__assert_fail@plt+0xc69c>
   1dd94:	cmp	r6, #0
   1dd98:	cmpne	r5, #0
   1dd9c:	beq	1dd7c <__assert_fail@plt+0xc678>
   1dda0:	bl	1e22c <__assert_fail@plt+0xcb28>
   1dda4:	cmp	r2, #0
   1dda8:	cmpne	r1, #0
   1ddac:	str	r4, [sp, #-8]!
   1ddb0:	moveq	r2, #1
   1ddb4:	str	lr, [sp, #4]
   1ddb8:	moveq	r1, r2
   1ddbc:	bl	20844 <__assert_fail@plt+0xf140>
   1ddc0:	cmp	r0, #0
   1ddc4:	beq	1ddd4 <__assert_fail@plt+0xc6d0>
   1ddc8:	ldr	r4, [sp]
   1ddcc:	add	sp, sp, #4
   1ddd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ddd4:	bl	1e22c <__assert_fail@plt+0xcb28>
   1ddd8:	mov	r2, r1
   1dddc:	mov	r1, r0
   1dde0:	str	r4, [sp, #-8]!
   1dde4:	mov	r0, #0
   1dde8:	str	lr, [sp, #4]
   1ddec:	bl	20844 <__assert_fail@plt+0xf140>
   1ddf0:	cmp	r0, #0
   1ddf4:	beq	1de04 <__assert_fail@plt+0xc700>
   1ddf8:	ldr	r4, [sp]
   1ddfc:	add	sp, sp, #4
   1de00:	pop	{pc}		; (ldr pc, [sp], #4)
   1de04:	bl	1e22c <__assert_fail@plt+0xcb28>
   1de08:	cmp	r1, #0
   1de0c:	cmpne	r0, #0
   1de10:	str	r4, [sp, #-8]!
   1de14:	moveq	r2, #1
   1de18:	movne	r2, r1
   1de1c:	str	lr, [sp, #4]
   1de20:	movne	r1, r0
   1de24:	moveq	r1, r2
   1de28:	mov	r0, #0
   1de2c:	bl	20844 <__assert_fail@plt+0xf140>
   1de30:	cmp	r0, #0
   1de34:	beq	1de44 <__assert_fail@plt+0xc740>
   1de38:	ldr	r4, [sp]
   1de3c:	add	sp, sp, #4
   1de40:	pop	{pc}		; (ldr pc, [sp], #4)
   1de44:	bl	1e22c <__assert_fail@plt+0xcb28>
   1de48:	cmp	r0, #0
   1de4c:	strd	r4, [sp, #-16]!
   1de50:	mov	r5, r1
   1de54:	ldr	r4, [r1]
   1de58:	str	r6, [sp, #8]
   1de5c:	str	lr, [sp, #12]
   1de60:	beq	1dea8 <__assert_fail@plt+0xc7a4>
   1de64:	lsr	r3, r4, #1
   1de68:	add	r3, r3, #1
   1de6c:	adds	r4, r4, r3
   1de70:	bcs	1dea4 <__assert_fail@plt+0xc7a0>
   1de74:	mov	r2, #1
   1de78:	mov	r1, r4
   1de7c:	bl	20844 <__assert_fail@plt+0xf140>
   1de80:	cmp	r0, #0
   1de84:	beq	1de9c <__assert_fail@plt+0xc798>
   1de88:	ldr	r6, [sp, #8]
   1de8c:	str	r4, [r5]
   1de90:	ldrd	r4, [sp]
   1de94:	add	sp, sp, #12
   1de98:	pop	{pc}		; (ldr pc, [sp], #4)
   1de9c:	cmp	r4, #0
   1dea0:	beq	1de88 <__assert_fail@plt+0xc784>
   1dea4:	bl	1e22c <__assert_fail@plt+0xcb28>
   1dea8:	cmp	r4, #0
   1deac:	mov	r2, #1
   1deb0:	moveq	r4, #64	; 0x40
   1deb4:	mov	r1, r4
   1deb8:	bl	20844 <__assert_fail@plt+0xf140>
   1debc:	cmp	r0, #0
   1dec0:	bne	1de88 <__assert_fail@plt+0xc784>
   1dec4:	b	1dea4 <__assert_fail@plt+0xc7a0>
   1dec8:	cmp	r0, #0
   1decc:	strd	r4, [sp, #-16]!
   1ded0:	mov	r5, r1
   1ded4:	ldr	r4, [r1]
   1ded8:	str	r6, [sp, #8]
   1dedc:	mov	r6, r2
   1dee0:	str	lr, [sp, #12]
   1dee4:	beq	1df2c <__assert_fail@plt+0xc828>
   1dee8:	lsr	r3, r4, #1
   1deec:	add	r3, r3, #1
   1def0:	adds	r4, r4, r3
   1def4:	bcs	1df28 <__assert_fail@plt+0xc824>
   1def8:	mov	r1, r4
   1defc:	bl	20844 <__assert_fail@plt+0xf140>
   1df00:	cmp	r0, #0
   1df04:	beq	1df1c <__assert_fail@plt+0xc818>
   1df08:	ldr	r6, [sp, #8]
   1df0c:	str	r4, [r5]
   1df10:	ldrd	r4, [sp]
   1df14:	add	sp, sp, #12
   1df18:	pop	{pc}		; (ldr pc, [sp], #4)
   1df1c:	cmp	r4, #0
   1df20:	cmpne	r6, #0
   1df24:	beq	1df08 <__assert_fail@plt+0xc804>
   1df28:	bl	1e22c <__assert_fail@plt+0xcb28>
   1df2c:	cmp	r4, #0
   1df30:	bne	1df44 <__assert_fail@plt+0xc840>
   1df34:	mov	r4, #64	; 0x40
   1df38:	udiv	r4, r4, r2
   1df3c:	cmp	r2, #64	; 0x40
   1df40:	addhi	r4, r4, #1
   1df44:	mov	r2, r6
   1df48:	mov	r1, r4
   1df4c:	mov	r0, #0
   1df50:	bl	20844 <__assert_fail@plt+0xf140>
   1df54:	cmp	r0, #0
   1df58:	bne	1df08 <__assert_fail@plt+0xc804>
   1df5c:	b	1df28 <__assert_fail@plt+0xc824>
   1df60:	ldr	ip, [r1]
   1df64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1df68:	strd	r6, [sp, #8]
   1df6c:	mov	r7, r1
   1df70:	mov	r6, r0
   1df74:	str	r8, [sp, #16]
   1df78:	mvn	r8, r3
   1df7c:	lsr	r8, r8, #31
   1df80:	str	lr, [sp, #20]
   1df84:	asr	r1, ip, #1
   1df88:	ldr	lr, [sp, #24]
   1df8c:	adds	r4, ip, r1
   1df90:	mvnvs	r4, #-2147483648	; 0x80000000
   1df94:	cmp	r3, r4
   1df98:	movge	r1, #0
   1df9c:	andlt	r1, r8, #1
   1dfa0:	cmp	r1, #0
   1dfa4:	movne	r4, r3
   1dfa8:	smull	r0, r1, r4, lr
   1dfac:	cmp	r1, r0, asr #31
   1dfb0:	bne	1e060 <__assert_fail@plt+0xc95c>
   1dfb4:	cmp	r0, #63	; 0x3f
   1dfb8:	mov	r5, r0
   1dfbc:	ble	1e02c <__assert_fail@plt+0xc928>
   1dfc0:	cmp	r6, #0
   1dfc4:	sub	r1, r4, ip
   1dfc8:	streq	r6, [r7]
   1dfcc:	cmp	r1, r2
   1dfd0:	bge	1e000 <__assert_fail@plt+0xc8fc>
   1dfd4:	adds	r4, ip, r2
   1dfd8:	bvs	1e05c <__assert_fail@plt+0xc958>
   1dfdc:	cmp	r4, r3
   1dfe0:	movle	r3, #0
   1dfe4:	andgt	r3, r8, #1
   1dfe8:	cmp	r3, #0
   1dfec:	bne	1e05c <__assert_fail@plt+0xc958>
   1dff0:	smull	r0, r1, r4, lr
   1dff4:	cmp	r1, r0, asr #31
   1dff8:	mov	r5, r0
   1dffc:	bne	1e05c <__assert_fail@plt+0xc958>
   1e000:	mov	r1, r5
   1e004:	mov	r0, r6
   1e008:	bl	1f14c <__assert_fail@plt+0xda48>
   1e00c:	cmp	r0, #0
   1e010:	beq	1e040 <__assert_fail@plt+0xc93c>
   1e014:	ldr	r8, [sp, #16]
   1e018:	str	r4, [r7]
   1e01c:	ldrd	r4, [sp]
   1e020:	ldrd	r6, [sp, #8]
   1e024:	add	sp, sp, #20
   1e028:	pop	{pc}		; (ldr pc, [sp], #4)
   1e02c:	mov	r0, #64	; 0x40
   1e030:	sdiv	r4, r0, lr
   1e034:	mls	r5, lr, r4, r0
   1e038:	sub	r5, r0, r5
   1e03c:	b	1dfc0 <__assert_fail@plt+0xc8bc>
   1e040:	adds	r5, r5, #0
   1e044:	movne	r5, #1
   1e048:	cmp	r6, #0
   1e04c:	movne	r6, r5
   1e050:	moveq	r6, #1
   1e054:	cmp	r6, #0
   1e058:	beq	1e014 <__assert_fail@plt+0xc910>
   1e05c:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e060:	mvn	r0, #-2147483648	; 0x80000000
   1e064:	b	1e030 <__assert_fail@plt+0xc92c>
   1e068:	mov	r1, #1
   1e06c:	str	r4, [sp, #-8]!
   1e070:	str	lr, [sp, #4]
   1e074:	bl	1f09c <__assert_fail@plt+0xd998>
   1e078:	cmp	r0, #0
   1e07c:	beq	1e08c <__assert_fail@plt+0xc988>
   1e080:	ldr	r4, [sp]
   1e084:	add	sp, sp, #4
   1e088:	pop	{pc}		; (ldr pc, [sp], #4)
   1e08c:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e090:	mov	r1, #1
   1e094:	str	r4, [sp, #-8]!
   1e098:	str	lr, [sp, #4]
   1e09c:	bl	1f09c <__assert_fail@plt+0xd998>
   1e0a0:	cmp	r0, #0
   1e0a4:	beq	1e0b4 <__assert_fail@plt+0xc9b0>
   1e0a8:	ldr	r4, [sp]
   1e0ac:	add	sp, sp, #4
   1e0b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0b4:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e0b8:	str	r4, [sp, #-8]!
   1e0bc:	str	lr, [sp, #4]
   1e0c0:	bl	1f09c <__assert_fail@plt+0xd998>
   1e0c4:	cmp	r0, #0
   1e0c8:	beq	1e0d8 <__assert_fail@plt+0xc9d4>
   1e0cc:	ldr	r4, [sp]
   1e0d0:	add	sp, sp, #4
   1e0d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0d8:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e0dc:	str	r4, [sp, #-8]!
   1e0e0:	str	lr, [sp, #4]
   1e0e4:	bl	1f09c <__assert_fail@plt+0xd998>
   1e0e8:	cmp	r0, #0
   1e0ec:	beq	1e0fc <__assert_fail@plt+0xc9f8>
   1e0f0:	ldr	r4, [sp]
   1e0f4:	add	sp, sp, #4
   1e0f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0fc:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e100:	strd	r4, [sp, #-16]!
   1e104:	mov	r4, r1
   1e108:	str	r6, [sp, #8]
   1e10c:	mov	r6, r0
   1e110:	mov	r0, r1
   1e114:	str	lr, [sp, #12]
   1e118:	bl	1f110 <__assert_fail@plt+0xda0c>
   1e11c:	subs	r5, r0, #0
   1e120:	beq	1e144 <__assert_fail@plt+0xca40>
   1e124:	mov	r2, r4
   1e128:	mov	r1, r6
   1e12c:	bl	11374 <memcpy@plt>
   1e130:	mov	r0, r5
   1e134:	ldrd	r4, [sp]
   1e138:	ldr	r6, [sp, #8]
   1e13c:	add	sp, sp, #12
   1e140:	pop	{pc}		; (ldr pc, [sp], #4)
   1e144:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e148:	strd	r4, [sp, #-16]!
   1e14c:	mov	r4, r1
   1e150:	str	r6, [sp, #8]
   1e154:	mov	r6, r0
   1e158:	mov	r0, r1
   1e15c:	str	lr, [sp, #12]
   1e160:	bl	1f110 <__assert_fail@plt+0xda0c>
   1e164:	subs	r5, r0, #0
   1e168:	beq	1e18c <__assert_fail@plt+0xca88>
   1e16c:	mov	r2, r4
   1e170:	mov	r1, r6
   1e174:	bl	11374 <memcpy@plt>
   1e178:	mov	r0, r5
   1e17c:	ldrd	r4, [sp]
   1e180:	ldr	r6, [sp, #8]
   1e184:	add	sp, sp, #12
   1e188:	pop	{pc}		; (ldr pc, [sp], #4)
   1e18c:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e190:	strd	r4, [sp, #-16]!
   1e194:	mov	r4, r1
   1e198:	str	r6, [sp, #8]
   1e19c:	mov	r6, r0
   1e1a0:	add	r0, r1, #1
   1e1a4:	str	lr, [sp, #12]
   1e1a8:	bl	1f110 <__assert_fail@plt+0xda0c>
   1e1ac:	subs	r5, r0, #0
   1e1b0:	beq	1e1dc <__assert_fail@plt+0xcad8>
   1e1b4:	mov	r3, #0
   1e1b8:	mov	r1, r6
   1e1bc:	mov	r2, r4
   1e1c0:	strb	r3, [r5, r4]
   1e1c4:	bl	11374 <memcpy@plt>
   1e1c8:	mov	r0, r5
   1e1cc:	ldrd	r4, [sp]
   1e1d0:	ldr	r6, [sp, #8]
   1e1d4:	add	sp, sp, #12
   1e1d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e1dc:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e1e0:	strd	r4, [sp, #-16]!
   1e1e4:	str	r6, [sp, #8]
   1e1e8:	mov	r6, r0
   1e1ec:	str	lr, [sp, #12]
   1e1f0:	bl	1153c <strlen@plt>
   1e1f4:	add	r4, r0, #1
   1e1f8:	mov	r0, r4
   1e1fc:	bl	1f110 <__assert_fail@plt+0xda0c>
   1e200:	subs	r5, r0, #0
   1e204:	beq	1e228 <__assert_fail@plt+0xcb24>
   1e208:	mov	r2, r4
   1e20c:	mov	r1, r6
   1e210:	bl	11374 <memcpy@plt>
   1e214:	mov	r0, r5
   1e218:	ldrd	r4, [sp]
   1e21c:	ldr	r6, [sp, #8]
   1e220:	add	sp, sp, #12
   1e224:	pop	{pc}		; (ldr pc, [sp], #4)
   1e228:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e22c:	movw	r3, #13012	; 0x32d4
   1e230:	movt	r3, #3
   1e234:	str	r4, [sp, #-8]!
   1e238:	ldr	r4, [r3]
   1e23c:	mov	r2, #5
   1e240:	movw	r1, #10380	; 0x288c
   1e244:	movt	r1, #2
   1e248:	mov	r0, #0
   1e24c:	str	lr, [sp, #4]
   1e250:	bl	113bc <dcgettext@plt>
   1e254:	mov	r3, r0
   1e258:	movw	r2, #8780	; 0x224c
   1e25c:	movt	r2, #2
   1e260:	mov	r1, #0
   1e264:	mov	r0, r4
   1e268:	bl	11494 <error@plt>
   1e26c:	bl	116e0 <abort@plt>
   1e270:	mov	r1, #0
   1e274:	str	r4, [sp, #-8]!
   1e278:	mov	r0, r1
   1e27c:	str	lr, [sp, #4]
   1e280:	bl	11524 <getcwd@plt>
   1e284:	subs	r4, r0, #0
   1e288:	beq	1e29c <__assert_fail@plt+0xcb98>
   1e28c:	mov	r0, r4
   1e290:	ldr	r4, [sp]
   1e294:	add	sp, sp, #4
   1e298:	pop	{pc}		; (ldr pc, [sp], #4)
   1e29c:	bl	1156c <__errno_location@plt>
   1e2a0:	ldr	r3, [r0]
   1e2a4:	cmp	r3, #12
   1e2a8:	bne	1e28c <__assert_fail@plt+0xcb88>
   1e2ac:	bl	1e22c <__assert_fail@plt+0xcb28>
   1e2b0:	sub	r0, r0, #1
   1e2b4:	movw	ip, #13012	; 0x32d4
   1e2b8:	movt	ip, #3
   1e2bc:	cmp	r0, #3
   1e2c0:	push	{lr}		; (str lr, [sp, #-4]!)
   1e2c4:	sub	sp, sp, #20
   1e2c8:	ldr	r5, [ip]
   1e2cc:	bhi	1e31c <__assert_fail@plt+0xcc18>
   1e2d0:	movw	ip, #10400	; 0x28a0
   1e2d4:	movt	ip, #2
   1e2d8:	cmp	r1, #0
   1e2dc:	ldr	r0, [ip, r0, lsl #2]
   1e2e0:	blt	1e320 <__assert_fail@plt+0xcc1c>
   1e2e4:	ldr	r6, [r3, r1, lsl #4]
   1e2e8:	movw	r4, #10416	; 0x28b0
   1e2ec:	movt	r4, #2
   1e2f0:	mov	r1, r0
   1e2f4:	mov	r2, #5
   1e2f8:	mov	r0, #0
   1e2fc:	bl	113bc <dcgettext@plt>
   1e300:	ldr	ip, [sp, #24]
   1e304:	mov	r2, r0
   1e308:	mov	r3, r4
   1e30c:	mov	r0, r5
   1e310:	mov	r1, #0
   1e314:	stm	sp, {r6, ip}
   1e318:	bl	11494 <error@plt>
   1e31c:	bl	116e0 <abort@plt>
   1e320:	mov	r3, #0
   1e324:	movw	r4, #10416	; 0x28b0
   1e328:	movt	r4, #2
   1e32c:	add	r6, sp, #12
   1e330:	strb	r2, [sp, #12]
   1e334:	sub	r4, r4, r1
   1e338:	strb	r3, [sp, #13]
   1e33c:	b	1e2f0 <__assert_fail@plt+0xcbec>
   1e340:	cmp	r2, #36	; 0x24
   1e344:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e348:	strd	r6, [sp, #8]
   1e34c:	strd	r8, [sp, #16]
   1e350:	strd	sl, [sp, #24]
   1e354:	str	lr, [sp, #32]
   1e358:	sub	sp, sp, #36	; 0x24
   1e35c:	bhi	1efd4 <__assert_fail@plt+0xd8d0>
   1e360:	cmp	r1, #0
   1e364:	mov	r6, r2
   1e368:	mov	r5, r1
   1e36c:	mov	sl, r0
   1e370:	addeq	r5, sp, #28
   1e374:	mov	r9, r3
   1e378:	bl	1156c <__errno_location@plt>
   1e37c:	mov	r3, #0
   1e380:	mov	fp, r0
   1e384:	str	r3, [r0]
   1e388:	ldrb	r4, [sl]
   1e38c:	bl	11518 <__ctype_b_loc@plt>
   1e390:	ldr	r2, [r0]
   1e394:	lsl	r3, r4, #1
   1e398:	ldrh	r3, [r2, r3]
   1e39c:	tst	r3, #8192	; 0x2000
   1e3a0:	beq	1e3bc <__assert_fail@plt+0xccb8>
   1e3a4:	mov	r3, sl
   1e3a8:	ldrb	r4, [r3, #1]!
   1e3ac:	lsl	r1, r4, #1
   1e3b0:	ldrh	r1, [r2, r1]
   1e3b4:	tst	r1, #8192	; 0x2000
   1e3b8:	bne	1e3a8 <__assert_fail@plt+0xcca4>
   1e3bc:	cmp	r4, #45	; 0x2d
   1e3c0:	beq	1e45c <__assert_fail@plt+0xcd58>
   1e3c4:	mov	r2, r6
   1e3c8:	mov	r3, #0
   1e3cc:	mov	r1, r5
   1e3d0:	mov	r0, sl
   1e3d4:	bl	11380 <__strtoull_internal@plt>
   1e3d8:	ldr	r8, [r5]
   1e3dc:	mov	r6, r0
   1e3e0:	mov	r7, r1
   1e3e4:	cmp	r8, sl
   1e3e8:	beq	1e444 <__assert_fail@plt+0xcd40>
   1e3ec:	ldr	r4, [fp]
   1e3f0:	cmp	r4, #0
   1e3f4:	bne	1e434 <__assert_fail@plt+0xcd30>
   1e3f8:	ldr	r3, [sp, #72]	; 0x48
   1e3fc:	cmp	r3, #0
   1e400:	beq	1e410 <__assert_fail@plt+0xcd0c>
   1e404:	ldrb	sl, [r8]
   1e408:	cmp	sl, #0
   1e40c:	bne	1e7c8 <__assert_fail@plt+0xd0c4>
   1e410:	strd	r6, [r9]
   1e414:	mov	r0, r4
   1e418:	add	sp, sp, #36	; 0x24
   1e41c:	ldrd	r4, [sp]
   1e420:	ldrd	r6, [sp, #8]
   1e424:	ldrd	r8, [sp, #16]
   1e428:	ldrd	sl, [sp, #24]
   1e42c:	add	sp, sp, #32
   1e430:	pop	{pc}		; (ldr pc, [sp], #4)
   1e434:	cmp	r4, #34	; 0x22
   1e438:	bne	1e45c <__assert_fail@plt+0xcd58>
   1e43c:	mov	r4, #1
   1e440:	b	1e3f8 <__assert_fail@plt+0xccf4>
   1e444:	ldr	r3, [sp, #72]	; 0x48
   1e448:	cmp	r3, #0
   1e44c:	beq	1e45c <__assert_fail@plt+0xcd58>
   1e450:	ldrb	sl, [sl]
   1e454:	cmp	sl, #0
   1e458:	bne	1e464 <__assert_fail@plt+0xcd60>
   1e45c:	mov	r4, #4
   1e460:	b	1e414 <__assert_fail@plt+0xcd10>
   1e464:	mov	r1, sl
   1e468:	mov	r0, r3
   1e46c:	bl	11548 <strchr@plt>
   1e470:	cmp	r0, #0
   1e474:	movne	r4, #0
   1e478:	movne	r6, #1
   1e47c:	movne	r7, r4
   1e480:	beq	1e45c <__assert_fail@plt+0xcd58>
   1e484:	sub	r3, sl, #69	; 0x45
   1e488:	cmp	r3, #47	; 0x2f
   1e48c:	ldrls	pc, [pc, r3, lsl #2]
   1e490:	b	1e598 <__assert_fail@plt+0xce94>
   1e494:	andeq	lr, r1, r4, asr r5
   1e498:	muleq	r1, r8, r5
   1e49c:	andeq	lr, r1, r4, asr r5
   1e4a0:	muleq	r1, r8, r5
   1e4a4:	muleq	r1, r8, r5
   1e4a8:	muleq	r1, r8, r5
   1e4ac:	andeq	lr, r1, r4, asr r5
   1e4b0:	muleq	r1, r8, r5
   1e4b4:	andeq	lr, r1, r4, asr r5
   1e4b8:	muleq	r1, r8, r5
   1e4bc:	muleq	r1, r8, r5
   1e4c0:	andeq	lr, r1, r4, asr r5
   1e4c4:	muleq	r1, r8, r5
   1e4c8:	muleq	r1, r8, r5
   1e4cc:	muleq	r1, r8, r5
   1e4d0:	andeq	lr, r1, r4, asr r5
   1e4d4:	muleq	r1, r8, r5
   1e4d8:	muleq	r1, r8, r5
   1e4dc:	muleq	r1, r8, r5
   1e4e0:	muleq	r1, r8, r5
   1e4e4:	andeq	lr, r1, r4, asr r5
   1e4e8:	andeq	lr, r1, r4, asr r5
   1e4ec:	muleq	r1, r8, r5
   1e4f0:	muleq	r1, r8, r5
   1e4f4:	muleq	r1, r8, r5
   1e4f8:	muleq	r1, r8, r5
   1e4fc:	muleq	r1, r8, r5
   1e500:	muleq	r1, r8, r5
   1e504:	muleq	r1, r8, r5
   1e508:	muleq	r1, r8, r5
   1e50c:	muleq	r1, r8, r5
   1e510:	muleq	r1, r8, r5
   1e514:	muleq	r1, r8, r5
   1e518:	muleq	r1, r8, r5
   1e51c:	andeq	lr, r1, r4, asr r5
   1e520:	muleq	r1, r8, r5
   1e524:	muleq	r1, r8, r5
   1e528:	muleq	r1, r8, r5
   1e52c:	andeq	lr, r1, r4, asr r5
   1e530:	muleq	r1, r8, r5
   1e534:	andeq	lr, r1, r4, asr r5
   1e538:	muleq	r1, r8, r5
   1e53c:	muleq	r1, r8, r5
   1e540:	muleq	r1, r8, r5
   1e544:	muleq	r1, r8, r5
   1e548:	muleq	r1, r8, r5
   1e54c:	muleq	r1, r8, r5
   1e550:	andeq	lr, r1, r4, asr r5
   1e554:	mov	r1, #48	; 0x30
   1e558:	ldr	r0, [sp, #72]	; 0x48
   1e55c:	bl	11548 <strchr@plt>
   1e560:	cmp	r0, #0
   1e564:	beq	1e598 <__assert_fail@plt+0xce94>
   1e568:	ldrb	r3, [r8, #1]
   1e56c:	cmp	r3, #68	; 0x44
   1e570:	beq	1eb28 <__assert_fail@plt+0xd424>
   1e574:	cmp	r3, #105	; 0x69
   1e578:	beq	1e7e0 <__assert_fail@plt+0xd0dc>
   1e57c:	cmp	r3, #66	; 0x42
   1e580:	moveq	r3, #2
   1e584:	movne	r3, #1
   1e588:	moveq	ip, #1000	; 0x3e8
   1e58c:	movne	ip, #1024	; 0x400
   1e590:	str	r3, [sp, #12]
   1e594:	b	1e5a4 <__assert_fail@plt+0xcea0>
   1e598:	mov	r3, #1
   1e59c:	mov	ip, #1024	; 0x400
   1e5a0:	str	r3, [sp, #12]
   1e5a4:	sub	sl, sl, #66	; 0x42
   1e5a8:	cmp	sl, #53	; 0x35
   1e5ac:	ldrls	pc, [pc, sl, lsl #2]
   1e5b0:	b	1e78c <__assert_fail@plt+0xd088>
   1e5b4:	andeq	lr, r1, r4, ror sl
   1e5b8:	andeq	lr, r1, ip, lsl #15
   1e5bc:	andeq	lr, r1, ip, lsl #15
   1e5c0:	andeq	lr, r1, r4, lsl sl
   1e5c4:	andeq	lr, r1, ip, lsl #15
   1e5c8:	muleq	r1, r0, sl
   1e5cc:	andeq	lr, r1, ip, lsl #15
   1e5d0:	andeq	lr, r1, ip, lsl #15
   1e5d4:	andeq	lr, r1, ip, lsl #15
   1e5d8:	muleq	r1, r4, r7
   1e5dc:	andeq	lr, r1, ip, lsl #15
   1e5e0:			; <UNDEFINED> instruction: 0x0001e9bc
   1e5e4:	andeq	lr, r1, ip, lsl #15
   1e5e8:	andeq	lr, r1, ip, lsl #15
   1e5ec:	andeq	lr, r1, r0, ror #18
   1e5f0:	andeq	lr, r1, ip, lsl #15
   1e5f4:	andeq	lr, r1, ip, lsl #15
   1e5f8:	andeq	lr, r1, ip, lsl #15
   1e5fc:	andeq	lr, r1, r0, lsl #18
   1e600:	andeq	lr, r1, ip, lsl #15
   1e604:	andeq	lr, r1, ip, lsl #15
   1e608:	andeq	lr, r1, ip, lsl #15
   1e60c:	andeq	lr, r1, ip, lsl #15
   1e610:	andeq	lr, r1, r4, lsr r8
   1e614:	andeq	lr, r1, ip, lsl #13
   1e618:	andeq	lr, r1, ip, lsl #15
   1e61c:	andeq	lr, r1, ip, lsl #15
   1e620:	andeq	lr, r1, ip, lsl #15
   1e624:	andeq	lr, r1, ip, lsl #15
   1e628:	andeq	lr, r1, ip, lsl #15
   1e62c:	andeq	lr, r1, ip, lsl #15
   1e630:	andeq	lr, r1, ip, lsl #15
   1e634:	andeq	lr, r1, r4, lsl r8
   1e638:	andeq	lr, r1, r4, ror r7
   1e63c:	andeq	lr, r1, ip, lsl #15
   1e640:	andeq	lr, r1, ip, lsl #15
   1e644:	andeq	lr, r1, ip, lsl #15
   1e648:	muleq	r1, r0, sl
   1e64c:	andeq	lr, r1, ip, lsl #15
   1e650:	andeq	lr, r1, ip, lsl #15
   1e654:	andeq	lr, r1, ip, lsl #15
   1e658:	muleq	r1, r4, r7
   1e65c:	andeq	lr, r1, ip, lsl #15
   1e660:			; <UNDEFINED> instruction: 0x0001e9bc
   1e664:	andeq	lr, r1, ip, lsl #15
   1e668:	andeq	lr, r1, ip, lsl #15
   1e66c:	andeq	lr, r1, ip, lsl #15
   1e670:	andeq	lr, r1, ip, lsl #15
   1e674:	andeq	lr, r1, ip, lsl #15
   1e678:	andeq	lr, r1, ip, lsl #15
   1e67c:	andeq	lr, r1, r0, lsl #18
   1e680:	andeq	lr, r1, ip, lsl #15
   1e684:	andeq	lr, r1, ip, lsl #15
   1e688:	strdeq	lr, [r1], -ip
   1e68c:	asr	r3, ip, #31
   1e690:	mov	r2, ip
   1e694:	cmp	r7, #0
   1e698:	mov	r1, #0
   1e69c:	strd	r2, [sp]
   1e6a0:	bne	1ebe0 <__assert_fail@plt+0xd4dc>
   1e6a4:	umull	r6, r7, r6, ip
   1e6a8:	mov	r2, r6
   1e6ac:	mov	r3, r7
   1e6b0:	cmp	r1, #0
   1e6b4:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e6b8:	cmp	r3, #0
   1e6bc:	mov	lr, r1
   1e6c0:	bne	1ed0c <__assert_fail@plt+0xd608>
   1e6c4:	umull	r2, r3, r2, ip
   1e6c8:	mov	r0, r2
   1e6cc:	mov	r1, r3
   1e6d0:	cmp	lr, #0
   1e6d4:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e6d8:	cmp	r1, #0
   1e6dc:	bne	1ece8 <__assert_fail@plt+0xd5e4>
   1e6e0:	umull	r0, r1, r0, ip
   1e6e4:	mov	r2, r0
   1e6e8:	mov	r3, r1
   1e6ec:	cmp	lr, #0
   1e6f0:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e6f4:	cmp	r3, #0
   1e6f8:	bne	1e998 <__assert_fail@plt+0xd294>
   1e6fc:	umull	r2, r3, r2, ip
   1e700:	mov	r0, r2
   1e704:	mov	r1, r3
   1e708:	cmp	lr, #0
   1e70c:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e710:	cmp	r1, #0
   1e714:	bne	1eb98 <__assert_fail@plt+0xd494>
   1e718:	umull	r0, r1, r0, ip
   1e71c:	mov	r2, r0
   1e720:	mov	r3, r1
   1e724:	cmp	lr, #0
   1e728:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e72c:	cmp	r3, #0
   1e730:	mov	r7, lr
   1e734:	bne	1eb74 <__assert_fail@plt+0xd470>
   1e738:	umull	r2, r3, r2, ip
   1e73c:	mov	r6, r2
   1e740:	mov	lr, r3
   1e744:	cmp	r7, #0
   1e748:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e74c:	cmp	lr, #0
   1e750:	bne	1eb38 <__assert_fail@plt+0xd434>
   1e754:	umull	r2, r3, r6, ip
   1e758:	mov	r0, r2
   1e75c:	mov	r2, r3
   1e760:	subs	r3, r7, #0
   1e764:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e768:	mov	r6, r0
   1e76c:	mov	r7, r2
   1e770:	orr	r4, r4, r3
   1e774:	ldr	r2, [sp, #12]
   1e778:	add	r3, r8, r2
   1e77c:	str	r3, [r5]
   1e780:	ldrb	r3, [r8, r2]
   1e784:	cmp	r3, #0
   1e788:	beq	1e410 <__assert_fail@plt+0xcd0c>
   1e78c:	orr	r4, r4, #2
   1e790:	b	1e410 <__assert_fail@plt+0xcd0c>
   1e794:	cmp	r7, #0
   1e798:	asr	r1, ip, #31
   1e79c:	mov	lr, #0
   1e7a0:	bne	1eb04 <__assert_fail@plt+0xd400>
   1e7a4:	umull	r2, r3, r6, ip
   1e7a8:	mov	r6, r2
   1e7ac:	mov	r7, r3
   1e7b0:	cmp	lr, #0
   1e7b4:	beq	1e774 <__assert_fail@plt+0xd070>
   1e7b8:	mvn	r6, #0
   1e7bc:	mov	r4, #1
   1e7c0:	mov	r7, r6
   1e7c4:	b	1e774 <__assert_fail@plt+0xd070>
   1e7c8:	mov	r0, r3
   1e7cc:	mov	r1, sl
   1e7d0:	bl	11548 <strchr@plt>
   1e7d4:	cmp	r0, #0
   1e7d8:	bne	1e484 <__assert_fail@plt+0xcd80>
   1e7dc:	b	1e78c <__assert_fail@plt+0xd088>
   1e7e0:	ldrb	r3, [r8, #2]
   1e7e4:	mov	ip, #1024	; 0x400
   1e7e8:	cmp	r3, #66	; 0x42
   1e7ec:	movne	r3, #1
   1e7f0:	moveq	r3, #3
   1e7f4:	str	r3, [sp, #12]
   1e7f8:	b	1e5a4 <__assert_fail@plt+0xcea0>
   1e7fc:	lsr	r3, r7, #31
   1e800:	adds	r6, r6, r6
   1e804:	adc	r7, r7, r7
   1e808:	cmp	r3, #0
   1e80c:	beq	1e774 <__assert_fail@plt+0xd070>
   1e810:	b	1e7b8 <__assert_fail@plt+0xd0b4>
   1e814:	lsr	r3, r7, #23
   1e818:	lsl	r7, r7, #9
   1e81c:	cmp	r3, #0
   1e820:	lsl	r3, r6, #9
   1e824:	orr	r7, r7, r6, lsr #23
   1e828:	bne	1e7b8 <__assert_fail@plt+0xd0b4>
   1e82c:	mov	r6, r3
   1e830:	b	1e774 <__assert_fail@plt+0xd070>
   1e834:	asr	r3, ip, #31
   1e838:	mov	r2, ip
   1e83c:	cmp	r7, #0
   1e840:	mov	r1, #0
   1e844:	strd	r2, [sp]
   1e848:	bne	1ec54 <__assert_fail@plt+0xd550>
   1e84c:	umull	r6, r7, r6, ip
   1e850:	mov	r0, r6
   1e854:	mov	fp, r7
   1e858:	cmp	r1, #0
   1e85c:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e860:	cmp	fp, #0
   1e864:	mov	lr, r1
   1e868:	bne	1ede4 <__assert_fail@plt+0xd6e0>
   1e86c:	umull	r0, r1, r0, ip
   1e870:	mov	r2, r0
   1e874:	mov	r3, r1
   1e878:	cmp	lr, #0
   1e87c:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e880:	cmp	r3, #0
   1e884:	bne	1ee0c <__assert_fail@plt+0xd708>
   1e888:	umull	r2, r3, r2, ip
   1e88c:	mov	r0, r2
   1e890:	mov	r1, r3
   1e894:	cmp	lr, #0
   1e898:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e89c:	cmp	r1, #0
   1e8a0:	bne	1ed8c <__assert_fail@plt+0xd688>
   1e8a4:	umull	r0, r1, r0, ip
   1e8a8:	mov	r2, r0
   1e8ac:	mov	r3, r1
   1e8b0:	cmp	lr, #0
   1e8b4:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e8b8:	cmp	r3, #0
   1e8bc:	bne	1ebbc <__assert_fail@plt+0xd4b8>
   1e8c0:	umull	r2, r3, r2, ip
   1e8c4:	mov	r0, r2
   1e8c8:	mov	r1, r3
   1e8cc:	cmp	lr, #0
   1e8d0:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e8d4:	cmp	r1, #0
   1e8d8:	beq	1e718 <__assert_fail@plt+0xd014>
   1e8dc:	umull	r6, r7, r0, ip
   1e8e0:	mov	fp, lr
   1e8e4:	mov	sl, r7
   1e8e8:	umlal	sl, fp, r1, ip
   1e8ec:	cmp	fp, #0
   1e8f0:	bne	1eff4 <__assert_fail@plt+0xd8f0>
   1e8f4:	mov	r2, r6
   1e8f8:	mov	r3, sl
   1e8fc:	b	1e724 <__assert_fail@plt+0xd020>
   1e900:	asr	r3, ip, #31
   1e904:	mov	r2, ip
   1e908:	cmp	r7, #0
   1e90c:	mov	r1, #0
   1e910:	strd	r2, [sp]
   1e914:	bne	1ec78 <__assert_fail@plt+0xd574>
   1e918:	umull	r6, r7, r6, ip
   1e91c:	mov	r0, r6
   1e920:	mov	fp, r7
   1e924:	cmp	r1, #0
   1e928:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e92c:	cmp	fp, #0
   1e930:	mov	lr, r1
   1e934:	beq	1e718 <__assert_fail@plt+0xd014>
   1e938:	umull	r6, r7, r0, ip
   1e93c:	mov	r3, r1
   1e940:	mov	r2, r7
   1e944:	umlal	r2, r3, fp, ip
   1e948:	cmp	r3, #0
   1e94c:	strd	r2, [sp, #16]
   1e950:	bne	1eed8 <__assert_fail@plt+0xd7d4>
   1e954:	mov	r2, r6
   1e958:	ldr	r3, [sp, #16]
   1e95c:	b	1e724 <__assert_fail@plt+0xd020>
   1e960:	asr	r3, ip, #31
   1e964:	mov	r2, ip
   1e968:	cmp	r7, #0
   1e96c:	mov	r1, #0
   1e970:	strd	r2, [sp]
   1e974:	bne	1ecc0 <__assert_fail@plt+0xd5bc>
   1e978:	umull	r6, r7, r6, ip
   1e97c:	mov	r2, r6
   1e980:	mov	r3, r7
   1e984:	cmp	r1, #0
   1e988:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1e98c:	cmp	r3, #0
   1e990:	mov	lr, r1
   1e994:	beq	1e6fc <__assert_fail@plt+0xcff8>
   1e998:	umull	r6, r7, r2, ip
   1e99c:	mov	fp, lr
   1e9a0:	mov	sl, r7
   1e9a4:	umlal	sl, fp, r3, ip
   1e9a8:	cmp	fp, #0
   1e9ac:	bne	1efb8 <__assert_fail@plt+0xd8b4>
   1e9b0:	mov	r0, r6
   1e9b4:	mov	r1, sl
   1e9b8:	b	1e708 <__assert_fail@plt+0xd004>
   1e9bc:	asr	r3, ip, #31
   1e9c0:	mov	r2, ip
   1e9c4:	cmp	r7, #0
   1e9c8:	mov	r1, #0
   1e9cc:	strd	r2, [sp]
   1e9d0:	bne	1ec9c <__assert_fail@plt+0xd598>
   1e9d4:	umull	r6, r7, r6, ip
   1e9d8:	mov	sl, r6
   1e9dc:	mov	lr, r7
   1e9e0:	cmp	r1, #0
   1e9e4:	bne	1e7b8 <__assert_fail@plt+0xd0b4>
   1e9e8:	cmp	lr, #0
   1e9ec:	mov	r7, r1
   1e9f0:	bne	1edb0 <__assert_fail@plt+0xd6ac>
   1e9f4:	umull	sl, fp, sl, ip
   1e9f8:	mov	r0, sl
   1e9fc:	mov	r2, fp
   1ea00:	cmp	r7, #0
   1ea04:	mov	r6, r0
   1ea08:	mov	r7, r2
   1ea0c:	beq	1e774 <__assert_fail@plt+0xd070>
   1ea10:	b	1e7b8 <__assert_fail@plt+0xd0b4>
   1ea14:	asr	r3, ip, #31
   1ea18:	mov	r2, ip
   1ea1c:	cmp	r7, #0
   1ea20:	mov	r1, #0
   1ea24:	strd	r2, [sp]
   1ea28:	bne	1ec30 <__assert_fail@plt+0xd52c>
   1ea2c:	umull	r6, r7, r6, ip
   1ea30:	mov	r0, r6
   1ea34:	mov	fp, r7
   1ea38:	cmp	r1, #0
   1ea3c:	bne	1eaf4 <__assert_fail@plt+0xd3f0>
   1ea40:	cmp	fp, #0
   1ea44:	mov	lr, r1
   1ea48:	beq	1e8a4 <__assert_fail@plt+0xd1a0>
   1ea4c:	umull	r6, r7, r0, ip
   1ea50:	mov	r3, r1
   1ea54:	mov	r2, r7
   1ea58:	umlal	r2, r3, fp, ip
   1ea5c:	cmp	r3, #0
   1ea60:	strd	r2, [sp, #16]
   1ea64:	bne	1ef48 <__assert_fail@plt+0xd844>
   1ea68:	mov	r2, r6
   1ea6c:	ldr	r3, [sp, #16]
   1ea70:	b	1e8b0 <__assert_fail@plt+0xd1ac>
   1ea74:	lsr	r3, r7, #22
   1ea78:	lsl	r7, r7, #10
   1ea7c:	cmp	r3, #0
   1ea80:	lsl	r3, r6, #10
   1ea84:	orr	r7, r7, r6, lsr #22
   1ea88:	beq	1e82c <__assert_fail@plt+0xd128>
   1ea8c:	b	1e7b8 <__assert_fail@plt+0xd0b4>
   1ea90:	asr	r3, ip, #31
   1ea94:	mov	r2, ip
   1ea98:	cmp	r7, #0
   1ea9c:	mov	r1, #0
   1eaa0:	strd	r2, [sp]
   1eaa4:	bne	1ec08 <__assert_fail@plt+0xd504>
   1eaa8:	umull	r6, r7, r6, ip
   1eaac:	mov	r2, r6
   1eab0:	mov	r3, r7
   1eab4:	cmp	r1, #0
   1eab8:	bne	1e7b8 <__assert_fail@plt+0xd0b4>
   1eabc:	cmp	r3, #0
   1eac0:	mov	r7, r1
   1eac4:	bne	1ed6c <__assert_fail@plt+0xd668>
   1eac8:	umull	r2, r3, r2, ip
   1eacc:	mov	r6, r2
   1ead0:	mov	lr, r3
   1ead4:	cmp	r7, #0
   1ead8:	bne	1e7b8 <__assert_fail@plt+0xd0b4>
   1eadc:	cmp	lr, #0
   1eae0:	bne	1ed30 <__assert_fail@plt+0xd62c>
   1eae4:	umull	r2, r3, r6, ip
   1eae8:	mov	r0, r2
   1eaec:	mov	r2, r3
   1eaf0:	b	1ea00 <__assert_fail@plt+0xd2fc>
   1eaf4:	mvn	r6, #0
   1eaf8:	mov	r3, #1
   1eafc:	mov	r7, r6
   1eb00:	b	1e770 <__assert_fail@plt+0xd06c>
   1eb04:	umull	sl, fp, r6, ip
   1eb08:	mov	r3, lr
   1eb0c:	mov	r2, fp
   1eb10:	umlal	r2, r3, r7, ip
   1eb14:	cmp	r3, #0
   1eb18:	bne	1ef10 <__assert_fail@plt+0xd80c>
   1eb1c:	mov	r6, sl
   1eb20:	mov	r7, r2
   1eb24:	b	1e7b0 <__assert_fail@plt+0xd0ac>
   1eb28:	mov	r3, #2
   1eb2c:	mov	ip, #1000	; 0x3e8
   1eb30:	str	r3, [sp, #12]
   1eb34:	b	1e5a4 <__assert_fail@plt+0xcea0>
   1eb38:	umull	r0, r1, r6, ip
   1eb3c:	mov	r3, r7
   1eb40:	mov	r2, r1
   1eb44:	strd	r0, [sp, #16]
   1eb48:	umlal	r2, r3, lr, ip
   1eb4c:	cmp	r3, #0
   1eb50:	beq	1e760 <__assert_fail@plt+0xd05c>
   1eb54:	ldrd	sl, [sp]
   1eb58:	mov	r7, #1
   1eb5c:	ldr	r0, [sp, #16]
   1eb60:	ldr	r3, [sp, #20]
   1eb64:	mul	r2, r6, fp
   1eb68:	mla	r2, lr, sl, r2
   1eb6c:	add	r2, r2, r3
   1eb70:	b	1e760 <__assert_fail@plt+0xd05c>
   1eb74:	umull	sl, fp, r2, ip
   1eb78:	mov	r1, lr
   1eb7c:	mov	r0, fp
   1eb80:	umlal	r0, r1, r3, ip
   1eb84:	cmp	r1, #0
   1eb88:	bne	1ee68 <__assert_fail@plt+0xd764>
   1eb8c:	mov	r6, sl
   1eb90:	mov	lr, r0
   1eb94:	b	1e744 <__assert_fail@plt+0xd040>
   1eb98:	umull	sl, fp, r0, ip
   1eb9c:	mov	r7, lr
   1eba0:	mov	r6, fp
   1eba4:	umlal	r6, r7, r1, ip
   1eba8:	cmp	r7, #0
   1ebac:	bne	1f010 <__assert_fail@plt+0xd90c>
   1ebb0:	mov	r2, sl
   1ebb4:	mov	r3, r6
   1ebb8:	b	1e724 <__assert_fail@plt+0xd020>
   1ebbc:	umull	sl, fp, r2, ip
   1ebc0:	mov	r7, lr
   1ebc4:	mov	r6, fp
   1ebc8:	umlal	r6, r7, r3, ip
   1ebcc:	cmp	r7, #0
   1ebd0:	bne	1eea0 <__assert_fail@plt+0xd79c>
   1ebd4:	mov	r0, sl
   1ebd8:	mov	r1, r6
   1ebdc:	b	1e8cc <__assert_fail@plt+0xd1c8>
   1ebe0:	umull	sl, fp, r6, ip
   1ebe4:	mov	r3, r1
   1ebe8:	mov	r2, fp
   1ebec:	umlal	r2, r3, r7, ip
   1ebf0:	cmp	r3, #0
   1ebf4:	strd	r2, [sp, #16]
   1ebf8:	bne	1ee84 <__assert_fail@plt+0xd780>
   1ebfc:	mov	r2, sl
   1ec00:	ldr	r3, [sp, #16]
   1ec04:	b	1e6b0 <__assert_fail@plt+0xcfac>
   1ec08:	umull	sl, fp, r6, ip
   1ec0c:	mov	r3, r1
   1ec10:	mov	r2, fp
   1ec14:	umlal	r2, r3, r7, ip
   1ec18:	cmp	r3, #0
   1ec1c:	strd	r2, [sp, #16]
   1ec20:	bne	1ef64 <__assert_fail@plt+0xd860>
   1ec24:	mov	r2, sl
   1ec28:	ldr	r3, [sp, #16]
   1ec2c:	b	1eab4 <__assert_fail@plt+0xd3b0>
   1ec30:	umull	sl, fp, r6, ip
   1ec34:	mov	r3, r1
   1ec38:	mov	r2, fp
   1ec3c:	umlal	r2, r3, r7, ip
   1ec40:	cmp	r3, #0
   1ec44:	bne	1ee30 <__assert_fail@plt+0xd72c>
   1ec48:	mov	r0, sl
   1ec4c:	mov	fp, r2
   1ec50:	b	1ea38 <__assert_fail@plt+0xd334>
   1ec54:	umull	sl, fp, r6, ip
   1ec58:	mov	r3, r1
   1ec5c:	mov	r2, fp
   1ec60:	umlal	r2, r3, r7, ip
   1ec64:	cmp	r3, #0
   1ec68:	bne	1eef4 <__assert_fail@plt+0xd7f0>
   1ec6c:	mov	r0, sl
   1ec70:	mov	fp, r2
   1ec74:	b	1e858 <__assert_fail@plt+0xd154>
   1ec78:	umull	sl, fp, r6, ip
   1ec7c:	mov	r3, r1
   1ec80:	mov	r2, fp
   1ec84:	umlal	r2, r3, r7, ip
   1ec88:	cmp	r3, #0
   1ec8c:	bne	1ef80 <__assert_fail@plt+0xd87c>
   1ec90:	mov	r0, sl
   1ec94:	mov	fp, r2
   1ec98:	b	1e924 <__assert_fail@plt+0xd220>
   1ec9c:	umull	sl, fp, r6, ip
   1eca0:	mov	r3, r1
   1eca4:	mov	r2, fp
   1eca8:	strd	sl, [sp, #16]
   1ecac:	umlal	r2, r3, r7, ip
   1ecb0:	cmp	r3, #0
   1ecb4:	bne	1ef28 <__assert_fail@plt+0xd824>
   1ecb8:	mov	lr, r2
   1ecbc:	b	1e9e0 <__assert_fail@plt+0xd2dc>
   1ecc0:	umull	sl, fp, r6, ip
   1ecc4:	mov	r3, r1
   1ecc8:	mov	r2, fp
   1eccc:	umlal	r2, r3, r7, ip
   1ecd0:	cmp	r3, #0
   1ecd4:	strd	r2, [sp, #16]
   1ecd8:	bne	1f02c <__assert_fail@plt+0xd928>
   1ecdc:	mov	r2, sl
   1ece0:	ldr	r3, [sp, #16]
   1ece4:	b	1e984 <__assert_fail@plt+0xd280>
   1ece8:	umull	sl, fp, r0, ip
   1ecec:	mov	r7, lr
   1ecf0:	mov	r6, fp
   1ecf4:	umlal	r6, r7, r1, ip
   1ecf8:	cmp	r7, #0
   1ecfc:	bne	1f048 <__assert_fail@plt+0xd944>
   1ed00:	mov	r2, sl
   1ed04:	mov	r3, r6
   1ed08:	b	1e6ec <__assert_fail@plt+0xcfe8>
   1ed0c:	umull	r6, r7, r2, ip
   1ed10:	mov	fp, r1
   1ed14:	mov	sl, r7
   1ed18:	umlal	sl, fp, r3, ip
   1ed1c:	cmp	fp, #0
   1ed20:	bne	1eebc <__assert_fail@plt+0xd7b8>
   1ed24:	mov	r0, r6
   1ed28:	mov	r1, sl
   1ed2c:	b	1e6d0 <__assert_fail@plt+0xcfcc>
   1ed30:	umull	r0, r1, r6, ip
   1ed34:	mov	r3, r7
   1ed38:	mov	r2, r1
   1ed3c:	strd	r0, [sp, #16]
   1ed40:	umlal	r2, r3, lr, ip
   1ed44:	cmp	r3, #0
   1ed48:	beq	1ea00 <__assert_fail@plt+0xd2fc>
   1ed4c:	ldrd	sl, [sp]
   1ed50:	mov	r7, #1
   1ed54:	ldr	r0, [sp, #16]
   1ed58:	ldr	r3, [sp, #20]
   1ed5c:	mul	r2, r6, fp
   1ed60:	mla	r2, lr, sl, r2
   1ed64:	add	r2, r2, r3
   1ed68:	b	1ea00 <__assert_fail@plt+0xd2fc>
   1ed6c:	umull	sl, fp, r2, ip
   1ed70:	mov	r0, fp
   1ed74:	umlal	r0, r1, r3, ip
   1ed78:	cmp	r1, #0
   1ed7c:	bne	1f064 <__assert_fail@plt+0xd960>
   1ed80:	mov	r6, sl
   1ed84:	mov	lr, r0
   1ed88:	b	1ead4 <__assert_fail@plt+0xd3d0>
   1ed8c:	umull	r6, r7, r0, ip
   1ed90:	mov	fp, lr
   1ed94:	mov	sl, r7
   1ed98:	umlal	sl, fp, r1, ip
   1ed9c:	cmp	fp, #0
   1eda0:	bne	1ef9c <__assert_fail@plt+0xd898>
   1eda4:	mov	r2, r6
   1eda8:	mov	r3, sl
   1edac:	b	1e8b0 <__assert_fail@plt+0xd1ac>
   1edb0:	umull	r0, r1, sl, ip
   1edb4:	mov	r3, r7
   1edb8:	mov	r2, r1
   1edbc:	umlal	r2, r3, lr, ip
   1edc0:	cmp	r3, #0
   1edc4:	beq	1ea00 <__assert_fail@plt+0xd2fc>
   1edc8:	ldr	r3, [sp, #4]
   1edcc:	mov	r7, #1
   1edd0:	mul	r2, sl, r3
   1edd4:	ldr	r3, [sp]
   1edd8:	mla	r2, lr, r3, r2
   1eddc:	add	r2, r2, r1
   1ede0:	b	1ea00 <__assert_fail@plt+0xd2fc>
   1ede4:	umull	r6, r7, r0, ip
   1ede8:	mov	r3, r1
   1edec:	mov	r2, r7
   1edf0:	umlal	r2, r3, fp, ip
   1edf4:	cmp	r3, #0
   1edf8:	strd	r2, [sp, #16]
   1edfc:	bne	1f080 <__assert_fail@plt+0xd97c>
   1ee00:	mov	r2, r6
   1ee04:	ldr	r3, [sp, #16]
   1ee08:	b	1e878 <__assert_fail@plt+0xd174>
   1ee0c:	umull	sl, fp, r2, ip
   1ee10:	mov	r7, lr
   1ee14:	mov	r6, fp
   1ee18:	umlal	r6, r7, r3, ip
   1ee1c:	cmp	r7, #0
   1ee20:	bne	1ee4c <__assert_fail@plt+0xd748>
   1ee24:	mov	r0, sl
   1ee28:	mov	r1, r6
   1ee2c:	b	1e894 <__assert_fail@plt+0xd190>
   1ee30:	ldrd	r2, [sp]
   1ee34:	mov	r0, sl
   1ee38:	mov	r1, #1
   1ee3c:	mul	r6, r6, r3
   1ee40:	mla	r7, r2, r7, r6
   1ee44:	add	fp, r7, fp
   1ee48:	b	1ea38 <__assert_fail@plt+0xd334>
   1ee4c:	ldrd	r6, [sp]
   1ee50:	mov	r0, sl
   1ee54:	mov	lr, #1
   1ee58:	mul	r2, r2, r7
   1ee5c:	mla	r1, r3, r6, r2
   1ee60:	add	r1, r1, fp
   1ee64:	b	1e894 <__assert_fail@plt+0xd190>
   1ee68:	ldrd	r0, [sp]
   1ee6c:	mov	r6, sl
   1ee70:	mov	r7, #1
   1ee74:	mul	r2, r2, r1
   1ee78:	mla	lr, r3, r0, r2
   1ee7c:	add	lr, lr, fp
   1ee80:	b	1e744 <__assert_fail@plt+0xd040>
   1ee84:	ldm	sp, {r0, r3}
   1ee88:	mov	r2, sl
   1ee8c:	mov	r1, #1
   1ee90:	mul	r3, r6, r3
   1ee94:	mla	r3, r0, r7, r3
   1ee98:	add	r3, r3, fp
   1ee9c:	b	1e6b0 <__assert_fail@plt+0xcfac>
   1eea0:	ldrd	r6, [sp]
   1eea4:	mov	r0, sl
   1eea8:	mov	lr, #1
   1eeac:	mul	r2, r2, r7
   1eeb0:	mla	r1, r3, r6, r2
   1eeb4:	add	r1, r1, fp
   1eeb8:	b	1e8cc <__assert_fail@plt+0xd1c8>
   1eebc:	ldrd	sl, [sp]
   1eec0:	mov	r0, r6
   1eec4:	mov	lr, #1
   1eec8:	mul	r2, r2, fp
   1eecc:	mla	r1, r3, sl, r2
   1eed0:	add	r1, r1, r7
   1eed4:	b	1e6d0 <__assert_fail@plt+0xcfcc>
   1eed8:	ldm	sp, {r1, r3}
   1eedc:	mov	r2, r6
   1eee0:	mov	lr, #1
   1eee4:	mul	r3, r0, r3
   1eee8:	mla	r3, fp, r1, r3
   1eeec:	add	r3, r3, r7
   1eef0:	b	1e724 <__assert_fail@plt+0xd020>
   1eef4:	ldrd	r2, [sp]
   1eef8:	mov	r0, sl
   1eefc:	mov	r1, #1
   1ef00:	mul	r6, r6, r3
   1ef04:	mla	r7, r2, r7, r6
   1ef08:	add	fp, r7, fp
   1ef0c:	b	1e858 <__assert_fail@plt+0xd154>
   1ef10:	mul	r3, r6, r1
   1ef14:	mov	lr, #1
   1ef18:	mov	r6, sl
   1ef1c:	mla	r7, ip, r7, r3
   1ef20:	add	r7, r7, fp
   1ef24:	b	1e7b0 <__assert_fail@plt+0xd0ac>
   1ef28:	ldrd	r2, [sp]
   1ef2c:	mov	r1, #1
   1ef30:	ldr	sl, [sp, #16]
   1ef34:	mul	lr, r6, r3
   1ef38:	ldr	r3, [sp, #20]
   1ef3c:	mla	lr, r2, r7, lr
   1ef40:	add	lr, lr, r3
   1ef44:	b	1e9e0 <__assert_fail@plt+0xd2dc>
   1ef48:	ldm	sp, {r1, r3}
   1ef4c:	mov	r2, r6
   1ef50:	mov	lr, #1
   1ef54:	mul	r3, r0, r3
   1ef58:	mla	r3, fp, r1, r3
   1ef5c:	add	r3, r3, r7
   1ef60:	b	1e8b0 <__assert_fail@plt+0xd1ac>
   1ef64:	ldm	sp, {r0, r3}
   1ef68:	mov	r2, sl
   1ef6c:	mov	r1, #1
   1ef70:	mul	r3, r6, r3
   1ef74:	mla	r3, r0, r7, r3
   1ef78:	add	r3, r3, fp
   1ef7c:	b	1eab4 <__assert_fail@plt+0xd3b0>
   1ef80:	ldrd	r2, [sp]
   1ef84:	mov	r0, sl
   1ef88:	mov	r1, #1
   1ef8c:	mul	r6, r6, r3
   1ef90:	mla	r7, r2, r7, r6
   1ef94:	add	fp, r7, fp
   1ef98:	b	1e924 <__assert_fail@plt+0xd220>
   1ef9c:	ldrd	sl, [sp]
   1efa0:	mov	r2, r6
   1efa4:	mov	lr, #1
   1efa8:	mul	r3, r0, fp
   1efac:	mla	r3, r1, sl, r3
   1efb0:	add	r3, r3, r7
   1efb4:	b	1e8b0 <__assert_fail@plt+0xd1ac>
   1efb8:	ldrd	sl, [sp]
   1efbc:	mov	r0, r6
   1efc0:	mov	lr, #1
   1efc4:	mul	r2, r2, fp
   1efc8:	mla	r1, r3, sl, r2
   1efcc:	add	r1, r1, r7
   1efd0:	b	1e708 <__assert_fail@plt+0xd004>
   1efd4:	movw	r3, #10520	; 0x2918
   1efd8:	movt	r3, #2
   1efdc:	movw	r1, #10532	; 0x2924
   1efe0:	movt	r1, #2
   1efe4:	movw	r0, #10548	; 0x2934
   1efe8:	movt	r0, #2
   1efec:	mov	r2, #85	; 0x55
   1eff0:	bl	11704 <__assert_fail@plt>
   1eff4:	ldrd	sl, [sp]
   1eff8:	mov	r2, r6
   1effc:	mov	lr, #1
   1f000:	mul	r3, r0, fp
   1f004:	mla	r3, r1, sl, r3
   1f008:	add	r3, r3, r7
   1f00c:	b	1e724 <__assert_fail@plt+0xd020>
   1f010:	ldrd	r6, [sp]
   1f014:	mov	r2, sl
   1f018:	mov	lr, #1
   1f01c:	mul	r3, r0, r7
   1f020:	mla	r3, r1, r6, r3
   1f024:	add	r3, r3, fp
   1f028:	b	1e724 <__assert_fail@plt+0xd020>
   1f02c:	ldm	sp, {r0, r3}
   1f030:	mov	r2, sl
   1f034:	mov	r1, #1
   1f038:	mul	r3, r6, r3
   1f03c:	mla	r3, r0, r7, r3
   1f040:	add	r3, r3, fp
   1f044:	b	1e984 <__assert_fail@plt+0xd280>
   1f048:	ldrd	r6, [sp]
   1f04c:	mov	r2, sl
   1f050:	mov	lr, #1
   1f054:	mul	r3, r0, r7
   1f058:	mla	r3, r1, r6, r3
   1f05c:	add	r3, r3, fp
   1f060:	b	1e6ec <__assert_fail@plt+0xcfe8>
   1f064:	ldrd	r0, [sp]
   1f068:	mov	r6, sl
   1f06c:	mov	r7, #1
   1f070:	mul	r2, r2, r1
   1f074:	mla	lr, r3, r0, r2
   1f078:	add	lr, lr, fp
   1f07c:	b	1ead4 <__assert_fail@plt+0xd3d0>
   1f080:	ldm	sp, {r1, r3}
   1f084:	mov	r2, r6
   1f088:	mov	lr, #1
   1f08c:	mul	r3, r0, r3
   1f090:	mla	r3, fp, r1, r3
   1f094:	add	r3, r3, r7
   1f098:	b	1e878 <__assert_fail@plt+0xd174>
   1f09c:	cmp	r1, #0
   1f0a0:	cmpne	r0, #0
   1f0a4:	beq	1f0f0 <__assert_fail@plt+0xd9ec>
   1f0a8:	strd	r4, [sp, #-16]!
   1f0ac:	umull	r4, r5, r0, r1
   1f0b0:	str	r6, [sp, #8]
   1f0b4:	str	lr, [sp, #12]
   1f0b8:	adds	r3, r5, #0
   1f0bc:	movne	r3, #1
   1f0c0:	cmp	r4, #0
   1f0c4:	blt	1f0d0 <__assert_fail@plt+0xd9cc>
   1f0c8:	cmp	r3, #0
   1f0cc:	beq	1f0fc <__assert_fail@plt+0xd9f8>
   1f0d0:	bl	1156c <__errno_location@plt>
   1f0d4:	mov	r3, #12
   1f0d8:	ldrd	r4, [sp]
   1f0dc:	ldr	r6, [sp, #8]
   1f0e0:	add	sp, sp, #12
   1f0e4:	str	r3, [r0]
   1f0e8:	mov	r0, #0
   1f0ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0f0:	mov	r1, #1
   1f0f4:	mov	r0, r1
   1f0f8:	b	112e4 <calloc@plt>
   1f0fc:	ldrd	r4, [sp]
   1f100:	ldr	r6, [sp, #8]
   1f104:	ldr	lr, [sp, #12]
   1f108:	add	sp, sp, #16
   1f10c:	b	112e4 <calloc@plt>
   1f110:	cmp	r0, #0
   1f114:	beq	1f120 <__assert_fail@plt+0xda1c>
   1f118:	blt	1f128 <__assert_fail@plt+0xda24>
   1f11c:	b	114d0 <malloc@plt>
   1f120:	mov	r0, #1
   1f124:	b	114d0 <malloc@plt>
   1f128:	str	r4, [sp, #-8]!
   1f12c:	str	lr, [sp, #4]
   1f130:	bl	1156c <__errno_location@plt>
   1f134:	mov	r3, #12
   1f138:	ldr	r4, [sp]
   1f13c:	add	sp, sp, #4
   1f140:	str	r3, [r0]
   1f144:	mov	r0, #0
   1f148:	pop	{pc}		; (ldr pc, [sp], #4)
   1f14c:	cmp	r0, #0
   1f150:	beq	1f178 <__assert_fail@plt+0xda74>
   1f154:	cmp	r1, #0
   1f158:	str	r4, [sp, #-8]!
   1f15c:	str	lr, [sp, #4]
   1f160:	beq	1f180 <__assert_fail@plt+0xda7c>
   1f164:	blt	1f194 <__assert_fail@plt+0xda90>
   1f168:	ldr	r4, [sp]
   1f16c:	ldr	lr, [sp, #4]
   1f170:	add	sp, sp, #8
   1f174:	b	113d4 <realloc@plt>
   1f178:	mov	r0, r1
   1f17c:	b	1f110 <__assert_fail@plt+0xda0c>
   1f180:	bl	156a4 <__assert_fail@plt+0x3fa0>
   1f184:	ldr	r4, [sp]
   1f188:	add	sp, sp, #4
   1f18c:	mov	r0, #0
   1f190:	pop	{pc}		; (ldr pc, [sp], #4)
   1f194:	bl	1156c <__errno_location@plt>
   1f198:	mov	r3, #12
   1f19c:	str	r3, [r0]
   1f1a0:	b	1f184 <__assert_fail@plt+0xda80>
   1f1a4:	cmp	r1, #1
   1f1a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f1ac:	strd	r6, [sp, #8]
   1f1b0:	str	r8, [sp, #16]
   1f1b4:	str	lr, [sp, #20]
   1f1b8:	bls	1f2dc <__assert_fail@plt+0xdbd8>
   1f1bc:	mov	r8, #1
   1f1c0:	mov	r4, #0
   1f1c4:	mov	lr, r8
   1f1c8:	mov	r3, r8
   1f1cc:	mvn	r5, #0
   1f1d0:	b	1f1ec <__assert_fail@plt+0xdae8>
   1f1d4:	sub	r8, r3, r5
   1f1d8:	mov	r4, r3
   1f1dc:	mov	lr, #1
   1f1e0:	add	r3, r4, lr
   1f1e4:	cmp	r1, r3
   1f1e8:	bls	1f220 <__assert_fail@plt+0xdb1c>
   1f1ec:	add	ip, r0, r5
   1f1f0:	ldrb	r6, [r0, r3]
   1f1f4:	ldrb	ip, [ip, lr]
   1f1f8:	cmp	r6, ip
   1f1fc:	bcc	1f1d4 <__assert_fail@plt+0xdad0>
   1f200:	beq	1f2b4 <__assert_fail@plt+0xdbb0>
   1f204:	mov	r8, #1
   1f208:	mov	r5, r4
   1f20c:	mov	lr, r8
   1f210:	add	r4, r4, r8
   1f214:	add	r3, r4, lr
   1f218:	cmp	r1, r3
   1f21c:	bhi	1f1ec <__assert_fail@plt+0xdae8>
   1f220:	mov	r7, #1
   1f224:	mov	r4, #0
   1f228:	str	r8, [r2]
   1f22c:	mov	lr, r7
   1f230:	mov	r3, r7
   1f234:	mvn	r6, #0
   1f238:	b	1f254 <__assert_fail@plt+0xdb50>
   1f23c:	sub	r7, r3, r6
   1f240:	mov	r4, r3
   1f244:	mov	lr, #1
   1f248:	add	r3, r4, lr
   1f24c:	cmp	r1, r3
   1f250:	bls	1f288 <__assert_fail@plt+0xdb84>
   1f254:	add	ip, r0, r6
   1f258:	ldrb	r8, [r0, r3]
   1f25c:	ldrb	ip, [ip, lr]
   1f260:	cmp	r8, ip
   1f264:	bhi	1f23c <__assert_fail@plt+0xdb38>
   1f268:	beq	1f2c8 <__assert_fail@plt+0xdbc4>
   1f26c:	mov	r7, #1
   1f270:	mov	r6, r4
   1f274:	mov	lr, r7
   1f278:	add	r4, r4, r7
   1f27c:	add	r3, r4, lr
   1f280:	cmp	r1, r3
   1f284:	bhi	1f254 <__assert_fail@plt+0xdb50>
   1f288:	add	r6, r6, #1
   1f28c:	add	r0, r5, #1
   1f290:	cmp	r6, r0
   1f294:	bcc	1f2a0 <__assert_fail@plt+0xdb9c>
   1f298:	mov	r0, r6
   1f29c:	str	r7, [r2]
   1f2a0:	ldrd	r4, [sp]
   1f2a4:	ldrd	r6, [sp, #8]
   1f2a8:	ldr	r8, [sp, #16]
   1f2ac:	add	sp, sp, #20
   1f2b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2b4:	cmp	lr, r8
   1f2b8:	addeq	r4, r4, lr
   1f2bc:	addne	lr, lr, #1
   1f2c0:	moveq	lr, #1
   1f2c4:	b	1f1e0 <__assert_fail@plt+0xdadc>
   1f2c8:	cmp	lr, r7
   1f2cc:	addeq	r4, r4, lr
   1f2d0:	addne	lr, lr, #1
   1f2d4:	moveq	lr, #1
   1f2d8:	b	1f248 <__assert_fail@plt+0xdb44>
   1f2dc:	mov	r7, #1
   1f2e0:	mov	r6, #0
   1f2e4:	b	1f298 <__assert_fail@plt+0xdb94>
   1f2e8:	cmp	r3, #2
   1f2ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f2f0:	mov	r4, r3
   1f2f4:	strd	r6, [sp, #8]
   1f2f8:	mov	r5, r0
   1f2fc:	strd	r8, [sp, #16]
   1f300:	strd	sl, [sp, #24]
   1f304:	mov	fp, r1
   1f308:	mov	sl, r2
   1f30c:	str	lr, [sp, #32]
   1f310:	sub	sp, sp, #1056	; 0x420
   1f314:	sub	sp, sp, #12
   1f318:	bls	1f708 <__assert_fail@plt+0xe004>
   1f31c:	add	r6, sp, #40	; 0x28
   1f320:	mov	r1, r3
   1f324:	sub	r2, r6, #4
   1f328:	mov	r0, sl
   1f32c:	bl	1f1a4 <__assert_fail@plt+0xdaa0>
   1f330:	ldr	r3, [sp, #36]	; 0x24
   1f334:	str	r3, [sp, #4]
   1f338:	str	r0, [sp, #8]
   1f33c:	mov	r3, r6
   1f340:	add	r2, sp, #1056	; 0x420
   1f344:	add	r3, r3, #8
   1f348:	str	r4, [r3, #-8]
   1f34c:	add	r2, r2, #8
   1f350:	str	r4, [r3, #-4]
   1f354:	cmp	r3, r2
   1f358:	bne	1f340 <__assert_fail@plt+0xdc3c>
   1f35c:	ldr	r3, [sp, #4]
   1f360:	cmp	r4, #0
   1f364:	add	r1, sl, r3
   1f368:	beq	1f51c <__assert_fail@plt+0xde18>
   1f36c:	sub	r3, r4, #1
   1f370:	sub	r2, sl, #1
   1f374:	add	ip, sl, r3
   1f378:	str	r3, [sp]
   1f37c:	ldrb	r0, [r2, #1]!
   1f380:	add	lr, sp, #1056	; 0x420
   1f384:	add	lr, lr, #8
   1f388:	mvn	r3, r2
   1f38c:	add	r0, lr, r0, lsl #2
   1f390:	cmp	ip, r2
   1f394:	add	r3, r3, r4
   1f398:	add	r3, sl, r3
   1f39c:	str	r3, [r0, #-1024]	; 0xfffffc00
   1f3a0:	bne	1f37c <__assert_fail@plt+0xdc78>
   1f3a4:	mov	r0, sl
   1f3a8:	ldr	r2, [sp, #8]
   1f3ac:	bl	11398 <memcmp@plt>
   1f3b0:	cmp	r0, #0
   1f3b4:	beq	1f568 <__assert_fail@plt+0xde64>
   1f3b8:	ldr	r2, [sp, #8]
   1f3bc:	sub	r8, sl, #1
   1f3c0:	mov	r7, #0
   1f3c4:	rsb	r9, sl, #1
   1f3c8:	sub	r3, r4, r2
   1f3cc:	sub	r1, r2, #1
   1f3d0:	cmp	r3, r2
   1f3d4:	movcc	r3, r2
   1f3d8:	str	r1, [sp, #16]
   1f3dc:	add	r1, sl, r1
   1f3e0:	add	r3, r3, #1
   1f3e4:	str	r1, [sp, #12]
   1f3e8:	str	r3, [sp, #20]
   1f3ec:	ldr	r3, [sp]
   1f3f0:	add	r8, r8, r3
   1f3f4:	mov	r3, r2
   1f3f8:	add	r2, sl, r2
   1f3fc:	str	r2, [sp, #4]
   1f400:	rsb	r2, r3, #1
   1f404:	str	r2, [sp, #8]
   1f408:	mov	r2, fp
   1f40c:	mov	fp, r3
   1f410:	b	1f418 <__assert_fail@plt+0xdd14>
   1f414:	mov	r2, r6
   1f418:	add	r6, r7, r4
   1f41c:	add	r0, r5, r2
   1f420:	mov	r1, #0
   1f424:	sub	r2, r6, r2
   1f428:	bl	115cc <memchr@plt>
   1f42c:	adds	r2, r6, #0
   1f430:	movne	r2, #1
   1f434:	cmp	r0, #0
   1f438:	moveq	r0, r2
   1f43c:	movne	r0, #0
   1f440:	cmp	r0, #0
   1f444:	beq	1f538 <__assert_fail@plt+0xde34>
   1f448:	add	r2, r5, r6
   1f44c:	add	r3, sp, #1056	; 0x420
   1f450:	ldrb	r2, [r2, #-1]
   1f454:	add	r3, r3, #8
   1f458:	add	r2, r3, r2, lsl #2
   1f45c:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1f460:	cmp	r2, #0
   1f464:	addne	r7, r7, r2
   1f468:	bne	1f414 <__assert_fail@plt+0xdd10>
   1f46c:	ldr	r3, [sp]
   1f470:	cmp	fp, r3
   1f474:	bcs	1f4bc <__assert_fail@plt+0xddb8>
   1f478:	ldr	r3, [sp, #4]
   1f47c:	add	r2, r7, fp
   1f480:	add	r1, r5, r2
   1f484:	ldrb	r2, [r5, r2]
   1f488:	ldrb	r0, [r3]
   1f48c:	cmp	r2, r0
   1f490:	movne	lr, fp
   1f494:	bne	1f50c <__assert_fail@plt+0xde08>
   1f498:	mov	r2, r3
   1f49c:	b	1f4b0 <__assert_fail@plt+0xddac>
   1f4a0:	ldrb	r0, [r2, #1]!
   1f4a4:	ldrb	r3, [r1, #1]!
   1f4a8:	cmp	r0, r3
   1f4ac:	bne	1f50c <__assert_fail@plt+0xde08>
   1f4b0:	cmp	r8, r2
   1f4b4:	add	lr, r9, r2
   1f4b8:	bne	1f4a0 <__assert_fail@plt+0xdd9c>
   1f4bc:	ldr	r3, [sp, #16]
   1f4c0:	cmn	r3, #1
   1f4c4:	beq	1f504 <__assert_fail@plt+0xde00>
   1f4c8:	add	r2, r7, r3
   1f4cc:	ldr	r3, [sp, #12]
   1f4d0:	add	r1, r5, r2
   1f4d4:	ldrb	r2, [r5, r2]
   1f4d8:	ldrb	r0, [r3]
   1f4dc:	cmp	r2, r0
   1f4e0:	moveq	r2, r3
   1f4e4:	beq	1f4fc <__assert_fail@plt+0xddf8>
   1f4e8:	b	1f55c <__assert_fail@plt+0xde58>
   1f4ec:	ldrb	r0, [r2, #-1]!
   1f4f0:	ldrb	r3, [r1, #-1]!
   1f4f4:	cmp	r0, r3
   1f4f8:	bne	1f55c <__assert_fail@plt+0xde58>
   1f4fc:	cmp	sl, r2
   1f500:	bne	1f4ec <__assert_fail@plt+0xdde8>
   1f504:	add	r0, r5, r7
   1f508:	b	1f53c <__assert_fail@plt+0xde38>
   1f50c:	ldr	r3, [sp, #8]
   1f510:	add	r7, r3, r7
   1f514:	add	r7, lr, r7
   1f518:	b	1f414 <__assert_fail@plt+0xdd10>
   1f51c:	mov	r0, sl
   1f520:	ldr	r2, [sp, #8]
   1f524:	bl	11398 <memcmp@plt>
   1f528:	cmp	r0, #0
   1f52c:	mvnne	r3, #0
   1f530:	strne	r3, [sp]
   1f534:	bne	1f3b8 <__assert_fail@plt+0xdcb4>
   1f538:	mov	r0, #0
   1f53c:	add	sp, sp, #1056	; 0x420
   1f540:	add	sp, sp, #12
   1f544:	ldrd	r4, [sp]
   1f548:	ldrd	r6, [sp, #8]
   1f54c:	ldrd	r8, [sp, #16]
   1f550:	ldrd	sl, [sp, #24]
   1f554:	add	sp, sp, #32
   1f558:	pop	{pc}		; (ldr pc, [sp], #4)
   1f55c:	ldr	r3, [sp, #20]
   1f560:	add	r7, r7, r3
   1f564:	b	1f414 <__assert_fail@plt+0xdd10>
   1f568:	ldr	r2, [sp, #8]
   1f56c:	sub	r8, r4, #2
   1f570:	rsb	r9, sl, #1
   1f574:	add	r8, sl, r8
   1f578:	mov	r7, r0
   1f57c:	str	sl, [sp, #12]
   1f580:	sub	r3, r2, #1
   1f584:	str	r3, [sp, #28]
   1f588:	add	r3, sl, r3
   1f58c:	mov	sl, r0
   1f590:	str	r3, [sp, #24]
   1f594:	ldr	r3, [sp, #4]
   1f598:	sub	r3, r4, r3
   1f59c:	str	r3, [sp, #20]
   1f5a0:	rsb	r3, r2, #1
   1f5a4:	mov	r2, fp
   1f5a8:	str	r3, [sp, #16]
   1f5ac:	b	1f5cc <__assert_fail@plt+0xdec8>
   1f5b0:	ldr	r2, [sp, #4]
   1f5b4:	cmp	sl, #0
   1f5b8:	cmpne	r3, r2
   1f5bc:	mov	sl, #0
   1f5c0:	ldrcc	r3, [sp, #20]
   1f5c4:	add	r7, r7, r3
   1f5c8:	mov	r2, r6
   1f5cc:	add	r6, r7, r4
   1f5d0:	add	r0, r5, r2
   1f5d4:	mov	r1, #0
   1f5d8:	sub	r2, r6, r2
   1f5dc:	bl	115cc <memchr@plt>
   1f5e0:	adds	r3, r6, #0
   1f5e4:	movne	r3, #1
   1f5e8:	cmp	r0, #0
   1f5ec:	moveq	r0, r3
   1f5f0:	movne	r0, #0
   1f5f4:	cmp	r0, #0
   1f5f8:	beq	1f538 <__assert_fail@plt+0xde34>
   1f5fc:	add	r3, r5, r6
   1f600:	add	r2, sp, #1056	; 0x420
   1f604:	ldrb	r3, [r3, #-1]
   1f608:	add	r2, r2, #8
   1f60c:	add	r3, r2, r3, lsl #2
   1f610:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   1f614:	cmp	r3, #0
   1f618:	bne	1f5b0 <__assert_fail@plt+0xdeac>
   1f61c:	ldr	r3, [sp, #8]
   1f620:	cmp	sl, r3
   1f624:	movcc	r0, r3
   1f628:	ldr	r3, [sp]
   1f62c:	movcs	r0, sl
   1f630:	cmp	r0, r3
   1f634:	bcs	1f678 <__assert_fail@plt+0xdf74>
   1f638:	ldr	r3, [sp, #12]
   1f63c:	add	r1, r7, r0
   1f640:	add	r2, r5, r1
   1f644:	ldrb	r1, [r5, r1]
   1f648:	ldrb	ip, [r3, r0]
   1f64c:	add	r3, r3, r0
   1f650:	cmp	ip, r1
   1f654:	beq	1f66c <__assert_fail@plt+0xdf68>
   1f658:	b	1f6f4 <__assert_fail@plt+0xdff0>
   1f65c:	ldrb	ip, [r3, #1]!
   1f660:	ldrb	r1, [r2, #1]!
   1f664:	cmp	ip, r1
   1f668:	bne	1f6f4 <__assert_fail@plt+0xdff0>
   1f66c:	cmp	r8, r3
   1f670:	add	r0, r9, r3
   1f674:	bne	1f65c <__assert_fail@plt+0xdf58>
   1f678:	ldr	r3, [sp, #8]
   1f67c:	cmp	sl, r3
   1f680:	bcs	1f724 <__assert_fail@plt+0xe020>
   1f684:	ldr	r3, [sp, #28]
   1f688:	add	r2, r7, r3
   1f68c:	ldr	r3, [sp, #24]
   1f690:	ldrb	r1, [r3]
   1f694:	add	r3, r5, r2
   1f698:	ldrb	r2, [r5, r2]
   1f69c:	cmp	r1, r2
   1f6a0:	ldrne	lr, [sp, #8]
   1f6a4:	bne	1f6d8 <__assert_fail@plt+0xdfd4>
   1f6a8:	add	ip, r7, sl
   1f6ac:	add	fp, r5, r7
   1f6b0:	add	ip, ip, r5
   1f6b4:	ldr	r2, [sp, #24]
   1f6b8:	b	1f6cc <__assert_fail@plt+0xdfc8>
   1f6bc:	ldrb	r0, [r2, #-1]!
   1f6c0:	ldrb	r1, [r3, #-1]!
   1f6c4:	cmp	r0, r1
   1f6c8:	bne	1f6d8 <__assert_fail@plt+0xdfd4>
   1f6cc:	cmp	ip, r3
   1f6d0:	sub	lr, r3, fp
   1f6d4:	bne	1f6bc <__assert_fail@plt+0xdfb8>
   1f6d8:	add	sl, sl, #1
   1f6dc:	cmp	sl, lr
   1f6e0:	bhi	1f504 <__assert_fail@plt+0xde00>
   1f6e4:	ldr	r3, [sp, #4]
   1f6e8:	ldr	sl, [sp, #20]
   1f6ec:	add	r7, r7, r3
   1f6f0:	b	1f5c8 <__assert_fail@plt+0xdec4>
   1f6f4:	ldr	r3, [sp, #16]
   1f6f8:	mov	sl, #0
   1f6fc:	add	r7, r3, r7
   1f700:	add	r7, r0, r7
   1f704:	b	1f5c8 <__assert_fail@plt+0xdec4>
   1f708:	mov	r3, #1
   1f70c:	sub	r2, r4, #1
   1f710:	add	r6, sp, #40	; 0x28
   1f714:	str	r3, [sp, #4]
   1f718:	str	r2, [sp, #8]
   1f71c:	str	r3, [sp, #36]	; 0x24
   1f720:	b	1f33c <__assert_fail@plt+0xdc38>
   1f724:	mov	lr, r3
   1f728:	b	1f6d8 <__assert_fail@plt+0xdfd4>
   1f72c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f730:	strd	r6, [sp, #8]
   1f734:	strd	r8, [sp, #16]
   1f738:	strd	sl, [sp, #24]
   1f73c:	str	lr, [sp, #32]
   1f740:	sub	sp, sp, #44	; 0x2c
   1f744:	ldrb	r4, [r0]
   1f748:	ldrb	r3, [r1]
   1f74c:	cmp	r4, #0
   1f750:	beq	1fb04 <__assert_fail@plt+0xe400>
   1f754:	cmp	r3, #0
   1f758:	beq	1f824 <__assert_fail@plt+0xe120>
   1f75c:	mov	r8, r0
   1f760:	add	r2, r1, #1
   1f764:	mov	ip, r3
   1f768:	mov	lr, #1
   1f76c:	b	1f778 <__assert_fail@plt+0xe074>
   1f770:	cmp	ip, #0
   1f774:	beq	1f7a0 <__assert_fail@plt+0xe09c>
   1f778:	cmp	ip, r4
   1f77c:	movne	lr, #0
   1f780:	andeq	lr, lr, #1
   1f784:	ldrb	r4, [r8, #1]!
   1f788:	mov	r5, r2
   1f78c:	ldrb	ip, [r2], #1
   1f790:	cmp	r4, #0
   1f794:	bne	1f770 <__assert_fail@plt+0xe06c>
   1f798:	cmp	ip, #0
   1f79c:	bne	1f804 <__assert_fail@plt+0xe100>
   1f7a0:	cmp	lr, #0
   1f7a4:	bne	1f824 <__assert_fail@plt+0xe120>
   1f7a8:	mov	r7, r1
   1f7ac:	mov	r6, r0
   1f7b0:	mov	r1, r3
   1f7b4:	add	r0, r0, #1
   1f7b8:	bl	11548 <strchr@plt>
   1f7bc:	subs	r4, r0, #0
   1f7c0:	sub	r7, r5, r7
   1f7c4:	beq	1f804 <__assert_fail@plt+0xe100>
   1f7c8:	cmp	r7, #1
   1f7cc:	beq	1f804 <__assert_fail@plt+0xe100>
   1f7d0:	add	r6, r6, r7
   1f7d4:	sub	r5, r5, r7
   1f7d8:	cmp	r6, r4
   1f7dc:	subcs	r6, r6, r4
   1f7e0:	movcc	r6, #1
   1f7e4:	cmp	r7, #31
   1f7e8:	bls	1f82c <__assert_fail@plt+0xe128>
   1f7ec:	mov	r0, r4
   1f7f0:	mov	r3, r7
   1f7f4:	mov	r2, r5
   1f7f8:	mov	r1, r6
   1f7fc:	bl	1f2e8 <__assert_fail@plt+0xdbe4>
   1f800:	mov	r4, r0
   1f804:	mov	r0, r4
   1f808:	add	sp, sp, #44	; 0x2c
   1f80c:	ldrd	r4, [sp]
   1f810:	ldrd	r6, [sp, #8]
   1f814:	ldrd	r8, [sp, #16]
   1f818:	ldrd	sl, [sp, #24]
   1f81c:	add	sp, sp, #32
   1f820:	pop	{pc}		; (ldr pc, [sp], #4)
   1f824:	mov	r4, r0
   1f828:	b	1f804 <__assert_fail@plt+0xe100>
   1f82c:	cmp	r7, #2
   1f830:	bls	1fb14 <__assert_fail@plt+0xe410>
   1f834:	add	r2, sp, #36	; 0x24
   1f838:	mov	r1, r7
   1f83c:	mov	r0, r5
   1f840:	bl	1f1a4 <__assert_fail@plt+0xdaa0>
   1f844:	ldr	r3, [sp, #36]	; 0x24
   1f848:	mov	r8, r0
   1f84c:	str	r3, [sp, #16]
   1f850:	mov	r2, r8
   1f854:	add	r1, r5, r3
   1f858:	mov	r0, r5
   1f85c:	bl	11398 <memcmp@plt>
   1f860:	cmp	r0, #0
   1f864:	bne	1f9c8 <__assert_fail@plt+0xe2c4>
   1f868:	sub	r2, r8, #1
   1f86c:	mov	r3, r8
   1f870:	str	r7, [sp, #4]
   1f874:	sub	r8, r7, #1
   1f878:	rsb	r9, r5, #1
   1f87c:	str	r5, [sp, #8]
   1f880:	str	r2, [sp, #20]
   1f884:	add	r2, r5, r2
   1f888:	add	r8, r8, r5
   1f88c:	mov	sl, r0
   1f890:	mov	r5, r0
   1f894:	str	r2, [sp, #28]
   1f898:	ldr	r2, [sp, #16]
   1f89c:	sub	r2, r7, r2
   1f8a0:	mov	r7, r3
   1f8a4:	str	r2, [sp, #24]
   1f8a8:	rsb	r2, r3, #1
   1f8ac:	str	r2, [sp, #12]
   1f8b0:	mov	r2, r6
   1f8b4:	ldr	r3, [sp, #4]
   1f8b8:	add	r0, r4, r2
   1f8bc:	mov	r1, #0
   1f8c0:	add	fp, r3, sl
   1f8c4:	sub	r2, fp, r2
   1f8c8:	bl	115cc <memchr@plt>
   1f8cc:	clz	r0, r0
   1f8d0:	cmp	fp, #0
   1f8d4:	lsr	r0, r0, #5
   1f8d8:	moveq	r0, #0
   1f8dc:	cmp	r0, #0
   1f8e0:	beq	1f824 <__assert_fail@plt+0xe120>
   1f8e4:	ldr	r3, [sp, #4]
   1f8e8:	cmp	r7, r5
   1f8ec:	movcs	r0, r7
   1f8f0:	movcc	r0, r5
   1f8f4:	cmp	r3, r0
   1f8f8:	bls	1f93c <__assert_fail@plt+0xe238>
   1f8fc:	ldr	r3, [sp, #8]
   1f900:	add	r1, r0, sl
   1f904:	add	r2, r4, r1
   1f908:	ldrb	r1, [r4, r1]
   1f90c:	ldrb	ip, [r3, r0]
   1f910:	add	r3, r3, r0
   1f914:	cmp	r1, ip
   1f918:	beq	1f930 <__assert_fail@plt+0xe22c>
   1f91c:	b	1f9b4 <__assert_fail@plt+0xe2b0>
   1f920:	ldrb	ip, [r3, #1]!
   1f924:	ldrb	r1, [r2, #1]!
   1f928:	cmp	ip, r1
   1f92c:	bne	1f9b4 <__assert_fail@plt+0xe2b0>
   1f930:	cmp	r8, r3
   1f934:	add	r0, r9, r3
   1f938:	bne	1f920 <__assert_fail@plt+0xe21c>
   1f93c:	cmp	r7, r5
   1f940:	bls	1fb2c <__assert_fail@plt+0xe428>
   1f944:	ldr	r3, [sp, #20]
   1f948:	ldr	r0, [sp, #28]
   1f94c:	add	r2, sl, r3
   1f950:	add	r3, r4, r2
   1f954:	ldrb	r2, [r4, r2]
   1f958:	ldrb	r1, [r0]
   1f95c:	cmp	r1, r2
   1f960:	bne	1fb2c <__assert_fail@plt+0xe428>
   1f964:	add	ip, r5, sl
   1f968:	mov	r2, r0
   1f96c:	add	ip, ip, r4
   1f970:	add	r6, r4, sl
   1f974:	b	1f988 <__assert_fail@plt+0xe284>
   1f978:	ldrb	r0, [r2, #-1]!
   1f97c:	ldrb	r1, [r3, #-1]!
   1f980:	cmp	r0, r1
   1f984:	bne	1f994 <__assert_fail@plt+0xe290>
   1f988:	cmp	ip, r3
   1f98c:	sub	lr, r3, r6
   1f990:	bne	1f978 <__assert_fail@plt+0xe274>
   1f994:	add	r5, r5, #1
   1f998:	cmp	r5, lr
   1f99c:	bhi	1fadc <__assert_fail@plt+0xe3d8>
   1f9a0:	ldr	r3, [sp, #16]
   1f9a4:	ldr	r5, [sp, #24]
   1f9a8:	add	sl, sl, r3
   1f9ac:	mov	r2, fp
   1f9b0:	b	1f8b4 <__assert_fail@plt+0xe1b0>
   1f9b4:	ldr	r3, [sp, #12]
   1f9b8:	mov	r5, #0
   1f9bc:	add	sl, r3, sl
   1f9c0:	add	sl, r0, sl
   1f9c4:	b	1f9ac <__assert_fail@plt+0xe2a8>
   1f9c8:	sub	r3, r7, r8
   1f9cc:	mov	r2, r8
   1f9d0:	cmp	r3, r8
   1f9d4:	sub	r1, r8, #1
   1f9d8:	movcc	r3, r2
   1f9dc:	sub	r8, r7, #1
   1f9e0:	add	r3, r3, #1
   1f9e4:	add	r8, r8, r5
   1f9e8:	str	r1, [sp, #12]
   1f9ec:	mov	sl, #0
   1f9f0:	add	r1, r5, r1
   1f9f4:	str	r3, [sp, #16]
   1f9f8:	mov	r3, r2
   1f9fc:	add	r2, r5, r2
   1fa00:	rsb	r9, r5, #1
   1fa04:	str	r2, [sp, #4]
   1fa08:	rsb	r2, r3, #1
   1fa0c:	str	r2, [sp, #8]
   1fa10:	mov	r2, r6
   1fa14:	mov	r6, r3
   1fa18:	str	r1, [sp, #20]
   1fa1c:	add	fp, r7, sl
   1fa20:	add	r0, r4, r2
   1fa24:	mov	r1, #0
   1fa28:	sub	r2, fp, r2
   1fa2c:	bl	115cc <memchr@plt>
   1fa30:	clz	r0, r0
   1fa34:	cmp	fp, #0
   1fa38:	lsr	r0, r0, #5
   1fa3c:	moveq	r0, #0
   1fa40:	cmp	r0, #0
   1fa44:	beq	1f824 <__assert_fail@plt+0xe120>
   1fa48:	cmp	r7, r6
   1fa4c:	bls	1fa94 <__assert_fail@plt+0xe390>
   1fa50:	ldr	r3, [sp, #4]
   1fa54:	add	r2, r6, sl
   1fa58:	add	r1, r4, r2
   1fa5c:	ldrb	r2, [r4, r2]
   1fa60:	ldrb	r0, [r3]
   1fa64:	cmp	r2, r0
   1fa68:	movne	lr, r6
   1fa6c:	bne	1fae4 <__assert_fail@plt+0xe3e0>
   1fa70:	mov	r2, r3
   1fa74:	b	1fa88 <__assert_fail@plt+0xe384>
   1fa78:	ldrb	r0, [r2, #1]!
   1fa7c:	ldrb	r3, [r1, #1]!
   1fa80:	cmp	r0, r3
   1fa84:	bne	1fae4 <__assert_fail@plt+0xe3e0>
   1fa88:	cmp	r8, r2
   1fa8c:	add	lr, r9, r2
   1fa90:	bne	1fa78 <__assert_fail@plt+0xe374>
   1fa94:	ldr	r3, [sp, #12]
   1fa98:	cmn	r3, #1
   1fa9c:	beq	1fadc <__assert_fail@plt+0xe3d8>
   1faa0:	add	r2, sl, r3
   1faa4:	ldr	r3, [sp, #20]
   1faa8:	add	r1, r4, r2
   1faac:	ldrb	r2, [r4, r2]
   1fab0:	ldrb	r0, [r3]
   1fab4:	cmp	r2, r0
   1fab8:	bne	1faf8 <__assert_fail@plt+0xe3f4>
   1fabc:	mov	r2, r3
   1fac0:	b	1fad4 <__assert_fail@plt+0xe3d0>
   1fac4:	ldrb	r0, [r2, #-1]!
   1fac8:	ldrb	r3, [r1, #-1]!
   1facc:	cmp	r0, r3
   1fad0:	bne	1faf8 <__assert_fail@plt+0xe3f4>
   1fad4:	cmp	r5, r2
   1fad8:	bne	1fac4 <__assert_fail@plt+0xe3c0>
   1fadc:	add	r4, r4, sl
   1fae0:	b	1f804 <__assert_fail@plt+0xe100>
   1fae4:	ldr	r3, [sp, #8]
   1fae8:	add	sl, r3, sl
   1faec:	add	sl, lr, sl
   1faf0:	mov	r2, fp
   1faf4:	b	1fa1c <__assert_fail@plt+0xe318>
   1faf8:	ldr	r3, [sp, #16]
   1fafc:	add	sl, sl, r3
   1fb00:	b	1faf0 <__assert_fail@plt+0xe3ec>
   1fb04:	cmp	r3, #0
   1fb08:	moveq	r4, r0
   1fb0c:	movne	r4, #0
   1fb10:	b	1f804 <__assert_fail@plt+0xe100>
   1fb14:	mov	r3, #1
   1fb18:	sub	r2, r7, #1
   1fb1c:	mov	r8, r2
   1fb20:	str	r3, [sp, #16]
   1fb24:	str	r3, [sp, #36]	; 0x24
   1fb28:	b	1f850 <__assert_fail@plt+0xe14c>
   1fb2c:	mov	lr, r7
   1fb30:	b	1f994 <__assert_fail@plt+0xe290>
   1fb34:	mov	r0, #1
   1fb38:	b	13fb8 <__assert_fail@plt+0x28b4>
   1fb3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fb40:	mov	r4, r1
   1fb44:	strd	r6, [sp, #8]
   1fb48:	mov	r6, r2
   1fb4c:	strd	r8, [sp, #16]
   1fb50:	mov	r8, r3
   1fb54:	strd	sl, [sp, #24]
   1fb58:	mov	sl, r0
   1fb5c:	str	lr, [sp, #32]
   1fb60:	sub	sp, sp, #12
   1fb64:	str	r2, [sp]
   1fb68:	bl	1153c <strlen@plt>
   1fb6c:	ldr	fp, [r4]
   1fb70:	cmp	fp, #0
   1fb74:	beq	1fc84 <__assert_fail@plt+0xe580>
   1fb78:	cmp	r6, #0
   1fb7c:	mov	r7, r0
   1fb80:	beq	1fc30 <__assert_fail@plt+0xe52c>
   1fb84:	mov	r5, #0
   1fb88:	mvn	r9, #0
   1fb8c:	str	r5, [sp, #4]
   1fb90:	mov	r2, r7
   1fb94:	mov	r1, sl
   1fb98:	mov	r0, fp
   1fb9c:	bl	116d4 <strncmp@plt>
   1fba0:	cmp	r0, #0
   1fba4:	mov	r0, fp
   1fba8:	bne	1fbe8 <__assert_fail@plt+0xe4e4>
   1fbac:	bl	1153c <strlen@plt>
   1fbb0:	ldr	r3, [sp]
   1fbb4:	cmp	r0, r7
   1fbb8:	mov	r2, r8
   1fbbc:	mov	r1, r6
   1fbc0:	mla	r0, r8, r9, r3
   1fbc4:	beq	1fc28 <__assert_fail@plt+0xe524>
   1fbc8:	cmn	r9, #1
   1fbcc:	moveq	r9, r5
   1fbd0:	beq	1fbe8 <__assert_fail@plt+0xe4e4>
   1fbd4:	bl	11398 <memcmp@plt>
   1fbd8:	ldr	r3, [sp, #4]
   1fbdc:	cmp	r0, #0
   1fbe0:	movne	r3, #1
   1fbe4:	str	r3, [sp, #4]
   1fbe8:	ldr	fp, [r4, #4]!
   1fbec:	add	r5, r5, #1
   1fbf0:	add	r6, r6, r8
   1fbf4:	cmp	fp, #0
   1fbf8:	bne	1fb90 <__assert_fail@plt+0xe48c>
   1fbfc:	ldr	r3, [sp, #4]
   1fc00:	cmp	r3, #0
   1fc04:	mvnne	r9, #1
   1fc08:	mov	r0, r9
   1fc0c:	add	sp, sp, #12
   1fc10:	ldrd	r4, [sp]
   1fc14:	ldrd	r6, [sp, #8]
   1fc18:	ldrd	r8, [sp, #16]
   1fc1c:	ldrd	sl, [sp, #24]
   1fc20:	add	sp, sp, #32
   1fc24:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc28:	mov	r9, r5
   1fc2c:	b	1fc08 <__assert_fail@plt+0xe504>
   1fc30:	mov	r5, r6
   1fc34:	mvn	r9, #0
   1fc38:	mov	r2, r7
   1fc3c:	mov	r1, sl
   1fc40:	mov	r0, fp
   1fc44:	bl	116d4 <strncmp@plt>
   1fc48:	cmp	r0, #0
   1fc4c:	mov	r0, fp
   1fc50:	bne	1fc6c <__assert_fail@plt+0xe568>
   1fc54:	bl	1153c <strlen@plt>
   1fc58:	cmp	r0, r7
   1fc5c:	beq	1fc28 <__assert_fail@plt+0xe524>
   1fc60:	cmn	r9, #1
   1fc64:	moveq	r9, r5
   1fc68:	movne	r6, #1
   1fc6c:	ldr	fp, [r4, #4]!
   1fc70:	add	r5, r5, #1
   1fc74:	cmp	fp, #0
   1fc78:	bne	1fc38 <__assert_fail@plt+0xe534>
   1fc7c:	str	r6, [sp, #4]
   1fc80:	b	1fbfc <__assert_fail@plt+0xe4f8>
   1fc84:	mvn	r9, #0
   1fc88:	b	1fc08 <__assert_fail@plt+0xe504>
   1fc8c:	strd	r4, [sp, #-16]!
   1fc90:	str	r6, [sp, #8]
   1fc94:	mov	r6, r0
   1fc98:	ldr	r0, [r1]
   1fc9c:	str	lr, [sp, #12]
   1fca0:	cmp	r0, #0
   1fca4:	beq	1fce8 <__assert_fail@plt+0xe5e4>
   1fca8:	mov	r4, r1
   1fcac:	mov	r5, #0
   1fcb0:	b	1fcc4 <__assert_fail@plt+0xe5c0>
   1fcb4:	ldr	r0, [r4, #4]!
   1fcb8:	add	r5, r5, #1
   1fcbc:	cmp	r0, #0
   1fcc0:	beq	1fce8 <__assert_fail@plt+0xe5e4>
   1fcc4:	mov	r1, r6
   1fcc8:	bl	11320 <strcmp@plt>
   1fccc:	cmp	r0, #0
   1fcd0:	bne	1fcb4 <__assert_fail@plt+0xe5b0>
   1fcd4:	mov	r0, r5
   1fcd8:	ldrd	r4, [sp]
   1fcdc:	ldr	r6, [sp, #8]
   1fce0:	add	sp, sp, #12
   1fce4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fce8:	ldrd	r4, [sp]
   1fcec:	mvn	r0, #0
   1fcf0:	ldr	r6, [sp, #8]
   1fcf4:	add	sp, sp, #12
   1fcf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fcfc:	cmn	r2, #1
   1fd00:	strd	r4, [sp, #-16]!
   1fd04:	mov	r5, r1
   1fd08:	movweq	r1, #10588	; 0x295c
   1fd0c:	movwne	r1, #10616	; 0x2978
   1fd10:	str	r6, [sp, #8]
   1fd14:	movteq	r1, #2
   1fd18:	movtne	r1, #2
   1fd1c:	str	lr, [sp, #12]
   1fd20:	mov	r6, r0
   1fd24:	sub	sp, sp, #8
   1fd28:	mov	r2, #5
   1fd2c:	mov	r0, #0
   1fd30:	bl	113bc <dcgettext@plt>
   1fd34:	mov	r4, r0
   1fd38:	mov	r2, r5
   1fd3c:	mov	r1, #8
   1fd40:	mov	r0, #0
   1fd44:	bl	1bd1c <__assert_fail@plt+0xa618>
   1fd48:	mov	r5, r0
   1fd4c:	mov	r1, r6
   1fd50:	mov	r0, #1
   1fd54:	bl	1d114 <__assert_fail@plt+0xba10>
   1fd58:	mov	r1, #0
   1fd5c:	mov	r3, r5
   1fd60:	str	r0, [sp]
   1fd64:	mov	r2, r4
   1fd68:	mov	r0, r1
   1fd6c:	bl	11494 <error@plt>
   1fd70:	add	sp, sp, #8
   1fd74:	ldrd	r4, [sp]
   1fd78:	ldr	r6, [sp, #8]
   1fd7c:	add	sp, sp, #12
   1fd80:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fd88:	mov	r4, r1
   1fd8c:	movw	r1, #10648	; 0x2998
   1fd90:	movt	r1, #2
   1fd94:	strd	r6, [sp, #8]
   1fd98:	mov	r6, r0
   1fd9c:	mov	r7, r2
   1fda0:	mov	r0, #0
   1fda4:	strd	r8, [sp, #16]
   1fda8:	mov	r2, #5
   1fdac:	strd	sl, [sp, #24]
   1fdb0:	movw	sl, #13104	; 0x3330
   1fdb4:	movt	sl, #3
   1fdb8:	str	lr, [sp, #32]
   1fdbc:	sub	sp, sp, #12
   1fdc0:	bl	113bc <dcgettext@plt>
   1fdc4:	ldr	r1, [sl]
   1fdc8:	bl	112f0 <fputs_unlocked@plt>
   1fdcc:	ldr	fp, [r6]
   1fdd0:	cmp	fp, #0
   1fdd4:	beq	1fe74 <__assert_fail@plt+0xe770>
   1fdd8:	movw	r3, #10672	; 0x29b0
   1fddc:	movt	r3, #2
   1fde0:	mov	r9, #0
   1fde4:	str	r3, [sp]
   1fde8:	movw	r3, #10680	; 0x29b8
   1fdec:	movt	r3, #2
   1fdf0:	mov	r5, r9
   1fdf4:	str	r3, [sp, #4]
   1fdf8:	b	1fe30 <__assert_fail@plt+0xe72c>
   1fdfc:	mov	r0, fp
   1fe00:	mov	r9, r4
   1fe04:	bl	1d124 <__assert_fail@plt+0xba20>
   1fe08:	mov	r3, r0
   1fe0c:	mov	r1, #1
   1fe10:	ldr	r2, [sp]
   1fe14:	mov	r0, r8
   1fe18:	bl	115c0 <__fprintf_chk@plt>
   1fe1c:	ldr	fp, [r6, #4]!
   1fe20:	add	r5, r5, #1
   1fe24:	add	r4, r4, r7
   1fe28:	cmp	fp, #0
   1fe2c:	beq	1fe74 <__assert_fail@plt+0xe770>
   1fe30:	cmp	r5, #0
   1fe34:	mov	r1, r4
   1fe38:	ldr	r8, [sl]
   1fe3c:	mov	r2, r7
   1fe40:	mov	r0, r9
   1fe44:	beq	1fdfc <__assert_fail@plt+0xe6f8>
   1fe48:	bl	11398 <memcmp@plt>
   1fe4c:	cmp	r0, #0
   1fe50:	bne	1fdfc <__assert_fail@plt+0xe6f8>
   1fe54:	mov	r0, fp
   1fe58:	bl	1d124 <__assert_fail@plt+0xba20>
   1fe5c:	mov	r3, r0
   1fe60:	mov	r1, #1
   1fe64:	ldr	r2, [sp, #4]
   1fe68:	mov	r0, r8
   1fe6c:	bl	115c0 <__fprintf_chk@plt>
   1fe70:	b	1fe1c <__assert_fail@plt+0xe718>
   1fe74:	ldr	r0, [sl]
   1fe78:	ldr	r3, [r0, #20]
   1fe7c:	ldr	r2, [r0, #24]
   1fe80:	cmp	r3, r2
   1fe84:	bcs	1feb4 <__assert_fail@plt+0xe7b0>
   1fe88:	add	r1, r3, #1
   1fe8c:	mov	r2, #10
   1fe90:	str	r1, [r0, #20]
   1fe94:	strb	r2, [r3]
   1fe98:	add	sp, sp, #12
   1fe9c:	ldrd	r4, [sp]
   1fea0:	ldrd	r6, [sp, #8]
   1fea4:	ldrd	r8, [sp, #16]
   1fea8:	ldrd	sl, [sp, #24]
   1feac:	add	sp, sp, #32
   1feb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1feb4:	mov	r1, #10
   1feb8:	add	sp, sp, #12
   1febc:	ldrd	r4, [sp]
   1fec0:	ldrd	r6, [sp, #8]
   1fec4:	ldrd	r8, [sp, #16]
   1fec8:	ldrd	sl, [sp, #24]
   1fecc:	ldr	lr, [sp, #32]
   1fed0:	add	sp, sp, #36	; 0x24
   1fed4:	b	11608 <__overflow@plt>
   1fed8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1fedc:	mov	r5, r1
   1fee0:	strd	r6, [sp, #8]
   1fee4:	mov	r6, r2
   1fee8:	mov	r7, r3
   1feec:	strd	r8, [sp, #16]
   1fef0:	mov	r8, r0
   1fef4:	str	lr, [sp, #24]
   1fef8:	sub	sp, sp, #12
   1fefc:	ldrb	r4, [sp, #48]	; 0x30
   1ff00:	cmp	r4, #0
   1ff04:	bne	1ffb0 <__assert_fail@plt+0xe8ac>
   1ff08:	ldr	r0, [r2]
   1ff0c:	cmp	r0, #0
   1ff10:	movne	r9, r2
   1ff14:	bne	1ff98 <__assert_fail@plt+0xe894>
   1ff18:	movw	r1, #10588	; 0x295c
   1ff1c:	movt	r1, #2
   1ff20:	mov	r2, #5
   1ff24:	mov	r0, #0
   1ff28:	bl	113bc <dcgettext@plt>
   1ff2c:	mov	r9, r0
   1ff30:	mov	r2, r5
   1ff34:	mov	r1, #8
   1ff38:	mov	r0, #0
   1ff3c:	bl	1bd1c <__assert_fail@plt+0xa618>
   1ff40:	mov	r4, r0
   1ff44:	mov	r1, r8
   1ff48:	mov	r0, #1
   1ff4c:	bl	1d114 <__assert_fail@plt+0xba10>
   1ff50:	mov	r1, #0
   1ff54:	mov	r3, r4
   1ff58:	str	r0, [sp]
   1ff5c:	mov	r2, r9
   1ff60:	mov	r0, r1
   1ff64:	bl	11494 <error@plt>
   1ff68:	mov	r0, r6
   1ff6c:	mov	r1, r7
   1ff70:	ldr	r2, [sp, #40]	; 0x28
   1ff74:	bl	1fd84 <__assert_fail@plt+0xe680>
   1ff78:	ldr	r3, [sp, #44]	; 0x2c
   1ff7c:	blx	r3
   1ff80:	mvn	r0, #0
   1ff84:	b	1ffcc <__assert_fail@plt+0xe8c8>
   1ff88:	ldr	r0, [r9, #4]!
   1ff8c:	add	r4, r4, #1
   1ff90:	cmp	r0, #0
   1ff94:	beq	1ff18 <__assert_fail@plt+0xe814>
   1ff98:	mov	r1, r5
   1ff9c:	bl	11320 <strcmp@plt>
   1ffa0:	cmp	r0, #0
   1ffa4:	bne	1ff88 <__assert_fail@plt+0xe884>
   1ffa8:	mov	r0, r4
   1ffac:	b	1ffcc <__assert_fail@plt+0xe8c8>
   1ffb0:	mov	r2, r3
   1ffb4:	mov	r1, r6
   1ffb8:	ldr	r3, [sp, #40]	; 0x28
   1ffbc:	mov	r0, r5
   1ffc0:	bl	1fb3c <__assert_fail@plt+0xe438>
   1ffc4:	cmp	r0, #0
   1ffc8:	blt	1ffe4 <__assert_fail@plt+0xe8e0>
   1ffcc:	add	sp, sp, #12
   1ffd0:	ldrd	r4, [sp]
   1ffd4:	ldrd	r6, [sp, #8]
   1ffd8:	ldrd	r8, [sp, #16]
   1ffdc:	add	sp, sp, #24
   1ffe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ffe4:	cmn	r0, #1
   1ffe8:	beq	1ff18 <__assert_fail@plt+0xe814>
   1ffec:	movw	r1, #10616	; 0x2978
   1fff0:	movt	r1, #2
   1fff4:	mov	r2, #5
   1fff8:	mov	r0, #0
   1fffc:	bl	113bc <dcgettext@plt>
   20000:	mov	r9, r0
   20004:	b	1ff30 <__assert_fail@plt+0xe82c>
   20008:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2000c:	strd	r6, [sp, #8]
   20010:	ldr	r7, [r1]
   20014:	str	r8, [sp, #16]
   20018:	str	lr, [sp, #20]
   2001c:	cmp	r7, #0
   20020:	beq	20060 <__assert_fail@plt+0xe95c>
   20024:	mov	r6, r3
   20028:	mov	r8, r0
   2002c:	mov	r4, r2
   20030:	mov	r5, r1
   20034:	b	20044 <__assert_fail@plt+0xe940>
   20038:	ldr	r7, [r5, #4]!
   2003c:	cmp	r7, #0
   20040:	beq	20060 <__assert_fail@plt+0xe95c>
   20044:	mov	r1, r4
   20048:	mov	r2, r6
   2004c:	mov	r0, r8
   20050:	add	r4, r4, r6
   20054:	bl	11398 <memcmp@plt>
   20058:	cmp	r0, #0
   2005c:	bne	20038 <__assert_fail@plt+0xe934>
   20060:	mov	r0, r7
   20064:	ldrd	r4, [sp]
   20068:	ldrd	r6, [sp, #8]
   2006c:	ldr	r8, [sp, #16]
   20070:	add	sp, sp, #20
   20074:	pop	{pc}		; (ldr pc, [sp], #4)
   20078:	ldrb	r3, [r0]
   2007c:	cmp	r3, #47	; 0x2f
   20080:	bne	20090 <__assert_fail@plt+0xe98c>
   20084:	ldrb	r3, [r0, #1]!
   20088:	cmp	r3, #47	; 0x2f
   2008c:	beq	20084 <__assert_fail@plt+0xe980>
   20090:	cmp	r3, #0
   20094:	beq	200c4 <__assert_fail@plt+0xe9c0>
   20098:	mov	r2, r0
   2009c:	mov	r1, #0
   200a0:	cmp	r3, #47	; 0x2f
   200a4:	moveq	r1, #1
   200a8:	beq	200b8 <__assert_fail@plt+0xe9b4>
   200ac:	cmp	r1, #0
   200b0:	movne	r0, r2
   200b4:	movne	r1, #0
   200b8:	ldrb	r3, [r2, #1]!
   200bc:	cmp	r3, #0
   200c0:	bne	200a0 <__assert_fail@plt+0xe99c>
   200c4:	bx	lr
   200c8:	str	r4, [sp, #-8]!
   200cc:	mov	r4, r0
   200d0:	str	lr, [sp, #4]
   200d4:	bl	1153c <strlen@plt>
   200d8:	cmp	r0, #1
   200dc:	bls	200f0 <__assert_fail@plt+0xe9ec>
   200e0:	sub	r2, r0, #1
   200e4:	ldrb	r1, [r4, r2]
   200e8:	cmp	r1, #47	; 0x2f
   200ec:	beq	200fc <__assert_fail@plt+0xe9f8>
   200f0:	ldr	r4, [sp]
   200f4:	add	sp, sp, #4
   200f8:	pop	{pc}		; (ldr pc, [sp], #4)
   200fc:	cmp	r2, #1
   20100:	beq	20114 <__assert_fail@plt+0xea10>
   20104:	add	r1, r4, r0
   20108:	ldrb	r1, [r1, #-2]
   2010c:	cmp	r1, #47	; 0x2f
   20110:	beq	20124 <__assert_fail@plt+0xea20>
   20114:	ldr	r4, [sp]
   20118:	add	sp, sp, #4
   2011c:	mov	r0, r2
   20120:	pop	{pc}		; (ldr pc, [sp], #4)
   20124:	sub	r3, r0, #3
   20128:	rsb	r0, r4, #1
   2012c:	add	r3, r4, r3
   20130:	cmp	r3, r4
   20134:	add	r2, r0, r3
   20138:	beq	20114 <__assert_fail@plt+0xea10>
   2013c:	ldrb	r1, [r3], #-1
   20140:	cmp	r1, #47	; 0x2f
   20144:	bne	20114 <__assert_fail@plt+0xea10>
   20148:	b	20130 <__assert_fail@plt+0xea2c>
   2014c:	movw	r3, #10688	; 0x29c0
   20150:	movt	r3, #2
   20154:	str	r4, [sp, #-8]!
   20158:	movw	r1, #10712	; 0x29d8
   2015c:	movt	r1, #2
   20160:	str	lr, [sp, #4]
   20164:	movw	r0, #10732	; 0x29ec
   20168:	movt	r0, #2
   2016c:	mov	r2, #64	; 0x40
   20170:	bl	11704 <__assert_fail@plt>
   20174:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20178:	strd	r6, [sp, #8]
   2017c:	mov	r6, r0
   20180:	strd	r8, [sp, #16]
   20184:	strd	sl, [sp, #24]
   20188:	str	lr, [sp, #32]
   2018c:	sub	sp, sp, #4
   20190:	bl	11404 <chdir@plt>
   20194:	subs	r4, r0, #0
   20198:	beq	202fc <__assert_fail@plt+0xebf8>
   2019c:	bl	1156c <__errno_location@plt>
   201a0:	ldr	r3, [r0]
   201a4:	mov	sl, r0
   201a8:	cmp	r3, #36	; 0x24
   201ac:	bne	202fc <__assert_fail@plt+0xebf8>
   201b0:	mov	r0, r6
   201b4:	bl	1153c <strlen@plt>
   201b8:	subs	r7, r0, #0
   201bc:	beq	2044c <__assert_fail@plt+0xed48>
   201c0:	cmp	r7, #4096	; 0x1000
   201c4:	bcc	20468 <__assert_fail@plt+0xed64>
   201c8:	movw	r1, #8760	; 0x2238
   201cc:	movt	r1, #2
   201d0:	mov	r0, r6
   201d4:	bl	116f8 <strspn@plt>
   201d8:	cmp	r0, #2
   201dc:	mov	r4, r0
   201e0:	beq	20340 <__assert_fail@plt+0xec3c>
   201e4:	cmp	r0, #0
   201e8:	moveq	r4, r6
   201ec:	mvneq	r5, #99	; 0x63
   201f0:	bne	2031c <__assert_fail@plt+0xec18>
   201f4:	ldrb	r3, [r4]
   201f8:	cmp	r3, #47	; 0x2f
   201fc:	beq	20484 <__assert_fail@plt+0xed80>
   20200:	add	r6, r6, r7
   20204:	cmp	r4, r6
   20208:	bhi	204a0 <__assert_fail@plt+0xed9c>
   2020c:	sub	r3, r6, r4
   20210:	cmp	r3, #4096	; 0x1000
   20214:	blt	202ac <__assert_fail@plt+0xeba8>
   20218:	movw	r8, #8760	; 0x2238
   2021c:	movt	r8, #2
   20220:	mov	r9, #47	; 0x2f
   20224:	b	2024c <__assert_fail@plt+0xeb48>
   20228:	mov	r1, r8
   2022c:	strb	r9, [fp], #1
   20230:	mov	r0, fp
   20234:	bl	116f8 <strspn@plt>
   20238:	add	r4, fp, r0
   2023c:	mov	r5, r7
   20240:	sub	r3, r6, r4
   20244:	cmp	r3, #4096	; 0x1000
   20248:	blt	202b0 <__assert_fail@plt+0xebac>
   2024c:	mov	r2, #4096	; 0x1000
   20250:	mov	r1, #47	; 0x2f
   20254:	mov	r0, r4
   20258:	bl	11560 <memrchr@plt>
   2025c:	subs	fp, r0, #0
   20260:	beq	2039c <__assert_fail@plt+0xec98>
   20264:	mov	r3, #0
   20268:	sub	r2, fp, r4
   2026c:	cmp	r2, #4096	; 0x1000
   20270:	strb	r3, [fp]
   20274:	bge	20430 <__assert_fail@plt+0xed2c>
   20278:	mov	r1, r4
   2027c:	mov	r2, #18688	; 0x4900
   20280:	mov	r0, r5
   20284:	bl	11554 <openat64@plt>
   20288:	subs	r7, r0, #0
   2028c:	blt	203f0 <__assert_fail@plt+0xecec>
   20290:	cmp	r5, #0
   20294:	blt	20228 <__assert_fail@plt+0xeb24>
   20298:	mov	r0, r5
   2029c:	bl	116ec <close@plt>
   202a0:	cmp	r0, #0
   202a4:	beq	20228 <__assert_fail@plt+0xeb24>
   202a8:	bl	2014c <__assert_fail@plt+0xea48>
   202ac:	mov	r7, r5
   202b0:	cmp	r6, r4
   202b4:	bls	203ac <__assert_fail@plt+0xeca8>
   202b8:	mov	r1, r4
   202bc:	mov	r2, #18688	; 0x4900
   202c0:	mov	r0, r7
   202c4:	bl	11554 <openat64@plt>
   202c8:	subs	r5, r0, #0
   202cc:	blt	203bc <__assert_fail@plt+0xecb8>
   202d0:	cmp	r7, #0
   202d4:	bge	20414 <__assert_fail@plt+0xed10>
   202d8:	mov	r0, r5
   202dc:	bl	11674 <fchdir@plt>
   202e0:	cmp	r0, #0
   202e4:	bne	203d8 <__assert_fail@plt+0xecd4>
   202e8:	mov	r0, r5
   202ec:	bl	116ec <close@plt>
   202f0:	cmp	r0, #0
   202f4:	bne	202a8 <__assert_fail@plt+0xeba4>
   202f8:	mov	r4, #0
   202fc:	mov	r0, r4
   20300:	add	sp, sp, #4
   20304:	ldrd	r4, [sp]
   20308:	ldrd	r6, [sp, #8]
   2030c:	ldrd	r8, [sp, #16]
   20310:	ldrd	sl, [sp, #24]
   20314:	add	sp, sp, #32
   20318:	pop	{pc}		; (ldr pc, [sp], #4)
   2031c:	movw	r1, #8760	; 0x2238
   20320:	movt	r1, #2
   20324:	mov	r2, #18688	; 0x4900
   20328:	mvn	r0, #99	; 0x63
   2032c:	bl	11554 <openat64@plt>
   20330:	subs	r5, r0, #0
   20334:	blt	20428 <__assert_fail@plt+0xed24>
   20338:	add	r4, r6, r4
   2033c:	b	201f4 <__assert_fail@plt+0xeaf0>
   20340:	sub	r2, r7, #3
   20344:	mov	r1, #47	; 0x2f
   20348:	add	r0, r6, #3
   2034c:	bl	115cc <memchr@plt>
   20350:	subs	r4, r0, #0
   20354:	beq	203fc <__assert_fail@plt+0xecf8>
   20358:	mov	r3, #0
   2035c:	mov	r2, #18688	; 0x4900
   20360:	mov	r1, r6
   20364:	mvn	r0, #99	; 0x63
   20368:	strb	r3, [r4]
   2036c:	bl	11554 <openat64@plt>
   20370:	subs	r5, r0, #0
   20374:	mov	r3, #47	; 0x2f
   20378:	strblt	r3, [r4]
   2037c:	blt	20428 <__assert_fail@plt+0xed24>
   20380:	movw	r1, #8760	; 0x2238
   20384:	movt	r1, #2
   20388:	strb	r3, [r4], #1
   2038c:	mov	r0, r4
   20390:	bl	116f8 <strspn@plt>
   20394:	add	r4, r4, r0
   20398:	b	201f4 <__assert_fail@plt+0xeaf0>
   2039c:	mov	r3, #36	; 0x24
   203a0:	mvn	r4, #0
   203a4:	str	r3, [sl]
   203a8:	b	202fc <__assert_fail@plt+0xebf8>
   203ac:	mov	r0, r7
   203b0:	bl	11674 <fchdir@plt>
   203b4:	cmp	r0, #0
   203b8:	beq	20404 <__assert_fail@plt+0xed00>
   203bc:	mov	r5, r7
   203c0:	cmp	r5, #0
   203c4:	ldr	r6, [sl]
   203c8:	bge	203dc <__assert_fail@plt+0xecd8>
   203cc:	mvn	r4, #0
   203d0:	str	r6, [sl]
   203d4:	b	202fc <__assert_fail@plt+0xebf8>
   203d8:	ldr	r6, [sl]
   203dc:	mov	r0, r5
   203e0:	bl	116ec <close@plt>
   203e4:	cmp	r0, #0
   203e8:	beq	203cc <__assert_fail@plt+0xecc8>
   203ec:	b	202a8 <__assert_fail@plt+0xeba4>
   203f0:	mov	r3, #47	; 0x2f
   203f4:	strb	r3, [fp]
   203f8:	b	203c0 <__assert_fail@plt+0xecbc>
   203fc:	mvn	r4, #0
   20400:	b	202fc <__assert_fail@plt+0xebf8>
   20404:	cmp	r7, #0
   20408:	blt	202f8 <__assert_fail@plt+0xebf4>
   2040c:	mov	r5, r7
   20410:	b	202e8 <__assert_fail@plt+0xebe4>
   20414:	mov	r0, r7
   20418:	bl	116ec <close@plt>
   2041c:	cmp	r0, #0
   20420:	beq	202d8 <__assert_fail@plt+0xebd4>
   20424:	b	202a8 <__assert_fail@plt+0xeba4>
   20428:	ldr	r6, [sl]
   2042c:	b	203cc <__assert_fail@plt+0xecc8>
   20430:	movw	r1, #10712	; 0x29d8
   20434:	movt	r1, #2
   20438:	ldr	r3, [pc, #124]	; 204bc <__assert_fail@plt+0xedb8>
   2043c:	movw	r0, #10796	; 0x2a2c
   20440:	movt	r0, #2
   20444:	mov	r2, #179	; 0xb3
   20448:	bl	11704 <__assert_fail@plt>
   2044c:	movw	r1, #10712	; 0x29d8
   20450:	movt	r1, #2
   20454:	ldr	r3, [pc, #96]	; 204bc <__assert_fail@plt+0xedb8>
   20458:	movw	r0, #10748	; 0x29fc
   2045c:	movt	r0, #2
   20460:	mov	r2, #126	; 0x7e
   20464:	bl	11704 <__assert_fail@plt>
   20468:	movw	r1, #10712	; 0x29d8
   2046c:	movt	r1, #2
   20470:	ldr	r3, [pc, #68]	; 204bc <__assert_fail@plt+0xedb8>
   20474:	movw	r0, #10756	; 0x2a04
   20478:	movt	r0, #2
   2047c:	mov	r2, #127	; 0x7f
   20480:	bl	11704 <__assert_fail@plt>
   20484:	movw	r1, #10712	; 0x29d8
   20488:	movt	r1, #2
   2048c:	ldr	r3, [pc, #40]	; 204bc <__assert_fail@plt+0xedb8>
   20490:	movw	r0, #10768	; 0x2a10
   20494:	movt	r0, #2
   20498:	mov	r2, #162	; 0xa2
   2049c:	bl	11704 <__assert_fail@plt>
   204a0:	movw	r1, #10712	; 0x29d8
   204a4:	movt	r1, #2
   204a8:	ldr	r3, [pc, #12]	; 204bc <__assert_fail@plt+0xedb8>
   204ac:	movw	r0, #10780	; 0x2a1c
   204b0:	movt	r0, #2
   204b4:	mov	r2, #163	; 0xa3
   204b8:	bl	11704 <__assert_fail@plt>
   204bc:	andeq	r2, r2, ip, asr #19
   204c0:	strd	r4, [sp, #-16]!
   204c4:	mov	r4, r0
   204c8:	str	r6, [sp, #8]
   204cc:	str	lr, [sp, #12]
   204d0:	bl	11470 <__fpending@plt>
   204d4:	ldr	r5, [r4]
   204d8:	mov	r6, r0
   204dc:	mov	r0, r4
   204e0:	bl	20548 <__assert_fail@plt+0xee44>
   204e4:	mov	r4, r0
   204e8:	and	r5, r5, #32
   204ec:	cmp	r5, #0
   204f0:	bne	20528 <__assert_fail@plt+0xee24>
   204f4:	cmp	r0, #0
   204f8:	beq	20514 <__assert_fail@plt+0xee10>
   204fc:	cmp	r6, #0
   20500:	bne	20540 <__assert_fail@plt+0xee3c>
   20504:	bl	1156c <__errno_location@plt>
   20508:	ldr	r4, [r0]
   2050c:	subs	r4, r4, #9
   20510:	mvnne	r4, #0
   20514:	mov	r0, r4
   20518:	ldrd	r4, [sp]
   2051c:	ldr	r6, [sp, #8]
   20520:	add	sp, sp, #12
   20524:	pop	{pc}		; (ldr pc, [sp], #4)
   20528:	cmp	r0, #0
   2052c:	bne	20540 <__assert_fail@plt+0xee3c>
   20530:	bl	1156c <__errno_location@plt>
   20534:	str	r4, [r0]
   20538:	mvn	r4, #0
   2053c:	b	20514 <__assert_fail@plt+0xee10>
   20540:	mvn	r4, #0
   20544:	b	20514 <__assert_fail@plt+0xee10>
   20548:	strd	r4, [sp, #-12]!
   2054c:	mov	r4, r0
   20550:	str	lr, [sp, #8]
   20554:	sub	sp, sp, #12
   20558:	bl	115b4 <fileno@plt>
   2055c:	cmp	r0, #0
   20560:	mov	r0, r4
   20564:	blt	205e8 <__assert_fail@plt+0xeee4>
   20568:	bl	114e8 <__freading@plt>
   2056c:	cmp	r0, #0
   20570:	bne	205b4 <__assert_fail@plt+0xeeb0>
   20574:	mov	r0, r4
   20578:	bl	2063c <__assert_fail@plt+0xef38>
   2057c:	cmp	r0, #0
   20580:	beq	205e4 <__assert_fail@plt+0xeee0>
   20584:	bl	1156c <__errno_location@plt>
   20588:	mov	r5, r0
   2058c:	mov	r0, r4
   20590:	ldr	r4, [r5]
   20594:	bl	115d8 <fclose@plt>
   20598:	cmp	r4, #0
   2059c:	mvnne	r0, #0
   205a0:	strne	r4, [r5]
   205a4:	add	sp, sp, #12
   205a8:	ldrd	r4, [sp]
   205ac:	add	sp, sp, #8
   205b0:	pop	{pc}		; (ldr pc, [sp], #4)
   205b4:	mov	r0, r4
   205b8:	bl	115b4 <fileno@plt>
   205bc:	mov	r1, #1
   205c0:	mov	r2, #0
   205c4:	mov	r3, #0
   205c8:	str	r1, [sp]
   205cc:	bl	1144c <lseek64@plt>
   205d0:	mvn	r3, #0
   205d4:	mvn	r2, #0
   205d8:	cmp	r1, r3
   205dc:	cmpeq	r0, r2
   205e0:	bne	20574 <__assert_fail@plt+0xee70>
   205e4:	mov	r0, r4
   205e8:	add	sp, sp, #12
   205ec:	ldrd	r4, [sp]
   205f0:	ldr	lr, [sp, #8]
   205f4:	add	sp, sp, #12
   205f8:	b	115d8 <fclose@plt>
   205fc:	push	{r1, r2, r3}
   20600:	push	{lr}		; (str lr, [sp, #-4]!)
   20604:	sub	sp, sp, #8
   20608:	ldr	r1, [sp, #12]
   2060c:	ands	r2, r1, #64	; 0x40
   20610:	bne	2062c <__assert_fail@plt+0xef28>
   20614:	bl	114ac <open64@plt>
   20618:	bl	20940 <__assert_fail@plt+0xf23c>
   2061c:	add	sp, sp, #8
   20620:	pop	{lr}		; (ldr lr, [sp], #4)
   20624:	add	sp, sp, #12
   20628:	bx	lr
   2062c:	add	r3, sp, #16
   20630:	ldr	r2, [sp, #16]
   20634:	str	r3, [sp, #4]
   20638:	b	20614 <__assert_fail@plt+0xef10>
   2063c:	str	r4, [sp, #-8]!
   20640:	subs	r4, r0, #0
   20644:	str	lr, [sp, #4]
   20648:	sub	sp, sp, #8
   2064c:	beq	20668 <__assert_fail@plt+0xef64>
   20650:	bl	114e8 <__freading@plt>
   20654:	cmp	r0, #0
   20658:	beq	20668 <__assert_fail@plt+0xef64>
   2065c:	ldr	r3, [r4]
   20660:	tst	r3, #256	; 0x100
   20664:	bne	20680 <__assert_fail@plt+0xef7c>
   20668:	mov	r0, r4
   2066c:	add	sp, sp, #8
   20670:	ldr	r4, [sp]
   20674:	ldr	lr, [sp, #4]
   20678:	add	sp, sp, #8
   2067c:	b	1132c <fflush@plt>
   20680:	mov	r1, #1
   20684:	mov	r2, #0
   20688:	mov	r3, #0
   2068c:	mov	r0, r4
   20690:	str	r1, [sp]
   20694:	bl	2069c <__assert_fail@plt+0xef98>
   20698:	b	20668 <__assert_fail@plt+0xef64>
   2069c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   206a0:	mov	r4, r0
   206a4:	ldr	ip, [r0, #4]
   206a8:	strd	r6, [sp, #8]
   206ac:	str	lr, [sp, #20]
   206b0:	ldr	lr, [r0, #8]
   206b4:	str	r8, [sp, #16]
   206b8:	sub	sp, sp, #8
   206bc:	ldr	r5, [sp, #32]
   206c0:	cmp	lr, ip
   206c4:	beq	206ec <__assert_fail@plt+0xefe8>
   206c8:	mov	r0, r4
   206cc:	str	r5, [sp, #32]
   206d0:	add	sp, sp, #8
   206d4:	ldrd	r4, [sp]
   206d8:	ldrd	r6, [sp, #8]
   206dc:	ldr	r8, [sp, #16]
   206e0:	ldr	lr, [sp, #20]
   206e4:	add	sp, sp, #24
   206e8:	b	115e4 <fseeko64@plt>
   206ec:	ldr	ip, [r0, #16]
   206f0:	ldr	lr, [r0, #20]
   206f4:	cmp	lr, ip
   206f8:	bne	206c8 <__assert_fail@plt+0xefc4>
   206fc:	ldr	r8, [r0, #36]	; 0x24
   20700:	cmp	r8, #0
   20704:	bne	206c8 <__assert_fail@plt+0xefc4>
   20708:	mov	r6, r2
   2070c:	mov	r7, r3
   20710:	bl	115b4 <fileno@plt>
   20714:	mov	r2, r6
   20718:	mov	r3, r7
   2071c:	str	r5, [sp]
   20720:	bl	1144c <lseek64@plt>
   20724:	mvn	r3, #0
   20728:	mvn	r2, #0
   2072c:	cmp	r1, r3
   20730:	cmpeq	r0, r2
   20734:	beq	20764 <__assert_fail@plt+0xf060>
   20738:	ldr	r3, [r4]
   2073c:	strd	r0, [r4, #80]	; 0x50
   20740:	bic	r3, r3, #16
   20744:	str	r3, [r4]
   20748:	mov	r0, r8
   2074c:	add	sp, sp, #8
   20750:	ldrd	r4, [sp]
   20754:	ldrd	r6, [sp, #8]
   20758:	ldr	r8, [sp, #16]
   2075c:	add	sp, sp, #20
   20760:	pop	{pc}		; (ldr pc, [sp], #4)
   20764:	mvn	r8, #0
   20768:	b	20748 <__assert_fail@plt+0xf044>
   2076c:	push	{lr}		; (str lr, [sp, #-4]!)
   20770:	sub	sp, sp, #268	; 0x10c
   20774:	movw	r2, #257	; 0x101
   20778:	add	r1, sp, #4
   2077c:	bl	2087c <__assert_fail@plt+0xf178>
   20780:	cmp	r0, #0
   20784:	movne	r0, #0
   20788:	bne	207bc <__assert_fail@plt+0xf0b8>
   2078c:	movw	r1, #10816	; 0x2a40
   20790:	movt	r1, #2
   20794:	add	r0, sp, #4
   20798:	bl	11320 <strcmp@plt>
   2079c:	cmp	r0, #0
   207a0:	beq	207bc <__assert_fail@plt+0xf0b8>
   207a4:	add	r0, sp, #4
   207a8:	movw	r1, #10820	; 0x2a44
   207ac:	movt	r1, #2
   207b0:	bl	11320 <strcmp@plt>
   207b4:	adds	r0, r0, #0
   207b8:	movne	r0, #1
   207bc:	add	sp, sp, #268	; 0x10c
   207c0:	pop	{pc}		; (ldr pc, [sp], #4)
   207c4:	ldrb	r3, [r0]
   207c8:	cmp	r3, #0
   207cc:	beq	207f0 <__assert_fail@plt+0xf0ec>
   207d0:	mov	r2, #0
   207d4:	add	r2, r3, r2, ror #23
   207d8:	ldrb	r3, [r0, #1]!
   207dc:	cmp	r3, #0
   207e0:	bne	207d4 <__assert_fail@plt+0xf0d0>
   207e4:	udiv	r3, r2, r1
   207e8:	mls	r0, r1, r3, r2
   207ec:	bx	lr
   207f0:	mov	r0, r3
   207f4:	bx	lr
   207f8:	mov	r0, #14
   207fc:	str	r4, [sp, #-8]!
   20800:	str	lr, [sp, #4]
   20804:	bl	11644 <nl_langinfo@plt>
   20808:	cmp	r0, #0
   2080c:	beq	20830 <__assert_fail@plt+0xf12c>
   20810:	ldrb	r2, [r0]
   20814:	movw	r3, #10828	; 0x2a4c
   20818:	movt	r3, #2
   2081c:	ldr	r4, [sp]
   20820:	add	sp, sp, #4
   20824:	cmp	r2, #0
   20828:	moveq	r0, r3
   2082c:	pop	{pc}		; (ldr pc, [sp], #4)
   20830:	ldr	r4, [sp]
   20834:	add	sp, sp, #4
   20838:	movw	r0, #10828	; 0x2a4c
   2083c:	movt	r0, #2
   20840:	pop	{pc}		; (ldr pc, [sp], #4)
   20844:	umull	r2, r3, r1, r2
   20848:	cmp	r3, #0
   2084c:	bne	20858 <__assert_fail@plt+0xf154>
   20850:	mov	r1, r2
   20854:	b	1f14c <__assert_fail@plt+0xda48>
   20858:	str	r4, [sp, #-8]!
   2085c:	str	lr, [sp, #4]
   20860:	bl	1156c <__errno_location@plt>
   20864:	mov	r3, #12
   20868:	ldr	r4, [sp]
   2086c:	add	sp, sp, #4
   20870:	str	r3, [r0]
   20874:	mov	r0, #0
   20878:	pop	{pc}		; (ldr pc, [sp], #4)
   2087c:	strd	r4, [sp, #-16]!
   20880:	mov	r5, r1
   20884:	mov	r1, #0
   20888:	mov	r4, r2
   2088c:	str	r6, [sp, #8]
   20890:	str	lr, [sp, #12]
   20894:	bl	11614 <setlocale@plt>
   20898:	subs	r6, r0, #0
   2089c:	beq	2091c <__assert_fail@plt+0xf218>
   208a0:	bl	1153c <strlen@plt>
   208a4:	cmp	r4, r0
   208a8:	bhi	208c8 <__assert_fail@plt+0xf1c4>
   208ac:	cmp	r4, #0
   208b0:	moveq	r0, #34	; 0x22
   208b4:	bne	208ec <__assert_fail@plt+0xf1e8>
   208b8:	ldrd	r4, [sp]
   208bc:	ldr	r6, [sp, #8]
   208c0:	add	sp, sp, #12
   208c4:	pop	{pc}		; (ldr pc, [sp], #4)
   208c8:	add	r2, r0, #1
   208cc:	mov	r1, r6
   208d0:	mov	r0, r5
   208d4:	bl	11374 <memcpy@plt>
   208d8:	ldrd	r4, [sp]
   208dc:	mov	r0, #0
   208e0:	ldr	r6, [sp, #8]
   208e4:	add	sp, sp, #12
   208e8:	pop	{pc}		; (ldr pc, [sp], #4)
   208ec:	sub	r4, r4, #1
   208f0:	mov	r1, r6
   208f4:	mov	r2, r4
   208f8:	mov	r0, r5
   208fc:	bl	11374 <memcpy@plt>
   20900:	mov	r3, #0
   20904:	mov	r0, #34	; 0x22
   20908:	strb	r3, [r5, r4]
   2090c:	ldrd	r4, [sp]
   20910:	ldr	r6, [sp, #8]
   20914:	add	sp, sp, #12
   20918:	pop	{pc}		; (ldr pc, [sp], #4)
   2091c:	cmp	r4, #0
   20920:	mov	r0, #22
   20924:	strbne	r6, [r5]
   20928:	ldrd	r4, [sp]
   2092c:	ldr	r6, [sp, #8]
   20930:	add	sp, sp, #12
   20934:	pop	{pc}		; (ldr pc, [sp], #4)
   20938:	mov	r1, #0
   2093c:	b	11614 <setlocale@plt>
   20940:	cmp	r0, #2
   20944:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20948:	mov	r4, r0
   2094c:	strd	r6, [sp, #8]
   20950:	str	r8, [sp, #16]
   20954:	str	lr, [sp, #20]
   20958:	bls	20974 <__assert_fail@plt+0xf270>
   2095c:	mov	r0, r4
   20960:	ldrd	r4, [sp]
   20964:	ldrd	r6, [sp, #8]
   20968:	ldr	r8, [sp, #16]
   2096c:	add	sp, sp, #20
   20970:	pop	{pc}		; (ldr pc, [sp], #4)
   20974:	bl	2099c <__assert_fail@plt+0xf298>
   20978:	mov	r7, r0
   2097c:	bl	1156c <__errno_location@plt>
   20980:	mov	r5, r0
   20984:	mov	r0, r4
   20988:	ldr	r6, [r5]
   2098c:	mov	r4, r7
   20990:	bl	116ec <close@plt>
   20994:	str	r6, [r5]
   20998:	b	2095c <__assert_fail@plt+0xf258>
   2099c:	mov	r2, #3
   209a0:	mov	r1, #0
   209a4:	b	209a8 <__assert_fail@plt+0xf2a4>
   209a8:	push	{r1, r2, r3}
   209ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   209b0:	strd	r6, [sp, #8]
   209b4:	str	lr, [sp, #16]
   209b8:	sub	sp, sp, #8
   209bc:	ldr	r1, [sp, #28]
   209c0:	add	r2, sp, #32
   209c4:	str	r2, [sp, #4]
   209c8:	cmp	r1, #0
   209cc:	beq	20aa8 <__assert_fail@plt+0xf3a4>
   209d0:	movw	r3, #1030	; 0x406
   209d4:	mov	r6, r0
   209d8:	cmp	r1, r3
   209dc:	beq	20ab8 <__assert_fail@plt+0xf3b4>
   209e0:	cmp	r1, #11
   209e4:	beq	20a60 <__assert_fail@plt+0xf35c>
   209e8:	ble	20a40 <__assert_fail@plt+0xf33c>
   209ec:	movw	r2, #1031	; 0x407
   209f0:	cmp	r1, r2
   209f4:	bgt	20a7c <__assert_fail@plt+0xf378>
   209f8:	cmp	r1, r3
   209fc:	bge	20a0c <__assert_fail@plt+0xf308>
   20a00:	movw	r3, #1025	; 0x401
   20a04:	cmp	r1, r3
   20a08:	beq	20a60 <__assert_fail@plt+0xf35c>
   20a0c:	ldr	r3, [sp, #4]
   20a10:	mov	r0, r6
   20a14:	ldr	r2, [r3]
   20a18:	bl	115fc <fcntl64@plt>
   20a1c:	mov	r4, r0
   20a20:	mov	r0, r4
   20a24:	add	sp, sp, #8
   20a28:	ldrd	r4, [sp]
   20a2c:	ldrd	r6, [sp, #8]
   20a30:	ldr	lr, [sp, #16]
   20a34:	add	sp, sp, #20
   20a38:	add	sp, sp, #12
   20a3c:	bx	lr
   20a40:	cmp	r1, #4
   20a44:	beq	20a0c <__assert_fail@plt+0xf308>
   20a48:	bgt	20a70 <__assert_fail@plt+0xf36c>
   20a4c:	cmp	r1, #2
   20a50:	beq	20a0c <__assert_fail@plt+0xf308>
   20a54:	bgt	20a60 <__assert_fail@plt+0xf35c>
   20a58:	cmp	r1, #1
   20a5c:	bne	20a0c <__assert_fail@plt+0xf308>
   20a60:	mov	r0, r6
   20a64:	bl	115fc <fcntl64@plt>
   20a68:	mov	r4, r0
   20a6c:	b	20a20 <__assert_fail@plt+0xf31c>
   20a70:	cmp	r1, #9
   20a74:	bne	20a0c <__assert_fail@plt+0xf308>
   20a78:	b	20a60 <__assert_fail@plt+0xf35c>
   20a7c:	movw	r3, #1033	; 0x409
   20a80:	cmp	r1, r3
   20a84:	beq	20a0c <__assert_fail@plt+0xf308>
   20a88:	blt	20a60 <__assert_fail@plt+0xf35c>
   20a8c:	movw	r3, #1034	; 0x40a
   20a90:	cmp	r1, r3
   20a94:	bne	20a0c <__assert_fail@plt+0xf308>
   20a98:	mov	r0, r6
   20a9c:	bl	115fc <fcntl64@plt>
   20aa0:	mov	r4, r0
   20aa4:	b	20a20 <__assert_fail@plt+0xf31c>
   20aa8:	ldr	r2, [sp, #32]
   20aac:	bl	115fc <fcntl64@plt>
   20ab0:	mov	r4, r0
   20ab4:	b	20a20 <__assert_fail@plt+0xf31c>
   20ab8:	movw	r5, #13556	; 0x34f4
   20abc:	movt	r5, #3
   20ac0:	ldr	r7, [r2]
   20ac4:	add	r2, sp, #36	; 0x24
   20ac8:	ldr	r3, [r5]
   20acc:	str	r2, [sp, #4]
   20ad0:	mov	r2, r7
   20ad4:	cmp	r3, #0
   20ad8:	blt	20af4 <__assert_fail@plt+0xf3f0>
   20adc:	bl	115fc <fcntl64@plt>
   20ae0:	subs	r4, r0, #0
   20ae4:	blt	20b5c <__assert_fail@plt+0xf458>
   20ae8:	mov	r3, #1
   20aec:	str	r3, [r5]
   20af0:	b	20a20 <__assert_fail@plt+0xf31c>
   20af4:	mov	r1, #0
   20af8:	bl	115fc <fcntl64@plt>
   20afc:	subs	r4, r0, #0
   20b00:	blt	20a20 <__assert_fail@plt+0xf31c>
   20b04:	ldr	r3, [r5]
   20b08:	cmn	r3, #1
   20b0c:	bne	20a20 <__assert_fail@plt+0xf31c>
   20b10:	mov	r1, #1
   20b14:	mov	r0, r4
   20b18:	bl	115fc <fcntl64@plt>
   20b1c:	subs	r2, r0, #0
   20b20:	blt	20b3c <__assert_fail@plt+0xf438>
   20b24:	orr	r2, r2, #1
   20b28:	mov	r1, #2
   20b2c:	mov	r0, r4
   20b30:	bl	115fc <fcntl64@plt>
   20b34:	cmn	r0, #1
   20b38:	bne	20a20 <__assert_fail@plt+0xf31c>
   20b3c:	bl	1156c <__errno_location@plt>
   20b40:	mov	r5, r0
   20b44:	mov	r0, r4
   20b48:	ldr	r6, [r5]
   20b4c:	mvn	r4, #0
   20b50:	bl	116ec <close@plt>
   20b54:	str	r6, [r5]
   20b58:	b	20a20 <__assert_fail@plt+0xf31c>
   20b5c:	bl	1156c <__errno_location@plt>
   20b60:	ldr	r3, [r0]
   20b64:	cmp	r3, #22
   20b68:	bne	20ae8 <__assert_fail@plt+0xf3e4>
   20b6c:	mov	r2, r7
   20b70:	mov	r0, r6
   20b74:	mov	r1, #0
   20b78:	bl	115fc <fcntl64@plt>
   20b7c:	subs	r4, r0, #0
   20b80:	mvnge	r3, #0
   20b84:	strge	r3, [r5]
   20b88:	bge	20b10 <__assert_fail@plt+0xf40c>
   20b8c:	b	20a20 <__assert_fail@plt+0xf31c>
   20b90:	eor	r1, r1, #-2147483648	; 0x80000000
   20b94:	b	20b9c <__assert_fail@plt+0xf498>
   20b98:	eor	r3, r3, #-2147483648	; 0x80000000
   20b9c:	push	{r4, r5, lr}
   20ba0:	lsl	r4, r1, #1
   20ba4:	lsl	r5, r3, #1
   20ba8:	teq	r4, r5
   20bac:	teqeq	r0, r2
   20bb0:	orrsne	ip, r4, r0
   20bb4:	orrsne	ip, r5, r2
   20bb8:	mvnsne	ip, r4, asr #21
   20bbc:	mvnsne	ip, r5, asr #21
   20bc0:	beq	20dac <__assert_fail@plt+0xf6a8>
   20bc4:	lsr	r4, r4, #21
   20bc8:	rsbs	r5, r4, r5, lsr #21
   20bcc:	rsblt	r5, r5, #0
   20bd0:	ble	20bf0 <__assert_fail@plt+0xf4ec>
   20bd4:	add	r4, r4, r5
   20bd8:	eor	r2, r0, r2
   20bdc:	eor	r3, r1, r3
   20be0:	eor	r0, r2, r0
   20be4:	eor	r1, r3, r1
   20be8:	eor	r2, r0, r2
   20bec:	eor	r3, r1, r3
   20bf0:	cmp	r5, #54	; 0x36
   20bf4:	pophi	{r4, r5, pc}
   20bf8:	tst	r1, #-2147483648	; 0x80000000
   20bfc:	lsl	r1, r1, #12
   20c00:	mov	ip, #1048576	; 0x100000
   20c04:	orr	r1, ip, r1, lsr #12
   20c08:	beq	20c14 <__assert_fail@plt+0xf510>
   20c0c:	rsbs	r0, r0, #0
   20c10:	rsc	r1, r1, #0
   20c14:	tst	r3, #-2147483648	; 0x80000000
   20c18:	lsl	r3, r3, #12
   20c1c:	orr	r3, ip, r3, lsr #12
   20c20:	beq	20c2c <__assert_fail@plt+0xf528>
   20c24:	rsbs	r2, r2, #0
   20c28:	rsc	r3, r3, #0
   20c2c:	teq	r4, r5
   20c30:	beq	20d94 <__assert_fail@plt+0xf690>
   20c34:	sub	r4, r4, #1
   20c38:	rsbs	lr, r5, #32
   20c3c:	blt	20c58 <__assert_fail@plt+0xf554>
   20c40:	lsl	ip, r2, lr
   20c44:	adds	r0, r0, r2, lsr r5
   20c48:	adc	r1, r1, #0
   20c4c:	adds	r0, r0, r3, lsl lr
   20c50:	adcs	r1, r1, r3, asr r5
   20c54:	b	20c74 <__assert_fail@plt+0xf570>
   20c58:	sub	r5, r5, #32
   20c5c:	add	lr, lr, #32
   20c60:	cmp	r2, #1
   20c64:	lsl	ip, r3, lr
   20c68:	orrcs	ip, ip, #2
   20c6c:	adds	r0, r0, r3, asr r5
   20c70:	adcs	r1, r1, r3, asr #31
   20c74:	and	r5, r1, #-2147483648	; 0x80000000
   20c78:	bpl	20c88 <__assert_fail@plt+0xf584>
   20c7c:	rsbs	ip, ip, #0
   20c80:	rscs	r0, r0, #0
   20c84:	rsc	r1, r1, #0
   20c88:	cmp	r1, #1048576	; 0x100000
   20c8c:	bcc	20ccc <__assert_fail@plt+0xf5c8>
   20c90:	cmp	r1, #2097152	; 0x200000
   20c94:	bcc	20cb4 <__assert_fail@plt+0xf5b0>
   20c98:	lsrs	r1, r1, #1
   20c9c:	rrxs	r0, r0
   20ca0:	rrx	ip, ip
   20ca4:	add	r4, r4, #1
   20ca8:	lsl	r2, r4, #21
   20cac:	cmn	r2, #4194304	; 0x400000
   20cb0:	bcs	20e0c <__assert_fail@plt+0xf708>
   20cb4:	cmp	ip, #-2147483648	; 0x80000000
   20cb8:	lsrseq	ip, r0, #1
   20cbc:	adcs	r0, r0, #0
   20cc0:	adc	r1, r1, r4, lsl #20
   20cc4:	orr	r1, r1, r5
   20cc8:	pop	{r4, r5, pc}
   20ccc:	lsls	ip, ip, #1
   20cd0:	adcs	r0, r0, r0
   20cd4:	adc	r1, r1, r1
   20cd8:	tst	r1, #1048576	; 0x100000
   20cdc:	sub	r4, r4, #1
   20ce0:	bne	20cb4 <__assert_fail@plt+0xf5b0>
   20ce4:	teq	r1, #0
   20ce8:	moveq	r1, r0
   20cec:	moveq	r0, #0
   20cf0:	clz	r3, r1
   20cf4:	addeq	r3, r3, #32
   20cf8:	sub	r3, r3, #11
   20cfc:	subs	r2, r3, #32
   20d00:	bge	20d24 <__assert_fail@plt+0xf620>
   20d04:	adds	r2, r2, #12
   20d08:	ble	20d20 <__assert_fail@plt+0xf61c>
   20d0c:	add	ip, r2, #20
   20d10:	rsb	r2, r2, #12
   20d14:	lsl	r0, r1, ip
   20d18:	lsr	r1, r1, r2
   20d1c:	b	20d34 <__assert_fail@plt+0xf630>
   20d20:	add	r2, r2, #20
   20d24:	rsble	ip, r2, #32
   20d28:	lsl	r1, r1, r2
   20d2c:	orrle	r1, r1, r0, lsr ip
   20d30:	lslle	r0, r0, r2
   20d34:	subs	r4, r4, r3
   20d38:	addge	r1, r1, r4, lsl #20
   20d3c:	orrge	r1, r1, r5
   20d40:	popge	{r4, r5, pc}
   20d44:	mvn	r4, r4
   20d48:	subs	r4, r4, #31
   20d4c:	bge	20d88 <__assert_fail@plt+0xf684>
   20d50:	adds	r4, r4, #12
   20d54:	bgt	20d70 <__assert_fail@plt+0xf66c>
   20d58:	add	r4, r4, #20
   20d5c:	rsb	r2, r4, #32
   20d60:	lsr	r0, r0, r4
   20d64:	orr	r0, r0, r1, lsl r2
   20d68:	orr	r1, r5, r1, lsr r4
   20d6c:	pop	{r4, r5, pc}
   20d70:	rsb	r4, r4, #12
   20d74:	rsb	r2, r4, #32
   20d78:	lsr	r0, r0, r2
   20d7c:	orr	r0, r0, r1, lsl r4
   20d80:	mov	r1, r5
   20d84:	pop	{r4, r5, pc}
   20d88:	lsr	r0, r1, r4
   20d8c:	mov	r1, r5
   20d90:	pop	{r4, r5, pc}
   20d94:	teq	r4, #0
   20d98:	eor	r3, r3, #1048576	; 0x100000
   20d9c:	eoreq	r1, r1, #1048576	; 0x100000
   20da0:	addeq	r4, r4, #1
   20da4:	subne	r5, r5, #1
   20da8:	b	20c34 <__assert_fail@plt+0xf530>
   20dac:	mvns	ip, r4, asr #21
   20db0:	mvnsne	ip, r5, asr #21
   20db4:	beq	20e1c <__assert_fail@plt+0xf718>
   20db8:	teq	r4, r5
   20dbc:	teqeq	r0, r2
   20dc0:	beq	20dd4 <__assert_fail@plt+0xf6d0>
   20dc4:	orrs	ip, r4, r0
   20dc8:	moveq	r1, r3
   20dcc:	moveq	r0, r2
   20dd0:	pop	{r4, r5, pc}
   20dd4:	teq	r1, r3
   20dd8:	movne	r1, #0
   20ddc:	movne	r0, #0
   20de0:	popne	{r4, r5, pc}
   20de4:	lsrs	ip, r4, #21
   20de8:	bne	20dfc <__assert_fail@plt+0xf6f8>
   20dec:	lsls	r0, r0, #1
   20df0:	adcs	r1, r1, r1
   20df4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   20df8:	pop	{r4, r5, pc}
   20dfc:	adds	r4, r4, #4194304	; 0x400000
   20e00:	addcc	r1, r1, #1048576	; 0x100000
   20e04:	popcc	{r4, r5, pc}
   20e08:	and	r5, r1, #-2147483648	; 0x80000000
   20e0c:	orr	r1, r5, #2130706432	; 0x7f000000
   20e10:	orr	r1, r1, #15728640	; 0xf00000
   20e14:	mov	r0, #0
   20e18:	pop	{r4, r5, pc}
   20e1c:	mvns	ip, r4, asr #21
   20e20:	movne	r1, r3
   20e24:	movne	r0, r2
   20e28:	mvnseq	ip, r5, asr #21
   20e2c:	movne	r3, r1
   20e30:	movne	r2, r0
   20e34:	orrs	r4, r0, r1, lsl #12
   20e38:	orrseq	r5, r2, r3, lsl #12
   20e3c:	teqeq	r1, r3
   20e40:	orrne	r1, r1, #524288	; 0x80000
   20e44:	pop	{r4, r5, pc}
   20e48:	teq	r0, #0
   20e4c:	moveq	r1, #0
   20e50:	bxeq	lr
   20e54:	push	{r4, r5, lr}
   20e58:	mov	r4, #1024	; 0x400
   20e5c:	add	r4, r4, #50	; 0x32
   20e60:	mov	r5, #0
   20e64:	mov	r1, #0
   20e68:	b	20ce4 <__assert_fail@plt+0xf5e0>
   20e6c:	teq	r0, #0
   20e70:	moveq	r1, #0
   20e74:	bxeq	lr
   20e78:	push	{r4, r5, lr}
   20e7c:	mov	r4, #1024	; 0x400
   20e80:	add	r4, r4, #50	; 0x32
   20e84:	ands	r5, r0, #-2147483648	; 0x80000000
   20e88:	rsbmi	r0, r0, #0
   20e8c:	mov	r1, #0
   20e90:	b	20ce4 <__assert_fail@plt+0xf5e0>
   20e94:	lsls	r2, r0, #1
   20e98:	asr	r1, r2, #3
   20e9c:	rrx	r1, r1
   20ea0:	lsl	r0, r2, #28
   20ea4:	andsne	r3, r2, #-16777216	; 0xff000000
   20ea8:	teqne	r3, #-16777216	; 0xff000000
   20eac:	eorne	r1, r1, #939524096	; 0x38000000
   20eb0:	bxne	lr
   20eb4:	bics	r2, r2, #-16777216	; 0xff000000
   20eb8:	bxeq	lr
   20ebc:	teq	r3, #-16777216	; 0xff000000
   20ec0:	orreq	r1, r1, #524288	; 0x80000
   20ec4:	bxeq	lr
   20ec8:	push	{r4, r5, lr}
   20ecc:	mov	r4, #896	; 0x380
   20ed0:	and	r5, r1, #-2147483648	; 0x80000000
   20ed4:	bic	r1, r1, #-2147483648	; 0x80000000
   20ed8:	b	20ce4 <__assert_fail@plt+0xf5e0>
   20edc:	orrs	r2, r0, r1
   20ee0:	bxeq	lr
   20ee4:	push	{r4, r5, lr}
   20ee8:	mov	r5, #0
   20eec:	b	20f0c <__assert_fail@plt+0xf808>
   20ef0:	orrs	r2, r0, r1
   20ef4:	bxeq	lr
   20ef8:	push	{r4, r5, lr}
   20efc:	ands	r5, r1, #-2147483648	; 0x80000000
   20f00:	bpl	20f0c <__assert_fail@plt+0xf808>
   20f04:	rsbs	r0, r0, #0
   20f08:	rsc	r1, r1, #0
   20f0c:	mov	r4, #1024	; 0x400
   20f10:	add	r4, r4, #50	; 0x32
   20f14:	lsrs	ip, r1, #22
   20f18:	beq	20c88 <__assert_fail@plt+0xf584>
   20f1c:	mov	r2, #3
   20f20:	lsrs	ip, ip, #3
   20f24:	addne	r2, r2, #3
   20f28:	lsrs	ip, ip, #3
   20f2c:	addne	r2, r2, #3
   20f30:	add	r2, r2, ip, lsr #3
   20f34:	rsb	r3, r2, #32
   20f38:	lsl	ip, r0, r3
   20f3c:	lsr	r0, r0, r2
   20f40:	orr	r0, r0, r1, lsl r3
   20f44:	lsr	r1, r1, r2
   20f48:	add	r4, r4, r2
   20f4c:	b	20c88 <__assert_fail@plt+0xf584>
   20f50:	cmp	r3, #0
   20f54:	cmpeq	r2, #0
   20f58:	bne	20f70 <__assert_fail@plt+0xf86c>
   20f5c:	cmp	r1, #0
   20f60:	cmpeq	r0, #0
   20f64:	mvnne	r1, #0
   20f68:	mvnne	r0, #0
   20f6c:	b	20f8c <__assert_fail@plt+0xf888>
   20f70:	sub	sp, sp, #8
   20f74:	push	{sp, lr}
   20f78:	bl	20fe0 <__assert_fail@plt+0xf8dc>
   20f7c:	ldr	lr, [sp, #4]
   20f80:	add	sp, sp, #8
   20f84:	pop	{r2, r3}
   20f88:	bx	lr
   20f8c:	push	{r1, lr}
   20f90:	mov	r0, #8
   20f94:	bl	112fc <raise@plt>
   20f98:	pop	{r1, pc}
   20f9c:	andeq	r0, r0, r0
   20fa0:	vmov	d6, r0, r1
   20fa4:	vldr	d7, [pc, #36]	; 20fd0 <__assert_fail@plt+0xf8cc>
   20fa8:	vldr	d5, [pc, #40]	; 20fd8 <__assert_fail@plt+0xf8d4>
   20fac:	vmul.f64	d7, d6, d7
   20fb0:	vcvt.u32.f64	s14, d7
   20fb4:	vcvt.f64.u32	d4, s14
   20fb8:	vmov	r1, s14
   20fbc:	vmls.f64	d6, d4, d5
   20fc0:	vcvt.u32.f64	s15, d6
   20fc4:	vmov	r0, s15
   20fc8:	bx	lr
   20fcc:	nop			; (mov r0, r0)
   20fd0:	andeq	r0, r0, r0
   20fd4:	ldclcc	0, cr0, [r0]
   20fd8:	andeq	r0, r0, r0
   20fdc:	mvnsmi	r0, r0
   20fe0:	cmp	r1, r3
   20fe4:	cmpeq	r0, r2
   20fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fec:	mov	r4, r0
   20ff0:	movcc	r0, #0
   20ff4:	mov	r5, r1
   20ff8:	ldr	lr, [sp, #36]	; 0x24
   20ffc:	movcc	r1, r0
   21000:	bcc	210fc <__assert_fail@plt+0xf9f8>
   21004:	cmp	r3, #0
   21008:	clzeq	ip, r2
   2100c:	clzne	ip, r3
   21010:	addeq	ip, ip, #32
   21014:	cmp	r5, #0
   21018:	clzeq	r1, r4
   2101c:	addeq	r1, r1, #32
   21020:	clzne	r1, r5
   21024:	sub	ip, ip, r1
   21028:	sub	sl, ip, #32
   2102c:	lsl	r9, r3, ip
   21030:	rsb	fp, ip, #32
   21034:	orr	r9, r9, r2, lsl sl
   21038:	orr	r9, r9, r2, lsr fp
   2103c:	lsl	r8, r2, ip
   21040:	cmp	r5, r9
   21044:	cmpeq	r4, r8
   21048:	movcc	r0, #0
   2104c:	movcc	r1, r0
   21050:	bcc	2106c <__assert_fail@plt+0xf968>
   21054:	mov	r0, #1
   21058:	subs	r4, r4, r8
   2105c:	lsl	r1, r0, sl
   21060:	orr	r1, r1, r0, lsr fp
   21064:	lsl	r0, r0, ip
   21068:	sbc	r5, r5, r9
   2106c:	cmp	ip, #0
   21070:	beq	210fc <__assert_fail@plt+0xf9f8>
   21074:	lsr	r6, r8, #1
   21078:	orr	r6, r6, r9, lsl #31
   2107c:	lsr	r7, r9, #1
   21080:	mov	r2, ip
   21084:	b	210a8 <__assert_fail@plt+0xf9a4>
   21088:	subs	r3, r4, r6
   2108c:	sbc	r8, r5, r7
   21090:	adds	r3, r3, r3
   21094:	adc	r8, r8, r8
   21098:	adds	r4, r3, #1
   2109c:	adc	r5, r8, #0
   210a0:	subs	r2, r2, #1
   210a4:	beq	210c4 <__assert_fail@plt+0xf9c0>
   210a8:	cmp	r5, r7
   210ac:	cmpeq	r4, r6
   210b0:	bcs	21088 <__assert_fail@plt+0xf984>
   210b4:	adds	r4, r4, r4
   210b8:	adc	r5, r5, r5
   210bc:	subs	r2, r2, #1
   210c0:	bne	210a8 <__assert_fail@plt+0xf9a4>
   210c4:	lsr	r3, r4, ip
   210c8:	orr	r3, r3, r5, lsl fp
   210cc:	lsr	r2, r5, ip
   210d0:	orr	r3, r3, r5, lsr sl
   210d4:	adds	r0, r0, r4
   210d8:	mov	r4, r3
   210dc:	lsl	r3, r2, ip
   210e0:	orr	r3, r3, r4, lsl sl
   210e4:	lsl	ip, r4, ip
   210e8:	orr	r3, r3, r4, lsr fp
   210ec:	adc	r1, r1, r5
   210f0:	subs	r0, r0, ip
   210f4:	mov	r5, r2
   210f8:	sbc	r1, r1, r3
   210fc:	cmp	lr, #0
   21100:	strdne	r4, [lr]
   21104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21108:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2110c:	mov	r7, r0
   21110:	ldr	r6, [pc, #72]	; 21160 <__assert_fail@plt+0xfa5c>
   21114:	ldr	r5, [pc, #72]	; 21164 <__assert_fail@plt+0xfa60>
   21118:	add	r6, pc, r6
   2111c:	add	r5, pc, r5
   21120:	sub	r6, r6, r5
   21124:	mov	r8, r1
   21128:	mov	r9, r2
   2112c:	bl	112c4 <calloc@plt-0x20>
   21130:	asrs	r6, r6, #2
   21134:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21138:	mov	r4, #0
   2113c:	add	r4, r4, #1
   21140:	ldr	r3, [r5], #4
   21144:	mov	r2, r9
   21148:	mov	r1, r8
   2114c:	mov	r0, r7
   21150:	blx	r3
   21154:	cmp	r6, r4
   21158:	bne	2113c <__assert_fail@plt+0xfa38>
   2115c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21160:	strdeq	r1, [r1], -r4
   21164:	andeq	r1, r1, ip, ror #27
   21168:	bx	lr
   2116c:	ldr	r3, [pc, #12]	; 21180 <__assert_fail@plt+0xfa7c>
   21170:	mov	r1, #0
   21174:	add	r3, pc, r3
   21178:	ldr	r2, [r3]
   2117c:	b	11584 <__cxa_atexit@plt>
   21180:	strdeq	r1, [r1], -ip

Disassembly of section .fini:

00021184 <.fini>:
   21184:	push	{r3, lr}
   21188:	pop	{r3, pc}
