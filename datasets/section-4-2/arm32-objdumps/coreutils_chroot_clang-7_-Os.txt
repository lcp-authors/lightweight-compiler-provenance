
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

000110c0 <.init>:
   110c0:	push	{r3, lr}
   110c4:	bl	1141c <__assert_fail@plt+0x48>
   110c8:	pop	{r3, pc}

Disassembly of section .plt:

000110cc <calloc@plt-0x14>:
   110cc:	push	{lr}		; (str lr, [sp, #-4]!)
   110d0:	ldr	lr, [pc, #4]	; 110dc <calloc@plt-0x4>
   110d4:	add	lr, pc, lr
   110d8:	ldr	pc, [lr, #8]!
   110dc:	andeq	r5, r1, r4, lsr #30

000110e0 <calloc@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #3876]!	; 0xf24

000110ec <endgrent@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #3868]!	; 0xf1c

000110f8 <fputs_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #3860]!	; 0xf14

00011104 <raise@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011110 <getpwnam@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #3844]!	; 0xf04

0001111c <strcmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #3836]!	; 0xefc

00011128 <getpwuid@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #86016	; 0x15000
   11130:	ldr	pc, [ip, #3828]!	; 0xef4

00011134 <fflush@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #86016	; 0x15000
   1113c:	ldr	pc, [ip, #3820]!	; 0xeec

00011140 <free@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #86016	; 0x15000
   11148:	ldr	pc, [ip, #3812]!	; 0xee4

0001114c <_exit@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #86016	; 0x15000
   11154:	ldr	pc, [ip, #3804]!	; 0xedc

00011158 <memcpy@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #86016	; 0x15000
   11160:	ldr	pc, [ip, #3796]!	; 0xed4

00011164 <execvp@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #86016	; 0x15000
   1116c:	ldr	pc, [ip, #3788]!	; 0xecc

00011170 <mbsinit@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #86016	; 0x15000
   11178:	ldr	pc, [ip, #3780]!	; 0xec4

0001117c <memcmp@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #86016	; 0x15000
   11184:	ldr	pc, [ip, #3772]!	; 0xebc

00011188 <dcgettext@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #86016	; 0x15000
   11190:	ldr	pc, [ip, #3764]!	; 0xeb4

00011194 <realloc@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #86016	; 0x15000
   1119c:	ldr	pc, [ip, #3756]!	; 0xeac

000111a0 <textdomain@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #86016	; 0x15000
   111a8:	ldr	pc, [ip, #3748]!	; 0xea4

000111ac <chdir@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #86016	; 0x15000
   111b4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111b8 <iswprint@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #86016	; 0x15000
   111c0:	ldr	pc, [ip, #3732]!	; 0xe94

000111c4 <setgroups@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #86016	; 0x15000
   111cc:	ldr	pc, [ip, #3724]!	; 0xe8c

000111d0 <lseek64@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #86016	; 0x15000
   111d8:	ldr	pc, [ip, #3716]!	; 0xe84

000111dc <__ctype_get_mb_cur_max@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #86016	; 0x15000
   111e4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111e8 <chroot@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #86016	; 0x15000
   111f0:	ldr	pc, [ip, #3700]!	; 0xe74

000111f4 <__fpending@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #86016	; 0x15000
   111fc:	ldr	pc, [ip, #3692]!	; 0xe6c

00011200 <ferror_unlocked@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #86016	; 0x15000
   11208:	ldr	pc, [ip, #3684]!	; 0xe64

0001120c <mbrtowc@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #86016	; 0x15000
   11214:	ldr	pc, [ip, #3676]!	; 0xe5c

00011218 <error@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #86016	; 0x15000
   11220:	ldr	pc, [ip, #3668]!	; 0xe54

00011224 <getenv@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #86016	; 0x15000
   1122c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011230 <setgid@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #86016	; 0x15000
   11238:	ldr	pc, [ip, #3652]!	; 0xe44

0001123c <malloc@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #86016	; 0x15000
   11244:	ldr	pc, [ip, #3644]!	; 0xe3c

00011248 <__libc_start_main@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #86016	; 0x15000
   11250:	ldr	pc, [ip, #3636]!	; 0xe34

00011254 <__freading@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #86016	; 0x15000
   1125c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011260 <__gmon_start__@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #86016	; 0x15000
   11268:	ldr	pc, [ip, #3620]!	; 0xe24

0001126c <getopt_long@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #86016	; 0x15000
   11274:	ldr	pc, [ip, #3612]!	; 0xe1c

00011278 <__ctype_b_loc@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #86016	; 0x15000
   11280:	ldr	pc, [ip, #3604]!	; 0xe14

00011284 <exit@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #86016	; 0x15000
   1128c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011290 <strtoul@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #86016	; 0x15000
   11298:	ldr	pc, [ip, #3588]!	; 0xe04

0001129c <strlen@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #86016	; 0x15000
   112a4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112a8 <strchr@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #86016	; 0x15000
   112b0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112b4 <__errno_location@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #86016	; 0x15000
   112bc:	ldr	pc, [ip, #3564]!	; 0xdec

000112c0 <__cxa_atexit@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #86016	; 0x15000
   112c8:	ldr	pc, [ip, #3556]!	; 0xde4

000112cc <getgrouplist@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #86016	; 0x15000
   112d4:	ldr	pc, [ip, #3548]!	; 0xddc

000112d8 <memset@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #86016	; 0x15000
   112e0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112e4 <__printf_chk@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #86016	; 0x15000
   112ec:	ldr	pc, [ip, #3532]!	; 0xdcc

000112f0 <fileno@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #86016	; 0x15000
   112f8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112fc <strtoumax@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #86016	; 0x15000
   11304:	ldr	pc, [ip, #3516]!	; 0xdbc

00011308 <__fprintf_chk@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #86016	; 0x15000
   11310:	ldr	pc, [ip, #3508]!	; 0xdb4

00011314 <fclose@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #86016	; 0x15000
   1131c:	ldr	pc, [ip, #3500]!	; 0xdac

00011320 <fseeko64@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #86016	; 0x15000
   11328:	ldr	pc, [ip, #3492]!	; 0xda4

0001132c <strtok@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #86016	; 0x15000
   11334:	ldr	pc, [ip, #3484]!	; 0xd9c

00011338 <setlocale@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #86016	; 0x15000
   11340:	ldr	pc, [ip, #3476]!	; 0xd94

00011344 <endpwent@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #86016	; 0x15000
   1134c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011350 <strrchr@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #86016	; 0x15000
   11358:	ldr	pc, [ip, #3460]!	; 0xd84

0001135c <nl_langinfo@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #86016	; 0x15000
   11364:	ldr	pc, [ip, #3452]!	; 0xd7c

00011368 <setuid@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #86016	; 0x15000
   11370:	ldr	pc, [ip, #3444]!	; 0xd74

00011374 <getgroups@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #86016	; 0x15000
   1137c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011380 <canonicalize_file_name@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #86016	; 0x15000
   11388:	ldr	pc, [ip, #3428]!	; 0xd64

0001138c <bindtextdomain@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #86016	; 0x15000
   11394:	ldr	pc, [ip, #3420]!	; 0xd5c

00011398 <fputs@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #86016	; 0x15000
   113a0:	ldr	pc, [ip, #3412]!	; 0xd54

000113a4 <strncmp@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #86016	; 0x15000
   113ac:	ldr	pc, [ip, #3404]!	; 0xd4c

000113b0 <abort@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #86016	; 0x15000
   113b8:	ldr	pc, [ip, #3396]!	; 0xd44

000113bc <getgrgid@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #86016	; 0x15000
   113c4:	ldr	pc, [ip, #3388]!	; 0xd3c

000113c8 <getgrnam@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #86016	; 0x15000
   113d0:	ldr	pc, [ip, #3380]!	; 0xd34

000113d4 <__assert_fail@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #86016	; 0x15000
   113dc:	ldr	pc, [ip, #3372]!	; 0xd2c

Disassembly of section .text:

000113e0 <.text>:
   113e0:	mov	fp, #0
   113e4:	mov	lr, #0
   113e8:	pop	{r1}		; (ldr r1, [sp], #4)
   113ec:	mov	r2, sp
   113f0:	push	{r2}		; (str r2, [sp, #-4]!)
   113f4:	push	{r0}		; (str r0, [sp, #-4]!)
   113f8:	ldr	ip, [pc, #16]	; 11410 <__assert_fail@plt+0x3c>
   113fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11400:	ldr	r0, [pc, #12]	; 11414 <__assert_fail@plt+0x40>
   11404:	ldr	r3, [pc, #12]	; 11418 <__assert_fail@plt+0x44>
   11408:	bl	11248 <__libc_start_main@plt>
   1140c:	bl	113b0 <abort@plt>
   11410:	andeq	r5, r1, r0, lsl #28
   11414:	andeq	r1, r1, r4, lsl #15
   11418:	andeq	r5, r1, r0, lsr #27
   1141c:	ldr	r3, [pc, #20]	; 11438 <__assert_fail@plt+0x64>
   11420:	ldr	r2, [pc, #20]	; 1143c <__assert_fail@plt+0x68>
   11424:	add	r3, pc, r3
   11428:	ldr	r2, [r3, r2]
   1142c:	cmp	r2, #0
   11430:	bxeq	lr
   11434:	b	11260 <__gmon_start__@plt>
   11438:	ldrdeq	r5, [r1], -r4
   1143c:	andeq	r0, r0, ip, lsl #2
   11440:	ldr	r0, [pc, #24]	; 11460 <__assert_fail@plt+0x8c>
   11444:	ldr	r3, [pc, #24]	; 11464 <__assert_fail@plt+0x90>
   11448:	cmp	r3, r0
   1144c:	bxeq	lr
   11450:	ldr	r3, [pc, #16]	; 11468 <__assert_fail@plt+0x94>
   11454:	cmp	r3, #0
   11458:	bxeq	lr
   1145c:	bx	r3
   11460:	andeq	r7, r2, r0, ror #2
   11464:	andeq	r7, r2, r0, ror #2
   11468:	andeq	r0, r0, r0
   1146c:	ldr	r0, [pc, #36]	; 11498 <__assert_fail@plt+0xc4>
   11470:	ldr	r1, [pc, #36]	; 1149c <__assert_fail@plt+0xc8>
   11474:	sub	r1, r1, r0
   11478:	asr	r1, r1, #2
   1147c:	add	r1, r1, r1, lsr #31
   11480:	asrs	r1, r1, #1
   11484:	bxeq	lr
   11488:	ldr	r3, [pc, #16]	; 114a0 <__assert_fail@plt+0xcc>
   1148c:	cmp	r3, #0
   11490:	bxeq	lr
   11494:	bx	r3
   11498:	andeq	r7, r2, r0, ror #2
   1149c:	andeq	r7, r2, r0, ror #2
   114a0:	andeq	r0, r0, r0
   114a4:	push	{r4, lr}
   114a8:	ldr	r4, [pc, #24]	; 114c8 <__assert_fail@plt+0xf4>
   114ac:	ldrb	r3, [r4]
   114b0:	cmp	r3, #0
   114b4:	popne	{r4, pc}
   114b8:	bl	11440 <__assert_fail@plt+0x6c>
   114bc:	mov	r3, #1
   114c0:	strb	r3, [r4]
   114c4:	pop	{r4, pc}
   114c8:	andeq	r7, r2, ip, ror r1
   114cc:	b	1146c <__assert_fail@plt+0x98>
   114d0:	push	{fp, lr}
   114d4:	mov	fp, sp
   114d8:	sub	sp, sp, #56	; 0x38
   114dc:	mov	r8, r0
   114e0:	cmp	r0, #0
   114e4:	bne	11744 <__assert_fail@plt+0x370>
   114e8:	movw	r1, #24147	; 0x5e53
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	movt	r1, #1
   114f8:	bl	11188 <dcgettext@plt>
   114fc:	mov	r1, r0
   11500:	movw	r0, #29064	; 0x7188
   11504:	movt	r0, #2
   11508:	ldr	r2, [r0]
   1150c:	mov	r0, #1
   11510:	mov	r3, r2
   11514:	bl	112e4 <__printf_chk@plt>
   11518:	movw	r1, #24211	; 0x5e93
   1151c:	mov	r0, #0
   11520:	mov	r2, #5
   11524:	movt	r1, #1
   11528:	bl	11188 <dcgettext@plt>
   1152c:	movw	r9, #29044	; 0x7174
   11530:	movt	r9, #2
   11534:	ldr	r1, [r9]
   11538:	bl	110f8 <fputs_unlocked@plt>
   1153c:	movw	r1, #24261	; 0x5ec5
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	movt	r1, #1
   1154c:	bl	11188 <dcgettext@plt>
   11550:	ldr	r1, [r9]
   11554:	bl	110f8 <fputs_unlocked@plt>
   11558:	movw	r1, #24335	; 0x5f0f
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	movt	r1, #1
   11568:	bl	11188 <dcgettext@plt>
   1156c:	ldr	r1, [r9]
   11570:	bl	110f8 <fputs_unlocked@plt>
   11574:	movw	r1, #24408	; 0x5f58
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	movt	r1, #1
   11584:	bl	11188 <dcgettext@plt>
   11588:	movw	r1, #26635	; 0x680b
   1158c:	mov	r5, r0
   11590:	mov	r0, #4
   11594:	movt	r1, #1
   11598:	bl	13854 <__assert_fail@plt+0x2480>
   1159c:	mov	r2, r0
   115a0:	mov	r0, #1
   115a4:	mov	r1, r5
   115a8:	bl	112e4 <__printf_chk@plt>
   115ac:	movw	r1, #24476	; 0x5f9c
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	movt	r1, #1
   115bc:	bl	11188 <dcgettext@plt>
   115c0:	ldr	r1, [r9]
   115c4:	bl	110f8 <fputs_unlocked@plt>
   115c8:	movw	r1, #24521	; 0x5fc9
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	movt	r1, #1
   115d8:	bl	11188 <dcgettext@plt>
   115dc:	ldr	r1, [r9]
   115e0:	bl	110f8 <fputs_unlocked@plt>
   115e4:	movw	r1, #24575	; 0x5fff
   115e8:	mov	r0, #0
   115ec:	mov	r2, #5
   115f0:	movt	r1, #1
   115f4:	bl	11188 <dcgettext@plt>
   115f8:	ldr	r1, [r9]
   115fc:	bl	110f8 <fputs_unlocked@plt>
   11600:	movw	r0, #25520	; 0x63b0
   11604:	mov	r6, sp
   11608:	movt	r0, #1
   1160c:	mov	r1, r6
   11610:	ldm	r0!, {r2, r3, r4, r5}
   11614:	stmia	r1!, {r2, r3, r4, r5}
   11618:	ldm	r0!, {r2, r3, r4, r5, r7}
   1161c:	stmia	r1!, {r2, r3, r4, r5, r7}
   11620:	ldm	r0, {r2, r3, r4, r5, r7}
   11624:	stm	r1, {r2, r3, r4, r5, r7}
   11628:	movw	r1, #25038	; 0x61ce
   1162c:	movw	r5, #24644	; 0x6044
   11630:	movt	r1, #1
   11634:	movt	r5, #1
   11638:	mov	r0, r5
   1163c:	bl	1111c <strcmp@plt>
   11640:	cmp	r0, #0
   11644:	ldrne	r1, [r6, #8]!
   11648:	cmpne	r1, #0
   1164c:	bne	11638 <__assert_fail@plt+0x264>
   11650:	ldr	r6, [r6, #4]
   11654:	movw	r1, #25133	; 0x622d
   11658:	mov	r0, #0
   1165c:	mov	r2, #5
   11660:	movt	r1, #1
   11664:	bl	11188 <dcgettext@plt>
   11668:	movw	r2, #24677	; 0x6065
   1166c:	movw	r3, #25156	; 0x6244
   11670:	mov	r1, r0
   11674:	mov	r0, #1
   11678:	movt	r2, #1
   1167c:	movt	r3, #1
   11680:	bl	112e4 <__printf_chk@plt>
   11684:	cmp	r6, #0
   11688:	mov	r0, #5
   1168c:	mov	r1, #0
   11690:	moveq	r6, r5
   11694:	bl	11338 <setlocale@plt>
   11698:	cmp	r0, #0
   1169c:	beq	116d4 <__assert_fail@plt+0x300>
   116a0:	movw	r1, #25196	; 0x626c
   116a4:	mov	r2, #3
   116a8:	movt	r1, #1
   116ac:	bl	113a4 <strncmp@plt>
   116b0:	cmp	r0, #0
   116b4:	beq	116d4 <__assert_fail@plt+0x300>
   116b8:	movw	r1, #25200	; 0x6270
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #1
   116c8:	bl	11188 <dcgettext@plt>
   116cc:	ldr	r1, [r9]
   116d0:	bl	110f8 <fputs_unlocked@plt>
   116d4:	movw	r1, #25271	; 0x62b7
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #1
   116e4:	bl	11188 <dcgettext@plt>
   116e8:	movw	r2, #25156	; 0x6244
   116ec:	mov	r1, r0
   116f0:	mov	r0, #1
   116f4:	mov	r3, r5
   116f8:	movt	r2, #1
   116fc:	bl	112e4 <__printf_chk@plt>
   11700:	movw	r1, #25298	; 0x62d2
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	11188 <dcgettext@plt>
   11714:	movw	r3, #24260	; 0x5ec4
   11718:	mov	r1, r0
   1171c:	movw	r0, #25066	; 0x61ea
   11720:	cmp	r6, r5
   11724:	mov	r2, r6
   11728:	movt	r0, #1
   1172c:	movt	r3, #1
   11730:	moveq	r3, r0
   11734:	mov	r0, #1
   11738:	bl	112e4 <__printf_chk@plt>
   1173c:	mov	r0, r8
   11740:	bl	11284 <exit@plt>
   11744:	movw	r0, #29040	; 0x7170
   11748:	movw	r1, #24108	; 0x5e2c
   1174c:	mov	r2, #5
   11750:	movt	r0, #2
   11754:	movt	r1, #1
   11758:	ldr	r5, [r0]
   1175c:	mov	r0, #0
   11760:	bl	11188 <dcgettext@plt>
   11764:	mov	r2, r0
   11768:	movw	r0, #29064	; 0x7188
   1176c:	mov	r1, #1
   11770:	movt	r0, #2
   11774:	ldr	r3, [r0]
   11778:	mov	r0, r5
   1177c:	bl	11308 <__fprintf_chk@plt>
   11780:	b	1173c <__assert_fail@plt+0x368>
   11784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11788:	add	fp, sp, #28
   1178c:	sub	sp, sp, #36	; 0x24
   11790:	mov	r8, #0
   11794:	mov	r6, r0
   11798:	mvn	r0, #0
   1179c:	mov	r4, r1
   117a0:	str	r0, [sp, #32]
   117a4:	str	r0, [sp, #28]
   117a8:	str	r8, [sp, #24]
   117ac:	str	r8, [sp, #20]
   117b0:	ldr	r0, [r1]
   117b4:	bl	12188 <__assert_fail@plt+0xdb4>
   117b8:	movw	r1, #24260	; 0x5ec4
   117bc:	mov	r0, #6
   117c0:	movt	r1, #1
   117c4:	bl	11338 <setlocale@plt>
   117c8:	movw	r5, #24681	; 0x6069
   117cc:	movw	r1, #24651	; 0x604b
   117d0:	movt	r5, #1
   117d4:	movt	r1, #1
   117d8:	mov	r0, r5
   117dc:	bl	1138c <bindtextdomain@plt>
   117e0:	mov	r0, r5
   117e4:	bl	111a0 <textdomain@plt>
   117e8:	movw	r0, #28956	; 0x711c
   117ec:	mov	r1, #125	; 0x7d
   117f0:	movt	r0, #2
   117f4:	str	r1, [r0]
   117f8:	movw	r0, #8312	; 0x2078
   117fc:	movt	r0, #1
   11800:	bl	15e04 <__assert_fail@plt+0x4a30>
   11804:	movw	r5, #24675	; 0x6063
   11808:	movw	r7, #25424	; 0x6350
   1180c:	mov	r0, #0
   11810:	mov	r9, #0
   11814:	mov	sl, #0
   11818:	movt	r5, #1
   1181c:	movt	r7, #1
   11820:	str	r0, [sp, #12]
   11824:	b	11890 <__assert_fail@plt+0x4bc>
   11828:	cmp	r0, #256	; 0x100
   1182c:	beq	11848 <__assert_fail@plt+0x474>
   11830:	movw	r1, #258	; 0x102
   11834:	cmp	r0, r1
   11838:	bne	11858 <__assert_fail@plt+0x484>
   1183c:	mov	r0, #1
   11840:	str	r0, [sp, #12]
   11844:	b	11890 <__assert_fail@plt+0x4bc>
   11848:	movw	r0, #29048	; 0x7178
   1184c:	movt	r0, #2
   11850:	ldr	r9, [r0]
   11854:	b	11890 <__assert_fail@plt+0x4bc>
   11858:	movw	r1, #257	; 0x101
   1185c:	cmp	r0, r1
   11860:	bne	11d58 <__assert_fail@plt+0x984>
   11864:	movw	r0, #29048	; 0x7178
   11868:	movt	r0, #2
   1186c:	ldr	sl, [r0]
   11870:	mov	r0, sl
   11874:	bl	1129c <strlen@plt>
   11878:	cmp	r0, #0
   1187c:	beq	11890 <__assert_fail@plt+0x4bc>
   11880:	sub	r0, r0, #1
   11884:	ldrb	r1, [sl, r0]
   11888:	cmp	r1, #58	; 0x3a
   1188c:	strbeq	r8, [sl, r0]
   11890:	mov	r0, r6
   11894:	mov	r1, r4
   11898:	mov	r2, r5
   1189c:	mov	r3, r7
   118a0:	str	r8, [sp]
   118a4:	bl	1126c <getopt_long@plt>
   118a8:	cmp	r0, #255	; 0xff
   118ac:	bgt	11828 <__assert_fail@plt+0x454>
   118b0:	cmn	r0, #1
   118b4:	bne	11c94 <__assert_fail@plt+0x8c0>
   118b8:	movw	r0, #29032	; 0x7168
   118bc:	movt	r0, #2
   118c0:	ldr	r0, [r0]
   118c4:	cmp	r0, r6
   118c8:	bge	11cf4 <__assert_fail@plt+0x920>
   118cc:	ldr	r8, [r4, r0, lsl #2]
   118d0:	mov	r0, r8
   118d4:	bl	11380 <canonicalize_file_name@plt>
   118d8:	mov	r7, r0
   118dc:	cmp	r0, #0
   118e0:	beq	11900 <__assert_fail@plt+0x52c>
   118e4:	movw	r0, #26635	; 0x680b
   118e8:	mov	r1, r7
   118ec:	movt	r0, #1
   118f0:	bl	1111c <strcmp@plt>
   118f4:	clz	r0, r0
   118f8:	lsr	r5, r0, #5
   118fc:	b	11904 <__assert_fail@plt+0x530>
   11900:	mov	r5, #0
   11904:	mov	r0, r7
   11908:	bl	12160 <__assert_fail@plt+0xd8c>
   1190c:	cmp	r5, #0
   11910:	bne	11924 <__assert_fail@plt+0x550>
   11914:	ldr	r0, [sp, #12]
   11918:	eor	r0, r0, #1
   1191c:	tst	r0, #1
   11920:	beq	11d1c <__assert_fail@plt+0x948>
   11924:	mov	r7, #0
   11928:	cmp	r5, #0
   1192c:	bne	119ec <__assert_fail@plt+0x618>
   11930:	cmp	sl, #0
   11934:	beq	11954 <__assert_fail@plt+0x580>
   11938:	mov	r0, #0
   1193c:	add	r1, sp, #32
   11940:	add	r2, sp, #28
   11944:	mov	r3, #0
   11948:	str	r0, [sp]
   1194c:	mov	r0, sl
   11950:	bl	13cc4 <__assert_fail@plt+0x28f0>
   11954:	ldr	r0, [sp, #32]
   11958:	cmn	r0, #1
   1195c:	beq	11998 <__assert_fail@plt+0x5c4>
   11960:	cmp	r9, #0
   11964:	ldrne	r1, [sp, #28]
   11968:	movne	r7, #0
   1196c:	cmnne	r1, #1
   11970:	bne	119a4 <__assert_fail@plt+0x5d0>
   11974:	bl	11128 <getpwuid@plt>
   11978:	cmp	r0, #0
   1197c:	beq	11998 <__assert_fail@plt+0x5c4>
   11980:	ldr	r1, [sp, #28]
   11984:	cmn	r1, #1
   11988:	ldreq	r1, [r0, #12]
   1198c:	streq	r1, [sp, #28]
   11990:	ldr	r7, [r0]
   11994:	b	1199c <__assert_fail@plt+0x5c8>
   11998:	mov	r7, #0
   1199c:	cmp	r9, #0
   119a0:	beq	119c8 <__assert_fail@plt+0x5f4>
   119a4:	ldrb	r0, [r9]
   119a8:	cmp	r0, #0
   119ac:	beq	119ec <__assert_fail@plt+0x618>
   119b0:	add	r1, sp, #24
   119b4:	add	r2, sp, #20
   119b8:	mov	r0, r9
   119bc:	mov	r3, #0
   119c0:	bl	11e38 <__assert_fail@plt+0xa64>
   119c4:	b	119ec <__assert_fail@plt+0x618>
   119c8:	cmp	r7, #0
   119cc:	ldrne	r1, [sp, #28]
   119d0:	cmnne	r1, #1
   119d4:	beq	119ec <__assert_fail@plt+0x618>
   119d8:	add	r2, sp, #24
   119dc:	mov	r0, r7
   119e0:	bl	149b0 <__assert_fail@plt+0x35dc>
   119e4:	cmp	r0, #1
   119e8:	strge	r0, [sp, #20]
   119ec:	mov	r0, r8
   119f0:	bl	111e8 <chroot@plt>
   119f4:	cmp	r0, #0
   119f8:	bne	11d60 <__assert_fail@plt+0x98c>
   119fc:	ldr	r0, [sp, #12]
   11a00:	tst	r0, #1
   11a04:	bne	11a1c <__assert_fail@plt+0x648>
   11a08:	movw	r0, #26635	; 0x680b
   11a0c:	movt	r0, #1
   11a10:	bl	111ac <chdir@plt>
   11a14:	cmp	r0, #0
   11a18:	bne	11ddc <__assert_fail@plt+0xa08>
   11a1c:	movw	r0, #29032	; 0x7168
   11a20:	movt	r0, #2
   11a24:	ldr	r0, [r0]
   11a28:	add	r0, r0, #1
   11a2c:	cmp	r0, r6
   11a30:	bne	11a68 <__assert_fail@plt+0x694>
   11a34:	movw	r0, #24844	; 0x610c
   11a38:	movt	r0, #1
   11a3c:	bl	11224 <getenv@plt>
   11a40:	movw	r3, #24850	; 0x6112
   11a44:	movw	r1, #24858	; 0x611a
   11a48:	cmp	r0, #0
   11a4c:	mov	r2, #0
   11a50:	movt	r3, #1
   11a54:	movt	r1, #1
   11a58:	movne	r3, r0
   11a5c:	str	r3, [r4]
   11a60:	stmib	r4, {r1, r2}
   11a64:	b	11a6c <__assert_fail@plt+0x698>
   11a68:	add	r4, r4, r0, lsl #2
   11a6c:	cmp	sl, #0
   11a70:	beq	11ad0 <__assert_fail@plt+0x6fc>
   11a74:	mov	r0, #0
   11a78:	add	r1, sp, #32
   11a7c:	add	r2, sp, #28
   11a80:	mov	r3, #0
   11a84:	str	r0, [sp]
   11a88:	mov	r0, sl
   11a8c:	bl	13cc4 <__assert_fail@plt+0x28f0>
   11a90:	cmp	r0, #0
   11a94:	beq	11ad0 <__assert_fail@plt+0x6fc>
   11a98:	mov	r5, r0
   11a9c:	ldr	r0, [sp, #32]
   11aa0:	cmn	r0, #1
   11aa4:	bne	11adc <__assert_fail@plt+0x708>
   11aa8:	ldr	r0, [sp, #28]
   11aac:	cmn	r0, #1
   11ab0:	bne	11b28 <__assert_fail@plt+0x754>
   11ab4:	bl	112b4 <__errno_location@plt>
   11ab8:	ldr	r1, [r0]
   11abc:	movw	r2, #25607	; 0x6407
   11ac0:	mov	r0, #125	; 0x7d
   11ac4:	mov	r3, r5
   11ac8:	movt	r2, #1
   11acc:	bl	11218 <error@plt>
   11ad0:	ldr	r0, [sp, #32]
   11ad4:	cmn	r0, #1
   11ad8:	beq	11b28 <__assert_fail@plt+0x754>
   11adc:	cmp	r9, #0
   11ae0:	ldrne	r1, [sp, #28]
   11ae4:	cmnne	r1, #1
   11ae8:	bne	11b10 <__assert_fail@plt+0x73c>
   11aec:	bl	11128 <getpwuid@plt>
   11af0:	ldr	r1, [sp, #28]
   11af4:	cmp	r0, #0
   11af8:	beq	11b20 <__assert_fail@plt+0x74c>
   11afc:	cmn	r1, #1
   11b00:	ldreq	r1, [r0, #12]
   11b04:	streq	r1, [sp, #28]
   11b08:	ldr	r7, [r0]
   11b0c:	b	11b28 <__assert_fail@plt+0x754>
   11b10:	ldr	r5, [sp, #24]
   11b14:	mov	r0, #0
   11b18:	str	r0, [sp, #16]
   11b1c:	b	11b3c <__assert_fail@plt+0x768>
   11b20:	cmn	r1, #1
   11b24:	beq	11e08 <__assert_fail@plt+0xa34>
   11b28:	ldr	r5, [sp, #24]
   11b2c:	mov	r0, #0
   11b30:	cmp	r9, #0
   11b34:	str	r0, [sp, #16]
   11b38:	beq	11b80 <__assert_fail@plt+0x7ac>
   11b3c:	ldrb	r0, [r9]
   11b40:	cmp	r0, #0
   11b44:	beq	11ba4 <__assert_fail@plt+0x7d0>
   11b48:	ldr	r0, [sp, #20]
   11b4c:	add	r1, sp, #16
   11b50:	add	r2, sp, #20
   11b54:	clz	r0, r0
   11b58:	lsr	r3, r0, #5
   11b5c:	mov	r0, r9
   11b60:	bl	11e38 <__assert_fail@plt+0xa64>
   11b64:	cmp	r0, #0
   11b68:	beq	11ba0 <__assert_fail@plt+0x7cc>
   11b6c:	ldr	r0, [sp, #20]
   11b70:	cmp	r0, #0
   11b74:	bne	11ba4 <__assert_fail@plt+0x7d0>
   11b78:	mov	r0, #125	; 0x7d
   11b7c:	b	11c4c <__assert_fail@plt+0x878>
   11b80:	cmp	r7, #0
   11b84:	ldrne	r1, [sp, #28]
   11b88:	cmnne	r1, #1
   11b8c:	bne	11c54 <__assert_fail@plt+0x880>
   11b90:	ldr	r0, [sp, #32]
   11b94:	cmn	r0, #1
   11b98:	bne	11ba4 <__assert_fail@plt+0x7d0>
   11b9c:	b	11bb8 <__assert_fail@plt+0x7e4>
   11ba0:	ldr	r5, [sp, #16]
   11ba4:	ldr	r0, [sp, #20]
   11ba8:	mov	r1, r5
   11bac:	bl	111c4 <setgroups@plt>
   11bb0:	cmp	r0, #0
   11bb4:	bne	11da0 <__assert_fail@plt+0x9cc>
   11bb8:	ldr	r0, [sp, #16]
   11bbc:	bl	12160 <__assert_fail@plt+0xd8c>
   11bc0:	ldr	r0, [sp, #24]
   11bc4:	bl	12160 <__assert_fail@plt+0xd8c>
   11bc8:	ldr	r0, [sp, #28]
   11bcc:	cmn	r0, #1
   11bd0:	beq	11be0 <__assert_fail@plt+0x80c>
   11bd4:	bl	11230 <setgid@plt>
   11bd8:	cmp	r0, #0
   11bdc:	bne	11db4 <__assert_fail@plt+0x9e0>
   11be0:	ldr	r0, [sp, #32]
   11be4:	cmn	r0, #1
   11be8:	beq	11bf8 <__assert_fail@plt+0x824>
   11bec:	bl	11368 <setuid@plt>
   11bf0:	cmp	r0, #0
   11bf4:	bne	11dc8 <__assert_fail@plt+0x9f4>
   11bf8:	ldr	r0, [r4]
   11bfc:	mov	r1, r4
   11c00:	bl	11164 <execvp@plt>
   11c04:	bl	112b4 <__errno_location@plt>
   11c08:	ldr	r5, [r0]
   11c0c:	movw	r1, #25013	; 0x61b5
   11c10:	mov	r0, #0
   11c14:	mov	r2, #5
   11c18:	movt	r1, #1
   11c1c:	bl	11188 <dcgettext@plt>
   11c20:	mov	r6, r0
   11c24:	ldr	r0, [r4]
   11c28:	bl	13b8c <__assert_fail@plt+0x27b8>
   11c2c:	mov	r3, r0
   11c30:	mov	r0, #0
   11c34:	mov	r1, r5
   11c38:	mov	r2, r6
   11c3c:	bl	11218 <error@plt>
   11c40:	mov	r0, #126	; 0x7e
   11c44:	cmp	r5, #2
   11c48:	movweq	r0, #127	; 0x7f
   11c4c:	sub	sp, fp, #28
   11c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c54:	add	r2, sp, #16
   11c58:	mov	r0, r7
   11c5c:	bl	149b0 <__assert_fail@plt+0x35dc>
   11c60:	cmp	r0, #0
   11c64:	ble	11c74 <__assert_fail@plt+0x8a0>
   11c68:	ldr	r5, [sp, #16]
   11c6c:	str	r0, [sp, #20]
   11c70:	b	11b90 <__assert_fail@plt+0x7bc>
   11c74:	ldr	r0, [sp, #20]
   11c78:	cmp	r0, #0
   11c7c:	bne	11b90 <__assert_fail@plt+0x7bc>
   11c80:	bl	112b4 <__errno_location@plt>
   11c84:	ldr	r4, [r0]
   11c88:	movw	r1, #24900	; 0x6144
   11c8c:	movt	r1, #1
   11c90:	b	11dec <__assert_fail@plt+0xa18>
   11c94:	cmn	r0, #3
   11c98:	bne	11ce4 <__assert_fail@plt+0x910>
   11c9c:	movw	r0, #28952	; 0x7118
   11ca0:	movw	r2, #24691	; 0x6073
   11ca4:	mov	r1, #0
   11ca8:	movt	r0, #2
   11cac:	movt	r2, #1
   11cb0:	str	r1, [sp, #4]
   11cb4:	movw	r1, #24644	; 0x6044
   11cb8:	ldr	r3, [r0]
   11cbc:	movw	r0, #29044	; 0x7174
   11cc0:	str	r2, [sp]
   11cc4:	movw	r2, #24677	; 0x6065
   11cc8:	movt	r1, #1
   11ccc:	movt	r0, #2
   11cd0:	movt	r2, #1
   11cd4:	ldr	r0, [r0]
   11cd8:	bl	14414 <__assert_fail@plt+0x3040>
   11cdc:	mov	r0, #0
   11ce0:	bl	11284 <exit@plt>
   11ce4:	cmn	r0, #2
   11ce8:	bne	11d58 <__assert_fail@plt+0x984>
   11cec:	mov	r0, #0
   11cf0:	bl	114d0 <__assert_fail@plt+0xfc>
   11cf4:	movw	r1, #24706	; 0x6082
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	movt	r1, #1
   11d04:	bl	11188 <dcgettext@plt>
   11d08:	mov	r2, r0
   11d0c:	mov	r0, #0
   11d10:	mov	r1, #0
   11d14:	bl	11218 <error@plt>
   11d18:	b	11d58 <__assert_fail@plt+0x984>
   11d1c:	movw	r1, #24722	; 0x6092
   11d20:	mov	r0, #0
   11d24:	mov	r2, #5
   11d28:	movt	r1, #1
   11d2c:	bl	11188 <dcgettext@plt>
   11d30:	movw	r1, #26635	; 0x680b
   11d34:	mov	r4, r0
   11d38:	mov	r0, #4
   11d3c:	movt	r1, #1
   11d40:	bl	13854 <__assert_fail@plt+0x2480>
   11d44:	mov	r3, r0
   11d48:	mov	r0, #0
   11d4c:	mov	r1, #0
   11d50:	mov	r2, r4
   11d54:	bl	11218 <error@plt>
   11d58:	mov	r0, #125	; 0x7d
   11d5c:	bl	114d0 <__assert_fail@plt+0xfc>
   11d60:	bl	112b4 <__errno_location@plt>
   11d64:	ldr	r4, [r0]
   11d68:	movw	r1, #24778	; 0x60ca
   11d6c:	mov	r0, #0
   11d70:	mov	r2, #5
   11d74:	movt	r1, #1
   11d78:	bl	11188 <dcgettext@plt>
   11d7c:	mov	r6, r0
   11d80:	mov	r0, #4
   11d84:	mov	r1, r8
   11d88:	bl	13854 <__assert_fail@plt+0x2480>
   11d8c:	mov	r3, r0
   11d90:	mov	r0, #125	; 0x7d
   11d94:	mov	r1, r4
   11d98:	mov	r2, r6
   11d9c:	bl	11218 <error@plt>
   11da0:	bl	112b4 <__errno_location@plt>
   11da4:	ldr	r4, [r0]
   11da8:	movw	r1, #24934	; 0x6166
   11dac:	movt	r1, #1
   11db0:	b	11dec <__assert_fail@plt+0xa18>
   11db4:	bl	112b4 <__errno_location@plt>
   11db8:	ldr	r4, [r0]
   11dbc:	movw	r1, #24968	; 0x6188
   11dc0:	movt	r1, #1
   11dc4:	b	11dec <__assert_fail@plt+0xa18>
   11dc8:	bl	112b4 <__errno_location@plt>
   11dcc:	ldr	r4, [r0]
   11dd0:	movw	r1, #24991	; 0x619f
   11dd4:	movt	r1, #1
   11dd8:	b	11dec <__assert_fail@plt+0xa18>
   11ddc:	bl	112b4 <__errno_location@plt>
   11de0:	ldr	r4, [r0]
   11de4:	movw	r1, #24813	; 0x60ed
   11de8:	movt	r1, #1
   11dec:	mov	r0, #0
   11df0:	mov	r2, #5
   11df4:	bl	11188 <dcgettext@plt>
   11df8:	mov	r2, r0
   11dfc:	mov	r0, #125	; 0x7d
   11e00:	mov	r1, r4
   11e04:	bl	11218 <error@plt>
   11e08:	bl	112b4 <__errno_location@plt>
   11e0c:	ldr	r4, [r0]
   11e10:	movw	r1, #24861	; 0x611d
   11e14:	mov	r0, #0
   11e18:	mov	r2, #5
   11e1c:	movt	r1, #1
   11e20:	bl	11188 <dcgettext@plt>
   11e24:	ldr	r3, [sp, #32]
   11e28:	mov	r2, r0
   11e2c:	mov	r0, #125	; 0x7d
   11e30:	mov	r1, r4
   11e34:	bl	11218 <error@plt>
   11e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e3c:	add	fp, sp, #28
   11e40:	sub	sp, sp, #36	; 0x24
   11e44:	mov	r8, #0
   11e48:	str	r3, [sp, #20]
   11e4c:	str	r2, [sp, #4]
   11e50:	str	r1, [sp, #12]
   11e54:	str	r0, [sp, #8]
   11e58:	str	r8, [sp, #32]
   11e5c:	bl	1492c <__assert_fail@plt+0x3558>
   11e60:	movw	r1, #25382	; 0x6326
   11e64:	str	r0, [sp, #16]
   11e68:	movt	r1, #1
   11e6c:	bl	1132c <strtok@plt>
   11e70:	cmp	r0, #0
   11e74:	beq	11fc8 <__assert_fail@plt+0xbf4>
   11e78:	movw	r7, #24260	; 0x5ec4
   11e7c:	mov	r4, r0
   11e80:	mov	r6, #0
   11e84:	add	r5, sp, #24
   11e88:	mov	sl, #0
   11e8c:	mov	r9, #0
   11e90:	mov	r8, #0
   11e94:	movt	r7, #1
   11e98:	mov	r0, r4
   11e9c:	mov	r1, #0
   11ea0:	mov	r2, #10
   11ea4:	mov	r3, r5
   11ea8:	str	r7, [sp]
   11eac:	bl	14e4c <__assert_fail@plt+0x3a78>
   11eb0:	cmp	r0, #0
   11eb4:	ldreq	r0, [sp, #28]
   11eb8:	cmpeq	r0, #0
   11ebc:	beq	11ee0 <__assert_fail@plt+0xb0c>
   11ec0:	mov	r0, r4
   11ec4:	bl	113c8 <getgrnam@plt>
   11ec8:	cmp	r0, #0
   11ecc:	beq	11f48 <__assert_fail@plt+0xb74>
   11ed0:	ldr	r0, [r0, #8]
   11ed4:	str	r6, [sp, #28]
   11ed8:	str	r0, [sp, #24]
   11edc:	b	11f18 <__assert_fail@plt+0xb44>
   11ee0:	sub	r4, r4, #1
   11ee4:	bl	11278 <__ctype_b_loc@plt>
   11ee8:	ldr	r0, [r0]
   11eec:	ldrb	r1, [r4, #1]!
   11ef0:	add	r2, r0, r1, lsl #1
   11ef4:	ldrb	r2, [r2, #1]
   11ef8:	tst	r2, #32
   11efc:	bne	11eec <__assert_fail@plt+0xb18>
   11f00:	cmp	r1, #43	; 0x2b
   11f04:	beq	11f18 <__assert_fail@plt+0xb44>
   11f08:	mov	r0, r4
   11f0c:	bl	113c8 <getgrnam@plt>
   11f10:	cmp	r0, #0
   11f14:	bne	11ed0 <__assert_fail@plt+0xafc>
   11f18:	ldr	r0, [sp, #32]
   11f1c:	cmp	r8, r0
   11f20:	bne	11f38 <__assert_fail@plt+0xb64>
   11f24:	mov	r0, r9
   11f28:	add	r1, sp, #32
   11f2c:	mov	r2, #4
   11f30:	bl	14628 <__assert_fail@plt+0x3254>
   11f34:	mov	r9, r0
   11f38:	ldr	r0, [sp, #24]
   11f3c:	str	r0, [r9, r8, lsl #2]
   11f40:	add	r8, r8, #1
   11f44:	b	11fa8 <__assert_fail@plt+0xbd4>
   11f48:	ldr	r0, [sp, #20]
   11f4c:	cmp	r0, #0
   11f50:	beq	1201c <__assert_fail@plt+0xc48>
   11f54:	bl	112b4 <__errno_location@plt>
   11f58:	mov	sl, r5
   11f5c:	mov	r5, r7
   11f60:	ldr	r7, [r0]
   11f64:	movw	r1, #25384	; 0x6328
   11f68:	mov	r0, #0
   11f6c:	mov	r2, #5
   11f70:	movt	r1, #1
   11f74:	bl	11188 <dcgettext@plt>
   11f78:	mov	r6, r0
   11f7c:	mov	r0, r4
   11f80:	bl	13b8c <__assert_fail@plt+0x27b8>
   11f84:	mov	r3, r0
   11f88:	mov	r1, r7
   11f8c:	mov	r2, r6
   11f90:	mov	r0, #0
   11f94:	mov	r7, r5
   11f98:	mov	r5, sl
   11f9c:	mov	r6, #0
   11fa0:	bl	11218 <error@plt>
   11fa4:	mvn	sl, #0
   11fa8:	movw	r1, #25382	; 0x6326
   11fac:	mov	r0, #0
   11fb0:	movt	r1, #1
   11fb4:	bl	1132c <strtok@plt>
   11fb8:	mov	r4, r0
   11fbc:	cmp	r0, #0
   11fc0:	bne	11e98 <__assert_fail@plt+0xac4>
   11fc4:	b	11fd0 <__assert_fail@plt+0xbfc>
   11fc8:	mov	r9, #0
   11fcc:	mov	sl, #0
   11fd0:	orrs	r0, sl, r8
   11fd4:	mvneq	sl, #0
   11fd8:	bne	1202c <__assert_fail@plt+0xc58>
   11fdc:	ldr	r0, [sp, #20]
   11fe0:	cmp	r0, #0
   11fe4:	beq	1202c <__assert_fail@plt+0xc58>
   11fe8:	movw	r1, #25401	; 0x6339
   11fec:	mov	r0, #0
   11ff0:	mov	r2, #5
   11ff4:	movt	r1, #1
   11ff8:	bl	11188 <dcgettext@plt>
   11ffc:	mov	r4, r0
   12000:	ldr	r0, [sp, #8]
   12004:	bl	13b8c <__assert_fail@plt+0x27b8>
   12008:	mov	r3, r0
   1200c:	mov	r0, #0
   12010:	mov	r1, #0
   12014:	mov	r2, r4
   12018:	bl	11218 <error@plt>
   1201c:	ldr	r0, [sp, #12]
   12020:	mvn	sl, #0
   12024:	str	r9, [r0]
   12028:	b	12044 <__assert_fail@plt+0xc70>
   1202c:	ldr	r0, [sp, #12]
   12030:	cmp	sl, #0
   12034:	moveq	sl, #0
   12038:	str	r9, [r0]
   1203c:	ldreq	r0, [sp, #4]
   12040:	streq	r8, [r0]
   12044:	ldr	r0, [sp, #16]
   12048:	bl	12160 <__assert_fail@plt+0xd8c>
   1204c:	mov	r0, sl
   12050:	sub	sp, fp, #28
   12054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12058:	movw	r1, #29056	; 0x7180
   1205c:	movt	r1, #2
   12060:	str	r0, [r1]
   12064:	bx	lr
   12068:	movw	r1, #29060	; 0x7184
   1206c:	movt	r1, #2
   12070:	strb	r0, [r1]
   12074:	bx	lr
   12078:	push	{r4, r5, r6, sl, fp, lr}
   1207c:	add	fp, sp, #16
   12080:	sub	sp, sp, #8
   12084:	movw	r0, #29044	; 0x7174
   12088:	movt	r0, #2
   1208c:	ldr	r0, [r0]
   12090:	bl	155d8 <__assert_fail@plt+0x4204>
   12094:	cmp	r0, #0
   12098:	beq	120c0 <__assert_fail@plt+0xcec>
   1209c:	movw	r0, #29060	; 0x7184
   120a0:	movt	r0, #2
   120a4:	ldrb	r0, [r0]
   120a8:	cmp	r0, #0
   120ac:	beq	120e0 <__assert_fail@plt+0xd0c>
   120b0:	bl	112b4 <__errno_location@plt>
   120b4:	ldr	r0, [r0]
   120b8:	cmp	r0, #32
   120bc:	bne	120e0 <__assert_fail@plt+0xd0c>
   120c0:	movw	r0, #29040	; 0x7170
   120c4:	movt	r0, #2
   120c8:	ldr	r0, [r0]
   120cc:	bl	155d8 <__assert_fail@plt+0x4204>
   120d0:	cmp	r0, #0
   120d4:	subeq	sp, fp, #16
   120d8:	popeq	{r4, r5, r6, sl, fp, pc}
   120dc:	b	12150 <__assert_fail@plt+0xd7c>
   120e0:	movw	r1, #25591	; 0x63f7
   120e4:	mov	r0, #0
   120e8:	mov	r2, #5
   120ec:	movt	r1, #1
   120f0:	bl	11188 <dcgettext@plt>
   120f4:	mov	r4, r0
   120f8:	movw	r0, #29056	; 0x7180
   120fc:	movt	r0, #2
   12100:	ldr	r6, [r0]
   12104:	bl	112b4 <__errno_location@plt>
   12108:	ldr	r5, [r0]
   1210c:	cmp	r6, #0
   12110:	bne	1212c <__assert_fail@plt+0xd58>
   12114:	movw	r2, #25607	; 0x6407
   12118:	mov	r0, #0
   1211c:	mov	r1, r5
   12120:	mov	r3, r4
   12124:	movt	r2, #1
   12128:	b	1214c <__assert_fail@plt+0xd78>
   1212c:	mov	r0, r6
   12130:	bl	1394c <__assert_fail@plt+0x2578>
   12134:	movw	r2, #25603	; 0x6403
   12138:	mov	r3, r0
   1213c:	str	r4, [sp]
   12140:	mov	r0, #0
   12144:	mov	r1, r5
   12148:	movt	r2, #1
   1214c:	bl	11218 <error@plt>
   12150:	movw	r0, #28956	; 0x711c
   12154:	movt	r0, #2
   12158:	ldr	r0, [r0]
   1215c:	bl	1114c <_exit@plt>
   12160:	push	{r4, r5, r6, sl, fp, lr}
   12164:	add	fp, sp, #16
   12168:	mov	r4, r0
   1216c:	bl	112b4 <__errno_location@plt>
   12170:	ldr	r6, [r0]
   12174:	mov	r5, r0
   12178:	mov	r0, r4
   1217c:	bl	11140 <free@plt>
   12180:	str	r6, [r5]
   12184:	pop	{r4, r5, r6, sl, fp, pc}
   12188:	push	{r4, r5, fp, lr}
   1218c:	add	fp, sp, #8
   12190:	cmp	r0, #0
   12194:	beq	12228 <__assert_fail@plt+0xe54>
   12198:	mov	r1, #47	; 0x2f
   1219c:	mov	r4, r0
   121a0:	bl	11350 <strrchr@plt>
   121a4:	cmp	r0, #0
   121a8:	mov	r5, r4
   121ac:	addne	r5, r0, #1
   121b0:	sub	r0, r5, r4
   121b4:	cmp	r0, #7
   121b8:	blt	1220c <__assert_fail@plt+0xe38>
   121bc:	movw	r1, #25666	; 0x6442
   121c0:	sub	r0, r5, #7
   121c4:	mov	r2, #7
   121c8:	movt	r1, #1
   121cc:	bl	113a4 <strncmp@plt>
   121d0:	cmp	r0, #0
   121d4:	bne	1220c <__assert_fail@plt+0xe38>
   121d8:	movw	r1, #25674	; 0x644a
   121dc:	mov	r0, r5
   121e0:	mov	r2, #3
   121e4:	movt	r1, #1
   121e8:	bl	113a4 <strncmp@plt>
   121ec:	cmp	r0, #0
   121f0:	beq	121fc <__assert_fail@plt+0xe28>
   121f4:	mov	r4, r5
   121f8:	b	1220c <__assert_fail@plt+0xe38>
   121fc:	movw	r0, #29024	; 0x7160
   12200:	add	r4, r5, #3
   12204:	movt	r0, #2
   12208:	str	r4, [r0]
   1220c:	movw	r0, #29028	; 0x7164
   12210:	movt	r0, #2
   12214:	str	r4, [r0]
   12218:	movw	r0, #29064	; 0x7188
   1221c:	movt	r0, #2
   12220:	str	r4, [r0]
   12224:	pop	{r4, r5, fp, pc}
   12228:	movw	r0, #29040	; 0x7170
   1222c:	movt	r0, #2
   12230:	ldr	r1, [r0]
   12234:	movw	r0, #25610	; 0x640a
   12238:	movt	r0, #1
   1223c:	bl	11398 <fputs@plt>
   12240:	bl	113b0 <abort@plt>
   12244:	push	{r4, r5, r6, sl, fp, lr}
   12248:	add	fp, sp, #16
   1224c:	mov	r4, r0
   12250:	movw	r0, #29072	; 0x7190
   12254:	movt	r0, #2
   12258:	cmp	r4, #0
   1225c:	moveq	r4, r0
   12260:	bl	112b4 <__errno_location@plt>
   12264:	ldr	r6, [r0]
   12268:	mov	r5, r0
   1226c:	mov	r0, r4
   12270:	mov	r1, #48	; 0x30
   12274:	bl	1486c <__assert_fail@plt+0x3498>
   12278:	str	r6, [r5]
   1227c:	pop	{r4, r5, r6, sl, fp, pc}
   12280:	movw	r1, #29072	; 0x7190
   12284:	cmp	r0, #0
   12288:	movt	r1, #2
   1228c:	movne	r1, r0
   12290:	ldr	r0, [r1]
   12294:	bx	lr
   12298:	movw	r2, #29072	; 0x7190
   1229c:	cmp	r0, #0
   122a0:	movt	r2, #2
   122a4:	movne	r2, r0
   122a8:	str	r1, [r2]
   122ac:	bx	lr
   122b0:	movw	r3, #29072	; 0x7190
   122b4:	cmp	r0, #0
   122b8:	movt	r3, #2
   122bc:	movne	r3, r0
   122c0:	ubfx	r0, r1, #5, #3
   122c4:	and	r1, r1, #31
   122c8:	add	r0, r3, r0, lsl #2
   122cc:	ldr	r3, [r0, #8]
   122d0:	eor	r2, r2, r3, lsr r1
   122d4:	and	r2, r2, #1
   122d8:	eor	r2, r3, r2, lsl r1
   122dc:	str	r2, [r0, #8]
   122e0:	mov	r0, #1
   122e4:	and	r0, r0, r3, lsr r1
   122e8:	bx	lr
   122ec:	movw	r2, #29072	; 0x7190
   122f0:	cmp	r0, #0
   122f4:	movt	r2, #2
   122f8:	movne	r2, r0
   122fc:	ldr	r0, [r2, #4]
   12300:	str	r1, [r2, #4]
   12304:	bx	lr
   12308:	movw	r3, #29072	; 0x7190
   1230c:	cmp	r0, #0
   12310:	movt	r3, #2
   12314:	movne	r3, r0
   12318:	cmp	r1, #0
   1231c:	mov	r0, #10
   12320:	cmpne	r2, #0
   12324:	str	r0, [r3]
   12328:	bne	12338 <__assert_fail@plt+0xf64>
   1232c:	push	{fp, lr}
   12330:	mov	fp, sp
   12334:	bl	113b0 <abort@plt>
   12338:	str	r1, [r3, #40]	; 0x28
   1233c:	str	r2, [r3, #44]	; 0x2c
   12340:	bx	lr
   12344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12348:	add	fp, sp, #28
   1234c:	sub	sp, sp, #20
   12350:	mov	r7, r0
   12354:	ldr	r0, [fp, #8]
   12358:	movw	r5, #29072	; 0x7190
   1235c:	mov	r8, r3
   12360:	mov	r9, r2
   12364:	mov	sl, r1
   12368:	movt	r5, #2
   1236c:	cmp	r0, #0
   12370:	movne	r5, r0
   12374:	bl	112b4 <__errno_location@plt>
   12378:	mov	r4, r0
   1237c:	ldm	r5, {r0, r1}
   12380:	ldr	r2, [r5, #40]	; 0x28
   12384:	ldr	r3, [r5, #44]	; 0x2c
   12388:	add	r5, r5, #8
   1238c:	ldr	r6, [r4]
   12390:	stm	sp, {r0, r1, r5}
   12394:	str	r2, [sp, #12]
   12398:	str	r3, [sp, #16]
   1239c:	mov	r0, r7
   123a0:	mov	r1, sl
   123a4:	mov	r2, r9
   123a8:	mov	r3, r8
   123ac:	bl	123bc <__assert_fail@plt+0xfe8>
   123b0:	str	r6, [r4]
   123b4:	sub	sp, fp, #28
   123b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123c0:	add	fp, sp, #28
   123c4:	sub	sp, sp, #156	; 0x9c
   123c8:	str	r0, [fp, #-56]	; 0xffffffc8
   123cc:	ldr	r0, [fp, #12]
   123d0:	mov	r4, r1
   123d4:	str	r3, [sp, #80]	; 0x50
   123d8:	str	r2, [fp, #-84]	; 0xffffffac
   123dc:	and	r1, r0, #4
   123e0:	str	r1, [sp, #24]
   123e4:	and	r1, r0, #1
   123e8:	str	r1, [sp, #28]
   123ec:	ubfx	r7, r0, #1, #1
   123f0:	bl	111dc <__ctype_get_mb_cur_max@plt>
   123f4:	str	r0, [sp, #32]
   123f8:	ldr	r0, [fp, #24]
   123fc:	ldr	r9, [fp, #8]
   12400:	mov	r2, #0
   12404:	mov	r1, #0
   12408:	mov	r5, #0
   1240c:	str	r2, [sp, #52]	; 0x34
   12410:	mov	r2, #1
   12414:	str	r0, [sp, #72]	; 0x48
   12418:	ldr	r0, [fp, #20]
   1241c:	str	r0, [sp, #64]	; 0x40
   12420:	mov	r0, #0
   12424:	str	r0, [sp, #92]	; 0x5c
   12428:	mov	r0, #0
   1242c:	str	r0, [fp, #-76]	; 0xffffffb4
   12430:	mov	r0, #0
   12434:	cmp	r9, #10
   12438:	str	r1, [sp, #68]	; 0x44
   1243c:	bhi	1343c <__assert_fail@plt+0x2068>
   12440:	add	r1, pc, #28
   12444:	ldr	ip, [fp, #-84]	; 0xffffffac
   12448:	ldr	lr, [sp, #80]	; 0x50
   1244c:	mov	r6, r4
   12450:	mov	r8, #0
   12454:	mov	r3, #1
   12458:	mov	sl, #0
   1245c:	mov	r4, r2
   12460:	ldr	pc, [r1, r9, lsl #2]
   12464:	andeq	r2, r1, r4, lsr r5
   12468:	andeq	r2, r1, r0, ror r5
   1246c:	andeq	r2, r1, r4, asr #10
   12470:	andeq	r2, r1, ip, lsr #10
   12474:	andeq	r2, r1, r4, ror #10
   12478:			; <UNDEFINED> instruction: 0x000125bc
   1247c:	andeq	r2, r1, r4, asr r5
   12480:	andeq	r2, r1, ip, lsl r6
   12484:	muleq	r1, r0, r4
   12488:	muleq	r1, r0, r4
   1248c:			; <UNDEFINED> instruction: 0x000124b8
   12490:	movw	r0, #25756	; 0x649c
   12494:	mov	r1, r9
   12498:	movt	r0, #1
   1249c:	bl	13ba4 <__assert_fail@plt+0x27d0>
   124a0:	str	r0, [sp, #64]	; 0x40
   124a4:	movw	r0, #25758	; 0x649e
   124a8:	mov	r1, r9
   124ac:	movt	r0, #1
   124b0:	bl	13ba4 <__assert_fail@plt+0x27d0>
   124b4:	str	r0, [sp, #72]	; 0x48
   124b8:	mov	r8, #0
   124bc:	mov	sl, r7
   124c0:	tst	r7, #1
   124c4:	str	r5, [fp, #-48]	; 0xffffffd0
   124c8:	bne	12504 <__assert_fail@plt+0x1130>
   124cc:	ldr	r0, [sp, #64]	; 0x40
   124d0:	ldrb	r0, [r0]
   124d4:	cmp	r0, #0
   124d8:	beq	12504 <__assert_fail@plt+0x1130>
   124dc:	ldr	r1, [sp, #64]	; 0x40
   124e0:	mov	r8, #0
   124e4:	add	r1, r1, #1
   124e8:	cmp	r8, r6
   124ec:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   124f0:	strbcc	r0, [r2, r8]
   124f4:	ldrb	r0, [r1, r8]
   124f8:	add	r8, r8, #1
   124fc:	cmp	r0, #0
   12500:	bne	124e8 <__assert_fail@plt+0x1114>
   12504:	ldr	r7, [sp, #72]	; 0x48
   12508:	mov	r0, r7
   1250c:	bl	1129c <strlen@plt>
   12510:	ldr	ip, [fp, #-84]	; 0xffffffac
   12514:	ldr	lr, [sp, #80]	; 0x50
   12518:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1251c:	str	r0, [fp, #-76]	; 0xffffffb4
   12520:	str	r7, [sp, #92]	; 0x5c
   12524:	mov	r3, #1
   12528:	b	1261c <__assert_fail@plt+0x1248>
   1252c:	mov	r0, #1
   12530:	b	12570 <__assert_fail@plt+0x119c>
   12534:	mov	r9, #0
   12538:	mov	r8, #0
   1253c:	mov	r3, r0
   12540:	b	12618 <__assert_fail@plt+0x1244>
   12544:	tst	r7, #1
   12548:	bne	12570 <__assert_fail@plt+0x119c>
   1254c:	mov	r3, r0
   12550:	b	12598 <__assert_fail@plt+0x11c4>
   12554:	mov	r0, #1
   12558:	mov	r8, #0
   1255c:	mov	r9, #5
   12560:	b	125d0 <__assert_fail@plt+0x11fc>
   12564:	mov	r3, #1
   12568:	tst	r7, #1
   1256c:	beq	12598 <__assert_fail@plt+0x11c4>
   12570:	mov	r1, #1
   12574:	mov	r8, #0
   12578:	mov	r9, #2
   1257c:	mov	r3, r0
   12580:	mov	sl, #1
   12584:	str	r1, [fp, #-76]	; 0xffffffb4
   12588:	movw	r1, #25758	; 0x649e
   1258c:	movt	r1, #1
   12590:	str	r1, [sp, #92]	; 0x5c
   12594:	b	1261c <__assert_fail@plt+0x1248>
   12598:	cmp	r6, #0
   1259c:	mov	r8, #1
   125a0:	mov	r9, #2
   125a4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   125a8:	movne	r0, #39	; 0x27
   125ac:	strbne	r0, [r1]
   125b0:	movw	r0, #25758	; 0x649e
   125b4:	movt	r0, #1
   125b8:	b	1260c <__assert_fail@plt+0x1238>
   125bc:	mov	r9, #5
   125c0:	tst	r7, #1
   125c4:	beq	125ec <__assert_fail@plt+0x1218>
   125c8:	mov	r0, #1
   125cc:	mov	r8, #0
   125d0:	str	r0, [fp, #-76]	; 0xffffffb4
   125d4:	movw	r0, #25754	; 0x649a
   125d8:	mov	r3, #1
   125dc:	mov	sl, #1
   125e0:	movt	r0, #1
   125e4:	str	r0, [sp, #92]	; 0x5c
   125e8:	b	1261c <__assert_fail@plt+0x1248>
   125ec:	cmp	r6, #0
   125f0:	mov	r8, #1
   125f4:	mov	r3, #1
   125f8:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   125fc:	movne	r0, #34	; 0x22
   12600:	strbne	r0, [r1]
   12604:	movw	r0, #25754	; 0x649a
   12608:	movt	r0, #1
   1260c:	str	r0, [sp, #92]	; 0x5c
   12610:	mov	r0, #1
   12614:	str	r0, [fp, #-76]	; 0xffffffb4
   12618:	mov	sl, #0
   1261c:	ldr	r0, [fp, #16]
   12620:	mov	r7, #0
   12624:	str	r9, [fp, #-64]	; 0xffffffc0
   12628:	str	sl, [fp, #-72]	; 0xffffffb8
   1262c:	str	r3, [sp, #84]	; 0x54
   12630:	cmp	r0, #0
   12634:	movwne	r0, #1
   12638:	and	r0, r0, sl
   1263c:	str	r0, [fp, #-88]	; 0xffffffa8
   12640:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12644:	cmp	r0, #0
   12648:	movwne	r0, #1
   1264c:	subs	r2, r9, #2
   12650:	and	r1, r0, sl
   12654:	str	r2, [fp, #-80]	; 0xffffffb0
   12658:	and	r1, r3, r1
   1265c:	str	r1, [sp, #44]	; 0x2c
   12660:	clz	r1, r2
   12664:	lsr	r1, r1, #5
   12668:	and	r1, r1, sl
   1266c:	str	r1, [sp, #56]	; 0x38
   12670:	mov	r1, r2
   12674:	eor	r2, sl, #1
   12678:	movwne	r1, #1
   1267c:	str	r2, [sp, #88]	; 0x58
   12680:	orr	r2, r1, r2
   12684:	and	r1, r1, r3
   12688:	and	r0, r0, r1
   1268c:	str	r2, [sp, #60]	; 0x3c
   12690:	str	r1, [fp, #-68]	; 0xffffffbc
   12694:	str	r0, [fp, #-60]	; 0xffffffc4
   12698:	eor	r0, r3, #1
   1269c:	str	r0, [sp, #48]	; 0x30
   126a0:	cmn	lr, #1
   126a4:	beq	126b4 <__assert_fail@plt+0x12e0>
   126a8:	cmp	r7, lr
   126ac:	bne	126c0 <__assert_fail@plt+0x12ec>
   126b0:	b	1326c <__assert_fail@plt+0x1e98>
   126b4:	ldrb	r0, [ip, r7]
   126b8:	cmp	r0, #0
   126bc:	beq	13274 <__assert_fail@plt+0x1ea0>
   126c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   126c4:	mov	r9, #0
   126c8:	str	r5, [fp, #-48]	; 0xffffffd0
   126cc:	str	r6, [fp, #-52]	; 0xffffffcc
   126d0:	cmp	r0, #0
   126d4:	beq	12714 <__assert_fail@plt+0x1340>
   126d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   126dc:	mov	r5, r4
   126e0:	add	r4, r7, r0
   126e4:	cmp	r0, #2
   126e8:	bcc	12704 <__assert_fail@plt+0x1330>
   126ec:	cmn	lr, #1
   126f0:	bne	12704 <__assert_fail@plt+0x1330>
   126f4:	mov	r0, ip
   126f8:	bl	1129c <strlen@plt>
   126fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12700:	mov	lr, r0
   12704:	cmp	r4, lr
   12708:	bls	1271c <__assert_fail@plt+0x1348>
   1270c:	mov	r6, #0
   12710:	b	1275c <__assert_fail@plt+0x1388>
   12714:	mov	r6, #0
   12718:	b	12760 <__assert_fail@plt+0x138c>
   1271c:	ldr	r1, [sp, #92]	; 0x5c
   12720:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12724:	add	r0, ip, r7
   12728:	mov	r4, lr
   1272c:	bl	1117c <memcmp@plt>
   12730:	ldr	r2, [sp, #88]	; 0x58
   12734:	cmp	r0, #0
   12738:	mov	r1, r0
   1273c:	movwne	r1, #1
   12740:	orr	r1, r1, r2
   12744:	tst	r1, #1
   12748:	beq	13308 <__assert_fail@plt+0x1f34>
   1274c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12750:	clz	r0, r0
   12754:	mov	lr, r4
   12758:	lsr	r6, r0, #5
   1275c:	mov	r4, r5
   12760:	ldrb	r5, [ip, r7]
   12764:	cmp	r5, #126	; 0x7e
   12768:	bhi	12b30 <__assert_fail@plt+0x175c>
   1276c:	add	r3, pc, #16
   12770:	mov	sl, #1
   12774:	mov	r2, #110	; 0x6e
   12778:	mov	r0, #97	; 0x61
   1277c:	mov	r1, #0
   12780:	ldr	pc, [r3, r5, lsl #2]
   12784:	andeq	r2, r1, r4, lsl sl
   12788:	andeq	r2, r1, r0, lsr fp
   1278c:	andeq	r2, r1, r0, lsr fp
   12790:	andeq	r2, r1, r0, lsr fp
   12794:	andeq	r2, r1, r0, lsr fp
   12798:	andeq	r2, r1, r0, lsr fp
   1279c:	andeq	r2, r1, r0, lsr fp
   127a0:	ldrdeq	r2, [r1], -r4
   127a4:	strdeq	r2, [r1], -r4
   127a8:	andeq	r2, r1, ip, ror #19
   127ac:	andeq	r2, r1, r0, lsl #20
   127b0:	andeq	r2, r1, r4, lsl #21
   127b4:	andeq	r2, r1, r4, ror #19
   127b8:	strdeq	r2, [r1], -ip
   127bc:	andeq	r2, r1, r0, lsr fp
   127c0:	andeq	r2, r1, r0, lsr fp
   127c4:	andeq	r2, r1, r0, lsr fp
   127c8:	andeq	r2, r1, r0, lsr fp
   127cc:	andeq	r2, r1, r0, lsr fp
   127d0:	andeq	r2, r1, r0, lsr fp
   127d4:	andeq	r2, r1, r0, lsr fp
   127d8:	andeq	r2, r1, r0, lsr fp
   127dc:	andeq	r2, r1, r0, lsr fp
   127e0:	andeq	r2, r1, r0, lsr fp
   127e4:	andeq	r2, r1, r0, lsr fp
   127e8:	andeq	r2, r1, r0, lsr fp
   127ec:	andeq	r2, r1, r0, lsr fp
   127f0:	andeq	r2, r1, r0, lsr fp
   127f4:	andeq	r2, r1, r0, lsr fp
   127f8:	andeq	r2, r1, r0, lsr fp
   127fc:	andeq	r2, r1, r0, lsr fp
   12800:	andeq	r2, r1, r0, lsr fp
   12804:	muleq	r1, r4, fp
   12808:	muleq	r1, r8, fp
   1280c:	muleq	r1, r8, fp
   12810:	muleq	r1, r4, r9
   12814:	muleq	r1, r8, fp
   12818:	andeq	r2, r1, r0, lsl #19
   1281c:	muleq	r1, r8, fp
   12820:	andeq	r2, r1, ip, lsl #21
   12824:	muleq	r1, r8, fp
   12828:	muleq	r1, r8, fp
   1282c:	muleq	r1, r8, fp
   12830:	andeq	r2, r1, r0, lsl #19
   12834:	andeq	r2, r1, r0, lsl #19
   12838:	andeq	r2, r1, r0, lsl #19
   1283c:	andeq	r2, r1, r0, lsl #19
   12840:	andeq	r2, r1, r0, lsl #19
   12844:	andeq	r2, r1, r0, lsl #19
   12848:	andeq	r2, r1, r0, lsl #19
   1284c:	andeq	r2, r1, r0, lsl #19
   12850:	andeq	r2, r1, r0, lsl #19
   12854:	andeq	r2, r1, r0, lsl #19
   12858:	andeq	r2, r1, r0, lsl #19
   1285c:	andeq	r2, r1, r0, lsl #19
   12860:	andeq	r2, r1, r0, lsl #19
   12864:	andeq	r2, r1, r0, lsl #19
   12868:	andeq	r2, r1, r0, lsl #19
   1286c:	andeq	r2, r1, r0, lsl #19
   12870:	muleq	r1, r8, fp
   12874:	muleq	r1, r8, fp
   12878:	muleq	r1, r8, fp
   1287c:	muleq	r1, r8, fp
   12880:	andeq	r2, r1, r8, asr sl
   12884:	andeq	r2, r1, r0, lsr fp
   12888:	andeq	r2, r1, r0, lsl #19
   1288c:	andeq	r2, r1, r0, lsl #19
   12890:	andeq	r2, r1, r0, lsl #19
   12894:	andeq	r2, r1, r0, lsl #19
   12898:	andeq	r2, r1, r0, lsl #19
   1289c:	andeq	r2, r1, r0, lsl #19
   128a0:	andeq	r2, r1, r0, lsl #19
   128a4:	andeq	r2, r1, r0, lsl #19
   128a8:	andeq	r2, r1, r0, lsl #19
   128ac:	andeq	r2, r1, r0, lsl #19
   128b0:	andeq	r2, r1, r0, lsl #19
   128b4:	andeq	r2, r1, r0, lsl #19
   128b8:	andeq	r2, r1, r0, lsl #19
   128bc:	andeq	r2, r1, r0, lsl #19
   128c0:	andeq	r2, r1, r0, lsl #19
   128c4:	andeq	r2, r1, r0, lsl #19
   128c8:	andeq	r2, r1, r0, lsl #19
   128cc:	andeq	r2, r1, r0, lsl #19
   128d0:	andeq	r2, r1, r0, lsl #19
   128d4:	andeq	r2, r1, r0, lsl #19
   128d8:	andeq	r2, r1, r0, lsl #19
   128dc:	andeq	r2, r1, r0, lsl #19
   128e0:	andeq	r2, r1, r0, lsl #19
   128e4:	andeq	r2, r1, r0, lsl #19
   128e8:	andeq	r2, r1, r0, lsl #19
   128ec:	andeq	r2, r1, r0, lsl #19
   128f0:	muleq	r1, r8, fp
   128f4:	andeq	r2, r1, r0, asr #19
   128f8:	andeq	r2, r1, r0, lsl #19
   128fc:	muleq	r1, r8, fp
   12900:	andeq	r2, r1, r0, lsl #19
   12904:	muleq	r1, r8, fp
   12908:	andeq	r2, r1, r0, lsl #19
   1290c:	andeq	r2, r1, r0, lsl #19
   12910:	andeq	r2, r1, r0, lsl #19
   12914:	andeq	r2, r1, r0, lsl #19
   12918:	andeq	r2, r1, r0, lsl #19
   1291c:	andeq	r2, r1, r0, lsl #19
   12920:	andeq	r2, r1, r0, lsl #19
   12924:	andeq	r2, r1, r0, lsl #19
   12928:	andeq	r2, r1, r0, lsl #19
   1292c:	andeq	r2, r1, r0, lsl #19
   12930:	andeq	r2, r1, r0, lsl #19
   12934:	andeq	r2, r1, r0, lsl #19
   12938:	andeq	r2, r1, r0, lsl #19
   1293c:	andeq	r2, r1, r0, lsl #19
   12940:	andeq	r2, r1, r0, lsl #19
   12944:	andeq	r2, r1, r0, lsl #19
   12948:	andeq	r2, r1, r0, lsl #19
   1294c:	andeq	r2, r1, r0, lsl #19
   12950:	andeq	r2, r1, r0, lsl #19
   12954:	andeq	r2, r1, r0, lsl #19
   12958:	andeq	r2, r1, r0, lsl #19
   1295c:	andeq	r2, r1, r0, lsl #19
   12960:	andeq	r2, r1, r0, lsl #19
   12964:	andeq	r2, r1, r0, lsl #19
   12968:	andeq	r2, r1, r0, lsl #19
   1296c:	andeq	r2, r1, r0, lsl #19
   12970:	andeq	r2, r1, r4, lsr #19
   12974:	muleq	r1, r8, fp
   12978:	andeq	r2, r1, r4, lsr #19
   1297c:	muleq	r1, r4, r9
   12980:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12984:	cmp	r0, #0
   12988:	beq	12be8 <__assert_fail@plt+0x1814>
   1298c:	ldr	r0, [fp, #16]
   12990:	b	12bec <__assert_fail@plt+0x1818>
   12994:	mov	sl, #0
   12998:	cmp	r7, #0
   1299c:	bne	12e04 <__assert_fail@plt+0x1a30>
   129a0:	b	12b94 <__assert_fail@plt+0x17c0>
   129a4:	mov	sl, #0
   129a8:	cmn	lr, #1
   129ac:	beq	12b80 <__assert_fail@plt+0x17ac>
   129b0:	cmp	r7, #0
   129b4:	cmpeq	lr, #1
   129b8:	bne	12e04 <__assert_fail@plt+0x1a30>
   129bc:	b	12b94 <__assert_fail@plt+0x17c0>
   129c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129c4:	cmp	r0, #2
   129c8:	bne	12bb8 <__assert_fail@plt+0x17e4>
   129cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129d0:	tst	r0, #1
   129d4:	bne	13324 <__assert_fail@plt+0x1f50>
   129d8:	mov	r9, #0
   129dc:	mov	r0, #92	; 0x5c
   129e0:	b	12bcc <__assert_fail@plt+0x17f8>
   129e4:	mov	r0, #102	; 0x66
   129e8:	b	12bd4 <__assert_fail@plt+0x1800>
   129ec:	mov	r2, #116	; 0x74
   129f0:	b	12a00 <__assert_fail@plt+0x162c>
   129f4:	mov	r0, #98	; 0x62
   129f8:	b	12bd4 <__assert_fail@plt+0x1800>
   129fc:	mov	r2, #114	; 0x72
   12a00:	ldr	r0, [sp, #60]	; 0x3c
   12a04:	tst	r0, #1
   12a08:	mov	r0, r2
   12a0c:	bne	12bd4 <__assert_fail@plt+0x1800>
   12a10:	b	13324 <__assert_fail@plt+0x1f50>
   12a14:	ldr	r0, [sp, #84]	; 0x54
   12a18:	tst	r0, #1
   12a1c:	beq	12cc0 <__assert_fail@plt+0x18ec>
   12a20:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a24:	tst	r0, #1
   12a28:	bne	1342c <__assert_fail@plt+0x2058>
   12a2c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a30:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12a34:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12a38:	cmp	r0, #2
   12a3c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12a40:	movwne	r0, #1
   12a44:	orr	r0, r0, r3
   12a48:	tst	r0, #1
   12a4c:	beq	13140 <__assert_fail@plt+0x1d6c>
   12a50:	mov	r0, r8
   12a54:	b	13180 <__assert_fail@plt+0x1dac>
   12a58:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a5c:	mov	r9, #0
   12a60:	mov	r5, #63	; 0x3f
   12a64:	cmp	r0, #5
   12a68:	beq	12e0c <__assert_fail@plt+0x1a38>
   12a6c:	cmp	r0, #2
   12a70:	bne	12ecc <__assert_fail@plt+0x1af8>
   12a74:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a78:	tst	r0, #1
   12a7c:	beq	12ed0 <__assert_fail@plt+0x1afc>
   12a80:	b	13324 <__assert_fail@plt+0x1f50>
   12a84:	mov	r0, #118	; 0x76
   12a88:	b	12bd4 <__assert_fail@plt+0x1800>
   12a8c:	mov	r0, #1
   12a90:	mov	r5, #39	; 0x27
   12a94:	str	r0, [sp, #52]	; 0x34
   12a98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a9c:	cmp	r0, #2
   12aa0:	bne	12b28 <__assert_fail@plt+0x1754>
   12aa4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12aa8:	tst	r0, #1
   12aac:	bne	13324 <__assert_fail@plt+0x1f50>
   12ab0:	ldr	r3, [sp, #68]	; 0x44
   12ab4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12ab8:	mov	r9, #0
   12abc:	clz	r1, r2
   12ac0:	cmp	r3, #0
   12ac4:	mov	r0, r3
   12ac8:	movwne	r0, #1
   12acc:	lsr	r1, r1, #5
   12ad0:	orrs	r0, r0, r1
   12ad4:	moveq	r3, r2
   12ad8:	moveq	r2, r0
   12adc:	cmp	r8, r2
   12ae0:	str	r3, [sp, #68]	; 0x44
   12ae4:	str	r2, [fp, #-52]	; 0xffffffcc
   12ae8:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12aec:	movcc	r0, #39	; 0x27
   12af0:	strbcc	r0, [r1, r8]
   12af4:	add	r0, r8, #1
   12af8:	cmp	r0, r2
   12afc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12b00:	movcc	r1, #92	; 0x5c
   12b04:	strbcc	r1, [r3, r0]
   12b08:	add	r0, r8, #2
   12b0c:	add	r8, r8, #3
   12b10:	cmp	r0, r2
   12b14:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12b18:	movcc	r1, #39	; 0x27
   12b1c:	strbcc	r1, [r2, r0]
   12b20:	mov	r0, #0
   12b24:	str	r0, [fp, #-48]	; 0xffffffd0
   12b28:	mov	sl, #1
   12b2c:	b	12980 <__assert_fail@plt+0x15ac>
   12b30:	ldr	r0, [sp, #32]
   12b34:	cmp	r0, #1
   12b38:	bne	12ce4 <__assert_fail@plt+0x1910>
   12b3c:	str	lr, [sp, #80]	; 0x50
   12b40:	bl	11278 <__ctype_b_loc@plt>
   12b44:	ldr	r0, [r0]
   12b48:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b4c:	mov	r1, #1
   12b50:	add	r0, r0, r5, lsl #1
   12b54:	ldrb	r0, [r0, #1]
   12b58:	ubfx	sl, r0, #6, #1
   12b5c:	ldr	r0, [sp, #48]	; 0x30
   12b60:	mov	r2, r1
   12b64:	cmp	r1, #1
   12b68:	orr	r0, sl, r0
   12b6c:	bhi	12ed8 <__assert_fail@plt+0x1b04>
   12b70:	tst	r0, #1
   12b74:	beq	12ed8 <__assert_fail@plt+0x1b04>
   12b78:	ldr	lr, [sp, #80]	; 0x50
   12b7c:	b	12980 <__assert_fail@plt+0x15ac>
   12b80:	cmp	r7, #0
   12b84:	bne	12e00 <__assert_fail@plt+0x1a2c>
   12b88:	ldrb	r0, [ip, #1]
   12b8c:	cmp	r0, #0
   12b90:	bne	12e00 <__assert_fail@plt+0x1a2c>
   12b94:	mov	r1, #1
   12b98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12b9c:	cmp	r0, #2
   12ba0:	bne	12bb0 <__assert_fail@plt+0x17dc>
   12ba4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ba8:	tst	r0, #1
   12bac:	bne	13324 <__assert_fail@plt+0x1f50>
   12bb0:	mov	sl, r1
   12bb4:	b	12980 <__assert_fail@plt+0x15ac>
   12bb8:	ldr	r1, [sp, #44]	; 0x2c
   12bbc:	mov	r9, #0
   12bc0:	mov	r0, #92	; 0x5c
   12bc4:	cmp	r1, #0
   12bc8:	beq	12bd4 <__assert_fail@plt+0x1800>
   12bcc:	mov	sl, #0
   12bd0:	b	130ec <__assert_fail@plt+0x1d18>
   12bd4:	ldr	r1, [sp, #84]	; 0x54
   12bd8:	mov	sl, #0
   12bdc:	mov	r9, #0
   12be0:	tst	r1, #1
   12be4:	bne	12c20 <__assert_fail@plt+0x184c>
   12be8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12bec:	cmp	r0, #0
   12bf0:	mov	r0, r5
   12bf4:	beq	12c18 <__assert_fail@plt+0x1844>
   12bf8:	ldr	r1, [fp, #16]
   12bfc:	ubfx	r0, r5, #5, #3
   12c00:	mov	r2, #1
   12c04:	ldr	r0, [r1, r0, lsl #2]
   12c08:	and	r1, r5, #31
   12c0c:	tst	r0, r2, lsl r1
   12c10:	mov	r0, r5
   12c14:	bne	12c20 <__assert_fail@plt+0x184c>
   12c18:	cmp	r6, #0
   12c1c:	beq	130ec <__assert_fail@plt+0x1d18>
   12c20:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12c24:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12c28:	tst	r1, #1
   12c2c:	bne	13300 <__assert_fail@plt+0x1f2c>
   12c30:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12c34:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c38:	cmp	r1, #2
   12c3c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12c40:	movwne	r1, #1
   12c44:	orr	r1, r1, r5
   12c48:	tst	r1, #1
   12c4c:	bne	12c90 <__assert_fail@plt+0x18bc>
   12c50:	cmp	r8, r6
   12c54:	mov	r5, #1
   12c58:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12c5c:	movcc	r1, #39	; 0x27
   12c60:	strbcc	r1, [r2, r8]
   12c64:	add	r1, r8, #1
   12c68:	cmp	r1, r6
   12c6c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12c70:	movcc	r2, #36	; 0x24
   12c74:	strbcc	r2, [r3, r1]
   12c78:	add	r1, r8, #2
   12c7c:	add	r8, r8, #3
   12c80:	cmp	r1, r6
   12c84:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12c88:	movcc	r2, #39	; 0x27
   12c8c:	strbcc	r2, [r3, r1]
   12c90:	cmp	r8, r6
   12c94:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12c98:	movcc	r1, #92	; 0x5c
   12c9c:	strbcc	r1, [r2, r8]
   12ca0:	add	r8, r8, #1
   12ca4:	cmp	r8, r6
   12ca8:	and	r4, r4, sl
   12cac:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12cb0:	strbcc	r0, [r1, r8]
   12cb4:	add	r8, r8, #1
   12cb8:	add	r7, r7, #1
   12cbc:	b	126a0 <__assert_fail@plt+0x12cc>
   12cc0:	ldr	r0, [sp, #28]
   12cc4:	mov	sl, #0
   12cc8:	mov	r9, #0
   12ccc:	mov	r5, #0
   12cd0:	cmp	r0, #0
   12cd4:	beq	12be8 <__assert_fail@plt+0x1814>
   12cd8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12cdc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ce0:	b	12cb8 <__assert_fail@plt+0x18e4>
   12ce4:	mov	r0, #0
   12ce8:	cmn	lr, #1
   12cec:	str	r6, [sp, #76]	; 0x4c
   12cf0:	str	r4, [sp, #20]
   12cf4:	str	r0, [fp, #-36]	; 0xffffffdc
   12cf8:	str	r0, [fp, #-40]	; 0xffffffd8
   12cfc:	bne	12d10 <__assert_fail@plt+0x193c>
   12d00:	mov	r0, ip
   12d04:	bl	1129c <strlen@plt>
   12d08:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d0c:	mov	lr, r0
   12d10:	add	r0, ip, r7
   12d14:	mov	sl, #1
   12d18:	mov	r6, #0
   12d1c:	sub	r4, fp, #40	; 0x28
   12d20:	str	lr, [sp, #80]	; 0x50
   12d24:	str	r0, [sp, #36]	; 0x24
   12d28:	str	r6, [sp, #40]	; 0x28
   12d2c:	add	r6, r6, r7
   12d30:	sub	r0, fp, #44	; 0x2c
   12d34:	mov	r3, r4
   12d38:	add	r1, ip, r6
   12d3c:	sub	r2, lr, r6
   12d40:	bl	15888 <__assert_fail@plt+0x44b4>
   12d44:	cmp	r0, #0
   12d48:	beq	13254 <__assert_fail@plt+0x1e80>
   12d4c:	cmn	r0, #1
   12d50:	beq	13214 <__assert_fail@plt+0x1e40>
   12d54:	ldr	lr, [sp, #80]	; 0x50
   12d58:	cmn	r0, #2
   12d5c:	beq	1321c <__assert_fail@plt+0x1e48>
   12d60:	ldr	r2, [sp, #56]	; 0x38
   12d64:	cmp	r0, #2
   12d68:	mov	r1, #0
   12d6c:	movwcc	r1, #1
   12d70:	eor	r2, r2, #1
   12d74:	orrs	r1, r2, r1
   12d78:	bne	12dc4 <__assert_fail@plt+0x19f0>
   12d7c:	ldr	r1, [sp, #40]	; 0x28
   12d80:	ldr	r2, [sp, #36]	; 0x24
   12d84:	add	ip, r2, r1
   12d88:	mov	r2, #1
   12d8c:	ldrb	r3, [ip, r2]
   12d90:	sub	r6, r3, #94	; 0x5e
   12d94:	cmp	r6, #30
   12d98:	bhi	12dac <__assert_fail@plt+0x19d8>
   12d9c:	mov	r4, #1
   12da0:	mov	r1, #1073741829	; 0x40000005
   12da4:	tst	r1, r4, lsl r6
   12da8:	bne	13320 <__assert_fail@plt+0x1f4c>
   12dac:	sub	r3, r3, #91	; 0x5b
   12db0:	cmp	r3, #2
   12db4:	bcc	13320 <__assert_fail@plt+0x1f4c>
   12db8:	add	r2, r2, #1
   12dbc:	cmp	r2, r0
   12dc0:	bcc	12d8c <__assert_fail@plt+0x19b8>
   12dc4:	ldr	r6, [sp, #40]	; 0x28
   12dc8:	add	r6, r0, r6
   12dcc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12dd0:	bl	111b8 <iswprint@plt>
   12dd4:	cmp	r0, #0
   12dd8:	sub	r4, fp, #40	; 0x28
   12ddc:	movwne	r0, #1
   12de0:	and	sl, sl, r0
   12de4:	mov	r0, r4
   12de8:	bl	11170 <mbsinit@plt>
   12dec:	ldr	lr, [sp, #80]	; 0x50
   12df0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12df4:	cmp	r0, #0
   12df8:	beq	12d28 <__assert_fail@plt+0x1954>
   12dfc:	b	1325c <__assert_fail@plt+0x1e88>
   12e00:	mvn	lr, #0
   12e04:	mov	r9, #0
   12e08:	b	12980 <__assert_fail@plt+0x15ac>
   12e0c:	ldr	r0, [sp, #24]
   12e10:	cmp	r0, #0
   12e14:	beq	12ecc <__assert_fail@plt+0x1af8>
   12e18:	add	r0, r7, #2
   12e1c:	cmp	r0, lr
   12e20:	bcs	12ecc <__assert_fail@plt+0x1af8>
   12e24:	add	r1, ip, r7
   12e28:	ldrb	r1, [r1, #1]
   12e2c:	cmp	r1, #63	; 0x3f
   12e30:	bne	12ecc <__assert_fail@plt+0x1af8>
   12e34:	ldrb	r5, [ip, r0]
   12e38:	sub	r1, r5, #33	; 0x21
   12e3c:	cmp	r1, #29
   12e40:	bhi	12ecc <__assert_fail@plt+0x1af8>
   12e44:	movw	r3, #20929	; 0x51c1
   12e48:	mov	r2, #1
   12e4c:	movt	r3, #14336	; 0x3800
   12e50:	tst	r3, r2, lsl r1
   12e54:	beq	12ecc <__assert_fail@plt+0x1af8>
   12e58:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12e5c:	tst	r1, #1
   12e60:	bne	13434 <__assert_fail@plt+0x2060>
   12e64:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12e68:	mov	r7, r0
   12e6c:	cmp	r8, r1
   12e70:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12e74:	movcc	r1, #63	; 0x3f
   12e78:	strbcc	r1, [r2, r8]
   12e7c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12e80:	add	r1, r8, #1
   12e84:	cmp	r1, r2
   12e88:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12e8c:	movcc	r2, #34	; 0x22
   12e90:	strbcc	r2, [r3, r1]
   12e94:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12e98:	add	r1, r8, #2
   12e9c:	cmp	r1, r2
   12ea0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12ea4:	movcc	r2, #34	; 0x22
   12ea8:	strbcc	r2, [r3, r1]
   12eac:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12eb0:	add	r1, r8, #3
   12eb4:	add	r8, r8, #4
   12eb8:	cmp	r1, r2
   12ebc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12ec0:	movcc	r2, #63	; 0x3f
   12ec4:	strbcc	r2, [r3, r1]
   12ec8:	b	12ed0 <__assert_fail@plt+0x1afc>
   12ecc:	mov	r5, #63	; 0x3f
   12ed0:	mov	sl, #0
   12ed4:	b	12980 <__assert_fail@plt+0x15ac>
   12ed8:	str	r0, [sp, #40]	; 0x28
   12edc:	add	r0, r2, r7
   12ee0:	str	r6, [sp, #76]	; 0x4c
   12ee4:	add	r1, r7, #1
   12ee8:	ldr	lr, [sp, #80]	; 0x50
   12eec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12ef0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12ef4:	mov	r3, #0
   12ef8:	str	r0, [sp, #36]	; 0x24
   12efc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12f00:	b	12f94 <__assert_fail@plt+0x1bc0>
   12f04:	str	r0, [sp, #76]	; 0x4c
   12f08:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12f0c:	cmp	r9, #0
   12f10:	movwne	r9, #1
   12f14:	mvn	r7, r0
   12f18:	orr	r7, r7, r9
   12f1c:	tst	r7, #1
   12f20:	bne	12f70 <__assert_fail@plt+0x1b9c>
   12f24:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12f28:	cmp	r8, r6
   12f2c:	bcs	12f44 <__assert_fail@plt+0x1b70>
   12f30:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12f34:	mov	r2, r4
   12f38:	mov	r4, #39	; 0x27
   12f3c:	strb	r4, [r7, r8]
   12f40:	mov	r4, r2
   12f44:	add	r7, r8, #1
   12f48:	cmp	r7, r6
   12f4c:	bcs	12f64 <__assert_fail@plt+0x1b90>
   12f50:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12f54:	mov	r2, r4
   12f58:	mov	r4, #39	; 0x27
   12f5c:	strb	r4, [r0, r7]
   12f60:	mov	r4, r2
   12f64:	add	r8, r8, #2
   12f68:	mov	r0, #0
   12f6c:	b	12f78 <__assert_fail@plt+0x1ba4>
   12f70:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12f74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12f78:	cmp	r8, r6
   12f7c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12f80:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12f84:	strbcc	r5, [r2, r8]
   12f88:	add	r8, r8, #1
   12f8c:	ldrb	r5, [ip, r1]
   12f90:	add	r1, r1, #1
   12f94:	ldr	r2, [sp, #40]	; 0x28
   12f98:	tst	r2, #1
   12f9c:	beq	12fd8 <__assert_fail@plt+0x1c04>
   12fa0:	ldr	r2, [sp, #76]	; 0x4c
   12fa4:	str	r0, [fp, #-48]	; 0xffffffd0
   12fa8:	tst	r2, #1
   12fac:	beq	12fd0 <__assert_fail@plt+0x1bfc>
   12fb0:	cmp	r8, r6
   12fb4:	bcs	12fcc <__assert_fail@plt+0x1bf8>
   12fb8:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12fbc:	mov	r2, r4
   12fc0:	mov	r4, #92	; 0x5c
   12fc4:	strb	r4, [r6, r8]
   12fc8:	mov	r4, r2
   12fcc:	add	r8, r8, #1
   12fd0:	mov	r0, #0
   12fd4:	b	130cc <__assert_fail@plt+0x1cf8>
   12fd8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12fdc:	tst	r2, #1
   12fe0:	bne	1332c <__assert_fail@plt+0x1f58>
   12fe4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12fe8:	cmp	r7, #2
   12fec:	movwne	r3, #1
   12ff0:	orr	r3, r3, r0
   12ff4:	tst	r3, #1
   12ff8:	bne	13054 <__assert_fail@plt+0x1c80>
   12ffc:	cmp	r8, r6
   13000:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13004:	movcc	r3, #39	; 0x27
   13008:	strbcc	r3, [r2, r8]
   1300c:	add	r3, r8, #1
   13010:	cmp	r3, r6
   13014:	bcs	1302c <__assert_fail@plt+0x1c58>
   13018:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1301c:	mov	r7, r4
   13020:	mov	r4, #36	; 0x24
   13024:	strb	r4, [r2, r3]
   13028:	mov	r4, r7
   1302c:	add	r3, r8, #2
   13030:	cmp	r3, r6
   13034:	bcs	1304c <__assert_fail@plt+0x1c78>
   13038:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1303c:	mov	r7, r4
   13040:	mov	r4, #39	; 0x27
   13044:	strb	r4, [r2, r3]
   13048:	mov	r4, r7
   1304c:	add	r8, r8, #3
   13050:	mov	r0, #1
   13054:	cmp	r8, r6
   13058:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1305c:	movcc	r3, #92	; 0x5c
   13060:	strbcc	r3, [r2, r8]
   13064:	add	r3, r8, #1
   13068:	cmp	r3, r6
   1306c:	bcs	1308c <__assert_fail@plt+0x1cb8>
   13070:	mov	r2, r4
   13074:	and	r7, r5, #192	; 0xc0
   13078:	mov	r4, #48	; 0x30
   1307c:	orr	r7, r4, r7, lsr #6
   13080:	mov	r4, r2
   13084:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13088:	strb	r7, [r2, r3]
   1308c:	add	r3, r8, #2
   13090:	cmp	r3, r6
   13094:	bcs	130b4 <__assert_fail@plt+0x1ce0>
   13098:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1309c:	mov	r6, r4
   130a0:	lsr	r7, r5, #3
   130a4:	mov	r4, #6
   130a8:	bfi	r7, r4, #3, #29
   130ac:	mov	r4, r6
   130b0:	strb	r7, [r2, r3]
   130b4:	str	r0, [fp, #-48]	; 0xffffffd0
   130b8:	ldr	r0, [sp, #76]	; 0x4c
   130bc:	mov	r3, #6
   130c0:	add	r8, r8, #3
   130c4:	bfi	r5, r3, #3, #29
   130c8:	mov	r3, #1
   130cc:	ldr	r2, [sp, #36]	; 0x24
   130d0:	and	r9, r3, #1
   130d4:	cmp	r2, r1
   130d8:	bhi	12f04 <__assert_fail@plt+0x1b30>
   130dc:	cmp	r9, #0
   130e0:	sub	r7, r1, #1
   130e4:	mov	r0, r5
   130e8:	movwne	r9, #1
   130ec:	cmp	r9, #0
   130f0:	bne	13134 <__assert_fail@plt+0x1d60>
   130f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   130f8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   130fc:	tst	r5, #1
   13100:	beq	12ca4 <__assert_fail@plt+0x18d0>
   13104:	cmp	r8, r6
   13108:	mov	r5, #0
   1310c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13110:	movcc	r1, #39	; 0x27
   13114:	strbcc	r1, [r2, r8]
   13118:	add	r1, r8, #1
   1311c:	add	r8, r8, #2
   13120:	cmp	r1, r6
   13124:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13128:	movcc	r2, #39	; 0x27
   1312c:	strbcc	r2, [r3, r1]
   13130:	b	12ca4 <__assert_fail@plt+0x18d0>
   13134:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13138:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1313c:	b	12ca4 <__assert_fail@plt+0x18d0>
   13140:	cmp	r8, r1
   13144:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13148:	movcc	r0, #39	; 0x27
   1314c:	strbcc	r0, [r2, r8]
   13150:	add	r0, r8, #1
   13154:	cmp	r0, r1
   13158:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1315c:	movcc	r2, #36	; 0x24
   13160:	strbcc	r2, [r3, r0]
   13164:	add	r0, r8, #2
   13168:	cmp	r0, r1
   1316c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13170:	movcc	r2, #39	; 0x27
   13174:	strbcc	r2, [r3, r0]
   13178:	add	r0, r8, #3
   1317c:	mov	r3, #1
   13180:	cmp	r0, r1
   13184:	add	r8, r0, #1
   13188:	str	r3, [fp, #-48]	; 0xffffffd0
   1318c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13190:	movcc	r1, #92	; 0x5c
   13194:	strbcc	r1, [r2, r0]
   13198:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1319c:	cmp	r1, #2
   131a0:	beq	13204 <__assert_fail@plt+0x1e30>
   131a4:	add	r1, r7, #1
   131a8:	mov	sl, #0
   131ac:	mov	r9, #1
   131b0:	mov	r5, #48	; 0x30
   131b4:	cmp	r1, lr
   131b8:	bcs	12980 <__assert_fail@plt+0x15ac>
   131bc:	ldrb	r1, [ip, r1]
   131c0:	sub	r1, r1, #48	; 0x30
   131c4:	uxtb	r1, r1
   131c8:	cmp	r1, #9
   131cc:	bhi	12980 <__assert_fail@plt+0x15ac>
   131d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   131d4:	cmp	r8, r1
   131d8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   131dc:	movcc	r1, #48	; 0x30
   131e0:	strbcc	r1, [r2, r8]
   131e4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   131e8:	add	r1, r0, #2
   131ec:	add	r8, r0, #3
   131f0:	cmp	r1, r2
   131f4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   131f8:	movcc	r2, #48	; 0x30
   131fc:	strbcc	r2, [r3, r1]
   13200:	b	12980 <__assert_fail@plt+0x15ac>
   13204:	mov	r0, #48	; 0x30
   13208:	mov	r9, #1
   1320c:	mov	sl, #0
   13210:	b	12c18 <__assert_fail@plt+0x1844>
   13214:	mov	sl, #0
   13218:	b	13254 <__assert_fail@plt+0x1e80>
   1321c:	mov	sl, #0
   13220:	cmp	lr, r6
   13224:	bls	13254 <__assert_fail@plt+0x1e80>
   13228:	ldr	ip, [fp, #-84]	; 0xffffffac
   1322c:	ldr	r6, [sp, #40]	; 0x28
   13230:	ldr	r0, [sp, #36]	; 0x24
   13234:	ldrb	r0, [r0, r6]
   13238:	cmp	r0, #0
   1323c:	beq	1325c <__assert_fail@plt+0x1e88>
   13240:	add	r6, r6, #1
   13244:	add	r0, r7, r6
   13248:	cmp	r0, lr
   1324c:	bcc	13230 <__assert_fail@plt+0x1e5c>
   13250:	b	1325c <__assert_fail@plt+0x1e88>
   13254:	ldr	ip, [fp, #-84]	; 0xffffffac
   13258:	ldr	r6, [sp, #40]	; 0x28
   1325c:	mov	r1, r6
   13260:	ldr	r4, [sp, #20]
   13264:	ldr	r6, [sp, #76]	; 0x4c
   13268:	b	12b5c <__assert_fail@plt+0x1788>
   1326c:	mov	lr, r7
   13270:	b	13278 <__assert_fail@plt+0x1ea4>
   13274:	mvn	lr, #0
   13278:	ldr	r9, [fp, #-64]	; 0xffffffc0
   1327c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13280:	eor	r0, r9, #2
   13284:	orr	r0, r0, r8
   13288:	clz	r0, r0
   1328c:	lsr	r0, r0, #5
   13290:	tst	r1, r0
   13294:	bne	13390 <__assert_fail@plt+0x1fbc>
   13298:	mov	r0, r1
   1329c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   132a0:	cmp	r9, #2
   132a4:	movwne	r1, #1
   132a8:	orr	r0, r0, r1
   132ac:	tst	r0, #1
   132b0:	bne	133d0 <__assert_fail@plt+0x1ffc>
   132b4:	ldr	r0, [sp, #52]	; 0x34
   132b8:	ldr	r1, [sp, #68]	; 0x44
   132bc:	str	lr, [sp, #80]	; 0x50
   132c0:	eor	r0, r0, #1
   132c4:	tst	r0, #1
   132c8:	bne	133d0 <__assert_fail@plt+0x1ffc>
   132cc:	tst	r4, #1
   132d0:	bne	13398 <__assert_fail@plt+0x1fc4>
   132d4:	mov	r7, #0
   132d8:	cmp	r1, #0
   132dc:	beq	133c8 <__assert_fail@plt+0x1ff4>
   132e0:	ldr	r0, [sp, #84]	; 0x54
   132e4:	mov	r3, #0
   132e8:	cmp	r6, #0
   132ec:	mov	r2, #0
   132f0:	mov	r4, r1
   132f4:	str	r3, [fp, #-72]	; 0xffffffb8
   132f8:	beq	12434 <__assert_fail@plt+0x1060>
   132fc:	b	133d0 <__assert_fail@plt+0x1ffc>
   13300:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13304:	b	1332c <__assert_fail@plt+0x1f58>
   13308:	ldr	ip, [fp, #-84]	; 0xffffffac
   1330c:	mov	r2, #1
   13310:	mov	lr, r4
   13314:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13318:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1331c:	b	13330 <__assert_fail@plt+0x1f5c>
   13320:	ldr	ip, [fp, #-84]	; 0xffffffac
   13324:	mov	r7, #2
   13328:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1332c:	ldr	r2, [sp, #84]	; 0x54
   13330:	mov	r0, #0
   13334:	ldr	r1, [fp, #12]
   13338:	tst	r2, #1
   1333c:	mov	r2, r7
   13340:	mov	r3, lr
   13344:	str	r0, [sp, #8]
   13348:	ldr	r0, [sp, #64]	; 0x40
   1334c:	movwne	r2, #4
   13350:	cmp	r7, #2
   13354:	movne	r2, r7
   13358:	str	r2, [sp]
   1335c:	mov	r2, ip
   13360:	bic	r1, r1, #2
   13364:	str	r0, [sp, #12]
   13368:	ldr	r0, [sp, #72]	; 0x48
   1336c:	str	r1, [sp, #4]
   13370:	mov	r1, r6
   13374:	str	r0, [sp, #16]
   13378:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1337c:	bl	123bc <__assert_fail@plt+0xfe8>
   13380:	mov	r8, r0
   13384:	mov	r0, r8
   13388:	sub	sp, fp, #28
   1338c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13390:	mov	r7, #2
   13394:	b	1332c <__assert_fail@plt+0x1f58>
   13398:	mov	r0, #5
   1339c:	ldr	r2, [fp, #-84]	; 0xffffffac
   133a0:	ldr	r3, [sp, #80]	; 0x50
   133a4:	str	r0, [sp]
   133a8:	ldr	r0, [fp, #12]
   133ac:	str	r0, [sp, #4]
   133b0:	ldr	r0, [fp, #16]
   133b4:	str	r0, [sp, #8]
   133b8:	ldr	r0, [sp, #64]	; 0x40
   133bc:	str	r0, [sp, #12]
   133c0:	ldr	r0, [sp, #72]	; 0x48
   133c4:	b	13374 <__assert_fail@plt+0x1fa0>
   133c8:	mov	r0, #0
   133cc:	str	r0, [fp, #-72]	; 0xffffffb8
   133d0:	ldr	r1, [sp, #92]	; 0x5c
   133d4:	cmp	r1, #0
   133d8:	beq	13418 <__assert_fail@plt+0x2044>
   133dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   133e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   133e4:	tst	r0, #1
   133e8:	bne	1341c <__assert_fail@plt+0x2048>
   133ec:	ldrb	r0, [r1]
   133f0:	cmp	r0, #0
   133f4:	beq	1341c <__assert_fail@plt+0x2048>
   133f8:	add	r1, r1, #1
   133fc:	cmp	r8, r6
   13400:	strbcc	r0, [r2, r8]
   13404:	add	r8, r8, #1
   13408:	ldrb	r0, [r1], #1
   1340c:	cmp	r0, #0
   13410:	bne	133fc <__assert_fail@plt+0x2028>
   13414:	b	1341c <__assert_fail@plt+0x2048>
   13418:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1341c:	cmp	r8, r6
   13420:	movcc	r0, #0
   13424:	strbcc	r0, [r2, r8]
   13428:	b	13384 <__assert_fail@plt+0x1fb0>
   1342c:	mov	r2, #1
   13430:	b	13314 <__assert_fail@plt+0x1f40>
   13434:	mov	r7, #5
   13438:	b	13328 <__assert_fail@plt+0x1f54>
   1343c:	bl	113b0 <abort@plt>
   13440:	mov	r3, r2
   13444:	mov	r2, #0
   13448:	b	1344c <__assert_fail@plt+0x2078>
   1344c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13450:	add	fp, sp, #28
   13454:	sub	sp, sp, #36	; 0x24
   13458:	movw	r8, #29072	; 0x7190
   1345c:	cmp	r3, #0
   13460:	mov	r4, r2
   13464:	str	r2, [sp, #24]
   13468:	mov	r5, r1
   1346c:	mov	r6, r0
   13470:	str	r0, [sp, #20]
   13474:	movt	r8, #2
   13478:	movne	r8, r3
   1347c:	bl	112b4 <__errno_location@plt>
   13480:	str	r0, [sp, #28]
   13484:	cmp	r4, #0
   13488:	add	sl, r8, #8
   1348c:	ldm	r8, {r3, r9}
   13490:	ldr	r7, [r0]
   13494:	ldr	r1, [r8, #40]	; 0x28
   13498:	ldr	r2, [r8, #44]	; 0x2c
   1349c:	mov	r0, #0
   134a0:	orreq	r9, r9, #1
   134a4:	str	r7, [sp, #32]
   134a8:	mov	r7, r5
   134ac:	stm	sp, {r3, r9, sl}
   134b0:	str	r1, [sp, #12]
   134b4:	str	r2, [sp, #16]
   134b8:	mov	r1, #0
   134bc:	mov	r2, r6
   134c0:	mov	r3, r5
   134c4:	bl	123bc <__assert_fail@plt+0xfe8>
   134c8:	add	r4, r0, #1
   134cc:	mov	r5, r0
   134d0:	mov	r0, r4
   134d4:	bl	1454c <__assert_fail@plt+0x3178>
   134d8:	mov	r6, r0
   134dc:	ldr	r0, [r8]
   134e0:	ldr	r2, [r8, #44]	; 0x2c
   134e4:	ldr	r1, [r8, #40]	; 0x28
   134e8:	mov	r3, r7
   134ec:	stm	sp, {r0, r9, sl}
   134f0:	str	r2, [sp, #16]
   134f4:	str	r1, [sp, #12]
   134f8:	mov	r0, r6
   134fc:	mov	r1, r4
   13500:	ldr	r2, [sp, #20]
   13504:	bl	123bc <__assert_fail@plt+0xfe8>
   13508:	ldr	r0, [sp, #24]
   1350c:	ldr	r1, [sp, #32]
   13510:	ldr	r2, [sp, #28]
   13514:	cmp	r0, #0
   13518:	str	r1, [r2]
   1351c:	strne	r5, [r0]
   13520:	mov	r0, r6
   13524:	sub	sp, fp, #28
   13528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1352c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13530:	add	fp, sp, #24
   13534:	movw	r5, #28964	; 0x7124
   13538:	movw	r8, #28960	; 0x7120
   1353c:	movt	r5, #2
   13540:	movt	r8, #2
   13544:	ldr	r0, [r5]
   13548:	ldr	r4, [r8]
   1354c:	cmp	r0, #2
   13550:	blt	1357c <__assert_fail@plt+0x21a8>
   13554:	add	r7, r4, #12
   13558:	mov	r6, #0
   1355c:	ldr	r0, [r7, r6, lsl #3]
   13560:	bl	12160 <__assert_fail@plt+0xd8c>
   13564:	ldr	r1, [r5]
   13568:	add	r2, r6, #2
   1356c:	add	r0, r6, #1
   13570:	mov	r6, r0
   13574:	cmp	r2, r1
   13578:	blt	1355c <__assert_fail@plt+0x2188>
   1357c:	ldr	r0, [r4, #4]
   13580:	movw	r7, #29120	; 0x71c0
   13584:	movt	r7, #2
   13588:	cmp	r0, r7
   1358c:	beq	135a4 <__assert_fail@plt+0x21d0>
   13590:	bl	12160 <__assert_fail@plt+0xd8c>
   13594:	movw	r0, #28968	; 0x7128
   13598:	mov	r6, #256	; 0x100
   1359c:	movt	r0, #2
   135a0:	strd	r6, [r0]
   135a4:	movw	r6, #28968	; 0x7128
   135a8:	movt	r6, #2
   135ac:	cmp	r4, r6
   135b0:	beq	135c0 <__assert_fail@plt+0x21ec>
   135b4:	mov	r0, r4
   135b8:	bl	12160 <__assert_fail@plt+0xd8c>
   135bc:	str	r6, [r8]
   135c0:	mov	r0, #1
   135c4:	str	r0, [r5]
   135c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   135cc:	movw	r3, #29072	; 0x7190
   135d0:	mvn	r2, #0
   135d4:	movt	r3, #2
   135d8:	b	135dc <__assert_fail@plt+0x2208>
   135dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e0:	add	fp, sp, #28
   135e4:	sub	sp, sp, #44	; 0x2c
   135e8:	mov	r7, r3
   135ec:	str	r2, [sp, #36]	; 0x24
   135f0:	str	r1, [sp, #32]
   135f4:	mov	r5, r0
   135f8:	bl	112b4 <__errno_location@plt>
   135fc:	cmp	r5, #0
   13600:	blt	1376c <__assert_fail@plt+0x2398>
   13604:	cmn	r5, #-2147483647	; 0x80000001
   13608:	beq	1376c <__assert_fail@plt+0x2398>
   1360c:	movw	r8, #28964	; 0x7124
   13610:	movw	r4, #28960	; 0x7120
   13614:	str	r0, [sp, #28]
   13618:	ldr	r0, [r0]
   1361c:	movt	r8, #2
   13620:	movt	r4, #2
   13624:	ldr	r1, [r8]
   13628:	ldr	r6, [r4]
   1362c:	str	r0, [sp, #24]
   13630:	cmp	r1, r5
   13634:	ble	13640 <__assert_fail@plt+0x226c>
   13638:	mov	sl, r6
   1363c:	b	136a8 <__assert_fail@plt+0x22d4>
   13640:	movw	r9, #28968	; 0x7128
   13644:	mov	r0, #8
   13648:	add	r2, r5, #1
   1364c:	str	r1, [fp, #-32]	; 0xffffffe0
   13650:	mvn	r3, #-2147483648	; 0x80000000
   13654:	movt	r9, #2
   13658:	str	r0, [sp]
   1365c:	sub	r2, r2, r1
   13660:	sub	r1, fp, #32
   13664:	subs	r0, r6, r9
   13668:	movne	r0, r6
   1366c:	bl	1467c <__assert_fail@plt+0x32a8>
   13670:	cmp	r6, r9
   13674:	mov	sl, r0
   13678:	str	r0, [r4]
   1367c:	ldrdeq	r0, [r9]
   13680:	stmeq	sl, {r0, r1}
   13684:	ldr	r1, [r8]
   13688:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1368c:	add	r0, sl, r1, lsl #3
   13690:	sub	r1, r2, r1
   13694:	lsl	r2, r1, #3
   13698:	mov	r1, #0
   1369c:	bl	112d8 <memset@plt>
   136a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   136a4:	str	r0, [r8]
   136a8:	mov	r9, sl
   136ac:	ldr	r6, [r9, r5, lsl #3]!
   136b0:	ldr	r4, [r9, #4]!
   136b4:	ldm	r7, {r0, r1}
   136b8:	ldr	r2, [r7, #40]	; 0x28
   136bc:	ldr	r3, [r7, #44]	; 0x2c
   136c0:	orr	r8, r1, #1
   136c4:	add	r1, r7, #8
   136c8:	stm	sp, {r0, r8}
   136cc:	add	r0, sp, #8
   136d0:	str	r1, [sp, #20]
   136d4:	stm	r0, {r1, r2, r3}
   136d8:	mov	r0, r4
   136dc:	mov	r1, r6
   136e0:	ldr	r2, [sp, #32]
   136e4:	ldr	r3, [sp, #36]	; 0x24
   136e8:	bl	123bc <__assert_fail@plt+0xfe8>
   136ec:	cmp	r6, r0
   136f0:	bhi	13754 <__assert_fail@plt+0x2380>
   136f4:	add	r6, r0, #1
   136f8:	movw	r0, #29120	; 0x71c0
   136fc:	movt	r0, #2
   13700:	str	r6, [sl, r5, lsl #3]
   13704:	cmp	r4, r0
   13708:	beq	13714 <__assert_fail@plt+0x2340>
   1370c:	mov	r0, r4
   13710:	bl	12160 <__assert_fail@plt+0xd8c>
   13714:	mov	r0, r6
   13718:	bl	1454c <__assert_fail@plt+0x3178>
   1371c:	str	r0, [r9]
   13720:	mov	r4, r0
   13724:	add	r3, sp, #8
   13728:	ldr	r0, [r7]
   1372c:	ldr	r1, [r7, #40]	; 0x28
   13730:	ldr	r2, [r7, #44]	; 0x2c
   13734:	stm	sp, {r0, r8}
   13738:	ldr	r0, [sp, #20]
   1373c:	stm	r3, {r0, r1, r2}
   13740:	mov	r0, r4
   13744:	mov	r1, r6
   13748:	ldr	r2, [sp, #32]
   1374c:	ldr	r3, [sp, #36]	; 0x24
   13750:	bl	123bc <__assert_fail@plt+0xfe8>
   13754:	ldr	r0, [sp, #28]
   13758:	ldr	r1, [sp, #24]
   1375c:	str	r1, [r0]
   13760:	mov	r0, r4
   13764:	sub	sp, fp, #28
   13768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1376c:	bl	113b0 <abort@plt>
   13770:	movw	r3, #29072	; 0x7190
   13774:	movt	r3, #2
   13778:	b	135dc <__assert_fail@plt+0x2208>
   1377c:	movw	r3, #29072	; 0x7190
   13780:	mov	r1, r0
   13784:	mov	r0, #0
   13788:	mvn	r2, #0
   1378c:	movt	r3, #2
   13790:	b	135dc <__assert_fail@plt+0x2208>
   13794:	movw	r3, #29072	; 0x7190
   13798:	mov	r2, r1
   1379c:	mov	r1, r0
   137a0:	mov	r0, #0
   137a4:	movt	r3, #2
   137a8:	b	135dc <__assert_fail@plt+0x2208>
   137ac:	push	{fp, lr}
   137b0:	mov	fp, sp
   137b4:	sub	sp, sp, #48	; 0x30
   137b8:	vmov.i32	q8, #0	; 0x00000000
   137bc:	mov	ip, #32
   137c0:	mov	r3, sp
   137c4:	mov	lr, r2
   137c8:	cmp	r1, #10
   137cc:	add	r2, r3, #16
   137d0:	vst1.64	{d16-d17}, [r3], ip
   137d4:	vst1.64	{d16-d17}, [r3]
   137d8:	vst1.64	{d16-d17}, [r2]
   137dc:	beq	137fc <__assert_fail@plt+0x2428>
   137e0:	str	r1, [sp]
   137e4:	mov	r3, sp
   137e8:	mov	r1, lr
   137ec:	mvn	r2, #0
   137f0:	bl	135dc <__assert_fail@plt+0x2208>
   137f4:	mov	sp, fp
   137f8:	pop	{fp, pc}
   137fc:	bl	113b0 <abort@plt>
   13800:	push	{r4, sl, fp, lr}
   13804:	add	fp, sp, #8
   13808:	sub	sp, sp, #48	; 0x30
   1380c:	mov	ip, r3
   13810:	mov	r3, sp
   13814:	vmov.i32	q8, #0	; 0x00000000
   13818:	mov	lr, #32
   1381c:	cmp	r1, #10
   13820:	add	r4, r3, #16
   13824:	vst1.64	{d16-d17}, [r3], lr
   13828:	vst1.64	{d16-d17}, [r3]
   1382c:	vst1.64	{d16-d17}, [r4]
   13830:	beq	13850 <__assert_fail@plt+0x247c>
   13834:	str	r1, [sp]
   13838:	mov	r1, r2
   1383c:	mov	r3, sp
   13840:	mov	r2, ip
   13844:	bl	135dc <__assert_fail@plt+0x2208>
   13848:	sub	sp, fp, #8
   1384c:	pop	{r4, sl, fp, pc}
   13850:	bl	113b0 <abort@plt>
   13854:	mov	r2, r1
   13858:	mov	r1, r0
   1385c:	mov	r0, #0
   13860:	b	137ac <__assert_fail@plt+0x23d8>
   13864:	mov	r3, r2
   13868:	mov	r2, r1
   1386c:	mov	r1, r0
   13870:	mov	r0, #0
   13874:	b	13800 <__assert_fail@plt+0x242c>
   13878:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1387c:	add	fp, sp, #24
   13880:	sub	sp, sp, #48	; 0x30
   13884:	movw	r8, #29072	; 0x7190
   13888:	mov	lr, r0
   1388c:	mov	r3, sp
   13890:	mov	ip, r1
   13894:	movt	r8, #2
   13898:	mov	r1, r3
   1389c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   138a0:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   138a4:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   138a8:	stm	r1, {r0, r4, r5, r6, r7, r9}
   138ac:	ubfx	r0, r2, #5, #3
   138b0:	and	r2, r2, #31
   138b4:	mov	r4, #1
   138b8:	add	r0, r3, r0, lsl #2
   138bc:	ldr	r1, [r0, #8]
   138c0:	bic	r4, r4, r1, lsr r2
   138c4:	eor	r1, r1, r4, lsl r2
   138c8:	mov	r2, ip
   138cc:	str	r1, [r0, #8]
   138d0:	mov	r0, #0
   138d4:	mov	r1, lr
   138d8:	bl	135dc <__assert_fail@plt+0x2208>
   138dc:	sub	sp, fp, #24
   138e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   138e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138e8:	add	fp, sp, #24
   138ec:	sub	sp, sp, #48	; 0x30
   138f0:	movw	lr, #29072	; 0x7190
   138f4:	mov	ip, r0
   138f8:	mov	r3, sp
   138fc:	movt	lr, #2
   13900:	mov	r2, r3
   13904:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13908:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   1390c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13910:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13914:	ubfx	r0, r1, #5, #3
   13918:	and	r1, r1, #31
   1391c:	mov	r7, #1
   13920:	add	r0, r3, r0, lsl #2
   13924:	ldr	r2, [r0, #8]
   13928:	bic	r7, r7, r2, lsr r1
   1392c:	eor	r1, r2, r7, lsl r1
   13930:	mvn	r2, #0
   13934:	str	r1, [r0, #8]
   13938:	mov	r0, #0
   1393c:	mov	r1, ip
   13940:	bl	135dc <__assert_fail@plt+0x2208>
   13944:	sub	sp, fp, #24
   13948:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1394c:	push	{r4, r5, r6, r7, fp, lr}
   13950:	add	fp, sp, #16
   13954:	sub	sp, sp, #48	; 0x30
   13958:	movw	lr, #29072	; 0x7190
   1395c:	mov	ip, r0
   13960:	mov	r3, sp
   13964:	movt	lr, #2
   13968:	mov	r2, r3
   1396c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13970:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13974:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13978:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1397c:	mov	r1, ip
   13980:	mvn	r2, #0
   13984:	ldr	r0, [sp, #12]
   13988:	orr	r0, r0, #67108864	; 0x4000000
   1398c:	str	r0, [sp, #12]
   13990:	mov	r0, #0
   13994:	bl	135dc <__assert_fail@plt+0x2208>
   13998:	sub	sp, fp, #16
   1399c:	pop	{r4, r5, r6, r7, fp, pc}
   139a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139a4:	add	fp, sp, #24
   139a8:	sub	sp, sp, #48	; 0x30
   139ac:	movw	r8, #29072	; 0x7190
   139b0:	mov	ip, r1
   139b4:	mov	lr, r0
   139b8:	mov	r3, sp
   139bc:	movt	r8, #2
   139c0:	mov	r2, r3
   139c4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   139c8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   139cc:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   139d0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   139d4:	mov	r1, lr
   139d8:	mov	r2, ip
   139dc:	ldr	r0, [sp, #12]
   139e0:	orr	r0, r0, #67108864	; 0x4000000
   139e4:	str	r0, [sp, #12]
   139e8:	mov	r0, #0
   139ec:	bl	135dc <__assert_fail@plt+0x2208>
   139f0:	sub	sp, fp, #24
   139f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   139f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139fc:	add	fp, sp, #24
   13a00:	sub	sp, sp, #96	; 0x60
   13a04:	mov	lr, sp
   13a08:	vmov.i32	q8, #0	; 0x00000000
   13a0c:	mov	ip, r2
   13a10:	cmp	r1, #10
   13a14:	add	r3, lr, #16
   13a18:	mov	r2, lr
   13a1c:	vst1.64	{d16-d17}, [r3]
   13a20:	mov	r3, #28
   13a24:	vst1.64	{d16-d17}, [r2], r3
   13a28:	vst1.32	{d16-d17}, [r2]
   13a2c:	beq	13a6c <__assert_fail@plt+0x2698>
   13a30:	str	r1, [sp, #48]	; 0x30
   13a34:	add	r3, sp, #48	; 0x30
   13a38:	ldm	lr!, {r2, r4, r5, r6, r7}
   13a3c:	add	r1, r3, #4
   13a40:	stmia	r1!, {r2, r4, r5, r6, r7}
   13a44:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13a48:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13a4c:	mvn	r2, #0
   13a50:	ldr	r1, [sp, #60]	; 0x3c
   13a54:	orr	r1, r1, #67108864	; 0x4000000
   13a58:	str	r1, [sp, #60]	; 0x3c
   13a5c:	mov	r1, ip
   13a60:	bl	135dc <__assert_fail@plt+0x2208>
   13a64:	sub	sp, fp, #24
   13a68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a6c:	bl	113b0 <abort@plt>
   13a70:	push	{fp, lr}
   13a74:	mov	fp, sp
   13a78:	sub	sp, sp, #8
   13a7c:	mvn	ip, #0
   13a80:	str	ip, [sp]
   13a84:	bl	13a90 <__assert_fail@plt+0x26bc>
   13a88:	mov	sp, fp
   13a8c:	pop	{fp, pc}
   13a90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a94:	add	fp, sp, #24
   13a98:	sub	sp, sp, #48	; 0x30
   13a9c:	movw	ip, #29072	; 0x7190
   13aa0:	mov	lr, r3
   13aa4:	mov	r3, sp
   13aa8:	cmp	r1, #0
   13aac:	movt	ip, #2
   13ab0:	cmpne	r2, #0
   13ab4:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13ab8:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13abc:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13ac0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13ac4:	mov	r3, #10
   13ac8:	str	r3, [sp]
   13acc:	bne	13ad4 <__assert_fail@plt+0x2700>
   13ad0:	bl	113b0 <abort@plt>
   13ad4:	ldr	ip, [fp, #8]
   13ad8:	str	r2, [sp, #44]	; 0x2c
   13adc:	str	r1, [sp, #40]	; 0x28
   13ae0:	mov	r3, sp
   13ae4:	mov	r1, lr
   13ae8:	mov	r2, ip
   13aec:	bl	135dc <__assert_fail@plt+0x2208>
   13af0:	sub	sp, fp, #24
   13af4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13af8:	push	{fp, lr}
   13afc:	mov	fp, sp
   13b00:	sub	sp, sp, #8
   13b04:	mov	r3, r2
   13b08:	mov	r2, r1
   13b0c:	mov	r1, r0
   13b10:	mvn	r0, #0
   13b14:	str	r0, [sp]
   13b18:	mov	r0, #0
   13b1c:	bl	13a90 <__assert_fail@plt+0x26bc>
   13b20:	mov	sp, fp
   13b24:	pop	{fp, pc}
   13b28:	push	{fp, lr}
   13b2c:	mov	fp, sp
   13b30:	sub	sp, sp, #8
   13b34:	mov	ip, r2
   13b38:	mov	r2, r1
   13b3c:	mov	r1, r0
   13b40:	str	r3, [sp]
   13b44:	mov	r0, #0
   13b48:	mov	r3, ip
   13b4c:	bl	13a90 <__assert_fail@plt+0x26bc>
   13b50:	mov	sp, fp
   13b54:	pop	{fp, pc}
   13b58:	movw	r3, #28976	; 0x7130
   13b5c:	movt	r3, #2
   13b60:	b	135dc <__assert_fail@plt+0x2208>
   13b64:	movw	r3, #28976	; 0x7130
   13b68:	mov	r2, r1
   13b6c:	mov	r1, r0
   13b70:	mov	r0, #0
   13b74:	movt	r3, #2
   13b78:	b	135dc <__assert_fail@plt+0x2208>
   13b7c:	movw	r3, #28976	; 0x7130
   13b80:	mvn	r2, #0
   13b84:	movt	r3, #2
   13b88:	b	135dc <__assert_fail@plt+0x2208>
   13b8c:	movw	r3, #28976	; 0x7130
   13b90:	mov	r1, r0
   13b94:	mov	r0, #0
   13b98:	mvn	r2, #0
   13b9c:	movt	r3, #2
   13ba0:	b	135dc <__assert_fail@plt+0x2208>
   13ba4:	push	{r4, r5, fp, lr}
   13ba8:	add	fp, sp, #8
   13bac:	mov	r5, r0
   13bb0:	mov	r4, r1
   13bb4:	mov	r0, #0
   13bb8:	mov	r2, #5
   13bbc:	mov	r1, r5
   13bc0:	bl	11188 <dcgettext@plt>
   13bc4:	cmp	r0, r5
   13bc8:	popne	{r4, r5, fp, pc}
   13bcc:	bl	15850 <__assert_fail@plt+0x447c>
   13bd0:	ldrb	r1, [r0]
   13bd4:	and	r1, r1, #223	; 0xdf
   13bd8:	cmp	r1, #71	; 0x47
   13bdc:	beq	13c44 <__assert_fail@plt+0x2870>
   13be0:	cmp	r1, #85	; 0x55
   13be4:	bne	13c68 <__assert_fail@plt+0x2894>
   13be8:	ldrb	r1, [r0, #1]
   13bec:	and	r1, r1, #223	; 0xdf
   13bf0:	cmp	r1, #84	; 0x54
   13bf4:	bne	13c68 <__assert_fail@plt+0x2894>
   13bf8:	ldrb	r1, [r0, #2]
   13bfc:	and	r1, r1, #223	; 0xdf
   13c00:	cmp	r1, #70	; 0x46
   13c04:	ldrbeq	r1, [r0, #3]
   13c08:	cmpeq	r1, #45	; 0x2d
   13c0c:	bne	13c68 <__assert_fail@plt+0x2894>
   13c10:	ldrb	r1, [r0, #4]
   13c14:	cmp	r1, #56	; 0x38
   13c18:	ldrbeq	r0, [r0, #5]
   13c1c:	cmpeq	r0, #0
   13c20:	bne	13c68 <__assert_fail@plt+0x2894>
   13c24:	ldrb	r1, [r5]
   13c28:	movw	r2, #25760	; 0x64a0
   13c2c:	movw	r0, #25764	; 0x64a4
   13c30:	movt	r2, #1
   13c34:	movt	r0, #1
   13c38:	cmp	r1, #96	; 0x60
   13c3c:	moveq	r0, r2
   13c40:	pop	{r4, r5, fp, pc}
   13c44:	ldrb	r1, [r0, #1]
   13c48:	and	r1, r1, #223	; 0xdf
   13c4c:	cmp	r1, #66	; 0x42
   13c50:	bne	13c68 <__assert_fail@plt+0x2894>
   13c54:	ldrb	r1, [r0, #2]
   13c58:	cmp	r1, #49	; 0x31
   13c5c:	ldrbeq	r1, [r0, #3]
   13c60:	cmpeq	r1, #56	; 0x38
   13c64:	beq	13c84 <__assert_fail@plt+0x28b0>
   13c68:	movw	r1, #25754	; 0x649a
   13c6c:	movw	r0, #25758	; 0x649e
   13c70:	cmp	r4, #9
   13c74:	movt	r1, #1
   13c78:	movt	r0, #1
   13c7c:	moveq	r0, r1
   13c80:	pop	{r4, r5, fp, pc}
   13c84:	ldrb	r1, [r0, #4]
   13c88:	cmp	r1, #48	; 0x30
   13c8c:	ldrbeq	r1, [r0, #5]
   13c90:	cmpeq	r1, #51	; 0x33
   13c94:	bne	13c68 <__assert_fail@plt+0x2894>
   13c98:	ldrb	r1, [r0, #6]
   13c9c:	cmp	r1, #48	; 0x30
   13ca0:	ldrbeq	r0, [r0, #7]
   13ca4:	cmpeq	r0, #0
   13ca8:	bne	13c68 <__assert_fail@plt+0x2894>
   13cac:	ldrb	r1, [r5]
   13cb0:	movw	r2, #25768	; 0x64a8
   13cb4:	movw	r0, #25772	; 0x64ac
   13cb8:	movt	r2, #1
   13cbc:	movt	r0, #1
   13cc0:	b	13c38 <__assert_fail@plt+0x2864>
   13cc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cc8:	add	fp, sp, #28
   13ccc:	sub	sp, sp, #12
   13cd0:	ldr	sl, [fp, #8]
   13cd4:	mov	r9, r3
   13cd8:	mov	r4, r2
   13cdc:	mov	r8, r1
   13ce0:	mov	r7, r0
   13ce4:	cmp	r2, #0
   13ce8:	beq	13d00 <__assert_fail@plt+0x292c>
   13cec:	mov	r0, r7
   13cf0:	mov	r1, #58	; 0x3a
   13cf4:	bl	112a8 <strchr@plt>
   13cf8:	mov	r6, r0
   13cfc:	b	13d04 <__assert_fail@plt+0x2930>
   13d00:	mov	r6, #0
   13d04:	mov	r0, r7
   13d08:	mov	r1, r6
   13d0c:	mov	r2, r8
   13d10:	mov	r3, r4
   13d14:	stm	sp, {r9, sl}
   13d18:	bl	13d80 <__assert_fail@plt+0x29ac>
   13d1c:	mov	r5, r0
   13d20:	cmp	r4, #0
   13d24:	beq	13d74 <__assert_fail@plt+0x29a0>
   13d28:	cmp	r6, #0
   13d2c:	bne	13d74 <__assert_fail@plt+0x29a0>
   13d30:	cmp	r5, #0
   13d34:	beq	13d74 <__assert_fail@plt+0x29a0>
   13d38:	mov	r0, r7
   13d3c:	mov	r1, #46	; 0x2e
   13d40:	bl	112a8 <strchr@plt>
   13d44:	cmp	r0, #0
   13d48:	beq	13d74 <__assert_fail@plt+0x29a0>
   13d4c:	mov	r1, r0
   13d50:	mov	r0, r7
   13d54:	mov	r2, r8
   13d58:	mov	r3, r4
   13d5c:	stm	sp, {r9, sl}
   13d60:	bl	13d80 <__assert_fail@plt+0x29ac>
   13d64:	cmp	r0, #0
   13d68:	movne	r0, r5
   13d6c:	sub	sp, fp, #28
   13d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d74:	mov	r0, r5
   13d78:	sub	sp, fp, #28
   13d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d84:	add	fp, sp, #28
   13d88:	sub	sp, sp, #36	; 0x24
   13d8c:	mov	sl, r3
   13d90:	ldr	r3, [r2]
   13d94:	mov	r9, r2
   13d98:	mov	r4, r1
   13d9c:	ldr	r2, [fp, #8]
   13da0:	ldr	r8, [fp, #12]
   13da4:	cmp	sl, #0
   13da8:	ldrne	r1, [sl]
   13dac:	str	r3, [sp, #4]
   13db0:	mvneq	r1, #0
   13db4:	cmp	r2, #0
   13db8:	str	r1, [sp, #8]
   13dbc:	movne	r1, #0
   13dc0:	strne	r1, [r2]
   13dc4:	cmp	r8, #0
   13dc8:	movne	r1, #0
   13dcc:	strne	r1, [r8]
   13dd0:	cmp	r4, #0
   13dd4:	beq	13e08 <__assert_fail@plt+0x2a34>
   13dd8:	subs	r5, r4, r0
   13ddc:	beq	13e98 <__assert_fail@plt+0x2ac4>
   13de0:	add	r1, r5, #1
   13de4:	bl	148a8 <__assert_fail@plt+0x34d4>
   13de8:	mov	r7, r0
   13dec:	mov	r0, #0
   13df0:	mov	r6, r4
   13df4:	strb	r0, [r7, r5]
   13df8:	ldrb	r0, [r6, #1]!
   13dfc:	cmp	r0, #0
   13e00:	moveq	r6, r0
   13e04:	b	13e20 <__assert_fail@plt+0x2a4c>
   13e08:	ldrb	r1, [r0]
   13e0c:	cmp	r1, #0
   13e10:	beq	13f14 <__assert_fail@plt+0x2b40>
   13e14:	bl	1492c <__assert_fail@plt+0x3558>
   13e18:	mov	r7, r0
   13e1c:	mov	r6, #0
   13e20:	ldrb	r0, [r7]
   13e24:	cmp	r0, #43	; 0x2b
   13e28:	beq	13e78 <__assert_fail@plt+0x2aa4>
   13e2c:	mov	r0, r7
   13e30:	bl	11110 <getpwnam@plt>
   13e34:	cmp	r0, #0
   13e38:	beq	13e78 <__assert_fail@plt+0x2aa4>
   13e3c:	ldr	r1, [r0, #8]
   13e40:	mov	r5, #0
   13e44:	cmp	r4, #0
   13e48:	str	r1, [sp, #4]
   13e4c:	beq	13e90 <__assert_fail@plt+0x2abc>
   13e50:	cmp	r6, #0
   13e54:	bne	13e90 <__assert_fail@plt+0x2abc>
   13e58:	ldr	r4, [r0, #12]
   13e5c:	mov	r0, r4
   13e60:	bl	113bc <getgrgid@plt>
   13e64:	cmp	r0, #0
   13e68:	str	r4, [sp, #8]
   13e6c:	beq	13f20 <__assert_fail@plt+0x2b4c>
   13e70:	ldr	r0, [r0]
   13e74:	b	13f30 <__assert_fail@plt+0x2b5c>
   13e78:	cmp	r4, #0
   13e7c:	beq	13eb8 <__assert_fail@plt+0x2ae4>
   13e80:	cmp	r6, #0
   13e84:	bne	13eb8 <__assert_fail@plt+0x2ae4>
   13e88:	movw	r5, #25887	; 0x651f
   13e8c:	movt	r5, #1
   13e90:	mov	r4, #0
   13e94:	b	13f3c <__assert_fail@plt+0x2b68>
   13e98:	ldrb	r0, [r4, #1]!
   13e9c:	mov	r7, #0
   13ea0:	mov	r5, #0
   13ea4:	cmp	r0, #0
   13ea8:	moveq	r4, r0
   13eac:	mov	r6, r4
   13eb0:	mov	r4, #0
   13eb4:	b	13f40 <__assert_fail@plt+0x2b6c>
   13eb8:	movw	r0, #24260	; 0x5ec4
   13ebc:	add	r3, sp, #12
   13ec0:	mov	r1, #0
   13ec4:	mov	r2, #10
   13ec8:	mov	r4, #0
   13ecc:	movt	r0, #1
   13ed0:	str	r0, [sp]
   13ed4:	mov	r0, r7
   13ed8:	bl	149e4 <__assert_fail@plt+0x3610>
   13edc:	ldr	r1, [sp, #12]
   13ee0:	clz	r0, r0
   13ee4:	movw	r5, #25860	; 0x6504
   13ee8:	lsr	r0, r0, #5
   13eec:	movt	r5, #1
   13ef0:	add	r2, r1, #1
   13ef4:	cmn	r1, #1
   13ef8:	movwne	r2, #1
   13efc:	ands	r0, r0, r2
   13f00:	ldr	r0, [sp, #4]
   13f04:	movwne	r5, #0
   13f08:	movne	r0, r1
   13f0c:	str	r0, [sp, #4]
   13f10:	b	13f3c <__assert_fail@plt+0x2b68>
   13f14:	mov	r4, #0
   13f18:	mov	r7, #0
   13f1c:	b	13fe8 <__assert_fail@plt+0x2c14>
   13f20:	add	r2, sp, #12
   13f24:	mov	r0, r4
   13f28:	mov	r1, #0
   13f2c:	bl	157f4 <__assert_fail@plt+0x4420>
   13f30:	bl	1492c <__assert_fail@plt+0x3558>
   13f34:	mov	r4, r0
   13f38:	bl	110ec <endgrent@plt>
   13f3c:	bl	11344 <endpwent@plt>
   13f40:	cmp	r6, #0
   13f44:	beq	13fdc <__assert_fail@plt+0x2c08>
   13f48:	cmp	r5, #0
   13f4c:	bne	13fdc <__assert_fail@plt+0x2c08>
   13f50:	ldrb	r0, [r6]
   13f54:	cmp	r0, #43	; 0x2b
   13f58:	beq	13f78 <__assert_fail@plt+0x2ba4>
   13f5c:	mov	r0, r6
   13f60:	bl	113c8 <getgrnam@plt>
   13f64:	cmp	r0, #0
   13f68:	beq	13f78 <__assert_fail@plt+0x2ba4>
   13f6c:	ldr	r0, [r0, #8]
   13f70:	mov	r5, #0
   13f74:	b	13fc8 <__assert_fail@plt+0x2bf4>
   13f78:	movw	r0, #24260	; 0x5ec4
   13f7c:	add	r3, sp, #12
   13f80:	mov	r1, #0
   13f84:	mov	r2, #10
   13f88:	movt	r0, #1
   13f8c:	str	r0, [sp]
   13f90:	mov	r0, r6
   13f94:	bl	149e4 <__assert_fail@plt+0x3610>
   13f98:	ldr	r1, [sp, #12]
   13f9c:	clz	r0, r0
   13fa0:	movw	r5, #25873	; 0x6511
   13fa4:	lsr	r0, r0, #5
   13fa8:	movt	r5, #1
   13fac:	add	r2, r1, #1
   13fb0:	cmn	r1, #1
   13fb4:	movwne	r2, #1
   13fb8:	ands	r0, r0, r2
   13fbc:	ldr	r0, [sp, #8]
   13fc0:	movwne	r5, #0
   13fc4:	movne	r0, r1
   13fc8:	str	r0, [sp, #8]
   13fcc:	bl	110ec <endgrent@plt>
   13fd0:	mov	r0, r6
   13fd4:	bl	1492c <__assert_fail@plt+0x3558>
   13fd8:	mov	r4, r0
   13fdc:	mov	r6, #0
   13fe0:	cmp	r5, #0
   13fe4:	bne	1402c <__assert_fail@plt+0x2c58>
   13fe8:	ldr	r0, [sp, #4]
   13fec:	cmp	sl, #0
   13ff0:	mov	r6, #1
   13ff4:	str	r0, [r9]
   13ff8:	ldrne	r0, [sp, #8]
   13ffc:	strne	r0, [sl]
   14000:	ldr	r0, [fp, #8]
   14004:	cmp	r0, #0
   14008:	strne	r7, [r0]
   1400c:	movne	r7, #0
   14010:	cmp	r8, #0
   14014:	beq	14028 <__assert_fail@plt+0x2c54>
   14018:	str	r4, [r8]
   1401c:	mov	r5, #0
   14020:	mov	r4, #0
   14024:	b	1402c <__assert_fail@plt+0x2c58>
   14028:	mov	r5, #0
   1402c:	mov	r0, r7
   14030:	bl	12160 <__assert_fail@plt+0xd8c>
   14034:	mov	r0, r4
   14038:	bl	12160 <__assert_fail@plt+0xd8c>
   1403c:	mov	r0, #0
   14040:	cmp	r6, #0
   14044:	bne	14058 <__assert_fail@plt+0x2c84>
   14048:	mov	r0, #0
   1404c:	mov	r1, r5
   14050:	mov	r2, #5
   14054:	bl	11188 <dcgettext@plt>
   14058:	sub	sp, fp, #28
   1405c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14060:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14064:	add	fp, sp, #24
   14068:	sub	sp, sp, #32
   1406c:	ldr	r6, [fp, #12]
   14070:	ldr	r7, [fp, #8]
   14074:	mov	r4, r2
   14078:	mov	r8, r0
   1407c:	cmp	r1, #0
   14080:	beq	140a8 <__assert_fail@plt+0x2cd4>
   14084:	movw	r2, #25900	; 0x652c
   14088:	mov	r5, r1
   1408c:	str	r3, [sp, #4]
   14090:	str	r4, [sp]
   14094:	mov	r0, r8
   14098:	mov	r1, #1
   1409c:	movt	r2, #1
   140a0:	mov	r3, r5
   140a4:	b	140c0 <__assert_fail@plt+0x2cec>
   140a8:	movw	r2, #25912	; 0x6538
   140ac:	str	r3, [sp]
   140b0:	mov	r0, r8
   140b4:	mov	r1, #1
   140b8:	mov	r3, r4
   140bc:	movt	r2, #1
   140c0:	bl	11308 <__fprintf_chk@plt>
   140c4:	movw	r1, #25919	; 0x653f
   140c8:	mov	r0, #0
   140cc:	mov	r2, #5
   140d0:	movt	r1, #1
   140d4:	bl	11188 <dcgettext@plt>
   140d8:	movw	r2, #26637	; 0x680d
   140dc:	mov	r3, r0
   140e0:	movw	r0, #2022	; 0x7e6
   140e4:	mov	r1, #1
   140e8:	str	r0, [sp]
   140ec:	movt	r2, #1
   140f0:	mov	r0, r8
   140f4:	bl	11308 <__fprintf_chk@plt>
   140f8:	movw	r4, #24259	; 0x5ec3
   140fc:	mov	r1, r8
   14100:	movt	r4, #1
   14104:	mov	r0, r4
   14108:	bl	110f8 <fputs_unlocked@plt>
   1410c:	movw	r1, #25923	; 0x6543
   14110:	mov	r0, #0
   14114:	mov	r2, #5
   14118:	movt	r1, #1
   1411c:	bl	11188 <dcgettext@plt>
   14120:	movw	r3, #26094	; 0x65ee
   14124:	mov	r2, r0
   14128:	mov	r0, r8
   1412c:	mov	r1, #1
   14130:	movt	r3, #1
   14134:	bl	11308 <__fprintf_chk@plt>
   14138:	mov	r0, r4
   1413c:	mov	r1, r8
   14140:	bl	110f8 <fputs_unlocked@plt>
   14144:	cmp	r6, #9
   14148:	bhi	141ac <__assert_fail@plt+0x2dd8>
   1414c:	add	r0, pc, #0
   14150:	ldr	pc, [r0, r6, lsl #2]
   14154:	andeq	r4, r1, r4, lsl #7
   14158:	andeq	r4, r1, ip, ror r1
   1415c:			; <UNDEFINED> instruction: 0x000141b8
   14160:	andeq	r4, r1, r0, ror #3
   14164:	andeq	r4, r1, r8, lsl #4
   14168:	andeq	r4, r1, r0, lsr r2
   1416c:	andeq	r4, r1, r8, asr r2
   14170:	muleq	r1, r0, r2
   14174:	andeq	r4, r1, r0, lsr r3
   14178:	ldrdeq	r4, [r1], -r8
   1417c:	movw	r1, #26128	; 0x6610
   14180:	mov	r0, #0
   14184:	mov	r2, #5
   14188:	movt	r1, #1
   1418c:	bl	11188 <dcgettext@plt>
   14190:	ldr	r3, [r7]
   14194:	mov	r2, r0
   14198:	mov	r0, r8
   1419c:	mov	r1, #1
   141a0:	sub	sp, fp, #24
   141a4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   141a8:	b	11308 <__fprintf_chk@plt>
   141ac:	movw	r1, #26447	; 0x674f
   141b0:	movt	r1, #1
   141b4:	b	142e0 <__assert_fail@plt+0x2f0c>
   141b8:	movw	r1, #26144	; 0x6620
   141bc:	mov	r0, #0
   141c0:	mov	r2, #5
   141c4:	movt	r1, #1
   141c8:	bl	11188 <dcgettext@plt>
   141cc:	mov	r2, r0
   141d0:	ldr	r3, [r7]
   141d4:	ldr	r0, [r7, #4]
   141d8:	str	r0, [sp]
   141dc:	b	142cc <__assert_fail@plt+0x2ef8>
   141e0:	movw	r1, #26167	; 0x6637
   141e4:	mov	r0, #0
   141e8:	mov	r2, #5
   141ec:	movt	r1, #1
   141f0:	bl	11188 <dcgettext@plt>
   141f4:	ldr	r3, [r7]
   141f8:	mov	r2, r0
   141fc:	ldmib	r7, {r0, r1}
   14200:	stm	sp, {r0, r1}
   14204:	b	142cc <__assert_fail@plt+0x2ef8>
   14208:	movw	r1, #26195	; 0x6653
   1420c:	mov	r0, #0
   14210:	mov	r2, #5
   14214:	movt	r1, #1
   14218:	bl	11188 <dcgettext@plt>
   1421c:	ldr	r3, [r7]
   14220:	mov	r2, r0
   14224:	ldmib	r7, {r0, r1, r7}
   14228:	stm	sp, {r0, r1, r7}
   1422c:	b	142cc <__assert_fail@plt+0x2ef8>
   14230:	movw	r1, #26227	; 0x6673
   14234:	mov	r0, #0
   14238:	mov	r2, #5
   1423c:	movt	r1, #1
   14240:	bl	11188 <dcgettext@plt>
   14244:	ldr	r3, [r7]
   14248:	mov	r2, r0
   1424c:	ldmib	r7, {r0, r1, r6, r7}
   14250:	stm	sp, {r0, r1, r6, r7}
   14254:	b	142cc <__assert_fail@plt+0x2ef8>
   14258:	movw	r1, #26263	; 0x6697
   1425c:	mov	r0, #0
   14260:	mov	r2, #5
   14264:	movt	r1, #1
   14268:	bl	11188 <dcgettext@plt>
   1426c:	ldr	r3, [r7]
   14270:	mov	r2, r0
   14274:	ldmib	r7, {r0, r1, r6}
   14278:	ldr	r5, [r7, #16]
   1427c:	ldr	r7, [r7, #20]
   14280:	stm	sp, {r0, r1, r6}
   14284:	str	r5, [sp, #12]
   14288:	str	r7, [sp, #16]
   1428c:	b	142cc <__assert_fail@plt+0x2ef8>
   14290:	movw	r1, #26303	; 0x66bf
   14294:	mov	r0, #0
   14298:	mov	r2, #5
   1429c:	movt	r1, #1
   142a0:	bl	11188 <dcgettext@plt>
   142a4:	ldr	r3, [r7]
   142a8:	mov	r2, r0
   142ac:	ldmib	r7, {r0, r1, r6}
   142b0:	ldr	r5, [r7, #16]
   142b4:	ldr	r4, [r7, #20]
   142b8:	ldr	r7, [r7, #24]
   142bc:	stm	sp, {r0, r1, r6}
   142c0:	str	r5, [sp, #12]
   142c4:	str	r4, [sp, #16]
   142c8:	str	r7, [sp, #20]
   142cc:	mov	r0, r8
   142d0:	mov	r1, #1
   142d4:	b	14380 <__assert_fail@plt+0x2fac>
   142d8:	movw	r1, #26395	; 0x671b
   142dc:	movt	r1, #1
   142e0:	mov	r0, #0
   142e4:	mov	r2, #5
   142e8:	bl	11188 <dcgettext@plt>
   142ec:	mov	ip, r0
   142f0:	ldr	r3, [r7]
   142f4:	ldr	r0, [r7, #4]
   142f8:	ldr	r1, [r7, #8]
   142fc:	ldr	r6, [r7, #12]
   14300:	ldr	r5, [r7, #16]
   14304:	ldr	r4, [r7, #20]
   14308:	ldr	r2, [r7, #24]
   1430c:	ldr	lr, [r7, #28]
   14310:	ldr	r7, [r7, #32]
   14314:	stm	sp, {r0, r1, r6}
   14318:	str	r5, [sp, #12]
   1431c:	str	r4, [sp, #16]
   14320:	str	r2, [sp, #20]
   14324:	str	lr, [sp, #24]
   14328:	str	r7, [sp, #28]
   1432c:	b	14374 <__assert_fail@plt+0x2fa0>
   14330:	movw	r1, #26347	; 0x66eb
   14334:	mov	r0, #0
   14338:	mov	r2, #5
   1433c:	movt	r1, #1
   14340:	bl	11188 <dcgettext@plt>
   14344:	mov	ip, r0
   14348:	ldr	r3, [r7]
   1434c:	ldmib	r7, {r0, r1, r6}
   14350:	ldr	r5, [r7, #16]
   14354:	ldr	r4, [r7, #20]
   14358:	ldr	r2, [r7, #24]
   1435c:	ldr	r7, [r7, #28]
   14360:	stm	sp, {r0, r1, r6}
   14364:	str	r5, [sp, #12]
   14368:	str	r4, [sp, #16]
   1436c:	str	r2, [sp, #20]
   14370:	str	r7, [sp, #24]
   14374:	mov	r0, r8
   14378:	mov	r1, #1
   1437c:	mov	r2, ip
   14380:	bl	11308 <__fprintf_chk@plt>
   14384:	sub	sp, fp, #24
   14388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1438c:	push	{r4, sl, fp, lr}
   14390:	add	fp, sp, #8
   14394:	sub	sp, sp, #8
   14398:	ldr	ip, [fp, #8]
   1439c:	mov	lr, #0
   143a0:	ldr	r4, [ip, lr, lsl #2]
   143a4:	add	lr, lr, #1
   143a8:	cmp	r4, #0
   143ac:	bne	143a0 <__assert_fail@plt+0x2fcc>
   143b0:	sub	r4, lr, #1
   143b4:	str	ip, [sp]
   143b8:	str	r4, [sp, #4]
   143bc:	bl	14060 <__assert_fail@plt+0x2c8c>
   143c0:	sub	sp, fp, #8
   143c4:	pop	{r4, sl, fp, pc}
   143c8:	push	{r4, r5, fp, lr}
   143cc:	add	fp, sp, #8
   143d0:	sub	sp, sp, #48	; 0x30
   143d4:	ldr	r4, [fp, #8]
   143d8:	mov	ip, #0
   143dc:	add	lr, sp, #8
   143e0:	ldr	r5, [r4]
   143e4:	cmp	r5, #0
   143e8:	str	r5, [lr, ip, lsl #2]
   143ec:	beq	14400 <__assert_fail@plt+0x302c>
   143f0:	add	ip, ip, #1
   143f4:	add	r4, r4, #4
   143f8:	cmp	ip, #10
   143fc:	bcc	143e0 <__assert_fail@plt+0x300c>
   14400:	str	lr, [sp]
   14404:	str	ip, [sp, #4]
   14408:	bl	14060 <__assert_fail@plt+0x2c8c>
   1440c:	sub	sp, fp, #8
   14410:	pop	{r4, r5, fp, pc}
   14414:	push	{fp, lr}
   14418:	mov	fp, sp
   1441c:	sub	sp, sp, #8
   14420:	add	ip, fp, #8
   14424:	str	ip, [sp, #4]
   14428:	str	ip, [sp]
   1442c:	bl	143c8 <__assert_fail@plt+0x2ff4>
   14430:	mov	sp, fp
   14434:	pop	{fp, pc}
   14438:	push	{fp, lr}
   1443c:	mov	fp, sp
   14440:	movw	r0, #29044	; 0x7174
   14444:	movt	r0, #2
   14448:	ldr	r1, [r0]
   1444c:	movw	r0, #24259	; 0x5ec3
   14450:	movt	r0, #1
   14454:	bl	110f8 <fputs_unlocked@plt>
   14458:	movw	r1, #26507	; 0x678b
   1445c:	mov	r0, #0
   14460:	mov	r2, #5
   14464:	movt	r1, #1
   14468:	bl	11188 <dcgettext@plt>
   1446c:	movw	r2, #26527	; 0x679f
   14470:	mov	r1, r0
   14474:	mov	r0, #1
   14478:	movt	r2, #1
   1447c:	bl	112e4 <__printf_chk@plt>
   14480:	movw	r1, #26549	; 0x67b5
   14484:	mov	r0, #0
   14488:	mov	r2, #5
   1448c:	movt	r1, #1
   14490:	bl	11188 <dcgettext@plt>
   14494:	movw	r2, #24677	; 0x6065
   14498:	movw	r3, #25156	; 0x6244
   1449c:	mov	r1, r0
   144a0:	mov	r0, #1
   144a4:	movt	r2, #1
   144a8:	movt	r3, #1
   144ac:	bl	112e4 <__printf_chk@plt>
   144b0:	movw	r1, #26569	; 0x67c9
   144b4:	mov	r0, #0
   144b8:	mov	r2, #5
   144bc:	movt	r1, #1
   144c0:	bl	11188 <dcgettext@plt>
   144c4:	movw	r2, #26608	; 0x67f0
   144c8:	mov	r1, r0
   144cc:	mov	r0, #1
   144d0:	movt	r2, #1
   144d4:	pop	{fp, lr}
   144d8:	b	112e4 <__printf_chk@plt>
   144dc:	b	144e0 <__assert_fail@plt+0x310c>
   144e0:	push	{r4, r5, r6, sl, fp, lr}
   144e4:	add	fp, sp, #16
   144e8:	mov	r4, r2
   144ec:	mov	r5, r1
   144f0:	mov	r6, r0
   144f4:	bl	15af8 <__assert_fail@plt+0x4724>
   144f8:	cmp	r0, #0
   144fc:	popne	{r4, r5, r6, sl, fp, pc}
   14500:	cmp	r6, #0
   14504:	beq	14518 <__assert_fail@plt+0x3144>
   14508:	cmp	r5, #0
   1450c:	cmpne	r4, #0
   14510:	bne	14518 <__assert_fail@plt+0x3144>
   14514:	pop	{r4, r5, r6, sl, fp, pc}
   14518:	bl	1496c <__assert_fail@plt+0x3598>
   1451c:	push	{fp, lr}
   14520:	mov	fp, sp
   14524:	bl	15558 <__assert_fail@plt+0x4184>
   14528:	cmp	r0, #0
   1452c:	popne	{fp, pc}
   14530:	bl	1496c <__assert_fail@plt+0x3598>
   14534:	push	{fp, lr}
   14538:	mov	fp, sp
   1453c:	bl	15558 <__assert_fail@plt+0x4184>
   14540:	cmp	r0, #0
   14544:	popne	{fp, pc}
   14548:	bl	1496c <__assert_fail@plt+0x3598>
   1454c:	push	{fp, lr}
   14550:	mov	fp, sp
   14554:	bl	15558 <__assert_fail@plt+0x4184>
   14558:	cmp	r0, #0
   1455c:	popne	{fp, pc}
   14560:	bl	1496c <__assert_fail@plt+0x3598>
   14564:	push	{r4, r5, fp, lr}
   14568:	add	fp, sp, #8
   1456c:	mov	r4, r1
   14570:	mov	r5, r0
   14574:	bl	15588 <__assert_fail@plt+0x41b4>
   14578:	cmp	r0, #0
   1457c:	popne	{r4, r5, fp, pc}
   14580:	cmp	r5, #0
   14584:	beq	14594 <__assert_fail@plt+0x31c0>
   14588:	cmp	r4, #0
   1458c:	bne	14594 <__assert_fail@plt+0x31c0>
   14590:	pop	{r4, r5, fp, pc}
   14594:	bl	1496c <__assert_fail@plt+0x3598>
   14598:	push	{fp, lr}
   1459c:	mov	fp, sp
   145a0:	cmp	r1, #0
   145a4:	orreq	r1, r1, #1
   145a8:	bl	15588 <__assert_fail@plt+0x41b4>
   145ac:	cmp	r0, #0
   145b0:	popne	{fp, pc}
   145b4:	bl	1496c <__assert_fail@plt+0x3598>
   145b8:	push	{fp, lr}
   145bc:	mov	fp, sp
   145c0:	clz	r3, r2
   145c4:	lsr	ip, r3, #5
   145c8:	clz	r3, r1
   145cc:	lsr	r3, r3, #5
   145d0:	orrs	r3, r3, ip
   145d4:	movwne	r1, #1
   145d8:	movwne	r2, #1
   145dc:	bl	15af8 <__assert_fail@plt+0x4724>
   145e0:	cmp	r0, #0
   145e4:	popne	{fp, pc}
   145e8:	bl	1496c <__assert_fail@plt+0x3598>
   145ec:	push	{fp, lr}
   145f0:	mov	fp, sp
   145f4:	mov	r2, r1
   145f8:	mov	r1, r0
   145fc:	mov	r0, #0
   14600:	bl	15af8 <__assert_fail@plt+0x4724>
   14604:	cmp	r0, #0
   14608:	popne	{fp, pc}
   1460c:	bl	1496c <__assert_fail@plt+0x3598>
   14610:	mov	r2, r1
   14614:	mov	r1, r0
   14618:	mov	r0, #0
   1461c:	b	145b8 <__assert_fail@plt+0x31e4>
   14620:	mov	r2, #1
   14624:	b	14628 <__assert_fail@plt+0x3254>
   14628:	push	{r4, r5, fp, lr}
   1462c:	add	fp, sp, #8
   14630:	ldr	r5, [r1]
   14634:	mov	r4, r1
   14638:	cmp	r0, #0
   1463c:	beq	14654 <__assert_fail@plt+0x3280>
   14640:	mov	r1, #1
   14644:	add	r1, r1, r5, lsr #1
   14648:	adds	r5, r5, r1
   1464c:	bcc	1466c <__assert_fail@plt+0x3298>
   14650:	bl	1496c <__assert_fail@plt+0x3598>
   14654:	cmp	r5, #0
   14658:	bne	1466c <__assert_fail@plt+0x3298>
   1465c:	mov	r1, #64	; 0x40
   14660:	cmp	r2, #64	; 0x40
   14664:	udiv	r5, r1, r2
   14668:	addhi	r5, r5, #1
   1466c:	mov	r1, r5
   14670:	bl	144e0 <__assert_fail@plt+0x310c>
   14674:	str	r5, [r4]
   14678:	pop	{r4, r5, fp, pc}
   1467c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14680:	add	fp, sp, #24
   14684:	ldr	r6, [r1]
   14688:	mov	r8, r1
   1468c:	ldr	r4, [fp, #8]
   14690:	add	r1, r6, r6, asr #1
   14694:	cmp	r1, r6
   14698:	mvnvs	r1, #-2147483648	; 0x80000000
   1469c:	cmp	r1, r3
   146a0:	mov	r5, r1
   146a4:	movgt	r5, r3
   146a8:	cmn	r3, #1
   146ac:	movle	r5, r1
   146b0:	cmn	r4, #1
   146b4:	ble	146d4 <__assert_fail@plt+0x3300>
   146b8:	cmp	r4, #0
   146bc:	beq	14728 <__assert_fail@plt+0x3354>
   146c0:	cmn	r5, #1
   146c4:	ble	146fc <__assert_fail@plt+0x3328>
   146c8:	mvn	r7, #-2147483648	; 0x80000000
   146cc:	udiv	r1, r7, r4
   146d0:	b	146f0 <__assert_fail@plt+0x331c>
   146d4:	cmn	r5, #1
   146d8:	ble	14718 <__assert_fail@plt+0x3344>
   146dc:	cmn	r4, #1
   146e0:	beq	14728 <__assert_fail@plt+0x3354>
   146e4:	mov	r1, #-2147483648	; 0x80000000
   146e8:	mvn	r7, #-2147483648	; 0x80000000
   146ec:	sdiv	r1, r1, r4
   146f0:	cmp	r1, r5
   146f4:	bge	14728 <__assert_fail@plt+0x3354>
   146f8:	b	14738 <__assert_fail@plt+0x3364>
   146fc:	beq	14728 <__assert_fail@plt+0x3354>
   14700:	mov	r1, #-2147483648	; 0x80000000
   14704:	mvn	r7, #-2147483648	; 0x80000000
   14708:	sdiv	r1, r1, r5
   1470c:	cmp	r1, r4
   14710:	bge	14728 <__assert_fail@plt+0x3354>
   14714:	b	14738 <__assert_fail@plt+0x3364>
   14718:	mvn	r7, #-2147483648	; 0x80000000
   1471c:	sdiv	r1, r7, r4
   14720:	cmp	r5, r1
   14724:	blt	14738 <__assert_fail@plt+0x3364>
   14728:	mul	r1, r5, r4
   1472c:	mov	r7, #64	; 0x40
   14730:	cmp	r1, #63	; 0x3f
   14734:	bgt	14740 <__assert_fail@plt+0x336c>
   14738:	sdiv	r5, r7, r4
   1473c:	mul	r1, r5, r4
   14740:	cmp	r0, #0
   14744:	moveq	r7, #0
   14748:	streq	r7, [r8]
   1474c:	sub	r7, r5, r6
   14750:	cmp	r7, r2
   14754:	bge	147f8 <__assert_fail@plt+0x3424>
   14758:	add	r5, r6, r2
   1475c:	mov	r2, #0
   14760:	mov	r1, #0
   14764:	cmp	r5, r3
   14768:	movwgt	r2, #1
   1476c:	cmn	r3, #1
   14770:	movwgt	r1, #1
   14774:	cmp	r5, r6
   14778:	bvs	147e0 <__assert_fail@plt+0x340c>
   1477c:	ands	r1, r1, r2
   14780:	bne	147e0 <__assert_fail@plt+0x340c>
   14784:	cmn	r4, #1
   14788:	ble	147a8 <__assert_fail@plt+0x33d4>
   1478c:	cmp	r4, #0
   14790:	beq	147f4 <__assert_fail@plt+0x3420>
   14794:	cmn	r5, #1
   14798:	ble	147cc <__assert_fail@plt+0x33f8>
   1479c:	mvn	r1, #-2147483648	; 0x80000000
   147a0:	udiv	r1, r1, r4
   147a4:	b	147c0 <__assert_fail@plt+0x33ec>
   147a8:	cmn	r5, #1
   147ac:	ble	147e4 <__assert_fail@plt+0x3410>
   147b0:	cmn	r4, #1
   147b4:	beq	147f4 <__assert_fail@plt+0x3420>
   147b8:	mov	r1, #-2147483648	; 0x80000000
   147bc:	sdiv	r1, r1, r4
   147c0:	cmp	r1, r5
   147c4:	bge	147f4 <__assert_fail@plt+0x3420>
   147c8:	b	147e0 <__assert_fail@plt+0x340c>
   147cc:	beq	147f4 <__assert_fail@plt+0x3420>
   147d0:	mov	r1, #-2147483648	; 0x80000000
   147d4:	sdiv	r1, r1, r5
   147d8:	cmp	r1, r4
   147dc:	bge	147f4 <__assert_fail@plt+0x3420>
   147e0:	bl	1496c <__assert_fail@plt+0x3598>
   147e4:	mvn	r1, #-2147483648	; 0x80000000
   147e8:	sdiv	r1, r1, r4
   147ec:	cmp	r5, r1
   147f0:	blt	147e0 <__assert_fail@plt+0x340c>
   147f4:	mul	r1, r5, r4
   147f8:	bl	14564 <__assert_fail@plt+0x3190>
   147fc:	str	r5, [r8]
   14800:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14804:	push	{fp, lr}
   14808:	mov	fp, sp
   1480c:	mov	r1, #1
   14810:	bl	15504 <__assert_fail@plt+0x4130>
   14814:	cmp	r0, #0
   14818:	popne	{fp, pc}
   1481c:	bl	1496c <__assert_fail@plt+0x3598>
   14820:	push	{fp, lr}
   14824:	mov	fp, sp
   14828:	bl	15504 <__assert_fail@plt+0x4130>
   1482c:	cmp	r0, #0
   14830:	popne	{fp, pc}
   14834:	bl	1496c <__assert_fail@plt+0x3598>
   14838:	push	{fp, lr}
   1483c:	mov	fp, sp
   14840:	mov	r1, #1
   14844:	bl	15504 <__assert_fail@plt+0x4130>
   14848:	cmp	r0, #0
   1484c:	popne	{fp, pc}
   14850:	bl	1496c <__assert_fail@plt+0x3598>
   14854:	push	{fp, lr}
   14858:	mov	fp, sp
   1485c:	bl	15504 <__assert_fail@plt+0x4130>
   14860:	cmp	r0, #0
   14864:	popne	{fp, pc}
   14868:	bl	1496c <__assert_fail@plt+0x3598>
   1486c:	push	{r4, r5, r6, sl, fp, lr}
   14870:	add	fp, sp, #16
   14874:	mov	r5, r0
   14878:	mov	r0, r1
   1487c:	mov	r4, r1
   14880:	bl	15558 <__assert_fail@plt+0x4184>
   14884:	cmp	r0, #0
   14888:	beq	148a4 <__assert_fail@plt+0x34d0>
   1488c:	mov	r1, r5
   14890:	mov	r2, r4
   14894:	mov	r6, r0
   14898:	bl	11158 <memcpy@plt>
   1489c:	mov	r0, r6
   148a0:	pop	{r4, r5, r6, sl, fp, pc}
   148a4:	bl	1496c <__assert_fail@plt+0x3598>
   148a8:	push	{r4, r5, r6, sl, fp, lr}
   148ac:	add	fp, sp, #16
   148b0:	mov	r5, r0
   148b4:	mov	r0, r1
   148b8:	mov	r4, r1
   148bc:	bl	15558 <__assert_fail@plt+0x4184>
   148c0:	cmp	r0, #0
   148c4:	beq	148e0 <__assert_fail@plt+0x350c>
   148c8:	mov	r1, r5
   148cc:	mov	r2, r4
   148d0:	mov	r6, r0
   148d4:	bl	11158 <memcpy@plt>
   148d8:	mov	r0, r6
   148dc:	pop	{r4, r5, r6, sl, fp, pc}
   148e0:	bl	1496c <__assert_fail@plt+0x3598>
   148e4:	push	{r4, r5, r6, sl, fp, lr}
   148e8:	add	fp, sp, #16
   148ec:	mov	r5, r0
   148f0:	add	r0, r1, #1
   148f4:	mov	r4, r1
   148f8:	bl	15558 <__assert_fail@plt+0x4184>
   148fc:	cmp	r0, #0
   14900:	beq	14928 <__assert_fail@plt+0x3554>
   14904:	mov	r6, r0
   14908:	mov	r0, #0
   1490c:	mov	r1, r5
   14910:	mov	r2, r4
   14914:	strb	r0, [r6, r4]
   14918:	mov	r0, r6
   1491c:	bl	11158 <memcpy@plt>
   14920:	mov	r0, r6
   14924:	pop	{r4, r5, r6, sl, fp, pc}
   14928:	bl	1496c <__assert_fail@plt+0x3598>
   1492c:	push	{r4, r5, r6, sl, fp, lr}
   14930:	add	fp, sp, #16
   14934:	mov	r4, r0
   14938:	bl	1129c <strlen@plt>
   1493c:	add	r5, r0, #1
   14940:	mov	r0, r5
   14944:	bl	15558 <__assert_fail@plt+0x4184>
   14948:	cmp	r0, #0
   1494c:	beq	14968 <__assert_fail@plt+0x3594>
   14950:	mov	r1, r4
   14954:	mov	r2, r5
   14958:	mov	r6, r0
   1495c:	bl	11158 <memcpy@plt>
   14960:	mov	r0, r6
   14964:	pop	{r4, r5, r6, sl, fp, pc}
   14968:	bl	1496c <__assert_fail@plt+0x3598>
   1496c:	push	{fp, lr}
   14970:	mov	fp, sp
   14974:	movw	r0, #28956	; 0x711c
   14978:	movw	r1, #26684	; 0x683c
   1497c:	mov	r2, #5
   14980:	movt	r0, #2
   14984:	movt	r1, #1
   14988:	ldr	r4, [r0]
   1498c:	mov	r0, #0
   14990:	bl	11188 <dcgettext@plt>
   14994:	movw	r2, #25607	; 0x6407
   14998:	mov	r3, r0
   1499c:	mov	r0, r4
   149a0:	mov	r1, #0
   149a4:	movt	r2, #1
   149a8:	bl	11218 <error@plt>
   149ac:	bl	113b0 <abort@plt>
   149b0:	push	{r4, sl, fp, lr}
   149b4:	add	fp, sp, #8
   149b8:	bl	158e8 <__assert_fail@plt+0x4514>
   149bc:	mov	r4, r0
   149c0:	cmn	r0, #1
   149c4:	bne	149d8 <__assert_fail@plt+0x3604>
   149c8:	bl	112b4 <__errno_location@plt>
   149cc:	ldr	r0, [r0]
   149d0:	cmp	r0, #12
   149d4:	beq	149e0 <__assert_fail@plt+0x360c>
   149d8:	mov	r0, r4
   149dc:	pop	{r4, sl, fp, pc}
   149e0:	bl	1496c <__assert_fail@plt+0x3598>
   149e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149e8:	add	fp, sp, #28
   149ec:	sub	sp, sp, #12
   149f0:	cmp	r2, #37	; 0x25
   149f4:	bcs	14e2c <__assert_fail@plt+0x3a58>
   149f8:	ldr	r9, [fp, #8]
   149fc:	mov	r7, r2
   14a00:	mov	r6, r1
   14a04:	mov	r4, r0
   14a08:	str	r3, [sp, #4]
   14a0c:	bl	112b4 <__errno_location@plt>
   14a10:	mov	r5, r0
   14a14:	mov	r0, #0
   14a18:	str	r0, [r5]
   14a1c:	bl	11278 <__ctype_b_loc@plt>
   14a20:	ldr	r1, [r0]
   14a24:	mov	r2, r4
   14a28:	ldrb	r0, [r2], #1
   14a2c:	add	r3, r1, r0, lsl #1
   14a30:	ldrb	r3, [r3, #1]
   14a34:	tst	r3, #32
   14a38:	bne	14a28 <__assert_fail@plt+0x3654>
   14a3c:	add	r8, sp, #8
   14a40:	cmp	r6, #0
   14a44:	mov	sl, #4
   14a48:	movne	r8, r6
   14a4c:	cmp	r0, #45	; 0x2d
   14a50:	beq	14e20 <__assert_fail@plt+0x3a4c>
   14a54:	mov	r0, r4
   14a58:	mov	r1, r8
   14a5c:	mov	r2, r7
   14a60:	bl	11290 <strtoul@plt>
   14a64:	ldr	r6, [r8]
   14a68:	cmp	r6, r4
   14a6c:	beq	14a90 <__assert_fail@plt+0x36bc>
   14a70:	mov	r7, r0
   14a74:	ldr	r0, [r5]
   14a78:	cmp	r0, #0
   14a7c:	beq	14abc <__assert_fail@plt+0x36e8>
   14a80:	cmp	r0, #34	; 0x22
   14a84:	bne	14e20 <__assert_fail@plt+0x3a4c>
   14a88:	mov	sl, #1
   14a8c:	b	14ac0 <__assert_fail@plt+0x36ec>
   14a90:	cmp	r9, #0
   14a94:	ldrbne	r1, [r4]
   14a98:	cmpne	r1, #0
   14a9c:	beq	14e20 <__assert_fail@plt+0x3a4c>
   14aa0:	mov	r0, r9
   14aa4:	bl	112a8 <strchr@plt>
   14aa8:	cmp	r0, #0
   14aac:	beq	14e20 <__assert_fail@plt+0x3a4c>
   14ab0:	mov	r7, #1
   14ab4:	mov	sl, #0
   14ab8:	b	14ac8 <__assert_fail@plt+0x36f4>
   14abc:	mov	sl, r0
   14ac0:	cmp	r9, #0
   14ac4:	beq	14e18 <__assert_fail@plt+0x3a44>
   14ac8:	ldrb	r4, [r6]
   14acc:	cmp	r4, #0
   14ad0:	beq	14e18 <__assert_fail@plt+0x3a44>
   14ad4:	mov	r0, r9
   14ad8:	mov	r1, r4
   14adc:	bl	112a8 <strchr@plt>
   14ae0:	cmp	r0, #0
   14ae4:	beq	14da0 <__assert_fail@plt+0x39cc>
   14ae8:	sub	r0, r4, #69	; 0x45
   14aec:	mov	r3, #1
   14af0:	mov	r5, #1024	; 0x400
   14af4:	cmp	r0, #21
   14af8:	bhi	14b10 <__assert_fail@plt+0x373c>
   14afc:	movw	r2, #35141	; 0x8945
   14b00:	mov	r1, #1
   14b04:	movt	r2, #48	; 0x30
   14b08:	tst	r2, r1, lsl r0
   14b0c:	bne	14b2c <__assert_fail@plt+0x3758>
   14b10:	sub	r0, r4, #103	; 0x67
   14b14:	cmp	r0, #13
   14b18:	bhi	14b7c <__assert_fail@plt+0x37a8>
   14b1c:	mov	r1, #1
   14b20:	movw	r2, #8273	; 0x2051
   14b24:	tst	r2, r1, lsl r0
   14b28:	beq	14b7c <__assert_fail@plt+0x37a8>
   14b2c:	mov	r0, r9
   14b30:	mov	r1, #48	; 0x30
   14b34:	bl	112a8 <strchr@plt>
   14b38:	cmp	r0, #0
   14b3c:	beq	14b78 <__assert_fail@plt+0x37a4>
   14b40:	ldrb	r0, [r6, #1]
   14b44:	cmp	r0, #66	; 0x42
   14b48:	cmpne	r0, #68	; 0x44
   14b4c:	bne	14b5c <__assert_fail@plt+0x3788>
   14b50:	mov	r3, #2
   14b54:	mov	r5, #1000	; 0x3e8
   14b58:	b	14b7c <__assert_fail@plt+0x37a8>
   14b5c:	cmp	r0, #105	; 0x69
   14b60:	bne	14b78 <__assert_fail@plt+0x37a4>
   14b64:	ldrb	r0, [r6, #2]
   14b68:	mov	r3, #1
   14b6c:	cmp	r0, #66	; 0x42
   14b70:	movweq	r3, #3
   14b74:	b	14b7c <__assert_fail@plt+0x37a8>
   14b78:	mov	r3, #1
   14b7c:	cmp	r4, #89	; 0x59
   14b80:	bgt	14bf0 <__assert_fail@plt+0x381c>
   14b84:	sub	r0, r4, #66	; 0x42
   14b88:	cmp	r0, #14
   14b8c:	bhi	14c64 <__assert_fail@plt+0x3890>
   14b90:	add	r1, pc, #0
   14b94:	ldr	pc, [r1, r0, lsl #2]
   14b98:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b9c:	andeq	r4, r1, r0, lsr #27
   14ba0:	andeq	r4, r1, r0, lsr #27
   14ba4:	andeq	r4, r1, ip, lsr #27
   14ba8:	andeq	r4, r1, r0, lsr #27
   14bac:	andeq	r4, r1, r4, asr #25
   14bb0:	andeq	r4, r1, r0, lsr #27
   14bb4:	andeq	r4, r1, r0, lsr #27
   14bb8:	andeq	r4, r1, r0, lsr #27
   14bbc:	strdeq	r4, [r1], -r0
   14bc0:	andeq	r4, r1, r0, lsr #27
   14bc4:	andeq	r4, r1, r4, lsl sp
   14bc8:	andeq	r4, r1, r0, lsr #27
   14bcc:	andeq	r4, r1, r0, lsr #27
   14bd0:	ldrdeq	r4, [r1], -r8
   14bd4:	mov	r1, #0
   14bd8:	lsr	r0, r7, #22
   14bdc:	cmp	r1, r7, lsr #22
   14be0:	lsl	r7, r7, #10
   14be4:	movwne	r0, #1
   14be8:	mvnne	r7, #0
   14bec:	b	14e00 <__assert_fail@plt+0x3a2c>
   14bf0:	cmp	r4, #115	; 0x73
   14bf4:	bgt	14ca0 <__assert_fail@plt+0x38cc>
   14bf8:	sub	r1, r4, #98	; 0x62
   14bfc:	cmp	r1, #11
   14c00:	bhi	14d6c <__assert_fail@plt+0x3998>
   14c04:	add	r2, pc, #4
   14c08:	mov	r0, #0
   14c0c:	ldr	pc, [r2, r1, lsl #2]
   14c10:	andeq	r4, r1, r0, asr #24
   14c14:	andeq	r4, r1, r0, lsl #28
   14c18:	andeq	r4, r1, r0, lsr #27
   14c1c:	andeq	r4, r1, r0, lsr #27
   14c20:	andeq	r4, r1, r0, lsr #27
   14c24:	andeq	r4, r1, r4, asr #25
   14c28:	andeq	r4, r1, r0, lsr #27
   14c2c:	andeq	r4, r1, r0, lsr #27
   14c30:	andeq	r4, r1, r0, lsr #27
   14c34:	strdeq	r4, [r1], -r0
   14c38:	andeq	r4, r1, r0, lsr #27
   14c3c:	andeq	r4, r1, r4, lsl sp
   14c40:	movw	r0, #65535	; 0xffff
   14c44:	movt	r0, #63	; 0x3f
   14c48:	add	r1, r0, #4194304	; 0x400000
   14c4c:	mov	r0, #0
   14c50:	cmp	r7, r1
   14c54:	lsl	r7, r7, #9
   14c58:	movwhi	r0, #1
   14c5c:	mvnhi	r7, #0
   14c60:	b	14e00 <__assert_fail@plt+0x3a2c>
   14c64:	cmp	r4, #84	; 0x54
   14c68:	beq	14d40 <__assert_fail@plt+0x396c>
   14c6c:	cmp	r4, #89	; 0x59
   14c70:	bne	14da0 <__assert_fail@plt+0x39cc>
   14c74:	mvn	r0, #0
   14c78:	mvn	r2, #7
   14c7c:	udiv	r1, r0, r5
   14c80:	mov	r0, #0
   14c84:	cmp	r1, r7
   14c88:	mul	r7, r7, r5
   14c8c:	orrcc	r0, r0, #1
   14c90:	mvncc	r7, #0
   14c94:	adds	r2, r2, #1
   14c98:	bne	14c84 <__assert_fail@plt+0x38b0>
   14c9c:	b	14e00 <__assert_fail@plt+0x3a2c>
   14ca0:	cmp	r4, #116	; 0x74
   14ca4:	beq	14d40 <__assert_fail@plt+0x396c>
   14ca8:	cmp	r4, #119	; 0x77
   14cac:	bne	14da0 <__assert_fail@plt+0x39cc>
   14cb0:	lsl	r1, r7, #1
   14cb4:	cmp	r7, #0
   14cb8:	lsr	r0, r7, #31
   14cbc:	mvnlt	r1, #0
   14cc0:	b	14d0c <__assert_fail@plt+0x3938>
   14cc4:	mvn	r0, #0
   14cc8:	mvn	r2, #2
   14ccc:	udiv	r1, r0, r5
   14cd0:	mov	r0, #0
   14cd4:	cmp	r1, r7
   14cd8:	mul	r7, r7, r5
   14cdc:	orrcc	r0, r0, #1
   14ce0:	mvncc	r7, #0
   14ce4:	adds	r2, r2, #1
   14ce8:	bne	14cd4 <__assert_fail@plt+0x3900>
   14cec:	b	14e00 <__assert_fail@plt+0x3a2c>
   14cf0:	mvn	r0, #0
   14cf4:	mul	r1, r7, r5
   14cf8:	udiv	r0, r0, r5
   14cfc:	cmp	r0, r7
   14d00:	mov	r0, #0
   14d04:	mvncc	r1, #0
   14d08:	movwcc	r0, #1
   14d0c:	mov	r7, r1
   14d10:	b	14e00 <__assert_fail@plt+0x3a2c>
   14d14:	mvn	r0, #0
   14d18:	mvn	r2, #1
   14d1c:	udiv	r1, r0, r5
   14d20:	mov	r0, #0
   14d24:	cmp	r1, r7
   14d28:	mul	r7, r7, r5
   14d2c:	orrcc	r0, r0, #1
   14d30:	mvncc	r7, #0
   14d34:	adds	r2, r2, #1
   14d38:	bne	14d24 <__assert_fail@plt+0x3950>
   14d3c:	b	14e00 <__assert_fail@plt+0x3a2c>
   14d40:	mvn	r0, #0
   14d44:	mvn	r2, #3
   14d48:	udiv	r1, r0, r5
   14d4c:	mov	r0, #0
   14d50:	cmp	r1, r7
   14d54:	mul	r7, r7, r5
   14d58:	orrcc	r0, r0, #1
   14d5c:	mvncc	r7, #0
   14d60:	adds	r2, r2, #1
   14d64:	bne	14d50 <__assert_fail@plt+0x397c>
   14d68:	b	14e00 <__assert_fail@plt+0x3a2c>
   14d6c:	cmp	r4, #90	; 0x5a
   14d70:	bne	14da0 <__assert_fail@plt+0x39cc>
   14d74:	mvn	r0, #0
   14d78:	mvn	r2, #6
   14d7c:	udiv	r1, r0, r5
   14d80:	mov	r0, #0
   14d84:	cmp	r1, r7
   14d88:	mul	r7, r7, r5
   14d8c:	orrcc	r0, r0, #1
   14d90:	mvncc	r7, #0
   14d94:	adds	r2, r2, #1
   14d98:	bne	14d84 <__assert_fail@plt+0x39b0>
   14d9c:	b	14e00 <__assert_fail@plt+0x3a2c>
   14da0:	ldr	r0, [sp, #4]
   14da4:	orr	sl, sl, #2
   14da8:	b	14e1c <__assert_fail@plt+0x3a48>
   14dac:	mvn	r0, #0
   14db0:	mvn	r2, #5
   14db4:	udiv	r1, r0, r5
   14db8:	mov	r0, #0
   14dbc:	cmp	r1, r7
   14dc0:	mul	r7, r7, r5
   14dc4:	orrcc	r0, r0, #1
   14dc8:	mvncc	r7, #0
   14dcc:	adds	r2, r2, #1
   14dd0:	bne	14dbc <__assert_fail@plt+0x39e8>
   14dd4:	b	14e00 <__assert_fail@plt+0x3a2c>
   14dd8:	mvn	r0, #0
   14ddc:	mvn	r2, #4
   14de0:	udiv	r1, r0, r5
   14de4:	mov	r0, #0
   14de8:	cmp	r1, r7
   14dec:	mul	r7, r7, r5
   14df0:	orrcc	r0, r0, #1
   14df4:	mvncc	r7, #0
   14df8:	adds	r2, r2, #1
   14dfc:	bne	14de8 <__assert_fail@plt+0x3a14>
   14e00:	add	r1, r6, r3
   14e04:	orr	sl, r0, sl
   14e08:	str	r1, [r8]
   14e0c:	ldrb	r1, [r6, r3]
   14e10:	cmp	r1, #0
   14e14:	orrne	sl, sl, #2
   14e18:	ldr	r0, [sp, #4]
   14e1c:	str	r7, [r0]
   14e20:	mov	r0, sl
   14e24:	sub	sp, fp, #28
   14e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e2c:	movw	r0, #26701	; 0x684d
   14e30:	movw	r1, #26739	; 0x6873
   14e34:	movw	r3, #26755	; 0x6883
   14e38:	mov	r2, #85	; 0x55
   14e3c:	movt	r0, #1
   14e40:	movt	r1, #1
   14e44:	movt	r3, #1
   14e48:	bl	113d4 <__assert_fail@plt>
   14e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e50:	add	fp, sp, #28
   14e54:	sub	sp, sp, #20
   14e58:	cmp	r2, #37	; 0x25
   14e5c:	bcs	154e4 <__assert_fail@plt+0x4110>
   14e60:	mov	r8, r3
   14e64:	mov	r5, r2
   14e68:	mov	r6, r1
   14e6c:	mov	r4, r0
   14e70:	bl	112b4 <__errno_location@plt>
   14e74:	mov	r7, r0
   14e78:	mov	r0, #0
   14e7c:	str	r0, [r7]
   14e80:	bl	11278 <__ctype_b_loc@plt>
   14e84:	ldr	r1, [r0]
   14e88:	mov	r2, r4
   14e8c:	ldrb	r0, [r2], #1
   14e90:	add	r3, r1, r0, lsl #1
   14e94:	ldrb	r3, [r3, #1]
   14e98:	tst	r3, #32
   14e9c:	bne	14e8c <__assert_fail@plt+0x3ab8>
   14ea0:	add	sl, sp, #16
   14ea4:	cmp	r6, #0
   14ea8:	movne	sl, r6
   14eac:	mov	r6, #4
   14eb0:	cmp	r0, #45	; 0x2d
   14eb4:	beq	154d8 <__assert_fail@plt+0x4104>
   14eb8:	mov	r0, r4
   14ebc:	mov	r1, sl
   14ec0:	mov	r2, r5
   14ec4:	str	r8, [sp, #12]
   14ec8:	bl	112fc <strtoumax@plt>
   14ecc:	ldr	r5, [sl]
   14ed0:	cmp	r5, r4
   14ed4:	beq	14efc <__assert_fail@plt+0x3b28>
   14ed8:	mov	r8, r0
   14edc:	ldr	r0, [r7]
   14ee0:	mov	r9, r1
   14ee4:	cmp	r0, #0
   14ee8:	beq	14f2c <__assert_fail@plt+0x3b58>
   14eec:	cmp	r0, #34	; 0x22
   14ef0:	bne	154d8 <__assert_fail@plt+0x4104>
   14ef4:	mov	r6, #1
   14ef8:	b	14f30 <__assert_fail@plt+0x3b5c>
   14efc:	ldr	r0, [fp, #8]
   14f00:	cmp	r0, #0
   14f04:	ldrbne	r1, [r4]
   14f08:	cmpne	r1, #0
   14f0c:	beq	154d8 <__assert_fail@plt+0x4104>
   14f10:	bl	112a8 <strchr@plt>
   14f14:	cmp	r0, #0
   14f18:	beq	154d8 <__assert_fail@plt+0x4104>
   14f1c:	mov	r6, #0
   14f20:	mov	r8, #1
   14f24:	mov	r9, #0
   14f28:	b	14f3c <__assert_fail@plt+0x3b68>
   14f2c:	mov	r6, r0
   14f30:	ldr	r0, [fp, #8]
   14f34:	cmp	r0, #0
   14f38:	beq	154d0 <__assert_fail@plt+0x40fc>
   14f3c:	ldrb	r7, [r5]
   14f40:	cmp	r7, #0
   14f44:	beq	154d0 <__assert_fail@plt+0x40fc>
   14f48:	ldr	r0, [fp, #8]
   14f4c:	mov	r1, r7
   14f50:	bl	112a8 <strchr@plt>
   14f54:	cmp	r0, #0
   14f58:	beq	15060 <__assert_fail@plt+0x3c8c>
   14f5c:	sub	r0, r7, #69	; 0x45
   14f60:	mov	r1, #1
   14f64:	mov	r3, #0
   14f68:	mov	r4, #1024	; 0x400
   14f6c:	cmp	r0, #21
   14f70:	str	r1, [sp, #8]
   14f74:	bhi	14f8c <__assert_fail@plt+0x3bb8>
   14f78:	movw	r2, #35141	; 0x8945
   14f7c:	mov	r1, #1
   14f80:	movt	r2, #48	; 0x30
   14f84:	tst	r2, r1, lsl r0
   14f88:	bne	14fa8 <__assert_fail@plt+0x3bd4>
   14f8c:	sub	r0, r7, #103	; 0x67
   14f90:	cmp	r0, #13
   14f94:	bhi	14fdc <__assert_fail@plt+0x3c08>
   14f98:	mov	r1, #1
   14f9c:	movw	r2, #8273	; 0x2051
   14fa0:	tst	r2, r1, lsl r0
   14fa4:	beq	14fdc <__assert_fail@plt+0x3c08>
   14fa8:	ldr	r0, [fp, #8]
   14fac:	mov	r1, #48	; 0x30
   14fb0:	bl	112a8 <strchr@plt>
   14fb4:	cmp	r0, #0
   14fb8:	beq	14fd8 <__assert_fail@plt+0x3c04>
   14fbc:	ldrb	r0, [r5, #1]
   14fc0:	cmp	r0, #66	; 0x42
   14fc4:	cmpne	r0, #68	; 0x44
   14fc8:	bne	150f0 <__assert_fail@plt+0x3d1c>
   14fcc:	mov	r4, #1000	; 0x3e8
   14fd0:	mov	r0, #2
   14fd4:	str	r0, [sp, #8]
   14fd8:	mov	r3, #0
   14fdc:	cmp	r7, #89	; 0x59
   14fe0:	stm	sp, {r5, r6}
   14fe4:	bgt	1506c <__assert_fail@plt+0x3c98>
   14fe8:	sub	r0, r7, #66	; 0x42
   14fec:	cmp	r0, #14
   14ff0:	bhi	15114 <__assert_fail@plt+0x3d40>
   14ff4:	add	r1, pc, #0
   14ff8:	ldr	pc, [r1, r0, lsl #2]
   14ffc:	andeq	r5, r1, r8, lsr r0
   15000:	andeq	r5, r1, r4, asr #7
   15004:	andeq	r5, r1, r4, asr #7
   15008:	ldrdeq	r5, [r1], -r8
   1500c:	andeq	r5, r1, r4, asr #7
   15010:	andeq	r5, r1, r8, asr #3
   15014:	andeq	r5, r1, r4, asr #7
   15018:	andeq	r5, r1, r4, asr #7
   1501c:	andeq	r5, r1, r4, asr #7
   15020:	andeq	r5, r1, r4, lsr r2
   15024:	andeq	r5, r1, r4, asr #7
   15028:	andeq	r5, r1, r8, ror r2
   1502c:	andeq	r5, r1, r4, asr #7
   15030:	andeq	r5, r1, r4, asr #7
   15034:	andeq	r5, r1, r4, asr #8
   15038:	mov	r1, #0
   1503c:	lsl	r3, r9, #10
   15040:	lsl	r0, r8, #10
   15044:	lsr	r2, r9, #22
   15048:	cmp	r1, r9, lsr #22
   1504c:	orr	r3, r3, r8, lsr #22
   15050:	mvnne	r0, #0
   15054:	movwne	r2, #1
   15058:	cmp	r1, r9, lsr #22
   1505c:	b	150e0 <__assert_fail@plt+0x3d0c>
   15060:	ldr	r0, [sp, #12]
   15064:	orr	r6, r6, #2
   15068:	b	154d4 <__assert_fail@plt+0x4100>
   1506c:	cmp	r7, #115	; 0x73
   15070:	bgt	15190 <__assert_fail@plt+0x3dbc>
   15074:	sub	r0, r7, #98	; 0x62
   15078:	cmp	r0, #11
   1507c:	bhi	15350 <__assert_fail@plt+0x3f7c>
   15080:	add	r1, pc, #4
   15084:	mov	r2, #0
   15088:	ldr	pc, [r1, r0, lsl #2]
   1508c:	strheq	r5, [r1], -ip
   15090:	andeq	r5, r1, ip, lsr #9
   15094:	andeq	r5, r1, r4, asr #7
   15098:	andeq	r5, r1, r4, asr #7
   1509c:	andeq	r5, r1, r4, asr #7
   150a0:	andeq	r5, r1, r8, asr #3
   150a4:	andeq	r5, r1, r4, asr #7
   150a8:	andeq	r5, r1, r4, asr #7
   150ac:	andeq	r5, r1, r4, asr #7
   150b0:	andeq	r5, r1, r4, lsr r2
   150b4:	andeq	r5, r1, r4, asr #7
   150b8:	andeq	r5, r1, r8, ror r2
   150bc:	mov	r1, #0
   150c0:	lsl	r3, r9, #9
   150c4:	lsl	r0, r8, #9
   150c8:	lsr	r2, r9, #23
   150cc:	cmp	r1, r9, lsr #23
   150d0:	orr	r3, r3, r8, lsr #23
   150d4:	mvnne	r0, #0
   150d8:	movwne	r2, #1
   150dc:	cmp	r1, r9, lsr #23
   150e0:	mvnne	r3, #0
   150e4:	mov	r8, r0
   150e8:	mov	r9, r3
   150ec:	b	154ac <__assert_fail@plt+0x40d8>
   150f0:	cmp	r0, #105	; 0x69
   150f4:	mov	r3, #0
   150f8:	bne	14fdc <__assert_fail@plt+0x3c08>
   150fc:	ldrb	r0, [r5, #2]
   15100:	mov	r1, #1
   15104:	cmp	r0, #66	; 0x42
   15108:	movweq	r1, #3
   1510c:	str	r1, [sp, #8]
   15110:	b	14fdc <__assert_fail@plt+0x3c08>
   15114:	cmp	r7, #84	; 0x54
   15118:	beq	152e4 <__assert_fail@plt+0x3f10>
   1511c:	cmp	r7, #89	; 0x59
   15120:	bne	153c4 <__assert_fail@plt+0x3ff0>
   15124:	mvn	r0, #0
   15128:	mvn	r1, #0
   1512c:	mov	r2, r4
   15130:	mov	r5, r3
   15134:	bl	15c2c <__assert_fail@plt+0x4858>
   15138:	mov	ip, r5
   1513c:	mvn	lr, #0
   15140:	mov	r2, #0
   15144:	mvn	r3, #7
   15148:	mov	r5, r8
   1514c:	mov	r7, r9
   15150:	umull	r8, r6, r5, r4
   15154:	mvn	r9, #0
   15158:	mla	r6, r5, ip, r6
   1515c:	subs	r5, r0, r5
   15160:	sbcs	r5, r1, r7
   15164:	mov	r5, #0
   15168:	movwcc	r5, #1
   1516c:	cmp	r5, #0
   15170:	mlaeq	r9, r7, r4, r6
   15174:	movne	r8, lr
   15178:	orrne	r2, r2, #1
   1517c:	adds	r3, r3, #1
   15180:	mov	r5, r8
   15184:	mov	r7, r9
   15188:	bne	15150 <__assert_fail@plt+0x3d7c>
   1518c:	b	154ac <__assert_fail@plt+0x40d8>
   15190:	cmp	r7, #116	; 0x74
   15194:	beq	152e4 <__assert_fail@plt+0x3f10>
   15198:	cmp	r7, #119	; 0x77
   1519c:	bne	153c4 <__assert_fail@plt+0x3ff0>
   151a0:	lsl	r1, r9, #1
   151a4:	lsl	r0, r8, #1
   151a8:	cmp	r9, #0
   151ac:	lsr	r2, r9, #31
   151b0:	orr	r1, r1, r8, lsr #31
   151b4:	mvnlt	r0, #0
   151b8:	mvnlt	r1, #0
   151bc:	mov	r8, r0
   151c0:	mov	r9, r1
   151c4:	b	154ac <__assert_fail@plt+0x40d8>
   151c8:	mvn	r0, #0
   151cc:	mvn	r1, #0
   151d0:	mov	r2, r4
   151d4:	mov	r5, r3
   151d8:	bl	15c2c <__assert_fail@plt+0x4858>
   151dc:	mov	ip, r5
   151e0:	mvn	lr, #0
   151e4:	mov	r2, #0
   151e8:	mvn	r3, #2
   151ec:	mov	r6, r8
   151f0:	mov	r5, r9
   151f4:	umull	r8, r7, r6, r4
   151f8:	mvn	r9, #0
   151fc:	mla	r7, r6, ip, r7
   15200:	subs	r6, r0, r6
   15204:	sbcs	r6, r1, r5
   15208:	mov	r6, #0
   1520c:	movwcc	r6, #1
   15210:	cmp	r6, #0
   15214:	mlaeq	r9, r5, r4, r7
   15218:	movne	r8, lr
   1521c:	orrne	r2, r2, #1
   15220:	adds	r3, r3, #1
   15224:	mov	r6, r8
   15228:	mov	r5, r9
   1522c:	bne	151f4 <__assert_fail@plt+0x3e20>
   15230:	b	154ac <__assert_fail@plt+0x40d8>
   15234:	mvn	r0, #0
   15238:	mvn	r1, #0
   1523c:	mov	r2, r4
   15240:	mov	r5, r3
   15244:	bl	15c2c <__assert_fail@plt+0x4858>
   15248:	subs	r0, r0, r8
   1524c:	mov	r2, #0
   15250:	sbcs	r0, r1, r9
   15254:	movwcc	r2, #1
   15258:	umull	r0, r1, r8, r4
   1525c:	mla	r1, r8, r5, r1
   15260:	cmp	r2, #0
   15264:	mla	r9, r9, r4, r1
   15268:	mvnne	r0, #0
   1526c:	mvnne	r9, #0
   15270:	mov	r8, r0
   15274:	b	154ac <__assert_fail@plt+0x40d8>
   15278:	mvn	r0, #0
   1527c:	mvn	r1, #0
   15280:	mov	r2, r4
   15284:	mov	r5, r3
   15288:	bl	15c2c <__assert_fail@plt+0x4858>
   1528c:	mov	ip, r5
   15290:	mvn	lr, #0
   15294:	mov	r2, #0
   15298:	mvn	r3, #1
   1529c:	mov	r6, r8
   152a0:	mov	r5, r9
   152a4:	umull	r8, r7, r6, r4
   152a8:	mvn	r9, #0
   152ac:	mla	r7, r6, ip, r7
   152b0:	subs	r6, r0, r6
   152b4:	sbcs	r6, r1, r5
   152b8:	mov	r6, #0
   152bc:	movwcc	r6, #1
   152c0:	cmp	r6, #0
   152c4:	mlaeq	r9, r5, r4, r7
   152c8:	movne	r8, lr
   152cc:	orrne	r2, r2, #1
   152d0:	adds	r3, r3, #1
   152d4:	mov	r6, r8
   152d8:	mov	r5, r9
   152dc:	bne	152a4 <__assert_fail@plt+0x3ed0>
   152e0:	b	154ac <__assert_fail@plt+0x40d8>
   152e4:	mvn	r0, #0
   152e8:	mvn	r1, #0
   152ec:	mov	r2, r4
   152f0:	mov	r5, r3
   152f4:	bl	15c2c <__assert_fail@plt+0x4858>
   152f8:	mov	ip, r5
   152fc:	mvn	lr, #0
   15300:	mov	r2, #0
   15304:	mvn	r3, #3
   15308:	mov	r6, r8
   1530c:	mov	r5, r9
   15310:	umull	r8, r7, r6, r4
   15314:	mvn	r9, #0
   15318:	mla	r7, r6, ip, r7
   1531c:	subs	r6, r0, r6
   15320:	sbcs	r6, r1, r5
   15324:	mov	r6, #0
   15328:	movwcc	r6, #1
   1532c:	cmp	r6, #0
   15330:	mlaeq	r9, r5, r4, r7
   15334:	movne	r8, lr
   15338:	orrne	r2, r2, #1
   1533c:	adds	r3, r3, #1
   15340:	mov	r6, r8
   15344:	mov	r5, r9
   15348:	bne	15310 <__assert_fail@plt+0x3f3c>
   1534c:	b	154ac <__assert_fail@plt+0x40d8>
   15350:	cmp	r7, #90	; 0x5a
   15354:	bne	153c4 <__assert_fail@plt+0x3ff0>
   15358:	mvn	r0, #0
   1535c:	mvn	r1, #0
   15360:	mov	r2, r4
   15364:	mov	r5, r3
   15368:	bl	15c2c <__assert_fail@plt+0x4858>
   1536c:	mov	ip, r5
   15370:	mvn	lr, #0
   15374:	mov	r2, #0
   15378:	mvn	r3, #6
   1537c:	mov	r5, r8
   15380:	mov	r7, r9
   15384:	umull	r8, r6, r5, r4
   15388:	mvn	r9, #0
   1538c:	mla	r6, r5, ip, r6
   15390:	subs	r5, r0, r5
   15394:	sbcs	r5, r1, r7
   15398:	mov	r5, #0
   1539c:	movwcc	r5, #1
   153a0:	cmp	r5, #0
   153a4:	mlaeq	r9, r7, r4, r6
   153a8:	movne	r8, lr
   153ac:	orrne	r2, r2, #1
   153b0:	adds	r3, r3, #1
   153b4:	mov	r5, r8
   153b8:	mov	r7, r9
   153bc:	bne	15384 <__assert_fail@plt+0x3fb0>
   153c0:	b	154ac <__assert_fail@plt+0x40d8>
   153c4:	ldr	r0, [sp, #12]
   153c8:	strd	r8, [r0]
   153cc:	ldr	r6, [sp, #4]
   153d0:	orr	r6, r6, #2
   153d4:	b	154d8 <__assert_fail@plt+0x4104>
   153d8:	mvn	r0, #0
   153dc:	mvn	r1, #0
   153e0:	mov	r2, r4
   153e4:	mov	r5, r3
   153e8:	bl	15c2c <__assert_fail@plt+0x4858>
   153ec:	mov	ip, r5
   153f0:	mvn	lr, #0
   153f4:	mov	r2, #0
   153f8:	mvn	r3, #5
   153fc:	mov	r5, r8
   15400:	mov	r7, r9
   15404:	umull	r8, r6, r5, r4
   15408:	mvn	r9, #0
   1540c:	mla	r6, r5, ip, r6
   15410:	subs	r5, r0, r5
   15414:	sbcs	r5, r1, r7
   15418:	mov	r5, #0
   1541c:	movwcc	r5, #1
   15420:	cmp	r5, #0
   15424:	mlaeq	r9, r7, r4, r6
   15428:	movne	r8, lr
   1542c:	orrne	r2, r2, #1
   15430:	adds	r3, r3, #1
   15434:	mov	r5, r8
   15438:	mov	r7, r9
   1543c:	bne	15404 <__assert_fail@plt+0x4030>
   15440:	b	154ac <__assert_fail@plt+0x40d8>
   15444:	mvn	r0, #0
   15448:	mvn	r1, #0
   1544c:	mov	r2, r4
   15450:	mov	r5, r3
   15454:	bl	15c2c <__assert_fail@plt+0x4858>
   15458:	mov	ip, r5
   1545c:	mvn	lr, #0
   15460:	mov	r2, #0
   15464:	mvn	r3, #4
   15468:	mov	r5, r8
   1546c:	mov	r7, r9
   15470:	umull	r8, r6, r5, r4
   15474:	mvn	r9, #0
   15478:	mla	r6, r5, ip, r6
   1547c:	subs	r5, r0, r5
   15480:	sbcs	r5, r1, r7
   15484:	mov	r5, #0
   15488:	movwcc	r5, #1
   1548c:	cmp	r5, #0
   15490:	mlaeq	r9, r7, r4, r6
   15494:	movne	r8, lr
   15498:	orrne	r2, r2, #1
   1549c:	adds	r3, r3, #1
   154a0:	mov	r5, r8
   154a4:	mov	r7, r9
   154a8:	bne	15470 <__assert_fail@plt+0x409c>
   154ac:	ldr	r1, [sp]
   154b0:	ldr	r3, [sp, #8]
   154b4:	ldr	r6, [sp, #4]
   154b8:	add	r0, r1, r3
   154bc:	orr	r6, r2, r6
   154c0:	str	r0, [sl]
   154c4:	ldrb	r0, [r1, r3]
   154c8:	cmp	r0, #0
   154cc:	orrne	r6, r6, #2
   154d0:	ldr	r0, [sp, #12]
   154d4:	strd	r8, [r0]
   154d8:	mov	r0, r6
   154dc:	sub	sp, fp, #28
   154e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e4:	movw	r0, #26701	; 0x684d
   154e8:	movw	r1, #26739	; 0x6873
   154ec:	movw	r3, #26836	; 0x68d4
   154f0:	mov	r2, #85	; 0x55
   154f4:	movt	r0, #1
   154f8:	movt	r1, #1
   154fc:	movt	r3, #1
   15500:	bl	113d4 <__assert_fail@plt>
   15504:	clz	r2, r1
   15508:	clz	r3, r0
   1550c:	lsr	r2, r2, #5
   15510:	lsr	r3, r3, #5
   15514:	orrs	r2, r3, r2
   15518:	movwne	r1, #1
   1551c:	movwne	r0, #1
   15520:	cmp	r1, #0
   15524:	beq	15554 <__assert_fail@plt+0x4180>
   15528:	mvn	r2, #-2147483648	; 0x80000000
   1552c:	udiv	r2, r2, r1
   15530:	cmp	r2, r0
   15534:	bcs	15554 <__assert_fail@plt+0x4180>
   15538:	push	{fp, lr}
   1553c:	mov	fp, sp
   15540:	bl	112b4 <__errno_location@plt>
   15544:	mov	r1, #12
   15548:	str	r1, [r0]
   1554c:	mov	r0, #0
   15550:	pop	{fp, pc}
   15554:	b	110e0 <calloc@plt>
   15558:	cmp	r0, #0
   1555c:	movweq	r0, #1
   15560:	cmn	r0, #1
   15564:	ble	1556c <__assert_fail@plt+0x4198>
   15568:	b	1123c <malloc@plt>
   1556c:	push	{fp, lr}
   15570:	mov	fp, sp
   15574:	bl	112b4 <__errno_location@plt>
   15578:	mov	r1, #12
   1557c:	str	r1, [r0]
   15580:	mov	r0, #0
   15584:	pop	{fp, pc}
   15588:	push	{fp, lr}
   1558c:	mov	fp, sp
   15590:	cmp	r0, #0
   15594:	beq	155b0 <__assert_fail@plt+0x41dc>
   15598:	cmp	r1, #0
   1559c:	beq	155bc <__assert_fail@plt+0x41e8>
   155a0:	cmn	r1, #1
   155a4:	ble	155c4 <__assert_fail@plt+0x41f0>
   155a8:	pop	{fp, lr}
   155ac:	b	11194 <realloc@plt>
   155b0:	mov	r0, r1
   155b4:	pop	{fp, lr}
   155b8:	b	15558 <__assert_fail@plt+0x4184>
   155bc:	bl	12160 <__assert_fail@plt+0xd8c>
   155c0:	b	155d0 <__assert_fail@plt+0x41fc>
   155c4:	bl	112b4 <__errno_location@plt>
   155c8:	mov	r1, #12
   155cc:	str	r1, [r0]
   155d0:	mov	r0, #0
   155d4:	pop	{fp, pc}
   155d8:	push	{r4, r5, r6, sl, fp, lr}
   155dc:	add	fp, sp, #16
   155e0:	mov	r4, r0
   155e4:	bl	111f4 <__fpending@plt>
   155e8:	mov	r5, r0
   155ec:	mov	r0, r4
   155f0:	bl	11200 <ferror_unlocked@plt>
   155f4:	mov	r6, r0
   155f8:	mov	r0, r4
   155fc:	bl	15658 <__assert_fail@plt+0x4284>
   15600:	cmp	r6, #0
   15604:	beq	15624 <__assert_fail@plt+0x4250>
   15608:	mvn	r4, #0
   1560c:	cmp	r0, #0
   15610:	bne	15650 <__assert_fail@plt+0x427c>
   15614:	bl	112b4 <__errno_location@plt>
   15618:	mov	r1, #0
   1561c:	str	r1, [r0]
   15620:	b	15650 <__assert_fail@plt+0x427c>
   15624:	cmp	r0, #0
   15628:	mov	r4, r0
   1562c:	mvnne	r4, #0
   15630:	cmp	r5, #0
   15634:	bne	15650 <__assert_fail@plt+0x427c>
   15638:	cmp	r0, #0
   1563c:	beq	15650 <__assert_fail@plt+0x427c>
   15640:	bl	112b4 <__errno_location@plt>
   15644:	ldr	r0, [r0]
   15648:	subs	r4, r0, #9
   1564c:	mvnne	r4, #0
   15650:	mov	r0, r4
   15654:	pop	{r4, r5, r6, sl, fp, pc}
   15658:	push	{r4, r5, r6, sl, fp, lr}
   1565c:	add	fp, sp, #16
   15660:	sub	sp, sp, #8
   15664:	mov	r4, r0
   15668:	bl	112f0 <fileno@plt>
   1566c:	cmn	r0, #1
   15670:	ble	156e4 <__assert_fail@plt+0x4310>
   15674:	mov	r0, r4
   15678:	bl	11254 <__freading@plt>
   1567c:	cmp	r0, #0
   15680:	beq	156ac <__assert_fail@plt+0x42d8>
   15684:	mov	r0, r4
   15688:	bl	112f0 <fileno@plt>
   1568c:	mov	r1, #1
   15690:	mov	r2, #0
   15694:	mov	r3, #0
   15698:	str	r1, [sp]
   1569c:	bl	111d0 <lseek64@plt>
   156a0:	and	r0, r0, r1
   156a4:	cmn	r0, #1
   156a8:	beq	156e4 <__assert_fail@plt+0x4310>
   156ac:	mov	r0, r4
   156b0:	bl	156f4 <__assert_fail@plt+0x4320>
   156b4:	cmp	r0, #0
   156b8:	beq	156e4 <__assert_fail@plt+0x4310>
   156bc:	bl	112b4 <__errno_location@plt>
   156c0:	ldr	r6, [r0]
   156c4:	mov	r5, r0
   156c8:	mov	r0, r4
   156cc:	bl	11314 <fclose@plt>
   156d0:	cmp	r6, #0
   156d4:	strne	r6, [r5]
   156d8:	mvnne	r0, #0
   156dc:	sub	sp, fp, #16
   156e0:	pop	{r4, r5, r6, sl, fp, pc}
   156e4:	mov	r0, r4
   156e8:	sub	sp, fp, #16
   156ec:	pop	{r4, r5, r6, sl, fp, lr}
   156f0:	b	11314 <fclose@plt>
   156f4:	push	{r4, sl, fp, lr}
   156f8:	add	fp, sp, #8
   156fc:	sub	sp, sp, #8
   15700:	mov	r4, r0
   15704:	cmp	r0, #0
   15708:	beq	15724 <__assert_fail@plt+0x4350>
   1570c:	mov	r0, r4
   15710:	bl	11254 <__freading@plt>
   15714:	cmp	r0, #0
   15718:	ldrbne	r0, [r4, #1]
   1571c:	tstne	r0, #1
   15720:	bne	15734 <__assert_fail@plt+0x4360>
   15724:	mov	r0, r4
   15728:	sub	sp, fp, #8
   1572c:	pop	{r4, sl, fp, lr}
   15730:	b	11134 <fflush@plt>
   15734:	mov	r0, #1
   15738:	mov	r2, #0
   1573c:	mov	r3, #0
   15740:	str	r0, [sp]
   15744:	mov	r0, r4
   15748:	bl	15750 <__assert_fail@plt+0x437c>
   1574c:	b	15724 <__assert_fail@plt+0x4350>
   15750:	push	{r4, r5, r6, r7, fp, lr}
   15754:	add	fp, sp, #16
   15758:	sub	sp, sp, #8
   1575c:	mov	r4, r0
   15760:	ldr	r0, [r0, #4]
   15764:	mov	r5, r3
   15768:	mov	r6, r2
   1576c:	ldr	r1, [r4, #8]
   15770:	cmp	r1, r0
   15774:	bne	15790 <__assert_fail@plt+0x43bc>
   15778:	ldrd	r0, [r4, #16]
   1577c:	cmp	r1, r0
   15780:	bne	15790 <__assert_fail@plt+0x43bc>
   15784:	ldr	r0, [r4, #36]	; 0x24
   15788:	cmp	r0, #0
   1578c:	beq	157a8 <__assert_fail@plt+0x43d4>
   15790:	mov	r0, r4
   15794:	mov	r2, r6
   15798:	mov	r3, r5
   1579c:	sub	sp, fp, #16
   157a0:	pop	{r4, r5, r6, r7, fp, lr}
   157a4:	b	11320 <fseeko64@plt>
   157a8:	ldr	r7, [fp, #8]
   157ac:	mov	r0, r4
   157b0:	bl	112f0 <fileno@plt>
   157b4:	mov	r2, r6
   157b8:	mov	r3, r5
   157bc:	str	r7, [sp]
   157c0:	bl	111d0 <lseek64@plt>
   157c4:	and	r2, r0, r1
   157c8:	cmn	r2, #1
   157cc:	beq	157e8 <__assert_fail@plt+0x4414>
   157d0:	strd	r0, [r4, #80]	; 0x50
   157d4:	ldr	r0, [r4]
   157d8:	bic	r0, r0, #16
   157dc:	str	r0, [r4]
   157e0:	mov	r0, #0
   157e4:	b	157ec <__assert_fail@plt+0x4418>
   157e8:	mvn	r0, #0
   157ec:	sub	sp, fp, #16
   157f0:	pop	{r4, r5, r6, r7, fp, pc}
   157f4:	push	{r4, r5, r6, sl, fp, lr}
   157f8:	add	fp, sp, #16
   157fc:	mov	r5, r0
   15800:	mov	r0, #0
   15804:	mov	r4, r1
   15808:	add	r6, r2, #19
   1580c:	strb	r0, [r2, #20]
   15810:	mov	r0, r5
   15814:	mov	r1, r4
   15818:	mov	r2, #10
   1581c:	mov	r3, #0
   15820:	bl	15c2c <__assert_fail@plt+0x4858>
   15824:	add	r2, r0, r0, lsl #2
   15828:	sub	r2, r5, r2, lsl #1
   1582c:	orr	r2, r2, #48	; 0x30
   15830:	strb	r2, [r6], #-1
   15834:	rsbs	r2, r5, #9
   15838:	mov	r5, r0
   1583c:	rscs	r2, r4, #0
   15840:	mov	r4, r1
   15844:	bcc	15810 <__assert_fail@plt+0x443c>
   15848:	add	r0, r6, #1
   1584c:	pop	{r4, r5, r6, sl, fp, pc}
   15850:	push	{fp, lr}
   15854:	mov	fp, sp
   15858:	mov	r0, #14
   1585c:	bl	1135c <nl_langinfo@plt>
   15860:	movw	r1, #24260	; 0x5ec4
   15864:	cmp	r0, #0
   15868:	movt	r1, #1
   1586c:	movne	r1, r0
   15870:	movw	r0, #26915	; 0x6923
   15874:	ldrb	r2, [r1]
   15878:	movt	r0, #1
   1587c:	cmp	r2, #0
   15880:	movne	r0, r1
   15884:	pop	{fp, pc}
   15888:	push	{r4, r5, r6, r7, fp, lr}
   1588c:	add	fp, sp, #16
   15890:	sub	sp, sp, #8
   15894:	add	r5, sp, #4
   15898:	cmp	r0, #0
   1589c:	mov	r7, r2
   158a0:	mov	r4, r1
   158a4:	movne	r5, r0
   158a8:	mov	r0, r5
   158ac:	bl	1120c <mbrtowc@plt>
   158b0:	mov	r6, r0
   158b4:	cmp	r7, #0
   158b8:	beq	158dc <__assert_fail@plt+0x4508>
   158bc:	cmn	r6, #2
   158c0:	bcc	158dc <__assert_fail@plt+0x4508>
   158c4:	mov	r0, #0
   158c8:	bl	15b34 <__assert_fail@plt+0x4760>
   158cc:	cmp	r0, #0
   158d0:	ldrbeq	r0, [r4]
   158d4:	moveq	r6, #1
   158d8:	streq	r0, [r5]
   158dc:	mov	r0, r6
   158e0:	sub	sp, fp, #16
   158e4:	pop	{r4, r5, r6, r7, fp, pc}
   158e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158ec:	add	fp, sp, #28
   158f0:	sub	sp, sp, #12
   158f4:	mov	r6, r2
   158f8:	mov	sl, r1
   158fc:	cmp	r0, #0
   15900:	beq	15990 <__assert_fail@plt+0x45bc>
   15904:	mov	r7, r0
   15908:	mov	r8, #10
   1590c:	mov	r0, #0
   15910:	mov	r1, #40	; 0x28
   15914:	str	r8, [sp, #8]
   15918:	bl	15588 <__assert_fail@plt+0x41b4>
   1591c:	mvn	r9, #0
   15920:	cmp	r0, #0
   15924:	beq	15ab4 <__assert_fail@plt+0x46e0>
   15928:	mov	r5, r0
   1592c:	add	r4, sp, #8
   15930:	str	r6, [sp, #4]
   15934:	b	15948 <__assert_fail@plt+0x4574>
   15938:	cmn	r6, #1
   1593c:	bgt	15a5c <__assert_fail@plt+0x4688>
   15940:	ldr	r8, [sp, #8]
   15944:	mov	r5, r0
   15948:	mov	r0, r7
   1594c:	mov	r1, sl
   15950:	mov	r2, r5
   15954:	mov	r3, r4
   15958:	bl	112cc <getgrouplist@plt>
   1595c:	ldr	r1, [sp, #8]
   15960:	mov	r6, r0
   15964:	cmn	r0, #1
   15968:	bgt	15978 <__assert_fail@plt+0x45a4>
   1596c:	cmp	r8, r1
   15970:	lsleq	r1, r8, #1
   15974:	streq	r1, [sp, #8]
   15978:	mov	r0, r5
   1597c:	bl	15ac8 <__assert_fail@plt+0x46f4>
   15980:	cmp	r0, #0
   15984:	bne	15938 <__assert_fail@plt+0x4564>
   15988:	mov	r0, r5
   1598c:	b	15ab0 <__assert_fail@plt+0x46dc>
   15990:	mov	r0, #0
   15994:	mov	r1, #0
   15998:	bl	11374 <getgroups@plt>
   1599c:	cmn	r0, #1
   159a0:	str	r0, [sp, #8]
   159a4:	ble	15a6c <__assert_fail@plt+0x4698>
   159a8:	mov	r4, r0
   159ac:	cmn	sl, #1
   159b0:	bne	159bc <__assert_fail@plt+0x45e8>
   159b4:	cmp	r4, #0
   159b8:	bne	159c4 <__assert_fail@plt+0x45f0>
   159bc:	add	r4, r4, #1
   159c0:	str	r4, [sp, #8]
   159c4:	mov	r0, #0
   159c8:	mov	r1, r4
   159cc:	bl	15ac8 <__assert_fail@plt+0x46f4>
   159d0:	mvn	r9, #0
   159d4:	cmp	r0, #0
   159d8:	beq	15ab4 <__assert_fail@plt+0x46e0>
   159dc:	add	r1, sl, #1
   159e0:	cmn	sl, #1
   159e4:	mov	r7, r0
   159e8:	movwne	r1, #1
   159ec:	sub	r0, r4, r1
   159f0:	add	r1, r7, r1, lsl #2
   159f4:	bl	11374 <getgroups@plt>
   159f8:	cmn	r0, #1
   159fc:	ble	15aac <__assert_fail@plt+0x46d8>
   15a00:	cmn	sl, #1
   15a04:	addne	r0, r0, #1
   15a08:	strne	sl, [r7]
   15a0c:	str	r7, [r6]
   15a10:	cmp	r0, #2
   15a14:	blt	15ac0 <__assert_fail@plt+0x46ec>
   15a18:	mov	r2, r7
   15a1c:	add	r1, r7, r0, lsl #2
   15a20:	mov	r9, r0
   15a24:	ldr	r6, [r2], #4
   15a28:	mov	r3, r6
   15a2c:	ldr	r0, [r2]
   15a30:	cmp	r0, r6
   15a34:	cmpne	r0, r3
   15a38:	bne	15a44 <__assert_fail@plt+0x4670>
   15a3c:	sub	r9, r9, #1
   15a40:	b	15a4c <__assert_fail@plt+0x4678>
   15a44:	str	r0, [r7, #4]!
   15a48:	mov	r3, r0
   15a4c:	add	r2, r2, #4
   15a50:	cmp	r2, r1
   15a54:	bcc	15a2c <__assert_fail@plt+0x4658>
   15a58:	b	15ab4 <__assert_fail@plt+0x46e0>
   15a5c:	ldr	r1, [sp, #4]
   15a60:	str	r0, [r1]
   15a64:	ldr	r9, [sp, #8]
   15a68:	b	15ab4 <__assert_fail@plt+0x46e0>
   15a6c:	bl	112b4 <__errno_location@plt>
   15a70:	ldr	r0, [r0]
   15a74:	mvn	r9, #0
   15a78:	cmp	r0, #38	; 0x26
   15a7c:	bne	15ab4 <__assert_fail@plt+0x46e0>
   15a80:	mov	r0, #0
   15a84:	mov	r1, #4
   15a88:	bl	15588 <__assert_fail@plt+0x41b4>
   15a8c:	cmp	r0, #0
   15a90:	beq	15ab4 <__assert_fail@plt+0x46e0>
   15a94:	add	r9, sl, #1
   15a98:	cmn	sl, #1
   15a9c:	str	r0, [r6]
   15aa0:	str	sl, [r0]
   15aa4:	movwne	r9, #1
   15aa8:	b	15ab4 <__assert_fail@plt+0x46e0>
   15aac:	mov	r0, r7
   15ab0:	bl	12160 <__assert_fail@plt+0xd8c>
   15ab4:	mov	r0, r9
   15ab8:	sub	sp, fp, #28
   15abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ac0:	mov	r9, r0
   15ac4:	b	15ab4 <__assert_fail@plt+0x46e0>
   15ac8:	push	{fp, lr}
   15acc:	mov	fp, sp
   15ad0:	cmp	r1, #536870912	; 0x20000000
   15ad4:	bcc	15aec <__assert_fail@plt+0x4718>
   15ad8:	bl	112b4 <__errno_location@plt>
   15adc:	mov	r1, #12
   15ae0:	str	r1, [r0]
   15ae4:	mov	r0, #0
   15ae8:	pop	{fp, pc}
   15aec:	lsl	r1, r1, #2
   15af0:	bl	15588 <__assert_fail@plt+0x41b4>
   15af4:	pop	{fp, pc}
   15af8:	cmp	r2, #0
   15afc:	beq	15b2c <__assert_fail@plt+0x4758>
   15b00:	mvn	r3, #0
   15b04:	udiv	r3, r3, r2
   15b08:	cmp	r3, r1
   15b0c:	bcs	15b2c <__assert_fail@plt+0x4758>
   15b10:	push	{fp, lr}
   15b14:	mov	fp, sp
   15b18:	bl	112b4 <__errno_location@plt>
   15b1c:	mov	r1, #12
   15b20:	str	r1, [r0]
   15b24:	mov	r0, #0
   15b28:	pop	{fp, pc}
   15b2c:	mul	r1, r2, r1
   15b30:	b	15588 <__assert_fail@plt+0x41b4>
   15b34:	push	{r4, sl, fp, lr}
   15b38:	add	fp, sp, #8
   15b3c:	sub	sp, sp, #264	; 0x108
   15b40:	add	r1, sp, #7
   15b44:	movw	r2, #257	; 0x101
   15b48:	bl	15b98 <__assert_fail@plt+0x47c4>
   15b4c:	mov	r4, #0
   15b50:	cmp	r0, #0
   15b54:	bne	15b8c <__assert_fail@plt+0x47b8>
   15b58:	movw	r1, #26921	; 0x6929
   15b5c:	add	r0, sp, #7
   15b60:	movt	r1, #1
   15b64:	bl	1111c <strcmp@plt>
   15b68:	cmp	r0, #0
   15b6c:	beq	15b8c <__assert_fail@plt+0x47b8>
   15b70:	movw	r1, #26923	; 0x692b
   15b74:	add	r0, sp, #7
   15b78:	movt	r1, #1
   15b7c:	bl	1111c <strcmp@plt>
   15b80:	mov	r4, r0
   15b84:	cmp	r0, #0
   15b88:	movwne	r4, #1
   15b8c:	mov	r0, r4
   15b90:	sub	sp, fp, #8
   15b94:	pop	{r4, sl, fp, pc}
   15b98:	push	{r4, r5, r6, r7, fp, lr}
   15b9c:	add	fp, sp, #16
   15ba0:	mov	r4, r1
   15ba4:	mov	r1, #0
   15ba8:	mov	r6, r2
   15bac:	bl	11338 <setlocale@plt>
   15bb0:	cmp	r0, #0
   15bb4:	beq	15be0 <__assert_fail@plt+0x480c>
   15bb8:	mov	r7, r0
   15bbc:	bl	1129c <strlen@plt>
   15bc0:	cmp	r0, r6
   15bc4:	bcs	15bf4 <__assert_fail@plt+0x4820>
   15bc8:	add	r2, r0, #1
   15bcc:	mov	r0, r4
   15bd0:	mov	r1, r7
   15bd4:	bl	11158 <memcpy@plt>
   15bd8:	mov	r5, #0
   15bdc:	b	15c1c <__assert_fail@plt+0x4848>
   15be0:	cmp	r6, #0
   15be4:	mov	r5, #22
   15be8:	movne	r0, #0
   15bec:	strbne	r0, [r4]
   15bf0:	b	15c1c <__assert_fail@plt+0x4848>
   15bf4:	mov	r5, #34	; 0x22
   15bf8:	cmp	r6, #0
   15bfc:	beq	15c1c <__assert_fail@plt+0x4848>
   15c00:	sub	r6, r6, #1
   15c04:	mov	r0, r4
   15c08:	mov	r1, r7
   15c0c:	mov	r2, r6
   15c10:	bl	11158 <memcpy@plt>
   15c14:	mov	r0, #0
   15c18:	strb	r0, [r4, r6]
   15c1c:	mov	r0, r5
   15c20:	pop	{r4, r5, r6, r7, fp, pc}
   15c24:	mov	r1, #0
   15c28:	b	11338 <setlocale@plt>
   15c2c:	cmp	r3, #0
   15c30:	cmpeq	r2, #0
   15c34:	bne	15c4c <__assert_fail@plt+0x4878>
   15c38:	cmp	r1, #0
   15c3c:	cmpeq	r0, #0
   15c40:	mvnne	r1, #0
   15c44:	mvnne	r0, #0
   15c48:	b	15c68 <__assert_fail@plt+0x4894>
   15c4c:	sub	sp, sp, #8
   15c50:	push	{sp, lr}
   15c54:	bl	15c78 <__assert_fail@plt+0x48a4>
   15c58:	ldr	lr, [sp, #4]
   15c5c:	add	sp, sp, #8
   15c60:	pop	{r2, r3}
   15c64:	bx	lr
   15c68:	push	{r1, lr}
   15c6c:	mov	r0, #8
   15c70:	bl	11104 <raise@plt>
   15c74:	pop	{r1, pc}
   15c78:	cmp	r1, r3
   15c7c:	cmpeq	r0, r2
   15c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c84:	mov	r4, r0
   15c88:	movcc	r0, #0
   15c8c:	mov	r5, r1
   15c90:	ldr	lr, [sp, #36]	; 0x24
   15c94:	movcc	r1, r0
   15c98:	bcc	15d94 <__assert_fail@plt+0x49c0>
   15c9c:	cmp	r3, #0
   15ca0:	clzeq	ip, r2
   15ca4:	clzne	ip, r3
   15ca8:	addeq	ip, ip, #32
   15cac:	cmp	r5, #0
   15cb0:	clzeq	r1, r4
   15cb4:	addeq	r1, r1, #32
   15cb8:	clzne	r1, r5
   15cbc:	sub	ip, ip, r1
   15cc0:	sub	sl, ip, #32
   15cc4:	lsl	r9, r3, ip
   15cc8:	rsb	fp, ip, #32
   15ccc:	orr	r9, r9, r2, lsl sl
   15cd0:	orr	r9, r9, r2, lsr fp
   15cd4:	lsl	r8, r2, ip
   15cd8:	cmp	r5, r9
   15cdc:	cmpeq	r4, r8
   15ce0:	movcc	r0, #0
   15ce4:	movcc	r1, r0
   15ce8:	bcc	15d04 <__assert_fail@plt+0x4930>
   15cec:	mov	r0, #1
   15cf0:	subs	r4, r4, r8
   15cf4:	lsl	r1, r0, sl
   15cf8:	orr	r1, r1, r0, lsr fp
   15cfc:	lsl	r0, r0, ip
   15d00:	sbc	r5, r5, r9
   15d04:	cmp	ip, #0
   15d08:	beq	15d94 <__assert_fail@plt+0x49c0>
   15d0c:	lsr	r6, r8, #1
   15d10:	orr	r6, r6, r9, lsl #31
   15d14:	lsr	r7, r9, #1
   15d18:	mov	r2, ip
   15d1c:	b	15d40 <__assert_fail@plt+0x496c>
   15d20:	subs	r3, r4, r6
   15d24:	sbc	r8, r5, r7
   15d28:	adds	r3, r3, r3
   15d2c:	adc	r8, r8, r8
   15d30:	adds	r4, r3, #1
   15d34:	adc	r5, r8, #0
   15d38:	subs	r2, r2, #1
   15d3c:	beq	15d5c <__assert_fail@plt+0x4988>
   15d40:	cmp	r5, r7
   15d44:	cmpeq	r4, r6
   15d48:	bcs	15d20 <__assert_fail@plt+0x494c>
   15d4c:	adds	r4, r4, r4
   15d50:	adc	r5, r5, r5
   15d54:	subs	r2, r2, #1
   15d58:	bne	15d40 <__assert_fail@plt+0x496c>
   15d5c:	lsr	r3, r4, ip
   15d60:	orr	r3, r3, r5, lsl fp
   15d64:	lsr	r2, r5, ip
   15d68:	orr	r3, r3, r5, lsr sl
   15d6c:	adds	r0, r0, r4
   15d70:	mov	r4, r3
   15d74:	lsl	r3, r2, ip
   15d78:	orr	r3, r3, r4, lsl sl
   15d7c:	lsl	ip, r4, ip
   15d80:	orr	r3, r3, r4, lsr fp
   15d84:	adc	r1, r1, r5
   15d88:	subs	r0, r0, ip
   15d8c:	mov	r5, r2
   15d90:	sbc	r1, r1, r3
   15d94:	cmp	lr, #0
   15d98:	strdne	r4, [lr]
   15d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15da0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15da4:	mov	r7, r0
   15da8:	ldr	r6, [pc, #72]	; 15df8 <__assert_fail@plt+0x4a24>
   15dac:	ldr	r5, [pc, #72]	; 15dfc <__assert_fail@plt+0x4a28>
   15db0:	add	r6, pc, r6
   15db4:	add	r5, pc, r5
   15db8:	sub	r6, r6, r5
   15dbc:	mov	r8, r1
   15dc0:	mov	r9, r2
   15dc4:	bl	110c0 <calloc@plt-0x20>
   15dc8:	asrs	r6, r6, #2
   15dcc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15dd0:	mov	r4, #0
   15dd4:	add	r4, r4, #1
   15dd8:	ldr	r3, [r5], #4
   15ddc:	mov	r2, r9
   15de0:	mov	r1, r8
   15de4:	mov	r0, r7
   15de8:	blx	r3
   15dec:	cmp	r6, r4
   15df0:	bne	15dd4 <__assert_fail@plt+0x4a00>
   15df4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15df8:	andeq	r1, r1, r4, asr r1
   15dfc:	andeq	r1, r1, ip, asr #2
   15e00:	bx	lr
   15e04:	ldr	r3, [pc, #12]	; 15e18 <__assert_fail@plt+0x4a44>
   15e08:	mov	r1, #0
   15e0c:	add	r3, pc, r3
   15e10:	ldr	r2, [r3]
   15e14:	b	112c0 <__cxa_atexit@plt>
   15e18:	andeq	r1, r1, r0, lsl #6

Disassembly of section .fini:

00015e1c <.fini>:
   15e1c:	push	{r3, lr}
   15e20:	pop	{r3, pc}
