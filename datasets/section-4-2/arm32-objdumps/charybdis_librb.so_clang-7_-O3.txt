
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004c24 <_init>:
    4c24:	push	{r3, lr}
    4c28:	bl	5570 <call_weak_fn>
    4c2c:	pop	{r3, pc}

Disassembly of section .plt:

00004c30 <.plt>:
    4c30:	push	{lr}		; (str lr, [sp, #-4]!)
    4c34:	ldr	lr, [pc, #4]	; 4c40 <.plt+0x10>
    4c38:	add	lr, pc, lr
    4c3c:	ldr	pc, [lr, #8]!
    4c40:	.word	0x000273c0

00004c44 <rb_helper_run@plt>:
    4c44:	add	ip, pc, #0, 12
    4c48:	add	ip, ip, #159744	; 0x27000
    4c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00004c50 <TLS_method@plt>:
    4c50:	add	ip, pc, #0, 12
    4c54:	add	ip, ip, #159744	; 0x27000
    4c58:	ldr	pc, [ip, #952]!	; 0x3b8

00004c5c <open@plt>:
    4c5c:	add	ip, pc, #0, 12
    4c60:	add	ip, ip, #159744	; 0x27000
    4c64:	ldr	pc, [ip, #944]!	; 0x3b0

00004c68 <rb_init_netio@plt>:
    4c68:	add	ip, pc, #0, 12
    4c6c:	add	ip, ip, #159744	; 0x27000
    4c70:	ldr	pc, [ip, #936]!	; 0x3a8

00004c74 <sigemptyset@plt>:
    4c74:	add	ip, pc, #0, 12
    4c78:	add	ip, ip, #159744	; 0x27000
    4c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00004c80 <strerror@plt>:
    4c80:	add	ip, pc, #0, 12
    4c84:	add	ip, ip, #159744	; 0x27000
    4c88:	ldr	pc, [ip, #920]!	; 0x398

00004c8c <rb_radixtree_elem_delete@plt>:
    4c8c:	add	ip, pc, #0, 12
    4c90:	add	ip, ip, #159744	; 0x27000
    4c94:	ldr	pc, [ip, #912]!	; 0x390

00004c98 <getdtablesize@plt>:
    4c98:	add	ip, pc, #0, 12
    4c9c:	add	ip, ip, #159744	; 0x27000
    4ca0:	ldr	pc, [ip, #904]!	; 0x388

00004ca4 <abort@plt>:
    4ca4:	add	ip, pc, #0, 12
    4ca8:	add	ip, ip, #159744	; 0x27000
    4cac:	ldr	pc, [ip, #896]!	; 0x380

00004cb0 <connect@plt>:
    4cb0:	add	ip, pc, #0, 12
    4cb4:	add	ip, ip, #159744	; 0x27000
    4cb8:	ldr	pc, [ip, #888]!	; 0x378

00004cbc <rb_ignore_errno@plt>:
    4cbc:	add	ip, pc, #0, 12
    4cc0:	add	ip, ip, #159744	; 0x27000
    4cc4:	ldr	pc, [ip, #880]!	; 0x370

00004cc8 <rb_settimeout@plt>:
    4cc8:	add	ip, pc, #0, 12
    4ccc:	add	ip, ip, #159744	; 0x27000
    4cd0:	ldr	pc, [ip, #872]!	; 0x368

00004cd4 <SSL_CTX_set_cipher_list@plt>:
    4cd4:	add	ip, pc, #0, 12
    4cd8:	add	ip, ip, #159744	; 0x27000
    4cdc:	ldr	pc, [ip, #864]!	; 0x360

00004ce0 <ERR_get_error@plt>:
    4ce0:	add	ip, pc, #0, 12
    4ce4:	add	ip, ip, #159744	; 0x27000
    4ce8:	ldr	pc, [ip, #856]!	; 0x358

00004cec <rb_radixtree_foreach_start@plt>:
    4cec:	add	ip, pc, #0, 12
    4cf0:	add	ip, ip, #159744	; 0x27000
    4cf4:	ldr	pc, [ip, #848]!	; 0x350

00004cf8 <strcasestr@plt>:
    4cf8:	add	ip, pc, #0, 12
    4cfc:	add	ip, ip, #159744	; 0x27000
    4d00:	ldr	pc, [ip, #840]!	; 0x348

00004d04 <rb_connect_tcp@plt>:
    4d04:	add	ip, pc, #0, 12
    4d08:	add	ip, ip, #159744	; 0x27000
    4d0c:	ldr	pc, [ip, #832]!	; 0x340

00004d10 <RAND_load_file@plt>:
    4d10:	add	ip, pc, #0, 12
    4d14:	add	ip, ip, #159744	; 0x27000
    4d18:	ldr	pc, [ip, #824]!	; 0x338

00004d1c <signalfd@plt>:
    4d1c:	add	ip, pc, #0, 12
    4d20:	add	ip, ip, #159744	; 0x27000
    4d24:	ldr	pc, [ip, #816]!	; 0x330

00004d28 <memcmp@plt>:
    4d28:	add	ip, pc, #0, 12
    4d2c:	add	ip, ip, #159744	; 0x27000
    4d30:	ldr	pc, [ip, #808]!	; 0x328

00004d34 <SSL_CTX_free@plt>:
    4d34:	add	ip, pc, #0, 12
    4d38:	add	ip, ip, #159744	; 0x27000
    4d3c:	ldr	pc, [ip, #800]!	; 0x320

00004d40 <rb_getmaxconnect@plt>:
    4d40:	add	ip, pc, #0, 12
    4d44:	add	ip, ip, #159744	; 0x27000
    4d48:	ldr	pc, [ip, #792]!	; 0x318

00004d4c <sigwaitinfo@plt>:
    4d4c:	add	ip, pc, #0, 12
    4d50:	add	ip, ip, #159744	; 0x27000
    4d54:	ldr	pc, [ip, #784]!	; 0x310

00004d58 <__libc_current_sigrtmin@plt>:
    4d58:	add	ip, pc, #0, 12
    4d5c:	add	ip, ip, #159744	; 0x27000
    4d60:	ldr	pc, [ip, #776]!	; 0x308

00004d64 <__xstat@plt>:
    4d64:	add	ip, pc, #0, 12
    4d68:	add	ip, ip, #159744	; 0x27000
    4d6c:	ldr	pc, [ip, #768]!	; 0x300

00004d70 <rb_event_delete@plt>:
    4d70:	add	ip, pc, #0, 12
    4d74:	add	ip, ip, #159744	; 0x27000
    4d78:	ldr	pc, [ip, #760]!	; 0x2f8

00004d7c <rb_setselect@plt>:
    4d7c:	add	ip, pc, #0, 12
    4d80:	add	ip, ip, #159744	; 0x27000
    4d84:	ldr	pc, [ip, #752]!	; 0x2f0

00004d88 <rb_fd_ssl@plt>:
    4d88:	add	ip, pc, #0, 12
    4d8c:	add	ip, ip, #159744	; 0x27000
    4d90:	ldr	pc, [ip, #744]!	; 0x2e8

00004d94 <sigtimedwait@plt>:
    4d94:	add	ip, pc, #0, 12
    4d98:	add	ip, ip, #159744	; 0x27000
    4d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00004da0 <rb_setenv@plt>:
    4da0:	add	ip, pc, #0, 12
    4da4:	add	ip, ip, #159744	; 0x27000
    4da8:	ldr	pc, [ip, #728]!	; 0x2d8

00004dac <signal@plt>:
    4dac:	add	ip, pc, #0, 12
    4db0:	add	ip, ip, #159744	; 0x27000
    4db4:	ldr	pc, [ip, #720]!	; 0x2d0

00004db8 <rb_get_fd@plt>:
    4db8:	add	ip, pc, #0, 12
    4dbc:	add	ip, ip, #159744	; 0x27000
    4dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00004dc4 <epoll_create@plt>:
    4dc4:	add	ip, pc, #0, 12
    4dc8:	add	ip, ip, #159744	; 0x27000
    4dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00004dd0 <rb_clear_patricia@plt>:
    4dd0:	add	ip, pc, #0, 12
    4dd4:	add	ip, ip, #159744	; 0x27000
    4dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00004ddc <__gmon_start__@plt>:
    4ddc:	add	ip, pc, #0, 12
    4de0:	add	ip, ip, #159744	; 0x27000
    4de4:	ldr	pc, [ip, #688]!	; 0x2b0

00004de8 <SSL_CTX_clear_options@plt>:
    4de8:	add	ip, pc, #0, 12
    4dec:	add	ip, ip, #159744	; 0x27000
    4df0:	ldr	pc, [ip, #680]!	; 0x2a8

00004df4 <SSL_get_current_cipher@plt>:
    4df4:	add	ip, pc, #0, 12
    4df8:	add	ip, ip, #159744	; 0x27000
    4dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00004e00 <timer_create@plt>:
    4e00:	add	ip, pc, #0, 12
    4e04:	add	ip, ip, #159744	; 0x27000
    4e08:	ldr	pc, [ip, #664]!	; 0x298

00004e0c <X509_get_X509_PUBKEY@plt>:
    4e0c:	add	ip, pc, #0, 12
    4e10:	add	ip, ip, #159744	; 0x27000
    4e14:	ldr	pc, [ip, #656]!	; 0x290

00004e18 <rb_select@plt>:
    4e18:	add	ip, pc, #0, 12
    4e1c:	add	ip, ip, #159744	; 0x27000
    4e20:	ldr	pc, [ip, #648]!	; 0x288

00004e24 <vsnprintf@plt>:
    4e24:	add	ip, pc, #0, 12
    4e28:	add	ip, ip, #159744	; 0x27000
    4e2c:	ldr	pc, [ip, #640]!	; 0x280

00004e30 <socketpair@plt>:
    4e30:	add	ip, pc, #0, 12
    4e34:	add	ip, ip, #159744	; 0x27000
    4e38:	ldr	pc, [ip, #632]!	; 0x278

00004e3c <strncpy@plt>:
    4e3c:	add	ip, pc, #0, 12
    4e40:	add	ip, ip, #159744	; 0x27000
    4e44:	ldr	pc, [ip, #624]!	; 0x270

00004e48 <fclose@plt>:
    4e48:	add	ip, pc, #0, 12
    4e4c:	add	ip, ip, #159744	; 0x27000
    4e50:	ldr	pc, [ip, #616]!	; 0x268

00004e54 <recv@plt>:
    4e54:	add	ip, pc, #0, 12
    4e58:	add	ip, ip, #159744	; 0x27000
    4e5c:	ldr	pc, [ip, #608]!	; 0x260

00004e60 <getenv@plt>:
    4e60:	add	ip, pc, #0, 12
    4e64:	add	ip, ip, #159744	; 0x27000
    4e68:	ldr	pc, [ip, #600]!	; 0x258

00004e6c <ERR_error_string_n@plt>:
    4e6c:	add	ip, pc, #0, 12
    4e70:	add	ip, ip, #159744	; 0x27000
    4e74:	ldr	pc, [ip, #592]!	; 0x250

00004e78 <strchr@plt>:
    4e78:	add	ip, pc, #0, 12
    4e7c:	add	ip, ip, #159744	; 0x27000
    4e80:	ldr	pc, [ip, #584]!	; 0x248

00004e84 <rb_gettimeofday@plt>:
    4e84:	add	ip, pc, #0, 12
    4e88:	add	ip, ip, #159744	; 0x27000
    4e8c:	ldr	pc, [ip, #576]!	; 0x240

00004e90 <strcasecmp@plt>:
    4e90:	add	ip, pc, #0, 12
    4e94:	add	ip, ip, #159744	; 0x27000
    4e98:	ldr	pc, [ip, #568]!	; 0x238

00004e9c <listen@plt>:
    4e9c:	add	ip, pc, #0, 12
    4ea0:	add	ip, ip, #159744	; 0x27000
    4ea4:	ldr	pc, [ip, #560]!	; 0x230

00004ea8 <calloc@plt>:
    4ea8:	add	ip, pc, #0, 12
    4eac:	add	ip, ip, #159744	; 0x27000
    4eb0:	ldr	pc, [ip, #552]!	; 0x228

00004eb4 <SSL_write@plt>:
    4eb4:	add	ip, pc, #0, 12
    4eb8:	add	ip, ip, #159744	; 0x27000
    4ebc:	ldr	pc, [ip, #544]!	; 0x220

00004ec0 <rb_event_init@plt>:
    4ec0:	add	ip, pc, #0, 12
    4ec4:	add	ip, ip, #159744	; 0x27000
    4ec8:	ldr	pc, [ip, #536]!	; 0x218

00004ecc <fopen@plt>:
    4ecc:	add	ip, pc, #0, 12
    4ed0:	add	ip, ip, #159744	; 0x27000
    4ed4:	ldr	pc, [ip, #528]!	; 0x210

00004ed8 <rb_set_nb@plt>:
    4ed8:	add	ip, pc, #0, 12
    4edc:	add	ip, ip, #159744	; 0x27000
    4ee0:	ldr	pc, [ip, #520]!	; 0x208

00004ee4 <memset@plt>:
    4ee4:	add	ip, pc, #0, 12
    4ee8:	add	ip, ip, #159744	; 0x27000
    4eec:	ldr	pc, [ip, #512]!	; 0x200

00004ef0 <rb_inet_pton@plt>:
    4ef0:	add	ip, pc, #0, 12
    4ef4:	add	ip, ip, #159744	; 0x27000
    4ef8:	ldr	pc, [ip, #504]!	; 0x1f8

00004efc <strrchr@plt>:
    4efc:	add	ip, pc, #0, 12
    4f00:	add	ip, ip, #159744	; 0x27000
    4f04:	ldr	pc, [ip, #496]!	; 0x1f0

00004f08 <rb_write@plt>:
    4f08:	add	ip, pc, #0, 12
    4f0c:	add	ip, ip, #159744	; 0x27000
    4f10:	ldr	pc, [ip, #488]!	; 0x1e8

00004f14 <SSL_set_fd@plt>:
    4f14:	add	ip, pc, #0, 12
    4f18:	add	ip, ip, #159744	; 0x27000
    4f1c:	ldr	pc, [ip, #480]!	; 0x1e0

00004f20 <SSL_CTX_ctrl@plt>:
    4f20:	add	ip, pc, #0, 12
    4f24:	add	ip, ip, #159744	; 0x27000
    4f28:	ldr	pc, [ip, #472]!	; 0x1d8

00004f2c <rb_linebuf_parse@plt>:
    4f2c:	add	ip, pc, #0, 12
    4f30:	add	ip, ip, #159744	; 0x27000
    4f34:	ldr	pc, [ip, #464]!	; 0x1d0

00004f38 <writev@plt>:
    4f38:	add	ip, pc, #0, 12
    4f3c:	add	ip, ip, #159744	; 0x27000
    4f40:	ldr	pc, [ip, #456]!	; 0x1c8

00004f44 <rb_fsnprint@plt>:
    4f44:	add	ip, pc, #0, 12
    4f48:	add	ip, ip, #159744	; 0x27000
    4f4c:	ldr	pc, [ip, #448]!	; 0x1c0

00004f50 <rb_strlcpy@plt>:
    4f50:	add	ip, pc, #0, 12
    4f54:	add	ip, ip, #159744	; 0x27000
    4f58:	ldr	pc, [ip, #440]!	; 0x1b8

00004f5c <rb_patricia_search_best2@plt>:
    4f5c:	add	ip, pc, #0, 12
    4f60:	add	ip, ip, #159744	; 0x27000
    4f64:	ldr	pc, [ip, #432]!	; 0x1b0

00004f68 <SSL_CIPHER_get_name@plt>:
    4f68:	add	ip, pc, #0, 12
    4f6c:	add	ip, ip, #159744	; 0x27000
    4f70:	ldr	pc, [ip, #424]!	; 0x1a8

00004f74 <posix_spawnattr_init@plt>:
    4f74:	add	ip, pc, #0, 12
    4f78:	add	ip, ip, #159744	; 0x27000
    4f7c:	ldr	pc, [ip, #416]!	; 0x1a0

00004f80 <OpenSSL_version_num@plt>:
    4f80:	add	ip, pc, #0, 12
    4f84:	add	ip, ip, #159744	; 0x27000
    4f88:	ldr	pc, [ip, #408]!	; 0x198

00004f8c <rb_kill@plt>:
    4f8c:	add	ip, pc, #0, 12
    4f90:	add	ip, ip, #159744	; 0x27000
    4f94:	ldr	pc, [ip, #400]!	; 0x190

00004f98 <free@plt>:
    4f98:	add	ip, pc, #0, 12
    4f9c:	add	ip, ip, #159744	; 0x27000
    4fa0:	ldr	pc, [ip, #392]!	; 0x188

00004fa4 <sendmsg@plt>:
    4fa4:	add	ip, pc, #0, 12
    4fa8:	add	ip, ip, #159744	; 0x27000
    4fac:	ldr	pc, [ip, #384]!	; 0x180

00004fb0 <read@plt>:
    4fb0:	add	ip, pc, #0, 12
    4fb4:	add	ip, ip, #159744	; 0x27000
    4fb8:	ldr	pc, [ip, #376]!	; 0x178

00004fbc <rb_radixtree_elem_add@plt>:
    4fbc:	add	ip, pc, #0, 12
    4fc0:	add	ip, ip, #159744	; 0x27000
    4fc4:	ldr	pc, [ip, #368]!	; 0x170

00004fc8 <write@plt>:
    4fc8:	add	ip, pc, #0, 12
    4fcc:	add	ip, ip, #159744	; 0x27000
    4fd0:	ldr	pc, [ip, #360]!	; 0x168

00004fd4 <SSL_new@plt>:
    4fd4:	add	ip, pc, #0, 12
    4fd8:	add	ip, ip, #159744	; 0x27000
    4fdc:	ldr	pc, [ip, #352]!	; 0x160

00004fe0 <access@plt>:
    4fe0:	add	ip, pc, #0, 12
    4fe4:	add	ip, ip, #159744	; 0x27000
    4fe8:	ldr	pc, [ip, #344]!	; 0x158

00004fec <rb_lib_loop@plt>:
    4fec:	add	ip, pc, #0, 12
    4ff0:	add	ip, ip, #159744	; 0x27000
    4ff4:	ldr	pc, [ip, #336]!	; 0x150

00004ff8 <timer_settime@plt>:
    4ff8:	add	ip, pc, #0, 12
    4ffc:	add	ip, ip, #159744	; 0x27000
    5000:	ldr	pc, [ip, #328]!	; 0x148

00005004 <gettimeofday@plt>:
    5004:	add	ip, pc, #0, 12
    5008:	add	ip, ip, #159744	; 0x27000
    500c:	ldr	pc, [ip, #320]!	; 0x140

00005010 <accept@plt>:
    5010:	add	ip, pc, #0, 12
    5014:	add	ip, ip, #159744	; 0x27000
    5018:	ldr	pc, [ip, #312]!	; 0x138

0000501c <SSL_read@plt>:
    501c:	add	ip, pc, #0, 12
    5020:	add	ip, ip, #159744	; 0x27000
    5024:	ldr	pc, [ip, #304]!	; 0x130

00005028 <rb_read@plt>:
    5028:	add	ip, pc, #0, 12
    502c:	add	ip, ip, #159744	; 0x27000
    5030:	ldr	pc, [ip, #296]!	; 0x128

00005034 <socket@plt>:
    5034:	add	ip, pc, #0, 12
    5038:	add	ip, ip, #159744	; 0x27000
    503c:	ldr	pc, [ip, #288]!	; 0x120

00005040 <rb_linebuf_get@plt>:
    5040:	add	ip, pc, #0, 12
    5044:	add	ip, ip, #159744	; 0x27000
    5048:	ldr	pc, [ip, #280]!	; 0x118

0000504c <epoll_wait@plt>:
    504c:	add	ip, pc, #0, 12
    5050:	add	ip, ip, #159744	; 0x27000
    5054:	ldr	pc, [ip, #272]!	; 0x110

00005058 <SSL_do_handshake@plt>:
    5058:	add	ip, pc, #0, 12
    505c:	add	ip, ip, #159744	; 0x27000
    5060:	ldr	pc, [ip, #264]!	; 0x108

00005064 <rb_linebuf_flush@plt>:
    5064:	add	ip, pc, #0, 12
    5068:	add	ip, ip, #159744	; 0x27000
    506c:	ldr	pc, [ip, #256]!	; 0x100

00005070 <posix_spawn@plt>:
    5070:	add	ip, pc, #0, 12
    5074:	add	ip, ip, #159744	; 0x27000
    5078:	ldr	pc, [ip, #248]!	; 0xf8

0000507c <strlen@plt>:
    507c:	add	ip, pc, #0, 12
    5080:	add	ip, ip, #159744	; 0x27000
    5084:	ldr	pc, [ip, #240]!	; 0xf0

00005088 <rb_current_time@plt>:
    5088:	add	ip, pc, #0, 12
    508c:	add	ip, ip, #159744	; 0x27000
    5090:	ldr	pc, [ip, #232]!	; 0xe8

00005094 <strtoul@plt>:
    5094:	add	ip, pc, #0, 12
    5098:	add	ip, ip, #159744	; 0x27000
    509c:	ldr	pc, [ip, #224]!	; 0xe0

000050a0 <memcpy@plt>:
    50a0:	add	ip, pc, #0, 12
    50a4:	add	ip, ip, #159744	; 0x27000
    50a8:	ldr	pc, [ip, #216]!	; 0xd8

000050ac <PEM_read_X509@plt>:
    50ac:	add	ip, pc, #0, 12
    50b0:	add	ip, ip, #159744	; 0x27000
    50b4:	ldr	pc, [ip, #208]!	; 0xd0

000050b8 <posix_spawnattr_setflags@plt>:
    50b8:	add	ip, pc, #0, 12
    50bc:	add	ip, ip, #159744	; 0x27000
    50c0:	ldr	pc, [ip, #200]!	; 0xc8

000050c4 <__ctype_tolower_loc@plt>:
    50c4:	add	ip, pc, #0, 12
    50c8:	add	ip, ip, #159744	; 0x27000
    50cc:	ldr	pc, [ip, #192]!	; 0xc0

000050d0 <SSL_CTX_use_certificate_chain_file@plt>:
    50d0:	add	ip, pc, #0, 12
    50d4:	add	ip, ip, #159744	; 0x27000
    50d8:	ldr	pc, [ip, #184]!	; 0xb8

000050dc <rb_free_rb_dlink_node@plt>:
    50dc:	add	ip, pc, #0, 12
    50e0:	add	ip, ip, #159744	; 0x27000
    50e4:	ldr	pc, [ip, #176]!	; 0xb0

000050e8 <SSL_CTX_set_options@plt>:
    50e8:	add	ip, pc, #0, 12
    50ec:	add	ip, ip, #159744	; 0x27000
    50f0:	ldr	pc, [ip, #168]!	; 0xa8

000050f4 <posix_spawnattr_destroy@plt>:
    50f4:	add	ip, pc, #0, 12
    50f8:	add	ip, ip, #159744	; 0x27000
    50fc:	ldr	pc, [ip, #160]!	; 0xa0

00005100 <rb_close@plt>:
    5100:	add	ip, pc, #0, 12
    5104:	add	ip, ip, #159744	; 0x27000
    5108:	ldr	pc, [ip, #152]!	; 0x98

0000510c <strtol@plt>:
    510c:	add	ip, pc, #0, 12
    5110:	add	ip, ip, #159744	; 0x27000
    5114:	ldr	pc, [ip, #144]!	; 0x90

00005118 <sigaddset@plt>:
    5118:	add	ip, pc, #0, 12
    511c:	add	ip, ip, #159744	; 0x27000
    5120:	ldr	pc, [ip, #136]!	; 0x88

00005124 <strcpy@plt>:
    5124:	add	ip, pc, #0, 12
    5128:	add	ip, ip, #159744	; 0x27000
    512c:	ldr	pc, [ip, #128]!	; 0x80

00005130 <waitpid@plt>:
    5130:	add	ip, pc, #0, 12
    5134:	add	ip, ip, #159744	; 0x27000
    5138:	ldr	pc, [ip, #120]!	; 0x78

0000513c <rb_run_one_event@plt>:
    513c:	add	ip, pc, #0, 12
    5140:	add	ip, ip, #159744	; 0x27000
    5144:	ldr	pc, [ip, #112]!	; 0x70

00005148 <strncat@plt>:
    5148:	add	ip, pc, #0, 12
    514c:	add	ip, ip, #159744	; 0x27000
    5150:	ldr	pc, [ip, #104]!	; 0x68

00005154 <rb_bh_free@plt>:
    5154:	add	ip, pc, #0, 12
    5158:	add	ip, ip, #159744	; 0x27000
    515c:	ldr	pc, [ip, #96]!	; 0x60

00005160 <rb_init_rb_dlink_nodes@plt>:
    5160:	add	ip, pc, #0, 12
    5164:	add	ip, ip, #159744	; 0x27000
    5168:	ldr	pc, [ip, #88]!	; 0x58

0000516c <EVP_sha1@plt>:
    516c:	add	ip, pc, #0, 12
    5170:	add	ip, ip, #159744	; 0x27000
    5174:	ldr	pc, [ip, #80]!	; 0x50

00005178 <rb_patricia_lookup@plt>:
    5178:	add	ip, pc, #0, 12
    517c:	add	ip, ip, #159744	; 0x27000
    5180:	ldr	pc, [ip, #72]!	; 0x48

00005184 <shutdown@plt>:
    5184:	add	ip, pc, #0, 12
    5188:	add	ip, ip, #159744	; 0x27000
    518c:	ldr	pc, [ip, #64]!	; 0x40

00005190 <bind@plt>:
    5190:	add	ip, pc, #0, 12
    5194:	add	ip, ip, #159744	; 0x27000
    5198:	ldr	pc, [ip, #56]!	; 0x38

0000519c <rb_lib_log@plt>:
    519c:	add	ip, pc, #0, 12
    51a0:	add	ip, ip, #159744	; 0x27000
    51a4:	ldr	pc, [ip, #48]!	; 0x30

000051a8 <SSL_CTX_use_PrivateKey_file@plt>:
    51a8:	add	ip, pc, #0, 12
    51ac:	add	ip, ip, #159744	; 0x27000
    51b0:	ldr	pc, [ip, #40]!	; 0x28

000051b4 <select@plt>:
    51b4:	add	ip, pc, #0, 12
    51b8:	add	ip, ip, #159744	; 0x27000
    51bc:	ldr	pc, [ip, #32]!

000051c0 <close@plt>:
    51c0:	add	ip, pc, #0, 12
    51c4:	add	ip, ip, #159744	; 0x27000
    51c8:	ldr	pc, [ip, #24]!

000051cc <rb_bh_alloc@plt>:
    51cc:	add	ip, pc, #0, 12
    51d0:	add	ip, ip, #159744	; 0x27000
    51d4:	ldr	pc, [ip, #16]!

000051d8 <SSL_free@plt>:
    51d8:	add	ip, pc, #0, 12
    51dc:	add	ip, ip, #159744	; 0x27000
    51e0:	ldr	pc, [ip, #8]!

000051e4 <rb_pipe@plt>:
    51e4:	add	ip, pc, #0, 12
    51e8:	add	ip, ip, #159744	; 0x27000
    51ec:	ldr	pc, [ip, #0]!

000051f0 <strncasecmp@plt>:
    51f0:	add	ip, pc, #0, 12
    51f4:	add	ip, ip, #155648	; 0x26000
    51f8:	ldr	pc, [ip, #4088]!	; 0xff8

000051fc <rb_outofmemory@plt>:
    51fc:	add	ip, pc, #0, 12
    5200:	add	ip, ip, #155648	; 0x26000
    5204:	ldr	pc, [ip, #4080]!	; 0xff0

00005208 <rb_set_time@plt>:
    5208:	add	ip, pc, #0, 12
    520c:	add	ip, ip, #155648	; 0x26000
    5210:	ldr	pc, [ip, #4072]!	; 0xfe8

00005214 <malloc@plt>:
    5214:	add	ip, pc, #0, 12
    5218:	add	ip, ip, #155648	; 0x26000
    521c:	ldr	pc, [ip, #4064]!	; 0xfe0

00005220 <sigprocmask@plt>:
    5220:	add	ip, pc, #0, 12
    5224:	add	ip, ip, #155648	; 0x26000
    5228:	ldr	pc, [ip, #4056]!	; 0xfd8

0000522c <rb_event_run@plt>:
    522c:	add	ip, pc, #0, 12
    5230:	add	ip, ip, #155648	; 0x26000
    5234:	ldr	pc, [ip, #4048]!	; 0xfd0

00005238 <SSL_set_accept_state@plt>:
    5238:	add	ip, pc, #0, 12
    523c:	add	ip, ip, #155648	; 0x26000
    5240:	ldr	pc, [ip, #4040]!	; 0xfc8

00005244 <rb_init_bh@plt>:
    5244:	add	ip, pc, #0, 12
    5248:	add	ip, ip, #155648	; 0x26000
    524c:	ldr	pc, [ip, #4032]!	; 0xfc0

00005250 <PEM_read_DHparams@plt>:
    5250:	add	ip, pc, #0, 12
    5254:	add	ip, ip, #155648	; 0x26000
    5258:	ldr	pc, [ip, #4024]!	; 0xfb8

0000525c <gmtime_r@plt>:
    525c:	add	ip, pc, #0, 12
    5260:	add	ip, ip, #155648	; 0x26000
    5264:	ldr	pc, [ip, #4016]!	; 0xfb0

00005268 <poll@plt>:
    5268:	add	ip, pc, #0, 12
    526c:	add	ip, ip, #155648	; 0x26000
    5270:	ldr	pc, [ip, #4008]!	; 0xfa8

00005274 <ASN1_item_digest@plt>:
    5274:	add	ip, pc, #0, 12
    5278:	add	ip, ip, #155648	; 0x26000
    527c:	ldr	pc, [ip, #4000]!	; 0xfa0

00005280 <strnlen@plt>:
    5280:	add	ip, pc, #0, 12
    5284:	add	ip, ip, #155648	; 0x26000
    5288:	ldr	pc, [ip, #3992]!	; 0xf98

0000528c <SSL_get_peer_certificate@plt>:
    528c:	add	ip, pc, #0, 12
    5290:	add	ip, ip, #155648	; 0x26000
    5294:	ldr	pc, [ip, #3984]!	; 0xf90

00005298 <rb_lib_init@plt>:
    5298:	add	ip, pc, #0, 12
    529c:	add	ip, ip, #155648	; 0x26000
    52a0:	ldr	pc, [ip, #3976]!	; 0xf88

000052a4 <SSL_get_verify_result@plt>:
    52a4:	add	ip, pc, #0, 12
    52a8:	add	ip, ip, #155648	; 0x26000
    52ac:	ldr	pc, [ip, #3968]!	; 0xf80

000052b0 <strtok_r@plt>:
    52b0:	add	ip, pc, #0, 12
    52b4:	add	ip, ip, #155648	; 0x26000
    52b8:	ldr	pc, [ip, #3960]!	; 0xf78

000052bc <rb_lib_restart@plt>:
    52bc:	add	ip, pc, #0, 12
    52c0:	add	ip, ip, #155648	; 0x26000
    52c4:	ldr	pc, [ip, #3952]!	; 0xf70

000052c8 <DH_free@plt>:
    52c8:	add	ip, pc, #0, 12
    52cc:	add	ip, ip, #155648	; 0x26000
    52d0:	ldr	pc, [ip, #3944]!	; 0xf68

000052d4 <timer_delete@plt>:
    52d4:	add	ip, pc, #0, 12
    52d8:	add	ip, ip, #155648	; 0x26000
    52dc:	ldr	pc, [ip, #3936]!	; 0xf60

000052e0 <rb_open@plt>:
    52e0:	add	ip, pc, #0, 12
    52e4:	add	ip, ip, #155648	; 0x26000
    52e8:	ldr	pc, [ip, #3928]!	; 0xf58

000052ec <send@plt>:
    52ec:	add	ip, pc, #0, 12
    52f0:	add	ip, ip, #155648	; 0x26000
    52f4:	ldr	pc, [ip, #3920]!	; 0xf50

000052f8 <SSL_shutdown@plt>:
    52f8:	add	ip, pc, #0, 12
    52fc:	add	ip, ip, #155648	; 0x26000
    5300:	ldr	pc, [ip, #3912]!	; 0xf48

00005304 <rb_bh_create@plt>:
    5304:	add	ip, pc, #0, 12
    5308:	add	ip, ip, #155648	; 0x26000
    530c:	ldr	pc, [ip, #3904]!	; 0xf40

00005310 <dup2@plt>:
    5310:	add	ip, pc, #0, 12
    5314:	add	ip, ip, #155648	; 0x26000
    5318:	ldr	pc, [ip, #3896]!	; 0xf38

0000531c <getpid@plt>:
    531c:	add	ip, pc, #0, 12
    5320:	add	ip, ip, #155648	; 0x26000
    5324:	ldr	pc, [ip, #3888]!	; 0xf30

00005328 <rb_writev@plt>:
    5328:	add	ip, pc, #0, 12
    532c:	add	ip, ip, #155648	; 0x26000
    5330:	ldr	pc, [ip, #3880]!	; 0xf28

00005334 <RAND_bytes@plt>:
    5334:	add	ip, pc, #0, 12
    5338:	add	ip, ip, #155648	; 0x26000
    533c:	ldr	pc, [ip, #3872]!	; 0xf20

00005340 <rb_linebuf_newbuf@plt>:
    5340:	add	ip, pc, #0, 12
    5344:	add	ip, ip, #155648	; 0x26000
    5348:	ldr	pc, [ip, #3864]!	; 0xf18

0000534c <rb_fdlist_init@plt>:
    534c:	add	ip, pc, #0, 12
    5350:	add	ip, ip, #155648	; 0x26000
    5354:	ldr	pc, [ip, #3856]!	; 0xf10

00005358 <rb_event_add@plt>:
    5358:	add	ip, pc, #0, 12
    535c:	add	ip, ip, #155648	; 0x26000
    5360:	ldr	pc, [ip, #3848]!	; 0xf08

00005364 <readlink@plt>:
    5364:	add	ip, pc, #0, 12
    5368:	add	ip, ip, #155648	; 0x26000
    536c:	ldr	pc, [ip, #3840]!	; 0xf00

00005370 <SSL_CTX_new@plt>:
    5370:	add	ip, pc, #0, 12
    5374:	add	ip, ip, #155648	; 0x26000
    5378:	ldr	pc, [ip, #3832]!	; 0xef8

0000537c <recvmsg@plt>:
    537c:	add	ip, pc, #0, 12
    5380:	add	ip, ip, #155648	; 0x26000
    5384:	ldr	pc, [ip, #3824]!	; 0xef0

00005388 <rand@plt>:
    5388:	add	ip, pc, #0, 12
    538c:	add	ip, ip, #155648	; 0x26000
    5390:	ldr	pc, [ip, #3816]!	; 0xee8

00005394 <rb_linebuf_init@plt>:
    5394:	add	ip, pc, #0, 12
    5398:	add	ip, ip, #155648	; 0x26000
    539c:	ldr	pc, [ip, #3808]!	; 0xee0

000053a0 <__fxstat@plt>:
    53a0:	add	ip, pc, #0, 12
    53a4:	add	ip, ip, #155648	; 0x26000
    53a8:	ldr	pc, [ip, #3800]!	; 0xed8

000053ac <SSL_set_connect_state@plt>:
    53ac:	add	ip, pc, #0, 12
    53b0:	add	ip, ip, #155648	; 0x26000
    53b4:	ldr	pc, [ip, #3792]!	; 0xed0

000053b8 <rb_radixtree_elem_find@plt>:
    53b8:	add	ip, pc, #0, 12
    53bc:	add	ip, ip, #155648	; 0x26000
    53c0:	ldr	pc, [ip, #3784]!	; 0xec8

000053c4 <rb_make_rb_dlink_node@plt>:
    53c4:	add	ip, pc, #0, 12
    53c8:	add	ip, ip, #155648	; 0x26000
    53cc:	ldr	pc, [ip, #3776]!	; 0xec0

000053d0 <rb_strlcat@plt>:
    53d0:	add	ip, pc, #0, 12
    53d4:	add	ip, ip, #155648	; 0x26000
    53d8:	ldr	pc, [ip, #3768]!	; 0xeb8

000053dc <rb_spawn_process@plt>:
    53dc:	add	ip, pc, #0, 12
    53e0:	add	ip, ip, #155648	; 0x26000
    53e4:	ldr	pc, [ip, #3760]!	; 0xeb0

000053e8 <EVP_sha512@plt>:
    53e8:	add	ip, pc, #0, 12
    53ec:	add	ip, ip, #155648	; 0x26000
    53f0:	ldr	pc, [ip, #3752]!	; 0xea8

000053f4 <snprintf@plt>:
    53f4:	add	ip, pc, #0, 12
    53f8:	add	ip, ip, #155648	; 0x26000
    53fc:	ldr	pc, [ip, #3744]!	; 0xea0

00005400 <RAND_status@plt>:
    5400:	add	ip, pc, #0, 12
    5404:	add	ip, ip, #155648	; 0x26000
    5408:	ldr	pc, [ip, #3736]!	; 0xe98

0000540c <timerfd_create@plt>:
    540c:	add	ip, pc, #0, 12
    5410:	add	ip, ip, #155648	; 0x26000
    5414:	ldr	pc, [ip, #3728]!	; 0xe90

00005418 <EVP_sha256@plt>:
    5418:	add	ip, pc, #0, 12
    541c:	add	ip, ip, #155648	; 0x26000
    5420:	ldr	pc, [ip, #3720]!	; 0xe88

00005424 <strcspn@plt>:
    5424:	add	ip, pc, #0, 12
    5428:	add	ip, ip, #155648	; 0x26000
    542c:	ldr	pc, [ip, #3712]!	; 0xe80

00005430 <rb_linebuf_put@plt>:
    5430:	add	ip, pc, #0, 12
    5434:	add	ip, ip, #155648	; 0x26000
    5438:	ldr	pc, [ip, #3704]!	; 0xe78

0000543c <rb_listen@plt>:
    543c:	add	ip, pc, #0, 12
    5440:	add	ip, ip, #155648	; 0x26000
    5444:	ldr	pc, [ip, #3696]!	; 0xe70

00005448 <fcntl@plt>:
    5448:	add	ip, pc, #0, 12
    544c:	add	ip, ip, #155648	; 0x26000
    5450:	ldr	pc, [ip, #3688]!	; 0xe68

00005454 <strncmp@plt>:
    5454:	add	ip, pc, #0, 12
    5458:	add	ip, ip, #155648	; 0x26000
    545c:	ldr	pc, [ip, #3680]!	; 0xe60

00005460 <kill@plt>:
    5460:	add	ip, pc, #0, 12
    5464:	add	ip, ip, #155648	; 0x26000
    5468:	ldr	pc, [ip, #3672]!	; 0xe58

0000546c <nanosleep@plt>:
    546c:	add	ip, pc, #0, 12
    5470:	add	ip, ip, #155648	; 0x26000
    5474:	ldr	pc, [ip, #3664]!	; 0xe50

00005478 <rb_event_next@plt>:
    5478:	add	ip, pc, #0, 12
    547c:	add	ip, ip, #155648	; 0x26000
    5480:	ldr	pc, [ip, #3656]!	; 0xe48

00005484 <realloc@plt>:
    5484:	add	ip, pc, #0, 12
    5488:	add	ip, ip, #155648	; 0x26000
    548c:	ldr	pc, [ip, #3648]!	; 0xe40

00005490 <timerfd_settime@plt>:
    5490:	add	ip, pc, #0, 12
    5494:	add	ip, ip, #155648	; 0x26000
    5498:	ldr	pc, [ip, #3640]!	; 0xe38

0000549c <epoll_ctl@plt>:
    549c:	add	ip, pc, #0, 12
    54a0:	add	ip, ip, #155648	; 0x26000
    54a4:	ldr	pc, [ip, #3632]!	; 0xe30

000054a8 <X509_free@plt>:
    54a8:	add	ip, pc, #0, 12
    54ac:	add	ip, ip, #155648	; 0x26000
    54b0:	ldr	pc, [ip, #3624]!	; 0xe28

000054b4 <readv@plt>:
    54b4:	add	ip, pc, #0, 12
    54b8:	add	ip, ip, #155648	; 0x26000
    54bc:	ldr	pc, [ip, #3616]!	; 0xe20

000054c0 <getsockopt@plt>:
    54c0:	add	ip, pc, #0, 12
    54c4:	add	ip, ip, #155648	; 0x26000
    54c8:	ldr	pc, [ip, #3608]!	; 0xe18

000054cc <pipe@plt>:
    54cc:	add	ip, pc, #0, 12
    54d0:	add	ip, ip, #155648	; 0x26000
    54d4:	ldr	pc, [ip, #3600]!	; 0xe10

000054d8 <OpenSSL_version@plt>:
    54d8:	add	ip, pc, #0, 12
    54dc:	add	ip, ip, #155648	; 0x26000
    54e0:	ldr	pc, [ip, #3592]!	; 0xe08

000054e4 <setsockopt@plt>:
    54e4:	add	ip, pc, #0, 12
    54e8:	add	ip, ip, #155648	; 0x26000
    54ec:	ldr	pc, [ip, #3584]!	; 0xe00

000054f0 <SSL_get_error@plt>:
    54f0:	add	ip, pc, #0, 12
    54f4:	add	ip, ip, #155648	; 0x26000
    54f8:	ldr	pc, [ip, #3576]!	; 0xdf8

000054fc <SSL_get_version@plt>:
    54fc:	add	ip, pc, #0, 12
    5500:	add	ip, ip, #155648	; 0x26000
    5504:	ldr	pc, [ip, #3568]!	; 0xdf0

00005508 <memchr@plt>:
    5508:	add	ip, pc, #0, 12
    550c:	add	ip, ip, #155648	; 0x26000
    5510:	ldr	pc, [ip, #3560]!	; 0xde8

00005514 <setenv@plt>:
    5514:	add	ip, pc, #0, 12
    5518:	add	ip, ip, #155648	; 0x26000
    551c:	ldr	pc, [ip, #3552]!	; 0xde0

00005520 <strcmp@plt>:
    5520:	add	ip, pc, #0, 12
    5524:	add	ip, ip, #155648	; 0x26000
    5528:	ldr	pc, [ip, #3544]!	; 0xdd8

0000552c <__errno_location@plt>:
    552c:	add	ip, pc, #0, 12
    5530:	add	ip, ip, #155648	; 0x26000
    5534:	ldr	pc, [ip, #3536]!	; 0xdd0

00005538 <__cxa_finalize@plt>:
    5538:	add	ip, pc, #0, 12
    553c:	add	ip, ip, #155648	; 0x26000
    5540:	ldr	pc, [ip, #3528]!	; 0xdc8

00005544 <sprintf@plt>:
    5544:	add	ip, pc, #0, 12
    5548:	add	ip, ip, #155648	; 0x26000
    554c:	ldr	pc, [ip, #3520]!	; 0xdc0

00005550 <rb_bh_usage@plt>:
    5550:	add	ip, pc, #0, 12
    5554:	add	ip, ip, #155648	; 0x26000
    5558:	ldr	pc, [ip, #3512]!	; 0xdb8

0000555c <SSL_CTX_set_verify@plt>:
    555c:	add	ip, pc, #0, 12
    5560:	add	ip, ip, #155648	; 0x26000
    5564:	ldr	pc, [ip, #3504]!	; 0xdb0

Disassembly of section .text:

00005570 <call_weak_fn>:
    5570:	ldr	r3, [pc, #20]	; 558c <call_weak_fn+0x1c>
    5574:	ldr	r2, [pc, #20]	; 5590 <call_weak_fn+0x20>
    5578:	add	r3, pc, r3
    557c:	ldr	r2, [r3, r2]
    5580:	cmp	r2, #0
    5584:	bxeq	lr
    5588:	b	4ddc <__gmon_start__@plt>
    558c:	.word	0x00026a80
    5590:	.word	0x00000328

00005594 <deregister_tm_clones>:
    5594:	ldr	r0, [pc, #44]	; 55c8 <deregister_tm_clones+0x34>
    5598:	ldr	r3, [pc, #44]	; 55cc <deregister_tm_clones+0x38>
    559c:	add	r0, pc, r0
    55a0:	add	r3, pc, r3
    55a4:	cmp	r3, r0
    55a8:	ldr	r3, [pc, #32]	; 55d0 <deregister_tm_clones+0x3c>
    55ac:	add	r3, pc, r3
    55b0:	bxeq	lr
    55b4:	ldr	r2, [pc, #24]	; 55d4 <deregister_tm_clones+0x40>
    55b8:	ldr	r3, [r3, r2]
    55bc:	cmp	r3, #0
    55c0:	bxeq	lr
    55c4:	bx	r3
    55c8:	.word	0x00026efc
    55cc:	.word	0x00026ef8
    55d0:	.word	0x00026a4c
    55d4:	.word	0x00000344

000055d8 <register_tm_clones>:
    55d8:	ldr	r0, [pc, #56]	; 5618 <register_tm_clones+0x40>
    55dc:	ldr	r3, [pc, #56]	; 561c <register_tm_clones+0x44>
    55e0:	add	r0, pc, r0
    55e4:	add	r3, pc, r3
    55e8:	sub	r1, r3, r0
    55ec:	ldr	r3, [pc, #44]	; 5620 <register_tm_clones+0x48>
    55f0:	asr	r1, r1, #2
    55f4:	add	r3, pc, r3
    55f8:	add	r1, r1, r1, lsr #31
    55fc:	asrs	r1, r1, #1
    5600:	bxeq	lr
    5604:	ldr	r2, [pc, #24]	; 5624 <register_tm_clones+0x4c>
    5608:	ldr	r3, [r3, r2]
    560c:	cmp	r3, #0
    5610:	bxeq	lr
    5614:	bx	r3
    5618:	.word	0x00026eb8
    561c:	.word	0x00026eb4
    5620:	.word	0x00026a04
    5624:	.word	0x00000354

00005628 <__do_global_dtors_aux>:
    5628:	ldr	r3, [pc, #76]	; 567c <__do_global_dtors_aux+0x54>
    562c:	ldr	r2, [pc, #76]	; 5680 <__do_global_dtors_aux+0x58>
    5630:	add	r3, pc, r3
    5634:	add	r2, pc, r2
    5638:	ldrb	r3, [r3]
    563c:	cmp	r3, #0
    5640:	bxne	lr
    5644:	ldr	r3, [pc, #56]	; 5684 <__do_global_dtors_aux+0x5c>
    5648:	push	{r4, lr}
    564c:	ldr	r3, [r2, r3]
    5650:	cmp	r3, #0
    5654:	beq	5664 <__do_global_dtors_aux+0x3c>
    5658:	ldr	r3, [pc, #40]	; 5688 <__do_global_dtors_aux+0x60>
    565c:	ldr	r0, [pc, r3]
    5660:	bl	5538 <__cxa_finalize@plt>
    5664:	bl	5594 <deregister_tm_clones>
    5668:	ldr	r3, [pc, #28]	; 568c <__do_global_dtors_aux+0x64>
    566c:	mov	r2, #1
    5670:	add	r3, pc, r3
    5674:	strb	r2, [r3]
    5678:	pop	{r4, pc}
    567c:	.word	0x00026e68
    5680:	.word	0x000269c4
    5684:	.word	0x000003e4
    5688:	.word	0x00026d8c
    568c:	.word	0x00026e28

00005690 <frame_dummy>:
    5690:	b	55d8 <register_tm_clones>

00005694 <rb_spawn_process>:
    5694:	push	{r4, r5, r6, sl, fp, lr}
    5698:	add	fp, sp, #16
    569c:	sub	sp, sp, #352	; 0x160
    56a0:	add	r6, sp, #12
    56a4:	mov	r5, r0
    56a8:	mov	r4, r1
    56ac:	mov	r0, r6
    56b0:	bl	4f74 <posix_spawnattr_init@plt>
    56b4:	mov	r0, r6
    56b8:	mov	r1, #64	; 0x40
    56bc:	bl	50b8 <posix_spawnattr_setflags@plt>
    56c0:	ldr	r0, [pc, #84]	; 571c <rb_spawn_process+0x88>
    56c4:	mov	r1, r5
    56c8:	mov	r2, #0
    56cc:	mov	r3, r6
    56d0:	ldr	r0, [pc, r0]
    56d4:	str	r4, [sp]
    56d8:	ldr	r0, [r0]
    56dc:	str	r0, [sp, #4]
    56e0:	sub	r0, fp, #20
    56e4:	bl	5070 <posix_spawn@plt>
    56e8:	mov	r4, r0
    56ec:	mov	r0, r6
    56f0:	bl	50f4 <posix_spawnattr_destroy@plt>
    56f4:	cmp	r4, #0
    56f8:	ldreq	r0, [fp, #-20]	; 0xffffffec
    56fc:	subeq	sp, fp, #16
    5700:	popeq	{r4, r5, r6, sl, fp, pc}
    5704:	bl	552c <__errno_location@plt>
    5708:	str	r4, [r0]
    570c:	mvn	r0, #0
    5710:	str	r0, [fp, #-20]	; 0xffffffec
    5714:	sub	sp, fp, #16
    5718:	pop	{r4, r5, r6, sl, fp, pc}
    571c:	.word	0x00026c94

00005720 <rb_gettimeofday>:
    5720:	b	5004 <gettimeofday@plt>

00005724 <rb_sleep>:
    5724:	push	{fp, lr}
    5728:	mov	fp, sp
    572c:	sub	sp, sp, #8
    5730:	str	r0, [sp]
    5734:	mov	r0, #1000	; 0x3e8
    5738:	mul	r0, r1, r0
    573c:	mov	r1, #0
    5740:	str	r0, [sp, #4]
    5744:	mov	r0, sp
    5748:	bl	546c <nanosleep@plt>
    574c:	mov	sp, fp
    5750:	pop	{fp, pc}

00005754 <rb_strerror>:
    5754:	b	4c80 <strerror@plt>

00005758 <rb_kill>:
    5758:	b	5460 <kill@plt>

0000575c <rb_setenv>:
    575c:	b	5514 <setenv@plt>

00005760 <rb_waitpid>:
    5760:	b	5130 <waitpid@plt>

00005764 <rb_getpid>:
    5764:	b	531c <getpid@plt>

00005768 <rb_path_to_self>:
    5768:	push	{r4, sl, fp, lr}
    576c:	add	fp, sp, #8
    5770:	ldr	r0, [pc, #36]	; 579c <rb_path_to_self+0x34>
    5774:	ldr	r4, [pc, #36]	; 57a0 <rb_path_to_self+0x38>
    5778:	mov	r2, #4096	; 0x1000
    577c:	add	r4, pc, r4
    5780:	add	r0, pc, r0
    5784:	mov	r1, r4
    5788:	bl	5364 <readlink@plt>
    578c:	cmn	r0, #1
    5790:	addeq	r4, r0, #1
    5794:	mov	r0, r4
    5798:	pop	{r4, sl, fp, pc}
    579c:	.word	0x00014090
    57a0:	.word	0x00026d1d

000057a4 <rb_init_netio_win32>:
    57a4:	push	{fp, lr}
    57a8:	mov	fp, sp
    57ac:	bl	552c <__errno_location@plt>
    57b0:	mov	r1, #38	; 0x26
    57b4:	str	r1, [r0]
    57b8:	mvn	r0, #0
    57bc:	pop	{fp, pc}

000057c0 <rb_setselect_win32>:
    57c0:	push	{fp, lr}
    57c4:	mov	fp, sp
    57c8:	bl	552c <__errno_location@plt>
    57cc:	mov	r1, #38	; 0x26
    57d0:	str	r1, [r0]
    57d4:	pop	{fp, pc}

000057d8 <rb_select_win32>:
    57d8:	push	{fp, lr}
    57dc:	mov	fp, sp
    57e0:	bl	552c <__errno_location@plt>
    57e4:	mov	r1, #38	; 0x26
    57e8:	str	r1, [r0]
    57ec:	mvn	r0, #0
    57f0:	pop	{fp, pc}

000057f4 <rb_setup_fd_win32>:
    57f4:	push	{fp, lr}
    57f8:	mov	fp, sp
    57fc:	bl	552c <__errno_location@plt>
    5800:	mov	r1, #38	; 0x26
    5804:	str	r1, [r0]
    5808:	mvn	r0, #0
    580c:	pop	{fp, pc}

00005810 <rb_crypt>:
    5810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5814:	add	fp, sp, #28
    5818:	sub	sp, sp, #236	; 0xec
    581c:	mov	r4, r0
    5820:	ldrb	r0, [r1]
    5824:	mov	r9, r1
    5828:	cmp	r0, #36	; 0x24
    582c:	bne	58b0 <rb_crypt+0xa0>
    5830:	ldrb	r0, [r9, #2]
    5834:	cmp	r0, #36	; 0x24
    5838:	ldrbne	r0, [r9, #3]
    583c:	cmpne	r0, #36	; 0x24
    5840:	bne	58b0 <rb_crypt+0xa0>
    5844:	ldrb	r0, [r9, #1]
    5848:	mov	r6, #0
    584c:	cmp	r0, #54	; 0x36
    5850:	beq	5bdc <rb_crypt+0x3cc>
    5854:	cmp	r0, #53	; 0x35
    5858:	beq	5c24 <rb_crypt+0x414>
    585c:	cmp	r0, #49	; 0x31
    5860:	bne	63fc <rb_crypt+0xbec>
    5864:	ldr	r5, [pc, #4040]	; 6834 <rb_crypt+0x1024>
    5868:	mov	r0, r9
    586c:	mov	r2, #3
    5870:	add	r5, pc, r5
    5874:	str	r9, [r5, #20]
    5878:	ldr	r1, [pc, #4024]	; 6838 <rb_crypt+0x1028>
    587c:	add	r1, pc, r1
    5880:	bl	5454 <strncmp@plt>
    5884:	cmp	r0, #0
    5888:	mov	r0, #0
    588c:	addeq	r9, r9, #3
    5890:	mov	r6, r9
    5894:	streq	r9, [r5, #20]
    5898:	str	r9, [r5, #24]
    589c:	ldrb	r1, [r9, r0]
    58a0:	cmp	r1, #0
    58a4:	cmpne	r1, #36	; 0x24
    58a8:	beq	5c90 <rb_crypt+0x480>
    58ac:	b	5c88 <rb_crypt+0x478>
    58b0:	str	r9, [sp, #24]
    58b4:	bl	6f58 <rb_des_init>
    58b8:	sub	r0, fp, #120	; 0x78
    58bc:	mov	r2, #254	; 0xfe
    58c0:	orr	r1, r0, #1
    58c4:	mov	r3, r4
    58c8:	ldrb	r7, [r3], #1
    58cc:	tst	r2, r7, lsl #1
    58d0:	lsl	r6, r7, #1
    58d4:	movne	r4, r3
    58d8:	sub	r3, r1, r0
    58dc:	strb	r6, [r1, #-1]
    58e0:	add	r1, r1, #1
    58e4:	cmp	r3, #8
    58e8:	bne	58c4 <rb_crypt+0xb4>
    58ec:	bl	6f58 <rb_des_init>
    58f0:	ldr	r0, [pc, #3908]	; 683c <rb_crypt+0x102c>
    58f4:	ldr	r3, [fp, #-116]	; 0xffffff8c
    58f8:	ldr	r2, [fp, #-120]	; 0xffffff88
    58fc:	add	r0, pc, r0
    5900:	rev	r1, r2
    5904:	ldr	r7, [r0, #4]
    5908:	rev	r0, r3
    590c:	cmp	r0, r7
    5910:	ldreq	r7, [pc, #3880]	; 6840 <rb_crypt+0x1030>
    5914:	addeq	r7, pc, r7
    5918:	ldreq	r7, [r7, #8]
    591c:	cmpeq	r1, r7
    5920:	beq	5b60 <rb_crypt+0x350>
    5924:	ldr	r2, [pc, #3864]	; 6844 <rb_crypt+0x1034>
    5928:	lsr	ip, r1, #25
    592c:	and	sl, r1, #254	; 0xfe
    5930:	add	r2, pc, r2
    5934:	stmib	r2, {r0, r1}
    5938:	ldr	r3, [pc, #3848]	; 6848 <rb_crypt+0x1038>
    593c:	add	r3, pc, r3
    5940:	ldr	r7, [r3, ip, lsl #2]
    5944:	ubfx	lr, r1, #17, #7
    5948:	add	r5, r3, lr, lsl #2
    594c:	ldr	r5, [r5, #512]	; 0x200
    5950:	ubfx	r9, r1, #9, #7
    5954:	add	r1, r3, sl, lsl #1
    5958:	add	r4, r3, r9, lsl #2
    595c:	ldr	r1, [r1, #1536]	; 0x600
    5960:	ldr	r4, [r4, #1024]	; 0x400
    5964:	orr	r7, r5, r7
    5968:	orr	r7, r7, r4
    596c:	orr	r1, r7, r1
    5970:	lsr	r7, r0, #25
    5974:	add	r2, r3, r7, lsl #2
    5978:	ldr	r2, [r2, #2048]	; 0x800
    597c:	orr	r1, r1, r2
    5980:	ubfx	r2, r0, #17, #7
    5984:	add	r6, r3, r2, lsl #2
    5988:	ldr	r6, [r6, #2560]	; 0xa00
    598c:	orr	r1, r1, r6
    5990:	ubfx	r6, r0, #9, #7
    5994:	and	r0, r0, #254	; 0xfe
    5998:	add	r5, r3, r6, lsl #2
    599c:	add	r3, r3, r0, lsl #1
    59a0:	ldr	r5, [r5, #3072]	; 0xc00
    59a4:	ldr	r3, [r3, #3584]	; 0xe00
    59a8:	orr	r1, r1, r5
    59ac:	orr	r1, r1, r3
    59b0:	str	r1, [sp, #32]
    59b4:	ldr	r3, [pc, #3728]	; 684c <rb_crypt+0x103c>
    59b8:	add	r3, pc, r3
    59bc:	add	r4, r3, lr, lsl #2
    59c0:	ldr	r5, [r3, ip, lsl #2]
    59c4:	add	r7, r3, r7, lsl #2
    59c8:	add	r2, r3, r2, lsl #2
    59cc:	add	r0, r3, r0, lsl #1
    59d0:	ldr	r4, [r4, #512]	; 0x200
    59d4:	ldr	r7, [r7, #2048]	; 0x800
    59d8:	ldr	r2, [r2, #2560]	; 0xa00
    59dc:	ldr	r0, [r0, #3584]	; 0xe00
    59e0:	orr	r5, r4, r5
    59e4:	add	r4, r3, r9, lsl #2
    59e8:	ldr	r4, [r4, #1024]	; 0x400
    59ec:	orr	r5, r5, r4
    59f0:	add	r4, r3, sl, lsl #1
    59f4:	ldr	r4, [r4, #1536]	; 0x600
    59f8:	orr	r5, r5, r4
    59fc:	orr	r7, r5, r7
    5a00:	orr	r2, r7, r2
    5a04:	add	r7, r3, r6, lsl #2
    5a08:	mov	r3, #0
    5a0c:	ldr	r7, [r7, #3072]	; 0xc00
    5a10:	orr	r2, r2, r7
    5a14:	orr	r0, r2, r0
    5a18:	mov	r2, #0
    5a1c:	str	r0, [sp, #28]
    5a20:	ldr	lr, [pc, #4040]	; 69f0 <rb_crypt+0x11e0>
    5a24:	add	lr, pc, lr
    5a28:	ldr	r0, [pc, #4036]	; 69f4 <rb_crypt+0x11e4>
    5a2c:	add	r0, pc, r0
    5a30:	ldrb	r4, [r0, r3]
    5a34:	ldr	r0, [sp, #28]
    5a38:	add	r2, r2, r4
    5a3c:	rsb	r1, r2, #28
    5a40:	lsr	r4, r0, r1
    5a44:	orr	r0, r4, r0, lsl r2
    5a48:	ubfx	r6, r0, #14, #7
    5a4c:	and	r8, r0, #127	; 0x7f
    5a50:	add	r4, lr, r6, lsl #2
    5a54:	str	r6, [sp, #36]	; 0x24
    5a58:	ldr	r4, [r4, #512]	; 0x200
    5a5c:	ubfx	sl, r0, #21, #7
    5a60:	ldr	ip, [lr, sl, lsl #2]
    5a64:	orr	r7, r4, ip
    5a68:	ubfx	ip, r0, #7, #7
    5a6c:	ldr	r0, [sp, #32]
    5a70:	add	r5, lr, ip, lsl #2
    5a74:	ldr	r5, [r5, #1024]	; 0x400
    5a78:	lsr	r1, r0, r1
    5a7c:	orr	r1, r1, r0, lsl r2
    5a80:	orr	r7, r7, r5
    5a84:	add	r5, lr, r8, lsl #2
    5a88:	ldr	r5, [r5, #1536]	; 0x600
    5a8c:	orr	r7, r7, r5
    5a90:	ubfx	r5, r1, #21, #7
    5a94:	add	r6, lr, r5, lsl #2
    5a98:	ldr	r6, [r6, #2048]	; 0x800
    5a9c:	orr	r7, r7, r6
    5aa0:	ubfx	r6, r1, #14, #7
    5aa4:	add	r4, lr, r6, lsl #2
    5aa8:	ldr	r4, [r4, #2560]	; 0xa00
    5aac:	orr	r4, r7, r4
    5ab0:	ubfx	r7, r1, #7, #7
    5ab4:	add	r9, lr, r7, lsl #2
    5ab8:	ldr	r0, [r9, #3072]	; 0xc00
    5abc:	and	r9, r1, #127	; 0x7f
    5ac0:	orr	r0, r4, r0
    5ac4:	add	r4, lr, r9, lsl #2
    5ac8:	ldr	r4, [r4, #3584]	; 0xe00
    5acc:	orr	r0, r0, r4
    5ad0:	ldr	r4, [pc, #3872]	; 69f8 <rb_crypt+0x11e8>
    5ad4:	add	r4, pc, r4
    5ad8:	str	r0, [r4, r3, lsl #2]
    5adc:	ldr	r0, [pc, #3864]	; 69fc <rb_crypt+0x11ec>
    5ae0:	ldr	r4, [sp, #36]	; 0x24
    5ae4:	add	r0, pc, r0
    5ae8:	mov	r1, r0
    5aec:	ldr	r0, [r0, sl, lsl #2]
    5af0:	add	r4, r1, r4, lsl #2
    5af4:	add	r5, r1, r5, lsl #2
    5af8:	add	r6, r1, r6, lsl #2
    5afc:	add	r7, r1, r7, lsl #2
    5b00:	ldr	r4, [r4, #512]	; 0x200
    5b04:	ldr	r5, [r5, #2048]	; 0x800
    5b08:	ldr	r6, [r6, #2560]	; 0xa00
    5b0c:	ldr	r7, [r7, #3072]	; 0xc00
    5b10:	orr	r0, r4, r0
    5b14:	add	r4, r1, ip, lsl #2
    5b18:	ldr	r4, [r4, #1024]	; 0x400
    5b1c:	orr	r0, r0, r4
    5b20:	add	r4, r1, r8, lsl #2
    5b24:	add	r1, r1, r9, lsl #2
    5b28:	ldr	r4, [r4, #1536]	; 0x600
    5b2c:	ldr	r1, [r1, #3584]	; 0xe00
    5b30:	orr	r0, r0, r4
    5b34:	orr	r0, r0, r5
    5b38:	orr	r0, r0, r6
    5b3c:	orr	r0, r0, r7
    5b40:	orr	r0, r0, r1
    5b44:	ldr	r1, [pc, #3976]	; 6ad4 <rb_crypt+0x12c4>
    5b48:	add	r1, pc, r1
    5b4c:	str	r0, [r1, r3, lsl #2]
    5b50:	add	r3, r3, #1
    5b54:	cmp	r3, #16
    5b58:	bne	5a28 <rb_crypt+0x218>
    5b5c:	b	5b70 <rb_crypt+0x360>
    5b60:	orr	r2, r3, r2
    5b64:	rev	r2, r2
    5b68:	cmp	r2, #0
    5b6c:	beq	5924 <rb_crypt+0x114>
    5b70:	ldr	r7, [sp, #24]
    5b74:	mov	r1, #0
    5b78:	mov	r2, #0
    5b7c:	ldrb	r0, [r7, #1]
    5b80:	cmp	r0, #122	; 0x7a
    5b84:	bhi	5bc0 <rb_crypt+0x3b0>
    5b88:	cmp	r0, #97	; 0x61
    5b8c:	bcc	5ba8 <rb_crypt+0x398>
    5b90:	sub	r2, r0, #59	; 0x3b
    5b94:	ldrb	r3, [r7]
    5b98:	lsl	r2, r2, #6
    5b9c:	cmp	r3, #122	; 0x7a
    5ba0:	bhi	5bd0 <rb_crypt+0x3c0>
    5ba4:	b	5ed0 <rb_crypt+0x6c0>
    5ba8:	cmp	r0, #90	; 0x5a
    5bac:	mov	r2, #0
    5bb0:	bhi	5bc0 <rb_crypt+0x3b0>
    5bb4:	cmp	r0, #65	; 0x41
    5bb8:	bcc	5eb0 <rb_crypt+0x6a0>
    5bbc:	sub	r2, r0, #53	; 0x35
    5bc0:	ldrb	r3, [r7]
    5bc4:	lsl	r2, r2, #6
    5bc8:	cmp	r3, #122	; 0x7a
    5bcc:	bls	5ed0 <rb_crypt+0x6c0>
    5bd0:	ldr	r6, [pc, #3996]	; 6b74 <rb_crypt+0x1364>
    5bd4:	add	r6, pc, r6
    5bd8:	b	5f18 <rb_crypt+0x708>
    5bdc:	mov	r0, r9
    5be0:	bl	507c <strlen@plt>
    5be4:	ldr	r7, [pc, #4060]	; 6bc8 <rb_crypt+0x13b8>
    5be8:	add	r5, r0, #109	; 0x6d
    5bec:	add	r7, pc, r7
    5bf0:	ldr	r0, [r7, #40]	; 0x28
    5bf4:	ldr	r2, [r7, #36]	; 0x24
    5bf8:	cmp	r0, r5
    5bfc:	bge	5db0 <rb_crypt+0x5a0>
    5c00:	mov	r0, r2
    5c04:	mov	r1, r5
    5c08:	bl	5484 <realloc@plt>
    5c0c:	cmp	r0, #0
    5c10:	beq	63fc <rb_crypt+0xbec>
    5c14:	mov	r2, r0
    5c18:	str	r0, [r7, #36]	; 0x24
    5c1c:	str	r5, [r7, #40]	; 0x28
    5c20:	b	5db4 <rb_crypt+0x5a4>
    5c24:	mov	r0, r9
    5c28:	bl	507c <strlen@plt>
    5c2c:	add	r5, r0, #66	; 0x42
    5c30:	mov	r0, r5
    5c34:	bl	5214 <malloc@plt>
    5c38:	cmp	r0, #0
    5c3c:	beq	63fc <rb_crypt+0xbec>
    5c40:	mov	r2, r0
    5c44:	ldr	r0, [pc, #3968]	; 6bcc <rb_crypt+0x13bc>
    5c48:	mov	r1, r9
    5c4c:	mov	r3, r5
    5c50:	add	r0, pc, r0
    5c54:	str	r2, [r0, #32]
    5c58:	mov	r0, r4
    5c5c:	sub	sp, fp, #28
    5c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c64:	b	8dd0 <rb_sha256_crypt_r>
    5c68:	add	r1, r9, r0
    5c6c:	add	r0, r0, #1
    5c70:	add	r6, r1, #1
    5c74:	str	r6, [r5, #24]
    5c78:	ldrb	r1, [r9, r0]
    5c7c:	cmp	r1, #0
    5c80:	cmpne	r1, #36	; 0x24
    5c84:	beq	5c90 <rb_crypt+0x480>
    5c88:	cmp	r0, #7
    5c8c:	bls	5c68 <rb_crypt+0x458>
    5c90:	str	r9, [sp, #24]
    5c94:	add	r0, pc, #676	; 0x2a4
    5c98:	sub	r8, fp, #120	; 0x78
    5c9c:	vld1.64	{d16-d17}, [r0 :128]
    5ca0:	mov	r0, #24
    5ca4:	mov	r9, r8
    5ca8:	vst1.32	{d16-d17}, [r9], r0
    5cac:	mov	r0, r4
    5cb0:	bl	507c <strlen@plt>
    5cb4:	mov	r5, r0
    5cb8:	lsl	r7, r0, #3
    5cbc:	lsr	sl, r0, #29
    5cc0:	mov	r0, #0
    5cc4:	str	r9, [sp, #32]
    5cc8:	cmp	r5, #64	; 0x40
    5ccc:	str	r7, [fp, #-104]	; 0xffffff98
    5cd0:	str	sl, [fp, #-100]	; 0xffffff9c
    5cd4:	bcc	5d60 <rb_crypt+0x550>
    5cd8:	mov	r1, #48	; 0x30
    5cdc:	mov	r2, r4
    5ce0:	add	r0, r4, #32
    5ce4:	add	r3, r4, #16
    5ce8:	vld1.8	{d16-d17}, [r2], r1
    5cec:	vld1.8	{d18-d19}, [r0]
    5cf0:	vld1.8	{d20-d21}, [r3]
    5cf4:	add	r0, r9, #32
    5cf8:	vld1.8	{d22-d23}, [r2]
    5cfc:	vst1.8	{d18-d19}, [r0]
    5d00:	add	r0, r9, #16
    5d04:	vst1.8	{d20-d21}, [r0]
    5d08:	mov	r0, r9
    5d0c:	vst1.8	{d16-d17}, [r0], r1
    5d10:	mov	r1, r9
    5d14:	vst1.8	{d22-d23}, [r0]
    5d18:	sub	r0, fp, #120	; 0x78
    5d1c:	bl	839c <MD5Transform>
    5d20:	mov	r0, #64	; 0x40
    5d24:	cmp	r5, #128	; 0x80
    5d28:	bcc	5d54 <rb_crypt+0x544>
    5d2c:	mov	r7, #64	; 0x40
    5d30:	sub	sl, fp, #120	; 0x78
    5d34:	add	r1, r4, r7
    5d38:	mov	r0, sl
    5d3c:	bl	839c <MD5Transform>
    5d40:	add	r1, r7, #127	; 0x7f
    5d44:	add	r0, r7, #64	; 0x40
    5d48:	cmp	r1, r5
    5d4c:	mov	r7, r0
    5d50:	bcc	5d34 <rb_crypt+0x524>
    5d54:	ldr	r7, [fp, #-104]	; 0xffffff98
    5d58:	ldr	sl, [fp, #-100]	; 0xffffff9c
    5d5c:	ldr	r9, [sp, #32]
    5d60:	add	r1, r4, r0
    5d64:	sub	r2, r5, r0
    5d68:	mov	r0, r9
    5d6c:	bl	50a0 <memcpy@plt>
    5d70:	add	r0, r7, #24
    5d74:	cmn	r7, #24
    5d78:	str	r0, [fp, #-104]	; 0xffffff98
    5d7c:	ubfx	r1, r7, #3, #6
    5d80:	ldr	r0, [sp, #24]
    5d84:	addcs	sl, sl, #1
    5d88:	rsb	r5, r1, #64	; 0x40
    5d8c:	strcs	sl, [fp, #-100]	; 0xffffff9c
    5d90:	str	sl, [fp, #-100]	; 0xffffff9c
    5d94:	cmp	r5, #3
    5d98:	sub	r6, r6, r0
    5d9c:	add	r0, r8, r1
    5da0:	add	r0, r0, #24
    5da4:	bls	5dcc <rb_crypt+0x5bc>
    5da8:	mov	r5, #0
    5dac:	b	5df0 <rb_crypt+0x5e0>
    5db0:	mov	r5, r0
    5db4:	mov	r0, r4
    5db8:	mov	r1, r9
    5dbc:	mov	r3, r5
    5dc0:	sub	sp, fp, #28
    5dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dc8:	b	a040 <rb_sha512_crypt_r>
    5dcc:	ldr	r1, [pc, #3912]	; 6d1c <rb_crypt+0x150c>
    5dd0:	mov	r2, r5
    5dd4:	add	r1, pc, r1
    5dd8:	bl	50a0 <memcpy@plt>
    5ddc:	ldr	r7, [sp, #32]
    5de0:	sub	r0, fp, #120	; 0x78
    5de4:	mov	r1, r7
    5de8:	bl	839c <MD5Transform>
    5dec:	mov	r0, r7
    5df0:	ldr	sl, [sp, #24]
    5df4:	ldr	r1, [pc, #3876]	; 6d20 <rb_crypt+0x1510>
    5df8:	rsb	r2, r5, #3
    5dfc:	add	r1, pc, r1
    5e00:	add	r1, r1, r5
    5e04:	bl	50a0 <memcpy@plt>
    5e08:	ldr	r2, [fp, #-104]	; 0xffffff98
    5e0c:	ldr	r0, [fp, #-100]	; 0xffffff9c
    5e10:	mov	r7, r6
    5e14:	add	r3, r2, r6, lsl #3
    5e18:	cmp	r3, r2
    5e1c:	str	r3, [fp, #-104]	; 0xffffff98
    5e20:	ubfx	r1, r2, #3, #6
    5e24:	str	r7, [sp, #28]
    5e28:	addcc	r0, r0, #1
    5e2c:	rsb	r5, r1, #64	; 0x40
    5e30:	strcc	r0, [fp, #-100]	; 0xffffff9c
    5e34:	add	r0, r0, r6, lsr #29
    5e38:	mov	r6, #0
    5e3c:	cmp	r5, r7
    5e40:	str	r0, [fp, #-100]	; 0xffffff9c
    5e44:	add	r0, r8, r1
    5e48:	add	r0, r0, #24
    5e4c:	bls	5e58 <rb_crypt+0x648>
    5e50:	mov	r2, #0
    5e54:	b	6410 <rb_crypt+0xc00>
    5e58:	mov	r1, sl
    5e5c:	mov	r2, r5
    5e60:	bl	50a0 <memcpy@plt>
    5e64:	ldr	r8, [sp, #32]
    5e68:	sub	r0, fp, #120	; 0x78
    5e6c:	mov	r1, r8
    5e70:	bl	839c <MD5Transform>
    5e74:	add	r0, r5, #63	; 0x3f
    5e78:	cmp	r0, r7
    5e7c:	bcs	6408 <rb_crypt+0xbf8>
    5e80:	ldr	r7, [sp, #28]
    5e84:	sub	r8, fp, #120	; 0x78
    5e88:	add	r1, sl, r5
    5e8c:	mov	r0, r8
    5e90:	bl	839c <MD5Transform>
    5e94:	add	r0, r5, #127	; 0x7f
    5e98:	add	r2, r5, #64	; 0x40
    5e9c:	cmp	r0, r7
    5ea0:	mov	r5, r2
    5ea4:	bcc	5e88 <rb_crypt+0x678>
    5ea8:	ldr	r0, [sp, #32]
    5eac:	b	6410 <rb_crypt+0xc00>
    5eb0:	sub	r2, r0, #46	; 0x2e
    5eb4:	uxtb	r3, r2
    5eb8:	cmp	r3, #12
    5ebc:	movcs	r2, #0
    5ec0:	ldrb	r3, [r7]
    5ec4:	lsl	r2, r2, #6
    5ec8:	cmp	r3, #122	; 0x7a
    5ecc:	bhi	5bd0 <rb_crypt+0x3c0>
    5ed0:	cmp	r3, #97	; 0x61
    5ed4:	bcc	5ee8 <rb_crypt+0x6d8>
    5ed8:	ldr	r6, [pc, #3652]	; 6d24 <rb_crypt+0x1514>
    5edc:	sub	r1, r3, #59	; 0x3b
    5ee0:	add	r6, pc, r6
    5ee4:	b	5f18 <rb_crypt+0x708>
    5ee8:	ldr	r6, [pc, #3640]	; 6d28 <rb_crypt+0x1518>
    5eec:	cmp	r3, #90	; 0x5a
    5ef0:	add	r6, pc, r6
    5ef4:	bhi	5f18 <rb_crypt+0x708>
    5ef8:	cmp	r3, #65	; 0x41
    5efc:	bcc	5f08 <rb_crypt+0x6f8>
    5f00:	sub	r1, r3, #53	; 0x35
    5f04:	b	5f18 <rb_crypt+0x708>
    5f08:	sub	r1, r3, #46	; 0x2e
    5f0c:	uxtb	r7, r1
    5f10:	cmp	r7, #12
    5f14:	movcs	r1, #0
    5f18:	cmp	r0, #0
    5f1c:	strb	r3, [r6, #44]	; 0x2c
    5f20:	movne	r3, r0
    5f24:	orr	r0, r1, r2
    5f28:	strb	r3, [r6, #45]	; 0x2d
    5f2c:	ldr	r2, [r6, #16]
    5f30:	cmp	r2, r0
    5f34:	bne	5f50 <rb_crypt+0x740>
    5f38:	ldr	r1, [r6, #12]
    5f3c:	b	6044 <rb_crypt+0x834>
    5f40:	.word	0x67452301
    5f44:	.word	0xefcdab89
    5f48:	.word	0x98badcfe
    5f4c:	.word	0x10325476
    5f50:	mov	r3, #4194304	; 0x400000
    5f54:	and	r7, r1, #1
    5f58:	mov	r2, #2048	; 0x800
    5f5c:	str	r0, [r6, #16]
    5f60:	and	r3, r3, r1, lsl #21
    5f64:	and	r2, r2, r0, lsr #1
    5f68:	orr	r3, r3, r7, lsl #23
    5f6c:	and	r7, r1, #4
    5f70:	orr	r3, r3, r7, lsl #19
    5f74:	and	r7, r1, #8
    5f78:	orr	r3, r3, r7, lsl #17
    5f7c:	and	r7, r1, #16
    5f80:	and	r1, r1, #32
    5f84:	orr	r3, r3, r7, lsl #15
    5f88:	orr	r1, r3, r1, lsl #13
    5f8c:	and	r3, r0, #64	; 0x40
    5f90:	orr	r1, r1, r3, lsl #11
    5f94:	and	r3, r0, #128	; 0x80
    5f98:	orr	r1, r1, r3, lsl #9
    5f9c:	and	r3, r0, #256	; 0x100
    5fa0:	orr	r1, r1, r3, lsl #7
    5fa4:	and	r3, r0, #512	; 0x200
    5fa8:	orr	r1, r1, r3, lsl #5
    5fac:	and	r3, r0, #1024	; 0x400
    5fb0:	orr	r1, r1, r3, lsl #3
    5fb4:	and	r3, r0, #2048	; 0x800
    5fb8:	orr	r1, r1, r3, lsl #1
    5fbc:	orr	r1, r1, r2
    5fc0:	mov	r2, #1024	; 0x400
    5fc4:	and	r2, r2, r0, lsr #3
    5fc8:	orr	r1, r1, r2
    5fcc:	mov	r2, #512	; 0x200
    5fd0:	and	r2, r2, r0, lsr #5
    5fd4:	orr	r1, r1, r2
    5fd8:	mov	r2, #256	; 0x100
    5fdc:	and	r2, r2, r0, lsr #7
    5fe0:	orr	r1, r1, r2
    5fe4:	mov	r2, #128	; 0x80
    5fe8:	and	r2, r2, r0, lsr #9
    5fec:	orr	r1, r1, r2
    5ff0:	mov	r2, #64	; 0x40
    5ff4:	and	r2, r2, r0, lsr #11
    5ff8:	orr	r1, r1, r2
    5ffc:	mov	r2, #32
    6000:	and	r2, r2, r0, lsr #13
    6004:	orr	r1, r1, r2
    6008:	mov	r2, #16
    600c:	and	r2, r2, r0, lsr #15
    6010:	orr	r1, r1, r2
    6014:	mov	r2, #8
    6018:	and	r2, r2, r0, lsr #17
    601c:	orr	r1, r1, r2
    6020:	mov	r2, #4
    6024:	and	r2, r2, r0, lsr #19
    6028:	orr	r1, r1, r2
    602c:	mov	r2, #2
    6030:	and	r2, r2, r0, lsr #21
    6034:	ubfx	r0, r0, #23, #1
    6038:	orr	r1, r1, r2
    603c:	orr	r1, r1, r0
    6040:	str	r1, [r6, #12]
    6044:	ldr	r0, [pc, #3804]	; 6f28 <rb_crypt+0x1718>
    6048:	mov	r4, #4096	; 0x1000
    604c:	mov	ip, #5120	; 0x1400
    6050:	mov	r6, #6144	; 0x1800
    6054:	mov	r5, #7168	; 0x1c00
    6058:	mov	lr, #24
    605c:	add	r0, pc, r0
    6060:	ldr	r2, [r0, r4]
    6064:	ldr	r3, [r0, #1024]	; 0x400
    6068:	ldr	r7, [pc, #3772]	; 6f2c <rb_crypt+0x171c>
    606c:	ldr	r7, [pc, r7]
    6070:	orr	r3, r3, r7
    6074:	ldr	r7, [r0, #2048]	; 0x800
    6078:	orr	r3, r3, r7
    607c:	ldr	r7, [r0, #3072]	; 0xc00
    6080:	orr	r3, r3, r7
    6084:	orr	r2, r3, r2
    6088:	ldr	r3, [r0, ip]
    608c:	orr	r2, r2, r3
    6090:	ldr	r3, [r0, r6]
    6094:	ldr	r0, [r0, r5]
    6098:	orr	r2, r2, r3
    609c:	orr	r3, r2, r0
    60a0:	ldr	r0, [pc, #3720]	; 6f30 <rb_crypt+0x1720>
    60a4:	add	r0, pc, r0
    60a8:	ldr	r2, [r0, r4]
    60ac:	ldr	r4, [r0, #1024]	; 0x400
    60b0:	ldr	r7, [pc, #3708]	; 6f34 <rb_crypt+0x1724>
    60b4:	ldr	r7, [pc, r7]
    60b8:	orr	r7, r4, r7
    60bc:	ldr	r4, [r0, #2048]	; 0x800
    60c0:	orr	r7, r7, r4
    60c4:	ldr	r4, [r0, #3072]	; 0xc00
    60c8:	orr	r7, r7, r4
    60cc:	orr	r2, r7, r2
    60d0:	ldr	r7, [r0, ip]
    60d4:	orr	r2, r2, r7
    60d8:	ldr	r7, [r0, r6]
    60dc:	ldr	r0, [r0, r5]
    60e0:	mov	r5, #16515072	; 0xfc0000
    60e4:	mov	r6, #4032	; 0xfc0
    60e8:	orr	r2, r2, r7
    60ec:	orr	r8, r2, r0
    60f0:	ldr	r0, [pc, #3648]	; 6f38 <rb_crypt+0x1728>
    60f4:	ldr	r2, [pc, #3648]	; 6f3c <rb_crypt+0x172c>
    60f8:	ldr	sl, [pc, #3648]	; 6f40 <rb_crypt+0x1730>
    60fc:	ldr	r9, [pc, #3648]	; 6f44 <rb_crypt+0x1734>
    6100:	add	r0, pc, r0
    6104:	add	r2, pc, r2
    6108:	add	sl, pc, sl
    610c:	add	r9, pc, r9
    6110:	mov	ip, r8
    6114:	str	lr, [sp, #36]	; 0x24
    6118:	mov	lr, #0
    611c:	mov	r8, r3
    6120:	mov	r4, #258048	; 0x3f000
    6124:	and	r7, r5, r8, ror #9
    6128:	and	r5, r8, #129024	; 0x1f800
    612c:	mov	r3, r8
    6130:	and	r4, r4, r8, lsr #11
    6134:	orr	r4, r7, r4
    6138:	and	r7, r6, r8, lsr #13
    613c:	and	r6, r8, #8064	; 0x1f80
    6140:	lsl	r6, r6, #5
    6144:	orr	r4, r4, r7
    6148:	ubfx	r7, r8, #15, #6
    614c:	orr	r4, r4, r7
    6150:	ldr	r7, [sl, lr, lsl #2]
    6154:	orr	r6, r6, r8, lsr #31
    6158:	orr	r5, r6, r5, lsl #7
    615c:	and	r6, r8, #504	; 0x1f8
    6160:	orr	r5, r5, r6, lsl #3
    6164:	and	r6, r8, #31
    6168:	orr	r5, r5, r6, lsl #1
    616c:	eor	r7, r4, r7
    6170:	eor	r4, r4, r5
    6174:	and	r4, r4, r1
    6178:	eor	r6, r7, r4
    617c:	ldrb	r7, [r0, r6, lsr #12]
    6180:	bfc	r6, #12, #20
    6184:	add	r6, r0, r6
    6188:	ldr	r8, [r2, r7, lsl #2]
    618c:	mov	r7, r2
    6190:	mov	r2, r0
    6194:	mov	r0, r1
    6198:	mov	r1, #4096	; 0x1000
    619c:	ldrb	r6, [r6, r1]
    61a0:	mov	r1, r0
    61a4:	mov	r0, r2
    61a8:	mov	r2, r7
    61ac:	add	r6, r7, r6, lsl #2
    61b0:	ldr	r7, [r9, lr, lsl #2]
    61b4:	add	lr, lr, #1
    61b8:	ldr	r6, [r6, #1024]	; 0x400
    61bc:	cmp	lr, #16
    61c0:	eor	r5, r5, r7
    61c4:	mov	r7, #8192	; 0x2000
    61c8:	eor	r4, r5, r4
    61cc:	orr	r6, r6, r8
    61d0:	add	r5, r0, r4, lsr #12
    61d4:	bfc	r4, #12, #20
    61d8:	ldrb	r5, [r5, r7]
    61dc:	mov	r7, #12288	; 0x3000
    61e0:	add	r4, r0, r4
    61e4:	ldrb	r4, [r4, r7]
    61e8:	add	r5, r2, r5, lsl #2
    61ec:	ldr	r5, [r5, #2048]	; 0x800
    61f0:	add	r4, r2, r4, lsl #2
    61f4:	ldr	r4, [r4, #3072]	; 0xc00
    61f8:	orr	r5, r6, r5
    61fc:	mov	r6, #4032	; 0xfc0
    6200:	orr	r4, r5, r4
    6204:	mov	r5, #16515072	; 0xfc0000
    6208:	eor	r8, r4, ip
    620c:	mov	ip, r3
    6210:	bne	6120 <rb_crypt+0x910>
    6214:	ldr	r7, [sp, #36]	; 0x24
    6218:	sub	lr, r7, #1
    621c:	cmp	r7, #0
    6220:	bne	6110 <rb_crypt+0x900>
    6224:	ldr	r1, [pc, #3356]	; 6f48 <rb_crypt+0x1738>
    6228:	uxtb	r9, r3
    622c:	mov	r0, #7168	; 0x1c00
    6230:	mov	sl, #5120	; 0x1400
    6234:	uxtb	lr, r8
    6238:	add	r1, pc, r1
    623c:	add	r2, r1, r9, lsl #2
    6240:	ldr	r0, [r2, r0]
    6244:	str	r0, [sp, #36]	; 0x24
    6248:	ubfx	r7, r3, #8, #8
    624c:	mov	r0, #6144	; 0x1800
    6250:	add	r6, r1, r7, lsl #2
    6254:	ldr	r0, [r6, r0]
    6258:	mov	r6, #7168	; 0x1c00
    625c:	str	r0, [sp, #32]
    6260:	ubfx	r5, r3, #16, #8
    6264:	add	r4, r1, r5, lsl #2
    6268:	ldr	r0, [r4, sl]
    626c:	lsr	r4, r3, #24
    6270:	add	r3, r1, r4, lsl #2
    6274:	str	r0, [sp, #28]
    6278:	mov	r0, #4096	; 0x1000
    627c:	ldr	r0, [r3, r0]
    6280:	add	r3, r1, lr, lsl #2
    6284:	str	r0, [sp, #24]
    6288:	ldr	r0, [r3, #3072]	; 0xc00
    628c:	str	r0, [sp, #20]
    6290:	ubfx	ip, r8, #8, #8
    6294:	add	r3, r1, ip, lsl #2
    6298:	ldr	r0, [r3, #2048]	; 0x800
    629c:	str	r0, [sp, #16]
    62a0:	lsr	r0, r8, #24
    62a4:	ubfx	r2, r8, #16, #8
    62a8:	ldr	r3, [r1, r0, lsl #2]
    62ac:	add	r1, r1, r2, lsl #2
    62b0:	ldr	r8, [r1, #1024]	; 0x400
    62b4:	str	r3, [sp, #12]
    62b8:	ldr	r1, [pc, #3212]	; 6f4c <rb_crypt+0x173c>
    62bc:	add	r1, pc, r1
    62c0:	add	r3, r1, r9, lsl #2
    62c4:	add	r7, r1, r7, lsl #2
    62c8:	add	r4, r1, r4, lsl #2
    62cc:	add	r5, r1, r5, lsl #2
    62d0:	ldr	r0, [r1, r0, lsl #2]
    62d4:	ldr	r9, [r3, r6]
    62d8:	mov	r3, #6144	; 0x1800
    62dc:	add	r6, r1, lr, lsl #2
    62e0:	ldr	sl, [r5, sl]
    62e4:	ldr	r7, [r7, r3]
    62e8:	mov	r3, #4096	; 0x1000
    62ec:	ldr	r6, [r6, #3072]	; 0xc00
    62f0:	ldr	r4, [r4, r3]
    62f4:	add	r3, r1, ip, lsl #2
    62f8:	add	r1, r1, r2, lsl #2
    62fc:	mov	r2, #0
    6300:	ldr	r1, [r1, #1024]	; 0x400
    6304:	ldr	r3, [r3, #2048]	; 0x800
    6308:	ldr	r5, [pc, #3136]	; 6f50 <rb_crypt+0x1740>
    630c:	orr	r0, r1, r0
    6310:	add	r5, pc, r5
    6314:	orr	r0, r0, r3
    6318:	strb	r2, [r5, #57]	; 0x39
    631c:	orr	r0, r0, r6
    6320:	add	r6, r5, #44	; 0x2c
    6324:	orr	r0, r0, r4
    6328:	orr	r0, r0, sl
    632c:	orr	r0, r0, r7
    6330:	orr	r1, r0, r9
    6334:	ldr	r0, [pc, #3096]	; 6f54 <rb_crypt+0x1744>
    6338:	add	r0, pc, r0
    633c:	ldrb	r2, [r0, r1, lsr #26]
    6340:	strb	r2, [r5, #46]	; 0x2e
    6344:	ubfx	r2, r1, #20, #6
    6348:	ldrb	r2, [r0, r2]
    634c:	strb	r2, [r5, #47]	; 0x2f
    6350:	ubfx	r2, r1, #14, #6
    6354:	ldrb	r2, [r0, r2]
    6358:	strb	r2, [r5, #48]	; 0x30
    635c:	ubfx	r2, r1, #8, #6
    6360:	ldrb	r2, [r0, r2]
    6364:	strb	r2, [r5, #49]	; 0x31
    6368:	ubfx	r2, r1, #2, #6
    636c:	ldr	r3, [sp, #16]
    6370:	ldrb	r2, [r0, r2]
    6374:	strb	r2, [r5, #50]	; 0x32
    6378:	ldr	r2, [sp, #12]
    637c:	orr	r2, r8, r2
    6380:	orr	r2, r2, r3
    6384:	ldr	r3, [sp, #20]
    6388:	orr	r2, r2, r3
    638c:	ldr	r3, [sp, #24]
    6390:	orr	r2, r2, r3
    6394:	ldr	r3, [sp, #28]
    6398:	orr	r2, r2, r3
    639c:	ldr	r3, [sp, #32]
    63a0:	orr	r2, r2, r3
    63a4:	ldr	r3, [sp, #36]	; 0x24
    63a8:	orr	r2, r2, r3
    63ac:	ubfx	r3, r2, #22, #6
    63b0:	ldrb	r3, [r0, r3]
    63b4:	strb	r3, [r5, #52]	; 0x34
    63b8:	ubfx	r3, r2, #16, #6
    63bc:	ldrb	r3, [r0, r3]
    63c0:	strb	r3, [r5, #53]	; 0x35
    63c4:	ubfx	r3, r2, #10, #6
    63c8:	ldrb	r3, [r0, r3]
    63cc:	strb	r3, [r5, #54]	; 0x36
    63d0:	ubfx	r3, r2, #4, #6
    63d4:	ldrb	r3, [r0, r3]
    63d8:	strb	r3, [r5, #55]	; 0x37
    63dc:	and	r3, r2, #15
    63e0:	lsr	r2, r2, #16
    63e4:	ldrb	r3, [r0, r3, lsl #2]
    63e8:	orr	r1, r2, r1, lsl #16
    63ec:	strb	r3, [r5, #56]	; 0x38
    63f0:	ubfx	r1, r1, #12, #6
    63f4:	ldrb	r0, [r0, r1]
    63f8:	strb	r0, [r5, #51]	; 0x33
    63fc:	mov	r0, r6
    6400:	sub	sp, fp, #28
    6404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6408:	mov	r0, r8
    640c:	mov	r2, r5
    6410:	ldr	r3, [sp, #28]
    6414:	lsl	r1, r3, #3
    6418:	str	r1, [sp, #20]
    641c:	add	r1, sl, r2
    6420:	sub	r2, r3, r2
    6424:	bl	50a0 <memcpy@plt>
    6428:	add	r0, pc, #976	; 0x3d0
    642c:	add	r9, sp, #56	; 0x38
    6430:	vld1.64	{d16-d17}, [r0 :128]
    6434:	mov	r0, #24
    6438:	mov	r8, r9
    643c:	vst1.32	{d16-d17}, [r8], r0
    6440:	mov	r0, r4
    6444:	bl	507c <strlen@plt>
    6448:	mov	r5, r0
    644c:	lsl	r0, r0, #3
    6450:	str	r0, [sp, #72]	; 0x48
    6454:	lsr	r0, r5, #29
    6458:	cmp	r5, #64	; 0x40
    645c:	str	r0, [sp, #76]	; 0x4c
    6460:	bcc	64e0 <rb_crypt+0xcd0>
    6464:	mov	r1, #48	; 0x30
    6468:	mov	r2, r4
    646c:	add	r0, r4, #32
    6470:	add	r3, r4, #16
    6474:	vld1.8	{d16-d17}, [r2], r1
    6478:	vld1.8	{d18-d19}, [r0]
    647c:	vld1.8	{d20-d21}, [r3]
    6480:	add	r0, r8, #32
    6484:	vld1.8	{d22-d23}, [r2]
    6488:	vst1.8	{d18-d19}, [r0]
    648c:	add	r0, r8, #16
    6490:	vst1.8	{d20-d21}, [r0]
    6494:	mov	r0, r8
    6498:	vst1.8	{d16-d17}, [r0], r1
    649c:	mov	r1, r8
    64a0:	vst1.8	{d22-d23}, [r0]
    64a4:	add	r0, sp, #56	; 0x38
    64a8:	bl	839c <MD5Transform>
    64ac:	mov	r6, #64	; 0x40
    64b0:	cmp	r5, #128	; 0x80
    64b4:	bcc	64e0 <rb_crypt+0xcd0>
    64b8:	mov	r7, #64	; 0x40
    64bc:	add	sl, sp, #56	; 0x38
    64c0:	add	r1, r4, r7
    64c4:	mov	r0, sl
    64c8:	bl	839c <MD5Transform>
    64cc:	add	r0, r7, #127	; 0x7f
    64d0:	add	r6, r7, #64	; 0x40
    64d4:	cmp	r0, r5
    64d8:	mov	r7, r6
    64dc:	bcc	64c0 <rb_crypt+0xcb0>
    64e0:	ldr	r0, [sp, #28]
    64e4:	add	r1, r4, r6
    64e8:	sub	r2, r5, r6
    64ec:	lsr	r7, r0, #29
    64f0:	mov	r0, r8
    64f4:	bl	50a0 <memcpy@plt>
    64f8:	ldr	r1, [sp, #72]	; 0x48
    64fc:	ldr	r2, [sp, #20]
    6500:	ldr	r0, [sp, #76]	; 0x4c
    6504:	adds	r2, r1, r2
    6508:	str	r2, [sp, #72]	; 0x48
    650c:	ubfx	r1, r1, #3, #6
    6510:	ldr	r6, [sp, #28]
    6514:	addcs	r0, r0, #1
    6518:	ldr	sl, [sp, #32]
    651c:	mov	r2, #0
    6520:	str	r7, [sp, #16]
    6524:	strcs	r0, [sp, #76]	; 0x4c
    6528:	add	r0, r0, r7
    652c:	rsb	r5, r1, #64	; 0x40
    6530:	str	r0, [sp, #76]	; 0x4c
    6534:	add	r0, r9, r1
    6538:	add	r0, r0, #24
    653c:	cmp	r5, r6
    6540:	bhi	65ac <rb_crypt+0xd9c>
    6544:	ldr	r1, [sp, #24]
    6548:	mov	r2, r5
    654c:	bl	50a0 <memcpy@plt>
    6550:	add	r0, sp, #56	; 0x38
    6554:	mov	r1, r8
    6558:	bl	839c <MD5Transform>
    655c:	add	r0, r5, #63	; 0x3f
    6560:	cmp	r0, r6
    6564:	bcs	65a4 <rb_crypt+0xd94>
    6568:	ldr	r9, [sp, #24]
    656c:	mov	r7, r6
    6570:	add	r6, sp, #56	; 0x38
    6574:	add	r1, r9, r5
    6578:	mov	r0, r6
    657c:	bl	839c <MD5Transform>
    6580:	add	r0, r5, #127	; 0x7f
    6584:	add	r2, r5, #64	; 0x40
    6588:	cmp	r0, r7
    658c:	mov	r5, r2
    6590:	bcc	6574 <rb_crypt+0xd64>
    6594:	mov	r0, r8
    6598:	mov	r6, r7
    659c:	add	r9, sp, #56	; 0x38
    65a0:	b	65ac <rb_crypt+0xd9c>
    65a4:	mov	r0, r8
    65a8:	mov	r2, r5
    65ac:	ldr	r1, [sp, #24]
    65b0:	add	r1, r1, r2
    65b4:	sub	r2, r6, r2
    65b8:	bl	50a0 <memcpy@plt>
    65bc:	mov	r0, r4
    65c0:	bl	507c <strlen@plt>
    65c4:	ldr	r2, [sp, #72]	; 0x48
    65c8:	mov	r5, r0
    65cc:	ldr	r0, [sp, #76]	; 0x4c
    65d0:	add	r3, r2, r5, lsl #3
    65d4:	cmp	r3, r2
    65d8:	str	r3, [sp, #72]	; 0x48
    65dc:	ubfx	r1, r2, #3, #6
    65e0:	mov	r2, #0
    65e4:	addcc	r0, r0, #1
    65e8:	rsb	r6, r1, #64	; 0x40
    65ec:	strcc	r0, [sp, #76]	; 0x4c
    65f0:	add	r0, r0, r5, lsr #29
    65f4:	cmp	r6, r5
    65f8:	str	r0, [sp, #76]	; 0x4c
    65fc:	add	r0, r9, r1
    6600:	add	r0, r0, #24
    6604:	bhi	6660 <rb_crypt+0xe50>
    6608:	mov	r1, r4
    660c:	mov	r2, r6
    6610:	bl	50a0 <memcpy@plt>
    6614:	add	r0, sp, #56	; 0x38
    6618:	mov	r1, r8
    661c:	bl	839c <MD5Transform>
    6620:	add	r0, r6, #63	; 0x3f
    6624:	cmp	r0, r5
    6628:	bcs	6658 <rb_crypt+0xe48>
    662c:	add	r7, sp, #56	; 0x38
    6630:	add	r1, r4, r6
    6634:	mov	r0, r7
    6638:	bl	839c <MD5Transform>
    663c:	add	r0, r6, #127	; 0x7f
    6640:	add	r2, r6, #64	; 0x40
    6644:	cmp	r0, r5
    6648:	mov	r6, r2
    664c:	bcc	6630 <rb_crypt+0xe20>
    6650:	mov	r0, r8
    6654:	b	6660 <rb_crypt+0xe50>
    6658:	mov	r0, r8
    665c:	mov	r2, r6
    6660:	add	r1, r4, r2
    6664:	sub	r2, r5, r2
    6668:	str	r8, [sp, #36]	; 0x24
    666c:	bl	50a0 <memcpy@plt>
    6670:	add	r0, sp, #40	; 0x28
    6674:	add	r1, sp, #56	; 0x38
    6678:	bl	81ec <MD5Final>
    667c:	mov	r0, r4
    6680:	bl	507c <strlen@plt>
    6684:	cmp	r0, #1
    6688:	blt	675c <rb_crypt+0xf4c>
    668c:	mov	r9, r0
    6690:	add	r8, sp, #40	; 0x28
    6694:	ldr	r1, [fp, #-104]	; 0xffffff98
    6698:	cmp	r9, #16
    669c:	mov	r7, r9
    66a0:	ldr	r0, [fp, #-100]	; 0xffffff9c
    66a4:	sub	sl, fp, #120	; 0x78
    66a8:	movge	r7, #16
    66ac:	add	r2, r1, r7, lsl #3
    66b0:	cmp	r2, r7, lsl #3
    66b4:	str	r2, [fp, #-104]	; 0xffffff98
    66b8:	ubfx	r1, r1, #3, #6
    66bc:	mov	r2, #0
    66c0:	addcc	r0, r0, #1
    66c4:	rsb	r6, r1, #64	; 0x40
    66c8:	strcc	r0, [fp, #-100]	; 0xffffff9c
    66cc:	add	r0, r0, r7, lsr #29
    66d0:	cmp	r6, r7
    66d4:	str	r0, [fp, #-100]	; 0xffffff9c
    66d8:	add	r0, sl, r1
    66dc:	add	r0, r0, #24
    66e0:	bls	66ec <rb_crypt+0xedc>
    66e4:	ldr	sl, [sp, #32]
    66e8:	b	6748 <rb_crypt+0xf38>
    66ec:	mov	r1, r8
    66f0:	mov	r2, r6
    66f4:	bl	50a0 <memcpy@plt>
    66f8:	mov	r0, sl
    66fc:	ldr	sl, [sp, #32]
    6700:	mov	r1, sl
    6704:	bl	839c <MD5Transform>
    6708:	add	r0, r6, #63	; 0x3f
    670c:	cmp	r0, r7
    6710:	bcs	6740 <rb_crypt+0xf30>
    6714:	sub	r5, fp, #120	; 0x78
    6718:	add	r1, r8, r6
    671c:	mov	r0, r5
    6720:	bl	839c <MD5Transform>
    6724:	add	r0, r6, #127	; 0x7f
    6728:	add	r2, r6, #64	; 0x40
    672c:	cmp	r0, r7
    6730:	mov	r6, r2
    6734:	bcc	6718 <rb_crypt+0xf08>
    6738:	mov	r0, sl
    673c:	b	6748 <rb_crypt+0xf38>
    6740:	mov	r0, sl
    6744:	mov	r2, r6
    6748:	add	r1, r8, r2
    674c:	sub	r2, r7, r2
    6750:	bl	50a0 <memcpy@plt>
    6754:	subs	r9, r9, #16
    6758:	bgt	6694 <rb_crypt+0xe84>
    675c:	vmov.i32	q8, #0	; 0x00000000
    6760:	add	r0, sp, #40	; 0x28
    6764:	vst1.64	{d16-d17}, [r0]
    6768:	mov	r0, r4
    676c:	bl	507c <strlen@plt>
    6770:	cmp	r0, #0
    6774:	beq	688c <rb_crypt+0x107c>
    6778:	mov	r8, r0
    677c:	mov	r6, #0
    6780:	ldr	r2, [fp, #-104]	; 0xffffff98
    6784:	ldr	r0, [fp, #-100]	; 0xffffff9c
    6788:	tst	r8, #1
    678c:	add	r1, r2, #8
    6790:	str	r1, [fp, #-104]	; 0xffffff98
    6794:	ubfx	r1, r2, #3, #6
    6798:	bne	67cc <rb_crypt+0xfbc>
    679c:	cmn	r2, #8
    67a0:	sub	r7, fp, #120	; 0x78
    67a4:	rsb	r5, r1, #64	; 0x40
    67a8:	addcs	r0, r0, #1
    67ac:	strcs	r0, [fp, #-100]	; 0xffffff9c
    67b0:	str	r0, [fp, #-100]	; 0xffffff9c
    67b4:	add	r0, r7, r1
    67b8:	cmp	r5, #1
    67bc:	add	r0, r0, #24
    67c0:	bls	6810 <rb_crypt+0x1000>
    67c4:	mov	r5, #0
    67c8:	b	682c <rb_crypt+0x101c>
    67cc:	cmn	r2, #8
    67d0:	sub	r7, fp, #120	; 0x78
    67d4:	rsb	r5, r1, #64	; 0x40
    67d8:	addcs	r0, r0, #1
    67dc:	strcs	r0, [fp, #-100]	; 0xffffff9c
    67e0:	str	r0, [fp, #-100]	; 0xffffff9c
    67e4:	add	r0, r7, r1
    67e8:	cmp	r5, #1
    67ec:	add	r0, r0, #24
    67f0:	bls	6850 <rb_crypt+0x1040>
    67f4:	add	r1, sp, #40	; 0x28
    67f8:	mov	r5, #0
    67fc:	b	6874 <rb_crypt+0x1064>
    6800:	.word	0x67452301
    6804:	.word	0xefcdab89
    6808:	.word	0x98badcfe
    680c:	.word	0x10325476
    6810:	mov	r1, r4
    6814:	mov	r2, r5
    6818:	bl	50a0 <memcpy@plt>
    681c:	mov	r0, r7
    6820:	mov	r1, sl
    6824:	bl	839c <MD5Transform>
    6828:	mov	r0, sl
    682c:	add	r1, r4, r5
    6830:	b	6874 <rb_crypt+0x1064>
    6834:	.word	0x00038fa8
    6838:	.word	0x00013fe4
    683c:	.word	0x00038f1c
    6840:	.word	0x00038f04
    6844:	.word	0x00038ee8
    6848:	.word	0x00034de4
    684c:	.word	0x00033d68
    6850:	add	r9, sp, #40	; 0x28
    6854:	mov	r2, r5
    6858:	mov	r1, r9
    685c:	bl	50a0 <memcpy@plt>
    6860:	mov	r0, r7
    6864:	mov	r1, sl
    6868:	bl	839c <MD5Transform>
    686c:	add	r1, r9, r5
    6870:	mov	r0, sl
    6874:	rsb	r2, r5, #1
    6878:	bl	50a0 <memcpy@plt>
    687c:	lsr	r0, r8, #1
    6880:	cmp	r6, r8, lsr #1
    6884:	mov	r8, r0
    6888:	bne	6780 <rb_crypt+0xf70>
    688c:	ldr	r5, [pc, #1656]	; 6f0c <rb_crypt+0x16fc>
    6890:	ldr	r1, [pc, #1656]	; 6f10 <rb_crypt+0x1700>
    6894:	mov	r2, #120	; 0x78
    6898:	add	r5, pc, r5
    689c:	add	r1, pc, r1
    68a0:	mov	r0, r5
    68a4:	bl	4f50 <rb_strlcpy@plt>
    68a8:	ldr	r7, [pc, #1636]	; 6f14 <rb_crypt+0x1704>
    68ac:	ldr	r6, [sp, #28]
    68b0:	mov	r0, r5
    68b4:	add	r7, pc, r7
    68b8:	mov	r2, r6
    68bc:	ldr	r1, [r7, #20]
    68c0:	bl	5148 <strncat@plt>
    68c4:	ldr	r1, [pc, #1612]	; 6f18 <rb_crypt+0x1708>
    68c8:	mov	r0, r5
    68cc:	mov	r2, #120	; 0x78
    68d0:	add	r1, pc, r1
    68d4:	bl	53d0 <rb_strlcat@plt>
    68d8:	add	r0, sp, #40	; 0x28
    68dc:	sub	r1, fp, #120	; 0x78
    68e0:	bl	81ec <MD5Final>
    68e4:	add	r0, r4, #32
    68e8:	ldr	sl, [r7, #20]
    68ec:	mov	r9, #0
    68f0:	mov	r8, #0
    68f4:	add	r7, sp, #56	; 0x38
    68f8:	str	r0, [sp, #12]
    68fc:	ldr	r0, [sp, #36]	; 0x24
    6900:	add	r0, r0, #32
    6904:	str	r0, [sp, #8]
    6908:	add	r0, r4, #16
    690c:	str	r0, [sp, #4]
    6910:	str	sl, [sp, #24]
    6914:	sub	r0, pc, #284	; 0x11c
    6918:	vld1.64	{d16-d17}, [r0 :128]
    691c:	mov	r0, r7
    6920:	vst1.32	{d16-d17}, [r0]!
    6924:	str	r9, [r0]
    6928:	ands	r0, r8, #1
    692c:	str	r9, [sp, #76]	; 0x4c
    6930:	str	r0, [sp, #32]
    6934:	beq	6a00 <rb_crypt+0x11f0>
    6938:	mov	r0, r4
    693c:	bl	507c <strlen@plt>
    6940:	mov	r5, r0
    6944:	lsl	r0, r0, #3
    6948:	str	r0, [sp, #72]	; 0x48
    694c:	lsr	r0, r5, #29
    6950:	cmp	r5, #64	; 0x40
    6954:	str	r0, [sp, #76]	; 0x4c
    6958:	mov	r0, #0
    695c:	bcc	69d8 <rb_crypt+0x11c8>
    6960:	ldr	r1, [sp, #12]
    6964:	mov	r0, r4
    6968:	mov	r2, #48	; 0x30
    696c:	vld1.8	{d16-d17}, [r0], r2
    6970:	vld1.8	{d18-d19}, [r1]
    6974:	ldr	r1, [sp, #4]
    6978:	vld1.8	{d22-d23}, [r0]
    697c:	ldr	r0, [sp, #8]
    6980:	vld1.8	{d20-d21}, [r1]
    6984:	ldr	r1, [sp, #36]	; 0x24
    6988:	vst1.8	{d18-d19}, [r0]
    698c:	add	r0, r1, #16
    6990:	vst1.8	{d20-d21}, [r0]
    6994:	mov	r0, r1
    6998:	vst1.8	{d16-d17}, [r0], r2
    699c:	vst1.8	{d22-d23}, [r0]
    69a0:	mov	r0, r7
    69a4:	bl	839c <MD5Transform>
    69a8:	mov	r0, #64	; 0x40
    69ac:	cmp	r5, #128	; 0x80
    69b0:	bcc	69d8 <rb_crypt+0x11c8>
    69b4:	mov	r6, #64	; 0x40
    69b8:	add	r1, r4, r6
    69bc:	mov	r0, r7
    69c0:	bl	839c <MD5Transform>
    69c4:	add	r1, r6, #127	; 0x7f
    69c8:	add	r0, r6, #64	; 0x40
    69cc:	cmp	r1, r5
    69d0:	mov	r6, r0
    69d4:	bcc	69b8 <rb_crypt+0x11a8>
    69d8:	add	r1, r4, r0
    69dc:	sub	r2, r5, r0
    69e0:	ldr	r0, [sp, #36]	; 0x24
    69e4:	bl	50a0 <memcpy@plt>
    69e8:	ldr	r6, [sp, #28]
    69ec:	b	6a1c <rb_crypt+0x120c>
    69f0:	.word	0x00035cfc
    69f4:	.word	0x000145cc
    69f8:	.word	0x00038c4c
    69fc:	.word	0x00036c3c
    6a00:	add	r0, sp, #40	; 0x28
    6a04:	str	r9, [sp, #76]	; 0x4c
    6a08:	vld1.64	{d16-d17}, [r0]
    6a0c:	mov	r0, #128	; 0x80
    6a10:	str	r0, [sp, #72]	; 0x48
    6a14:	ldr	r0, [sp, #36]	; 0x24
    6a18:	vst1.64	{d16-d17}, [r0]
    6a1c:	movw	r0, #43691	; 0xaaab
    6a20:	movt	r0, #43690	; 0xaaaa
    6a24:	umull	r0, r1, r8, r0
    6a28:	lsr	r0, r1, #1
    6a2c:	add	r0, r0, r0, lsl #1
    6a30:	subs	r0, r8, r0
    6a34:	beq	6af8 <rb_crypt+0x12e8>
    6a38:	ldr	r1, [sp, #72]	; 0x48
    6a3c:	ldr	r2, [sp, #20]
    6a40:	ldr	r0, [sp, #76]	; 0x4c
    6a44:	adds	r2, r1, r2
    6a48:	str	r2, [sp, #72]	; 0x48
    6a4c:	ubfx	r1, r1, #3, #6
    6a50:	ldr	r3, [sp, #16]
    6a54:	addcs	r0, r0, #1
    6a58:	mov	r2, #0
    6a5c:	strcs	r0, [sp, #76]	; 0x4c
    6a60:	rsb	r5, r1, #64	; 0x40
    6a64:	cmp	r5, r6
    6a68:	add	r0, r0, r3
    6a6c:	str	r0, [sp, #76]	; 0x4c
    6a70:	add	r0, r7, r1
    6a74:	add	r0, r0, #24
    6a78:	bhi	6aec <rb_crypt+0x12dc>
    6a7c:	mov	r1, sl
    6a80:	mov	r2, r5
    6a84:	bl	50a0 <memcpy@plt>
    6a88:	ldr	sl, [sp, #36]	; 0x24
    6a8c:	mov	r0, r7
    6a90:	mov	r1, sl
    6a94:	bl	839c <MD5Transform>
    6a98:	add	r0, r5, #63	; 0x3f
    6a9c:	cmp	r0, r6
    6aa0:	bcs	6ad8 <rb_crypt+0x12c8>
    6aa4:	ldr	sl, [sp, #24]
    6aa8:	add	r7, sp, #56	; 0x38
    6aac:	add	r1, sl, r5
    6ab0:	mov	r0, r7
    6ab4:	bl	839c <MD5Transform>
    6ab8:	add	r0, r5, #127	; 0x7f
    6abc:	add	r2, r5, #64	; 0x40
    6ac0:	cmp	r0, r6
    6ac4:	mov	r5, r2
    6ac8:	bcc	6aac <rb_crypt+0x129c>
    6acc:	ldr	r0, [sp, #36]	; 0x24
    6ad0:	b	6ae8 <rb_crypt+0x12d8>
    6ad4:	.word	0x00038c18
    6ad8:	mov	r0, sl
    6adc:	ldr	sl, [sp, #24]
    6ae0:	mov	r2, r5
    6ae4:	add	r7, sp, #56	; 0x38
    6ae8:	mov	r9, #0
    6aec:	add	r1, sl, r2
    6af0:	sub	r2, r6, r2
    6af4:	bl	50a0 <memcpy@plt>
    6af8:	movw	r0, #18725	; 0x4925
    6afc:	movt	r0, #9362	; 0x2492
    6b00:	umull	r0, r1, r8, r0
    6b04:	sub	r0, r8, r1
    6b08:	add	r0, r1, r0, lsr #1
    6b0c:	lsr	r1, r0, #2
    6b10:	lsl	r1, r1, #3
    6b14:	sub	r0, r1, r0, lsr #2
    6b18:	subs	r0, r8, r0
    6b1c:	beq	6bec <rb_crypt+0x13dc>
    6b20:	mov	r0, r4
    6b24:	bl	507c <strlen@plt>
    6b28:	ldr	r2, [sp, #72]	; 0x48
    6b2c:	mov	r5, r0
    6b30:	ldr	r0, [sp, #76]	; 0x4c
    6b34:	add	r3, r2, r5, lsl #3
    6b38:	cmp	r3, r2
    6b3c:	str	r3, [sp, #72]	; 0x48
    6b40:	ubfx	r1, r2, #3, #6
    6b44:	mov	r2, #0
    6b48:	addcc	r0, r0, #1
    6b4c:	rsb	r6, r1, #64	; 0x40
    6b50:	strcc	r0, [sp, #76]	; 0x4c
    6b54:	add	r0, r0, r5, lsr #29
    6b58:	cmp	r6, r5
    6b5c:	str	r0, [sp, #76]	; 0x4c
    6b60:	add	r0, r7, r1
    6b64:	add	r0, r0, #24
    6b68:	bls	6b78 <rb_crypt+0x1368>
    6b6c:	ldr	r6, [sp, #28]
    6b70:	b	6be0 <rb_crypt+0x13d0>
    6b74:	.word	0x00038c44
    6b78:	mov	r1, r4
    6b7c:	mov	r2, r6
    6b80:	bl	50a0 <memcpy@plt>
    6b84:	ldr	sl, [sp, #36]	; 0x24
    6b88:	mov	r0, r7
    6b8c:	mov	r1, sl
    6b90:	bl	839c <MD5Transform>
    6b94:	add	r0, r6, #63	; 0x3f
    6b98:	cmp	r0, r5
    6b9c:	bcs	6bd0 <rb_crypt+0x13c0>
    6ba0:	add	r1, r4, r6
    6ba4:	mov	r0, r7
    6ba8:	bl	839c <MD5Transform>
    6bac:	add	r0, r6, #127	; 0x7f
    6bb0:	add	r2, r6, #64	; 0x40
    6bb4:	cmp	r0, r5
    6bb8:	mov	r6, r2
    6bbc:	bcc	6ba0 <rb_crypt+0x1390>
    6bc0:	ldr	r0, [sp, #36]	; 0x24
    6bc4:	b	6bd8 <rb_crypt+0x13c8>
    6bc8:	.word	0x00038c2c
    6bcc:	.word	0x00038bc8
    6bd0:	mov	r0, sl
    6bd4:	mov	r2, r6
    6bd8:	ldr	r6, [sp, #28]
    6bdc:	ldr	sl, [sp, #24]
    6be0:	add	r1, r4, r2
    6be4:	sub	r2, r5, r2
    6be8:	bl	50a0 <memcpy@plt>
    6bec:	ldr	r0, [sp, #32]
    6bf0:	cmp	r0, #0
    6bf4:	beq	6c40 <rb_crypt+0x1430>
    6bf8:	ldr	r2, [sp, #72]	; 0x48
    6bfc:	ldr	r0, [sp, #76]	; 0x4c
    6c00:	add	r1, r2, #128	; 0x80
    6c04:	cmn	r2, #128	; 0x80
    6c08:	str	r1, [sp, #72]	; 0x48
    6c0c:	ubfx	r1, r2, #3, #6
    6c10:	addcs	r0, r0, #1
    6c14:	strcs	r0, [sp, #76]	; 0x4c
    6c18:	str	r0, [sp, #76]	; 0x4c
    6c1c:	add	r0, r7, r1
    6c20:	rsb	r5, r1, #64	; 0x40
    6c24:	add	r0, r0, #24
    6c28:	cmp	r5, #16
    6c2c:	bls	6c94 <rb_crypt+0x1484>
    6c30:	mov	r5, #0
    6c34:	add	r1, sp, #40	; 0x28
    6c38:	rsb	r2, r5, #16
    6c3c:	b	6d44 <rb_crypt+0x1534>
    6c40:	mov	r0, r4
    6c44:	bl	507c <strlen@plt>
    6c48:	ldr	r2, [sp, #72]	; 0x48
    6c4c:	mov	r5, r0
    6c50:	ldr	r0, [sp, #76]	; 0x4c
    6c54:	add	r3, r2, r5, lsl #3
    6c58:	cmp	r3, r2
    6c5c:	str	r3, [sp, #72]	; 0x48
    6c60:	ubfx	r1, r2, #3, #6
    6c64:	mov	r2, #0
    6c68:	addcc	r0, r0, #1
    6c6c:	rsb	r6, r1, #64	; 0x40
    6c70:	strcc	r0, [sp, #76]	; 0x4c
    6c74:	add	r0, r0, r5, lsr #29
    6c78:	cmp	r6, r5
    6c7c:	str	r0, [sp, #76]	; 0x4c
    6c80:	add	r0, r7, r1
    6c84:	add	r0, r0, #24
    6c88:	bls	6ccc <rb_crypt+0x14bc>
    6c8c:	ldr	r6, [sp, #28]
    6c90:	b	6d3c <rb_crypt+0x152c>
    6c94:	add	r9, sp, #40	; 0x28
    6c98:	mov	r2, r5
    6c9c:	mov	r1, r9
    6ca0:	bl	50a0 <memcpy@plt>
    6ca4:	ldr	sl, [sp, #36]	; 0x24
    6ca8:	mov	r0, r7
    6cac:	mov	r1, sl
    6cb0:	bl	839c <MD5Transform>
    6cb4:	mov	r0, sl
    6cb8:	ldr	sl, [sp, #24]
    6cbc:	add	r1, r9, r5
    6cc0:	mov	r9, #0
    6cc4:	rsb	r2, r5, #16
    6cc8:	b	6d44 <rb_crypt+0x1534>
    6ccc:	mov	r1, r4
    6cd0:	mov	r2, r6
    6cd4:	bl	50a0 <memcpy@plt>
    6cd8:	ldr	sl, [sp, #36]	; 0x24
    6cdc:	mov	r0, r7
    6ce0:	mov	r1, sl
    6ce4:	bl	839c <MD5Transform>
    6ce8:	add	r0, r6, #63	; 0x3f
    6cec:	cmp	r0, r5
    6cf0:	bcs	6d2c <rb_crypt+0x151c>
    6cf4:	add	r1, r4, r6
    6cf8:	mov	r0, r7
    6cfc:	bl	839c <MD5Transform>
    6d00:	add	r0, r6, #127	; 0x7f
    6d04:	add	r2, r6, #64	; 0x40
    6d08:	cmp	r0, r5
    6d0c:	mov	r6, r2
    6d10:	bcc	6cf4 <rb_crypt+0x14e4>
    6d14:	ldr	r0, [sp, #36]	; 0x24
    6d18:	b	6d34 <rb_crypt+0x1524>
    6d1c:	.word	0x00013a8c
    6d20:	.word	0x00013a64
    6d24:	.word	0x00038938
    6d28:	.word	0x00038928
    6d2c:	mov	r0, sl
    6d30:	mov	r2, r6
    6d34:	ldr	r6, [sp, #28]
    6d38:	ldr	sl, [sp, #24]
    6d3c:	add	r1, r4, r2
    6d40:	sub	r2, r5, r2
    6d44:	bl	50a0 <memcpy@plt>
    6d48:	add	r0, sp, #40	; 0x28
    6d4c:	mov	r1, r7
    6d50:	bl	81ec <MD5Final>
    6d54:	add	r8, r8, #1
    6d58:	cmp	r8, #1000	; 0x3e8
    6d5c:	bne	6914 <rb_crypt+0x1104>
    6d60:	ldr	r6, [pc, #436]	; 6f1c <rb_crypt+0x170c>
    6d64:	add	r6, pc, r6
    6d68:	mov	r0, r6
    6d6c:	bl	507c <strlen@plt>
    6d70:	ldrb	r3, [sp, #52]	; 0x34
    6d74:	ldr	r1, [pc, #420]	; 6f20 <rb_crypt+0x1710>
    6d78:	ldrb	r7, [sp, #40]	; 0x28
    6d7c:	ldrb	lr, [sp, #41]	; 0x29
    6d80:	ldrb	r5, [sp, #46]	; 0x2e
    6d84:	ldrb	ip, [sp, #42]	; 0x2a
    6d88:	add	r1, pc, r1
    6d8c:	and	r2, r3, #63	; 0x3f
    6d90:	ldrb	r2, [r1, r2]
    6d94:	ldrb	r4, [r1, r7, lsr #2]
    6d98:	strb	r2, [r6, r0]
    6d9c:	add	r0, r6, r0
    6da0:	strb	r4, [r0, #3]
    6da4:	ldrb	r4, [r1, lr, lsr #2]
    6da8:	strb	r4, [r0, #7]
    6dac:	ldrb	r4, [sp, #53]	; 0x35
    6db0:	and	r2, r4, #63	; 0x3f
    6db4:	ldrb	r2, [r1, r2]
    6db8:	strb	r2, [r0, #4]
    6dbc:	orr	r2, r3, r5, lsl #8
    6dc0:	ubfx	r2, r2, #6, #6
    6dc4:	ldrb	r2, [r1, r2]
    6dc8:	strb	r2, [r0, #1]
    6dcc:	ldrb	r2, [sp, #47]	; 0x2f
    6dd0:	orr	r3, r4, r2, lsl #8
    6dd4:	lsl	r2, r2, #8
    6dd8:	ubfx	r3, r3, #6, #6
    6ddc:	orr	r2, r2, lr, lsl #16
    6de0:	ldrb	r3, [r1, r3]
    6de4:	strb	r3, [r0, #5]
    6de8:	lsl	r3, r5, #8
    6dec:	orr	r3, r3, r7, lsl #16
    6df0:	ubfx	r3, r3, #12, #6
    6df4:	ldrb	r3, [r1, r3]
    6df8:	strb	r3, [r0, #2]
    6dfc:	ubfx	r2, r2, #12, #6
    6e00:	ldrb	r3, [sp, #54]	; 0x36
    6e04:	ldrb	r2, [r1, r2]
    6e08:	strb	r2, [r0, #6]
    6e0c:	ldrb	r2, [sp, #48]	; 0x30
    6e10:	orr	r7, r3, r2, lsl #8
    6e14:	and	r3, r3, #63	; 0x3f
    6e18:	lsl	r2, r2, #8
    6e1c:	ubfx	r7, r7, #6, #6
    6e20:	ldrb	r3, [r1, r3]
    6e24:	orr	r2, r2, ip, lsl #16
    6e28:	ldrb	r7, [r1, r7]
    6e2c:	strb	r7, [r0, #9]
    6e30:	strb	r3, [r0, #8]
    6e34:	ubfx	r2, r2, #12, #6
    6e38:	ldrb	r3, [sp, #43]	; 0x2b
    6e3c:	ldrb	r7, [sp, #45]	; 0x2d
    6e40:	ldrb	r2, [r1, r2]
    6e44:	ldrb	r5, [r1, r3, lsr #2]
    6e48:	strb	r2, [r0, #10]
    6e4c:	ldrb	r2, [r1, ip, lsr #2]
    6e50:	ldrb	ip, [sp, #44]	; 0x2c
    6e54:	strb	r2, [r0, #11]
    6e58:	strb	r5, [r0, #15]
    6e5c:	ldrb	r5, [sp, #55]	; 0x37
    6e60:	ldrb	r2, [sp, #49]	; 0x31
    6e64:	and	r4, r5, #63	; 0x3f
    6e68:	orr	r5, r5, r2, lsl #8
    6e6c:	ldrb	r4, [r1, r4]
    6e70:	strb	r4, [r0, #12]
    6e74:	and	r4, r7, #63	; 0x3f
    6e78:	ldrb	r4, [r1, r4]
    6e7c:	strb	r4, [r0, #16]
    6e80:	ubfx	r5, r5, #6, #6
    6e84:	ldrb	r5, [r1, r5]
    6e88:	strb	r5, [r0, #13]
    6e8c:	ldrb	r5, [sp, #50]	; 0x32
    6e90:	orr	r7, r7, r5, lsl #8
    6e94:	ubfx	r7, r7, #6, #6
    6e98:	ldrb	r7, [r1, r7]
    6e9c:	strb	r7, [r0, #17]
    6ea0:	lsl	r7, r2, #8
    6ea4:	ldrb	r2, [r1, ip, lsr #2]
    6ea8:	orr	r3, r7, r3, lsl #16
    6eac:	ubfx	r3, r3, #12, #6
    6eb0:	ldrb	r3, [r1, r3]
    6eb4:	strb	r3, [r0, #14]
    6eb8:	lsl	r3, r5, #8
    6ebc:	orr	r3, r3, ip, lsl #16
    6ec0:	ubfx	r3, r3, #12, #6
    6ec4:	ldrb	r3, [r1, r3]
    6ec8:	strb	r3, [r0, #18]
    6ecc:	strb	r2, [r0, #19]
    6ed0:	ldrb	r2, [sp, #51]	; 0x33
    6ed4:	ldrb	r3, [r1, r2, lsr #6]
    6ed8:	and	r2, r2, #63	; 0x3f
    6edc:	ldrb	r1, [r1, r2]
    6ee0:	strb	r3, [r0, #21]
    6ee4:	strb	r1, [r0, #20]
    6ee8:	add	r1, r0, #22
    6eec:	ldr	r2, [pc, #48]	; 6f24 <rb_crypt+0x1714>
    6ef0:	add	r2, pc, r2
    6ef4:	str	r1, [r2, #28]
    6ef8:	mov	r1, #0
    6efc:	strb	r1, [r0, #22]
    6f00:	mov	r0, r6
    6f04:	sub	sp, fp, #28
    6f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f0c:	.word	0x00037f08
    6f10:	.word	0x00012fc4
    6f14:	.word	0x00037f64
    6f18:	.word	0x00012f92
    6f1c:	.word	0x00037a3c
    6f20:	.word	0x00012a97
    6f24:	.word	0x00037928
    6f28:	.word	0x0002d6c4
    6f2c:	.word	0x0002d6b4
    6f30:	.word	0x0002b67c
    6f34:	.word	0x0002b66c
    6f38:	.word	0x000275a0
    6f3c:	.word	0x0003761c
    6f40:	.word	0x00038618
    6f44:	.word	0x00038654
    6f48:	.word	0x000314e8
    6f4c:	.word	0x0002f464
    6f50:	.word	0x00038508
    6f54:	.word	0x000134e7

00006f58 <rb_des_init>:
    6f58:	ldr	r1, [pc, #3756]	; 7e0c <rb_des_init+0xeb4>
    6f5c:	add	r1, pc, r1
    6f60:	ldrb	r0, [r1]
    6f64:	cmp	r0, #0
    6f68:	bxne	lr
    6f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f70:	add	fp, sp, #28
    6f74:	sub	sp, sp, #100	; 0x64
    6f78:	mov	r2, #0
    6f7c:	mov	r3, #0
    6f80:	str	r2, [r1, #4]
    6f84:	str	r2, [r1, #8]
    6f88:	str	r2, [r1, #12]
    6f8c:	str	r2, [r1, #16]
    6f90:	ldr	r1, [pc, #3704]	; 7e10 <rb_des_init+0xeb8>
    6f94:	ldr	r0, [pc, #3704]	; 7e14 <rb_des_init+0xebc>
    6f98:	add	r1, pc, r1
    6f9c:	add	r0, pc, r0
    6fa0:	and	r6, r2, #16
    6fa4:	and	r7, r3, #32
    6fa8:	add	r2, r2, #16
    6fac:	orr	r7, r6, r7
    6fb0:	ubfx	r6, r3, #1, #4
    6fb4:	orr	r7, r7, r6
    6fb8:	ldrb	r7, [r1, r7]
    6fbc:	strb	r7, [r0, r3]
    6fc0:	add	r3, r3, #1
    6fc4:	cmp	r3, #64	; 0x40
    6fc8:	bne	6fa0 <rb_des_init+0x48>
    6fcc:	mov	r2, #0
    6fd0:	mov	r3, #0
    6fd4:	and	r5, r2, #16
    6fd8:	and	r6, r3, #32
    6fdc:	add	r2, r2, #16
    6fe0:	add	r7, r0, r3
    6fe4:	orr	r6, r5, r6
    6fe8:	ubfx	r5, r3, #1, #4
    6fec:	add	r3, r3, #1
    6ff0:	cmp	r2, #1024	; 0x400
    6ff4:	orr	r6, r6, r5
    6ff8:	add	r6, r1, r6
    6ffc:	ldrb	r6, [r6, #64]	; 0x40
    7000:	strb	r6, [r7, #64]	; 0x40
    7004:	bne	6fd4 <rb_des_init+0x7c>
    7008:	mov	r2, #0
    700c:	mov	r3, #0
    7010:	and	r5, r2, #16
    7014:	and	r6, r3, #32
    7018:	add	r2, r2, #16
    701c:	add	r7, r0, r3
    7020:	orr	r6, r5, r6
    7024:	ubfx	r5, r3, #1, #4
    7028:	add	r3, r3, #1
    702c:	cmp	r2, #1024	; 0x400
    7030:	orr	r6, r6, r5
    7034:	add	r6, r1, r6
    7038:	ldrb	r6, [r6, #128]	; 0x80
    703c:	strb	r6, [r7, #128]	; 0x80
    7040:	bne	7010 <rb_des_init+0xb8>
    7044:	mov	r2, #0
    7048:	mov	r3, #0
    704c:	and	r5, r2, #16
    7050:	and	r6, r3, #32
    7054:	add	r2, r2, #16
    7058:	add	r7, r0, r3
    705c:	orr	r6, r5, r6
    7060:	ubfx	r5, r3, #1, #4
    7064:	add	r3, r3, #1
    7068:	cmp	r2, #1024	; 0x400
    706c:	orr	r6, r6, r5
    7070:	add	r6, r1, r6
    7074:	ldrb	r6, [r6, #192]	; 0xc0
    7078:	strb	r6, [r7, #192]	; 0xc0
    707c:	bne	704c <rb_des_init+0xf4>
    7080:	mov	r2, #0
    7084:	mov	r3, #0
    7088:	and	r5, r2, #16
    708c:	and	r6, r3, #32
    7090:	add	r2, r2, #16
    7094:	add	r7, r0, r3
    7098:	orr	r6, r5, r6
    709c:	ubfx	r5, r3, #1, #4
    70a0:	add	r3, r3, #1
    70a4:	cmp	r2, #1024	; 0x400
    70a8:	orr	r6, r6, r5
    70ac:	add	r6, r1, r6
    70b0:	ldrb	r6, [r6, #256]	; 0x100
    70b4:	strb	r6, [r7, #256]	; 0x100
    70b8:	bne	7088 <rb_des_init+0x130>
    70bc:	mov	r2, #0
    70c0:	mov	r3, #0
    70c4:	and	r5, r2, #16
    70c8:	and	r6, r3, #32
    70cc:	add	r2, r2, #16
    70d0:	add	r7, r0, r3
    70d4:	orr	r6, r5, r6
    70d8:	ubfx	r5, r3, #1, #4
    70dc:	add	r3, r3, #1
    70e0:	cmp	r2, #1024	; 0x400
    70e4:	orr	r6, r6, r5
    70e8:	add	r6, r1, r6
    70ec:	ldrb	r6, [r6, #320]	; 0x140
    70f0:	strb	r6, [r7, #320]	; 0x140
    70f4:	bne	70c4 <rb_des_init+0x16c>
    70f8:	mov	r2, #0
    70fc:	mov	r3, #0
    7100:	and	r5, r2, #16
    7104:	and	r6, r3, #32
    7108:	add	r2, r2, #16
    710c:	add	r7, r0, r3
    7110:	orr	r6, r5, r6
    7114:	ubfx	r5, r3, #1, #4
    7118:	add	r3, r3, #1
    711c:	cmp	r2, #1024	; 0x400
    7120:	orr	r6, r6, r5
    7124:	add	r6, r1, r6
    7128:	ldrb	r6, [r6, #384]	; 0x180
    712c:	strb	r6, [r7, #384]	; 0x180
    7130:	bne	7100 <rb_des_init+0x1a8>
    7134:	mov	r2, #0
    7138:	mov	r3, #0
    713c:	and	r5, r2, #16
    7140:	and	r6, r3, #32
    7144:	add	r2, r2, #16
    7148:	add	r7, r0, r3
    714c:	orr	r6, r5, r6
    7150:	ubfx	r5, r3, #1, #4
    7154:	add	r3, r3, #1
    7158:	cmp	r2, #1024	; 0x400
    715c:	orr	r6, r6, r5
    7160:	add	r6, r1, r6
    7164:	ldrb	r6, [r6, #448]	; 0x1c0
    7168:	strb	r6, [r7, #448]	; 0x1c0
    716c:	bne	713c <rb_des_init+0x1e4>
    7170:	ldr	r1, [pc, #4032]	; 8138 <rb_des_init+0x11e0>
    7174:	mov	r2, #0
    7178:	add	r1, pc, r1
    717c:	ldrb	r3, [r0, r2]
    7180:	lsl	r7, r2, #6
    7184:	mov	r6, #0
    7188:	lsl	r3, r3, #4
    718c:	add	r4, r0, r6
    7190:	orr	r5, r6, r7
    7194:	add	r6, r6, #1
    7198:	ldrb	r4, [r4, #64]	; 0x40
    719c:	cmp	r6, #64	; 0x40
    71a0:	orr	r4, r3, r4
    71a4:	strb	r4, [r1, r5]
    71a8:	bne	718c <rb_des_init+0x234>
    71ac:	add	r2, r2, #1
    71b0:	cmp	r2, #64	; 0x40
    71b4:	bne	717c <rb_des_init+0x224>
    71b8:	mov	ip, #0
    71bc:	mov	r3, #4096	; 0x1000
    71c0:	add	r7, r0, ip
    71c4:	lsl	r6, ip, #6
    71c8:	mov	r5, #0
    71cc:	ldrb	r7, [r7, #128]	; 0x80
    71d0:	lsl	r7, r7, #4
    71d4:	add	r2, r0, r5
    71d8:	orr	r4, r5, r6
    71dc:	add	r5, r5, #1
    71e0:	ldrb	r2, [r2, #192]	; 0xc0
    71e4:	cmp	r5, #64	; 0x40
    71e8:	add	r4, r1, r4
    71ec:	orr	r2, r7, r2
    71f0:	strb	r2, [r4, r3]
    71f4:	bne	71d4 <rb_des_init+0x27c>
    71f8:	add	ip, ip, #1
    71fc:	cmp	ip, #64	; 0x40
    7200:	bne	71c0 <rb_des_init+0x268>
    7204:	mov	ip, #0
    7208:	mov	r3, #8192	; 0x2000
    720c:	add	r7, r0, ip
    7210:	lsl	r6, ip, #6
    7214:	mov	r5, #0
    7218:	ldrb	r7, [r7, #256]	; 0x100
    721c:	lsl	r7, r7, #4
    7220:	add	r2, r0, r5
    7224:	orr	r4, r5, r6
    7228:	add	r5, r5, #1
    722c:	ldrb	r2, [r2, #320]	; 0x140
    7230:	cmp	r5, #64	; 0x40
    7234:	add	r4, r1, r4
    7238:	orr	r2, r7, r2
    723c:	strb	r2, [r4, r3]
    7240:	bne	7220 <rb_des_init+0x2c8>
    7244:	add	ip, ip, #1
    7248:	cmp	ip, #64	; 0x40
    724c:	bne	720c <rb_des_init+0x2b4>
    7250:	mov	ip, #0
    7254:	mov	r3, #12288	; 0x3000
    7258:	add	r7, r0, ip
    725c:	lsl	r6, ip, #6
    7260:	mov	r5, #0
    7264:	ldrb	r7, [r7, #384]	; 0x180
    7268:	lsl	r7, r7, #4
    726c:	add	r2, r0, r5
    7270:	orr	r4, r5, r6
    7274:	add	r5, r5, #1
    7278:	ldrb	r2, [r2, #448]	; 0x1c0
    727c:	cmp	r5, #64	; 0x40
    7280:	add	r4, r1, r4
    7284:	orr	r2, r7, r2
    7288:	strb	r2, [r4, r3]
    728c:	bne	726c <rb_des_init+0x314>
    7290:	add	ip, ip, #1
    7294:	cmp	ip, #64	; 0x40
    7298:	bne	7258 <rb_des_init+0x300>
    729c:	ldr	r4, [pc, #3736]	; 813c <rb_des_init+0x11e4>
    72a0:	mov	r1, #255	; 0xff
    72a4:	mov	r2, #64	; 0x40
    72a8:	add	r4, pc, r4
    72ac:	mov	r0, r4
    72b0:	bl	4ee4 <memset@plt>
    72b4:	ldr	r1, [pc, #3716]	; 8140 <rb_des_init+0x11e8>
    72b8:	ldr	r5, [pc, #3716]	; 8144 <rb_des_init+0x11ec>
    72bc:	ldr	r2, [pc, #3716]	; 8148 <rb_des_init+0x11f0>
    72c0:	mov	r0, #0
    72c4:	add	r1, pc, r1
    72c8:	add	r5, pc, r5
    72cc:	add	r2, pc, r2
    72d0:	ldrb	r3, [r1, r0]
    72d4:	sub	r3, r3, #1
    72d8:	strb	r3, [r5, r0]
    72dc:	uxtab	r3, r2, r3
    72e0:	strb	r0, [r3, #56]	; 0x38
    72e4:	add	r0, r0, #1
    72e8:	cmp	r0, #64	; 0x40
    72ec:	bne	72d0 <rb_des_init+0x378>
    72f0:	ldr	r0, [pc, #3668]	; 814c <rb_des_init+0x11f4>
    72f4:	mov	r1, #255	; 0xff
    72f8:	mov	r2, #56	; 0x38
    72fc:	add	r0, pc, r0
    7300:	bl	4ee4 <memset@plt>
    7304:	ldr	r1, [pc, #3652]	; 8150 <rb_des_init+0x11f8>
    7308:	mov	r0, #0
    730c:	add	r1, pc, r1
    7310:	ldrb	r2, [r1, r0]
    7314:	add	r2, r4, r2
    7318:	strb	r0, [r2, #-1]
    731c:	add	r0, r0, #1
    7320:	cmp	r0, #56	; 0x38
    7324:	bne	7310 <rb_des_init+0x3b8>
    7328:	ldr	r1, [pc, #3620]	; 8154 <rb_des_init+0x11fc>
    732c:	ldr	r3, [pc, #3620]	; 8158 <rb_des_init+0x1200>
    7330:	mov	r0, #0
    7334:	add	r1, pc, r1
    7338:	add	r3, pc, r3
    733c:	ldrb	r2, [r1, r0]
    7340:	add	r2, r3, r2
    7344:	strb	r0, [r2, #-1]
    7348:	add	r0, r0, #1
    734c:	cmp	r0, #48	; 0x30
    7350:	bne	733c <rb_des_init+0x3e4>
    7354:	ldr	r1, [pc, #3584]	; 815c <rb_des_init+0x1204>
    7358:	mov	r0, #0
    735c:	add	r1, pc, r1
    7360:	str	r1, [sp, #48]	; 0x30
    7364:	ldr	r1, [pc, #3572]	; 8160 <rb_des_init+0x1208>
    7368:	add	r1, pc, r1
    736c:	str	r1, [sp, #44]	; 0x2c
    7370:	ldr	r1, [pc, #3564]	; 8164 <rb_des_init+0x120c>
    7374:	add	r1, pc, r1
    7378:	str	r1, [sp, #40]	; 0x28
    737c:	ldr	r1, [pc, #3556]	; 8168 <rb_des_init+0x1210>
    7380:	add	r1, pc, r1
    7384:	str	r1, [sp, #36]	; 0x24
    7388:	ldr	r1, [pc, #3548]	; 816c <rb_des_init+0x1214>
    738c:	add	r1, pc, r1
    7390:	str	r1, [fp, #-36]	; 0xffffffdc
    7394:	ldr	r1, [pc, #3540]	; 8170 <rb_des_init+0x1218>
    7398:	add	r1, pc, r1
    739c:	str	r1, [fp, #-40]	; 0xffffffd8
    73a0:	ldr	r1, [pc, #3532]	; 8174 <rb_des_init+0x121c>
    73a4:	add	r1, pc, r1
    73a8:	str	r1, [fp, #-44]	; 0xffffffd4
    73ac:	ldr	r1, [pc, #3524]	; 8178 <rb_des_init+0x1220>
    73b0:	add	r1, pc, r1
    73b4:	str	r1, [fp, #-48]	; 0xffffffd0
    73b8:	ldr	r3, [pc, #3516]	; 817c <rb_des_init+0x1224>
    73bc:	add	r3, pc, r3
    73c0:	mov	r1, #7
    73c4:	str	r0, [sp, #4]
    73c8:	mov	r4, #0
    73cc:	mov	r7, #0
    73d0:	orr	r1, r1, r0, lsl #3
    73d4:	str	r1, [sp, #32]
    73d8:	mov	r1, #6
    73dc:	orr	r1, r1, r0, lsl #3
    73e0:	str	r1, [fp, #-52]	; 0xffffffcc
    73e4:	mov	r1, #5
    73e8:	orr	r1, r1, r0, lsl #3
    73ec:	str	r1, [fp, #-56]	; 0xffffffc8
    73f0:	mov	r1, #4
    73f4:	orr	r1, r1, r0, lsl #3
    73f8:	str	r1, [fp, #-60]	; 0xffffffc4
    73fc:	mov	r1, #3
    7400:	orr	r1, r1, r0, lsl #3
    7404:	str	r1, [sp, #64]	; 0x40
    7408:	mov	r1, #2
    740c:	orr	r1, r1, r0, lsl #3
    7410:	str	r1, [sp, #60]	; 0x3c
    7414:	mov	r1, #1
    7418:	orr	r1, r1, r0, lsl #3
    741c:	lsl	r0, r0, #3
    7420:	str	r1, [sp, #56]	; 0x38
    7424:	str	r0, [sp, #52]	; 0x34
    7428:	ldr	r1, [sp, #48]	; 0x30
    742c:	mov	r6, #0
    7430:	tst	r7, #128	; 0x80
    7434:	mov	r2, r5
    7438:	str	r6, [r1, r4]!
    743c:	ldr	sl, [sp, #44]	; 0x2c
    7440:	str	r6, [sl, r4]!
    7444:	ldr	r0, [sp, #40]	; 0x28
    7448:	str	r6, [r0, r4]!
    744c:	ldr	ip, [sp, #36]	; 0x24
    7450:	str	r0, [fp, #-32]	; 0xffffffe0
    7454:	str	r6, [ip, r4]!
    7458:	bne	74b4 <rb_des_init+0x55c>
    745c:	mov	r9, #0
    7460:	mov	lr, #0
    7464:	mov	r8, #0
    7468:	tst	r7, #64	; 0x40
    746c:	bne	7534 <rb_des_init+0x5dc>
    7470:	tst	r7, #32
    7474:	bne	75b8 <rb_des_init+0x660>
    7478:	tst	r7, #16
    747c:	bne	763c <rb_des_init+0x6e4>
    7480:	tst	r7, #8
    7484:	bne	76c0 <rb_des_init+0x768>
    7488:	tst	r7, #4
    748c:	bne	7744 <rb_des_init+0x7ec>
    7490:	tst	r7, #2
    7494:	bne	77c8 <rb_des_init+0x870>
    7498:	tst	r7, #1
    749c:	bne	7850 <rb_des_init+0x8f8>
    74a0:	add	r4, r4, #4
    74a4:	add	r7, r7, #1
    74a8:	cmp	r4, #1024	; 0x400
    74ac:	bne	7428 <rb_des_init+0x4d0>
    74b0:	b	78bc <rb_des_init+0x964>
    74b4:	ldr	r0, [pc, #3268]	; 8180 <rb_des_init+0x1228>
    74b8:	ldr	r5, [sp, #52]	; 0x34
    74bc:	add	r0, pc, r0
    74c0:	add	r0, r0, r5
    74c4:	ldrb	r0, [r0, #56]	; 0x38
    74c8:	cmp	r0, #31
    74cc:	bhi	74e0 <rb_des_init+0x588>
    74d0:	ldr	lr, [r3, r0, lsl #2]
    74d4:	mov	r8, #0
    74d8:	str	lr, [r1]
    74dc:	b	74f0 <rb_des_init+0x598>
    74e0:	add	r0, r3, r0, lsl #2
    74e4:	mov	lr, #0
    74e8:	ldr	r8, [r0, #-128]	; 0xffffff80
    74ec:	str	r8, [sl]
    74f0:	ldr	r0, [sp, #52]	; 0x34
    74f4:	mov	r5, r2
    74f8:	ldrb	r0, [r2, r0]
    74fc:	cmp	r0, #31
    7500:	bhi	751c <rb_des_init+0x5c4>
    7504:	ldr	r9, [r3, r0, lsl #2]
    7508:	ldr	r0, [fp, #-32]	; 0xffffffe0
    750c:	str	r9, [r0]
    7510:	tst	r7, #64	; 0x40
    7514:	beq	7470 <rb_des_init+0x518>
    7518:	b	7534 <rb_des_init+0x5dc>
    751c:	add	r0, r3, r0, lsl #2
    7520:	mov	r9, #0
    7524:	ldr	r6, [r0, #-128]	; 0xffffff80
    7528:	str	r6, [ip]
    752c:	tst	r7, #64	; 0x40
    7530:	beq	7470 <rb_des_init+0x518>
    7534:	ldr	r0, [pc, #3144]	; 8184 <rb_des_init+0x122c>
    7538:	ldr	r5, [sp, #56]	; 0x38
    753c:	add	r0, pc, r0
    7540:	add	r0, r0, r5
    7544:	ldrb	r0, [r0, #56]	; 0x38
    7548:	cmp	r0, #32
    754c:	bcs	7560 <rb_des_init+0x608>
    7550:	ldr	r0, [r3, r0, lsl #2]
    7554:	orr	lr, lr, r0
    7558:	str	lr, [r1]
    755c:	b	7570 <rb_des_init+0x618>
    7560:	add	r0, r3, r0, lsl #2
    7564:	ldr	r0, [r0, #-128]	; 0xffffff80
    7568:	orr	r8, r8, r0
    756c:	str	r8, [sl]
    7570:	ldr	r0, [sp, #56]	; 0x38
    7574:	mov	r5, r2
    7578:	ldrb	r0, [r2, r0]
    757c:	cmp	r0, #32
    7580:	bcs	75a0 <rb_des_init+0x648>
    7584:	ldr	r0, [r3, r0, lsl #2]
    7588:	orr	r9, r9, r0
    758c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    7590:	str	r9, [r0]
    7594:	tst	r7, #32
    7598:	beq	7478 <rb_des_init+0x520>
    759c:	b	75b8 <rb_des_init+0x660>
    75a0:	add	r0, r3, r0, lsl #2
    75a4:	ldr	r0, [r0, #-128]	; 0xffffff80
    75a8:	orr	r6, r6, r0
    75ac:	str	r6, [ip]
    75b0:	tst	r7, #32
    75b4:	beq	7478 <rb_des_init+0x520>
    75b8:	ldr	r0, [pc, #3068]	; 81bc <rb_des_init+0x1264>
    75bc:	ldr	r5, [sp, #60]	; 0x3c
    75c0:	add	r0, pc, r0
    75c4:	add	r0, r0, r5
    75c8:	ldrb	r0, [r0, #56]	; 0x38
    75cc:	cmp	r0, #32
    75d0:	bcs	75e4 <rb_des_init+0x68c>
    75d4:	ldr	r0, [r3, r0, lsl #2]
    75d8:	orr	lr, lr, r0
    75dc:	str	lr, [r1]
    75e0:	b	75f4 <rb_des_init+0x69c>
    75e4:	add	r0, r3, r0, lsl #2
    75e8:	ldr	r0, [r0, #-128]	; 0xffffff80
    75ec:	orr	r8, r8, r0
    75f0:	str	r8, [sl]
    75f4:	ldr	r0, [sp, #60]	; 0x3c
    75f8:	mov	r5, r2
    75fc:	ldrb	r0, [r2, r0]
    7600:	cmp	r0, #32
    7604:	bcs	7624 <rb_des_init+0x6cc>
    7608:	ldr	r0, [r3, r0, lsl #2]
    760c:	orr	r9, r9, r0
    7610:	ldr	r0, [fp, #-32]	; 0xffffffe0
    7614:	str	r9, [r0]
    7618:	tst	r7, #16
    761c:	beq	7480 <rb_des_init+0x528>
    7620:	b	763c <rb_des_init+0x6e4>
    7624:	add	r0, r3, r0, lsl #2
    7628:	ldr	r0, [r0, #-128]	; 0xffffff80
    762c:	orr	r6, r6, r0
    7630:	str	r6, [ip]
    7634:	tst	r7, #16
    7638:	beq	7480 <rb_des_init+0x528>
    763c:	ldr	r0, [pc, #2940]	; 81c0 <rb_des_init+0x1268>
    7640:	ldr	r5, [sp, #64]	; 0x40
    7644:	add	r0, pc, r0
    7648:	add	r0, r0, r5
    764c:	ldrb	r0, [r0, #56]	; 0x38
    7650:	cmp	r0, #32
    7654:	bcs	7668 <rb_des_init+0x710>
    7658:	ldr	r0, [r3, r0, lsl #2]
    765c:	orr	lr, lr, r0
    7660:	str	lr, [r1]
    7664:	b	7678 <rb_des_init+0x720>
    7668:	add	r0, r3, r0, lsl #2
    766c:	ldr	r0, [r0, #-128]	; 0xffffff80
    7670:	orr	r8, r8, r0
    7674:	str	r8, [sl]
    7678:	ldr	r0, [sp, #64]	; 0x40
    767c:	mov	r5, r2
    7680:	ldrb	r0, [r2, r0]
    7684:	cmp	r0, #32
    7688:	bcs	76a8 <rb_des_init+0x750>
    768c:	ldr	r0, [r3, r0, lsl #2]
    7690:	orr	r9, r9, r0
    7694:	ldr	r0, [fp, #-32]	; 0xffffffe0
    7698:	str	r9, [r0]
    769c:	tst	r7, #8
    76a0:	beq	7488 <rb_des_init+0x530>
    76a4:	b	76c0 <rb_des_init+0x768>
    76a8:	add	r0, r3, r0, lsl #2
    76ac:	ldr	r0, [r0, #-128]	; 0xffffff80
    76b0:	orr	r6, r6, r0
    76b4:	str	r6, [ip]
    76b8:	tst	r7, #8
    76bc:	beq	7488 <rb_des_init+0x530>
    76c0:	ldr	r0, [pc, #2812]	; 81c4 <rb_des_init+0x126c>
    76c4:	ldr	r5, [fp, #-60]	; 0xffffffc4
    76c8:	add	r0, pc, r0
    76cc:	add	r0, r0, r5
    76d0:	ldrb	r0, [r0, #56]	; 0x38
    76d4:	cmp	r0, #32
    76d8:	bcs	76ec <rb_des_init+0x794>
    76dc:	ldr	r0, [r3, r0, lsl #2]
    76e0:	orr	lr, lr, r0
    76e4:	str	lr, [r1]
    76e8:	b	76fc <rb_des_init+0x7a4>
    76ec:	add	r0, r3, r0, lsl #2
    76f0:	ldr	r0, [r0, #-128]	; 0xffffff80
    76f4:	orr	r8, r8, r0
    76f8:	str	r8, [sl]
    76fc:	ldr	r0, [fp, #-60]	; 0xffffffc4
    7700:	mov	r5, r2
    7704:	ldrb	r0, [r2, r0]
    7708:	cmp	r0, #32
    770c:	bcs	772c <rb_des_init+0x7d4>
    7710:	ldr	r0, [r3, r0, lsl #2]
    7714:	orr	r9, r9, r0
    7718:	ldr	r0, [fp, #-32]	; 0xffffffe0
    771c:	str	r9, [r0]
    7720:	tst	r7, #4
    7724:	beq	7490 <rb_des_init+0x538>
    7728:	b	7744 <rb_des_init+0x7ec>
    772c:	add	r0, r3, r0, lsl #2
    7730:	ldr	r0, [r0, #-128]	; 0xffffff80
    7734:	orr	r6, r6, r0
    7738:	str	r6, [ip]
    773c:	tst	r7, #4
    7740:	beq	7490 <rb_des_init+0x538>
    7744:	ldr	r0, [pc, #2684]	; 81c8 <rb_des_init+0x1270>
    7748:	ldr	r5, [fp, #-56]	; 0xffffffc8
    774c:	add	r0, pc, r0
    7750:	add	r0, r0, r5
    7754:	ldrb	r0, [r0, #56]	; 0x38
    7758:	cmp	r0, #32
    775c:	bcs	7770 <rb_des_init+0x818>
    7760:	ldr	r0, [r3, r0, lsl #2]
    7764:	orr	lr, lr, r0
    7768:	str	lr, [r1]
    776c:	b	7780 <rb_des_init+0x828>
    7770:	add	r0, r3, r0, lsl #2
    7774:	ldr	r0, [r0, #-128]	; 0xffffff80
    7778:	orr	r8, r8, r0
    777c:	str	r8, [sl]
    7780:	ldr	r0, [fp, #-56]	; 0xffffffc8
    7784:	mov	r5, r2
    7788:	ldrb	r0, [r2, r0]
    778c:	cmp	r0, #32
    7790:	bcs	77b0 <rb_des_init+0x858>
    7794:	ldr	r0, [r3, r0, lsl #2]
    7798:	orr	r9, r9, r0
    779c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    77a0:	str	r9, [r0]
    77a4:	tst	r7, #2
    77a8:	beq	7498 <rb_des_init+0x540>
    77ac:	b	77c8 <rb_des_init+0x870>
    77b0:	add	r0, r3, r0, lsl #2
    77b4:	ldr	r0, [r0, #-128]	; 0xffffff80
    77b8:	orr	r6, r6, r0
    77bc:	str	r6, [ip]
    77c0:	tst	r7, #2
    77c4:	beq	7498 <rb_des_init+0x540>
    77c8:	ldr	r0, [pc, #2556]	; 81cc <rb_des_init+0x1274>
    77cc:	mov	r2, ip
    77d0:	ldr	ip, [fp, #-52]	; 0xffffffcc
    77d4:	add	r0, pc, r0
    77d8:	add	r0, r0, ip
    77dc:	ldrb	r0, [r0, #56]	; 0x38
    77e0:	cmp	r0, #32
    77e4:	bcs	77f8 <rb_des_init+0x8a0>
    77e8:	ldr	r0, [r3, r0, lsl #2]
    77ec:	orr	lr, lr, r0
    77f0:	str	lr, [r1]
    77f4:	b	7808 <rb_des_init+0x8b0>
    77f8:	add	r0, r3, r0, lsl #2
    77fc:	ldr	r0, [r0, #-128]	; 0xffffff80
    7800:	orr	r8, r8, r0
    7804:	str	r8, [sl]
    7808:	ldr	r0, [fp, #-52]	; 0xffffffcc
    780c:	mov	ip, r2
    7810:	ldrb	r0, [r5, r0]
    7814:	cmp	r0, #32
    7818:	bcs	7838 <rb_des_init+0x8e0>
    781c:	ldr	r0, [r3, r0, lsl #2]
    7820:	orr	r9, r9, r0
    7824:	ldr	r0, [fp, #-32]	; 0xffffffe0
    7828:	str	r9, [r0]
    782c:	tst	r7, #1
    7830:	beq	74a0 <rb_des_init+0x548>
    7834:	b	7850 <rb_des_init+0x8f8>
    7838:	add	r0, r3, r0, lsl #2
    783c:	ldr	r0, [r0, #-128]	; 0xffffff80
    7840:	orr	r6, r6, r0
    7844:	str	r6, [ip]
    7848:	tst	r7, #1
    784c:	beq	74a0 <rb_des_init+0x548>
    7850:	ldr	r0, [pc, #2424]	; 81d0 <rb_des_init+0x1278>
    7854:	ldr	r2, [sp, #32]
    7858:	add	r0, pc, r0
    785c:	add	r0, r0, r2
    7860:	ldrb	r0, [r0, #56]	; 0x38
    7864:	subs	r5, r0, #32
    7868:	movcc	r5, r0
    786c:	movcc	r8, lr
    7870:	movcc	sl, r1
    7874:	ldr	r0, [r3, r5, lsl #2]
    7878:	ldr	r5, [pc, #2388]	; 81d4 <rb_des_init+0x127c>
    787c:	add	r5, pc, r5
    7880:	orr	r0, r8, r0
    7884:	str	r0, [sl]
    7888:	ldrb	r0, [r5, r2]
    788c:	subs	r2, r0, #32
    7890:	movcc	r2, r0
    7894:	movcc	r6, r9
    7898:	ldr	r0, [r3, r2, lsl #2]
    789c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    78a0:	orr	r0, r6, r0
    78a4:	movcc	ip, r2
    78a8:	str	r0, [ip]
    78ac:	add	r4, r4, #4
    78b0:	add	r7, r7, #1
    78b4:	cmp	r4, #1024	; 0x400
    78b8:	bne	7428 <rb_des_init+0x4d0>
    78bc:	ldr	r0, [sp, #4]
    78c0:	mov	lr, #0
    78c4:	mov	sl, #0
    78c8:	rsb	r1, r0, r0, lsl #3
    78cc:	add	r0, r1, #6
    78d0:	str	r1, [sp, #32]
    78d4:	str	r0, [sp, #28]
    78d8:	add	r0, r1, #5
    78dc:	str	r0, [sp, #24]
    78e0:	add	r0, r1, #4
    78e4:	str	r0, [sp, #20]
    78e8:	add	r0, r1, #3
    78ec:	str	r0, [sp, #16]
    78f0:	add	r0, r1, #2
    78f4:	str	r0, [sp, #12]
    78f8:	mov	r0, r1
    78fc:	add	r0, r1, #1
    7900:	str	r0, [sp, #8]
    7904:	ldr	r4, [pc, #2252]	; 81d8 <rb_des_init+0x1280>
    7908:	add	r4, pc, r4
    790c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    7910:	ands	r5, sl, #64	; 0x40
    7914:	mov	r9, #0
    7918:	mov	r1, #0
    791c:	str	lr, [r0, sl, lsl #2]
    7920:	ldr	r0, [fp, #-40]	; 0xffffffd8
    7924:	str	lr, [r0, sl, lsl #2]
    7928:	beq	7960 <rb_des_init+0xa08>
    792c:	ldr	r0, [sp, #52]	; 0x34
    7930:	mov	r9, #0
    7934:	mov	r1, #0
    7938:	ldrb	r2, [r4, r0]
    793c:	cmp	r2, #255	; 0xff
    7940:	beq	7960 <rb_des_init+0xa08>
    7944:	add	r0, r3, r2, lsl #2
    7948:	cmp	r2, #27
    794c:	bhi	79a4 <rb_des_init+0xa4c>
    7950:	ldr	r9, [r0, #16]
    7954:	ldr	r1, [fp, #-36]	; 0xffffffdc
    7958:	str	r9, [r1, sl, lsl #2]
    795c:	mov	r1, #0
    7960:	ands	r0, sl, #32
    7964:	str	r0, [fp, #-32]	; 0xffffffe0
    7968:	beq	79d8 <rb_des_init+0xa80>
    796c:	ldr	r2, [sp, #56]	; 0x38
    7970:	ldrb	r2, [r4, r2]
    7974:	cmp	r2, #255	; 0xff
    7978:	beq	79d8 <rb_des_init+0xa80>
    797c:	cmp	r2, #28
    7980:	bcs	79c4 <rb_des_init+0xa6c>
    7984:	add	r2, r3, r2, lsl #2
    7988:	ldr	r2, [r2, #16]
    798c:	orr	r9, r9, r2
    7990:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7994:	str	r9, [r2, sl, lsl #2]
    7998:	ands	r8, sl, #16
    799c:	bne	79e0 <rb_des_init+0xa88>
    79a0:	b	7a0c <rb_des_init+0xab4>
    79a4:	ldr	r1, [r0, #-96]	; 0xffffffa0
    79a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    79ac:	mov	r9, #0
    79b0:	str	r1, [r0, sl, lsl #2]
    79b4:	ands	r0, sl, #32
    79b8:	str	r0, [fp, #-32]	; 0xffffffe0
    79bc:	bne	796c <rb_des_init+0xa14>
    79c0:	b	79d8 <rb_des_init+0xa80>
    79c4:	add	r2, r3, r2, lsl #2
    79c8:	ldr	r2, [r2, #-96]	; 0xffffffa0
    79cc:	orr	r1, r1, r2
    79d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    79d4:	str	r1, [r2, sl, lsl #2]
    79d8:	ands	r8, sl, #16
    79dc:	beq	7a0c <rb_des_init+0xab4>
    79e0:	ldr	r2, [sp, #60]	; 0x3c
    79e4:	ldrb	r2, [r4, r2]
    79e8:	cmp	r2, #255	; 0xff
    79ec:	beq	7a0c <rb_des_init+0xab4>
    79f0:	cmp	r2, #28
    79f4:	bcs	7a4c <rb_des_init+0xaf4>
    79f8:	add	r2, r3, r2, lsl #2
    79fc:	ldr	r2, [r2, #16]
    7a00:	orr	r9, r9, r2
    7a04:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7a08:	str	r9, [r2, sl, lsl #2]
    7a0c:	ands	r7, sl, #8
    7a10:	beq	7a80 <rb_des_init+0xb28>
    7a14:	ldr	r2, [sp, #64]	; 0x40
    7a18:	ldrb	r2, [r4, r2]
    7a1c:	cmp	r2, #255	; 0xff
    7a20:	beq	7a80 <rb_des_init+0xb28>
    7a24:	cmp	r2, #28
    7a28:	bcs	7a6c <rb_des_init+0xb14>
    7a2c:	add	r2, r3, r2, lsl #2
    7a30:	ldr	r2, [r2, #16]
    7a34:	orr	r9, r9, r2
    7a38:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7a3c:	str	r9, [r2, sl, lsl #2]
    7a40:	ands	r6, sl, #4
    7a44:	bne	7a88 <rb_des_init+0xb30>
    7a48:	b	7ab4 <rb_des_init+0xb5c>
    7a4c:	add	r2, r3, r2, lsl #2
    7a50:	ldr	r2, [r2, #-96]	; 0xffffffa0
    7a54:	orr	r1, r1, r2
    7a58:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7a5c:	str	r1, [r2, sl, lsl #2]
    7a60:	ands	r7, sl, #8
    7a64:	bne	7a14 <rb_des_init+0xabc>
    7a68:	b	7a80 <rb_des_init+0xb28>
    7a6c:	add	r2, r3, r2, lsl #2
    7a70:	ldr	r2, [r2, #-96]	; 0xffffffa0
    7a74:	orr	r1, r1, r2
    7a78:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7a7c:	str	r1, [r2, sl, lsl #2]
    7a80:	ands	r6, sl, #4
    7a84:	beq	7ab4 <rb_des_init+0xb5c>
    7a88:	ldr	r2, [fp, #-60]	; 0xffffffc4
    7a8c:	ldrb	r2, [r4, r2]
    7a90:	cmp	r2, #255	; 0xff
    7a94:	beq	7ab4 <rb_des_init+0xb5c>
    7a98:	cmp	r2, #28
    7a9c:	bcs	7b04 <rb_des_init+0xbac>
    7aa0:	add	r2, r3, r2, lsl #2
    7aa4:	ldr	r2, [r2, #16]
    7aa8:	orr	r9, r9, r2
    7aac:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7ab0:	str	r9, [r2, sl, lsl #2]
    7ab4:	ands	r4, sl, #2
    7ab8:	beq	7b48 <rb_des_init+0xbf0>
    7abc:	ldr	r2, [pc, #1816]	; 81dc <rb_des_init+0x1284>
    7ac0:	mov	r0, r5
    7ac4:	mov	r5, r7
    7ac8:	mov	r7, r6
    7acc:	mov	r6, r4
    7ad0:	ldr	r4, [fp, #-56]	; 0xffffffc8
    7ad4:	add	r2, pc, r2
    7ad8:	ldrb	r2, [r2, r4]
    7adc:	cmp	r2, #255	; 0xff
    7ae0:	beq	7b38 <rb_des_init+0xbe0>
    7ae4:	cmp	r2, #28
    7ae8:	bcs	7b24 <rb_des_init+0xbcc>
    7aec:	add	r2, r3, r2, lsl #2
    7af0:	ldr	r2, [r2, #16]
    7af4:	orr	r9, r9, r2
    7af8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7afc:	str	r9, [r2, sl, lsl #2]
    7b00:	b	7b38 <rb_des_init+0xbe0>
    7b04:	add	r2, r3, r2, lsl #2
    7b08:	ldr	r2, [r2, #-96]	; 0xffffffa0
    7b0c:	orr	r1, r1, r2
    7b10:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7b14:	str	r1, [r2, sl, lsl #2]
    7b18:	ands	r4, sl, #2
    7b1c:	bne	7abc <rb_des_init+0xb64>
    7b20:	b	7b48 <rb_des_init+0xbf0>
    7b24:	add	r2, r3, r2, lsl #2
    7b28:	ldr	r2, [r2, #-96]	; 0xffffffa0
    7b2c:	orr	r1, r1, r2
    7b30:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7b34:	str	r1, [r2, sl, lsl #2]
    7b38:	mov	r4, r6
    7b3c:	mov	r6, r7
    7b40:	mov	r7, r5
    7b44:	mov	r5, r0
    7b48:	ands	ip, sl, #1
    7b4c:	beq	7b9c <rb_des_init+0xc44>
    7b50:	ldr	r2, [pc, #1672]	; 81e0 <rb_des_init+0x1288>
    7b54:	ldr	lr, [fp, #-52]	; 0xffffffcc
    7b58:	add	r2, pc, r2
    7b5c:	ldrb	r2, [r2, lr]
    7b60:	mov	lr, #0
    7b64:	cmp	r2, #255	; 0xff
    7b68:	beq	7b9c <rb_des_init+0xc44>
    7b6c:	cmp	r2, #28
    7b70:	bcs	7b88 <rb_des_init+0xc30>
    7b74:	add	r1, r3, r2, lsl #2
    7b78:	ldr	r1, [r1, #16]
    7b7c:	orr	r0, r9, r1
    7b80:	ldr	r1, [fp, #-36]	; 0xffffffdc
    7b84:	b	7b98 <rb_des_init+0xc40>
    7b88:	add	r0, r3, r2, lsl #2
    7b8c:	ldr	r0, [r0, #-96]	; 0xffffffa0
    7b90:	orr	r0, r1, r0
    7b94:	ldr	r1, [fp, #-40]	; 0xffffffd8
    7b98:	str	r0, [r1, sl, lsl #2]
    7b9c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7ba0:	mov	r0, #0
    7ba4:	cmp	r5, #0
    7ba8:	str	r0, [r1, sl, lsl #2]
    7bac:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7bb0:	str	r0, [r1, sl, lsl #2]
    7bb4:	bne	7c08 <rb_des_init+0xcb0>
    7bb8:	ldr	r2, [pc, #1572]	; 81e4 <rb_des_init+0x128c>
    7bbc:	mov	r5, #0
    7bc0:	add	r2, pc, r2
    7bc4:	ldr	r9, [fp, #-32]	; 0xffffffe0
    7bc8:	cmp	r9, #0
    7bcc:	beq	7c88 <rb_des_init+0xd30>
    7bd0:	ldr	r1, [sp, #8]
    7bd4:	ldrb	r1, [r2, r1]
    7bd8:	cmp	r1, #255	; 0xff
    7bdc:	beq	7c88 <rb_des_init+0xd30>
    7be0:	cmp	r1, #24
    7be4:	bcs	7c48 <rb_des_init+0xcf0>
    7be8:	add	r1, r3, r1, lsl #2
    7bec:	ldr	r1, [r1, #32]
    7bf0:	orr	r5, r5, r1
    7bf4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7bf8:	str	r5, [r1, sl, lsl #2]
    7bfc:	cmp	r8, #0
    7c00:	bne	7c90 <rb_des_init+0xd38>
    7c04:	b	7cbc <rb_des_init+0xd64>
    7c08:	ldr	r2, [pc, #1400]	; 8188 <rb_des_init+0x1230>
    7c0c:	ldr	r1, [sp, #32]
    7c10:	add	r2, pc, r2
    7c14:	ldrb	r1, [r2, r1]
    7c18:	cmp	r1, #255	; 0xff
    7c1c:	beq	7c78 <rb_des_init+0xd20>
    7c20:	cmp	r1, #23
    7c24:	bhi	7c68 <rb_des_init+0xd10>
    7c28:	add	r1, r3, r1, lsl #2
    7c2c:	ldr	r5, [r1, #32]
    7c30:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7c34:	str	r5, [r1, sl, lsl #2]
    7c38:	ldr	r9, [fp, #-32]	; 0xffffffe0
    7c3c:	cmp	r9, #0
    7c40:	bne	7bd0 <rb_des_init+0xc78>
    7c44:	b	7c88 <rb_des_init+0xd30>
    7c48:	add	r1, r3, r1, lsl #2
    7c4c:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7c50:	orr	r0, r0, r1
    7c54:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7c58:	str	r0, [r1, sl, lsl #2]
    7c5c:	cmp	r8, #0
    7c60:	bne	7c90 <rb_des_init+0xd38>
    7c64:	b	7cbc <rb_des_init+0xd64>
    7c68:	add	r0, r3, r1, lsl #2
    7c6c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7c70:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7c74:	str	r0, [r1, sl, lsl #2]
    7c78:	mov	r5, #0
    7c7c:	ldr	r9, [fp, #-32]	; 0xffffffe0
    7c80:	cmp	r9, #0
    7c84:	bne	7bd0 <rb_des_init+0xc78>
    7c88:	cmp	r8, #0
    7c8c:	beq	7cbc <rb_des_init+0xd64>
    7c90:	ldr	r1, [sp, #12]
    7c94:	ldrb	r1, [r2, r1]
    7c98:	cmp	r1, #255	; 0xff
    7c9c:	beq	7cbc <rb_des_init+0xd64>
    7ca0:	cmp	r1, #24
    7ca4:	bcs	7cfc <rb_des_init+0xda4>
    7ca8:	add	r1, r3, r1, lsl #2
    7cac:	ldr	r1, [r1, #32]
    7cb0:	orr	r5, r5, r1
    7cb4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7cb8:	str	r5, [r1, sl, lsl #2]
    7cbc:	cmp	r7, #0
    7cc0:	beq	7d30 <rb_des_init+0xdd8>
    7cc4:	ldr	r1, [sp, #16]
    7cc8:	ldrb	r1, [r2, r1]
    7ccc:	cmp	r1, #255	; 0xff
    7cd0:	beq	7d30 <rb_des_init+0xdd8>
    7cd4:	cmp	r1, #24
    7cd8:	bcs	7d1c <rb_des_init+0xdc4>
    7cdc:	add	r1, r3, r1, lsl #2
    7ce0:	ldr	r1, [r1, #32]
    7ce4:	orr	r5, r5, r1
    7ce8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7cec:	str	r5, [r1, sl, lsl #2]
    7cf0:	cmp	r6, #0
    7cf4:	bne	7d38 <rb_des_init+0xde0>
    7cf8:	b	7d64 <rb_des_init+0xe0c>
    7cfc:	add	r1, r3, r1, lsl #2
    7d00:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7d04:	orr	r0, r0, r1
    7d08:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7d0c:	str	r0, [r1, sl, lsl #2]
    7d10:	cmp	r7, #0
    7d14:	bne	7cc4 <rb_des_init+0xd6c>
    7d18:	b	7d30 <rb_des_init+0xdd8>
    7d1c:	add	r1, r3, r1, lsl #2
    7d20:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7d24:	orr	r0, r0, r1
    7d28:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7d2c:	str	r0, [r1, sl, lsl #2]
    7d30:	cmp	r6, #0
    7d34:	beq	7d64 <rb_des_init+0xe0c>
    7d38:	ldr	r1, [sp, #20]
    7d3c:	ldrb	r1, [r2, r1]
    7d40:	cmp	r1, #255	; 0xff
    7d44:	beq	7d64 <rb_des_init+0xe0c>
    7d48:	cmp	r1, #24
    7d4c:	bcs	7d9c <rb_des_init+0xe44>
    7d50:	add	r1, r3, r1, lsl #2
    7d54:	ldr	r1, [r1, #32]
    7d58:	orr	r5, r5, r1
    7d5c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7d60:	str	r5, [r1, sl, lsl #2]
    7d64:	cmp	r4, #0
    7d68:	beq	7dd0 <rb_des_init+0xe78>
    7d6c:	ldr	r1, [sp, #24]
    7d70:	ldrb	r1, [r2, r1]
    7d74:	cmp	r1, #255	; 0xff
    7d78:	beq	7dd0 <rb_des_init+0xe78>
    7d7c:	cmp	r1, #24
    7d80:	bcs	7dbc <rb_des_init+0xe64>
    7d84:	add	r1, r3, r1, lsl #2
    7d88:	ldr	r1, [r1, #32]
    7d8c:	orr	r5, r5, r1
    7d90:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7d94:	str	r5, [r1, sl, lsl #2]
    7d98:	b	7dd0 <rb_des_init+0xe78>
    7d9c:	add	r1, r3, r1, lsl #2
    7da0:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7da4:	orr	r0, r0, r1
    7da8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7dac:	str	r0, [r1, sl, lsl #2]
    7db0:	cmp	r4, #0
    7db4:	bne	7d6c <rb_des_init+0xe14>
    7db8:	b	7dd0 <rb_des_init+0xe78>
    7dbc:	add	r1, r3, r1, lsl #2
    7dc0:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7dc4:	orr	r0, r0, r1
    7dc8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7dcc:	str	r0, [r1, sl, lsl #2]
    7dd0:	ldr	r4, [pc, #1040]	; 81e8 <rb_des_init+0x1290>
    7dd4:	cmp	ip, #0
    7dd8:	add	r4, pc, r4
    7ddc:	beq	7e2c <rb_des_init+0xed4>
    7de0:	ldr	r1, [sp, #28]
    7de4:	ldrb	r1, [r2, r1]
    7de8:	cmp	r1, #255	; 0xff
    7dec:	beq	7e2c <rb_des_init+0xed4>
    7df0:	cmp	r1, #24
    7df4:	bcs	7e18 <rb_des_init+0xec0>
    7df8:	add	r0, r3, r1, lsl #2
    7dfc:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7e00:	ldr	r0, [r0, #32]
    7e04:	orr	r0, r5, r0
    7e08:	b	7e28 <rb_des_init+0xed0>
    7e0c:	.word	0x000378bc
    7e10:	.word	0x00012958
    7e14:	.word	0x00026504
    7e18:	add	r1, r3, r1, lsl #2
    7e1c:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7e20:	orr	r0, r0, r1
    7e24:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7e28:	str	r0, [r1, sl, lsl #2]
    7e2c:	add	sl, sl, #1
    7e30:	cmp	sl, #128	; 0x80
    7e34:	bne	790c <rb_des_init+0x9b4>
    7e38:	ldr	r0, [fp, #-48]	; 0xffffffd0
    7e3c:	add	r0, r0, #512	; 0x200
    7e40:	str	r0, [fp, #-48]	; 0xffffffd0
    7e44:	ldr	r0, [fp, #-44]	; 0xffffffd4
    7e48:	add	r0, r0, #512	; 0x200
    7e4c:	str	r0, [fp, #-44]	; 0xffffffd4
    7e50:	ldr	r0, [fp, #-40]	; 0xffffffd8
    7e54:	add	r0, r0, #512	; 0x200
    7e58:	str	r0, [fp, #-40]	; 0xffffffd8
    7e5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    7e60:	add	r0, r0, #512	; 0x200
    7e64:	str	r0, [fp, #-36]	; 0xffffffdc
    7e68:	ldr	r0, [sp, #36]	; 0x24
    7e6c:	add	r0, r0, #1024	; 0x400
    7e70:	str	r0, [sp, #36]	; 0x24
    7e74:	ldr	r0, [sp, #40]	; 0x28
    7e78:	add	r0, r0, #1024	; 0x400
    7e7c:	str	r0, [sp, #40]	; 0x28
    7e80:	ldr	r0, [sp, #44]	; 0x2c
    7e84:	add	r0, r0, #1024	; 0x400
    7e88:	str	r0, [sp, #44]	; 0x2c
    7e8c:	ldr	r0, [sp, #48]	; 0x30
    7e90:	add	r0, r0, #1024	; 0x400
    7e94:	str	r0, [sp, #48]	; 0x30
    7e98:	ldr	r0, [sp, #4]
    7e9c:	ldr	r5, [pc, #744]	; 818c <rb_des_init+0x1234>
    7ea0:	add	r0, r0, #1
    7ea4:	cmp	r0, #8
    7ea8:	add	r5, pc, r5
    7eac:	bne	73c0 <rb_des_init+0x468>
    7eb0:	ldr	r1, [pc, #728]	; 8190 <rb_des_init+0x1238>
    7eb4:	movw	r0, #770	; 0x302
    7eb8:	add	r1, pc, r1
    7ebc:	strh	r0, [r1, #84]	; 0x54
    7ec0:	movw	r0, #9
    7ec4:	movt	r0, #3335	; 0xd07
    7ec8:	str	r0, [r1, #79]	; 0x4f
    7ecc:	movw	r0, #4104	; 0x1008
    7ed0:	strh	r0, [r1, #65]	; 0x41
    7ed4:	movw	r0, #4618	; 0x120a
    7ed8:	strh	r0, [r1, #87]	; 0x57
    7edc:	mov	r0, #19
    7ee0:	strb	r0, [r1, #78]	; 0x4e
    7ee4:	movw	r0, #5134	; 0x140e
    7ee8:	strh	r0, [r1, #95]	; 0x5f
    7eec:	movw	r0, #5387	; 0x150b
    7ef0:	movt	r0, #1030	; 0x406
    7ef4:	str	r0, [r1, #90]	; 0x5a
    7ef8:	movw	r0, #4353	; 0x1101
    7efc:	movt	r0, #3863	; 0xf17
    7f00:	str	r0, [r1, #71]	; 0x47
    7f04:	mov	r0, #24
    7f08:	strb	r0, [r1, #83]	; 0x53
    7f0c:	movw	r0, #6405	; 0x1905
    7f10:	strh	r0, [r1, #76]	; 0x4c
    7f14:	mov	r0, #26
    7f18:	strb	r0, [r1, #94]	; 0x5e
    7f1c:	mov	r0, #28
    7f20:	strb	r0, [r1, #86]	; 0x56
    7f24:	mov	r0, #29
    7f28:	strb	r0, [r1, #75]	; 0x4b
    7f2c:	movw	r0, #7702	; 0x1e16
    7f30:	movt	r0, #6924	; 0x1b0c
    7f34:	str	r0, [r1, #67]	; 0x43
    7f38:	mov	r0, #31
    7f3c:	strb	r0, [r1, #89]	; 0x59
    7f40:	mov	r0, #0
    7f44:	ldr	r1, [pc, #584]	; 8194 <rb_des_init+0x123c>
    7f48:	add	r1, pc, r1
    7f4c:	mov	r2, #7
    7f50:	lsl	r5, r0, #3
    7f54:	mov	r4, #0
    7f58:	str	r0, [fp, #-32]	; 0xffffffe0
    7f5c:	orr	ip, r2, r0, lsl #3
    7f60:	mov	r2, #6
    7f64:	orr	r7, r2, r0, lsl #3
    7f68:	mov	r2, #5
    7f6c:	orr	r6, r2, r0, lsl #3
    7f70:	mov	r2, #4
    7f74:	orr	lr, r2, r0, lsl #3
    7f78:	mov	r2, #3
    7f7c:	orr	r8, r2, r0, lsl #3
    7f80:	mov	r2, #2
    7f84:	orr	r9, r2, r0, lsl #3
    7f88:	mov	r2, #1
    7f8c:	orr	sl, r2, r0, lsl #3
    7f90:	mov	r2, #0
    7f94:	tst	r4, #128	; 0x80
    7f98:	str	r2, [r1, r4, lsl #2]
    7f9c:	bne	7fe8 <rb_des_init+0x1090>
    7fa0:	tst	r4, #64	; 0x40
    7fa4:	bne	8008 <rb_des_init+0x10b0>
    7fa8:	tst	r4, #32
    7fac:	bne	802c <rb_des_init+0x10d4>
    7fb0:	tst	r4, #16
    7fb4:	bne	8050 <rb_des_init+0x10f8>
    7fb8:	tst	r4, #8
    7fbc:	bne	8074 <rb_des_init+0x111c>
    7fc0:	tst	r4, #4
    7fc4:	bne	8098 <rb_des_init+0x1140>
    7fc8:	tst	r4, #2
    7fcc:	bne	80bc <rb_des_init+0x1164>
    7fd0:	tst	r4, #1
    7fd4:	bne	80e0 <rb_des_init+0x1188>
    7fd8:	add	r4, r4, #1
    7fdc:	cmp	r4, #256	; 0x100
    7fe0:	bne	7f90 <rb_des_init+0x1038>
    7fe4:	b	8108 <rb_des_init+0x11b0>
    7fe8:	ldr	r0, [pc, #424]	; 8198 <rb_des_init+0x1240>
    7fec:	add	r0, pc, r0
    7ff0:	add	r2, r0, r5
    7ff4:	ldrb	r2, [r2, #65]	; 0x41
    7ff8:	ldr	r2, [r3, r2, lsl #2]
    7ffc:	str	r2, [r1, r4, lsl #2]
    8000:	tst	r4, #64	; 0x40
    8004:	beq	7fa8 <rb_des_init+0x1050>
    8008:	ldr	r0, [pc, #396]	; 819c <rb_des_init+0x1244>
    800c:	add	r0, pc, r0
    8010:	add	r0, r0, sl
    8014:	ldrb	r0, [r0, #65]	; 0x41
    8018:	ldr	r0, [r3, r0, lsl #2]
    801c:	orr	r2, r2, r0
    8020:	str	r2, [r1, r4, lsl #2]
    8024:	tst	r4, #32
    8028:	beq	7fb0 <rb_des_init+0x1058>
    802c:	ldr	r0, [pc, #364]	; 81a0 <rb_des_init+0x1248>
    8030:	add	r0, pc, r0
    8034:	add	r0, r0, r9
    8038:	ldrb	r0, [r0, #65]	; 0x41
    803c:	ldr	r0, [r3, r0, lsl #2]
    8040:	orr	r2, r2, r0
    8044:	str	r2, [r1, r4, lsl #2]
    8048:	tst	r4, #16
    804c:	beq	7fb8 <rb_des_init+0x1060>
    8050:	ldr	r0, [pc, #332]	; 81a4 <rb_des_init+0x124c>
    8054:	add	r0, pc, r0
    8058:	add	r0, r0, r8
    805c:	ldrb	r0, [r0, #65]	; 0x41
    8060:	ldr	r0, [r3, r0, lsl #2]
    8064:	orr	r2, r2, r0
    8068:	str	r2, [r1, r4, lsl #2]
    806c:	tst	r4, #8
    8070:	beq	7fc0 <rb_des_init+0x1068>
    8074:	ldr	r0, [pc, #300]	; 81a8 <rb_des_init+0x1250>
    8078:	add	r0, pc, r0
    807c:	add	r0, r0, lr
    8080:	ldrb	r0, [r0, #65]	; 0x41
    8084:	ldr	r0, [r3, r0, lsl #2]
    8088:	orr	r2, r2, r0
    808c:	str	r2, [r1, r4, lsl #2]
    8090:	tst	r4, #4
    8094:	beq	7fc8 <rb_des_init+0x1070>
    8098:	ldr	r0, [pc, #268]	; 81ac <rb_des_init+0x1254>
    809c:	add	r0, pc, r0
    80a0:	add	r0, r0, r6
    80a4:	ldrb	r0, [r0, #65]	; 0x41
    80a8:	ldr	r0, [r3, r0, lsl #2]
    80ac:	orr	r2, r2, r0
    80b0:	str	r2, [r1, r4, lsl #2]
    80b4:	tst	r4, #2
    80b8:	beq	7fd0 <rb_des_init+0x1078>
    80bc:	ldr	r0, [pc, #236]	; 81b0 <rb_des_init+0x1258>
    80c0:	add	r0, pc, r0
    80c4:	add	r0, r0, r7
    80c8:	ldrb	r0, [r0, #65]	; 0x41
    80cc:	ldr	r0, [r3, r0, lsl #2]
    80d0:	orr	r2, r2, r0
    80d4:	str	r2, [r1, r4, lsl #2]
    80d8:	tst	r4, #1
    80dc:	beq	7fd8 <rb_des_init+0x1080>
    80e0:	ldr	r0, [pc, #204]	; 81b4 <rb_des_init+0x125c>
    80e4:	add	r0, pc, r0
    80e8:	add	r0, r0, ip
    80ec:	ldrb	r0, [r0, #65]	; 0x41
    80f0:	ldr	r0, [r3, r0, lsl #2]
    80f4:	orr	r0, r2, r0
    80f8:	str	r0, [r1, r4, lsl #2]
    80fc:	add	r4, r4, #1
    8100:	cmp	r4, #256	; 0x100
    8104:	bne	7f90 <rb_des_init+0x1038>
    8108:	ldr	r0, [fp, #-32]	; 0xffffffe0
    810c:	add	r1, r1, #1024	; 0x400
    8110:	add	r0, r0, #1
    8114:	cmp	r0, #4
    8118:	bne	7f4c <rb_des_init+0xff4>
    811c:	ldr	r1, [pc, #148]	; 81b8 <rb_des_init+0x1260>
    8120:	mov	r0, #1
    8124:	add	r1, pc, r1
    8128:	strb	r0, [r1]
    812c:	sub	sp, fp, #28
    8130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8134:	bx	lr
    8138:	.word	0x00026528
    813c:	.word	0x0002a438
    8140:	.word	0x0001282c
    8144:	.word	0x0002a3d8
    8148:	.word	0x000375b4
    814c:	.word	0x00037584
    8150:	.word	0x00012824
    8154:	.word	0x00012834
    8158:	.word	0x00037548
    815c:	.word	0x0002a3c4
    8160:	.word	0x0002c3b8
    8164:	.word	0x0002e3ac
    8168:	.word	0x000303a0
    816c:	.word	0x00032394
    8170:	.word	0x00033388
    8174:	.word	0x0003437c
    8178:	.word	0x00035370
    817c:	.word	0x000124b4
    8180:	.word	0x000373c4
    8184:	.word	0x00037344
    8188:	.word	0x00036c70
    818c:	.word	0x000297f8
    8190:	.word	0x00036960
    8194:	.word	0x000357d8
    8198:	.word	0x0003682c
    819c:	.word	0x0003680c
    81a0:	.word	0x000367e8
    81a4:	.word	0x000367c4
    81a8:	.word	0x000367a0
    81ac:	.word	0x0003677c
    81b0:	.word	0x00036758
    81b4:	.word	0x00036734
    81b8:	.word	0x000366f4
    81bc:	.word	0x000372c0
    81c0:	.word	0x0003723c
    81c4:	.word	0x000371b8
    81c8:	.word	0x00037134
    81cc:	.word	0x000370ac
    81d0:	.word	0x00037028
    81d4:	.word	0x00029e24
    81d8:	.word	0x00029dd8
    81dc:	.word	0x00029c0c
    81e0:	.word	0x00029b88
    81e4:	.word	0x00036cc0
    81e8:	.word	0x00029908

000081ec <MD5Final>:
    81ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    81f0:	add	fp, sp, #24
    81f4:	sub	sp, sp, #8
    81f8:	mov	r4, r1
    81fc:	mov	r8, r0
    8200:	ldr	r1, [r1, #16]
    8204:	mov	r2, #120	; 0x78
    8208:	ldr	r0, [r4, #20]
    820c:	str	r1, [sp]
    8210:	str	r0, [sp, #4]
    8214:	ubfx	r0, r1, #3, #6
    8218:	cmp	r0, #56	; 0x38
    821c:	rsb	r7, r0, #64	; 0x40
    8220:	movwcc	r2, #56	; 0x38
    8224:	sub	r6, r2, r0
    8228:	add	r2, r1, r6, lsl #3
    822c:	str	r2, [r4, #16]
    8230:	cmp	r2, r6, lsl #3
    8234:	ldr	r1, [r4, #20]
    8238:	addcc	r1, r1, #1
    823c:	strcc	r1, [r4, #20]
    8240:	add	r1, r1, r6, lsr #29
    8244:	cmp	r7, r6
    8248:	str	r1, [r4, #20]
    824c:	add	r1, r4, r0
    8250:	mov	r0, #0
    8254:	add	r9, r1, #24
    8258:	bhi	82b8 <MD5Final+0xcc>
    825c:	ldr	r5, [pc, #304]	; 8394 <MD5Final+0x1a8>
    8260:	mov	r0, r9
    8264:	mov	r2, r7
    8268:	add	r5, pc, r5
    826c:	mov	r1, r5
    8270:	bl	50a0 <memcpy@plt>
    8274:	add	r9, r4, #24
    8278:	mov	r0, r4
    827c:	mov	r1, r9
    8280:	bl	839c <MD5Transform>
    8284:	add	r0, r7, #63	; 0x3f
    8288:	cmp	r0, r6
    828c:	bcs	82b4 <MD5Final+0xc8>
    8290:	add	r1, r5, r7
    8294:	mov	r0, r4
    8298:	bl	839c <MD5Transform>
    829c:	add	r1, r7, #127	; 0x7f
    82a0:	add	r0, r7, #64	; 0x40
    82a4:	cmp	r1, r6
    82a8:	mov	r7, r0
    82ac:	bcc	8290 <MD5Final+0xa4>
    82b0:	b	82b8 <MD5Final+0xcc>
    82b4:	mov	r0, r7
    82b8:	ldr	r1, [pc, #216]	; 8398 <MD5Final+0x1ac>
    82bc:	sub	r2, r6, r0
    82c0:	add	r1, pc, r1
    82c4:	add	r1, r1, r0
    82c8:	mov	r0, r9
    82cc:	bl	50a0 <memcpy@plt>
    82d0:	ldr	r2, [r4, #16]
    82d4:	ldr	r1, [r4, #20]
    82d8:	mov	r7, #0
    82dc:	add	r0, r2, #64	; 0x40
    82e0:	cmn	r2, #64	; 0x40
    82e4:	str	r0, [r4, #16]
    82e8:	ubfx	r0, r2, #3, #6
    82ec:	addcs	r1, r1, #1
    82f0:	strcs	r1, [r4, #20]
    82f4:	str	r1, [r4, #20]
    82f8:	add	r1, r4, r0
    82fc:	rsb	r5, r0, #64	; 0x40
    8300:	add	r6, r1, #24
    8304:	cmp	r5, #8
    8308:	bls	8314 <MD5Final+0x128>
    830c:	mov	r5, #0
    8310:	b	8334 <MD5Final+0x148>
    8314:	mov	r1, sp
    8318:	mov	r0, r6
    831c:	mov	r2, r5
    8320:	bl	50a0 <memcpy@plt>
    8324:	add	r6, r4, #24
    8328:	mov	r0, r4
    832c:	mov	r1, r6
    8330:	bl	839c <MD5Transform>
    8334:	mov	r0, sp
    8338:	rsb	r2, r5, #8
    833c:	add	r1, r0, r5
    8340:	mov	r0, r6
    8344:	bl	50a0 <memcpy@plt>
    8348:	mov	r0, #80	; 0x50
    834c:	mov	r1, r4
    8350:	vmov.i32	q9, #0	; 0x00000000
    8354:	vld1.8	{d16-d17}, [r1], r0
    8358:	add	r0, r4, #64	; 0x40
    835c:	vst1.8	{d16-d17}, [r8]
    8360:	vst1.8	{d18-d19}, [r0]
    8364:	add	r0, r4, #48	; 0x30
    8368:	str	r7, [r1]
    836c:	vst1.8	{d18-d19}, [r0]
    8370:	add	r0, r4, #32
    8374:	vst1.8	{d18-d19}, [r0]
    8378:	add	r0, r4, #16
    837c:	vst1.8	{d18-d19}, [r0]
    8380:	mov	r0, #84	; 0x54
    8384:	vst1.8	{d18-d19}, [r4], r0
    8388:	str	r7, [r4]
    838c:	sub	sp, fp, #24
    8390:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    8394:	.word	0x00024188
    8398:	.word	0x00024130

0000839c <MD5Transform>:
    839c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83a0:	add	fp, sp, #28
    83a4:	sub	sp, sp, #84	; 0x54
    83a8:	mov	ip, r1
    83ac:	ldr	r4, [r0, #4]
    83b0:	ldr	r2, [r0, #12]
    83b4:	ldr	r1, [r0, #8]
    83b8:	ldr	r5, [r0]
    83bc:	str	r0, [sp, #16]
    83c0:	ldr	r9, [ip, #4]
    83c4:	ldr	lr, [ip, #8]
    83c8:	ldr	r8, [ip, #12]
    83cc:	and	r0, r1, r4
    83d0:	bic	r3, r2, r4
    83d4:	str	r5, [sp, #24]
    83d8:	str	r1, [sp, #32]
    83dc:	str	r4, [sp, #20]
    83e0:	str	r2, [sp, #28]
    83e4:	orr	r0, r3, r0
    83e8:	ldr	r3, [ip]
    83ec:	str	r8, [fp, #-44]	; 0xffffffd4
    83f0:	str	lr, [fp, #-52]	; 0xffffffcc
    83f4:	str	r9, [fp, #-48]	; 0xffffffd0
    83f8:	str	r3, [fp, #-36]	; 0xffffffdc
    83fc:	add	r3, r5, r3
    8400:	add	r0, r3, r0
    8404:	movw	r3, #42104	; 0xa478
    8408:	movt	r3, #55146	; 0xd76a
    840c:	add	r0, r0, r3
    8410:	add	r0, r4, r0, ror #25
    8414:	bic	r3, r1, r0
    8418:	and	r7, r0, r4
    841c:	orr	r3, r7, r3
    8420:	add	r7, r2, r9
    8424:	add	r3, r7, r3
    8428:	movw	r7, #46934	; 0xb756
    842c:	movt	r7, #59591	; 0xe8c7
    8430:	add	r3, r3, r7
    8434:	add	r3, r0, r3, ror #20
    8438:	bic	r7, r4, r3
    843c:	and	r6, r3, r0
    8440:	orr	r7, r6, r7
    8444:	add	r6, r1, lr
    8448:	ldr	r1, [ip, #16]
    844c:	ldr	lr, [ip, #44]	; 0x2c
    8450:	add	r7, r6, r7
    8454:	movw	r6, #28891	; 0x70db
    8458:	movt	r6, #9248	; 0x2420
    845c:	add	r7, r7, r6
    8460:	add	r7, r3, r7, ror #15
    8464:	str	r1, [sp, #48]	; 0x30
    8468:	str	lr, [fp, #-40]	; 0xffffffd8
    846c:	bic	r6, r0, r7
    8470:	and	r5, r7, r3
    8474:	add	r0, r1, r0
    8478:	ldr	r1, [ip, #20]
    847c:	orr	r6, r5, r6
    8480:	add	r5, r4, r8
    8484:	ldr	r8, [ip, #24]
    8488:	add	r6, r5, r6
    848c:	movw	r5, #52974	; 0xceee
    8490:	movt	r5, #49597	; 0xc1bd
    8494:	add	r6, r6, r5
    8498:	str	r1, [sp, #36]	; 0x24
    849c:	add	r4, r7, r6, ror #10
    84a0:	str	r8, [sp, #12]
    84a4:	bic	r6, r3, r4
    84a8:	and	r5, r4, r7
    84ac:	add	r3, r1, r3
    84b0:	ldr	r1, [ip, #28]
    84b4:	orr	r6, r5, r6
    84b8:	add	r0, r0, r6
    84bc:	movw	r6, #4015	; 0xfaf
    84c0:	movt	r6, #62844	; 0xf57c
    84c4:	add	r0, r0, r6
    84c8:	str	r1, [sp, #52]	; 0x34
    84cc:	add	r0, r4, r0, ror #25
    84d0:	bic	r6, r7, r0
    84d4:	and	r5, r0, r4
    84d8:	add	r7, r8, r7
    84dc:	orr	r5, r5, r6
    84e0:	add	r3, r3, r5
    84e4:	movw	r5, #50730	; 0xc62a
    84e8:	movt	r5, #18311	; 0x4787
    84ec:	add	r3, r3, r5
    84f0:	add	r3, r0, r3, ror #20
    84f4:	bic	r5, r4, r3
    84f8:	and	r6, r3, r0
    84fc:	add	r4, r1, r4
    8500:	ldr	r1, [ip, #32]
    8504:	orr	r5, r6, r5
    8508:	add	r7, r7, r5
    850c:	movw	r5, #17939	; 0x4613
    8510:	movt	r5, #43056	; 0xa830
    8514:	add	r7, r7, r5
    8518:	str	r1, [sp, #44]	; 0x2c
    851c:	add	r5, r3, r7, ror #15
    8520:	bic	r7, r0, r5
    8524:	and	r6, r5, r3
    8528:	add	r0, r1, r0
    852c:	ldr	r1, [ip, #36]	; 0x24
    8530:	orr	r6, r6, r7
    8534:	add	r4, r4, r6
    8538:	movw	r6, #38145	; 0x9501
    853c:	movt	r6, #64838	; 0xfd46
    8540:	add	r4, r4, r6
    8544:	str	r1, [fp, #-32]	; 0xffffffe0
    8548:	add	r6, r5, r4, ror #10
    854c:	bic	r4, r3, r6
    8550:	and	r7, r6, r5
    8554:	add	r3, r1, r3
    8558:	ldr	r1, [ip, #40]	; 0x28
    855c:	orr	r4, r7, r4
    8560:	add	r0, r0, r4
    8564:	movw	r4, #39128	; 0x98d8
    8568:	movt	r4, #27008	; 0x6980
    856c:	add	r0, r0, r4
    8570:	str	r1, [sp, #56]	; 0x38
    8574:	add	r0, r6, r0, ror #25
    8578:	bic	r4, r5, r0
    857c:	and	r7, r0, r6
    8580:	add	r5, r1, r5
    8584:	orr	r4, r7, r4
    8588:	add	r3, r3, r4
    858c:	movw	r4, #63407	; 0xf7af
    8590:	movt	r4, #35652	; 0x8b44
    8594:	add	r3, r3, r4
    8598:	add	r3, r0, r3, ror #20
    859c:	bic	r4, r6, r3
    85a0:	and	r7, r3, r0
    85a4:	add	r6, lr, r6
    85a8:	orr	r7, r7, r4
    85ac:	ldr	r4, [ip, #48]	; 0x30
    85b0:	add	r5, r5, r7
    85b4:	movw	r7, #42063	; 0xa44f
    85b8:	sub	r5, r5, r7
    85bc:	add	r1, r3, r5, ror #15
    85c0:	bic	r5, r0, r1
    85c4:	and	r7, r1, r3
    85c8:	add	r0, r4, r0
    85cc:	str	r4, [sp, #4]
    85d0:	ldr	r4, [ip, #52]	; 0x34
    85d4:	orr	r5, r7, r5
    85d8:	add	r5, r6, r5
    85dc:	movw	r6, #55230	; 0xd7be
    85e0:	movt	r6, #35164	; 0x895c
    85e4:	add	r5, r5, r6
    85e8:	str	r4, [sp, #40]	; 0x28
    85ec:	add	r2, r1, r5, ror #10
    85f0:	bic	r5, r3, r2
    85f4:	and	r6, r2, r1
    85f8:	add	r3, r4, r3
    85fc:	ldr	r4, [ip, #56]	; 0x38
    8600:	orr	r5, r6, r5
    8604:	add	r0, r0, r5
    8608:	movw	r5, #4386	; 0x1122
    860c:	movt	r5, #27536	; 0x6b90
    8610:	add	r0, r0, r5
    8614:	add	r0, r2, r0, ror #25
    8618:	bic	r5, r1, r0
    861c:	and	r7, r0, r2
    8620:	add	r1, r4, r1
    8624:	orr	r7, r7, r5
    8628:	add	r3, r3, r7
    862c:	movw	r7, #29075	; 0x7193
    8630:	movt	r7, #64920	; 0xfd98
    8634:	add	r3, r3, r7
    8638:	add	r7, r0, r3, ror #20
    863c:	bic	r3, r2, r7
    8640:	and	sl, r7, r0
    8644:	orr	r3, sl, r3
    8648:	mov	sl, r4
    864c:	add	r1, r1, r3
    8650:	movw	r3, #17294	; 0x438e
    8654:	str	sl, [sp]
    8658:	movt	r3, #42617	; 0xa679
    865c:	add	r1, r1, r3
    8660:	add	r3, r7, r1, ror #15
    8664:	bic	r1, r0, r3
    8668:	and	r5, r3, r7
    866c:	bic	r4, r3, r7
    8670:	add	r0, r9, r0
    8674:	ldr	r9, [sp, #36]	; 0x24
    8678:	orr	r5, r5, r1
    867c:	ldr	r1, [ip, #60]	; 0x3c
    8680:	ldr	ip, [sp, #48]	; 0x30
    8684:	add	r2, r1, r2
    8688:	mov	r6, r1
    868c:	str	r1, [sp, #8]
    8690:	ldr	r1, [fp, #-36]	; 0xffffffdc
    8694:	add	r2, r2, r5
    8698:	movw	r5, #2081	; 0x821
    869c:	movt	r5, #18868	; 0x49b4
    86a0:	add	r2, r2, r5
    86a4:	add	r2, r3, r2, ror #10
    86a8:	and	r5, r2, r7
    86ac:	add	r7, r8, r7
    86b0:	ldr	r8, [sp, #44]	; 0x2c
    86b4:	orr	r5, r5, r4
    86b8:	bic	r4, r2, r3
    86bc:	add	r0, r0, r5
    86c0:	movw	r5, #9570	; 0x2562
    86c4:	movt	r5, #63006	; 0xf61e
    86c8:	add	r0, r0, r5
    86cc:	add	r0, r2, r0, ror #27
    86d0:	and	r5, r0, r3
    86d4:	add	r3, lr, r3
    86d8:	mov	lr, sl
    86dc:	orr	r5, r5, r4
    86e0:	bic	r4, r0, r2
    86e4:	add	r7, r7, r5
    86e8:	movw	r5, #45888	; 0xb340
    86ec:	movt	r5, #49216	; 0xc040
    86f0:	add	r7, r7, r5
    86f4:	add	r7, r0, r7, ror #23
    86f8:	and	r5, r7, r2
    86fc:	add	r2, r1, r2
    8700:	ldr	r1, [sp, #56]	; 0x38
    8704:	orr	r5, r5, r4
    8708:	bic	r4, r7, r0
    870c:	add	r3, r3, r5
    8710:	movw	r5, #23121	; 0x5a51
    8714:	movt	r5, #9822	; 0x265e
    8718:	add	r3, r3, r5
    871c:	add	r3, r7, r3, ror #18
    8720:	and	r5, r3, r0
    8724:	add	r0, r9, r0
    8728:	orr	r5, r5, r4
    872c:	bic	r4, r3, r7
    8730:	add	r2, r2, r5
    8734:	movw	r5, #51114	; 0xc7aa
    8738:	movt	r5, #59830	; 0xe9b6
    873c:	add	r2, r2, r5
    8740:	add	r2, r3, r2, ror #12
    8744:	and	r5, r2, r7
    8748:	add	r7, r1, r7
    874c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    8750:	orr	r5, r5, r4
    8754:	bic	r4, r2, r3
    8758:	add	r0, r0, r5
    875c:	movw	r5, #4189	; 0x105d
    8760:	movt	r5, #54831	; 0xd62f
    8764:	add	r0, r0, r5
    8768:	add	r0, r2, r0, ror #27
    876c:	and	r5, r0, r3
    8770:	add	r3, r6, r3
    8774:	ldr	r6, [sp, #4]
    8778:	orr	r5, r5, r4
    877c:	bic	r4, r0, r2
    8780:	add	r7, r7, r5
    8784:	movw	r5, #5203	; 0x1453
    8788:	movt	r5, #580	; 0x244
    878c:	add	r7, r7, r5
    8790:	add	r7, r0, r7, ror #23
    8794:	and	r5, r7, r2
    8798:	add	r2, ip, r2
    879c:	orr	r5, r5, r4
    87a0:	bic	r4, r7, r0
    87a4:	add	r3, r3, r5
    87a8:	movw	r5, #59009	; 0xe681
    87ac:	movt	r5, #55457	; 0xd8a1
    87b0:	add	r3, r3, r5
    87b4:	add	r3, r7, r3, ror #18
    87b8:	and	r5, r3, r0
    87bc:	add	r0, r1, r0
    87c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    87c4:	orr	r5, r5, r4
    87c8:	bic	r4, r3, r7
    87cc:	add	r2, r2, r5
    87d0:	movw	r5, #64456	; 0xfbc8
    87d4:	movt	r5, #59347	; 0xe7d3
    87d8:	add	r2, r2, r5
    87dc:	add	r2, r3, r2, ror #12
    87e0:	and	r5, r2, r7
    87e4:	add	r7, sl, r7
    87e8:	ldr	sl, [sp, #40]	; 0x28
    87ec:	orr	r5, r5, r4
    87f0:	bic	r4, r2, r3
    87f4:	add	r0, r0, r5
    87f8:	movw	r5, #52710	; 0xcde6
    87fc:	movt	r5, #8673	; 0x21e1
    8800:	add	r0, r0, r5
    8804:	add	r0, r2, r0, ror #27
    8808:	and	r5, r0, r3
    880c:	add	r3, r1, r3
    8810:	ldr	r1, [fp, #-52]	; 0xffffffcc
    8814:	orr	r5, r5, r4
    8818:	bic	r4, r0, r2
    881c:	add	r7, r7, r5
    8820:	movw	r5, #2006	; 0x7d6
    8824:	movt	r5, #49975	; 0xc337
    8828:	add	r7, r7, r5
    882c:	add	r7, r0, r7, ror #23
    8830:	and	r5, r7, r2
    8834:	add	r2, r8, r2
    8838:	orr	r5, r5, r4
    883c:	bic	r4, r7, r0
    8840:	add	r3, r3, r5
    8844:	movw	r5, #3463	; 0xd87
    8848:	movt	r5, #62677	; 0xf4d5
    884c:	add	r3, r3, r5
    8850:	add	r3, r7, r3, ror #18
    8854:	and	r5, r3, r0
    8858:	add	r0, sl, r0
    885c:	orr	r5, r5, r4
    8860:	bic	r4, r3, r7
    8864:	add	r2, r2, r5
    8868:	movw	r5, #5357	; 0x14ed
    886c:	movt	r5, #17754	; 0x455a
    8870:	add	r2, r2, r5
    8874:	add	r2, r3, r2, ror #12
    8878:	and	r5, r2, r7
    887c:	add	r7, r1, r7
    8880:	ldr	r1, [sp, #52]	; 0x34
    8884:	orr	r5, r5, r4
    8888:	bic	r4, r2, r3
    888c:	add	r0, r0, r5
    8890:	movw	r5, #59653	; 0xe905
    8894:	movt	r5, #43491	; 0xa9e3
    8898:	add	r0, r0, r5
    889c:	add	r0, r2, r0, ror #27
    88a0:	and	r5, r0, r3
    88a4:	add	r3, r1, r3
    88a8:	orr	r5, r5, r4
    88ac:	bic	r4, r0, r2
    88b0:	add	r7, r7, r5
    88b4:	movw	r5, #41976	; 0xa3f8
    88b8:	movt	r5, #64751	; 0xfcef
    88bc:	add	r7, r7, r5
    88c0:	add	r7, r0, r7, ror #23
    88c4:	and	r5, r7, r2
    88c8:	add	r2, r6, r2
    88cc:	orr	r5, r5, r4
    88d0:	bic	r4, r7, r0
    88d4:	add	r3, r3, r5
    88d8:	movw	r5, #729	; 0x2d9
    88dc:	movt	r5, #26479	; 0x676f
    88e0:	add	r3, r3, r5
    88e4:	add	r3, r7, r3, ror #18
    88e8:	and	r5, r3, r0
    88ec:	add	r0, r9, r0
    88f0:	ldr	r9, [sp, #12]
    88f4:	orr	r5, r5, r4
    88f8:	add	r2, r2, r5
    88fc:	movw	r5, #19594	; 0x4c8a
    8900:	movt	r5, #36138	; 0x8d2a
    8904:	add	r2, r2, r5
    8908:	add	r2, r3, r2, ror #12
    890c:	eor	r5, r2, r3
    8910:	eor	r4, r5, r7
    8914:	add	r7, r8, r7
    8918:	ldr	r8, [sp, #56]	; 0x38
    891c:	add	r0, r0, r4
    8920:	movw	r4, #14658	; 0x3942
    8924:	movt	r4, #65530	; 0xfffa
    8928:	add	r0, r0, r4
    892c:	ldr	r4, [fp, #-40]	; 0xffffffd8
    8930:	add	r0, r2, r0, ror #28
    8934:	eor	r5, r5, r0
    8938:	add	r7, r7, r5
    893c:	movw	r5, #63105	; 0xf681
    8940:	movt	r5, #34673	; 0x8771
    8944:	add	r3, r4, r3
    8948:	ldr	r4, [fp, #-48]	; 0xffffffd0
    894c:	add	r7, r7, r5
    8950:	eor	r5, r0, r2
    8954:	add	r2, lr, r2
    8958:	ldr	lr, [sp, #8]
    895c:	add	r7, r0, r7, ror #21
    8960:	eor	r5, r5, r7
    8964:	add	r3, r3, r5
    8968:	movw	r5, #24866	; 0x6122
    896c:	movt	r5, #28061	; 0x6d9d
    8970:	add	r3, r3, r5
    8974:	eor	r5, r7, r0
    8978:	add	r0, r4, r0
    897c:	ldr	r4, [fp, #-36]	; 0xffffffdc
    8980:	add	r3, r7, r3, ror #16
    8984:	eor	r5, r5, r3
    8988:	add	r2, r2, r5
    898c:	movw	r5, #14348	; 0x380c
    8990:	movt	r5, #64997	; 0xfde5
    8994:	add	r2, r2, r5
    8998:	eor	r5, r3, r7
    899c:	add	r7, ip, r7
    89a0:	ldr	ip, [fp, #-44]	; 0xffffffd4
    89a4:	add	r2, r3, r2, ror #9
    89a8:	eor	r5, r5, r2
    89ac:	add	r0, r0, r5
    89b0:	movw	r5, #59972	; 0xea44
    89b4:	movt	r5, #42174	; 0xa4be
    89b8:	add	r0, r0, r5
    89bc:	eor	r5, r2, r3
    89c0:	add	r3, r1, r3
    89c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    89c8:	add	r0, r2, r0, ror #28
    89cc:	eor	r5, r5, r0
    89d0:	add	r7, r7, r5
    89d4:	movw	r5, #53161	; 0xcfa9
    89d8:	movt	r5, #19422	; 0x4bde
    89dc:	add	r7, r7, r5
    89e0:	eor	r5, r0, r2
    89e4:	add	r2, r8, r2
    89e8:	add	r7, r0, r7, ror #21
    89ec:	eor	r5, r5, r7
    89f0:	add	r3, r3, r5
    89f4:	movw	r5, #19296	; 0x4b60
    89f8:	movt	r5, #63163	; 0xf6bb
    89fc:	add	r3, r3, r5
    8a00:	eor	r5, r7, r0
    8a04:	add	r0, sl, r0
    8a08:	ldr	sl, [fp, #-52]	; 0xffffffcc
    8a0c:	add	r3, r7, r3, ror #16
    8a10:	eor	r5, r5, r3
    8a14:	add	r2, r2, r5
    8a18:	movw	r5, #48240	; 0xbc70
    8a1c:	movt	r5, #48831	; 0xbebf
    8a20:	add	r2, r2, r5
    8a24:	eor	r5, r3, r7
    8a28:	add	r7, r4, r7
    8a2c:	add	r2, r3, r2, ror #9
    8a30:	eor	r5, r5, r2
    8a34:	add	r0, r0, r5
    8a38:	movw	r5, #32454	; 0x7ec6
    8a3c:	movt	r5, #10395	; 0x289b
    8a40:	add	r0, r0, r5
    8a44:	eor	r5, r2, r3
    8a48:	add	r3, ip, r3
    8a4c:	add	r0, r2, r0, ror #28
    8a50:	eor	r5, r5, r0
    8a54:	add	r7, r7, r5
    8a58:	movw	r5, #10234	; 0x27fa
    8a5c:	movt	r5, #60065	; 0xeaa1
    8a60:	add	r7, r7, r5
    8a64:	eor	r5, r0, r2
    8a68:	add	r2, r9, r2
    8a6c:	add	r7, r0, r7, ror #21
    8a70:	eor	r5, r5, r7
    8a74:	add	r3, r3, r5
    8a78:	movw	r5, #12421	; 0x3085
    8a7c:	movt	r5, #54511	; 0xd4ef
    8a80:	add	r3, r3, r5
    8a84:	eor	r5, r7, r0
    8a88:	add	r0, r1, r0
    8a8c:	ldr	r1, [sp, #52]	; 0x34
    8a90:	add	r3, r7, r3, ror #16
    8a94:	eor	r5, r5, r3
    8a98:	add	r2, r2, r5
    8a9c:	movw	r5, #7429	; 0x1d05
    8aa0:	movt	r5, #1160	; 0x488
    8aa4:	add	r2, r2, r5
    8aa8:	eor	r5, r3, r7
    8aac:	add	r7, r6, r7
    8ab0:	add	r2, r3, r2, ror #9
    8ab4:	eor	r5, r5, r2
    8ab8:	add	r0, r0, r5
    8abc:	movw	r5, #53305	; 0xd039
    8ac0:	movt	r5, #55764	; 0xd9d4
    8ac4:	add	r0, r0, r5
    8ac8:	eor	r5, r2, r3
    8acc:	add	r3, lr, r3
    8ad0:	add	r0, r2, r0, ror #28
    8ad4:	eor	r5, r5, r0
    8ad8:	add	r7, r7, r5
    8adc:	movw	r5, #39397	; 0x99e5
    8ae0:	movt	r5, #59099	; 0xe6db
    8ae4:	add	r7, r7, r5
    8ae8:	eor	r5, r0, r2
    8aec:	add	r2, sl, r2
    8af0:	add	r7, r0, r7, ror #21
    8af4:	eor	r5, r5, r7
    8af8:	add	r3, r3, r5
    8afc:	movw	r5, #31992	; 0x7cf8
    8b00:	movt	r5, #8098	; 0x1fa2
    8b04:	add	r3, r3, r5
    8b08:	eor	r5, r7, r0
    8b0c:	add	r0, r4, r0
    8b10:	add	r3, r7, r3, ror #16
    8b14:	eor	r5, r5, r3
    8b18:	add	r2, r2, r5
    8b1c:	movw	r5, #22117	; 0x5665
    8b20:	movt	r5, #50348	; 0xc4ac
    8b24:	add	r2, r2, r5
    8b28:	mvn	r5, r7
    8b2c:	add	r7, r1, r7
    8b30:	ldr	r1, [sp]
    8b34:	add	r2, r3, r2, ror #9
    8b38:	orr	r5, r2, r5
    8b3c:	eor	r5, r5, r3
    8b40:	add	r0, r0, r5
    8b44:	movw	r5, #8772	; 0x2244
    8b48:	movt	r5, #62505	; 0xf429
    8b4c:	add	r0, r0, r5
    8b50:	mvn	r5, r3
    8b54:	add	r3, r1, r3
    8b58:	ldr	r1, [sp, #36]	; 0x24
    8b5c:	add	r0, r2, r0, ror #26
    8b60:	orr	r5, r0, r5
    8b64:	eor	r5, r5, r2
    8b68:	add	r7, r7, r5
    8b6c:	movw	r5, #65431	; 0xff97
    8b70:	movt	r5, #17194	; 0x432a
    8b74:	add	r7, r7, r5
    8b78:	mvn	r5, r2
    8b7c:	add	r2, r1, r2
    8b80:	ldr	r1, [fp, #-48]	; 0xffffffd0
    8b84:	add	r7, r0, r7, ror #22
    8b88:	orr	r5, r7, r5
    8b8c:	eor	r5, r5, r0
    8b90:	add	r3, r3, r5
    8b94:	movw	r5, #9127	; 0x23a7
    8b98:	movt	r5, #43924	; 0xab94
    8b9c:	add	r3, r3, r5
    8ba0:	mvn	r5, r0
    8ba4:	add	r0, r6, r0
    8ba8:	movw	r6, #22979	; 0x59c3
    8bac:	add	r3, r7, r3, ror #17
    8bb0:	movt	r6, #25947	; 0x655b
    8bb4:	orr	r5, r3, r5
    8bb8:	eor	r5, r5, r7
    8bbc:	add	r2, r2, r5
    8bc0:	movw	r5, #41017	; 0xa039
    8bc4:	movt	r5, #64659	; 0xfc93
    8bc8:	add	r2, r2, r5
    8bcc:	mvn	r5, r7
    8bd0:	add	r7, ip, r7
    8bd4:	add	r2, r3, r2, ror #11
    8bd8:	orr	r5, r2, r5
    8bdc:	eor	r5, r5, r3
    8be0:	add	r0, r0, r5
    8be4:	ldr	r5, [fp, #-40]	; 0xffffffd8
    8be8:	add	r0, r0, r6
    8bec:	mvn	r6, r3
    8bf0:	add	r3, r8, r3
    8bf4:	add	r0, r2, r0, ror #26
    8bf8:	orr	r6, r0, r6
    8bfc:	eor	r6, r6, r2
    8c00:	add	r7, r7, r6
    8c04:	movw	r6, #52370	; 0xcc92
    8c08:	movt	r6, #36620	; 0x8f0c
    8c0c:	add	r7, r7, r6
    8c10:	mvn	r6, r2
    8c14:	add	r2, r1, r2
    8c18:	ldr	r1, [sp, #44]	; 0x2c
    8c1c:	add	r7, r0, r7, ror #22
    8c20:	orr	r6, r7, r6
    8c24:	eor	r6, r6, r0
    8c28:	add	r3, r3, r6
    8c2c:	movw	r6, #62589	; 0xf47d
    8c30:	movt	r6, #65519	; 0xffef
    8c34:	add	r3, r3, r6
    8c38:	mvn	r6, r0
    8c3c:	add	r0, r1, r0
    8c40:	add	r1, lr, r7
    8c44:	add	r3, r7, r3, ror #17
    8c48:	orr	r6, r3, r6
    8c4c:	eor	r6, r6, r7
    8c50:	add	r2, r2, r6
    8c54:	movw	r6, #24017	; 0x5dd1
    8c58:	movt	r6, #34180	; 0x8584
    8c5c:	add	r2, r2, r6
    8c60:	mvn	r6, r7
    8c64:	ldr	r7, [sp, #40]	; 0x28
    8c68:	add	r2, r3, r2, ror #11
    8c6c:	orr	r6, r2, r6
    8c70:	eor	r6, r6, r3
    8c74:	add	r0, r0, r6
    8c78:	movw	r6, #32335	; 0x7e4f
    8c7c:	movt	r6, #28584	; 0x6fa8
    8c80:	add	r0, r0, r6
    8c84:	add	r6, r2, r0, ror #26
    8c88:	mvn	r0, r3
    8c8c:	add	r3, r9, r3
    8c90:	orr	r0, r6, r0
    8c94:	eor	r0, r0, r2
    8c98:	add	r0, r1, r0
    8c9c:	movw	r1, #59104	; 0xe6e0
    8ca0:	movt	r1, #65068	; 0xfe2c
    8ca4:	add	r0, r0, r1
    8ca8:	add	r1, r6, r0, ror #22
    8cac:	mvn	r0, r2
    8cb0:	add	r2, r7, r2
    8cb4:	ldr	r7, [sp, #48]	; 0x30
    8cb8:	orr	r0, r1, r0
    8cbc:	eor	r0, r0, r6
    8cc0:	add	r0, r3, r0
    8cc4:	movw	r3, #17172	; 0x4314
    8cc8:	movt	r3, #41729	; 0xa301
    8ccc:	add	r7, r7, r6
    8cd0:	add	r0, r0, r3
    8cd4:	add	r3, r1, r0, ror #17
    8cd8:	mvn	r0, r6
    8cdc:	ldr	r6, [sp, #16]
    8ce0:	orr	r0, r3, r0
    8ce4:	eor	r0, r0, r1
    8ce8:	add	r0, r2, r0
    8cec:	movw	r2, #4513	; 0x11a1
    8cf0:	movt	r2, #19976	; 0x4e08
    8cf4:	add	r0, r0, r2
    8cf8:	mvn	r2, r1
    8cfc:	add	r1, r5, r1
    8d00:	add	r0, r3, r0, ror #11
    8d04:	orr	r2, r0, r2
    8d08:	eor	r2, r2, r3
    8d0c:	add	r2, r7, r2
    8d10:	movw	r7, #32386	; 0x7e82
    8d14:	movt	r7, #63315	; 0xf753
    8d18:	add	r2, r2, r7
    8d1c:	ldr	r7, [sp, #24]
    8d20:	add	r2, r0, r2, ror #26
    8d24:	add	r7, r2, r7
    8d28:	str	r7, [r6]
    8d2c:	mvn	r7, r3
    8d30:	add	r3, sl, r3
    8d34:	orr	r7, r2, r7
    8d38:	eor	r7, r7, r0
    8d3c:	add	r1, r1, r7
    8d40:	movw	r7, #62005	; 0xf235
    8d44:	movt	r7, #48442	; 0xbd3a
    8d48:	add	r1, r1, r7
    8d4c:	ldr	r7, [sp, #28]
    8d50:	add	r1, r2, r1, ror #22
    8d54:	add	r7, r1, r7
    8d58:	str	r7, [r6, #12]
    8d5c:	mvn	r7, r0
    8d60:	orr	r7, r1, r7
    8d64:	eor	r7, r7, r2
    8d68:	mvn	r2, r2
    8d6c:	add	r3, r3, r7
    8d70:	movw	r7, #53947	; 0xd2bb
    8d74:	movt	r7, #10967	; 0x2ad7
    8d78:	add	r3, r3, r7
    8d7c:	ldr	r7, [sp, #32]
    8d80:	add	r3, r1, r3, ror #17
    8d84:	orr	r2, r3, r2
    8d88:	eor	r1, r2, r1
    8d8c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8d90:	add	r7, r3, r7
    8d94:	str	r7, [r6, #8]
    8d98:	ldr	r7, [sp, #20]
    8d9c:	add	r0, r2, r0
    8da0:	add	r0, r0, r1
    8da4:	movw	r1, #54161	; 0xd391
    8da8:	movt	r1, #60294	; 0xeb86
    8dac:	add	r7, r3, r7
    8db0:	add	r0, r0, r1
    8db4:	add	r0, r7, r0, ror #11
    8db8:	str	r0, [r6, #4]
    8dbc:	sub	sp, fp, #28
    8dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8dc4:	nop	{0}
    8dc8:	nop	{0}
    8dcc:	nop	{0}

00008dd0 <rb_sha256_crypt_r>:
    8dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dd4:	add	fp, sp, #28
    8dd8:	sub	sp, sp, #4
    8ddc:	vpush	{d8-d11}
    8de0:	sub	sp, sp, #480	; 0x1e0
    8de4:	str	r2, [fp, #-516]	; 0xfffffdfc
    8de8:	str	r3, [fp, #-532]	; 0xfffffdec
    8dec:	mov	r4, r0
    8df0:	mov	r2, #3
    8df4:	mov	r7, r1
    8df8:	ldr	r0, [pc, #3152]	; 9a50 <rb_sha256_crypt_r+0xc80>
    8dfc:	add	r0, pc, r0
    8e00:	bl	5454 <strncmp@plt>
    8e04:	ldr	r1, [pc, #3144]	; 9a54 <rb_sha256_crypt_r+0xc84>
    8e08:	cmp	r0, #0
    8e0c:	mov	r2, #7
    8e10:	addeq	r7, r7, #3
    8e14:	mov	r0, r7
    8e18:	add	r1, pc, r1
    8e1c:	bl	5454 <strncmp@plt>
    8e20:	movw	r1, #5000	; 0x1388
    8e24:	mov	r5, #0
    8e28:	cmp	r0, #0
    8e2c:	str	r1, [fp, #-500]	; 0xfffffe0c
    8e30:	beq	8e3c <rb_sha256_crypt_r+0x6c>
    8e34:	mov	r0, #0
    8e38:	b	8e80 <rb_sha256_crypt_r+0xb0>
    8e3c:	add	r0, r7, #7
    8e40:	sub	r1, fp, #312	; 0x138
    8e44:	mov	r2, #10
    8e48:	bl	5094 <strtoul@plt>
    8e4c:	ldr	r1, [fp, #-312]	; 0xfffffec8
    8e50:	ldrb	r2, [r1]
    8e54:	cmp	r2, #36	; 0x24
    8e58:	bne	9a08 <rb_sha256_crypt_r+0xc38>
    8e5c:	movw	r2, #51711	; 0xc9ff
    8e60:	add	r7, r1, #1
    8e64:	movt	r2, #15258	; 0x3b9a
    8e68:	cmp	r0, r2
    8e6c:	movcc	r2, r0
    8e70:	mov	r0, #1
    8e74:	cmp	r2, #1000	; 0x3e8
    8e78:	movls	r2, #1000	; 0x3e8
    8e7c:	str	r2, [fp, #-500]	; 0xfffffe0c
    8e80:	str	r0, [fp, #-536]	; 0xfffffde8
    8e84:	ldr	r1, [pc, #3020]	; 9a58 <rb_sha256_crypt_r+0xc88>
    8e88:	mov	r0, r7
    8e8c:	add	r1, pc, r1
    8e90:	bl	5424 <strcspn@plt>
    8e94:	mov	r6, r0
    8e98:	cmp	r0, #16
    8e9c:	str	r0, [fp, #-540]	; 0xfffffde4
    8ea0:	mov	r0, r4
    8ea4:	movcs	r6, #16
    8ea8:	bl	507c <strlen@plt>
    8eac:	mov	sl, r0
    8eb0:	tst	r4, #3
    8eb4:	beq	8ee0 <rb_sha256_crypt_r+0x110>
    8eb8:	add	r0, sl, #11
    8ebc:	bic	r0, r0, #7
    8ec0:	sub	r0, sp, r0
    8ec4:	add	r5, r0, #4
    8ec8:	mov	sp, r0
    8ecc:	mov	r0, r5
    8ed0:	mov	r1, r4
    8ed4:	mov	r2, sl
    8ed8:	bl	50a0 <memcpy@plt>
    8edc:	mov	r4, r5
    8ee0:	mov	r9, #0
    8ee4:	tst	r7, #3
    8ee8:	str	r5, [fp, #-524]	; 0xfffffdf4
    8eec:	beq	8f20 <rb_sha256_crypt_r+0x150>
    8ef0:	add	r0, r6, #11
    8ef4:	bic	r0, r0, #7
    8ef8:	sub	r0, sp, r0
    8efc:	add	r5, r0, #4
    8f00:	mov	sp, r0
    8f04:	mov	r0, r5
    8f08:	mov	r1, r7
    8f0c:	mov	r2, r6
    8f10:	bl	50a0 <memcpy@plt>
    8f14:	mov	r7, r5
    8f18:	str	r5, [fp, #-528]	; 0xfffffdf0
    8f1c:	b	8f28 <rb_sha256_crypt_r+0x158>
    8f20:	mov	r0, #0
    8f24:	str	r0, [fp, #-528]	; 0xfffffdf0
    8f28:	add	r0, pc, #704	; 0x2c0
    8f2c:	sub	r5, fp, #312	; 0x138
    8f30:	mov	r1, #36	; 0x24
    8f34:	vld1.64	{d8-d9}, [r0 :128]
    8f38:	add	r0, pc, #704	; 0x2c0
    8f3c:	mov	r2, r5
    8f40:	vld1.64	{d10-d11}, [r0 :128]
    8f44:	add	r0, r5, #16
    8f48:	str	r0, [fp, #-504]	; 0xfffffe08
    8f4c:	vst1.64	{d8-d9}, [r0]
    8f50:	mov	r0, r5
    8f54:	vst1.32	{d10-d11}, [r0], r1
    8f58:	mov	r1, sl
    8f5c:	str	r9, [r0]
    8f60:	mov	r0, r4
    8f64:	str	r9, [fp, #-280]	; 0xfffffee8
    8f68:	str	r9, [fp, #-272]	; 0xfffffef0
    8f6c:	bl	9a6c <rb_sha256_process_bytes>
    8f70:	mov	r0, r7
    8f74:	mov	r1, r6
    8f78:	mov	r2, r5
    8f7c:	bl	9a6c <rb_sha256_process_bytes>
    8f80:	sub	r8, fp, #488	; 0x1e8
    8f84:	mov	r1, #36	; 0x24
    8f88:	mov	r0, r8
    8f8c:	mov	r2, r8
    8f90:	vst1.32	{d10-d11}, [r0], r1
    8f94:	mov	r1, sl
    8f98:	str	r9, [r0]
    8f9c:	add	r0, r8, #16
    8fa0:	vst1.64	{d8-d9}, [r0]
    8fa4:	str	r0, [fp, #-512]	; 0xfffffe00
    8fa8:	mov	r0, r4
    8fac:	str	r9, [fp, #-456]	; 0xfffffe38
    8fb0:	str	r9, [fp, #-448]	; 0xfffffe40
    8fb4:	bl	9a6c <rb_sha256_process_bytes>
    8fb8:	mov	r0, r7
    8fbc:	mov	r1, r6
    8fc0:	mov	r2, r8
    8fc4:	str	r6, [fp, #-508]	; 0xfffffe04
    8fc8:	bl	9a6c <rb_sha256_process_bytes>
    8fcc:	mov	r0, r4
    8fd0:	mov	r1, sl
    8fd4:	mov	r2, r8
    8fd8:	bl	9a6c <rb_sha256_process_bytes>
    8fdc:	sub	r1, fp, #100	; 0x64
    8fe0:	mov	r0, r8
    8fe4:	bl	9c48 <rb_sha256_finish_ctx>
    8fe8:	cmp	sl, #33	; 0x21
    8fec:	mov	r1, sl
    8ff0:	mov	r9, r7
    8ff4:	str	r7, [fp, #-520]	; 0xfffffdf8
    8ff8:	bcc	9038 <rb_sha256_crypt_r+0x268>
    8ffc:	sub	r0, sl, #33	; 0x21
    9000:	sub	r5, fp, #100	; 0x64
    9004:	sub	r7, fp, #312	; 0x138
    9008:	mov	r6, sl
    900c:	bic	r9, r0, #31
    9010:	mov	r0, r5
    9014:	mov	r1, #32
    9018:	mov	r2, r7
    901c:	bl	9a6c <rb_sha256_process_bytes>
    9020:	sub	r6, r6, #32
    9024:	cmp	r6, #32
    9028:	bhi	9010 <rb_sha256_crypt_r+0x240>
    902c:	sub	r0, sl, #32
    9030:	sub	r1, r0, r9
    9034:	ldr	r9, [fp, #-520]	; 0xfffffdf8
    9038:	sub	r7, fp, #312	; 0x138
    903c:	sub	r0, fp, #100	; 0x64
    9040:	mov	r2, r7
    9044:	bl	9a6c <rb_sha256_process_bytes>
    9048:	cmp	sl, #0
    904c:	str	sl, [fp, #-492]	; 0xfffffe14
    9050:	beq	9180 <rb_sha256_crypt_r+0x3b0>
    9054:	mov	r6, sl
    9058:	sub	r5, fp, #312	; 0x138
    905c:	mov	r7, #0
    9060:	sub	sl, fp, #100	; 0x64
    9064:	tst	r6, #1
    9068:	bne	9078 <rb_sha256_crypt_r+0x2a8>
    906c:	ldr	r1, [fp, #-492]	; 0xfffffe14
    9070:	mov	r0, r4
    9074:	b	9080 <rb_sha256_crypt_r+0x2b0>
    9078:	mov	r0, sl
    907c:	mov	r1, #32
    9080:	mov	r2, r5
    9084:	bl	9a6c <rb_sha256_process_bytes>
    9088:	lsr	r0, r6, #1
    908c:	cmp	r7, r6, lsr #1
    9090:	mov	r6, r0
    9094:	bne	9064 <rb_sha256_crypt_r+0x294>
    9098:	sub	r0, fp, #312	; 0x138
    909c:	sub	r1, fp, #100	; 0x64
    90a0:	bl	9c48 <rb_sha256_finish_ctx>
    90a4:	add	r0, pc, #340	; 0x154
    90a8:	add	r1, pc, #320	; 0x140
    90ac:	ldr	sl, [fp, #-492]	; 0xfffffe14
    90b0:	sub	r7, fp, #312	; 0x138
    90b4:	vld1.64	{d16-d17}, [r0 :128]
    90b8:	vld1.64	{d18-d19}, [r1 :128]
    90bc:	mov	r0, #40	; 0x28
    90c0:	mov	r1, r8
    90c4:	cmp	sl, #0
    90c8:	vst1.32	{d16-d17}, [r1], r0
    90cc:	ldr	r0, [fp, #-512]	; 0xfffffe00
    90d0:	vst1.32	{d18-d19}, [r0]
    90d4:	mov	r0, #0
    90d8:	str	r0, [r1]
    90dc:	str	r0, [fp, #-456]	; 0xfffffe38
    90e0:	str	r0, [fp, #-452]	; 0xfffffe3c
    90e4:	beq	91c0 <rb_sha256_crypt_r+0x3f0>
    90e8:	sub	r5, fp, #488	; 0x1e8
    90ec:	mov	r6, sl
    90f0:	mov	r0, r4
    90f4:	mov	r1, sl
    90f8:	mov	r2, r5
    90fc:	bl	9a6c <rb_sha256_process_bytes>
    9100:	subs	r6, r6, #1
    9104:	bne	90f0 <rb_sha256_crypt_r+0x320>
    9108:	sub	r5, fp, #136	; 0x88
    910c:	sub	r0, fp, #488	; 0x1e8
    9110:	mov	r1, r5
    9114:	bl	9c48 <rb_sha256_finish_ctx>
    9118:	add	r0, sl, #7
    911c:	bic	r0, r0, #7
    9120:	sub	r1, sp, r0
    9124:	mov	sp, r1
    9128:	ldr	r6, [fp, #-508]	; 0xfffffe04
    912c:	cmp	sl, #32
    9130:	str	r1, [fp, #-496]	; 0xfffffe10
    9134:	bcc	9210 <rb_sha256_crypt_r+0x440>
    9138:	sub	ip, sl, #32
    913c:	mov	r3, #0
    9140:	bic	r2, ip, #31
    9144:	add	r0, r1, r2
    9148:	add	r0, r0, #32
    914c:	mov	r4, r5
    9150:	sub	r7, r1, r3
    9154:	sub	r3, r3, #32
    9158:	vld1.64	{d16-d17}, [r4]!
    915c:	vld1.64	{d18-d19}, [r4]
    9160:	vst1.64	{d16-d17}, [r7]!
    9164:	vst1.64	{d18-d19}, [r7]
    9168:	add	r7, sl, r3
    916c:	cmp	r7, #31
    9170:	bhi	914c <rb_sha256_crypt_r+0x37c>
    9174:	sub	r2, ip, r2
    9178:	sub	r7, fp, #312	; 0x138
    917c:	b	9218 <rb_sha256_crypt_r+0x448>
    9180:	sub	r0, fp, #312	; 0x138
    9184:	sub	r1, fp, #100	; 0x64
    9188:	bl	9c48 <rb_sha256_finish_ctx>
    918c:	add	r0, pc, #108	; 0x6c
    9190:	add	r1, pc, #88	; 0x58
    9194:	vld1.64	{d16-d17}, [r0 :128]
    9198:	vld1.64	{d18-d19}, [r1 :128]
    919c:	mov	r0, #40	; 0x28
    91a0:	mov	r1, r8
    91a4:	vst1.32	{d16-d17}, [r1], r0
    91a8:	ldr	r0, [fp, #-512]	; 0xfffffe00
    91ac:	vst1.32	{d18-d19}, [r0]
    91b0:	mov	r0, #0
    91b4:	str	r0, [r1]
    91b8:	str	r0, [fp, #-456]	; 0xfffffe38
    91bc:	str	r0, [fp, #-452]	; 0xfffffe3c
    91c0:	sub	r0, fp, #488	; 0x1e8
    91c4:	sub	r1, fp, #136	; 0x88
    91c8:	bl	9c48 <rb_sha256_finish_ctx>
    91cc:	add	r0, sl, #7
    91d0:	bic	r0, r0, #7
    91d4:	sub	r0, sp, r0
    91d8:	mov	sp, r0
    91dc:	ldr	r6, [fp, #-508]	; 0xfffffe04
    91e0:	mov	r2, #0
    91e4:	str	r0, [fp, #-496]	; 0xfffffe10
    91e8:	b	9218 <rb_sha256_crypt_r+0x448>
    91ec:	nop	{0}
    91f0:	.word	0x510e527f
    91f4:	.word	0x9b05688c
    91f8:	.word	0x1f83d9ab
    91fc:	.word	0x5be0cd19
    9200:	.word	0x6a09e667
    9204:	.word	0xbb67ae85
    9208:	.word	0x3c6ef372
    920c:	.word	0xa54ff53a
    9210:	mov	r0, r1
    9214:	mov	r2, sl
    9218:	sub	r1, fp, #136	; 0x88
    921c:	bl	50a0 <memcpy@plt>
    9220:	sub	r0, pc, #40	; 0x28
    9224:	sub	r1, pc, #60	; 0x3c
    9228:	mov	r4, #0
    922c:	vld1.64	{d16-d17}, [r0 :128]
    9230:	vld1.64	{d18-d19}, [r1 :128]
    9234:	mov	r0, #40	; 0x28
    9238:	mov	r1, r8
    923c:	vst1.32	{d16-d17}, [r1], r0
    9240:	ldr	r0, [fp, #-512]	; 0xfffffe00
    9244:	vst1.32	{d18-d19}, [r0]
    9248:	str	r4, [r1]
    924c:	str	r4, [fp, #-456]	; 0xfffffe38
    9250:	str	r4, [fp, #-452]	; 0xfffffe3c
    9254:	mov	r0, r9
    9258:	mov	r1, r6
    925c:	mov	r2, r8
    9260:	bl	9a6c <rb_sha256_process_bytes>
    9264:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    9268:	add	r4, r4, #1
    926c:	add	r0, r0, #16
    9270:	cmp	r4, r0
    9274:	bcc	9254 <rb_sha256_crypt_r+0x484>
    9278:	sub	r4, fp, #136	; 0x88
    927c:	sub	r0, fp, #488	; 0x1e8
    9280:	mov	r1, r4
    9284:	bl	9c48 <rb_sha256_finish_ctx>
    9288:	add	r0, r6, #7
    928c:	bic	r0, r0, #7
    9290:	sub	r0, sp, r0
    9294:	mov	sp, r0
    9298:	cmp	r6, #32
    929c:	bcc	92f0 <rb_sha256_crypt_r+0x520>
    92a0:	ldr	r3, [fp, #-540]	; 0xfffffde4
    92a4:	mvn	r1, #32
    92a8:	mvn	r2, r3
    92ac:	cmn	r2, #17
    92b0:	mvnls	r2, #16
    92b4:	sub	r5, r1, r2
    92b8:	mov	r2, r3
    92bc:	mov	r1, #32
    92c0:	mov	r3, r0
    92c4:	mov	r6, r4
    92c8:	sub	r2, r2, #32
    92cc:	add	r7, r3, #16
    92d0:	vld1.8	{d16-d17}, [r6]!
    92d4:	cmp	r2, #31
    92d8:	vld1.64	{d18-d19}, [r6]
    92dc:	vst1.8	{d16-d17}, [r3], r1
    92e0:	vst1.8	{d18-d19}, [r7]
    92e4:	bhi	92c4 <rb_sha256_crypt_r+0x4f4>
    92e8:	add	r6, r5, #32
    92ec:	sub	r7, fp, #312	; 0x138
    92f0:	sub	r1, fp, #136	; 0x88
    92f4:	mov	r2, r6
    92f8:	str	r0, [fp, #-512]	; 0xfffffe00
    92fc:	bl	50a0 <memcpy@plt>
    9300:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    9304:	cmp	r0, #0
    9308:	beq	942c <rb_sha256_crypt_r+0x65c>
    930c:	mov	r4, #0
    9310:	sub	r6, fp, #100	; 0x64
    9314:	mov	r8, #0
    9318:	sub	r0, pc, #288	; 0x120
    931c:	mov	r1, #40	; 0x28
    9320:	mov	r2, r7
    9324:	ands	r9, r8, #1
    9328:	vld1.64	{d16-d17}, [r0 :128]
    932c:	sub	r0, pc, #324	; 0x144
    9330:	vld1.64	{d18-d19}, [r0 :128]
    9334:	mov	r0, r7
    9338:	vst1.32	{d16-d17}, [r0], r1
    933c:	ldr	r1, [fp, #-504]	; 0xfffffe08
    9340:	vst1.32	{d18-d19}, [r1]
    9344:	str	r4, [r0]
    9348:	movw	r0, #18725	; 0x4925
    934c:	str	r4, [fp, #-280]	; 0xfffffee8
    9350:	str	r4, [fp, #-276]	; 0xfffffeec
    9354:	movt	r0, #9362	; 0x2492
    9358:	umull	r0, r1, r8, r0
    935c:	sub	r0, r8, r1
    9360:	add	r5, r1, r0, lsr #1
    9364:	lsr	r0, r5, #2
    9368:	lsl	sl, r0, #3
    936c:	movw	r0, #43691	; 0xaaab
    9370:	movt	r0, #43690	; 0xaaaa
    9374:	umull	r0, r1, r8, r0
    9378:	lsr	r0, r1, #1
    937c:	add	r7, r0, r0, lsl #1
    9380:	beq	9390 <rb_sha256_crypt_r+0x5c0>
    9384:	ldr	r0, [fp, #-496]	; 0xfffffe10
    9388:	ldr	r1, [fp, #-492]	; 0xfffffe14
    938c:	b	9398 <rb_sha256_crypt_r+0x5c8>
    9390:	mov	r0, r6
    9394:	mov	r1, #32
    9398:	bl	9a6c <rb_sha256_process_bytes>
    939c:	cmp	r7, r8
    93a0:	sub	r5, sl, r5, lsr #2
    93a4:	sub	r7, fp, #312	; 0x138
    93a8:	bne	93cc <rb_sha256_crypt_r+0x5fc>
    93ac:	ldr	sl, [fp, #-492]	; 0xfffffe14
    93b0:	cmp	r5, r8
    93b4:	bne	93e8 <rb_sha256_crypt_r+0x618>
    93b8:	cmp	r9, #0
    93bc:	beq	9400 <rb_sha256_crypt_r+0x630>
    93c0:	mov	r0, r6
    93c4:	mov	r1, #32
    93c8:	b	9408 <rb_sha256_crypt_r+0x638>
    93cc:	ldr	r0, [fp, #-512]	; 0xfffffe00
    93d0:	ldr	r1, [fp, #-508]	; 0xfffffe04
    93d4:	mov	r2, r7
    93d8:	bl	9a6c <rb_sha256_process_bytes>
    93dc:	ldr	sl, [fp, #-492]	; 0xfffffe14
    93e0:	cmp	r5, r8
    93e4:	beq	93b8 <rb_sha256_crypt_r+0x5e8>
    93e8:	ldr	r0, [fp, #-496]	; 0xfffffe10
    93ec:	mov	r1, sl
    93f0:	mov	r2, r7
    93f4:	bl	9a6c <rb_sha256_process_bytes>
    93f8:	cmp	r9, #0
    93fc:	bne	93c0 <rb_sha256_crypt_r+0x5f0>
    9400:	ldr	r0, [fp, #-496]	; 0xfffffe10
    9404:	mov	r1, sl
    9408:	mov	r2, r7
    940c:	bl	9a6c <rb_sha256_process_bytes>
    9410:	mov	r0, r7
    9414:	mov	r1, r6
    9418:	bl	9c48 <rb_sha256_finish_ctx>
    941c:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    9420:	add	r8, r8, #1
    9424:	cmp	r0, r8
    9428:	bne	9318 <rb_sha256_crypt_r+0x548>
    942c:	ldr	r6, [fp, #-532]	; 0xfffffdec
    9430:	ldr	r5, [fp, #-516]	; 0xfffffdfc
    9434:	mov	r1, #0
    9438:	mov	r9, #0
    943c:	bic	r4, r6, r6, asr #31
    9440:	mov	r0, r5
    9444:	mov	r2, r4
    9448:	bl	4ee4 <memset@plt>
    944c:	ldr	r1, [pc, #1544]	; 9a5c <rb_sha256_crypt_r+0xc8c>
    9450:	mov	r0, r5
    9454:	mov	r2, r4
    9458:	add	r1, pc, r1
    945c:	bl	4e3c <strncpy@plt>
    9460:	mov	r0, r5
    9464:	bl	507c <strlen@plt>
    9468:	adds	r7, r5, r0
    946c:	ldr	r0, [fp, #-536]	; 0xfffffde8
    9470:	sub	r8, r6, #3
    9474:	addeq	r7, r5, r4
    9478:	cmp	r0, #0
    947c:	beq	94b4 <rb_sha256_crypt_r+0x6e4>
    9480:	sub	sp, sp, #8
    9484:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    9488:	bic	r1, r8, r8, asr #31
    948c:	str	r0, [sp]
    9490:	mov	r0, r7
    9494:	ldr	r2, [pc, #1476]	; 9a60 <rb_sha256_crypt_r+0xc90>
    9498:	ldr	r3, [pc, #1476]	; 9a64 <rb_sha256_crypt_r+0xc94>
    949c:	add	r2, pc, r2
    94a0:	add	r3, pc, r3
    94a4:	bl	53f4 <snprintf@plt>
    94a8:	add	sp, sp, #8
    94ac:	sub	r8, r8, r0
    94b0:	add	r7, r7, r0
    94b4:	ldr	r6, [fp, #-508]	; 0xfffffe04
    94b8:	mov	r0, r7
    94bc:	mov	r1, #0
    94c0:	mov	r2, r6
    94c4:	bl	4ee4 <memset@plt>
    94c8:	bic	r5, r8, r8, asr #31
    94cc:	ldr	r1, [fp, #-520]	; 0xfffffdf8
    94d0:	mov	r4, r6
    94d4:	mov	r0, r7
    94d8:	cmp	r5, r6
    94dc:	movcc	r4, r5
    94e0:	mov	r2, r4
    94e4:	bl	4e3c <strncpy@plt>
    94e8:	ldr	r7, [fp, #-516]	; 0xfffffdfc
    94ec:	mov	r0, r7
    94f0:	bl	507c <strlen@plt>
    94f4:	adds	r0, r7, r0
    94f8:	sub	r1, r8, r4
    94fc:	mov	r2, r0
    9500:	moveq	r9, r6
    9504:	addeq	r2, r2, r6
    9508:	cmp	r1, #1
    950c:	blt	9918 <rb_sha256_crypt_r+0xb48>
    9510:	mov	r1, #36	; 0x24
    9514:	strb	r1, [r0, r9]
    9518:	beq	9918 <rb_sha256_crypt_r+0xb48>
    951c:	ldr	r0, [fp, #-540]	; 0xfffffde4
    9520:	mvn	ip, r5
    9524:	ldrb	r3, [fp, #-90]	; 0xffffffa6
    9528:	ldrb	r6, [fp, #-80]	; 0xffffffb0
    952c:	mvn	r9, r0
    9530:	lsl	r3, r3, #8
    9534:	cmp	ip, r9
    9538:	mov	r0, r9
    953c:	movhi	r0, ip
    9540:	cmn	r0, #17
    9544:	mvnls	r0, #16
    9548:	add	r7, r8, r0
    954c:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    9550:	ldr	lr, [pc, #1296]	; 9a68 <rb_sha256_crypt_r+0xc98>
    9554:	orr	r0, r3, r0, lsl #16
    9558:	add	r3, r2, #1
    955c:	add	lr, pc, lr
    9560:	orr	r5, r0, r6
    9564:	mov	r6, #0
    9568:	and	r0, r5, #63	; 0x3f
    956c:	add	r4, r7, r6
    9570:	ldrb	r0, [lr, r0]
    9574:	cmp	r4, #2
    9578:	strb	r0, [r3, -r6]
    957c:	sub	r0, r6, #1
    9580:	blt	9598 <rb_sha256_crypt_r+0x7c8>
    9584:	add	r4, r6, #4
    9588:	lsr	r5, r5, #6
    958c:	mov	r6, r0
    9590:	cmp	r4, #1
    9594:	bhi	9568 <rb_sha256_crypt_r+0x798>
    9598:	cmp	ip, r9
    959c:	mov	r5, r9
    95a0:	mvn	r4, #16
    95a4:	ldr	r6, [fp, #-508]	; 0xfffffe04
    95a8:	movhi	r5, ip
    95ac:	cmn	r5, #17
    95b0:	movls	r5, r4
    95b4:	add	r5, r8, r5
    95b8:	add	r5, r5, r0
    95bc:	add	r5, r5, #1
    95c0:	cmp	r5, #2
    95c4:	blt	9918 <rb_sha256_crypt_r+0xb48>
    95c8:	cmp	ip, r9
    95cc:	mov	r5, r9
    95d0:	ldrb	r6, [fp, #-79]	; 0xffffffb1
    95d4:	movhi	r5, ip
    95d8:	cmn	r5, #17
    95dc:	movhi	r4, r5
    95e0:	ldrb	r5, [fp, #-89]	; 0xffffffa7
    95e4:	add	r7, r8, r4
    95e8:	ldrb	r4, [fp, #-99]	; 0xffffff9d
    95ec:	lsl	r4, r4, #8
    95f0:	orr	r4, r4, r6, lsl #16
    95f4:	orr	r5, r4, r5
    95f8:	mvn	r4, #0
    95fc:	and	r6, r5, #63	; 0x3f
    9600:	sub	r1, r2, r0
    9604:	ldrb	r6, [lr, r6]
    9608:	strb	r6, [r1, #1]
    960c:	add	r1, r7, r0
    9610:	sub	r0, r0, #1
    9614:	cmp	r1, #2
    9618:	blt	9630 <rb_sha256_crypt_r+0x860>
    961c:	add	r1, r4, #5
    9620:	sub	r4, r4, #1
    9624:	lsr	r5, r5, #6
    9628:	cmp	r1, #1
    962c:	bhi	95fc <rb_sha256_crypt_r+0x82c>
    9630:	cmp	ip, r9
    9634:	mov	r1, r9
    9638:	mvn	r2, #16
    963c:	ldr	r6, [fp, #-508]	; 0xfffffe04
    9640:	movhi	r1, ip
    9644:	cmn	r1, #17
    9648:	movls	r1, r2
    964c:	add	r1, r8, r1
    9650:	add	r1, r1, r0
    9654:	add	r1, r1, #1
    9658:	cmp	r1, #2
    965c:	blt	9918 <rb_sha256_crypt_r+0xb48>
    9660:	cmp	ip, r9
    9664:	mov	r1, r9
    9668:	ldrb	r5, [fp, #-78]	; 0xffffffb2
    966c:	ldrb	r4, [fp, #-88]	; 0xffffffa8
    9670:	movhi	r1, ip
    9674:	cmn	r1, #17
    9678:	movhi	r2, r1
    967c:	ldrb	r1, [fp, #-98]	; 0xffffff9e
    9680:	lsl	r5, r5, #8
    9684:	add	r2, r8, r2
    9688:	orr	r4, r5, r4, lsl #16
    968c:	mov	r5, #4
    9690:	orr	r7, r4, r1
    9694:	and	r1, r7, #63	; 0x3f
    9698:	ldrb	r1, [lr, r1]
    969c:	strb	r1, [r3, -r0]
    96a0:	add	r1, r2, r0
    96a4:	sub	r0, r0, #1
    96a8:	cmp	r1, #2
    96ac:	blt	96bc <rb_sha256_crypt_r+0x8ec>
    96b0:	lsr	r7, r7, #6
    96b4:	subs	r5, r5, #1
    96b8:	bhi	9694 <rb_sha256_crypt_r+0x8c4>
    96bc:	cmp	ip, r9
    96c0:	movhi	r9, ip
    96c4:	cmn	r9, #17
    96c8:	mvnls	r9, #16
    96cc:	add	r1, r8, r9
    96d0:	add	r1, r1, r0
    96d4:	add	r1, r1, #1
    96d8:	cmp	r1, #2
    96dc:	blt	9918 <rb_sha256_crypt_r+0xb48>
    96e0:	sub	r2, r3, r0
    96e4:	ldrb	r3, [fp, #-87]	; 0xffffffa9
    96e8:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    96ec:	ldrb	r7, [fp, #-77]	; 0xffffffb3
    96f0:	lsl	r3, r3, #8
    96f4:	orr	r0, r3, r0, lsl #16
    96f8:	orr	r3, r0, r7
    96fc:	mov	r7, #4
    9700:	and	r0, r3, #63	; 0x3f
    9704:	sub	r1, r1, #1
    9708:	ldrb	r0, [lr, r0]
    970c:	cmp	r1, #2
    9710:	strb	r0, [r2], #1
    9714:	blt	9724 <rb_sha256_crypt_r+0x954>
    9718:	lsr	r3, r3, #6
    971c:	subs	r7, r7, #1
    9720:	bhi	9700 <rb_sha256_crypt_r+0x930>
    9724:	cmp	r1, #2
    9728:	blt	9918 <rb_sha256_crypt_r+0xb48>
    972c:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    9730:	ldrb	r7, [fp, #-76]	; 0xffffffb4
    9734:	ldrb	r3, [fp, #-86]	; 0xffffffaa
    9738:	lsl	r0, r0, #8
    973c:	orr	r0, r0, r7, lsl #16
    9740:	mov	r7, #4
    9744:	orr	r3, r0, r3
    9748:	and	r0, r3, #63	; 0x3f
    974c:	sub	r1, r1, #1
    9750:	ldrb	r0, [lr, r0]
    9754:	cmp	r1, #2
    9758:	strb	r0, [r2], #1
    975c:	blt	976c <rb_sha256_crypt_r+0x99c>
    9760:	lsr	r3, r3, #6
    9764:	subs	r7, r7, #1
    9768:	bhi	9748 <rb_sha256_crypt_r+0x978>
    976c:	cmp	r1, #2
    9770:	blt	9918 <rb_sha256_crypt_r+0xb48>
    9774:	ldrb	r7, [fp, #-75]	; 0xffffffb5
    9778:	ldrb	r3, [fp, #-85]	; 0xffffffab
    977c:	ldrb	r0, [fp, #-95]	; 0xffffffa1
    9780:	lsl	r7, r7, #8
    9784:	orr	r3, r7, r3, lsl #16
    9788:	mov	r7, #4
    978c:	orr	r3, r3, r0
    9790:	and	r0, r3, #63	; 0x3f
    9794:	sub	r1, r1, #1
    9798:	ldrb	r0, [lr, r0]
    979c:	cmp	r1, #2
    97a0:	strb	r0, [r2], #1
    97a4:	blt	97b4 <rb_sha256_crypt_r+0x9e4>
    97a8:	lsr	r3, r3, #6
    97ac:	subs	r7, r7, #1
    97b0:	bhi	9790 <rb_sha256_crypt_r+0x9c0>
    97b4:	cmp	r1, #2
    97b8:	blt	9918 <rb_sha256_crypt_r+0xb48>
    97bc:	ldrb	r3, [fp, #-84]	; 0xffffffac
    97c0:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    97c4:	ldrb	r7, [fp, #-74]	; 0xffffffb6
    97c8:	lsl	r3, r3, #8
    97cc:	orr	r0, r3, r0, lsl #16
    97d0:	orr	r3, r0, r7
    97d4:	mov	r7, #4
    97d8:	and	r0, r3, #63	; 0x3f
    97dc:	sub	r1, r1, #1
    97e0:	ldrb	r0, [lr, r0]
    97e4:	cmp	r1, #2
    97e8:	strb	r0, [r2], #1
    97ec:	blt	97fc <rb_sha256_crypt_r+0xa2c>
    97f0:	lsr	r3, r3, #6
    97f4:	subs	r7, r7, #1
    97f8:	bhi	97d8 <rb_sha256_crypt_r+0xa08>
    97fc:	cmp	r1, #2
    9800:	blt	9918 <rb_sha256_crypt_r+0xb48>
    9804:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    9808:	ldrb	r7, [fp, #-73]	; 0xffffffb7
    980c:	ldrb	r3, [fp, #-83]	; 0xffffffad
    9810:	lsl	r0, r0, #8
    9814:	orr	r0, r0, r7, lsl #16
    9818:	mov	r7, #4
    981c:	orr	r3, r0, r3
    9820:	and	r0, r3, #63	; 0x3f
    9824:	sub	r1, r1, #1
    9828:	ldrb	r0, [lr, r0]
    982c:	cmp	r1, #2
    9830:	strb	r0, [r2], #1
    9834:	blt	9844 <rb_sha256_crypt_r+0xa74>
    9838:	lsr	r3, r3, #6
    983c:	subs	r7, r7, #1
    9840:	bhi	9820 <rb_sha256_crypt_r+0xa50>
    9844:	cmp	r1, #2
    9848:	blt	9918 <rb_sha256_crypt_r+0xb48>
    984c:	ldrb	r7, [fp, #-72]	; 0xffffffb8
    9850:	ldrb	r3, [fp, #-82]	; 0xffffffae
    9854:	ldrb	r0, [fp, #-92]	; 0xffffffa4
    9858:	lsl	r7, r7, #8
    985c:	orr	r3, r7, r3, lsl #16
    9860:	mov	r7, #4
    9864:	orr	r3, r3, r0
    9868:	and	r0, r3, #63	; 0x3f
    986c:	sub	r1, r1, #1
    9870:	ldrb	r0, [lr, r0]
    9874:	cmp	r1, #2
    9878:	strb	r0, [r2], #1
    987c:	blt	988c <rb_sha256_crypt_r+0xabc>
    9880:	lsr	r3, r3, #6
    9884:	subs	r7, r7, #1
    9888:	bhi	9868 <rb_sha256_crypt_r+0xa98>
    988c:	cmp	r1, #2
    9890:	blt	9918 <rb_sha256_crypt_r+0xb48>
    9894:	ldrb	r3, [fp, #-81]	; 0xffffffaf
    9898:	ldrb	r0, [fp, #-91]	; 0xffffffa5
    989c:	ldrb	r7, [fp, #-71]	; 0xffffffb9
    98a0:	lsl	r3, r3, #8
    98a4:	orr	r0, r3, r0, lsl #16
    98a8:	orr	r3, r0, r7
    98ac:	mov	r7, #4
    98b0:	and	r0, r3, #63	; 0x3f
    98b4:	sub	r1, r1, #1
    98b8:	ldrb	r0, [lr, r0]
    98bc:	cmp	r1, #2
    98c0:	strb	r0, [r2], #1
    98c4:	blt	98d4 <rb_sha256_crypt_r+0xb04>
    98c8:	lsr	r3, r3, #6
    98cc:	subs	r7, r7, #1
    98d0:	bhi	98b0 <rb_sha256_crypt_r+0xae0>
    98d4:	cmp	r1, #2
    98d8:	blt	9918 <rb_sha256_crypt_r+0xb48>
    98dc:	ldrb	r0, [fp, #-70]	; 0xffffffba
    98e0:	ldrb	r3, [fp, #-69]	; 0xffffffbb
    98e4:	mov	r7, #3
    98e8:	orr	r3, r0, r3, lsl #8
    98ec:	and	r0, r3, #63	; 0x3f
    98f0:	sub	r1, r1, #1
    98f4:	ldrb	r0, [lr, r0]
    98f8:	cmp	r1, #2
    98fc:	strb	r0, [r2], #1
    9900:	blt	9910 <rb_sha256_crypt_r+0xb40>
    9904:	lsr	r3, r3, #6
    9908:	subs	r7, r7, #1
    990c:	bhi	98ec <rb_sha256_crypt_r+0xb1c>
    9910:	cmp	r1, #1
    9914:	bgt	9a1c <rb_sha256_crypt_r+0xc4c>
    9918:	bl	552c <__errno_location@plt>
    991c:	mov	r1, #34	; 0x22
    9920:	str	r1, [r0]
    9924:	mov	r0, #0
    9928:	str	r0, [fp, #-516]	; 0xfffffdfc
    992c:	add	r0, pc, #268	; 0x10c
    9930:	add	r1, pc, #248	; 0xf8
    9934:	sub	r4, fp, #312	; 0x138
    9938:	vld1.64	{d16-d17}, [r0 :128]
    993c:	vld1.64	{d18-d19}, [r1 :128]
    9940:	mov	r0, #40	; 0x28
    9944:	mov	r1, r4
    9948:	vst1.32	{d16-d17}, [r1], r0
    994c:	ldr	r0, [fp, #-504]	; 0xfffffe08
    9950:	vst1.32	{d18-d19}, [r0]
    9954:	mov	r0, #0
    9958:	str	r0, [r1]
    995c:	str	r0, [fp, #-280]	; 0xfffffee8
    9960:	str	r0, [fp, #-276]	; 0xfffffeec
    9964:	sub	r1, fp, #100	; 0x64
    9968:	mov	r0, r4
    996c:	bl	9c48 <rb_sha256_finish_ctx>
    9970:	vmov.i32	q8, #0	; 0x00000000
    9974:	sub	r0, fp, #136	; 0x88
    9978:	mov	r1, #0
    997c:	mov	r2, sl
    9980:	vst1.64	{d16-d17}, [r0]!
    9984:	vst1.64	{d16-d17}, [r0]
    9988:	ldr	r0, [fp, #-496]	; 0xfffffe10
    998c:	bl	4ee4 <memset@plt>
    9990:	ldr	r0, [fp, #-512]	; 0xfffffe00
    9994:	mov	r1, #0
    9998:	mov	r2, r6
    999c:	bl	4ee4 <memset@plt>
    99a0:	mov	r0, r4
    99a4:	mov	r1, #0
    99a8:	mov	r2, #172	; 0xac
    99ac:	bl	4ee4 <memset@plt>
    99b0:	sub	r0, fp, #488	; 0x1e8
    99b4:	mov	r1, #0
    99b8:	mov	r2, #172	; 0xac
    99bc:	bl	4ee4 <memset@plt>
    99c0:	ldr	r0, [fp, #-524]	; 0xfffffdf4
    99c4:	ldr	r4, [fp, #-528]	; 0xfffffdf0
    99c8:	cmp	r0, #0
    99cc:	beq	99dc <rb_sha256_crypt_r+0xc0c>
    99d0:	mov	r1, #0
    99d4:	mov	r2, sl
    99d8:	bl	4ee4 <memset@plt>
    99dc:	cmp	r4, #0
    99e0:	beq	99f4 <rb_sha256_crypt_r+0xc24>
    99e4:	mov	r0, r4
    99e8:	mov	r1, #0
    99ec:	mov	r2, r6
    99f0:	bl	4ee4 <memset@plt>
    99f4:	ldr	r0, [fp, #-516]	; 0xfffffdfc
    99f8:	sub	sp, fp, #64	; 0x40
    99fc:	vpop	{d8-d11}
    9a00:	add	sp, sp, #4
    9a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a08:	mov	r0, #0
    9a0c:	str	r0, [fp, #-536]	; 0xfffffde8
    9a10:	movw	r0, #5000	; 0x1388
    9a14:	str	r0, [fp, #-500]	; 0xfffffe0c
    9a18:	b	8e84 <rb_sha256_crypt_r+0xb4>
    9a1c:	mov	r0, #0
    9a20:	strb	r0, [r2]
    9a24:	b	992c <rb_sha256_crypt_r+0xb5c>
    9a28:	nop	{0}
    9a2c:	nop	{0}
    9a30:	.word	0x510e527f
    9a34:	.word	0x9b05688c
    9a38:	.word	0x1f83d9ab
    9a3c:	.word	0x5be0cd19
    9a40:	.word	0x6a09e667
    9a44:	.word	0xbb67ae85
    9a48:	.word	0x3c6ef372
    9a4c:	.word	0xa54ff53a
    9a50:	.word	0x00010d9c
    9a54:	.word	0x00010d84
    9a58:	.word	0x000109d6
    9a5c:	.word	0x00010740
    9a60:	.word	0x000103c8
    9a64:	.word	0x000106fc
    9a68:	.word	0x000102c3

00009a6c <rb_sha256_process_bytes>:
    9a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a70:	add	fp, sp, #28
    9a74:	sub	sp, sp, #20
    9a78:	ldr	r6, [r2, #40]	; 0x28
    9a7c:	mov	r4, r2
    9a80:	mov	r5, r1
    9a84:	mov	r8, r0
    9a88:	cmp	r6, #0
    9a8c:	beq	9b00 <rb_sha256_process_bytes+0x94>
    9a90:	rsb	r7, r6, #128	; 0x80
    9a94:	add	r0, r4, r6
    9a98:	mov	r1, r8
    9a9c:	cmp	r7, r5
    9aa0:	add	r0, r0, #44	; 0x2c
    9aa4:	movhi	r7, r5
    9aa8:	mov	r2, r7
    9aac:	bl	50a0 <memcpy@plt>
    9ab0:	ldr	r0, [r4, #40]	; 0x28
    9ab4:	add	r0, r0, r7
    9ab8:	cmp	r0, #65	; 0x41
    9abc:	str	r0, [r4, #40]	; 0x28
    9ac0:	bcc	9af8 <rb_sha256_process_bytes+0x8c>
    9ac4:	add	r9, r4, #44	; 0x2c
    9ac8:	bic	r1, r0, #63	; 0x3f
    9acc:	mov	r2, r4
    9ad0:	mov	r0, r9
    9ad4:	bl	9d68 <rb_sha256_process_block>
    9ad8:	ldr	r0, [r4, #40]	; 0x28
    9adc:	and	r2, r0, #63	; 0x3f
    9ae0:	add	r0, r7, r6
    9ae4:	bic	r0, r0, #63	; 0x3f
    9ae8:	str	r2, [r4, #40]	; 0x28
    9aec:	add	r1, r9, r0
    9af0:	mov	r0, r9
    9af4:	bl	50a0 <memcpy@plt>
    9af8:	sub	r5, r5, r7
    9afc:	add	r8, r8, r7
    9b00:	cmp	r5, #64	; 0x40
    9b04:	bcc	9bdc <rb_sha256_process_bytes+0x170>
    9b08:	tst	r8, #3
    9b0c:	beq	9bc0 <rb_sha256_process_bytes+0x154>
    9b10:	cmp	r5, #65	; 0x41
    9b14:	bcc	9bec <rb_sha256_process_bytes+0x180>
    9b18:	sub	r0, r5, #64	; 0x40
    9b1c:	add	r7, r4, #44	; 0x2c
    9b20:	mov	sl, #48	; 0x30
    9b24:	str	r0, [sp, #12]
    9b28:	sub	r0, r5, #65	; 0x41
    9b2c:	add	r6, r7, #32
    9b30:	bic	r0, r0, #63	; 0x3f
    9b34:	str	r0, [sp, #8]
    9b38:	add	r0, r0, #64	; 0x40
    9b3c:	str	r0, [sp, #4]
    9b40:	mov	r0, r8
    9b44:	add	r8, r7, #16
    9b48:	mov	r9, r0
    9b4c:	str	r0, [sp, #16]
    9b50:	mov	r1, #64	; 0x40
    9b54:	add	r2, r0, #48	; 0x30
    9b58:	vld1.8	{d16-d17}, [r9], r1
    9b5c:	add	r1, r0, #32
    9b60:	vld1.8	{d18-d19}, [r2]
    9b64:	add	r0, r0, #16
    9b68:	mov	r2, r4
    9b6c:	vld1.8	{d20-d21}, [r1]
    9b70:	mov	r1, r7
    9b74:	vst1.8	{d16-d17}, [r1], sl
    9b78:	vld1.8	{d16-d17}, [r0]
    9b7c:	vst1.8	{d18-d19}, [r1]
    9b80:	mov	r0, r7
    9b84:	mov	r1, #64	; 0x40
    9b88:	vst1.8	{d20-d21}, [r6]
    9b8c:	vst1.8	{d16-d17}, [r8]
    9b90:	bl	9d68 <rb_sha256_process_block>
    9b94:	sub	r5, r5, #64	; 0x40
    9b98:	mov	r0, r9
    9b9c:	cmp	r5, #64	; 0x40
    9ba0:	bhi	9b50 <rb_sha256_process_bytes+0xe4>
    9ba4:	ldr	r0, [sp, #12]
    9ba8:	ldr	r1, [sp, #8]
    9bac:	ldr	r8, [sp, #16]
    9bb0:	sub	r5, r0, r1
    9bb4:	ldr	r0, [sp, #4]
    9bb8:	add	r8, r8, r0
    9bbc:	b	9bf0 <rb_sha256_process_bytes+0x184>
    9bc0:	bic	r6, r5, #63	; 0x3f
    9bc4:	mov	r0, r8
    9bc8:	mov	r2, r4
    9bcc:	mov	r1, r6
    9bd0:	bl	9d68 <rb_sha256_process_block>
    9bd4:	add	r8, r8, r6
    9bd8:	and	r5, r5, #63	; 0x3f
    9bdc:	cmp	r5, #0
    9be0:	bne	9bf0 <rb_sha256_process_bytes+0x184>
    9be4:	sub	sp, fp, #28
    9be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bec:	mov	r5, #64	; 0x40
    9bf0:	ldr	r6, [r4, #40]	; 0x28
    9bf4:	mov	r1, r8
    9bf8:	mov	r2, r5
    9bfc:	add	r0, r4, r6
    9c00:	add	r0, r0, #44	; 0x2c
    9c04:	bl	50a0 <memcpy@plt>
    9c08:	add	r5, r6, r5
    9c0c:	cmp	r5, #64	; 0x40
    9c10:	bcc	9c3c <rb_sha256_process_bytes+0x1d0>
    9c14:	add	r6, r4, #44	; 0x2c
    9c18:	mov	r1, #64	; 0x40
    9c1c:	mov	r2, r4
    9c20:	mov	r0, r6
    9c24:	bl	9d68 <rb_sha256_process_block>
    9c28:	sub	r5, r5, #64	; 0x40
    9c2c:	add	r1, r4, #108	; 0x6c
    9c30:	mov	r0, r6
    9c34:	mov	r2, r5
    9c38:	bl	50a0 <memcpy@plt>
    9c3c:	str	r5, [r4, #40]	; 0x28
    9c40:	sub	sp, fp, #28
    9c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009c48 <rb_sha256_finish_ctx>:
    9c48:	push	{r4, r5, r6, r7, fp, lr}
    9c4c:	add	fp, sp, #16
    9c50:	mov	r5, r0
    9c54:	mov	r4, r1
    9c58:	ldr	r0, [r0, #32]
    9c5c:	mov	r7, #56	; 0x38
    9c60:	ldr	r1, [r5, #40]	; 0x28
    9c64:	add	r6, r5, #44	; 0x2c
    9c68:	adds	r0, r0, r1
    9c6c:	str	r0, [r5, #32]
    9c70:	ldrcs	r0, [r5, #36]	; 0x24
    9c74:	addcs	r0, r0, #1
    9c78:	strcs	r0, [r5, #36]	; 0x24
    9c7c:	cmp	r1, #55	; 0x37
    9c80:	add	r0, r6, r1
    9c84:	movwhi	r7, #120	; 0x78
    9c88:	sub	r2, r7, r1
    9c8c:	ldr	r1, [pc, #208]	; 9d64 <rb_sha256_finish_ctx+0x11c>
    9c90:	add	r1, pc, r1
    9c94:	bl	50a0 <memcpy@plt>
    9c98:	ldr	r0, [r5, #32]
    9c9c:	mov	r1, #65280	; 0xff00
    9ca0:	lsl	r3, r0, #11
    9ca4:	and	r2, r1, r0, lsr #5
    9ca8:	uxtb16	r3, r3
    9cac:	orr	r3, r3, r0, lsl #27
    9cb0:	orr	r2, r3, r2
    9cb4:	ubfx	r3, r0, #21, #8
    9cb8:	orr	r2, r2, r3
    9cbc:	orr	r3, r7, #4
    9cc0:	str	r2, [r6, r3]
    9cc4:	movw	r3, #8160	; 0x1fe0
    9cc8:	ldr	r2, [r5, #36]	; 0x24
    9ccc:	and	r3, r2, r3
    9cd0:	and	r1, r1, r2, lsr #5
    9cd4:	orr	r1, r1, r3, lsl #11
    9cd8:	ubfx	r3, r2, #21, #8
    9cdc:	lsl	r2, r2, #3
    9ce0:	orr	r0, r2, r0, lsr #29
    9ce4:	orr	r1, r1, r3
    9ce8:	mov	r2, r5
    9cec:	orr	r0, r1, r0, lsl #24
    9cf0:	add	r1, r7, #8
    9cf4:	str	r0, [r6, r7]
    9cf8:	mov	r0, r6
    9cfc:	bl	9d68 <rb_sha256_process_block>
    9d00:	ldr	r0, [r5]
    9d04:	rev	r0, r0
    9d08:	str	r0, [r4]
    9d0c:	ldr	r0, [r5, #4]
    9d10:	rev	r0, r0
    9d14:	str	r0, [r4, #4]
    9d18:	ldr	r0, [r5, #8]
    9d1c:	rev	r0, r0
    9d20:	str	r0, [r4, #8]
    9d24:	ldr	r0, [r5, #12]
    9d28:	rev	r0, r0
    9d2c:	str	r0, [r4, #12]
    9d30:	ldr	r0, [r5, #16]
    9d34:	rev	r0, r0
    9d38:	str	r0, [r4, #16]
    9d3c:	ldr	r0, [r5, #20]
    9d40:	rev	r0, r0
    9d44:	str	r0, [r4, #20]
    9d48:	ldr	r0, [r5, #24]
    9d4c:	rev	r0, r0
    9d50:	str	r0, [r4, #24]
    9d54:	ldr	r0, [r5, #28]
    9d58:	rev	r0, r0
    9d5c:	str	r0, [r4, #28]
    9d60:	pop	{r4, r5, r6, r7, fp, pc}
    9d64:	.word	0x00010018

00009d68 <rb_sha256_process_block>:
    9d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d6c:	add	fp, sp, #28
    9d70:	sub	sp, sp, #304	; 0x130
    9d74:	mov	r3, r0
    9d78:	ldr	r0, [r2, #32]
    9d7c:	add	lr, r2, #16
    9d80:	lsr	r4, r1, #2
    9d84:	adds	r0, r0, r1
    9d88:	str	r0, [r2, #32]
    9d8c:	ldr	r0, [r2, #4]
    9d90:	ldr	r9, [r2]
    9d94:	str	r0, [sp, #32]
    9d98:	ldr	r0, [r2, #8]
    9d9c:	str	r0, [sp, #36]	; 0x24
    9da0:	ldr	r0, [r2, #12]
    9da4:	str	r0, [sp, #40]	; 0x28
    9da8:	ldm	lr, {sl, ip, lr}
    9dac:	ldrcs	r1, [r2, #36]	; 0x24
    9db0:	ldr	r0, [r2, #28]
    9db4:	str	r2, [sp]
    9db8:	addcs	r1, r1, #1
    9dbc:	strcs	r1, [r2, #36]	; 0x24
    9dc0:	cmp	r4, #0
    9dc4:	beq	a008 <rb_sha256_process_block+0x2a0>
    9dc8:	ldr	r1, [r3]
    9dcc:	str	r4, [sp, #4]
    9dd0:	str	r3, [sp, #8]
    9dd4:	rev	r8, r1
    9dd8:	str	r8, [sp, #44]	; 0x2c
    9ddc:	ldr	r1, [r3, #4]
    9de0:	rev	r1, r1
    9de4:	str	r1, [sp, #48]	; 0x30
    9de8:	ldr	r1, [r3, #8]
    9dec:	rev	r1, r1
    9df0:	str	r1, [sp, #52]	; 0x34
    9df4:	ldr	r1, [r3, #12]
    9df8:	rev	r1, r1
    9dfc:	str	r1, [sp, #56]	; 0x38
    9e00:	ldr	r1, [r3, #16]
    9e04:	rev	r1, r1
    9e08:	str	r1, [sp, #60]	; 0x3c
    9e0c:	ldr	r1, [r3, #20]
    9e10:	rev	r1, r1
    9e14:	str	r1, [sp, #64]	; 0x40
    9e18:	ldr	r1, [r3, #24]
    9e1c:	rev	r1, r1
    9e20:	str	r1, [sp, #68]	; 0x44
    9e24:	ldr	r1, [r3, #28]
    9e28:	rev	r1, r1
    9e2c:	str	r1, [sp, #72]	; 0x48
    9e30:	ldr	r1, [r3, #32]
    9e34:	rev	r1, r1
    9e38:	str	r1, [sp, #76]	; 0x4c
    9e3c:	ldr	r1, [r3, #36]	; 0x24
    9e40:	rev	r1, r1
    9e44:	str	r1, [sp, #80]	; 0x50
    9e48:	ldr	r1, [r3, #40]	; 0x28
    9e4c:	rev	r1, r1
    9e50:	str	r1, [sp, #84]	; 0x54
    9e54:	ldr	r1, [r3, #44]	; 0x2c
    9e58:	rev	r1, r1
    9e5c:	str	r1, [sp, #88]	; 0x58
    9e60:	ldr	r1, [r3, #48]	; 0x30
    9e64:	rev	r1, r1
    9e68:	str	r1, [sp, #92]	; 0x5c
    9e6c:	ldr	r1, [r3, #52]	; 0x34
    9e70:	rev	r1, r1
    9e74:	str	r1, [sp, #96]	; 0x60
    9e78:	ldr	r1, [r3, #56]	; 0x38
    9e7c:	rev	r1, r1
    9e80:	str	r1, [sp, #100]	; 0x64
    9e84:	ldr	r1, [r3, #60]	; 0x3c
    9e88:	rev	r1, r1
    9e8c:	str	r1, [sp, #104]	; 0x68
    9e90:	mov	r1, #0
    9e94:	add	r2, sp, #44	; 0x2c
    9e98:	add	r2, r2, r1
    9e9c:	add	r1, r1, #4
    9ea0:	ldr	r6, [r2, #56]	; 0x38
    9ea4:	ldr	r3, [r2, #4]
    9ea8:	ldr	r7, [r2, #36]	; 0x24
    9eac:	cmp	r1, #192	; 0xc0
    9eb0:	ror	r4, r6, #19
    9eb4:	ror	r5, r3, #18
    9eb8:	add	r7, r8, r7
    9ebc:	mov	r8, r3
    9ec0:	eor	r4, r4, r6, lsr #10
    9ec4:	eor	r5, r5, r3, lsr #3
    9ec8:	eor	r6, r4, r6, ror #17
    9ecc:	eor	r5, r5, r3, ror #7
    9ed0:	add	r7, r7, r6
    9ed4:	add	r7, r7, r5
    9ed8:	str	r7, [r2, #64]	; 0x40
    9edc:	bne	9e94 <rb_sha256_process_block+0x12c>
    9ee0:	ldr	r6, [sp, #32]
    9ee4:	ldr	r3, [sp, #36]	; 0x24
    9ee8:	ldr	r8, [sp, #40]	; 0x28
    9eec:	mov	r2, #0
    9ef0:	mov	r4, ip
    9ef4:	mov	r7, r0
    9ef8:	str	r9, [sp, #12]
    9efc:	str	sl, [sp, #16]
    9f00:	str	ip, [sp, #20]
    9f04:	str	lr, [sp, #24]
    9f08:	str	r0, [sp, #28]
    9f0c:	mov	r5, r3
    9f10:	mov	r3, r6
    9f14:	mov	r6, r9
    9f18:	mov	ip, lr
    9f1c:	mov	lr, r4
    9f20:	mov	r4, sl
    9f24:	eor	r1, r3, r5
    9f28:	ror	r0, r6, #2
    9f2c:	and	r9, r3, r5
    9f30:	and	r1, r6, r1
    9f34:	eor	r0, r0, r6, ror #13
    9f38:	eor	r1, r1, r9
    9f3c:	eor	r0, r0, r6, ror #22
    9f40:	add	r9, r0, r1
    9f44:	bic	r1, ip, sl
    9f48:	and	r0, sl, lr
    9f4c:	orr	r0, r0, r1
    9f50:	ror	r1, sl, #6
    9f54:	eor	r1, r1, sl, ror #11
    9f58:	add	r0, r0, r7
    9f5c:	mov	r7, ip
    9f60:	eor	r1, r1, sl, ror #25
    9f64:	add	r0, r0, r1
    9f68:	ldr	r1, [pc, #200]	; a038 <rb_sha256_process_block+0x2d0>
    9f6c:	add	r1, pc, r1
    9f70:	ldr	r1, [r1, r2, lsl #2]
    9f74:	add	r0, r0, r1
    9f78:	add	r1, sp, #44	; 0x2c
    9f7c:	ldr	r1, [r1, r2, lsl #2]
    9f80:	add	r2, r2, #1
    9f84:	cmp	r2, #64	; 0x40
    9f88:	add	r0, r0, r1
    9f8c:	add	sl, r0, r8
    9f90:	add	r9, r9, r0
    9f94:	mov	r8, r5
    9f98:	bne	9f0c <rb_sha256_process_block+0x1a4>
    9f9c:	ldr	r1, [sp, #24]
    9fa0:	ldr	r0, [sp, #28]
    9fa4:	add	r1, lr, r1
    9fa8:	add	r0, ip, r0
    9fac:	ldr	ip, [sp, #20]
    9fb0:	mov	lr, r1
    9fb4:	ldr	r1, [sp, #16]
    9fb8:	add	ip, r4, ip
    9fbc:	ldr	r4, [sp, #4]
    9fc0:	add	r1, sl, r1
    9fc4:	mov	sl, r1
    9fc8:	ldr	r1, [sp, #40]	; 0x28
    9fcc:	subs	r4, r4, #16
    9fd0:	add	r1, r5, r1
    9fd4:	str	r1, [sp, #40]	; 0x28
    9fd8:	ldr	r1, [sp, #36]	; 0x24
    9fdc:	add	r1, r3, r1
    9fe0:	ldr	r3, [sp, #8]
    9fe4:	str	r1, [sp, #36]	; 0x24
    9fe8:	ldr	r1, [sp, #32]
    9fec:	add	r3, r3, #64	; 0x40
    9ff0:	add	r1, r6, r1
    9ff4:	str	r1, [sp, #32]
    9ff8:	ldr	r1, [sp, #12]
    9ffc:	add	r1, r9, r1
    a000:	mov	r9, r1
    a004:	bne	9dc8 <rb_sha256_process_block+0x60>
    a008:	ldr	r1, [sp]
    a00c:	ldr	r2, [sp, #32]
    a010:	str	r9, [r1]
    a014:	str	r2, [r1, #4]
    a018:	ldr	r2, [sp, #36]	; 0x24
    a01c:	add	r3, r1, #12
    a020:	str	r2, [r1, #8]
    a024:	ldr	r2, [sp, #40]	; 0x28
    a028:	stm	r3, {r2, sl, ip, lr}
    a02c:	str	r0, [r1, #28]
    a030:	sub	sp, fp, #28
    a034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a038:	.word	0x0000fc38
    a03c:	.word	0xe320f000

0000a040 <rb_sha512_crypt_r>:
    a040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a044:	add	fp, sp, #28
    a048:	sub	sp, sp, #4
    a04c:	vpush	{d8-d15}
    a050:	sub	sp, sp, #904	; 0x388
    a054:	str	r2, [fp, #-960]	; 0xfffffc40
    a058:	str	r3, [fp, #-988]	; 0xfffffc24
    a05c:	mov	sl, r0
    a060:	mov	r2, #3
    a064:	mov	r7, r1
    a068:	ldr	r0, [pc, #1736]	; a738 <rb_sha512_crypt_r+0x6f8>
    a06c:	add	r0, pc, r0
    a070:	bl	5454 <strncmp@plt>
    a074:	ldr	r1, [pc, #1728]	; a73c <rb_sha512_crypt_r+0x6fc>
    a078:	cmp	r0, #0
    a07c:	mov	r2, #7
    a080:	addeq	r7, r7, #3
    a084:	mov	r0, r7
    a088:	add	r1, pc, r1
    a08c:	bl	5454 <strncmp@plt>
    a090:	movw	r1, #5000	; 0x1388
    a094:	mov	r4, #0
    a098:	cmp	r0, #0
    a09c:	str	r1, [fp, #-932]	; 0xfffffc5c
    a0a0:	beq	a0ac <rb_sha512_crypt_r+0x6c>
    a0a4:	mov	r0, #0
    a0a8:	b	a0f0 <rb_sha512_crypt_r+0xb0>
    a0ac:	add	r0, r7, #7
    a0b0:	sub	r1, fp, #576	; 0x240
    a0b4:	mov	r2, #10
    a0b8:	bl	5094 <strtoul@plt>
    a0bc:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    a0c0:	ldrb	r2, [r1]
    a0c4:	cmp	r2, #36	; 0x24
    a0c8:	bne	b0d4 <rb_sha512_crypt_r+0x1094>
    a0cc:	movw	r2, #51711	; 0xc9ff
    a0d0:	add	r7, r1, #1
    a0d4:	movt	r2, #15258	; 0x3b9a
    a0d8:	cmp	r0, r2
    a0dc:	movcc	r2, r0
    a0e0:	mov	r0, #1
    a0e4:	cmp	r2, #1000	; 0x3e8
    a0e8:	movls	r2, #1000	; 0x3e8
    a0ec:	str	r2, [fp, #-932]	; 0xfffffc5c
    a0f0:	str	r0, [fp, #-992]	; 0xfffffc20
    a0f4:	ldr	r1, [pc, #4076]	; b0e8 <rb_sha512_crypt_r+0x10a8>
    a0f8:	mov	r0, r7
    a0fc:	add	r1, pc, r1
    a100:	bl	5424 <strcspn@plt>
    a104:	mov	r6, r0
    a108:	cmp	r0, #16
    a10c:	str	r0, [fp, #-996]	; 0xfffffc1c
    a110:	mov	r0, sl
    a114:	movcs	r6, #16
    a118:	bl	507c <strlen@plt>
    a11c:	mov	r5, r0
    a120:	tst	sl, #7
    a124:	beq	a150 <rb_sha512_crypt_r+0x110>
    a128:	add	r0, r5, #15
    a12c:	bic	r0, r0, #7
    a130:	sub	r0, sp, r0
    a134:	add	r4, r0, #8
    a138:	mov	sp, r0
    a13c:	mov	r0, r4
    a140:	mov	r1, sl
    a144:	mov	r2, r5
    a148:	bl	50a0 <memcpy@plt>
    a14c:	mov	sl, r4
    a150:	mov	r9, #0
    a154:	tst	r7, #7
    a158:	str	r4, [fp, #-980]	; 0xfffffc2c
    a15c:	beq	a190 <rb_sha512_crypt_r+0x150>
    a160:	add	r0, r6, #15
    a164:	bic	r0, r0, #7
    a168:	sub	r0, sp, r0
    a16c:	add	r4, r0, #8
    a170:	mov	sp, r0
    a174:	mov	r0, r4
    a178:	mov	r1, r7
    a17c:	mov	r2, r6
    a180:	bl	50a0 <memcpy@plt>
    a184:	mov	r7, r4
    a188:	str	r4, [fp, #-984]	; 0xfffffc28
    a18c:	b	a198 <rb_sha512_crypt_r+0x158>
    a190:	mov	r0, #0
    a194:	str	r0, [fp, #-984]	; 0xfffffc28
    a198:	add	r0, pc, #816	; 0x330
    a19c:	add	r1, pc, #828	; 0x33c
    a1a0:	add	r2, pc, #840	; 0x348
    a1a4:	sub	r4, fp, #576	; 0x240
    a1a8:	vmov.i32	q8, #0	; 0x00000000
    a1ac:	mov	r8, #80	; 0x50
    a1b0:	vld1.64	{d10-d11}, [r2 :128]
    a1b4:	add	r2, pc, #836	; 0x344
    a1b8:	vld1.64	{d14-d15}, [r1 :128]
    a1bc:	add	r3, r4, #64	; 0x40
    a1c0:	vld1.64	{d8-d9}, [r0 :128]
    a1c4:	add	r0, r4, #16
    a1c8:	mov	r1, r5
    a1cc:	vld1.64	{d12-d13}, [r2 :128]
    a1d0:	vst1.64	{d16-d17}, [r3]
    a1d4:	str	r0, [fp, #-940]	; 0xfffffc54
    a1d8:	mov	r2, r4
    a1dc:	str	r3, [fp, #-936]	; 0xfffffc58
    a1e0:	vst1.64	{d10-d11}, [r0]
    a1e4:	add	r0, r4, #32
    a1e8:	str	r0, [fp, #-944]	; 0xfffffc50
    a1ec:	vst1.64	{d12-d13}, [r0]
    a1f0:	add	r0, r4, #48	; 0x30
    a1f4:	str	r0, [fp, #-948]	; 0xfffffc4c
    a1f8:	vst1.64	{d14-d15}, [r0]
    a1fc:	mov	r0, r4
    a200:	vst1.64	{d8-d9}, [r0], r8
    a204:	str	r9, [fp, #-492]	; 0xfffffe14
    a208:	str	r9, [r0]
    a20c:	mov	r0, sl
    a210:	bl	b150 <rb_sha512_process_bytes>
    a214:	mov	r0, r7
    a218:	mov	r1, r6
    a21c:	mov	r2, r4
    a220:	bl	b150 <rb_sha512_process_bytes>
    a224:	sub	r9, fp, #920	; 0x398
    a228:	mov	r1, #0
    a22c:	vmov.i32	q8, #0	; 0x00000000
    a230:	mov	r0, r9
    a234:	mov	r2, r9
    a238:	vst1.64	{d8-d9}, [r0], r8
    a23c:	str	r1, [fp, #-836]	; 0xfffffcbc
    a240:	str	r1, [r0]
    a244:	add	r0, r9, #16
    a248:	mov	r1, r5
    a24c:	str	r0, [fp, #-968]	; 0xfffffc38
    a250:	vst1.64	{d10-d11}, [r0]
    a254:	add	r0, r9, #32
    a258:	str	r0, [fp, #-956]	; 0xfffffc44
    a25c:	vst1.64	{d12-d13}, [r0]
    a260:	add	r0, r9, #48	; 0x30
    a264:	str	r0, [fp, #-972]	; 0xfffffc34
    a268:	vst1.64	{d14-d15}, [r0]
    a26c:	add	r0, r9, #64	; 0x40
    a270:	str	r0, [fp, #-976]	; 0xfffffc30
    a274:	vst1.64	{d16-d17}, [r0]
    a278:	mov	r0, sl
    a27c:	bl	b150 <rb_sha512_process_bytes>
    a280:	mov	r0, r7
    a284:	mov	r1, r6
    a288:	mov	r2, r9
    a28c:	str	r7, [fp, #-964]	; 0xfffffc3c
    a290:	bl	b150 <rb_sha512_process_bytes>
    a294:	mov	r0, sl
    a298:	mov	r1, r5
    a29c:	mov	r2, r9
    a2a0:	bl	b150 <rb_sha512_process_bytes>
    a2a4:	sub	r1, fp, #168	; 0xa8
    a2a8:	mov	r0, r9
    a2ac:	bl	b310 <rb_sha512_finish_ctx>
    a2b0:	cmp	r5, #65	; 0x41
    a2b4:	mov	r1, r5
    a2b8:	str	r6, [fp, #-952]	; 0xfffffc48
    a2bc:	bcc	a2fc <rb_sha512_crypt_r+0x2bc>
    a2c0:	sub	r0, r5, #65	; 0x41
    a2c4:	sub	r4, fp, #168	; 0xa8
    a2c8:	sub	r7, fp, #576	; 0x240
    a2cc:	mov	r6, r5
    a2d0:	bic	r8, r0, #63	; 0x3f
    a2d4:	mov	r0, r4
    a2d8:	mov	r1, #64	; 0x40
    a2dc:	mov	r2, r7
    a2e0:	bl	b150 <rb_sha512_process_bytes>
    a2e4:	sub	r6, r6, #64	; 0x40
    a2e8:	cmp	r6, #64	; 0x40
    a2ec:	bhi	a2d4 <rb_sha512_crypt_r+0x294>
    a2f0:	ldr	r6, [fp, #-952]	; 0xfffffc48
    a2f4:	sub	r0, r5, #64	; 0x40
    a2f8:	sub	r1, r0, r8
    a2fc:	sub	r0, fp, #168	; 0xa8
    a300:	sub	r2, fp, #576	; 0x240
    a304:	bl	b150 <rb_sha512_process_bytes>
    a308:	cmp	r5, #0
    a30c:	str	r5, [fp, #-924]	; 0xfffffc64
    a310:	beq	a368 <rb_sha512_crypt_r+0x328>
    a314:	clz	r0, r5
    a318:	mov	r6, r5
    a31c:	sub	r4, fp, #576	; 0x240
    a320:	mov	r5, #0
    a324:	sub	r7, fp, #168	; 0xa8
    a328:	lsr	r8, r0, #5
    a32c:	tst	r6, #1
    a330:	bne	a340 <rb_sha512_crypt_r+0x300>
    a334:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a338:	mov	r0, sl
    a33c:	b	a348 <rb_sha512_crypt_r+0x308>
    a340:	mov	r0, r7
    a344:	mov	r1, #64	; 0x40
    a348:	mov	r2, r4
    a34c:	bl	b150 <rb_sha512_process_bytes>
    a350:	lsr	r0, r6, #1
    a354:	cmp	r5, r6, lsr #1
    a358:	mov	r6, r0
    a35c:	bne	a32c <rb_sha512_crypt_r+0x2ec>
    a360:	ldr	r6, [fp, #-952]	; 0xfffffc48
    a364:	b	a36c <rb_sha512_crypt_r+0x32c>
    a368:	mov	r8, #1
    a36c:	sub	r0, fp, #576	; 0x240
    a370:	sub	r1, fp, #168	; 0xa8
    a374:	bl	b310 <rb_sha512_finish_ctx>
    a378:	add	r0, pc, #336	; 0x150
    a37c:	mov	r7, #0
    a380:	cmp	r8, #0
    a384:	vld1.64	{d16-d17}, [r0 :128]
    a388:	add	r0, pc, #368	; 0x170
    a38c:	add	r1, pc, #348	; 0x15c
    a390:	vld1.64	{d20-d21}, [r0 :128]
    a394:	vld1.64	{d18-d19}, [r1 :128]
    a398:	vst1.64	{d16-d17}, [r9]
    a39c:	add	r0, pc, #316	; 0x13c
    a3a0:	ldr	r5, [fp, #-976]	; 0xfffffc30
    a3a4:	vld1.64	{d16-d17}, [r0 :128]
    a3a8:	ldr	r0, [fp, #-968]	; 0xfffffc38
    a3ac:	mov	r1, r5
    a3b0:	vst1.64	{d18-d19}, [r0]
    a3b4:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a3b8:	vst1.64	{d20-d21}, [r0]
    a3bc:	ldr	r0, [fp, #-972]	; 0xfffffc34
    a3c0:	vst1.64	{d16-d17}, [r0]
    a3c4:	vmov.i32	q8, #0	; 0x00000000
    a3c8:	mov	r0, #20
    a3cc:	str	r7, [r5, #16]
    a3d0:	vst1.64	{d16-d17}, [r1], r0
    a3d4:	str	r7, [r1]
    a3d8:	beq	a404 <rb_sha512_crypt_r+0x3c4>
    a3dc:	sub	r0, fp, #920	; 0x398
    a3e0:	sub	r1, fp, #232	; 0xe8
    a3e4:	bl	b310 <rb_sha512_finish_ctx>
    a3e8:	ldr	r0, [fp, #-924]	; 0xfffffc64
    a3ec:	add	r0, r0, #7
    a3f0:	bic	r0, r0, #7
    a3f4:	sub	r0, sp, r0
    a3f8:	mov	sp, r0
    a3fc:	str	r0, [fp, #-928]	; 0xfffffc60
    a400:	b	a51c <rb_sha512_crypt_r+0x4dc>
    a404:	ldr	r5, [fp, #-924]	; 0xfffffc64
    a408:	sub	r7, fp, #920	; 0x398
    a40c:	mov	r4, r5
    a410:	mov	r0, sl
    a414:	mov	r1, r5
    a418:	mov	r2, r7
    a41c:	bl	b150 <rb_sha512_process_bytes>
    a420:	subs	r4, r4, #1
    a424:	bne	a410 <rb_sha512_crypt_r+0x3d0>
    a428:	sub	r8, fp, #232	; 0xe8
    a42c:	sub	r0, fp, #920	; 0x398
    a430:	mov	sl, r5
    a434:	mov	r1, r8
    a438:	bl	b310 <rb_sha512_finish_ctx>
    a43c:	add	r0, r5, #7
    a440:	bic	r0, r0, #7
    a444:	sub	ip, sp, r0
    a448:	mov	sp, ip
    a44c:	cmp	r5, #64	; 0x40
    a450:	str	ip, [fp, #-928]	; 0xfffffc60
    a454:	bcc	a510 <rb_sha512_crypt_r+0x4d0>
    a458:	sub	r0, sl, #64	; 0x40
    a45c:	mov	r3, #0
    a460:	add	r7, r8, #32
    a464:	mov	r5, #48	; 0x30
    a468:	add	r4, r8, #16
    a46c:	bic	lr, r0, #63	; 0x3f
    a470:	str	r0, [fp, #-1000]	; 0xfffffc18
    a474:	add	r0, ip, lr
    a478:	add	r0, r0, #64	; 0x40
    a47c:	mov	r6, r8
    a480:	vld1.64	{d18-d19}, [r7]
    a484:	sub	r1, ip, r3
    a488:	vld1.64	{d20-d21}, [r4]
    a48c:	sub	r3, r3, #64	; 0x40
    a490:	vld1.64	{d16-d17}, [r6], r5
    a494:	add	r2, r1, #32
    a498:	vst1.64	{d18-d19}, [r2]
    a49c:	add	r2, r1, #16
    a4a0:	vld1.64	{d22-d23}, [r6]
    a4a4:	vst1.64	{d16-d17}, [r1], r5
    a4a8:	vst1.64	{d20-d21}, [r2]
    a4ac:	vst1.64	{d22-d23}, [r1]
    a4b0:	add	r1, sl, r3
    a4b4:	cmp	r1, #63	; 0x3f
    a4b8:	bhi	a47c <rb_sha512_crypt_r+0x43c>
    a4bc:	ldr	r1, [fp, #-1000]	; 0xfffffc18
    a4c0:	ldr	r6, [fp, #-952]	; 0xfffffc48
    a4c4:	sub	r7, r1, lr
    a4c8:	b	a518 <rb_sha512_crypt_r+0x4d8>
    a4cc:	nop	{0}
    a4d0:	.word	0xf3bcc908
    a4d4:	.word	0x6a09e667
    a4d8:	.word	0x84caa73b
    a4dc:	.word	0xbb67ae85
    a4e0:	.word	0xfb41bd6b
    a4e4:	.word	0x1f83d9ab
    a4e8:	.word	0x137e2179
    a4ec:	.word	0x5be0cd19
    a4f0:	.word	0xfe94f82b
    a4f4:	.word	0x3c6ef372
    a4f8:	.word	0x5f1d36f1
    a4fc:	.word	0xa54ff53a
    a500:	.word	0xade682d1
    a504:	.word	0x510e527f
    a508:	.word	0x2b3e6c1f
    a50c:	.word	0x9b05688c
    a510:	mov	r0, ip
    a514:	mov	r7, sl
    a518:	ldr	r5, [fp, #-976]	; 0xfffffc30
    a51c:	sub	r1, fp, #232	; 0xe8
    a520:	mov	r2, r7
    a524:	bl	50a0 <memcpy@plt>
    a528:	sub	r0, pc, #96	; 0x60
    a52c:	mov	r4, #0
    a530:	vld1.64	{d16-d17}, [r0 :128]
    a534:	sub	r0, pc, #76	; 0x4c
    a538:	vld1.64	{d18-d19}, [r0 :128]
    a53c:	vst1.64	{d16-d17}, [r9]
    a540:	sub	r0, pc, #72	; 0x48
    a544:	vld1.64	{d16-d17}, [r0 :128]
    a548:	ldr	r0, [fp, #-968]	; 0xfffffc38
    a54c:	vst1.64	{d18-d19}, [r0]
    a550:	sub	r0, pc, #120	; 0x78
    a554:	vld1.64	{d18-d19}, [r0 :128]
    a558:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a55c:	vst1.64	{d16-d17}, [r0]
    a560:	ldr	r0, [fp, #-972]	; 0xfffffc34
    a564:	vmov.i32	q8, #0	; 0x00000000
    a568:	vst1.64	{d18-d19}, [r0]
    a56c:	mov	r0, #20
    a570:	str	r4, [r5, #16]
    a574:	vst1.64	{d16-d17}, [r5], r0
    a578:	str	r4, [r5]
    a57c:	ldr	r5, [fp, #-964]	; 0xfffffc3c
    a580:	mov	r0, r5
    a584:	mov	r1, r6
    a588:	mov	r2, r9
    a58c:	bl	b150 <rb_sha512_process_bytes>
    a590:	ldrb	r0, [fp, #-168]	; 0xffffff58
    a594:	add	r4, r4, #1
    a598:	add	r0, r0, #16
    a59c:	cmp	r4, r0
    a5a0:	bcc	a580 <rb_sha512_crypt_r+0x540>
    a5a4:	sub	r8, fp, #232	; 0xe8
    a5a8:	sub	r0, fp, #920	; 0x398
    a5ac:	mov	r1, r8
    a5b0:	bl	b310 <rb_sha512_finish_ctx>
    a5b4:	add	r0, r6, #7
    a5b8:	bic	r0, r0, #7
    a5bc:	sub	r0, sp, r0
    a5c0:	mov	sp, r0
    a5c4:	cmp	r6, #64	; 0x40
    a5c8:	sub	r9, fp, #576	; 0x240
    a5cc:	bcc	a63c <rb_sha512_crypt_r+0x5fc>
    a5d0:	ldr	r6, [fp, #-996]	; 0xfffffc1c
    a5d4:	mvn	r1, #64	; 0x40
    a5d8:	mov	lr, #48	; 0x30
    a5dc:	add	r3, r8, #16
    a5e0:	mov	r7, #64	; 0x40
    a5e4:	mov	r4, r0
    a5e8:	mvn	r2, r6
    a5ec:	cmn	r2, #17
    a5f0:	mvnls	r2, #16
    a5f4:	sub	ip, r1, r2
    a5f8:	add	r1, r8, #32
    a5fc:	mov	r5, r8
    a600:	vld1.64	{d18-d19}, [r1]
    a604:	vld1.64	{d20-d21}, [r3]
    a608:	add	r2, r4, #32
    a60c:	sub	r6, r6, #64	; 0x40
    a610:	vld1.8	{d16-d17}, [r5], lr
    a614:	cmp	r6, #63	; 0x3f
    a618:	vst1.8	{d18-d19}, [r2]
    a61c:	add	r2, r4, #16
    a620:	vld1.64	{d22-d23}, [r5]
    a624:	vst1.8	{d20-d21}, [r2]
    a628:	add	r2, r4, #48	; 0x30
    a62c:	vst1.8	{d16-d17}, [r4], r7
    a630:	vst1.8	{d22-d23}, [r2]
    a634:	bhi	a5fc <rb_sha512_crypt_r+0x5bc>
    a638:	add	r6, ip, #64	; 0x40
    a63c:	sub	r1, fp, #232	; 0xe8
    a640:	mov	r2, r6
    a644:	str	r0, [fp, #-956]	; 0xfffffc44
    a648:	bl	50a0 <memcpy@plt>
    a64c:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    a650:	cmp	r0, #0
    a654:	beq	a79c <rb_sha512_crypt_r+0x75c>
    a658:	mov	r6, #0
    a65c:	vmov.i32	q4, #0	; 0x00000000
    a660:	sub	r5, fp, #168	; 0xa8
    a664:	mov	r8, #0
    a668:	sub	r0, pc, #416	; 0x1a0
    a66c:	mov	r2, r9
    a670:	ands	sl, r8, #1
    a674:	vld1.64	{d16-d17}, [r0 :128]
    a678:	sub	r0, pc, #384	; 0x180
    a67c:	sub	r1, pc, #404	; 0x194
    a680:	vld1.64	{d20-d21}, [r0 :128]
    a684:	vld1.64	{d18-d19}, [r1 :128]
    a688:	mov	r1, #20
    a68c:	vst1.64	{d16-d17}, [r9]
    a690:	sub	r0, pc, #440	; 0x1b8
    a694:	vld1.64	{d16-d17}, [r0 :128]
    a698:	ldr	r0, [fp, #-940]	; 0xfffffc54
    a69c:	vst1.64	{d18-d19}, [r0]
    a6a0:	ldr	r0, [fp, #-944]	; 0xfffffc50
    a6a4:	vst1.64	{d20-d21}, [r0]
    a6a8:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    a6ac:	vst1.64	{d16-d17}, [r0]
    a6b0:	ldr	r0, [fp, #-936]	; 0xfffffc58
    a6b4:	str	r6, [r0, #16]
    a6b8:	vst1.64	{d8-d9}, [r0], r1
    a6bc:	str	r6, [r0]
    a6c0:	movw	r0, #18725	; 0x4925
    a6c4:	movt	r0, #9362	; 0x2492
    a6c8:	umull	r0, r1, r8, r0
    a6cc:	sub	r0, r8, r1
    a6d0:	add	r7, r1, r0, lsr #1
    a6d4:	lsr	r0, r7, #2
    a6d8:	lsl	r9, r0, #3
    a6dc:	movw	r0, #43691	; 0xaaab
    a6e0:	movt	r0, #43690	; 0xaaaa
    a6e4:	umull	r0, r1, r8, r0
    a6e8:	lsr	r0, r1, #1
    a6ec:	add	r4, r0, r0, lsl #1
    a6f0:	beq	a700 <rb_sha512_crypt_r+0x6c0>
    a6f4:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a6f8:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a6fc:	b	a708 <rb_sha512_crypt_r+0x6c8>
    a700:	mov	r0, r5
    a704:	mov	r1, #64	; 0x40
    a708:	bl	b150 <rb_sha512_process_bytes>
    a70c:	sub	r7, r9, r7, lsr #2
    a710:	cmp	r4, r8
    a714:	sub	r9, fp, #576	; 0x240
    a718:	bne	a740 <rb_sha512_crypt_r+0x700>
    a71c:	cmp	r7, r8
    a720:	bne	a758 <rb_sha512_crypt_r+0x718>
    a724:	cmp	sl, #0
    a728:	beq	a770 <rb_sha512_crypt_r+0x730>
    a72c:	mov	r0, r5
    a730:	mov	r1, #64	; 0x40
    a734:	b	a778 <rb_sha512_crypt_r+0x738>
    a738:	.word	0x0000fc7c
    a73c:	.word	0x0000fc64
    a740:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a744:	ldr	r1, [fp, #-952]	; 0xfffffc48
    a748:	mov	r2, r9
    a74c:	bl	b150 <rb_sha512_process_bytes>
    a750:	cmp	r7, r8
    a754:	beq	a724 <rb_sha512_crypt_r+0x6e4>
    a758:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a75c:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a760:	mov	r2, r9
    a764:	bl	b150 <rb_sha512_process_bytes>
    a768:	cmp	sl, #0
    a76c:	bne	a72c <rb_sha512_crypt_r+0x6ec>
    a770:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a774:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a778:	mov	r2, r9
    a77c:	bl	b150 <rb_sha512_process_bytes>
    a780:	mov	r0, r9
    a784:	mov	r1, r5
    a788:	bl	b310 <rb_sha512_finish_ctx>
    a78c:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    a790:	add	r8, r8, #1
    a794:	cmp	r0, r8
    a798:	bne	a668 <rb_sha512_crypt_r+0x628>
    a79c:	ldr	r6, [fp, #-988]	; 0xfffffc24
    a7a0:	ldr	r4, [fp, #-960]	; 0xfffffc40
    a7a4:	mov	r1, #0
    a7a8:	bic	r7, r6, r6, asr #31
    a7ac:	mov	r0, r4
    a7b0:	mov	r2, r7
    a7b4:	bl	4ee4 <memset@plt>
    a7b8:	ldr	r1, [pc, #2432]	; b140 <rb_sha512_crypt_r+0x1100>
    a7bc:	mov	r0, r4
    a7c0:	mov	r2, r7
    a7c4:	add	r1, pc, r1
    a7c8:	bl	4e3c <strncpy@plt>
    a7cc:	mov	r0, r4
    a7d0:	bl	507c <strlen@plt>
    a7d4:	adds	r5, r4, r0
    a7d8:	ldr	r0, [fp, #-992]	; 0xfffffc20
    a7dc:	sub	r9, r6, #3
    a7e0:	addeq	r5, r4, r7
    a7e4:	cmp	r0, #0
    a7e8:	beq	a820 <rb_sha512_crypt_r+0x7e0>
    a7ec:	sub	sp, sp, #8
    a7f0:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    a7f4:	bic	r1, r9, r9, asr #31
    a7f8:	str	r0, [sp]
    a7fc:	mov	r0, r5
    a800:	ldr	r2, [pc, #2364]	; b144 <rb_sha512_crypt_r+0x1104>
    a804:	ldr	r3, [pc, #2364]	; b148 <rb_sha512_crypt_r+0x1108>
    a808:	add	r2, pc, r2
    a80c:	add	r3, pc, r3
    a810:	bl	53f4 <snprintf@plt>
    a814:	add	sp, sp, #8
    a818:	sub	r9, r9, r0
    a81c:	add	r5, r5, r0
    a820:	ldr	sl, [fp, #-952]	; 0xfffffc48
    a824:	bic	r4, r9, r9, asr #31
    a828:	mov	r0, #0
    a82c:	mov	r1, #0
    a830:	str	r0, [fp, #-932]	; 0xfffffc5c
    a834:	mov	r0, r5
    a838:	cmp	r4, sl
    a83c:	mov	r7, sl
    a840:	movcc	r7, r4
    a844:	mov	r2, r7
    a848:	bl	4ee4 <memset@plt>
    a84c:	ldr	r1, [fp, #-964]	; 0xfffffc3c
    a850:	mov	r0, r5
    a854:	mov	r2, r7
    a858:	bl	4e3c <strncpy@plt>
    a85c:	ldr	r6, [fp, #-960]	; 0xfffffc40
    a860:	mov	r0, r6
    a864:	bl	507c <strlen@plt>
    a868:	adds	r5, r6, r0
    a86c:	sub	r0, r9, r7
    a870:	addeq	r5, r6, sl
    a874:	cmp	r0, #1
    a878:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    a87c:	mov	r0, #36	; 0x24
    a880:	strb	r0, [r5]
    a884:	beq	afb4 <rb_sha512_crypt_r+0xf74>
    a888:	ldr	r0, [fp, #-996]	; 0xfffffc1c
    a88c:	mvn	lr, r4
    a890:	ldrb	r2, [fp, #-147]	; 0xffffff6d
    a894:	ldrb	r3, [fp, #-126]	; 0xffffff82
    a898:	mvn	r8, r0
    a89c:	lsl	r2, r2, #8
    a8a0:	cmp	lr, r8
    a8a4:	mov	r0, r8
    a8a8:	movhi	r0, lr
    a8ac:	cmn	r0, #17
    a8b0:	mvnls	r0, #16
    a8b4:	add	r4, r9, r0
    a8b8:	ldrb	r0, [fp, #-168]	; 0xffffff58
    a8bc:	ldr	ip, [pc, #2184]	; b14c <rb_sha512_crypt_r+0x110c>
    a8c0:	orr	r0, r2, r0, lsl #16
    a8c4:	mov	r2, #0
    a8c8:	add	ip, pc, ip
    a8cc:	orr	r0, r0, r3
    a8d0:	add	r3, r5, #1
    a8d4:	and	r7, r0, #63	; 0x3f
    a8d8:	add	r1, r4, r2
    a8dc:	ldrb	r7, [ip, r7]
    a8e0:	cmp	r1, #2
    a8e4:	strb	r7, [r3, -r2]
    a8e8:	sub	r7, r2, #1
    a8ec:	blt	a904 <rb_sha512_crypt_r+0x8c4>
    a8f0:	add	r1, r2, #4
    a8f4:	lsr	r0, r0, #6
    a8f8:	mov	r2, r7
    a8fc:	cmp	r1, #1
    a900:	bhi	a8d4 <rb_sha512_crypt_r+0x894>
    a904:	cmp	lr, r8
    a908:	mov	r1, r8
    a90c:	mvn	r0, #16
    a910:	movhi	r1, lr
    a914:	cmn	r1, #17
    a918:	movls	r1, r0
    a91c:	add	r1, r9, r1
    a920:	add	r1, r1, r7
    a924:	add	r1, r1, #1
    a928:	cmp	r1, #2
    a92c:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    a930:	cmp	lr, r8
    a934:	mov	r1, r8
    a938:	ldrb	r2, [fp, #-125]	; 0xffffff83
    a93c:	movhi	r1, lr
    a940:	cmn	r1, #17
    a944:	movhi	r0, r1
    a948:	ldrb	r1, [fp, #-146]	; 0xffffff6e
    a94c:	add	r4, r9, r0
    a950:	ldrb	r0, [fp, #-167]	; 0xffffff59
    a954:	lsl	r2, r2, #8
    a958:	orr	r1, r2, r1, lsl #16
    a95c:	mvn	r2, #0
    a960:	orr	r0, r1, r0
    a964:	and	r1, r0, #63	; 0x3f
    a968:	sub	r6, r5, r7
    a96c:	ldrb	r1, [ip, r1]
    a970:	strb	r1, [r6, #1]
    a974:	add	r1, r4, r7
    a978:	sub	r7, r7, #1
    a97c:	cmp	r1, #2
    a980:	blt	a998 <rb_sha512_crypt_r+0x958>
    a984:	add	r1, r2, #5
    a988:	sub	r2, r2, #1
    a98c:	lsr	r0, r0, #6
    a990:	cmp	r1, #1
    a994:	bhi	a964 <rb_sha512_crypt_r+0x924>
    a998:	cmp	lr, r8
    a99c:	mov	r1, r8
    a9a0:	mvn	r0, #16
    a9a4:	ldr	sl, [fp, #-952]	; 0xfffffc48
    a9a8:	movhi	r1, lr
    a9ac:	cmn	r1, #17
    a9b0:	movls	r1, r0
    a9b4:	add	r1, r9, r1
    a9b8:	add	r1, r1, r7
    a9bc:	add	r1, r1, #1
    a9c0:	cmp	r1, #2
    a9c4:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    a9c8:	cmp	lr, r8
    a9cc:	mov	r1, r8
    a9d0:	ldrb	r2, [fp, #-124]	; 0xffffff84
    a9d4:	movhi	r1, lr
    a9d8:	cmn	r1, #17
    a9dc:	movhi	r0, r1
    a9e0:	ldrb	r1, [fp, #-145]	; 0xffffff6f
    a9e4:	add	r5, r9, r0
    a9e8:	ldrb	r0, [fp, #-166]	; 0xffffff5a
    a9ec:	lsl	r0, r0, #8
    a9f0:	orr	r0, r0, r2, lsl #16
    a9f4:	mov	r2, #4
    a9f8:	orr	r0, r0, r1
    a9fc:	and	r1, r0, #63	; 0x3f
    aa00:	ldrb	r1, [ip, r1]
    aa04:	strb	r1, [r3, -r7]
    aa08:	add	r1, r5, r7
    aa0c:	sub	r7, r7, #1
    aa10:	cmp	r1, #2
    aa14:	blt	aa24 <rb_sha512_crypt_r+0x9e4>
    aa18:	lsr	r0, r0, #6
    aa1c:	subs	r2, r2, #1
    aa20:	bhi	a9fc <rb_sha512_crypt_r+0x9bc>
    aa24:	cmp	lr, r8
    aa28:	movhi	r8, lr
    aa2c:	cmn	r8, #17
    aa30:	mvnls	r8, #16
    aa34:	add	r0, r9, r8
    aa38:	add	r0, r0, r7
    aa3c:	add	r1, r0, #1
    aa40:	cmp	r1, #2
    aa44:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    aa48:	sub	r2, r3, r7
    aa4c:	ldrb	r3, [fp, #-144]	; 0xffffff70
    aa50:	ldrb	r0, [fp, #-165]	; 0xffffff5b
    aa54:	ldrb	r7, [fp, #-123]	; 0xffffff85
    aa58:	lsl	r3, r3, #8
    aa5c:	orr	r0, r3, r0, lsl #16
    aa60:	mov	r3, #4
    aa64:	orr	r0, r0, r7
    aa68:	and	r7, r0, #63	; 0x3f
    aa6c:	sub	r1, r1, #1
    aa70:	ldrb	r7, [ip, r7]
    aa74:	cmp	r1, #2
    aa78:	strb	r7, [r2], #1
    aa7c:	blt	aa8c <rb_sha512_crypt_r+0xa4c>
    aa80:	lsr	r0, r0, #6
    aa84:	subs	r3, r3, #1
    aa88:	bhi	aa68 <rb_sha512_crypt_r+0xa28>
    aa8c:	cmp	r1, #2
    aa90:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    aa94:	ldrb	r7, [fp, #-122]	; 0xffffff86
    aa98:	ldrb	r3, [fp, #-143]	; 0xffffff71
    aa9c:	ldrb	r0, [fp, #-164]	; 0xffffff5c
    aaa0:	lsl	r7, r7, #8
    aaa4:	orr	r3, r7, r3, lsl #16
    aaa8:	orr	r0, r3, r0
    aaac:	mov	r3, #4
    aab0:	and	r7, r0, #63	; 0x3f
    aab4:	sub	r1, r1, #1
    aab8:	ldrb	r7, [ip, r7]
    aabc:	cmp	r1, #2
    aac0:	strb	r7, [r2], #1
    aac4:	blt	aad4 <rb_sha512_crypt_r+0xa94>
    aac8:	lsr	r0, r0, #6
    aacc:	subs	r3, r3, #1
    aad0:	bhi	aab0 <rb_sha512_crypt_r+0xa70>
    aad4:	cmp	r1, #2
    aad8:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    aadc:	ldrb	r0, [fp, #-163]	; 0xffffff5d
    aae0:	ldrb	r7, [fp, #-121]	; 0xffffff87
    aae4:	ldrb	r3, [fp, #-142]	; 0xffffff72
    aae8:	lsl	r0, r0, #8
    aaec:	orr	r0, r0, r7, lsl #16
    aaf0:	orr	r0, r0, r3
    aaf4:	mov	r3, #4
    aaf8:	and	r7, r0, #63	; 0x3f
    aafc:	sub	r1, r1, #1
    ab00:	ldrb	r7, [ip, r7]
    ab04:	cmp	r1, #2
    ab08:	strb	r7, [r2], #1
    ab0c:	blt	ab1c <rb_sha512_crypt_r+0xadc>
    ab10:	lsr	r0, r0, #6
    ab14:	subs	r3, r3, #1
    ab18:	bhi	aaf8 <rb_sha512_crypt_r+0xab8>
    ab1c:	cmp	r1, #2
    ab20:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    ab24:	ldrb	r3, [fp, #-141]	; 0xffffff73
    ab28:	ldrb	r0, [fp, #-162]	; 0xffffff5e
    ab2c:	ldrb	r7, [fp, #-120]	; 0xffffff88
    ab30:	lsl	r3, r3, #8
    ab34:	orr	r0, r3, r0, lsl #16
    ab38:	mov	r3, #4
    ab3c:	orr	r0, r0, r7
    ab40:	and	r7, r0, #63	; 0x3f
    ab44:	sub	r1, r1, #1
    ab48:	ldrb	r7, [ip, r7]
    ab4c:	cmp	r1, #2
    ab50:	strb	r7, [r2], #1
    ab54:	blt	ab64 <rb_sha512_crypt_r+0xb24>
    ab58:	lsr	r0, r0, #6
    ab5c:	subs	r3, r3, #1
    ab60:	bhi	ab40 <rb_sha512_crypt_r+0xb00>
    ab64:	cmp	r1, #2
    ab68:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    ab6c:	ldrb	r7, [fp, #-119]	; 0xffffff89
    ab70:	ldrb	r3, [fp, #-140]	; 0xffffff74
    ab74:	ldrb	r0, [fp, #-161]	; 0xffffff5f
    ab78:	lsl	r7, r7, #8
    ab7c:	orr	r3, r7, r3, lsl #16
    ab80:	orr	r0, r3, r0
    ab84:	mov	r3, #4
    ab88:	and	r7, r0, #63	; 0x3f
    ab8c:	sub	r1, r1, #1
    ab90:	ldrb	r7, [ip, r7]
    ab94:	cmp	r1, #2
    ab98:	strb	r7, [r2], #1
    ab9c:	blt	abac <rb_sha512_crypt_r+0xb6c>
    aba0:	lsr	r0, r0, #6
    aba4:	subs	r3, r3, #1
    aba8:	bhi	ab88 <rb_sha512_crypt_r+0xb48>
    abac:	cmp	r1, #2
    abb0:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    abb4:	ldrb	r0, [fp, #-160]	; 0xffffff60
    abb8:	ldrb	r7, [fp, #-118]	; 0xffffff8a
    abbc:	ldrb	r3, [fp, #-139]	; 0xffffff75
    abc0:	lsl	r0, r0, #8
    abc4:	orr	r0, r0, r7, lsl #16
    abc8:	orr	r0, r0, r3
    abcc:	mov	r3, #4
    abd0:	and	r7, r0, #63	; 0x3f
    abd4:	sub	r1, r1, #1
    abd8:	ldrb	r7, [ip, r7]
    abdc:	cmp	r1, #2
    abe0:	strb	r7, [r2], #1
    abe4:	blt	abf4 <rb_sha512_crypt_r+0xbb4>
    abe8:	lsr	r0, r0, #6
    abec:	subs	r3, r3, #1
    abf0:	bhi	abd0 <rb_sha512_crypt_r+0xb90>
    abf4:	cmp	r1, #2
    abf8:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    abfc:	ldrb	r3, [fp, #-138]	; 0xffffff76
    ac00:	ldrb	r0, [fp, #-159]	; 0xffffff61
    ac04:	ldrb	r7, [fp, #-117]	; 0xffffff8b
    ac08:	lsl	r3, r3, #8
    ac0c:	orr	r0, r3, r0, lsl #16
    ac10:	mov	r3, #4
    ac14:	orr	r0, r0, r7
    ac18:	and	r7, r0, #63	; 0x3f
    ac1c:	sub	r1, r1, #1
    ac20:	ldrb	r7, [ip, r7]
    ac24:	cmp	r1, #2
    ac28:	strb	r7, [r2], #1
    ac2c:	blt	ac3c <rb_sha512_crypt_r+0xbfc>
    ac30:	lsr	r0, r0, #6
    ac34:	subs	r3, r3, #1
    ac38:	bhi	ac18 <rb_sha512_crypt_r+0xbd8>
    ac3c:	cmp	r1, #2
    ac40:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    ac44:	ldrb	r7, [fp, #-116]	; 0xffffff8c
    ac48:	ldrb	r3, [fp, #-137]	; 0xffffff77
    ac4c:	ldrb	r0, [fp, #-158]	; 0xffffff62
    ac50:	lsl	r7, r7, #8
    ac54:	orr	r3, r7, r3, lsl #16
    ac58:	orr	r0, r3, r0
    ac5c:	mov	r3, #4
    ac60:	and	r7, r0, #63	; 0x3f
    ac64:	sub	r1, r1, #1
    ac68:	ldrb	r7, [ip, r7]
    ac6c:	cmp	r1, #2
    ac70:	strb	r7, [r2], #1
    ac74:	blt	ac84 <rb_sha512_crypt_r+0xc44>
    ac78:	lsr	r0, r0, #6
    ac7c:	subs	r3, r3, #1
    ac80:	bhi	ac60 <rb_sha512_crypt_r+0xc20>
    ac84:	cmp	r1, #2
    ac88:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    ac8c:	ldrb	r0, [fp, #-157]	; 0xffffff63
    ac90:	ldrb	r7, [fp, #-115]	; 0xffffff8d
    ac94:	ldrb	r3, [fp, #-136]	; 0xffffff78
    ac98:	lsl	r0, r0, #8
    ac9c:	orr	r0, r0, r7, lsl #16
    aca0:	orr	r0, r0, r3
    aca4:	mov	r3, #4
    aca8:	and	r7, r0, #63	; 0x3f
    acac:	sub	r1, r1, #1
    acb0:	ldrb	r7, [ip, r7]
    acb4:	cmp	r1, #2
    acb8:	strb	r7, [r2], #1
    acbc:	blt	accc <rb_sha512_crypt_r+0xc8c>
    acc0:	lsr	r0, r0, #6
    acc4:	subs	r3, r3, #1
    acc8:	bhi	aca8 <rb_sha512_crypt_r+0xc68>
    accc:	cmp	r1, #2
    acd0:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    acd4:	ldrb	r3, [fp, #-135]	; 0xffffff79
    acd8:	ldrb	r0, [fp, #-156]	; 0xffffff64
    acdc:	ldrb	r7, [fp, #-114]	; 0xffffff8e
    ace0:	lsl	r3, r3, #8
    ace4:	orr	r0, r3, r0, lsl #16
    ace8:	mov	r3, #4
    acec:	orr	r0, r0, r7
    acf0:	and	r7, r0, #63	; 0x3f
    acf4:	sub	r1, r1, #1
    acf8:	ldrb	r7, [ip, r7]
    acfc:	cmp	r1, #2
    ad00:	strb	r7, [r2], #1
    ad04:	blt	ad14 <rb_sha512_crypt_r+0xcd4>
    ad08:	lsr	r0, r0, #6
    ad0c:	subs	r3, r3, #1
    ad10:	bhi	acf0 <rb_sha512_crypt_r+0xcb0>
    ad14:	cmp	r1, #2
    ad18:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    ad1c:	ldrb	r7, [fp, #-113]	; 0xffffff8f
    ad20:	ldrb	r3, [fp, #-134]	; 0xffffff7a
    ad24:	ldrb	r0, [fp, #-155]	; 0xffffff65
    ad28:	lsl	r7, r7, #8
    ad2c:	orr	r3, r7, r3, lsl #16
    ad30:	orr	r0, r3, r0
    ad34:	mov	r3, #4
    ad38:	and	r7, r0, #63	; 0x3f
    ad3c:	sub	r1, r1, #1
    ad40:	ldrb	r7, [ip, r7]
    ad44:	cmp	r1, #2
    ad48:	strb	r7, [r2], #1
    ad4c:	blt	ad5c <rb_sha512_crypt_r+0xd1c>
    ad50:	lsr	r0, r0, #6
    ad54:	subs	r3, r3, #1
    ad58:	bhi	ad38 <rb_sha512_crypt_r+0xcf8>
    ad5c:	ldr	sl, [fp, #-952]	; 0xfffffc48
    ad60:	cmp	r1, #2
    ad64:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    ad68:	ldrb	r0, [fp, #-154]	; 0xffffff66
    ad6c:	ldrb	r7, [fp, #-112]	; 0xffffff90
    ad70:	ldrb	r3, [fp, #-133]	; 0xffffff7b
    ad74:	lsl	r0, r0, #8
    ad78:	orr	r0, r0, r7, lsl #16
    ad7c:	orr	r0, r0, r3
    ad80:	mov	r3, #4
    ad84:	and	r7, r0, #63	; 0x3f
    ad88:	sub	r1, r1, #1
    ad8c:	ldrb	r7, [ip, r7]
    ad90:	cmp	r1, #2
    ad94:	strb	r7, [r2], #1
    ad98:	blt	ada8 <rb_sha512_crypt_r+0xd68>
    ad9c:	lsr	r0, r0, #6
    ada0:	subs	r3, r3, #1
    ada4:	bhi	ad84 <rb_sha512_crypt_r+0xd44>
    ada8:	ldr	sl, [fp, #-952]	; 0xfffffc48
    adac:	cmp	r1, #2
    adb0:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    adb4:	ldrb	r3, [fp, #-132]	; 0xffffff7c
    adb8:	ldrb	r0, [fp, #-153]	; 0xffffff67
    adbc:	ldrb	r7, [fp, #-111]	; 0xffffff91
    adc0:	lsl	r3, r3, #8
    adc4:	orr	r0, r3, r0, lsl #16
    adc8:	mov	r3, #4
    adcc:	orr	r0, r0, r7
    add0:	and	r7, r0, #63	; 0x3f
    add4:	sub	r1, r1, #1
    add8:	ldrb	r7, [ip, r7]
    addc:	cmp	r1, #2
    ade0:	strb	r7, [r2], #1
    ade4:	blt	adf4 <rb_sha512_crypt_r+0xdb4>
    ade8:	lsr	r0, r0, #6
    adec:	subs	r3, r3, #1
    adf0:	bhi	add0 <rb_sha512_crypt_r+0xd90>
    adf4:	ldr	sl, [fp, #-952]	; 0xfffffc48
    adf8:	cmp	r1, #2
    adfc:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    ae00:	ldrb	r7, [fp, #-110]	; 0xffffff92
    ae04:	ldrb	r3, [fp, #-131]	; 0xffffff7d
    ae08:	ldrb	r0, [fp, #-152]	; 0xffffff68
    ae0c:	lsl	r7, r7, #8
    ae10:	orr	r3, r7, r3, lsl #16
    ae14:	orr	r0, r3, r0
    ae18:	mov	r3, #4
    ae1c:	and	r7, r0, #63	; 0x3f
    ae20:	sub	r1, r1, #1
    ae24:	ldrb	r7, [ip, r7]
    ae28:	cmp	r1, #2
    ae2c:	strb	r7, [r2], #1
    ae30:	blt	ae40 <rb_sha512_crypt_r+0xe00>
    ae34:	lsr	r0, r0, #6
    ae38:	subs	r3, r3, #1
    ae3c:	bhi	ae1c <rb_sha512_crypt_r+0xddc>
    ae40:	ldr	sl, [fp, #-952]	; 0xfffffc48
    ae44:	cmp	r1, #2
    ae48:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    ae4c:	ldrb	r0, [fp, #-151]	; 0xffffff69
    ae50:	ldrb	r7, [fp, #-109]	; 0xffffff93
    ae54:	ldrb	r3, [fp, #-130]	; 0xffffff7e
    ae58:	lsl	r0, r0, #8
    ae5c:	orr	r0, r0, r7, lsl #16
    ae60:	orr	r0, r0, r3
    ae64:	mov	r3, #4
    ae68:	and	r7, r0, #63	; 0x3f
    ae6c:	sub	r1, r1, #1
    ae70:	ldrb	r7, [ip, r7]
    ae74:	cmp	r1, #2
    ae78:	strb	r7, [r2], #1
    ae7c:	blt	ae8c <rb_sha512_crypt_r+0xe4c>
    ae80:	lsr	r0, r0, #6
    ae84:	subs	r3, r3, #1
    ae88:	bhi	ae68 <rb_sha512_crypt_r+0xe28>
    ae8c:	ldr	sl, [fp, #-952]	; 0xfffffc48
    ae90:	cmp	r1, #2
    ae94:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    ae98:	ldrb	r3, [fp, #-129]	; 0xffffff7f
    ae9c:	ldrb	r0, [fp, #-150]	; 0xffffff6a
    aea0:	ldrb	r7, [fp, #-108]	; 0xffffff94
    aea4:	lsl	r3, r3, #8
    aea8:	orr	r0, r3, r0, lsl #16
    aeac:	mov	r3, #4
    aeb0:	orr	r0, r0, r7
    aeb4:	and	r7, r0, #63	; 0x3f
    aeb8:	sub	r1, r1, #1
    aebc:	ldrb	r7, [ip, r7]
    aec0:	cmp	r1, #2
    aec4:	strb	r7, [r2], #1
    aec8:	blt	aed8 <rb_sha512_crypt_r+0xe98>
    aecc:	lsr	r0, r0, #6
    aed0:	subs	r3, r3, #1
    aed4:	bhi	aeb4 <rb_sha512_crypt_r+0xe74>
    aed8:	ldr	sl, [fp, #-952]	; 0xfffffc48
    aedc:	cmp	r1, #2
    aee0:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    aee4:	ldrb	r7, [fp, #-107]	; 0xffffff95
    aee8:	ldrb	r3, [fp, #-128]	; 0xffffff80
    aeec:	ldrb	r0, [fp, #-149]	; 0xffffff6b
    aef0:	lsl	r7, r7, #8
    aef4:	orr	r3, r7, r3, lsl #16
    aef8:	orr	r0, r3, r0
    aefc:	mov	r3, #4
    af00:	and	r7, r0, #63	; 0x3f
    af04:	sub	r1, r1, #1
    af08:	ldrb	r7, [ip, r7]
    af0c:	cmp	r1, #2
    af10:	strb	r7, [r2], #1
    af14:	blt	af24 <rb_sha512_crypt_r+0xee4>
    af18:	lsr	r0, r0, #6
    af1c:	subs	r3, r3, #1
    af20:	bhi	af00 <rb_sha512_crypt_r+0xec0>
    af24:	ldr	sl, [fp, #-952]	; 0xfffffc48
    af28:	cmp	r1, #2
    af2c:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    af30:	ldrb	r0, [fp, #-148]	; 0xffffff6c
    af34:	ldrb	r7, [fp, #-106]	; 0xffffff96
    af38:	ldrb	r3, [fp, #-127]	; 0xffffff81
    af3c:	lsl	r0, r0, #8
    af40:	orr	r0, r0, r7, lsl #16
    af44:	orr	r0, r0, r3
    af48:	mov	r3, #4
    af4c:	and	r7, r0, #63	; 0x3f
    af50:	sub	r1, r1, #1
    af54:	ldrb	r7, [ip, r7]
    af58:	cmp	r1, #2
    af5c:	strb	r7, [r2], #1
    af60:	blt	af70 <rb_sha512_crypt_r+0xf30>
    af64:	lsr	r0, r0, #6
    af68:	subs	r3, r3, #1
    af6c:	bhi	af4c <rb_sha512_crypt_r+0xf0c>
    af70:	ldr	sl, [fp, #-952]	; 0xfffffc48
    af74:	cmp	r1, #2
    af78:	blt	afb4 <rb_sha512_crypt_r+0xf74>
    af7c:	ldrb	r0, [fp, #-105]	; 0xffffff97
    af80:	mov	r3, #2
    af84:	and	r7, r0, #63	; 0x3f
    af88:	sub	r1, r1, #1
    af8c:	ldrb	r7, [ip, r7]
    af90:	cmp	r1, #2
    af94:	strb	r7, [r2], #1
    af98:	blt	afa8 <rb_sha512_crypt_r+0xf68>
    af9c:	lsr	r0, r0, #6
    afa0:	subs	r3, r3, #1
    afa4:	bhi	af84 <rb_sha512_crypt_r+0xf44>
    afa8:	ldr	sl, [fp, #-952]	; 0xfffffc48
    afac:	cmp	r1, #1
    afb0:	bgt	b0ec <rb_sha512_crypt_r+0x10ac>
    afb4:	bl	552c <__errno_location@plt>
    afb8:	mov	r1, #34	; 0x22
    afbc:	str	r1, [r0]
    afc0:	add	r0, pc, #312	; 0x138
    afc4:	sub	r5, fp, #576	; 0x240
    afc8:	vmov.i32	q4, #0	; 0x00000000
    afcc:	vld1.64	{d16-d17}, [r0 :128]
    afd0:	add	r0, pc, #344	; 0x158
    afd4:	add	r1, pc, #324	; 0x144
    afd8:	vld1.64	{d20-d21}, [r0 :128]
    afdc:	vld1.64	{d18-d19}, [r1 :128]
    afe0:	mov	r1, #20
    afe4:	vst1.64	{d16-d17}, [r5]
    afe8:	add	r0, pc, #288	; 0x120
    afec:	ldr	r2, [fp, #-936]	; 0xfffffc58
    aff0:	vld1.64	{d16-d17}, [r0 :128]
    aff4:	ldr	r0, [fp, #-940]	; 0xfffffc54
    aff8:	vst1.64	{d18-d19}, [r0]
    affc:	ldr	r0, [fp, #-944]	; 0xfffffc50
    b000:	vst1.64	{d20-d21}, [r0]
    b004:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    b008:	vst1.64	{d16-d17}, [r0]
    b00c:	mov	r0, #0
    b010:	str	r0, [r2, #16]
    b014:	vst1.64	{d8-d9}, [r2], r1
    b018:	sub	r1, fp, #168	; 0xa8
    b01c:	str	r0, [r2]
    b020:	mov	r0, r5
    b024:	bl	b310 <rb_sha512_finish_ctx>
    b028:	sub	r0, fp, #232	; 0xe8
    b02c:	ldr	r4, [fp, #-924]	; 0xfffffc64
    b030:	mov	r1, r0
    b034:	add	r0, r0, #32
    b038:	vst1.64	{d8-d9}, [r0]
    b03c:	add	r0, r1, #16
    b040:	vst1.64	{d8-d9}, [r0]
    b044:	mov	r0, #48	; 0x30
    b048:	vst1.64	{d8-d9}, [r1], r0
    b04c:	ldr	r0, [fp, #-928]	; 0xfffffc60
    b050:	mov	r2, r4
    b054:	vst1.64	{d8-d9}, [r1]
    b058:	mov	r1, #0
    b05c:	bl	4ee4 <memset@plt>
    b060:	ldr	r0, [fp, #-956]	; 0xfffffc44
    b064:	mov	r1, #0
    b068:	mov	r2, sl
    b06c:	bl	4ee4 <memset@plt>
    b070:	mov	r0, r5
    b074:	mov	r1, #0
    b078:	mov	r2, #344	; 0x158
    b07c:	bl	4ee4 <memset@plt>
    b080:	sub	r0, fp, #920	; 0x398
    b084:	mov	r1, #0
    b088:	mov	r2, #344	; 0x158
    b08c:	bl	4ee4 <memset@plt>
    b090:	ldr	r0, [fp, #-980]	; 0xfffffc2c
    b094:	cmp	r0, #0
    b098:	beq	b0a8 <rb_sha512_crypt_r+0x1068>
    b09c:	mov	r1, #0
    b0a0:	mov	r2, r4
    b0a4:	bl	4ee4 <memset@plt>
    b0a8:	ldr	r0, [fp, #-984]	; 0xfffffc28
    b0ac:	cmp	r0, #0
    b0b0:	beq	b0c0 <rb_sha512_crypt_r+0x1080>
    b0b4:	mov	r1, #0
    b0b8:	mov	r2, sl
    b0bc:	bl	4ee4 <memset@plt>
    b0c0:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    b0c4:	sub	sp, fp, #96	; 0x60
    b0c8:	vpop	{d8-d15}
    b0cc:	add	sp, sp, #4
    b0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0d4:	mov	r0, #0
    b0d8:	str	r0, [fp, #-992]	; 0xfffffc20
    b0dc:	movw	r0, #5000	; 0x1388
    b0e0:	str	r0, [fp, #-932]	; 0xfffffc5c
    b0e4:	b	a0f4 <rb_sha512_crypt_r+0xb4>
    b0e8:	.word	0x0000f766
    b0ec:	mov	r0, #0
    b0f0:	strb	r0, [r2]
    b0f4:	ldr	r0, [fp, #-960]	; 0xfffffc40
    b0f8:	str	r0, [fp, #-932]	; 0xfffffc5c
    b0fc:	b	afc0 <rb_sha512_crypt_r+0xf80>
    b100:	.word	0xf3bcc908
    b104:	.word	0x6a09e667
    b108:	.word	0x84caa73b
    b10c:	.word	0xbb67ae85
    b110:	.word	0xfb41bd6b
    b114:	.word	0x1f83d9ab
    b118:	.word	0x137e2179
    b11c:	.word	0x5be0cd19
    b120:	.word	0xfe94f82b
    b124:	.word	0x3c6ef372
    b128:	.word	0x5f1d36f1
    b12c:	.word	0xa54ff53a
    b130:	.word	0xade682d1
    b134:	.word	0x510e527f
    b138:	.word	0x2b3e6c1f
    b13c:	.word	0x9b05688c
    b140:	.word	0x0000f524
    b144:	.word	0x0000f05c
    b148:	.word	0x0000f4e0
    b14c:	.word	0x0000ef57

0000b150 <rb_sha512_process_bytes>:
    b150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b154:	add	fp, sp, #28
    b158:	sub	sp, sp, #12
    b15c:	mov	r9, r2
    b160:	mov	r8, r0
    b164:	mov	r4, r2
    b168:	mov	r5, r1
    b16c:	ldr	r6, [r9, #80]!	; 0x50
    b170:	ldr	r0, [r9, #4]
    b174:	orrs	r0, r6, r0
    b178:	beq	b1fc <rb_sha512_process_bytes+0xac>
    b17c:	rsb	r7, r6, #256	; 0x100
    b180:	add	r0, r4, r6
    b184:	mov	r1, r8
    b188:	cmp	r7, r5
    b18c:	add	r0, r0, #88	; 0x58
    b190:	movhi	r7, r5
    b194:	mov	r2, r7
    b198:	bl	50a0 <memcpy@plt>
    b19c:	ldrd	r0, [r9]
    b1a0:	adds	r0, r0, r7
    b1a4:	adc	r1, r1, #0
    b1a8:	subs	r2, r0, #129	; 0x81
    b1ac:	strd	r0, [r9]
    b1b0:	sbcs	r1, r1, #0
    b1b4:	bcc	b1f4 <rb_sha512_process_bytes+0xa4>
    b1b8:	add	sl, r4, #88	; 0x58
    b1bc:	bic	r1, r0, #127	; 0x7f
    b1c0:	mov	r2, r4
    b1c4:	mov	r0, sl
    b1c8:	bl	b69c <rb_sha512_process_block>
    b1cc:	mov	r0, #0
    b1d0:	str	r0, [r9, #4]
    b1d4:	ldr	r0, [r9]
    b1d8:	and	r2, r0, #127	; 0x7f
    b1dc:	add	r0, r7, r6
    b1e0:	bic	r0, r0, #127	; 0x7f
    b1e4:	str	r2, [r9]
    b1e8:	add	r1, sl, r0
    b1ec:	mov	r0, sl
    b1f0:	bl	50a0 <memcpy@plt>
    b1f4:	sub	r5, r5, r7
    b1f8:	add	r8, r8, r7
    b1fc:	cmp	r5, #128	; 0x80
    b200:	bcc	b294 <rb_sha512_process_bytes+0x144>
    b204:	tst	r8, #7
    b208:	beq	b278 <rb_sha512_process_bytes+0x128>
    b20c:	cmp	r5, #129	; 0x81
    b210:	bcc	b2a4 <rb_sha512_process_bytes+0x154>
    b214:	sub	r0, r5, #128	; 0x80
    b218:	add	r7, r4, #88	; 0x58
    b21c:	mov	r6, r8
    b220:	str	r0, [sp, #8]
    b224:	sub	r0, r5, #129	; 0x81
    b228:	bic	sl, r0, #127	; 0x7f
    b22c:	add	r0, sl, #128	; 0x80
    b230:	str	r0, [sp, #4]
    b234:	mov	r0, r7
    b238:	mov	r1, r6
    b23c:	mov	r2, #128	; 0x80
    b240:	bl	50a0 <memcpy@plt>
    b244:	mov	r0, r7
    b248:	mov	r1, #128	; 0x80
    b24c:	mov	r2, r4
    b250:	bl	b69c <rb_sha512_process_block>
    b254:	sub	r5, r5, #128	; 0x80
    b258:	add	r6, r6, #128	; 0x80
    b25c:	cmp	r5, #128	; 0x80
    b260:	bhi	b234 <rb_sha512_process_bytes+0xe4>
    b264:	ldr	r0, [sp, #8]
    b268:	sub	r5, r0, sl
    b26c:	ldr	r0, [sp, #4]
    b270:	add	r8, r8, r0
    b274:	b	b2a8 <rb_sha512_process_bytes+0x158>
    b278:	bic	r6, r5, #127	; 0x7f
    b27c:	mov	r0, r8
    b280:	mov	r2, r4
    b284:	mov	r1, r6
    b288:	bl	b69c <rb_sha512_process_block>
    b28c:	add	r8, r8, r6
    b290:	and	r5, r5, #127	; 0x7f
    b294:	cmp	r5, #0
    b298:	bne	b2a8 <rb_sha512_process_bytes+0x158>
    b29c:	sub	sp, fp, #28
    b2a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2a4:	mov	r5, #128	; 0x80
    b2a8:	ldr	r6, [r9]
    b2ac:	mov	r1, r8
    b2b0:	mov	r2, r5
    b2b4:	add	r0, r4, r6
    b2b8:	add	r0, r0, #88	; 0x58
    b2bc:	bl	50a0 <memcpy@plt>
    b2c0:	add	r6, r5, r6
    b2c4:	cmp	r6, #128	; 0x80
    b2c8:	bcc	b2f4 <rb_sha512_process_bytes+0x1a4>
    b2cc:	add	r5, r4, #88	; 0x58
    b2d0:	mov	r1, #128	; 0x80
    b2d4:	mov	r2, r4
    b2d8:	mov	r0, r5
    b2dc:	bl	b69c <rb_sha512_process_block>
    b2e0:	sub	r6, r6, #128	; 0x80
    b2e4:	add	r1, r4, #216	; 0xd8
    b2e8:	mov	r0, r5
    b2ec:	mov	r2, r6
    b2f0:	bl	50a0 <memcpy@plt>
    b2f4:	mov	r7, #0
    b2f8:	strd	r6, [r9]
    b2fc:	sub	sp, fp, #28
    b300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b304:	nop	{0}
    b308:	nop	{0}
    b30c:	nop	{0}

0000b310 <rb_sha512_finish_ctx>:
    b310:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b314:	add	fp, sp, #24
    b318:	mov	r5, r0
    b31c:	mov	r6, r0
    b320:	mov	r4, r1
    b324:	ldr	r0, [r5, #64]!	; 0x40
    b328:	ldrd	r2, [r5, #16]
    b32c:	ldr	r1, [r5, #4]
    b330:	adds	r0, r0, r2
    b334:	adcs	r1, r1, r3
    b338:	strd	r0, [r5]
    b33c:	mov	r1, #0
    b340:	adc	r0, r1, #0
    b344:	cmp	r0, #1
    b348:	bne	b360 <rb_sha512_finish_ctx+0x50>
    b34c:	add	r0, r5, #8
    b350:	ldrd	r8, [r0]
    b354:	adds	r8, r8, #1
    b358:	adc	r9, r9, #0
    b35c:	strd	r8, [r0]
    b360:	rsbs	r7, r2, #111	; 0x6f
    b364:	add	r8, r6, #88	; 0x58
    b368:	rscs	r3, r3, #0
    b36c:	mov	r7, #112	; 0x70
    b370:	add	r0, r8, r2
    b374:	movwcc	r1, #1
    b378:	cmp	r1, #0
    b37c:	ldr	r1, [pc, #788]	; b698 <rb_sha512_finish_ctx+0x388>
    b380:	movwne	r7, #240	; 0xf0
    b384:	sub	r2, r7, r2
    b388:	add	r1, pc, r1
    b38c:	bl	50a0 <memcpy@plt>
    b390:	vld1.64	{d1-d2}, [r5]
    b394:	vmov.i64	q10, #0x00ff000000000000
    b398:	vmov.32	r0, d2[1]
    b39c:	vmov.32	r1, d2[0]
    b3a0:	vmov.32	r3, d1[1]
    b3a4:	vldr	s0, [pc, #740]	; b690 <rb_sha512_finish_ctx+0x380>
    b3a8:	lsl	r5, r1, #11
    b3ac:	lsl	r2, r0, #3
    b3b0:	orr	r2, r2, r1, lsr #29
    b3b4:	vmov	s1, r5
    b3b8:	lsr	r5, r3, #29
    b3bc:	lsl	r3, r3, #11
    b3c0:	vmov	s8, r5
    b3c4:	add	r5, pc, #516	; 0x204
    b3c8:	vld1.64	{d16-d17}, [r5 :128]
    b3cc:	add	r5, pc, #524	; 0x20c
    b3d0:	vmov.f32	s9, s0
    b3d4:	vorr	d3, d1, d1
    b3d8:	vld1.64	{d22-d23}, [r5 :128]
    b3dc:	add	r5, pc, #524	; 0x20c
    b3e0:	vand	q10, q0, q10
    b3e4:	vorr	d5, d1, d1
    b3e8:	vld1.64	{d24-d25}, [r5 :128]
    b3ec:	add	r5, pc, #524	; 0x20c
    b3f0:	vld1.64	{d18-d19}, [r5 :128]
    b3f4:	lsl	r5, r1, #3
    b3f8:	lsr	r1, r1, #5
    b3fc:	vmov	s12, r5
    b400:	add	r5, pc, #520	; 0x208
    b404:	vshl.u64	q13, q0, q8
    b408:	orr	r1, r1, r0, lsl #27
    b40c:	vmov.i32	q8, #0	; 0x00000000
    b410:	lsr	r0, r0, #5
    b414:	vmov	s13, r2
    b418:	vld1.64	{d28-d29}, [r5 :128]
    b41c:	add	r5, pc, #508	; 0x1fc
    b420:	vshl.u64	q11, q1, q11
    b424:	vorr	d21, d27, d27
    b428:	vmov.32	r2, d1[0]
    b42c:	vldr	s14, [pc, #608]	; b694 <rb_sha512_finish_ctx+0x384>
    b430:	vld1.64	{d30-d31}, [r5 :128]
    b434:	vshl.u64	q12, q1, q12
    b438:	add	r5, pc, #496	; 0x1f0
    b43c:	orr	r3, r3, r2, lsr #21
    b440:	lsl	r2, r2, #11
    b444:	vand	q9, q11, q9
    b448:	vmov.32	d23[0], r2
    b44c:	vorr	q10, q9, q10
    b450:	vmov.32	d23[1], r3
    b454:	vsub.i64	q13, q8, q14
    b458:	vld1.64	{d28-d29}, [r5 :128]
    b45c:	vmov.i64	d22, #0x00000000ff000000
    b460:	vmov.f32	s15, s0
    b464:	vand	q12, q12, q15
    b468:	vshl.u64	q13, q1, q13
    b46c:	vsub.i64	q15, q8, q3
    b470:	vorr	q9, q2, q3
    b474:	vmov.32	d6[0], r1
    b478:	vorr	q10, q10, q12
    b47c:	vmov.i64	d7, #0x000000ff00000000
    b480:	vshl.u64	q15, q2, q15
    b484:	vmov.32	d6[1], r0
    b488:	add	r0, pc, #432	; 0x1b0
    b48c:	add	r1, pc, #444	; 0x1bc
    b490:	vsub.i64	q14, q8, q14
    b494:	vorr	d19, d31, d31
    b498:	vld1.64	{d4-d5}, [r1 :128]
    b49c:	vld1.64	{d24-d25}, [r0 :128]
    b4a0:	add	r0, pc, #440	; 0x1b8
    b4a4:	add	r1, pc, #452	; 0x1c4
    b4a8:	add	r2, pc, #464	; 0x1d0
    b4ac:	vand	q11, q11, q3
    b4b0:	vshl.u64	q14, q1, q14
    b4b4:	vld1.64	{d6-d7}, [r1 :128]
    b4b8:	vorr	q10, q10, q11
    b4bc:	vmov.i64	q11, #0x00000000000000ff
    b4c0:	add	r1, r7, #16
    b4c4:	vand	q11, q9, q11
    b4c8:	vsub.i64	q8, q8, q2
    b4cc:	vld1.64	{d4-d5}, [r2 :128]
    b4d0:	vand	q12, q13, q12
    b4d4:	vld1.64	{d26-d27}, [r0 :128]
    b4d8:	add	r0, r8, r7
    b4dc:	mov	r2, r6
    b4e0:	vshl.u64	q8, q1, q8
    b4e4:	vorr	q10, q10, q12
    b4e8:	vshl.u64	q9, q9, q3
    b4ec:	vorr	d19, d23, d23
    b4f0:	vand	q14, q14, q2
    b4f4:	vand	q8, q8, q13
    b4f8:	vorr	q10, q10, q14
    b4fc:	vorr	q8, q10, q8
    b500:	vorr	q8, q8, q9
    b504:	vst1.64	{d16-d17}, [r0]
    b508:	mov	r0, r8
    b50c:	bl	b69c <rb_sha512_process_block>
    b510:	ldm	r6, {r0, r1}
    b514:	rev	r0, r0
    b518:	str	r0, [r4, #4]
    b51c:	rev	r0, r1
    b520:	str	r0, [r4]
    b524:	ldr	r0, [r6, #8]
    b528:	ldr	r1, [r6, #12]
    b52c:	rev	r0, r0
    b530:	str	r0, [r4, #12]
    b534:	rev	r0, r1
    b538:	str	r0, [r4, #8]
    b53c:	ldr	r0, [r6, #16]
    b540:	ldr	r1, [r6, #20]
    b544:	rev	r0, r0
    b548:	str	r0, [r4, #20]
    b54c:	rev	r0, r1
    b550:	str	r0, [r4, #16]
    b554:	ldr	r0, [r6, #24]
    b558:	ldr	r1, [r6, #28]
    b55c:	rev	r0, r0
    b560:	str	r0, [r4, #28]
    b564:	rev	r0, r1
    b568:	str	r0, [r4, #24]
    b56c:	ldr	r0, [r6, #32]
    b570:	ldr	r1, [r6, #36]	; 0x24
    b574:	rev	r0, r0
    b578:	str	r0, [r4, #36]	; 0x24
    b57c:	rev	r0, r1
    b580:	str	r0, [r4, #32]
    b584:	ldr	r0, [r6, #40]	; 0x28
    b588:	ldr	r1, [r6, #44]	; 0x2c
    b58c:	rev	r0, r0
    b590:	str	r0, [r4, #44]	; 0x2c
    b594:	rev	r0, r1
    b598:	str	r0, [r4, #40]	; 0x28
    b59c:	ldr	r0, [r6, #48]	; 0x30
    b5a0:	ldr	r1, [r6, #52]	; 0x34
    b5a4:	rev	r0, r0
    b5a8:	str	r0, [r4, #52]	; 0x34
    b5ac:	rev	r0, r1
    b5b0:	str	r0, [r4, #48]	; 0x30
    b5b4:	ldr	r0, [r6, #56]	; 0x38
    b5b8:	ldr	r1, [r6, #60]	; 0x3c
    b5bc:	rev	r0, r0
    b5c0:	str	r0, [r4, #60]	; 0x3c
    b5c4:	rev	r0, r1
    b5c8:	str	r0, [r4, #56]	; 0x38
    b5cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b5d0:	.word	0x00000000
    b5d4:	.word	0x00ff0000
    b5d8:	.word	0x0000003b
    b5dc:	.word	0x00000000
    b5e0:	.word	0x0000001b
    b5e4:	.word	0x00000000
    b5e8:	.word	0x0000002b
    b5ec:	.word	0x00000000
    b5f0:	.word	0x0000000b
    b5f4:	.word	0x00000000
    b5f8:	.word	0x0000001b
	...
    b604:	.word	0x0000ff00
    b608:	.word	0x00000000
    b60c:	.word	0x00ff0000
    b610:	.word	0x00000015
    b614:	.word	0x00000000
    b618:	.word	0x00000005
	...
    b624:	.word	0x000000ff
    b628:	.word	0x00000000
    b62c:	.word	0x0000ff00
    b630:	.word	0x00000025
    b634:	.word	0x00000000
    b638:	.word	0x00000015
    b63c:	.word	0x00000000
    b640:	.word	0x00ff0000
    b644:	.word	0x00000000
    b648:	.word	0xff000000
    b64c:	.word	0x00000000
    b650:	.word	0x00000035
    b654:	.word	0x00000000
    b658:	.word	0x00000025
    b65c:	.word	0x00000000
    b660:	.word	0x000000ff
    b664:	.word	0x00000000
    b668:	.word	0x0000ff00
    b66c:	.word	0x00000000
    b670:	.word	0x00000038
    b674:	.word	0x00000000
    b678:	.word	0x000000ff
    b67c:	.word	0x00000000
    b680:	.word	0x0000ff00
    b684:	.word	0x00000000
    b688:	.word	0x00ff0000
	...
    b694:	.word	0x00000035
    b698:	.word	0x0000ebf0

0000b69c <rb_sha512_process_block>:
    b69c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6a0:	add	fp, sp, #28
    b6a4:	sub	sp, sp, #860	; 0x35c
    b6a8:	mov	r6, r0
    b6ac:	ldr	r0, [r2, #64]	; 0x40
    b6b0:	lsr	r7, r1, #3
    b6b4:	adds	r0, r0, r1
    b6b8:	str	r0, [r2, #64]	; 0x40
    b6bc:	ldr	r0, [r2, #68]	; 0x44
    b6c0:	adcs	r0, r0, #0
    b6c4:	str	r0, [r2, #68]	; 0x44
    b6c8:	mov	r0, #0
    b6cc:	ldr	r1, [r2, #60]	; 0x3c
    b6d0:	ldr	r5, [r2, #36]	; 0x24
    b6d4:	ldr	sl, [r2, #28]
    b6d8:	adc	r0, r0, #0
    b6dc:	cmp	r0, #1
    b6e0:	str	r1, [sp, #160]	; 0xa0
    b6e4:	mov	r1, r2
    b6e8:	ldr	r3, [r1, #56]!	; 0x38
    b6ec:	str	r1, [sp, #24]
    b6f0:	ldr	r1, [r2, #52]	; 0x34
    b6f4:	str	r3, [sp, #156]	; 0x9c
    b6f8:	str	r1, [sp, #152]	; 0x98
    b6fc:	mov	r1, r2
    b700:	ldr	r3, [r1, #48]!	; 0x30
    b704:	str	r1, [sp, #20]
    b708:	ldr	r1, [r2, #44]	; 0x2c
    b70c:	str	r3, [sp, #148]	; 0x94
    b710:	str	r1, [sp, #144]	; 0x90
    b714:	mov	r1, r2
    b718:	ldr	r3, [r1, #40]!	; 0x28
    b71c:	str	r1, [sp, #16]
    b720:	mov	r1, r2
    b724:	str	r3, [sp, #140]	; 0x8c
    b728:	ldr	r9, [r1, #32]!
    b72c:	str	r1, [sp, #12]
    b730:	mov	r1, r2
    b734:	ldr	r3, [r1, #24]!
    b738:	str	r3, [sp, #136]	; 0x88
    b73c:	str	r1, [sp, #8]
    b740:	ldm	r2, {r1, r3}
    b744:	str	r1, [sp, #124]	; 0x7c
    b748:	ldr	r1, [r2, #12]
    b74c:	str	r3, [sp, #120]	; 0x78
    b750:	str	r1, [sp, #128]	; 0x80
    b754:	ldr	r1, [r2, #20]
    b758:	str	r1, [sp, #132]	; 0x84
    b75c:	mov	r1, r2
    b760:	ldr	r3, [r1, #16]!
    b764:	str	r1, [sp, #4]
    b768:	mov	r1, r2
    b76c:	str	r3, [sp, #116]	; 0x74
    b770:	ldr	r3, [r1, #8]!
    b774:	str	r3, [sp, #112]	; 0x70
    b778:	str	r1, [sp]
    b77c:	bne	b790 <rb_sha512_process_block+0xf4>
    b780:	ldrd	r0, [r2, #72]	; 0x48
    b784:	adds	r0, r0, #1
    b788:	adc	r1, r1, #0
    b78c:	strd	r0, [r2, #72]	; 0x48
    b790:	cmp	r7, #0
    b794:	str	r2, [sp, #28]
    b798:	beq	bd6c <rb_sha512_process_block+0x6d0>
    b79c:	add	r0, sp, #216	; 0xd8
    b7a0:	add	r1, r0, #120	; 0x78
    b7a4:	str	r1, [sp, #88]	; 0x58
    b7a8:	add	r1, r0, #112	; 0x70
    b7ac:	str	r1, [sp, #84]	; 0x54
    b7b0:	add	r1, r0, #104	; 0x68
    b7b4:	str	r1, [sp, #80]	; 0x50
    b7b8:	add	r1, r0, #96	; 0x60
    b7bc:	str	r1, [sp, #76]	; 0x4c
    b7c0:	add	r1, r0, #88	; 0x58
    b7c4:	str	r1, [sp, #72]	; 0x48
    b7c8:	add	r1, r0, #80	; 0x50
    b7cc:	str	r1, [sp, #68]	; 0x44
    b7d0:	add	r1, r0, #72	; 0x48
    b7d4:	str	r1, [sp, #64]	; 0x40
    b7d8:	add	r1, r0, #64	; 0x40
    b7dc:	str	r1, [sp, #60]	; 0x3c
    b7e0:	add	r1, r0, #56	; 0x38
    b7e4:	str	r1, [sp, #56]	; 0x38
    b7e8:	add	r1, r0, #48	; 0x30
    b7ec:	str	r1, [sp, #52]	; 0x34
    b7f0:	add	r1, r0, #40	; 0x28
    b7f4:	str	r1, [sp, #48]	; 0x30
    b7f8:	add	r1, r0, #32
    b7fc:	str	r1, [sp, #44]	; 0x2c
    b800:	add	r1, r0, #24
    b804:	str	r1, [sp, #40]	; 0x28
    b808:	add	r1, r0, #16
    b80c:	add	r0, r0, #8
    b810:	str	r1, [sp, #36]	; 0x24
    b814:	str	r0, [sp, #32]
    b818:	str	r5, [sp, #108]	; 0x6c
    b81c:	str	r7, [sp, #92]	; 0x5c
    b820:	ldm	r6, {r0, r2}
    b824:	str	r6, [sp, #96]	; 0x60
    b828:	rev	ip, r0
    b82c:	rev	lr, r2
    b830:	str	ip, [sp, #220]	; 0xdc
    b834:	str	lr, [sp, #216]	; 0xd8
    b838:	ldr	r0, [r6, #8]
    b83c:	ldr	r3, [r6, #12]
    b840:	rev	r5, r0
    b844:	ldr	r0, [sp, #32]
    b848:	rev	r4, r3
    b84c:	strd	r4, [r0]
    b850:	ldr	r0, [r6, #16]
    b854:	ldr	r3, [r6, #20]
    b858:	rev	r5, r0
    b85c:	ldr	r0, [sp, #36]	; 0x24
    b860:	rev	r4, r3
    b864:	strd	r4, [r0]
    b868:	ldr	r0, [r6, #24]
    b86c:	ldr	r3, [r6, #28]
    b870:	rev	r5, r0
    b874:	ldr	r0, [sp, #40]	; 0x28
    b878:	rev	r4, r3
    b87c:	strd	r4, [r0]
    b880:	ldr	r0, [r6, #32]
    b884:	ldr	r3, [r6, #36]	; 0x24
    b888:	rev	r5, r0
    b88c:	ldr	r0, [sp, #44]	; 0x2c
    b890:	rev	r4, r3
    b894:	strd	r4, [r0]
    b898:	ldr	r0, [r6, #40]	; 0x28
    b89c:	ldr	r3, [r6, #44]	; 0x2c
    b8a0:	rev	r5, r0
    b8a4:	ldr	r0, [sp, #48]	; 0x30
    b8a8:	rev	r4, r3
    b8ac:	strd	r4, [r0]
    b8b0:	ldr	r0, [r6, #48]	; 0x30
    b8b4:	ldr	r3, [r6, #52]	; 0x34
    b8b8:	rev	r5, r0
    b8bc:	ldr	r0, [sp, #52]	; 0x34
    b8c0:	rev	r4, r3
    b8c4:	strd	r4, [r0]
    b8c8:	ldr	r0, [r6, #56]	; 0x38
    b8cc:	ldr	r3, [r6, #60]	; 0x3c
    b8d0:	rev	r5, r0
    b8d4:	ldr	r0, [sp, #56]	; 0x38
    b8d8:	rev	r4, r3
    b8dc:	strd	r4, [r0]
    b8e0:	ldr	r0, [r6, #64]	; 0x40
    b8e4:	ldr	r3, [r6, #68]	; 0x44
    b8e8:	rev	r5, r0
    b8ec:	ldr	r0, [sp, #60]	; 0x3c
    b8f0:	rev	r4, r3
    b8f4:	strd	r4, [r0]
    b8f8:	ldr	r0, [r6, #72]	; 0x48
    b8fc:	ldr	r3, [r6, #76]	; 0x4c
    b900:	rev	r5, r0
    b904:	ldr	r0, [sp, #64]	; 0x40
    b908:	rev	r4, r3
    b90c:	strd	r4, [r0]
    b910:	ldr	r0, [r6, #80]	; 0x50
    b914:	ldr	r3, [r6, #84]	; 0x54
    b918:	rev	r5, r0
    b91c:	ldr	r0, [sp, #68]	; 0x44
    b920:	rev	r4, r3
    b924:	strd	r4, [r0]
    b928:	ldr	r0, [r6, #88]	; 0x58
    b92c:	ldr	r3, [r6, #92]	; 0x5c
    b930:	rev	r5, r0
    b934:	ldr	r0, [sp, #72]	; 0x48
    b938:	rev	r4, r3
    b93c:	strd	r4, [r0]
    b940:	ldr	r0, [r6, #96]	; 0x60
    b944:	ldr	r3, [r6, #100]	; 0x64
    b948:	rev	r5, r0
    b94c:	ldr	r0, [sp, #76]	; 0x4c
    b950:	rev	r4, r3
    b954:	strd	r4, [r0]
    b958:	ldr	r0, [r6, #104]	; 0x68
    b95c:	ldr	r3, [r6, #108]	; 0x6c
    b960:	rev	r5, r0
    b964:	ldr	r0, [sp, #80]	; 0x50
    b968:	rev	r4, r3
    b96c:	strd	r4, [r0]
    b970:	ldr	r0, [r6, #112]	; 0x70
    b974:	ldr	r3, [r6, #116]	; 0x74
    b978:	rev	r5, r0
    b97c:	ldr	r0, [sp, #84]	; 0x54
    b980:	rev	r4, r3
    b984:	strd	r4, [r0]
    b988:	ldr	r0, [r6, #120]	; 0x78
    b98c:	ldr	r3, [r6, #124]	; 0x7c
    b990:	rev	r5, r0
    b994:	ldr	r0, [sp, #88]	; 0x58
    b998:	rev	r4, r3
    b99c:	strd	r4, [r0]
    b9a0:	movw	r0, #65024	; 0xfe00
    b9a4:	movt	r0, #65535	; 0xffff
    b9a8:	add	r1, sp, #216	; 0xd8
    b9ac:	add	r3, r1, r0
    b9b0:	ldr	r6, [r3, #628]	; 0x274
    b9b4:	ldr	r7, [r3, #624]	; 0x270
    b9b8:	ldr	r2, [r3, #520]	; 0x208
    b9bc:	lsl	r4, r6, #3
    b9c0:	lsr	r5, r6, #19
    b9c4:	lsr	r1, r6, #29
    b9c8:	orr	r4, r4, r7, lsr #29
    b9cc:	orr	r5, r5, r7, lsl #13
    b9d0:	orr	r1, r1, r7, lsl #3
    b9d4:	eor	r4, r4, r6, lsr #6
    b9d8:	eor	r5, r4, r5
    b9dc:	lsr	r4, r7, #6
    b9e0:	lsr	r7, r7, #19
    b9e4:	orr	r4, r4, r6, lsl #26
    b9e8:	orr	r7, r7, r6, lsl #13
    b9ec:	ldr	r6, [r3, #584]	; 0x248
    b9f0:	eor	r1, r1, r4
    b9f4:	ldr	r4, [r3, #524]	; 0x20c
    b9f8:	eor	r1, r1, r7
    b9fc:	ldr	r7, [r3, #588]	; 0x24c
    ba00:	adds	r6, lr, r6
    ba04:	mov	lr, r2
    ba08:	adc	r7, ip, r7
    ba0c:	adds	r1, r6, r1
    ba10:	lsr	r6, r2, #7
    ba14:	adc	ip, r7, r5
    ba18:	lsr	r5, r2, #8
    ba1c:	orr	r6, r6, r4, lsl #25
    ba20:	orr	r5, r5, r4, lsl #24
    ba24:	eor	r6, r5, r6
    ba28:	lsrs	r5, r4, #1
    ba2c:	rrx	r7, r2
    ba30:	eor	r7, r6, r7
    ba34:	orr	r6, r5, r2, lsl #31
    ba38:	lsr	r5, r4, #8
    ba3c:	orr	r5, r5, r2, lsl #24
    ba40:	adds	r1, r1, r7
    ba44:	eor	r5, r5, r4, lsr #7
    ba48:	str	r1, [r3, #640]	; 0x280
    ba4c:	eor	r7, r5, r6
    ba50:	adc	r7, ip, r7
    ba54:	adds	r0, r0, #8
    ba58:	mov	ip, r4
    ba5c:	str	r7, [r3, #644]	; 0x284
    ba60:	bne	b9a8 <rb_sha512_process_block+0x30c>
    ba64:	ldr	r0, [sp, #124]	; 0x7c
    ba68:	ldr	r7, [sp, #116]	; 0x74
    ba6c:	ldr	r6, [sp, #152]	; 0x98
    ba70:	ldr	r2, [sp, #112]	; 0x70
    ba74:	ldr	r3, [sp, #128]	; 0x80
    ba78:	ldr	r8, [sp, #108]	; 0x6c
    ba7c:	ldr	r5, [sp, #140]	; 0x8c
    ba80:	ldr	lr, [sp, #156]	; 0x9c
    ba84:	ldr	r4, [sp, #160]	; 0xa0
    ba88:	mov	ip, #0
    ba8c:	str	sl, [sp, #100]	; 0x64
    ba90:	str	sl, [sp, #176]	; 0xb0
    ba94:	str	r9, [sp, #104]	; 0x68
    ba98:	str	r9, [sp, #188]	; 0xbc
    ba9c:	str	r0, [sp, #196]	; 0xc4
    baa0:	ldr	r0, [sp, #120]	; 0x78
    baa4:	str	r7, [sp, #208]	; 0xd0
    baa8:	ldr	r7, [sp, #132]	; 0x84
    baac:	str	r6, [sp, #200]	; 0xc8
    bab0:	str	r0, [sp, #192]	; 0xc0
    bab4:	ldr	r0, [sp, #136]	; 0x88
    bab8:	str	r7, [sp, #204]	; 0xcc
    babc:	ldr	r7, [sp, #144]	; 0x90
    bac0:	str	r0, [sp, #180]	; 0xb4
    bac4:	ldr	r0, [sp, #148]	; 0x94
    bac8:	str	r0, [sp, #212]	; 0xd4
    bacc:	ldr	r1, [sp, #204]	; 0xcc
    bad0:	ldr	r9, [sp, #212]	; 0xd4
    bad4:	ldr	r0, [sp, #200]	; 0xc8
    bad8:	mov	r6, r7
    badc:	str	r5, [sp, #212]	; 0xd4
    bae0:	mov	r7, r8
    bae4:	ldr	r5, [sp, #188]	; 0xbc
    bae8:	mov	r8, r3
    baec:	mov	sl, r2
    baf0:	ldr	r3, [sp, #192]	; 0xc0
    baf4:	ldr	r2, [sp, #196]	; 0xc4
    baf8:	str	r6, [sp, #200]	; 0xc8
    bafc:	str	r1, [sp, #164]	; 0xa4
    bb00:	ldr	r1, [sp, #208]	; 0xd0
    bb04:	str	r0, [sp, #172]	; 0xac
    bb08:	bic	r0, r0, r7
    bb0c:	str	r9, [sp, #168]	; 0xa8
    bb10:	str	r1, [sp, #184]	; 0xb8
    bb14:	and	r1, r7, r6
    bb18:	ldr	r6, [sp, #212]	; 0xd4
    bb1c:	orr	r0, r1, r0
    bb20:	bic	r1, r9, r5
    bb24:	and	r6, r5, r6
    bb28:	orr	r1, r6, r1
    bb2c:	lsr	r6, r7, #18
    bb30:	adds	r1, r1, lr
    bb34:	orr	r6, r6, r5, lsl #14
    bb38:	adc	lr, r0, r4
    bb3c:	lsr	r4, r7, #14
    bb40:	lsr	r0, r5, #14
    bb44:	orr	r4, r4, r5, lsl #18
    bb48:	orr	r0, r0, r7, lsl #18
    bb4c:	eor	r6, r4, r6
    bb50:	lsl	r4, r7, #23
    bb54:	orr	r4, r4, r5, lsr #9
    bb58:	eor	r6, r6, r4
    bb5c:	lsr	r4, r5, #18
    bb60:	orr	r4, r4, r7, lsl #14
    bb64:	eor	r0, r0, r4
    bb68:	lsr	r4, r7, #9
    bb6c:	orr	r4, r4, r5, lsl #23
    bb70:	eor	r0, r0, r4
    bb74:	adds	r0, r1, r0
    bb78:	adc	r1, lr, r6
    bb7c:	ldr	r6, [pc, #636]	; be00 <rb_sha512_process_block+0x764>
    bb80:	ldr	lr, [sp, #164]	; 0xa4
    bb84:	str	r8, [sp, #204]	; 0xcc
    bb88:	str	sl, [sp, #208]	; 0xd0
    bb8c:	add	r6, pc, r6
    bb90:	ldr	r4, [r6, ip]!
    bb94:	ldr	r6, [r6, #4]
    bb98:	adds	r0, r0, r4
    bb9c:	adc	r1, r1, r6
    bba0:	add	r6, sp, #216	; 0xd8
    bba4:	mov	r4, r6
    bba8:	add	r6, r6, ip
    bbac:	ldr	r4, [r4, ip]
    bbb0:	ldr	r6, [r6, #4]
    bbb4:	add	ip, ip, #8
    bbb8:	adds	r9, r0, r4
    bbbc:	and	r0, r8, lr
    bbc0:	ldr	r4, [sp, #184]	; 0xb8
    bbc4:	adc	r6, r1, r6
    bbc8:	eor	r1, r8, lr
    bbcc:	and	r1, r3, r1
    bbd0:	eor	r0, r1, r0
    bbd4:	lsl	r1, r3, #30
    bbd8:	str	r0, [sp, #196]	; 0xc4
    bbdc:	lsr	r0, r3, #28
    bbe0:	orr	r1, r1, r2, lsr #2
    bbe4:	orr	r0, r0, r2, lsl #4
    bbe8:	eor	r0, r0, r1
    bbec:	lsl	r1, r3, #25
    bbf0:	orr	r1, r1, r2, lsr #7
    bbf4:	eor	r8, r0, r1
    bbf8:	eor	r0, sl, r4
    bbfc:	and	r1, sl, r4
    bc00:	mov	sl, r4
    bc04:	lsr	r4, r3, #2
    bc08:	and	r0, r2, r0
    bc0c:	orr	r4, r4, r2, lsl #30
    bc10:	eor	r0, r0, r1
    bc14:	lsr	r1, r2, #28
    bc18:	orr	r1, r1, r3, lsl #4
    bc1c:	eor	r1, r1, r4
    bc20:	lsr	r4, r3, #7
    bc24:	orr	r4, r4, r2, lsl #25
    bc28:	eor	r1, r1, r4
    bc2c:	ldr	r4, [sp, #172]	; 0xac
    bc30:	adds	r0, r1, r0
    bc34:	ldr	r1, [sp, #196]	; 0xc4
    bc38:	adc	r1, r8, r1
    bc3c:	adds	r0, r0, r9
    bc40:	str	r0, [sp, #196]	; 0xc4
    bc44:	adc	r0, r1, r6
    bc48:	mov	r1, lr
    bc4c:	str	r0, [sp, #192]	; 0xc0
    bc50:	ldr	r0, [sp, #180]	; 0xb4
    bc54:	str	sl, [sp, #180]	; 0xb4
    bc58:	adds	r0, r9, r0
    bc5c:	str	r0, [sp, #188]	; 0xbc
    bc60:	ldr	r0, [sp, #176]	; 0xb0
    bc64:	str	lr, [sp, #176]	; 0xb0
    bc68:	ldr	lr, [sp, #168]	; 0xa8
    bc6c:	adc	r8, r6, r0
    bc70:	cmp	ip, #640	; 0x280
    bc74:	bne	bacc <rb_sha512_process_block+0x430>
    bc78:	ldr	r6, [sp, #156]	; 0x9c
    bc7c:	mov	r0, r4
    bc80:	ldr	r9, [sp, #104]	; 0x68
    bc84:	mov	sl, lr
    bc88:	ldr	r0, [sp, #212]	; 0xd4
    bc8c:	ldr	sl, [sp, #100]	; 0x64
    bc90:	adds	r6, lr, r6
    bc94:	str	r6, [sp, #156]	; 0x9c
    bc98:	ldr	r6, [sp, #160]	; 0xa0
    bc9c:	adc	r6, r4, r6
    bca0:	ldr	r4, [sp, #200]	; 0xc8
    bca4:	str	r6, [sp, #160]	; 0xa0
    bca8:	ldr	r6, [sp, #148]	; 0x94
    bcac:	adds	r6, r0, r6
    bcb0:	ldr	r0, [sp, #188]	; 0xbc
    bcb4:	str	r6, [sp, #148]	; 0x94
    bcb8:	ldr	r6, [sp, #152]	; 0x98
    bcbc:	adc	r6, r4, r6
    bcc0:	str	r6, [sp, #152]	; 0x98
    bcc4:	ldr	r6, [sp, #140]	; 0x8c
    bcc8:	adds	r6, r5, r6
    bccc:	str	r6, [sp, #140]	; 0x8c
    bcd0:	ldr	r6, [sp, #144]	; 0x90
    bcd4:	adc	r6, r7, r6
    bcd8:	ldr	r7, [sp, #108]	; 0x6c
    bcdc:	adds	r9, r0, r9
    bce0:	ldr	r0, [sp, #184]	; 0xb8
    bce4:	str	r6, [sp, #144]	; 0x90
    bce8:	ldr	r6, [sp, #208]	; 0xd0
    bcec:	adc	r7, r8, r7
    bcf0:	mov	r5, r7
    bcf4:	ldr	r7, [sp, #136]	; 0x88
    bcf8:	adds	r7, r0, r7
    bcfc:	ldr	r0, [sp, #196]	; 0xc4
    bd00:	str	r7, [sp, #136]	; 0x88
    bd04:	ldr	r7, [sp, #116]	; 0x74
    bd08:	adc	sl, r1, sl
    bd0c:	ldr	r1, [sp, #192]	; 0xc0
    bd10:	adds	r7, r6, r7
    bd14:	ldr	r6, [sp, #204]	; 0xcc
    bd18:	str	r7, [sp, #116]	; 0x74
    bd1c:	ldr	r7, [sp, #132]	; 0x84
    bd20:	adc	r7, r6, r7
    bd24:	ldr	r6, [sp, #96]	; 0x60
    bd28:	str	r7, [sp, #132]	; 0x84
    bd2c:	ldr	r7, [sp, #112]	; 0x70
    bd30:	add	r6, r6, #128	; 0x80
    bd34:	adds	r7, r2, r7
    bd38:	ldr	r2, [sp, #128]	; 0x80
    bd3c:	str	r7, [sp, #112]	; 0x70
    bd40:	ldr	r7, [sp, #92]	; 0x5c
    bd44:	adc	r2, r3, r2
    bd48:	str	r2, [sp, #128]	; 0x80
    bd4c:	ldr	r2, [sp, #124]	; 0x7c
    bd50:	adds	r2, r0, r2
    bd54:	ldr	r0, [sp, #120]	; 0x78
    bd58:	str	r2, [sp, #124]	; 0x7c
    bd5c:	adc	r0, r1, r0
    bd60:	subs	r7, r7, #16
    bd64:	str	r0, [sp, #120]	; 0x78
    bd68:	bne	b818 <rb_sha512_process_block+0x17c>
    bd6c:	ldr	r0, [sp, #28]
    bd70:	ldr	r1, [sp, #124]	; 0x7c
    bd74:	ldr	r2, [sp, #120]	; 0x78
    bd78:	stm	r0, {r1, r2}
    bd7c:	ldr	r0, [sp, #128]	; 0x80
    bd80:	ldr	r1, [sp]
    bd84:	ldr	r2, [sp, #112]	; 0x70
    bd88:	str	r2, [r1]
    bd8c:	str	r0, [r1, #4]
    bd90:	ldr	r0, [sp, #132]	; 0x84
    bd94:	ldr	r1, [sp, #4]
    bd98:	ldr	r2, [sp, #116]	; 0x74
    bd9c:	str	r2, [r1]
    bda0:	str	r0, [r1, #4]
    bda4:	ldr	r0, [sp, #8]
    bda8:	ldr	r1, [sp, #136]	; 0x88
    bdac:	stm	r0, {r1, sl}
    bdb0:	ldr	r0, [sp, #12]
    bdb4:	str	r9, [r0]
    bdb8:	str	r5, [r0, #4]
    bdbc:	ldr	r0, [sp, #144]	; 0x90
    bdc0:	ldr	r1, [sp, #16]
    bdc4:	ldr	r2, [sp, #140]	; 0x8c
    bdc8:	str	r2, [r1]
    bdcc:	str	r0, [r1, #4]
    bdd0:	ldr	r0, [sp, #152]	; 0x98
    bdd4:	ldr	r1, [sp, #20]
    bdd8:	ldr	r2, [sp, #148]	; 0x94
    bddc:	str	r2, [r1]
    bde0:	str	r0, [r1, #4]
    bde4:	ldr	r0, [sp, #160]	; 0xa0
    bde8:	ldr	r1, [sp, #24]
    bdec:	ldr	r2, [sp, #156]	; 0x9c
    bdf0:	str	r2, [r1]
    bdf4:	str	r0, [r1, #4]
    bdf8:	sub	sp, fp, #28
    bdfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be00:	.word	0x0000e16c

0000be04 <rb_init_bh>:
    be04:	push	{fp, lr}
    be08:	mov	fp, sp
    be0c:	mov	r0, #1
    be10:	mov	r1, #12
    be14:	bl	4ea8 <calloc@plt>
    be18:	cmp	r0, #0
    be1c:	ldrne	r1, [pc, #12]	; be30 <rb_init_bh+0x2c>
    be20:	addne	r1, pc, r1
    be24:	strne	r0, [r1]
    be28:	popne	{fp, pc}
    be2c:	bl	51fc <rb_outofmemory@plt>
    be30:	.word	0x00032ad8

0000be34 <rb_bh_create>:
    be34:	push	{r4, r5, r6, r7, fp, lr}
    be38:	add	fp, sp, #16
    be3c:	cmp	r0, #0
    be40:	beq	bf08 <rb_bh_create+0xd4>
    be44:	mov	r6, r1
    be48:	cmp	r1, #0
    be4c:	ble	bf08 <rb_bh_create+0xd4>
    be50:	mov	r7, r0
    be54:	cmp	r0, #11
    be58:	bls	bf1c <rb_bh_create+0xe8>
    be5c:	mov	r0, #1
    be60:	mov	r1, #48	; 0x30
    be64:	mov	r5, r2
    be68:	bl	4ea8 <calloc@plt>
    be6c:	cmp	r0, #0
    be70:	beq	bf18 <rb_bh_create+0xe4>
    be74:	mov	r4, r0
    be78:	cmp	r5, #0
    be7c:	str	r7, [r0, #12]
    be80:	str	r6, [r0, #16]
    be84:	beq	beb0 <rb_bh_create+0x7c>
    be88:	mov	r0, r5
    be8c:	bl	507c <strlen@plt>
    be90:	add	r0, r0, #1
    be94:	bl	5214 <malloc@plt>
    be98:	cmp	r0, #0
    be9c:	beq	bf18 <rb_bh_create+0xe4>
    bea0:	mov	r1, r5
    bea4:	mov	r6, r0
    bea8:	bl	5124 <strcpy@plt>
    beac:	str	r6, [r4, #44]	; 0x2c
    beb0:	ldr	r0, [pc, #116]	; bf2c <rb_bh_create+0xf8>
    beb4:	mov	r1, #0
    beb8:	ldr	r0, [pc, r0]
    bebc:	str	r1, [r4, #4]
    bec0:	str	r4, [r4]
    bec4:	ldr	r1, [r0]
    bec8:	cmp	r1, #0
    becc:	str	r1, [r4, #8]
    bed0:	beq	bee0 <rb_bh_create+0xac>
    bed4:	add	r1, r1, #4
    bed8:	str	r4, [r1]
    bedc:	b	bef0 <rb_bh_create+0xbc>
    bee0:	mov	r1, r0
    bee4:	ldr	r2, [r1, #4]!
    bee8:	cmp	r2, #0
    beec:	streq	r4, [r1]
    bef0:	str	r4, [r0]
    bef4:	ldr	r1, [r0, #8]
    bef8:	add	r1, r1, #1
    befc:	str	r1, [r0, #8]
    bf00:	mov	r0, r4
    bf04:	pop	{r4, r5, r6, r7, fp, pc}
    bf08:	ldr	r0, [pc, #32]	; bf30 <rb_bh_create+0xfc>
    bf0c:	mov	r1, #147	; 0x93
    bf10:	add	r0, pc, r0
    bf14:	bl	bf38 <_rb_bh_fail>
    bf18:	bl	51fc <rb_outofmemory@plt>
    bf1c:	ldr	r0, [pc, #16]	; bf34 <rb_bh_create+0x100>
    bf20:	mov	r1, #151	; 0x97
    bf24:	add	r0, pc, r0
    bf28:	bl	bf38 <_rb_bh_fail>
    bf2c:	.word	0x00032a40
    bf30:	.word	0x0000e0f8
    bf34:	.word	0x0000e116

0000bf38 <_rb_bh_fail>:
    bf38:	push	{fp, lr}
    bf3c:	mov	fp, sp
    bf40:	mov	r3, r1
    bf44:	mov	r1, r0
    bf48:	ldr	r0, [pc, #16]	; bf60 <_rb_bh_fail+0x28>
    bf4c:	ldr	r2, [pc, #16]	; bf64 <_rb_bh_fail+0x2c>
    bf50:	add	r0, pc, r0
    bf54:	add	r2, pc, r2
    bf58:	bl	519c <rb_lib_log@plt>
    bf5c:	bl	4ca4 <abort@plt>
    bf60:	.word	0x0000e19e
    bf64:	.word	0x0000e0dd

0000bf68 <rb_bh_alloc>:
    bf68:	push	{fp, lr}
    bf6c:	mov	fp, sp
    bf70:	cmp	r0, #0
    bf74:	beq	bf90 <rb_bh_alloc+0x28>
    bf78:	ldr	r1, [r0, #12]
    bf7c:	mov	r0, #1
    bf80:	bl	4ea8 <calloc@plt>
    bf84:	cmp	r0, #0
    bf88:	popne	{fp, pc}
    bf8c:	bl	51fc <rb_outofmemory@plt>
    bf90:	ldr	r0, [pc, #8]	; bfa0 <rb_bh_alloc+0x38>
    bf94:	mov	r1, #186	; 0xba
    bf98:	add	r0, pc, r0
    bf9c:	bl	bf38 <_rb_bh_fail>
    bfa0:	.word	0x0000e0dd

0000bfa4 <rb_bh_free>:
    bfa4:	push	{fp, lr}
    bfa8:	mov	fp, sp
    bfac:	cmp	r0, #0
    bfb0:	beq	bfcc <rb_bh_free+0x28>
    bfb4:	cmp	r1, #0
    bfb8:	beq	bfe0 <rb_bh_free+0x3c>
    bfbc:	mov	r0, r1
    bfc0:	bl	4f98 <free@plt>
    bfc4:	mov	r0, #0
    bfc8:	pop	{fp, pc}
    bfcc:	ldr	r0, [pc, #32]	; bff4 <rb_bh_free+0x50>
    bfd0:	add	r0, pc, r0
    bfd4:	bl	519c <rb_lib_log@plt>
    bfd8:	mov	r0, #1
    bfdc:	pop	{fp, pc}
    bfe0:	ldr	r0, [pc, #16]	; bff8 <rb_bh_free+0x54>
    bfe4:	add	r0, pc, r0
    bfe8:	bl	519c <rb_lib_log@plt>
    bfec:	mov	r0, #1
    bff0:	pop	{fp, pc}
    bff4:	.word	0x0000e0c3
    bff8:	.word	0x0000e0cf

0000bffc <rb_bh_destroy>:
    bffc:	push	{r4, r5, fp, lr}
    c000:	add	fp, sp, #8
    c004:	cmp	r0, #0
    c008:	moveq	r5, #1
    c00c:	moveq	r0, r5
    c010:	popeq	{r4, r5, fp, pc}
    c014:	ldr	r1, [r0, #8]
    c018:	mov	r4, r0
    c01c:	ldr	r2, [r0, #4]
    c020:	ldr	r0, [pc, #88]	; c080 <rb_bh_destroy+0x84>
    c024:	mov	r5, #0
    c028:	ldr	r0, [pc, r0]
    c02c:	cmp	r1, #0
    c030:	streq	r2, [r0, #4]
    c034:	strne	r2, [r1, #4]
    c038:	mov	r3, r0
    c03c:	ldrne	r2, [r4, #4]
    c040:	cmp	r2, #0
    c044:	addne	r3, r2, #8
    c048:	str	r1, [r3]
    c04c:	str	r5, [r4, #4]
    c050:	str	r5, [r4, #8]
    c054:	ldr	r1, [r0, #8]
    c058:	sub	r1, r1, #1
    c05c:	str	r1, [r0, #8]
    c060:	ldr	r0, [r4, #44]	; 0x2c
    c064:	cmp	r0, #0
    c068:	beq	c070 <rb_bh_destroy+0x74>
    c06c:	bl	4f98 <free@plt>
    c070:	mov	r0, r4
    c074:	bl	4f98 <free@plt>
    c078:	mov	r0, r5
    c07c:	pop	{r4, r5, fp, pc}
    c080:	.word	0x000328d0

0000c084 <rb_bh_usage>:
    c084:	cmp	r1, #0
    c088:	movne	r0, #0
    c08c:	strne	r0, [r1]
    c090:	cmp	r2, #0
    c094:	movne	r0, #0
    c098:	strne	r0, [r2]
    c09c:	ldr	r0, [sp]
    c0a0:	cmp	r3, #0
    c0a4:	movne	r1, #0
    c0a8:	strne	r1, [r3]
    c0ac:	cmp	r0, #0
    c0b0:	ldrne	r1, [pc, #8]	; c0c0 <rb_bh_usage+0x3c>
    c0b4:	addne	r1, pc, r1
    c0b8:	strne	r1, [r0]
    c0bc:	bx	lr
    c0c0:	.word	0x0000e01e

0000c0c4 <rb_bh_usage_all>:
    c0c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    c0c8:	add	fp, sp, #24
    c0cc:	sub	sp, sp, #8
    c0d0:	cmp	r0, #0
    c0d4:	beq	c140 <rb_bh_usage_all+0x7c>
    c0d8:	mov	r5, r0
    c0dc:	ldr	r0, [pc, #100]	; c148 <rb_bh_usage_all+0x84>
    c0e0:	ldr	r0, [pc, r0]
    c0e4:	ldr	r6, [r0]
    c0e8:	cmp	r6, #0
    c0ec:	beq	c140 <rb_bh_usage_all+0x7c>
    c0f0:	ldr	r7, [pc, #84]	; c14c <rb_bh_usage_all+0x88>
    c0f4:	mov	r8, r1
    c0f8:	add	r7, pc, r7
    c0fc:	ldr	r0, [r6]
    c100:	ldr	r2, [r0, #12]
    c104:	ldr	r3, [r0, #16]
    c108:	ldr	r4, [r0, #28]
    c10c:	ldr	r1, [r0, #40]	; 0x28
    c110:	ldr	r0, [r0, #44]	; 0x2c
    c114:	cmp	r0, #0
    c118:	movne	r7, r0
    c11c:	mul	r0, r3, r4
    c120:	mul	r3, r0, r2
    c124:	sub	r0, r0, r1
    c128:	stm	sp, {r7, r8}
    c12c:	mul	r2, r0, r2
    c130:	blx	r5
    c134:	ldr	r6, [r6, #8]
    c138:	cmp	r6, #0
    c13c:	bne	c0fc <rb_bh_usage_all+0x38>
    c140:	sub	sp, fp, #24
    c144:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c148:	.word	0x00032818
    c14c:	.word	0x0000dfe7

0000c150 <rb_bh_total_usage>:
    c150:	push	{r4, r5, r6, sl, fp, lr}
    c154:	add	fp, sp, #16
    c158:	ldr	r2, [pc, #100]	; c1c4 <rb_bh_total_usage+0x74>
    c15c:	ldr	r2, [pc, r2]
    c160:	ldr	r2, [r2]
    c164:	cmp	r2, #0
    c168:	beq	c1a8 <rb_bh_total_usage+0x58>
    c16c:	mov	lr, #0
    c170:	mov	ip, #0
    c174:	ldr	r3, [r2]
    c178:	ldr	r2, [r2, #8]
    c17c:	ldr	r5, [r3, #16]
    c180:	ldr	r6, [r3, #28]
    c184:	ldr	r4, [r3, #12]
    c188:	ldr	r3, [r3, #40]	; 0x28
    c18c:	cmp	r2, #0
    c190:	mul	r5, r5, r6
    c194:	sub	r3, r5, r3
    c198:	mla	lr, r5, r4, lr
    c19c:	mla	ip, r3, r4, ip
    c1a0:	bne	c174 <rb_bh_total_usage+0x24>
    c1a4:	b	c1b0 <rb_bh_total_usage+0x60>
    c1a8:	mov	ip, #0
    c1ac:	mov	lr, #0
    c1b0:	cmp	r0, #0
    c1b4:	strne	lr, [r0]
    c1b8:	cmp	r1, #0
    c1bc:	strne	ip, [r1]
    c1c0:	pop	{r4, r5, r6, sl, fp, pc}
    c1c4:	.word	0x0003279c

0000c1c8 <rb_get_sockerr>:
    c1c8:	push	{r4, r5, r6, r7, fp, lr}
    c1cc:	add	fp, sp, #16
    c1d0:	sub	sp, sp, #16
    c1d4:	mov	r5, r0
    c1d8:	mov	r0, #0
    c1dc:	str	r0, [sp, #12]
    c1e0:	mov	r0, #4
    c1e4:	str	r0, [sp, #8]
    c1e8:	ldrb	r7, [r5, #17]
    c1ec:	bl	552c <__errno_location@plt>
    c1f0:	ldr	r6, [r0]
    c1f4:	tst	r7, #4
    c1f8:	moveq	r0, r6
    c1fc:	subeq	sp, fp, #16
    c200:	popeq	{r4, r5, r6, r7, fp, pc}
    c204:	mov	r4, r0
    c208:	ldr	r0, [r5, #12]
    c20c:	add	r1, sp, #8
    c210:	add	r3, sp, #12
    c214:	mov	r2, #4
    c218:	str	r1, [sp]
    c21c:	mov	r1, #1
    c220:	bl	54c0 <getsockopt@plt>
    c224:	mov	r1, r0
    c228:	ldr	r0, [sp, #12]
    c22c:	cmp	r0, #0
    c230:	moveq	r0, r6
    c234:	cmp	r1, #0
    c238:	movne	r0, r6
    c23c:	str	r0, [r4]
    c240:	sub	sp, fp, #16
    c244:	pop	{r4, r5, r6, r7, fp, pc}

0000c248 <rb_get_fd>:
    c248:	cmp	r0, #0
    c24c:	ldrne	r0, [r0, #12]
    c250:	mvneq	r0, #0
    c254:	bx	lr

0000c258 <rb_getmaxconnect>:
    c258:	ldr	r0, [pc, #8]	; c268 <rb_getmaxconnect+0x10>
    c25c:	ldr	r0, [pc, r0]
    c260:	ldr	r0, [r0]
    c264:	bx	lr
    c268:	.word	0x00020104

0000c26c <rb_set_buffers>:
    c26c:	push	{r4, r5, fp, lr}
    c270:	add	fp, sp, #8
    c274:	sub	sp, sp, #8
    c278:	cmp	r0, #0
    c27c:	str	r1, [sp, #4]
    c280:	beq	c2ac <rb_set_buffers+0x40>
    c284:	mov	r4, r0
    c288:	ldr	r0, [r0, #12]
    c28c:	mov	r5, #4
    c290:	add	r3, sp, #4
    c294:	mov	r1, #1
    c298:	mov	r2, #8
    c29c:	str	r5, [sp]
    c2a0:	bl	54e4 <setsockopt@plt>
    c2a4:	cmp	r0, #0
    c2a8:	beq	c2b8 <rb_set_buffers+0x4c>
    c2ac:	mov	r0, #0
    c2b0:	sub	sp, fp, #8
    c2b4:	pop	{r4, r5, fp, pc}
    c2b8:	ldr	r0, [r4, #12]
    c2bc:	add	r3, sp, #4
    c2c0:	mov	r1, #1
    c2c4:	mov	r2, #7
    c2c8:	str	r5, [sp]
    c2cc:	bl	54e4 <setsockopt@plt>
    c2d0:	clz	r0, r0
    c2d4:	lsr	r0, r0, #5
    c2d8:	sub	sp, fp, #8
    c2dc:	pop	{r4, r5, fp, pc}

0000c2e0 <rb_set_nb>:
    c2e0:	push	{r4, r5, fp, lr}
    c2e4:	add	fp, sp, #8
    c2e8:	cmp	r0, #0
    c2ec:	beq	c350 <rb_set_nb+0x70>
    c2f0:	ldr	r4, [r0, #12]
    c2f4:	ldr	r1, [pc, #96]	; c35c <rb_set_nb+0x7c>
    c2f8:	add	r1, pc, r1
    c2fc:	ldr	r1, [r1, #40]	; 0x28
    c300:	blx	r1
    c304:	mov	r5, r0
    c308:	cmp	r0, #0
    c30c:	bne	c354 <rb_set_nb+0x74>
    c310:	mov	r0, r4
    c314:	mov	r1, #3
    c318:	mov	r2, #0
    c31c:	mov	r5, #0
    c320:	bl	5448 <fcntl@plt>
    c324:	cmn	r0, #1
    c328:	beq	c354 <rb_set_nb+0x74>
    c32c:	orr	r2, r0, #2048	; 0x800
    c330:	mov	r0, r4
    c334:	mov	r1, #4
    c338:	bl	5448 <fcntl@plt>
    c33c:	add	r1, r0, #1
    c340:	cmn	r0, #1
    c344:	movwne	r1, #1
    c348:	mov	r0, r1
    c34c:	pop	{r4, r5, fp, pc}
    c350:	mov	r5, #0
    c354:	mov	r0, r5
    c358:	pop	{r4, r5, fp, pc}
    c35c:	.word	0x00032618

0000c360 <rb_setup_fd>:
    c360:	ldr	r1, [pc, #8]	; c370 <rb_setup_fd+0x10>
    c364:	add	r1, pc, r1
    c368:	ldr	r1, [r1, #40]	; 0x28
    c36c:	bx	r1
    c370:	.word	0x000325ac

0000c374 <rb_settimeout>:
    c374:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    c378:	add	fp, sp, #24
    c37c:	cmp	r0, #0
    c380:	beq	c480 <rb_settimeout+0x10c>
    c384:	ldr	r5, [r0, #44]	; 0x2c
    c388:	mov	r6, r2
    c38c:	mov	r4, r0
    c390:	cmp	r2, #0
    c394:	beq	c410 <rb_settimeout+0x9c>
    c398:	mov	r7, r3
    c39c:	mov	r8, r1
    c3a0:	cmp	r5, #0
    c3a4:	bne	c3c4 <rb_settimeout+0x50>
    c3a8:	mov	r0, #1
    c3ac:	mov	r1, #28
    c3b0:	bl	4ea8 <calloc@plt>
    c3b4:	cmp	r0, #0
    c3b8:	beq	c4e8 <rb_settimeout+0x174>
    c3bc:	mov	r5, r0
    c3c0:	str	r0, [r4, #44]	; 0x2c
    c3c4:	str	r4, [r5]
    c3c8:	bl	5088 <rb_current_time@plt>
    c3cc:	mov	r1, #0
    c3d0:	add	r0, r0, r8
    c3d4:	str	r6, [r5, #20]
    c3d8:	str	r7, [r5, #24]
    c3dc:	str	r1, [r5, #8]
    c3e0:	str	r0, [r5, #16]
    c3e4:	str	r5, [r5, #4]
    c3e8:	add	r0, r5, #4
    c3ec:	ldr	r4, [pc, #256]	; c4f4 <rb_settimeout+0x180>
    c3f0:	add	r4, pc, r4
    c3f4:	ldr	r1, [r4, #44]	; 0x2c
    c3f8:	cmp	r1, #0
    c3fc:	str	r1, [r5, #12]
    c400:	beq	c434 <rb_settimeout+0xc0>
    c404:	add	r1, r1, #4
    c408:	str	r0, [r1]
    c40c:	b	c444 <rb_settimeout+0xd0>
    c410:	cmp	r5, #0
    c414:	beq	c480 <rb_settimeout+0x10c>
    c418:	ldr	r0, [r5, #12]
    c41c:	ldr	r1, [r5, #8]
    c420:	cmp	r0, #0
    c424:	beq	c484 <rb_settimeout+0x110>
    c428:	str	r1, [r0, #4]
    c42c:	ldr	r1, [r5, #8]
    c430:	b	c490 <rb_settimeout+0x11c>
    c434:	mov	r1, r4
    c438:	ldr	r2, [r1, #48]!	; 0x30
    c43c:	cmp	r2, #0
    c440:	streq	r0, [r1]
    c444:	str	r0, [r4, #44]	; 0x2c
    c448:	ldr	r1, [r4, #52]	; 0x34
    c44c:	ldr	r0, [r4, #4]
    c450:	add	r1, r1, #1
    c454:	cmp	r0, #0
    c458:	str	r1, [r4, #52]	; 0x34
    c45c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    c460:	ldr	r1, [pc, #144]	; c4f8 <rb_settimeout+0x184>
    c464:	mov	r2, #0
    c468:	mov	r3, #5
    c46c:	ldr	r1, [pc, r1]
    c470:	ldr	r0, [pc, #132]	; c4fc <rb_settimeout+0x188>
    c474:	add	r0, pc, r0
    c478:	bl	5358 <rb_event_add@plt>
    c47c:	str	r0, [r4, #4]
    c480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c484:	ldr	r2, [pc, #96]	; c4ec <rb_settimeout+0x178>
    c488:	add	r2, pc, r2
    c48c:	str	r1, [r2, #48]	; 0x30
    c490:	ldr	r6, [pc, #88]	; c4f0 <rb_settimeout+0x17c>
    c494:	add	r2, r1, #8
    c498:	cmp	r1, #0
    c49c:	mov	r7, #0
    c4a0:	add	r6, pc, r6
    c4a4:	addeq	r2, r6, #44	; 0x2c
    c4a8:	str	r0, [r2]
    c4ac:	str	r7, [r5, #8]
    c4b0:	str	r7, [r5, #12]
    c4b4:	ldr	r0, [r6, #52]	; 0x34
    c4b8:	sub	r0, r0, #1
    c4bc:	str	r0, [r6, #52]	; 0x34
    c4c0:	mov	r0, r5
    c4c4:	bl	4f98 <free@plt>
    c4c8:	ldr	r0, [r6, #52]	; 0x34
    c4cc:	str	r7, [r4, #44]	; 0x2c
    c4d0:	cmp	r0, #0
    c4d4:	bne	c480 <rb_settimeout+0x10c>
    c4d8:	ldr	r0, [r6, #4]
    c4dc:	bl	4d70 <rb_event_delete@plt>
    c4e0:	str	r7, [r6, #4]
    c4e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c4e8:	bl	51fc <rb_outofmemory@plt>
    c4ec:	.word	0x00032488
    c4f0:	.word	0x00032470
    c4f4:	.word	0x00032520
    c4f8:	.word	0x0001fea4
    c4fc:	.word	0x0000dca0

0000c500 <rb_checktimeouts>:
    c500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c504:	add	fp, sp, #28
    c508:	sub	sp, sp, #4
    c50c:	ldr	r8, [pc, #180]	; c5c8 <rb_checktimeouts+0xc8>
    c510:	add	r8, pc, r8
    c514:	ldr	r7, [r8, #44]	; 0x2c
    c518:	cmp	r7, #0
    c51c:	beq	c5c0 <rb_checktimeouts+0xc0>
    c520:	mov	r9, #0
    c524:	ldr	r5, [r7]
    c528:	ldr	r7, [r7, #8]
    c52c:	ldr	r4, [r5]
    c530:	cmp	r4, #0
    c534:	ldrbne	r0, [r4, #16]
    c538:	tstne	r0, #1
    c53c:	bne	c54c <rb_checktimeouts+0x4c>
    c540:	cmp	r7, #0
    c544:	bne	c524 <rb_checktimeouts+0x24>
    c548:	b	c5c0 <rb_checktimeouts+0xc0>
    c54c:	ldr	r6, [r5, #16]
    c550:	bl	5088 <rb_current_time@plt>
    c554:	cmp	r6, r0
    c558:	bge	c540 <rb_checktimeouts+0x40>
    c55c:	ldr	r0, [r5, #12]
    c560:	ldr	r1, [r5, #8]
    c564:	ldr	sl, [r5, #20]
    c568:	ldr	r6, [r5, #24]
    c56c:	cmp	r0, #0
    c570:	streq	r1, [r8, #48]	; 0x30
    c574:	strne	r1, [r0, #4]
    c578:	ldrne	r1, [r5, #8]
    c57c:	add	r2, r1, #8
    c580:	cmp	r1, #0
    c584:	addeq	r2, r8, #44	; 0x2c
    c588:	str	r0, [r2]
    c58c:	str	r9, [r5, #8]
    c590:	str	r9, [r5, #12]
    c594:	ldr	r0, [r8, #52]	; 0x34
    c598:	sub	r0, r0, #1
    c59c:	str	r0, [r8, #52]	; 0x34
    c5a0:	mov	r0, r5
    c5a4:	str	r9, [r4, #44]	; 0x2c
    c5a8:	bl	4f98 <free@plt>
    c5ac:	mov	r0, r4
    c5b0:	mov	r1, r6
    c5b4:	blx	sl
    c5b8:	cmp	r7, #0
    c5bc:	bne	c524 <rb_checktimeouts+0x24>
    c5c0:	sub	sp, fp, #28
    c5c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5c8:	.word	0x00032400

0000c5cc <rb_bind>:
    c5cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    c5d0:	add	fp, sp, #24
    c5d4:	sub	sp, sp, #16
    c5d8:	mov	r6, r0
    c5dc:	mov	r0, #1
    c5e0:	mov	r5, r1
    c5e4:	mov	r7, #4
    c5e8:	add	r3, sp, #4
    c5ec:	mov	r1, #1
    c5f0:	mov	r2, #2
    c5f4:	str	r0, [sp, #4]
    c5f8:	ldr	r0, [r6, #12]
    c5fc:	str	r7, [sp]
    c600:	bl	54e4 <setsockopt@plt>
    c604:	cmp	r0, #0
    c608:	beq	c63c <rb_bind+0x70>
    c60c:	mov	r4, r0
    c610:	mov	r0, #0
    c614:	ldr	r8, [r6, #12]
    c618:	str	r7, [sp, #8]
    c61c:	str	r0, [sp, #12]
    c620:	ldrb	r5, [r6, #17]
    c624:	bl	552c <__errno_location@plt>
    c628:	ldr	r7, [r0]
    c62c:	tst	r5, #4
    c630:	bne	c668 <rb_bind+0x9c>
    c634:	mov	r0, r7
    c638:	b	c6a4 <rb_bind+0xd8>
    c63c:	ldrh	r0, [r5]
    c640:	mov	r2, #28
    c644:	mov	r1, r5
    c648:	cmp	r0, #2
    c64c:	ldr	r0, [r6, #12]
    c650:	movweq	r2, #16
    c654:	bl	5190 <bind@plt>
    c658:	mov	r4, r0
    c65c:	mov	r0, r4
    c660:	sub	sp, fp, #24
    c664:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c668:	mov	r6, r0
    c66c:	add	r0, sp, #8
    c670:	add	r3, sp, #12
    c674:	mov	r1, #1
    c678:	mov	r2, #4
    c67c:	str	r0, [sp]
    c680:	mov	r0, r8
    c684:	bl	54c0 <getsockopt@plt>
    c688:	mov	r1, r0
    c68c:	ldr	r0, [sp, #12]
    c690:	cmp	r0, #0
    c694:	moveq	r0, r7
    c698:	cmp	r1, #0
    c69c:	movne	r0, r7
    c6a0:	str	r0, [r6]
    c6a4:	bl	4c80 <strerror@plt>
    c6a8:	mov	r2, r0
    c6ac:	ldr	r0, [pc, #20]	; c6c8 <rb_bind+0xfc>
    c6b0:	mov	r1, r8
    c6b4:	add	r0, pc, r0
    c6b8:	bl	519c <rb_lib_log@plt>
    c6bc:	mov	r0, r4
    c6c0:	sub	sp, fp, #24
    c6c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c6c8:	.word	0x0000dc27

0000c6cc <rb_sctp_bindx>:
    c6cc:	mvn	r0, #0
    c6d0:	bx	lr

0000c6d4 <rb_inet_get_proto>:
    c6d4:	mov	r0, #6
    c6d8:	bx	lr

0000c6dc <rb_accept_tcp>:
    c6dc:	push	{r4, r5, r6, r7, fp, lr}
    c6e0:	add	fp, sp, #16
    c6e4:	cmp	r0, #0
    c6e8:	popeq	{r4, r5, r6, r7, fp, pc}
    c6ec:	mov	r6, r1
    c6f0:	mov	r5, r0
    c6f4:	mov	r0, #1
    c6f8:	mov	r1, #144	; 0x90
    c6fc:	mov	r4, r3
    c700:	mov	r7, r2
    c704:	bl	4ea8 <calloc@plt>
    c708:	cmp	r0, #0
    c70c:	beq	c730 <rb_accept_tcp+0x54>
    c710:	str	r0, [r5, #52]	; 0x34
    c714:	str	r7, [r0, #132]	; 0x84
    c718:	str	r6, [r0, #136]	; 0x88
    c71c:	str	r4, [r0, #140]	; 0x8c
    c720:	mov	r0, r5
    c724:	mov	r1, #0
    c728:	pop	{r4, r5, r6, r7, fp, lr}
    c72c:	b	c734 <rb_accept_tryaccept>
    c730:	bl	51fc <rb_outofmemory@plt>

0000c734 <rb_accept_tryaccept>:
    c734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c738:	add	fp, sp, #28
    c73c:	sub	sp, sp, #4
    c740:	vpush	{d8-d9}
    c744:	sub	sp, sp, #160	; 0xa0
    c748:	add	r5, sp, #32
    c74c:	mov	r4, r0
    c750:	vmov.i32	q4, #0	; 0x00000000
    c754:	mov	r1, #112	; 0x70
    c758:	add	r2, sp, #28
    c75c:	add	r0, r5, #96	; 0x60
    c760:	add	sl, r5, #32
    c764:	add	r8, r5, #16
    c768:	str	r0, [sp, #24]
    c76c:	vst1.64	{d8-d9}, [r0]
    c770:	add	r0, r5, #80	; 0x50
    c774:	vst1.64	{d8-d9}, [sl]
    c778:	vst1.64	{d8-d9}, [r8]
    c77c:	str	r0, [sp, #20]
    c780:	vst1.64	{d8-d9}, [r0]
    c784:	add	r0, r5, #64	; 0x40
    c788:	str	r0, [sp, #16]
    c78c:	vst1.64	{d8-d9}, [r0]
    c790:	add	r0, r5, #48	; 0x30
    c794:	str	r0, [sp, #12]
    c798:	vst1.64	{d8-d9}, [r0]
    c79c:	mov	r0, r5
    c7a0:	vst1.64	{d8-d9}, [r0], r1
    c7a4:	mov	r1, r5
    c7a8:	vst1.64	{d8-d9}, [r0]
    c7ac:	mov	r0, #128	; 0x80
    c7b0:	str	r0, [sp, #28]
    c7b4:	ldr	r0, [r4, #12]
    c7b8:	bl	5010 <accept@plt>
    c7bc:	cmp	r0, #0
    c7c0:	blt	c9a8 <rb_accept_tryaccept+0x274>
    c7c4:	mov	r9, r0
    c7c8:	add	r0, r5, #8
    c7cc:	str	r0, [sp, #8]
    c7d0:	b	c800 <rb_accept_tryaccept+0xcc>
    c7d4:	ldr	r1, [r6, #12]
    c7d8:	ldr	r0, [pc, #528]	; c9f0 <rb_accept_tryaccept+0x2bc>
    c7dc:	add	r0, pc, r0
    c7e0:	bl	519c <rb_lib_log@plt>
    c7e4:	mov	r0, r6
    c7e8:	bl	5100 <rb_close@plt>
    c7ec:	ldr	r0, [sp, #40]	; 0x28
    c7f0:	ldr	r1, [sp, #44]	; 0x2c
    c7f4:	orrs	r0, r0, r1
    c7f8:	beq	c888 <rb_accept_tryaccept+0x154>
    c7fc:	b	c8bc <rb_accept_tryaccept+0x188>
    c800:	ldrb	r0, [r4, #17]
    c804:	ldr	r2, [pc, #464]	; c9dc <rb_accept_tryaccept+0x2a8>
    c808:	and	r0, r0, #128	; 0x80
    c80c:	add	r2, pc, r2
    c810:	orr	r1, r0, #4
    c814:	mov	r0, r9
    c818:	bl	52e0 <rb_open@plt>
    c81c:	cmp	r0, #0
    c820:	beq	c91c <rb_accept_tryaccept+0x1e8>
    c824:	mov	r6, r0
    c828:	ldr	r7, [r0, #12]
    c82c:	ldr	r0, [pc, #440]	; c9ec <rb_accept_tryaccept+0x2b8>
    c830:	add	r0, pc, r0
    c834:	ldr	r1, [r0, #40]	; 0x28
    c838:	mov	r0, r6
    c83c:	blx	r1
    c840:	cmp	r0, #0
    c844:	bne	c878 <rb_accept_tryaccept+0x144>
    c848:	mov	r0, r7
    c84c:	mov	r1, #3
    c850:	mov	r2, #0
    c854:	bl	5448 <fcntl@plt>
    c858:	cmn	r0, #1
    c85c:	beq	c7d4 <rb_accept_tryaccept+0xa0>
    c860:	orr	r2, r0, #2048	; 0x800
    c864:	mov	r0, r7
    c868:	mov	r1, #4
    c86c:	bl	5448 <fcntl@plt>
    c870:	cmn	r0, #1
    c874:	beq	c7d4 <rb_accept_tryaccept+0xa0>
    c878:	ldr	r0, [sp, #40]	; 0x28
    c87c:	ldr	r1, [sp, #44]	; 0x2c
    c880:	orrs	r0, r0, r1
    c884:	bne	c8bc <rb_accept_tryaccept+0x188>
    c888:	ldrh	r0, [sp, #32]
    c88c:	cmp	r0, #10
    c890:	ldreq	r0, [sp, #48]	; 0x30
    c894:	cmneq	r0, #65536	; 0x10000
    c898:	bne	c8bc <rb_accept_tryaccept+0x188>
    c89c:	mov	r0, #2
    c8a0:	mov	r1, #0
    c8a4:	strh	r0, [sp, #32]
    c8a8:	ldr	r0, [sp, #52]	; 0x34
    c8ac:	str	r0, [sp, #36]	; 0x24
    c8b0:	ldr	r0, [sp, #8]
    c8b4:	str	r1, [r0, #4]
    c8b8:	str	r1, [r0]
    c8bc:	ldr	r0, [r4, #52]	; 0x34
    c8c0:	ldr	r7, [r0, #136]	; 0x88
    c8c4:	cmp	r7, #0
    c8c8:	beq	c8e8 <rb_accept_tryaccept+0x1b4>
    c8cc:	ldr	r3, [r0, #140]	; 0x8c
    c8d0:	ldr	r2, [sp, #28]
    c8d4:	mov	r0, r6
    c8d8:	mov	r1, r5
    c8dc:	blx	r7
    c8e0:	cmp	r0, #0
    c8e4:	beq	c94c <rb_accept_tryaccept+0x218>
    c8e8:	ldrb	r0, [r4, #17]
    c8ec:	tst	r0, #32
    c8f0:	bne	c938 <rb_accept_tryaccept+0x204>
    c8f4:	ldr	r0, [r4, #52]	; 0x34
    c8f8:	ldr	r3, [sp, #28]
    c8fc:	mov	r1, #0
    c900:	mov	r2, r5
    c904:	ldr	r7, [r0, #132]	; 0x84
    c908:	ldr	r0, [r0, #140]	; 0x8c
    c90c:	str	r0, [sp]
    c910:	mov	r0, r6
    c914:	blx	r7
    c918:	b	c94c <rb_accept_tryaccept+0x218>
    c91c:	ldr	r0, [pc, #188]	; c9e0 <rb_accept_tryaccept+0x2ac>
    c920:	mov	r1, r9
    c924:	add	r0, pc, r0
    c928:	bl	519c <rb_lib_log@plt>
    c92c:	mov	r0, r9
    c930:	bl	51c0 <close@plt>
    c934:	b	c94c <rb_accept_tryaccept+0x218>
    c938:	ldr	r3, [sp, #28]
    c93c:	mov	r0, r4
    c940:	mov	r1, r6
    c944:	mov	r2, r5
    c948:	bl	10a0c <rb_ssl_accept_setup>
    c94c:	mov	r0, r5
    c950:	mov	r1, #112	; 0x70
    c954:	vst1.64	{d8-d9}, [sl]
    c958:	vst1.64	{d8-d9}, [r8]
    c95c:	add	r2, sp, #28
    c960:	vst1.64	{d8-d9}, [r0], r1
    c964:	mov	r1, r5
    c968:	vst1.64	{d8-d9}, [r0]
    c96c:	ldr	r0, [sp, #24]
    c970:	vst1.64	{d8-d9}, [r0]
    c974:	ldr	r0, [sp, #20]
    c978:	vst1.64	{d8-d9}, [r0]
    c97c:	ldr	r0, [sp, #16]
    c980:	vst1.64	{d8-d9}, [r0]
    c984:	ldr	r0, [sp, #12]
    c988:	vst1.64	{d8-d9}, [r0]
    c98c:	mov	r0, #128	; 0x80
    c990:	str	r0, [sp, #28]
    c994:	ldr	r0, [r4, #12]
    c998:	bl	5010 <accept@plt>
    c99c:	mov	r9, r0
    c9a0:	cmp	r0, #0
    c9a4:	bge	c800 <rb_accept_tryaccept+0xcc>
    c9a8:	ldr	r0, [pc, #52]	; c9e4 <rb_accept_tryaccept+0x2b0>
    c9ac:	mov	r1, #1
    c9b0:	mov	r3, #0
    c9b4:	add	r0, pc, r0
    c9b8:	ldr	r7, [r0, #32]
    c9bc:	ldr	r2, [pc, #36]	; c9e8 <rb_accept_tryaccept+0x2b4>
    c9c0:	mov	r0, r4
    c9c4:	add	r2, pc, r2
    c9c8:	blx	r7
    c9cc:	sub	sp, fp, #48	; 0x30
    c9d0:	vpop	{d8-d9}
    c9d4:	add	sp, sp, #4
    c9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9dc:	.word	0x0000db0e
    c9e0:	.word	0x0000da0a
    c9e4:	.word	0x00031f5c
    c9e8:	.word	0xfffffd68
    c9ec:	.word	0x000320e0
    c9f0:	.word	0x0000db98

0000c9f4 <rb_connect_tcp>:
    c9f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    c9f8:	add	fp, sp, #24
    c9fc:	cmp	r0, #0
    ca00:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    ca04:	ldr	r8, [fp, #12]
    ca08:	ldr	r9, [fp, #8]
    ca0c:	mov	r7, r1
    ca10:	mov	r4, r0
    ca14:	mov	r0, #1
    ca18:	mov	r1, #268	; 0x10c
    ca1c:	mov	r5, r3
    ca20:	mov	r6, r2
    ca24:	bl	4ea8 <calloc@plt>
    ca28:	cmp	r0, #0
    ca2c:	beq	cbb4 <rb_connect_tcp+0x1c0>
    ca30:	str	r0, [r4, #48]	; 0x30
    ca34:	str	r5, [r0, #260]	; 0x104
    ca38:	str	r9, [r0, #264]	; 0x108
    ca3c:	add	r0, r0, #128	; 0x80
    ca40:	mov	r1, r7
    ca44:	mov	r2, #128	; 0x80
    ca48:	bl	50a0 <memcpy@plt>
    ca4c:	cmp	r6, #0
    ca50:	beq	ca78 <rb_connect_tcp+0x84>
    ca54:	ldrh	r0, [r6]
    ca58:	mov	r2, #28
    ca5c:	mov	r1, r6
    ca60:	cmp	r0, #2
    ca64:	ldr	r0, [r4, #12]
    ca68:	movweq	r2, #16
    ca6c:	bl	5190 <bind@plt>
    ca70:	cmp	r0, #0
    ca74:	blt	cb60 <rb_connect_tcp+0x16c>
    ca78:	ldr	r2, [pc, #312]	; cbb8 <rb_connect_tcp+0x1c4>
    ca7c:	mov	r0, r4
    ca80:	mov	r1, r8
    ca84:	mov	r3, #0
    ca88:	add	r2, pc, r2
    ca8c:	bl	4cc8 <rb_settimeout@plt>
    ca90:	ldr	r1, [r4, #48]	; 0x30
    ca94:	ldr	r0, [r4, #12]
    ca98:	mov	r2, #28
    ca9c:	ldrh	r3, [r1, #128]!	; 0x80
    caa0:	cmp	r3, #2
    caa4:	movweq	r2, #16
    caa8:	bl	4cb0 <connect@plt>
    caac:	cmn	r0, #1
    cab0:	ble	cac4 <rb_connect_tcp+0xd0>
    cab4:	mov	r0, r4
    cab8:	mov	r1, #0
    cabc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    cac0:	b	cbc4 <rb_connect_callback>
    cac4:	bl	552c <__errno_location@plt>
    cac8:	ldr	r0, [r0]
    cacc:	sub	r1, r0, #85	; 0x55
    cad0:	cmp	r1, #30
    cad4:	bhi	cb70 <rb_connect_tcp+0x17c>
    cad8:	add	r0, pc, #4
    cadc:	ldr	r1, [r0, r1, lsl #2]
    cae0:	add	pc, r0, r1
    cae4:	.word	0x00000098
    cae8:	.word	0x000000c0
    caec:	.word	0x000000c0
    caf0:	.word	0x000000c0
    caf4:	.word	0x000000c0
    caf8:	.word	0x000000c0
    cafc:	.word	0x000000c0
    cb00:	.word	0x000000c0
    cb04:	.word	0x000000c0
    cb08:	.word	0x000000c0
    cb0c:	.word	0x000000c0
    cb10:	.word	0x000000c0
    cb14:	.word	0x000000c0
    cb18:	.word	0x000000c0
    cb1c:	.word	0x000000c0
    cb20:	.word	0x000000c0
    cb24:	.word	0x000000c0
    cb28:	.word	0x000000c0
    cb2c:	.word	0x000000c0
    cb30:	.word	0x000000c0
    cb34:	.word	0x00000098
    cb38:	.word	0xffffffd0
    cb3c:	.word	0x000000c0
    cb40:	.word	0x000000c0
    cb44:	.word	0x000000c0
    cb48:	.word	0x000000c0
    cb4c:	.word	0x000000c0
    cb50:	.word	0x000000c0
    cb54:	.word	0x000000c0
    cb58:	.word	0x000000c0
    cb5c:	.word	0x00000098
    cb60:	mov	r0, r4
    cb64:	mov	r1, #1
    cb68:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    cb6c:	b	cbc4 <rb_connect_callback>
    cb70:	cmp	r0, #4
    cb74:	cmpne	r0, #11
    cb78:	bne	cba4 <rb_connect_tcp+0x1b0>
    cb7c:	ldr	r0, [pc, #56]	; cbbc <rb_connect_tcp+0x1c8>
    cb80:	mov	r1, #2
    cb84:	mov	r3, #0
    cb88:	add	r0, pc, r0
    cb8c:	ldr	ip, [r0, #32]
    cb90:	ldr	r2, [pc, #40]	; cbc0 <rb_connect_tcp+0x1cc>
    cb94:	mov	r0, r4
    cb98:	add	r2, pc, r2
    cb9c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    cba0:	bx	ip
    cba4:	mov	r0, r4
    cba8:	mov	r1, #4
    cbac:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    cbb0:	b	cbc4 <rb_connect_callback>
    cbb4:	bl	51fc <rb_outofmemory@plt>
    cbb8:	.word	0x00000238
    cbbc:	.word	0x00031d88
    cbc0:	.word	0x00000184

0000cbc4 <rb_connect_callback>:
    cbc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbc8:	add	fp, sp, #28
    cbcc:	sub	sp, sp, #4
    cbd0:	mov	r4, r1
    cbd4:	mov	r5, r0
    cbd8:	bl	552c <__errno_location@plt>
    cbdc:	cmp	r5, #0
    cbe0:	beq	cbfc <rb_connect_callback+0x38>
    cbe4:	mov	r6, r0
    cbe8:	ldr	r0, [r5, #48]	; 0x30
    cbec:	cmp	r0, #0
    cbf0:	ldrne	r3, [r0, #260]	; 0x104
    cbf4:	cmpne	r3, #0
    cbf8:	bne	cc04 <rb_connect_callback+0x40>
    cbfc:	sub	sp, fp, #28
    cc00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc04:	mov	r1, #0
    cc08:	ldr	r8, [r6]
    cc0c:	str	r1, [r0, #260]	; 0x104
    cc10:	ldr	r9, [r0, #264]	; 0x108
    cc14:	ldr	r0, [r5, #44]	; 0x2c
    cc18:	cmp	r0, #0
    cc1c:	beq	cca4 <rb_connect_callback+0xe0>
    cc20:	ldr	r1, [r0, #12]
    cc24:	ldr	r2, [r0, #8]
    cc28:	str	r3, [sp]
    cc2c:	cmp	r1, #0
    cc30:	beq	cc40 <rb_connect_callback+0x7c>
    cc34:	str	r2, [r1, #4]
    cc38:	ldr	r2, [r0, #8]
    cc3c:	b	cc4c <rb_connect_callback+0x88>
    cc40:	ldr	r3, [pc, #120]	; ccc0 <rb_connect_callback+0xfc>
    cc44:	add	r3, pc, r3
    cc48:	str	r2, [r3, #48]	; 0x30
    cc4c:	ldr	r7, [pc, #112]	; ccc4 <rb_connect_callback+0x100>
    cc50:	add	r3, r2, #8
    cc54:	cmp	r2, #0
    cc58:	mov	sl, #0
    cc5c:	add	r7, pc, r7
    cc60:	addeq	r3, r7, #44	; 0x2c
    cc64:	str	r1, [r3]
    cc68:	str	sl, [r0, #8]
    cc6c:	str	sl, [r0, #12]
    cc70:	ldr	r1, [r7, #52]	; 0x34
    cc74:	sub	r1, r1, #1
    cc78:	str	r1, [r7, #52]	; 0x34
    cc7c:	bl	4f98 <free@plt>
    cc80:	ldr	r0, [r7, #52]	; 0x34
    cc84:	ldr	r3, [sp]
    cc88:	str	sl, [r5, #44]	; 0x2c
    cc8c:	cmp	r0, #0
    cc90:	bne	cca4 <rb_connect_callback+0xe0>
    cc94:	ldr	r0, [r7, #4]
    cc98:	bl	4d70 <rb_event_delete@plt>
    cc9c:	ldr	r3, [sp]
    cca0:	str	sl, [r7, #4]
    cca4:	str	r8, [r6]
    cca8:	mov	r0, r5
    ccac:	mov	r1, r4
    ccb0:	mov	r2, r9
    ccb4:	sub	sp, fp, #28
    ccb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccbc:	bx	r3
    ccc0:	.word	0x00031ccc
    ccc4:	.word	0x00031cb4

0000ccc8 <rb_connect_timeout>:
    ccc8:	mov	r1, #3
    cccc:	b	cbc4 <rb_connect_callback>

0000ccd0 <rb_ignore_errno>:
    ccd0:	sub	r2, r0, #85	; 0x55
    ccd4:	mov	r1, r0
    ccd8:	mov	r0, #1
    ccdc:	cmp	r2, #30
    cce0:	bhi	ccf8 <rb_ignore_errno+0x28>
    cce4:	movw	r3, #1
    cce8:	mov	ip, #1
    ccec:	movt	r3, #16400	; 0x4010
    ccf0:	tst	r3, ip, lsl r2
    ccf4:	bxne	lr
    ccf8:	cmp	r1, #4
    ccfc:	cmpne	r1, #11
    cd00:	bne	cd08 <rb_ignore_errno+0x38>
    cd04:	bx	lr
    cd08:	mov	r0, #0
    cd0c:	bx	lr

0000cd10 <rb_setselect>:
    cd10:	ldr	ip, [pc, #8]	; cd20 <rb_setselect+0x10>
    cd14:	add	ip, pc, ip
    cd18:	ldr	ip, [ip, #32]
    cd1c:	bx	ip
    cd20:	.word	0x00031bfc

0000cd24 <rb_connect_outcome>:
    cd24:	push	{r4, r5, fp, lr}
    cd28:	add	fp, sp, #8
    cd2c:	sub	sp, sp, #16
    cd30:	mov	r4, r0
    cd34:	mov	r0, #0
    cd38:	str	r0, [sp, #12]
    cd3c:	mov	r0, #4
    cd40:	cmp	r4, #0
    cd44:	str	r0, [sp, #8]
    cd48:	beq	cd60 <rb_connect_outcome+0x3c>
    cd4c:	ldr	r0, [r4, #48]	; 0x30
    cd50:	cmp	r0, #0
    cd54:	ldrne	r0, [r0, #260]	; 0x104
    cd58:	cmpne	r0, #0
    cd5c:	bne	cd68 <rb_connect_outcome+0x44>
    cd60:	sub	sp, fp, #8
    cd64:	pop	{r4, r5, fp, pc}
    cd68:	ldr	r0, [r4, #12]
    cd6c:	add	r1, sp, #8
    cd70:	add	r3, sp, #12
    cd74:	mov	r2, #4
    cd78:	str	r1, [sp]
    cd7c:	mov	r1, #1
    cd80:	bl	54c0 <getsockopt@plt>
    cd84:	cmp	r0, #0
    cd88:	blt	cda4 <rb_connect_outcome+0x80>
    cd8c:	ldr	r5, [sp, #12]
    cd90:	cmp	r5, #0
    cd94:	beq	cda4 <rb_connect_outcome+0x80>
    cd98:	bl	552c <__errno_location@plt>
    cd9c:	str	r5, [r0]
    cda0:	b	cdc0 <rb_connect_outcome+0x9c>
    cda4:	cmn	r0, #1
    cda8:	ble	cdc0 <rb_connect_outcome+0x9c>
    cdac:	mov	r0, r4
    cdb0:	mov	r1, #0
    cdb4:	bl	cbc4 <rb_connect_callback>
    cdb8:	sub	sp, fp, #8
    cdbc:	pop	{r4, r5, fp, pc}
    cdc0:	mov	r0, r4
    cdc4:	mov	r1, #4
    cdc8:	bl	cbc4 <rb_connect_callback>
    cdcc:	sub	sp, fp, #8
    cdd0:	pop	{r4, r5, fp, pc}

0000cdd4 <rb_connect_sctp>:
    cdd4:	mov	r1, #4
    cdd8:	b	cbc4 <rb_connect_callback>

0000cddc <rb_connect_sockaddr>:
    cddc:	cmp	r0, #0
    cde0:	moveq	r0, #0
    cde4:	bxeq	lr
    cde8:	push	{fp, lr}
    cdec:	mov	fp, sp
    cdf0:	ldr	r0, [r0, #48]	; 0x30
    cdf4:	add	r3, r0, #128	; 0x80
    cdf8:	mov	r0, r1
    cdfc:	mov	r1, r3
    ce00:	bl	50a0 <memcpy@plt>
    ce04:	mov	r0, #1
    ce08:	pop	{fp, pc}

0000ce0c <rb_errstr>:
    ce0c:	cmp	r0, #6
    ce10:	ldrls	r1, [pc, #24]	; ce30 <rb_errstr+0x24>
    ce14:	addls	r1, pc, r1
    ce18:	ldrls	r0, [r1, r0, lsl #2]
    ce1c:	bxls	lr
    ce20:	ldr	r0, [pc, #4]	; ce2c <rb_errstr+0x20>
    ce24:	add	r0, pc, r0
    ce28:	bx	lr
    ce2c:	.word	0x0000d301
    ce30:	.word	0x0001ec20

0000ce34 <rb_socketpair>:
    ce34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    ce38:	add	fp, sp, #24
    ce3c:	sub	sp, sp, #8
    ce40:	ldr	r7, [pc, #468]	; d01c <rb_socketpair+0x1e8>
    ce44:	mov	r4, r3
    ce48:	add	r7, pc, r7
    ce4c:	ldr	r3, [r7, #8]
    ce50:	ldr	r6, [pc, #456]	; d020 <rb_socketpair+0x1ec>
    ce54:	ldr	r6, [pc, r6]
    ce58:	ldr	r6, [r6]
    ce5c:	cmp	r3, r6
    ce60:	bge	cf94 <rb_socketpair+0x160>
    ce64:	mov	r3, sp
    ce68:	bl	4e30 <socketpair@plt>
    ce6c:	mvn	r5, #0
    ce70:	cmp	r0, #0
    ce74:	bne	cfa4 <rb_socketpair+0x170>
    ce78:	ldr	r6, [fp, #12]
    ce7c:	ldr	r0, [sp]
    ce80:	ldr	r8, [fp, #8]
    ce84:	mov	r1, #4
    ce88:	mov	r2, r6
    ce8c:	bl	52e0 <rb_open@plt>
    ce90:	str	r0, [r4]
    ce94:	mov	r1, #4
    ce98:	mov	r2, r6
    ce9c:	ldr	r0, [sp, #4]
    cea0:	bl	52e0 <rb_open@plt>
    cea4:	str	r0, [r8]
    cea8:	mov	r1, r0
    ceac:	ldr	r0, [r4]
    ceb0:	cmp	r0, #0
    ceb4:	beq	cfb0 <rb_socketpair+0x17c>
    ceb8:	cmp	r1, #0
    cebc:	beq	cfcc <rb_socketpair+0x198>
    cec0:	ldr	r1, [r7, #40]	; 0x28
    cec4:	ldr	r6, [r0, #12]
    cec8:	blx	r1
    cecc:	cmp	r0, #0
    ced0:	bne	cf04 <rb_socketpair+0xd0>
    ced4:	mov	r0, r6
    ced8:	mov	r1, #3
    cedc:	mov	r2, #0
    cee0:	bl	5448 <fcntl@plt>
    cee4:	cmn	r0, #1
    cee8:	beq	cfdc <rb_socketpair+0x1a8>
    ceec:	orr	r2, r0, #2048	; 0x800
    cef0:	mov	r0, r6
    cef4:	mov	r1, #4
    cef8:	bl	5448 <fcntl@plt>
    cefc:	cmn	r0, #1
    cf00:	beq	cfdc <rb_socketpair+0x1a8>
    cf04:	ldr	r0, [r8]
    cf08:	cmp	r0, #0
    cf0c:	beq	cf5c <rb_socketpair+0x128>
    cf10:	ldr	r1, [r7, #40]	; 0x28
    cf14:	ldr	r6, [r0, #12]
    cf18:	blx	r1
    cf1c:	mov	r5, #0
    cf20:	cmp	r0, #0
    cf24:	bne	cfa4 <rb_socketpair+0x170>
    cf28:	mov	r0, r6
    cf2c:	mov	r1, #3
    cf30:	mov	r2, #0
    cf34:	mov	r5, #0
    cf38:	bl	5448 <fcntl@plt>
    cf3c:	cmn	r0, #1
    cf40:	beq	cf5c <rb_socketpair+0x128>
    cf44:	orr	r2, r0, #2048	; 0x800
    cf48:	mov	r0, r6
    cf4c:	mov	r1, #4
    cf50:	bl	5448 <fcntl@plt>
    cf54:	cmn	r0, #1
    cf58:	bne	cfa4 <rb_socketpair+0x170>
    cf5c:	ldr	r5, [sp, #4]
    cf60:	bl	552c <__errno_location@plt>
    cf64:	ldr	r0, [r0]
    cf68:	bl	4c80 <strerror@plt>
    cf6c:	mov	r2, r0
    cf70:	ldr	r0, [pc, #176]	; d028 <rb_socketpair+0x1f4>
    cf74:	mov	r1, r5
    cf78:	add	r0, pc, r0
    cf7c:	bl	519c <rb_lib_log@plt>
    cf80:	ldr	r0, [r4]
    cf84:	bl	5100 <rb_close@plt>
    cf88:	ldr	r0, [r8]
    cf8c:	bl	5100 <rb_close@plt>
    cf90:	b	cfa0 <rb_socketpair+0x16c>
    cf94:	bl	552c <__errno_location@plt>
    cf98:	mov	r1, #23
    cf9c:	str	r1, [r0]
    cfa0:	mvn	r5, #0
    cfa4:	mov	r0, r5
    cfa8:	sub	sp, fp, #24
    cfac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cfb0:	cmp	r1, #0
    cfb4:	beq	cfa4 <rb_socketpair+0x170>
    cfb8:	mov	r0, r1
    cfbc:	bl	5100 <rb_close@plt>
    cfc0:	mov	r0, r5
    cfc4:	sub	sp, fp, #24
    cfc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cfcc:	bl	5100 <rb_close@plt>
    cfd0:	mov	r0, r5
    cfd4:	sub	sp, fp, #24
    cfd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cfdc:	ldr	r6, [sp]
    cfe0:	bl	552c <__errno_location@plt>
    cfe4:	ldr	r0, [r0]
    cfe8:	bl	4c80 <strerror@plt>
    cfec:	mov	r2, r0
    cff0:	ldr	r0, [pc, #44]	; d024 <rb_socketpair+0x1f0>
    cff4:	mov	r1, r6
    cff8:	add	r0, pc, r0
    cffc:	bl	519c <rb_lib_log@plt>
    d000:	ldr	r0, [r4]
    d004:	bl	5100 <rb_close@plt>
    d008:	ldr	r0, [r8]
    d00c:	bl	5100 <rb_close@plt>
    d010:	mov	r0, r5
    d014:	sub	sp, fp, #24
    d018:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d01c:	.word	0x00031ac8
    d020:	.word	0x0001f50c
    d024:	.word	0x0000d143
    d028:	.word	0x0000d1c3

0000d02c <rb_open>:
    d02c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d030:	add	fp, sp, #24
    d034:	mov	r4, r2
    d038:	mov	r8, r1
    d03c:	mov	r5, r0
    d040:	eor	r6, r0, r0, lsr #12
    d044:	cmn	r0, #1
    d048:	ble	d09c <rb_open+0x70>
    d04c:	ldr	r1, [pc, #356]	; d1b8 <rb_open+0x18c>
    d050:	mov	r0, r6
    d054:	bfc	r0, #12, #20
    d058:	eor	r0, r0, r5, lsr #24
    d05c:	add	r0, r0, r0, lsl #1
    d060:	ldr	r1, [pc, r1]
    d064:	ldr	r1, [r1]
    d068:	ldr	r0, [r1, r0, lsl #2]
    d06c:	cmp	r0, #0
    d070:	bne	d084 <rb_open+0x58>
    d074:	b	d09c <rb_open+0x70>
    d078:	ldr	r0, [r0, #8]
    d07c:	cmp	r0, #0
    d080:	beq	d09c <rb_open+0x70>
    d084:	ldr	r7, [r0]
    d088:	ldr	r1, [r7, #12]
    d08c:	cmp	r1, r5
    d090:	bne	d078 <rb_open+0x4c>
    d094:	cmp	r7, #0
    d098:	bne	d11c <rb_open+0xf0>
    d09c:	ldr	r0, [pc, #280]	; d1bc <rb_open+0x190>
    d0a0:	add	r0, pc, r0
    d0a4:	ldr	r0, [r0, #12]
    d0a8:	bl	51cc <rb_bh_alloc@plt>
    d0ac:	str	r5, [r0, #12]
    d0b0:	mov	r7, r0
    d0b4:	mov	r1, #0
    d0b8:	ldr	r0, [pc, #256]	; d1c0 <rb_open+0x194>
    d0bc:	ldr	r0, [pc, r0]
    d0c0:	ldr	r0, [r0]
    d0c4:	str	r1, [r7, #4]
    d0c8:	eor	r1, r6, r5, asr #24
    d0cc:	str	r7, [r7]
    d0d0:	bfc	r1, #12, #20
    d0d4:	add	r1, r1, r1, lsl #1
    d0d8:	mov	r2, r0
    d0dc:	ldr	r3, [r2, r1, lsl #2]!
    d0e0:	cmp	r3, #0
    d0e4:	str	r3, [r7, #8]
    d0e8:	beq	d0f8 <rb_open+0xcc>
    d0ec:	add	r3, r3, #4
    d0f0:	str	r7, [r3]
    d0f4:	b	d108 <rb_open+0xdc>
    d0f8:	add	r3, r0, r1, lsl #2
    d0fc:	ldr	r6, [r3, #4]!
    d100:	cmp	r6, #0
    d104:	streq	r7, [r3]
    d108:	str	r7, [r2]
    d10c:	add	r0, r0, r1, lsl #2
    d110:	ldr	r1, [r0, #8]
    d114:	add	r1, r1, #1
    d118:	str	r1, [r0, #8]
    d11c:	ldrb	r0, [r7, #16]
    d120:	tst	r0, #1
    d124:	bne	d180 <rb_open+0x154>
    d128:	cmp	r4, #0
    d12c:	orr	r0, r0, #1
    d130:	strb	r8, [r7, #17]
    d134:	str	r5, [r7, #12]
    d138:	strb	r0, [r7, #16]
    d13c:	beq	d164 <rb_open+0x138>
    d140:	mov	r0, #128	; 0x80
    d144:	bl	5214 <malloc@plt>
    d148:	cmp	r0, #0
    d14c:	beq	d1b4 <rb_open+0x188>
    d150:	mov	r1, r4
    d154:	mov	r2, #128	; 0x80
    d158:	mov	r5, r0
    d15c:	bl	4f50 <rb_strlcpy@plt>
    d160:	str	r5, [r7, #24]
    d164:	ldr	r0, [pc, #96]	; d1cc <rb_open+0x1a0>
    d168:	add	r0, pc, r0
    d16c:	ldr	r1, [r0, #8]
    d170:	add	r1, r1, #1
    d174:	str	r1, [r0, #8]
    d178:	mov	r0, r7
    d17c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d180:	cmp	r7, #0
    d184:	ldrne	r2, [r7, #24]
    d188:	cmpne	r2, #0
    d18c:	bne	d198 <rb_open+0x16c>
    d190:	ldr	r2, [pc, #44]	; d1c4 <rb_open+0x198>
    d194:	add	r2, pc, r2
    d198:	ldr	r0, [pc, #40]	; d1c8 <rb_open+0x19c>
    d19c:	mov	r1, r5
    d1a0:	add	r0, pc, r0
    d1a4:	bl	519c <rb_lib_log@plt>
    d1a8:	mov	r7, #0
    d1ac:	mov	r0, r7
    d1b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d1b4:	bl	51fc <rb_outofmemory@plt>
    d1b8:	.word	0x0001f320
    d1bc:	.word	0x00031870
    d1c0:	.word	0x0001f2c4
    d1c4:	.word	0x0000cf1a
    d1c8:	.word	0x0000d04e
    d1cc:	.word	0x000317a8

0000d1d0 <rb_close>:
    d1d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    d1d4:	add	fp, sp, #24
    d1d8:	cmp	r0, #0
    d1dc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    d1e0:	ldrb	r7, [r0, #17]
    d1e4:	ldr	r8, [r0, #12]
    d1e8:	mov	r5, r0
    d1ec:	ands	r9, r7, #16
    d1f0:	beq	d200 <rb_close+0x30>
    d1f4:	mov	r0, r8
    d1f8:	mov	r1, #0
    d1fc:	bl	4e9c <listen@plt>
    d200:	ldr	r4, [pc, #428]	; d3b4 <rb_close+0x1e4>
    d204:	mov	r0, r5
    d208:	mov	r1, #3
    d20c:	mov	r2, #0
    d210:	mov	r3, #0
    d214:	add	r4, pc, r4
    d218:	ldr	r6, [r4, #32]
    d21c:	blx	r6
    d220:	ldr	r0, [r5, #44]	; 0x2c
    d224:	cmp	r0, #0
    d228:	beq	d28c <rb_close+0xbc>
    d22c:	ldr	r1, [r0, #12]
    d230:	ldr	r2, [r0, #8]
    d234:	mov	r6, #0
    d238:	cmp	r1, #0
    d23c:	streq	r2, [r4, #48]	; 0x30
    d240:	strne	r2, [r1, #4]
    d244:	ldrne	r2, [r0, #8]
    d248:	add	r3, r2, #8
    d24c:	cmp	r2, #0
    d250:	addeq	r3, r4, #44	; 0x2c
    d254:	str	r1, [r3]
    d258:	str	r6, [r0, #8]
    d25c:	str	r6, [r0, #12]
    d260:	ldr	r1, [r4, #52]	; 0x34
    d264:	sub	r1, r1, #1
    d268:	str	r1, [r4, #52]	; 0x34
    d26c:	bl	4f98 <free@plt>
    d270:	ldr	r0, [r4, #52]	; 0x34
    d274:	str	r6, [r5, #44]	; 0x2c
    d278:	cmp	r0, #0
    d27c:	bne	d28c <rb_close+0xbc>
    d280:	ldr	r0, [r4, #4]
    d284:	bl	4d70 <rb_event_delete@plt>
    d288:	str	r6, [r4, #4]
    d28c:	ldr	r0, [r5, #52]	; 0x34
    d290:	cmp	r0, #0
    d294:	beq	d29c <rb_close+0xcc>
    d298:	bl	4f98 <free@plt>
    d29c:	ldr	r0, [r5, #48]	; 0x30
    d2a0:	cmp	r0, #0
    d2a4:	beq	d2ac <rb_close+0xdc>
    d2a8:	bl	4f98 <free@plt>
    d2ac:	ldr	r0, [r5, #24]
    d2b0:	cmp	r0, #0
    d2b4:	beq	d2bc <rb_close+0xec>
    d2b8:	bl	4f98 <free@plt>
    d2bc:	tst	r7, #32
    d2c0:	bne	d2e8 <rb_close+0x118>
    d2c4:	ldrb	r0, [r5, #16]
    d2c8:	tst	r0, #1
    d2cc:	bne	d2fc <rb_close+0x12c>
    d2d0:	cmp	r9, #0
    d2d4:	beq	d3b0 <rb_close+0x1e0>
    d2d8:	mov	r0, r8
    d2dc:	mov	r1, #2
    d2e0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    d2e4:	b	5184 <shutdown@plt>
    d2e8:	mov	r0, r5
    d2ec:	bl	fb80 <rb_ssl_shutdown>
    d2f0:	ldrb	r0, [r5, #16]
    d2f4:	tst	r0, #1
    d2f8:	beq	d2d0 <rb_close+0x100>
    d2fc:	ldr	r1, [r5, #12]
    d300:	ldr	r2, [r5, #8]
    d304:	ldr	r3, [r5, #4]
    d308:	eor	r7, r1, r1, lsr #12
    d30c:	cmp	r2, #0
    d310:	eor	r1, r7, r1, asr #24
    d314:	ldr	r7, [pc, #156]	; d3b8 <rb_close+0x1e8>
    d318:	bfc	r1, #12, #20
    d31c:	add	r1, r1, r1, lsl #1
    d320:	ldr	r7, [pc, r7]
    d324:	ldr	r7, [r7]
    d328:	add	r7, r7, r1, lsl #2
    d32c:	streq	r3, [r7, #4]
    d330:	strne	r3, [r2, #4]
    d334:	mov	r1, r7
    d338:	ldrne	r3, [r5, #4]
    d33c:	cmp	r3, #0
    d340:	addne	r1, r3, #8
    d344:	str	r2, [r1]
    d348:	mov	r1, #0
    d34c:	str	r1, [r5, #4]
    d350:	ldr	r2, [pc, #100]	; d3bc <rb_close+0x1ec>
    d354:	add	r2, pc, r2
    d358:	ldr	r3, [r2, #56]	; 0x38
    d35c:	cmp	r3, #0
    d360:	str	r3, [r5, #8]
    d364:	beq	d374 <rb_close+0x1a4>
    d368:	add	r3, r3, #4
    d36c:	str	r5, [r3]
    d370:	b	d384 <rb_close+0x1b4>
    d374:	mov	r3, r2
    d378:	ldr	r1, [r3, #60]!	; 0x3c
    d37c:	cmp	r1, #0
    d380:	streq	r5, [r3]
    d384:	str	r5, [r2, #56]	; 0x38
    d388:	and	r0, r0, #254	; 0xfe
    d38c:	ldr	r1, [r7, #8]
    d390:	sub	r1, r1, #1
    d394:	str	r1, [r7, #8]
    d398:	ldr	r1, [r2, #64]	; 0x40
    d39c:	add	r1, r1, #1
    d3a0:	str	r1, [r2, #64]	; 0x40
    d3a4:	strb	r0, [r5, #16]
    d3a8:	cmp	r9, #0
    d3ac:	bne	d2d8 <rb_close+0x108>
    d3b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    d3b4:	.word	0x000316fc
    d3b8:	.word	0x0001f060
    d3bc:	.word	0x000315bc

0000d3c0 <rb_pipe>:
    d3c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d3c4:	add	fp, sp, #24
    d3c8:	sub	sp, sp, #8
    d3cc:	ldr	r4, [pc, #380]	; d550 <rb_pipe+0x190>
    d3d0:	mov	r8, r1
    d3d4:	mov	r5, r0
    d3d8:	add	r4, pc, r4
    d3dc:	ldr	r0, [r4, #8]
    d3e0:	ldr	r1, [pc, #364]	; d554 <rb_pipe+0x194>
    d3e4:	ldr	r1, [pc, r1]
    d3e8:	ldr	r1, [r1]
    d3ec:	cmp	r0, r1
    d3f0:	bge	d4e8 <rb_pipe+0x128>
    d3f4:	mov	r0, sp
    d3f8:	mov	r7, r2
    d3fc:	bl	54cc <pipe@plt>
    d400:	mvn	r6, #0
    d404:	cmn	r0, #1
    d408:	beq	d4dc <rb_pipe+0x11c>
    d40c:	ldr	r0, [sp]
    d410:	mov	r1, #8
    d414:	mov	r2, r7
    d418:	bl	52e0 <rb_open@plt>
    d41c:	str	r0, [r5]
    d420:	mov	r1, #8
    d424:	mov	r2, r7
    d428:	ldr	r0, [sp, #4]
    d42c:	bl	52e0 <rb_open@plt>
    d430:	str	r0, [r8]
    d434:	ldr	r0, [r5]
    d438:	cmp	r0, #0
    d43c:	beq	d504 <rb_pipe+0x144>
    d440:	ldr	r1, [r4, #40]	; 0x28
    d444:	ldr	r6, [r0, #12]
    d448:	blx	r1
    d44c:	cmp	r0, #0
    d450:	bne	d484 <rb_pipe+0xc4>
    d454:	mov	r0, r6
    d458:	mov	r1, #3
    d45c:	mov	r2, #0
    d460:	bl	5448 <fcntl@plt>
    d464:	cmn	r0, #1
    d468:	beq	d504 <rb_pipe+0x144>
    d46c:	orr	r2, r0, #2048	; 0x800
    d470:	mov	r0, r6
    d474:	mov	r1, #4
    d478:	bl	5448 <fcntl@plt>
    d47c:	cmn	r0, #1
    d480:	beq	d504 <rb_pipe+0x144>
    d484:	ldr	r0, [r8]
    d488:	cmp	r0, #0
    d48c:	beq	d50c <rb_pipe+0x14c>
    d490:	ldr	r1, [r4, #40]	; 0x28
    d494:	ldr	r7, [r0, #12]
    d498:	blx	r1
    d49c:	mov	r6, #0
    d4a0:	cmp	r0, #0
    d4a4:	bne	d4dc <rb_pipe+0x11c>
    d4a8:	mov	r0, r7
    d4ac:	mov	r1, #3
    d4b0:	mov	r2, #0
    d4b4:	mov	r6, #0
    d4b8:	bl	5448 <fcntl@plt>
    d4bc:	cmn	r0, #1
    d4c0:	beq	d50c <rb_pipe+0x14c>
    d4c4:	orr	r2, r0, #2048	; 0x800
    d4c8:	mov	r0, r7
    d4cc:	mov	r1, #4
    d4d0:	bl	5448 <fcntl@plt>
    d4d4:	cmn	r0, #1
    d4d8:	beq	d50c <rb_pipe+0x14c>
    d4dc:	mov	r0, r6
    d4e0:	sub	sp, fp, #24
    d4e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d4e8:	bl	552c <__errno_location@plt>
    d4ec:	mov	r1, #23
    d4f0:	str	r1, [r0]
    d4f4:	mvn	r6, #0
    d4f8:	mov	r0, r6
    d4fc:	sub	sp, fp, #24
    d500:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d504:	ldr	r6, [sp]
    d508:	b	d510 <rb_pipe+0x150>
    d50c:	ldr	r6, [sp, #4]
    d510:	bl	552c <__errno_location@plt>
    d514:	ldr	r0, [r0]
    d518:	bl	4c80 <strerror@plt>
    d51c:	mov	r2, r0
    d520:	ldr	r0, [pc, #48]	; d558 <rb_pipe+0x198>
    d524:	mov	r1, r6
    d528:	add	r0, pc, r0
    d52c:	bl	519c <rb_lib_log@plt>
    d530:	ldr	r0, [r5]
    d534:	bl	5100 <rb_close@plt>
    d538:	ldr	r0, [r8]
    d53c:	bl	5100 <rb_close@plt>
    d540:	mvn	r6, #0
    d544:	mov	r0, r6
    d548:	sub	sp, fp, #24
    d54c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d550:	.word	0x00031538
    d554:	.word	0x0001ef7c
    d558:	.word	0x0000cc13

0000d55c <rb_socket>:
    d55c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d560:	add	fp, sp, #24
    d564:	sub	sp, sp, #8
    d568:	ldr	r8, [pc, #416]	; d710 <rb_socket+0x1b4>
    d56c:	mov	r6, r3
    d570:	mov	r7, r0
    d574:	add	r8, pc, r8
    d578:	ldr	r0, [r8, #8]
    d57c:	ldr	r3, [pc, #400]	; d714 <rb_socket+0x1b8>
    d580:	ldr	r3, [pc, r3]
    d584:	ldr	r3, [r3]
    d588:	cmp	r0, r3
    d58c:	bge	d6f4 <rb_socket+0x198>
    d590:	mov	r0, r7
    d594:	bl	5034 <socket@plt>
    d598:	mov	r4, #0
    d59c:	cmp	r0, #0
    d5a0:	blt	d610 <rb_socket+0xb4>
    d5a4:	mov	r5, r0
    d5a8:	cmp	r7, #10
    d5ac:	bne	d5dc <rb_socket+0x80>
    d5b0:	mov	r0, #1
    d5b4:	add	r3, sp, #4
    d5b8:	mov	r1, #41	; 0x29
    d5bc:	mov	r2, #26
    d5c0:	str	r0, [sp, #4]
    d5c4:	mov	r0, #4
    d5c8:	str	r0, [sp]
    d5cc:	mov	r0, r5
    d5d0:	bl	54e4 <setsockopt@plt>
    d5d4:	cmn	r0, #1
    d5d8:	beq	d684 <rb_socket+0x128>
    d5dc:	mov	r0, r5
    d5e0:	mov	r1, #4
    d5e4:	mov	r2, r6
    d5e8:	bl	52e0 <rb_open@plt>
    d5ec:	cmp	r0, #0
    d5f0:	beq	d61c <rb_socket+0xc0>
    d5f4:	ldr	r1, [r8, #40]	; 0x28
    d5f8:	ldr	r7, [r0, #12]
    d5fc:	mov	r6, r0
    d600:	blx	r1
    d604:	cmp	r0, #0
    d608:	beq	d640 <rb_socket+0xe4>
    d60c:	mov	r4, r6
    d610:	mov	r0, r4
    d614:	sub	sp, fp, #24
    d618:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d61c:	bl	552c <__errno_location@plt>
    d620:	ldr	r0, [r0]
    d624:	bl	4c80 <strerror@plt>
    d628:	mov	r2, r0
    d62c:	ldr	r0, [pc, #232]	; d71c <rb_socket+0x1c0>
    d630:	mov	r1, r5
    d634:	add	r0, pc, r0
    d638:	bl	519c <rb_lib_log@plt>
    d63c:	b	d6ac <rb_socket+0x150>
    d640:	mov	r0, r7
    d644:	mov	r1, #3
    d648:	mov	r2, #0
    d64c:	mov	r4, #0
    d650:	bl	5448 <fcntl@plt>
    d654:	cmn	r0, #1
    d658:	beq	d6c0 <rb_socket+0x164>
    d65c:	orr	r2, r0, #2048	; 0x800
    d660:	mov	r0, r7
    d664:	mov	r1, #4
    d668:	bl	5448 <fcntl@plt>
    d66c:	cmn	r0, #1
    d670:	beq	d6c0 <rb_socket+0x164>
    d674:	mov	r4, r6
    d678:	mov	r0, r4
    d67c:	sub	sp, fp, #24
    d680:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d684:	ldr	r6, [sp, #4]
    d688:	bl	552c <__errno_location@plt>
    d68c:	ldr	r0, [r0]
    d690:	bl	4c80 <strerror@plt>
    d694:	mov	r3, r0
    d698:	ldr	r0, [pc, #120]	; d718 <rb_socket+0x1bc>
    d69c:	mov	r1, r6
    d6a0:	mov	r2, r5
    d6a4:	add	r0, pc, r0
    d6a8:	bl	519c <rb_lib_log@plt>
    d6ac:	mov	r0, r5
    d6b0:	bl	51c0 <close@plt>
    d6b4:	mov	r0, r4
    d6b8:	sub	sp, fp, #24
    d6bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d6c0:	bl	552c <__errno_location@plt>
    d6c4:	ldr	r0, [r0]
    d6c8:	bl	4c80 <strerror@plt>
    d6cc:	mov	r2, r0
    d6d0:	ldr	r0, [pc, #72]	; d720 <rb_socket+0x1c4>
    d6d4:	mov	r1, r5
    d6d8:	add	r0, pc, r0
    d6dc:	bl	519c <rb_lib_log@plt>
    d6e0:	mov	r0, r6
    d6e4:	bl	5100 <rb_close@plt>
    d6e8:	mov	r0, r4
    d6ec:	sub	sp, fp, #24
    d6f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d6f4:	bl	552c <__errno_location@plt>
    d6f8:	mov	r1, #23
    d6fc:	mov	r4, #0
    d700:	str	r1, [r0]
    d704:	mov	r0, r4
    d708:	sub	sp, fp, #24
    d70c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d710:	.word	0x0003139c
    d714:	.word	0x0001ede0
    d718:	.word	0x0000cac4
    d71c:	.word	0x0000cb73
    d720:	.word	0x0000ca63

0000d724 <rb_listen>:
    d724:	push	{r4, r5, r6, sl, fp, lr}
    d728:	add	fp, sp, #16
    d72c:	sub	sp, sp, #8
    d730:	str	r1, [sp, #4]
    d734:	mov	r5, r0
    d738:	mov	r6, r2
    d73c:	ldrb	r0, [r0, #17]
    d740:	and	r0, r0, #128	; 0x80
    d744:	orr	r0, r0, #20
    d748:	strb	r0, [r5, #17]
    d74c:	ldr	r0, [r5, #12]
    d750:	bl	4e9c <listen@plt>
    d754:	mov	r4, r0
    d758:	cmp	r6, #0
    d75c:	beq	d784 <rb_listen+0x60>
    d760:	cmp	r4, #0
    d764:	bne	d784 <rb_listen+0x60>
    d768:	ldr	r0, [r5, #12]
    d76c:	mov	r1, #4
    d770:	add	r3, sp, #4
    d774:	mov	r2, #9
    d778:	str	r1, [sp]
    d77c:	mov	r1, #6
    d780:	bl	54e4 <setsockopt@plt>
    d784:	mov	r0, r4
    d788:	sub	sp, fp, #16
    d78c:	pop	{r4, r5, r6, sl, fp, pc}

0000d790 <rb_fdlist_init>:
    d790:	push	{r4, r5, r6, r7, fp, lr}
    d794:	add	fp, sp, #16
    d798:	ldr	r6, [pc, #108]	; d80c <rb_fdlist_init+0x7c>
    d79c:	mov	r4, r2
    d7a0:	add	r6, pc, r6
    d7a4:	ldrb	r2, [r6]
    d7a8:	cmp	r2, #0
    d7ac:	bne	d7f0 <rb_fdlist_init+0x60>
    d7b0:	ldr	r7, [pc, #88]	; d810 <rb_fdlist_init+0x80>
    d7b4:	cmp	r0, #0
    d7b8:	ldr	r7, [pc, r7]
    d7bc:	str	r1, [r7]
    d7c0:	beq	d7e8 <rb_fdlist_init+0x58>
    d7c4:	cmp	r1, #4
    d7c8:	blt	d7e8 <rb_fdlist_init+0x58>
    d7cc:	mov	r5, #3
    d7d0:	mov	r0, r5
    d7d4:	bl	51c0 <close@plt>
    d7d8:	ldr	r0, [r7]
    d7dc:	add	r5, r5, #1
    d7e0:	cmp	r5, r0
    d7e4:	blt	d7d0 <rb_fdlist_init+0x40>
    d7e8:	mov	r0, #1
    d7ec:	strb	r0, [r6]
    d7f0:	ldr	r2, [pc, #28]	; d814 <rb_fdlist_init+0x84>
    d7f4:	mov	r0, #68	; 0x44
    d7f8:	mov	r1, r4
    d7fc:	add	r2, pc, r2
    d800:	bl	5304 <rb_bh_create@plt>
    d804:	str	r0, [r6, #12]
    d808:	pop	{r4, r5, r6, r7, fp, pc}
    d80c:	.word	0x00031170
    d810:	.word	0x0001eba8
    d814:	.word	0x0000c9e4

0000d818 <rb_dump_fd>:
    d818:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    d81c:	add	fp, sp, #24
    d820:	ldr	r8, [pc, #136]	; d8b0 <rb_dump_fd+0x98>
    d824:	mov	r4, r1
    d828:	mov	r5, r0
    d82c:	mov	r6, #0
    d830:	ldr	r8, [pc, r8]
    d834:	ldr	r9, [pc, #120]	; d8b4 <rb_dump_fd+0x9c>
    d838:	add	r9, pc, r9
    d83c:	b	d84c <rb_dump_fd+0x34>
    d840:	add	r6, r6, #1
    d844:	cmp	r6, #4096	; 0x1000
    d848:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    d84c:	ldr	r0, [r8]
    d850:	add	r1, r6, r6, lsl #1
    d854:	add	r2, r0, r1, lsl #2
    d858:	ldr	r2, [r2, #8]
    d85c:	cmp	r2, #0
    d860:	beq	d840 <rb_dump_fd+0x28>
    d864:	ldr	r7, [r0, r1, lsl #2]
    d868:	cmp	r7, #0
    d86c:	bne	d880 <rb_dump_fd+0x68>
    d870:	b	d840 <rb_dump_fd+0x28>
    d874:	ldr	r7, [r7, #8]
    d878:	cmp	r7, #0
    d87c:	beq	d840 <rb_dump_fd+0x28>
    d880:	ldr	r1, [r7]
    d884:	cmp	r1, #0
    d888:	ldrbne	r0, [r1, #16]
    d88c:	tstne	r0, #1
    d890:	beq	d874 <rb_dump_fd+0x5c>
    d894:	ldr	r0, [r1, #12]
    d898:	ldr	r1, [r1, #24]
    d89c:	mov	r2, r4
    d8a0:	cmp	r1, #0
    d8a4:	moveq	r1, r9
    d8a8:	blx	r5
    d8ac:	b	d874 <rb_dump_fd+0x5c>
    d8b0:	.word	0x0001eb50
    d8b4:	.word	0x0000caa2

0000d8b8 <rb_note>:
    d8b8:	push	{r4, r5, r6, sl, fp, lr}
    d8bc:	add	fp, sp, #16
    d8c0:	cmp	r0, #0
    d8c4:	popeq	{r4, r5, r6, sl, fp, pc}
    d8c8:	mov	r4, r0
    d8cc:	ldr	r0, [r0, #24]
    d8d0:	mov	r5, r1
    d8d4:	cmp	r0, #0
    d8d8:	beq	d8e0 <rb_note+0x28>
    d8dc:	bl	4f98 <free@plt>
    d8e0:	mov	r0, #128	; 0x80
    d8e4:	bl	5214 <malloc@plt>
    d8e8:	cmp	r0, #0
    d8ec:	beq	d908 <rb_note+0x50>
    d8f0:	mov	r1, r5
    d8f4:	mov	r2, #128	; 0x80
    d8f8:	mov	r6, r0
    d8fc:	bl	4f50 <rb_strlcpy@plt>
    d900:	str	r6, [r4, #24]
    d904:	pop	{r4, r5, r6, sl, fp, pc}
    d908:	bl	51fc <rb_outofmemory@plt>

0000d90c <rb_set_type>:
    d90c:	strb	r1, [r0, #17]
    d910:	bx	lr

0000d914 <rb_get_type>:
    d914:	ldrb	r0, [r0, #17]
    d918:	bx	lr

0000d91c <rb_fd_ssl>:
    d91c:	cmp	r0, #0
    d920:	moveq	r0, #0
    d924:	ldrbne	r0, [r0, #17]
    d928:	ubfxne	r0, r0, #5, #1
    d92c:	bx	lr

0000d930 <rb_get_fde>:
    d930:	cmp	r0, #0
    d934:	blt	d988 <rb_get_fde+0x58>
    d938:	ldr	r2, [pc, #84]	; d994 <rb_get_fde+0x64>
    d93c:	eor	r1, r0, r0, lsr #12
    d940:	bfc	r1, #12, #20
    d944:	eor	r1, r1, r0, lsr #24
    d948:	add	r1, r1, r1, lsl #1
    d94c:	ldr	r2, [pc, r2]
    d950:	ldr	r2, [r2]
    d954:	ldr	r2, [r2, r1, lsl #2]
    d958:	cmp	r2, #0
    d95c:	bne	d970 <rb_get_fde+0x40>
    d960:	b	d988 <rb_get_fde+0x58>
    d964:	ldr	r2, [r2, #8]
    d968:	cmp	r2, #0
    d96c:	beq	d988 <rb_get_fde+0x58>
    d970:	ldr	r1, [r2]
    d974:	ldr	r3, [r1, #12]
    d978:	cmp	r3, r0
    d97c:	bne	d964 <rb_get_fde+0x34>
    d980:	mov	r0, r1
    d984:	bx	lr
    d988:	mov	r1, #0
    d98c:	mov	r0, r1
    d990:	bx	lr
    d994:	.word	0x0001ea34

0000d998 <rb_read>:
    d998:	cmp	r0, #0
    d99c:	moveq	r0, #0
    d9a0:	bxeq	lr
    d9a4:	ldrb	r3, [r0, #17]
    d9a8:	tst	r3, #32
    d9ac:	bne	d9c0 <rb_read+0x28>
    d9b0:	ldr	r0, [r0, #12]
    d9b4:	tst	r3, #4
    d9b8:	bne	d9c4 <rb_read+0x2c>
    d9bc:	b	4fb0 <read@plt>
    d9c0:	b	10574 <rb_ssl_read>
    d9c4:	mov	r3, #0
    d9c8:	b	4e54 <recv@plt>

0000d9cc <rb_write>:
    d9cc:	cmp	r0, #0
    d9d0:	moveq	r0, #0
    d9d4:	bxeq	lr
    d9d8:	ldrb	r3, [r0, #17]
    d9dc:	tst	r3, #32
    d9e0:	bne	d9f4 <rb_write+0x28>
    d9e4:	ldr	r0, [r0, #12]
    d9e8:	tst	r3, #4
    d9ec:	bne	d9f8 <rb_write+0x2c>
    d9f0:	b	4fc8 <write@plt>
    d9f4:	b	106e4 <rb_ssl_write>
    d9f8:	mov	r3, #16384	; 0x4000
    d9fc:	b	52ec <send@plt>

0000da00 <rb_writev>:
    da00:	push	{r4, r5, r6, r7, fp, lr}
    da04:	add	fp, sp, #16
    da08:	sub	sp, sp, #32
    da0c:	cmp	r0, #0
    da10:	beq	da44 <rb_writev+0x44>
    da14:	mov	r5, r0
    da18:	ldrb	r0, [r0, #17]
    da1c:	mov	r4, r1
    da20:	tst	r0, #32
    da24:	bne	da5c <rb_writev+0x5c>
    da28:	tst	r0, #4
    da2c:	bne	dafc <rb_writev+0xfc>
    da30:	ldr	r0, [r5, #12]
    da34:	mov	r1, r4
    da38:	sub	sp, fp, #16
    da3c:	pop	{r4, r5, r6, r7, fp, lr}
    da40:	b	4f38 <writev@plt>
    da44:	bl	552c <__errno_location@plt>
    da48:	mov	r1, #9
    da4c:	str	r1, [r0]
    da50:	mvn	r0, #0
    da54:	sub	sp, fp, #16
    da58:	pop	{r4, r5, r6, r7, fp, pc}
    da5c:	cmp	r2, #0
    da60:	moveq	r0, #0
    da64:	subeq	sp, fp, #16
    da68:	popeq	{r4, r5, r6, r7, fp, pc}
    da6c:	rsb	r7, r2, #1
    da70:	mov	r6, #0
    da74:	ldm	r4, {r1, r2}
    da78:	tst	r0, #32
    da7c:	beq	da9c <rb_writev+0x9c>
    da80:	b	dabc <rb_writev+0xbc>
    da84:	ldrb	r0, [r5, #17]
    da88:	add	r4, r4, #8
    da8c:	add	r7, r7, #1
    da90:	ldm	r4, {r1, r2}
    da94:	tst	r0, #32
    da98:	bne	dabc <rb_writev+0xbc>
    da9c:	uxtb	r3, r0
    daa0:	ldr	r0, [r5, #12]
    daa4:	tst	r3, #4
    daa8:	bne	dadc <rb_writev+0xdc>
    daac:	bl	4fc8 <write@plt>
    dab0:	cmp	r0, #0
    dab4:	bgt	dacc <rb_writev+0xcc>
    dab8:	b	daec <rb_writev+0xec>
    dabc:	mov	r0, r5
    dac0:	bl	106e4 <rb_ssl_write>
    dac4:	cmp	r0, #0
    dac8:	ble	daec <rb_writev+0xec>
    dacc:	add	r6, r0, r6
    dad0:	cmp	r7, #0
    dad4:	bne	da84 <rb_writev+0x84>
    dad8:	b	db34 <rb_writev+0x134>
    dadc:	mov	r3, #16384	; 0x4000
    dae0:	bl	52ec <send@plt>
    dae4:	cmp	r0, #0
    dae8:	bgt	dacc <rb_writev+0xcc>
    daec:	cmp	r6, #0
    daf0:	movgt	r0, r6
    daf4:	sub	sp, fp, #16
    daf8:	pop	{r4, r5, r6, r7, fp, pc}
    dafc:	mov	r1, sp
    db00:	vmov.i32	q8, #0	; 0x00000000
    db04:	add	r0, r1, #12
    db08:	mov	r3, r1
    db0c:	vst1.32	{d16-d17}, [r0]
    db10:	mov	r0, #8
    db14:	vst1.64	{d16-d17}, [r3], r0
    db18:	str	r4, [r3]
    db1c:	str	r2, [sp, #12]
    db20:	mov	r2, #16384	; 0x4000
    db24:	ldr	r0, [r5, #12]
    db28:	bl	4fa4 <sendmsg@plt>
    db2c:	sub	sp, fp, #16
    db30:	pop	{r4, r5, r6, r7, fp, pc}
    db34:	mov	r0, r6
    db38:	sub	sp, fp, #16
    db3c:	pop	{r4, r5, r6, r7, fp, pc}

0000db40 <rb_inet_pton_sock>:
    db40:	push	{r4, r5, r6, r7, fp, lr}
    db44:	add	fp, sp, #16
    db48:	sub	sp, sp, #8
    db4c:	mov	ip, r0
    db50:	mov	r7, r1
    db54:	vmov.i32	q8, #0	; 0x00000000
    db58:	mov	r0, #112	; 0x70
    db5c:	vst1.32	{d16-d17}, [r1], r0
    db60:	add	r0, r7, #96	; 0x60
    db64:	vst1.32	{d16-d17}, [r0]
    db68:	add	r0, r7, #80	; 0x50
    db6c:	vst1.32	{d16-d17}, [r1]
    db70:	mov	r1, #0
    db74:	vst1.32	{d16-d17}, [r0]
    db78:	add	r0, r7, #64	; 0x40
    db7c:	vst1.32	{d16-d17}, [r0]
    db80:	add	r0, r7, #48	; 0x30
    db84:	vst1.32	{d16-d17}, [r0]
    db88:	add	r0, r7, #32
    db8c:	vst1.32	{d16-d17}, [r0]
    db90:	add	r0, r7, #16
    db94:	vst1.32	{d16-d17}, [r0]
    db98:	strb	r1, [sp, #4]
    db9c:	ldrb	r5, [ip]
    dba0:	cmp	r5, #0
    dba4:	beq	dc60 <rb_inet_pton_sock+0x120>
    dba8:	add	r0, ip, #1
    dbac:	add	r2, sp, #4
    dbb0:	mov	r3, #0
    dbb4:	mov	r4, #0
    dbb8:	sub	r6, r5, #48	; 0x30
    dbbc:	uxtb	r6, r6
    dbc0:	cmp	r6, #9
    dbc4:	bhi	dc04 <rb_inet_pton_sock+0xc4>
    dbc8:	uxtb	r6, r1
    dbcc:	lsl	r6, r6, #2
    dbd0:	uxtab	r1, r6, r1
    dbd4:	lsl	r1, r1, #1
    dbd8:	uxtab	r1, r1, r5
    dbdc:	sub	r1, r1, #48	; 0x30
    dbe0:	cmp	r1, #255	; 0xff
    dbe4:	bhi	dc60 <rb_inet_pton_sock+0x120>
    dbe8:	cmp	r4, #0
    dbec:	strb	r1, [r2]
    dbf0:	beq	dc3c <rb_inet_pton_sock+0xfc>
    dbf4:	ldrb	r5, [r0], #1
    dbf8:	cmp	r5, #0
    dbfc:	bne	dbb8 <rb_inet_pton_sock+0x78>
    dc00:	b	dc58 <rb_inet_pton_sock+0x118>
    dc04:	cmp	r3, #4
    dc08:	beq	dc60 <rb_inet_pton_sock+0x120>
    dc0c:	uxtb	r1, r5
    dc10:	cmp	r1, #46	; 0x2e
    dc14:	bne	dc60 <rb_inet_pton_sock+0x120>
    dc18:	cmp	r4, #0
    dc1c:	beq	dc60 <rb_inet_pton_sock+0x120>
    dc20:	mov	r1, #0
    dc24:	mov	r4, #0
    dc28:	strb	r1, [r2, #1]!
    dc2c:	ldrb	r5, [r0], #1
    dc30:	cmp	r5, #0
    dc34:	bne	dbb8 <rb_inet_pton_sock+0x78>
    dc38:	b	dc58 <rb_inet_pton_sock+0x118>
    dc3c:	cmp	r3, #3
    dc40:	bgt	dc60 <rb_inet_pton_sock+0x120>
    dc44:	add	r3, r3, #1
    dc48:	mov	r4, #1
    dc4c:	ldrb	r5, [r0], #1
    dc50:	cmp	r5, #0
    dc54:	bne	dbb8 <rb_inet_pton_sock+0x78>
    dc58:	cmp	r3, #4
    dc5c:	bge	dc88 <rb_inet_pton_sock+0x148>
    dc60:	add	r2, r7, #8
    dc64:	mov	r0, #10
    dc68:	mov	r1, ip
    dc6c:	mov	r4, #10
    dc70:	bl	4ef0 <rb_inet_pton@plt>
    dc74:	cmp	r0, #0
    dc78:	moveq	r0, #0
    dc7c:	subeq	sp, fp, #16
    dc80:	popeq	{r4, r5, r6, r7, fp, pc}
    dc84:	b	dc94 <rb_inet_pton_sock+0x154>
    dc88:	ldr	r0, [sp, #4]
    dc8c:	mov	r4, #2
    dc90:	str	r0, [r7, #4]
    dc94:	mov	r0, #0
    dc98:	strh	r0, [r7, #2]
    dc9c:	strh	r4, [r7]
    dca0:	mov	r0, #1
    dca4:	sub	sp, fp, #16
    dca8:	pop	{r4, r5, r6, r7, fp, pc}

0000dcac <rb_inet_pton>:
    dcac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    dcb0:	add	fp, sp, #24
    dcb4:	sub	sp, sp, #56	; 0x38
    dcb8:	mov	r8, r2
    dcbc:	mov	r2, r1
    dcc0:	cmp	r0, #10
    dcc4:	beq	ddc8 <rb_inet_pton+0x11c>
    dcc8:	mov	r1, r0
    dccc:	mvn	r0, #0
    dcd0:	cmp	r1, #2
    dcd4:	bne	dedc <rb_inet_pton+0x230>
    dcd8:	mov	r0, #0
    dcdc:	strb	r0, [sp]
    dce0:	ldrb	r6, [r2]
    dce4:	cmp	r6, #0
    dce8:	beq	dedc <rb_inet_pton+0x230>
    dcec:	add	r1, r2, #1
    dcf0:	mov	r5, #0
    dcf4:	mov	r2, sp
    dcf8:	mov	r3, #0
    dcfc:	mov	r4, #0
    dd00:	sub	r0, r6, #48	; 0x30
    dd04:	uxtb	r0, r0
    dd08:	cmp	r0, #9
    dd0c:	bhi	dd50 <rb_inet_pton+0xa4>
    dd10:	uxtb	r0, r5
    dd14:	lsl	r0, r0, #2
    dd18:	uxtab	r0, r0, r5
    dd1c:	lsl	r0, r0, #1
    dd20:	uxtab	r0, r0, r6
    dd24:	sub	r5, r0, #48	; 0x30
    dd28:	mov	r0, #0
    dd2c:	cmp	r5, #255	; 0xff
    dd30:	bhi	dedc <rb_inet_pton+0x230>
    dd34:	cmp	r4, #0
    dd38:	strb	r5, [r2]
    dd3c:	beq	dd8c <rb_inet_pton+0xe0>
    dd40:	ldrb	r6, [r1], #1
    dd44:	cmp	r6, #0
    dd48:	bne	dd00 <rb_inet_pton+0x54>
    dd4c:	b	dda8 <rb_inet_pton+0xfc>
    dd50:	mov	r0, #0
    dd54:	cmp	r3, #4
    dd58:	beq	dedc <rb_inet_pton+0x230>
    dd5c:	uxtb	r6, r6
    dd60:	cmp	r6, #46	; 0x2e
    dd64:	bne	dedc <rb_inet_pton+0x230>
    dd68:	cmp	r4, #0
    dd6c:	beq	dedc <rb_inet_pton+0x230>
    dd70:	mov	r5, #0
    dd74:	mov	r4, #0
    dd78:	strb	r5, [r2, #1]!
    dd7c:	ldrb	r6, [r1], #1
    dd80:	cmp	r6, #0
    dd84:	bne	dd00 <rb_inet_pton+0x54>
    dd88:	b	dda8 <rb_inet_pton+0xfc>
    dd8c:	cmp	r3, #3
    dd90:	bgt	dedc <rb_inet_pton+0x230>
    dd94:	add	r3, r3, #1
    dd98:	mov	r4, #1
    dd9c:	ldrb	r6, [r1], #1
    dda0:	cmp	r6, #0
    dda4:	bne	dd00 <rb_inet_pton+0x54>
    dda8:	mov	r0, #0
    ddac:	cmp	r3, #4
    ddb0:	blt	dedc <rb_inet_pton+0x230>
    ddb4:	ldr	r0, [sp]
    ddb8:	str	r0, [r8]
    ddbc:	mov	r0, #1
    ddc0:	sub	sp, fp, #24
    ddc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    ddc8:	mov	r5, #0
    ddcc:	strb	r5, [sp]
    ddd0:	ldrb	r6, [r2]
    ddd4:	cmp	r6, #0
    ddd8:	beq	dea0 <rb_inet_pton+0x1f4>
    dddc:	mov	r0, #1
    dde0:	mov	r1, sp
    dde4:	mov	r3, #0
    dde8:	mov	r4, #0
    ddec:	sub	r7, r6, #48	; 0x30
    ddf0:	uxtb	r7, r7
    ddf4:	cmp	r7, #9
    ddf8:	bhi	de3c <rb_inet_pton+0x190>
    ddfc:	uxtb	r7, r5
    de00:	lsl	r7, r7, #2
    de04:	uxtab	r7, r7, r5
    de08:	lsl	r7, r7, #1
    de0c:	uxtab	r7, r7, r6
    de10:	sub	r5, r7, #48	; 0x30
    de14:	cmp	r5, #255	; 0xff
    de18:	bhi	dea0 <rb_inet_pton+0x1f4>
    de1c:	cmp	r4, #0
    de20:	strb	r5, [r1]
    de24:	beq	de78 <rb_inet_pton+0x1cc>
    de28:	ldrb	r6, [r2, r0]
    de2c:	add	r0, r0, #1
    de30:	cmp	r6, #0
    de34:	bne	ddec <rb_inet_pton+0x140>
    de38:	b	de98 <rb_inet_pton+0x1ec>
    de3c:	cmp	r3, #4
    de40:	beq	dea0 <rb_inet_pton+0x1f4>
    de44:	uxtb	r7, r6
    de48:	cmp	r7, #46	; 0x2e
    de4c:	bne	dea0 <rb_inet_pton+0x1f4>
    de50:	cmp	r4, #0
    de54:	beq	dea0 <rb_inet_pton+0x1f4>
    de58:	mov	r5, #0
    de5c:	mov	r4, #0
    de60:	strb	r5, [r1, #1]!
    de64:	ldrb	r6, [r2, r0]
    de68:	add	r0, r0, #1
    de6c:	cmp	r6, #0
    de70:	bne	ddec <rb_inet_pton+0x140>
    de74:	b	de98 <rb_inet_pton+0x1ec>
    de78:	cmp	r3, #3
    de7c:	bgt	dea0 <rb_inet_pton+0x1f4>
    de80:	add	r3, r3, #1
    de84:	mov	r4, #1
    de88:	ldrb	r6, [r2, r0]
    de8c:	add	r0, r0, #1
    de90:	cmp	r6, #0
    de94:	bne	ddec <rb_inet_pton+0x140>
    de98:	cmp	r3, #4
    de9c:	bge	deb4 <rb_inet_pton+0x208>
    dea0:	mov	r0, r2
    dea4:	mov	r1, r8
    dea8:	sub	sp, fp, #24
    deac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    deb0:	b	ebf8 <inet_pton6>
    deb4:	ldr	r0, [sp]
    deb8:	mov	r5, sp
    debc:	str	r0, [r8]
    dec0:	mov	r0, r5
    dec4:	ldr	r1, [pc, #24]	; dee4 <rb_inet_pton+0x238>
    dec8:	add	r1, pc, r1
    decc:	bl	5544 <sprintf@plt>
    ded0:	mov	r0, r5
    ded4:	mov	r1, r8
    ded8:	bl	ebf8 <inet_pton6>
    dedc:	sub	sp, fp, #24
    dee0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    dee4:	.word	0x0000c358

0000dee8 <rb_inet_ntop_sock>:
    dee8:	push	{r4, r5, fp, lr}
    deec:	add	fp, sp, #8
    def0:	mov	r5, r1
    def4:	ldrh	r1, [r0]
    def8:	mov	r3, r2
    defc:	cmp	r1, #10
    df00:	beq	df1c <rb_inet_ntop_sock+0x34>
    df04:	cmp	r1, #2
    df08:	bne	df14 <rb_inet_ntop_sock+0x2c>
    df0c:	cmp	r3, #16
    df10:	bcs	df30 <rb_inet_ntop_sock+0x48>
    df14:	mov	r0, #0
    df18:	pop	{r4, r5, fp, pc}
    df1c:	add	r1, r0, #8
    df20:	mov	r0, #10
    df24:	mov	r2, r5
    df28:	pop	{r4, r5, fp, lr}
    df2c:	b	e038 <rb_inet_ntop>
    df30:	ldrb	r1, [r0, #4]
    df34:	ldr	ip, [pc, #236]	; e028 <rb_inet_ntop_sock+0x140>
    df38:	add	ip, pc, ip
    df3c:	ldr	r1, [ip, r1, lsl #2]
    df40:	ldrb	r3, [r1]
    df44:	cmp	r3, #0
    df48:	beq	df6c <rb_inet_ntop_sock+0x84>
    df4c:	add	r2, r1, #1
    df50:	ldr	r1, [pc, #216]	; e030 <rb_inet_ntop_sock+0x148>
    df54:	add	r1, pc, r1
    df58:	strb	r3, [r1], #1
    df5c:	ldrb	r3, [r2], #1
    df60:	cmp	r3, #0
    df64:	bne	df58 <rb_inet_ntop_sock+0x70>
    df68:	b	df74 <rb_inet_ntop_sock+0x8c>
    df6c:	ldr	r1, [pc, #184]	; e02c <rb_inet_ntop_sock+0x144>
    df70:	add	r1, pc, r1
    df74:	mov	lr, #46	; 0x2e
    df78:	mov	r3, r1
    df7c:	strb	lr, [r3], #1
    df80:	ldrb	r2, [r0, #5]
    df84:	ldr	r4, [ip, r2, lsl #2]
    df88:	ldrb	r2, [r4]
    df8c:	cmp	r2, #0
    df90:	beq	dfac <rb_inet_ntop_sock+0xc4>
    df94:	add	r1, r4, #1
    df98:	strb	r2, [r3], #1
    df9c:	ldrb	r2, [r1], #1
    dfa0:	cmp	r2, #0
    dfa4:	bne	df98 <rb_inet_ntop_sock+0xb0>
    dfa8:	sub	r1, r3, #1
    dfac:	strb	lr, [r3]
    dfb0:	add	r3, r1, #2
    dfb4:	ldrb	r2, [r0, #6]
    dfb8:	ldr	r4, [ip, r2, lsl #2]
    dfbc:	ldrb	r2, [r4]
    dfc0:	cmp	r2, #0
    dfc4:	beq	dfdc <rb_inet_ntop_sock+0xf4>
    dfc8:	add	r1, r4, #1
    dfcc:	strb	r2, [r3], #1
    dfd0:	ldrb	r2, [r1], #1
    dfd4:	cmp	r2, #0
    dfd8:	bne	dfcc <rb_inet_ntop_sock+0xe4>
    dfdc:	mov	r1, #46	; 0x2e
    dfe0:	strb	r1, [r3], #1
    dfe4:	ldrb	r0, [r0, #7]
    dfe8:	ldr	r1, [ip, r0, lsl #2]
    dfec:	ldrb	r0, [r1]
    dff0:	cmp	r0, #0
    dff4:	beq	e00c <rb_inet_ntop_sock+0x124>
    dff8:	add	r1, r1, #1
    dffc:	strb	r0, [r3], #1
    e000:	ldrb	r0, [r1], #1
    e004:	cmp	r0, #0
    e008:	bne	dffc <rb_inet_ntop_sock+0x114>
    e00c:	mov	r0, #0
    e010:	strb	r0, [r3]
    e014:	mov	r0, r5
    e018:	ldr	r1, [pc, #20]	; e034 <rb_inet_ntop_sock+0x14c>
    e01c:	add	r1, pc, r1
    e020:	pop	{r4, r5, fp, lr}
    e024:	b	5124 <strcpy@plt>
    e028:	.word	0x0001db18
    e02c:	.word	0x00030990
    e030:	.word	0x000309ac
    e034:	.word	0x000308e4

0000e038 <rb_inet_ntop>:
    e038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e03c:	add	fp, sp, #28
    e040:	sub	sp, sp, #108	; 0x6c
    e044:	mov	ip, r2
    e048:	mov	r9, r1
    e04c:	mov	r4, #0
    e050:	cmp	r0, #10
    e054:	beq	e0a4 <rb_inet_ntop+0x6c>
    e058:	cmp	r0, #2
    e05c:	bne	e9dc <rb_inet_ntop+0x9a4>
    e060:	cmp	r3, #16
    e064:	bcc	e9dc <rb_inet_ntop+0x9a4>
    e068:	ldrb	r1, [r9]
    e06c:	ldr	r0, [pc, #2840]	; eb8c <rb_inet_ntop+0xb54>
    e070:	add	r0, pc, r0
    e074:	ldr	r1, [r0, r1, lsl #2]
    e078:	ldrb	r2, [r1]
    e07c:	cmp	r2, #0
    e080:	beq	e640 <rb_inet_ntop+0x608>
    e084:	add	r3, r1, #1
    e088:	ldr	r1, [pc, #2820]	; eb94 <rb_inet_ntop+0xb5c>
    e08c:	add	r1, pc, r1
    e090:	strb	r2, [r1], #1
    e094:	ldrb	r2, [r3], #1
    e098:	cmp	r2, #0
    e09c:	bne	e090 <rb_inet_ntop+0x58>
    e0a0:	b	e648 <rb_inet_ntop+0x610>
    e0a4:	ldr	r0, [r9]
    e0a8:	cmp	r0, #0
    e0ac:	beq	e0b8 <rb_inet_ntop+0x80>
    e0b0:	ldrb	r2, [r9, #4]
    e0b4:	b	e0c4 <rb_inet_ntop+0x8c>
    e0b8:	ldr	r2, [r9, #4]
    e0bc:	cmp	r2, #0
    e0c0:	beq	e7f0 <rb_inet_ntop+0x7b8>
    e0c4:	ldrb	r1, [r9, #14]
    e0c8:	str	ip, [sp, #4]
    e0cc:	ldrb	r6, [r9, #1]
    e0d0:	ldrb	r5, [r9, #5]
    e0d4:	ldrb	r4, [r9, #2]
    e0d8:	ldrb	r7, [r9, #10]
    e0dc:	uxtb	r2, r2
    e0e0:	ldrb	ip, [r9, #6]
    e0e4:	ldrb	r8, [r9, #7]
    e0e8:	str	r1, [sp, #48]	; 0x30
    e0ec:	ldrb	r1, [r9, #15]
    e0f0:	bfi	r6, r0, #8, #8
    e0f4:	orr	r2, r5, r2, lsl #8
    e0f8:	cmp	r6, #0
    e0fc:	str	r1, [sp, #44]	; 0x2c
    e100:	ldrb	r1, [r9, #12]
    e104:	str	r1, [sp, #40]	; 0x28
    e108:	ldrb	r1, [r9, #13]
    e10c:	str	r1, [sp, #36]	; 0x24
    e110:	ldrb	r1, [r9, #11]
    e114:	str	r1, [sp, #32]
    e118:	ldrb	r1, [r9, #8]
    e11c:	str	r1, [sp, #28]
    e120:	ldrb	r1, [r9, #9]
    e124:	str	r1, [sp, #24]
    e128:	ldrb	r1, [r9, #3]
    e12c:	str	r2, [sp, #52]	; 0x34
    e130:	mov	r2, r6
    e134:	str	r3, [sp, #20]
    e138:	movwne	r2, #1
    e13c:	orr	r0, r1, r4, lsl #8
    e140:	mov	r4, r7
    e144:	cmp	r0, #0
    e148:	str	r0, [sp, #8]
    e14c:	str	r6, [sp, #12]
    e150:	beq	e1ac <rb_inet_ntop+0x174>
    e154:	clz	r0, r6
    e158:	rsb	lr, r2, #0
    e15c:	mvn	r2, #0
    e160:	lsr	sl, r0, #5
    e164:	mov	r0, sl
    e168:	ldr	r1, [sp, #52]	; 0x34
    e16c:	orr	r5, r8, ip, lsl #8
    e170:	cmp	r1, #0
    e174:	beq	e1d0 <rb_inet_ntop+0x198>
    e178:	mvn	r7, #0
    e17c:	cmn	r2, #1
    e180:	beq	e1e4 <rb_inet_ntop+0x1ac>
    e184:	add	r3, lr, #1
    e188:	mov	r1, #0
    e18c:	cmp	r0, sl
    e190:	clz	r3, r3
    e194:	movwhi	r1, #1
    e198:	lsr	r3, r3, #5
    e19c:	orrs	r1, r3, r1
    e1a0:	moveq	r2, lr
    e1a4:	movne	sl, r0
    e1a8:	b	e1e8 <rb_inet_ntop+0x1b0>
    e1ac:	mov	r0, #1
    e1b0:	cmp	r6, #0
    e1b4:	mvn	lr, #0
    e1b8:	mov	sl, #0
    e1bc:	movweq	r0, #2
    e1c0:	ldr	r1, [sp, #52]	; 0x34
    e1c4:	orr	r5, r8, ip, lsl #8
    e1c8:	cmp	r1, #0
    e1cc:	bne	e178 <rb_inet_ntop+0x140>
    e1d0:	add	r0, r0, #1
    e1d4:	cmn	r2, #1
    e1d8:	mov	r7, r2
    e1dc:	movweq	r0, #1
    e1e0:	movweq	r7, #2
    e1e4:	mov	r2, lr
    e1e8:	ldr	r1, [sp, #28]
    e1ec:	ldr	r3, [sp, #24]
    e1f0:	mov	lr, r4
    e1f4:	cmp	r5, #0
    e1f8:	str	r5, [sp, #16]
    e1fc:	orr	r8, r3, r1, lsl #8
    e200:	beq	e238 <rb_inet_ntop+0x200>
    e204:	mvn	r5, #0
    e208:	cmn	r7, #1
    e20c:	beq	e24c <rb_inet_ntop+0x214>
    e210:	add	r3, r2, #1
    e214:	mov	r1, #0
    e218:	cmp	r0, sl
    e21c:	clz	r3, r3
    e220:	movwgt	r1, #1
    e224:	lsr	r3, r3, #5
    e228:	orrs	r1, r3, r1
    e22c:	moveq	r7, r2
    e230:	movne	sl, r0
    e234:	b	e250 <rb_inet_ntop+0x218>
    e238:	add	r0, r0, #1
    e23c:	cmn	r7, #1
    e240:	mov	r5, r7
    e244:	movweq	r0, #1
    e248:	movweq	r5, #3
    e24c:	mov	r7, r2
    e250:	add	r6, sp, #32
    e254:	cmp	r8, #0
    e258:	ldm	r6, {r1, r4, r6}
    e25c:	orr	lr, r1, lr, lsl #8
    e260:	beq	e2b8 <rb_inet_ntop+0x280>
    e264:	mvn	r3, #0
    e268:	cmn	r5, #1
    e26c:	beq	e2cc <rb_inet_ntop+0x294>
    e270:	add	r2, r7, #1
    e274:	mov	r1, #0
    e278:	cmp	r0, sl
    e27c:	clz	r2, r2
    e280:	movwgt	r1, #1
    e284:	lsr	r2, r2, #5
    e288:	orrs	r1, r2, r1
    e28c:	moveq	r5, r7
    e290:	movne	sl, r0
    e294:	orr	ip, r4, r6, lsl #8
    e298:	cmp	lr, #0
    e29c:	bne	e2dc <rb_inet_ntop+0x2a4>
    e2a0:	add	r0, r0, #1
    e2a4:	cmn	r3, #1
    e2a8:	mov	r1, r3
    e2ac:	movweq	r0, #1
    e2b0:	movweq	r1, #5
    e2b4:	b	e310 <rb_inet_ntop+0x2d8>
    e2b8:	add	r0, r0, #1
    e2bc:	cmn	r5, #1
    e2c0:	mov	r3, r5
    e2c4:	movweq	r0, #1
    e2c8:	movweq	r3, #4
    e2cc:	mov	r5, r7
    e2d0:	orr	ip, r4, r6, lsl #8
    e2d4:	cmp	lr, #0
    e2d8:	beq	e2a0 <rb_inet_ntop+0x268>
    e2dc:	mvn	r1, #0
    e2e0:	cmn	r3, #1
    e2e4:	beq	e310 <rb_inet_ntop+0x2d8>
    e2e8:	add	r7, r5, #1
    e2ec:	mov	r2, #0
    e2f0:	cmp	r0, sl
    e2f4:	clz	r7, r7
    e2f8:	movwgt	r2, #1
    e2fc:	lsr	r7, r7, #5
    e300:	orrs	r2, r7, r2
    e304:	moveq	r3, r5
    e308:	movne	sl, r0
    e30c:	b	e314 <rb_inet_ntop+0x2dc>
    e310:	mov	r3, r5
    e314:	ldr	r2, [sp, #48]	; 0x30
    e318:	ldr	r5, [sp, #44]	; 0x2c
    e31c:	cmp	ip, #0
    e320:	orr	r4, r5, r2, lsl #8
    e324:	beq	e35c <rb_inet_ntop+0x324>
    e328:	mvn	r2, #0
    e32c:	cmn	r1, #1
    e330:	beq	e370 <rb_inet_ntop+0x338>
    e334:	add	r5, r3, #1
    e338:	mov	r7, #0
    e33c:	cmp	r0, sl
    e340:	clz	r5, r5
    e344:	movwgt	r7, #1
    e348:	lsr	r5, r5, #5
    e34c:	orrs	r7, r5, r7
    e350:	moveq	r1, r3
    e354:	movne	sl, r0
    e358:	b	e374 <rb_inet_ntop+0x33c>
    e35c:	add	r0, r0, #1
    e360:	cmn	r1, #1
    e364:	mov	r2, r1
    e368:	movweq	r0, #1
    e36c:	movweq	r2, #6
    e370:	mov	r1, r3
    e374:	cmp	r4, #0
    e378:	str	ip, [sp, #36]	; 0x24
    e37c:	str	lr, [sp, #40]	; 0x28
    e380:	str	r8, [sp, #28]
    e384:	beq	e3b8 <rb_inet_ntop+0x380>
    e388:	cmn	r2, #1
    e38c:	beq	e3f8 <rb_inet_ntop+0x3c0>
    e390:	add	r7, r1, #1
    e394:	mov	r3, #0
    e398:	cmp	r0, sl
    e39c:	clz	r7, r7
    e3a0:	movwgt	r3, #1
    e3a4:	lsr	r7, r7, #5
    e3a8:	orrs	r3, r7, r3
    e3ac:	moveq	r2, r1
    e3b0:	movne	sl, r0
    e3b4:	b	e3fc <rb_inet_ntop+0x3c4>
    e3b8:	add	r0, r0, #1
    e3bc:	cmn	r2, #1
    e3c0:	add	r7, r1, #1
    e3c4:	mov	r3, #0
    e3c8:	movweq	r0, #1
    e3cc:	clz	r7, r7
    e3d0:	cmp	r0, sl
    e3d4:	lsr	r7, r7, #5
    e3d8:	movwgt	r3, #1
    e3dc:	orrs	r3, r7, r3
    e3e0:	movne	sl, r0
    e3e4:	cmn	r2, #1
    e3e8:	movweq	r2, #7
    e3ec:	cmp	r3, #0
    e3f0:	moveq	r2, r1
    e3f4:	b	e3fc <rb_inet_ntop+0x3c4>
    e3f8:	mov	r2, r1
    e3fc:	cmn	r2, #1
    e400:	mov	r8, r2
    e404:	mvnne	r8, #0
    e408:	cmp	sl, #2
    e40c:	movge	r8, r2
    e410:	cmn	r8, #1
    e414:	beq	e47c <rb_inet_ntop+0x444>
    e418:	mov	r5, r4
    e41c:	add	r6, r8, sl
    e420:	cmp	r8, #0
    e424:	bne	e554 <rb_inet_ntop+0x51c>
    e428:	cmp	r6, #0
    e42c:	ble	e840 <rb_inet_ntop+0x808>
    e430:	movw	r0, #14896	; 0x3a30
    e434:	cmp	r6, #1
    e438:	strh	r0, [sp, #56]	; 0x38
    e43c:	add	r0, sp, #56	; 0x38
    e440:	orr	r7, r0, #2
    e444:	beq	e85c <rb_inet_ntop+0x824>
    e448:	cmp	r6, #2
    e44c:	ble	e87c <rb_inet_ntop+0x844>
    e450:	cmp	r6, #3
    e454:	beq	e89c <rb_inet_ntop+0x864>
    e458:	cmp	r6, #4
    e45c:	ble	e8bc <rb_inet_ntop+0x884>
    e460:	cmp	r6, #5
    e464:	beq	e8dc <rb_inet_ntop+0x8a4>
    e468:	cmp	r6, #6
    e46c:	ble	e8fc <rb_inet_ntop+0x8c4>
    e470:	cmp	r6, #7
    e474:	bne	e7d4 <rb_inet_ntop+0x79c>
    e478:	b	e990 <rb_inet_ntop+0x958>
    e47c:	ldr	r8, [pc, #1888]	; ebe4 <rb_inet_ntop+0xbac>
    e480:	ldr	r2, [sp, #12]
    e484:	add	r7, sp, #56	; 0x38
    e488:	mov	r0, r7
    e48c:	add	r8, pc, r8
    e490:	mov	r1, r8
    e494:	bl	5544 <sprintf@plt>
    e498:	ldr	r2, [sp, #8]
    e49c:	add	r7, r7, r0
    e4a0:	mov	r6, #58	; 0x3a
    e4a4:	mov	r1, r8
    e4a8:	strb	r6, [r7], #1
    e4ac:	mov	r0, r7
    e4b0:	bl	5544 <sprintf@plt>
    e4b4:	strb	r6, [r7, r0]!
    e4b8:	mov	r1, r8
    e4bc:	ldr	r2, [sp, #52]	; 0x34
    e4c0:	add	r5, r7, #1
    e4c4:	mov	r0, r5
    e4c8:	bl	5544 <sprintf@plt>
    e4cc:	strb	r6, [r5, r0]!
    e4d0:	mov	r1, r8
    e4d4:	ldr	r2, [sp, #16]
    e4d8:	add	r5, r5, #1
    e4dc:	mov	r0, r5
    e4e0:	bl	5544 <sprintf@plt>
    e4e4:	strb	r6, [r5, r0]!
    e4e8:	mov	r1, r8
    e4ec:	ldr	r2, [sp, #28]
    e4f0:	add	r5, r5, #1
    e4f4:	mov	r0, r5
    e4f8:	bl	5544 <sprintf@plt>
    e4fc:	strb	r6, [r5, r0]!
    e500:	mov	r1, r8
    e504:	ldr	r2, [sp, #40]	; 0x28
    e508:	add	r5, r5, #1
    e50c:	mov	r0, r5
    e510:	bl	5544 <sprintf@plt>
    e514:	strb	r6, [r5, r0]!
    e518:	mov	r7, r4
    e51c:	mov	r1, r8
    e520:	ldr	r2, [sp, #36]	; 0x24
    e524:	add	r4, r5, #1
    e528:	mov	r0, r4
    e52c:	bl	5544 <sprintf@plt>
    e530:	strb	r6, [r4, r0]!
    e534:	mov	r1, r8
    e538:	mov	r2, r7
    e53c:	add	r4, r4, #1
    e540:	mov	r0, r4
    e544:	bl	5544 <sprintf@plt>
    e548:	ldr	r1, [sp, #20]
    e54c:	add	r7, r4, r0
    e550:	b	e9b4 <rb_inet_ntop+0x97c>
    e554:	ldr	r1, [pc, #1624]	; ebb4 <rb_inet_ntop+0xb7c>
    e558:	ldr	r2, [sp, #12]
    e55c:	mov	r4, r6
    e560:	add	r6, sp, #56	; 0x38
    e564:	mov	r0, r6
    e568:	add	r1, pc, r1
    e56c:	bl	5544 <sprintf@plt>
    e570:	add	r7, r6, r0
    e574:	mov	r0, #58	; 0x3a
    e578:	mov	r6, r4
    e57c:	cmp	r8, #1
    e580:	strb	r0, [r7], #1
    e584:	bgt	e590 <rb_inet_ntop+0x558>
    e588:	cmp	r6, #1
    e58c:	bgt	e5a8 <rb_inet_ntop+0x570>
    e590:	ldr	r1, [pc, #1568]	; ebb8 <rb_inet_ntop+0xb80>
    e594:	ldr	r2, [sp, #8]
    e598:	mov	r0, r7
    e59c:	add	r1, pc, r1
    e5a0:	bl	5544 <sprintf@plt>
    e5a4:	add	r7, r7, r0
    e5a8:	cmp	r8, #2
    e5ac:	bgt	e700 <rb_inet_ntop+0x6c8>
    e5b0:	cmp	r6, #2
    e5b4:	ble	e700 <rb_inet_ntop+0x6c8>
    e5b8:	cmp	r8, #2
    e5bc:	moveq	r0, #58	; 0x3a
    e5c0:	strbeq	r0, [r7], #1
    e5c4:	cmp	r8, #3
    e5c8:	bgt	e728 <rb_inet_ntop+0x6f0>
    e5cc:	cmp	r6, #3
    e5d0:	ble	e728 <rb_inet_ntop+0x6f0>
    e5d4:	cmp	r8, #3
    e5d8:	moveq	r0, #58	; 0x3a
    e5dc:	strbeq	r0, [r7], #1
    e5e0:	cmp	r8, #4
    e5e4:	bgt	e750 <rb_inet_ntop+0x718>
    e5e8:	cmp	r6, #4
    e5ec:	ble	e750 <rb_inet_ntop+0x718>
    e5f0:	cmp	r8, #4
    e5f4:	moveq	r0, #58	; 0x3a
    e5f8:	strbeq	r0, [r7], #1
    e5fc:	cmp	r8, #5
    e600:	bgt	e778 <rb_inet_ntop+0x740>
    e604:	cmp	r6, #5
    e608:	ble	e778 <rb_inet_ntop+0x740>
    e60c:	cmp	r8, #5
    e610:	moveq	r0, #58	; 0x3a
    e614:	strbeq	r0, [r7], #1
    e618:	cmp	r8, #6
    e61c:	bgt	e7a0 <rb_inet_ntop+0x768>
    e620:	cmp	r6, #6
    e624:	ble	e7a0 <rb_inet_ntop+0x768>
    e628:	cmp	r8, #6
    e62c:	moveq	r0, #58	; 0x3a
    e630:	strbeq	r0, [r7], #1
    e634:	cmp	r6, #7
    e638:	bgt	e7c8 <rb_inet_ntop+0x790>
    e63c:	b	e990 <rb_inet_ntop+0x958>
    e640:	ldr	r1, [pc, #1352]	; eb90 <rb_inet_ntop+0xb58>
    e644:	add	r1, pc, r1
    e648:	mov	r2, #46	; 0x2e
    e64c:	mov	r3, r1
    e650:	strb	r2, [r3], #1
    e654:	ldrb	r7, [r9, #1]
    e658:	ldr	r5, [r0, r7, lsl #2]
    e65c:	ldrb	r7, [r5]
    e660:	cmp	r7, #0
    e664:	beq	e680 <rb_inet_ntop+0x648>
    e668:	add	r1, r5, #1
    e66c:	strb	r7, [r3], #1
    e670:	ldrb	r7, [r1], #1
    e674:	cmp	r7, #0
    e678:	bne	e66c <rb_inet_ntop+0x634>
    e67c:	sub	r1, r3, #1
    e680:	strb	r2, [r3]
    e684:	add	r1, r1, #2
    e688:	ldrb	r2, [r9, #2]
    e68c:	ldr	r3, [r0, r2, lsl #2]
    e690:	ldrb	r2, [r3]
    e694:	cmp	r2, #0
    e698:	beq	e6b0 <rb_inet_ntop+0x678>
    e69c:	add	r3, r3, #1
    e6a0:	strb	r2, [r1], #1
    e6a4:	ldrb	r2, [r3], #1
    e6a8:	cmp	r2, #0
    e6ac:	bne	e6a0 <rb_inet_ntop+0x668>
    e6b0:	mov	r2, #46	; 0x2e
    e6b4:	strb	r2, [r1], #1
    e6b8:	ldrb	r2, [r9, #3]
    e6bc:	ldr	r2, [r0, r2, lsl #2]
    e6c0:	ldrb	r0, [r2]
    e6c4:	cmp	r0, #0
    e6c8:	beq	e6e0 <rb_inet_ntop+0x6a8>
    e6cc:	add	r2, r2, #1
    e6d0:	strb	r0, [r1], #1
    e6d4:	ldrb	r0, [r2], #1
    e6d8:	cmp	r0, #0
    e6dc:	bne	e6d0 <rb_inet_ntop+0x698>
    e6e0:	mov	r0, #0
    e6e4:	strb	r0, [r1]
    e6e8:	mov	r0, ip
    e6ec:	ldr	r1, [pc, #1188]	; eb98 <rb_inet_ntop+0xb60>
    e6f0:	add	r1, pc, r1
    e6f4:	sub	sp, fp, #28
    e6f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6fc:	b	5124 <strcpy@plt>
    e700:	mov	r0, #58	; 0x3a
    e704:	strb	r0, [r7], #1
    e708:	ldr	r1, [pc, #1196]	; ebbc <rb_inet_ntop+0xb84>
    e70c:	ldr	r2, [sp, #52]	; 0x34
    e710:	mov	r0, r7
    e714:	add	r1, pc, r1
    e718:	bl	5544 <sprintf@plt>
    e71c:	add	r7, r7, r0
    e720:	cmp	r8, #3
    e724:	ble	e5cc <rb_inet_ntop+0x594>
    e728:	mov	r0, #58	; 0x3a
    e72c:	strb	r0, [r7], #1
    e730:	ldr	r1, [pc, #1176]	; ebd0 <rb_inet_ntop+0xb98>
    e734:	ldr	r2, [sp, #16]
    e738:	mov	r0, r7
    e73c:	add	r1, pc, r1
    e740:	bl	5544 <sprintf@plt>
    e744:	add	r7, r7, r0
    e748:	cmp	r8, #4
    e74c:	ble	e5e8 <rb_inet_ntop+0x5b0>
    e750:	mov	r0, #58	; 0x3a
    e754:	strb	r0, [r7], #1
    e758:	ldr	r1, [pc, #1140]	; ebd4 <rb_inet_ntop+0xb9c>
    e75c:	ldr	r2, [sp, #28]
    e760:	mov	r0, r7
    e764:	add	r1, pc, r1
    e768:	bl	5544 <sprintf@plt>
    e76c:	add	r7, r7, r0
    e770:	cmp	r8, #5
    e774:	ble	e604 <rb_inet_ntop+0x5cc>
    e778:	mov	r0, #58	; 0x3a
    e77c:	strb	r0, [r7], #1
    e780:	ldr	r1, [pc, #1104]	; ebd8 <rb_inet_ntop+0xba0>
    e784:	ldr	r2, [sp, #40]	; 0x28
    e788:	mov	r0, r7
    e78c:	add	r1, pc, r1
    e790:	bl	5544 <sprintf@plt>
    e794:	add	r7, r7, r0
    e798:	cmp	r8, #6
    e79c:	ble	e620 <rb_inet_ntop+0x5e8>
    e7a0:	mov	r0, #58	; 0x3a
    e7a4:	strb	r0, [r7], #1
    e7a8:	ldr	r1, [pc, #1068]	; ebdc <rb_inet_ntop+0xba4>
    e7ac:	ldr	r2, [sp, #36]	; 0x24
    e7b0:	mov	r0, r7
    e7b4:	add	r1, pc, r1
    e7b8:	bl	5544 <sprintf@plt>
    e7bc:	add	r7, r7, r0
    e7c0:	cmp	r6, #7
    e7c4:	ble	e990 <rb_inet_ntop+0x958>
    e7c8:	cmp	r8, #7
    e7cc:	moveq	r0, #58	; 0x3a
    e7d0:	strbeq	r0, [r7], #1
    e7d4:	cmn	r8, #1
    e7d8:	beq	eae0 <rb_inet_ntop+0xaa8>
    e7dc:	ldr	r1, [sp, #20]
    e7e0:	cmp	r6, #8
    e7e4:	moveq	r0, #58	; 0x3a
    e7e8:	strbeq	r0, [r7], #1
    e7ec:	b	e9b4 <rb_inet_ntop+0x97c>
    e7f0:	ldr	r1, [r9, #8]
    e7f4:	cmn	r1, #65536	; 0x10000
    e7f8:	bne	e9e8 <rb_inet_ntop+0x9b0>
    e7fc:	cmp	r3, #16
    e800:	bcc	e9dc <rb_inet_ntop+0x9a4>
    e804:	ldrb	r1, [r9, #12]
    e808:	ldr	r0, [pc, #908]	; eb9c <rb_inet_ntop+0xb64>
    e80c:	add	r0, pc, r0
    e810:	ldr	r1, [r0, r1, lsl #2]
    e814:	ldrb	r2, [r1]
    e818:	cmp	r2, #0
    e81c:	beq	eae8 <rb_inet_ntop+0xab0>
    e820:	add	r3, r1, #1
    e824:	ldr	r1, [pc, #888]	; eba4 <rb_inet_ntop+0xb6c>
    e828:	add	r1, pc, r1
    e82c:	strb	r2, [r1], #1
    e830:	ldrb	r2, [r3], #1
    e834:	cmp	r2, #0
    e838:	bne	e82c <rb_inet_ntop+0x7f4>
    e83c:	b	eaf0 <rb_inet_ntop+0xab8>
    e840:	ldr	r1, [pc, #864]	; eba8 <rb_inet_ntop+0xb70>
    e844:	ldr	r2, [sp, #12]
    e848:	add	r7, sp, #56	; 0x38
    e84c:	mov	r0, r7
    e850:	add	r1, pc, r1
    e854:	bl	5544 <sprintf@plt>
    e858:	add	r7, r7, r0
    e85c:	mov	r0, #58	; 0x3a
    e860:	ldr	r2, [sp, #8]
    e864:	strb	r0, [r7], #1
    e868:	ldr	r1, [pc, #828]	; ebac <rb_inet_ntop+0xb74>
    e86c:	mov	r0, r7
    e870:	add	r1, pc, r1
    e874:	bl	5544 <sprintf@plt>
    e878:	add	r7, r7, r0
    e87c:	mov	r0, #58	; 0x3a
    e880:	strb	r0, [r7], #1
    e884:	ldr	r1, [pc, #804]	; ebb0 <rb_inet_ntop+0xb78>
    e888:	ldr	r2, [sp, #52]	; 0x34
    e88c:	mov	r0, r7
    e890:	add	r1, pc, r1
    e894:	bl	5544 <sprintf@plt>
    e898:	add	r7, r7, r0
    e89c:	mov	r0, #58	; 0x3a
    e8a0:	strb	r0, [r7], #1
    e8a4:	ldr	r1, [pc, #828]	; ebe8 <rb_inet_ntop+0xbb0>
    e8a8:	ldr	r2, [sp, #16]
    e8ac:	mov	r0, r7
    e8b0:	add	r1, pc, r1
    e8b4:	bl	5544 <sprintf@plt>
    e8b8:	add	r7, r7, r0
    e8bc:	mov	r0, #58	; 0x3a
    e8c0:	strb	r0, [r7], #1
    e8c4:	ldr	r1, [pc, #800]	; ebec <rb_inet_ntop+0xbb4>
    e8c8:	ldr	r2, [sp, #28]
    e8cc:	mov	r0, r7
    e8d0:	add	r1, pc, r1
    e8d4:	bl	5544 <sprintf@plt>
    e8d8:	add	r7, r7, r0
    e8dc:	mov	r0, #58	; 0x3a
    e8e0:	strb	r0, [r7], #1
    e8e4:	ldr	r1, [pc, #772]	; ebf0 <rb_inet_ntop+0xbb8>
    e8e8:	ldr	r2, [sp, #40]	; 0x28
    e8ec:	mov	r0, r7
    e8f0:	add	r1, pc, r1
    e8f4:	bl	5544 <sprintf@plt>
    e8f8:	add	r7, r7, r0
    e8fc:	mov	r0, #58	; 0x3a
    e900:	cmp	sl, #6
    e904:	strb	r0, [r7], #1
    e908:	beq	e924 <rb_inet_ntop+0x8ec>
    e90c:	cmp	sl, #5
    e910:	bne	e978 <rb_inet_ntop+0x940>
    e914:	ldr	r1, [sp, #40]	; 0x28
    e918:	movw	r0, #65535	; 0xffff
    e91c:	cmp	r1, r0
    e920:	bne	e978 <rb_inet_ntop+0x940>
    e924:	add	r0, sp, #56	; 0x38
    e928:	mov	r4, #0
    e92c:	add	r0, r0, #46	; 0x2e
    e930:	sub	r0, r0, r7
    e934:	cmp	r0, #16
    e938:	bcc	e9dc <rb_inet_ntop+0x9a4>
    e93c:	ldrb	r1, [r9, #12]
    e940:	ldr	r0, [pc, #632]	; ebc0 <rb_inet_ntop+0xb88>
    e944:	add	r0, pc, r0
    e948:	ldr	r1, [r0, r1, lsl #2]
    e94c:	ldrb	r2, [r1]
    e950:	cmp	r2, #0
    e954:	beq	ea0c <rb_inet_ntop+0x9d4>
    e958:	add	r3, r1, #1
    e95c:	ldr	r1, [pc, #612]	; ebc8 <rb_inet_ntop+0xb90>
    e960:	add	r1, pc, r1
    e964:	strb	r2, [r1], #1
    e968:	ldrb	r2, [r3], #1
    e96c:	cmp	r2, #0
    e970:	bne	e964 <rb_inet_ntop+0x92c>
    e974:	b	ea14 <rb_inet_ntop+0x9dc>
    e978:	ldr	r1, [pc, #628]	; ebf4 <rb_inet_ntop+0xbbc>
    e97c:	ldr	r2, [sp, #36]	; 0x24
    e980:	mov	r0, r7
    e984:	add	r1, pc, r1
    e988:	bl	5544 <sprintf@plt>
    e98c:	add	r7, r7, r0
    e990:	mov	r0, #58	; 0x3a
    e994:	mov	r2, r5
    e998:	strb	r0, [r7], #1
    e99c:	ldr	r1, [pc, #572]	; ebe0 <rb_inet_ntop+0xba8>
    e9a0:	mov	r0, r7
    e9a4:	add	r1, pc, r1
    e9a8:	bl	5544 <sprintf@plt>
    e9ac:	ldr	r1, [sp, #20]
    e9b0:	add	r7, r7, r0
    e9b4:	mov	r4, #0
    e9b8:	add	r0, sp, #56	; 0x38
    e9bc:	strb	r4, [r7], #1
    e9c0:	sub	r2, r7, r0
    e9c4:	cmp	r2, r1
    e9c8:	bhi	e9dc <rb_inet_ntop+0x9a4>
    e9cc:	ldr	r4, [sp, #4]
    e9d0:	add	r1, sp, #56	; 0x38
    e9d4:	mov	r0, r4
    e9d8:	bl	50a0 <memcpy@plt>
    e9dc:	mov	r0, r4
    e9e0:	sub	sp, fp, #28
    e9e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9e8:	ldr	r1, [r9, #8]
    e9ec:	mov	r2, #0
    e9f0:	cmp	r1, #0
    e9f4:	bne	e0c4 <rb_inet_ntop+0x8c>
    e9f8:	ldr	r1, [r9, #12]
    e9fc:	rev	r1, r1
    ea00:	cmp	r1, #2
    ea04:	bcc	e0c4 <rb_inet_ntop+0x8c>
    ea08:	b	e7fc <rb_inet_ntop+0x7c4>
    ea0c:	ldr	r1, [pc, #432]	; ebc4 <rb_inet_ntop+0xb8c>
    ea10:	add	r1, pc, r1
    ea14:	mov	r2, #46	; 0x2e
    ea18:	mov	r3, r1
    ea1c:	strb	r2, [r3], #1
    ea20:	ldrb	r5, [r9, #13]
    ea24:	ldr	r4, [r0, r5, lsl #2]
    ea28:	ldrb	r5, [r4]
    ea2c:	cmp	r5, #0
    ea30:	beq	ea4c <rb_inet_ntop+0xa14>
    ea34:	add	r1, r4, #1
    ea38:	strb	r5, [r3], #1
    ea3c:	ldrb	r5, [r1], #1
    ea40:	cmp	r5, #0
    ea44:	bne	ea38 <rb_inet_ntop+0xa00>
    ea48:	sub	r1, r3, #1
    ea4c:	strb	r2, [r3]
    ea50:	add	r1, r1, #2
    ea54:	ldrb	r2, [r9, #14]
    ea58:	ldr	r3, [r0, r2, lsl #2]
    ea5c:	ldrb	r2, [r3]
    ea60:	cmp	r2, #0
    ea64:	beq	ea7c <rb_inet_ntop+0xa44>
    ea68:	add	r3, r3, #1
    ea6c:	strb	r2, [r1], #1
    ea70:	ldrb	r2, [r3], #1
    ea74:	cmp	r2, #0
    ea78:	bne	ea6c <rb_inet_ntop+0xa34>
    ea7c:	mov	r2, #46	; 0x2e
    ea80:	strb	r2, [r1], #1
    ea84:	ldrb	r2, [r9, #15]
    ea88:	ldr	r2, [r0, r2, lsl #2]
    ea8c:	ldrb	r0, [r2]
    ea90:	cmp	r0, #0
    ea94:	beq	eaac <rb_inet_ntop+0xa74>
    ea98:	add	r2, r2, #1
    ea9c:	strb	r0, [r1], #1
    eaa0:	ldrb	r0, [r2], #1
    eaa4:	cmp	r0, #0
    eaa8:	bne	ea9c <rb_inet_ntop+0xa64>
    eaac:	mov	r4, #0
    eab0:	mov	r0, r7
    eab4:	strb	r4, [r1]
    eab8:	ldr	r1, [pc, #268]	; ebcc <rb_inet_ntop+0xb94>
    eabc:	add	r1, pc, r1
    eac0:	bl	5124 <strcpy@plt>
    eac4:	cmp	r0, #0
    eac8:	beq	e9dc <rb_inet_ntop+0x9a4>
    eacc:	mov	r0, r7
    ead0:	bl	507c <strlen@plt>
    ead4:	add	r7, r7, r0
    ead8:	cmn	r8, #1
    eadc:	bne	e7dc <rb_inet_ntop+0x7a4>
    eae0:	ldr	r1, [sp, #20]
    eae4:	b	e9b4 <rb_inet_ntop+0x97c>
    eae8:	ldr	r1, [pc, #176]	; eba0 <rb_inet_ntop+0xb68>
    eaec:	add	r1, pc, r1
    eaf0:	mov	r2, #46	; 0x2e
    eaf4:	mov	r3, r1
    eaf8:	strb	r2, [r3], #1
    eafc:	ldrb	r7, [r9, #13]
    eb00:	ldr	r5, [r0, r7, lsl #2]
    eb04:	ldrb	r7, [r5]
    eb08:	cmp	r7, #0
    eb0c:	beq	eb28 <rb_inet_ntop+0xaf0>
    eb10:	add	r1, r5, #1
    eb14:	strb	r7, [r3], #1
    eb18:	ldrb	r7, [r1], #1
    eb1c:	cmp	r7, #0
    eb20:	bne	eb14 <rb_inet_ntop+0xadc>
    eb24:	sub	r1, r3, #1
    eb28:	strb	r2, [r3]
    eb2c:	add	r1, r1, #2
    eb30:	ldrb	r2, [r9, #14]
    eb34:	ldr	r3, [r0, r2, lsl #2]
    eb38:	ldrb	r2, [r3]
    eb3c:	cmp	r2, #0
    eb40:	beq	eb58 <rb_inet_ntop+0xb20>
    eb44:	add	r3, r3, #1
    eb48:	strb	r2, [r1], #1
    eb4c:	ldrb	r2, [r3], #1
    eb50:	cmp	r2, #0
    eb54:	bne	eb48 <rb_inet_ntop+0xb10>
    eb58:	mov	r2, #46	; 0x2e
    eb5c:	strb	r2, [r1], #1
    eb60:	ldrb	r2, [r9, #15]
    eb64:	ldr	r2, [r0, r2, lsl #2]
    eb68:	ldrb	r0, [r2]
    eb6c:	cmp	r0, #0
    eb70:	beq	e6e0 <rb_inet_ntop+0x6a8>
    eb74:	add	r2, r2, #1
    eb78:	strb	r0, [r1], #1
    eb7c:	ldrb	r0, [r2], #1
    eb80:	cmp	r0, #0
    eb84:	bne	eb78 <rb_inet_ntop+0xb40>
    eb88:	b	e6e0 <rb_inet_ntop+0x6a8>
    eb8c:	.word	0x0001d9e0
    eb90:	.word	0x000302bc
    eb94:	.word	0x00030874
    eb98:	.word	0x00030210
    eb9c:	.word	0x0001d244
    eba0:	.word	0x0002fe14
    eba4:	.word	0x000300d8
    eba8:	.word	0x0000be35
    ebac:	.word	0x0000be15
    ebb0:	.word	0x0000bdf5
    ebb4:	.word	0x0000c11d
    ebb8:	.word	0x0000c0e9
    ebbc:	.word	0x0000bf71
    ebc0:	.word	0x0001d10c
    ebc4:	.word	0x0002fef0
    ebc8:	.word	0x0002ffa0
    ebcc:	.word	0x0002fe44
    ebd0:	.word	0x0000bf49
    ebd4:	.word	0x0000bf21
    ebd8:	.word	0x0000bef9
    ebdc:	.word	0x0000bed1
    ebe0:	.word	0x0000bce1
    ebe4:	.word	0x0000c1f9
    ebe8:	.word	0x0000bdd5
    ebec:	.word	0x0000bdb5
    ebf0:	.word	0x0000bd95
    ebf4:	.word	0x0000bd01

0000ebf8 <inet_pton6>:
    ebf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebfc:	add	fp, sp, #28
    ec00:	sub	sp, sp, #36	; 0x24
    ec04:	mov	sl, r0
    ec08:	add	r0, sp, #16
    ec0c:	vmov.i32	q8, #0	; 0x00000000
    ec10:	str	r1, [sp]
    ec14:	str	r0, [sp, #12]
    ec18:	vst1.64	{d16-d17}, [r0]!
    ec1c:	ldrb	r4, [sl]
    ec20:	str	r0, [sp, #4]
    ec24:	cmp	r4, #58	; 0x3a
    ec28:	bne	ec3c <inet_pton6+0x44>
    ec2c:	ldrb	r1, [sl, #1]!
    ec30:	mov	r0, #0
    ec34:	cmp	r1, #58	; 0x3a
    ec38:	bne	ee80 <inet_pton6+0x288>
    ec3c:	bl	50c4 <__ctype_tolower_loc@plt>
    ec40:	mov	r6, r0
    ec44:	ldr	r0, [r0]
    ec48:	ldr	r4, [r0, r4, lsl #2]
    ec4c:	cmp	r4, #0
    ec50:	beq	ed7c <inet_pton6+0x184>
    ec54:	add	r0, sp, #16
    ec58:	add	r5, sl, #1
    ec5c:	mov	r8, #0
    ec60:	mov	r9, #0
    ec64:	str	r0, [sp, #12]
    ec68:	mov	r0, #0
    ec6c:	ldr	r7, [pc, #884]	; efe8 <inet_pton6+0x3f0>
    ec70:	str	r0, [sp, #8]
    ec74:	add	r7, pc, r7
    ec78:	mov	r0, r7
    ec7c:	mov	r1, r4
    ec80:	mov	r2, #17
    ec84:	bl	5508 <memchr@plt>
    ec88:	cmp	r0, #0
    ec8c:	beq	ecd0 <inet_pton6+0xd8>
    ec90:	sub	r0, r0, r7
    ec94:	mov	r1, #2
    ec98:	orr	r8, r0, r8, lsl #4
    ec9c:	mov	r0, #0
    eca0:	cmp	r0, r8, lsr #16
    eca4:	mov	r0, #1
    eca8:	moveq	r9, r0
    ecac:	movwne	r1, #1
    ecb0:	cmp	r1, #2
    ecb4:	bne	ed6c <inet_pton6+0x174>
    ecb8:	ldrb	r0, [r5], #1
    ecbc:	ldr	r1, [r6]
    ecc0:	ldr	r4, [r1, r0, lsl #2]
    ecc4:	cmp	r4, #0
    ecc8:	bne	ec78 <inet_pton6+0x80>
    eccc:	b	ed8c <inet_pton6+0x194>
    ecd0:	cmp	r4, #58	; 0x3a
    ecd4:	bne	ed28 <inet_pton6+0x130>
    ecd8:	cmp	r9, #0
    ecdc:	beq	ed40 <inet_pton6+0x148>
    ece0:	ldr	r0, [sp, #12]
    ece4:	ldr	r2, [sp, #4]
    ece8:	add	r1, r0, #2
    ecec:	mov	r0, #0
    ecf0:	cmp	r1, r2
    ecf4:	bhi	ee80 <inet_pton6+0x288>
    ecf8:	ldrb	r2, [r5]
    ecfc:	cmp	r2, #0
    ed00:	beq	ee80 <inet_pton6+0x288>
    ed04:	ldr	r2, [sp, #12]
    ed08:	lsr	r0, r8, #8
    ed0c:	mov	r9, #0
    ed10:	mov	sl, r5
    ed14:	str	r1, [sp, #12]
    ed18:	strb	r8, [r2, #1]
    ed1c:	mov	r8, #0
    ed20:	strb	r0, [r2]
    ed24:	b	ecb8 <inet_pton6+0xc0>
    ed28:	cmp	r4, #46	; 0x2e
    ed2c:	bne	ecb8 <inet_pton6+0xc0>
    ed30:	ldrb	r0, [r5]
    ed34:	cmp	r0, #0
    ed38:	beq	ecb8 <inet_pton6+0xc0>
    ed3c:	b	ee88 <inet_pton6+0x290>
    ed40:	ldr	r0, [sp, #8]
    ed44:	ldr	r1, [sp, #12]
    ed48:	mov	r9, #0
    ed4c:	mov	sl, r5
    ed50:	cmp	r0, #0
    ed54:	moveq	r0, r1
    ed58:	mov	r1, #1
    ed5c:	str	r0, [sp, #8]
    ed60:	movweq	r1, #2
    ed64:	cmp	r1, #2
    ed68:	beq	ecb8 <inet_pton6+0xc0>
    ed6c:	mov	r0, #0
    ed70:	cmp	r1, #3
    ed74:	beq	ed8c <inet_pton6+0x194>
    ed78:	b	ee80 <inet_pton6+0x288>
    ed7c:	mov	r0, #0
    ed80:	mov	r9, #0
    ed84:	mov	r8, #0
    ed88:	str	r0, [sp, #8]
    ed8c:	cmp	r9, #0
    ed90:	beq	eddc <inet_pton6+0x1e4>
    ed94:	ldr	r0, [sp, #12]
    ed98:	ldr	r2, [sp, #4]
    ed9c:	add	r1, r0, #2
    eda0:	mov	r0, #0
    eda4:	cmp	r1, r2
    eda8:	bhi	ee80 <inet_pton6+0x288>
    edac:	ldr	r2, [sp, #12]
    edb0:	lsr	r0, r8, #8
    edb4:	strb	r8, [r2, #1]
    edb8:	strb	r0, [r2]
    edbc:	ldr	r0, [sp, #8]
    edc0:	cmp	r0, #0
    edc4:	bne	edec <inet_pton6+0x1f4>
    edc8:	ldr	r2, [sp, #4]
    edcc:	mov	r0, #0
    edd0:	cmp	r1, r2
    edd4:	bne	ee80 <inet_pton6+0x288>
    edd8:	b	ee6c <inet_pton6+0x274>
    eddc:	ldr	r1, [sp, #12]
    ede0:	ldr	r0, [sp, #8]
    ede4:	cmp	r0, #0
    ede8:	beq	edc8 <inet_pton6+0x1d0>
    edec:	ldr	r2, [sp, #4]
    edf0:	cmp	r1, r2
    edf4:	beq	ef6c <inet_pton6+0x374>
    edf8:	sub	r2, r1, r0
    edfc:	cmp	r2, #1
    ee00:	blt	ee6c <inet_pton6+0x274>
    ee04:	mov	r0, #1
    ee08:	cmp	r2, #16
    ee0c:	bcc	ee34 <inet_pton6+0x23c>
    ee10:	ldr	r5, [sp, #8]
    ee14:	mvn	r3, r5
    ee18:	add	r7, r3, r1
    ee1c:	add	r3, sp, #16
    ee20:	add	r6, r3, #15
    ee24:	cmp	r7, r6
    ee28:	addls	r6, r5, r7
    ee2c:	cmpls	r7, r6
    ee30:	bls	ef78 <inet_pton6+0x380>
    ee34:	ldr	r2, [sp, #8]
    ee38:	ldr	r7, [sp, #8]
    ee3c:	add	r2, r0, r2
    ee40:	sub	r1, r2, r1
    ee44:	add	r2, sp, #16
    ee48:	sub	r0, r2, r0
    ee4c:	mov	r2, #0
    ee50:	add	r0, r0, #16
    ee54:	ldrb	r3, [r7, -r1]
    ee58:	strb	r3, [r0], #-1
    ee5c:	strb	r2, [r7, -r1]
    ee60:	add	r1, r1, #1
    ee64:	cmp	r1, #1
    ee68:	bne	ee54 <inet_pton6+0x25c>
    ee6c:	add	r0, sp, #16
    ee70:	vld1.64	{d16-d17}, [r0]
    ee74:	ldr	r0, [sp]
    ee78:	vst1.8	{d16-d17}, [r0]
    ee7c:	mov	r0, #1
    ee80:	sub	sp, fp, #28
    ee84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee88:	ldr	r0, [sp, #12]
    ee8c:	ldr	r2, [sp, #4]
    ee90:	add	r1, r0, #4
    ee94:	mov	r0, #0
    ee98:	cmp	r1, r2
    ee9c:	bhi	ee80 <inet_pton6+0x288>
    eea0:	mov	r7, #0
    eea4:	strb	r7, [sp, #32]
    eea8:	ldrb	r5, [sl]
    eeac:	cmp	r5, #0
    eeb0:	beq	ef6c <inet_pton6+0x374>
    eeb4:	add	r0, sl, #1
    eeb8:	add	r2, sp, #32
    eebc:	mov	r3, #0
    eec0:	mov	r6, #0
    eec4:	sub	r4, r5, #48	; 0x30
    eec8:	uxtb	r4, r4
    eecc:	cmp	r4, #9
    eed0:	bhi	ef10 <inet_pton6+0x318>
    eed4:	uxtb	r4, r7
    eed8:	lsl	r4, r4, #2
    eedc:	uxtab	r7, r4, r7
    eee0:	lsl	r7, r7, #1
    eee4:	uxtab	r7, r7, r5
    eee8:	sub	r7, r7, #48	; 0x30
    eeec:	cmp	r7, #255	; 0xff
    eef0:	bhi	ef6c <inet_pton6+0x374>
    eef4:	cmp	r6, #0
    eef8:	strb	r7, [r2]
    eefc:	beq	ef48 <inet_pton6+0x350>
    ef00:	ldrb	r5, [r0], #1
    ef04:	cmp	r5, #0
    ef08:	bne	eec4 <inet_pton6+0x2cc>
    ef0c:	b	ef64 <inet_pton6+0x36c>
    ef10:	cmp	r3, #4
    ef14:	beq	ef6c <inet_pton6+0x374>
    ef18:	uxtb	r7, r5
    ef1c:	cmp	r7, #46	; 0x2e
    ef20:	bne	ef6c <inet_pton6+0x374>
    ef24:	cmp	r6, #0
    ef28:	beq	ef6c <inet_pton6+0x374>
    ef2c:	mov	r7, #0
    ef30:	mov	r6, #0
    ef34:	strb	r7, [r2, #1]!
    ef38:	ldrb	r5, [r0], #1
    ef3c:	cmp	r5, #0
    ef40:	bne	eec4 <inet_pton6+0x2cc>
    ef44:	b	ef64 <inet_pton6+0x36c>
    ef48:	cmp	r3, #3
    ef4c:	bgt	ef6c <inet_pton6+0x374>
    ef50:	add	r3, r3, #1
    ef54:	mov	r6, #1
    ef58:	ldrb	r5, [r0], #1
    ef5c:	cmp	r5, #0
    ef60:	bne	eec4 <inet_pton6+0x2cc>
    ef64:	cmp	r3, #3
    ef68:	bgt	efcc <inet_pton6+0x3d4>
    ef6c:	mov	r0, #0
    ef70:	sub	sp, fp, #28
    ef74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef78:	sub	r6, r5, r1
    ef7c:	add	r7, r3, #16
    ef80:	add	r6, r7, r6
    ef84:	cmp	r6, r1
    ef88:	ldrcc	r6, [sp, #8]
    ef8c:	cmpcc	r6, r7
    ef90:	bcc	ee34 <inet_pton6+0x23c>
    ef94:	bic	r4, r2, #15
    ef98:	sub	r6, r1, #16
    ef9c:	mvn	r5, #15
    efa0:	vmov.i32	q8, #0	; 0x00000000
    efa4:	orr	r0, r4, #1
    efa8:	mov	r7, r4
    efac:	vld1.8	{d18-d19}, [r6]
    efb0:	subs	r7, r7, #16
    efb4:	vst1.8	{d18-d19}, [r3], r5
    efb8:	vst1.8	{d16-d17}, [r6], r5
    efbc:	bne	efac <inet_pton6+0x3b4>
    efc0:	cmp	r2, r4
    efc4:	bne	ee34 <inet_pton6+0x23c>
    efc8:	b	ee6c <inet_pton6+0x274>
    efcc:	ldr	r0, [sp, #32]
    efd0:	ldr	r2, [sp, #12]
    efd4:	str	r0, [r2]
    efd8:	ldr	r0, [sp, #8]
    efdc:	cmp	r0, #0
    efe0:	bne	edec <inet_pton6+0x1f4>
    efe4:	b	edc8 <inet_pton6+0x1d0>
    efe8:	.word	0x0000ba19

0000efec <rb_get_iotype>:
    efec:	ldr	r0, [pc, #8]	; effc <rb_get_iotype+0x10>
    eff0:	add	r0, pc, r0
    eff4:	add	r0, r0, #68	; 0x44
    eff8:	bx	lr
    effc:	.word	0x0002f920

0000f000 <rb_io_sched_event>:
    f000:	push	{r4, r5, r6, sl, fp, lr}
    f004:	add	fp, sp, #16
    f008:	cmp	r0, #0
    f00c:	beq	f034 <rb_io_sched_event+0x34>
    f010:	ldr	r6, [pc, #68]	; f05c <rb_io_sched_event+0x5c>
    f014:	mov	r5, r0
    f018:	add	r6, pc, r6
    f01c:	ldr	r0, [r6, #16]
    f020:	cmp	r0, #0
    f024:	movne	r4, r1
    f028:	ldrne	r1, [r6, #20]
    f02c:	cmpne	r1, #0
    f030:	bne	f03c <rb_io_sched_event+0x3c>
    f034:	mov	r0, #0
    f038:	pop	{r4, r5, r6, sl, fp, pc}
    f03c:	blx	r0
    f040:	cmp	r0, #0
    f044:	beq	f034 <rb_io_sched_event+0x34>
    f048:	ldr	r2, [r6, #20]
    f04c:	mov	r0, r5
    f050:	mov	r1, r4
    f054:	pop	{r4, r5, r6, sl, fp, lr}
    f058:	bx	r2
    f05c:	.word	0x0002f8f8

0000f060 <rb_io_unsched_event>:
    f060:	push	{r4, r5, fp, lr}
    f064:	add	fp, sp, #8
    f068:	cmp	r0, #0
    f06c:	beq	f090 <rb_io_unsched_event+0x30>
    f070:	ldr	r5, [pc, #56]	; f0b0 <rb_io_unsched_event+0x50>
    f074:	mov	r4, r0
    f078:	add	r5, pc, r5
    f07c:	ldr	r0, [r5, #16]
    f080:	cmp	r0, #0
    f084:	ldrne	r1, [r5, #24]
    f088:	cmpne	r1, #0
    f08c:	bne	f094 <rb_io_unsched_event+0x34>
    f090:	pop	{r4, r5, fp, pc}
    f094:	blx	r0
    f098:	cmp	r0, #0
    f09c:	popeq	{r4, r5, fp, pc}
    f0a0:	ldr	r1, [r5, #24]
    f0a4:	mov	r0, r4
    f0a8:	pop	{r4, r5, fp, lr}
    f0ac:	bx	r1
    f0b0:	.word	0x0002f898

0000f0b4 <rb_io_supports_event>:
    f0b4:	ldr	r0, [pc, #20]	; f0d0 <rb_io_supports_event+0x1c>
    f0b8:	add	r0, pc, r0
    f0bc:	ldr	r0, [r0, #16]
    f0c0:	cmp	r0, #0
    f0c4:	moveq	r0, #0
    f0c8:	bxeq	lr
    f0cc:	bx	r0
    f0d0:	.word	0x0002f858

0000f0d4 <rb_io_init_event>:
    f0d4:	push	{fp, lr}
    f0d8:	mov	fp, sp
    f0dc:	ldr	r0, [pc, #16]	; f0f4 <rb_io_init_event+0x20>
    f0e0:	add	r0, pc, r0
    f0e4:	ldr	r0, [r0, #28]
    f0e8:	blx	r0
    f0ec:	pop	{fp, lr}
    f0f0:	b	1136c <rb_event_io_register_all>
    f0f4:	.word	0x0002f830

0000f0f8 <rb_init_netio>:
    f0f8:	push	{r4, r5, fp, lr}
    f0fc:	add	fp, sp, #8
    f100:	ldr	r0, [pc, #1384]	; f670 <rb_init_netio+0x578>
    f104:	add	r0, pc, r0
    f108:	bl	4e60 <getenv@plt>
    f10c:	mov	r4, r0
    f110:	mov	r0, #1
    f114:	mov	r1, #49152	; 0xc000
    f118:	bl	4ea8 <calloc@plt>
    f11c:	cmp	r0, #0
    f120:	beq	f65c <rb_init_netio+0x564>
    f124:	ldr	r1, [pc, #1352]	; f674 <rb_init_netio+0x57c>
    f128:	ldr	r1, [pc, r1]
    f12c:	str	r0, [r1]
    f130:	bl	fc00 <rb_init_ssl>
    f134:	cmp	r4, #0
    f138:	beq	f2c4 <rb_init_netio+0x1cc>
    f13c:	ldr	r0, [pc, #1332]	; f678 <rb_init_netio+0x580>
    f140:	mov	r1, r4
    f144:	add	r0, pc, r0
    f148:	bl	5520 <strcmp@plt>
    f14c:	cmp	r0, #0
    f150:	beq	f1f4 <rb_init_netio+0xfc>
    f154:	ldr	r0, [pc, #1348]	; f6a0 <rb_init_netio+0x5a8>
    f158:	mov	r1, r4
    f15c:	add	r0, pc, r0
    f160:	bl	5520 <strcmp@plt>
    f164:	cmp	r0, #0
    f168:	beq	f254 <rb_init_netio+0x15c>
    f16c:	ldr	r0, [pc, #1364]	; f6c8 <rb_init_netio+0x5d0>
    f170:	mov	r1, r4
    f174:	add	r0, pc, r0
    f178:	bl	5520 <strcmp@plt>
    f17c:	cmp	r0, #0
    f180:	beq	f264 <rb_init_netio+0x16c>
    f184:	ldr	r0, [pc, #1380]	; f6f0 <rb_init_netio+0x5f8>
    f188:	mov	r1, r4
    f18c:	add	r0, pc, r0
    f190:	bl	5520 <strcmp@plt>
    f194:	cmp	r0, #0
    f198:	beq	f274 <rb_init_netio+0x17c>
    f19c:	ldr	r0, [pc, #1384]	; f70c <rb_init_netio+0x614>
    f1a0:	mov	r1, r4
    f1a4:	add	r0, pc, r0
    f1a8:	bl	5520 <strcmp@plt>
    f1ac:	cmp	r0, #0
    f1b0:	beq	f284 <rb_init_netio+0x18c>
    f1b4:	ldr	r0, [pc, #1388]	; f728 <rb_init_netio+0x630>
    f1b8:	mov	r1, r4
    f1bc:	add	r0, pc, r0
    f1c0:	bl	5520 <strcmp@plt>
    f1c4:	cmp	r0, #0
    f1c8:	beq	f294 <rb_init_netio+0x19c>
    f1cc:	ldr	r0, [pc, #1404]	; f750 <rb_init_netio+0x658>
    f1d0:	mov	r1, r4
    f1d4:	add	r0, pc, r0
    f1d8:	bl	5520 <strcmp@plt>
    f1dc:	cmp	r0, #0
    f1e0:	bne	f2a0 <rb_init_netio+0x1a8>
    f1e4:	bl	15418 <rb_init_netio_select>
    f1e8:	cmp	r0, #0
    f1ec:	bne	f2a0 <rb_init_netio+0x1a8>
    f1f0:	b	f324 <rb_init_netio+0x22c>
    f1f4:	bl	13ad4 <rb_init_netio_epoll>
    f1f8:	cmp	r0, #0
    f1fc:	bne	f2a0 <rb_init_netio+0x1a8>
    f200:	ldr	ip, [pc, #1140]	; f67c <rb_init_netio+0x584>
    f204:	ldr	ip, [pc, ip]
    f208:	ldr	r1, [pc, #1136]	; f680 <rb_init_netio+0x588>
    f20c:	ldr	r2, [pc, #1136]	; f684 <rb_init_netio+0x58c>
    f210:	ldr	r2, [pc, r2]
    f214:	ldr	lr, [pc, #1132]	; f688 <rb_init_netio+0x590>
    f218:	add	r1, pc, r1
    f21c:	ldr	lr, [pc, lr]
    f220:	ldr	r4, [pc, #1124]	; f68c <rb_init_netio+0x594>
    f224:	ldr	r4, [pc, r4]
    f228:	ldr	r0, [pc, #1120]	; f690 <rb_init_netio+0x598>
    f22c:	ldr	r0, [pc, r0]
    f230:	ldr	r3, [pc, #1116]	; f694 <rb_init_netio+0x59c>
    f234:	ldr	r3, [pc, r3]
    f238:	ldr	r5, [pc, #1112]	; f698 <rb_init_netio+0x5a0>
    f23c:	ldr	r5, [pc, r5]
    f240:	str	r3, [r1, #16]
    f244:	str	r4, [r1, #20]
    f248:	str	r0, [r1, #24]
    f24c:	str	r5, [r1, #28]
    f250:	b	f440 <rb_init_netio+0x348>
    f254:	bl	15ad8 <rb_init_netio_kqueue>
    f258:	cmp	r0, #0
    f25c:	bne	f2a0 <rb_init_netio+0x1a8>
    f260:	b	f384 <rb_init_netio+0x28c>
    f264:	bl	14948 <rb_init_netio_ports>
    f268:	cmp	r0, #0
    f26c:	bne	f2a0 <rb_init_netio+0x1a8>
    f270:	b	f460 <rb_init_netio+0x368>
    f274:	bl	14538 <rb_init_netio_poll>
    f278:	cmp	r0, #0
    f27c:	bne	f2a0 <rb_init_netio+0x1a8>
    f280:	b	f5fc <rb_init_netio+0x504>
    f284:	bl	13a7c <rb_init_netio_devpoll>
    f288:	cmp	r0, #0
    f28c:	bne	f2a0 <rb_init_netio+0x1a8>
    f290:	b	f4cc <rb_init_netio+0x3d4>
    f294:	bl	149a0 <rb_init_netio_sigio>
    f298:	cmp	r0, #0
    f29c:	beq	f58c <rb_init_netio+0x494>
    f2a0:	ldr	r0, [pc, #1220]	; f76c <rb_init_netio+0x674>
    f2a4:	mov	r1, r4
    f2a8:	add	r0, pc, r0
    f2ac:	bl	5520 <strcmp@plt>
    f2b0:	cmp	r0, #0
    f2b4:	bne	f2c4 <rb_init_netio+0x1cc>
    f2b8:	bl	57a4 <rb_init_netio_win32>
    f2bc:	cmp	r0, #0
    f2c0:	beq	f52c <rb_init_netio+0x434>
    f2c4:	bl	15ad8 <rb_init_netio_kqueue>
    f2c8:	cmp	r0, #0
    f2cc:	beq	f384 <rb_init_netio+0x28c>
    f2d0:	bl	13ad4 <rb_init_netio_epoll>
    f2d4:	cmp	r0, #0
    f2d8:	beq	f3f0 <rb_init_netio+0x2f8>
    f2dc:	bl	14948 <rb_init_netio_ports>
    f2e0:	cmp	r0, #0
    f2e4:	beq	f460 <rb_init_netio+0x368>
    f2e8:	bl	13a7c <rb_init_netio_devpoll>
    f2ec:	cmp	r0, #0
    f2f0:	beq	f4cc <rb_init_netio+0x3d4>
    f2f4:	bl	149a0 <rb_init_netio_sigio>
    f2f8:	cmp	r0, #0
    f2fc:	beq	f58c <rb_init_netio+0x494>
    f300:	bl	14538 <rb_init_netio_poll>
    f304:	cmp	r0, #0
    f308:	beq	f5fc <rb_init_netio+0x504>
    f30c:	bl	57a4 <rb_init_netio_win32>
    f310:	cmp	r0, #0
    f314:	beq	f52c <rb_init_netio+0x434>
    f318:	bl	15418 <rb_init_netio_select>
    f31c:	cmp	r0, #0
    f320:	bne	f660 <rb_init_netio+0x568>
    f324:	ldr	r0, [pc, #1064]	; f754 <rb_init_netio+0x65c>
    f328:	ldr	r2, [pc, #1064]	; f758 <rb_init_netio+0x660>
    f32c:	ldr	r3, [pc, #1064]	; f75c <rb_init_netio+0x664>
    f330:	mov	r1, #0
    f334:	ldr	r3, [pc, r3]
    f338:	ldr	r5, [pc, #1056]	; f760 <rb_init_netio+0x668>
    f33c:	add	r0, pc, r0
    f340:	add	r2, pc, r2
    f344:	ldr	r5, [pc, r5]
    f348:	ldr	r4, [pc, #1044]	; f764 <rb_init_netio+0x66c>
    f34c:	ldr	r4, [pc, r4]
    f350:	str	r2, [r0, #16]
    f354:	str	r1, [r0, #20]
    f358:	str	r1, [r0, #24]
    f35c:	str	r1, [r0, #28]
    f360:	str	r5, [r0, #32]
    f364:	str	r3, [r0, #36]	; 0x24
    f368:	str	r4, [r0, #40]	; 0x28
    f36c:	add	r0, r0, #68	; 0x44
    f370:	ldr	r1, [pc, #1008]	; f768 <rb_init_netio+0x670>
    f374:	add	r1, pc, r1
    f378:	mov	r2, #25
    f37c:	pop	{r4, r5, fp, lr}
    f380:	b	4f50 <rb_strlcpy@plt>
    f384:	ldr	ip, [pc, #792]	; f6a4 <rb_init_netio+0x5ac>
    f388:	ldr	ip, [pc, ip]
    f38c:	ldr	r1, [pc, #788]	; f6a8 <rb_init_netio+0x5b0>
    f390:	ldr	r2, [pc, #788]	; f6ac <rb_init_netio+0x5b4>
    f394:	ldr	r2, [pc, r2]
    f398:	ldr	lr, [pc, #784]	; f6b0 <rb_init_netio+0x5b8>
    f39c:	add	r1, pc, r1
    f3a0:	ldr	lr, [pc, lr]
    f3a4:	ldr	r5, [pc, #776]	; f6b4 <rb_init_netio+0x5bc>
    f3a8:	ldr	r5, [pc, r5]
    f3ac:	ldr	r4, [pc, #772]	; f6b8 <rb_init_netio+0x5c0>
    f3b0:	ldr	r4, [pc, r4]
    f3b4:	ldr	r0, [pc, #768]	; f6bc <rb_init_netio+0x5c4>
    f3b8:	ldr	r0, [pc, r0]
    f3bc:	ldr	r3, [pc, #764]	; f6c0 <rb_init_netio+0x5c8>
    f3c0:	ldr	r3, [pc, r3]
    f3c4:	str	r3, [r1, #16]
    f3c8:	add	r3, r1, #28
    f3cc:	str	r5, [r1, #20]
    f3d0:	str	r4, [r1, #24]
    f3d4:	stm	r3, {r0, r2, ip, lr}
    f3d8:	add	r0, r1, #68	; 0x44
    f3dc:	ldr	r1, [pc, #736]	; f6c4 <rb_init_netio+0x5cc>
    f3e0:	add	r1, pc, r1
    f3e4:	mov	r2, #25
    f3e8:	pop	{r4, r5, fp, lr}
    f3ec:	b	4f50 <rb_strlcpy@plt>
    f3f0:	ldr	ip, [pc, #912]	; f788 <rb_init_netio+0x690>
    f3f4:	ldr	ip, [pc, ip]
    f3f8:	ldr	r1, [pc, #908]	; f78c <rb_init_netio+0x694>
    f3fc:	ldr	r2, [pc, #908]	; f790 <rb_init_netio+0x698>
    f400:	ldr	r2, [pc, r2]
    f404:	ldr	lr, [pc, #904]	; f794 <rb_init_netio+0x69c>
    f408:	add	r1, pc, r1
    f40c:	ldr	lr, [pc, lr]
    f410:	ldr	r5, [pc, #896]	; f798 <rb_init_netio+0x6a0>
    f414:	ldr	r5, [pc, r5]
    f418:	ldr	r4, [pc, #892]	; f79c <rb_init_netio+0x6a4>
    f41c:	ldr	r4, [pc, r4]
    f420:	ldr	r0, [pc, #888]	; f7a0 <rb_init_netio+0x6a8>
    f424:	ldr	r0, [pc, r0]
    f428:	ldr	r3, [pc, #884]	; f7a4 <rb_init_netio+0x6ac>
    f42c:	ldr	r3, [pc, r3]
    f430:	str	r0, [r1, #16]
    f434:	str	r5, [r1, #20]
    f438:	str	r4, [r1, #24]
    f43c:	str	r3, [r1, #28]
    f440:	add	r0, r1, #32
    f444:	stm	r0, {r2, ip, lr}
    f448:	add	r0, r1, #68	; 0x44
    f44c:	ldr	r1, [pc, #584]	; f69c <rb_init_netio+0x5a4>
    f450:	add	r1, pc, r1
    f454:	mov	r2, #25
    f458:	pop	{r4, r5, fp, lr}
    f45c:	b	4f50 <rb_strlcpy@plt>
    f460:	ldr	ip, [pc, #612]	; f6cc <rb_init_netio+0x5d4>
    f464:	ldr	ip, [pc, ip]
    f468:	ldr	r1, [pc, #608]	; f6d0 <rb_init_netio+0x5d8>
    f46c:	ldr	r2, [pc, #608]	; f6d4 <rb_init_netio+0x5dc>
    f470:	ldr	r2, [pc, r2]
    f474:	ldr	lr, [pc, #604]	; f6d8 <rb_init_netio+0x5e0>
    f478:	add	r1, pc, r1
    f47c:	ldr	lr, [pc, lr]
    f480:	ldr	r5, [pc, #596]	; f6dc <rb_init_netio+0x5e4>
    f484:	ldr	r5, [pc, r5]
    f488:	ldr	r4, [pc, #592]	; f6e0 <rb_init_netio+0x5e8>
    f48c:	ldr	r4, [pc, r4]
    f490:	ldr	r0, [pc, #588]	; f6e4 <rb_init_netio+0x5ec>
    f494:	ldr	r0, [pc, r0]
    f498:	ldr	r3, [pc, #584]	; f6e8 <rb_init_netio+0x5f0>
    f49c:	ldr	r3, [pc, r3]
    f4a0:	str	r3, [r1, #16]
    f4a4:	add	r3, r1, #28
    f4a8:	str	r5, [r1, #20]
    f4ac:	str	r4, [r1, #24]
    f4b0:	stm	r3, {r0, r2, ip, lr}
    f4b4:	add	r0, r1, #68	; 0x44
    f4b8:	ldr	r1, [pc, #556]	; f6ec <rb_init_netio+0x5f4>
    f4bc:	add	r1, pc, r1
    f4c0:	mov	r2, #25
    f4c4:	pop	{r4, r5, fp, lr}
    f4c8:	b	4f50 <rb_strlcpy@plt>
    f4cc:	ldr	r0, [pc, #572]	; f710 <rb_init_netio+0x618>
    f4d0:	ldr	r2, [pc, #572]	; f714 <rb_init_netio+0x61c>
    f4d4:	ldr	r3, [pc, #572]	; f718 <rb_init_netio+0x620>
    f4d8:	mov	r1, #0
    f4dc:	ldr	r3, [pc, r3]
    f4e0:	ldr	r5, [pc, #564]	; f71c <rb_init_netio+0x624>
    f4e4:	add	r0, pc, r0
    f4e8:	add	r2, pc, r2
    f4ec:	ldr	r5, [pc, r5]
    f4f0:	ldr	r4, [pc, #552]	; f720 <rb_init_netio+0x628>
    f4f4:	ldr	r4, [pc, r4]
    f4f8:	str	r2, [r0, #16]
    f4fc:	str	r1, [r0, #20]
    f500:	str	r1, [r0, #24]
    f504:	str	r1, [r0, #28]
    f508:	str	r5, [r0, #32]
    f50c:	str	r3, [r0, #36]	; 0x24
    f510:	str	r4, [r0, #40]	; 0x28
    f514:	add	r0, r0, #68	; 0x44
    f518:	ldr	r1, [pc, #516]	; f724 <rb_init_netio+0x62c>
    f51c:	add	r1, pc, r1
    f520:	mov	r2, #25
    f524:	pop	{r4, r5, fp, lr}
    f528:	b	4f50 <rb_strlcpy@plt>
    f52c:	ldr	r0, [pc, #572]	; f770 <rb_init_netio+0x678>
    f530:	ldr	r2, [pc, #572]	; f774 <rb_init_netio+0x67c>
    f534:	ldr	r3, [pc, #572]	; f778 <rb_init_netio+0x680>
    f538:	mov	r1, #0
    f53c:	ldr	r3, [pc, r3]
    f540:	ldr	r5, [pc, #564]	; f77c <rb_init_netio+0x684>
    f544:	add	r0, pc, r0
    f548:	add	r2, pc, r2
    f54c:	ldr	r5, [pc, r5]
    f550:	ldr	r4, [pc, #552]	; f780 <rb_init_netio+0x688>
    f554:	ldr	r4, [pc, r4]
    f558:	str	r2, [r0, #16]
    f55c:	str	r1, [r0, #20]
    f560:	str	r1, [r0, #24]
    f564:	str	r1, [r0, #28]
    f568:	str	r5, [r0, #32]
    f56c:	str	r3, [r0, #36]	; 0x24
    f570:	str	r4, [r0, #40]	; 0x28
    f574:	add	r0, r0, #68	; 0x44
    f578:	ldr	r1, [pc, #516]	; f784 <rb_init_netio+0x68c>
    f57c:	add	r1, pc, r1
    f580:	mov	r2, #25
    f584:	pop	{r4, r5, fp, lr}
    f588:	b	4f50 <rb_strlcpy@plt>
    f58c:	ldr	ip, [pc, #408]	; f72c <rb_init_netio+0x634>
    f590:	ldr	ip, [pc, ip]
    f594:	ldr	r1, [pc, #404]	; f730 <rb_init_netio+0x638>
    f598:	ldr	r2, [pc, #404]	; f734 <rb_init_netio+0x63c>
    f59c:	ldr	r2, [pc, r2]
    f5a0:	ldr	lr, [pc, #400]	; f738 <rb_init_netio+0x640>
    f5a4:	add	r1, pc, r1
    f5a8:	ldr	lr, [pc, lr]
    f5ac:	ldr	r5, [pc, #392]	; f73c <rb_init_netio+0x644>
    f5b0:	ldr	r5, [pc, r5]
    f5b4:	ldr	r4, [pc, #388]	; f740 <rb_init_netio+0x648>
    f5b8:	ldr	r4, [pc, r4]
    f5bc:	ldr	r0, [pc, #384]	; f744 <rb_init_netio+0x64c>
    f5c0:	ldr	r0, [pc, r0]
    f5c4:	ldr	r3, [pc, #380]	; f748 <rb_init_netio+0x650>
    f5c8:	ldr	r3, [pc, r3]
    f5cc:	str	r0, [r1, #16]
    f5d0:	add	r0, r1, #32
    f5d4:	str	r5, [r1, #20]
    f5d8:	str	r4, [r1, #24]
    f5dc:	str	r3, [r1, #28]
    f5e0:	stm	r0, {r2, ip, lr}
    f5e4:	add	r0, r1, #68	; 0x44
    f5e8:	ldr	r1, [pc, #348]	; f74c <rb_init_netio+0x654>
    f5ec:	add	r1, pc, r1
    f5f0:	mov	r2, #25
    f5f4:	pop	{r4, r5, fp, lr}
    f5f8:	b	4f50 <rb_strlcpy@plt>
    f5fc:	ldr	r0, [pc, #240]	; f6f4 <rb_init_netio+0x5fc>
    f600:	ldr	r2, [pc, #240]	; f6f8 <rb_init_netio+0x600>
    f604:	ldr	r3, [pc, #240]	; f6fc <rb_init_netio+0x604>
    f608:	mov	r1, #0
    f60c:	ldr	r3, [pc, r3]
    f610:	ldr	r5, [pc, #232]	; f700 <rb_init_netio+0x608>
    f614:	add	r0, pc, r0
    f618:	add	r2, pc, r2
    f61c:	ldr	r5, [pc, r5]
    f620:	ldr	r4, [pc, #220]	; f704 <rb_init_netio+0x60c>
    f624:	ldr	r4, [pc, r4]
    f628:	str	r2, [r0, #16]
    f62c:	str	r1, [r0, #20]
    f630:	str	r1, [r0, #24]
    f634:	str	r1, [r0, #28]
    f638:	str	r5, [r0, #32]
    f63c:	str	r3, [r0, #36]	; 0x24
    f640:	str	r4, [r0, #40]	; 0x28
    f644:	add	r0, r0, #68	; 0x44
    f648:	ldr	r1, [pc, #184]	; f708 <rb_init_netio+0x610>
    f64c:	add	r1, pc, r1
    f650:	mov	r2, #25
    f654:	pop	{r4, r5, fp, lr}
    f658:	b	4f50 <rb_strlcpy@plt>
    f65c:	bl	51fc <rb_outofmemory@plt>
    f660:	ldr	r0, [pc, #320]	; f7a8 <rb_init_netio+0x6b0>
    f664:	add	r0, pc, r0
    f668:	bl	519c <rb_lib_log@plt>
    f66c:	bl	4ca4 <abort@plt>
    f670:	.word	0x0000b126
    f674:	.word	0x0001d258
    f678:	.word	0x0000b0f7
    f67c:	.word	0x0001d184
    f680:	.word	0x0002f6f8
    f684:	.word	0x0001d118
    f688:	.word	0x0001d1a8
    f68c:	.word	0x0001d120
    f690:	.word	0x0001d158
    f694:	.word	0x0001d0e4
    f698:	.word	0x0001d19c
    f69c:	.word	0x0000adeb
    f6a0:	.word	0x0000b0e5
    f6a4:	.word	0x0001cfb0
    f6a8:	.word	0x0002f574
    f6ac:	.word	0x0001cfe8
    f6b0:	.word	0x0001cfb8
    f6b4:	.word	0x0001cfa8
    f6b8:	.word	0x0001cfe4
    f6bc:	.word	0x0001cf9c
    f6c0:	.word	0x0001cfe4
    f6c4:	.word	0x0000ae61
    f6c8:	.word	0x0000b0d4
    f6cc:	.word	0x0001cee4
    f6d0:	.word	0x0002f498
    f6d4:	.word	0x0001cf38
    f6d8:	.word	0x0001cf54
    f6dc:	.word	0x0001ce90
    f6e0:	.word	0x0001cf40
    f6e4:	.word	0x0001ce90
    f6e8:	.word	0x0001cf04
    f6ec:	.word	0x0000ad8c
    f6f0:	.word	0x0000b0b0
    f6f4:	.word	0x0002f2fc
    f6f8:	.word	0x00000558
    f6fc:	.word	0x0001cdb0
    f700:	.word	0x0001cd90
    f704:	.word	0x0001cd1c
    f708:	.word	0x0000abf0
    f70c:	.word	0x0000b0aa
    f710:	.word	0x0002f42c
    f714:	.word	0x00000688
    f718:	.word	0x0001ced4
    f71c:	.word	0x0001ce84
    f720:	.word	0x0001ce80
    f724:	.word	0x0000ad32
    f728:	.word	0x0000b09a
    f72c:	.word	0x0001cd9c
    f730:	.word	0x0002f36c
    f734:	.word	0x0001cdf0
    f738:	.word	0x0001cdf4
    f73c:	.word	0x0001cd84
    f740:	.word	0x0001cd64
    f744:	.word	0x0001cdd8
    f748:	.word	0x0001cdf0
    f74c:	.word	0x0000ac6a
    f750:	.word	0x0000b088
    f754:	.word	0x0002f5d4
    f758:	.word	0x00000830
    f75c:	.word	0x0001d044
    f760:	.word	0x0001d09c
    f764:	.word	0x0001d074
    f768:	.word	0x0000aee8
    f76c:	.word	0x0000afbb
    f770:	.word	0x0002f3cc
    f774:	.word	0x00000628
    f778:	.word	0x0001ce2c
    f77c:	.word	0x0001ce10
    f780:	.word	0x0001cddc
    f784:	.word	0x0000ace7
    f788:	.word	0x0001cf94
    f78c:	.word	0x0002f508
    f790:	.word	0x0001cf28
    f794:	.word	0x0001cfb8
    f798:	.word	0x0001cf30
    f79c:	.word	0x0001cf68
    f7a0:	.word	0x0001cef4
    f7a4:	.word	0x0001cfac
    f7a8:	.word	0x0000ac05

0000f7ac <rb_select>:
    f7ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f7b0:	add	fp, sp, #24
    f7b4:	ldr	r6, [pc, #148]	; f850 <rb_select+0xa4>
    f7b8:	add	r6, pc, r6
    f7bc:	ldr	r1, [r6, #36]	; 0x24
    f7c0:	blx	r1
    f7c4:	ldr	r4, [r6, #56]	; 0x38
    f7c8:	mov	r8, r0
    f7cc:	cmp	r4, #0
    f7d0:	beq	f848 <rb_select+0x9c>
    f7d4:	mov	r9, #0
    f7d8:	ldr	r0, [r6, #8]
    f7dc:	ldr	r5, [r4]
    f7e0:	ldr	r7, [r4, #8]
    f7e4:	sub	r0, r0, #1
    f7e8:	str	r0, [r6, #8]
    f7ec:	ldr	r0, [r5, #12]
    f7f0:	bl	51c0 <close@plt>
    f7f4:	ldr	r0, [r4, #8]
    f7f8:	ldr	r1, [r4, #4]
    f7fc:	cmp	r0, #0
    f800:	streq	r1, [r6, #60]	; 0x3c
    f804:	strne	r1, [r0, #4]
    f808:	ldrne	r1, [r4, #4]
    f80c:	add	r2, r1, #8
    f810:	cmp	r1, #0
    f814:	addeq	r2, r6, #56	; 0x38
    f818:	str	r0, [r2]
    f81c:	str	r9, [r4, #4]
    f820:	str	r9, [r4, #8]
    f824:	ldr	r1, [r6, #64]	; 0x40
    f828:	ldr	r0, [r6, #12]
    f82c:	sub	r1, r1, #1
    f830:	str	r1, [r6, #64]	; 0x40
    f834:	mov	r1, r5
    f838:	bl	5154 <rb_bh_free@plt>
    f83c:	cmp	r7, #0
    f840:	mov	r4, r7
    f844:	bne	f7d8 <rb_select+0x2c>
    f848:	mov	r0, r8
    f84c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    f850:	.word	0x0002f158

0000f854 <rb_recv_fd_buf>:
    f854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f858:	add	fp, sp, #28
    f85c:	sub	sp, sp, #132	; 0x84
    f860:	ldr	r9, [fp, #8]
    f864:	str	r2, [fp, #-64]	; 0xffffffc0
    f868:	str	r1, [fp, #-68]	; 0xffffffbc
    f86c:	mov	r1, #0
    f870:	sub	r2, fp, #68	; 0x44
    f874:	mov	r4, r3
    f878:	str	r1, [fp, #-60]	; 0xffffffc4
    f87c:	str	r1, [fp, #-56]	; 0xffffffc8
    f880:	str	r2, [fp, #-52]	; 0xffffffcc
    f884:	mov	r2, #1
    f888:	str	r2, [fp, #-48]	; 0xffffffd0
    f88c:	str	r1, [fp, #-36]	; 0xffffffdc
    f890:	mov	r1, #19
    f894:	mov	r2, #12
    f898:	add	r1, r1, r9, lsl #2
    f89c:	add	r2, r2, r9, lsl #2
    f8a0:	bic	r1, r1, #7
    f8a4:	sub	r1, sp, r1
    f8a8:	mov	sp, r1
    f8ac:	str	r2, [fp, #-40]	; 0xffffffd8
    f8b0:	str	r1, [fp, #-44]	; 0xffffffd4
    f8b4:	cmp	r0, #0
    f8b8:	sub	r1, fp, #60	; 0x3c
    f8bc:	mov	r2, #0
    f8c0:	ldrne	r0, [r0, #12]
    f8c4:	mvneq	r0, #0
    f8c8:	bl	537c <recvmsg@plt>
    f8cc:	mov	sl, r0
    f8d0:	cmp	r0, #1
    f8d4:	blt	f9c0 <rb_recv_fd_buf+0x16c>
    f8d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    f8dc:	cmp	r0, #0
    f8e0:	beq	f9b8 <rb_recv_fd_buf+0x164>
    f8e4:	cmp	r0, #12
    f8e8:	bcc	f9b8 <rb_recv_fd_buf+0x164>
    f8ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
    f8f0:	cmp	r0, #0
    f8f4:	beq	f9b8 <rb_recv_fd_buf+0x164>
    f8f8:	cmp	r9, #1
    f8fc:	blt	f9c0 <rb_recv_fd_buf+0x16c>
    f900:	ldr	r1, [r0]
    f904:	sub	r1, r1, #12
    f908:	lsr	r6, r1, #2
    f90c:	cmp	r6, #0
    f910:	beq	f9c0 <rb_recv_fd_buf+0x16c>
    f914:	add	r5, r0, #12
    f918:	mov	r8, #0
    f91c:	ldr	r7, [r5, r8, lsl #2]
    f920:	mov	r0, #3
    f924:	sub	r2, fp, #160	; 0xa0
    f928:	mov	r1, r7
    f92c:	bl	53a0 <__fxstat@plt>
    f930:	mov	r1, #64	; 0x40
    f934:	cmp	r0, #0
    f938:	beq	f968 <rb_recv_fd_buf+0x114>
    f93c:	ldr	r2, [pc, #148]	; f9d8 <rb_recv_fd_buf+0x184>
    f940:	add	r2, pc, r2
    f944:	mov	r0, r7
    f948:	bl	52e0 <rb_open@plt>
    f94c:	str	r0, [r4, r8, lsl #2]
    f950:	add	r8, r8, #1
    f954:	cmp	r8, r9
    f958:	bge	f9c0 <rb_recv_fd_buf+0x16c>
    f95c:	cmp	r8, r6
    f960:	bcc	f91c <rb_recv_fd_buf+0xc8>
    f964:	b	f9c0 <rb_recv_fd_buf+0x16c>
    f968:	ldr	r0, [fp, #-144]	; 0xffffff70
    f96c:	and	r0, r0, #61440	; 0xf000
    f970:	cmp	r0, #49152	; 0xc000
    f974:	beq	f998 <rb_recv_fd_buf+0x144>
    f978:	cmp	r0, #32768	; 0x8000
    f97c:	beq	f9a8 <rb_recv_fd_buf+0x154>
    f980:	cmp	r0, #4096	; 0x1000
    f984:	bne	f93c <rb_recv_fd_buf+0xe8>
    f988:	ldr	r2, [pc, #64]	; f9d0 <rb_recv_fd_buf+0x17c>
    f98c:	mov	r1, #8
    f990:	add	r2, pc, r2
    f994:	b	f944 <rb_recv_fd_buf+0xf0>
    f998:	ldr	r2, [pc, #44]	; f9cc <rb_recv_fd_buf+0x178>
    f99c:	mov	r1, #4
    f9a0:	add	r2, pc, r2
    f9a4:	b	f944 <rb_recv_fd_buf+0xf0>
    f9a8:	ldr	r2, [pc, #36]	; f9d4 <rb_recv_fd_buf+0x180>
    f9ac:	mov	r1, #2
    f9b0:	add	r2, pc, r2
    f9b4:	b	f944 <rb_recv_fd_buf+0xf0>
    f9b8:	mov	r0, #0
    f9bc:	str	r0, [r4]
    f9c0:	mov	r0, sl
    f9c4:	sub	sp, fp, #28
    f9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9cc:	.word	0x0000a912
    f9d0:	.word	0x0000a930
    f9d4:	.word	0x0000a91c
    f9d8:	.word	0x0000a963

0000f9dc <rb_send_fd_buf>:
    f9dc:	push	{r4, r5, r6, sl, fp, lr}
    f9e0:	add	fp, sp, #16
    f9e4:	sub	sp, sp, #48	; 0x30
    f9e8:	sub	r5, fp, #48	; 0x30
    f9ec:	vmov.i32	q8, #0	; 0x00000000
    f9f0:	mov	ip, #0
    f9f4:	mov	lr, #1
    f9f8:	add	r4, r5, #12
    f9fc:	vst1.32	{d16-d17}, [r4]
    fa00:	mov	r4, #48	; 0x30
    fa04:	strb	r4, [fp, #-57]	; 0xffffffc7
    fa08:	mov	r4, #20
    fa0c:	vst1.64	{d16-d17}, [r5], r4
    fa10:	sub	r4, fp, #57	; 0x39
    fa14:	str	ip, [r5]
    fa18:	sub	r5, fp, #56	; 0x38
    fa1c:	str	ip, [fp, #-48]	; 0xffffffd0
    fa20:	str	ip, [fp, #-44]	; 0xffffffd4
    fa24:	str	ip, [fp, #-24]	; 0xffffffe8
    fa28:	str	ip, [fp, #-32]	; 0xffffffe0
    fa2c:	str	r5, [fp, #-40]	; 0xffffffd8
    fa30:	ldr	r5, [fp, #8]
    fa34:	str	lr, [fp, #-36]	; 0xffffffdc
    fa38:	cmp	r5, #0
    fa3c:	movne	r4, r3
    fa40:	movweq	r5, #1
    fa44:	cmp	r2, #1
    fa48:	str	r4, [fp, #-56]	; 0xffffffc8
    fa4c:	str	r5, [fp, #-52]	; 0xffffffcc
    fa50:	blt	fae0 <rb_send_fd_buf+0x104>
    fa54:	mov	r3, #19
    fa58:	mov	r4, #12
    fa5c:	mov	r5, sp
    fa60:	add	r3, r3, r2, lsl #2
    fa64:	add	r4, r4, r2, lsl #2
    fa68:	bic	r3, r3, #7
    fa6c:	sub	r3, sp, r3
    fa70:	mov	sp, r3
    fa74:	lsl	r6, r2, #2
    fa78:	str	r4, [fp, #-28]	; 0xffffffe4
    fa7c:	str	r3, [fp, #-32]	; 0xffffffe0
    fa80:	cmn	r6, #12
    fa84:	movcc	ip, r3
    fa88:	add	r3, ip, #12
    fa8c:	stm	ip, {r4, lr}
    fa90:	str	lr, [ip, #8]
    fa94:	ldr	r4, [r1]
    fa98:	add	r1, r1, #4
    fa9c:	cmp	r4, #0
    faa0:	ldrne	r4, [r4, #12]
    faa4:	mvneq	r4, #0
    faa8:	subs	r2, r2, #1
    faac:	str	r4, [r3], #4
    fab0:	bne	fa94 <rb_send_fd_buf+0xb8>
    fab4:	ldr	r1, [ip]
    fab8:	cmp	r0, #0
    fabc:	mov	r2, #16384	; 0x4000
    fac0:	str	r1, [fp, #-28]	; 0xffffffe4
    fac4:	sub	r1, fp, #48	; 0x30
    fac8:	ldrne	r0, [r0, #12]
    facc:	mvneq	r0, #0
    fad0:	bl	4fa4 <sendmsg@plt>
    fad4:	mov	sp, r5
    fad8:	sub	sp, fp, #16
    fadc:	pop	{r4, r5, r6, sl, fp, pc}
    fae0:	cmp	r0, #0
    fae4:	sub	r1, fp, #48	; 0x30
    fae8:	mov	r2, #16384	; 0x4000
    faec:	ldrne	r0, [r0, #12]
    faf0:	mvneq	r0, #0
    faf4:	bl	4fa4 <sendmsg@plt>
    faf8:	sub	sp, fp, #16
    fafc:	pop	{r4, r5, r6, sl, fp, pc}

0000fb00 <rb_ipv4_from_ipv6>:
    fb00:	mov	r2, r0
    fb04:	ldrh	r3, [r2, #8]!
    fb08:	cmp	r3, #544	; 0x220
    fb0c:	beq	fb28 <rb_ipv4_from_ipv6+0x28>
    fb10:	ldr	r3, [r2]
    fb14:	mov	r2, #0
    fb18:	cmp	r3, #288	; 0x120
    fb1c:	beq	fb34 <rb_ipv4_from_ipv6+0x34>
    fb20:	mov	r0, r2
    fb24:	bx	lr
    fb28:	ldr	r0, [r2, #2]
    fb2c:	str	r0, [r1, #4]
    fb30:	b	fb64 <rb_ipv4_from_ipv6+0x64>
    fb34:	ldrb	r2, [r0, #20]
    fb38:	mvn	r2, r2
    fb3c:	strb	r2, [r1, #4]
    fb40:	ldrb	r2, [r0, #21]
    fb44:	mvn	r2, r2
    fb48:	strb	r2, [r1, #5]
    fb4c:	ldrb	r2, [r0, #22]
    fb50:	ldrb	r0, [r0, #23]
    fb54:	mvn	r2, r2
    fb58:	mvn	r0, r0
    fb5c:	strb	r2, [r1, #6]
    fb60:	strb	r0, [r1, #7]
    fb64:	mov	r0, #2
    fb68:	mov	r2, #1
    fb6c:	str	r0, [r1]
    fb70:	mov	r0, r2
    fb74:	bx	lr

0000fb78 <rb_unsupported_event>:
    fb78:	mov	r0, #0
    fb7c:	bx	lr

0000fb80 <rb_ssl_shutdown>:
    fb80:	push	{r4, r5, r6, sl, fp, lr}
    fb84:	add	fp, sp, #16
    fb88:	cmp	r0, #0
    fb8c:	beq	fbfc <rb_ssl_shutdown+0x7c>
    fb90:	mov	r4, r0
    fb94:	ldr	r0, [r0, #56]	; 0x38
    fb98:	cmp	r0, #0
    fb9c:	popeq	{r4, r5, r6, sl, fp, pc}
    fba0:	bl	4ce0 <ERR_get_error@plt>
    fba4:	cmp	r0, #0
    fba8:	bne	fba0 <rb_ssl_shutdown+0x20>
    fbac:	mov	r6, #1
    fbb0:	ldr	r0, [r4, #56]	; 0x38
    fbb4:	bl	52f8 <SSL_shutdown@plt>
    fbb8:	mov	r5, r0
    fbbc:	ldr	r0, [r4, #56]	; 0x38
    fbc0:	mov	r1, r5
    fbc4:	bl	54f0 <SSL_get_error@plt>
    fbc8:	cmn	r5, #1
    fbcc:	bgt	fbec <rb_ssl_shutdown+0x6c>
    fbd0:	orr	r0, r0, #1
    fbd4:	cmp	r0, #3
    fbd8:	bne	fbec <rb_ssl_shutdown+0x6c>
    fbdc:	add	r0, r6, #1
    fbe0:	cmp	r6, #4
    fbe4:	mov	r6, r0
    fbe8:	bcc	fbb0 <rb_ssl_shutdown+0x30>
    fbec:	ldr	r0, [r4, #56]	; 0x38
    fbf0:	bl	51d8 <SSL_free@plt>
    fbf4:	mov	r0, #0
    fbf8:	str	r0, [r4, #56]	; 0x38
    fbfc:	pop	{r4, r5, r6, sl, fp, pc}

0000fc00 <rb_init_ssl>:
    fc00:	push	{fp, lr}
    fc04:	mov	fp, sp
    fc08:	ldr	r0, [pc, #20]	; fc24 <rb_init_ssl+0x24>
    fc0c:	ldr	r1, [pc, #20]	; fc28 <rb_init_ssl+0x28>
    fc10:	add	r0, pc, r0
    fc14:	add	r1, pc, r1
    fc18:	bl	519c <rb_lib_log@plt>
    fc1c:	mov	r0, #1
    fc20:	pop	{fp, pc}
    fc24:	.word	0x0000aa8e
    fc28:	.word	0x0000aaaa

0000fc2c <rb_setup_ssl_server>:
    fc2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fc30:	add	fp, sp, #24
    fc34:	sub	sp, sp, #8
    fc38:	cmp	r0, #0
    fc3c:	beq	fd70 <rb_setup_ssl_server+0x144>
    fc40:	mov	r4, r3
    fc44:	mov	r8, r2
    fc48:	mov	r7, r1
    fc4c:	mov	r6, r0
    fc50:	bl	4ce0 <ERR_get_error@plt>
    fc54:	cmp	r0, #0
    fc58:	bne	fc50 <rb_setup_ssl_server+0x24>
    fc5c:	ldr	r5, [pc, #860]	; ffc0 <rb_setup_ssl_server+0x394>
    fc60:	cmp	r4, #0
    fc64:	add	r5, pc, r5
    fc68:	movne	r5, r4
    fc6c:	cmp	r7, #0
    fc70:	moveq	r7, r6
    fc74:	bl	4c50 <TLS_method@plt>
    fc78:	bl	5370 <SSL_CTX_new@plt>
    fc7c:	cmp	r0, #0
    fc80:	beq	fd90 <rb_setup_ssl_server+0x164>
    fc84:	mov	r1, r6
    fc88:	mov	r4, r0
    fc8c:	bl	50d0 <SSL_CTX_use_certificate_chain_file@plt>
    fc90:	cmp	r0, #1
    fc94:	bne	fde0 <rb_setup_ssl_server+0x1b4>
    fc98:	mov	r0, r4
    fc9c:	mov	r1, r7
    fca0:	mov	r2, #1
    fca4:	bl	51a8 <SSL_CTX_use_PrivateKey_file@plt>
    fca8:	cmp	r0, #1
    fcac:	bne	fe28 <rb_setup_ssl_server+0x1fc>
    fcb0:	cmp	r8, #0
    fcb4:	beq	fe84 <rb_setup_ssl_server+0x258>
    fcb8:	ldr	r1, [pc, #816]	; fff0 <rb_setup_ssl_server+0x3c4>
    fcbc:	mov	r0, r8
    fcc0:	add	r1, pc, r1
    fcc4:	bl	4ecc <fopen@plt>
    fcc8:	mov	r9, r0
    fccc:	mov	r0, #0
    fcd0:	cmp	r9, #0
    fcd4:	str	r0, [sp, #4]
    fcd8:	beq	fe9c <rb_setup_ssl_server+0x270>
    fcdc:	add	r1, sp, #4
    fce0:	mov	r0, r9
    fce4:	mov	r2, #0
    fce8:	mov	r3, #0
    fcec:	mov	r7, #0
    fcf0:	bl	5250 <PEM_read_DHparams@plt>
    fcf4:	cmp	r0, #0
    fcf8:	beq	fd1c <rb_setup_ssl_server+0xf0>
    fcfc:	ldr	r3, [sp, #4]
    fd00:	mov	r0, r4
    fd04:	mov	r1, #3
    fd08:	mov	r2, #0
    fd0c:	bl	4f20 <SSL_CTX_ctrl@plt>
    fd10:	ldr	r0, [sp, #4]
    fd14:	bl	52c8 <DH_free@plt>
    fd18:	b	fd64 <rb_setup_ssl_server+0x138>
    fd1c:	mov	r6, r7
    fd20:	bl	4ce0 <ERR_get_error@plt>
    fd24:	mov	r7, r0
    fd28:	cmp	r0, #0
    fd2c:	bne	fd1c <rb_setup_ssl_server+0xf0>
    fd30:	ldr	r7, [pc, #708]	; fffc <rb_setup_ssl_server+0x3d0>
    fd34:	mov	r0, r6
    fd38:	mov	r2, #512	; 0x200
    fd3c:	add	r7, pc, r7
    fd40:	mov	r1, r7
    fd44:	bl	4e6c <ERR_error_string_n@plt>
    fd48:	ldr	r0, [pc, #688]	; 10000 <rb_setup_ssl_server+0x3d4>
    fd4c:	ldr	r1, [pc, #688]	; 10004 <rb_setup_ssl_server+0x3d8>
    fd50:	mov	r2, r8
    fd54:	mov	r3, r7
    fd58:	add	r0, pc, r0
    fd5c:	add	r1, pc, r1
    fd60:	bl	519c <rb_lib_log@plt>
    fd64:	mov	r0, r9
    fd68:	bl	4e48 <fclose@plt>
    fd6c:	b	fec4 <rb_setup_ssl_server+0x298>
    fd70:	ldr	r0, [pc, #576]	; ffb8 <rb_setup_ssl_server+0x38c>
    fd74:	ldr	r1, [pc, #576]	; ffbc <rb_setup_ssl_server+0x390>
    fd78:	add	r0, pc, r0
    fd7c:	add	r1, pc, r1
    fd80:	bl	519c <rb_lib_log@plt>
    fd84:	mov	r0, #0
    fd88:	sub	sp, fp, #24
    fd8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    fd90:	mov	r0, #0
    fd94:	mov	r4, r0
    fd98:	bl	4ce0 <ERR_get_error@plt>
    fd9c:	cmp	r0, #0
    fda0:	bne	fd94 <rb_setup_ssl_server+0x168>
    fda4:	ldr	r5, [pc, #536]	; ffc4 <rb_setup_ssl_server+0x398>
    fda8:	mov	r0, r4
    fdac:	mov	r2, #512	; 0x200
    fdb0:	add	r5, pc, r5
    fdb4:	mov	r1, r5
    fdb8:	bl	4e6c <ERR_error_string_n@plt>
    fdbc:	ldr	r0, [pc, #516]	; ffc8 <rb_setup_ssl_server+0x39c>
    fdc0:	ldr	r1, [pc, #516]	; ffcc <rb_setup_ssl_server+0x3a0>
    fdc4:	mov	r2, r5
    fdc8:	add	r0, pc, r0
    fdcc:	add	r1, pc, r1
    fdd0:	bl	519c <rb_lib_log@plt>
    fdd4:	mov	r0, #0
    fdd8:	sub	sp, fp, #24
    fddc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    fde0:	mov	r0, #0
    fde4:	mov	r5, r0
    fde8:	bl	4ce0 <ERR_get_error@plt>
    fdec:	cmp	r0, #0
    fdf0:	bne	fde4 <rb_setup_ssl_server+0x1b8>
    fdf4:	ldr	r7, [pc, #468]	; ffd0 <rb_setup_ssl_server+0x3a4>
    fdf8:	mov	r0, r5
    fdfc:	mov	r2, #512	; 0x200
    fe00:	add	r7, pc, r7
    fe04:	mov	r1, r7
    fe08:	bl	4e6c <ERR_error_string_n@plt>
    fe0c:	ldr	r0, [pc, #448]	; ffd4 <rb_setup_ssl_server+0x3a8>
    fe10:	ldr	r1, [pc, #448]	; ffd8 <rb_setup_ssl_server+0x3ac>
    fe14:	mov	r2, r6
    fe18:	mov	r3, r7
    fe1c:	add	r0, pc, r0
    fe20:	add	r1, pc, r1
    fe24:	b	fe6c <rb_setup_ssl_server+0x240>
    fe28:	mov	r0, #0
    fe2c:	mov	r5, r0
    fe30:	bl	4ce0 <ERR_get_error@plt>
    fe34:	cmp	r0, #0
    fe38:	bne	fe2c <rb_setup_ssl_server+0x200>
    fe3c:	ldr	r6, [pc, #408]	; ffdc <rb_setup_ssl_server+0x3b0>
    fe40:	mov	r0, r5
    fe44:	mov	r2, #512	; 0x200
    fe48:	add	r6, pc, r6
    fe4c:	mov	r1, r6
    fe50:	bl	4e6c <ERR_error_string_n@plt>
    fe54:	ldr	r0, [pc, #388]	; ffe0 <rb_setup_ssl_server+0x3b4>
    fe58:	ldr	r1, [pc, #388]	; ffe4 <rb_setup_ssl_server+0x3b8>
    fe5c:	mov	r2, r7
    fe60:	mov	r3, r6
    fe64:	add	r0, pc, r0
    fe68:	add	r1, pc, r1
    fe6c:	bl	519c <rb_lib_log@plt>
    fe70:	mov	r0, r4
    fe74:	bl	4d34 <SSL_CTX_free@plt>
    fe78:	mov	r0, #0
    fe7c:	sub	sp, fp, #24
    fe80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    fe84:	ldr	r0, [pc, #348]	; ffe8 <rb_setup_ssl_server+0x3bc>
    fe88:	ldr	r1, [pc, #348]	; ffec <rb_setup_ssl_server+0x3c0>
    fe8c:	add	r0, pc, r0
    fe90:	add	r1, pc, r1
    fe94:	bl	519c <rb_lib_log@plt>
    fe98:	b	fec4 <rb_setup_ssl_server+0x298>
    fe9c:	bl	552c <__errno_location@plt>
    fea0:	ldr	r0, [r0]
    fea4:	bl	4c80 <strerror@plt>
    fea8:	mov	r3, r0
    feac:	ldr	r0, [pc, #320]	; fff4 <rb_setup_ssl_server+0x3c8>
    feb0:	ldr	r1, [pc, #320]	; fff8 <rb_setup_ssl_server+0x3cc>
    feb4:	mov	r2, r8
    feb8:	add	r0, pc, r0
    febc:	add	r1, pc, r1
    fec0:	bl	519c <rb_lib_log@plt>
    fec4:	mov	r0, r4
    fec8:	mov	r1, r5
    fecc:	bl	4cd4 <SSL_CTX_set_cipher_list@plt>
    fed0:	cmp	r0, #1
    fed4:	bne	ffa0 <rb_setup_ssl_server+0x374>
    fed8:	mov	r0, r4
    fedc:	mov	r1, #44	; 0x2c
    fee0:	mov	r2, #0
    fee4:	mov	r3, #0
    fee8:	bl	4f20 <SSL_CTX_ctrl@plt>
    feec:	ldr	r2, [pc, #284]	; 10010 <rb_setup_ssl_server+0x3e4>
    fef0:	mov	r0, r4
    fef4:	mov	r1, #5
    fef8:	add	r2, pc, r2
    fefc:	bl	555c <SSL_CTX_set_verify@plt>
    ff00:	mov	r0, r4
    ff04:	mov	r1, #2048	; 0x800
    ff08:	bl	4de8 <SSL_CTX_clear_options@plt>
    ff0c:	mov	r0, r4
    ff10:	mov	r1, #67108864	; 0x4000000
    ff14:	bl	50e8 <SSL_CTX_set_options@plt>
    ff18:	mov	r0, r4
    ff1c:	mov	r1, #16384	; 0x4000
    ff20:	bl	50e8 <SSL_CTX_set_options@plt>
    ff24:	mov	r0, r4
    ff28:	mov	r1, #4194304	; 0x400000
    ff2c:	bl	50e8 <SSL_CTX_set_options@plt>
    ff30:	mov	r0, r4
    ff34:	mov	r1, #0
    ff38:	bl	50e8 <SSL_CTX_set_options@plt>
    ff3c:	mov	r0, r4
    ff40:	mov	r1, #0
    ff44:	bl	50e8 <SSL_CTX_set_options@plt>
    ff48:	ldr	r3, [pc, #196]	; 10014 <rb_setup_ssl_server+0x3e8>
    ff4c:	mov	r0, r4
    ff50:	mov	r1, #92	; 0x5c
    ff54:	mov	r2, #0
    ff58:	add	r3, pc, r3
    ff5c:	bl	4f20 <SSL_CTX_ctrl@plt>
    ff60:	ldr	r0, [pc, #176]	; 10018 <rb_setup_ssl_server+0x3ec>
    ff64:	ldr	r0, [pc, r0]
    ff68:	cmp	r0, #0
    ff6c:	beq	ff74 <rb_setup_ssl_server+0x348>
    ff70:	bl	4d34 <SSL_CTX_free@plt>
    ff74:	ldr	r0, [pc, #160]	; 1001c <rb_setup_ssl_server+0x3f0>
    ff78:	add	r0, pc, r0
    ff7c:	str	r4, [r0]
    ff80:	ldr	r0, [pc, #152]	; 10020 <rb_setup_ssl_server+0x3f4>
    ff84:	ldr	r1, [pc, #152]	; 10024 <rb_setup_ssl_server+0x3f8>
    ff88:	add	r0, pc, r0
    ff8c:	add	r1, pc, r1
    ff90:	bl	519c <rb_lib_log@plt>
    ff94:	mov	r0, #1
    ff98:	sub	sp, fp, #24
    ff9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    ffa0:	ldr	r0, [pc, #96]	; 10008 <rb_setup_ssl_server+0x3dc>
    ffa4:	ldr	r1, [pc, #96]	; 1000c <rb_setup_ssl_server+0x3e0>
    ffa8:	add	r0, pc, r0
    ffac:	add	r1, pc, r1
    ffb0:	bl	519c <rb_lib_log@plt>
    ffb4:	b	fe70 <rb_setup_ssl_server+0x244>
    ffb8:	.word	0x0000a952
    ffbc:	.word	0x0000a970
    ffc0:	.word	0x0000acf1
    ffc4:	.word	0x0002edc4
    ffc8:	.word	0x0000a938
    ffcc:	.word	0x0000a920
    ffd0:	.word	0x0002ed74
    ffd4:	.word	0x0000a8f8
    ffd8:	.word	0x0000a8cc
    ffdc:	.word	0x0002ed2c
    ffe0:	.word	0x0000a8e2
    ffe4:	.word	0x0000a884
    ffe8:	.word	0x0000a8e5
    ffec:	.word	0x0000a85c
    fff0:	.word	0x0000aff4
    fff4:	.word	0x0000a8dd
    fff8:	.word	0x0000a830
    fffc:	.word	0x0002ee38
   10000:	.word	0x0000aa52
   10004:	.word	0x0000a990
   10008:	.word	0x0000a823
   1000c:	.word	0x0000a740
   10010:	.word	0x00000128
   10014:	.word	0x0001c4d8
   10018:	.word	0x0002ea0c
   1001c:	.word	0x0002e9f8
   10020:	.word	0x0000a880
   10024:	.word	0x0000a760

00010028 <verify_accept_all_cb>:
   10028:	mov	r0, #1
   1002c:	bx	lr

00010030 <rb_init_prng>:
   10030:	push	{r4, r5, fp, lr}
   10034:	add	fp, sp, #8
   10038:	mov	r5, r1
   1003c:	mov	r4, r0
   10040:	bl	4ce0 <ERR_get_error@plt>
   10044:	cmp	r0, #0
   10048:	bne	10040 <rb_init_prng+0x10>
   1004c:	cmp	r5, #0
   10050:	bne	10068 <rb_init_prng+0x38>
   10054:	mov	r0, r4
   10058:	mvn	r1, #0
   1005c:	bl	4d10 <RAND_load_file@plt>
   10060:	cmn	r0, #1
   10064:	ble	10090 <rb_init_prng+0x60>
   10068:	bl	5400 <RAND_status@plt>
   1006c:	cmp	r0, #1
   10070:	bne	100e0 <rb_init_prng+0xb0>
   10074:	ldr	r0, [pc, #200]	; 10144 <rb_init_prng+0x114>
   10078:	ldr	r1, [pc, #200]	; 10148 <rb_init_prng+0x118>
   1007c:	add	r0, pc, r0
   10080:	add	r1, pc, r1
   10084:	bl	519c <rb_lib_log@plt>
   10088:	mov	r0, #1
   1008c:	pop	{r4, r5, fp, pc}
   10090:	mov	r0, #0
   10094:	mov	r4, r0
   10098:	bl	4ce0 <ERR_get_error@plt>
   1009c:	cmp	r0, #0
   100a0:	bne	10094 <rb_init_prng+0x64>
   100a4:	ldr	r5, [pc, #128]	; 1012c <rb_init_prng+0xfc>
   100a8:	mov	r0, r4
   100ac:	mov	r2, #512	; 0x200
   100b0:	add	r5, pc, r5
   100b4:	mov	r1, r5
   100b8:	bl	4e6c <ERR_error_string_n@plt>
   100bc:	ldr	r0, [pc, #108]	; 10130 <rb_init_prng+0x100>
   100c0:	ldr	r1, [pc, #108]	; 10134 <rb_init_prng+0x104>
   100c4:	mov	r2, r5
   100c8:	add	r0, pc, r0
   100cc:	add	r1, pc, r1
   100d0:	bl	519c <rb_lib_log@plt>
   100d4:	bl	5400 <RAND_status@plt>
   100d8:	cmp	r0, #1
   100dc:	beq	10074 <rb_init_prng+0x44>
   100e0:	mov	r0, #0
   100e4:	mov	r4, r0
   100e8:	bl	4ce0 <ERR_get_error@plt>
   100ec:	cmp	r0, #0
   100f0:	bne	100e4 <rb_init_prng+0xb4>
   100f4:	ldr	r5, [pc, #60]	; 10138 <rb_init_prng+0x108>
   100f8:	mov	r0, r4
   100fc:	mov	r2, #512	; 0x200
   10100:	add	r5, pc, r5
   10104:	mov	r1, r5
   10108:	bl	4e6c <ERR_error_string_n@plt>
   1010c:	ldr	r0, [pc, #40]	; 1013c <rb_init_prng+0x10c>
   10110:	ldr	r1, [pc, #40]	; 10140 <rb_init_prng+0x110>
   10114:	mov	r2, r5
   10118:	add	r0, pc, r0
   1011c:	add	r1, pc, r1
   10120:	bl	519c <rb_lib_log@plt>
   10124:	mov	r0, #0
   10128:	pop	{r4, r5, fp, pc}
   1012c:	.word	0x0002eac4
   10130:	.word	0x0000a761
   10134:	.word	0x0000a774
   10138:	.word	0x0002ea74
   1013c:	.word	0x0000a735
   10140:	.word	0x0000a724
   10144:	.word	0x0000a7e5
   10148:	.word	0x0000a7c0

0001014c <rb_get_random>:
   1014c:	push	{r4, r5, fp, lr}
   10150:	add	fp, sp, #8
   10154:	mov	r4, r1
   10158:	mov	r5, r0
   1015c:	bl	4ce0 <ERR_get_error@plt>
   10160:	cmp	r0, #0
   10164:	bne	1015c <rb_get_random+0x10>
   10168:	mov	r0, r5
   1016c:	mov	r1, r4
   10170:	bl	5334 <RAND_bytes@plt>
   10174:	mov	r1, r0
   10178:	mov	r0, #1
   1017c:	cmp	r1, #1
   10180:	popeq	{r4, r5, fp, pc}
   10184:	mov	r0, #0
   10188:	mov	r4, r0
   1018c:	bl	4ce0 <ERR_get_error@plt>
   10190:	cmp	r0, #0
   10194:	bne	10188 <rb_get_random+0x3c>
   10198:	ldr	r5, [pc, #48]	; 101d0 <rb_get_random+0x84>
   1019c:	mov	r0, r4
   101a0:	mov	r2, #512	; 0x200
   101a4:	add	r5, pc, r5
   101a8:	mov	r1, r5
   101ac:	bl	4e6c <ERR_error_string_n@plt>
   101b0:	ldr	r0, [pc, #28]	; 101d4 <rb_get_random+0x88>
   101b4:	ldr	r1, [pc, #28]	; 101d8 <rb_get_random+0x8c>
   101b8:	mov	r2, r5
   101bc:	add	r0, pc, r0
   101c0:	add	r1, pc, r1
   101c4:	bl	519c <rb_lib_log@plt>
   101c8:	mov	r0, #0
   101cc:	pop	{r4, r5, fp, pc}
   101d0:	.word	0x0002e9d0
   101d4:	.word	0x0000a6ba
   101d8:	.word	0x0000a6c9

000101dc <rb_get_ssl_strerror>:
   101dc:	push	{r4, sl, fp, lr}
   101e0:	add	fp, sp, #8
   101e4:	ldr	r0, [r0, #64]	; 0x40
   101e8:	ldr	r4, [pc, #20]	; 10204 <rb_get_ssl_strerror+0x28>
   101ec:	mov	r2, #512	; 0x200
   101f0:	add	r4, pc, r4
   101f4:	mov	r1, r4
   101f8:	bl	4e6c <ERR_error_string_n@plt>
   101fc:	mov	r0, r4
   10200:	pop	{r4, sl, fp, pc}
   10204:	.word	0x0002e984

00010208 <rb_get_ssl_certfp>:
   10208:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1020c:	add	fp, sp, #24
   10210:	mov	r4, #0
   10214:	cmp	r0, #0
   10218:	beq	10288 <rb_get_ssl_certfp+0x80>
   1021c:	mov	r5, r0
   10220:	ldr	r0, [r0, #56]	; 0x38
   10224:	cmp	r0, #0
   10228:	beq	10288 <rb_get_ssl_certfp+0x80>
   1022c:	mov	r8, r2
   10230:	mov	r6, r1
   10234:	bl	528c <SSL_get_peer_certificate@plt>
   10238:	cmp	r0, #0
   1023c:	beq	10288 <rb_get_ssl_certfp+0x80>
   10240:	mov	r7, r0
   10244:	ldr	r0, [r5, #56]	; 0x38
   10248:	bl	52a4 <SSL_get_verify_result@plt>
   1024c:	mov	r4, #0
   10250:	cmp	r0, #27
   10254:	bhi	10280 <rb_get_ssl_certfp+0x78>
   10258:	movw	r2, #1
   1025c:	mov	r1, #1
   10260:	movt	r2, #2108	; 0x83c
   10264:	tst	r2, r1, lsl r0
   10268:	beq	10280 <rb_get_ssl_certfp+0x78>
   1026c:	mov	r0, r7
   10270:	mov	r1, r6
   10274:	mov	r2, r8
   10278:	bl	10290 <make_certfp>
   1027c:	mov	r4, r0
   10280:	mov	r0, r7
   10284:	bl	54a8 <X509_free@plt>
   10288:	mov	r0, r4
   1028c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00010290 <make_certfp>:
   10290:	push	{r4, r5, r6, sl, fp, lr}
   10294:	add	fp, sp, #16
   10298:	sub	sp, sp, #8
   1029c:	mov	r5, r0
   102a0:	mov	r0, #0
   102a4:	mov	r4, r1
   102a8:	cmp	r2, #1
   102ac:	str	r0, [sp, #4]
   102b0:	ble	102e4 <make_certfp+0x54>
   102b4:	cmp	r2, #2
   102b8:	beq	10304 <make_certfp+0x74>
   102bc:	movw	r1, #4097	; 0x1001
   102c0:	cmp	r2, r1
   102c4:	beq	10314 <make_certfp+0x84>
   102c8:	movw	r1, #4098	; 0x1002
   102cc:	cmp	r2, r1
   102d0:	bne	10378 <make_certfp+0xe8>
   102d4:	mov	r0, #64	; 0x40
   102d8:	str	r0, [sp, #4]
   102dc:	bl	53e8 <EVP_sha512@plt>
   102e0:	b	10320 <make_certfp+0x90>
   102e4:	cmp	r2, #0
   102e8:	beq	1033c <make_certfp+0xac>
   102ec:	cmp	r2, #1
   102f0:	bne	10378 <make_certfp+0xe8>
   102f4:	mov	r0, #32
   102f8:	str	r0, [sp, #4]
   102fc:	bl	5418 <EVP_sha256@plt>
   10300:	b	10348 <make_certfp+0xb8>
   10304:	mov	r0, #64	; 0x40
   10308:	str	r0, [sp, #4]
   1030c:	bl	53e8 <EVP_sha512@plt>
   10310:	b	10348 <make_certfp+0xb8>
   10314:	mov	r0, #32
   10318:	str	r0, [sp, #4]
   1031c:	bl	5418 <EVP_sha256@plt>
   10320:	mov	r6, r0
   10324:	mov	r0, r5
   10328:	bl	4e0c <X509_get_X509_PUBKEY@plt>
   1032c:	mov	r5, r0
   10330:	ldr	r0, [pc, #156]	; 103d4 <make_certfp+0x144>
   10334:	ldr	r0, [pc, r0]
   10338:	b	10354 <make_certfp+0xc4>
   1033c:	mov	r0, #20
   10340:	str	r0, [sp, #4]
   10344:	bl	516c <EVP_sha1@plt>
   10348:	mov	r6, r0
   1034c:	ldr	r0, [pc, #124]	; 103d0 <make_certfp+0x140>
   10350:	ldr	r0, [pc, r0]
   10354:	add	r1, sp, #4
   10358:	mov	r2, r5
   1035c:	mov	r3, r4
   10360:	str	r1, [sp]
   10364:	mov	r1, r6
   10368:	bl	5274 <ASN1_item_digest@plt>
   1036c:	cmp	r0, #1
   10370:	bne	10380 <make_certfp+0xf0>
   10374:	ldr	r0, [sp, #4]
   10378:	sub	sp, fp, #16
   1037c:	pop	{r4, r5, r6, sl, fp, pc}
   10380:	mov	r0, #0
   10384:	mov	r4, r0
   10388:	bl	4ce0 <ERR_get_error@plt>
   1038c:	cmp	r0, #0
   10390:	bne	10384 <make_certfp+0xf4>
   10394:	ldr	r5, [pc, #60]	; 103d8 <make_certfp+0x148>
   10398:	mov	r0, r4
   1039c:	mov	r2, #512	; 0x200
   103a0:	add	r5, pc, r5
   103a4:	mov	r1, r5
   103a8:	bl	4e6c <ERR_error_string_n@plt>
   103ac:	ldr	r0, [pc, #40]	; 103dc <make_certfp+0x14c>
   103b0:	ldr	r1, [pc, #40]	; 103e0 <make_certfp+0x150>
   103b4:	mov	r2, r5
   103b8:	add	r0, pc, r0
   103bc:	add	r1, pc, r1
   103c0:	bl	519c <rb_lib_log@plt>
   103c4:	mov	r0, #0
   103c8:	sub	sp, fp, #16
   103cc:	pop	{r4, r5, r6, sl, fp, pc}
   103d0:	.word	0x0001c078
   103d4:	.word	0x0001c0a0
   103d8:	.word	0x0002e7d4
   103dc:	.word	0x0000a559
   103e0:	.word	0x0000a56e

000103e4 <rb_get_ssl_certfp_file>:
   103e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   103e8:	add	fp, sp, #24
   103ec:	mov	r6, r1
   103f0:	ldr	r1, [pc, #116]	; 1046c <rb_get_ssl_certfp_file+0x88>
   103f4:	mov	r8, r2
   103f8:	add	r1, pc, r1
   103fc:	bl	4ecc <fopen@plt>
   10400:	cmp	r0, #0
   10404:	mvneq	r7, #0
   10408:	moveq	r0, r7
   1040c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   10410:	mov	r1, #0
   10414:	mov	r2, #0
   10418:	mov	r3, #0
   1041c:	mov	r4, r0
   10420:	mov	r7, #0
   10424:	bl	50ac <PEM_read_X509@plt>
   10428:	cmp	r0, #0
   1042c:	beq	1045c <rb_get_ssl_certfp_file+0x78>
   10430:	mov	r1, r6
   10434:	mov	r2, r8
   10438:	mov	r5, r0
   1043c:	bl	10290 <make_certfp>
   10440:	mov	r6, r0
   10444:	mov	r0, r5
   10448:	bl	54a8 <X509_free@plt>
   1044c:	mov	r0, r4
   10450:	bl	4e48 <fclose@plt>
   10454:	mov	r0, r6
   10458:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1045c:	mov	r0, r4
   10460:	bl	4e48 <fclose@plt>
   10464:	mov	r0, r7
   10468:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1046c:	.word	0x0000a8bc

00010470 <rb_get_ssl_info>:
   10470:	push	{r4, r5, r6, r7, fp, lr}
   10474:	add	fp, sp, #16
   10478:	sub	sp, sp, #16
   1047c:	movw	r4, #4175	; 0x104f
   10480:	mov	r5, r1
   10484:	mov	r6, r0
   10488:	movt	r4, #4112	; 0x1010
   1048c:	bl	4f80 <OpenSSL_version_num@plt>
   10490:	cmp	r0, r4
   10494:	bne	104b0 <rb_get_ssl_info+0x40>
   10498:	ldr	r0, [pc, #80]	; 104f0 <rb_get_ssl_info+0x80>
   1049c:	add	r0, pc, r0
   104a0:	str	r0, [sp]
   104a4:	ldr	r2, [pc, #72]	; 104f4 <rb_get_ssl_info+0x84>
   104a8:	add	r2, pc, r2
   104ac:	b	104d8 <rb_get_ssl_info+0x68>
   104b0:	bl	4f80 <OpenSSL_version_num@plt>
   104b4:	mov	r7, r0
   104b8:	mov	r0, #0
   104bc:	bl	54d8 <OpenSSL_version@plt>
   104c0:	ldr	r1, [pc, #48]	; 104f8 <rb_get_ssl_info+0x88>
   104c4:	add	r1, pc, r1
   104c8:	stm	sp, {r1, r7}
   104cc:	str	r0, [sp, #8]
   104d0:	ldr	r2, [pc, #36]	; 104fc <rb_get_ssl_info+0x8c>
   104d4:	add	r2, pc, r2
   104d8:	mov	r0, r6
   104dc:	mov	r1, r5
   104e0:	mov	r3, r4
   104e4:	bl	53f4 <snprintf@plt>
   104e8:	sub	sp, fp, #16
   104ec:	pop	{r4, r5, r6, r7, fp, pc}
   104f0:	.word	0x0000a41f
   104f4:	.word	0x0000a3ef
   104f8:	.word	0x0000a3f7
   104fc:	.word	0x0000a403

00010500 <rb_ssl_get_cipher>:
   10500:	push	{r4, r5, r6, sl, fp, lr}
   10504:	add	fp, sp, #16
   10508:	sub	sp, sp, #8
   1050c:	mov	r4, #0
   10510:	cmp	r0, #0
   10514:	beq	10560 <rb_ssl_get_cipher+0x60>
   10518:	mov	r5, r0
   1051c:	ldr	r0, [r0, #56]	; 0x38
   10520:	cmp	r0, #0
   10524:	beq	10560 <rb_ssl_get_cipher+0x60>
   10528:	bl	54fc <SSL_get_version@plt>
   1052c:	mov	r6, r0
   10530:	ldr	r0, [r5, #56]	; 0x38
   10534:	bl	4df4 <SSL_get_current_cipher@plt>
   10538:	bl	4f68 <SSL_CIPHER_get_name@plt>
   1053c:	str	r0, [sp]
   10540:	mov	r1, #512	; 0x200
   10544:	mov	r3, r6
   10548:	ldr	r4, [pc, #28]	; 1056c <rb_ssl_get_cipher+0x6c>
   1054c:	ldr	r2, [pc, #28]	; 10570 <rb_ssl_get_cipher+0x70>
   10550:	add	r4, pc, r4
   10554:	add	r2, pc, r2
   10558:	mov	r0, r4
   1055c:	bl	53f4 <snprintf@plt>
   10560:	mov	r0, r4
   10564:	sub	sp, fp, #16
   10568:	pop	{r4, r5, r6, sl, fp, pc}
   1056c:	.word	0x0002e424
   10570:	.word	0x0000a3b6

00010574 <rb_ssl_read>:
   10574:	push	{fp, lr}
   10578:	mov	fp, sp
   1057c:	sub	sp, sp, #8
   10580:	mov	r3, r1
   10584:	mov	r1, r0
   10588:	str	r2, [sp]
   1058c:	mov	r0, #0
   10590:	mov	r2, r3
   10594:	mov	r3, #0
   10598:	bl	105a4 <rb_ssl_read_or_write>
   1059c:	mov	sp, fp
   105a0:	pop	{fp, pc}

000105a4 <rb_ssl_read_or_write>:
   105a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   105a8:	add	fp, sp, #24
   105ac:	ldr	r5, [fp, #8]
   105b0:	mov	r6, r3
   105b4:	mov	r7, r2
   105b8:	mov	r8, r1
   105bc:	mov	r4, r0
   105c0:	bl	4ce0 <ERR_get_error@plt>
   105c4:	cmp	r0, #0
   105c8:	bne	105c0 <rb_ssl_read_or_write+0x1c>
   105cc:	ldr	r0, [r8, #56]	; 0x38
   105d0:	cmp	r4, #0
   105d4:	beq	105f4 <rb_ssl_read_or_write+0x50>
   105d8:	mov	r1, r6
   105dc:	mov	r2, r5
   105e0:	bl	4eb4 <SSL_write@plt>
   105e4:	mov	r1, r0
   105e8:	cmn	r0, #1
   105ec:	bgt	106dc <rb_ssl_read_or_write+0x138>
   105f0:	b	1060c <rb_ssl_read_or_write+0x68>
   105f4:	mov	r1, r7
   105f8:	mov	r2, r5
   105fc:	bl	501c <SSL_read@plt>
   10600:	mov	r1, r0
   10604:	cmn	r0, #1
   10608:	bgt	106dc <rb_ssl_read_or_write+0x138>
   1060c:	ldr	r0, [r8, #56]	; 0x38
   10610:	bl	54f0 <SSL_get_error@plt>
   10614:	sub	r0, r0, #2
   10618:	cmp	r0, #4
   1061c:	bhi	10674 <rb_ssl_read_or_write+0xd0>
   10620:	add	r2, pc, #8
   10624:	mov	r1, #0
   10628:	ldr	r0, [r2, r0, lsl #2]
   1062c:	add	pc, r2, r0
   10630:	.word	0x00000014
   10634:	.word	0x0000002c
   10638:	.word	0x00000044
   1063c:	.word	0x00000068
   10640:	.word	0x000000ac
   10644:	bl	552c <__errno_location@plt>
   10648:	mov	r1, #11
   1064c:	str	r1, [r0]
   10650:	mvn	r1, #2
   10654:	mov	r0, r1
   10658:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1065c:	bl	552c <__errno_location@plt>
   10660:	mov	r1, #11
   10664:	str	r1, [r0]
   10668:	mvn	r1, #3
   1066c:	mov	r0, r1
   10670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10674:	mov	r0, #0
   10678:	mov	r4, r0
   1067c:	bl	4ce0 <ERR_get_error@plt>
   10680:	cmp	r0, #0
   10684:	bne	10678 <rb_ssl_read_or_write+0xd4>
   10688:	cmp	r4, #0
   1068c:	str	r4, [r8, #64]	; 0x40
   10690:	bne	106b8 <rb_ssl_read_or_write+0x114>
   10694:	b	106d8 <rb_ssl_read_or_write+0x134>
   10698:	mov	r0, #0
   1069c:	mov	r4, r0
   106a0:	bl	4ce0 <ERR_get_error@plt>
   106a4:	cmp	r0, #0
   106a8:	bne	1069c <rb_ssl_read_or_write+0xf8>
   106ac:	cmp	r4, #0
   106b0:	beq	106d0 <rb_ssl_read_or_write+0x12c>
   106b4:	str	r4, [r8, #64]	; 0x40
   106b8:	bl	552c <__errno_location@plt>
   106bc:	mov	r1, #5
   106c0:	str	r1, [r0]
   106c4:	mvn	r1, #1
   106c8:	mov	r0, r1
   106cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   106d0:	mov	r0, #0
   106d4:	str	r0, [r8, #64]	; 0x40
   106d8:	mvn	r1, #0
   106dc:	mov	r0, r1
   106e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000106e4 <rb_ssl_write>:
   106e4:	push	{fp, lr}
   106e8:	mov	fp, sp
   106ec:	sub	sp, sp, #8
   106f0:	mov	r3, r1
   106f4:	mov	r1, r0
   106f8:	str	r2, [sp]
   106fc:	mov	r0, #1
   10700:	mov	r2, #0
   10704:	bl	105a4 <rb_ssl_read_or_write>
   10708:	mov	sp, fp
   1070c:	pop	{fp, pc}

00010710 <rb_supports_ssl>:
   10710:	mov	r0, #1
   10714:	bx	lr

00010718 <rb_ssl_handshake_count>:
   10718:	ldr	r0, [r0, #60]	; 0x3c
   1071c:	bx	lr

00010720 <rb_ssl_clear_handshake_count>:
   10720:	mov	r1, #0
   10724:	str	r1, [r0, #60]	; 0x3c
   10728:	bx	lr

0001072c <rb_ssl_start_accepted>:
   1072c:	push	{r4, r5, r6, r7, fp, lr}
   10730:	add	fp, sp, #16
   10734:	mov	r4, r0
   10738:	ldrb	r0, [r0, #17]
   1073c:	mov	r6, r1
   10740:	mov	r1, #144	; 0x90
   10744:	mov	r5, r3
   10748:	mov	r7, r2
   1074c:	orr	r0, r0, #32
   10750:	strb	r0, [r4, #17]
   10754:	mov	r0, #1
   10758:	bl	4ea8 <calloc@plt>
   1075c:	cmp	r0, #0
   10760:	beq	107b0 <rb_ssl_start_accepted+0x84>
   10764:	mov	r1, #0
   10768:	mov	r2, #132	; 0x84
   1076c:	str	r0, [r4, #52]	; 0x34
   10770:	str	r7, [r0, #140]	; 0x8c
   10774:	str	r6, [r0, #132]	; 0x84
   10778:	bl	4ee4 <memset@plt>
   1077c:	ldr	r2, [pc, #48]	; 107b4 <rb_ssl_start_accepted+0x88>
   10780:	mov	r0, r4
   10784:	mov	r1, r5
   10788:	mov	r3, #0
   1078c:	add	r2, pc, r2
   10790:	bl	4cc8 <rb_settimeout@plt>
   10794:	mov	r0, r4
   10798:	mov	r1, #0
   1079c:	bl	107ec <rb_ssl_init_fd>
   107a0:	mov	r0, r4
   107a4:	mov	r1, #0
   107a8:	pop	{r4, r5, r6, r7, fp, lr}
   107ac:	b	108b8 <rb_ssl_accept_common>
   107b0:	bl	51fc <rb_outofmemory@plt>
   107b4:	.word	0x00000024

000107b8 <rb_ssl_timeout_cb>:
   107b8:	push	{fp, lr}
   107bc:	mov	fp, sp
   107c0:	sub	sp, sp, #8
   107c4:	ldr	r1, [r0, #52]	; 0x34
   107c8:	mov	r2, #0
   107cc:	mov	r3, #0
   107d0:	ldr	ip, [r1, #132]	; 0x84
   107d4:	ldr	r1, [r1, #140]	; 0x8c
   107d8:	str	r1, [sp]
   107dc:	mov	r1, #3
   107e0:	blx	ip
   107e4:	mov	sp, fp
   107e8:	pop	{fp, pc}

000107ec <rb_ssl_init_fd>:
   107ec:	push	{r4, r5, r6, sl, fp, lr}
   107f0:	add	fp, sp, #16
   107f4:	mov	r5, r1
   107f8:	mov	r4, r0
   107fc:	bl	4ce0 <ERR_get_error@plt>
   10800:	cmp	r0, #0
   10804:	bne	107fc <rb_ssl_init_fd+0x10>
   10808:	ldr	r0, [pc, #152]	; 108a8 <rb_ssl_init_fd+0xbc>
   1080c:	ldr	r0, [pc, r0]
   10810:	bl	4fd4 <SSL_new@plt>
   10814:	cmp	r0, #0
   10818:	str	r0, [r4, #56]	; 0x38
   1081c:	beq	10838 <rb_ssl_init_fd+0x4c>
   10820:	cmp	r5, #1
   10824:	beq	10888 <rb_ssl_init_fd+0x9c>
   10828:	cmp	r5, #0
   1082c:	bne	1088c <rb_ssl_init_fd+0xa0>
   10830:	bl	5238 <SSL_set_accept_state@plt>
   10834:	b	1088c <rb_ssl_init_fd+0xa0>
   10838:	mov	r0, #0
   1083c:	mov	r5, r0
   10840:	bl	4ce0 <ERR_get_error@plt>
   10844:	cmp	r0, #0
   10848:	bne	1083c <rb_ssl_init_fd+0x50>
   1084c:	ldr	r6, [pc, #88]	; 108ac <rb_ssl_init_fd+0xc0>
   10850:	mov	r0, r5
   10854:	mov	r2, #512	; 0x200
   10858:	add	r6, pc, r6
   1085c:	mov	r1, r6
   10860:	bl	4e6c <ERR_error_string_n@plt>
   10864:	ldr	r0, [pc, #68]	; 108b0 <rb_ssl_init_fd+0xc4>
   10868:	ldr	r1, [pc, #68]	; 108b4 <rb_ssl_init_fd+0xc8>
   1086c:	mov	r2, r6
   10870:	add	r0, pc, r0
   10874:	add	r1, pc, r1
   10878:	bl	519c <rb_lib_log@plt>
   1087c:	mov	r0, r4
   10880:	pop	{r4, r5, r6, sl, fp, lr}
   10884:	b	5100 <rb_close@plt>
   10888:	bl	53ac <SSL_set_connect_state@plt>
   1088c:	ldr	r5, [r4, #56]	; 0x38
   10890:	mov	r0, r4
   10894:	bl	4db8 <rb_get_fd@plt>
   10898:	mov	r1, r0
   1089c:	mov	r0, r5
   108a0:	pop	{r4, r5, r6, sl, fp, lr}
   108a4:	b	4f14 <SSL_set_fd@plt>
   108a8:	.word	0x0002e164
   108ac:	.word	0x0002e31c
   108b0:	.word	0x0000a0c6
   108b4:	.word	0x0000a0d2

000108b8 <rb_ssl_accept_common>:
   108b8:	push	{r4, r5, r6, sl, fp, lr}
   108bc:	add	fp, sp, #16
   108c0:	sub	sp, sp, #8
   108c4:	mov	r4, r0
   108c8:	bl	4ce0 <ERR_get_error@plt>
   108cc:	cmp	r0, #0
   108d0:	bne	108c8 <rb_ssl_accept_common+0x10>
   108d4:	ldr	r0, [r4, #56]	; 0x38
   108d8:	bl	5058 <SSL_do_handshake@plt>
   108dc:	mov	r6, r0
   108e0:	ldr	r0, [r4, #56]	; 0x38
   108e4:	mov	r1, r6
   108e8:	bl	54f0 <SSL_get_error@plt>
   108ec:	cmp	r6, #1
   108f0:	bne	1096c <rb_ssl_accept_common+0xb4>
   108f4:	ldr	r0, [r4, #60]	; 0x3c
   108f8:	mov	r1, #0
   108fc:	mov	r2, #0
   10900:	mov	r3, #0
   10904:	mov	r6, #0
   10908:	add	r0, r0, #1
   1090c:	str	r0, [r4, #60]	; 0x3c
   10910:	mov	r0, r4
   10914:	bl	4cc8 <rb_settimeout@plt>
   10918:	mov	r0, r4
   1091c:	mov	r1, #3
   10920:	mov	r2, #0
   10924:	mov	r3, #0
   10928:	bl	4d7c <rb_setselect@plt>
   1092c:	ldr	r5, [r4, #52]	; 0x34
   10930:	str	r6, [r4, #52]	; 0x34
   10934:	mov	r1, #0
   10938:	ldr	r0, [r5, #140]	; 0x8c
   1093c:	ldr	r3, [r5, #128]	; 0x80
   10940:	ldr	r6, [r5, #132]	; 0x84
   10944:	mov	r2, r5
   10948:	str	r0, [sp]
   1094c:	mov	r0, r4
   10950:	blx	r6
   10954:	cmp	r5, #0
   10958:	beq	109bc <rb_ssl_accept_common+0x104>
   1095c:	mov	r0, r5
   10960:	sub	sp, fp, #16
   10964:	pop	{r4, r5, r6, sl, fp, lr}
   10968:	b	4f98 <free@plt>
   1096c:	mov	r5, r0
   10970:	cmn	r6, #1
   10974:	cmpeq	r5, #2
   10978:	beq	109c4 <rb_ssl_accept_common+0x10c>
   1097c:	cmn	r6, #1
   10980:	cmpeq	r5, #3
   10984:	beq	109e4 <rb_ssl_accept_common+0x12c>
   10988:	bl	552c <__errno_location@plt>
   1098c:	mov	r1, #5
   10990:	mov	r2, #0
   10994:	mov	r3, #0
   10998:	str	r1, [r0]
   1099c:	str	r5, [r4, #64]	; 0x40
   109a0:	mov	r1, #6
   109a4:	ldr	r0, [r4, #52]	; 0x34
   109a8:	ldr	r6, [r0, #132]	; 0x84
   109ac:	ldr	r0, [r0, #140]	; 0x8c
   109b0:	str	r0, [sp]
   109b4:	mov	r0, r4
   109b8:	blx	r6
   109bc:	sub	sp, fp, #16
   109c0:	pop	{r4, r5, r6, sl, fp, pc}
   109c4:	ldr	r2, [pc, #56]	; 10a04 <rb_ssl_accept_common+0x14c>
   109c8:	mov	r0, r4
   109cc:	mov	r1, #1
   109d0:	add	r2, pc, r2
   109d4:	mov	r3, #0
   109d8:	sub	sp, fp, #16
   109dc:	pop	{r4, r5, r6, sl, fp, lr}
   109e0:	b	4d7c <rb_setselect@plt>
   109e4:	ldr	r2, [pc, #28]	; 10a08 <rb_ssl_accept_common+0x150>
   109e8:	mov	r0, r4
   109ec:	mov	r1, #2
   109f0:	add	r2, pc, r2
   109f4:	mov	r3, #0
   109f8:	sub	sp, fp, #16
   109fc:	pop	{r4, r5, r6, sl, fp, lr}
   10a00:	b	4d7c <rb_setselect@plt>
   10a04:	.word	0xfffffee0
   10a08:	.word	0xfffffec0

00010a0c <rb_ssl_accept_setup>:
   10a0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10a10:	add	fp, sp, #24
   10a14:	mov	r6, r0
   10a18:	ldrb	r0, [r1, #17]
   10a1c:	mov	r4, r1
   10a20:	mov	r5, r3
   10a24:	mov	r8, r2
   10a28:	orr	r0, r0, #32
   10a2c:	strb	r0, [r1, #17]
   10a30:	mov	r0, #1
   10a34:	mov	r1, #144	; 0x90
   10a38:	bl	4ea8 <calloc@plt>
   10a3c:	cmp	r0, #0
   10a40:	beq	10ac0 <rb_ssl_accept_setup+0xb4>
   10a44:	str	r0, [r4, #52]	; 0x34
   10a48:	mov	r7, r0
   10a4c:	rsb	r2, r5, #128	; 0x80
   10a50:	cmp	r5, #127	; 0x7f
   10a54:	ldr	r0, [r6, #52]	; 0x34
   10a58:	movwhi	r2, #0
   10a5c:	ldr	r1, [r0, #132]	; 0x84
   10a60:	str	r1, [r7, #132]	; 0x84
   10a64:	mov	r1, #0
   10a68:	ldr	r0, [r0, #140]	; 0x8c
   10a6c:	str	r5, [r7, #128]	; 0x80
   10a70:	str	r0, [r7, #140]	; 0x8c
   10a74:	add	r0, r7, r5
   10a78:	bl	4ee4 <memset@plt>
   10a7c:	mov	r0, r7
   10a80:	mov	r1, r8
   10a84:	mov	r2, r5
   10a88:	bl	50a0 <memcpy@plt>
   10a8c:	ldr	r2, [pc, #48]	; 10ac4 <rb_ssl_accept_setup+0xb8>
   10a90:	mov	r0, r4
   10a94:	mov	r1, #10
   10a98:	mov	r3, #0
   10a9c:	add	r2, pc, r2
   10aa0:	bl	4cc8 <rb_settimeout@plt>
   10aa4:	mov	r0, r4
   10aa8:	mov	r1, #0
   10aac:	bl	107ec <rb_ssl_init_fd>
   10ab0:	mov	r0, r4
   10ab4:	mov	r1, #0
   10ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   10abc:	b	108b8 <rb_ssl_accept_common>
   10ac0:	bl	51fc <rb_outofmemory@plt>
   10ac4:	.word	0xfffffd14

00010ac8 <rb_ssl_listen>:
   10ac8:	push	{r4, sl, fp, lr}
   10acc:	add	fp, sp, #8
   10ad0:	mov	r4, r0
   10ad4:	bl	543c <rb_listen@plt>
   10ad8:	mov	r1, #52	; 0x34
   10adc:	strb	r1, [r4, #17]
   10ae0:	pop	{r4, sl, fp, pc}

00010ae4 <rb_connect_tcp_ssl>:
   10ae4:	push	{r4, r5, r6, r7, fp, lr}
   10ae8:	add	fp, sp, #16
   10aec:	sub	sp, sp, #8
   10af0:	cmp	r0, #0
   10af4:	beq	10b4c <rb_connect_tcp_ssl+0x68>
   10af8:	mov	r5, r1
   10afc:	mov	r6, r0
   10b00:	mov	r0, #1
   10b04:	mov	r1, #12
   10b08:	mov	r7, r3
   10b0c:	mov	r4, r2
   10b10:	bl	4ea8 <calloc@plt>
   10b14:	cmp	r0, #0
   10b18:	beq	10b54 <rb_connect_tcp_ssl+0x70>
   10b1c:	ldr	r1, [fp, #12]
   10b20:	ldr	r2, [fp, #8]
   10b24:	str	r7, [r0]
   10b28:	str	r2, [r0, #4]
   10b2c:	str	r1, [r0, #8]
   10b30:	stm	sp, {r0, r1}
   10b34:	mov	r0, r6
   10b38:	mov	r1, r5
   10b3c:	mov	r2, r4
   10b40:	ldr	r3, [pc, #16]	; 10b58 <rb_connect_tcp_ssl+0x74>
   10b44:	add	r3, pc, r3
   10b48:	bl	4d04 <rb_connect_tcp@plt>
   10b4c:	sub	sp, fp, #16
   10b50:	pop	{r4, r5, r6, r7, fp, pc}
   10b54:	bl	51fc <rb_outofmemory@plt>
   10b58:	.word	0x00000010

00010b5c <rb_ssl_tryconn>:
   10b5c:	push	{r4, r5, fp, lr}
   10b60:	add	fp, sp, #8
   10b64:	mov	r4, r2
   10b68:	mov	r5, r0
   10b6c:	cmp	r1, #0
   10b70:	beq	10ba4 <rb_ssl_tryconn+0x48>
   10b74:	ldr	r0, [r5, #48]	; 0x30
   10b78:	ldr	r2, [r4]
   10b7c:	str	r2, [r0, #260]	; 0x104
   10b80:	ldr	r2, [r4, #4]
   10b84:	str	r2, [r0, #264]	; 0x108
   10b88:	mov	r0, r5
   10b8c:	bl	cbc4 <rb_connect_callback>
   10b90:	cmp	r4, #0
   10b94:	popeq	{r4, r5, fp, pc}
   10b98:	mov	r0, r4
   10b9c:	pop	{r4, r5, fp, lr}
   10ba0:	b	4f98 <free@plt>
   10ba4:	ldrb	r0, [r5, #17]
   10ba8:	mov	r3, r4
   10bac:	orr	r0, r0, #32
   10bb0:	strb	r0, [r5, #17]
   10bb4:	mov	r0, r5
   10bb8:	ldr	r1, [r4, #8]
   10bbc:	ldr	r2, [pc, #32]	; 10be4 <rb_ssl_tryconn+0x88>
   10bc0:	add	r2, pc, r2
   10bc4:	bl	4cc8 <rb_settimeout@plt>
   10bc8:	mov	r0, r5
   10bcc:	mov	r1, #1
   10bd0:	bl	107ec <rb_ssl_init_fd>
   10bd4:	mov	r0, r5
   10bd8:	mov	r1, r4
   10bdc:	pop	{r4, r5, fp, lr}
   10be0:	b	10cc8 <rb_ssl_connect_common>
   10be4:	.word	0x000000c4

00010be8 <rb_ssl_start_connected>:
   10be8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10bec:	add	fp, sp, #24
   10bf0:	cmp	r0, #0
   10bf4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   10bf8:	mov	r5, r1
   10bfc:	mov	r4, r0
   10c00:	mov	r0, #1
   10c04:	mov	r1, #12
   10c08:	mov	r8, r3
   10c0c:	mov	r7, r2
   10c10:	bl	4ea8 <calloc@plt>
   10c14:	cmp	r0, #0
   10c18:	beq	10c84 <rb_ssl_start_connected+0x9c>
   10c1c:	mov	r6, r0
   10c20:	stm	r0, {r5, r7, r8}
   10c24:	mov	r0, #1
   10c28:	mov	r1, #268	; 0x10c
   10c2c:	bl	4ea8 <calloc@plt>
   10c30:	cmp	r0, #0
   10c34:	beq	10c84 <rb_ssl_start_connected+0x9c>
   10c38:	str	r0, [r4, #48]	; 0x30
   10c3c:	str	r5, [r0, #260]	; 0x104
   10c40:	str	r7, [r0, #264]	; 0x108
   10c44:	mov	r1, r8
   10c48:	mov	r3, r6
   10c4c:	ldrb	r0, [r4, #17]
   10c50:	orr	r0, r0, #32
   10c54:	strb	r0, [r4, #17]
   10c58:	mov	r0, r4
   10c5c:	ldr	r2, [pc, #36]	; 10c88 <rb_ssl_start_connected+0xa0>
   10c60:	add	r2, pc, r2
   10c64:	bl	4cc8 <rb_settimeout@plt>
   10c68:	mov	r0, r4
   10c6c:	mov	r1, #1
   10c70:	bl	107ec <rb_ssl_init_fd>
   10c74:	mov	r0, r4
   10c78:	mov	r1, r6
   10c7c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   10c80:	b	10cc8 <rb_ssl_connect_common>
   10c84:	bl	51fc <rb_outofmemory@plt>
   10c88:	.word	0x00000024

00010c8c <rb_ssl_tryconn_timeout_cb>:
   10c8c:	push	{r4, sl, fp, lr}
   10c90:	add	fp, sp, #8
   10c94:	mov	r4, r1
   10c98:	ldr	r1, [r0, #48]	; 0x30
   10c9c:	ldr	r2, [r4]
   10ca0:	str	r2, [r1, #260]	; 0x104
   10ca4:	ldr	r2, [r4, #4]
   10ca8:	str	r2, [r1, #264]	; 0x108
   10cac:	mov	r1, #3
   10cb0:	bl	cbc4 <rb_connect_callback>
   10cb4:	cmp	r4, #0
   10cb8:	popeq	{r4, sl, fp, pc}
   10cbc:	mov	r0, r4
   10cc0:	pop	{r4, sl, fp, lr}
   10cc4:	b	4f98 <free@plt>

00010cc8 <rb_ssl_connect_common>:
   10cc8:	push	{r4, r5, r6, r7, fp, lr}
   10ccc:	add	fp, sp, #16
   10cd0:	mov	r4, r1
   10cd4:	mov	r5, r0
   10cd8:	bl	4ce0 <ERR_get_error@plt>
   10cdc:	cmp	r0, #0
   10ce0:	bne	10cd8 <rb_ssl_connect_common+0x10>
   10ce4:	ldr	r0, [r5, #56]	; 0x38
   10ce8:	bl	5058 <SSL_do_handshake@plt>
   10cec:	mov	r7, r0
   10cf0:	ldr	r0, [r5, #56]	; 0x38
   10cf4:	mov	r1, r7
   10cf8:	bl	54f0 <SSL_get_error@plt>
   10cfc:	cmp	r7, #1
   10d00:	bne	10d58 <rb_ssl_connect_common+0x90>
   10d04:	ldr	r0, [r5, #60]	; 0x3c
   10d08:	mov	r1, #0
   10d0c:	mov	r2, #0
   10d10:	mov	r3, #0
   10d14:	add	r0, r0, #1
   10d18:	str	r0, [r5, #60]	; 0x3c
   10d1c:	mov	r0, r5
   10d20:	bl	4cc8 <rb_settimeout@plt>
   10d24:	mov	r0, r5
   10d28:	mov	r1, #3
   10d2c:	mov	r2, #0
   10d30:	mov	r3, #0
   10d34:	bl	4d7c <rb_setselect@plt>
   10d38:	ldr	r0, [r5, #48]	; 0x30
   10d3c:	ldr	r1, [r4]
   10d40:	str	r1, [r0, #260]	; 0x104
   10d44:	ldr	r1, [r4, #4]
   10d48:	str	r1, [r0, #264]	; 0x108
   10d4c:	mov	r0, r5
   10d50:	mov	r1, #0
   10d54:	b	10da0 <rb_ssl_connect_common+0xd8>
   10d58:	mov	r6, r0
   10d5c:	cmn	r7, #1
   10d60:	cmpeq	r6, #2
   10d64:	beq	10db8 <rb_ssl_connect_common+0xf0>
   10d68:	cmn	r7, #1
   10d6c:	cmpeq	r6, #3
   10d70:	beq	10dd4 <rb_ssl_connect_common+0x10c>
   10d74:	bl	552c <__errno_location@plt>
   10d78:	mov	r1, #5
   10d7c:	str	r1, [r0]
   10d80:	str	r6, [r5, #64]	; 0x40
   10d84:	ldr	r0, [r5, #48]	; 0x30
   10d88:	ldr	r1, [r4]
   10d8c:	str	r1, [r0, #260]	; 0x104
   10d90:	ldr	r1, [r4, #4]
   10d94:	str	r1, [r0, #264]	; 0x108
   10d98:	mov	r0, r5
   10d9c:	mov	r1, #6
   10da0:	bl	cbc4 <rb_connect_callback>
   10da4:	cmp	r4, #0
   10da8:	popeq	{r4, r5, r6, r7, fp, pc}
   10dac:	mov	r0, r4
   10db0:	pop	{r4, r5, r6, r7, fp, lr}
   10db4:	b	4f98 <free@plt>
   10db8:	ldr	r2, [pc, #48]	; 10df0 <rb_ssl_connect_common+0x128>
   10dbc:	mov	r0, r5
   10dc0:	mov	r1, #1
   10dc4:	add	r2, pc, r2
   10dc8:	mov	r3, r4
   10dcc:	pop	{r4, r5, r6, r7, fp, lr}
   10dd0:	b	4d7c <rb_setselect@plt>
   10dd4:	ldr	r2, [pc, #24]	; 10df4 <rb_ssl_connect_common+0x12c>
   10dd8:	mov	r0, r5
   10ddc:	mov	r1, #2
   10de0:	add	r2, pc, r2
   10de4:	mov	r3, r4
   10de8:	pop	{r4, r5, r6, r7, fp, lr}
   10dec:	b	4d7c <rb_setselect@plt>
   10df0:	.word	0xfffffefc
   10df4:	.word	0xfffffee0

00010df8 <rb_event_add>:
   10df8:	push	{r4, r5, r6, sl, fp, lr}
   10dfc:	add	fp, sp, #16
   10e00:	sub	sp, sp, #8
   10e04:	mov	r4, r2
   10e08:	mov	r5, r1
   10e0c:	mov	r6, r0
   10e10:	cmp	r3, #0
   10e14:	ble	10e34 <rb_event_add+0x3c>
   10e18:	mov	r0, r6
   10e1c:	mov	r1, r5
   10e20:	mov	r2, r4
   10e24:	str	r3, [sp]
   10e28:	bl	10e54 <rb_event_add_common>
   10e2c:	sub	sp, fp, #16
   10e30:	pop	{r4, r5, r6, sl, fp, pc}
   10e34:	ldr	r0, [pc, #20]	; 10e50 <rb_event_add+0x58>
   10e38:	mov	r1, r6
   10e3c:	mov	r2, r3
   10e40:	add	r0, pc, r0
   10e44:	bl	519c <rb_lib_log@plt>
   10e48:	mov	r3, #1
   10e4c:	b	10e18 <rb_event_add+0x20>
   10e50:	.word	0x00009ca5

00010e54 <rb_event_add_common>:
   10e54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10e58:	add	fp, sp, #24
   10e5c:	mov	r6, r1
   10e60:	mov	r7, r0
   10e64:	mov	r0, #1
   10e68:	mov	r1, #48	; 0x30
   10e6c:	mov	r4, r3
   10e70:	mov	r8, r2
   10e74:	bl	4ea8 <calloc@plt>
   10e78:	cmp	r0, #0
   10e7c:	beq	10f60 <rb_event_add_common+0x10c>
   10e80:	mov	r5, r0
   10e84:	str	r6, [r0, #12]
   10e88:	mov	r0, #33	; 0x21
   10e8c:	bl	5214 <malloc@plt>
   10e90:	cmp	r0, #0
   10e94:	beq	10f60 <rb_event_add_common+0x10c>
   10e98:	ldr	r9, [fp, #8]
   10e9c:	mov	r1, r7
   10ea0:	mov	r2, #33	; 0x21
   10ea4:	mov	r6, r0
   10ea8:	bl	4f50 <rb_strlcpy@plt>
   10eac:	str	r8, [r5, #16]
   10eb0:	str	r6, [r5, #20]
   10eb4:	bl	5088 <rb_current_time@plt>
   10eb8:	mov	r1, #0
   10ebc:	add	r0, r0, r4
   10ec0:	str	r1, [r5, #44]	; 0x2c
   10ec4:	str	r9, [r5, #24]
   10ec8:	str	r0, [r5, #28]
   10ecc:	str	r4, [r5, #32]
   10ed0:	ldr	r1, [pc, #140]	; 10f64 <rb_event_add_common+0x110>
   10ed4:	ldr	r1, [pc, r1]
   10ed8:	cmp	r0, r1
   10edc:	blt	10ee8 <rb_event_add_common+0x94>
   10ee0:	cmn	r1, #1
   10ee4:	bne	10ef4 <rb_event_add_common+0xa0>
   10ee8:	ldr	r1, [pc, #120]	; 10f68 <rb_event_add_common+0x114>
   10eec:	add	r1, pc, r1
   10ef0:	str	r0, [r1]
   10ef4:	ldr	r0, [pc, #112]	; 10f6c <rb_event_add_common+0x118>
   10ef8:	mov	r1, #0
   10efc:	ldr	r0, [pc, r0]
   10f00:	str	r5, [r5]
   10f04:	str	r1, [r5, #4]
   10f08:	cmp	r0, #0
   10f0c:	str	r0, [r5, #8]
   10f10:	beq	10f20 <rb_event_add_common+0xcc>
   10f14:	add	r0, r0, #4
   10f18:	str	r5, [r0]
   10f1c:	b	10f34 <rb_event_add_common+0xe0>
   10f20:	ldr	r0, [pc, #72]	; 10f70 <rb_event_add_common+0x11c>
   10f24:	add	r0, pc, r0
   10f28:	ldr	r1, [r0, #4]!
   10f2c:	cmp	r1, #0
   10f30:	streq	r5, [r0]
   10f34:	ldr	r0, [pc, #56]	; 10f74 <rb_event_add_common+0x120>
   10f38:	add	r0, pc, r0
   10f3c:	str	r5, [r0]
   10f40:	ldr	r1, [r0, #8]
   10f44:	add	r1, r1, #1
   10f48:	str	r1, [r0, #8]
   10f4c:	mov	r0, r5
   10f50:	mov	r1, r4
   10f54:	bl	f000 <rb_io_sched_event>
   10f58:	mov	r0, r5
   10f5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10f60:	bl	51fc <rb_outofmemory@plt>
   10f64:	.word	0x0001b578
   10f68:	.word	0x0001b560
   10f6c:	.word	0x0002de78
   10f70:	.word	0x0002de50
   10f74:	.word	0x0002de3c

00010f78 <rb_event_addonce>:
   10f78:	push	{r4, r5, r6, sl, fp, lr}
   10f7c:	add	fp, sp, #16
   10f80:	sub	sp, sp, #8
   10f84:	mov	r4, r2
   10f88:	mov	r5, r1
   10f8c:	mov	r6, r0
   10f90:	cmp	r3, #0
   10f94:	ble	10fb8 <rb_event_addonce+0x40>
   10f98:	mov	r0, #0
   10f9c:	mov	r1, r5
   10fa0:	mov	r2, r4
   10fa4:	str	r0, [sp]
   10fa8:	mov	r0, r6
   10fac:	bl	10e54 <rb_event_add_common>
   10fb0:	sub	sp, fp, #16
   10fb4:	pop	{r4, r5, r6, sl, fp, pc}
   10fb8:	ldr	r0, [pc, #20]	; 10fd4 <rb_event_addonce+0x5c>
   10fbc:	mov	r1, r6
   10fc0:	mov	r2, r3
   10fc4:	add	r0, pc, r0
   10fc8:	bl	519c <rb_lib_log@plt>
   10fcc:	mov	r3, #1
   10fd0:	b	10f98 <rb_event_addonce+0x20>
   10fd4:	.word	0x00009b65

00010fd8 <rb_event_delete>:
   10fd8:	cmp	r0, #0
   10fdc:	bxeq	lr
   10fe0:	mov	r1, #1
   10fe4:	str	r1, [r0, #44]	; 0x2c
   10fe8:	b	f060 <rb_io_unsched_event>

00010fec <rb_event_find_delete>:
   10fec:	ldr	r3, [pc, #60]	; 11030 <rb_event_find_delete+0x44>
   10ff0:	ldr	r3, [pc, r3]
   10ff4:	b	10ffc <rb_event_find_delete+0x10>
   10ff8:	ldr	r3, [r3, #8]
   10ffc:	cmp	r3, #0
   11000:	bxeq	lr
   11004:	ldr	ip, [r3]
   11008:	ldr	r2, [ip, #12]
   1100c:	cmp	r2, r0
   11010:	bne	10ff8 <rb_event_find_delete+0xc>
   11014:	ldr	r2, [ip, #16]
   11018:	cmp	r2, r1
   1101c:	bne	10ff8 <rb_event_find_delete+0xc>
   11020:	mov	r0, #1
   11024:	str	r0, [ip, #44]	; 0x2c
   11028:	mov	r0, ip
   1102c:	b	f060 <rb_io_unsched_event>
   11030:	.word	0x0002dd84

00011034 <rb_event_addish>:
   11034:	push	{r4, r5, r6, r7, fp, lr}
   11038:	add	fp, sp, #16
   1103c:	sub	sp, sp, #8
   11040:	mov	r6, r3
   11044:	cmp	r3, #0
   11048:	mov	r4, r2
   1104c:	mov	r5, r1
   11050:	mov	r7, r0
   11054:	rsbmi	r6, r6, #0
   11058:	cmp	r6, #2
   1105c:	rsbgt	r6, r6, #0
   11060:	cmn	r6, #1
   11064:	mov	r3, r6
   11068:	bgt	110b8 <rb_event_addish+0x84>
   1106c:	bl	5388 <rand@plt>
   11070:	movw	r1, #19923	; 0x4dd3
   11074:	movt	r1, #4194	; 0x1062
   11078:	smmul	r2, r0, r1
   1107c:	asr	r3, r2, #6
   11080:	add	r2, r3, r2, lsr #31
   11084:	mov	r3, #1000	; 0x3e8
   11088:	mls	r0, r2, r3, r0
   1108c:	mov	r2, #0
   11090:	movw	r3, #21846	; 0x5556
   11094:	sub	r2, r2, r6, lsl #1
   11098:	movt	r3, #21845	; 0x5555
   1109c:	smmul	r2, r2, r3
   110a0:	add	r2, r2, r2, lsr #31
   110a4:	mul	r0, r0, r2
   110a8:	smmul	r0, r0, r1
   110ac:	asr	r1, r0, #6
   110b0:	add	r0, r1, r0, lsr #31
   110b4:	add	r3, r0, r2
   110b8:	mov	r0, r7
   110bc:	mov	r1, r5
   110c0:	mov	r2, r4
   110c4:	str	r6, [sp]
   110c8:	bl	10e54 <rb_event_add_common>
   110cc:	sub	sp, fp, #16
   110d0:	pop	{r4, r5, r6, r7, fp, pc}

000110d4 <rb_run_one_event>:
   110d4:	push	{r4, r5, r6, sl, fp, lr}
   110d8:	add	fp, sp, #16
   110dc:	mov	r4, r0
   110e0:	ldr	r1, [r0, #20]
   110e4:	ldr	r0, [pc, #200]	; 111b4 <rb_run_one_event+0xe0>
   110e8:	mov	r2, #33	; 0x21
   110ec:	add	r0, pc, r0
   110f0:	add	r0, r0, #12
   110f4:	bl	4f50 <rb_strlcpy@plt>
   110f8:	ldr	r1, [r4, #12]
   110fc:	ldr	r0, [r4, #16]
   11100:	blx	r1
   11104:	ldr	r0, [r4, #24]
   11108:	cmp	r0, #0
   1110c:	beq	111a0 <rb_run_one_event+0xcc>
   11110:	bl	5088 <rb_current_time@plt>
   11114:	ldr	r6, [r4, #24]
   11118:	mov	r5, r0
   1111c:	cmn	r6, #1
   11120:	bgt	11170 <rb_run_one_event+0x9c>
   11124:	bl	5388 <rand@plt>
   11128:	movw	r1, #19923	; 0x4dd3
   1112c:	movt	r1, #4194	; 0x1062
   11130:	smmul	r2, r0, r1
   11134:	asr	r3, r2, #6
   11138:	add	r2, r3, r2, lsr #31
   1113c:	mov	r3, #1000	; 0x3e8
   11140:	mls	r0, r2, r3, r0
   11144:	mov	r2, #0
   11148:	movw	r3, #21846	; 0x5556
   1114c:	sub	r2, r2, r6, lsl #1
   11150:	movt	r3, #21845	; 0x5555
   11154:	smmul	r2, r2, r3
   11158:	add	r2, r2, r2, lsr #31
   1115c:	mul	r0, r0, r2
   11160:	smmul	r0, r0, r1
   11164:	asr	r1, r0, #6
   11168:	add	r0, r1, r0, lsr #31
   1116c:	add	r6, r0, r2
   11170:	add	r0, r6, r5
   11174:	str	r0, [r4, #28]
   11178:	ldr	r1, [pc, #56]	; 111b8 <rb_run_one_event+0xe4>
   1117c:	ldr	r1, [pc, r1]
   11180:	cmp	r0, r1
   11184:	blt	11190 <rb_run_one_event+0xbc>
   11188:	cmn	r1, #1
   1118c:	popne	{r4, r5, r6, sl, fp, pc}
   11190:	ldr	r1, [pc, #36]	; 111bc <rb_run_one_event+0xe8>
   11194:	add	r1, pc, r1
   11198:	str	r0, [r1]
   1119c:	pop	{r4, r5, r6, sl, fp, pc}
   111a0:	mov	r0, #1
   111a4:	str	r0, [r4, #44]	; 0x2c
   111a8:	mov	r0, r4
   111ac:	pop	{r4, r5, r6, sl, fp, lr}
   111b0:	b	f060 <rb_io_unsched_event>
   111b4:	.word	0x0002dc88
   111b8:	.word	0x0001b2d0
   111bc:	.word	0x0001b2b8

000111c0 <rb_event_run>:
   111c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111c4:	add	fp, sp, #28
   111c8:	sub	sp, sp, #4
   111cc:	bl	f0b4 <rb_io_supports_event>
   111d0:	cmp	r0, #0
   111d4:	bne	11350 <rb_event_run+0x190>
   111d8:	ldr	r1, [pc, #376]	; 11358 <rb_event_run+0x198>
   111dc:	mvn	r0, #0
   111e0:	add	r1, pc, r1
   111e4:	str	r0, [r1]
   111e8:	ldr	r7, [pc, #364]	; 1135c <rb_event_run+0x19c>
   111ec:	ldr	r7, [pc, r7]
   111f0:	cmp	r7, #0
   111f4:	beq	11350 <rb_event_run+0x190>
   111f8:	ldr	r4, [pc, #352]	; 11360 <rb_event_run+0x1a0>
   111fc:	mov	sl, #0
   11200:	add	r4, pc, r4
   11204:	add	r9, r4, #12
   11208:	ldr	r5, [r7]
   1120c:	ldr	r7, [r7, #8]
   11210:	ldr	r0, [r5, #44]	; 0x2c
   11214:	cmp	r0, #0
   11218:	beq	1127c <rb_event_run+0xbc>
   1121c:	ldr	r0, [r5, #8]
   11220:	ldr	r1, [r5, #4]
   11224:	mov	r2, r4
   11228:	cmp	r0, #0
   1122c:	streq	r1, [r4, #4]
   11230:	strne	r1, [r0, #4]
   11234:	ldrne	r1, [r5, #4]
   11238:	cmp	r1, #0
   1123c:	addne	r2, r1, #8
   11240:	str	r0, [r2]
   11244:	str	sl, [r5, #4]
   11248:	str	sl, [r5, #8]
   1124c:	ldr	r0, [r4, #8]
   11250:	sub	r0, r0, #1
   11254:	str	r0, [r4, #8]
   11258:	ldr	r0, [r5, #20]
   1125c:	cmp	r0, #0
   11260:	beq	11268 <rb_event_run+0xa8>
   11264:	bl	4f98 <free@plt>
   11268:	mov	r0, r5
   1126c:	bl	4f98 <free@plt>
   11270:	cmp	r7, #0
   11274:	bne	11208 <rb_event_run+0x48>
   11278:	b	11350 <rb_event_run+0x190>
   1127c:	ldr	r6, [r5, #28]
   11280:	bl	5088 <rb_current_time@plt>
   11284:	cmp	r6, r0
   11288:	ble	11294 <rb_event_run+0xd4>
   1128c:	ldr	r0, [r5, #28]
   11290:	b	11324 <rb_event_run+0x164>
   11294:	ldr	r1, [r5, #20]
   11298:	mov	r0, r9
   1129c:	mov	r2, #33	; 0x21
   112a0:	bl	4f50 <rb_strlcpy@plt>
   112a4:	ldr	r1, [r5, #12]
   112a8:	ldr	r0, [r5, #16]
   112ac:	blx	r1
   112b0:	ldr	r0, [r5, #24]
   112b4:	cmp	r0, #0
   112b8:	beq	1121c <rb_event_run+0x5c>
   112bc:	bl	5088 <rb_current_time@plt>
   112c0:	ldr	r8, [r5, #24]
   112c4:	mov	r6, r0
   112c8:	cmn	r8, #1
   112cc:	bgt	1131c <rb_event_run+0x15c>
   112d0:	bl	5388 <rand@plt>
   112d4:	movw	r1, #19923	; 0x4dd3
   112d8:	movt	r1, #4194	; 0x1062
   112dc:	mov	r3, r1
   112e0:	smmul	r1, r0, r1
   112e4:	asr	r2, r1, #6
   112e8:	add	r1, r2, r1, lsr #31
   112ec:	mov	r2, #1000	; 0x3e8
   112f0:	mls	r0, r1, r2, r0
   112f4:	movw	r2, #21846	; 0x5556
   112f8:	sub	r1, sl, r8, lsl #1
   112fc:	movt	r2, #21845	; 0x5555
   11300:	smmul	r1, r1, r2
   11304:	add	r1, r1, r1, lsr #31
   11308:	mul	r0, r0, r1
   1130c:	smmul	r0, r0, r3
   11310:	asr	r2, r0, #6
   11314:	add	r0, r2, r0, lsr #31
   11318:	add	r8, r0, r1
   1131c:	add	r0, r8, r6
   11320:	str	r0, [r5, #28]
   11324:	ldr	r1, [pc, #56]	; 11364 <rb_event_run+0x1a4>
   11328:	ldr	r1, [pc, r1]
   1132c:	cmp	r0, r1
   11330:	blt	1133c <rb_event_run+0x17c>
   11334:	cmn	r1, #1
   11338:	bne	11270 <rb_event_run+0xb0>
   1133c:	ldr	r1, [pc, #36]	; 11368 <rb_event_run+0x1a8>
   11340:	add	r1, pc, r1
   11344:	str	r0, [r1]
   11348:	cmp	r7, #0
   1134c:	bne	11208 <rb_event_run+0x48>
   11350:	sub	sp, fp, #28
   11354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11358:	.word	0x0001b26c
   1135c:	.word	0x0002db88
   11360:	.word	0x0002db74
   11364:	.word	0x0001b124
   11368:	.word	0x0001b10c

0001136c <rb_event_io_register_all>:
   1136c:	push	{r4, sl, fp, lr}
   11370:	add	fp, sp, #8
   11374:	bl	f0b4 <rb_io_supports_event>
   11378:	cmp	r0, #0
   1137c:	popeq	{r4, sl, fp, pc}
   11380:	ldr	r4, [pc, #36]	; 113ac <rb_event_io_register_all+0x40>
   11384:	ldr	r4, [pc, r4]
   11388:	cmp	r4, #0
   1138c:	beq	113a8 <rb_event_io_register_all+0x3c>
   11390:	ldr	r0, [r4]
   11394:	ldr	r1, [r0, #32]
   11398:	bl	f000 <rb_io_sched_event>
   1139c:	ldr	r4, [r4, #8]
   113a0:	cmp	r4, #0
   113a4:	bne	11390 <rb_event_io_register_all+0x24>
   113a8:	pop	{r4, sl, fp, pc}
   113ac:	.word	0x0002d9f0

000113b0 <rb_event_init>:
   113b0:	ldr	r0, [pc, #20]	; 113cc <rb_event_init+0x1c>
   113b4:	ldr	r1, [pc, #20]	; 113d0 <rb_event_init+0x20>
   113b8:	mov	r2, #33	; 0x21
   113bc:	add	r0, pc, r0
   113c0:	add	r1, pc, r1
   113c4:	add	r0, r0, #12
   113c8:	b	4f50 <rb_strlcpy@plt>
   113cc:	.word	0x0002d9b8
   113d0:	.word	0x000097ab

000113d4 <rb_dump_events>:
   113d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113d8:	add	fp, sp, #28
   113dc:	sub	sp, sp, #524	; 0x20c
   113e0:	mov	sl, r0
   113e4:	ldr	r0, [pc, #180]	; 114a0 <rb_dump_events+0xcc>
   113e8:	ldr	r2, [pc, #180]	; 114a4 <rb_dump_events+0xd0>
   113ec:	add	r6, sp, #8
   113f0:	mov	r9, r1
   113f4:	mov	r1, #512	; 0x200
   113f8:	add	r0, pc, r0
   113fc:	add	r2, pc, r2
   11400:	add	r3, r0, #12
   11404:	mov	r0, r6
   11408:	bl	53f4 <snprintf@plt>
   1140c:	mov	r0, r6
   11410:	mov	r1, r9
   11414:	blx	sl
   11418:	ldr	r1, [pc, #136]	; 114a8 <rb_dump_events+0xd4>
   1141c:	mov	r0, r6
   11420:	mov	r2, #512	; 0x200
   11424:	add	r1, pc, r1
   11428:	bl	4f50 <rb_strlcpy@plt>
   1142c:	mov	r0, r6
   11430:	mov	r1, r9
   11434:	blx	sl
   11438:	ldr	r4, [pc, #108]	; 114ac <rb_dump_events+0xd8>
   1143c:	ldr	r4, [pc, r4]
   11440:	cmp	r4, #0
   11444:	beq	11498 <rb_dump_events+0xc4>
   11448:	add	r6, sp, #8
   1144c:	ldr	r5, [r4]
   11450:	ldr	r7, [r5, #20]
   11454:	ldr	r8, [r5, #28]
   11458:	bl	5088 <rb_current_time@plt>
   1145c:	ldr	r1, [r5, #24]
   11460:	sub	r0, r8, r0
   11464:	mov	r3, r7
   11468:	stm	sp, {r0, r1}
   1146c:	mov	r0, r6
   11470:	mov	r1, #512	; 0x200
   11474:	ldr	r2, [pc, #52]	; 114b0 <rb_dump_events+0xdc>
   11478:	add	r2, pc, r2
   1147c:	bl	53f4 <snprintf@plt>
   11480:	mov	r0, r6
   11484:	mov	r1, r9
   11488:	blx	sl
   1148c:	ldr	r4, [r4, #8]
   11490:	cmp	r4, #0
   11494:	bne	1144c <rb_dump_events+0x78>
   11498:	sub	sp, fp, #28
   1149c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114a0:	.word	0x0002d97c
   114a4:	.word	0x00009774
   114a8:	.word	0x00009762
   114ac:	.word	0x0002d938
   114b0:	.word	0x0000973a

000114b4 <rb_set_back_events>:
   114b4:	ldr	r1, [pc, #40]	; 114e4 <rb_set_back_events+0x30>
   114b8:	ldr	r1, [pc, r1]
   114bc:	b	114d8 <rb_set_back_events+0x24>
   114c0:	ldr	r2, [r1]
   114c4:	ldr	r3, [r2, #28]
   114c8:	subs	r3, r3, r0
   114cc:	movle	r3, #0
   114d0:	str	r3, [r2, #28]
   114d4:	ldr	r1, [r1, #8]
   114d8:	cmp	r1, #0
   114dc:	bxeq	lr
   114e0:	b	114c0 <rb_set_back_events+0xc>
   114e4:	.word	0x0002d8bc

000114e8 <rb_event_update>:
   114e8:	push	{r4, r5, fp, lr}
   114ec:	add	fp, sp, #8
   114f0:	cmp	r0, #0
   114f4:	beq	11578 <rb_event_update+0x90>
   114f8:	mov	r5, r1
   114fc:	mov	r4, r0
   11500:	cmn	r1, #1
   11504:	str	r1, [r0, #24]
   11508:	bgt	11558 <rb_event_update+0x70>
   1150c:	bl	5388 <rand@plt>
   11510:	movw	r1, #19923	; 0x4dd3
   11514:	movt	r1, #4194	; 0x1062
   11518:	smmul	r2, r0, r1
   1151c:	asr	r3, r2, #6
   11520:	add	r2, r3, r2, lsr #31
   11524:	mov	r3, #1000	; 0x3e8
   11528:	mls	r0, r2, r3, r0
   1152c:	mov	r2, #0
   11530:	movw	r3, #21846	; 0x5556
   11534:	sub	r2, r2, r5, lsl #1
   11538:	movt	r3, #21845	; 0x5555
   1153c:	smmul	r2, r2, r3
   11540:	add	r2, r2, r2, lsr #31
   11544:	mul	r0, r0, r2
   11548:	smmul	r0, r0, r1
   1154c:	asr	r1, r0, #6
   11550:	add	r0, r1, r0, lsr #31
   11554:	add	r5, r0, r2
   11558:	bl	5088 <rb_current_time@plt>
   1155c:	ldr	r1, [r4, #28]
   11560:	add	r0, r0, r5
   11564:	cmp	r0, r1
   11568:	popge	{r4, r5, fp, pc}
   1156c:	bl	5088 <rb_current_time@plt>
   11570:	add	r0, r0, r5
   11574:	str	r0, [r4, #28]
   11578:	pop	{r4, r5, fp, pc}

0001157c <rb_event_next>:
   1157c:	ldr	r0, [pc, #4]	; 11588 <rb_event_next+0xc>
   11580:	ldr	r0, [pc, r0]
   11584:	bx	lr
   11588:	.word	0x0001aecc

0001158c <rb_ctime>:
   1158c:	push	{r4, r5, r6, r7, fp, lr}
   11590:	add	fp, sp, #16
   11594:	sub	sp, sp, #72	; 0x48
   11598:	mov	r6, r1
   1159c:	str	r0, [fp, #-20]	; 0xffffffec
   115a0:	sub	r0, fp, #20
   115a4:	add	r1, sp, #24
   115a8:	mov	r7, r2
   115ac:	bl	525c <gmtime_r@plt>
   115b0:	ldr	r5, [pc, #152]	; 11650 <rb_ctime+0xc4>
   115b4:	cmp	r6, #0
   115b8:	movweq	r7, #128	; 0x80
   115bc:	add	r5, pc, r5
   115c0:	movne	r5, r6
   115c4:	cmp	r0, #0
   115c8:	beq	11630 <rb_ctime+0xa4>
   115cc:	ldm	r0, {r1, r2, r3, r6, ip}
   115d0:	ldr	r4, [r0, #20]
   115d4:	ldr	r0, [r0, #24]
   115d8:	str	r1, [sp, #16]
   115dc:	movw	r1, #1900	; 0x76c
   115e0:	str	r2, [sp, #12]
   115e4:	str	r3, [sp, #8]
   115e8:	str	r6, [sp, #4]
   115ec:	add	r1, r4, r1
   115f0:	str	r1, [sp, #20]
   115f4:	ldr	r1, [pc, #92]	; 11658 <rb_ctime+0xcc>
   115f8:	add	r1, pc, r1
   115fc:	ldr	r1, [r1, ip, lsl #2]
   11600:	str	r1, [sp]
   11604:	ldr	r1, [pc, #80]	; 1165c <rb_ctime+0xd0>
   11608:	ldr	r2, [pc, #80]	; 11660 <rb_ctime+0xd4>
   1160c:	add	r1, pc, r1
   11610:	add	r2, pc, r2
   11614:	ldr	r3, [r1, r0, lsl #2]
   11618:	mov	r0, r5
   1161c:	mov	r1, r7
   11620:	bl	53f4 <snprintf@plt>
   11624:	mov	r0, r5
   11628:	sub	sp, fp, #16
   1162c:	pop	{r4, r5, r6, r7, fp, pc}
   11630:	ldr	r1, [pc, #28]	; 11654 <rb_ctime+0xc8>
   11634:	mov	r0, r5
   11638:	mov	r2, r7
   1163c:	add	r1, pc, r1
   11640:	bl	4f50 <rb_strlcpy@plt>
   11644:	mov	r0, r5
   11648:	sub	sp, fp, #16
   1164c:	pop	{r4, r5, r6, r7, fp, pc}
   11650:	.word	0x0002d7ec
   11654:	.word	0x00008c9e
   11658:	.word	0x0001a874
   1165c:	.word	0x0001a844
   11660:	.word	0x000095c5

00011664 <rb_date>:
   11664:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11668:	add	fp, sp, #24
   1166c:	sub	sp, sp, #72	; 0x48
   11670:	mov	r4, r1
   11674:	str	r0, [fp, #-28]	; 0xffffffe4
   11678:	sub	r0, fp, #28
   1167c:	add	r1, sp, #24
   11680:	mov	r8, r2
   11684:	bl	525c <gmtime_r@plt>
   11688:	cmp	r0, #0
   1168c:	beq	116f0 <rb_date+0x8c>
   11690:	ldm	r0, {r1, r2, r3, r5, r6, r7}
   11694:	ldr	r0, [r0, #24]
   11698:	str	r1, [sp, #20]
   1169c:	movw	r1, #1900	; 0x76c
   116a0:	str	r2, [sp, #16]
   116a4:	str	r3, [sp, #12]
   116a8:	str	r5, [sp, #4]
   116ac:	add	r1, r7, r1
   116b0:	str	r1, [sp, #8]
   116b4:	ldr	r1, [pc, #88]	; 11714 <rb_date+0xb0>
   116b8:	add	r1, pc, r1
   116bc:	ldr	r1, [r1, r6, lsl #2]
   116c0:	str	r1, [sp]
   116c4:	ldr	r1, [pc, #76]	; 11718 <rb_date+0xb4>
   116c8:	ldr	r2, [pc, #76]	; 1171c <rb_date+0xb8>
   116cc:	add	r1, pc, r1
   116d0:	add	r2, pc, r2
   116d4:	ldr	r3, [r1, r0, lsl #2]
   116d8:	mov	r0, r4
   116dc:	mov	r1, r8
   116e0:	bl	53f4 <snprintf@plt>
   116e4:	mov	r0, r4
   116e8:	sub	sp, fp, #24
   116ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   116f0:	ldr	r1, [pc, #24]	; 11710 <rb_date+0xac>
   116f4:	mov	r0, r4
   116f8:	mov	r2, r8
   116fc:	add	r1, pc, r1
   11700:	bl	4f50 <rb_strlcpy@plt>
   11704:	mov	r0, r4
   11708:	sub	sp, fp, #24
   1170c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11710:	.word	0x00008bde
   11714:	.word	0x0001a800
   11718:	.word	0x0001a7d0
   1171c:	.word	0x00009520

00011720 <rb_current_time>:
   11720:	ldr	r0, [pc, #8]	; 11730 <rb_current_time+0x10>
   11724:	add	r0, pc, r0
   11728:	ldr	r0, [r0, #16]
   1172c:	bx	lr
   11730:	.word	0x0002db84

00011734 <rb_current_time_tv>:
   11734:	ldr	r0, [pc, #8]	; 11744 <rb_current_time_tv+0x10>
   11738:	add	r0, pc, r0
   1173c:	add	r0, r0, #16
   11740:	bx	lr
   11744:	.word	0x0002db70

00011748 <rb_lib_log>:
   11748:	sub	sp, sp, #12
   1174c:	push	{r4, sl, fp, lr}
   11750:	add	fp, sp, #8
   11754:	sub	sp, sp, #4
   11758:	mov	ip, r0
   1175c:	add	r0, fp, #8
   11760:	stm	r0, {r1, r2, r3}
   11764:	ldr	r0, [pc, #72]	; 117b4 <rb_lib_log+0x6c>
   11768:	ldr	r0, [pc, r0]
   1176c:	cmp	r0, #0
   11770:	beq	117a4 <rb_lib_log+0x5c>
   11774:	add	r3, fp, #8
   11778:	mov	r1, #512	; 0x200
   1177c:	mov	r2, ip
   11780:	str	r3, [sp]
   11784:	ldr	r4, [pc, #44]	; 117b8 <rb_lib_log+0x70>
   11788:	add	r4, pc, r4
   1178c:	mov	r0, r4
   11790:	bl	4e24 <vsnprintf@plt>
   11794:	ldr	r1, [pc, #32]	; 117bc <rb_lib_log+0x74>
   11798:	mov	r0, r4
   1179c:	ldr	r1, [pc, r1]
   117a0:	blx	r1
   117a4:	sub	sp, fp, #8
   117a8:	pop	{r4, sl, fp, lr}
   117ac:	add	sp, sp, #12
   117b0:	bx	lr
   117b4:	.word	0x0002db40
   117b8:	.word	0x0002d6a0
   117bc:	.word	0x0002db0c

000117c0 <rb_lib_die>:
   117c0:	sub	sp, sp, #12
   117c4:	push	{r4, r5, fp, lr}
   117c8:	add	fp, sp, #8
   117cc:	sub	sp, sp, #4
   117d0:	mov	ip, r0
   117d4:	add	r0, fp, #8
   117d8:	stm	r0, {r1, r2, r3}
   117dc:	ldr	r5, [pc, #76]	; 11830 <rb_lib_die+0x70>
   117e0:	add	r5, pc, r5
   117e4:	ldr	r0, [r5, #4]
   117e8:	cmp	r0, #0
   117ec:	beq	1182c <rb_lib_die+0x6c>
   117f0:	add	r3, fp, #8
   117f4:	mov	r1, #512	; 0x200
   117f8:	mov	r2, ip
   117fc:	str	r3, [sp]
   11800:	ldr	r4, [pc, #44]	; 11834 <rb_lib_die+0x74>
   11804:	add	r4, pc, r4
   11808:	mov	r0, r4
   1180c:	bl	4e24 <vsnprintf@plt>
   11810:	ldr	r1, [r5, #4]
   11814:	mov	r0, r4
   11818:	blx	r1
   1181c:	sub	sp, fp, #8
   11820:	pop	{r4, r5, fp, lr}
   11824:	add	sp, sp, #12
   11828:	bx	lr
   1182c:	bl	4ca4 <abort@plt>
   11830:	.word	0x0002dac8
   11834:	.word	0x0002d624

00011838 <rb_lib_restart>:
   11838:	sub	sp, sp, #12
   1183c:	push	{fp, lr}
   11840:	mov	fp, sp
   11844:	sub	sp, sp, #4
   11848:	mov	ip, r0
   1184c:	add	r0, fp, #8
   11850:	stm	r0, {r1, r2, r3}
   11854:	ldr	r5, [pc, #64]	; 1189c <rb_lib_restart+0x64>
   11858:	add	r5, pc, r5
   1185c:	ldr	r0, [r5, #8]
   11860:	cmp	r0, #0
   11864:	bne	1186c <rb_lib_restart+0x34>
   11868:	bl	4ca4 <abort@plt>
   1186c:	add	r3, fp, #8
   11870:	mov	r1, #512	; 0x200
   11874:	mov	r2, ip
   11878:	str	r3, [sp]
   1187c:	ldr	r4, [pc, #28]	; 118a0 <rb_lib_restart+0x68>
   11880:	add	r4, pc, r4
   11884:	mov	r0, r4
   11888:	bl	4e24 <vsnprintf@plt>
   1188c:	ldr	r1, [r5, #8]
   11890:	mov	r0, r4
   11894:	blx	r1
   11898:	bl	4ca4 <abort@plt>
   1189c:	.word	0x0002da50
   118a0:	.word	0x0002d5a8

000118a4 <rb_set_time>:
   118a4:	push	{r4, sl, fp, lr}
   118a8:	add	fp, sp, #8
   118ac:	sub	sp, sp, #8
   118b0:	mov	r0, sp
   118b4:	mov	r1, #0
   118b8:	bl	4e84 <rb_gettimeofday@plt>
   118bc:	cmn	r0, #1
   118c0:	beq	118f4 <rb_set_time+0x50>
   118c4:	ldr	r4, [pc, #80]	; 1191c <rb_set_time+0x78>
   118c8:	ldr	r1, [sp]
   118cc:	add	r4, pc, r4
   118d0:	ldr	r0, [r4, #16]
   118d4:	cmp	r0, r1
   118d8:	ble	118e4 <rb_set_time+0x40>
   118dc:	sub	r0, r0, r1
   118e0:	bl	114b4 <rb_set_back_events>
   118e4:	ldm	sp, {r0, r1}
   118e8:	strd	r0, [r4, #16]
   118ec:	sub	sp, fp, #8
   118f0:	pop	{r4, sl, fp, pc}
   118f4:	bl	552c <__errno_location@plt>
   118f8:	ldr	r0, [r0]
   118fc:	bl	4c80 <strerror@plt>
   11900:	mov	r1, r0
   11904:	ldr	r0, [pc, #20]	; 11920 <rb_set_time+0x7c>
   11908:	add	r0, pc, r0
   1190c:	bl	519c <rb_lib_log@plt>
   11910:	ldr	r0, [pc, #12]	; 11924 <rb_set_time+0x80>
   11914:	add	r0, pc, r0
   11918:	bl	52bc <rb_lib_restart@plt>
   1191c:	.word	0x0002d9dc
   11920:	.word	0x0000930d
   11924:	.word	0x00009314

00011928 <rb_lib_version>:
   11928:	push	{r4, sl, fp, lr}
   1192c:	add	fp, sp, #8
   11930:	sub	sp, sp, #520	; 0x208
   11934:	add	r4, sp, #8
   11938:	mov	r1, #512	; 0x200
   1193c:	mov	r0, r4
   11940:	bl	10470 <rb_get_ssl_info>
   11944:	ldr	r0, [pc, #48]	; 1197c <rb_lib_version+0x54>
   11948:	mov	r1, #640	; 0x280
   1194c:	ldr	r0, [pc, r0]
   11950:	str	r4, [sp]
   11954:	ldr	r3, [r0]
   11958:	ldr	r4, [pc, #32]	; 11980 <rb_lib_version+0x58>
   1195c:	ldr	r2, [pc, #32]	; 11984 <rb_lib_version+0x5c>
   11960:	add	r4, pc, r4
   11964:	add	r2, pc, r2
   11968:	mov	r0, r4
   1196c:	bl	53f4 <snprintf@plt>
   11970:	mov	r0, r4
   11974:	sub	sp, fp, #8
   11978:	pop	{r4, sl, fp, pc}
   1197c:	.word	0x0001aa20
   11980:	.word	0x0002d6c8
   11984:	.word	0x000092d2

00011988 <rb_lib_init>:
   11988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1198c:	add	fp, sp, #28
   11990:	sub	sp, sp, #12
   11994:	mov	r6, r1
   11998:	mov	r5, r0
   1199c:	mov	r0, sp
   119a0:	mov	r1, #0
   119a4:	mov	r4, r3
   119a8:	mov	r7, r2
   119ac:	bl	4e84 <rb_gettimeofday@plt>
   119b0:	cmn	r0, #1
   119b4:	beq	11a2c <rb_lib_init+0xa4>
   119b8:	ldr	r8, [pc, #148]	; 11a54 <rb_lib_init+0xcc>
   119bc:	ldr	r1, [sp]
   119c0:	ldr	r9, [fp, #16]
   119c4:	ldr	sl, [fp, #8]
   119c8:	add	r8, pc, r8
   119cc:	ldr	r0, [r8, #16]
   119d0:	cmp	r0, r1
   119d4:	ble	119e0 <rb_lib_init+0x58>
   119d8:	sub	r0, r0, r1
   119dc:	bl	114b4 <rb_set_back_events>
   119e0:	ldm	sp, {r0, r1}
   119e4:	strd	r0, [r8, #16]
   119e8:	stm	r8, {r5, r7}
   119ec:	str	r6, [r8, #8]
   119f0:	bl	4ec0 <rb_event_init@plt>
   119f4:	bl	5244 <rb_init_bh@plt>
   119f8:	mov	r0, r4
   119fc:	mov	r1, sl
   11a00:	mov	r2, r9
   11a04:	bl	534c <rb_fdlist_init@plt>
   11a08:	bl	4c68 <rb_init_netio@plt>
   11a0c:	ldr	r0, [fp, #12]
   11a10:	bl	5160 <rb_init_rb_dlink_nodes@plt>
   11a14:	bl	f0b4 <rb_io_supports_event>
   11a18:	cmp	r0, #0
   11a1c:	beq	11a24 <rb_lib_init+0x9c>
   11a20:	bl	f0d4 <rb_io_init_event>
   11a24:	sub	sp, fp, #28
   11a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a2c:	bl	552c <__errno_location@plt>
   11a30:	ldr	r0, [r0]
   11a34:	bl	4c80 <strerror@plt>
   11a38:	mov	r1, r0
   11a3c:	ldr	r0, [pc, #20]	; 11a58 <rb_lib_init+0xd0>
   11a40:	add	r0, pc, r0
   11a44:	bl	519c <rb_lib_log@plt>
   11a48:	ldr	r0, [pc, #12]	; 11a5c <rb_lib_init+0xd4>
   11a4c:	add	r0, pc, r0
   11a50:	bl	52bc <rb_lib_restart@plt>
   11a54:	.word	0x0002d8e0
   11a58:	.word	0x000091d5
   11a5c:	.word	0x000091dc

00011a60 <rb_lib_loop>:
   11a60:	push	{fp, lr}
   11a64:	mov	fp, sp
   11a68:	sub	sp, sp, #8
   11a6c:	mov	r4, r0
   11a70:	mov	r0, sp
   11a74:	mov	r1, #0
   11a78:	bl	4e84 <rb_gettimeofday@plt>
   11a7c:	cmn	r0, #1
   11a80:	beq	11b24 <rb_lib_loop+0xc4>
   11a84:	ldr	r5, [pc, #192]	; 11b4c <rb_lib_loop+0xec>
   11a88:	ldr	r1, [sp]
   11a8c:	add	r5, pc, r5
   11a90:	ldr	r0, [r5, #16]
   11a94:	cmp	r0, r1
   11a98:	ble	11aa4 <rb_lib_loop+0x44>
   11a9c:	sub	r0, r0, r1
   11aa0:	bl	114b4 <rb_set_back_events>
   11aa4:	ldm	sp, {r0, r1}
   11aa8:	strd	r0, [r5, #16]
   11aac:	bl	f0b4 <rb_io_supports_event>
   11ab0:	cmp	r0, #0
   11ab4:	beq	11ac4 <rb_lib_loop+0x64>
   11ab8:	mvn	r0, #0
   11abc:	bl	4e18 <rb_select@plt>
   11ac0:	b	11ab8 <rb_lib_loop+0x58>
   11ac4:	cmp	r4, #0
   11ac8:	beq	11adc <rb_lib_loop+0x7c>
   11acc:	mov	r0, r4
   11ad0:	bl	4e18 <rb_select@plt>
   11ad4:	bl	522c <rb_event_run@plt>
   11ad8:	b	11acc <rb_lib_loop+0x6c>
   11adc:	mov	r4, #1000	; 0x3e8
   11ae0:	bl	5478 <rb_event_next@plt>
   11ae4:	cmp	r0, #1
   11ae8:	bge	11b04 <rb_lib_loop+0xa4>
   11aec:	b	11b1c <rb_lib_loop+0xbc>
   11af0:	bl	4e18 <rb_select@plt>
   11af4:	bl	522c <rb_event_run@plt>
   11af8:	bl	5478 <rb_event_next@plt>
   11afc:	cmp	r0, #1
   11b00:	blt	11b1c <rb_lib_loop+0xbc>
   11b04:	ldr	r1, [r5, #16]
   11b08:	sub	r1, r0, r1
   11b0c:	mul	r0, r1, r4
   11b10:	cmp	r1, #1
   11b14:	movwlt	r0, #1000	; 0x3e8
   11b18:	b	11af0 <rb_lib_loop+0x90>
   11b1c:	mvn	r0, #0
   11b20:	b	11af0 <rb_lib_loop+0x90>
   11b24:	bl	552c <__errno_location@plt>
   11b28:	ldr	r0, [r0]
   11b2c:	bl	4c80 <strerror@plt>
   11b30:	mov	r1, r0
   11b34:	ldr	r0, [pc, #20]	; 11b50 <rb_lib_loop+0xf0>
   11b38:	add	r0, pc, r0
   11b3c:	bl	519c <rb_lib_log@plt>
   11b40:	ldr	r0, [pc, #12]	; 11b54 <rb_lib_loop+0xf4>
   11b44:	add	r0, pc, r0
   11b48:	bl	52bc <rb_lib_restart@plt>
   11b4c:	.word	0x0002d81c
   11b50:	.word	0x000090dd
   11b54:	.word	0x000090e4

00011b58 <rb_strtok_r>:
   11b58:	b	52b0 <strtok_r@plt>

00011b5c <rb_base64_encode>:
   11b5c:	push	{r4, r5, r6, sl, fp, lr}
   11b60:	add	fp, sp, #16
   11b64:	mov	r4, r0
   11b68:	mov	r0, #0
   11b6c:	cmn	r1, #2
   11b70:	poplt	{r4, r5, r6, sl, fp, pc}
   11b74:	mov	r6, r1
   11b78:	add	r0, r1, #2
   11b7c:	movw	r1, #21846	; 0x5556
   11b80:	movt	r1, #21845	; 0x5555
   11b84:	smmul	r0, r0, r1
   11b88:	add	r0, r0, r0, lsr #31
   11b8c:	add	r1, r0, r0, lsl #2
   11b90:	mov	r0, #1
   11b94:	bl	4ea8 <calloc@plt>
   11b98:	cmp	r0, #0
   11b9c:	beq	11ca0 <rb_base64_encode+0x144>
   11ba0:	cmp	r6, #3
   11ba4:	blt	11c28 <rb_base64_encode+0xcc>
   11ba8:	ldr	ip, [pc, #244]	; 11ca4 <rb_base64_encode+0x148>
   11bac:	mov	r1, r0
   11bb0:	add	ip, pc, ip
   11bb4:	ldrb	r3, [r4]
   11bb8:	cmp	r6, #5
   11bbc:	ldrb	r2, [ip, r3, lsr #2]
   11bc0:	strb	r2, [r1]
   11bc4:	and	r2, r3, #3
   11bc8:	ldrb	r3, [r4, #1]
   11bcc:	lsr	r5, r3, #4
   11bd0:	and	r3, r3, #15
   11bd4:	orr	r2, r5, r2, lsl #4
   11bd8:	ldrb	r2, [ip, r2]
   11bdc:	strb	r2, [r1, #1]
   11be0:	ldrb	r2, [r4, #2]
   11be4:	add	r4, r4, #3
   11be8:	and	r5, r2, #63	; 0x3f
   11bec:	lsr	r2, r2, #6
   11bf0:	orr	r2, r2, r3, lsl #2
   11bf4:	ldrb	r5, [ip, r5]
   11bf8:	sub	r3, r6, #3
   11bfc:	ldrb	r2, [ip, r2]
   11c00:	mov	r6, r3
   11c04:	strb	r5, [r1, #3]
   11c08:	strb	r2, [r1, #2]
   11c0c:	add	r1, r1, #4
   11c10:	bgt	11bb4 <rb_base64_encode+0x58>
   11c14:	cmp	r3, #0
   11c18:	bne	11c38 <rb_base64_encode+0xdc>
   11c1c:	mov	r2, #0
   11c20:	strb	r2, [r1]
   11c24:	pop	{r4, r5, r6, sl, fp, pc}
   11c28:	mov	r3, r6
   11c2c:	mov	r1, r0
   11c30:	cmp	r3, #0
   11c34:	beq	11c1c <rb_base64_encode+0xc0>
   11c38:	ldrb	r6, [r4]
   11c3c:	ldr	r2, [pc, #100]	; 11ca8 <rb_base64_encode+0x14c>
   11c40:	cmp	r3, #2
   11c44:	add	r2, pc, r2
   11c48:	ldrb	r5, [r2, r6, lsr #2]
   11c4c:	strb	r5, [r1]
   11c50:	mov	r5, #48	; 0x30
   11c54:	and	r5, r5, r6, lsl #4
   11c58:	blt	11c78 <rb_base64_encode+0x11c>
   11c5c:	ldrb	r3, [r4, #1]
   11c60:	and	r6, r3, #15
   11c64:	orr	r3, r5, r3, lsr #4
   11c68:	ldrb	r6, [r2, r6, lsl #2]
   11c6c:	ldrb	r2, [r2, r3]
   11c70:	strb	r6, [r1, #2]
   11c74:	b	11c84 <rb_base64_encode+0x128>
   11c78:	ldrb	r2, [r2, r5]
   11c7c:	mov	r3, #61	; 0x3d
   11c80:	strb	r3, [r1, #2]
   11c84:	strb	r2, [r1, #1]
   11c88:	mov	r2, #61	; 0x3d
   11c8c:	strb	r2, [r1, #3]
   11c90:	add	r1, r1, #4
   11c94:	mov	r2, #0
   11c98:	strb	r2, [r1]
   11c9c:	pop	{r4, r5, r6, sl, fp, pc}
   11ca0:	bl	51fc <rb_outofmemory@plt>
   11ca4:	.word	0x0000909d
   11ca8:	.word	0x00009009

00011cac <rb_base64_decode>:
   11cac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11cb0:	add	fp, sp, #24
   11cb4:	mov	r5, r1
   11cb8:	mov	r6, r0
   11cbc:	add	r1, r1, #1
   11cc0:	mov	r0, #1
   11cc4:	mov	r8, r2
   11cc8:	bl	4ea8 <calloc@plt>
   11ccc:	cmp	r0, #0
   11cd0:	beq	11de8 <rb_base64_decode+0x13c>
   11cd4:	ldr	r3, [pc, #272]	; 11dec <rb_base64_decode+0x140>
   11cd8:	mov	r1, #0
   11cdc:	mov	r2, #0
   11ce0:	add	r3, pc, r3
   11ce4:	b	11cf4 <rb_base64_decode+0x48>
   11ce8:	strb	r7, [r0, r1]
   11cec:	mov	r1, ip
   11cf0:	add	r2, r2, #1
   11cf4:	ldrb	r4, [r6], #1
   11cf8:	cmp	r4, #0
   11cfc:	beq	11dd8 <rb_base64_decode+0x12c>
   11d00:	subs	r5, r5, #1
   11d04:	blt	11d94 <rb_base64_decode+0xe8>
   11d08:	cmp	r4, #61	; 0x3d
   11d0c:	beq	11d94 <rb_base64_decode+0xe8>
   11d10:	add	r7, r3, r4, lsl #1
   11d14:	ldrsh	r4, [r7]
   11d18:	cmp	r4, #0
   11d1c:	blt	11cf4 <rb_base64_decode+0x48>
   11d20:	and	r7, r2, #3
   11d24:	cmp	r7, #1
   11d28:	beq	11d6c <rb_base64_decode+0xc0>
   11d2c:	cmp	r7, #2
   11d30:	beq	11d54 <rb_base64_decode+0xa8>
   11d34:	cmp	r7, #3
   11d38:	bne	11d84 <rb_base64_decode+0xd8>
   11d3c:	ldrb	r7, [r0, r1]
   11d40:	add	r2, r2, #1
   11d44:	orr	r7, r7, r4
   11d48:	strb	r7, [r0, r1]
   11d4c:	add	r1, r1, #1
   11d50:	b	11cf4 <rb_base64_decode+0x48>
   11d54:	add	ip, r1, #1
   11d58:	lsl	r7, r4, #6
   11d5c:	strb	r7, [r0, ip]
   11d60:	ldrb	r7, [r0, r1]
   11d64:	orr	r7, r7, r4, lsr #2
   11d68:	b	11ce8 <rb_base64_decode+0x3c>
   11d6c:	add	ip, r1, #1
   11d70:	lsl	r7, r4, #4
   11d74:	strb	r7, [r0, ip]
   11d78:	ldrb	r7, [r0, r1]
   11d7c:	orr	r7, r7, r4, lsr #4
   11d80:	b	11ce8 <rb_base64_decode+0x3c>
   11d84:	lsl	r7, r4, #2
   11d88:	add	r2, r2, #1
   11d8c:	strb	r7, [r0, r1]
   11d90:	b	11cf4 <rb_base64_decode+0x48>
   11d94:	cmp	r4, #61	; 0x3d
   11d98:	bne	11dd8 <rb_base64_decode+0x12c>
   11d9c:	and	r2, r2, #3
   11da0:	cmp	r2, #3
   11da4:	beq	11dc4 <rb_base64_decode+0x118>
   11da8:	cmp	r2, #2
   11dac:	beq	11dcc <rb_base64_decode+0x120>
   11db0:	cmp	r2, #1
   11db4:	bne	11dd8 <rb_base64_decode+0x12c>
   11db8:	bl	4f98 <free@plt>
   11dbc:	mov	r0, #0
   11dc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11dc4:	mov	r2, r1
   11dc8:	b	11dd0 <rb_base64_decode+0x124>
   11dcc:	add	r2, r1, #1
   11dd0:	mov	r3, #0
   11dd4:	strb	r3, [r0, r2]
   11dd8:	mov	r2, #0
   11ddc:	strb	r2, [r0, r1]
   11de0:	str	r1, [r8]
   11de4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11de8:	bl	51fc <rb_outofmemory@plt>
   11dec:	.word	0x00009086

00011df0 <rb_outofmemory>:
   11df0:	push	{fp, lr}
   11df4:	mov	fp, sp
   11df8:	ldr	r0, [pc, #48]	; 11e30 <rb_outofmemory+0x40>
   11dfc:	add	r0, pc, r0
   11e00:	ldrb	r1, [r0]
   11e04:	cmp	r1, #1
   11e08:	bne	11e10 <rb_outofmemory+0x20>
   11e0c:	bl	4ca4 <abort@plt>
   11e10:	mov	r1, #1
   11e14:	strb	r1, [r0]
   11e18:	ldr	r0, [pc, #20]	; 11e34 <rb_outofmemory+0x44>
   11e1c:	add	r0, pc, r0
   11e20:	bl	519c <rb_lib_log@plt>
   11e24:	ldr	r0, [pc, #12]	; 11e38 <rb_outofmemory+0x48>
   11e28:	add	r0, pc, r0
   11e2c:	bl	52bc <rb_lib_restart@plt>
   11e30:	.word	0x0002d4c4
   11e34:	.word	0x0000914a
   11e38:	.word	0x00009162

00011e3c <rb_linebuf_init>:
   11e3c:	push	{fp, lr}
   11e40:	mov	fp, sp
   11e44:	ldr	r2, [pc, #28]	; 11e68 <rb_linebuf_init+0x2c>
   11e48:	mov	r1, r0
   11e4c:	movw	r0, #1036	; 0x40c
   11e50:	add	r2, pc, r2
   11e54:	bl	5304 <rb_bh_create@plt>
   11e58:	ldr	r1, [pc, #12]	; 11e6c <rb_linebuf_init+0x30>
   11e5c:	add	r1, pc, r1
   11e60:	str	r0, [r1]
   11e64:	pop	{fp, pc}
   11e68:	.word	0x00009148
   11e6c:	.word	0x0002f46c

00011e70 <rb_linebuf_newbuf>:
   11e70:	vmov.i32	q8, #0	; 0x00000000
   11e74:	mov	r1, #12
   11e78:	vst1.32	{d16-d17}, [r0], r1
   11e7c:	vst1.32	{d16-d17}, [r0]
   11e80:	bx	lr

00011e84 <rb_linebuf_donebuf>:
   11e84:	push	{r4, r5, r6, r7, fp, lr}
   11e88:	add	fp, sp, #16
   11e8c:	mov	r4, r0
   11e90:	ldr	r0, [r0]
   11e94:	cmp	r0, #0
   11e98:	popeq	{r4, r5, r6, r7, fp, pc}
   11e9c:	ldr	r7, [pc, #188]	; 11f60 <rb_linebuf_donebuf+0xdc>
   11ea0:	mov	r6, #0
   11ea4:	add	r7, pc, r7
   11ea8:	ldr	r1, [r0, #8]
   11eac:	ldr	r2, [r0, #4]
   11eb0:	ldr	r5, [r0]
   11eb4:	mov	r3, r4
   11eb8:	cmp	r1, #0
   11ebc:	streq	r2, [r4, #4]
   11ec0:	strne	r2, [r1, #4]
   11ec4:	ldrne	r2, [r0, #4]
   11ec8:	cmp	r2, #0
   11ecc:	addne	r3, r2, #8
   11ed0:	str	r1, [r3]
   11ed4:	str	r6, [r0, #4]
   11ed8:	str	r6, [r0, #8]
   11edc:	ldr	r1, [r4, #8]
   11ee0:	sub	r1, r1, #1
   11ee4:	str	r1, [r4, #8]
   11ee8:	bl	50dc <rb_free_rb_dlink_node@plt>
   11eec:	ldr	r1, [r4, #16]
   11ef0:	ldr	r2, [r4, #24]
   11ef4:	ldr	r0, [r4, #12]
   11ef8:	sub	r1, r1, #1
   11efc:	sub	r2, r2, #1
   11f00:	str	r1, [r4, #16]
   11f04:	ldr	r1, [r5, #1028]	; 0x404
   11f08:	str	r2, [r4, #24]
   11f0c:	sub	r0, r0, r1
   11f10:	str	r0, [r4, #12]
   11f14:	ldr	r0, [r5, #1032]	; 0x408
   11f18:	subs	r0, r0, #1
   11f1c:	str	r0, [r5, #1032]	; 0x408
   11f20:	beq	11f34 <rb_linebuf_donebuf+0xb0>
   11f24:	ldr	r0, [r4]
   11f28:	cmp	r0, #0
   11f2c:	bne	11ea8 <rb_linebuf_donebuf+0x24>
   11f30:	b	11f5c <rb_linebuf_donebuf+0xd8>
   11f34:	ldr	r0, [r7, #4]
   11f38:	mov	r1, r5
   11f3c:	sub	r0, r0, #1
   11f40:	str	r0, [r7, #4]
   11f44:	ldr	r0, [pc, #24]	; 11f64 <rb_linebuf_donebuf+0xe0>
   11f48:	ldr	r0, [pc, r0]
   11f4c:	bl	5154 <rb_bh_free@plt>
   11f50:	ldr	r0, [r4]
   11f54:	cmp	r0, #0
   11f58:	bne	11ea8 <rb_linebuf_donebuf+0x24>
   11f5c:	pop	{r4, r5, r6, r7, fp, pc}
   11f60:	.word	0x0002f424
   11f64:	.word	0x0002f380

00011f68 <rb_linebuf_parse>:
   11f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f6c:	add	fp, sp, #28
   11f70:	sub	sp, sp, #4
   11f74:	mov	r9, r0
   11f78:	ldr	r0, [r0, #4]
   11f7c:	mov	r8, r3
   11f80:	mov	r4, r2
   11f84:	mov	r5, r1
   11f88:	cmp	r0, #0
   11f8c:	beq	120b0 <rb_linebuf_parse+0x148>
   11f90:	ldr	r1, [r0]
   11f94:	mov	r0, r9
   11f98:	mov	r2, r5
   11f9c:	mov	r3, r4
   11fa0:	cmp	r8, #0
   11fa4:	beq	120c0 <rb_linebuf_parse+0x158>
   11fa8:	bl	123e8 <rb_linebuf_copy_raw>
   11fac:	cmn	r0, #1
   11fb0:	beq	120cc <rb_linebuf_parse+0x164>
   11fb4:	mov	r7, #1
   11fb8:	cmp	r0, r4
   11fbc:	beq	121b4 <rb_linebuf_parse+0x24c>
   11fc0:	add	r5, r5, r0
   11fc4:	sub	r4, r4, r0
   11fc8:	mov	r7, #1
   11fcc:	cmp	r4, #1
   11fd0:	blt	121b4 <rb_linebuf_parse+0x24c>
   11fd4:	cmp	r8, #0
   11fd8:	beq	120dc <rb_linebuf_parse+0x174>
   11fdc:	ldr	r8, [pc, #492]	; 121d0 <rb_linebuf_parse+0x268>
   11fe0:	mov	sl, #0
   11fe4:	add	r8, pc, r8
   11fe8:	ldr	r0, [pc, #484]	; 121d4 <rb_linebuf_parse+0x26c>
   11fec:	ldr	r0, [pc, r0]
   11ff0:	bl	51cc <rb_bh_alloc@plt>
   11ff4:	mov	r6, r0
   11ff8:	cmp	r0, #0
   11ffc:	beq	12074 <rb_linebuf_parse+0x10c>
   12000:	ldr	r0, [r8, #4]
   12004:	add	r0, r0, #1
   12008:	str	r0, [r8, #4]
   1200c:	bl	53c4 <rb_make_rb_dlink_node@plt>
   12010:	str	r6, [r0]
   12014:	str	sl, [r0, #8]
   12018:	ldr	r1, [r9, #4]
   1201c:	cmp	r1, #0
   12020:	str	r1, [r0, #4]
   12024:	beq	12034 <rb_linebuf_parse+0xcc>
   12028:	add	r1, r1, #8
   1202c:	str	r0, [r1]
   12030:	b	12040 <rb_linebuf_parse+0xd8>
   12034:	ldr	r1, [r9]
   12038:	cmp	r1, #0
   1203c:	beq	120a8 <rb_linebuf_parse+0x140>
   12040:	str	r0, [r9, #4]
   12044:	ldr	r0, [r9, #8]
   12048:	add	r0, r0, #1
   1204c:	str	r0, [r9, #8]
   12050:	ldr	r0, [r6, #1032]	; 0x408
   12054:	add	r0, r0, #1
   12058:	str	r0, [r6, #1032]	; 0x408
   1205c:	ldr	r0, [r9, #16]
   12060:	ldr	r1, [r9, #24]
   12064:	add	r0, r0, #1
   12068:	str	r0, [r9, #16]
   1206c:	add	r0, r1, #1
   12070:	str	r0, [r9, #24]
   12074:	mov	r0, r9
   12078:	mov	r1, r6
   1207c:	mov	r2, r5
   12080:	mov	r3, r4
   12084:	bl	123e8 <rb_linebuf_copy_raw>
   12088:	cmn	r0, #1
   1208c:	beq	121b0 <rb_linebuf_parse+0x248>
   12090:	sub	r4, r4, r0
   12094:	add	r5, r5, r0
   12098:	add	r7, r7, #1
   1209c:	cmp	r4, #0
   120a0:	bgt	11fe8 <rb_linebuf_parse+0x80>
   120a4:	b	121b4 <rb_linebuf_parse+0x24c>
   120a8:	mov	r1, r9
   120ac:	b	1202c <rb_linebuf_parse+0xc4>
   120b0:	mov	r7, #0
   120b4:	cmp	r4, #1
   120b8:	bge	11fd4 <rb_linebuf_parse+0x6c>
   120bc:	b	121b4 <rb_linebuf_parse+0x24c>
   120c0:	bl	121e0 <rb_linebuf_copy_line>
   120c4:	cmn	r0, #1
   120c8:	bne	11fb4 <rb_linebuf_parse+0x4c>
   120cc:	mvn	r7, #0
   120d0:	mov	r0, r7
   120d4:	sub	sp, fp, #28
   120d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120dc:	ldr	r6, [pc, #244]	; 121d8 <rb_linebuf_parse+0x270>
   120e0:	mov	sl, #0
   120e4:	add	r6, pc, r6
   120e8:	ldr	r0, [pc, #236]	; 121dc <rb_linebuf_parse+0x274>
   120ec:	ldr	r0, [pc, r0]
   120f0:	bl	51cc <rb_bh_alloc@plt>
   120f4:	mov	r8, r0
   120f8:	cmp	r0, #0
   120fc:	beq	12174 <rb_linebuf_parse+0x20c>
   12100:	ldr	r0, [r6, #4]
   12104:	add	r0, r0, #1
   12108:	str	r0, [r6, #4]
   1210c:	bl	53c4 <rb_make_rb_dlink_node@plt>
   12110:	str	r8, [r0]
   12114:	str	sl, [r0, #8]
   12118:	ldr	r1, [r9, #4]
   1211c:	cmp	r1, #0
   12120:	str	r1, [r0, #4]
   12124:	beq	12134 <rb_linebuf_parse+0x1cc>
   12128:	add	r1, r1, #8
   1212c:	str	r0, [r1]
   12130:	b	12140 <rb_linebuf_parse+0x1d8>
   12134:	ldr	r1, [r9]
   12138:	cmp	r1, #0
   1213c:	beq	121a8 <rb_linebuf_parse+0x240>
   12140:	str	r0, [r9, #4]
   12144:	ldr	r0, [r9, #8]
   12148:	add	r0, r0, #1
   1214c:	str	r0, [r9, #8]
   12150:	ldr	r0, [r8, #1032]	; 0x408
   12154:	add	r0, r0, #1
   12158:	str	r0, [r8, #1032]	; 0x408
   1215c:	ldr	r0, [r9, #16]
   12160:	ldr	r1, [r9, #24]
   12164:	add	r0, r0, #1
   12168:	str	r0, [r9, #16]
   1216c:	add	r0, r1, #1
   12170:	str	r0, [r9, #24]
   12174:	mov	r0, r9
   12178:	mov	r1, r8
   1217c:	mov	r2, r5
   12180:	mov	r3, r4
   12184:	bl	121e0 <rb_linebuf_copy_line>
   12188:	cmn	r0, #1
   1218c:	beq	121c0 <rb_linebuf_parse+0x258>
   12190:	sub	r4, r4, r0
   12194:	add	r5, r5, r0
   12198:	add	r7, r7, #1
   1219c:	cmp	r4, #0
   121a0:	bgt	120e8 <rb_linebuf_parse+0x180>
   121a4:	b	121b4 <rb_linebuf_parse+0x24c>
   121a8:	mov	r1, r9
   121ac:	b	1212c <rb_linebuf_parse+0x1c4>
   121b0:	mvn	r7, #0
   121b4:	mov	r0, r7
   121b8:	sub	sp, fp, #28
   121bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121c0:	mvn	r7, #0
   121c4:	mov	r0, r7
   121c8:	sub	sp, fp, #28
   121cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121d0:	.word	0x0002f2e4
   121d4:	.word	0x0002f2dc
   121d8:	.word	0x0002f1e4
   121dc:	.word	0x0002f1dc

000121e0 <rb_linebuf_copy_line>:
   121e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   121e4:	add	fp, sp, #24
   121e8:	mov	r7, #0
   121ec:	mov	r8, r0
   121f0:	strb	r7, [r1, #1026]	; 0x402
   121f4:	ldrb	r0, [r1, #1025]	; 0x401
   121f8:	cmp	r0, #1
   121fc:	beq	123e0 <rb_linebuf_copy_line+0x200>
   12200:	ldr	r9, [r1, #1028]	; 0x404
   12204:	mov	r4, r1
   12208:	mov	r7, #0
   1220c:	cmp	r3, #0
   12210:	beq	12284 <rb_linebuf_copy_line+0xa4>
   12214:	rsb	r0, r3, #0
   12218:	add	r1, r2, #1
   1221c:	ldrb	r5, [r1, #-1]
   12220:	cmp	r5, #13
   12224:	cmpne	r5, #10
   12228:	beq	1223c <rb_linebuf_copy_line+0x5c>
   1222c:	adds	r0, r0, #1
   12230:	add	r1, r1, #1
   12234:	bne	1221c <rb_linebuf_copy_line+0x3c>
   12238:	b	12284 <rb_linebuf_copy_line+0xa4>
   1223c:	add	r6, r0, #1
   12240:	mov	r7, #0
   12244:	uxtb	r5, r5
   12248:	cmp	r5, #13
   1224c:	cmpne	r5, #10
   12250:	beq	12270 <rb_linebuf_copy_line+0x90>
   12254:	b	12280 <rb_linebuf_copy_line+0xa0>
   12258:	ldrb	r5, [r1, -r7]
   1225c:	sub	r7, r7, #1
   12260:	uxtb	r5, r5
   12264:	cmp	r5, #13
   12268:	cmpne	r5, #10
   1226c:	bne	12280 <rb_linebuf_copy_line+0xa0>
   12270:	cmp	r6, r7
   12274:	bne	12258 <rb_linebuf_copy_line+0x78>
   12278:	mov	r7, #0
   1227c:	b	12284 <rb_linebuf_copy_line+0xa4>
   12280:	sub	r7, r7, r0
   12284:	sub	r7, r3, r7
   12288:	cmn	r7, #1
   1228c:	mvneq	r7, #0
   12290:	moveq	r0, r7
   12294:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   12298:	movw	r0, #1022	; 0x3fe
   1229c:	add	r6, r4, r9
   122a0:	sub	r5, r0, r9
   122a4:	cmp	r7, r5
   122a8:	ble	1231c <rb_linebuf_copy_line+0x13c>
   122ac:	mov	r1, r2
   122b0:	mov	r0, r6
   122b4:	mov	r2, r5
   122b8:	bl	50a0 <memcpy@plt>
   122bc:	mov	r0, #0
   122c0:	cmp	r5, #0
   122c4:	strb	r0, [r4, #1022]	; 0x3fe
   122c8:	beq	122f8 <rb_linebuf_copy_line+0x118>
   122cc:	movw	r1, #1022	; 0x3fe
   122d0:	movw	r2, #1021	; 0x3fd
   122d4:	sub	r1, r9, r1
   122d8:	add	r2, r4, r2
   122dc:	ldrb	r3, [r2]
   122e0:	cmp	r3, #13
   122e4:	cmpne	r3, #10
   122e8:	bne	122f8 <rb_linebuf_copy_line+0x118>
   122ec:	strb	r0, [r2], #-1
   122f0:	adds	r1, r1, #1
   122f4:	bne	122dc <rb_linebuf_copy_line+0xfc>
   122f8:	movw	r0, #1022	; 0x3fe
   122fc:	mov	r1, #1
   12300:	str	r0, [r4, #1028]	; 0x404
   12304:	strb	r1, [r4, #1025]	; 0x401
   12308:	ldr	r1, [r8, #12]
   1230c:	add	r0, r1, r0
   12310:	str	r0, [r8, #12]
   12314:	mov	r0, r7
   12318:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1231c:	mov	r1, r2
   12320:	mov	r0, r6
   12324:	mov	r2, r7
   12328:	bl	50a0 <memcpy@plt>
   1232c:	mov	r0, #0
   12330:	mov	r1, r6
   12334:	strb	r0, [r1, r7]!
   12338:	ldrb	r2, [r1, #-1]
   1233c:	cmp	r2, #10
   12340:	cmpne	r2, #13
   12344:	bne	1239c <rb_linebuf_copy_line+0x1bc>
   12348:	cmp	r7, #0
   1234c:	beq	123c0 <rb_linebuf_copy_line+0x1e0>
   12350:	sub	r1, r6, #2
   12354:	mov	r6, r7
   12358:	uxtb	r0, r2
   1235c:	cmp	r0, #13
   12360:	cmpne	r0, #10
   12364:	beq	12384 <rb_linebuf_copy_line+0x1a4>
   12368:	b	123bc <rb_linebuf_copy_line+0x1dc>
   1236c:	ldrb	r2, [r1, r6]
   12370:	mov	r6, r3
   12374:	uxtb	r0, r2
   12378:	cmp	r0, #13
   1237c:	cmpne	r0, #10
   12380:	bne	123bc <rb_linebuf_copy_line+0x1dc>
   12384:	add	r2, r1, r6
   12388:	mov	r0, #0
   1238c:	subs	r3, r6, #1
   12390:	strb	r0, [r2, #1]
   12394:	bne	1236c <rb_linebuf_copy_line+0x18c>
   12398:	b	123c0 <rb_linebuf_copy_line+0x1e0>
   1239c:	ldr	r0, [r8, #12]
   123a0:	add	r0, r0, r7
   123a4:	str	r0, [r8, #12]
   123a8:	mov	r0, #0
   123ac:	strb	r0, [r4, #1025]	; 0x401
   123b0:	ldr	r0, [r4, #1028]	; 0x404
   123b4:	add	r0, r0, r7
   123b8:	b	123dc <rb_linebuf_copy_line+0x1fc>
   123bc:	mov	r0, r6
   123c0:	mov	r1, #1
   123c4:	strb	r1, [r4, #1025]	; 0x401
   123c8:	ldr	r1, [r8, #12]
   123cc:	add	r1, r1, r0
   123d0:	str	r1, [r8, #12]
   123d4:	ldr	r1, [r4, #1028]	; 0x404
   123d8:	add	r0, r1, r0
   123dc:	str	r0, [r4, #1028]	; 0x404
   123e0:	mov	r0, r7
   123e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000123e8 <rb_linebuf_copy_raw>:
   123e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   123ec:	add	fp, sp, #24
   123f0:	mov	r8, r0
   123f4:	mov	r0, #1
   123f8:	mov	r6, #0
   123fc:	strb	r0, [r1, #1026]	; 0x402
   12400:	ldrb	r0, [r1, #1025]	; 0x401
   12404:	cmp	r0, #1
   12408:	beq	12550 <rb_linebuf_copy_raw+0x168>
   1240c:	ldr	ip, [r1, #1028]	; 0x404
   12410:	mov	r4, r1
   12414:	mov	r6, #0
   12418:	cmp	r3, #0
   1241c:	beq	12490 <rb_linebuf_copy_raw+0xa8>
   12420:	rsb	r1, r3, #0
   12424:	add	r7, r2, #1
   12428:	ldrb	r0, [r7, #-1]
   1242c:	cmp	r0, #13
   12430:	cmpne	r0, #10
   12434:	beq	12448 <rb_linebuf_copy_raw+0x60>
   12438:	adds	r1, r1, #1
   1243c:	add	r7, r7, #1
   12440:	bne	12428 <rb_linebuf_copy_raw+0x40>
   12444:	b	12490 <rb_linebuf_copy_raw+0xa8>
   12448:	add	r5, r1, #1
   1244c:	mov	r6, #0
   12450:	uxtb	r0, r0
   12454:	cmp	r0, #13
   12458:	cmpne	r0, #10
   1245c:	beq	1247c <rb_linebuf_copy_raw+0x94>
   12460:	b	1248c <rb_linebuf_copy_raw+0xa4>
   12464:	ldrb	r0, [r7, -r6]
   12468:	sub	r6, r6, #1
   1246c:	uxtb	r0, r0
   12470:	cmp	r0, #13
   12474:	cmpne	r0, #10
   12478:	bne	1248c <rb_linebuf_copy_raw+0xa4>
   1247c:	cmp	r5, r6
   12480:	bne	12464 <rb_linebuf_copy_raw+0x7c>
   12484:	mov	r6, #0
   12488:	b	12490 <rb_linebuf_copy_raw+0xa8>
   1248c:	sub	r6, r6, r1
   12490:	sub	r6, r3, r6
   12494:	cmn	r6, #1
   12498:	mvneq	r6, #0
   1249c:	moveq	r0, r6
   124a0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   124a4:	movw	r9, #1022	; 0x3fe
   124a8:	add	r5, r4, ip
   124ac:	sub	r7, r9, ip
   124b0:	cmp	r6, r7
   124b4:	ble	124f0 <rb_linebuf_copy_raw+0x108>
   124b8:	mov	r1, r2
   124bc:	mov	r0, r5
   124c0:	mov	r2, r7
   124c4:	bl	50a0 <memcpy@plt>
   124c8:	mov	r0, #0
   124cc:	strb	r0, [r4, #1022]	; 0x3fe
   124d0:	mov	r0, #1
   124d4:	strb	r0, [r4, #1025]	; 0x401
   124d8:	str	r9, [r4, #1028]	; 0x404
   124dc:	ldr	r0, [r8, #12]
   124e0:	add	r0, r0, r9
   124e4:	str	r0, [r8, #12]
   124e8:	mov	r0, r7
   124ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   124f0:	mov	r1, r2
   124f4:	mov	r0, r5
   124f8:	mov	r2, r6
   124fc:	bl	50a0 <memcpy@plt>
   12500:	mov	r0, #0
   12504:	strb	r0, [r5, r6]!
   12508:	ldrb	r0, [r5, #-1]
   1250c:	cmp	r0, #10
   12510:	cmpne	r0, #13
   12514:	bne	12530 <rb_linebuf_copy_raw+0x148>
   12518:	mov	r0, #1
   1251c:	strb	r0, [r4, #1025]	; 0x401
   12520:	ldr	r0, [r8, #12]
   12524:	add	r0, r0, r6
   12528:	str	r0, [r8, #12]
   1252c:	b	12544 <rb_linebuf_copy_raw+0x15c>
   12530:	ldr	r0, [r8, #12]
   12534:	add	r0, r0, r6
   12538:	str	r0, [r8, #12]
   1253c:	mov	r0, #0
   12540:	strb	r0, [r4, #1025]	; 0x401
   12544:	ldr	r0, [r4, #1028]	; 0x404
   12548:	add	r0, r0, r6
   1254c:	str	r0, [r4, #1028]	; 0x404
   12550:	mov	r0, r6
   12554:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012558 <rb_linebuf_get>:
   12558:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1255c:	add	fp, sp, #24
   12560:	mov	r5, r0
   12564:	ldr	r0, [r0]
   12568:	mov	r6, #0
   1256c:	cmp	r0, #0
   12570:	beq	12688 <rb_linebuf_get+0x130>
   12574:	ldr	r4, [r0]
   12578:	mov	r9, r1
   1257c:	cmp	r3, #0
   12580:	bne	12590 <rb_linebuf_get+0x38>
   12584:	ldrb	r0, [r4, #1025]	; 0x401
   12588:	cmp	r0, #0
   1258c:	beq	12688 <rb_linebuf_get+0x130>
   12590:	ldr	r3, [r4, #1028]	; 0x404
   12594:	ldr	r8, [fp, #8]
   12598:	cmp	r3, r2
   1259c:	subgt	r3, r2, #1
   125a0:	cmp	r8, #0
   125a4:	bne	125e8 <rb_linebuf_get+0x90>
   125a8:	ldrb	r0, [r4, #1026]	; 0x402
   125ac:	cmp	r0, #0
   125b0:	beq	125e8 <rb_linebuf_get+0x90>
   125b4:	mov	r6, #0
   125b8:	cmp	r3, #0
   125bc:	beq	125ec <rb_linebuf_get+0x94>
   125c0:	rsb	r0, r3, #0
   125c4:	mov	r1, r4
   125c8:	ldrb	r2, [r1]
   125cc:	cmp	r2, #13
   125d0:	cmpne	r2, #10
   125d4:	bne	126bc <rb_linebuf_get+0x164>
   125d8:	adds	r0, r0, #1
   125dc:	add	r1, r1, #1
   125e0:	bne	125c8 <rb_linebuf_get+0x70>
   125e4:	b	125f0 <rb_linebuf_get+0x98>
   125e8:	mov	r6, r3
   125ec:	mov	r1, r4
   125f0:	mov	r0, r9
   125f4:	mov	r2, r6
   125f8:	bl	50a0 <memcpy@plt>
   125fc:	cmp	r8, #0
   12600:	mov	r3, r5
   12604:	moveq	r0, #0
   12608:	strbeq	r0, [r9, r6]
   1260c:	ldr	r0, [r5]
   12610:	ldr	r1, [r0, #8]
   12614:	ldr	r2, [r0, #4]
   12618:	cmp	r1, #0
   1261c:	streq	r2, [r5, #4]
   12620:	strne	r2, [r1, #4]
   12624:	ldrne	r2, [r0, #4]
   12628:	cmp	r2, #0
   1262c:	addne	r3, r2, #8
   12630:	str	r1, [r3]
   12634:	mov	r1, #0
   12638:	str	r1, [r0, #4]
   1263c:	str	r1, [r0, #8]
   12640:	ldr	r1, [r5, #8]
   12644:	sub	r1, r1, #1
   12648:	str	r1, [r5, #8]
   1264c:	bl	50dc <rb_free_rb_dlink_node@plt>
   12650:	ldr	r1, [r5, #16]
   12654:	ldr	r2, [r5, #24]
   12658:	ldr	r0, [r5, #12]
   1265c:	sub	r1, r1, #1
   12660:	sub	r2, r2, #1
   12664:	str	r1, [r5, #16]
   12668:	ldr	r1, [r4, #1028]	; 0x404
   1266c:	str	r2, [r5, #24]
   12670:	sub	r0, r0, r1
   12674:	str	r0, [r5, #12]
   12678:	ldr	r0, [r4, #1032]	; 0x408
   1267c:	subs	r0, r0, #1
   12680:	str	r0, [r4, #1032]	; 0x408
   12684:	beq	12690 <rb_linebuf_get+0x138>
   12688:	mov	r0, r6
   1268c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12690:	ldr	r0, [pc, #100]	; 126fc <rb_linebuf_get+0x1a4>
   12694:	add	r0, pc, r0
   12698:	ldr	r1, [r0, #4]
   1269c:	sub	r1, r1, #1
   126a0:	str	r1, [r0, #4]
   126a4:	mov	r1, r4
   126a8:	ldr	r0, [pc, #80]	; 12700 <rb_linebuf_get+0x1a8>
   126ac:	ldr	r0, [pc, r0]
   126b0:	bl	5154 <rb_bh_free@plt>
   126b4:	mov	r0, r6
   126b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   126bc:	add	r2, r4, r3
   126c0:	add	r3, r0, #1
   126c4:	mov	r6, #0
   126c8:	sub	r2, r2, #1
   126cc:	ldrb	r7, [r2, r6]
   126d0:	cmp	r7, #13
   126d4:	cmpne	r7, #10
   126d8:	bne	126f4 <rb_linebuf_get+0x19c>
   126dc:	sub	r7, r6, #1
   126e0:	cmp	r3, r6
   126e4:	mov	r6, r7
   126e8:	bne	126cc <rb_linebuf_get+0x174>
   126ec:	mov	r6, #0
   126f0:	b	125f0 <rb_linebuf_get+0x98>
   126f4:	sub	r6, r6, r0
   126f8:	b	125f0 <rb_linebuf_get+0x98>
   126fc:	.word	0x0002ec34
   12700:	.word	0x0002ec1c

00012704 <rb_linebuf_attach>:
   12704:	push	{r4, r5, r6, r7, fp, lr}
   12708:	add	fp, sp, #16
   1270c:	ldr	r5, [r1]
   12710:	cmp	r5, #0
   12714:	popeq	{r4, r5, r6, r7, fp, pc}
   12718:	mov	r4, r0
   1271c:	mov	r6, #0
   12720:	b	1272c <rb_linebuf_attach+0x28>
   12724:	mov	r1, r4
   12728:	b	12750 <rb_linebuf_attach+0x4c>
   1272c:	ldr	r7, [r5]
   12730:	bl	53c4 <rb_make_rb_dlink_node@plt>
   12734:	str	r7, [r0]
   12738:	str	r6, [r0, #8]
   1273c:	ldr	r1, [r4, #4]
   12740:	cmp	r1, #0
   12744:	str	r1, [r0, #4]
   12748:	beq	12758 <rb_linebuf_attach+0x54>
   1274c:	add	r1, r1, #8
   12750:	str	r0, [r1]
   12754:	b	12764 <rb_linebuf_attach+0x60>
   12758:	ldr	r1, [r4]
   1275c:	cmp	r1, #0
   12760:	beq	12724 <rb_linebuf_attach+0x20>
   12764:	str	r0, [r4, #4]
   12768:	add	r2, r4, #8
   1276c:	ldm	r2, {r0, r1, r2}
   12770:	ldr	r3, [r4, #24]
   12774:	add	r0, r0, #1
   12778:	str	r0, [r4, #8]
   1277c:	add	r0, r2, #1
   12780:	add	r2, r3, #1
   12784:	str	r0, [r4, #16]
   12788:	ldr	r0, [r7, #1028]	; 0x404
   1278c:	str	r2, [r4, #24]
   12790:	add	r0, r1, r0
   12794:	str	r0, [r4, #12]
   12798:	ldr	r0, [r7, #1032]	; 0x408
   1279c:	add	r0, r0, #1
   127a0:	str	r0, [r7, #1032]	; 0x408
   127a4:	ldr	r5, [r5, #8]
   127a8:	cmp	r5, #0
   127ac:	bne	1272c <rb_linebuf_attach+0x28>
   127b0:	pop	{r4, r5, r6, r7, fp, pc}

000127b4 <rb_linebuf_put>:
   127b4:	push	{r4, r5, r6, sl, fp, lr}
   127b8:	add	fp, sp, #16
   127bc:	mov	r4, r0
   127c0:	ldr	r0, [pc, #240]	; 128b8 <rb_linebuf_put+0x104>
   127c4:	mov	r6, r1
   127c8:	ldr	r0, [pc, r0]
   127cc:	bl	51cc <rb_bh_alloc@plt>
   127d0:	mov	r5, r0
   127d4:	cmp	r0, #0
   127d8:	beq	1285c <rb_linebuf_put+0xa8>
   127dc:	ldr	r0, [pc, #216]	; 128bc <rb_linebuf_put+0x108>
   127e0:	add	r0, pc, r0
   127e4:	ldr	r1, [r0, #4]
   127e8:	add	r1, r1, #1
   127ec:	str	r1, [r0, #4]
   127f0:	bl	53c4 <rb_make_rb_dlink_node@plt>
   127f4:	mov	r1, #0
   127f8:	str	r5, [r0]
   127fc:	str	r1, [r0, #8]
   12800:	ldr	r1, [r4, #4]
   12804:	cmp	r1, #0
   12808:	str	r1, [r0, #4]
   1280c:	beq	1281c <rb_linebuf_put+0x68>
   12810:	add	r1, r1, #8
   12814:	str	r0, [r1]
   12818:	b	12828 <rb_linebuf_put+0x74>
   1281c:	ldr	r1, [r4]
   12820:	cmp	r1, #0
   12824:	beq	128b0 <rb_linebuf_put+0xfc>
   12828:	str	r0, [r4, #4]
   1282c:	ldr	r0, [r4, #8]
   12830:	add	r0, r0, #1
   12834:	str	r0, [r4, #8]
   12838:	ldr	r0, [r5, #1032]	; 0x408
   1283c:	add	r0, r0, #1
   12840:	str	r0, [r5, #1032]	; 0x408
   12844:	ldr	r0, [r4, #16]
   12848:	ldr	r1, [r4, #24]
   1284c:	add	r0, r0, #1
   12850:	str	r0, [r4, #16]
   12854:	add	r0, r1, #1
   12858:	str	r0, [r4, #24]
   1285c:	mov	r0, r5
   12860:	movw	r1, #1023	; 0x3ff
   12864:	mov	r2, r6
   12868:	bl	4f44 <rb_fsnprint@plt>
   1286c:	bic	r0, r0, r0, asr #31
   12870:	movw	r1, #1022	; 0x3fe
   12874:	mov	r2, #0
   12878:	cmp	r0, r1
   1287c:	movcc	r1, r0
   12880:	add	r0, r1, #2
   12884:	add	r1, r5, r1
   12888:	strb	r2, [r5, r0]
   1288c:	movw	r2, #2573	; 0xa0d
   12890:	strh	r2, [r1]
   12894:	mov	r1, #1
   12898:	str	r0, [r5, #1028]	; 0x404
   1289c:	strb	r1, [r5, #1025]	; 0x401
   128a0:	ldr	r1, [r4, #12]
   128a4:	add	r0, r1, r0
   128a8:	str	r0, [r4, #12]
   128ac:	pop	{r4, r5, r6, sl, fp, pc}
   128b0:	mov	r1, r4
   128b4:	b	12814 <rb_linebuf_put+0x60>
   128b8:	.word	0x0002eb00
   128bc:	.word	0x0002eae8

000128c0 <rb_linebuf_flush>:
   128c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128c4:	add	fp, sp, #28
   128c8:	sub	sp, sp, #4
   128cc:	mov	r4, r1
   128d0:	mov	r5, r0
   128d4:	bl	4d88 <rb_fd_ssl@plt>
   128d8:	cmp	r0, #0
   128dc:	beq	129f0 <rb_linebuf_flush+0x130>
   128e0:	ldr	r0, [r4]
   128e4:	cmp	r0, #0
   128e8:	beq	12a90 <rb_linebuf_flush+0x1d0>
   128ec:	ldr	r6, [r0]
   128f0:	ldrb	r0, [r6, #1025]	; 0x401
   128f4:	cmp	r0, #0
   128f8:	beq	12a90 <rb_linebuf_flush+0x1d0>
   128fc:	ldr	r0, [r4, #20]
   12900:	ldr	r2, [r6, #1028]	; 0x404
   12904:	add	r1, r6, r0
   12908:	sub	r2, r2, r0
   1290c:	mov	r0, r5
   12910:	bl	4f08 <rb_write@plt>
   12914:	mov	r8, r0
   12918:	cmp	r0, #1
   1291c:	blt	12aa0 <rb_linebuf_flush+0x1e0>
   12920:	ldr	r0, [r4, #20]
   12924:	add	r0, r0, r8
   12928:	str	r0, [r4, #20]
   1292c:	ldr	r1, [r6, #1028]	; 0x404
   12930:	cmp	r0, r1
   12934:	bne	12aa0 <rb_linebuf_flush+0x1e0>
   12938:	mov	r0, #0
   1293c:	mov	r3, r4
   12940:	str	r0, [r4, #20]
   12944:	ldr	r0, [r4]
   12948:	ldr	r1, [r0, #8]
   1294c:	ldr	r2, [r0, #4]
   12950:	cmp	r1, #0
   12954:	streq	r2, [r4, #4]
   12958:	strne	r2, [r1, #4]
   1295c:	ldrne	r2, [r0, #4]
   12960:	cmp	r2, #0
   12964:	addne	r3, r2, #8
   12968:	str	r1, [r3]
   1296c:	mov	r1, #0
   12970:	str	r1, [r0, #4]
   12974:	str	r1, [r0, #8]
   12978:	ldr	r1, [r4, #8]
   1297c:	sub	r1, r1, #1
   12980:	str	r1, [r4, #8]
   12984:	bl	50dc <rb_free_rb_dlink_node@plt>
   12988:	ldr	r1, [r4, #16]
   1298c:	ldr	r2, [r4, #24]
   12990:	ldr	r0, [r4, #12]
   12994:	sub	r1, r1, #1
   12998:	sub	r2, r2, #1
   1299c:	str	r1, [r4, #16]
   129a0:	ldr	r1, [r6, #1028]	; 0x404
   129a4:	str	r2, [r4, #24]
   129a8:	sub	r0, r0, r1
   129ac:	str	r0, [r4, #12]
   129b0:	ldr	r0, [r6, #1032]	; 0x408
   129b4:	subs	r0, r0, #1
   129b8:	str	r0, [r6, #1032]	; 0x408
   129bc:	bne	12aa0 <rb_linebuf_flush+0x1e0>
   129c0:	ldr	r0, [pc, #560]	; 12bf8 <rb_linebuf_flush+0x338>
   129c4:	add	r0, pc, r0
   129c8:	ldr	r1, [r0, #4]
   129cc:	sub	r1, r1, #1
   129d0:	str	r1, [r0, #4]
   129d4:	mov	r1, r6
   129d8:	ldr	r0, [pc, #540]	; 12bfc <rb_linebuf_flush+0x33c>
   129dc:	ldr	r0, [pc, r0]
   129e0:	bl	5154 <rb_bh_free@plt>
   129e4:	mov	r0, r8
   129e8:	sub	sp, fp, #28
   129ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129f0:	ldr	r6, [pc, #496]	; 12be8 <rb_linebuf_flush+0x328>
   129f4:	mov	r1, #0
   129f8:	mov	r2, #8192	; 0x2000
   129fc:	add	r6, pc, r6
   12a00:	mov	r0, r6
   12a04:	bl	4ee4 <memset@plt>
   12a08:	ldr	r0, [r4]
   12a0c:	cmp	r0, #0
   12a10:	beq	12a90 <rb_linebuf_flush+0x1d0>
   12a14:	ldr	r1, [r0]
   12a18:	ldrb	r2, [r1, #1025]	; 0x401
   12a1c:	cmp	r2, #0
   12a20:	beq	12a90 <rb_linebuf_flush+0x1d0>
   12a24:	ldr	r2, [r4, #20]
   12a28:	add	r8, r1, r2
   12a2c:	ldr	r1, [r1, #1028]	; 0x404
   12a30:	sub	r9, r1, r2
   12a34:	strd	r8, [r6]
   12a38:	ldr	r0, [r0, #8]
   12a3c:	cmp	r0, #0
   12a40:	beq	12aac <rb_linebuf_flush+0x1ec>
   12a44:	mov	r2, #0
   12a48:	movw	r1, #1022	; 0x3fe
   12a4c:	ldr	r7, [r0]
   12a50:	ldrb	r3, [r7, #1025]	; 0x401
   12a54:	cmp	r3, #0
   12a58:	beq	12ab4 <rb_linebuf_flush+0x1f4>
   12a5c:	add	r3, r2, #1
   12a60:	add	r2, r6, r2, lsl #3
   12a64:	str	r7, [r2, #8]
   12a68:	cmp	r3, r1
   12a6c:	ldr	r7, [r7, #1028]	; 0x404
   12a70:	str	r7, [r2, #12]
   12a74:	bhi	12a88 <rb_linebuf_flush+0x1c8>
   12a78:	ldr	r0, [r0, #8]
   12a7c:	mov	r2, r3
   12a80:	cmp	r0, #0
   12a84:	bne	12a4c <rb_linebuf_flush+0x18c>
   12a88:	add	r6, r3, #1
   12a8c:	b	12ab8 <rb_linebuf_flush+0x1f8>
   12a90:	bl	552c <__errno_location@plt>
   12a94:	mov	r1, #11
   12a98:	mvn	r8, #0
   12a9c:	str	r1, [r0]
   12aa0:	mov	r0, r8
   12aa4:	sub	sp, fp, #28
   12aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aac:	mov	r6, #1
   12ab0:	b	12ab8 <rb_linebuf_flush+0x1f8>
   12ab4:	add	r6, r2, #1
   12ab8:	ldr	r1, [pc, #300]	; 12bec <rb_linebuf_flush+0x32c>
   12abc:	mov	r0, r5
   12ac0:	mov	r2, r6
   12ac4:	add	r1, pc, r1
   12ac8:	bl	5328 <rb_writev@plt>
   12acc:	mov	r8, r0
   12ad0:	cmp	r0, #1
   12ad4:	blt	12aa0 <rb_linebuf_flush+0x1e0>
   12ad8:	ldr	r5, [r4]
   12adc:	ldr	r0, [r4, #20]
   12ae0:	mov	sl, #0
   12ae4:	str	r8, [sp]
   12ae8:	ldr	r7, [r5]
   12aec:	ldr	r1, [r7, #1028]	; 0x404
   12af0:	sub	r9, r1, r0
   12af4:	cmp	r8, r9
   12af8:	blt	12bd0 <rb_linebuf_flush+0x310>
   12afc:	ldr	r0, [r4]
   12b00:	ldr	r5, [r5, #8]
   12b04:	mov	r3, r4
   12b08:	ldr	r1, [r0, #8]
   12b0c:	ldr	r2, [r0, #4]
   12b10:	cmp	r1, #0
   12b14:	streq	r2, [r4, #4]
   12b18:	strne	r2, [r1, #4]
   12b1c:	ldrne	r2, [r0, #4]
   12b20:	cmp	r2, #0
   12b24:	addne	r3, r2, #8
   12b28:	str	r1, [r3]
   12b2c:	mov	r1, #0
   12b30:	str	r1, [r0, #4]
   12b34:	str	r1, [r0, #8]
   12b38:	ldr	r1, [r4, #8]
   12b3c:	sub	r1, r1, #1
   12b40:	str	r1, [r4, #8]
   12b44:	bl	50dc <rb_free_rb_dlink_node@plt>
   12b48:	ldr	r1, [r4, #16]
   12b4c:	ldr	r2, [r4, #24]
   12b50:	ldr	r0, [r4, #12]
   12b54:	sub	r1, r1, #1
   12b58:	sub	r2, r2, #1
   12b5c:	str	r1, [r4, #16]
   12b60:	ldr	r1, [r7, #1028]	; 0x404
   12b64:	str	r2, [r4, #24]
   12b68:	sub	r0, r0, r1
   12b6c:	str	r0, [r4, #12]
   12b70:	ldr	r0, [r7, #1032]	; 0x408
   12b74:	subs	r0, r0, #1
   12b78:	str	r0, [r7, #1032]	; 0x408
   12b7c:	bne	12ba8 <rb_linebuf_flush+0x2e8>
   12b80:	ldr	r0, [pc, #104]	; 12bf0 <rb_linebuf_flush+0x330>
   12b84:	add	r0, pc, r0
   12b88:	mov	r1, r0
   12b8c:	ldr	r0, [r0, #4]
   12b90:	sub	r0, r0, #1
   12b94:	str	r0, [r1, #4]
   12b98:	mov	r1, r7
   12b9c:	ldr	r0, [pc, #80]	; 12bf4 <rb_linebuf_flush+0x334>
   12ba0:	ldr	r0, [pc, r0]
   12ba4:	bl	5154 <rb_bh_free@plt>
   12ba8:	add	sl, sl, #1
   12bac:	mov	r0, #0
   12bb0:	sub	r8, r8, r9
   12bb4:	cmp	sl, r6
   12bb8:	str	r0, [r4, #20]
   12bbc:	bcc	12ae8 <rb_linebuf_flush+0x228>
   12bc0:	ldr	r8, [sp]
   12bc4:	mov	r0, r8
   12bc8:	sub	sp, fp, #28
   12bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bd0:	add	r0, r0, r8
   12bd4:	ldr	r8, [sp]
   12bd8:	str	r0, [r4, #20]
   12bdc:	mov	r0, r8
   12be0:	sub	sp, fp, #28
   12be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be8:	.word	0x0002c8cc
   12bec:	.word	0x0002c804
   12bf0:	.word	0x0002e744
   12bf4:	.word	0x0002e728
   12bf8:	.word	0x0002e904
   12bfc:	.word	0x0002e8ec

00012c00 <rb_count_rb_linebuf_memory>:
   12c00:	push	{fp, lr}
   12c04:	mov	fp, sp
   12c08:	sub	sp, sp, #8
   12c0c:	mov	r3, r1
   12c10:	mov	r1, r0
   12c14:	ldr	r0, [pc, #24]	; 12c34 <rb_count_rb_linebuf_memory+0x34>
   12c18:	mov	r2, #0
   12c1c:	ldr	r0, [pc, r0]
   12c20:	str	r2, [sp]
   12c24:	mov	r2, #0
   12c28:	bl	5550 <rb_bh_usage@plt>
   12c2c:	mov	sp, fp
   12c30:	pop	{fp, pc}
   12c34:	.word	0x0002e6ac

00012c38 <rb_init_rb_dlink_nodes>:
   12c38:	push	{fp, lr}
   12c3c:	mov	fp, sp
   12c40:	ldr	r2, [pc, #36]	; 12c6c <rb_init_rb_dlink_nodes+0x34>
   12c44:	mov	r1, r0
   12c48:	mov	r0, #12
   12c4c:	add	r2, pc, r2
   12c50:	bl	5304 <rb_bh_create@plt>
   12c54:	ldr	r1, [pc, #20]	; 12c70 <rb_init_rb_dlink_nodes+0x38>
   12c58:	cmp	r0, #0
   12c5c:	add	r1, pc, r1
   12c60:	str	r0, [r1]
   12c64:	popne	{fp, pc}
   12c68:	bl	51fc <rb_outofmemory@plt>
   12c6c:	.word	0x0000835f
   12c70:	.word	0x0002e674

00012c74 <rb_make_rb_dlink_node>:
   12c74:	ldr	r0, [pc, #4]	; 12c80 <rb_make_rb_dlink_node+0xc>
   12c78:	ldr	r0, [pc, r0]
   12c7c:	b	51cc <rb_bh_alloc@plt>
   12c80:	.word	0x0002e658

00012c84 <rb_free_rb_dlink_node>:
   12c84:	mov	r1, r0
   12c88:	ldr	r0, [pc, #4]	; 12c94 <rb_free_rb_dlink_node+0x10>
   12c8c:	ldr	r0, [pc, r0]
   12c90:	b	5154 <rb_bh_free@plt>
   12c94:	.word	0x0002e644

00012c98 <rb_string_to_array>:
   12c98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c9c:	add	fp, sp, #24
   12ca0:	mov	r4, r1
   12ca4:	mov	r1, r0
   12ca8:	mov	r0, #0
   12cac:	cmp	r1, #0
   12cb0:	ldrbne	r3, [r1]
   12cb4:	cmpne	r3, #0
   12cb8:	bne	12cc4 <rb_string_to_array+0x2c>
   12cbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cc0:	ldrb	r3, [r1, #1]!
   12cc4:	uxtb	r7, r3
   12cc8:	cmp	r7, #32
   12ccc:	beq	12cc0 <rb_string_to_array+0x28>
   12cd0:	cmp	r7, #0
   12cd4:	beq	12cbc <rb_string_to_array+0x24>
   12cd8:	sub	r6, r2, #1
   12cdc:	mov	r8, #0
   12ce0:	mov	r0, #0
   12ce4:	mov	r5, r0
   12ce8:	uxtb	r0, r3
   12cec:	cmp	r0, #58	; 0x3a
   12cf0:	beq	12d64 <rb_string_to_array+0xcc>
   12cf4:	str	r1, [r4, r5, lsl #2]
   12cf8:	mov	r0, r1
   12cfc:	mov	r1, #32
   12d00:	bl	4e78 <strchr@plt>
   12d04:	mov	r2, r0
   12d08:	add	r0, r5, #1
   12d0c:	cmp	r2, #0
   12d10:	beq	12cbc <rb_string_to_array+0x24>
   12d14:	mov	r7, r2
   12d18:	strb	r8, [r7], #1
   12d1c:	mov	r1, r7
   12d20:	ldrb	r3, [r1]
   12d24:	cmp	r3, #32
   12d28:	bne	12d3c <rb_string_to_array+0xa4>
   12d2c:	add	r1, r1, #1
   12d30:	ldrb	r3, [r1]
   12d34:	cmp	r3, #32
   12d38:	beq	12d2c <rb_string_to_array+0x94>
   12d3c:	cmp	r3, #0
   12d40:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d44:	cmp	r0, r6
   12d48:	blt	12ce4 <rb_string_to_array+0x4c>
   12d4c:	ldrb	r1, [r2, #1]
   12d50:	cmp	r1, #58	; 0x3a
   12d54:	addeq	r7, r2, #2
   12d58:	str	r7, [r4, r0, lsl #2]
   12d5c:	add	r0, r5, #2
   12d60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d64:	add	r0, r1, #1
   12d68:	str	r0, [r4, r5, lsl #2]
   12d6c:	add	r0, r5, #1
   12d70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012d74 <rb_strcasecmp>:
   12d74:	b	4e90 <strcasecmp@plt>

00012d78 <rb_strncasecmp>:
   12d78:	b	51f0 <strncasecmp@plt>

00012d7c <rb_strcasestr>:
   12d7c:	b	4cf8 <strcasestr@plt>

00012d80 <rb_strlcat>:
   12d80:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d84:	add	fp, sp, #24
   12d88:	mov	r4, r2
   12d8c:	mov	r8, r1
   12d90:	mov	r9, r0
   12d94:	bl	507c <strlen@plt>
   12d98:	mov	r7, r0
   12d9c:	sub	r6, r4, r0
   12da0:	mov	r0, r8
   12da4:	bl	507c <strlen@plt>
   12da8:	cmp	r0, r6
   12dac:	mov	r4, r0
   12db0:	mov	r5, r0
   12db4:	mov	r1, r8
   12db8:	subcs	r4, r6, #1
   12dbc:	add	r6, r9, r7
   12dc0:	mov	r0, r6
   12dc4:	mov	r2, r4
   12dc8:	bl	50a0 <memcpy@plt>
   12dcc:	mov	r0, #0
   12dd0:	strb	r0, [r6, r4]
   12dd4:	add	r0, r5, r7
   12dd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012ddc <rb_strlcpy>:
   12ddc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12de0:	add	fp, sp, #24
   12de4:	mov	r8, r0
   12de8:	mov	r0, r1
   12dec:	mov	r7, r2
   12df0:	mov	r6, r1
   12df4:	bl	507c <strlen@plt>
   12df8:	mov	r4, r0
   12dfc:	cmp	r7, #0
   12e00:	beq	12e28 <rb_strlcpy+0x4c>
   12e04:	cmp	r4, r7
   12e08:	mov	r5, r4
   12e0c:	mov	r0, r8
   12e10:	mov	r1, r6
   12e14:	subcs	r5, r7, #1
   12e18:	mov	r2, r5
   12e1c:	bl	50a0 <memcpy@plt>
   12e20:	mov	r0, #0
   12e24:	strb	r0, [r8, r5]
   12e28:	mov	r0, r4
   12e2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012e30 <rb_strnlen>:
   12e30:	b	5280 <strnlen@plt>

00012e34 <rb_snprintf_append>:
   12e34:	sub	sp, sp, #4
   12e38:	push	{r4, r5, r6, r7, fp, lr}
   12e3c:	add	fp, sp, #16
   12e40:	sub	sp, sp, #4
   12e44:	cmp	r1, #0
   12e48:	str	r3, [fp, #8]
   12e4c:	beq	12e84 <rb_snprintf_append+0x50>
   12e50:	mov	r4, r2
   12e54:	mov	r6, r1
   12e58:	mov	r5, r0
   12e5c:	bl	507c <strlen@plt>
   12e60:	cmp	r0, r6
   12e64:	ble	12e98 <rb_snprintf_append+0x64>
   12e68:	sub	r0, r6, #1
   12e6c:	mov	r1, #0
   12e70:	strb	r1, [r5, r0]
   12e74:	sub	sp, fp, #16
   12e78:	pop	{r4, r5, r6, r7, fp, lr}
   12e7c:	add	sp, sp, #4
   12e80:	bx	lr
   12e84:	mvn	r0, #0
   12e88:	sub	sp, fp, #16
   12e8c:	pop	{r4, r5, r6, r7, fp, lr}
   12e90:	add	sp, sp, #4
   12e94:	bx	lr
   12e98:	mov	r7, r0
   12e9c:	add	r3, fp, #8
   12ea0:	add	r0, r5, r0
   12ea4:	mov	r2, r4
   12ea8:	sub	r1, r6, r7
   12eac:	str	r3, [sp]
   12eb0:	bl	4e24 <vsnprintf@plt>
   12eb4:	cmp	r0, #0
   12eb8:	addge	r0, r0, r7
   12ebc:	sub	sp, fp, #16
   12ec0:	pop	{r4, r5, r6, r7, fp, lr}
   12ec4:	add	sp, sp, #4
   12ec8:	bx	lr

00012ecc <rb_snprintf_try_append>:
   12ecc:	sub	sp, sp, #4
   12ed0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12ed4:	add	fp, sp, #24
   12ed8:	sub	sp, sp, #4
   12edc:	mvn	r4, #0
   12ee0:	cmp	r1, #0
   12ee4:	str	r3, [fp, #8]
   12ee8:	beq	12f58 <rb_snprintf_try_append+0x8c>
   12eec:	mov	r9, r2
   12ef0:	mov	r5, r1
   12ef4:	mov	r6, r0
   12ef8:	bl	507c <strlen@plt>
   12efc:	cmp	r0, r5
   12f00:	ble	12f14 <rb_snprintf_try_append+0x48>
   12f04:	add	r0, r6, r5
   12f08:	mov	r1, #0
   12f0c:	strb	r1, [r0, #-1]
   12f10:	b	12f58 <rb_snprintf_try_append+0x8c>
   12f14:	add	r8, r6, r0
   12f18:	add	r3, fp, #8
   12f1c:	mov	r7, r0
   12f20:	sub	r1, r5, r0
   12f24:	mov	r2, r9
   12f28:	mov	r0, r8
   12f2c:	str	r3, [sp]
   12f30:	bl	4e24 <vsnprintf@plt>
   12f34:	mov	r4, r0
   12f38:	cmp	r0, #0
   12f3c:	blt	12f58 <rb_snprintf_try_append+0x8c>
   12f40:	add	r4, r4, r7
   12f44:	sub	r0, r5, #1
   12f48:	cmp	r4, r0
   12f4c:	movgt	r0, #0
   12f50:	mvngt	r4, #0
   12f54:	strbgt	r0, [r8]
   12f58:	mov	r0, r4
   12f5c:	sub	sp, fp, #24
   12f60:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f64:	add	sp, sp, #4
   12f68:	bx	lr

00012f6c <rb_basename>:
   12f6c:	push	{r4, r5, fp, lr}
   12f70:	add	fp, sp, #8
   12f74:	mov	r1, #47	; 0x2f
   12f78:	mov	r4, r0
   12f7c:	bl	4efc <strrchr@plt>
   12f80:	cmp	r0, #0
   12f84:	addne	r4, r0, #1
   12f88:	mov	r0, r4
   12f8c:	bl	507c <strlen@plt>
   12f90:	add	r0, r0, #1
   12f94:	bl	5214 <malloc@plt>
   12f98:	cmp	r0, #0
   12f9c:	beq	12fb4 <rb_basename+0x48>
   12fa0:	mov	r1, r4
   12fa4:	mov	r5, r0
   12fa8:	bl	5124 <strcpy@plt>
   12fac:	mov	r0, r5
   12fb0:	pop	{r4, r5, fp, pc}
   12fb4:	bl	51fc <rb_outofmemory@plt>

00012fb8 <rb_dirname>:
   12fb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12fbc:	add	fp, sp, #24
   12fc0:	mov	r1, #47	; 0x2f
   12fc4:	mov	r4, r0
   12fc8:	bl	4efc <strrchr@plt>
   12fcc:	cmp	r0, #0
   12fd0:	bne	12ffc <rb_dirname+0x44>
   12fd4:	mov	r0, #2
   12fd8:	bl	5214 <malloc@plt>
   12fdc:	cmp	r0, #0
   12fe0:	movne	r5, r0
   12fe4:	movne	r0, #46	; 0x2e
   12fe8:	strhne	r0, [r5]
   12fec:	movne	r0, r5
   12ff0:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ff4:	b	13068 <rb_dirname+0xb0>
   12ff8:	sub	r0, r0, #1
   12ffc:	cmp	r0, r4
   13000:	bls	13010 <rb_dirname+0x58>
   13004:	ldrb	r1, [r0]
   13008:	cmp	r1, #47	; 0x2f
   1300c:	beq	12ff8 <rb_dirname+0x40>
   13010:	sub	r8, r0, r4
   13014:	add	r6, r8, #2
   13018:	mov	r0, r6
   1301c:	bl	5214 <malloc@plt>
   13020:	cmp	r0, #0
   13024:	beq	13068 <rb_dirname+0xb0>
   13028:	mov	r5, r0
   1302c:	mov	r0, r4
   13030:	bl	507c <strlen@plt>
   13034:	cmp	r6, #0
   13038:	beq	13060 <rb_dirname+0xa8>
   1303c:	mov	r7, r0
   13040:	cmp	r0, r6
   13044:	mov	r0, r5
   13048:	mov	r1, r4
   1304c:	addcs	r7, r8, #1
   13050:	mov	r2, r7
   13054:	bl	50a0 <memcpy@plt>
   13058:	mov	r0, #0
   1305c:	strb	r0, [r5, r7]
   13060:	mov	r0, r5
   13064:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13068:	bl	51fc <rb_outofmemory@plt>

0001306c <rb_fsnprint>:
   1306c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13070:	add	fp, sp, #28
   13074:	sub	sp, sp, #12
   13078:	cmp	r2, #0
   1307c:	str	r0, [sp, #4]
   13080:	beq	131b8 <rb_fsnprint+0x14c>
   13084:	sub	r0, r1, #1
   13088:	mov	r4, r2
   1308c:	mov	r8, r1
   13090:	mov	r9, #0
   13094:	str	r1, [sp]
   13098:	str	r0, [sp, #8]
   1309c:	mov	r0, r1
   130a0:	ldr	r7, [r4]
   130a4:	cmp	r7, #0
   130a8:	beq	130b8 <rb_fsnprint+0x4c>
   130ac:	sub	r0, r8, r9
   130b0:	cmp	r7, r0
   130b4:	bls	130c4 <rb_fsnprint+0x58>
   130b8:	cmp	r0, #0
   130bc:	mov	r7, r0
   130c0:	beq	131d8 <rb_fsnprint+0x16c>
   130c4:	ldr	r6, [r4, #4]
   130c8:	cmp	r6, #0
   130cc:	beq	13108 <rb_fsnprint+0x9c>
   130d0:	ldr	r0, [sp, #4]
   130d4:	add	sl, r0, r9
   130d8:	ldr	r0, [r4, #12]
   130dc:	cmp	r0, #0
   130e0:	beq	13138 <rb_fsnprint+0xcc>
   130e4:	ldr	r3, [r0]
   130e8:	mov	r0, sl
   130ec:	mov	r1, r7
   130f0:	mov	r2, r6
   130f4:	bl	4e24 <vsnprintf@plt>
   130f8:	mov	r5, r0
   130fc:	cmp	r5, #0
   13100:	bge	1317c <rb_fsnprint+0x110>
   13104:	b	131ac <rb_fsnprint+0x140>
   13108:	ldr	r3, [r4, #8]
   1310c:	cmp	r3, #0
   13110:	beq	13178 <rb_fsnprint+0x10c>
   13114:	ldr	r0, [sp, #4]
   13118:	ldr	r2, [r4, #12]
   1311c:	mov	r1, r7
   13120:	add	r0, r0, r9
   13124:	blx	r3
   13128:	mov	r5, r0
   1312c:	cmp	r5, #0
   13130:	bge	1317c <rb_fsnprint+0x110>
   13134:	b	131ac <rb_fsnprint+0x140>
   13138:	mov	r0, r6
   1313c:	bl	507c <strlen@plt>
   13140:	cmp	r0, r7
   13144:	mov	r8, r0
   13148:	mov	r5, r0
   1314c:	mov	r0, sl
   13150:	mov	r1, r6
   13154:	subcs	r8, r7, #1
   13158:	mov	r2, r8
   1315c:	bl	50a0 <memcpy@plt>
   13160:	mov	r0, #0
   13164:	strb	r0, [sl, r8]
   13168:	ldr	r8, [sp]
   1316c:	cmp	r5, #0
   13170:	bge	1317c <rb_fsnprint+0x110>
   13174:	b	131ac <rb_fsnprint+0x140>
   13178:	mov	r5, #0
   1317c:	sub	r0, r7, #1
   13180:	cmp	r5, r0
   13184:	movls	r0, r5
   13188:	add	r9, r0, r9
   1318c:	ldr	r0, [sp, #8]
   13190:	cmp	r9, r0
   13194:	bcs	131c8 <rb_fsnprint+0x15c>
   13198:	ldr	r4, [r4, #16]
   1319c:	sub	r0, r7, r5
   131a0:	mov	r5, r9
   131a4:	cmp	r4, #0
   131a8:	bne	130a0 <rb_fsnprint+0x34>
   131ac:	mov	r0, r5
   131b0:	sub	sp, fp, #28
   131b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131b8:	mov	r5, #0
   131bc:	mov	r0, r5
   131c0:	sub	sp, fp, #28
   131c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c8:	ldr	r5, [sp, #8]
   131cc:	mov	r0, r5
   131d0:	sub	sp, fp, #28
   131d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d8:	mov	r5, r9
   131dc:	mov	r0, r5
   131e0:	sub	sp, fp, #28
   131e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000131e8 <rb_fsnprintf>:
   131e8:	push	{fp, lr}
   131ec:	mov	fp, sp
   131f0:	sub	sp, sp, #24
   131f4:	str	r3, [sp, #4]
   131f8:	mov	r3, #0
   131fc:	str	r3, [sp]
   13200:	str	r3, [sp, #8]
   13204:	sub	r3, fp, #4
   13208:	str	r3, [sp, #12]
   1320c:	str	r2, [sp, #16]
   13210:	add	r2, fp, #8
   13214:	str	r2, [fp, #-4]
   13218:	mov	r2, sp
   1321c:	bl	4f44 <rb_fsnprint@plt>
   13220:	mov	sp, fp
   13224:	pop	{fp, pc}

00013228 <rb_helper_child>:
   13228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1322c:	add	fp, sp, #28
   13230:	sub	sp, sp, #28
   13234:	str	r2, [sp, #24]
   13238:	mov	r4, r0
   1323c:	mov	r8, r3
   13240:	mov	r9, r1
   13244:	ldr	r0, [pc, #536]	; 13464 <rb_helper_child+0x23c>
   13248:	add	r0, pc, r0
   1324c:	bl	4e60 <getenv@plt>
   13250:	mov	r7, r0
   13254:	ldr	r0, [pc, #524]	; 13468 <rb_helper_child+0x240>
   13258:	add	r0, pc, r0
   1325c:	bl	4e60 <getenv@plt>
   13260:	mov	r5, r0
   13264:	ldr	r0, [pc, #512]	; 1346c <rb_helper_child+0x244>
   13268:	add	r0, pc, r0
   1326c:	bl	4e60 <getenv@plt>
   13270:	mov	sl, #0
   13274:	cmp	r7, #0
   13278:	beq	1328c <rb_helper_child+0x64>
   1327c:	cmp	r5, #0
   13280:	movne	r6, r0
   13284:	cmpne	r0, #0
   13288:	bne	13298 <rb_helper_child+0x70>
   1328c:	mov	r0, sl
   13290:	sub	sp, fp, #28
   13294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13298:	mov	r0, #1
   1329c:	mov	r1, #84	; 0x54
   132a0:	str	r8, [sp, #12]
   132a4:	str	r4, [sp, #16]
   132a8:	bl	4ea8 <calloc@plt>
   132ac:	cmp	r0, #0
   132b0:	beq	13460 <rb_helper_child+0x238>
   132b4:	mov	sl, r0
   132b8:	mov	r0, r7
   132bc:	mov	r1, #0
   132c0:	mov	r2, #10
   132c4:	mov	r4, #0
   132c8:	bl	510c <strtol@plt>
   132cc:	mov	r7, r0
   132d0:	mov	r0, r5
   132d4:	mov	r1, #0
   132d8:	mov	r2, #10
   132dc:	bl	510c <strtol@plt>
   132e0:	mov	r5, r0
   132e4:	mov	r0, r6
   132e8:	mov	r1, #0
   132ec:	mov	r2, #10
   132f0:	bl	510c <strtol@plt>
   132f4:	mov	r8, r0
   132f8:	cmp	r0, #1
   132fc:	blt	13330 <rb_helper_child+0x108>
   13300:	cmp	r7, r4
   13304:	cmpne	r5, r4
   13308:	bne	1331c <rb_helper_child+0xf4>
   1330c:	add	r4, r4, #1
   13310:	cmp	r8, r4
   13314:	bne	13300 <rb_helper_child+0xd8>
   13318:	b	13330 <rb_helper_child+0x108>
   1331c:	mov	r0, r4
   13320:	bl	51c0 <close@plt>
   13324:	add	r4, r4, #1
   13328:	cmp	r8, r4
   1332c:	bne	13300 <rb_helper_child+0xd8>
   13330:	str	r9, [sp, #20]
   13334:	mov	r1, #2
   13338:	ldr	r0, [pc, #304]	; 13470 <rb_helper_child+0x248>
   1333c:	add	r0, pc, r0
   13340:	bl	4c5c <open@plt>
   13344:	cmp	r7, #0
   13348:	mov	r9, r0
   1334c:	cmpne	r5, #0
   13350:	bne	13420 <rb_helper_child+0x1f8>
   13354:	cmp	r7, #1
   13358:	cmpne	r5, #1
   1335c:	bne	13438 <rb_helper_child+0x210>
   13360:	cmp	r7, #2
   13364:	cmpne	r5, #2
   13368:	bne	13450 <rb_helper_child+0x228>
   1336c:	ldr	r4, [fp, #20]
   13370:	ldr	r6, [fp, #16]
   13374:	ldr	r2, [fp, #8]
   13378:	cmp	r9, #3
   1337c:	blt	13390 <rb_helper_child+0x168>
   13380:	mov	r0, r9
   13384:	mov	r9, r2
   13388:	bl	51c0 <close@plt>
   1338c:	mov	r2, r9
   13390:	ldr	r0, [sp, #24]
   13394:	ldr	r1, [sp, #12]
   13398:	mov	r3, #0
   1339c:	str	r8, [sp]
   133a0:	str	r6, [sp, #4]
   133a4:	str	r4, [sp, #8]
   133a8:	bl	5298 <rb_lib_init@plt>
   133ac:	ldr	r0, [fp, #12]
   133b0:	bl	5394 <rb_linebuf_init@plt>
   133b4:	add	r0, sl, #4
   133b8:	bl	5340 <rb_linebuf_newbuf@plt>
   133bc:	add	r0, sl, #32
   133c0:	bl	5340 <rb_linebuf_newbuf@plt>
   133c4:	ldr	r2, [pc, #168]	; 13474 <rb_helper_child+0x24c>
   133c8:	mov	r0, r7
   133cc:	mov	r1, #8
   133d0:	add	r2, pc, r2
   133d4:	bl	52e0 <rb_open@plt>
   133d8:	str	r0, [sl, #60]	; 0x3c
   133dc:	mov	r0, r5
   133e0:	mov	r1, #8
   133e4:	ldr	r2, [pc, #140]	; 13478 <rb_helper_child+0x250>
   133e8:	add	r2, pc, r2
   133ec:	bl	52e0 <rb_open@plt>
   133f0:	str	r0, [sl, #64]	; 0x40
   133f4:	ldr	r0, [sl, #60]	; 0x3c
   133f8:	bl	4ed8 <rb_set_nb@plt>
   133fc:	ldr	r0, [sl, #64]	; 0x40
   13400:	bl	4ed8 <rb_set_nb@plt>
   13404:	ldr	r0, [sp, #16]
   13408:	str	r0, [sl, #76]	; 0x4c
   1340c:	ldr	r0, [sp, #20]
   13410:	str	r0, [sl, #80]	; 0x50
   13414:	mov	r0, sl
   13418:	sub	sp, fp, #28
   1341c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13420:	mov	r0, r9
   13424:	mov	r1, #0
   13428:	bl	5310 <dup2@plt>
   1342c:	cmp	r7, #1
   13430:	cmpne	r5, #1
   13434:	beq	13360 <rb_helper_child+0x138>
   13438:	mov	r0, r9
   1343c:	mov	r1, #1
   13440:	bl	5310 <dup2@plt>
   13444:	cmp	r7, #2
   13448:	cmpne	r5, #2
   1344c:	beq	1336c <rb_helper_child+0x144>
   13450:	mov	r0, r9
   13454:	mov	r1, #2
   13458:	bl	5310 <dup2@plt>
   1345c:	b	1336c <rb_helper_child+0x144>
   13460:	bl	51fc <rb_outofmemory@plt>
   13464:	.word	0x00007d74
   13468:	.word	0x00007d68
   1346c:	.word	0x00007d5c
   13470:	.word	0x00007c8e
   13474:	.word	0x00007c04
   13478:	.word	0x00007c00

0001347c <rb_helper_start>:
   1347c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13480:	add	fp, sp, #28
   13484:	sub	sp, sp, #196	; 0xc4
   13488:	mov	r9, r0
   1348c:	mov	r8, r1
   13490:	mov	r0, r1
   13494:	mov	r1, #1
   13498:	mov	r5, r3
   1349c:	mov	r6, r2
   134a0:	bl	4fe0 <access@plt>
   134a4:	mov	r4, #0
   134a8:	cmn	r0, #1
   134ac:	beq	13664 <rb_helper_start+0x1e8>
   134b0:	mov	r0, #1
   134b4:	mov	r1, #84	; 0x54
   134b8:	bl	4ea8 <calloc@plt>
   134bc:	cmp	r0, #0
   134c0:	beq	136a4 <rb_helper_start+0x228>
   134c4:	ldr	r2, [pc, #476]	; 136a8 <rb_helper_start+0x22c>
   134c8:	add	r7, sp, #60	; 0x3c
   134cc:	mov	sl, r0
   134d0:	mov	r1, #128	; 0x80
   134d4:	mov	r3, r9
   134d8:	mov	r0, r7
   134dc:	add	r2, pc, r2
   134e0:	bl	53f4 <snprintf@plt>
   134e4:	add	r0, sp, #20
   134e8:	mov	r2, r7
   134ec:	add	r1, r0, #4
   134f0:	bl	51e4 <rb_pipe@plt>
   134f4:	cmn	r0, #1
   134f8:	ble	13690 <rb_helper_start+0x214>
   134fc:	str	r5, [sp, #8]
   13500:	str	r6, [sp, #4]
   13504:	add	r5, sp, #60	; 0x3c
   13508:	mov	r1, #128	; 0x80
   1350c:	mov	r3, r9
   13510:	ldr	r2, [pc, #404]	; 136ac <rb_helper_start+0x230>
   13514:	mov	r0, r5
   13518:	add	r2, pc, r2
   1351c:	bl	53f4 <snprintf@plt>
   13520:	add	r0, sp, #12
   13524:	mov	r2, r5
   13528:	add	r1, r0, #4
   1352c:	bl	51e4 <rb_pipe@plt>
   13530:	cmn	r0, #1
   13534:	ble	13690 <rb_helper_start+0x214>
   13538:	ldr	r0, [sp, #24]
   1353c:	bl	4db8 <rb_get_fd@plt>
   13540:	ldr	r7, [pc, #360]	; 136b0 <rb_helper_start+0x234>
   13544:	add	r6, sp, #44	; 0x2c
   13548:	mov	r3, r0
   1354c:	mov	r1, #16
   13550:	mov	r0, r6
   13554:	add	r7, pc, r7
   13558:	mov	r2, r7
   1355c:	bl	53f4 <snprintf@plt>
   13560:	ldr	r0, [sp, #12]
   13564:	bl	4db8 <rb_get_fd@plt>
   13568:	add	r4, sp, #28
   1356c:	mov	r3, r0
   13570:	mov	r1, #16
   13574:	mov	r2, r7
   13578:	mov	r0, r4
   1357c:	bl	53f4 <snprintf@plt>
   13580:	ldr	r0, [sp, #20]
   13584:	bl	4ed8 <rb_set_nb@plt>
   13588:	ldr	r0, [sp, #24]
   1358c:	bl	4ed8 <rb_set_nb@plt>
   13590:	ldr	r0, [sp, #12]
   13594:	bl	4ed8 <rb_set_nb@plt>
   13598:	ldr	r0, [sp, #16]
   1359c:	bl	4ed8 <rb_set_nb@plt>
   135a0:	ldr	r0, [pc, #268]	; 136b4 <rb_helper_start+0x238>
   135a4:	mov	r1, r4
   135a8:	mov	r2, #1
   135ac:	add	r0, pc, r0
   135b0:	bl	4da0 <rb_setenv@plt>
   135b4:	ldr	r0, [pc, #252]	; 136b8 <rb_helper_start+0x23c>
   135b8:	mov	r1, r6
   135bc:	mov	r2, #1
   135c0:	add	r0, pc, r0
   135c4:	bl	4da0 <rb_setenv@plt>
   135c8:	ldr	r0, [pc, #236]	; 136bc <rb_helper_start+0x240>
   135cc:	ldr	r1, [pc, #236]	; 136c0 <rb_helper_start+0x244>
   135d0:	mov	r2, #1
   135d4:	add	r0, pc, r0
   135d8:	add	r1, pc, r1
   135dc:	bl	4da0 <rb_setenv@plt>
   135e0:	ldr	r2, [pc, #220]	; 136c4 <rb_helper_start+0x248>
   135e4:	mov	r0, r5
   135e8:	mov	r1, #128	; 0x80
   135ec:	mov	r3, r9
   135f0:	add	r2, pc, r2
   135f4:	bl	53f4 <snprintf@plt>
   135f8:	mov	r4, #0
   135fc:	sub	r1, fp, #36	; 0x24
   13600:	mov	r0, r8
   13604:	str	r5, [fp, #-36]	; 0xffffffdc
   13608:	str	r4, [fp, #-32]	; 0xffffffe0
   1360c:	bl	53dc <rb_spawn_process@plt>
   13610:	cmn	r0, #1
   13614:	beq	13670 <rb_helper_start+0x1f4>
   13618:	mov	r5, r0
   1361c:	ldr	r0, [sp, #24]
   13620:	bl	5100 <rb_close@plt>
   13624:	ldr	r0, [sp, #12]
   13628:	bl	5100 <rb_close@plt>
   1362c:	add	r0, sl, #4
   13630:	bl	5340 <rb_linebuf_newbuf@plt>
   13634:	add	r0, sl, #32
   13638:	bl	5340 <rb_linebuf_newbuf@plt>
   1363c:	ldr	r0, [sp, #20]
   13640:	ldr	r1, [sp, #16]
   13644:	add	r2, sl, #60	; 0x3c
   13648:	stm	r2, {r0, r1, r5}
   1364c:	str	r4, [sl, #72]	; 0x48
   13650:	mov	r4, sl
   13654:	ldr	r0, [sp, #4]
   13658:	str	r0, [sl, #76]	; 0x4c
   1365c:	ldr	r0, [sp, #8]
   13660:	str	r0, [sl, #80]	; 0x50
   13664:	mov	r0, r4
   13668:	sub	sp, fp, #28
   1366c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13670:	ldr	r0, [sp, #20]
   13674:	bl	5100 <rb_close@plt>
   13678:	ldr	r0, [sp, #24]
   1367c:	bl	5100 <rb_close@plt>
   13680:	ldr	r0, [sp, #12]
   13684:	bl	5100 <rb_close@plt>
   13688:	ldr	r0, [sp, #16]
   1368c:	bl	5100 <rb_close@plt>
   13690:	mov	r0, sl
   13694:	bl	4f98 <free@plt>
   13698:	mov	r0, r4
   1369c:	sub	sp, fp, #28
   136a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136a4:	bl	51fc <rb_outofmemory@plt>
   136a8:	.word	0x00007b20
   136ac:	.word	0x00007af5
   136b0:	.word	0x00006e1d
   136b4:	.word	0x00007a10
   136b8:	.word	0x00007a00
   136bc:	.word	0x000079f0
   136c0:	.word	0x00007a47
   136c4:	.word	0x00007a33

000136c8 <rb_helper_restart>:
   136c8:	ldr	r1, [r0, #80]	; 0x50
   136cc:	bx	r1

000136d0 <rb_helper_write_queue>:
   136d0:	sub	sp, sp, #8
   136d4:	push	{fp, lr}
   136d8:	mov	fp, sp
   136dc:	sub	sp, sp, #24
   136e0:	str	r2, [fp, #8]
   136e4:	str	r1, [sp, #4]
   136e8:	mov	r1, #0
   136ec:	sub	r2, fp, #4
   136f0:	add	r0, r0, #4
   136f4:	str	r3, [fp, #12]
   136f8:	str	r1, [sp]
   136fc:	str	r1, [sp, #8]
   13700:	str	r2, [sp, #12]
   13704:	str	r1, [sp, #16]
   13708:	add	r1, fp, #8
   1370c:	str	r1, [fp, #-4]
   13710:	mov	r1, sp
   13714:	bl	5430 <rb_linebuf_put@plt>
   13718:	mov	sp, fp
   1371c:	pop	{fp, lr}
   13720:	add	sp, sp, #8
   13724:	bx	lr

00013728 <rb_helper_write_flush>:
   13728:	push	{r4, r5, r6, sl, fp, lr}
   1372c:	add	fp, sp, #16
   13730:	mov	r4, r0
   13734:	ldr	r0, [r0, #16]
   13738:	cmp	r0, #1
   1373c:	poplt	{r4, r5, r6, sl, fp, pc}
   13740:	ldr	r6, [r4, #64]	; 0x40
   13744:	add	r5, r4, #4
   13748:	mov	r0, r6
   1374c:	mov	r1, r5
   13750:	bl	5064 <rb_linebuf_flush@plt>
   13754:	cmp	r0, #0
   13758:	bgt	13748 <rb_helper_write_flush+0x20>
   1375c:	beq	1379c <rb_helper_write_flush+0x74>
   13760:	bl	552c <__errno_location@plt>
   13764:	ldr	r0, [r0]
   13768:	bl	4cbc <rb_ignore_errno@plt>
   1376c:	cmp	r0, #0
   13770:	beq	1379c <rb_helper_write_flush+0x74>
   13774:	ldr	r0, [r4, #16]
   13778:	cmp	r0, #1
   1377c:	blt	137ac <rb_helper_write_flush+0x84>
   13780:	ldr	r0, [r4, #64]	; 0x40
   13784:	ldr	r2, [pc, #36]	; 137b0 <rb_helper_write_flush+0x88>
   13788:	mov	r1, #2
   1378c:	mov	r3, r4
   13790:	add	r2, pc, r2
   13794:	pop	{r4, r5, r6, sl, fp, lr}
   13798:	b	4d7c <rb_setselect@plt>
   1379c:	ldr	r1, [r4, #80]	; 0x50
   137a0:	mov	r0, r4
   137a4:	pop	{r4, r5, r6, sl, fp, lr}
   137a8:	bx	r1
   137ac:	pop	{r4, r5, r6, sl, fp, pc}
   137b0:	.word	0x0000001c

000137b4 <rb_helper_write_sendq>:
   137b4:	push	{r4, r5, r6, sl, fp, lr}
   137b8:	add	fp, sp, #16
   137bc:	mov	r5, r0
   137c0:	ldr	r0, [r1, #16]
   137c4:	cmp	r0, #1
   137c8:	poplt	{r4, r5, r6, sl, fp, pc}
   137cc:	mov	r4, r1
   137d0:	add	r6, r1, #4
   137d4:	mov	r0, r5
   137d8:	mov	r1, r6
   137dc:	bl	5064 <rb_linebuf_flush@plt>
   137e0:	cmp	r0, #0
   137e4:	bgt	137d4 <rb_helper_write_sendq+0x20>
   137e8:	beq	13828 <rb_helper_write_sendq+0x74>
   137ec:	bl	552c <__errno_location@plt>
   137f0:	ldr	r0, [r0]
   137f4:	bl	4cbc <rb_ignore_errno@plt>
   137f8:	cmp	r0, #0
   137fc:	beq	13828 <rb_helper_write_sendq+0x74>
   13800:	ldr	r0, [r4, #16]
   13804:	cmp	r0, #1
   13808:	blt	13838 <rb_helper_write_sendq+0x84>
   1380c:	ldr	r0, [r4, #64]	; 0x40
   13810:	ldr	r2, [pc, #36]	; 1383c <rb_helper_write_sendq+0x88>
   13814:	mov	r1, #2
   13818:	mov	r3, r4
   1381c:	add	r2, pc, r2
   13820:	pop	{r4, r5, r6, sl, fp, lr}
   13824:	b	4d7c <rb_setselect@plt>
   13828:	ldr	r1, [r4, #80]	; 0x50
   1382c:	mov	r0, r4
   13830:	pop	{r4, r5, r6, sl, fp, lr}
   13834:	bx	r1
   13838:	pop	{r4, r5, r6, sl, fp, pc}
   1383c:	.word	0xffffff90

00013840 <rb_helper_write>:
   13840:	sub	sp, sp, #8
   13844:	push	{r4, r5, r6, sl, fp, lr}
   13848:	add	fp, sp, #16
   1384c:	sub	sp, sp, #24
   13850:	mov	r4, r0
   13854:	str	r1, [sp, #4]
   13858:	mov	r0, #0
   1385c:	add	r1, sp, #20
   13860:	str	r3, [fp, #12]
   13864:	str	r2, [fp, #8]
   13868:	str	r0, [sp]
   1386c:	str	r0, [sp, #8]
   13870:	str	r1, [sp, #12]
   13874:	str	r0, [sp, #16]
   13878:	add	r0, fp, #8
   1387c:	add	r5, r4, #4
   13880:	mov	r1, sp
   13884:	str	r0, [sp, #20]
   13888:	mov	r0, r5
   1388c:	bl	5430 <rb_linebuf_put@plt>
   13890:	ldr	r0, [r4, #16]
   13894:	cmp	r0, #1
   13898:	blt	138f0 <rb_helper_write+0xb0>
   1389c:	ldr	r6, [r4, #64]	; 0x40
   138a0:	mov	r0, r6
   138a4:	mov	r1, r5
   138a8:	bl	5064 <rb_linebuf_flush@plt>
   138ac:	cmp	r0, #0
   138b0:	bgt	138a0 <rb_helper_write+0x60>
   138b4:	beq	13900 <rb_helper_write+0xc0>
   138b8:	bl	552c <__errno_location@plt>
   138bc:	ldr	r0, [r0]
   138c0:	bl	4cbc <rb_ignore_errno@plt>
   138c4:	cmp	r0, #0
   138c8:	beq	13900 <rb_helper_write+0xc0>
   138cc:	ldr	r0, [r4, #16]
   138d0:	cmp	r0, #1
   138d4:	blt	138f0 <rb_helper_write+0xb0>
   138d8:	ldr	r0, [r4, #64]	; 0x40
   138dc:	ldr	r2, [pc, #56]	; 1391c <rb_helper_write+0xdc>
   138e0:	mov	r1, #2
   138e4:	mov	r3, r4
   138e8:	add	r2, pc, r2
   138ec:	bl	4d7c <rb_setselect@plt>
   138f0:	sub	sp, fp, #16
   138f4:	pop	{r4, r5, r6, sl, fp, lr}
   138f8:	add	sp, sp, #8
   138fc:	bx	lr
   13900:	ldr	r1, [r4, #80]	; 0x50
   13904:	mov	r0, r4
   13908:	blx	r1
   1390c:	sub	sp, fp, #16
   13910:	pop	{r4, r5, r6, sl, fp, lr}
   13914:	add	sp, sp, #8
   13918:	bx	lr
   1391c:	.word	0xfffffec4

00013920 <rb_helper_run>:
   13920:	cmp	r0, #0
   13924:	bxeq	lr
   13928:	mov	r1, r0
   1392c:	ldr	r0, [r0, #60]	; 0x3c
   13930:	b	13934 <rb_helper_read_cb>

00013934 <rb_helper_read_cb>:
   13934:	push	{r4, r5, r6, sl, fp, lr}
   13938:	add	fp, sp, #16
   1393c:	cmp	r1, #0
   13940:	popeq	{r4, r5, r6, sl, fp, pc}
   13944:	mov	r4, r1
   13948:	ldr	r0, [r1, #60]	; 0x3c
   1394c:	ldr	r1, [pc, #160]	; 139f4 <rb_helper_read_cb+0xc0>
   13950:	mov	r2, #32768	; 0x8000
   13954:	add	r1, pc, r1
   13958:	bl	5028 <rb_read@plt>
   1395c:	mov	r2, r0
   13960:	cmp	r0, #1
   13964:	blt	139ac <rb_helper_read_cb+0x78>
   13968:	ldr	r6, [pc, #136]	; 139f8 <rb_helper_read_cb+0xc4>
   1396c:	add	r5, r4, #32
   13970:	add	r6, pc, r6
   13974:	mov	r0, r5
   13978:	mov	r1, r6
   1397c:	mov	r3, #0
   13980:	bl	4f2c <rb_linebuf_parse@plt>
   13984:	ldr	r1, [r4, #76]	; 0x4c
   13988:	mov	r0, r4
   1398c:	blx	r1
   13990:	ldr	r0, [r4, #60]	; 0x3c
   13994:	mov	r1, r6
   13998:	mov	r2, #32768	; 0x8000
   1399c:	bl	5028 <rb_read@plt>
   139a0:	mov	r2, r0
   139a4:	cmp	r0, #0
   139a8:	bgt	13974 <rb_helper_read_cb+0x40>
   139ac:	cmp	r2, #0
   139b0:	beq	139e4 <rb_helper_read_cb+0xb0>
   139b4:	bl	552c <__errno_location@plt>
   139b8:	ldr	r0, [r0]
   139bc:	bl	4cbc <rb_ignore_errno@plt>
   139c0:	cmp	r0, #0
   139c4:	beq	139e4 <rb_helper_read_cb+0xb0>
   139c8:	ldr	r0, [r4, #60]	; 0x3c
   139cc:	ldr	r2, [pc, #40]	; 139fc <rb_helper_read_cb+0xc8>
   139d0:	mov	r1, #1
   139d4:	mov	r3, r4
   139d8:	add	r2, pc, r2
   139dc:	pop	{r4, r5, r6, sl, fp, lr}
   139e0:	b	4d7c <rb_setselect@plt>
   139e4:	ldr	r1, [r4, #80]	; 0x50
   139e8:	mov	r0, r4
   139ec:	pop	{r4, r5, r6, sl, fp, lr}
   139f0:	bx	r1
   139f4:	.word	0x0002d980
   139f8:	.word	0x0002d964
   139fc:	.word	0xffffff54

00013a00 <rb_helper_close>:
   13a00:	cmp	r0, #0
   13a04:	bxeq	lr
   13a08:	push	{r4, sl, fp, lr}
   13a0c:	add	fp, sp, #8
   13a10:	mov	r4, r0
   13a14:	ldr	r0, [r0, #68]	; 0x44
   13a18:	mov	r1, #9
   13a1c:	bl	4f8c <rb_kill@plt>
   13a20:	ldr	r0, [r4, #60]	; 0x3c
   13a24:	bl	5100 <rb_close@plt>
   13a28:	ldr	r0, [r4, #64]	; 0x40
   13a2c:	bl	5100 <rb_close@plt>
   13a30:	mov	r0, r4
   13a34:	pop	{r4, sl, fp, lr}
   13a38:	b	4f98 <free@plt>

00013a3c <rb_helper_read>:
   13a3c:	push	{fp, lr}
   13a40:	mov	fp, sp
   13a44:	sub	sp, sp, #8
   13a48:	mov	r3, #0
   13a4c:	add	r0, r0, #32
   13a50:	str	r3, [sp]
   13a54:	mov	r3, #0
   13a58:	bl	5040 <rb_linebuf_get@plt>
   13a5c:	mov	sp, fp
   13a60:	pop	{fp, pc}

00013a64 <rb_helper_loop>:
   13a64:	push	{fp, lr}
   13a68:	mov	fp, sp
   13a6c:	mov	r4, r1
   13a70:	bl	4c44 <rb_helper_run@plt>
   13a74:	mov	r0, r4
   13a78:	bl	4fec <rb_lib_loop@plt>

00013a7c <rb_init_netio_devpoll>:
   13a7c:	mov	r0, #38	; 0x26
   13a80:	bx	lr

00013a84 <rb_setselect_devpoll>:
   13a84:	push	{fp, lr}
   13a88:	mov	fp, sp
   13a8c:	bl	552c <__errno_location@plt>
   13a90:	mov	r1, #38	; 0x26
   13a94:	str	r1, [r0]
   13a98:	pop	{fp, pc}

00013a9c <rb_select_devpoll>:
   13a9c:	push	{fp, lr}
   13aa0:	mov	fp, sp
   13aa4:	bl	552c <__errno_location@plt>
   13aa8:	mov	r1, #38	; 0x26
   13aac:	str	r1, [r0]
   13ab0:	mvn	r0, #0
   13ab4:	pop	{fp, pc}

00013ab8 <rb_setup_fd_devpoll>:
   13ab8:	push	{fp, lr}
   13abc:	mov	fp, sp
   13ac0:	bl	552c <__errno_location@plt>
   13ac4:	mov	r1, #38	; 0x26
   13ac8:	str	r1, [r0]
   13acc:	mvn	r0, #0
   13ad0:	pop	{fp, pc}

00013ad4 <rb_init_netio_epoll>:
   13ad4:	push	{r4, sl, fp, lr}
   13ad8:	add	fp, sp, #8
   13adc:	ldr	r4, [pc, #128]	; 13b64 <rb_init_netio_epoll+0x90>
   13ae0:	mov	r0, #0
   13ae4:	mov	r1, #12
   13ae8:	add	r4, pc, r4
   13aec:	strb	r0, [r4]
   13af0:	str	r0, [r4, #4]
   13af4:	mov	r0, #1
   13af8:	bl	4ea8 <calloc@plt>
   13afc:	cmp	r0, #0
   13b00:	beq	13b60 <rb_init_netio_epoll+0x8c>
   13b04:	str	r0, [r4, #8]
   13b08:	bl	4c98 <getdtablesize@plt>
   13b0c:	ldr	r1, [r4, #8]
   13b10:	str	r0, [r1, #8]
   13b14:	bl	4dc4 <epoll_create@plt>
   13b18:	ldr	r1, [r4, #8]
   13b1c:	cmp	r0, #0
   13b20:	str	r0, [r1]
   13b24:	mvnlt	r0, #0
   13b28:	poplt	{r4, sl, fp, pc}
   13b2c:	ldr	r2, [pc, #52]	; 13b68 <rb_init_netio_epoll+0x94>
   13b30:	mov	r1, #64	; 0x40
   13b34:	add	r2, pc, r2
   13b38:	bl	52e0 <rb_open@plt>
   13b3c:	ldr	r4, [r4, #8]
   13b40:	ldr	r0, [r4, #8]
   13b44:	lsl	r1, r0, #4
   13b48:	mov	r0, #1
   13b4c:	bl	4ea8 <calloc@plt>
   13b50:	cmp	r0, #0
   13b54:	strne	r0, [r4, #4]
   13b58:	movne	r0, #0
   13b5c:	popne	{r4, sl, fp, pc}
   13b60:	bl	51fc <rb_outofmemory@plt>
   13b64:	.word	0x000360f8
   13b68:	.word	0x000074ff

00013b6c <rb_setup_fd_epoll>:
   13b6c:	mov	r0, #0
   13b70:	bx	lr

00013b74 <rb_setselect_epoll>:
   13b74:	push	{fp, lr}
   13b78:	mov	fp, sp
   13b7c:	sub	sp, sp, #16
   13b80:	ldr	ip, [r0, #20]
   13b84:	tst	r1, #1
   13b88:	mov	lr, ip
   13b8c:	beq	13ba8 <rb_setselect_epoll+0x34>
   13b90:	orr	lr, ip, #1
   13b94:	cmp	r2, #0
   13b98:	str	r2, [r0, #28]
   13b9c:	str	r3, [r0, #32]
   13ba0:	biceq	lr, ip, #1
   13ba4:	str	lr, [r0, #20]
   13ba8:	tst	r1, #2
   13bac:	bne	13bdc <rb_setselect_epoll+0x68>
   13bb0:	mov	r3, lr
   13bb4:	orrs	r1, r3, ip
   13bb8:	beq	13c44 <rb_setselect_epoll+0xd0>
   13bbc:	cmp	r3, #1
   13bc0:	blt	13c00 <rb_setselect_epoll+0x8c>
   13bc4:	cmp	ip, #0
   13bc8:	beq	13c10 <rb_setselect_epoll+0x9c>
   13bcc:	mov	r1, #3
   13bd0:	cmp	r3, ip
   13bd4:	bne	13c14 <rb_setselect_epoll+0xa0>
   13bd8:	b	13c44 <rb_setselect_epoll+0xd0>
   13bdc:	str	r2, [r0, #36]	; 0x24
   13be0:	str	r3, [r0, #40]	; 0x28
   13be4:	orr	r3, lr, #4
   13be8:	cmp	r2, #0
   13bec:	biceq	r3, lr, #4
   13bf0:	str	r3, [r0, #20]
   13bf4:	orrs	r1, r3, ip
   13bf8:	bne	13bbc <rb_setselect_epoll+0x48>
   13bfc:	b	13c44 <rb_setselect_epoll+0xd0>
   13c00:	str	r0, [sp, #8]
   13c04:	str	r3, [sp]
   13c08:	mov	r1, #2
   13c0c:	b	13c20 <rb_setselect_epoll+0xac>
   13c10:	mov	r1, #1
   13c14:	orr	r2, r3, #-2147483648	; 0x80000000
   13c18:	str	r0, [sp, #8]
   13c1c:	str	r2, [sp]
   13c20:	ldr	r2, [r0, #12]
   13c24:	ldr	r0, [pc, #64]	; 13c6c <rb_setselect_epoll+0xf8>
   13c28:	mov	r3, sp
   13c2c:	add	r0, pc, r0
   13c30:	ldr	r0, [r0, #8]
   13c34:	ldr	r0, [r0]
   13c38:	bl	549c <epoll_ctl@plt>
   13c3c:	cmp	r0, #0
   13c40:	bne	13c4c <rb_setselect_epoll+0xd8>
   13c44:	mov	sp, fp
   13c48:	pop	{fp, pc}
   13c4c:	bl	552c <__errno_location@plt>
   13c50:	ldr	r0, [r0]
   13c54:	bl	4c80 <strerror@plt>
   13c58:	mov	r1, r0
   13c5c:	ldr	r0, [pc, #12]	; 13c70 <rb_setselect_epoll+0xfc>
   13c60:	add	r0, pc, r0
   13c64:	bl	519c <rb_lib_log@plt>
   13c68:	bl	4ca4 <abort@plt>
   13c6c:	.word	0x00035fb4
   13c70:	.word	0x000073e9

00013c74 <rb_select_epoll>:
   13c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c78:	add	fp, sp, #28
   13c7c:	sub	sp, sp, #20
   13c80:	ldr	r5, [pc, #372]	; 13dfc <rb_select_epoll+0x188>
   13c84:	mov	r3, r0
   13c88:	add	r5, pc, r5
   13c8c:	ldr	r2, [r5, #8]
   13c90:	ldm	r2, {r0, r1, r2}
   13c94:	bl	504c <epoll_wait@plt>
   13c98:	mov	r4, r0
   13c9c:	bl	552c <__errno_location@plt>
   13ca0:	ldr	r6, [r0]
   13ca4:	mov	r9, r0
   13ca8:	bl	5208 <rb_set_time@plt>
   13cac:	cmn	r4, #1
   13cb0:	str	r6, [r9]
   13cb4:	ble	13ddc <rb_select_epoll+0x168>
   13cb8:	cmp	r4, #0
   13cbc:	beq	13dd0 <rb_select_epoll+0x15c>
   13cc0:	mov	r6, #0
   13cc4:	mov	r8, #0
   13cc8:	ldr	r0, [r5, #8]
   13ccc:	ldr	r0, [r0, #4]
   13cd0:	ldrb	r1, [r0, r8, lsl #4]!
   13cd4:	ldr	r7, [r0, #8]
   13cd8:	tst	r1, #25
   13cdc:	ldr	sl, [r7, #20]
   13ce0:	beq	13d04 <rb_select_epoll+0x90>
   13ce4:	ldr	r2, [r7, #28]
   13ce8:	ldr	r1, [r7, #32]
   13cec:	str	r6, [r7, #28]
   13cf0:	str	r6, [r7, #32]
   13cf4:	cmp	r2, #0
   13cf8:	beq	13d04 <rb_select_epoll+0x90>
   13cfc:	mov	r0, r7
   13d00:	blx	r2
   13d04:	ldrb	r0, [r7, #16]
   13d08:	tst	r0, #1
   13d0c:	beq	13dc4 <rb_select_epoll+0x150>
   13d10:	ldr	r0, [r5, #8]
   13d14:	ldr	r0, [r0, #4]
   13d18:	ldrb	r0, [r0, r8, lsl #4]
   13d1c:	tst	r0, #28
   13d20:	beq	13d50 <rb_select_epoll+0xdc>
   13d24:	ldr	r2, [r7, #36]	; 0x24
   13d28:	ldr	r1, [r7, #40]	; 0x28
   13d2c:	str	r6, [r7, #36]	; 0x24
   13d30:	str	r6, [r7, #40]	; 0x28
   13d34:	cmp	r2, #0
   13d38:	beq	13d50 <rb_select_epoll+0xdc>
   13d3c:	mov	r0, r7
   13d40:	blx	r2
   13d44:	ldrb	r0, [r7, #16]
   13d48:	tst	r0, #1
   13d4c:	beq	13dc4 <rb_select_epoll+0x150>
   13d50:	ldr	r0, [r7, #28]
   13d54:	ldr	r1, [r7, #36]	; 0x24
   13d58:	cmp	r0, #0
   13d5c:	movwne	r0, #1
   13d60:	cmp	r1, #0
   13d64:	orrne	r0, r0, #4
   13d68:	cmp	sl, r0
   13d6c:	beq	13dc4 <rb_select_epoll+0x150>
   13d70:	cmp	r0, #0
   13d74:	str	r0, [sp]
   13d78:	str	r0, [r7, #20]
   13d7c:	str	r7, [sp, #8]
   13d80:	mov	r1, #3
   13d84:	mov	r3, sp
   13d88:	orrne	r0, r0, #-2147483648	; 0x80000000
   13d8c:	movweq	r1, #2
   13d90:	strne	r0, [sp]
   13d94:	ldr	r0, [r5, #8]
   13d98:	ldr	r2, [r7, #12]
   13d9c:	ldr	r0, [r0]
   13da0:	bl	549c <epoll_ctl@plt>
   13da4:	cmp	r0, #0
   13da8:	beq	13dc4 <rb_select_epoll+0x150>
   13dac:	ldr	r0, [r9]
   13db0:	bl	4c80 <strerror@plt>
   13db4:	mov	r1, r0
   13db8:	ldr	r0, [pc, #64]	; 13e00 <rb_select_epoll+0x18c>
   13dbc:	add	r0, pc, r0
   13dc0:	bl	519c <rb_lib_log@plt>
   13dc4:	add	r8, r8, #1
   13dc8:	cmp	r4, r8
   13dcc:	bne	13cc8 <rb_select_epoll+0x54>
   13dd0:	mov	r0, #0
   13dd4:	sub	sp, fp, #28
   13dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ddc:	mov	r0, r6
   13de0:	bl	4cbc <rb_ignore_errno@plt>
   13de4:	mov	r1, r0
   13de8:	mov	r0, #0
   13dec:	cmp	r1, #0
   13df0:	movweq	r0, #5
   13df4:	sub	sp, fp, #28
   13df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dfc:	.word	0x00035f58
   13e00:	.word	0x000072b8

00013e04 <rb_epoll_supports_event>:
   13e04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13e08:	add	fp, sp, #24
   13e0c:	sub	sp, sp, #288	; 0x120
   13e10:	ldr	r6, [pc, #268]	; 13f24 <rb_epoll_supports_event+0x120>
   13e14:	add	r6, pc, r6
   13e18:	ldr	r4, [r6, #4]
   13e1c:	cmp	r4, #1
   13e20:	beq	13e30 <rb_epoll_supports_event+0x2c>
   13e24:	cmn	r4, #1
   13e28:	bne	13e3c <rb_epoll_supports_event+0x38>
   13e2c:	mov	r4, #0
   13e30:	mov	r0, r4
   13e34:	sub	sp, fp, #24
   13e38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e3c:	ldr	r1, [pc, #228]	; 13f28 <rb_epoll_supports_event+0x124>
   13e40:	add	r2, sp, #128	; 0x80
   13e44:	mov	r0, #3
   13e48:	add	r1, pc, r1
   13e4c:	bl	4d64 <__xstat@plt>
   13e50:	cmp	r0, #0
   13e54:	beq	13eb0 <rb_epoll_supports_event+0xac>
   13e58:	mov	r0, #0
   13e5c:	mov	r1, #0
   13e60:	mov	r4, #0
   13e64:	bl	540c <timerfd_create@plt>
   13e68:	cmp	r0, #0
   13e6c:	blt	13e8c <rb_epoll_supports_event+0x88>
   13e70:	bl	51c0 <close@plt>
   13e74:	mov	r4, #1
   13e78:	str	r4, [r6, #4]
   13e7c:	strb	r4, [r6]
   13e80:	mov	r0, r4
   13e84:	sub	sp, fp, #24
   13e88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e8c:	mov	r0, #26
   13e90:	str	r4, [fp, #-84]	; 0xffffffac
   13e94:	sub	r1, fp, #92	; 0x5c
   13e98:	sub	r2, fp, #28
   13e9c:	str	r0, [fp, #-88]	; 0xffffffa8
   13ea0:	mov	r0, #0
   13ea4:	bl	4e00 <timer_create@plt>
   13ea8:	cmp	r0, #0
   13eac:	beq	13ec8 <rb_epoll_supports_event+0xc4>
   13eb0:	mvn	r0, #0
   13eb4:	mov	r4, #0
   13eb8:	str	r0, [r6, #4]
   13ebc:	mov	r0, r4
   13ec0:	sub	sp, fp, #24
   13ec4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ec8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13ecc:	bl	52d4 <timer_delete@plt>
   13ed0:	mov	r5, sp
   13ed4:	mov	r0, r5
   13ed8:	bl	4c74 <sigemptyset@plt>
   13edc:	mvn	r0, #0
   13ee0:	mov	r1, r5
   13ee4:	mov	r2, #0
   13ee8:	mvn	r7, #0
   13eec:	mov	r4, #0
   13ef0:	bl	4d1c <signalfd@plt>
   13ef4:	cmn	r0, #1
   13ef8:	ble	13f14 <rb_epoll_supports_event+0x110>
   13efc:	bl	51c0 <close@plt>
   13f00:	mov	r4, #1
   13f04:	str	r4, [r6, #4]
   13f08:	mov	r0, r4
   13f0c:	sub	sp, fp, #24
   13f10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f14:	str	r7, [r6, #4]
   13f18:	mov	r0, r4
   13f1c:	sub	sp, fp, #24
   13f20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f24:	.word	0x00035dcc
   13f28:	.word	0x00007254

00013f2c <rb_epoll_init_event>:
   13f2c:	push	{r4, r5, r6, sl, fp, lr}
   13f30:	add	fp, sp, #16
   13f34:	sub	sp, sp, #128	; 0x80
   13f38:	bl	13e04 <rb_epoll_supports_event>
   13f3c:	ldr	r5, [pc, #160]	; 13fe4 <rb_epoll_init_event+0xb8>
   13f40:	add	r5, pc, r5
   13f44:	ldrb	r0, [r5]
   13f48:	cmp	r0, #0
   13f4c:	bne	13fdc <rb_epoll_init_event+0xb0>
   13f50:	mov	r4, sp
   13f54:	mov	r0, r4
   13f58:	bl	4c74 <sigemptyset@plt>
   13f5c:	bl	4d58 <__libc_current_sigrtmin@plt>
   13f60:	mov	r1, r0
   13f64:	mov	r0, r4
   13f68:	bl	5118 <sigaddset@plt>
   13f6c:	mov	r0, #0
   13f70:	mov	r1, r4
   13f74:	mov	r2, #0
   13f78:	bl	5220 <sigprocmask@plt>
   13f7c:	mov	r0, r4
   13f80:	bl	4c74 <sigemptyset@plt>
   13f84:	bl	4d58 <__libc_current_sigrtmin@plt>
   13f88:	mov	r1, r0
   13f8c:	mov	r0, r4
   13f90:	bl	5118 <sigaddset@plt>
   13f94:	mvn	r0, #0
   13f98:	mov	r1, r4
   13f9c:	mov	r2, #0
   13fa0:	mvn	r6, #0
   13fa4:	bl	4d1c <signalfd@plt>
   13fa8:	cmn	r0, #1
   13fac:	streq	r6, [r5, #4]
   13fb0:	subeq	sp, fp, #16
   13fb4:	popeq	{r4, r5, r6, sl, fp, pc}
   13fb8:	ldr	r2, [pc, #40]	; 13fe8 <rb_epoll_init_event+0xbc>
   13fbc:	mov	r1, #64	; 0x40
   13fc0:	add	r2, pc, r2
   13fc4:	bl	52e0 <rb_open@plt>
   13fc8:	mov	r4, r0
   13fcc:	bl	4ed8 <rb_set_nb@plt>
   13fd0:	mov	r0, r4
   13fd4:	mov	r1, #0
   13fd8:	bl	13fec <signalfd_handler>
   13fdc:	sub	sp, fp, #16
   13fe0:	pop	{r4, r5, r6, sl, fp, pc}
   13fe4:	.word	0x00035ca0
   13fe8:	.word	0x000070f4

00013fec <signalfd_handler>:
   13fec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ff0:	add	fp, sp, #24
   13ff4:	ldr	r5, [pc, #388]	; 14180 <signalfd_handler+0x194>
   13ff8:	ldr	r6, [pc, #388]	; 14184 <signalfd_handler+0x198>
   13ffc:	mov	r4, r0
   14000:	mov	r0, #128	; 0x80
   14004:	add	r6, pc, r6
   14008:	add	r5, pc, r5
   1400c:	add	r1, r6, #128	; 0x80
   14010:	add	r2, r6, #256	; 0x100
   14014:	add	r3, r6, #384	; 0x180
   14018:	str	r6, [r5]
   1401c:	add	r7, r6, #896	; 0x380
   14020:	stmib	r5, {r0, r1}
   14024:	str	r0, [r5, #12]
   14028:	str	r2, [r5, #16]
   1402c:	str	r0, [r5, #20]
   14030:	str	r3, [r5, #24]
   14034:	add	r1, r6, #512	; 0x200
   14038:	add	r2, r6, #640	; 0x280
   1403c:	add	r3, r6, #768	; 0x300
   14040:	str	r0, [r5, #28]
   14044:	str	r1, [r5, #32]
   14048:	str	r0, [r5, #36]	; 0x24
   1404c:	str	r2, [r5, #40]	; 0x28
   14050:	str	r0, [r5, #44]	; 0x2c
   14054:	str	r3, [r5, #48]	; 0x30
   14058:	str	r0, [r5, #52]	; 0x34
   1405c:	str	r7, [r5, #56]	; 0x38
   14060:	add	r1, r6, #1024	; 0x400
   14064:	add	r2, r6, #1152	; 0x480
   14068:	add	r3, r6, #1280	; 0x500
   1406c:	add	r7, r6, #1408	; 0x580
   14070:	str	r0, [r5, #60]	; 0x3c
   14074:	str	r1, [r5, #64]	; 0x40
   14078:	str	r0, [r5, #68]	; 0x44
   1407c:	str	r2, [r5, #72]	; 0x48
   14080:	str	r0, [r5, #76]	; 0x4c
   14084:	str	r3, [r5, #80]	; 0x50
   14088:	str	r0, [r5, #84]	; 0x54
   1408c:	str	r7, [r5, #88]	; 0x58
   14090:	add	r1, r6, #1536	; 0x600
   14094:	add	r2, r6, #1664	; 0x680
   14098:	add	r3, r6, #1792	; 0x700
   1409c:	add	r7, r6, #1920	; 0x780
   140a0:	str	r0, [r5, #92]	; 0x5c
   140a4:	str	r1, [r5, #96]	; 0x60
   140a8:	str	r0, [r5, #100]	; 0x64
   140ac:	str	r2, [r5, #104]	; 0x68
   140b0:	str	r0, [r5, #108]	; 0x6c
   140b4:	str	r3, [r5, #112]	; 0x70
   140b8:	str	r0, [r5, #116]	; 0x74
   140bc:	str	r7, [r5, #120]	; 0x78
   140c0:	str	r0, [r5, #124]	; 0x7c
   140c4:	mov	r0, r4
   140c8:	bl	4db8 <rb_get_fd@plt>
   140cc:	mov	r1, r5
   140d0:	mov	r2, #16
   140d4:	bl	54b4 <readv@plt>
   140d8:	cmp	r0, #0
   140dc:	beq	14170 <signalfd_handler+0x184>
   140e0:	ldr	r8, [pc, #160]	; 14188 <signalfd_handler+0x19c>
   140e4:	add	r5, r6, #48	; 0x30
   140e8:	add	r8, pc, r8
   140ec:	cmp	r0, #0
   140f0:	blt	14140 <signalfd_handler+0x154>
   140f4:	cmp	r0, #128	; 0x80
   140f8:	blt	14120 <signalfd_handler+0x134>
   140fc:	lsr	r7, r0, #7
   14100:	mov	r6, r5
   14104:	ldr	r0, [r6]
   14108:	cmp	r0, #0
   1410c:	beq	14114 <signalfd_handler+0x128>
   14110:	bl	513c <rb_run_one_event@plt>
   14114:	add	r6, r6, #128	; 0x80
   14118:	subs	r7, r7, #1
   1411c:	bne	14104 <signalfd_handler+0x118>
   14120:	mov	r0, r4
   14124:	bl	4db8 <rb_get_fd@plt>
   14128:	mov	r1, r8
   1412c:	mov	r2, #16
   14130:	bl	54b4 <readv@plt>
   14134:	cmp	r0, #0
   14138:	bne	140ec <signalfd_handler+0x100>
   1413c:	b	14170 <signalfd_handler+0x184>
   14140:	bl	552c <__errno_location@plt>
   14144:	ldr	r0, [r0]
   14148:	bl	4cbc <rb_ignore_errno@plt>
   1414c:	cmp	r0, #0
   14150:	beq	14170 <signalfd_handler+0x184>
   14154:	ldr	r2, [pc, #48]	; 1418c <signalfd_handler+0x1a0>
   14158:	mov	r0, r4
   1415c:	mov	r1, #1
   14160:	mov	r3, #0
   14164:	add	r2, pc, r2
   14168:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1416c:	b	4d7c <rb_setselect@plt>
   14170:	mov	r0, r4
   14174:	bl	5100 <rb_close@plt>
   14178:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1417c:	b	13f2c <rb_epoll_init_event>
   14180:	.word	0x00035ad0
   14184:	.word	0x000352d4
   14188:	.word	0x000359f0
   1418c:	.word	0xfffffe80

00014190 <rb_epoll_sched_event>:
   14190:	push	{r4, r5, r6, r7, fp, lr}
   14194:	add	fp, sp, #16
   14198:	sub	sp, sp, #80	; 0x50
   1419c:	mov	r5, r0
   141a0:	ldr	r0, [pc, #584]	; 143f0 <rb_epoll_sched_event+0x260>
   141a4:	mov	r6, r1
   141a8:	add	r0, pc, r0
   141ac:	ldrb	r0, [r0]
   141b0:	cmp	r0, #1
   141b4:	bne	14284 <rb_epoll_sched_event+0xf4>
   141b8:	mov	r0, #0
   141bc:	mov	r1, #0
   141c0:	mov	r4, #0
   141c4:	bl	540c <timerfd_create@plt>
   141c8:	cmn	r0, #1
   141cc:	ble	14340 <rb_epoll_sched_event+0x1b0>
   141d0:	str	r4, [sp, #20]
   141d4:	str	r4, [sp, #16]
   141d8:	str	r6, [sp, #24]
   141dc:	str	r4, [sp, #28]
   141e0:	mov	r7, r0
   141e4:	add	r2, sp, #16
   141e8:	mov	r3, #0
   141ec:	mov	r4, #0
   141f0:	ldr	r0, [r5, #24]
   141f4:	cmp	r0, #0
   141f8:	addne	r0, sp, #16
   141fc:	addne	r0, r0, #8
   14200:	ldrdne	r0, [r0]
   14204:	strne	r1, [sp, #20]
   14208:	strne	r0, [sp, #16]
   1420c:	mov	r0, r7
   14210:	mov	r1, #0
   14214:	bl	5490 <timerfd_settime@plt>
   14218:	cmn	r0, #1
   1421c:	ble	14390 <rb_epoll_sched_event+0x200>
   14220:	ldr	r3, [r5, #20]
   14224:	ldr	r4, [pc, #464]	; 143fc <rb_epoll_sched_event+0x26c>
   14228:	ldr	r2, [pc, #464]	; 14400 <rb_epoll_sched_event+0x270>
   1422c:	mov	r1, #136	; 0x88
   14230:	add	r4, pc, r4
   14234:	add	r2, pc, r2
   14238:	mov	r0, r4
   1423c:	bl	53f4 <snprintf@plt>
   14240:	mov	r0, r7
   14244:	mov	r1, #64	; 0x40
   14248:	mov	r2, r4
   1424c:	bl	52e0 <rb_open@plt>
   14250:	mov	r6, r0
   14254:	bl	4ed8 <rb_set_nb@plt>
   14258:	str	r6, [r5, #40]	; 0x28
   1425c:	mov	r0, r6
   14260:	mov	r1, #1
   14264:	mov	r3, r5
   14268:	mov	r4, #1
   1426c:	ldr	r2, [pc, #400]	; 14404 <rb_epoll_sched_event+0x274>
   14270:	add	r2, pc, r2
   14274:	bl	4d7c <rb_setselect@plt>
   14278:	mov	r0, r4
   1427c:	sub	sp, fp, #16
   14280:	pop	{r4, r5, r6, r7, fp, pc}
   14284:	add	r0, sp, #16
   14288:	vmov.i32	q8, #0	; 0x00000000
   1428c:	add	r1, r0, #32
   14290:	vst1.64	{d16-d17}, [r1]
   14294:	add	r1, r0, #16
   14298:	vst1.64	{d16-d17}, [r1]
   1429c:	mov	r1, #48	; 0x30
   142a0:	vst1.64	{d16-d17}, [r0], r1
   142a4:	mov	r1, #4
   142a8:	vst1.64	{d16-d17}, [r0]
   142ac:	mov	r0, #1
   142b0:	bl	4ea8 <calloc@plt>
   142b4:	cmp	r0, #0
   142b8:	beq	143ec <rb_epoll_sched_event+0x25c>
   142bc:	mov	r4, #0
   142c0:	str	r0, [r5, #40]	; 0x28
   142c4:	mov	r7, r0
   142c8:	str	r4, [sp, #24]
   142cc:	bl	4d58 <__libc_current_sigrtmin@plt>
   142d0:	str	r0, [sp, #20]
   142d4:	add	r1, sp, #16
   142d8:	mov	r0, #0
   142dc:	mov	r2, r7
   142e0:	str	r5, [sp, #16]
   142e4:	bl	4e00 <timer_create@plt>
   142e8:	cmn	r0, #1
   142ec:	ble	14368 <rb_epoll_sched_event+0x1d8>
   142f0:	str	r4, [sp]
   142f4:	stmib	sp, {r4, r6}
   142f8:	str	r4, [sp, #12]
   142fc:	mov	r2, sp
   14300:	mov	r3, #0
   14304:	ldr	r0, [r5, #24]
   14308:	cmp	r0, #0
   1430c:	movne	r0, sp
   14310:	addne	r0, r0, #8
   14314:	ldrdne	r0, [r0]
   14318:	stmne	sp, {r0, r1}
   1431c:	mov	r1, #0
   14320:	ldr	r0, [r7]
   14324:	bl	4ff8 <timer_settime@plt>
   14328:	mov	r4, #1
   1432c:	cmn	r0, #1
   14330:	ble	143c0 <rb_epoll_sched_event+0x230>
   14334:	mov	r0, r4
   14338:	sub	sp, fp, #16
   1433c:	pop	{r4, r5, r6, r7, fp, pc}
   14340:	bl	552c <__errno_location@plt>
   14344:	ldr	r0, [r0]
   14348:	bl	4c80 <strerror@plt>
   1434c:	mov	r1, r0
   14350:	ldr	r0, [pc, #156]	; 143f4 <rb_epoll_sched_event+0x264>
   14354:	add	r0, pc, r0
   14358:	bl	519c <rb_lib_log@plt>
   1435c:	mov	r0, r4
   14360:	sub	sp, fp, #16
   14364:	pop	{r4, r5, r6, r7, fp, pc}
   14368:	bl	552c <__errno_location@plt>
   1436c:	ldr	r0, [r0]
   14370:	bl	4c80 <strerror@plt>
   14374:	mov	r1, r0
   14378:	ldr	r0, [pc, #136]	; 14408 <rb_epoll_sched_event+0x278>
   1437c:	add	r0, pc, r0
   14380:	bl	519c <rb_lib_log@plt>
   14384:	mov	r0, r4
   14388:	sub	sp, fp, #16
   1438c:	pop	{r4, r5, r6, r7, fp, pc}
   14390:	bl	552c <__errno_location@plt>
   14394:	ldr	r0, [r0]
   14398:	bl	4c80 <strerror@plt>
   1439c:	mov	r1, r0
   143a0:	ldr	r0, [pc, #80]	; 143f8 <rb_epoll_sched_event+0x268>
   143a4:	add	r0, pc, r0
   143a8:	bl	519c <rb_lib_log@plt>
   143ac:	mov	r0, r7
   143b0:	bl	51c0 <close@plt>
   143b4:	mov	r0, r4
   143b8:	sub	sp, fp, #16
   143bc:	pop	{r4, r5, r6, r7, fp, pc}
   143c0:	bl	552c <__errno_location@plt>
   143c4:	ldr	r0, [r0]
   143c8:	bl	4c80 <strerror@plt>
   143cc:	mov	r1, r0
   143d0:	ldr	r0, [pc, #52]	; 1440c <rb_epoll_sched_event+0x27c>
   143d4:	add	r0, pc, r0
   143d8:	bl	519c <rb_lib_log@plt>
   143dc:	mov	r4, #0
   143e0:	mov	r0, r4
   143e4:	sub	sp, fp, #16
   143e8:	pop	{r4, r5, r6, r7, fp, pc}
   143ec:	bl	51fc <rb_outofmemory@plt>
   143f0:	.word	0x00035a38
   143f4:	.word	0x00006d69
   143f8:	.word	0x00006d2d
   143fc:	.word	0x00035928
   14400:	.word	0x00006eb2
   14404:	.word	0x000001f4
   14408:	.word	0x00006da7
   1440c:	.word	0x00006d61

00014410 <rb_epoll_unsched_event>:
   14410:	push	{r4, sl, fp, lr}
   14414:	add	fp, sp, #8
   14418:	mov	r4, r0
   1441c:	ldr	r0, [r0, #40]	; 0x28
   14420:	ldr	r1, [pc, #64]	; 14468 <rb_epoll_unsched_event+0x58>
   14424:	add	r1, pc, r1
   14428:	ldrb	r1, [r1]
   1442c:	cmp	r1, #1
   14430:	bne	14444 <rb_epoll_unsched_event+0x34>
   14434:	bl	5100 <rb_close@plt>
   14438:	mov	r0, #0
   1443c:	str	r0, [r4, #40]	; 0x28
   14440:	pop	{r4, sl, fp, pc}
   14444:	ldr	r0, [r0]
   14448:	bl	52d4 <timer_delete@plt>
   1444c:	ldr	r0, [r4, #40]	; 0x28
   14450:	cmp	r0, #0
   14454:	beq	1445c <rb_epoll_unsched_event+0x4c>
   14458:	bl	4f98 <free@plt>
   1445c:	mov	r0, #0
   14460:	str	r0, [r4, #40]	; 0x28
   14464:	pop	{r4, sl, fp, pc}
   14468:	.word	0x000357bc

0001446c <rb_read_timerfd>:
   1446c:	push	{r4, r5, fp, lr}
   14470:	add	fp, sp, #8
   14474:	sub	sp, sp, #8
   14478:	mov	r5, r0
   1447c:	cmp	r1, #0
   14480:	beq	144e4 <rb_read_timerfd+0x78>
   14484:	mov	r4, r1
   14488:	mov	r1, sp
   1448c:	mov	r0, r5
   14490:	mov	r2, #8
   14494:	bl	5028 <rb_read@plt>
   14498:	cmp	r0, #0
   1449c:	beq	144f4 <rb_read_timerfd+0x88>
   144a0:	cmn	r0, #1
   144a4:	bgt	144bc <rb_read_timerfd+0x50>
   144a8:	bl	552c <__errno_location@plt>
   144ac:	ldr	r0, [r0]
   144b0:	bl	4cbc <rb_ignore_errno@plt>
   144b4:	cmp	r0, #0
   144b8:	beq	144f4 <rb_read_timerfd+0x88>
   144bc:	ldr	r2, [pc, #104]	; 1452c <rb_read_timerfd+0xc0>
   144c0:	mov	r0, r5
   144c4:	mov	r1, #1
   144c8:	mov	r3, r4
   144cc:	add	r2, pc, r2
   144d0:	bl	4d7c <rb_setselect@plt>
   144d4:	mov	r0, r4
   144d8:	bl	513c <rb_run_one_event@plt>
   144dc:	sub	sp, fp, #8
   144e0:	pop	{r4, r5, fp, pc}
   144e4:	mov	r0, r5
   144e8:	bl	5100 <rb_close@plt>
   144ec:	sub	sp, fp, #8
   144f0:	pop	{r4, r5, fp, pc}
   144f4:	mov	r0, r5
   144f8:	bl	5100 <rb_close@plt>
   144fc:	ldr	r4, [r4, #20]
   14500:	bl	552c <__errno_location@plt>
   14504:	ldr	r0, [r0]
   14508:	bl	4c80 <strerror@plt>
   1450c:	mov	r2, r0
   14510:	ldr	r0, [pc, #16]	; 14528 <rb_read_timerfd+0xbc>
   14514:	mov	r1, r4
   14518:	add	r0, pc, r0
   1451c:	bl	519c <rb_lib_log@plt>
   14520:	sub	sp, fp, #8
   14524:	pop	{r4, r5, fp, pc}
   14528:	.word	0x00006bda
   1452c:	.word	0xffffff98

00014530 <rb_setup_fd_poll>:
   14530:	mov	r0, #0
   14534:	bx	lr

00014538 <rb_init_netio_poll>:
   14538:	push	{r4, r5, r6, sl, fp, lr}
   1453c:	add	fp, sp, #16
   14540:	bl	4d40 <rb_getmaxconnect@plt>
   14544:	lsl	r1, r0, #3
   14548:	mov	r0, #1
   1454c:	bl	4ea8 <calloc@plt>
   14550:	cmp	r0, #0
   14554:	beq	145ac <rb_init_netio_poll+0x74>
   14558:	ldr	r4, [pc, #80]	; 145b0 <rb_init_netio_poll+0x78>
   1455c:	add	r4, pc, r4
   14560:	str	r0, [r4]
   14564:	bl	4d40 <rb_getmaxconnect@plt>
   14568:	str	r0, [r4, #8]
   1456c:	bl	4d40 <rb_getmaxconnect@plt>
   14570:	cmp	r0, #1
   14574:	blt	1459c <rb_init_netio_poll+0x64>
   14578:	mov	r5, #0
   1457c:	mvn	r6, #0
   14580:	ldr	r0, [pc, #44]	; 145b4 <rb_init_netio_poll+0x7c>
   14584:	ldr	r0, [pc, r0]
   14588:	str	r6, [r0, r5, lsl #3]
   1458c:	add	r5, r5, #1
   14590:	bl	4d40 <rb_getmaxconnect@plt>
   14594:	cmp	r5, r0
   14598:	blt	14580 <rb_init_netio_poll+0x48>
   1459c:	mov	r0, #0
   145a0:	str	r0, [r4, #4]
   145a4:	mov	r0, #0
   145a8:	pop	{r4, r5, r6, sl, fp, pc}
   145ac:	bl	51fc <rb_outofmemory@plt>
   145b0:	.word	0x00035690
   145b4:	.word	0x00035668

000145b8 <rb_setselect_poll>:
   145b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145bc:	add	fp, sp, #24
   145c0:	cmp	r0, #0
   145c4:	beq	146b4 <rb_setselect_poll+0xfc>
   145c8:	mov	r4, r0
   145cc:	tst	r1, #1
   145d0:	beq	145f0 <rb_setselect_poll+0x38>
   145d4:	str	r2, [r4, #28]
   145d8:	str	r3, [r4, #32]
   145dc:	cmp	r2, #0
   145e0:	ldr	r0, [r4, #20]
   145e4:	orr	r7, r0, #64	; 0x40
   145e8:	biceq	r7, r0, #64	; 0x40
   145ec:	str	r7, [r4, #20]
   145f0:	tst	r1, #2
   145f4:	beq	14614 <rb_setselect_poll+0x5c>
   145f8:	str	r2, [r4, #36]	; 0x24
   145fc:	str	r3, [r4, #40]	; 0x28
   14600:	cmp	r2, #0
   14604:	ldr	r0, [r4, #20]
   14608:	orr	r1, r0, #256	; 0x100
   1460c:	biceq	r1, r0, #256	; 0x100
   14610:	str	r1, [r4, #20]
   14614:	ldr	r6, [pc, #268]	; 14728 <rb_setselect_poll+0x170>
   14618:	ldr	r0, [r4, #12]
   1461c:	add	r6, pc, r6
   14620:	ldr	r7, [r6, #8]
   14624:	cmp	r7, r0
   14628:	ble	146b8 <rb_setselect_poll+0x100>
   1462c:	ldr	r1, [r4, #20]
   14630:	cmp	r1, #0
   14634:	ble	1465c <rb_setselect_poll+0xa4>
   14638:	ldr	r0, [r4, #12]
   1463c:	ldr	r2, [pc, #240]	; 14734 <rb_setselect_poll+0x17c>
   14640:	ldr	r2, [pc, r2]
   14644:	str	r0, [r2, r0, lsl #3]!
   14648:	strh	r1, [r2, #4]
   1464c:	ldr	r1, [r6, #4]
   14650:	cmp	r0, r1
   14654:	strgt	r0, [r6, #4]
   14658:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1465c:	ldr	r0, [r4, #12]
   14660:	ldr	r1, [pc, #200]	; 14730 <rb_setselect_poll+0x178>
   14664:	mvn	r2, #0
   14668:	ldr	r1, [pc, r1]
   1466c:	mov	r3, r1
   14670:	str	r2, [r3, r0, lsl #3]!
   14674:	mov	r2, #0
   14678:	strh	r2, [r3, #4]
   1467c:	ldr	r2, [r6, #4]
   14680:	cmp	r0, r2
   14684:	bne	146b4 <rb_setselect_poll+0xfc>
   14688:	cmp	r2, #0
   1468c:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   14690:	sub	r1, r1, #8
   14694:	mov	r2, r0
   14698:	subs	r0, r0, #1
   1469c:	blt	146ac <rb_setselect_poll+0xf4>
   146a0:	ldr	r3, [r1, r2, lsl #3]
   146a4:	cmn	r3, #1
   146a8:	beq	14694 <rb_setselect_poll+0xdc>
   146ac:	sub	r0, r2, #1
   146b0:	str	r0, [r6, #4]
   146b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146b8:	add	r1, r7, #1024	; 0x400
   146bc:	str	r1, [r6, #8]
   146c0:	lsl	r1, r1, #3
   146c4:	ldr	r0, [pc, #96]	; 1472c <rb_setselect_poll+0x174>
   146c8:	ldr	r0, [pc, r0]
   146cc:	bl	5484 <realloc@plt>
   146d0:	cmp	r0, #0
   146d4:	beq	14724 <rb_setselect_poll+0x16c>
   146d8:	add	r8, r7, #1
   146dc:	mov	r5, r0
   146e0:	str	r0, [r6]
   146e4:	mov	r1, #0
   146e8:	mov	r2, #8192	; 0x2000
   146ec:	add	r0, r0, r8, lsl #3
   146f0:	bl	4ee4 <memset@plt>
   146f4:	ldr	r0, [r6, #8]
   146f8:	cmp	r8, r0
   146fc:	bge	1462c <rb_setselect_poll+0x74>
   14700:	sub	r0, r0, #1
   14704:	add	r1, r5, r7, lsl #3
   14708:	mvn	r2, #0
   1470c:	sub	r0, r0, r7
   14710:	add	r1, r1, #8
   14714:	str	r2, [r1], #8
   14718:	subs	r0, r0, #1
   1471c:	bne	14714 <rb_setselect_poll+0x15c>
   14720:	b	1462c <rb_setselect_poll+0x74>
   14724:	bl	51fc <rb_outofmemory@plt>
   14728:	.word	0x000355d0
   1472c:	.word	0x00035524
   14730:	.word	0x00035584
   14734:	.word	0x000355ac

00014738 <rb_select_poll>:
   14738:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1473c:	add	fp, sp, #24
   14740:	ldr	r5, [pc, #432]	; 148f8 <rb_select_poll+0x1c0>
   14744:	mov	r2, r0
   14748:	add	r5, pc, r5
   1474c:	ldr	r1, [r5, #4]
   14750:	ldr	r0, [pc, #420]	; 148fc <rb_select_poll+0x1c4>
   14754:	ldr	r0, [pc, r0]
   14758:	add	r1, r1, #1
   1475c:	bl	5268 <poll@plt>
   14760:	mov	r4, r0
   14764:	bl	5208 <rb_set_time@plt>
   14768:	cmn	r4, #1
   1476c:	ble	148e0 <rb_select_poll+0x1a8>
   14770:	mov	r0, #0
   14774:	cmp	r4, #0
   14778:	beq	148dc <rb_select_poll+0x1a4>
   1477c:	ldr	r1, [r5, #4]
   14780:	cmp	r1, #0
   14784:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   14788:	ldr	r9, [pc, #368]	; 14900 <rb_select_poll+0x1c8>
   1478c:	mov	r8, #0
   14790:	mov	r0, #0
   14794:	ldr	r9, [pc, r9]
   14798:	ldr	r1, [pc, #356]	; 14904 <rb_select_poll+0x1cc>
   1479c:	mov	r6, r0
   147a0:	ldr	r1, [pc, r1]
   147a4:	ldr	r0, [r1, r0, lsl #3]!
   147a8:	ldrsh	r7, [r1, #6]
   147ac:	cmp	r7, #0
   147b0:	beq	14854 <rb_select_poll+0x11c>
   147b4:	cmp	r0, #0
   147b8:	blt	14854 <rb_select_poll+0x11c>
   147bc:	eor	r1, r0, r0, lsr #12
   147c0:	ldr	r2, [r9]
   147c4:	bfc	r1, #12, #20
   147c8:	eor	r1, r1, r0, lsr #24
   147cc:	add	r1, r1, r1, lsl #1
   147d0:	ldr	r1, [r2, r1, lsl #2]
   147d4:	cmp	r1, #0
   147d8:	bne	147ec <rb_select_poll+0xb4>
   147dc:	b	14854 <rb_select_poll+0x11c>
   147e0:	ldr	r1, [r1, #8]
   147e4:	cmp	r1, #0
   147e8:	beq	14854 <rb_select_poll+0x11c>
   147ec:	ldr	r4, [r1]
   147f0:	ldr	r2, [r4, #12]
   147f4:	cmp	r2, r0
   147f8:	bne	147e0 <rb_select_poll+0xa8>
   147fc:	cmp	r4, #0
   14800:	beq	14854 <rb_select_poll+0x11c>
   14804:	tst	r7, #89	; 0x59
   14808:	beq	1482c <rb_select_poll+0xf4>
   1480c:	ldr	r2, [r4, #28]
   14810:	ldr	r1, [r4, #32]
   14814:	str	r8, [r4, #28]
   14818:	str	r8, [r4, #32]
   1481c:	cmp	r2, #0
   14820:	beq	1482c <rb_select_poll+0xf4>
   14824:	mov	r0, r4
   14828:	blx	r2
   1482c:	tst	r7, #284	; 0x11c
   14830:	ldrbne	r0, [r4, #16]
   14834:	andsne	r0, r0, #1
   14838:	bne	14868 <rb_select_poll+0x130>
   1483c:	ldr	r0, [r4, #28]
   14840:	cmp	r0, #0
   14844:	beq	14894 <rb_select_poll+0x15c>
   14848:	ldr	r0, [r4, #36]	; 0x24
   1484c:	cmp	r0, #0
   14850:	beq	148b4 <rb_select_poll+0x17c>
   14854:	ldr	r1, [r5, #4]
   14858:	add	r0, r6, #1
   1485c:	cmp	r6, r1
   14860:	blt	14798 <rb_select_poll+0x60>
   14864:	b	148d8 <rb_select_poll+0x1a0>
   14868:	ldr	r2, [r4, #36]	; 0x24
   1486c:	ldr	r1, [r4, #40]	; 0x28
   14870:	str	r8, [r4, #36]	; 0x24
   14874:	str	r8, [r4, #40]	; 0x28
   14878:	cmp	r2, #0
   1487c:	beq	1483c <rb_select_poll+0x104>
   14880:	mov	r0, r4
   14884:	blx	r2
   14888:	ldr	r0, [r4, #28]
   1488c:	cmp	r0, #0
   14890:	bne	14848 <rb_select_poll+0x110>
   14894:	mov	r0, r4
   14898:	mov	r1, #1
   1489c:	mov	r2, #0
   148a0:	mov	r3, #0
   148a4:	bl	145b8 <rb_setselect_poll>
   148a8:	ldr	r0, [r4, #36]	; 0x24
   148ac:	cmp	r0, #0
   148b0:	bne	14854 <rb_select_poll+0x11c>
   148b4:	mov	r0, r4
   148b8:	mov	r1, #2
   148bc:	mov	r2, #0
   148c0:	mov	r3, #0
   148c4:	bl	145b8 <rb_setselect_poll>
   148c8:	ldr	r1, [r5, #4]
   148cc:	add	r0, r6, #1
   148d0:	cmp	r6, r1
   148d4:	blt	14798 <rb_select_poll+0x60>
   148d8:	mov	r0, #0
   148dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   148e0:	bl	552c <__errno_location@plt>
   148e4:	ldr	r0, [r0]
   148e8:	bl	4cbc <rb_ignore_errno@plt>
   148ec:	cmp	r0, #0
   148f0:	movwne	r0, #5
   148f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   148f8:	.word	0x000354a4
   148fc:	.word	0x00035498
   14900:	.word	0x00017bec
   14904:	.word	0x0003544c

00014908 <rb_ports_supports_event>:
   14908:	push	{fp, lr}
   1490c:	mov	fp, sp
   14910:	bl	552c <__errno_location@plt>
   14914:	mov	r1, #38	; 0x26
   14918:	str	r1, [r0]
   1491c:	mov	r0, #0
   14920:	pop	{fp, pc}

00014924 <rb_ports_init_event>:
   14924:	bx	lr

00014928 <rb_ports_sched_event>:
   14928:	push	{fp, lr}
   1492c:	mov	fp, sp
   14930:	bl	552c <__errno_location@plt>
   14934:	mov	r1, #38	; 0x26
   14938:	str	r1, [r0]
   1493c:	mvn	r0, #0
   14940:	pop	{fp, pc}

00014944 <rb_ports_unsched_event>:
   14944:	bx	lr

00014948 <rb_init_netio_ports>:
   14948:	mov	r0, #38	; 0x26
   1494c:	bx	lr

00014950 <rb_setselect_ports>:
   14950:	push	{fp, lr}
   14954:	mov	fp, sp
   14958:	bl	552c <__errno_location@plt>
   1495c:	mov	r1, #38	; 0x26
   14960:	str	r1, [r0]
   14964:	pop	{fp, pc}

00014968 <rb_select_ports>:
   14968:	push	{fp, lr}
   1496c:	mov	fp, sp
   14970:	bl	552c <__errno_location@plt>
   14974:	mov	r1, #38	; 0x26
   14978:	str	r1, [r0]
   1497c:	mvn	r0, #0
   14980:	pop	{fp, pc}

00014984 <rb_setup_fd_ports>:
   14984:	push	{fp, lr}
   14988:	mov	fp, sp
   1498c:	bl	552c <__errno_location@plt>
   14990:	mov	r1, #38	; 0x26
   14994:	str	r1, [r0]
   14998:	mvn	r0, #0
   1499c:	pop	{fp, pc}

000149a0 <rb_init_netio_sigio>:
   149a0:	push	{r4, r5, r6, sl, fp, lr}
   149a4:	add	fp, sp, #16
   149a8:	bl	4d40 <rb_getmaxconnect@plt>
   149ac:	lsl	r1, r0, #3
   149b0:	mov	r0, #1
   149b4:	bl	4ea8 <calloc@plt>
   149b8:	cmp	r0, #0
   149bc:	beq	14a6c <rb_init_netio_sigio+0xcc>
   149c0:	ldr	r4, [pc, #168]	; 14a70 <rb_init_netio_sigio+0xd0>
   149c4:	ldr	r4, [pc, r4]
   149c8:	str	r0, [r4]
   149cc:	bl	4d40 <rb_getmaxconnect@plt>
   149d0:	str	r0, [r4, #8]
   149d4:	bl	4d40 <rb_getmaxconnect@plt>
   149d8:	cmp	r0, #1
   149dc:	blt	14a00 <rb_init_netio_sigio+0x60>
   149e0:	mov	r5, #0
   149e4:	mvn	r6, #0
   149e8:	ldr	r0, [r4]
   149ec:	str	r6, [r0, r5, lsl #3]
   149f0:	add	r5, r5, #1
   149f4:	bl	4d40 <rb_getmaxconnect@plt>
   149f8:	cmp	r5, r0
   149fc:	blt	149e8 <rb_init_netio_sigio+0x48>
   14a00:	ldr	r0, [pc, #108]	; 14a74 <rb_init_netio_sigio+0xd4>
   14a04:	mov	r1, #1
   14a08:	add	r0, pc, r0
   14a0c:	strb	r1, [r0]
   14a10:	mov	r0, #0
   14a14:	str	r0, [r4, #4]
   14a18:	ldr	r4, [pc, #88]	; 14a78 <rb_init_netio_sigio+0xd8>
   14a1c:	add	r4, pc, r4
   14a20:	mov	r0, r4
   14a24:	bl	4c74 <sigemptyset@plt>
   14a28:	bl	4d58 <__libc_current_sigrtmin@plt>
   14a2c:	mov	r1, r0
   14a30:	mov	r0, r4
   14a34:	bl	5118 <sigaddset@plt>
   14a38:	mov	r0, r4
   14a3c:	mov	r1, #29
   14a40:	bl	5118 <sigaddset@plt>
   14a44:	bl	4d58 <__libc_current_sigrtmin@plt>
   14a48:	add	r1, r0, #1
   14a4c:	mov	r0, r4
   14a50:	bl	5118 <sigaddset@plt>
   14a54:	mov	r0, #0
   14a58:	mov	r1, r4
   14a5c:	mov	r2, #0
   14a60:	bl	5220 <sigprocmask@plt>
   14a64:	mov	r0, #0
   14a68:	pop	{r4, r5, r6, sl, fp, pc}
   14a6c:	bl	51fc <rb_outofmemory@plt>
   14a70:	.word	0x000179cc
   14a74:	.word	0x00035270
   14a78:	.word	0x000351dc

00014a7c <rb_setup_fd_sigio>:
   14a7c:	push	{r4, r5, r6, sl, fp, lr}
   14a80:	add	fp, sp, #16
   14a84:	ldr	r5, [r0, #12]
   14a88:	mov	r1, #3
   14a8c:	mov	r2, #0
   14a90:	mov	r4, #0
   14a94:	mov	r0, r5
   14a98:	bl	5448 <fcntl@plt>
   14a9c:	cmn	r0, #1
   14aa0:	beq	14b18 <rb_setup_fd_sigio+0x9c>
   14aa4:	mov	r6, r0
   14aa8:	tst	r0, #8192	; 0x2000
   14aac:	beq	14ac4 <rb_setup_fd_sigio+0x48>
   14ab0:	bic	r6, r6, #8192	; 0x2000
   14ab4:	mov	r0, r5
   14ab8:	mov	r1, #4
   14abc:	mov	r2, r6
   14ac0:	bl	5448 <fcntl@plt>
   14ac4:	orr	r2, r6, #10240	; 0x2800
   14ac8:	mov	r0, r5
   14acc:	mov	r1, #4
   14ad0:	bl	5448 <fcntl@plt>
   14ad4:	cmn	r0, #1
   14ad8:	beq	14b18 <rb_setup_fd_sigio+0x9c>
   14adc:	bl	4d58 <__libc_current_sigrtmin@plt>
   14ae0:	mov	r2, r0
   14ae4:	mov	r0, r5
   14ae8:	mov	r1, #10
   14aec:	bl	5448 <fcntl@plt>
   14af0:	cmn	r0, #1
   14af4:	beq	14b18 <rb_setup_fd_sigio+0x9c>
   14af8:	bl	531c <getpid@plt>
   14afc:	mov	r2, r0
   14b00:	mov	r0, r5
   14b04:	mov	r1, #8
   14b08:	bl	5448 <fcntl@plt>
   14b0c:	add	r4, r0, #1
   14b10:	cmn	r0, #1
   14b14:	movwne	r4, #1
   14b18:	mov	r0, r4
   14b1c:	pop	{r4, r5, r6, sl, fp, pc}

00014b20 <rb_setselect_sigio>:
   14b20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b24:	add	fp, sp, #24
   14b28:	cmp	r0, #0
   14b2c:	beq	14c14 <rb_setselect_sigio+0xf4>
   14b30:	mov	r4, r0
   14b34:	tst	r1, #1
   14b38:	beq	14b58 <rb_setselect_sigio+0x38>
   14b3c:	str	r2, [r4, #28]
   14b40:	str	r3, [r4, #32]
   14b44:	cmp	r2, #0
   14b48:	ldr	r0, [r4, #20]
   14b4c:	orr	r7, r0, #64	; 0x40
   14b50:	biceq	r7, r0, #64	; 0x40
   14b54:	str	r7, [r4, #20]
   14b58:	tst	r1, #2
   14b5c:	beq	14b7c <rb_setselect_sigio+0x5c>
   14b60:	str	r2, [r4, #36]	; 0x24
   14b64:	str	r3, [r4, #40]	; 0x28
   14b68:	cmp	r2, #0
   14b6c:	ldr	r0, [r4, #20]
   14b70:	orr	r1, r0, #256	; 0x100
   14b74:	biceq	r1, r0, #256	; 0x100
   14b78:	str	r1, [r4, #20]
   14b7c:	ldr	r0, [r4, #12]
   14b80:	ldr	r6, [pc, #252]	; 14c84 <rb_setselect_sigio+0x164>
   14b84:	ldr	r6, [pc, r6]
   14b88:	ldr	r7, [r6, #8]
   14b8c:	cmp	r7, r0
   14b90:	ble	14c18 <rb_setselect_sigio+0xf8>
   14b94:	ldr	r1, [r4, #20]
   14b98:	cmp	r1, #0
   14b9c:	ble	14bc0 <rb_setselect_sigio+0xa0>
   14ba0:	ldr	r0, [r4, #12]
   14ba4:	ldr	r2, [r6]
   14ba8:	str	r0, [r2, r0, lsl #3]!
   14bac:	strh	r1, [r2, #4]
   14bb0:	ldr	r1, [r6, #4]
   14bb4:	cmp	r0, r1
   14bb8:	strgt	r0, [r6, #4]
   14bbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bc0:	ldr	r1, [r6]
   14bc4:	ldr	r0, [r4, #12]
   14bc8:	mvn	r2, #0
   14bcc:	mov	r3, r1
   14bd0:	str	r2, [r3, r0, lsl #3]!
   14bd4:	mov	r2, #0
   14bd8:	strh	r2, [r3, #4]
   14bdc:	ldr	r2, [r6, #4]
   14be0:	cmp	r0, r2
   14be4:	bne	14c14 <rb_setselect_sigio+0xf4>
   14be8:	cmp	r2, #0
   14bec:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bf0:	sub	r1, r1, #8
   14bf4:	mov	r2, r0
   14bf8:	subs	r0, r0, #1
   14bfc:	blt	14c0c <rb_setselect_sigio+0xec>
   14c00:	ldr	r3, [r1, r2, lsl #3]
   14c04:	cmn	r3, #1
   14c08:	beq	14bf4 <rb_setselect_sigio+0xd4>
   14c0c:	sub	r0, r2, #1
   14c10:	str	r0, [r6, #4]
   14c14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c18:	add	r1, r7, #1024	; 0x400
   14c1c:	str	r1, [r6, #8]
   14c20:	lsl	r1, r1, #3
   14c24:	ldr	r0, [r6]
   14c28:	bl	5484 <realloc@plt>
   14c2c:	cmp	r0, #0
   14c30:	beq	14c80 <rb_setselect_sigio+0x160>
   14c34:	add	r8, r7, #1
   14c38:	mov	r5, r0
   14c3c:	str	r0, [r6]
   14c40:	mov	r1, #0
   14c44:	mov	r2, #8192	; 0x2000
   14c48:	add	r0, r0, r8, lsl #3
   14c4c:	bl	4ee4 <memset@plt>
   14c50:	ldr	r0, [r6, #8]
   14c54:	cmp	r8, r0
   14c58:	bge	14b94 <rb_setselect_sigio+0x74>
   14c5c:	sub	r0, r0, #1
   14c60:	add	r1, r5, r7, lsl #3
   14c64:	mvn	r2, #0
   14c68:	sub	r0, r0, r7
   14c6c:	add	r1, r1, #8
   14c70:	str	r2, [r1], #8
   14c74:	subs	r0, r0, #1
   14c78:	bne	14c70 <rb_setselect_sigio+0x150>
   14c7c:	b	14b94 <rb_setselect_sigio+0x74>
   14c80:	bl	51fc <rb_outofmemory@plt>
   14c84:	.word	0x0001780c

00014c88 <rb_select_sigio>:
   14c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c8c:	add	fp, sp, #28
   14c90:	sub	sp, sp, #140	; 0x8c
   14c94:	ldr	r6, [pc, #1184]	; 1513c <rb_select_sigio+0x4b4>
   14c98:	mov	r4, r0
   14c9c:	add	r6, pc, r6
   14ca0:	ldr	r0, [r6, #4]
   14ca4:	cmn	r0, #1
   14ca8:	beq	14ce4 <rb_select_sigio+0x5c>
   14cac:	cmp	r0, #1
   14cb0:	beq	14d0c <rb_select_sigio+0x84>
   14cb4:	mov	r0, #0
   14cb8:	add	r1, sp, #12
   14cbc:	add	r2, sp, #4
   14cc0:	str	r0, [sp, #20]
   14cc4:	mov	r0, #26
   14cc8:	str	r0, [sp, #16]
   14ccc:	mov	r0, #0
   14cd0:	bl	4e00 <timer_create@plt>
   14cd4:	cmp	r0, #0
   14cd8:	beq	14cfc <rb_select_sigio+0x74>
   14cdc:	mvn	r0, #0
   14ce0:	str	r0, [r6, #4]
   14ce4:	cmp	r4, #0
   14ce8:	bge	14d0c <rb_select_sigio+0x84>
   14cec:	ldrb	r0, [r6]
   14cf0:	cmp	r0, #0
   14cf4:	beq	14d48 <rb_select_sigio+0xc0>
   14cf8:	b	14f5c <rb_select_sigio+0x2d4>
   14cfc:	ldr	r0, [sp, #4]
   14d00:	bl	52d4 <timer_delete@plt>
   14d04:	mov	r0, #1
   14d08:	str	r0, [r6, #4]
   14d0c:	movw	r0, #19923	; 0x4dd3
   14d10:	movt	r0, #4194	; 0x1062
   14d14:	smmul	r0, r4, r0
   14d18:	asr	r1, r0, #6
   14d1c:	add	r0, r1, r0, lsr #31
   14d20:	mov	r1, #1000	; 0x3e8
   14d24:	str	r0, [sp, #4]
   14d28:	mls	r0, r0, r1, r4
   14d2c:	movw	r1, #16960	; 0x4240
   14d30:	movt	r1, #15
   14d34:	mul	r0, r0, r1
   14d38:	str	r0, [sp, #8]
   14d3c:	ldrb	r0, [r6]
   14d40:	cmp	r0, #0
   14d44:	bne	14f5c <rb_select_sigio+0x2d4>
   14d48:	ldr	r9, [pc, #1008]	; 15140 <rb_select_sigio+0x4b8>
   14d4c:	ldr	sl, [pc, #1008]	; 15144 <rb_select_sigio+0x4bc>
   14d50:	add	r5, sp, #12
   14d54:	add	r8, sp, #4
   14d58:	ldr	sl, [pc, sl]
   14d5c:	add	r9, pc, r9
   14d60:	cmp	r4, #0
   14d64:	blt	14df0 <rb_select_sigio+0x168>
   14d68:	ldr	r0, [r6, #4]
   14d6c:	cmp	r0, #0
   14d70:	beq	14dd0 <rb_select_sigio+0x148>
   14d74:	mov	r0, r9
   14d78:	mov	r1, r5
   14d7c:	bl	4d4c <sigwaitinfo@plt>
   14d80:	mov	r7, r0
   14d84:	cmp	r0, #1
   14d88:	blt	14f34 <rb_select_sigio+0x2ac>
   14d8c:	cmp	r7, #29
   14d90:	beq	14f48 <rb_select_sigio+0x2c0>
   14d94:	bl	4d58 <__libc_current_sigrtmin@plt>
   14d98:	add	r0, r0, #1
   14d9c:	cmp	r7, r0
   14da0:	bne	14e4c <rb_select_sigio+0x1c4>
   14da4:	ldr	r0, [r6, #4]
   14da8:	cmp	r0, #0
   14dac:	beq	14e4c <rb_select_sigio+0x1c4>
   14db0:	ldr	r0, [sp, #32]
   14db4:	cmp	r0, #0
   14db8:	beq	14dc0 <rb_select_sigio+0x138>
   14dbc:	bl	513c <rb_run_one_event@plt>
   14dc0:	ldrb	r0, [r6]
   14dc4:	cmp	r0, #0
   14dc8:	beq	14d68 <rb_select_sigio+0xe0>
   14dcc:	b	14f5c <rb_select_sigio+0x2d4>
   14dd0:	mov	r0, r9
   14dd4:	mov	r1, r5
   14dd8:	mov	r2, r8
   14ddc:	bl	4d94 <sigtimedwait@plt>
   14de0:	mov	r7, r0
   14de4:	cmp	r0, #1
   14de8:	bge	14d8c <rb_select_sigio+0x104>
   14dec:	b	14f34 <rb_select_sigio+0x2ac>
   14df0:	mov	r0, r9
   14df4:	mov	r1, r5
   14df8:	bl	4d4c <sigwaitinfo@plt>
   14dfc:	cmp	r0, #1
   14e00:	blt	14f34 <rb_select_sigio+0x2ac>
   14e04:	mov	r7, r0
   14e08:	cmp	r0, #29
   14e0c:	beq	14f48 <rb_select_sigio+0x2c0>
   14e10:	bl	4d58 <__libc_current_sigrtmin@plt>
   14e14:	add	r0, r0, #1
   14e18:	cmp	r7, r0
   14e1c:	bne	14e4c <rb_select_sigio+0x1c4>
   14e20:	ldr	r0, [r6, #4]
   14e24:	cmp	r0, #0
   14e28:	beq	14e4c <rb_select_sigio+0x1c4>
   14e2c:	ldr	r0, [sp, #32]
   14e30:	cmp	r0, #0
   14e34:	beq	14e3c <rb_select_sigio+0x1b4>
   14e38:	bl	513c <rb_run_one_event@plt>
   14e3c:	ldrb	r0, [r6]
   14e40:	cmp	r0, #0
   14e44:	beq	14df0 <rb_select_sigio+0x168>
   14e48:	b	14f5c <rb_select_sigio+0x2d4>
   14e4c:	ldr	r0, [sp, #28]
   14e50:	ldr	r1, [sl]
   14e54:	ldrh	r3, [sp, #24]
   14e58:	add	r1, r1, r0, lsl #3
   14e5c:	cmp	r0, #0
   14e60:	ldrh	r2, [r1, #6]
   14e64:	orr	r2, r2, r3
   14e68:	strh	r2, [r1, #6]
   14e6c:	blt	14f1c <rb_select_sigio+0x294>
   14e70:	ldr	r3, [pc, #728]	; 15150 <rb_select_sigio+0x4c8>
   14e74:	eor	r1, r0, r0, lsr #12
   14e78:	bfc	r1, #12, #20
   14e7c:	eor	r1, r1, r0, lsr #24
   14e80:	add	r1, r1, r1, lsl #1
   14e84:	ldr	r3, [pc, r3]
   14e88:	ldr	r3, [r3]
   14e8c:	ldr	r1, [r3, r1, lsl #2]
   14e90:	cmp	r1, #0
   14e94:	beq	14f1c <rb_select_sigio+0x294>
   14e98:	sxth	sl, r2
   14e9c:	ldr	r7, [r1]
   14ea0:	ldr	r2, [r7, #12]
   14ea4:	cmp	r2, r0
   14ea8:	beq	14ebc <rb_select_sigio+0x234>
   14eac:	ldr	r1, [r1, #8]
   14eb0:	cmp	r1, #0
   14eb4:	bne	14e9c <rb_select_sigio+0x214>
   14eb8:	b	14f1c <rb_select_sigio+0x294>
   14ebc:	cmp	r7, #0
   14ec0:	beq	14f1c <rb_select_sigio+0x294>
   14ec4:	tst	sl, #89	; 0x59
   14ec8:	beq	14ef0 <rb_select_sigio+0x268>
   14ecc:	ldr	r2, [r7, #28]
   14ed0:	ldr	r1, [r7, #32]
   14ed4:	mov	r0, #0
   14ed8:	str	r0, [r7, #28]
   14edc:	str	r0, [r7, #32]
   14ee0:	cmp	r2, #0
   14ee4:	beq	14ef0 <rb_select_sigio+0x268>
   14ee8:	mov	r0, r7
   14eec:	blx	r2
   14ef0:	tst	sl, #284	; 0x11c
   14ef4:	beq	14f1c <rb_select_sigio+0x294>
   14ef8:	ldr	r2, [r7, #36]	; 0x24
   14efc:	ldr	r1, [r7, #40]	; 0x28
   14f00:	mov	r0, #0
   14f04:	str	r0, [r7, #36]	; 0x24
   14f08:	str	r0, [r7, #40]	; 0x28
   14f0c:	cmp	r2, #0
   14f10:	beq	14f1c <rb_select_sigio+0x294>
   14f14:	mov	r0, r7
   14f18:	blx	r2
   14f1c:	ldrb	r0, [r6]
   14f20:	ldr	sl, [pc, #556]	; 15154 <rb_select_sigio+0x4cc>
   14f24:	ldr	sl, [pc, sl]
   14f28:	cmp	r0, #0
   14f2c:	beq	14d60 <rb_select_sigio+0xd8>
   14f30:	b	14f5c <rb_select_sigio+0x2d4>
   14f34:	ldrb	r0, [r6]
   14f38:	cmp	r0, #0
   14f3c:	bne	14f5c <rb_select_sigio+0x2d4>
   14f40:	bl	5208 <rb_set_time@plt>
   14f44:	b	15108 <rb_select_sigio+0x480>
   14f48:	ldr	r0, [pc, #504]	; 15148 <rb_select_sigio+0x4c0>
   14f4c:	add	r0, pc, r0
   14f50:	bl	519c <rb_lib_log@plt>
   14f54:	mov	r0, #1
   14f58:	strb	r0, [r6]
   14f5c:	bl	4d58 <__libc_current_sigrtmin@plt>
   14f60:	mov	r1, #1
   14f64:	bl	4dac <signal@plt>
   14f68:	bl	4d58 <__libc_current_sigrtmin@plt>
   14f6c:	mov	r1, #0
   14f70:	mov	r5, #0
   14f74:	bl	4dac <signal@plt>
   14f78:	strb	r5, [r6]
   14f7c:	mov	r2, r4
   14f80:	ldr	r6, [pc, #452]	; 1514c <rb_select_sigio+0x4c4>
   14f84:	ldr	r6, [pc, r6]
   14f88:	ldm	r6, {r0, r1}
   14f8c:	add	r1, r1, #1
   14f90:	bl	5268 <poll@plt>
   14f94:	mov	r4, r0
   14f98:	bl	5208 <rb_set_time@plt>
   14f9c:	cmn	r4, #1
   14fa0:	ble	15118 <rb_select_sigio+0x490>
   14fa4:	cmp	r4, #0
   14fa8:	beq	1510c <rb_select_sigio+0x484>
   14fac:	ldr	r0, [r6, #4]
   14fb0:	cmp	r0, #0
   14fb4:	blt	1510c <rb_select_sigio+0x484>
   14fb8:	ldr	r9, [pc, #408]	; 15158 <rb_select_sigio+0x4d0>
   14fbc:	mov	r8, #0
   14fc0:	mov	r0, #0
   14fc4:	ldr	r9, [pc, r9]
   14fc8:	mov	r5, r0
   14fcc:	ldr	r0, [r6]
   14fd0:	add	r1, r0, r5, lsl #3
   14fd4:	ldrsh	r7, [r1, #6]
   14fd8:	cmp	r7, #0
   14fdc:	beq	15084 <rb_select_sigio+0x3fc>
   14fe0:	ldr	r0, [r0, r5, lsl #3]
   14fe4:	cmp	r0, #0
   14fe8:	blt	15084 <rb_select_sigio+0x3fc>
   14fec:	eor	r1, r0, r0, lsr #12
   14ff0:	ldr	r2, [r9]
   14ff4:	bfc	r1, #12, #20
   14ff8:	eor	r1, r1, r0, lsr #24
   14ffc:	add	r1, r1, r1, lsl #1
   15000:	ldr	r1, [r2, r1, lsl #2]
   15004:	cmp	r1, #0
   15008:	bne	1501c <rb_select_sigio+0x394>
   1500c:	b	15084 <rb_select_sigio+0x3fc>
   15010:	ldr	r1, [r1, #8]
   15014:	cmp	r1, #0
   15018:	beq	15084 <rb_select_sigio+0x3fc>
   1501c:	ldr	r4, [r1]
   15020:	ldr	r2, [r4, #12]
   15024:	cmp	r2, r0
   15028:	bne	15010 <rb_select_sigio+0x388>
   1502c:	cmp	r4, #0
   15030:	beq	15084 <rb_select_sigio+0x3fc>
   15034:	tst	r7, #89	; 0x59
   15038:	beq	1505c <rb_select_sigio+0x3d4>
   1503c:	ldr	r2, [r4, #28]
   15040:	ldr	r1, [r4, #32]
   15044:	str	r8, [r4, #28]
   15048:	str	r8, [r4, #32]
   1504c:	cmp	r2, #0
   15050:	beq	1505c <rb_select_sigio+0x3d4>
   15054:	mov	r0, r4
   15058:	blx	r2
   1505c:	tst	r7, #284	; 0x11c
   15060:	ldrbne	r0, [r4, #16]
   15064:	andsne	r0, r0, #1
   15068:	bne	15098 <rb_select_sigio+0x410>
   1506c:	ldr	r0, [r4, #28]
   15070:	cmp	r0, #0
   15074:	beq	150c4 <rb_select_sigio+0x43c>
   15078:	ldr	r0, [r4, #36]	; 0x24
   1507c:	cmp	r0, #0
   15080:	beq	150e4 <rb_select_sigio+0x45c>
   15084:	ldr	r1, [r6, #4]
   15088:	add	r0, r5, #1
   1508c:	cmp	r5, r1
   15090:	blt	14fc8 <rb_select_sigio+0x340>
   15094:	b	15108 <rb_select_sigio+0x480>
   15098:	ldr	r2, [r4, #36]	; 0x24
   1509c:	ldr	r1, [r4, #40]	; 0x28
   150a0:	str	r8, [r4, #36]	; 0x24
   150a4:	str	r8, [r4, #40]	; 0x28
   150a8:	cmp	r2, #0
   150ac:	beq	1506c <rb_select_sigio+0x3e4>
   150b0:	mov	r0, r4
   150b4:	blx	r2
   150b8:	ldr	r0, [r4, #28]
   150bc:	cmp	r0, #0
   150c0:	bne	15078 <rb_select_sigio+0x3f0>
   150c4:	mov	r0, r4
   150c8:	mov	r1, #1
   150cc:	mov	r2, #0
   150d0:	mov	r3, #0
   150d4:	bl	14b20 <rb_setselect_sigio>
   150d8:	ldr	r0, [r4, #36]	; 0x24
   150dc:	cmp	r0, #0
   150e0:	bne	15084 <rb_select_sigio+0x3fc>
   150e4:	mov	r0, r4
   150e8:	mov	r1, #2
   150ec:	mov	r2, #0
   150f0:	mov	r3, #0
   150f4:	bl	14b20 <rb_setselect_sigio>
   150f8:	ldr	r1, [r6, #4]
   150fc:	add	r0, r5, #1
   15100:	cmp	r5, r1
   15104:	blt	14fc8 <rb_select_sigio+0x340>
   15108:	mov	r5, #0
   1510c:	mov	r0, r5
   15110:	sub	sp, fp, #28
   15114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15118:	bl	552c <__errno_location@plt>
   1511c:	ldr	r0, [r0]
   15120:	bl	4cbc <rb_ignore_errno@plt>
   15124:	mov	r5, r0
   15128:	cmp	r0, #0
   1512c:	movwne	r5, #5
   15130:	mov	r0, r5
   15134:	sub	sp, fp, #28
   15138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1513c:	.word	0x00034fdc
   15140:	.word	0x00034e9c
   15144:	.word	0x00017638
   15148:	.word	0x000061fc
   1514c:	.word	0x0001740c
   15150:	.word	0x000174fc
   15154:	.word	0x0001746c
   15158:	.word	0x000173bc

0001515c <rb_sigio_supports_event>:
   1515c:	push	{r4, r5, fp, lr}
   15160:	add	fp, sp, #8
   15164:	sub	sp, sp, #72	; 0x48
   15168:	ldr	r5, [pc, #124]	; 151ec <rb_sigio_supports_event+0x90>
   1516c:	add	r5, pc, r5
   15170:	ldr	r4, [r5, #4]
   15174:	cmp	r4, #1
   15178:	beq	15188 <rb_sigio_supports_event+0x2c>
   1517c:	cmn	r4, #1
   15180:	bne	15194 <rb_sigio_supports_event+0x38>
   15184:	mov	r4, #0
   15188:	mov	r0, r4
   1518c:	sub	sp, fp, #8
   15190:	pop	{r4, r5, fp, pc}
   15194:	mov	r4, #0
   15198:	mov	r0, #26
   1519c:	add	r1, sp, #4
   151a0:	sub	r2, fp, #12
   151a4:	str	r4, [sp, #12]
   151a8:	str	r0, [sp, #8]
   151ac:	mov	r0, #0
   151b0:	bl	4e00 <timer_create@plt>
   151b4:	cmp	r0, #0
   151b8:	beq	151d0 <rb_sigio_supports_event+0x74>
   151bc:	mvn	r0, #0
   151c0:	str	r0, [r5, #4]
   151c4:	mov	r0, r4
   151c8:	sub	sp, fp, #8
   151cc:	pop	{r4, r5, fp, pc}
   151d0:	ldr	r0, [fp, #-12]
   151d4:	bl	52d4 <timer_delete@plt>
   151d8:	mov	r4, #1
   151dc:	str	r4, [r5, #4]
   151e0:	mov	r0, r4
   151e4:	sub	sp, fp, #8
   151e8:	pop	{r4, r5, fp, pc}
   151ec:	.word	0x00034b0c

000151f0 <rb_sigio_init_event>:
   151f0:	push	{r4, sl, fp, lr}
   151f4:	add	fp, sp, #8
   151f8:	sub	sp, sp, #72	; 0x48
   151fc:	ldr	r4, [pc, #104]	; 1526c <rb_sigio_init_event+0x7c>
   15200:	add	r4, pc, r4
   15204:	ldr	r0, [r4, #4]
   15208:	cmn	r0, #1
   1520c:	cmpne	r0, #1
   15210:	bne	1521c <rb_sigio_init_event+0x2c>
   15214:	sub	sp, fp, #8
   15218:	pop	{r4, sl, fp, pc}
   1521c:	mov	r0, #0
   15220:	add	r1, sp, #4
   15224:	sub	r2, fp, #12
   15228:	str	r0, [sp, #12]
   1522c:	mov	r0, #26
   15230:	str	r0, [sp, #8]
   15234:	mov	r0, #0
   15238:	bl	4e00 <timer_create@plt>
   1523c:	cmp	r0, #0
   15240:	beq	15254 <rb_sigio_init_event+0x64>
   15244:	mvn	r0, #0
   15248:	str	r0, [r4, #4]
   1524c:	sub	sp, fp, #8
   15250:	pop	{r4, sl, fp, pc}
   15254:	ldr	r0, [fp, #-12]
   15258:	bl	52d4 <timer_delete@plt>
   1525c:	mov	r0, #1
   15260:	str	r0, [r4, #4]
   15264:	sub	sp, fp, #8
   15268:	pop	{r4, sl, fp, pc}
   1526c:	.word	0x00034a78

00015270 <rb_sigio_sched_event>:
   15270:	push	{r4, r5, r6, r7, fp, lr}
   15274:	add	fp, sp, #16
   15278:	sub	sp, sp, #80	; 0x50
   1527c:	mov	r4, r0
   15280:	ldr	r0, [pc, #304]	; 153b8 <rb_sigio_sched_event+0x148>
   15284:	add	r0, pc, r0
   15288:	ldr	r0, [r0, #4]
   1528c:	cmp	r0, #1
   15290:	blt	153a4 <rb_sigio_sched_event+0x134>
   15294:	mov	r5, r1
   15298:	add	r1, sp, #16
   1529c:	vmov.i32	q8, #0	; 0x00000000
   152a0:	mov	r0, #48	; 0x30
   152a4:	mov	r2, r1
   152a8:	vst1.64	{d16-d17}, [r2], r0
   152ac:	add	r0, r1, #32
   152b0:	vst1.64	{d16-d17}, [r0]
   152b4:	add	r0, r1, #16
   152b8:	mov	r1, #4
   152bc:	vst1.64	{d16-d17}, [r2]
   152c0:	vst1.64	{d16-d17}, [r0]
   152c4:	mov	r0, #1
   152c8:	bl	4ea8 <calloc@plt>
   152cc:	cmp	r0, #0
   152d0:	beq	153b4 <rb_sigio_sched_event+0x144>
   152d4:	mov	r6, #0
   152d8:	str	r0, [r4, #40]	; 0x28
   152dc:	mov	r7, r0
   152e0:	str	r6, [sp, #24]
   152e4:	bl	4d58 <__libc_current_sigrtmin@plt>
   152e8:	add	r0, r0, #1
   152ec:	str	r4, [sp, #16]
   152f0:	add	r1, sp, #16
   152f4:	mov	r2, r7
   152f8:	str	r0, [sp, #20]
   152fc:	mov	r0, #0
   15300:	bl	4e00 <timer_create@plt>
   15304:	cmn	r0, #1
   15308:	ble	15360 <rb_sigio_sched_event+0xf0>
   1530c:	str	r6, [sp, #4]
   15310:	str	r6, [sp]
   15314:	str	r5, [sp, #8]
   15318:	str	r6, [sp, #12]
   1531c:	mov	r2, sp
   15320:	mov	r3, #0
   15324:	ldr	r0, [r4, #24]
   15328:	cmp	r0, #0
   1532c:	movne	r0, sp
   15330:	addne	r0, r0, #8
   15334:	ldrdne	r0, [r0]
   15338:	stmne	sp, {r0, r1}
   1533c:	mov	r1, #0
   15340:	ldr	r0, [r7]
   15344:	bl	4ff8 <timer_settime@plt>
   15348:	mov	r6, #1
   1534c:	cmn	r0, #1
   15350:	ble	15388 <rb_sigio_sched_event+0x118>
   15354:	mov	r0, r6
   15358:	sub	sp, fp, #16
   1535c:	pop	{r4, r5, r6, r7, fp, pc}
   15360:	bl	552c <__errno_location@plt>
   15364:	ldr	r0, [r0]
   15368:	bl	4c80 <strerror@plt>
   1536c:	mov	r1, r0
   15370:	ldr	r0, [pc, #68]	; 153bc <rb_sigio_sched_event+0x14c>
   15374:	add	r0, pc, r0
   15378:	bl	519c <rb_lib_log@plt>
   1537c:	mov	r0, r6
   15380:	sub	sp, fp, #16
   15384:	pop	{r4, r5, r6, r7, fp, pc}
   15388:	bl	552c <__errno_location@plt>
   1538c:	ldr	r0, [r0]
   15390:	bl	4c80 <strerror@plt>
   15394:	mov	r1, r0
   15398:	ldr	r0, [pc, #32]	; 153c0 <rb_sigio_sched_event+0x150>
   1539c:	add	r0, pc, r0
   153a0:	bl	519c <rb_lib_log@plt>
   153a4:	mov	r6, #0
   153a8:	mov	r0, r6
   153ac:	sub	sp, fp, #16
   153b0:	pop	{r4, r5, r6, r7, fp, pc}
   153b4:	bl	51fc <rb_outofmemory@plt>
   153b8:	.word	0x000349f4
   153bc:	.word	0x00005daf
   153c0:	.word	0x00005d99

000153c4 <rb_sigio_unsched_event>:
   153c4:	push	{r4, sl, fp, lr}
   153c8:	add	fp, sp, #8
   153cc:	mov	r4, r0
   153d0:	ldr	r0, [pc, #52]	; 1540c <rb_sigio_unsched_event+0x48>
   153d4:	add	r0, pc, r0
   153d8:	ldr	r0, [r0, #4]
   153dc:	cmp	r0, #1
   153e0:	poplt	{r4, sl, fp, pc}
   153e4:	ldr	r0, [r4, #40]	; 0x28
   153e8:	ldr	r0, [r0]
   153ec:	bl	52d4 <timer_delete@plt>
   153f0:	ldr	r0, [r4, #40]	; 0x28
   153f4:	cmp	r0, #0
   153f8:	beq	15400 <rb_sigio_unsched_event+0x3c>
   153fc:	bl	4f98 <free@plt>
   15400:	mov	r0, #0
   15404:	str	r0, [r4, #40]	; 0x28
   15408:	pop	{r4, sl, fp, pc}
   1540c:	.word	0x000348a4

00015410 <rb_setup_fd_select>:
   15410:	mov	r0, #0
   15414:	bx	lr

00015418 <rb_init_netio_select>:
   15418:	ldr	r0, [pc, #168]	; 154c8 <rb_init_netio_select+0xb0>
   1541c:	vmov.i32	q8, #0	; 0x00000000
   15420:	ldr	r0, [pc, r0]
   15424:	ldr	r1, [r0]
   15428:	cmp	r1, #1024	; 0x400
   1542c:	movgt	r1, #1024	; 0x400
   15430:	strgt	r1, [r0]
   15434:	mov	r0, #112	; 0x70
   15438:	ldr	r1, [pc, #140]	; 154cc <rb_init_netio_select+0xb4>
   1543c:	add	r1, pc, r1
   15440:	mov	r2, r1
   15444:	vst1.64	{d16-d17}, [r2], r0
   15448:	vst1.64	{d16-d17}, [r2]
   1544c:	add	r2, r1, #96	; 0x60
   15450:	vst1.64	{d16-d17}, [r2]
   15454:	add	r2, r1, #80	; 0x50
   15458:	vst1.64	{d16-d17}, [r2]
   1545c:	add	r2, r1, #64	; 0x40
   15460:	vst1.64	{d16-d17}, [r2]
   15464:	add	r2, r1, #48	; 0x30
   15468:	vst1.64	{d16-d17}, [r2]
   1546c:	add	r2, r1, #32
   15470:	add	r1, r1, #16
   15474:	vst1.64	{d16-d17}, [r2]
   15478:	vst1.64	{d16-d17}, [r1]
   1547c:	ldr	r1, [pc, #76]	; 154d0 <rb_init_netio_select+0xb8>
   15480:	add	r1, pc, r1
   15484:	mov	r2, r1
   15488:	vst1.64	{d16-d17}, [r2], r0
   1548c:	add	r0, r1, #96	; 0x60
   15490:	vst1.64	{d16-d17}, [r0]
   15494:	add	r0, r1, #80	; 0x50
   15498:	vst1.64	{d16-d17}, [r2]
   1549c:	vst1.64	{d16-d17}, [r0]
   154a0:	add	r0, r1, #64	; 0x40
   154a4:	vst1.64	{d16-d17}, [r0]
   154a8:	add	r0, r1, #48	; 0x30
   154ac:	vst1.64	{d16-d17}, [r0]
   154b0:	add	r0, r1, #32
   154b4:	vst1.64	{d16-d17}, [r0]
   154b8:	add	r0, r1, #16
   154bc:	vst1.64	{d16-d17}, [r0]
   154c0:	mov	r0, #0
   154c4:	bx	lr
   154c8:	.word	0x00016f40
   154cc:	.word	0x00034844
   154d0:	.word	0x00034880

000154d4 <rb_setselect_select>:
   154d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   154d8:	add	fp, sp, #24
   154dc:	tst	r1, #1
   154e0:	beq	155dc <rb_setselect_select+0x108>
   154e4:	str	r2, [r0, #28]
   154e8:	str	r3, [r0, #32]
   154ec:	mov	r6, #1
   154f0:	cmp	r2, #0
   154f4:	ldr	ip, [r0, #12]
   154f8:	ldr	r5, [pc, #496]	; 156f0 <rb_setselect_select+0x21c>
   154fc:	and	r7, ip, #31
   15500:	add	r5, pc, r5
   15504:	lsl	r6, r6, r7
   15508:	asr	r7, ip, #31
   1550c:	add	r7, ip, r7, lsr #27
   15510:	asr	r7, r7, #5
   15514:	beq	15530 <rb_setselect_select+0x5c>
   15518:	ldr	r4, [r5, r7, lsl #2]
   1551c:	orr	r6, r4, r6
   15520:	str	r6, [r5, r7, lsl #2]
   15524:	ldr	r7, [r0, #20]
   15528:	orr	r4, r7, #1
   1552c:	b	15544 <rb_setselect_select+0x70>
   15530:	ldr	r4, [r5, r7, lsl #2]
   15534:	bic	r6, r4, r6
   15538:	str	r6, [r5, r7, lsl #2]
   1553c:	ldr	r7, [r0, #20]
   15540:	bic	r4, r7, #1
   15544:	str	r4, [r0, #20]
   15548:	tst	r4, #3
   1554c:	ldr	lr, [pc, #416]	; 156f4 <rb_setselect_select+0x220>
   15550:	ldr	lr, [pc, lr]
   15554:	beq	15574 <rb_setselect_select+0xa0>
   15558:	cmp	ip, lr
   1555c:	ldrgt	r7, [pc, #404]	; 156f8 <rb_setselect_select+0x224>
   15560:	addgt	r7, pc, r7
   15564:	strgt	ip, [r7]
   15568:	tst	r1, #2
   1556c:	bne	155e4 <rb_setselect_select+0x110>
   15570:	b	156ec <rb_setselect_select+0x218>
   15574:	cmp	ip, lr
   15578:	bgt	155dc <rb_setselect_select+0x108>
   1557c:	cmp	lr, #0
   15580:	blt	155dc <rb_setselect_select+0x108>
   15584:	ldr	r4, [pc, #368]	; 156fc <rb_setselect_select+0x228>
   15588:	ldr	r9, [pc, #368]	; 15700 <rb_setselect_select+0x22c>
   1558c:	ldr	r8, [pc, #368]	; 15704 <rb_setselect_select+0x230>
   15590:	mov	ip, #1
   15594:	add	r4, pc, r4
   15598:	add	r9, pc, r9
   1559c:	add	r8, pc, r8
   155a0:	asr	r6, lr, #31
   155a4:	and	r7, lr, #31
   155a8:	add	r6, lr, r6, lsr #27
   155ac:	asr	r6, r6, #5
   155b0:	ldr	r5, [r4, r6, lsl #2]
   155b4:	tst	r5, ip, lsl r7
   155b8:	ldreq	r6, [r9, r6, lsl #2]
   155bc:	lsleq	r5, ip, r7
   155c0:	tsteq	r6, r5
   155c4:	bne	155dc <rb_setselect_select+0x108>
   155c8:	sub	r5, lr, #1
   155cc:	cmp	lr, #0
   155d0:	mov	lr, r5
   155d4:	str	r5, [r8]
   155d8:	bgt	155a0 <rb_setselect_select+0xcc>
   155dc:	tst	r1, #2
   155e0:	beq	156ec <rb_setselect_select+0x218>
   155e4:	str	r2, [r0, #36]	; 0x24
   155e8:	str	r3, [r0, #40]	; 0x28
   155ec:	mov	r7, #1
   155f0:	cmp	r2, #0
   155f4:	ldr	r1, [r0, #12]
   155f8:	and	r3, r1, #31
   155fc:	lsl	r3, r7, r3
   15600:	beq	15630 <rb_setselect_select+0x15c>
   15604:	ldr	r7, [pc, #252]	; 15708 <rb_setselect_select+0x234>
   15608:	asr	r2, r1, #31
   1560c:	add	r2, r1, r2, lsr #27
   15610:	asr	r2, r2, #5
   15614:	add	r7, pc, r7
   15618:	ldr	r6, [r7, r2, lsl #2]
   1561c:	orr	r3, r6, r3
   15620:	str	r3, [r7, r2, lsl #2]
   15624:	ldr	r2, [r0, #20]
   15628:	orr	r2, r2, #2
   1562c:	b	15658 <rb_setselect_select+0x184>
   15630:	ldr	r7, [pc, #212]	; 1570c <rb_setselect_select+0x238>
   15634:	asr	r2, r1, #31
   15638:	add	r2, r1, r2, lsr #27
   1563c:	asr	r2, r2, #5
   15640:	add	r7, pc, r7
   15644:	ldr	r6, [r7, r2, lsl #2]
   15648:	bic	r3, r6, r3
   1564c:	str	r3, [r7, r2, lsl #2]
   15650:	ldr	r2, [r0, #20]
   15654:	bic	r2, r2, #2
   15658:	str	r2, [r0, #20]
   1565c:	tst	r2, #3
   15660:	ldr	r0, [pc, #168]	; 15710 <rb_setselect_select+0x23c>
   15664:	ldr	r0, [pc, r0]
   15668:	beq	15684 <rb_setselect_select+0x1b0>
   1566c:	cmp	r1, r0
   15670:	ldrgt	r0, [pc, #156]	; 15714 <rb_setselect_select+0x240>
   15674:	addgt	r0, pc, r0
   15678:	strgt	r1, [r0]
   1567c:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   15680:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15684:	cmp	r1, r0
   15688:	bgt	156ec <rb_setselect_select+0x218>
   1568c:	cmp	r0, #0
   15690:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   15694:	ldr	r2, [pc, #124]	; 15718 <rb_setselect_select+0x244>
   15698:	ldr	r3, [pc, #124]	; 1571c <rb_setselect_select+0x248>
   1569c:	ldr	r6, [pc, #124]	; 15720 <rb_setselect_select+0x24c>
   156a0:	mov	r1, #1
   156a4:	add	r2, pc, r2
   156a8:	add	r3, pc, r3
   156ac:	add	r6, pc, r6
   156b0:	asr	r5, r0, #31
   156b4:	and	r7, r0, #31
   156b8:	add	r5, r0, r5, lsr #27
   156bc:	asr	r5, r5, #5
   156c0:	ldr	r4, [r2, r5, lsl #2]
   156c4:	tst	r4, r1, lsl r7
   156c8:	ldreq	r5, [r3, r5, lsl #2]
   156cc:	lsleq	r7, r1, r7
   156d0:	tsteq	r5, r7
   156d4:	bne	156ec <rb_setselect_select+0x218>
   156d8:	sub	r7, r0, #1
   156dc:	cmp	r0, #0
   156e0:	mov	r0, r7
   156e4:	str	r7, [r6]
   156e8:	bgt	156b0 <rb_setselect_select+0x1dc>
   156ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   156f0:	.word	0x00034780
   156f4:	.word	0x00016f00
   156f8:	.word	0x00016ef0
   156fc:	.word	0x000346ec
   15700:	.word	0x00034768
   15704:	.word	0x00016eb4
   15708:	.word	0x000346ec
   1570c:	.word	0x000346c0
   15710:	.word	0x00016dec
   15714:	.word	0x00016ddc
   15718:	.word	0x000345dc
   1571c:	.word	0x00034658
   15720:	.word	0x00016da4

00015724 <rb_select_select>:
   15724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15728:	add	fp, sp, #28
   1572c:	sub	sp, sp, #12
   15730:	ldr	r9, [pc, #844]	; 15a84 <rb_select_select+0x360>
   15734:	ldr	r1, [pc, #844]	; 15a88 <rb_select_select+0x364>
   15738:	mov	r5, r0
   1573c:	mov	r2, #128	; 0x80
   15740:	add	r9, pc, r9
   15744:	add	r1, pc, r1
   15748:	mov	r0, r9
   1574c:	bl	50a0 <memcpy@plt>
   15750:	ldr	sl, [pc, #820]	; 15a8c <rb_select_select+0x368>
   15754:	ldr	r1, [pc, #820]	; 15a90 <rb_select_select+0x36c>
   15758:	mov	r2, #128	; 0x80
   1575c:	add	sl, pc, sl
   15760:	add	r1, pc, r1
   15764:	mov	r0, sl
   15768:	bl	50a0 <memcpy@plt>
   1576c:	mov	r0, #1000	; 0x3e8
   15770:	mov	r6, #0
   15774:	add	r4, sp, #4
   15778:	mul	r7, r5, r0
   1577c:	stmib	sp, {r6, r7}
   15780:	mov	r1, r9
   15784:	mov	r2, sl
   15788:	mov	r3, #0
   1578c:	ldr	r0, [pc, #768]	; 15a94 <rb_select_select+0x370>
   15790:	ldr	r0, [pc, r0]
   15794:	str	r4, [sp]
   15798:	add	r0, r0, #1
   1579c:	bl	51b4 <select@plt>
   157a0:	cmn	r0, #1
   157a4:	bgt	157cc <rb_select_select+0xa8>
   157a8:	bl	552c <__errno_location@plt>
   157ac:	ldr	r0, [r0]
   157b0:	bl	4cbc <rb_ignore_errno@plt>
   157b4:	cmp	r0, #0
   157b8:	bne	1577c <rb_select_select+0x58>
   157bc:	bl	5208 <rb_set_time@plt>
   157c0:	mvn	r0, #0
   157c4:	sub	sp, fp, #28
   157c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157cc:	mov	r5, r0
   157d0:	bl	5208 <rb_set_time@plt>
   157d4:	mov	r0, #0
   157d8:	cmp	r5, #0
   157dc:	beq	15a7c <rb_select_select+0x358>
   157e0:	ldr	r1, [pc, #688]	; 15a98 <rb_select_select+0x374>
   157e4:	ldr	r1, [pc, r1]
   157e8:	cmp	r1, #0
   157ec:	blt	15a7c <rb_select_select+0x358>
   157f0:	ldr	r7, [pc, #676]	; 15a9c <rb_select_select+0x378>
   157f4:	mov	ip, #1
   157f8:	mov	r0, #0
   157fc:	ldr	r7, [pc, r7]
   15800:	ldr	lr, [pc, #664]	; 15aa0 <rb_select_select+0x37c>
   15804:	add	lr, pc, lr
   15808:	mov	r8, r0
   1580c:	eor	r0, r0, r0, lsr #12
   15810:	ldr	r1, [r7]
   15814:	bfc	r0, #12, #20
   15818:	eor	r0, r0, r8, lsr #24
   1581c:	add	r0, r0, r0, lsl #1
   15820:	ldr	r0, [r1, r0, lsl #2]
   15824:	cmp	r0, #0
   15828:	bne	1583c <rb_select_select+0x118>
   1582c:	b	15a64 <rb_select_select+0x340>
   15830:	ldr	r0, [r0, #8]
   15834:	cmp	r0, #0
   15838:	beq	15a64 <rb_select_select+0x340>
   1583c:	ldr	r5, [r0]
   15840:	ldr	r1, [r5, #12]
   15844:	cmp	r1, r8
   15848:	bne	15830 <rb_select_select+0x10c>
   1584c:	cmp	r5, #0
   15850:	beq	15a64 <rb_select_select+0x340>
   15854:	lsr	r6, r8, #5
   15858:	and	r4, r8, #31
   1585c:	ldr	r0, [r9, r6, lsl #2]
   15860:	tst	r0, ip, lsl r4
   15864:	beq	1589c <rb_select_select+0x178>
   15868:	ldr	r2, [r5, #28]
   1586c:	mov	r0, #0
   15870:	str	r0, [r5, #28]
   15874:	cmp	r2, #0
   15878:	beq	1589c <rb_select_select+0x178>
   1587c:	ldr	r1, [r5, #32]
   15880:	mov	r0, r5
   15884:	blx	r2
   15888:	ldr	lr, [pc, #532]	; 15aa4 <rb_select_select+0x380>
   1588c:	ldr	r7, [pc, #532]	; 15aa8 <rb_select_select+0x384>
   15890:	mov	ip, #1
   15894:	ldr	r7, [pc, r7]
   15898:	add	lr, pc, lr
   1589c:	ldrb	r0, [r5, #16]
   158a0:	tst	r0, #1
   158a4:	beq	15a64 <rb_select_select+0x340>
   158a8:	ldr	r1, [sl, r6, lsl #2]
   158ac:	lsl	r0, ip, r4
   158b0:	tst	r1, r0
   158b4:	beq	158ec <rb_select_select+0x1c8>
   158b8:	ldr	r2, [r5, #36]	; 0x24
   158bc:	mov	r0, #0
   158c0:	str	r0, [r5, #36]	; 0x24
   158c4:	cmp	r2, #0
   158c8:	beq	158ec <rb_select_select+0x1c8>
   158cc:	ldr	r1, [r5, #40]	; 0x28
   158d0:	mov	r0, r5
   158d4:	blx	r2
   158d8:	ldr	lr, [pc, #460]	; 15aac <rb_select_select+0x388>
   158dc:	ldr	r7, [pc, #460]	; 15ab0 <rb_select_select+0x38c>
   158e0:	mov	ip, #1
   158e4:	ldr	r7, [pc, r7]
   158e8:	add	lr, pc, lr
   158ec:	ldr	r0, [r5, #28]
   158f0:	cmp	r0, #0
   158f4:	bne	159a8 <rb_select_select+0x284>
   158f8:	ldr	r1, [r5, #12]
   158fc:	ldr	r2, [pc, #432]	; 15ab4 <rb_select_select+0x390>
   15900:	asr	r0, r1, #31
   15904:	add	r2, pc, r2
   15908:	and	r3, r1, #31
   1590c:	add	r0, r1, r0, lsr #27
   15910:	mov	r6, r2
   15914:	asr	r0, r0, #5
   15918:	ldr	r2, [r2, r0, lsl #2]
   1591c:	bic	r2, r2, ip, lsl r3
   15920:	str	r2, [r6, r0, lsl #2]
   15924:	ldr	r2, [r5, #20]
   15928:	bic	r0, r2, #1
   1592c:	tst	r2, #2
   15930:	str	r0, [r5, #20]
   15934:	ldr	r0, [pc, #380]	; 15ab8 <rb_select_select+0x394>
   15938:	ldr	r0, [pc, r0]
   1593c:	bne	159a0 <rb_select_select+0x27c>
   15940:	cmp	r1, r0
   15944:	bgt	159a8 <rb_select_select+0x284>
   15948:	cmp	r0, #0
   1594c:	blt	159a8 <rb_select_select+0x284>
   15950:	ldr	r3, [pc, #356]	; 15abc <rb_select_select+0x398>
   15954:	asr	r2, r0, #31
   15958:	and	r1, r0, #31
   1595c:	add	r2, r0, r2, lsr #27
   15960:	asr	r2, r2, #5
   15964:	add	r3, pc, r3
   15968:	ldr	r3, [r3, r2, lsl #2]
   1596c:	tst	r3, ip, lsl r1
   15970:	ldreq	r3, [pc, #328]	; 15ac0 <rb_select_select+0x39c>
   15974:	lsleq	r1, ip, r1
   15978:	addeq	r3, pc, r3
   1597c:	ldreq	r2, [r3, r2, lsl #2]
   15980:	tsteq	r2, r1
   15984:	bne	159a8 <rb_select_select+0x284>
   15988:	sub	r1, r0, #1
   1598c:	cmp	r0, #0
   15990:	mov	r0, r1
   15994:	str	r1, [lr]
   15998:	bgt	15950 <rb_select_select+0x22c>
   1599c:	b	159a8 <rb_select_select+0x284>
   159a0:	cmp	r1, r0
   159a4:	strgt	r1, [lr]
   159a8:	ldr	r0, [r5, #36]	; 0x24
   159ac:	cmp	r0, #0
   159b0:	bne	15a64 <rb_select_select+0x340>
   159b4:	ldr	r1, [r5, #12]
   159b8:	ldr	r2, [pc, #260]	; 15ac4 <rb_select_select+0x3a0>
   159bc:	asr	r0, r1, #31
   159c0:	add	r2, pc, r2
   159c4:	and	r3, r1, #31
   159c8:	add	r0, r1, r0, lsr #27
   159cc:	mov	r6, r2
   159d0:	asr	r0, r0, #5
   159d4:	ldr	r2, [r2, r0, lsl #2]
   159d8:	bic	r2, r2, ip, lsl r3
   159dc:	str	r2, [r6, r0, lsl #2]
   159e0:	ldr	r2, [r5, #20]
   159e4:	bic	r0, r2, #2
   159e8:	tst	r2, #1
   159ec:	str	r0, [r5, #20]
   159f0:	ldr	r0, [pc, #208]	; 15ac8 <rb_select_select+0x3a4>
   159f4:	ldr	r0, [pc, r0]
   159f8:	bne	15a5c <rb_select_select+0x338>
   159fc:	cmp	r1, r0
   15a00:	bgt	15a64 <rb_select_select+0x340>
   15a04:	cmp	r0, #0
   15a08:	blt	15a64 <rb_select_select+0x340>
   15a0c:	ldr	r3, [pc, #184]	; 15acc <rb_select_select+0x3a8>
   15a10:	asr	r2, r0, #31
   15a14:	and	r1, r0, #31
   15a18:	add	r2, r0, r2, lsr #27
   15a1c:	asr	r2, r2, #5
   15a20:	add	r3, pc, r3
   15a24:	ldr	r3, [r3, r2, lsl #2]
   15a28:	tst	r3, ip, lsl r1
   15a2c:	ldreq	r3, [pc, #156]	; 15ad0 <rb_select_select+0x3ac>
   15a30:	lsleq	r1, ip, r1
   15a34:	addeq	r3, pc, r3
   15a38:	ldreq	r2, [r3, r2, lsl #2]
   15a3c:	tsteq	r2, r1
   15a40:	bne	15a64 <rb_select_select+0x340>
   15a44:	sub	r1, r0, #1
   15a48:	cmp	r0, #0
   15a4c:	mov	r0, r1
   15a50:	str	r1, [lr]
   15a54:	bgt	15a0c <rb_select_select+0x2e8>
   15a58:	b	15a64 <rb_select_select+0x340>
   15a5c:	cmp	r1, r0
   15a60:	strgt	r1, [lr]
   15a64:	ldr	r1, [pc, #104]	; 15ad4 <rb_select_select+0x3b0>
   15a68:	add	r0, r8, #1
   15a6c:	ldr	r1, [pc, r1]
   15a70:	cmp	r8, r1
   15a74:	blt	15808 <rb_select_select+0xe4>
   15a78:	mov	r0, #0
   15a7c:	sub	sp, fp, #28
   15a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a84:	.word	0x00034640
   15a88:	.word	0x0003453c
   15a8c:	.word	0x000346a4
   15a90:	.word	0x000345a0
   15a94:	.word	0x00016cc0
   15a98:	.word	0x00016c6c
   15a9c:	.word	0x00016b84
   15aa0:	.word	0x00016c4c
   15aa4:	.word	0x00016bb8
   15aa8:	.word	0x00016aec
   15aac:	.word	0x00016b68
   15ab0:	.word	0x00016a9c
   15ab4:	.word	0x0003437c
   15ab8:	.word	0x00016b18
   15abc:	.word	0x0003431c
   15ac0:	.word	0x00034388
   15ac4:	.word	0x00034340
   15ac8:	.word	0x00016a5c
   15acc:	.word	0x00034260
   15ad0:	.word	0x000342cc
   15ad4:	.word	0x000169e4

00015ad8 <rb_init_netio_kqueue>:
   15ad8:	push	{fp, lr}
   15adc:	mov	fp, sp
   15ae0:	bl	552c <__errno_location@plt>
   15ae4:	mov	r1, #38	; 0x26
   15ae8:	str	r1, [r0]
   15aec:	mvn	r0, #0
   15af0:	pop	{fp, pc}

00015af4 <rb_setselect_kqueue>:
   15af4:	push	{fp, lr}
   15af8:	mov	fp, sp
   15afc:	bl	552c <__errno_location@plt>
   15b00:	mov	r1, #38	; 0x26
   15b04:	str	r1, [r0]
   15b08:	pop	{fp, pc}

00015b0c <rb_select_kqueue>:
   15b0c:	push	{fp, lr}
   15b10:	mov	fp, sp
   15b14:	bl	552c <__errno_location@plt>
   15b18:	mov	r1, #38	; 0x26
   15b1c:	str	r1, [r0]
   15b20:	mvn	r0, #0
   15b24:	pop	{fp, pc}

00015b28 <rb_setup_fd_kqueue>:
   15b28:	push	{fp, lr}
   15b2c:	mov	fp, sp
   15b30:	bl	552c <__errno_location@plt>
   15b34:	mov	r1, #38	; 0x26
   15b38:	str	r1, [r0]
   15b3c:	mvn	r0, #0
   15b40:	pop	{fp, pc}

00015b44 <rb_kqueue_init_event>:
   15b44:	bx	lr

00015b48 <rb_kqueue_sched_event>:
   15b48:	push	{fp, lr}
   15b4c:	mov	fp, sp
   15b50:	bl	552c <__errno_location@plt>
   15b54:	mov	r1, #38	; 0x26
   15b58:	str	r1, [r0]
   15b5c:	mvn	r0, #0
   15b60:	pop	{fp, pc}

00015b64 <rb_kqueue_unsched_event>:
   15b64:	bx	lr

00015b68 <rb_kqueue_supports_event>:
   15b68:	push	{fp, lr}
   15b6c:	mov	fp, sp
   15b70:	bl	552c <__errno_location@plt>
   15b74:	mov	r1, #38	; 0x26
   15b78:	str	r1, [r0]
   15b7c:	mov	r0, #0
   15b80:	pop	{fp, pc}

00015b84 <rb_rawbuf_flush>:
   15b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b88:	add	fp, sp, #28
   15b8c:	sub	sp, sp, #12
   15b90:	sub	sp, sp, #8192	; 0x2000
   15b94:	mov	r4, r0
   15b98:	ldr	r0, [r0]
   15b9c:	cmp	r0, #0
   15ba0:	beq	15d9c <rb_rawbuf_flush+0x218>
   15ba4:	mov	r0, r1
   15ba8:	mov	r8, r1
   15bac:	bl	4d88 <rb_fd_ssl@plt>
   15bb0:	cmp	r0, #0
   15bb4:	beq	15bd8 <rb_rawbuf_flush+0x54>
   15bb8:	ldr	r0, [r4]
   15bbc:	ldr	r6, [r0]
   15bc0:	ldrb	r0, [r6, #1040]	; 0x410
   15bc4:	cmp	r0, #0
   15bc8:	beq	15db8 <rb_rawbuf_flush+0x234>
   15bcc:	mov	r5, r4
   15bd0:	ldr	r0, [r5, #16]!
   15bd4:	b	15dcc <rb_rawbuf_flush+0x248>
   15bd8:	add	r6, sp, #8
   15bdc:	mov	r1, #0
   15be0:	mov	r2, #8192	; 0x2000
   15be4:	mov	r7, #0
   15be8:	mov	r0, r6
   15bec:	bl	4ee4 <memset@plt>
   15bf0:	ldr	r0, [r4]
   15bf4:	cmp	r0, #0
   15bf8:	beq	15d9c <rb_rawbuf_flush+0x218>
   15bfc:	movw	r1, #1022	; 0x3fe
   15c00:	ldr	r3, [r0]
   15c04:	ldrb	r2, [r3, #1040]	; 0x410
   15c08:	cmp	r2, #0
   15c0c:	beq	15c24 <rb_rawbuf_flush+0xa0>
   15c10:	ldr	r5, [r4, #16]
   15c14:	ldr	r2, [r3, #1036]	; 0x40c
   15c18:	add	r3, r3, r5
   15c1c:	sub	r2, r2, r5
   15c20:	b	15c28 <rb_rawbuf_flush+0xa4>
   15c24:	ldr	r2, [r3, #1036]	; 0x40c
   15c28:	add	r5, r3, #12
   15c2c:	str	r5, [r6, r7, lsl #3]
   15c30:	add	r3, r6, r7, lsl #3
   15c34:	add	r5, r7, #1
   15c38:	cmp	r7, r1
   15c3c:	str	r2, [r3, #4]
   15c40:	bhi	15c54 <rb_rawbuf_flush+0xd0>
   15c44:	ldr	r0, [r0, #8]
   15c48:	mov	r7, r5
   15c4c:	cmp	r0, #0
   15c50:	bne	15c00 <rb_rawbuf_flush+0x7c>
   15c54:	add	r1, sp, #8
   15c58:	mov	r0, r8
   15c5c:	mov	r2, r5
   15c60:	bl	5328 <rb_writev@plt>
   15c64:	mov	sl, r0
   15c68:	cmp	r0, #1
   15c6c:	blt	15e6c <rb_rawbuf_flush+0x2e8>
   15c70:	ldr	r6, [r4]
   15c74:	cmp	r6, #0
   15c78:	beq	15e6c <rb_rawbuf_flush+0x2e8>
   15c7c:	sub	r0, r5, #1
   15c80:	mov	r5, #0
   15c84:	mov	r7, sl
   15c88:	str	r0, [sp, #4]
   15c8c:	ldr	r1, [r6]
   15c90:	ldr	r6, [r6, #8]
   15c94:	ldrb	r0, [r1, #1040]	; 0x410
   15c98:	ldr	r9, [r1, #1036]	; 0x40c
   15c9c:	cmp	r0, #0
   15ca0:	beq	15cb4 <rb_rawbuf_flush+0x130>
   15ca4:	ldr	r0, [r4, #16]
   15ca8:	sub	r8, r9, r0
   15cac:	cmp	r7, r8
   15cb0:	bge	15d24 <rb_rawbuf_flush+0x1a0>
   15cb4:	cmp	r7, r9
   15cb8:	blt	15e78 <rb_rawbuf_flush+0x2f4>
   15cbc:	ldr	r0, [r4, #12]
   15cc0:	mov	r3, r4
   15cc4:	sub	r0, r0, r9
   15cc8:	str	r0, [r4, #12]
   15ccc:	ldr	r0, [r1, #8]
   15cd0:	ldr	r2, [r1, #4]
   15cd4:	cmp	r0, #0
   15cd8:	streq	r2, [r4, #4]
   15cdc:	strne	r2, [r0, #4]
   15ce0:	ldrne	r2, [r1, #4]
   15ce4:	cmp	r2, #0
   15ce8:	addne	r3, r2, #8
   15cec:	str	r0, [r3]
   15cf0:	mov	r0, #0
   15cf4:	str	r0, [r1, #4]
   15cf8:	str	r0, [r1, #8]
   15cfc:	ldr	r0, [r4, #8]
   15d00:	sub	r0, r0, #1
   15d04:	str	r0, [r4, #8]
   15d08:	ldr	r0, [pc, #388]	; 15e94 <rb_rawbuf_flush+0x310>
   15d0c:	ldr	r0, [pc, r0]
   15d10:	bl	5154 <rb_bh_free@plt>
   15d14:	mov	r8, r9
   15d18:	cmp	r6, #0
   15d1c:	bne	15d84 <rb_rawbuf_flush+0x200>
   15d20:	b	15e6c <rb_rawbuf_flush+0x2e8>
   15d24:	ldr	r0, [r4, #12]
   15d28:	mov	r3, r4
   15d2c:	sub	r0, r0, r8
   15d30:	str	r0, [r4, #12]
   15d34:	ldr	r0, [r1, #8]
   15d38:	ldr	r2, [r1, #4]
   15d3c:	cmp	r0, #0
   15d40:	streq	r2, [r4, #4]
   15d44:	strne	r2, [r0, #4]
   15d48:	ldrne	r2, [r1, #4]
   15d4c:	cmp	r2, #0
   15d50:	addne	r3, r2, #8
   15d54:	str	r0, [r3]
   15d58:	mov	r0, #0
   15d5c:	str	r0, [r1, #4]
   15d60:	str	r0, [r1, #8]
   15d64:	ldr	r0, [r4, #8]
   15d68:	sub	r0, r0, #1
   15d6c:	str	r0, [r4, #8]
   15d70:	ldr	r0, [pc, #280]	; 15e90 <rb_rawbuf_flush+0x30c>
   15d74:	ldr	r0, [pc, r0]
   15d78:	bl	5154 <rb_bh_free@plt>
   15d7c:	cmp	r6, #0
   15d80:	beq	15e6c <rb_rawbuf_flush+0x2e8>
   15d84:	ldr	r0, [sp, #4]
   15d88:	add	r5, r5, #1
   15d8c:	sub	r7, r7, r8
   15d90:	cmp	r5, r0
   15d94:	bls	15c8c <rb_rawbuf_flush+0x108>
   15d98:	b	15e6c <rb_rawbuf_flush+0x2e8>
   15d9c:	bl	552c <__errno_location@plt>
   15da0:	mov	r1, #11
   15da4:	mvn	sl, #0
   15da8:	str	r1, [r0]
   15dac:	mov	r0, sl
   15db0:	sub	sp, fp, #28
   15db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15db8:	mov	r0, #1
   15dbc:	mov	r5, r4
   15dc0:	strb	r0, [r6, #1040]	; 0x410
   15dc4:	mov	r0, #0
   15dc8:	str	r0, [r5, #16]!
   15dcc:	ldr	r1, [r6, #1036]	; 0x40c
   15dd0:	sub	r2, r1, r0
   15dd4:	add	r0, r6, r0
   15dd8:	add	r1, r0, #12
   15ddc:	mov	r0, r8
   15de0:	bl	4f08 <rb_write@plt>
   15de4:	mov	sl, r0
   15de8:	cmp	r0, #1
   15dec:	blt	15e6c <rb_rawbuf_flush+0x2e8>
   15df0:	ldr	r0, [r5]
   15df4:	add	r0, r0, sl
   15df8:	str	r0, [r5]
   15dfc:	ldr	r1, [r6, #1036]	; 0x40c
   15e00:	cmp	r0, r1
   15e04:	bne	15e60 <rb_rawbuf_flush+0x2dc>
   15e08:	mov	r0, #0
   15e0c:	mov	r2, r4
   15e10:	str	r0, [r5]
   15e14:	ldr	r0, [r6, #8]
   15e18:	ldr	r1, [r6, #4]
   15e1c:	cmp	r0, #0
   15e20:	streq	r1, [r4, #4]
   15e24:	strne	r1, [r0, #4]
   15e28:	ldrne	r1, [r6, #4]
   15e2c:	cmp	r1, #0
   15e30:	addne	r2, r1, #8
   15e34:	mov	r1, r6
   15e38:	str	r0, [r2]
   15e3c:	mov	r0, #0
   15e40:	str	r0, [r6, #4]
   15e44:	str	r0, [r6, #8]
   15e48:	ldr	r0, [r4, #8]
   15e4c:	sub	r0, r0, #1
   15e50:	str	r0, [r4, #8]
   15e54:	ldr	r0, [pc, #60]	; 15e98 <rb_rawbuf_flush+0x314>
   15e58:	ldr	r0, [pc, r0]
   15e5c:	bl	5154 <rb_bh_free@plt>
   15e60:	ldr	r0, [r4, #12]
   15e64:	sub	r0, r0, sl
   15e68:	str	r0, [r4, #12]
   15e6c:	mov	r0, sl
   15e70:	sub	sp, fp, #28
   15e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e78:	mov	r0, #1
   15e7c:	strb	r0, [r1, #1040]	; 0x410
   15e80:	str	r7, [r4, #16]
   15e84:	ldr	r0, [r4, #12]
   15e88:	sub	r0, r0, r7
   15e8c:	b	15e68 <rb_rawbuf_flush+0x2e4>
   15e90:	.word	0x0003410c
   15e94:	.word	0x00034174
   15e98:	.word	0x00034028

00015e9c <rb_rawbuf_append>:
   15e9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15ea0:	add	fp, sp, #24
   15ea4:	mov	r8, r0
   15ea8:	ldr	r0, [r0, #4]
   15eac:	mov	r6, r2
   15eb0:	mov	r5, r1
   15eb4:	cmp	r0, #0
   15eb8:	ldrne	r4, [r0]
   15ebc:	cmpne	r4, #0
   15ec0:	bne	15f74 <rb_rawbuf_append+0xd8>
   15ec4:	cmp	r6, #1
   15ec8:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ecc:	mov	r9, #0
   15ed0:	b	15edc <rb_rawbuf_append+0x40>
   15ed4:	mov	r0, r8
   15ed8:	b	15f08 <rb_rawbuf_append+0x6c>
   15edc:	ldr	r0, [pc, #240]	; 15fd4 <rb_rawbuf_append+0x138>
   15ee0:	ldr	r0, [pc, r0]
   15ee4:	bl	51cc <rb_bh_alloc@plt>
   15ee8:	str	r9, [r0, #8]
   15eec:	str	r0, [r0]
   15ef0:	mov	r7, r0
   15ef4:	ldr	r0, [r8, #4]
   15ef8:	cmp	r0, #0
   15efc:	str	r0, [r7, #4]
   15f00:	beq	15f10 <rb_rawbuf_append+0x74>
   15f04:	add	r0, r0, #8
   15f08:	str	r7, [r0]
   15f0c:	b	15f1c <rb_rawbuf_append+0x80>
   15f10:	ldr	r0, [r8]
   15f14:	cmp	r0, #0
   15f18:	beq	15ed4 <rb_rawbuf_append+0x38>
   15f1c:	str	r7, [r8, #4]
   15f20:	cmp	r6, #1024	; 0x400
   15f24:	mov	r4, r6
   15f28:	mov	r1, r5
   15f2c:	ldr	r0, [r8, #8]
   15f30:	movge	r4, #1024	; 0x400
   15f34:	mov	r2, r4
   15f38:	add	r0, r0, #1
   15f3c:	str	r0, [r8, #8]
   15f40:	add	r0, r7, #12
   15f44:	bl	50a0 <memcpy@plt>
   15f48:	ldr	r0, [r7, #1036]	; 0x40c
   15f4c:	sub	r6, r6, r4
   15f50:	add	r5, r5, r4
   15f54:	cmp	r6, #0
   15f58:	add	r0, r0, r4
   15f5c:	str	r0, [r7, #1036]	; 0x40c
   15f60:	ldr	r0, [r8, #12]
   15f64:	add	r0, r0, r4
   15f68:	str	r0, [r8, #12]
   15f6c:	bgt	15edc <rb_rawbuf_append+0x40>
   15f70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15f74:	ldr	r0, [r4, #1036]	; 0x40c
   15f78:	cmp	r0, #1024	; 0x400
   15f7c:	bge	15ec4 <rb_rawbuf_append+0x28>
   15f80:	ldrb	r1, [r4, #1040]	; 0x410
   15f84:	cmp	r1, #0
   15f88:	bne	15ec4 <rb_rawbuf_append+0x28>
   15f8c:	rsb	r7, r0, #1024	; 0x400
   15f90:	add	r0, r4, r0
   15f94:	mov	r1, r5
   15f98:	cmp	r7, r6
   15f9c:	add	r0, r0, #12
   15fa0:	movgt	r7, r6
   15fa4:	mov	r2, r7
   15fa8:	bl	50a0 <memcpy@plt>
   15fac:	ldr	r0, [r4, #1036]	; 0x40c
   15fb0:	subs	r6, r6, r7
   15fb4:	add	r0, r7, r0
   15fb8:	str	r0, [r4, #1036]	; 0x40c
   15fbc:	ldr	r0, [r8, #12]
   15fc0:	add	r0, r0, r7
   15fc4:	str	r0, [r8, #12]
   15fc8:	beq	15f70 <rb_rawbuf_append+0xd4>
   15fcc:	add	r5, r5, r7
   15fd0:	b	15ec4 <rb_rawbuf_append+0x28>
   15fd4:	.word	0x00033fa0

00015fd8 <rb_rawbuf_get>:
   15fd8:	push	{r4, r5, r6, r7, fp, lr}
   15fdc:	add	fp, sp, #16
   15fe0:	mov	r4, r0
   15fe4:	ldr	r0, [r0]
   15fe8:	cmp	r0, #0
   15fec:	moveq	r6, #0
   15ff0:	moveq	r0, r6
   15ff4:	popeq	{r4, r5, r6, r7, fp, pc}
   15ff8:	ldr	r7, [r0]
   15ffc:	mov	r5, r2
   16000:	ldrb	r0, [r7, #1040]	; 0x410
   16004:	cmp	r0, #0
   16008:	beq	1601c <rb_rawbuf_get+0x44>
   1600c:	ldr	r0, [r4, #16]
   16010:	add	r0, r7, r0
   16014:	add	r2, r0, #12
   16018:	b	16020 <rb_rawbuf_get+0x48>
   1601c:	add	r2, r7, #12
   16020:	ldr	r6, [r7, #1036]	; 0x40c
   16024:	mov	r0, r1
   16028:	mov	r1, r2
   1602c:	cmp	r6, r5
   16030:	movge	r6, r5
   16034:	mov	r2, r6
   16038:	bl	50a0 <memcpy@plt>
   1603c:	ldr	r0, [r7, #1036]	; 0x40c
   16040:	cmp	r0, r6
   16044:	bne	160b4 <rb_rawbuf_get+0xdc>
   16048:	mov	r0, #0
   1604c:	mov	r2, r4
   16050:	str	r0, [r4, #16]
   16054:	ldr	r0, [r7, #8]
   16058:	ldr	r1, [r7, #4]
   1605c:	cmp	r0, #0
   16060:	streq	r1, [r4, #4]
   16064:	strne	r1, [r0, #4]
   16068:	ldrne	r1, [r7, #4]
   1606c:	cmp	r1, #0
   16070:	addne	r2, r1, #8
   16074:	mov	r1, r7
   16078:	str	r0, [r2]
   1607c:	mov	r0, #0
   16080:	str	r0, [r7, #4]
   16084:	str	r0, [r7, #8]
   16088:	ldr	r0, [r4, #8]
   1608c:	sub	r0, r0, #1
   16090:	str	r0, [r4, #8]
   16094:	ldr	r0, [pc, #72]	; 160e4 <rb_rawbuf_get+0x10c>
   16098:	ldr	r0, [pc, r0]
   1609c:	bl	5154 <rb_bh_free@plt>
   160a0:	ldr	r0, [r4, #12]
   160a4:	sub	r0, r0, r5
   160a8:	str	r0, [r4, #12]
   160ac:	mov	r0, r6
   160b0:	pop	{r4, r5, r6, r7, fp, pc}
   160b4:	mov	r1, #1
   160b8:	sub	r0, r0, r6
   160bc:	strb	r1, [r7, #1040]	; 0x410
   160c0:	str	r0, [r7, #1036]	; 0x40c
   160c4:	ldr	r0, [r4, #12]
   160c8:	ldr	r1, [r4, #16]
   160cc:	sub	r0, r0, r6
   160d0:	add	r1, r1, r6
   160d4:	str	r0, [r4, #12]
   160d8:	mov	r0, r6
   160dc:	str	r1, [r4, #16]
   160e0:	pop	{r4, r5, r6, r7, fp, pc}
   160e4:	.word	0x00033de8

000160e8 <rb_rawbuf_length>:
   160e8:	ldr	r0, [r0, #12]
   160ec:	bx	lr

000160f0 <rb_new_rawbuffer>:
   160f0:	push	{fp, lr}
   160f4:	mov	fp, sp
   160f8:	mov	r0, #1
   160fc:	mov	r1, #20
   16100:	bl	4ea8 <calloc@plt>
   16104:	cmp	r0, #0
   16108:	popne	{fp, pc}
   1610c:	bl	51fc <rb_outofmemory@plt>

00016110 <rb_free_rawbuffer>:
   16110:	push	{r4, r5, r6, sl, fp, lr}
   16114:	add	fp, sp, #16
   16118:	ldr	r5, [r0]
   1611c:	mov	r4, r0
   16120:	cmp	r5, #0
   16124:	beq	16184 <rb_free_rawbuffer+0x74>
   16128:	mov	r6, #0
   1612c:	ldr	r1, [r5]
   16130:	ldr	r5, [r5, #8]
   16134:	mov	r3, r4
   16138:	ldr	r0, [r1, #8]
   1613c:	ldr	r2, [r1, #4]
   16140:	cmp	r0, #0
   16144:	streq	r2, [r4, #4]
   16148:	strne	r2, [r0, #4]
   1614c:	ldrne	r2, [r1, #4]
   16150:	cmp	r2, #0
   16154:	addne	r3, r2, #8
   16158:	str	r0, [r3]
   1615c:	str	r6, [r1, #4]
   16160:	str	r6, [r1, #8]
   16164:	ldr	r0, [r4, #8]
   16168:	sub	r0, r0, #1
   1616c:	str	r0, [r4, #8]
   16170:	ldr	r0, [pc, #24]	; 16190 <rb_free_rawbuffer+0x80>
   16174:	ldr	r0, [pc, r0]
   16178:	bl	5154 <rb_bh_free@plt>
   1617c:	cmp	r5, #0
   16180:	bne	1612c <rb_free_rawbuffer+0x1c>
   16184:	mov	r0, r4
   16188:	pop	{r4, r5, r6, sl, fp, lr}
   1618c:	b	4f98 <free@plt>
   16190:	.word	0x00033d0c

00016194 <rb_init_rawbuffers>:
   16194:	mov	r1, r0
   16198:	ldr	r0, [pc, #52]	; 161d4 <rb_init_rawbuffers+0x40>
   1619c:	ldr	r0, [pc, r0]
   161a0:	cmp	r0, #0
   161a4:	bxne	lr
   161a8:	push	{fp, lr}
   161ac:	mov	fp, sp
   161b0:	ldr	r2, [pc, #32]	; 161d8 <rb_init_rawbuffers+0x44>
   161b4:	movw	r0, #1044	; 0x414
   161b8:	add	r2, pc, r2
   161bc:	bl	5304 <rb_bh_create@plt>
   161c0:	ldr	r1, [pc, #20]	; 161dc <rb_init_rawbuffers+0x48>
   161c4:	add	r1, pc, r1
   161c8:	str	r0, [r1]
   161cc:	pop	{fp, lr}
   161d0:	bx	lr
   161d4:	.word	0x00033ce4
   161d8:	.word	0x00005001
   161dc:	.word	0x00033cbc

000161e0 <rb_init_patricia>:
   161e0:	bx	lr

000161e4 <rb_new_patricia>:
   161e4:	push	{r4, sl, fp, lr}
   161e8:	add	fp, sp, #8
   161ec:	mov	r4, r0
   161f0:	mov	r0, #1
   161f4:	mov	r1, #12
   161f8:	bl	4ea8 <calloc@plt>
   161fc:	cmp	r0, #0
   16200:	strne	r4, [r0, #4]
   16204:	ldrne	r1, [pc, #24]	; 16224 <rb_new_patricia+0x40>
   16208:	ldrne	r1, [pc, r1]
   1620c:	ldrne	r2, [pc, #20]	; 16228 <rb_new_patricia+0x44>
   16210:	addne	r1, r1, #1
   16214:	addne	r2, pc, r2
   16218:	strne	r1, [r2]
   1621c:	popne	{r4, sl, fp, pc}
   16220:	bl	51fc <rb_outofmemory@plt>
   16224:	.word	0x00033c7c
   16228:	.word	0x00033c70

0001622c <rb_clear_patricia>:
   1622c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16230:	add	fp, sp, #28
   16234:	sub	sp, sp, #524	; 0x20c
   16238:	ldr	r5, [r0]
   1623c:	mov	r4, r0
   16240:	cmp	r5, #0
   16244:	beq	1638c <rb_clear_patricia+0x160>
   16248:	mov	r9, r1
   1624c:	cmp	r1, #0
   16250:	beq	162f8 <rb_clear_patricia+0xcc>
   16254:	mov	sl, #0
   16258:	add	r8, sp, #4
   1625c:	ldmib	r5, {r0, r6, r7}
   16260:	cmp	r0, #0
   16264:	beq	1628c <rb_clear_patricia+0x60>
   16268:	ldr	r1, [r0, #4]
   1626c:	subs	r1, r1, #1
   16270:	str	r1, [r0, #4]
   16274:	bgt	1627c <rb_clear_patricia+0x50>
   16278:	bl	4f98 <free@plt>
   1627c:	ldr	r0, [r5, #20]
   16280:	cmp	r0, #0
   16284:	beq	1628c <rb_clear_patricia+0x60>
   16288:	blx	r9
   1628c:	mov	r0, r5
   16290:	bl	4f98 <free@plt>
   16294:	ldr	r0, [r4, #8]
   16298:	cmp	r6, #0
   1629c:	sub	r0, r0, #1
   162a0:	str	r0, [r4, #8]
   162a4:	beq	162c4 <rb_clear_patricia+0x98>
   162a8:	cmp	r7, #0
   162ac:	mov	r5, r6
   162b0:	strne	r7, [r8, sl, lsl #2]
   162b4:	addne	sl, sl, #1
   162b8:	cmp	r5, #0
   162bc:	bne	1625c <rb_clear_patricia+0x30>
   162c0:	b	1638c <rb_clear_patricia+0x160>
   162c4:	cmp	r7, #0
   162c8:	beq	162dc <rb_clear_patricia+0xb0>
   162cc:	mov	r5, r7
   162d0:	cmp	r5, #0
   162d4:	bne	1625c <rb_clear_patricia+0x30>
   162d8:	b	1638c <rb_clear_patricia+0x160>
   162dc:	cmp	sl, #0
   162e0:	beq	1638c <rb_clear_patricia+0x160>
   162e4:	sub	sl, sl, #1
   162e8:	ldr	r5, [r8, sl, lsl #2]
   162ec:	cmp	r5, #0
   162f0:	bne	1625c <rb_clear_patricia+0x30>
   162f4:	b	1638c <rb_clear_patricia+0x160>
   162f8:	mov	r9, #0
   162fc:	add	r8, sp, #4
   16300:	ldmib	r5, {r0, r7}
   16304:	ldr	r6, [r5, #12]
   16308:	cmp	r0, #0
   1630c:	beq	16324 <rb_clear_patricia+0xf8>
   16310:	ldr	r1, [r0, #4]
   16314:	subs	r1, r1, #1
   16318:	str	r1, [r0, #4]
   1631c:	bgt	16324 <rb_clear_patricia+0xf8>
   16320:	bl	4f98 <free@plt>
   16324:	mov	r0, r5
   16328:	bl	4f98 <free@plt>
   1632c:	ldr	r0, [r4, #8]
   16330:	cmp	r7, #0
   16334:	sub	r0, r0, #1
   16338:	str	r0, [r4, #8]
   1633c:	beq	1635c <rb_clear_patricia+0x130>
   16340:	cmp	r6, #0
   16344:	mov	r5, r7
   16348:	strne	r6, [r8, r9, lsl #2]
   1634c:	addne	r9, r9, #1
   16350:	cmp	r5, #0
   16354:	bne	16300 <rb_clear_patricia+0xd4>
   16358:	b	1638c <rb_clear_patricia+0x160>
   1635c:	cmp	r6, #0
   16360:	beq	16374 <rb_clear_patricia+0x148>
   16364:	mov	r5, r6
   16368:	cmp	r5, #0
   1636c:	bne	16300 <rb_clear_patricia+0xd4>
   16370:	b	1638c <rb_clear_patricia+0x160>
   16374:	cmp	r9, #0
   16378:	beq	1638c <rb_clear_patricia+0x160>
   1637c:	sub	r9, r9, #1
   16380:	ldr	r5, [r8, r9, lsl #2]
   16384:	cmp	r5, #0
   16388:	bne	16300 <rb_clear_patricia+0xd4>
   1638c:	mov	r0, r4
   16390:	sub	sp, fp, #28
   16394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16398:	b	4f98 <free@plt>

0001639c <rb_destroy_patricia>:
   1639c:	push	{fp, lr}
   163a0:	mov	fp, sp
   163a4:	bl	4dd0 <rb_clear_patricia@plt>
   163a8:	ldr	r0, [pc, #20]	; 163c4 <rb_destroy_patricia+0x28>
   163ac:	ldr	r0, [pc, r0]
   163b0:	ldr	r1, [pc, #16]	; 163c8 <rb_destroy_patricia+0x2c>
   163b4:	sub	r0, r0, #1
   163b8:	add	r1, pc, r1
   163bc:	str	r0, [r1]
   163c0:	pop	{fp, pc}
   163c4:	.word	0x00033ad8
   163c8:	.word	0x00033acc

000163cc <rb_patricia_process>:
   163cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   163d0:	add	fp, sp, #24
   163d4:	sub	sp, sp, #520	; 0x208
   163d8:	ldr	r7, [r0]
   163dc:	cmp	r7, #0
   163e0:	beq	1645c <rb_patricia_process+0x90>
   163e4:	mov	r4, r1
   163e8:	mov	r5, #0
   163ec:	add	r6, sp, #4
   163f0:	ldr	r0, [r7, #4]
   163f4:	cmp	r0, #0
   163f8:	beq	16404 <rb_patricia_process+0x38>
   163fc:	ldr	r1, [r7, #20]
   16400:	blx	r4
   16404:	ldr	r0, [r7, #8]
   16408:	ldr	r7, [r7, #12]
   1640c:	cmp	r0, #0
   16410:	beq	16430 <rb_patricia_process+0x64>
   16414:	cmp	r7, #0
   16418:	strne	r7, [r6, r5, lsl #2]
   1641c:	addne	r5, r5, #1
   16420:	mov	r7, r0
   16424:	cmp	r7, #0
   16428:	bne	163f0 <rb_patricia_process+0x24>
   1642c:	b	1645c <rb_patricia_process+0x90>
   16430:	cmp	r7, #0
   16434:	beq	16444 <rb_patricia_process+0x78>
   16438:	cmp	r7, #0
   1643c:	bne	163f0 <rb_patricia_process+0x24>
   16440:	b	1645c <rb_patricia_process+0x90>
   16444:	cmp	r5, #0
   16448:	beq	1645c <rb_patricia_process+0x90>
   1644c:	sub	r5, r5, #1
   16450:	ldr	r7, [r6, r5, lsl #2]
   16454:	cmp	r7, #0
   16458:	bne	163f0 <rb_patricia_process+0x24>
   1645c:	sub	sp, fp, #24
   16460:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00016464 <rb_patricia_search_exact>:
   16464:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16468:	add	fp, sp, #24
   1646c:	ldr	r4, [r0]
   16470:	cmp	r4, #0
   16474:	beq	164e4 <rb_patricia_search_exact+0x80>
   16478:	ldrh	r6, [r1, #2]
   1647c:	add	r5, r1, #8
   16480:	mov	r0, #128	; 0x80
   16484:	ldr	r1, [r4]
   16488:	cmp	r1, r6
   1648c:	bcs	164b4 <rb_patricia_search_exact+0x50>
   16490:	ldrb	r2, [r5, r1, lsr #3]
   16494:	and	r1, r1, #7
   16498:	tst	r2, r0, lsr r1
   1649c:	mov	r1, #12
   164a0:	movweq	r1, #8
   164a4:	ldr	r4, [r4, r1]
   164a8:	cmp	r4, #0
   164ac:	bne	16484 <rb_patricia_search_exact+0x20>
   164b0:	b	164e4 <rb_patricia_search_exact+0x80>
   164b4:	bhi	164e4 <rb_patricia_search_exact+0x80>
   164b8:	ldr	r0, [r4, #4]
   164bc:	cmp	r0, #0
   164c0:	beq	164e4 <rb_patricia_search_exact+0x80>
   164c4:	add	r8, r0, #8
   164c8:	lsr	r7, r6, #3
   164cc:	mov	r1, r5
   164d0:	mov	r0, r8
   164d4:	mov	r2, r7
   164d8:	bl	4d28 <memcmp@plt>
   164dc:	cmp	r0, #0
   164e0:	beq	164f0 <rb_patricia_search_exact+0x8c>
   164e4:	mov	r4, #0
   164e8:	mov	r0, r4
   164ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   164f0:	ands	r0, r6, #7
   164f4:	beq	164e8 <rb_patricia_search_exact+0x84>
   164f8:	ldrb	r1, [r8, r7]
   164fc:	ldrb	r2, [r5, r7]
   16500:	rsb	r0, r0, #8
   16504:	eor	r1, r2, r1
   16508:	mov	r2, #255	; 0xff
   1650c:	tst	r1, r2, lsl r0
   16510:	movne	r4, #0
   16514:	mov	r0, r4
   16518:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001651c <rb_patricia_search_best2>:
   1651c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16520:	add	fp, sp, #28
   16524:	sub	sp, sp, #524	; 0x20c
   16528:	ldr	r7, [r0]
   1652c:	cmp	r7, #0
   16530:	beq	16624 <rb_patricia_search_best2+0x108>
   16534:	ldrh	r6, [r1, #2]
   16538:	add	sl, r1, #8
   1653c:	mov	r0, #0
   16540:	mov	r5, #128	; 0x80
   16544:	add	ip, sp, #4
   16548:	ldr	r4, [r7]
   1654c:	cmp	r4, r6
   16550:	bcs	16634 <rb_patricia_search_best2+0x118>
   16554:	ldr	r3, [r7, #4]
   16558:	cmp	r3, #0
   1655c:	strne	r7, [ip, r0, lsl #2]
   16560:	addne	r0, r0, #1
   16564:	ldrb	r3, [sl, r4, lsr #3]
   16568:	and	r4, r4, #7
   1656c:	tst	r3, r5, lsr r4
   16570:	mov	r3, #12
   16574:	movweq	r3, #8
   16578:	ldr	r7, [r7, r3]
   1657c:	cmp	r7, #0
   16580:	bne	16548 <rb_patricia_search_best2+0x2c>
   16584:	cmp	r0, #1
   16588:	blt	16650 <rb_patricia_search_best2+0x134>
   1658c:	cmp	r1, #0
   16590:	sub	r8, ip, #4
   16594:	moveq	sl, r1
   16598:	subs	r4, r0, #1
   1659c:	blt	16660 <rb_patricia_search_best2+0x144>
   165a0:	ldr	r5, [r8, r0, lsl #2]
   165a4:	mov	r1, sl
   165a8:	ldr	r6, [r5, #4]
   165ac:	ldrh	r9, [r6, #2]
   165b0:	cmp	r6, #0
   165b4:	addne	r6, r6, #8
   165b8:	mov	r0, r6
   165bc:	lsr	r7, r9, #3
   165c0:	mov	r2, r7
   165c4:	bl	4d28 <memcmp@plt>
   165c8:	mov	r1, #0
   165cc:	cmp	r0, #0
   165d0:	beq	165e4 <rb_patricia_search_best2+0xc8>
   165d4:	cmp	r1, #0
   165d8:	mov	r0, r4
   165dc:	beq	16598 <rb_patricia_search_best2+0x7c>
   165e0:	b	16618 <rb_patricia_search_best2+0xfc>
   165e4:	ands	r0, r9, #7
   165e8:	beq	16618 <rb_patricia_search_best2+0xfc>
   165ec:	ldrb	r1, [r6, r7]
   165f0:	ldrb	r2, [sl, r7]
   165f4:	rsb	r0, r0, #8
   165f8:	eor	r1, r2, r1
   165fc:	mov	r2, #255	; 0xff
   16600:	and	r0, r1, r2, lsl r0
   16604:	clz	r0, r0
   16608:	lsr	r1, r0, #5
   1660c:	cmp	r1, #0
   16610:	mov	r0, r4
   16614:	beq	16598 <rb_patricia_search_best2+0x7c>
   16618:	mov	r0, r5
   1661c:	sub	sp, fp, #28
   16620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16624:	mov	r5, #0
   16628:	mov	r0, r5
   1662c:	sub	sp, fp, #28
   16630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16634:	cmp	r2, #0
   16638:	ldrne	r2, [r7, #4]
   1663c:	cmpne	r2, #0
   16640:	strne	r7, [ip, r0, lsl #2]
   16644:	addne	r0, r0, #1
   16648:	cmp	r0, #1
   1664c:	bge	1658c <rb_patricia_search_best2+0x70>
   16650:	mov	r5, #0
   16654:	mov	r0, r5
   16658:	sub	sp, fp, #28
   1665c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16660:	mov	r5, #0
   16664:	mov	r0, r5
   16668:	sub	sp, fp, #28
   1666c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016670 <rb_patricia_search_best>:
   16670:	mov	r2, #1
   16674:	b	1651c <rb_patricia_search_best2>

00016678 <rb_patricia_lookup>:
   16678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1667c:	add	fp, sp, #28
   16680:	sub	sp, sp, #12
   16684:	ldr	r3, [r0]
   16688:	mov	r9, r0
   1668c:	cmp	r3, #0
   16690:	beq	16700 <rb_patricia_lookup+0x88>
   16694:	ldrh	r8, [r1, #2]
   16698:	add	r5, r1, #8
   1669c:	mov	r2, #128	; 0x80
   166a0:	ldr	r6, [r3]
   166a4:	mov	r0, r3
   166a8:	cmp	r6, r8
   166ac:	bcc	166bc <rb_patricia_lookup+0x44>
   166b0:	ldr	r3, [r0, #4]
   166b4:	cmp	r3, #0
   166b8:	bne	16750 <rb_patricia_lookup+0xd8>
   166bc:	ldr	r3, [r9, #4]
   166c0:	cmp	r6, r3
   166c4:	bcs	166e8 <rb_patricia_lookup+0x70>
   166c8:	ldrb	r3, [r5, r6, lsr #3]
   166cc:	and	r7, r6, #7
   166d0:	tst	r3, r2, lsr r7
   166d4:	beq	166e8 <rb_patricia_lookup+0x70>
   166d8:	ldr	r3, [r0, #12]
   166dc:	cmp	r3, #0
   166e0:	bne	166a0 <rb_patricia_lookup+0x28>
   166e4:	b	166f4 <rb_patricia_lookup+0x7c>
   166e8:	ldr	r3, [r0, #8]
   166ec:	cmp	r3, #0
   166f0:	bne	166a0 <rb_patricia_lookup+0x28>
   166f4:	cmp	r6, r8
   166f8:	movcs	r6, r8
   166fc:	b	16754 <rb_patricia_lookup+0xdc>
   16700:	mov	r4, r1
   16704:	mov	r0, #1
   16708:	mov	r1, #24
   1670c:	bl	4ea8 <calloc@plt>
   16710:	cmp	r0, #0
   16714:	beq	16bf0 <rb_patricia_lookup+0x578>
   16718:	ldrh	r6, [r4, #2]
   1671c:	mov	r5, r0
   16720:	cmp	r4, #0
   16724:	str	r6, [r0]
   16728:	mov	r0, #0
   1672c:	beq	16b24 <rb_patricia_lookup+0x4ac>
   16730:	ldr	r1, [r4, #4]
   16734:	mov	r2, r4
   16738:	cmp	r1, #0
   1673c:	beq	168c8 <rb_patricia_lookup+0x250>
   16740:	add	r0, r1, #1
   16744:	str	r0, [r2, #4]
   16748:	mov	r0, r2
   1674c:	b	16b24 <rb_patricia_lookup+0x4ac>
   16750:	mov	r6, r8
   16754:	ldr	r3, [r0, #4]
   16758:	cmp	r6, #0
   1675c:	str	r5, [sp, #8]
   16760:	add	r7, r3, #8
   16764:	str	r7, [sp, #4]
   16768:	beq	167f4 <rb_patricia_lookup+0x17c>
   1676c:	ldrb	r2, [r5]
   16770:	ldrb	r7, [r7]
   16774:	mov	ip, #0
   16778:	eor	r7, r7, r2
   1677c:	mov	r2, #0
   16780:	tst	r7, #255	; 0xff
   16784:	bne	167b8 <rb_patricia_lookup+0x140>
   16788:	add	r5, r1, #9
   1678c:	add	r3, r3, #9
   16790:	mov	r2, #0
   16794:	add	sl, r2, #8
   16798:	cmp	sl, r6
   1679c:	bcs	167f8 <rb_patricia_lookup+0x180>
   167a0:	ldrb	r7, [r5], #1
   167a4:	ldrb	r4, [r3], #1
   167a8:	add	r2, r2, #8
   167ac:	eor	r7, r4, r7
   167b0:	tst	r7, #255	; 0xff
   167b4:	beq	16794 <rb_patricia_lookup+0x11c>
   167b8:	tst	r7, #128	; 0x80
   167bc:	bne	167ec <rb_patricia_lookup+0x174>
   167c0:	uxtb	r5, r7
   167c4:	mov	ip, #1
   167c8:	tst	r5, #64	; 0x40
   167cc:	moveq	ip, #2
   167d0:	tsteq	r5, #32
   167d4:	bne	167ec <rb_patricia_lookup+0x174>
   167d8:	mov	ip, #3
   167dc:	tst	r5, #16
   167e0:	moveq	ip, #4
   167e4:	tsteq	r5, #8
   167e8:	beq	16b8c <rb_patricia_lookup+0x514>
   167ec:	add	sl, ip, r2
   167f0:	b	167f8 <rb_patricia_lookup+0x180>
   167f4:	mov	sl, #0
   167f8:	cmp	sl, r6
   167fc:	movhi	sl, r6
   16800:	mov	r5, r0
   16804:	ldr	r0, [r0, #16]
   16808:	cmp	r0, #0
   1680c:	beq	1681c <rb_patricia_lookup+0x1a4>
   16810:	ldr	r2, [r0]
   16814:	cmp	r2, sl
   16818:	bcs	16800 <rb_patricia_lookup+0x188>
   1681c:	cmp	sl, r8
   16820:	mov	r4, r1
   16824:	ldreq	r0, [r5]
   16828:	cmpeq	r0, r8
   1682c:	beq	16874 <rb_patricia_lookup+0x1fc>
   16830:	mov	r0, #1
   16834:	mov	r1, #24
   16838:	bl	4ea8 <calloc@plt>
   1683c:	cmp	r0, #0
   16840:	beq	16bf0 <rb_patricia_lookup+0x578>
   16844:	mov	r7, r0
   16848:	str	r8, [r0]
   1684c:	mov	r0, #0
   16850:	cmp	r4, #0
   16854:	beq	16968 <rb_patricia_lookup+0x2f0>
   16858:	ldr	r1, [r4, #4]
   1685c:	cmp	r1, #0
   16860:	beq	1688c <rb_patricia_lookup+0x214>
   16864:	add	r0, r1, #1
   16868:	str	r0, [r4, #4]
   1686c:	mov	r0, r4
   16870:	b	16968 <rb_patricia_lookup+0x2f0>
   16874:	ldr	r0, [r5, #4]
   16878:	cmp	r0, #0
   1687c:	beq	16904 <rb_patricia_lookup+0x28c>
   16880:	mov	r0, r5
   16884:	sub	sp, fp, #28
   16888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1688c:	ldrh	r4, [r4]
   16890:	cmp	r4, #2
   16894:	beq	16938 <rb_patricia_lookup+0x2c0>
   16898:	cmp	r4, #10
   1689c:	bne	16968 <rb_patricia_lookup+0x2f0>
   168a0:	mov	r0, #1
   168a4:	mov	r1, #24
   168a8:	bl	4ea8 <calloc@plt>
   168ac:	cmp	r0, #0
   168b0:	beq	16bf0 <rb_patricia_lookup+0x578>
   168b4:	ldr	r1, [sp, #8]
   168b8:	vld1.8	{d16-d17}, [r1]
   168bc:	add	r1, r0, #8
   168c0:	vst1.8	{d16-d17}, [r1]
   168c4:	b	16958 <rb_patricia_lookup+0x2e0>
   168c8:	ldrh	r7, [r2], #8
   168cc:	cmp	r7, #2
   168d0:	beq	16af4 <rb_patricia_lookup+0x47c>
   168d4:	cmp	r7, #10
   168d8:	bne	16b24 <rb_patricia_lookup+0x4ac>
   168dc:	mov	r0, #1
   168e0:	mov	r1, #24
   168e4:	mov	r4, r2
   168e8:	bl	4ea8 <calloc@plt>
   168ec:	cmp	r0, #0
   168f0:	beq	16bf0 <rb_patricia_lookup+0x578>
   168f4:	vld1.8	{d16-d17}, [r4]
   168f8:	add	r1, r0, #8
   168fc:	vst1.8	{d16-d17}, [r1]
   16900:	b	16b14 <rb_patricia_lookup+0x49c>
   16904:	mov	r0, #0
   16908:	cmp	r4, #0
   1690c:	beq	16928 <rb_patricia_lookup+0x2b0>
   16910:	ldr	r1, [r4, #4]
   16914:	cmp	r1, #0
   16918:	beq	16b50 <rb_patricia_lookup+0x4d8>
   1691c:	add	r0, r1, #1
   16920:	str	r0, [r4, #4]
   16924:	mov	r0, r4
   16928:	str	r0, [r5, #4]
   1692c:	mov	r0, r5
   16930:	sub	sp, fp, #28
   16934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16938:	mov	r0, #1
   1693c:	mov	r1, #24
   16940:	bl	4ea8 <calloc@plt>
   16944:	cmp	r0, #0
   16948:	beq	16bf0 <rb_patricia_lookup+0x578>
   1694c:	ldr	r1, [sp, #8]
   16950:	ldr	r1, [r1]
   16954:	str	r1, [r0, #8]
   16958:	mov	r1, #1
   1695c:	strh	r4, [r0]
   16960:	strh	r8, [r0, #2]
   16964:	str	r1, [r0, #4]
   16968:	str	r0, [r7, #4]
   1696c:	vmov.i32	q8, #0	; 0x00000000
   16970:	add	r0, r7, #8
   16974:	vst1.32	{d16-d17}, [r0]
   16978:	ldr	r4, [r9, #8]
   1697c:	add	r1, r4, #1
   16980:	str	r1, [r9, #8]
   16984:	ldr	r1, [r5]
   16988:	cmp	r1, sl
   1698c:	bne	169cc <rb_patricia_lookup+0x354>
   16990:	str	r5, [r7, #16]
   16994:	ldr	r0, [r9, #4]
   16998:	cmp	sl, r0
   1699c:	bcs	16a38 <rb_patricia_lookup+0x3c0>
   169a0:	ldr	r0, [sp, #8]
   169a4:	and	r1, sl, #7
   169a8:	mov	r2, #128	; 0x80
   169ac:	ldrb	r0, [r0, sl, lsr #3]
   169b0:	tst	r0, r2, lsr r1
   169b4:	beq	16a38 <rb_patricia_lookup+0x3c0>
   169b8:	str	r7, [r5, #12]
   169bc:	mov	r5, r7
   169c0:	mov	r0, r5
   169c4:	sub	sp, fp, #28
   169c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169cc:	cmp	sl, r8
   169d0:	bne	16a4c <rb_patricia_lookup+0x3d4>
   169d4:	ldr	r1, [r9, #4]
   169d8:	cmp	r1, r8
   169dc:	bls	169f8 <rb_patricia_lookup+0x380>
   169e0:	ldr	r1, [sp, #4]
   169e4:	and	r2, r8, #7
   169e8:	mov	r3, #128	; 0x80
   169ec:	ldrb	r1, [r1, r8, lsr #3]
   169f0:	tst	r1, r3, lsr r2
   169f4:	addne	r0, r7, #12
   169f8:	str	r5, [r0]
   169fc:	ldr	r0, [r5, #16]
   16a00:	str	r0, [r7, #16]
   16a04:	ldr	r0, [r5, #16]
   16a08:	cmp	r0, #0
   16a0c:	beq	16a20 <rb_patricia_lookup+0x3a8>
   16a10:	mov	r9, r0
   16a14:	ldr	r1, [r9, #12]!
   16a18:	cmp	r1, r5
   16a1c:	addne	r9, r0, #8
   16a20:	str	r7, [r9]
   16a24:	str	r7, [r5, #16]
   16a28:	mov	r5, r7
   16a2c:	mov	r0, r5
   16a30:	sub	sp, fp, #28
   16a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a38:	str	r7, [r5, #8]
   16a3c:	mov	r5, r7
   16a40:	mov	r0, r5
   16a44:	sub	sp, fp, #28
   16a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a4c:	mov	r0, #1
   16a50:	mov	r1, #24
   16a54:	bl	4ea8 <calloc@plt>
   16a58:	cmp	r0, #0
   16a5c:	beq	16bf0 <rb_patricia_lookup+0x578>
   16a60:	str	sl, [r0]
   16a64:	ldr	r1, [r5, #16]
   16a68:	str	r1, [r0, #16]
   16a6c:	add	r1, r4, #2
   16a70:	str	r1, [r9, #8]
   16a74:	ldr	r1, [r9, #4]
   16a78:	cmp	sl, r1
   16a7c:	bcs	16ab4 <rb_patricia_lookup+0x43c>
   16a80:	ldr	r1, [sp, #8]
   16a84:	and	r2, sl, #7
   16a88:	mov	r3, #128	; 0x80
   16a8c:	ldrb	r1, [r1, sl, lsr #3]
   16a90:	tst	r1, r3, lsr r2
   16a94:	beq	16ab4 <rb_patricia_lookup+0x43c>
   16a98:	str	r5, [r0, #8]
   16a9c:	str	r7, [r0, #12]
   16aa0:	str	r0, [r7, #16]
   16aa4:	ldr	r1, [r5, #16]
   16aa8:	cmp	r1, #0
   16aac:	bne	16acc <rb_patricia_lookup+0x454>
   16ab0:	b	16adc <rb_patricia_lookup+0x464>
   16ab4:	str	r7, [r0, #8]
   16ab8:	str	r5, [r0, #12]
   16abc:	str	r0, [r7, #16]
   16ac0:	ldr	r1, [r5, #16]
   16ac4:	cmp	r1, #0
   16ac8:	beq	16adc <rb_patricia_lookup+0x464>
   16acc:	mov	r9, r1
   16ad0:	ldr	r2, [r9, #12]!
   16ad4:	cmp	r2, r5
   16ad8:	addne	r9, r1, #8
   16adc:	str	r0, [r9]
   16ae0:	str	r0, [r5, #16]
   16ae4:	mov	r5, r7
   16ae8:	mov	r0, r5
   16aec:	sub	sp, fp, #28
   16af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16af4:	mov	r0, #1
   16af8:	mov	r1, #24
   16afc:	mov	r4, r2
   16b00:	bl	4ea8 <calloc@plt>
   16b04:	cmp	r0, #0
   16b08:	beq	16bf0 <rb_patricia_lookup+0x578>
   16b0c:	ldr	r1, [r4]
   16b10:	str	r1, [r0, #8]
   16b14:	mov	r1, #1
   16b18:	strh	r7, [r0]
   16b1c:	strh	r6, [r0, #2]
   16b20:	str	r1, [r0, #4]
   16b24:	str	r0, [r5, #4]
   16b28:	vmov.i32	q8, #0	; 0x00000000
   16b2c:	add	r0, r5, #8
   16b30:	vst1.32	{d16-d17}, [r0]
   16b34:	str	r5, [r9]
   16b38:	ldr	r0, [r9, #8]
   16b3c:	add	r0, r0, #1
   16b40:	str	r0, [r9, #8]
   16b44:	mov	r0, r5
   16b48:	sub	sp, fp, #28
   16b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b50:	ldrh	r4, [r4]
   16b54:	cmp	r4, #2
   16b58:	beq	16bb0 <rb_patricia_lookup+0x538>
   16b5c:	cmp	r4, #10
   16b60:	bne	16928 <rb_patricia_lookup+0x2b0>
   16b64:	mov	r0, #1
   16b68:	mov	r1, #24
   16b6c:	bl	4ea8 <calloc@plt>
   16b70:	cmp	r0, #0
   16b74:	beq	16bf0 <rb_patricia_lookup+0x578>
   16b78:	ldr	r1, [sp, #8]
   16b7c:	vld1.8	{d16-d17}, [r1]
   16b80:	add	r1, r0, #8
   16b84:	vst1.8	{d16-d17}, [r1]
   16b88:	b	16bd0 <rb_patricia_lookup+0x558>
   16b8c:	mov	ip, #5
   16b90:	tst	r5, #4
   16b94:	moveq	ip, #6
   16b98:	tsteq	r5, #2
   16b9c:	bne	167ec <rb_patricia_lookup+0x174>
   16ba0:	mov	ip, #7
   16ba4:	tst	r5, #1
   16ba8:	movweq	ip, #8
   16bac:	b	167ec <rb_patricia_lookup+0x174>
   16bb0:	mov	r0, #1
   16bb4:	mov	r1, #24
   16bb8:	bl	4ea8 <calloc@plt>
   16bbc:	cmp	r0, #0
   16bc0:	beq	16bf0 <rb_patricia_lookup+0x578>
   16bc4:	ldr	r1, [sp, #8]
   16bc8:	ldr	r1, [r1]
   16bcc:	str	r1, [r0, #8]
   16bd0:	mov	r1, #1
   16bd4:	strh	r4, [r0]
   16bd8:	strh	r8, [r0, #2]
   16bdc:	str	r1, [r0, #4]
   16be0:	str	r0, [r5, #4]
   16be4:	mov	r0, r5
   16be8:	sub	sp, fp, #28
   16bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf0:	bl	51fc <rb_outofmemory@plt>

00016bf4 <rb_patricia_remove>:
   16bf4:	push	{r4, r5, r6, r7, fp, lr}
   16bf8:	add	fp, sp, #16
   16bfc:	ldr	r6, [r1, #12]
   16c00:	mov	r4, r0
   16c04:	ldr	r0, [r1, #8]
   16c08:	mov	r5, r1
   16c0c:	cmp	r6, #0
   16c10:	beq	16c4c <rb_patricia_remove+0x58>
   16c14:	cmp	r0, #0
   16c18:	beq	16c58 <rb_patricia_remove+0x64>
   16c1c:	ldr	r0, [r5, #4]
   16c20:	cmp	r0, #0
   16c24:	beq	16c3c <rb_patricia_remove+0x48>
   16c28:	ldr	r1, [r0, #4]
   16c2c:	subs	r1, r1, #1
   16c30:	str	r1, [r0, #4]
   16c34:	bgt	16c3c <rb_patricia_remove+0x48>
   16c38:	bl	4f98 <free@plt>
   16c3c:	mov	r0, #0
   16c40:	str	r0, [r5, #20]
   16c44:	str	r0, [r5, #4]
   16c48:	pop	{r4, r5, r6, r7, fp, pc}
   16c4c:	cmp	r0, #0
   16c50:	mov	r6, r0
   16c54:	beq	16cb8 <rb_patricia_remove+0xc4>
   16c58:	ldr	r7, [r5, #16]
   16c5c:	str	r7, [r6, #16]
   16c60:	ldr	r0, [r5, #4]
   16c64:	cmp	r0, #0
   16c68:	beq	16c80 <rb_patricia_remove+0x8c>
   16c6c:	ldr	r1, [r0, #4]
   16c70:	subs	r1, r1, #1
   16c74:	str	r1, [r0, #4]
   16c78:	bgt	16c80 <rb_patricia_remove+0x8c>
   16c7c:	bl	4f98 <free@plt>
   16c80:	mov	r0, r5
   16c84:	bl	4f98 <free@plt>
   16c88:	ldr	r0, [r4, #8]
   16c8c:	cmp	r7, #0
   16c90:	sub	r0, r0, #1
   16c94:	str	r0, [r4, #8]
   16c98:	streq	r6, [r4]
   16c9c:	popeq	{r4, r5, r6, r7, fp, pc}
   16ca0:	ldr	r0, [r7, #12]
   16ca4:	cmp	r0, r5
   16ca8:	streq	r6, [r7, #12]
   16cac:	popeq	{r4, r5, r6, r7, fp, pc}
   16cb0:	str	r6, [r7, #8]
   16cb4:	pop	{r4, r5, r6, r7, fp, pc}
   16cb8:	ldr	r0, [r5, #4]
   16cbc:	ldr	r6, [r5, #16]
   16cc0:	cmp	r0, #0
   16cc4:	beq	16cdc <rb_patricia_remove+0xe8>
   16cc8:	ldr	r1, [r0, #4]
   16ccc:	subs	r1, r1, #1
   16cd0:	str	r1, [r0, #4]
   16cd4:	bgt	16cdc <rb_patricia_remove+0xe8>
   16cd8:	bl	4f98 <free@plt>
   16cdc:	mov	r0, r5
   16ce0:	bl	4f98 <free@plt>
   16ce4:	ldr	r0, [r4, #8]
   16ce8:	cmp	r6, #0
   16cec:	sub	r0, r0, #1
   16cf0:	str	r0, [r4, #8]
   16cf4:	moveq	r0, #0
   16cf8:	streq	r0, [r4]
   16cfc:	popeq	{r4, r5, r6, r7, fp, pc}
   16d00:	ldr	r0, [r6, #12]
   16d04:	cmp	r0, r5
   16d08:	beq	16d18 <rb_patricia_remove+0x124>
   16d0c:	mov	r1, #0
   16d10:	str	r1, [r6, #8]
   16d14:	b	16d24 <rb_patricia_remove+0x130>
   16d18:	mov	r0, #0
   16d1c:	str	r0, [r6, #12]
   16d20:	ldr	r0, [r6, #8]
   16d24:	ldr	r1, [r6, #4]
   16d28:	cmp	r1, #0
   16d2c:	popne	{r4, r5, r6, r7, fp, pc}
   16d30:	ldr	r1, [r6, #16]
   16d34:	cmp	r1, #0
   16d38:	beq	16d50 <rb_patricia_remove+0x15c>
   16d3c:	mov	r2, r1
   16d40:	ldr	r3, [r2, #12]!
   16d44:	cmp	r3, r6
   16d48:	subne	r2, r2, #4
   16d4c:	b	16d54 <rb_patricia_remove+0x160>
   16d50:	mov	r2, r4
   16d54:	str	r0, [r2]
   16d58:	str	r1, [r0, #16]
   16d5c:	mov	r0, r6
   16d60:	bl	4f98 <free@plt>
   16d64:	ldr	r0, [r4, #8]
   16d68:	sub	r0, r0, #1
   16d6c:	str	r0, [r4, #8]
   16d70:	pop	{r4, r5, r6, r7, fp, pc}

00016d74 <make_and_lookup_ip>:
   16d74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16d78:	add	fp, sp, #24
   16d7c:	mov	r5, r1
   16d80:	mov	r9, r2
   16d84:	mov	r8, r0
   16d88:	ldrh	r4, [r5], #8
   16d8c:	cmp	r4, #10
   16d90:	addne	r5, r1, #4
   16d94:	cmp	r4, #2
   16d98:	beq	16dd0 <make_and_lookup_ip+0x5c>
   16d9c:	mov	r7, #0
   16da0:	cmp	r4, #10
   16da4:	bne	16e30 <make_and_lookup_ip+0xbc>
   16da8:	mov	r0, #1
   16dac:	mov	r1, #24
   16db0:	bl	4ea8 <calloc@plt>
   16db4:	cmp	r0, #0
   16db8:	beq	16e38 <make_and_lookup_ip+0xc4>
   16dbc:	vld1.8	{d16-d17}, [r5]
   16dc0:	mov	r6, r0
   16dc4:	add	r0, r0, #8
   16dc8:	vst1.8	{d16-d17}, [r0]
   16dcc:	b	16df0 <make_and_lookup_ip+0x7c>
   16dd0:	mov	r0, #1
   16dd4:	mov	r1, #24
   16dd8:	bl	4ea8 <calloc@plt>
   16ddc:	cmp	r0, #0
   16de0:	beq	16e38 <make_and_lookup_ip+0xc4>
   16de4:	mov	r6, r0
   16de8:	ldr	r0, [r5]
   16dec:	str	r0, [r6, #8]
   16df0:	cmn	r9, #1
   16df4:	mov	r0, #1
   16df8:	strh	r4, [r6]
   16dfc:	mov	r1, r6
   16e00:	str	r0, [r6, #4]
   16e04:	movle	r9, #128	; 0x80
   16e08:	mov	r0, r8
   16e0c:	strh	r9, [r6, #2]
   16e10:	bl	5178 <rb_patricia_lookup@plt>
   16e14:	mov	r7, r0
   16e18:	ldr	r0, [r6, #4]
   16e1c:	subs	r0, r0, #1
   16e20:	str	r0, [r6, #4]
   16e24:	bgt	16e30 <make_and_lookup_ip+0xbc>
   16e28:	mov	r0, r6
   16e2c:	bl	4f98 <free@plt>
   16e30:	mov	r0, r7
   16e34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16e38:	bl	51fc <rb_outofmemory@plt>

00016e3c <make_and_lookup>:
   16e3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16e40:	add	fp, sp, #24
   16e44:	sub	sp, sp, #24
   16e48:	sub	sp, sp, #1024	; 0x400
   16e4c:	mov	r5, r1
   16e50:	mov	r8, r0
   16e54:	cmp	r1, #0
   16e58:	beq	16f18 <make_and_lookup+0xdc>
   16e5c:	mov	r0, r5
   16e60:	mov	r1, #47	; 0x2f
   16e64:	bl	4e78 <strchr@plt>
   16e68:	cmp	r0, #0
   16e6c:	beq	16eb8 <make_and_lookup+0x7c>
   16e70:	mov	r7, r0
   16e74:	add	r0, r0, #1
   16e78:	mov	r1, #0
   16e7c:	mov	r2, #10
   16e80:	mov	r9, #0
   16e84:	bl	510c <strtol@plt>
   16e88:	sub	r4, r7, r5
   16e8c:	mov	r7, sp
   16e90:	mov	r6, r0
   16e94:	mov	r1, r5
   16e98:	mov	r0, r7
   16e9c:	mov	r2, r4
   16ea0:	bl	50a0 <memcpy@plt>
   16ea4:	sub	r0, r6, #1
   16ea8:	strb	r9, [r7, r4]
   16eac:	cmp	r0, #31
   16eb0:	movwhi	r6, #32
   16eb4:	b	16ec0 <make_and_lookup+0x84>
   16eb8:	mov	r6, #32
   16ebc:	mov	r7, r5
   16ec0:	sub	r2, fp, #48	; 0x30
   16ec4:	mov	r0, #2
   16ec8:	mov	r1, r7
   16ecc:	bl	4ef0 <rb_inet_pton@plt>
   16ed0:	cmp	r0, #1
   16ed4:	blt	16f18 <make_and_lookup+0xdc>
   16ed8:	mov	r0, #1
   16edc:	mov	r1, #24
   16ee0:	mov	r4, #1
   16ee4:	bl	4ea8 <calloc@plt>
   16ee8:	cmp	r0, #0
   16eec:	beq	17024 <make_and_lookup+0x1e8>
   16ef0:	mov	r5, r0
   16ef4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16ef8:	cmn	r6, #1
   16efc:	mov	r1, #2
   16f00:	movle	r6, #128	; 0x80
   16f04:	strh	r1, [r5]
   16f08:	strh	r6, [r5, #2]
   16f0c:	str	r4, [r5, #4]
   16f10:	str	r0, [r5, #8]
   16f14:	b	16fe0 <make_and_lookup+0x1a4>
   16f18:	cmp	r5, #0
   16f1c:	beq	17014 <make_and_lookup+0x1d8>
   16f20:	mov	r0, r5
   16f24:	mov	r1, #47	; 0x2f
   16f28:	bl	4e78 <strchr@plt>
   16f2c:	cmp	r0, #0
   16f30:	beq	16f80 <make_and_lookup+0x144>
   16f34:	mov	r7, r0
   16f38:	add	r0, r0, #1
   16f3c:	mov	r1, #0
   16f40:	mov	r2, #10
   16f44:	mov	r9, #0
   16f48:	bl	510c <strtol@plt>
   16f4c:	sub	r4, r7, r5
   16f50:	mov	r7, sp
   16f54:	mov	r6, r0
   16f58:	mov	r1, r5
   16f5c:	mov	r0, r7
   16f60:	mov	r2, r4
   16f64:	bl	50a0 <memcpy@plt>
   16f68:	sub	r0, r6, #1
   16f6c:	mov	r5, r7
   16f70:	strb	r9, [r7, r4]
   16f74:	cmp	r0, #127	; 0x7f
   16f78:	movwhi	r6, #128	; 0x80
   16f7c:	b	16f84 <make_and_lookup+0x148>
   16f80:	mov	r6, #128	; 0x80
   16f84:	sub	r7, fp, #48	; 0x30
   16f88:	mov	r0, #10
   16f8c:	mov	r1, r5
   16f90:	mov	r2, r7
   16f94:	bl	4ef0 <rb_inet_pton@plt>
   16f98:	cmp	r0, #1
   16f9c:	blt	17014 <make_and_lookup+0x1d8>
   16fa0:	mov	r0, #1
   16fa4:	mov	r1, #24
   16fa8:	mov	r4, #1
   16fac:	bl	4ea8 <calloc@plt>
   16fb0:	cmp	r0, #0
   16fb4:	beq	17024 <make_and_lookup+0x1e8>
   16fb8:	cmn	r6, #1
   16fbc:	vld1.64	{d16-d17}, [r7]
   16fc0:	mov	r5, r0
   16fc4:	movle	r6, #128	; 0x80
   16fc8:	strh	r6, [r0, #2]
   16fcc:	mov	r0, #10
   16fd0:	strh	r0, [r5]
   16fd4:	add	r0, r5, #8
   16fd8:	str	r4, [r5, #4]
   16fdc:	vst1.32	{d16-d17}, [r0]
   16fe0:	mov	r0, r8
   16fe4:	mov	r1, r5
   16fe8:	bl	5178 <rb_patricia_lookup@plt>
   16fec:	mov	r4, r0
   16ff0:	ldr	r0, [r5, #4]
   16ff4:	subs	r0, r0, #1
   16ff8:	str	r0, [r5, #4]
   16ffc:	bgt	17008 <make_and_lookup+0x1cc>
   17000:	mov	r0, r5
   17004:	bl	4f98 <free@plt>
   17008:	mov	r0, r4
   1700c:	sub	sp, fp, #24
   17010:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17014:	mov	r4, #0
   17018:	mov	r0, r4
   1701c:	sub	sp, fp, #24
   17020:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17024:	bl	51fc <rb_outofmemory@plt>

00017028 <rb_match_ip>:
   17028:	push	{r4, r5, r6, r7, fp, lr}
   1702c:	add	fp, sp, #16
   17030:	mov	r7, r1
   17034:	mov	r4, r0
   17038:	mov	r0, #1
   1703c:	ldrh	r6, [r7], #8
   17040:	cmp	r6, #10
   17044:	addne	r7, r1, #4
   17048:	mov	r1, #24
   1704c:	bl	4ea8 <calloc@plt>
   17050:	mov	r5, r0
   17054:	cmp	r6, #10
   17058:	bne	17074 <rb_match_ip+0x4c>
   1705c:	cmp	r5, #0
   17060:	beq	170c8 <rb_match_ip+0xa0>
   17064:	vld1.8	{d16-d17}, [r7]
   17068:	add	r0, r5, #8
   1706c:	vst1.8	{d16-d17}, [r0]
   17070:	b	17084 <rb_match_ip+0x5c>
   17074:	cmp	r5, #0
   17078:	beq	170c8 <rb_match_ip+0xa0>
   1707c:	ldr	r0, [r7]
   17080:	str	r0, [r5, #8]
   17084:	mov	r0, #1
   17088:	cmp	r6, #10
   1708c:	mov	r1, r5
   17090:	mov	r2, #1
   17094:	str	r0, [r5, #4]
   17098:	mov	r0, #32
   1709c:	movwne	r6, #2
   170a0:	movweq	r0, #128	; 0x80
   170a4:	strh	r6, [r5]
   170a8:	strh	r0, [r5, #2]
   170ac:	mov	r0, r4
   170b0:	bl	4f5c <rb_patricia_search_best2@plt>
   170b4:	mov	r4, r0
   170b8:	mov	r0, r5
   170bc:	bl	4f98 <free@plt>
   170c0:	mov	r0, r4
   170c4:	pop	{r4, r5, r6, r7, fp, pc}
   170c8:	bl	51fc <rb_outofmemory@plt>

000170cc <rb_match_ip_exact>:
   170cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   170d0:	add	fp, sp, #24
   170d4:	mov	r6, r1
   170d8:	mov	r8, r0
   170dc:	cmp	r2, #128	; 0x80
   170e0:	mov	r0, r2
   170e4:	mov	r5, r2
   170e8:	ldrh	r7, [r6], #8
   170ec:	movcs	r0, #128	; 0x80
   170f0:	cmp	r2, #32
   170f4:	movcs	r5, #32
   170f8:	cmp	r7, #10
   170fc:	moveq	r5, r0
   17100:	addne	r6, r1, #4
   17104:	mov	r0, #1
   17108:	mov	r1, #24
   1710c:	bl	4ea8 <calloc@plt>
   17110:	mov	r4, r0
   17114:	cmp	r7, #10
   17118:	bne	17134 <rb_match_ip_exact+0x68>
   1711c:	cmp	r4, #0
   17120:	beq	17220 <rb_match_ip_exact+0x154>
   17124:	vld1.8	{d16-d17}, [r6]
   17128:	add	r0, r4, #8
   1712c:	vst1.8	{d16-d17}, [r0]
   17130:	b	17144 <rb_match_ip_exact+0x78>
   17134:	cmp	r4, #0
   17138:	beq	17220 <rb_match_ip_exact+0x154>
   1713c:	ldr	r0, [r6]
   17140:	str	r0, [r4, #8]
   17144:	cmp	r7, #10
   17148:	mov	r0, #1
   1714c:	str	r0, [r4, #4]
   17150:	movwne	r7, #2
   17154:	mov	r0, #128	; 0x80
   17158:	cmn	r5, #1
   1715c:	movle	r5, r0
   17160:	strh	r7, [r4]
   17164:	strh	r5, [r4, #2]
   17168:	ldr	r6, [r8]
   1716c:	cmp	r6, #0
   17170:	beq	171d8 <rb_match_ip_exact+0x10c>
   17174:	add	r7, r4, #8
   17178:	ldr	r1, [r6]
   1717c:	cmp	r1, r5
   17180:	bcs	171a8 <rb_match_ip_exact+0xdc>
   17184:	ldrb	r2, [r7, r1, lsr #3]
   17188:	and	r1, r1, #7
   1718c:	tst	r2, r0, lsr r1
   17190:	mov	r1, #12
   17194:	movweq	r1, #8
   17198:	ldr	r6, [r6, r1]
   1719c:	cmp	r6, #0
   171a0:	bne	17178 <rb_match_ip_exact+0xac>
   171a4:	b	171d8 <rb_match_ip_exact+0x10c>
   171a8:	bhi	171d8 <rb_match_ip_exact+0x10c>
   171ac:	ldr	r0, [r6, #4]
   171b0:	cmp	r0, #0
   171b4:	beq	171d8 <rb_match_ip_exact+0x10c>
   171b8:	add	r8, r0, #8
   171bc:	lsr	r9, r5, #3
   171c0:	mov	r1, r7
   171c4:	mov	r0, r8
   171c8:	mov	r2, r9
   171cc:	bl	4d28 <memcmp@plt>
   171d0:	cmp	r0, #0
   171d4:	beq	171ec <rb_match_ip_exact+0x120>
   171d8:	mov	r6, #0
   171dc:	mov	r0, r4
   171e0:	bl	4f98 <free@plt>
   171e4:	mov	r0, r6
   171e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   171ec:	ands	r0, r5, #7
   171f0:	beq	171dc <rb_match_ip_exact+0x110>
   171f4:	ldrb	r1, [r8, r9]
   171f8:	ldrb	r2, [r7, r9]
   171fc:	rsb	r0, r0, #8
   17200:	eor	r1, r2, r1
   17204:	mov	r2, #255	; 0xff
   17208:	tst	r1, r2, lsl r0
   1720c:	movne	r6, #0
   17210:	mov	r0, r4
   17214:	bl	4f98 <free@plt>
   17218:	mov	r0, r6
   1721c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17220:	bl	51fc <rb_outofmemory@plt>

00017224 <rb_match_string>:
   17224:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17228:	add	fp, sp, #24
   1722c:	sub	sp, sp, #24
   17230:	sub	sp, sp, #1024	; 0x400
   17234:	mov	r5, r1
   17238:	mov	r8, r0
   1723c:	cmp	r1, #0
   17240:	beq	17300 <rb_match_string+0xdc>
   17244:	mov	r0, r5
   17248:	mov	r1, #47	; 0x2f
   1724c:	bl	4e78 <strchr@plt>
   17250:	cmp	r0, #0
   17254:	beq	172a0 <rb_match_string+0x7c>
   17258:	mov	r7, r0
   1725c:	add	r0, r0, #1
   17260:	mov	r1, #0
   17264:	mov	r2, #10
   17268:	mov	r9, #0
   1726c:	bl	510c <strtol@plt>
   17270:	sub	r4, r7, r5
   17274:	mov	r7, sp
   17278:	mov	r6, r0
   1727c:	mov	r1, r5
   17280:	mov	r0, r7
   17284:	mov	r2, r4
   17288:	bl	50a0 <memcpy@plt>
   1728c:	sub	r0, r6, #1
   17290:	strb	r9, [r7, r4]
   17294:	cmp	r0, #31
   17298:	movwhi	r6, #32
   1729c:	b	172a8 <rb_match_string+0x84>
   172a0:	mov	r6, #32
   172a4:	mov	r7, r5
   172a8:	sub	r2, fp, #48	; 0x30
   172ac:	mov	r0, #2
   172b0:	mov	r1, r7
   172b4:	bl	4ef0 <rb_inet_pton@plt>
   172b8:	cmp	r0, #1
   172bc:	blt	17300 <rb_match_string+0xdc>
   172c0:	mov	r0, #1
   172c4:	mov	r1, #24
   172c8:	mov	r4, #1
   172cc:	bl	4ea8 <calloc@plt>
   172d0:	cmp	r0, #0
   172d4:	beq	17400 <rb_match_string+0x1dc>
   172d8:	mov	r5, r0
   172dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   172e0:	cmn	r6, #1
   172e4:	mov	r1, #2
   172e8:	movle	r6, #128	; 0x80
   172ec:	strh	r1, [r5]
   172f0:	strh	r6, [r5, #2]
   172f4:	str	r4, [r5, #4]
   172f8:	str	r0, [r5, #8]
   172fc:	b	173c8 <rb_match_string+0x1a4>
   17300:	cmp	r5, #0
   17304:	beq	173f0 <rb_match_string+0x1cc>
   17308:	mov	r0, r5
   1730c:	mov	r1, #47	; 0x2f
   17310:	bl	4e78 <strchr@plt>
   17314:	cmp	r0, #0
   17318:	beq	17368 <rb_match_string+0x144>
   1731c:	mov	r7, r0
   17320:	add	r0, r0, #1
   17324:	mov	r1, #0
   17328:	mov	r2, #10
   1732c:	mov	r9, #0
   17330:	bl	510c <strtol@plt>
   17334:	sub	r4, r7, r5
   17338:	mov	r7, sp
   1733c:	mov	r6, r0
   17340:	mov	r1, r5
   17344:	mov	r0, r7
   17348:	mov	r2, r4
   1734c:	bl	50a0 <memcpy@plt>
   17350:	sub	r0, r6, #1
   17354:	mov	r5, r7
   17358:	strb	r9, [r7, r4]
   1735c:	cmp	r0, #127	; 0x7f
   17360:	movwhi	r6, #128	; 0x80
   17364:	b	1736c <rb_match_string+0x148>
   17368:	mov	r6, #128	; 0x80
   1736c:	sub	r7, fp, #48	; 0x30
   17370:	mov	r0, #10
   17374:	mov	r1, r5
   17378:	mov	r2, r7
   1737c:	bl	4ef0 <rb_inet_pton@plt>
   17380:	cmp	r0, #1
   17384:	blt	173f0 <rb_match_string+0x1cc>
   17388:	mov	r0, #1
   1738c:	mov	r1, #24
   17390:	mov	r4, #1
   17394:	bl	4ea8 <calloc@plt>
   17398:	cmp	r0, #0
   1739c:	beq	17400 <rb_match_string+0x1dc>
   173a0:	cmn	r6, #1
   173a4:	vld1.64	{d16-d17}, [r7]
   173a8:	mov	r5, r0
   173ac:	movle	r6, #128	; 0x80
   173b0:	strh	r6, [r0, #2]
   173b4:	mov	r0, #10
   173b8:	strh	r0, [r5]
   173bc:	add	r0, r5, #8
   173c0:	str	r4, [r5, #4]
   173c4:	vst1.32	{d16-d17}, [r0]
   173c8:	mov	r0, r8
   173cc:	mov	r1, r5
   173d0:	mov	r2, #1
   173d4:	bl	4f5c <rb_patricia_search_best2@plt>
   173d8:	mov	r4, r0
   173dc:	mov	r0, r5
   173e0:	bl	4f98 <free@plt>
   173e4:	mov	r0, r4
   173e8:	sub	sp, fp, #24
   173ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   173f0:	mov	r4, #0
   173f4:	mov	r0, r4
   173f8:	sub	sp, fp, #24
   173fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17400:	bl	51fc <rb_outofmemory@plt>

00017404 <rb_match_exact_string>:
   17404:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17408:	add	fp, sp, #24
   1740c:	sub	sp, sp, #24
   17410:	sub	sp, sp, #1024	; 0x400
   17414:	mov	r5, r1
   17418:	mov	r8, r0
   1741c:	cmp	r1, #0
   17420:	beq	17524 <rb_match_exact_string+0x120>
   17424:	mov	r0, r5
   17428:	mov	r1, #47	; 0x2f
   1742c:	bl	4e78 <strchr@plt>
   17430:	cmp	r0, #0
   17434:	beq	17480 <rb_match_exact_string+0x7c>
   17438:	mov	r7, r0
   1743c:	add	r0, r0, #1
   17440:	mov	r1, #0
   17444:	mov	r2, #10
   17448:	mov	r9, #0
   1744c:	bl	510c <strtol@plt>
   17450:	sub	r4, r7, r5
   17454:	mov	r7, sp
   17458:	mov	r6, r0
   1745c:	mov	r1, r5
   17460:	mov	r0, r7
   17464:	mov	r2, r4
   17468:	bl	50a0 <memcpy@plt>
   1746c:	sub	r0, r6, #1
   17470:	strb	r9, [r7, r4]
   17474:	cmp	r0, #31
   17478:	movwhi	r6, #32
   1747c:	b	17488 <rb_match_exact_string+0x84>
   17480:	mov	r6, #32
   17484:	mov	r7, r5
   17488:	sub	r2, fp, #48	; 0x30
   1748c:	mov	r0, #2
   17490:	mov	r1, r7
   17494:	bl	4ef0 <rb_inet_pton@plt>
   17498:	cmp	r0, #1
   1749c:	blt	17524 <rb_match_exact_string+0x120>
   174a0:	mov	r0, #1
   174a4:	mov	r1, #24
   174a8:	mov	r4, #1
   174ac:	bl	4ea8 <calloc@plt>
   174b0:	cmp	r0, #0
   174b4:	beq	176b0 <rb_match_exact_string+0x2ac>
   174b8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   174bc:	mov	r5, r0
   174c0:	mov	r0, #2
   174c4:	cmn	r6, #1
   174c8:	strh	r0, [r5]
   174cc:	mov	r0, #128	; 0x80
   174d0:	mov	r7, r5
   174d4:	str	r4, [r5, #4]
   174d8:	movle	r6, r0
   174dc:	strh	r6, [r5, #2]
   174e0:	str	r1, [r7, #8]!
   174e4:	ldr	r4, [r8]
   174e8:	cmp	r4, #0
   174ec:	beq	17670 <rb_match_exact_string+0x26c>
   174f0:	uxth	r1, r6
   174f4:	ldr	r2, [r4]
   174f8:	cmp	r2, r1
   174fc:	bcs	17640 <rb_match_exact_string+0x23c>
   17500:	ldrb	r3, [r7, r2, lsr #3]
   17504:	and	r2, r2, #7
   17508:	tst	r3, r0, lsr r2
   1750c:	mov	r2, #12
   17510:	movweq	r2, #8
   17514:	ldr	r4, [r4, r2]
   17518:	cmp	r4, #0
   1751c:	bne	174f4 <rb_match_exact_string+0xf0>
   17520:	b	17670 <rb_match_exact_string+0x26c>
   17524:	cmp	r5, #0
   17528:	beq	17630 <rb_match_exact_string+0x22c>
   1752c:	mov	r0, r5
   17530:	mov	r1, #47	; 0x2f
   17534:	bl	4e78 <strchr@plt>
   17538:	cmp	r0, #0
   1753c:	beq	1758c <rb_match_exact_string+0x188>
   17540:	mov	r7, r0
   17544:	add	r0, r0, #1
   17548:	mov	r1, #0
   1754c:	mov	r2, #10
   17550:	mov	r9, #0
   17554:	bl	510c <strtol@plt>
   17558:	sub	r4, r7, r5
   1755c:	mov	r7, sp
   17560:	mov	r6, r0
   17564:	mov	r1, r5
   17568:	mov	r0, r7
   1756c:	mov	r2, r4
   17570:	bl	50a0 <memcpy@plt>
   17574:	sub	r0, r6, #1
   17578:	mov	r5, r7
   1757c:	strb	r9, [r7, r4]
   17580:	cmp	r0, #127	; 0x7f
   17584:	movwhi	r6, #128	; 0x80
   17588:	b	17590 <rb_match_exact_string+0x18c>
   1758c:	mov	r6, #128	; 0x80
   17590:	sub	r7, fp, #48	; 0x30
   17594:	mov	r0, #10
   17598:	mov	r1, r5
   1759c:	mov	r2, r7
   175a0:	bl	4ef0 <rb_inet_pton@plt>
   175a4:	cmp	r0, #1
   175a8:	blt	17630 <rb_match_exact_string+0x22c>
   175ac:	mov	r0, #1
   175b0:	mov	r1, #24
   175b4:	mov	r4, #1
   175b8:	bl	4ea8 <calloc@plt>
   175bc:	cmp	r0, #0
   175c0:	beq	176b0 <rb_match_exact_string+0x2ac>
   175c4:	vld1.64	{d16-d17}, [r7]
   175c8:	mov	r5, r0
   175cc:	mov	r0, #128	; 0x80
   175d0:	cmn	r6, #1
   175d4:	mov	r1, #10
   175d8:	movle	r6, r0
   175dc:	add	r7, r5, #8
   175e0:	strh	r6, [r5, #2]
   175e4:	strh	r1, [r5]
   175e8:	str	r4, [r5, #4]
   175ec:	vst1.32	{d16-d17}, [r7]
   175f0:	ldr	r4, [r8]
   175f4:	cmp	r4, #0
   175f8:	beq	17670 <rb_match_exact_string+0x26c>
   175fc:	uxth	r1, r6
   17600:	ldr	r2, [r4]
   17604:	cmp	r2, r1
   17608:	bcs	17640 <rb_match_exact_string+0x23c>
   1760c:	ldrb	r3, [r7, r2, lsr #3]
   17610:	and	r2, r2, #7
   17614:	tst	r3, r0, lsr r2
   17618:	mov	r2, #12
   1761c:	movweq	r2, #8
   17620:	ldr	r4, [r4, r2]
   17624:	cmp	r4, #0
   17628:	bne	17600 <rb_match_exact_string+0x1fc>
   1762c:	b	17670 <rb_match_exact_string+0x26c>
   17630:	mov	r4, #0
   17634:	mov	r0, r4
   17638:	sub	sp, fp, #24
   1763c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17640:	bhi	17670 <rb_match_exact_string+0x26c>
   17644:	ldr	r0, [r4, #4]
   17648:	cmp	r0, #0
   1764c:	beq	17670 <rb_match_exact_string+0x26c>
   17650:	add	r8, r0, #8
   17654:	lsr	r9, r1, #3
   17658:	mov	r1, r7
   1765c:	mov	r0, r8
   17660:	mov	r2, r9
   17664:	bl	4d28 <memcmp@plt>
   17668:	cmp	r0, #0
   1766c:	beq	17688 <rb_match_exact_string+0x284>
   17670:	mov	r4, #0
   17674:	mov	r0, r5
   17678:	bl	4f98 <free@plt>
   1767c:	mov	r0, r4
   17680:	sub	sp, fp, #24
   17684:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17688:	ands	r0, r6, #7
   1768c:	beq	17674 <rb_match_exact_string+0x270>
   17690:	ldrb	r1, [r8, r9]
   17694:	ldrb	r2, [r7, r9]
   17698:	rsb	r0, r0, #8
   1769c:	eor	r1, r2, r1
   176a0:	mov	r2, #255	; 0xff
   176a4:	tst	r1, r2, lsl r0
   176a8:	movne	r4, #0
   176ac:	b	17674 <rb_match_exact_string+0x270>
   176b0:	bl	51fc <rb_outofmemory@plt>

000176b4 <rb_dictionary_create>:
   176b4:	push	{r4, r5, r6, sl, fp, lr}
   176b8:	add	fp, sp, #16
   176bc:	mov	r6, r1
   176c0:	mov	r5, r0
   176c4:	mov	r0, #1
   176c8:	mov	r1, #40	; 0x28
   176cc:	bl	4ea8 <calloc@plt>
   176d0:	cmp	r0, #0
   176d4:	beq	1776c <rb_dictionary_create+0xb8>
   176d8:	mov	r4, r0
   176dc:	str	r6, [r0]
   176e0:	mov	r0, r5
   176e4:	bl	507c <strlen@plt>
   176e8:	add	r0, r0, #1
   176ec:	bl	5214 <malloc@plt>
   176f0:	cmp	r0, #0
   176f4:	beq	1776c <rb_dictionary_create+0xb8>
   176f8:	mov	r1, r5
   176fc:	mov	r6, r0
   17700:	bl	5124 <strcpy@plt>
   17704:	str	r6, [r4, #20]
   17708:	mov	r0, #0
   1770c:	ldr	r1, [pc, #92]	; 17770 <rb_dictionary_create+0xbc>
   17710:	ldr	r1, [pc, r1]
   17714:	str	r4, [r4, #28]
   17718:	str	r0, [r4, #32]
   1771c:	add	r0, r4, #28
   17720:	cmp	r1, #0
   17724:	str	r1, [r4, #36]	; 0x24
   17728:	beq	17738 <rb_dictionary_create+0x84>
   1772c:	add	r1, r1, #4
   17730:	str	r0, [r1]
   17734:	b	1774c <rb_dictionary_create+0x98>
   17738:	ldr	r1, [pc, #52]	; 17774 <rb_dictionary_create+0xc0>
   1773c:	add	r1, pc, r1
   17740:	ldr	r2, [r1, #4]!
   17744:	cmp	r2, #0
   17748:	streq	r0, [r1]
   1774c:	ldr	r1, [pc, #36]	; 17778 <rb_dictionary_create+0xc4>
   17750:	add	r1, pc, r1
   17754:	str	r0, [r1]
   17758:	ldr	r0, [r1, #8]
   1775c:	add	r0, r0, #1
   17760:	str	r0, [r1, #8]
   17764:	mov	r0, r4
   17768:	pop	{r4, r5, r6, sl, fp, pc}
   1776c:	bl	51fc <rb_outofmemory@plt>
   17770:	.word	0x00032778
   17774:	.word	0x0003274c
   17778:	.word	0x00032738

0001777c <rb_dictionary_set_comparator_func>:
   1777c:	str	r1, [r0]
   17780:	bx	lr

00017784 <rb_dictionary_get_comparator_func>:
   17784:	ldr	r0, [r0]
   17788:	bx	lr

0001778c <rb_dictionary_get_linear_index>:
   1778c:	push	{r4, r5, r6, sl, fp, lr}
   17790:	add	fp, sp, #16
   17794:	mov	r6, r1
   17798:	mov	r4, r0
   1779c:	bl	17ad0 <rb_dictionary_retune>
   177a0:	ldr	r0, [r4, #4]
   177a4:	mvn	r5, #0
   177a8:	cmp	r0, #0
   177ac:	beq	17814 <rb_dictionary_get_linear_index+0x88>
   177b0:	ldr	r1, [r0, #20]
   177b4:	ldr	r2, [r4]
   177b8:	mov	r0, r6
   177bc:	blx	r2
   177c0:	cmp	r0, #0
   177c4:	bne	17814 <rb_dictionary_get_linear_index+0x88>
   177c8:	ldr	r0, [r4, #4]
   177cc:	cmp	r0, #0
   177d0:	beq	17814 <rb_dictionary_get_linear_index+0x88>
   177d4:	ldrb	r2, [r4, #24]
   177d8:	tst	r2, #1
   177dc:	beq	17810 <rb_dictionary_get_linear_index+0x84>
   177e0:	ldr	r1, [r4, #8]
   177e4:	cmp	r1, #0
   177e8:	beq	17808 <rb_dictionary_get_linear_index+0x7c>
   177ec:	mov	r2, #0
   177f0:	str	r2, [r1, #24]
   177f4:	add	r2, r2, #1
   177f8:	ldr	r1, [r1, #12]
   177fc:	cmp	r1, #0
   17800:	bne	177f0 <rb_dictionary_get_linear_index+0x64>
   17804:	ldrb	r2, [r4, #24]
   17808:	and	r1, r2, #254	; 0xfe
   1780c:	strb	r1, [r4, #24]
   17810:	ldr	r5, [r0, #24]
   17814:	mov	r0, r5
   17818:	pop	{r4, r5, r6, sl, fp, pc}

0001781c <rb_dictionary_find>:
   1781c:	push	{r4, r5, r6, sl, fp, lr}
   17820:	add	fp, sp, #16
   17824:	mov	r6, r1
   17828:	mov	r4, r0
   1782c:	bl	17ad0 <rb_dictionary_retune>
   17830:	ldr	r0, [r4, #4]
   17834:	mov	r5, #0
   17838:	cmp	r0, #0
   1783c:	beq	17858 <rb_dictionary_find+0x3c>
   17840:	ldr	r1, [r0, #20]
   17844:	ldr	r2, [r4]
   17848:	mov	r0, r6
   1784c:	blx	r2
   17850:	cmp	r0, #0
   17854:	ldreq	r5, [r4, #4]
   17858:	mov	r0, r5
   1785c:	pop	{r4, r5, r6, sl, fp, pc}

00017860 <rb_dictionary_destroy>:
   17860:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17864:	add	fp, sp, #24
   17868:	ldr	r4, [r0, #8]
   1786c:	mov	r8, r0
   17870:	cmp	r4, #0
   17874:	beq	178f8 <rb_dictionary_destroy+0x98>
   17878:	ldr	r5, [r4, #12]
   1787c:	mov	r7, r1
   17880:	cmp	r1, #0
   17884:	beq	178d0 <rb_dictionary_destroy+0x70>
   17888:	mov	r0, r4
   1788c:	mov	r1, r2
   17890:	mov	r6, r2
   17894:	blx	r7
   17898:	mov	r0, r4
   1789c:	bl	4f98 <free@plt>
   178a0:	cmp	r5, #0
   178a4:	beq	178f8 <rb_dictionary_destroy+0x98>
   178a8:	ldr	r4, [r5, #12]
   178ac:	mov	r0, r5
   178b0:	mov	r1, r6
   178b4:	blx	r7
   178b8:	mov	r0, r5
   178bc:	bl	4f98 <free@plt>
   178c0:	cmp	r4, #0
   178c4:	mov	r5, r4
   178c8:	bne	178a8 <rb_dictionary_destroy+0x48>
   178cc:	b	178f8 <rb_dictionary_destroy+0x98>
   178d0:	mov	r0, r4
   178d4:	bl	4f98 <free@plt>
   178d8:	cmp	r5, #0
   178dc:	beq	178f8 <rb_dictionary_destroy+0x98>
   178e0:	ldr	r4, [r5, #12]
   178e4:	mov	r0, r5
   178e8:	bl	4f98 <free@plt>
   178ec:	cmp	r4, #0
   178f0:	mov	r5, r4
   178f4:	bne	178e0 <rb_dictionary_destroy+0x80>
   178f8:	ldr	r0, [r8, #36]	; 0x24
   178fc:	ldr	r1, [r8, #32]
   17900:	cmp	r0, #0
   17904:	beq	17914 <rb_dictionary_destroy+0xb4>
   17908:	str	r1, [r0, #4]
   1790c:	ldr	r1, [r8, #32]
   17910:	b	17920 <rb_dictionary_destroy+0xc0>
   17914:	ldr	r2, [pc, #80]	; 1796c <rb_dictionary_destroy+0x10c>
   17918:	add	r2, pc, r2
   1791c:	str	r1, [r2, #4]
   17920:	ldr	r2, [pc, #72]	; 17970 <rb_dictionary_destroy+0x110>
   17924:	cmp	r1, #0
   17928:	add	r2, pc, r2
   1792c:	mov	r3, r2
   17930:	addne	r3, r1, #8
   17934:	str	r0, [r3]
   17938:	mov	r0, #0
   1793c:	str	r0, [r8, #32]
   17940:	str	r0, [r8, #36]	; 0x24
   17944:	ldr	r0, [r2, #8]
   17948:	sub	r0, r0, #1
   1794c:	str	r0, [r2, #8]
   17950:	ldr	r0, [r8, #20]
   17954:	cmp	r0, #0
   17958:	beq	17960 <rb_dictionary_destroy+0x100>
   1795c:	bl	4f98 <free@plt>
   17960:	mov	r0, r8
   17964:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17968:	b	4f98 <free@plt>
   1796c:	.word	0x00032570
   17970:	.word	0x00032560

00017974 <rb_dictionary_foreach>:
   17974:	push	{r4, r5, r6, r7, fp, lr}
   17978:	add	fp, sp, #16
   1797c:	ldr	r0, [r0, #8]
   17980:	cmp	r0, #0
   17984:	beq	179d8 <rb_dictionary_foreach+0x64>
   17988:	ldr	r5, [r0, #12]
   1798c:	mov	r6, r1
   17990:	cmp	r1, #0
   17994:	beq	179d0 <rb_dictionary_foreach+0x5c>
   17998:	mov	r1, r2
   1799c:	mov	r4, r2
   179a0:	blx	r6
   179a4:	cmp	r5, #0
   179a8:	popeq	{r4, r5, r6, r7, fp, pc}
   179ac:	ldr	r7, [r5, #12]
   179b0:	mov	r0, r5
   179b4:	mov	r1, r4
   179b8:	blx	r6
   179bc:	cmp	r7, #0
   179c0:	mov	r5, r7
   179c4:	bne	179ac <rb_dictionary_foreach+0x38>
   179c8:	b	179d8 <rb_dictionary_foreach+0x64>
   179cc:	ldr	r5, [r5, #12]
   179d0:	cmp	r5, #0
   179d4:	bne	179cc <rb_dictionary_foreach+0x58>
   179d8:	pop	{r4, r5, r6, r7, fp, pc}

000179dc <rb_dictionary_search>:
   179dc:	push	{r4, r5, r6, r7, fp, lr}
   179e0:	add	fp, sp, #16
   179e4:	mov	r5, r1
   179e8:	ldr	r1, [r0, #8]
   179ec:	mov	r0, #0
   179f0:	cmp	r1, #0
   179f4:	moveq	r0, #0
   179f8:	popeq	{r4, r5, r6, r7, fp, pc}
   179fc:	ldr	r6, [r1, #12]
   17a00:	cmp	r5, #0
   17a04:	beq	17a4c <rb_dictionary_search+0x70>
   17a08:	mov	r0, r1
   17a0c:	mov	r1, r2
   17a10:	mov	r4, r2
   17a14:	blx	r5
   17a18:	cmp	r0, #0
   17a1c:	bne	17a48 <rb_dictionary_search+0x6c>
   17a20:	cmp	r6, #0
   17a24:	moveq	r0, #0
   17a28:	popeq	{r4, r5, r6, r7, fp, pc}
   17a2c:	ldr	r7, [r6, #12]
   17a30:	mov	r0, r6
   17a34:	mov	r1, r4
   17a38:	blx	r5
   17a3c:	cmp	r0, #0
   17a40:	mov	r6, r7
   17a44:	beq	17a20 <rb_dictionary_search+0x44>
   17a48:	pop	{r4, r5, r6, r7, fp, pc}
   17a4c:	cmp	r6, #0
   17a50:	popeq	{r4, r5, r6, r7, fp, pc}
   17a54:	ldr	r6, [r6, #12]
   17a58:	b	17a4c <rb_dictionary_search+0x70>

00017a5c <rb_dictionary_foreach_start>:
   17a5c:	mov	r2, #0
   17a60:	str	r2, [r1, #4]
   17a64:	ldr	r0, [r0, #8]
   17a68:	cmp	r0, #0
   17a6c:	str	r0, [r1]
   17a70:	strne	r0, [r1]
   17a74:	ldrne	r0, [r0, #12]
   17a78:	strne	r0, [r1, #4]
   17a7c:	bx	lr

00017a80 <rb_dictionary_foreach_next>:
   17a80:	mov	r2, r0
   17a84:	ldr	r0, [r1]
   17a88:	cmp	r0, #0
   17a8c:	beq	17aa8 <rb_dictionary_foreach_next+0x28>
   17a90:	ldr	r0, [r1, #4]
   17a94:	str	r0, [r1]
   17a98:	cmp	r0, #0
   17a9c:	ldrne	r0, [r0, #12]
   17aa0:	strne	r0, [r1, #4]
   17aa4:	bx	lr
   17aa8:	ldr	r0, [pc, #8]	; 17ab8 <rb_dictionary_foreach_next+0x38>
   17aac:	mov	r1, r2
   17ab0:	add	r0, pc, r0
   17ab4:	b	519c <rb_lib_log@plt>
   17ab8:	.word	0x0000371b

00017abc <rb_dictionary_foreach_cur>:
   17abc:	ldr	r0, [r1]
   17ac0:	cmp	r0, #0
   17ac4:	ldrne	r0, [r0, #16]
   17ac8:	moveq	r0, #0
   17acc:	bx	lr

00017ad0 <rb_dictionary_retune>:
   17ad0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17ad4:	add	fp, sp, #24
   17ad8:	sub	sp, sp, #32
   17adc:	ldr	r6, [r0, #4]
   17ae0:	cmp	r6, #0
   17ae4:	beq	17c2c <rb_dictionary_retune+0x15c>
   17ae8:	mov	r4, r0
   17aec:	mov	r0, #0
   17af0:	mov	r5, r1
   17af4:	str	r0, [sp, #4]
   17af8:	str	r0, [sp, #8]
   17afc:	mov	r0, r5
   17b00:	ldr	r1, [r6, #20]
   17b04:	ldr	r2, [r4]
   17b08:	blx	r2
   17b0c:	add	r8, sp, #4
   17b10:	cmp	r0, #0
   17b14:	beq	17bf0 <rb_dictionary_retune+0x120>
   17b18:	mov	r9, r8
   17b1c:	cmn	r0, #1
   17b20:	ble	17b70 <rb_dictionary_retune+0xa0>
   17b24:	mov	r7, r6
   17b28:	ldr	r0, [r7, #4]!
   17b2c:	cmp	r0, #0
   17b30:	beq	17c04 <rb_dictionary_retune+0x134>
   17b34:	ldr	r1, [r0, #20]
   17b38:	ldr	r2, [r4]
   17b3c:	mov	r0, r5
   17b40:	blx	r2
   17b44:	cmp	r0, #1
   17b48:	blt	17b9c <rb_dictionary_retune+0xcc>
   17b4c:	ldr	r0, [r6, #4]
   17b50:	ldr	r1, [r0]
   17b54:	mov	r7, r0
   17b58:	str	r1, [r6, #4]
   17b5c:	str	r6, [r7], #4
   17b60:	ldr	r1, [r7]
   17b64:	cmp	r1, #0
   17b68:	bne	17ba0 <rb_dictionary_retune+0xd0>
   17b6c:	b	17bf8 <rb_dictionary_retune+0x128>
   17b70:	ldr	r0, [r6]
   17b74:	cmp	r0, #0
   17b78:	beq	17c04 <rb_dictionary_retune+0x134>
   17b7c:	ldr	r1, [r0, #20]
   17b80:	ldr	r2, [r4]
   17b84:	mov	r0, r5
   17b88:	blx	r2
   17b8c:	cmn	r0, #1
   17b90:	ble	17bac <rb_dictionary_retune+0xdc>
   17b94:	mov	r7, r6
   17b98:	b	17bc8 <rb_dictionary_retune+0xf8>
   17b9c:	mov	r0, r6
   17ba0:	str	r0, [r9, #4]
   17ba4:	mov	r9, r0
   17ba8:	b	17bd0 <rb_dictionary_retune+0x100>
   17bac:	ldr	r7, [r6]
   17bb0:	ldr	r0, [r7, #4]
   17bb4:	str	r0, [r6]
   17bb8:	str	r6, [r7, #4]
   17bbc:	ldr	r0, [r7]
   17bc0:	cmp	r0, #0
   17bc4:	beq	17c00 <rb_dictionary_retune+0x130>
   17bc8:	str	r7, [r8]
   17bcc:	mov	r8, r7
   17bd0:	ldr	r6, [r7]
   17bd4:	ldr	r2, [r4]
   17bd8:	mov	r0, r5
   17bdc:	ldr	r1, [r6, #20]
   17be0:	blx	r2
   17be4:	cmp	r0, #0
   17be8:	bne	17b1c <rb_dictionary_retune+0x4c>
   17bec:	b	17c04 <rb_dictionary_retune+0x134>
   17bf0:	add	r0, r8, #4
   17bf4:	b	17c08 <rb_dictionary_retune+0x138>
   17bf8:	mov	r6, r0
   17bfc:	b	17c04 <rb_dictionary_retune+0x134>
   17c00:	mov	r6, r7
   17c04:	add	r0, r9, #4
   17c08:	ldr	r1, [r6]
   17c0c:	str	r1, [r0]
   17c10:	ldr	r0, [r6, #4]
   17c14:	str	r0, [r8]
   17c18:	ldr	r0, [sp, #8]
   17c1c:	str	r0, [r6]
   17c20:	ldr	r0, [sp, #4]
   17c24:	str	r0, [r6, #4]
   17c28:	str	r6, [r4, #4]
   17c2c:	sub	sp, fp, #24
   17c30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00017c34 <rb_dictionary_add>:
   17c34:	push	{r4, r5, r6, r7, fp, lr}
   17c38:	add	fp, sp, #16
   17c3c:	mov	r6, r1
   17c40:	mov	r5, r0
   17c44:	mov	r0, #1
   17c48:	mov	r1, #28
   17c4c:	mov	r7, r2
   17c50:	bl	4ea8 <calloc@plt>
   17c54:	cmp	r0, #0
   17c58:	beq	17d90 <rb_dictionary_add+0x15c>
   17c5c:	str	r7, [r0, #16]
   17c60:	str	r6, [r0, #20]
   17c64:	mov	r4, r0
   17c68:	ldrb	r0, [r5, #24]
   17c6c:	orr	r0, r0, #1
   17c70:	strb	r0, [r5, #24]
   17c74:	ldr	r1, [r5, #16]
   17c78:	ldr	r0, [r5, #4]
   17c7c:	add	r1, r1, #1
   17c80:	cmp	r0, #0
   17c84:	str	r1, [r5, #16]
   17c88:	beq	17cfc <rb_dictionary_add+0xc8>
   17c8c:	mov	r0, r5
   17c90:	mov	r1, r6
   17c94:	bl	17ad0 <rb_dictionary_retune>
   17c98:	ldr	r1, [r5, #4]
   17c9c:	ldr	r0, [r4, #20]
   17ca0:	ldr	r2, [r5]
   17ca4:	ldr	r1, [r1, #20]
   17ca8:	blx	r2
   17cac:	cmn	r0, #1
   17cb0:	ble	17d18 <rb_dictionary_add+0xe4>
   17cb4:	cmp	r0, #0
   17cb8:	beq	17d5c <rb_dictionary_add+0x128>
   17cbc:	ldr	r0, [r5, #4]
   17cc0:	ldr	r1, [r0, #4]
   17cc4:	stm	r4, {r0, r1}
   17cc8:	mov	r1, #0
   17ccc:	str	r1, [r0, #4]
   17cd0:	ldr	r1, [r0, #12]
   17cd4:	add	r2, r1, #8
   17cd8:	cmp	r1, #0
   17cdc:	addeq	r2, r5, #12
   17ce0:	str	r4, [r2]
   17ce4:	str	r0, [r4, #8]
   17ce8:	str	r1, [r4, #12]
   17cec:	str	r4, [r0, #12]
   17cf0:	mov	r0, r4
   17cf4:	str	r4, [r5, #4]
   17cf8:	pop	{r4, r5, r6, r7, fp, pc}
   17cfc:	vmov.i32	q8, #0	; 0x00000000
   17d00:	mov	r0, r4
   17d04:	vst1.32	{d16-d17}, [r4]
   17d08:	str	r4, [r5, #4]
   17d0c:	str	r4, [r5, #8]
   17d10:	str	r4, [r5, #12]
   17d14:	pop	{r4, r5, r6, r7, fp, pc}
   17d18:	ldr	r0, [r5, #4]
   17d1c:	ldr	r1, [r0]
   17d20:	str	r0, [r4, #4]
   17d24:	str	r1, [r4]
   17d28:	mov	r1, #0
   17d2c:	str	r1, [r0]
   17d30:	ldr	r1, [r0, #8]
   17d34:	add	r2, r1, #12
   17d38:	cmp	r1, #0
   17d3c:	addeq	r2, r5, #8
   17d40:	str	r4, [r2]
   17d44:	str	r0, [r4, #12]
   17d48:	str	r1, [r4, #8]
   17d4c:	str	r4, [r0, #8]
   17d50:	mov	r0, r4
   17d54:	str	r4, [r5, #4]
   17d58:	pop	{r4, r5, r6, r7, fp, pc}
   17d5c:	ldr	r0, [r5, #4]
   17d60:	ldr	r1, [r4, #20]
   17d64:	str	r1, [r0, #20]
   17d68:	ldr	r1, [r4, #16]
   17d6c:	str	r1, [r0, #16]
   17d70:	ldr	r0, [r5, #16]
   17d74:	sub	r0, r0, #1
   17d78:	str	r0, [r5, #16]
   17d7c:	mov	r0, r4
   17d80:	bl	4f98 <free@plt>
   17d84:	ldr	r4, [r5, #4]
   17d88:	mov	r0, r4
   17d8c:	pop	{r4, r5, r6, r7, fp, pc}
   17d90:	bl	51fc <rb_outofmemory@plt>

00017d94 <rb_dictionary_delete>:
   17d94:	push	{r4, r5, r6, sl, fp, lr}
   17d98:	add	fp, sp, #16
   17d9c:	mov	r6, r1
   17da0:	mov	r5, r0
   17da4:	bl	17ad0 <rb_dictionary_retune>
   17da8:	ldr	r0, [r5, #4]
   17dac:	mov	r4, #0
   17db0:	cmp	r0, #0
   17db4:	beq	17ea4 <rb_dictionary_delete+0x110>
   17db8:	ldr	r1, [r0, #20]
   17dbc:	ldr	r2, [r5]
   17dc0:	mov	r0, r6
   17dc4:	blx	r2
   17dc8:	cmp	r0, #0
   17dcc:	bne	17ea4 <rb_dictionary_delete+0x110>
   17dd0:	ldr	r0, [r5, #4]
   17dd4:	cmp	r0, #0
   17dd8:	beq	17ea4 <rb_dictionary_delete+0x110>
   17ddc:	ldrb	r1, [r5, #24]
   17de0:	ldr	r4, [r0, #16]
   17de4:	orr	r1, r1, #1
   17de8:	strb	r1, [r5, #24]
   17dec:	ldr	r3, [r0]
   17df0:	ldr	r1, [r0, #4]
   17df4:	cmp	r3, #0
   17df8:	beq	17e44 <rb_dictionary_delete+0xb0>
   17dfc:	cmp	r1, #0
   17e00:	beq	17e4c <rb_dictionary_delete+0xb8>
   17e04:	ldr	r2, [r0, #12]
   17e08:	cmp	r2, r1
   17e0c:	beq	17e54 <rb_dictionary_delete+0xc0>
   17e10:	mov	r3, r1
   17e14:	mov	r6, r3
   17e18:	ldr	r3, [r3]
   17e1c:	cmp	r3, #0
   17e20:	cmpne	r3, r2
   17e24:	bne	17e14 <rb_dictionary_delete+0x80>
   17e28:	ldr	r3, [r2, #4]
   17e2c:	str	r3, [r6]
   17e30:	str	r2, [r5, #4]
   17e34:	ldr	r3, [r0]
   17e38:	str	r3, [r2]
   17e3c:	str	r1, [r2, #4]
   17e40:	b	17e5c <rb_dictionary_delete+0xc8>
   17e44:	str	r1, [r5, #4]
   17e48:	b	17e5c <rb_dictionary_delete+0xc8>
   17e4c:	str	r3, [r5, #4]
   17e50:	b	17e5c <rb_dictionary_delete+0xc8>
   17e54:	str	r1, [r5, #4]
   17e58:	str	r3, [r1]
   17e5c:	ldr	r1, [r0, #8]
   17e60:	cmp	r1, #0
   17e64:	ldrne	r2, [r0, #12]
   17e68:	strne	r2, [r1, #12]
   17e6c:	ldr	r2, [r5, #8]
   17e70:	cmp	r2, r0
   17e74:	ldr	r2, [r0, #12]
   17e78:	streq	r2, [r5, #8]
   17e7c:	cmp	r2, #0
   17e80:	strne	r1, [r2, #8]
   17e84:	ldr	r1, [r5, #12]
   17e88:	cmp	r1, r0
   17e8c:	ldreq	r1, [r0, #8]
   17e90:	streq	r1, [r5, #12]
   17e94:	ldr	r1, [r5, #16]
   17e98:	sub	r1, r1, #1
   17e9c:	str	r1, [r5, #16]
   17ea0:	bl	4f98 <free@plt>
   17ea4:	mov	r0, r4
   17ea8:	pop	{r4, r5, r6, sl, fp, pc}

00017eac <rb_dictionary_retrieve>:
   17eac:	push	{r4, r5, r6, sl, fp, lr}
   17eb0:	add	fp, sp, #16
   17eb4:	mov	r6, r1
   17eb8:	mov	r5, r0
   17ebc:	bl	17ad0 <rb_dictionary_retune>
   17ec0:	ldr	r0, [r5, #4]
   17ec4:	mov	r4, #0
   17ec8:	cmp	r0, #0
   17ecc:	beq	17ee8 <rb_dictionary_retrieve+0x3c>
   17ed0:	ldr	r1, [r0, #20]
   17ed4:	ldr	r2, [r5]
   17ed8:	mov	r0, r6
   17edc:	blx	r2
   17ee0:	cmp	r0, #0
   17ee4:	beq	17ef0 <rb_dictionary_retrieve+0x44>
   17ee8:	mov	r0, r4
   17eec:	pop	{r4, r5, r6, sl, fp, pc}
   17ef0:	ldr	r0, [r5, #4]
   17ef4:	cmp	r0, #0
   17ef8:	ldrne	r4, [r0, #16]
   17efc:	mov	r0, r4
   17f00:	pop	{r4, r5, r6, sl, fp, pc}

00017f04 <rb_dictionary_size>:
   17f04:	ldr	r0, [r0, #16]
   17f08:	bx	lr

00017f0c <rb_dictionary_stats>:
   17f0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17f10:	add	fp, sp, #24
   17f14:	sub	sp, sp, #280	; 0x118
   17f18:	mov	r6, r0
   17f1c:	ldr	r0, [r0, #16]
   17f20:	mov	r5, r2
   17f24:	mov	r7, r1
   17f28:	cmp	r0, #0
   17f2c:	beq	17f84 <rb_dictionary_stats+0x78>
   17f30:	mov	r0, #0
   17f34:	add	r2, sp, #20
   17f38:	mov	r1, #0
   17f3c:	str	r0, [sp, #20]
   17f40:	ldr	r0, [r6, #4]
   17f44:	bl	17fe8 <stats_recurse>
   17f48:	ldr	r1, [r6, #16]
   17f4c:	ldr	r3, [r6, #20]
   17f50:	ldr	r2, [sp, #20]
   17f54:	ldr	r6, [pc, #120]	; 17fd4 <rb_dictionary_stats+0xc8>
   17f58:	str	r0, [sp, #8]
   17f5c:	udiv	r4, r0, r1
   17f60:	add	r6, pc, r6
   17f64:	str	r1, [sp, #4]
   17f68:	str	r2, [sp, #16]
   17f6c:	add	r0, sp, #24
   17f70:	str	r6, [sp]
   17f74:	str	r4, [sp, #12]
   17f78:	ldr	r2, [pc, #88]	; 17fd8 <rb_dictionary_stats+0xcc>
   17f7c:	add	r2, pc, r2
   17f80:	b	17fb8 <rb_dictionary_stats+0xac>
   17f84:	ldr	r3, [r6, #20]
   17f88:	ldr	r0, [pc, #76]	; 17fdc <rb_dictionary_stats+0xd0>
   17f8c:	ldr	r1, [pc, #76]	; 17fe0 <rb_dictionary_stats+0xd4>
   17f90:	add	r0, pc, r0
   17f94:	add	r1, pc, r1
   17f98:	str	r1, [sp]
   17f9c:	str	r0, [sp, #4]
   17fa0:	str	r0, [sp, #8]
   17fa4:	str	r0, [sp, #12]
   17fa8:	str	r0, [sp, #16]
   17fac:	add	r0, sp, #24
   17fb0:	ldr	r2, [pc, #44]	; 17fe4 <rb_dictionary_stats+0xd8>
   17fb4:	add	r2, pc, r2
   17fb8:	mov	r1, #256	; 0x100
   17fbc:	bl	53f4 <snprintf@plt>
   17fc0:	add	r0, sp, #24
   17fc4:	mov	r1, r5
   17fc8:	blx	r7
   17fcc:	sub	sp, fp, #24
   17fd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17fd4:	.word	0x000032e0
   17fd8:	.word	0x000032a0
   17fdc:	.word	0x00002487
   17fe0:	.word	0x000032ac
   17fe4:	.word	0x00003291

00017fe8 <stats_recurse>:
   17fe8:	push	{r4, r5, r6, r7, fp, lr}
   17fec:	add	fp, sp, #16
   17ff0:	mov	r6, r0
   17ff4:	ldr	r0, [r2]
   17ff8:	mov	r5, r2
   17ffc:	mov	r4, r1
   18000:	cmp	r0, r1
   18004:	strlt	r4, [r5]
   18008:	cmp	r6, #0
   1800c:	beq	18054 <stats_recurse+0x6c>
   18010:	ldr	r0, [r6]
   18014:	mov	r7, r4
   18018:	cmp	r0, #0
   1801c:	beq	18030 <stats_recurse+0x48>
   18020:	add	r1, r4, #1
   18024:	mov	r2, r5
   18028:	bl	17fe8 <stats_recurse>
   1802c:	add	r7, r0, r4
   18030:	ldr	r0, [r6, #4]
   18034:	cmp	r0, #0
   18038:	beq	18050 <stats_recurse+0x68>
   1803c:	add	r1, r4, #1
   18040:	mov	r2, r5
   18044:	bl	17fe8 <stats_recurse>
   18048:	add	r0, r0, r7
   1804c:	pop	{r4, r5, r6, r7, fp, pc}
   18050:	mov	r4, r7
   18054:	mov	r0, r4
   18058:	pop	{r4, r5, r6, r7, fp, pc}

0001805c <rb_dictionary_stats_walk>:
   1805c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18060:	add	fp, sp, #28
   18064:	sub	sp, sp, #284	; 0x11c
   18068:	ldr	r7, [pc, #216]	; 18148 <rb_dictionary_stats_walk+0xec>
   1806c:	ldr	r7, [pc, r7]
   18070:	cmp	r7, #0
   18074:	beq	18140 <rb_dictionary_stats_walk+0xe4>
   18078:	ldr	r5, [pc, #204]	; 1814c <rb_dictionary_stats_walk+0xf0>
   1807c:	mov	r9, r1
   18080:	mov	r8, r0
   18084:	add	r6, sp, #24
   18088:	add	r5, pc, r5
   1808c:	ldr	sl, [r7]
   18090:	ldr	r0, [sl, #16]
   18094:	cmp	r0, #0
   18098:	beq	180ec <rb_dictionary_stats_walk+0x90>
   1809c:	mov	r0, #0
   180a0:	mov	r1, #0
   180a4:	add	r2, sp, #20
   180a8:	str	r0, [sp, #20]
   180ac:	ldr	r0, [sl, #4]
   180b0:	bl	17fe8 <stats_recurse>
   180b4:	ldr	r1, [sl, #16]
   180b8:	ldr	r2, [sp, #20]
   180bc:	ldr	r3, [sl, #20]
   180c0:	str	r5, [sp]
   180c4:	str	r0, [sp, #8]
   180c8:	udiv	r4, r0, r1
   180cc:	str	r1, [sp, #4]
   180d0:	str	r2, [sp, #16]
   180d4:	mov	r0, r6
   180d8:	mov	r1, #256	; 0x100
   180dc:	str	r4, [sp, #12]
   180e0:	ldr	r2, [pc, #104]	; 18150 <rb_dictionary_stats_walk+0xf4>
   180e4:	add	r2, pc, r2
   180e8:	b	18124 <rb_dictionary_stats_walk+0xc8>
   180ec:	ldr	r3, [sl, #20]
   180f0:	ldr	r0, [pc, #92]	; 18154 <rb_dictionary_stats_walk+0xf8>
   180f4:	mov	r1, #256	; 0x100
   180f8:	add	r0, pc, r0
   180fc:	str	r0, [sp]
   18100:	ldr	r0, [pc, #80]	; 18158 <rb_dictionary_stats_walk+0xfc>
   18104:	add	r0, pc, r0
   18108:	str	r0, [sp, #4]
   1810c:	str	r0, [sp, #8]
   18110:	str	r0, [sp, #12]
   18114:	str	r0, [sp, #16]
   18118:	mov	r0, r6
   1811c:	ldr	r2, [pc, #56]	; 1815c <rb_dictionary_stats_walk+0x100>
   18120:	add	r2, pc, r2
   18124:	bl	53f4 <snprintf@plt>
   18128:	mov	r0, r6
   1812c:	mov	r1, r9
   18130:	blx	r8
   18134:	ldr	r7, [r7, #8]
   18138:	cmp	r7, #0
   1813c:	bne	1808c <rb_dictionary_stats_walk+0x30>
   18140:	sub	sp, fp, #28
   18144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18148:	.word	0x00031e1c
   1814c:	.word	0x000031b8
   18150:	.word	0x00003138
   18154:	.word	0x00003148
   18158:	.word	0x00002313
   1815c:	.word	0x00003125

00018160 <rb_radixtree_create>:
   18160:	push	{r4, r5, r6, sl, fp, lr}
   18164:	add	fp, sp, #16
   18168:	mov	r6, r1
   1816c:	mov	r5, r0
   18170:	mov	r0, #1
   18174:	mov	r1, #28
   18178:	bl	4ea8 <calloc@plt>
   1817c:	cmp	r0, #0
   18180:	beq	18214 <rb_radixtree_create+0xb4>
   18184:	mov	r4, r0
   18188:	str	r6, [r0]
   1818c:	mov	r0, r5
   18190:	bl	507c <strlen@plt>
   18194:	add	r0, r0, #1
   18198:	bl	5214 <malloc@plt>
   1819c:	cmp	r0, #0
   181a0:	beq	18214 <rb_radixtree_create+0xb4>
   181a4:	mov	r1, r5
   181a8:	mov	r6, r0
   181ac:	bl	5124 <strcpy@plt>
   181b0:	mov	r1, #0
   181b4:	str	r1, [r4, #4]
   181b8:	ldr	r0, [pc, #88]	; 18218 <rb_radixtree_create+0xb8>
   181bc:	ldr	r0, [pc, r0]
   181c0:	str	r6, [r4, #12]
   181c4:	str	r4, [r4, #16]
   181c8:	str	r1, [r4, #20]
   181cc:	add	r1, r4, #16
   181d0:	ldr	r2, [r0]
   181d4:	cmp	r2, #0
   181d8:	str	r2, [r4, #24]
   181dc:	beq	181ec <rb_radixtree_create+0x8c>
   181e0:	add	r2, r2, #4
   181e4:	str	r1, [r2]
   181e8:	b	181fc <rb_radixtree_create+0x9c>
   181ec:	mov	r2, r0
   181f0:	ldr	r3, [r2, #4]!
   181f4:	cmp	r3, #0
   181f8:	streq	r1, [r2]
   181fc:	str	r1, [r0]
   18200:	ldr	r1, [r0, #8]
   18204:	add	r1, r1, #1
   18208:	str	r1, [r0, #8]
   1820c:	mov	r0, r4
   18210:	pop	{r4, r5, r6, sl, fp, pc}
   18214:	bl	51fc <rb_outofmemory@plt>
   18218:	.word	0x000141f8

0001821c <rb_radixtree_destroy>:
   1821c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18220:	add	fp, sp, #24
   18224:	sub	sp, sp, #40	; 0x28
   18228:	mov	r6, r1
   1822c:	mov	r1, sp
   18230:	mov	r9, r2
   18234:	mov	r4, r0
   18238:	bl	4cec <rb_radixtree_foreach_start@plt>
   1823c:	cmp	r4, #0
   18240:	beq	1847c <rb_radixtree_destroy+0x260>
   18244:	ldr	r7, [sp, #8]
   18248:	cmp	r6, #0
   1824c:	beq	18370 <rb_radixtree_destroy+0x154>
   18250:	cmp	r7, #0
   18254:	beq	1847c <rb_radixtree_destroy+0x260>
   18258:	mov	r8, #0
   1825c:	ldr	r0, [r7, #4]
   18260:	cmp	r0, #0
   18264:	beq	1847c <rb_radixtree_destroy+0x260>
   18268:	ldr	r1, [r7, #4]
   1826c:	ldr	r0, [r7, #8]
   18270:	mov	r2, r9
   18274:	blx	r6
   18278:	ldr	r1, [r7, #8]
   1827c:	mov	r0, r4
   18280:	mov	r2, #0
   18284:	bl	53b8 <rb_radixtree_elem_find@plt>
   18288:	cmp	r0, #0
   1828c:	beq	1829c <rb_radixtree_destroy+0x80>
   18290:	mov	r1, r0
   18294:	mov	r0, r4
   18298:	bl	4c8c <rb_radixtree_elem_delete@plt>
   1829c:	ldr	r7, [sp, #12]
   182a0:	cmp	r7, #0
   182a4:	str	r7, [sp, #8]
   182a8:	beq	1847c <rb_radixtree_destroy+0x260>
   182ac:	ldr	r0, [r7, #12]
   182b0:	cmp	r0, #0
   182b4:	beq	18350 <rb_radixtree_destroy+0x134>
   182b8:	ldrb	r1, [r7, #16]
   182bc:	b	182c8 <rb_radixtree_destroy+0xac>
   182c0:	mov	r1, #0
   182c4:	mov	r0, r5
   182c8:	mov	r2, r1
   182cc:	add	r1, r0, r2, lsl #2
   182d0:	cmp	r2, #14
   182d4:	ldr	r5, [r1, #4]
   182d8:	add	r1, r2, #1
   182dc:	bgt	182ec <rb_radixtree_destroy+0xd0>
   182e0:	cmp	r5, #0
   182e4:	mov	r2, r1
   182e8:	beq	182cc <rb_radixtree_destroy+0xb0>
   182ec:	cmp	r5, #0
   182f0:	beq	18308 <rb_radixtree_destroy+0xec>
   182f4:	ldr	r2, [r5]
   182f8:	cmn	r2, #1
   182fc:	bne	182c0 <rb_radixtree_destroy+0xa4>
   18300:	cmp	r5, r7
   18304:	bne	1833c <rb_radixtree_destroy+0x120>
   18308:	sub	r2, r1, #1
   1830c:	cmp	r2, #15
   18310:	blt	182c8 <rb_radixtree_destroy+0xac>
   18314:	ldr	r2, [r0, #68]	; 0x44
   18318:	cmp	r2, #0
   1831c:	beq	18350 <rb_radixtree_destroy+0x134>
   18320:	ldrb	r1, [r0, #72]	; 0x48
   18324:	mov	r0, r2
   18328:	cmp	r1, #14
   1832c:	bhi	18314 <rb_radixtree_destroy+0xf8>
   18330:	add	r1, r1, #1
   18334:	mov	r0, r2
   18338:	b	182c8 <rb_radixtree_destroy+0xac>
   1833c:	ldr	r1, [r7, #8]
   18340:	ldr	r0, [r5, #8]
   18344:	bl	5520 <strcmp@plt>
   18348:	cmn	r0, #1
   1834c:	bgt	18360 <rb_radixtree_destroy+0x144>
   18350:	str	r8, [sp, #12]
   18354:	cmp	r7, #0
   18358:	bne	1825c <rb_radixtree_destroy+0x40>
   1835c:	b	1847c <rb_radixtree_destroy+0x260>
   18360:	str	r5, [sp, #12]
   18364:	cmp	r7, #0
   18368:	bne	1825c <rb_radixtree_destroy+0x40>
   1836c:	b	1847c <rb_radixtree_destroy+0x260>
   18370:	cmp	r7, #0
   18374:	beq	1847c <rb_radixtree_destroy+0x260>
   18378:	mov	r5, #0
   1837c:	ldr	r0, [r7, #4]
   18380:	cmp	r0, #0
   18384:	beq	1847c <rb_radixtree_destroy+0x260>
   18388:	ldr	r1, [r7, #8]
   1838c:	mov	r0, r4
   18390:	mov	r2, #0
   18394:	bl	53b8 <rb_radixtree_elem_find@plt>
   18398:	cmp	r0, #0
   1839c:	beq	183ac <rb_radixtree_destroy+0x190>
   183a0:	mov	r1, r0
   183a4:	mov	r0, r4
   183a8:	bl	4c8c <rb_radixtree_elem_delete@plt>
   183ac:	ldr	r7, [sp, #12]
   183b0:	cmp	r7, #0
   183b4:	str	r7, [sp, #8]
   183b8:	beq	1847c <rb_radixtree_destroy+0x260>
   183bc:	ldr	r0, [r7, #12]
   183c0:	cmp	r0, #0
   183c4:	beq	18460 <rb_radixtree_destroy+0x244>
   183c8:	ldrb	r1, [r7, #16]
   183cc:	b	183d8 <rb_radixtree_destroy+0x1bc>
   183d0:	mov	r1, #0
   183d4:	mov	r0, r6
   183d8:	mov	r2, r1
   183dc:	add	r1, r0, r2, lsl #2
   183e0:	cmp	r2, #14
   183e4:	ldr	r6, [r1, #4]
   183e8:	add	r1, r2, #1
   183ec:	bgt	183fc <rb_radixtree_destroy+0x1e0>
   183f0:	cmp	r6, #0
   183f4:	mov	r2, r1
   183f8:	beq	183dc <rb_radixtree_destroy+0x1c0>
   183fc:	cmp	r6, #0
   18400:	beq	18418 <rb_radixtree_destroy+0x1fc>
   18404:	ldr	r2, [r6]
   18408:	cmn	r2, #1
   1840c:	bne	183d0 <rb_radixtree_destroy+0x1b4>
   18410:	cmp	r6, r7
   18414:	bne	1844c <rb_radixtree_destroy+0x230>
   18418:	sub	r2, r1, #1
   1841c:	cmp	r2, #15
   18420:	blt	183d8 <rb_radixtree_destroy+0x1bc>
   18424:	ldr	r2, [r0, #68]	; 0x44
   18428:	cmp	r2, #0
   1842c:	beq	18460 <rb_radixtree_destroy+0x244>
   18430:	ldrb	r1, [r0, #72]	; 0x48
   18434:	mov	r0, r2
   18438:	cmp	r1, #14
   1843c:	bhi	18424 <rb_radixtree_destroy+0x208>
   18440:	add	r1, r1, #1
   18444:	mov	r0, r2
   18448:	b	183d8 <rb_radixtree_destroy+0x1bc>
   1844c:	ldr	r1, [r7, #8]
   18450:	ldr	r0, [r6, #8]
   18454:	bl	5520 <strcmp@plt>
   18458:	cmp	r0, #0
   1845c:	bge	18470 <rb_radixtree_destroy+0x254>
   18460:	str	r5, [sp, #12]
   18464:	cmp	r7, #0
   18468:	bne	1837c <rb_radixtree_destroy+0x160>
   1846c:	b	1847c <rb_radixtree_destroy+0x260>
   18470:	str	r6, [sp, #12]
   18474:	cmp	r7, #0
   18478:	bne	1837c <rb_radixtree_destroy+0x160>
   1847c:	ldr	r0, [r4, #24]
   18480:	ldr	r1, [r4, #20]
   18484:	cmp	r0, #0
   18488:	beq	18498 <rb_radixtree_destroy+0x27c>
   1848c:	str	r1, [r0, #4]
   18490:	ldr	r1, [r4, #20]
   18494:	b	184a4 <rb_radixtree_destroy+0x288>
   18498:	ldr	r2, [pc, #84]	; 184f4 <rb_radixtree_destroy+0x2d8>
   1849c:	ldr	r2, [pc, r2]
   184a0:	str	r1, [r2, #4]
   184a4:	ldr	r2, [pc, #76]	; 184f8 <rb_radixtree_destroy+0x2dc>
   184a8:	cmp	r1, #0
   184ac:	ldr	r2, [pc, r2]
   184b0:	mov	r3, r2
   184b4:	addne	r3, r1, #8
   184b8:	str	r0, [r3]
   184bc:	mov	r0, #0
   184c0:	str	r0, [r4, #20]
   184c4:	str	r0, [r4, #24]
   184c8:	ldr	r0, [r2, #8]
   184cc:	sub	r0, r0, #1
   184d0:	str	r0, [r2, #8]
   184d4:	ldr	r0, [r4, #12]
   184d8:	cmp	r0, #0
   184dc:	beq	184e4 <rb_radixtree_destroy+0x2c8>
   184e0:	bl	4f98 <free@plt>
   184e4:	mov	r0, r4
   184e8:	bl	4f98 <free@plt>
   184ec:	sub	sp, fp, #24
   184f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   184f4:	.word	0x00013f18
   184f8:	.word	0x00013f08

000184fc <rb_radixtree_foreach_start>:
   184fc:	push	{r4, r5, fp, lr}
   18500:	add	fp, sp, #8
   18504:	cmp	r0, #0
   18508:	beq	186c0 <rb_radixtree_foreach_start+0x1c4>
   1850c:	ldr	r0, [r0, #4]
   18510:	mov	r4, r1
   18514:	cmp	r0, #0
   18518:	bne	18534 <rb_radixtree_foreach_start+0x38>
   1851c:	mov	r0, #0
   18520:	str	r0, [r4, #8]
   18524:	b	186bc <rb_radixtree_foreach_start+0x1c0>
   18528:	ldr	r0, [r1, #64]	; 0x40
   1852c:	cmp	r0, #0
   18530:	moveq	r0, r1
   18534:	ldr	r1, [r0]
   18538:	cmn	r1, #1
   1853c:	beq	185fc <rb_radixtree_foreach_start+0x100>
   18540:	mov	r1, r0
   18544:	ldr	r0, [r0, #4]
   18548:	cmp	r0, #0
   1854c:	bne	18534 <rb_radixtree_foreach_start+0x38>
   18550:	ldr	r0, [r1, #8]
   18554:	cmp	r0, #0
   18558:	bne	18534 <rb_radixtree_foreach_start+0x38>
   1855c:	ldr	r0, [r1, #12]
   18560:	cmp	r0, #0
   18564:	bne	18534 <rb_radixtree_foreach_start+0x38>
   18568:	ldr	r0, [r1, #16]
   1856c:	cmp	r0, #0
   18570:	bne	18534 <rb_radixtree_foreach_start+0x38>
   18574:	ldr	r0, [r1, #20]
   18578:	cmp	r0, #0
   1857c:	bne	18534 <rb_radixtree_foreach_start+0x38>
   18580:	ldr	r0, [r1, #24]
   18584:	cmp	r0, #0
   18588:	bne	18534 <rb_radixtree_foreach_start+0x38>
   1858c:	ldr	r0, [r1, #28]
   18590:	cmp	r0, #0
   18594:	bne	18534 <rb_radixtree_foreach_start+0x38>
   18598:	ldr	r0, [r1, #32]
   1859c:	cmp	r0, #0
   185a0:	bne	18534 <rb_radixtree_foreach_start+0x38>
   185a4:	ldr	r0, [r1, #36]	; 0x24
   185a8:	cmp	r0, #0
   185ac:	bne	18534 <rb_radixtree_foreach_start+0x38>
   185b0:	ldr	r0, [r1, #40]	; 0x28
   185b4:	cmp	r0, #0
   185b8:	bne	18534 <rb_radixtree_foreach_start+0x38>
   185bc:	ldr	r0, [r1, #44]	; 0x2c
   185c0:	cmp	r0, #0
   185c4:	bne	18534 <rb_radixtree_foreach_start+0x38>
   185c8:	ldr	r0, [r1, #48]	; 0x30
   185cc:	cmp	r0, #0
   185d0:	bne	18534 <rb_radixtree_foreach_start+0x38>
   185d4:	ldr	r0, [r1, #52]	; 0x34
   185d8:	cmp	r0, #0
   185dc:	bne	18534 <rb_radixtree_foreach_start+0x38>
   185e0:	ldr	r0, [r1, #56]	; 0x38
   185e4:	cmp	r0, #0
   185e8:	bne	18534 <rb_radixtree_foreach_start+0x38>
   185ec:	ldr	r0, [r1, #60]	; 0x3c
   185f0:	cmp	r0, #0
   185f4:	bne	18534 <rb_radixtree_foreach_start+0x38>
   185f8:	b	18528 <rb_radixtree_foreach_start+0x2c>
   185fc:	cmp	r0, #0
   18600:	str	r0, [r4, #8]
   18604:	str	r0, [r4, #12]
   18608:	popeq	{r4, r5, fp, pc}
   1860c:	str	r0, [r4, #8]
   18610:	ldr	r1, [r0, #12]
   18614:	cmp	r1, #0
   18618:	beq	186b8 <rb_radixtree_foreach_start+0x1bc>
   1861c:	ldrb	r2, [r0, #16]
   18620:	b	1862c <rb_radixtree_foreach_start+0x130>
   18624:	mov	r2, #0
   18628:	mov	r1, r5
   1862c:	mov	r3, r2
   18630:	add	r2, r1, r3, lsl #2
   18634:	cmp	r3, #14
   18638:	ldr	r5, [r2, #4]
   1863c:	add	r2, r3, #1
   18640:	bgt	18650 <rb_radixtree_foreach_start+0x154>
   18644:	cmp	r5, #0
   18648:	mov	r3, r2
   1864c:	beq	18630 <rb_radixtree_foreach_start+0x134>
   18650:	cmp	r5, #0
   18654:	beq	1866c <rb_radixtree_foreach_start+0x170>
   18658:	ldr	r3, [r5]
   1865c:	cmn	r3, #1
   18660:	bne	18624 <rb_radixtree_foreach_start+0x128>
   18664:	cmp	r5, r0
   18668:	bne	186a0 <rb_radixtree_foreach_start+0x1a4>
   1866c:	sub	r3, r2, #1
   18670:	cmp	r3, #15
   18674:	blt	1862c <rb_radixtree_foreach_start+0x130>
   18678:	ldr	r3, [r1, #68]	; 0x44
   1867c:	cmp	r3, #0
   18680:	beq	186b8 <rb_radixtree_foreach_start+0x1bc>
   18684:	ldrb	r2, [r1, #72]	; 0x48
   18688:	mov	r1, r3
   1868c:	cmp	r2, #14
   18690:	bhi	18678 <rb_radixtree_foreach_start+0x17c>
   18694:	add	r2, r2, #1
   18698:	mov	r1, r3
   1869c:	b	1862c <rb_radixtree_foreach_start+0x130>
   186a0:	ldr	r1, [r0, #8]
   186a4:	ldr	r0, [r5, #8]
   186a8:	bl	5520 <strcmp@plt>
   186ac:	cmn	r0, #1
   186b0:	strgt	r5, [r4, #12]
   186b4:	popgt	{r4, r5, fp, pc}
   186b8:	mov	r0, #0
   186bc:	str	r0, [r4, #12]
   186c0:	pop	{r4, r5, fp, pc}

000186c4 <rb_radixtree_foreach_cur>:
   186c4:	mov	r2, r0
   186c8:	mov	r0, #0
   186cc:	cmp	r2, #0
   186d0:	ldrne	r1, [r1, #8]
   186d4:	cmpne	r1, #0
   186d8:	ldrne	r0, [r1, #4]
   186dc:	bx	lr

000186e0 <rb_radixtree_delete>:
   186e0:	push	{r4, r5, fp, lr}
   186e4:	add	fp, sp, #8
   186e8:	mov	r2, #0
   186ec:	mov	r5, r0
   186f0:	mov	r4, #0
   186f4:	bl	53b8 <rb_radixtree_elem_find@plt>
   186f8:	cmp	r0, #0
   186fc:	beq	18710 <rb_radixtree_delete+0x30>
   18700:	ldr	r4, [r0, #4]
   18704:	mov	r1, r0
   18708:	mov	r0, r5
   1870c:	bl	4c8c <rb_radixtree_elem_delete@plt>
   18710:	mov	r0, r4
   18714:	pop	{r4, r5, fp, pc}

00018718 <rb_radixtree_foreach_next>:
   18718:	push	{r4, r5, fp, lr}
   1871c:	add	fp, sp, #8
   18720:	cmp	r0, #0
   18724:	beq	187f8 <rb_radixtree_foreach_next+0xe0>
   18728:	ldr	r0, [r1, #8]
   1872c:	mov	r4, r1
   18730:	cmp	r0, #0
   18734:	beq	187f8 <rb_radixtree_foreach_next+0xe0>
   18738:	ldr	r0, [r4, #12]
   1873c:	cmp	r0, #0
   18740:	str	r0, [r4, #8]
   18744:	popeq	{r4, r5, fp, pc}
   18748:	ldr	r1, [r0, #12]
   1874c:	cmp	r1, #0
   18750:	beq	187f0 <rb_radixtree_foreach_next+0xd8>
   18754:	ldrb	r2, [r0, #16]
   18758:	b	18764 <rb_radixtree_foreach_next+0x4c>
   1875c:	mov	r2, #0
   18760:	mov	r1, r5
   18764:	mov	r3, r2
   18768:	add	r2, r1, r3, lsl #2
   1876c:	cmp	r3, #14
   18770:	ldr	r5, [r2, #4]
   18774:	add	r2, r3, #1
   18778:	bgt	18788 <rb_radixtree_foreach_next+0x70>
   1877c:	cmp	r5, #0
   18780:	mov	r3, r2
   18784:	beq	18768 <rb_radixtree_foreach_next+0x50>
   18788:	cmp	r5, #0
   1878c:	beq	187a4 <rb_radixtree_foreach_next+0x8c>
   18790:	ldr	r3, [r5]
   18794:	cmn	r3, #1
   18798:	bne	1875c <rb_radixtree_foreach_next+0x44>
   1879c:	cmp	r5, r0
   187a0:	bne	187d8 <rb_radixtree_foreach_next+0xc0>
   187a4:	sub	r3, r2, #1
   187a8:	cmp	r3, #15
   187ac:	blt	18764 <rb_radixtree_foreach_next+0x4c>
   187b0:	ldr	r3, [r1, #68]	; 0x44
   187b4:	cmp	r3, #0
   187b8:	beq	187f0 <rb_radixtree_foreach_next+0xd8>
   187bc:	ldrb	r2, [r1, #72]	; 0x48
   187c0:	mov	r1, r3
   187c4:	cmp	r2, #14
   187c8:	bhi	187b0 <rb_radixtree_foreach_next+0x98>
   187cc:	add	r2, r2, #1
   187d0:	mov	r1, r3
   187d4:	b	18764 <rb_radixtree_foreach_next+0x4c>
   187d8:	ldr	r1, [r0, #8]
   187dc:	ldr	r0, [r5, #8]
   187e0:	bl	5520 <strcmp@plt>
   187e4:	cmn	r0, #1
   187e8:	strgt	r5, [r4, #12]
   187ec:	popgt	{r4, r5, fp, pc}
   187f0:	mov	r0, #0
   187f4:	str	r0, [r4, #12]
   187f8:	pop	{r4, r5, fp, pc}

000187fc <rb_radixtree_foreach>:
   187fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18800:	add	fp, sp, #24
   18804:	ldr	r5, [r0, #4]
   18808:	cmp	r5, #0
   1880c:	beq	18958 <rb_radixtree_foreach+0x15c>
   18810:	ldr	r0, [r5]
   18814:	mov	r8, r2
   18818:	mov	r4, r1
   1881c:	cmn	r0, #1
   18820:	beq	188c0 <rb_radixtree_foreach+0xc4>
   18824:	cmp	r4, #0
   18828:	mov	r0, r4
   1882c:	beq	188e8 <rb_radixtree_foreach+0xec>
   18830:	mov	r6, #0
   18834:	b	1883c <rb_radixtree_foreach+0x40>
   18838:	add	r6, r1, #1
   1883c:	mov	r1, r6
   18840:	add	r0, r5, r1, lsl #2
   18844:	add	r6, r1, #1
   18848:	cmp	r1, #14
   1884c:	ldr	r0, [r0, #4]
   18850:	bgt	18860 <rb_radixtree_foreach+0x64>
   18854:	cmp	r0, #0
   18858:	mov	r1, r6
   1885c:	beq	18840 <rb_radixtree_foreach+0x44>
   18860:	sub	r7, r6, #1
   18864:	cmp	r0, #0
   18868:	beq	18888 <rb_radixtree_foreach+0x8c>
   1886c:	ldr	r1, [r0]
   18870:	cmn	r1, #1
   18874:	bne	188b4 <rb_radixtree_foreach+0xb8>
   18878:	ldr	r1, [r0, #4]
   1887c:	ldr	r0, [r0, #8]
   18880:	mov	r2, r8
   18884:	blx	r4
   18888:	cmp	r7, #15
   1888c:	blt	1883c <rb_radixtree_foreach+0x40>
   18890:	mov	r0, r5
   18894:	ldr	r5, [r0, #68]	; 0x44
   18898:	cmp	r5, #0
   1889c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   188a0:	ldrb	r1, [r0, #72]	; 0x48
   188a4:	mov	r0, r5
   188a8:	cmp	r1, #14
   188ac:	bhi	18894 <rb_radixtree_foreach+0x98>
   188b0:	b	18838 <rb_radixtree_foreach+0x3c>
   188b4:	mov	r5, r0
   188b8:	mov	r6, #0
   188bc:	b	1883c <rb_radixtree_foreach+0x40>
   188c0:	cmp	r4, #0
   188c4:	mov	r0, r4
   188c8:	beq	18958 <rb_radixtree_foreach+0x15c>
   188cc:	ldr	r1, [r5, #4]
   188d0:	ldr	r0, [r5, #8]
   188d4:	mov	r2, r8
   188d8:	mov	r3, r4
   188dc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   188e0:	bx	r3
   188e4:	mov	r5, r1
   188e8:	mov	r0, #0
   188ec:	b	188f8 <rb_radixtree_foreach+0xfc>
   188f0:	add	r0, r0, #1
   188f4:	mov	r5, r1
   188f8:	mov	r2, r0
   188fc:	add	r0, r5, r2, lsl #2
   18900:	cmp	r2, #14
   18904:	ldr	r1, [r0, #4]
   18908:	add	r0, r2, #1
   1890c:	bgt	1891c <rb_radixtree_foreach+0x120>
   18910:	cmp	r1, #0
   18914:	mov	r2, r0
   18918:	beq	188fc <rb_radixtree_foreach+0x100>
   1891c:	cmp	r1, #0
   18920:	sub	r2, r0, #1
   18924:	ldrne	r3, [r1]
   18928:	cmnne	r3, #1
   1892c:	bne	188e4 <rb_radixtree_foreach+0xe8>
   18930:	cmp	r2, #15
   18934:	blt	188f8 <rb_radixtree_foreach+0xfc>
   18938:	ldr	r1, [r5, #68]	; 0x44
   1893c:	cmp	r1, #0
   18940:	beq	18958 <rb_radixtree_foreach+0x15c>
   18944:	ldrb	r0, [r5, #72]	; 0x48
   18948:	mov	r5, r1
   1894c:	cmp	r0, #14
   18950:	bhi	18938 <rb_radixtree_foreach+0x13c>
   18954:	b	188f0 <rb_radixtree_foreach+0xf4>
   18958:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001895c <rb_radixtree_search>:
   1895c:	push	{r4, r5, r6, r7, fp, lr}
   18960:	add	fp, sp, #16
   18964:	ldr	r5, [r0, #4]
   18968:	mov	r0, #0
   1896c:	cmp	r5, #0
   18970:	beq	18ac4 <rb_radixtree_search+0x168>
   18974:	mov	r3, r1
   18978:	ldr	r1, [r5]
   1897c:	mov	r4, r2
   18980:	cmn	r1, #1
   18984:	beq	18aa8 <rb_radixtree_search+0x14c>
   18988:	cmp	r3, #0
   1898c:	bne	18998 <rb_radixtree_search+0x3c>
   18990:	b	18a34 <rb_radixtree_search+0xd8>
   18994:	mov	r5, r0
   18998:	mov	r6, #0
   1899c:	b	189a4 <rb_radixtree_search+0x48>
   189a0:	mov	r5, #0
   189a4:	mov	r1, r6
   189a8:	add	r0, r5, r1, lsl #2
   189ac:	add	r6, r1, #1
   189b0:	cmp	r1, #14
   189b4:	ldr	r0, [r0, #4]
   189b8:	bgt	189c8 <rb_radixtree_search+0x6c>
   189bc:	cmp	r0, #0
   189c0:	mov	r1, r6
   189c4:	beq	189a8 <rb_radixtree_search+0x4c>
   189c8:	cmp	r0, #0
   189cc:	beq	189fc <rb_radixtree_search+0xa0>
   189d0:	ldr	r1, [r0]
   189d4:	cmn	r1, #1
   189d8:	bne	18994 <rb_radixtree_search+0x38>
   189dc:	ldr	r1, [r0, #4]
   189e0:	ldr	r0, [r0, #8]
   189e4:	mov	r2, r4
   189e8:	mov	r7, r3
   189ec:	blx	r3
   189f0:	cmp	r0, #0
   189f4:	mov	r3, r7
   189f8:	popne	{r4, r5, r6, r7, fp, pc}
   189fc:	sub	r0, r6, #1
   18a00:	cmp	r0, #15
   18a04:	blt	189a4 <rb_radixtree_search+0x48>
   18a08:	ldr	r0, [r5, #68]	; 0x44
   18a0c:	ldrb	r6, [r5, #72]	; 0x48
   18a10:	cmp	r0, #0
   18a14:	beq	189a0 <rb_radixtree_search+0x44>
   18a18:	cmp	r6, #14
   18a1c:	mov	r5, r0
   18a20:	bhi	18a08 <rb_radixtree_search+0xac>
   18a24:	add	r6, r6, #1
   18a28:	mov	r5, r0
   18a2c:	b	189a4 <rb_radixtree_search+0x48>
   18a30:	mov	r5, r1
   18a34:	mov	r0, #0
   18a38:	b	18a40 <rb_radixtree_search+0xe4>
   18a3c:	mov	r5, #0
   18a40:	mov	r2, r0
   18a44:	add	r0, r5, r2, lsl #2
   18a48:	cmp	r2, #14
   18a4c:	ldr	r1, [r0, #4]
   18a50:	add	r0, r2, #1
   18a54:	bgt	18a64 <rb_radixtree_search+0x108>
   18a58:	cmp	r1, #0
   18a5c:	mov	r2, r0
   18a60:	beq	18a44 <rb_radixtree_search+0xe8>
   18a64:	cmp	r1, #0
   18a68:	ldrne	r2, [r1]
   18a6c:	cmnne	r2, #1
   18a70:	bne	18a30 <rb_radixtree_search+0xd4>
   18a74:	sub	r1, r0, #1
   18a78:	cmp	r1, #15
   18a7c:	blt	18a40 <rb_radixtree_search+0xe4>
   18a80:	ldr	r1, [r5, #68]	; 0x44
   18a84:	ldrb	r0, [r5, #72]	; 0x48
   18a88:	cmp	r1, #0
   18a8c:	beq	18a3c <rb_radixtree_search+0xe0>
   18a90:	cmp	r0, #14
   18a94:	mov	r5, r1
   18a98:	bhi	18a80 <rb_radixtree_search+0x124>
   18a9c:	add	r0, r0, #1
   18aa0:	mov	r5, r1
   18aa4:	b	18a40 <rb_radixtree_search+0xe4>
   18aa8:	cmp	r3, #0
   18aac:	beq	18ac4 <rb_radixtree_search+0x168>
   18ab0:	ldr	r1, [r5, #4]
   18ab4:	ldr	r0, [r5, #8]
   18ab8:	mov	r2, r4
   18abc:	pop	{r4, r5, r6, r7, fp, lr}
   18ac0:	bx	r3
   18ac4:	pop	{r4, r5, r6, r7, fp, pc}

00018ac8 <rb_radixtree_elem_find>:
   18ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18acc:	add	fp, sp, #28
   18ad0:	sub	sp, sp, #260	; 0x104
   18ad4:	mov	sl, r0
   18ad8:	mov	r0, r1
   18adc:	mov	r8, r2
   18ae0:	mov	r4, r1
   18ae4:	bl	507c <strlen@plt>
   18ae8:	mov	r5, r0
   18aec:	ldr	r0, [sl]
   18af0:	mov	r6, #0
   18af4:	cmp	r0, #0
   18af8:	beq	18b40 <rb_radixtree_elem_find+0x78>
   18afc:	cmp	r5, #256	; 0x100
   18b00:	blt	18b58 <rb_radixtree_elem_find+0x90>
   18b04:	add	r0, r5, #1
   18b08:	bl	5214 <malloc@plt>
   18b0c:	cmp	r0, #0
   18b10:	beq	18c24 <rb_radixtree_elem_find+0x15c>
   18b14:	mov	r1, r4
   18b18:	mov	r7, r0
   18b1c:	bl	5124 <strcpy@plt>
   18b20:	ldr	r1, [sl]
   18b24:	mov	r0, r7
   18b28:	blx	r1
   18b2c:	mov	r9, r7
   18b30:	ldr	r4, [sl, #4]
   18b34:	cmp	r4, #0
   18b38:	bne	18b88 <rb_radixtree_elem_find+0xc0>
   18b3c:	b	18bcc <rb_radixtree_elem_find+0x104>
   18b40:	mov	r7, r4
   18b44:	mov	r9, #0
   18b48:	ldr	r4, [sl, #4]
   18b4c:	cmp	r4, #0
   18b50:	bne	18b88 <rb_radixtree_elem_find+0xc0>
   18b54:	b	18bcc <rb_radixtree_elem_find+0x104>
   18b58:	mov	r7, sp
   18b5c:	mov	r1, r4
   18b60:	mov	r2, #256	; 0x100
   18b64:	mov	r0, r7
   18b68:	bl	4f50 <rb_strlcpy@plt>
   18b6c:	ldr	r1, [sl]
   18b70:	mov	r0, r7
   18b74:	blx	r1
   18b78:	mov	r9, #0
   18b7c:	ldr	r4, [sl, #4]
   18b80:	cmp	r4, #0
   18b84:	beq	18bcc <rb_radixtree_elem_find+0x104>
   18b88:	mov	ip, #4
   18b8c:	mov	r1, #15
   18b90:	mov	r6, #0
   18b94:	ldr	r2, [r4]
   18b98:	cmn	r2, #1
   18b9c:	beq	18be8 <rb_radixtree_elem_find+0x120>
   18ba0:	add	r3, r2, r2, lsr #31
   18ba4:	mov	r0, #0
   18ba8:	cmp	r5, r3, asr #1
   18bac:	asrgt	r0, r3, #1
   18bb0:	bicgt	r2, ip, r2, lsl #2
   18bb4:	ldrbgt	r0, [r7, r0]
   18bb8:	andgt	r0, r1, r0, lsr r2
   18bbc:	add	r0, r4, r0, lsl #2
   18bc0:	ldr	r4, [r0, #4]
   18bc4:	cmp	r4, #0
   18bc8:	bne	18b94 <rb_radixtree_elem_find+0xcc>
   18bcc:	cmp	r9, #0
   18bd0:	beq	18bdc <rb_radixtree_elem_find+0x114>
   18bd4:	mov	r0, r9
   18bd8:	bl	4f98 <free@plt>
   18bdc:	mov	r0, r6
   18be0:	sub	sp, fp, #28
   18be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18be8:	cmp	r8, #0
   18bec:	beq	18c00 <rb_radixtree_elem_find+0x138>
   18bf0:	mov	r6, r4
   18bf4:	cmp	r9, #0
   18bf8:	bne	18bd4 <rb_radixtree_elem_find+0x10c>
   18bfc:	b	18bdc <rb_radixtree_elem_find+0x114>
   18c00:	ldr	r0, [r4, #8]
   18c04:	mov	r1, r7
   18c08:	bl	5520 <strcmp@plt>
   18c0c:	cmp	r0, #0
   18c10:	movne	r4, #0
   18c14:	mov	r6, r4
   18c18:	cmp	r9, #0
   18c1c:	bne	18bd4 <rb_radixtree_elem_find+0x10c>
   18c20:	b	18bdc <rb_radixtree_elem_find+0x114>
   18c24:	bl	51fc <rb_outofmemory@plt>

00018c28 <rb_radixtree_foreach_start_from>:
   18c28:	push	{r4, r5, fp, lr}
   18c2c:	add	fp, sp, #8
   18c30:	mov	r4, r1
   18c34:	mov	r5, r0
   18c38:	cmp	r2, #0
   18c3c:	beq	18c7c <rb_radixtree_foreach_start_from+0x54>
   18c40:	mov	r0, #0
   18c44:	mov	r1, r2
   18c48:	mov	r2, #1
   18c4c:	str	r0, [r4, #8]
   18c50:	mov	r0, r5
   18c54:	bl	53b8 <rb_radixtree_elem_find@plt>
   18c58:	cmp	r5, #0
   18c5c:	str	r0, [r4, #12]
   18c60:	popeq	{r4, r5, fp, pc}
   18c64:	ldr	r1, [r4, #8]
   18c68:	cmp	r1, #0
   18c6c:	strne	r0, [r4, #8]
   18c70:	cmpne	r0, #0
   18c74:	bne	18c8c <rb_radixtree_foreach_start_from+0x64>
   18c78:	pop	{r4, r5, fp, pc}
   18c7c:	mov	r0, r5
   18c80:	mov	r1, r4
   18c84:	pop	{r4, r5, fp, lr}
   18c88:	b	184fc <rb_radixtree_foreach_start>
   18c8c:	ldr	r1, [r0, #12]
   18c90:	cmp	r1, #0
   18c94:	beq	18d30 <rb_radixtree_foreach_start_from+0x108>
   18c98:	ldrb	r2, [r0, #16]
   18c9c:	b	18ca8 <rb_radixtree_foreach_start_from+0x80>
   18ca0:	mov	r2, #0
   18ca4:	mov	r1, r5
   18ca8:	mov	r3, r2
   18cac:	add	r2, r1, r3, lsl #2
   18cb0:	cmp	r3, #14
   18cb4:	ldr	r5, [r2, #4]
   18cb8:	add	r2, r3, #1
   18cbc:	bgt	18ccc <rb_radixtree_foreach_start_from+0xa4>
   18cc0:	cmp	r5, #0
   18cc4:	mov	r3, r2
   18cc8:	beq	18cac <rb_radixtree_foreach_start_from+0x84>
   18ccc:	cmp	r5, #0
   18cd0:	beq	18ce8 <rb_radixtree_foreach_start_from+0xc0>
   18cd4:	ldr	r3, [r5]
   18cd8:	cmn	r3, #1
   18cdc:	bne	18ca0 <rb_radixtree_foreach_start_from+0x78>
   18ce0:	cmp	r0, r5
   18ce4:	bne	18d1c <rb_radixtree_foreach_start_from+0xf4>
   18ce8:	sub	r3, r2, #1
   18cec:	cmp	r3, #15
   18cf0:	blt	18ca8 <rb_radixtree_foreach_start_from+0x80>
   18cf4:	ldr	r3, [r1, #68]	; 0x44
   18cf8:	cmp	r3, #0
   18cfc:	beq	18d30 <rb_radixtree_foreach_start_from+0x108>
   18d00:	ldrb	r2, [r1, #72]	; 0x48
   18d04:	mov	r1, r3
   18d08:	cmp	r2, #14
   18d0c:	bhi	18cf4 <rb_radixtree_foreach_start_from+0xcc>
   18d10:	add	r2, r2, #1
   18d14:	mov	r1, r3
   18d18:	b	18ca8 <rb_radixtree_foreach_start_from+0x80>
   18d1c:	ldr	r1, [r0, #8]
   18d20:	ldr	r0, [r5, #8]
   18d24:	bl	5520 <strcmp@plt>
   18d28:	cmn	r0, #1
   18d2c:	bgt	18d3c <rb_radixtree_foreach_start_from+0x114>
   18d30:	mov	r0, #0
   18d34:	str	r0, [r4, #12]
   18d38:	pop	{r4, r5, fp, pc}
   18d3c:	str	r5, [r4, #12]
   18d40:	pop	{r4, r5, fp, pc}

00018d44 <rb_radixtree_elem_add>:
   18d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d48:	add	fp, sp, #28
   18d4c:	sub	sp, sp, #28
   18d50:	mov	sl, r0
   18d54:	mov	r0, r1
   18d58:	mov	r4, r2
   18d5c:	mov	r5, r1
   18d60:	bl	507c <strlen@plt>
   18d64:	mov	r7, r0
   18d68:	add	r0, r0, #1
   18d6c:	bl	5214 <malloc@plt>
   18d70:	cmp	r0, #0
   18d74:	beq	19198 <rb_radixtree_elem_add+0x454>
   18d78:	mov	r1, r5
   18d7c:	str	r4, [sp, #20]
   18d80:	mov	r4, r0
   18d84:	bl	5124 <strcpy@plt>
   18d88:	ldr	r1, [sl]
   18d8c:	cmp	r1, #0
   18d90:	beq	18d9c <rb_radixtree_elem_add+0x58>
   18d94:	mov	r0, r4
   18d98:	blx	r1
   18d9c:	mov	r0, sl
   18da0:	str	r4, [sp, #24]
   18da4:	ldr	r6, [r0, #4]!
   18da8:	cmp	r6, #0
   18dac:	beq	18e24 <rb_radixtree_elem_add+0xe0>
   18db0:	ldr	r2, [r6]
   18db4:	str	r0, [sp, #8]
   18db8:	str	r6, [sp, #16]
   18dbc:	cmn	r2, #1
   18dc0:	beq	18e78 <rb_radixtree_elem_add+0x134>
   18dc4:	ldr	r1, [sp, #24]
   18dc8:	mov	r0, #4
   18dcc:	mov	r5, #15
   18dd0:	mov	r4, r6
   18dd4:	add	r3, r2, r2, lsr #31
   18dd8:	mov	r8, #0
   18ddc:	mov	r9, r4
   18de0:	cmp	r7, r3, asr #1
   18de4:	asrgt	r3, r3, #1
   18de8:	bicgt	r2, r0, r2, lsl #2
   18dec:	ldrbgt	r3, [r1, r3]
   18df0:	andgt	r8, r5, r3, lsr r2
   18df4:	add	r2, r9, r8, lsl #2
   18df8:	ldr	r4, [r2, #4]
   18dfc:	cmp	r4, #0
   18e00:	beq	18eac <rb_radixtree_elem_add+0x168>
   18e04:	ldr	r2, [r4]
   18e08:	cmn	r2, #1
   18e0c:	bne	18dd4 <rb_radixtree_elem_add+0x90>
   18e10:	ldr	r0, [r4, #8]
   18e14:	bl	5520 <strcmp@plt>
   18e18:	cmp	r0, #0
   18e1c:	bne	18f94 <rb_radixtree_elem_add+0x250>
   18e20:	b	18e98 <rb_radixtree_elem_add+0x154>
   18e24:	mov	r8, #18
   18e28:	mov	r9, #0
   18e2c:	mov	r0, #1
   18e30:	mov	r1, #20
   18e34:	bl	4ea8 <calloc@plt>
   18e38:	cmp	r0, #0
   18e3c:	mvnne	r1, #0
   18e40:	strne	r0, [sl, #4]
   18e44:	strne	r1, [r0]
   18e48:	ldrne	r1, [sp, #20]
   18e4c:	strne	r1, [r0, #4]
   18e50:	ldrne	r1, [sp, #24]
   18e54:	strne	r1, [r0, #8]
   18e58:	strne	r9, [r0, #12]
   18e5c:	strbne	r8, [r0, #16]
   18e60:	ldrne	r1, [sl, #8]
   18e64:	addne	r1, r1, #1
   18e68:	strne	r1, [sl, #8]
   18e6c:	subne	sp, fp, #28
   18e70:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e74:	bl	51fc <rb_outofmemory@plt>
   18e78:	ldr	r1, [sp, #24]
   18e7c:	mov	r9, #0
   18e80:	mov	r8, #18
   18e84:	mov	r4, r6
   18e88:	ldr	r0, [r4, #8]
   18e8c:	bl	5520 <strcmp@plt>
   18e90:	cmp	r0, #0
   18e94:	bne	18f94 <rb_radixtree_elem_add+0x250>
   18e98:	ldr	r0, [sp, #24]
   18e9c:	bl	4f98 <free@plt>
   18ea0:	mov	r0, #0
   18ea4:	sub	sp, fp, #28
   18ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18eac:	ldr	r0, [r9]
   18eb0:	mov	r4, r9
   18eb4:	cmn	r0, #1
   18eb8:	beq	18f94 <rb_radixtree_elem_add+0x250>
   18ebc:	mov	r0, r4
   18ec0:	ldr	r4, [r4, #4]
   18ec4:	cmp	r4, #0
   18ec8:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18ecc:	ldr	r4, [r0, #8]
   18ed0:	cmp	r4, #0
   18ed4:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18ed8:	ldr	r4, [r0, #12]
   18edc:	cmp	r4, #0
   18ee0:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18ee4:	ldr	r4, [r0, #16]
   18ee8:	cmp	r4, #0
   18eec:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18ef0:	ldr	r4, [r0, #20]
   18ef4:	cmp	r4, #0
   18ef8:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18efc:	ldr	r4, [r0, #24]
   18f00:	cmp	r4, #0
   18f04:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f08:	ldr	r4, [r0, #28]
   18f0c:	cmp	r4, #0
   18f10:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f14:	ldr	r4, [r0, #32]
   18f18:	cmp	r4, #0
   18f1c:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f20:	ldr	r4, [r0, #36]	; 0x24
   18f24:	cmp	r4, #0
   18f28:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f2c:	ldr	r4, [r0, #40]	; 0x28
   18f30:	cmp	r4, #0
   18f34:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f38:	ldr	r4, [r0, #44]	; 0x2c
   18f3c:	cmp	r4, #0
   18f40:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f44:	ldr	r4, [r0, #48]	; 0x30
   18f48:	cmp	r4, #0
   18f4c:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f50:	ldr	r4, [r0, #52]	; 0x34
   18f54:	cmp	r4, #0
   18f58:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f5c:	ldr	r4, [r0, #56]	; 0x38
   18f60:	cmp	r4, #0
   18f64:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f68:	ldr	r4, [r0, #60]	; 0x3c
   18f6c:	cmp	r4, #0
   18f70:	bne	18f80 <rb_radixtree_elem_add+0x23c>
   18f74:	ldr	r4, [r0, #64]	; 0x40
   18f78:	cmp	r4, #0
   18f7c:	moveq	r4, r0
   18f80:	ldr	r0, [r4]
   18f84:	cmn	r0, #1
   18f88:	bne	18ebc <rb_radixtree_elem_add+0x178>
   18f8c:	cmp	r4, #0
   18f90:	beq	18e2c <rb_radixtree_elem_add+0xe8>
   18f94:	ldr	r0, [r4, #8]
   18f98:	ldr	ip, [sp, #24]
   18f9c:	mvn	r5, #0
   18fa0:	mov	r1, #0
   18fa4:	mov	r2, #4
   18fa8:	mov	r3, #15
   18fac:	str	sl, [sp, #12]
   18fb0:	add	r5, r5, #1
   18fb4:	bic	sl, r2, r1
   18fb8:	add	r1, r1, #4
   18fbc:	ldrb	r7, [ip, r5, lsr #1]
   18fc0:	ldrb	r6, [r0, r5, lsr #1]
   18fc4:	eor	r7, r6, r7
   18fc8:	tst	r7, r3, lsl sl
   18fcc:	beq	18fb0 <rb_radixtree_elem_add+0x26c>
   18fd0:	lsr	lr, r5, #1
   18fd4:	mov	r6, #1
   18fd8:	cmp	r9, #0
   18fdc:	beq	19024 <rb_radixtree_elem_add+0x2e0>
   18fe0:	ldr	r0, [r9]
   18fe4:	cmp	r0, r5
   18fe8:	ble	1900c <rb_radixtree_elem_add+0x2c8>
   18fec:	mov	r1, r9
   18ff0:	ldr	r9, [r9, #68]	; 0x44
   18ff4:	cmp	r9, #0
   18ff8:	beq	19020 <rb_radixtree_elem_add+0x2dc>
   18ffc:	ldr	r0, [r9]
   19000:	cmp	r0, r5
   19004:	bgt	18fec <rb_radixtree_elem_add+0x2a8>
   19008:	ldrb	r8, [r1, #72]	; 0x48
   1900c:	mov	r6, #0
   19010:	cmp	r0, r5
   19014:	mov	r7, r9
   19018:	blt	19028 <rb_radixtree_elem_add+0x2e4>
   1901c:	b	19128 <rb_radixtree_elem_add+0x3e4>
   19020:	ldrb	r8, [r1, #72]	; 0x48
   19024:	mov	r9, #0
   19028:	mov	r0, #1
   1902c:	mov	r1, #76	; 0x4c
   19030:	str	lr, [sp, #4]
   19034:	bl	4ea8 <calloc@plt>
   19038:	cmp	r0, #0
   1903c:	beq	19198 <rb_radixtree_elem_add+0x454>
   19040:	ldr	r3, [sp, #16]
   19044:	ldr	lr, [sp, #4]
   19048:	mov	r7, r0
   1904c:	str	r9, [r0, #68]	; 0x44
   19050:	str	r5, [r0]
   19054:	strb	r8, [r0, #72]	; 0x48
   19058:	vmov.i32	q8, #0	; 0x00000000
   1905c:	add	r0, r0, #52	; 0x34
   19060:	cmp	r6, #0
   19064:	vst1.32	{d16-d17}, [r0]
   19068:	add	r0, r7, #36	; 0x24
   1906c:	add	r1, r7, #4
   19070:	vst1.32	{d16-d17}, [r0]
   19074:	add	r0, r7, #20
   19078:	vst1.32	{d16-d17}, [r1]
   1907c:	vst1.32	{d16-d17}, [r0]
   19080:	beq	190b4 <rb_radixtree_elem_add+0x370>
   19084:	ldr	r0, [r4, #8]
   19088:	ldr	ip, [sp, #24]
   1908c:	ldrb	r2, [r0, lr]
   19090:	mov	r0, #15
   19094:	and	r2, r0, r2, lsr sl
   19098:	str	r3, [r1, r2, lsl #2]
   1909c:	ldr	r1, [r3]
   190a0:	cmn	r1, #1
   190a4:	beq	19100 <rb_radixtree_elem_add+0x3bc>
   190a8:	str	r7, [r3, #68]	; 0x44
   190ac:	ldr	r6, [sp, #8]
   190b0:	b	190e8 <rb_radixtree_elem_add+0x3a4>
   190b4:	ldr	r0, [r4, #8]
   190b8:	add	r6, r9, r8, lsl #2
   190bc:	ldr	ip, [sp, #24]
   190c0:	ldr	r3, [r6, #4]!
   190c4:	ldrb	r2, [r0, lr]
   190c8:	mov	r0, #15
   190cc:	and	r2, r0, r2, lsr sl
   190d0:	str	r3, [r1, r2, lsl #2]
   190d4:	ldr	r1, [r6]
   190d8:	ldr	r2, [r1]
   190dc:	cmn	r2, #1
   190e0:	beq	1910c <rb_radixtree_elem_add+0x3c8>
   190e4:	str	r7, [r1, #68]	; 0x44
   190e8:	ldr	r1, [r4, #8]
   190ec:	ldrb	r1, [r1, lr]
   190f0:	and	r0, r0, r1, lsr sl
   190f4:	ldr	r1, [r6]
   190f8:	strb	r0, [r1, #72]	; 0x48
   190fc:	b	19124 <rb_radixtree_elem_add+0x3e0>
   19100:	str	r7, [r3, #12]
   19104:	ldr	r6, [sp, #8]
   19108:	b	19110 <rb_radixtree_elem_add+0x3cc>
   1910c:	str	r7, [r1, #12]
   19110:	ldr	r1, [r4, #8]
   19114:	ldrb	r1, [r1, lr]
   19118:	and	r0, r0, r1, lsr sl
   1911c:	ldr	r1, [r6]
   19120:	strb	r0, [r1, #16]
   19124:	str	r7, [r6]
   19128:	ldrb	r4, [ip, lr]
   1912c:	mov	r0, #1
   19130:	mov	r1, #20
   19134:	mov	r5, ip
   19138:	bl	4ea8 <calloc@plt>
   1913c:	cmp	r0, #0
   19140:	movne	r1, #15
   19144:	mvnne	r3, #0
   19148:	andne	r1, r1, r4, lsr sl
   1914c:	addne	r2, r7, r1, lsl #2
   19150:	strne	r0, [r2, #4]!
   19154:	strne	r3, [r0]
   19158:	ldrne	r0, [r2]
   1915c:	ldrne	r3, [sp, #20]
   19160:	strne	r3, [r0, #4]
   19164:	ldrne	r0, [r2]
   19168:	strne	r5, [r0, #8]
   1916c:	ldrne	r0, [r2]
   19170:	strne	r7, [r0, #12]
   19174:	ldrne	r0, [r2]
   19178:	strbne	r1, [r0, #16]
   1917c:	ldrne	r1, [sp, #12]
   19180:	ldrne	r0, [r1, #8]
   19184:	addne	r0, r0, #1
   19188:	strne	r0, [r1, #8]
   1918c:	ldrne	r0, [r2]
   19190:	subne	sp, fp, #28
   19194:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19198:	bl	51fc <rb_outofmemory@plt>

0001919c <rb_radixtree_add>:
   1919c:	push	{fp, lr}
   191a0:	mov	fp, sp
   191a4:	bl	4fbc <rb_radixtree_elem_add@plt>
   191a8:	cmp	r0, #0
   191ac:	movwne	r0, #1
   191b0:	pop	{fp, pc}

000191b4 <rb_radixtree_elem_delete>:
   191b4:	push	{r4, r5, r6, r7, fp, lr}
   191b8:	add	fp, sp, #16
   191bc:	mov	r4, r0
   191c0:	ldr	r0, [r1, #8]
   191c4:	ldr	r5, [r1, #12]
   191c8:	ldrb	r7, [r1, #16]
   191cc:	mov	r6, r1
   191d0:	cmp	r0, #0
   191d4:	beq	191dc <rb_radixtree_elem_delete+0x28>
   191d8:	bl	4f98 <free@plt>
   191dc:	mov	r0, r6
   191e0:	bl	4f98 <free@plt>
   191e4:	cmp	r5, #0
   191e8:	beq	193a0 <rb_radixtree_elem_delete+0x1ec>
   191ec:	add	r0, r5, #4
   191f0:	mov	r1, #0
   191f4:	mvn	r6, #1
   191f8:	str	r1, [r0, r7, lsl #2]
   191fc:	ldmib	r5, {r0, r2, r3, r7}
   19200:	cmp	r0, #0
   19204:	mvn	r0, #1
   19208:	mvneq	r1, #0
   1920c:	movweq	r6, #1
   19210:	cmp	r2, #0
   19214:	mvn	r2, #1
   19218:	moveq	r6, r1
   1921c:	mvn	r1, #1
   19220:	cmn	r6, #1
   19224:	movweq	r1, #2
   19228:	cmp	r3, #0
   1922c:	ldr	r3, [r5, #20]
   19230:	moveq	r1, r6
   19234:	cmn	r1, #1
   19238:	movweq	r2, #3
   1923c:	cmp	r7, #0
   19240:	moveq	r2, r1
   19244:	mvn	r1, #1
   19248:	cmn	r2, #1
   1924c:	movweq	r1, #4
   19250:	cmp	r3, #0
   19254:	ldr	r3, [r5, #24]
   19258:	moveq	r1, r2
   1925c:	mvn	r2, #1
   19260:	cmn	r1, #1
   19264:	movweq	r2, #5
   19268:	cmp	r3, #0
   1926c:	ldr	r3, [r5, #28]
   19270:	moveq	r2, r1
   19274:	mvn	r1, #1
   19278:	cmn	r2, #1
   1927c:	movweq	r1, #6
   19280:	cmp	r3, #0
   19284:	ldr	r3, [r5, #32]
   19288:	moveq	r1, r2
   1928c:	mvn	r2, #1
   19290:	cmn	r1, #1
   19294:	movweq	r2, #7
   19298:	cmp	r3, #0
   1929c:	ldr	r3, [r5, #36]	; 0x24
   192a0:	moveq	r2, r1
   192a4:	mvn	r1, #1
   192a8:	cmn	r2, #1
   192ac:	movweq	r1, #8
   192b0:	cmp	r3, #0
   192b4:	ldr	r3, [r5, #40]	; 0x28
   192b8:	moveq	r1, r2
   192bc:	mvn	r2, #1
   192c0:	cmn	r1, #1
   192c4:	movweq	r2, #9
   192c8:	cmp	r3, #0
   192cc:	ldr	r3, [r5, #44]	; 0x2c
   192d0:	moveq	r2, r1
   192d4:	mvn	r1, #1
   192d8:	cmn	r2, #1
   192dc:	movweq	r1, #10
   192e0:	cmp	r3, #0
   192e4:	ldr	r3, [r5, #48]	; 0x30
   192e8:	moveq	r1, r2
   192ec:	mvn	r2, #1
   192f0:	cmn	r1, #1
   192f4:	movweq	r2, #11
   192f8:	cmp	r3, #0
   192fc:	ldr	r3, [r5, #52]	; 0x34
   19300:	moveq	r2, r1
   19304:	mvn	r1, #1
   19308:	cmn	r2, #1
   1930c:	movweq	r1, #12
   19310:	cmp	r3, #0
   19314:	ldr	r3, [r5, #56]	; 0x38
   19318:	moveq	r1, r2
   1931c:	mvn	r2, #1
   19320:	cmn	r1, #1
   19324:	movweq	r2, #13
   19328:	cmp	r3, #0
   1932c:	ldr	r3, [r5, #60]	; 0x3c
   19330:	moveq	r2, r1
   19334:	mvn	r1, #1
   19338:	cmn	r2, #1
   1933c:	movweq	r1, #14
   19340:	cmp	r3, #0
   19344:	moveq	r1, r2
   19348:	ldr	r2, [r5, #64]	; 0x40
   1934c:	cmn	r1, #1
   19350:	movweq	r0, #15
   19354:	cmp	r2, #0
   19358:	moveq	r0, r1
   1935c:	cmp	r0, #0
   19360:	blt	193c0 <rb_radixtree_elem_delete+0x20c>
   19364:	ldr	r2, [r5, #68]	; 0x44
   19368:	ldrb	r1, [r5, #72]	; 0x48
   1936c:	add	r0, r5, r0, lsl #2
   19370:	ldr	r0, [r0, #4]
   19374:	add	r3, r2, r1, lsl #2
   19378:	cmp	r2, #0
   1937c:	add	r3, r3, #4
   19380:	addeq	r3, r4, #4
   19384:	str	r0, [r3]
   19388:	ldr	r3, [r0]
   1938c:	cmn	r3, #1
   19390:	beq	193ac <rb_radixtree_elem_delete+0x1f8>
   19394:	str	r2, [r0, #68]	; 0x44
   19398:	add	r0, r0, #72	; 0x48
   1939c:	b	193b4 <rb_radixtree_elem_delete+0x200>
   193a0:	mov	r0, #0
   193a4:	str	r0, [r4, #4]
   193a8:	b	193c0 <rb_radixtree_elem_delete+0x20c>
   193ac:	str	r2, [r0, #12]
   193b0:	add	r0, r0, #16
   193b4:	strb	r1, [r0]
   193b8:	mov	r0, r5
   193bc:	bl	4f98 <free@plt>
   193c0:	ldr	r0, [r4, #8]
   193c4:	subs	r0, r0, #1
   193c8:	str	r0, [r4, #8]
   193cc:	moveq	r0, #0
   193d0:	streq	r0, [r4, #4]
   193d4:	pop	{r4, r5, r6, r7, fp, pc}

000193d8 <rb_radixtree_retrieve>:
   193d8:	push	{r4, sl, fp, lr}
   193dc:	add	fp, sp, #8
   193e0:	mov	r2, #0
   193e4:	mov	r4, #0
   193e8:	bl	53b8 <rb_radixtree_elem_find@plt>
   193ec:	cmp	r0, #0
   193f0:	ldrne	r4, [r0, #4]
   193f4:	mov	r0, r4
   193f8:	pop	{r4, sl, fp, pc}

000193fc <rb_radixtree_elem_get_key>:
   193fc:	ldr	r0, [r0, #8]
   19400:	bx	lr

00019404 <rb_radixtree_elem_set_data>:
   19404:	str	r1, [r0, #4]
   19408:	bx	lr

0001940c <rb_radixtree_elem_get_data>:
   1940c:	ldr	r0, [r0, #4]
   19410:	bx	lr

00019414 <rb_radixtree_size>:
   19414:	ldr	r0, [r0, #8]
   19418:	bx	lr

0001941c <rb_radixtree_stats>:
   1941c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19420:	add	fp, sp, #24
   19424:	sub	sp, sp, #280	; 0x118
   19428:	mov	r6, r0
   1942c:	mov	r0, #0
   19430:	mov	r5, r2
   19434:	mov	r7, r1
   19438:	str	r0, [sp, #20]
   1943c:	ldr	r0, [r6, #8]
   19440:	cmp	r0, #0
   19444:	beq	19494 <rb_radixtree_stats+0x78>
   19448:	ldr	r0, [r6, #4]
   1944c:	add	r2, sp, #20
   19450:	mov	r1, #0
   19454:	bl	194f8 <stats_recurse>
   19458:	ldr	r1, [r6, #8]
   1945c:	ldr	r3, [r6, #12]
   19460:	ldr	r2, [sp, #20]
   19464:	ldr	r6, [pc, #120]	; 194e4 <rb_radixtree_stats+0xc8>
   19468:	str	r0, [sp, #8]
   1946c:	udiv	r4, r0, r1
   19470:	add	r6, pc, r6
   19474:	str	r1, [sp, #4]
   19478:	str	r2, [sp, #16]
   1947c:	add	r0, sp, #24
   19480:	str	r6, [sp]
   19484:	str	r4, [sp, #12]
   19488:	ldr	r2, [pc, #88]	; 194e8 <rb_radixtree_stats+0xcc>
   1948c:	add	r2, pc, r2
   19490:	b	194c8 <rb_radixtree_stats+0xac>
   19494:	ldr	r3, [r6, #12]
   19498:	ldr	r0, [pc, #76]	; 194ec <rb_radixtree_stats+0xd0>
   1949c:	ldr	r1, [pc, #76]	; 194f0 <rb_radixtree_stats+0xd4>
   194a0:	add	r0, pc, r0
   194a4:	add	r1, pc, r1
   194a8:	str	r1, [sp]
   194ac:	str	r0, [sp, #4]
   194b0:	str	r0, [sp, #8]
   194b4:	str	r0, [sp, #12]
   194b8:	str	r0, [sp, #16]
   194bc:	add	r0, sp, #24
   194c0:	ldr	r2, [pc, #44]	; 194f4 <rb_radixtree_stats+0xd8>
   194c4:	add	r2, pc, r2
   194c8:	mov	r1, #256	; 0x100
   194cc:	bl	53f4 <snprintf@plt>
   194d0:	add	r0, sp, #24
   194d4:	mov	r1, r5
   194d8:	blx	r7
   194dc:	sub	sp, fp, #24
   194e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   194e4:	.word	0x00001df9
   194e8:	.word	0x00001d90
   194ec:	.word	0x00000f77
   194f0:	.word	0x00001dc5
   194f4:	.word	0x00001d81

000194f8 <stats_recurse>:
   194f8:	push	{r4, r5, r6, r7, fp, lr}
   194fc:	add	fp, sp, #16
   19500:	mov	r6, r0
   19504:	ldr	r0, [r2]
   19508:	mov	r5, r2
   1950c:	mov	r4, r1
   19510:	cmp	r0, r1
   19514:	strlt	r4, [r5]
   19518:	ldr	r0, [r6]
   1951c:	cmn	r0, #1
   19520:	beq	196e8 <stats_recurse+0x1f0>
   19524:	ldr	r0, [r6, #4]
   19528:	add	r7, r4, #1
   1952c:	cmp	r0, #0
   19530:	beq	196f0 <stats_recurse+0x1f8>
   19534:	mov	r1, r7
   19538:	mov	r2, r5
   1953c:	bl	194f8 <stats_recurse>
   19540:	mov	r4, r0
   19544:	ldr	r0, [r6, #8]
   19548:	cmp	r0, #0
   1954c:	beq	19560 <stats_recurse+0x68>
   19550:	mov	r1, r7
   19554:	mov	r2, r5
   19558:	bl	194f8 <stats_recurse>
   1955c:	add	r4, r0, r4
   19560:	ldr	r0, [r6, #12]
   19564:	cmp	r0, #0
   19568:	beq	1957c <stats_recurse+0x84>
   1956c:	mov	r1, r7
   19570:	mov	r2, r5
   19574:	bl	194f8 <stats_recurse>
   19578:	add	r4, r0, r4
   1957c:	ldr	r0, [r6, #16]
   19580:	cmp	r0, #0
   19584:	beq	19598 <stats_recurse+0xa0>
   19588:	mov	r1, r7
   1958c:	mov	r2, r5
   19590:	bl	194f8 <stats_recurse>
   19594:	add	r4, r0, r4
   19598:	ldr	r0, [r6, #20]
   1959c:	cmp	r0, #0
   195a0:	beq	195b4 <stats_recurse+0xbc>
   195a4:	mov	r1, r7
   195a8:	mov	r2, r5
   195ac:	bl	194f8 <stats_recurse>
   195b0:	add	r4, r0, r4
   195b4:	ldr	r0, [r6, #24]
   195b8:	cmp	r0, #0
   195bc:	beq	195d0 <stats_recurse+0xd8>
   195c0:	mov	r1, r7
   195c4:	mov	r2, r5
   195c8:	bl	194f8 <stats_recurse>
   195cc:	add	r4, r0, r4
   195d0:	ldr	r0, [r6, #28]
   195d4:	cmp	r0, #0
   195d8:	beq	195ec <stats_recurse+0xf4>
   195dc:	mov	r1, r7
   195e0:	mov	r2, r5
   195e4:	bl	194f8 <stats_recurse>
   195e8:	add	r4, r0, r4
   195ec:	ldr	r0, [r6, #32]
   195f0:	cmp	r0, #0
   195f4:	beq	19608 <stats_recurse+0x110>
   195f8:	mov	r1, r7
   195fc:	mov	r2, r5
   19600:	bl	194f8 <stats_recurse>
   19604:	add	r4, r0, r4
   19608:	ldr	r0, [r6, #36]	; 0x24
   1960c:	cmp	r0, #0
   19610:	beq	19624 <stats_recurse+0x12c>
   19614:	mov	r1, r7
   19618:	mov	r2, r5
   1961c:	bl	194f8 <stats_recurse>
   19620:	add	r4, r0, r4
   19624:	ldr	r0, [r6, #40]	; 0x28
   19628:	cmp	r0, #0
   1962c:	beq	19640 <stats_recurse+0x148>
   19630:	mov	r1, r7
   19634:	mov	r2, r5
   19638:	bl	194f8 <stats_recurse>
   1963c:	add	r4, r0, r4
   19640:	ldr	r0, [r6, #44]	; 0x2c
   19644:	cmp	r0, #0
   19648:	beq	1965c <stats_recurse+0x164>
   1964c:	mov	r1, r7
   19650:	mov	r2, r5
   19654:	bl	194f8 <stats_recurse>
   19658:	add	r4, r0, r4
   1965c:	ldr	r0, [r6, #48]	; 0x30
   19660:	cmp	r0, #0
   19664:	beq	19678 <stats_recurse+0x180>
   19668:	mov	r1, r7
   1966c:	mov	r2, r5
   19670:	bl	194f8 <stats_recurse>
   19674:	add	r4, r0, r4
   19678:	ldr	r0, [r6, #52]	; 0x34
   1967c:	cmp	r0, #0
   19680:	beq	19694 <stats_recurse+0x19c>
   19684:	mov	r1, r7
   19688:	mov	r2, r5
   1968c:	bl	194f8 <stats_recurse>
   19690:	add	r4, r0, r4
   19694:	ldr	r0, [r6, #56]	; 0x38
   19698:	cmp	r0, #0
   1969c:	beq	196b0 <stats_recurse+0x1b8>
   196a0:	mov	r1, r7
   196a4:	mov	r2, r5
   196a8:	bl	194f8 <stats_recurse>
   196ac:	add	r4, r0, r4
   196b0:	ldr	r0, [r6, #60]	; 0x3c
   196b4:	cmp	r0, #0
   196b8:	beq	196cc <stats_recurse+0x1d4>
   196bc:	mov	r1, r7
   196c0:	mov	r2, r5
   196c4:	bl	194f8 <stats_recurse>
   196c8:	add	r4, r0, r4
   196cc:	ldr	r0, [r6, #64]	; 0x40
   196d0:	cmp	r0, #0
   196d4:	beq	196e8 <stats_recurse+0x1f0>
   196d8:	mov	r1, r7
   196dc:	mov	r2, r5
   196e0:	bl	194f8 <stats_recurse>
   196e4:	add	r4, r0, r4
   196e8:	mov	r0, r4
   196ec:	pop	{r4, r5, r6, r7, fp, pc}
   196f0:	mov	r4, #0
   196f4:	ldr	r0, [r6, #8]
   196f8:	cmp	r0, #0
   196fc:	bne	19550 <stats_recurse+0x58>
   19700:	b	19560 <stats_recurse+0x68>

00019704 <rb_radixtree_stats_walk>:
   19704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19708:	add	fp, sp, #28
   1970c:	sub	sp, sp, #284	; 0x11c
   19710:	mov	r9, r0
   19714:	ldr	r0, [pc, #216]	; 197f4 <rb_radixtree_stats_walk+0xf0>
   19718:	ldr	r0, [pc, r0]
   1971c:	ldr	r7, [r0]
   19720:	cmp	r7, #0
   19724:	beq	197ec <rb_radixtree_stats_walk+0xe8>
   19728:	ldr	r5, [pc, #200]	; 197f8 <rb_radixtree_stats_walk+0xf4>
   1972c:	mov	sl, r1
   19730:	add	r6, sp, #24
   19734:	add	r5, pc, r5
   19738:	ldr	r8, [r7]
   1973c:	mov	r0, #0
   19740:	str	r0, [sp, #20]
   19744:	ldr	r0, [r8, #8]
   19748:	cmp	r0, #0
   1974c:	beq	19798 <rb_radixtree_stats_walk+0x94>
   19750:	ldr	r0, [r8, #4]
   19754:	mov	r1, #0
   19758:	add	r2, sp, #20
   1975c:	bl	194f8 <stats_recurse>
   19760:	ldr	r1, [r8, #8]
   19764:	ldr	r2, [sp, #20]
   19768:	ldr	r3, [r8, #12]
   1976c:	str	r5, [sp]
   19770:	str	r0, [sp, #8]
   19774:	udiv	r4, r0, r1
   19778:	str	r1, [sp, #4]
   1977c:	str	r2, [sp, #16]
   19780:	mov	r0, r6
   19784:	mov	r1, #256	; 0x100
   19788:	str	r4, [sp, #12]
   1978c:	ldr	r2, [pc, #104]	; 197fc <rb_radixtree_stats_walk+0xf8>
   19790:	add	r2, pc, r2
   19794:	b	197d0 <rb_radixtree_stats_walk+0xcc>
   19798:	ldr	r3, [r8, #12]
   1979c:	ldr	r0, [pc, #92]	; 19800 <rb_radixtree_stats_walk+0xfc>
   197a0:	mov	r1, #256	; 0x100
   197a4:	add	r0, pc, r0
   197a8:	str	r0, [sp]
   197ac:	ldr	r0, [pc, #80]	; 19804 <rb_radixtree_stats_walk+0x100>
   197b0:	add	r0, pc, r0
   197b4:	str	r0, [sp, #4]
   197b8:	str	r0, [sp, #8]
   197bc:	str	r0, [sp, #12]
   197c0:	str	r0, [sp, #16]
   197c4:	mov	r0, r6
   197c8:	ldr	r2, [pc, #56]	; 19808 <rb_radixtree_stats_walk+0x104>
   197cc:	add	r2, pc, r2
   197d0:	bl	53f4 <snprintf@plt>
   197d4:	mov	r0, r6
   197d8:	mov	r1, sl
   197dc:	blx	r9
   197e0:	ldr	r7, [r7, #8]
   197e4:	cmp	r7, #0
   197e8:	bne	19738 <rb_radixtree_stats_walk+0x34>
   197ec:	sub	sp, fp, #28
   197f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197f4:	.word	0x00012c9c
   197f8:	.word	0x00001b35
   197fc:	.word	0x00001a8c
   19800:	.word	0x00001ac5
   19804:	.word	0x00000c67
   19808:	.word	0x00001a79

Disassembly of section .fini:

0001980c <_fini>:
   1980c:	push	{r3, lr}
   19810:	pop	{r3, pc}
