
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	114d4 <__assert_fail@plt+0x3d0>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <fdopen@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <fdopen@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	r7, r1, r4, asr #3

00010e40 <fdopen@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <calloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <fputs_unlocked@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <raise@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <strcmp@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <posix_fadvise64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <fflush@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <memmove@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <free@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <_exit@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <memcpy@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <__strtoull_internal@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <memcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <fputc_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <__memcpy_chk@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <fwrite@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <lseek64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <__ctype_get_mb_cur_max@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <__fpending@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <mbrtowc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <error@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <getenv@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <malloc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__libc_start_main@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <__freading@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <__gmon_start__@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <getopt_long@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <__ctype_b_loc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <exit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <strlen@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <strchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <__sprintf_chk@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <__cxa_atexit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <setvbuf@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <memset@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <__printf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <fileno@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <__fprintf_chk@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <fclose@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <fseeko64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <fcntl64@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <__overflow@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <localeconv@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <fopen64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #28]!

000110c8 <bindtextdomain@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #94208	; 0x17000
   110d0:	ldr	pc, [ip, #20]!

000110d4 <fread_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #94208	; 0x17000
   110dc:	ldr	pc, [ip, #12]!

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #94208	; 0x17000
   110e8:	ldr	pc, [ip, #4]!

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4092]!	; 0xffc

000110f8 <close@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4084]!	; 0xff4

00011104 <__assert_fail@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4076]!	; 0xfec

Disassembly of section .text:

00011110 <.text>:
   11110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11114:	mov	r5, r0
   11118:	sub	sp, sp, #44	; 0x2c
   1111c:	ldr	r0, [r1]
   11120:	mov	r4, r1
   11124:	bl	12cc8 <__assert_fail@plt+0x1bc4>
   11128:	ldr	r1, [pc, #792]	; 11448 <__assert_fail@plt+0x344>
   1112c:	mov	r0, #6
   11130:	bl	11080 <setlocale@plt>
   11134:	ldr	r1, [pc, #784]	; 1144c <__assert_fail@plt+0x348>
   11138:	ldr	r0, [pc, #784]	; 11450 <__assert_fail@plt+0x34c>
   1113c:	bl	110c8 <bindtextdomain@plt>
   11140:	ldr	r9, [pc, #780]	; 11454 <__assert_fail@plt+0x350>
   11144:	ldr	r0, [pc, #772]	; 11450 <__assert_fail@plt+0x34c>
   11148:	bl	10f0c <textdomain@plt>
   1114c:	ldr	r0, [pc, #772]	; 11458 <__assert_fail@plt+0x354>
   11150:	bl	16f44 <__assert_fail@plt+0x5e40>
   11154:	mov	r3, #0
   11158:	ldr	r0, [r9]
   1115c:	mov	r1, r3
   11160:	mov	r2, #1
   11164:	bl	11014 <setvbuf@plt>
   11168:	ldr	r8, [pc, #748]	; 1145c <__assert_fail@plt+0x358>
   1116c:	ldr	r7, [pc, #748]	; 11460 <__assert_fail@plt+0x35c>
   11170:	ldr	sl, [pc, #748]	; 11464 <__assert_fail@plt+0x360>
   11174:	mov	r6, #0
   11178:	mov	fp, #1
   1117c:	str	r6, [sp]
   11180:	mov	r3, r8
   11184:	mov	r2, r7
   11188:	mov	r1, r4
   1118c:	mov	r0, r5
   11190:	bl	10fb4 <getopt_long@plt>
   11194:	cmn	r0, #1
   11198:	beq	11214 <__assert_fail@plt+0x110>
   1119c:	cmn	r0, #2
   111a0:	beq	1120c <__assert_fail@plt+0x108>
   111a4:	ble	111c8 <__assert_fail@plt+0xc4>
   111a8:	cmp	r0, #114	; 0x72
   111ac:	beq	111c0 <__assert_fail@plt+0xbc>
   111b0:	cmp	r0, #115	; 0x73
   111b4:	bne	11204 <__assert_fail@plt+0x100>
   111b8:	str	fp, [sl]
   111bc:	b	1117c <__assert_fail@plt+0x78>
   111c0:	str	r6, [sl]
   111c4:	b	1117c <__assert_fail@plt+0x78>
   111c8:	cmn	r0, #3
   111cc:	bne	11204 <__assert_fail@plt+0x100>
   111d0:	ldr	r3, [pc, #656]	; 11468 <__assert_fail@plt+0x364>
   111d4:	ldr	r1, [pc, #656]	; 1146c <__assert_fail@plt+0x368>
   111d8:	ldr	r2, [pc, #656]	; 11470 <__assert_fail@plt+0x36c>
   111dc:	str	r6, [sp, #8]
   111e0:	ldr	r0, [r9]
   111e4:	ldr	r3, [r3]
   111e8:	str	r1, [sp, #4]
   111ec:	str	r2, [sp]
   111f0:	ldr	r1, [pc, #636]	; 11474 <__assert_fail@plt+0x370>
   111f4:	ldr	r2, [pc, #636]	; 11478 <__assert_fail@plt+0x374>
   111f8:	bl	14fd0 <__assert_fail@plt+0x3ecc>
   111fc:	mov	r0, #0
   11200:	bl	10fcc <exit@plt>
   11204:	mov	r0, #1
   11208:	bl	119e0 <__assert_fail@plt+0x8dc>
   1120c:	mov	r0, #0
   11210:	bl	119e0 <__assert_fail@plt+0x8dc>
   11214:	ldr	r3, [pc, #608]	; 1147c <__assert_fail@plt+0x378>
   11218:	add	fp, r4, r5, lsl #2
   1121c:	ldr	r8, [pc, #576]	; 11464 <__assert_fail@plt+0x360>
   11220:	ldr	r3, [r3]
   11224:	ldr	r9, [pc, #596]	; 11480 <__assert_fail@plt+0x37c>
   11228:	cmp	r5, r3
   1122c:	addeq	fp, fp, #4
   11230:	ldreq	r2, [pc, #588]	; 11484 <__assert_fail@plt+0x380>
   11234:	streq	r2, [r4, r5, lsl #2]
   11238:	add	r4, r4, r3, lsl #2
   1123c:	mov	r3, #1
   11240:	str	r3, [sp, #20]
   11244:	cmp	fp, r4
   11248:	bls	113bc <__assert_fail@plt+0x2b8>
   1124c:	ldr	r6, [r4], #4
   11250:	ldr	r1, [pc, #556]	; 11484 <__assert_fail@plt+0x380>
   11254:	mov	r0, r6
   11258:	bl	10e70 <strcmp@plt>
   1125c:	cmp	r0, #0
   11260:	bne	112f4 <__assert_fail@plt+0x1f0>
   11264:	ldr	r3, [pc, #540]	; 11488 <__assert_fail@plt+0x384>
   11268:	mov	r1, #2
   1126c:	ldr	r7, [r3]
   11270:	mov	r3, #1
   11274:	mov	r0, r7
   11278:	strb	r3, [r8, #4]
   1127c:	bl	11e00 <__assert_fail@plt+0xcfc>
   11280:	ldr	r3, [r8]
   11284:	mov	r0, r7
   11288:	add	r2, sp, #32
   1128c:	add	r3, r9, r3, lsl #2
   11290:	add	r1, sp, #24
   11294:	ldr	r3, [r3, #120]	; 0x78
   11298:	blx	r3
   1129c:	cmp	r0, #0
   112a0:	bne	11384 <__assert_fail@plt+0x280>
   112a4:	mov	r0, r7
   112a8:	bl	110b0 <clearerr_unlocked@plt>
   112ac:	ldr	r3, [pc, #456]	; 1147c <__assert_fail@plt+0x378>
   112b0:	ldr	r1, [r8]
   112b4:	mov	r0, #10
   112b8:	ldr	r2, [r3]
   112bc:	str	r0, [sp]
   112c0:	mov	r0, r6
   112c4:	ldrd	r6, [sp, #32]
   112c8:	subs	r2, r2, r5
   112cc:	add	r1, r9, r1, lsl #2
   112d0:	movne	r2, #1
   112d4:	mov	r3, #0
   112d8:	ldr	ip, [r1, #128]	; 0x80
   112dc:	str	r2, [sp, #4]
   112e0:	strd	r6, [sp, #8]
   112e4:	mov	r1, r3
   112e8:	add	r2, sp, #24
   112ec:	blx	ip
   112f0:	b	11244 <__assert_fail@plt+0x140>
   112f4:	ldr	r1, [pc, #400]	; 1148c <__assert_fail@plt+0x388>
   112f8:	mov	r0, r6
   112fc:	bl	11f34 <__assert_fail@plt+0xe30>
   11300:	subs	r7, r0, #0
   11304:	beq	11414 <__assert_fail@plt+0x310>
   11308:	mov	r1, #2
   1130c:	bl	11e00 <__assert_fail@plt+0xcfc>
   11310:	ldr	r3, [r8]
   11314:	add	r2, sp, #32
   11318:	add	r1, sp, #24
   1131c:	add	r3, r9, r3, lsl #2
   11320:	mov	r0, r7
   11324:	ldr	r3, [r3, #120]	; 0x78
   11328:	blx	r3
   1132c:	cmp	r0, #0
   11330:	bne	11398 <__assert_fail@plt+0x294>
   11334:	mov	r0, r7
   11338:	bl	11e34 <__assert_fail@plt+0xd30>
   1133c:	cmp	r0, #0
   11340:	beq	112ac <__assert_fail@plt+0x1a8>
   11344:	bl	10ff0 <__errno_location@plt>
   11348:	ldr	sl, [r0]
   1134c:	cmp	sl, #0
   11350:	beq	112ac <__assert_fail@plt+0x1a8>
   11354:	mov	r2, r6
   11358:	mov	r1, #3
   1135c:	mov	r0, #0
   11360:	bl	14a04 <__assert_fail@plt+0x3900>
   11364:	mov	r1, sl
   11368:	ldr	r2, [pc, #288]	; 11490 <__assert_fail@plt+0x38c>
   1136c:	mov	r3, r0
   11370:	mov	r0, #0
   11374:	bl	10f6c <error@plt>
   11378:	mov	r3, #0
   1137c:	str	r3, [sp, #20]
   11380:	b	11244 <__assert_fail@plt+0x140>
   11384:	bl	10ff0 <__errno_location@plt>
   11388:	ldr	sl, [r0]
   1138c:	mov	r0, r7
   11390:	bl	110b0 <clearerr_unlocked@plt>
   11394:	b	1134c <__assert_fail@plt+0x248>
   11398:	bl	10ff0 <__errno_location@plt>
   1139c:	ldr	sl, [r0]
   113a0:	mov	r0, r7
   113a4:	bl	11e34 <__assert_fail@plt+0xd30>
   113a8:	cmp	r0, #0
   113ac:	beq	1134c <__assert_fail@plt+0x248>
   113b0:	cmp	sl, #0
   113b4:	bne	11354 <__assert_fail@plt+0x250>
   113b8:	b	11344 <__assert_fail@plt+0x240>
   113bc:	ldrb	r3, [r8, #4]
   113c0:	cmp	r3, #0
   113c4:	bne	113d8 <__assert_fail@plt+0x2d4>
   113c8:	ldr	r3, [sp, #20]
   113cc:	eor	r0, r3, #1
   113d0:	add	sp, sp, #44	; 0x2c
   113d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113d8:	ldr	r3, [pc, #168]	; 11488 <__assert_fail@plt+0x384>
   113dc:	ldr	r0, [r3]
   113e0:	bl	11e34 <__assert_fail@plt+0xd30>
   113e4:	cmn	r0, #1
   113e8:	bne	113c8 <__assert_fail@plt+0x2c4>
   113ec:	bl	10ff0 <__errno_location@plt>
   113f0:	mov	r2, #5
   113f4:	ldr	r1, [pc, #152]	; 11494 <__assert_fail@plt+0x390>
   113f8:	ldr	r4, [r0]
   113fc:	mov	r0, #0
   11400:	bl	10ef4 <dcgettext@plt>
   11404:	mov	r1, r4
   11408:	mov	r2, r0
   1140c:	mov	r0, #1
   11410:	bl	10f6c <error@plt>
   11414:	bl	10ff0 <__errno_location@plt>
   11418:	mov	r2, r6
   1141c:	mov	r1, #3
   11420:	str	r7, [sp, #20]
   11424:	ldr	r6, [r0]
   11428:	mov	r0, r7
   1142c:	bl	14a04 <__assert_fail@plt+0x3900>
   11430:	mov	r1, r6
   11434:	ldr	r2, [pc, #84]	; 11490 <__assert_fail@plt+0x38c>
   11438:	mov	r3, r0
   1143c:	mov	r0, r7
   11440:	bl	10f6c <error@plt>
   11444:	b	11244 <__assert_fail@plt+0x140>
   11448:	andeq	r7, r1, r0, asr r0
   1144c:	muleq	r1, r8, r2
   11450:	strdeq	r7, [r1], -r0
   11454:	andeq	r8, r2, r4, ror r1
   11458:	andeq	r1, r1, r0, lsl sp
   1145c:			; <UNDEFINED> instruction: 0x00016fb4
   11460:	ldrdeq	r7, [r1], -r4
   11464:	andeq	r8, r2, ip, ror r1
   11468:	andeq	r8, r2, r8, lsl #2
   1146c:			; <UNDEFINED> instruction: 0x000172b0
   11470:	andeq	r7, r1, r0, asr #5
   11474:	andeq	r7, r1, r4
   11478:	andeq	r7, r1, ip, ror #3
   1147c:	andeq	r8, r2, r0, ror #2
   11480:	andeq	r6, r1, ip, ror pc
   11484:	ldrdeq	r7, [r1], -r8
   11488:	andeq	r8, r2, r0, ror r1
   1148c:	ldrdeq	r7, [r1], -r0
   11490:	muleq	r1, r0, r3
   11494:	ldrdeq	r7, [r1], -ip
   11498:	mov	fp, #0
   1149c:	mov	lr, #0
   114a0:	pop	{r1}		; (ldr r1, [sp], #4)
   114a4:	mov	r2, sp
   114a8:	push	{r2}		; (str r2, [sp, #-4]!)
   114ac:	push	{r0}		; (str r0, [sp, #-4]!)
   114b0:	ldr	ip, [pc, #16]	; 114c8 <__assert_fail@plt+0x3c4>
   114b4:	push	{ip}		; (str ip, [sp, #-4]!)
   114b8:	ldr	r0, [pc, #12]	; 114cc <__assert_fail@plt+0x3c8>
   114bc:	ldr	r3, [pc, #12]	; 114d0 <__assert_fail@plt+0x3cc>
   114c0:	bl	10f90 <__libc_start_main@plt>
   114c4:	bl	110ec <abort@plt>
   114c8:	andeq	r6, r1, r0, asr #30
   114cc:	andeq	r1, r1, r0, lsl r1
   114d0:	andeq	r6, r1, r0, ror #29
   114d4:	ldr	r3, [pc, #20]	; 114f0 <__assert_fail@plt+0x3ec>
   114d8:	ldr	r2, [pc, #20]	; 114f4 <__assert_fail@plt+0x3f0>
   114dc:	add	r3, pc, r3
   114e0:	ldr	r2, [r3, r2]
   114e4:	cmp	r2, #0
   114e8:	bxeq	lr
   114ec:	b	10fa8 <__gmon_start__@plt>
   114f0:	andeq	r6, r1, ip, lsl fp
   114f4:	strdeq	r0, [r0], -ip
   114f8:	ldr	r3, [pc, #28]	; 1151c <__assert_fail@plt+0x418>
   114fc:	ldr	r0, [pc, #28]	; 11520 <__assert_fail@plt+0x41c>
   11500:	sub	r3, r3, r0
   11504:	cmp	r3, #6
   11508:	bxls	lr
   1150c:	ldr	r3, [pc, #16]	; 11524 <__assert_fail@plt+0x420>
   11510:	cmp	r3, #0
   11514:	bxeq	lr
   11518:	bx	r3
   1151c:	andeq	r8, r2, r7, asr r1
   11520:	andeq	r8, r2, r4, asr r1
   11524:	andeq	r0, r0, r0
   11528:	ldr	r1, [pc, #36]	; 11554 <__assert_fail@plt+0x450>
   1152c:	ldr	r0, [pc, #36]	; 11558 <__assert_fail@plt+0x454>
   11530:	sub	r1, r1, r0
   11534:	asr	r1, r1, #2
   11538:	add	r1, r1, r1, lsr #31
   1153c:	asrs	r1, r1, #1
   11540:	bxeq	lr
   11544:	ldr	r3, [pc, #16]	; 1155c <__assert_fail@plt+0x458>
   11548:	cmp	r3, #0
   1154c:	bxeq	lr
   11550:	bx	r3
   11554:	andeq	r8, r2, r4, asr r1
   11558:	andeq	r8, r2, r4, asr r1
   1155c:	andeq	r0, r0, r0
   11560:	push	{r4, lr}
   11564:	ldr	r4, [pc, #24]	; 11584 <__assert_fail@plt+0x480>
   11568:	ldrb	r3, [r4]
   1156c:	cmp	r3, #0
   11570:	popne	{r4, pc}
   11574:	bl	114f8 <__assert_fail@plt+0x3f4>
   11578:	mov	r3, #1
   1157c:	strb	r3, [r4]
   11580:	pop	{r4, pc}
   11584:	andeq	r8, r2, r8, ror r1
   11588:	ldr	r0, [pc, #40]	; 115b8 <__assert_fail@plt+0x4b4>
   1158c:	ldr	r3, [r0]
   11590:	cmp	r3, #0
   11594:	bne	1159c <__assert_fail@plt+0x498>
   11598:	b	11528 <__assert_fail@plt+0x424>
   1159c:	ldr	r3, [pc, #24]	; 115bc <__assert_fail@plt+0x4b8>
   115a0:	cmp	r3, #0
   115a4:	beq	11598 <__assert_fail@plt+0x494>
   115a8:	push	{r4, lr}
   115ac:	blx	r3
   115b0:	pop	{r4, lr}
   115b4:	b	11528 <__assert_fail@plt+0x424>
   115b8:	andeq	r7, r2, r4, lsl pc
   115bc:	andeq	r0, r0, r0
   115c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c4:	sub	sp, sp, #20
   115c8:	mov	r6, r0
   115cc:	mov	r0, #32768	; 0x8000
   115d0:	mov	fp, r1
   115d4:	str	r2, [sp, #12]
   115d8:	bl	15cdc <__assert_fail@plt+0x4bd8>
   115dc:	subs	r7, r0, #0
   115e0:	beq	11710 <__assert_fail@plt+0x60c>
   115e4:	add	sl, r7, #32512	; 0x7f00
   115e8:	ldr	r9, [pc, #296]	; 11718 <__assert_fail@plt+0x614>
   115ec:	mov	r2, #0
   115f0:	mov	r3, #0
   115f4:	add	sl, sl, #255	; 0xff
   115f8:	mov	r4, #0
   115fc:	mov	r8, #1
   11600:	strd	r2, [sp]
   11604:	mov	r5, #0
   11608:	b	11620 <__assert_fail@plt+0x51c>
   1160c:	cmp	r0, #0
   11610:	ldr	r3, [r6]
   11614:	beq	11680 <__assert_fail@plt+0x57c>
   11618:	tst	r3, #16
   1161c:	bne	1168c <__assert_fail@plt+0x588>
   11620:	rsb	r2, r5, #32768	; 0x8000
   11624:	add	r0, r7, r5
   11628:	mov	r3, r6
   1162c:	mov	r1, r8
   11630:	bl	110d4 <fread_unlocked@plt>
   11634:	add	r5, r5, r0
   11638:	cmp	r5, #32768	; 0x8000
   1163c:	bne	1160c <__assert_fail@plt+0x508>
   11640:	sub	r1, r7, #1
   11644:	ldrb	r2, [r1, #1]!
   11648:	and	r3, r9, r4, lsl #15
   1164c:	add	r4, r3, r4, lsr #1
   11650:	add	r4, r4, r2
   11654:	cmp	r1, sl
   11658:	and	r4, r4, r9
   1165c:	bne	11644 <__assert_fail@plt+0x540>
   11660:	ldrd	r0, [sp]
   11664:	adds	r2, r0, #32768	; 0x8000
   11668:	adc	r3, r1, #0
   1166c:	cmp	r1, r3
   11670:	cmpeq	r0, r2
   11674:	bhi	116d8 <__assert_fail@plt+0x5d4>
   11678:	strd	r2, [sp]
   1167c:	b	11604 <__assert_fail@plt+0x500>
   11680:	tst	r3, #32
   11684:	mvnne	r4, #0
   11688:	bne	116e8 <__assert_fail@plt+0x5e4>
   1168c:	cmp	r5, #0
   11690:	ldrd	r2, [sp]
   11694:	beq	116fc <__assert_fail@plt+0x5f8>
   11698:	ldr	r0, [pc, #120]	; 11718 <__assert_fail@plt+0x614>
   1169c:	mov	r1, r7
   116a0:	add	ip, r7, r5
   116a4:	ldrb	r2, [r1], #1
   116a8:	and	r3, r0, r4, lsl #15
   116ac:	add	r4, r3, r4, lsr #1
   116b0:	add	r4, r4, r2
   116b4:	cmp	ip, r1
   116b8:	and	r4, r4, r0
   116bc:	bne	116a4 <__assert_fail@plt+0x5a0>
   116c0:	ldrd	r0, [sp]
   116c4:	adds	r2, r0, r5
   116c8:	adc	r3, r1, #0
   116cc:	cmp	r1, r3
   116d0:	cmpeq	r0, r2
   116d4:	bls	116fc <__assert_fail@plt+0x5f8>
   116d8:	bl	10ff0 <__errno_location@plt>
   116dc:	mvn	r4, #0
   116e0:	mov	r3, #75	; 0x4b
   116e4:	str	r3, [r0]
   116e8:	mov	r0, r7
   116ec:	bl	11fcc <__assert_fail@plt+0xec8>
   116f0:	mov	r0, r4
   116f4:	add	sp, sp, #20
   116f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116fc:	ldr	r1, [sp, #12]
   11700:	str	r4, [fp]
   11704:	mov	r4, #0
   11708:	strd	r2, [r1]
   1170c:	b	116e8 <__assert_fail@plt+0x5e4>
   11710:	mvn	r4, #0
   11714:	b	116f0 <__assert_fail@plt+0x5ec>
   11718:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1171c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11720:	sub	sp, sp, #12
   11724:	mov	r5, r0
   11728:	mov	r0, #32768	; 0x8000
   1172c:	stm	sp, {r1, r2}
   11730:	bl	15cdc <__assert_fail@plt+0x4bd8>
   11734:	subs	r9, r0, #0
   11738:	beq	1185c <__assert_fail@plt+0x758>
   1173c:	add	fp, r9, #32512	; 0x7f00
   11740:	add	fp, fp, #255	; 0xff
   11744:	mov	r8, #0
   11748:	mov	r6, #0
   1174c:	mov	r7, #0
   11750:	mov	sl, #1
   11754:	mov	r4, #0
   11758:	b	11770 <__assert_fail@plt+0x66c>
   1175c:	cmp	r0, #0
   11760:	ldr	r3, [r5]
   11764:	beq	117c4 <__assert_fail@plt+0x6c0>
   11768:	tst	r3, #16
   1176c:	bne	117d0 <__assert_fail@plt+0x6cc>
   11770:	rsb	r2, r4, #32768	; 0x8000
   11774:	add	r0, r9, r4
   11778:	mov	r3, r5
   1177c:	mov	r1, sl
   11780:	bl	110d4 <fread_unlocked@plt>
   11784:	add	r4, r4, r0
   11788:	cmp	r4, #32768	; 0x8000
   1178c:	bne	1175c <__assert_fail@plt+0x658>
   11790:	sub	r3, r9, #1
   11794:	ldrb	r2, [r3, #1]!
   11798:	cmp	r3, fp
   1179c:	add	r8, r8, r2
   117a0:	bne	11794 <__assert_fail@plt+0x690>
   117a4:	adds	r2, r6, #32768	; 0x8000
   117a8:	adc	r3, r7, #0
   117ac:	cmp	r7, r3
   117b0:	cmpeq	r6, r2
   117b4:	bhi	1180c <__assert_fail@plt+0x708>
   117b8:	mov	r6, r2
   117bc:	mov	r7, r3
   117c0:	b	11754 <__assert_fail@plt+0x650>
   117c4:	tst	r3, #32
   117c8:	mvnne	r4, #0
   117cc:	bne	1181c <__assert_fail@plt+0x718>
   117d0:	cmp	r4, #0
   117d4:	moveq	r2, r6
   117d8:	moveq	r3, r7
   117dc:	beq	11830 <__assert_fail@plt+0x72c>
   117e0:	mov	r3, r9
   117e4:	add	r1, r9, r4
   117e8:	ldrb	r2, [r3], #1
   117ec:	cmp	r1, r3
   117f0:	add	r8, r8, r2
   117f4:	bne	117e8 <__assert_fail@plt+0x6e4>
   117f8:	adds	r2, r6, r4
   117fc:	adc	r3, r7, #0
   11800:	cmp	r7, r3
   11804:	cmpeq	r6, r2
   11808:	bls	11830 <__assert_fail@plt+0x72c>
   1180c:	bl	10ff0 <__errno_location@plt>
   11810:	mvn	r4, #0
   11814:	mov	r3, #75	; 0x4b
   11818:	str	r3, [r0]
   1181c:	mov	r0, r9
   11820:	bl	11fcc <__assert_fail@plt+0xec8>
   11824:	mov	r0, r4
   11828:	add	sp, sp, #12
   1182c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11830:	ldr	r1, [pc, #44]	; 11864 <__assert_fail@plt+0x760>
   11834:	mov	r4, #0
   11838:	and	r0, r8, r1
   1183c:	add	r8, r0, r8, lsr #16
   11840:	ldr	r0, [sp]
   11844:	and	r1, r1, r8
   11848:	add	r1, r1, r8, asr #16
   1184c:	str	r1, [r0]
   11850:	ldr	r1, [sp, #4]
   11854:	strd	r2, [r1]
   11858:	b	1181c <__assert_fail@plt+0x718>
   1185c:	mvn	r4, #0
   11860:	b	11824 <__assert_fail@plt+0x720>
   11864:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   11868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1186c:	sub	sp, sp, #676	; 0x2a4
   11870:	mov	sl, #1024	; 0x400
   11874:	mov	fp, #0
   11878:	mov	r8, #1
   1187c:	mov	r9, #0
   11880:	add	r1, sp, #720	; 0x2d0
   11884:	ldr	r6, [r2]
   11888:	mov	r3, #0
   1188c:	strd	sl, [sp, #8]
   11890:	strd	r8, [sp]
   11894:	add	r2, sp, #20
   11898:	mov	r7, r0
   1189c:	ldrd	r0, [r1]
   118a0:	ldrb	r5, [sp, #716]	; 0x2cc
   118a4:	ldrb	r4, [sp, #712]	; 0x2c8
   118a8:	bl	120c8 <__assert_fail@plt+0xfc4>
   118ac:	mov	r2, r6
   118b0:	ldr	r1, [pc, #96]	; 11918 <__assert_fail@plt+0x814>
   118b4:	mov	r3, r0
   118b8:	mov	r0, #1
   118bc:	bl	1102c <__printf_chk@plt>
   118c0:	cmp	r5, #0
   118c4:	bne	118f4 <__assert_fail@plt+0x7f0>
   118c8:	ldr	r3, [pc, #76]	; 1191c <__assert_fail@plt+0x818>
   118cc:	ldr	r0, [r3]
   118d0:	ldr	r3, [r0, #20]
   118d4:	ldr	r2, [r0, #24]
   118d8:	cmp	r3, r2
   118dc:	addcc	r2, r3, #1
   118e0:	strcc	r2, [r0, #20]
   118e4:	strbcc	r4, [r3]
   118e8:	bcs	11908 <__assert_fail@plt+0x804>
   118ec:	add	sp, sp, #676	; 0x2a4
   118f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118f4:	mov	r2, r7
   118f8:	ldr	r1, [pc, #32]	; 11920 <__assert_fail@plt+0x81c>
   118fc:	mov	r0, #1
   11900:	bl	1102c <__printf_chk@plt>
   11904:	b	118c8 <__assert_fail@plt+0x7c4>
   11908:	mov	r1, r4
   1190c:	bl	11074 <__overflow@plt>
   11910:	add	sp, sp, #676	; 0x2a4
   11914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11918:	andeq	r6, r1, r8, ror #30
   1191c:	andeq	r8, r2, r4, ror r1
   11920:	strdeq	r7, [r1], -ip
   11924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11928:	sub	sp, sp, #676	; 0x2a4
   1192c:	mov	sl, #512	; 0x200
   11930:	mov	fp, #0
   11934:	mov	r8, #1
   11938:	mov	r9, #0
   1193c:	add	r1, sp, #720	; 0x2d0
   11940:	ldr	r6, [r2]
   11944:	mov	r3, #0
   11948:	strd	sl, [sp, #8]
   1194c:	strd	r8, [sp]
   11950:	add	r2, sp, #20
   11954:	mov	r7, r0
   11958:	ldrd	r0, [r1]
   1195c:	ldrb	r5, [sp, #716]	; 0x2cc
   11960:	ldrb	r4, [sp, #712]	; 0x2c8
   11964:	bl	120c8 <__assert_fail@plt+0xfc4>
   11968:	mov	r2, r6
   1196c:	ldr	r1, [pc, #96]	; 119d4 <__assert_fail@plt+0x8d0>
   11970:	mov	r3, r0
   11974:	mov	r0, #1
   11978:	bl	1102c <__printf_chk@plt>
   1197c:	cmp	r5, #0
   11980:	bne	119b0 <__assert_fail@plt+0x8ac>
   11984:	ldr	r3, [pc, #76]	; 119d8 <__assert_fail@plt+0x8d4>
   11988:	ldr	r0, [r3]
   1198c:	ldr	r3, [r0, #20]
   11990:	ldr	r2, [r0, #24]
   11994:	cmp	r3, r2
   11998:	addcc	r2, r3, #1
   1199c:	strcc	r2, [r0, #20]
   119a0:	strbcc	r4, [r3]
   119a4:	bcs	119c4 <__assert_fail@plt+0x8c0>
   119a8:	add	sp, sp, #676	; 0x2a4
   119ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b0:	mov	r2, r7
   119b4:	ldr	r1, [pc, #32]	; 119dc <__assert_fail@plt+0x8d8>
   119b8:	mov	r0, #1
   119bc:	bl	1102c <__printf_chk@plt>
   119c0:	b	11984 <__assert_fail@plt+0x880>
   119c4:	mov	r1, r4
   119c8:	bl	11074 <__overflow@plt>
   119cc:	add	sp, sp, #676	; 0x2a4
   119d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119d4:	andeq	r6, r1, r4, ror pc
   119d8:	andeq	r8, r2, r4, ror r1
   119dc:	strdeq	r7, [r1], -ip
   119e0:	subs	r6, r0, #0
   119e4:	push	{r7, lr}
   119e8:	sub	sp, sp, #56	; 0x38
   119ec:	beq	11a28 <__assert_fail@plt+0x924>
   119f0:	ldr	r3, [pc, #672]	; 11c98 <__assert_fail@plt+0xb94>
   119f4:	mov	r2, #5
   119f8:	ldr	r1, [pc, #668]	; 11c9c <__assert_fail@plt+0xb98>
   119fc:	mov	r0, #0
   11a00:	ldr	r4, [r3]
   11a04:	bl	10ef4 <dcgettext@plt>
   11a08:	ldr	r3, [pc, #656]	; 11ca0 <__assert_fail@plt+0xb9c>
   11a0c:	mov	r1, #1
   11a10:	ldr	r3, [r3]
   11a14:	mov	r2, r0
   11a18:	mov	r0, r4
   11a1c:	bl	11044 <__fprintf_chk@plt>
   11a20:	mov	r0, r6
   11a24:	bl	10fcc <exit@plt>
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #624]	; 11ca4 <__assert_fail@plt+0xba0>
   11a30:	bl	10ef4 <dcgettext@plt>
   11a34:	ldr	r3, [pc, #612]	; 11ca0 <__assert_fail@plt+0xb9c>
   11a38:	ldr	r7, [pc, #616]	; 11ca8 <__assert_fail@plt+0xba4>
   11a3c:	ldr	r4, [pc, #616]	; 11cac <__assert_fail@plt+0xba8>
   11a40:	ldr	r2, [r3]
   11a44:	mov	r1, r0
   11a48:	mov	r0, #1
   11a4c:	bl	1102c <__printf_chk@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #596]	; 11cb0 <__assert_fail@plt+0xbac>
   11a58:	mov	r0, r6
   11a5c:	bl	10ef4 <dcgettext@plt>
   11a60:	mov	r3, #16
   11a64:	ldr	r2, [pc, #584]	; 11cb4 <__assert_fail@plt+0xbb0>
   11a68:	mov	r1, r0
   11a6c:	mov	r0, #1
   11a70:	bl	1102c <__printf_chk@plt>
   11a74:	mov	r2, #5
   11a78:	ldr	r1, [pc, #568]	; 11cb8 <__assert_fail@plt+0xbb4>
   11a7c:	mov	r0, r6
   11a80:	bl	10ef4 <dcgettext@plt>
   11a84:	ldr	r1, [r7]
   11a88:	bl	10e58 <fputs_unlocked@plt>
   11a8c:	mov	r2, #5
   11a90:	ldr	r1, [pc, #548]	; 11cbc <__assert_fail@plt+0xbb8>
   11a94:	mov	r0, r6
   11a98:	bl	10ef4 <dcgettext@plt>
   11a9c:	ldr	r1, [r7]
   11aa0:	bl	10e58 <fputs_unlocked@plt>
   11aa4:	mov	r2, #5
   11aa8:	ldr	r1, [pc, #528]	; 11cc0 <__assert_fail@plt+0xbbc>
   11aac:	mov	r0, r6
   11ab0:	bl	10ef4 <dcgettext@plt>
   11ab4:	ldr	r1, [r7]
   11ab8:	bl	10e58 <fputs_unlocked@plt>
   11abc:	mov	r2, #5
   11ac0:	ldr	r1, [pc, #508]	; 11cc4 <__assert_fail@plt+0xbc0>
   11ac4:	mov	r0, r6
   11ac8:	bl	10ef4 <dcgettext@plt>
   11acc:	ldr	r1, [r7]
   11ad0:	bl	10e58 <fputs_unlocked@plt>
   11ad4:	ldm	r4!, {r0, r1, r2, r3}
   11ad8:	mov	lr, sp
   11adc:	stmia	lr!, {r0, r1, r2, r3}
   11ae0:	ldm	r4!, {r0, r1, r2, r3}
   11ae4:	ldr	ip, [sp]
   11ae8:	stmia	lr!, {r0, r1, r2, r3}
   11aec:	cmp	ip, #0
   11af0:	ldm	r4!, {r0, r1, r2, r3}
   11af4:	stmia	lr!, {r0, r1, r2, r3}
   11af8:	ldm	r4, {r0, r1}
   11afc:	moveq	r4, sp
   11b00:	stm	lr, {r0, r1}
   11b04:	beq	11b34 <__assert_fail@plt+0xa30>
   11b08:	ldr	r5, [pc, #440]	; 11cc8 <__assert_fail@plt+0xbc4>
   11b0c:	mov	r4, sp
   11b10:	b	11b20 <__assert_fail@plt+0xa1c>
   11b14:	ldr	ip, [r4, #8]!
   11b18:	cmp	ip, #0
   11b1c:	beq	11b34 <__assert_fail@plt+0xa30>
   11b20:	mov	r1, ip
   11b24:	mov	r0, r5
   11b28:	bl	10e70 <strcmp@plt>
   11b2c:	cmp	r0, #0
   11b30:	bne	11b14 <__assert_fail@plt+0xa10>
   11b34:	ldr	r4, [r4, #4]
   11b38:	mov	r2, #5
   11b3c:	cmp	r4, #0
   11b40:	ldr	r1, [pc, #388]	; 11ccc <__assert_fail@plt+0xbc8>
   11b44:	beq	11bec <__assert_fail@plt+0xae8>
   11b48:	mov	r0, #0
   11b4c:	bl	10ef4 <dcgettext@plt>
   11b50:	ldr	r3, [pc, #376]	; 11cd0 <__assert_fail@plt+0xbcc>
   11b54:	ldr	r2, [pc, #376]	; 11cd4 <__assert_fail@plt+0xbd0>
   11b58:	mov	r1, r0
   11b5c:	mov	r0, #1
   11b60:	bl	1102c <__printf_chk@plt>
   11b64:	mov	r1, #0
   11b68:	mov	r0, #5
   11b6c:	bl	11080 <setlocale@plt>
   11b70:	cmp	r0, #0
   11b74:	ldreq	r5, [pc, #332]	; 11cc8 <__assert_fail@plt+0xbc4>
   11b78:	beq	11b94 <__assert_fail@plt+0xa90>
   11b7c:	mov	r2, #3
   11b80:	ldr	r1, [pc, #336]	; 11cd8 <__assert_fail@plt+0xbd4>
   11b84:	bl	110e0 <strncmp@plt>
   11b88:	ldr	r5, [pc, #312]	; 11cc8 <__assert_fail@plt+0xbc4>
   11b8c:	cmp	r0, #0
   11b90:	bne	11c7c <__assert_fail@plt+0xb78>
   11b94:	mov	r2, #5
   11b98:	ldr	r1, [pc, #316]	; 11cdc <__assert_fail@plt+0xbd8>
   11b9c:	mov	r0, #0
   11ba0:	bl	10ef4 <dcgettext@plt>
   11ba4:	ldr	r3, [pc, #284]	; 11cc8 <__assert_fail@plt+0xbc4>
   11ba8:	ldr	r2, [pc, #288]	; 11cd0 <__assert_fail@plt+0xbcc>
   11bac:	mov	r1, r0
   11bb0:	mov	r0, #1
   11bb4:	bl	1102c <__printf_chk@plt>
   11bb8:	mov	r2, #5
   11bbc:	ldr	r1, [pc, #284]	; 11ce0 <__assert_fail@plt+0xbdc>
   11bc0:	mov	r0, #0
   11bc4:	bl	10ef4 <dcgettext@plt>
   11bc8:	ldr	r2, [pc, #276]	; 11ce4 <__assert_fail@plt+0xbe0>
   11bcc:	cmp	r4, r5
   11bd0:	ldr	r3, [pc, #272]	; 11ce8 <__assert_fail@plt+0xbe4>
   11bd4:	movne	r3, r2
   11bd8:	mov	r1, r0
   11bdc:	mov	r2, r4
   11be0:	mov	r0, #1
   11be4:	bl	1102c <__printf_chk@plt>
   11be8:	b	11a20 <__assert_fail@plt+0x91c>
   11bec:	mov	r0, r4
   11bf0:	bl	10ef4 <dcgettext@plt>
   11bf4:	ldr	r3, [pc, #212]	; 11cd0 <__assert_fail@plt+0xbcc>
   11bf8:	ldr	r2, [pc, #212]	; 11cd4 <__assert_fail@plt+0xbd0>
   11bfc:	mov	r1, r0
   11c00:	mov	r0, #1
   11c04:	bl	1102c <__printf_chk@plt>
   11c08:	mov	r1, r4
   11c0c:	mov	r0, #5
   11c10:	bl	11080 <setlocale@plt>
   11c14:	cmp	r0, #0
   11c18:	beq	11c30 <__assert_fail@plt+0xb2c>
   11c1c:	mov	r2, #3
   11c20:	ldr	r1, [pc, #176]	; 11cd8 <__assert_fail@plt+0xbd4>
   11c24:	bl	110e0 <strncmp@plt>
   11c28:	cmp	r0, #0
   11c2c:	bne	11c74 <__assert_fail@plt+0xb70>
   11c30:	mov	r2, #5
   11c34:	ldr	r1, [pc, #160]	; 11cdc <__assert_fail@plt+0xbd8>
   11c38:	mov	r0, #0
   11c3c:	bl	10ef4 <dcgettext@plt>
   11c40:	ldr	r3, [pc, #128]	; 11cc8 <__assert_fail@plt+0xbc4>
   11c44:	ldr	r2, [pc, #132]	; 11cd0 <__assert_fail@plt+0xbcc>
   11c48:	mov	r4, r3
   11c4c:	mov	r1, r0
   11c50:	mov	r0, #1
   11c54:	bl	1102c <__printf_chk@plt>
   11c58:	ldr	r1, [pc, #128]	; 11ce0 <__assert_fail@plt+0xbdc>
   11c5c:	mov	r2, #5
   11c60:	mov	r0, #0
   11c64:	bl	10ef4 <dcgettext@plt>
   11c68:	ldr	r3, [pc, #120]	; 11ce8 <__assert_fail@plt+0xbe4>
   11c6c:	mov	r1, r0
   11c70:	b	11bdc <__assert_fail@plt+0xad8>
   11c74:	ldr	r5, [pc, #76]	; 11cc8 <__assert_fail@plt+0xbc4>
   11c78:	mov	r4, r5
   11c7c:	mov	r2, #5
   11c80:	ldr	r1, [pc, #100]	; 11cec <__assert_fail@plt+0xbe8>
   11c84:	mov	r0, #0
   11c88:	bl	10ef4 <dcgettext@plt>
   11c8c:	ldr	r1, [r7]
   11c90:	bl	10e58 <fputs_unlocked@plt>
   11c94:	b	11b94 <__assert_fail@plt+0xa90>
   11c98:	andeq	r8, r2, r8, ror #2
   11c9c:	andeq	r7, r1, r8
   11ca0:	andeq	r8, r2, ip, lsl #3
   11ca4:	andeq	r7, r1, r0, lsr r0
   11ca8:	andeq	r8, r2, r4, ror r1
   11cac:	andeq	r6, r1, ip, ror pc
   11cb0:	andeq	r7, r1, r4, asr r0
   11cb4:	andeq	r7, r1, ip, ror r0
   11cb8:	andeq	r7, r1, r0, lsl #1
   11cbc:	strheq	r7, [r1], -r8
   11cc0:	andeq	r7, r1, r4, asr #2
   11cc4:	andeq	r7, r1, r4, ror r1
   11cc8:	andeq	r7, r1, r4
   11ccc:	andeq	r7, r1, ip, lsr #3
   11cd0:	andeq	r7, r1, r4, asr #3
   11cd4:	andeq	r7, r1, ip, ror #3
   11cd8:	strdeq	r7, [r1], -ip
   11cdc:	andeq	r7, r1, r8, asr #4
   11ce0:	andeq	r7, r1, r4, ror #4
   11ce4:	andeq	r7, r1, r0, asr r0
   11ce8:	strdeq	r7, [r1], -r4
   11cec:	andeq	r7, r1, r0, lsl #4
   11cf0:	ldr	r3, [pc, #4]	; 11cfc <__assert_fail@plt+0xbf8>
   11cf4:	str	r0, [r3]
   11cf8:	bx	lr
   11cfc:	andeq	r8, r2, r4, lsl #3
   11d00:	ldr	r3, [pc, #4]	; 11d0c <__assert_fail@plt+0xc08>
   11d04:	strb	r0, [r3, #4]
   11d08:	bx	lr
   11d0c:	andeq	r8, r2, r4, lsl #3
   11d10:	ldr	r3, [pc, #192]	; 11dd8 <__assert_fail@plt+0xcd4>
   11d14:	push	{r4, r5, r6, lr}
   11d18:	sub	sp, sp, #8
   11d1c:	ldr	r0, [r3]
   11d20:	bl	16108 <__assert_fail@plt+0x5004>
   11d24:	cmp	r0, #0
   11d28:	beq	11d4c <__assert_fail@plt+0xc48>
   11d2c:	ldr	r4, [pc, #168]	; 11ddc <__assert_fail@plt+0xcd8>
   11d30:	ldrb	r3, [r4, #4]
   11d34:	cmp	r3, #0
   11d38:	beq	11d68 <__assert_fail@plt+0xc64>
   11d3c:	bl	10ff0 <__errno_location@plt>
   11d40:	ldr	r3, [r0]
   11d44:	cmp	r3, #32
   11d48:	bne	11d68 <__assert_fail@plt+0xc64>
   11d4c:	ldr	r3, [pc, #140]	; 11de0 <__assert_fail@plt+0xcdc>
   11d50:	ldr	r0, [r3]
   11d54:	bl	16108 <__assert_fail@plt+0x5004>
   11d58:	cmp	r0, #0
   11d5c:	bne	11db0 <__assert_fail@plt+0xcac>
   11d60:	add	sp, sp, #8
   11d64:	pop	{r4, r5, r6, pc}
   11d68:	mov	r2, #5
   11d6c:	ldr	r1, [pc, #112]	; 11de4 <__assert_fail@plt+0xce0>
   11d70:	mov	r0, #0
   11d74:	bl	10ef4 <dcgettext@plt>
   11d78:	ldr	r4, [r4]
   11d7c:	cmp	r4, #0
   11d80:	mov	r5, r0
   11d84:	beq	11dbc <__assert_fail@plt+0xcb8>
   11d88:	bl	10ff0 <__errno_location@plt>
   11d8c:	ldr	r6, [r0]
   11d90:	mov	r0, r4
   11d94:	bl	149f0 <__assert_fail@plt+0x38ec>
   11d98:	mov	r1, r6
   11d9c:	str	r5, [sp]
   11da0:	ldr	r2, [pc, #64]	; 11de8 <__assert_fail@plt+0xce4>
   11da4:	mov	r3, r0
   11da8:	mov	r0, #0
   11dac:	bl	10f6c <error@plt>
   11db0:	ldr	r3, [pc, #52]	; 11dec <__assert_fail@plt+0xce8>
   11db4:	ldr	r0, [r3]
   11db8:	bl	10eac <_exit@plt>
   11dbc:	bl	10ff0 <__errno_location@plt>
   11dc0:	mov	r3, r5
   11dc4:	ldr	r2, [pc, #36]	; 11df0 <__assert_fail@plt+0xcec>
   11dc8:	ldr	r1, [r0]
   11dcc:	mov	r0, r4
   11dd0:	bl	10f6c <error@plt>
   11dd4:	b	11db0 <__assert_fail@plt+0xcac>
   11dd8:	andeq	r8, r2, r4, ror r1
   11ddc:	andeq	r8, r2, r4, lsl #3
   11de0:	andeq	r8, r2, r8, ror #2
   11de4:	andeq	r7, r1, r0, lsl #7
   11de8:	andeq	r7, r1, ip, lsl #7
   11dec:	andeq	r8, r2, ip, lsl #2
   11df0:	muleq	r1, r0, r3
   11df4:	push	{r4, r5}
   11df8:	pop	{r4, r5}
   11dfc:	b	10e7c <posix_fadvise64@plt>
   11e00:	cmp	r0, #0
   11e04:	bxeq	lr
   11e08:	push	{r4, lr}
   11e0c:	sub	sp, sp, #16
   11e10:	mov	r4, r1
   11e14:	bl	11038 <fileno@plt>
   11e18:	mov	r2, #0
   11e1c:	mov	r3, #0
   11e20:	str	r4, [sp, #8]
   11e24:	strd	r2, [sp]
   11e28:	bl	10e7c <posix_fadvise64@plt>
   11e2c:	add	sp, sp, #16
   11e30:	pop	{r4, pc}
   11e34:	push	{r4, r5, lr}
   11e38:	sub	sp, sp, #12
   11e3c:	mov	r4, r0
   11e40:	bl	11038 <fileno@plt>
   11e44:	cmp	r0, #0
   11e48:	mov	r0, r4
   11e4c:	blt	11ec8 <__assert_fail@plt+0xdc4>
   11e50:	bl	10f9c <__freading@plt>
   11e54:	cmp	r0, #0
   11e58:	bne	11e94 <__assert_fail@plt+0xd90>
   11e5c:	mov	r0, r4
   11e60:	bl	11ed4 <__assert_fail@plt+0xdd0>
   11e64:	cmp	r0, #0
   11e68:	beq	11ec4 <__assert_fail@plt+0xdc0>
   11e6c:	bl	10ff0 <__errno_location@plt>
   11e70:	mov	r5, r0
   11e74:	mov	r0, r4
   11e78:	ldr	r4, [r5]
   11e7c:	bl	11050 <fclose@plt>
   11e80:	cmp	r4, #0
   11e84:	mvnne	r0, #0
   11e88:	strne	r4, [r5]
   11e8c:	add	sp, sp, #12
   11e90:	pop	{r4, r5, pc}
   11e94:	mov	r0, r4
   11e98:	bl	11038 <fileno@plt>
   11e9c:	mov	r3, #1
   11ea0:	str	r3, [sp]
   11ea4:	mov	r2, #0
   11ea8:	mov	r3, #0
   11eac:	bl	10f3c <lseek64@plt>
   11eb0:	mvn	r3, #0
   11eb4:	mvn	r2, #0
   11eb8:	cmp	r1, r3
   11ebc:	cmpeq	r0, r2
   11ec0:	bne	11e5c <__assert_fail@plt+0xd58>
   11ec4:	mov	r0, r4
   11ec8:	add	sp, sp, #12
   11ecc:	pop	{r4, r5, lr}
   11ed0:	b	11050 <fclose@plt>
   11ed4:	push	{r4, lr}
   11ed8:	subs	r4, r0, #0
   11edc:	sub	sp, sp, #8
   11ee0:	beq	11efc <__assert_fail@plt+0xdf8>
   11ee4:	bl	10f9c <__freading@plt>
   11ee8:	cmp	r0, #0
   11eec:	beq	11efc <__assert_fail@plt+0xdf8>
   11ef0:	ldr	r3, [r4]
   11ef4:	tst	r3, #256	; 0x100
   11ef8:	bne	11f0c <__assert_fail@plt+0xe08>
   11efc:	mov	r0, r4
   11f00:	add	sp, sp, #8
   11f04:	pop	{r4, lr}
   11f08:	b	10e88 <fflush@plt>
   11f0c:	mov	r3, #1
   11f10:	str	r3, [sp]
   11f14:	mov	r2, #0
   11f18:	mov	r3, #0
   11f1c:	mov	r0, r4
   11f20:	bl	12024 <__assert_fail@plt+0xf20>
   11f24:	mov	r0, r4
   11f28:	add	sp, sp, #8
   11f2c:	pop	{r4, lr}
   11f30:	b	10e88 <fflush@plt>
   11f34:	push	{r4, r5, r6, lr}
   11f38:	mov	r5, r1
   11f3c:	bl	110bc <fopen64@plt>
   11f40:	subs	r4, r0, #0
   11f44:	beq	11f54 <__assert_fail@plt+0xe50>
   11f48:	bl	11038 <fileno@plt>
   11f4c:	cmp	r0, #2
   11f50:	bls	11f5c <__assert_fail@plt+0xe58>
   11f54:	mov	r0, r4
   11f58:	pop	{r4, r5, r6, pc}
   11f5c:	bl	14ba0 <__assert_fail@plt+0x3a9c>
   11f60:	subs	r6, r0, #0
   11f64:	blt	11fac <__assert_fail@plt+0xea8>
   11f68:	mov	r0, r4
   11f6c:	bl	11e34 <__assert_fail@plt+0xd30>
   11f70:	cmp	r0, #0
   11f74:	bne	11f8c <__assert_fail@plt+0xe88>
   11f78:	mov	r1, r5
   11f7c:	mov	r0, r6
   11f80:	bl	10e40 <fdopen@plt>
   11f84:	subs	r4, r0, #0
   11f88:	bne	11f54 <__assert_fail@plt+0xe50>
   11f8c:	bl	10ff0 <__errno_location@plt>
   11f90:	mov	r4, #0
   11f94:	mov	r5, r0
   11f98:	mov	r0, r6
   11f9c:	ldr	r6, [r5]
   11fa0:	bl	110f8 <close@plt>
   11fa4:	str	r6, [r5]
   11fa8:	b	11f54 <__assert_fail@plt+0xe50>
   11fac:	bl	10ff0 <__errno_location@plt>
   11fb0:	mov	r5, r0
   11fb4:	mov	r0, r4
   11fb8:	ldr	r6, [r5]
   11fbc:	mov	r4, #0
   11fc0:	bl	11e34 <__assert_fail@plt+0xd30>
   11fc4:	str	r6, [r5]
   11fc8:	b	11f54 <__assert_fail@plt+0xe50>
   11fcc:	push	{r4, r5, lr}
   11fd0:	sub	sp, sp, #12
   11fd4:	mov	r5, r0
   11fd8:	bl	10ff0 <__errno_location@plt>
   11fdc:	mov	r2, #0
   11fe0:	mov	r4, r0
   11fe4:	ldr	r3, [r0]
   11fe8:	str	r2, [r4]
   11fec:	mov	r0, r5
   11ff0:	str	r3, [sp]
   11ff4:	str	r3, [sp, #4]
   11ff8:	bl	10ea0 <free@plt>
   11ffc:	ldr	r3, [r4]
   12000:	add	r2, sp, #8
   12004:	cmp	r3, #0
   12008:	moveq	r3, #4
   1200c:	movne	r3, #0
   12010:	add	r3, r2, r3
   12014:	ldr	r3, [r3, #-8]
   12018:	str	r3, [r4]
   1201c:	add	sp, sp, #12
   12020:	pop	{r4, r5, pc}
   12024:	push	{r4, r5, r6, r7, r8, lr}
   12028:	sub	sp, sp, #8
   1202c:	ldmib	r0, {ip, lr}
   12030:	mov	r4, r0
   12034:	ldr	r5, [sp, #32]
   12038:	cmp	lr, ip
   1203c:	beq	12054 <__assert_fail@plt+0xf50>
   12040:	str	r5, [sp, #32]
   12044:	mov	r0, r4
   12048:	add	sp, sp, #8
   1204c:	pop	{r4, r5, r6, r7, r8, lr}
   12050:	b	1105c <fseeko64@plt>
   12054:	ldr	lr, [r0, #20]
   12058:	ldr	ip, [r0, #16]
   1205c:	cmp	lr, ip
   12060:	bne	12040 <__assert_fail@plt+0xf3c>
   12064:	ldr	r8, [r0, #36]	; 0x24
   12068:	cmp	r8, #0
   1206c:	bne	12040 <__assert_fail@plt+0xf3c>
   12070:	mov	r6, r2
   12074:	mov	r7, r3
   12078:	bl	11038 <fileno@plt>
   1207c:	mov	r2, r6
   12080:	mov	r3, r7
   12084:	str	r5, [sp]
   12088:	bl	10f3c <lseek64@plt>
   1208c:	mvn	r3, #0
   12090:	mvn	r2, #0
   12094:	cmp	r1, r3
   12098:	cmpeq	r0, r2
   1209c:	beq	120bc <__assert_fail@plt+0xfb8>
   120a0:	ldr	r3, [r4]
   120a4:	strd	r0, [r4, #80]	; 0x50
   120a8:	mov	r0, r8
   120ac:	bic	r3, r3, #16
   120b0:	str	r3, [r4]
   120b4:	add	sp, sp, #8
   120b8:	pop	{r4, r5, r6, r7, r8, pc}
   120bc:	mvn	r0, #0
   120c0:	b	120b4 <__assert_fail@plt+0xfb0>
   120c4:	andeq	r0, r0, r0
   120c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120cc:	vpush	{d8-d9}
   120d0:	mov	r8, r3
   120d4:	ands	r3, r3, #32
   120d8:	mov	r4, r2
   120dc:	sub	sp, sp, #124	; 0x7c
   120e0:	mov	r7, r1
   120e4:	str	r3, [sp, #20]
   120e8:	moveq	r3, #1000	; 0x3e8
   120ec:	movne	r3, #1024	; 0x400
   120f0:	str	r2, [sp, #12]
   120f4:	str	r3, [sp, #24]
   120f8:	mov	r6, r0
   120fc:	bl	110a4 <localeconv@plt>
   12100:	add	r3, r4, #644	; 0x284
   12104:	str	r3, [sp, #36]	; 0x24
   12108:	add	r3, r3, #3
   1210c:	str	r3, [sp, #8]
   12110:	ldr	r9, [r0]
   12114:	mov	r5, r0
   12118:	mov	r0, r9
   1211c:	bl	10fd8 <strlen@plt>
   12120:	ldr	fp, [r5, #4]
   12124:	ldr	r3, [pc, #1036]	; 12538 <__assert_fail@plt+0x1434>
   12128:	sub	r2, r0, #1
   1212c:	cmp	r2, #16
   12130:	movcc	r3, r9
   12134:	mov	r4, r0
   12138:	mov	r0, fp
   1213c:	movcs	r4, #1
   12140:	str	r3, [sp, #32]
   12144:	bl	10fd8 <strlen@plt>
   12148:	ldr	r3, [pc, #1004]	; 1253c <__assert_fail@plt+0x1438>
   1214c:	and	r2, r8, #3
   12150:	str	r2, [sp, #16]
   12154:	ldr	r9, [r5, #8]
   12158:	cmp	r0, #16
   1215c:	movhi	fp, r3
   12160:	ldrd	r0, [sp, #176]	; 0xb0
   12164:	ldrd	r2, [sp, #184]	; 0xb8
   12168:	str	fp, [sp, #28]
   1216c:	cmp	r3, r1
   12170:	cmpeq	r2, r0
   12174:	bhi	12360 <__assert_fail@plt+0x125c>
   12178:	bl	16d24 <__assert_fail@plt+0x5c20>
   1217c:	orrs	r3, r2, r3
   12180:	bne	121c0 <__assert_fail@plt+0x10bc>
   12184:	ldrd	r2, [sp, #184]	; 0xb8
   12188:	ldrd	r0, [sp, #176]	; 0xb0
   1218c:	bl	16d24 <__assert_fail@plt+0x5c20>
   12190:	mov	r2, r0
   12194:	mul	r0, r0, r7
   12198:	umull	sl, fp, r2, r6
   1219c:	mla	r0, r6, r1, r0
   121a0:	mov	r3, r1
   121a4:	add	fp, r0, fp
   121a8:	mov	r1, fp
   121ac:	mov	r0, sl
   121b0:	bl	16d24 <__assert_fail@plt+0x5c20>
   121b4:	cmp	r7, r1
   121b8:	cmpeq	r6, r0
   121bc:	beq	127cc <__assert_fail@plt+0x16c8>
   121c0:	ldrd	r0, [sp, #176]	; 0xb0
   121c4:	bl	16cb0 <__assert_fail@plt+0x5bac>
   121c8:	vmov	d9, r0, r1
   121cc:	ldrd	r0, [sp, #184]	; 0xb8
   121d0:	bl	16cb0 <__assert_fail@plt+0x5bac>
   121d4:	vmov	d7, r0, r1
   121d8:	mov	r0, r6
   121dc:	mov	r1, r7
   121e0:	vdiv.f64	d8, d9, d7
   121e4:	bl	16cb0 <__assert_fail@plt+0x5bac>
   121e8:	ands	r6, r8, #16
   121ec:	vmov	d7, r0, r1
   121f0:	vmul.f64	d8, d8, d7
   121f4:	beq	12548 <__assert_fail@plt+0x1444>
   121f8:	vldr	s15, [sp, #24]
   121fc:	mov	r5, #0
   12200:	vcvt.f64.s32	d6, s15
   12204:	vmov.f64	d7, d6
   12208:	vmov.f64	d5, d7
   1220c:	vmul.f64	d7, d7, d6
   12210:	add	r5, r5, #1
   12214:	vcmpe.f64	d8, d7
   12218:	vmrs	APSR_nzcv, fpscr
   1221c:	blt	12228 <__assert_fail@plt+0x1124>
   12220:	cmp	r5, #8
   12224:	bne	12208 <__assert_fail@plt+0x1104>
   12228:	ldr	sl, [sp, #16]
   1222c:	vdiv.f64	d9, d8, d5
   12230:	cmp	sl, #1
   12234:	beq	12674 <__assert_fail@plt+0x1570>
   12238:	vldr	d7, [pc, #744]	; 12528 <__assert_fail@plt+0x1424>
   1223c:	vmov	r0, r1, d9
   12240:	vcmpe.f64	d9, d7
   12244:	vmrs	APSR_nzcv, fpscr
   12248:	bpl	12290 <__assert_fail@plt+0x118c>
   1224c:	bl	16d70 <__assert_fail@plt+0x5c6c>
   12250:	cmp	sl, #0
   12254:	mov	r6, r0
   12258:	mov	r7, r1
   1225c:	movne	r0, #0
   12260:	bne	1227c <__assert_fail@plt+0x1178>
   12264:	bl	16cb0 <__assert_fail@plt+0x5bac>
   12268:	vmov	d7, r0, r1
   1226c:	vcmp.f64	d7, d9
   12270:	vmrs	APSR_nzcv, fpscr
   12274:	movne	r0, #1
   12278:	moveq	r0, #0
   1227c:	adds	r2, r6, r0
   12280:	adc	r3, r7, #0
   12284:	mov	r0, r2
   12288:	mov	r1, r3
   1228c:	bl	16cb0 <__assert_fail@plt+0x5bac>
   12290:	ldr	r6, [sp, #12]
   12294:	strd	r0, [sp]
   12298:	ldr	r3, [pc, #672]	; 12540 <__assert_fail@plt+0x143c>
   1229c:	mvn	r2, #0
   122a0:	mov	r1, #1
   122a4:	mov	r0, r6
   122a8:	bl	10ffc <__sprintf_chk@plt>
   122ac:	mov	r0, r6
   122b0:	bl	10fd8 <strlen@plt>
   122b4:	ldr	r3, [sp, #20]
   122b8:	add	r6, r4, #1
   122bc:	cmp	r3, #0
   122c0:	movne	r3, #1
   122c4:	moveq	r3, #2
   122c8:	add	r3, r3, r6
   122cc:	cmp	r0, r3
   122d0:	mov	r7, r0
   122d4:	bls	126bc <__assert_fail@plt+0x15b8>
   122d8:	vldr	d7, [pc, #592]	; 12530 <__assert_fail@plt+0x142c>
   122dc:	vmul.f64	d9, d9, d7
   122e0:	vldr	d7, [pc, #576]	; 12528 <__assert_fail@plt+0x1424>
   122e4:	vcmpe.f64	d9, d7
   122e8:	vmrs	APSR_nzcv, fpscr
   122ec:	bpl	12328 <__assert_fail@plt+0x1224>
   122f0:	vmov	r0, r1, d9
   122f4:	bl	16d70 <__assert_fail@plt+0x5c6c>
   122f8:	ldr	r3, [sp, #16]
   122fc:	cmp	r3, #0
   12300:	mov	r6, r0
   12304:	mov	r7, r1
   12308:	movne	r0, #0
   1230c:	beq	12980 <__assert_fail@plt+0x187c>
   12310:	adds	r2, r6, r0
   12314:	adc	r3, r7, #0
   12318:	mov	r0, r2
   1231c:	mov	r1, r3
   12320:	bl	16cb0 <__assert_fail@plt+0x5bac>
   12324:	vmov	d9, r0, r1
   12328:	vldr	d6, [pc, #512]	; 12530 <__assert_fail@plt+0x142c>
   1232c:	ldr	r4, [sp, #12]
   12330:	ldr	r3, [pc, #524]	; 12544 <__assert_fail@plt+0x1440>
   12334:	mvn	r2, #0
   12338:	vdiv.f64	d7, d9, d6
   1233c:	mov	r1, #1
   12340:	mov	r0, r4
   12344:	mov	r6, #0
   12348:	vstr	d7, [sp]
   1234c:	bl	10ffc <__sprintf_chk@plt>
   12350:	mov	r0, r4
   12354:	bl	10fd8 <strlen@plt>
   12358:	mov	r7, r0
   1235c:	b	12594 <__assert_fail@plt+0x1490>
   12360:	ldrd	r2, [sp, #176]	; 0xb0
   12364:	orrs	r3, r2, r3
   12368:	beq	121c0 <__assert_fail@plt+0x10bc>
   1236c:	ldrd	r2, [sp, #176]	; 0xb0
   12370:	ldrd	r0, [sp, #184]	; 0xb8
   12374:	bl	16d24 <__assert_fail@plt+0x5c20>
   12378:	orrs	r3, r2, r3
   1237c:	bne	121c0 <__assert_fail@plt+0x10bc>
   12380:	ldrd	r2, [sp, #176]	; 0xb0
   12384:	ldrd	r0, [sp, #184]	; 0xb8
   12388:	bl	16d24 <__assert_fail@plt+0x5c20>
   1238c:	mov	sl, r0
   12390:	mov	fp, r1
   12394:	mov	r2, r0
   12398:	mov	r3, r1
   1239c:	mov	r0, r6
   123a0:	mov	r1, r7
   123a4:	strd	sl, [sp, #48]	; 0x30
   123a8:	bl	16d24 <__assert_fail@plt+0x5c20>
   123ac:	mov	r1, #10
   123b0:	umull	sl, fp, r2, r1
   123b4:	mla	r3, r1, r3, fp
   123b8:	strd	sl, [sp, #40]	; 0x28
   123bc:	ldrd	sl, [sp, #48]	; 0x30
   123c0:	str	r3, [sp, #44]	; 0x2c
   123c4:	ldrd	r0, [sp, #40]	; 0x28
   123c8:	mov	r2, sl
   123cc:	mov	r3, fp
   123d0:	bl	16d24 <__assert_fail@plt+0x5c20>
   123d4:	mov	r0, r6
   123d8:	mov	r1, r7
   123dc:	lsls	r6, r2, #1
   123e0:	adc	r7, r3, r3
   123e4:	mov	r2, sl
   123e8:	mov	r3, fp
   123ec:	strd	r6, [sp, #56]	; 0x38
   123f0:	bl	16d24 <__assert_fail@plt+0x5c20>
   123f4:	mov	r7, fp
   123f8:	mov	r6, sl
   123fc:	mov	r3, r7
   12400:	mov	r2, r6
   12404:	strd	r6, [sp, #48]	; 0x30
   12408:	mov	sl, r0
   1240c:	mov	fp, r1
   12410:	ldrd	r0, [sp, #40]	; 0x28
   12414:	bl	16d24 <__assert_fail@plt+0x5c20>
   12418:	ldrd	r2, [sp, #48]	; 0x30
   1241c:	mov	r7, r0
   12420:	ldrd	r0, [sp, #56]	; 0x38
   12424:	cmp	r3, r1
   12428:	cmpeq	r2, r0
   1242c:	bls	1295c <__assert_fail@plt+0x1858>
   12430:	mov	r3, r0
   12434:	orrs	r3, r3, r1
   12438:	movne	r3, #1
   1243c:	moveq	r3, #0
   12440:	str	r3, [sp, #48]	; 0x30
   12444:	ands	r3, r8, #16
   12448:	str	r3, [sp, #56]	; 0x38
   1244c:	beq	12828 <__assert_fail@plt+0x1724>
   12450:	ldr	r1, [sp, #24]
   12454:	mov	r3, #0
   12458:	mov	r2, r1
   1245c:	cmp	fp, r3
   12460:	cmpeq	sl, r1
   12464:	strd	r2, [sp, #40]	; 0x28
   12468:	bcc	12970 <__assert_fail@plt+0x186c>
   1246c:	mov	r5, #0
   12470:	mov	r6, r7
   12474:	str	r9, [sp, #64]	; 0x40
   12478:	str	r8, [sp, #68]	; 0x44
   1247c:	mov	r7, r1
   12480:	mov	r8, r5
   12484:	mov	r9, r4
   12488:	ldr	r5, [sp, #48]	; 0x30
   1248c:	b	124b8 <__assert_fail@plt+0x13b4>
   12490:	cmn	r5, r4
   12494:	movne	r5, #1
   12498:	moveq	r5, #0
   1249c:	ldrd	r2, [sp, #40]	; 0x28
   124a0:	add	r8, r8, #1
   124a4:	cmp	r3, fp
   124a8:	cmpeq	r2, sl
   124ac:	bhi	129cc <__assert_fail@plt+0x18c8>
   124b0:	cmp	r8, #8
   124b4:	beq	129a8 <__assert_fail@plt+0x18a4>
   124b8:	mov	r0, sl
   124bc:	mov	r1, fp
   124c0:	ldrd	r2, [sp, #40]	; 0x28
   124c4:	bl	16d24 <__assert_fail@plt+0x5c20>
   124c8:	mov	r1, r7
   124cc:	asr	r4, r5, #1
   124d0:	add	r2, r2, r2, lsl #2
   124d4:	add	r6, r6, r2, lsl #1
   124d8:	mov	r0, r6
   124dc:	bl	1670c <__assert_fail@plt+0x5608>
   124e0:	ldrd	r2, [sp, #40]	; 0x28
   124e4:	mov	r0, sl
   124e8:	add	r4, r4, r1, lsl #1
   124ec:	mov	r1, fp
   124f0:	bl	16d24 <__assert_fail@plt+0x5c20>
   124f4:	mov	sl, r0
   124f8:	mov	fp, r1
   124fc:	mov	r0, r6
   12500:	mov	r1, r7
   12504:	bl	16520 <__assert_fail@plt+0x541c>
   12508:	cmp	r7, r4
   1250c:	add	r3, r5, r4
   12510:	mov	r6, r0
   12514:	bhi	12490 <__assert_fail@plt+0x138c>
   12518:	cmp	r7, r3
   1251c:	movcs	r5, #2
   12520:	movcc	r5, #3
   12524:	b	1249c <__assert_fail@plt+0x1398>
   12528:	andeq	r0, r0, r0
   1252c:	mvnsmi	r0, #0
   12530:	andeq	r0, r0, r0
   12534:	eormi	r0, r4, r0
   12538:			; <UNDEFINED> instruction: 0x000173b4
   1253c:	andeq	r7, r1, r0, asr r0
   12540:	andeq	r7, r1, r0, asr #7
   12544:			; <UNDEFINED> instruction: 0x000173b8
   12548:	and	r7, r8, #3
   1254c:	cmp	r7, #1
   12550:	beq	12564 <__assert_fail@plt+0x1460>
   12554:	vldr	d7, [pc, #996]	; 12940 <__assert_fail@plt+0x183c>
   12558:	vcmpe.f64	d8, d7
   1255c:	vmrs	APSR_nzcv, fpscr
   12560:	bmi	12788 <__assert_fail@plt+0x1684>
   12564:	ldr	r4, [sp, #12]
   12568:	ldr	r3, [pc, #992]	; 12950 <__assert_fail@plt+0x184c>
   1256c:	mvn	r2, #0
   12570:	mov	r1, #1
   12574:	vstr	d8, [sp]
   12578:	mov	r0, r4
   1257c:	bl	10ffc <__sprintf_chk@plt>
   12580:	mov	r0, r4
   12584:	bl	10fd8 <strlen@plt>
   12588:	mov	r6, #0
   1258c:	mvn	r5, #0
   12590:	mov	r7, r0
   12594:	ldr	r3, [sp, #8]
   12598:	mov	r2, r7
   1259c:	sub	r4, r3, r7
   125a0:	mov	r0, r4
   125a4:	ldr	r1, [sp, #12]
   125a8:	bl	10e94 <memmove@plt>
   125ac:	sub	r7, r7, r6
   125b0:	add	r7, r4, r7
   125b4:	tst	r8, #4
   125b8:	bne	126f0 <__assert_fail@plt+0x15ec>
   125bc:	tst	r8, #128	; 0x80
   125c0:	beq	12658 <__assert_fail@plt+0x1554>
   125c4:	cmn	r5, #1
   125c8:	beq	127dc <__assert_fail@plt+0x16d8>
   125cc:	and	r3, r8, #256	; 0x100
   125d0:	orrs	r2, r5, r3
   125d4:	beq	12658 <__assert_fail@plt+0x1554>
   125d8:	tst	r8, #64	; 0x40
   125dc:	ldrne	r1, [sp, #12]
   125e0:	addne	r2, r1, #648	; 0x288
   125e4:	strne	r2, [sp, #8]
   125e8:	movne	r2, #32
   125ec:	strbne	r2, [r1, #647]	; 0x287
   125f0:	cmp	r5, #0
   125f4:	beq	12b0c <__assert_fail@plt+0x1a08>
   125f8:	ldr	r2, [sp, #20]
   125fc:	ldr	r0, [sp, #8]
   12600:	cmp	r2, #0
   12604:	cmpeq	r5, #1
   12608:	ldr	r2, [sp, #8]
   1260c:	ldrne	r1, [pc, #832]	; 12954 <__assert_fail@plt+0x1850>
   12610:	moveq	r1, #107	; 0x6b
   12614:	add	r2, r2, #1
   12618:	ldrbne	r1, [r1, r5]
   1261c:	cmp	r3, #0
   12620:	streq	r2, [sp, #8]
   12624:	strb	r1, [r0]
   12628:	beq	12658 <__assert_fail@plt+0x1554>
   1262c:	ldr	r3, [sp, #20]
   12630:	cmp	r5, #0
   12634:	cmpne	r3, #0
   12638:	movne	r2, r0
   1263c:	movne	r3, #105	; 0x69
   12640:	strbne	r3, [r2, #1]
   12644:	addne	r2, r2, #2
   12648:	mov	r3, #66	; 0x42
   1264c:	strb	r3, [r2]
   12650:	add	r3, r2, #1
   12654:	str	r3, [sp, #8]
   12658:	ldr	r2, [sp, #8]
   1265c:	mov	r3, #0
   12660:	mov	r0, r4
   12664:	strb	r3, [r2]
   12668:	add	sp, sp, #124	; 0x7c
   1266c:	vpop	{d8-d9}
   12670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12674:	ldr	r6, [sp, #12]
   12678:	ldr	r3, [pc, #728]	; 12958 <__assert_fail@plt+0x1854>
   1267c:	mvn	r2, #0
   12680:	ldr	r1, [sp, #16]
   12684:	mov	r0, r6
   12688:	vstr	d9, [sp]
   1268c:	bl	10ffc <__sprintf_chk@plt>
   12690:	mov	r0, r6
   12694:	bl	10fd8 <strlen@plt>
   12698:	ldr	r3, [sp, #20]
   1269c:	add	r6, r4, #1
   126a0:	cmp	r3, #0
   126a4:	movne	r3, #1
   126a8:	moveq	r3, #2
   126ac:	add	r3, r3, r6
   126b0:	cmp	r3, r0
   126b4:	mov	r7, r0
   126b8:	bcc	1299c <__assert_fail@plt+0x1898>
   126bc:	tst	r8, #8
   126c0:	beq	12594 <__assert_fail@plt+0x1490>
   126c4:	ldr	r3, [sp, #12]
   126c8:	add	r3, r3, r7
   126cc:	ldrb	r3, [r3, #-1]
   126d0:	cmp	r3, #48	; 0x30
   126d4:	bne	12594 <__assert_fail@plt+0x1490>
   126d8:	vldr	d7, [pc, #616]	; 12948 <__assert_fail@plt+0x1844>
   126dc:	ldr	r3, [sp, #16]
   126e0:	cmp	r3, #1
   126e4:	vmul.f64	d9, d9, d7
   126e8:	beq	12328 <__assert_fail@plt+0x1224>
   126ec:	b	122e0 <__assert_fail@plt+0x11dc>
   126f0:	ldr	r0, [sp, #28]
   126f4:	bl	10fd8 <strlen@plt>
   126f8:	sub	r6, r7, r4
   126fc:	mov	r1, r4
   12700:	mov	r2, r6
   12704:	mov	r3, #41	; 0x29
   12708:	mvn	sl, #0
   1270c:	mov	fp, r0
   12710:	add	r0, sp, #76	; 0x4c
   12714:	bl	10f24 <__memcpy_chk@plt>
   12718:	ldr	r4, [sp, #28]
   1271c:	b	12724 <__assert_fail@plt+0x1620>
   12720:	bl	10eb8 <memcpy@plt>
   12724:	ldrb	r3, [r9]
   12728:	cmp	r3, #0
   1272c:	beq	12740 <__assert_fail@plt+0x163c>
   12730:	cmp	r3, #255	; 0xff
   12734:	movne	sl, r3
   12738:	moveq	sl, r6
   1273c:	add	r9, r9, #1
   12740:	cmp	sl, r6
   12744:	movcs	sl, r6
   12748:	sub	r3, r7, sl
   1274c:	sub	r6, r6, sl
   12750:	add	r2, sp, #76	; 0x4c
   12754:	add	r1, r2, r6
   12758:	mov	r0, r3
   1275c:	mov	r2, sl
   12760:	sub	r7, r3, fp
   12764:	bl	10eb8 <memcpy@plt>
   12768:	cmp	r6, #0
   1276c:	mov	r2, fp
   12770:	mov	r1, r4
   12774:	mov	r3, r0
   12778:	mov	r0, r7
   1277c:	bne	12720 <__assert_fail@plt+0x161c>
   12780:	mov	r4, r3
   12784:	b	125bc <__assert_fail@plt+0x14b8>
   12788:	vmov	r0, r1, d8
   1278c:	bl	16d70 <__assert_fail@plt+0x5c6c>
   12790:	cmp	r7, #0
   12794:	mov	r4, r0
   12798:	mov	r5, r1
   1279c:	bne	127b8 <__assert_fail@plt+0x16b4>
   127a0:	bl	16cb0 <__assert_fail@plt+0x5bac>
   127a4:	vmov	d7, r0, r1
   127a8:	vcmp.f64	d7, d8
   127ac:	vmrs	APSR_nzcv, fpscr
   127b0:	movne	r6, #1
   127b4:	moveq	r6, #0
   127b8:	adds	r0, r4, r6
   127bc:	adc	r1, r5, #0
   127c0:	bl	16cb0 <__assert_fail@plt+0x5bac>
   127c4:	vmov	d8, r0, r1
   127c8:	b	12564 <__assert_fail@plt+0x1460>
   127cc:	mov	r3, #0
   127d0:	str	r3, [sp, #48]	; 0x30
   127d4:	mov	r7, r3
   127d8:	b	12444 <__assert_fail@plt+0x1340>
   127dc:	ldrd	r2, [sp, #184]	; 0xb8
   127e0:	cmp	r3, #0
   127e4:	cmpeq	r2, #1
   127e8:	bls	12a80 <__assert_fail@plt+0x197c>
   127ec:	ldr	r1, [sp, #24]
   127f0:	ldrd	r6, [sp, #184]	; 0xb8
   127f4:	mov	r5, #1
   127f8:	mov	r2, #1
   127fc:	mov	r3, #0
   12800:	mul	r0, r1, r3
   12804:	umull	r2, r3, r2, r1
   12808:	add	r3, r0, r3
   1280c:	cmp	r7, r3
   12810:	cmpeq	r6, r2
   12814:	bls	125cc <__assert_fail@plt+0x14c8>
   12818:	add	r5, r5, #1
   1281c:	cmp	r5, #8
   12820:	bne	12800 <__assert_fail@plt+0x16fc>
   12824:	b	125cc <__assert_fail@plt+0x14c8>
   12828:	ldr	r3, [sp, #8]
   1282c:	mvn	r5, #0
   12830:	str	r3, [sp, #36]	; 0x24
   12834:	ldr	r3, [sp, #16]
   12838:	cmp	r3, #1
   1283c:	beq	128c0 <__assert_fail@plt+0x17bc>
   12840:	ldr	r3, [sp, #16]
   12844:	cmp	r3, #0
   12848:	bne	128e8 <__assert_fail@plt+0x17e4>
   1284c:	ldr	r3, [sp, #48]	; 0x30
   12850:	add	r7, r7, r3
   12854:	cmp	r7, #0
   12858:	ble	128e8 <__assert_fail@plt+0x17e4>
   1285c:	ldr	r3, [sp, #56]	; 0x38
   12860:	adds	sl, sl, #1
   12864:	adc	fp, fp, #0
   12868:	cmp	r3, #0
   1286c:	beq	128e8 <__assert_fail@plt+0x17e4>
   12870:	mov	r3, #0
   12874:	ldr	r2, [sp, #24]
   12878:	cmp	r3, fp
   1287c:	cmpeq	r2, sl
   12880:	moveq	r3, #1
   12884:	movne	r3, #0
   12888:	cmp	r5, #7
   1288c:	movgt	r3, #0
   12890:	andle	r3, r3, #1
   12894:	cmp	r3, #0
   12898:	beq	128e8 <__assert_fail@plt+0x17e4>
   1289c:	tst	r8, #8
   128a0:	add	r5, r5, #1
   128a4:	beq	12ae0 <__assert_fail@plt+0x19dc>
   128a8:	ldr	r2, [sp, #36]	; 0x24
   128ac:	mov	r3, #49	; 0x31
   128b0:	sub	r4, r2, #1
   128b4:	strb	r3, [r2, #-1]
   128b8:	mov	r7, r2
   128bc:	b	125b4 <__assert_fail@plt+0x14b0>
   128c0:	ldr	r1, [sp, #48]	; 0x30
   128c4:	and	r2, sl, #1
   128c8:	adds	r2, r2, r1
   128cc:	mov	r3, #0
   128d0:	adc	r3, r3, r1, asr #31
   128d4:	orr	r2, r2, r3
   128d8:	cmp	r2, #0
   128dc:	addne	r7, r7, #1
   128e0:	cmp	r7, #5
   128e4:	bgt	1285c <__assert_fail@plt+0x1758>
   128e8:	ldr	r4, [sp, #36]	; 0x24
   128ec:	mov	r6, #10
   128f0:	mov	r7, #0
   128f4:	mov	r0, sl
   128f8:	mov	r1, fp
   128fc:	mov	r2, r6
   12900:	mov	r3, r7
   12904:	bl	16d24 <__assert_fail@plt+0x5c20>
   12908:	mov	r0, sl
   1290c:	mov	r1, fp
   12910:	mov	r3, r7
   12914:	add	r2, r2, #48	; 0x30
   12918:	strb	r2, [r4, #-1]!
   1291c:	mov	r2, r6
   12920:	bl	16d24 <__assert_fail@plt+0x5c20>
   12924:	mov	sl, r0
   12928:	mov	fp, r1
   1292c:	orrs	r3, sl, fp
   12930:	bne	128f4 <__assert_fail@plt+0x17f0>
   12934:	ldr	r7, [sp, #36]	; 0x24
   12938:	b	125b4 <__assert_fail@plt+0x14b0>
   1293c:	nop			; (mov r0, r0)
   12940:	andeq	r0, r0, r0
   12944:	mvnsmi	r0, #0
   12948:	andeq	r0, r0, r0
   1294c:	eormi	r0, r4, r0
   12950:			; <UNDEFINED> instruction: 0x000173b8
   12954:	muleq	r1, r4, r3
   12958:	andeq	r7, r1, r0, asr #7
   1295c:	movcc	r3, #3
   12960:	strcc	r3, [sp, #48]	; 0x30
   12964:	movcs	r3, #2
   12968:	strcs	r3, [sp, #48]	; 0x30
   1296c:	b	12444 <__assert_fail@plt+0x1340>
   12970:	ldr	r3, [sp, #8]
   12974:	mov	r5, #0
   12978:	str	r3, [sp, #36]	; 0x24
   1297c:	b	12834 <__assert_fail@plt+0x1730>
   12980:	bl	16cb0 <__assert_fail@plt+0x5bac>
   12984:	vmov	d7, r0, r1
   12988:	vcmp.f64	d7, d9
   1298c:	vmrs	APSR_nzcv, fpscr
   12990:	movne	r0, #1
   12994:	moveq	r0, #0
   12998:	b	12310 <__assert_fail@plt+0x120c>
   1299c:	vldr	d7, [pc, #380]	; 12b20 <__assert_fail@plt+0x1a1c>
   129a0:	vmul.f64	d9, d9, d7
   129a4:	b	12328 <__assert_fail@plt+0x1224>
   129a8:	ldr	r3, [sp, #8]
   129ac:	str	r5, [sp, #48]	; 0x30
   129b0:	mov	r4, r9
   129b4:	mov	r5, r8
   129b8:	mov	r7, r6
   129bc:	ldr	r9, [sp, #64]	; 0x40
   129c0:	ldr	r8, [sp, #68]	; 0x44
   129c4:	str	r3, [sp, #36]	; 0x24
   129c8:	b	12834 <__assert_fail@plt+0x1730>
   129cc:	cmp	fp, #0
   129d0:	cmpeq	sl, #9
   129d4:	str	r5, [sp, #48]	; 0x30
   129d8:	mov	r4, r9
   129dc:	mov	r5, r8
   129e0:	mov	r7, r6
   129e4:	ldr	r9, [sp, #64]	; 0x40
   129e8:	ldr	r8, [sp, #68]	; 0x44
   129ec:	bhi	12ad4 <__assert_fail@plt+0x19d0>
   129f0:	ldr	r3, [sp, #16]
   129f4:	cmp	r3, #1
   129f8:	beq	12a88 <__assert_fail@plt+0x1984>
   129fc:	ldr	r2, [sp, #48]	; 0x30
   12a00:	ldr	r3, [sp, #16]
   12a04:	cmp	r2, #0
   12a08:	clz	r3, r3
   12a0c:	lsr	r3, r3, #5
   12a10:	moveq	r3, #0
   12a14:	cmp	r3, #0
   12a18:	beq	12a68 <__assert_fail@plt+0x1964>
   12a1c:	add	r7, r7, #1
   12a20:	cmp	r7, #10
   12a24:	beq	12ab4 <__assert_fail@plt+0x19b0>
   12a28:	add	r7, r7, #48	; 0x30
   12a2c:	uxtb	r3, r7
   12a30:	ldr	r2, [sp, #36]	; 0x24
   12a34:	ldr	r1, [sp, #12]
   12a38:	add	r7, r2, #2
   12a3c:	sub	r2, r7, r4
   12a40:	str	r2, [sp, #36]	; 0x24
   12a44:	strb	r3, [r1, #646]	; 0x286
   12a48:	mov	r0, r2
   12a4c:	mov	r3, #0
   12a50:	mov	r2, r4
   12a54:	ldr	r1, [sp, #32]
   12a58:	mov	r7, r3
   12a5c:	str	r3, [sp, #48]	; 0x30
   12a60:	bl	10eb8 <memcpy@plt>
   12a64:	b	12834 <__assert_fail@plt+0x1730>
   12a68:	cmp	r7, #0
   12a6c:	bne	12a28 <__assert_fail@plt+0x1924>
   12a70:	tst	r8, #8
   12a74:	bne	12aa4 <__assert_fail@plt+0x19a0>
   12a78:	mov	r3, #48	; 0x30
   12a7c:	b	12a30 <__assert_fail@plt+0x192c>
   12a80:	mov	r5, #0
   12a84:	b	125cc <__assert_fail@plt+0x14c8>
   12a88:	ldr	r2, [sp, #48]	; 0x30
   12a8c:	and	r3, r6, #1
   12a90:	add	r3, r3, r2
   12a94:	cmp	r3, #2
   12a98:	movle	r3, #0
   12a9c:	movgt	r3, #1
   12aa0:	b	12a14 <__assert_fail@plt+0x1910>
   12aa4:	ldr	r3, [sp, #8]
   12aa8:	mov	r7, #0
   12aac:	str	r3, [sp, #36]	; 0x24
   12ab0:	b	12834 <__assert_fail@plt+0x1730>
   12ab4:	adds	sl, sl, #1
   12ab8:	adc	fp, fp, #0
   12abc:	cmp	fp, #0
   12ac0:	mov	r3, #0
   12ac4:	cmpeq	sl, #10
   12ac8:	str	r3, [sp, #48]	; 0x30
   12acc:	moveq	r7, r3
   12ad0:	bne	12a70 <__assert_fail@plt+0x196c>
   12ad4:	ldr	r3, [sp, #8]
   12ad8:	str	r3, [sp, #36]	; 0x24
   12adc:	b	12834 <__assert_fail@plt+0x1730>
   12ae0:	ldr	r1, [sp, #36]	; 0x24
   12ae4:	mvn	r3, r4
   12ae8:	add	r3, r1, r3
   12aec:	mov	r2, #48	; 0x30
   12af0:	strb	r2, [r1, #-1]
   12af4:	mov	r0, r3
   12af8:	ldr	r1, [sp, #32]
   12afc:	mov	r2, r4
   12b00:	str	r3, [sp, #36]	; 0x24
   12b04:	bl	10eb8 <memcpy@plt>
   12b08:	b	128a8 <__assert_fail@plt+0x17a4>
   12b0c:	cmp	r3, #0
   12b10:	ldrne	r2, [sp, #8]
   12b14:	bne	12648 <__assert_fail@plt+0x1544>
   12b18:	b	12658 <__assert_fail@plt+0x1554>
   12b1c:	nop			; (mov r0, r0)
   12b20:	andeq	r0, r0, r0
   12b24:	eormi	r0, r4, r0
   12b28:	push	{r4, r5, r6, r7, r8, lr}
   12b2c:	subs	r4, r0, #0
   12b30:	sub	sp, sp, #16
   12b34:	mov	r8, r1
   12b38:	mov	r7, r2
   12b3c:	beq	12c34 <__assert_fail@plt+0x1b30>
   12b40:	ldrb	r3, [r4]
   12b44:	ldr	r5, [pc, #360]	; 12cb4 <__assert_fail@plt+0x1bb0>
   12b48:	cmp	r3, #39	; 0x27
   12b4c:	addeq	r4, r4, #1
   12b50:	mov	r3, #4
   12b54:	add	r2, r5, #12
   12b58:	add	r1, r5, #20
   12b5c:	mov	r0, r4
   12b60:	moveq	r6, #4
   12b64:	movne	r6, #0
   12b68:	bl	15d6c <__assert_fail@plt+0x4c68>
   12b6c:	cmp	r0, #0
   12b70:	blt	12bd0 <__assert_fail@plt+0x1acc>
   12b74:	add	r5, r5, r0, lsl #2
   12b78:	mov	r1, #0
   12b7c:	ldr	ip, [r5, #12]
   12b80:	mov	r0, #1
   12b84:	mov	r2, r0
   12b88:	orr	r6, r6, ip
   12b8c:	mov	r3, r1
   12b90:	str	r0, [r7]
   12b94:	str	r1, [r7, #4]
   12b98:	mov	r0, #0
   12b9c:	str	r6, [r8]
   12ba0:	orrs	r3, r2, r3
   12ba4:	bne	12bc8 <__assert_fail@plt+0x1ac4>
   12ba8:	ldr	r0, [pc, #264]	; 12cb8 <__assert_fail@plt+0x1bb4>
   12bac:	bl	10f78 <getenv@plt>
   12bb0:	mov	r3, #0
   12bb4:	cmp	r0, #0
   12bb8:	movne	r2, #512	; 0x200
   12bbc:	moveq	r2, #1024	; 0x400
   12bc0:	mov	r0, #4
   12bc4:	strd	r2, [r7]
   12bc8:	add	sp, sp, #16
   12bcc:	pop	{r4, r5, r6, r7, r8, pc}
   12bd0:	ldr	r2, [pc, #228]	; 12cbc <__assert_fail@plt+0x1bb8>
   12bd4:	mov	r3, r7
   12bd8:	str	r2, [sp]
   12bdc:	add	r1, sp, #12
   12be0:	mov	r2, #0
   12be4:	mov	r0, r4
   12be8:	bl	156ec <__assert_fail@plt+0x45e8>
   12bec:	cmp	r0, #0
   12bf0:	bne	12c78 <__assert_fail@plt+0x1b74>
   12bf4:	ldrb	r3, [r4]
   12bf8:	sub	r3, r3, #48	; 0x30
   12bfc:	cmp	r3, #9
   12c00:	bls	12c2c <__assert_fail@plt+0x1b28>
   12c04:	ldr	r2, [sp, #12]
   12c08:	cmp	r4, r2
   12c0c:	bne	12c1c <__assert_fail@plt+0x1b18>
   12c10:	b	12c88 <__assert_fail@plt+0x1b84>
   12c14:	cmp	r2, r4
   12c18:	beq	12c88 <__assert_fail@plt+0x1b84>
   12c1c:	ldrb	r3, [r4, #1]!
   12c20:	sub	r3, r3, #48	; 0x30
   12c24:	cmp	r3, #9
   12c28:	bhi	12c14 <__assert_fail@plt+0x1b10>
   12c2c:	ldrd	r2, [r7]
   12c30:	b	12b98 <__assert_fail@plt+0x1a94>
   12c34:	ldr	r0, [pc, #132]	; 12cc0 <__assert_fail@plt+0x1bbc>
   12c38:	bl	10f78 <getenv@plt>
   12c3c:	subs	r4, r0, #0
   12c40:	bne	12b40 <__assert_fail@plt+0x1a3c>
   12c44:	ldr	r0, [pc, #120]	; 12cc4 <__assert_fail@plt+0x1bc0>
   12c48:	bl	10f78 <getenv@plt>
   12c4c:	subs	r4, r0, #0
   12c50:	bne	12b40 <__assert_fail@plt+0x1a3c>
   12c54:	ldr	r0, [pc, #92]	; 12cb8 <__assert_fail@plt+0x1bb4>
   12c58:	bl	10f78 <getenv@plt>
   12c5c:	mov	r3, #0
   12c60:	mov	r6, #0
   12c64:	cmp	r0, #0
   12c68:	movne	r2, #512	; 0x200
   12c6c:	moveq	r2, #1024	; 0x400
   12c70:	strd	r2, [r7]
   12c74:	b	12b98 <__assert_fail@plt+0x1a94>
   12c78:	mov	r3, #0
   12c7c:	str	r3, [r8]
   12c80:	ldrd	r2, [r7]
   12c84:	b	12ba0 <__assert_fail@plt+0x1a9c>
   12c88:	ldrb	r3, [r2, #-1]
   12c8c:	cmp	r3, #66	; 0x42
   12c90:	orrne	r6, r6, #128	; 0x80
   12c94:	beq	12ca0 <__assert_fail@plt+0x1b9c>
   12c98:	orr	r6, r6, #32
   12c9c:	b	12c2c <__assert_fail@plt+0x1b28>
   12ca0:	ldrb	r3, [r2, #-2]
   12ca4:	orr	r6, r6, #384	; 0x180
   12ca8:	cmp	r3, #105	; 0x69
   12cac:	bne	12c2c <__assert_fail@plt+0x1b28>
   12cb0:	b	12c98 <__assert_fail@plt+0x1b94>
   12cb4:	muleq	r1, r4, r3
   12cb8:	andeq	r7, r1, r0, ror #7
   12cbc:	strdeq	r7, [r1], -r0
   12cc0:	andeq	r7, r1, r8, asr #7
   12cc4:	ldrdeq	r7, [r1], -r4
   12cc8:	push	{r4, r5, r6, lr}
   12ccc:	subs	r4, r0, #0
   12cd0:	beq	12d44 <__assert_fail@plt+0x1c40>
   12cd4:	mov	r1, #47	; 0x2f
   12cd8:	bl	1108c <strrchr@plt>
   12cdc:	subs	r5, r0, #0
   12ce0:	beq	12d30 <__assert_fail@plt+0x1c2c>
   12ce4:	add	r6, r5, #1
   12ce8:	sub	r3, r6, r4
   12cec:	cmp	r3, #6
   12cf0:	ble	12d30 <__assert_fail@plt+0x1c2c>
   12cf4:	mov	r2, #7
   12cf8:	ldr	r1, [pc, #96]	; 12d60 <__assert_fail@plt+0x1c5c>
   12cfc:	sub	r0, r5, #6
   12d00:	bl	110e0 <strncmp@plt>
   12d04:	cmp	r0, #0
   12d08:	bne	12d30 <__assert_fail@plt+0x1c2c>
   12d0c:	mov	r2, #3
   12d10:	ldr	r1, [pc, #76]	; 12d64 <__assert_fail@plt+0x1c60>
   12d14:	mov	r0, r6
   12d18:	bl	110e0 <strncmp@plt>
   12d1c:	cmp	r0, #0
   12d20:	movne	r4, r6
   12d24:	ldreq	r3, [pc, #60]	; 12d68 <__assert_fail@plt+0x1c64>
   12d28:	addeq	r4, r5, #4
   12d2c:	streq	r4, [r3]
   12d30:	ldr	r2, [pc, #52]	; 12d6c <__assert_fail@plt+0x1c68>
   12d34:	ldr	r3, [pc, #52]	; 12d70 <__assert_fail@plt+0x1c6c>
   12d38:	str	r4, [r2]
   12d3c:	str	r4, [r3]
   12d40:	pop	{r4, r5, r6, pc}
   12d44:	ldr	r3, [pc, #40]	; 12d74 <__assert_fail@plt+0x1c70>
   12d48:	mov	r2, #55	; 0x37
   12d4c:	mov	r1, #1
   12d50:	ldr	r3, [r3]
   12d54:	ldr	r0, [pc, #28]	; 12d78 <__assert_fail@plt+0x1c74>
   12d58:	bl	10f30 <fwrite@plt>
   12d5c:	bl	110ec <abort@plt>
   12d60:	andeq	r7, r1, r0, asr r4
   12d64:	andeq	r7, r1, r8, asr r4
   12d68:	andeq	r8, r2, r8, asr r1
   12d6c:	andeq	r8, r2, ip, lsl #3
   12d70:	andeq	r8, r2, ip, asr r1
   12d74:	andeq	r8, r2, r8, ror #2
   12d78:	andeq	r7, r1, r8, lsl r4
   12d7c:	push	{r4, r5, r6, lr}
   12d80:	mov	r2, #48	; 0x30
   12d84:	mov	r4, r1
   12d88:	mov	r1, #0
   12d8c:	mov	r5, r0
   12d90:	bl	11020 <memset@plt>
   12d94:	cmp	r4, #10
   12d98:	beq	12da8 <__assert_fail@plt+0x1ca4>
   12d9c:	str	r4, [r5]
   12da0:	mov	r0, r5
   12da4:	pop	{r4, r5, r6, pc}
   12da8:	bl	110ec <abort@plt>
   12dac:	push	{r4, r5, r6, lr}
   12db0:	mov	r4, r0
   12db4:	mov	r5, r1
   12db8:	bl	16358 <__assert_fail@plt+0x5254>
   12dbc:	ldrb	r3, [r0]
   12dc0:	bic	r3, r3, #32
   12dc4:	cmp	r3, #85	; 0x55
   12dc8:	bne	12e28 <__assert_fail@plt+0x1d24>
   12dcc:	ldrb	r3, [r0, #1]
   12dd0:	bic	r3, r3, #32
   12dd4:	cmp	r3, #84	; 0x54
   12dd8:	bne	12e64 <__assert_fail@plt+0x1d60>
   12ddc:	ldrb	r3, [r0, #2]
   12de0:	bic	r3, r3, #32
   12de4:	cmp	r3, #70	; 0x46
   12de8:	bne	12e64 <__assert_fail@plt+0x1d60>
   12dec:	ldrb	r3, [r0, #3]
   12df0:	cmp	r3, #45	; 0x2d
   12df4:	bne	12e64 <__assert_fail@plt+0x1d60>
   12df8:	ldrb	r3, [r0, #4]
   12dfc:	cmp	r3, #56	; 0x38
   12e00:	bne	12e64 <__assert_fail@plt+0x1d60>
   12e04:	ldrb	r3, [r0, #5]
   12e08:	cmp	r3, #0
   12e0c:	bne	12e64 <__assert_fail@plt+0x1d60>
   12e10:	ldrb	r2, [r4]
   12e14:	ldr	r3, [pc, #152]	; 12eb4 <__assert_fail@plt+0x1db0>
   12e18:	ldr	r0, [pc, #152]	; 12eb8 <__assert_fail@plt+0x1db4>
   12e1c:	cmp	r2, #96	; 0x60
   12e20:	movne	r0, r3
   12e24:	pop	{r4, r5, r6, pc}
   12e28:	cmp	r3, #71	; 0x47
   12e2c:	bne	12e64 <__assert_fail@plt+0x1d60>
   12e30:	ldrb	r3, [r0, #1]
   12e34:	bic	r3, r3, #32
   12e38:	cmp	r3, #66	; 0x42
   12e3c:	bne	12e64 <__assert_fail@plt+0x1d60>
   12e40:	ldrb	r3, [r0, #2]
   12e44:	cmp	r3, #49	; 0x31
   12e48:	bne	12e64 <__assert_fail@plt+0x1d60>
   12e4c:	ldrb	r3, [r0, #3]
   12e50:	cmp	r3, #56	; 0x38
   12e54:	bne	12e64 <__assert_fail@plt+0x1d60>
   12e58:	ldrb	r3, [r0, #4]
   12e5c:	cmp	r3, #48	; 0x30
   12e60:	beq	12e78 <__assert_fail@plt+0x1d74>
   12e64:	ldr	r3, [pc, #80]	; 12ebc <__assert_fail@plt+0x1db8>
   12e68:	cmp	r5, #9
   12e6c:	ldr	r0, [pc, #76]	; 12ec0 <__assert_fail@plt+0x1dbc>
   12e70:	movne	r0, r3
   12e74:	pop	{r4, r5, r6, pc}
   12e78:	ldrb	r3, [r0, #5]
   12e7c:	cmp	r3, #51	; 0x33
   12e80:	bne	12e64 <__assert_fail@plt+0x1d60>
   12e84:	ldrb	r3, [r0, #6]
   12e88:	cmp	r3, #48	; 0x30
   12e8c:	bne	12e64 <__assert_fail@plt+0x1d60>
   12e90:	ldrb	r3, [r0, #7]
   12e94:	cmp	r3, #0
   12e98:	bne	12e64 <__assert_fail@plt+0x1d60>
   12e9c:	ldrb	r2, [r4]
   12ea0:	ldr	r3, [pc, #28]	; 12ec4 <__assert_fail@plt+0x1dc0>
   12ea4:	ldr	r0, [pc, #28]	; 12ec8 <__assert_fail@plt+0x1dc4>
   12ea8:	cmp	r2, #96	; 0x60
   12eac:	movne	r0, r3
   12eb0:	pop	{r4, r5, r6, pc}
   12eb4:			; <UNDEFINED> instruction: 0x000174b4
   12eb8:			; <UNDEFINED> instruction: 0x000174b0
   12ebc:	andeq	r7, r1, r4, asr #9
   12ec0:	andeq	r7, r1, r0, asr #9
   12ec4:			; <UNDEFINED> instruction: 0x000174bc
   12ec8:			; <UNDEFINED> instruction: 0x000174b8
   12ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ed0:	sub	sp, sp, #116	; 0x74
   12ed4:	mov	sl, r0
   12ed8:	str	r3, [sp, #24]
   12edc:	mov	r3, #1
   12ee0:	mov	r8, r1
   12ee4:	str	r2, [sp, #56]	; 0x38
   12ee8:	str	r3, [sp, #36]	; 0x24
   12eec:	bl	10f48 <__ctype_get_mb_cur_max@plt>
   12ef0:	ldr	r3, [sp, #156]	; 0x9c
   12ef4:	mov	fp, r8
   12ef8:	mov	r2, #0
   12efc:	lsr	r3, r3, #1
   12f00:	and	r3, r3, #1
   12f04:	str	r2, [sp, #68]	; 0x44
   12f08:	str	r3, [sp, #28]
   12f0c:	str	r2, [sp, #40]	; 0x28
   12f10:	str	r2, [sp, #44]	; 0x2c
   12f14:	str	r2, [sp, #52]	; 0x34
   12f18:	str	r2, [sp, #64]	; 0x40
   12f1c:	str	r2, [sp, #72]	; 0x48
   12f20:	str	sl, [sp, #32]
   12f24:	str	r0, [sp, #76]	; 0x4c
   12f28:	ldr	r3, [sp, #152]	; 0x98
   12f2c:	cmp	r3, #10
   12f30:	ldrls	pc, [pc, r3, lsl #2]
   12f34:	b	140f4 <__assert_fail@plt+0x2ff0>
   12f38:	andeq	r2, r1, r4, ror #30
   12f3c:	andeq	r3, r1, ip, asr #4
   12f40:	andeq	r3, r1, r0, ror r2
   12f44:	muleq	r1, r4, r2
   12f48:	andeq	r3, r1, r0, asr #7
   12f4c:	muleq	r1, r4, r3
   12f50:	andeq	r3, r1, ip, ror #6
   12f54:	andeq	r3, r1, r8, lsr #5
   12f58:	andeq	r3, r1, r0, asr #5
   12f5c:	andeq	r3, r1, r0, asr #5
   12f60:	andeq	r3, r1, r0, asr #5
   12f64:	mov	r3, #0
   12f68:	mov	r7, r3
   12f6c:	str	r3, [sp, #28]
   12f70:	ldr	r3, [sp, #44]	; 0x2c
   12f74:	mov	sl, #0
   12f78:	eor	r3, r3, #1
   12f7c:	str	r3, [sp, #60]	; 0x3c
   12f80:	ldr	r3, [sp, #24]
   12f84:	cmn	r3, #1
   12f88:	beq	134ec <__assert_fail@plt+0x23e8>
   12f8c:	ldr	r3, [sp, #24]
   12f90:	subs	r5, r3, sl
   12f94:	movne	r5, #1
   12f98:	cmp	r5, #0
   12f9c:	beq	13504 <__assert_fail@plt+0x2400>
   12fa0:	ldr	r3, [sp, #152]	; 0x98
   12fa4:	ldr	r8, [sp, #44]	; 0x2c
   12fa8:	cmp	r3, #2
   12fac:	moveq	r8, #0
   12fb0:	andne	r8, r8, #1
   12fb4:	ldr	r3, [sp, #52]	; 0x34
   12fb8:	adds	r9, r3, #0
   12fbc:	movne	r9, #1
   12fc0:	ands	r6, r9, r8
   12fc4:	beq	1396c <__assert_fail@plt+0x2868>
   12fc8:	ldr	r2, [sp, #52]	; 0x34
   12fcc:	ldr	r1, [sp, #24]
   12fd0:	cmp	r2, #1
   12fd4:	mov	r3, r2
   12fd8:	movls	r3, #0
   12fdc:	movhi	r3, #1
   12fe0:	cmn	r1, #1
   12fe4:	movne	r3, #0
   12fe8:	cmp	r3, #0
   12fec:	add	r4, sl, r2
   12ff0:	beq	13000 <__assert_fail@plt+0x1efc>
   12ff4:	ldr	r0, [sp, #56]	; 0x38
   12ff8:	bl	10fd8 <strlen@plt>
   12ffc:	str	r0, [sp, #24]
   13000:	ldr	r3, [sp, #24]
   13004:	cmp	r3, r4
   13008:	ldr	r3, [sp, #56]	; 0x38
   1300c:	add	r3, r3, sl
   13010:	str	r3, [sp, #48]	; 0x30
   13014:	bcc	13978 <__assert_fail@plt+0x2874>
   13018:	mov	r0, r3
   1301c:	ldr	r2, [sp, #52]	; 0x34
   13020:	ldr	r1, [sp, #64]	; 0x40
   13024:	bl	10edc <memcmp@plt>
   13028:	cmp	r0, #0
   1302c:	bne	13978 <__assert_fail@plt+0x2874>
   13030:	ldr	r3, [sp, #28]
   13034:	cmp	r3, #0
   13038:	bne	141f4 <__assert_fail@plt+0x30f0>
   1303c:	ldr	r3, [sp, #48]	; 0x30
   13040:	ldrb	r4, [r3]
   13044:	cmp	r4, #126	; 0x7e
   13048:	ldrls	pc, [pc, r4, lsl #2]
   1304c:	b	1390c <__assert_fail@plt+0x2808>
   13050:	andeq	r3, r1, r0, lsr r7
   13054:	andeq	r3, r1, ip, lsl #18
   13058:	andeq	r3, r1, ip, lsl #18
   1305c:	andeq	r3, r1, ip, lsl #18
   13060:	andeq	r3, r1, ip, lsl #18
   13064:	andeq	r3, r1, ip, lsl #18
   13068:	andeq	r3, r1, ip, lsl #18
   1306c:	andeq	r3, r1, r4, lsl r7
   13070:	strdeq	r3, [r1], -r8
   13074:	strdeq	r3, [r1], -r4
   13078:	andeq	r3, r1, r8, asr r6
   1307c:	andeq	r3, r1, ip, lsr r6
   13080:	ldrdeq	r3, [r1], -r0
   13084:	andeq	r3, r1, ip, lsr #17
   13088:	andeq	r3, r1, ip, lsl #18
   1308c:	andeq	r3, r1, ip, lsl #18
   13090:	andeq	r3, r1, ip, lsl #18
   13094:	andeq	r3, r1, ip, lsl #18
   13098:	andeq	r3, r1, ip, lsl #18
   1309c:	andeq	r3, r1, ip, lsl #18
   130a0:	andeq	r3, r1, ip, lsl #18
   130a4:	andeq	r3, r1, ip, lsl #18
   130a8:	andeq	r3, r1, ip, lsl #18
   130ac:	andeq	r3, r1, ip, lsl #18
   130b0:	andeq	r3, r1, ip, lsl #18
   130b4:	andeq	r3, r1, ip, lsl #18
   130b8:	andeq	r3, r1, ip, lsl #18
   130bc:	andeq	r3, r1, ip, lsl #18
   130c0:	andeq	r3, r1, ip, lsl #18
   130c4:	andeq	r3, r1, ip, lsl #18
   130c8:	andeq	r3, r1, ip, lsl #18
   130cc:	andeq	r3, r1, ip, lsl #18
   130d0:	andeq	r3, r1, ip, ror #17
   130d4:	andeq	r3, r1, r0, lsr #16
   130d8:	andeq	r3, r1, r0, lsr #16
   130dc:	andeq	r3, r1, r0, lsr r4
   130e0:	andeq	r3, r1, r0, lsr #16
   130e4:			; <UNDEFINED> instruction: 0x000138b8
   130e8:	andeq	r3, r1, r0, lsr #16
   130ec:	andeq	r3, r1, ip, lsl #17
   130f0:	andeq	r3, r1, r0, lsr #16
   130f4:	andeq	r3, r1, r0, lsr #16
   130f8:	andeq	r3, r1, r0, lsr #16
   130fc:			; <UNDEFINED> instruction: 0x000138b8
   13100:			; <UNDEFINED> instruction: 0x000138b8
   13104:			; <UNDEFINED> instruction: 0x000138b8
   13108:			; <UNDEFINED> instruction: 0x000138b8
   1310c:			; <UNDEFINED> instruction: 0x000138b8
   13110:			; <UNDEFINED> instruction: 0x000138b8
   13114:			; <UNDEFINED> instruction: 0x000138b8
   13118:			; <UNDEFINED> instruction: 0x000138b8
   1311c:			; <UNDEFINED> instruction: 0x000138b8
   13120:			; <UNDEFINED> instruction: 0x000138b8
   13124:			; <UNDEFINED> instruction: 0x000138b8
   13128:			; <UNDEFINED> instruction: 0x000138b8
   1312c:			; <UNDEFINED> instruction: 0x000138b8
   13130:			; <UNDEFINED> instruction: 0x000138b8
   13134:			; <UNDEFINED> instruction: 0x000138b8
   13138:			; <UNDEFINED> instruction: 0x000138b8
   1313c:	andeq	r3, r1, r0, lsr #16
   13140:	andeq	r3, r1, r0, lsr #16
   13144:	andeq	r3, r1, r0, lsr #16
   13148:	andeq	r3, r1, r0, lsr #16
   1314c:	andeq	r3, r1, ip, asr r8
   13150:	andeq	r3, r1, ip, lsl #18
   13154:			; <UNDEFINED> instruction: 0x000138b8
   13158:			; <UNDEFINED> instruction: 0x000138b8
   1315c:			; <UNDEFINED> instruction: 0x000138b8
   13160:			; <UNDEFINED> instruction: 0x000138b8
   13164:			; <UNDEFINED> instruction: 0x000138b8
   13168:			; <UNDEFINED> instruction: 0x000138b8
   1316c:			; <UNDEFINED> instruction: 0x000138b8
   13170:			; <UNDEFINED> instruction: 0x000138b8
   13174:			; <UNDEFINED> instruction: 0x000138b8
   13178:			; <UNDEFINED> instruction: 0x000138b8
   1317c:			; <UNDEFINED> instruction: 0x000138b8
   13180:			; <UNDEFINED> instruction: 0x000138b8
   13184:			; <UNDEFINED> instruction: 0x000138b8
   13188:			; <UNDEFINED> instruction: 0x000138b8
   1318c:			; <UNDEFINED> instruction: 0x000138b8
   13190:			; <UNDEFINED> instruction: 0x000138b8
   13194:			; <UNDEFINED> instruction: 0x000138b8
   13198:			; <UNDEFINED> instruction: 0x000138b8
   1319c:			; <UNDEFINED> instruction: 0x000138b8
   131a0:			; <UNDEFINED> instruction: 0x000138b8
   131a4:			; <UNDEFINED> instruction: 0x000138b8
   131a8:			; <UNDEFINED> instruction: 0x000138b8
   131ac:			; <UNDEFINED> instruction: 0x000138b8
   131b0:			; <UNDEFINED> instruction: 0x000138b8
   131b4:			; <UNDEFINED> instruction: 0x000138b8
   131b8:			; <UNDEFINED> instruction: 0x000138b8
   131bc:	andeq	r3, r1, r0, lsr #16
   131c0:	andeq	r3, r1, ip, ror r5
   131c4:			; <UNDEFINED> instruction: 0x000138b8
   131c8:	andeq	r3, r1, r0, lsr #16
   131cc:			; <UNDEFINED> instruction: 0x000138b8
   131d0:	andeq	r3, r1, r0, lsr #16
   131d4:			; <UNDEFINED> instruction: 0x000138b8
   131d8:			; <UNDEFINED> instruction: 0x000138b8
   131dc:			; <UNDEFINED> instruction: 0x000138b8
   131e0:			; <UNDEFINED> instruction: 0x000138b8
   131e4:			; <UNDEFINED> instruction: 0x000138b8
   131e8:			; <UNDEFINED> instruction: 0x000138b8
   131ec:			; <UNDEFINED> instruction: 0x000138b8
   131f0:			; <UNDEFINED> instruction: 0x000138b8
   131f4:			; <UNDEFINED> instruction: 0x000138b8
   131f8:			; <UNDEFINED> instruction: 0x000138b8
   131fc:			; <UNDEFINED> instruction: 0x000138b8
   13200:			; <UNDEFINED> instruction: 0x000138b8
   13204:			; <UNDEFINED> instruction: 0x000138b8
   13208:			; <UNDEFINED> instruction: 0x000138b8
   1320c:			; <UNDEFINED> instruction: 0x000138b8
   13210:			; <UNDEFINED> instruction: 0x000138b8
   13214:			; <UNDEFINED> instruction: 0x000138b8
   13218:			; <UNDEFINED> instruction: 0x000138b8
   1321c:			; <UNDEFINED> instruction: 0x000138b8
   13220:			; <UNDEFINED> instruction: 0x000138b8
   13224:			; <UNDEFINED> instruction: 0x000138b8
   13228:			; <UNDEFINED> instruction: 0x000138b8
   1322c:			; <UNDEFINED> instruction: 0x000138b8
   13230:			; <UNDEFINED> instruction: 0x000138b8
   13234:			; <UNDEFINED> instruction: 0x000138b8
   13238:			; <UNDEFINED> instruction: 0x000138b8
   1323c:	andeq	r3, r1, r0, lsl r4
   13240:	andeq	r3, r1, r0, lsr #16
   13244:	andeq	r3, r1, r0, lsl r4
   13248:	andeq	r3, r1, r0, lsr r4
   1324c:	mov	r3, #1
   13250:	str	r3, [sp, #28]
   13254:	str	r3, [sp, #52]	; 0x34
   13258:	ldr	r3, [pc, #4000]	; 14200 <__assert_fail@plt+0x30fc>
   1325c:	mov	r7, #0
   13260:	str	r3, [sp, #64]	; 0x40
   13264:	mov	r3, #2
   13268:	str	r3, [sp, #152]	; 0x98
   1326c:	b	12f70 <__assert_fail@plt+0x1e6c>
   13270:	ldr	r3, [sp, #28]
   13274:	cmp	r3, #0
   13278:	beq	133d4 <__assert_fail@plt+0x22d0>
   1327c:	mov	r3, #1
   13280:	str	r3, [sp, #52]	; 0x34
   13284:	ldr	r3, [pc, #3956]	; 14200 <__assert_fail@plt+0x30fc>
   13288:	mov	r7, #0
   1328c:	str	r3, [sp, #64]	; 0x40
   13290:	b	12f70 <__assert_fail@plt+0x1e6c>
   13294:	mov	r3, #1
   13298:	str	r3, [sp, #44]	; 0x2c
   1329c:	str	r3, [sp, #52]	; 0x34
   132a0:	str	r3, [sp, #28]
   132a4:	b	13258 <__assert_fail@plt+0x2154>
   132a8:	mov	r3, #0
   132ac:	str	r3, [sp, #28]
   132b0:	mov	r3, #1
   132b4:	str	r3, [sp, #44]	; 0x2c
   132b8:	mov	r7, #0
   132bc:	b	12f70 <__assert_fail@plt+0x1e6c>
   132c0:	ldr	r3, [sp, #152]	; 0x98
   132c4:	cmp	r3, #10
   132c8:	beq	1330c <__assert_fail@plt+0x2208>
   132cc:	mov	r2, #5
   132d0:	ldr	r1, [pc, #3884]	; 14204 <__assert_fail@plt+0x3100>
   132d4:	mov	r0, #0
   132d8:	bl	10ef4 <dcgettext@plt>
   132dc:	ldr	r2, [pc, #3872]	; 14204 <__assert_fail@plt+0x3100>
   132e0:	cmp	r0, r2
   132e4:	str	r0, [sp, #164]	; 0xa4
   132e8:	beq	142f0 <__assert_fail@plt+0x31ec>
   132ec:	mov	r2, #5
   132f0:	ldr	r1, [pc, #3848]	; 14200 <__assert_fail@plt+0x30fc>
   132f4:	mov	r0, #0
   132f8:	bl	10ef4 <dcgettext@plt>
   132fc:	ldr	r2, [pc, #3836]	; 14200 <__assert_fail@plt+0x30fc>
   13300:	cmp	r0, r2
   13304:	str	r0, [sp, #168]	; 0xa8
   13308:	beq	142e0 <__assert_fail@plt+0x31dc>
   1330c:	ldr	r7, [sp, #28]
   13310:	cmp	r7, #0
   13314:	movne	r7, #0
   13318:	bne	1334c <__assert_fail@plt+0x2248>
   1331c:	ldr	r3, [sp, #164]	; 0xa4
   13320:	ldrb	r3, [r3]
   13324:	cmp	r3, #0
   13328:	beq	14300 <__assert_fail@plt+0x31fc>
   1332c:	ldr	r2, [sp, #164]	; 0xa4
   13330:	ldr	r1, [sp, #32]
   13334:	cmp	fp, r7
   13338:	strbhi	r3, [r1, r7]
   1333c:	ldrb	r3, [r2, #1]!
   13340:	add	r7, r7, #1
   13344:	cmp	r3, #0
   13348:	bne	13334 <__assert_fail@plt+0x2230>
   1334c:	ldr	r0, [sp, #168]	; 0xa8
   13350:	bl	10fd8 <strlen@plt>
   13354:	ldr	r3, [sp, #168]	; 0xa8
   13358:	str	r3, [sp, #64]	; 0x40
   1335c:	mov	r3, #1
   13360:	str	r3, [sp, #44]	; 0x2c
   13364:	str	r0, [sp, #52]	; 0x34
   13368:	b	12f70 <__assert_fail@plt+0x1e6c>
   1336c:	mov	r3, #1
   13370:	str	r3, [sp, #44]	; 0x2c
   13374:	str	r3, [sp, #52]	; 0x34
   13378:	str	r3, [sp, #28]
   1337c:	ldr	r3, [pc, #3716]	; 14208 <__assert_fail@plt+0x3104>
   13380:	mov	r7, #0
   13384:	str	r3, [sp, #64]	; 0x40
   13388:	mov	r3, #5
   1338c:	str	r3, [sp, #152]	; 0x98
   13390:	b	12f70 <__assert_fail@plt+0x1e6c>
   13394:	ldr	r3, [sp, #28]
   13398:	cmp	r3, #0
   1339c:	beq	1409c <__assert_fail@plt+0x2f98>
   133a0:	ldr	r3, [sp, #28]
   133a4:	mov	r7, #0
   133a8:	str	r3, [sp, #44]	; 0x2c
   133ac:	mov	r3, #1
   133b0:	str	r3, [sp, #52]	; 0x34
   133b4:	ldr	r3, [pc, #3660]	; 14208 <__assert_fail@plt+0x3104>
   133b8:	str	r3, [sp, #64]	; 0x40
   133bc:	b	12f70 <__assert_fail@plt+0x1e6c>
   133c0:	ldr	r3, [sp, #28]
   133c4:	cmp	r3, #0
   133c8:	mov	r3, #1
   133cc:	streq	r3, [sp, #44]	; 0x2c
   133d0:	bne	13254 <__assert_fail@plt+0x2150>
   133d4:	cmp	fp, #0
   133d8:	beq	140cc <__assert_fail@plt+0x2fc8>
   133dc:	ldr	r3, [sp, #32]
   133e0:	mov	r2, #39	; 0x27
   133e4:	mov	r7, #1
   133e8:	strb	r2, [r3]
   133ec:	mov	r3, #0
   133f0:	str	r3, [sp, #28]
   133f4:	mov	r3, #1
   133f8:	str	r3, [sp, #52]	; 0x34
   133fc:	ldr	r3, [pc, #3580]	; 14200 <__assert_fail@plt+0x30fc>
   13400:	str	r3, [sp, #64]	; 0x40
   13404:	mov	r3, #2
   13408:	str	r3, [sp, #152]	; 0x98
   1340c:	b	12f70 <__assert_fail@plt+0x1e6c>
   13410:	ldr	r3, [sp, #24]
   13414:	cmn	r3, #1
   13418:	beq	14030 <__assert_fail@plt+0x2f2c>
   1341c:	ldr	r3, [sp, #24]
   13420:	subs	r3, r3, #1
   13424:	movne	r3, #1
   13428:	cmp	r3, #0
   1342c:	bne	13438 <__assert_fail@plt+0x2334>
   13430:	cmp	sl, #0
   13434:	beq	13824 <__assert_fail@plt+0x2720>
   13438:	ldr	r3, [sp, #152]	; 0x98
   1343c:	mov	r5, #0
   13440:	sub	r2, r3, #2
   13444:	mov	r8, r5
   13448:	clz	r2, r2
   1344c:	lsr	r2, r2, #5
   13450:	ldr	r3, [sp, #60]	; 0x3c
   13454:	ldr	r1, [sp, #28]
   13458:	orr	r3, r2, r3
   1345c:	eor	r3, r3, #1
   13460:	orr	r3, r1, r3
   13464:	tst	r3, #255	; 0xff
   13468:	bne	13b94 <__assert_fail@plt+0x2a90>
   1346c:	cmp	r6, #0
   13470:	bne	135c0 <__assert_fail@plt+0x24bc>
   13474:	ldr	r3, [sp, #40]	; 0x28
   13478:	eor	r8, r8, #1
   1347c:	and	r8, r8, r3
   13480:	add	sl, sl, #1
   13484:	uxtb	r6, r8
   13488:	cmp	r6, #0
   1348c:	beq	134c0 <__assert_fail@plt+0x23bc>
   13490:	cmp	fp, r7
   13494:	movhi	r2, #39	; 0x27
   13498:	ldrhi	r3, [sp, #32]
   1349c:	strbhi	r2, [r3, r7]
   134a0:	add	r3, r7, #1
   134a4:	cmp	fp, r3
   134a8:	movhi	r1, #39	; 0x27
   134ac:	ldrhi	r2, [sp, #32]
   134b0:	add	r7, r7, #2
   134b4:	strbhi	r1, [r2, r3]
   134b8:	mov	r3, #0
   134bc:	str	r3, [sp, #40]	; 0x28
   134c0:	cmp	r7, fp
   134c4:	ldrcc	r3, [sp, #32]
   134c8:	strbcc	r4, [r3, r7]
   134cc:	ldr	r3, [sp, #36]	; 0x24
   134d0:	cmp	r5, #0
   134d4:	moveq	r3, #0
   134d8:	str	r3, [sp, #36]	; 0x24
   134dc:	ldr	r3, [sp, #24]
   134e0:	add	r7, r7, #1
   134e4:	cmn	r3, #1
   134e8:	bne	12f8c <__assert_fail@plt+0x1e88>
   134ec:	ldr	r3, [sp, #56]	; 0x38
   134f0:	ldrb	r5, [r3, sl]
   134f4:	adds	r5, r5, #0
   134f8:	movne	r5, #1
   134fc:	cmp	r5, #0
   13500:	bne	12fa0 <__assert_fail@plt+0x1e9c>
   13504:	ldr	r3, [sp, #152]	; 0x98
   13508:	ldr	r1, [sp, #28]
   1350c:	sub	r3, r3, #2
   13510:	clz	r3, r3
   13514:	lsr	r3, r3, #5
   13518:	and	r9, r1, r3
   1351c:	cmp	r7, #0
   13520:	movne	r2, #0
   13524:	andeq	r2, r9, #1
   13528:	cmp	r2, #0
   1352c:	bne	13f08 <__assert_fail@plt+0x2e04>
   13530:	eor	r2, r1, #1
   13534:	ands	r3, r3, r2
   13538:	beq	143c4 <__assert_fail@plt+0x32c0>
   1353c:	ldr	r2, [sp, #68]	; 0x44
   13540:	cmp	r2, #0
   13544:	beq	143b0 <__assert_fail@plt+0x32ac>
   13548:	ldr	r3, [sp, #36]	; 0x24
   1354c:	cmp	r3, #0
   13550:	bne	14368 <__assert_fail@plt+0x3264>
   13554:	ldr	r2, [sp, #72]	; 0x48
   13558:	clz	r3, fp
   1355c:	cmp	r2, #0
   13560:	lsr	r3, r3, #5
   13564:	moveq	r3, #0
   13568:	cmp	r3, #0
   1356c:	beq	14308 <__assert_fail@plt+0x3204>
   13570:	str	r3, [sp, #68]	; 0x44
   13574:	ldr	fp, [sp, #72]	; 0x48
   13578:	b	12f28 <__assert_fail@plt+0x1e24>
   1357c:	ldr	r3, [sp, #152]	; 0x98
   13580:	cmp	r3, #2
   13584:	beq	13bd8 <__assert_fail@plt+0x2ad4>
   13588:	ldr	r3, [sp, #44]	; 0x2c
   1358c:	ldr	r2, [sp, #28]
   13590:	and	r2, r3, r2
   13594:	ands	r2, r9, r2
   13598:	bne	13be4 <__assert_fail@plt+0x2ae0>
   1359c:	mov	r4, #92	; 0x5c
   135a0:	mov	r3, r4
   135a4:	ldr	r1, [sp, #44]	; 0x2c
   135a8:	cmp	r1, #0
   135ac:	moveq	r5, #0
   135b0:	moveq	r8, r1
   135b4:	beq	13450 <__assert_fail@plt+0x234c>
   135b8:	mov	r4, r3
   135bc:	mov	r5, #0
   135c0:	ldr	r3, [sp, #28]
   135c4:	cmp	r3, #0
   135c8:	bne	13bcc <__assert_fail@plt+0x2ac8>
   135cc:	ldr	r3, [sp, #40]	; 0x28
   135d0:	eor	r9, r3, #1
   135d4:	and	r9, r9, r2
   135d8:	ands	r9, r9, #255	; 0xff
   135dc:	beq	13620 <__assert_fail@plt+0x251c>
   135e0:	cmp	fp, r7
   135e4:	movhi	r2, #39	; 0x27
   135e8:	ldrhi	r3, [sp, #32]
   135ec:	str	r9, [sp, #40]	; 0x28
   135f0:	strbhi	r2, [r3, r7]
   135f4:	add	r3, r7, #1
   135f8:	cmp	fp, r3
   135fc:	movhi	r1, #36	; 0x24
   13600:	ldrhi	r2, [sp, #32]
   13604:	strbhi	r1, [r2, r3]
   13608:	add	r3, r7, #2
   1360c:	cmp	fp, r3
   13610:	add	r7, r7, #3
   13614:	ldrhi	r2, [sp, #32]
   13618:	movhi	r1, #39	; 0x27
   1361c:	strbhi	r1, [r2, r3]
   13620:	cmp	fp, r7
   13624:	movhi	r2, #92	; 0x5c
   13628:	ldrhi	r3, [sp, #32]
   1362c:	add	sl, sl, #1
   13630:	strbhi	r2, [r3, r7]
   13634:	add	r7, r7, #1
   13638:	b	134c0 <__assert_fail@plt+0x23bc>
   1363c:	ldr	r3, [sp, #152]	; 0x98
   13640:	mov	r4, #11
   13644:	sub	r2, r3, #2
   13648:	mov	r3, #118	; 0x76
   1364c:	clz	r2, r2
   13650:	lsr	r2, r2, #5
   13654:	b	135a4 <__assert_fail@plt+0x24a0>
   13658:	mov	r4, #10
   1365c:	mov	r3, #110	; 0x6e
   13660:	ldr	r2, [sp, #152]	; 0x98
   13664:	ldr	r1, [sp, #28]
   13668:	sub	r2, r2, #2
   1366c:	clz	r2, r2
   13670:	lsr	r2, r2, #5
   13674:	ands	r1, r1, r2
   13678:	beq	135a4 <__assert_fail@plt+0x24a0>
   1367c:	ldr	sl, [sp, #32]
   13680:	mov	r8, fp
   13684:	mov	r2, r1
   13688:	mov	r3, #2
   1368c:	str	r3, [sp, #152]	; 0x98
   13690:	ldr	r9, [sp, #44]	; 0x2c
   13694:	ldr	r3, [sp, #152]	; 0x98
   13698:	and	r9, r9, r2
   1369c:	tst	r9, #255	; 0xff
   136a0:	movne	r3, #4
   136a4:	str	r3, [sp, #152]	; 0x98
   136a8:	ldr	r3, [sp, #156]	; 0x9c
   136ac:	mov	ip, #0
   136b0:	bic	r3, r3, #2
   136b4:	str	r3, [sp, #4]
   136b8:	ldr	r3, [sp, #168]	; 0xa8
   136bc:	ldr	r2, [sp, #56]	; 0x38
   136c0:	str	r3, [sp, #16]
   136c4:	ldr	r3, [sp, #164]	; 0xa4
   136c8:	mov	r1, r8
   136cc:	str	r3, [sp, #12]
   136d0:	ldr	r3, [sp, #152]	; 0x98
   136d4:	mov	r0, sl
   136d8:	str	r3, [sp]
   136dc:	str	ip, [sp, #8]
   136e0:	ldr	r3, [sp, #24]
   136e4:	bl	12ecc <__assert_fail@plt+0x1dc8>
   136e8:	mov	fp, r0
   136ec:	mov	r0, fp
   136f0:	add	sp, sp, #116	; 0x74
   136f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136f8:	ldr	r3, [sp, #152]	; 0x98
   136fc:	mov	r4, #8
   13700:	sub	r2, r3, #2
   13704:	mov	r3, #98	; 0x62
   13708:	clz	r2, r2
   1370c:	lsr	r2, r2, #5
   13710:	b	135a4 <__assert_fail@plt+0x24a0>
   13714:	ldr	r3, [sp, #152]	; 0x98
   13718:	mov	r4, #7
   1371c:	sub	r2, r3, #2
   13720:	mov	r3, #97	; 0x61
   13724:	clz	r2, r2
   13728:	lsr	r2, r2, #5
   1372c:	b	135a4 <__assert_fail@plt+0x24a0>
   13730:	ldr	r3, [sp, #44]	; 0x2c
   13734:	cmp	r3, #0
   13738:	beq	13f1c <__assert_fail@plt+0x2e18>
   1373c:	ldr	r3, [sp, #28]
   13740:	cmp	r3, #0
   13744:	bne	141f4 <__assert_fail@plt+0x30f0>
   13748:	ldr	r3, [sp, #152]	; 0x98
   1374c:	sub	r2, r3, #2
   13750:	ldr	r3, [sp, #40]	; 0x28
   13754:	clz	r2, r2
   13758:	eor	r3, r3, #1
   1375c:	lsr	r2, r2, #5
   13760:	ands	r3, r2, r3
   13764:	moveq	r1, r7
   13768:	beq	137ac <__assert_fail@plt+0x26a8>
   1376c:	cmp	fp, r7
   13770:	movhi	r0, #39	; 0x27
   13774:	ldrhi	r1, [sp, #32]
   13778:	str	r3, [sp, #40]	; 0x28
   1377c:	strbhi	r0, [r1, r7]
   13780:	add	r1, r7, #1
   13784:	cmp	fp, r1
   13788:	movhi	ip, #36	; 0x24
   1378c:	ldrhi	r0, [sp, #32]
   13790:	strbhi	ip, [r0, r1]
   13794:	add	r1, r7, #2
   13798:	cmp	fp, r1
   1379c:	movhi	ip, #39	; 0x27
   137a0:	ldrhi	r0, [sp, #32]
   137a4:	strbhi	ip, [r0, r1]
   137a8:	add	r1, r7, #3
   137ac:	cmp	fp, r1
   137b0:	movhi	r0, #92	; 0x5c
   137b4:	ldrhi	r3, [sp, #32]
   137b8:	add	r7, r1, #1
   137bc:	strbhi	r0, [r3, r1]
   137c0:	cmp	r8, #0
   137c4:	beq	14108 <__assert_fail@plt+0x3004>
   137c8:	ldr	r0, [sp, #24]
   137cc:	add	r3, sl, #1
   137d0:	cmp	r3, r0
   137d4:	bcs	14044 <__assert_fail@plt+0x2f40>
   137d8:	ldr	r0, [sp, #56]	; 0x38
   137dc:	ldrb	r3, [r0, r3]
   137e0:	sub	r3, r3, #48	; 0x30
   137e4:	cmp	r3, #9
   137e8:	bhi	14044 <__assert_fail@plt+0x2f40>
   137ec:	cmp	fp, r7
   137f0:	movhi	r3, #48	; 0x30
   137f4:	ldrhi	r0, [sp, #32]
   137f8:	ldr	r5, [sp, #28]
   137fc:	mov	r4, #48	; 0x30
   13800:	strbhi	r3, [r0, r7]
   13804:	add	r3, r1, #2
   13808:	cmp	fp, r3
   1380c:	movhi	r0, #48	; 0x30
   13810:	ldrhi	ip, [sp, #32]
   13814:	add	r7, r1, #3
   13818:	strbhi	r0, [ip, r3]
   1381c:	b	13450 <__assert_fail@plt+0x234c>
   13820:	mov	r5, #0
   13824:	ldr	r3, [sp, #152]	; 0x98
   13828:	sub	r2, r3, #2
   1382c:	ldr	r3, [sp, #28]
   13830:	clz	r2, r2
   13834:	lsr	r2, r2, #5
   13838:	ands	r8, r3, r2
   1383c:	beq	13450 <__assert_fail@plt+0x234c>
   13840:	mov	r3, r8
   13844:	mov	r2, r3
   13848:	mov	r3, #2
   1384c:	ldr	sl, [sp, #32]
   13850:	mov	r8, fp
   13854:	str	r3, [sp, #152]	; 0x98
   13858:	b	13690 <__assert_fail@plt+0x258c>
   1385c:	ldr	r3, [sp, #152]	; 0x98
   13860:	cmp	r3, #2
   13864:	beq	13f88 <__assert_fail@plt+0x2e84>
   13868:	cmp	r3, #5
   1386c:	beq	13f48 <__assert_fail@plt+0x2e44>
   13870:	mov	r5, #0
   13874:	sub	r2, r3, #2
   13878:	mov	r8, r5
   1387c:	clz	r2, r2
   13880:	mov	r4, #63	; 0x3f
   13884:	lsr	r2, r2, #5
   13888:	b	13450 <__assert_fail@plt+0x234c>
   1388c:	ldr	r3, [sp, #152]	; 0x98
   13890:	cmp	r3, #2
   13894:	beq	13fa8 <__assert_fail@plt+0x2ea4>
   13898:	mov	r2, #0
   1389c:	str	r5, [sp, #68]	; 0x44
   138a0:	mov	r8, r2
   138a4:	mov	r4, #39	; 0x27
   138a8:	b	13450 <__assert_fail@plt+0x234c>
   138ac:	mov	r4, #13
   138b0:	mov	r3, #114	; 0x72
   138b4:	b	13660 <__assert_fail@plt+0x255c>
   138b8:	ldr	r3, [sp, #152]	; 0x98
   138bc:	mov	r8, #0
   138c0:	sub	r2, r3, #2
   138c4:	clz	r2, r2
   138c8:	lsr	r2, r2, #5
   138cc:	b	13450 <__assert_fail@plt+0x234c>
   138d0:	ldr	r3, [sp, #152]	; 0x98
   138d4:	mov	r4, #12
   138d8:	sub	r2, r3, #2
   138dc:	mov	r3, #102	; 0x66
   138e0:	clz	r2, r2
   138e4:	lsr	r2, r2, #5
   138e8:	b	135a4 <__assert_fail@plt+0x24a0>
   138ec:	mov	r5, r6
   138f0:	b	13824 <__assert_fail@plt+0x2720>
   138f4:	ldr	r3, [sp, #152]	; 0x98
   138f8:	sub	r2, r3, #2
   138fc:	mov	r3, #116	; 0x74
   13900:	clz	r2, r2
   13904:	lsr	r2, r2, #5
   13908:	b	135a4 <__assert_fail@plt+0x24a0>
   1390c:	ldr	r8, [sp, #76]	; 0x4c
   13910:	cmp	r8, #1
   13914:	bne	13dc4 <__assert_fail@plt+0x2cc0>
   13918:	bl	10fc0 <__ctype_b_loc@plt>
   1391c:	sxth	r3, r4
   13920:	mov	ip, r8
   13924:	lsl	r3, r3, #1
   13928:	ldr	r2, [r0]
   1392c:	ldrh	r3, [r2, r3]
   13930:	and	r3, r3, #16384	; 0x4000
   13934:	cmp	r3, #0
   13938:	movne	r5, #1
   1393c:	moveq	r5, #0
   13940:	moveq	r3, #1
   13944:	movne	r3, #0
   13948:	ldr	r2, [sp, #44]	; 0x2c
   1394c:	and	r3, r3, r2
   13950:	ands	r8, r3, #255	; 0xff
   13954:	bne	13c58 <__assert_fail@plt+0x2b54>
   13958:	ldr	r3, [sp, #152]	; 0x98
   1395c:	sub	r2, r3, #2
   13960:	clz	r2, r2
   13964:	lsr	r2, r2, #5
   13968:	b	13450 <__assert_fail@plt+0x234c>
   1396c:	ldr	r3, [sp, #56]	; 0x38
   13970:	add	r3, r3, sl
   13974:	str	r3, [sp, #48]	; 0x30
   13978:	ldr	r3, [sp, #48]	; 0x30
   1397c:	mov	r6, #0
   13980:	ldrb	r4, [r3]
   13984:	cmp	r4, #126	; 0x7e
   13988:	ldrls	pc, [pc, r4, lsl #2]
   1398c:	b	1390c <__assert_fail@plt+0x2808>
   13990:	andeq	r3, r1, r0, lsr r7
   13994:	andeq	r3, r1, ip, lsl #18
   13998:	andeq	r3, r1, ip, lsl #18
   1399c:	andeq	r3, r1, ip, lsl #18
   139a0:	andeq	r3, r1, ip, lsl #18
   139a4:	andeq	r3, r1, ip, lsl #18
   139a8:	andeq	r3, r1, ip, lsl #18
   139ac:	andeq	r3, r1, r4, lsl r7
   139b0:	strdeq	r3, [r1], -r8
   139b4:	andeq	r3, r1, ip, lsl #23
   139b8:	andeq	r3, r1, r8, asr r6
   139bc:	andeq	r3, r1, ip, lsr r6
   139c0:	ldrdeq	r3, [r1], -r0
   139c4:	andeq	r3, r1, ip, lsr #17
   139c8:	andeq	r3, r1, ip, lsl #18
   139cc:	andeq	r3, r1, ip, lsl #18
   139d0:	andeq	r3, r1, ip, lsl #18
   139d4:	andeq	r3, r1, ip, lsl #18
   139d8:	andeq	r3, r1, ip, lsl #18
   139dc:	andeq	r3, r1, ip, lsl #18
   139e0:	andeq	r3, r1, ip, lsl #18
   139e4:	andeq	r3, r1, ip, lsl #18
   139e8:	andeq	r3, r1, ip, lsl #18
   139ec:	andeq	r3, r1, ip, lsl #18
   139f0:	andeq	r3, r1, ip, lsl #18
   139f4:	andeq	r3, r1, ip, lsl #18
   139f8:	andeq	r3, r1, ip, lsl #18
   139fc:	andeq	r3, r1, ip, lsl #18
   13a00:	andeq	r3, r1, ip, lsl #18
   13a04:	andeq	r3, r1, ip, lsl #18
   13a08:	andeq	r3, r1, ip, lsl #18
   13a0c:	andeq	r3, r1, ip, lsl #18
   13a10:	andeq	r3, r1, r4, lsr #16
   13a14:	andeq	r3, r1, r0, lsr #16
   13a18:	andeq	r3, r1, r0, lsr #16
   13a1c:	andeq	r3, r1, r0, lsr r4
   13a20:	andeq	r3, r1, r0, lsr #16
   13a24:			; <UNDEFINED> instruction: 0x000138b8
   13a28:	andeq	r3, r1, r0, lsr #16
   13a2c:	andeq	r3, r1, ip, lsl #17
   13a30:	andeq	r3, r1, r0, lsr #16
   13a34:	andeq	r3, r1, r0, lsr #16
   13a38:	andeq	r3, r1, r0, lsr #16
   13a3c:			; <UNDEFINED> instruction: 0x000138b8
   13a40:			; <UNDEFINED> instruction: 0x000138b8
   13a44:			; <UNDEFINED> instruction: 0x000138b8
   13a48:			; <UNDEFINED> instruction: 0x000138b8
   13a4c:			; <UNDEFINED> instruction: 0x000138b8
   13a50:			; <UNDEFINED> instruction: 0x000138b8
   13a54:			; <UNDEFINED> instruction: 0x000138b8
   13a58:			; <UNDEFINED> instruction: 0x000138b8
   13a5c:			; <UNDEFINED> instruction: 0x000138b8
   13a60:			; <UNDEFINED> instruction: 0x000138b8
   13a64:			; <UNDEFINED> instruction: 0x000138b8
   13a68:			; <UNDEFINED> instruction: 0x000138b8
   13a6c:			; <UNDEFINED> instruction: 0x000138b8
   13a70:			; <UNDEFINED> instruction: 0x000138b8
   13a74:			; <UNDEFINED> instruction: 0x000138b8
   13a78:			; <UNDEFINED> instruction: 0x000138b8
   13a7c:	andeq	r3, r1, r0, lsr #16
   13a80:	andeq	r3, r1, r0, lsr #16
   13a84:	andeq	r3, r1, r0, lsr #16
   13a88:	andeq	r3, r1, r0, lsr #16
   13a8c:	andeq	r3, r1, ip, asr r8
   13a90:	andeq	r3, r1, ip, lsl #18
   13a94:			; <UNDEFINED> instruction: 0x000138b8
   13a98:			; <UNDEFINED> instruction: 0x000138b8
   13a9c:			; <UNDEFINED> instruction: 0x000138b8
   13aa0:			; <UNDEFINED> instruction: 0x000138b8
   13aa4:			; <UNDEFINED> instruction: 0x000138b8
   13aa8:			; <UNDEFINED> instruction: 0x000138b8
   13aac:			; <UNDEFINED> instruction: 0x000138b8
   13ab0:			; <UNDEFINED> instruction: 0x000138b8
   13ab4:			; <UNDEFINED> instruction: 0x000138b8
   13ab8:			; <UNDEFINED> instruction: 0x000138b8
   13abc:			; <UNDEFINED> instruction: 0x000138b8
   13ac0:			; <UNDEFINED> instruction: 0x000138b8
   13ac4:			; <UNDEFINED> instruction: 0x000138b8
   13ac8:			; <UNDEFINED> instruction: 0x000138b8
   13acc:			; <UNDEFINED> instruction: 0x000138b8
   13ad0:			; <UNDEFINED> instruction: 0x000138b8
   13ad4:			; <UNDEFINED> instruction: 0x000138b8
   13ad8:			; <UNDEFINED> instruction: 0x000138b8
   13adc:			; <UNDEFINED> instruction: 0x000138b8
   13ae0:			; <UNDEFINED> instruction: 0x000138b8
   13ae4:			; <UNDEFINED> instruction: 0x000138b8
   13ae8:			; <UNDEFINED> instruction: 0x000138b8
   13aec:			; <UNDEFINED> instruction: 0x000138b8
   13af0:			; <UNDEFINED> instruction: 0x000138b8
   13af4:			; <UNDEFINED> instruction: 0x000138b8
   13af8:			; <UNDEFINED> instruction: 0x000138b8
   13afc:	andeq	r3, r1, r0, lsr #16
   13b00:	andeq	r3, r1, ip, ror r5
   13b04:			; <UNDEFINED> instruction: 0x000138b8
   13b08:	andeq	r3, r1, r0, lsr #16
   13b0c:			; <UNDEFINED> instruction: 0x000138b8
   13b10:	andeq	r3, r1, r0, lsr #16
   13b14:			; <UNDEFINED> instruction: 0x000138b8
   13b18:			; <UNDEFINED> instruction: 0x000138b8
   13b1c:			; <UNDEFINED> instruction: 0x000138b8
   13b20:			; <UNDEFINED> instruction: 0x000138b8
   13b24:			; <UNDEFINED> instruction: 0x000138b8
   13b28:			; <UNDEFINED> instruction: 0x000138b8
   13b2c:			; <UNDEFINED> instruction: 0x000138b8
   13b30:			; <UNDEFINED> instruction: 0x000138b8
   13b34:			; <UNDEFINED> instruction: 0x000138b8
   13b38:			; <UNDEFINED> instruction: 0x000138b8
   13b3c:			; <UNDEFINED> instruction: 0x000138b8
   13b40:			; <UNDEFINED> instruction: 0x000138b8
   13b44:			; <UNDEFINED> instruction: 0x000138b8
   13b48:			; <UNDEFINED> instruction: 0x000138b8
   13b4c:			; <UNDEFINED> instruction: 0x000138b8
   13b50:			; <UNDEFINED> instruction: 0x000138b8
   13b54:			; <UNDEFINED> instruction: 0x000138b8
   13b58:			; <UNDEFINED> instruction: 0x000138b8
   13b5c:			; <UNDEFINED> instruction: 0x000138b8
   13b60:			; <UNDEFINED> instruction: 0x000138b8
   13b64:			; <UNDEFINED> instruction: 0x000138b8
   13b68:			; <UNDEFINED> instruction: 0x000138b8
   13b6c:			; <UNDEFINED> instruction: 0x000138b8
   13b70:			; <UNDEFINED> instruction: 0x000138b8
   13b74:			; <UNDEFINED> instruction: 0x000138b8
   13b78:			; <UNDEFINED> instruction: 0x000138b8
   13b7c:	andeq	r3, r1, r0, lsl r4
   13b80:	andeq	r3, r1, r0, lsr #16
   13b84:	andeq	r3, r1, r0, lsl r4
   13b88:	andeq	r3, r1, r0, lsr r4
   13b8c:	mov	r3, #116	; 0x74
   13b90:	b	13660 <__assert_fail@plt+0x255c>
   13b94:	ldr	r3, [sp, #160]	; 0xa0
   13b98:	cmp	r3, #0
   13b9c:	beq	1346c <__assert_fail@plt+0x2368>
   13ba0:	lsr	r3, r4, #5
   13ba4:	ldr	r0, [sp, #160]	; 0xa0
   13ba8:	uxtb	r3, r3
   13bac:	and	r1, r4, #31
   13bb0:	ldr	r0, [r0, r3, lsl #2]
   13bb4:	lsr	r3, r0, r1
   13bb8:	tst	r3, #1
   13bbc:	beq	1346c <__assert_fail@plt+0x2368>
   13bc0:	ldr	r3, [sp, #28]
   13bc4:	cmp	r3, #0
   13bc8:	beq	135cc <__assert_fail@plt+0x24c8>
   13bcc:	ldr	sl, [sp, #32]
   13bd0:	mov	r8, fp
   13bd4:	b	13690 <__assert_fail@plt+0x258c>
   13bd8:	ldr	r3, [sp, #28]
   13bdc:	cmp	r3, #0
   13be0:	bne	14134 <__assert_fail@plt+0x3030>
   13be4:	add	sl, sl, #1
   13be8:	ldr	r6, [sp, #40]	; 0x28
   13bec:	mov	r5, #0
   13bf0:	mov	r4, #92	; 0x5c
   13bf4:	b	13488 <__assert_fail@plt+0x2384>
   13bf8:	cmp	r9, r8
   13bfc:	bne	13e6c <__assert_fail@plt+0x2d68>
   13c00:	ldr	r0, [sp, #100]	; 0x64
   13c04:	bl	10f18 <iswprint@plt>
   13c08:	add	r5, r5, r4
   13c0c:	cmp	r0, #0
   13c10:	add	r0, sp, #104	; 0x68
   13c14:	moveq	r6, #0
   13c18:	bl	10ed0 <mbsinit@plt>
   13c1c:	cmp	r0, #0
   13c20:	beq	13e00 <__assert_fail@plt+0x2cfc>
   13c24:	mov	r2, r6
   13c28:	mov	ip, r5
   13c2c:	eor	r5, r2, #1
   13c30:	ldr	r4, [sp, #80]	; 0x50
   13c34:	ldr	r6, [sp, #84]	; 0x54
   13c38:	ldr	r7, [sp, #88]	; 0x58
   13c3c:	uxtb	r5, r5
   13c40:	cmp	ip, #1
   13c44:	bls	14144 <__assert_fail@plt+0x3040>
   13c48:	ldr	r3, [sp, #44]	; 0x2c
   13c4c:	and	r8, r3, r5
   13c50:	mov	r5, r2
   13c54:	uxtb	r8, r8
   13c58:	add	r2, sl, ip
   13c5c:	ldr	r0, [sp, #48]	; 0x30
   13c60:	mov	r1, #0
   13c64:	str	r5, [sp, #48]	; 0x30
   13c68:	ldr	r9, [sp, #28]
   13c6c:	ldr	ip, [sp, #40]	; 0x28
   13c70:	ldr	r3, [sp, #32]
   13c74:	ldr	r5, [sp, #152]	; 0x98
   13c78:	b	13d34 <__assert_fail@plt+0x2c30>
   13c7c:	cmp	r9, #0
   13c80:	bne	14058 <__assert_fail@plt+0x2f54>
   13c84:	eor	r1, ip, #1
   13c88:	cmp	r5, #2
   13c8c:	movne	r1, #0
   13c90:	andeq	r1, r1, #1
   13c94:	cmp	r1, #0
   13c98:	beq	13cd0 <__assert_fail@plt+0x2bcc>
   13c9c:	cmp	fp, r7
   13ca0:	movhi	ip, #39	; 0x27
   13ca4:	strbhi	ip, [r3, r7]
   13ca8:	add	ip, r7, #1
   13cac:	cmp	fp, ip
   13cb0:	movhi	lr, #36	; 0x24
   13cb4:	strbhi	lr, [r3, ip]
   13cb8:	add	ip, r7, #2
   13cbc:	cmp	fp, ip
   13cc0:	movhi	lr, #39	; 0x27
   13cc4:	strbhi	lr, [r3, ip]
   13cc8:	add	r7, r7, #3
   13ccc:	mov	ip, r1
   13cd0:	cmp	fp, r7
   13cd4:	movhi	r1, #92	; 0x5c
   13cd8:	strbhi	r1, [r3, r7]
   13cdc:	add	r1, r7, #1
   13ce0:	cmp	fp, r1
   13ce4:	lsrhi	lr, r4, #6
   13ce8:	addhi	lr, lr, #48	; 0x30
   13cec:	strbhi	lr, [r3, r1]
   13cf0:	add	lr, r7, #2
   13cf4:	cmp	fp, lr
   13cf8:	lsrhi	r1, r4, #3
   13cfc:	andhi	r1, r1, #7
   13d00:	addhi	r1, r1, #48	; 0x30
   13d04:	add	sl, sl, #1
   13d08:	strbhi	r1, [r3, lr]
   13d0c:	and	r4, r4, #7
   13d10:	cmp	r2, sl
   13d14:	add	r4, r4, #48	; 0x30
   13d18:	add	r7, r7, #3
   13d1c:	bls	1407c <__assert_fail@plt+0x2f78>
   13d20:	mov	r1, r8
   13d24:	cmp	fp, r7
   13d28:	strbhi	r4, [r3, r7]
   13d2c:	ldrb	r4, [r0, #1]!
   13d30:	add	r7, r7, #1
   13d34:	cmp	r8, #0
   13d38:	bne	13c7c <__assert_fail@plt+0x2b78>
   13d3c:	cmp	r6, #0
   13d40:	bne	13d90 <__assert_fail@plt+0x2c8c>
   13d44:	eor	r6, r1, #1
   13d48:	and	r6, r6, ip
   13d4c:	add	sl, sl, #1
   13d50:	cmp	r2, sl
   13d54:	uxtb	r6, r6
   13d58:	bls	13db8 <__assert_fail@plt+0x2cb4>
   13d5c:	cmp	r6, #0
   13d60:	beq	13d24 <__assert_fail@plt+0x2c20>
   13d64:	cmp	fp, r7
   13d68:	movhi	ip, #39	; 0x27
   13d6c:	strbhi	ip, [r3, r7]
   13d70:	add	ip, r7, #1
   13d74:	cmp	fp, ip
   13d78:	movhi	lr, #39	; 0x27
   13d7c:	strbhi	lr, [r3, ip]
   13d80:	add	r7, r7, #2
   13d84:	mov	r6, r8
   13d88:	mov	ip, r8
   13d8c:	b	13d24 <__assert_fail@plt+0x2c20>
   13d90:	cmp	fp, r7
   13d94:	eor	r6, r1, #1
   13d98:	movhi	lr, #92	; 0x5c
   13d9c:	and	r6, r6, ip
   13da0:	add	sl, sl, #1
   13da4:	strbhi	lr, [r3, r7]
   13da8:	cmp	r2, sl
   13dac:	add	r7, r7, #1
   13db0:	uxtb	r6, r6
   13db4:	bhi	13d5c <__assert_fail@plt+0x2c58>
   13db8:	str	ip, [sp, #40]	; 0x28
   13dbc:	ldr	r5, [sp, #48]	; 0x30
   13dc0:	b	13488 <__assert_fail@plt+0x2384>
   13dc4:	ldr	r3, [sp, #24]
   13dc8:	cmn	r3, #1
   13dcc:	mov	r3, #0
   13dd0:	str	r3, [sp, #104]	; 0x68
   13dd4:	str	r3, [sp, #108]	; 0x6c
   13dd8:	beq	140f8 <__assert_fail@plt+0x2ff4>
   13ddc:	mov	r2, r5
   13de0:	mov	r3, #0
   13de4:	str	r7, [sp, #88]	; 0x58
   13de8:	ldr	r7, [sp, #152]	; 0x98
   13dec:	str	r5, [sp, #92]	; 0x5c
   13df0:	str	r6, [sp, #84]	; 0x54
   13df4:	mov	r5, r3
   13df8:	mov	r6, r2
   13dfc:	str	r4, [sp, #80]	; 0x50
   13e00:	ldr	r3, [sp, #56]	; 0x38
   13e04:	add	r9, sl, r5
   13e08:	add	r8, r3, r9
   13e0c:	ldr	r3, [sp, #24]
   13e10:	mov	r1, r8
   13e14:	sub	r2, r3, r9
   13e18:	add	r0, sp, #100	; 0x64
   13e1c:	add	r3, sp, #104	; 0x68
   13e20:	bl	1638c <__assert_fail@plt+0x5288>
   13e24:	subs	r4, r0, #0
   13e28:	beq	141d0 <__assert_fail@plt+0x30cc>
   13e2c:	cmn	r4, #1
   13e30:	beq	141b0 <__assert_fail@plt+0x30ac>
   13e34:	cmn	r4, #2
   13e38:	beq	14150 <__assert_fail@plt+0x304c>
   13e3c:	ldr	r2, [sp, #28]
   13e40:	cmp	r7, #2
   13e44:	movne	r2, #0
   13e48:	andeq	r2, r2, #1
   13e4c:	cmp	r2, #0
   13e50:	beq	13c00 <__assert_fail@plt+0x2afc>
   13e54:	cmp	r4, #1
   13e58:	beq	13c00 <__assert_fail@plt+0x2afc>
   13e5c:	sub	r3, r4, #1
   13e60:	add	r9, r3, r9
   13e64:	ldr	r3, [sp, #56]	; 0x38
   13e68:	add	r9, r3, r9
   13e6c:	ldrb	r3, [r8, #1]!
   13e70:	sub	r3, r3, #91	; 0x5b
   13e74:	cmp	r3, #33	; 0x21
   13e78:	ldrls	pc, [pc, r3, lsl #2]
   13e7c:	b	13bf8 <__assert_fail@plt+0x2af4>
   13e80:	andeq	r3, r1, r8, lsl #30
   13e84:	andeq	r3, r1, r8, lsl #30
   13e88:	strdeq	r3, [r1], -r8
   13e8c:	andeq	r3, r1, r8, lsl #30
   13e90:	strdeq	r3, [r1], -r8
   13e94:	andeq	r3, r1, r8, lsl #30
   13e98:	strdeq	r3, [r1], -r8
   13e9c:	strdeq	r3, [r1], -r8
   13ea0:	strdeq	r3, [r1], -r8
   13ea4:	strdeq	r3, [r1], -r8
   13ea8:	strdeq	r3, [r1], -r8
   13eac:	strdeq	r3, [r1], -r8
   13eb0:	strdeq	r3, [r1], -r8
   13eb4:	strdeq	r3, [r1], -r8
   13eb8:	strdeq	r3, [r1], -r8
   13ebc:	strdeq	r3, [r1], -r8
   13ec0:	strdeq	r3, [r1], -r8
   13ec4:	strdeq	r3, [r1], -r8
   13ec8:	strdeq	r3, [r1], -r8
   13ecc:	strdeq	r3, [r1], -r8
   13ed0:	strdeq	r3, [r1], -r8
   13ed4:	strdeq	r3, [r1], -r8
   13ed8:	strdeq	r3, [r1], -r8
   13edc:	strdeq	r3, [r1], -r8
   13ee0:	strdeq	r3, [r1], -r8
   13ee4:	strdeq	r3, [r1], -r8
   13ee8:	strdeq	r3, [r1], -r8
   13eec:	strdeq	r3, [r1], -r8
   13ef0:	strdeq	r3, [r1], -r8
   13ef4:	strdeq	r3, [r1], -r8
   13ef8:	strdeq	r3, [r1], -r8
   13efc:	strdeq	r3, [r1], -r8
   13f00:	strdeq	r3, [r1], -r8
   13f04:	andeq	r3, r1, r8, lsl #30
   13f08:	mov	r3, #2
   13f0c:	ldr	sl, [sp, #32]
   13f10:	mov	r8, fp
   13f14:	str	r3, [sp, #152]	; 0x98
   13f18:	b	13690 <__assert_fail@plt+0x258c>
   13f1c:	ldr	r3, [sp, #156]	; 0x9c
   13f20:	tst	r3, #1
   13f24:	bne	14050 <__assert_fail@plt+0x2f4c>
   13f28:	ldr	r3, [sp, #152]	; 0x98
   13f2c:	ldr	r4, [sp, #44]	; 0x2c
   13f30:	sub	r2, r3, #2
   13f34:	mov	r5, #0
   13f38:	clz	r2, r2
   13f3c:	mov	r8, r4
   13f40:	lsr	r2, r2, #5
   13f44:	b	13450 <__assert_fail@plt+0x234c>
   13f48:	ldr	r3, [sp, #156]	; 0x9c
   13f4c:	ands	r9, r3, #4
   13f50:	beq	14088 <__assert_fail@plt+0x2f84>
   13f54:	ldr	r2, [sp, #24]
   13f58:	add	r3, sl, #2
   13f5c:	cmp	r3, r2
   13f60:	bcs	13f74 <__assert_fail@plt+0x2e70>
   13f64:	ldr	r2, [sp, #48]	; 0x30
   13f68:	ldrb	r4, [r2, #1]
   13f6c:	cmp	r4, #63	; 0x3f
   13f70:	beq	14210 <__assert_fail@plt+0x310c>
   13f74:	mov	r2, #0
   13f78:	mov	r8, r2
   13f7c:	mov	r5, r2
   13f80:	mov	r4, #63	; 0x3f
   13f84:	b	13450 <__assert_fail@plt+0x234c>
   13f88:	ldr	r3, [sp, #28]
   13f8c:	cmp	r3, #0
   13f90:	bne	142b4 <__assert_fail@plt+0x31b0>
   13f94:	mov	r2, r5
   13f98:	mov	r8, r3
   13f9c:	mov	r5, #0
   13fa0:	mov	r4, #63	; 0x3f
   13fa4:	b	13450 <__assert_fail@plt+0x234c>
   13fa8:	ldr	r3, [sp, #28]
   13fac:	cmp	r3, #0
   13fb0:	bne	142b4 <__assert_fail@plt+0x31b0>
   13fb4:	ldr	r2, [sp, #72]	; 0x48
   13fb8:	adds	r3, fp, #0
   13fbc:	movne	r3, #1
   13fc0:	cmp	r2, #0
   13fc4:	movne	r3, #0
   13fc8:	cmp	r3, #0
   13fcc:	strne	fp, [sp, #72]	; 0x48
   13fd0:	movne	fp, #0
   13fd4:	bne	14010 <__assert_fail@plt+0x2f0c>
   13fd8:	cmp	fp, r7
   13fdc:	movhi	r2, #39	; 0x27
   13fe0:	ldrhi	r3, [sp, #32]
   13fe4:	strbhi	r2, [r3, r7]
   13fe8:	add	r3, r7, #1
   13fec:	cmp	fp, r3
   13ff0:	movhi	r1, #92	; 0x5c
   13ff4:	ldrhi	r2, [sp, #32]
   13ff8:	strbhi	r1, [r2, r3]
   13ffc:	add	r3, r7, #2
   14000:	cmp	fp, r3
   14004:	movhi	r1, #39	; 0x27
   14008:	ldrhi	r2, [sp, #32]
   1400c:	strbhi	r1, [r2, r3]
   14010:	ldr	r3, [sp, #28]
   14014:	add	r7, r7, #3
   14018:	mov	r2, r5
   1401c:	mov	r8, r3
   14020:	str	r5, [sp, #68]	; 0x44
   14024:	str	r3, [sp, #40]	; 0x28
   14028:	mov	r4, #39	; 0x27
   1402c:	b	13450 <__assert_fail@plt+0x234c>
   14030:	ldr	r3, [sp, #56]	; 0x38
   14034:	ldrb	r3, [r3, #1]
   14038:	adds	r3, r3, #0
   1403c:	movne	r3, #1
   14040:	b	13428 <__assert_fail@plt+0x2324>
   14044:	ldr	r5, [sp, #28]
   14048:	mov	r4, #48	; 0x30
   1404c:	b	13450 <__assert_fail@plt+0x234c>
   14050:	add	sl, sl, #1
   14054:	b	12f80 <__assert_fail@plt+0x1e7c>
   14058:	mov	sl, r3
   1405c:	ldr	r3, [sp, #28]
   14060:	mov	r8, fp
   14064:	str	r3, [sp, #44]	; 0x2c
   14068:	ldr	r3, [sp, #152]	; 0x98
   1406c:	sub	r2, r3, #2
   14070:	clz	r2, r2
   14074:	lsr	r2, r2, #5
   14078:	b	13690 <__assert_fail@plt+0x258c>
   1407c:	str	ip, [sp, #40]	; 0x28
   14080:	ldr	r5, [sp, #48]	; 0x30
   14084:	b	134c0 <__assert_fail@plt+0x23bc>
   14088:	mov	r2, r9
   1408c:	mov	r8, r9
   14090:	mov	r5, #0
   14094:	mov	r4, #63	; 0x3f
   14098:	b	13450 <__assert_fail@plt+0x234c>
   1409c:	cmp	fp, #0
   140a0:	beq	14118 <__assert_fail@plt+0x3014>
   140a4:	ldr	r1, [sp, #32]
   140a8:	mov	r3, #34	; 0x22
   140ac:	mov	r2, #1
   140b0:	strb	r3, [r1]
   140b4:	ldr	r3, [pc, #332]	; 14208 <__assert_fail@plt+0x3104>
   140b8:	str	r2, [sp, #52]	; 0x34
   140bc:	mov	r7, r2
   140c0:	str	r2, [sp, #44]	; 0x2c
   140c4:	str	r3, [sp, #64]	; 0x40
   140c8:	b	12f70 <__assert_fail@plt+0x1e6c>
   140cc:	ldr	r3, [pc, #300]	; 14200 <__assert_fail@plt+0x30fc>
   140d0:	str	r3, [sp, #64]	; 0x40
   140d4:	mov	r3, #0
   140d8:	str	r3, [sp, #28]
   140dc:	mov	r3, #1
   140e0:	str	r3, [sp, #52]	; 0x34
   140e4:	mov	r7, r3
   140e8:	mov	r3, #2
   140ec:	str	r3, [sp, #152]	; 0x98
   140f0:	b	12f70 <__assert_fail@plt+0x1e6c>
   140f4:	bl	110ec <abort@plt>
   140f8:	ldr	r0, [sp, #56]	; 0x38
   140fc:	bl	10fd8 <strlen@plt>
   14100:	str	r0, [sp, #24]
   14104:	b	13ddc <__assert_fail@plt+0x2cd8>
   14108:	mov	r5, r8
   1410c:	mov	r4, #48	; 0x30
   14110:	ldr	r8, [sp, #44]	; 0x2c
   14114:	b	13450 <__assert_fail@plt+0x234c>
   14118:	mov	r3, #1
   1411c:	str	r3, [sp, #52]	; 0x34
   14120:	mov	r7, r3
   14124:	str	r3, [sp, #44]	; 0x2c
   14128:	ldr	r3, [pc, #216]	; 14208 <__assert_fail@plt+0x3104>
   1412c:	str	r3, [sp, #64]	; 0x40
   14130:	b	12f70 <__assert_fail@plt+0x1e6c>
   14134:	ldr	sl, [sp, #32]
   14138:	mov	r8, fp
   1413c:	mov	r2, r3
   14140:	b	13690 <__assert_fail@plt+0x258c>
   14144:	mov	r3, r5
   14148:	mov	r5, r2
   1414c:	b	13948 <__assert_fail@plt+0x2844>
   14150:	ldr	r1, [sp, #24]
   14154:	mov	r2, r5
   14158:	cmp	r1, r9
   1415c:	mov	ip, r5
   14160:	ldr	r4, [sp, #80]	; 0x50
   14164:	ldr	r5, [sp, #92]	; 0x5c
   14168:	ldr	r6, [sp, #84]	; 0x54
   1416c:	ldr	r7, [sp, #88]	; 0x58
   14170:	bls	141a4 <__assert_fail@plt+0x30a0>
   14174:	ldrb	r3, [r8]
   14178:	cmp	r3, #0
   1417c:	bne	14190 <__assert_fail@plt+0x308c>
   14180:	b	141a8 <__assert_fail@plt+0x30a4>
   14184:	ldrb	r3, [r8, #1]!
   14188:	cmp	r3, #0
   1418c:	beq	142a8 <__assert_fail@plt+0x31a4>
   14190:	add	r2, r2, #1
   14194:	add	r3, sl, r2
   14198:	cmp	r1, r3
   1419c:	bhi	14184 <__assert_fail@plt+0x3080>
   141a0:	mov	ip, r2
   141a4:	mov	r3, #0
   141a8:	mov	r2, r3
   141ac:	b	13c40 <__assert_fail@plt+0x2b3c>
   141b0:	mov	r3, #0
   141b4:	mov	ip, r5
   141b8:	ldr	r4, [sp, #80]	; 0x50
   141bc:	ldr	r5, [sp, #92]	; 0x5c
   141c0:	ldr	r6, [sp, #84]	; 0x54
   141c4:	ldr	r7, [sp, #88]	; 0x58
   141c8:	mov	r2, r3
   141cc:	b	13c40 <__assert_fail@plt+0x2b3c>
   141d0:	mov	r3, r6
   141d4:	mov	ip, r5
   141d8:	eor	r5, r3, #1
   141dc:	mov	r2, r6
   141e0:	ldr	r4, [sp, #80]	; 0x50
   141e4:	ldr	r6, [sp, #84]	; 0x54
   141e8:	ldr	r7, [sp, #88]	; 0x58
   141ec:	uxtb	r5, r5
   141f0:	b	13c40 <__assert_fail@plt+0x2b3c>
   141f4:	ldr	sl, [sp, #32]
   141f8:	mov	r8, fp
   141fc:	b	14064 <__assert_fail@plt+0x2f60>
   14200:	andeq	r7, r1, r4, asr #9
   14204:	andeq	r7, r1, r8, asr #9
   14208:	andeq	r7, r1, r0, asr #9
   1420c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14210:	ldr	r2, [sp, #56]	; 0x38
   14214:	ldrb	r1, [r2, r3]
   14218:	sub	r2, r1, #33	; 0x21
   1421c:	uxtb	r2, r2
   14220:	cmp	r2, #29
   14224:	bhi	142c4 <__assert_fail@plt+0x31c0>
   14228:	ldr	r0, [pc, #-36]	; 1420c <__assert_fail@plt+0x3108>
   1422c:	mov	ip, #1
   14230:	ands	r2, r0, ip, lsl r2
   14234:	beq	142d4 <__assert_fail@plt+0x31d0>
   14238:	ldr	r2, [sp, #28]
   1423c:	cmp	r2, #0
   14240:	bne	143d4 <__assert_fail@plt+0x32d0>
   14244:	cmp	fp, r7
   14248:	ldr	r8, [sp, #28]
   1424c:	ldrhi	r2, [sp, #32]
   14250:	mov	sl, r3
   14254:	mov	r5, r8
   14258:	strbhi	r4, [r2, r7]
   1425c:	add	r2, r7, #1
   14260:	cmp	fp, r2
   14264:	movhi	r0, #34	; 0x22
   14268:	ldrhi	ip, [sp, #32]
   1426c:	mov	r4, r1
   14270:	strbhi	r0, [ip, r2]
   14274:	add	r2, r7, #2
   14278:	cmp	fp, r2
   1427c:	movhi	r0, #34	; 0x22
   14280:	ldrhi	ip, [sp, #32]
   14284:	strbhi	r0, [ip, r2]
   14288:	add	r2, r7, #3
   1428c:	cmp	fp, r2
   14290:	movhi	r0, #63	; 0x3f
   14294:	ldrhi	ip, [sp, #32]
   14298:	add	r7, r7, #4
   1429c:	strbhi	r0, [ip, r2]
   142a0:	mov	r2, r8
   142a4:	b	13450 <__assert_fail@plt+0x234c>
   142a8:	mov	ip, r2
   142ac:	mov	r2, r3
   142b0:	b	13c40 <__assert_fail@plt+0x2b3c>
   142b4:	ldr	sl, [sp, #32]
   142b8:	mov	r8, fp
   142bc:	ldr	r2, [sp, #28]
   142c0:	b	13690 <__assert_fail@plt+0x258c>
   142c4:	mov	r2, #0
   142c8:	mov	r8, r2
   142cc:	mov	r5, r2
   142d0:	b	13450 <__assert_fail@plt+0x234c>
   142d4:	mov	r8, r2
   142d8:	mov	r5, #0
   142dc:	b	13450 <__assert_fail@plt+0x234c>
   142e0:	ldr	r1, [sp, #152]	; 0x98
   142e4:	bl	12dac <__assert_fail@plt+0x1ca8>
   142e8:	str	r0, [sp, #168]	; 0xa8
   142ec:	b	1330c <__assert_fail@plt+0x2208>
   142f0:	ldr	r1, [sp, #152]	; 0x98
   142f4:	bl	12dac <__assert_fail@plt+0x1ca8>
   142f8:	str	r0, [sp, #164]	; 0xa4
   142fc:	b	132ec <__assert_fail@plt+0x21e8>
   14300:	ldr	r7, [sp, #28]
   14304:	b	1334c <__assert_fail@plt+0x2248>
   14308:	ldr	sl, [sp, #32]
   1430c:	ldr	r2, [sp, #68]	; 0x44
   14310:	mov	r8, fp
   14314:	mov	fp, r7
   14318:	ldr	r3, [sp, #64]	; 0x40
   1431c:	cmp	r3, #0
   14320:	moveq	r2, #0
   14324:	andne	r2, r2, #1
   14328:	cmp	r2, #0
   1432c:	beq	14358 <__assert_fail@plt+0x3254>
   14330:	mov	r2, r3
   14334:	ldrb	r3, [r3]
   14338:	cmp	r3, #0
   1433c:	beq	14358 <__assert_fail@plt+0x3254>
   14340:	cmp	r8, fp
   14344:	strbhi	r3, [sl, fp]
   14348:	ldrb	r3, [r2, #1]!
   1434c:	add	fp, fp, #1
   14350:	cmp	r3, #0
   14354:	bne	14340 <__assert_fail@plt+0x323c>
   14358:	cmp	r8, fp
   1435c:	movhi	r3, #0
   14360:	strbhi	r3, [sl, fp]
   14364:	b	136ec <__assert_fail@plt+0x25e8>
   14368:	ldr	r3, [sp, #168]	; 0xa8
   1436c:	ldr	sl, [sp, #32]
   14370:	str	r3, [sp, #16]
   14374:	ldr	r3, [sp, #164]	; 0xa4
   14378:	mov	ip, #5
   1437c:	str	r3, [sp, #12]
   14380:	ldr	r3, [sp, #160]	; 0xa0
   14384:	ldr	r2, [sp, #56]	; 0x38
   14388:	str	r3, [sp, #8]
   1438c:	ldr	r3, [sp, #156]	; 0x9c
   14390:	ldr	r1, [sp, #72]	; 0x48
   14394:	str	r3, [sp, #4]
   14398:	mov	r0, sl
   1439c:	ldr	r3, [sp, #24]
   143a0:	str	ip, [sp]
   143a4:	bl	12ecc <__assert_fail@plt+0x1dc8>
   143a8:	mov	fp, r0
   143ac:	b	136ec <__assert_fail@plt+0x25e8>
   143b0:	mov	r8, fp
   143b4:	ldr	sl, [sp, #32]
   143b8:	mov	fp, r7
   143bc:	mov	r2, r3
   143c0:	b	14318 <__assert_fail@plt+0x3214>
   143c4:	mov	r8, fp
   143c8:	ldr	sl, [sp, #32]
   143cc:	mov	fp, r7
   143d0:	b	14318 <__assert_fail@plt+0x3214>
   143d4:	ldr	sl, [sp, #32]
   143d8:	mov	r8, fp
   143dc:	b	136a8 <__assert_fail@plt+0x25a4>
   143e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143e4:	sub	sp, sp, #52	; 0x34
   143e8:	mov	r4, r0
   143ec:	mov	r5, r3
   143f0:	mov	sl, r1
   143f4:	mov	fp, r2
   143f8:	bl	10ff0 <__errno_location@plt>
   143fc:	ldr	r7, [pc, #412]	; 145a0 <__assert_fail@plt+0x349c>
   14400:	cmn	r4, #-2147483647	; 0x80000001
   14404:	ldr	r6, [r7]
   14408:	mov	r8, r0
   1440c:	movne	r0, #0
   14410:	moveq	r0, #1
   14414:	ldr	r3, [r8]
   14418:	orrs	r0, r0, r4, lsr #31
   1441c:	str	r3, [sp, #24]
   14420:	bne	1459c <__assert_fail@plt+0x3498>
   14424:	ldr	r2, [r7, #4]
   14428:	cmp	r4, r2
   1442c:	blt	1448c <__assert_fail@plt+0x3388>
   14430:	add	r9, r7, #8
   14434:	cmp	r6, r9
   14438:	str	r2, [sp, #44]	; 0x2c
   1443c:	beq	1456c <__assert_fail@plt+0x3468>
   14440:	mov	r3, #8
   14444:	sub	r2, r4, r2
   14448:	mov	r0, r6
   1444c:	str	r3, [sp]
   14450:	add	r2, r2, #1
   14454:	mvn	r3, #-2147483648	; 0x80000000
   14458:	add	r1, sp, #44	; 0x2c
   1445c:	bl	15258 <__assert_fail@plt+0x4154>
   14460:	mov	r6, r0
   14464:	str	r0, [r7]
   14468:	ldr	r0, [r7, #4]
   1446c:	ldr	r2, [sp, #44]	; 0x2c
   14470:	mov	r1, #0
   14474:	sub	r2, r2, r0
   14478:	add	r0, r6, r0, lsl #3
   1447c:	lsl	r2, r2, #3
   14480:	bl	11020 <memset@plt>
   14484:	ldr	r3, [sp, #44]	; 0x2c
   14488:	str	r3, [r7, #4]
   1448c:	add	r3, r6, r4, lsl #3
   14490:	ldr	r1, [r5, #4]
   14494:	ldr	r7, [r3, #4]
   14498:	ldr	r9, [r6, r4, lsl #3]
   1449c:	ldr	r2, [r5, #40]	; 0x28
   144a0:	ldr	ip, [r5, #44]	; 0x2c
   144a4:	add	r0, r5, #8
   144a8:	str	r3, [sp, #28]
   144ac:	ldr	r3, [r5]
   144b0:	orr	r1, r1, #1
   144b4:	mov	lr, r0
   144b8:	str	r1, [sp, #32]
   144bc:	str	r0, [sp, #36]	; 0x24
   144c0:	str	r1, [sp, #4]
   144c4:	str	r2, [sp, #12]
   144c8:	str	r3, [sp]
   144cc:	mov	r0, r7
   144d0:	mov	r1, r9
   144d4:	str	ip, [sp, #16]
   144d8:	str	lr, [sp, #8]
   144dc:	mov	r3, fp
   144e0:	mov	r2, sl
   144e4:	bl	12ecc <__assert_fail@plt+0x1dc8>
   144e8:	cmp	r9, r0
   144ec:	bhi	14558 <__assert_fail@plt+0x3454>
   144f0:	ldr	r3, [pc, #172]	; 145a4 <__assert_fail@plt+0x34a0>
   144f4:	add	r9, r0, #1
   144f8:	cmp	r7, r3
   144fc:	str	r9, [r6, r4, lsl #3]
   14500:	beq	1450c <__assert_fail@plt+0x3408>
   14504:	mov	r0, r7
   14508:	bl	11fcc <__assert_fail@plt+0xec8>
   1450c:	mov	r0, r9
   14510:	bl	150f4 <__assert_fail@plt+0x3ff0>
   14514:	ldr	lr, [sp, #28]
   14518:	ldr	ip, [r5, #44]	; 0x2c
   1451c:	ldr	r4, [r5, #40]	; 0x28
   14520:	mov	r3, fp
   14524:	mov	r2, sl
   14528:	mov	r1, r9
   1452c:	str	r0, [lr, #4]
   14530:	ldr	lr, [r5]
   14534:	ldr	r5, [sp, #36]	; 0x24
   14538:	str	ip, [sp, #16]
   1453c:	str	r5, [sp, #8]
   14540:	ldr	r5, [sp, #32]
   14544:	str	r4, [sp, #12]
   14548:	str	r5, [sp, #4]
   1454c:	str	lr, [sp]
   14550:	mov	r7, r0
   14554:	bl	12ecc <__assert_fail@plt+0x1dc8>
   14558:	ldr	r3, [sp, #24]
   1455c:	mov	r0, r7
   14560:	str	r3, [r8]
   14564:	add	sp, sp, #52	; 0x34
   14568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1456c:	mov	r3, #8
   14570:	sub	r2, r4, r2
   14574:	str	r3, [sp]
   14578:	add	r1, sp, #44	; 0x2c
   1457c:	add	r2, r2, #1
   14580:	mvn	r3, #-2147483648	; 0x80000000
   14584:	bl	15258 <__assert_fail@plt+0x4154>
   14588:	mov	r6, r0
   1458c:	ldm	r9, {r0, r1}
   14590:	str	r6, [r7]
   14594:	stm	r6, {r0, r1}
   14598:	b	14468 <__assert_fail@plt+0x3364>
   1459c:	bl	110ec <abort@plt>
   145a0:	andeq	r8, r2, r0, lsl r1
   145a4:	muleq	r2, r0, r1
   145a8:	push	{r4, r5, r6, lr}
   145ac:	mov	r5, r0
   145b0:	bl	10ff0 <__errno_location@plt>
   145b4:	cmp	r5, #0
   145b8:	mov	r1, #48	; 0x30
   145bc:	mov	r4, r0
   145c0:	ldr	r0, [pc, #16]	; 145d8 <__assert_fail@plt+0x34d4>
   145c4:	ldr	r6, [r4]
   145c8:	movne	r0, r5
   145cc:	bl	15554 <__assert_fail@plt+0x4450>
   145d0:	str	r6, [r4]
   145d4:	pop	{r4, r5, r6, pc}
   145d8:	muleq	r2, r0, r2
   145dc:	ldr	r3, [pc, #12]	; 145f0 <__assert_fail@plt+0x34ec>
   145e0:	cmp	r0, #0
   145e4:	moveq	r0, r3
   145e8:	ldr	r0, [r0]
   145ec:	bx	lr
   145f0:	muleq	r2, r0, r2
   145f4:	ldr	r3, [pc, #12]	; 14608 <__assert_fail@plt+0x3504>
   145f8:	cmp	r0, #0
   145fc:	moveq	r0, r3
   14600:	str	r1, [r0]
   14604:	bx	lr
   14608:	muleq	r2, r0, r2
   1460c:	ldr	r3, [pc, #52]	; 14648 <__assert_fail@plt+0x3544>
   14610:	cmp	r0, #0
   14614:	moveq	r0, r3
   14618:	add	r3, r0, #8
   1461c:	push	{lr}		; (str lr, [sp, #-4]!)
   14620:	lsr	lr, r1, #5
   14624:	and	r1, r1, #31
   14628:	ldr	ip, [r3, lr, lsl #2]
   1462c:	lsr	r0, ip, r1
   14630:	eor	r2, r2, r0
   14634:	and	r2, r2, #1
   14638:	and	r0, r0, #1
   1463c:	eor	r1, ip, r2, lsl r1
   14640:	str	r1, [r3, lr, lsl #2]
   14644:	pop	{pc}		; (ldr pc, [sp], #4)
   14648:	muleq	r2, r0, r2
   1464c:	ldr	r3, [pc, #16]	; 14664 <__assert_fail@plt+0x3560>
   14650:	cmp	r0, #0
   14654:	movne	r3, r0
   14658:	ldr	r0, [r3, #4]
   1465c:	str	r1, [r3, #4]
   14660:	bx	lr
   14664:	muleq	r2, r0, r2
   14668:	ldr	r3, [pc, #44]	; 1469c <__assert_fail@plt+0x3598>
   1466c:	cmp	r0, #0
   14670:	moveq	r0, r3
   14674:	mov	ip, #10
   14678:	cmp	r2, #0
   1467c:	cmpne	r1, #0
   14680:	str	ip, [r0]
   14684:	beq	14694 <__assert_fail@plt+0x3590>
   14688:	str	r1, [r0, #40]	; 0x28
   1468c:	str	r2, [r0, #44]	; 0x2c
   14690:	bx	lr
   14694:	push	{r4, lr}
   14698:	bl	110ec <abort@plt>
   1469c:	muleq	r2, r0, r2
   146a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146a4:	sub	sp, sp, #24
   146a8:	ldr	ip, [pc, #108]	; 1471c <__assert_fail@plt+0x3618>
   146ac:	ldr	r4, [sp, #56]	; 0x38
   146b0:	mov	r9, r2
   146b4:	cmp	r4, #0
   146b8:	moveq	r4, ip
   146bc:	mov	sl, r3
   146c0:	mov	r7, r0
   146c4:	mov	r8, r1
   146c8:	bl	10ff0 <__errno_location@plt>
   146cc:	ldr	r3, [r4, #44]	; 0x2c
   146d0:	mov	r1, r8
   146d4:	ldr	r6, [r0]
   146d8:	str	r3, [sp, #16]
   146dc:	ldr	r2, [r4, #40]	; 0x28
   146e0:	add	r3, r4, #8
   146e4:	str	r3, [sp, #8]
   146e8:	str	r2, [sp, #12]
   146ec:	ldr	r2, [r4, #4]
   146f0:	mov	r5, r0
   146f4:	str	r2, [sp, #4]
   146f8:	ldr	ip, [r4]
   146fc:	mov	r3, sl
   14700:	mov	r2, r9
   14704:	mov	r0, r7
   14708:	str	ip, [sp]
   1470c:	bl	12ecc <__assert_fail@plt+0x1dc8>
   14710:	str	r6, [r5]
   14714:	add	sp, sp, #24
   14718:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1471c:	muleq	r2, r0, r2
   14720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14724:	cmp	r3, #0
   14728:	sub	sp, sp, #44	; 0x2c
   1472c:	ldr	r4, [pc, #192]	; 147f4 <__assert_fail@plt+0x36f0>
   14730:	mov	r6, r2
   14734:	movne	r4, r3
   14738:	mov	r9, r1
   1473c:	mov	r8, r0
   14740:	bl	10ff0 <__errno_location@plt>
   14744:	ldr	r3, [r4, #44]	; 0x2c
   14748:	ldr	r5, [r4, #4]
   1474c:	add	sl, r4, #8
   14750:	cmp	r6, #0
   14754:	orreq	r5, r5, #1
   14758:	mov	r1, #0
   1475c:	ldr	r2, [r0]
   14760:	str	r3, [sp, #16]
   14764:	ldr	r3, [r4, #40]	; 0x28
   14768:	stmib	sp, {r5, sl}
   1476c:	str	r3, [sp, #12]
   14770:	ldr	r3, [r4]
   14774:	mov	r7, r0
   14778:	str	r2, [sp, #28]
   1477c:	str	r3, [sp]
   14780:	mov	r2, r8
   14784:	mov	r3, r9
   14788:	mov	r0, r1
   1478c:	bl	12ecc <__assert_fail@plt+0x1dc8>
   14790:	add	r1, r0, #1
   14794:	mov	fp, r0
   14798:	mov	r0, r1
   1479c:	str	r1, [sp, #36]	; 0x24
   147a0:	bl	150f4 <__assert_fail@plt+0x3ff0>
   147a4:	ldr	r3, [r4, #44]	; 0x2c
   147a8:	mov	r2, r8
   147ac:	str	r3, [sp, #16]
   147b0:	ldr	r3, [r4, #40]	; 0x28
   147b4:	str	r5, [sp, #4]
   147b8:	str	r3, [sp, #12]
   147bc:	str	sl, [sp, #8]
   147c0:	ldr	ip, [r4]
   147c4:	ldr	r1, [sp, #36]	; 0x24
   147c8:	mov	r3, r9
   147cc:	str	ip, [sp]
   147d0:	str	r0, [sp, #32]
   147d4:	bl	12ecc <__assert_fail@plt+0x1dc8>
   147d8:	ldr	r2, [sp, #28]
   147dc:	cmp	r6, #0
   147e0:	str	r2, [r7]
   147e4:	ldr	r0, [sp, #32]
   147e8:	strne	fp, [r6]
   147ec:	add	sp, sp, #44	; 0x2c
   147f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f4:	muleq	r2, r0, r2
   147f8:	mov	r3, r2
   147fc:	mov	r2, #0
   14800:	b	14720 <__assert_fail@plt+0x361c>
   14804:	push	{r4, r5, r6, r7, r8, lr}
   14808:	ldr	r6, [pc, #116]	; 14884 <__assert_fail@plt+0x3780>
   1480c:	ldr	r3, [r6, #4]
   14810:	ldr	r7, [r6]
   14814:	cmp	r3, #1
   14818:	movgt	r5, r7
   1481c:	movgt	r4, #1
   14820:	ble	14840 <__assert_fail@plt+0x373c>
   14824:	ldr	r0, [r5, #12]
   14828:	bl	11fcc <__assert_fail@plt+0xec8>
   1482c:	ldr	r3, [r6, #4]
   14830:	add	r4, r4, #1
   14834:	cmp	r3, r4
   14838:	add	r5, r5, #8
   1483c:	bgt	14824 <__assert_fail@plt+0x3720>
   14840:	ldr	r0, [r7, #4]
   14844:	ldr	r4, [pc, #60]	; 14888 <__assert_fail@plt+0x3784>
   14848:	cmp	r0, r4
   1484c:	beq	14860 <__assert_fail@plt+0x375c>
   14850:	bl	11fcc <__assert_fail@plt+0xec8>
   14854:	mov	r3, #256	; 0x100
   14858:	str	r4, [r6, #12]
   1485c:	str	r3, [r6, #8]
   14860:	ldr	r4, [pc, #36]	; 1488c <__assert_fail@plt+0x3788>
   14864:	cmp	r7, r4
   14868:	beq	14878 <__assert_fail@plt+0x3774>
   1486c:	mov	r0, r7
   14870:	bl	11fcc <__assert_fail@plt+0xec8>
   14874:	str	r4, [r6]
   14878:	mov	r3, #1
   1487c:	str	r3, [r6, #4]
   14880:	pop	{r4, r5, r6, r7, r8, pc}
   14884:	andeq	r8, r2, r0, lsl r1
   14888:	muleq	r2, r0, r1
   1488c:	andeq	r8, r2, r8, lsl r1
   14890:	ldr	r3, [pc, #4]	; 1489c <__assert_fail@plt+0x3798>
   14894:	mvn	r2, #0
   14898:	b	143e0 <__assert_fail@plt+0x32dc>
   1489c:	muleq	r2, r0, r2
   148a0:	ldr	r3, [pc]	; 148a8 <__assert_fail@plt+0x37a4>
   148a4:	b	143e0 <__assert_fail@plt+0x32dc>
   148a8:	muleq	r2, r0, r2
   148ac:	mov	r1, r0
   148b0:	ldr	r3, [pc, #8]	; 148c0 <__assert_fail@plt+0x37bc>
   148b4:	mvn	r2, #0
   148b8:	mov	r0, #0
   148bc:	b	143e0 <__assert_fail@plt+0x32dc>
   148c0:	muleq	r2, r0, r2
   148c4:	mov	r2, r1
   148c8:	ldr	r3, [pc, #8]	; 148d8 <__assert_fail@plt+0x37d4>
   148cc:	mov	r1, r0
   148d0:	mov	r0, #0
   148d4:	b	143e0 <__assert_fail@plt+0x32dc>
   148d8:	muleq	r2, r0, r2
   148dc:	push	{r4, r5, lr}
   148e0:	sub	sp, sp, #52	; 0x34
   148e4:	mov	r5, r2
   148e8:	mov	r4, r0
   148ec:	mov	r0, sp
   148f0:	bl	12d7c <__assert_fail@plt+0x1c78>
   148f4:	mov	r3, sp
   148f8:	mov	r1, r5
   148fc:	mov	r0, r4
   14900:	mvn	r2, #0
   14904:	bl	143e0 <__assert_fail@plt+0x32dc>
   14908:	add	sp, sp, #52	; 0x34
   1490c:	pop	{r4, r5, pc}
   14910:	push	{r4, r5, r6, lr}
   14914:	sub	sp, sp, #48	; 0x30
   14918:	mov	r5, r2
   1491c:	mov	r6, r3
   14920:	mov	r4, r0
   14924:	mov	r0, sp
   14928:	bl	12d7c <__assert_fail@plt+0x1c78>
   1492c:	mov	r3, sp
   14930:	mov	r2, r6
   14934:	mov	r1, r5
   14938:	mov	r0, r4
   1493c:	bl	143e0 <__assert_fail@plt+0x32dc>
   14940:	add	sp, sp, #48	; 0x30
   14944:	pop	{r4, r5, r6, pc}
   14948:	mov	r2, r1
   1494c:	mov	r1, r0
   14950:	mov	r0, #0
   14954:	b	148dc <__assert_fail@plt+0x37d8>
   14958:	mov	r3, r2
   1495c:	mov	r2, r1
   14960:	mov	r1, r0
   14964:	mov	r0, #0
   14968:	b	14910 <__assert_fail@plt+0x380c>
   1496c:	push	{r4, r5, r6, r7, r8, lr}
   14970:	mov	r7, r0
   14974:	ldr	lr, [pc, #100]	; 149e0 <__assert_fail@plt+0x38dc>
   14978:	mov	r8, r1
   1497c:	mov	r4, r2
   14980:	ldm	lr!, {r0, r1, r2, r3}
   14984:	sub	sp, sp, #48	; 0x30
   14988:	mov	ip, sp
   1498c:	lsr	r5, r4, #5
   14990:	stmia	ip!, {r0, r1, r2, r3}
   14994:	add	r6, sp, #8
   14998:	ldm	lr!, {r0, r1, r2, r3}
   1499c:	and	r4, r4, #31
   149a0:	stmia	ip!, {r0, r1, r2, r3}
   149a4:	ldm	lr, {r0, r1, r2, r3}
   149a8:	stm	ip, {r0, r1, r2, r3}
   149ac:	mov	r2, r8
   149b0:	ldr	lr, [r6, r5, lsl #2]
   149b4:	mov	r1, r7
   149b8:	mov	r3, sp
   149bc:	lsr	ip, lr, r4
   149c0:	eor	ip, ip, #1
   149c4:	and	ip, ip, #1
   149c8:	mov	r0, #0
   149cc:	eor	r4, lr, ip, lsl r4
   149d0:	str	r4, [r6, r5, lsl #2]
   149d4:	bl	143e0 <__assert_fail@plt+0x32dc>
   149d8:	add	sp, sp, #48	; 0x30
   149dc:	pop	{r4, r5, r6, r7, r8, pc}
   149e0:	muleq	r2, r0, r2
   149e4:	mov	r2, r1
   149e8:	mvn	r1, #0
   149ec:	b	1496c <__assert_fail@plt+0x3868>
   149f0:	mov	r2, #58	; 0x3a
   149f4:	mvn	r1, #0
   149f8:	b	1496c <__assert_fail@plt+0x3868>
   149fc:	mov	r2, #58	; 0x3a
   14a00:	b	1496c <__assert_fail@plt+0x3868>
   14a04:	push	{r4, r5, r6, r7, lr}
   14a08:	sub	sp, sp, #100	; 0x64
   14a0c:	mov	r6, r0
   14a10:	mov	r0, sp
   14a14:	mov	r7, r2
   14a18:	bl	12d7c <__assert_fail@plt+0x1c78>
   14a1c:	mov	ip, sp
   14a20:	add	lr, sp, #48	; 0x30
   14a24:	ldm	ip!, {r0, r1, r2, r3}
   14a28:	stmia	lr!, {r0, r1, r2, r3}
   14a2c:	ldm	ip!, {r0, r1, r2, r3}
   14a30:	ldr	r5, [sp, #60]	; 0x3c
   14a34:	stmia	lr!, {r0, r1, r2, r3}
   14a38:	mvn	r4, r5
   14a3c:	ldm	ip, {r0, r1, r2, r3}
   14a40:	and	ip, r4, #67108864	; 0x4000000
   14a44:	eor	ip, ip, r5
   14a48:	str	ip, [sp, #60]	; 0x3c
   14a4c:	stm	lr, {r0, r1, r2, r3}
   14a50:	mov	r1, r7
   14a54:	mov	r0, r6
   14a58:	add	r3, sp, #48	; 0x30
   14a5c:	mvn	r2, #0
   14a60:	bl	143e0 <__assert_fail@plt+0x32dc>
   14a64:	add	sp, sp, #100	; 0x64
   14a68:	pop	{r4, r5, r6, r7, pc}
   14a6c:	push	{r4, r5, r6, r7, r8, lr}
   14a70:	mov	r5, r1
   14a74:	ldr	lr, [pc, #100]	; 14ae0 <__assert_fail@plt+0x39dc>
   14a78:	mov	r4, r2
   14a7c:	mov	r7, r0
   14a80:	mov	r8, r3
   14a84:	ldm	lr!, {r0, r1, r2, r3}
   14a88:	sub	sp, sp, #48	; 0x30
   14a8c:	mov	ip, sp
   14a90:	mov	r6, #10
   14a94:	stmia	ip!, {r0, r1, r2, r3}
   14a98:	cmp	r4, #0
   14a9c:	cmpne	r5, #0
   14aa0:	ldm	lr!, {r0, r1, r2, r3}
   14aa4:	str	r6, [sp]
   14aa8:	stmia	ip!, {r0, r1, r2, r3}
   14aac:	ldm	lr, {r0, r1, r2, r3}
   14ab0:	stm	ip, {r0, r1, r2, r3}
   14ab4:	beq	14adc <__assert_fail@plt+0x39d8>
   14ab8:	mov	r3, sp
   14abc:	mov	r1, r8
   14ac0:	mov	r0, r7
   14ac4:	ldr	r2, [sp, #72]	; 0x48
   14ac8:	str	r5, [sp, #40]	; 0x28
   14acc:	str	r4, [sp, #44]	; 0x2c
   14ad0:	bl	143e0 <__assert_fail@plt+0x32dc>
   14ad4:	add	sp, sp, #48	; 0x30
   14ad8:	pop	{r4, r5, r6, r7, r8, pc}
   14adc:	bl	110ec <abort@plt>
   14ae0:	muleq	r2, r0, r2
   14ae4:	push	{lr}		; (str lr, [sp, #-4]!)
   14ae8:	sub	sp, sp, #12
   14aec:	mvn	ip, #0
   14af0:	str	ip, [sp]
   14af4:	bl	14a6c <__assert_fail@plt+0x3968>
   14af8:	add	sp, sp, #12
   14afc:	pop	{pc}		; (ldr pc, [sp], #4)
   14b00:	push	{lr}		; (str lr, [sp, #-4]!)
   14b04:	sub	sp, sp, #12
   14b08:	mvn	ip, #0
   14b0c:	mov	r3, r2
   14b10:	str	ip, [sp]
   14b14:	mov	r2, r1
   14b18:	mov	r1, r0
   14b1c:	mov	r0, #0
   14b20:	bl	14a6c <__assert_fail@plt+0x3968>
   14b24:	add	sp, sp, #12
   14b28:	pop	{pc}		; (ldr pc, [sp], #4)
   14b2c:	push	{lr}		; (str lr, [sp, #-4]!)
   14b30:	sub	sp, sp, #12
   14b34:	str	r3, [sp]
   14b38:	mov	r3, r2
   14b3c:	mov	r2, r1
   14b40:	mov	r1, r0
   14b44:	mov	r0, #0
   14b48:	bl	14a6c <__assert_fail@plt+0x3968>
   14b4c:	add	sp, sp, #12
   14b50:	pop	{pc}		; (ldr pc, [sp], #4)
   14b54:	ldr	r3, [pc]	; 14b5c <__assert_fail@plt+0x3a58>
   14b58:	b	143e0 <__assert_fail@plt+0x32dc>
   14b5c:	andeq	r8, r2, r0, lsr #2
   14b60:	mov	r2, r1
   14b64:	ldr	r3, [pc, #8]	; 14b74 <__assert_fail@plt+0x3a70>
   14b68:	mov	r1, r0
   14b6c:	mov	r0, #0
   14b70:	b	143e0 <__assert_fail@plt+0x32dc>
   14b74:	andeq	r8, r2, r0, lsr #2
   14b78:	ldr	r3, [pc, #4]	; 14b84 <__assert_fail@plt+0x3a80>
   14b7c:	mvn	r2, #0
   14b80:	b	143e0 <__assert_fail@plt+0x32dc>
   14b84:	andeq	r8, r2, r0, lsr #2
   14b88:	mov	r1, r0
   14b8c:	ldr	r3, [pc, #8]	; 14b9c <__assert_fail@plt+0x3a98>
   14b90:	mvn	r2, #0
   14b94:	mov	r0, #0
   14b98:	b	143e0 <__assert_fail@plt+0x32dc>
   14b9c:	andeq	r8, r2, r0, lsr #2
   14ba0:	mov	r2, #3
   14ba4:	mov	r1, #0
   14ba8:	b	16184 <__assert_fail@plt+0x5080>
   14bac:	push	{r4, r5, r6, lr}
   14bb0:	sub	sp, sp, #32
   14bb4:	cmp	r1, #0
   14bb8:	mov	r4, r0
   14bbc:	ldr	r5, [sp, #48]	; 0x30
   14bc0:	ldr	r6, [sp, #52]	; 0x34
   14bc4:	beq	14edc <__assert_fail@plt+0x3dd8>
   14bc8:	stm	sp, {r2, r3}
   14bcc:	mov	r3, r1
   14bd0:	ldr	r2, [pc, #808]	; 14f00 <__assert_fail@plt+0x3dfc>
   14bd4:	mov	r1, #1
   14bd8:	bl	11044 <__fprintf_chk@plt>
   14bdc:	mov	r2, #5
   14be0:	ldr	r1, [pc, #796]	; 14f04 <__assert_fail@plt+0x3e00>
   14be4:	mov	r0, #0
   14be8:	bl	10ef4 <dcgettext@plt>
   14bec:	ldr	r3, [pc, #788]	; 14f08 <__assert_fail@plt+0x3e04>
   14bf0:	ldr	r2, [pc, #788]	; 14f0c <__assert_fail@plt+0x3e08>
   14bf4:	str	r3, [sp]
   14bf8:	mov	r1, #1
   14bfc:	mov	r3, r0
   14c00:	mov	r0, r4
   14c04:	bl	11044 <__fprintf_chk@plt>
   14c08:	mov	r1, r4
   14c0c:	mov	r0, #10
   14c10:	bl	10ee8 <fputc_unlocked@plt>
   14c14:	mov	r2, #5
   14c18:	ldr	r1, [pc, #752]	; 14f10 <__assert_fail@plt+0x3e0c>
   14c1c:	mov	r0, #0
   14c20:	bl	10ef4 <dcgettext@plt>
   14c24:	mov	r1, #1
   14c28:	ldr	r3, [pc, #740]	; 14f14 <__assert_fail@plt+0x3e10>
   14c2c:	mov	r2, r0
   14c30:	mov	r0, r4
   14c34:	bl	11044 <__fprintf_chk@plt>
   14c38:	mov	r1, r4
   14c3c:	mov	r0, #10
   14c40:	bl	10ee8 <fputc_unlocked@plt>
   14c44:	cmp	r6, #9
   14c48:	ldrls	pc, [pc, r6, lsl #2]
   14c4c:	b	14ef4 <__assert_fail@plt+0x3df0>
   14c50:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c54:	ldrdeq	r4, [r1], -ip
   14c58:	andeq	r4, r1, r8, lsl #26
   14c5c:	andeq	r4, r1, ip, lsr sp
   14c60:	andeq	r4, r1, r8, ror sp
   14c64:			; <UNDEFINED> instruction: 0x00014db4
   14c68:	strdeq	r4, [r1], -r0
   14c6c:	andeq	r4, r1, r4, lsr lr
   14c70:	andeq	r4, r1, r4, lsl #29
   14c74:	andeq	r4, r1, r8, ror ip
   14c78:	ldr	r1, [pc, #664]	; 14f18 <__assert_fail@plt+0x3e14>
   14c7c:	mov	r2, #5
   14c80:	mov	r0, #0
   14c84:	bl	10ef4 <dcgettext@plt>
   14c88:	ldr	ip, [r5, #32]
   14c8c:	ldr	r1, [r5, #28]
   14c90:	ldr	r2, [r5, #24]
   14c94:	ldr	r3, [r5]
   14c98:	ldr	r6, [r5, #20]
   14c9c:	str	ip, [sp, #28]
   14ca0:	ldr	lr, [r5, #16]
   14ca4:	str	r1, [sp, #24]
   14ca8:	ldr	ip, [r5, #12]
   14cac:	str	r2, [sp, #20]
   14cb0:	ldr	r1, [r5, #8]
   14cb4:	ldr	r2, [r5, #4]
   14cb8:	str	r6, [sp, #16]
   14cbc:	stmib	sp, {r1, ip, lr}
   14cc0:	mov	r1, #1
   14cc4:	str	r2, [sp]
   14cc8:	mov	r2, r0
   14ccc:	mov	r0, r4
   14cd0:	bl	11044 <__fprintf_chk@plt>
   14cd4:	add	sp, sp, #32
   14cd8:	pop	{r4, r5, r6, pc}
   14cdc:	mov	r2, #5
   14ce0:	ldr	r1, [pc, #564]	; 14f1c <__assert_fail@plt+0x3e18>
   14ce4:	mov	r0, #0
   14ce8:	bl	10ef4 <dcgettext@plt>
   14cec:	ldr	r3, [r5]
   14cf0:	mov	r1, #1
   14cf4:	mov	r2, r0
   14cf8:	mov	r0, r4
   14cfc:	add	sp, sp, #32
   14d00:	pop	{r4, r5, r6, lr}
   14d04:	b	11044 <__fprintf_chk@plt>
   14d08:	mov	r2, #5
   14d0c:	ldr	r1, [pc, #524]	; 14f20 <__assert_fail@plt+0x3e1c>
   14d10:	mov	r0, #0
   14d14:	bl	10ef4 <dcgettext@plt>
   14d18:	ldr	r2, [r5, #4]
   14d1c:	ldr	r3, [r5]
   14d20:	mov	r1, #1
   14d24:	str	r2, [sp, #48]	; 0x30
   14d28:	mov	r2, r0
   14d2c:	mov	r0, r4
   14d30:	add	sp, sp, #32
   14d34:	pop	{r4, r5, r6, lr}
   14d38:	b	11044 <__fprintf_chk@plt>
   14d3c:	mov	r2, #5
   14d40:	ldr	r1, [pc, #476]	; 14f24 <__assert_fail@plt+0x3e20>
   14d44:	mov	r0, #0
   14d48:	bl	10ef4 <dcgettext@plt>
   14d4c:	ldr	r1, [r5, #8]
   14d50:	ldr	r2, [r5, #4]
   14d54:	ldr	r3, [r5]
   14d58:	str	r1, [sp, #52]	; 0x34
   14d5c:	str	r2, [sp, #48]	; 0x30
   14d60:	mov	r1, #1
   14d64:	mov	r2, r0
   14d68:	mov	r0, r4
   14d6c:	add	sp, sp, #32
   14d70:	pop	{r4, r5, r6, lr}
   14d74:	b	11044 <__fprintf_chk@plt>
   14d78:	mov	r2, #5
   14d7c:	ldr	r1, [pc, #420]	; 14f28 <__assert_fail@plt+0x3e24>
   14d80:	mov	r0, #0
   14d84:	bl	10ef4 <dcgettext@plt>
   14d88:	ldr	r1, [r5, #8]
   14d8c:	ldr	ip, [r5, #12]
   14d90:	ldr	r2, [r5, #4]
   14d94:	ldr	r3, [r5]
   14d98:	stmib	sp, {r1, ip}
   14d9c:	str	r2, [sp]
   14da0:	mov	r1, #1
   14da4:	mov	r2, r0
   14da8:	mov	r0, r4
   14dac:	bl	11044 <__fprintf_chk@plt>
   14db0:	b	14cd4 <__assert_fail@plt+0x3bd0>
   14db4:	mov	r2, #5
   14db8:	ldr	r1, [pc, #364]	; 14f2c <__assert_fail@plt+0x3e28>
   14dbc:	mov	r0, #0
   14dc0:	bl	10ef4 <dcgettext@plt>
   14dc4:	add	r1, r5, #8
   14dc8:	ldr	r2, [r5, #4]
   14dcc:	ldm	r1, {r1, ip, lr}
   14dd0:	ldr	r3, [r5]
   14dd4:	str	r2, [sp]
   14dd8:	stmib	sp, {r1, ip, lr}
   14ddc:	mov	r1, #1
   14de0:	mov	r2, r0
   14de4:	mov	r0, r4
   14de8:	bl	11044 <__fprintf_chk@plt>
   14dec:	b	14cd4 <__assert_fail@plt+0x3bd0>
   14df0:	mov	r2, #5
   14df4:	ldr	r1, [pc, #308]	; 14f30 <__assert_fail@plt+0x3e2c>
   14df8:	mov	r0, #0
   14dfc:	bl	10ef4 <dcgettext@plt>
   14e00:	add	r1, r5, #8
   14e04:	ldr	r2, [r5, #4]
   14e08:	ldm	r1, {r1, ip, lr}
   14e0c:	ldr	r6, [r5, #20]
   14e10:	ldr	r3, [r5]
   14e14:	stmib	sp, {r1, ip, lr}
   14e18:	mov	r1, #1
   14e1c:	str	r2, [sp]
   14e20:	str	r6, [sp, #16]
   14e24:	mov	r2, r0
   14e28:	mov	r0, r4
   14e2c:	bl	11044 <__fprintf_chk@plt>
   14e30:	b	14cd4 <__assert_fail@plt+0x3bd0>
   14e34:	mov	r2, #5
   14e38:	ldr	r1, [pc, #244]	; 14f34 <__assert_fail@plt+0x3e30>
   14e3c:	mov	r0, #0
   14e40:	bl	10ef4 <dcgettext@plt>
   14e44:	ldr	r2, [r5, #24]
   14e48:	ldr	r3, [r5]
   14e4c:	ldr	r6, [r5, #20]
   14e50:	ldr	lr, [r5, #16]
   14e54:	ldr	ip, [r5, #12]
   14e58:	str	r2, [sp, #20]
   14e5c:	ldr	r1, [r5, #8]
   14e60:	ldr	r2, [r5, #4]
   14e64:	str	r6, [sp, #16]
   14e68:	stmib	sp, {r1, ip, lr}
   14e6c:	mov	r1, #1
   14e70:	str	r2, [sp]
   14e74:	mov	r2, r0
   14e78:	mov	r0, r4
   14e7c:	bl	11044 <__fprintf_chk@plt>
   14e80:	b	14cd4 <__assert_fail@plt+0x3bd0>
   14e84:	mov	r2, #5
   14e88:	ldr	r1, [pc, #168]	; 14f38 <__assert_fail@plt+0x3e34>
   14e8c:	mov	r0, #0
   14e90:	bl	10ef4 <dcgettext@plt>
   14e94:	ldr	r1, [r5, #28]
   14e98:	ldr	r2, [r5, #24]
   14e9c:	ldr	r3, [r5]
   14ea0:	ldr	r6, [r5, #20]
   14ea4:	ldr	lr, [r5, #16]
   14ea8:	str	r1, [sp, #24]
   14eac:	ldr	ip, [r5, #12]
   14eb0:	str	r2, [sp, #20]
   14eb4:	ldr	r1, [r5, #8]
   14eb8:	ldr	r2, [r5, #4]
   14ebc:	str	r6, [sp, #16]
   14ec0:	stmib	sp, {r1, ip, lr}
   14ec4:	mov	r1, #1
   14ec8:	str	r2, [sp]
   14ecc:	mov	r2, r0
   14ed0:	mov	r0, r4
   14ed4:	bl	11044 <__fprintf_chk@plt>
   14ed8:	b	14cd4 <__assert_fail@plt+0x3bd0>
   14edc:	str	r3, [sp]
   14ee0:	mov	r1, #1
   14ee4:	mov	r3, r2
   14ee8:	ldr	r2, [pc, #76]	; 14f3c <__assert_fail@plt+0x3e38>
   14eec:	bl	11044 <__fprintf_chk@plt>
   14ef0:	b	14bdc <__assert_fail@plt+0x3ad8>
   14ef4:	mov	r2, #5
   14ef8:	ldr	r1, [pc, #64]	; 14f40 <__assert_fail@plt+0x3e3c>
   14efc:	b	14c80 <__assert_fail@plt+0x3b7c>
   14f00:	andeq	r7, r1, r0, lsr r5
   14f04:	andeq	r7, r1, r4, asr #10
   14f08:	andeq	r0, r0, r6, ror #15
   14f0c:	andeq	r7, r1, ip, lsl r8
   14f10:	andeq	r7, r1, r8, asr #10
   14f14:	strdeq	r7, [r1], -r4
   14f18:	andeq	r7, r1, r4, lsr #14
   14f1c:	andeq	r7, r1, r8, lsl r6
   14f20:	andeq	r7, r1, r8, lsr #12
   14f24:	andeq	r7, r1, r0, asr #12
   14f28:	andeq	r7, r1, ip, asr r6
   14f2c:	andeq	r7, r1, ip, ror r6
   14f30:	andeq	r7, r1, r0, lsr #13
   14f34:	andeq	r7, r1, r8, asr #13
   14f38:	strdeq	r7, [r1], -r4
   14f3c:	andeq	r7, r1, ip, lsr r5
   14f40:	andeq	r7, r1, r8, asr r7
   14f44:	push	{r4, r5, lr}
   14f48:	sub	sp, sp, #12
   14f4c:	ldr	r5, [sp, #24]
   14f50:	ldr	ip, [r5]
   14f54:	cmp	ip, #0
   14f58:	beq	14f74 <__assert_fail@plt+0x3e70>
   14f5c:	mov	lr, r5
   14f60:	mov	ip, #0
   14f64:	ldr	r4, [lr, #4]!
   14f68:	add	ip, ip, #1
   14f6c:	cmp	r4, #0
   14f70:	bne	14f64 <__assert_fail@plt+0x3e60>
   14f74:	stm	sp, {r5, ip}
   14f78:	bl	14bac <__assert_fail@plt+0x3aa8>
   14f7c:	add	sp, sp, #12
   14f80:	pop	{r4, r5, pc}
   14f84:	push	{r4, r5, lr}
   14f88:	sub	sp, sp, #52	; 0x34
   14f8c:	add	r5, sp, #4
   14f90:	ldr	r4, [sp, #64]	; 0x40
   14f94:	mov	ip, #0
   14f98:	sub	r4, r4, #4
   14f9c:	ldr	lr, [r4, #4]!
   14fa0:	cmp	lr, #0
   14fa4:	str	lr, [r5, #4]!
   14fa8:	beq	14fb8 <__assert_fail@plt+0x3eb4>
   14fac:	add	ip, ip, #1
   14fb0:	cmp	ip, #10
   14fb4:	bne	14f9c <__assert_fail@plt+0x3e98>
   14fb8:	add	lr, sp, #8
   14fbc:	str	ip, [sp, #4]
   14fc0:	str	lr, [sp]
   14fc4:	bl	14bac <__assert_fail@plt+0x3aa8>
   14fc8:	add	sp, sp, #52	; 0x34
   14fcc:	pop	{r4, r5, pc}
   14fd0:	push	{r3}		; (str r3, [sp, #-4]!)
   14fd4:	push	{r4, lr}
   14fd8:	sub	sp, sp, #60	; 0x3c
   14fdc:	add	lr, sp, #56	; 0x38
   14fe0:	add	r3, sp, #72	; 0x48
   14fe4:	str	r3, [lr, #-44]!	; 0xffffffd4
   14fe8:	add	r4, sp, #68	; 0x44
   14fec:	mov	r3, #0
   14ff0:	ldr	ip, [r4, #4]!
   14ff4:	cmp	ip, #0
   14ff8:	str	ip, [lr, #4]!
   14ffc:	beq	1500c <__assert_fail@plt+0x3f08>
   15000:	add	r3, r3, #1
   15004:	cmp	r3, #10
   15008:	bne	14ff0 <__assert_fail@plt+0x3eec>
   1500c:	add	ip, sp, #16
   15010:	str	r3, [sp, #4]
   15014:	str	ip, [sp]
   15018:	ldr	r3, [sp, #68]	; 0x44
   1501c:	bl	14bac <__assert_fail@plt+0x3aa8>
   15020:	add	sp, sp, #60	; 0x3c
   15024:	pop	{r4, lr}
   15028:	add	sp, sp, #4
   1502c:	bx	lr
   15030:	ldr	r3, [pc, #116]	; 150ac <__assert_fail@plt+0x3fa8>
   15034:	push	{r4, lr}
   15038:	mov	r0, #10
   1503c:	ldr	r1, [r3]
   15040:	bl	10ee8 <fputc_unlocked@plt>
   15044:	mov	r2, #5
   15048:	ldr	r1, [pc, #96]	; 150b0 <__assert_fail@plt+0x3fac>
   1504c:	mov	r0, #0
   15050:	bl	10ef4 <dcgettext@plt>
   15054:	ldr	r2, [pc, #88]	; 150b4 <__assert_fail@plt+0x3fb0>
   15058:	mov	r1, r0
   1505c:	mov	r0, #1
   15060:	bl	1102c <__printf_chk@plt>
   15064:	mov	r2, #5
   15068:	ldr	r1, [pc, #72]	; 150b8 <__assert_fail@plt+0x3fb4>
   1506c:	mov	r0, #0
   15070:	bl	10ef4 <dcgettext@plt>
   15074:	ldr	r3, [pc, #64]	; 150bc <__assert_fail@plt+0x3fb8>
   15078:	ldr	r2, [pc, #64]	; 150c0 <__assert_fail@plt+0x3fbc>
   1507c:	mov	r1, r0
   15080:	mov	r0, #1
   15084:	bl	1102c <__printf_chk@plt>
   15088:	mov	r2, #5
   1508c:	ldr	r1, [pc, #48]	; 150c4 <__assert_fail@plt+0x3fc0>
   15090:	mov	r0, #0
   15094:	bl	10ef4 <dcgettext@plt>
   15098:	ldr	r2, [pc, #40]	; 150c8 <__assert_fail@plt+0x3fc4>
   1509c:	pop	{r4, lr}
   150a0:	mov	r1, r0
   150a4:	mov	r0, #1
   150a8:	b	1102c <__printf_chk@plt>
   150ac:	andeq	r8, r2, r4, ror r1
   150b0:	muleq	r1, r4, r7
   150b4:	andeq	r7, r1, r8, lsr #15
   150b8:	andeq	r7, r1, r0, asr #15
   150bc:	andeq	r7, r1, r4, asr #3
   150c0:	andeq	r7, r1, ip, ror #3
   150c4:	ldrdeq	r7, [r1], -r4
   150c8:	strdeq	r7, [r1], -ip
   150cc:	push	{r4, lr}
   150d0:	bl	15cdc <__assert_fail@plt+0x4bd8>
   150d4:	cmp	r0, #0
   150d8:	popne	{r4, pc}
   150dc:	bl	15614 <__assert_fail@plt+0x4510>
   150e0:	push	{r4, lr}
   150e4:	bl	15cdc <__assert_fail@plt+0x4bd8>
   150e8:	cmp	r0, #0
   150ec:	popne	{r4, pc}
   150f0:	bl	15614 <__assert_fail@plt+0x4510>
   150f4:	push	{r4, lr}
   150f8:	bl	15cdc <__assert_fail@plt+0x4bd8>
   150fc:	cmp	r0, #0
   15100:	popne	{r4, pc}
   15104:	bl	15614 <__assert_fail@plt+0x4510>
   15108:	push	{r4, r5, r6, lr}
   1510c:	mov	r5, r0
   15110:	mov	r4, r1
   15114:	bl	15d08 <__assert_fail@plt+0x4c04>
   15118:	cmp	r0, #0
   1511c:	popne	{r4, r5, r6, pc}
   15120:	adds	r4, r4, #0
   15124:	movne	r4, #1
   15128:	cmp	r5, #0
   1512c:	orreq	r4, r4, #1
   15130:	cmp	r4, #0
   15134:	popeq	{r4, r5, r6, pc}
   15138:	bl	15614 <__assert_fail@plt+0x4510>
   1513c:	push	{r4, lr}
   15140:	cmp	r1, #0
   15144:	orreq	r1, r1, #1
   15148:	bl	15d08 <__assert_fail@plt+0x4c04>
   1514c:	cmp	r0, #0
   15150:	popne	{r4, pc}
   15154:	bl	15614 <__assert_fail@plt+0x4510>
   15158:	push	{r4, r5, r6, lr}
   1515c:	mov	r6, r0
   15160:	mov	r5, r1
   15164:	mov	r4, r2
   15168:	bl	163e0 <__assert_fail@plt+0x52dc>
   1516c:	cmp	r0, #0
   15170:	popne	{r4, r5, r6, pc}
   15174:	cmp	r6, #0
   15178:	beq	15188 <__assert_fail@plt+0x4084>
   1517c:	cmp	r5, #0
   15180:	cmpne	r4, #0
   15184:	popeq	{r4, r5, r6, pc}
   15188:	bl	15614 <__assert_fail@plt+0x4510>
   1518c:	b	15158 <__assert_fail@plt+0x4054>
   15190:	cmp	r2, #0
   15194:	cmpne	r1, #0
   15198:	moveq	r2, #1
   1519c:	moveq	r1, r2
   151a0:	push	{r4, lr}
   151a4:	bl	163e0 <__assert_fail@plt+0x52dc>
   151a8:	cmp	r0, #0
   151ac:	popne	{r4, pc}
   151b0:	bl	15614 <__assert_fail@plt+0x4510>
   151b4:	mov	r2, r1
   151b8:	mov	r1, r0
   151bc:	mov	r0, #0
   151c0:	b	15158 <__assert_fail@plt+0x4054>
   151c4:	mov	r2, r1
   151c8:	mov	r1, r0
   151cc:	mov	r0, #0
   151d0:	b	15190 <__assert_fail@plt+0x408c>
   151d4:	push	{r4, r5, r6, lr}
   151d8:	subs	r6, r0, #0
   151dc:	sub	sp, sp, #8
   151e0:	mov	r5, r1
   151e4:	ldr	r4, [r1]
   151e8:	beq	15224 <__assert_fail@plt+0x4120>
   151ec:	lsr	r1, r4, #1
   151f0:	add	r3, r1, #1
   151f4:	mvn	r3, r3
   151f8:	cmp	r4, r3
   151fc:	bhi	15220 <__assert_fail@plt+0x411c>
   15200:	add	r4, r4, #1
   15204:	add	r4, r4, r1
   15208:	mov	r0, r6
   1520c:	mov	r1, r4
   15210:	bl	15158 <__assert_fail@plt+0x4054>
   15214:	str	r4, [r5]
   15218:	add	sp, sp, #8
   1521c:	pop	{r4, r5, r6, pc}
   15220:	bl	15614 <__assert_fail@plt+0x4510>
   15224:	cmp	r4, #0
   15228:	bne	15208 <__assert_fail@plt+0x4104>
   1522c:	mov	r1, r2
   15230:	mov	r0, #64	; 0x40
   15234:	str	r2, [sp, #4]
   15238:	bl	16520 <__assert_fail@plt+0x541c>
   1523c:	ldr	r2, [sp, #4]
   15240:	cmp	r0, #0
   15244:	movne	r4, r0
   15248:	addeq	r4, r0, #1
   1524c:	b	15208 <__assert_fail@plt+0x4104>
   15250:	mov	r2, #1
   15254:	b	151d4 <__assert_fail@plt+0x40d0>
   15258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1525c:	sub	sp, sp, #12
   15260:	ldr	r6, [r1]
   15264:	mov	sl, r1
   15268:	mov	r9, r0
   1526c:	asrs	r4, r6, #1
   15270:	mov	r5, r2
   15274:	mov	fp, r3
   15278:	ldr	r7, [sp, #48]	; 0x30
   1527c:	bmi	153e8 <__assert_fail@plt+0x42e4>
   15280:	mvn	r3, #-2147483648	; 0x80000000
   15284:	sub	r3, r3, r4
   15288:	cmp	r6, r3
   1528c:	movle	r3, #0
   15290:	movgt	r3, #1
   15294:	mvn	r8, fp
   15298:	cmp	r3, #0
   1529c:	addeq	r4, r4, r6
   152a0:	mvnne	r4, #-2147483648	; 0x80000000
   152a4:	lsr	r8, r8, #31
   152a8:	cmp	fp, r4
   152ac:	movge	r3, #0
   152b0:	andlt	r3, r8, #1
   152b4:	cmp	r3, #0
   152b8:	beq	153a0 <__assert_fail@plt+0x429c>
   152bc:	cmp	r7, #0
   152c0:	blt	15470 <__assert_fail@plt+0x436c>
   152c4:	bne	15468 <__assert_fail@plt+0x4364>
   152c8:	mov	r2, #64	; 0x40
   152cc:	mov	r1, r7
   152d0:	mov	r0, r2
   152d4:	str	r2, [sp, #4]
   152d8:	bl	1672c <__assert_fail@plt+0x5628>
   152dc:	ldr	r2, [sp, #4]
   152e0:	mov	r1, r7
   152e4:	mov	r4, r0
   152e8:	mov	r0, r2
   152ec:	bl	1694c <__assert_fail@plt+0x5848>
   152f0:	ldr	r2, [sp, #4]
   152f4:	sub	r1, r2, r1
   152f8:	cmp	r9, #0
   152fc:	sub	r3, r4, r6
   15300:	streq	r9, [sl]
   15304:	cmp	r3, r5
   15308:	bge	1538c <__assert_fail@plt+0x4288>
   1530c:	cmp	r5, #0
   15310:	blt	153fc <__assert_fail@plt+0x42f8>
   15314:	cmp	r6, #0
   15318:	blt	15338 <__assert_fail@plt+0x4234>
   1531c:	mvn	r3, #-2147483648	; 0x80000000
   15320:	sub	r3, r3, r5
   15324:	cmp	r6, r3
   15328:	movle	r3, #0
   1532c:	movgt	r3, #1
   15330:	cmp	r3, #0
   15334:	bne	154f8 <__assert_fail@plt+0x43f4>
   15338:	add	r5, r6, r5
   1533c:	cmp	fp, r5
   15340:	movge	r8, #0
   15344:	andlt	r8, r8, #1
   15348:	cmp	r8, #0
   1534c:	mov	r4, r5
   15350:	bne	154f8 <__assert_fail@plt+0x43f4>
   15354:	cmp	r7, #0
   15358:	blt	15410 <__assert_fail@plt+0x430c>
   1535c:	beq	15388 <__assert_fail@plt+0x4284>
   15360:	cmp	r5, #0
   15364:	blt	154b8 <__assert_fail@plt+0x43b4>
   15368:	mov	r1, r7
   1536c:	mvn	r0, #-2147483648	; 0x80000000
   15370:	bl	1672c <__assert_fail@plt+0x5628>
   15374:	cmp	r5, r0
   15378:	movle	r0, #0
   1537c:	movgt	r0, #1
   15380:	cmp	r0, #0
   15384:	bne	154f8 <__assert_fail@plt+0x43f4>
   15388:	mul	r1, r5, r7
   1538c:	mov	r0, r9
   15390:	bl	15108 <__assert_fail@plt+0x4004>
   15394:	str	r4, [sl]
   15398:	add	sp, sp, #12
   1539c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153a0:	cmp	r7, #0
   153a4:	blt	1543c <__assert_fail@plt+0x4338>
   153a8:	beq	152c8 <__assert_fail@plt+0x41c4>
   153ac:	cmp	r4, #0
   153b0:	blt	15478 <__assert_fail@plt+0x4374>
   153b4:	mov	r1, r7
   153b8:	mvn	r0, #-2147483648	; 0x80000000
   153bc:	bl	1672c <__assert_fail@plt+0x5628>
   153c0:	cmp	r0, r4
   153c4:	movge	r0, #0
   153c8:	movlt	r0, #1
   153cc:	cmp	r0, #0
   153d0:	mvnne	r2, #-2147483648	; 0x80000000
   153d4:	bne	152cc <__assert_fail@plt+0x41c8>
   153d8:	mul	r1, r7, r4
   153dc:	cmp	r1, #63	; 0x3f
   153e0:	bgt	152f8 <__assert_fail@plt+0x41f4>
   153e4:	b	152c8 <__assert_fail@plt+0x41c4>
   153e8:	rsb	r3, r4, #-2147483648	; 0x80000000
   153ec:	cmp	r6, r3
   153f0:	movge	r3, #0
   153f4:	movlt	r3, #1
   153f8:	b	15294 <__assert_fail@plt+0x4190>
   153fc:	rsb	r3, r5, #-2147483648	; 0x80000000
   15400:	cmp	r6, r3
   15404:	movge	r3, #0
   15408:	movlt	r3, #1
   1540c:	b	15330 <__assert_fail@plt+0x422c>
   15410:	cmp	r5, #0
   15414:	blt	1549c <__assert_fail@plt+0x4398>
   15418:	cmn	r7, #1
   1541c:	beq	15388 <__assert_fail@plt+0x4284>
   15420:	mov	r1, r7
   15424:	mov	r0, #-2147483648	; 0x80000000
   15428:	bl	1672c <__assert_fail@plt+0x5628>
   1542c:	cmp	r5, r0
   15430:	movle	r0, #0
   15434:	movgt	r0, #1
   15438:	b	15380 <__assert_fail@plt+0x427c>
   1543c:	cmp	r4, #0
   15440:	blt	154dc <__assert_fail@plt+0x43d8>
   15444:	cmn	r7, #1
   15448:	beq	153d8 <__assert_fail@plt+0x42d4>
   1544c:	mov	r1, r7
   15450:	mov	r0, #-2147483648	; 0x80000000
   15454:	bl	1672c <__assert_fail@plt+0x5628>
   15458:	cmp	r0, r4
   1545c:	movge	r0, #0
   15460:	movlt	r0, #1
   15464:	b	153cc <__assert_fail@plt+0x42c8>
   15468:	mov	r4, fp
   1546c:	b	153b4 <__assert_fail@plt+0x42b0>
   15470:	mov	r4, fp
   15474:	b	15444 <__assert_fail@plt+0x4340>
   15478:	cmn	r4, #1
   1547c:	beq	153d8 <__assert_fail@plt+0x42d4>
   15480:	mov	r1, r4
   15484:	mov	r0, #-2147483648	; 0x80000000
   15488:	bl	1672c <__assert_fail@plt+0x5628>
   1548c:	cmp	r7, r0
   15490:	movle	r0, #0
   15494:	movgt	r0, #1
   15498:	b	153cc <__assert_fail@plt+0x42c8>
   1549c:	mov	r1, r7
   154a0:	mvn	r0, #-2147483648	; 0x80000000
   154a4:	bl	1672c <__assert_fail@plt+0x5628>
   154a8:	cmp	r5, r0
   154ac:	movge	r0, #0
   154b0:	movlt	r0, #1
   154b4:	b	15380 <__assert_fail@plt+0x427c>
   154b8:	cmn	r5, #1
   154bc:	beq	15388 <__assert_fail@plt+0x4284>
   154c0:	mov	r1, r5
   154c4:	mov	r0, #-2147483648	; 0x80000000
   154c8:	bl	1672c <__assert_fail@plt+0x5628>
   154cc:	cmp	r7, r0
   154d0:	movle	r0, #0
   154d4:	movgt	r0, #1
   154d8:	b	15380 <__assert_fail@plt+0x427c>
   154dc:	mov	r1, r7
   154e0:	mvn	r0, #-2147483648	; 0x80000000
   154e4:	bl	1672c <__assert_fail@plt+0x5628>
   154e8:	cmp	r0, r4
   154ec:	movle	r0, #0
   154f0:	movgt	r0, #1
   154f4:	b	153cc <__assert_fail@plt+0x42c8>
   154f8:	bl	15614 <__assert_fail@plt+0x4510>
   154fc:	push	{r4, lr}
   15500:	mov	r1, #1
   15504:	bl	15c94 <__assert_fail@plt+0x4b90>
   15508:	cmp	r0, #0
   1550c:	popne	{r4, pc}
   15510:	bl	15614 <__assert_fail@plt+0x4510>
   15514:	push	{r4, lr}
   15518:	mov	r1, #1
   1551c:	bl	15c94 <__assert_fail@plt+0x4b90>
   15520:	cmp	r0, #0
   15524:	popne	{r4, pc}
   15528:	bl	15614 <__assert_fail@plt+0x4510>
   1552c:	push	{r4, lr}
   15530:	bl	15c94 <__assert_fail@plt+0x4b90>
   15534:	cmp	r0, #0
   15538:	popne	{r4, pc}
   1553c:	bl	15614 <__assert_fail@plt+0x4510>
   15540:	push	{r4, lr}
   15544:	bl	15c94 <__assert_fail@plt+0x4b90>
   15548:	cmp	r0, #0
   1554c:	popne	{r4, pc}
   15550:	bl	15614 <__assert_fail@plt+0x4510>
   15554:	push	{r4, r5, r6, lr}
   15558:	mov	r6, r0
   1555c:	mov	r0, r1
   15560:	mov	r4, r1
   15564:	bl	15cdc <__assert_fail@plt+0x4bd8>
   15568:	subs	r5, r0, #0
   1556c:	beq	15584 <__assert_fail@plt+0x4480>
   15570:	mov	r2, r4
   15574:	mov	r1, r6
   15578:	bl	10eb8 <memcpy@plt>
   1557c:	mov	r0, r5
   15580:	pop	{r4, r5, r6, pc}
   15584:	bl	15614 <__assert_fail@plt+0x4510>
   15588:	push	{r4, r5, r6, lr}
   1558c:	mov	r6, r0
   15590:	mov	r0, r1
   15594:	mov	r4, r1
   15598:	bl	15cdc <__assert_fail@plt+0x4bd8>
   1559c:	subs	r5, r0, #0
   155a0:	beq	155b8 <__assert_fail@plt+0x44b4>
   155a4:	mov	r2, r4
   155a8:	mov	r1, r6
   155ac:	bl	10eb8 <memcpy@plt>
   155b0:	mov	r0, r5
   155b4:	pop	{r4, r5, r6, pc}
   155b8:	bl	15614 <__assert_fail@plt+0x4510>
   155bc:	push	{r4, r5, r6, lr}
   155c0:	mov	r6, r0
   155c4:	add	r0, r1, #1
   155c8:	mov	r4, r1
   155cc:	bl	15cdc <__assert_fail@plt+0x4bd8>
   155d0:	subs	r5, r0, #0
   155d4:	beq	155f4 <__assert_fail@plt+0x44f0>
   155d8:	mov	r3, #0
   155dc:	mov	r1, r6
   155e0:	strb	r3, [r5, r4]
   155e4:	mov	r2, r4
   155e8:	bl	10eb8 <memcpy@plt>
   155ec:	mov	r0, r5
   155f0:	pop	{r4, r5, r6, pc}
   155f4:	bl	15614 <__assert_fail@plt+0x4510>
   155f8:	push	{r4, lr}
   155fc:	mov	r4, r0
   15600:	bl	10fd8 <strlen@plt>
   15604:	add	r1, r0, #1
   15608:	mov	r0, r4
   1560c:	pop	{r4, lr}
   15610:	b	15554 <__assert_fail@plt+0x4450>
   15614:	ldr	r3, [pc, #44]	; 15648 <__assert_fail@plt+0x4544>
   15618:	push	{r4, lr}
   1561c:	mov	r2, #5
   15620:	ldr	r1, [pc, #36]	; 1564c <__assert_fail@plt+0x4548>
   15624:	mov	r0, #0
   15628:	ldr	r4, [r3]
   1562c:	bl	10ef4 <dcgettext@plt>
   15630:	ldr	r2, [pc, #24]	; 15650 <__assert_fail@plt+0x454c>
   15634:	mov	r1, #0
   15638:	mov	r3, r0
   1563c:	mov	r0, r4
   15640:	bl	10f6c <error@plt>
   15644:	bl	110ec <abort@plt>
   15648:	andeq	r8, r2, ip, lsl #2
   1564c:	andeq	r7, r1, ip, asr #16
   15650:	muleq	r1, r0, r3
   15654:	push	{r4, r5, r6, r7, r8, lr}
   15658:	subs	r5, r1, #0
   1565c:	mov	r4, r0
   15660:	blt	156d4 <__assert_fail@plt+0x45d0>
   15664:	moveq	r6, #0
   15668:	moveq	r7, #0
   1566c:	bne	15694 <__assert_fail@plt+0x4590>
   15670:	ldr	r2, [r4]
   15674:	ldr	r1, [r4, #4]
   15678:	mov	r0, #0
   1567c:	mul	ip, r2, r7
   15680:	umull	r2, r3, r2, r5
   15684:	mla	r5, r5, r1, ip
   15688:	add	r3, r5, r3
   1568c:	strd	r2, [r4]
   15690:	pop	{r4, r5, r6, r7, r8, pc}
   15694:	asr	r7, r5, #31
   15698:	mov	r2, r5
   1569c:	mov	r3, r7
   156a0:	mvn	r0, #0
   156a4:	mvn	r1, #0
   156a8:	bl	16d24 <__assert_fail@plt+0x5c20>
   156ac:	ldrd	r2, [r4]
   156b0:	mov	r6, r5
   156b4:	cmp	r1, r3
   156b8:	cmpeq	r0, r2
   156bc:	bcs	15670 <__assert_fail@plt+0x456c>
   156c0:	mvn	r2, #0
   156c4:	mvn	r3, #0
   156c8:	mov	r0, #1
   156cc:	strd	r2, [r4]
   156d0:	pop	{r4, r5, r6, r7, r8, pc}
   156d4:	ldrd	r2, [r0]
   156d8:	orrs	r3, r2, r3
   156dc:	moveq	r6, r5
   156e0:	asreq	r7, r6, #31
   156e4:	bne	156c0 <__assert_fail@plt+0x45bc>
   156e8:	b	15670 <__assert_fail@plt+0x456c>
   156ec:	cmp	r2, #36	; 0x24
   156f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156f4:	sub	sp, sp, #20
   156f8:	bhi	15c6c <__assert_fail@plt+0x4b68>
   156fc:	cmp	r1, #0
   15700:	mov	r8, r2
   15704:	mov	r7, r0
   15708:	mov	r5, r1
   1570c:	mov	r6, r3
   15710:	addeq	r5, sp, #4
   15714:	bl	10ff0 <__errno_location@plt>
   15718:	mov	r3, #0
   1571c:	str	r3, [r0]
   15720:	mov	r9, r0
   15724:	bl	10fc0 <__ctype_b_loc@plt>
   15728:	ldrb	r3, [r7]
   1572c:	mov	r2, r7
   15730:	ldr	r0, [r0]
   15734:	b	1573c <__assert_fail@plt+0x4638>
   15738:	ldrb	r3, [r2, #1]!
   1573c:	lsl	r1, r3, #1
   15740:	ldrh	r4, [r0, r1]
   15744:	ands	r4, r4, #8192	; 0x2000
   15748:	bne	15738 <__assert_fail@plt+0x4634>
   1574c:	cmp	r3, #45	; 0x2d
   15750:	bne	15764 <__assert_fail@plt+0x4660>
   15754:	mov	r4, #4
   15758:	mov	r0, r4
   1575c:	add	sp, sp, #20
   15760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15764:	mov	r2, r8
   15768:	mov	r3, r4
   1576c:	mov	r1, r5
   15770:	mov	r0, r7
   15774:	bl	10ec4 <__strtoull_internal@plt>
   15778:	ldr	r8, [r5]
   1577c:	cmp	r7, r8
   15780:	mov	r2, r0
   15784:	str	r0, [sp, #8]
   15788:	str	r1, [sp, #12]
   1578c:	beq	157d8 <__assert_fail@plt+0x46d4>
   15790:	ldr	r4, [r9]
   15794:	cmp	r4, #0
   15798:	bne	157c8 <__assert_fail@plt+0x46c4>
   1579c:	ldr	r3, [sp, #56]	; 0x38
   157a0:	cmp	r3, #0
   157a4:	beq	157b4 <__assert_fail@plt+0x46b0>
   157a8:	ldrb	r9, [r8]
   157ac:	cmp	r9, #0
   157b0:	bne	15810 <__assert_fail@plt+0x470c>
   157b4:	mov	r0, r4
   157b8:	str	r2, [r6]
   157bc:	str	r1, [r6, #4]
   157c0:	add	sp, sp, #20
   157c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157c8:	cmp	r4, #34	; 0x22
   157cc:	bne	15754 <__assert_fail@plt+0x4650>
   157d0:	mov	r4, #1
   157d4:	b	1579c <__assert_fail@plt+0x4698>
   157d8:	ldr	r3, [sp, #56]	; 0x38
   157dc:	cmp	r3, #0
   157e0:	beq	15754 <__assert_fail@plt+0x4650>
   157e4:	ldrb	r1, [r8]
   157e8:	cmp	r1, #0
   157ec:	beq	15754 <__assert_fail@plt+0x4650>
   157f0:	mov	r0, r3
   157f4:	bl	10fe4 <strchr@plt>
   157f8:	cmp	r0, #0
   157fc:	beq	15754 <__assert_fail@plt+0x4650>
   15800:	ldrb	r9, [r8]
   15804:	mov	r2, #1
   15808:	mov	r3, #0
   1580c:	strd	r2, [sp, #8]
   15810:	mov	r1, r9
   15814:	ldr	r0, [sp, #56]	; 0x38
   15818:	bl	10fe4 <strchr@plt>
   1581c:	cmp	r0, #0
   15820:	beq	15c28 <__assert_fail@plt+0x4b24>
   15824:	sub	r3, r9, #69	; 0x45
   15828:	cmp	r3, #47	; 0x2f
   1582c:	ldrls	pc, [pc, r3, lsl #2]
   15830:	b	158f4 <__assert_fail@plt+0x47f0>
   15834:	andeq	r5, r1, r4, ror #19
   15838:	strdeq	r5, [r1], -r4
   1583c:	andeq	r5, r1, r4, ror #19
   15840:	strdeq	r5, [r1], -r4
   15844:	strdeq	r5, [r1], -r4
   15848:	strdeq	r5, [r1], -r4
   1584c:	andeq	r5, r1, r4, ror #19
   15850:	strdeq	r5, [r1], -r4
   15854:	andeq	r5, r1, r4, ror #19
   15858:	strdeq	r5, [r1], -r4
   1585c:	strdeq	r5, [r1], -r4
   15860:	andeq	r5, r1, r4, ror #19
   15864:	strdeq	r5, [r1], -r4
   15868:	strdeq	r5, [r1], -r4
   1586c:	strdeq	r5, [r1], -r4
   15870:	andeq	r5, r1, r4, ror #19
   15874:	strdeq	r5, [r1], -r4
   15878:	strdeq	r5, [r1], -r4
   1587c:	strdeq	r5, [r1], -r4
   15880:	strdeq	r5, [r1], -r4
   15884:	andeq	r5, r1, r4, ror #19
   15888:	andeq	r5, r1, r4, ror #19
   1588c:	strdeq	r5, [r1], -r4
   15890:	strdeq	r5, [r1], -r4
   15894:	strdeq	r5, [r1], -r4
   15898:	strdeq	r5, [r1], -r4
   1589c:	strdeq	r5, [r1], -r4
   158a0:	strdeq	r5, [r1], -r4
   158a4:	strdeq	r5, [r1], -r4
   158a8:	strdeq	r5, [r1], -r4
   158ac:	strdeq	r5, [r1], -r4
   158b0:	strdeq	r5, [r1], -r4
   158b4:	strdeq	r5, [r1], -r4
   158b8:	strdeq	r5, [r1], -r4
   158bc:	andeq	r5, r1, r4, ror #19
   158c0:	strdeq	r5, [r1], -r4
   158c4:	strdeq	r5, [r1], -r4
   158c8:	strdeq	r5, [r1], -r4
   158cc:	andeq	r5, r1, r4, ror #19
   158d0:	strdeq	r5, [r1], -r4
   158d4:	andeq	r5, r1, r4, ror #19
   158d8:	strdeq	r5, [r1], -r4
   158dc:	strdeq	r5, [r1], -r4
   158e0:	strdeq	r5, [r1], -r4
   158e4:	strdeq	r5, [r1], -r4
   158e8:	strdeq	r5, [r1], -r4
   158ec:	strdeq	r5, [r1], -r4
   158f0:	andeq	r5, r1, r4, ror #19
   158f4:	mov	r7, #1
   158f8:	mov	sl, #1024	; 0x400
   158fc:	sub	r9, r9, #66	; 0x42
   15900:	cmp	r9, #53	; 0x35
   15904:	ldrls	pc, [pc, r9, lsl #2]
   15908:	b	15c28 <__assert_fail@plt+0x4b24>
   1590c:	andeq	r5, r1, r4, ror fp
   15910:	andeq	r5, r1, r8, lsr #24
   15914:	andeq	r5, r1, r8, lsr #24
   15918:	andeq	r5, r1, ip, asr #22
   1591c:	andeq	r5, r1, r8, lsr #24
   15920:	andeq	r5, r1, r4, lsr #22
   15924:	andeq	r5, r1, r8, lsr #24
   15928:	andeq	r5, r1, r8, lsr #24
   1592c:	andeq	r5, r1, r8, lsr #24
   15930:	andeq	r5, r1, r4, lsl #22
   15934:	andeq	r5, r1, r8, lsr #24
   15938:	ldrdeq	r5, [r1], -r0
   1593c:	andeq	r5, r1, r8, lsr #24
   15940:	andeq	r5, r1, r8, lsr #24
   15944:	andeq	r5, r1, r8, lsr #23
   15948:	andeq	r5, r1, r8, lsr #24
   1594c:	andeq	r5, r1, r8, lsr #24
   15950:	andeq	r5, r1, r8, lsr #24
   15954:	andeq	r5, r1, r0, lsl #24
   15958:	andeq	r5, r1, r8, lsr #24
   1595c:	andeq	r5, r1, r8, lsr #24
   15960:	andeq	r5, r1, r8, lsr #24
   15964:	andeq	r5, r1, r8, lsr #24
   15968:	ldrdeq	r5, [r1], -ip
   1596c:	andeq	r5, r1, r8, lsr #21
   15970:	andeq	r5, r1, r8, lsr #24
   15974:	andeq	r5, r1, r8, lsr #24
   15978:	andeq	r5, r1, r8, lsr #24
   1597c:	andeq	r5, r1, r8, lsr #24
   15980:	andeq	r5, r1, r8, lsr #24
   15984:	andeq	r5, r1, r8, lsr #24
   15988:	andeq	r5, r1, r8, lsr #24
   1598c:	andeq	r5, r1, r4, ror sl
   15990:	andeq	r5, r1, r4, ror #20
   15994:	andeq	r5, r1, r8, lsr #24
   15998:	andeq	r5, r1, r8, lsr #24
   1599c:	andeq	r5, r1, r8, lsr #24
   159a0:	andeq	r5, r1, r4, lsr #22
   159a4:	andeq	r5, r1, r8, lsr #24
   159a8:	andeq	r5, r1, r8, lsr #24
   159ac:	andeq	r5, r1, r8, lsr #24
   159b0:	andeq	r5, r1, r4, lsl #22
   159b4:	andeq	r5, r1, r8, lsr #24
   159b8:	ldrdeq	r5, [r1], -r0
   159bc:	andeq	r5, r1, r8, lsr #24
   159c0:	andeq	r5, r1, r8, lsr #24
   159c4:	andeq	r5, r1, r8, lsr #24
   159c8:	andeq	r5, r1, r8, lsr #24
   159cc:	andeq	r5, r1, r8, lsr #24
   159d0:	andeq	r5, r1, r8, lsr #24
   159d4:	andeq	r5, r1, r0, lsl #24
   159d8:	andeq	r5, r1, r8, lsr #24
   159dc:	andeq	r5, r1, r8, lsr #24
   159e0:	andeq	r5, r1, r0, lsr #20
   159e4:	mov	r1, #48	; 0x30
   159e8:	ldr	r0, [sp, #56]	; 0x38
   159ec:	bl	10fe4 <strchr@plt>
   159f0:	cmp	r0, #0
   159f4:	beq	158f4 <__assert_fail@plt+0x47f0>
   159f8:	ldrb	r3, [r8, #1]
   159fc:	cmp	r3, #68	; 0x44
   15a00:	beq	15a14 <__assert_fail@plt+0x4910>
   15a04:	cmp	r3, #105	; 0x69
   15a08:	beq	15c38 <__assert_fail@plt+0x4b34>
   15a0c:	cmp	r3, #66	; 0x42
   15a10:	bne	158f4 <__assert_fail@plt+0x47f0>
   15a14:	mov	r7, #2
   15a18:	mov	sl, #1000	; 0x3e8
   15a1c:	b	158fc <__assert_fail@plt+0x47f8>
   15a20:	ldrd	r2, [sp, #8]
   15a24:	cmp	r2, #0
   15a28:	sbcs	r1, r3, #0
   15a2c:	blt	15c50 <__assert_fail@plt+0x4b4c>
   15a30:	adds	r2, r2, r2
   15a34:	adc	r3, r3, r3
   15a38:	mov	r1, r3
   15a3c:	mov	r9, #0
   15a40:	str	r2, [sp, #8]
   15a44:	str	r3, [sp, #12]
   15a48:	add	r3, r8, r7
   15a4c:	str	r3, [r5]
   15a50:	ldrb	r3, [r8, r7]
   15a54:	orr	r4, r4, r9
   15a58:	cmp	r3, #0
   15a5c:	orrne	r4, r4, #2
   15a60:	b	157b4 <__assert_fail@plt+0x46b0>
   15a64:	ldr	r2, [sp, #8]
   15a68:	ldr	r1, [sp, #12]
   15a6c:	mov	r9, #0
   15a70:	b	15a48 <__assert_fail@plt+0x4944>
   15a74:	ldrd	r2, [sp, #8]
   15a78:	ldr	r1, [pc, #512]	; 15c80 <__assert_fail@plt+0x4b7c>
   15a7c:	mvn	r0, #0
   15a80:	cmp	r3, r1
   15a84:	cmpeq	r2, r0
   15a88:	bhi	15c50 <__assert_fail@plt+0x4b4c>
   15a8c:	lsl	r1, r3, #9
   15a90:	orr	r1, r1, r2, lsr #23
   15a94:	lsl	r2, r2, #9
   15a98:	str	r1, [sp, #12]
   15a9c:	str	r2, [sp, #8]
   15aa0:	mov	r9, #0
   15aa4:	b	15a48 <__assert_fail@plt+0x4944>
   15aa8:	mov	fp, #7
   15aac:	mov	r9, #0
   15ab0:	add	r8, sp, #8
   15ab4:	mov	r1, sl
   15ab8:	mov	r0, r8
   15abc:	bl	15654 <__assert_fail@plt+0x4550>
   15ac0:	subs	fp, fp, #1
   15ac4:	orr	r9, r9, r0
   15ac8:	bne	15ab4 <__assert_fail@plt+0x49b0>
   15acc:	ldr	r8, [r5]
   15ad0:	ldr	r2, [sp, #8]
   15ad4:	ldr	r1, [sp, #12]
   15ad8:	b	15a48 <__assert_fail@plt+0x4944>
   15adc:	mov	fp, #8
   15ae0:	mov	r9, #0
   15ae4:	add	r8, sp, fp
   15ae8:	mov	r1, sl
   15aec:	mov	r0, r8
   15af0:	bl	15654 <__assert_fail@plt+0x4550>
   15af4:	subs	fp, fp, #1
   15af8:	orr	r9, r9, r0
   15afc:	bne	15ae8 <__assert_fail@plt+0x49e4>
   15b00:	b	15acc <__assert_fail@plt+0x49c8>
   15b04:	mov	r1, sl
   15b08:	add	r0, sp, #8
   15b0c:	bl	15654 <__assert_fail@plt+0x4550>
   15b10:	ldr	r8, [r5]
   15b14:	ldr	r2, [sp, #8]
   15b18:	ldr	r1, [sp, #12]
   15b1c:	mov	r9, r0
   15b20:	b	15a48 <__assert_fail@plt+0x4944>
   15b24:	mov	fp, #3
   15b28:	mov	r9, #0
   15b2c:	add	r8, sp, #8
   15b30:	mov	r1, sl
   15b34:	mov	r0, r8
   15b38:	bl	15654 <__assert_fail@plt+0x4550>
   15b3c:	subs	fp, fp, #1
   15b40:	orr	r9, r9, r0
   15b44:	bne	15b30 <__assert_fail@plt+0x4a2c>
   15b48:	b	15acc <__assert_fail@plt+0x49c8>
   15b4c:	mov	fp, #6
   15b50:	mov	r9, #0
   15b54:	add	r8, sp, #8
   15b58:	mov	r1, sl
   15b5c:	mov	r0, r8
   15b60:	bl	15654 <__assert_fail@plt+0x4550>
   15b64:	subs	fp, fp, #1
   15b68:	orr	r9, r9, r0
   15b6c:	bne	15b58 <__assert_fail@plt+0x4a54>
   15b70:	b	15acc <__assert_fail@plt+0x49c8>
   15b74:	ldrd	r0, [sp, #8]
   15b78:	ldr	r3, [pc, #260]	; 15c84 <__assert_fail@plt+0x4b80>
   15b7c:	mvn	r2, #0
   15b80:	cmp	r1, r3
   15b84:	cmpeq	r0, r2
   15b88:	bhi	15c50 <__assert_fail@plt+0x4b4c>
   15b8c:	lsl	r1, r1, #10
   15b90:	orr	r1, r1, r0, lsr #22
   15b94:	lsl	r2, r0, #10
   15b98:	str	r1, [sp, #12]
   15b9c:	str	r2, [sp, #8]
   15ba0:	mov	r9, #0
   15ba4:	b	15a48 <__assert_fail@plt+0x4944>
   15ba8:	mov	fp, #5
   15bac:	mov	r9, #0
   15bb0:	add	r8, sp, #8
   15bb4:	mov	r1, sl
   15bb8:	mov	r0, r8
   15bbc:	bl	15654 <__assert_fail@plt+0x4550>
   15bc0:	subs	fp, fp, #1
   15bc4:	orr	r9, r9, r0
   15bc8:	bne	15bb4 <__assert_fail@plt+0x4ab0>
   15bcc:	b	15acc <__assert_fail@plt+0x49c8>
   15bd0:	mov	r1, sl
   15bd4:	add	r0, sp, #8
   15bd8:	bl	15654 <__assert_fail@plt+0x4550>
   15bdc:	mov	r1, sl
   15be0:	mov	r9, r0
   15be4:	add	r0, sp, #8
   15be8:	bl	15654 <__assert_fail@plt+0x4550>
   15bec:	ldr	r8, [r5]
   15bf0:	ldr	r2, [sp, #8]
   15bf4:	ldr	r1, [sp, #12]
   15bf8:	orr	r9, r9, r0
   15bfc:	b	15a48 <__assert_fail@plt+0x4944>
   15c00:	mov	fp, #4
   15c04:	mov	r9, #0
   15c08:	add	r8, sp, #8
   15c0c:	mov	r1, sl
   15c10:	mov	r0, r8
   15c14:	bl	15654 <__assert_fail@plt+0x4550>
   15c18:	subs	fp, fp, #1
   15c1c:	orr	r9, r9, r0
   15c20:	bne	15c0c <__assert_fail@plt+0x4b08>
   15c24:	b	15acc <__assert_fail@plt+0x49c8>
   15c28:	ldrd	r2, [sp, #8]
   15c2c:	orr	r4, r4, #2
   15c30:	strd	r2, [r6]
   15c34:	b	15758 <__assert_fail@plt+0x4654>
   15c38:	ldrb	r7, [r8, #2]
   15c3c:	mov	sl, #1024	; 0x400
   15c40:	cmp	r7, #66	; 0x42
   15c44:	movne	r7, #1
   15c48:	moveq	r7, #3
   15c4c:	b	158fc <__assert_fail@plt+0x47f8>
   15c50:	mvn	r1, #0
   15c54:	mvn	r0, #0
   15c58:	mvn	r2, #0
   15c5c:	strd	r0, [sp, #8]
   15c60:	mov	r9, #1
   15c64:	mov	r1, r2
   15c68:	b	15a48 <__assert_fail@plt+0x4944>
   15c6c:	ldr	r3, [pc, #20]	; 15c88 <__assert_fail@plt+0x4b84>
   15c70:	mov	r2, #85	; 0x55
   15c74:	ldr	r1, [pc, #16]	; 15c8c <__assert_fail@plt+0x4b88>
   15c78:	ldr	r0, [pc, #16]	; 15c90 <__assert_fail@plt+0x4b8c>
   15c7c:	bl	11104 <__assert_fail@plt>
   15c80:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   15c84:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   15c88:	andeq	r7, r1, r0, ror #16
   15c8c:	andeq	r7, r1, ip, ror #16
   15c90:	andeq	r7, r1, ip, ror r8
   15c94:	cmp	r1, #0
   15c98:	cmpne	r0, #0
   15c9c:	moveq	r1, #1
   15ca0:	moveq	r0, r1
   15ca4:	umull	r2, r3, r0, r1
   15ca8:	adds	r3, r3, #0
   15cac:	movne	r3, #1
   15cb0:	cmp	r2, #0
   15cb4:	blt	15cc4 <__assert_fail@plt+0x4bc0>
   15cb8:	cmp	r3, #0
   15cbc:	bne	15cc4 <__assert_fail@plt+0x4bc0>
   15cc0:	b	10e4c <calloc@plt>
   15cc4:	push	{r4, lr}
   15cc8:	bl	10ff0 <__errno_location@plt>
   15ccc:	mov	r3, #12
   15cd0:	str	r3, [r0]
   15cd4:	mov	r0, #0
   15cd8:	pop	{r4, pc}
   15cdc:	cmp	r0, #0
   15ce0:	moveq	r0, #1
   15ce4:	cmp	r0, #0
   15ce8:	blt	15cf0 <__assert_fail@plt+0x4bec>
   15cec:	b	10f84 <malloc@plt>
   15cf0:	push	{r4, lr}
   15cf4:	bl	10ff0 <__errno_location@plt>
   15cf8:	mov	r3, #12
   15cfc:	str	r3, [r0]
   15d00:	mov	r0, #0
   15d04:	pop	{r4, pc}
   15d08:	cmp	r0, #0
   15d0c:	beq	15d30 <__assert_fail@plt+0x4c2c>
   15d10:	cmp	r1, #0
   15d14:	push	{lr}		; (str lr, [sp, #-4]!)
   15d18:	sub	sp, sp, #12
   15d1c:	beq	15d38 <__assert_fail@plt+0x4c34>
   15d20:	blt	15d50 <__assert_fail@plt+0x4c4c>
   15d24:	add	sp, sp, #12
   15d28:	pop	{lr}		; (ldr lr, [sp], #4)
   15d2c:	b	10f00 <realloc@plt>
   15d30:	mov	r0, r1
   15d34:	b	15cdc <__assert_fail@plt+0x4bd8>
   15d38:	str	r1, [sp, #4]
   15d3c:	bl	11fcc <__assert_fail@plt+0xec8>
   15d40:	ldr	r3, [sp, #4]
   15d44:	mov	r0, r3
   15d48:	add	sp, sp, #12
   15d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d50:	bl	10ff0 <__errno_location@plt>
   15d54:	mov	r2, #12
   15d58:	mov	r3, #0
   15d5c:	str	r2, [r0]
   15d60:	b	15d44 <__assert_fail@plt+0x4c40>
   15d64:	mov	r0, #1
   15d68:	b	119e0 <__assert_fail@plt+0x8dc>
   15d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d70:	mov	r5, r1
   15d74:	sub	sp, sp, #12
   15d78:	mov	r4, r2
   15d7c:	str	r2, [sp]
   15d80:	mov	r7, r3
   15d84:	mov	sl, r0
   15d88:	bl	10fd8 <strlen@plt>
   15d8c:	ldr	fp, [r5]
   15d90:	cmp	fp, #0
   15d94:	beq	15e5c <__assert_fail@plt+0x4d58>
   15d98:	mov	r3, #0
   15d9c:	mov	r8, r0
   15da0:	str	r3, [sp, #4]
   15da4:	mov	r6, r3
   15da8:	mvn	r9, #0
   15dac:	b	15dd8 <__assert_fail@plt+0x4cd4>
   15db0:	bl	10edc <memcmp@plt>
   15db4:	ldr	r3, [sp, #4]
   15db8:	cmp	r0, #0
   15dbc:	movne	r3, #1
   15dc0:	str	r3, [sp, #4]
   15dc4:	ldr	fp, [r5, #4]!
   15dc8:	add	r6, r6, #1
   15dcc:	cmp	fp, #0
   15dd0:	add	r4, r4, r7
   15dd4:	beq	15e34 <__assert_fail@plt+0x4d30>
   15dd8:	mov	r2, r8
   15ddc:	mov	r1, sl
   15de0:	mov	r0, fp
   15de4:	bl	110e0 <strncmp@plt>
   15de8:	cmp	r0, #0
   15dec:	mov	r0, fp
   15df0:	bne	15dc4 <__assert_fail@plt+0x4cc0>
   15df4:	bl	10fd8 <strlen@plt>
   15df8:	ldr	r3, [sp]
   15dfc:	mov	r2, r7
   15e00:	mov	r1, r4
   15e04:	cmp	r8, r0
   15e08:	mla	r0, r7, r9, r3
   15e0c:	beq	15e4c <__assert_fail@plt+0x4d48>
   15e10:	cmn	r9, #1
   15e14:	moveq	r9, r6
   15e18:	beq	15dc4 <__assert_fail@plt+0x4cc0>
   15e1c:	ldr	r3, [sp]
   15e20:	cmp	r3, #0
   15e24:	bne	15db0 <__assert_fail@plt+0x4cac>
   15e28:	mov	r3, #1
   15e2c:	str	r3, [sp, #4]
   15e30:	b	15dc4 <__assert_fail@plt+0x4cc0>
   15e34:	ldr	r3, [sp, #4]
   15e38:	cmp	r3, #0
   15e3c:	mvnne	r9, #1
   15e40:	mov	r0, r9
   15e44:	add	sp, sp, #12
   15e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e4c:	mov	r9, r6
   15e50:	mov	r0, r9
   15e54:	add	sp, sp, #12
   15e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e5c:	mvn	r9, #0
   15e60:	b	15e40 <__assert_fail@plt+0x4d3c>
   15e64:	push	{r4, r5, r6, lr}
   15e68:	mov	r6, r0
   15e6c:	ldr	r0, [r1]
   15e70:	cmp	r0, #0
   15e74:	beq	15eac <__assert_fail@plt+0x4da8>
   15e78:	mov	r4, r1
   15e7c:	mov	r5, #0
   15e80:	b	15e94 <__assert_fail@plt+0x4d90>
   15e84:	ldr	r0, [r4, #4]!
   15e88:	add	r5, r5, #1
   15e8c:	cmp	r0, #0
   15e90:	beq	15eac <__assert_fail@plt+0x4da8>
   15e94:	mov	r1, r6
   15e98:	bl	10e70 <strcmp@plt>
   15e9c:	cmp	r0, #0
   15ea0:	bne	15e84 <__assert_fail@plt+0x4d80>
   15ea4:	mov	r0, r5
   15ea8:	pop	{r4, r5, r6, pc}
   15eac:	mvn	r0, #0
   15eb0:	pop	{r4, r5, r6, pc}
   15eb4:	cmn	r2, #1
   15eb8:	push	{r4, r5, r6, lr}
   15ebc:	mov	r2, #5
   15ec0:	sub	sp, sp, #8
   15ec4:	mov	r4, r1
   15ec8:	mov	r5, r0
   15ecc:	ldreq	r1, [pc, #76]	; 15f20 <__assert_fail@plt+0x4e1c>
   15ed0:	ldrne	r1, [pc, #76]	; 15f24 <__assert_fail@plt+0x4e20>
   15ed4:	mov	r0, #0
   15ed8:	bl	10ef4 <dcgettext@plt>
   15edc:	mov	r2, r4
   15ee0:	mov	r1, #8
   15ee4:	mov	r6, r0
   15ee8:	mov	r0, #0
   15eec:	bl	148dc <__assert_fail@plt+0x37d8>
   15ef0:	mov	r1, r5
   15ef4:	mov	r4, r0
   15ef8:	mov	r0, #1
   15efc:	bl	14b78 <__assert_fail@plt+0x3a74>
   15f00:	mov	r1, #0
   15f04:	mov	r3, r4
   15f08:	mov	r2, r6
   15f0c:	str	r0, [sp]
   15f10:	mov	r0, r1
   15f14:	bl	10f6c <error@plt>
   15f18:	add	sp, sp, #8
   15f1c:	pop	{r4, r5, r6, pc}
   15f20:	andeq	r7, r1, r4, lsr #17
   15f24:	andeq	r7, r1, r0, asr #17
   15f28:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f2c:	mov	r6, r0
   15f30:	ldr	r9, [pc, #232]	; 16020 <__assert_fail@plt+0x4f1c>
   15f34:	mov	r4, r1
   15f38:	mov	r7, r2
   15f3c:	ldr	r1, [pc, #224]	; 16024 <__assert_fail@plt+0x4f20>
   15f40:	mov	r2, #5
   15f44:	mov	r0, #0
   15f48:	bl	10ef4 <dcgettext@plt>
   15f4c:	ldr	r1, [r9]
   15f50:	bl	10e58 <fputs_unlocked@plt>
   15f54:	ldr	fp, [r6]
   15f58:	cmp	fp, #0
   15f5c:	movne	r8, #0
   15f60:	movne	r5, r8
   15f64:	movne	sl, #1
   15f68:	bne	15fa8 <__assert_fail@plt+0x4ea4>
   15f6c:	b	15fec <__assert_fail@plt+0x4ee8>
   15f70:	mov	r0, fp
   15f74:	ldr	r8, [r9]
   15f78:	bl	14b88 <__assert_fail@plt+0x3a84>
   15f7c:	ldr	r2, [pc, #164]	; 16028 <__assert_fail@plt+0x4f24>
   15f80:	mov	r1, sl
   15f84:	mov	r3, r0
   15f88:	mov	r0, r8
   15f8c:	bl	11044 <__fprintf_chk@plt>
   15f90:	mov	r8, r4
   15f94:	ldr	fp, [r6, #4]!
   15f98:	add	r5, r5, #1
   15f9c:	cmp	fp, #0
   15fa0:	add	r4, r4, r7
   15fa4:	beq	15fec <__assert_fail@plt+0x4ee8>
   15fa8:	cmp	r5, #0
   15fac:	mov	r1, r4
   15fb0:	mov	r2, r7
   15fb4:	mov	r0, r8
   15fb8:	beq	15f70 <__assert_fail@plt+0x4e6c>
   15fbc:	bl	10edc <memcmp@plt>
   15fc0:	cmp	r0, #0
   15fc4:	bne	15f70 <__assert_fail@plt+0x4e6c>
   15fc8:	mov	r0, fp
   15fcc:	ldr	fp, [r9]
   15fd0:	bl	14b88 <__assert_fail@plt+0x3a84>
   15fd4:	ldr	r2, [pc, #80]	; 1602c <__assert_fail@plt+0x4f28>
   15fd8:	mov	r1, sl
   15fdc:	mov	r3, r0
   15fe0:	mov	r0, fp
   15fe4:	bl	11044 <__fprintf_chk@plt>
   15fe8:	b	15f94 <__assert_fail@plt+0x4e90>
   15fec:	ldr	r0, [r9]
   15ff0:	ldr	r3, [r0, #20]
   15ff4:	ldr	r2, [r0, #24]
   15ff8:	cmp	r3, r2
   15ffc:	bcs	16014 <__assert_fail@plt+0x4f10>
   16000:	add	r1, r3, #1
   16004:	mov	r2, #10
   16008:	str	r1, [r0, #20]
   1600c:	strb	r2, [r3]
   16010:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16014:	mov	r1, #10
   16018:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1601c:	b	11074 <__overflow@plt>
   16020:	andeq	r8, r2, r8, ror #2
   16024:	andeq	r7, r1, r0, ror #17
   16028:	strdeq	r7, [r1], -r8
   1602c:	andeq	r7, r1, r0, lsl #18
   16030:	push	{r4, r5, r6, r7, r8, lr}
   16034:	mov	r7, r0
   16038:	ldrb	ip, [sp, #32]
   1603c:	mov	r5, r1
   16040:	mov	r4, r2
   16044:	cmp	ip, #0
   16048:	mov	r6, r3
   1604c:	beq	1609c <__assert_fail@plt+0x4f98>
   16050:	ldr	r3, [sp, #24]
   16054:	mov	r2, r6
   16058:	mov	r1, r4
   1605c:	mov	r0, r5
   16060:	bl	15d6c <__assert_fail@plt+0x4c68>
   16064:	cmp	r0, #0
   16068:	popge	{r4, r5, r6, r7, r8, pc}
   1606c:	mov	r2, r0
   16070:	mov	r1, r5
   16074:	mov	r0, r7
   16078:	bl	15eb4 <__assert_fail@plt+0x4db0>
   1607c:	mov	r0, r4
   16080:	ldr	r2, [sp, #24]
   16084:	mov	r1, r6
   16088:	bl	15f28 <__assert_fail@plt+0x4e24>
   1608c:	ldr	r3, [sp, #28]
   16090:	blx	r3
   16094:	mvn	r0, #0
   16098:	pop	{r4, r5, r6, r7, r8, pc}
   1609c:	mov	r1, r2
   160a0:	mov	r0, r5
   160a4:	bl	15e64 <__assert_fail@plt+0x4d60>
   160a8:	cmp	r0, #0
   160ac:	popge	{r4, r5, r6, r7, r8, pc}
   160b0:	b	1606c <__assert_fail@plt+0x4f68>
   160b4:	push	{r4, r5, r6, r7, r8, lr}
   160b8:	ldr	r7, [r1]
   160bc:	cmp	r7, #0
   160c0:	beq	16100 <__assert_fail@plt+0x4ffc>
   160c4:	mov	r6, r3
   160c8:	mov	r8, r0
   160cc:	mov	r4, r2
   160d0:	mov	r5, r1
   160d4:	b	160e4 <__assert_fail@plt+0x4fe0>
   160d8:	ldr	r7, [r5, #4]!
   160dc:	cmp	r7, #0
   160e0:	beq	16100 <__assert_fail@plt+0x4ffc>
   160e4:	mov	r1, r4
   160e8:	mov	r2, r6
   160ec:	mov	r0, r8
   160f0:	bl	10edc <memcmp@plt>
   160f4:	add	r4, r4, r6
   160f8:	cmp	r0, #0
   160fc:	bne	160d8 <__assert_fail@plt+0x4fd4>
   16100:	mov	r0, r7
   16104:	pop	{r4, r5, r6, r7, r8, pc}
   16108:	push	{r4, r5, r6, lr}
   1610c:	mov	r4, r0
   16110:	bl	10f54 <__fpending@plt>
   16114:	ldr	r5, [r4]
   16118:	and	r5, r5, #32
   1611c:	mov	r6, r0
   16120:	mov	r0, r4
   16124:	bl	11e34 <__assert_fail@plt+0xd30>
   16128:	cmp	r5, #0
   1612c:	mov	r4, r0
   16130:	bne	16150 <__assert_fail@plt+0x504c>
   16134:	cmp	r0, #0
   16138:	beq	16148 <__assert_fail@plt+0x5044>
   1613c:	cmp	r6, #0
   16140:	beq	1616c <__assert_fail@plt+0x5068>
   16144:	mvn	r4, #0
   16148:	mov	r0, r4
   1614c:	pop	{r4, r5, r6, pc}
   16150:	cmp	r0, #0
   16154:	bne	16144 <__assert_fail@plt+0x5040>
   16158:	bl	10ff0 <__errno_location@plt>
   1615c:	str	r4, [r0]
   16160:	mvn	r4, #0
   16164:	mov	r0, r4
   16168:	pop	{r4, r5, r6, pc}
   1616c:	bl	10ff0 <__errno_location@plt>
   16170:	ldr	r4, [r0]
   16174:	subs	r4, r4, #9
   16178:	mvnne	r4, #0
   1617c:	mov	r0, r4
   16180:	pop	{r4, r5, r6, pc}
   16184:	push	{r1, r2, r3}
   16188:	push	{r4, r5, r6, r7, lr}
   1618c:	sub	sp, sp, #8
   16190:	add	r3, sp, #32
   16194:	ldr	r1, [sp, #28]
   16198:	str	r3, [sp, #4]
   1619c:	cmp	r1, #0
   161a0:	beq	16238 <__assert_fail@plt+0x5134>
   161a4:	ldr	r2, [pc, #412]	; 16348 <__assert_fail@plt+0x5244>
   161a8:	mov	r5, r0
   161ac:	cmp	r1, r2
   161b0:	bne	161fc <__assert_fail@plt+0x50f8>
   161b4:	ldr	r6, [pc, #400]	; 1634c <__assert_fail@plt+0x5248>
   161b8:	ldr	r7, [r3]
   161bc:	add	r2, sp, #36	; 0x24
   161c0:	ldr	r3, [r6]
   161c4:	str	r2, [sp, #4]
   161c8:	cmp	r3, #0
   161cc:	mov	r2, r7
   161d0:	blt	162fc <__assert_fail@plt+0x51f8>
   161d4:	bl	11068 <fcntl64@plt>
   161d8:	subs	r4, r0, #0
   161dc:	blt	16280 <__assert_fail@plt+0x517c>
   161e0:	mov	r3, #1
   161e4:	str	r3, [r6]
   161e8:	mov	r0, r4
   161ec:	add	sp, sp, #8
   161f0:	pop	{r4, r5, r6, r7, lr}
   161f4:	add	sp, sp, #12
   161f8:	bx	lr
   161fc:	cmp	r1, #11
   16200:	beq	16228 <__assert_fail@plt+0x5124>
   16204:	bgt	16248 <__assert_fail@plt+0x5144>
   16208:	cmp	r1, #3
   1620c:	beq	16228 <__assert_fail@plt+0x5124>
   16210:	ble	1633c <__assert_fail@plt+0x5238>
   16214:	cmp	r1, #8
   16218:	beq	16268 <__assert_fail@plt+0x5164>
   1621c:	ble	16268 <__assert_fail@plt+0x5164>
   16220:	cmp	r1, #9
   16224:	bne	16268 <__assert_fail@plt+0x5164>
   16228:	mov	r0, r5
   1622c:	bl	11068 <fcntl64@plt>
   16230:	mov	r4, r0
   16234:	b	161e8 <__assert_fail@plt+0x50e4>
   16238:	ldr	r2, [sp, #32]
   1623c:	bl	11068 <fcntl64@plt>
   16240:	mov	r4, r0
   16244:	b	161e8 <__assert_fail@plt+0x50e4>
   16248:	ldr	r3, [pc, #256]	; 16350 <__assert_fail@plt+0x524c>
   1624c:	cmp	r1, r3
   16250:	bgt	1631c <__assert_fail@plt+0x5218>
   16254:	cmp	r1, r2
   16258:	bge	16268 <__assert_fail@plt+0x5164>
   1625c:	sub	r3, r3, #6
   16260:	cmp	r1, r3
   16264:	beq	16228 <__assert_fail@plt+0x5124>
   16268:	ldr	r3, [sp, #4]
   1626c:	mov	r0, r5
   16270:	ldr	r2, [r3]
   16274:	bl	11068 <fcntl64@plt>
   16278:	mov	r4, r0
   1627c:	b	161e8 <__assert_fail@plt+0x50e4>
   16280:	bl	10ff0 <__errno_location@plt>
   16284:	ldr	r3, [r0]
   16288:	cmp	r3, #22
   1628c:	bne	161e0 <__assert_fail@plt+0x50dc>
   16290:	mov	r2, r7
   16294:	mov	r0, r5
   16298:	mov	r1, #0
   1629c:	bl	11068 <fcntl64@plt>
   162a0:	subs	r4, r0, #0
   162a4:	blt	161e8 <__assert_fail@plt+0x50e4>
   162a8:	mvn	r3, #0
   162ac:	str	r3, [r6]
   162b0:	mov	r1, #1
   162b4:	mov	r0, r4
   162b8:	bl	11068 <fcntl64@plt>
   162bc:	subs	r2, r0, #0
   162c0:	blt	162dc <__assert_fail@plt+0x51d8>
   162c4:	orr	r2, r2, #1
   162c8:	mov	r1, #2
   162cc:	mov	r0, r4
   162d0:	bl	11068 <fcntl64@plt>
   162d4:	cmn	r0, #1
   162d8:	bne	161e8 <__assert_fail@plt+0x50e4>
   162dc:	bl	10ff0 <__errno_location@plt>
   162e0:	mov	r5, r0
   162e4:	mov	r0, r4
   162e8:	ldr	r6, [r5]
   162ec:	mvn	r4, #0
   162f0:	bl	110f8 <close@plt>
   162f4:	str	r6, [r5]
   162f8:	b	161e8 <__assert_fail@plt+0x50e4>
   162fc:	mov	r1, #0
   16300:	bl	11068 <fcntl64@plt>
   16304:	subs	r4, r0, #0
   16308:	blt	161e8 <__assert_fail@plt+0x50e4>
   1630c:	ldr	r3, [r6]
   16310:	cmn	r3, #1
   16314:	beq	162b0 <__assert_fail@plt+0x51ac>
   16318:	b	161e8 <__assert_fail@plt+0x50e4>
   1631c:	ldr	r3, [pc, #48]	; 16354 <__assert_fail@plt+0x5250>
   16320:	cmp	r1, r3
   16324:	beq	16268 <__assert_fail@plt+0x5164>
   16328:	blt	16228 <__assert_fail@plt+0x5124>
   1632c:	add	r3, r3, #1
   16330:	cmp	r1, r3
   16334:	bne	16268 <__assert_fail@plt+0x5164>
   16338:	b	16228 <__assert_fail@plt+0x5124>
   1633c:	cmp	r1, #1
   16340:	bne	16268 <__assert_fail@plt+0x5164>
   16344:	b	16228 <__assert_fail@plt+0x5124>
   16348:	andeq	r0, r0, r6, lsl #8
   1634c:	andeq	r8, r2, r0, asr #5
   16350:	andeq	r0, r0, r7, lsl #8
   16354:	andeq	r0, r0, r9, lsl #8
   16358:	push	{r4, lr}
   1635c:	mov	r0, #14
   16360:	bl	11098 <nl_langinfo@plt>
   16364:	cmp	r0, #0
   16368:	beq	16380 <__assert_fail@plt+0x527c>
   1636c:	ldrb	r2, [r0]
   16370:	ldr	r3, [pc, #16]	; 16388 <__assert_fail@plt+0x5284>
   16374:	cmp	r2, #0
   16378:	moveq	r0, r3
   1637c:	pop	{r4, pc}
   16380:	ldr	r0, [pc]	; 16388 <__assert_fail@plt+0x5284>
   16384:	pop	{r4, pc}
   16388:	andeq	r7, r1, r8, lsl #18
   1638c:	push	{r4, r5, r6, r7, lr}
   16390:	subs	r6, r0, #0
   16394:	sub	sp, sp, #12
   16398:	addeq	r6, sp, #4
   1639c:	mov	r0, r6
   163a0:	mov	r5, r2
   163a4:	mov	r7, r1
   163a8:	bl	10f60 <mbrtowc@plt>
   163ac:	cmp	r5, #0
   163b0:	cmnne	r0, #3
   163b4:	mov	r4, r0
   163b8:	bls	163d4 <__assert_fail@plt+0x52d0>
   163bc:	mov	r0, #0
   163c0:	bl	1642c <__assert_fail@plt+0x5328>
   163c4:	cmp	r0, #0
   163c8:	moveq	r4, #1
   163cc:	ldrbeq	r3, [r7]
   163d0:	streq	r3, [r6]
   163d4:	mov	r0, r4
   163d8:	add	sp, sp, #12
   163dc:	pop	{r4, r5, r6, r7, pc}
   163e0:	push	{r4, r5, r6, lr}
   163e4:	subs	r4, r2, #0
   163e8:	mov	r6, r0
   163ec:	mov	r5, r1
   163f0:	beq	1641c <__assert_fail@plt+0x5318>
   163f4:	mov	r1, r4
   163f8:	mvn	r0, #0
   163fc:	bl	16520 <__assert_fail@plt+0x541c>
   16400:	cmp	r0, r5
   16404:	bcs	1641c <__assert_fail@plt+0x5318>
   16408:	bl	10ff0 <__errno_location@plt>
   1640c:	mov	r3, #12
   16410:	str	r3, [r0]
   16414:	mov	r0, #0
   16418:	pop	{r4, r5, r6, pc}
   1641c:	mul	r1, r5, r4
   16420:	mov	r0, r6
   16424:	pop	{r4, r5, r6, lr}
   16428:	b	15d08 <__assert_fail@plt+0x4c04>
   1642c:	push	{lr}		; (str lr, [sp, #-4]!)
   16430:	sub	sp, sp, #268	; 0x10c
   16434:	add	r1, sp, #4
   16438:	ldr	r2, [pc, #60]	; 1647c <__assert_fail@plt+0x5378>
   1643c:	bl	16488 <__assert_fail@plt+0x5384>
   16440:	cmp	r0, #0
   16444:	movne	r0, #0
   16448:	bne	16474 <__assert_fail@plt+0x5370>
   1644c:	ldr	r1, [pc, #44]	; 16480 <__assert_fail@plt+0x537c>
   16450:	add	r0, sp, #4
   16454:	bl	10e70 <strcmp@plt>
   16458:	cmp	r0, #0
   1645c:	beq	16474 <__assert_fail@plt+0x5370>
   16460:	add	r0, sp, #4
   16464:	ldr	r1, [pc, #24]	; 16484 <__assert_fail@plt+0x5380>
   16468:	bl	10e70 <strcmp@plt>
   1646c:	adds	r0, r0, #0
   16470:	movne	r0, #1
   16474:	add	sp, sp, #268	; 0x10c
   16478:	pop	{pc}		; (ldr pc, [sp], #4)
   1647c:	andeq	r0, r0, r1, lsl #2
   16480:	andeq	r7, r1, r0, lsl r9
   16484:	andeq	r7, r1, r4, lsl r9
   16488:	push	{r4, r5, r6, lr}
   1648c:	mov	r5, r1
   16490:	mov	r1, #0
   16494:	mov	r4, r2
   16498:	bl	11080 <setlocale@plt>
   1649c:	subs	r6, r0, #0
   164a0:	beq	164fc <__assert_fail@plt+0x53f8>
   164a4:	bl	10fd8 <strlen@plt>
   164a8:	cmp	r4, r0
   164ac:	bhi	164e4 <__assert_fail@plt+0x53e0>
   164b0:	cmp	r4, #0
   164b4:	bne	164c0 <__assert_fail@plt+0x53bc>
   164b8:	mov	r0, #34	; 0x22
   164bc:	pop	{r4, r5, r6, pc}
   164c0:	sub	r4, r4, #1
   164c4:	mov	r1, r6
   164c8:	mov	r2, r4
   164cc:	mov	r0, r5
   164d0:	bl	10eb8 <memcpy@plt>
   164d4:	mov	r3, #0
   164d8:	strb	r3, [r5, r4]
   164dc:	mov	r0, #34	; 0x22
   164e0:	pop	{r4, r5, r6, pc}
   164e4:	add	r2, r0, #1
   164e8:	mov	r1, r6
   164ec:	mov	r0, r5
   164f0:	bl	10eb8 <memcpy@plt>
   164f4:	mov	r0, #0
   164f8:	pop	{r4, r5, r6, pc}
   164fc:	cmp	r4, #0
   16500:	beq	16510 <__assert_fail@plt+0x540c>
   16504:	strb	r6, [r5]
   16508:	mov	r0, #22
   1650c:	pop	{r4, r5, r6, pc}
   16510:	mov	r0, #22
   16514:	pop	{r4, r5, r6, pc}
   16518:	mov	r1, #0
   1651c:	b	11080 <setlocale@plt>
   16520:	subs	r2, r1, #1
   16524:	bxeq	lr
   16528:	bcc	16700 <__assert_fail@plt+0x55fc>
   1652c:	cmp	r0, r1
   16530:	bls	166e4 <__assert_fail@plt+0x55e0>
   16534:	tst	r1, r2
   16538:	beq	166f0 <__assert_fail@plt+0x55ec>
   1653c:	clz	r3, r0
   16540:	clz	r2, r1
   16544:	sub	r3, r2, r3
   16548:	rsbs	r3, r3, #31
   1654c:	addne	r3, r3, r3, lsl #1
   16550:	mov	r2, #0
   16554:	addne	pc, pc, r3, lsl #2
   16558:	nop			; (mov r0, r0)
   1655c:	cmp	r0, r1, lsl #31
   16560:	adc	r2, r2, r2
   16564:	subcs	r0, r0, r1, lsl #31
   16568:	cmp	r0, r1, lsl #30
   1656c:	adc	r2, r2, r2
   16570:	subcs	r0, r0, r1, lsl #30
   16574:	cmp	r0, r1, lsl #29
   16578:	adc	r2, r2, r2
   1657c:	subcs	r0, r0, r1, lsl #29
   16580:	cmp	r0, r1, lsl #28
   16584:	adc	r2, r2, r2
   16588:	subcs	r0, r0, r1, lsl #28
   1658c:	cmp	r0, r1, lsl #27
   16590:	adc	r2, r2, r2
   16594:	subcs	r0, r0, r1, lsl #27
   16598:	cmp	r0, r1, lsl #26
   1659c:	adc	r2, r2, r2
   165a0:	subcs	r0, r0, r1, lsl #26
   165a4:	cmp	r0, r1, lsl #25
   165a8:	adc	r2, r2, r2
   165ac:	subcs	r0, r0, r1, lsl #25
   165b0:	cmp	r0, r1, lsl #24
   165b4:	adc	r2, r2, r2
   165b8:	subcs	r0, r0, r1, lsl #24
   165bc:	cmp	r0, r1, lsl #23
   165c0:	adc	r2, r2, r2
   165c4:	subcs	r0, r0, r1, lsl #23
   165c8:	cmp	r0, r1, lsl #22
   165cc:	adc	r2, r2, r2
   165d0:	subcs	r0, r0, r1, lsl #22
   165d4:	cmp	r0, r1, lsl #21
   165d8:	adc	r2, r2, r2
   165dc:	subcs	r0, r0, r1, lsl #21
   165e0:	cmp	r0, r1, lsl #20
   165e4:	adc	r2, r2, r2
   165e8:	subcs	r0, r0, r1, lsl #20
   165ec:	cmp	r0, r1, lsl #19
   165f0:	adc	r2, r2, r2
   165f4:	subcs	r0, r0, r1, lsl #19
   165f8:	cmp	r0, r1, lsl #18
   165fc:	adc	r2, r2, r2
   16600:	subcs	r0, r0, r1, lsl #18
   16604:	cmp	r0, r1, lsl #17
   16608:	adc	r2, r2, r2
   1660c:	subcs	r0, r0, r1, lsl #17
   16610:	cmp	r0, r1, lsl #16
   16614:	adc	r2, r2, r2
   16618:	subcs	r0, r0, r1, lsl #16
   1661c:	cmp	r0, r1, lsl #15
   16620:	adc	r2, r2, r2
   16624:	subcs	r0, r0, r1, lsl #15
   16628:	cmp	r0, r1, lsl #14
   1662c:	adc	r2, r2, r2
   16630:	subcs	r0, r0, r1, lsl #14
   16634:	cmp	r0, r1, lsl #13
   16638:	adc	r2, r2, r2
   1663c:	subcs	r0, r0, r1, lsl #13
   16640:	cmp	r0, r1, lsl #12
   16644:	adc	r2, r2, r2
   16648:	subcs	r0, r0, r1, lsl #12
   1664c:	cmp	r0, r1, lsl #11
   16650:	adc	r2, r2, r2
   16654:	subcs	r0, r0, r1, lsl #11
   16658:	cmp	r0, r1, lsl #10
   1665c:	adc	r2, r2, r2
   16660:	subcs	r0, r0, r1, lsl #10
   16664:	cmp	r0, r1, lsl #9
   16668:	adc	r2, r2, r2
   1666c:	subcs	r0, r0, r1, lsl #9
   16670:	cmp	r0, r1, lsl #8
   16674:	adc	r2, r2, r2
   16678:	subcs	r0, r0, r1, lsl #8
   1667c:	cmp	r0, r1, lsl #7
   16680:	adc	r2, r2, r2
   16684:	subcs	r0, r0, r1, lsl #7
   16688:	cmp	r0, r1, lsl #6
   1668c:	adc	r2, r2, r2
   16690:	subcs	r0, r0, r1, lsl #6
   16694:	cmp	r0, r1, lsl #5
   16698:	adc	r2, r2, r2
   1669c:	subcs	r0, r0, r1, lsl #5
   166a0:	cmp	r0, r1, lsl #4
   166a4:	adc	r2, r2, r2
   166a8:	subcs	r0, r0, r1, lsl #4
   166ac:	cmp	r0, r1, lsl #3
   166b0:	adc	r2, r2, r2
   166b4:	subcs	r0, r0, r1, lsl #3
   166b8:	cmp	r0, r1, lsl #2
   166bc:	adc	r2, r2, r2
   166c0:	subcs	r0, r0, r1, lsl #2
   166c4:	cmp	r0, r1, lsl #1
   166c8:	adc	r2, r2, r2
   166cc:	subcs	r0, r0, r1, lsl #1
   166d0:	cmp	r0, r1
   166d4:	adc	r2, r2, r2
   166d8:	subcs	r0, r0, r1
   166dc:	mov	r0, r2
   166e0:	bx	lr
   166e4:	moveq	r0, #1
   166e8:	movne	r0, #0
   166ec:	bx	lr
   166f0:	clz	r2, r1
   166f4:	rsb	r2, r2, #31
   166f8:	lsr	r0, r0, r2
   166fc:	bx	lr
   16700:	cmp	r0, #0
   16704:	mvnne	r0, #0
   16708:	b	16d60 <__assert_fail@plt+0x5c5c>
   1670c:	cmp	r1, #0
   16710:	beq	16700 <__assert_fail@plt+0x55fc>
   16714:	push	{r0, r1, lr}
   16718:	bl	16520 <__assert_fail@plt+0x541c>
   1671c:	pop	{r1, r2, lr}
   16720:	mul	r3, r2, r0
   16724:	sub	r1, r1, r3
   16728:	bx	lr
   1672c:	cmp	r1, #0
   16730:	beq	1693c <__assert_fail@plt+0x5838>
   16734:	eor	ip, r0, r1
   16738:	rsbmi	r1, r1, #0
   1673c:	subs	r2, r1, #1
   16740:	beq	16908 <__assert_fail@plt+0x5804>
   16744:	movs	r3, r0
   16748:	rsbmi	r3, r0, #0
   1674c:	cmp	r3, r1
   16750:	bls	16914 <__assert_fail@plt+0x5810>
   16754:	tst	r1, r2
   16758:	beq	16924 <__assert_fail@plt+0x5820>
   1675c:	clz	r2, r3
   16760:	clz	r0, r1
   16764:	sub	r2, r0, r2
   16768:	rsbs	r2, r2, #31
   1676c:	addne	r2, r2, r2, lsl #1
   16770:	mov	r0, #0
   16774:	addne	pc, pc, r2, lsl #2
   16778:	nop			; (mov r0, r0)
   1677c:	cmp	r3, r1, lsl #31
   16780:	adc	r0, r0, r0
   16784:	subcs	r3, r3, r1, lsl #31
   16788:	cmp	r3, r1, lsl #30
   1678c:	adc	r0, r0, r0
   16790:	subcs	r3, r3, r1, lsl #30
   16794:	cmp	r3, r1, lsl #29
   16798:	adc	r0, r0, r0
   1679c:	subcs	r3, r3, r1, lsl #29
   167a0:	cmp	r3, r1, lsl #28
   167a4:	adc	r0, r0, r0
   167a8:	subcs	r3, r3, r1, lsl #28
   167ac:	cmp	r3, r1, lsl #27
   167b0:	adc	r0, r0, r0
   167b4:	subcs	r3, r3, r1, lsl #27
   167b8:	cmp	r3, r1, lsl #26
   167bc:	adc	r0, r0, r0
   167c0:	subcs	r3, r3, r1, lsl #26
   167c4:	cmp	r3, r1, lsl #25
   167c8:	adc	r0, r0, r0
   167cc:	subcs	r3, r3, r1, lsl #25
   167d0:	cmp	r3, r1, lsl #24
   167d4:	adc	r0, r0, r0
   167d8:	subcs	r3, r3, r1, lsl #24
   167dc:	cmp	r3, r1, lsl #23
   167e0:	adc	r0, r0, r0
   167e4:	subcs	r3, r3, r1, lsl #23
   167e8:	cmp	r3, r1, lsl #22
   167ec:	adc	r0, r0, r0
   167f0:	subcs	r3, r3, r1, lsl #22
   167f4:	cmp	r3, r1, lsl #21
   167f8:	adc	r0, r0, r0
   167fc:	subcs	r3, r3, r1, lsl #21
   16800:	cmp	r3, r1, lsl #20
   16804:	adc	r0, r0, r0
   16808:	subcs	r3, r3, r1, lsl #20
   1680c:	cmp	r3, r1, lsl #19
   16810:	adc	r0, r0, r0
   16814:	subcs	r3, r3, r1, lsl #19
   16818:	cmp	r3, r1, lsl #18
   1681c:	adc	r0, r0, r0
   16820:	subcs	r3, r3, r1, lsl #18
   16824:	cmp	r3, r1, lsl #17
   16828:	adc	r0, r0, r0
   1682c:	subcs	r3, r3, r1, lsl #17
   16830:	cmp	r3, r1, lsl #16
   16834:	adc	r0, r0, r0
   16838:	subcs	r3, r3, r1, lsl #16
   1683c:	cmp	r3, r1, lsl #15
   16840:	adc	r0, r0, r0
   16844:	subcs	r3, r3, r1, lsl #15
   16848:	cmp	r3, r1, lsl #14
   1684c:	adc	r0, r0, r0
   16850:	subcs	r3, r3, r1, lsl #14
   16854:	cmp	r3, r1, lsl #13
   16858:	adc	r0, r0, r0
   1685c:	subcs	r3, r3, r1, lsl #13
   16860:	cmp	r3, r1, lsl #12
   16864:	adc	r0, r0, r0
   16868:	subcs	r3, r3, r1, lsl #12
   1686c:	cmp	r3, r1, lsl #11
   16870:	adc	r0, r0, r0
   16874:	subcs	r3, r3, r1, lsl #11
   16878:	cmp	r3, r1, lsl #10
   1687c:	adc	r0, r0, r0
   16880:	subcs	r3, r3, r1, lsl #10
   16884:	cmp	r3, r1, lsl #9
   16888:	adc	r0, r0, r0
   1688c:	subcs	r3, r3, r1, lsl #9
   16890:	cmp	r3, r1, lsl #8
   16894:	adc	r0, r0, r0
   16898:	subcs	r3, r3, r1, lsl #8
   1689c:	cmp	r3, r1, lsl #7
   168a0:	adc	r0, r0, r0
   168a4:	subcs	r3, r3, r1, lsl #7
   168a8:	cmp	r3, r1, lsl #6
   168ac:	adc	r0, r0, r0
   168b0:	subcs	r3, r3, r1, lsl #6
   168b4:	cmp	r3, r1, lsl #5
   168b8:	adc	r0, r0, r0
   168bc:	subcs	r3, r3, r1, lsl #5
   168c0:	cmp	r3, r1, lsl #4
   168c4:	adc	r0, r0, r0
   168c8:	subcs	r3, r3, r1, lsl #4
   168cc:	cmp	r3, r1, lsl #3
   168d0:	adc	r0, r0, r0
   168d4:	subcs	r3, r3, r1, lsl #3
   168d8:	cmp	r3, r1, lsl #2
   168dc:	adc	r0, r0, r0
   168e0:	subcs	r3, r3, r1, lsl #2
   168e4:	cmp	r3, r1, lsl #1
   168e8:	adc	r0, r0, r0
   168ec:	subcs	r3, r3, r1, lsl #1
   168f0:	cmp	r3, r1
   168f4:	adc	r0, r0, r0
   168f8:	subcs	r3, r3, r1
   168fc:	cmp	ip, #0
   16900:	rsbmi	r0, r0, #0
   16904:	bx	lr
   16908:	teq	ip, r0
   1690c:	rsbmi	r0, r0, #0
   16910:	bx	lr
   16914:	movcc	r0, #0
   16918:	asreq	r0, ip, #31
   1691c:	orreq	r0, r0, #1
   16920:	bx	lr
   16924:	clz	r2, r1
   16928:	rsb	r2, r2, #31
   1692c:	cmp	ip, #0
   16930:	lsr	r0, r3, r2
   16934:	rsbmi	r0, r0, #0
   16938:	bx	lr
   1693c:	cmp	r0, #0
   16940:	mvngt	r0, #-2147483648	; 0x80000000
   16944:	movlt	r0, #-2147483648	; 0x80000000
   16948:	b	16d60 <__assert_fail@plt+0x5c5c>
   1694c:	cmp	r1, #0
   16950:	beq	1693c <__assert_fail@plt+0x5838>
   16954:	push	{r0, r1, lr}
   16958:	bl	16734 <__assert_fail@plt+0x5630>
   1695c:	pop	{r1, r2, lr}
   16960:	mul	r3, r2, r0
   16964:	sub	r1, r1, r3
   16968:	bx	lr
   1696c:	eor	r1, r1, #-2147483648	; 0x80000000
   16970:	b	16978 <__assert_fail@plt+0x5874>
   16974:	eor	r3, r3, #-2147483648	; 0x80000000
   16978:	push	{r4, r5, lr}
   1697c:	lsl	r4, r1, #1
   16980:	lsl	r5, r3, #1
   16984:	teq	r4, r5
   16988:	teqeq	r0, r2
   1698c:	orrsne	ip, r4, r0
   16990:	orrsne	ip, r5, r2
   16994:	mvnsne	ip, r4, asr #21
   16998:	mvnsne	ip, r5, asr #21
   1699c:	beq	16b88 <__assert_fail@plt+0x5a84>
   169a0:	lsr	r4, r4, #21
   169a4:	rsbs	r5, r4, r5, lsr #21
   169a8:	rsblt	r5, r5, #0
   169ac:	ble	169cc <__assert_fail@plt+0x58c8>
   169b0:	add	r4, r4, r5
   169b4:	eor	r2, r0, r2
   169b8:	eor	r3, r1, r3
   169bc:	eor	r0, r2, r0
   169c0:	eor	r1, r3, r1
   169c4:	eor	r2, r0, r2
   169c8:	eor	r3, r1, r3
   169cc:	cmp	r5, #54	; 0x36
   169d0:	pophi	{r4, r5, pc}
   169d4:	tst	r1, #-2147483648	; 0x80000000
   169d8:	lsl	r1, r1, #12
   169dc:	mov	ip, #1048576	; 0x100000
   169e0:	orr	r1, ip, r1, lsr #12
   169e4:	beq	169f0 <__assert_fail@plt+0x58ec>
   169e8:	rsbs	r0, r0, #0
   169ec:	rsc	r1, r1, #0
   169f0:	tst	r3, #-2147483648	; 0x80000000
   169f4:	lsl	r3, r3, #12
   169f8:	orr	r3, ip, r3, lsr #12
   169fc:	beq	16a08 <__assert_fail@plt+0x5904>
   16a00:	rsbs	r2, r2, #0
   16a04:	rsc	r3, r3, #0
   16a08:	teq	r4, r5
   16a0c:	beq	16b70 <__assert_fail@plt+0x5a6c>
   16a10:	sub	r4, r4, #1
   16a14:	rsbs	lr, r5, #32
   16a18:	blt	16a34 <__assert_fail@plt+0x5930>
   16a1c:	lsl	ip, r2, lr
   16a20:	adds	r0, r0, r2, lsr r5
   16a24:	adc	r1, r1, #0
   16a28:	adds	r0, r0, r3, lsl lr
   16a2c:	adcs	r1, r1, r3, asr r5
   16a30:	b	16a50 <__assert_fail@plt+0x594c>
   16a34:	sub	r5, r5, #32
   16a38:	add	lr, lr, #32
   16a3c:	cmp	r2, #1
   16a40:	lsl	ip, r3, lr
   16a44:	orrcs	ip, ip, #2
   16a48:	adds	r0, r0, r3, asr r5
   16a4c:	adcs	r1, r1, r3, asr #31
   16a50:	and	r5, r1, #-2147483648	; 0x80000000
   16a54:	bpl	16a64 <__assert_fail@plt+0x5960>
   16a58:	rsbs	ip, ip, #0
   16a5c:	rscs	r0, r0, #0
   16a60:	rsc	r1, r1, #0
   16a64:	cmp	r1, #1048576	; 0x100000
   16a68:	bcc	16aa8 <__assert_fail@plt+0x59a4>
   16a6c:	cmp	r1, #2097152	; 0x200000
   16a70:	bcc	16a90 <__assert_fail@plt+0x598c>
   16a74:	lsrs	r1, r1, #1
   16a78:	rrxs	r0, r0
   16a7c:	rrx	ip, ip
   16a80:	add	r4, r4, #1
   16a84:	lsl	r2, r4, #21
   16a88:	cmn	r2, #4194304	; 0x400000
   16a8c:	bcs	16be8 <__assert_fail@plt+0x5ae4>
   16a90:	cmp	ip, #-2147483648	; 0x80000000
   16a94:	lsrseq	ip, r0, #1
   16a98:	adcs	r0, r0, #0
   16a9c:	adc	r1, r1, r4, lsl #20
   16aa0:	orr	r1, r1, r5
   16aa4:	pop	{r4, r5, pc}
   16aa8:	lsls	ip, ip, #1
   16aac:	adcs	r0, r0, r0
   16ab0:	adc	r1, r1, r1
   16ab4:	tst	r1, #1048576	; 0x100000
   16ab8:	sub	r4, r4, #1
   16abc:	bne	16a90 <__assert_fail@plt+0x598c>
   16ac0:	teq	r1, #0
   16ac4:	moveq	r1, r0
   16ac8:	moveq	r0, #0
   16acc:	clz	r3, r1
   16ad0:	addeq	r3, r3, #32
   16ad4:	sub	r3, r3, #11
   16ad8:	subs	r2, r3, #32
   16adc:	bge	16b00 <__assert_fail@plt+0x59fc>
   16ae0:	adds	r2, r2, #12
   16ae4:	ble	16afc <__assert_fail@plt+0x59f8>
   16ae8:	add	ip, r2, #20
   16aec:	rsb	r2, r2, #12
   16af0:	lsl	r0, r1, ip
   16af4:	lsr	r1, r1, r2
   16af8:	b	16b10 <__assert_fail@plt+0x5a0c>
   16afc:	add	r2, r2, #20
   16b00:	rsble	ip, r2, #32
   16b04:	lsl	r1, r1, r2
   16b08:	orrle	r1, r1, r0, lsr ip
   16b0c:	lslle	r0, r0, r2
   16b10:	subs	r4, r4, r3
   16b14:	addge	r1, r1, r4, lsl #20
   16b18:	orrge	r1, r1, r5
   16b1c:	popge	{r4, r5, pc}
   16b20:	mvn	r4, r4
   16b24:	subs	r4, r4, #31
   16b28:	bge	16b64 <__assert_fail@plt+0x5a60>
   16b2c:	adds	r4, r4, #12
   16b30:	bgt	16b4c <__assert_fail@plt+0x5a48>
   16b34:	add	r4, r4, #20
   16b38:	rsb	r2, r4, #32
   16b3c:	lsr	r0, r0, r4
   16b40:	orr	r0, r0, r1, lsl r2
   16b44:	orr	r1, r5, r1, lsr r4
   16b48:	pop	{r4, r5, pc}
   16b4c:	rsb	r4, r4, #12
   16b50:	rsb	r2, r4, #32
   16b54:	lsr	r0, r0, r2
   16b58:	orr	r0, r0, r1, lsl r4
   16b5c:	mov	r1, r5
   16b60:	pop	{r4, r5, pc}
   16b64:	lsr	r0, r1, r4
   16b68:	mov	r1, r5
   16b6c:	pop	{r4, r5, pc}
   16b70:	teq	r4, #0
   16b74:	eor	r3, r3, #1048576	; 0x100000
   16b78:	eoreq	r1, r1, #1048576	; 0x100000
   16b7c:	addeq	r4, r4, #1
   16b80:	subne	r5, r5, #1
   16b84:	b	16a10 <__assert_fail@plt+0x590c>
   16b88:	mvns	ip, r4, asr #21
   16b8c:	mvnsne	ip, r5, asr #21
   16b90:	beq	16bf8 <__assert_fail@plt+0x5af4>
   16b94:	teq	r4, r5
   16b98:	teqeq	r0, r2
   16b9c:	beq	16bb0 <__assert_fail@plt+0x5aac>
   16ba0:	orrs	ip, r4, r0
   16ba4:	moveq	r1, r3
   16ba8:	moveq	r0, r2
   16bac:	pop	{r4, r5, pc}
   16bb0:	teq	r1, r3
   16bb4:	movne	r1, #0
   16bb8:	movne	r0, #0
   16bbc:	popne	{r4, r5, pc}
   16bc0:	lsrs	ip, r4, #21
   16bc4:	bne	16bd8 <__assert_fail@plt+0x5ad4>
   16bc8:	lsls	r0, r0, #1
   16bcc:	adcs	r1, r1, r1
   16bd0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16bd4:	pop	{r4, r5, pc}
   16bd8:	adds	r4, r4, #4194304	; 0x400000
   16bdc:	addcc	r1, r1, #1048576	; 0x100000
   16be0:	popcc	{r4, r5, pc}
   16be4:	and	r5, r1, #-2147483648	; 0x80000000
   16be8:	orr	r1, r5, #2130706432	; 0x7f000000
   16bec:	orr	r1, r1, #15728640	; 0xf00000
   16bf0:	mov	r0, #0
   16bf4:	pop	{r4, r5, pc}
   16bf8:	mvns	ip, r4, asr #21
   16bfc:	movne	r1, r3
   16c00:	movne	r0, r2
   16c04:	mvnseq	ip, r5, asr #21
   16c08:	movne	r3, r1
   16c0c:	movne	r2, r0
   16c10:	orrs	r4, r0, r1, lsl #12
   16c14:	orrseq	r5, r2, r3, lsl #12
   16c18:	teqeq	r1, r3
   16c1c:	orrne	r1, r1, #524288	; 0x80000
   16c20:	pop	{r4, r5, pc}
   16c24:	teq	r0, #0
   16c28:	moveq	r1, #0
   16c2c:	bxeq	lr
   16c30:	push	{r4, r5, lr}
   16c34:	mov	r4, #1024	; 0x400
   16c38:	add	r4, r4, #50	; 0x32
   16c3c:	mov	r5, #0
   16c40:	mov	r1, #0
   16c44:	b	16ac0 <__assert_fail@plt+0x59bc>
   16c48:	teq	r0, #0
   16c4c:	moveq	r1, #0
   16c50:	bxeq	lr
   16c54:	push	{r4, r5, lr}
   16c58:	mov	r4, #1024	; 0x400
   16c5c:	add	r4, r4, #50	; 0x32
   16c60:	ands	r5, r0, #-2147483648	; 0x80000000
   16c64:	rsbmi	r0, r0, #0
   16c68:	mov	r1, #0
   16c6c:	b	16ac0 <__assert_fail@plt+0x59bc>
   16c70:	lsls	r2, r0, #1
   16c74:	asr	r1, r2, #3
   16c78:	rrx	r1, r1
   16c7c:	lsl	r0, r2, #28
   16c80:	andsne	r3, r2, #-16777216	; 0xff000000
   16c84:	teqne	r3, #-16777216	; 0xff000000
   16c88:	eorne	r1, r1, #939524096	; 0x38000000
   16c8c:	bxne	lr
   16c90:	teq	r2, #0
   16c94:	teqne	r3, #-16777216	; 0xff000000
   16c98:	bxeq	lr
   16c9c:	push	{r4, r5, lr}
   16ca0:	mov	r4, #896	; 0x380
   16ca4:	and	r5, r1, #-2147483648	; 0x80000000
   16ca8:	bic	r1, r1, #-2147483648	; 0x80000000
   16cac:	b	16ac0 <__assert_fail@plt+0x59bc>
   16cb0:	orrs	r2, r0, r1
   16cb4:	bxeq	lr
   16cb8:	push	{r4, r5, lr}
   16cbc:	mov	r5, #0
   16cc0:	b	16ce0 <__assert_fail@plt+0x5bdc>
   16cc4:	orrs	r2, r0, r1
   16cc8:	bxeq	lr
   16ccc:	push	{r4, r5, lr}
   16cd0:	ands	r5, r1, #-2147483648	; 0x80000000
   16cd4:	bpl	16ce0 <__assert_fail@plt+0x5bdc>
   16cd8:	rsbs	r0, r0, #0
   16cdc:	rsc	r1, r1, #0
   16ce0:	mov	r4, #1024	; 0x400
   16ce4:	add	r4, r4, #50	; 0x32
   16ce8:	lsrs	ip, r1, #22
   16cec:	beq	16a64 <__assert_fail@plt+0x5960>
   16cf0:	mov	r2, #3
   16cf4:	lsrs	ip, ip, #3
   16cf8:	addne	r2, r2, #3
   16cfc:	lsrs	ip, ip, #3
   16d00:	addne	r2, r2, #3
   16d04:	add	r2, r2, ip, lsr #3
   16d08:	rsb	r3, r2, #32
   16d0c:	lsl	ip, r0, r3
   16d10:	lsr	r0, r0, r2
   16d14:	orr	r0, r0, r1, lsl r3
   16d18:	lsr	r1, r1, r2
   16d1c:	add	r4, r4, r2
   16d20:	b	16a64 <__assert_fail@plt+0x5960>
   16d24:	cmp	r3, #0
   16d28:	cmpeq	r2, #0
   16d2c:	bne	16d44 <__assert_fail@plt+0x5c40>
   16d30:	cmp	r1, #0
   16d34:	cmpeq	r0, #0
   16d38:	mvnne	r1, #0
   16d3c:	mvnne	r0, #0
   16d40:	b	16d60 <__assert_fail@plt+0x5c5c>
   16d44:	sub	sp, sp, #8
   16d48:	push	{sp, lr}
   16d4c:	bl	16db8 <__assert_fail@plt+0x5cb4>
   16d50:	ldr	lr, [sp, #4]
   16d54:	add	sp, sp, #8
   16d58:	pop	{r2, r3}
   16d5c:	bx	lr
   16d60:	push	{r1, lr}
   16d64:	mov	r0, #8
   16d68:	bl	10e64 <raise@plt>
   16d6c:	pop	{r1, pc}
   16d70:	vmov	d7, r0, r1
   16d74:	vldr	d6, [pc, #44]	; 16da8 <__assert_fail@plt+0x5ca4>
   16d78:	vldr	d5, [pc, #48]	; 16db0 <__assert_fail@plt+0x5cac>
   16d7c:	mov	r0, #0
   16d80:	vmul.f64	d6, d7, d6
   16d84:	vcvt.u32.f64	s12, d6
   16d88:	vcvt.f64.u32	d4, s12
   16d8c:	vmov	r1, s12
   16d90:	vmls.f64	d7, d4, d5
   16d94:	vcvt.u32.f64	s14, d7
   16d98:	vmov	r3, s14
   16d9c:	orr	r0, r0, r3
   16da0:	bx	lr
   16da4:	nop			; (mov r0, r0)
   16da8:	andeq	r0, r0, r0
   16dac:	ldclcc	0, cr0, [r0]
   16db0:	andeq	r0, r0, r0
   16db4:	mvnsmi	r0, r0
   16db8:	cmp	r1, r3
   16dbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   16dc0:	cmpeq	r0, r2
   16dc4:	mov	r4, r0
   16dc8:	mov	r5, r1
   16dcc:	ldr	r9, [sp, #28]
   16dd0:	movcc	r0, #0
   16dd4:	movcc	r1, #0
   16dd8:	bcc	16ed0 <__assert_fail@plt+0x5dcc>
   16ddc:	cmp	r3, #0
   16de0:	clzeq	ip, r2
   16de4:	clzne	ip, r3
   16de8:	addeq	ip, ip, #32
   16dec:	cmp	r5, #0
   16df0:	clzeq	r1, r4
   16df4:	addeq	r1, r1, #32
   16df8:	clzne	r1, r5
   16dfc:	sub	ip, ip, r1
   16e00:	sub	lr, ip, #32
   16e04:	lsl	r7, r3, ip
   16e08:	rsb	r8, ip, #32
   16e0c:	orr	r7, r7, r2, lsl lr
   16e10:	orr	r7, r7, r2, lsr r8
   16e14:	lsl	r6, r2, ip
   16e18:	cmp	r5, r7
   16e1c:	cmpeq	r4, r6
   16e20:	movcc	r0, #0
   16e24:	movcc	r1, #0
   16e28:	bcc	16e44 <__assert_fail@plt+0x5d40>
   16e2c:	mov	r3, #1
   16e30:	subs	r4, r4, r6
   16e34:	lsl	r1, r3, lr
   16e38:	lsl	r0, r3, ip
   16e3c:	orr	r1, r1, r3, lsr r8
   16e40:	sbc	r5, r5, r7
   16e44:	cmp	ip, #0
   16e48:	beq	16ed0 <__assert_fail@plt+0x5dcc>
   16e4c:	lsrs	r3, r7, #1
   16e50:	rrx	r2, r6
   16e54:	mov	r6, ip
   16e58:	b	16e7c <__assert_fail@plt+0x5d78>
   16e5c:	subs	r4, r4, r2
   16e60:	sbc	r5, r5, r3
   16e64:	adds	r4, r4, r4
   16e68:	adc	r5, r5, r5
   16e6c:	adds	r4, r4, #1
   16e70:	adc	r5, r5, #0
   16e74:	subs	r6, r6, #1
   16e78:	beq	16e98 <__assert_fail@plt+0x5d94>
   16e7c:	cmp	r5, r3
   16e80:	cmpeq	r4, r2
   16e84:	bcs	16e5c <__assert_fail@plt+0x5d58>
   16e88:	adds	r4, r4, r4
   16e8c:	adc	r5, r5, r5
   16e90:	subs	r6, r6, #1
   16e94:	bne	16e7c <__assert_fail@plt+0x5d78>
   16e98:	lsr	r6, r4, ip
   16e9c:	lsr	r7, r5, ip
   16ea0:	orr	r6, r6, r5, lsl r8
   16ea4:	adds	r2, r0, r4
   16ea8:	orr	r6, r6, r5, lsr lr
   16eac:	adc	r3, r1, r5
   16eb0:	lsl	r1, r7, ip
   16eb4:	orr	r1, r1, r6, lsl lr
   16eb8:	lsl	r0, r6, ip
   16ebc:	orr	r1, r1, r6, lsr r8
   16ec0:	subs	r0, r2, r0
   16ec4:	mov	r4, r6
   16ec8:	mov	r5, r7
   16ecc:	sbc	r1, r3, r1
   16ed0:	cmp	r9, #0
   16ed4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16ed8:	strd	r4, [r9]
   16edc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ee0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ee4:	mov	r7, r0
   16ee8:	ldr	r6, [pc, #72]	; 16f38 <__assert_fail@plt+0x5e34>
   16eec:	ldr	r5, [pc, #72]	; 16f3c <__assert_fail@plt+0x5e38>
   16ef0:	add	r6, pc, r6
   16ef4:	add	r5, pc, r5
   16ef8:	sub	r6, r6, r5
   16efc:	mov	r8, r1
   16f00:	mov	r9, r2
   16f04:	bl	10e20 <fdopen@plt-0x20>
   16f08:	asrs	r6, r6, #2
   16f0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f10:	mov	r4, #0
   16f14:	add	r4, r4, #1
   16f18:	ldr	r3, [r5], #4
   16f1c:	mov	r2, r9
   16f20:	mov	r1, r8
   16f24:	mov	r0, r7
   16f28:	blx	r3
   16f2c:	cmp	r6, r4
   16f30:	bne	16f14 <__assert_fail@plt+0x5e10>
   16f34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f38:	andeq	r1, r1, r8, lsl r0
   16f3c:	andeq	r1, r1, r0, lsl r0
   16f40:	bx	lr
   16f44:	ldr	r3, [pc, #12]	; 16f58 <__assert_fail@plt+0x5e54>
   16f48:	mov	r1, #0
   16f4c:	add	r3, pc, r3
   16f50:	ldr	r2, [r3]
   16f54:	b	11008 <__cxa_atexit@plt>
   16f58:			; <UNDEFINED> instruction: 0x000111b0

Disassembly of section .fini:

00016f5c <.fini>:
   16f5c:	push	{r3, lr}
   16f60:	pop	{r3, pc}
