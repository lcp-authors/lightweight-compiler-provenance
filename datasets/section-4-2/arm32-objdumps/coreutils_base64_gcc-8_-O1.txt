
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010c7c <.init>:
   10c7c:	push	{r3, lr}
   10c80:	bl	10f48 <__assert_fail@plt+0x48>
   10c84:	pop	{r3, pc}

Disassembly of section .plt:

00010c88 <calloc@plt-0x14>:
   10c88:	push	{lr}		; (str lr, [sp, #-4]!)
   10c8c:	ldr	lr, [pc, #4]	; 10c98 <calloc@plt-0x4>
   10c90:	add	lr, pc, lr
   10c94:	ldr	pc, [lr, #8]!
   10c98:	andeq	r6, r1, r8, ror #6

00010c9c <calloc@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #872]!	; 0x368

00010ca8 <fputs_unlocked@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #864]!	; 0x360

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #856]!	; 0x358

00010cc0 <posix_fadvise64@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #848]!	; 0x350

00010ccc <fflush@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #840]!	; 0x348

00010cd8 <memmove@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #832]!	; 0x340

00010ce4 <free@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #824]!	; 0x338

00010cf0 <_exit@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #816]!	; 0x330

00010cfc <memcpy@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #808]!	; 0x328

00010d08 <mbsinit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #800]!	; 0x320

00010d14 <fwrite_unlocked@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #792]!	; 0x318

00010d20 <memcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #784]!	; 0x310

00010d2c <fputc_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #776]!	; 0x308

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #768]!	; 0x300

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d50 <textdomain@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #752]!	; 0x2f0

00010d5c <iswprint@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #744]!	; 0x2e8

00010d68 <fwrite@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #736]!	; 0x2e0

00010d74 <lseek64@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d80 <__ctype_get_mb_cur_max@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #720]!	; 0x2d0

00010d8c <__fpending@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #712]!	; 0x2c8

00010d98 <mbrtowc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #704]!	; 0x2c0

00010da4 <error@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #696]!	; 0x2b8

00010db0 <malloc@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dbc <__libc_start_main@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc8 <__freading@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd4 <__gmon_start__@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #664]!	; 0x298

00010de0 <getopt_long@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #656]!	; 0x290

00010dec <__ctype_b_loc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #648]!	; 0x288

00010df8 <exit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #640]!	; 0x280

00010e04 <strlen@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #632]!	; 0x278

00010e10 <strchr@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #624]!	; 0x270

00010e1c <__errno_location@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #616]!	; 0x268

00010e28 <__cxa_atexit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #608]!	; 0x260

00010e34 <memset@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #600]!	; 0x258

00010e40 <__printf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #592]!	; 0x250

00010e4c <fileno@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #584]!	; 0x248

00010e58 <__fprintf_chk@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #576]!	; 0x240

00010e64 <memchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #568]!	; 0x238

00010e70 <fclose@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #560]!	; 0x230

00010e7c <fseeko64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #552]!	; 0x228

00010e88 <__overflow@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #544]!	; 0x220

00010e94 <setlocale@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #536]!	; 0x218

00010ea0 <strrchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #528]!	; 0x210

00010eac <nl_langinfo@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #520]!	; 0x208

00010eb8 <__strtoll_internal@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #512]!	; 0x200

00010ec4 <fopen64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ed0 <bindtextdomain@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #496]!	; 0x1f0

00010edc <fread_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee8 <strncmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef4 <abort@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #472]!	; 0x1d8

00010f00 <__assert_fail@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #464]!	; 0x1d0

Disassembly of section .text:

00010f0c <.text>:
   10f0c:	mov	fp, #0
   10f10:	mov	lr, #0
   10f14:	pop	{r1}		; (ldr r1, [sp], #4)
   10f18:	mov	r2, sp
   10f1c:	push	{r2}		; (str r2, [sp, #-4]!)
   10f20:	push	{r0}		; (str r0, [sp, #-4]!)
   10f24:	ldr	ip, [pc, #16]	; 10f3c <__assert_fail@plt+0x3c>
   10f28:	push	{ip}		; (str ip, [sp, #-4]!)
   10f2c:	ldr	r0, [pc, #12]	; 10f40 <__assert_fail@plt+0x40>
   10f30:	ldr	r3, [pc, #12]	; 10f44 <__assert_fail@plt+0x44>
   10f34:	bl	10dbc <__libc_start_main@plt>
   10f38:	bl	10ef4 <abort@plt>
   10f3c:	strheq	r6, [r1], -r4
   10f40:	andeq	r1, r1, r8, lsl #9
   10f44:	andeq	r6, r1, r4, asr r0
   10f48:	ldr	r3, [pc, #20]	; 10f64 <__assert_fail@plt+0x64>
   10f4c:	ldr	r2, [pc, #20]	; 10f68 <__assert_fail@plt+0x68>
   10f50:	add	r3, pc, r3
   10f54:	ldr	r2, [r3, r2]
   10f58:	cmp	r2, #0
   10f5c:	bxeq	lr
   10f60:	b	10dd4 <__gmon_start__@plt>
   10f64:	andeq	r6, r1, r8, lsr #1
   10f68:	ldrdeq	r0, [r0], -ip
   10f6c:	ldr	r0, [pc, #24]	; 10f8c <__assert_fail@plt+0x8c>
   10f70:	ldr	r3, [pc, #24]	; 10f90 <__assert_fail@plt+0x90>
   10f74:	cmp	r3, r0
   10f78:	bxeq	lr
   10f7c:	ldr	r3, [pc, #16]	; 10f94 <__assert_fail@plt+0x94>
   10f80:	cmp	r3, #0
   10f84:	bxeq	lr
   10f88:	bx	r3
   10f8c:	andeq	r7, r2, r0, lsr r1
   10f90:	andeq	r7, r2, r0, lsr r1
   10f94:	andeq	r0, r0, r0
   10f98:	ldr	r0, [pc, #36]	; 10fc4 <__assert_fail@plt+0xc4>
   10f9c:	ldr	r1, [pc, #36]	; 10fc8 <__assert_fail@plt+0xc8>
   10fa0:	sub	r1, r1, r0
   10fa4:	asr	r1, r1, #2
   10fa8:	add	r1, r1, r1, lsr #31
   10fac:	asrs	r1, r1, #1
   10fb0:	bxeq	lr
   10fb4:	ldr	r3, [pc, #16]	; 10fcc <__assert_fail@plt+0xcc>
   10fb8:	cmp	r3, #0
   10fbc:	bxeq	lr
   10fc0:	bx	r3
   10fc4:	andeq	r7, r2, r0, lsr r1
   10fc8:	andeq	r7, r2, r0, lsr r1
   10fcc:	andeq	r0, r0, r0
   10fd0:	push	{r4, lr}
   10fd4:	ldr	r4, [pc, #24]	; 10ff4 <__assert_fail@plt+0xf4>
   10fd8:	ldrb	r3, [r4]
   10fdc:	cmp	r3, #0
   10fe0:	popne	{r4, pc}
   10fe4:	bl	10f6c <__assert_fail@plt+0x6c>
   10fe8:	mov	r3, #1
   10fec:	strb	r3, [r4]
   10ff0:	pop	{r4, pc}
   10ff4:	andeq	r7, r2, r4, asr r1
   10ff8:	b	10f98 <__assert_fail@plt+0x98>
   10ffc:	str	r4, [sp, #-8]!
   11000:	str	lr, [sp, #4]
   11004:	mov	r4, r1
   11008:	bl	12528 <__assert_fail@plt+0x1628>
   1100c:	cmp	r0, #0
   11010:	beq	11088 <__assert_fail@plt+0x188>
   11014:	movw	r1, #24948	; 0x6174
   11018:	movt	r1, #1
   1101c:	mov	r0, r4
   11020:	bl	10cb4 <strcmp@plt>
   11024:	cmp	r0, #0
   11028:	bne	11058 <__assert_fail@plt+0x158>
   1102c:	bl	10e1c <__errno_location@plt>
   11030:	ldr	r4, [r0]
   11034:	mov	r2, #5
   11038:	movw	r1, #24952	; 0x6178
   1103c:	movt	r1, #1
   11040:	mov	r0, #0
   11044:	bl	10d38 <dcgettext@plt>
   11048:	mov	r2, r0
   1104c:	mov	r1, r4
   11050:	mov	r0, #1
   11054:	bl	10da4 <error@plt>
   11058:	bl	10e1c <__errno_location@plt>
   1105c:	ldr	r5, [r0]
   11060:	mov	r2, r4
   11064:	mov	r1, #3
   11068:	mov	r0, #0
   1106c:	bl	148a4 <__assert_fail@plt+0x39a4>
   11070:	mov	r3, r0
   11074:	movw	r2, #26160	; 0x6630
   11078:	movt	r2, #1
   1107c:	mov	r1, r5
   11080:	mov	r0, #1
   11084:	bl	10da4 <error@plt>
   11088:	mov	r0, #0
   1108c:	bl	10df8 <exit@plt>
   11090:	push	{lr}		; (str lr, [sp, #-4]!)
   11094:	sub	sp, sp, #60	; 0x3c
   11098:	subs	r4, r0, #0
   1109c:	beq	110e4 <__assert_fail@plt+0x1e4>
   110a0:	movw	r3, #28992	; 0x7140
   110a4:	movt	r3, #2
   110a8:	ldr	r5, [r3]
   110ac:	mov	r2, #5
   110b0:	movw	r1, #24984	; 0x6198
   110b4:	movt	r1, #1
   110b8:	mov	r0, #0
   110bc:	bl	10d38 <dcgettext@plt>
   110c0:	movw	r3, #29024	; 0x7160
   110c4:	movt	r3, #2
   110c8:	ldr	r3, [r3]
   110cc:	mov	r2, r0
   110d0:	mov	r1, #1
   110d4:	mov	r0, r5
   110d8:	bl	10e58 <__fprintf_chk@plt>
   110dc:	mov	r0, r4
   110e0:	bl	10df8 <exit@plt>
   110e4:	mov	r2, #5
   110e8:	movw	r1, #25024	; 0x61c0
   110ec:	movt	r1, #1
   110f0:	mov	r0, #0
   110f4:	bl	10d38 <dcgettext@plt>
   110f8:	movw	r3, #29024	; 0x7160
   110fc:	movt	r3, #2
   11100:	ldr	r2, [r3]
   11104:	mov	r1, r0
   11108:	mov	r0, #1
   1110c:	bl	10e40 <__printf_chk@plt>
   11110:	mov	r2, #5
   11114:	movw	r1, #25056	; 0x61e0
   11118:	movt	r1, #1
   1111c:	mov	r0, #0
   11120:	bl	10d38 <dcgettext@plt>
   11124:	mov	r2, #64	; 0x40
   11128:	mov	r1, r0
   1112c:	mov	r0, #1
   11130:	bl	10e40 <__printf_chk@plt>
   11134:	mov	r2, #5
   11138:	movw	r1, #25128	; 0x6228
   1113c:	movt	r1, #1
   11140:	mov	r0, #0
   11144:	bl	10d38 <dcgettext@plt>
   11148:	movw	r5, #29004	; 0x714c
   1114c:	movt	r5, #2
   11150:	ldr	r1, [r5]
   11154:	bl	10ca8 <fputs_unlocked@plt>
   11158:	mov	r2, #5
   1115c:	movw	r1, #25184	; 0x6260
   11160:	movt	r1, #1
   11164:	mov	r0, #0
   11168:	bl	10d38 <dcgettext@plt>
   1116c:	ldr	r1, [r5]
   11170:	bl	10ca8 <fputs_unlocked@plt>
   11174:	mov	r2, #5
   11178:	movw	r1, #25260	; 0x62ac
   1117c:	movt	r1, #1
   11180:	mov	r0, #0
   11184:	bl	10d38 <dcgettext@plt>
   11188:	ldr	r1, [r5]
   1118c:	bl	10ca8 <fputs_unlocked@plt>
   11190:	mov	r2, #5
   11194:	movw	r1, #25504	; 0x63a0
   11198:	movt	r1, #1
   1119c:	mov	r0, #0
   111a0:	bl	10d38 <dcgettext@plt>
   111a4:	ldr	r1, [r5]
   111a8:	bl	10ca8 <fputs_unlocked@plt>
   111ac:	mov	r2, #5
   111b0:	movw	r1, #25552	; 0x63d0
   111b4:	movt	r1, #1
   111b8:	mov	r0, #0
   111bc:	bl	10d38 <dcgettext@plt>
   111c0:	ldr	r1, [r5]
   111c4:	bl	10ca8 <fputs_unlocked@plt>
   111c8:	mov	r2, #5
   111cc:	movw	r1, #25608	; 0x6408
   111d0:	movt	r1, #1
   111d4:	mov	r0, #0
   111d8:	bl	10d38 <dcgettext@plt>
   111dc:	movw	r2, #24976	; 0x6190
   111e0:	movt	r2, #1
   111e4:	mov	r3, r2
   111e8:	mov	r1, r0
   111ec:	mov	r0, #1
   111f0:	bl	10e40 <__printf_chk@plt>
   111f4:	movw	r0, #24796	; 0x60dc
   111f8:	movt	r0, #1
   111fc:	ldr	r1, [r0]
   11200:	ldr	r3, [r0, #4]
   11204:	str	r1, [sp]
   11208:	str	r3, [sp, #4]
   1120c:	ldrd	r2, [r0, #8]
   11210:	strd	r2, [sp, #8]
   11214:	ldrd	r2, [r0, #16]
   11218:	strd	r2, [sp, #16]
   1121c:	ldrd	r2, [r0, #24]
   11220:	strd	r2, [sp, #24]
   11224:	ldrd	r2, [r0, #32]
   11228:	strd	r2, [sp, #32]
   1122c:	ldrd	r2, [r0, #40]	; 0x28
   11230:	strd	r2, [sp, #40]	; 0x28
   11234:	ldrd	r2, [r0, #48]	; 0x30
   11238:	strd	r2, [sp, #48]	; 0x30
   1123c:	cmp	r1, #0
   11240:	moveq	r5, sp
   11244:	beq	11270 <__assert_fail@plt+0x370>
   11248:	mov	r5, sp
   1124c:	movw	r6, #24976	; 0x6190
   11250:	movt	r6, #1
   11254:	mov	r0, r6
   11258:	bl	10cb4 <strcmp@plt>
   1125c:	cmp	r0, #0
   11260:	beq	11270 <__assert_fail@plt+0x370>
   11264:	ldr	r1, [r5, #8]!
   11268:	cmp	r1, #0
   1126c:	bne	11254 <__assert_fail@plt+0x354>
   11270:	ldr	r5, [r5, #4]
   11274:	cmp	r5, #0
   11278:	beq	113d4 <__assert_fail@plt+0x4d4>
   1127c:	mov	r2, #5
   11280:	movw	r1, #25876	; 0x6514
   11284:	movt	r1, #1
   11288:	mov	r0, #0
   1128c:	bl	10d38 <dcgettext@plt>
   11290:	movw	r3, #25900	; 0x652c
   11294:	movt	r3, #1
   11298:	movw	r2, #25940	; 0x6554
   1129c:	movt	r2, #1
   112a0:	mov	r1, r0
   112a4:	mov	r0, #1
   112a8:	bl	10e40 <__printf_chk@plt>
   112ac:	mov	r1, #0
   112b0:	mov	r0, #5
   112b4:	bl	10e94 <setlocale@plt>
   112b8:	cmp	r0, #0
   112bc:	beq	112d8 <__assert_fail@plt+0x3d8>
   112c0:	mov	r2, #3
   112c4:	movw	r1, #25956	; 0x6564
   112c8:	movt	r1, #1
   112cc:	bl	10ee8 <strncmp@plt>
   112d0:	cmp	r0, #0
   112d4:	bne	11354 <__assert_fail@plt+0x454>
   112d8:	mov	r2, #5
   112dc:	movw	r1, #26032	; 0x65b0
   112e0:	movt	r1, #1
   112e4:	mov	r0, #0
   112e8:	bl	10d38 <dcgettext@plt>
   112ec:	movw	r6, #24976	; 0x6190
   112f0:	movt	r6, #1
   112f4:	mov	r3, r6
   112f8:	movw	r2, #25900	; 0x652c
   112fc:	movt	r2, #1
   11300:	mov	r1, r0
   11304:	mov	r0, #1
   11308:	bl	10e40 <__printf_chk@plt>
   1130c:	mov	r2, #5
   11310:	movw	r1, #26060	; 0x65cc
   11314:	movt	r1, #1
   11318:	mov	r0, #0
   1131c:	bl	10d38 <dcgettext@plt>
   11320:	mov	r1, r0
   11324:	movw	r2, #26260	; 0x6694
   11328:	movt	r2, #1
   1132c:	movw	r3, #25548	; 0x63cc
   11330:	movt	r3, #1
   11334:	cmp	r5, r6
   11338:	moveq	r3, r2
   1133c:	mov	r2, r5
   11340:	mov	r0, #1
   11344:	bl	10e40 <__printf_chk@plt>
   11348:	b	110dc <__assert_fail@plt+0x1dc>
   1134c:	movw	r5, #24976	; 0x6190
   11350:	movt	r5, #1
   11354:	mov	r2, #5
   11358:	movw	r1, #25960	; 0x6568
   1135c:	movt	r1, #1
   11360:	mov	r0, #0
   11364:	bl	10d38 <dcgettext@plt>
   11368:	movw	r3, #29004	; 0x714c
   1136c:	movt	r3, #2
   11370:	ldr	r1, [r3]
   11374:	bl	10ca8 <fputs_unlocked@plt>
   11378:	b	112d8 <__assert_fail@plt+0x3d8>
   1137c:	mov	r2, #5
   11380:	movw	r1, #26032	; 0x65b0
   11384:	movt	r1, #1
   11388:	mov	r0, #0
   1138c:	bl	10d38 <dcgettext@plt>
   11390:	movw	r5, #24976	; 0x6190
   11394:	movt	r5, #1
   11398:	mov	r3, r5
   1139c:	movw	r2, #25900	; 0x652c
   113a0:	movt	r2, #1
   113a4:	mov	r1, r0
   113a8:	mov	r0, #1
   113ac:	bl	10e40 <__printf_chk@plt>
   113b0:	mov	r2, #5
   113b4:	movw	r1, #26060	; 0x65cc
   113b8:	movt	r1, #1
   113bc:	mov	r0, #0
   113c0:	bl	10d38 <dcgettext@plt>
   113c4:	mov	r1, r0
   113c8:	movw	r3, #26260	; 0x6694
   113cc:	movt	r3, #1
   113d0:	b	1133c <__assert_fail@plt+0x43c>
   113d4:	mov	r2, #5
   113d8:	movw	r1, #25876	; 0x6514
   113dc:	movt	r1, #1
   113e0:	mov	r0, #0
   113e4:	bl	10d38 <dcgettext@plt>
   113e8:	movw	r3, #25900	; 0x652c
   113ec:	movt	r3, #1
   113f0:	movw	r2, #25940	; 0x6554
   113f4:	movt	r2, #1
   113f8:	mov	r1, r0
   113fc:	mov	r0, #1
   11400:	bl	10e40 <__printf_chk@plt>
   11404:	mov	r1, #0
   11408:	mov	r0, #5
   1140c:	bl	10e94 <setlocale@plt>
   11410:	cmp	r0, #0
   11414:	beq	1137c <__assert_fail@plt+0x47c>
   11418:	mov	r2, #3
   1141c:	movw	r1, #25956	; 0x6564
   11420:	movt	r1, #1
   11424:	bl	10ee8 <strncmp@plt>
   11428:	cmp	r0, #0
   1142c:	bne	1134c <__assert_fail@plt+0x44c>
   11430:	mov	r2, #5
   11434:	movw	r1, #26032	; 0x65b0
   11438:	movt	r1, #1
   1143c:	mov	r0, #0
   11440:	bl	10d38 <dcgettext@plt>
   11444:	movw	r5, #24976	; 0x6190
   11448:	movt	r5, #1
   1144c:	mov	r3, r5
   11450:	movw	r2, #25900	; 0x652c
   11454:	movt	r2, #1
   11458:	mov	r1, r0
   1145c:	mov	r0, #1
   11460:	bl	10e40 <__printf_chk@plt>
   11464:	mov	r2, #5
   11468:	movw	r1, #26060	; 0x65cc
   1146c:	movt	r1, #1
   11470:	mov	r0, #0
   11474:	bl	10d38 <dcgettext@plt>
   11478:	mov	r1, r0
   1147c:	movw	r3, #26260	; 0x6694
   11480:	movt	r3, #1
   11484:	b	1133c <__assert_fail@plt+0x43c>
   11488:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1148c:	strd	r6, [sp, #8]
   11490:	strd	r8, [sp, #16]
   11494:	strd	sl, [sp, #24]
   11498:	str	lr, [sp, #32]
   1149c:	sub	sp, sp, #60	; 0x3c
   114a0:	mov	r9, r0
   114a4:	mov	r5, r1
   114a8:	ldr	r0, [r1]
   114ac:	bl	12774 <__assert_fail@plt+0x1874>
   114b0:	movw	r1, #25548	; 0x63cc
   114b4:	movt	r1, #1
   114b8:	mov	r0, #6
   114bc:	bl	10e94 <setlocale@plt>
   114c0:	movw	r4, #25944	; 0x6558
   114c4:	movt	r4, #1
   114c8:	movw	r1, #26112	; 0x6600
   114cc:	movt	r1, #1
   114d0:	mov	r0, r4
   114d4:	bl	10ed0 <bindtextdomain@plt>
   114d8:	mov	r0, r4
   114dc:	bl	10d50 <textdomain@plt>
   114e0:	movw	r0, #9128	; 0x23a8
   114e4:	movt	r0, #1
   114e8:	bl	160b8 <__assert_fail@plt+0x51b8>
   114ec:	mov	r6, #76	; 0x4c
   114f0:	mov	fp, #0
   114f4:	mov	r8, fp
   114f8:	ldr	sl, [pc, #1876]	; 11c54 <__assert_fail@plt+0xd54>
   114fc:	movw	r4, #26180	; 0x6644
   11500:	movt	r4, #1
   11504:	movw	r7, #29008	; 0x7150
   11508:	movt	r7, #2
   1150c:	mov	r3, #0
   11510:	str	r3, [sp]
   11514:	mov	r3, sl
   11518:	mov	r2, r4
   1151c:	mov	r1, r5
   11520:	mov	r0, r9
   11524:	bl	10de0 <getopt_long@plt>
   11528:	cmn	r0, #1
   1152c:	beq	11678 <__assert_fail@plt+0x778>
   11530:	cmp	r0, #100	; 0x64
   11534:	beq	11668 <__assert_fail@plt+0x768>
   11538:	ble	115bc <__assert_fail@plt+0x6bc>
   1153c:	cmp	r0, #105	; 0x69
   11540:	beq	11670 <__assert_fail@plt+0x770>
   11544:	cmp	r0, #119	; 0x77
   11548:	bne	11660 <__assert_fail@plt+0x760>
   1154c:	movw	r3, #25548	; 0x63cc
   11550:	movt	r3, #1
   11554:	str	r3, [sp]
   11558:	add	r3, sp, #48	; 0x30
   1155c:	mov	r2, #10
   11560:	mov	r1, #0
   11564:	ldr	r0, [r7]
   11568:	bl	15674 <__assert_fail@plt+0x4774>
   1156c:	mov	ip, r0
   11570:	cmp	r0, #1
   11574:	bhi	115d4 <__assert_fail@plt+0x6d4>
   11578:	ldrd	r2, [sp, #48]	; 0x30
   1157c:	cmp	r2, #0
   11580:	sbcs	r1, r3, #0
   11584:	blt	115d4 <__assert_fail@plt+0x6d4>
   11588:	mvn	r0, #-2147483648	; 0x80000000
   1158c:	mov	r1, #0
   11590:	cmp	r0, r2
   11594:	sbcs	r1, r1, r3
   11598:	movge	r1, #1
   1159c:	movlt	r1, #0
   115a0:	cmp	ip, #1
   115a4:	moveq	r1, #0
   115a8:	andne	r1, r1, #1
   115ac:	cmp	r1, #0
   115b0:	moveq	r2, #0
   115b4:	mov	r6, r2
   115b8:	b	1150c <__assert_fail@plt+0x60c>
   115bc:	cmn	r0, #3
   115c0:	beq	11618 <__assert_fail@plt+0x718>
   115c4:	cmn	r0, #2
   115c8:	bne	11660 <__assert_fail@plt+0x760>
   115cc:	mov	r0, #0
   115d0:	bl	11090 <__assert_fail@plt+0x190>
   115d4:	mov	r2, #5
   115d8:	movw	r1, #26136	; 0x6618
   115dc:	movt	r1, #1
   115e0:	mov	r0, #0
   115e4:	bl	10d38 <dcgettext@plt>
   115e8:	mov	r4, r0
   115ec:	movw	r3, #29008	; 0x7150
   115f0:	movt	r3, #2
   115f4:	ldr	r0, [r3]
   115f8:	bl	14a70 <__assert_fail@plt+0x3b70>
   115fc:	str	r0, [sp]
   11600:	mov	r3, r4
   11604:	movw	r2, #26156	; 0x662c
   11608:	movt	r2, #1
   1160c:	mov	r1, #0
   11610:	mov	r0, #1
   11614:	bl	10da4 <error@plt>
   11618:	movw	r3, #28904	; 0x70e8
   1161c:	movt	r3, #2
   11620:	movw	r0, #29004	; 0x714c
   11624:	movt	r0, #2
   11628:	mov	r4, #0
   1162c:	str	r4, [sp, #4]
   11630:	movw	r2, #26164	; 0x6634
   11634:	movt	r2, #1
   11638:	str	r2, [sp]
   1163c:	ldr	r3, [r3]
   11640:	movw	r2, #25940	; 0x6554
   11644:	movt	r2, #1
   11648:	movw	r1, #24976	; 0x6190
   1164c:	movt	r1, #1
   11650:	ldr	r0, [r0]
   11654:	bl	14f6c <__assert_fail@plt+0x406c>
   11658:	mov	r0, r4
   1165c:	bl	10df8 <exit@plt>
   11660:	mov	r0, #1
   11664:	bl	11090 <__assert_fail@plt+0x190>
   11668:	mov	r8, #1
   1166c:	b	1150c <__assert_fail@plt+0x60c>
   11670:	mov	fp, #1
   11674:	b	1150c <__assert_fail@plt+0x60c>
   11678:	movw	r3, #28984	; 0x7138
   1167c:	movt	r3, #2
   11680:	ldr	r3, [r3]
   11684:	sub	r2, r9, r3
   11688:	cmp	r2, #1
   1168c:	bgt	11700 <__assert_fail@plt+0x800>
   11690:	cmp	r3, r9
   11694:	bge	1174c <__assert_fail@plt+0x84c>
   11698:	ldr	r3, [r5, r3, lsl #2]
   1169c:	str	r3, [sp, #24]
   116a0:	movw	r1, #24948	; 0x6174
   116a4:	movt	r1, #1
   116a8:	mov	r0, r3
   116ac:	bl	10cb4 <strcmp@plt>
   116b0:	cmp	r0, #0
   116b4:	beq	11758 <__assert_fail@plt+0x858>
   116b8:	movw	r1, #26208	; 0x6660
   116bc:	movt	r1, #1
   116c0:	ldr	r0, [sp, #24]
   116c4:	bl	10ec4 <fopen64@plt>
   116c8:	subs	sl, r0, #0
   116cc:	bne	11764 <__assert_fail@plt+0x864>
   116d0:	bl	10e1c <__errno_location@plt>
   116d4:	ldr	r4, [r0]
   116d8:	ldr	r2, [sp, #24]
   116dc:	mov	r1, #3
   116e0:	mov	r0, #0
   116e4:	bl	148a4 <__assert_fail@plt+0x39a4>
   116e8:	mov	r3, r0
   116ec:	movw	r2, #26160	; 0x6630
   116f0:	movt	r2, #1
   116f4:	mov	r1, r4
   116f8:	mov	r0, #1
   116fc:	bl	10da4 <error@plt>
   11700:	mov	r2, #5
   11704:	movw	r1, #26188	; 0x664c
   11708:	movt	r1, #1
   1170c:	mov	r0, #0
   11710:	bl	10d38 <dcgettext@plt>
   11714:	mov	r4, r0
   11718:	movw	r3, #28984	; 0x7138
   1171c:	movt	r3, #2
   11720:	ldr	r3, [r3]
   11724:	add	r3, r3, #1
   11728:	ldr	r0, [r5, r3, lsl #2]
   1172c:	bl	14a70 <__assert_fail@plt+0x3b70>
   11730:	mov	r3, r0
   11734:	mov	r2, r4
   11738:	mov	r1, #0
   1173c:	mov	r0, r1
   11740:	bl	10da4 <error@plt>
   11744:	mov	r0, #1
   11748:	bl	11090 <__assert_fail@plt+0x190>
   1174c:	movw	r3, #24948	; 0x6174
   11750:	movt	r3, #1
   11754:	str	r3, [sp, #24]
   11758:	movw	r3, #29000	; 0x7148
   1175c:	movt	r3, #2
   11760:	ldr	sl, [r3]
   11764:	mov	r1, #2
   11768:	mov	r0, sl
   1176c:	bl	124e8 <__assert_fail@plt+0x15e8>
   11770:	cmp	r8, #0
   11774:	beq	1190c <__assert_fail@plt+0xa0c>
   11778:	movw	r3, #29004	; 0x714c
   1177c:	movt	r3, #2
   11780:	ldr	r3, [r3]
   11784:	str	r3, [sp, #16]
   11788:	mov	r0, #4096	; 0x1000
   1178c:	bl	15044 <__assert_fail@plt+0x4144>
   11790:	mov	r9, r0
   11794:	mov	r0, #3072	; 0xc00
   11798:	bl	15044 <__assert_fail@plt+0x4144>
   1179c:	str	r0, [sp, #12]
   117a0:	add	r0, sp, #48	; 0x30
   117a4:	bl	12060 <__assert_fail@plt+0x1160>
   117a8:	str	fp, [sp, #20]
   117ac:	b	11c4c <__assert_fail@plt+0xd4c>
   117b0:	sub	r5, r5, #1
   117b4:	add	r1, r6, #1
   117b8:	sub	r2, r5, r7
   117bc:	add	r1, r9, r1
   117c0:	mov	r0, r8
   117c4:	bl	10cd8 <memmove@plt>
   117c8:	bic	r3, r7, r7, asr #31
   117cc:	cmp	r5, r3
   117d0:	ble	11800 <__assert_fail@plt+0x900>
   117d4:	add	r6, r4, r7
   117d8:	add	r8, r9, r6
   117dc:	ldrb	fp, [r9, r6]
   117e0:	mov	r0, fp
   117e4:	bl	12048 <__assert_fail@plt+0x1148>
   117e8:	cmp	fp, #61	; 0x3d
   117ec:	orreq	r0, r0, #1
   117f0:	tst	r0, #255	; 0xff
   117f4:	addne	r7, r7, #1
   117f8:	bne	117c8 <__assert_fail@plt+0x8c8>
   117fc:	b	117b0 <__assert_fail@plt+0x8b0>
   11800:	add	r4, r4, r5
   11804:	ldr	r3, [sl]
   11808:	ands	r6, r3, #32
   1180c:	bne	1184c <__assert_fail@plt+0x94c>
   11810:	cmp	r4, #4096	; 0x1000
   11814:	bge	118fc <__assert_fail@plt+0x9fc>
   11818:	tst	r3, #16
   1181c:	bne	11878 <__assert_fail@plt+0x978>
   11820:	mov	r3, sl
   11824:	rsb	r2, r4, #4096	; 0x1000
   11828:	mov	r1, #1
   1182c:	add	r0, r9, r4
   11830:	bl	10edc <fread_unlocked@plt>
   11834:	mov	r5, r0
   11838:	ldr	r3, [sp, #20]
   1183c:	cmp	r3, #0
   11840:	beq	11800 <__assert_fail@plt+0x900>
   11844:	mov	r7, #0
   11848:	b	117c8 <__assert_fail@plt+0x8c8>
   1184c:	bl	10e1c <__errno_location@plt>
   11850:	ldr	r4, [r0]
   11854:	mov	r2, #5
   11858:	movw	r1, #26212	; 0x6664
   1185c:	movt	r1, #1
   11860:	mov	r0, #0
   11864:	bl	10d38 <dcgettext@plt>
   11868:	mov	r2, r0
   1186c:	mov	r1, r4
   11870:	mov	r0, #1
   11874:	bl	10da4 <error@plt>
   11878:	mov	r5, r6
   1187c:	b	11900 <__assert_fail@plt+0xa00>
   11880:	ldr	r2, [sp, #48]	; 0x30
   11884:	cmp	r2, #0
   11888:	beq	118e8 <__assert_fail@plt+0x9e8>
   1188c:	str	r7, [sp, #44]	; 0x2c
   11890:	mov	r2, fp
   11894:	b	11bf0 <__assert_fail@plt+0xcf0>
   11898:	bl	10e1c <__errno_location@plt>
   1189c:	ldr	r4, [r0]
   118a0:	mov	r2, #5
   118a4:	movw	r1, #26224	; 0x6670
   118a8:	movt	r1, #1
   118ac:	mov	r0, #0
   118b0:	bl	10d38 <dcgettext@plt>
   118b4:	mov	r2, r0
   118b8:	mov	r1, r4
   118bc:	mov	r0, #1
   118c0:	bl	10da4 <error@plt>
   118c4:	mov	r2, #5
   118c8:	movw	r1, #26236	; 0x667c
   118cc:	movt	r1, #1
   118d0:	mov	r0, #0
   118d4:	bl	10d38 <dcgettext@plt>
   118d8:	mov	r2, r0
   118dc:	mov	r1, #0
   118e0:	mov	r0, #1
   118e4:	bl	10da4 <error@plt>
   118e8:	cmp	r3, #0
   118ec:	beq	11c4c <__assert_fail@plt+0xd4c>
   118f0:	ldr	r1, [sp, #24]
   118f4:	mov	r0, sl
   118f8:	bl	10ffc <__assert_fail@plt+0xfc>
   118fc:	mov	r5, r6
   11900:	mov	r7, #3072	; 0xc00
   11904:	mov	fp, r6
   11908:	b	11c38 <__assert_fail@plt+0xd38>
   1190c:	movw	r3, #29004	; 0x714c
   11910:	movt	r3, #2
   11914:	ldr	fp, [r3]
   11918:	mov	r0, #30720	; 0x7800
   1191c:	bl	15044 <__assert_fail@plt+0x4144>
   11920:	mov	r8, r0
   11924:	mov	r0, #40960	; 0xa000
   11928:	bl	15044 <__assert_fail@plt+0x4144>
   1192c:	str	r0, [sp, #16]
   11930:	mov	r9, #0
   11934:	movw	r3, #29004	; 0x714c
   11938:	movt	r3, #2
   1193c:	str	r3, [sp, #20]
   11940:	str	r6, [sp, #12]
   11944:	b	11a60 <__assert_fail@plt+0xb60>
   11948:	mov	r6, #0
   1194c:	str	sl, [sp, #28]
   11950:	str	r8, [sp, #32]
   11954:	ldr	r8, [sp, #16]
   11958:	str	r5, [sp, #36]	; 0x24
   1195c:	ldr	r5, [sp, #12]
   11960:	ldr	sl, [sp, #20]
   11964:	b	11998 <__assert_fail@plt+0xa98>
   11968:	ldr	r3, [sl]
   1196c:	mov	r2, r4
   11970:	mov	r1, #1
   11974:	add	r0, r8, r6
   11978:	bl	10d14 <fwrite_unlocked@plt>
   1197c:	cmp	r4, r0
   11980:	bhi	11a10 <__assert_fail@plt+0xb10>
   11984:	add	r6, r6, r4
   11988:	add	r4, r4, r9
   1198c:	cmp	r6, r7
   11990:	bge	11a3c <__assert_fail@plt+0xb3c>
   11994:	mov	r9, r4
   11998:	sub	r4, r7, r6
   1199c:	sub	r3, r5, r9
   119a0:	cmp	r4, r3
   119a4:	movge	r4, r3
   119a8:	cmp	r4, #0
   119ac:	bne	11968 <__assert_fail@plt+0xa68>
   119b0:	ldr	r3, [fp, #20]
   119b4:	ldr	r2, [fp, #24]
   119b8:	cmp	r3, r2
   119bc:	addcc	r2, r3, #1
   119c0:	strcc	r2, [fp, #20]
   119c4:	movcc	r2, #10
   119c8:	strbcc	r2, [r3]
   119cc:	bcc	1198c <__assert_fail@plt+0xa8c>
   119d0:	mov	r1, #10
   119d4:	mov	r0, fp
   119d8:	bl	10e88 <__overflow@plt>
   119dc:	cmn	r0, #1
   119e0:	bne	1198c <__assert_fail@plt+0xa8c>
   119e4:	bl	10e1c <__errno_location@plt>
   119e8:	ldr	r4, [r0]
   119ec:	mov	r2, #5
   119f0:	movw	r1, #26224	; 0x6670
   119f4:	movt	r1, #1
   119f8:	mov	r0, #0
   119fc:	bl	10d38 <dcgettext@plt>
   11a00:	mov	r2, r0
   11a04:	mov	r1, r4
   11a08:	mov	r0, #1
   11a0c:	bl	10da4 <error@plt>
   11a10:	bl	10e1c <__errno_location@plt>
   11a14:	ldr	r4, [r0]
   11a18:	mov	r2, #5
   11a1c:	movw	r1, #26224	; 0x6670
   11a20:	movt	r1, #1
   11a24:	mov	r0, #0
   11a28:	bl	10d38 <dcgettext@plt>
   11a2c:	mov	r2, r0
   11a30:	mov	r1, r4
   11a34:	mov	r0, #1
   11a38:	bl	10da4 <error@plt>
   11a3c:	ldr	sl, [sp, #28]
   11a40:	ldr	r8, [sp, #32]
   11a44:	ldr	r5, [sp, #36]	; 0x24
   11a48:	mov	r9, r4
   11a4c:	ldr	r3, [sl]
   11a50:	and	r3, r3, #48	; 0x30
   11a54:	cmp	r5, #30720	; 0x7800
   11a58:	cmpeq	r3, #0
   11a5c:	bne	11b1c <__assert_fail@plt+0xc1c>
   11a60:	mov	r5, #0
   11a64:	movw	r4, #30719	; 0x77ff
   11a68:	mov	r3, sl
   11a6c:	rsb	r2, r5, #30720	; 0x7800
   11a70:	mov	r1, #1
   11a74:	add	r0, r8, r5
   11a78:	bl	10edc <fread_unlocked@plt>
   11a7c:	add	r5, r5, r0
   11a80:	ldr	r3, [sl]
   11a84:	and	r3, r3, #48	; 0x30
   11a88:	cmp	r5, r4
   11a8c:	cmple	r3, #0
   11a90:	beq	11a68 <__assert_fail@plt+0xb68>
   11a94:	cmp	r5, #0
   11a98:	ble	11a4c <__assert_fail@plt+0xb4c>
   11a9c:	add	r7, r5, #2
   11aa0:	mov	r3, #3
   11aa4:	sdiv	r7, r7, r3
   11aa8:	lsl	r7, r7, #2
   11aac:	mov	r3, r7
   11ab0:	ldr	r4, [sp, #16]
   11ab4:	mov	r2, r4
   11ab8:	mov	r1, r5
   11abc:	mov	r0, r8
   11ac0:	bl	11dd4 <__assert_fail@plt+0xed4>
   11ac4:	ldr	r3, [sp, #12]
   11ac8:	cmp	r3, #0
   11acc:	bne	11948 <__assert_fail@plt+0xa48>
   11ad0:	ldr	r3, [sp, #20]
   11ad4:	ldr	r3, [r3]
   11ad8:	mov	r2, r7
   11adc:	mov	r1, #1
   11ae0:	mov	r0, r4
   11ae4:	bl	10d14 <fwrite_unlocked@plt>
   11ae8:	cmp	r7, r0
   11aec:	bls	11a4c <__assert_fail@plt+0xb4c>
   11af0:	bl	10e1c <__errno_location@plt>
   11af4:	ldr	r4, [r0]
   11af8:	mov	r2, #5
   11afc:	movw	r1, #26224	; 0x6670
   11b00:	movt	r1, #1
   11b04:	mov	r0, #0
   11b08:	bl	10d38 <dcgettext@plt>
   11b0c:	mov	r2, r0
   11b10:	mov	r1, r4
   11b14:	mov	r0, #1
   11b18:	bl	10da4 <error@plt>
   11b1c:	ldr	r6, [sp, #12]
   11b20:	cmp	r6, #0
   11b24:	cmpne	r9, #0
   11b28:	bgt	11b44 <__assert_fail@plt+0xc44>
   11b2c:	ldr	r3, [sl]
   11b30:	tst	r3, #32
   11b34:	bne	11ba4 <__assert_fail@plt+0xca4>
   11b38:	ldr	r1, [sp, #24]
   11b3c:	mov	r0, sl
   11b40:	bl	10ffc <__assert_fail@plt+0xfc>
   11b44:	ldr	r3, [fp, #20]
   11b48:	ldr	r2, [fp, #24]
   11b4c:	cmp	r3, r2
   11b50:	addcc	r2, r3, #1
   11b54:	strcc	r2, [fp, #20]
   11b58:	movcc	r2, #10
   11b5c:	strbcc	r2, [r3]
   11b60:	bcc	11b2c <__assert_fail@plt+0xc2c>
   11b64:	mov	r1, #10
   11b68:	mov	r0, fp
   11b6c:	bl	10e88 <__overflow@plt>
   11b70:	cmn	r0, #1
   11b74:	bne	11b2c <__assert_fail@plt+0xc2c>
   11b78:	bl	10e1c <__errno_location@plt>
   11b7c:	ldr	r4, [r0]
   11b80:	mov	r2, #5
   11b84:	movw	r1, #26224	; 0x6670
   11b88:	movt	r1, #1
   11b8c:	mov	r0, #0
   11b90:	bl	10d38 <dcgettext@plt>
   11b94:	mov	r2, r0
   11b98:	mov	r1, r4
   11b9c:	mov	r0, #1
   11ba0:	bl	10da4 <error@plt>
   11ba4:	bl	10e1c <__errno_location@plt>
   11ba8:	ldr	r4, [r0]
   11bac:	mov	r2, #5
   11bb0:	movw	r1, #26212	; 0x6664
   11bb4:	movt	r1, #1
   11bb8:	mov	r0, #0
   11bbc:	bl	10d38 <dcgettext@plt>
   11bc0:	mov	r2, r0
   11bc4:	mov	r1, r4
   11bc8:	mov	r0, #1
   11bcc:	bl	10da4 <error@plt>
   11bd0:	cmp	r5, #1
   11bd4:	bgt	118f0 <__assert_fail@plt+0x9f0>
   11bd8:	cmp	r5, #1
   11bdc:	beq	11880 <__assert_fail@plt+0x980>
   11be0:	str	r7, [sp, #44]	; 0x2c
   11be4:	cmp	r5, #0
   11be8:	movne	r2, r6
   11bec:	moveq	r2, r4
   11bf0:	add	r3, sp, #44	; 0x2c
   11bf4:	str	r3, [sp]
   11bf8:	ldr	r3, [sp, #12]
   11bfc:	mov	r1, r9
   11c00:	add	r0, sp, #48	; 0x30
   11c04:	bl	1206c <__assert_fail@plt+0x116c>
   11c08:	mov	r8, r0
   11c0c:	ldr	r3, [sp, #16]
   11c10:	ldr	r2, [sp, #44]	; 0x2c
   11c14:	mov	r1, #1
   11c18:	ldr	r0, [sp, #12]
   11c1c:	bl	10d14 <fwrite_unlocked@plt>
   11c20:	ldr	r3, [sp, #44]	; 0x2c
   11c24:	cmp	r0, r3
   11c28:	bcc	11898 <__assert_fail@plt+0x998>
   11c2c:	cmp	r8, #0
   11c30:	beq	118c4 <__assert_fail@plt+0x9c4>
   11c34:	add	r5, r5, #1
   11c38:	ldr	r3, [sl]
   11c3c:	ands	r3, r3, #16
   11c40:	bne	11bd0 <__assert_fail@plt+0xcd0>
   11c44:	cmp	r5, #0
   11c48:	ble	11bd8 <__assert_fail@plt+0xcd8>
   11c4c:	mov	r4, #0
   11c50:	b	11820 <__assert_fail@plt+0x920>
   11c54:	andeq	r6, r1, r4, lsl r1
   11c58:	cmp	r1, #1
   11c5c:	ble	11dcc <__assert_fail@plt+0xecc>
   11c60:	strd	r4, [sp, #-12]!
   11c64:	str	lr, [sp, #8]
   11c68:	movw	ip, #26424	; 0x6738
   11c6c:	movt	ip, #1
   11c70:	ldrb	lr, [r0]
   11c74:	ldrsb	lr, [ip, lr]
   11c78:	cmp	lr, #0
   11c7c:	movlt	r0, #0
   11c80:	blt	11dac <__assert_fail@plt+0xeac>
   11c84:	movw	ip, #26424	; 0x6738
   11c88:	movt	ip, #1
   11c8c:	ldrb	r4, [r0, #1]
   11c90:	ldrsb	r5, [ip, r4]
   11c94:	cmp	r5, #0
   11c98:	movlt	r0, #0
   11c9c:	blt	11dac <__assert_fail@plt+0xeac>
   11ca0:	ldr	ip, [r2]
   11ca4:	ldr	r4, [r3]
   11ca8:	cmp	r4, #0
   11cac:	beq	11cc8 <__assert_fail@plt+0xdc8>
   11cb0:	asr	r4, r5, #4
   11cb4:	orr	lr, r4, lr, lsl #2
   11cb8:	strb	lr, [ip], #1
   11cbc:	ldr	lr, [r3]
   11cc0:	sub	lr, lr, #1
   11cc4:	str	lr, [r3]
   11cc8:	cmp	r1, #2
   11ccc:	streq	ip, [r2]
   11cd0:	moveq	r0, #0
   11cd4:	beq	11dac <__assert_fail@plt+0xeac>
   11cd8:	ldrb	lr, [r0, #2]
   11cdc:	cmp	lr, #61	; 0x3d
   11ce0:	beq	11d80 <__assert_fail@plt+0xe80>
   11ce4:	movw	r4, #26424	; 0x6738
   11ce8:	movt	r4, #1
   11cec:	ldrsb	lr, [r4, lr]
   11cf0:	cmp	lr, #0
   11cf4:	strlt	ip, [r2]
   11cf8:	movlt	r0, #0
   11cfc:	blt	11dac <__assert_fail@plt+0xeac>
   11d00:	ldr	r4, [r3]
   11d04:	cmp	r4, #0
   11d08:	beq	11d24 <__assert_fail@plt+0xe24>
   11d0c:	asr	r4, lr, #2
   11d10:	orr	r5, r4, r5, lsl #4
   11d14:	strb	r5, [ip], #1
   11d18:	ldr	r4, [r3]
   11d1c:	sub	r4, r4, #1
   11d20:	str	r4, [r3]
   11d24:	cmp	r1, #3
   11d28:	streq	ip, [r2]
   11d2c:	moveq	r0, #0
   11d30:	beq	11dac <__assert_fail@plt+0xeac>
   11d34:	ldrb	r0, [r0, #3]
   11d38:	cmp	r0, #61	; 0x3d
   11d3c:	beq	11db8 <__assert_fail@plt+0xeb8>
   11d40:	movw	r1, #26424	; 0x6738
   11d44:	movt	r1, #1
   11d48:	ldrsb	r1, [r1, r0]
   11d4c:	cmp	r1, #0
   11d50:	strlt	ip, [r2]
   11d54:	movlt	r0, #0
   11d58:	blt	11dac <__assert_fail@plt+0xeac>
   11d5c:	ldr	r0, [r3]
   11d60:	cmp	r0, #0
   11d64:	beq	11da4 <__assert_fail@plt+0xea4>
   11d68:	orr	lr, r1, lr, lsl #6
   11d6c:	strb	lr, [ip], #1
   11d70:	ldr	r1, [r3]
   11d74:	sub	r1, r1, #1
   11d78:	str	r1, [r3]
   11d7c:	b	11da4 <__assert_fail@plt+0xea4>
   11d80:	cmp	r1, #4
   11d84:	strne	ip, [r2]
   11d88:	movne	r0, #0
   11d8c:	bne	11dac <__assert_fail@plt+0xeac>
   11d90:	ldrb	r3, [r0, #3]
   11d94:	cmp	r3, #61	; 0x3d
   11d98:	strne	ip, [r2]
   11d9c:	movne	r0, #0
   11da0:	bne	11dac <__assert_fail@plt+0xeac>
   11da4:	str	ip, [r2]
   11da8:	mov	r0, #1
   11dac:	ldrd	r4, [sp]
   11db0:	add	sp, sp, #8
   11db4:	pop	{pc}		; (ldr pc, [sp], #4)
   11db8:	cmp	r1, #4
   11dbc:	strne	ip, [r2]
   11dc0:	movne	r0, #0
   11dc4:	bne	11dac <__assert_fail@plt+0xeac>
   11dc8:	b	11da4 <__assert_fail@plt+0xea4>
   11dcc:	mov	r0, #0
   11dd0:	bx	lr
   11dd4:	strd	r4, [sp, #-12]!
   11dd8:	str	lr, [sp, #8]
   11ddc:	tst	r3, #3
   11de0:	bne	11df4 <__assert_fail@plt+0xef4>
   11de4:	asr	ip, r3, #2
   11de8:	add	ip, ip, ip, lsl #1
   11dec:	cmp	ip, r1
   11df0:	beq	11e04 <__assert_fail@plt+0xf04>
   11df4:	movw	r4, #26424	; 0x6738
   11df8:	movt	r4, #1
   11dfc:	mov	r5, #61	; 0x3d
   11e00:	b	11f1c <__assert_fail@plt+0x101c>
   11e04:	cmp	r1, #0
   11e08:	beq	11ea0 <__assert_fail@plt+0xfa0>
   11e0c:	add	r2, r2, #4
   11e10:	add	ip, r0, #3
   11e14:	add	r1, r1, #3
   11e18:	add	lr, r0, r1
   11e1c:	movw	r0, #26424	; 0x6738
   11e20:	movt	r0, #1
   11e24:	ldrb	r3, [ip, #-3]
   11e28:	add	r1, r0, r3, lsr #2
   11e2c:	ldrb	r1, [r1, #256]	; 0x100
   11e30:	strb	r1, [r2, #-4]
   11e34:	ldrb	r4, [ip, #-2]
   11e38:	lsr	r1, r4, #4
   11e3c:	add	r1, r1, r3, lsl #4
   11e40:	and	r1, r1, #63	; 0x3f
   11e44:	add	r1, r0, r1
   11e48:	ldrb	r3, [r1, #256]	; 0x100
   11e4c:	strb	r3, [r2, #-3]
   11e50:	ldrb	r1, [ip, #-1]
   11e54:	lsr	r3, r1, #6
   11e58:	add	r3, r3, r4, lsl #2
   11e5c:	and	r3, r3, #63	; 0x3f
   11e60:	add	r3, r0, r3
   11e64:	ldrb	r3, [r3, #256]	; 0x100
   11e68:	strb	r3, [r2, #-2]
   11e6c:	and	r1, r1, #63	; 0x3f
   11e70:	add	r1, r0, r1
   11e74:	ldrb	r3, [r1, #256]	; 0x100
   11e78:	strb	r3, [r2, #-1]
   11e7c:	add	r2, r2, #4
   11e80:	add	ip, ip, #3
   11e84:	cmp	ip, lr
   11e88:	bne	11e24 <__assert_fail@plt+0xf24>
   11e8c:	b	11ea0 <__assert_fail@plt+0xfa0>
   11e90:	cmp	r3, #0
   11e94:	beq	11ea0 <__assert_fail@plt+0xfa0>
   11e98:	mov	r3, #0
   11e9c:	strb	r3, [r2]
   11ea0:	ldrd	r4, [sp]
   11ea4:	add	sp, sp, #8
   11ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   11eac:	and	ip, ip, #63	; 0x3f
   11eb0:	add	ip, r4, ip
   11eb4:	ldrb	r1, [ip, #256]	; 0x100
   11eb8:	strb	r1, [r2, #1]
   11ebc:	cmp	r3, #2
   11ec0:	beq	11ea0 <__assert_fail@plt+0xfa0>
   11ec4:	mov	ip, r5
   11ec8:	mov	r1, #0
   11ecc:	strb	ip, [r2, #2]
   11ed0:	cmp	r3, #3
   11ed4:	beq	11ea0 <__assert_fail@plt+0xfa0>
   11ed8:	cmp	r1, #0
   11edc:	beq	11f0c <__assert_fail@plt+0x100c>
   11ee0:	add	r2, r2, #4
   11ee4:	ldrb	ip, [r0, #2]
   11ee8:	and	ip, ip, #63	; 0x3f
   11eec:	add	ip, r4, ip
   11ef0:	ldrb	ip, [ip, #256]	; 0x100
   11ef4:	strb	ip, [r2, #-1]
   11ef8:	subs	r3, r3, #4
   11efc:	beq	11ea0 <__assert_fail@plt+0xfa0>
   11f00:	subs	r1, r1, #1
   11f04:	addne	r0, r0, #3
   11f08:	b	11f1c <__assert_fail@plt+0x101c>
   11f0c:	add	r2, r2, #4
   11f10:	strb	r5, [r2, #-1]
   11f14:	subs	r3, r3, #4
   11f18:	beq	11ea0 <__assert_fail@plt+0xfa0>
   11f1c:	cmp	r1, #0
   11f20:	cmpne	r3, #0
   11f24:	beq	11e90 <__assert_fail@plt+0xf90>
   11f28:	ldrb	ip, [r0]
   11f2c:	add	lr, r4, ip, lsr #2
   11f30:	ldrb	lr, [lr, #256]	; 0x100
   11f34:	strb	lr, [r2]
   11f38:	cmp	r3, #1
   11f3c:	beq	11ea0 <__assert_fail@plt+0xfa0>
   11f40:	lsl	ip, ip, #4
   11f44:	cmp	r1, #1
   11f48:	beq	11eac <__assert_fail@plt+0xfac>
   11f4c:	ldrb	lr, [r0, #1]
   11f50:	add	ip, ip, lr, lsr #4
   11f54:	and	ip, ip, #63	; 0x3f
   11f58:	add	ip, r4, ip
   11f5c:	ldrb	ip, [ip, #256]	; 0x100
   11f60:	strb	ip, [r2, #1]
   11f64:	cmp	r3, #2
   11f68:	beq	11ea0 <__assert_fail@plt+0xfa0>
   11f6c:	lsl	lr, lr, #2
   11f70:	subs	r1, r1, #2
   11f74:	ldrbne	ip, [r0, #2]
   11f78:	lsrne	ip, ip, #6
   11f7c:	moveq	ip, r1
   11f80:	add	lr, lr, ip
   11f84:	and	lr, lr, #63	; 0x3f
   11f88:	add	lr, r4, lr
   11f8c:	ldrb	ip, [lr, #256]	; 0x100
   11f90:	b	11ecc <__assert_fail@plt+0xfcc>
   11f94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11f98:	strd	r6, [sp, #8]
   11f9c:	str	r8, [sp, #16]
   11fa0:	str	lr, [sp, #20]
   11fa4:	movw	r3, #21846	; 0x5556
   11fa8:	movt	r3, #21845	; 0x5555
   11fac:	smull	ip, r3, r3, r1
   11fb0:	sub	r3, r3, r1, asr #31
   11fb4:	add	ip, r3, r3, lsl #1
   11fb8:	cmp	r1, ip
   11fbc:	addne	r3, r3, #1
   11fc0:	asr	r5, r3, #31
   11fc4:	lsl	lr, r5, #2
   11fc8:	orr	lr, lr, r3, lsr #30
   11fcc:	lsl	r3, r3, #2
   11fd0:	asr	ip, r3, #31
   11fd4:	subs	ip, ip, lr
   11fd8:	movne	ip, #1
   11fdc:	orrs	ip, ip, r1, lsr #31
   11fe0:	movne	r6, #0
   11fe4:	strne	r6, [r2]
   11fe8:	beq	12004 <__assert_fail@plt+0x1104>
   11fec:	mov	r0, r6
   11ff0:	ldrd	r4, [sp]
   11ff4:	ldrd	r6, [sp, #8]
   11ff8:	ldr	r8, [sp, #16]
   11ffc:	add	sp, sp, #20
   12000:	pop	{pc}		; (ldr pc, [sp], #4)
   12004:	mov	r8, r2
   12008:	mov	r5, r1
   1200c:	mov	r7, r0
   12010:	mov	r6, r3
   12014:	add	r4, r3, #1
   12018:	mov	r0, r4
   1201c:	bl	15d24 <__assert_fail@plt+0x4e24>
   12020:	str	r0, [r8]
   12024:	cmp	r0, #0
   12028:	moveq	r6, r4
   1202c:	beq	11fec <__assert_fail@plt+0x10ec>
   12030:	mov	r3, r4
   12034:	mov	r2, r0
   12038:	mov	r1, r5
   1203c:	mov	r0, r7
   12040:	bl	11dd4 <__assert_fail@plt+0xed4>
   12044:	b	11fec <__assert_fail@plt+0x10ec>
   12048:	movw	r3, #26424	; 0x6738
   1204c:	movt	r3, #1
   12050:	ldrb	r0, [r3, r0]
   12054:	mvn	r0, r0
   12058:	ubfx	r0, r0, #7, #1
   1205c:	bx	lr
   12060:	mov	r3, #0
   12064:	str	r3, [r0]
   12068:	bx	lr
   1206c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12070:	strd	r6, [sp, #8]
   12074:	strd	r8, [sp, #16]
   12078:	strd	sl, [sp, #24]
   1207c:	str	lr, [sp, #32]
   12080:	sub	sp, sp, #20
   12084:	mov	fp, r1
   12088:	mov	r5, r2
   1208c:	str	r3, [sp, #4]
   12090:	ldr	r3, [sp, #56]	; 0x38
   12094:	ldr	r3, [r3]
   12098:	str	r3, [sp, #12]
   1209c:	subs	r6, r0, #0
   120a0:	movne	sl, #1
   120a4:	moveq	sl, #0
   120a8:	beq	120c8 <__assert_fail@plt+0x11c8>
   120ac:	ldr	r9, [r6]
   120b0:	clz	r8, r2
   120b4:	lsr	r8, r8, #5
   120b8:	eor	r8, r8, #1
   120bc:	and	r3, r8, sl
   120c0:	str	r3, [sp]
   120c4:	b	121ac <__assert_fail@plt+0x12ac>
   120c8:	mov	r9, #0
   120cc:	mov	r8, r9
   120d0:	b	120b8 <__assert_fail@plt+0x11b8>
   120d4:	mov	r4, fp
   120d8:	add	fp, fp, r5
   120dc:	sub	r5, fp, r4
   120e0:	ldr	r7, [sp, #12]
   120e4:	add	r3, sp, #12
   120e8:	add	r2, sp, #4
   120ec:	mov	r1, r5
   120f0:	mov	r0, r4
   120f4:	bl	11c58 <__assert_fail@plt+0xd58>
   120f8:	cmp	r0, #0
   120fc:	beq	121c8 <__assert_fail@plt+0x12c8>
   12100:	add	r4, r4, #4
   12104:	b	120dc <__assert_fail@plt+0x11dc>
   12108:	mov	r2, #4
   1210c:	mov	r1, #10
   12110:	mov	r0, r4
   12114:	bl	10e64 <memchr@plt>
   12118:	cmp	r0, #0
   1211c:	bne	122cc <__assert_fail@plt+0x13cc>
   12120:	add	fp, r4, #4
   12124:	mov	r5, #4
   12128:	b	1218c <__assert_fail@plt+0x128c>
   1212c:	cmp	r4, r7
   12130:	beq	12164 <__assert_fail@plt+0x1264>
   12134:	ldrb	r1, [r4], #1
   12138:	cmp	r1, #10
   1213c:	beq	1212c <__assert_fail@plt+0x122c>
   12140:	ldr	r0, [r6]
   12144:	add	r2, r0, #1
   12148:	mov	r3, r6
   1214c:	str	r2, [r3], r0
   12150:	strb	r1, [r3, #4]
   12154:	cmp	r2, #4
   12158:	bne	1212c <__assert_fail@plt+0x122c>
   1215c:	mov	fp, r4
   12160:	b	12168 <__assert_fail@plt+0x1268>
   12164:	mov	fp, r7
   12168:	mov	r4, r6
   1216c:	ldr	r5, [r4], #4
   12170:	cmp	r5, #0
   12174:	beq	12234 <__assert_fail@plt+0x1334>
   12178:	cmp	r5, #3
   1217c:	bgt	1218c <__assert_fail@plt+0x128c>
   12180:	ldr	r3, [sp]
   12184:	cmp	r3, #0
   12188:	bne	12270 <__assert_fail@plt+0x1370>
   1218c:	add	r3, sp, #12
   12190:	add	r2, sp, #4
   12194:	mov	r1, r5
   12198:	mov	r0, r4
   1219c:	bl	11c58 <__assert_fail@plt+0xd58>
   121a0:	cmp	r0, #0
   121a4:	beq	12234 <__assert_fail@plt+0x1334>
   121a8:	sub	r5, r7, fp
   121ac:	cmp	r9, #0
   121b0:	moveq	r3, r8
   121b4:	movne	r3, #0
   121b8:	cmp	r3, #0
   121bc:	bne	120d4 <__assert_fail@plt+0x11d4>
   121c0:	ldr	r7, [sp, #12]
   121c4:	mov	r4, fp
   121c8:	cmp	r5, #0
   121cc:	moveq	r3, r8
   121d0:	movne	r3, #0
   121d4:	cmp	r3, #0
   121d8:	bne	12230 <__assert_fail@plt+0x1330>
   121dc:	cmp	r5, #0
   121e0:	beq	12278 <__assert_fail@plt+0x1378>
   121e4:	ldrb	r3, [r4]
   121e8:	cmp	r3, #10
   121ec:	movne	r3, #0
   121f0:	andeq	r3, sl, #1
   121f4:	cmp	r3, #0
   121f8:	addne	fp, r4, #1
   121fc:	subne	r5, r5, #1
   12200:	bne	121ac <__assert_fail@plt+0x12ac>
   12204:	ldr	r3, [sp, #12]
   12208:	sub	r2, r7, r3
   1220c:	ldr	r3, [sp, #4]
   12210:	sub	r3, r3, r2
   12214:	str	r3, [sp, #4]
   12218:	str	r7, [sp, #12]
   1221c:	add	r7, r4, r5
   12220:	cmp	r6, #0
   12224:	moveq	fp, r4
   12228:	beq	12170 <__assert_fail@plt+0x1270>
   1222c:	b	1229c <__assert_fail@plt+0x139c>
   12230:	mov	r5, #0
   12234:	ldr	r3, [sp, #56]	; 0x38
   12238:	ldr	r3, [r3]
   1223c:	ldr	r2, [sp, #12]
   12240:	sub	r3, r3, r2
   12244:	ldr	r2, [sp, #56]	; 0x38
   12248:	str	r3, [r2]
   1224c:	clz	r0, r5
   12250:	lsr	r0, r0, #5
   12254:	add	sp, sp, #20
   12258:	ldrd	r4, [sp]
   1225c:	ldrd	r6, [sp, #8]
   12260:	ldrd	r8, [sp, #16]
   12264:	ldrd	sl, [sp, #24]
   12268:	add	sp, sp, #32
   1226c:	pop	{pc}		; (ldr pc, [sp], #4)
   12270:	mov	r5, #0
   12274:	b	12234 <__assert_fail@plt+0x1334>
   12278:	ldr	r3, [sp, #12]
   1227c:	sub	r2, r7, r3
   12280:	ldr	r3, [sp, #4]
   12284:	sub	r3, r3, r2
   12288:	str	r3, [sp, #4]
   1228c:	str	r7, [sp, #12]
   12290:	add	r7, r4, r5
   12294:	cmp	r6, #0
   12298:	beq	12234 <__assert_fail@plt+0x1334>
   1229c:	ldr	r3, [r6]
   122a0:	cmp	r3, #4
   122a4:	moveq	r3, #0
   122a8:	streq	r3, [r6]
   122ac:	ldr	r3, [r6]
   122b0:	cmp	r5, #3
   122b4:	movle	r5, #0
   122b8:	movgt	r5, #1
   122bc:	cmp	r3, #0
   122c0:	movne	r5, #0
   122c4:	cmp	r5, #0
   122c8:	bne	12108 <__assert_fail@plt+0x1208>
   122cc:	cmp	r7, r4
   122d0:	movls	fp, r4
   122d4:	bhi	12134 <__assert_fail@plt+0x1234>
   122d8:	b	12168 <__assert_fail@plt+0x1268>
   122dc:	strd	r4, [sp, #-20]!	; 0xffffffec
   122e0:	strd	r6, [sp, #8]
   122e4:	str	lr, [sp, #16]
   122e8:	sub	sp, sp, #20
   122ec:	mov	r6, r0
   122f0:	mov	r7, r1
   122f4:	mov	r4, r2
   122f8:	mov	r5, r3
   122fc:	asr	r0, r2, #2
   12300:	add	r0, r0, #1
   12304:	add	r0, r0, r0, lsl #1
   12308:	str	r0, [sp, #12]
   1230c:	bl	15d24 <__assert_fail@plt+0x4e24>
   12310:	str	r0, [r5]
   12314:	cmp	r0, #0
   12318:	moveq	r4, #1
   1231c:	beq	1235c <__assert_fail@plt+0x145c>
   12320:	add	r3, sp, #12
   12324:	str	r3, [sp]
   12328:	mov	r3, r0
   1232c:	mov	r2, r4
   12330:	mov	r1, r7
   12334:	mov	r0, r6
   12338:	bl	1206c <__assert_fail@plt+0x116c>
   1233c:	subs	r4, r0, #0
   12340:	beq	12374 <__assert_fail@plt+0x1474>
   12344:	ldr	r3, [sp, #40]	; 0x28
   12348:	cmp	r3, #0
   1234c:	beq	1235c <__assert_fail@plt+0x145c>
   12350:	ldr	r3, [sp, #12]
   12354:	ldr	r2, [sp, #40]	; 0x28
   12358:	str	r3, [r2]
   1235c:	mov	r0, r4
   12360:	add	sp, sp, #20
   12364:	ldrd	r4, [sp]
   12368:	ldrd	r6, [sp, #8]
   1236c:	add	sp, sp, #16
   12370:	pop	{pc}		; (ldr pc, [sp], #4)
   12374:	ldr	r0, [r5]
   12378:	bl	12654 <__assert_fail@plt+0x1754>
   1237c:	mov	r3, #0
   12380:	str	r3, [r5]
   12384:	b	1235c <__assert_fail@plt+0x145c>
   12388:	movw	r3, #29016	; 0x7158
   1238c:	movt	r3, #2
   12390:	str	r0, [r3]
   12394:	bx	lr
   12398:	movw	r3, #29016	; 0x7158
   1239c:	movt	r3, #2
   123a0:	strb	r0, [r3, #4]
   123a4:	bx	lr
   123a8:	strd	r4, [sp, #-16]!
   123ac:	str	r6, [sp, #8]
   123b0:	str	lr, [sp, #12]
   123b4:	sub	sp, sp, #8
   123b8:	movw	r3, #29004	; 0x714c
   123bc:	movt	r3, #2
   123c0:	ldr	r0, [r3]
   123c4:	bl	15dbc <__assert_fail@plt+0x4ebc>
   123c8:	cmp	r0, #0
   123cc:	beq	123f4 <__assert_fail@plt+0x14f4>
   123d0:	movw	r3, #29016	; 0x7158
   123d4:	movt	r3, #2
   123d8:	ldrb	r3, [r3, #4]
   123dc:	cmp	r3, #0
   123e0:	beq	12420 <__assert_fail@plt+0x1520>
   123e4:	bl	10e1c <__errno_location@plt>
   123e8:	ldr	r3, [r0]
   123ec:	cmp	r3, #32
   123f0:	bne	12420 <__assert_fail@plt+0x1520>
   123f4:	movw	r3, #28992	; 0x7140
   123f8:	movt	r3, #2
   123fc:	ldr	r0, [r3]
   12400:	bl	15dbc <__assert_fail@plt+0x4ebc>
   12404:	cmp	r0, #0
   12408:	bne	124a8 <__assert_fail@plt+0x15a8>
   1240c:	add	sp, sp, #8
   12410:	ldrd	r4, [sp]
   12414:	ldr	r6, [sp, #8]
   12418:	add	sp, sp, #12
   1241c:	pop	{pc}		; (ldr pc, [sp], #4)
   12420:	mov	r2, #5
   12424:	movw	r1, #26224	; 0x6670
   12428:	movt	r1, #1
   1242c:	mov	r0, #0
   12430:	bl	10d38 <dcgettext@plt>
   12434:	mov	r4, r0
   12438:	movw	r3, #29016	; 0x7158
   1243c:	movt	r3, #2
   12440:	ldr	r5, [r3]
   12444:	cmp	r5, #0
   12448:	beq	12488 <__assert_fail@plt+0x1588>
   1244c:	bl	10e1c <__errno_location@plt>
   12450:	ldr	r6, [r0]
   12454:	mov	r0, r5
   12458:	bl	1486c <__assert_fail@plt+0x396c>
   1245c:	str	r4, [sp]
   12460:	mov	r3, r0
   12464:	movw	r2, #26156	; 0x662c
   12468:	movt	r2, #1
   1246c:	mov	r1, r6
   12470:	mov	r0, #0
   12474:	bl	10da4 <error@plt>
   12478:	movw	r3, #28908	; 0x70ec
   1247c:	movt	r3, #2
   12480:	ldr	r0, [r3]
   12484:	bl	10cf0 <_exit@plt>
   12488:	bl	10e1c <__errno_location@plt>
   1248c:	mov	r3, r4
   12490:	movw	r2, #26160	; 0x6630
   12494:	movt	r2, #1
   12498:	ldr	r1, [r0]
   1249c:	mov	r0, #0
   124a0:	bl	10da4 <error@plt>
   124a4:	b	12478 <__assert_fail@plt+0x1578>
   124a8:	movw	r3, #28908	; 0x70ec
   124ac:	movt	r3, #2
   124b0:	ldr	r0, [r3]
   124b4:	bl	10cf0 <_exit@plt>
   124b8:	strd	r4, [sp, #-12]!
   124bc:	str	lr, [sp, #8]
   124c0:	sub	sp, sp, #20
   124c4:	ldr	r1, [sp, #40]	; 0x28
   124c8:	str	r1, [sp, #8]
   124cc:	ldrd	r4, [sp, #32]
   124d0:	strd	r4, [sp]
   124d4:	bl	10cc0 <posix_fadvise64@plt>
   124d8:	add	sp, sp, #20
   124dc:	ldrd	r4, [sp]
   124e0:	add	sp, sp, #8
   124e4:	pop	{pc}		; (ldr pc, [sp], #4)
   124e8:	cmp	r0, #0
   124ec:	bxeq	lr
   124f0:	str	r4, [sp, #-8]!
   124f4:	str	lr, [sp, #4]
   124f8:	sub	sp, sp, #16
   124fc:	mov	r4, r1
   12500:	bl	10e4c <fileno@plt>
   12504:	str	r4, [sp, #8]
   12508:	mov	r2, #0
   1250c:	mov	r3, #0
   12510:	strd	r2, [sp]
   12514:	bl	10cc0 <posix_fadvise64@plt>
   12518:	add	sp, sp, #16
   1251c:	ldr	r4, [sp]
   12520:	add	sp, sp, #4
   12524:	pop	{pc}		; (ldr pc, [sp], #4)
   12528:	strd	r4, [sp, #-16]!
   1252c:	str	r6, [sp, #8]
   12530:	str	lr, [sp, #12]
   12534:	sub	sp, sp, #8
   12538:	mov	r4, r0
   1253c:	bl	10e4c <fileno@plt>
   12540:	cmp	r0, #0
   12544:	blt	125bc <__assert_fail@plt+0x16bc>
   12548:	mov	r0, r4
   1254c:	bl	10dc8 <__freading@plt>
   12550:	cmp	r0, #0
   12554:	beq	12588 <__assert_fail@plt+0x1688>
   12558:	mov	r0, r4
   1255c:	bl	10e4c <fileno@plt>
   12560:	mov	r3, #1
   12564:	str	r3, [sp]
   12568:	mov	r2, #0
   1256c:	mov	r3, #0
   12570:	bl	10d74 <lseek64@plt>
   12574:	mvn	r2, #0
   12578:	mvn	r3, #0
   1257c:	cmp	r1, r3
   12580:	cmpeq	r0, r2
   12584:	beq	125c8 <__assert_fail@plt+0x16c8>
   12588:	mov	r0, r4
   1258c:	bl	125e4 <__assert_fail@plt+0x16e4>
   12590:	cmp	r0, #0
   12594:	beq	125c8 <__assert_fail@plt+0x16c8>
   12598:	bl	10e1c <__errno_location@plt>
   1259c:	mov	r5, r0
   125a0:	ldr	r6, [r0]
   125a4:	mov	r0, r4
   125a8:	bl	10e70 <fclose@plt>
   125ac:	cmp	r6, #0
   125b0:	strne	r6, [r5]
   125b4:	mvnne	r0, #0
   125b8:	b	125d0 <__assert_fail@plt+0x16d0>
   125bc:	mov	r0, r4
   125c0:	bl	10e70 <fclose@plt>
   125c4:	b	125d0 <__assert_fail@plt+0x16d0>
   125c8:	mov	r0, r4
   125cc:	bl	10e70 <fclose@plt>
   125d0:	add	sp, sp, #8
   125d4:	ldrd	r4, [sp]
   125d8:	ldr	r6, [sp, #8]
   125dc:	add	sp, sp, #12
   125e0:	pop	{pc}		; (ldr pc, [sp], #4)
   125e4:	str	r4, [sp, #-8]!
   125e8:	str	lr, [sp, #4]
   125ec:	sub	sp, sp, #8
   125f0:	subs	r4, r0, #0
   125f4:	beq	12608 <__assert_fail@plt+0x1708>
   125f8:	mov	r0, r4
   125fc:	bl	10dc8 <__freading@plt>
   12600:	cmp	r0, #0
   12604:	bne	12620 <__assert_fail@plt+0x1720>
   12608:	mov	r0, r4
   1260c:	bl	10ccc <fflush@plt>
   12610:	add	sp, sp, #8
   12614:	ldr	r4, [sp]
   12618:	add	sp, sp, #4
   1261c:	pop	{pc}		; (ldr pc, [sp], #4)
   12620:	ldr	r3, [r4]
   12624:	tst	r3, #256	; 0x100
   12628:	bne	12638 <__assert_fail@plt+0x1738>
   1262c:	mov	r0, r4
   12630:	bl	10ccc <fflush@plt>
   12634:	b	12610 <__assert_fail@plt+0x1710>
   12638:	mov	r3, #1
   1263c:	str	r3, [sp]
   12640:	mov	r2, #0
   12644:	mov	r3, #0
   12648:	mov	r0, r4
   1264c:	bl	126b4 <__assert_fail@plt+0x17b4>
   12650:	b	1262c <__assert_fail@plt+0x172c>
   12654:	strd	r4, [sp, #-12]!
   12658:	str	lr, [sp, #8]
   1265c:	sub	sp, sp, #12
   12660:	mov	r5, r0
   12664:	bl	10e1c <__errno_location@plt>
   12668:	mov	r4, r0
   1266c:	ldr	r3, [r0]
   12670:	str	r3, [sp]
   12674:	str	r3, [sp, #4]
   12678:	mov	r3, #0
   1267c:	str	r3, [r0]
   12680:	mov	r0, r5
   12684:	bl	10ce4 <free@plt>
   12688:	ldr	r3, [r4]
   1268c:	clz	r3, r3
   12690:	lsr	r3, r3, #5
   12694:	add	r2, sp, #8
   12698:	add	r3, r2, r3, lsl #2
   1269c:	ldr	r3, [r3, #-8]
   126a0:	str	r3, [r4]
   126a4:	add	sp, sp, #12
   126a8:	ldrd	r4, [sp]
   126ac:	add	sp, sp, #8
   126b0:	pop	{pc}		; (ldr pc, [sp], #4)
   126b4:	str	r4, [sp, #-16]!
   126b8:	strd	r6, [sp, #4]
   126bc:	str	lr, [sp, #12]
   126c0:	sub	sp, sp, #8
   126c4:	mov	r4, r0
   126c8:	mov	r6, r2
   126cc:	mov	r7, r3
   126d0:	ldr	r2, [r0, #8]
   126d4:	ldr	r3, [r0, #4]
   126d8:	cmp	r2, r3
   126dc:	beq	1270c <__assert_fail@plt+0x180c>
   126e0:	ldr	r3, [sp, #24]
   126e4:	str	r3, [sp]
   126e8:	mov	r2, r6
   126ec:	mov	r3, r7
   126f0:	mov	r0, r4
   126f4:	bl	10e7c <fseeko64@plt>
   126f8:	add	sp, sp, #8
   126fc:	ldr	r4, [sp]
   12700:	ldrd	r6, [sp, #4]
   12704:	add	sp, sp, #12
   12708:	pop	{pc}		; (ldr pc, [sp], #4)
   1270c:	ldr	r2, [r0, #20]
   12710:	ldr	r3, [r0, #16]
   12714:	cmp	r2, r3
   12718:	bne	126e0 <__assert_fail@plt+0x17e0>
   1271c:	ldr	r3, [r0, #36]	; 0x24
   12720:	cmp	r3, #0
   12724:	bne	126e0 <__assert_fail@plt+0x17e0>
   12728:	bl	10e4c <fileno@plt>
   1272c:	ldr	r3, [sp, #24]
   12730:	str	r3, [sp]
   12734:	mov	r2, r6
   12738:	mov	r3, r7
   1273c:	bl	10d74 <lseek64@plt>
   12740:	mvn	r2, #0
   12744:	mvn	r3, #0
   12748:	cmp	r1, r3
   1274c:	cmpeq	r0, r2
   12750:	beq	1276c <__assert_fail@plt+0x186c>
   12754:	ldr	r3, [r4]
   12758:	bic	r3, r3, #16
   1275c:	str	r3, [r4]
   12760:	strd	r0, [r4, #80]	; 0x50
   12764:	mov	r0, #0
   12768:	b	126f8 <__assert_fail@plt+0x17f8>
   1276c:	mvn	r0, #0
   12770:	b	126f8 <__assert_fail@plt+0x17f8>
   12774:	strd	r4, [sp, #-16]!
   12778:	str	r6, [sp, #8]
   1277c:	str	lr, [sp, #12]
   12780:	subs	r4, r0, #0
   12784:	beq	12820 <__assert_fail@plt+0x1920>
   12788:	mov	r1, #47	; 0x2f
   1278c:	mov	r0, r4
   12790:	bl	10ea0 <strrchr@plt>
   12794:	subs	r5, r0, #0
   12798:	beq	127f8 <__assert_fail@plt+0x18f8>
   1279c:	add	r6, r5, #1
   127a0:	sub	r3, r6, r4
   127a4:	cmp	r3, #6
   127a8:	ble	127f8 <__assert_fail@plt+0x18f8>
   127ac:	mov	r2, #7
   127b0:	movw	r1, #26800	; 0x68b0
   127b4:	movt	r1, #1
   127b8:	sub	r0, r5, #6
   127bc:	bl	10ee8 <strncmp@plt>
   127c0:	cmp	r0, #0
   127c4:	bne	127f8 <__assert_fail@plt+0x18f8>
   127c8:	mov	r2, #3
   127cc:	movw	r1, #26808	; 0x68b8
   127d0:	movt	r1, #1
   127d4:	mov	r0, r6
   127d8:	bl	10ee8 <strncmp@plt>
   127dc:	cmp	r0, #0
   127e0:	movne	r4, r6
   127e4:	bne	127f8 <__assert_fail@plt+0x18f8>
   127e8:	add	r4, r5, #4
   127ec:	movw	r3, #28976	; 0x7130
   127f0:	movt	r3, #2
   127f4:	str	r4, [r3]
   127f8:	movw	r3, #29024	; 0x7160
   127fc:	movt	r3, #2
   12800:	str	r4, [r3]
   12804:	movw	r3, #28980	; 0x7134
   12808:	movt	r3, #2
   1280c:	str	r4, [r3]
   12810:	ldrd	r4, [sp]
   12814:	ldr	r6, [sp, #8]
   12818:	add	sp, sp, #12
   1281c:	pop	{pc}		; (ldr pc, [sp], #4)
   12820:	movw	r3, #28992	; 0x7140
   12824:	movt	r3, #2
   12828:	ldr	r3, [r3]
   1282c:	mov	r2, #55	; 0x37
   12830:	mov	r1, #1
   12834:	movw	r0, #26744	; 0x6878
   12838:	movt	r0, #1
   1283c:	bl	10d68 <fwrite@plt>
   12840:	bl	10ef4 <abort@plt>
   12844:	mov	r2, #0
   12848:	mov	r3, #0
   1284c:	strd	r2, [r0]
   12850:	strd	r2, [r0, #8]
   12854:	strd	r2, [r0, #16]
   12858:	strd	r2, [r0, #24]
   1285c:	strd	r2, [r0, #32]
   12860:	strd	r2, [r0, #40]	; 0x28
   12864:	cmp	r1, #10
   12868:	beq	12874 <__assert_fail@plt+0x1974>
   1286c:	str	r1, [r0]
   12870:	bx	lr
   12874:	str	r4, [sp, #-8]!
   12878:	str	lr, [sp, #4]
   1287c:	bl	10ef4 <abort@plt>
   12880:	strd	r4, [sp, #-16]!
   12884:	str	r6, [sp, #8]
   12888:	str	lr, [sp, #12]
   1288c:	mov	r5, r0
   12890:	mov	r6, r1
   12894:	mov	r2, #5
   12898:	mov	r1, r0
   1289c:	mov	r0, #0
   128a0:	bl	10d38 <dcgettext@plt>
   128a4:	mov	r4, r0
   128a8:	cmp	r5, r0
   128ac:	beq	128c4 <__assert_fail@plt+0x19c4>
   128b0:	mov	r0, r4
   128b4:	ldrd	r4, [sp]
   128b8:	ldr	r6, [sp, #8]
   128bc:	add	sp, sp, #12
   128c0:	pop	{pc}		; (ldr pc, [sp], #4)
   128c4:	bl	15e48 <__assert_fail@plt+0x4f48>
   128c8:	ldrb	r3, [r0]
   128cc:	bic	r3, r3, #32
   128d0:	cmp	r3, #85	; 0x55
   128d4:	bne	12958 <__assert_fail@plt+0x1a58>
   128d8:	ldrb	r3, [r0, #1]
   128dc:	bic	r3, r3, #32
   128e0:	cmp	r3, #84	; 0x54
   128e4:	bne	1291c <__assert_fail@plt+0x1a1c>
   128e8:	ldrb	r3, [r0, #2]
   128ec:	bic	r3, r3, #32
   128f0:	cmp	r3, #70	; 0x46
   128f4:	bne	1291c <__assert_fail@plt+0x1a1c>
   128f8:	ldrb	r3, [r0, #3]
   128fc:	cmp	r3, #45	; 0x2d
   12900:	bne	1291c <__assert_fail@plt+0x1a1c>
   12904:	ldrb	r3, [r0, #4]
   12908:	cmp	r3, #56	; 0x38
   1290c:	bne	1291c <__assert_fail@plt+0x1a1c>
   12910:	ldrb	r3, [r0, #5]
   12914:	cmp	r3, #0
   12918:	beq	12938 <__assert_fail@plt+0x1a38>
   1291c:	movw	r4, #26896	; 0x6910
   12920:	movt	r4, #1
   12924:	movw	r3, #26916	; 0x6924
   12928:	movt	r3, #1
   1292c:	cmp	r6, #9
   12930:	movne	r4, r3
   12934:	b	128b0 <__assert_fail@plt+0x19b0>
   12938:	ldrb	r2, [r4]
   1293c:	movw	r4, #26912	; 0x6920
   12940:	movt	r4, #1
   12944:	movw	r3, #26900	; 0x6914
   12948:	movt	r3, #1
   1294c:	cmp	r2, #96	; 0x60
   12950:	movne	r4, r3
   12954:	b	128b0 <__assert_fail@plt+0x19b0>
   12958:	cmp	r3, #71	; 0x47
   1295c:	bne	1291c <__assert_fail@plt+0x1a1c>
   12960:	ldrb	r3, [r0, #1]
   12964:	bic	r3, r3, #32
   12968:	cmp	r3, #66	; 0x42
   1296c:	bne	1291c <__assert_fail@plt+0x1a1c>
   12970:	ldrb	r3, [r0, #2]
   12974:	cmp	r3, #49	; 0x31
   12978:	bne	1291c <__assert_fail@plt+0x1a1c>
   1297c:	ldrb	r3, [r0, #3]
   12980:	cmp	r3, #56	; 0x38
   12984:	bne	1291c <__assert_fail@plt+0x1a1c>
   12988:	ldrb	r3, [r0, #4]
   1298c:	cmp	r3, #48	; 0x30
   12990:	bne	1291c <__assert_fail@plt+0x1a1c>
   12994:	ldrb	r3, [r0, #5]
   12998:	cmp	r3, #51	; 0x33
   1299c:	bne	1291c <__assert_fail@plt+0x1a1c>
   129a0:	ldrb	r3, [r0, #6]
   129a4:	cmp	r3, #48	; 0x30
   129a8:	bne	1291c <__assert_fail@plt+0x1a1c>
   129ac:	ldrb	r3, [r0, #7]
   129b0:	cmp	r3, #0
   129b4:	bne	1291c <__assert_fail@plt+0x1a1c>
   129b8:	ldrb	r2, [r4]
   129bc:	movw	r4, #26908	; 0x691c
   129c0:	movt	r4, #1
   129c4:	movw	r3, #26904	; 0x6918
   129c8:	movt	r3, #1
   129cc:	cmp	r2, #96	; 0x60
   129d0:	movne	r4, r3
   129d4:	b	128b0 <__assert_fail@plt+0x19b0>
   129d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   129dc:	strd	r6, [sp, #8]
   129e0:	strd	r8, [sp, #16]
   129e4:	strd	sl, [sp, #24]
   129e8:	str	lr, [sp, #32]
   129ec:	sub	sp, sp, #116	; 0x74
   129f0:	str	r0, [sp, #64]	; 0x40
   129f4:	mov	r8, r1
   129f8:	str	r2, [sp, #48]	; 0x30
   129fc:	str	r3, [sp, #24]
   12a00:	ldr	r7, [sp, #152]	; 0x98
   12a04:	bl	10d80 <__ctype_get_mb_cur_max@plt>
   12a08:	str	r0, [sp, #76]	; 0x4c
   12a0c:	ldr	r3, [sp, #156]	; 0x9c
   12a10:	ubfx	r3, r3, #1, #1
   12a14:	str	r3, [sp, #32]
   12a18:	mov	r3, #1
   12a1c:	str	r3, [sp, #40]	; 0x28
   12a20:	mov	r3, #0
   12a24:	str	r3, [sp, #68]	; 0x44
   12a28:	str	r3, [sp, #36]	; 0x24
   12a2c:	str	r3, [sp, #28]
   12a30:	str	r3, [sp, #52]	; 0x34
   12a34:	str	r3, [sp, #60]	; 0x3c
   12a38:	str	r3, [sp, #72]	; 0x48
   12a3c:	movw	r3, #26920	; 0x6928
   12a40:	movt	r3, #1
   12a44:	str	r3, [sp, #80]	; 0x50
   12a48:	mov	r9, r8
   12a4c:	mov	sl, r7
   12a50:	cmp	sl, #10
   12a54:	ldrls	pc, [pc, sl, lsl #2]
   12a58:	b	12c1c <__assert_fail@plt+0x1d1c>
   12a5c:			; <UNDEFINED> instruction: 0x00012abc
   12a60:	muleq	r1, r0, sl
   12a64:	strdeq	r2, [r1], -r4
   12a68:	andeq	r2, r1, r8, lsl #21
   12a6c:	andeq	r2, r1, r8, lsr #23
   12a70:	andeq	r2, r1, ip, asr #21
   12a74:	muleq	r1, r8, lr
   12a78:	andeq	r2, r1, r0, lsr #24
   12a7c:	andeq	r2, r1, r8, lsl #22
   12a80:	andeq	r2, r1, r8, lsl #22
   12a84:	andeq	r2, r1, r8, lsl #22
   12a88:	mov	r3, #1
   12a8c:	str	r3, [sp, #28]
   12a90:	mov	r3, #1
   12a94:	str	r3, [sp, #32]
   12a98:	str	r3, [sp, #52]	; 0x34
   12a9c:	movw	r3, #26916	; 0x6924
   12aa0:	movt	r3, #1
   12aa4:	str	r3, [sp, #60]	; 0x3c
   12aa8:	mov	fp, #0
   12aac:	mov	sl, #2
   12ab0:	mov	r6, #0
   12ab4:	ldr	r8, [sp, #64]	; 0x40
   12ab8:	b	13330 <__assert_fail@plt+0x2430>
   12abc:	mov	fp, sl
   12ac0:	mov	r3, #0
   12ac4:	str	r3, [sp, #32]
   12ac8:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12acc:	ldr	r3, [sp, #32]
   12ad0:	cmp	r3, #0
   12ad4:	bne	12c34 <__assert_fail@plt+0x1d34>
   12ad8:	cmp	r9, #0
   12adc:	beq	12c58 <__assert_fail@plt+0x1d58>
   12ae0:	mov	r3, #34	; 0x22
   12ae4:	ldr	r2, [sp, #64]	; 0x40
   12ae8:	strb	r3, [r2]
   12aec:	mov	fp, #1
   12af0:	str	fp, [sp, #28]
   12af4:	str	fp, [sp, #52]	; 0x34
   12af8:	movw	r3, #26896	; 0x6910
   12afc:	movt	r3, #1
   12b00:	str	r3, [sp, #60]	; 0x3c
   12b04:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12b08:	cmp	sl, #10
   12b0c:	bne	12b40 <__assert_fail@plt+0x1c40>
   12b10:	ldr	r3, [sp, #32]
   12b14:	cmp	r3, #0
   12b18:	movne	fp, #0
   12b1c:	beq	12b68 <__assert_fail@plt+0x1c68>
   12b20:	ldr	r0, [sp, #168]	; 0xa8
   12b24:	bl	10e04 <strlen@plt>
   12b28:	str	r0, [sp, #52]	; 0x34
   12b2c:	ldr	r3, [sp, #168]	; 0xa8
   12b30:	str	r3, [sp, #60]	; 0x3c
   12b34:	mov	r3, #1
   12b38:	str	r3, [sp, #28]
   12b3c:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12b40:	mov	r1, sl
   12b44:	ldr	r0, [sp, #80]	; 0x50
   12b48:	bl	12880 <__assert_fail@plt+0x1980>
   12b4c:	str	r0, [sp, #164]	; 0xa4
   12b50:	mov	r1, sl
   12b54:	movw	r0, #26916	; 0x6924
   12b58:	movt	r0, #1
   12b5c:	bl	12880 <__assert_fail@plt+0x1980>
   12b60:	str	r0, [sp, #168]	; 0xa8
   12b64:	b	12b10 <__assert_fail@plt+0x1c10>
   12b68:	ldr	r3, [sp, #164]	; 0xa4
   12b6c:	ldrb	r3, [r3]
   12b70:	cmp	r3, #0
   12b74:	beq	12ba0 <__assert_fail@plt+0x1ca0>
   12b78:	ldr	r2, [sp, #164]	; 0xa4
   12b7c:	mov	fp, #0
   12b80:	ldr	r1, [sp, #64]	; 0x40
   12b84:	cmp	r9, fp
   12b88:	strbhi	r3, [r1, fp]
   12b8c:	add	fp, fp, #1
   12b90:	ldrb	r3, [r2, #1]!
   12b94:	cmp	r3, #0
   12b98:	bne	12b84 <__assert_fail@plt+0x1c84>
   12b9c:	b	12b20 <__assert_fail@plt+0x1c20>
   12ba0:	mov	fp, #0
   12ba4:	b	12b20 <__assert_fail@plt+0x1c20>
   12ba8:	ldr	r3, [sp, #32]
   12bac:	cmp	r3, #0
   12bb0:	bne	12a90 <__assert_fail@plt+0x1b90>
   12bb4:	mov	r3, #1
   12bb8:	str	r3, [sp, #28]
   12bbc:	cmp	r9, #0
   12bc0:	beq	12c74 <__assert_fail@plt+0x1d74>
   12bc4:	mov	r3, #39	; 0x27
   12bc8:	ldr	r2, [sp, #64]	; 0x40
   12bcc:	strb	r3, [r2]
   12bd0:	mov	r3, #0
   12bd4:	str	r3, [sp, #32]
   12bd8:	mov	fp, #1
   12bdc:	str	fp, [sp, #52]	; 0x34
   12be0:	movw	r3, #26916	; 0x6924
   12be4:	movt	r3, #1
   12be8:	str	r3, [sp, #60]	; 0x3c
   12bec:	mov	sl, #2
   12bf0:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12bf4:	ldr	r3, [sp, #32]
   12bf8:	cmp	r3, #0
   12bfc:	beq	12bbc <__assert_fail@plt+0x1cbc>
   12c00:	mov	r3, #1
   12c04:	str	r3, [sp, #52]	; 0x34
   12c08:	movw	r3, #26916	; 0x6924
   12c0c:	movt	r3, #1
   12c10:	str	r3, [sp, #60]	; 0x3c
   12c14:	mov	fp, #0
   12c18:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12c1c:	bl	10ef4 <abort@plt>
   12c20:	mov	fp, #0
   12c24:	str	fp, [sp, #32]
   12c28:	mov	r3, #1
   12c2c:	str	r3, [sp, #28]
   12c30:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12c34:	ldr	r3, [sp, #32]
   12c38:	str	r3, [sp, #28]
   12c3c:	mov	r3, #1
   12c40:	str	r3, [sp, #52]	; 0x34
   12c44:	movw	r3, #26896	; 0x6910
   12c48:	movt	r3, #1
   12c4c:	str	r3, [sp, #60]	; 0x3c
   12c50:	mov	fp, #0
   12c54:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12c58:	mov	fp, #1
   12c5c:	str	fp, [sp, #28]
   12c60:	str	fp, [sp, #52]	; 0x34
   12c64:	movw	r3, #26896	; 0x6910
   12c68:	movt	r3, #1
   12c6c:	str	r3, [sp, #60]	; 0x3c
   12c70:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12c74:	mov	r3, #0
   12c78:	str	r3, [sp, #32]
   12c7c:	mov	fp, #1
   12c80:	str	fp, [sp, #52]	; 0x34
   12c84:	movw	r3, #26916	; 0x6924
   12c88:	movt	r3, #1
   12c8c:	str	r3, [sp, #60]	; 0x3c
   12c90:	mov	sl, #2
   12c94:	b	12ab0 <__assert_fail@plt+0x1bb0>
   12c98:	mov	r3, r2
   12c9c:	add	r4, r6, r2
   12ca0:	ldr	r2, [sp, #24]
   12ca4:	cmp	r3, #1
   12ca8:	movls	r3, #0
   12cac:	movhi	r3, #1
   12cb0:	cmn	r2, #1
   12cb4:	movne	r3, #0
   12cb8:	cmp	r3, #0
   12cbc:	beq	12ccc <__assert_fail@plt+0x1dcc>
   12cc0:	ldr	r0, [sp, #48]	; 0x30
   12cc4:	bl	10e04 <strlen@plt>
   12cc8:	str	r0, [sp, #24]
   12ccc:	ldr	r3, [sp, #24]
   12cd0:	cmp	r4, r3
   12cd4:	bhi	13ec0 <__assert_fail@plt+0x2fc0>
   12cd8:	ldr	r3, [sp, #48]	; 0x30
   12cdc:	add	r4, r3, r6
   12ce0:	ldr	r2, [sp, #52]	; 0x34
   12ce4:	ldr	r1, [sp, #60]	; 0x3c
   12ce8:	mov	r0, r4
   12cec:	bl	10d20 <memcmp@plt>
   12cf0:	cmp	r0, #0
   12cf4:	bne	13ec0 <__assert_fail@plt+0x2fc0>
   12cf8:	ldr	r3, [sp, #32]
   12cfc:	cmp	r3, #0
   12d00:	bne	12f10 <__assert_fail@plt+0x2010>
   12d04:	ldrb	r4, [r4]
   12d08:	cmp	r4, #126	; 0x7e
   12d0c:	ldrls	pc, [pc, r4, lsl #2]
   12d10:	b	137c4 <__assert_fail@plt+0x28c4>
   12d14:	andeq	r2, r1, r4, asr pc
   12d18:	andeq	r3, r1, r4, asr #15
   12d1c:	andeq	r3, r1, r4, asr #15
   12d20:	andeq	r3, r1, r4, asr #15
   12d24:	andeq	r3, r1, r4, asr #15
   12d28:	andeq	r3, r1, r4, asr #15
   12d2c:	andeq	r3, r1, r4, asr #15
   12d30:	andeq	r3, r1, ip, ror #12
   12d34:	strdeq	r3, [r1], -r0
   12d38:	muleq	r1, r4, r5
   12d3c:	andeq	r3, r1, r0, asr #12
   12d40:	andeq	r3, r1, r8, lsr #11
   12d44:	andeq	r3, r1, r4, lsl #4
   12d48:	andeq	r3, r1, r8, lsl r2
   12d4c:	andeq	r3, r1, r4, asr #15
   12d50:	andeq	r3, r1, r4, asr #15
   12d54:	andeq	r3, r1, r4, asr #15
   12d58:	andeq	r3, r1, r4, asr #15
   12d5c:	andeq	r3, r1, r4, asr #15
   12d60:	andeq	r3, r1, r4, asr #15
   12d64:	andeq	r3, r1, r4, asr #15
   12d68:	andeq	r3, r1, r4, asr #15
   12d6c:	andeq	r3, r1, r4, asr #15
   12d70:	andeq	r3, r1, r4, asr #15
   12d74:	andeq	r3, r1, r4, asr #15
   12d78:	andeq	r3, r1, r4, asr #15
   12d7c:	andeq	r3, r1, r4, asr #15
   12d80:	andeq	r3, r1, r4, asr #15
   12d84:	andeq	r3, r1, r4, asr #15
   12d88:	andeq	r3, r1, r4, asr #15
   12d8c:	andeq	r3, r1, r4, asr #15
   12d90:	andeq	r3, r1, r4, asr #15
   12d94:	andeq	r3, r1, r0, ror #13
   12d98:	andeq	r3, r1, r4, lsl #14
   12d9c:	andeq	r3, r1, r4, lsl #14
   12da0:	muleq	r1, ip, r6
   12da4:	andeq	r3, r1, r4, lsl #14
   12da8:	andeq	r3, r1, r4, lsr #24
   12dac:	andeq	r3, r1, r4, lsl #14
   12db0:	andeq	r3, r1, r4, lsr #14
   12db4:	andeq	r3, r1, r4, lsl #14
   12db8:	andeq	r3, r1, r4, lsl #14
   12dbc:	andeq	r3, r1, r4, lsl #14
   12dc0:	andeq	r3, r1, r4, lsr #24
   12dc4:	andeq	r3, r1, r4, lsr #24
   12dc8:	andeq	r3, r1, r4, lsr #24
   12dcc:	andeq	r3, r1, r4, lsr #24
   12dd0:	andeq	r3, r1, r4, lsr #24
   12dd4:	andeq	r3, r1, r4, lsr #24
   12dd8:	andeq	r3, r1, r4, lsr #24
   12ddc:	andeq	r3, r1, r4, lsr #24
   12de0:	andeq	r3, r1, r4, lsr #24
   12de4:	andeq	r3, r1, r4, lsr #24
   12de8:	andeq	r3, r1, r4, lsr #24
   12dec:	andeq	r3, r1, r4, lsr #24
   12df0:	andeq	r3, r1, r4, lsr #24
   12df4:	andeq	r3, r1, r4, lsr #24
   12df8:	andeq	r3, r1, r4, lsr #24
   12dfc:	andeq	r3, r1, r4, lsr #24
   12e00:	andeq	r3, r1, r4, lsl #14
   12e04:	andeq	r3, r1, r4, lsl #14
   12e08:	andeq	r3, r1, r4, lsl #14
   12e0c:	andeq	r3, r1, r4, lsl #14
   12e10:	andeq	r3, r1, r4, lsl #1
   12e14:	andeq	r3, r1, r4, asr #15
   12e18:	andeq	r3, r1, r4, lsr #24
   12e1c:	andeq	r3, r1, r4, lsr #24
   12e20:	andeq	r3, r1, r4, lsr #24
   12e24:	andeq	r3, r1, r4, lsr #24
   12e28:	andeq	r3, r1, r4, lsr #24
   12e2c:	andeq	r3, r1, r4, lsr #24
   12e30:	andeq	r3, r1, r4, lsr #24
   12e34:	andeq	r3, r1, r4, lsr #24
   12e38:	andeq	r3, r1, r4, lsr #24
   12e3c:	andeq	r3, r1, r4, lsr #24
   12e40:	andeq	r3, r1, r4, lsr #24
   12e44:	andeq	r3, r1, r4, lsr #24
   12e48:	andeq	r3, r1, r4, lsr #24
   12e4c:	andeq	r3, r1, r4, lsr #24
   12e50:	andeq	r3, r1, r4, lsr #24
   12e54:	andeq	r3, r1, r4, lsr #24
   12e58:	andeq	r3, r1, r4, lsr #24
   12e5c:	andeq	r3, r1, r4, lsr #24
   12e60:	andeq	r3, r1, r4, lsr #24
   12e64:	andeq	r3, r1, r4, lsr #24
   12e68:	andeq	r3, r1, r4, lsr #24
   12e6c:	andeq	r3, r1, r4, lsr #24
   12e70:	andeq	r3, r1, r4, lsr #24
   12e74:	andeq	r3, r1, r4, lsr #24
   12e78:	andeq	r3, r1, r4, lsr #24
   12e7c:	andeq	r3, r1, r4, lsr #24
   12e80:	andeq	r3, r1, r4, lsl #14
   12e84:			; <UNDEFINED> instruction: 0x000135bc
   12e88:	andeq	r3, r1, r4, lsr #24
   12e8c:	andeq	r3, r1, r4, lsl #14
   12e90:	andeq	r3, r1, r4, lsr #24
   12e94:	andeq	r3, r1, r4, lsl #14
   12e98:	andeq	r3, r1, r4, lsr #24
   12e9c:	andeq	r3, r1, r4, lsr #24
   12ea0:	andeq	r3, r1, r4, lsr #24
   12ea4:	andeq	r3, r1, r4, lsr #24
   12ea8:	andeq	r3, r1, r4, lsr #24
   12eac:	andeq	r3, r1, r4, lsr #24
   12eb0:	andeq	r3, r1, r4, lsr #24
   12eb4:	andeq	r3, r1, r4, lsr #24
   12eb8:	andeq	r3, r1, r4, lsr #24
   12ebc:	andeq	r3, r1, r4, lsr #24
   12ec0:	andeq	r3, r1, r4, lsr #24
   12ec4:	andeq	r3, r1, r4, lsr #24
   12ec8:	andeq	r3, r1, r4, lsr #24
   12ecc:	andeq	r3, r1, r4, lsr #24
   12ed0:	andeq	r3, r1, r4, lsr #24
   12ed4:	andeq	r3, r1, r4, lsr #24
   12ed8:	andeq	r3, r1, r4, lsr #24
   12edc:	andeq	r3, r1, r4, lsr #24
   12ee0:	andeq	r3, r1, r4, lsr #24
   12ee4:	andeq	r3, r1, r4, lsr #24
   12ee8:	andeq	r3, r1, r4, lsr #24
   12eec:	andeq	r3, r1, r4, lsr #24
   12ef0:	andeq	r3, r1, r4, lsr #24
   12ef4:	andeq	r3, r1, r4, lsr #24
   12ef8:	andeq	r3, r1, r4, lsr #24
   12efc:	andeq	r3, r1, r4, lsr #24
   12f00:	andeq	r3, r1, ip, ror r6
   12f04:	andeq	r3, r1, r4, lsl #14
   12f08:	andeq	r3, r1, ip, ror r6
   12f0c:	muleq	r1, ip, r6
   12f10:	mov	r8, r9
   12f14:	mov	r7, sl
   12f18:	b	13e18 <__assert_fail@plt+0x2f18>
   12f1c:	ldr	r3, [sp, #28]
   12f20:	cmp	r3, #0
   12f24:	bne	12f44 <__assert_fail@plt+0x2044>
   12f28:	ldr	r3, [sp, #156]	; 0x9c
   12f2c:	tst	r3, #1
   12f30:	bne	1332c <__assert_fail@plt+0x242c>
   12f34:	ldr	r3, [sp, #28]
   12f38:	str	r3, [sp, #44]	; 0x2c
   12f3c:	mov	r5, r3
   12f40:	b	1324c <__assert_fail@plt+0x234c>
   12f44:	ldr	r3, [sp, #32]
   12f48:	cmp	r3, #0
   12f4c:	bne	13dc8 <__assert_fail@plt+0x2ec8>
   12f50:	str	r3, [sp, #44]	; 0x2c
   12f54:	ldr	r3, [sp, #36]	; 0x24
   12f58:	eor	r3, r3, #1
   12f5c:	cmp	sl, #2
   12f60:	movne	r3, #0
   12f64:	andeq	r3, r3, #1
   12f68:	cmp	r3, #0
   12f6c:	beq	12fc4 <__assert_fail@plt+0x20c4>
   12f70:	cmp	r9, fp
   12f74:	movhi	r2, #39	; 0x27
   12f78:	strbhi	r2, [r8, fp]
   12f7c:	add	r2, fp, #1
   12f80:	cmp	r9, r2
   12f84:	movhi	r1, #36	; 0x24
   12f88:	strbhi	r1, [r8, r2]
   12f8c:	add	r2, fp, #2
   12f90:	cmp	r9, r2
   12f94:	movhi	r1, #39	; 0x27
   12f98:	strbhi	r1, [r8, r2]
   12f9c:	add	r2, fp, #3
   12fa0:	cmp	r9, r2
   12fa4:	bls	13e84 <__assert_fail@plt+0x2f84>
   12fa8:	mov	r1, #92	; 0x5c
   12fac:	strb	r1, [r8, r2]
   12fb0:	add	fp, fp, #4
   12fb4:	str	r3, [sp, #36]	; 0x24
   12fb8:	mov	r5, #0
   12fbc:	mov	r4, #48	; 0x30
   12fc0:	b	13298 <__assert_fail@plt+0x2398>
   12fc4:	cmp	r9, fp
   12fc8:	bhi	12ff0 <__assert_fail@plt+0x20f0>
   12fcc:	add	r1, fp, #1
   12fd0:	ldr	r2, [sp, #56]	; 0x38
   12fd4:	cmp	r2, #0
   12fd8:	bne	13018 <__assert_fail@plt+0x2118>
   12fdc:	mov	r3, r5
   12fe0:	ldr	r5, [sp, #56]	; 0x38
   12fe4:	mov	fp, r1
   12fe8:	mov	r4, #48	; 0x30
   12fec:	b	1324c <__assert_fail@plt+0x234c>
   12ff0:	mov	r2, #92	; 0x5c
   12ff4:	strb	r2, [r8, fp]
   12ff8:	add	r1, fp, #1
   12ffc:	ldr	r2, [sp, #56]	; 0x38
   13000:	cmp	r2, #0
   13004:	moveq	r3, r5
   13008:	moveq	r5, r2
   1300c:	moveq	fp, r1
   13010:	moveq	r4, #48	; 0x30
   13014:	beq	13298 <__assert_fail@plt+0x2398>
   13018:	add	r2, r6, #1
   1301c:	ldr	r0, [sp, #24]
   13020:	cmp	r2, r0
   13024:	bcs	13040 <__assert_fail@plt+0x2140>
   13028:	ldr	r0, [sp, #48]	; 0x30
   1302c:	ldrb	r2, [r0, r2]
   13030:	sub	r2, r2, #48	; 0x30
   13034:	uxtb	r2, r2
   13038:	cmp	r2, #9
   1303c:	bls	13058 <__assert_fail@plt+0x2158>
   13040:	mov	r2, r3
   13044:	mov	r3, r5
   13048:	mov	r5, r2
   1304c:	mov	fp, r1
   13050:	mov	r4, #48	; 0x30
   13054:	b	13270 <__assert_fail@plt+0x2370>
   13058:	cmp	r9, r1
   1305c:	movhi	r2, #48	; 0x30
   13060:	strbhi	r2, [r8, r1]
   13064:	add	r2, fp, #2
   13068:	cmp	r9, r2
   1306c:	movhi	r1, #48	; 0x30
   13070:	strbhi	r1, [r8, r2]
   13074:	add	r1, fp, #3
   13078:	b	13040 <__assert_fail@plt+0x2140>
   1307c:	mov	r3, #0
   13080:	str	r3, [sp, #44]	; 0x2c
   13084:	cmp	sl, #2
   13088:	beq	130a4 <__assert_fail@plt+0x21a4>
   1308c:	cmp	sl, #5
   13090:	beq	130bc <__assert_fail@plt+0x21bc>
   13094:	mov	r5, #0
   13098:	mov	r3, r5
   1309c:	mov	r4, #63	; 0x3f
   130a0:	b	1324c <__assert_fail@plt+0x234c>
   130a4:	ldr	r3, [sp, #32]
   130a8:	cmp	r3, #0
   130ac:	bne	13dd4 <__assert_fail@plt+0x2ed4>
   130b0:	mov	r5, r3
   130b4:	mov	r4, #63	; 0x3f
   130b8:	b	137b4 <__assert_fail@plt+0x28b4>
   130bc:	ldr	r3, [sp, #156]	; 0x9c
   130c0:	tst	r3, #4
   130c4:	beq	13bec <__assert_fail@plt+0x2cec>
   130c8:	add	r2, r6, #2
   130cc:	ldr	r3, [sp, #24]
   130d0:	cmp	r2, r3
   130d4:	bcs	13bfc <__assert_fail@plt+0x2cfc>
   130d8:	ldr	r3, [sp, #48]	; 0x30
   130dc:	add	r3, r3, r6
   130e0:	ldrb	r4, [r3, #1]
   130e4:	cmp	r4, #63	; 0x3f
   130e8:	movne	r5, #0
   130ec:	movne	r3, r5
   130f0:	movne	r4, #63	; 0x3f
   130f4:	bne	1324c <__assert_fail@plt+0x234c>
   130f8:	ldr	r3, [sp, #48]	; 0x30
   130fc:	ldrb	r1, [r3, r2]
   13100:	sub	r3, r1, #33	; 0x21
   13104:	cmp	r3, #29
   13108:	ldrls	pc, [pc, r3, lsl #2]
   1310c:	b	13c0c <__assert_fail@plt+0x2d0c>
   13110:	andeq	r3, r1, r8, lsl #3
   13114:	andeq	r3, r1, ip, lsl #24
   13118:	andeq	r3, r1, ip, lsl #24
   1311c:	andeq	r3, r1, ip, lsl #24
   13120:	andeq	r3, r1, ip, lsl #24
   13124:	andeq	r3, r1, ip, lsl #24
   13128:	andeq	r3, r1, r8, lsl #3
   1312c:	andeq	r3, r1, r8, lsl #3
   13130:	andeq	r3, r1, r8, lsl #3
   13134:	andeq	r3, r1, ip, lsl #24
   13138:	andeq	r3, r1, ip, lsl #24
   1313c:	andeq	r3, r1, ip, lsl #24
   13140:	andeq	r3, r1, r8, lsl #3
   13144:	andeq	r3, r1, ip, lsl #24
   13148:	andeq	r3, r1, r8, lsl #3
   1314c:	andeq	r3, r1, ip, lsl #24
   13150:	andeq	r3, r1, ip, lsl #24
   13154:	andeq	r3, r1, ip, lsl #24
   13158:	andeq	r3, r1, ip, lsl #24
   1315c:	andeq	r3, r1, ip, lsl #24
   13160:	andeq	r3, r1, ip, lsl #24
   13164:	andeq	r3, r1, ip, lsl #24
   13168:	andeq	r3, r1, ip, lsl #24
   1316c:	andeq	r3, r1, ip, lsl #24
   13170:	andeq	r3, r1, ip, lsl #24
   13174:	andeq	r3, r1, ip, lsl #24
   13178:	andeq	r3, r1, ip, lsl #24
   1317c:	andeq	r3, r1, r8, lsl #3
   13180:	andeq	r3, r1, r8, lsl #3
   13184:	andeq	r3, r1, r8, lsl #3
   13188:	ldr	r3, [sp, #32]
   1318c:	cmp	r3, #0
   13190:	bne	13e78 <__assert_fail@plt+0x2f78>
   13194:	cmp	r9, fp
   13198:	movhi	r3, #63	; 0x3f
   1319c:	strbhi	r3, [r8, fp]
   131a0:	add	r3, fp, #1
   131a4:	cmp	r9, r3
   131a8:	movhi	r0, #34	; 0x22
   131ac:	strbhi	r0, [r8, r3]
   131b0:	add	r3, fp, #2
   131b4:	cmp	r9, r3
   131b8:	movhi	r0, #34	; 0x22
   131bc:	strbhi	r0, [r8, r3]
   131c0:	add	r3, fp, #3
   131c4:	cmp	r9, r3
   131c8:	movhi	r0, #63	; 0x3f
   131cc:	strbhi	r0, [r8, r3]
   131d0:	add	fp, fp, #4
   131d4:	ldr	r3, [sp, #32]
   131d8:	mov	r5, r3
   131dc:	mov	r4, r1
   131e0:	mov	r6, r2
   131e4:	b	1324c <__assert_fail@plt+0x234c>
   131e8:	mov	r3, #0
   131ec:	str	r3, [sp, #44]	; 0x2c
   131f0:	mov	r4, #8
   131f4:	mov	r3, #98	; 0x62
   131f8:	b	13238 <__assert_fail@plt+0x2338>
   131fc:	mov	r3, #0
   13200:	str	r3, [sp, #44]	; 0x2c
   13204:	mov	r4, #12
   13208:	mov	r3, #102	; 0x66
   1320c:	b	13238 <__assert_fail@plt+0x2338>
   13210:	mov	r3, #0
   13214:	str	r3, [sp, #44]	; 0x2c
   13218:	mov	r4, #13
   1321c:	mov	r3, #114	; 0x72
   13220:	ldr	r2, [sp, #32]
   13224:	cmp	sl, #2
   13228:	movne	r2, #0
   1322c:	andeq	r2, r2, #1
   13230:	cmp	r2, #0
   13234:	bne	13658 <__assert_fail@plt+0x2758>
   13238:	ldr	r2, [sp, #28]
   1323c:	cmp	r2, #0
   13240:	bne	13c40 <__assert_fail@plt+0x2d40>
   13244:	mov	r5, r2
   13248:	mov	r3, r2
   1324c:	ldr	r2, [sp, #28]
   13250:	eor	r2, r2, #1
   13254:	cmp	sl, #2
   13258:	orreq	r2, r2, #1
   1325c:	eor	r2, r2, #1
   13260:	ldr	r1, [sp, #32]
   13264:	orr	r2, r1, r2
   13268:	tst	r2, #255	; 0xff
   1326c:	beq	13298 <__assert_fail@plt+0x2398>
   13270:	ldr	r2, [sp, #160]	; 0xa0
   13274:	cmp	r2, #0
   13278:	beq	13298 <__assert_fail@plt+0x2398>
   1327c:	ubfx	r1, r4, #5, #8
   13280:	and	r2, r4, #31
   13284:	ldr	r0, [sp, #160]	; 0xa0
   13288:	ldr	r1, [r0, r1, lsl #2]
   1328c:	lsr	r2, r1, r2
   13290:	tst	r2, #1
   13294:	bne	132a4 <__assert_fail@plt+0x23a4>
   13298:	ldr	r2, [sp, #44]	; 0x2c
   1329c:	cmp	r2, #0
   132a0:	beq	135f8 <__assert_fail@plt+0x26f8>
   132a4:	ldr	r3, [sp, #32]
   132a8:	cmp	r3, #0
   132ac:	bne	13df8 <__assert_fail@plt+0x2ef8>
   132b0:	ldr	r3, [sp, #36]	; 0x24
   132b4:	eor	r3, r3, #1
   132b8:	cmp	sl, #2
   132bc:	movne	r3, #0
   132c0:	andeq	r3, r3, #1
   132c4:	cmp	r3, #0
   132c8:	beq	13300 <__assert_fail@plt+0x2400>
   132cc:	cmp	r9, fp
   132d0:	movhi	r2, #39	; 0x27
   132d4:	strbhi	r2, [r8, fp]
   132d8:	add	r2, fp, #1
   132dc:	cmp	r9, r2
   132e0:	movhi	r1, #36	; 0x24
   132e4:	strbhi	r1, [r8, r2]
   132e8:	add	r2, fp, #2
   132ec:	cmp	r9, r2
   132f0:	movhi	r1, #39	; 0x27
   132f4:	strbhi	r1, [r8, r2]
   132f8:	add	fp, fp, #3
   132fc:	str	r3, [sp, #36]	; 0x24
   13300:	cmp	r9, fp
   13304:	movhi	r3, #92	; 0x5c
   13308:	strbhi	r3, [r8, fp]
   1330c:	add	fp, fp, #1
   13310:	cmp	fp, r9
   13314:	strbcc	r4, [r8, fp]
   13318:	add	fp, fp, #1
   1331c:	cmp	r5, #0
   13320:	ldr	r3, [sp, #40]	; 0x28
   13324:	moveq	r3, r5
   13328:	str	r3, [sp, #40]	; 0x28
   1332c:	add	r6, r6, #1
   13330:	ldr	r3, [sp, #24]
   13334:	cmn	r3, #1
   13338:	beq	13c68 <__assert_fail@plt+0x2d68>
   1333c:	ldr	r3, [sp, #24]
   13340:	subs	r5, r3, r6
   13344:	movne	r5, #1
   13348:	cmp	r5, #0
   1334c:	beq	13c7c <__assert_fail@plt+0x2d7c>
   13350:	ldr	r3, [sp, #28]
   13354:	cmp	sl, #2
   13358:	moveq	r3, #0
   1335c:	andne	r3, r3, #1
   13360:	str	r3, [sp, #56]	; 0x38
   13364:	ldr	r2, [sp, #52]	; 0x34
   13368:	adds	r7, r2, #0
   1336c:	movne	r7, #1
   13370:	ands	r3, r3, r7
   13374:	str	r3, [sp, #44]	; 0x2c
   13378:	bne	12c98 <__assert_fail@plt+0x1d98>
   1337c:	ldr	r3, [sp, #48]	; 0x30
   13380:	ldrb	r4, [r3, r6]
   13384:	cmp	r4, #126	; 0x7e
   13388:	ldrls	pc, [pc, r4, lsl #2]
   1338c:	b	137c4 <__assert_fail@plt+0x28c4>
   13390:	andeq	r2, r1, ip, lsl pc
   13394:	andeq	r3, r1, r4, asr #15
   13398:	andeq	r3, r1, r4, asr #15
   1339c:	andeq	r3, r1, r4, asr #15
   133a0:	andeq	r3, r1, r4, asr #15
   133a4:	andeq	r3, r1, r4, asr #15
   133a8:	andeq	r3, r1, r4, asr #15
   133ac:	andeq	r3, r1, r4, ror #12
   133b0:	strdeq	r3, [r1], -r0
   133b4:	muleq	r1, r4, r5
   133b8:	andeq	r3, r1, r8, lsr r6
   133bc:	andeq	r3, r1, r8, lsr #11
   133c0:	andeq	r3, r1, r4, lsl #4
   133c4:	andeq	r3, r1, r8, lsl r2
   133c8:	andeq	r3, r1, r4, asr #15
   133cc:	andeq	r3, r1, r4, asr #15
   133d0:	andeq	r3, r1, r4, asr #15
   133d4:	andeq	r3, r1, r4, asr #15
   133d8:	andeq	r3, r1, r4, asr #15
   133dc:	andeq	r3, r1, r4, asr #15
   133e0:	andeq	r3, r1, r4, asr #15
   133e4:	andeq	r3, r1, r4, asr #15
   133e8:	andeq	r3, r1, r4, asr #15
   133ec:	andeq	r3, r1, r4, asr #15
   133f0:	andeq	r3, r1, r4, asr #15
   133f4:	andeq	r3, r1, r4, asr #15
   133f8:	andeq	r3, r1, r4, asr #15
   133fc:	andeq	r3, r1, r4, asr #15
   13400:	andeq	r3, r1, r4, asr #15
   13404:	andeq	r3, r1, r4, asr #15
   13408:	andeq	r3, r1, r4, asr #15
   1340c:	andeq	r3, r1, r4, asr #15
   13410:	andeq	r3, r1, r0, ror #13
   13414:	ldrdeq	r3, [r1], -ip
   13418:	ldrdeq	r3, [r1], -ip
   1341c:	muleq	r1, ip, r6
   13420:	ldrdeq	r3, [r1], -ip
   13424:	andeq	r3, r1, r4, ror #23
   13428:	ldrdeq	r3, [r1], -ip
   1342c:	andeq	r3, r1, r4, lsr #14
   13430:	ldrdeq	r3, [r1], -ip
   13434:	ldrdeq	r3, [r1], -ip
   13438:	ldrdeq	r3, [r1], -ip
   1343c:	andeq	r3, r1, r4, ror #23
   13440:	andeq	r3, r1, r4, ror #23
   13444:	andeq	r3, r1, r4, ror #23
   13448:	andeq	r3, r1, r4, ror #23
   1344c:	andeq	r3, r1, r4, ror #23
   13450:	andeq	r3, r1, r4, ror #23
   13454:	andeq	r3, r1, r4, ror #23
   13458:	andeq	r3, r1, r4, ror #23
   1345c:	andeq	r3, r1, r4, ror #23
   13460:	andeq	r3, r1, r4, ror #23
   13464:	andeq	r3, r1, r4, ror #23
   13468:	andeq	r3, r1, r4, ror #23
   1346c:	andeq	r3, r1, r4, ror #23
   13470:	andeq	r3, r1, r4, ror #23
   13474:	andeq	r3, r1, r4, ror #23
   13478:	andeq	r3, r1, r4, ror #23
   1347c:	ldrdeq	r3, [r1], -ip
   13480:	ldrdeq	r3, [r1], -ip
   13484:	ldrdeq	r3, [r1], -ip
   13488:	ldrdeq	r3, [r1], -ip
   1348c:	andeq	r3, r1, r4, lsl #1
   13490:	andeq	r3, r1, r4, asr #15
   13494:	andeq	r3, r1, r4, ror #23
   13498:	andeq	r3, r1, r4, ror #23
   1349c:	andeq	r3, r1, r4, ror #23
   134a0:	andeq	r3, r1, r4, ror #23
   134a4:	andeq	r3, r1, r4, ror #23
   134a8:	andeq	r3, r1, r4, ror #23
   134ac:	andeq	r3, r1, r4, ror #23
   134b0:	andeq	r3, r1, r4, ror #23
   134b4:	andeq	r3, r1, r4, ror #23
   134b8:	andeq	r3, r1, r4, ror #23
   134bc:	andeq	r3, r1, r4, ror #23
   134c0:	andeq	r3, r1, r4, ror #23
   134c4:	andeq	r3, r1, r4, ror #23
   134c8:	andeq	r3, r1, r4, ror #23
   134cc:	andeq	r3, r1, r4, ror #23
   134d0:	andeq	r3, r1, r4, ror #23
   134d4:	andeq	r3, r1, r4, ror #23
   134d8:	andeq	r3, r1, r4, ror #23
   134dc:	andeq	r3, r1, r4, ror #23
   134e0:	andeq	r3, r1, r4, ror #23
   134e4:	andeq	r3, r1, r4, ror #23
   134e8:	andeq	r3, r1, r4, ror #23
   134ec:	andeq	r3, r1, r4, ror #23
   134f0:	andeq	r3, r1, r4, ror #23
   134f4:	andeq	r3, r1, r4, ror #23
   134f8:	andeq	r3, r1, r4, ror #23
   134fc:	ldrdeq	r3, [r1], -ip
   13500:			; <UNDEFINED> instruction: 0x000135bc
   13504:	andeq	r3, r1, r4, ror #23
   13508:	ldrdeq	r3, [r1], -ip
   1350c:	andeq	r3, r1, r4, ror #23
   13510:	ldrdeq	r3, [r1], -ip
   13514:	andeq	r3, r1, r4, ror #23
   13518:	andeq	r3, r1, r4, ror #23
   1351c:	andeq	r3, r1, r4, ror #23
   13520:	andeq	r3, r1, r4, ror #23
   13524:	andeq	r3, r1, r4, ror #23
   13528:	andeq	r3, r1, r4, ror #23
   1352c:	andeq	r3, r1, r4, ror #23
   13530:	andeq	r3, r1, r4, ror #23
   13534:	andeq	r3, r1, r4, ror #23
   13538:	andeq	r3, r1, r4, ror #23
   1353c:	andeq	r3, r1, r4, ror #23
   13540:	andeq	r3, r1, r4, ror #23
   13544:	andeq	r3, r1, r4, ror #23
   13548:	andeq	r3, r1, r4, ror #23
   1354c:	andeq	r3, r1, r4, ror #23
   13550:	andeq	r3, r1, r4, ror #23
   13554:	andeq	r3, r1, r4, ror #23
   13558:	andeq	r3, r1, r4, ror #23
   1355c:	andeq	r3, r1, r4, ror #23
   13560:	andeq	r3, r1, r4, ror #23
   13564:	andeq	r3, r1, r4, ror #23
   13568:	andeq	r3, r1, r4, ror #23
   1356c:	andeq	r3, r1, r4, ror #23
   13570:	andeq	r3, r1, r4, ror #23
   13574:	andeq	r3, r1, r4, ror #23
   13578:	andeq	r3, r1, r4, ror #23
   1357c:	andeq	r3, r1, ip, ror r6
   13580:	ldrdeq	r3, [r1], -ip
   13584:	andeq	r3, r1, ip, ror r6
   13588:	muleq	r1, ip, r6
   1358c:	mov	r3, #0
   13590:	str	r3, [sp, #44]	; 0x2c
   13594:	mov	r4, #9
   13598:	mov	r3, #116	; 0x74
   1359c:	b	13220 <__assert_fail@plt+0x2320>
   135a0:	mov	r3, #0
   135a4:	str	r3, [sp, #44]	; 0x2c
   135a8:	mov	r4, #11
   135ac:	mov	r3, #118	; 0x76
   135b0:	b	13238 <__assert_fail@plt+0x2338>
   135b4:	mov	r3, #0
   135b8:	str	r3, [sp, #44]	; 0x2c
   135bc:	cmp	sl, #2
   135c0:	beq	135e4 <__assert_fail@plt+0x26e4>
   135c4:	ldr	r3, [sp, #28]
   135c8:	ldr	r2, [sp, #32]
   135cc:	and	r3, r3, r2
   135d0:	tst	r7, r3
   135d4:	bne	13c58 <__assert_fail@plt+0x2d58>
   135d8:	mov	r4, #92	; 0x5c
   135dc:	mov	r3, r4
   135e0:	b	13238 <__assert_fail@plt+0x2338>
   135e4:	ldr	r3, [sp, #32]
   135e8:	cmp	r3, #0
   135ec:	bne	13de0 <__assert_fail@plt+0x2ee0>
   135f0:	mov	r5, r3
   135f4:	mov	r4, #92	; 0x5c
   135f8:	eor	r3, r3, #1
   135fc:	ldr	r2, [sp, #36]	; 0x24
   13600:	and	r3, r3, r2
   13604:	tst	r3, #255	; 0xff
   13608:	beq	13310 <__assert_fail@plt+0x2410>
   1360c:	cmp	r9, fp
   13610:	movhi	r3, #39	; 0x27
   13614:	strbhi	r3, [r8, fp]
   13618:	add	r3, fp, #1
   1361c:	cmp	r9, r3
   13620:	movhi	r2, #39	; 0x27
   13624:	strbhi	r2, [r8, r3]
   13628:	add	fp, fp, #2
   1362c:	mov	r3, #0
   13630:	str	r3, [sp, #36]	; 0x24
   13634:	b	13310 <__assert_fail@plt+0x2410>
   13638:	mov	r3, #110	; 0x6e
   1363c:	b	13220 <__assert_fail@plt+0x2320>
   13640:	mov	r3, #110	; 0x6e
   13644:	b	13220 <__assert_fail@plt+0x2320>
   13648:	mov	r3, #0
   1364c:	str	r3, [sp, #44]	; 0x2c
   13650:	mov	r3, #110	; 0x6e
   13654:	b	13220 <__assert_fail@plt+0x2320>
   13658:	mov	r8, r9
   1365c:	mov	r7, #2
   13660:	b	13e00 <__assert_fail@plt+0x2f00>
   13664:	mov	r3, #97	; 0x61
   13668:	b	13238 <__assert_fail@plt+0x2338>
   1366c:	mov	r3, #97	; 0x61
   13670:	b	13238 <__assert_fail@plt+0x2338>
   13674:	mov	r3, #0
   13678:	str	r3, [sp, #44]	; 0x2c
   1367c:	ldr	r3, [sp, #24]
   13680:	cmn	r3, #1
   13684:	beq	136b0 <__assert_fail@plt+0x27b0>
   13688:	ldr	r3, [sp, #24]
   1368c:	subs	r3, r3, #1
   13690:	movne	r3, #1
   13694:	cmp	r3, #0
   13698:	bne	13c18 <__assert_fail@plt+0x2d18>
   1369c:	cmp	r6, #0
   136a0:	beq	136e0 <__assert_fail@plt+0x27e0>
   136a4:	mov	r5, #0
   136a8:	mov	r3, r5
   136ac:	b	1324c <__assert_fail@plt+0x234c>
   136b0:	ldr	r3, [sp, #48]	; 0x30
   136b4:	ldrb	r3, [r3, #1]
   136b8:	adds	r3, r3, #0
   136bc:	movne	r3, #1
   136c0:	b	13694 <__assert_fail@plt+0x2794>
   136c4:	mov	r3, #0
   136c8:	str	r3, [sp, #44]	; 0x2c
   136cc:	b	1369c <__assert_fail@plt+0x279c>
   136d0:	mov	r3, #0
   136d4:	str	r3, [sp, #44]	; 0x2c
   136d8:	b	136e0 <__assert_fail@plt+0x27e0>
   136dc:	ldr	r5, [sp, #44]	; 0x2c
   136e0:	ldr	r3, [sp, #32]
   136e4:	cmp	sl, #2
   136e8:	movne	r3, #0
   136ec:	andeq	r3, r3, #1
   136f0:	cmp	r3, #0
   136f4:	beq	1324c <__assert_fail@plt+0x234c>
   136f8:	mov	r8, r9
   136fc:	mov	r7, #2
   13700:	b	13e00 <__assert_fail@plt+0x2f00>
   13704:	ldr	r5, [sp, #32]
   13708:	b	136e0 <__assert_fail@plt+0x27e0>
   1370c:	mov	r3, #0
   13710:	str	r3, [sp, #44]	; 0x2c
   13714:	mov	r5, r3
   13718:	b	136e0 <__assert_fail@plt+0x27e0>
   1371c:	mov	r3, #0
   13720:	str	r3, [sp, #44]	; 0x2c
   13724:	cmp	sl, #2
   13728:	strne	r5, [sp, #68]	; 0x44
   1372c:	movne	r3, #0
   13730:	movne	r4, #39	; 0x27
   13734:	bne	1324c <__assert_fail@plt+0x234c>
   13738:	ldr	r3, [sp, #32]
   1373c:	cmp	r3, #0
   13740:	bne	13dec <__assert_fail@plt+0x2eec>
   13744:	ldr	r3, [sp, #72]	; 0x48
   13748:	clz	r3, r3
   1374c:	lsr	r3, r3, #5
   13750:	cmp	r9, #0
   13754:	moveq	r3, #0
   13758:	cmp	r3, #0
   1375c:	movne	r3, #0
   13760:	bne	13788 <__assert_fail@plt+0x2888>
   13764:	cmp	r9, fp
   13768:	movhi	r3, #39	; 0x27
   1376c:	strbhi	r3, [r8, fp]
   13770:	add	r3, fp, #1
   13774:	cmp	r9, r3
   13778:	movhi	r2, #92	; 0x5c
   1377c:	strbhi	r2, [r8, r3]
   13780:	mov	r3, r9
   13784:	ldr	r9, [sp, #72]	; 0x48
   13788:	add	r2, fp, #2
   1378c:	cmp	r2, r3
   13790:	movcc	r1, #39	; 0x27
   13794:	strbcc	r1, [r8, r2]
   13798:	add	fp, fp, #3
   1379c:	str	r5, [sp, #68]	; 0x44
   137a0:	ldr	r2, [sp, #32]
   137a4:	str	r2, [sp, #36]	; 0x24
   137a8:	str	r9, [sp, #72]	; 0x48
   137ac:	mov	r9, r3
   137b0:	mov	r4, #39	; 0x27
   137b4:	mov	r3, #0
   137b8:	b	13298 <__assert_fail@plt+0x2398>
   137bc:	mov	r3, #0
   137c0:	str	r3, [sp, #44]	; 0x2c
   137c4:	ldr	r7, [sp, #76]	; 0x4c
   137c8:	cmp	r7, #1
   137cc:	bne	13804 <__assert_fail@plt+0x2904>
   137d0:	bl	10dec <__ctype_b_loc@plt>
   137d4:	ldr	r2, [r0]
   137d8:	lsl	r3, r4, #1
   137dc:	ldrh	r5, [r2, r3]
   137e0:	ubfx	r5, r5, #14, #1
   137e4:	mov	ip, r7
   137e8:	eor	r3, r5, #1
   137ec:	ldr	r2, [sp, #28]
   137f0:	and	r3, r3, r2
   137f4:	ands	r3, r3, #255	; 0xff
   137f8:	beq	1324c <__assert_fail@plt+0x234c>
   137fc:	mov	r5, #0
   13800:	b	13a60 <__assert_fail@plt+0x2b60>
   13804:	mov	r2, #0
   13808:	mov	r3, #0
   1380c:	strd	r2, [sp, #104]	; 0x68
   13810:	ldr	r3, [sp, #24]
   13814:	cmn	r3, #1
   13818:	beq	1383c <__assert_fail@plt+0x293c>
   1381c:	mov	r3, #0
   13820:	str	r4, [sp, #88]	; 0x58
   13824:	str	fp, [sp, #92]	; 0x5c
   13828:	str	r8, [sp, #56]	; 0x38
   1382c:	mov	r8, r3
   13830:	str	r9, [sp, #84]	; 0x54
   13834:	ldr	r9, [sp, #48]	; 0x30
   13838:	b	13988 <__assert_fail@plt+0x2a88>
   1383c:	ldr	r0, [sp, #48]	; 0x30
   13840:	bl	10e04 <strlen@plt>
   13844:	str	r0, [sp, #24]
   13848:	b	1381c <__assert_fail@plt+0x291c>
   1384c:	mov	r1, fp
   13850:	ldr	r4, [sp, #88]	; 0x58
   13854:	mov	r2, r8
   13858:	mov	ip, r8
   1385c:	ldr	fp, [sp, #92]	; 0x5c
   13860:	ldr	r8, [sp, #56]	; 0x38
   13864:	ldr	r9, [sp, #84]	; 0x54
   13868:	ldr	r0, [sp, #24]
   1386c:	cmp	r7, r0
   13870:	bcs	13a28 <__assert_fail@plt+0x2b28>
   13874:	ldrb	r3, [r1]
   13878:	cmp	r3, #0
   1387c:	beq	13a30 <__assert_fail@plt+0x2b30>
   13880:	mov	r3, r1
   13884:	add	r2, r2, #1
   13888:	add	r1, r6, r2
   1388c:	cmp	r0, r1
   13890:	bls	13a38 <__assert_fail@plt+0x2b38>
   13894:	ldrb	r1, [r3, #1]!
   13898:	cmp	r1, #0
   1389c:	bne	13884 <__assert_fail@plt+0x2984>
   138a0:	mov	ip, r2
   138a4:	mov	r5, #0
   138a8:	b	13a58 <__assert_fail@plt+0x2b58>
   138ac:	ldr	r3, [sp, #56]	; 0x38
   138b0:	str	r3, [sp, #64]	; 0x40
   138b4:	ldr	r8, [sp, #84]	; 0x54
   138b8:	mov	r7, #2
   138bc:	b	13e00 <__assert_fail@plt+0x2f00>
   138c0:	cmp	r2, r7
   138c4:	beq	13964 <__assert_fail@plt+0x2a64>
   138c8:	ldrb	r3, [r2], #1
   138cc:	sub	r3, r3, #91	; 0x5b
   138d0:	cmp	r3, #33	; 0x21
   138d4:	ldrls	pc, [pc, r3, lsl #2]
   138d8:	b	138c0 <__assert_fail@plt+0x29c0>
   138dc:	andeq	r3, r1, ip, lsr #17
   138e0:	andeq	r3, r1, ip, lsr #17
   138e4:	andeq	r3, r1, r0, asr #17
   138e8:	andeq	r3, r1, ip, lsr #17
   138ec:	andeq	r3, r1, r0, asr #17
   138f0:	andeq	r3, r1, ip, lsr #17
   138f4:	andeq	r3, r1, r0, asr #17
   138f8:	andeq	r3, r1, r0, asr #17
   138fc:	andeq	r3, r1, r0, asr #17
   13900:	andeq	r3, r1, r0, asr #17
   13904:	andeq	r3, r1, r0, asr #17
   13908:	andeq	r3, r1, r0, asr #17
   1390c:	andeq	r3, r1, r0, asr #17
   13910:	andeq	r3, r1, r0, asr #17
   13914:	andeq	r3, r1, r0, asr #17
   13918:	andeq	r3, r1, r0, asr #17
   1391c:	andeq	r3, r1, r0, asr #17
   13920:	andeq	r3, r1, r0, asr #17
   13924:	andeq	r3, r1, r0, asr #17
   13928:	andeq	r3, r1, r0, asr #17
   1392c:	andeq	r3, r1, r0, asr #17
   13930:	andeq	r3, r1, r0, asr #17
   13934:	andeq	r3, r1, r0, asr #17
   13938:	andeq	r3, r1, r0, asr #17
   1393c:	andeq	r3, r1, r0, asr #17
   13940:	andeq	r3, r1, r0, asr #17
   13944:	andeq	r3, r1, r0, asr #17
   13948:	andeq	r3, r1, r0, asr #17
   1394c:	andeq	r3, r1, r0, asr #17
   13950:	andeq	r3, r1, r0, asr #17
   13954:	andeq	r3, r1, r0, asr #17
   13958:	andeq	r3, r1, r0, asr #17
   1395c:	andeq	r3, r1, r0, asr #17
   13960:	andeq	r3, r1, ip, lsr #17
   13964:	ldr	r0, [sp, #100]	; 0x64
   13968:	bl	10d5c <iswprint@plt>
   1396c:	cmp	r0, #0
   13970:	moveq	r5, #0
   13974:	add	r8, r8, r4
   13978:	add	r0, sp, #104	; 0x68
   1397c:	bl	10d08 <mbsinit@plt>
   13980:	cmp	r0, #0
   13984:	bne	139f4 <__assert_fail@plt+0x2af4>
   13988:	add	r7, r6, r8
   1398c:	add	fp, r9, r7
   13990:	add	r3, sp, #104	; 0x68
   13994:	ldr	r2, [sp, #24]
   13998:	sub	r2, r2, r7
   1399c:	mov	r1, fp
   139a0:	add	r0, sp, #100	; 0x64
   139a4:	bl	15e8c <__assert_fail@plt+0x4f8c>
   139a8:	subs	r4, r0, #0
   139ac:	beq	13a44 <__assert_fail@plt+0x2b44>
   139b0:	cmn	r4, #1
   139b4:	beq	13a0c <__assert_fail@plt+0x2b0c>
   139b8:	cmn	r4, #2
   139bc:	beq	1384c <__assert_fail@plt+0x294c>
   139c0:	ldr	r3, [sp, #32]
   139c4:	cmp	sl, #2
   139c8:	movne	r3, #0
   139cc:	andeq	r3, r3, #1
   139d0:	cmp	r3, #0
   139d4:	beq	13964 <__assert_fail@plt+0x2a64>
   139d8:	cmp	r4, #1
   139dc:	bls	13964 <__assert_fail@plt+0x2a64>
   139e0:	add	r2, r7, #1
   139e4:	add	r2, r9, r2
   139e8:	add	r3, r9, r4
   139ec:	add	r7, r3, r7
   139f0:	b	138c8 <__assert_fail@plt+0x29c8>
   139f4:	ldr	r4, [sp, #88]	; 0x58
   139f8:	mov	ip, r8
   139fc:	ldr	fp, [sp, #92]	; 0x5c
   13a00:	ldr	r8, [sp, #56]	; 0x38
   13a04:	ldr	r9, [sp, #84]	; 0x54
   13a08:	b	13a58 <__assert_fail@plt+0x2b58>
   13a0c:	ldr	r4, [sp, #88]	; 0x58
   13a10:	mov	ip, r8
   13a14:	ldr	fp, [sp, #92]	; 0x5c
   13a18:	ldr	r8, [sp, #56]	; 0x38
   13a1c:	ldr	r9, [sp, #84]	; 0x54
   13a20:	mov	r5, #0
   13a24:	b	13a58 <__assert_fail@plt+0x2b58>
   13a28:	mov	r5, #0
   13a2c:	b	13a58 <__assert_fail@plt+0x2b58>
   13a30:	mov	r5, #0
   13a34:	b	13a58 <__assert_fail@plt+0x2b58>
   13a38:	mov	ip, r2
   13a3c:	mov	r5, #0
   13a40:	b	13a58 <__assert_fail@plt+0x2b58>
   13a44:	ldr	r4, [sp, #88]	; 0x58
   13a48:	mov	ip, r8
   13a4c:	ldr	fp, [sp, #92]	; 0x5c
   13a50:	ldr	r8, [sp, #56]	; 0x38
   13a54:	ldr	r9, [sp, #84]	; 0x54
   13a58:	cmp	ip, #1
   13a5c:	bls	137e8 <__assert_fail@plt+0x28e8>
   13a60:	add	lr, r6, ip
   13a64:	ldr	r3, [sp, #48]	; 0x30
   13a68:	add	r1, r3, r6
   13a6c:	mov	r3, #0
   13a70:	eor	r0, r5, #1
   13a74:	ldr	r2, [sp, #28]
   13a78:	and	r0, r0, r2
   13a7c:	uxtb	r0, r0
   13a80:	str	r0, [sp, #56]	; 0x38
   13a84:	mov	r7, #92	; 0x5c
   13a88:	ldr	ip, [sp, #36]	; 0x24
   13a8c:	str	r5, [sp, #84]	; 0x54
   13a90:	ldr	r2, [sp, #44]	; 0x2c
   13a94:	b	13b04 <__assert_fail@plt+0x2c04>
   13a98:	cmp	r2, #0
   13a9c:	beq	13aac <__assert_fail@plt+0x2bac>
   13aa0:	cmp	r9, fp
   13aa4:	strbhi	r7, [r8, fp]
   13aa8:	add	fp, fp, #1
   13aac:	add	r5, r6, #1
   13ab0:	cmp	r5, lr
   13ab4:	bcs	13bc0 <__assert_fail@plt+0x2cc0>
   13ab8:	eor	r2, r3, #1
   13abc:	and	r2, r2, ip
   13ac0:	ands	r2, r2, #255	; 0xff
   13ac4:	beq	13bdc <__assert_fail@plt+0x2cdc>
   13ac8:	cmp	r9, fp
   13acc:	movhi	r2, #39	; 0x27
   13ad0:	strbhi	r2, [r8, fp]
   13ad4:	add	r2, fp, #1
   13ad8:	cmp	r9, r2
   13adc:	movhi	ip, #39	; 0x27
   13ae0:	strbhi	ip, [r8, r2]
   13ae4:	add	fp, fp, #2
   13ae8:	ldr	ip, [sp, #56]	; 0x38
   13aec:	mov	r2, ip
   13af0:	mov	r6, r5
   13af4:	cmp	r9, fp
   13af8:	strbhi	r4, [r8, fp]
   13afc:	add	fp, fp, #1
   13b00:	ldrb	r4, [r1, #1]!
   13b04:	cmp	r0, #0
   13b08:	beq	13a98 <__assert_fail@plt+0x2b98>
   13b0c:	ldr	r3, [sp, #32]
   13b10:	cmp	r3, #0
   13b14:	bne	13da8 <__assert_fail@plt+0x2ea8>
   13b18:	eor	r3, ip, #1
   13b1c:	cmp	sl, #2
   13b20:	movne	r3, #0
   13b24:	andeq	r3, r3, #1
   13b28:	cmp	r3, #0
   13b2c:	beq	13b64 <__assert_fail@plt+0x2c64>
   13b30:	cmp	r9, fp
   13b34:	movhi	ip, #39	; 0x27
   13b38:	strbhi	ip, [r8, fp]
   13b3c:	add	ip, fp, #1
   13b40:	cmp	r9, ip
   13b44:	movhi	r5, #36	; 0x24
   13b48:	strbhi	r5, [r8, ip]
   13b4c:	add	ip, fp, #2
   13b50:	cmp	r9, ip
   13b54:	movhi	r5, #39	; 0x27
   13b58:	strbhi	r5, [r8, ip]
   13b5c:	add	fp, fp, #3
   13b60:	mov	ip, r3
   13b64:	cmp	r9, fp
   13b68:	strbhi	r7, [r8, fp]
   13b6c:	add	r3, fp, #1
   13b70:	cmp	r9, r3
   13b74:	bls	13b84 <__assert_fail@plt+0x2c84>
   13b78:	lsr	r5, r4, #6
   13b7c:	add	r5, r5, #48	; 0x30
   13b80:	strb	r5, [r8, r3]
   13b84:	add	r3, fp, #2
   13b88:	cmp	r9, r3
   13b8c:	bls	13b9c <__assert_fail@plt+0x2c9c>
   13b90:	ubfx	r5, r4, #3, #3
   13b94:	add	r5, r5, #48	; 0x30
   13b98:	strb	r5, [r8, r3]
   13b9c:	add	fp, fp, #3
   13ba0:	and	r4, r4, #7
   13ba4:	add	r4, r4, #48	; 0x30
   13ba8:	add	r5, r6, #1
   13bac:	cmp	r5, lr
   13bb0:	bcs	13bcc <__assert_fail@plt+0x2ccc>
   13bb4:	ldr	r3, [sp, #56]	; 0x38
   13bb8:	mov	r6, r5
   13bbc:	b	13af4 <__assert_fail@plt+0x2bf4>
   13bc0:	str	ip, [sp, #36]	; 0x24
   13bc4:	ldr	r5, [sp, #84]	; 0x54
   13bc8:	b	135f8 <__assert_fail@plt+0x26f8>
   13bcc:	str	ip, [sp, #36]	; 0x24
   13bd0:	ldr	r5, [sp, #84]	; 0x54
   13bd4:	mov	r3, r0
   13bd8:	b	135f8 <__assert_fail@plt+0x26f8>
   13bdc:	mov	r6, r5
   13be0:	b	13af4 <__assert_fail@plt+0x2bf4>
   13be4:	ldr	r3, [sp, #44]	; 0x2c
   13be8:	b	1324c <__assert_fail@plt+0x234c>
   13bec:	mov	r5, #0
   13bf0:	mov	r3, r5
   13bf4:	mov	r4, #63	; 0x3f
   13bf8:	b	1324c <__assert_fail@plt+0x234c>
   13bfc:	mov	r5, #0
   13c00:	mov	r3, r5
   13c04:	mov	r4, #63	; 0x3f
   13c08:	b	1324c <__assert_fail@plt+0x234c>
   13c0c:	mov	r5, #0
   13c10:	mov	r3, r5
   13c14:	b	1324c <__assert_fail@plt+0x234c>
   13c18:	mov	r5, #0
   13c1c:	mov	r3, r5
   13c20:	b	1324c <__assert_fail@plt+0x234c>
   13c24:	ldr	r5, [sp, #44]	; 0x2c
   13c28:	ldr	r3, [sp, #32]
   13c2c:	b	1324c <__assert_fail@plt+0x234c>
   13c30:	ldr	r5, [sp, #44]	; 0x2c
   13c34:	mov	r3, #0
   13c38:	str	r3, [sp, #44]	; 0x2c
   13c3c:	b	1324c <__assert_fail@plt+0x234c>
   13c40:	mov	r4, r3
   13c44:	mov	r5, #0
   13c48:	b	132a4 <__assert_fail@plt+0x23a4>
   13c4c:	mov	r5, #0
   13c50:	mov	r4, #97	; 0x61
   13c54:	b	132a4 <__assert_fail@plt+0x23a4>
   13c58:	mov	r5, #0
   13c5c:	mov	r3, r5
   13c60:	mov	r4, #92	; 0x5c
   13c64:	b	135f8 <__assert_fail@plt+0x26f8>
   13c68:	ldr	r3, [sp, #48]	; 0x30
   13c6c:	ldrb	r5, [r3, r6]
   13c70:	adds	r5, r5, #0
   13c74:	movne	r5, #1
   13c78:	b	13348 <__assert_fail@plt+0x2448>
   13c7c:	cmp	sl, #2
   13c80:	movne	r3, #0
   13c84:	moveq	r3, #1
   13c88:	ldr	r1, [sp, #32]
   13c8c:	cmp	fp, #0
   13c90:	andeq	r2, r3, r1
   13c94:	movne	r2, #0
   13c98:	cmp	r2, #0
   13c9c:	bne	13dbc <__assert_fail@plt+0x2ebc>
   13ca0:	eor	r2, r1, #1
   13ca4:	uxtb	r2, r2
   13ca8:	and	r3, r3, r2
   13cac:	ldr	r1, [sp, #68]	; 0x44
   13cb0:	ands	r3, r1, r3
   13cb4:	beq	13d48 <__assert_fail@plt+0x2e48>
   13cb8:	ldr	r2, [sp, #40]	; 0x28
   13cbc:	cmp	r2, #0
   13cc0:	bne	13cf8 <__assert_fail@plt+0x2df8>
   13cc4:	ldr	r2, [sp, #72]	; 0x48
   13cc8:	adds	r2, r2, #0
   13ccc:	movne	r2, #1
   13cd0:	cmp	r9, #0
   13cd4:	movne	r2, #0
   13cd8:	str	r2, [sp, #68]	; 0x44
   13cdc:	mov	sl, #2
   13ce0:	ldr	r1, [sp, #40]	; 0x28
   13ce4:	str	r1, [sp, #32]
   13ce8:	cmp	r2, #0
   13cec:	beq	13d3c <__assert_fail@plt+0x2e3c>
   13cf0:	ldr	r9, [sp, #72]	; 0x48
   13cf4:	b	12a50 <__assert_fail@plt+0x1b50>
   13cf8:	ldr	r3, [sp, #168]	; 0xa8
   13cfc:	str	r3, [sp, #16]
   13d00:	ldr	r3, [sp, #164]	; 0xa4
   13d04:	str	r3, [sp, #12]
   13d08:	ldr	r3, [sp, #160]	; 0xa0
   13d0c:	str	r3, [sp, #8]
   13d10:	ldr	r3, [sp, #156]	; 0x9c
   13d14:	str	r3, [sp, #4]
   13d18:	mov	r3, #5
   13d1c:	str	r3, [sp]
   13d20:	ldr	r3, [sp, #24]
   13d24:	ldr	r2, [sp, #48]	; 0x30
   13d28:	ldr	r1, [sp, #72]	; 0x48
   13d2c:	ldr	r0, [sp, #64]	; 0x40
   13d30:	bl	129d8 <__assert_fail@plt+0x1ad8>
   13d34:	mov	fp, r0
   13d38:	b	13e58 <__assert_fail@plt+0x2f58>
   13d3c:	mov	r8, r9
   13d40:	mov	r2, r3
   13d44:	b	13d4c <__assert_fail@plt+0x2e4c>
   13d48:	mov	r8, r9
   13d4c:	ldr	r3, [sp, #60]	; 0x3c
   13d50:	cmp	r3, #0
   13d54:	moveq	r2, #0
   13d58:	andne	r2, r2, #1
   13d5c:	cmp	r2, #0
   13d60:	beq	13d90 <__assert_fail@plt+0x2e90>
   13d64:	mov	r2, r3
   13d68:	ldrb	r3, [r3]
   13d6c:	cmp	r3, #0
   13d70:	beq	13d90 <__assert_fail@plt+0x2e90>
   13d74:	ldr	r1, [sp, #64]	; 0x40
   13d78:	cmp	r8, fp
   13d7c:	strbhi	r3, [r1, fp]
   13d80:	add	fp, fp, #1
   13d84:	ldrb	r3, [r2, #1]!
   13d88:	cmp	r3, #0
   13d8c:	bne	13d78 <__assert_fail@plt+0x2e78>
   13d90:	cmp	r8, fp
   13d94:	bls	13e58 <__assert_fail@plt+0x2f58>
   13d98:	mov	r3, #0
   13d9c:	ldr	r2, [sp, #64]	; 0x40
   13da0:	strb	r3, [r2, fp]
   13da4:	b	13e58 <__assert_fail@plt+0x2f58>
   13da8:	mov	r8, r9
   13dac:	mov	r7, sl
   13db0:	ldr	r3, [sp, #32]
   13db4:	str	r3, [sp, #28]
   13db8:	b	13e00 <__assert_fail@plt+0x2f00>
   13dbc:	mov	r8, r9
   13dc0:	mov	r7, #2
   13dc4:	b	13e00 <__assert_fail@plt+0x2f00>
   13dc8:	mov	r8, r9
   13dcc:	mov	r7, sl
   13dd0:	b	13e00 <__assert_fail@plt+0x2f00>
   13dd4:	mov	r8, r9
   13dd8:	mov	r7, sl
   13ddc:	b	13e00 <__assert_fail@plt+0x2f00>
   13de0:	mov	r8, r9
   13de4:	mov	r7, sl
   13de8:	b	13e00 <__assert_fail@plt+0x2f00>
   13dec:	mov	r8, r9
   13df0:	mov	r7, sl
   13df4:	b	13e00 <__assert_fail@plt+0x2f00>
   13df8:	mov	r8, r9
   13dfc:	mov	r7, sl
   13e00:	ldr	r3, [sp, #28]
   13e04:	cmp	r7, #2
   13e08:	movne	r3, #0
   13e0c:	andeq	r3, r3, #1
   13e10:	cmp	r3, #0
   13e14:	movne	r7, #4
   13e18:	ldr	r3, [sp, #168]	; 0xa8
   13e1c:	str	r3, [sp, #16]
   13e20:	ldr	r3, [sp, #164]	; 0xa4
   13e24:	str	r3, [sp, #12]
   13e28:	mov	r3, #0
   13e2c:	str	r3, [sp, #8]
   13e30:	ldr	r3, [sp, #156]	; 0x9c
   13e34:	bic	r3, r3, #2
   13e38:	str	r3, [sp, #4]
   13e3c:	str	r7, [sp]
   13e40:	ldr	r3, [sp, #24]
   13e44:	ldr	r2, [sp, #48]	; 0x30
   13e48:	mov	r1, r8
   13e4c:	ldr	r0, [sp, #64]	; 0x40
   13e50:	bl	129d8 <__assert_fail@plt+0x1ad8>
   13e54:	mov	fp, r0
   13e58:	mov	r0, fp
   13e5c:	add	sp, sp, #116	; 0x74
   13e60:	ldrd	r4, [sp]
   13e64:	ldrd	r6, [sp, #8]
   13e68:	ldrd	r8, [sp, #16]
   13e6c:	ldrd	sl, [sp, #24]
   13e70:	add	sp, sp, #32
   13e74:	pop	{pc}		; (ldr pc, [sp], #4)
   13e78:	mov	r8, r9
   13e7c:	mov	r7, sl
   13e80:	b	13e18 <__assert_fail@plt+0x2f18>
   13e84:	add	fp, fp, #4
   13e88:	str	r3, [sp, #36]	; 0x24
   13e8c:	mov	r5, #0
   13e90:	mov	r4, #48	; 0x30
   13e94:	b	1324c <__assert_fail@plt+0x234c>
   13e98:	mov	r3, #1
   13e9c:	str	r3, [sp, #32]
   13ea0:	str	r3, [sp, #28]
   13ea4:	str	r3, [sp, #52]	; 0x34
   13ea8:	movw	r3, #26896	; 0x6910
   13eac:	movt	r3, #1
   13eb0:	str	r3, [sp, #60]	; 0x3c
   13eb4:	mov	fp, #0
   13eb8:	mov	sl, #5
   13ebc:	b	12ab0 <__assert_fail@plt+0x1bb0>
   13ec0:	ldr	r3, [sp, #48]	; 0x30
   13ec4:	ldrb	r4, [r3, r6]
   13ec8:	cmp	r4, #126	; 0x7e
   13ecc:	ldrls	pc, [pc, r4, lsl #2]
   13ed0:	b	137bc <__assert_fail@plt+0x28bc>
   13ed4:	andeq	r2, r1, r4, asr #30
   13ed8:			; <UNDEFINED> instruction: 0x000137bc
   13edc:			; <UNDEFINED> instruction: 0x000137bc
   13ee0:			; <UNDEFINED> instruction: 0x000137bc
   13ee4:			; <UNDEFINED> instruction: 0x000137bc
   13ee8:			; <UNDEFINED> instruction: 0x000137bc
   13eec:			; <UNDEFINED> instruction: 0x000137bc
   13ef0:	andeq	r3, r1, ip, asr #24
   13ef4:	andeq	r3, r1, r8, ror #3
   13ef8:	andeq	r3, r1, ip, lsl #11
   13efc:	andeq	r3, r1, r8, asr #12
   13f00:	andeq	r3, r1, r0, lsr #11
   13f04:	strdeq	r3, [r1], -ip
   13f08:	andeq	r3, r1, r0, lsl r2
   13f0c:			; <UNDEFINED> instruction: 0x000137bc
   13f10:			; <UNDEFINED> instruction: 0x000137bc
   13f14:			; <UNDEFINED> instruction: 0x000137bc
   13f18:			; <UNDEFINED> instruction: 0x000137bc
   13f1c:			; <UNDEFINED> instruction: 0x000137bc
   13f20:			; <UNDEFINED> instruction: 0x000137bc
   13f24:			; <UNDEFINED> instruction: 0x000137bc
   13f28:			; <UNDEFINED> instruction: 0x000137bc
   13f2c:			; <UNDEFINED> instruction: 0x000137bc
   13f30:			; <UNDEFINED> instruction: 0x000137bc
   13f34:			; <UNDEFINED> instruction: 0x000137bc
   13f38:			; <UNDEFINED> instruction: 0x000137bc
   13f3c:			; <UNDEFINED> instruction: 0x000137bc
   13f40:			; <UNDEFINED> instruction: 0x000137bc
   13f44:			; <UNDEFINED> instruction: 0x000137bc
   13f48:			; <UNDEFINED> instruction: 0x000137bc
   13f4c:			; <UNDEFINED> instruction: 0x000137bc
   13f50:			; <UNDEFINED> instruction: 0x000137bc
   13f54:	ldrdeq	r3, [r1], -r0
   13f58:	andeq	r3, r1, ip, lsl #14
   13f5c:	andeq	r3, r1, ip, lsl #14
   13f60:	andeq	r3, r1, r4, asr #13
   13f64:	andeq	r3, r1, ip, lsl #14
   13f68:	andeq	r3, r1, r0, lsr ip
   13f6c:	andeq	r3, r1, ip, lsl #14
   13f70:	andeq	r3, r1, ip, lsl r7
   13f74:	andeq	r3, r1, ip, lsl #14
   13f78:	andeq	r3, r1, ip, lsl #14
   13f7c:	andeq	r3, r1, ip, lsl #14
   13f80:	andeq	r3, r1, r0, lsr ip
   13f84:	andeq	r3, r1, r0, lsr ip
   13f88:	andeq	r3, r1, r0, lsr ip
   13f8c:	andeq	r3, r1, r0, lsr ip
   13f90:	andeq	r3, r1, r0, lsr ip
   13f94:	andeq	r3, r1, r0, lsr ip
   13f98:	andeq	r3, r1, r0, lsr ip
   13f9c:	andeq	r3, r1, r0, lsr ip
   13fa0:	andeq	r3, r1, r0, lsr ip
   13fa4:	andeq	r3, r1, r0, lsr ip
   13fa8:	andeq	r3, r1, r0, lsr ip
   13fac:	andeq	r3, r1, r0, lsr ip
   13fb0:	andeq	r3, r1, r0, lsr ip
   13fb4:	andeq	r3, r1, r0, lsr ip
   13fb8:	andeq	r3, r1, r0, lsr ip
   13fbc:	andeq	r3, r1, r0, lsr ip
   13fc0:	andeq	r3, r1, ip, lsl #14
   13fc4:	andeq	r3, r1, ip, lsl #14
   13fc8:	andeq	r3, r1, ip, lsl #14
   13fcc:	andeq	r3, r1, ip, lsl #14
   13fd0:	andeq	r3, r1, ip, ror r0
   13fd4:			; <UNDEFINED> instruction: 0x000137bc
   13fd8:	andeq	r3, r1, r0, lsr ip
   13fdc:	andeq	r3, r1, r0, lsr ip
   13fe0:	andeq	r3, r1, r0, lsr ip
   13fe4:	andeq	r3, r1, r0, lsr ip
   13fe8:	andeq	r3, r1, r0, lsr ip
   13fec:	andeq	r3, r1, r0, lsr ip
   13ff0:	andeq	r3, r1, r0, lsr ip
   13ff4:	andeq	r3, r1, r0, lsr ip
   13ff8:	andeq	r3, r1, r0, lsr ip
   13ffc:	andeq	r3, r1, r0, lsr ip
   14000:	andeq	r3, r1, r0, lsr ip
   14004:	andeq	r3, r1, r0, lsr ip
   14008:	andeq	r3, r1, r0, lsr ip
   1400c:	andeq	r3, r1, r0, lsr ip
   14010:	andeq	r3, r1, r0, lsr ip
   14014:	andeq	r3, r1, r0, lsr ip
   14018:	andeq	r3, r1, r0, lsr ip
   1401c:	andeq	r3, r1, r0, lsr ip
   14020:	andeq	r3, r1, r0, lsr ip
   14024:	andeq	r3, r1, r0, lsr ip
   14028:	andeq	r3, r1, r0, lsr ip
   1402c:	andeq	r3, r1, r0, lsr ip
   14030:	andeq	r3, r1, r0, lsr ip
   14034:	andeq	r3, r1, r0, lsr ip
   14038:	andeq	r3, r1, r0, lsr ip
   1403c:	andeq	r3, r1, r0, lsr ip
   14040:	andeq	r3, r1, ip, lsl #14
   14044:			; <UNDEFINED> instruction: 0x000135b4
   14048:	andeq	r3, r1, r0, lsr ip
   1404c:	andeq	r3, r1, ip, lsl #14
   14050:	andeq	r3, r1, r0, lsr ip
   14054:	andeq	r3, r1, ip, lsl #14
   14058:	andeq	r3, r1, r0, lsr ip
   1405c:	andeq	r3, r1, r0, lsr ip
   14060:	andeq	r3, r1, r0, lsr ip
   14064:	andeq	r3, r1, r0, lsr ip
   14068:	andeq	r3, r1, r0, lsr ip
   1406c:	andeq	r3, r1, r0, lsr ip
   14070:	andeq	r3, r1, r0, lsr ip
   14074:	andeq	r3, r1, r0, lsr ip
   14078:	andeq	r3, r1, r0, lsr ip
   1407c:	andeq	r3, r1, r0, lsr ip
   14080:	andeq	r3, r1, r0, lsr ip
   14084:	andeq	r3, r1, r0, lsr ip
   14088:	andeq	r3, r1, r0, lsr ip
   1408c:	andeq	r3, r1, r0, lsr ip
   14090:	andeq	r3, r1, r0, lsr ip
   14094:	andeq	r3, r1, r0, lsr ip
   14098:	andeq	r3, r1, r0, lsr ip
   1409c:	andeq	r3, r1, r0, lsr ip
   140a0:	andeq	r3, r1, r0, lsr ip
   140a4:	andeq	r3, r1, r0, lsr ip
   140a8:	andeq	r3, r1, r0, lsr ip
   140ac:	andeq	r3, r1, r0, lsr ip
   140b0:	andeq	r3, r1, r0, lsr ip
   140b4:	andeq	r3, r1, r0, lsr ip
   140b8:	andeq	r3, r1, r0, lsr ip
   140bc:	andeq	r3, r1, r0, lsr ip
   140c0:	andeq	r3, r1, r4, ror r6
   140c4:	andeq	r3, r1, ip, lsl #14
   140c8:	andeq	r3, r1, r4, ror r6
   140cc:	andeq	r3, r1, r4, asr #13
   140d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   140d4:	strd	r6, [sp, #8]
   140d8:	strd	r8, [sp, #16]
   140dc:	strd	sl, [sp, #24]
   140e0:	str	lr, [sp, #32]
   140e4:	sub	sp, sp, #52	; 0x34
   140e8:	mov	r5, r0
   140ec:	str	r1, [sp, #24]
   140f0:	str	r2, [sp, #28]
   140f4:	mov	r4, r3
   140f8:	bl	10e1c <__errno_location@plt>
   140fc:	str	r0, [sp, #32]
   14100:	ldr	r3, [r0]
   14104:	str	r3, [sp, #36]	; 0x24
   14108:	movw	r3, #28912	; 0x70f0
   1410c:	movt	r3, #2
   14110:	ldr	r6, [r3]
   14114:	cmn	r5, #-2147483647	; 0x80000001
   14118:	movne	r3, #0
   1411c:	moveq	r3, #1
   14120:	orrs	r3, r3, r5, lsr #31
   14124:	bne	14288 <__assert_fail@plt+0x3388>
   14128:	movw	r3, #28912	; 0x70f0
   1412c:	movt	r3, #2
   14130:	ldr	r2, [r3, #4]
   14134:	cmp	r2, r5
   14138:	bgt	141a8 <__assert_fail@plt+0x32a8>
   1413c:	str	r2, [sp, #44]	; 0x2c
   14140:	add	r3, r3, #8
   14144:	cmp	r6, r3
   14148:	beq	1428c <__assert_fail@plt+0x338c>
   1414c:	sub	r2, r5, r2
   14150:	mov	r3, #8
   14154:	str	r3, [sp]
   14158:	mvn	r3, #-2147483648	; 0x80000000
   1415c:	add	r2, r2, #1
   14160:	add	r1, sp, #44	; 0x2c
   14164:	mov	r0, r6
   14168:	bl	15290 <__assert_fail@plt+0x4390>
   1416c:	mov	r6, r0
   14170:	movw	r3, #28912	; 0x70f0
   14174:	movt	r3, #2
   14178:	str	r0, [r3]
   1417c:	movw	r7, #28912	; 0x70f0
   14180:	movt	r7, #2
   14184:	ldr	r0, [r7, #4]
   14188:	ldr	r2, [sp, #44]	; 0x2c
   1418c:	sub	r2, r2, r0
   14190:	lsl	r2, r2, #3
   14194:	mov	r1, #0
   14198:	add	r0, r6, r0, lsl #3
   1419c:	bl	10e34 <memset@plt>
   141a0:	ldr	r3, [sp, #44]	; 0x2c
   141a4:	str	r3, [r7, #4]
   141a8:	add	fp, r6, r5, lsl #3
   141ac:	ldr	r8, [r6, r5, lsl #3]
   141b0:	ldr	r7, [fp, #4]
   141b4:	ldr	r3, [r4, #4]
   141b8:	orr	r9, r3, #1
   141bc:	add	sl, r4, #8
   141c0:	ldr	r3, [r4, #44]	; 0x2c
   141c4:	str	r3, [sp, #16]
   141c8:	ldr	r3, [r4, #40]	; 0x28
   141cc:	str	r3, [sp, #12]
   141d0:	str	sl, [sp, #8]
   141d4:	str	r9, [sp, #4]
   141d8:	ldr	r3, [r4]
   141dc:	str	r3, [sp]
   141e0:	ldr	r3, [sp, #28]
   141e4:	ldr	r2, [sp, #24]
   141e8:	mov	r1, r8
   141ec:	mov	r0, r7
   141f0:	bl	129d8 <__assert_fail@plt+0x1ad8>
   141f4:	cmp	r8, r0
   141f8:	bhi	1425c <__assert_fail@plt+0x335c>
   141fc:	add	r8, r0, #1
   14200:	str	r8, [r6, r5, lsl #3]
   14204:	movw	r3, #29028	; 0x7164
   14208:	movt	r3, #2
   1420c:	cmp	r7, r3
   14210:	beq	1421c <__assert_fail@plt+0x331c>
   14214:	mov	r0, r7
   14218:	bl	12654 <__assert_fail@plt+0x1754>
   1421c:	mov	r0, r8
   14220:	bl	1508c <__assert_fail@plt+0x418c>
   14224:	mov	r7, r0
   14228:	str	r0, [fp, #4]
   1422c:	ldr	r3, [r4, #44]	; 0x2c
   14230:	str	r3, [sp, #16]
   14234:	ldr	r3, [r4, #40]	; 0x28
   14238:	str	r3, [sp, #12]
   1423c:	str	sl, [sp, #8]
   14240:	str	r9, [sp, #4]
   14244:	ldr	r3, [r4]
   14248:	str	r3, [sp]
   1424c:	ldr	r3, [sp, #28]
   14250:	ldr	r2, [sp, #24]
   14254:	mov	r1, r8
   14258:	bl	129d8 <__assert_fail@plt+0x1ad8>
   1425c:	ldr	r3, [sp, #32]
   14260:	ldr	r2, [sp, #36]	; 0x24
   14264:	str	r2, [r3]
   14268:	mov	r0, r7
   1426c:	add	sp, sp, #52	; 0x34
   14270:	ldrd	r4, [sp]
   14274:	ldrd	r6, [sp, #8]
   14278:	ldrd	r8, [sp, #16]
   1427c:	ldrd	sl, [sp, #24]
   14280:	add	sp, sp, #32
   14284:	pop	{pc}		; (ldr pc, [sp], #4)
   14288:	bl	10ef4 <abort@plt>
   1428c:	sub	r2, r5, r2
   14290:	mov	r3, #8
   14294:	str	r3, [sp]
   14298:	mvn	r3, #-2147483648	; 0x80000000
   1429c:	add	r2, r2, #1
   142a0:	add	r1, sp, #44	; 0x2c
   142a4:	mov	r0, #0
   142a8:	bl	15290 <__assert_fail@plt+0x4390>
   142ac:	mov	r6, r0
   142b0:	movw	r3, #28912	; 0x70f0
   142b4:	movt	r3, #2
   142b8:	str	r0, [r3]
   142bc:	ldrd	r2, [r3, #8]
   142c0:	strd	r2, [r0]
   142c4:	b	1417c <__assert_fail@plt+0x327c>
   142c8:	strd	r4, [sp, #-16]!
   142cc:	str	r6, [sp, #8]
   142d0:	str	lr, [sp, #12]
   142d4:	mov	r4, r0
   142d8:	bl	10e1c <__errno_location@plt>
   142dc:	mov	r5, r0
   142e0:	ldr	r6, [r0]
   142e4:	cmp	r4, #0
   142e8:	ldr	r3, [pc, #32]	; 14310 <__assert_fail@plt+0x3410>
   142ec:	moveq	r4, r3
   142f0:	mov	r1, #48	; 0x30
   142f4:	mov	r0, r4
   142f8:	bl	15400 <__assert_fail@plt+0x4500>
   142fc:	str	r6, [r5]
   14300:	ldrd	r4, [sp]
   14304:	ldr	r6, [sp, #8]
   14308:	add	sp, sp, #12
   1430c:	pop	{pc}		; (ldr pc, [sp], #4)
   14310:	andeq	r7, r2, r4, ror #4
   14314:	subs	r3, r0, #0
   14318:	ldr	r2, [pc, #8]	; 14328 <__assert_fail@plt+0x3428>
   1431c:	moveq	r3, r2
   14320:	ldr	r0, [r3]
   14324:	bx	lr
   14328:	andeq	r7, r2, r4, ror #4
   1432c:	subs	r3, r0, #0
   14330:	ldr	r2, [pc, #8]	; 14340 <__assert_fail@plt+0x3440>
   14334:	moveq	r3, r2
   14338:	str	r1, [r3]
   1433c:	bx	lr
   14340:	andeq	r7, r2, r4, ror #4
   14344:	push	{lr}		; (str lr, [sp, #-4]!)
   14348:	subs	r3, r0, #0
   1434c:	ldr	r0, [pc, #44]	; 14380 <__assert_fail@plt+0x3480>
   14350:	moveq	r3, r0
   14354:	add	r3, r3, #8
   14358:	lsr	lr, r1, #5
   1435c:	and	r1, r1, #31
   14360:	ldr	ip, [r3, lr, lsl #2]
   14364:	lsr	r0, ip, r1
   14368:	eor	r2, r2, r0
   1436c:	and	r2, r2, #1
   14370:	eor	r1, ip, r2, lsl r1
   14374:	str	r1, [r3, lr, lsl #2]
   14378:	and	r0, r0, #1
   1437c:	pop	{pc}		; (ldr pc, [sp], #4)
   14380:	andeq	r7, r2, r4, ror #4
   14384:	subs	r3, r0, #0
   14388:	ldr	r2, [pc, #12]	; 1439c <__assert_fail@plt+0x349c>
   1438c:	moveq	r3, r2
   14390:	ldr	r0, [r3, #4]
   14394:	str	r1, [r3, #4]
   14398:	bx	lr
   1439c:	andeq	r7, r2, r4, ror #4
   143a0:	subs	r3, r0, #0
   143a4:	ldr	r0, [pc, #44]	; 143d8 <__assert_fail@plt+0x34d8>
   143a8:	moveq	r3, r0
   143ac:	mov	r0, #10
   143b0:	str	r0, [r3]
   143b4:	cmp	r2, #0
   143b8:	cmpne	r1, #0
   143bc:	beq	143cc <__assert_fail@plt+0x34cc>
   143c0:	str	r1, [r3, #40]	; 0x28
   143c4:	str	r2, [r3, #44]	; 0x2c
   143c8:	bx	lr
   143cc:	str	r4, [sp, #-8]!
   143d0:	str	lr, [sp, #4]
   143d4:	bl	10ef4 <abort@plt>
   143d8:	andeq	r7, r2, r4, ror #4
   143dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   143e0:	strd	r6, [sp, #8]
   143e4:	strd	r8, [sp, #16]
   143e8:	str	sl, [sp, #24]
   143ec:	str	lr, [sp, #28]
   143f0:	sub	sp, sp, #24
   143f4:	mov	r7, r0
   143f8:	mov	r8, r1
   143fc:	mov	r9, r2
   14400:	mov	sl, r3
   14404:	ldr	r4, [sp, #56]	; 0x38
   14408:	cmp	r4, #0
   1440c:	ldr	r3, [pc, #104]	; 1447c <__assert_fail@plt+0x357c>
   14410:	moveq	r4, r3
   14414:	bl	10e1c <__errno_location@plt>
   14418:	mov	r5, r0
   1441c:	ldr	r6, [r0]
   14420:	ldr	r3, [r4, #44]	; 0x2c
   14424:	str	r3, [sp, #16]
   14428:	ldr	r3, [r4, #40]	; 0x28
   1442c:	str	r3, [sp, #12]
   14430:	add	r3, r4, #8
   14434:	str	r3, [sp, #8]
   14438:	ldr	r3, [r4, #4]
   1443c:	str	r3, [sp, #4]
   14440:	ldr	r3, [r4]
   14444:	str	r3, [sp]
   14448:	mov	r3, sl
   1444c:	mov	r2, r9
   14450:	mov	r1, r8
   14454:	mov	r0, r7
   14458:	bl	129d8 <__assert_fail@plt+0x1ad8>
   1445c:	str	r6, [r5]
   14460:	add	sp, sp, #24
   14464:	ldrd	r4, [sp]
   14468:	ldrd	r6, [sp, #8]
   1446c:	ldrd	r8, [sp, #16]
   14470:	ldr	sl, [sp, #24]
   14474:	add	sp, sp, #28
   14478:	pop	{pc}		; (ldr pc, [sp], #4)
   1447c:	andeq	r7, r2, r4, ror #4
   14480:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14484:	strd	r6, [sp, #8]
   14488:	strd	r8, [sp, #16]
   1448c:	strd	sl, [sp, #24]
   14490:	str	lr, [sp, #32]
   14494:	sub	sp, sp, #44	; 0x2c
   14498:	mov	r8, r0
   1449c:	mov	sl, r1
   144a0:	mov	r6, r2
   144a4:	subs	r4, r3, #0
   144a8:	ldr	r3, [pc, #200]	; 14578 <__assert_fail@plt+0x3678>
   144ac:	moveq	r4, r3
   144b0:	bl	10e1c <__errno_location@plt>
   144b4:	mov	r7, r0
   144b8:	ldr	fp, [r0]
   144bc:	ldr	r5, [r4, #4]
   144c0:	cmp	r6, #0
   144c4:	orreq	r5, r5, #1
   144c8:	add	r9, r4, #8
   144cc:	ldr	r3, [r4, #44]	; 0x2c
   144d0:	str	r3, [sp, #16]
   144d4:	ldr	r3, [r4, #40]	; 0x28
   144d8:	str	r3, [sp, #12]
   144dc:	str	r9, [sp, #8]
   144e0:	str	r5, [sp, #4]
   144e4:	ldr	r3, [r4]
   144e8:	str	r3, [sp]
   144ec:	str	sl, [sp, #36]	; 0x24
   144f0:	mov	r3, sl
   144f4:	str	r8, [sp, #32]
   144f8:	mov	r2, r8
   144fc:	mov	r1, #0
   14500:	mov	r0, r1
   14504:	bl	129d8 <__assert_fail@plt+0x1ad8>
   14508:	mov	sl, r0
   1450c:	add	r8, r0, #1
   14510:	mov	r0, r8
   14514:	bl	1508c <__assert_fail@plt+0x418c>
   14518:	str	r0, [sp, #28]
   1451c:	ldr	r3, [r4, #44]	; 0x2c
   14520:	str	r3, [sp, #16]
   14524:	ldr	r3, [r4, #40]	; 0x28
   14528:	str	r3, [sp, #12]
   1452c:	str	r9, [sp, #8]
   14530:	str	r5, [sp, #4]
   14534:	ldr	r3, [r4]
   14538:	str	r3, [sp]
   1453c:	ldr	r3, [sp, #36]	; 0x24
   14540:	ldr	r2, [sp, #32]
   14544:	mov	r1, r8
   14548:	bl	129d8 <__assert_fail@plt+0x1ad8>
   1454c:	str	fp, [r7]
   14550:	cmp	r6, #0
   14554:	strne	sl, [r6]
   14558:	ldr	r0, [sp, #28]
   1455c:	add	sp, sp, #44	; 0x2c
   14560:	ldrd	r4, [sp]
   14564:	ldrd	r6, [sp, #8]
   14568:	ldrd	r8, [sp, #16]
   1456c:	ldrd	sl, [sp, #24]
   14570:	add	sp, sp, #32
   14574:	pop	{pc}		; (ldr pc, [sp], #4)
   14578:	andeq	r7, r2, r4, ror #4
   1457c:	str	r4, [sp, #-8]!
   14580:	str	lr, [sp, #4]
   14584:	mov	r3, r2
   14588:	mov	r2, #0
   1458c:	bl	14480 <__assert_fail@plt+0x3580>
   14590:	ldr	r4, [sp]
   14594:	add	sp, sp, #4
   14598:	pop	{pc}		; (ldr pc, [sp], #4)
   1459c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   145a0:	strd	r6, [sp, #8]
   145a4:	str	r8, [sp, #16]
   145a8:	str	lr, [sp, #20]
   145ac:	movw	r3, #28912	; 0x70f0
   145b0:	movt	r3, #2
   145b4:	ldr	r7, [r3]
   145b8:	ldr	r3, [r3, #4]
   145bc:	cmp	r3, #1
   145c0:	ble	145ec <__assert_fail@plt+0x36ec>
   145c4:	mov	r4, #1
   145c8:	add	r6, r7, #4
   145cc:	movw	r5, #28912	; 0x70f0
   145d0:	movt	r5, #2
   145d4:	ldr	r0, [r6, r4, lsl #3]
   145d8:	bl	12654 <__assert_fail@plt+0x1754>
   145dc:	add	r4, r4, #1
   145e0:	ldr	r3, [r5, #4]
   145e4:	cmp	r3, r4
   145e8:	bgt	145d4 <__assert_fail@plt+0x36d4>
   145ec:	ldr	r0, [r7, #4]
   145f0:	movw	r3, #29028	; 0x7164
   145f4:	movt	r3, #2
   145f8:	cmp	r0, r3
   145fc:	beq	14620 <__assert_fail@plt+0x3720>
   14600:	bl	12654 <__assert_fail@plt+0x1754>
   14604:	movw	r3, #28912	; 0x70f0
   14608:	movt	r3, #2
   1460c:	mov	r2, #256	; 0x100
   14610:	str	r2, [r3, #8]
   14614:	movw	r2, #29028	; 0x7164
   14618:	movt	r2, #2
   1461c:	str	r2, [r3, #12]
   14620:	ldr	r3, [pc, #64]	; 14668 <__assert_fail@plt+0x3768>
   14624:	cmp	r7, r3
   14628:	beq	14644 <__assert_fail@plt+0x3744>
   1462c:	mov	r0, r7
   14630:	bl	12654 <__assert_fail@plt+0x1754>
   14634:	movw	r3, #28912	; 0x70f0
   14638:	movt	r3, #2
   1463c:	add	r2, r3, #8
   14640:	str	r2, [r3]
   14644:	movw	r3, #28912	; 0x70f0
   14648:	movt	r3, #2
   1464c:	mov	r2, #1
   14650:	str	r2, [r3, #4]
   14654:	ldrd	r4, [sp]
   14658:	ldrd	r6, [sp, #8]
   1465c:	ldr	r8, [sp, #16]
   14660:	add	sp, sp, #20
   14664:	pop	{pc}		; (ldr pc, [sp], #4)
   14668:	strdeq	r7, [r2], -r8
   1466c:	str	r4, [sp, #-8]!
   14670:	str	lr, [sp, #4]
   14674:	ldr	r3, [pc, #16]	; 1468c <__assert_fail@plt+0x378c>
   14678:	mvn	r2, #0
   1467c:	bl	140d0 <__assert_fail@plt+0x31d0>
   14680:	ldr	r4, [sp]
   14684:	add	sp, sp, #4
   14688:	pop	{pc}		; (ldr pc, [sp], #4)
   1468c:	andeq	r7, r2, r4, ror #4
   14690:	str	r4, [sp, #-8]!
   14694:	str	lr, [sp, #4]
   14698:	ldr	r3, [pc, #12]	; 146ac <__assert_fail@plt+0x37ac>
   1469c:	bl	140d0 <__assert_fail@plt+0x31d0>
   146a0:	ldr	r4, [sp]
   146a4:	add	sp, sp, #4
   146a8:	pop	{pc}		; (ldr pc, [sp], #4)
   146ac:	andeq	r7, r2, r4, ror #4
   146b0:	str	r4, [sp, #-8]!
   146b4:	str	lr, [sp, #4]
   146b8:	mov	r1, r0
   146bc:	mov	r0, #0
   146c0:	bl	1466c <__assert_fail@plt+0x376c>
   146c4:	ldr	r4, [sp]
   146c8:	add	sp, sp, #4
   146cc:	pop	{pc}		; (ldr pc, [sp], #4)
   146d0:	str	r4, [sp, #-8]!
   146d4:	str	lr, [sp, #4]
   146d8:	mov	r2, r1
   146dc:	mov	r1, r0
   146e0:	mov	r0, #0
   146e4:	bl	14690 <__assert_fail@plt+0x3790>
   146e8:	ldr	r4, [sp]
   146ec:	add	sp, sp, #4
   146f0:	pop	{pc}		; (ldr pc, [sp], #4)
   146f4:	strd	r4, [sp, #-12]!
   146f8:	str	lr, [sp, #8]
   146fc:	sub	sp, sp, #52	; 0x34
   14700:	mov	r4, r0
   14704:	mov	r5, r2
   14708:	mov	r0, sp
   1470c:	bl	12844 <__assert_fail@plt+0x1944>
   14710:	mov	r3, sp
   14714:	mvn	r2, #0
   14718:	mov	r1, r5
   1471c:	mov	r0, r4
   14720:	bl	140d0 <__assert_fail@plt+0x31d0>
   14724:	add	sp, sp, #52	; 0x34
   14728:	ldrd	r4, [sp]
   1472c:	add	sp, sp, #8
   14730:	pop	{pc}		; (ldr pc, [sp], #4)
   14734:	strd	r4, [sp, #-16]!
   14738:	str	r6, [sp, #8]
   1473c:	str	lr, [sp, #12]
   14740:	sub	sp, sp, #48	; 0x30
   14744:	mov	r4, r0
   14748:	mov	r5, r2
   1474c:	mov	r6, r3
   14750:	mov	r0, sp
   14754:	bl	12844 <__assert_fail@plt+0x1944>
   14758:	mov	r3, sp
   1475c:	mov	r2, r6
   14760:	mov	r1, r5
   14764:	mov	r0, r4
   14768:	bl	140d0 <__assert_fail@plt+0x31d0>
   1476c:	add	sp, sp, #48	; 0x30
   14770:	ldrd	r4, [sp]
   14774:	ldr	r6, [sp, #8]
   14778:	add	sp, sp, #12
   1477c:	pop	{pc}		; (ldr pc, [sp], #4)
   14780:	str	r4, [sp, #-8]!
   14784:	str	lr, [sp, #4]
   14788:	mov	r2, r1
   1478c:	mov	r1, r0
   14790:	mov	r0, #0
   14794:	bl	146f4 <__assert_fail@plt+0x37f4>
   14798:	ldr	r4, [sp]
   1479c:	add	sp, sp, #4
   147a0:	pop	{pc}		; (ldr pc, [sp], #4)
   147a4:	str	r4, [sp, #-8]!
   147a8:	str	lr, [sp, #4]
   147ac:	mov	r3, r2
   147b0:	mov	r2, r1
   147b4:	mov	r1, r0
   147b8:	mov	r0, #0
   147bc:	bl	14734 <__assert_fail@plt+0x3834>
   147c0:	ldr	r4, [sp]
   147c4:	add	sp, sp, #4
   147c8:	pop	{pc}		; (ldr pc, [sp], #4)
   147cc:	strd	r4, [sp, #-12]!
   147d0:	str	lr, [sp, #8]
   147d4:	sub	sp, sp, #52	; 0x34
   147d8:	mov	r4, r0
   147dc:	mov	r5, r1
   147e0:	mov	r1, r2
   147e4:	ldr	r0, [pc, #92]	; 14848 <__assert_fail@plt+0x3948>
   147e8:	ldrd	r2, [r0]
   147ec:	strd	r2, [sp]
   147f0:	ldrd	r2, [r0, #8]
   147f4:	strd	r2, [sp, #8]
   147f8:	ldrd	r2, [r0, #16]
   147fc:	strd	r2, [sp, #16]
   14800:	ldrd	r2, [r0, #24]
   14804:	strd	r2, [sp, #24]
   14808:	ldrd	r2, [r0, #32]
   1480c:	strd	r2, [sp, #32]
   14810:	ldrd	r2, [r0, #40]	; 0x28
   14814:	strd	r2, [sp, #40]	; 0x28
   14818:	mov	r2, #1
   1481c:	mov	r0, sp
   14820:	bl	14344 <__assert_fail@plt+0x3444>
   14824:	mov	r3, sp
   14828:	mov	r2, r5
   1482c:	mov	r1, r4
   14830:	mov	r0, #0
   14834:	bl	140d0 <__assert_fail@plt+0x31d0>
   14838:	add	sp, sp, #52	; 0x34
   1483c:	ldrd	r4, [sp]
   14840:	add	sp, sp, #8
   14844:	pop	{pc}		; (ldr pc, [sp], #4)
   14848:	andeq	r7, r2, r4, ror #4
   1484c:	str	r4, [sp, #-8]!
   14850:	str	lr, [sp, #4]
   14854:	mov	r2, r1
   14858:	mvn	r1, #0
   1485c:	bl	147cc <__assert_fail@plt+0x38cc>
   14860:	ldr	r4, [sp]
   14864:	add	sp, sp, #4
   14868:	pop	{pc}		; (ldr pc, [sp], #4)
   1486c:	str	r4, [sp, #-8]!
   14870:	str	lr, [sp, #4]
   14874:	mov	r1, #58	; 0x3a
   14878:	bl	1484c <__assert_fail@plt+0x394c>
   1487c:	ldr	r4, [sp]
   14880:	add	sp, sp, #4
   14884:	pop	{pc}		; (ldr pc, [sp], #4)
   14888:	str	r4, [sp, #-8]!
   1488c:	str	lr, [sp, #4]
   14890:	mov	r2, #58	; 0x3a
   14894:	bl	147cc <__assert_fail@plt+0x38cc>
   14898:	ldr	r4, [sp]
   1489c:	add	sp, sp, #4
   148a0:	pop	{pc}		; (ldr pc, [sp], #4)
   148a4:	strd	r4, [sp, #-12]!
   148a8:	str	lr, [sp, #8]
   148ac:	sub	sp, sp, #100	; 0x64
   148b0:	mov	r4, r0
   148b4:	mov	r5, r2
   148b8:	mov	r0, sp
   148bc:	bl	12844 <__assert_fail@plt+0x1944>
   148c0:	ldrd	r2, [sp]
   148c4:	strd	r2, [sp, #48]	; 0x30
   148c8:	ldrd	r2, [sp, #8]
   148cc:	strd	r2, [sp, #56]	; 0x38
   148d0:	ldrd	r2, [sp, #16]
   148d4:	strd	r2, [sp, #64]	; 0x40
   148d8:	ldrd	r2, [sp, #24]
   148dc:	strd	r2, [sp, #72]	; 0x48
   148e0:	ldrd	r2, [sp, #32]
   148e4:	strd	r2, [sp, #80]	; 0x50
   148e8:	ldrd	r2, [sp, #40]	; 0x28
   148ec:	strd	r2, [sp, #88]	; 0x58
   148f0:	mov	r2, #1
   148f4:	mov	r1, #58	; 0x3a
   148f8:	add	r0, sp, #48	; 0x30
   148fc:	bl	14344 <__assert_fail@plt+0x3444>
   14900:	add	r3, sp, #48	; 0x30
   14904:	mvn	r2, #0
   14908:	mov	r1, r5
   1490c:	mov	r0, r4
   14910:	bl	140d0 <__assert_fail@plt+0x31d0>
   14914:	add	sp, sp, #100	; 0x64
   14918:	ldrd	r4, [sp]
   1491c:	add	sp, sp, #8
   14920:	pop	{pc}		; (ldr pc, [sp], #4)
   14924:	strd	r4, [sp, #-20]!	; 0xffffffec
   14928:	strd	r6, [sp, #8]
   1492c:	str	lr, [sp, #16]
   14930:	sub	sp, sp, #52	; 0x34
   14934:	mov	r4, r0
   14938:	mov	r5, r3
   1493c:	ldr	r3, [pc, #92]	; 149a0 <__assert_fail@plt+0x3aa0>
   14940:	ldrd	r6, [r3]
   14944:	strd	r6, [sp]
   14948:	ldrd	r6, [r3, #8]
   1494c:	strd	r6, [sp, #8]
   14950:	ldrd	r6, [r3, #16]
   14954:	strd	r6, [sp, #16]
   14958:	ldrd	r6, [r3, #24]
   1495c:	strd	r6, [sp, #24]
   14960:	ldrd	r6, [r3, #32]
   14964:	strd	r6, [sp, #32]
   14968:	ldrd	r6, [r3, #40]	; 0x28
   1496c:	strd	r6, [sp, #40]	; 0x28
   14970:	mov	r0, sp
   14974:	bl	143a0 <__assert_fail@plt+0x34a0>
   14978:	mov	r3, sp
   1497c:	ldr	r2, [sp, #72]	; 0x48
   14980:	mov	r1, r5
   14984:	mov	r0, r4
   14988:	bl	140d0 <__assert_fail@plt+0x31d0>
   1498c:	add	sp, sp, #52	; 0x34
   14990:	ldrd	r4, [sp]
   14994:	ldrd	r6, [sp, #8]
   14998:	add	sp, sp, #16
   1499c:	pop	{pc}		; (ldr pc, [sp], #4)
   149a0:	andeq	r7, r2, r4, ror #4
   149a4:	push	{lr}		; (str lr, [sp, #-4]!)
   149a8:	sub	sp, sp, #12
   149ac:	mvn	ip, #0
   149b0:	str	ip, [sp]
   149b4:	bl	14924 <__assert_fail@plt+0x3a24>
   149b8:	add	sp, sp, #12
   149bc:	pop	{pc}		; (ldr pc, [sp], #4)
   149c0:	str	r4, [sp, #-8]!
   149c4:	str	lr, [sp, #4]
   149c8:	mov	r3, r2
   149cc:	mov	r2, r1
   149d0:	mov	r1, r0
   149d4:	mov	r0, #0
   149d8:	bl	149a4 <__assert_fail@plt+0x3aa4>
   149dc:	ldr	r4, [sp]
   149e0:	add	sp, sp, #4
   149e4:	pop	{pc}		; (ldr pc, [sp], #4)
   149e8:	push	{lr}		; (str lr, [sp, #-4]!)
   149ec:	sub	sp, sp, #12
   149f0:	str	r3, [sp]
   149f4:	mov	r3, r2
   149f8:	mov	r2, r1
   149fc:	mov	r1, r0
   14a00:	mov	r0, #0
   14a04:	bl	14924 <__assert_fail@plt+0x3a24>
   14a08:	add	sp, sp, #12
   14a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a10:	str	r4, [sp, #-8]!
   14a14:	str	lr, [sp, #4]
   14a18:	ldr	r3, [pc, #12]	; 14a2c <__assert_fail@plt+0x3b2c>
   14a1c:	bl	140d0 <__assert_fail@plt+0x31d0>
   14a20:	ldr	r4, [sp]
   14a24:	add	sp, sp, #4
   14a28:	pop	{pc}		; (ldr pc, [sp], #4)
   14a2c:	andeq	r7, r2, r0, lsl #2
   14a30:	str	r4, [sp, #-8]!
   14a34:	str	lr, [sp, #4]
   14a38:	mov	r2, r1
   14a3c:	mov	r1, r0
   14a40:	mov	r0, #0
   14a44:	bl	14a10 <__assert_fail@plt+0x3b10>
   14a48:	ldr	r4, [sp]
   14a4c:	add	sp, sp, #4
   14a50:	pop	{pc}		; (ldr pc, [sp], #4)
   14a54:	str	r4, [sp, #-8]!
   14a58:	str	lr, [sp, #4]
   14a5c:	mvn	r2, #0
   14a60:	bl	14a10 <__assert_fail@plt+0x3b10>
   14a64:	ldr	r4, [sp]
   14a68:	add	sp, sp, #4
   14a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a70:	str	r4, [sp, #-8]!
   14a74:	str	lr, [sp, #4]
   14a78:	mov	r1, r0
   14a7c:	mov	r0, #0
   14a80:	bl	14a54 <__assert_fail@plt+0x3b54>
   14a84:	ldr	r4, [sp]
   14a88:	add	sp, sp, #4
   14a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a90:	strd	r4, [sp, #-16]!
   14a94:	str	r6, [sp, #8]
   14a98:	str	lr, [sp, #12]
   14a9c:	sub	sp, sp, #32
   14aa0:	mov	r4, r0
   14aa4:	ldr	r5, [sp, #48]	; 0x30
   14aa8:	ldr	r6, [sp, #52]	; 0x34
   14aac:	cmp	r1, #0
   14ab0:	beq	14b7c <__assert_fail@plt+0x3c7c>
   14ab4:	str	r3, [sp, #4]
   14ab8:	str	r2, [sp]
   14abc:	mov	r3, r1
   14ac0:	movw	r2, #27024	; 0x6990
   14ac4:	movt	r2, #1
   14ac8:	mov	r1, #1
   14acc:	bl	10e58 <__fprintf_chk@plt>
   14ad0:	mov	r2, #5
   14ad4:	movw	r1, #27044	; 0x69a4
   14ad8:	movt	r1, #1
   14adc:	mov	r0, #0
   14ae0:	bl	10d38 <dcgettext@plt>
   14ae4:	movw	r3, #2022	; 0x7e6
   14ae8:	str	r3, [sp]
   14aec:	mov	r3, r0
   14af0:	movw	r2, #27772	; 0x6c7c
   14af4:	movt	r2, #1
   14af8:	mov	r1, #1
   14afc:	mov	r0, r4
   14b00:	bl	10e58 <__fprintf_chk@plt>
   14b04:	mov	r1, r4
   14b08:	mov	r0, #10
   14b0c:	bl	10d2c <fputc_unlocked@plt>
   14b10:	mov	r2, #5
   14b14:	movw	r1, #27048	; 0x69a8
   14b18:	movt	r1, #1
   14b1c:	mov	r0, #0
   14b20:	bl	10d38 <dcgettext@plt>
   14b24:	movw	r3, #27220	; 0x6a54
   14b28:	movt	r3, #1
   14b2c:	mov	r2, r0
   14b30:	mov	r1, #1
   14b34:	mov	r0, r4
   14b38:	bl	10e58 <__fprintf_chk@plt>
   14b3c:	mov	r1, r4
   14b40:	mov	r0, #10
   14b44:	bl	10d2c <fputc_unlocked@plt>
   14b48:	cmp	r6, #9
   14b4c:	ldrls	pc, [pc, r6, lsl #2]
   14b50:	b	14e54 <__assert_fail@plt+0x3f54>
   14b54:	andeq	r4, r1, r0, asr #23
   14b58:	muleq	r1, r8, fp
   14b5c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b60:	andeq	r4, r1, r8, lsl #24
   14b64:	andeq	r4, r1, r4, asr #24
   14b68:	andeq	r4, r1, r8, lsl #25
   14b6c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b70:	andeq	r4, r1, r8, lsr #26
   14b74:	andeq	r4, r1, r4, lsl #27
   14b78:	andeq	r4, r1, r8, ror #27
   14b7c:	str	r3, [sp]
   14b80:	mov	r3, r2
   14b84:	movw	r2, #27036	; 0x699c
   14b88:	movt	r2, #1
   14b8c:	mov	r1, #1
   14b90:	bl	10e58 <__fprintf_chk@plt>
   14b94:	b	14ad0 <__assert_fail@plt+0x3bd0>
   14b98:	mov	r2, #5
   14b9c:	movw	r1, #27256	; 0x6a78
   14ba0:	movt	r1, #1
   14ba4:	mov	r0, #0
   14ba8:	bl	10d38 <dcgettext@plt>
   14bac:	ldr	r3, [r5]
   14bb0:	mov	r2, r0
   14bb4:	mov	r1, #1
   14bb8:	mov	r0, r4
   14bbc:	bl	10e58 <__fprintf_chk@plt>
   14bc0:	add	sp, sp, #32
   14bc4:	ldrd	r4, [sp]
   14bc8:	ldr	r6, [sp, #8]
   14bcc:	add	sp, sp, #12
   14bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd4:	mov	r2, #5
   14bd8:	movw	r1, #27272	; 0x6a88
   14bdc:	movt	r1, #1
   14be0:	mov	r0, #0
   14be4:	bl	10d38 <dcgettext@plt>
   14be8:	ldr	r3, [r5, #4]
   14bec:	str	r3, [sp]
   14bf0:	ldr	r3, [r5]
   14bf4:	mov	r2, r0
   14bf8:	mov	r1, #1
   14bfc:	mov	r0, r4
   14c00:	bl	10e58 <__fprintf_chk@plt>
   14c04:	b	14bc0 <__assert_fail@plt+0x3cc0>
   14c08:	mov	r2, #5
   14c0c:	movw	r1, #27296	; 0x6aa0
   14c10:	movt	r1, #1
   14c14:	mov	r0, #0
   14c18:	bl	10d38 <dcgettext@plt>
   14c1c:	ldr	r3, [r5, #8]
   14c20:	str	r3, [sp, #4]
   14c24:	ldr	r3, [r5, #4]
   14c28:	str	r3, [sp]
   14c2c:	ldr	r3, [r5]
   14c30:	mov	r2, r0
   14c34:	mov	r1, #1
   14c38:	mov	r0, r4
   14c3c:	bl	10e58 <__fprintf_chk@plt>
   14c40:	b	14bc0 <__assert_fail@plt+0x3cc0>
   14c44:	mov	r2, #5
   14c48:	movw	r1, #27324	; 0x6abc
   14c4c:	movt	r1, #1
   14c50:	mov	r0, #0
   14c54:	bl	10d38 <dcgettext@plt>
   14c58:	ldr	r3, [r5, #12]
   14c5c:	str	r3, [sp, #8]
   14c60:	ldr	r3, [r5, #8]
   14c64:	str	r3, [sp, #4]
   14c68:	ldr	r3, [r5, #4]
   14c6c:	str	r3, [sp]
   14c70:	ldr	r3, [r5]
   14c74:	mov	r2, r0
   14c78:	mov	r1, #1
   14c7c:	mov	r0, r4
   14c80:	bl	10e58 <__fprintf_chk@plt>
   14c84:	b	14bc0 <__assert_fail@plt+0x3cc0>
   14c88:	mov	r2, #5
   14c8c:	movw	r1, #27356	; 0x6adc
   14c90:	movt	r1, #1
   14c94:	mov	r0, #0
   14c98:	bl	10d38 <dcgettext@plt>
   14c9c:	ldr	r3, [r5, #16]
   14ca0:	str	r3, [sp, #12]
   14ca4:	ldr	r3, [r5, #12]
   14ca8:	str	r3, [sp, #8]
   14cac:	ldr	r3, [r5, #8]
   14cb0:	str	r3, [sp, #4]
   14cb4:	ldr	r3, [r5, #4]
   14cb8:	str	r3, [sp]
   14cbc:	ldr	r3, [r5]
   14cc0:	mov	r2, r0
   14cc4:	mov	r1, #1
   14cc8:	mov	r0, r4
   14ccc:	bl	10e58 <__fprintf_chk@plt>
   14cd0:	b	14bc0 <__assert_fail@plt+0x3cc0>
   14cd4:	mov	r2, #5
   14cd8:	movw	r1, #27392	; 0x6b00
   14cdc:	movt	r1, #1
   14ce0:	mov	r0, #0
   14ce4:	bl	10d38 <dcgettext@plt>
   14ce8:	ldr	r3, [r5, #20]
   14cec:	str	r3, [sp, #16]
   14cf0:	ldr	r3, [r5, #16]
   14cf4:	str	r3, [sp, #12]
   14cf8:	ldr	r3, [r5, #12]
   14cfc:	str	r3, [sp, #8]
   14d00:	ldr	r3, [r5, #8]
   14d04:	str	r3, [sp, #4]
   14d08:	ldr	r3, [r5, #4]
   14d0c:	str	r3, [sp]
   14d10:	ldr	r3, [r5]
   14d14:	mov	r2, r0
   14d18:	mov	r1, #1
   14d1c:	mov	r0, r4
   14d20:	bl	10e58 <__fprintf_chk@plt>
   14d24:	b	14bc0 <__assert_fail@plt+0x3cc0>
   14d28:	mov	r2, #5
   14d2c:	movw	r1, #27432	; 0x6b28
   14d30:	movt	r1, #1
   14d34:	mov	r0, #0
   14d38:	bl	10d38 <dcgettext@plt>
   14d3c:	ldr	r3, [r5, #24]
   14d40:	str	r3, [sp, #20]
   14d44:	ldr	r3, [r5, #20]
   14d48:	str	r3, [sp, #16]
   14d4c:	ldr	r3, [r5, #16]
   14d50:	str	r3, [sp, #12]
   14d54:	ldr	r3, [r5, #12]
   14d58:	str	r3, [sp, #8]
   14d5c:	ldr	r3, [r5, #8]
   14d60:	str	r3, [sp, #4]
   14d64:	ldr	r3, [r5, #4]
   14d68:	str	r3, [sp]
   14d6c:	ldr	r3, [r5]
   14d70:	mov	r2, r0
   14d74:	mov	r1, #1
   14d78:	mov	r0, r4
   14d7c:	bl	10e58 <__fprintf_chk@plt>
   14d80:	b	14bc0 <__assert_fail@plt+0x3cc0>
   14d84:	mov	r2, #5
   14d88:	movw	r1, #27476	; 0x6b54
   14d8c:	movt	r1, #1
   14d90:	mov	r0, #0
   14d94:	bl	10d38 <dcgettext@plt>
   14d98:	ldr	r3, [r5, #28]
   14d9c:	str	r3, [sp, #24]
   14da0:	ldr	r3, [r5, #24]
   14da4:	str	r3, [sp, #20]
   14da8:	ldr	r3, [r5, #20]
   14dac:	str	r3, [sp, #16]
   14db0:	ldr	r3, [r5, #16]
   14db4:	str	r3, [sp, #12]
   14db8:	ldr	r3, [r5, #12]
   14dbc:	str	r3, [sp, #8]
   14dc0:	ldr	r3, [r5, #8]
   14dc4:	str	r3, [sp, #4]
   14dc8:	ldr	r3, [r5, #4]
   14dcc:	str	r3, [sp]
   14dd0:	ldr	r3, [r5]
   14dd4:	mov	r2, r0
   14dd8:	mov	r1, #1
   14ddc:	mov	r0, r4
   14de0:	bl	10e58 <__fprintf_chk@plt>
   14de4:	b	14bc0 <__assert_fail@plt+0x3cc0>
   14de8:	mov	r2, #5
   14dec:	movw	r1, #27524	; 0x6b84
   14df0:	movt	r1, #1
   14df4:	mov	r0, #0
   14df8:	bl	10d38 <dcgettext@plt>
   14dfc:	ldr	r3, [r5, #32]
   14e00:	str	r3, [sp, #28]
   14e04:	ldr	r3, [r5, #28]
   14e08:	str	r3, [sp, #24]
   14e0c:	ldr	r3, [r5, #24]
   14e10:	str	r3, [sp, #20]
   14e14:	ldr	r3, [r5, #20]
   14e18:	str	r3, [sp, #16]
   14e1c:	ldr	r3, [r5, #16]
   14e20:	str	r3, [sp, #12]
   14e24:	ldr	r3, [r5, #12]
   14e28:	str	r3, [sp, #8]
   14e2c:	ldr	r3, [r5, #8]
   14e30:	str	r3, [sp, #4]
   14e34:	ldr	r3, [r5, #4]
   14e38:	str	r3, [sp]
   14e3c:	ldr	r3, [r5]
   14e40:	mov	r2, r0
   14e44:	mov	r1, #1
   14e48:	mov	r0, r4
   14e4c:	bl	10e58 <__fprintf_chk@plt>
   14e50:	b	14bc0 <__assert_fail@plt+0x3cc0>
   14e54:	mov	r2, #5
   14e58:	movw	r1, #27576	; 0x6bb8
   14e5c:	movt	r1, #1
   14e60:	mov	r0, #0
   14e64:	bl	10d38 <dcgettext@plt>
   14e68:	ldr	r3, [r5, #32]
   14e6c:	str	r3, [sp, #28]
   14e70:	ldr	r3, [r5, #28]
   14e74:	str	r3, [sp, #24]
   14e78:	ldr	r3, [r5, #24]
   14e7c:	str	r3, [sp, #20]
   14e80:	ldr	r3, [r5, #20]
   14e84:	str	r3, [sp, #16]
   14e88:	ldr	r3, [r5, #16]
   14e8c:	str	r3, [sp, #12]
   14e90:	ldr	r3, [r5, #12]
   14e94:	str	r3, [sp, #8]
   14e98:	ldr	r3, [r5, #8]
   14e9c:	str	r3, [sp, #4]
   14ea0:	ldr	r3, [r5, #4]
   14ea4:	str	r3, [sp]
   14ea8:	ldr	r3, [r5]
   14eac:	mov	r2, r0
   14eb0:	mov	r1, #1
   14eb4:	mov	r0, r4
   14eb8:	bl	10e58 <__fprintf_chk@plt>
   14ebc:	b	14bc0 <__assert_fail@plt+0x3cc0>
   14ec0:	strd	r4, [sp, #-12]!
   14ec4:	str	lr, [sp, #8]
   14ec8:	sub	sp, sp, #12
   14ecc:	ldr	r5, [sp, #24]
   14ed0:	ldr	ip, [r5]
   14ed4:	cmp	ip, #0
   14ed8:	beq	14f10 <__assert_fail@plt+0x4010>
   14edc:	mov	lr, r5
   14ee0:	mov	ip, #0
   14ee4:	add	ip, ip, #1
   14ee8:	ldr	r4, [lr, #4]!
   14eec:	cmp	r4, #0
   14ef0:	bne	14ee4 <__assert_fail@plt+0x3fe4>
   14ef4:	str	ip, [sp, #4]
   14ef8:	str	r5, [sp]
   14efc:	bl	14a90 <__assert_fail@plt+0x3b90>
   14f00:	add	sp, sp, #12
   14f04:	ldrd	r4, [sp]
   14f08:	add	sp, sp, #8
   14f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f10:	mov	ip, #0
   14f14:	b	14ef4 <__assert_fail@plt+0x3ff4>
   14f18:	strd	r4, [sp, #-12]!
   14f1c:	str	lr, [sp, #8]
   14f20:	sub	sp, sp, #52	; 0x34
   14f24:	ldr	r5, [sp, #64]	; 0x40
   14f28:	add	r4, sp, #8
   14f2c:	mov	ip, #0
   14f30:	ldr	lr, [r5], #4
   14f34:	str	lr, [r4], #4
   14f38:	cmp	lr, #0
   14f3c:	beq	14f4c <__assert_fail@plt+0x404c>
   14f40:	add	ip, ip, #1
   14f44:	cmp	ip, #10
   14f48:	bne	14f30 <__assert_fail@plt+0x4030>
   14f4c:	str	ip, [sp, #4]
   14f50:	add	ip, sp, #8
   14f54:	str	ip, [sp]
   14f58:	bl	14a90 <__assert_fail@plt+0x3b90>
   14f5c:	add	sp, sp, #52	; 0x34
   14f60:	ldrd	r4, [sp]
   14f64:	add	sp, sp, #8
   14f68:	pop	{pc}		; (ldr pc, [sp], #4)
   14f6c:	push	{r3}		; (str r3, [sp, #-4]!)
   14f70:	push	{lr}		; (str lr, [sp, #-4]!)
   14f74:	sub	sp, sp, #16
   14f78:	add	r3, sp, #24
   14f7c:	str	r3, [sp, #12]
   14f80:	str	r3, [sp]
   14f84:	ldr	r3, [sp, #20]
   14f88:	bl	14f18 <__assert_fail@plt+0x4018>
   14f8c:	add	sp, sp, #16
   14f90:	pop	{lr}		; (ldr lr, [sp], #4)
   14f94:	add	sp, sp, #4
   14f98:	bx	lr
   14f9c:	str	r4, [sp, #-8]!
   14fa0:	str	lr, [sp, #4]
   14fa4:	movw	r3, #29004	; 0x714c
   14fa8:	movt	r3, #2
   14fac:	ldr	r1, [r3]
   14fb0:	mov	r0, #10
   14fb4:	bl	10d2c <fputc_unlocked@plt>
   14fb8:	mov	r2, #5
   14fbc:	movw	r1, #27636	; 0x6bf4
   14fc0:	movt	r1, #1
   14fc4:	mov	r0, #0
   14fc8:	bl	10d38 <dcgettext@plt>
   14fcc:	movw	r2, #27656	; 0x6c08
   14fd0:	movt	r2, #1
   14fd4:	mov	r1, r0
   14fd8:	mov	r0, #1
   14fdc:	bl	10e40 <__printf_chk@plt>
   14fe0:	mov	r2, #5
   14fe4:	movw	r1, #27680	; 0x6c20
   14fe8:	movt	r1, #1
   14fec:	mov	r0, #0
   14ff0:	bl	10d38 <dcgettext@plt>
   14ff4:	movw	r3, #25900	; 0x652c
   14ff8:	movt	r3, #1
   14ffc:	movw	r2, #25940	; 0x6554
   15000:	movt	r2, #1
   15004:	mov	r1, r0
   15008:	mov	r0, #1
   1500c:	bl	10e40 <__printf_chk@plt>
   15010:	mov	r2, #5
   15014:	movw	r1, #27700	; 0x6c34
   15018:	movt	r1, #1
   1501c:	mov	r0, #0
   15020:	bl	10d38 <dcgettext@plt>
   15024:	movw	r2, #27740	; 0x6c5c
   15028:	movt	r2, #1
   1502c:	mov	r1, r0
   15030:	mov	r0, #1
   15034:	bl	10e40 <__printf_chk@plt>
   15038:	ldr	r4, [sp]
   1503c:	add	sp, sp, #4
   15040:	pop	{pc}		; (ldr pc, [sp], #4)
   15044:	str	r4, [sp, #-8]!
   15048:	str	lr, [sp, #4]
   1504c:	bl	15d24 <__assert_fail@plt+0x4e24>
   15050:	cmp	r0, #0
   15054:	beq	15064 <__assert_fail@plt+0x4164>
   15058:	ldr	r4, [sp]
   1505c:	add	sp, sp, #4
   15060:	pop	{pc}		; (ldr pc, [sp], #4)
   15064:	bl	154d8 <__assert_fail@plt+0x45d8>
   15068:	str	r4, [sp, #-8]!
   1506c:	str	lr, [sp, #4]
   15070:	bl	15d24 <__assert_fail@plt+0x4e24>
   15074:	cmp	r0, #0
   15078:	beq	15088 <__assert_fail@plt+0x4188>
   1507c:	ldr	r4, [sp]
   15080:	add	sp, sp, #4
   15084:	pop	{pc}		; (ldr pc, [sp], #4)
   15088:	bl	154d8 <__assert_fail@plt+0x45d8>
   1508c:	str	r4, [sp, #-8]!
   15090:	str	lr, [sp, #4]
   15094:	bl	15044 <__assert_fail@plt+0x4144>
   15098:	ldr	r4, [sp]
   1509c:	add	sp, sp, #4
   150a0:	pop	{pc}		; (ldr pc, [sp], #4)
   150a4:	strd	r4, [sp, #-16]!
   150a8:	str	r6, [sp, #8]
   150ac:	str	lr, [sp, #12]
   150b0:	mov	r5, r0
   150b4:	mov	r4, r1
   150b8:	bl	15d60 <__assert_fail@plt+0x4e60>
   150bc:	cmp	r0, #0
   150c0:	beq	150d4 <__assert_fail@plt+0x41d4>
   150c4:	ldrd	r4, [sp]
   150c8:	ldr	r6, [sp, #8]
   150cc:	add	sp, sp, #12
   150d0:	pop	{pc}		; (ldr pc, [sp], #4)
   150d4:	adds	r4, r4, #0
   150d8:	movne	r4, #1
   150dc:	cmp	r5, #0
   150e0:	moveq	r4, #1
   150e4:	cmp	r4, #0
   150e8:	beq	150c4 <__assert_fail@plt+0x41c4>
   150ec:	bl	154d8 <__assert_fail@plt+0x45d8>
   150f0:	str	r4, [sp, #-8]!
   150f4:	str	lr, [sp, #4]
   150f8:	cmp	r1, #0
   150fc:	orreq	r1, r1, #1
   15100:	bl	15d60 <__assert_fail@plt+0x4e60>
   15104:	cmp	r0, #0
   15108:	beq	15118 <__assert_fail@plt+0x4218>
   1510c:	ldr	r4, [sp]
   15110:	add	sp, sp, #4
   15114:	pop	{pc}		; (ldr pc, [sp], #4)
   15118:	bl	154d8 <__assert_fail@plt+0x45d8>
   1511c:	strd	r4, [sp, #-16]!
   15120:	str	r6, [sp, #8]
   15124:	str	lr, [sp, #12]
   15128:	mov	r4, r0
   1512c:	mov	r6, r1
   15130:	mov	r5, r2
   15134:	bl	15efc <__assert_fail@plt+0x4ffc>
   15138:	cmp	r0, #0
   1513c:	beq	15150 <__assert_fail@plt+0x4250>
   15140:	ldrd	r4, [sp]
   15144:	ldr	r6, [sp, #8]
   15148:	add	sp, sp, #12
   1514c:	pop	{pc}		; (ldr pc, [sp], #4)
   15150:	cmp	r4, #0
   15154:	beq	15164 <__assert_fail@plt+0x4264>
   15158:	cmp	r6, #0
   1515c:	cmpne	r5, #0
   15160:	beq	15140 <__assert_fail@plt+0x4240>
   15164:	bl	154d8 <__assert_fail@plt+0x45d8>
   15168:	str	r4, [sp, #-8]!
   1516c:	str	lr, [sp, #4]
   15170:	bl	1511c <__assert_fail@plt+0x421c>
   15174:	ldr	r4, [sp]
   15178:	add	sp, sp, #4
   1517c:	pop	{pc}		; (ldr pc, [sp], #4)
   15180:	str	r4, [sp, #-8]!
   15184:	str	lr, [sp, #4]
   15188:	mov	ip, r1
   1518c:	mov	r3, r2
   15190:	cmp	r2, #0
   15194:	cmpne	r1, #0
   15198:	moveq	r3, #1
   1519c:	moveq	ip, r3
   151a0:	mov	r2, r3
   151a4:	mov	r1, ip
   151a8:	bl	15efc <__assert_fail@plt+0x4ffc>
   151ac:	cmp	r0, #0
   151b0:	beq	151c0 <__assert_fail@plt+0x42c0>
   151b4:	ldr	r4, [sp]
   151b8:	add	sp, sp, #4
   151bc:	pop	{pc}		; (ldr pc, [sp], #4)
   151c0:	bl	154d8 <__assert_fail@plt+0x45d8>
   151c4:	str	r4, [sp, #-8]!
   151c8:	str	lr, [sp, #4]
   151cc:	mov	r2, r1
   151d0:	mov	r1, r0
   151d4:	mov	r0, #0
   151d8:	bl	1511c <__assert_fail@plt+0x421c>
   151dc:	ldr	r4, [sp]
   151e0:	add	sp, sp, #4
   151e4:	pop	{pc}		; (ldr pc, [sp], #4)
   151e8:	str	r4, [sp, #-8]!
   151ec:	str	lr, [sp, #4]
   151f0:	mov	r2, r1
   151f4:	mov	r1, r0
   151f8:	mov	r0, #0
   151fc:	bl	15180 <__assert_fail@plt+0x4280>
   15200:	ldr	r4, [sp]
   15204:	add	sp, sp, #4
   15208:	pop	{pc}		; (ldr pc, [sp], #4)
   1520c:	strd	r4, [sp, #-16]!
   15210:	str	r6, [sp, #8]
   15214:	str	lr, [sp, #12]
   15218:	mov	r5, r1
   1521c:	ldr	r4, [r1]
   15220:	cmp	r0, #0
   15224:	beq	15254 <__assert_fail@plt+0x4354>
   15228:	lsr	r3, r4, #1
   1522c:	add	r3, r3, #1
   15230:	adds	r4, r4, r3
   15234:	bcs	15270 <__assert_fail@plt+0x4370>
   15238:	mov	r1, r4
   1523c:	bl	1511c <__assert_fail@plt+0x421c>
   15240:	str	r4, [r5]
   15244:	ldrd	r4, [sp]
   15248:	ldr	r6, [sp, #8]
   1524c:	add	sp, sp, #12
   15250:	pop	{pc}		; (ldr pc, [sp], #4)
   15254:	cmp	r4, #0
   15258:	bne	15238 <__assert_fail@plt+0x4338>
   1525c:	mov	r4, #64	; 0x40
   15260:	udiv	r4, r4, r2
   15264:	cmp	r2, #64	; 0x40
   15268:	addhi	r4, r4, #1
   1526c:	b	15238 <__assert_fail@plt+0x4338>
   15270:	bl	154d8 <__assert_fail@plt+0x45d8>
   15274:	str	r4, [sp, #-8]!
   15278:	str	lr, [sp, #4]
   1527c:	mov	r2, #1
   15280:	bl	1520c <__assert_fail@plt+0x430c>
   15284:	ldr	r4, [sp]
   15288:	add	sp, sp, #4
   1528c:	pop	{pc}		; (ldr pc, [sp], #4)
   15290:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15294:	strd	r6, [sp, #8]
   15298:	str	r8, [sp, #16]
   1529c:	str	lr, [sp, #20]
   152a0:	mov	r5, r1
   152a4:	ldr	lr, [sp, #24]
   152a8:	ldr	ip, [r1]
   152ac:	asr	r4, ip, #1
   152b0:	adds	r4, ip, r4
   152b4:	movvs	r1, #1
   152b8:	movvc	r1, #0
   152bc:	cmp	r1, #0
   152c0:	mvnne	r4, #-2147483648	; 0x80000000
   152c4:	mvn	r8, r3
   152c8:	lsr	r8, r8, #31
   152cc:	cmp	r3, r4
   152d0:	movge	r1, #0
   152d4:	andlt	r1, r8, #1
   152d8:	cmp	r1, #0
   152dc:	movne	r4, r3
   152e0:	smull	r6, r7, r4, lr
   152e4:	asr	r1, r6, #31
   152e8:	cmp	r1, r7
   152ec:	bne	15304 <__assert_fail@plt+0x4404>
   152f0:	mov	r1, r6
   152f4:	cmp	r6, #63	; 0x3f
   152f8:	movle	r1, #64	; 0x40
   152fc:	ble	15308 <__assert_fail@plt+0x4408>
   15300:	b	15314 <__assert_fail@plt+0x4414>
   15304:	mvn	r1, #-2147483648	; 0x80000000
   15308:	sdiv	r4, r1, lr
   1530c:	mls	r6, lr, r4, r1
   15310:	sub	r1, r1, r6
   15314:	cmp	r0, #0
   15318:	moveq	r6, #0
   1531c:	streq	r6, [r5]
   15320:	sub	r6, r4, ip
   15324:	cmp	r6, r2
   15328:	bge	15360 <__assert_fail@plt+0x4460>
   1532c:	adds	r2, ip, r2
   15330:	mov	r4, r2
   15334:	bvs	1537c <__assert_fail@plt+0x447c>
   15338:	cmp	r2, r3
   1533c:	movle	r3, #0
   15340:	andgt	r3, r8, #1
   15344:	cmp	r3, #0
   15348:	bne	1537c <__assert_fail@plt+0x447c>
   1534c:	smull	r2, r3, r2, lr
   15350:	asr	ip, r2, #31
   15354:	mov	r1, r2
   15358:	cmp	ip, r3
   1535c:	bne	1537c <__assert_fail@plt+0x447c>
   15360:	bl	150a4 <__assert_fail@plt+0x41a4>
   15364:	str	r4, [r5]
   15368:	ldrd	r4, [sp]
   1536c:	ldrd	r6, [sp, #8]
   15370:	ldr	r8, [sp, #16]
   15374:	add	sp, sp, #20
   15378:	pop	{pc}		; (ldr pc, [sp], #4)
   1537c:	bl	154d8 <__assert_fail@plt+0x45d8>
   15380:	str	r4, [sp, #-8]!
   15384:	str	lr, [sp, #4]
   15388:	bl	15cb0 <__assert_fail@plt+0x4db0>
   1538c:	cmp	r0, #0
   15390:	beq	153a0 <__assert_fail@plt+0x44a0>
   15394:	ldr	r4, [sp]
   15398:	add	sp, sp, #4
   1539c:	pop	{pc}		; (ldr pc, [sp], #4)
   153a0:	bl	154d8 <__assert_fail@plt+0x45d8>
   153a4:	str	r4, [sp, #-8]!
   153a8:	str	lr, [sp, #4]
   153ac:	mov	r1, #1
   153b0:	bl	15380 <__assert_fail@plt+0x4480>
   153b4:	ldr	r4, [sp]
   153b8:	add	sp, sp, #4
   153bc:	pop	{pc}		; (ldr pc, [sp], #4)
   153c0:	str	r4, [sp, #-8]!
   153c4:	str	lr, [sp, #4]
   153c8:	bl	15cb0 <__assert_fail@plt+0x4db0>
   153cc:	cmp	r0, #0
   153d0:	beq	153e0 <__assert_fail@plt+0x44e0>
   153d4:	ldr	r4, [sp]
   153d8:	add	sp, sp, #4
   153dc:	pop	{pc}		; (ldr pc, [sp], #4)
   153e0:	bl	154d8 <__assert_fail@plt+0x45d8>
   153e4:	str	r4, [sp, #-8]!
   153e8:	str	lr, [sp, #4]
   153ec:	mov	r1, #1
   153f0:	bl	153c0 <__assert_fail@plt+0x44c0>
   153f4:	ldr	r4, [sp]
   153f8:	add	sp, sp, #4
   153fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15400:	strd	r4, [sp, #-16]!
   15404:	str	r6, [sp, #8]
   15408:	str	lr, [sp, #12]
   1540c:	mov	r5, r0
   15410:	mov	r4, r1
   15414:	mov	r0, r1
   15418:	bl	15044 <__assert_fail@plt+0x4144>
   1541c:	mov	r2, r4
   15420:	mov	r1, r5
   15424:	bl	10cfc <memcpy@plt>
   15428:	ldrd	r4, [sp]
   1542c:	ldr	r6, [sp, #8]
   15430:	add	sp, sp, #12
   15434:	pop	{pc}		; (ldr pc, [sp], #4)
   15438:	strd	r4, [sp, #-16]!
   1543c:	str	r6, [sp, #8]
   15440:	str	lr, [sp, #12]
   15444:	mov	r5, r0
   15448:	mov	r4, r1
   1544c:	mov	r0, r1
   15450:	bl	15068 <__assert_fail@plt+0x4168>
   15454:	mov	r2, r4
   15458:	mov	r1, r5
   1545c:	bl	10cfc <memcpy@plt>
   15460:	ldrd	r4, [sp]
   15464:	ldr	r6, [sp, #8]
   15468:	add	sp, sp, #12
   1546c:	pop	{pc}		; (ldr pc, [sp], #4)
   15470:	strd	r4, [sp, #-16]!
   15474:	str	r6, [sp, #8]
   15478:	str	lr, [sp, #12]
   1547c:	mov	r5, r0
   15480:	mov	r4, r1
   15484:	add	r0, r1, #1
   15488:	bl	15068 <__assert_fail@plt+0x4168>
   1548c:	mov	r2, #0
   15490:	strb	r2, [r0, r4]
   15494:	mov	r2, r4
   15498:	mov	r1, r5
   1549c:	bl	10cfc <memcpy@plt>
   154a0:	ldrd	r4, [sp]
   154a4:	ldr	r6, [sp, #8]
   154a8:	add	sp, sp, #12
   154ac:	pop	{pc}		; (ldr pc, [sp], #4)
   154b0:	str	r4, [sp, #-8]!
   154b4:	str	lr, [sp, #4]
   154b8:	mov	r4, r0
   154bc:	bl	10e04 <strlen@plt>
   154c0:	add	r1, r0, #1
   154c4:	mov	r0, r4
   154c8:	bl	15400 <__assert_fail@plt+0x4500>
   154cc:	ldr	r4, [sp]
   154d0:	add	sp, sp, #4
   154d4:	pop	{pc}		; (ldr pc, [sp], #4)
   154d8:	str	r4, [sp, #-8]!
   154dc:	str	lr, [sp, #4]
   154e0:	movw	r3, #28908	; 0x70ec
   154e4:	movt	r3, #2
   154e8:	ldr	r4, [r3]
   154ec:	mov	r2, #5
   154f0:	movw	r1, #27820	; 0x6cac
   154f4:	movt	r1, #1
   154f8:	mov	r0, #0
   154fc:	bl	10d38 <dcgettext@plt>
   15500:	mov	r3, r0
   15504:	movw	r2, #26160	; 0x6630
   15508:	movt	r2, #1
   1550c:	mov	r1, #0
   15510:	mov	r0, r4
   15514:	bl	10da4 <error@plt>
   15518:	bl	10ef4 <abort@plt>
   1551c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15520:	strd	r6, [sp, #8]
   15524:	strd	r8, [sp, #16]
   15528:	strd	sl, [sp, #24]
   1552c:	str	lr, [sp, #32]
   15530:	sub	sp, sp, #20
   15534:	cmp	r2, #0
   15538:	beq	15650 <__assert_fail@plt+0x4750>
   1553c:	sub	ip, r2, #1
   15540:	mov	lr, #0
   15544:	mov	r2, r1
   15548:	asr	r3, r1, #31
   1554c:	strd	r2, [sp, #8]
   15550:	mov	r8, lr
   15554:	b	155f8 <__assert_fail@plt+0x46f8>
   15558:	umull	r4, r5, r2, r1
   1555c:	umull	r6, r7, r1, r3
   15560:	strd	r6, [sp]
   15564:	cmp	r3, #0
   15568:	bge	15584 <__assert_fail@plt+0x4684>
   1556c:	mov	sl, #0
   15570:	subs	r6, r6, sl
   15574:	str	r6, [sp]
   15578:	ldr	r6, [sp, #4]
   1557c:	sbc	r6, r6, r1
   15580:	str	r6, [sp, #4]
   15584:	cmp	r1, #0
   15588:	bge	155a4 <__assert_fail@plt+0x46a4>
   1558c:	ldr	r6, [sp]
   15590:	subs	r6, r6, r2
   15594:	str	r6, [sp]
   15598:	ldr	r6, [sp, #4]
   1559c:	sbc	r6, r6, r3
   155a0:	str	r6, [sp, #4]
   155a4:	mov	sl, #0
   155a8:	ldr	r6, [sp]
   155ac:	adds	r6, r6, r5
   155b0:	ldr	r7, [sp, #4]
   155b4:	adc	sl, r7, sl
   155b8:	cmp	sl, r6, asr #31
   155bc:	bne	155c8 <__assert_fail@plt+0x46c8>
   155c0:	mov	r5, r6
   155c4:	b	15614 <__assert_fail@plt+0x4714>
   155c8:	ldr	r4, [sp, #12]
   155cc:	mul	r5, r2, r4
   155d0:	mla	r6, r1, r3, r5
   155d4:	umull	sl, fp, r2, r1
   155d8:	add	r5, r6, fp
   155dc:	mov	r4, sl
   155e0:	mov	r9, #1
   155e4:	b	15614 <__assert_fail@plt+0x4714>
   155e8:	orr	lr, lr, r3
   155ec:	sub	ip, ip, #1
   155f0:	cmn	ip, #1
   155f4:	beq	15654 <__assert_fail@plt+0x4754>
   155f8:	ldrd	r2, [r0]
   155fc:	mov	r9, r8
   15600:	cmp	r3, r2, asr #31
   15604:	bne	15558 <__assert_fail@plt+0x4658>
   15608:	smull	r6, r7, r2, r1
   1560c:	mov	r4, r6
   15610:	mov	r5, r7
   15614:	cmp	r9, #0
   15618:	streq	r4, [r0]
   1561c:	streq	r5, [r0, #4]
   15620:	moveq	r3, r8
   15624:	beq	155e8 <__assert_fail@plt+0x46e8>
   15628:	cmp	r2, #0
   1562c:	sbcs	r3, r3, #0
   15630:	mvnge	r2, #0
   15634:	mvnge	r3, #-2147483648	; 0x80000000
   15638:	movlt	r2, #0
   1563c:	movlt	r3, #-2147483648	; 0x80000000
   15640:	str	r2, [r0]
   15644:	str	r3, [r0, #4]
   15648:	mov	r3, #1
   1564c:	b	155e8 <__assert_fail@plt+0x46e8>
   15650:	mov	lr, #0
   15654:	mov	r0, lr
   15658:	add	sp, sp, #20
   1565c:	ldrd	r4, [sp]
   15660:	ldrd	r6, [sp, #8]
   15664:	ldrd	r8, [sp, #16]
   15668:	ldrd	sl, [sp, #24]
   1566c:	add	sp, sp, #32
   15670:	pop	{pc}		; (ldr pc, [sp], #4)
   15674:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15678:	strd	r6, [sp, #8]
   1567c:	strd	r8, [sp, #16]
   15680:	strd	sl, [sp, #24]
   15684:	str	lr, [sp, #32]
   15688:	sub	sp, sp, #20
   1568c:	cmp	r2, #36	; 0x24
   15690:	bhi	156fc <__assert_fail@plt+0x47fc>
   15694:	mov	r5, r0
   15698:	mov	r4, r1
   1569c:	mov	r6, r2
   156a0:	mov	r8, r3
   156a4:	cmp	r1, #0
   156a8:	addeq	r4, sp, #12
   156ac:	bl	10e1c <__errno_location@plt>
   156b0:	mov	r7, r0
   156b4:	mov	r3, #0
   156b8:	str	r3, [r0]
   156bc:	mov	r2, r6
   156c0:	mov	r1, r4
   156c4:	mov	r0, r5
   156c8:	bl	10eb8 <__strtoll_internal@plt>
   156cc:	strd	r0, [sp]
   156d0:	ldr	r6, [r4]
   156d4:	cmp	r6, r5
   156d8:	beq	1571c <__assert_fail@plt+0x481c>
   156dc:	ldr	r3, [r7]
   156e0:	cmp	r3, #0
   156e4:	beq	15840 <__assert_fail@plt+0x4940>
   156e8:	cmp	r3, #34	; 0x22
   156ec:	moveq	r5, #1
   156f0:	beq	15844 <__assert_fail@plt+0x4944>
   156f4:	mov	r5, #4
   156f8:	b	15868 <__assert_fail@plt+0x4968>
   156fc:	movw	r3, #27840	; 0x6cc0
   15700:	movt	r3, #1
   15704:	mov	r2, #85	; 0x55
   15708:	movw	r1, #27852	; 0x6ccc
   1570c:	movt	r1, #1
   15710:	movw	r0, #27868	; 0x6cdc
   15714:	movt	r0, #1
   15718:	bl	10f00 <__assert_fail@plt>
   1571c:	ldr	r3, [sp, #56]	; 0x38
   15720:	cmp	r3, #0
   15724:	beq	15ca0 <__assert_fail@plt+0x4da0>
   15728:	ldrb	r1, [r5]
   1572c:	cmp	r1, #0
   15730:	moveq	r5, #4
   15734:	beq	15868 <__assert_fail@plt+0x4968>
   15738:	mov	r0, r3
   1573c:	bl	10e10 <strchr@plt>
   15740:	cmp	r0, #0
   15744:	beq	15ca8 <__assert_fail@plt+0x4da8>
   15748:	mov	r2, #1
   1574c:	mov	r3, #0
   15750:	strd	r2, [sp]
   15754:	ldrb	r7, [r6]
   15758:	mov	r5, #0
   1575c:	mov	r1, r7
   15760:	ldr	r0, [sp, #56]	; 0x38
   15764:	bl	10e10 <strchr@plt>
   15768:	cmp	r0, #0
   1576c:	beq	15888 <__assert_fail@plt+0x4988>
   15770:	sub	r3, r7, #69	; 0x45
   15774:	cmp	r3, #47	; 0x2f
   15778:	ldrls	pc, [pc, r3, lsl #2]
   1577c:	b	159d4 <__assert_fail@plt+0x4ad4>
   15780:	muleq	r1, r8, r8
   15784:	ldrdeq	r5, [r1], -r4
   15788:	muleq	r1, r8, r8
   1578c:	ldrdeq	r5, [r1], -r4
   15790:	ldrdeq	r5, [r1], -r4
   15794:	ldrdeq	r5, [r1], -r4
   15798:	muleq	r1, r8, r8
   1579c:	ldrdeq	r5, [r1], -r4
   157a0:	muleq	r1, r8, r8
   157a4:	ldrdeq	r5, [r1], -r4
   157a8:	ldrdeq	r5, [r1], -r4
   157ac:	muleq	r1, r8, r8
   157b0:	ldrdeq	r5, [r1], -r4
   157b4:	ldrdeq	r5, [r1], -r4
   157b8:	ldrdeq	r5, [r1], -r4
   157bc:	muleq	r1, r8, r8
   157c0:	ldrdeq	r5, [r1], -r4
   157c4:	ldrdeq	r5, [r1], -r4
   157c8:	ldrdeq	r5, [r1], -r4
   157cc:	ldrdeq	r5, [r1], -r4
   157d0:	muleq	r1, r8, r8
   157d4:	muleq	r1, r8, r8
   157d8:	ldrdeq	r5, [r1], -r4
   157dc:	ldrdeq	r5, [r1], -r4
   157e0:	ldrdeq	r5, [r1], -r4
   157e4:	ldrdeq	r5, [r1], -r4
   157e8:	ldrdeq	r5, [r1], -r4
   157ec:	ldrdeq	r5, [r1], -r4
   157f0:	ldrdeq	r5, [r1], -r4
   157f4:	ldrdeq	r5, [r1], -r4
   157f8:	ldrdeq	r5, [r1], -r4
   157fc:	ldrdeq	r5, [r1], -r4
   15800:	ldrdeq	r5, [r1], -r4
   15804:	ldrdeq	r5, [r1], -r4
   15808:	muleq	r1, r8, r8
   1580c:	ldrdeq	r5, [r1], -r4
   15810:	ldrdeq	r5, [r1], -r4
   15814:	ldrdeq	r5, [r1], -r4
   15818:	muleq	r1, r8, r8
   1581c:	ldrdeq	r5, [r1], -r4
   15820:	muleq	r1, r8, r8
   15824:	ldrdeq	r5, [r1], -r4
   15828:	ldrdeq	r5, [r1], -r4
   1582c:	ldrdeq	r5, [r1], -r4
   15830:	ldrdeq	r5, [r1], -r4
   15834:	ldrdeq	r5, [r1], -r4
   15838:	ldrdeq	r5, [r1], -r4
   1583c:	muleq	r1, r8, r8
   15840:	mov	r5, #0
   15844:	ldr	r3, [sp, #56]	; 0x38
   15848:	cmp	r3, #0
   1584c:	strdeq	r0, [r8]
   15850:	beq	15868 <__assert_fail@plt+0x4968>
   15854:	ldrb	r7, [r6]
   15858:	cmp	r7, #0
   1585c:	bne	1575c <__assert_fail@plt+0x485c>
   15860:	ldrd	r2, [sp]
   15864:	strd	r2, [r8]
   15868:	mov	r0, r5
   1586c:	add	sp, sp, #20
   15870:	ldrd	r4, [sp]
   15874:	ldrd	r6, [sp, #8]
   15878:	ldrd	r8, [sp, #16]
   1587c:	ldrd	sl, [sp, #24]
   15880:	add	sp, sp, #32
   15884:	pop	{pc}		; (ldr pc, [sp], #4)
   15888:	ldrd	r2, [sp]
   1588c:	strd	r2, [r8]
   15890:	orr	r5, r5, #2
   15894:	b	15868 <__assert_fail@plt+0x4968>
   15898:	mov	r1, #48	; 0x30
   1589c:	ldr	r0, [sp, #56]	; 0x38
   158a0:	bl	10e10 <strchr@plt>
   158a4:	cmp	r0, #0
   158a8:	beq	159e0 <__assert_fail@plt+0x4ae0>
   158ac:	ldrb	r3, [r6, #1]
   158b0:	cmp	r3, #68	; 0x44
   158b4:	beq	159ec <__assert_fail@plt+0x4aec>
   158b8:	cmp	r3, #105	; 0x69
   158bc:	beq	159bc <__assert_fail@plt+0x4abc>
   158c0:	cmp	r3, #66	; 0x42
   158c4:	moveq	r6, #2
   158c8:	movne	r6, #1
   158cc:	moveq	r1, #1000	; 0x3e8
   158d0:	movne	r1, #1024	; 0x400
   158d4:	sub	r7, r7, #66	; 0x42
   158d8:	cmp	r7, #53	; 0x35
   158dc:	ldrls	pc, [pc, r7, lsl #2]
   158e0:	b	15c6c <__assert_fail@plt+0x4d6c>
   158e4:	muleq	r1, ip, sl
   158e8:	andeq	r5, r1, ip, ror #24
   158ec:	andeq	r5, r1, ip, ror #24
   158f0:	andeq	r5, r1, r0, asr #22
   158f4:	andeq	r5, r1, ip, ror #24
   158f8:	andeq	r5, r1, r0, asr fp
   158fc:	andeq	r5, r1, ip, ror #24
   15900:	andeq	r5, r1, ip, ror #24
   15904:	andeq	r5, r1, ip, ror #24
   15908:	andeq	r5, r1, r0, ror #22
   1590c:	andeq	r5, r1, ip, ror #24
   15910:	andeq	r5, r1, r0, ror fp
   15914:	andeq	r5, r1, ip, ror #24
   15918:	andeq	r5, r1, ip, ror #24
   1591c:	andeq	r5, r1, r0, lsl #23
   15920:	andeq	r5, r1, ip, ror #24
   15924:	andeq	r5, r1, ip, ror #24
   15928:	andeq	r5, r1, ip, ror #24
   1592c:	muleq	r1, r0, fp
   15930:	andeq	r5, r1, ip, ror #24
   15934:	andeq	r5, r1, ip, ror #24
   15938:	andeq	r5, r1, ip, ror #24
   1593c:	andeq	r5, r1, ip, ror #24
   15940:	andeq	r5, r1, ip, asr #24
   15944:	andeq	r5, r1, ip, asr ip
   15948:	andeq	r5, r1, ip, ror #24
   1594c:	andeq	r5, r1, ip, ror #24
   15950:	andeq	r5, r1, ip, ror #24
   15954:	andeq	r5, r1, ip, ror #24
   15958:	andeq	r5, r1, ip, ror #24
   1595c:	andeq	r5, r1, ip, ror #24
   15960:	andeq	r5, r1, ip, ror #24
   15964:	strdeq	r5, [r1], -r8
   15968:	andeq	r5, r1, ip, ror ip
   1596c:	andeq	r5, r1, ip, ror #24
   15970:	andeq	r5, r1, ip, ror #24
   15974:	andeq	r5, r1, ip, ror #24
   15978:	andeq	r5, r1, r0, asr fp
   1597c:	andeq	r5, r1, ip, ror #24
   15980:	andeq	r5, r1, ip, ror #24
   15984:	andeq	r5, r1, ip, ror #24
   15988:	andeq	r5, r1, r0, ror #22
   1598c:	andeq	r5, r1, ip, ror #24
   15990:	andeq	r5, r1, r0, ror fp
   15994:	andeq	r5, r1, ip, ror #24
   15998:	andeq	r5, r1, ip, ror #24
   1599c:	andeq	r5, r1, ip, ror #24
   159a0:	andeq	r5, r1, ip, ror #24
   159a4:	andeq	r5, r1, ip, ror #24
   159a8:	andeq	r5, r1, ip, ror #24
   159ac:	muleq	r1, r0, fp
   159b0:	andeq	r5, r1, ip, ror #24
   159b4:	andeq	r5, r1, ip, ror #24
   159b8:	andeq	r5, r1, r0, lsr #23
   159bc:	ldrb	r3, [r6, #2]
   159c0:	cmp	r3, #66	; 0x42
   159c4:	movne	r6, #1
   159c8:	moveq	r6, #3
   159cc:	mov	r1, #1024	; 0x400
   159d0:	b	158d4 <__assert_fail@plt+0x49d4>
   159d4:	mov	r6, #1
   159d8:	mov	r1, #1024	; 0x400
   159dc:	b	158d4 <__assert_fail@plt+0x49d4>
   159e0:	mov	r6, #1
   159e4:	mov	r1, #1024	; 0x400
   159e8:	b	158d4 <__assert_fail@plt+0x49d4>
   159ec:	mov	r6, #2
   159f0:	mov	r1, #1000	; 0x3e8
   159f4:	b	158d4 <__assert_fail@plt+0x49d4>
   159f8:	ldrd	r2, [sp]
   159fc:	mov	ip, #0
   15a00:	cmp	r3, r2, asr #31
   15a04:	bne	15a4c <__assert_fail@plt+0x4b4c>
   15a08:	lsl	r1, r3, #9
   15a0c:	lsl	r0, r2, #9
   15a10:	orr	r1, r1, r2, lsr #23
   15a14:	cmp	ip, #0
   15a18:	streq	r0, [sp]
   15a1c:	streq	r1, [sp, #4]
   15a20:	moveq	r0, #0
   15a24:	beq	15c80 <__assert_fail@plt+0x4d80>
   15a28:	cmp	r2, #0
   15a2c:	sbcs	r3, r3, #0
   15a30:	mvnge	r2, #0
   15a34:	mvnge	r3, #-2147483648	; 0x80000000
   15a38:	movlt	r2, #0
   15a3c:	movlt	r3, #-2147483648	; 0x80000000
   15a40:	strd	r2, [sp]
   15a44:	mov	r0, #1
   15a48:	b	15c80 <__assert_fail@plt+0x4d80>
   15a4c:	mov	lr, #512	; 0x200
   15a50:	lsr	r7, r2, #23
   15a54:	lsl	r0, r2, #9
   15a58:	umull	sl, fp, lr, r3
   15a5c:	cmp	r3, #0
   15a60:	bge	15a70 <__assert_fail@plt+0x4b70>
   15a64:	mov	r1, #0
   15a68:	subs	sl, sl, r1
   15a6c:	sbc	fp, fp, lr
   15a70:	mov	r1, #0
   15a74:	mov	lr, r1
   15a78:	adds	r1, sl, r7
   15a7c:	adc	lr, fp, lr
   15a80:	cmp	lr, r1, asr #31
   15a84:	beq	15a14 <__assert_fail@plt+0x4b14>
   15a88:	lsl	r1, r3, #9
   15a8c:	lsl	r0, r2, #9
   15a90:	orr	r1, r1, r2, lsr #23
   15a94:	mov	ip, #1
   15a98:	b	15a14 <__assert_fail@plt+0x4b14>
   15a9c:	ldrd	r2, [sp]
   15aa0:	mov	ip, #0
   15aa4:	cmp	r3, r2, asr #31
   15aa8:	bne	15af0 <__assert_fail@plt+0x4bf0>
   15aac:	lsl	r1, r3, #10
   15ab0:	lsl	r0, r2, #10
   15ab4:	orr	r1, r1, r2, lsr #22
   15ab8:	cmp	ip, #0
   15abc:	streq	r0, [sp]
   15ac0:	streq	r1, [sp, #4]
   15ac4:	moveq	r0, #0
   15ac8:	beq	15c80 <__assert_fail@plt+0x4d80>
   15acc:	cmp	r2, #0
   15ad0:	sbcs	r3, r3, #0
   15ad4:	mvnge	r2, #0
   15ad8:	mvnge	r3, #-2147483648	; 0x80000000
   15adc:	movlt	r2, #0
   15ae0:	movlt	r3, #-2147483648	; 0x80000000
   15ae4:	strd	r2, [sp]
   15ae8:	mov	r0, #1
   15aec:	b	15c80 <__assert_fail@plt+0x4d80>
   15af0:	mov	lr, #1024	; 0x400
   15af4:	lsr	r7, r2, #22
   15af8:	lsl	r0, r2, #10
   15afc:	umull	sl, fp, lr, r3
   15b00:	cmp	r3, #0
   15b04:	bge	15b14 <__assert_fail@plt+0x4c14>
   15b08:	mov	r1, #0
   15b0c:	subs	sl, sl, r1
   15b10:	sbc	fp, fp, lr
   15b14:	mov	r1, #0
   15b18:	mov	lr, r1
   15b1c:	adds	r1, sl, r7
   15b20:	adc	lr, fp, lr
   15b24:	cmp	lr, r1, asr #31
   15b28:	beq	15ab8 <__assert_fail@plt+0x4bb8>
   15b2c:	lsl	r1, r3, #10
   15b30:	lsl	r0, r2, #10
   15b34:	orr	r1, r1, r2, lsr #22
   15b38:	mov	ip, #1
   15b3c:	b	15ab8 <__assert_fail@plt+0x4bb8>
   15b40:	mov	r2, #6
   15b44:	mov	r0, sp
   15b48:	bl	1551c <__assert_fail@plt+0x461c>
   15b4c:	b	15c80 <__assert_fail@plt+0x4d80>
   15b50:	mov	r2, #3
   15b54:	mov	r0, sp
   15b58:	bl	1551c <__assert_fail@plt+0x461c>
   15b5c:	b	15c80 <__assert_fail@plt+0x4d80>
   15b60:	mov	r2, #1
   15b64:	mov	r0, sp
   15b68:	bl	1551c <__assert_fail@plt+0x461c>
   15b6c:	b	15c80 <__assert_fail@plt+0x4d80>
   15b70:	mov	r2, #2
   15b74:	mov	r0, sp
   15b78:	bl	1551c <__assert_fail@plt+0x461c>
   15b7c:	b	15c80 <__assert_fail@plt+0x4d80>
   15b80:	mov	r2, #5
   15b84:	mov	r0, sp
   15b88:	bl	1551c <__assert_fail@plt+0x461c>
   15b8c:	b	15c80 <__assert_fail@plt+0x4d80>
   15b90:	mov	r2, #4
   15b94:	mov	r0, sp
   15b98:	bl	1551c <__assert_fail@plt+0x461c>
   15b9c:	b	15c80 <__assert_fail@plt+0x4d80>
   15ba0:	ldrd	r2, [sp]
   15ba4:	mov	lr, #0
   15ba8:	cmp	r3, r2, asr #31
   15bac:	bne	15bf0 <__assert_fail@plt+0x4cf0>
   15bb0:	adds	r0, r2, r2
   15bb4:	adc	r1, r3, r3
   15bb8:	cmp	lr, #0
   15bbc:	streq	r0, [sp]
   15bc0:	streq	r1, [sp, #4]
   15bc4:	moveq	r0, #0
   15bc8:	beq	15c80 <__assert_fail@plt+0x4d80>
   15bcc:	cmp	r2, #0
   15bd0:	sbcs	r3, r3, #0
   15bd4:	mvnge	r2, #0
   15bd8:	mvnge	r3, #-2147483648	; 0x80000000
   15bdc:	movlt	r2, #0
   15be0:	movlt	r3, #-2147483648	; 0x80000000
   15be4:	strd	r2, [sp]
   15be8:	mov	r0, #1
   15bec:	b	15c80 <__assert_fail@plt+0x4d80>
   15bf0:	mov	ip, #2
   15bf4:	mov	r1, #0
   15bf8:	adds	r7, r2, r2
   15bfc:	adc	sl, r1, r1
   15c00:	umull	r0, r1, ip, r3
   15c04:	cmp	r3, #0
   15c08:	bge	15c18 <__assert_fail@plt+0x4d18>
   15c0c:	mov	r9, #0
   15c10:	subs	r0, r0, r9
   15c14:	sbc	r1, r1, ip
   15c18:	mov	ip, #0
   15c1c:	mov	r9, ip
   15c20:	adds	ip, r0, sl
   15c24:	adc	r9, r1, r9
   15c28:	cmp	r9, ip, asr #31
   15c2c:	bne	15c3c <__assert_fail@plt+0x4d3c>
   15c30:	mov	r0, r7
   15c34:	mov	r1, ip
   15c38:	b	15bb8 <__assert_fail@plt+0x4cb8>
   15c3c:	adds	r0, r2, r2
   15c40:	adc	r1, r3, r3
   15c44:	mov	lr, #1
   15c48:	b	15bb8 <__assert_fail@plt+0x4cb8>
   15c4c:	mov	r2, #8
   15c50:	mov	r0, sp
   15c54:	bl	1551c <__assert_fail@plt+0x461c>
   15c58:	b	15c80 <__assert_fail@plt+0x4d80>
   15c5c:	mov	r2, #7
   15c60:	mov	r0, sp
   15c64:	bl	1551c <__assert_fail@plt+0x461c>
   15c68:	b	15c80 <__assert_fail@plt+0x4d80>
   15c6c:	ldrd	r2, [sp]
   15c70:	strd	r2, [r8]
   15c74:	orr	r5, r5, #2
   15c78:	b	15868 <__assert_fail@plt+0x4968>
   15c7c:	mov	r0, #0
   15c80:	orr	r5, r5, r0
   15c84:	ldr	r3, [r4]
   15c88:	add	r2, r3, r6
   15c8c:	str	r2, [r4]
   15c90:	ldrb	r3, [r3, r6]
   15c94:	cmp	r3, #0
   15c98:	orrne	r5, r5, #2
   15c9c:	b	15860 <__assert_fail@plt+0x4960>
   15ca0:	mov	r5, #4
   15ca4:	b	15868 <__assert_fail@plt+0x4968>
   15ca8:	mov	r5, #4
   15cac:	b	15868 <__assert_fail@plt+0x4968>
   15cb0:	strd	r4, [sp, #-16]!
   15cb4:	str	r6, [sp, #8]
   15cb8:	str	lr, [sp, #12]
   15cbc:	cmp	r1, #0
   15cc0:	cmpne	r0, #0
   15cc4:	beq	15d00 <__assert_fail@plt+0x4e00>
   15cc8:	mov	r2, r0
   15ccc:	mov	r3, r1
   15cd0:	umull	r4, r5, r0, r1
   15cd4:	adds	r1, r5, #0
   15cd8:	movne	r1, #1
   15cdc:	cmp	r4, #0
   15ce0:	movlt	r1, #1
   15ce4:	cmp	r1, #0
   15ce8:	beq	15d08 <__assert_fail@plt+0x4e08>
   15cec:	bl	10e1c <__errno_location@plt>
   15cf0:	mov	r3, #12
   15cf4:	str	r3, [r0]
   15cf8:	mov	r0, #0
   15cfc:	b	15d14 <__assert_fail@plt+0x4e14>
   15d00:	mov	r3, #1
   15d04:	mov	r2, r3
   15d08:	mov	r1, r3
   15d0c:	mov	r0, r2
   15d10:	bl	10c9c <calloc@plt>
   15d14:	ldrd	r4, [sp]
   15d18:	ldr	r6, [sp, #8]
   15d1c:	add	sp, sp, #12
   15d20:	pop	{pc}		; (ldr pc, [sp], #4)
   15d24:	str	r4, [sp, #-8]!
   15d28:	str	lr, [sp, #4]
   15d2c:	cmp	r0, #0
   15d30:	beq	15d4c <__assert_fail@plt+0x4e4c>
   15d34:	bge	15d50 <__assert_fail@plt+0x4e50>
   15d38:	bl	10e1c <__errno_location@plt>
   15d3c:	mov	r3, #12
   15d40:	str	r3, [r0]
   15d44:	mov	r0, #0
   15d48:	b	15d54 <__assert_fail@plt+0x4e54>
   15d4c:	mov	r0, #1
   15d50:	bl	10db0 <malloc@plt>
   15d54:	ldr	r4, [sp]
   15d58:	add	sp, sp, #4
   15d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d60:	str	r4, [sp, #-8]!
   15d64:	str	lr, [sp, #4]
   15d68:	cmp	r0, #0
   15d6c:	beq	15d90 <__assert_fail@plt+0x4e90>
   15d70:	cmp	r1, #0
   15d74:	beq	15d9c <__assert_fail@plt+0x4e9c>
   15d78:	cmp	r1, #0
   15d7c:	blt	15da8 <__assert_fail@plt+0x4ea8>
   15d80:	bl	10d44 <realloc@plt>
   15d84:	ldr	r4, [sp]
   15d88:	add	sp, sp, #4
   15d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d90:	mov	r0, r1
   15d94:	bl	15d24 <__assert_fail@plt+0x4e24>
   15d98:	b	15d84 <__assert_fail@plt+0x4e84>
   15d9c:	bl	12654 <__assert_fail@plt+0x1754>
   15da0:	mov	r0, #0
   15da4:	b	15d84 <__assert_fail@plt+0x4e84>
   15da8:	bl	10e1c <__errno_location@plt>
   15dac:	mov	r3, #12
   15db0:	str	r3, [r0]
   15db4:	mov	r0, #0
   15db8:	b	15d84 <__assert_fail@plt+0x4e84>
   15dbc:	strd	r4, [sp, #-16]!
   15dc0:	str	r6, [sp, #8]
   15dc4:	str	lr, [sp, #12]
   15dc8:	mov	r5, r0
   15dcc:	bl	10d8c <__fpending@plt>
   15dd0:	mov	r6, r0
   15dd4:	ldr	r4, [r5]
   15dd8:	and	r4, r4, #32
   15ddc:	mov	r0, r5
   15de0:	bl	12528 <__assert_fail@plt+0x1628>
   15de4:	cmp	r4, #0
   15de8:	bne	15e1c <__assert_fail@plt+0x4f1c>
   15dec:	cmp	r0, #0
   15df0:	beq	15e0c <__assert_fail@plt+0x4f0c>
   15df4:	cmp	r6, #0
   15df8:	bne	15e38 <__assert_fail@plt+0x4f38>
   15dfc:	bl	10e1c <__errno_location@plt>
   15e00:	ldr	r0, [r0]
   15e04:	subs	r0, r0, #9
   15e08:	mvnne	r0, #0
   15e0c:	ldrd	r4, [sp]
   15e10:	ldr	r6, [sp, #8]
   15e14:	add	sp, sp, #12
   15e18:	pop	{pc}		; (ldr pc, [sp], #4)
   15e1c:	cmp	r0, #0
   15e20:	bne	15e40 <__assert_fail@plt+0x4f40>
   15e24:	bl	10e1c <__errno_location@plt>
   15e28:	mov	r3, #0
   15e2c:	str	r3, [r0]
   15e30:	mvn	r0, #0
   15e34:	b	15e0c <__assert_fail@plt+0x4f0c>
   15e38:	mvn	r0, #0
   15e3c:	b	15e0c <__assert_fail@plt+0x4f0c>
   15e40:	mvn	r0, #0
   15e44:	b	15e0c <__assert_fail@plt+0x4f0c>
   15e48:	str	r4, [sp, #-8]!
   15e4c:	str	lr, [sp, #4]
   15e50:	mov	r0, #14
   15e54:	bl	10eac <nl_langinfo@plt>
   15e58:	cmp	r0, #0
   15e5c:	beq	15e80 <__assert_fail@plt+0x4f80>
   15e60:	ldrb	r2, [r0]
   15e64:	movw	r3, #27908	; 0x6d04
   15e68:	movt	r3, #1
   15e6c:	cmp	r2, #0
   15e70:	moveq	r0, r3
   15e74:	ldr	r4, [sp]
   15e78:	add	sp, sp, #4
   15e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e80:	movw	r0, #27908	; 0x6d04
   15e84:	movt	r0, #1
   15e88:	b	15e74 <__assert_fail@plt+0x4f74>
   15e8c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15e90:	strd	r6, [sp, #8]
   15e94:	str	lr, [sp, #16]
   15e98:	sub	sp, sp, #12
   15e9c:	mov	r7, r1
   15ea0:	mov	r5, r2
   15ea4:	subs	r6, r0, #0
   15ea8:	addeq	r6, sp, #4
   15eac:	mov	r0, r6
   15eb0:	bl	10d98 <mbrtowc@plt>
   15eb4:	mov	r4, r0
   15eb8:	cmp	r5, #0
   15ebc:	cmnne	r0, #3
   15ec0:	bhi	15edc <__assert_fail@plt+0x4fdc>
   15ec4:	mov	r0, r4
   15ec8:	add	sp, sp, #12
   15ecc:	ldrd	r4, [sp]
   15ed0:	ldrd	r6, [sp, #8]
   15ed4:	add	sp, sp, #16
   15ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   15edc:	mov	r0, #0
   15ee0:	bl	15f38 <__assert_fail@plt+0x5038>
   15ee4:	cmp	r0, #0
   15ee8:	bne	15ec4 <__assert_fail@plt+0x4fc4>
   15eec:	ldrb	r3, [r7]
   15ef0:	str	r3, [r6]
   15ef4:	mov	r4, #1
   15ef8:	b	15ec4 <__assert_fail@plt+0x4fc4>
   15efc:	str	r4, [sp, #-8]!
   15f00:	str	lr, [sp, #4]
   15f04:	umull	r2, r3, r1, r2
   15f08:	cmp	r3, #0
   15f0c:	bne	15f24 <__assert_fail@plt+0x5024>
   15f10:	mov	r1, r2
   15f14:	bl	15d60 <__assert_fail@plt+0x4e60>
   15f18:	ldr	r4, [sp]
   15f1c:	add	sp, sp, #4
   15f20:	pop	{pc}		; (ldr pc, [sp], #4)
   15f24:	bl	10e1c <__errno_location@plt>
   15f28:	mov	r3, #12
   15f2c:	str	r3, [r0]
   15f30:	mov	r0, #0
   15f34:	b	15f18 <__assert_fail@plt+0x5018>
   15f38:	push	{lr}		; (str lr, [sp, #-4]!)
   15f3c:	sub	sp, sp, #268	; 0x10c
   15f40:	movw	r2, #257	; 0x101
   15f44:	add	r1, sp, #4
   15f48:	bl	15f94 <__assert_fail@plt+0x5094>
   15f4c:	cmp	r0, #0
   15f50:	movne	r0, #0
   15f54:	bne	15f8c <__assert_fail@plt+0x508c>
   15f58:	movw	r1, #27916	; 0x6d0c
   15f5c:	movt	r1, #1
   15f60:	add	r0, sp, #4
   15f64:	bl	10cb4 <strcmp@plt>
   15f68:	cmp	r0, #0
   15f6c:	beq	15f88 <__assert_fail@plt+0x5088>
   15f70:	movw	r1, #27920	; 0x6d10
   15f74:	movt	r1, #1
   15f78:	add	r0, sp, #4
   15f7c:	bl	10cb4 <strcmp@plt>
   15f80:	adds	r0, r0, #0
   15f84:	movne	r0, #1
   15f88:	and	r0, r0, #1
   15f8c:	add	sp, sp, #268	; 0x10c
   15f90:	pop	{pc}		; (ldr pc, [sp], #4)
   15f94:	strd	r4, [sp, #-16]!
   15f98:	str	r6, [sp, #8]
   15f9c:	str	lr, [sp, #12]
   15fa0:	mov	r6, r1
   15fa4:	mov	r4, r2
   15fa8:	mov	r1, #0
   15fac:	bl	10e94 <setlocale@plt>
   15fb0:	subs	r5, r0, #0
   15fb4:	beq	15ff8 <__assert_fail@plt+0x50f8>
   15fb8:	mov	r0, r5
   15fbc:	bl	10e04 <strlen@plt>
   15fc0:	cmp	r4, r0
   15fc4:	bhi	16014 <__assert_fail@plt+0x5114>
   15fc8:	cmp	r4, #0
   15fcc:	moveq	r0, #34	; 0x22
   15fd0:	beq	16028 <__assert_fail@plt+0x5128>
   15fd4:	sub	r4, r4, #1
   15fd8:	mov	r2, r4
   15fdc:	mov	r1, r5
   15fe0:	mov	r0, r6
   15fe4:	bl	10cfc <memcpy@plt>
   15fe8:	mov	r3, #0
   15fec:	strb	r3, [r6, r4]
   15ff0:	mov	r0, #34	; 0x22
   15ff4:	b	16028 <__assert_fail@plt+0x5128>
   15ff8:	cmp	r4, #0
   15ffc:	moveq	r0, #22
   16000:	beq	16028 <__assert_fail@plt+0x5128>
   16004:	mov	r3, #0
   16008:	strb	r3, [r6]
   1600c:	mov	r0, #22
   16010:	b	16028 <__assert_fail@plt+0x5128>
   16014:	add	r2, r0, #1
   16018:	mov	r1, r5
   1601c:	mov	r0, r6
   16020:	bl	10cfc <memcpy@plt>
   16024:	mov	r0, #0
   16028:	ldrd	r4, [sp]
   1602c:	ldr	r6, [sp, #8]
   16030:	add	sp, sp, #12
   16034:	pop	{pc}		; (ldr pc, [sp], #4)
   16038:	str	r4, [sp, #-8]!
   1603c:	str	lr, [sp, #4]
   16040:	mov	r1, #0
   16044:	bl	10e94 <setlocale@plt>
   16048:	ldr	r4, [sp]
   1604c:	add	sp, sp, #4
   16050:	pop	{pc}		; (ldr pc, [sp], #4)
   16054:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16058:	mov	r7, r0
   1605c:	ldr	r6, [pc, #72]	; 160ac <__assert_fail@plt+0x51ac>
   16060:	ldr	r5, [pc, #72]	; 160b0 <__assert_fail@plt+0x51b0>
   16064:	add	r6, pc, r6
   16068:	add	r5, pc, r5
   1606c:	sub	r6, r6, r5
   16070:	mov	r8, r1
   16074:	mov	r9, r2
   16078:	bl	10c7c <calloc@plt-0x20>
   1607c:	asrs	r6, r6, #2
   16080:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16084:	mov	r4, #0
   16088:	add	r4, r4, #1
   1608c:	ldr	r3, [r5], #4
   16090:	mov	r2, r9
   16094:	mov	r1, r8
   16098:	mov	r0, r7
   1609c:	blx	r3
   160a0:	cmp	r6, r4
   160a4:	bne	16088 <__assert_fail@plt+0x5188>
   160a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   160ac:	andeq	r0, r1, r8, lsr #29
   160b0:	andeq	r0, r1, r0, lsr #29
   160b4:	bx	lr
   160b8:	ldr	r3, [pc, #12]	; 160cc <__assert_fail@plt+0x51cc>
   160bc:	mov	r1, #0
   160c0:	add	r3, pc, r3
   160c4:	ldr	r2, [r3]
   160c8:	b	10e28 <__cxa_atexit@plt>
   160cc:	andeq	r1, r1, ip, lsl r0

Disassembly of section .fini:

000160d0 <.fini>:
   160d0:	push	{r3, lr}
   160d4:	pop	{r3, pc}
