
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010eb4 <.init>:
   10eb4:	push	{r3, lr}
   10eb8:	bl	11880 <__assert_fail@plt+0x6ac>
   10ebc:	pop	{r3, pc}

Disassembly of section .plt:

00010ec0 <calloc@plt-0x14>:
   10ec0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ec4:	ldr	lr, [pc, #4]	; 10ed0 <calloc@plt-0x4>
   10ec8:	add	lr, pc, lr
   10ecc:	ldr	pc, [lr, #8]!
   10ed0:	andeq	r6, r1, r0, lsr r1

00010ed4 <calloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #304]!	; 0x130

00010ee0 <endgrent@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #296]!	; 0x128

00010eec <fputs_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #288]!	; 0x120

00010ef8 <raise@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #280]!	; 0x118

00010f04 <getpwnam@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #272]!	; 0x110

00010f10 <strcmp@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #264]!	; 0x108

00010f1c <getpwuid@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #256]!	; 0x100

00010f28 <fflush@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #248]!	; 0xf8

00010f34 <free@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #240]!	; 0xf0

00010f40 <_exit@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #232]!	; 0xe8

00010f4c <memcpy@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #224]!	; 0xe0

00010f58 <execvp@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #216]!	; 0xd8

00010f64 <mbsinit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #208]!	; 0xd0

00010f70 <memcmp@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #200]!	; 0xc8

00010f7c <fputc_unlocked@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #192]!	; 0xc0

00010f88 <dcgettext@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #184]!	; 0xb8

00010f94 <realloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #176]!	; 0xb0

00010fa0 <textdomain@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #168]!	; 0xa8

00010fac <chdir@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #160]!	; 0xa0

00010fb8 <iswprint@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #152]!	; 0x98

00010fc4 <setgroups@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #144]!	; 0x90

00010fd0 <lseek64@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #136]!	; 0x88

00010fdc <__ctype_get_mb_cur_max@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #128]!	; 0x80

00010fe8 <chroot@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #120]!	; 0x78

00010ff4 <__fpending@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #112]!	; 0x70

00011000 <ferror_unlocked@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #104]!	; 0x68

0001100c <mbrtowc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #96]!	; 0x60

00011018 <error@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #88]!	; 0x58

00011024 <getenv@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #80]!	; 0x50

00011030 <setgid@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #72]!	; 0x48

0001103c <malloc@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #64]!	; 0x40

00011048 <__libc_start_main@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #56]!	; 0x38

00011054 <__freading@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #48]!	; 0x30

00011060 <__gmon_start__@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #40]!	; 0x28

0001106c <getopt_long@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #32]!

00011078 <__ctype_b_loc@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #24]!

00011084 <exit@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #16]!

00011090 <strtoul@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #8]!

0001109c <strlen@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #0]!

000110a8 <strchr@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #86016	; 0x15000
   110b0:	ldr	pc, [ip, #4088]!	; 0xff8

000110b4 <__errno_location@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #4080]!	; 0xff0

000110c0 <__cxa_atexit@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110cc <getgrouplist@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d8 <memset@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110e4 <__printf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4048]!	; 0xfd0

000110f0 <fileno@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110fc <strtoumax@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4032]!	; 0xfc0

00011108 <__fprintf_chk@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #86016	; 0x15000
   11110:	ldr	pc, [ip, #4024]!	; 0xfb8

00011114 <fclose@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #86016	; 0x15000
   1111c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011120 <fseeko64@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #86016	; 0x15000
   11128:	ldr	pc, [ip, #4008]!	; 0xfa8

0001112c <strtok@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #86016	; 0x15000
   11134:	ldr	pc, [ip, #4000]!	; 0xfa0

00011138 <setlocale@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #86016	; 0x15000
   11140:	ldr	pc, [ip, #3992]!	; 0xf98

00011144 <endpwent@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #86016	; 0x15000
   1114c:	ldr	pc, [ip, #3984]!	; 0xf90

00011150 <strrchr@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #86016	; 0x15000
   11158:	ldr	pc, [ip, #3976]!	; 0xf88

0001115c <nl_langinfo@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #86016	; 0x15000
   11164:	ldr	pc, [ip, #3968]!	; 0xf80

00011168 <setuid@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #86016	; 0x15000
   11170:	ldr	pc, [ip, #3960]!	; 0xf78

00011174 <getgroups@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #86016	; 0x15000
   1117c:	ldr	pc, [ip, #3952]!	; 0xf70

00011180 <canonicalize_file_name@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #86016	; 0x15000
   11188:	ldr	pc, [ip, #3944]!	; 0xf68

0001118c <bindtextdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #86016	; 0x15000
   11194:	ldr	pc, [ip, #3936]!	; 0xf60

00011198 <fputs@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #86016	; 0x15000
   111a0:	ldr	pc, [ip, #3928]!	; 0xf58

000111a4 <strncmp@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #86016	; 0x15000
   111ac:	ldr	pc, [ip, #3920]!	; 0xf50

000111b0 <abort@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #86016	; 0x15000
   111b8:	ldr	pc, [ip, #3912]!	; 0xf48

000111bc <getgrgid@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #86016	; 0x15000
   111c4:	ldr	pc, [ip, #3904]!	; 0xf40

000111c8 <getgrnam@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #86016	; 0x15000
   111d0:	ldr	pc, [ip, #3896]!	; 0xf38

000111d4 <__assert_fail@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #86016	; 0x15000
   111dc:	ldr	pc, [ip, #3888]!	; 0xf30

Disassembly of section .text:

000111e0 <.text>:
   111e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111e4:	sub	sp, sp, #44	; 0x2c
   111e8:	mvn	r3, #0
   111ec:	mov	r6, #0
   111f0:	mov	r9, r0
   111f4:	ldr	r0, [r1]
   111f8:	str	r3, [sp, #20]
   111fc:	str	r3, [sp, #24]
   11200:	mov	r4, r1
   11204:	str	r6, [sp, #28]
   11208:	str	r6, [sp, #32]
   1120c:	bl	11f68 <__assert_fail@plt+0xd94>
   11210:	ldr	r1, [pc, #1456]	; 117c8 <__assert_fail@plt+0x5f4>
   11214:	mov	r0, #6
   11218:	bl	11138 <setlocale@plt>
   1121c:	ldr	r1, [pc, #1448]	; 117cc <__assert_fail@plt+0x5f8>
   11220:	ldr	r0, [pc, #1448]	; 117d0 <__assert_fail@plt+0x5fc>
   11224:	bl	1118c <bindtextdomain@plt>
   11228:	ldr	r0, [pc, #1440]	; 117d0 <__assert_fail@plt+0x5fc>
   1122c:	bl	10fa0 <textdomain@plt>
   11230:	ldr	r3, [pc, #1436]	; 117d4 <__assert_fail@plt+0x600>
   11234:	mov	r2, #125	; 0x7d
   11238:	ldr	r0, [pc, #1432]	; 117d8 <__assert_fail@plt+0x604>
   1123c:	str	r2, [r3]
   11240:	bl	157c8 <__assert_fail@plt+0x45f4>
   11244:	ldr	sl, [pc, #1424]	; 117dc <__assert_fail@plt+0x608>
   11248:	ldr	fp, [pc, #1424]	; 117e0 <__assert_fail@plt+0x60c>
   1124c:	mov	r5, r6
   11250:	mov	r7, r6
   11254:	mov	r8, #0
   11258:	str	r8, [sp]
   1125c:	ldr	r3, [pc, #1408]	; 117e4 <__assert_fail@plt+0x610>
   11260:	ldr	r2, [pc, #1408]	; 117e8 <__assert_fail@plt+0x614>
   11264:	mov	r1, r4
   11268:	mov	r0, r9
   1126c:	bl	1106c <getopt_long@plt>
   11270:	cmn	r0, #1
   11274:	bne	112ac <__assert_fail@plt+0xd8>
   11278:	ldr	sl, [pc, #1388]	; 117ec <__assert_fail@plt+0x618>
   1127c:	ldr	r3, [sl]
   11280:	cmp	r9, r3
   11284:	bgt	11350 <__assert_fail@plt+0x17c>
   11288:	mov	r2, #5
   1128c:	ldr	r1, [pc, #1372]	; 117f0 <__assert_fail@plt+0x61c>
   11290:	mov	r0, r8
   11294:	bl	10f88 <dcgettext@plt>
   11298:	mov	r1, r8
   1129c:	mov	r2, r0
   112a0:	mov	r0, r8
   112a4:	bl	11018 <error@plt>
   112a8:	b	112cc <__assert_fail@plt+0xf8>
   112ac:	cmp	r0, #256	; 0x100
   112b0:	beq	11318 <__assert_fail@plt+0x144>
   112b4:	bgt	112d4 <__assert_fail@plt+0x100>
   112b8:	cmn	r0, #3
   112bc:	beq	11320 <__assert_fail@plt+0x14c>
   112c0:	cmn	r0, #2
   112c4:	moveq	r0, r8
   112c8:	beq	112d0 <__assert_fail@plt+0xfc>
   112cc:	mov	r0, #125	; 0x7d
   112d0:	bl	11b5c <__assert_fail@plt+0x988>
   112d4:	ldr	r3, [pc, #1304]	; 117f4 <__assert_fail@plt+0x620>
   112d8:	cmp	r0, r3
   112dc:	beq	112f0 <__assert_fail@plt+0x11c>
   112e0:	cmp	r0, fp
   112e4:	bne	112cc <__assert_fail@plt+0xf8>
   112e8:	mov	r6, #1
   112ec:	b	11254 <__assert_fail@plt+0x80>
   112f0:	ldr	r7, [sl]
   112f4:	mov	r0, r7
   112f8:	bl	1109c <strlen@plt>
   112fc:	cmp	r0, #0
   11300:	beq	11254 <__assert_fail@plt+0x80>
   11304:	sub	r0, r0, #1
   11308:	ldrb	r3, [r7, r0]
   1130c:	cmp	r3, #58	; 0x3a
   11310:	strbeq	r8, [r7, r0]
   11314:	b	11254 <__assert_fail@plt+0x80>
   11318:	ldr	r5, [sl]
   1131c:	b	11254 <__assert_fail@plt+0x80>
   11320:	ldr	r3, [pc, #1232]	; 117f8 <__assert_fail@plt+0x624>
   11324:	ldr	r0, [pc, #1232]	; 117fc <__assert_fail@plt+0x628>
   11328:	str	r3, [sp]
   1132c:	ldr	r3, [pc, #1228]	; 11800 <__assert_fail@plt+0x62c>
   11330:	str	r8, [sp, #4]
   11334:	ldr	r2, [pc, #1224]	; 11804 <__assert_fail@plt+0x630>
   11338:	ldr	r0, [r0]
   1133c:	ldr	r3, [r3]
   11340:	ldr	r1, [pc, #1216]	; 11808 <__assert_fail@plt+0x634>
   11344:	bl	13d54 <__assert_fail@plt+0x2b80>
   11348:	mov	r0, r8
   1134c:	bl	11084 <exit@plt>
   11350:	ldr	fp, [r4, r3, lsl #2]
   11354:	mov	r0, fp
   11358:	bl	11180 <canonicalize_file_name@plt>
   1135c:	subs	r3, r0, #0
   11360:	moveq	r8, r3
   11364:	beq	11384 <__assert_fail@plt+0x1b0>
   11368:	mov	r1, r3
   1136c:	ldr	r0, [pc, #1176]	; 1180c <__assert_fail@plt+0x638>
   11370:	str	r3, [sp, #12]
   11374:	bl	10f10 <strcmp@plt>
   11378:	ldr	r3, [sp, #12]
   1137c:	clz	r8, r0
   11380:	lsr	r8, r8, #5
   11384:	mov	r0, r3
   11388:	bl	11f14 <__assert_fail@plt+0xd40>
   1138c:	eor	r3, r8, #1
   11390:	tst	r6, r3
   11394:	beq	113d0 <__assert_fail@plt+0x1fc>
   11398:	mov	r2, #5
   1139c:	ldr	r1, [pc, #1132]	; 11810 <__assert_fail@plt+0x63c>
   113a0:	mov	r0, #0
   113a4:	bl	10f88 <dcgettext@plt>
   113a8:	ldr	r1, [pc, #1116]	; 1180c <__assert_fail@plt+0x638>
   113ac:	mov	r4, r0
   113b0:	mov	r0, #4
   113b4:	bl	133b4 <__assert_fail@plt+0x21e0>
   113b8:	mov	r1, #0
   113bc:	mov	r2, r4
   113c0:	mov	r3, r0
   113c4:	mov	r0, r1
   113c8:	bl	11018 <error@plt>
   113cc:	b	112cc <__assert_fail@plt+0xf8>
   113d0:	cmp	r8, #0
   113d4:	beq	11424 <__assert_fail@plt+0x250>
   113d8:	mov	r8, #0
   113dc:	mov	r0, fp
   113e0:	bl	10fe8 <chroot@plt>
   113e4:	cmp	r0, #0
   113e8:	beq	114e8 <__assert_fail@plt+0x314>
   113ec:	bl	110b4 <__errno_location@plt>
   113f0:	mov	r2, #5
   113f4:	ldr	r1, [pc, #1048]	; 11814 <__assert_fail@plt+0x640>
   113f8:	ldr	r4, [r0]
   113fc:	mov	r0, #0
   11400:	bl	10f88 <dcgettext@plt>
   11404:	mov	r1, fp
   11408:	mov	r5, r0
   1140c:	mov	r0, #4
   11410:	bl	133b4 <__assert_fail@plt+0x21e0>
   11414:	mov	r2, r5
   11418:	mov	r3, r0
   1141c:	mov	r1, r4
   11420:	b	115b4 <__assert_fail@plt+0x3e0>
   11424:	cmp	r7, #0
   11428:	beq	11444 <__assert_fail@plt+0x270>
   1142c:	str	r8, [sp]
   11430:	mov	r3, r8
   11434:	add	r2, sp, #24
   11438:	add	r1, sp, #20
   1143c:	mov	r0, r7
   11440:	bl	13868 <__assert_fail@plt+0x2694>
   11444:	ldr	r0, [sp, #20]
   11448:	cmn	r0, #1
   1144c:	bne	11488 <__assert_fail@plt+0x2b4>
   11450:	mov	r8, #0
   11454:	cmp	r5, #0
   11458:	bne	114c4 <__assert_fail@plt+0x2f0>
   1145c:	ldr	r1, [sp, #24]
   11460:	cmn	r1, #1
   11464:	beq	113dc <__assert_fail@plt+0x208>
   11468:	cmp	r8, #0
   1146c:	beq	113d8 <__assert_fail@plt+0x204>
   11470:	add	r2, sp, #28
   11474:	mov	r0, r8
   11478:	bl	142f0 <__assert_fail@plt+0x311c>
   1147c:	cmp	r0, #0
   11480:	strgt	r0, [sp, #32]
   11484:	b	113dc <__assert_fail@plt+0x208>
   11488:	cmp	r5, #0
   1148c:	beq	114a0 <__assert_fail@plt+0x2cc>
   11490:	ldr	r3, [sp, #24]
   11494:	cmn	r3, #1
   11498:	movne	r8, #0
   1149c:	bne	114c4 <__assert_fail@plt+0x2f0>
   114a0:	bl	10f1c <getpwuid@plt>
   114a4:	cmp	r0, #0
   114a8:	beq	11450 <__assert_fail@plt+0x27c>
   114ac:	ldr	r3, [sp, #24]
   114b0:	ldr	r8, [r0]
   114b4:	cmn	r3, #1
   114b8:	ldreq	r3, [r0, #12]
   114bc:	streq	r3, [sp, #24]
   114c0:	b	11454 <__assert_fail@plt+0x280>
   114c4:	ldrb	r3, [r5]
   114c8:	cmp	r3, #0
   114cc:	beq	113dc <__assert_fail@plt+0x208>
   114d0:	mov	r3, #0
   114d4:	add	r2, sp, #32
   114d8:	add	r1, sp, #28
   114dc:	mov	r0, r5
   114e0:	bl	1196c <__assert_fail@plt+0x798>
   114e4:	b	113dc <__assert_fail@plt+0x208>
   114e8:	cmp	r6, #0
   114ec:	bne	11528 <__assert_fail@plt+0x354>
   114f0:	ldr	r0, [pc, #788]	; 1180c <__assert_fail@plt+0x638>
   114f4:	bl	10fac <chdir@plt>
   114f8:	cmp	r0, #0
   114fc:	beq	11528 <__assert_fail@plt+0x354>
   11500:	bl	110b4 <__errno_location@plt>
   11504:	ldr	r1, [pc, #780]	; 11818 <__assert_fail@plt+0x644>
   11508:	mov	r2, #5
   1150c:	ldr	r4, [r0]
   11510:	mov	r0, #0
   11514:	bl	10f88 <dcgettext@plt>
   11518:	mov	r1, r4
   1151c:	mov	r2, r0
   11520:	mov	r0, #125	; 0x7d
   11524:	bl	11018 <error@plt>
   11528:	ldr	r3, [sl]
   1152c:	add	r3, r3, #1
   11530:	cmp	r9, r3
   11534:	addne	r4, r4, r3, lsl #2
   11538:	bne	11564 <__assert_fail@plt+0x390>
   1153c:	ldr	r0, [pc, #728]	; 1181c <__assert_fail@plt+0x648>
   11540:	bl	11024 <getenv@plt>
   11544:	ldr	r3, [pc, #724]	; 11820 <__assert_fail@plt+0x64c>
   11548:	cmp	r0, #0
   1154c:	moveq	r0, r3
   11550:	ldr	r3, [pc, #716]	; 11824 <__assert_fail@plt+0x650>
   11554:	str	r0, [r4]
   11558:	str	r3, [r4, #4]
   1155c:	mov	r3, #0
   11560:	str	r3, [r4, #8]
   11564:	cmp	r7, #0
   11568:	beq	115bc <__assert_fail@plt+0x3e8>
   1156c:	mov	r3, #0
   11570:	str	r3, [sp]
   11574:	add	r2, sp, #24
   11578:	add	r1, sp, #20
   1157c:	mov	r0, r7
   11580:	bl	13868 <__assert_fail@plt+0x2694>
   11584:	subs	r6, r0, #0
   11588:	beq	115bc <__assert_fail@plt+0x3e8>
   1158c:	ldr	r3, [sp, #20]
   11590:	cmn	r3, #1
   11594:	bne	115bc <__assert_fail@plt+0x3e8>
   11598:	ldr	r3, [sp, #24]
   1159c:	cmn	r3, #1
   115a0:	bne	115bc <__assert_fail@plt+0x3e8>
   115a4:	bl	110b4 <__errno_location@plt>
   115a8:	ldr	r2, [pc, #632]	; 11828 <__assert_fail@plt+0x654>
   115ac:	mov	r3, r6
   115b0:	ldr	r1, [r0]
   115b4:	mov	r0, #125	; 0x7d
   115b8:	bl	11018 <error@plt>
   115bc:	ldr	r0, [sp, #20]
   115c0:	cmn	r0, #1
   115c4:	beq	115fc <__assert_fail@plt+0x428>
   115c8:	cmp	r5, #0
   115cc:	beq	115dc <__assert_fail@plt+0x408>
   115d0:	ldr	r3, [sp, #24]
   115d4:	cmn	r3, #1
   115d8:	bne	115fc <__assert_fail@plt+0x428>
   115dc:	bl	10f1c <getpwuid@plt>
   115e0:	ldr	r3, [sp, #24]
   115e4:	subs	r6, r0, #0
   115e8:	beq	11688 <__assert_fail@plt+0x4b4>
   115ec:	cmn	r3, #1
   115f0:	ldr	r8, [r6]
   115f4:	ldreq	r3, [r6, #12]
   115f8:	streq	r3, [sp, #24]
   115fc:	mov	r3, #0
   11600:	cmp	r5, r3
   11604:	ldr	r6, [sp, #28]
   11608:	str	r3, [sp, #36]	; 0x24
   1160c:	beq	116b4 <__assert_fail@plt+0x4e0>
   11610:	ldrb	r3, [r5]
   11614:	cmp	r3, #0
   11618:	beq	11650 <__assert_fail@plt+0x47c>
   1161c:	add	r2, sp, #40	; 0x28
   11620:	add	r1, sp, #36	; 0x24
   11624:	ldr	r3, [r2, #-8]!
   11628:	mov	r0, r5
   1162c:	clz	r3, r3
   11630:	lsr	r3, r3, #5
   11634:	bl	1196c <__assert_fail@plt+0x798>
   11638:	cmp	r0, #0
   1163c:	beq	116fc <__assert_fail@plt+0x528>
   11640:	ldr	r3, [sp, #32]
   11644:	cmp	r3, #0
   11648:	moveq	r5, #125	; 0x7d
   1164c:	beq	117bc <__assert_fail@plt+0x5e8>
   11650:	ldr	r3, [sp, #20]
   11654:	cmn	r3, #1
   11658:	cmpeq	r5, #0
   1165c:	beq	11704 <__assert_fail@plt+0x530>
   11660:	mov	r1, r6
   11664:	ldr	r0, [sp, #32]
   11668:	bl	10fc4 <setgroups@plt>
   1166c:	cmp	r0, #0
   11670:	beq	11704 <__assert_fail@plt+0x530>
   11674:	bl	110b4 <__errno_location@plt>
   11678:	mov	r2, #5
   1167c:	ldr	r1, [pc, #424]	; 1182c <__assert_fail@plt+0x658>
   11680:	ldr	r4, [r0]
   11684:	b	11510 <__assert_fail@plt+0x33c>
   11688:	cmn	r3, #1
   1168c:	bne	115fc <__assert_fail@plt+0x428>
   11690:	bl	110b4 <__errno_location@plt>
   11694:	mov	r2, #5
   11698:	ldr	r1, [pc, #400]	; 11830 <__assert_fail@plt+0x65c>
   1169c:	ldr	r4, [r0]
   116a0:	mov	r0, r6
   116a4:	bl	10f88 <dcgettext@plt>
   116a8:	ldr	r3, [sp, #20]
   116ac:	mov	r2, r0
   116b0:	b	1141c <__assert_fail@plt+0x248>
   116b4:	ldr	r1, [sp, #24]
   116b8:	cmp	r8, #0
   116bc:	cmnne	r1, #1
   116c0:	beq	11650 <__assert_fail@plt+0x47c>
   116c4:	add	r2, sp, #36	; 0x24
   116c8:	mov	r0, r8
   116cc:	bl	142f0 <__assert_fail@plt+0x311c>
   116d0:	cmp	r0, #0
   116d4:	strgt	r0, [sp, #32]
   116d8:	bgt	116fc <__assert_fail@plt+0x528>
   116dc:	ldr	r3, [sp, #32]
   116e0:	cmp	r3, #0
   116e4:	bne	11650 <__assert_fail@plt+0x47c>
   116e8:	bl	110b4 <__errno_location@plt>
   116ec:	mov	r2, #5
   116f0:	ldr	r1, [pc, #316]	; 11834 <__assert_fail@plt+0x660>
   116f4:	ldr	r4, [r0]
   116f8:	b	11510 <__assert_fail@plt+0x33c>
   116fc:	ldr	r6, [sp, #36]	; 0x24
   11700:	b	11650 <__assert_fail@plt+0x47c>
   11704:	ldr	r0, [sp, #36]	; 0x24
   11708:	bl	11f14 <__assert_fail@plt+0xd40>
   1170c:	ldr	r0, [sp, #28]
   11710:	bl	11f14 <__assert_fail@plt+0xd40>
   11714:	ldr	r0, [sp, #24]
   11718:	cmn	r0, #1
   1171c:	beq	11740 <__assert_fail@plt+0x56c>
   11720:	bl	11030 <setgid@plt>
   11724:	cmp	r0, #0
   11728:	beq	11740 <__assert_fail@plt+0x56c>
   1172c:	bl	110b4 <__errno_location@plt>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #252]	; 11838 <__assert_fail@plt+0x664>
   11738:	ldr	r4, [r0]
   1173c:	b	11510 <__assert_fail@plt+0x33c>
   11740:	ldr	r0, [sp, #20]
   11744:	cmn	r0, #1
   11748:	beq	1176c <__assert_fail@plt+0x598>
   1174c:	bl	11168 <setuid@plt>
   11750:	cmp	r0, #0
   11754:	beq	1176c <__assert_fail@plt+0x598>
   11758:	bl	110b4 <__errno_location@plt>
   1175c:	mov	r2, #5
   11760:	ldr	r1, [pc, #212]	; 1183c <__assert_fail@plt+0x668>
   11764:	ldr	r4, [r0]
   11768:	b	11510 <__assert_fail@plt+0x33c>
   1176c:	mov	r1, r4
   11770:	ldr	r0, [r4]
   11774:	bl	10f58 <execvp@plt>
   11778:	bl	110b4 <__errno_location@plt>
   1177c:	mov	r2, #5
   11780:	ldr	r1, [pc, #184]	; 11840 <__assert_fail@plt+0x66c>
   11784:	ldr	r6, [r0]
   11788:	mov	r0, #0
   1178c:	cmp	r6, #2
   11790:	moveq	r5, #127	; 0x7f
   11794:	movne	r5, #126	; 0x7e
   11798:	bl	10f88 <dcgettext@plt>
   1179c:	mov	r7, r0
   117a0:	ldr	r0, [r4]
   117a4:	bl	13598 <__assert_fail@plt+0x23c4>
   117a8:	mov	r2, r7
   117ac:	mov	r1, r6
   117b0:	mov	r3, r0
   117b4:	mov	r0, #0
   117b8:	bl	11018 <error@plt>
   117bc:	mov	r0, r5
   117c0:	add	sp, sp, #44	; 0x2c
   117c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117c8:	andeq	r5, r1, ip, asr #18
   117cc:			; <UNDEFINED> instruction: 0x00015bba
   117d0:	andeq	r5, r1, pc, lsl #22
   117d4:	andeq	r7, r2, r0, lsr #2
   117d8:	andeq	r1, r1, r0, lsr lr
   117dc:	andeq	r7, r2, r0, lsl #3
   117e0:	andeq	r0, r0, r2, lsl #2
   117e4:	andeq	r5, r1, r4, lsr #16
   117e8:	andeq	r5, r1, r1, ror #23
   117ec:	andeq	r7, r2, r0, ror r1
   117f0:	andeq	r5, r1, r3, ror #23
   117f4:	andeq	r0, r0, r1, lsl #2
   117f8:	ldrdeq	r5, [r1], -r2
   117fc:	andeq	r7, r2, ip, ror r1
   11800:	andeq	r7, r2, ip, lsl r1
   11804:	andeq	r5, r1, fp, lsl #22
   11808:	andeq	r5, r1, sp, lsr #17
   1180c:	andeq	r6, r1, ip, asr #3
   11810:	strdeq	r5, [r1], -r3
   11814:	andeq	r5, r1, fp, lsr #24
   11818:	andeq	r5, r1, lr, asr #24
   1181c:	andeq	r5, r1, sp, ror #24
   11820:			; <UNDEFINED> instruction: 0x00015bb2
   11824:	andeq	r5, r1, r3, ror ip
   11828:	andeq	r5, r1, r6, asr #27
   1182c:			; <UNDEFINED> instruction: 0x00015cbf
   11830:	andeq	r5, r1, r6, ror ip
   11834:	muleq	r1, sp, ip
   11838:	andeq	r5, r1, r1, ror #25
   1183c:	strdeq	r5, [r1], -r8
   11840:	andeq	r5, r1, lr, lsl #26
   11844:	mov	fp, #0
   11848:	mov	lr, #0
   1184c:	pop	{r1}		; (ldr r1, [sp], #4)
   11850:	mov	r2, sp
   11854:	push	{r2}		; (str r2, [sp, #-4]!)
   11858:	push	{r0}		; (str r0, [sp, #-4]!)
   1185c:	ldr	ip, [pc, #16]	; 11874 <__assert_fail@plt+0x6a0>
   11860:	push	{ip}		; (str ip, [sp, #-4]!)
   11864:	ldr	r0, [pc, #12]	; 11878 <__assert_fail@plt+0x6a4>
   11868:	ldr	r3, [pc, #12]	; 1187c <__assert_fail@plt+0x6a8>
   1186c:	bl	11048 <__libc_start_main@plt>
   11870:	bl	111b0 <abort@plt>
   11874:	andeq	r5, r1, r4, asr #15
   11878:	andeq	r1, r1, r0, ror #3
   1187c:	andeq	r5, r1, r4, ror #14
   11880:	ldr	r3, [pc, #20]	; 1189c <__assert_fail@plt+0x6c8>
   11884:	ldr	r2, [pc, #20]	; 118a0 <__assert_fail@plt+0x6cc>
   11888:	add	r3, pc, r3
   1188c:	ldr	r2, [r3, r2]
   11890:	cmp	r2, #0
   11894:	bxeq	lr
   11898:	b	11060 <__gmon_start__@plt>
   1189c:	andeq	r5, r1, r0, ror r7
   118a0:	andeq	r0, r0, r0, lsl r1
   118a4:	ldr	r3, [pc, #28]	; 118c8 <__assert_fail@plt+0x6f4>
   118a8:	ldr	r0, [pc, #28]	; 118cc <__assert_fail@plt+0x6f8>
   118ac:	sub	r3, r3, r0
   118b0:	cmp	r3, #6
   118b4:	bxls	lr
   118b8:	ldr	r3, [pc, #16]	; 118d0 <__assert_fail@plt+0x6fc>
   118bc:	cmp	r3, #0
   118c0:	bxeq	lr
   118c4:	bx	r3
   118c8:	andeq	r7, r2, r7, ror #2
   118cc:	andeq	r7, r2, r4, ror #2
   118d0:	andeq	r0, r0, r0
   118d4:	ldr	r1, [pc, #36]	; 11900 <__assert_fail@plt+0x72c>
   118d8:	ldr	r0, [pc, #36]	; 11904 <__assert_fail@plt+0x730>
   118dc:	sub	r1, r1, r0
   118e0:	asr	r1, r1, #2
   118e4:	add	r1, r1, r1, lsr #31
   118e8:	asrs	r1, r1, #1
   118ec:	bxeq	lr
   118f0:	ldr	r3, [pc, #16]	; 11908 <__assert_fail@plt+0x734>
   118f4:	cmp	r3, #0
   118f8:	bxeq	lr
   118fc:	bx	r3
   11900:	andeq	r7, r2, r4, ror #2
   11904:	andeq	r7, r2, r4, ror #2
   11908:	andeq	r0, r0, r0
   1190c:	push	{r4, lr}
   11910:	ldr	r4, [pc, #24]	; 11930 <__assert_fail@plt+0x75c>
   11914:	ldrb	r3, [r4]
   11918:	cmp	r3, #0
   1191c:	popne	{r4, pc}
   11920:	bl	118a4 <__assert_fail@plt+0x6d0>
   11924:	mov	r3, #1
   11928:	strb	r3, [r4]
   1192c:	pop	{r4, pc}
   11930:	andeq	r7, r2, r4, lsl #3
   11934:	ldr	r0, [pc, #40]	; 11964 <__assert_fail@plt+0x790>
   11938:	ldr	r3, [r0]
   1193c:	cmp	r3, #0
   11940:	bne	11948 <__assert_fail@plt+0x774>
   11944:	b	118d4 <__assert_fail@plt+0x700>
   11948:	ldr	r3, [pc, #24]	; 11968 <__assert_fail@plt+0x794>
   1194c:	cmp	r3, #0
   11950:	beq	11944 <__assert_fail@plt+0x770>
   11954:	push	{r4, lr}
   11958:	blx	r3
   1195c:	pop	{r4, lr}
   11960:	b	118d4 <__assert_fail@plt+0x700>
   11964:	andeq	r6, r2, r4, lsl pc
   11968:	andeq	r0, r0, r0
   1196c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11970:	sub	sp, sp, #44	; 0x2c
   11974:	mov	r4, #0
   11978:	str	r1, [sp, #12]
   1197c:	str	r2, [sp, #16]
   11980:	mov	r9, r3
   11984:	mov	fp, r0
   11988:	str	r4, [sp, #28]
   1198c:	bl	14294 <__assert_fail@plt+0x30c0>
   11990:	ldr	r1, [pc, #436]	; 11b4c <__assert_fail@plt+0x978>
   11994:	mov	r6, r4
   11998:	mov	r7, r4
   1199c:	mov	sl, r0
   119a0:	bl	1112c <strtok@plt>
   119a4:	mov	r5, r0
   119a8:	cmp	r5, #0
   119ac:	beq	11a78 <__assert_fail@plt+0x8a4>
   119b0:	ldr	r3, [pc, #408]	; 11b50 <__assert_fail@plt+0x97c>
   119b4:	mov	r2, #10
   119b8:	str	r3, [sp]
   119bc:	mov	r1, #0
   119c0:	add	r3, sp, #32
   119c4:	mov	r0, r5
   119c8:	bl	147b0 <__assert_fail@plt+0x35dc>
   119cc:	cmp	r0, #0
   119d0:	bne	11a54 <__assert_fail@plt+0x880>
   119d4:	ldrd	r2, [sp, #32]
   119d8:	mov	r1, #0
   119dc:	mvn	r0, #0
   119e0:	cmp	r3, r1
   119e4:	cmpeq	r2, r0
   119e8:	bhi	11a54 <__assert_fail@plt+0x880>
   119ec:	bl	11078 <__ctype_b_loc@plt>
   119f0:	ldr	r1, [r0]
   119f4:	mov	r0, r5
   119f8:	ldrb	r3, [r5], #1
   119fc:	lsl	r2, r3, #1
   11a00:	ldrh	r2, [r1, r2]
   11a04:	tst	r2, #8192	; 0x2000
   11a08:	bne	119f4 <__assert_fail@plt+0x820>
   11a0c:	cmp	r3, #43	; 0x2b
   11a10:	beq	11a24 <__assert_fail@plt+0x850>
   11a14:	bl	111c8 <getgrnam@plt>
   11a18:	cmp	r0, #0
   11a1c:	ldrne	r2, [r0, #8]
   11a20:	bne	11a68 <__assert_fail@plt+0x894>
   11a24:	ldr	r3, [sp, #28]
   11a28:	cmp	r6, r3
   11a2c:	bne	11a44 <__assert_fail@plt+0x870>
   11a30:	mov	r0, r7
   11a34:	mov	r2, #4
   11a38:	add	r1, sp, #28
   11a3c:	bl	13f14 <__assert_fail@plt+0x2d40>
   11a40:	mov	r7, r0
   11a44:	ldr	r3, [sp, #32]
   11a48:	str	r3, [r7, r6, lsl #2]
   11a4c:	add	r6, r6, #1
   11a50:	b	11b38 <__assert_fail@plt+0x964>
   11a54:	mov	r0, r5
   11a58:	bl	111c8 <getgrnam@plt>
   11a5c:	subs	r8, r0, #0
   11a60:	beq	11af4 <__assert_fail@plt+0x920>
   11a64:	ldr	r2, [r8, #8]
   11a68:	mov	r3, #0
   11a6c:	strd	r2, [sp, #32]
   11a70:	b	11a24 <__assert_fail@plt+0x850>
   11a74:	mvn	r4, #0
   11a78:	add	r3, r4, #1
   11a7c:	cmp	r6, #0
   11a80:	movne	r3, #0
   11a84:	andeq	r3, r3, #1
   11a88:	cmp	r3, #0
   11a8c:	beq	11acc <__assert_fail@plt+0x8f8>
   11a90:	cmp	r9, #0
   11a94:	beq	11ac8 <__assert_fail@plt+0x8f4>
   11a98:	mov	r2, #5
   11a9c:	ldr	r1, [pc, #176]	; 11b54 <__assert_fail@plt+0x980>
   11aa0:	mov	r0, #0
   11aa4:	bl	10f88 <dcgettext@plt>
   11aa8:	mov	r4, r0
   11aac:	mov	r0, fp
   11ab0:	bl	13598 <__assert_fail@plt+0x23c4>
   11ab4:	mov	r1, #0
   11ab8:	mov	r2, r4
   11abc:	mov	r3, r0
   11ac0:	mov	r0, r1
   11ac4:	bl	11018 <error@plt>
   11ac8:	mvn	r4, #0
   11acc:	ldr	r3, [sp, #12]
   11ad0:	cmp	r4, #0
   11ad4:	mov	r0, sl
   11ad8:	str	r7, [r3]
   11adc:	ldreq	r3, [sp, #16]
   11ae0:	streq	r6, [r3]
   11ae4:	bl	11f14 <__assert_fail@plt+0xd40>
   11ae8:	mov	r0, r4
   11aec:	add	sp, sp, #44	; 0x2c
   11af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11af4:	cmp	r9, #0
   11af8:	beq	11a74 <__assert_fail@plt+0x8a0>
   11afc:	bl	110b4 <__errno_location@plt>
   11b00:	mov	r2, #5
   11b04:	ldr	r1, [pc, #76]	; 11b58 <__assert_fail@plt+0x984>
   11b08:	ldr	r4, [r0]
   11b0c:	mov	r0, r8
   11b10:	bl	10f88 <dcgettext@plt>
   11b14:	str	r0, [sp, #20]
   11b18:	mov	r0, r5
   11b1c:	bl	13598 <__assert_fail@plt+0x23c4>
   11b20:	mov	r1, r4
   11b24:	ldr	r2, [sp, #20]
   11b28:	mvn	r4, #0
   11b2c:	mov	r3, r0
   11b30:	mov	r0, r8
   11b34:	bl	11018 <error@plt>
   11b38:	ldr	r1, [pc, #12]	; 11b4c <__assert_fail@plt+0x978>
   11b3c:	mov	r0, #0
   11b40:	bl	1112c <strtok@plt>
   11b44:	mov	r5, r0
   11b48:	b	119a8 <__assert_fail@plt+0x7d4>
   11b4c:	andeq	r5, r1, r4, lsl #17
   11b50:	andeq	r5, r1, ip, asr #18
   11b54:	muleq	r1, r7, r8
   11b58:	andeq	r5, r1, r6, lsl #17
   11b5c:	subs	r4, r0, #0
   11b60:	push	{r7, lr}
   11b64:	sub	sp, sp, #56	; 0x38
   11b68:	ldr	r5, [pc, #576]	; 11db0 <__assert_fail@plt+0xbdc>
   11b6c:	beq	11ba4 <__assert_fail@plt+0x9d0>
   11b70:	ldr	r3, [pc, #572]	; 11db4 <__assert_fail@plt+0xbe0>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #568]	; 11db8 <__assert_fail@plt+0xbe4>
   11b7c:	mov	r0, #0
   11b80:	ldr	r6, [r3]
   11b84:	bl	10f88 <dcgettext@plt>
   11b88:	ldr	r3, [r5]
   11b8c:	mov	r1, #1
   11b90:	mov	r2, r0
   11b94:	mov	r0, r6
   11b98:	bl	11108 <__fprintf_chk@plt>
   11b9c:	mov	r0, r4
   11ba0:	bl	11084 <exit@plt>
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #524]	; 11dbc <__assert_fail@plt+0xbe8>
   11bac:	bl	10f88 <dcgettext@plt>
   11bb0:	ldr	r3, [r5]
   11bb4:	ldr	r5, [pc, #516]	; 11dc0 <__assert_fail@plt+0xbec>
   11bb8:	mov	r2, r3
   11bbc:	ldr	r8, [pc, #512]	; 11dc4 <__assert_fail@plt+0xbf0>
   11bc0:	mov	r1, r0
   11bc4:	mov	r0, #1
   11bc8:	bl	110e4 <__printf_chk@plt>
   11bcc:	mov	r2, #5
   11bd0:	ldr	r1, [pc, #496]	; 11dc8 <__assert_fail@plt+0xbf4>
   11bd4:	mov	r0, r4
   11bd8:	bl	10f88 <dcgettext@plt>
   11bdc:	ldr	r1, [r5]
   11be0:	bl	10eec <fputs_unlocked@plt>
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #476]	; 11dcc <__assert_fail@plt+0xbf8>
   11bec:	mov	r0, r4
   11bf0:	bl	10f88 <dcgettext@plt>
   11bf4:	ldr	r1, [r5]
   11bf8:	bl	10eec <fputs_unlocked@plt>
   11bfc:	mov	r2, #5
   11c00:	ldr	r1, [pc, #456]	; 11dd0 <__assert_fail@plt+0xbfc>
   11c04:	mov	r0, r4
   11c08:	bl	10f88 <dcgettext@plt>
   11c0c:	ldr	r1, [r5]
   11c10:	bl	10eec <fputs_unlocked@plt>
   11c14:	mov	r2, #5
   11c18:	ldr	r1, [pc, #436]	; 11dd4 <__assert_fail@plt+0xc00>
   11c1c:	mov	r0, r4
   11c20:	bl	10f88 <dcgettext@plt>
   11c24:	ldr	r1, [pc, #428]	; 11dd8 <__assert_fail@plt+0xc04>
   11c28:	mov	r6, r0
   11c2c:	mov	r0, #4
   11c30:	bl	133b4 <__assert_fail@plt+0x21e0>
   11c34:	mov	r1, r6
   11c38:	mov	r6, r4
   11c3c:	mov	r2, r0
   11c40:	mov	r0, #1
   11c44:	bl	110e4 <__printf_chk@plt>
   11c48:	mov	r2, #5
   11c4c:	ldr	r1, [pc, #392]	; 11ddc <__assert_fail@plt+0xc08>
   11c50:	mov	r0, r4
   11c54:	bl	10f88 <dcgettext@plt>
   11c58:	ldr	r1, [r5]
   11c5c:	bl	10eec <fputs_unlocked@plt>
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #372]	; 11de0 <__assert_fail@plt+0xc0c>
   11c68:	mov	r0, r4
   11c6c:	bl	10f88 <dcgettext@plt>
   11c70:	ldr	r1, [r5]
   11c74:	bl	10eec <fputs_unlocked@plt>
   11c78:	mov	r2, #5
   11c7c:	ldr	r1, [pc, #352]	; 11de4 <__assert_fail@plt+0xc10>
   11c80:	mov	r0, r4
   11c84:	bl	10f88 <dcgettext@plt>
   11c88:	ldr	r1, [r5]
   11c8c:	bl	10eec <fputs_unlocked@plt>
   11c90:	ldr	lr, [pc, #336]	; 11de8 <__assert_fail@plt+0xc14>
   11c94:	mov	ip, sp
   11c98:	ldm	lr!, {r0, r1, r2, r3}
   11c9c:	stmia	ip!, {r0, r1, r2, r3}
   11ca0:	ldm	lr!, {r0, r1, r2, r3}
   11ca4:	stmia	ip!, {r0, r1, r2, r3}
   11ca8:	ldm	lr!, {r0, r1, r2, r3}
   11cac:	stmia	ip!, {r0, r1, r2, r3}
   11cb0:	ldm	lr, {r0, r1}
   11cb4:	stm	ip, {r0, r1}
   11cb8:	ldr	r1, [sp, r6]
   11cbc:	add	r7, sp, r6
   11cc0:	cmp	r1, #0
   11cc4:	bne	11d68 <__assert_fail@plt+0xb94>
   11cc8:	ldr	r6, [r7, #4]
   11ccc:	ldr	r7, [pc, #240]	; 11dc4 <__assert_fail@plt+0xbf0>
   11cd0:	cmp	r6, #0
   11cd4:	mov	r2, #5
   11cd8:	ldr	r1, [pc, #268]	; 11dec <__assert_fail@plt+0xc18>
   11cdc:	mov	r0, #0
   11ce0:	moveq	r6, r7
   11ce4:	bl	10f88 <dcgettext@plt>
   11ce8:	ldr	r3, [pc, #256]	; 11df0 <__assert_fail@plt+0xc1c>
   11cec:	ldr	r2, [pc, #256]	; 11df4 <__assert_fail@plt+0xc20>
   11cf0:	mov	r1, r0
   11cf4:	mov	r0, #1
   11cf8:	bl	110e4 <__printf_chk@plt>
   11cfc:	mov	r1, #0
   11d00:	mov	r0, #5
   11d04:	bl	11138 <setlocale@plt>
   11d08:	cmp	r0, #0
   11d0c:	bne	11d80 <__assert_fail@plt+0xbac>
   11d10:	mov	r2, #5
   11d14:	ldr	r1, [pc, #220]	; 11df8 <__assert_fail@plt+0xc24>
   11d18:	mov	r0, #0
   11d1c:	bl	10f88 <dcgettext@plt>
   11d20:	ldr	r3, [pc, #156]	; 11dc4 <__assert_fail@plt+0xbf0>
   11d24:	ldr	r2, [pc, #196]	; 11df0 <__assert_fail@plt+0xc1c>
   11d28:	mov	r1, r0
   11d2c:	mov	r0, #1
   11d30:	bl	110e4 <__printf_chk@plt>
   11d34:	mov	r2, #5
   11d38:	ldr	r1, [pc, #188]	; 11dfc <__assert_fail@plt+0xc28>
   11d3c:	mov	r0, #0
   11d40:	bl	10f88 <dcgettext@plt>
   11d44:	ldr	r2, [pc, #180]	; 11e00 <__assert_fail@plt+0xc2c>
   11d48:	cmp	r6, r7
   11d4c:	ldr	r3, [pc, #176]	; 11e04 <__assert_fail@plt+0xc30>
   11d50:	moveq	r3, r2
   11d54:	mov	r2, r6
   11d58:	mov	r1, r0
   11d5c:	mov	r0, #1
   11d60:	bl	110e4 <__printf_chk@plt>
   11d64:	b	11b9c <__assert_fail@plt+0x9c8>
   11d68:	mov	r0, r8
   11d6c:	bl	10f10 <strcmp@plt>
   11d70:	add	r6, r6, #8
   11d74:	cmp	r0, #0
   11d78:	bne	11cb8 <__assert_fail@plt+0xae4>
   11d7c:	b	11cc8 <__assert_fail@plt+0xaf4>
   11d80:	mov	r2, #3
   11d84:	ldr	r1, [pc, #124]	; 11e08 <__assert_fail@plt+0xc34>
   11d88:	bl	111a4 <strncmp@plt>
   11d8c:	cmp	r0, #0
   11d90:	beq	11d10 <__assert_fail@plt+0xb3c>
   11d94:	mov	r2, #5
   11d98:	ldr	r1, [pc, #108]	; 11e0c <__assert_fail@plt+0xc38>
   11d9c:	mov	r0, #0
   11da0:	bl	10f88 <dcgettext@plt>
   11da4:	ldr	r1, [r5]
   11da8:	bl	10eec <fputs_unlocked@plt>
   11dac:	b	11d10 <__assert_fail@plt+0xb3c>
   11db0:	muleq	r2, r0, r1
   11db4:	andeq	r7, r2, r8, ror r1
   11db8:			; <UNDEFINED> instruction: 0x000158b4
   11dbc:	ldrdeq	r5, [r1], -fp
   11dc0:	andeq	r7, r2, ip, ror r1
   11dc4:	andeq	r5, r1, sp, lsr #17
   11dc8:	andeq	r5, r1, fp, lsl r9
   11dcc:	andeq	r5, r1, sp, asr #18
   11dd0:	muleq	r1, r7, r9
   11dd4:	andeq	r5, r1, r0, ror #19
   11dd8:	andeq	r6, r1, ip, asr #3
   11ddc:	andeq	r5, r1, r4, lsr #20
   11de0:	andeq	r5, r1, r1, asr sl
   11de4:	andeq	r5, r1, r7, lsl #21
   11de8:	andeq	r5, r1, ip, ror #15
   11dec:	andeq	r5, r1, ip, asr #21
   11df0:	andeq	r5, r1, r3, ror #21
   11df4:	andeq	r5, r1, fp, lsl #22
   11df8:	andeq	r5, r1, r4, ror #22
   11dfc:	andeq	r5, r1, pc, ror fp
   11e00:	andeq	r5, r1, r3, asr #26
   11e04:	andeq	r5, r1, ip, asr #18
   11e08:	andeq	r5, r1, r9, lsl fp
   11e0c:	andeq	r5, r1, sp, lsl fp
   11e10:	ldr	r3, [pc, #4]	; 11e1c <__assert_fail@plt+0xc48>
   11e14:	str	r0, [r3]
   11e18:	bx	lr
   11e1c:	andeq	r7, r2, r8, lsl #3
   11e20:	ldr	r3, [pc, #4]	; 11e2c <__assert_fail@plt+0xc58>
   11e24:	strb	r0, [r3, #4]
   11e28:	bx	lr
   11e2c:	andeq	r7, r2, r8, lsl #3
   11e30:	ldr	r3, [pc, #192]	; 11ef8 <__assert_fail@plt+0xd24>
   11e34:	push	{r0, r1, r4, r5, r6, lr}
   11e38:	ldr	r0, [r3]
   11e3c:	bl	14bc0 <__assert_fail@plt+0x39ec>
   11e40:	cmp	r0, #0
   11e44:	beq	11edc <__assert_fail@plt+0xd08>
   11e48:	ldr	r3, [pc, #172]	; 11efc <__assert_fail@plt+0xd28>
   11e4c:	mov	r4, r3
   11e50:	ldrb	r2, [r3, #4]
   11e54:	cmp	r2, #0
   11e58:	beq	11e6c <__assert_fail@plt+0xc98>
   11e5c:	bl	110b4 <__errno_location@plt>
   11e60:	ldr	r3, [r0]
   11e64:	cmp	r3, #32
   11e68:	beq	11edc <__assert_fail@plt+0xd08>
   11e6c:	mov	r2, #5
   11e70:	ldr	r1, [pc, #136]	; 11f00 <__assert_fail@plt+0xd2c>
   11e74:	mov	r0, #0
   11e78:	bl	10f88 <dcgettext@plt>
   11e7c:	ldr	r4, [r4]
   11e80:	cmp	r4, #0
   11e84:	mov	r5, r0
   11e88:	beq	11ec0 <__assert_fail@plt+0xcec>
   11e8c:	bl	110b4 <__errno_location@plt>
   11e90:	ldr	r6, [r0]
   11e94:	mov	r0, r4
   11e98:	bl	13448 <__assert_fail@plt+0x2274>
   11e9c:	str	r5, [sp]
   11ea0:	ldr	r2, [pc, #92]	; 11f04 <__assert_fail@plt+0xd30>
   11ea4:	mov	r1, r6
   11ea8:	mov	r3, r0
   11eac:	mov	r0, #0
   11eb0:	bl	11018 <error@plt>
   11eb4:	ldr	r3, [pc, #76]	; 11f08 <__assert_fail@plt+0xd34>
   11eb8:	ldr	r0, [r3]
   11ebc:	bl	10f40 <_exit@plt>
   11ec0:	bl	110b4 <__errno_location@plt>
   11ec4:	mov	r3, r5
   11ec8:	ldr	r2, [pc, #60]	; 11f0c <__assert_fail@plt+0xd38>
   11ecc:	ldr	r1, [r0]
   11ed0:	mov	r0, r4
   11ed4:	bl	11018 <error@plt>
   11ed8:	b	11eb4 <__assert_fail@plt+0xce0>
   11edc:	ldr	r3, [pc, #44]	; 11f10 <__assert_fail@plt+0xd3c>
   11ee0:	ldr	r0, [r3]
   11ee4:	bl	14bc0 <__assert_fail@plt+0x39ec>
   11ee8:	cmp	r0, #0
   11eec:	bne	11eb4 <__assert_fail@plt+0xce0>
   11ef0:	add	sp, sp, #8
   11ef4:	pop	{r4, r5, r6, pc}
   11ef8:	andeq	r7, r2, ip, ror r1
   11efc:	andeq	r7, r2, r8, lsl #3
   11f00:			; <UNDEFINED> instruction: 0x00015db6
   11f04:	andeq	r5, r1, r2, asr #27
   11f08:	andeq	r7, r2, r0, lsr #2
   11f0c:	andeq	r5, r1, r6, asr #27
   11f10:	andeq	r7, r2, r8, ror r1
   11f14:	push	{r0, r1, r2, r4, r5, lr}
   11f18:	mov	r5, r0
   11f1c:	bl	110b4 <__errno_location@plt>
   11f20:	ldr	r3, [r0]
   11f24:	mov	r4, r0
   11f28:	str	r3, [sp]
   11f2c:	str	r3, [sp, #4]
   11f30:	mov	r3, #0
   11f34:	str	r3, [r0]
   11f38:	mov	r0, r5
   11f3c:	bl	10f34 <free@plt>
   11f40:	ldr	r3, [r4]
   11f44:	add	r2, sp, #8
   11f48:	cmp	r3, #0
   11f4c:	moveq	r3, #4
   11f50:	movne	r3, #0
   11f54:	add	r3, r2, r3
   11f58:	ldr	r3, [r3, #-8]
   11f5c:	str	r3, [r4]
   11f60:	add	sp, sp, #12
   11f64:	pop	{r4, r5, pc}
   11f68:	push	{r4, r5, r6, lr}
   11f6c:	subs	r5, r0, #0
   11f70:	bne	11f88 <__assert_fail@plt+0xdb4>
   11f74:	ldr	r3, [pc, #124]	; 11ff8 <__assert_fail@plt+0xe24>
   11f78:	ldr	r0, [pc, #124]	; 11ffc <__assert_fail@plt+0xe28>
   11f7c:	ldr	r1, [r3]
   11f80:	bl	11198 <fputs@plt>
   11f84:	bl	111b0 <abort@plt>
   11f88:	mov	r1, #47	; 0x2f
   11f8c:	bl	11150 <strrchr@plt>
   11f90:	cmp	r0, #0
   11f94:	addne	r4, r0, #1
   11f98:	moveq	r4, r5
   11f9c:	sub	r3, r4, r5
   11fa0:	cmp	r3, #6
   11fa4:	ble	11fe4 <__assert_fail@plt+0xe10>
   11fa8:	mov	r2, #7
   11fac:	ldr	r1, [pc, #76]	; 12000 <__assert_fail@plt+0xe2c>
   11fb0:	sub	r0, r4, #7
   11fb4:	bl	111a4 <strncmp@plt>
   11fb8:	cmp	r0, #0
   11fbc:	bne	11fe4 <__assert_fail@plt+0xe10>
   11fc0:	mov	r2, #3
   11fc4:	ldr	r1, [pc, #56]	; 12004 <__assert_fail@plt+0xe30>
   11fc8:	mov	r0, r4
   11fcc:	bl	111a4 <strncmp@plt>
   11fd0:	cmp	r0, #0
   11fd4:	movne	r5, r4
   11fd8:	ldreq	r3, [pc, #40]	; 12008 <__assert_fail@plt+0xe34>
   11fdc:	addeq	r5, r4, #3
   11fe0:	streq	r5, [r3]
   11fe4:	ldr	r3, [pc, #32]	; 1200c <__assert_fail@plt+0xe38>
   11fe8:	str	r5, [r3]
   11fec:	ldr	r3, [pc, #28]	; 12010 <__assert_fail@plt+0xe3c>
   11ff0:	str	r5, [r3]
   11ff4:	pop	{r4, r5, r6, pc}
   11ff8:	andeq	r7, r2, r8, ror r1
   11ffc:	andeq	r5, r1, r9, asr #27
   12000:	andeq	r5, r1, r1, lsl #28
   12004:	andeq	r5, r1, r9, lsl #28
   12008:	andeq	r7, r2, r8, ror #2
   1200c:	muleq	r2, r0, r1
   12010:	andeq	r7, r2, ip, ror #2
   12014:	push	{r4, r5, r6, lr}
   12018:	mov	r2, #48	; 0x30
   1201c:	mov	r5, r1
   12020:	mov	r1, #0
   12024:	mov	r4, r0
   12028:	bl	110d8 <memset@plt>
   1202c:	cmp	r5, #10
   12030:	bne	12038 <__assert_fail@plt+0xe64>
   12034:	bl	111b0 <abort@plt>
   12038:	str	r5, [r4]
   1203c:	mov	r0, r4
   12040:	pop	{r4, r5, r6, pc}
   12044:	push	{r4, r5, r6, lr}
   12048:	mov	r4, r0
   1204c:	mov	r5, r1
   12050:	bl	14e24 <__assert_fail@plt+0x3c50>
   12054:	ldrb	r3, [r0]
   12058:	bic	r3, r3, #32
   1205c:	cmp	r3, #85	; 0x55
   12060:	bne	120d0 <__assert_fail@plt+0xefc>
   12064:	ldrb	r3, [r0, #1]
   12068:	bic	r3, r3, #32
   1206c:	cmp	r3, #84	; 0x54
   12070:	bne	120a8 <__assert_fail@plt+0xed4>
   12074:	ldrb	r3, [r0, #2]
   12078:	bic	r3, r3, #32
   1207c:	cmp	r3, #70	; 0x46
   12080:	bne	120a8 <__assert_fail@plt+0xed4>
   12084:	ldrb	r3, [r0, #3]
   12088:	cmp	r3, #45	; 0x2d
   1208c:	bne	120a8 <__assert_fail@plt+0xed4>
   12090:	ldrb	r3, [r0, #4]
   12094:	cmp	r3, #56	; 0x38
   12098:	bne	120a8 <__assert_fail@plt+0xed4>
   1209c:	ldrb	r3, [r0, #5]
   120a0:	cmp	r3, #0
   120a4:	beq	120bc <__assert_fail@plt+0xee8>
   120a8:	ldr	r1, [pc, #144]	; 12140 <__assert_fail@plt+0xf6c>
   120ac:	ldr	r0, [pc, #144]	; 12144 <__assert_fail@plt+0xf70>
   120b0:	cmp	r5, #9
   120b4:	movne	r0, r1
   120b8:	pop	{r4, r5, r6, pc}
   120bc:	ldrb	r3, [r4]
   120c0:	ldr	r1, [pc, #128]	; 12148 <__assert_fail@plt+0xf74>
   120c4:	ldr	r0, [pc, #128]	; 1214c <__assert_fail@plt+0xf78>
   120c8:	cmp	r3, #96	; 0x60
   120cc:	b	120b4 <__assert_fail@plt+0xee0>
   120d0:	cmp	r3, #71	; 0x47
   120d4:	bne	120a8 <__assert_fail@plt+0xed4>
   120d8:	ldrb	r3, [r0, #1]
   120dc:	bic	r3, r3, #32
   120e0:	cmp	r3, #66	; 0x42
   120e4:	bne	120a8 <__assert_fail@plt+0xed4>
   120e8:	ldrb	r3, [r0, #2]
   120ec:	cmp	r3, #49	; 0x31
   120f0:	bne	120a8 <__assert_fail@plt+0xed4>
   120f4:	ldrb	r3, [r0, #3]
   120f8:	cmp	r3, #56	; 0x38
   120fc:	bne	120a8 <__assert_fail@plt+0xed4>
   12100:	ldrb	r3, [r0, #4]
   12104:	cmp	r3, #48	; 0x30
   12108:	bne	120a8 <__assert_fail@plt+0xed4>
   1210c:	ldrb	r3, [r0, #5]
   12110:	cmp	r3, #51	; 0x33
   12114:	bne	120a8 <__assert_fail@plt+0xed4>
   12118:	ldrb	r3, [r0, #6]
   1211c:	cmp	r3, #48	; 0x30
   12120:	bne	120a8 <__assert_fail@plt+0xed4>
   12124:	ldrb	r3, [r0, #7]
   12128:	cmp	r3, #0
   1212c:	bne	120a8 <__assert_fail@plt+0xed4>
   12130:	ldrb	r3, [r4]
   12134:	ldr	r1, [pc, #20]	; 12150 <__assert_fail@plt+0xf7c>
   12138:	ldr	r0, [pc, #20]	; 12154 <__assert_fail@plt+0xf80>
   1213c:	b	120c8 <__assert_fail@plt+0xef4>
   12140:	andeq	r5, r1, r5, ror lr
   12144:	andeq	r5, r1, r3, ror lr
   12148:	andeq	r5, r1, r8, ror #28
   1214c:	andeq	r5, r1, r4, ror #28
   12150:	andeq	r5, r1, r0, ror lr
   12154:	andeq	r5, r1, ip, ror #28
   12158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1215c:	sub	sp, sp, #108	; 0x6c
   12160:	mov	r8, r0
   12164:	str	r3, [sp, #36]	; 0x24
   12168:	mov	r5, r1
   1216c:	str	r2, [sp, #44]	; 0x2c
   12170:	ldr	sl, [sp, #144]	; 0x90
   12174:	bl	10fdc <__ctype_get_mb_cur_max@plt>
   12178:	ldr	r3, [sp, #148]	; 0x94
   1217c:	mov	r7, #0
   12180:	str	r7, [sp, #48]	; 0x30
   12184:	lsr	r6, r3, #1
   12188:	and	r6, r6, #1
   1218c:	mov	r3, #1
   12190:	str	r3, [sp, #72]	; 0x48
   12194:	str	r7, [sp, #24]
   12198:	str	r7, [sp, #32]
   1219c:	str	r7, [sp, #40]	; 0x28
   121a0:	str	r7, [sp, #60]	; 0x3c
   121a4:	str	r0, [sp, #76]	; 0x4c
   121a8:	cmp	sl, #10
   121ac:	ldrls	pc, [pc, sl, lsl #2]
   121b0:	b	123ec <__assert_fail@plt+0x1218>
   121b4:	andeq	r2, r1, r0, ror #3
   121b8:	andeq	r2, r1, r4, ror lr
   121bc:			; <UNDEFINED> instruction: 0x000123b8
   121c0:	andeq	r2, r1, r4, lsl #8
   121c4:	muleq	r1, r4, r3
   121c8:	andeq	r2, r1, ip, ror #3
   121cc:	andeq	r2, r1, r4, asr lr
   121d0:	strdeq	r2, [r1], -r0
   121d4:	andeq	r2, r1, r4, ror #5
   121d8:	andeq	r2, r1, r4, ror #5
   121dc:	andeq	r2, r1, r4, ror #5
   121e0:	mov	r6, #0
   121e4:	mov	r4, #0
   121e8:	b	12218 <__assert_fail@plt+0x1044>
   121ec:	cmp	r6, #0
   121f0:	bne	12414 <__assert_fail@plt+0x1240>
   121f4:	cmp	r5, #0
   121f8:	movne	r3, #34	; 0x22
   121fc:	strbne	r3, [r8]
   12200:	mov	r3, #1
   12204:	str	r3, [sp, #24]
   12208:	str	r3, [sp, #32]
   1220c:	mov	r4, #1
   12210:	ldr	r3, [pc, #3172]	; 12e7c <__assert_fail@plt+0x1ca8>
   12214:	str	r3, [sp, #40]	; 0x28
   12218:	mov	r9, r5
   1221c:	mov	r3, #0
   12220:	str	r7, [sp, #68]	; 0x44
   12224:	str	r3, [sp, #28]
   12228:	ldr	r3, [sp, #36]	; 0x24
   1222c:	cmn	r3, #1
   12230:	bne	12dc0 <__assert_fail@plt+0x1bec>
   12234:	ldr	r3, [sp, #44]	; 0x2c
   12238:	ldr	r2, [sp, #28]
   1223c:	ldrb	r3, [r3, r2]
   12240:	adds	r3, r3, #0
   12244:	movne	r3, #1
   12248:	str	r3, [sp, #52]	; 0x34
   1224c:	ldr	r3, [sp, #52]	; 0x34
   12250:	cmp	r3, #0
   12254:	bne	1243c <__assert_fail@plt+0x1268>
   12258:	sub	r2, sl, #2
   1225c:	clz	r2, r2
   12260:	lsr	r2, r2, #5
   12264:	and	r3, r6, r2
   12268:	cmp	r4, #0
   1226c:	movne	r3, #0
   12270:	andeq	r3, r3, #1
   12274:	cmp	r3, #0
   12278:	bne	12604 <__assert_fail@plt+0x1430>
   1227c:	eor	r3, r6, #1
   12280:	ands	r2, r2, r3
   12284:	beq	12df8 <__assert_fail@plt+0x1c24>
   12288:	ldr	r3, [sp, #68]	; 0x44
   1228c:	cmp	r3, #0
   12290:	beq	12e30 <__assert_fail@plt+0x1c5c>
   12294:	ldr	r3, [sp, #72]	; 0x48
   12298:	cmp	r3, #0
   1229c:	beq	12dd4 <__assert_fail@plt+0x1c00>
   122a0:	ldr	r3, [sp, #160]	; 0xa0
   122a4:	ldr	r2, [sp, #44]	; 0x2c
   122a8:	str	r3, [sp, #16]
   122ac:	ldr	r3, [sp, #156]	; 0x9c
   122b0:	ldr	r1, [sp, #60]	; 0x3c
   122b4:	str	r3, [sp, #12]
   122b8:	ldr	r3, [sp, #152]	; 0x98
   122bc:	str	r3, [sp, #8]
   122c0:	ldr	r3, [sp, #148]	; 0x94
   122c4:	str	r3, [sp, #4]
   122c8:	mov	r3, #5
   122cc:	str	r3, [sp]
   122d0:	ldr	r3, [sp, #36]	; 0x24
   122d4:	mov	r0, r8
   122d8:	bl	12158 <__assert_fail@plt+0xf84>
   122dc:	mov	r4, r0
   122e0:	b	12e24 <__assert_fail@plt+0x1c50>
   122e4:	cmp	sl, #10
   122e8:	beq	12344 <__assert_fail@plt+0x1170>
   122ec:	ldr	r4, [pc, #2956]	; 12e80 <__assert_fail@plt+0x1cac>
   122f0:	mov	r2, #5
   122f4:	mov	r1, r4
   122f8:	mov	r0, #0
   122fc:	bl	10f88 <dcgettext@plt>
   12300:	cmp	r0, r4
   12304:	str	r0, [sp, #156]	; 0x9c
   12308:	bne	12318 <__assert_fail@plt+0x1144>
   1230c:	mov	r1, sl
   12310:	bl	12044 <__assert_fail@plt+0xe70>
   12314:	str	r0, [sp, #156]	; 0x9c
   12318:	ldr	r4, [pc, #2916]	; 12e84 <__assert_fail@plt+0x1cb0>
   1231c:	mov	r2, #5
   12320:	mov	r1, r4
   12324:	mov	r0, #0
   12328:	bl	10f88 <dcgettext@plt>
   1232c:	cmp	r0, r4
   12330:	str	r0, [sp, #160]	; 0xa0
   12334:	bne	12344 <__assert_fail@plt+0x1170>
   12338:	mov	r1, sl
   1233c:	bl	12044 <__assert_fail@plt+0xe70>
   12340:	str	r0, [sp, #160]	; 0xa0
   12344:	cmp	r6, #0
   12348:	moveq	r4, r6
   1234c:	beq	12364 <__assert_fail@plt+0x1190>
   12350:	mov	r4, #0
   12354:	b	12374 <__assert_fail@plt+0x11a0>
   12358:	cmp	r5, r4
   1235c:	strbhi	r3, [r8, r4]
   12360:	add	r4, r4, #1
   12364:	ldr	r3, [sp, #156]	; 0x9c
   12368:	ldrb	r3, [r3, r4]
   1236c:	cmp	r3, #0
   12370:	bne	12358 <__assert_fail@plt+0x1184>
   12374:	ldr	r0, [sp, #160]	; 0xa0
   12378:	bl	1109c <strlen@plt>
   1237c:	ldr	r3, [sp, #160]	; 0xa0
   12380:	str	r3, [sp, #40]	; 0x28
   12384:	mov	r3, #1
   12388:	str	r3, [sp, #24]
   1238c:	str	r0, [sp, #32]
   12390:	b	12218 <__assert_fail@plt+0x1044>
   12394:	mov	r3, #1
   12398:	cmp	r6, #0
   1239c:	streq	r3, [sp, #24]
   123a0:	beq	123c0 <__assert_fail@plt+0x11ec>
   123a4:	str	r3, [sp, #32]
   123a8:	ldr	r3, [pc, #2772]	; 12e84 <__assert_fail@plt+0x1cb0>
   123ac:	mov	r4, #0
   123b0:	str	r3, [sp, #40]	; 0x28
   123b4:	b	123e4 <__assert_fail@plt+0x1210>
   123b8:	cmp	r6, #0
   123bc:	bne	1242c <__assert_fail@plt+0x1258>
   123c0:	cmp	r5, #0
   123c4:	movne	r3, #39	; 0x27
   123c8:	strbne	r3, [r8]
   123cc:	mov	r3, #1
   123d0:	str	r3, [sp, #32]
   123d4:	mov	r6, #0
   123d8:	ldr	r3, [pc, #2724]	; 12e84 <__assert_fail@plt+0x1cb0>
   123dc:	mov	r4, #1
   123e0:	str	r3, [sp, #40]	; 0x28
   123e4:	mov	sl, #2
   123e8:	b	12218 <__assert_fail@plt+0x1044>
   123ec:	bl	111b0 <abort@plt>
   123f0:	mov	r6, #0
   123f4:	mov	r3, #1
   123f8:	str	r3, [sp, #24]
   123fc:	mov	r4, r6
   12400:	b	12218 <__assert_fail@plt+0x1044>
   12404:	mov	r6, #1
   12408:	str	r6, [sp, #24]
   1240c:	str	r6, [sp, #32]
   12410:	b	123a8 <__assert_fail@plt+0x11d4>
   12414:	mov	r3, #1
   12418:	str	r3, [sp, #32]
   1241c:	ldr	r3, [pc, #2648]	; 12e7c <__assert_fail@plt+0x1ca8>
   12420:	str	r6, [sp, #24]
   12424:	str	r3, [sp, #40]	; 0x28
   12428:	b	121e4 <__assert_fail@plt+0x1010>
   1242c:	mov	r3, #1
   12430:	str	r3, [sp, #32]
   12434:	ldr	r3, [pc, #2632]	; 12e84 <__assert_fail@plt+0x1cb0>
   12438:	b	12424 <__assert_fail@plt+0x1250>
   1243c:	ldr	r3, [sp, #32]
   12440:	ldr	fp, [sp, #24]
   12444:	cmp	sl, #2
   12448:	moveq	fp, #0
   1244c:	andne	fp, fp, #1
   12450:	adds	r5, r3, #0
   12454:	movne	r5, #1
   12458:	ands	r3, r5, fp
   1245c:	str	r3, [sp, #64]	; 0x40
   12460:	beq	12530 <__assert_fail@plt+0x135c>
   12464:	ldr	r2, [sp, #32]
   12468:	ldr	r3, [sp, #28]
   1246c:	add	r7, r3, r2
   12470:	mov	r3, r2
   12474:	ldr	r2, [sp, #36]	; 0x24
   12478:	cmp	r3, #1
   1247c:	movls	r3, #0
   12480:	movhi	r3, #1
   12484:	cmn	r2, #1
   12488:	movne	r3, #0
   1248c:	cmp	r3, #0
   12490:	beq	124a0 <__assert_fail@plt+0x12cc>
   12494:	ldr	r0, [sp, #44]	; 0x2c
   12498:	bl	1109c <strlen@plt>
   1249c:	str	r0, [sp, #36]	; 0x24
   124a0:	ldr	r3, [sp, #36]	; 0x24
   124a4:	cmp	r3, r7
   124a8:	bcc	12528 <__assert_fail@plt+0x1354>
   124ac:	ldr	r3, [sp, #44]	; 0x2c
   124b0:	ldr	r0, [sp, #28]
   124b4:	ldr	r2, [sp, #32]
   124b8:	ldr	r1, [sp, #40]	; 0x28
   124bc:	add	r0, r3, r0
   124c0:	bl	10f70 <memcmp@plt>
   124c4:	cmp	r0, #0
   124c8:	bne	12528 <__assert_fail@plt+0x1354>
   124cc:	cmp	r6, #0
   124d0:	beq	12530 <__assert_fail@plt+0x135c>
   124d4:	str	r6, [sp, #24]
   124d8:	ldr	r3, [sp, #24]
   124dc:	ldr	r2, [sp, #44]	; 0x2c
   124e0:	cmp	sl, #2
   124e4:	movne	r3, #0
   124e8:	andeq	r3, r3, #1
   124ec:	cmp	r3, #0
   124f0:	ldr	r3, [sp, #160]	; 0xa0
   124f4:	movne	sl, #4
   124f8:	str	r3, [sp, #16]
   124fc:	ldr	r3, [sp, #156]	; 0x9c
   12500:	str	sl, [sp]
   12504:	str	r3, [sp, #12]
   12508:	mov	r3, #0
   1250c:	str	r3, [sp, #8]
   12510:	ldr	r3, [sp, #148]	; 0x94
   12514:	mov	r1, r9
   12518:	bic	r3, r3, #2
   1251c:	str	r3, [sp, #4]
   12520:	ldr	r3, [sp, #36]	; 0x24
   12524:	b	122d4 <__assert_fail@plt+0x1100>
   12528:	mov	r3, #0
   1252c:	str	r3, [sp, #64]	; 0x40
   12530:	ldr	r2, [sp, #28]
   12534:	ldr	r3, [sp, #44]	; 0x2c
   12538:	add	r3, r3, r2
   1253c:	str	r3, [sp, #80]	; 0x50
   12540:	ldr	r3, [sp, #44]	; 0x2c
   12544:	ldrb	r7, [r3, r2]
   12548:	cmp	r7, #58	; 0x3a
   1254c:	bhi	126b4 <__assert_fail@plt+0x14e0>
   12550:	cmp	r7, #43	; 0x2b
   12554:	bcs	12708 <__assert_fail@plt+0x1534>
   12558:	cmp	r7, #32
   1255c:	beq	12760 <__assert_fail@plt+0x158c>
   12560:	bhi	1260c <__assert_fail@plt+0x1438>
   12564:	cmp	r7, #9
   12568:	beq	12a14 <__assert_fail@plt+0x1840>
   1256c:	bhi	125d0 <__assert_fail@plt+0x13fc>
   12570:	cmp	r7, #7
   12574:	beq	12ac0 <__assert_fail@plt+0x18ec>
   12578:	bhi	1277c <__assert_fail@plt+0x15a8>
   1257c:	cmp	r7, #0
   12580:	beq	12798 <__assert_fail@plt+0x15c4>
   12584:	ldr	r3, [sp, #76]	; 0x4c
   12588:	cmp	r3, #1
   1258c:	bne	12b04 <__assert_fail@plt+0x1930>
   12590:	bl	11078 <__ctype_b_loc@plt>
   12594:	sxth	r3, r7
   12598:	lsl	r3, r3, #1
   1259c:	ldr	r2, [r0]
   125a0:	ldrh	r5, [r2, r3]
   125a4:	ldr	r3, [sp, #76]	; 0x4c
   125a8:	str	r3, [sp, #56]	; 0x38
   125ac:	lsr	r5, r5, #14
   125b0:	and	r5, r5, #1
   125b4:	ldr	r3, [sp, #24]
   125b8:	eor	fp, r5, #1
   125bc:	and	fp, fp, r3
   125c0:	ands	fp, fp, #255	; 0xff
   125c4:	beq	1294c <__assert_fail@plt+0x1778>
   125c8:	mov	r5, #0
   125cc:	b	12bb0 <__assert_fail@plt+0x19dc>
   125d0:	cmp	r7, #11
   125d4:	beq	12a1c <__assert_fail@plt+0x1848>
   125d8:	bcc	12ab8 <__assert_fail@plt+0x18e4>
   125dc:	cmp	r7, #12
   125e0:	beq	12ac8 <__assert_fail@plt+0x18f4>
   125e4:	cmp	r7, #13
   125e8:	moveq	r3, #114	; 0x72
   125ec:	bne	12584 <__assert_fail@plt+0x13b0>
   125f0:	cmp	sl, #2
   125f4:	movne	r2, #0
   125f8:	andeq	r2, r6, #1
   125fc:	cmp	r2, #0
   12600:	beq	12780 <__assert_fail@plt+0x15ac>
   12604:	mov	sl, #2
   12608:	b	124d8 <__assert_fail@plt+0x1304>
   1260c:	cmp	r7, #37	; 0x25
   12610:	beq	12708 <__assert_fail@plt+0x1534>
   12614:	bhi	12628 <__assert_fail@plt+0x1454>
   12618:	cmp	r7, #35	; 0x23
   1261c:	beq	12754 <__assert_fail@plt+0x1580>
   12620:	mov	r5, #0
   12624:	b	12764 <__assert_fail@plt+0x1590>
   12628:	cmp	r7, #39	; 0x27
   1262c:	bne	12620 <__assert_fail@plt+0x144c>
   12630:	cmp	sl, #2
   12634:	ldrne	r5, [sp, #52]	; 0x34
   12638:	movne	r3, r5
   1263c:	strne	r3, [sp, #68]	; 0x44
   12640:	bne	1270c <__assert_fail@plt+0x1538>
   12644:	cmp	r6, #0
   12648:	bne	124d8 <__assert_fail@plt+0x1304>
   1264c:	ldr	r2, [sp, #60]	; 0x3c
   12650:	adds	r3, r9, #0
   12654:	movne	r3, #1
   12658:	cmp	r2, #0
   1265c:	movne	r3, #0
   12660:	cmp	r3, #0
   12664:	strne	r9, [sp, #60]	; 0x3c
   12668:	movne	r9, #0
   1266c:	bne	1267c <__assert_fail@plt+0x14a8>
   12670:	cmp	r9, r4
   12674:	movhi	r3, #39	; 0x27
   12678:	strbhi	r3, [r8, r4]
   1267c:	add	r3, r4, #1
   12680:	cmp	r3, r9
   12684:	movcc	r2, #92	; 0x5c
   12688:	strbcc	r2, [r8, r3]
   1268c:	add	r3, r4, #2
   12690:	cmp	r3, r9
   12694:	ldr	r5, [sp, #52]	; 0x34
   12698:	movcc	r2, #39	; 0x27
   1269c:	strbcc	r2, [r8, r3]
   126a0:	add	r4, r4, #3
   126a4:	mov	fp, r6
   126a8:	str	r5, [sp, #68]	; 0x44
   126ac:	str	r6, [sp, #48]	; 0x30
   126b0:	b	1294c <__assert_fail@plt+0x1778>
   126b4:	cmp	r7, #94	; 0x5e
   126b8:	beq	12620 <__assert_fail@plt+0x144c>
   126bc:	bhi	12714 <__assert_fail@plt+0x1540>
   126c0:	cmp	r7, #90	; 0x5a
   126c4:	bhi	126fc <__assert_fail@plt+0x1528>
   126c8:	cmp	r7, #65	; 0x41
   126cc:	bcs	12708 <__assert_fail@plt+0x1534>
   126d0:	cmp	r7, #62	; 0x3e
   126d4:	bls	12620 <__assert_fail@plt+0x144c>
   126d8:	cmp	r7, #63	; 0x3f
   126dc:	bne	12584 <__assert_fail@plt+0x13b0>
   126e0:	cmp	sl, #2
   126e4:	beq	12888 <__assert_fail@plt+0x16b4>
   126e8:	cmp	sl, #5
   126ec:	beq	12898 <__assert_fail@plt+0x16c4>
   126f0:	mov	fp, #0
   126f4:	mov	r5, fp
   126f8:	b	1294c <__assert_fail@plt+0x1778>
   126fc:	cmp	r7, #92	; 0x5c
   12700:	beq	12a24 <__assert_fail@plt+0x1850>
   12704:	bls	12620 <__assert_fail@plt+0x144c>
   12708:	ldr	r5, [sp, #52]	; 0x34
   1270c:	mov	fp, #0
   12710:	b	1294c <__assert_fail@plt+0x1778>
   12714:	cmp	r7, #122	; 0x7a
   12718:	bhi	12738 <__assert_fail@plt+0x1564>
   1271c:	cmp	r7, #97	; 0x61
   12720:	bcs	12708 <__assert_fail@plt+0x1534>
   12724:	cmp	r7, #95	; 0x5f
   12728:	beq	12708 <__assert_fail@plt+0x1534>
   1272c:	cmp	r7, #96	; 0x60
   12730:	bne	12584 <__assert_fail@plt+0x13b0>
   12734:	b	12620 <__assert_fail@plt+0x144c>
   12738:	cmp	r7, #124	; 0x7c
   1273c:	beq	12620 <__assert_fail@plt+0x144c>
   12740:	bcc	12ad0 <__assert_fail@plt+0x18fc>
   12744:	cmp	r7, #125	; 0x7d
   12748:	beq	12ad0 <__assert_fail@plt+0x18fc>
   1274c:	cmp	r7, #126	; 0x7e
   12750:	bne	12584 <__assert_fail@plt+0x13b0>
   12754:	ldr	r3, [sp, #28]
   12758:	cmp	r3, #0
   1275c:	bne	12890 <__assert_fail@plt+0x16bc>
   12760:	ldr	r5, [sp, #52]	; 0x34
   12764:	cmp	sl, #2
   12768:	movne	fp, #0
   1276c:	andeq	fp, r6, #1
   12770:	cmp	fp, #0
   12774:	beq	1294c <__assert_fail@plt+0x1778>
   12778:	b	12604 <__assert_fail@plt+0x1430>
   1277c:	mov	r3, #98	; 0x62
   12780:	ldr	r2, [sp, #24]
   12784:	cmp	r2, #0
   12788:	beq	12890 <__assert_fail@plt+0x16bc>
   1278c:	mov	r7, r3
   12790:	mov	r5, #0
   12794:	b	129a4 <__assert_fail@plt+0x17d0>
   12798:	ldr	r3, [sp, #24]
   1279c:	cmp	r3, #0
   127a0:	beq	1286c <__assert_fail@plt+0x1698>
   127a4:	cmp	r6, #0
   127a8:	bne	124d4 <__assert_fail@plt+0x1300>
   127ac:	ldr	r3, [sp, #48]	; 0x30
   127b0:	eor	r2, r3, #1
   127b4:	cmp	sl, #2
   127b8:	movne	r2, #0
   127bc:	andeq	r2, r2, #1
   127c0:	cmp	r2, #0
   127c4:	moveq	r3, r4
   127c8:	beq	12800 <__assert_fail@plt+0x162c>
   127cc:	cmp	r9, r4
   127d0:	movhi	r3, #39	; 0x27
   127d4:	strbhi	r3, [r8, r4]
   127d8:	add	r3, r4, #1
   127dc:	cmp	r9, r3
   127e0:	movhi	r1, #36	; 0x24
   127e4:	strbhi	r1, [r8, r3]
   127e8:	add	r3, r4, #2
   127ec:	cmp	r9, r3
   127f0:	movhi	r1, #39	; 0x27
   127f4:	strbhi	r1, [r8, r3]
   127f8:	add	r3, r4, #3
   127fc:	str	r2, [sp, #48]	; 0x30
   12800:	cmp	r9, r3
   12804:	movhi	r2, #92	; 0x5c
   12808:	strbhi	r2, [r8, r3]
   1280c:	cmp	fp, #0
   12810:	add	r4, r3, #1
   12814:	beq	12da4 <__assert_fail@plt+0x1bd0>
   12818:	ldr	r2, [sp, #28]
   1281c:	ldr	r1, [sp, #36]	; 0x24
   12820:	add	r2, r2, #1
   12824:	cmp	r1, r2
   12828:	bls	12864 <__assert_fail@plt+0x1690>
   1282c:	ldr	r1, [sp, #44]	; 0x2c
   12830:	mov	r7, #48	; 0x30
   12834:	ldrb	r2, [r1, r2]
   12838:	sub	r2, r2, #48	; 0x30
   1283c:	cmp	r2, #9
   12840:	movhi	r5, r6
   12844:	bhi	1294c <__assert_fail@plt+0x1778>
   12848:	cmp	r9, r4
   1284c:	add	r2, r3, #2
   12850:	strbhi	r7, [r8, r4]
   12854:	cmp	r9, r2
   12858:	add	r4, r3, #3
   1285c:	movhi	r1, #48	; 0x30
   12860:	strbhi	r1, [r8, r2]
   12864:	mov	r5, r6
   12868:	b	12dac <__assert_fail@plt+0x1bd8>
   1286c:	ldr	r3, [sp, #148]	; 0x94
   12870:	tst	r3, #1
   12874:	ldreq	r5, [sp, #24]
   12878:	beq	12db8 <__assert_fail@plt+0x1be4>
   1287c:	ldr	r3, [sp, #28]
   12880:	add	r3, r3, #1
   12884:	b	12224 <__assert_fail@plt+0x1050>
   12888:	cmp	r6, #0
   1288c:	bne	124d8 <__assert_fail@plt+0x1304>
   12890:	mov	r5, #0
   12894:	b	1270c <__assert_fail@plt+0x1538>
   12898:	ldr	r3, [sp, #148]	; 0x94
   1289c:	tst	r3, #4
   128a0:	beq	12890 <__assert_fail@plt+0x16bc>
   128a4:	ldr	r3, [sp, #28]
   128a8:	add	r2, r3, #2
   128ac:	ldr	r3, [sp, #36]	; 0x24
   128b0:	cmp	r3, r2
   128b4:	bls	12890 <__assert_fail@plt+0x16bc>
   128b8:	ldr	r3, [sp, #44]	; 0x2c
   128bc:	ldr	r1, [sp, #28]
   128c0:	add	r3, r3, r1
   128c4:	ldrb	r0, [r3, #1]
   128c8:	cmp	r0, #63	; 0x3f
   128cc:	bne	12890 <__assert_fail@plt+0x16bc>
   128d0:	ldr	r3, [sp, #44]	; 0x2c
   128d4:	ldrb	r1, [r3, r2]
   128d8:	sub	r3, r1, #33	; 0x21
   128dc:	uxtb	r3, r3
   128e0:	cmp	r3, #29
   128e4:	bhi	12db4 <__assert_fail@plt+0x1be0>
   128e8:	mov	ip, #1
   128ec:	ldr	r5, [pc, #1428]	; 12e88 <__assert_fail@plt+0x1cb4>
   128f0:	ands	r5, r5, ip, lsl r3
   128f4:	beq	1270c <__assert_fail@plt+0x1538>
   128f8:	cmp	r6, #0
   128fc:	bne	124d8 <__assert_fail@plt+0x1304>
   12900:	add	r3, r4, #1
   12904:	cmp	r9, r4
   12908:	strbhi	r0, [r8, r4]
   1290c:	cmp	r9, r3
   12910:	movhi	r0, #34	; 0x22
   12914:	strbhi	r0, [r8, r3]
   12918:	add	r3, r4, #2
   1291c:	cmp	r9, r3
   12920:	movhi	r0, #34	; 0x22
   12924:	strbhi	r0, [r8, r3]
   12928:	add	r3, r4, #3
   1292c:	cmp	r9, r3
   12930:	add	r4, r4, #4
   12934:	mov	r5, r6
   12938:	mov	fp, r6
   1293c:	mov	r7, r1
   12940:	movhi	r0, #63	; 0x3f
   12944:	strbhi	r0, [r8, r3]
   12948:	str	r2, [sp, #28]
   1294c:	ldr	r3, [sp, #24]
   12950:	eor	r3, r3, #1
   12954:	cmp	sl, #2
   12958:	orreq	r3, r3, #1
   1295c:	eor	r3, r3, #1
   12960:	orr	r3, r6, r3
   12964:	tst	r3, #255	; 0xff
   12968:	beq	12998 <__assert_fail@plt+0x17c4>
   1296c:	ldr	r3, [sp, #152]	; 0x98
   12970:	cmp	r3, #0
   12974:	beq	12998 <__assert_fail@plt+0x17c4>
   12978:	lsr	r2, r7, #5
   1297c:	ldr	r1, [sp, #152]	; 0x98
   12980:	uxtb	r2, r2
   12984:	and	r3, r7, #31
   12988:	ldr	r2, [r1, r2, lsl #2]
   1298c:	lsr	r3, r2, r3
   12990:	tst	r3, #1
   12994:	bne	129a4 <__assert_fail@plt+0x17d0>
   12998:	ldr	r3, [sp, #64]	; 0x40
   1299c:	cmp	r3, #0
   129a0:	beq	12a3c <__assert_fail@plt+0x1868>
   129a4:	cmp	r6, #0
   129a8:	bne	124d8 <__assert_fail@plt+0x1304>
   129ac:	ldr	r3, [sp, #48]	; 0x30
   129b0:	eor	r3, r3, #1
   129b4:	cmp	sl, #2
   129b8:	movne	r3, #0
   129bc:	andeq	r3, r3, #1
   129c0:	cmp	r3, #0
   129c4:	beq	129fc <__assert_fail@plt+0x1828>
   129c8:	cmp	r9, r4
   129cc:	movhi	r2, #39	; 0x27
   129d0:	strbhi	r2, [r8, r4]
   129d4:	add	r2, r4, #1
   129d8:	cmp	r9, r2
   129dc:	movhi	r1, #36	; 0x24
   129e0:	strbhi	r1, [r8, r2]
   129e4:	add	r2, r4, #2
   129e8:	cmp	r9, r2
   129ec:	add	r4, r4, #3
   129f0:	movhi	r1, #39	; 0x27
   129f4:	strbhi	r1, [r8, r2]
   129f8:	str	r3, [sp, #48]	; 0x30
   129fc:	cmp	r9, r4
   12a00:	movhi	r3, #92	; 0x5c
   12a04:	strbhi	r3, [r8, r4]
   12a08:	ldr	fp, [sp, #52]	; 0x34
   12a0c:	add	r4, r4, #1
   12a10:	b	12a3c <__assert_fail@plt+0x1868>
   12a14:	mov	r3, #116	; 0x74
   12a18:	b	125f0 <__assert_fail@plt+0x141c>
   12a1c:	mov	r3, #118	; 0x76
   12a20:	b	12780 <__assert_fail@plt+0x15ac>
   12a24:	cmp	sl, #2
   12a28:	bne	12a98 <__assert_fail@plt+0x18c4>
   12a2c:	cmp	r6, #0
   12a30:	bne	124d8 <__assert_fail@plt+0x1304>
   12a34:	mov	r5, r6
   12a38:	mov	fp, r6
   12a3c:	ldr	r3, [sp, #48]	; 0x30
   12a40:	eor	fp, fp, #1
   12a44:	and	fp, fp, r3
   12a48:	tst	fp, #255	; 0xff
   12a4c:	beq	12a78 <__assert_fail@plt+0x18a4>
   12a50:	cmp	r9, r4
   12a54:	movhi	r3, #39	; 0x27
   12a58:	strbhi	r3, [r8, r4]
   12a5c:	add	r3, r4, #1
   12a60:	cmp	r9, r3
   12a64:	movhi	r2, #39	; 0x27
   12a68:	add	r4, r4, #2
   12a6c:	strbhi	r2, [r8, r3]
   12a70:	mov	r3, #0
   12a74:	str	r3, [sp, #48]	; 0x30
   12a78:	cmp	r9, r4
   12a7c:	strbhi	r7, [r8, r4]
   12a80:	ldr	r3, [sp, #72]	; 0x48
   12a84:	cmp	r5, #0
   12a88:	moveq	r3, #0
   12a8c:	add	r4, r4, #1
   12a90:	str	r3, [sp, #72]	; 0x48
   12a94:	b	1287c <__assert_fail@plt+0x16a8>
   12a98:	ldr	r3, [sp, #24]
   12a9c:	and	r3, r3, r6
   12aa0:	tst	r5, r3
   12aa4:	moveq	r3, r7
   12aa8:	beq	125f0 <__assert_fail@plt+0x141c>
   12aac:	mov	fp, #0
   12ab0:	mov	r5, fp
   12ab4:	b	12a3c <__assert_fail@plt+0x1868>
   12ab8:	mov	r3, #110	; 0x6e
   12abc:	b	125f0 <__assert_fail@plt+0x141c>
   12ac0:	mov	r3, #97	; 0x61
   12ac4:	b	12780 <__assert_fail@plt+0x15ac>
   12ac8:	mov	r3, #102	; 0x66
   12acc:	b	12780 <__assert_fail@plt+0x15ac>
   12ad0:	ldr	r3, [sp, #36]	; 0x24
   12ad4:	cmn	r3, #1
   12ad8:	bne	12af8 <__assert_fail@plt+0x1924>
   12adc:	ldr	r3, [sp, #44]	; 0x2c
   12ae0:	ldrb	r3, [r3, #1]
   12ae4:	adds	r3, r3, #0
   12ae8:	movne	r3, #1
   12aec:	cmp	r3, #0
   12af0:	bne	12890 <__assert_fail@plt+0x16bc>
   12af4:	b	12754 <__assert_fail@plt+0x1580>
   12af8:	ldr	r3, [sp, #36]	; 0x24
   12afc:	subs	r3, r3, #1
   12b00:	b	12ae8 <__assert_fail@plt+0x1914>
   12b04:	mov	r3, #0
   12b08:	str	r3, [sp, #96]	; 0x60
   12b0c:	str	r3, [sp, #100]	; 0x64
   12b10:	ldr	r3, [sp, #36]	; 0x24
   12b14:	cmn	r3, #1
   12b18:	bne	12b28 <__assert_fail@plt+0x1954>
   12b1c:	ldr	r0, [sp, #44]	; 0x2c
   12b20:	bl	1109c <strlen@plt>
   12b24:	str	r0, [sp, #36]	; 0x24
   12b28:	ldr	r5, [sp, #52]	; 0x34
   12b2c:	mov	r3, #0
   12b30:	str	r3, [sp, #56]	; 0x38
   12b34:	ldr	r3, [sp, #28]
   12b38:	ldr	r2, [sp, #56]	; 0x38
   12b3c:	ldr	r1, [sp, #36]	; 0x24
   12b40:	add	r2, r3, r2
   12b44:	ldr	r3, [sp, #44]	; 0x2c
   12b48:	add	r0, sp, #92	; 0x5c
   12b4c:	add	fp, r3, r2
   12b50:	sub	r2, r1, r2
   12b54:	add	r3, sp, #96	; 0x60
   12b58:	mov	r1, fp
   12b5c:	bl	14e58 <__assert_fail@plt+0x3c84>
   12b60:	subs	r2, r0, #0
   12b64:	beq	12ba4 <__assert_fail@plt+0x19d0>
   12b68:	cmn	r2, #1
   12b6c:	beq	12d7c <__assert_fail@plt+0x1ba8>
   12b70:	cmn	r2, #2
   12b74:	bne	12cec <__assert_fail@plt+0x1b18>
   12b78:	ldr	r2, [sp, #56]	; 0x38
   12b7c:	ldr	r3, [sp, #28]
   12b80:	add	r3, r3, r2
   12b84:	ldr	r2, [sp, #36]	; 0x24
   12b88:	cmp	r2, r3
   12b8c:	bls	12d7c <__assert_fail@plt+0x1ba8>
   12b90:	ldr	r3, [sp, #80]	; 0x50
   12b94:	ldr	r2, [sp, #56]	; 0x38
   12b98:	ldrb	r5, [r3, r2]
   12b9c:	cmp	r5, #0
   12ba0:	bne	12cdc <__assert_fail@plt+0x1b08>
   12ba4:	ldr	r3, [sp, #56]	; 0x38
   12ba8:	cmp	r3, #1
   12bac:	bls	125b4 <__assert_fail@plt+0x13e0>
   12bb0:	ldr	r2, [sp, #56]	; 0x38
   12bb4:	ldr	r3, [sp, #28]
   12bb8:	mov	fp, #0
   12bbc:	add	r3, r3, r2
   12bc0:	ldr	r2, [sp, #24]
   12bc4:	str	r3, [sp, #52]	; 0x34
   12bc8:	eor	r3, r5, #1
   12bcc:	and	r3, r3, r2
   12bd0:	mov	ip, #92	; 0x5c
   12bd4:	uxtb	r3, r3
   12bd8:	mov	r2, #39	; 0x27
   12bdc:	cmp	r3, #0
   12be0:	beq	12d84 <__assert_fail@plt+0x1bb0>
   12be4:	cmp	r6, #0
   12be8:	bne	124d4 <__assert_fail@plt+0x1300>
   12bec:	ldr	r1, [sp, #48]	; 0x30
   12bf0:	eor	r1, r1, #1
   12bf4:	cmp	sl, #2
   12bf8:	movne	r1, #0
   12bfc:	andeq	r1, r1, #1
   12c00:	cmp	r1, #0
   12c04:	beq	12c34 <__assert_fail@plt+0x1a60>
   12c08:	add	r0, r4, #1
   12c0c:	cmp	r9, r4
   12c10:	strbhi	r2, [r8, r4]
   12c14:	cmp	r9, r0
   12c18:	movhi	lr, #36	; 0x24
   12c1c:	strbhi	lr, [r8, r0]
   12c20:	add	r0, r4, #2
   12c24:	add	r4, r4, #3
   12c28:	cmp	r9, r0
   12c2c:	strbhi	r2, [r8, r0]
   12c30:	str	r1, [sp, #48]	; 0x30
   12c34:	add	r0, r4, #1
   12c38:	cmp	r9, r4
   12c3c:	strbhi	ip, [r8, r4]
   12c40:	cmp	r9, r0
   12c44:	lsrhi	r1, r7, #6
   12c48:	addhi	r1, r1, #48	; 0x30
   12c4c:	strbhi	r1, [r8, r0]
   12c50:	add	r0, r4, #2
   12c54:	cmp	r9, r0
   12c58:	lsrhi	r1, r7, #3
   12c5c:	and	r7, r7, #7
   12c60:	andhi	r1, r1, #7
   12c64:	add	r4, r4, #3
   12c68:	add	r7, r7, #48	; 0x30
   12c6c:	mov	fp, r3
   12c70:	addhi	r1, r1, #48	; 0x30
   12c74:	strbhi	r1, [r8, r0]
   12c78:	ldr	r1, [sp, #28]
   12c7c:	ldr	r0, [sp, #52]	; 0x34
   12c80:	add	r1, r1, #1
   12c84:	cmp	r0, r1
   12c88:	bls	12a3c <__assert_fail@plt+0x1868>
   12c8c:	ldr	lr, [sp, #48]	; 0x30
   12c90:	eor	r0, fp, #1
   12c94:	and	r0, r0, lr
   12c98:	tst	r0, #255	; 0xff
   12c9c:	beq	12cc0 <__assert_fail@plt+0x1aec>
   12ca0:	add	r0, r4, #1
   12ca4:	cmp	r9, r4
   12ca8:	strbhi	r2, [r8, r4]
   12cac:	cmp	r9, r0
   12cb0:	add	r4, r4, #2
   12cb4:	strbhi	r2, [r8, r0]
   12cb8:	mov	r0, #0
   12cbc:	str	r0, [sp, #48]	; 0x30
   12cc0:	ldr	r0, [sp, #44]	; 0x2c
   12cc4:	cmp	r9, r4
   12cc8:	strbhi	r7, [r8, r4]
   12ccc:	str	r1, [sp, #28]
   12cd0:	add	r4, r4, #1
   12cd4:	ldrb	r7, [r0, r1]
   12cd8:	b	12bdc <__assert_fail@plt+0x1a08>
   12cdc:	ldr	r3, [sp, #56]	; 0x38
   12ce0:	add	r3, r3, #1
   12ce4:	str	r3, [sp, #56]	; 0x38
   12ce8:	b	12b78 <__assert_fail@plt+0x19a4>
   12cec:	cmp	sl, #2
   12cf0:	movne	r3, #0
   12cf4:	andeq	r3, r6, #1
   12cf8:	cmp	r3, #0
   12cfc:	movne	r1, #1
   12d00:	bne	12d5c <__assert_fail@plt+0x1b88>
   12d04:	ldr	r0, [sp, #92]	; 0x5c
   12d08:	str	r2, [sp, #84]	; 0x54
   12d0c:	bl	10fb8 <iswprint@plt>
   12d10:	ldr	r3, [sp, #56]	; 0x38
   12d14:	ldr	r2, [sp, #84]	; 0x54
   12d18:	add	r3, r3, r2
   12d1c:	str	r3, [sp, #56]	; 0x38
   12d20:	cmp	r0, #0
   12d24:	add	r0, sp, #96	; 0x60
   12d28:	moveq	r5, #0
   12d2c:	bl	10f64 <mbsinit@plt>
   12d30:	cmp	r0, #0
   12d34:	beq	12b34 <__assert_fail@plt+0x1960>
   12d38:	b	12ba4 <__assert_fail@plt+0x19d0>
   12d3c:	ldrb	r3, [fp, r1]
   12d40:	cmp	r3, #94	; 0x5e
   12d44:	beq	12604 <__assert_fail@plt+0x1430>
   12d48:	bhi	12d68 <__assert_fail@plt+0x1b94>
   12d4c:	sub	r3, r3, #91	; 0x5b
   12d50:	cmp	r3, #1
   12d54:	bls	12604 <__assert_fail@plt+0x1430>
   12d58:	add	r1, r1, #1
   12d5c:	cmp	r1, r2
   12d60:	bne	12d3c <__assert_fail@plt+0x1b68>
   12d64:	b	12d04 <__assert_fail@plt+0x1b30>
   12d68:	cmp	r3, #96	; 0x60
   12d6c:	beq	12604 <__assert_fail@plt+0x1430>
   12d70:	cmp	r3, #124	; 0x7c
   12d74:	bne	12d58 <__assert_fail@plt+0x1b84>
   12d78:	b	12604 <__assert_fail@plt+0x1430>
   12d7c:	mov	r5, #0
   12d80:	b	12ba4 <__assert_fail@plt+0x19d0>
   12d84:	ldr	r1, [sp, #64]	; 0x40
   12d88:	cmp	r1, #0
   12d8c:	beq	12c78 <__assert_fail@plt+0x1aa4>
   12d90:	cmp	r9, r4
   12d94:	strbhi	ip, [r8, r4]
   12d98:	str	r3, [sp, #64]	; 0x40
   12d9c:	add	r4, r4, #1
   12da0:	b	12c78 <__assert_fail@plt+0x1aa4>
   12da4:	mov	r5, fp
   12da8:	ldr	fp, [sp, #24]
   12dac:	mov	r7, #48	; 0x30
   12db0:	b	1294c <__assert_fail@plt+0x1778>
   12db4:	mov	r5, #0
   12db8:	mov	fp, r5
   12dbc:	b	1294c <__assert_fail@plt+0x1778>
   12dc0:	ldr	r3, [sp, #36]	; 0x24
   12dc4:	ldr	r2, [sp, #28]
   12dc8:	subs	r3, r3, r2
   12dcc:	movne	r3, #1
   12dd0:	b	12248 <__assert_fail@plt+0x1074>
   12dd4:	ldr	r3, [sp, #60]	; 0x3c
   12dd8:	clz	r7, r9
   12ddc:	cmp	r3, #0
   12de0:	lsr	r7, r7, #5
   12de4:	moveq	r7, #0
   12de8:	cmp	r7, #0
   12dec:	mov	r5, r3
   12df0:	bne	121a8 <__assert_fail@plt+0xfd4>
   12df4:	ldr	r3, [sp, #68]	; 0x44
   12df8:	ldr	r2, [sp, #40]	; 0x28
   12dfc:	cmp	r2, #0
   12e00:	moveq	r3, #0
   12e04:	andne	r3, r3, #1
   12e08:	cmp	r3, #0
   12e0c:	movne	r3, r2
   12e10:	subne	r2, r3, #1
   12e14:	bne	12e44 <__assert_fail@plt+0x1c70>
   12e18:	cmp	r9, r4
   12e1c:	movhi	r3, #0
   12e20:	strbhi	r3, [r8, r4]
   12e24:	mov	r0, r4
   12e28:	add	sp, sp, #108	; 0x6c
   12e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e30:	mov	r3, r2
   12e34:	b	12df8 <__assert_fail@plt+0x1c24>
   12e38:	cmp	r9, r4
   12e3c:	strbhi	r3, [r8, r4]
   12e40:	add	r4, r4, #1
   12e44:	ldrb	r3, [r2, #1]!
   12e48:	cmp	r3, #0
   12e4c:	bne	12e38 <__assert_fail@plt+0x1c64>
   12e50:	b	12e18 <__assert_fail@plt+0x1c44>
   12e54:	ldr	r3, [pc, #32]	; 12e7c <__assert_fail@plt+0x1ca8>
   12e58:	mov	r6, #1
   12e5c:	str	r6, [sp, #24]
   12e60:	str	r6, [sp, #32]
   12e64:	str	r3, [sp, #40]	; 0x28
   12e68:	mov	r4, #0
   12e6c:	mov	sl, #5
   12e70:	b	12218 <__assert_fail@plt+0x1044>
   12e74:	mov	r6, #1
   12e78:	b	1240c <__assert_fail@plt+0x1238>
   12e7c:	andeq	r5, r1, r3, ror lr
   12e80:	andeq	r5, r1, r7, ror lr
   12e84:	andeq	r5, r1, r5, ror lr
   12e88:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e90:	sub	sp, sp, #52	; 0x34
   12e94:	mov	r6, r0
   12e98:	mov	r5, r3
   12e9c:	mov	r8, r1
   12ea0:	mov	r9, r2
   12ea4:	bl	110b4 <__errno_location@plt>
   12ea8:	ldr	r7, [pc, #380]	; 1302c <__assert_fail@plt+0x1e58>
   12eac:	cmn	r6, #-2147483647	; 0x80000001
   12eb0:	ldr	r4, [r7]
   12eb4:	ldr	r3, [r0]
   12eb8:	str	r0, [sp, #24]
   12ebc:	str	r3, [sp, #32]
   12ec0:	movne	r3, #0
   12ec4:	moveq	r3, #1
   12ec8:	orrs	r3, r3, r6, lsr #31
   12ecc:	beq	12ed4 <__assert_fail@plt+0x1d00>
   12ed0:	bl	111b0 <abort@plt>
   12ed4:	ldr	r2, [r7, #4]
   12ed8:	cmp	r6, r2
   12edc:	blt	12f4c <__assert_fail@plt+0x1d78>
   12ee0:	add	r1, sp, #48	; 0x30
   12ee4:	add	sl, r7, #8
   12ee8:	str	r2, [r1, #-4]!
   12eec:	cmp	r4, sl
   12ef0:	mov	r3, #8
   12ef4:	sub	r2, r6, r2
   12ef8:	movne	r0, r4
   12efc:	str	r3, [sp]
   12f00:	add	r2, r2, #1
   12f04:	mvn	r3, #-2147483648	; 0x80000000
   12f08:	moveq	r0, #0
   12f0c:	bl	13f8c <__assert_fail@plt+0x2db8>
   12f10:	cmp	r4, sl
   12f14:	ldr	r2, [sp, #44]	; 0x2c
   12f18:	mov	fp, r0
   12f1c:	str	r0, [r7]
   12f20:	ldmeq	r4, {r0, r1}
   12f24:	mov	r4, fp
   12f28:	stmeq	fp, {r0, r1}
   12f2c:	ldr	r0, [r7, #4]
   12f30:	mov	r1, #0
   12f34:	sub	r2, r2, r0
   12f38:	add	r0, fp, r0, lsl #3
   12f3c:	lsl	r2, r2, #3
   12f40:	bl	110d8 <memset@plt>
   12f44:	ldr	r3, [sp, #44]	; 0x2c
   12f48:	str	r3, [r7, #4]
   12f4c:	ldr	r3, [r5, #4]
   12f50:	add	sl, r4, r6, lsl #3
   12f54:	orr	r3, r3, #1
   12f58:	str	r3, [sp, #28]
   12f5c:	add	r3, r5, #8
   12f60:	str	r3, [sp, #36]	; 0x24
   12f64:	ldr	r3, [r5, #44]	; 0x2c
   12f68:	ldr	fp, [r4, r6, lsl #3]
   12f6c:	ldr	r7, [sl, #4]
   12f70:	str	r3, [sp, #16]
   12f74:	ldr	r3, [r5, #40]	; 0x28
   12f78:	mov	r2, r8
   12f7c:	str	r3, [sp, #12]
   12f80:	add	r3, r5, #8
   12f84:	str	r3, [sp, #8]
   12f88:	ldr	r3, [sp, #28]
   12f8c:	mov	r1, fp
   12f90:	str	r3, [sp, #4]
   12f94:	ldr	r3, [r5]
   12f98:	mov	r0, r7
   12f9c:	str	r3, [sp]
   12fa0:	mov	r3, r9
   12fa4:	bl	12158 <__assert_fail@plt+0xf84>
   12fa8:	cmp	fp, r0
   12fac:	bhi	13014 <__assert_fail@plt+0x1e40>
   12fb0:	ldr	r3, [pc, #120]	; 13030 <__assert_fail@plt+0x1e5c>
   12fb4:	add	fp, r0, #1
   12fb8:	cmp	r7, r3
   12fbc:	str	fp, [r4, r6, lsl #3]
   12fc0:	beq	12fcc <__assert_fail@plt+0x1df8>
   12fc4:	mov	r0, r7
   12fc8:	bl	11f14 <__assert_fail@plt+0xd40>
   12fcc:	mov	r0, fp
   12fd0:	bl	13e44 <__assert_fail@plt+0x2c70>
   12fd4:	ldr	r3, [r5, #44]	; 0x2c
   12fd8:	mov	r2, r8
   12fdc:	mov	r1, fp
   12fe0:	str	r0, [sl, #4]
   12fe4:	str	r3, [sp, #16]
   12fe8:	ldr	r3, [r5, #40]	; 0x28
   12fec:	mov	r7, r0
   12ff0:	str	r3, [sp, #12]
   12ff4:	add	r3, r5, #8
   12ff8:	str	r3, [sp, #8]
   12ffc:	ldr	r3, [sp, #28]
   13000:	str	r3, [sp, #4]
   13004:	ldr	r3, [r5]
   13008:	str	r3, [sp]
   1300c:	mov	r3, r9
   13010:	bl	12158 <__assert_fail@plt+0xf84>
   13014:	ldr	r3, [sp, #24]
   13018:	ldr	r2, [sp, #32]
   1301c:	mov	r0, r7
   13020:	str	r2, [r3]
   13024:	add	sp, sp, #52	; 0x34
   13028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1302c:	andeq	r7, r2, r4, lsr #2
   13030:	muleq	r2, r4, r1
   13034:	push	{r4, r5, r6, lr}
   13038:	mov	r5, r0
   1303c:	bl	110b4 <__errno_location@plt>
   13040:	cmp	r5, #0
   13044:	mov	r1, #48	; 0x30
   13048:	ldr	r6, [r0]
   1304c:	mov	r4, r0
   13050:	ldr	r0, [pc, #12]	; 13064 <__assert_fail@plt+0x1e90>
   13054:	movne	r0, r5
   13058:	bl	14220 <__assert_fail@plt+0x304c>
   1305c:	str	r6, [r4]
   13060:	pop	{r4, r5, r6, pc}
   13064:	muleq	r2, r4, r2
   13068:	ldr	r3, [pc, #12]	; 1307c <__assert_fail@plt+0x1ea8>
   1306c:	cmp	r0, #0
   13070:	moveq	r0, r3
   13074:	ldr	r0, [r0]
   13078:	bx	lr
   1307c:	muleq	r2, r4, r2
   13080:	ldr	r3, [pc, #12]	; 13094 <__assert_fail@plt+0x1ec0>
   13084:	cmp	r0, #0
   13088:	moveq	r0, r3
   1308c:	str	r1, [r0]
   13090:	bx	lr
   13094:	muleq	r2, r4, r2
   13098:	ldr	r3, [pc, #52]	; 130d4 <__assert_fail@plt+0x1f00>
   1309c:	cmp	r0, #0
   130a0:	moveq	r0, r3
   130a4:	add	r3, r0, #8
   130a8:	push	{lr}		; (str lr, [sp, #-4]!)
   130ac:	lsr	lr, r1, #5
   130b0:	and	r1, r1, #31
   130b4:	ldr	ip, [r3, lr, lsl #2]
   130b8:	lsr	r0, ip, r1
   130bc:	eor	r2, r2, r0
   130c0:	and	r2, r2, #1
   130c4:	and	r0, r0, #1
   130c8:	eor	r1, ip, r2, lsl r1
   130cc:	str	r1, [r3, lr, lsl #2]
   130d0:	pop	{pc}		; (ldr pc, [sp], #4)
   130d4:	muleq	r2, r4, r2
   130d8:	ldr	r3, [pc, #16]	; 130f0 <__assert_fail@plt+0x1f1c>
   130dc:	cmp	r0, #0
   130e0:	movne	r3, r0
   130e4:	ldr	r0, [r3, #4]
   130e8:	str	r1, [r3, #4]
   130ec:	bx	lr
   130f0:	muleq	r2, r4, r2
   130f4:	ldr	r3, [pc, #44]	; 13128 <__assert_fail@plt+0x1f54>
   130f8:	cmp	r0, #0
   130fc:	moveq	r0, r3
   13100:	mov	r3, #10
   13104:	cmp	r2, #0
   13108:	cmpne	r1, #0
   1310c:	str	r3, [r0]
   13110:	bne	1311c <__assert_fail@plt+0x1f48>
   13114:	push	{r4, lr}
   13118:	bl	111b0 <abort@plt>
   1311c:	str	r1, [r0, #40]	; 0x28
   13120:	str	r2, [r0, #44]	; 0x2c
   13124:	bx	lr
   13128:	muleq	r2, r4, r2
   1312c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13130:	sub	sp, sp, #24
   13134:	mov	sl, r3
   13138:	ldr	r4, [sp, #56]	; 0x38
   1313c:	ldr	r3, [pc, #100]	; 131a8 <__assert_fail@plt+0x1fd4>
   13140:	cmp	r4, #0
   13144:	moveq	r4, r3
   13148:	mov	r7, r0
   1314c:	mov	r8, r1
   13150:	mov	r9, r2
   13154:	bl	110b4 <__errno_location@plt>
   13158:	ldr	r3, [r4, #44]	; 0x2c
   1315c:	mov	r2, r9
   13160:	mov	r1, r8
   13164:	ldr	r6, [r0]
   13168:	str	r3, [sp, #16]
   1316c:	ldr	r3, [r4, #40]	; 0x28
   13170:	mov	r5, r0
   13174:	str	r3, [sp, #12]
   13178:	add	r3, r4, #8
   1317c:	str	r3, [sp, #8]
   13180:	ldr	r3, [r4, #4]
   13184:	mov	r0, r7
   13188:	str	r3, [sp, #4]
   1318c:	ldr	r3, [r4]
   13190:	str	r3, [sp]
   13194:	mov	r3, sl
   13198:	bl	12158 <__assert_fail@plt+0xf84>
   1319c:	str	r6, [r5]
   131a0:	add	sp, sp, #24
   131a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131a8:	muleq	r2, r4, r2
   131ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131b0:	cmp	r3, #0
   131b4:	sub	sp, sp, #44	; 0x2c
   131b8:	ldr	r4, [pc, #188]	; 1327c <__assert_fail@plt+0x20a8>
   131bc:	mov	r6, r2
   131c0:	movne	r4, r3
   131c4:	mov	sl, r1
   131c8:	mov	r9, r0
   131cc:	bl	110b4 <__errno_location@plt>
   131d0:	ldr	r5, [r4, #4]
   131d4:	add	fp, r4, #8
   131d8:	cmp	r6, #0
   131dc:	orreq	r5, r5, #1
   131e0:	mov	r1, #0
   131e4:	mov	r2, r9
   131e8:	ldr	r3, [r0]
   131ec:	mov	r8, r0
   131f0:	str	r3, [sp, #28]
   131f4:	ldr	r3, [r4, #44]	; 0x2c
   131f8:	mov	r0, r1
   131fc:	str	r3, [sp, #16]
   13200:	ldr	r3, [r4, #40]	; 0x28
   13204:	stmib	sp, {r5, fp}
   13208:	str	r3, [sp, #12]
   1320c:	ldr	r3, [r4]
   13210:	str	r3, [sp]
   13214:	mov	r3, sl
   13218:	bl	12158 <__assert_fail@plt+0xf84>
   1321c:	add	r1, r0, #1
   13220:	mov	r7, r0
   13224:	mov	r0, r1
   13228:	str	r1, [sp, #36]	; 0x24
   1322c:	bl	13e44 <__assert_fail@plt+0x2c70>
   13230:	ldr	r3, [r4, #44]	; 0x2c
   13234:	mov	r2, r9
   13238:	str	r3, [sp, #16]
   1323c:	ldr	r3, [r4, #40]	; 0x28
   13240:	stmib	sp, {r5, fp}
   13244:	str	r3, [sp, #12]
   13248:	ldr	r3, [r4]
   1324c:	ldr	r1, [sp, #36]	; 0x24
   13250:	str	r3, [sp]
   13254:	mov	r3, sl
   13258:	str	r0, [sp, #32]
   1325c:	bl	12158 <__assert_fail@plt+0xf84>
   13260:	ldr	r3, [sp, #28]
   13264:	cmp	r6, #0
   13268:	str	r3, [r8]
   1326c:	ldr	r0, [sp, #32]
   13270:	strne	r7, [r6]
   13274:	add	sp, sp, #44	; 0x2c
   13278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1327c:	muleq	r2, r4, r2
   13280:	mov	r3, r2
   13284:	mov	r2, #0
   13288:	b	131ac <__assert_fail@plt+0x1fd8>
   1328c:	push	{r4, r5, r6, r7, r8, lr}
   13290:	mov	r6, #1
   13294:	ldr	r4, [pc, #104]	; 13304 <__assert_fail@plt+0x2130>
   13298:	ldr	r5, [r4]
   1329c:	add	r7, r5, #12
   132a0:	ldr	r3, [r4, #4]
   132a4:	add	r7, r7, #8
   132a8:	cmp	r6, r3
   132ac:	blt	132f4 <__assert_fail@plt+0x2120>
   132b0:	ldr	r0, [r5, #4]
   132b4:	ldr	r6, [pc, #76]	; 13308 <__assert_fail@plt+0x2134>
   132b8:	cmp	r0, r6
   132bc:	beq	132d0 <__assert_fail@plt+0x20fc>
   132c0:	bl	11f14 <__assert_fail@plt+0xd40>
   132c4:	mov	r3, #256	; 0x100
   132c8:	str	r3, [r4, #8]
   132cc:	str	r6, [r4, #12]
   132d0:	ldr	r6, [pc, #52]	; 1330c <__assert_fail@plt+0x2138>
   132d4:	cmp	r5, r6
   132d8:	beq	132e8 <__assert_fail@plt+0x2114>
   132dc:	mov	r0, r5
   132e0:	bl	11f14 <__assert_fail@plt+0xd40>
   132e4:	str	r6, [r4]
   132e8:	mov	r3, #1
   132ec:	str	r3, [r4, #4]
   132f0:	pop	{r4, r5, r6, r7, r8, pc}
   132f4:	ldr	r0, [r7, #-8]
   132f8:	bl	11f14 <__assert_fail@plt+0xd40>
   132fc:	add	r6, r6, #1
   13300:	b	132a0 <__assert_fail@plt+0x20cc>
   13304:	andeq	r7, r2, r4, lsr #2
   13308:	muleq	r2, r4, r1
   1330c:	andeq	r7, r2, ip, lsr #2
   13310:	ldr	r3, [pc, #4]	; 1331c <__assert_fail@plt+0x2148>
   13314:	mvn	r2, #0
   13318:	b	12e8c <__assert_fail@plt+0x1cb8>
   1331c:	muleq	r2, r4, r2
   13320:	ldr	r3, [pc]	; 13328 <__assert_fail@plt+0x2154>
   13324:	b	12e8c <__assert_fail@plt+0x1cb8>
   13328:	muleq	r2, r4, r2
   1332c:	mov	r1, r0
   13330:	mov	r0, #0
   13334:	b	13310 <__assert_fail@plt+0x213c>
   13338:	mov	r2, r1
   1333c:	mov	r1, r0
   13340:	mov	r0, #0
   13344:	b	13320 <__assert_fail@plt+0x214c>
   13348:	push	{r4, r5, lr}
   1334c:	sub	sp, sp, #52	; 0x34
   13350:	mov	r5, r2
   13354:	mov	r4, r0
   13358:	mov	r0, sp
   1335c:	bl	12014 <__assert_fail@plt+0xe40>
   13360:	mov	r3, sp
   13364:	mvn	r2, #0
   13368:	mov	r1, r5
   1336c:	mov	r0, r4
   13370:	bl	12e8c <__assert_fail@plt+0x1cb8>
   13374:	add	sp, sp, #52	; 0x34
   13378:	pop	{r4, r5, pc}
   1337c:	push	{r4, r5, r6, lr}
   13380:	sub	sp, sp, #48	; 0x30
   13384:	mov	r5, r2
   13388:	mov	r6, r3
   1338c:	mov	r4, r0
   13390:	mov	r0, sp
   13394:	bl	12014 <__assert_fail@plt+0xe40>
   13398:	mov	r3, sp
   1339c:	mov	r2, r6
   133a0:	mov	r1, r5
   133a4:	mov	r0, r4
   133a8:	bl	12e8c <__assert_fail@plt+0x1cb8>
   133ac:	add	sp, sp, #48	; 0x30
   133b0:	pop	{r4, r5, r6, pc}
   133b4:	mov	r2, r1
   133b8:	mov	r1, r0
   133bc:	mov	r0, #0
   133c0:	b	13348 <__assert_fail@plt+0x2174>
   133c4:	mov	r3, r2
   133c8:	mov	r2, r1
   133cc:	mov	r1, r0
   133d0:	mov	r0, #0
   133d4:	b	1337c <__assert_fail@plt+0x21a8>
   133d8:	push	{r4, r5, r6, lr}
   133dc:	mov	r4, r0
   133e0:	ldr	lr, [pc, #80]	; 13438 <__assert_fail@plt+0x2264>
   133e4:	mov	r5, r1
   133e8:	mov	r6, r2
   133ec:	ldm	lr!, {r0, r1, r2, r3}
   133f0:	sub	sp, sp, #48	; 0x30
   133f4:	mov	ip, sp
   133f8:	stmia	ip!, {r0, r1, r2, r3}
   133fc:	ldm	lr!, {r0, r1, r2, r3}
   13400:	stmia	ip!, {r0, r1, r2, r3}
   13404:	ldm	lr, {r0, r1, r2, r3}
   13408:	stm	ip, {r0, r1, r2, r3}
   1340c:	mov	r1, r6
   13410:	mov	r2, #1
   13414:	mov	r0, sp
   13418:	bl	13098 <__assert_fail@plt+0x1ec4>
   1341c:	mov	r3, sp
   13420:	mov	r2, r5
   13424:	mov	r1, r4
   13428:	mov	r0, #0
   1342c:	bl	12e8c <__assert_fail@plt+0x1cb8>
   13430:	add	sp, sp, #48	; 0x30
   13434:	pop	{r4, r5, r6, pc}
   13438:	muleq	r2, r4, r2
   1343c:	mov	r2, r1
   13440:	mvn	r1, #0
   13444:	b	133d8 <__assert_fail@plt+0x2204>
   13448:	mov	r1, #58	; 0x3a
   1344c:	b	1343c <__assert_fail@plt+0x2268>
   13450:	mov	r2, #58	; 0x3a
   13454:	b	133d8 <__assert_fail@plt+0x2204>
   13458:	push	{r4, r5, lr}
   1345c:	sub	sp, sp, #100	; 0x64
   13460:	mov	r4, r0
   13464:	mov	r0, sp
   13468:	mov	r5, r2
   1346c:	bl	12014 <__assert_fail@plt+0xe40>
   13470:	mov	ip, sp
   13474:	add	lr, sp, #48	; 0x30
   13478:	ldm	ip!, {r0, r1, r2, r3}
   1347c:	stmia	lr!, {r0, r1, r2, r3}
   13480:	ldm	ip!, {r0, r1, r2, r3}
   13484:	stmia	lr!, {r0, r1, r2, r3}
   13488:	ldm	ip, {r0, r1, r2, r3}
   1348c:	stm	lr, {r0, r1, r2, r3}
   13490:	mov	r2, #1
   13494:	mov	r1, #58	; 0x3a
   13498:	add	r0, sp, #48	; 0x30
   1349c:	bl	13098 <__assert_fail@plt+0x1ec4>
   134a0:	add	r3, sp, #48	; 0x30
   134a4:	mvn	r2, #0
   134a8:	mov	r1, r5
   134ac:	mov	r0, r4
   134b0:	bl	12e8c <__assert_fail@plt+0x1cb8>
   134b4:	add	sp, sp, #100	; 0x64
   134b8:	pop	{r4, r5, pc}
   134bc:	push	{r4, r5, r6, r7, lr}
   134c0:	mov	r4, r0
   134c4:	ldr	lr, [pc, #84]	; 13520 <__assert_fail@plt+0x234c>
   134c8:	mov	r6, r1
   134cc:	mov	r7, r2
   134d0:	mov	r5, r3
   134d4:	ldm	lr!, {r0, r1, r2, r3}
   134d8:	sub	sp, sp, #52	; 0x34
   134dc:	mov	ip, sp
   134e0:	stmia	ip!, {r0, r1, r2, r3}
   134e4:	ldm	lr!, {r0, r1, r2, r3}
   134e8:	stmia	ip!, {r0, r1, r2, r3}
   134ec:	ldm	lr, {r0, r1, r2, r3}
   134f0:	stm	ip, {r0, r1, r2, r3}
   134f4:	mov	r2, r7
   134f8:	mov	r1, r6
   134fc:	mov	r0, sp
   13500:	bl	130f4 <__assert_fail@plt+0x1f20>
   13504:	mov	r3, sp
   13508:	ldr	r2, [sp, #72]	; 0x48
   1350c:	mov	r1, r5
   13510:	mov	r0, r4
   13514:	bl	12e8c <__assert_fail@plt+0x1cb8>
   13518:	add	sp, sp, #52	; 0x34
   1351c:	pop	{r4, r5, r6, r7, pc}
   13520:	muleq	r2, r4, r2
   13524:	mvn	ip, #0
   13528:	push	{r0, r1, r2, lr}
   1352c:	str	ip, [sp]
   13530:	bl	134bc <__assert_fail@plt+0x22e8>
   13534:	add	sp, sp, #12
   13538:	pop	{pc}		; (ldr pc, [sp], #4)
   1353c:	mov	r3, r2
   13540:	mov	r2, r1
   13544:	mov	r1, r0
   13548:	mov	r0, #0
   1354c:	b	13524 <__assert_fail@plt+0x2350>
   13550:	push	{r0, r1, r2, lr}
   13554:	str	r3, [sp]
   13558:	mov	r3, r2
   1355c:	mov	r2, r1
   13560:	mov	r1, r0
   13564:	mov	r0, #0
   13568:	bl	134bc <__assert_fail@plt+0x22e8>
   1356c:	add	sp, sp, #12
   13570:	pop	{pc}		; (ldr pc, [sp], #4)
   13574:	ldr	r3, [pc]	; 1357c <__assert_fail@plt+0x23a8>
   13578:	b	12e8c <__assert_fail@plt+0x1cb8>
   1357c:	andeq	r7, r2, r4, lsr r1
   13580:	mov	r2, r1
   13584:	mov	r1, r0
   13588:	mov	r0, #0
   1358c:	b	13574 <__assert_fail@plt+0x23a0>
   13590:	mvn	r2, #0
   13594:	b	13574 <__assert_fail@plt+0x23a0>
   13598:	mov	r1, r0
   1359c:	mov	r0, #0
   135a0:	b	13590 <__assert_fail@plt+0x23bc>
   135a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a8:	sub	sp, sp, #44	; 0x2c
   135ac:	subs	sl, r3, #0
   135b0:	ldr	r3, [sp, #80]	; 0x50
   135b4:	ldrne	r7, [sl]
   135b8:	mvneq	r7, #0
   135bc:	cmp	r3, #0
   135c0:	ldr	r8, [r2]
   135c4:	str	r2, [sp, #12]
   135c8:	ldrne	r2, [sp, #80]	; 0x50
   135cc:	movne	r3, #0
   135d0:	mov	r4, r1
   135d4:	strne	r3, [r2]
   135d8:	ldr	r3, [sp, #84]	; 0x54
   135dc:	cmp	r3, #0
   135e0:	movne	r3, #0
   135e4:	ldrne	r2, [sp, #84]	; 0x54
   135e8:	strne	r3, [r2]
   135ec:	cmp	r1, #0
   135f0:	bne	13690 <__assert_fail@plt+0x24bc>
   135f4:	ldrb	r3, [r0]
   135f8:	cmp	r3, #0
   135fc:	moveq	r6, r1
   13600:	moveq	r9, r1
   13604:	moveq	r5, r1
   13608:	beq	136e4 <__assert_fail@plt+0x2510>
   1360c:	bl	14294 <__assert_fail@plt+0x30c0>
   13610:	mov	r6, r4
   13614:	mov	r5, r0
   13618:	ldrb	r3, [r5]
   1361c:	cmp	r3, #43	; 0x2b
   13620:	bne	13748 <__assert_fail@plt+0x2574>
   13624:	adds	r1, r4, #0
   13628:	movne	r1, #1
   1362c:	cmp	r6, #0
   13630:	movne	r1, #0
   13634:	cmp	r1, #0
   13638:	movne	fp, #0
   1363c:	ldrne	r4, [pc, #532]	; 13858 <__assert_fail@plt+0x2684>
   13640:	bne	13680 <__assert_fail@plt+0x24ac>
   13644:	ldr	r3, [pc, #528]	; 1385c <__assert_fail@plt+0x2688>
   13648:	mov	r2, #10
   1364c:	str	r3, [sp]
   13650:	mov	r0, r5
   13654:	add	r3, sp, #16
   13658:	bl	143bc <__assert_fail@plt+0x31e8>
   1365c:	cmp	r0, #0
   13660:	ldrne	r4, [pc, #504]	; 13860 <__assert_fail@plt+0x268c>
   13664:	bne	1367c <__assert_fail@plt+0x24a8>
   13668:	ldr	r3, [sp, #16]
   1366c:	ldr	r4, [pc, #492]	; 13860 <__assert_fail@plt+0x268c>
   13670:	cmn	r3, #1
   13674:	movne	r8, r3
   13678:	movne	r4, #0
   1367c:	mov	fp, #0
   13680:	mov	r9, r5
   13684:	bl	11144 <endpwent@plt>
   13688:	mov	r5, fp
   1368c:	b	136e4 <__assert_fail@plt+0x2510>
   13690:	subs	r6, r1, r0
   13694:	moveq	r5, r6
   13698:	beq	136b0 <__assert_fail@plt+0x24dc>
   1369c:	add	r1, r6, #1
   136a0:	bl	14244 <__assert_fail@plt+0x3070>
   136a4:	mov	r3, #0
   136a8:	mov	r5, r0
   136ac:	strb	r3, [r0, r6]
   136b0:	ldrb	r6, [r4, #1]
   136b4:	cmp	r6, #0
   136b8:	bne	136d0 <__assert_fail@plt+0x24fc>
   136bc:	cmp	r5, #0
   136c0:	moveq	r6, r5
   136c4:	moveq	r4, r5
   136c8:	bne	13618 <__assert_fail@plt+0x2444>
   136cc:	b	137f0 <__assert_fail@plt+0x261c>
   136d0:	cmp	r5, #0
   136d4:	add	r6, r4, #1
   136d8:	moveq	r9, r5
   136dc:	moveq	r4, r5
   136e0:	bne	13618 <__assert_fail@plt+0x2444>
   136e4:	adds	r3, r6, #0
   136e8:	movne	r3, #1
   136ec:	cmp	r4, #0
   136f0:	movne	r3, #0
   136f4:	cmp	r3, #0
   136f8:	beq	137e0 <__assert_fail@plt+0x260c>
   136fc:	ldrb	r3, [r6]
   13700:	cmp	r3, #43	; 0x2b
   13704:	bne	137b8 <__assert_fail@plt+0x25e4>
   13708:	ldr	r3, [pc, #332]	; 1385c <__assert_fail@plt+0x2688>
   1370c:	mov	r2, #10
   13710:	str	r3, [sp]
   13714:	mov	r1, #0
   13718:	add	r3, sp, #16
   1371c:	mov	r0, r6
   13720:	bl	143bc <__assert_fail@plt+0x31e8>
   13724:	cmp	r0, #0
   13728:	ldrne	r4, [pc, #308]	; 13864 <__assert_fail@plt+0x2690>
   1372c:	bne	137d0 <__assert_fail@plt+0x25fc>
   13730:	ldr	r3, [sp, #16]
   13734:	ldr	r4, [pc, #296]	; 13864 <__assert_fail@plt+0x2690>
   13738:	cmn	r3, #1
   1373c:	movne	r7, r3
   13740:	movne	r4, #0
   13744:	b	137d0 <__assert_fail@plt+0x25fc>
   13748:	mov	r0, r5
   1374c:	bl	10f04 <getpwnam@plt>
   13750:	cmp	r0, #0
   13754:	beq	13624 <__assert_fail@plt+0x2450>
   13758:	cmp	r4, #0
   1375c:	clz	r3, r6
   13760:	lsr	r3, r3, #5
   13764:	moveq	r3, #0
   13768:	cmp	r3, #0
   1376c:	moveq	r4, r3
   13770:	ldr	r8, [r0, #8]
   13774:	moveq	fp, r4
   13778:	beq	13680 <__assert_fail@plt+0x24ac>
   1377c:	ldr	r7, [r0, #12]
   13780:	mov	r0, r7
   13784:	bl	111bc <getgrgid@plt>
   13788:	cmp	r0, #0
   1378c:	ldrne	r0, [r0]
   13790:	bne	137a4 <__assert_fail@plt+0x25d0>
   13794:	add	r2, sp, #16
   13798:	mov	r0, r7
   1379c:	mov	r1, #0
   137a0:	bl	14dbc <__assert_fail@plt+0x3be8>
   137a4:	bl	14294 <__assert_fail@plt+0x30c0>
   137a8:	mov	r4, #0
   137ac:	mov	fp, r0
   137b0:	bl	10ee0 <endgrent@plt>
   137b4:	b	13680 <__assert_fail@plt+0x24ac>
   137b8:	mov	r0, r6
   137bc:	bl	111c8 <getgrnam@plt>
   137c0:	cmp	r0, #0
   137c4:	movne	r4, #0
   137c8:	ldrne	r7, [r0, #8]
   137cc:	beq	13708 <__assert_fail@plt+0x2534>
   137d0:	bl	10ee0 <endgrent@plt>
   137d4:	mov	r0, r6
   137d8:	bl	14294 <__assert_fail@plt+0x30c0>
   137dc:	mov	r5, r0
   137e0:	cmp	r4, #0
   137e4:	mov	r6, r5
   137e8:	mov	r5, r9
   137ec:	bne	13820 <__assert_fail@plt+0x264c>
   137f0:	ldr	r3, [sp, #12]
   137f4:	cmp	sl, #0
   137f8:	str	r8, [r3]
   137fc:	ldr	r3, [sp, #80]	; 0x50
   13800:	strne	r7, [sl]
   13804:	cmp	r3, #0
   13808:	strne	r5, [r3]
   1380c:	ldr	r3, [sp, #84]	; 0x54
   13810:	movne	r5, #0
   13814:	cmp	r3, #0
   13818:	strne	r6, [r3]
   1381c:	movne	r6, #0
   13820:	mov	r0, r5
   13824:	bl	11f14 <__assert_fail@plt+0xd40>
   13828:	mov	r0, r6
   1382c:	bl	11f14 <__assert_fail@plt+0xd40>
   13830:	cmp	r4, #0
   13834:	beq	1384c <__assert_fail@plt+0x2678>
   13838:	mov	r1, r4
   1383c:	mov	r2, #5
   13840:	mov	r0, #0
   13844:	bl	10f88 <dcgettext@plt>
   13848:	mov	r4, r0
   1384c:	mov	r0, r4
   13850:	add	sp, sp, #44	; 0x2c
   13854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13858:	ldrdeq	r5, [r1], -r2
   1385c:	andeq	r5, r1, ip, asr #18
   13860:	andeq	r5, r1, r5, asr #29
   13864:	ldrdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   13868:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1386c:	subs	r4, r2, #0
   13870:	mov	r6, r0
   13874:	mov	r8, r1
   13878:	mov	r9, r3
   1387c:	ldr	sl, [sp, #40]	; 0x28
   13880:	moveq	r7, r4
   13884:	beq	13894 <__assert_fail@plt+0x26c0>
   13888:	mov	r1, #58	; 0x3a
   1388c:	bl	110a8 <strchr@plt>
   13890:	mov	r7, r0
   13894:	mov	r3, r4
   13898:	stm	sp, {r9, sl}
   1389c:	mov	r2, r8
   138a0:	mov	r1, r7
   138a4:	mov	r0, r6
   138a8:	bl	135a4 <__assert_fail@plt+0x23d0>
   138ac:	adds	r3, r4, #0
   138b0:	movne	r3, #1
   138b4:	cmp	r7, #0
   138b8:	movne	r3, #0
   138bc:	cmp	r3, #0
   138c0:	mov	r5, r0
   138c4:	beq	13904 <__assert_fail@plt+0x2730>
   138c8:	cmp	r0, #0
   138cc:	beq	13900 <__assert_fail@plt+0x272c>
   138d0:	mov	r1, #46	; 0x2e
   138d4:	mov	r0, r6
   138d8:	bl	110a8 <strchr@plt>
   138dc:	subs	r1, r0, #0
   138e0:	beq	13904 <__assert_fail@plt+0x2730>
   138e4:	stm	sp, {r9, sl}
   138e8:	mov	r3, r4
   138ec:	mov	r2, r8
   138f0:	mov	r0, r6
   138f4:	bl	135a4 <__assert_fail@plt+0x23d0>
   138f8:	cmp	r0, #0
   138fc:	bne	13904 <__assert_fail@plt+0x2730>
   13900:	mov	r5, #0
   13904:	mov	r0, r5
   13908:	add	sp, sp, #8
   1390c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13910:	push	{r4, r5, r6, lr}
   13914:	sub	sp, sp, #32
   13918:	cmp	r1, #0
   1391c:	mov	r5, r0
   13920:	ldr	r4, [sp, #48]	; 0x30
   13924:	ldr	r6, [sp, #52]	; 0x34
   13928:	beq	139dc <__assert_fail@plt+0x2808>
   1392c:	stm	sp, {r2, r3}
   13930:	mov	r3, r1
   13934:	ldr	r2, [pc, #860]	; 13c98 <__assert_fail@plt+0x2ac4>
   13938:	mov	r1, #1
   1393c:	bl	11108 <__fprintf_chk@plt>
   13940:	mov	r2, #5
   13944:	ldr	r1, [pc, #848]	; 13c9c <__assert_fail@plt+0x2ac8>
   13948:	mov	r0, #0
   1394c:	bl	10f88 <dcgettext@plt>
   13950:	ldr	r3, [pc, #840]	; 13ca0 <__assert_fail@plt+0x2acc>
   13954:	ldr	r2, [pc, #840]	; 13ca4 <__assert_fail@plt+0x2ad0>
   13958:	str	r3, [sp]
   1395c:	mov	r1, #1
   13960:	mov	r3, r0
   13964:	mov	r0, r5
   13968:	bl	11108 <__fprintf_chk@plt>
   1396c:	mov	r1, r5
   13970:	mov	r0, #10
   13974:	bl	10f7c <fputc_unlocked@plt>
   13978:	mov	r2, #5
   1397c:	ldr	r1, [pc, #804]	; 13ca8 <__assert_fail@plt+0x2ad4>
   13980:	mov	r0, #0
   13984:	bl	10f88 <dcgettext@plt>
   13988:	mov	r1, #1
   1398c:	ldr	r3, [pc, #792]	; 13cac <__assert_fail@plt+0x2ad8>
   13990:	mov	r2, r0
   13994:	mov	r0, r5
   13998:	bl	11108 <__fprintf_chk@plt>
   1399c:	mov	r1, r5
   139a0:	mov	r0, #10
   139a4:	bl	10f7c <fputc_unlocked@plt>
   139a8:	cmp	r6, #9
   139ac:	ldrls	pc, [pc, r6, lsl #2]
   139b0:	b	13c8c <__assert_fail@plt+0x2ab8>
   139b4:	andeq	r3, r1, ip, asr #21
   139b8:	strdeq	r3, [r1], -r4
   139bc:	andeq	r3, r1, r0, lsr #20
   139c0:	andeq	r3, r1, r4, asr sl
   139c4:	muleq	r1, r0, sl
   139c8:	ldrdeq	r3, [r1], -r4
   139cc:	andeq	r3, r1, ip, lsl fp
   139d0:	andeq	r3, r1, ip, ror #22
   139d4:	andeq	r3, r1, r4, asr #23
   139d8:	andeq	r3, r1, r4, lsr #24
   139dc:	str	r3, [sp]
   139e0:	mov	r1, #1
   139e4:	mov	r3, r2
   139e8:	ldr	r2, [pc, #704]	; 13cb0 <__assert_fail@plt+0x2adc>
   139ec:	bl	11108 <__fprintf_chk@plt>
   139f0:	b	13940 <__assert_fail@plt+0x276c>
   139f4:	mov	r2, #5
   139f8:	ldr	r1, [pc, #692]	; 13cb4 <__assert_fail@plt+0x2ae0>
   139fc:	mov	r0, #0
   13a00:	bl	10f88 <dcgettext@plt>
   13a04:	ldr	r3, [r4]
   13a08:	mov	r1, #1
   13a0c:	mov	r2, r0
   13a10:	mov	r0, r5
   13a14:	add	sp, sp, #32
   13a18:	pop	{r4, r5, r6, lr}
   13a1c:	b	11108 <__fprintf_chk@plt>
   13a20:	mov	r2, #5
   13a24:	ldr	r1, [pc, #652]	; 13cb8 <__assert_fail@plt+0x2ae4>
   13a28:	mov	r0, #0
   13a2c:	bl	10f88 <dcgettext@plt>
   13a30:	ldr	r3, [r4, #4]
   13a34:	mov	r1, #1
   13a38:	str	r3, [sp, #48]	; 0x30
   13a3c:	ldr	r3, [r4]
   13a40:	mov	r2, r0
   13a44:	mov	r0, r5
   13a48:	add	sp, sp, #32
   13a4c:	pop	{r4, r5, r6, lr}
   13a50:	b	11108 <__fprintf_chk@plt>
   13a54:	mov	r2, #5
   13a58:	ldr	r1, [pc, #604]	; 13cbc <__assert_fail@plt+0x2ae8>
   13a5c:	mov	r0, #0
   13a60:	bl	10f88 <dcgettext@plt>
   13a64:	ldr	r3, [r4, #8]
   13a68:	mov	r1, #1
   13a6c:	str	r3, [sp, #52]	; 0x34
   13a70:	ldr	r3, [r4, #4]
   13a74:	str	r3, [sp, #48]	; 0x30
   13a78:	ldr	r3, [r4]
   13a7c:	mov	r2, r0
   13a80:	mov	r0, r5
   13a84:	add	sp, sp, #32
   13a88:	pop	{r4, r5, r6, lr}
   13a8c:	b	11108 <__fprintf_chk@plt>
   13a90:	mov	r2, #5
   13a94:	ldr	r1, [pc, #548]	; 13cc0 <__assert_fail@plt+0x2aec>
   13a98:	mov	r0, #0
   13a9c:	bl	10f88 <dcgettext@plt>
   13aa0:	ldr	r3, [r4, #12]
   13aa4:	mov	r1, #1
   13aa8:	str	r3, [sp, #8]
   13aac:	ldr	r3, [r4, #8]
   13ab0:	str	r3, [sp, #4]
   13ab4:	ldr	r3, [r4, #4]
   13ab8:	str	r3, [sp]
   13abc:	ldr	r3, [r4]
   13ac0:	mov	r2, r0
   13ac4:	mov	r0, r5
   13ac8:	bl	11108 <__fprintf_chk@plt>
   13acc:	add	sp, sp, #32
   13ad0:	pop	{r4, r5, r6, pc}
   13ad4:	mov	r2, #5
   13ad8:	ldr	r1, [pc, #484]	; 13cc4 <__assert_fail@plt+0x2af0>
   13adc:	mov	r0, #0
   13ae0:	bl	10f88 <dcgettext@plt>
   13ae4:	ldr	r3, [r4, #16]
   13ae8:	mov	r1, #1
   13aec:	str	r3, [sp, #12]
   13af0:	ldr	r3, [r4, #12]
   13af4:	str	r3, [sp, #8]
   13af8:	ldr	r3, [r4, #8]
   13afc:	str	r3, [sp, #4]
   13b00:	ldr	r3, [r4, #4]
   13b04:	str	r3, [sp]
   13b08:	ldr	r3, [r4]
   13b0c:	mov	r2, r0
   13b10:	mov	r0, r5
   13b14:	bl	11108 <__fprintf_chk@plt>
   13b18:	b	13acc <__assert_fail@plt+0x28f8>
   13b1c:	mov	r2, #5
   13b20:	ldr	r1, [pc, #416]	; 13cc8 <__assert_fail@plt+0x2af4>
   13b24:	mov	r0, #0
   13b28:	bl	10f88 <dcgettext@plt>
   13b2c:	ldr	r3, [r4, #20]
   13b30:	mov	r1, #1
   13b34:	str	r3, [sp, #16]
   13b38:	ldr	r3, [r4, #16]
   13b3c:	str	r3, [sp, #12]
   13b40:	ldr	r3, [r4, #12]
   13b44:	str	r3, [sp, #8]
   13b48:	ldr	r3, [r4, #8]
   13b4c:	str	r3, [sp, #4]
   13b50:	ldr	r3, [r4, #4]
   13b54:	str	r3, [sp]
   13b58:	ldr	r3, [r4]
   13b5c:	mov	r2, r0
   13b60:	mov	r0, r5
   13b64:	bl	11108 <__fprintf_chk@plt>
   13b68:	b	13acc <__assert_fail@plt+0x28f8>
   13b6c:	mov	r2, #5
   13b70:	ldr	r1, [pc, #340]	; 13ccc <__assert_fail@plt+0x2af8>
   13b74:	mov	r0, #0
   13b78:	bl	10f88 <dcgettext@plt>
   13b7c:	ldr	r3, [r4, #24]
   13b80:	mov	r1, #1
   13b84:	str	r3, [sp, #20]
   13b88:	ldr	r3, [r4, #20]
   13b8c:	str	r3, [sp, #16]
   13b90:	ldr	r3, [r4, #16]
   13b94:	str	r3, [sp, #12]
   13b98:	ldr	r3, [r4, #12]
   13b9c:	str	r3, [sp, #8]
   13ba0:	ldr	r3, [r4, #8]
   13ba4:	str	r3, [sp, #4]
   13ba8:	ldr	r3, [r4, #4]
   13bac:	str	r3, [sp]
   13bb0:	ldr	r3, [r4]
   13bb4:	mov	r2, r0
   13bb8:	mov	r0, r5
   13bbc:	bl	11108 <__fprintf_chk@plt>
   13bc0:	b	13acc <__assert_fail@plt+0x28f8>
   13bc4:	mov	r2, #5
   13bc8:	ldr	r1, [pc, #256]	; 13cd0 <__assert_fail@plt+0x2afc>
   13bcc:	mov	r0, #0
   13bd0:	bl	10f88 <dcgettext@plt>
   13bd4:	ldr	r3, [r4, #28]
   13bd8:	mov	r1, #1
   13bdc:	str	r3, [sp, #24]
   13be0:	ldr	r3, [r4, #24]
   13be4:	str	r3, [sp, #20]
   13be8:	ldr	r3, [r4, #20]
   13bec:	str	r3, [sp, #16]
   13bf0:	ldr	r3, [r4, #16]
   13bf4:	str	r3, [sp, #12]
   13bf8:	ldr	r3, [r4, #12]
   13bfc:	str	r3, [sp, #8]
   13c00:	ldr	r3, [r4, #8]
   13c04:	str	r3, [sp, #4]
   13c08:	ldr	r3, [r4, #4]
   13c0c:	str	r3, [sp]
   13c10:	ldr	r3, [r4]
   13c14:	mov	r2, r0
   13c18:	mov	r0, r5
   13c1c:	bl	11108 <__fprintf_chk@plt>
   13c20:	b	13acc <__assert_fail@plt+0x28f8>
   13c24:	ldr	r1, [pc, #168]	; 13cd4 <__assert_fail@plt+0x2b00>
   13c28:	mov	r2, #5
   13c2c:	mov	r0, #0
   13c30:	bl	10f88 <dcgettext@plt>
   13c34:	ldr	r3, [r4, #32]
   13c38:	mov	r1, #1
   13c3c:	str	r3, [sp, #28]
   13c40:	ldr	r3, [r4, #28]
   13c44:	str	r3, [sp, #24]
   13c48:	ldr	r3, [r4, #24]
   13c4c:	str	r3, [sp, #20]
   13c50:	ldr	r3, [r4, #20]
   13c54:	str	r3, [sp, #16]
   13c58:	ldr	r3, [r4, #16]
   13c5c:	str	r3, [sp, #12]
   13c60:	ldr	r3, [r4, #12]
   13c64:	str	r3, [sp, #8]
   13c68:	ldr	r3, [r4, #8]
   13c6c:	str	r3, [sp, #4]
   13c70:	ldr	r3, [r4, #4]
   13c74:	str	r3, [sp]
   13c78:	ldr	r3, [r4]
   13c7c:	mov	r2, r0
   13c80:	mov	r0, r5
   13c84:	bl	11108 <__fprintf_chk@plt>
   13c88:	b	13acc <__assert_fail@plt+0x28f8>
   13c8c:	mov	r2, #5
   13c90:	ldr	r1, [pc, #64]	; 13cd8 <__assert_fail@plt+0x2b04>
   13c94:	b	13c2c <__assert_fail@plt+0x2a58>
   13c98:	andeq	r5, r1, sp, ror #29
   13c9c:	andeq	r5, r1, r0, lsl #30
   13ca0:	andeq	r0, r0, r6, ror #15
   13ca4:	andeq	r6, r1, lr, asr #3
   13ca8:	andeq	r5, r1, r4, lsl #30
   13cac:	andeq	r5, r1, pc, lsr #31
   13cb0:	strdeq	r5, [r1], -r9
   13cb4:	ldrdeq	r5, [r1], -r1
   13cb8:	andeq	r5, r1, r1, ror #31
   13cbc:	strdeq	r5, [r1], -r8
   13cc0:	andeq	r6, r1, r4, lsl r0
   13cc4:	andeq	r6, r1, r4, lsr r0
   13cc8:	andeq	r6, r1, r8, asr r0
   13ccc:	andeq	r6, r1, r0, lsl #1
   13cd0:	andeq	r6, r1, ip, lsr #1
   13cd4:	ldrdeq	r6, [r1], -ip
   13cd8:	andeq	r6, r1, r0, lsl r1
   13cdc:	push	{r0, r1, r4, lr}
   13ce0:	mov	ip, #0
   13ce4:	ldr	lr, [sp, #16]
   13ce8:	ldr	r4, [lr, ip, lsl #2]
   13cec:	cmp	r4, #0
   13cf0:	bne	13d08 <__assert_fail@plt+0x2b34>
   13cf4:	str	ip, [sp, #4]
   13cf8:	str	lr, [sp]
   13cfc:	bl	13910 <__assert_fail@plt+0x273c>
   13d00:	add	sp, sp, #8
   13d04:	pop	{r4, pc}
   13d08:	add	ip, ip, #1
   13d0c:	b	13ce8 <__assert_fail@plt+0x2b14>
   13d10:	push	{r4, r5, lr}
   13d14:	sub	sp, sp, #52	; 0x34
   13d18:	mov	ip, #0
   13d1c:	ldr	r5, [sp, #64]	; 0x40
   13d20:	add	lr, sp, #8
   13d24:	ldr	r4, [r5, ip, lsl #2]
   13d28:	cmp	r4, #0
   13d2c:	str	r4, [lr, ip, lsl #2]
   13d30:	beq	13d40 <__assert_fail@plt+0x2b6c>
   13d34:	add	ip, ip, #1
   13d38:	cmp	ip, #10
   13d3c:	bne	13d24 <__assert_fail@plt+0x2b50>
   13d40:	str	ip, [sp, #4]
   13d44:	str	lr, [sp]
   13d48:	bl	13910 <__assert_fail@plt+0x273c>
   13d4c:	add	sp, sp, #52	; 0x34
   13d50:	pop	{r4, r5, pc}
   13d54:	push	{r3}		; (str r3, [sp, #-4]!)
   13d58:	push	{r0, r1, r2, r3, lr}
   13d5c:	add	r3, sp, #24
   13d60:	str	r3, [sp, #12]
   13d64:	str	r3, [sp]
   13d68:	ldr	r3, [sp, #20]
   13d6c:	bl	13d10 <__assert_fail@plt+0x2b3c>
   13d70:	add	sp, sp, #16
   13d74:	pop	{lr}		; (ldr lr, [sp], #4)
   13d78:	add	sp, sp, #4
   13d7c:	bx	lr
   13d80:	ldr	r3, [pc, #116]	; 13dfc <__assert_fail@plt+0x2c28>
   13d84:	push	{r4, lr}
   13d88:	mov	r0, #10
   13d8c:	ldr	r1, [r3]
   13d90:	bl	10f7c <fputc_unlocked@plt>
   13d94:	mov	r2, #5
   13d98:	ldr	r1, [pc, #96]	; 13e00 <__assert_fail@plt+0x2c2c>
   13d9c:	mov	r0, #0
   13da0:	bl	10f88 <dcgettext@plt>
   13da4:	ldr	r2, [pc, #88]	; 13e04 <__assert_fail@plt+0x2c30>
   13da8:	mov	r1, r0
   13dac:	mov	r0, #1
   13db0:	bl	110e4 <__printf_chk@plt>
   13db4:	mov	r2, #5
   13db8:	ldr	r1, [pc, #72]	; 13e08 <__assert_fail@plt+0x2c34>
   13dbc:	mov	r0, #0
   13dc0:	bl	10f88 <dcgettext@plt>
   13dc4:	ldr	r3, [pc, #64]	; 13e0c <__assert_fail@plt+0x2c38>
   13dc8:	ldr	r2, [pc, #64]	; 13e10 <__assert_fail@plt+0x2c3c>
   13dcc:	mov	r1, r0
   13dd0:	mov	r0, #1
   13dd4:	bl	110e4 <__printf_chk@plt>
   13dd8:	mov	r2, #5
   13ddc:	ldr	r1, [pc, #48]	; 13e14 <__assert_fail@plt+0x2c40>
   13de0:	mov	r0, #0
   13de4:	bl	10f88 <dcgettext@plt>
   13de8:	ldr	r2, [pc, #40]	; 13e18 <__assert_fail@plt+0x2c44>
   13dec:	pop	{r4, lr}
   13df0:	mov	r1, r0
   13df4:	mov	r0, #1
   13df8:	b	110e4 <__printf_chk@plt>
   13dfc:	andeq	r7, r2, ip, ror r1
   13e00:	andeq	r6, r1, ip, asr #2
   13e04:	andeq	r6, r1, r0, ror #2
   13e08:	andeq	r6, r1, r6, ror r1
   13e0c:	andeq	r5, r1, r3, ror #21
   13e10:	andeq	r5, r1, fp, lsl #22
   13e14:	andeq	r6, r1, sl, lsl #3
   13e18:			; <UNDEFINED> instruction: 0x000161b1
   13e1c:	push	{r4, lr}
   13e20:	bl	14b24 <__assert_fail@plt+0x3950>
   13e24:	cmp	r0, #0
   13e28:	popne	{r4, pc}
   13e2c:	bl	142b0 <__assert_fail@plt+0x30dc>
   13e30:	push	{r4, lr}
   13e34:	bl	14b24 <__assert_fail@plt+0x3950>
   13e38:	cmp	r0, #0
   13e3c:	popne	{r4, pc}
   13e40:	bl	142b0 <__assert_fail@plt+0x30dc>
   13e44:	b	13e1c <__assert_fail@plt+0x2c48>
   13e48:	push	{r4, r5, r6, lr}
   13e4c:	mov	r5, r0
   13e50:	mov	r4, r1
   13e54:	bl	14b64 <__assert_fail@plt+0x3990>
   13e58:	cmp	r0, #0
   13e5c:	popne	{r4, r5, r6, pc}
   13e60:	adds	r4, r4, #0
   13e64:	movne	r4, #1
   13e68:	cmp	r5, #0
   13e6c:	orreq	r4, r4, #1
   13e70:	cmp	r4, #0
   13e74:	popeq	{r4, r5, r6, pc}
   13e78:	bl	142b0 <__assert_fail@plt+0x30dc>
   13e7c:	push	{r4, lr}
   13e80:	cmp	r1, #0
   13e84:	orreq	r1, r1, #1
   13e88:	bl	14b64 <__assert_fail@plt+0x3990>
   13e8c:	cmp	r0, #0
   13e90:	popne	{r4, pc}
   13e94:	bl	142b0 <__assert_fail@plt+0x30dc>
   13e98:	push	{r4, r5, r6, lr}
   13e9c:	mov	r6, r0
   13ea0:	mov	r5, r1
   13ea4:	mov	r4, r2
   13ea8:	bl	15078 <__assert_fail@plt+0x3ea4>
   13eac:	cmp	r0, #0
   13eb0:	popne	{r4, r5, r6, pc}
   13eb4:	cmp	r6, #0
   13eb8:	beq	13ec8 <__assert_fail@plt+0x2cf4>
   13ebc:	cmp	r5, #0
   13ec0:	cmpne	r4, #0
   13ec4:	popeq	{r4, r5, r6, pc}
   13ec8:	bl	142b0 <__assert_fail@plt+0x30dc>
   13ecc:	b	13e98 <__assert_fail@plt+0x2cc4>
   13ed0:	cmp	r2, #0
   13ed4:	cmpne	r1, #0
   13ed8:	moveq	r2, #1
   13edc:	moveq	r1, r2
   13ee0:	push	{r4, lr}
   13ee4:	bl	15078 <__assert_fail@plt+0x3ea4>
   13ee8:	cmp	r0, #0
   13eec:	popne	{r4, pc}
   13ef0:	bl	142b0 <__assert_fail@plt+0x30dc>
   13ef4:	mov	r2, r1
   13ef8:	mov	r1, r0
   13efc:	mov	r0, #0
   13f00:	b	13e98 <__assert_fail@plt+0x2cc4>
   13f04:	mov	r2, r1
   13f08:	mov	r1, r0
   13f0c:	mov	r0, #0
   13f10:	b	13ed0 <__assert_fail@plt+0x2cfc>
   13f14:	push	{r4, r5, r6, r7, r8, lr}
   13f18:	subs	r7, r0, #0
   13f1c:	mov	r5, r1
   13f20:	mov	r6, r2
   13f24:	ldr	r4, [r1]
   13f28:	bne	13f64 <__assert_fail@plt+0x2d90>
   13f2c:	cmp	r4, #0
   13f30:	bne	13f4c <__assert_fail@plt+0x2d78>
   13f34:	mov	r1, r2
   13f38:	mov	r0, #64	; 0x40
   13f3c:	bl	151a4 <__assert_fail@plt+0x3fd0>
   13f40:	cmp	r0, #0
   13f44:	movne	r4, r0
   13f48:	addeq	r4, r0, #1
   13f4c:	mov	r2, r6
   13f50:	mov	r1, r4
   13f54:	mov	r0, r7
   13f58:	bl	13e98 <__assert_fail@plt+0x2cc4>
   13f5c:	str	r4, [r5]
   13f60:	pop	{r4, r5, r6, r7, r8, pc}
   13f64:	lsr	r2, r4, #1
   13f68:	add	r3, r2, #1
   13f6c:	mvn	r3, r3
   13f70:	cmp	r4, r3
   13f74:	addls	r4, r4, #1
   13f78:	addls	r4, r4, r2
   13f7c:	bls	13f4c <__assert_fail@plt+0x2d78>
   13f80:	bl	142b0 <__assert_fail@plt+0x30dc>
   13f84:	mov	r2, #1
   13f88:	b	13f14 <__assert_fail@plt+0x2d40>
   13f8c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f90:	mov	sl, r0
   13f94:	ldr	r8, [r1]
   13f98:	mov	fp, r1
   13f9c:	mov	r5, r2
   13fa0:	asrs	r4, r8, #1
   13fa4:	mov	r9, r3
   13fa8:	ldr	r7, [sp, #48]	; 0x30
   13fac:	bpl	14048 <__assert_fail@plt+0x2e74>
   13fb0:	rsb	r2, r4, #-2147483648	; 0x80000000
   13fb4:	cmp	r8, r2
   13fb8:	movge	r2, #0
   13fbc:	movlt	r2, #1
   13fc0:	mvn	r3, r9
   13fc4:	cmp	r2, #0
   13fc8:	lsr	r3, r3, #31
   13fcc:	addeq	r4, r4, r8
   13fd0:	mvnne	r4, #-2147483648	; 0x80000000
   13fd4:	mov	r0, r3
   13fd8:	cmp	r9, r4
   13fdc:	movge	r0, #0
   13fe0:	andlt	r0, r0, #1
   13fe4:	cmp	r0, #0
   13fe8:	str	r3, [sp, #4]
   13fec:	bne	141bc <__assert_fail@plt+0x2fe8>
   13ff0:	cmp	r7, #0
   13ff4:	bge	14108 <__assert_fail@plt+0x2f34>
   13ff8:	cmp	r4, #0
   13ffc:	bge	14060 <__assert_fail@plt+0x2e8c>
   14000:	mov	r1, r7
   14004:	mvn	r0, #-2147483648	; 0x80000000
   14008:	bl	153b0 <__assert_fail@plt+0x41dc>
   1400c:	cmp	r0, r4
   14010:	movle	r0, #0
   14014:	movgt	r0, #1
   14018:	cmp	r0, #0
   1401c:	mvnne	r6, #-2147483648	; 0x80000000
   14020:	beq	14070 <__assert_fail@plt+0x2e9c>
   14024:	mov	r1, r7
   14028:	mov	r0, r6
   1402c:	bl	153b0 <__assert_fail@plt+0x41dc>
   14030:	mov	r1, r7
   14034:	mov	r4, r0
   14038:	mov	r0, r6
   1403c:	bl	155d0 <__assert_fail@plt+0x43fc>
   14040:	sub	r1, r6, r1
   14044:	b	14080 <__assert_fail@plt+0x2eac>
   14048:	mvn	r2, #-2147483648	; 0x80000000
   1404c:	sub	r2, r2, r4
   14050:	cmp	r8, r2
   14054:	movle	r2, #0
   14058:	movgt	r2, #1
   1405c:	b	13fc0 <__assert_fail@plt+0x2dec>
   14060:	cmn	r7, #1
   14064:	movne	r1, r7
   14068:	movne	r0, #-2147483648	; 0x80000000
   1406c:	bne	141d4 <__assert_fail@plt+0x3000>
   14070:	mul	r1, r7, r4
   14074:	cmp	r1, #63	; 0x3f
   14078:	movle	r6, #64	; 0x40
   1407c:	ble	14024 <__assert_fail@plt+0x2e50>
   14080:	cmp	sl, #0
   14084:	sub	r2, r4, r8
   14088:	streq	sl, [fp]
   1408c:	cmp	r2, r5
   14090:	bge	14164 <__assert_fail@plt+0x2f90>
   14094:	cmp	r5, #0
   14098:	bge	14130 <__assert_fail@plt+0x2f5c>
   1409c:	rsb	r2, r5, #-2147483648	; 0x80000000
   140a0:	cmp	r8, r2
   140a4:	movge	r2, #0
   140a8:	movlt	r2, #1
   140ac:	cmp	r2, #0
   140b0:	bne	14104 <__assert_fail@plt+0x2f30>
   140b4:	ldr	r0, [sp, #4]
   140b8:	add	r5, r8, r5
   140bc:	cmp	r9, r5
   140c0:	movge	r0, #0
   140c4:	andlt	r0, r0, #1
   140c8:	cmp	r0, #0
   140cc:	mov	r4, r5
   140d0:	bne	14104 <__assert_fail@plt+0x2f30>
   140d4:	cmp	r7, #0
   140d8:	bge	14178 <__assert_fail@plt+0x2fa4>
   140dc:	cmp	r5, #0
   140e0:	bge	14150 <__assert_fail@plt+0x2f7c>
   140e4:	mov	r1, r7
   140e8:	mvn	r0, #-2147483648	; 0x80000000
   140ec:	bl	153b0 <__assert_fail@plt+0x41dc>
   140f0:	cmp	r5, r0
   140f4:	movge	r0, #0
   140f8:	movlt	r0, #1
   140fc:	cmp	r0, #0
   14100:	beq	14160 <__assert_fail@plt+0x2f8c>
   14104:	bl	142b0 <__assert_fail@plt+0x30dc>
   14108:	beq	14070 <__assert_fail@plt+0x2e9c>
   1410c:	cmp	r4, #0
   14110:	bge	141cc <__assert_fail@plt+0x2ff8>
   14114:	cmn	r4, #1
   14118:	beq	14070 <__assert_fail@plt+0x2e9c>
   1411c:	mov	r1, r4
   14120:	mov	r0, #-2147483648	; 0x80000000
   14124:	bl	153b0 <__assert_fail@plt+0x41dc>
   14128:	cmp	r7, r0
   1412c:	b	14010 <__assert_fail@plt+0x2e3c>
   14130:	cmp	r8, #0
   14134:	blt	140b4 <__assert_fail@plt+0x2ee0>
   14138:	mvn	r2, #-2147483648	; 0x80000000
   1413c:	sub	r2, r2, r5
   14140:	cmp	r8, r2
   14144:	movle	r2, #0
   14148:	movgt	r2, #1
   1414c:	b	140ac <__assert_fail@plt+0x2ed8>
   14150:	cmn	r7, #1
   14154:	movne	r1, r7
   14158:	movne	r0, #-2147483648	; 0x80000000
   1415c:	bne	141b0 <__assert_fail@plt+0x2fdc>
   14160:	mul	r1, r5, r7
   14164:	mov	r0, sl
   14168:	bl	13e48 <__assert_fail@plt+0x2c74>
   1416c:	str	r4, [fp]
   14170:	add	sp, sp, #12
   14174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14178:	beq	14160 <__assert_fail@plt+0x2f8c>
   1417c:	cmp	r5, #0
   14180:	movge	r1, r7
   14184:	mvnge	r0, #-2147483648	; 0x80000000
   14188:	bge	141b0 <__assert_fail@plt+0x2fdc>
   1418c:	cmn	r5, #1
   14190:	beq	14160 <__assert_fail@plt+0x2f8c>
   14194:	mov	r1, r5
   14198:	mov	r0, #-2147483648	; 0x80000000
   1419c:	bl	153b0 <__assert_fail@plt+0x41dc>
   141a0:	cmp	r7, r0
   141a4:	movle	r0, #0
   141a8:	movgt	r0, #1
   141ac:	b	140fc <__assert_fail@plt+0x2f28>
   141b0:	bl	153b0 <__assert_fail@plt+0x41dc>
   141b4:	cmp	r5, r0
   141b8:	b	141a4 <__assert_fail@plt+0x2fd0>
   141bc:	cmp	r7, #0
   141c0:	mov	r4, r9
   141c4:	blt	14060 <__assert_fail@plt+0x2e8c>
   141c8:	beq	14070 <__assert_fail@plt+0x2e9c>
   141cc:	mov	r1, r7
   141d0:	mvn	r0, #-2147483648	; 0x80000000
   141d4:	bl	153b0 <__assert_fail@plt+0x41dc>
   141d8:	cmp	r0, r4
   141dc:	movge	r0, #0
   141e0:	movlt	r0, #1
   141e4:	b	14018 <__assert_fail@plt+0x2e44>
   141e8:	push	{r4, lr}
   141ec:	bl	14adc <__assert_fail@plt+0x3908>
   141f0:	cmp	r0, #0
   141f4:	popne	{r4, pc}
   141f8:	bl	142b0 <__assert_fail@plt+0x30dc>
   141fc:	mov	r1, #1
   14200:	b	141e8 <__assert_fail@plt+0x3014>
   14204:	push	{r4, lr}
   14208:	bl	14adc <__assert_fail@plt+0x3908>
   1420c:	cmp	r0, #0
   14210:	popne	{r4, pc}
   14214:	bl	142b0 <__assert_fail@plt+0x30dc>
   14218:	mov	r1, #1
   1421c:	b	14204 <__assert_fail@plt+0x3030>
   14220:	push	{r4, r5, r6, lr}
   14224:	mov	r4, r1
   14228:	mov	r5, r0
   1422c:	mov	r0, r1
   14230:	bl	13e1c <__assert_fail@plt+0x2c48>
   14234:	mov	r2, r4
   14238:	mov	r1, r5
   1423c:	pop	{r4, r5, r6, lr}
   14240:	b	10f4c <memcpy@plt>
   14244:	push	{r4, r5, r6, lr}
   14248:	mov	r4, r1
   1424c:	mov	r5, r0
   14250:	mov	r0, r1
   14254:	bl	13e30 <__assert_fail@plt+0x2c5c>
   14258:	mov	r2, r4
   1425c:	mov	r1, r5
   14260:	pop	{r4, r5, r6, lr}
   14264:	b	10f4c <memcpy@plt>
   14268:	push	{r4, r5, r6, lr}
   1426c:	mov	r5, r0
   14270:	add	r0, r1, #1
   14274:	mov	r4, r1
   14278:	bl	13e30 <__assert_fail@plt+0x2c5c>
   1427c:	mov	r2, #0
   14280:	mov	r1, r5
   14284:	strb	r2, [r0, r4]
   14288:	mov	r2, r4
   1428c:	pop	{r4, r5, r6, lr}
   14290:	b	10f4c <memcpy@plt>
   14294:	push	{r4, lr}
   14298:	mov	r4, r0
   1429c:	bl	1109c <strlen@plt>
   142a0:	add	r1, r0, #1
   142a4:	mov	r0, r4
   142a8:	pop	{r4, lr}
   142ac:	b	14220 <__assert_fail@plt+0x304c>
   142b0:	ldr	r3, [pc, #44]	; 142e4 <__assert_fail@plt+0x3110>
   142b4:	push	{r4, lr}
   142b8:	mov	r2, #5
   142bc:	ldr	r1, [pc, #36]	; 142e8 <__assert_fail@plt+0x3114>
   142c0:	mov	r0, #0
   142c4:	ldr	r4, [r3]
   142c8:	bl	10f88 <dcgettext@plt>
   142cc:	ldr	r2, [pc, #24]	; 142ec <__assert_fail@plt+0x3118>
   142d0:	mov	r1, #0
   142d4:	mov	r3, r0
   142d8:	mov	r0, r4
   142dc:	bl	11018 <error@plt>
   142e0:	bl	111b0 <abort@plt>
   142e4:	andeq	r7, r2, r0, lsr #2
   142e8:	strdeq	r6, [r1], -sp
   142ec:	andeq	r5, r1, r6, asr #27
   142f0:	push	{r4, lr}
   142f4:	bl	14ee0 <__assert_fail@plt+0x3d0c>
   142f8:	cmn	r0, #1
   142fc:	mov	r4, r0
   14300:	bne	14318 <__assert_fail@plt+0x3144>
   14304:	bl	110b4 <__errno_location@plt>
   14308:	ldr	r3, [r0]
   1430c:	cmp	r3, #12
   14310:	bne	14318 <__assert_fail@plt+0x3144>
   14314:	bl	142b0 <__assert_fail@plt+0x30dc>
   14318:	mov	r0, r4
   1431c:	pop	{r4, pc}
   14320:	push	{r4, r5, r6, lr}
   14324:	subs	r5, r1, #0
   14328:	mov	r4, r0
   1432c:	bge	1435c <__assert_fail@plt+0x3188>
   14330:	ldr	r0, [r0]
   14334:	adds	r0, r0, #0
   14338:	movne	r0, #1
   1433c:	cmp	r0, #0
   14340:	mvnne	r3, #0
   14344:	ldreq	r3, [r4]
   14348:	strne	r3, [r4]
   1434c:	movne	r0, #1
   14350:	muleq	r5, r5, r3
   14354:	streq	r5, [r4]
   14358:	pop	{r4, r5, r6, pc}
   1435c:	moveq	r0, r5
   14360:	beq	1433c <__assert_fail@plt+0x3168>
   14364:	mvn	r0, #0
   14368:	bl	151a4 <__assert_fail@plt+0x3fd0>
   1436c:	ldr	r3, [r4]
   14370:	cmp	r0, r3
   14374:	movcs	r0, #0
   14378:	movcc	r0, #1
   1437c:	b	1433c <__assert_fail@plt+0x3168>
   14380:	push	{r4, r5, r6, r7, r8, lr}
   14384:	mov	r6, r0
   14388:	mov	r7, r1
   1438c:	mov	r5, r2
   14390:	mov	r4, #0
   14394:	cmp	r5, #0
   14398:	bne	143a4 <__assert_fail@plt+0x31d0>
   1439c:	mov	r0, r4
   143a0:	pop	{r4, r5, r6, r7, r8, pc}
   143a4:	mov	r1, r7
   143a8:	mov	r0, r6
   143ac:	bl	14320 <__assert_fail@plt+0x314c>
   143b0:	sub	r5, r5, #1
   143b4:	orr	r4, r4, r0
   143b8:	b	14394 <__assert_fail@plt+0x31c0>
   143bc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143c0:	cmp	r2, #36	; 0x24
   143c4:	ldr	r9, [sp, #48]	; 0x30
   143c8:	bls	143e0 <__assert_fail@plt+0x320c>
   143cc:	ldr	r3, [pc, #768]	; 146d4 <__assert_fail@plt+0x3500>
   143d0:	mov	r2, #85	; 0x55
   143d4:	ldr	r1, [pc, #764]	; 146d8 <__assert_fail@plt+0x3504>
   143d8:	ldr	r0, [pc, #764]	; 146dc <__assert_fail@plt+0x3508>
   143dc:	bl	111d4 <__assert_fail@plt>
   143e0:	cmp	r1, #0
   143e4:	mov	r7, r1
   143e8:	mov	r4, r0
   143ec:	mov	fp, r2
   143f0:	mov	r8, r3
   143f4:	moveq	r7, sp
   143f8:	bl	110b4 <__errno_location@plt>
   143fc:	mov	r3, #0
   14400:	str	r3, [r0]
   14404:	mov	sl, r0
   14408:	bl	11078 <__ctype_b_loc@plt>
   1440c:	ldrb	r6, [r4]
   14410:	mov	r3, r4
   14414:	ldr	r1, [r0]
   14418:	lsl	r2, r6, #1
   1441c:	ldrh	r5, [r1, r2]
   14420:	ands	r5, r5, #8192	; 0x2000
   14424:	bne	14440 <__assert_fail@plt+0x326c>
   14428:	cmp	r6, #45	; 0x2d
   1442c:	bne	14448 <__assert_fail@plt+0x3274>
   14430:	mov	r5, #4
   14434:	mov	r0, r5
   14438:	add	sp, sp, #12
   1443c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14440:	ldrb	r6, [r3, #1]!
   14444:	b	14418 <__assert_fail@plt+0x3244>
   14448:	mov	r2, fp
   1444c:	mov	r1, r7
   14450:	mov	r0, r4
   14454:	bl	11090 <strtoul@plt>
   14458:	ldr	r6, [r7]
   1445c:	cmp	r4, r6
   14460:	str	r0, [sp, #4]
   14464:	bne	144c4 <__assert_fail@plt+0x32f0>
   14468:	cmp	r9, #0
   1446c:	beq	14430 <__assert_fail@plt+0x325c>
   14470:	ldrb	r1, [r6]
   14474:	cmp	r1, #0
   14478:	beq	14430 <__assert_fail@plt+0x325c>
   1447c:	mov	r0, r9
   14480:	bl	110a8 <strchr@plt>
   14484:	cmp	r0, #0
   14488:	movne	r3, #1
   1448c:	strne	r3, [sp, #4]
   14490:	beq	14430 <__assert_fail@plt+0x325c>
   14494:	ldrb	r4, [r6]
   14498:	cmp	r4, #0
   1449c:	beq	145d4 <__assert_fail@plt+0x3400>
   144a0:	mov	r1, r4
   144a4:	mov	r0, r9
   144a8:	bl	110a8 <strchr@plt>
   144ac:	cmp	r0, #0
   144b0:	bne	144ec <__assert_fail@plt+0x3318>
   144b4:	ldr	r3, [sp, #4]
   144b8:	orr	r5, r5, #2
   144bc:	str	r3, [r8]
   144c0:	b	14434 <__assert_fail@plt+0x3260>
   144c4:	ldr	r5, [sl]
   144c8:	cmp	r5, #0
   144cc:	beq	144dc <__assert_fail@plt+0x3308>
   144d0:	cmp	r5, #34	; 0x22
   144d4:	bne	14430 <__assert_fail@plt+0x325c>
   144d8:	mov	r5, #1
   144dc:	cmp	r9, #0
   144e0:	streq	r0, [r8]
   144e4:	bne	14494 <__assert_fail@plt+0x32c0>
   144e8:	b	14434 <__assert_fail@plt+0x3260>
   144ec:	cmp	r4, #84	; 0x54
   144f0:	beq	14544 <__assert_fail@plt+0x3370>
   144f4:	bhi	1452c <__assert_fail@plt+0x3358>
   144f8:	cmp	r4, #75	; 0x4b
   144fc:	beq	14544 <__assert_fail@plt+0x3370>
   14500:	bhi	1451c <__assert_fail@plt+0x3348>
   14504:	cmp	r4, #69	; 0x45
   14508:	beq	14544 <__assert_fail@plt+0x3370>
   1450c:	cmp	r4, #71	; 0x47
   14510:	beq	14544 <__assert_fail@plt+0x3370>
   14514:	mov	r6, #1
   14518:	b	14608 <__assert_fail@plt+0x3434>
   1451c:	cmp	r4, #77	; 0x4d
   14520:	beq	14544 <__assert_fail@plt+0x3370>
   14524:	cmp	r4, #80	; 0x50
   14528:	b	14510 <__assert_fail@plt+0x333c>
   1452c:	cmp	r4, #103	; 0x67
   14530:	beq	14544 <__assert_fail@plt+0x3370>
   14534:	bhi	145e0 <__assert_fail@plt+0x340c>
   14538:	sub	r3, r4, #89	; 0x59
   1453c:	cmp	r3, #1
   14540:	bhi	14514 <__assert_fail@plt+0x3340>
   14544:	mov	r1, #48	; 0x30
   14548:	mov	r0, r9
   1454c:	bl	110a8 <strchr@plt>
   14550:	cmp	r0, #0
   14554:	beq	14514 <__assert_fail@plt+0x3340>
   14558:	ldrb	r3, [r6, #1]
   1455c:	cmp	r3, #68	; 0x44
   14560:	beq	14574 <__assert_fail@plt+0x33a0>
   14564:	cmp	r3, #105	; 0x69
   14568:	beq	145f8 <__assert_fail@plt+0x3424>
   1456c:	cmp	r3, #66	; 0x42
   14570:	bne	14514 <__assert_fail@plt+0x3340>
   14574:	mov	r6, #2
   14578:	mov	r1, #1000	; 0x3e8
   1457c:	cmp	r4, #89	; 0x59
   14580:	beq	146c4 <__assert_fail@plt+0x34f0>
   14584:	bhi	14630 <__assert_fail@plt+0x345c>
   14588:	cmp	r4, #75	; 0x4b
   1458c:	beq	14670 <__assert_fail@plt+0x349c>
   14590:	bhi	14610 <__assert_fail@plt+0x343c>
   14594:	cmp	r4, #69	; 0x45
   14598:	beq	14698 <__assert_fail@plt+0x34c4>
   1459c:	cmp	r4, #71	; 0x47
   145a0:	beq	146a4 <__assert_fail@plt+0x34d0>
   145a4:	cmp	r4, #66	; 0x42
   145a8:	moveq	r1, #1024	; 0x400
   145ac:	bne	144b4 <__assert_fail@plt+0x32e0>
   145b0:	add	r0, sp, #4
   145b4:	bl	14320 <__assert_fail@plt+0x314c>
   145b8:	ldr	r3, [r7]
   145bc:	orr	r5, r5, r0
   145c0:	add	r2, r3, r6
   145c4:	str	r2, [r7]
   145c8:	ldrb	r3, [r3, r6]
   145cc:	cmp	r3, #0
   145d0:	orrne	r5, r5, #2
   145d4:	ldr	r3, [sp, #4]
   145d8:	str	r3, [r8]
   145dc:	b	14434 <__assert_fail@plt+0x3260>
   145e0:	cmp	r4, #109	; 0x6d
   145e4:	beq	14544 <__assert_fail@plt+0x3370>
   145e8:	cmp	r4, #116	; 0x74
   145ec:	beq	14544 <__assert_fail@plt+0x3370>
   145f0:	cmp	r4, #107	; 0x6b
   145f4:	b	14510 <__assert_fail@plt+0x333c>
   145f8:	ldrb	r6, [r6, #2]
   145fc:	cmp	r6, #66	; 0x42
   14600:	movne	r6, #1
   14604:	moveq	r6, #3
   14608:	mov	r1, #1024	; 0x400
   1460c:	b	1457c <__assert_fail@plt+0x33a8>
   14610:	cmp	r4, #80	; 0x50
   14614:	beq	146ac <__assert_fail@plt+0x34d8>
   14618:	cmp	r4, #84	; 0x54
   1461c:	beq	146b4 <__assert_fail@plt+0x34e0>
   14620:	cmp	r4, #77	; 0x4d
   14624:	bne	144b4 <__assert_fail@plt+0x32e0>
   14628:	mov	r2, #2
   1462c:	b	1469c <__assert_fail@plt+0x34c8>
   14630:	cmp	r4, #103	; 0x67
   14634:	beq	146a4 <__assert_fail@plt+0x34d0>
   14638:	bhi	1465c <__assert_fail@plt+0x3488>
   1463c:	cmp	r4, #98	; 0x62
   14640:	beq	14690 <__assert_fail@plt+0x34bc>
   14644:	cmp	r4, #99	; 0x63
   14648:	beq	146cc <__assert_fail@plt+0x34f8>
   1464c:	cmp	r4, #90	; 0x5a
   14650:	bne	144b4 <__assert_fail@plt+0x32e0>
   14654:	mov	r2, #7
   14658:	b	1469c <__assert_fail@plt+0x34c8>
   1465c:	cmp	r4, #109	; 0x6d
   14660:	beq	14628 <__assert_fail@plt+0x3454>
   14664:	bhi	14678 <__assert_fail@plt+0x34a4>
   14668:	cmp	r4, #107	; 0x6b
   1466c:	bne	144b4 <__assert_fail@plt+0x32e0>
   14670:	mov	r2, #1
   14674:	b	1469c <__assert_fail@plt+0x34c8>
   14678:	cmp	r4, #116	; 0x74
   1467c:	beq	146b4 <__assert_fail@plt+0x34e0>
   14680:	cmp	r4, #119	; 0x77
   14684:	moveq	r1, #2
   14688:	beq	145b0 <__assert_fail@plt+0x33dc>
   1468c:	b	144b4 <__assert_fail@plt+0x32e0>
   14690:	mov	r1, #512	; 0x200
   14694:	b	145b0 <__assert_fail@plt+0x33dc>
   14698:	mov	r2, #6
   1469c:	add	r0, sp, #4
   146a0:	b	146bc <__assert_fail@plt+0x34e8>
   146a4:	mov	r2, #3
   146a8:	b	1469c <__assert_fail@plt+0x34c8>
   146ac:	mov	r2, #5
   146b0:	b	1469c <__assert_fail@plt+0x34c8>
   146b4:	mov	r2, #4
   146b8:	add	r0, sp, r2
   146bc:	bl	14380 <__assert_fail@plt+0x31ac>
   146c0:	b	145b8 <__assert_fail@plt+0x33e4>
   146c4:	mov	r2, #8
   146c8:	b	1469c <__assert_fail@plt+0x34c8>
   146cc:	mov	r0, #0
   146d0:	b	145b8 <__assert_fail@plt+0x33e4>
   146d4:	andeq	r6, r1, lr, lsl #4
   146d8:	andeq	r6, r1, r7, lsl r2
   146dc:	andeq	r6, r1, r5, lsr #4
   146e0:	push	{r4, r5, r6, lr}
   146e4:	subs	r5, r1, #0
   146e8:	mov	r4, r0
   146ec:	bge	1472c <__assert_fail@plt+0x3558>
   146f0:	ldm	r0, {r0, r3}
   146f4:	orr	r0, r0, r3
   146f8:	adds	r0, r0, #0
   146fc:	movne	r0, #1
   14700:	cmp	r0, #0
   14704:	bne	14760 <__assert_fail@plt+0x358c>
   14708:	ldr	r2, [r4]
   1470c:	asr	r3, r5, #31
   14710:	ldr	r1, [r4, #4]
   14714:	mul	r3, r3, r2
   14718:	mla	r1, r5, r1, r3
   1471c:	umull	r2, r3, r2, r5
   14720:	add	r3, r1, r3
   14724:	strd	r2, [r4]
   14728:	pop	{r4, r5, r6, pc}
   1472c:	moveq	r0, r5
   14730:	beq	14700 <__assert_fail@plt+0x352c>
   14734:	mov	r2, r5
   14738:	asr	r3, r5, #31
   1473c:	mvn	r0, #0
   14740:	mvn	r1, #0
   14744:	bl	155f0 <__assert_fail@plt+0x441c>
   14748:	ldrd	r2, [r4]
   1474c:	cmp	r1, r3
   14750:	cmpeq	r0, r2
   14754:	movcc	r0, #1
   14758:	movcs	r0, #0
   1475c:	b	14700 <__assert_fail@plt+0x352c>
   14760:	mvn	r2, #0
   14764:	mvn	r3, #0
   14768:	mov	r0, #1
   1476c:	strd	r2, [r4]
   14770:	pop	{r4, r5, r6, pc}
   14774:	push	{r4, r5, r6, r7, r8, lr}
   14778:	mov	r6, r0
   1477c:	mov	r7, r1
   14780:	mov	r5, r2
   14784:	mov	r4, #0
   14788:	cmp	r5, #0
   1478c:	bne	14798 <__assert_fail@plt+0x35c4>
   14790:	mov	r0, r4
   14794:	pop	{r4, r5, r6, r7, r8, pc}
   14798:	mov	r1, r7
   1479c:	mov	r0, r6
   147a0:	bl	146e0 <__assert_fail@plt+0x350c>
   147a4:	sub	r5, r5, #1
   147a8:	orr	r4, r4, r0
   147ac:	b	14788 <__assert_fail@plt+0x35b4>
   147b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147b4:	sub	sp, sp, #20
   147b8:	cmp	r2, #36	; 0x24
   147bc:	ldr	r9, [sp, #56]	; 0x38
   147c0:	bls	147d8 <__assert_fail@plt+0x3604>
   147c4:	ldr	r3, [pc, #772]	; 14ad0 <__assert_fail@plt+0x38fc>
   147c8:	mov	r2, #85	; 0x55
   147cc:	ldr	r1, [pc, #768]	; 14ad4 <__assert_fail@plt+0x3900>
   147d0:	ldr	r0, [pc, #768]	; 14ad8 <__assert_fail@plt+0x3904>
   147d4:	bl	111d4 <__assert_fail@plt>
   147d8:	cmp	r1, #0
   147dc:	mov	r7, r1
   147e0:	mov	r4, r0
   147e4:	mov	fp, r2
   147e8:	mov	r8, r3
   147ec:	addeq	r7, sp, #4
   147f0:	bl	110b4 <__errno_location@plt>
   147f4:	mov	r3, #0
   147f8:	str	r3, [r0]
   147fc:	mov	sl, r0
   14800:	bl	11078 <__ctype_b_loc@plt>
   14804:	ldrb	r6, [r4]
   14808:	mov	r3, r4
   1480c:	ldr	r1, [r0]
   14810:	lsl	r2, r6, #1
   14814:	ldrh	r5, [r1, r2]
   14818:	ands	r5, r5, #8192	; 0x2000
   1481c:	bne	14838 <__assert_fail@plt+0x3664>
   14820:	cmp	r6, #45	; 0x2d
   14824:	bne	14840 <__assert_fail@plt+0x366c>
   14828:	mov	r5, #4
   1482c:	mov	r0, r5
   14830:	add	sp, sp, #20
   14834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14838:	ldrb	r6, [r3, #1]!
   1483c:	b	14810 <__assert_fail@plt+0x363c>
   14840:	mov	r2, fp
   14844:	mov	r1, r7
   14848:	mov	r0, r4
   1484c:	bl	110fc <strtoumax@plt>
   14850:	ldr	r6, [r7]
   14854:	cmp	r4, r6
   14858:	strd	r0, [sp, #8]
   1485c:	bne	148c0 <__assert_fail@plt+0x36ec>
   14860:	cmp	r9, #0
   14864:	beq	14828 <__assert_fail@plt+0x3654>
   14868:	ldrb	r1, [r6]
   1486c:	cmp	r1, #0
   14870:	beq	14828 <__assert_fail@plt+0x3654>
   14874:	mov	r0, r9
   14878:	bl	110a8 <strchr@plt>
   1487c:	cmp	r0, #0
   14880:	beq	14828 <__assert_fail@plt+0x3654>
   14884:	mov	r2, #1
   14888:	mov	r3, #0
   1488c:	strd	r2, [sp, #8]
   14890:	ldrb	r4, [r6]
   14894:	cmp	r4, #0
   14898:	beq	149d0 <__assert_fail@plt+0x37fc>
   1489c:	mov	r1, r4
   148a0:	mov	r0, r9
   148a4:	bl	110a8 <strchr@plt>
   148a8:	cmp	r0, #0
   148ac:	bne	148e8 <__assert_fail@plt+0x3714>
   148b0:	ldrd	r2, [sp, #8]
   148b4:	orr	r5, r5, #2
   148b8:	strd	r2, [r8]
   148bc:	b	1482c <__assert_fail@plt+0x3658>
   148c0:	ldr	r5, [sl]
   148c4:	cmp	r5, #0
   148c8:	beq	148d8 <__assert_fail@plt+0x3704>
   148cc:	cmp	r5, #34	; 0x22
   148d0:	bne	14828 <__assert_fail@plt+0x3654>
   148d4:	mov	r5, #1
   148d8:	cmp	r9, #0
   148dc:	bne	14890 <__assert_fail@plt+0x36bc>
   148e0:	strd	r0, [r8]
   148e4:	b	1482c <__assert_fail@plt+0x3658>
   148e8:	cmp	r4, #84	; 0x54
   148ec:	beq	14940 <__assert_fail@plt+0x376c>
   148f0:	bhi	14928 <__assert_fail@plt+0x3754>
   148f4:	cmp	r4, #75	; 0x4b
   148f8:	beq	14940 <__assert_fail@plt+0x376c>
   148fc:	bhi	14918 <__assert_fail@plt+0x3744>
   14900:	cmp	r4, #69	; 0x45
   14904:	beq	14940 <__assert_fail@plt+0x376c>
   14908:	cmp	r4, #71	; 0x47
   1490c:	beq	14940 <__assert_fail@plt+0x376c>
   14910:	mov	r6, #1
   14914:	b	14a04 <__assert_fail@plt+0x3830>
   14918:	cmp	r4, #77	; 0x4d
   1491c:	beq	14940 <__assert_fail@plt+0x376c>
   14920:	cmp	r4, #80	; 0x50
   14924:	b	1490c <__assert_fail@plt+0x3738>
   14928:	cmp	r4, #103	; 0x67
   1492c:	beq	14940 <__assert_fail@plt+0x376c>
   14930:	bhi	149dc <__assert_fail@plt+0x3808>
   14934:	sub	r3, r4, #89	; 0x59
   14938:	cmp	r3, #1
   1493c:	bhi	14910 <__assert_fail@plt+0x373c>
   14940:	mov	r1, #48	; 0x30
   14944:	mov	r0, r9
   14948:	bl	110a8 <strchr@plt>
   1494c:	cmp	r0, #0
   14950:	beq	14910 <__assert_fail@plt+0x373c>
   14954:	ldrb	r3, [r6, #1]
   14958:	cmp	r3, #68	; 0x44
   1495c:	beq	14970 <__assert_fail@plt+0x379c>
   14960:	cmp	r3, #105	; 0x69
   14964:	beq	149f4 <__assert_fail@plt+0x3820>
   14968:	cmp	r3, #66	; 0x42
   1496c:	bne	14910 <__assert_fail@plt+0x373c>
   14970:	mov	r6, #2
   14974:	mov	r1, #1000	; 0x3e8
   14978:	cmp	r4, #89	; 0x59
   1497c:	beq	14ab8 <__assert_fail@plt+0x38e4>
   14980:	bhi	14a2c <__assert_fail@plt+0x3858>
   14984:	cmp	r4, #75	; 0x4b
   14988:	beq	14a6c <__assert_fail@plt+0x3898>
   1498c:	bhi	14a0c <__assert_fail@plt+0x3838>
   14990:	cmp	r4, #69	; 0x45
   14994:	beq	14a94 <__assert_fail@plt+0x38c0>
   14998:	cmp	r4, #71	; 0x47
   1499c:	beq	14aa0 <__assert_fail@plt+0x38cc>
   149a0:	cmp	r4, #66	; 0x42
   149a4:	moveq	r1, #1024	; 0x400
   149a8:	bne	148b0 <__assert_fail@plt+0x36dc>
   149ac:	add	r0, sp, #8
   149b0:	bl	146e0 <__assert_fail@plt+0x350c>
   149b4:	ldr	r3, [r7]
   149b8:	orr	r5, r5, r0
   149bc:	add	r2, r3, r6
   149c0:	str	r2, [r7]
   149c4:	ldrb	r3, [r3, r6]
   149c8:	cmp	r3, #0
   149cc:	orrne	r5, r5, #2
   149d0:	ldrd	r2, [sp, #8]
   149d4:	strd	r2, [r8]
   149d8:	b	1482c <__assert_fail@plt+0x3658>
   149dc:	cmp	r4, #109	; 0x6d
   149e0:	beq	14940 <__assert_fail@plt+0x376c>
   149e4:	cmp	r4, #116	; 0x74
   149e8:	beq	14940 <__assert_fail@plt+0x376c>
   149ec:	cmp	r4, #107	; 0x6b
   149f0:	b	1490c <__assert_fail@plt+0x3738>
   149f4:	ldrb	r6, [r6, #2]
   149f8:	cmp	r6, #66	; 0x42
   149fc:	movne	r6, #1
   14a00:	moveq	r6, #3
   14a04:	mov	r1, #1024	; 0x400
   14a08:	b	14978 <__assert_fail@plt+0x37a4>
   14a0c:	cmp	r4, #80	; 0x50
   14a10:	beq	14aa8 <__assert_fail@plt+0x38d4>
   14a14:	cmp	r4, #84	; 0x54
   14a18:	beq	14ab0 <__assert_fail@plt+0x38dc>
   14a1c:	cmp	r4, #77	; 0x4d
   14a20:	bne	148b0 <__assert_fail@plt+0x36dc>
   14a24:	mov	r2, #2
   14a28:	b	14a98 <__assert_fail@plt+0x38c4>
   14a2c:	cmp	r4, #103	; 0x67
   14a30:	beq	14aa0 <__assert_fail@plt+0x38cc>
   14a34:	bhi	14a58 <__assert_fail@plt+0x3884>
   14a38:	cmp	r4, #98	; 0x62
   14a3c:	beq	14a8c <__assert_fail@plt+0x38b8>
   14a40:	cmp	r4, #99	; 0x63
   14a44:	beq	14ac8 <__assert_fail@plt+0x38f4>
   14a48:	cmp	r4, #90	; 0x5a
   14a4c:	bne	148b0 <__assert_fail@plt+0x36dc>
   14a50:	mov	r2, #7
   14a54:	b	14a98 <__assert_fail@plt+0x38c4>
   14a58:	cmp	r4, #109	; 0x6d
   14a5c:	beq	14a24 <__assert_fail@plt+0x3850>
   14a60:	bhi	14a74 <__assert_fail@plt+0x38a0>
   14a64:	cmp	r4, #107	; 0x6b
   14a68:	bne	148b0 <__assert_fail@plt+0x36dc>
   14a6c:	mov	r2, #1
   14a70:	b	14a98 <__assert_fail@plt+0x38c4>
   14a74:	cmp	r4, #116	; 0x74
   14a78:	beq	14ab0 <__assert_fail@plt+0x38dc>
   14a7c:	cmp	r4, #119	; 0x77
   14a80:	moveq	r1, #2
   14a84:	beq	149ac <__assert_fail@plt+0x37d8>
   14a88:	b	148b0 <__assert_fail@plt+0x36dc>
   14a8c:	mov	r1, #512	; 0x200
   14a90:	b	149ac <__assert_fail@plt+0x37d8>
   14a94:	mov	r2, #6
   14a98:	add	r0, sp, #8
   14a9c:	b	14ac0 <__assert_fail@plt+0x38ec>
   14aa0:	mov	r2, #3
   14aa4:	b	14a98 <__assert_fail@plt+0x38c4>
   14aa8:	mov	r2, #5
   14aac:	b	14a98 <__assert_fail@plt+0x38c4>
   14ab0:	mov	r2, #4
   14ab4:	b	14a98 <__assert_fail@plt+0x38c4>
   14ab8:	mov	r2, #8
   14abc:	add	r0, sp, r2
   14ac0:	bl	14774 <__assert_fail@plt+0x35a0>
   14ac4:	b	149b4 <__assert_fail@plt+0x37e0>
   14ac8:	mov	r0, #0
   14acc:	b	149b4 <__assert_fail@plt+0x37e0>
   14ad0:	andeq	r6, r1, fp, asr #4
   14ad4:	andeq	r6, r1, r7, lsl r2
   14ad8:	andeq	r6, r1, r5, lsr #4
   14adc:	cmp	r1, #0
   14ae0:	cmpne	r0, #0
   14ae4:	moveq	r1, #1
   14ae8:	moveq	r0, r1
   14aec:	umull	r2, r3, r0, r1
   14af0:	adds	r3, r3, #0
   14af4:	movne	r3, #1
   14af8:	cmp	r2, #0
   14afc:	blt	14b0c <__assert_fail@plt+0x3938>
   14b00:	cmp	r3, #0
   14b04:	bne	14b0c <__assert_fail@plt+0x3938>
   14b08:	b	10ed4 <calloc@plt>
   14b0c:	push	{r4, lr}
   14b10:	bl	110b4 <__errno_location@plt>
   14b14:	mov	r3, #12
   14b18:	str	r3, [r0]
   14b1c:	mov	r0, #0
   14b20:	pop	{r4, pc}
   14b24:	cmp	r0, #0
   14b28:	mov	r3, #0
   14b2c:	moveq	r0, #1
   14b30:	adds	r3, r3, #0
   14b34:	movne	r3, #1
   14b38:	cmp	r0, #0
   14b3c:	blt	14b4c <__assert_fail@plt+0x3978>
   14b40:	cmp	r3, #0
   14b44:	bne	14b4c <__assert_fail@plt+0x3978>
   14b48:	b	1103c <malloc@plt>
   14b4c:	push	{r4, lr}
   14b50:	bl	110b4 <__errno_location@plt>
   14b54:	mov	r3, #12
   14b58:	str	r3, [r0]
   14b5c:	mov	r0, #0
   14b60:	pop	{r4, pc}
   14b64:	cmp	r0, #0
   14b68:	push	{r4, lr}
   14b6c:	mov	r4, r1
   14b70:	bne	14b80 <__assert_fail@plt+0x39ac>
   14b74:	mov	r0, r1
   14b78:	pop	{r4, lr}
   14b7c:	b	14b24 <__assert_fail@plt+0x3950>
   14b80:	cmp	r1, #0
   14b84:	bne	14b94 <__assert_fail@plt+0x39c0>
   14b88:	bl	11f14 <__assert_fail@plt+0xd40>
   14b8c:	mov	r0, #0
   14b90:	pop	{r4, pc}
   14b94:	cmp	r1, #0
   14b98:	blt	14ba8 <__assert_fail@plt+0x39d4>
   14b9c:	mov	r3, #0
   14ba0:	cmp	r3, r3
   14ba4:	beq	14bb8 <__assert_fail@plt+0x39e4>
   14ba8:	bl	110b4 <__errno_location@plt>
   14bac:	mov	r3, #12
   14bb0:	str	r3, [r0]
   14bb4:	b	14b8c <__assert_fail@plt+0x39b8>
   14bb8:	pop	{r4, lr}
   14bbc:	b	10f94 <realloc@plt>
   14bc0:	push	{r4, r5, r6, lr}
   14bc4:	mov	r4, r0
   14bc8:	bl	10ff4 <__fpending@plt>
   14bcc:	mov	r5, r0
   14bd0:	mov	r0, r4
   14bd4:	bl	11000 <ferror_unlocked@plt>
   14bd8:	mov	r6, r0
   14bdc:	mov	r0, r4
   14be0:	bl	14c30 <__assert_fail@plt+0x3a5c>
   14be4:	cmp	r6, #0
   14be8:	mov	r4, r0
   14bec:	bne	14c18 <__assert_fail@plt+0x3a44>
   14bf0:	cmp	r0, #0
   14bf4:	beq	14c10 <__assert_fail@plt+0x3a3c>
   14bf8:	cmp	r5, #0
   14bfc:	bne	14c28 <__assert_fail@plt+0x3a54>
   14c00:	bl	110b4 <__errno_location@plt>
   14c04:	ldr	r4, [r0]
   14c08:	subs	r4, r4, #9
   14c0c:	mvnne	r4, #0
   14c10:	mov	r0, r4
   14c14:	pop	{r4, r5, r6, pc}
   14c18:	cmp	r0, #0
   14c1c:	bne	14c28 <__assert_fail@plt+0x3a54>
   14c20:	bl	110b4 <__errno_location@plt>
   14c24:	str	r4, [r0]
   14c28:	mvn	r4, #0
   14c2c:	b	14c10 <__assert_fail@plt+0x3a3c>
   14c30:	push	{r0, r1, r2, r4, r5, lr}
   14c34:	mov	r4, r0
   14c38:	bl	110f0 <fileno@plt>
   14c3c:	cmp	r0, #0
   14c40:	mov	r0, r4
   14c44:	bge	14c54 <__assert_fail@plt+0x3a80>
   14c48:	add	sp, sp, #12
   14c4c:	pop	{r4, r5, lr}
   14c50:	b	11114 <fclose@plt>
   14c54:	bl	11054 <__freading@plt>
   14c58:	cmp	r0, #0
   14c5c:	bne	14c98 <__assert_fail@plt+0x3ac4>
   14c60:	mov	r0, r4
   14c64:	bl	14cd8 <__assert_fail@plt+0x3b04>
   14c68:	cmp	r0, #0
   14c6c:	bne	14ccc <__assert_fail@plt+0x3af8>
   14c70:	mov	r5, #0
   14c74:	mov	r0, r4
   14c78:	bl	11114 <fclose@plt>
   14c7c:	cmp	r5, #0
   14c80:	beq	14c90 <__assert_fail@plt+0x3abc>
   14c84:	bl	110b4 <__errno_location@plt>
   14c88:	str	r5, [r0]
   14c8c:	mvn	r0, #0
   14c90:	add	sp, sp, #12
   14c94:	pop	{r4, r5, pc}
   14c98:	mov	r0, r4
   14c9c:	bl	110f0 <fileno@plt>
   14ca0:	mov	r3, #1
   14ca4:	str	r3, [sp]
   14ca8:	mov	r2, #0
   14cac:	mov	r3, #0
   14cb0:	bl	10fd0 <lseek64@plt>
   14cb4:	mvn	r3, #0
   14cb8:	mvn	r2, #0
   14cbc:	cmp	r1, r3
   14cc0:	cmpeq	r0, r2
   14cc4:	bne	14c60 <__assert_fail@plt+0x3a8c>
   14cc8:	b	14c70 <__assert_fail@plt+0x3a9c>
   14ccc:	bl	110b4 <__errno_location@plt>
   14cd0:	ldr	r5, [r0]
   14cd4:	b	14c74 <__assert_fail@plt+0x3aa0>
   14cd8:	push	{r0, r1, r4, lr}
   14cdc:	subs	r4, r0, #0
   14ce0:	bne	14cf4 <__assert_fail@plt+0x3b20>
   14ce4:	mov	r0, r4
   14ce8:	add	sp, sp, #8
   14cec:	pop	{r4, lr}
   14cf0:	b	10f28 <fflush@plt>
   14cf4:	bl	11054 <__freading@plt>
   14cf8:	cmp	r0, #0
   14cfc:	beq	14ce4 <__assert_fail@plt+0x3b10>
   14d00:	ldr	r3, [r4]
   14d04:	tst	r3, #256	; 0x100
   14d08:	beq	14ce4 <__assert_fail@plt+0x3b10>
   14d0c:	mov	r3, #1
   14d10:	str	r3, [sp]
   14d14:	mov	r2, #0
   14d18:	mov	r3, #0
   14d1c:	mov	r0, r4
   14d20:	bl	14d28 <__assert_fail@plt+0x3b54>
   14d24:	b	14ce4 <__assert_fail@plt+0x3b10>
   14d28:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14d2c:	mov	r4, r0
   14d30:	ldmib	r0, {ip, lr}
   14d34:	ldr	r8, [sp, #32]
   14d38:	cmp	lr, ip
   14d3c:	bne	14da8 <__assert_fail@plt+0x3bd4>
   14d40:	ldr	lr, [r0, #20]
   14d44:	ldr	ip, [r0, #16]
   14d48:	cmp	lr, ip
   14d4c:	bne	14da8 <__assert_fail@plt+0x3bd4>
   14d50:	ldr	r5, [r0, #36]	; 0x24
   14d54:	cmp	r5, #0
   14d58:	bne	14da8 <__assert_fail@plt+0x3bd4>
   14d5c:	mov	r6, r2
   14d60:	mov	r7, r3
   14d64:	bl	110f0 <fileno@plt>
   14d68:	mov	r2, r6
   14d6c:	mov	r3, r7
   14d70:	str	r8, [sp]
   14d74:	bl	10fd0 <lseek64@plt>
   14d78:	mvn	r3, #0
   14d7c:	mvn	r2, #0
   14d80:	cmp	r1, r3
   14d84:	cmpeq	r0, r2
   14d88:	mvneq	r0, #0
   14d8c:	ldrne	r3, [r4]
   14d90:	strdne	r0, [r4, #80]	; 0x50
   14d94:	movne	r0, r5
   14d98:	bicne	r3, r3, #16
   14d9c:	strne	r3, [r4]
   14da0:	add	sp, sp, #8
   14da4:	pop	{r4, r5, r6, r7, r8, pc}
   14da8:	str	r8, [sp, #32]
   14dac:	mov	r0, r4
   14db0:	add	sp, sp, #8
   14db4:	pop	{r4, r5, r6, r7, r8, lr}
   14db8:	b	11120 <fseeko64@plt>
   14dbc:	push	{r4, r5, r6, r8, r9, lr}
   14dc0:	mov	r4, r0
   14dc4:	mov	r5, r1
   14dc8:	add	r6, r2, #20
   14dcc:	mov	r8, #10
   14dd0:	mov	r9, #0
   14dd4:	mov	r3, #0
   14dd8:	strb	r3, [r2, #20]
   14ddc:	mov	r0, r4
   14de0:	mov	r1, r5
   14de4:	mov	r2, r8
   14de8:	mov	r3, r9
   14dec:	bl	155f0 <__assert_fail@plt+0x441c>
   14df0:	mov	r3, r9
   14df4:	mov	r0, r4
   14df8:	mov	r1, r5
   14dfc:	add	r2, r2, #48	; 0x30
   14e00:	strb	r2, [r6, #-1]!
   14e04:	mov	r2, r8
   14e08:	bl	155f0 <__assert_fail@plt+0x441c>
   14e0c:	mov	r4, r0
   14e10:	mov	r5, r1
   14e14:	orrs	r3, r4, r5
   14e18:	bne	14ddc <__assert_fail@plt+0x3c08>
   14e1c:	mov	r0, r6
   14e20:	pop	{r4, r5, r6, r8, r9, pc}
   14e24:	push	{r4, lr}
   14e28:	mov	r0, #14
   14e2c:	bl	1115c <nl_langinfo@plt>
   14e30:	ldr	r3, [pc, #24]	; 14e50 <__assert_fail@plt+0x3c7c>
   14e34:	cmp	r0, #0
   14e38:	moveq	r0, r3
   14e3c:	ldr	r3, [pc, #16]	; 14e54 <__assert_fail@plt+0x3c80>
   14e40:	ldrb	r2, [r0]
   14e44:	cmp	r2, #0
   14e48:	moveq	r0, r3
   14e4c:	pop	{r4, pc}
   14e50:	andeq	r5, r1, ip, asr #18
   14e54:	andeq	r6, r1, r6, asr r2
   14e58:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14e5c:	subs	r5, r0, #0
   14e60:	addeq	r5, sp, #4
   14e64:	mov	r0, r5
   14e68:	mov	r7, r2
   14e6c:	mov	r6, r1
   14e70:	bl	1100c <mbrtowc@plt>
   14e74:	cmp	r7, #0
   14e78:	cmnne	r0, #3
   14e7c:	mov	r4, r0
   14e80:	bls	14e9c <__assert_fail@plt+0x3cc8>
   14e84:	mov	r0, #0
   14e88:	bl	150c4 <__assert_fail@plt+0x3ef0>
   14e8c:	cmp	r0, #0
   14e90:	moveq	r4, #1
   14e94:	ldrbeq	r3, [r6]
   14e98:	streq	r3, [r5]
   14e9c:	mov	r0, r4
   14ea0:	add	sp, sp, #12
   14ea4:	pop	{r4, r5, r6, r7, pc}
   14ea8:	lsrs	r3, r1, #30
   14eac:	movne	r3, #1
   14eb0:	moveq	r3, #0
   14eb4:	lsls	r1, r1, #2
   14eb8:	bmi	14ec8 <__assert_fail@plt+0x3cf4>
   14ebc:	cmp	r3, #0
   14ec0:	bne	14ec8 <__assert_fail@plt+0x3cf4>
   14ec4:	b	14b64 <__assert_fail@plt+0x3990>
   14ec8:	push	{r4, lr}
   14ecc:	bl	110b4 <__errno_location@plt>
   14ed0:	mov	r3, #12
   14ed4:	str	r3, [r0]
   14ed8:	mov	r0, #0
   14edc:	pop	{r4, pc}
   14ee0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14ee4:	subs	r8, r0, #0
   14ee8:	mov	r5, r1
   14eec:	mov	r7, r2
   14ef0:	beq	14f80 <__assert_fail@plt+0x3dac>
   14ef4:	mov	r1, #10
   14ef8:	mov	r0, #0
   14efc:	str	r1, [sp, #4]
   14f00:	bl	14ea8 <__assert_fail@plt+0x3cd4>
   14f04:	subs	r4, r0, #0
   14f08:	bne	14f18 <__assert_fail@plt+0x3d44>
   14f0c:	mvn	r0, #0
   14f10:	add	sp, sp, #12
   14f14:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f18:	add	r3, sp, #4
   14f1c:	mov	r2, r4
   14f20:	mov	r1, r5
   14f24:	mov	r0, r8
   14f28:	ldr	r6, [sp, #4]
   14f2c:	bl	110cc <getgrouplist@plt>
   14f30:	subs	r9, r0, #0
   14f34:	bge	14f48 <__assert_fail@plt+0x3d74>
   14f38:	ldr	r3, [sp, #4]
   14f3c:	cmp	r6, r3
   14f40:	lsleq	r6, r6, #1
   14f44:	streq	r6, [sp, #4]
   14f48:	ldr	r1, [sp, #4]
   14f4c:	mov	r0, r4
   14f50:	bl	14ea8 <__assert_fail@plt+0x3cd4>
   14f54:	cmp	r0, #0
   14f58:	bne	14f68 <__assert_fail@plt+0x3d94>
   14f5c:	mov	r0, r4
   14f60:	bl	11f14 <__assert_fail@plt+0xd40>
   14f64:	b	14f0c <__assert_fail@plt+0x3d38>
   14f68:	cmp	r9, #0
   14f6c:	mov	r4, r0
   14f70:	blt	14f18 <__assert_fail@plt+0x3d44>
   14f74:	str	r0, [r7]
   14f78:	ldr	r0, [sp, #4]
   14f7c:	b	14f10 <__assert_fail@plt+0x3d3c>
   14f80:	mov	r1, r8
   14f84:	bl	11174 <getgroups@plt>
   14f88:	cmp	r0, #0
   14f8c:	str	r0, [sp, #4]
   14f90:	bge	14fcc <__assert_fail@plt+0x3df8>
   14f94:	bl	110b4 <__errno_location@plt>
   14f98:	ldr	r3, [r0]
   14f9c:	cmp	r3, #38	; 0x26
   14fa0:	bne	14f0c <__assert_fail@plt+0x3d38>
   14fa4:	mov	r1, #1
   14fa8:	mov	r0, r8
   14fac:	bl	14ea8 <__assert_fail@plt+0x3cd4>
   14fb0:	cmp	r0, #0
   14fb4:	beq	14f0c <__assert_fail@plt+0x3d38>
   14fb8:	str	r0, [r7]
   14fbc:	str	r5, [r0]
   14fc0:	adds	r0, r5, #1
   14fc4:	movne	r0, #1
   14fc8:	b	14f10 <__assert_fail@plt+0x3d3c>
   14fcc:	adds	r6, r5, #1
   14fd0:	movne	r6, #1
   14fd4:	cmp	r0, #0
   14fd8:	movne	r3, r6
   14fdc:	orreq	r3, r6, #1
   14fe0:	cmp	r3, #0
   14fe4:	addne	r0, r0, #1
   14fe8:	strne	r0, [sp, #4]
   14fec:	mov	r0, #0
   14ff0:	ldr	r1, [sp, #4]
   14ff4:	bl	14ea8 <__assert_fail@plt+0x3cd4>
   14ff8:	subs	r4, r0, #0
   14ffc:	beq	14f0c <__assert_fail@plt+0x3d38>
   15000:	cmn	r5, #1
   15004:	ldr	r0, [sp, #4]
   15008:	movne	r1, #4
   1500c:	moveq	r1, #0
   15010:	add	r1, r4, r1
   15014:	sub	r0, r0, r6
   15018:	bl	11174 <getgroups@plt>
   1501c:	cmp	r0, #0
   15020:	blt	14f5c <__assert_fail@plt+0x3d88>
   15024:	cmn	r5, #1
   15028:	addne	r0, r0, #1
   1502c:	strne	r5, [r4]
   15030:	cmp	r0, #1
   15034:	str	r4, [r7]
   15038:	ldrgt	ip, [r4]
   1503c:	addgt	r1, r4, r0, lsl #2
   15040:	addgt	r3, r4, #4
   15044:	ble	14f10 <__assert_fail@plt+0x3d3c>
   15048:	cmp	r1, r3
   1504c:	bls	14f10 <__assert_fail@plt+0x3d3c>
   15050:	ldr	r2, [r3], #4
   15054:	cmp	ip, r2
   15058:	beq	15070 <__assert_fail@plt+0x3e9c>
   1505c:	ldr	lr, [r4]
   15060:	cmp	r2, lr
   15064:	strne	r2, [r4, #4]
   15068:	addne	r4, r4, #4
   1506c:	bne	15048 <__assert_fail@plt+0x3e74>
   15070:	sub	r0, r0, #1
   15074:	b	15048 <__assert_fail@plt+0x3e74>
   15078:	push	{r4, r5, r6, lr}
   1507c:	subs	r4, r2, #0
   15080:	mov	r6, r0
   15084:	mov	r5, r1
   15088:	beq	150a0 <__assert_fail@plt+0x3ecc>
   1508c:	mov	r1, r4
   15090:	mvn	r0, #0
   15094:	bl	151a4 <__assert_fail@plt+0x3fd0>
   15098:	cmp	r0, r5
   1509c:	bcc	150b0 <__assert_fail@plt+0x3edc>
   150a0:	mul	r1, r5, r4
   150a4:	mov	r0, r6
   150a8:	pop	{r4, r5, r6, lr}
   150ac:	b	14b64 <__assert_fail@plt+0x3990>
   150b0:	bl	110b4 <__errno_location@plt>
   150b4:	mov	r3, #12
   150b8:	str	r3, [r0]
   150bc:	mov	r0, #0
   150c0:	pop	{r4, r5, r6, pc}
   150c4:	push	{lr}		; (str lr, [sp, #-4]!)
   150c8:	sub	sp, sp, #268	; 0x10c
   150cc:	ldr	r2, [pc, #64]	; 15114 <__assert_fail@plt+0x3f40>
   150d0:	add	r1, sp, #4
   150d4:	bl	15120 <__assert_fail@plt+0x3f4c>
   150d8:	cmp	r0, #0
   150dc:	movne	r0, #0
   150e0:	bne	1510c <__assert_fail@plt+0x3f38>
   150e4:	ldr	r1, [pc, #44]	; 15118 <__assert_fail@plt+0x3f44>
   150e8:	add	r0, sp, #4
   150ec:	bl	10f10 <strcmp@plt>
   150f0:	cmp	r0, #0
   150f4:	beq	1510c <__assert_fail@plt+0x3f38>
   150f8:	ldr	r1, [pc, #28]	; 1511c <__assert_fail@plt+0x3f48>
   150fc:	add	r0, sp, #4
   15100:	bl	10f10 <strcmp@plt>
   15104:	adds	r0, r0, #0
   15108:	movne	r0, #1
   1510c:	add	sp, sp, #268	; 0x10c
   15110:	pop	{pc}		; (ldr pc, [sp], #4)
   15114:	andeq	r0, r0, r1, lsl #2
   15118:	andeq	r6, r1, ip, asr r2
   1511c:	andeq	r6, r1, lr, asr r2
   15120:	push	{r4, r5, r6, lr}
   15124:	mov	r5, r1
   15128:	mov	r1, #0
   1512c:	mov	r4, r2
   15130:	bl	11138 <setlocale@plt>
   15134:	subs	r6, r0, #0
   15138:	bne	1514c <__assert_fail@plt+0x3f78>
   1513c:	cmp	r4, #0
   15140:	strbne	r6, [r5]
   15144:	mov	r0, #22
   15148:	pop	{r4, r5, r6, pc}
   1514c:	bl	1109c <strlen@plt>
   15150:	cmp	r4, r0
   15154:	bls	15170 <__assert_fail@plt+0x3f9c>
   15158:	add	r2, r0, #1
   1515c:	mov	r1, r6
   15160:	mov	r0, r5
   15164:	bl	10f4c <memcpy@plt>
   15168:	mov	r0, #0
   1516c:	pop	{r4, r5, r6, pc}
   15170:	cmp	r4, #0
   15174:	beq	15194 <__assert_fail@plt+0x3fc0>
   15178:	sub	r4, r4, #1
   1517c:	mov	r2, r4
   15180:	mov	r1, r6
   15184:	mov	r0, r5
   15188:	bl	10f4c <memcpy@plt>
   1518c:	mov	r3, #0
   15190:	strb	r3, [r5, r4]
   15194:	mov	r0, #34	; 0x22
   15198:	pop	{r4, r5, r6, pc}
   1519c:	mov	r1, #0
   151a0:	b	11138 <setlocale@plt>
   151a4:	subs	r2, r1, #1
   151a8:	bxeq	lr
   151ac:	bcc	15384 <__assert_fail@plt+0x41b0>
   151b0:	cmp	r0, r1
   151b4:	bls	15368 <__assert_fail@plt+0x4194>
   151b8:	tst	r1, r2
   151bc:	beq	15374 <__assert_fail@plt+0x41a0>
   151c0:	clz	r3, r0
   151c4:	clz	r2, r1
   151c8:	sub	r3, r2, r3
   151cc:	rsbs	r3, r3, #31
   151d0:	addne	r3, r3, r3, lsl #1
   151d4:	mov	r2, #0
   151d8:	addne	pc, pc, r3, lsl #2
   151dc:	nop			; (mov r0, r0)
   151e0:	cmp	r0, r1, lsl #31
   151e4:	adc	r2, r2, r2
   151e8:	subcs	r0, r0, r1, lsl #31
   151ec:	cmp	r0, r1, lsl #30
   151f0:	adc	r2, r2, r2
   151f4:	subcs	r0, r0, r1, lsl #30
   151f8:	cmp	r0, r1, lsl #29
   151fc:	adc	r2, r2, r2
   15200:	subcs	r0, r0, r1, lsl #29
   15204:	cmp	r0, r1, lsl #28
   15208:	adc	r2, r2, r2
   1520c:	subcs	r0, r0, r1, lsl #28
   15210:	cmp	r0, r1, lsl #27
   15214:	adc	r2, r2, r2
   15218:	subcs	r0, r0, r1, lsl #27
   1521c:	cmp	r0, r1, lsl #26
   15220:	adc	r2, r2, r2
   15224:	subcs	r0, r0, r1, lsl #26
   15228:	cmp	r0, r1, lsl #25
   1522c:	adc	r2, r2, r2
   15230:	subcs	r0, r0, r1, lsl #25
   15234:	cmp	r0, r1, lsl #24
   15238:	adc	r2, r2, r2
   1523c:	subcs	r0, r0, r1, lsl #24
   15240:	cmp	r0, r1, lsl #23
   15244:	adc	r2, r2, r2
   15248:	subcs	r0, r0, r1, lsl #23
   1524c:	cmp	r0, r1, lsl #22
   15250:	adc	r2, r2, r2
   15254:	subcs	r0, r0, r1, lsl #22
   15258:	cmp	r0, r1, lsl #21
   1525c:	adc	r2, r2, r2
   15260:	subcs	r0, r0, r1, lsl #21
   15264:	cmp	r0, r1, lsl #20
   15268:	adc	r2, r2, r2
   1526c:	subcs	r0, r0, r1, lsl #20
   15270:	cmp	r0, r1, lsl #19
   15274:	adc	r2, r2, r2
   15278:	subcs	r0, r0, r1, lsl #19
   1527c:	cmp	r0, r1, lsl #18
   15280:	adc	r2, r2, r2
   15284:	subcs	r0, r0, r1, lsl #18
   15288:	cmp	r0, r1, lsl #17
   1528c:	adc	r2, r2, r2
   15290:	subcs	r0, r0, r1, lsl #17
   15294:	cmp	r0, r1, lsl #16
   15298:	adc	r2, r2, r2
   1529c:	subcs	r0, r0, r1, lsl #16
   152a0:	cmp	r0, r1, lsl #15
   152a4:	adc	r2, r2, r2
   152a8:	subcs	r0, r0, r1, lsl #15
   152ac:	cmp	r0, r1, lsl #14
   152b0:	adc	r2, r2, r2
   152b4:	subcs	r0, r0, r1, lsl #14
   152b8:	cmp	r0, r1, lsl #13
   152bc:	adc	r2, r2, r2
   152c0:	subcs	r0, r0, r1, lsl #13
   152c4:	cmp	r0, r1, lsl #12
   152c8:	adc	r2, r2, r2
   152cc:	subcs	r0, r0, r1, lsl #12
   152d0:	cmp	r0, r1, lsl #11
   152d4:	adc	r2, r2, r2
   152d8:	subcs	r0, r0, r1, lsl #11
   152dc:	cmp	r0, r1, lsl #10
   152e0:	adc	r2, r2, r2
   152e4:	subcs	r0, r0, r1, lsl #10
   152e8:	cmp	r0, r1, lsl #9
   152ec:	adc	r2, r2, r2
   152f0:	subcs	r0, r0, r1, lsl #9
   152f4:	cmp	r0, r1, lsl #8
   152f8:	adc	r2, r2, r2
   152fc:	subcs	r0, r0, r1, lsl #8
   15300:	cmp	r0, r1, lsl #7
   15304:	adc	r2, r2, r2
   15308:	subcs	r0, r0, r1, lsl #7
   1530c:	cmp	r0, r1, lsl #6
   15310:	adc	r2, r2, r2
   15314:	subcs	r0, r0, r1, lsl #6
   15318:	cmp	r0, r1, lsl #5
   1531c:	adc	r2, r2, r2
   15320:	subcs	r0, r0, r1, lsl #5
   15324:	cmp	r0, r1, lsl #4
   15328:	adc	r2, r2, r2
   1532c:	subcs	r0, r0, r1, lsl #4
   15330:	cmp	r0, r1, lsl #3
   15334:	adc	r2, r2, r2
   15338:	subcs	r0, r0, r1, lsl #3
   1533c:	cmp	r0, r1, lsl #2
   15340:	adc	r2, r2, r2
   15344:	subcs	r0, r0, r1, lsl #2
   15348:	cmp	r0, r1, lsl #1
   1534c:	adc	r2, r2, r2
   15350:	subcs	r0, r0, r1, lsl #1
   15354:	cmp	r0, r1
   15358:	adc	r2, r2, r2
   1535c:	subcs	r0, r0, r1
   15360:	mov	r0, r2
   15364:	bx	lr
   15368:	moveq	r0, #1
   1536c:	movne	r0, #0
   15370:	bx	lr
   15374:	clz	r2, r1
   15378:	rsb	r2, r2, #31
   1537c:	lsr	r0, r0, r2
   15380:	bx	lr
   15384:	cmp	r0, #0
   15388:	mvnne	r0, #0
   1538c:	b	1562c <__assert_fail@plt+0x4458>
   15390:	cmp	r1, #0
   15394:	beq	15384 <__assert_fail@plt+0x41b0>
   15398:	push	{r0, r1, lr}
   1539c:	bl	151a4 <__assert_fail@plt+0x3fd0>
   153a0:	pop	{r1, r2, lr}
   153a4:	mul	r3, r2, r0
   153a8:	sub	r1, r1, r3
   153ac:	bx	lr
   153b0:	cmp	r1, #0
   153b4:	beq	155c0 <__assert_fail@plt+0x43ec>
   153b8:	eor	ip, r0, r1
   153bc:	rsbmi	r1, r1, #0
   153c0:	subs	r2, r1, #1
   153c4:	beq	1558c <__assert_fail@plt+0x43b8>
   153c8:	movs	r3, r0
   153cc:	rsbmi	r3, r0, #0
   153d0:	cmp	r3, r1
   153d4:	bls	15598 <__assert_fail@plt+0x43c4>
   153d8:	tst	r1, r2
   153dc:	beq	155a8 <__assert_fail@plt+0x43d4>
   153e0:	clz	r2, r3
   153e4:	clz	r0, r1
   153e8:	sub	r2, r0, r2
   153ec:	rsbs	r2, r2, #31
   153f0:	addne	r2, r2, r2, lsl #1
   153f4:	mov	r0, #0
   153f8:	addne	pc, pc, r2, lsl #2
   153fc:	nop			; (mov r0, r0)
   15400:	cmp	r3, r1, lsl #31
   15404:	adc	r0, r0, r0
   15408:	subcs	r3, r3, r1, lsl #31
   1540c:	cmp	r3, r1, lsl #30
   15410:	adc	r0, r0, r0
   15414:	subcs	r3, r3, r1, lsl #30
   15418:	cmp	r3, r1, lsl #29
   1541c:	adc	r0, r0, r0
   15420:	subcs	r3, r3, r1, lsl #29
   15424:	cmp	r3, r1, lsl #28
   15428:	adc	r0, r0, r0
   1542c:	subcs	r3, r3, r1, lsl #28
   15430:	cmp	r3, r1, lsl #27
   15434:	adc	r0, r0, r0
   15438:	subcs	r3, r3, r1, lsl #27
   1543c:	cmp	r3, r1, lsl #26
   15440:	adc	r0, r0, r0
   15444:	subcs	r3, r3, r1, lsl #26
   15448:	cmp	r3, r1, lsl #25
   1544c:	adc	r0, r0, r0
   15450:	subcs	r3, r3, r1, lsl #25
   15454:	cmp	r3, r1, lsl #24
   15458:	adc	r0, r0, r0
   1545c:	subcs	r3, r3, r1, lsl #24
   15460:	cmp	r3, r1, lsl #23
   15464:	adc	r0, r0, r0
   15468:	subcs	r3, r3, r1, lsl #23
   1546c:	cmp	r3, r1, lsl #22
   15470:	adc	r0, r0, r0
   15474:	subcs	r3, r3, r1, lsl #22
   15478:	cmp	r3, r1, lsl #21
   1547c:	adc	r0, r0, r0
   15480:	subcs	r3, r3, r1, lsl #21
   15484:	cmp	r3, r1, lsl #20
   15488:	adc	r0, r0, r0
   1548c:	subcs	r3, r3, r1, lsl #20
   15490:	cmp	r3, r1, lsl #19
   15494:	adc	r0, r0, r0
   15498:	subcs	r3, r3, r1, lsl #19
   1549c:	cmp	r3, r1, lsl #18
   154a0:	adc	r0, r0, r0
   154a4:	subcs	r3, r3, r1, lsl #18
   154a8:	cmp	r3, r1, lsl #17
   154ac:	adc	r0, r0, r0
   154b0:	subcs	r3, r3, r1, lsl #17
   154b4:	cmp	r3, r1, lsl #16
   154b8:	adc	r0, r0, r0
   154bc:	subcs	r3, r3, r1, lsl #16
   154c0:	cmp	r3, r1, lsl #15
   154c4:	adc	r0, r0, r0
   154c8:	subcs	r3, r3, r1, lsl #15
   154cc:	cmp	r3, r1, lsl #14
   154d0:	adc	r0, r0, r0
   154d4:	subcs	r3, r3, r1, lsl #14
   154d8:	cmp	r3, r1, lsl #13
   154dc:	adc	r0, r0, r0
   154e0:	subcs	r3, r3, r1, lsl #13
   154e4:	cmp	r3, r1, lsl #12
   154e8:	adc	r0, r0, r0
   154ec:	subcs	r3, r3, r1, lsl #12
   154f0:	cmp	r3, r1, lsl #11
   154f4:	adc	r0, r0, r0
   154f8:	subcs	r3, r3, r1, lsl #11
   154fc:	cmp	r3, r1, lsl #10
   15500:	adc	r0, r0, r0
   15504:	subcs	r3, r3, r1, lsl #10
   15508:	cmp	r3, r1, lsl #9
   1550c:	adc	r0, r0, r0
   15510:	subcs	r3, r3, r1, lsl #9
   15514:	cmp	r3, r1, lsl #8
   15518:	adc	r0, r0, r0
   1551c:	subcs	r3, r3, r1, lsl #8
   15520:	cmp	r3, r1, lsl #7
   15524:	adc	r0, r0, r0
   15528:	subcs	r3, r3, r1, lsl #7
   1552c:	cmp	r3, r1, lsl #6
   15530:	adc	r0, r0, r0
   15534:	subcs	r3, r3, r1, lsl #6
   15538:	cmp	r3, r1, lsl #5
   1553c:	adc	r0, r0, r0
   15540:	subcs	r3, r3, r1, lsl #5
   15544:	cmp	r3, r1, lsl #4
   15548:	adc	r0, r0, r0
   1554c:	subcs	r3, r3, r1, lsl #4
   15550:	cmp	r3, r1, lsl #3
   15554:	adc	r0, r0, r0
   15558:	subcs	r3, r3, r1, lsl #3
   1555c:	cmp	r3, r1, lsl #2
   15560:	adc	r0, r0, r0
   15564:	subcs	r3, r3, r1, lsl #2
   15568:	cmp	r3, r1, lsl #1
   1556c:	adc	r0, r0, r0
   15570:	subcs	r3, r3, r1, lsl #1
   15574:	cmp	r3, r1
   15578:	adc	r0, r0, r0
   1557c:	subcs	r3, r3, r1
   15580:	cmp	ip, #0
   15584:	rsbmi	r0, r0, #0
   15588:	bx	lr
   1558c:	teq	ip, r0
   15590:	rsbmi	r0, r0, #0
   15594:	bx	lr
   15598:	movcc	r0, #0
   1559c:	asreq	r0, ip, #31
   155a0:	orreq	r0, r0, #1
   155a4:	bx	lr
   155a8:	clz	r2, r1
   155ac:	rsb	r2, r2, #31
   155b0:	cmp	ip, #0
   155b4:	lsr	r0, r3, r2
   155b8:	rsbmi	r0, r0, #0
   155bc:	bx	lr
   155c0:	cmp	r0, #0
   155c4:	mvngt	r0, #-2147483648	; 0x80000000
   155c8:	movlt	r0, #-2147483648	; 0x80000000
   155cc:	b	1562c <__assert_fail@plt+0x4458>
   155d0:	cmp	r1, #0
   155d4:	beq	155c0 <__assert_fail@plt+0x43ec>
   155d8:	push	{r0, r1, lr}
   155dc:	bl	153b8 <__assert_fail@plt+0x41e4>
   155e0:	pop	{r1, r2, lr}
   155e4:	mul	r3, r2, r0
   155e8:	sub	r1, r1, r3
   155ec:	bx	lr
   155f0:	cmp	r3, #0
   155f4:	cmpeq	r2, #0
   155f8:	bne	15610 <__assert_fail@plt+0x443c>
   155fc:	cmp	r1, #0
   15600:	cmpeq	r0, #0
   15604:	mvnne	r1, #0
   15608:	mvnne	r0, #0
   1560c:	b	1562c <__assert_fail@plt+0x4458>
   15610:	sub	sp, sp, #8
   15614:	push	{sp, lr}
   15618:	bl	1563c <__assert_fail@plt+0x4468>
   1561c:	ldr	lr, [sp, #4]
   15620:	add	sp, sp, #8
   15624:	pop	{r2, r3}
   15628:	bx	lr
   1562c:	push	{r1, lr}
   15630:	mov	r0, #8
   15634:	bl	10ef8 <raise@plt>
   15638:	pop	{r1, pc}
   1563c:	cmp	r1, r3
   15640:	push	{r4, r5, r6, r7, r8, r9, lr}
   15644:	cmpeq	r0, r2
   15648:	mov	r4, r0
   1564c:	mov	r5, r1
   15650:	ldr	r9, [sp, #28]
   15654:	movcc	r0, #0
   15658:	movcc	r1, #0
   1565c:	bcc	15754 <__assert_fail@plt+0x4580>
   15660:	cmp	r3, #0
   15664:	clzeq	ip, r2
   15668:	clzne	ip, r3
   1566c:	addeq	ip, ip, #32
   15670:	cmp	r5, #0
   15674:	clzeq	r1, r4
   15678:	addeq	r1, r1, #32
   1567c:	clzne	r1, r5
   15680:	sub	ip, ip, r1
   15684:	sub	lr, ip, #32
   15688:	lsl	r7, r3, ip
   1568c:	rsb	r8, ip, #32
   15690:	orr	r7, r7, r2, lsl lr
   15694:	orr	r7, r7, r2, lsr r8
   15698:	lsl	r6, r2, ip
   1569c:	cmp	r5, r7
   156a0:	cmpeq	r4, r6
   156a4:	movcc	r0, #0
   156a8:	movcc	r1, #0
   156ac:	bcc	156c8 <__assert_fail@plt+0x44f4>
   156b0:	mov	r3, #1
   156b4:	subs	r4, r4, r6
   156b8:	lsl	r1, r3, lr
   156bc:	lsl	r0, r3, ip
   156c0:	orr	r1, r1, r3, lsr r8
   156c4:	sbc	r5, r5, r7
   156c8:	cmp	ip, #0
   156cc:	beq	15754 <__assert_fail@plt+0x4580>
   156d0:	lsrs	r3, r7, #1
   156d4:	rrx	r2, r6
   156d8:	mov	r6, ip
   156dc:	b	15700 <__assert_fail@plt+0x452c>
   156e0:	subs	r4, r4, r2
   156e4:	sbc	r5, r5, r3
   156e8:	adds	r4, r4, r4
   156ec:	adc	r5, r5, r5
   156f0:	adds	r4, r4, #1
   156f4:	adc	r5, r5, #0
   156f8:	subs	r6, r6, #1
   156fc:	beq	1571c <__assert_fail@plt+0x4548>
   15700:	cmp	r5, r3
   15704:	cmpeq	r4, r2
   15708:	bcs	156e0 <__assert_fail@plt+0x450c>
   1570c:	adds	r4, r4, r4
   15710:	adc	r5, r5, r5
   15714:	subs	r6, r6, #1
   15718:	bne	15700 <__assert_fail@plt+0x452c>
   1571c:	lsr	r6, r4, ip
   15720:	lsr	r7, r5, ip
   15724:	orr	r6, r6, r5, lsl r8
   15728:	adds	r2, r0, r4
   1572c:	orr	r6, r6, r5, lsr lr
   15730:	adc	r3, r1, r5
   15734:	lsl	r1, r7, ip
   15738:	orr	r1, r1, r6, lsl lr
   1573c:	lsl	r0, r6, ip
   15740:	orr	r1, r1, r6, lsr r8
   15744:	subs	r0, r2, r0
   15748:	mov	r4, r6
   1574c:	mov	r5, r7
   15750:	sbc	r1, r3, r1
   15754:	cmp	r9, #0
   15758:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1575c:	strd	r4, [r9]
   15760:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15764:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15768:	mov	r7, r0
   1576c:	ldr	r6, [pc, #72]	; 157bc <__assert_fail@plt+0x45e8>
   15770:	ldr	r5, [pc, #72]	; 157c0 <__assert_fail@plt+0x45ec>
   15774:	add	r6, pc, r6
   15778:	add	r5, pc, r5
   1577c:	sub	r6, r6, r5
   15780:	mov	r8, r1
   15784:	mov	r9, r2
   15788:	bl	10eb4 <calloc@plt-0x20>
   1578c:	asrs	r6, r6, #2
   15790:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15794:	mov	r4, #0
   15798:	add	r4, r4, #1
   1579c:	ldr	r3, [r5], #4
   157a0:	mov	r2, r9
   157a4:	mov	r1, r8
   157a8:	mov	r0, r7
   157ac:	blx	r3
   157b0:	cmp	r6, r4
   157b4:	bne	15798 <__assert_fail@plt+0x45c4>
   157b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157bc:	muleq	r1, r4, r7
   157c0:	andeq	r1, r1, ip, lsl #15
   157c4:	bx	lr
   157c8:	ldr	r3, [pc, #12]	; 157dc <__assert_fail@plt+0x4608>
   157cc:	mov	r1, #0
   157d0:	add	r3, pc, r3
   157d4:	ldr	r2, [r3]
   157d8:	b	110c0 <__cxa_atexit@plt>
   157dc:	andeq	r1, r1, r0, asr #18

Disassembly of section .fini:

000157e0 <.fini>:
   157e0:	push	{r3, lr}
   157e4:	pop	{r3, pc}
